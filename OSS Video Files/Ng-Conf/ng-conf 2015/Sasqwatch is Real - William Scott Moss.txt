Title: Sasqwatch is Real - William Scott Moss
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,900


00:00:00,900 --> 00:00:03,701
SCOTT MOSS: Let's do it.

00:00:03,701 --> 00:00:04,200
Cool.

00:00:04,200 --> 00:00:10,910
So I'm going to be talking to you guys about Sasqwatches.

00:00:10,910 --> 00:00:14,145
So before I get there, a little bit about myself.

00:00:14,145 --> 00:00:15,520
So I think it's important, I like

00:00:15,520 --> 00:00:16,686
to connect with my audience.

00:00:16,686 --> 00:00:18,770
And I've been doing a lot of talking lately.

00:00:18,770 --> 00:00:22,306
And I know I have a very particular background

00:00:22,306 --> 00:00:24,180
that I know there's a lot of people out there

00:00:24,180 --> 00:00:27,120
that really would like to follow their dreams

00:00:27,120 --> 00:00:29,680
and get involved like I used to want to really bad.

00:00:29,680 --> 00:00:31,100
And still do, couple years ago.

00:00:31,100 --> 00:00:35,820
So not even two years ago, I was active duty in the Navy.

00:00:35,820 --> 00:00:37,370
Didn't know how to program at all.

00:00:37,370 --> 00:00:39,830
Had no idea how to get involved.

00:00:39,830 --> 00:00:41,310
But I wanted to.

00:00:41,310 --> 00:00:43,880
So after I got medically discharged out of the Navy,

00:00:43,880 --> 00:00:45,125
I moved to San Francisco.

00:00:45,125 --> 00:00:47,960
Was homeless, me and my brother.

00:00:47,960 --> 00:00:48,710
Learned to code.

00:00:48,710 --> 00:00:50,582
Went to an amazing program, Hack Reactor.

00:00:50,582 --> 00:00:51,540
Learned how to program.

00:00:51,540 --> 00:00:52,165
AUDIENCE: Whoo!

00:00:52,165 --> 00:00:55,320


00:00:55,320 --> 00:00:56,800
SCOTT MOSS: After that, soon after,

00:00:56,800 --> 00:00:58,300
teaching became a hobby of mine.

00:00:58,300 --> 00:01:00,466
I started teaching people to program what I learned,

00:01:00,466 --> 00:01:03,165
and giving back, and helping other people reach their goals.

00:01:03,165 --> 00:01:05,500
Did that full-time for a while.

00:01:05,500 --> 00:01:09,550
And now, not even two years of being out of the Navy,

00:01:09,550 --> 00:01:11,570
I'm a senior front-end engineer at Udacity.

00:01:11,570 --> 00:01:12,891
So it's been a journey.

00:01:12,891 --> 00:01:15,777
[APPLAUSE]

00:01:15,777 --> 00:01:21,550


00:01:21,550 --> 00:01:23,435
I'm also the co-creator of Angular Class,

00:01:23,435 --> 00:01:27,240
a workshop where we do Angular training on the weekend.

00:01:27,240 --> 00:01:30,430
So going to talk to you guys about Sasqwatches.

00:01:30,430 --> 00:01:32,850
So whatever you think you know about Sasquatches,

00:01:32,850 --> 00:01:33,560
just forget it.

00:01:33,560 --> 00:01:35,850
Because it's not that.

00:01:35,850 --> 00:01:37,170
It's totally not that.

00:01:37,170 --> 00:01:39,520
This is something to do with Angular applications

00:01:39,520 --> 00:01:42,150
and why is it important for you.

00:01:42,150 --> 00:01:44,070
So let's get started.

00:01:44,070 --> 00:01:48,544
But before we get there, let's take a trip-- when you

00:01:48,544 --> 00:01:49,710
made your first Angular app.

00:01:49,710 --> 00:01:52,085
You guys remember the first time you made an Angular app?

00:01:52,085 --> 00:01:53,320
And you were like, oh my god.

00:01:53,320 --> 00:01:56,660
Like, you called your grandma, and you were like, Grandma,

00:01:56,660 --> 00:02:00,210
we don't have to use jQuery anymore.

00:02:00,210 --> 00:02:01,550
We can use directives.

00:02:01,550 --> 00:02:02,650
Like, they got this thing.

00:02:02,650 --> 00:02:05,740
And it's like, so declarative, it's like, legit.

00:02:05,740 --> 00:02:08,389
So you were just like, ngAllTheThings.

00:02:08,389 --> 00:02:09,870
Like everything, ng.

00:02:09,870 --> 00:02:12,120
I'm going to get every single thing that has ng on it,

00:02:12,120 --> 00:02:12,950
and I'm going to use that.

00:02:12,950 --> 00:02:14,324
Because that's what the doc says.

00:02:14,324 --> 00:02:16,910
That's what the doc says, so I'm going to use it.

00:02:16,910 --> 00:02:17,610
Bind everything.

00:02:17,610 --> 00:02:18,109
Right?

00:02:18,109 --> 00:02:20,652
You got this sweet mustache template system.

00:02:20,652 --> 00:02:22,110
And you can just stick it in there,

00:02:22,110 --> 00:02:22,930
and it's just going to work.

00:02:22,930 --> 00:02:25,260
So instead of just writing some static content in HTML,

00:02:25,260 --> 00:02:26,760
I'm going to write it in JavaScript.

00:02:26,760 --> 00:02:28,510
And I'm going to bind it anyway, even though it's never

00:02:28,510 --> 00:02:29,050
going to change.

00:02:29,050 --> 00:02:29,940
I'm just going to bind it.

00:02:29,940 --> 00:02:30,930
Because it's awesome.

00:02:30,930 --> 00:02:33,640
And then I'm going to filter it, because we can do it.

00:02:33,640 --> 00:02:36,230
Because it's just great.

00:02:36,230 --> 00:02:38,200
And then watch everything that moves.

00:02:38,200 --> 00:02:39,950
Every single thing that moves in this app,

00:02:39,950 --> 00:02:40,660
we're going to watch it.

00:02:40,660 --> 00:02:41,520
And then we're going to do something.

00:02:41,520 --> 00:02:42,402
We're going to watch it, and then

00:02:42,402 --> 00:02:43,835
we're going to go to the server, and we're going to come back,

00:02:43,835 --> 00:02:46,380
and we're gonna do everything, right?

00:02:46,380 --> 00:02:51,071
So this is code that I found on the internet

00:02:51,071 --> 00:02:52,760
from somebody who was learning Angular.

00:02:52,760 --> 00:02:54,740
And I think this is like a production app.

00:02:54,740 --> 00:02:56,894
And they're just really not taking a lot of stuff

00:02:56,894 --> 00:02:57,685
into consideration.

00:02:57,685 --> 00:02:59,184
And they're doing a lot of the stuff

00:02:59,184 --> 00:03:01,232
that we just talked about.

00:03:01,232 --> 00:03:03,440
Not really taking into consideration of the ng-repeat

00:03:03,440 --> 00:03:06,600
and stuff like that.

00:03:06,600 --> 00:03:08,340
So because of those bad habits, your apps

00:03:08,340 --> 00:03:09,550
are probably crawling.

00:03:09,550 --> 00:03:12,187
Your apps are just so janky.

00:03:12,187 --> 00:03:13,020
You don't even care.

00:03:13,020 --> 00:03:14,850
But it was so fun to write ng everything.

00:03:14,850 --> 00:03:17,240
So it's just like, that's a good trade-off, right?

00:03:17,240 --> 00:03:20,330
Our users are disappointed, but our developers have fun.

00:03:20,330 --> 00:03:25,270
So it's a good trade-off, right?

00:03:25,270 --> 00:03:28,190
But really, you guys, that's happening

00:03:28,190 --> 00:03:30,120
because of the thing that we love so much,

00:03:30,120 --> 00:03:31,540
and that's the $digest cycle.

00:03:31,540 --> 00:03:32,039
Right?

00:03:32,039 --> 00:03:34,300
So I like to describe the $digest cycle as the engine

00:03:34,300 --> 00:03:35,090
behind Angular's magic.

00:03:35,090 --> 00:03:35,370
Right?

00:03:35,370 --> 00:03:36,661
The thing that we love so much.

00:03:36,661 --> 00:03:37,740
That's the $digest cycle.

00:03:37,740 --> 00:03:38,730
But when it comes to performance,

00:03:38,730 --> 00:03:39,688
it's your worst friend.

00:03:39,688 --> 00:03:42,010
And I say "friend" because it really is our friend,

00:03:42,010 --> 00:03:42,990
but it's like our worst friend.

00:03:42,990 --> 00:03:44,080
So you could think of it as the friend

00:03:44,080 --> 00:03:45,880
that you tell all your secrets to,

00:03:45,880 --> 00:03:48,104
that knows everything about you, but then goes behind

00:03:48,104 --> 00:03:49,520
your back when you're not watching

00:03:49,520 --> 00:03:50,937
and tells everybody those secrets.

00:03:50,937 --> 00:03:51,436
Right?

00:03:51,436 --> 00:03:52,640
That's the $digest cycle.

00:03:52,640 --> 00:03:54,450
That's exactly what it does.

00:03:54,450 --> 00:03:55,870
And that enemy is performance.

00:03:55,870 --> 00:03:58,092
Behind your back, it's like, performance, naw, man.

00:03:58,092 --> 00:03:59,800
You don't want to hang out with this guy.

00:03:59,800 --> 00:04:00,830
He sucks.

00:04:00,830 --> 00:04:03,760
And then performance is like, all right, all right.

00:04:03,760 --> 00:04:05,340
That's exactly what's happening.

00:04:05,340 --> 00:04:07,930
So it's still our friend.

00:04:07,930 --> 00:04:09,415
And it's all your fault.

00:04:09,415 --> 00:04:11,250
It's all your fault.

00:04:11,250 --> 00:04:13,020
It's not [INAUDIBLE] fault.

00:04:13,020 --> 00:04:14,540
It's not the Angular team's fault.

00:04:14,540 --> 00:04:15,690
It's your fault.

00:04:15,690 --> 00:04:19,350
So we're going to talk about how we can fix it.

00:04:19,350 --> 00:04:21,225
So long $digest cycles hurt, right?

00:04:21,225 --> 00:04:23,350
The more watchers you have, the longer the $digest.

00:04:23,350 --> 00:04:25,830
So that's pretty much what's causing the jank.

00:04:25,830 --> 00:04:29,332
Processing all those watchers can kill performance.

00:04:29,332 --> 00:04:31,665
So what we want to do is we want to limit those watchers

00:04:31,665 --> 00:04:34,780
and speed up the $digest cycle.

00:04:34,780 --> 00:04:36,327
So what can cause a $digest?

00:04:36,327 --> 00:04:38,660
Well, here's some of the things that can call a $digest.

00:04:38,660 --> 00:04:39,720
So you can do Apply.

00:04:39,720 --> 00:04:42,620
And that starts a $digest cycle off at the $rootScope,

00:04:42,620 --> 00:04:45,356
which most of the built-in stuff in angular does.

00:04:45,356 --> 00:04:46,730
You can also call a $digest which

00:04:46,730 --> 00:04:48,720
starts off at the current $scope and goes all the way down

00:04:48,720 --> 00:04:49,720
to its children.

00:04:49,720 --> 00:04:51,755
So a little more performative if you use it

00:04:51,755 --> 00:04:54,080
the right way, like with [INAUDIBLE] and whatnot.

00:04:54,080 --> 00:04:56,510
And of course, the built-in directives and services like

00:04:56,510 --> 00:04:59,350
ng-click and $http, which use $scope.$apply entirely.

00:04:59,350 --> 00:05:01,850
So these are some of the main ways that the $digest cycle is

00:05:01,850 --> 00:05:05,370
going to run, which means we have control over this stuff.

00:05:05,370 --> 00:05:07,985
The $scope.$apply and $scope.$digest,

00:05:07,985 --> 00:05:09,860
we have control of when they're being called,

00:05:09,860 --> 00:05:11,320
because we have control of what's using them.

00:05:11,320 --> 00:05:12,820
And we have control over we're going to write them.

00:05:12,820 --> 00:05:14,310
So it really is all our fault.

00:05:14,310 --> 00:05:17,820
So we need to be more aware of that stuff.

00:05:17,820 --> 00:05:21,230
So finally, everyone has been asking me

00:05:21,230 --> 00:05:23,980
for months, what is this Sasqwatch?

00:05:23,980 --> 00:05:27,820
Well, that's a Sasquatch.

00:05:27,820 --> 00:05:28,700
That is a Sasquatch.

00:05:28,700 --> 00:05:32,317
But really, what a Sasqwatch is in Angular,

00:05:32,317 --> 00:05:34,400
it's the watchers you didn't know you were making.

00:05:34,400 --> 00:05:35,460
Because you are making them.

00:05:35,460 --> 00:05:36,860
You're making a whole bunch of them,

00:05:36,860 --> 00:05:37,984
and you don't even know it.

00:05:37,984 --> 00:05:40,717
Or maybe you do know it, and you don't care.

00:05:40,717 --> 00:05:43,050
It's the watchers that came with the third-party module.

00:05:43,050 --> 00:05:45,274
You know that ng-nsa module you downloaded,

00:05:45,274 --> 00:05:47,190
and it's like watching everything in your app?

00:05:47,190 --> 00:05:50,500


00:05:50,500 --> 00:05:53,070
That's a Sasqwatch.

00:05:53,070 --> 00:05:55,540
It's watching everything, everything that moves.

00:05:55,540 --> 00:05:56,640
You don't even know it.

00:05:56,640 --> 00:05:58,410
The watchers that manifested from nowhere.

00:05:58,410 --> 00:05:59,475
Like, oh, you know what?

00:05:59,475 --> 00:06:01,160
I didn't even write any JavaScript yet.

00:06:01,160 --> 00:06:03,010
I didn't even download a third-party module.

00:06:03,010 --> 00:06:05,485
But for some reason, there's watchers already there.

00:06:05,485 --> 00:06:06,300
I don't know.

00:06:06,300 --> 00:06:09,130
That's Sasqwatch, right?

00:06:09,130 --> 00:06:11,070
So let's actually get into some examples here.

00:06:11,070 --> 00:06:16,145
So I actually have an app that we're going to use.

00:06:16,145 --> 00:06:17,560
If I can get it to show up.

00:06:17,560 --> 00:06:19,590
OK.

00:06:19,590 --> 00:06:21,301
Where'd it go?

00:06:21,301 --> 00:06:21,800
Oh.

00:06:21,800 --> 00:06:23,110
There it is.

00:06:23,110 --> 00:06:25,570
OK.

00:06:25,570 --> 00:06:26,070
All right.

00:06:26,070 --> 00:06:27,380
I don't know why that's so off.

00:06:27,380 --> 00:06:30,740


00:06:30,740 --> 00:06:32,225
Can you guys see that?

00:06:32,225 --> 00:06:32,995
AUDIENCE: Yep.

00:06:32,995 --> 00:06:33,620
SCOTT MOSS: OK.

00:06:33,620 --> 00:06:36,310
There we go.

00:06:36,310 --> 00:06:38,640
So this app right here is what we're

00:06:38,640 --> 00:06:40,520
going to use to actually count watchers.

00:06:40,520 --> 00:06:42,436
So I'm using this amazing tool called ng-stats

00:06:42,436 --> 00:06:45,730
by the marvelously talented Kent C. Dodds

00:06:45,730 --> 00:06:48,360
to help us count the watchers and the $digest times.

00:06:48,360 --> 00:06:50,390
So before we do this, let's go look at some code

00:06:50,390 --> 00:06:52,720
so we can get some context of what's happening here.

00:06:52,720 --> 00:06:58,710
So what I did was I asked 50 Angular developers of all skill

00:06:58,710 --> 00:07:01,200
levels, hey, can you just read this HTML,

00:07:01,200 --> 00:07:04,290
and just count how many watchers you think are happening?

00:07:04,290 --> 00:07:07,110
So I'm gonna read this like the average person did.

00:07:07,110 --> 00:07:07,790
So bear with me.

00:07:07,790 --> 00:07:08,936
So let's see if you can go into this HTML

00:07:08,936 --> 00:07:11,470
and actually count how many watchers we're going to have.

00:07:11,470 --> 00:07:14,290
So if you go into [INAUDIBLE], this

00:07:14,290 --> 00:07:15,910
is just an array of 10 things.

00:07:15,910 --> 00:07:18,000
Then we have this splice function.

00:07:18,000 --> 00:07:18,740
So we go in here.

00:07:18,740 --> 00:07:19,240
OK.

00:07:19,240 --> 00:07:22,480
So this is what the average Angular.JS developer did.

00:07:22,480 --> 00:07:25,500
They said, OK, you have this ng-repeat [INAUDIBLE].

00:07:25,500 --> 00:07:28,220
Don't see any watchers here.

00:07:28,220 --> 00:07:29,830
You have this ng-model up here.

00:07:29,830 --> 00:07:32,250
No, you're not using the binding syntax,

00:07:32,250 --> 00:07:33,717
so that's not a watcher.

00:07:33,717 --> 00:07:36,300
And then they came down here and were like, ng-class, oh yeah,

00:07:36,300 --> 00:07:37,490
that's definitely a watcher.

00:07:37,490 --> 00:07:38,354
So we have 10.

00:07:38,354 --> 00:07:39,270
So that's 10 watchers.

00:07:39,270 --> 00:07:39,794
Boom.

00:07:39,794 --> 00:07:40,960
And they're like, of course.

00:07:40,960 --> 00:07:41,847
That's a watcher.

00:07:41,847 --> 00:07:42,930
So now we have another 10.

00:07:42,930 --> 00:07:44,164
So we have 20 watchers.

00:07:44,164 --> 00:07:45,080
That's what they said.

00:07:45,080 --> 00:07:46,580
That's what the average person said.

00:07:46,580 --> 00:07:50,600
But if we go over here, we actually have 24.

00:07:50,600 --> 00:07:53,467
We have 24 Sasqwatches.

00:07:53,467 --> 00:07:54,300
We actually have 24.

00:07:54,300 --> 00:07:55,470
So where did the other four come from?

00:07:55,470 --> 00:07:56,150
Well, let's check it out.

00:07:56,150 --> 00:07:57,550
Let's just get rid of these guys.

00:07:57,550 --> 00:08:00,230
If we click on it, we notice the $digest ran.

00:08:00,230 --> 00:08:02,490
It took a hell of a long time.

00:08:02,490 --> 00:08:04,037
And then it got rid of two.

00:08:04,037 --> 00:08:05,620
That makes sense, because in our code,

00:08:05,620 --> 00:08:09,960
we said each item had ng-class binding and also this binding

00:08:09,960 --> 00:08:10,460
here.

00:08:10,460 --> 00:08:11,800
So that makes sense for two to get rid of.

00:08:11,800 --> 00:08:13,660
So our count was pretty accurate there.

00:08:13,660 --> 00:08:16,370
So if we get rid of all these-- we just get rid of all of them

00:08:16,370 --> 00:08:19,600
on the page-- we're still left with four.

00:08:19,600 --> 00:08:21,680
Where'd those four come from?

00:08:21,680 --> 00:08:22,939
So let's go check it out.

00:08:22,939 --> 00:08:25,230
Well, this ng-model over here actually does create one.

00:08:25,230 --> 00:08:28,670
Because this input element is not element, it's a directive.

00:08:28,670 --> 00:08:30,259
And it's creating a binding right here

00:08:30,259 --> 00:08:31,550
to the input's value with this.

00:08:31,550 --> 00:08:32,370
So that's one.

00:08:32,370 --> 00:08:34,770
And also there's a watch right here on this array.

00:08:34,770 --> 00:08:37,510
If it changes due to filtering or something else,

00:08:37,510 --> 00:08:38,789
that's also a watch generated.

00:08:38,789 --> 00:08:41,373
But that only brings us down to two.

00:08:41,373 --> 00:08:43,890
Where did the other two come from?

00:08:43,890 --> 00:08:46,550
And quite honestly, the only way you're going to find that out

00:08:46,550 --> 00:08:47,910
is if you do some digging.

00:08:47,910 --> 00:08:50,160
And this is not from a third-party module or anything.

00:08:50,160 --> 00:08:53,660
So Angular actually, by default, watches the angular scroll

00:08:53,660 --> 00:08:55,056
and the location by default.

00:08:55,056 --> 00:08:56,930
You get those two watchers just from Angular.

00:08:56,930 --> 00:08:58,400
Just from downloading it, you already

00:08:58,400 --> 00:08:59,400
have those two watchers.

00:08:59,400 --> 00:09:01,060
So those will always be there.

00:09:01,060 --> 00:09:02,230
So those are Sasqwatches.

00:09:02,230 --> 00:09:05,692
You didn't even know they existed, but they were there.

00:09:05,692 --> 00:09:07,150
So let's go into some more examples

00:09:07,150 --> 00:09:10,720
that I found on the net.

00:09:10,720 --> 00:09:14,810
Let's go into an example that I saw with people using forms.

00:09:14,810 --> 00:09:17,120
So we have this one example of this person who's

00:09:17,120 --> 00:09:22,250
using ng-hide and ng-click very exclusively to just toggle

00:09:22,250 --> 00:09:23,630
a simple form.

00:09:23,630 --> 00:09:25,770
And we know the difference between ng-hide and show

00:09:25,770 --> 00:09:26,520
and if.

00:09:26,520 --> 00:09:27,950
If gets ripped from the DOM.

00:09:27,950 --> 00:09:31,270
Show and hide does some CSS to show it and hide it.

00:09:31,270 --> 00:09:34,122
But there is definitely use cases for that

00:09:34,122 --> 00:09:36,330
if you're setting event bindings and stuff like that.

00:09:36,330 --> 00:09:38,400
But in this example, they're really not.

00:09:38,400 --> 00:09:41,260
So what's happening here is we are just

00:09:41,260 --> 00:09:47,340
going to toggle a different HTML based on this edit mode model

00:09:47,340 --> 00:09:47,840
here.

00:09:47,840 --> 00:09:49,798
So let's see if we can count the stuff in here.

00:09:49,798 --> 00:09:50,330
Let's see.

00:09:50,330 --> 00:09:52,560
And again, I'm doing it like the average developer.

00:09:52,560 --> 00:09:53,350
So ng-show.

00:09:53,350 --> 00:09:55,130
Oh yeah, that's one.

00:09:55,130 --> 00:09:56,700
That's two.

00:09:56,700 --> 00:09:57,460
That's three.

00:09:57,460 --> 00:10:00,080


00:10:00,080 --> 00:10:01,950
Where else?

00:10:01,950 --> 00:10:03,030
No, not that one.

00:10:03,030 --> 00:10:04,570
That's three.

00:10:04,570 --> 00:10:06,845
And then what else do we have?

00:10:06,845 --> 00:10:08,400
Did I pass everything else?

00:10:08,400 --> 00:10:10,444
And then four right here.

00:10:10,444 --> 00:10:12,110
Thought there was an ng-class over here.

00:10:12,110 --> 00:10:13,620
Maybe not.

00:10:13,620 --> 00:10:14,650
So we have four.

00:10:14,650 --> 00:10:18,860
Let's actually go and see what the Sasqwatch count says.

00:10:18,860 --> 00:10:20,270
It says we have eight.

00:10:20,270 --> 00:10:23,110
So we actually have more than what we actually counted.

00:10:23,110 --> 00:10:24,980
So how did that happen?

00:10:24,980 --> 00:10:26,480
And this is exactly what people did.

00:10:26,480 --> 00:10:29,080
They counted this and they said it was four.

00:10:29,080 --> 00:10:31,270
So they actually under counted.

00:10:31,270 --> 00:10:33,490
So what is really happening here is

00:10:33,490 --> 00:10:36,900
because although ng-show and ng-hide are not on the page--

00:10:36,900 --> 00:10:38,660
as you can see as we toggle there,

00:10:38,660 --> 00:10:41,585
the count never changes-- it's because the bindings are

00:10:41,585 --> 00:10:42,210
already set up.

00:10:42,210 --> 00:10:43,790
They're just being hid by CSS.

00:10:43,790 --> 00:10:44,800
They've already been established.

00:10:44,800 --> 00:10:45,860
They've already been linked.

00:10:45,860 --> 00:10:47,610
The watchers have already been registered.

00:10:47,610 --> 00:10:48,929
The CSS is just hiding them.

00:10:48,929 --> 00:10:50,720
So what you really want to do in this case,

00:10:50,720 --> 00:10:52,480
because we're not really setting up

00:10:52,480 --> 00:10:54,876
any events on any of this HTML, we

00:10:54,876 --> 00:10:56,250
want to use a different approach.

00:10:56,250 --> 00:11:00,980
So let's-- god, this scroll is ridiculously fast.

00:11:00,980 --> 00:11:02,830
Let's just comment that guy out.

00:11:02,830 --> 00:11:08,810
And we might use this other solution which uses ng-if.

00:11:08,810 --> 00:11:11,000
And let's see how many watchers we have now.

00:11:11,000 --> 00:11:13,210
So now we only have five.

00:11:13,210 --> 00:11:14,550
And we get the same stuff.

00:11:14,550 --> 00:11:17,130
The big switch was we just used ng-if.

00:11:17,130 --> 00:11:19,892
So yeah, we had to write a little more HTML.

00:11:19,892 --> 00:11:21,100
And it was really repetitive.

00:11:21,100 --> 00:11:23,410
We really wrote the same HTML twice.

00:11:23,410 --> 00:11:25,580
But we don't get to set up those bindings, which

00:11:25,580 --> 00:11:26,400
is really, really awesome.

00:11:26,400 --> 00:11:28,150
Again, this is only a specific use case,

00:11:28,150 --> 00:11:31,200
if you don't have events set up like jQuery and those click

00:11:31,200 --> 00:11:33,610
events and stuff like that.

00:11:33,610 --> 00:11:36,840
So let's go to another example where people are just

00:11:36,840 --> 00:11:38,732
using ng everything.

00:11:38,732 --> 00:11:40,690
And we're going to get to this in a little bit.

00:11:40,690 --> 00:11:47,000
So here's an example of a person-- simple ng-repeat.

00:11:47,000 --> 00:11:48,680
Card in cards.

00:11:48,680 --> 00:11:50,060
Have this ng-mouseenter.

00:11:50,060 --> 00:11:51,540
And then on mouseenter, it's just

00:11:51,540 --> 00:11:52,930
going to run this function.

00:11:52,930 --> 00:11:56,857
This function, all it does, if it's an even element,

00:11:56,857 --> 00:11:58,190
it's just going to show a toast.

00:11:58,190 --> 00:12:00,170
That's all it's going to do.

00:12:00,170 --> 00:12:02,790
So that's really all that's happening here.

00:12:02,790 --> 00:12:06,840
So if we go in here, notice even if I hover over an element that

00:12:06,840 --> 00:12:09,640
is not even, the $digest runs.

00:12:09,640 --> 00:12:10,140
See?

00:12:10,140 --> 00:12:11,410
The $digest is running right here.

00:12:11,410 --> 00:12:12,993
By the way, even and odd is determined

00:12:12,993 --> 00:12:16,745
by a calculation on the index, not the actual position

00:12:16,745 --> 00:12:17,486
in the array.

00:12:17,486 --> 00:12:19,610
So if you were expecting this to be even, it's not.

00:12:19,610 --> 00:12:20,360
It's by the index.

00:12:20,360 --> 00:12:22,526
It's not because it's the second thing in the array.

00:12:22,526 --> 00:12:26,730
So the $digest is still running, although the toast is not

00:12:26,730 --> 00:12:27,370
firing.

00:12:27,370 --> 00:12:30,929
That's because this ng-mouseenter is going to wrap

00:12:30,929 --> 00:12:32,470
this entire thing into $scope.$apply.

00:12:32,470 --> 00:12:34,454
It is going to happen every single time

00:12:34,454 --> 00:12:35,620
you mouseenter this element.

00:12:35,620 --> 00:12:37,930
But we only want to run the function when it's even.

00:12:37,930 --> 00:12:40,930
So why were you wasting digest cycles doing it?

00:12:40,930 --> 00:12:42,885
It doesn't make sense.

00:12:42,885 --> 00:12:44,510
We have this stuff firing only on even.

00:12:44,510 --> 00:12:48,000
So what we want to do instead, and just not be lazy,

00:12:48,000 --> 00:12:51,080
is just get rid of this guy.

00:12:51,080 --> 00:12:54,281
And we want to use our own directive that we made.

00:12:54,281 --> 00:12:56,670
And we're just going to call it onmouseenter.

00:12:56,670 --> 00:12:58,150
And it does the exact same thing.

00:12:58,150 --> 00:13:02,190
So the code for that looks like this.

00:13:02,190 --> 00:13:04,312
It's just going to use this thing called jQuery.

00:13:04,312 --> 00:13:05,520
You guys know what jQuery is.

00:13:05,520 --> 00:13:06,811
You told your grandma about it.

00:13:06,811 --> 00:13:10,150
And onmouseenter, it's going to say, hey is this thing even?

00:13:10,150 --> 00:13:10,650
Yeah.

00:13:10,650 --> 00:13:11,160
OK.

00:13:11,160 --> 00:13:13,550
I'm just going to evaluate the given function.

00:13:13,550 --> 00:13:15,850
And $scope.$eval is going to evaluate the expression,

00:13:15,850 --> 00:13:18,390
which does not actually trigger $digest.

00:13:18,390 --> 00:13:23,299
But if for whatever reason we wanted to change some scope

00:13:23,299 --> 00:13:25,590
stuff here, we could just wrap this into $scope.$apply,

00:13:25,590 --> 00:13:27,020
and we still have control over it.

00:13:27,020 --> 00:13:30,160
So if we go back, oops.

00:13:30,160 --> 00:13:33,770
If we go back to this guy.

00:13:33,770 --> 00:13:37,440
Now that we did it, notice when I hover over anything,

00:13:37,440 --> 00:13:39,500
the $digest doesn't run at all.

00:13:39,500 --> 00:13:41,030
No $digest.

00:13:41,030 --> 00:13:43,790
But yet we still get the same functionality that we wanted.

00:13:43,790 --> 00:13:46,212
So these small little increments here actually speed up

00:13:46,212 --> 00:13:46,920
your application.

00:13:46,920 --> 00:13:50,020
These small little changes that doesn't take that much effort

00:13:50,020 --> 00:13:52,250
will totally, totally help you out.

00:13:52,250 --> 00:13:55,470
Another small one is this really nice feature

00:13:55,470 --> 00:13:56,800
of unwatching your watchers.

00:13:56,800 --> 00:13:59,196
Because we all just want to watch everything.

00:13:59,196 --> 00:14:01,130
Like, let's just watch it.

00:14:01,130 --> 00:14:04,231
So what's happening in this example is, you click this,

00:14:04,231 --> 00:14:05,230
you get a random number.

00:14:05,230 --> 00:14:07,494
If it goes higher than 10, it shows a toast.

00:14:07,494 --> 00:14:09,160
So we get a toast that's higher than 10.

00:14:09,160 --> 00:14:11,010
And we want it to stop after it's 10.

00:14:11,010 --> 00:14:13,660
But after they show the toast, the count still says four.

00:14:13,660 --> 00:14:15,040
It's still watching it.

00:14:15,040 --> 00:14:18,690
So let's just use this awesome feature

00:14:18,690 --> 00:14:19,790
that's built into Angular.

00:14:19,790 --> 00:14:25,580
And let's just say, bar-- I cannot see from back here.

00:14:25,580 --> 00:14:26,490
You [? build ?] that.

00:14:26,490 --> 00:14:28,670
And then what we're going to do is,

00:14:28,670 --> 00:14:30,830
once we finally get the thing that we want,

00:14:30,830 --> 00:14:33,190
we can just invoke this function, which is going

00:14:33,190 --> 00:14:34,390
to cancel the watch for us.

00:14:34,390 --> 00:14:36,042
So let's check it out.

00:14:36,042 --> 00:14:37,500
So if we did this right, this count

00:14:37,500 --> 00:14:39,868
should go down once the number goes over 10.

00:14:39,868 --> 00:14:45,350


00:14:45,350 --> 00:14:45,870
There it is.

00:14:45,870 --> 00:14:46,660
It did it.

00:14:46,660 --> 00:14:48,410
So now it's three.

00:14:48,410 --> 00:14:49,940
So you totally want to do that.

00:14:49,940 --> 00:14:52,629
Because in most cases, people watch things just for one time.

00:14:52,629 --> 00:14:53,420
And then that's it.

00:14:53,420 --> 00:14:55,222
But then they just keep watching it.

00:14:55,222 --> 00:14:56,430
You should not be doing that.

00:14:56,430 --> 00:14:57,460
It's a small change.

00:14:57,460 --> 00:14:59,626
And it's going to totally speed up your application.

00:14:59,626 --> 00:15:00,780


00:15:00,780 --> 00:15:04,770
Another thing is, I'm gonna talk about filters for a little bit.

00:15:04,770 --> 00:15:07,122
And Kent C. Dodds has this amazing thing.

00:15:07,122 --> 00:15:08,580
I was just going to make it myself,

00:15:08,580 --> 00:15:11,330
but he already did it because it's really great.

00:15:11,330 --> 00:15:13,660
He's using filters in here, filters and ng-repeat.

00:15:13,660 --> 00:15:15,240
This is a big thing.

00:15:15,240 --> 00:15:17,180
This is what kills a lot of apps.

00:15:17,180 --> 00:15:20,200
People just make this huge table, ng-repeat,

00:15:20,200 --> 00:15:22,260
with a directive for another ng-repeat,

00:15:22,260 --> 00:15:26,530
and triple filters that go to the server and come back.

00:15:26,530 --> 00:15:28,340
And it's just like, oh my god.

00:15:28,340 --> 00:15:30,785
How do you expect to have a really good UI?

00:15:30,785 --> 00:15:32,200
So here's an example.

00:15:32,200 --> 00:15:35,870
Let's put 50 things on the page.

00:15:35,870 --> 00:15:39,612
And let's delay the filter just by-- let's

00:15:39,612 --> 00:15:40,570
start off with nothing.

00:15:40,570 --> 00:15:43,050
So right now when you hover over these things,

00:15:43,050 --> 00:15:46,121
they do an ng-mouseenter and ng-mouseleave.

00:15:46,121 --> 00:15:47,870
And they just change the CSS on the stuff.

00:15:47,870 --> 00:15:49,050
So it's pretty performant.

00:15:49,050 --> 00:15:50,190
$digest is running.

00:15:50,190 --> 00:15:51,980
Not even a millisecond.

00:15:51,980 --> 00:15:53,230
115 watchers on the page.

00:15:53,230 --> 00:15:54,000
Great.

00:15:54,000 --> 00:15:58,080
Let's just increase it to one millisecond.

00:15:58,080 --> 00:15:59,270
Watch this time right here.

00:15:59,270 --> 00:16:02,180
Just one millisecond.

00:16:02,180 --> 00:16:02,960
Boom.

00:16:02,960 --> 00:16:03,850
Look at that.

00:16:03,850 --> 00:16:08,160
One millisecond delay in your filter, and look at that.

00:16:08,160 --> 00:16:10,040
Oh my god.

00:16:10,040 --> 00:16:11,930
What is that?

00:16:11,930 --> 00:16:13,364
Just one millisecond.

00:16:13,364 --> 00:16:14,530
And this is just one filter.

00:16:14,530 --> 00:16:16,880
So you have people doing multiple filters,

00:16:16,880 --> 00:16:19,330
doing acing things, and oh man.

00:16:19,330 --> 00:16:20,540
So yeah.

00:16:20,540 --> 00:16:21,430
That's another thing.

00:16:21,430 --> 00:16:22,346
Totally don't do that.

00:16:22,346 --> 00:16:27,370


00:16:27,370 --> 00:16:29,050
So that's gonna be it for the examples.

00:16:29,050 --> 00:16:32,309
Now I'm going to go into a little bit more of the slides.

00:16:32,309 --> 00:16:33,600
Oh yeah, I guess I forgot that.

00:16:33,600 --> 00:16:37,460
Any watcher you're not aware of, it failed to optimize.

00:16:37,460 --> 00:16:38,650
But we want smooth apps.

00:16:38,650 --> 00:16:39,150
Right?

00:16:39,150 --> 00:16:41,650
We all want smooth apps, right?

00:16:41,650 --> 00:16:43,740
So limit your watchers.

00:16:43,740 --> 00:16:45,180
Please, limit your watchers.

00:16:45,180 --> 00:16:46,970
You can do it.

00:16:46,970 --> 00:16:48,350
Limit $digest calls.

00:16:48,350 --> 00:16:49,834
We just went over a small example

00:16:49,834 --> 00:16:51,250
of how you might be able to do it.

00:16:51,250 --> 00:16:52,460
Try your best to limit it.

00:16:52,460 --> 00:16:55,760
And be completely aware of when you're doing it.

00:16:55,760 --> 00:16:59,150
Don't ng-overdo it.

00:16:59,150 --> 00:17:01,130
I think people are scared that they're

00:17:01,130 --> 00:17:03,432
going to get disowned by the Angular team.

00:17:03,432 --> 00:17:04,890
If they put something up in GitHub,

00:17:04,890 --> 00:17:06,556
GitHub's going to reject it because they

00:17:06,556 --> 00:17:08,492
didn't use the ng directive.

00:17:08,492 --> 00:17:09,700
You can write your own stuff.

00:17:09,700 --> 00:17:11,200
You don't have to use ng everything.

00:17:11,200 --> 00:17:12,339
Nobody's going to hit you.

00:17:12,339 --> 00:17:14,800
So just don't ng-overdo it.

00:17:14,800 --> 00:17:18,220
Use jQuery [INAUDIBLE] or jQuery for the DOM events

00:17:18,220 --> 00:17:22,560
to sign up listeners versus the directive equivalence.

00:17:22,560 --> 00:17:25,560
Use ng-repeat responsibly.

00:17:25,560 --> 00:17:27,839
It can exponentially increase $digest times.

00:17:27,839 --> 00:17:30,860
So if you're doing nested ng-repeats, think about it.

00:17:30,860 --> 00:17:32,160
It's going to get pretty nasty.

00:17:32,160 --> 00:17:34,100
So use it responsibly.

00:17:34,100 --> 00:17:36,400
And avoid filters in ng-repeat, or keep them

00:17:36,400 --> 00:17:38,940
under one millisecond.

00:17:38,940 --> 00:17:41,850
So I got this quote right here.

00:17:41,850 --> 00:17:43,860
"If your filters take more than one millisecond,

00:17:43,860 --> 00:17:44,840
it won't scale."

00:17:44,840 --> 00:17:46,970
And that's from Aaron Frost over there.

00:17:46,970 --> 00:17:48,810
McFrosty, aka.

00:17:48,810 --> 00:17:50,170
So this is what he said.

00:17:50,170 --> 00:17:50,910
And it totally makes sense.

00:17:50,910 --> 00:17:53,034
We just saw an example where I increased the filter

00:17:53,034 --> 00:17:56,460
to one millisecond, and it just broke everything.

00:17:56,460 --> 00:17:58,600
And I'm pushing for this.

00:17:58,600 --> 00:18:01,480
And I really urge you guys to think about it.

00:18:01,480 --> 00:18:03,960
I would like everyone to commit to just not using

00:18:03,960 --> 00:18:05,540
these directives at all.

00:18:05,540 --> 00:18:08,222
I just don't see any point, any use case that you would ever

00:18:08,222 --> 00:18:09,430
need to use these directives.

00:18:09,430 --> 00:18:10,930
You should just get rid of them.

00:18:10,930 --> 00:18:12,450
You should just not even use them.

00:18:12,450 --> 00:18:14,910
That's what I'm going to say today.

00:18:14,910 --> 00:18:16,520
But if you have a good argument of why

00:18:16,520 --> 00:18:18,900
you think you need to use these, then please let me know.

00:18:18,900 --> 00:18:20,430
Because I looked, and I just couldn't figure out

00:18:20,430 --> 00:18:22,350
a compelling argument on why you ever

00:18:22,350 --> 00:18:24,120
need to use these directives.

00:18:24,120 --> 00:18:27,170
So if anybody's still using them, let me know why.

00:18:27,170 --> 00:18:28,954
Because I want to know what you know.

00:18:28,954 --> 00:18:30,902
OK?

00:18:30,902 --> 00:18:33,430
Use optimizations built into 1.3.

00:18:33,430 --> 00:18:35,585
One-time bindings are awesome.

00:18:35,585 --> 00:18:38,060
NgModelOptions-- Kent C. Dodds just talked about that.

00:18:38,060 --> 00:18:41,674
The debounce and the updateOn can really save you.

00:18:41,674 --> 00:18:43,340
The debounce is tricky because you don't

00:18:43,340 --> 00:18:44,423
want to debounce too much.

00:18:44,423 --> 00:18:45,330
And it's slow.

00:18:45,330 --> 00:18:46,895
And you can't debounce a lot.

00:18:46,895 --> 00:18:49,500
So you have to figure out the right timing for that.

00:18:49,500 --> 00:18:51,360
And try not to use $stateful filters.

00:18:51,360 --> 00:18:53,870
That's a new feature that's built in.

00:18:53,870 --> 00:18:55,740
So you're not caching those filters

00:18:55,740 --> 00:18:58,320
to get that nice benefit.

00:18:58,320 --> 00:18:59,940
So that's it.

00:18:59,940 --> 00:19:03,330
And continue to watch those Sasqwatches.

00:19:03,330 --> 00:19:06,380
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=wbcJfg-d5nI


