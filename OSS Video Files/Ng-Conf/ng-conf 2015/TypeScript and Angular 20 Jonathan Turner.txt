Title: TypeScript and Angular 20 Jonathan Turner
Publication date: 2015-03-06
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,479


00:00:00,479 --> 00:00:02,520
JONATHAN TURNER: Let us go ahead and get started.

00:00:02,520 --> 00:00:05,130


00:00:05,130 --> 00:00:07,290
Thank you, everyone, for coming.

00:00:07,290 --> 00:00:11,016
This has been fantastic.

00:00:11,016 --> 00:00:12,560
I know, everyone, come on.

00:00:12,560 --> 00:00:13,450
Come on.

00:00:13,450 --> 00:00:14,340
Where's the love?

00:00:14,340 --> 00:00:15,170
AUDIENCE: Jonathan!

00:00:15,170 --> 00:00:17,380
JONATHAN TURNER: There we go.

00:00:17,380 --> 00:00:18,570
This has been fantastic.

00:00:18,570 --> 00:00:21,456
I've been really enjoying myself.

00:00:21,456 --> 00:00:22,580
My name is Jonathan Turner.

00:00:22,580 --> 00:00:25,990
I'm the program manager for the TypeScript at Microsoft.

00:00:25,990 --> 00:00:29,650
This is going to be TypeScript in Angular 2.

00:00:29,650 --> 00:00:34,120
Really kind of using TypeScript, and using Angular 2, and what's

00:00:34,120 --> 00:00:35,140
the advantages there?

00:00:35,140 --> 00:00:37,740


00:00:37,740 --> 00:00:41,700
You'll see a glowing Apple.

00:00:41,700 --> 00:00:44,464
Yes, I'm the Microsoft guy, but I have the glowing Apple.

00:00:44,464 --> 00:00:46,320
[LAUGHTER]

00:00:46,320 --> 00:00:48,072
That will play in here in a minute.

00:00:48,072 --> 00:00:50,030
But, you know, I have to be a little bit legit.

00:00:50,030 --> 00:00:52,740
I have to be kind of boring slides for a few minutes,

00:00:52,740 --> 00:00:54,910
and then we get into the fun stuff.

00:00:54,910 --> 00:00:55,740
All right.

00:00:55,740 --> 00:00:58,030
So TypeScript in a nutshell.

00:00:58,030 --> 00:01:00,810
For those of you who have not played with TypeScript yet,

00:01:00,810 --> 00:01:05,500
let me do a quick recap of what TypeScript is.

00:01:05,500 --> 00:01:09,580
So TypeScript is a superset of JavaScript.

00:01:09,580 --> 00:01:12,080
You start with the basic JavaScript language,

00:01:12,080 --> 00:01:13,800
which we call ECMAScript.

00:01:13,800 --> 00:01:17,040
So starting with the ECMAScript language.

00:01:17,040 --> 00:01:18,980
There are a couple of additional features.

00:01:18,980 --> 00:01:20,820
One way to think of it is like a thin layer

00:01:20,820 --> 00:01:22,790
on top of JavaScript.

00:01:22,790 --> 00:01:27,910
That thin layer will compile away to nice, clean JavaScript.

00:01:27,910 --> 00:01:29,590
So what is in that thin layer?

00:01:29,590 --> 00:01:32,350
Like why did we build that thin layer?

00:01:32,350 --> 00:01:35,310
The first piece is this optional type system.

00:01:35,310 --> 00:01:37,970
So you can start adding types into your code.

00:01:37,970 --> 00:01:41,165
And as you do that, you can get some good error checking, early

00:01:41,165 --> 00:01:42,740
error detection.

00:01:42,740 --> 00:01:44,760
You can also get nice tooling.

00:01:44,760 --> 00:01:47,380
And we'll see that here in a minute.

00:01:47,380 --> 00:01:50,010
The type system is completely optional.

00:01:50,010 --> 00:01:55,920
So there's no requirement that you even use any types at all.

00:01:55,920 --> 00:01:58,100
You can just kind of pick and choose

00:01:58,100 --> 00:02:01,740
where you want to put those types to get the benefits.

00:02:01,740 --> 00:02:05,330
You might, for example, put them on the edge of the API,

00:02:05,330 --> 00:02:06,520
but not on the inside.

00:02:06,520 --> 00:02:10,530
So you have the flexibility on the inside of the library.

00:02:10,530 --> 00:02:13,220
TypeScript is also pulling features

00:02:13,220 --> 00:02:15,760
from future versions of JavaScript.

00:02:15,760 --> 00:02:18,786
Back when we first announced TypeScript in 2012,

00:02:18,786 --> 00:02:20,410
the kind of features we were pulling in

00:02:20,410 --> 00:02:21,550
were all ES6 features.

00:02:21,550 --> 00:02:24,270
So classes and lamdas were available

00:02:24,270 --> 00:02:27,760
years before they actually got ratified in ECMAScript.

00:02:27,760 --> 00:02:32,760
Now that ECMAScript 6 is almost done, it's nearly ratified,

00:02:32,760 --> 00:02:34,744
we're starting to pull ES7 features for it

00:02:34,744 --> 00:02:35,410
into TypeScript.

00:02:35,410 --> 00:02:37,920


00:02:37,920 --> 00:02:39,010
All right.

00:02:39,010 --> 00:02:42,530
So how does Angular play into this?

00:02:42,530 --> 00:02:46,270
As we heard in the keynote, and as you saw in the keynote

00:02:46,270 --> 00:02:49,280
this morning, Angular 2 is built with TypeScript.

00:02:49,280 --> 00:02:52,090
And you can optionally take advantage of TypeScript

00:02:52,090 --> 00:02:54,150
to do Angular 2 development.

00:02:54,150 --> 00:02:57,580
TypeScript allows you to do that development in a way that

00:02:57,580 --> 00:02:58,830
works really well with tools.

00:02:58,830 --> 00:03:02,700
You get nice, early error detection, IntelliSense,

00:03:02,700 --> 00:03:06,020
and refactoring kind of built on that type system.

00:03:06,020 --> 00:03:09,906
But as Misko pointed out, this is completely optional.

00:03:09,906 --> 00:03:12,280
You can just use TypeScript where it makes sense for you.

00:03:12,280 --> 00:03:16,030
But if you would prefer using just plain JavaScript,

00:03:16,030 --> 00:03:17,520
definitely feel free to do that.

00:03:17,520 --> 00:03:20,640
Angular works just fine with that.

00:03:20,640 --> 00:03:21,680
All right.

00:03:21,680 --> 00:03:25,880
That was the boilerplate paging all that information in.

00:03:25,880 --> 00:03:29,540
Let's actually take a look at what using these tools

00:03:29,540 --> 00:03:31,330
looks like.

00:03:31,330 --> 00:03:35,920
So I'm going to be writing in Sublime Text.

00:03:35,920 --> 00:03:40,520
The TypeScript team, in addition to TypeScript 1.5,

00:03:40,520 --> 00:03:42,440
which we were talking about yesterday,

00:03:42,440 --> 00:03:45,700
with all the new features to support Angular 2.0,

00:03:45,700 --> 00:03:48,590
we've been working on a new TypeScript language

00:03:48,590 --> 00:03:51,650
service that makes tooling across platforms

00:03:51,650 --> 00:03:55,390
and across editors much, much easier.

00:03:55,390 --> 00:03:57,680
So this Sublime plug-in that I'm using

00:03:57,680 --> 00:04:02,230
is built on this new language service.

00:04:02,230 --> 00:04:04,210
So let's actually take a look at what it's

00:04:04,210 --> 00:04:08,550
like writing Angular 2 code in TypeScript

00:04:08,550 --> 00:04:10,580
using these new tools.

00:04:10,580 --> 00:04:14,030
So what I'm going to be writing is David East's TodoMVC app,

00:04:14,030 --> 00:04:16,930
which you may have seen a couple weeks ago.

00:04:16,930 --> 00:04:22,450
This is a cool example of what Angular 2 will look like.

00:04:22,450 --> 00:04:23,500
All right.

00:04:23,500 --> 00:04:26,467
I'm going to start off by importing from a module.

00:04:26,467 --> 00:04:28,300
I don't know what I'm going to import first,

00:04:28,300 --> 00:04:30,341
but let's say I'm going to import from Angular 2.

00:04:30,341 --> 00:04:34,210


00:04:34,210 --> 00:04:36,770
As I do this, I've got a couple of options.

00:04:36,770 --> 00:04:41,480
I can request going to a definition on that module,

00:04:41,480 --> 00:04:43,630
and I can see that this module is actually

00:04:43,630 --> 00:04:46,340
doing the job of importing more modules

00:04:46,340 --> 00:04:48,320
and re-exporting those symbols.

00:04:48,320 --> 00:04:50,610
And this is probably going to become very common

00:04:50,610 --> 00:04:52,190
in ECMAScript 6 modules.

00:04:52,190 --> 00:04:55,660
One module will flatten the API of other modules,

00:04:55,660 --> 00:04:58,160
and you'll end up with a hierarchy of modules.

00:04:58,160 --> 00:04:59,740
It's actually kind of a pain to think

00:04:59,740 --> 00:05:03,100
about what is the flat API once all these modules have

00:05:03,100 --> 00:05:04,670
been imported.

00:05:04,670 --> 00:05:07,100
But it's nice from a separation, when you're actually

00:05:07,100 --> 00:05:09,530
writing the modules yourself.

00:05:09,530 --> 00:05:11,580
So what we can do is use the tooling

00:05:11,580 --> 00:05:14,690
to actually get IntelliSense for what all of those modules

00:05:14,690 --> 00:05:19,030
are importing into this file.

00:05:19,030 --> 00:05:21,030
I'll pull out-- let's see.

00:05:21,030 --> 00:05:23,490
I'll pull out bootstrap, and I'm also

00:05:23,490 --> 00:05:25,230
going to pull out for each.

00:05:25,230 --> 00:05:28,360


00:05:28,360 --> 00:05:30,250
We'll do this a couple more times

00:05:30,250 --> 00:05:32,250
from a couple different modules.

00:05:32,250 --> 00:05:34,460
The next one will be our DI module.

00:05:34,460 --> 00:05:36,510
I'm going to pull out bind from there.

00:05:36,510 --> 00:05:38,755
And again, you can see-- I see all the imports,

00:05:38,755 --> 00:05:40,050
and I can pick the one I want.

00:05:40,050 --> 00:05:44,220


00:05:44,220 --> 00:05:48,160
We're also going to pull in from Firebase.

00:05:48,160 --> 00:05:50,110
There will be a couple of imports

00:05:50,110 --> 00:05:54,830
we want from there-- AngularFire and FirebaseArray.

00:05:54,830 --> 00:05:58,140
And finally, we have a couple of little helper functions

00:05:58,140 --> 00:06:01,710
to work with annotations that have all the nice type

00:06:01,710 --> 00:06:02,312
information.

00:06:02,312 --> 00:06:03,770
So we'll pull a component template.

00:06:03,770 --> 00:06:08,420
And we actually saw these in the keynote this morning.

00:06:08,420 --> 00:06:11,270
Now that we have our imports, the next thing we need to do

00:06:11,270 --> 00:06:15,310
is actually write the class that will be the logic

00:06:15,310 --> 00:06:16,350
that we'll use.

00:06:16,350 --> 00:06:19,130
So I'll make a TodoMVC class.

00:06:19,130 --> 00:06:22,510
And then, later, I'm going to export a main function that's

00:06:22,510 --> 00:06:25,380
going to bootstrap this for us.

00:06:25,380 --> 00:06:27,280
As I'm doing this, the IntelliSense

00:06:27,280 --> 00:06:28,870
is popping up to kind of help me.

00:06:28,870 --> 00:06:32,669
And it's pulling all the symbols that it's able to see.

00:06:32,669 --> 00:06:33,460
So I'll do TodoMVC.

00:06:33,460 --> 00:06:36,200


00:06:36,200 --> 00:06:39,110
Let me take a quick second to show what

00:06:39,110 --> 00:06:42,380
we can do with just this code.

00:06:42,380 --> 00:06:45,570
Let's say I hadn't autocompleted TodoMVC.

00:06:45,570 --> 00:06:47,940
And I had just done TodoMV.

00:06:47,940 --> 00:06:50,080
Those of you in the back may be able to see.

00:06:50,080 --> 00:06:52,280
There's a red squiggle underneath this.

00:06:52,280 --> 00:06:54,300
And if I click on it, it says, oops, sorry,

00:06:54,300 --> 00:06:57,180
I cannot find the name TodoMV.

00:06:57,180 --> 00:06:59,780
So this is the TypeScript typechecker

00:06:59,780 --> 00:07:02,510
looking through this and finding, oh, wait a second.

00:07:02,510 --> 00:07:05,110
I don't know where this symbol is ever defined.

00:07:05,110 --> 00:07:06,340
Let me give you a warning.

00:07:06,340 --> 00:07:08,910
And as you can imagine, any kind of type warning,

00:07:08,910 --> 00:07:10,070
it can warn you like this.

00:07:10,070 --> 00:07:13,040
If you have a function call that expects a string,

00:07:13,040 --> 00:07:14,925
and you pass it a number, likewise, you

00:07:14,925 --> 00:07:18,280
can get that error.

00:07:18,280 --> 00:07:21,820
There's other features that come along with the type system

00:07:21,820 --> 00:07:23,070
that we can use.

00:07:23,070 --> 00:07:26,200
So, for example, I can do a rename.

00:07:26,200 --> 00:07:30,210
So I'll rename the TodoMVC to TodoApp.

00:07:30,210 --> 00:07:33,140
And when I do that, notice this one also changes.

00:07:33,140 --> 00:07:37,420
This is maybe not super helpful for really small examples.

00:07:37,420 --> 00:07:41,500
But as you can imagine, a large application that uses the same

00:07:41,500 --> 00:07:44,200
word-- something simple like "text"-- over, and over,

00:07:44,200 --> 00:07:48,200
and over again, a search and replace can get really sketchy.

00:07:48,200 --> 00:07:51,990
Having the tools know exactly which one you meant when you're

00:07:51,990 --> 00:07:53,265
refactoring is really helpful.

00:07:53,265 --> 00:07:55,910


00:07:55,910 --> 00:07:57,620
Let's keep filling out this class,

00:07:57,620 --> 00:08:01,430
so we have the full class here to work with.

00:08:01,430 --> 00:08:02,420
I'll do a TodoService.

00:08:02,420 --> 00:08:05,420


00:08:05,420 --> 00:08:07,180
And let's see.

00:08:07,180 --> 00:08:13,780
That's FirebaseArray, and TodoEdit, item.

00:08:13,780 --> 00:08:16,790
Notice I didn't put any type information on TodoEdit.

00:08:16,790 --> 00:08:20,140
I'm just making a couple of properties for the class.

00:08:20,140 --> 00:08:23,500
But I'm only putting type information where I care to.

00:08:23,500 --> 00:08:26,160
We'll do a constructor and make our sync.

00:08:26,160 --> 00:08:28,460
And here, we'll pick, let's see, AngularFire.

00:08:28,460 --> 00:08:32,110


00:08:32,110 --> 00:08:35,539
So this type information, again, starts playing in.

00:08:35,539 --> 00:08:39,270
I can do this dot, and I get all the members of the class.

00:08:39,270 --> 00:08:42,289
And if I do sync dot, I get all the members of sync.

00:08:42,289 --> 00:08:43,929
And this is coming in from knowing

00:08:43,929 --> 00:08:44,970
that this is AngularFire.

00:08:44,970 --> 00:08:48,320


00:08:48,320 --> 00:08:48,940
Do it again.

00:08:48,940 --> 00:08:50,565
This time, we'll just set that to null.

00:08:50,565 --> 00:08:52,960


00:08:52,960 --> 00:08:56,240
To kind of speed us along a little bit,

00:08:56,240 --> 00:09:00,710
I am going to copy and paste the rest of these methods in.

00:09:00,710 --> 00:09:09,906


00:09:09,906 --> 00:09:12,252
All right.

00:09:12,252 --> 00:09:13,710
And this is pretty straightforward.

00:09:13,710 --> 00:09:19,340
Notice that if you actually go look at David's TodoMVC sample,

00:09:19,340 --> 00:09:21,940
this is just copy and paste straight from there.

00:09:21,940 --> 00:09:24,150
There's no type information.

00:09:24,150 --> 00:09:26,510
This is just straight JavaScript,

00:09:26,510 --> 00:09:29,470
wiring in our data service through each of these methods.

00:09:29,470 --> 00:09:32,050


00:09:32,050 --> 00:09:36,060
We're almost done with this application.

00:09:36,060 --> 00:09:37,840
What we need to do next is actually

00:09:37,840 --> 00:09:41,080
write the annotations that are going to wire up the logic

00:09:41,080 --> 00:09:43,850
that we've set up with the different pieces

00:09:43,850 --> 00:09:45,070
of our configuration.

00:09:45,070 --> 00:09:47,530
Here, we'll use the data source, and we'll also

00:09:47,530 --> 00:09:49,270
use the template.

00:09:49,270 --> 00:09:50,390
So I'll do Component.

00:09:50,390 --> 00:09:52,930


00:09:52,930 --> 00:09:56,460
And I'll start the component configuration with an object.

00:09:56,460 --> 00:09:58,580
And here, too, I can get IntelliSense.

00:09:58,580 --> 00:10:01,830
So we know from Component, we know the type of object

00:10:01,830 --> 00:10:04,465
that it gets called with, and we know the properties

00:10:04,465 --> 00:10:05,510
that are on that object.

00:10:05,510 --> 00:10:07,855
We can just give you those two properties.

00:10:07,855 --> 00:10:11,780


00:10:11,780 --> 00:10:13,330
So I'll do TodoApp.

00:10:13,330 --> 00:10:15,097
And this one is a little bit long,

00:10:15,097 --> 00:10:16,680
so I'm going to copy this one in, too.

00:10:16,680 --> 00:10:28,630


00:10:28,630 --> 00:10:29,130
All right.

00:10:29,130 --> 00:10:31,020
So if I copied correctly, we'll have

00:10:31,020 --> 00:10:35,330
the full component configured for that data source.

00:10:35,330 --> 00:10:38,562
And here, too, maybe just to kind of drive home a point,

00:10:38,562 --> 00:10:40,020
if I had been writing that by hand,

00:10:40,020 --> 00:10:43,010
I could dot in and get the Todo value

00:10:43,010 --> 00:10:46,240
method autocompleted for me.

00:10:46,240 --> 00:10:50,180
And as this tool matures-- so this is still very, very early.

00:10:50,180 --> 00:10:54,960
It's very early alpha for the Sublime plug-in.

00:10:54,960 --> 00:10:58,480
And you could imagine, too, as you do a function call,

00:10:58,480 --> 00:11:00,170
if you start a paren, we could give you

00:11:00,170 --> 00:11:02,840
full help for what the parameters are

00:11:02,840 --> 00:11:06,390
that that function needs.

00:11:06,390 --> 00:11:07,960
We also do the template.

00:11:07,960 --> 00:11:09,380
And here, the same way.

00:11:09,380 --> 00:11:11,310
I get the autocomplete for the URL.

00:11:11,310 --> 00:11:14,910


00:11:14,910 --> 00:11:16,800
And we'll set up, lastly, our directives.

00:11:16,800 --> 00:11:19,920


00:11:19,920 --> 00:11:20,420
All right.

00:11:20,420 --> 00:11:21,880
With that, we should be done.

00:11:21,880 --> 00:11:24,270
So we've done all the imports.

00:11:24,270 --> 00:11:26,430
We've done our class.

00:11:26,430 --> 00:11:28,190
We've had IntelliSense and error checking

00:11:28,190 --> 00:11:31,760
kind of helping us along the way,

00:11:31,760 --> 00:11:33,140
and the annotations on that.

00:11:33,140 --> 00:11:35,470
So let's go ahead and build this.

00:11:35,470 --> 00:11:39,020


00:11:39,020 --> 00:11:44,300
So this snapshot that I'm using has a snapshot of Angular 2.

00:11:44,300 --> 00:11:47,130
And it also has a snapshot of the upcoming TypeScript 1.5

00:11:47,130 --> 00:11:48,000
compiler.

00:11:48,000 --> 00:11:52,950
And I can use that compiler right now.

00:11:52,950 --> 00:11:56,260
So I'll call that with tsc js.

00:11:56,260 --> 00:11:59,740
And if I pass it, the TodoApp that I just wrote,

00:11:59,740 --> 00:12:01,055
it's going to complain.

00:12:01,055 --> 00:12:02,550
So you guys can see that.

00:12:02,550 --> 00:12:05,706
Just make this a little bit smaller.

00:12:05,706 --> 00:12:07,080
You see it's complaining, oh, you

00:12:07,080 --> 00:12:10,000
haven't passed the kind of module system

00:12:10,000 --> 00:12:11,420
that you want to use.

00:12:11,420 --> 00:12:13,850
If we go back and look at the code, we can see why.

00:12:13,850 --> 00:12:15,450
We've got a set of imports at the top.

00:12:15,450 --> 00:12:18,046
These are all ES6 style imports.

00:12:18,046 --> 00:12:19,670
But by default, the TypeScript compiler

00:12:19,670 --> 00:12:24,460
is going to be compiling for ES5 and ES3.

00:12:24,460 --> 00:12:26,410
So let's give it the kind of modules

00:12:26,410 --> 00:12:28,350
that we want to polyfill into.

00:12:28,350 --> 00:12:31,046
For here, we're going to use AMD.

00:12:31,046 --> 00:12:35,530
And when we use AMD, that will polyfill all the ES6 modules

00:12:35,530 --> 00:12:37,570
down to ES5.

00:12:37,570 --> 00:12:40,405
Let's take a quick to look at what that code looks like now

00:12:40,405 --> 00:12:41,575
that we've had it compiled.

00:12:41,575 --> 00:12:45,450


00:12:45,450 --> 00:12:48,900
So we start at the top, and we have the AMD-style imports.

00:12:48,900 --> 00:12:52,300
And all of that is done-- notice it's translated all the ES6

00:12:52,300 --> 00:12:55,490
to ES5, or AMD-style.

00:12:55,490 --> 00:12:58,340
The class that we had has been translated

00:12:58,340 --> 00:13:04,830
into a very common prototype pattern for the class.

00:13:04,830 --> 00:13:06,960
And at the bottom, all the annotation stuff

00:13:06,960 --> 00:13:11,650
has been compiled down to just a small section of annotations

00:13:11,650 --> 00:13:14,710
that kind of wire up the annotations for us.

00:13:14,710 --> 00:13:18,010
So if we cross our fingers, pray to the demo gods,

00:13:18,010 --> 00:13:24,920
then we should be able to run our HTTP server and work.

00:13:24,920 --> 00:13:27,020
So let's go ahead and run.

00:13:27,020 --> 00:13:32,070
And now, we have our TodoApp working just

00:13:32,070 --> 00:13:35,647
from compiling straight from TypeScript as of today.

00:13:35,647 --> 00:13:38,629
[APPLAUSE]

00:13:38,629 --> 00:13:44,110


00:13:44,110 --> 00:13:49,080
So let's talk a bit about where we are as our status.

00:13:49,080 --> 00:13:52,950
So, as I mentioned, as of today, we have a snapshot of Angular 2

00:13:52,950 --> 00:13:55,500
building in TypeScript.

00:13:55,500 --> 00:13:56,977
We're working with Angular 2 team

00:13:56,977 --> 00:13:58,560
to start moving the tools that they're

00:13:58,560 --> 00:14:02,430
working on onto the TypeScript compiler itself.

00:14:02,430 --> 00:14:05,115
There's the TodoMVC app that David East put together.

00:14:05,115 --> 00:14:07,240
We have a version of that that works in TypeScript.

00:14:07,240 --> 00:14:10,100
It's very, very similar to his original one,

00:14:10,100 --> 00:14:12,970
with a little additional type information thrown in.

00:14:12,970 --> 00:14:16,410
And we have the Sublime plug-in that I was showing you earlier.

00:14:16,410 --> 00:14:20,092
We're really excited to get these plug-ins out there,

00:14:20,092 --> 00:14:22,300
and getting people using them, getting your feedback.

00:14:22,300 --> 00:14:25,000
So we'd love to hear more about that.

00:14:25,000 --> 00:14:26,740
So where are we going next?

00:14:26,740 --> 00:14:30,120
So I'm sure there are a few people a little bit skeptical

00:14:30,120 --> 00:14:31,260
about the TypeScript stuff.

00:14:31,260 --> 00:14:33,660
If you've been following closely, and following

00:14:33,660 --> 00:14:36,030
the ES6 compatibility, you'll notice

00:14:36,030 --> 00:14:39,280
that on the ES6 compatibility chart

00:14:39,280 --> 00:14:41,870
of the compilers and polyfill section,

00:14:41,870 --> 00:14:45,730
we're actually the lowest support of any

00:14:45,730 --> 00:14:47,920
of the other trends by others.

00:14:47,920 --> 00:14:49,360
[LAUGHTER]

00:14:49,360 --> 00:14:50,290
Oops.

00:14:50,290 --> 00:14:52,860
So this is of TypeScript 1.4.

00:14:52,860 --> 00:14:56,680
And as we mentioned yesterday, TypeScript 1.5

00:14:56,680 --> 00:15:01,650
has a huge jump in the amount of ES6 features that we support.

00:15:01,650 --> 00:15:03,179
In fact, this nearly closes the gap.

00:15:03,179 --> 00:15:04,970
There's only a few more features after this

00:15:04,970 --> 00:15:07,380
that we still need to finish.

00:15:07,380 --> 00:15:10,140
We added annotations and decorator support,

00:15:10,140 --> 00:15:12,970
so that, of course, you can do all the fun

00:15:12,970 --> 00:15:14,590
Angular 2 stuff-- a nice separation

00:15:14,590 --> 00:15:17,920
of concerns, of your logic, and your configuration,

00:15:17,920 --> 00:15:19,880
and all the editor support.

00:15:19,880 --> 00:15:22,920
Nice thing, beta will be out in a few weeks.

00:15:22,920 --> 00:15:26,080
So if you want to play with what we're

00:15:26,080 --> 00:15:28,360
showing in a slightly more stable form

00:15:28,360 --> 00:15:33,270
than even what I'm showing here, you can get the beta.

00:15:33,270 --> 00:15:35,980
The future TypeScript 1.6 is coming out.

00:15:35,980 --> 00:15:37,440
We're adding generators.

00:15:37,440 --> 00:15:40,360
And lest we feel like we're standing still,

00:15:40,360 --> 00:15:43,410
we're going to start pulling in proposed features from ES7.

00:15:43,410 --> 00:15:44,706
So async/await.

00:15:44,706 --> 00:15:46,330
If you do a lot of promise programming,

00:15:46,330 --> 00:15:49,370
this is super helpful to have async/await there.

00:15:49,370 --> 00:15:50,948
So we're really excited.

00:15:50,948 --> 00:15:53,792
[APPLAUSE]

00:15:53,792 --> 00:15:58,040


00:15:58,040 --> 00:15:58,540
All right.

00:15:58,540 --> 00:16:01,686
If you would like to learn more, I kind of lied a little bit

00:16:01,686 --> 00:16:03,310
saying you have to wait until the beta.

00:16:03,310 --> 00:16:05,220
You can actually click on this first link,

00:16:05,220 --> 00:16:09,720
or type it into your browsers, and you can get ngconf2015.

00:16:09,720 --> 00:16:12,380
The whole demo I showed, snapshot of Angular 2

00:16:12,380 --> 00:16:14,040
building on TypeScript.

00:16:14,040 --> 00:16:16,100
So you get all the type information.

00:16:16,100 --> 00:16:19,000
You get the Sublime plug-in and all the libraries

00:16:19,000 --> 00:16:21,350
that we're supporting going on.

00:16:21,350 --> 00:16:24,390
You can get that now and play with it today.

00:16:24,390 --> 00:16:26,800
And you can send us your feedback.

00:16:26,800 --> 00:16:29,020
Just add an issue to the issue tracker.

00:16:29,020 --> 00:16:32,600
We'll take that as like our comment box on how this works.

00:16:32,600 --> 00:16:35,070
So definitely let us know.

00:16:35,070 --> 00:16:38,330
If you would like to learn more about TypeScript,

00:16:38,330 --> 00:16:42,780
definitely hit us up on the TypeScript GitHub website

00:16:42,780 --> 00:16:44,520
or the typescriptlang.org.

00:16:44,520 --> 00:16:48,840
So if you just want to read and want to learn more,

00:16:48,840 --> 00:16:51,560
there is an entire manual full of text

00:16:51,560 --> 00:16:53,990
that you can read and enjoy.

00:16:53,990 --> 00:16:56,360
And there's also the playground that you can watch, kind

00:16:56,360 --> 00:16:58,380
of type code in the left-hand side

00:16:58,380 --> 00:17:00,110
and see it pop in the right-hand side.

00:17:00,110 --> 00:17:01,800
You might have seen the talk yesterday

00:17:01,800 --> 00:17:03,111
that talked about that.

00:17:03,111 --> 00:17:07,480
So big thank you, again, and I look forward to hearing

00:17:07,480 --> 00:17:08,680
from you.

00:17:08,680 --> 00:17:11,130
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=Xw93oketp18


