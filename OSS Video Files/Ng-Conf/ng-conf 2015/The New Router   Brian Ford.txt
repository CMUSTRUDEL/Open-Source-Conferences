Title: The New Router   Brian Ford
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,130


00:00:00,130 --> 00:00:01,046
BRIAN FORD: All right.

00:00:01,046 --> 00:00:02,110
Great.

00:00:02,110 --> 00:00:04,540
Well, that's a lot to live up to, that intro.

00:00:04,540 --> 00:00:05,680
So hi, I'm Brian.

00:00:05,680 --> 00:00:09,170
I'm in AngularJS core team at Google.

00:00:09,170 --> 00:00:11,770
And I've been working on this new router thing

00:00:11,770 --> 00:00:14,710
that everyone's been talking about.

00:00:14,710 --> 00:00:17,860
So before I get started, though, I

00:00:17,860 --> 00:00:19,652
wanted to announce that I'm not announcing

00:00:19,652 --> 00:00:20,610
anything controversial.

00:00:20,610 --> 00:00:23,384
I just found this cool flaming skull GIF on the internet,

00:00:23,384 --> 00:00:25,800
and I wanted to incorporate it in my presentation somehow.

00:00:25,800 --> 00:00:28,810
So I kept asking Igor, like, can I deprecate a bunch of APIs?

00:00:28,810 --> 00:00:30,600
And Igor was like, no, we need those.

00:00:30,600 --> 00:00:32,308
But he couldn't stop me from putting this

00:00:32,308 --> 00:00:34,127
in my presentation, so I did.

00:00:34,127 --> 00:00:35,528
[APPLAUSE]

00:00:35,528 --> 00:00:36,897
Thank you.

00:00:36,897 --> 00:00:37,396
Thank you .

00:00:37,396 --> 00:00:39,080
It's my contribution.

00:00:39,080 --> 00:00:43,290
OK, so back to the real subject of the talk.

00:00:43,290 --> 00:00:45,230
I'm going to be talking about this new router.

00:00:45,230 --> 00:00:47,750
But before that, I want to give kind of a brief history

00:00:47,750 --> 00:00:49,790
of routing in Angular.

00:00:49,790 --> 00:00:52,380
So it's no secret that ngRoute is

00:00:52,380 --> 00:00:55,710
too simple for modern, complex apps.

00:00:55,710 --> 00:00:56,955
It was from a simpler time.

00:00:56,955 --> 00:00:58,580
Like, it really hasn't changed too much

00:00:58,580 --> 00:01:00,570
over the past five years.

00:01:00,570 --> 00:01:04,510
And to kind of fill the needs of developers,

00:01:04,510 --> 00:01:07,250
there's a great community effort called UI-Router

00:01:07,250 --> 00:01:10,334
that many of you are familiar with and use.

00:01:10,334 --> 00:01:11,750
But for Angular 2, we knew that we

00:01:11,750 --> 00:01:15,270
needed to have a better first-class router.

00:01:15,270 --> 00:01:17,610
And so we kind of captured all the use cases.

00:01:17,610 --> 00:01:20,060
We looked at other solutions, figured out what was

00:01:20,060 --> 00:01:24,760
the state-of-the-art in routing, and we drafted a design that

00:01:24,760 --> 00:01:27,136
Rob Eisenberg presented at ng-europe.

00:01:27,136 --> 00:01:29,510
And if you haven't seen this talk, I highly recommend it.

00:01:29,510 --> 00:01:32,810
He goes more into the architectural decisions

00:01:32,810 --> 00:01:34,100
and the high-level things.

00:01:34,100 --> 00:01:36,325
Whereas today I'm going to try and show you some code

00:01:36,325 --> 00:01:38,715
and get to the meat and potatoes.

00:01:38,715 --> 00:01:39,590
But it's really good.

00:01:39,590 --> 00:01:41,050
This gives you kind of some context

00:01:41,050 --> 00:01:43,650
as to what we were thinking.

00:01:43,650 --> 00:01:45,630
So we knew that we needed better for Angular 2,

00:01:45,630 --> 00:01:48,110
but we wondered if we couldn't also, at the same time,

00:01:48,110 --> 00:01:51,070
improve the situation for Angular 1.

00:01:51,070 --> 00:01:53,440
And if we're doing that, if we're having a router which

00:01:53,440 --> 00:01:57,020
is kind of one of the highest level parts of your app,

00:01:57,020 --> 00:02:01,200
then could we also make migration a little bit easier?

00:02:01,200 --> 00:02:02,221
So the answer is yes.

00:02:02,221 --> 00:02:04,720
Otherwise, I wouldn't have posed that hypothetical question.

00:02:04,720 --> 00:02:07,580
[LAUGHTER]

00:02:07,580 --> 00:02:09,440
But the way that this works is we

00:02:09,440 --> 00:02:12,030
basically transpile this router service

00:02:12,030 --> 00:02:15,700
from what used to be called AtScript and is now TypeScript.

00:02:15,700 --> 00:02:18,350
And I have to mentally shift.

00:02:18,350 --> 00:02:21,680
But we transpile it and we wrap it in an Angular 1 module.

00:02:21,680 --> 00:02:24,600
So this is like ES6 modules and TypeScript.

00:02:24,600 --> 00:02:27,520
And we just translate it, and you can use it in Angular.

00:02:27,520 --> 00:02:30,400
You can use the new router in Angular 1.

00:02:30,400 --> 00:02:32,420
Something to note is that the directives are

00:02:32,420 --> 00:02:34,570
implemented totally separately.

00:02:34,570 --> 00:02:38,190
And there's a build system that takes care of all of this.

00:02:38,190 --> 00:02:41,710
So I love a complex build system as much as the next web

00:02:41,710 --> 00:02:45,230
developer, but let's see what the actual code looks like.

00:02:45,230 --> 00:02:48,870
So to that ends, I made this extremely impressive Hello

00:02:48,870 --> 00:02:52,500
World app that routes between two different components

00:02:52,500 --> 00:02:54,789
and shows kind of fading back and forth.

00:02:54,789 --> 00:02:57,080
There's a link to it on GitHub if you don't believe me.

00:02:57,080 --> 00:02:59,470
It's kind of staggering.

00:02:59,470 --> 00:03:01,740
And as you would hope, it updates the URL.

00:03:01,740 --> 00:03:03,785
Here it's showed with [? hash-ping ?] mode,

00:03:03,785 --> 00:03:06,470
but you can use HTML5 mode.

00:03:06,470 --> 00:03:06,970
All right.

00:03:06,970 --> 00:03:09,250
So let's look at code now, now that we've

00:03:09,250 --> 00:03:10,420
seen what the app is.

00:03:10,420 --> 00:03:15,080
So this is a pretty typical-looking Angular module.

00:03:15,080 --> 00:03:19,870
We want to require this ngNewRouter module.

00:03:19,870 --> 00:03:22,050
And then the only other thing that's kind of weird

00:03:22,050 --> 00:03:25,430
is that we have this $routeConfig property

00:03:25,430 --> 00:03:27,269
of our App Controller.

00:03:27,269 --> 00:03:29,310
And you can think of this sort of in the same way

00:03:29,310 --> 00:03:31,764
that you might use $inject.

00:03:31,764 --> 00:03:33,430
This just gives Angular some information

00:03:33,430 --> 00:03:34,590
about how routing works.

00:03:34,590 --> 00:03:37,380


00:03:37,380 --> 00:03:41,390
And specifically, we're routing-- the root path routes

00:03:41,390 --> 00:03:43,400
to-- redirects to welcome.

00:03:43,400 --> 00:03:46,740
Welcome redirects to a component called welcome.

00:03:46,740 --> 00:03:51,439
And /goodbye is a component goodbye.

00:03:51,439 --> 00:03:52,980
And I'll talk a little bit about what

00:03:52,980 --> 00:03:56,950
it means to be a component in Angular 1 in just a minute.

00:03:56,950 --> 00:03:59,350
But let's look at index.html.

00:03:59,350 --> 00:04:02,310
So again, this is pretty standard.

00:04:02,310 --> 00:04:06,730
We're using base href, which I consider to be a best practice.

00:04:06,730 --> 00:04:10,810
If you want to use HTML5 mode in Angular 1.3 and beyond,

00:04:10,810 --> 00:04:13,640
you actually have to specify a base href.

00:04:13,640 --> 00:04:17,350
And it's just a good thing to do if you want to be sane.

00:04:17,350 --> 00:04:20,220
Then we have a new directive called ng-link.

00:04:20,220 --> 00:04:23,260
And ng-link is linking to a welcome component.

00:04:23,260 --> 00:04:26,480
And again, we'll talk a bit more about components,

00:04:26,480 --> 00:04:28,380
but I'm hoping you see the relationship

00:04:28,380 --> 00:04:32,720
between the configuration and this link directive.

00:04:32,720 --> 00:04:36,460
And then the last interesting feature is this ng-viewport.

00:04:36,460 --> 00:04:39,350
So this is basically the same thing as ng-view,

00:04:39,350 --> 00:04:42,050
but you can also nest them, and you can have multiple of them,

00:04:42,050 --> 00:04:43,250
and you can name them.

00:04:43,250 --> 00:04:44,750
So it's the same general concept,

00:04:44,750 --> 00:04:46,110
but it lets you do a lot more.

00:04:46,110 --> 00:04:49,330
[APPLAUSE]

00:04:49,330 --> 00:04:51,180
That's right.

00:04:51,180 --> 00:04:54,510
So that ng-link directive, when you actually run your app,

00:04:54,510 --> 00:04:55,370
it'll create hrefs.

00:04:55,370 --> 00:04:59,350
So you can right-click this and get something

00:04:59,350 --> 00:05:02,612
that you can copy and paste and send to your friend.

00:05:02,612 --> 00:05:04,320
And the nice thing about this is that you

00:05:04,320 --> 00:05:06,120
don't have to build your app in a way

00:05:06,120 --> 00:05:08,610
where if you re-architect it, you

00:05:08,610 --> 00:05:14,330
have to manually change a bunch of hrefs all over the place.

00:05:14,330 --> 00:05:17,870
So this is a goodbye component.

00:05:17,870 --> 00:05:21,280
And a component in Angular 1 is just

00:05:21,280 --> 00:05:23,460
a template and a controller.

00:05:23,460 --> 00:05:27,690
And the controller can have a route configuration of its own.

00:05:27,690 --> 00:05:32,630
And the template uses controller as syntax

00:05:32,630 --> 00:05:36,160
in a way that maps by a convention

00:05:36,160 --> 00:05:37,897
to the name of the component.

00:05:37,897 --> 00:05:39,730
So that sounds like a lot, but this actually

00:05:39,730 --> 00:05:43,030
gets you a lot closer to writing templates

00:05:43,030 --> 00:05:45,140
like you will in Angular 2.

00:05:45,140 --> 00:05:47,610
So here, this is pretty simple.

00:05:47,610 --> 00:05:49,430
We're using Controller As.

00:05:49,430 --> 00:05:51,834
So goodbye.heading references the heading property

00:05:51,834 --> 00:05:53,875
of the goodbye controller when it's instantiated.

00:05:53,875 --> 00:05:56,740


00:05:56,740 --> 00:05:59,830
And it also has out-of-the-box support for ngAnimate.

00:05:59,830 --> 00:06:01,360
So there's this awesome animated GIF

00:06:01,360 --> 00:06:03,026
that I made that shows the classes being

00:06:03,026 --> 00:06:04,650
added and removed.

00:06:04,650 --> 00:06:07,131
If you've never done animations in Angular,

00:06:07,131 --> 00:06:09,630
all you have to know is that Angular will attach the classes

00:06:09,630 --> 00:06:10,930
at the right time.

00:06:10,930 --> 00:06:13,290
And you write a little bit of CSS like this.

00:06:13,290 --> 00:06:16,130
So you say, oh, we're going to change the opacity based

00:06:16,130 --> 00:06:17,720
on whether we're entering or leaving.

00:06:17,720 --> 00:06:20,484
And we'll use CSS transitions to describe

00:06:20,484 --> 00:06:21,775
the rate at which that happens.

00:06:21,775 --> 00:06:25,480


00:06:25,480 --> 00:06:28,480
So I also mentioned that you can have

00:06:28,480 --> 00:06:30,060
nested and sibling components.

00:06:30,060 --> 00:06:32,540
Just to kind of show you how that works,

00:06:32,540 --> 00:06:34,695
this is a quick example.

00:06:34,695 --> 00:06:37,320
The demo's really boring, so I'm not actually going to show it.

00:06:37,320 --> 00:06:40,200
But the important part is that you can

00:06:40,200 --> 00:06:44,010
specify a map of components.

00:06:44,010 --> 00:06:48,400
And for each component, it's mapping this name,

00:06:48,400 --> 00:06:51,140
in this case left and right, to the component that it

00:06:51,140 --> 00:06:52,780
will fill in in that spot.

00:06:52,780 --> 00:06:57,027
So you can imagine how this works.

00:06:57,027 --> 00:06:58,860
One of the interesting new features, though,

00:06:58,860 --> 00:07:00,400
of this router is that it exposes

00:07:00,400 --> 00:07:02,670
a bunch of lifecycle hooks.

00:07:02,670 --> 00:07:05,300
And I'll show what this means with another awesome animated

00:07:05,300 --> 00:07:06,120
GIF.

00:07:06,120 --> 00:07:08,770
So this is a pretty common scenario, I think,

00:07:08,770 --> 00:07:12,140
where you have some form, and you want to prompt the user.

00:07:12,140 --> 00:07:14,670
So that way, they can save before they exit,

00:07:14,670 --> 00:07:18,324
or maybe you want to persist it some other way.

00:07:18,324 --> 00:07:20,240
But anyway, this would be tedious to implement

00:07:20,240 --> 00:07:22,530
with something like ngRoute, where

00:07:22,530 --> 00:07:26,140
you'd have to listen to all of these different change events.

00:07:26,140 --> 00:07:32,250
With the new router, you would write something like this.

00:07:32,250 --> 00:07:34,420
So in this case, there's just a couple things

00:07:34,420 --> 00:07:36,400
that I want to point out.

00:07:36,400 --> 00:07:39,420
You can parameterize your path.

00:07:39,420 --> 00:07:42,890
And it uses, more or less, the same DSL

00:07:42,890 --> 00:07:46,870
as you're used to from maybe Express.js or from ngRoute

00:07:46,870 --> 00:07:48,910
or from UI-Router.

00:07:48,910 --> 00:07:50,440
It's pretty standard stuff.

00:07:50,440 --> 00:07:51,277
It's unsurprising.

00:07:51,277 --> 00:07:53,110
And in this case, this links to an editPost.

00:07:53,110 --> 00:07:55,720


00:07:55,720 --> 00:07:58,900
And the consequence then of being able to parameterize it

00:07:58,900 --> 00:08:02,200
is in your ng-link, you also then can

00:08:02,200 --> 00:08:05,680
pass in whatever the value of the parameter is.

00:08:05,680 --> 00:08:07,420
And that's what we'll use to construct

00:08:07,420 --> 00:08:10,360
the href of that link.

00:08:10,360 --> 00:08:12,070
So in the actual editPost itself is

00:08:12,070 --> 00:08:15,400
where we have the behavior where we bring up this modal dialog

00:08:15,400 --> 00:08:17,560
and ask you whether or not you want to save.

00:08:17,560 --> 00:08:20,710
So again, we have $routeParams.

00:08:20,710 --> 00:08:22,100
Pretty unsurprising.

00:08:22,100 --> 00:08:23,812
It works just like ngRoute.

00:08:23,812 --> 00:08:25,520
So here's where we get a hold of that ID,

00:08:25,520 --> 00:08:27,670
so we know which post we're talking about.

00:08:27,670 --> 00:08:30,160
And then we have this canDeactivate function

00:08:30,160 --> 00:08:32,515
on the prototype of the controller.

00:08:32,515 --> 00:08:33,890
You don't necessarily need to use

00:08:33,890 --> 00:08:38,500
this prototype style or this class style controllers.

00:08:38,500 --> 00:08:41,659
As long as the controller has a method called canDeactivate,

00:08:41,659 --> 00:08:44,250
the router will know to run it at the right time.

00:08:44,250 --> 00:08:47,460
So what this hook does is it compares the current content

00:08:47,460 --> 00:08:48,750
with the persisted content.

00:08:48,750 --> 00:08:50,990
And if it's the same, it says, all right,

00:08:50,990 --> 00:08:52,690
you can go on your way.

00:08:52,690 --> 00:08:54,770
Otherwise, it pops up this modal dialog,

00:08:54,770 --> 00:09:00,720
and this saveModal.getResponse happens to return a promise.

00:09:00,720 --> 00:09:05,610
And if the promise accepts, then it continues navigating.

00:09:05,610 --> 00:09:08,160
And if it rejects, then it goes back.

00:09:08,160 --> 00:09:10,770
And so you can see how it's pretty easy

00:09:10,770 --> 00:09:13,411
to build up complex behaviors.

00:09:13,411 --> 00:09:15,660
There's actually a bunch of different lifecycle hooks.

00:09:15,660 --> 00:09:20,250
So the order of things is for each viewport

00:09:20,250 --> 00:09:22,590
in the system that already has something in it,

00:09:22,590 --> 00:09:26,160
we ask it first, can the current component in there

00:09:26,160 --> 00:09:28,630
reactivate, meaning can we reuse it?

00:09:28,630 --> 00:09:31,010
So this might be useful for optimizations.

00:09:31,010 --> 00:09:32,770
This might be useful for if you have

00:09:32,770 --> 00:09:35,170
some complex animation where you're moving DOM

00:09:35,170 --> 00:09:37,620
around and rearranging it.

00:09:37,620 --> 00:09:40,346
But if it says no, then you continue on.

00:09:40,346 --> 00:09:41,970
You say, all right, can you deactivate?

00:09:41,970 --> 00:09:44,380
So this is where we saw that modal come up.

00:09:44,380 --> 00:09:46,880
Assuming that's all right, we instantiate the new component.

00:09:46,880 --> 00:09:48,510
We ask it, can it activate?

00:09:48,510 --> 00:09:51,310
This hook is where you might start implementing something

00:09:51,310 --> 00:09:53,650
like auth or log in.

00:09:53,650 --> 00:09:56,300
And then assuming all goes well, it deactivates the old one

00:09:56,300 --> 00:09:58,810
and activates the new one.

00:09:58,810 --> 00:10:01,680
And again, it does this first for every viewport,

00:10:01,680 --> 00:10:05,980
and then top-down for every level of routing.

00:10:05,980 --> 00:10:08,910
So you can compose these complex behaviors

00:10:08,910 --> 00:10:12,311
without having to understand how every part of the system

00:10:12,311 --> 00:10:12,810
navigates.

00:10:12,810 --> 00:10:15,770


00:10:15,770 --> 00:10:20,220
So in the keynote, it was mentioned that there's

00:10:20,220 --> 00:10:22,400
migration with this new router.

00:10:22,400 --> 00:10:25,010
And so there's kind of two key aspects here.

00:10:25,010 --> 00:10:27,680
So the Angular 1 bindings are still a little bit

00:10:27,680 --> 00:10:29,035
of a work in progress.

00:10:29,035 --> 00:10:31,410
Sorry, the Angular 2 bindings, rather, for the new router

00:10:31,410 --> 00:10:33,180
are a little bit of a work in progress.

00:10:33,180 --> 00:10:36,200
So how you use the new router in Angular 2

00:10:36,200 --> 00:10:38,380
will probably be a little bit different.

00:10:38,380 --> 00:10:41,570
But the key thing to notice is that this configuration,

00:10:41,570 --> 00:10:43,783
like this object that you're passing in here,

00:10:43,783 --> 00:10:45,700
is exactly the same between the two.

00:10:45,700 --> 00:10:48,372
So that already makes things conceptually very similar.

00:10:48,372 --> 00:10:50,830
There's not a lot of context switching that you have to do.

00:10:50,830 --> 00:10:52,040
If you're using the new router, the way

00:10:52,040 --> 00:10:54,770
they use an Angular 1 is the same, essentially, as the way

00:10:54,770 --> 00:10:57,610
you'll use an Angular 2.

00:10:57,610 --> 00:11:00,050
And the other thing in this incremental strategy

00:11:00,050 --> 00:11:02,072
that Igor mentioned is that you can do it

00:11:02,072 --> 00:11:03,530
in any sort of combination of ways.

00:11:03,530 --> 00:11:05,680
So you can run Angular 2 inside Angular 1,

00:11:05,680 --> 00:11:08,430
or you can run Angular 1 inside Angular 2.

00:11:08,430 --> 00:11:11,200
So you can do kind of top-down or bottom-up.

00:11:11,200 --> 00:11:13,080
And you can even mix these strategies.

00:11:13,080 --> 00:11:14,500
AUDIENCE: Woo!

00:11:14,500 --> 00:11:15,000
[APPLAUSE]

00:11:15,000 --> 00:11:16,210
BRIAN FORD: Thank you.

00:11:16,210 --> 00:11:16,710
All right.

00:11:16,710 --> 00:11:18,626
So you might have an app that looks like this.

00:11:18,626 --> 00:11:20,600
This is an Angular 1 app using the new router.

00:11:20,600 --> 00:11:24,730
And each of these is some level of routing or some component.

00:11:24,730 --> 00:11:28,320
And so what you might do is you might rewrite just this one

00:11:28,320 --> 00:11:30,270
leaf component here, because you're

00:11:30,270 --> 00:11:32,422
doing a new feature anyway.

00:11:32,422 --> 00:11:34,630
And then you might continue to do its parent and then

00:11:34,630 --> 00:11:35,860
the next parent.

00:11:35,860 --> 00:11:38,090
And then work your way down.

00:11:38,090 --> 00:11:40,320
And then, maybe these last two are kind of expensive,

00:11:40,320 --> 00:11:44,630
so you wait a while until features ship.

00:11:44,630 --> 00:11:46,590
The key thing here is just that it's flexible.

00:11:46,590 --> 00:11:49,920
So regardless of how you've built your application

00:11:49,920 --> 00:11:53,140
or where you're planning to take your application,

00:11:53,140 --> 00:11:56,600
you can kind of strategically decide where you're

00:11:56,600 --> 00:11:58,230
going to migrate to Angular 2.

00:11:58,230 --> 00:12:01,650


00:12:01,650 --> 00:12:05,370
So that was kind of where we are right now

00:12:05,370 --> 00:12:07,080
and kind of the core features.

00:12:07,080 --> 00:12:09,390
But let's talk a little bit about the future.

00:12:09,390 --> 00:12:10,320
So what about ngRoute?

00:12:10,320 --> 00:12:12,650
So it's not going anywhere, but it's not getting

00:12:12,650 --> 00:12:14,120
any new features either.

00:12:14,120 --> 00:12:16,470
This really shouldn't be too much of a surprise.

00:12:16,470 --> 00:12:19,785
ngRoute has changed very, very little since its inception.

00:12:19,785 --> 00:12:20,660
So should you use it?

00:12:20,660 --> 00:12:24,850
Probably not unless your app is very, very simple.

00:12:24,850 --> 00:12:27,535
So why did we make this whole new router?

00:12:27,535 --> 00:12:30,140
Why didn't we just adapt UI-Router?

00:12:30,140 --> 00:12:32,870
Now I have to choose between using the new router in Angular

00:12:32,870 --> 00:12:37,930
1 or using UI-Router if I'm using Angular 1.

00:12:37,930 --> 00:12:41,400
The Angular 2 router is built with Angular 2-- or sorry,

00:12:41,400 --> 00:12:43,969
the new router is built with Angular 2 in mind.

00:12:43,969 --> 00:12:45,510
And so although it runs in Angular 1,

00:12:45,510 --> 00:12:48,480
it has this nice migration path.

00:12:48,480 --> 00:12:52,260
Whereas, I think you'd have to break some things in UI-Router.

00:12:52,260 --> 00:12:54,420
But the good news is that we're collaborating

00:12:54,420 --> 00:12:58,000
on a solution on GitHub to try and make it so you don't really

00:12:58,000 --> 00:12:59,290
have to make this choice.

00:12:59,290 --> 00:13:01,709
So if you have a large app that's built on UI-Router,

00:13:01,709 --> 00:13:04,000
we're going to work on a way to make it easy to migrate

00:13:04,000 --> 00:13:05,000
to the new router.

00:13:05,000 --> 00:13:08,259
And if you're starting out a new Angular app,

00:13:08,259 --> 00:13:10,300
I would urge you to take a look at the new router

00:13:10,300 --> 00:13:12,740
and give me some feedback.

00:13:12,740 --> 00:13:15,290
Because you can really shape where it goes and what it looks

00:13:15,290 --> 00:13:16,240
like.

00:13:16,240 --> 00:13:18,640
So again, kind of details forthcoming.

00:13:18,640 --> 00:13:21,620
But you can follow along on GitHub.

00:13:21,620 --> 00:13:22,820
And when will it be done?

00:13:22,820 --> 00:13:27,550
So the new router will go 1.0 with bindings for Angular 1

00:13:27,550 --> 00:13:29,610
as soon as Angular 1.4 is released.

00:13:29,610 --> 00:13:34,060
And beyond that, it will have independent semver releases.

00:13:34,060 --> 00:13:36,400
So it'll continue to move forward.

00:13:36,400 --> 00:13:39,170
And Angular 1 will continue to move forward as well.

00:13:39,170 --> 00:13:40,267
AUDIENCE: Woo.

00:13:40,267 --> 00:13:42,600
BRIAN FORD: And you can actually kind of cyber-stalk me.

00:13:42,600 --> 00:13:45,150
I actually publish stand-up style updates on all the work

00:13:45,150 --> 00:13:45,992
that I'm doing.

00:13:45,992 --> 00:13:47,200
So you can go check that out.

00:13:47,200 --> 00:13:52,390
There's a link in my slides if you can't memorize this.

00:13:52,390 --> 00:13:54,644
And beyond that, there are plenty of things in 1x

00:13:54,644 --> 00:13:56,810
that could be improved to make the routing situation

00:13:56,810 --> 00:13:57,770
a little bit better.

00:13:57,770 --> 00:13:59,930
So one thing that I commonly hear

00:13:59,930 --> 00:14:04,090
is that people want to do lazy loading in Angular 1.

00:14:04,090 --> 00:14:06,120
And right now, there's not a great way to do it.

00:14:06,120 --> 00:14:08,390
So I've been working on this proposal

00:14:08,390 --> 00:14:12,110
to add a new API to the DI in Angular 1

00:14:12,110 --> 00:14:13,830
to make this just a little bit better.

00:14:13,830 --> 00:14:16,210
So the new router, when used in Angular 1,

00:14:16,210 --> 00:14:18,360
would be able to use this API and would

00:14:18,360 --> 00:14:21,546
be able to handle lazy loading of your code for you.

00:14:21,546 --> 00:14:24,927
[APPLAUSE]

00:14:24,927 --> 00:14:27,825


00:14:27,825 --> 00:14:28,840
All right.

00:14:28,840 --> 00:14:30,990
So I'm up here talking, but it really

00:14:30,990 --> 00:14:33,450
wasn't me that did most of this work even.

00:14:33,450 --> 00:14:35,800
Like, this is shoulders of giants stuff.

00:14:35,800 --> 00:14:38,270
So first, I'd like to shout out to the Ember folks.

00:14:38,270 --> 00:14:40,950
They wrote this library called route-recognizer

00:14:40,950 --> 00:14:42,990
that the new router actually uses.

00:14:42,990 --> 00:14:43,870
And it's really cool.

00:14:43,870 --> 00:14:45,705
It lets you give it a configuration,

00:14:45,705 --> 00:14:50,540
and then it understands how to serialize and deserialize

00:14:50,540 --> 00:14:52,890
routes, and URLs, and parameters, and all

00:14:52,890 --> 00:14:54,120
these sort of things.

00:14:54,120 --> 00:14:55,020
So that's amazing.

00:14:55,020 --> 00:14:56,300
They did a really good job.

00:14:56,300 --> 00:14:58,300
Definitely check it out if you're interested in,

00:14:58,300 --> 00:15:00,710
like, router internal things.

00:15:00,710 --> 00:15:02,472
I'd also like to shout out to Rob.

00:15:02,472 --> 00:15:04,680
A lot of the great architectural and design decisions

00:15:04,680 --> 00:15:07,900
came from Rob and from his experience working on Durandal.

00:15:07,900 --> 00:15:10,630
So working with him has been invaluable.

00:15:10,630 --> 00:15:13,050
So thank you, Rob.

00:15:13,050 --> 00:15:14,800
And I also wanted to shout out to a couple

00:15:14,800 --> 00:15:17,490
people who have been super active on GitHub on this repo.

00:15:17,490 --> 00:15:19,680
So Pascal, Sander, and Blake.

00:15:19,680 --> 00:15:22,500
You guys just constantly pop in, and have great ideas,

00:15:22,500 --> 00:15:24,180
and give good feedback.

00:15:24,180 --> 00:15:28,230
And I wouldn't be able to show off some of these things

00:15:28,230 --> 00:15:29,430
without their help.

00:15:29,430 --> 00:15:31,830
And if you're interested, you can join this list.

00:15:31,830 --> 00:15:35,250
So although I said 1.0 will be soon, in my opinion,

00:15:35,250 --> 00:15:36,580
we're just getting started.

00:15:36,580 --> 00:15:39,317
And as long as we keep having good ideas,

00:15:39,317 --> 00:15:40,900
we're going to keep implementing them.

00:15:40,900 --> 00:15:42,070
So go check out--

00:15:42,070 --> 00:15:45,020
The docs are on angular.github.io.

00:15:45,020 --> 00:15:49,510
I imagine they'll move elsewhere soon.

00:15:49,510 --> 00:15:51,986
But you can also check out GitHub.

00:15:51,986 --> 00:15:52,610
There's README.

00:15:52,610 --> 00:15:54,210
There's CONTRIBUTING guide.

00:15:54,210 --> 00:15:56,860
I'm pretty diligent about responding to issues

00:15:56,860 --> 00:16:00,820
and filing stuff away into milestones.

00:16:00,820 --> 00:16:03,510
So I'm excited to see what the future of routing will be like.

00:16:03,510 --> 00:16:04,010
Thank you.

00:16:04,010 --> 00:16:07,460
[APPLAUSE AND CHEERS]


YouTube URL: https://www.youtube.com/watch?v=vecg70fPDFw


