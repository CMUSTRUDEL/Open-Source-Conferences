Title: Whats new in ngAnimate - Matias NiemelaÌˆ
Publication date: 2015-03-08
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:02,140


00:00:02,140 --> 00:00:05,110
MATIAS NIEMEIA: Sounds like the microphone's working.

00:00:05,110 --> 00:00:07,540
Let's get started.

00:00:07,540 --> 00:00:09,350
All right, so before I even begin talking,

00:00:09,350 --> 00:00:11,060
that link right there is to the slides,

00:00:11,060 --> 00:00:13,370
so copy that down quickly, because this first slide is not

00:00:13,370 --> 00:00:14,703
going to be around for too long.

00:00:14,703 --> 00:00:17,516


00:00:17,516 --> 00:00:20,556
One second.

00:00:20,556 --> 00:00:22,970
All right, so my name is Matias.

00:00:22,970 --> 00:00:25,850
I've been on the Angular team for over two years.

00:00:25,850 --> 00:00:28,400
And I mostly work on ngAnimate.

00:00:28,400 --> 00:00:30,740
And today that's what I'm going to be talking about.

00:00:30,740 --> 00:00:32,590
So my website is yearofmoo.com, and that's

00:00:32,590 --> 00:00:34,580
how I got started with Angular.

00:00:34,580 --> 00:00:37,820
And this is a sort of overall background and explanation

00:00:37,820 --> 00:00:39,420
of who I am.

00:00:39,420 --> 00:00:42,373
In two weeks, I'll be starting full time at Google.

00:00:42,373 --> 00:00:42,873
[CHEERING]

00:00:42,873 --> 00:00:43,373
Yeah.

00:00:43,373 --> 00:00:45,760
[APPLAUSE]

00:00:45,760 --> 00:00:47,700
And I was born in Finland.

00:00:47,700 --> 00:00:49,810
I live in Canada at the moment.

00:00:49,810 --> 00:00:52,670
And that cloud right there is my blog's logo.

00:00:52,670 --> 00:00:55,460
And obviously you guys know what the first logo is.

00:00:55,460 --> 00:00:57,022
If you wouldn't, get out of the room.

00:00:57,022 --> 00:00:58,170
[LAUGHING]

00:00:58,170 --> 00:01:02,480
OK, so we're going to talk about animations in Angular, right?

00:01:02,480 --> 00:01:05,060
And I'm not going to spend time explaining the basics,

00:01:05,060 --> 00:01:07,940
because this has been the same for almost two years,

00:01:07,940 --> 00:01:09,940
and there's tons of material out there for this.

00:01:09,940 --> 00:01:11,020
But I'm going to explain new stuff.

00:01:11,020 --> 00:01:13,440
But I can't just hop into the new stuff right away.

00:01:13,440 --> 00:01:15,180
So I'll just take one or two slides

00:01:15,180 --> 00:01:18,420
and explain what happens when ngAnimate does its thing.

00:01:18,420 --> 00:01:21,130
So we have CSS Hooks and JavaScript Hooks

00:01:21,130 --> 00:01:23,600
that we can use in our application.

00:01:23,600 --> 00:01:26,780
And the way that it works is we have this internal service

00:01:26,780 --> 00:01:29,370
called Animate, which triggers these animations, which makes

00:01:29,370 --> 00:01:31,116
these animations happen, right?

00:01:31,116 --> 00:01:33,240
And then it's up to you to make your own animations

00:01:33,240 --> 00:01:34,460
to take control.

00:01:34,460 --> 00:01:36,610
So for example, in an Enter operation,

00:01:36,610 --> 00:01:39,690
which is like something ng-if or ng-repeat would trigger,

00:01:39,690 --> 00:01:41,660
we have a transition or a key frame.

00:01:41,660 --> 00:01:44,700
And then we have a starting class and a destination class.

00:01:44,700 --> 00:01:47,890
We can also use a JavaScript animation to handle it as well.

00:01:47,890 --> 00:01:49,530
The key thing with all of this is

00:01:49,530 --> 00:01:51,890
that we have a base class, such as my animation

00:01:51,890 --> 00:01:54,490
or whatever we call it, and all the animations

00:01:54,490 --> 00:01:56,680
work off of that.

00:01:56,680 --> 00:01:59,626
OK, so with 1.4 then, there's been some talk

00:01:59,626 --> 00:02:01,250
that a lot of work has been done to it.

00:02:01,250 --> 00:02:02,442
And it definitely has.

00:02:02,442 --> 00:02:04,400
But it's not like everything has changed again,

00:02:04,400 --> 00:02:05,560
everything is broken, no.

00:02:05,560 --> 00:02:07,830
We still have the same ecosystem of how it works.

00:02:07,830 --> 00:02:11,675
It's just the internal code is much better.

00:02:11,675 --> 00:02:13,050
And the reason why we did this is

00:02:13,050 --> 00:02:15,740
so we can extend it and add more features down the road

00:02:15,740 --> 00:02:18,920
and fix a ton of bugs.

00:02:18,920 --> 00:02:21,080
So what has been improved, then?

00:02:21,080 --> 00:02:24,500
Well, the biggest things are just the way that the code is.

00:02:24,500 --> 00:02:28,240
Like if you look at 1.3, it's like a 2,000-line JavaScript

00:02:28,240 --> 00:02:30,580
file with like a black box of everything.

00:02:30,580 --> 00:02:32,089
Everything's been broken up.

00:02:32,089 --> 00:02:33,630
And there's a handful of new features

00:02:33,630 --> 00:02:35,205
that have come as well.

00:02:35,205 --> 00:02:36,580
So let's talk about one of these.

00:02:36,580 --> 00:02:38,720
So one feature in particular is that we

00:02:38,720 --> 00:02:40,690
have improved callbacks.

00:02:40,690 --> 00:02:43,962
So with the old-school method, we had to hook into the element

00:02:43,962 --> 00:02:46,170
to detect if a callback happened-- so if an animation

00:02:46,170 --> 00:02:47,750
ended or started.

00:02:47,750 --> 00:02:50,717
Now we can have the $animate service do it directly.

00:02:50,717 --> 00:02:52,425
Now this might not be a huge improvement.

00:02:52,425 --> 00:02:55,360
It's like, OK, cool, we just changed a few names.

00:02:55,360 --> 00:02:58,540
But the benefits are that we can have a controller

00:02:58,540 --> 00:03:01,990
hook into animations to set states after the animation is

00:03:01,990 --> 00:03:02,960
complete.

00:03:02,960 --> 00:03:06,280
And since we are fully managing all the animations instead

00:03:06,280 --> 00:03:09,240
of $animate, we can improve the performance on the callbacks

00:03:09,240 --> 00:03:11,280
as well.

00:03:11,280 --> 00:03:14,150
So this is an example of a controller

00:03:14,150 --> 00:03:15,860
that's using an $animate callback

00:03:15,860 --> 00:03:18,290
to detect when things happen.

00:03:18,290 --> 00:03:19,470
But this is code.

00:03:19,470 --> 00:03:22,300
If you want to see an example, let's take a look at one.

00:03:22,300 --> 00:03:24,870
So if you remember from last year,

00:03:24,870 --> 00:03:27,120
me and Lucas presented together, and we

00:03:27,120 --> 00:03:31,070
made an ng2 website which had YouTube videos showing on here.

00:03:31,070 --> 00:03:33,760
Now, this website is using the YouTube API

00:03:33,760 --> 00:03:36,030
and animations to make it nice and sleek,

00:03:36,030 --> 00:03:37,720
but one thing that was a problem was

00:03:37,720 --> 00:03:40,710
that if I go to the Player page, the video loads

00:03:40,710 --> 00:03:42,242
as the animation is happening.

00:03:42,242 --> 00:03:43,950
But with these callbacks, I can determine

00:03:43,950 --> 00:03:46,970
when the callback is done, have a loading animation,

00:03:46,970 --> 00:03:49,770
and then show the video when it's done.

00:03:49,770 --> 00:03:54,290
So that's the first feature that we've added.

00:03:54,290 --> 00:03:57,790
OK, so this is a small fix, but it

00:03:57,790 --> 00:04:00,020
might lead to better things in 1.5, or down the road

00:04:00,020 --> 00:04:02,440
we might even be able to have a system where we can detect

00:04:02,440 --> 00:04:04,590
if all UI changes are done.

00:04:04,590 --> 00:04:06,873
This is a much-requested feature in Angular.

00:04:06,873 --> 00:04:09,370
To know, for example, how do I detect if all my repeat

00:04:09,370 --> 00:04:10,500
elements are done?

00:04:10,500 --> 00:04:12,420
Stuff like this.

00:04:12,420 --> 00:04:14,430
So it's not guaranteed, but it's an idea

00:04:14,430 --> 00:04:17,898
that we're trying to see where it goes.

00:04:17,898 --> 00:04:19,314
OK, so another really cool feature

00:04:19,314 --> 00:04:24,090
is this public service called $animateCss.

00:04:24,090 --> 00:04:27,940
What this does is we can take all the complexity

00:04:27,940 --> 00:04:29,970
that ngAnimate does internally and use it

00:04:29,970 --> 00:04:31,739
in our own JavaScript code.

00:04:31,739 --> 00:04:33,280
So instead of having to use something

00:04:33,280 --> 00:04:36,900
like jQuery or GreenSock, we can just make animations

00:04:36,900 --> 00:04:39,700
like this, where we have a mixture of adding

00:04:39,700 --> 00:04:41,670
classes, removing classes, setting

00:04:41,670 --> 00:04:45,590
all kinds of properties, including styling and even

00:04:45,590 --> 00:04:48,480
hard-coded durations, and then we can just start an animation,

00:04:48,480 --> 00:04:52,220
and it figures all of it out and it returns a promise so that we

00:04:52,220 --> 00:04:54,250
can have animations like this and do

00:04:54,250 --> 00:04:56,600
some really complex things.

00:04:56,600 --> 00:05:00,868
[APPLAUSE]

00:05:00,868 --> 00:05:03,310


00:05:03,310 --> 00:05:06,770
So here's a great example, and thank you for the applause.

00:05:06,770 --> 00:05:09,770
Here's a great example where we have a JavaScript animation

00:05:09,770 --> 00:05:13,110
and we want to add in extra styling within the animation,

00:05:13,110 --> 00:05:15,030
but we don't want to use jQuery.

00:05:15,030 --> 00:05:16,726
We still want to have this master CSS

00:05:16,726 --> 00:05:18,600
file, which dictates a lot of our animations,

00:05:18,600 --> 00:05:20,790
but we can just do this.

00:05:20,790 --> 00:05:23,410
But once again, we want to see a good demo.

00:05:23,410 --> 00:05:24,990
So let's see here.

00:05:24,990 --> 00:05:28,425
Here, for example, we have a collapsing and expanding div

00:05:28,425 --> 00:05:29,430
element.

00:05:29,430 --> 00:05:31,910
Now, everyone can argue that this is actually kind of hard

00:05:31,910 --> 00:05:35,880
to do with CSS alone, because we can't calculate the height

00:05:35,880 --> 00:05:37,636
of the element just like that.

00:05:37,636 --> 00:05:39,010
However, what we can do is we can

00:05:39,010 --> 00:05:42,300
make a JavaScript animation that feeds in that height details

00:05:42,300 --> 00:05:46,630
to the animation code and then just use CSS to animate it.

00:05:46,630 --> 00:05:48,710
Another really cool thing is that we

00:05:48,710 --> 00:05:52,790
can mix in ngClass with another animation,

00:05:52,790 --> 00:05:54,690
and then merge the animations together

00:05:54,690 --> 00:05:56,670
with that $animateCss service.

00:05:56,670 --> 00:05:58,840
So for example, we're adding a class red,

00:05:58,840 --> 00:06:01,930
and we're doing that height animation.

00:06:01,930 --> 00:06:06,889
So the code for that simply is just getting used

00:06:06,889 --> 00:06:09,430
to the $animateCss service, and then calling the .done method

00:06:09,430 --> 00:06:11,885
once it's ready.

00:06:11,885 --> 00:06:12,385
Cool.

00:06:12,385 --> 00:06:15,580


00:06:15,580 --> 00:06:20,000
OK, so anchoring-- this is a really cool feature.

00:06:20,000 --> 00:06:22,970
Back in ngEurope, I talked about something called ngAnimateKeep

00:06:22,970 --> 00:06:25,370
and in line with something called Timelines.

00:06:25,370 --> 00:06:28,590
But this feature is a lot more important to have

00:06:28,590 --> 00:06:31,340
in such a big system as a timeline system.

00:06:31,340 --> 00:06:33,665
The idea is that if I have one view

00:06:33,665 --> 00:06:35,490
and another view, how can I translate

00:06:35,490 --> 00:06:38,700
one element to the other element without having

00:06:38,700 --> 00:06:40,690
to have hundreds of lines of JavaScript code

00:06:40,690 --> 00:06:42,960
to make it work?

00:06:42,960 --> 00:06:47,990
So if I were to have something like this, two ng-ifs,

00:06:47,990 --> 00:06:50,860
one ng-if hides when the other one becomes active.

00:06:50,860 --> 00:06:54,220
How can I make it so that the item that you clicked on

00:06:54,220 --> 00:06:57,140
is somehow translated to the new item?

00:06:57,140 --> 00:07:01,030
Well, what we can do is we can add these reference points

00:07:01,030 --> 00:07:04,650
in between the destination and the starting points

00:07:04,650 --> 00:07:07,620
and have a shared CSS class.

00:07:07,620 --> 00:07:12,670
And then we just add an extra CSS style at the bottom

00:07:12,670 --> 00:07:15,390
called an anchor transition.

00:07:15,390 --> 00:07:18,650
Now let's see a demo of this.

00:07:18,650 --> 00:07:20,010
OK, so we have a list of users.

00:07:20,010 --> 00:07:21,510
We have two ng-repeats, right?

00:07:21,510 --> 00:07:22,380
I click on one.

00:07:22,380 --> 00:07:25,030
It shows up in another one, right?

00:07:25,030 --> 00:07:27,330
So what's the problem with this?

00:07:27,330 --> 00:07:30,620
Well, the problem is that the animations are very subtle.

00:07:30,620 --> 00:07:33,830
And the value at the top, I don't

00:07:33,830 --> 00:07:37,649
know if it's going up here, like I have to actually pay

00:07:37,649 --> 00:07:38,940
attention to see where it goes.

00:07:38,940 --> 00:07:40,880
But with this anchoring capability,

00:07:40,880 --> 00:07:43,100
we can just do stuff like this, and ngAnimate

00:07:43,100 --> 00:07:44,910
does everything for you.

00:07:44,910 --> 00:07:49,383
[APPLAUSE]

00:07:49,383 --> 00:07:50,880


00:07:50,880 --> 00:07:54,430
And then all that was required was that simple CSS class just

00:07:54,430 --> 00:07:56,310
dictating that we have a transition, which

00:07:56,310 --> 00:07:57,824
makes it happen.

00:07:57,824 --> 00:07:59,990
Another really cool thing is notice how this is blue

00:07:59,990 --> 00:08:01,880
and this is not blue.

00:08:01,880 --> 00:08:03,900
So what ngAnimate will do is it will

00:08:03,900 --> 00:08:06,340
find the difference between all the CSS classes

00:08:06,340 --> 00:08:08,350
and then translate the differences for you.

00:08:08,350 --> 00:08:11,410
So you don't have to set widths and heights and borders

00:08:11,410 --> 00:08:13,510
and remove them, as this happens.

00:08:13,510 --> 00:08:17,910
ngAnimate just works basically off simple classes.

00:08:17,910 --> 00:08:22,770
OK, so another example-- here we have

00:08:22,770 --> 00:08:26,180
a list of presenters who have been presenting here.

00:08:26,180 --> 00:08:29,100
And this is a simple directory website, right?

00:08:29,100 --> 00:08:31,020
We have the index page.

00:08:31,020 --> 00:08:35,830
And then we have the profile page.

00:08:35,830 --> 00:08:38,669
You can imagine that the profile page is just

00:08:38,669 --> 00:08:41,669
going to show a bigger image of the user.

00:08:41,669 --> 00:08:44,977
Well, if we wanted to have this small thumbnail translate

00:08:44,977 --> 00:08:46,810
to the bigger thumbnail on the profile page,

00:08:46,810 --> 00:08:48,950
we can use that same anchoring technique.

00:08:48,950 --> 00:08:51,610
So if I were to click on Lucas' pretty face,

00:08:51,610 --> 00:08:53,780
you can see that it animates to the spot

00:08:53,780 --> 00:08:57,050
where it's going to be on the next page automatically.

00:08:57,050 --> 00:08:59,830
And then if I go back, it brings all of the other ones

00:08:59,830 --> 00:09:02,520
right to where they're going to go, just by using those hooks.

00:09:02,520 --> 00:09:07,020
[APPLAUSE]

00:09:07,020 --> 00:09:09,020


00:09:09,020 --> 00:09:12,610
And then even if I go to the same page, and I click on Brad,

00:09:12,610 --> 00:09:16,330
and then I click on myself, it knows exactly where to put it.

00:09:16,330 --> 00:09:18,942
And you can mix in any combination of CSS styles,

00:09:18,942 --> 00:09:20,150
because it's all class-based.

00:09:20,150 --> 00:09:22,880


00:09:22,880 --> 00:09:28,550
OK, so future features-- with 1.5 and 2.0,

00:09:28,550 --> 00:09:31,600
now with this foundation, this whole refactor thing,

00:09:31,600 --> 00:09:34,070
we can add a lot more features.

00:09:34,070 --> 00:09:40,210
And there's a few features that are kind of in ngAnimate right

00:09:40,210 --> 00:09:43,060
now, but the API is still kind of being figured out.

00:09:43,060 --> 00:09:47,200
So let's talk about a couple of these.

00:09:47,200 --> 00:09:49,170
So we have a player animation.

00:09:49,170 --> 00:09:51,040
And whenever you start animation,

00:09:51,040 --> 00:09:53,486
you get this big object of data, like you

00:09:53,486 --> 00:09:54,860
have an event method, which tells

00:09:54,860 --> 00:09:55,984
when the animation is done.

00:09:55,984 --> 00:09:58,180
But you can also pause and resume it.

00:09:58,180 --> 00:10:01,140
And this API isn't public yet, but in the future,

00:10:01,140 --> 00:10:03,660
we'll be able to pause animation directly in the UI.

00:10:03,660 --> 00:10:05,280
So if you have like an escape button,

00:10:05,280 --> 00:10:07,560
you can pause all the animations on the page

00:10:07,560 --> 00:10:10,660
and then do something and then continue them.

00:10:10,660 --> 00:10:12,720
Another example is with custom drivers.

00:10:12,720 --> 00:10:16,220
If, for example, you wanted to have a mobile-specific driver

00:10:16,220 --> 00:10:18,991
or a web-animations driver take over everything on the page,

00:10:18,991 --> 00:10:20,990
you can definitely do that with a custom driver.

00:10:20,990 --> 00:10:24,005
Once again, this will come later on once the API has

00:10:24,005 --> 00:10:26,110
been figured out.

00:10:26,110 --> 00:10:27,830
What about 2.0?

00:10:27,830 --> 00:10:30,390
Well, 1.5 and 2.0 are going to have the same code base.

00:10:30,390 --> 00:10:33,410
So instead of having the 1.4 code and then

00:10:33,410 --> 00:10:35,480
the 1.5 code and the 2.0 code, it's all

00:10:35,480 --> 00:10:37,062
going to be the same code, and it's

00:10:37,062 --> 00:10:38,270
going to [INAUDIBLE] it down.

00:10:38,270 --> 00:10:40,740
Just like with Brian's router, this

00:10:40,740 --> 00:10:42,810
will make it so that the same bugs can

00:10:42,810 --> 00:10:46,230
be fixed with both frameworks.

00:10:46,230 --> 00:10:48,770
And new features can be added to both frameworks as well.

00:10:48,770 --> 00:10:50,228
So we're not going to be abandoning

00:10:50,228 --> 00:10:53,060
old versions of Angular.

00:10:53,060 --> 00:10:53,770
What about 2.0?

00:10:53,770 --> 00:10:56,520
Well, there isn't anything really to show right now.

00:10:56,520 --> 00:10:58,340
But me and Misko have been working on this.

00:10:58,340 --> 00:11:00,710
The idea is that we will be able to have

00:11:00,710 --> 00:11:04,300
low-level hooks into devices that have more performant

00:11:04,300 --> 00:11:05,430
animations.

00:11:05,430 --> 00:11:08,642
So if you think of iOS, iOS's transition styles,

00:11:08,642 --> 00:11:11,100
you'll be able to hook into the low level instead of having

00:11:11,100 --> 00:11:12,530
to use everything with CSS.

00:11:12,530 --> 00:11:14,410
But it will be in a very automatic way

00:11:14,410 --> 00:11:17,530
that ngAnimate provides.

00:11:17,530 --> 00:11:18,880
OK, so ngTimeline.

00:11:18,880 --> 00:11:21,640
This feature I did announce at ngEurope.

00:11:21,640 --> 00:11:23,510
However, it's still being developed.

00:11:23,510 --> 00:11:27,130
And I called it ngAnimateLayout, but working on it more,

00:11:27,130 --> 00:11:30,030
we abstracted it to be called ngTimeline.

00:11:30,030 --> 00:11:31,280
And this is definitely coming.

00:11:31,280 --> 00:11:33,280
It's going to take a little bit more time to do,

00:11:33,280 --> 00:11:36,931
because it's coming out for 2.0 and 1.5 and 1.4 later on.

00:11:36,931 --> 00:11:39,180
And these are the three people I've been working with.

00:11:39,180 --> 00:11:40,900
Me and Misko have been designing the 2.0 stuff.

00:11:40,900 --> 00:11:42,950
And a special thanks to Thomas, because he has

00:11:42,950 --> 00:11:45,300
brilliant ideas for this API.

00:11:45,300 --> 00:11:49,220
It's been a pleasure putting this together with him.

00:11:49,220 --> 00:11:51,890
So ngTimeline by itself-- the idea

00:11:51,890 --> 00:11:55,080
is that we will be able to have a series of events sequenced

00:11:55,080 --> 00:11:56,020
by order.

00:11:56,020 --> 00:11:58,800
So we say this event happens, then this one, then this one.

00:11:58,800 --> 00:12:01,509
And it doesn't necessarily have to be an animation.

00:12:01,509 --> 00:12:02,550
You think about a wizard.

00:12:02,550 --> 00:12:04,390
Or you think about infinite scrolling.

00:12:04,390 --> 00:12:06,712
If we could tie that into Angular's core,

00:12:06,712 --> 00:12:09,170
we could actually have a lot more event-based things happen

00:12:09,170 --> 00:12:10,610
in a much more convenient way.

00:12:10,610 --> 00:12:13,410


00:12:13,410 --> 00:12:16,600
But when you mix ngAnimate into the Timeline stuff,

00:12:16,600 --> 00:12:19,970
that will allow us to have really complex animations mixed

00:12:19,970 --> 00:12:23,820
with really complex data and have the ability

00:12:23,820 --> 00:12:27,310
to reverse animations, to pause, to run multiple animations

00:12:27,310 --> 00:12:29,800
in parallel, all kinds of cool things.

00:12:29,800 --> 00:12:34,090
Here is a short list of some of the ideas that we have in mind.

00:12:34,090 --> 00:12:35,960
However, yet again, I can't convince you

00:12:35,960 --> 00:12:37,477
without showing you a demo.

00:12:37,477 --> 00:12:39,060
And this is highly experimental, and I

00:12:39,060 --> 00:12:41,940
apologize for not having a full Timeline to show you

00:12:41,940 --> 00:12:43,436
with ng-conf.

00:12:43,436 --> 00:12:43,935
Trust me.

00:12:43,935 --> 00:12:45,500
It's coming this year.

00:12:45,500 --> 00:12:48,110
So let's take a look.

00:12:48,110 --> 00:12:54,320
I'm going to go to that Timeline code and load this.

00:12:54,320 --> 00:12:57,802
So if I look in the source, here we

00:12:57,802 --> 00:13:03,320
have a repeater, which is an ng-if of a repeater, which is

00:13:03,320 --> 00:13:05,380
just showing a bunch of items.

00:13:05,380 --> 00:13:08,084
Then we have this long ngTimeline code.

00:13:08,084 --> 00:13:09,750
I'm not going to dive too much into this

00:13:09,750 --> 00:13:11,430
because the API might change.

00:13:11,430 --> 00:13:14,780
But the idea here is we have one step and another step

00:13:14,780 --> 00:13:16,580
and another step.

00:13:16,580 --> 00:13:18,460
And then we go down further, and we actually

00:13:18,460 --> 00:13:22,519
have parallel steps where we're setting a custom position.

00:13:22,519 --> 00:13:24,560
So that allows us to do something like this very,

00:13:24,560 --> 00:13:27,960
very easily without using something complex like jQuery

00:13:27,960 --> 00:13:31,350
or GreenSock to manage the animations for us.

00:13:31,350 --> 00:13:33,710
And this is all random data mixed together

00:13:33,710 --> 00:13:36,294
with this Timeline code and these various steps

00:13:36,294 --> 00:13:37,460
that make everything happen.

00:13:37,460 --> 00:13:46,920


00:13:46,920 --> 00:13:48,420
And there you have it.

00:13:48,420 --> 00:13:50,050
This will come later this year.

00:13:50,050 --> 00:13:53,928
[APPLAUSE]

00:13:53,928 --> 00:13:57,250


00:13:57,250 --> 00:13:58,810
But that is it for now.

00:13:58,810 --> 00:14:00,830
Here are my contact details.

00:14:00,830 --> 00:14:03,500
And I will be in the hallway for anyone who has questions.

00:14:03,500 --> 00:14:05,360
And if you have beer to give me, I'll

00:14:05,360 --> 00:14:07,130
be happy to have a beer with you to talk

00:14:07,130 --> 00:14:08,640
about things with ngAnimate.

00:14:08,640 --> 00:14:10,280
But thank you, everybody.

00:14:10,280 --> 00:14:12,680
Ng-conf is great, and thanks a lot for coming.

00:14:12,680 --> 00:14:16,630
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=R0OrxxJNcjU


