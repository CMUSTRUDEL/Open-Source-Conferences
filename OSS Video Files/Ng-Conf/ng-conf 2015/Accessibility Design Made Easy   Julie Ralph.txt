Title: Accessibility Design Made Easy   Julie Ralph
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,550


00:00:00,550 --> 00:00:06,560
So I learned that I was going after ng-what, and I said ugh.

00:00:06,560 --> 00:00:09,039
So I made this picture of a sunset for everyone to--

00:00:09,039 --> 00:00:09,789
[BREATHES DEEPLY].

00:00:09,789 --> 00:00:12,284
[LAUGHTER]

00:00:12,284 --> 00:00:13,780


00:00:13,780 --> 00:00:14,280
Cool.

00:00:14,280 --> 00:00:14,960
All right.

00:00:14,960 --> 00:00:17,710
So my name is Julie Ralph.

00:00:17,710 --> 00:00:19,650
I am a dev at Google.

00:00:19,650 --> 00:00:22,620
I work up in the Seattle office, and I work with the Angular

00:00:22,620 --> 00:00:26,350
team on making testing better and making engineering

00:00:26,350 --> 00:00:27,780
productivity better.

00:00:27,780 --> 00:00:29,900
I'm the primary lead of Protractor,

00:00:29,900 --> 00:00:33,360
which I spoke about when I was here a year ago.

00:00:33,360 --> 00:00:34,850
And today, I'm going to be talking

00:00:34,850 --> 00:00:36,990
about what we've been doing with getting

00:00:36,990 --> 00:00:40,660
additional output from end-to-end tests using plugins,

00:00:40,660 --> 00:00:43,960
and specifically talking about making accessibility testing

00:00:43,960 --> 00:00:45,120
easy using plugins.

00:00:45,120 --> 00:00:47,850


00:00:47,850 --> 00:00:50,060
So what's accessibility?

00:00:50,060 --> 00:00:52,190
We touched on this a little bit this morning.

00:00:52,190 --> 00:00:55,440
I was really happy to hear the prototyping team

00:00:55,440 --> 00:00:58,490
touch on what accessibility is.

00:00:58,490 --> 00:01:00,820
But a quick working definition is making sure

00:01:00,820 --> 00:01:06,032
that your website is usable for all users of various abilities.

00:01:06,032 --> 00:01:07,490
And this could mean people who need

00:01:07,490 --> 00:01:11,820
to use screen readers or people who are blind,

00:01:11,820 --> 00:01:17,140
people who can't use a mouse, and making accessibility better

00:01:17,140 --> 00:01:18,870
for those users also helps for users

00:01:18,870 --> 00:01:22,290
who are in a car on their phone and can't really

00:01:22,290 --> 00:01:25,230
be touching it or looking at it.

00:01:25,230 --> 00:01:27,080
So the question that we wanted to solve

00:01:27,080 --> 00:01:29,960
is how do you test for accessibility,

00:01:29,960 --> 00:01:32,400
and what does that mean?

00:01:32,400 --> 00:01:35,010
And the average dev might not know a whole ton

00:01:35,010 --> 00:01:37,720
about what the red flags for accessibility are

00:01:37,720 --> 00:01:39,840
or how to fix everything.

00:01:39,840 --> 00:01:41,290
Fortunately, there are some tools

00:01:41,290 --> 00:01:44,940
that are available that help you do accessibility audits.

00:01:44,940 --> 00:01:48,150
And we've leveraged those, in addition with Protractor's

00:01:48,150 --> 00:01:52,350
plugin framework, to be able to run those audits automatically

00:01:52,350 --> 00:01:54,190
so that you get information whenever

00:01:54,190 --> 00:01:57,300
your application changes, and you can make sure that once

00:01:57,300 --> 00:02:00,690
your application is set up and has good accessibility,

00:02:00,690 --> 00:02:03,320
that that doesn't relapse later.

00:02:03,320 --> 00:02:07,230
So let's dive into this in a little bit more detail.

00:02:07,230 --> 00:02:08,770
Overview of how Protractor works.

00:02:08,770 --> 00:02:11,100
Protractor is an end-to-end test framework

00:02:11,100 --> 00:02:14,590
that's made specifically for Angular applications.

00:02:14,590 --> 00:02:17,930
And what I mean by an end-to-end test framework in this context

00:02:17,930 --> 00:02:20,900
is that it's run against a real browser that's

00:02:20,900 --> 00:02:23,680
rendering a real version of your application.

00:02:23,680 --> 00:02:26,120
This is done with the WebDriver API.

00:02:26,120 --> 00:02:29,630
And the input to Protractor is a test script,

00:02:29,630 --> 00:02:33,260
which is written in a syntax much like a unit test, which

00:02:33,260 --> 00:02:38,380
tells the browser what actions it should emulate natively,

00:02:38,380 --> 00:02:40,290
like user would, and then how to get data

00:02:40,290 --> 00:02:42,590
back from what's rendered on the page

00:02:42,590 --> 00:02:44,840
and make assertions about that.

00:02:44,840 --> 00:02:46,830
And traditionally, the output from the test,

00:02:46,830 --> 00:02:49,360
then, is just what happens, whether those assertions passed

00:02:49,360 --> 00:02:51,210
or failed.

00:02:51,210 --> 00:02:54,240
But you can get a lot more information and a lot more

00:02:54,240 --> 00:02:56,560
results from having a script that's

00:02:56,560 --> 00:02:59,460
how a user would interact with your page.

00:02:59,460 --> 00:03:02,710
And so we've been working on the plugin API for Protractor

00:03:02,710 --> 00:03:05,140
to enable that.

00:03:05,140 --> 00:03:08,800
This is a quick example of what a test script actually

00:03:08,800 --> 00:03:09,350
looks like.

00:03:09,350 --> 00:03:12,950
So I've taken this from the Angular documentation examples.

00:03:12,950 --> 00:03:15,120
This is a test for this little checkbox

00:03:15,120 --> 00:03:17,910
that you see at the bottom, and it's

00:03:17,910 --> 00:03:19,772
written using the Jasmine test syntax, which

00:03:19,772 --> 00:03:21,230
should be familiar to you if you're

00:03:21,230 --> 00:03:23,900
writing unit tests, which you should be doing.

00:03:23,900 --> 00:03:27,832
And it shows grabbing, locating a page,

00:03:27,832 --> 00:03:30,040
interacting with an element, grabbing the value back,

00:03:30,040 --> 00:03:32,770
and then the last line here is an expectation

00:03:32,770 --> 00:03:37,860
that asserts that the element is doing what we think it should.

00:03:37,860 --> 00:03:39,250
And then the other input that you

00:03:39,250 --> 00:03:42,060
give Protractor is a configuration file, which is

00:03:42,060 --> 00:03:43,310
separate from the test script.

00:03:43,310 --> 00:03:46,110
And it tells Protractor in what environment

00:03:46,110 --> 00:03:47,780
it should be running the test script.

00:03:47,780 --> 00:03:50,660
So this is things like what browser you're using

00:03:50,660 --> 00:03:52,800
and how that browser is set up, what test framework

00:03:52,800 --> 00:03:54,341
you want to be using, where your test

00:03:54,341 --> 00:03:57,860
files are, and a lot of options that I haven't shown here.

00:03:57,860 --> 00:04:01,800
If you want to enable a plugin, this is where you'll do it.

00:04:01,800 --> 00:04:04,540
And this is so that plugins can be easily turned on and off

00:04:04,540 --> 00:04:06,860
or used for a different set of tests scripts.

00:04:06,860 --> 00:04:08,710
They're not embedded in the script itself.

00:04:08,710 --> 00:04:11,320
They're just in the configuration file.

00:04:11,320 --> 00:04:13,260
You can have multiple plugins running at once.

00:04:13,260 --> 00:04:17,480
So this object is an array, and then every item in the array

00:04:17,480 --> 00:04:20,180
is going to contain the path to where the code for the plugin

00:04:20,180 --> 00:04:23,295
actually lives, and any other configuration objects

00:04:23,295 --> 00:04:26,740
that that plugin will need.

00:04:26,740 --> 00:04:28,300
This is all available now.

00:04:28,300 --> 00:04:30,630
And if you want to start writing plugins yourself,

00:04:30,630 --> 00:04:33,080
please go ahead and give it a shot.

00:04:33,080 --> 00:04:35,660
It's definitely in development, so we would love feedback

00:04:35,660 --> 00:04:38,620
on what types of features you need for your plugins

00:04:38,620 --> 00:04:42,360
and what you think would be good generic features that plugins

00:04:42,360 --> 00:04:44,320
could use against all tests.

00:04:44,320 --> 00:04:47,200
Documentation is linked here, and the basic hooks

00:04:47,200 --> 00:04:51,610
that we have for a plugin now are running on your test setup,

00:04:51,610 --> 00:04:54,120
on tear down after all the tests have finished,

00:04:54,120 --> 00:04:56,590
and then after each test case, which

00:04:56,590 --> 00:05:00,100
is like an "it" block in Jasmine when I say test case.

00:05:00,100 --> 00:05:02,800
And then, plugins can modify the results

00:05:02,800 --> 00:05:05,040
based on what they return.

00:05:05,040 --> 00:05:07,930
So even if you had a test that had a bunch of assertions that

00:05:07,930 --> 00:05:10,870
were passing, if your plugin thinks that something is wrong

00:05:10,870 --> 00:05:13,830
and should be failing, you can modify the test output,

00:05:13,830 --> 00:05:17,150
cause, and exit code of one, fail the continuous integration

00:05:17,150 --> 00:05:19,470
build, et cetera.

00:05:19,470 --> 00:05:22,720
As an example, we are working on a plugin that

00:05:22,720 --> 00:05:26,286
integrates the ng-hint module to automatically give you

00:05:26,286 --> 00:05:27,660
feedback when we think that there

00:05:27,660 --> 00:05:33,131
might be not best practices happening on your page.

00:05:33,131 --> 00:05:33,630
OK, great.

00:05:33,630 --> 00:05:37,240
So what does all this have to do with accessibility?

00:05:37,240 --> 00:05:40,200
We think that end-to-end testing is a perfect place

00:05:40,200 --> 00:05:42,690
to try out accessibility, because you've

00:05:42,690 --> 00:05:45,180
got this real browser, which is rendering a real version

00:05:45,180 --> 00:05:46,090
of your application.

00:05:46,090 --> 00:05:48,920
So we know what it'll actually look like to a user,

00:05:48,920 --> 00:05:51,700
and we know some sort of script, based

00:05:51,700 --> 00:05:55,150
on your test script, of how a user will go through the site

00:05:55,150 --> 00:05:57,490
and interact with it.

00:05:57,490 --> 00:06:01,220
I want to give a big shout out to Marcy Sutton, who did most

00:06:01,220 --> 00:06:03,460
of the work for this plugin.

00:06:03,460 --> 00:06:05,890
She's a dev and the accessibility guru

00:06:05,890 --> 00:06:08,740
with the Angular Material Design project.

00:06:08,740 --> 00:06:10,360
And she's unable to be here today,

00:06:10,360 --> 00:06:13,850
because she's speaking at the CSUN Accessibility Conference

00:06:13,850 --> 00:06:15,060
right now.

00:06:15,060 --> 00:06:19,040
But I'll link to that once the recording of that is up.

00:06:19,040 --> 00:06:21,700
And this is a recording of her talk from ng-europe, where

00:06:21,700 --> 00:06:24,070
she talks about accessibility in general

00:06:24,070 --> 00:06:26,780
and the ngAria module in particular.

00:06:26,780 --> 00:06:29,410
So big thanks to Marcy.

00:06:29,410 --> 00:06:32,270
And this is what you can do to enable accessibility.

00:06:32,270 --> 00:06:35,950
So this is shipping, with the latest version of Protractor.

00:06:35,950 --> 00:06:38,650
We will have a couple of plugins that ship natively

00:06:38,650 --> 00:06:43,820
and then allow anyone else to ship them as node modules.

00:06:43,820 --> 00:06:46,670
And there is a couple of different ways

00:06:46,670 --> 00:06:49,990
that we've enabled doing accessibility audits

00:06:49,990 --> 00:06:52,590
with the plugin, but I'm going to focus

00:06:52,590 --> 00:06:57,080
on the Chrome accessibility dev tools plugin today.

00:06:57,080 --> 00:06:58,680
If you haven't tried this out, you

00:06:58,680 --> 00:07:00,970
can do it from any Chrome browser.

00:07:00,970 --> 00:07:03,930
Just open up the dev tools, go into the Audits tab,

00:07:03,930 --> 00:07:05,940
and click Accessibility.

00:07:05,940 --> 00:07:07,440
And here, I've shown what this looks

00:07:07,440 --> 00:07:10,070
like against the AngularJS home page.

00:07:10,070 --> 00:07:13,090
So we run it, and we get a bunch of information

00:07:13,090 --> 00:07:16,010
about errors that might be severe errors

00:07:16,010 --> 00:07:18,100
or warnings on the page, that look

00:07:18,100 --> 00:07:19,780
like accessibility red flags.

00:07:19,780 --> 00:07:22,580


00:07:22,580 --> 00:07:25,250
This is the configuration, again, enabling it.

00:07:25,250 --> 00:07:28,700
And we've added the option here to treat warnings--

00:07:28,700 --> 00:07:31,330
to not treat those warnings as failures,

00:07:31,330 --> 00:07:34,846
just to notify about them.

00:07:34,846 --> 00:07:36,470
So this is the output that you actually

00:07:36,470 --> 00:07:39,660
get from running the plugin, and I've run it against the Angular

00:07:39,660 --> 00:07:41,740
Docs site for an example.

00:07:41,740 --> 00:07:43,280
So up at the top, you see those dots

00:07:43,280 --> 00:07:46,186
are the assertions from the base test script all passing.

00:07:46,186 --> 00:07:47,560
And then the plugin gets a chance

00:07:47,560 --> 00:07:49,980
to come in and modify the results and output

00:07:49,980 --> 00:07:51,830
additional information.

00:07:51,830 --> 00:07:54,490
So stuff looks OK, but we get a failure

00:07:54,490 --> 00:07:58,770
on this "control in media elements should have labels."

00:07:58,770 --> 00:08:02,440
And I've trimmed the output so that it'll fit on one page.

00:08:02,440 --> 00:08:05,030
But the real output, then, contains a link

00:08:05,030 --> 00:08:08,590
to a site describing exactly what's going on here,

00:08:08,590 --> 00:08:10,890
why this is a problem for accessibility,

00:08:10,890 --> 00:08:14,010
and what you can do about it, some potential fixes.

00:08:14,010 --> 00:08:16,500
The problem here is that this select doesn't have

00:08:16,500 --> 00:08:18,190
a label associated with it.

00:08:18,190 --> 00:08:20,720
So assistive technology, like a screen reader,

00:08:20,720 --> 00:08:23,027
wouldn't know what to do with it.

00:08:23,027 --> 00:08:24,860
And then there's also a couple of warnings--

00:08:24,860 --> 00:08:27,000
image doesn't have a text attribute,

00:08:27,000 --> 00:08:29,910
and there's some contrast ratios that are off.

00:08:29,910 --> 00:08:32,289
We also ran against the Angular Material Design

00:08:32,289 --> 00:08:35,200
site, which almost gets a perfectly clean bill of health,

00:08:35,200 --> 00:08:40,100
except for a couple of errors with that contrast ratio.

00:08:40,100 --> 00:08:41,960
So as I mentioned, a beta version of this

00:08:41,960 --> 00:08:44,470
is now available in the latest version of Protractor.

00:08:44,470 --> 00:08:45,470
Please check it out.

00:08:45,470 --> 00:08:46,830
Give us feedback.

00:08:46,830 --> 00:08:48,280
And we have some improvements that

00:08:48,280 --> 00:08:51,720
are underway that we're working towards for the next version.

00:08:51,720 --> 00:08:54,150
So first, at the moment, this only

00:08:54,150 --> 00:08:56,760
runs at the very end of your entire test run

00:08:56,760 --> 00:08:59,340
on the tear down hook.

00:08:59,340 --> 00:09:02,760
And this won't catch a whole lot of coverage of your site

00:09:02,760 --> 00:09:05,175
if you have multiple subpages or dialogues

00:09:05,175 --> 00:09:08,710
that you might open in various parts of your test script.

00:09:08,710 --> 00:09:10,650
So we want to modify the plugin so that it'll

00:09:10,650 --> 00:09:12,780
run at every point and then merge

00:09:12,780 --> 00:09:14,280
the results into something that's

00:09:14,280 --> 00:09:16,507
comprehensive and easy to read.

00:09:16,507 --> 00:09:18,090
And the other thing that we want to do

00:09:18,090 --> 00:09:20,490
is make this specific to Angular applications,

00:09:20,490 --> 00:09:24,620
since Protractor is specifically for Angular apps.

00:09:24,620 --> 00:09:28,170
So, for example, here, we've got one of these LIs

00:09:28,170 --> 00:09:33,460
with an ng-click on it, as was not recommended.

00:09:33,460 --> 00:09:37,120
And this is a problem because this isn't a focusable element.

00:09:37,120 --> 00:09:41,320
So you couldn't navigate to it using a keyboard.

00:09:41,320 --> 00:09:43,722
And a normal accessibility audit wouldn't pick up

00:09:43,722 --> 00:09:45,430
that this is an issue, because it doesn't

00:09:45,430 --> 00:09:48,840
have an on-click handler, which the generic plugin is used to.

00:09:48,840 --> 00:09:50,520
It has this ng-click handler.

00:09:50,520 --> 00:09:52,470
So we want to be able to catch of these cases

00:09:52,470 --> 00:09:56,685
by writing specific checks for Angular tests as well.

00:09:56,685 --> 00:09:57,810
That's all the time I have.

00:09:57,810 --> 00:09:59,080
Thank you very much.

00:09:59,080 --> 00:10:02,430
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=_2Pt6Xx94Bc


