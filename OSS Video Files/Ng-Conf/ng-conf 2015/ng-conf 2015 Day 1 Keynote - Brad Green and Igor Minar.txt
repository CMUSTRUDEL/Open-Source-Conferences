Title: ng-conf 2015 Day 1 Keynote - Brad Green and Igor Minar
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,730


00:00:00,730 --> 00:00:01,855
BRAD GREEN: I'm Brad Green.

00:00:01,855 --> 00:00:03,846
IGOR MINAR: Hello, I'm Igor.

00:00:03,846 --> 00:00:06,762
[APPLAUSE]

00:00:06,762 --> 00:00:10,374


00:00:10,374 --> 00:00:12,790
BRAD GREEN: If you've been following our team for a while,

00:00:12,790 --> 00:00:15,444
you know we're a group that's driven by our principles.

00:00:15,444 --> 00:00:17,360
So this morning, we're going to talk about one

00:00:17,360 --> 00:00:20,340
of our core principles, which is being,

00:00:20,340 --> 00:00:23,780
hopefully, good caretakers of the Angular community

00:00:23,780 --> 00:00:25,475
and the Angular code base.

00:00:25,475 --> 00:00:26,850
But practically, what we're going

00:00:26,850 --> 00:00:32,760
to talk about is why we're here, where Angular 1 is going,

00:00:32,760 --> 00:00:34,635
and where we see Angular going in the future.

00:00:34,635 --> 00:00:36,095
I hope you like it.

00:00:36,095 --> 00:00:37,650
IGOR MINAR: But before we start, we

00:00:37,650 --> 00:00:40,700
should give our thanks to the ng-conf organizers.

00:00:40,700 --> 00:00:44,615
I bet that many of you don't know that-- yeah.

00:00:44,615 --> 00:00:48,080
[APPLAUSE]

00:00:48,080 --> 00:00:50,482


00:00:50,482 --> 00:00:52,690
I bet that many of you don't know that ng-conf is not

00:00:52,690 --> 00:00:55,520
organized by somebody at Angular, the Angular team

00:00:55,520 --> 00:00:56,270
or at Google.

00:00:56,270 --> 00:00:58,290
It is completely community-driven.

00:00:58,290 --> 00:01:00,615


00:01:00,615 --> 00:01:02,490
BRAD GREEN: So we have already given welcome.

00:01:02,490 --> 00:01:05,199
So we can go to maybe thanking the people who are with us

00:01:05,199 --> 00:01:05,990
on the live stream.

00:01:05,990 --> 00:01:07,590
We've already thanked them a little bit.

00:01:07,590 --> 00:01:09,964
But maybe one more little round of applause for everybody

00:01:09,964 --> 00:01:11,098
who's tuned in from home.

00:01:11,098 --> 00:01:11,598
[APPLAUSE]

00:01:11,598 --> 00:01:12,590
IGOR MINAR: Hey, guys.

00:01:12,590 --> 00:01:18,550


00:01:18,550 --> 00:01:21,380
It was midnight last Sunday.

00:01:21,380 --> 00:01:22,880
We were working on this presentation

00:01:22,880 --> 00:01:24,590
together with Brad.

00:01:24,590 --> 00:01:30,330
And we asked ourselves a simple question, why are we here?

00:01:30,330 --> 00:01:31,170
We thought about it.

00:01:31,170 --> 00:01:32,060
It's very simple.

00:01:32,060 --> 00:01:32,750
Why are we here?

00:01:32,750 --> 00:01:35,070
Why are we doing Angular?

00:01:35,070 --> 00:01:36,700
And then we realized that we never

00:01:36,700 --> 00:01:38,960
answered this question to you.

00:01:38,960 --> 00:01:40,460
So we scrapped the presentation we'd

00:01:40,460 --> 00:01:42,793
been working on for months, and we started from scratch.

00:01:42,793 --> 00:01:46,680


00:01:46,680 --> 00:01:50,090
BRAD GREEN: When we started Angular in 2009,

00:01:50,090 --> 00:01:52,340
answering this question was really easy.

00:01:52,340 --> 00:01:54,630
We were trying to make ourselves much more production

00:01:54,630 --> 00:01:55,880
and building web applications.

00:01:55,880 --> 00:01:57,213
We were building Angular for us.

00:01:57,213 --> 00:02:00,347


00:02:00,347 --> 00:02:02,680
IGOR MINAR: Angular really solved these problems for us.

00:02:02,680 --> 00:02:04,720
And it solved problems for you too.

00:02:04,720 --> 00:02:07,600
You adopted it, and you became part of it.

00:02:07,600 --> 00:02:10,680
Not only did you adopt Angular, you contributed to Angular.

00:02:10,680 --> 00:02:13,710
You contributed code, documentation, videos,

00:02:13,710 --> 00:02:15,400
and tutorials and more.

00:02:15,400 --> 00:02:19,020
In this way, Angular was not just about us anymore.

00:02:19,020 --> 00:02:21,560
We felt this trust that you gave to us

00:02:21,560 --> 00:02:25,504
and felt the responsibility that came with it.

00:02:25,504 --> 00:02:27,670
BRAD GREEN: So over the last five years, many of you

00:02:27,670 --> 00:02:30,080
have also told us that Angular's solving your problems.

00:02:30,080 --> 00:02:32,980
It's gone from something that's just been for us here

00:02:32,980 --> 00:02:35,945
at Google to something that a lot of people around the world

00:02:35,945 --> 00:02:36,445
enjoy.

00:02:36,445 --> 00:02:41,250


00:02:41,250 --> 00:02:43,050
IGOR MINAR: In the past presentations,

00:02:43,050 --> 00:02:47,170
we've always paid special attention to community

00:02:47,170 --> 00:02:48,790
and the Angular ecosystem.

00:02:48,790 --> 00:02:52,550
We think that Angular, even if it was technically flawless,

00:02:52,550 --> 00:02:55,170
could never be successful without you.

00:02:55,170 --> 00:02:58,220
We also think that the developing we do on Angular

00:02:58,220 --> 00:03:03,060
and the way we do it results in superior results.

00:03:03,060 --> 00:03:04,920
BRAD GREEN: So today we're going to talk

00:03:04,920 --> 00:03:08,310
about how we're evolving the Angular of today,

00:03:08,310 --> 00:03:10,649
given this responsibility that you're trusting us with.

00:03:10,649 --> 00:03:12,190
But because of this, we're also going

00:03:12,190 --> 00:03:13,800
to talk about how we think we want

00:03:13,800 --> 00:03:15,760
to evolve Angular in the future and why we're

00:03:15,760 --> 00:03:18,790
going to work on Angular 2.

00:03:18,790 --> 00:03:21,250
IGOR MINAR: Let's take a look at how we work.

00:03:21,250 --> 00:03:24,120
I mentioned that the way we develop Angular results

00:03:24,120 --> 00:03:25,670
in superior results.

00:03:25,670 --> 00:03:29,080
And there are actually three commonly used developing models

00:03:29,080 --> 00:03:30,780
that we see out there.

00:03:30,780 --> 00:03:32,250
There is closed source.

00:03:32,250 --> 00:03:33,980
There is open source export.

00:03:33,980 --> 00:03:40,000
And there's open source with deep community involvement.

00:03:40,000 --> 00:03:42,680
The difference between these is in how

00:03:42,680 --> 00:03:45,710
the control and the workload is distributed

00:03:45,710 --> 00:03:47,550
and how the feedback is looped back

00:03:47,550 --> 00:03:51,329
into those who have the control and do the work.

00:03:51,329 --> 00:03:53,370
BRAD GREEN: So the main differences between these

00:03:53,370 --> 00:03:57,250
are the distribution of control and how the feedback is

00:03:57,250 --> 00:04:00,600
being looped back into those who have the power to do the work.

00:04:00,600 --> 00:04:04,650
In the closed source project, the team does all the work,

00:04:04,650 --> 00:04:06,637
but they don't share the source code.

00:04:06,637 --> 00:04:09,220
And they get to listen to only the feedback that they want to.

00:04:09,220 --> 00:04:10,720
IGOR MINAR: With open source export,

00:04:10,720 --> 00:04:13,330
the team shares the code and tolerate forks.

00:04:13,330 --> 00:04:15,410
But they don't really accept any changes back

00:04:15,410 --> 00:04:16,850
to the moon repository.

00:04:16,850 --> 00:04:20,014
And they get to pick only the feedback they want to hear.

00:04:20,014 --> 00:04:22,555
BRAD GREEN: We believe Angular belongs in this last category.

00:04:22,555 --> 00:04:26,330


00:04:26,330 --> 00:04:32,770
IGOR MINAR: So this way of building Angular,

00:04:32,770 --> 00:04:35,010
we are able to build software that

00:04:35,010 --> 00:04:38,630
is more robust because it takes more use cases

00:04:38,630 --> 00:04:41,390
and perspectives into account.

00:04:41,390 --> 00:04:45,360
It also results in software that has more integration points,

00:04:45,360 --> 00:04:48,094
so it fits better into existing ecosystems.

00:04:48,094 --> 00:04:49,510
And because of the higher adoption

00:04:49,510 --> 00:04:51,420
rate and contribution rate, it's also

00:04:51,420 --> 00:04:54,090
software that has fewer bugs.

00:04:54,090 --> 00:04:58,200
BRAD GREEN: And we hope that this process where all you

00:04:58,200 --> 00:05:02,100
can be part of Angular community and its work is

00:05:02,100 --> 00:05:03,290
a more trustworthy model.

00:05:03,290 --> 00:05:05,180
And trust is kind of a hard thing to measure,

00:05:05,180 --> 00:05:06,780
but we think it's really important.

00:05:06,780 --> 00:05:10,230
IGOR MINAR: Trust and software quality, benefits aside,

00:05:10,230 --> 00:05:13,790
we also get to work with very many talented people inside

00:05:13,790 --> 00:05:15,720
of Google but also outside.

00:05:15,720 --> 00:05:18,060
And we are very grateful that we get to call

00:05:18,060 --> 00:05:19,240
these people our friends.

00:05:19,240 --> 00:05:23,430
And many of you have joined us today, either in person

00:05:23,430 --> 00:05:24,084
or virtually.

00:05:24,084 --> 00:05:25,750
BRAD GREEN: One of the last big benefits

00:05:25,750 --> 00:05:28,160
we've had on the Angular team from this model

00:05:28,160 --> 00:05:32,751
is our ability to hire some really high quality people.

00:05:32,751 --> 00:05:35,000
For most of the people that we've brought on recently,

00:05:35,000 --> 00:05:37,840
we've actually gotten to know you by your contributions

00:05:37,840 --> 00:05:39,030
to the Angular community.

00:05:39,030 --> 00:05:41,960
IGOR MINAR: Let's talk about how the ng team or the core team

00:05:41,960 --> 00:05:44,050
expanded over the last year.

00:05:44,050 --> 00:05:46,940
BRAD GREEN: So last year when we were here at ng-conf,

00:05:46,940 --> 00:05:51,270
we talked about how our team had grown up until 2014.

00:05:51,270 --> 00:05:54,300
Well, we've continued to grow and expand

00:05:54,300 --> 00:05:56,420
based on the expansion of the Angular community

00:05:56,420 --> 00:05:58,950
and with all the projects we've undertaken.

00:05:58,950 --> 00:06:00,450
IGOR MINAR: But not only did we hire

00:06:00,450 --> 00:06:02,750
more people for the core team, we also

00:06:02,750 --> 00:06:05,580
took many of you that were active participants

00:06:05,580 --> 00:06:08,160
in the Angular development and made them core team

00:06:08,160 --> 00:06:10,210
members on the Angular team.

00:06:10,210 --> 00:06:13,740
These include people like Martin Staffa Shahar Talmi,

00:06:13,740 --> 00:06:18,140
but also developers sponsored by companies that are

00:06:18,140 --> 00:06:20,700
working with us on the team.

00:06:20,700 --> 00:06:22,730
BRAD GREEN: So Igor, why would a company

00:06:22,730 --> 00:06:25,679
sponsor their developers to work full time on Angular?

00:06:25,679 --> 00:06:27,470
IGOR MINAR: Well, this is what Amadeus did.

00:06:27,470 --> 00:06:29,670
They realized they were betting big on Angular,

00:06:29,670 --> 00:06:32,020
and they wanted to have a stake in its future.

00:06:32,020 --> 00:06:34,150
They didn't want to sit on sidelines

00:06:34,150 --> 00:06:36,190
and just watch where Angular's going.

00:06:36,190 --> 00:06:38,000
They wanted to be participants in this.

00:06:38,000 --> 00:06:40,800
And they decided to invest in the Angular core development

00:06:40,800 --> 00:06:43,400
and have a stake in its future direction.

00:06:43,400 --> 00:06:45,310
We thought about this and realized that this

00:06:45,310 --> 00:06:46,890
wasn't such a crazy idea.

00:06:46,890 --> 00:06:48,850
And because the developers were led

00:06:48,850 --> 00:06:51,300
by Pawel Kozlowski, a well known figure in the Angular

00:06:51,300 --> 00:06:53,260
community, we felt pretty comfortable

00:06:53,260 --> 00:06:54,567
about taking them onboard.

00:06:54,567 --> 00:06:56,400
BRAD GREEN: Yeah, so this development model,

00:06:56,400 --> 00:06:58,340
where big companies invest in Angular,

00:06:58,340 --> 00:07:00,390
actually allows us to scale faster and do more.

00:07:00,390 --> 00:07:02,100
And we'd like to see more of it.

00:07:02,100 --> 00:07:04,670
If any of your companies are interested in this,

00:07:04,670 --> 00:07:07,040
the first step is being seen as a contributor

00:07:07,040 --> 00:07:09,730
to the Angular community.

00:07:09,730 --> 00:07:11,650
IGOR MINAR: Back in October, we announced

00:07:11,650 --> 00:07:16,320
that Pete Bacon Darwin took over as the Angular 1 lead.

00:07:16,320 --> 00:07:18,150
I was the previous lead on Angular 1.

00:07:18,150 --> 00:07:20,450
But other projects like internationalization,

00:07:20,450 --> 00:07:22,690
or C infrastructure, package management,

00:07:22,690 --> 00:07:24,747
and bits of Angular 2 were distracting me

00:07:24,747 --> 00:07:26,580
and were not allowing me to focus on Angular

00:07:26,580 --> 00:07:28,050
as much as it deserved.

00:07:28,050 --> 00:07:29,720
This is why Pete stepped up.

00:07:29,720 --> 00:07:31,730
And with Pete and the team around,

00:07:31,730 --> 00:07:35,460
now we have a dedicated person to lead and evolve Angular

00:07:35,460 --> 00:07:37,630
further.

00:07:37,630 --> 00:07:40,260
BRAD GREEN: So as a lot of you are happy to tell us,

00:07:40,260 --> 00:07:44,180
you've picked Angular as your solution for building web apps

00:07:44,180 --> 00:07:47,210
and that we can't stop in Evolvian's future.

00:07:47,210 --> 00:07:47,800
And we agree.

00:07:47,800 --> 00:07:49,800
IGOR MINAR: When we asked you, what

00:07:49,800 --> 00:07:52,870
are the most pressing issues in Angular 1.3,

00:07:52,870 --> 00:07:55,570
you told us that the routing was too

00:07:55,570 --> 00:07:59,010
limiting, that building applications for users that

00:07:59,010 --> 00:08:02,170
were in more than one region was too difficult because

00:08:02,170 --> 00:08:05,570
of insufficient internationalization support.

00:08:05,570 --> 00:08:07,570
And you also told us that you really

00:08:07,570 --> 00:08:10,470
liked the performance benefits we delivered in Angular 1.3,

00:08:10,470 --> 00:08:12,512
and you don't want us to stop there.

00:08:12,512 --> 00:08:13,970
BRAD GREEN: So some of the big work

00:08:13,970 --> 00:08:17,190
we're doing feature-wise for Angular 1

00:08:17,190 --> 00:08:19,449
is work that we're going to share with Angular 2,

00:08:19,449 --> 00:08:20,490
starting with the router.

00:08:20,490 --> 00:08:22,370
We built this new router for Angular 2

00:08:22,370 --> 00:08:24,440
and then back ported it to Angular 1.

00:08:24,440 --> 00:08:28,760
It focuses on mobile use cases and complex situations

00:08:28,760 --> 00:08:30,570
in big apps.

00:08:30,570 --> 00:08:33,105
Brian will talk about the new router later today.

00:08:33,105 --> 00:08:35,659
You can hear all about it.

00:08:35,659 --> 00:08:37,929
Internationalization is important on desktop,

00:08:37,929 --> 00:08:39,789
but it's actually critical on mobile

00:08:39,789 --> 00:08:42,590
where you're trying to penetrate emerging markets.

00:08:42,590 --> 00:08:44,390
So you can hear about this from [INAUDIBLE]

00:08:44,390 --> 00:08:46,556
who's going to come up and talk about this new model

00:08:46,556 --> 00:08:48,604
for Angular.

00:08:48,604 --> 00:08:51,020
Better performance and the rest of the improvements in 1.4

00:08:51,020 --> 00:08:53,940
are going to be covered by Lucas and Pawel in the talk right

00:08:53,940 --> 00:08:54,890
after this one today.

00:08:54,890 --> 00:08:58,710


00:08:58,710 --> 00:09:01,440
IGOR MINAR: So the 1.4 release candidate

00:09:01,440 --> 00:09:03,420
will be out in the next week or two.

00:09:03,420 --> 00:09:05,540
And this will make it the fastest release

00:09:05,540 --> 00:09:06,575
we've ever made.

00:09:06,575 --> 00:09:08,700
I would like to thank Pete and the rest of the team

00:09:08,700 --> 00:09:10,710
for improving our processes, which

00:09:10,710 --> 00:09:13,780
made it possible to deliver these features to you as

00:09:13,780 --> 00:09:15,120
quickly as we did.

00:09:15,120 --> 00:09:17,040
BRAD GREEN: Good job, Pete.

00:09:17,040 --> 00:09:19,920
[APPLAUSE]

00:09:19,920 --> 00:09:21,840


00:09:21,840 --> 00:09:24,150
OK, while we're on the topic of Angular 1 development,

00:09:24,150 --> 00:09:29,440
we should give you an update on our material design project.

00:09:29,440 --> 00:09:34,710
IGOR MINAR: So Material Design is Google's answer to single UI

00:09:34,710 --> 00:09:37,800
specification that spans desktop, tablets,

00:09:37,800 --> 00:09:40,830
mobile phones, also wearable devices.

00:09:40,830 --> 00:09:42,800
With Angular Material, what we did is

00:09:42,800 --> 00:09:47,190
we implemented the specification using Angular directives.

00:09:47,190 --> 00:09:49,800
BRAD GREEN: So Angular Material's now in beta release.

00:09:49,800 --> 00:09:52,750
We've got 29 of the most commonly used Material Design

00:09:52,750 --> 00:09:54,250
widgets developed.

00:09:54,250 --> 00:09:55,340
They're built for mobile.

00:09:55,340 --> 00:09:58,240
They look beautiful, and they're built to address accessibility

00:09:58,240 --> 00:09:59,774
out of the box.

00:09:59,774 --> 00:10:01,440
IGOR MINAR: Along with these components,

00:10:01,440 --> 00:10:04,830
we also built an application oriented layout system

00:10:04,830 --> 00:10:06,530
that is based on flexbox.

00:10:06,530 --> 00:10:09,300
And we added theme software so you can customize the look

00:10:09,300 --> 00:10:11,640
and feel of the application.

00:10:11,640 --> 00:10:13,860
BRAD GREEN: So we're headed towards a 1.0 release

00:10:13,860 --> 00:10:16,830
for Angular Material on Angular 1 this summer.

00:10:16,830 --> 00:10:18,480
And after we get that work completed,

00:10:18,480 --> 00:10:20,855
we're going to start delivering this beautiful experience

00:10:20,855 --> 00:10:22,300
for Angular 2.

00:10:22,300 --> 00:10:24,480
IGOR MINAR: With 1.4 almost finished,

00:10:24,480 --> 00:10:27,550
we have started to look towards wherever Angular 1 is heading,

00:10:27,550 --> 00:10:29,000
what's next for it.

00:10:29,000 --> 00:10:31,340
And because we expect that many of you

00:10:31,340 --> 00:10:34,300
will want to migrate to Angular 2 as quickly as possible,

00:10:34,300 --> 00:10:36,550
we're setting the primary theme for the future Angular

00:10:36,550 --> 00:10:41,400
releases to be the paving the path to Angular 2.

00:10:41,400 --> 00:10:44,060
But we want to take your input into account as well.

00:10:44,060 --> 00:10:46,600
So we can listen to your feedback and use that

00:10:46,600 --> 00:10:48,730
to gauge which priorities or which

00:10:48,730 --> 00:10:51,439
features we should prioritize.

00:10:51,439 --> 00:10:52,980
BRAD GREEN: While we're on Angular 1,

00:10:52,980 --> 00:10:55,105
we should talk about how we're going to support it.

00:10:55,105 --> 00:10:58,000
When we were at ng-europe, back in October,

00:10:58,000 --> 00:11:00,670
we showed that there were over 1,600 applications

00:11:00,670 --> 00:11:04,000
written in Angular, checked into Google source code repository.

00:11:04,000 --> 00:11:05,950
Now there are nearly 2,000, and we're

00:11:05,950 --> 00:11:08,990
really excited about how fast this is growing at Google.

00:11:08,990 --> 00:11:10,920
IGOR MINAR: Every month, nearly one million

00:11:10,920 --> 00:11:13,740
of you visit angularjs.org.

00:11:13,740 --> 00:11:17,720
And about 100,000 of you interact with the Angular team

00:11:17,720 --> 00:11:18,220
on GitHub.

00:11:18,220 --> 00:11:23,240


00:11:23,240 --> 00:11:25,550
BRAD GREEN: We often get asked the question--

00:11:25,550 --> 00:11:28,240
because you guys and actually a lot of developers at Google

00:11:28,240 --> 00:11:30,780
rely on Angular 1 today-- how are we

00:11:30,780 --> 00:11:34,727
going to split our development between Angular 1 in Angular 2?

00:11:34,727 --> 00:11:36,560
IGOR MINAR: We want to drive our development

00:11:36,560 --> 00:11:37,650
based on your feedback.

00:11:37,650 --> 00:11:39,540
And we want to split the time we spent

00:11:39,540 --> 00:11:42,400
between Angular 2 and Angular 1 based on where

00:11:42,400 --> 00:11:44,910
you're spending your time.

00:11:44,910 --> 00:11:48,030
BRAD GREEN: So our website at angularjs.org

00:11:48,030 --> 00:11:50,720
is where we all go right now for documentation, news,

00:11:50,720 --> 00:11:53,270
and other Angular resources.

00:11:53,270 --> 00:11:57,120
Today I'd like to announce our previous site for Angular 2

00:11:57,120 --> 00:11:59,770
at angular.io.

00:11:59,770 --> 00:12:02,840
We're going to use the traffic between these two sites

00:12:02,840 --> 00:12:04,640
to gauge interest in the community

00:12:04,640 --> 00:12:06,430
as to where you're spending your time,

00:12:06,430 --> 00:12:10,465
along with interactions on GitHub and other sources.

00:12:10,465 --> 00:12:11,840
IGOR MINAR: We'll use the signals

00:12:11,840 --> 00:12:13,970
to decide where to invest.

00:12:13,970 --> 00:12:16,470
But one of the primary principles we'll use

00:12:16,470 --> 00:12:20,210
is that we'll continue releasing Angular 1 releases

00:12:20,210 --> 00:12:24,582
until the vast majority of you might migrate to Angular 2.

00:12:24,582 --> 00:12:26,790
BRAD GREEN: So we're also going to keep track of this

00:12:26,790 --> 00:12:27,956
and make the numbers public.

00:12:27,956 --> 00:12:30,670
We'll release them online at conferences like this one,

00:12:30,670 --> 00:12:32,272
so we can all together decide where

00:12:32,272 --> 00:12:34,230
we're going to invest in the future of Angular.

00:12:34,230 --> 00:12:36,355
IGOR MINAR: This will actually put the burden on us

00:12:36,355 --> 00:12:37,980
to make Angular 2 more attractive,

00:12:37,980 --> 00:12:39,930
easy to learn, and easy to migrate to.

00:12:39,930 --> 00:12:43,434


00:12:43,434 --> 00:12:44,850
BRAD GREEN: So now that we've said

00:12:44,850 --> 00:12:46,540
we have some migration that's going to happen,

00:12:46,540 --> 00:12:47,456
we better have a plan.

00:12:47,456 --> 00:12:49,374


00:12:49,374 --> 00:12:50,790
IGOR MINAR: We thought about this,

00:12:50,790 --> 00:12:52,700
and we came up with two strategies.

00:12:52,700 --> 00:12:56,249
We'll label them big bang and incremental.

00:12:56,249 --> 00:12:57,790
BRAD GREEN: In the big bang scenario,

00:12:57,790 --> 00:13:00,280
this is where you would decide that we're

00:13:00,280 --> 00:13:02,560
going to stop development-- stop feature

00:13:02,560 --> 00:13:05,810
developments-- on Angular 1, migrate all of our templates

00:13:05,810 --> 00:13:09,780
and JavaScript to Angular 2, make sure it all works,

00:13:09,780 --> 00:13:11,930
and then resume feature development.

00:13:11,930 --> 00:13:13,638
IGOR MINAR: This is the approach that you

00:13:13,638 --> 00:13:17,130
might want to use if you want to take advantage

00:13:17,130 --> 00:13:19,839
of all the features of Angular 2.0 as quickly as possible.

00:13:19,839 --> 00:13:21,630
There will be actually some teams at Google

00:13:21,630 --> 00:13:23,494
that will do just this.

00:13:23,494 --> 00:13:25,910
BRAD GREEN: So because the incremental strategy that we're

00:13:25,910 --> 00:13:27,230
going to talk about in a minute is

00:13:27,230 --> 00:13:29,104
going to require that you load both Angular 1

00:13:29,104 --> 00:13:31,600
and Angular 2 libraries, this big bang strategy

00:13:31,600 --> 00:13:33,500
might also be most appropriate if you've

00:13:33,500 --> 00:13:34,960
got a mobile app or other scenarios

00:13:34,960 --> 00:13:37,400
where the total payload size is really important.

00:13:37,400 --> 00:13:39,760
IGOR MINAR: We also understand that this big bang

00:13:39,760 --> 00:13:44,730
strategy is not for all of you.

00:13:44,730 --> 00:13:48,040
And this is why we also have a second plan,

00:13:48,040 --> 00:13:49,580
incremental strategy.

00:13:49,580 --> 00:13:52,430
And our new router that Brian's going to talk about in a bit

00:13:52,430 --> 00:13:54,560
supports this one.

00:13:54,560 --> 00:13:56,100
But there are actually two options.

00:13:56,100 --> 00:13:59,290
One is you start using your application-- you keep

00:13:59,290 --> 00:14:02,380
on developing Angular applications as you are today,

00:14:02,380 --> 00:14:06,740
but you start migrating some of the views to Angular 2.

00:14:06,740 --> 00:14:10,250
And the new router will support mixing and matching

00:14:10,250 --> 00:14:11,479
both versions.

00:14:11,479 --> 00:14:13,270
BRAD GREEN: You can also go the other route

00:14:13,270 --> 00:14:15,610
where you rewrite your top level application

00:14:15,610 --> 00:14:19,030
controller using the new router to build a shell for your app.

00:14:19,030 --> 00:14:21,890
And then one by one, you can migrate your individual views

00:14:21,890 --> 00:14:23,010
to Angular 2.

00:14:23,010 --> 00:14:24,510
IGOR MINAR: For now, we are planning

00:14:24,510 --> 00:14:25,950
to provide a migration guide.

00:14:25,950 --> 00:14:27,940
And John Papa, yesterday, commented

00:14:27,940 --> 00:14:28,914
to helping us write it.

00:14:28,914 --> 00:14:30,080
BRAD GREEN: Thank you, John.

00:14:30,080 --> 00:14:31,246
IGOR MINAR: Thank you, John.

00:14:31,246 --> 00:14:34,210
[APPLAUSE]

00:14:34,210 --> 00:14:37,640
We are also thinking of how could we help you with dueling.

00:14:37,640 --> 00:14:40,310
We have some ideas about this, but we still

00:14:40,310 --> 00:14:42,210
need to think through this.

00:14:42,210 --> 00:14:42,960
BRAD GREEN: Right.

00:14:42,960 --> 00:14:44,560
But you don't have to wait for us.

00:14:44,560 --> 00:14:46,990
One of the best ways you can prepare for Angular 2

00:14:46,990 --> 00:14:50,250
is to follow the best practices that we know on Angular 1.

00:14:50,250 --> 00:14:53,550
John Papa and Todd Matto have consolidated these

00:14:53,550 --> 00:14:56,290
into an online style guide, and John will present these

00:14:56,290 --> 00:14:58,640
at his talk later tomorrow.

00:14:58,640 --> 00:15:01,280
IGOR MINAR: We already mentioned that one of the entry pods,

00:15:01,280 --> 00:15:03,950
one of the possibilities, is using the new router.

00:15:03,950 --> 00:15:07,440
And together with ASICs modules and ASIC in general,

00:15:07,440 --> 00:15:08,980
this will make the migration easier.

00:15:08,980 --> 00:15:11,590
Brian will cover this later today.

00:15:11,590 --> 00:15:13,720
BRAD GREEN: Lastly, if you're using TypeScript,

00:15:13,720 --> 00:15:15,690
you can get more help from your IDE

00:15:15,690 --> 00:15:18,790
when you go to refactor or migrate your code to Angular 2.

00:15:18,790 --> 00:15:21,882
You can hear more about the details of what a migration

00:15:21,882 --> 00:15:24,090
strategy might look like from [? Mehal ?] in his talk

00:15:24,090 --> 00:15:26,720
on the subject tomorrow.

00:15:26,720 --> 00:15:29,780
IGOR MINAR: To summarize the themes for Angular 1,

00:15:29,780 --> 00:15:32,780
we are delivering or working on some exciting new features,

00:15:32,780 --> 00:15:35,110
like the router, internationalization,

00:15:35,110 --> 00:15:38,460
Material Design, but we are also committed to supporting you.

00:15:38,460 --> 00:15:40,819
And we have a dedicated team for that.

00:15:40,819 --> 00:15:42,610
We are also working on migration strategies

00:15:42,610 --> 00:15:44,694
to help you to get to Angular 2.

00:15:44,694 --> 00:15:45,610
BRAD GREEN: All right.

00:15:45,610 --> 00:15:47,630
So now let's talk about Angular 2

00:15:47,630 --> 00:15:51,040
and why you'd want to migrate in the first place.

00:15:51,040 --> 00:15:52,590
IGOR MINAR: Over the past five years,

00:15:52,590 --> 00:15:55,250
we've had the privilege to work with thousands of developers

00:15:55,250 --> 00:15:56,814
from Google or outside.

00:15:56,814 --> 00:15:58,230
And we listened to their feedback.

00:15:58,230 --> 00:16:01,810
And we kind of summarized that feedback in several things.

00:16:01,810 --> 00:16:06,860
You said that you wanted more consistency in Angular

00:16:06,860 --> 00:16:08,955
applications, more simplicity.

00:16:08,955 --> 00:16:12,160


00:16:12,160 --> 00:16:14,050
BRAD GREEN: You wanted to be more flexible.

00:16:14,050 --> 00:16:15,451
You wanted to be much faster.

00:16:15,451 --> 00:16:17,200
And all of this should sum up to you being

00:16:17,200 --> 00:16:19,176
more productive developers.

00:16:19,176 --> 00:16:21,310
IGOR MINAR: When we looked at where we were

00:16:21,310 --> 00:16:23,300
and where you wanted us to be, we

00:16:23,300 --> 00:16:25,790
realized that we couldn't get there with the Angular 1

00:16:25,790 --> 00:16:28,690
architecture, at least not without making

00:16:28,690 --> 00:16:31,170
very painful breaking changes.

00:16:31,170 --> 00:16:34,415
This is why we came up with Angular 2.

00:16:34,415 --> 00:16:36,900
BRAD GREEN: So Angular 2 is now in alpha.

00:16:36,900 --> 00:16:40,917
And you can go see its status on angular.io.

00:16:40,917 --> 00:16:42,750
While it's not ready for building production

00:16:42,750 --> 00:16:44,480
applications quite yet, we did want

00:16:44,480 --> 00:16:46,317
to cover what we've done to date.

00:16:46,317 --> 00:16:48,400
IGOR MINAR: As you probably haven't had the chance

00:16:48,400 --> 00:16:51,470
to work with Angular 2 yet, you might be wondering,

00:16:51,470 --> 00:16:52,740
how is Angular 2 different?

00:16:52,740 --> 00:16:56,550
Are the features that I like in Angular still there?

00:16:56,550 --> 00:16:58,610
How will the investment [INAUDIBLE]

00:16:58,610 --> 00:17:01,200
into learning Angular and writing Angular applications

00:17:01,200 --> 00:17:03,450
map to this new framework?

00:17:03,450 --> 00:17:06,329
BRAD GREEN: So while the syntax and semantics have changed

00:17:06,329 --> 00:17:09,020
a bit from Angular 1, you're going to find, I think,

00:17:09,020 --> 00:17:12,310
all the things that you grew to know and love about Angular 1

00:17:12,310 --> 00:17:15,240
already in Angular 2, from dependency injection, data

00:17:15,240 --> 00:17:18,410
binding, directives, to Karma, Protractor,

00:17:18,410 --> 00:17:20,670
and the rest of the testing story, accessibility,

00:17:20,670 --> 00:17:23,115
and the rest, all improved across the board.

00:17:23,115 --> 00:17:25,490
IGOR MINAR: We're really excited about the simplification

00:17:25,490 --> 00:17:27,200
of many of the existing concepts,

00:17:27,200 --> 00:17:29,060
but we're also very excited about adding

00:17:29,060 --> 00:17:30,840
new, very powerful ones.

00:17:30,840 --> 00:17:33,640
We're going to cover many of these over the next two days,

00:17:33,640 --> 00:17:36,291
but let's talk about some of them now.

00:17:36,291 --> 00:17:38,040
BRAD GREEN: Let's talk about productivity.

00:17:38,040 --> 00:17:39,700
This is has been a theme in Angular

00:17:39,700 --> 00:17:41,700
from the very beginning.

00:17:41,700 --> 00:17:44,020
In Angular 1, we limited ourselves

00:17:44,020 --> 00:17:45,620
to building productivity enhancements

00:17:45,620 --> 00:17:48,390
with just what the browser gave to us at the time.

00:17:48,390 --> 00:17:50,350
And we made it pretty far.

00:17:50,350 --> 00:17:52,180
Recently, in the last year, we've

00:17:52,180 --> 00:17:55,020
been focused on making developer productivity enhancements

00:17:55,020 --> 00:17:57,120
to JavaScript itself.

00:17:57,120 --> 00:17:59,150
IGOR MINAR: Last year, at ng-europe,

00:17:59,150 --> 00:18:01,120
we announced AtScript.

00:18:01,120 --> 00:18:05,320
This was our answer to looking at what developers needed when

00:18:05,320 --> 00:18:07,250
building Angular applications.

00:18:07,250 --> 00:18:12,410
And it was a proposal how we could extend JavaScript

00:18:12,410 --> 00:18:14,380
and make it evolve.

00:18:14,380 --> 00:18:16,130
BRAD GREEN: So starting with AtScript 5,

00:18:16,130 --> 00:18:18,690
or what we just call JavaScript today,

00:18:18,690 --> 00:18:23,390
we wanted to see if we can help to move the ECMAScript 6

00:18:23,390 --> 00:18:25,830
adoption faster by supporting it in Angular

00:18:25,830 --> 00:18:27,090
and promoting it here.

00:18:27,090 --> 00:18:31,420
We love ES6 for its basic developer productivity

00:18:31,420 --> 00:18:34,660
features, and it helped avoiding language pitfalls.

00:18:34,660 --> 00:18:37,300
IGOR MINAR: We also got excited about optional type system

00:18:37,300 --> 00:18:40,980
as delivered in TypeScript.

00:18:40,980 --> 00:18:42,500
And Dan and Andrew are going to talk

00:18:42,500 --> 00:18:44,905
more about this later today.

00:18:44,905 --> 00:18:46,280
BRAD GREEN: And lastly, we wanted

00:18:46,280 --> 00:18:49,280
to be able to express metadata concepts about our code.

00:18:49,280 --> 00:18:51,550
Annotations allow us to do this, and they

00:18:51,550 --> 00:18:53,510
allow us to much more succinctly express

00:18:53,510 --> 00:18:56,860
what we need to do when we define data binding

00:18:56,860 --> 00:18:58,619
and directives in Angular.

00:18:58,619 --> 00:19:01,160
IGOR MINAR: But we didn't want to create a language extension

00:19:01,160 --> 00:19:03,080
that was specific to Angular.

00:19:03,080 --> 00:19:05,260
The types of metadata annotations, these

00:19:05,260 --> 00:19:08,240
are generic features that any developer can benefit from.

00:19:08,240 --> 00:19:09,729
This is from day one.

00:19:09,729 --> 00:19:11,270
We decided that whatever we are going

00:19:11,270 --> 00:19:15,340
to work on within this area of language extensions,

00:19:15,340 --> 00:19:17,760
it is something that we wanted to take to tc39

00:19:17,760 --> 00:19:21,330
and standardize as a regular feature in the JavaScript

00:19:21,330 --> 00:19:21,965
platform.

00:19:21,965 --> 00:19:24,320
BRAD GREEN: Yeah, we've made some progress there.

00:19:24,320 --> 00:19:27,790
One of the parts of the tc39 process that's really critical

00:19:27,790 --> 00:19:30,590
is to show, in some live examples,

00:19:30,590 --> 00:19:33,930
how some of these proposed extensions are actually good.

00:19:33,930 --> 00:19:37,510
And so we worked with Erik Arvidsson and other members

00:19:37,510 --> 00:19:40,020
of the V8 team on Chrome at Google

00:19:40,020 --> 00:19:42,020
to build the features of AtScript into Traceur.

00:19:42,020 --> 00:19:47,050
Now Traceur is a transpiler that takes features of the proposed

00:19:47,050 --> 00:19:51,130
standards in ECMAScript 6, 7 and now AtScript

00:19:51,130 --> 00:19:55,760
and links them into JavaScript that works in today's browsers.

00:19:55,760 --> 00:19:57,830
And so using Traceur and AtScript syntax,

00:19:57,830 --> 00:20:00,610
we've been developing Angular 2 successfully for over a year

00:20:00,610 --> 00:20:01,785
now.

00:20:01,785 --> 00:20:04,870
IGOR MINAR: After an announcement about AtScript,

00:20:04,870 --> 00:20:07,390
we found that there are many people that care

00:20:07,390 --> 00:20:09,500
about the same things we do.

00:20:09,500 --> 00:20:13,620
We talked to the Chrome team building V8

00:20:13,620 --> 00:20:17,030
that not only is implementing the E6 features into the VM,

00:20:17,030 --> 00:20:19,740
but they're also working on creating a sound type

00:20:19,740 --> 00:20:22,500
system that will deliver faster performance

00:20:22,500 --> 00:20:25,780
and more predictable performance for JavaScript applications.

00:20:25,780 --> 00:20:28,110
We also talked to Closure Compiler team

00:20:28,110 --> 00:20:32,980
at Google, which is also working on adding E6 support

00:20:32,980 --> 00:20:37,540
the Closure Compiler in addition to adopting TypeScript style

00:20:37,540 --> 00:20:40,000
of types annotations.

00:20:40,000 --> 00:20:41,760
These are the tools that will enable

00:20:41,760 --> 00:20:43,820
us to take advantage of these features

00:20:43,820 --> 00:20:46,260
before they're baked into the browser.

00:20:46,260 --> 00:20:49,499
And we also talked to the Facebook team that

00:20:49,499 --> 00:20:51,540
works on flow, and we had really good discussions

00:20:51,540 --> 00:20:53,630
about JavaScript and types in JavaScript.

00:20:53,630 --> 00:20:56,440
BRAD GREEN: We've also had many good conversations

00:20:56,440 --> 00:20:59,190
with some of our friends at Microsoft on the TypeScript

00:20:59,190 --> 00:21:00,240
team.

00:21:00,240 --> 00:21:01,850
In fact, we've made so much progress

00:21:01,850 --> 00:21:04,520
with them I'd like to bring them on stage now.

00:21:04,520 --> 00:21:06,440
Please welcome Jonathan Turner who's

00:21:06,440 --> 00:21:09,196
a program manager for TypeScript.

00:21:09,196 --> 00:21:12,682
[APPLAUSE]

00:21:12,682 --> 00:21:14,855


00:21:14,855 --> 00:21:16,230
JONATHAN TURNER: Thank you, Brad.

00:21:16,230 --> 00:21:18,140
Thank you, Igor.

00:21:18,140 --> 00:21:21,590
Really excited to be at ng-conf in beautiful Salt Lake City.

00:21:21,590 --> 00:21:23,400
This is a fantastic venue, and I'm really

00:21:23,400 --> 00:21:26,070
excited to be a part of this conference.

00:21:26,070 --> 00:21:29,132
So I want to take us back to November of last year

00:21:29,132 --> 00:21:30,590
and talk about a collaboration that

00:21:30,590 --> 00:21:33,650
started between the Angular team and the TypeScript team.

00:21:33,650 --> 00:21:36,440
When Angular announced AtScript and some of the features

00:21:36,440 --> 00:21:39,210
that they wanted to see part of JavaScript, the JavaScript

00:21:39,210 --> 00:21:41,410
standard, a better declarative way

00:21:41,410 --> 00:21:43,480
for working with rich libraries like Angular,

00:21:43,480 --> 00:21:45,850
the TypeScript team got really interested.

00:21:45,850 --> 00:21:50,030
So we reached out, and we formed a collaboration.

00:21:50,030 --> 00:21:53,260
We met up and started talking about what would be possible

00:21:53,260 --> 00:21:58,020
if we started taking some of those features that's

00:21:58,020 --> 00:22:00,710
part of AtScript and put them into TypeScript,

00:22:00,710 --> 00:22:02,805
merged it with the type system, merged it

00:22:02,805 --> 00:22:05,710
with how the compiler output JavaScript code.

00:22:05,710 --> 00:22:09,290
So I remember sitting around the table with Misko, with Anders

00:22:09,290 --> 00:22:11,577
from the TypeScript team, looking at these problems

00:22:11,577 --> 00:22:13,660
and kind of solving these engineering problems one

00:22:13,660 --> 00:22:15,490
by one.

00:22:15,490 --> 00:22:19,120
As we saw earlier, we had this nice ideal of these layers,

00:22:19,120 --> 00:22:21,530
where ES6 builds on ES5.

00:22:21,530 --> 00:22:25,090
You've got types on top of that and annotations on top of that.

00:22:25,090 --> 00:22:28,370
But as we're starting to unpack each of these problems,

00:22:28,370 --> 00:22:30,090
we had to be kind of honest.

00:22:30,090 --> 00:22:33,270
Back in November, what the actual reality was

00:22:33,270 --> 00:22:35,970
was kind of not so clean.

00:22:35,970 --> 00:22:38,220
Each piece needed a couple more features

00:22:38,220 --> 00:22:41,250
to bring it up to maturity.

00:22:41,250 --> 00:22:47,220
So the TypeScript team took this in our challenging, loving

00:22:47,220 --> 00:22:51,480
selves as engineers, looked at it, and started tackling it.

00:22:51,480 --> 00:22:54,310
So we tackled it in two ways.

00:22:54,310 --> 00:22:57,055
The first way is that we started incorporating more and more

00:22:57,055 --> 00:22:59,160
of ES6 into TypeScript.

00:22:59,160 --> 00:23:01,200
And with TypeScript 1.5, which is the upcoming

00:23:01,200 --> 00:23:04,330
version of TypeScript, we will now have very rich support

00:23:04,330 --> 00:23:07,960
for ES6 in TypeScript.

00:23:07,960 --> 00:23:09,970
We also worked with the Angular team

00:23:09,970 --> 00:23:12,546
closely to incorporate annotations.

00:23:12,546 --> 00:23:13,920
So we have a nice declarative way

00:23:13,920 --> 00:23:17,490
of working with libraries like Angular,

00:23:17,490 --> 00:23:20,390
where you could have a nice separation of concerns.

00:23:20,390 --> 00:23:22,630
And we took the Angular feedback,

00:23:22,630 --> 00:23:27,330
and we also worked with Yehuda Katz from the Ember team

00:23:27,330 --> 00:23:31,120
and with Rob Eisenberg to create a nice, rich design

00:23:31,120 --> 00:23:33,880
that we then implemented as part of TypeScript.

00:23:33,880 --> 00:23:37,480
I'm happy to announce today that the next version of TypeScript

00:23:37,480 --> 00:23:39,380
really fills out this story where

00:23:39,380 --> 00:23:42,310
we have ES5 and types sitting on top of ES6

00:23:42,310 --> 00:23:44,510
and annotations working with all types.

00:23:44,510 --> 00:23:47,340
We have nice tooling across all of these features

00:23:47,340 --> 00:23:50,510
and nice is ES3 and ES5 output as part of this.

00:23:50,510 --> 00:23:51,645
We're really exciting.

00:23:51,645 --> 00:23:52,145
Thank you.

00:23:52,145 --> 00:23:56,105
[APPLAUSE]

00:23:56,105 --> 00:23:58,590


00:23:58,590 --> 00:24:01,180
We're really excited to see what you all do.

00:24:01,180 --> 00:24:03,570
And I look forward to hearing from you later.

00:24:03,570 --> 00:24:04,434
Thank you.

00:24:04,434 --> 00:24:05,350
BRAD GREEN: All right.

00:24:05,350 --> 00:24:06,000
Thanks, Jonathan.

00:24:06,000 --> 00:24:08,250
And thanks so much to the rest of the TypeScript team.

00:24:08,250 --> 00:24:11,858
[APPLAUSE]

00:24:11,858 --> 00:24:13,460


00:24:13,460 --> 00:24:17,190
So with this convergence, we're happy to announce

00:24:17,190 --> 00:24:19,149
that we're going to retire the term "AtScript."

00:24:19,149 --> 00:24:21,481
And we're just going to call it all TypeScript from here

00:24:21,481 --> 00:24:22,276
on out.

00:24:22,276 --> 00:24:25,587
[APPLAUSE]

00:24:25,587 --> 00:24:28,430


00:24:28,430 --> 00:24:30,130
You can hear more about how TypeScript

00:24:30,130 --> 00:24:33,190
works with Angular 2 in a talk that Jonathan and his partner

00:24:33,190 --> 00:24:35,222
will do tomorrow.

00:24:35,222 --> 00:24:37,430
IGOR MINAR: Well, we are incredibly excited about all

00:24:37,430 --> 00:24:39,430
these new features and productivity

00:24:39,430 --> 00:24:42,280
wins that our collaboration with TypeScript will give us.

00:24:42,280 --> 00:24:43,940
I want to stress one thing.

00:24:43,940 --> 00:24:46,370
All of these features will be completely optional.

00:24:46,370 --> 00:24:48,300
You'll be able to take advantage of Angular 2

00:24:48,300 --> 00:24:52,480
whether you're using ES5, the new standard ES6,

00:24:52,480 --> 00:24:55,335
or you can go all the way in with all the optional types

00:24:55,335 --> 00:24:58,410
and annotations provided by TypeScript.

00:24:58,410 --> 00:24:59,870
BRAD GREEN: But we're not done.

00:24:59,870 --> 00:25:02,260
For this to become a standard, all of our partners

00:25:02,260 --> 00:25:03,718
are going to have to come together.

00:25:03,718 --> 00:25:06,140
And we'll need even more partners to make this happen.

00:25:06,140 --> 00:25:08,740
IGOR MINAR: This is a very long term investment, just

00:25:08,740 --> 00:25:10,280
like Angular 2.

00:25:10,280 --> 00:25:13,100
We think that this is a really hard problem,

00:25:13,100 --> 00:25:15,180
but it's a hard problem that's worth solving.

00:25:15,180 --> 00:25:17,840


00:25:17,840 --> 00:25:20,591
BRAD GREEN: So while we're on the subject of other language

00:25:20,591 --> 00:25:22,090
options, we should talk a little bit

00:25:22,090 --> 00:25:23,930
about our investment in Dart.

00:25:23,930 --> 00:25:25,930
If you use Dart, you're probably happy about it.

00:25:25,930 --> 00:25:28,370
But if you don't, you might ask us,

00:25:28,370 --> 00:25:30,360
why are you supporting Dart?

00:25:30,360 --> 00:25:33,086
Well, the simple reason is that you benefit

00:25:33,086 --> 00:25:34,210
from this in a couple ways.

00:25:34,210 --> 00:25:37,290
Number one is you have a much larger team working on Angular

00:25:37,290 --> 00:25:38,026
because of it. .

00:25:38,026 --> 00:25:40,400
And number two, we've learned a lot from our relationship

00:25:40,400 --> 00:25:41,330
with the Dart team.

00:25:41,330 --> 00:25:43,650
We benefit from these learnings in the JavaScript

00:25:43,650 --> 00:25:44,844
side of Angular.

00:25:44,844 --> 00:25:46,260
IGOR MINAR: Some of you might know

00:25:46,260 --> 00:25:49,140
that we've had a version of Angular for Dart for over a

00:25:49,140 --> 00:25:50,780
here now.

00:25:50,780 --> 00:25:53,880
We built it because there were teams at Google that wanted

00:25:53,880 --> 00:25:57,070
to use Angular with Dart.

00:25:57,070 --> 00:26:00,370
And they funded our team expansion to get it done.

00:26:00,370 --> 00:26:01,820
But we had a problem.

00:26:01,820 --> 00:26:04,940
We were not working as a single team.

00:26:04,940 --> 00:26:09,900
We were two teams, each working on separate innovations.

00:26:09,900 --> 00:26:11,650
BRAD GREEN: One of the things we realized,

00:26:11,650 --> 00:26:14,430
though, was that the majority of Angular code

00:26:14,430 --> 00:26:15,880
is purely algorithmic.

00:26:15,880 --> 00:26:19,340
And what we imagined was that maybe we could write all of it

00:26:19,340 --> 00:26:21,552
in one language and transpile to another language.

00:26:21,552 --> 00:26:23,260
And we've done this, and this has allowed

00:26:23,260 --> 00:26:25,237
us to join the two teams.

00:26:25,237 --> 00:26:26,820
IGOR MINAR: We have a process in place

00:26:26,820 --> 00:26:29,140
that allows us to design and implement

00:26:29,140 --> 00:26:33,990
every feature in Angular using AtScript or now TypeScript.

00:26:33,990 --> 00:26:39,130
We then transpile this into Dart or JavaScript.

00:26:39,130 --> 00:26:41,820
And for the calls or for the code

00:26:41,820 --> 00:26:44,940
that needs to touch browser APIs, [INAUDIBLE],

00:26:44,940 --> 00:26:47,000
both in Dart and JavaScript.

00:26:47,000 --> 00:26:49,810
Then we combine this output into a package

00:26:49,810 --> 00:26:53,769
that we ship as Angular 2 for JS or Angular 2 for Dart.

00:26:53,769 --> 00:26:55,310
BRAD GREEN: So again, what this means

00:26:55,310 --> 00:26:58,660
to you is that there's now a team of Angular that's double

00:26:58,660 --> 00:27:01,330
the original size working on all the features for you,

00:27:01,330 --> 00:27:05,810
from performance to the new templates, ITN, accessibility,

00:27:05,810 --> 00:27:09,090
all of it has a much bigger team building Angular today.

00:27:09,090 --> 00:27:13,950


00:27:13,950 --> 00:27:16,070
IGOR MINAR: We should thank the Dart team

00:27:16,070 --> 00:27:19,200
for the great partnerships we had with them.

00:27:19,200 --> 00:27:21,630
Kasper Lund helped us rewrite our expression parser

00:27:21,630 --> 00:27:22,960
to be much more efficient.

00:27:22,960 --> 00:27:25,370
We got the idea of zones from Dart.

00:27:25,370 --> 00:27:27,990
And we also saw the benefits of optional type system

00:27:27,990 --> 00:27:31,149
while building large applications in Angular Dart.

00:27:31,149 --> 00:27:32,690
These are all the features that we'll

00:27:32,690 --> 00:27:35,100
be able to take advantage of in Angular 2,

00:27:35,100 --> 00:27:39,435
whether you're using JavaScript or Dart.

00:27:39,435 --> 00:27:41,560
BRAD GREEN: OK, while we're kind of on the subject,

00:27:41,560 --> 00:27:43,980
we should also talk about something

00:27:43,980 --> 00:27:46,430
that I have a sense is going on, where

00:27:46,430 --> 00:27:49,770
when there's two technologies in a space that

00:27:49,770 --> 00:27:51,730
cover the same feature set, there's

00:27:51,730 --> 00:27:56,830
some idea that they must go head to head, that two will enter

00:27:56,830 --> 00:27:57,830
and one will leave.

00:27:57,830 --> 00:28:01,430
So whether it's Angular verses React or JavaScript verses

00:28:01,430 --> 00:28:05,940
Dart-- we don't really see it that way.

00:28:05,940 --> 00:28:07,860
IGOR MINAR: Take Ember as an example.

00:28:07,860 --> 00:28:09,910
Yehuda, as was mentioned, helped us

00:28:09,910 --> 00:28:13,490
with designing the annotations for TypeScript.

00:28:13,490 --> 00:28:15,420
But also, we had really good collaboration

00:28:15,420 --> 00:28:18,560
with the Ember CLI teams and the Broccoli teams.

00:28:18,560 --> 00:28:21,810
Steph and Joe understood that working together

00:28:21,810 --> 00:28:25,050
will allow us to get more done faster.

00:28:25,050 --> 00:28:29,496
And we will get benefits that will be available to both Ember

00:28:29,496 --> 00:28:30,495
and Angular communities.

00:28:30,495 --> 00:28:32,956


00:28:32,956 --> 00:28:34,330
BRAD GREEN: So wherever possible,

00:28:34,330 --> 00:28:36,690
we would love it if you guys could help support us

00:28:36,690 --> 00:28:40,710
in engendering a kinder attitude towards collaboration

00:28:40,710 --> 00:28:42,577
in the open source community.

00:28:42,577 --> 00:28:45,846
[CHEERS AND APPLAUSE]

00:28:45,846 --> 00:28:48,648


00:28:48,648 --> 00:28:51,060
Because this is really the promise of open source.

00:28:51,060 --> 00:28:53,630
If it Looks good, just copy it in.

00:28:53,630 --> 00:28:55,963
[LAUGHTER]

00:28:55,963 --> 00:28:57,320


00:28:57,320 --> 00:28:58,810
We think we can get a lot more done

00:28:58,810 --> 00:29:00,809
if we can all work together and even be friends.

00:29:00,809 --> 00:29:06,360


00:29:06,360 --> 00:29:08,330
When you guys talk to us, you tell us

00:29:08,330 --> 00:29:11,700
that Angular is awesome, but it could be a little easier

00:29:11,700 --> 00:29:13,010
to learn.

00:29:13,010 --> 00:29:15,820
There's parts of Angular that-- well, there's actually

00:29:15,820 --> 00:29:17,540
a lot of concepts to learn.

00:29:17,540 --> 00:29:19,710
Some of the errors may come as surprises.

00:29:19,710 --> 00:29:22,410
And some of the APIs, maybe directives in particular,

00:29:22,410 --> 00:29:24,940
are just downright hard to learn.

00:29:24,940 --> 00:29:27,010
IGOR MINAR: Ben depicted his experience

00:29:27,010 --> 00:29:29,740
with learning Angular using this diagram.

00:29:29,740 --> 00:29:34,660
It looks like a very exciting but bumpy coaster ride.

00:29:34,660 --> 00:29:37,200
It is our goal to straighten this line for everybody

00:29:37,200 --> 00:29:40,190
in Angular 2.

00:29:40,190 --> 00:29:43,620
BRAD GREEN: So Igor, maybe tell us, how did we get here?

00:29:43,620 --> 00:29:45,980
Why is it not a smooth line in Angular 1?

00:29:45,980 --> 00:29:47,230
IGOR MINAR: It's all my fault.

00:29:47,230 --> 00:29:49,570
[LAUGHTER]

00:29:49,570 --> 00:29:50,510


00:29:50,510 --> 00:29:54,670
No, in the early days, five years ago, Angular was simple.

00:29:54,670 --> 00:29:57,200
We designed it with the focus on productivity,

00:29:57,200 --> 00:30:00,190
reducing boilerplate, making testability easy,

00:30:00,190 --> 00:30:02,250
and providing us with structure.

00:30:02,250 --> 00:30:05,180
But the use cases we were targeting back then

00:30:05,180 --> 00:30:06,860
were much more limited than those

00:30:06,860 --> 00:30:10,630
that we deal with when building complex applications today.

00:30:10,630 --> 00:30:12,590
Take components as a good example.

00:30:12,590 --> 00:30:15,440
When Angular started, there were no components in Angular.

00:30:15,440 --> 00:30:17,560
We just had templates and controllers and a way

00:30:17,560 --> 00:30:18,510
to bind the two.

00:30:18,510 --> 00:30:20,760
But as we were building bigger and bigger applications

00:30:20,760 --> 00:30:23,270
with Google or outside, we realized

00:30:23,270 --> 00:30:24,860
that this was not going to scale,

00:30:24,860 --> 00:30:26,600
that we needed a better way to address

00:30:26,600 --> 00:30:28,450
composition and reusability.

00:30:28,450 --> 00:30:31,030
And component model was something that we needed.

00:30:31,030 --> 00:30:32,760
We implemented, and it was awesome.

00:30:32,760 --> 00:30:33,690
It took off.

00:30:33,690 --> 00:30:37,540
But now we had two ways of doing many of the same use cases.

00:30:37,540 --> 00:30:38,970
And there was confusion.

00:30:38,970 --> 00:30:41,400
In Angular 2, we are solving this problem

00:30:41,400 --> 00:30:43,940
but completely embracing the component model

00:30:43,940 --> 00:30:45,540
and making it the default.

00:30:45,540 --> 00:30:47,080
This will remove a lot of confusion

00:30:47,080 --> 00:30:48,340
that is just in Angular 1.

00:30:48,340 --> 00:30:50,010
This is just one of the examples.

00:30:50,010 --> 00:30:51,510
BRAD GREEN: So when we looked at all

00:30:51,510 --> 00:30:54,320
that we've learned from you over the last five years of Angular,

00:30:54,320 --> 00:30:57,180
it pointed to the fact that we could be much simpler

00:30:57,180 --> 00:30:59,802
and that we should go this way for Angular 2.

00:30:59,802 --> 00:31:01,760
IGOR MINAR: One of the first areas we looked at

00:31:01,760 --> 00:31:04,850
were the directives that we ship with Angular.

00:31:04,850 --> 00:31:06,730
There were many of them, and we realized

00:31:06,730 --> 00:31:11,600
that we could just reduce them to four generic templates

00:31:11,600 --> 00:31:12,950
and concepts.

00:31:12,950 --> 00:31:15,810
This means that the API service is much smaller for you

00:31:15,810 --> 00:31:16,680
to learn.

00:31:16,680 --> 00:31:21,020
And you will be able to get done the same stuff you

00:31:21,020 --> 00:31:22,710
were able to do with Angular 1.

00:31:22,710 --> 00:31:24,620
BRAD GREEN: So this generalization

00:31:24,620 --> 00:31:26,880
doesn't just make Angular easier to develop for,

00:31:26,880 --> 00:31:29,530
but it makes your applications more consistent.

00:31:29,530 --> 00:31:32,220
We mentioned the style guide for Angular 1.

00:31:32,220 --> 00:31:34,270
But unlike Angular 1, Angular 2 is

00:31:34,270 --> 00:31:36,569
going to have a style guide from the very start.

00:31:36,569 --> 00:31:38,610
IGOR MINAR: But we won't stop with a style guide.

00:31:38,610 --> 00:31:41,940
We're actually building a tool chain

00:31:41,940 --> 00:31:45,890
that will help you create and refactor the application

00:31:45,890 --> 00:31:46,560
as you build it.

00:31:46,560 --> 00:31:50,660


00:31:50,660 --> 00:31:53,710
We're not, however, starting from scratch here.

00:31:53,710 --> 00:31:56,900
We have these great partnerships with TypeScript and Ember

00:31:56,900 --> 00:31:59,302
CLI, which allows us to make a good progress.

00:31:59,302 --> 00:32:01,260
We don't have enough to show at this conference

00:32:01,260 --> 00:32:04,050
yet, but be assured that we're working on it.

00:32:04,050 --> 00:32:05,740
Not invented here is not something

00:32:05,740 --> 00:32:09,220
that is dear to our hearts.

00:32:09,220 --> 00:32:13,910
Brad, have you ever tried to include JQuery UI component

00:32:13,910 --> 00:32:16,550
in your Angular application and realized

00:32:16,550 --> 00:32:19,222
it wasn't working until you called $apply?

00:32:19,222 --> 00:32:20,430
BRAD GREEN: I always do that.

00:32:20,430 --> 00:32:22,590
IGOR MINAR: See, we solved this in Angular 2.

00:32:22,590 --> 00:32:25,020
We're using this nifty feature called zones

00:32:25,020 --> 00:32:27,600
that we learned about from Dart.

00:32:27,600 --> 00:32:29,660
And what the zones allows us to do

00:32:29,660 --> 00:32:33,140
is to hook into the browser event system

00:32:33,140 --> 00:32:35,820
and intercept those events that are interesting

00:32:35,820 --> 00:32:39,120
and trigger the synchronization between Angular

00:32:39,120 --> 00:32:40,484
and the rest of the platform.

00:32:40,484 --> 00:32:41,400
BRAD GREEN: Very cool.

00:32:41,400 --> 00:32:43,150
As a matter of fact, we talked about zones

00:32:43,150 --> 00:32:44,512
when we were here last year.

00:32:44,512 --> 00:32:46,720
And you can find the taught by Brian Ford on YouTube,

00:32:46,720 --> 00:32:48,720
if you want to learn more.

00:32:48,720 --> 00:32:52,490
So unidirectional data flow is at the heart

00:32:52,490 --> 00:32:55,440
of the new change detection strategy for Angular 2.

00:32:55,440 --> 00:32:58,600
And what this means for you is that you can easily

00:32:58,600 --> 00:33:01,670
predict what the performance characteristics will

00:33:01,670 --> 00:33:03,700
be of any change you make to the system.

00:33:03,700 --> 00:33:05,910
It'll also make it much clearer as

00:33:05,910 --> 00:33:08,650
to what's happening when you see side effects that you

00:33:08,650 --> 00:33:10,049
don't understand.

00:33:10,049 --> 00:33:12,090
IGOR MINAR: If you're wondering if you will still

00:33:12,090 --> 00:33:14,380
be able to use two-way data binding with forms

00:33:14,380 --> 00:33:17,110
using ng-model, rest assured that what

00:33:17,110 --> 00:33:19,710
we are building, even though under the hood

00:33:19,710 --> 00:33:22,480
works differently, for you as developers,

00:33:22,480 --> 00:33:27,710
it will still have declarative syntax that is familiar to you.

00:33:27,710 --> 00:33:29,450
BRAD GREEN: So maybe you're like me,

00:33:29,450 --> 00:33:31,957
and you've spent some time developing some Angular code,

00:33:31,957 --> 00:33:34,290
and you've made some hard to find typos somewhere, maybe

00:33:34,290 --> 00:33:37,240
in your template, or controller, or directive.

00:33:37,240 --> 00:33:40,410
In Angular 2, we've made the syntax change

00:33:40,410 --> 00:33:44,640
so that it can be statically analyzed by linters and IDEs.

00:33:44,640 --> 00:33:47,090
And this means that we can find the problems for you

00:33:47,090 --> 00:33:49,780
before you ever have to run it in a browser.

00:33:49,780 --> 00:33:52,340
IGOR MINAR: As our repertoire of use cases expanded,

00:33:52,340 --> 00:33:55,590
we realized that we need to add more features to existing APIs.

00:33:55,590 --> 00:33:58,440
For example, directives-- we added more features,

00:33:58,440 --> 00:34:02,560
but by doing so, we made the API much more complex.

00:34:02,560 --> 00:34:06,890
In Angular 2, we are building three special case

00:34:06,890 --> 00:34:09,139
APIs for different scenarios.

00:34:09,139 --> 00:34:11,659
So you don't need to wonder, like, which options to use.

00:34:11,659 --> 00:34:16,520
You'll be able to just go for either component or behavior

00:34:16,520 --> 00:34:17,400
directive.

00:34:17,400 --> 00:34:20,870
And you'll get all the default options out of the box.

00:34:20,870 --> 00:34:24,550


00:34:24,550 --> 00:34:27,389
We love it when web platform evolves.

00:34:27,389 --> 00:34:29,110
It makes our lives simpler.

00:34:29,110 --> 00:34:30,940
A lot of the simplicity in Angular 2

00:34:30,940 --> 00:34:34,639
is because we're able to take advantage of browser features

00:34:34,639 --> 00:34:38,420
that just recently were made available for us.

00:34:38,420 --> 00:34:42,389
A good example of this is the ECMAscript module system.

00:34:42,389 --> 00:34:46,030
With ES6, we now have a single module system

00:34:46,030 --> 00:34:46,980
that we can rely on.

00:34:46,980 --> 00:34:48,790
This was not something with that we had

00:34:48,790 --> 00:34:51,520
when we started with Angular 1.

00:34:51,520 --> 00:34:53,989
For browsers that don't support these features yet,

00:34:53,989 --> 00:34:56,199
we have transpilation or shimming

00:34:56,199 --> 00:34:59,102
that will just make it work and will bridge the gap.

00:34:59,102 --> 00:34:59,810
BRAD GREEN: Yeah.

00:34:59,810 --> 00:35:03,330
Similarly, when we wrote directives for Angular 1,

00:35:03,330 --> 00:35:05,650
there was no analog for this in the web spec.

00:35:05,650 --> 00:35:07,680
But today, with web components, we

00:35:07,680 --> 00:35:09,820
can take advantage of many of the features in there

00:35:09,820 --> 00:35:11,720
to do some of the work that we used to do.

00:35:11,720 --> 00:35:15,430
With features like the template element and the Shadow DOM,

00:35:15,430 --> 00:35:17,140
a lot of our code goes away.

00:35:17,140 --> 00:35:19,369
To sum it up, we're basing Angular

00:35:19,369 --> 00:35:20,910
onto these new standards that's going

00:35:20,910 --> 00:35:23,420
to make it much easier for us to interoperate

00:35:23,420 --> 00:35:25,575
with other libraries and preserve

00:35:25,575 --> 00:35:28,371
our longevity in the future.

00:35:28,371 --> 00:35:31,060
IGOR MINAR: When we started working on Angular 2,

00:35:31,060 --> 00:35:34,660
we made a decision to focus on performance from day one.

00:35:34,660 --> 00:35:37,740
When we were working on Angular 1.3, one of the things

00:35:37,740 --> 00:35:39,680
we realized was we didn't have a good way

00:35:39,680 --> 00:35:41,060
to measure performance.

00:35:41,060 --> 00:35:44,940
We also didn't understand how and where the time

00:35:44,940 --> 00:35:46,910
is spent in the browser.

00:35:46,910 --> 00:35:50,230
What we did is we built a suite of benchmarks.

00:35:50,230 --> 00:35:52,300
One of them we call Deep Tree.

00:35:52,300 --> 00:35:56,980
This benchmark allows us to replicate behavior

00:35:56,980 --> 00:36:01,250
similar to that we see in a complex Angular application.

00:36:01,250 --> 00:36:05,020
In order to understand how fast we can be,

00:36:05,020 --> 00:36:07,150
we built a baseline implementation

00:36:07,150 --> 00:36:08,360
of the benchmark.

00:36:08,360 --> 00:36:11,260
We used just pure JavaScript, no Angular,

00:36:11,260 --> 00:36:13,720
and all the performance tricks we could come up with.

00:36:13,720 --> 00:36:15,150
The code is super ugly.

00:36:15,150 --> 00:36:19,060
You would never want to write the application in this way.

00:36:19,060 --> 00:36:22,650
But it just tells us what is the theoretical maximum

00:36:22,650 --> 00:36:26,880
that any framework on the browser platform can achieve.

00:36:26,880 --> 00:36:32,187
To start with, let's look at how well Angular 1.3 is doing.

00:36:32,187 --> 00:36:33,770
BRAD GREEN: So then we started to look

00:36:33,770 --> 00:36:38,300
at what takes time in Angular, and where could we be faster?

00:36:38,300 --> 00:36:41,470
Misko came in one day with a crazy idea

00:36:41,470 --> 00:36:44,630
on how we could maybe make the code that we generate easier

00:36:44,630 --> 00:36:47,280
for virtual machines to inline.

00:36:47,280 --> 00:36:52,670
This technique we now have named ultra fast change detection

00:36:52,670 --> 00:36:55,930
is almost 10 times faster than what we can do on Angular 1.

00:36:55,930 --> 00:36:58,660
And it's all because of the new architecture for our code.

00:36:58,660 --> 00:37:01,355
This combined with several other changes

00:37:01,355 --> 00:37:03,730
that we are able to make because of our new architecture,

00:37:03,730 --> 00:37:07,940
we become dramatically faster for Angular 2.

00:37:07,940 --> 00:37:10,265
[APPLAUSE]

00:37:10,265 --> 00:37:12,962


00:37:12,962 --> 00:37:14,670
IGOR MINAR: Another the performance trick

00:37:14,670 --> 00:37:16,530
that this new architecture allowed us to use

00:37:16,530 --> 00:37:18,600
was something that we knew about for a long time,

00:37:18,600 --> 00:37:20,520
but we just couldn't use in Angular 1.

00:37:20,520 --> 00:37:23,420
In Angular 1, whenever we destroy a view,

00:37:23,420 --> 00:37:26,320
we have to throw away all the data structures and DOM that

00:37:26,320 --> 00:37:28,110
was created for that view.

00:37:28,110 --> 00:37:31,140
In Angular 2, we know when it's safe to reuse these data

00:37:31,140 --> 00:37:32,590
structures in DOM.

00:37:32,590 --> 00:37:37,420
And this makes rendering similar components much faster.

00:37:37,420 --> 00:37:41,890
The impact of this is the most visible in two use cases,

00:37:41,890 --> 00:37:44,710
in the infinite scrolling and in back and forth

00:37:44,710 --> 00:37:46,110
navigation in the application.

00:37:46,110 --> 00:37:47,610
BRAD GREEN: So the way you can think

00:37:47,610 --> 00:37:51,010
about this is the yellow bar for Angular 2 out of the box

00:37:51,010 --> 00:37:53,030
is first time rendering speed.

00:37:53,030 --> 00:37:55,160
Angular 2 with view cache is the behavior

00:37:55,160 --> 00:37:57,560
you get when users revisit things that have already

00:37:57,560 --> 00:37:59,090
been rendered for you.

00:37:59,090 --> 00:38:01,970
[APPLAUSE]

00:38:01,970 --> 00:38:06,290


00:38:06,290 --> 00:38:08,124
But there's more.

00:38:08,124 --> 00:38:09,540
IGOR MINAR: The last performance--

00:38:09,540 --> 00:38:10,498
BRAD GREEN: Wait, wait.

00:38:10,498 --> 00:38:11,420
No, there's even more.

00:38:11,420 --> 00:38:13,430
[LAUGHTER]

00:38:13,430 --> 00:38:16,770
So speed is not the only thing that comes into play.

00:38:16,770 --> 00:38:19,940
When your memory is limited on Desktop,

00:38:19,940 --> 00:38:22,600
or in particular mobile devices, it's really critical

00:38:22,600 --> 00:38:25,354
that you become conservative with how much memory you use.

00:38:25,354 --> 00:38:27,020
Because when the garbage collector runs,

00:38:27,020 --> 00:38:28,672
it can slow down your app.

00:38:28,672 --> 00:38:31,130
It turns out that these changes we made are not only faster

00:38:31,130 --> 00:38:34,040
but they're much more memory efficient.

00:38:34,040 --> 00:38:35,266
IGOR MINAR: Can I go now?

00:38:35,266 --> 00:38:36,390
BRAD GREEN: Now you can go.

00:38:36,390 --> 00:38:38,187
[LAUGHTER]

00:38:38,187 --> 00:38:39,770
IGOR MINAR: The last performance trick

00:38:39,770 --> 00:38:42,810
we want to show to you is how Angular 2 can take advantage

00:38:42,810 --> 00:38:44,695
of immutable data structures.

00:38:44,695 --> 00:38:47,000
We already mentioned that in Angular 2

00:38:47,000 --> 00:38:48,831
we have a new change diction system.

00:38:48,831 --> 00:38:51,080
And this new system is much more flexible than the one

00:38:51,080 --> 00:38:52,700
we have in Angular 1.

00:38:52,700 --> 00:38:55,750
What it allows us to do is to treat different objects

00:38:55,750 --> 00:38:56,540
differently.

00:38:56,540 --> 00:38:58,680
So when we come across an object that we recognize

00:38:58,680 --> 00:39:00,459
as an immutable data structure, we

00:39:00,459 --> 00:39:02,750
know that we don't need to do check it because it's not

00:39:02,750 --> 00:39:03,730
going to change.

00:39:03,730 --> 00:39:06,330
This can have significant improvement on the performance

00:39:06,330 --> 00:39:07,740
of our application.

00:39:07,740 --> 00:39:10,240
BRAD GREEN: So to show it off, we built this other benchmark

00:39:10,240 --> 00:39:13,170
to test virtual table scrolling speed.

00:39:13,170 --> 00:39:15,310
We can see in Angular 1 that as we increase

00:39:15,310 --> 00:39:17,443
the number of tables that we're trying to scroll,

00:39:17,443 --> 00:39:20,330
the performance slows down.

00:39:20,330 --> 00:39:22,597
In Angular 2, it's dramatically better.

00:39:22,597 --> 00:39:24,180
But it's still, you can see, that it's

00:39:24,180 --> 00:39:26,997
linked to the total number of elements that we have to watch.

00:39:26,997 --> 00:39:28,580
When we use immutable data structures,

00:39:28,580 --> 00:39:31,430
however, you can see that we're totally

00:39:31,430 --> 00:39:35,080
decoupled from the number of elements that we need to watch.

00:39:35,080 --> 00:39:37,330
We've gone from an order n algorithm

00:39:37,330 --> 00:39:39,426
to an order one algorithm.

00:39:39,426 --> 00:39:43,773
[APPLAUSE]

00:39:43,773 --> 00:39:48,120


00:39:48,120 --> 00:39:54,959
IGOR MINAR: So to summarize, to go back

00:39:54,959 --> 00:39:57,250
to the original question we asked ourselves, why are we

00:39:57,250 --> 00:39:59,700
here, Why are we doing Angular?

00:39:59,700 --> 00:40:01,530
The answer is actually quite simple.

00:40:01,530 --> 00:40:05,800
We love Angular, and we learned a lot while building it.

00:40:05,800 --> 00:40:11,930
But we also know that Angular can be significantly simpler.

00:40:11,930 --> 00:40:14,900
It can be significantly more consistent.

00:40:14,900 --> 00:40:18,360
It can be more flexible, more productive, and much,

00:40:18,360 --> 00:40:19,490
much faster.

00:40:19,490 --> 00:40:21,330
While we are committed to Angular 1

00:40:21,330 --> 00:40:24,630
and evolving it further, we also know

00:40:24,630 --> 00:40:26,770
that it will be irresponsible from us

00:40:26,770 --> 00:40:31,496
to not lead the community in the direction towards Angular 2.

00:40:31,496 --> 00:40:32,870
BRAD GREEN: OK, one more question

00:40:32,870 --> 00:40:33,828
might be on your minds.

00:40:33,828 --> 00:40:36,270


00:40:36,270 --> 00:40:40,080
You know that I love answering this question.

00:40:40,080 --> 00:40:41,820
I hate predicting the future, but you

00:40:41,820 --> 00:40:43,800
know what we can do is look at what we've

00:40:43,800 --> 00:40:46,380
done to date and our velocity.

00:40:46,380 --> 00:40:48,900
And so back in February, we announced

00:40:48,900 --> 00:40:50,910
the alpha of Angular 2.

00:40:50,910 --> 00:40:54,580
And you can find out about it on angular.io.

00:40:54,580 --> 00:40:59,545
Today, we're shipping a preview of the Angular 2 website.

00:40:59,545 --> 00:41:01,420
And while I don't like to predict the future,

00:41:01,420 --> 00:41:04,280
I will let you in on something that's going on at Google.

00:41:04,280 --> 00:41:07,740
This May, we're planning on migrating the first application

00:41:07,740 --> 00:41:09,400
from Angular 1 to Angular 2.

00:41:09,400 --> 00:41:10,676
And these are big apps.

00:41:10,676 --> 00:41:12,050
We're going to take the learnings

00:41:12,050 --> 00:41:14,008
from that and from feedback from all of you who

00:41:14,008 --> 00:41:16,700
use Angular 2 to figure out when we're done

00:41:16,700 --> 00:41:19,398
and we can call it ready.

00:41:19,398 --> 00:41:22,730
[APPLAUSE]

00:41:22,730 --> 00:41:26,550


00:41:26,550 --> 00:41:29,360
IGOR MINAR: Now that we answered the simple question,

00:41:29,360 --> 00:41:33,020
why are we here, I think it's only fair to ask you,

00:41:33,020 --> 00:41:35,050
why are you here?

00:41:35,050 --> 00:41:36,710
Think about it.

00:41:36,710 --> 00:41:40,070
And if you are here in person, come and tell us.

00:41:40,070 --> 00:41:44,280
If you're joining us online, you can use Twitter or Google+

00:41:44,280 --> 00:41:46,400
and post to us using hashtag #whyruhere.

00:41:46,400 --> 00:41:50,420


00:41:50,420 --> 00:41:51,450
BRAD GREEN: All right.

00:41:51,450 --> 00:41:53,450
Everyone, thanks so much.

00:41:53,450 --> 00:41:56,190
You can find these slides at this link on the screen.

00:41:56,190 --> 00:42:00,350
We've also started a Reddit Ask Me Anything session.

00:42:00,350 --> 00:42:02,900
We're going to be taking questions now and tomorrow.

00:42:02,900 --> 00:42:04,358
And then we're going to answer them

00:42:04,358 --> 00:42:07,850
live at the last session at 4:00 PM tomorrow afternoon.

00:42:07,850 --> 00:42:10,210
For any questions we don't get to in the live session,

00:42:10,210 --> 00:42:13,000
we will answer them in the next week on Reddit.

00:42:13,000 --> 00:42:13,700
Thanks so much.

00:42:13,700 --> 00:42:15,140
Let's have a great conference.

00:42:15,140 --> 00:42:16,340
IGOR MINAR: Thank you!

00:42:16,340 --> 00:42:19,690
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=QHulaj5ZxbI


