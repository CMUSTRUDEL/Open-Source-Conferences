Title: Reactive all the Things - Ben Lesh and Martin Gontovnikas
Publication date: 2015-03-06
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:01,140


00:00:01,140 --> 00:00:02,700
MARTIN GONTOVNIKAS: Hello, everyone!

00:00:02,700 --> 00:00:04,307
How are you guys?

00:00:04,307 --> 00:00:05,800
[CHEERING]

00:00:05,800 --> 00:00:06,560
Great!

00:00:06,560 --> 00:00:07,990
That's the way to do it.

00:00:07,990 --> 00:00:11,680
So we're really, really glad with Ben to be here.

00:00:11,680 --> 00:00:14,680
We're going to be talking about Reactive All the Things.

00:00:14,680 --> 00:00:19,030
So we're going to be talking about reactive programming,

00:00:19,030 --> 00:00:23,000
observables, streams, and lots of things like that.

00:00:23,000 --> 00:00:25,230
Are you ready to learn about reactive programming?

00:00:25,230 --> 00:00:26,970
[CHEERING]

00:00:26,970 --> 00:00:27,710
Awesome.

00:00:27,710 --> 00:00:30,500
So just before starting, hands up

00:00:30,500 --> 00:00:34,980
who has heard about observables before?

00:00:34,980 --> 00:00:35,940
OK.

00:00:35,940 --> 00:00:40,390
Hands up, who has used observables before?

00:00:40,390 --> 00:00:41,320
Good.

00:00:41,320 --> 00:00:44,660
There's actually a lot of people using it, which is really nice.

00:00:44,660 --> 00:00:47,030
So before starting with the talk,

00:00:47,030 --> 00:00:49,680
let me introduce ourselves.

00:00:49,680 --> 00:00:52,010
But before that, there's a warning.

00:00:52,010 --> 00:00:55,420
So we tried to cut down some content for the talk,

00:00:55,420 --> 00:00:57,950
but actually, it ended up being longer.

00:00:57,950 --> 00:01:00,390
So it's going to go over time.

00:01:00,390 --> 00:01:03,610
But the good thing is that we have lunch then, so you just

00:01:03,610 --> 00:01:05,209
lose some time for lunch.

00:01:05,209 --> 00:01:07,420
We didn't ask Dave and Aaron if we could do it,

00:01:07,420 --> 00:01:09,170
because maybe they would say no.

00:01:09,170 --> 00:01:11,220
So this way, they can't say no.

00:01:11,220 --> 00:01:13,710
This is the best way to do it.

00:01:13,710 --> 00:01:16,210
So the only thing that is here is that you'll

00:01:16,210 --> 00:01:19,230
have to wait to be like this.

00:01:19,230 --> 00:01:22,520
Isn't she tasty, right?

00:01:22,520 --> 00:01:25,770
So now, let me introduce ourselves.

00:01:25,770 --> 00:01:29,960
My name is Martin Gontovnikas, but we are in the tech world,

00:01:29,960 --> 00:01:33,980
so nobody knows each other's name, I'm mgonto.

00:01:33,980 --> 00:01:36,930
You come follow me on Twitter if you want to increase my ego.

00:01:36,930 --> 00:01:39,940
It would be greatly appreciated.

00:01:39,940 --> 00:01:43,320
I'm a software developer from Buenos Aires, Argentina.

00:01:43,320 --> 00:01:46,270
You can notice from my accent that you might not understand

00:01:46,270 --> 00:01:49,140
some of the words that I say.

00:01:49,140 --> 00:01:51,170
And I work at Auth0.

00:01:51,170 --> 00:01:53,900
Auth0 is a SaaS that helps you with authentication

00:01:53,900 --> 00:01:55,360
authorization.

00:01:55,360 --> 00:01:57,750
You basically first pick an SDK.

00:01:57,750 --> 00:02:01,900
We have an Angular SDK, which is awesome, because I built it.

00:02:01,900 --> 00:02:05,400
And once you pick that, you just hook it you your app or API,

00:02:05,400 --> 00:02:08,850
and like this, you get it working.

00:02:08,850 --> 00:02:13,080
So I used to be coding JavaScript all day long.

00:02:13,080 --> 00:02:14,060
So this was me.

00:02:14,060 --> 00:02:15,840
I was like a machine.

00:02:15,840 --> 00:02:17,660
And probably, because I was actually

00:02:17,660 --> 00:02:19,250
hammering the keyboard, I now have

00:02:19,250 --> 00:02:22,540
to rewrite the whole Restangular because the code isn't

00:02:22,540 --> 00:02:23,060
that good.

00:02:23,060 --> 00:02:24,700
But don't look at it.

00:02:24,700 --> 00:02:28,040
Just use the API, which is nice.

00:02:28,040 --> 00:02:32,080
But now, I work as a developer advocate, not with Al Pacino,

00:02:32,080 --> 00:02:35,190
but, well, we do what we can, right?

00:02:35,190 --> 00:02:37,210
Let me now introduce you to-- oh, wait.

00:02:37,210 --> 00:02:39,250
One more thing.

00:02:39,250 --> 00:02:42,800
If you guys want to try out Auth0, you can go to auth0.com

00:02:42,800 --> 00:02:45,150
and just sign up for a free account.

00:02:45,150 --> 00:02:49,524
Now let me introduce you to my friend, Ben.

00:02:49,524 --> 00:02:50,757
BEN LESH: Hi, everybody.

00:02:50,757 --> 00:02:51,590
My name is Ben Lesh.

00:02:51,590 --> 00:02:54,860
I'm the least animated of the two of us.

00:02:54,860 --> 00:02:58,100
This is my Twitter handle.

00:02:58,100 --> 00:03:00,350
Please, if you have questions after this, which you're

00:03:00,350 --> 00:03:03,260
bound to, because there's no way I can go over all of RxJS

00:03:03,260 --> 00:03:07,574
in this talk, get a hold of me there, and ask questions.

00:03:07,574 --> 00:03:08,490
Tell me how I'm wrong.

00:03:08,490 --> 00:03:11,050
I like that even better because then I learn something.

00:03:11,050 --> 00:03:12,752
But there I am.

00:03:12,752 --> 00:03:17,150
I am a Senior UI Engineer at Netflix in the Edge Tools

00:03:17,150 --> 00:03:19,525
and Insights Team.

00:03:19,525 --> 00:03:20,900
I want to tell you about Netflix.

00:03:20,900 --> 00:03:23,140
They're not putting me up to this, actually.

00:03:23,140 --> 00:03:24,899
Netflix is a great place.

00:03:24,899 --> 00:03:26,940
It has been a life changing place for me to work.

00:03:26,940 --> 00:03:28,210
They have a great culture.

00:03:28,210 --> 00:03:29,970
And I know that every time someone says,

00:03:29,970 --> 00:03:34,179
oh, yeah, my company has a great culture, I just go, OK, yeah.

00:03:34,179 --> 00:03:34,970
But they really do.

00:03:34,970 --> 00:03:35,595
They really do.

00:03:35,595 --> 00:03:39,780
So I would recommend going and checking out jobs.netflix.com.

00:03:39,780 --> 00:03:42,380
They approached me because of my Angular expertise.

00:03:42,380 --> 00:03:47,550
So Angular is what landed me the job at Netflix.

00:03:47,550 --> 00:03:48,050
All right.

00:03:48,050 --> 00:03:51,220
Let's talk about Reactive Frontend.

00:03:51,220 --> 00:03:53,480
Functional reactive programming-- so this

00:03:53,480 --> 00:03:55,790
is not a talk about function reactive programming.

00:03:55,790 --> 00:03:58,210
If you say functional reactive programming too many times,

00:03:58,210 --> 00:04:02,130
which I just did, a Haskeller will jump out and attack you.

00:04:02,130 --> 00:04:05,350
So this is a talk about functional programming

00:04:05,350 --> 00:04:07,034
and reactive programming, but just

00:04:07,034 --> 00:04:08,700
combining those two does not necessarily

00:04:08,700 --> 00:04:10,720
make functional reactive programming.

00:04:10,720 --> 00:04:15,470
So the first question some might ask is, why go functional?

00:04:15,470 --> 00:04:17,800
A lot of us are very comfortable with imperative code.

00:04:17,800 --> 00:04:20,630
So here's a little imperative code example

00:04:20,630 --> 00:04:23,910
where I have this function that takes an array of numbers,

00:04:23,910 --> 00:04:25,660
and it finds all the odd numbers,

00:04:25,660 --> 00:04:28,492
and it adds exclamation points to them.

00:04:28,492 --> 00:04:29,950
It's just looping over the numbers.

00:04:29,950 --> 00:04:33,110
It's got this result that it's mutating in each foreach loop,

00:04:33,110 --> 00:04:35,632
and it's returning it.

00:04:35,632 --> 00:04:38,090
This is a pretty safe thing to do in JavaScript these days.

00:04:38,090 --> 00:04:40,040
JavaScript is single threaded world,

00:04:40,040 --> 00:04:44,160
and I know exactly how this is going to behave.

00:04:44,160 --> 00:04:48,130
But JavaScript as you know it is going to change.

00:04:48,130 --> 00:04:50,920
I don't know anything special, but one thing I do know

00:04:50,920 --> 00:04:52,560
is cores aren't getting much faster.

00:04:52,560 --> 00:04:56,020
So there was a time where, if your JavaScript app was slow,

00:04:56,020 --> 00:04:58,906
you could wait a year, and it was twice as fast.

00:04:58,906 --> 00:05:01,290
[LAUGHTER]

00:05:01,290 --> 00:05:02,880
Those days are over.

00:05:02,880 --> 00:05:07,130
So what's going to happen?

00:05:07,130 --> 00:05:09,480
Real concurrency is coming to JavaScript.

00:05:09,480 --> 00:05:11,320
Now, I don't know when.

00:05:11,320 --> 00:05:13,850
It is going to happen, rest assured.

00:05:13,850 --> 00:05:16,660
Maybe in my lifetime, maybe not.

00:05:16,660 --> 00:05:21,020
But yeah, the last time anyone said this, it was Jafar Husain,

00:05:21,020 --> 00:05:25,110
and the whole room looked like these guys when he said it.

00:05:25,110 --> 00:05:26,000
But not yet.

00:05:26,000 --> 00:05:27,480
So you're safe for now.

00:05:27,480 --> 00:05:29,600
But a good thing to do to prepare for this

00:05:29,600 --> 00:05:31,090
is to learn functional programming.

00:05:31,090 --> 00:05:33,510
So functional programming has goals

00:05:33,510 --> 00:05:35,690
that align with parallelism.

00:05:35,690 --> 00:05:38,492
AUDIENCE: Ha!

00:05:38,492 --> 00:05:39,825
BEN LESH: Ha ha, someone got it.

00:05:39,825 --> 00:05:42,420


00:05:42,420 --> 00:05:45,450
The goals are things like immutable state and no side

00:05:45,450 --> 00:05:48,929
effects-- or, more importantly, controlling your side effects.

00:05:48,929 --> 00:05:50,720
And that makes it easier to spread the work

00:05:50,720 --> 00:05:53,030
across multiple threads.

00:05:53,030 --> 00:05:54,769
So you can prepare-- you can get started

00:05:54,769 --> 00:05:56,310
with some functional programming now.

00:05:56,310 --> 00:05:59,792
You can use things like array map, filter, and reduce.

00:05:59,792 --> 00:06:01,750
I think we're all probably familiar with those.

00:06:01,750 --> 00:06:03,930
But this is an example-- it's the exact same example

00:06:03,930 --> 00:06:05,600
I showed you earlier.

00:06:05,600 --> 00:06:09,790
But the difference being that, now,

00:06:09,790 --> 00:06:12,150
instead of having this result array that I'm

00:06:12,150 --> 00:06:15,430
mutating in my foreach, I'm actually

00:06:15,430 --> 00:06:17,420
doing it with some immutable state where

00:06:17,420 --> 00:06:19,068
it's creating its own array each time,

00:06:19,068 --> 00:06:20,776
and it's filtering out the odds, and then

00:06:20,776 --> 00:06:25,120
it's mapping them to this with the exclamation points.

00:06:25,120 --> 00:06:27,270
So that gets you started.

00:06:27,270 --> 00:06:30,160
But working on my app at Netflix, I ran into a problem

00:06:30,160 --> 00:06:32,370
with this approach.

00:06:32,370 --> 00:06:34,740
So the app I work on at Netflix is called Argus.

00:06:34,740 --> 00:06:37,270
And Argus is a real time dashboard

00:06:37,270 --> 00:06:38,750
for the Netflix cloud.

00:06:38,750 --> 00:06:41,550
So it's got dozens of graphs in an individual view.

00:06:41,550 --> 00:06:44,540
We're using a WebSocket and multiplexing data over it.

00:06:44,540 --> 00:06:48,340
And if you could imagine, like, more than a third

00:06:48,340 --> 00:06:51,370
of North America's bandwidth and all of these events

00:06:51,370 --> 00:06:53,220
triggered by all of the users that we have,

00:06:53,220 --> 00:06:56,270
and all the services we have being streamed into graphs,

00:06:56,270 --> 00:06:57,630
it's kind of busy.

00:06:57,630 --> 00:06:59,690
So here's what it looks like.

00:06:59,690 --> 00:07:02,040
You'll see that there's numbers blurred out.

00:07:02,040 --> 00:07:04,724
It's because I can't tell you how many requests

00:07:04,724 --> 00:07:05,640
or whatever we've got.

00:07:05,640 --> 00:07:09,190
So this is-- is this actually playing?

00:07:09,190 --> 00:07:11,420
It's not playing.

00:07:11,420 --> 00:07:13,530
MARTIN GONTOVNIKAS: [SINGING]

00:07:13,530 --> 00:07:16,170
BEN LESH: Well, nonetheless, this

00:07:16,170 --> 00:07:18,930
was an MP4 that actually was showing us,

00:07:18,930 --> 00:07:23,850
as the mouse moves around, it will actually have

00:07:23,850 --> 00:07:25,060
some rich user interactions.

00:07:25,060 --> 00:07:25,810
It'll show hovers.

00:07:25,810 --> 00:07:27,810
It'll change numbers down here based on the data

00:07:27,810 --> 00:07:29,210
that you're over top of.

00:07:29,210 --> 00:07:30,480
And there we go.

00:07:30,480 --> 00:07:31,780
Look at that.

00:07:31,780 --> 00:07:32,280
See?

00:07:32,280 --> 00:07:33,730
Netflix can do video.

00:07:33,730 --> 00:07:35,480
MARTIN GONTOVNIKAS: I'm just a technician.

00:07:35,480 --> 00:07:38,044
[LAUGHTER]

00:07:38,044 --> 00:07:40,457


00:07:40,457 --> 00:07:41,290
BEN LESH: All right.

00:07:41,290 --> 00:07:41,789
So yeah.

00:07:41,789 --> 00:07:44,134
So when I change the time, it actually

00:07:44,134 --> 00:07:46,300
changes the actual underlying data stream and so on.

00:07:46,300 --> 00:07:47,133
So this is the goal.

00:07:47,133 --> 00:07:48,710
This is where we want it to be.

00:07:48,710 --> 00:07:52,520
So we came up with this proof of concept.

00:07:52,520 --> 00:07:55,040
Well, full disclosure, it's an Ember app.

00:07:55,040 --> 00:07:56,790
So they hired me for my Angular expertise.

00:07:56,790 --> 00:07:59,937
It's an Ember app.

00:07:59,937 --> 00:08:01,020
People know this about me.

00:08:01,020 --> 00:08:04,570
It would have shown up on Twitter had I not mentioned it.

00:08:04,570 --> 00:08:08,360
So the first big demo, we were feeling really good.

00:08:08,360 --> 00:08:11,820
So I got all of my crazy amount of arrays coming in, mapped out

00:08:11,820 --> 00:08:14,870
to what I could put into the SVG to create the graphs,

00:08:14,870 --> 00:08:17,450
and I had all my real time interactions

00:08:17,450 --> 00:08:20,100
and these great things all ready, and we're ready to go.

00:08:20,100 --> 00:08:23,480
And we're going against a set of test data

00:08:23,480 --> 00:08:25,466
that was-- it was a lot of data, and so we

00:08:25,466 --> 00:08:27,090
were pretty confident that it was going

00:08:27,090 --> 00:08:28,810
to be the same as production.

00:08:28,810 --> 00:08:31,750
So on demo day, we did the test data, and then on demo day,

00:08:31,750 --> 00:08:36,450
we decided to switch over to our production data.

00:08:36,450 --> 00:08:37,500
And it was like this.

00:08:37,500 --> 00:08:39,290
And then it was like that.

00:08:39,290 --> 00:08:42,559


00:08:42,559 --> 00:08:43,059
So yeah.

00:08:43,059 --> 00:08:46,580
And then my team members flew away.

00:08:46,580 --> 00:08:47,300
Yeah.

00:08:47,300 --> 00:08:48,450
So what was the problem?

00:08:48,450 --> 00:08:50,940
The problem was too much array map, filter, reduce.

00:08:50,940 --> 00:08:54,032
And what happens is, at every step

00:08:54,032 --> 00:08:55,740
of your filter or your map, it's actually

00:08:55,740 --> 00:08:57,550
creating a new array in memory.

00:08:57,550 --> 00:08:59,330
It's iterating over an entire array,

00:08:59,330 --> 00:09:01,427
and then it's going to do it again for the filter

00:09:01,427 --> 00:09:02,510
and again for another map.

00:09:02,510 --> 00:09:03,480
And this is all over the place.

00:09:03,480 --> 00:09:04,563
We have arrays everywhere.

00:09:04,563 --> 00:09:06,710
So what was happening is the Garbage Collector

00:09:06,710 --> 00:09:08,410
had to clean up all of the arrays

00:09:08,410 --> 00:09:09,820
that we were creating a memory.

00:09:09,820 --> 00:09:11,278
I have all these extra cycles where

00:09:11,278 --> 00:09:15,410
I'm stepping through all of the arrays that it's creating.

00:09:15,410 --> 00:09:17,360
So what do I need?

00:09:17,360 --> 00:09:18,930
I need stream processing.

00:09:18,930 --> 00:09:20,850
So the idea behind stream processing

00:09:20,850 --> 00:09:23,820
is to take an array or a collection of things,

00:09:23,820 --> 00:09:25,490
and you process them one at a time

00:09:25,490 --> 00:09:27,573
through every transformation you would normally be

00:09:27,573 --> 00:09:29,050
doing with your filter and map.

00:09:29,050 --> 00:09:32,320
Well, RxJS observables enabled this.

00:09:32,320 --> 00:09:33,320
So this is my gateway.

00:09:33,320 --> 00:09:35,550
This is my gateway drug into observables

00:09:35,550 --> 00:09:38,860
is I decided I need this feature.

00:09:38,860 --> 00:09:40,420
And the nice thing is, when you use

00:09:40,420 --> 00:09:43,140
this feature, array, filter, map actually just

00:09:43,140 --> 00:09:45,200
becomes observable, filter, map.

00:09:45,200 --> 00:09:47,340
So the semantics are very much the same,

00:09:47,340 --> 00:09:50,350
but then all of a sudden, all of those additional arrays

00:09:50,350 --> 00:09:52,430
and garbage collection I was doing are gone,

00:09:52,430 --> 00:09:56,055
and performance was where we wanted it.

00:09:56,055 --> 00:09:58,430
So I started asking myself, what else can observables do?

00:09:58,430 --> 00:10:01,600
This is a pretty cool library.

00:10:01,600 --> 00:10:05,320
Observables are a representation any collection of values

00:10:05,320 --> 00:10:07,140
over any amount of time.

00:10:07,140 --> 00:10:08,882
So think about that for a second.

00:10:08,882 --> 00:10:11,090
It could be, like, my array is a collection of values

00:10:11,090 --> 00:10:14,390
over a relatively instant amount of time, right?

00:10:14,390 --> 00:10:17,890
But it could be mouse interactions or what have you.

00:10:17,890 --> 00:10:19,910
Observables can be merged, concatenated,

00:10:19,910 --> 00:10:22,064
and zipped together like any other collection.

00:10:22,064 --> 00:10:23,980
So if you're familiar with things like Lo-Dash

00:10:23,980 --> 00:10:26,110
or Underscore where you have arrays,

00:10:26,110 --> 00:10:27,760
and you're zipping them, and you're

00:10:27,760 --> 00:10:29,960
doing kind of elegant and fancy things

00:10:29,960 --> 00:10:32,040
with functional programming and arrays,

00:10:32,040 --> 00:10:35,330
observables have the same sort of features.

00:10:35,330 --> 00:10:39,780
So observables are also a pattern to start a data stream,

00:10:39,780 --> 00:10:44,060
emit zero to infinite values, and then tear down

00:10:44,060 --> 00:10:44,850
that data stream.

00:10:44,850 --> 00:10:46,570
So they're actually lazy.

00:10:46,570 --> 00:10:49,800
They don't start the data stream until you foreach over them

00:10:49,800 --> 00:10:51,290
or subscribe to them, and then when

00:10:51,290 --> 00:10:53,190
you dispose of that subscription,

00:10:53,190 --> 00:10:54,110
it'll tear it down.

00:10:54,110 --> 00:10:56,740
So things like tearing down event listeners

00:10:56,740 --> 00:11:01,770
or tearing down a web socket connection or setting it up.

00:11:01,770 --> 00:11:03,010
So what are data streams?

00:11:03,010 --> 00:11:04,050
I already mentioned some of this.

00:11:04,050 --> 00:11:05,341
They could be an array of data.

00:11:05,341 --> 00:11:08,070
It could be mouse and keyboard events, DOM events,

00:11:08,070 --> 00:11:12,500
network I/O, animation, speech recognition, joystick input,

00:11:12,500 --> 00:11:13,800
really anything.

00:11:13,800 --> 00:11:17,050
Anything at all that you could start listening to,

00:11:17,050 --> 00:11:20,470
get nothing or something from, and then stop listening to

00:11:20,470 --> 00:11:23,650
could be represented as an observable.

00:11:23,650 --> 00:11:25,950
So meanwhile back at Netflix, RxJS

00:11:25,950 --> 00:11:28,120
is about solve another problem for me,

00:11:28,120 --> 00:11:30,430
and that problem is that sockets die.

00:11:30,430 --> 00:11:34,772
So I have this multiplex socket that I'm using for our app.

00:11:34,772 --> 00:11:36,730
And the problem was, people would close the lid

00:11:36,730 --> 00:11:39,220
on their laptop, they would walk between buildings

00:11:39,220 --> 00:11:42,270
and lose Wi-Fi connection or whatever,

00:11:42,270 --> 00:11:45,740
or the server would disconnect, and if they have the app up,

00:11:45,740 --> 00:11:47,220
it just stops working.

00:11:47,220 --> 00:11:51,350
So multiplexed socket reconnection

00:11:51,350 --> 00:11:52,330
is actually difficult.

00:11:52,330 --> 00:11:54,110
I need to reconnect this stuff.

00:11:54,110 --> 00:11:55,760
But in order to reconnect, I actually

00:11:55,760 --> 00:11:58,470
need to know, what am I already subscribed to?

00:11:58,470 --> 00:12:00,040
I have to keep some state on that

00:12:00,040 --> 00:12:03,695
now and then send those subscriptions

00:12:03,695 --> 00:12:05,820
back over the socket after I reconnect the sockets.

00:12:05,820 --> 00:12:07,330
So it's painful.

00:12:07,330 --> 00:12:09,390
It's very painful.

00:12:09,390 --> 00:12:13,110
So I can solve this with observables, actually

00:12:13,110 --> 00:12:14,507
two observables.

00:12:14,507 --> 00:12:16,590
The first one I worked on was a socket observable,

00:12:16,590 --> 00:12:19,060
so a socket observable is very simple.

00:12:19,060 --> 00:12:22,540
When you subscribe to it, it creates the socket connection.

00:12:22,540 --> 00:12:25,730
Then it emits all messages that arrive on that socket.

00:12:25,730 --> 00:12:28,800
When it receives an error or a close event

00:12:28,800 --> 00:12:31,540
that it's a close in error, it'll emit an error,

00:12:31,540 --> 00:12:35,050
and it'll also disconnect the socket on disposal.

00:12:35,050 --> 00:12:39,030
From there, I wrap that in another observable that it's

00:12:39,030 --> 00:12:41,560
set uo-- so remember I said there's a set up,

00:12:41,560 --> 00:12:43,960
there's an event, and there's a tear down.

00:12:43,960 --> 00:12:47,310
This one's setup says, OK, well, I'm wrapping the socket,

00:12:47,310 --> 00:12:49,130
so I need to subscribe to the socket,

00:12:49,130 --> 00:12:53,810
and I need to send over the socket a subscription message.

00:12:53,810 --> 00:12:56,260
Then I'm going to filter out all the messages that

00:12:56,260 --> 00:13:00,032
come from this socket to be just the messages that I care about.

00:13:00,032 --> 00:13:01,490
And then when you tear it down, I'm

00:13:01,490 --> 00:13:05,160
going to send the unsubscribe message back.

00:13:05,160 --> 00:13:07,490
Another added bonus to this was my socket

00:13:07,490 --> 00:13:09,124
is what we call published ref counted.

00:13:09,124 --> 00:13:10,040
There's a ref counted.

00:13:10,040 --> 00:13:13,920
So when all of my multiplex data observables are disposed of,

00:13:13,920 --> 00:13:15,640
my socket actually closes automatically.

00:13:15,640 --> 00:13:18,960
So the code looks a little bit like.

00:13:18,960 --> 00:13:20,200
This is pseudo code.

00:13:20,200 --> 00:13:22,600
But the nice thing about observables

00:13:22,600 --> 00:13:25,510
is since they embody the setup of whatever's getting your data

00:13:25,510 --> 00:13:27,120
stream, they can be retried.

00:13:27,120 --> 00:13:29,990
There's a simple operator you see here at the bottom that's

00:13:29,990 --> 00:13:30,840
just retry.

00:13:30,840 --> 00:13:32,956
There's also a retry when, so you

00:13:32,956 --> 00:13:34,330
can get a little bit more elegant

00:13:34,330 --> 00:13:36,400
with how you retry if you want to exponential step back

00:13:36,400 --> 00:13:37,440
or something like that.

00:13:37,440 --> 00:13:39,590
But it will be like, oh, I erred,

00:13:39,590 --> 00:13:42,700
so I need to go and do the whole thing over again.

00:13:42,700 --> 00:13:45,760
So that means that now I'm automatically setting up

00:13:45,760 --> 00:13:50,050
my WebSockets connection, sending all the subscriptions

00:13:50,050 --> 00:13:52,330
to the socket server, and getting my data

00:13:52,330 --> 00:13:55,720
streams as soon as the network comes back up.

00:13:55,720 --> 00:13:59,200
So fair warning about RxJS.

00:13:59,200 --> 00:14:02,050
And this is one thing that's true-- never trust a developer

00:14:02,050 --> 00:14:04,930
with nothing bad to say about a framework or something

00:14:04,930 --> 00:14:08,050
that they love, because they're probably blowing smoke at you.

00:14:08,050 --> 00:14:11,542
But the RxJS does have a decent learning curve.

00:14:11,542 --> 00:14:13,250
You have to change a little bit about how

00:14:13,250 --> 00:14:14,380
you think about things.

00:14:14,380 --> 00:14:17,040
And I think that anyone that's familiar with Angular

00:14:17,040 --> 00:14:19,181
is used to having to do that, right?

00:14:19,181 --> 00:14:20,180
There's the Angular way.

00:14:20,180 --> 00:14:23,710
I remember people talking about that a few years ago.

00:14:23,710 --> 00:14:27,236
So there's a lot of operators to learn.

00:14:27,236 --> 00:14:28,360
I don't even remember them.

00:14:28,360 --> 00:14:31,460
I have to look them up a lot of the times.

00:14:31,460 --> 00:14:33,660
And there is a behavior about it that's

00:14:33,660 --> 00:14:36,180
sometimes synchronous and sometimes asynchronous.

00:14:36,180 --> 00:14:40,910
So there are some things that will be gotchas if you're not

00:14:40,910 --> 00:14:44,410
familiar with the patterns.

00:14:44,410 --> 00:14:45,920
So another note, a quick note.

00:14:45,920 --> 00:14:48,570
This is the slide that I added that we talked about that's

00:14:48,570 --> 00:14:49,944
going to go over and make you all

00:14:49,944 --> 00:14:51,840
hungry about reactive programming.

00:14:51,840 --> 00:14:54,320
So just as an example, because sometimes people ask,

00:14:54,320 --> 00:14:56,060
what is reactive programming?

00:14:56,060 --> 00:14:58,240
So here, this is imperative programming.

00:14:58,240 --> 00:15:00,906
So let's say that I know A or B changed,

00:15:00,906 --> 00:15:03,280
and I have this value C that I need to do something with,

00:15:03,280 --> 00:15:07,020
and C comes from both A and B. So somewhere,

00:15:07,020 --> 00:15:09,520
I've got some event, and there's code in it like this that

00:15:09,520 --> 00:15:11,795
gets A and B, adds them together, puts them in C,

00:15:11,795 --> 00:15:14,060
and then I do something with C. Right?

00:15:14,060 --> 00:15:17,880
So doing something with C is now coupled to A and B.

00:15:17,880 --> 00:15:21,050
I can't do anything to C without knowing what A and B are.

00:15:21,050 --> 00:15:25,520
Reactive programming, the idea would be to create a stream,

00:15:25,520 --> 00:15:27,910
a potentially infinite stream, of A's and B's.

00:15:27,910 --> 00:15:30,570
So my A stream and B stream up here--

00:15:30,570 --> 00:15:34,150
and I could actually combine them into a C stream.

00:15:34,150 --> 00:15:36,460
So now I've got this stream of values

00:15:36,460 --> 00:15:40,760
that are my C values that I can use and subscribe to

00:15:40,760 --> 00:15:44,644
with this foreach or a subscribe and do something with C.

00:15:44,644 --> 00:15:48,210
And it's completely decoupled from A and B.

00:15:48,210 --> 00:15:51,990
I could swap out my C stream with any other C stream

00:15:51,990 --> 00:15:55,370
if somebody else has a stream of C's they want to use.

00:15:55,370 --> 00:15:59,590
So another reason you should care about observables--

00:15:59,590 --> 00:16:03,580
so a birdie told me that in Angular 2,

00:16:03,580 --> 00:16:05,520
observables will be first class.

00:16:05,520 --> 00:16:09,159
So I am not entirely sure exactly the level of support,

00:16:09,159 --> 00:16:10,950
but I know that it's something that they're

00:16:10,950 --> 00:16:13,780
looking into heavily.

00:16:13,780 --> 00:16:15,950
But that brings us to Gonto's talk,

00:16:15,950 --> 00:16:18,850
which is, how can we use this today in Angular 1?

00:16:18,850 --> 00:16:20,100
MARTIN GONTOVNIKAS: Hey again.

00:16:20,100 --> 00:16:21,975
Miss me?

00:16:21,975 --> 00:16:24,640
Yeah, I didn't think so, right?

00:16:24,640 --> 00:16:26,960
So how can we use it today?

00:16:26,960 --> 00:16:29,010
As Ben was saying, we can actually

00:16:29,010 --> 00:16:32,310
use it today by using RxJS.

00:16:32,310 --> 00:16:34,080
And of course, we are in ng-conf,

00:16:34,080 --> 00:16:37,060
so we'll be using the Angular toolkit, right?

00:16:37,060 --> 00:16:39,040
So let's start simple.

00:16:39,040 --> 00:16:40,370
Let's start with a counter.

00:16:40,370 --> 00:16:42,510
It's like a Hello, World for observables.

00:16:42,510 --> 00:16:44,010
Let's see how it works.

00:16:44,010 --> 00:16:44,900
We have a button.

00:16:44,900 --> 00:16:46,020
We have a counter.

00:16:46,020 --> 00:16:49,090
And each time I click on this counter-- on this button,

00:16:49,090 --> 00:16:52,540
sorry-- the counter keeps on increasing.

00:16:52,540 --> 00:16:54,420
However, each time that I click it,

00:16:54,420 --> 00:16:56,880
it increases a different amount, because I

00:16:56,880 --> 00:16:59,530
get the values from the server.

00:16:59,530 --> 00:17:02,550
So let's see how we can implement this.

00:17:02,550 --> 00:17:04,230
First, the HTML.

00:17:04,230 --> 00:17:06,819
We have a basic input type button.

00:17:06,819 --> 00:17:09,859
It has an ngClick as we regularly do.

00:17:09,859 --> 00:17:12,010
It has an increase counter function.

00:17:12,010 --> 00:17:16,220
And then we just show the counter object from this code.

00:17:16,220 --> 00:17:19,490
So how do we do it regularly right now with Angular JS?

00:17:19,490 --> 00:17:22,190
We add these increased counter function to the scope.

00:17:22,190 --> 00:17:25,480
Then we ask the API server to get the counter amount.

00:17:25,480 --> 00:17:27,690
We get back a promise.

00:17:27,690 --> 00:17:31,620
From the value that we get from the promise, we first log it.

00:17:31,620 --> 00:17:33,700
Once we log it, and we have the value,

00:17:33,700 --> 00:17:37,580
we just set it into the scope, and we display it.

00:17:37,580 --> 00:17:40,800
So how do we do this with Rx?

00:17:40,800 --> 00:17:44,330
First, we need to include the Rx module.

00:17:44,330 --> 00:17:48,620
Once we have that, our scope will now have new functions.

00:17:48,620 --> 00:17:52,380
One of those functions is this $createObservableFunction.

00:17:52,380 --> 00:17:57,050
What this will do is it will actually create a stream, which

00:17:57,050 --> 00:18:00,050
is an infinite list, for me.

00:18:00,050 --> 00:18:04,350
So and to that infinite list, as Ben was saying before,

00:18:04,350 --> 00:18:06,950
we'll keep on applying some transformations.

00:18:06,950 --> 00:18:08,420
So when I sit down on the computer,

00:18:08,420 --> 00:18:10,270
and I started using my counter app-- well,

00:18:10,270 --> 00:18:11,912
I was actually standing, but shh--

00:18:11,912 --> 00:18:13,370
when I was standing in the computer

00:18:13,370 --> 00:18:16,000
and using the counter app, at first, that infinite list

00:18:16,000 --> 00:18:17,050
was empty.

00:18:17,050 --> 00:18:18,470
I clicked the button once.

00:18:18,470 --> 00:18:19,520
Click.

00:18:19,520 --> 00:18:20,830
I got the first event.

00:18:20,830 --> 00:18:23,910
I clicked it again-- click-- I had the second event.

00:18:23,910 --> 00:18:28,460
So this list will keep on getting values throughout time.

00:18:28,460 --> 00:18:30,962
Then for each time that somebody clicks,

00:18:30,962 --> 00:18:33,170
what we want to do first is to add the value to that.

00:18:33,170 --> 00:18:35,890
We need to count from the server.

00:18:35,890 --> 00:18:39,210
So that's exactly what this first transformation is doing.

00:18:39,210 --> 00:18:43,970
So we're going from click, click, click, to three,

00:18:43,970 --> 00:18:46,340
four, five.

00:18:46,340 --> 00:18:49,070
Once we have that, now we actually

00:18:49,070 --> 00:18:51,690
wanted to log something from the server.

00:18:51,690 --> 00:18:55,290
Logging something is a function that returns nothing.

00:18:55,290 --> 00:18:58,740
As it returns nothing, it must have a side effect.

00:18:58,740 --> 00:19:00,340
And the good thing about observables

00:19:00,340 --> 00:19:02,450
is that, with this new function, we

00:19:02,450 --> 00:19:05,670
can just run something that has side effect without affecting

00:19:05,670 --> 00:19:07,610
the rest.

00:19:07,610 --> 00:19:12,880
So again, we have click, click, click, three, four, five.

00:19:12,880 --> 00:19:15,390
And now we log, and we keep on.

00:19:15,390 --> 00:19:17,560
Next thing, we're doing a scan.

00:19:17,560 --> 00:19:20,030
Basically what we're doing here is, every time

00:19:20,030 --> 00:19:23,280
we get a new value, we're summing that value

00:19:23,280 --> 00:19:26,210
to the previous ones we had.

00:19:26,210 --> 00:19:30,440
So click, click, click, three, four, five.

00:19:30,440 --> 00:19:33,920
And now it's three, seven-- why seven?

00:19:33,920 --> 00:19:35,210
Because I now go to four.

00:19:35,210 --> 00:19:37,640
I used to have a three, four plus three,

00:19:37,640 --> 00:19:38,850
it's like seven, right?

00:19:38,850 --> 00:19:40,580
Seven.

00:19:40,580 --> 00:19:44,586
The next one was five, so it's going to end up being 4, 7, 12.

00:19:44,586 --> 00:19:47,232
I actually practiced doing the math before,

00:19:47,232 --> 00:19:49,190
because I knew that I was going to get it wrong

00:19:49,190 --> 00:19:50,900
if I was doing it here.

00:19:50,900 --> 00:19:53,360
But don't tell anyone about it.

00:19:53,360 --> 00:19:56,180
Once I get to that point, now I actually

00:19:56,180 --> 00:19:57,740
care about those values, because I

00:19:57,740 --> 00:20:01,060
care about the different sums that has been going on.

00:20:01,060 --> 00:20:03,400
And as they care about that, I want

00:20:03,400 --> 00:20:05,990
to subscribe to that to know what's going on.

00:20:05,990 --> 00:20:09,060
And that's what turns this streaming to an observable.

00:20:09,060 --> 00:20:11,090
Because I'm observing, I'm checking out

00:20:11,090 --> 00:20:14,400
what is going on at this moment.

00:20:14,400 --> 00:20:16,810
So this subscribe function is actually

00:20:16,810 --> 00:20:21,340
the name for this observe list that the RxJS library has,

00:20:21,340 --> 00:20:24,730
The TC39 is working on a spec for observables,

00:20:24,730 --> 00:20:26,860
and this is probably going to be called foreach,

00:20:26,860 --> 00:20:29,730
but it's the same function.

00:20:29,730 --> 00:20:32,550
Another nice thing about this is that the subscribe function

00:20:32,550 --> 00:20:35,300
can receive a second function as a parameter, which

00:20:35,300 --> 00:20:36,910
is an error handler.

00:20:36,910 --> 00:20:39,940
And that error handler can handle errors for anything

00:20:39,940 --> 00:20:43,110
that happens throughout the transformation chain.

00:20:43,110 --> 00:20:47,130
That means that if the flatMap failed, if the do failed,

00:20:47,130 --> 00:20:51,490
if the scan failed, we can handle all those errors here.

00:20:51,490 --> 00:20:54,760
And then another last thing that I actually didn't know--

00:20:54,760 --> 00:20:57,680
and I learned it from Ben, so thank you for pairing me up

00:20:57,680 --> 00:21:01,670
with Ben-- is that if you create an observable in JavaScript,

00:21:01,670 --> 00:21:04,400
and then you don't dispose it, that observable

00:21:04,400 --> 00:21:05,970
will keep on leaving.

00:21:05,970 --> 00:21:07,910
So that will trigger a memory leak.

00:21:07,910 --> 00:21:11,070
So that means that I need to add this event handler so that when

00:21:11,070 --> 00:21:13,877
the scope is destroyed, so when the page is changed,

00:21:13,877 --> 00:21:14,960
I dispose this observable.

00:21:14,960 --> 00:21:18,418


00:21:18,418 --> 00:21:20,370
This was my expression.

00:21:20,370 --> 00:21:22,340
I was like, whoa.

00:21:22,340 --> 00:21:25,860
But I didn't really understand what was going on.

00:21:25,860 --> 00:21:28,830
So for me, I don't know if it's because I'm, like,

00:21:28,830 --> 00:21:31,030
three years old inside, but with drawings,

00:21:31,030 --> 00:21:32,930
I understand everything.

00:21:32,930 --> 00:21:34,950
So let's see it with drawings, right?

00:21:34,950 --> 00:21:36,860
We first got a click.

00:21:36,860 --> 00:21:39,270
Then we have a big box that is transforming

00:21:39,270 --> 00:21:41,570
that click into an amount.

00:21:41,570 --> 00:21:43,210
So click to three.

00:21:43,210 --> 00:21:46,050
Then that three got converted into a sum.

00:21:46,050 --> 00:21:48,200
In this case, it's 0 plus 3 is 3.

00:21:48,200 --> 00:21:50,520
This was an easy one to do.

00:21:50,520 --> 00:21:52,020
And now we get another value.

00:21:52,020 --> 00:21:53,420
So the next one was a four.

00:21:53,420 --> 00:21:56,650
And that will keep on happening throughout time.

00:21:56,650 --> 00:22:02,234
that means that if we are god, and we look without knowing

00:22:02,234 --> 00:22:03,650
time, and we look at the infinite,

00:22:03,650 --> 00:22:06,880
we will have four clicks for example, that happened,

00:22:06,880 --> 00:22:09,800
which got converted to four amounts, which then

00:22:09,800 --> 00:22:11,330
got converted to four sums.

00:22:11,330 --> 00:22:14,450


00:22:14,450 --> 00:22:16,770
Now I was happy, because I was understanding.

00:22:16,770 --> 00:22:19,380
It was like, yay!

00:22:19,380 --> 00:22:21,960
But once I understood it, I was like,

00:22:21,960 --> 00:22:25,020
clicking a counter is, like, very few events.

00:22:25,020 --> 00:22:31,500
Why am I using an Observable and that's what I got here.

00:22:31,500 --> 00:22:33,880
Not really that cool, right?

00:22:33,880 --> 00:22:37,530
So then I decided, let's actually try with more events.

00:22:37,530 --> 00:22:40,770
And I remember from Scott's yesterday talk

00:22:40,770 --> 00:22:43,272
that he says nobody uses ng-mousemove.

00:22:43,272 --> 00:22:44,730
I use it to create the whoa affect,

00:22:44,730 --> 00:22:48,390
because ngConf is awesome, and it moves.

00:22:48,390 --> 00:22:49,070
Go ng-mousemove.

00:22:49,070 --> 00:22:51,934


00:22:51,934 --> 00:22:53,350
So what's the nice thing about it?

00:22:53,350 --> 00:22:57,679
If I move it fast, the letters are going to pursue me.

00:22:57,679 --> 00:22:59,720
And something important from when we see the code

00:22:59,720 --> 00:23:02,710
is that, if I move the pointer, the letters

00:23:02,710 --> 00:23:06,600
take some time to go from one place to the other.

00:23:06,600 --> 00:23:09,220
So again, let's see how we code it.

00:23:09,220 --> 00:23:10,510
We have HTML.

00:23:10,510 --> 00:23:11,650
It's just directive.

00:23:11,650 --> 00:23:13,150
It's called moving text.

00:23:13,150 --> 00:23:15,260
And it just receives the text to be

00:23:15,260 --> 00:23:19,710
displayed, which is, ngConf is awesome, because it's awesome.

00:23:19,710 --> 00:23:21,677
Now, the directive part is not important.

00:23:21,677 --> 00:23:24,260
They're actually changing it, so I don't want to explain much,

00:23:24,260 --> 00:23:26,370
but I'm saying it's an element.

00:23:26,370 --> 00:23:28,390
I'm going to replace it.

00:23:28,390 --> 00:23:31,260
The content of this moving text with the template,

00:23:31,260 --> 00:23:34,080
but let's see the template, which is nice.

00:23:34,080 --> 00:23:36,820
We have a div with this ng-mouse move.

00:23:36,820 --> 00:23:40,100
That means that whenever I move the mouse inside this div,

00:23:40,100 --> 00:23:41,290
I will get notified.

00:23:41,290 --> 00:23:44,860
I will get called to the mouse move method or function,

00:23:44,860 --> 00:23:45,870
actually.

00:23:45,870 --> 00:23:48,950
And then I have one div called text container, which

00:23:48,950 --> 00:23:51,610
is a container for ngConf is awesome.

00:23:51,610 --> 00:23:53,820
And each of the letters from that phrase

00:23:53,820 --> 00:23:57,390
will get here once spun, which is absolutely positioned.

00:23:57,390 --> 00:23:59,580
So n will have a position.

00:23:59,580 --> 00:24:03,156
G will have a position, C and so on.

00:24:03,156 --> 00:24:05,590
Let's see a code now.

00:24:05,590 --> 00:24:07,680
So the first thing we're doing is, again, we're

00:24:07,680 --> 00:24:09,740
calling the $createObservableFunction

00:24:09,740 --> 00:24:14,550
to now create an infinite list of mouse move events.

00:24:14,550 --> 00:24:17,670
Then, the first thing we're doing is calculating a delta.

00:24:17,670 --> 00:24:19,320
What is a delta?

00:24:19,320 --> 00:24:20,660
Thank god I have the controller.

00:24:20,660 --> 00:24:22,030
This is the text.

00:24:22,030 --> 00:24:23,670
This is the mouse pointer, my finger.

00:24:23,670 --> 00:24:26,305
So I move the mouse, and the text is here.

00:24:26,305 --> 00:24:27,055
The mouse is here.

00:24:27,055 --> 00:24:28,220
And I have to move it.

00:24:28,220 --> 00:24:29,800
So what I do is I calculate the delta

00:24:29,800 --> 00:24:32,240
from the text to the mouse pointer, the x

00:24:32,240 --> 00:24:33,410
and y difference.

00:24:33,410 --> 00:24:35,210
And that's what this map is doing.

00:24:35,210 --> 00:24:39,437
So I'm transforming, again, from mouse move, mouse move, mouse

00:24:39,437 --> 00:24:42,700
move to delta, delta, delta.

00:24:42,700 --> 00:24:47,010
Then, I actually want to move each letter separately

00:24:47,010 --> 00:24:48,440
as I was showing before.

00:24:48,440 --> 00:24:50,780
That means that now that delta needs

00:24:50,780 --> 00:24:54,020
to be transformed to one delta per letter.

00:24:54,020 --> 00:24:56,400
So that's why I'm using this flat map here,

00:24:56,400 --> 00:25:00,990
because I'm creating an array for each letter in this text.

00:25:00,990 --> 00:25:03,060
And that returns a new observable,

00:25:03,060 --> 00:25:04,150
which is from array.

00:25:04,150 --> 00:25:07,250
So I know all the values that it has right now.

00:25:07,250 --> 00:25:09,320
And with the flat map, I'm integrating these

00:25:09,320 --> 00:25:10,770
to the original.

00:25:10,770 --> 00:25:15,565
What it means is that I have mouse move, mouse move, mouse

00:25:15,565 --> 00:25:16,380
love.

00:25:16,380 --> 00:25:19,350
That, I converted it to delta, delta, delta,

00:25:19,350 --> 00:25:22,957
and each of those delta now is converted to-- I

00:25:22,957 --> 00:25:25,290
should have counter how many letters "ngCong is awesome"

00:25:25,290 --> 00:25:31,440
has, but to however many letters the ngConf is awesome word has.

00:25:31,440 --> 00:25:34,220
And once I have that, now the only thing that is remaining

00:25:34,220 --> 00:25:37,030
is to actually do that animation and move it.

00:25:37,030 --> 00:25:39,990
So for that, again, I'm doing another flatMap,

00:25:39,990 --> 00:25:43,410
and I'm using this observable.times function.

00:25:43,410 --> 00:25:47,330
An infinite list is a list that will keep on getting values

00:25:47,330 --> 00:25:48,870
throughout time.

00:25:48,870 --> 00:25:52,040
That means that I can use these observable times to say,

00:25:52,040 --> 00:25:54,040
this value that you have it right now,

00:25:54,040 --> 00:25:55,780
create a new observable, but send

00:25:55,780 --> 00:25:59,430
that value in 100 milliseconds or in 200 milliseconds,

00:25:59,430 --> 00:26:01,310
but not right now.

00:26:01,310 --> 00:26:03,680
So what does this all means?

00:26:03,680 --> 00:26:04,450
I have the text.

00:26:04,450 --> 00:26:05,490
I have the mouse.

00:26:05,490 --> 00:26:06,710
I move the mouse.

00:26:06,710 --> 00:26:11,100
I calculated the delta, and now the n will move right away.

00:26:11,100 --> 00:26:14,150
The g will actually move in 100 milliseconds,

00:26:14,150 --> 00:26:17,320
because this observable.times is doing the index for a letter

00:26:17,320 --> 00:26:19,000
times 100.

00:26:19,000 --> 00:26:23,250
The C will be in 200 milliseconds and so on.

00:26:23,250 --> 00:26:24,990
And the nice thing about it is that I

00:26:24,990 --> 00:26:28,420
did all of that complex animation with lots

00:26:28,420 --> 00:26:32,320
and lots and lots of events really easily with observables.

00:26:32,320 --> 00:26:34,880
And it's really easy to understand how this actually

00:26:34,880 --> 00:26:37,200
works.

00:26:37,200 --> 00:26:40,430
Again, I need to dispose it.

00:26:40,430 --> 00:26:42,030
Again, it was, yay!

00:26:42,030 --> 00:26:45,630
Now I'm using something that makes more sense.

00:26:45,630 --> 00:26:48,650
But the important part is that this is just the beginning,

00:26:48,650 --> 00:26:51,440
because people are starting to know about observables.

00:26:51,440 --> 00:26:55,010
I mean, promises are now understood mostly,

00:26:55,010 --> 00:26:56,860
and it's like, oh, shit, I got to learn

00:26:56,860 --> 00:26:58,780
another new thing, right?

00:26:58,780 --> 00:27:00,520
But observables are nice, and there's

00:27:00,520 --> 00:27:03,950
going to be a spec from TC39 about observables.

00:27:03,950 --> 00:27:06,200
Angular 2.0 will have it, so it's

00:27:06,200 --> 00:27:08,610
something that is really cool to learn and-- well,

00:27:08,610 --> 00:27:12,010
not that easy to use, but it's really powerful to use.

00:27:12,010 --> 00:27:14,610
So let's just react to everything.

00:27:14,610 --> 00:27:18,170
And before ending, I was going to give out Auth0 t-shirts,

00:27:18,170 --> 00:27:20,300
but I actually forgot them in Seattle.

00:27:20,300 --> 00:27:22,780
So I have a coupon that next time that you see me,

00:27:22,780 --> 00:27:25,290
you can ask for a t-shirt.

00:27:25,290 --> 00:27:27,380
That's all I can do.

00:27:27,380 --> 00:27:29,780
[APPLAUSE]

00:27:29,780 --> 00:27:31,630
MALE SPEAKER: Thanks, guys.


YouTube URL: https://www.youtube.com/watch?v=zbBVG8bOoXk


