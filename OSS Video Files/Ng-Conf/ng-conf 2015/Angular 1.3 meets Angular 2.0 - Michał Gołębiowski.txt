Title: Angular 1.3 meets Angular 2.0 - Michał Gołębiowski
Publication date: 2015-03-06
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:01,809
[APPLAUSE]

00:00:01,809 --> 00:00:02,850
ANDREW JOSLIN: All right.

00:00:02,850 --> 00:00:03,641
Let's test the mic.

00:00:03,641 --> 00:00:05,160
Testing, testing, testing.

00:00:05,160 --> 00:00:06,640
All right, guys.

00:00:06,640 --> 00:00:07,600
Welcome.

00:00:07,600 --> 00:00:09,980
We are going to tell you about the question you have all

00:00:09,980 --> 00:00:13,210
been asking, how do we prepare for Angular 2?

00:00:13,210 --> 00:00:17,050
Because they're giving us this great Angular 2 thing,

00:00:17,050 --> 00:00:19,720
but how do we get from one to two

00:00:19,720 --> 00:00:22,187
without dying in the middle?

00:00:22,187 --> 00:00:24,270
MICHAL GOLEBIOWSKI: My name is Michal Golebiowski.

00:00:24,270 --> 00:00:26,440
I am a member of the jQuery and Angular teams

00:00:26,440 --> 00:00:29,410
and I work in Portland in Laboratorium EE.

00:00:29,410 --> 00:00:30,997
You can find me on Twitter and GitHub.

00:00:30,997 --> 00:00:32,080
ANDREW JOSLIN: I'm Andrew.

00:00:32,080 --> 00:00:34,205
I work on the Ionic team and I've contributed a lot

00:00:34,205 --> 00:00:35,300
to Angular material.

00:00:35,300 --> 00:00:38,670
You'll find me on the same thing.

00:00:38,670 --> 00:00:39,170
All right.

00:00:39,170 --> 00:00:41,590
So Michal here says he's part of the Angular core team,

00:00:41,590 --> 00:00:43,660
so apparently, he's the one who's

00:00:43,660 --> 00:00:46,940
going to explain to me this mess that is Angular 1 to Angular 2

00:00:46,940 --> 00:00:49,437
migration because I haven't heard anything really good.

00:00:49,437 --> 00:00:51,020
I haven't seen any actual code samples

00:00:51,020 --> 00:00:53,160
of how I'm going to migrate.

00:00:53,160 --> 00:00:54,742
So what can I actually do, Michal?

00:00:54,742 --> 00:00:56,450
MICHAL GOLEBIOWSKI: You can do something.

00:00:56,450 --> 00:00:57,610
You can prepare your code.

00:00:57,610 --> 00:00:59,180
You can structure your code in a way

00:00:59,180 --> 00:01:02,980
so that it will be way easier for you to migrate to Angular 2

00:01:02,980 --> 00:01:03,830
in the future.

00:01:03,830 --> 00:01:06,230
First of all, welcome ES6.

00:01:06,230 --> 00:01:08,270
You can write ES6 code today.

00:01:08,270 --> 00:01:12,000
You will write Angular 2 code in [INAUDIBLE] script, probably,

00:01:12,000 --> 00:01:15,790
but for now, we can use ES6 in Angular 1 code.

00:01:15,790 --> 00:01:18,140
It will be way easier for you to migrate.

00:01:18,140 --> 00:01:20,540
ANDREW JOSLIN: Wait.

00:01:20,540 --> 00:01:22,764
But ES6 is completely different from ES5.

00:01:22,764 --> 00:01:24,305
How am I supposed to take my ES5 code

00:01:24,305 --> 00:01:27,460
and write it in ES6 without refactoring everything?

00:01:27,460 --> 00:01:31,079
MICHAL GOLEBIOWSKI: This is not actually that different.

00:01:31,079 --> 00:01:32,870
All the code that you're currently writing,

00:01:32,870 --> 00:01:35,960
that you've already written, is already ES6

00:01:35,960 --> 00:01:38,860
because ES6 is a subset of ES6.

00:01:38,860 --> 00:01:39,770
ANDREW JOSLIN: What?

00:01:39,770 --> 00:01:42,061
MICHAL GOLEBIOWSKI: You're already writing Michal code.

00:01:42,061 --> 00:01:45,109
ANDREW JOSLIN: I think he's a liar, guys.

00:01:45,109 --> 00:01:47,400
Are you going to actually tell me how to do this, then,

00:01:47,400 --> 00:01:50,110
or are you just going to keep giving me lies?

00:01:50,110 --> 00:01:51,784
MICHAL GOLEBIOWSKI: I will.

00:01:51,784 --> 00:01:53,700
ANDREW JOSLIN: These angular core contributors

00:01:53,700 --> 00:01:56,179
are so arrogant.

00:01:56,179 --> 00:01:57,720
MICHAL GOLEBIOWSKI: So as I said, all

00:01:57,720 --> 00:01:59,920
your ES5 code is actually ES6, but you

00:01:59,920 --> 00:02:02,020
might want to use all these new features

00:02:02,020 --> 00:02:05,700
in ES6 that will make it easier to migrate in the future.

00:02:05,700 --> 00:02:07,670
So you can actually start today.

00:02:07,670 --> 00:02:09,570
Since all your ES5 code is [INAUDIBLE] ES6,

00:02:09,570 --> 00:02:12,620
you can just write all this code in ES6,

00:02:12,620 --> 00:02:15,240
but you need to transpile it somehow because browsers

00:02:15,240 --> 00:02:16,470
don't support ES6 yet, right?

00:02:16,470 --> 00:02:17,720
ANDREW JOSLIN: Obviously, yes.

00:02:17,720 --> 00:02:19,220
MICHAL GOLEBIOWSKI: It's quite easy.

00:02:19,220 --> 00:02:21,360
Look, this is five lines of code.

00:02:21,360 --> 00:02:24,350
It just creates a [INAUDIBLE] task, [INAUDIBLE] that's it.

00:02:24,350 --> 00:02:26,700
You can put it in your code and it just works already.

00:02:26,700 --> 00:02:29,283
ANDREW JOSLIN: So you're saying this will take my existing ES5

00:02:29,283 --> 00:02:31,287
project and transpile everything, which

00:02:31,287 --> 00:02:33,370
doesn't require anything because it's already ES5,

00:02:33,370 --> 00:02:35,539
and I can start adding ES6 slowly?

00:02:35,539 --> 00:02:36,830
MICHAL GOLEBIOWSKI: Definitely.

00:02:36,830 --> 00:02:39,700
And when you need to refactor one part of your code, one

00:02:39,700 --> 00:02:41,690
view, because you're adding new functionality,

00:02:41,690 --> 00:02:44,020
changing something, this is a great opportunity

00:02:44,020 --> 00:02:47,520
to migrate this specific view to Angular 2,

00:02:47,520 --> 00:02:49,307
so we can do it by pieces.

00:02:49,307 --> 00:02:51,390
ANDREW JOSLIN: What about when Angular 2 comes out

00:02:51,390 --> 00:02:55,020
and I want to use part of it in my project?

00:02:55,020 --> 00:02:57,530
MICHAL GOLEBIOWSKI: Actually, you should just

00:02:57,530 --> 00:02:59,280
use the Angular 1.4 router.

00:02:59,280 --> 00:03:02,960
The router that was built in previous versions of Angular

00:03:02,960 --> 00:03:06,920
is quite poor, but the Angular 1.4 router and the Angular 2

00:03:06,920 --> 00:03:08,972
router have shared code base.

00:03:08,972 --> 00:03:10,180
They have the same code base.

00:03:10,180 --> 00:03:12,055
Directives are [INAUDIBLE] differently, but--

00:03:12,055 --> 00:03:14,096
ANDREW JOSLIN: The guy who's good at the internet

00:03:14,096 --> 00:03:14,910
over there.

00:03:14,910 --> 00:03:16,924
That's my main compliment for him.

00:03:16,924 --> 00:03:17,840
You're welcome, Brian.

00:03:17,840 --> 00:03:18,890
MICHAL GOLEBIOWSKI: If you didn't watch his talk,

00:03:18,890 --> 00:03:19,790
you should do it.

00:03:19,790 --> 00:03:22,980
If you start using this router, then the good part of this

00:03:22,980 --> 00:03:26,340
is that you can switch pieces by view.

00:03:26,340 --> 00:03:28,810
You can just switch part of your application,

00:03:28,810 --> 00:03:31,660
then another part when you're ready, and then piece by piece,

00:03:31,660 --> 00:03:34,466
you're migrating all the code to Angular 2.

00:03:34,466 --> 00:03:35,840
ANDREW JOSLIN: That sounds great.

00:03:35,840 --> 00:03:36,381
I've got ES6.

00:03:36,381 --> 00:03:41,060
I've got Angular 2, but what if I had an actual ES5 service?

00:03:41,060 --> 00:03:43,110
This is a really common use case my clients

00:03:43,110 --> 00:03:44,792
have, especially my enterprise clients,

00:03:44,792 --> 00:03:45,750
especially Wells Fargo.

00:03:45,750 --> 00:03:47,041
They really like this use case.

00:03:47,041 --> 00:03:49,500
They have a unicorn and they want to find it, you know?

00:03:49,500 --> 00:03:50,770
MICHAL GOLEBIOWSKI: Unicorns get lost all the time.

00:03:50,770 --> 00:03:53,560
ANDREW JOSLIN: All the time, especially at conferences.

00:03:53,560 --> 00:03:55,530
So we've got this unicorn service.

00:03:55,530 --> 00:03:57,450
I use it in all my apps.

00:03:57,450 --> 00:03:58,585
We've got to find unicorn.

00:03:58,585 --> 00:04:01,695
We get the location of the unicorn, resolve a promise.

00:04:01,695 --> 00:04:04,000
We're using this weird ES5 style promise

00:04:04,000 --> 00:04:06,890
which actually won't translate to ES6 like you said

00:04:06,890 --> 00:04:08,640
because it's completely different from how

00:04:08,640 --> 00:04:12,030
ES6 promises work, so how would I actually translate

00:04:12,030 --> 00:04:14,190
this ES5 code to ES6?

00:04:14,190 --> 00:04:15,050
You say it's easy?

00:04:15,050 --> 00:04:16,300
MICHAL GOLEBIOWSKI: Well, yes.

00:04:16,300 --> 00:04:17,050
ANDREW JOSLIN: I doubt it.

00:04:17,050 --> 00:04:17,959
MICHAL GOLEBIOWSKI: It's quite easy, actually.

00:04:17,959 --> 00:04:20,000
I'm going to say this code has a lot of problems.

00:04:20,000 --> 00:04:22,900
You have to use bind this because this binding is not

00:04:22,900 --> 00:04:23,820
propagated correctly.

00:04:23,820 --> 00:04:26,950
It doesn't look similar to [INAUDIBLE] Angular 2.

00:04:26,950 --> 00:04:29,070
Let's do it side by side.

00:04:29,070 --> 00:04:32,710
Let's start with moving it to ES6.

00:04:32,710 --> 00:04:36,640
First of all, instead of a function defining a service,

00:04:36,640 --> 00:04:38,470
you can just define a class.

00:04:38,470 --> 00:04:41,200
Instead of passing parameters to the construtor function,

00:04:41,200 --> 00:04:43,050
you will just create a constructor method,

00:04:43,050 --> 00:04:45,292
you inject your parameters there.

00:04:45,292 --> 00:04:47,500
You have to set them on this so that you can use them

00:04:47,500 --> 00:04:48,760
in methods, but that's all.

00:04:48,760 --> 00:04:52,310
Also, if you look at the Find Unicorn method,

00:04:52,310 --> 00:04:54,040
we've switch the syntax a little.

00:04:54,040 --> 00:04:56,320
First of all, we're using arrow functions.

00:04:56,320 --> 00:04:59,199
Arrow functions make your disk [INAUDIBLE].

00:04:59,199 --> 00:05:00,990
This means you don't have to use bind this.

00:05:00,990 --> 00:05:01,750
It's gone.

00:05:01,750 --> 00:05:05,680
This naturally resolves to the disk of your class,

00:05:05,680 --> 00:05:07,620
so it's simpler [INAUDIBLE].

00:05:07,620 --> 00:05:09,240
Also, if you look at $q, what we've

00:05:09,240 --> 00:05:14,400
done is since Angular 1.3, $q supports the constructor

00:05:14,400 --> 00:05:17,800
[INAUDIBLE] pattern, which means it works exactly

00:05:17,800 --> 00:05:19,860
as the native ES6 promise.

00:05:19,860 --> 00:05:23,514
You still can write the code as you did before with $q.defer,

00:05:23,514 --> 00:05:24,430
but you don't have to.

00:05:24,430 --> 00:05:26,514
We can use this syntax that's here.

00:05:26,514 --> 00:05:27,930
We just pass a function that takes

00:05:27,930 --> 00:05:30,279
result reject and it will be very easy here

00:05:30,279 --> 00:05:31,320
to migrate in the future.

00:05:31,320 --> 00:05:32,611
ANDREW JOSLIN: This is not bad.

00:05:32,611 --> 00:05:33,790
We have ES6.

00:05:33,790 --> 00:05:36,560
We have our Angular 1 service, but we still have to inject $q,

00:05:36,560 --> 00:05:38,450
we've still got to return this $q,

00:05:38,450 --> 00:05:41,540
we can't use native promises because we're in Angular 1.

00:05:41,540 --> 00:05:43,661
I'm still not really happy with this solution.

00:05:43,661 --> 00:05:45,160
It seems like when I migrate to ES6,

00:05:45,160 --> 00:05:47,535
it's still going to be a lot of trouble-- I mean, migrate

00:05:47,535 --> 00:05:49,702
to Angular 2 because I'm already in ES6.

00:05:49,702 --> 00:05:51,160
When Angular 2 comes out, I'm still

00:05:51,160 --> 00:05:53,076
going to have a lot of trouble with this code.

00:05:53,076 --> 00:05:54,840
MICHAL GOLEBIOWSKI: Let's not speculate.

00:05:54,840 --> 00:05:56,839
Let's actually look how the service in Angular 2

00:05:56,839 --> 00:05:57,700
would look like.

00:05:57,700 --> 00:05:59,750
So we have a different module system.

00:05:59,750 --> 00:06:01,620
We just use ES6 modules.

00:06:01,620 --> 00:06:04,190
We need to import the class Unicorn

00:06:04,190 --> 00:06:07,370
Horn from the actual file defining a module,

00:06:07,370 --> 00:06:09,340
but we have a very similar class.

00:06:09,340 --> 00:06:12,970
We have a constructor that has the Unicorn Horn injected.

00:06:12,970 --> 00:06:16,180
We just need to specify that it's a type of the class called

00:06:16,180 --> 00:06:17,861
Unicorn Horn.

00:06:17,861 --> 00:06:19,360
We don't use the letter q because we

00:06:19,360 --> 00:06:23,280
have a [INAUDIBLE] ES6 promise that works fine with Angular 2,

00:06:23,280 --> 00:06:25,490
but note that we didn't have to change anything else

00:06:25,490 --> 00:06:28,930
because we just swapped this $q to a promise,

00:06:28,930 --> 00:06:31,350
and all the other code is the same.

00:06:31,350 --> 00:06:32,704
We still use template intervals.

00:06:32,704 --> 00:06:33,870
We use the same [INAUDIBLE].

00:06:33,870 --> 00:06:35,490
ANDREW JOSLIN: But we still had to change a bunch of stuff.

00:06:35,490 --> 00:06:37,720
I mean, taking my service from Angular 1 to Angular 2

00:06:37,720 --> 00:06:38,670
wasn't that easy.

00:06:38,670 --> 00:06:41,480
I bet I changed at least half of this code here.

00:06:41,480 --> 00:06:43,150
MICHAL GOLEBIOWSKI: That's not true,

00:06:43,150 --> 00:06:44,650
but again, let's not speculate.

00:06:44,650 --> 00:06:46,240
Let's look at the diff.

00:06:46,240 --> 00:06:46,400
ANDREW JOSLIN: Diff?

00:06:46,400 --> 00:06:47,320
MICHAL GOLEBIOWSKI: Yeah.

00:06:47,320 --> 00:06:48,770
ANDREW JOSLIN: He prepared a diff.

00:06:48,770 --> 00:06:50,500
God.

00:06:50,500 --> 00:06:52,200
MICHAL GOLEBIOWSKI: This is a diff.

00:06:52,200 --> 00:06:52,530
ANDREW JOSLIN: Wow.

00:06:52,530 --> 00:06:53,070
MICHAL GOLEBIOWSKI: Yeah.

00:06:53,070 --> 00:06:54,820
ANDREW JOSLIN: So you're saying I only really added

00:06:54,820 --> 00:06:57,460
three lines of code for this service to go from Angular 1

00:06:57,460 --> 00:06:58,110
to Angular 2.

00:06:58,110 --> 00:06:59,060
MICHAL GOLEBIOWSKI: Yeah, and if you

00:06:59,060 --> 00:07:01,350
look at the lines that changed, then Angular module

00:07:01,350 --> 00:07:02,310
is just boilerplate.

00:07:02,310 --> 00:07:04,102
It will be very easy to change.

00:07:04,102 --> 00:07:05,560
And if you look at the constructor,

00:07:05,560 --> 00:07:08,422
we're obviously not injecting $q because we

00:07:08,422 --> 00:07:10,630
have an [INAUDIBLE] promise, but it's easy to change.

00:07:10,630 --> 00:07:14,740
We just change the syntax for injections,

00:07:14,740 --> 00:07:16,410
but these are all cosmetic changes.

00:07:16,410 --> 00:07:18,320
You can very easily do it by yourself.

00:07:18,320 --> 00:07:19,430
ANDREW JOSLIN: OK, fine.

00:07:19,430 --> 00:07:20,380
I get it.

00:07:20,380 --> 00:07:22,090
A service is mostly business logic

00:07:22,090 --> 00:07:23,715
so there's really not that much Angular

00:07:23,715 --> 00:07:25,730
in a service besides the dependency injection.

00:07:25,730 --> 00:07:26,070
MICHAL GOLEBIOWSKI: Yeah.

00:07:26,070 --> 00:07:27,790
ANDREW JOSLIN: OK, fine, but I bet

00:07:27,790 --> 00:07:31,250
you can't convert a directive from Angular 1 to Angular 2.

00:07:31,250 --> 00:07:33,054
You can't do that, Michal.

00:07:33,054 --> 00:07:34,470
MICHAL GOLEBIOWSKI: You've got me.

00:07:34,470 --> 00:07:35,928
ANDREW JOSLIN: Yeah, because we all

00:07:35,928 --> 00:07:39,130
know Angular 1 directive API is disappearing

00:07:39,130 --> 00:07:41,760
on the slides for no reason.

00:07:41,760 --> 00:07:45,400


00:07:45,400 --> 00:07:48,544
We've got it maybe.

00:07:48,544 --> 00:07:50,210
MICHAL GOLEBIOWSKI: Did the server stop?

00:07:50,210 --> 00:07:51,668
ANDREW JOSLIN: Did the server stop?

00:07:51,668 --> 00:08:04,580


00:08:04,580 --> 00:08:07,570
All is well.

00:08:07,570 --> 00:08:10,120
No problems.

00:08:10,120 --> 00:08:12,095
We just restarted the server.

00:08:12,095 --> 00:08:14,318
MICHAL GOLEBIOWSKI: It's on the same screen.

00:08:14,318 --> 00:08:16,443
ANDREW JOSLIN: We migrated the server to Angular 2.

00:08:16,443 --> 00:08:18,542
[LAUGHTER]

00:08:18,542 --> 00:08:20,500
MICHAL GOLEBIOWSKI: Take it out of full screen.

00:08:20,500 --> 00:08:20,960
ANDREW JOSLIN: Where is--

00:08:20,960 --> 00:08:21,390
MICHAL GOLEBIOWSKI: Here.

00:08:21,390 --> 00:08:22,070
It's everything here.

00:08:22,070 --> 00:08:23,070
ANDREW JOSLIN: He knows.

00:08:23,070 --> 00:08:25,290
See, these core contributors are so arrogant.

00:08:25,290 --> 00:08:25,790
God.

00:08:25,790 --> 00:08:28,090
You know how hard it is doing a talk with this guy?

00:08:28,090 --> 00:08:38,518


00:08:38,518 --> 00:08:40,559
MICHAL GOLEBIOWSKI: These computers are terrible.

00:08:40,559 --> 00:08:43,152


00:08:43,152 --> 00:08:44,860
You can't do a good talk with a computer.

00:08:44,860 --> 00:08:45,901
ANDREW JOSLIN: We got it.

00:08:45,901 --> 00:08:51,760


00:08:51,760 --> 00:08:53,220
So we already went over this.

00:08:53,220 --> 00:08:55,180
I just wanted you guys to get a quick review.

00:08:55,180 --> 00:08:57,430
MICHAL GOLEBIOWSKI: The directives crashed our server.

00:08:57,430 --> 00:08:58,263
ANDREW JOSLIN: Yeah.

00:08:58,263 --> 00:09:00,920
Angular 1 directive API is so bad it crashed the server.

00:09:00,920 --> 00:09:04,036


00:09:04,036 --> 00:09:06,160
He tried to get around this by crashing the server,

00:09:06,160 --> 00:09:09,370
but I was really trying to say this is the Angular directive

00:09:09,370 --> 00:09:10,270
API.

00:09:10,270 --> 00:09:11,810
I freaking hate it.

00:09:11,810 --> 00:09:13,630
It is so big and ugly.

00:09:13,630 --> 00:09:16,940
It's powerful once I learn it, but how do I even learn it?

00:09:16,940 --> 00:09:19,820
How would you even start to migrate one of these directives

00:09:19,820 --> 00:09:21,380
to Angular 2?

00:09:21,380 --> 00:09:22,249
It's impossible.

00:09:22,249 --> 00:09:23,540
MICHAL GOLEBIOWSKI: Well, yeah.

00:09:23,540 --> 00:09:26,650
I guess you have a lot of problems with the syntax, one

00:09:26,650 --> 00:09:29,940
huge API defining all the things you can do with directives,

00:09:29,940 --> 00:09:32,547
and you have cryptic syntax like [INAUDIBLE].

00:09:32,547 --> 00:09:33,630
What does it mean exactly?

00:09:33,630 --> 00:09:34,570
ANDREW JOSLIN: Yeah, trans clued.

00:09:34,570 --> 00:09:35,180
What the heck?

00:09:35,180 --> 00:09:36,555
MICHAL GOLEBIOWSKI: Compiler link

00:09:36,555 --> 00:09:40,662
or a lot of controller stuff.

00:09:40,662 --> 00:09:41,620
This is kind of a mess.

00:09:41,620 --> 00:09:42,910
ANDREW JOSLIN: This is from the docs, by the way.

00:09:42,910 --> 00:09:43,570
This is how bad it is.

00:09:43,570 --> 00:09:45,800
MICHAL GOLEBIOWSKI: But let's speak positively for a change.

00:09:45,800 --> 00:09:46,549
ANDREW JOSLIN: OK.

00:09:46,549 --> 00:09:47,110
No.

00:09:47,110 --> 00:09:48,080
No.

00:09:48,080 --> 00:09:51,430
MICHAL GOLEBIOWSKI: This is how Angular 2 directives look like.

00:09:51,430 --> 00:09:52,667
Way better, right?

00:09:52,667 --> 00:09:53,500
ANDREW JOSLIN: Sure.

00:09:53,500 --> 00:09:54,610
We know Angular 2 rocks.

00:09:54,610 --> 00:09:57,604
News flash, Mr. Michal.

00:09:57,604 --> 00:09:59,520
MICHAL GOLEBIOWSKI: Let's look at this example

00:09:59,520 --> 00:10:01,103
so that we know what's happening here.

00:10:01,103 --> 00:10:03,600
Obviously, we have a template, we defined a custom element,

00:10:03,600 --> 00:10:04,950
my-narwhal.

00:10:04,950 --> 00:10:08,720
It has a name attribute that is using the bindings.

00:10:08,720 --> 00:10:11,790
So in Angular 2, if you read the code,

00:10:11,790 --> 00:10:13,295
it just says what it means.

00:10:13,295 --> 00:10:15,670
It's at component, so we know we're defining a component.

00:10:15,670 --> 00:10:19,610
The selector says that we're using a tag my-narwhal.

00:10:19,610 --> 00:10:22,350
We have a bind property that defines the bindings.

00:10:22,350 --> 00:10:24,340
In this case, the name attribute value

00:10:24,340 --> 00:10:27,760
is bound to the name property of the component defining

00:10:27,760 --> 00:10:28,660
a directive.

00:10:28,660 --> 00:10:30,020
We also have a template.

00:10:30,020 --> 00:10:33,480
We could use a URL, but here, so that it's easier to show,

00:10:33,480 --> 00:10:35,310
we're just using line.

00:10:35,310 --> 00:10:38,280
We have the same interpolation and we have ES6 classes

00:10:38,280 --> 00:10:39,320
that define our API.

00:10:39,320 --> 00:10:39,510
ANDREW JOSLIN: Right.

00:10:39,510 --> 00:10:40,800
We have no more scope so we're actually

00:10:40,800 --> 00:10:43,180
using the class instead of the scope, which is great.

00:10:43,180 --> 00:10:43,940
MICHAL GOLEBIOWSKI: And displays.

00:10:43,940 --> 00:10:44,773
ANDREW JOSLIN: Yeah.

00:10:44,773 --> 00:10:47,540
That is what our precious narwhal directive will actually

00:10:47,540 --> 00:10:49,250
display, or component now.

00:10:49,250 --> 00:10:50,660
Excuse me.

00:10:50,660 --> 00:10:52,920
So that's cool.

00:10:52,920 --> 00:10:56,200
Yeah, Angular 2 rocks, but this is my freaking Angular 1

00:10:56,200 --> 00:10:56,940
directive.

00:10:56,940 --> 00:10:59,180
I mean, directive, that's dead.

00:10:59,180 --> 00:11:01,700
Restrict is dead, scope is dead, link is dead,

00:11:01,700 --> 00:11:03,472
my business logic is dead.

00:11:03,472 --> 00:11:05,180
The only thing I can keep is my template.

00:11:05,180 --> 00:11:07,450
How do I even start to migrate this?

00:11:07,450 --> 00:11:09,990
MICHAL GOLEBIOWSKI: Template is not dead.

00:11:09,990 --> 00:11:10,990
ANDREW JOSLIN: This guy.

00:11:10,990 --> 00:11:12,400
Oh my god.

00:11:12,400 --> 00:11:15,610
Yeah, but look, I can't even migrate any of this, dude.

00:11:15,610 --> 00:11:16,340
I mean, really.

00:11:16,340 --> 00:11:18,220
MICHAL GOLEBIOWSKI: Well, if you look at it this way,

00:11:18,220 --> 00:11:19,761
if you look at this specific example,

00:11:19,761 --> 00:11:21,620
it seems that, well, we have no choice.

00:11:21,620 --> 00:11:22,330
We broke it.

00:11:22,330 --> 00:11:23,460
Let's go home.

00:11:23,460 --> 00:11:24,580
Nothing to do here.

00:11:24,580 --> 00:11:25,180
ANDREW JOSLIN: Exactly.

00:11:25,180 --> 00:11:25,690
See?

00:11:25,690 --> 00:11:27,410
MICHAL GOLEBIOWSKI: But we have a way.

00:11:27,410 --> 00:11:29,761
ANDREW JOSLIN: Isn't pessimism fun?

00:11:29,761 --> 00:11:32,260
MICHAL GOLEBIOWSKI: Well, if you told me that thing that you

00:11:32,260 --> 00:11:35,520
said that it's impossible to migrate it a year ago,

00:11:35,520 --> 00:11:38,440
I might have agreed with you, but we've

00:11:38,440 --> 00:11:40,450
had a couple of new interesting APIs

00:11:40,450 --> 00:11:44,060
that will make the translation easier for us,

00:11:44,060 --> 00:11:45,310
so let's look at one of those.

00:11:45,310 --> 00:11:46,750
We have to eliminate scope, right?

00:11:46,750 --> 00:11:48,902
You said that scope is dead, so we

00:11:48,902 --> 00:11:50,110
have to do something with it.

00:11:50,110 --> 00:11:52,130
We can't just use it and migrate easily,

00:11:52,130 --> 00:11:53,890
so let's eliminate the scope.

00:11:53,890 --> 00:11:56,440
So since Angular 1.3, we have the controller

00:11:56,440 --> 00:12:00,230
as syntax, which means that we give our controller a name.

00:12:00,230 --> 00:12:03,570
We can define our API in the controller instead of somewhere

00:12:03,570 --> 00:12:06,530
else or I can have [INAUDIBLE] function,

00:12:06,530 --> 00:12:08,910
and we can use this controller in a template, right?

00:12:08,910 --> 00:12:14,290
We just name my-narwhal dot a method, big name in this case.

00:12:14,290 --> 00:12:16,034
So all our methods are in the controller.

00:12:16,034 --> 00:12:17,450
We use controller in the template.

00:12:17,450 --> 00:12:18,330
Fine, right?

00:12:18,330 --> 00:12:18,500
ANDREW JOSLIN: No.

00:12:18,500 --> 00:12:19,239
This is not fine.

00:12:19,239 --> 00:12:19,780
I mean, look.

00:12:19,780 --> 00:12:21,529
I've still got my scope, I still got

00:12:21,529 --> 00:12:23,070
my scope injected into my controller,

00:12:23,070 --> 00:12:25,310
and you can't tell me that works in Angular 2,

00:12:25,310 --> 00:12:27,565
and I've still got this controller as, I've still

00:12:27,565 --> 00:12:28,690
got boilerplate everywhere.

00:12:28,690 --> 00:12:30,300
I'm not enjoying this, Michal.

00:12:30,300 --> 00:12:32,460
MICHAL GOLEBIOWSKI: Well, you didn't let me finish.

00:12:32,460 --> 00:12:34,390
ANDREW JOSLIN: He's such a tease.

00:12:34,390 --> 00:12:37,420
MICHAL GOLEBIOWSKI: This is only one API, but we have more.

00:12:37,420 --> 00:12:40,300
Another thing that is defined in new Angular, Angular 1.3

00:12:40,300 --> 00:12:41,800
introduced bind to controller, which

00:12:41,800 --> 00:12:45,280
lets you bind the properties to the controller instead

00:12:45,280 --> 00:12:45,910
of scope.

00:12:45,910 --> 00:12:49,000
And Angular 1 for the syntax is even simpler

00:12:49,000 --> 00:12:51,030
because you just use bind to controller

00:12:51,030 --> 00:12:52,930
and you define all your bindings there.

00:12:52,930 --> 00:12:55,300
You still have to define scope with its brackets

00:12:55,300 --> 00:12:57,940
because it needs to have a separate scope so that it

00:12:57,940 --> 00:13:00,160
works, but this is the only place.

00:13:00,160 --> 00:13:02,220
In the template, you just use a controller.

00:13:02,220 --> 00:13:04,604
In the controller, you don't inject scope

00:13:04,604 --> 00:13:05,895
as you did in the past example.

00:13:05,895 --> 00:13:06,570
ANDREW JOSLIN: OK, fine.

00:13:06,570 --> 00:13:08,505
We don't have scope anymore, everything's on the controller,

00:13:08,505 --> 00:13:10,550
but look at all this freaking boilerplate.

00:13:10,550 --> 00:13:12,482
I've got to declare my scope, my restrict,

00:13:12,482 --> 00:13:13,940
I've got to [INAUDIBLE] controller,

00:13:13,940 --> 00:13:15,920
I've got to declare my controller.

00:13:15,920 --> 00:13:19,200
If you're telling me this is Angular 1 best practice,

00:13:19,200 --> 00:13:20,560
I'm not part of best practice.

00:13:20,560 --> 00:13:21,764
This is way too much.

00:13:21,764 --> 00:13:23,930
MICHAL GOLEBIOWSKI: Yeah, I guess if you look at it,

00:13:23,930 --> 00:13:27,610
then we've made it a little easier to migrate in this way,

00:13:27,610 --> 00:13:29,780
but you always have to put [INAUDIBLE]

00:13:29,780 --> 00:13:32,002
scope, which you don't use, so why would you put it?

00:13:32,002 --> 00:13:32,960
ANDREW JOSLIN: Exactly.

00:13:32,960 --> 00:13:34,460
MICHAL GOLEBIOWSKI: You have to name your controller,

00:13:34,460 --> 00:13:37,030
and it's natural to use just the same name, so why

00:13:37,030 --> 00:13:38,740
repeat yourself?

00:13:38,740 --> 00:13:41,030
So there is a lot of boilerplate and it's easy

00:13:41,030 --> 00:13:42,890
to forget about something, but what

00:13:42,890 --> 00:13:45,630
do you do if you have the same code repeated in many places?

00:13:45,630 --> 00:13:46,540
You abstract it.

00:13:46,540 --> 00:13:47,930
You [INAUDIBLE] right?

00:13:47,930 --> 00:13:52,266
ANDREW JOSLIN: Copy, paste every time.

00:13:52,266 --> 00:13:54,265
MICHAL GOLEBIOWSKI: I think I'll go with Helper.

00:13:54,265 --> 00:13:55,931
ANDREW JOSLIN: He doesn't know anything.

00:13:55,931 --> 00:13:58,070
MICHAL GOLEBIOWSKI: So how about this?

00:13:58,070 --> 00:14:01,755
How about if we had a component method on the module that

00:14:01,755 --> 00:14:04,490
would do it all for us-- that would define [INAUDIBLE],

00:14:04,490 --> 00:14:06,690
that would define the scope, that

00:14:06,690 --> 00:14:08,840
would define controller as to be the default

00:14:08,840 --> 00:14:10,100
name of our directive.

00:14:10,100 --> 00:14:11,891
We still could overwrite it but the default

00:14:11,891 --> 00:14:13,134
would be sensible, right?

00:14:13,134 --> 00:14:14,550
And instead of bind to controller,

00:14:14,550 --> 00:14:16,590
we just use bind because this is the only way we

00:14:16,590 --> 00:14:17,280
would like to bind our things.

00:14:17,280 --> 00:14:19,580
ANDREW JOSLIN: Right, because the controller is everything.

00:14:19,580 --> 00:14:21,570
I'm a little happier with this because we're

00:14:21,570 --> 00:14:24,390
in components just like Angular 2, same vocabulary.

00:14:24,390 --> 00:14:26,790
Scope is gone, restrict is gone, link is gone.

00:14:26,790 --> 00:14:29,630
I'm happy with that.

00:14:29,630 --> 00:14:32,500
But is this actually part of Angular yet?

00:14:32,500 --> 00:14:34,150
MICHAL GOLEBIOWSKI: Not yet but you

00:14:34,150 --> 00:14:36,930
can see a link down the slide with the issue

00:14:36,930 --> 00:14:40,460
about creating this API, and there are some comments.

00:14:40,460 --> 00:14:42,440
There is a discussion how it will look like,

00:14:42,440 --> 00:14:44,800
and this exact proposal is put there.

00:14:44,800 --> 00:14:46,597
ANDREW JOSLIN: Are any core contributors

00:14:46,597 --> 00:14:47,680
in favor of this proposal?

00:14:47,680 --> 00:14:47,990
MICHAL GOLEBIOWSKI: Yeah.

00:14:47,990 --> 00:14:49,125
There are a lot of people that actually

00:14:49,125 --> 00:14:50,230
think this is pretty nice.

00:14:50,230 --> 00:14:52,430
It would make the migration to Angular 2

00:14:52,430 --> 00:14:57,805
in the future easier, which is a noble goal, so yeah.

00:14:57,805 --> 00:14:59,430
ANDREW JOSLIN: OK, we have ES5, though,

00:14:59,430 --> 00:15:02,830
but this still isn't really Angular 2 ready because it's

00:15:02,830 --> 00:15:04,080
not ES6 or [INAUDIBLE] script.

00:15:04,080 --> 00:15:05,496
MICHAL GOLEBIOWSKI: Yeah, but this

00:15:05,496 --> 00:15:06,640
is really simple to change.

00:15:06,640 --> 00:15:07,380
Look at that.

00:15:07,380 --> 00:15:09,005
We use a arrow function to just get rid

00:15:09,005 --> 00:15:13,370
of the function keyword, we use a class to define a controller.

00:15:13,370 --> 00:15:16,460
ANDREW JOSLIN: I guess, but this is still all in a function

00:15:16,460 --> 00:15:18,870
and it's all different than Angular 2.

00:15:18,870 --> 00:15:22,421
This is not going to be easy to migrate to Angular 2.

00:15:22,421 --> 00:15:23,420
This is still Angular 1.

00:15:23,420 --> 00:15:24,180
MICHAL GOLEBIOWSKI: You don't really

00:15:24,180 --> 00:15:25,880
have controllers in Angular 2, right?

00:15:25,880 --> 00:15:27,760
We've all seen these presentations

00:15:27,760 --> 00:15:32,239
from NG Europe when [INAUDIBLE] is dead, scope is dead,

00:15:32,239 --> 00:15:33,030
controller is dead.

00:15:33,030 --> 00:15:35,810
So if controller is dead, then why creating a controller

00:15:35,810 --> 00:15:37,220
helps us migrate, right?

00:15:37,220 --> 00:15:37,560
ANDREW JOSLIN: Right.

00:15:37,560 --> 00:15:40,018
MICHAL GOLEBIOWSKI: But it turns out it is not all actually

00:15:40,018 --> 00:15:40,810
fully true.

00:15:40,810 --> 00:15:44,600
It is not that true that the controller is completely gone.

00:15:44,600 --> 00:15:46,950
Misko once said that we love controllers

00:15:46,950 --> 00:15:50,200
so much that we made everything a controller.

00:15:50,200 --> 00:15:51,820
So you don't need a specific syntax.

00:15:51,820 --> 00:15:55,580
You don't need an API to create a controller if everything

00:15:55,580 --> 00:15:56,990
behaves like that.

00:15:56,990 --> 00:15:59,740
When we showed this example with a directive,

00:15:59,740 --> 00:16:01,710
instead of creating a controller for directive,

00:16:01,710 --> 00:16:04,190
we just put all those methods directly on the directive.

00:16:04,190 --> 00:16:05,510
Why not?

00:16:05,510 --> 00:16:07,090
That's how it looks in Angular 2.

00:16:07,090 --> 00:16:07,965
ANDREW JOSLIN: Right.

00:16:07,965 --> 00:16:10,250
So you're saying Angular 2, there's

00:16:10,250 --> 00:16:13,060
no such thing as this directive definition here.

00:16:13,060 --> 00:16:16,510
Everything is on the class and we still have a class.

00:16:16,510 --> 00:16:20,070
Well, I bet you'd have to rewrite all of this

00:16:20,070 --> 00:16:20,737
to do Angular 2.

00:16:20,737 --> 00:16:22,111
MICHAL GOLEBIOWSKI: Actually not.

00:16:22,111 --> 00:16:23,640
Let's look at the diff again.

00:16:23,640 --> 00:16:25,690
ANDREW JOSLIN: This guy!

00:16:25,690 --> 00:16:27,060
Oh my god.

00:16:27,060 --> 00:16:29,480
MICHAL GOLEBIOWSKI: So the diff is a little larger,

00:16:29,480 --> 00:16:32,380
but if you look at it, the class is what defines our business

00:16:32,380 --> 00:16:33,380
logic, right?

00:16:33,380 --> 00:16:35,580
So the class is completely unchanged.

00:16:35,580 --> 00:16:37,740
You have the same methods.

00:16:37,740 --> 00:16:40,350
And if you look at the lines that actually change,

00:16:40,350 --> 00:16:42,540
then these are pretty easy changes,

00:16:42,540 --> 00:16:47,660
like you need to change minor [INAUDIBLE] into dashes.

00:16:47,660 --> 00:16:50,975
The bind syntax changes just a little, but it's just a little.

00:16:50,975 --> 00:16:53,700
There is a direct equivalent.

00:16:53,700 --> 00:16:57,060
And the template is pretty easy to migrate.

00:16:57,060 --> 00:16:58,190
Easy peasy.

00:16:58,190 --> 00:17:02,100
ANDREW JOSLIN: I guess you've shown me that I could actually

00:17:02,100 --> 00:17:04,450
migrate a service and a directive to Angular 2

00:17:04,450 --> 00:17:08,109
with little effort, specify if I start in ECMAScript 6, which

00:17:08,109 --> 00:17:09,650
is actually the new standard and it's

00:17:09,650 --> 00:17:13,260
easy to integrate ECMAScript-- that's too hard to say,

00:17:13,260 --> 00:17:15,849
guys-- ECMAScript 6 into my project.

00:17:15,849 --> 00:17:17,130
It's just one [INAUDIBLE].

00:17:17,130 --> 00:17:19,421
MICHAL GOLEBIOWSKI: Also know that in your application,

00:17:19,421 --> 00:17:22,450
you will usually have a lot more APIs.

00:17:22,450 --> 00:17:24,920
The class will be way bigger, so the code will not change.

00:17:24,920 --> 00:17:27,000
It will actually be a much larger percentage.

00:17:27,000 --> 00:17:29,480
ANDREW JOSLIN: I think it's so easy to migrate to Angular 2

00:17:29,480 --> 00:17:30,890
that the universe is exploding.

00:17:30,890 --> 00:17:32,590
MICHAL GOLEBIOWSKI: Yeah.

00:17:32,590 --> 00:17:34,429
So thank you.

00:17:34,429 --> 00:17:35,470
ANDREW JOSLIN: Thank you.

00:17:35,470 --> 00:17:38,220
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=pai1ZdFI2dg


