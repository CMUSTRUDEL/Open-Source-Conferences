Title: Angular Team PanelQA   Googlers
Publication date: 2015-03-07
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:02,576
SPEAKER 1: OK, here's how it's going to work.

00:00:02,576 --> 00:00:04,200
We've got a lot of questions on reddit.

00:00:04,200 --> 00:00:05,810
We're just going to go through them.

00:00:05,810 --> 00:00:10,220
Whoever the right person to answer it is, you answer it.

00:00:10,220 --> 00:00:12,564
And last year, I got made fun of for answering

00:00:12,564 --> 00:00:13,480
some of the questions.

00:00:13,480 --> 00:00:15,322
So maybe to save time, I'll just answer--

00:00:15,322 --> 00:00:16,780
BRAD GREEN: Wait, wait, we're going

00:00:16,780 --> 00:00:17,950
to take local questions too, right?

00:00:17,950 --> 00:00:18,430
SPEAKER 1: We are.

00:00:18,430 --> 00:00:18,950
BRAD GREEN: OK, good.

00:00:18,950 --> 00:00:19,260
Just checking.

00:00:19,260 --> 00:00:21,080
SPEAKER 1: But maybe I'll just ask them.

00:00:21,080 --> 00:00:23,260
And then I'll immediately answer the question.

00:00:23,260 --> 00:00:26,607
And if you want to add anything, [LAUGHTER] you can.

00:00:26,607 --> 00:00:29,190
So if you have local questions, we're going to just alternate.

00:00:29,190 --> 00:00:33,190
So this front row right here, just come up here and sit down,

00:00:33,190 --> 00:00:35,820
and we'll-- maybe AV, if you have another mic,

00:00:35,820 --> 00:00:37,360
you can bring it.

00:00:37,360 --> 00:00:40,120
And so we'll just kind of swap from online and local.

00:00:40,120 --> 00:00:42,530
So come sit in this front row, and we'll just

00:00:42,530 --> 00:00:44,120
go in the right order, OK?

00:00:44,120 --> 00:00:47,990
So question number one, we'll take from online.

00:00:47,990 --> 00:00:50,770
And the question is, will Polymer and Angular ever

00:00:50,770 --> 00:00:55,480
merge to create one JS framework to rule them all?

00:00:55,480 --> 00:00:59,228
And the answer to that question is-- just kidding.

00:00:59,228 --> 00:01:01,120
BRAD GREEN: Well, so one of the things

00:01:01,120 --> 00:01:04,250
you saw during this conference in Misko

00:01:04,250 --> 00:01:07,070
and Rado's demo is that we work with Polymer out of the box.

00:01:07,070 --> 00:01:08,980
We've taken a lot of time to make sure

00:01:08,980 --> 00:01:13,020
that Angular works with not just Polymer but any library that

00:01:13,020 --> 00:01:14,700
creates web components.

00:01:14,700 --> 00:01:18,510
And so this being the main theme behind Polymer,

00:01:18,510 --> 00:01:22,190
I might say we did it.

00:01:22,190 --> 00:01:23,495
No, nobody likes that answer.

00:01:23,495 --> 00:01:25,010
[LAUGHTER]

00:01:25,010 --> 00:01:27,480
So I don't think we're going to be one framework.

00:01:27,480 --> 00:01:29,910
We treat things very differently.

00:01:29,910 --> 00:01:32,741
So Angular is about building applications.

00:01:32,741 --> 00:01:34,740
We've got a very particular perspective on this.

00:01:34,740 --> 00:01:37,220
And Polymer is very good at creating web components.

00:01:37,220 --> 00:01:39,300
And we actually looked at this when

00:01:39,300 --> 00:01:41,390
we were designing Angular 2.0.

00:01:41,390 --> 00:01:44,330
And we thought, well, maybe we could also

00:01:44,330 --> 00:01:46,700
be a framework that's for creating web components.

00:01:46,700 --> 00:01:48,911
And we decided it was not a good idea.

00:01:48,911 --> 00:01:50,910
Igor, do you have other stuff to answer on that?

00:01:50,910 --> 00:01:53,390
IGOR MINOR: Yeah, we actually spent like half a year trying

00:01:53,390 --> 00:01:54,230
to make it work.

00:01:54,230 --> 00:01:57,210
And then we realized that if we want to get the performance

00:01:57,210 --> 00:02:00,660
benefits and also the control that the application

00:02:00,660 --> 00:02:03,220
framework has over everything that's

00:02:03,220 --> 00:02:07,410
happening in your application, the architecture

00:02:07,410 --> 00:02:10,400
that Polymer chose to use was not the best fit for us.

00:02:10,400 --> 00:02:12,280
So we decided, we made a conscious decision

00:02:12,280 --> 00:02:18,290
that while we will make it work with web components in Polymer,

00:02:18,290 --> 00:02:21,190
we will choose slightly different architecture, because

00:02:21,190 --> 00:02:22,540
of our slightly different goals.

00:02:22,540 --> 00:02:25,460
We really focused on building applications and not

00:02:25,460 --> 00:02:26,936
necessarily just components.

00:02:26,936 --> 00:02:29,060
MISKO HEVERY: So I also would like to add something

00:02:29,060 --> 00:02:33,230
to that, which is that Polymer is about-- not all of it,

00:02:33,230 --> 00:02:36,080
but a big chunk of Polymer is about creating polyfills

00:02:36,080 --> 00:02:40,590
and bringing these standards to the framework.

00:02:40,590 --> 00:02:43,250
And it's a slightly different goal than what an Angular has,

00:02:43,250 --> 00:02:44,640
which is to build applications.

00:02:44,640 --> 00:02:49,131
So they're complementary, but they're not the same thing.

00:02:49,131 --> 00:02:50,630
IGOR MINOR: I would also like to add

00:02:50,630 --> 00:02:52,589
that we have very good relationships with some

00:02:52,589 --> 00:02:53,630
of the people on Polymer.

00:02:53,630 --> 00:02:55,838
And like [? Adios ?] [? Money ?] has been very useful

00:02:55,838 --> 00:02:59,050
and helpful in just brainstorming stuff.

00:02:59,050 --> 00:03:01,720
So it's not like there is this like ugly competition

00:03:01,720 --> 00:03:04,430
within Google between Polymer and Angular.

00:03:04,430 --> 00:03:07,290
And I really appreciate that.

00:03:07,290 --> 00:03:09,657
SPEAKER 1: OK, thanks for adding so many things.

00:03:09,657 --> 00:03:11,740
That's all the time we have for the panel tonight.

00:03:11,740 --> 00:03:13,719
[LAUGHTER]

00:03:13,719 --> 00:03:14,260
Just kidding.

00:03:14,260 --> 00:03:17,646
We'll take a question from the first guy right here.

00:03:17,646 --> 00:03:20,844
AUDIENCE: Hi, my question is about the new router.

00:03:20,844 --> 00:03:22,260
You mentioned a little bit that it

00:03:22,260 --> 00:03:27,474
would be possible to support lazy-loaded routes.

00:03:27,474 --> 00:03:28,890
What about the other features that

00:03:28,890 --> 00:03:31,200
are provided in UI-Router Extras,

00:03:31,200 --> 00:03:35,216
like Deep State Redirect, Sticky State, things like that?

00:03:35,216 --> 00:03:37,530
BRIAN FORD: So that's a great question.

00:03:37,530 --> 00:03:39,270
I actually don't know what those things

00:03:39,270 --> 00:03:44,530
mean in UI-Router. [LAUGHTER] I'm not an expert on UI-Router.

00:03:44,530 --> 00:03:46,680
Do you want to briefly give me an example of one

00:03:46,680 --> 00:03:49,300
of those things?

00:03:49,300 --> 00:03:50,150
AUDIENCE: Right.

00:03:50,150 --> 00:03:55,810
So with UI-Router, you can define nested states.

00:03:55,810 --> 00:03:59,880
And you can jump from kind of one state tree to another

00:03:59,880 --> 00:04:02,620
and maintain a state when you route back there.

00:04:02,620 --> 00:04:05,130
It's like you could have divs side by side on a page,

00:04:05,130 --> 00:04:07,305
navigate, activate one div and come back to it,

00:04:07,305 --> 00:04:08,930
and you'd still have your state exactly

00:04:08,930 --> 00:04:10,820
as it was when you returned.

00:04:10,820 --> 00:04:13,419
BRIAN FORD: So yes, I do want to be able to do that.

00:04:13,419 --> 00:04:15,210
There's already a way to do it, but there's

00:04:15,210 --> 00:04:17,660
not like super nice APIs and super nice docs

00:04:17,660 --> 00:04:18,940
on how to do it.

00:04:18,940 --> 00:04:20,370
So yes.

00:04:20,370 --> 00:04:23,470
Like any question that's, can the new router do x?

00:04:23,470 --> 00:04:25,630
The answer is usually yes, but there's

00:04:25,630 --> 00:04:28,340
not like a super great writeup on how.

00:04:28,340 --> 00:04:30,050
The best thing to do, actually, is just

00:04:30,050 --> 00:04:33,264
file an issue in GitHub saying, hey, how do I do this.

00:04:33,264 --> 00:04:34,680
And actually, if you look, there's

00:04:34,680 --> 00:04:37,930
tons of issues that are tagged as use cases

00:04:37,930 --> 00:04:40,250
and some great discussions there.

00:04:40,250 --> 00:04:42,890
As I implement features, and as I add more examples

00:04:42,890 --> 00:04:45,124
and improve the documentation, I close those.

00:04:45,124 --> 00:04:47,540
And then if someone comes back and says, wait, wait, wait,

00:04:47,540 --> 00:04:49,545
what about in this case, then we reopen

00:04:49,545 --> 00:04:50,690
it and we talk some more.

00:04:50,690 --> 00:04:52,231
So that's been a really good workflow

00:04:52,231 --> 00:04:56,510
for kind of showing people how does this new router compare

00:04:56,510 --> 00:04:58,262
to other solutions.

00:04:58,262 --> 00:04:59,220
Great question, though.

00:04:59,220 --> 00:04:59,540
Thank you.

00:04:59,540 --> 00:05:00,373
AUDIENCE: Thank you.

00:05:00,373 --> 00:05:01,880
SPEAKER 1: Thanks.

00:05:01,880 --> 00:05:03,510
OK, this next one-- and maybe this

00:05:03,510 --> 00:05:05,790
is just a recap-- but considering

00:05:05,790 --> 00:05:08,880
how different Angular 2.0 is from the original,

00:05:08,880 --> 00:05:12,600
what kind of upgrade paths have you planned?

00:05:12,600 --> 00:05:14,460
BRAD GREEN: We did cover this a bit.

00:05:14,460 --> 00:05:16,230
And if it wasn't clear, the plan is

00:05:16,230 --> 00:05:18,490
that you can either migrate wholesale

00:05:18,490 --> 00:05:20,810
and we'll provide some guides and tools for it,

00:05:20,810 --> 00:05:23,660
or you can do it incrementally, where you get to mix and match

00:05:23,660 --> 00:05:30,851
Angular 1.0 and Angular 2.0.

00:05:30,851 --> 00:05:32,740
SPEAKER 1: OK, next up.

00:05:32,740 --> 00:05:34,730
AUDIENCE: All right, Misko, in your speech

00:05:34,730 --> 00:05:36,230
this morning, you were showing a lot

00:05:36,230 --> 00:05:38,240
of examples of the new syntax.

00:05:38,240 --> 00:05:40,600
And I saw a couple of places, and I'm a little confused

00:05:40,600 --> 00:05:44,970
about sometimes you would use a pound sign

00:05:44,970 --> 00:05:47,030
to represent a reference to a variable.

00:05:47,030 --> 00:05:48,780
And then it looked like at some place else

00:05:48,780 --> 00:05:50,810
there was like a var underscore.

00:05:50,810 --> 00:05:52,410
And so those two different things

00:05:52,410 --> 00:05:53,240
looked they were doing the same thing.

00:05:53,240 --> 00:05:55,420
I was wondering why the different syntax.

00:05:55,420 --> 00:05:57,824
MISKO HEVERY: So, you're right.

00:05:57,824 --> 00:05:59,240
There's two ways to do everything.

00:05:59,240 --> 00:06:01,390
And this comes down to that there's

00:06:01,390 --> 00:06:03,850
the preferred way, which we call the shorthand, which

00:06:03,850 --> 00:06:06,890
either has the brackets, the parentheses, or the pound sign.

00:06:06,890 --> 00:06:09,090
And then there's the alphanumeric,

00:06:09,090 --> 00:06:13,075
or what we call canonical way, which has bin dash, on dash,

00:06:13,075 --> 00:06:14,812
or var dash.

00:06:14,812 --> 00:06:16,270
But they are absolutely equivalent.

00:06:16,270 --> 00:06:19,427


00:06:19,427 --> 00:06:22,330
SPEAKER 1: OK, so remember, if there's any questions,

00:06:22,330 --> 00:06:24,410
anyone here in the room, just come up here,

00:06:24,410 --> 00:06:26,830
and you'll be next in line.

00:06:26,830 --> 00:06:29,400
All right, do you guys have any specific architectural

00:06:29,400 --> 00:06:32,470
considerations that you're taking into consideration

00:06:32,470 --> 00:06:33,605
with regards to HTTP/2?

00:06:33,605 --> 00:06:39,614


00:06:39,614 --> 00:06:43,260
JEFF CROSS: Well, I think one thing we're doing.

00:06:43,260 --> 00:06:45,500
I don't think there's like inside the framework

00:06:45,500 --> 00:06:47,900
to be done, other than the way modules are organized.

00:06:47,900 --> 00:06:51,940
It gives us more flexibility in loading separate modules

00:06:51,940 --> 00:06:54,970
at run time, rather than having to compile them together

00:06:54,970 --> 00:06:57,310
and to view specific binaries.

00:06:57,310 --> 00:06:59,060
Igor, do you have anything to add to that?

00:06:59,060 --> 00:07:01,750
IGOR MINOR: Yeah, really the code loading and getting

00:07:01,750 --> 00:07:05,040
all the asset files into the browser, that's

00:07:05,040 --> 00:07:07,370
where the biggest impact is.

00:07:07,370 --> 00:07:10,490
We don't necessarily need to do anything special,

00:07:10,490 --> 00:07:12,330
except for providing tooling that

00:07:12,330 --> 00:07:13,987
will make it possible to take advantage

00:07:13,987 --> 00:07:15,070
of the benefits of HTTP/2.

00:07:15,070 --> 00:07:17,915


00:07:17,915 --> 00:07:19,995
SPEAKER 1: Cool.

00:07:19,995 --> 00:07:20,870
All right, you're up.

00:07:20,870 --> 00:07:23,770
AUDIENCE: OK.

00:07:23,770 --> 00:07:28,860
A big feature of Angular 2.0 is to load modules dynamically.

00:07:28,860 --> 00:07:32,740
And I think, we were looking to see that talked about

00:07:32,740 --> 00:07:34,220
in this conference.

00:07:34,220 --> 00:07:38,486
Could you talk a little bit about how that's going to work?

00:07:38,486 --> 00:07:40,250
MISKO HEVERY: So the module loading

00:07:40,250 --> 00:07:43,780
is going to happen on the router boundaries.

00:07:43,780 --> 00:07:46,750
So when you navigate to a particular URL, which

00:07:46,750 --> 00:07:49,840
has a particular set of subviews that get loaded,

00:07:49,840 --> 00:07:53,250
those subviews will be able to be loaded dynamically.

00:07:53,250 --> 00:07:54,750
And the way this is going to be done

00:07:54,750 --> 00:07:58,040
is because each component will have its own injection system.

00:07:58,040 --> 00:08:01,700
There is some inheritance going on through child injectors

00:08:01,700 --> 00:08:03,040
and so on.

00:08:03,040 --> 00:08:07,060
But you will be able to load new services into each component.

00:08:07,060 --> 00:08:11,010


00:08:11,010 --> 00:08:13,168
Does that answer the question?

00:08:13,168 --> 00:08:15,458
BRAD GREEN: I think they want to see some [INAUDIBLE]

00:08:15,458 --> 00:08:16,770
SPEAKER 1: He guesses.

00:08:16,770 --> 00:08:20,560
MISKO HEVERY: Yes, so actually, I

00:08:20,560 --> 00:08:22,760
have a design doc that I need to actually work on

00:08:22,760 --> 00:08:26,660
with [? Igor ?] starting Monday specifically on this stuff.

00:08:26,660 --> 00:08:28,380
BRAD GREEN: We'll produce some code soon.

00:08:28,380 --> 00:08:29,846
I think that'll help clear it up.

00:08:29,846 --> 00:08:31,470
SPEAKER 1: I think he also wants a hug.

00:08:31,470 --> 00:08:34,909
He waited like two days to hear it, and that was not very good.

00:08:34,909 --> 00:08:36,266
I'm just kidding.

00:08:36,266 --> 00:08:36,766
[LAUGHTER]

00:08:36,766 --> 00:08:38,658
SPEAKER 1: Aaron.

00:08:38,658 --> 00:08:40,077
AUDIENCE: Get over [INAUDIBLE]

00:08:40,077 --> 00:08:41,390
SPEAKER 1: There you go.

00:08:41,390 --> 00:08:43,590
[LAUGHTER]

00:08:43,590 --> 00:08:45,660
SPEAKER 1: Aaron will lazy load anything for you.

00:08:45,660 --> 00:08:48,560
MISKO HEVERY: But just to make it perfectly clear,

00:08:48,560 --> 00:08:51,680
it is very high priority for us to have lazy loading because

00:08:51,680 --> 00:08:53,010
of our internal customers.

00:08:53,010 --> 00:08:54,560
So this is going to happen.

00:08:54,560 --> 00:08:56,010
SPEAKER 1: Sweet.

00:08:56,010 --> 00:08:57,634
[APPLAUSE]

00:08:57,634 --> 00:09:00,010
SPEAKER 1: You guys are working on lazy loading for 1.x

00:09:00,010 --> 00:09:01,970
as well, right?

00:09:01,970 --> 00:09:03,982
You want to talk about that?

00:09:03,982 --> 00:09:06,872
BRIAN FORD: Yeah, so right now, after you've

00:09:06,872 --> 00:09:08,580
bootstrapped your app, there's not really

00:09:08,580 --> 00:09:12,050
a great way to register additional controllers

00:09:12,050 --> 00:09:12,744
or services.

00:09:12,744 --> 00:09:14,160
There are some libraries out there

00:09:14,160 --> 00:09:17,220
that like patch Angular global APIs and like do sneaky things

00:09:17,220 --> 00:09:19,240
to get a hold of the injector.

00:09:19,240 --> 00:09:20,990
But I'm working on a proposal right now

00:09:20,990 --> 00:09:23,550
to make it so there's kind of a first class

00:09:23,550 --> 00:09:25,520
API for how you do this.

00:09:25,520 --> 00:09:27,500
So this isn't like a module loader itself.

00:09:27,500 --> 00:09:29,869
Like I'm not reinventing RequireJS.

00:09:29,869 --> 00:09:32,160
The idea is that you could use something like RequireJS

00:09:32,160 --> 00:09:37,200
with this API to more easily lazy load parts of your app.

00:09:37,200 --> 00:09:39,035
BRAD GREEN: And that's for Angular 1.0?

00:09:39,035 --> 00:09:40,275
BRIAN FORD: Yes.

00:09:40,275 --> 00:09:42,110
IGOR MINOR: And just to add to that,

00:09:42,110 --> 00:09:44,820
it's not like we don't consider lazy loading to be

00:09:44,820 --> 00:09:46,470
unimportant for Angular 1.0.

00:09:46,470 --> 00:09:48,020
It's just the architecture we have,

00:09:48,020 --> 00:09:50,630
if we just hacked in lazy loading

00:09:50,630 --> 00:09:53,240
without thinking about it too much,

00:09:53,240 --> 00:09:56,650
we could introduce issues that would be very hard to debug.

00:09:56,650 --> 00:09:58,640
So while there are other solutions, third party

00:09:58,640 --> 00:10:03,284
solutions, that allow you to lazy load code, by using those,

00:10:03,284 --> 00:10:04,950
you actually lose some of the guarantees

00:10:04,950 --> 00:10:07,150
that you have in the current system, which can

00:10:07,150 --> 00:10:08,940
make your life very unpleasant.

00:10:08,940 --> 00:10:12,420
And this is why we are very hesitant about how we introduce

00:10:12,420 --> 00:10:14,030
this into Angular 1.0.

00:10:14,030 --> 00:10:18,230
Because just the system wasn't designed

00:10:18,230 --> 00:10:21,892
with this use case in mind.

00:10:21,892 --> 00:10:23,140
SPEAKER 1: Cool.

00:10:23,140 --> 00:10:23,640
You're up.

00:10:23,640 --> 00:10:24,700
AUDIENCE: Hey, guys.

00:10:24,700 --> 00:10:28,500
Can you talk about maybe the state of SEO with Angular apps,

00:10:28,500 --> 00:10:30,790
either with Angular 1.0 or Angular 2.0.

00:10:30,790 --> 00:10:32,560
Because we have a couple of use cases

00:10:32,560 --> 00:10:32,920
that are talking about using like

00:10:32,920 --> 00:10:35,378
prerendering and server-side rendering and stuff like that.

00:10:35,378 --> 00:10:38,970
And we're finding that's not often the best way to do it.

00:10:38,970 --> 00:10:41,075
So I thought I would ask the experts.

00:10:41,075 --> 00:10:43,486
SPEAKER 2: Hey, I was actually just recently talking

00:10:43,486 --> 00:10:45,610
to our internal folks, who are the experts on this,

00:10:45,610 --> 00:10:47,690
because we've noticed some issues with JavaScript

00:10:47,690 --> 00:10:48,640
based sites.

00:10:48,640 --> 00:10:51,210
And their answer was, can you please ask the questions

00:10:51,210 --> 00:10:52,300
in a public forum.

00:10:52,300 --> 00:10:54,800
Because you can imagine SEO is a very sensitive topic,

00:10:54,800 --> 00:10:56,991
and whatever advice we give, we want

00:10:56,991 --> 00:10:58,490
to make sure we're giving in public.

00:10:58,490 --> 00:11:00,420
And when I say we, I now mean like the people who actually

00:11:00,420 --> 00:11:01,890
know something rather than me.

00:11:01,890 --> 00:11:03,620
So I would ask you to please post

00:11:03,620 --> 00:11:07,900
on the Angular user's forum and ping one of us on the team.

00:11:07,900 --> 00:11:10,830
The more specifics you can provide about the exact issue

00:11:10,830 --> 00:11:13,420
that you see, the better help we have

00:11:13,420 --> 00:11:15,430
in getting people to work on this.

00:11:15,430 --> 00:11:18,425
And we should have a more specific answer very soon.

00:11:18,425 --> 00:11:19,800
But please ask questions about it

00:11:19,800 --> 00:11:21,130
and do escalate to somebody on the team

00:11:21,130 --> 00:11:22,830
if you're having a specific issue.

00:11:22,830 --> 00:11:25,360
And the team has promised to come up with better guidance

00:11:25,360 --> 00:11:28,010
shortly.

00:11:28,010 --> 00:11:29,690
SPEAKER 1: OK.

00:11:29,690 --> 00:11:31,120
You mentioned that Angular 2.0 is

00:11:31,120 --> 00:11:34,490
going to polyfill Shadow DOM for browsers that don't support it.

00:11:34,490 --> 00:11:37,296
Which versions of IE will this polyfill work in?

00:11:37,296 --> 00:11:39,726
[LAUGHTER]

00:11:39,726 --> 00:11:43,128


00:11:43,128 --> 00:11:46,530
[APPLAUSE]

00:11:46,530 --> 00:11:49,450
BRAD GREEN: So Angular 2.0, we didn't actually

00:11:49,450 --> 00:11:51,990
say it at this conference, but Angular 2.0

00:11:51,990 --> 00:11:56,070
is intended to support evergreen browsers.

00:11:56,070 --> 00:11:59,632
We don't have the matrix for our mobile browsers yet.

00:11:59,632 --> 00:12:01,590
I don't know, Igor, have you finished research?

00:12:01,590 --> 00:12:02,110
No.

00:12:02,110 --> 00:12:03,060
We're still figuring it out.

00:12:03,060 --> 00:12:04,550
Because they're not all evergreen,

00:12:04,550 --> 00:12:06,110
and there's some variations that we want to make sure

00:12:06,110 --> 00:12:07,510
we're covering that well.

00:12:07,510 --> 00:12:09,990
And so probably a little bit beyond evergreen for that.

00:12:09,990 --> 00:12:13,540
But so it's IE11.

00:12:13,540 --> 00:12:15,000
SPEAKER 1: Cool.

00:12:15,000 --> 00:12:15,500
[APPLAUSE]

00:12:15,500 --> 00:12:17,460
BRAD GREEN: And 12, yeah.

00:12:17,460 --> 00:12:22,360


00:12:22,360 --> 00:12:24,830
AUDIENCE: Hello, Hi my name is [? Saul. ?]

00:12:24,830 --> 00:12:29,030
So I was just wondering if we were to start a production

00:12:29,030 --> 00:12:32,315
app like today and we wanted to use the best thing so

00:12:32,315 --> 00:12:36,650
that we're able to be ready for Angular 2.0, what would we use?

00:12:36,650 --> 00:12:42,220
Would we be using the new router today, 1.4 or 1.3?

00:12:42,220 --> 00:12:43,790
What would we be using?

00:12:43,790 --> 00:12:48,730
And then second, well, let's say we're using ES6 on 1.x app,

00:12:48,730 --> 00:12:50,370
is there a good style guide to follow?

00:12:50,370 --> 00:12:52,328
SPEAKER 1: Could you add just like two or three

00:12:52,328 --> 00:12:53,590
more questions?

00:12:53,590 --> 00:12:56,590
[LAUGHTER]

00:12:56,590 --> 00:13:00,350
BRAD GREEN: Yeah, well, if you're getting started today,

00:13:00,350 --> 00:13:02,970
you have to use 1.3, because that's what's out there.

00:13:02,970 --> 00:13:06,090
You will very shortly be able to use 1.4.

00:13:06,090 --> 00:13:08,860
And yes, that's the best path, because you'll

00:13:08,860 --> 00:13:12,100
be closest to 1.5, where we're actually going to have support

00:13:12,100 --> 00:13:14,515
for migrating to Angular 2.0.

00:13:14,515 --> 00:13:15,390
BRIAN FORD: And yes--

00:13:15,390 --> 00:13:17,514
BRAD GREEN: As far as ES6, I don't know the answer.

00:13:17,514 --> 00:13:20,103
BRIAN FORD: Oh, and yes, you should use the new router.

00:13:20,103 --> 00:13:21,186
BRAD GREEN: I forgot that.

00:13:21,186 --> 00:13:23,770
SPEAKER 3: And all the animation stuff too.

00:13:23,770 --> 00:13:26,070
[LAUGHTER]

00:13:26,070 --> 00:13:28,410
BRAD GREEN: So I think we have a request for John Papa,

00:13:28,410 --> 00:13:31,850
where are you, about ES6 and best practices.

00:13:31,850 --> 00:13:32,410
I'm kidding.

00:13:32,410 --> 00:13:35,215


00:13:35,215 --> 00:13:37,846
IGOR MINOR: So we've also seen some projects

00:13:37,846 --> 00:13:39,470
from the community, where they show how

00:13:39,470 --> 00:13:42,197
to use ES6 with Angular 1.0.

00:13:42,197 --> 00:13:45,270
And if you search for some, you'll find them.

00:13:45,270 --> 00:13:48,800
And I think, Miho also showed some of this stuff earlier

00:13:48,800 --> 00:13:51,600
today.

00:13:51,600 --> 00:13:55,190
SPEAKER 1: OK, any updates on Batarang?

00:13:55,190 --> 00:13:59,175
Are you working on a dedicated debug tool for Angular?

00:13:59,175 --> 00:14:02,480
BRIAN FORD: So my time is split between like a million

00:14:02,480 --> 00:14:03,772
different things.

00:14:03,772 --> 00:14:05,480
I'm very good at coming up with new ideas

00:14:05,480 --> 00:14:07,320
for things to work on.

00:14:07,320 --> 00:14:10,154
But the downside is that lately, I've-- well,

00:14:10,154 --> 00:14:11,070
that's not a downside.

00:14:11,070 --> 00:14:13,819
But lately, I've been working entirely on the new router,

00:14:13,819 --> 00:14:15,360
because I think it's super important.

00:14:15,360 --> 00:14:17,380
And that means that I've had a little bit

00:14:17,380 --> 00:14:18,720
less time to work on Batarang.

00:14:18,720 --> 00:14:20,682
If you're interested in helping me with that,

00:14:20,682 --> 00:14:22,890
I would really like to get more people working on it.

00:14:22,890 --> 00:14:25,120
Because it's clear that I don't have enough time

00:14:25,120 --> 00:14:27,470
to give it the attention that it deserves

00:14:27,470 --> 00:14:29,210
based on community interest.

00:14:29,210 --> 00:14:32,200
So I have a long list of things that I want to do.

00:14:32,200 --> 00:14:36,040
And anyone that's actually interested, email me,

00:14:36,040 --> 00:14:37,330
and we can set up a time.

00:14:37,330 --> 00:14:39,660
Like, I'm happy to pair via Google Hangouts

00:14:39,660 --> 00:14:42,150
and show you how stuff works.

00:14:42,150 --> 00:14:45,150
And yeah, I do want to push out more releases.

00:14:45,150 --> 00:14:46,820
And yes, I do want to do something

00:14:46,820 --> 00:14:48,814
like Batarang for Angular 2.0.

00:14:48,814 --> 00:14:50,480
Julie and I actually talked a little bit

00:14:50,480 --> 00:14:53,095
on what the API would look like for instrumentation

00:14:53,095 --> 00:14:55,050
for Angular 2.0.

00:14:55,050 --> 00:14:57,260
And so we expect to have more concrete ideas

00:14:57,260 --> 00:14:58,995
for how this will work shortly.

00:14:58,995 --> 00:15:01,701
SPEAKER 1: So Brian does all the work, Igor meditates.

00:15:01,701 --> 00:15:02,992
What do all the rest of you do?

00:15:02,992 --> 00:15:05,779


00:15:05,779 --> 00:15:08,070
IGOR MINOR: I just want to add to that, that I actually

00:15:08,070 --> 00:15:08,610
screwed up.

00:15:08,610 --> 00:15:10,068
Because I was supposed to reach out

00:15:10,068 --> 00:15:14,660
to the author of ng-inspector and talk to him or her

00:15:14,660 --> 00:15:17,220
whether it would possible to unite and build

00:15:17,220 --> 00:15:19,750
just a single extension for debugging Angular.

00:15:19,750 --> 00:15:23,560
But I forgot about it or got distracted or something.

00:15:23,560 --> 00:15:27,875
I was not paying attention to here now.

00:15:27,875 --> 00:15:28,990
[LAUGHING]

00:15:28,990 --> 00:15:32,710
So if the author is listening to us, would love to talk to you

00:15:32,710 --> 00:15:36,030
and see if we can just get together and build just one

00:15:36,030 --> 00:15:36,900
extension.

00:15:36,900 --> 00:15:38,050
We care about this a lot.

00:15:38,050 --> 00:15:40,000
But there's a lot of stuff we're working on.

00:15:40,000 --> 00:15:41,721
So this is one area where we need help.

00:15:41,721 --> 00:15:42,220
Thank you.

00:15:42,220 --> 00:15:45,447


00:15:45,447 --> 00:15:47,200
AUDIENCE: So I saw in the code base

00:15:47,200 --> 00:15:50,330
you have things like star for each in the markup.

00:15:50,330 --> 00:15:53,575
Are those things that developers can create?

00:15:53,575 --> 00:15:55,715
MISKO HEVERY: Yes.

00:15:55,715 --> 00:15:56,590
SPEAKER 1: Wonderful.

00:15:56,590 --> 00:15:58,517
Yes, everybody.

00:15:58,517 --> 00:16:02,190
MISKO HEVERY: So in Angular 2.0, we took the concept directive

00:16:02,190 --> 00:16:04,430
and we split it up into use case.

00:16:04,430 --> 00:16:08,140
The use case is you can have a component, which are something

00:16:08,140 --> 00:16:09,370
you're familiar with.

00:16:09,370 --> 00:16:11,260
You can also have a decorator, which

00:16:11,260 --> 00:16:13,130
is kind of a component minus the template

00:16:13,130 --> 00:16:14,810
with a couple of restrictions.

00:16:14,810 --> 00:16:19,120
And there is this new one called the view port, which

00:16:19,120 --> 00:16:23,480
is things for if statements, for each switches,

00:16:23,480 --> 00:16:26,770
and so on, which you can create yourself as well.

00:16:26,770 --> 00:16:29,698


00:16:29,698 --> 00:16:31,610
AUDIENCE: I had a second question.

00:16:31,610 --> 00:16:34,420
So you're using TypeScript now.

00:16:34,420 --> 00:16:36,700
How heavily do you lean on types internally?

00:16:36,700 --> 00:16:39,415
Are you primarily using types for external APIs?

00:16:39,415 --> 00:16:41,620
Are you using types in every method?

00:16:41,620 --> 00:16:42,827
Is it mandatory?

00:16:42,827 --> 00:16:44,160
What are your feelings on types?

00:16:44,160 --> 00:16:46,530
SPEAKER 1: It's just when they script,

00:16:46,530 --> 00:16:48,578
that's when they use types.

00:16:48,578 --> 00:16:49,556
Next question.

00:16:49,556 --> 00:16:52,490
Just kidding.

00:16:52,490 --> 00:16:59,340
MISKO HEVERY: So we are nothing as much of a diligent job

00:16:59,340 --> 00:17:01,130
as we should here on types.

00:17:01,130 --> 00:17:05,300
The goal is that we would type all public APIs.

00:17:05,300 --> 00:17:07,670
So when we generate the documentation,

00:17:07,670 --> 00:17:10,300
you would have that information so that you can easier

00:17:10,300 --> 00:17:12,530
call and work on, et cetera.

00:17:12,530 --> 00:17:16,490
Within Angular itself, which is the private APIs,

00:17:16,490 --> 00:17:21,859
we rely a lot on-- it's not reflection, what is it called?

00:17:21,859 --> 00:17:23,089
Inference, thank you.

00:17:23,089 --> 00:17:26,413
Rely a lot on inference.

00:17:26,413 --> 00:17:27,829
But the external API is definitely

00:17:27,829 --> 00:17:29,329
going to be type, because we need it

00:17:29,329 --> 00:17:31,790
for both the definitely typed output,

00:17:31,790 --> 00:17:34,980
also for documentation, and also for Dart folks.

00:17:34,980 --> 00:17:37,365
So it has to be.

00:17:37,365 --> 00:17:39,820
SPEAKER 1: OK, next question from reddit.

00:17:39,820 --> 00:17:43,360
I love webpack, but working with modules in Angular and webpack

00:17:43,360 --> 00:17:44,320
is a bit hacky.

00:17:44,320 --> 00:17:48,208
Will Angular 2.0 work better with webpack?

00:17:48,208 --> 00:17:50,072
BRAD GREEN: Who knows what webpack is?

00:17:50,072 --> 00:17:52,780
BRIAN FORD: Am I really the only that knows what it is?

00:17:52,780 --> 00:17:55,417
So webpack just uses like CommonJS, doesn't it?

00:17:55,417 --> 00:17:56,250
So it consumes that.

00:17:56,250 --> 00:17:59,150
So we actually just landed better support for CommonJS

00:17:59,150 --> 00:18:00,420
in Angular 1.0.

00:18:00,420 --> 00:18:03,937
So I assume that greatly helps the situation.

00:18:03,937 --> 00:18:05,770
It also includes, if I understand correctly,

00:18:05,770 --> 00:18:08,860
like a loader, like something client side that helps you

00:18:08,860 --> 00:18:10,602
figure out when to load stuff.

00:18:10,602 --> 00:18:12,560
And so this is something that I'm looking into,

00:18:12,560 --> 00:18:18,420
both this and RequireJS and AMD for this

00:18:18,420 --> 00:18:22,440
API that I've been working on to improve lazily

00:18:22,440 --> 00:18:24,470
injecting in Angular 1.0.

00:18:24,470 --> 00:18:27,480
So the hope is that, yes, the situational will be better.

00:18:27,480 --> 00:18:29,049
I don't have exact details right now.

00:18:29,049 --> 00:18:31,340
But this is another thing, where, if you're interested,

00:18:31,340 --> 00:18:35,280
please chime in on GitHub maybe with some concrete examples.

00:18:35,280 --> 00:18:36,250
Did you have something?

00:18:36,250 --> 00:18:38,430
IGOR MINOR: Yeah, this is a good example of technology

00:18:38,430 --> 00:18:40,920
that we don't have experience-- first-hand experience with.

00:18:40,920 --> 00:18:43,160
And this is where the community can help us.

00:18:43,160 --> 00:18:46,780
You can help us show that supporting this technology

00:18:46,780 --> 00:18:49,000
is actually very valuable and you care about it.

00:18:49,000 --> 00:18:50,690
And you can get in touch with us.

00:18:50,690 --> 00:18:52,860
And then we can discuss what other necessary steps

00:18:52,860 --> 00:18:53,790
we can take.

00:18:53,790 --> 00:18:56,500
Because we cannot just understand every single

00:18:56,500 --> 00:18:57,410
technology out there.

00:18:57,410 --> 00:18:58,826
There's just way too many of them.

00:18:58,826 --> 00:19:02,506


00:19:02,506 --> 00:19:06,200
AUDIENCE: Hey, Owen, Angular 2.0 data persistence,

00:19:06,200 --> 00:19:07,686
there is a design doc.

00:19:07,686 --> 00:19:09,560
I think, Jeff Cross was sort of running that.

00:19:09,560 --> 00:19:11,345
Sort of wondering what the status is,

00:19:11,345 --> 00:19:14,180
sorry, of data persistence in Angular 2.0.

00:19:14,180 --> 00:19:15,423
Is it still a priority?

00:19:15,423 --> 00:19:18,006
Kind of up there along the lines like the router and that sort

00:19:18,006 --> 00:19:18,955
of stuff.

00:19:18,955 --> 00:19:21,250
JEFF CROSS: Yeah, data access and persistence

00:19:21,250 --> 00:19:22,280
are still a priority.

00:19:22,280 --> 00:19:23,750
Offline is a priority.

00:19:23,750 --> 00:19:26,150
Our approach changed since writing the design doc

00:19:26,150 --> 00:19:29,010
and since a year or so ago.

00:19:29,010 --> 00:19:31,030
I think our approach now is more making

00:19:31,030 --> 00:19:33,790
sure the core is friendly to lots of different approaches.

00:19:33,790 --> 00:19:36,310
And I'm working with lots of different backend frameworks

00:19:36,310 --> 00:19:39,820
and different frontend libraries to start experimenting

00:19:39,820 --> 00:19:42,190
with Angular 2.0 and see how well it plays

00:19:42,190 --> 00:19:43,980
with these different technologies,

00:19:43,980 --> 00:19:47,791
like Meteor, Firebase, Breeze, and a few others.

00:19:47,791 --> 00:19:48,290
What's that?

00:19:48,290 --> 00:19:49,081
BRAD GREEN: Falcor?

00:19:49,081 --> 00:19:50,430
JEFF CROSS: Falcor, yeah.

00:19:50,430 --> 00:19:53,830
So right now, I think we've got either implementations or good

00:19:53,830 --> 00:19:55,440
designs how to work with most of these

00:19:55,440 --> 00:19:57,315
and how to accept the kind of data structures

00:19:57,315 --> 00:19:59,670
they use for Async.

00:19:59,670 --> 00:20:01,860
And I'll be doing more experimenting

00:20:01,860 --> 00:20:03,800
and see if there are some common patterns that

00:20:03,800 --> 00:20:06,950
emerge that there's still some area to add,

00:20:06,950 --> 00:20:08,880
libraries, or ways to improve on it.

00:20:08,880 --> 00:20:11,330
But that's a little bit how the approach has changed.

00:20:11,330 --> 00:20:13,916


00:20:13,916 --> 00:20:14,960
SPEAKER 1: All right.

00:20:14,960 --> 00:20:17,020
If I decide to go the TypeScript route,

00:20:17,020 --> 00:20:18,860
am I going to be forced to use Tracer

00:20:18,860 --> 00:20:21,050
to transpile my annotated code?

00:20:21,050 --> 00:20:24,282
Any chance I'll be able to use Babbel?

00:20:24,282 --> 00:20:26,240
BRAD GREEN: Jonathan, do you want to take that?

00:20:26,240 --> 00:20:28,310
JONATHAN: Sure.

00:20:28,310 --> 00:20:29,480
Such a good question.

00:20:29,480 --> 00:20:31,130
And this actually came up last night

00:20:31,130 --> 00:20:33,380
with people asking about TypeScript.

00:20:33,380 --> 00:20:38,890
So there's kind of two parts, two answers to that question.

00:20:38,890 --> 00:20:41,700
The first one is, if you want to have full type checking

00:20:41,700 --> 00:20:45,190
on your code, running it through the TypeScript compiler

00:20:45,190 --> 00:20:46,800
and doing your type check that way,

00:20:46,800 --> 00:20:50,410
you'll get the best results.

00:20:50,410 --> 00:20:54,170
I just started talking with one of the Babbel guys about ways

00:20:54,170 --> 00:20:56,730
that the TypeScript team can collaborate with Babbel.

00:20:56,730 --> 00:21:00,500
So that is very fresh as of like this morning.

00:21:00,500 --> 00:21:03,034
So we're looking at ways to work with other transpilers

00:21:03,034 --> 00:21:05,200
so that you can say, all right, I'll check with one,

00:21:05,200 --> 00:21:07,290
but sometimes I just want to transpile.

00:21:07,290 --> 00:21:09,290
And I don't really want to think about the types

00:21:09,290 --> 00:21:10,930
and just get them out of the way.

00:21:10,930 --> 00:21:13,140
So we're looking at possible ways we can collaborate.

00:21:13,140 --> 00:21:17,670


00:21:17,670 --> 00:21:19,420
AUDIENCE: If I were going to teach Angular

00:21:19,420 --> 00:21:22,270
to someone who had never seen it all, never been exposed to it,

00:21:22,270 --> 00:21:25,000
what version do you think would be best start with right now?

00:21:25,000 --> 00:21:26,880
And what pieces do you think would be best

00:21:26,880 --> 00:21:29,235
for them to start learning?

00:21:29,235 --> 00:21:33,005


00:21:33,005 --> 00:21:35,130
BRAD GREEN: You know, we have some good friends who

00:21:35,130 --> 00:21:37,080
write courses on this stuff.

00:21:37,080 --> 00:21:43,320
But no, so the question is, what version do I start with?

00:21:43,320 --> 00:21:47,540
I would start with the one that's released, so that's 1.3.

00:21:47,540 --> 00:21:51,580
But as soon as 1.4 comes out, that's the one to start with.

00:21:51,580 --> 00:21:55,585
Is the question like how you start building these things?

00:21:55,585 --> 00:21:56,710
AUDIENCE: A super beginner.

00:21:56,710 --> 00:21:58,541
BRAD GREEN: Super beginner.

00:21:58,541 --> 00:22:00,290
I'd have to know what their background is,

00:22:00,290 --> 00:22:04,610
but there are many good online courses, Code School,

00:22:04,610 --> 00:22:10,025
Pluralsight, egghead.io, check them out.

00:22:10,025 --> 00:22:12,300
SPEAKER 1: All right, does Angular have any plans

00:22:12,300 --> 00:22:18,390
to support and adopt ES6 Generators, and Async 08.

00:22:18,390 --> 00:22:20,200
BRIAN FORD: So I can sort of answer this.

00:22:20,200 --> 00:22:25,140
I actually use Async 08 in the test for the new router,

00:22:25,140 --> 00:22:26,440
because they're super cool.

00:22:26,440 --> 00:22:28,210
So really, it's more of a question

00:22:28,210 --> 00:22:32,660
of does your transpiler support it.

00:22:32,660 --> 00:22:33,720
As far as like.

00:22:33,720 --> 00:22:37,200
Will we ever make it so you have to do this?

00:22:37,200 --> 00:22:38,926
I don't think so.

00:22:38,926 --> 00:22:41,300
But the cool thing about the kind of transpilier approach

00:22:41,300 --> 00:22:43,750
is that you can use any of these features that you want.

00:22:43,750 --> 00:22:46,920
And as long as you can produce ES5 equivalent,

00:22:46,920 --> 00:22:49,307
everyone can agree on and everything can run together.

00:22:49,307 --> 00:22:51,640
So I actually think that these features are really cool,

00:22:51,640 --> 00:22:53,806
and you should check them out.

00:22:53,806 --> 00:22:57,040
IGOR MINOR: So Tracer already supports all of this stuff.

00:22:57,040 --> 00:22:59,140
I don't know what's the situation with Babbel.

00:22:59,140 --> 00:23:01,260
And maybe, Jonathan can talk about their plans

00:23:01,260 --> 00:23:02,696
with TypeScript.

00:23:02,696 --> 00:23:05,630
JONATHAN: So that both Generators and Async 08,

00:23:05,630 --> 00:23:08,780
I think I mentioned earlier this morning, are coming in.

00:23:08,780 --> 00:23:11,110
So 1.5 is the next version of TypeScript,

00:23:11,110 --> 00:23:14,740
and 1.6 is the following one, obviously.

00:23:14,740 --> 00:23:18,103
So 1.6 will have Generator and Async 08 support.

00:23:18,103 --> 00:23:21,600
SPEAKER 1: I think the question is also wondering,

00:23:21,600 --> 00:23:23,260
so Angular really adopted Promises.

00:23:23,260 --> 00:23:25,740
And so a lot of the core APIs are based on Promises.

00:23:25,740 --> 00:23:28,280
Will the same thing happen with Async 08 and Generators?

00:23:28,280 --> 00:23:30,890


00:23:30,890 --> 00:23:33,870
IGOR MINOR: It's a good question.

00:23:33,870 --> 00:23:37,040
So I'm personally sold on Observables,

00:23:37,040 --> 00:23:40,710
and I would like to see them throughout the framework.

00:23:40,710 --> 00:23:43,150
One of the experiments we still have to go through

00:23:43,150 --> 00:23:46,080
is to try to replace all of the Promise APIs

00:23:46,080 --> 00:23:49,860
with Observable APIs and see if that makes sense.

00:23:49,860 --> 00:23:51,790
This is still in the early stages,

00:23:51,790 --> 00:23:54,320
so we don't know if this is actually something

00:23:54,320 --> 00:23:55,530
that we want to do.

00:23:55,530 --> 00:23:59,030
But I think it's going to be a very interesting experiment.

00:23:59,030 --> 00:24:02,630
And if it does work out, I think we could get

00:24:02,630 --> 00:24:03,951
a lot of benefits out of that.

00:24:03,951 --> 00:24:05,575
MISKO HEVERY: I'd like to add something

00:24:05,575 --> 00:24:08,520
to it, which is that there's two parts to this question.

00:24:08,520 --> 00:24:10,670
One is, what is Angular's API going to be

00:24:10,670 --> 00:24:12,420
and how are we going to use it internally?

00:24:12,420 --> 00:24:15,130
And as Igor pointed out, we'd be thinking about

00:24:15,130 --> 00:24:18,250
whether we want to switch from Promises to Observables.

00:24:18,250 --> 00:24:20,950
And there's a second question which is, as a developer,

00:24:20,950 --> 00:24:24,727
can I use Promises or Async 08 and all the other stuff?

00:24:24,727 --> 00:24:26,810
And the second question is I think more important,

00:24:26,810 --> 00:24:28,410
because that's what you will be writing.

00:24:28,410 --> 00:24:30,368
And we want to make sure that you have a choice

00:24:30,368 --> 00:24:32,186
to do all of the above.

00:24:32,186 --> 00:24:34,580
SPEAKER 1: Awesome.

00:24:34,580 --> 00:24:36,681
OK, right here.

00:24:36,681 --> 00:24:38,580
AUDIENCE: Is server-side rendering

00:24:38,580 --> 00:24:42,336
going to be a thing in Angular 2.0?

00:24:42,336 --> 00:24:46,140
BRAD GREEN: Misko, you have some thoughts on this.

00:24:46,140 --> 00:24:49,190
MISKO HEVERY: I do.

00:24:49,190 --> 00:24:52,152
IGOR MINOR: Be careful what you say now.

00:24:52,152 --> 00:24:55,104
[LAUGHTER]

00:24:55,104 --> 00:24:57,564


00:24:57,564 --> 00:25:00,750
MISKO HEVERY: So we have a lot of things in Angular 2.0

00:25:00,750 --> 00:25:04,416
to make it possible to run things on a server.

00:25:04,416 --> 00:25:06,790
To start with, we can, for example, run the HTML compiler

00:25:06,790 --> 00:25:09,593
in offline mode, ahead of-- before you ship it

00:25:09,593 --> 00:25:10,176
to the client.

00:25:10,176 --> 00:25:12,634


00:25:12,634 --> 00:25:15,300
We make sure that-- we have this thing called a ProtoView, which

00:25:15,300 --> 00:25:16,680
is an intermediate representation

00:25:16,680 --> 00:25:19,190
of the compiled data set.

00:25:19,190 --> 00:25:21,060
That thing is written specifically in a way

00:25:21,060 --> 00:25:24,260
that it's serializable, so that we can do it offline

00:25:24,260 --> 00:25:27,120
and we can ship it down serializable way.

00:25:27,120 --> 00:25:31,000
The idea of rendering at the server, because we're doing

00:25:31,000 --> 00:25:33,800
work to make sure that the HTML compiler can run offline, which

00:25:33,800 --> 00:25:36,540
means out of the browser, you could

00:25:36,540 --> 00:25:38,150
imagine that it could run on a server

00:25:38,150 --> 00:25:41,980
and generate the code, because we can emulate Shadow DOM.

00:25:41,980 --> 00:25:44,470
Therefore, we can spit out all the HTML.

00:25:44,470 --> 00:25:46,670
And because we're doing the Shadow DOM thing

00:25:46,670 --> 00:25:48,628
and because we've made this other choice, which

00:25:48,628 --> 00:25:51,819
says that the index.html we never touch it.

00:25:51,819 --> 00:25:54,110
All of the application actually runs in the Shadow DOM.

00:25:54,110 --> 00:25:55,780
And because they're projections, the Light DOM

00:25:55,780 --> 00:25:56,613
can get reprojected.

00:25:56,613 --> 00:25:58,840
It's too much information, I know.

00:25:58,840 --> 00:26:01,682
All of those things are I would say steps

00:26:01,682 --> 00:26:02,640
in the right direction.

00:26:02,640 --> 00:26:04,760
Where are we going to take the actual final step

00:26:04,760 --> 00:26:06,030
and put it all together?

00:26:06,030 --> 00:26:09,562
That remains to be seen.

00:26:09,562 --> 00:26:11,380
BRAD GREEN: Maybe.

00:26:11,380 --> 00:26:14,230
[LAUGHTER]

00:26:14,230 --> 00:26:16,605
[APPLAUSE]

00:26:16,605 --> 00:26:18,560
SPEAKER 1: All right, since Angular 2.0 can

00:26:18,560 --> 00:26:20,310
run via Web Workers, do you think

00:26:20,310 --> 00:26:23,210
it wouldn't be too far fetched to have multiple Angular 2.0

00:26:23,210 --> 00:26:26,530
apps running in their own threads, providing view outputs

00:26:26,530 --> 00:26:27,395
when needed.

00:26:27,395 --> 00:26:29,190
BRAD GREEN: Well, I don't know if we have

00:26:29,190 --> 00:26:30,315
an answer to that question.

00:26:30,315 --> 00:26:32,740
But [? Yeger ?] here is working on the Web Workers thing.

00:26:32,740 --> 00:26:34,904
You want to talk about it?

00:26:34,904 --> 00:26:35,860
SPEAKER 4: Sure.

00:26:35,860 --> 00:26:37,443
MISKO HEVERY: I just wanted to clarify

00:26:37,443 --> 00:26:38,728
the question is not true.

00:26:38,728 --> 00:26:43,060
SPEAKER 4: Yeah, we have some experiments outside of Angular,

00:26:43,060 --> 00:26:47,030
where we sort of see the value of Web Workers.

00:26:47,030 --> 00:26:49,230
And as Misko pointed out earlier,

00:26:49,230 --> 00:26:52,760
we can run chunks of Angular on the server, which

00:26:52,760 --> 00:26:55,780
means not on the UI thread, which means we can also

00:26:55,780 --> 00:26:57,180
run them on the Web Worker.

00:26:57,180 --> 00:26:59,970
So I think the stars are aligning,

00:26:59,970 --> 00:27:04,639
but there's a lot of work remaining to be done.

00:27:04,639 --> 00:27:06,180
MISKO HEVERY: I just want to clarify.

00:27:06,180 --> 00:27:09,320
The question said, since Angular can run on Web Worker,

00:27:09,320 --> 00:27:11,400
and that's not quite true yet.

00:27:11,400 --> 00:27:13,460
We are thinking about it really, really hard.

00:27:13,460 --> 00:27:14,750
SPEAKER 1: Hey, we saw a talk.

00:27:14,750 --> 00:27:16,450
It was in a Web Worker, man.

00:27:16,450 --> 00:27:18,865
[LAUGHTER]

00:27:18,865 --> 00:27:21,210
SPEAKER 4: We are talking to Glib too actually.

00:27:21,210 --> 00:27:22,574
SPEAKER 1: OK, cool.

00:27:22,574 --> 00:27:24,240
MISKO HEVERY: So yes, we would very much

00:27:24,240 --> 00:27:25,281
like to have that happen.

00:27:25,281 --> 00:27:27,331
SPEAKER 1: It's a way cool idea, right?

00:27:27,331 --> 00:27:29,720
OK, let's take one local.

00:27:29,720 --> 00:27:32,100
AUDIENCE: Hey, yeah, so this question

00:27:32,100 --> 00:27:35,120
was actually brought up in the podcast earlier today.

00:27:35,120 --> 00:27:36,820
And it was something that I was thinking

00:27:36,820 --> 00:27:39,180
would be somewhat obvious.

00:27:39,180 --> 00:27:42,690
And I thought that it might be answered in the ChangeDetection

00:27:42,690 --> 00:27:44,190
talk, as well too.

00:27:44,190 --> 00:27:45,730
And it kind of was.

00:27:45,730 --> 00:27:50,090
But the question is just, in the new Angular,

00:27:50,090 --> 00:27:53,580
how are we going to be able to deal with forms and just ng

00:27:53,580 --> 00:27:54,080
input?

00:27:54,080 --> 00:27:57,020
And how is that going to make it easier

00:27:57,020 --> 00:27:59,450
for us to be able just to see the things that we

00:27:59,450 --> 00:28:02,110
love and just the curly brackets and the data

00:28:02,110 --> 00:28:05,390
just moving across and just writing directly to the model

00:28:05,390 --> 00:28:07,290
inside of a form or inside of anything

00:28:07,290 --> 00:28:10,630
that is writing, maybe up the ChangeDetection tree

00:28:10,630 --> 00:28:13,029
or down the ChangeDetection tree anywhere?

00:28:13,029 --> 00:28:15,445
Just I'm wondering if that's going to be easier or harder.

00:28:15,445 --> 00:28:16,792
Hopefully, easier.

00:28:16,792 --> 00:28:20,340
MISKO HEVERY: It should be the same or easier.

00:28:20,340 --> 00:28:23,626
So we are actually working on forms,

00:28:23,626 --> 00:28:25,000
and we want to make sure that you

00:28:25,000 --> 00:28:26,710
can do the same exact kind of tricks

00:28:26,710 --> 00:28:28,960
like you can do today with the coloration of the forms

00:28:28,960 --> 00:28:30,040
and so on.

00:28:30,040 --> 00:28:33,775
Now the differences, we cannot use ngModel the way it is,

00:28:33,775 --> 00:28:36,400
because it's bi-directional and we have changed a couple things

00:28:36,400 --> 00:28:39,740
and that particular paradigm does not work.

00:28:39,740 --> 00:28:43,120
But you will be able to simply annotate your form

00:28:43,120 --> 00:28:44,860
and get the data on the right location

00:28:44,860 --> 00:28:47,852
probably through Observables.

00:28:47,852 --> 00:28:49,310
The other point I'd like to make is

00:28:49,310 --> 00:28:52,210
that forms are in this very weird state in Angular 1.x,

00:28:52,210 --> 00:28:55,970
which is that, when you declare them, they're declared in HTML.

00:28:55,970 --> 00:28:58,220
And as a result, you can't unit-test your controllers.

00:28:58,220 --> 00:28:59,750
So in order to unit-test your controller,

00:28:59,750 --> 00:29:01,050
you actually have to have the form present.

00:29:01,050 --> 00:29:02,633
Because the form contains information,

00:29:02,633 --> 00:29:05,040
like what are the items in the selection,

00:29:05,040 --> 00:29:08,210
whether or not a particular form is required or not.

00:29:08,210 --> 00:29:11,870
And there's many other situations like that,

00:29:11,870 --> 00:29:14,530
where you cannot actually properly unit-test

00:29:14,530 --> 00:29:15,150
a controller.

00:29:15,150 --> 00:29:17,540
So one of the things we're looking at

00:29:17,540 --> 00:29:20,600
is, can we move this metadata into the controller

00:29:20,600 --> 00:29:23,396
so the controller is truly independent of the view

00:29:23,396 --> 00:29:25,270
and we can actually unit-test the controller.

00:29:25,270 --> 00:29:27,980
We can assume that if you have a username and password,

00:29:27,980 --> 00:29:30,200
we can assert that the username is an email address,

00:29:30,200 --> 00:29:32,220
and then the passwords are equivalent.

00:29:32,220 --> 00:29:34,610
And we can do all of this without actually

00:29:34,610 --> 00:29:37,406
having the HTML be present.

00:29:37,406 --> 00:29:38,780
So there's many things that we're

00:29:38,780 --> 00:29:41,330
doing to make this easier.

00:29:41,330 --> 00:29:43,789
But the implication of it is that it

00:29:43,789 --> 00:29:44,830
is going to be different.

00:29:44,830 --> 00:29:50,820
And I would ask you to have an open mind when you look at it.

00:29:50,820 --> 00:29:53,530
SPEAKER 1: Let's take another-- oh, never mind.

00:29:53,530 --> 00:29:54,970
Skip this one.

00:29:54,970 --> 00:29:55,820
Next person.

00:29:55,820 --> 00:29:57,805
BRAD GREEN: We got to skip John.

00:29:57,805 --> 00:29:59,255
SPEAKER 1: Just kidding, John.

00:29:59,255 --> 00:30:02,181
AUDIENCE: Hi, everyone.

00:30:02,181 --> 00:30:02,680
So question.

00:30:02,680 --> 00:30:05,750
SPEAKER 5: Hey look, it's John from egghead.io.

00:30:05,750 --> 00:30:09,980
AUDIENCE: So question, probably mostly for Brad.

00:30:09,980 --> 00:30:13,780
Considering developer salaries and the sheer amount of time

00:30:13,780 --> 00:30:18,150
that Angular has existed, how much money to date

00:30:18,150 --> 00:30:21,420
would you say Google has invested in Angular?

00:30:21,420 --> 00:30:24,480
And how do you justify that to your boss?

00:30:24,480 --> 00:30:26,150
Follow up question.

00:30:26,150 --> 00:30:30,830
How do you help us here justify to our bosses

00:30:30,830 --> 00:30:33,800
to spend time during work to contribute to open source

00:30:33,800 --> 00:30:35,085
and to help you guys grow?

00:30:35,085 --> 00:30:37,031
SPEAKER 1: Good question.

00:30:37,031 --> 00:30:39,516
[APPLAUSE]

00:30:39,516 --> 00:30:42,995


00:30:42,995 --> 00:30:46,080
BRAD GREEN: OK, so two parts to this question.

00:30:46,080 --> 00:30:49,890
So the first part is, how did I, as a manager,

00:30:49,890 --> 00:30:52,270
decide to invest Google's money in this?

00:30:52,270 --> 00:30:56,570
And part of the answer is Google actually

00:30:56,570 --> 00:30:58,780
invests a lot of trust in their management

00:30:58,780 --> 00:31:01,480
that they will do the right thing.

00:31:01,480 --> 00:31:05,650
And we do it because not that we think that we always

00:31:05,650 --> 00:31:07,680
make the right decisions, but because we

00:31:07,680 --> 00:31:10,096
hire really smart people that are passionate about solving

00:31:10,096 --> 00:31:10,760
problems.

00:31:10,760 --> 00:31:13,607
And we have to experiment if we want to have good things.

00:31:13,607 --> 00:31:15,440
And so I just happen to be in an environment

00:31:15,440 --> 00:31:16,773
where great things are possible.

00:31:16,773 --> 00:31:20,600
And I think being in an environment where

00:31:20,600 --> 00:31:23,109
our work is not tied to the revenue is awesome.

00:31:23,109 --> 00:31:25,150
Because I get to do things like make partnerships

00:31:25,150 --> 00:31:29,260
with all kinds of cool companies and talk to all of you folks

00:31:29,260 --> 00:31:29,920
regularly.

00:31:29,920 --> 00:31:33,040
OK, second part of the question, which

00:31:33,040 --> 00:31:34,890
is, how do you guys justify to your bosses?

00:31:34,890 --> 00:31:39,280
Well, so I don't know what your bosses value.

00:31:39,280 --> 00:31:42,030
But the thing about it is a little bit meta.

00:31:42,030 --> 00:31:44,730
But if you want to reap the benefits of open source,

00:31:44,730 --> 00:31:46,430
the deal is you actually-- some people

00:31:46,430 --> 00:31:47,910
have to contribute to it.

00:31:47,910 --> 00:31:50,370
And really, it's better if everybody contributes.

00:31:50,370 --> 00:31:52,367
So Igor's example earlier of this--

00:31:52,367 --> 00:31:54,700
I forget what the name of the technology was for loading

00:31:54,700 --> 00:31:56,980
modules-- but we don't know it.

00:31:56,980 --> 00:31:59,540
Your thing will not be supported,

00:31:59,540 --> 00:32:01,560
your use case will not work, if we don't

00:32:01,560 --> 00:32:02,780
know what these things are.

00:32:02,780 --> 00:32:05,520
So my justification would be, if I did this,

00:32:05,520 --> 00:32:08,270
that this is a community effort and we have to be part of it

00:32:08,270 --> 00:32:11,092
if we want to reap the benefits from it.

00:32:11,092 --> 00:32:12,050
AUDIENCE: Works for me.

00:32:12,050 --> 00:32:14,978


00:32:14,978 --> 00:32:17,906
[APPLAUSE]

00:32:17,906 --> 00:32:19,858


00:32:19,858 --> 00:32:22,930
SPEAKER 1: Wait, and how did you feel when you realized

00:32:22,930 --> 00:32:24,400
you made the wrong investment?

00:32:24,400 --> 00:32:26,352
[LAUGHTER]

00:32:26,352 --> 00:32:28,700
BRAD GREEN: I will tell that story later

00:32:28,700 --> 00:32:30,600
after the conference.

00:32:30,600 --> 00:32:31,650
Things go up and down.

00:32:31,650 --> 00:32:33,400
We've had several times where we thought--

00:32:33,400 --> 00:32:34,441
SPEAKER 1: I was kidding.

00:32:34,441 --> 00:32:36,480
BRAD GREEN: --oh, man, what did we do?

00:32:36,480 --> 00:32:39,002
Not right now.

00:32:39,002 --> 00:32:41,930
AUDIENCE: So I haven't heard anything about filters

00:32:41,930 --> 00:32:43,270
in Angular 2.0 yet.

00:32:43,270 --> 00:32:44,906
Is there a plan to bring these in?

00:32:44,906 --> 00:32:46,780
Or is there going to be a different solution?

00:32:46,780 --> 00:32:47,988
SPEAKER 1: They got filtered.

00:32:47,988 --> 00:32:50,165
AUDIENCE: What is happening with filters?

00:32:50,165 --> 00:32:52,530
MISKO HEVERY: It turns out we named them wrong.

00:32:52,530 --> 00:32:55,142
The filters are actually formatters in Angular--

00:32:55,142 --> 00:32:56,006
BRAD GREEN: No, the filter is actually a filter.

00:32:56,006 --> 00:32:58,080
MISKO HEVERY: The filter filter is filter,

00:32:58,080 --> 00:33:00,294
but the filter of the pipe is actually a formatter.

00:33:00,294 --> 00:33:01,710
So it's really a formatter filter.

00:33:01,710 --> 00:33:02,315
You follow?

00:33:02,315 --> 00:33:04,756
[LAUGHTER]

00:33:04,756 --> 00:33:07,720
[APPLAUSE]

00:33:07,720 --> 00:33:09,202
SPEAKER 1: Now, it makes sense.

00:33:09,202 --> 00:33:12,112
MISKO HEVERY: So actually, in Angular Dart,

00:33:12,112 --> 00:33:14,570
it's actually named correctly, and it's called a formatter.

00:33:14,570 --> 00:33:18,180
And then we were doing this in Angular 2.0,

00:33:18,180 --> 00:33:19,230
and we had formatters.

00:33:19,230 --> 00:33:20,605
And then we were-- actually, they

00:33:20,605 --> 00:33:23,060
don't have it implemented-- adjusted in Angular 2.0.

00:33:23,060 --> 00:33:24,710
But we knew what we wanted to do.

00:33:24,710 --> 00:33:26,959
So we were like oh yeah, we're going to do formatters.

00:33:26,959 --> 00:33:28,660
And then Victor and I were starting

00:33:28,660 --> 00:33:31,670
to look at Observables and how we do ChangeDetection

00:33:31,670 --> 00:33:33,660
and structural changes.

00:33:33,660 --> 00:33:36,300
And we came up with this cool thing.

00:33:36,300 --> 00:33:37,530
I don't know what it is.

00:33:37,530 --> 00:33:39,230
Victor kind of gets excited about it.

00:33:39,230 --> 00:33:41,260
And he has cool names like monads or something.

00:33:41,260 --> 00:33:42,540
I don't know.

00:33:42,540 --> 00:33:46,950
And we realized that these things are actually

00:33:46,950 --> 00:33:49,320
the same thing as the-- or rather

00:33:49,320 --> 00:33:52,120
that it was a more general case of the formatters.

00:33:52,120 --> 00:33:54,070
And so then we decided to rename them again.

00:33:54,070 --> 00:33:55,500
And now they're going to be called pipes,

00:33:55,500 --> 00:33:57,374
because we cannot come up with a better name.

00:33:57,374 --> 00:33:59,380
[LAUGHTER]

00:33:59,380 --> 00:34:01,960
But they are very, very cool in Angular 2.0.

00:34:01,960 --> 00:34:06,890
They can do amazing things, you can have in both in a template

00:34:06,890 --> 00:34:09,670
and also in a component.

00:34:09,670 --> 00:34:14,020
So both the component author and the template author

00:34:14,020 --> 00:34:16,412
can add them on both sides with a binding,

00:34:16,412 --> 00:34:17,620
which is kind of interesting.

00:34:17,620 --> 00:34:19,250
They compose very well.

00:34:19,250 --> 00:34:20,600
They can do interesting things.

00:34:20,600 --> 00:34:21,810
It's hard for me to explain.

00:34:21,810 --> 00:34:23,020
But like, it's going to be cool.

00:34:23,020 --> 00:34:23,949
Trust me on this one.

00:34:23,949 --> 00:34:24,835
AUDIENCE: I look forward to it.

00:34:24,835 --> 00:34:25,650
MISKO HEVERY: The other thing is--

00:34:25,650 --> 00:34:27,947
let's see what was the other misnamed thing we did?

00:34:27,947 --> 00:34:29,280
BRAD GREEN: Service [INAUDIBLE].

00:34:29,280 --> 00:34:30,590
MISKO HEVERY: Yeah, so just so you know, I'm

00:34:30,590 --> 00:34:33,159
really curious what talk will [? Shia ?] give next year.

00:34:33,159 --> 00:34:36,159
Because we renamed all those things he was making fun of.

00:34:36,159 --> 00:34:37,270
[LAUGHTER]

00:34:37,270 --> 00:34:38,449
So there's no template.

00:34:38,449 --> 00:34:40,120
There's no filters.

00:34:40,120 --> 00:34:41,820
The services got renamed.

00:34:41,820 --> 00:34:42,948
SPEAKER 4: Transclusion?

00:34:42,948 --> 00:34:43,739
MISKO HEVERY: What?

00:34:43,739 --> 00:34:44,822
Transclusion is not there.

00:34:44,822 --> 00:34:45,940
It's Shadow DOM, right?

00:34:45,940 --> 00:34:47,812
AUDIENCE: Is there a pipe pipe?

00:34:47,812 --> 00:34:49,684
[LAUGHTER]

00:34:49,684 --> 00:34:52,087
[APPLAUSE]

00:34:52,087 --> 00:34:53,545
MISKO HEVERY: I don't think there's

00:34:53,545 --> 00:34:58,140
going to be a pipe pipe, because the filters or the pipes

00:34:58,140 --> 00:35:00,850
are named by verbs, usually what they do, right?

00:35:00,850 --> 00:35:02,260
It's a kind of a function thing.

00:35:02,260 --> 00:35:03,480
And a pipe is a noun.

00:35:03,480 --> 00:35:05,230
So I don't think pipe pipe makes sense.

00:35:05,230 --> 00:35:07,495
SPEAKER 1: You'd be the Pipe Piper, if they used it.

00:35:07,495 --> 00:35:08,962
[LAUGHTER]

00:35:08,962 --> 00:35:10,926
AUDIENCE: [INAUDIBLE] find something.

00:35:10,926 --> 00:35:15,345


00:35:15,345 --> 00:35:17,010
SPEAKER 1: Oh, that's good.

00:35:17,010 --> 00:35:17,510
OK.

00:35:17,510 --> 00:35:20,170


00:35:20,170 --> 00:35:22,500
I don't see you in line.

00:35:22,500 --> 00:35:24,970
OK, oh yeah, he did make fun of ng-options.

00:35:24,970 --> 00:35:28,130
That one was pretty good too.

00:35:28,130 --> 00:35:30,290
OK, let's take our last two questions here.

00:35:30,290 --> 00:35:32,040
And then we have one last one from online.

00:35:32,040 --> 00:35:34,150
And we'll wrap it up.

00:35:34,150 --> 00:35:37,100
AUDIENCE: I got a really quick question for Jeff.

00:35:37,100 --> 00:35:38,230
What's with the beard?

00:35:38,230 --> 00:35:41,049


00:35:41,049 --> 00:35:42,090
JEFF CROSS: I don't know.

00:35:42,090 --> 00:35:45,160
I just stopped taking care of it, and this is what happened.

00:35:45,160 --> 00:35:46,570
[LAUGHTER]

00:35:46,570 --> 00:35:47,510
AUDIENCE: Got better.

00:35:47,510 --> 00:35:48,343
JEFF CROSS: Exactly.

00:35:48,343 --> 00:35:51,060
SPEAKER 1: He charges $10 per stroke, I learned yesterday.

00:35:51,060 --> 00:35:51,900
I owe him $30.

00:35:51,900 --> 00:35:54,530


00:35:54,530 --> 00:35:58,380
AUDIENCE: All right, so I wanted to ask you guys about Angular

00:35:58,380 --> 00:36:00,012
Material and the animations.

00:36:00,012 --> 00:36:02,294
So Angular Material has been coming along.

00:36:02,294 --> 00:36:04,210
It's pretty great, and components are awesome.

00:36:04,210 --> 00:36:06,740
NgAnimate is awesome, look at Auto Time.

00:36:06,740 --> 00:36:08,520
But if you read the material design spec,

00:36:08,520 --> 00:36:10,650
right, we have these defined animations down

00:36:10,650 --> 00:36:13,262
to the specific easings and specific direction flows.

00:36:13,262 --> 00:36:15,470
If we leave it up to the users to come up with these,

00:36:15,470 --> 00:36:18,340
then we really don't have a true material design app.

00:36:18,340 --> 00:36:20,910
So is there any plans to incorporate Angular Material

00:36:20,910 --> 00:36:23,640
and ngAnimate to have these pre-defined animations, so

00:36:23,640 --> 00:36:28,320
that we have true material design apps?

00:36:28,320 --> 00:36:31,350
SPEAKER 2: So on material design, on Angular Material,

00:36:31,350 --> 00:36:33,470
we work very closely with Google's UX team

00:36:33,470 --> 00:36:36,040
and the folks who are defining all these things for material

00:36:36,040 --> 00:36:36,686
design.

00:36:36,686 --> 00:36:38,060
And in fact, just this week, they

00:36:38,060 --> 00:36:39,830
were reviewing our components again as we're

00:36:39,830 --> 00:36:41,621
approaching our 1.0 to make sure that we're

00:36:41,621 --> 00:36:43,210
getting everything right.

00:36:43,210 --> 00:36:45,950
So yes, on the Angular Material side, absolutely.

00:36:45,950 --> 00:36:48,844
Our goal is to be completely identical to the specs that

00:36:48,844 --> 00:36:50,510
would make it really easy for developers

00:36:50,510 --> 00:36:53,280
to do the right thing by just saying nb_button

00:36:53,280 --> 00:36:56,502
and then it just magically happens.

00:36:56,502 --> 00:36:59,280
SPEAKER 3: So in regards to ngAnimate,

00:36:59,280 --> 00:37:01,980
all that ngAnimate is is just a big black box

00:37:01,980 --> 00:37:03,740
that shoots out hooks.

00:37:03,740 --> 00:37:06,850
And chu, chu, chu.

00:37:06,850 --> 00:37:11,630
So with 1.5 and 2.0, it's just making that better

00:37:11,630 --> 00:37:15,050
at detecting certain things and giving you the possibility

00:37:15,050 --> 00:37:16,830
to hook into that, right?

00:37:16,830 --> 00:37:19,580
So the next big thing is going to be that timeline feature.

00:37:19,580 --> 00:37:21,350
And the timeline feature is going

00:37:21,350 --> 00:37:24,990
to give the material design aspects the capabilities

00:37:24,990 --> 00:37:26,740
to add those easing functions.

00:37:26,740 --> 00:37:29,073
But it's also going to give the capability for the users

00:37:29,073 --> 00:37:31,149
to override certain things, if that's allowed.

00:37:31,149 --> 00:37:32,190
That's the whole premise.

00:37:32,190 --> 00:37:34,065
It's just a solid foundation for all of that.

00:37:34,065 --> 00:37:38,420


00:37:38,420 --> 00:37:40,802
SPEAKER 2: Thomas Burleson over here.

00:37:40,802 --> 00:37:42,900
THOMAS BURLESON: So I wanted to add to that.

00:37:42,900 --> 00:37:44,550
Often in material design, you have

00:37:44,550 --> 00:37:46,840
experiences that are much more complicated

00:37:46,840 --> 00:37:48,780
than just a simple animation.

00:37:48,780 --> 00:37:51,220
So you have a sequence or a choreography

00:37:51,220 --> 00:37:53,300
of multiple elements.

00:37:53,300 --> 00:37:55,540
This is what ngTimeline is going to do.

00:37:55,540 --> 00:37:59,520
So until we get that more robust and sophisticated,

00:37:59,520 --> 00:38:02,906
you'll have a challenge for seeing that material design.

00:38:02,906 --> 00:38:03,872
A little nervous.

00:38:03,872 --> 00:38:07,736


00:38:07,736 --> 00:38:09,690
SPEAKER 3: Yeah, what Thomas said.

00:38:09,690 --> 00:38:12,760
SPEAKER 1: OK, we'll take one last local question.

00:38:12,760 --> 00:38:14,600
AUDIENCE: Does Angular internally

00:38:14,600 --> 00:38:17,020
plan to continue to use Tracer?

00:38:17,020 --> 00:38:19,669
Or does TypeScript intend to output Dart

00:38:19,669 --> 00:38:20,960
or some combination of the two?

00:38:20,960 --> 00:38:24,054


00:38:24,054 --> 00:38:26,220
MISKO HEVERY: So right now, we're running on tracer.

00:38:26,220 --> 00:38:27,220
It is true.

00:38:27,220 --> 00:38:29,800
But since the wonderful TypeScript folks

00:38:29,800 --> 00:38:32,640
have made such an amazing product,

00:38:32,640 --> 00:38:36,540
are we going to be switching over to running in TypeScript?

00:38:36,540 --> 00:38:40,250
And they tell us that their compiler is very hackable.

00:38:40,250 --> 00:38:42,390
So we're going to write the Dart generation off

00:38:42,390 --> 00:38:44,480
of their compiler.ast tree.

00:38:44,480 --> 00:38:47,389
So that should happen in probably a month or so,

00:38:47,389 --> 00:38:47,930
I don't know.

00:38:47,930 --> 00:38:52,841
If somebody is interested in helping out over here, please.

00:38:52,841 --> 00:38:55,750
SPEAKER 1: OK, last question from reddit.

00:38:55,750 --> 00:38:58,180
How do you see Angular 2.0 competing with

00:38:58,180 --> 00:39:00,820
or at least coexisting with frameworks like React?

00:39:00,820 --> 00:39:03,078
And I'll add Angular 3.0.

00:39:03,078 --> 00:39:05,802
[LAUGHTER]

00:39:05,802 --> 00:39:09,726
SPEAKER 4: We have no chance against Angular 3.0.

00:39:09,726 --> 00:39:11,332
SPEAKER 5: Two router [INAUDIBLE]

00:39:11,332 --> 00:39:13,540
BRAD GREEN: Yeah, I think the new router will let you

00:39:13,540 --> 00:39:14,850
mix and match frameworks too.

00:39:14,850 --> 00:39:16,960
I'm pretty sure.

00:39:16,960 --> 00:39:17,660
I don't know.

00:39:17,660 --> 00:39:22,650
I think we talked about this a little in our keynote in that

00:39:22,650 --> 00:39:25,690
we'd rather not be put in the place of comparing, hey,

00:39:25,690 --> 00:39:27,640
should I use this or should I use that.

00:39:27,640 --> 00:39:30,090
And how are you going to stack up against these guys.

00:39:30,090 --> 00:39:32,940
I think we have a different feature set

00:39:32,940 --> 00:39:34,297
than the folks in React.

00:39:34,297 --> 00:39:36,130
And we've got a different view of the world.

00:39:36,130 --> 00:39:37,950
And I think they're both valid views.

00:39:37,950 --> 00:39:40,920
What I want to focus on is how can we collaborate.

00:39:40,920 --> 00:39:44,400
And we've talked to some of the folks, and they're very cool.

00:39:44,400 --> 00:39:47,370
And we'll see what we can do together.

00:39:47,370 --> 00:39:48,214
SPEAKER 1: Awesome.

00:39:48,214 --> 00:39:50,005
Give it up for the Angular team, everybody.

00:39:50,005 --> 00:39:53,022
[APPLAUSE]

00:39:53,022 --> 00:40:04,246


00:40:04,246 --> 00:40:06,430
SPEAKER 1: All right, don't go anywhere.

00:40:06,430 --> 00:40:09,970
Angular team, stay put for a second.


YouTube URL: https://www.youtube.com/watch?v=5Sy2bgKhaAo


