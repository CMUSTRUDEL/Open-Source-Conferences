Title: Run digest cycle in web worker   Dr  Gleb Bahmutov PhD
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,500


00:00:00,500 --> 00:00:02,394
Hello beautiful and smart people.

00:00:02,394 --> 00:00:04,090
[LAUGHTER]

00:00:04,090 --> 00:00:06,530
Now that I've got your trust, let's talk about primes.

00:00:06,530 --> 00:00:11,414
If I don't find primes, everyday life is not good.

00:00:11,414 --> 00:00:13,330
[LAUGHTER]

00:00:13,330 --> 00:00:14,940
OK, let's look at this again.

00:00:14,940 --> 00:00:17,070
OK.

00:00:17,070 --> 00:00:20,100
Here's a small budget cycle-- very, very simple,

00:00:20,100 --> 00:00:21,820
in Angular 1.

00:00:21,820 --> 00:00:22,960
It's going away.

00:00:22,960 --> 00:00:25,350
But right now it exists.

00:00:25,350 --> 00:00:26,190
I have a scope.

00:00:26,190 --> 00:00:27,280
I have a number of primes.

00:00:27,280 --> 00:00:31,590
And I'm finding them-- if number of-- and changes.

00:00:31,590 --> 00:00:35,290
So I'll try to read I need more primes in Christopher Walken's

00:00:35,290 --> 00:00:36,540
voice.

00:00:36,540 --> 00:00:39,340
So I click and I wait.

00:00:39,340 --> 00:00:41,147
And I click again.

00:00:41,147 --> 00:00:42,980
And I'm trying to actually scroll right now,

00:00:42,980 --> 00:00:45,230
but it's frozen.

00:00:45,230 --> 00:00:48,000
OK, now it's appearing.

00:00:48,000 --> 00:00:49,476
I call this coffee scripting.

00:00:49,476 --> 00:00:51,850
My script is executing, and I'm going to get some coffee.

00:00:51,850 --> 00:00:55,322
[LAUGHTER AND APPLAUSE]

00:00:55,322 --> 00:00:58,298


00:00:58,298 --> 00:00:59,290
Thank you.

00:00:59,290 --> 00:01:04,760


00:01:04,760 --> 00:01:07,220
So Angular is very large, right?

00:01:07,220 --> 00:01:10,460
And if I want to show it, my main idea,

00:01:10,460 --> 00:01:14,080
I need to really focus on just my scopes and digest cycle.

00:01:14,080 --> 00:01:16,280
So the guy Tero P, I know he's actually

00:01:16,280 --> 00:01:18,560
watching this from Europe.

00:01:18,560 --> 00:01:20,620
He wrote a blog, and now an e-book--

00:01:20,620 --> 00:01:24,630
and go check it out-- where he builds up Angular step by step.

00:01:24,630 --> 00:01:26,440
So this is the first part of his blog

00:01:26,440 --> 00:01:28,440
where he shows how to create a scope,

00:01:28,440 --> 00:01:31,200
how to have a watch function and a listener function.

00:01:31,200 --> 00:01:35,090
And see, every scope instance has this $$watchers.

00:01:35,090 --> 00:01:36,960
So I'm using two dollar signs.

00:01:36,960 --> 00:01:39,790
That means I know what I'm doing,

00:01:39,790 --> 00:01:45,740
just like this mean that I'm serious and I'm working hard.

00:01:45,740 --> 00:01:47,490
So they're just taking too long.

00:01:47,490 --> 00:01:51,180
Here's the idea-- why don't we move digest cycle and model

00:01:51,180 --> 00:01:52,800
into separate thread from the browser?

00:01:52,800 --> 00:01:54,950
So the browser will still be responsive

00:01:54,950 --> 00:01:57,540
while the primes are computed.

00:01:57,540 --> 00:01:58,940
So that's what I've done.

00:01:58,940 --> 00:02:01,590
So I moved my micro Angular and the primes

00:02:01,590 --> 00:02:03,740
digest into web worker.

00:02:03,740 --> 00:02:08,759
And on the client side, I left the same API, mock scopes.

00:02:08,759 --> 00:02:10,699
So I'm clicking.

00:02:10,699 --> 00:02:11,660
I can scroll.

00:02:11,660 --> 00:02:12,547
I can click again.

00:02:12,547 --> 00:02:13,630
It's computing a lot more.

00:02:13,630 --> 00:02:16,250
But see, it's like the page is responsive.

00:02:16,250 --> 00:02:17,310
Boom.

00:02:17,310 --> 00:02:18,869
OK.

00:02:18,869 --> 00:02:20,660
The client just had to change a little bit.

00:02:20,660 --> 00:02:23,500
Instead of saying scope n equals something,

00:02:23,500 --> 00:02:25,900
I have to use set method.

00:02:25,900 --> 00:02:29,450
And in reality, every scope creation,

00:02:29,450 --> 00:02:32,160
or setting a property, or kicking off digest cycle

00:02:32,160 --> 00:02:34,780
is just a post message to the web worker

00:02:34,780 --> 00:02:38,100
where the actual Angular is.

00:02:38,100 --> 00:02:41,550
So my mock scopes that the client sees actually just

00:02:41,550 --> 00:02:44,780
deliver messages using post message mechanism.

00:02:44,780 --> 00:02:47,180
I'm actually stringifying all the functions,

00:02:47,180 --> 00:02:49,900
like watch and listener function.

00:02:49,900 --> 00:02:52,150
And I'm sending it as [? s ?] text and I'm recreating.

00:02:52,150 --> 00:02:53,650
So you lose lexical scope.

00:02:53,650 --> 00:02:55,920
But you can access everything on the scope.

00:02:55,920 --> 00:02:59,475
And then the worker that receives messages actually

00:02:59,475 --> 00:03:01,180
calls the Angular methods.

00:03:01,180 --> 00:03:03,940
And the interesting thing is because it has the model,

00:03:03,940 --> 00:03:05,620
it has to create HTML.

00:03:05,620 --> 00:03:08,440
And when the digest cycle runs, the green arrow,

00:03:08,440 --> 00:03:11,370
it has to send back HTML.

00:03:11,370 --> 00:03:13,870
And you're wondering, well, can I

00:03:13,870 --> 00:03:17,500
compute with GIF of a virtual DOM and send it?

00:03:17,500 --> 00:03:18,620
Yes.

00:03:18,620 --> 00:03:24,800
But like [INAUDIBLE], I'll just leave a proof to a reader.

00:03:24,800 --> 00:03:26,220
OK.

00:03:26,220 --> 00:03:29,990
Next-- so Angular team likes to change everything, right?

00:03:29,990 --> 00:03:31,610
And I don't.

00:03:31,610 --> 00:03:33,690
And I hate using [? fatter ?] methods.

00:03:33,690 --> 00:03:34,545
This is not Java.

00:03:34,545 --> 00:03:36,140
This is JavaScript.

00:03:36,140 --> 00:03:41,074
So I don't want to do-- I don't want to change-- yeah, hating

00:03:41,074 --> 00:03:42,240
Java always brings applause.

00:03:42,240 --> 00:03:45,590


00:03:45,590 --> 00:03:46,090
OK.

00:03:46,090 --> 00:03:49,230
So I used Object.observe and I put an observer on the scope

00:03:49,230 --> 00:03:51,170
instance on the client side.

00:03:51,170 --> 00:03:53,950
So every time there is a property change,

00:03:53,950 --> 00:03:54,980
I actually get an event.

00:03:54,980 --> 00:03:57,170
I can send it to my web worker.

00:03:57,170 --> 00:04:04,090
And just to prove that it works, I'll print my change.event.

00:04:04,090 --> 00:04:08,790
And on the next slide, see, it actually

00:04:08,790 --> 00:04:13,600
detected what I used-- scope.n equals whatever.

00:04:13,600 --> 00:04:19,115
And so I have a fever, and the only medicine is more primes.

00:04:19,115 --> 00:04:19,615
OK.

00:04:19,615 --> 00:04:22,040
Right there.

00:04:22,040 --> 00:04:23,731
Right there.

00:04:23,731 --> 00:04:24,980
OK, that's the end of my talk.

00:04:24,980 --> 00:04:26,300
I have 35 seconds.

00:04:26,300 --> 00:04:29,030
I'll be there if you have any questions.

00:04:29,030 --> 00:04:31,480
I charge very cheaply to answer questions, just

00:04:31,480 --> 00:04:33,880
one beer per question.

00:04:33,880 --> 00:04:34,555
You have a code.

00:04:34,555 --> 00:04:35,430
You have a blog post.

00:04:35,430 --> 00:04:37,035
Please check out Kensho.

00:04:37,035 --> 00:04:39,110
We're a financial insight company

00:04:39,110 --> 00:04:40,780
in Boston and New York City.

00:04:40,780 --> 00:04:43,540
We open source several Angular libraries.

00:04:43,540 --> 00:04:46,940
We love Angular, as you can see at the bottom of our slide.

00:04:46,940 --> 00:04:47,440
Thanks.

00:04:47,440 --> 00:04:50,790
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=lceLw8ROUP8


