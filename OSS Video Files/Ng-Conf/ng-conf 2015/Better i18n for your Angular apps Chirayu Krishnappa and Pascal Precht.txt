Title: Better i18n for your Angular apps Chirayu Krishnappa and Pascal Precht
Publication date: 2015-03-06
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,500


00:00:00,500 --> 00:00:02,020
CHIRAYU KRISHNAPPA: Hi everybody.

00:00:02,020 --> 00:00:03,000
This is Chirayu.

00:00:03,000 --> 00:00:03,630
I'm Chirayu.

00:00:03,630 --> 00:00:05,550
Welcome to Angular Core Team.

00:00:05,550 --> 00:00:07,605
And this is Pascal.

00:00:07,605 --> 00:00:10,900
Who some of you might recognize as the author of Angular

00:00:10,900 --> 00:00:14,920
Translate, which is the popular internationalization framework

00:00:14,920 --> 00:00:17,060
for Angular JS today.

00:00:17,060 --> 00:00:20,830
And we spent some time over the last few months looking

00:00:20,830 --> 00:00:22,780
at all the problems that you could

00:00:22,780 --> 00:00:25,512
have if you wanted to translate your application

00:00:25,512 --> 00:00:27,220
and all the solutions that are out there.

00:00:27,220 --> 00:00:28,967
And we actually did a lot of research.

00:00:28,967 --> 00:00:30,800
And what we're going to present to you today

00:00:30,800 --> 00:00:35,500
is our solution for Angular 1 and Angular 2 from the core,

00:00:35,500 --> 00:00:37,549
to make it a much better story for you.

00:00:37,549 --> 00:00:38,590
PASCAL PRECHT: All right.

00:00:38,590 --> 00:00:40,215
Thank you for the introduction Chirayu.

00:00:40,215 --> 00:00:43,310
Do we have any Angular Translate users here in the room?

00:00:43,310 --> 00:00:43,930
Awesome.

00:00:43,930 --> 00:00:44,637
Great.

00:00:44,637 --> 00:00:45,470
So I love you folks.

00:00:45,470 --> 00:00:47,790
Whatever you're going to see in this talk today,

00:00:47,790 --> 00:00:50,280
and whatever you want to choose to use after this talk,

00:00:50,280 --> 00:00:51,990
I still got a lot for you, OK?

00:00:51,990 --> 00:00:52,490
All right.

00:00:52,490 --> 00:00:55,010
So, as Chiral said, we're going to talk

00:00:55,010 --> 00:00:56,450
about internationalization.

00:00:56,450 --> 00:00:59,290
But before we talk about the technical bits,

00:00:59,290 --> 00:01:02,820
let's just first clarify what internationalization is,

00:01:02,820 --> 00:01:04,640
and why we want to do it.

00:01:04,640 --> 00:01:07,040
So you mention you've successfully

00:01:07,040 --> 00:01:08,510
launched your web application.

00:01:08,510 --> 00:01:10,470
And it turned out to be super successful.

00:01:10,470 --> 00:01:14,290
So we have a very big user base, but your user base mainly

00:01:14,290 --> 00:01:16,270
comes from your own country.

00:01:16,270 --> 00:01:18,290
And so now you think about it, and you

00:01:18,290 --> 00:01:21,550
think you want to make your application accessible to more

00:01:21,550 --> 00:01:22,520
people out there.

00:01:22,520 --> 00:01:25,320
People who use different languages.

00:01:25,320 --> 00:01:27,630
So you want to internationalize your application.

00:01:27,630 --> 00:01:29,490
However, it turns out that you don't really

00:01:29,490 --> 00:01:31,150
know what is needed to internationalize

00:01:31,150 --> 00:01:32,490
your application.

00:01:32,490 --> 00:01:34,240
In addition to that, it's an afterthought.

00:01:34,240 --> 00:01:36,110
The application is already out there,

00:01:36,110 --> 00:01:40,280
so we need a solution that works for existing application

00:01:40,280 --> 00:01:42,560
without breaking things.

00:01:42,560 --> 00:01:45,160
So let's first talk about what internationalization

00:01:45,160 --> 00:01:46,840
actually means.

00:01:46,840 --> 00:01:49,860
A lot of people think that internationalization is just

00:01:49,860 --> 00:01:54,000
translating application messages from one language to another.

00:01:54,000 --> 00:01:56,510
But it turns out that is just not the case.

00:01:56,510 --> 00:01:57,860
There's so much more involved.

00:01:57,860 --> 00:02:02,560
Just think about how do get your application

00:02:02,560 --> 00:02:04,670
messages to your translator.

00:02:04,670 --> 00:02:07,510
And when your translator translates your messages,

00:02:07,510 --> 00:02:09,759
how do you put them back in the application?

00:02:09,759 --> 00:02:11,990
So there's actually so much more involved.

00:02:11,990 --> 00:02:14,600
In fact, internationalization is the process

00:02:14,600 --> 00:02:16,550
that makes it easy for you to localize

00:02:16,550 --> 00:02:19,905
your application for each country and each region.

00:02:19,905 --> 00:02:22,640
It really shouldn't matter which country it is.

00:02:22,640 --> 00:02:24,380
So internationalization is really

00:02:24,380 --> 00:02:27,380
more than just changing the locale, or the currency,

00:02:27,380 --> 00:02:29,500
or the date.

00:02:29,500 --> 00:02:31,510
If you now think, oh my gosh.

00:02:31,510 --> 00:02:33,170
I'm really not prepared for this.

00:02:33,170 --> 00:02:36,080
Like, my application is not designed for such a use case.

00:02:36,080 --> 00:02:37,680
I am I doomed right now?

00:02:37,680 --> 00:02:39,930
Do I have to start all over again?

00:02:39,930 --> 00:02:41,960
Then the answer is actually no.

00:02:41,960 --> 00:02:45,760
Because a good solution lets you localize your applications

00:02:45,760 --> 00:02:47,560
in whatever shape they are.

00:02:47,560 --> 00:02:50,070
It shouldn't matter if it's an Angular application.

00:02:50,070 --> 00:02:52,680
It shouldn't matter if it's an old legacy web app.

00:02:52,680 --> 00:02:55,540
You should be able to make incremental changes

00:02:55,540 --> 00:02:59,350
to your application in order to implement internationalization

00:02:59,350 --> 00:03:00,324
for your apps.

00:03:00,324 --> 00:03:01,740
And that's exactly what the vision

00:03:01,740 --> 00:03:03,580
is for the core i18n support that we're

00:03:03,580 --> 00:03:05,267
working on for Angular.

00:03:05,267 --> 00:03:06,350
CHIRAYU KRISHNAPPA: Right.

00:03:06,350 --> 00:03:08,991
So as Pascal was mentioning, your application

00:03:08,991 --> 00:03:11,490
may not have been written with internationalization in mind.

00:03:11,490 --> 00:03:14,150
So you're going to start off by saying, what am I going to do?

00:03:14,150 --> 00:03:15,170
Here is my HTML.

00:03:15,170 --> 00:03:17,260
All your messages are in HTML, because you

00:03:17,260 --> 00:03:19,530
don't want to put them in JavaScript just because you

00:03:19,530 --> 00:03:21,000
want to internationalize or something.

00:03:21,000 --> 00:03:23,500
So our solution is going to say your messages start in HTML,

00:03:23,500 --> 00:03:24,620
they end in HTML.

00:03:24,620 --> 00:03:26,280
So what do you do?

00:03:26,280 --> 00:03:28,572
If you're going to hire translators, take this HTML,

00:03:28,572 --> 00:03:30,530
give it to the translators, they're translated,

00:03:30,530 --> 00:03:32,090
and you can deploy, right?

00:03:32,090 --> 00:03:33,590
Obviously not that easy, because you

00:03:33,590 --> 00:03:37,280
had to teach them about Angular and HTML and all that stuff.

00:03:37,280 --> 00:03:38,970
So the processes that the translators

00:03:38,970 --> 00:03:42,360
are going to take a set of files that have messages in them.

00:03:42,360 --> 00:03:45,500
So there's a pipeline to where you can extract these messages

00:03:45,500 --> 00:03:48,140
from HTML, and they go into some standard formats

00:03:48,140 --> 00:03:51,736
that the translators can use, and their tools and UI are

00:03:51,736 --> 00:03:53,110
going to show them these messages

00:03:53,110 --> 00:03:55,120
and they can provide the translations.

00:03:55,120 --> 00:03:55,895
So that's why the translators are

00:03:55,895 --> 00:03:57,061
going to translate messages.

00:03:57,061 --> 00:03:59,190
And they give you back similar files,

00:03:59,190 --> 00:04:01,540
but these are in the target locale.

00:04:01,540 --> 00:04:02,960
So you've gone through the cycle,

00:04:02,960 --> 00:04:04,460
and at the end of the cycle you have

00:04:04,460 --> 00:04:08,500
messages translated in the locales that you care about.

00:04:08,500 --> 00:04:09,990
What do you do with these messages?

00:04:09,990 --> 00:04:11,951
How do you get them back into your application?

00:04:11,951 --> 00:04:13,450
Turns out, there are two approaches.

00:04:13,450 --> 00:04:15,000
If you use Angular Translate, you

00:04:15,000 --> 00:04:17,800
may be familiar with the JSON-file approach, where

00:04:17,800 --> 00:04:20,110
you load some kind of data in the beginning

00:04:20,110 --> 00:04:21,290
if your application.

00:04:21,290 --> 00:04:23,270
And that contains your translation strings.

00:04:23,270 --> 00:04:25,530
And the application will switch out

00:04:25,530 --> 00:04:28,770
the local messages for the ones from the bundle,

00:04:28,770 --> 00:04:30,070
in the JSON-file.

00:04:30,070 --> 00:04:32,334
Another option, something for instance

00:04:32,334 --> 00:04:34,000
Google uses, and a bunch of other places

00:04:34,000 --> 00:04:35,960
might use it on a larger scale, is

00:04:35,960 --> 00:04:39,870
where you generate or build your application

00:04:39,870 --> 00:04:41,070
for each target locale.

00:04:41,070 --> 00:04:44,540
So you replace your original text with the target locale

00:04:44,540 --> 00:04:45,550
language.

00:04:45,550 --> 00:04:48,000
So then what it looks like is the original HTML,

00:04:48,000 --> 00:04:49,810
but just written in a different language.

00:04:49,810 --> 00:04:51,990
And so you have these two choices.

00:04:51,990 --> 00:04:53,480
Which one are you going to pick?

00:04:53,480 --> 00:04:54,940
Turns out, you should be able to pick both.

00:04:54,940 --> 00:04:56,500
And so in our solution, you're going

00:04:56,500 --> 00:04:59,234
to be able to use both, and choose whichever one you want.

00:04:59,234 --> 00:05:00,900
PASCAL PRECHT: So that's really awesome.

00:05:00,900 --> 00:05:04,330
I think we should now get those slides working, right?

00:05:04,330 --> 00:05:07,140


00:05:07,140 --> 00:05:09,490
Maybe Dave, you can come up again and hold

00:05:09,490 --> 00:05:11,631
this cable for a second.

00:05:11,631 --> 00:05:12,130
All right.

00:05:12,130 --> 00:05:13,920
So let's move on.

00:05:13,920 --> 00:05:16,050
Let's take a look at our application template.

00:05:16,050 --> 00:05:18,730
Let's say we have a log application,

00:05:18,730 --> 00:05:21,570
where people are able to add comments

00:05:21,570 --> 00:05:23,570
to your existing blogs.

00:05:23,570 --> 00:05:27,190
So we have this text area, where users can type in some stuff.

00:05:27,190 --> 00:05:28,930
And there's this little hidden text

00:05:28,930 --> 00:05:31,460
that says the limit of the characters that you

00:05:31,460 --> 00:05:34,200
can use in your comment is 255.

00:05:34,200 --> 00:05:35,760
It's 255.

00:05:35,760 --> 00:05:42,410
So what happens if we want to translate that message?

00:05:42,410 --> 00:05:45,520
So what happens when we extract this message from our existing

00:05:45,520 --> 00:05:46,260
template?

00:05:46,260 --> 00:05:47,435
Slides are gone right now.

00:05:47,435 --> 00:05:49,060
CHIRAYU KRISHNAPPA: I'll get them back.

00:05:49,060 --> 00:05:52,590


00:05:52,590 --> 00:05:54,450
I'm trying to get them back.

00:05:54,450 --> 00:05:56,609
I'm going unplug it, and then plug it back in.

00:05:56,609 --> 00:05:57,900
That might get it to recognize.

00:05:57,900 --> 00:06:08,520


00:06:08,520 --> 00:06:14,501
PASCAL PRECHT: So-- [APPLAUSE] Don't touch it.

00:06:14,501 --> 00:06:15,500
So there's our template.

00:06:15,500 --> 00:06:18,380
So what happens when we extract this particular message

00:06:18,380 --> 00:06:20,030
from our template?

00:06:20,030 --> 00:06:22,010
What the translators sees-- so the translator

00:06:22,010 --> 00:06:25,651
actually has its own software with a graphical user

00:06:25,651 --> 00:06:26,150
interface.

00:06:26,150 --> 00:06:28,608
What we see right here is a very rudimentary representation

00:06:28,608 --> 00:06:30,280
of what the translator would see.

00:06:30,280 --> 00:06:32,420
It's just a list of messages that we

00:06:32,420 --> 00:06:33,960
extract in a random order.

00:06:33,960 --> 00:06:37,530
And there's also a message ID generated internally,

00:06:37,530 --> 00:06:40,760
that is also used internally across software.

00:06:40,760 --> 00:06:42,820
So as we can see, we just get the message,

00:06:42,820 --> 00:06:44,450
limit is 255 characters.

00:06:44,450 --> 00:06:46,390
So what does that mean to the translator?

00:06:46,390 --> 00:06:48,250
The translator in fact, doesn't really

00:06:48,250 --> 00:06:50,990
know what is the limit we're talking about.

00:06:50,990 --> 00:06:53,400
Maybe he's a "World of Warcraft" gamer or something,

00:06:53,400 --> 00:06:55,900
and he thinks that's the limit of characters that can attend

00:06:55,900 --> 00:06:57,110
a "World of Warcraft" game.

00:06:57,110 --> 00:06:58,500
I don't know.

00:06:58,500 --> 00:07:03,560
So what we want to do is we want to add context to our messages.

00:07:03,560 --> 00:07:06,010
We want to add descriptions so that the translator is

00:07:06,010 --> 00:07:09,010
able to give us back high quality translations.

00:07:09,010 --> 00:07:12,080
So context is king.

00:07:12,080 --> 00:07:14,400
Translators really, really care about context.

00:07:14,400 --> 00:07:16,340
Just think about the word "crane."

00:07:16,340 --> 00:07:19,470
What does the word "crane" mean without any context?

00:07:19,470 --> 00:07:23,389
It could be a bird, it could also be a machine.

00:07:23,389 --> 00:07:24,930
It would be even better, if you could

00:07:24,930 --> 00:07:27,290
provide screenshots of our applications

00:07:27,290 --> 00:07:29,290
where the messages are used.

00:07:29,290 --> 00:07:32,920
And even better, a Live Preview app where the translator

00:07:32,920 --> 00:07:36,180
is able to write the new messages,

00:07:36,180 --> 00:07:38,840
the new translated messages right into the application.

00:07:38,840 --> 00:07:41,860
And I think, Chirayu, I think you used that at YouTube,

00:07:41,860 --> 00:07:42,360
right?

00:07:42,360 --> 00:07:43,985
CHIRAYU KRISHNAPPA: Yeah, at YouTube we

00:07:43,985 --> 00:07:45,700
used to have translations with context

00:07:45,700 --> 00:07:48,660
written in the text of the HTML, and we still have that.

00:07:48,660 --> 00:07:50,270
But in addition, we started providing

00:07:50,270 --> 00:07:53,620
translators screenshots for each message

00:07:53,620 --> 00:07:56,310
the screenshots of how it would appear in the UI.

00:07:56,310 --> 00:07:59,120
And that provided much higher quality translations.

00:07:59,120 --> 00:08:00,410
The translator was happy.

00:08:00,410 --> 00:08:02,740
As one of them put it, they basically said,

00:08:02,740 --> 00:08:04,240
a picture is worth a thousand words,

00:08:04,240 --> 00:08:06,405
but for translation, it really is.

00:08:06,405 --> 00:08:07,280
PASCAL PRECHT: Right.

00:08:07,280 --> 00:08:07,780
Yeah.

00:08:07,780 --> 00:08:08,850
That's awesome.

00:08:08,850 --> 00:08:11,770
So coming back to our message example,

00:08:11,770 --> 00:08:13,775
what is the description or the context

00:08:13,775 --> 00:08:15,360
that we want to provide here?

00:08:15,360 --> 00:08:18,530
So this is the label to show the maximum length of characters

00:08:18,530 --> 00:08:20,690
that is allowed in the comment.

00:08:20,690 --> 00:08:22,640
So wouldn't it be nice if we could somewhat

00:08:22,640 --> 00:08:25,700
declaratively add this information to our existing

00:08:25,700 --> 00:08:26,610
templates?

00:08:26,610 --> 00:08:27,580
Yes, it would be nice.

00:08:27,580 --> 00:08:30,530
And in fact, this is what we provide in our new solution.

00:08:30,530 --> 00:08:32,260
So we just add this i18-n attribute

00:08:32,260 --> 00:08:33,720
to existing dumb elements.

00:08:33,720 --> 00:08:35,460
And then you put a description in there.

00:08:35,460 --> 00:08:37,820
And what the translator in the end sees

00:08:37,820 --> 00:08:42,789
is exactly pretty much the same what he saw before,

00:08:42,789 --> 00:08:44,440
but now he has the context.

00:08:44,440 --> 00:08:46,490
So now there's this new message that says,

00:08:46,490 --> 00:08:49,210
OK this is the label to show the maximum length of characters

00:08:49,210 --> 00:08:50,320
allowed in the comment.

00:08:50,320 --> 00:08:52,890
And maybe your translator goes, yes, that's the limit

00:08:52,890 --> 00:08:54,680
that we're talking about.

00:08:54,680 --> 00:08:55,280
Awesome.

00:08:55,280 --> 00:08:56,607
I think they're small, right?

00:08:56,607 --> 00:08:57,690
CHIRAYU KRISHNAPPA: Right.

00:08:57,690 --> 00:09:00,820
So we discovered like what text looks

00:09:00,820 --> 00:09:03,656
like inside of a dumb element.

00:09:03,656 --> 00:09:05,156
But there are other places where you

00:09:05,156 --> 00:09:07,310
have text that needs to be translated in your HTML.

00:09:07,310 --> 00:09:09,190
They are attributes.

00:09:09,190 --> 00:09:11,940
If you take a look at this example, it's just an ng-model,

00:09:11,940 --> 00:09:13,732
but we have a placeholder on the input tag.

00:09:13,732 --> 00:09:15,898
And this is something that the user is going to see,

00:09:15,898 --> 00:09:17,246
so it needs to be translated.

00:09:17,246 --> 00:09:18,620
What does the extraction tool do?

00:09:18,620 --> 00:09:21,300
It actually does extract this, because it understands

00:09:21,300 --> 00:09:23,230
the common HTML attributes.

00:09:23,230 --> 00:09:28,234
And what's the translator going to see for that placeholder?

00:09:28,234 --> 00:09:29,150
This is what they see.

00:09:29,150 --> 00:09:31,960
They see the message, and you notice that there's

00:09:31,960 --> 00:09:33,480
a default description provided.

00:09:33,480 --> 00:09:36,150
And it says HTML input control placeholder text,

00:09:36,150 --> 00:09:38,390
which is better for the translator in the sense

00:09:38,390 --> 00:09:40,510
that it's better than having nothing.

00:09:40,510 --> 00:09:43,830
There is no what should happen, but we could always do better.

00:09:43,830 --> 00:09:46,150
Just like for the P tag, Pascal showed you

00:09:46,150 --> 00:09:48,890
how you could provide and change a description,

00:09:48,890 --> 00:09:50,420
you can do that here as well.

00:09:50,420 --> 00:09:51,560
And it's a very similar.

00:09:51,560 --> 00:09:54,780
You use the i18n attribute, but this time it's a prefix.

00:09:54,780 --> 00:09:58,050
You just tack onto any attribute you want to recognize

00:09:58,050 --> 00:10:00,795
and extracted, you prefix it with i18-.

00:10:00,795 --> 00:10:02,660
And if you write a description for it,

00:10:02,660 --> 00:10:05,280
that will be used to replace any default description that

00:10:05,280 --> 00:10:06,420
might be provided.

00:10:06,420 --> 00:10:09,750
So what's the translator going to see for this attribute?

00:10:09,750 --> 00:10:12,910
They're going to see this thing.

00:10:12,910 --> 00:10:16,885
Where the description has been replaced with the i18 and dash

00:10:16,885 --> 00:10:18,880
placeholder text that you give.

00:10:18,880 --> 00:10:20,940
The advantage of the scheme is that it

00:10:20,940 --> 00:10:22,450
works for web components.

00:10:22,450 --> 00:10:24,590
And this is because we are not changing

00:10:24,590 --> 00:10:25,950
the original attributes.

00:10:25,950 --> 00:10:27,450
And so when web components start up,

00:10:27,450 --> 00:10:29,430
they just going to see the original thing.

00:10:29,430 --> 00:10:32,160
And this is an additional attribute, which doesn't really

00:10:32,160 --> 00:10:32,939
get any where.

00:10:32,939 --> 00:10:33,980
PASCAL PRECHT: All right.

00:10:33,980 --> 00:10:34,479
Cool.

00:10:34,479 --> 00:10:38,210
So now we know how we can imitate our existing HTML

00:10:38,210 --> 00:10:41,260
templates with context, with description, with information

00:10:41,260 --> 00:10:43,040
for the translator.

00:10:43,040 --> 00:10:46,620
But you might have noticed that the messages that we've

00:10:46,620 --> 00:10:49,330
been talking about, we're just simple messages.

00:10:49,330 --> 00:10:51,740
When we write Angular applications,

00:10:51,740 --> 00:10:55,200
we usually have things like string interpolation.

00:10:55,200 --> 00:10:59,460
So let's say we replace those fixed value, this 255,

00:10:59,460 --> 00:11:01,570
with a dynamic value that is interpolated later,

00:11:01,570 --> 00:11:02,910
at run time.

00:11:02,910 --> 00:11:04,890
So what does the translator see then,

00:11:04,890 --> 00:11:06,990
when we extract this particular message?

00:11:06,990 --> 00:11:10,840
So it turns out that whenever we use a interpolation expression

00:11:10,840 --> 00:11:15,440
inside our messages, the message extractor

00:11:15,440 --> 00:11:20,880
shows all the expressions as placeholders in the message.

00:11:20,880 --> 00:11:24,280
And in fact, it names the placeholders as expression,

00:11:24,280 --> 00:11:24,970
by default.

00:11:24,970 --> 00:11:26,470
In addition, we have the information

00:11:26,470 --> 00:11:28,940
that this is an Angular expression.

00:11:28,940 --> 00:11:30,601
But the translator actually really

00:11:30,601 --> 00:11:33,100
doesn't care if it's an Angular expression or anything else,

00:11:33,100 --> 00:11:35,530
because it doesn't really know Angular.

00:11:35,530 --> 00:11:39,030
So what we want to do is we want to provide even more context.

00:11:39,030 --> 00:11:41,920
We can override those names for the placeholders.

00:11:41,920 --> 00:11:44,250
We can say, OK so this particular placeholder

00:11:44,250 --> 00:11:47,910
right here, ends up as the placeholder Max Chars.

00:11:47,910 --> 00:11:49,380
And we can even add an example.

00:11:49,380 --> 00:11:50,880
In this case, it's 255.

00:11:50,880 --> 00:11:53,130
So this is even more context for the translator.

00:11:53,130 --> 00:11:55,187
And we get back better translations.

00:11:55,187 --> 00:11:56,270
CHIRAYU KRISHNAPPA: Sweet.

00:11:56,270 --> 00:11:58,750
So there's a couple other things to know there.

00:11:58,750 --> 00:12:00,305
Mainly these placeholders are used

00:12:00,305 --> 00:12:02,680
wherever you have HTML as well, because your messages can

00:12:02,680 --> 00:12:03,890
contain embedded HTML.

00:12:03,890 --> 00:12:06,162
And we extract those as opaque placeholders

00:12:06,162 --> 00:12:07,620
that the translators can go around,

00:12:07,620 --> 00:12:09,670
and we make sure the structure stays intact.

00:12:09,670 --> 00:12:11,800
But there's another part where we can't just

00:12:11,800 --> 00:12:14,480
use a big placeholders.

00:12:14,480 --> 00:12:15,990
And you really need these messages

00:12:15,990 --> 00:12:17,490
extracted because a translator needs

00:12:17,490 --> 00:12:19,590
to understand what's in them.

00:12:19,590 --> 00:12:22,830
The classic example is plurals and gender.

00:12:22,830 --> 00:12:26,280
And these two require some special considerations.

00:12:26,280 --> 00:12:27,570
Plurals, in particular.

00:12:27,570 --> 00:12:30,720
And that's because the plurals vary from language to language.

00:12:30,720 --> 00:12:32,761
And the rules are quite different.

00:12:32,761 --> 00:12:34,510
So in English, you say something like, you

00:12:34,510 --> 00:12:37,820
have no messages, or one message, and then two messages.

00:12:37,820 --> 00:12:40,350
And everything else is like messages.

00:12:40,350 --> 00:12:42,400
Not quite the same for many languages.

00:12:42,400 --> 00:12:45,100
There's a lot more categories, few, many, or numbers

00:12:45,100 --> 00:12:46,880
ending in a certain digit.

00:12:46,880 --> 00:12:49,410
So the translators need to be able to see all the messages

00:12:49,410 --> 00:12:51,159
that you have, all the categories you have

00:12:51,159 --> 00:12:52,950
in your plural at one shot, and they

00:12:52,950 --> 00:12:57,760
should be able to add or remove more categories from that.

00:12:57,760 --> 00:13:02,460
And in order for us to be able to extract all these choices

00:13:02,460 --> 00:13:05,490
statically, the syntax needs to be really

00:13:05,490 --> 00:13:06,870
declarative at a static level.

00:13:06,870 --> 00:13:09,726
So while Angular is declarative if you use something like

00:13:09,726 --> 00:13:11,350
and you switch or some of the existence

00:13:11,350 --> 00:13:14,340
and that it isn't declarative to that extent.

00:13:14,340 --> 00:13:16,924
So we need a different approach.

00:13:16,924 --> 00:13:18,590
The translation tools, like I mentioned,

00:13:18,590 --> 00:13:20,756
the translator is going to add or remove categories,

00:13:20,756 --> 00:13:24,254
so their UI already understands the idea of plurals.

00:13:24,254 --> 00:13:26,170
And so they have a standard format to do that.

00:13:26,170 --> 00:13:29,390
And one standard format that is popular

00:13:29,390 --> 00:13:30,780
and winning a lot more popularity

00:13:30,780 --> 00:13:33,260
is the ICU message format syntax.

00:13:33,260 --> 00:13:35,220
And this syntax is something that translators

00:13:35,220 --> 00:13:38,250
and many translators and the tools already recognize.

00:13:38,250 --> 00:13:40,270
So when we send these files to the translators,

00:13:40,270 --> 00:13:42,410
we are going to provide the message format syntax.

00:13:42,410 --> 00:13:43,690
It's a bit different.

00:13:43,690 --> 00:13:45,240
So what we've done is we've extended

00:13:45,240 --> 00:13:47,650
the original interpolations syntax that we're

00:13:47,650 --> 00:13:50,280
familiar with in Angular to write message format

00:13:50,280 --> 00:13:51,570
syntax inside it.

00:13:51,570 --> 00:13:53,810
So I'm not going to go in detail and describe

00:13:53,810 --> 00:13:56,430
what syntax actually is, but it sort of looks like this.

00:13:56,430 --> 00:13:58,730
You notice that it's still inside the double curly,

00:13:58,730 --> 00:14:02,240
so it makes it backward-forward compatible in a way

00:14:02,240 --> 00:14:05,240
that it doesn't destroy any existing Angular application.

00:14:05,240 --> 00:14:06,930
It will continue to work the way it is.

00:14:06,930 --> 00:14:08,630
But you have an extra scope where

00:14:08,630 --> 00:14:11,670
you could start writing message formats for plurals and gender

00:14:11,670 --> 00:14:12,580
in it.

00:14:12,580 --> 00:14:15,000
So how does this get extracted?

00:14:15,000 --> 00:14:16,840
The translator is going to see this.

00:14:16,840 --> 00:14:18,634
What region, it was really subtle.

00:14:18,634 --> 00:14:20,300
The double curlies became a single curly

00:14:20,300 --> 00:14:22,170
because that's what message format uses.

00:14:22,170 --> 00:14:24,712
And you notice that-- this is simple text here where it says,

00:14:24,712 --> 00:14:26,420
you have no messages and stuff like that.

00:14:26,420 --> 00:14:28,680
But you could use regular Angular interpolation

00:14:28,680 --> 00:14:30,600
inside it, and so you could make it as complex

00:14:30,600 --> 00:14:33,810
as you want, and nest plurals and gender and all

00:14:33,810 --> 00:14:38,510
of these categories to whatever extent that you want.

00:14:38,510 --> 00:14:41,280
And so here's a very simple example of gender.

00:14:41,280 --> 00:14:43,370
And it looks almost the same as plurals.

00:14:43,370 --> 00:14:45,522
The other is the only category that you need here.

00:14:45,522 --> 00:14:47,980
There's a male and female and you can add a lot more gender

00:14:47,980 --> 00:14:49,911
categories if you so choose.

00:14:49,911 --> 00:14:50,660
PASCAL PRECHT: OK.

00:14:50,660 --> 00:14:52,610
So, I think this is really cool.

00:14:52,610 --> 00:14:54,180
We've learned a lot of stuff now.

00:14:54,180 --> 00:14:56,040
We know how to annotate our existing HTML.

00:14:56,040 --> 00:14:57,850
And we can even do better pluralization

00:14:57,850 --> 00:14:59,120
and gender selection.

00:14:59,120 --> 00:15:01,920
And this stuff even works in HTML attributes.

00:15:01,920 --> 00:15:03,580
So that's a big advantage.

00:15:03,580 --> 00:15:05,890
So now let's say that we've annotated

00:15:05,890 --> 00:15:08,180
all of our existing templates.

00:15:08,180 --> 00:15:10,389
We've extracted all those messages

00:15:10,389 --> 00:15:11,430
with all the information.

00:15:11,430 --> 00:15:13,510
We gave it to our translator.

00:15:13,510 --> 00:15:15,790
We wait like two weeks or something.

00:15:15,790 --> 00:15:17,480
We get those new messages back.

00:15:17,480 --> 00:15:20,070
And now we are regenerating our new application,

00:15:20,070 --> 00:15:21,660
or whatever we want to do.

00:15:21,660 --> 00:15:24,720
And we want to ship our application.

00:15:24,720 --> 00:15:27,480
All of a sudden we realize that the new application

00:15:27,480 --> 00:15:31,040
with a new message just looks like crap.

00:15:31,040 --> 00:15:34,890
In different languages, text can be longer or shorter.

00:15:34,890 --> 00:15:36,250
Spacing doesn't fit anymore.

00:15:36,250 --> 00:15:37,380
Text breaks the UI.

00:15:37,380 --> 00:15:42,250
So it turns out that even the logo is upside down here.

00:15:42,250 --> 00:15:44,430
So what's happening?

00:15:44,430 --> 00:15:47,200
It turns out that the process, where

00:15:47,200 --> 00:15:49,190
we give those translations to the translator

00:15:49,190 --> 00:15:53,120
and wait for the messages to be translated,

00:15:53,120 --> 00:15:55,100
is a very slow process.

00:15:55,100 --> 00:15:58,057
So we need something that is much faster,

00:15:58,057 --> 00:15:59,140
when it comes to feedback.

00:15:59,140 --> 00:16:00,890
We'd early and fast feedback.

00:16:00,890 --> 00:16:03,771
So I think we have a solution for that too.

00:16:03,771 --> 00:16:04,270
Right?

00:16:04,270 --> 00:16:05,550
CHIRAYU KRISHNAPPA: Yeah.

00:16:05,550 --> 00:16:06,530
I was looking at this and saying,

00:16:06,530 --> 00:16:07,700
what's the bottleneck here?

00:16:07,700 --> 00:16:09,076
The bottleneck is a slow process.

00:16:09,076 --> 00:16:10,533
We're going to extend a translator.

00:16:10,533 --> 00:16:12,370
So I was like, no, Pascal, we can't do this.

00:16:12,370 --> 00:16:14,330
Let's just use an automated process.

00:16:14,330 --> 00:16:15,830
So we already have Google Translate.

00:16:15,830 --> 00:16:18,410
So if we integrate that in, you have automatic high quality

00:16:18,410 --> 00:16:19,650
translation all the time.

00:16:19,650 --> 00:16:21,108
You don't have to worry about this.

00:16:21,108 --> 00:16:24,460
Control S. That's not what you're going to do.

00:16:24,460 --> 00:16:26,240
But there is a process similar to that.

00:16:26,240 --> 00:16:29,680
And it's automatically generating gibberish for you.

00:16:29,680 --> 00:16:31,625
And so it's called Pseudotranslation,

00:16:31,625 --> 00:16:32,844
and it's kind of popular.

00:16:32,844 --> 00:16:35,010
So what happens here is, as you control S and stuff,

00:16:35,010 --> 00:16:37,590
you can integrate it with the IDE and your build tools.

00:16:37,590 --> 00:16:40,249
It's doing a translation for you, into a pseudo locale.

00:16:40,249 --> 00:16:41,790
It's not a real locale, but it's just

00:16:41,790 --> 00:16:43,260
for testing your application.

00:16:43,260 --> 00:16:46,790
So you can do things like making sure your UI spacing,

00:16:46,790 --> 00:16:49,150
there's enough space for longer text.

00:16:49,150 --> 00:16:51,480
So one of the things you do is double all the words

00:16:51,480 --> 00:16:53,060
you have in your message.

00:16:53,060 --> 00:16:56,690
Another thing to do is recognize that these messages were all

00:16:56,690 --> 00:16:57,750
extracted and translated.

00:16:57,750 --> 00:16:59,458
Maybe an attribute didn't get recognized.

00:16:59,458 --> 00:17:00,390
How do you do that?

00:17:00,390 --> 00:17:03,520
So we will mark up the messages in some sense.

00:17:03,520 --> 00:17:05,720
Like, if your English speakers will put umlauts,

00:17:05,720 --> 00:17:06,960
because that's strange enough for us.

00:17:06,960 --> 00:17:09,085
And then you can see, oh yeah, that was translated.

00:17:09,085 --> 00:17:10,270
That looks like rubbish.

00:17:10,270 --> 00:17:12,680
And you want to notice if some messages got clipped.

00:17:12,680 --> 00:17:15,250
And to do that, we stick brackets at the end

00:17:15,250 --> 00:17:16,659
or something on either side.

00:17:16,659 --> 00:17:17,950
And then you can say, oh right.

00:17:17,950 --> 00:17:19,349
I don't see the right brackets, so it was clipped,

00:17:19,349 --> 00:17:20,619
or something like that.

00:17:20,619 --> 00:17:21,410
Those are all ways.

00:17:21,410 --> 00:17:22,710
And what's an example of this?

00:17:22,710 --> 00:17:25,180
An example is if you had to enter your name,

00:17:25,180 --> 00:17:26,640
the result could look like this.

00:17:26,640 --> 00:17:28,860
So you have the brackets and the umlauts and all that stuff.

00:17:28,860 --> 00:17:31,068
And that's just one of the pseudotranslation schemes.

00:17:31,068 --> 00:17:32,800
And you can pick which one you want.

00:17:32,800 --> 00:17:34,665
And adjust your application with that.

00:17:34,665 --> 00:17:36,040
PASCAL PRECHT: That's very sweet.

00:17:36,040 --> 00:17:39,230
So let's take a step back and think

00:17:39,230 --> 00:17:40,570
about what we've learned today.

00:17:40,570 --> 00:17:43,700
So we learned that internationalization is really

00:17:43,700 --> 00:17:46,960
much more than just changing a language, from one language

00:17:46,960 --> 00:17:48,370
to another.

00:17:48,370 --> 00:17:51,160
We've learned that there's a whole process required,

00:17:51,160 --> 00:17:53,430
in order to implement internationalization.

00:17:53,430 --> 00:17:56,920
We've learned that context is super important for translators

00:17:56,920 --> 00:18:00,750
in order to deliver high quality translations.

00:18:00,750 --> 00:18:03,220
We've learned how we can annotate all of our existing

00:18:03,220 --> 00:18:06,110
templates with this kind of information,

00:18:06,110 --> 00:18:08,300
even in non-Angular applications,

00:18:08,300 --> 00:18:10,490
even in basic websites.

00:18:10,490 --> 00:18:12,760
We've learned about the new pluralization and gender

00:18:12,760 --> 00:18:16,300
selection syntax that we can use across all of our applications.

00:18:16,300 --> 00:18:18,360
And it's all backwards compatible.

00:18:18,360 --> 00:18:19,600
Nothing breaks.

00:18:19,600 --> 00:18:21,470
All that stuff that we're showing right here

00:18:21,470 --> 00:18:25,620
works for existing Angular 1.x applications,

00:18:25,620 --> 00:18:28,220
and upcoming 2.x applications.

00:18:28,220 --> 00:18:31,500
So you might wonder right now, when can we

00:18:31,500 --> 00:18:34,350
start using all the cool stuff?

00:18:34,350 --> 00:18:36,010
So Chirayu, what's the status here?

00:18:36,010 --> 00:18:37,260
CHIRAYU KRISHNAPPA: All right.

00:18:37,260 --> 00:18:38,270
When can you use it?

00:18:38,270 --> 00:18:42,580
So we're excited to say that the message formats syntax

00:18:42,580 --> 00:18:45,805
that you saw with interpolation, that is shipping with Angular

00:18:45,805 --> 00:18:48,554
1.4 when it's released, the next couple of weeks or whenever.

00:18:48,554 --> 00:18:50,220
And you can start using that right away.

00:18:50,220 --> 00:18:51,810
So that's really nice news.

00:18:51,810 --> 00:18:52,750
PASCAL PRECHT: If you think that is awesome,

00:18:52,750 --> 00:18:55,158
then you could put your hands together right now.

00:18:55,158 --> 00:18:58,026
[APPLAUSE]

00:18:58,026 --> 00:19:01,372


00:19:01,372 --> 00:19:03,690
CHIRAYU KRISHNAPPA: The rest of the extraction

00:19:03,690 --> 00:19:06,750
and Pseudotranslation-- that pipeline

00:19:06,750 --> 00:19:09,310
is going to be common code between Angular 1 and 2.

00:19:09,310 --> 00:19:10,500
This is a prototype that already works.

00:19:10,500 --> 00:19:12,208
And some of the screen shots that you saw

00:19:12,208 --> 00:19:13,050
were from that too.

00:19:13,050 --> 00:19:14,890
And production version in JavaScript,

00:19:14,890 --> 00:19:17,930
which is going to work for Angular 1 and 2 is in the works

00:19:17,930 --> 00:19:18,447
now.

00:19:18,447 --> 00:19:20,780
I don't have a timeline for when it's going to be ready.

00:19:20,780 --> 00:19:23,140
And for Angular 2 support, for the parcel

00:19:23,140 --> 00:19:26,549
to understand the interpolation exterpolation syntax,

00:19:26,549 --> 00:19:28,590
the work is going to begin at the end this month,

00:19:28,590 --> 00:19:29,619
sometime next month.

00:19:29,619 --> 00:19:31,660
And again, it's TBD when that's going to be done.

00:19:31,660 --> 00:19:33,270
But that will probably be done sooner

00:19:33,270 --> 00:19:35,030
than the rest of the command line stuff.

00:19:35,030 --> 00:19:35,863
PASCAL PRECHT: Yeah.

00:19:35,863 --> 00:19:37,236
Very cool stuff going on here.

00:19:37,236 --> 00:19:38,360
I think that's all we have.

00:19:38,360 --> 00:19:40,950
The slides are up online right here.

00:19:40,950 --> 00:19:45,022
If you wonder what is happening to Angular Translate,

00:19:45,022 --> 00:19:45,980
check out those slides.

00:19:45,980 --> 00:19:47,972
There's a Easter Egg slide right here.

00:19:47,972 --> 00:19:48,680
There's the link.

00:19:48,680 --> 00:19:49,929
Click it, and you find it out.

00:19:49,929 --> 00:19:50,900
And that's all we have.

00:19:50,900 --> 00:19:52,780
Make sure to find us in the hallway after the talk,

00:19:52,780 --> 00:19:53,890
if you have questions.

00:19:53,890 --> 00:19:54,390
Thank you.

00:19:54,390 --> 00:19:56,090
CHIRAYU KRISHNAPPA: Thank you.


YouTube URL: https://www.youtube.com/watch?v=iBBkCA1M-mc


