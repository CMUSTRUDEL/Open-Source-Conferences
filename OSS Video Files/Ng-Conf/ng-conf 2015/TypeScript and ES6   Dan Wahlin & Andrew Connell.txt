Title: TypeScript and ES6   Dan Wahlin & Andrew Connell
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,500


00:00:00,500 --> 00:00:02,400
DAN WAHLIN: In the after-lunch break--

00:00:02,400 --> 00:00:04,409
I know everybody gets a little tired,

00:00:04,409 --> 00:00:06,450
so we're going to do just a quick little exercise

00:00:06,450 --> 00:00:07,150
in futility.

00:00:07,150 --> 00:00:10,280
Because we have these little-- well,

00:00:10,280 --> 00:00:14,100
I have one on too-- these little TypeScript Angular shirts.

00:00:14,100 --> 00:00:15,050
AUDIENCE: Woo!

00:00:15,050 --> 00:00:16,475
DAN WAHLIN: Just for fun.

00:00:16,475 --> 00:00:17,126
Just for fun.

00:00:17,126 --> 00:00:19,000
Now, unfortunately, I could only haul so many

00:00:19,000 --> 00:00:20,135
in my little carry-on.

00:00:20,135 --> 00:00:21,721
So who wants a TypeScript?

00:00:21,721 --> 00:00:25,942
We've got a-- oh, that sucked.

00:00:25,942 --> 00:00:28,870
[LAUGH] There you go.

00:00:28,870 --> 00:00:33,470
We've got one more-- one more.

00:00:33,470 --> 00:00:38,562
[LAUGH] That was pretty good.

00:00:38,562 --> 00:00:40,270
ANDREW CONNELL: I like the shirt, though.

00:00:40,270 --> 00:00:42,380
Where'd you get that?

00:00:42,380 --> 00:00:43,714
DAN WAHLIN: We had them made up.

00:00:43,714 --> 00:00:45,380
ANDREW CONNELL: Did you make one for me?

00:00:45,380 --> 00:00:47,252
DAN WAHLIN: We would look pretty geeky, man.

00:00:47,252 --> 00:00:47,590
ANDREW CONNELL: Right.

00:00:47,590 --> 00:00:49,048
This is the place to start fashion,

00:00:49,048 --> 00:00:50,684
with a bunch of developers, right?

00:00:50,684 --> 00:00:51,640
DAN WAHLIN: Well, yes.

00:00:51,640 --> 00:00:53,460
We are very fashionable here, so.

00:00:53,460 --> 00:00:53,960
All right.

00:00:53,960 --> 00:00:56,750
Well, my name's Dan Wahlin, and this is my good buddy.

00:00:56,750 --> 00:00:58,041
ANDREW CONNELL: Andrew Connell.

00:00:58,041 --> 00:00:59,662
How's everybody?

00:00:59,662 --> 00:01:00,495
[INTERPOSING VOICES]

00:01:00,495 --> 00:01:02,030
DAN WAHLIN: Ooh, that was weak.

00:01:02,030 --> 00:01:03,630
How's everybody?

00:01:03,630 --> 00:01:04,594
AUDIENCE: Real good.

00:01:04,594 --> 00:01:05,558
AUDIENCE: Woo!

00:01:05,558 --> 00:01:06,350
[APPLAUSE]

00:01:06,350 --> 00:01:06,570
DAN WAHLIN: Real good.

00:01:06,570 --> 00:01:07,070
All right.

00:01:07,070 --> 00:01:08,750
So we've only got about 20 minutes,

00:01:08,750 --> 00:01:10,370
so we're going to jump in and talk

00:01:10,370 --> 00:01:14,560
about TypeScript and Angular and ES6, and a little bit of that.

00:01:14,560 --> 00:01:19,310
So the overall agenda for us is going to drive a lot of code.

00:01:19,310 --> 00:01:21,310
You can run off to GitHub, if you're interested.

00:01:21,310 --> 00:01:22,850
I'll show this at the end, as well.

00:01:22,850 --> 00:01:23,350
Yeah.

00:01:23,350 --> 00:01:29,840
Savannah, will you please-- [LAUGH] There we go.

00:01:29,840 --> 00:01:32,664
So we're going to be going through these demos,

00:01:32,664 --> 00:01:35,080
and we're going to basically talk about how do we write it

00:01:35,080 --> 00:01:37,090
today-- which everybody knows, with JavaScript and things.

00:01:37,090 --> 00:01:38,750
But then we're going to compare it to how could

00:01:38,750 --> 00:01:40,410
you do it with TypeScript, and we're

00:01:40,410 --> 00:01:41,868
going to talk about some TypeScript

00:01:41,868 --> 00:01:42,857
features along the way.

00:01:42,857 --> 00:01:43,690
ANDREW CONNELL: Yep.

00:01:43,690 --> 00:01:46,320
The last demo, too-- big soup-to-nuts demo

00:01:46,320 --> 00:01:48,480
that we did that you can go ahead and grab.

00:01:48,480 --> 00:01:50,340
The first two ones are really simple,

00:01:50,340 --> 00:01:52,548
just to kind of show off the language and the compare

00:01:52,548 --> 00:01:53,120
and contrast.

00:01:53,120 --> 00:01:55,390
But the last demo, that's a big, real world kind of a thing

00:01:55,390 --> 00:01:57,306
that we'll also touch on a little bit in here.

00:01:57,306 --> 00:01:58,830
But you guys can go grab it.

00:01:58,830 --> 00:01:59,940
DAN WAHLIN: Exactly.

00:01:59,940 --> 00:02:01,150
So here's kind of the agenda.

00:02:01,150 --> 00:02:02,500
We don't actually have many slides,

00:02:02,500 --> 00:02:04,750
but we try to be organized and at least look that way.

00:02:04,750 --> 00:02:06,230
So we'll jump in.

00:02:06,230 --> 00:02:06,730
All right.

00:02:06,730 --> 00:02:08,020
So let's talk about why TypeScript.

00:02:08,020 --> 00:02:09,060
So kick us off, here.

00:02:09,060 --> 00:02:09,340
ANDREW CONNELL: All right.

00:02:09,340 --> 00:02:10,369
So why TypeScript?

00:02:10,369 --> 00:02:11,910
So the whole idea behind TypeScript--

00:02:11,910 --> 00:02:13,595
it's a superset of JavaScript that's

00:02:13,595 --> 00:02:15,510
supposed to make our lives easier

00:02:15,510 --> 00:02:18,120
and maintain more enterprise-level applications--

00:02:18,120 --> 00:02:20,410
enterprise-level and enterprise-scale type

00:02:20,410 --> 00:02:21,760
JavaScript-based applications.

00:02:21,760 --> 00:02:23,686
So it's getting us a lot of different things.

00:02:23,686 --> 00:02:25,560
We saw a little bit of the stuff this morning

00:02:25,560 --> 00:02:27,690
about strongly-typed classes and stuff.

00:02:27,690 --> 00:02:30,470
But that's the big piece-- you write JavaScript,

00:02:30,470 --> 00:02:32,085
it is valid TypeScript.

00:02:32,085 --> 00:02:34,210
DAN WAHLIN: And that's one of my favorite features.

00:02:34,210 --> 00:02:34,430
ANDREW CONNELL: Yes.

00:02:34,430 --> 00:02:36,680
DAN WAHLIN: You can actually take your JavaScript today,

00:02:36,680 --> 00:02:38,500
plug it in-- in fact, we're going to do that in a sec--

00:02:38,500 --> 00:02:39,240
and it just runs.

00:02:39,240 --> 00:02:40,980
So it's also very modular.

00:02:40,980 --> 00:02:42,480
So those that have played-- how many

00:02:42,480 --> 00:02:44,120
have played with ES6 features in here?

00:02:44,120 --> 00:02:44,890
Just so I know.

00:02:44,890 --> 00:02:45,390
All right.

00:02:45,390 --> 00:02:46,110
ANDREW CONNELL: That's a good number.

00:02:46,110 --> 00:02:47,040
DAN WAHLIN: A fair number of you.

00:02:47,040 --> 00:02:49,150
How many of you have actually done TypeScript in here?

00:02:49,150 --> 00:02:50,316
ANDREW CONNELL: There we go.

00:02:50,316 --> 00:02:51,350
DAN WAHLIN: OK, cool.

00:02:51,350 --> 00:02:52,900
One of the things in JavaScript--

00:02:52,900 --> 00:02:54,620
you could certainly do modularity,

00:02:54,620 --> 00:02:56,080
if you kind of know what you're doing there.

00:02:56,080 --> 00:02:57,579
But with TypeScript, it's definitely

00:02:57,579 --> 00:02:58,930
a lot easier in ES6 in general.

00:02:58,930 --> 00:03:02,040
So tomorrow they'll be having more talks on this.

00:03:02,040 --> 00:03:04,410
And we're not going to go into that today too much,

00:03:04,410 --> 00:03:05,744
but it is very modular that way.

00:03:05,744 --> 00:03:06,618
ANDREW CONNELL: Yeah.

00:03:06,618 --> 00:03:08,040
Another thing too is it helps you

00:03:08,040 --> 00:03:12,869
build a scalable application structure.

00:03:12,869 --> 00:03:15,160
So you want to organize your project in different ways.

00:03:15,160 --> 00:03:15,951
It's very flexible.

00:03:15,951 --> 00:03:17,710
It's not terribly opinionated, so you

00:03:17,710 --> 00:03:21,990
can choose how you want to lay out your project.

00:03:21,990 --> 00:03:26,520
I'll show you some stuff that we've done with gulp,

00:03:26,520 --> 00:03:30,650
and to use the types that we've defined in some TypeScript

00:03:30,650 --> 00:03:32,760
files-- to be able to leverage them in other files

00:03:32,760 --> 00:03:33,450
very easily.

00:03:33,450 --> 00:03:35,700
So I'll give you little tips on the organization stuff

00:03:35,700 --> 00:03:37,200
as we move through this.

00:03:37,200 --> 00:03:39,530
DAN WAHLIN: How many are building really big JavaScript

00:03:39,530 --> 00:03:42,790
apps right now, as in many, many, many thousands of lines

00:03:42,790 --> 00:03:43,290
of code?

00:03:43,290 --> 00:03:43,560
All right.

00:03:43,560 --> 00:03:45,610
Well, you all know that, you know, unit tests are great

00:03:45,610 --> 00:03:47,234
and we should all have them, of course.

00:03:47,234 --> 00:03:49,480
But it's pretty easy to accidentally

00:03:49,480 --> 00:03:52,774
mix up types and screw things up without realizing it,

00:03:52,774 --> 00:03:55,440
unless you have some really good tests to back it up-- hopefully

00:03:55,440 --> 00:03:56,067
you do.

00:03:56,067 --> 00:03:58,650
Well, you're going to see that we do have strong typing, so we

00:03:58,650 --> 00:04:01,340
can do things like numbers and strings and arrays

00:04:01,340 --> 00:04:03,400
and actually type our variables if you want.

00:04:03,400 --> 00:04:04,180
You don't have to.

00:04:04,180 --> 00:04:04,930
You don't have to.

00:04:04,930 --> 00:04:07,160
And you can even do custom types, that we'll talk about.

00:04:07,160 --> 00:04:07,286
ANDREW CONNELL: Yeah.

00:04:07,286 --> 00:04:07,540
It's nice.

00:04:07,540 --> 00:04:09,498
It's a big point, too, is you want to make sure

00:04:09,498 --> 00:04:11,300
that you're going to see a lot of stuff

00:04:11,300 --> 00:04:13,040
that you can do with TypeScript, but you

00:04:13,040 --> 00:04:15,070
don't have to do everything with TypeScript.

00:04:15,070 --> 00:04:17,111
You can just take advantage of some of the stuff.

00:04:17,111 --> 00:04:19,390
If you just want the static types or the more strong

00:04:19,390 --> 00:04:21,399
typing, then you can just take advantage of that

00:04:21,399 --> 00:04:22,820
and get that benefit.

00:04:22,820 --> 00:04:25,630
The tooling support-- also very robust with TypeScript.

00:04:25,630 --> 00:04:28,150
All of the big editors support it,

00:04:28,150 --> 00:04:30,647
from the WebStorm to Brackets-- everybody's

00:04:30,647 --> 00:04:32,480
got plug-ins and stuff that help support it,

00:04:32,480 --> 00:04:35,400
as well as with lenting tools-- TS Lent and stuff.

00:04:35,400 --> 00:04:39,002
And we'll show it to you-- how we're doing it inside WebStorm.

00:04:39,002 --> 00:04:41,460
We're going to show you three different editors, actually--

00:04:41,460 --> 00:04:43,990
Sublime, Brackets, and WebStorm.

00:04:43,990 --> 00:04:46,240
DAN WAHLIN: And then the final piece here is that--

00:04:46,240 --> 00:04:47,906
and it was announced today when Jonathan

00:04:47,906 --> 00:04:51,310
came up-- that the feature parity with ES6 and TypeScript,

00:04:51,310 --> 00:04:53,160
especially with 1.5 coming out.

00:04:53,160 --> 00:04:55,540
1.4 is what we're on today, right here.

00:04:55,540 --> 00:04:59,110
But awesome support for ES6, and so it

00:04:59,110 --> 00:05:01,730
provides a great migration strategy, I think,

00:05:01,730 --> 00:05:03,430
if you're ready to jump to ES6.

00:05:03,430 --> 00:05:05,880
Because you could always do ES6 and do a gulp or grunt

00:05:05,880 --> 00:05:08,270
and do ES5.

00:05:08,270 --> 00:05:11,669
But by doing this, it's really easy.

00:05:11,669 --> 00:05:13,210
Things like classes and modules we're

00:05:13,210 --> 00:05:15,126
going to talk about here in a moment-- they've

00:05:15,126 --> 00:05:16,720
been supported for a long time.

00:05:16,720 --> 00:05:17,304
It works well.

00:05:17,304 --> 00:05:19,761
ANDREW CONNELL: Dan and I, when we were putting the session

00:05:19,761 --> 00:05:22,220
together, one little thing we were going to talk about

00:05:22,220 --> 00:05:25,760
was asking each other, so, what's the most important thing

00:05:25,760 --> 00:05:28,307
or what's the biggest thing that you like about TypeScript,

00:05:28,307 --> 00:05:30,390
and of course we both have the same answer, right?

00:05:30,390 --> 00:05:32,405
DAN WAHLIN: I don't remember-- what did I say back then?

00:05:32,405 --> 00:05:32,790
ANDREW CONNELL: [LAUGH]

00:05:32,790 --> 00:05:34,665
DAN WAHLIN: My answer now that we're in front

00:05:34,665 --> 00:05:38,220
of our best friends here it that you can have your cake

00:05:38,220 --> 00:05:39,060
and eat it too.

00:05:39,060 --> 00:05:39,640
ANDREW CONNELL: Yeah.

00:05:39,640 --> 00:05:41,848
DAN WAHLIN: You can do as little or much as you like.

00:05:41,848 --> 00:05:43,600
ANDREW CONNELL: Well, for, me, I'm

00:05:43,600 --> 00:05:51,412
very familiar writing standard ES5-style JavaScript.

00:05:51,412 --> 00:05:53,370
ES6-style JavaScript-- not as familiar with it.

00:05:53,370 --> 00:05:54,810
But what's cool about it is you get familiar working

00:05:54,810 --> 00:05:56,020
with TypeScript.

00:05:56,020 --> 00:05:58,480
And as TypeScript evolves and as we get to the point

00:05:58,480 --> 00:06:02,000
where we can compile down to ES6 and have true ES6,

00:06:02,000 --> 00:06:05,350
it helps you kind of promote to build

00:06:05,350 --> 00:06:07,060
your JavaScript-based solutions today

00:06:07,060 --> 00:06:12,794
in a much more conformative and future-proofing for ES6.

00:06:12,794 --> 00:06:15,210
You can just change it when ES6-- when all of the browsers

00:06:15,210 --> 00:06:15,710
support it.

00:06:15,710 --> 00:06:17,770
So you don't compile it down to ES5.

00:06:17,770 --> 00:06:18,850
Compile it down to ES6.

00:06:18,850 --> 00:06:22,100
So it really does promote that working in ES6

00:06:22,100 --> 00:06:24,410
today without having to worry about the transpiling

00:06:24,410 --> 00:06:26,187
of switching from ES6 to ES5.

00:06:26,187 --> 00:06:27,020
DAN WAHLIN: Exactly.

00:06:27,020 --> 00:06:31,240
So a quick story on that-- so I have some friends at Intel who

00:06:31,240 --> 00:06:33,330
about, gosh, probably about two years ago,

00:06:33,330 --> 00:06:34,975
decided to go TypeScript.

00:06:34,975 --> 00:06:36,600
At the time we're all talking about it,

00:06:36,600 --> 00:06:39,940
and I was in a little bit on this project initially.

00:06:39,940 --> 00:06:42,650
And they said, yeah, we're going to go for it and try it.

00:06:42,650 --> 00:06:45,145
And now, as of today, there's sitting pretty well, I think.

00:06:45,145 --> 00:06:47,395
So they're like, we're prophetic, you know?

00:06:47,395 --> 00:06:48,510
ANDREW CONNELL: [LAUGH] It feels good.

00:06:48,510 --> 00:06:50,460
DAN WAHLIN: But, all right-- so a couple of the key features.

00:06:50,460 --> 00:06:52,293
I'm actually going to show you most of these

00:06:52,293 --> 00:06:53,840
as we go into a demo here.

00:06:53,840 --> 00:06:55,614
So we mentioned strongly typing.

00:06:55,614 --> 00:06:57,030
Modules and classes-- you're going

00:06:57,030 --> 00:06:58,210
to be able to do that if you want.

00:06:58,210 --> 00:07:00,460
Now, you're going to see coming up, you don't have to.

00:07:00,460 --> 00:07:02,424
If you want to do just functional programming,

00:07:02,424 --> 00:07:03,840
you can do functional programming.

00:07:03,840 --> 00:07:05,320
You don't like to type your stuff?

00:07:05,320 --> 00:07:06,736
You don't have to type your stuff.

00:07:06,736 --> 00:07:08,292
So there's a lot of benefits there.

00:07:08,292 --> 00:07:09,750
ANDREW CONNELL: The other thing too

00:07:09,750 --> 00:07:11,330
is we can have interfaces, as well.

00:07:11,330 --> 00:07:14,020
So we can define what our classes and types should

00:07:14,020 --> 00:07:16,110
look like, and it allows us to do things like work

00:07:16,110 --> 00:07:18,550
with a little initializer-style syntax.

00:07:18,550 --> 00:07:20,530
So we don't have to have to new-up a new object

00:07:20,530 --> 00:07:21,780
and then set all the properties.

00:07:21,780 --> 00:07:23,196
We can actually set the properties

00:07:23,196 --> 00:07:25,380
when we're actually newing the object up

00:07:25,380 --> 00:07:27,444
using the interface syntax that we have.

00:07:27,444 --> 00:07:29,360
AUDIENCE: So has anyone used generics in here,

00:07:29,360 --> 00:07:31,440
by chance, in any language out there?

00:07:31,440 --> 00:07:33,440
It's called code templates, if you're new to it.

00:07:33,440 --> 00:07:33,950
You could do that.

00:07:33,950 --> 00:07:35,824
We're not going to have time to go into that,

00:07:35,824 --> 00:07:36,710
but you can do that.

00:07:36,710 --> 00:07:38,060
We've already mentioned modules.

00:07:38,060 --> 00:07:39,870
You're going to talk about type definition files.

00:07:39,870 --> 00:07:41,036
ANDREW CONNELL: [INAUDIBLE].

00:07:41,036 --> 00:07:44,739
DAN WAHLIN: It compiles to ES3, ES5, or ES6, now.

00:07:44,739 --> 00:07:47,030
And then we're going to jump into some of the features.

00:07:47,030 --> 00:07:48,200
So let's talk about structure real quick,

00:07:48,200 --> 00:07:49,910
and I'll show you a quick demo.

00:07:49,910 --> 00:07:52,240
So you kind of have two roads you can go.

00:07:52,240 --> 00:07:54,300
Number one, you can do modules.

00:07:54,300 --> 00:07:56,980
And, as I mentioned, starting with 1.5,

00:07:56,980 --> 00:08:00,080
they're going to have ES6-style module loading.

00:08:00,080 --> 00:08:03,520
And then if you want, you can go to class route.

00:08:03,520 --> 00:08:04,820
And it was kind of interesting.

00:08:04,820 --> 00:08:07,700
I was doing a little thing a while back with TypeScript.

00:08:07,700 --> 00:08:10,760
And a particular individual, who is very influential with it,

00:08:10,760 --> 00:08:12,550
went, well, you can't just show classes,

00:08:12,550 --> 00:08:15,910
because some people want to go the functional programming

00:08:15,910 --> 00:08:16,830
approach.

00:08:16,830 --> 00:08:17,971
You can do that too.

00:08:17,971 --> 00:08:18,470
All right?

00:08:18,470 --> 00:08:19,969
So let's look at an example, though,

00:08:19,969 --> 00:08:22,640
because most of you in here have done the functional approach.

00:08:22,640 --> 00:08:25,680
Let's look at an example here of kind of what we can do with it.

00:08:25,680 --> 00:08:31,390
So let's start off and say I have my good buddy Andrew,

00:08:31,390 --> 00:08:35,911
and Andrew is, we'll say-- what are you, about 24,

00:08:35,911 --> 00:08:36,870
give or take?

00:08:36,870 --> 00:08:37,370
[LAUGH]

00:08:37,370 --> 00:08:38,578
ANDREW CONNELL: I'll take it.

00:08:38,578 --> 00:08:39,340
I'll take it.

00:08:39,340 --> 00:08:41,404
DAN WAHLIN: And let's just do an add.

00:08:41,404 --> 00:08:43,070
Now everybody knows-- once you see this,

00:08:43,070 --> 00:08:44,028
you're going to go, OK.

00:08:44,028 --> 00:08:45,700
I see where this is going.

00:08:45,700 --> 00:08:47,510
Because we all know what happens.

00:08:47,510 --> 00:08:49,718
ANDREW CONNELL: So this is the TypeScript playground.

00:08:49,718 --> 00:08:51,192
You can do this typescriptlang.org,

00:08:51,192 --> 00:08:53,150
where you can type in, you can Write TypeScript

00:08:53,150 --> 00:08:55,441
on the left-hand side, and it does the live compliation

00:08:55,441 --> 00:08:58,744
down in JavaScript on the other side-- my left

00:08:58,744 --> 00:09:00,000
and right backwards.

00:09:00,000 --> 00:09:01,160
DAN WAHLIN: Yeah, whatever side that is.

00:09:01,160 --> 00:09:01,730
ANDREW CONNELL: That's OK.

00:09:01,730 --> 00:09:03,030
I'm on the other side of the road right now.

00:09:03,030 --> 00:09:04,988
DAN WAHLIN: And then we could alert the result.

00:09:04,988 --> 00:09:08,110
Now, if you look over to, I guess, your right,

00:09:08,110 --> 00:09:11,162
you'll notice in this case that everything looks the same.

00:09:11,162 --> 00:09:13,370
But obviously if we run this, what's going to happen?

00:09:13,370 --> 00:09:14,590
ANDREW CONNELL: We're going to get a runtime issue,

00:09:14,590 --> 00:09:15,660
or it's going to concatenate a string.

00:09:15,660 --> 00:09:15,870
[INTERPOSING VOICES]

00:09:15,870 --> 00:09:16,390
DAN WAHLIN: In this case, yeah.

00:09:16,390 --> 00:09:17,540
It's going to concatenate.

00:09:17,540 --> 00:09:19,040
So one of the nice things, if you're

00:09:19,040 --> 00:09:21,456
new to TypeScript-- which is kind of what we're here for--

00:09:21,456 --> 00:09:23,845
is we could come in and say, no, these are numbers.

00:09:23,845 --> 00:09:26,390
So you simply put a colon and a type.

00:09:26,390 --> 00:09:28,760
And now you'll see that name here.

00:09:28,760 --> 00:09:30,640
It gives us a nice little error-- argument

00:09:30,640 --> 00:09:31,530
of type strings.

00:09:31,530 --> 00:09:33,416
It's basically not an assignable number.

00:09:33,416 --> 00:09:34,040
It makes sense.

00:09:34,040 --> 00:09:36,248
If you've ever worked with a strongly typed language,

00:09:36,248 --> 00:09:37,526
you're used to this.

00:09:37,526 --> 00:09:38,497
ANDREW CONNELL: Yep.

00:09:38,497 --> 00:09:40,580
DAN WAHLIN: Now, that's kind of the basics of some

00:09:40,580 --> 00:09:41,100
of the types.

00:09:41,100 --> 00:09:42,350
And there's others you can do.

00:09:42,350 --> 00:09:45,370
But you could also do things like this.

00:09:45,370 --> 00:09:47,580
You could do modules.

00:09:47,580 --> 00:09:49,160
And let's do a class.

00:09:49,160 --> 00:09:51,770


00:09:51,770 --> 00:09:52,270
All right.

00:09:52,270 --> 00:09:53,500
Now, let's see.

00:09:53,500 --> 00:09:54,500
What do we have, Andrew?

00:09:54,500 --> 00:09:55,791
ANDREW CONNELL: We've got name.

00:09:55,791 --> 00:09:58,771
DAN WAHLIN: Name, yeah, and age.

00:09:58,771 --> 00:09:59,270
OK.

00:09:59,270 --> 00:10:01,669
And these are variables, fields--

00:10:01,669 --> 00:10:02,960
whatever you want to call them.

00:10:02,960 --> 00:10:04,990
But they're part of your class.

00:10:04,990 --> 00:10:08,800
And then if anyone's done ES6, you'll recognize this.

00:10:08,800 --> 00:10:12,140
We can come in and have a name that can be passed in,

00:10:12,140 --> 00:10:14,410
and an age-- maybe it's just going to wrap a little,

00:10:14,410 --> 00:10:19,660
it looks like, but that's all right-- which is a number.

00:10:19,660 --> 00:10:21,882
Let me scroll back over.

00:10:21,882 --> 00:10:23,340
And then we could assign whatever's

00:10:23,340 --> 00:10:27,590
passed in to the name and to the age, like that.

00:10:27,590 --> 00:10:30,100
Now, if you look over to the right, look what's going on.

00:10:30,100 --> 00:10:32,350
A lot of you will recognize this, because you probably

00:10:32,350 --> 00:10:33,210
do it every day.

00:10:33,210 --> 00:10:36,780
We're basically namespacing our code, there All right.

00:10:36,780 --> 00:10:38,251
Well, that's pretty cool.

00:10:38,251 --> 00:10:40,084
ANDREW CONNELL: Why don't we add a function?

00:10:40,084 --> 00:10:40,840
DAN WAHLIN: Yeah.

00:10:40,840 --> 00:10:41,510
ANDREW CONNELL: We'll do that in a minute?

00:10:41,510 --> 00:10:42,350
DAN WAHLIN: No, we'll add that too.

00:10:42,350 --> 00:10:42,720
Good idea.

00:10:42,720 --> 00:10:43,270
Good idea.

00:10:43,270 --> 00:10:45,737
I do have a function, just for Andrew.

00:10:45,737 --> 00:10:47,070
Now, watch what happens, though.

00:10:47,070 --> 00:10:50,640
If I do ngConf., I don't get anything.

00:10:50,640 --> 00:10:55,865
And the reason is that I have to mark this class as Export.

00:10:55,865 --> 00:10:57,240
And that's basically going to say

00:10:57,240 --> 00:11:00,480
that it is available outside of the module.

00:11:00,480 --> 00:11:04,690
And so we can come in, we can do person, pass in Andrew,

00:11:04,690 --> 00:11:06,140
pass in-- what was your age again?

00:11:06,140 --> 00:11:06,370
22?

00:11:06,370 --> 00:11:07,285
ANDREW CONNELL: It was 22.

00:11:07,285 --> 00:11:08,260
Yeah, I'll get younger.

00:11:08,260 --> 00:11:08,700
DAN WAHLIN: Nice.

00:11:08,700 --> 00:11:10,292
ANDREW CONNELL: I like this control [INAUDIBLE].

00:11:10,292 --> 00:11:10,740
[INTERPOSING VOICES]

00:11:10,740 --> 00:11:12,448
DAN WAHLIN: [LAUGH] Whatever it is, here.

00:11:12,448 --> 00:11:14,040
Now, you'll notice, though, as we come

00:11:14,040 --> 00:11:15,180
in-- oh, I'm missing the new.

00:11:15,180 --> 00:11:15,680
Yeah.

00:11:15,680 --> 00:11:16,880
Thank you.

00:11:16,880 --> 00:11:18,167
Minor detail.

00:11:18,167 --> 00:11:20,500
When you come in here, though, if you look at the right,

00:11:20,500 --> 00:11:21,791
this is what's being generated.

00:11:21,791 --> 00:11:25,100
Now again, you could do ES3, ES5, or ES6.

00:11:25,100 --> 00:11:26,190
So it's kind of up to you.

00:11:26,190 --> 00:11:26,690
All right.

00:11:26,690 --> 00:11:29,070
So to wrap up, what do you want, a function?

00:11:29,070 --> 00:11:29,780
do a function.

00:11:29,780 --> 00:11:30,150
DAN WAHLIN: All right.

00:11:30,150 --> 00:11:31,024
Let's do getReal_Age.

00:11:31,024 --> 00:11:33,672


00:11:33,672 --> 00:11:34,874
ANDREW CONNELL: Uh oh.

00:11:34,874 --> 00:11:35,790
DAN WAHLIN: All right?

00:11:35,790 --> 00:11:38,399
And this is going to be something like age plus--

00:11:38,399 --> 00:11:39,440
ANDREW CONNELL: Go ahead.

00:11:39,440 --> 00:11:41,698
No just watch what it's going to do here.

00:11:41,698 --> 00:11:42,198
[LAUGH]

00:11:42,198 --> 00:11:43,370
DAN WAHLIN: 30, 20.

00:11:43,370 --> 00:11:45,160
ANDREW CONNELL: Oh, that's my coding age.

00:11:45,160 --> 00:11:46,534
That's about what it feels like.

00:11:46,534 --> 00:11:47,450
DAN WAHLIN: All right.

00:11:47,450 --> 00:11:49,324
So anyway, that's what a function looks like.

00:11:49,324 --> 00:11:52,810
Note that the function keyword is not there.

00:11:52,810 --> 00:11:55,029
Now I can still have functions interspersed

00:11:55,029 --> 00:11:55,820
in different areas.

00:11:55,820 --> 00:11:58,150
But, in this case, that would be an example

00:11:58,150 --> 00:12:00,320
of a quick look at a class.

00:12:00,320 --> 00:12:02,620
Now, what if we want to reuse the person?

00:12:02,620 --> 00:12:04,786
ANDREW CONNELL: What if we want to reuse the person?

00:12:04,786 --> 00:12:05,890
Well, I was going to say--

00:12:05,890 --> 00:12:06,598
DAN WAHLIN: Yeah.

00:12:06,598 --> 00:12:07,300
We can come in.

00:12:07,300 --> 00:12:09,662
I'll just export it here.

00:12:09,662 --> 00:12:10,870
ANDREW CONNELL: Do a manager.

00:12:10,870 --> 00:12:11,170
How's that?

00:12:11,170 --> 00:12:11,795
DAN WAHLIN: OK.

00:12:11,795 --> 00:12:17,230
We'll do a manager extends person.

00:12:17,230 --> 00:12:19,020
And we can even put a constructor.

00:12:19,020 --> 00:12:19,960
We can put variables.

00:12:19,960 --> 00:12:20,710
We can do everything.

00:12:20,710 --> 00:12:22,126
In the interest of time, here, I'm

00:12:22,126 --> 00:12:24,130
going to go ahead and leave it as is.

00:12:24,130 --> 00:12:25,140
But that is an example.

00:12:25,140 --> 00:12:26,530
And you'll notice over at the right-- look what it's using,

00:12:26,530 --> 00:12:27,424
though.

00:12:27,424 --> 00:12:28,340
It's just prototyping.

00:12:28,340 --> 00:12:30,660
You'll see an extend function up at the top.

00:12:30,660 --> 00:12:32,160
And that's actually what it's doing.

00:12:32,160 --> 00:12:34,990
So although it looks all fancy and classy and all that,

00:12:34,990 --> 00:12:36,370
it's just prototypes.

00:12:36,370 --> 00:12:37,250
ANDREW CONNELL: Yep.

00:12:37,250 --> 00:12:38,166
DAN WAHLIN: All right.

00:12:38,166 --> 00:12:42,180
So that's a quick look at that area.

00:12:42,180 --> 00:12:43,960
All right.

00:12:43,960 --> 00:12:45,610
What do we have next?

00:12:45,610 --> 00:12:47,610
ANDREW CONNELL: So let me talk just a little bit

00:12:47,610 --> 00:12:50,160
about project setup.

00:12:50,160 --> 00:12:52,550
With the way that we're doing this, a lot of the editors

00:12:52,550 --> 00:12:55,040
will compile the TypeScript down to JavaScript on the fly

00:12:55,040 --> 00:12:57,581
as you're coding it, giving you nice IntelliSense errors that

00:12:57,581 --> 00:12:58,230
are showing up.

00:12:58,230 --> 00:12:59,646
What we've done is we've set it up

00:12:59,646 --> 00:13:02,817
to have a nice gulp task to do all the compilation for us.

00:13:02,817 --> 00:13:05,150
So if I come over here and take a look at our gulp file,

00:13:05,150 --> 00:13:07,649
one of the things we've set up here is this-- where is it?--

00:13:07,649 --> 00:13:09,540
Compile TS.

00:13:09,540 --> 00:13:11,360
So what Compile TS is going to do

00:13:11,360 --> 00:13:12,860
is that we have a config file that's

00:13:12,860 --> 00:13:15,840
actually going to plug in and list all our TypeScript files.

00:13:15,840 --> 00:13:18,240
So then we're going to use a gulp plug-in that's

00:13:18,240 --> 00:13:20,580
going to allow us to go compile all of the TypeScript

00:13:20,580 --> 00:13:21,140
down for us.

00:13:21,140 --> 00:13:23,390
You can see here that it takes a couple of parameters,

00:13:23,390 --> 00:13:25,000
like how do you want to compile this?

00:13:25,000 --> 00:13:26,930
Do you want to do ES5, ES6?

00:13:26,930 --> 00:13:29,230
We can also say if we want to do declaration files,

00:13:29,230 --> 00:13:31,120
as well-- explain what those are in a second.

00:13:31,120 --> 00:13:33,122
And then if we want to do any external resolves.

00:13:33,122 --> 00:13:34,580
You generally want to put this to--

00:13:34,580 --> 00:13:37,310
or I generally put this to True, say I don't want to do this.

00:13:37,310 --> 00:13:38,930
It basically says don't try and go

00:13:38,930 --> 00:13:41,310
link up any external files that I may be referencing,

00:13:41,310 --> 00:13:43,799
because I may not have access to all of them at that time.

00:13:43,799 --> 00:13:45,340
But what we've also done is I've also

00:13:45,340 --> 00:13:47,230
set it up to where we can use source maps,

00:13:47,230 --> 00:13:49,460
as well-- so that whenever I generate my JavaScript,

00:13:49,460 --> 00:13:51,790
it's also going to generate my source maps.

00:13:51,790 --> 00:13:53,860
And when I do debugging in the browser,

00:13:53,860 --> 00:13:56,240
I can set up break points on the TypeScript files

00:13:56,240 --> 00:13:58,750
that are going to show up inside the developer tools.

00:13:58,750 --> 00:14:01,077
And I'll hit those break points in the developer tools

00:14:01,077 --> 00:14:02,910
because the browser will just map everything

00:14:02,910 --> 00:14:04,070
with the nice source maps.

00:14:04,070 --> 00:14:04,910
DAN WAHLIN: But if you don't write any bugs,

00:14:04,910 --> 00:14:06,170
you don't need that.

00:14:06,170 --> 00:14:07,345
ANDREW CONNELL: Well, I don't usually have that problem.

00:14:07,345 --> 00:14:07,740
DAN WAHLIN: OK.

00:14:07,740 --> 00:14:07,790
OK.

00:14:07,790 --> 00:14:08,070
That's good.

00:14:08,070 --> 00:14:09,230
ANDREW CONNELL: This is your gulp file.

00:14:09,230 --> 00:14:10,021
DAN WAHLIN: [LAUGH]

00:14:10,021 --> 00:14:11,700
ANDREW CONNELL: So the other thing too

00:14:11,700 --> 00:14:13,290
that we have-- and you'll see some other tasks in there, too.

00:14:13,290 --> 00:14:14,456
We've got a lenter in there.

00:14:14,456 --> 00:14:16,810
We've got this thing in there called gentsrefs.

00:14:16,810 --> 00:14:18,950
The comments explain what that does.

00:14:18,950 --> 00:14:20,900
But essentially you want to have references

00:14:20,900 --> 00:14:23,717
to all of your TS files in your other TS files

00:14:23,717 --> 00:14:25,300
so that they know what the types are--

00:14:25,300 --> 00:14:27,970
kind of inject in the signature of those files.

00:14:27,970 --> 00:14:30,830
What this does is this is a little trick that I'm using,

00:14:30,830 --> 00:14:35,600
a gulp inject trick, to generate a file

00:14:35,600 --> 00:14:38,240
called expenseadd.d.ts, which is a reference

00:14:38,240 --> 00:14:40,320
to every TS file in my project.

00:14:40,320 --> 00:14:43,140
So then when I just jump into one random file here,

00:14:43,140 --> 00:14:46,160
you'll see that I've got a reference to a type definition

00:14:46,160 --> 00:14:50,101
file-- I'll explain in a second-- and the expensed.ts.

00:14:50,101 --> 00:14:52,100
So one of the other things too that you can have

00:14:52,100 --> 00:14:54,715
is that with TypeScript, sometimes you're

00:14:54,715 --> 00:14:56,590
working with libraries-- or frequently you're

00:14:56,590 --> 00:14:59,804
working with libraries, like Angular-- that are not written

00:14:59,804 --> 00:15:02,220
in TypeScript today and you don't have the Type definition

00:15:02,220 --> 00:15:02,720
information.

00:15:02,720 --> 00:15:04,260
You just have the JavaScript.

00:15:04,260 --> 00:15:07,400
So what the community has done is they've come around

00:15:07,400 --> 00:15:09,650
and they've built all of these different things called

00:15:09,650 --> 00:15:11,380
type definition files.

00:15:11,380 --> 00:15:15,706
And you'll see these files named as whatever it is .d.ts.

00:15:15,706 --> 00:15:17,080
And what that essentially does is

00:15:17,080 --> 00:15:19,190
it's really just the signature with all

00:15:19,190 --> 00:15:22,250
of the strong typing defined inside of that of the library

00:15:22,250 --> 00:15:23,487
that you're using.

00:15:23,487 --> 00:15:24,820
So you can go grab these things.

00:15:24,820 --> 00:15:26,610
There's a tool called TSD.

00:15:26,610 --> 00:15:29,410
It's from the DefinitelyTyped group.

00:15:29,410 --> 00:15:34,270
DefinitelyTyped is a community-run effort

00:15:34,270 --> 00:15:37,070
where everybody's contributing different type files.

00:15:37,070 --> 00:15:39,540
TSD is-- essentially think of it as like Bower

00:15:39,540 --> 00:15:41,140
but for type definition files.

00:15:41,140 --> 00:15:42,460
And so you can grab those in.

00:15:42,460 --> 00:15:44,680
And you can even tell it that when you pull them in

00:15:44,680 --> 00:15:45,804
that you want to save them.

00:15:45,804 --> 00:15:49,620
We have here this tsd.json file so that when I open this up

00:15:49,620 --> 00:15:53,077
on a new machine, I could just say TSD reinstall,

00:15:53,077 --> 00:15:54,660
and it pulls them all right back down.

00:15:54,660 --> 00:15:55,420
DAN WAHLIN: That's awesome.

00:15:55,420 --> 00:15:55,540
ANDREW CONNELL: Yeah.

00:15:55,540 --> 00:15:57,039
DAN WAHLIN: If you're in a tool that

00:15:57,039 --> 00:16:00,280
has Code Help, as you hit dot, you'll get lots of code help.

00:16:00,280 --> 00:16:01,480
So it's pretty awesome.

00:16:01,480 --> 00:16:02,580
ANDREW CONNELL: Cool.

00:16:02,580 --> 00:16:03,496
DAN WAHLIN: All right.

00:16:03,496 --> 00:16:06,430
Well, to up, what we want to show is just a little demo.

00:16:06,430 --> 00:16:09,700
And then we have a big one that actually hits cloud services

00:16:09,700 --> 00:16:12,295
and does Azure logins, and all kinds of cool stuff.

00:16:12,295 --> 00:16:14,420
ANDREW CONNELL: It punches the OneDrive files, API,

00:16:14,420 --> 00:16:15,160
and all that stuff.

00:16:15,160 --> 00:16:15,440
[INTERPOSING VOICES]

00:16:15,440 --> 00:16:15,870
DAN WAHLIN: OneDrive.

00:16:15,870 --> 00:16:16,250
It's actually pretty cool.

00:16:16,250 --> 00:16:17,640
It's in the GitHub.

00:16:17,640 --> 00:16:20,620
We'll see timewise how we're going here.

00:16:20,620 --> 00:16:22,520
We wanted to show a really simple demo.

00:16:22,520 --> 00:16:24,220
So last year, I did a little AngularJS

00:16:24,220 --> 00:16:25,710
in 20-ish minutes talk.

00:16:25,710 --> 00:16:27,460
And what we did is, up on the GitHub site,

00:16:27,460 --> 00:16:30,140
I have that version of it in pure JavaScript.

00:16:30,140 --> 00:16:33,260
But then I converted it-- Andrew and I converted it,

00:16:33,260 --> 00:16:36,710
sorry, I'm very selfish-- to TypeScript.

00:16:36,710 --> 00:16:38,870
And then we also have this very large project,

00:16:38,870 --> 00:16:42,010
which he was just showing, that is full TypeScript.

00:16:42,010 --> 00:16:44,960
So let me show you just a quick example, here.

00:16:44,960 --> 00:16:49,520
This would be an example you can see of a controller in kind

00:16:49,520 --> 00:16:50,300
of a regular way.

00:16:50,300 --> 00:16:52,730
You might vary on your pattern, here.

00:16:52,730 --> 00:16:56,080
But I have a little init, and it calls out to a factory

00:16:56,080 --> 00:16:57,260
and does its thing.

00:16:57,260 --> 00:16:58,890
And pretty standard AngularJS--

00:16:58,890 --> 00:16:59,130
ANDREW CONNELL: Yeah.

00:16:59,130 --> 00:16:59,963
We've all seen this.

00:16:59,963 --> 00:17:02,500
DAN WAHLIN: --minus different style preferences, of course.

00:17:02,500 --> 00:17:04,030
ANDREW CONNELL: Four spaces-- geez, man.

00:17:04,030 --> 00:17:04,738
DAN WAHLIN: Yeah.

00:17:04,738 --> 00:17:09,609
[LAUGH] This is the TypeScript equivalent.

00:17:09,609 --> 00:17:12,720
So you can see that my controller is just now a class.

00:17:12,720 --> 00:17:16,010
My init becomes the constructor.

00:17:16,010 --> 00:17:17,505
I still can inject.

00:17:17,505 --> 00:17:20,270
Or, if you want to automate that with grunt or gulp or whatever,

00:17:20,270 --> 00:17:22,690
you can inject in all your dependencies there,

00:17:22,690 --> 00:17:25,457
if you'd like, for minification.

00:17:25,457 --> 00:17:27,290
And then I'm still calling in to the factory

00:17:27,290 --> 00:17:29,260
and doing all that fun stuff.

00:17:29,260 --> 00:17:31,380
And as Andrew was mentioning, you

00:17:31,380 --> 00:17:33,430
can actually go and set a breakpoint.

00:17:33,430 --> 00:17:35,226
If you do it in the JavaScript file,

00:17:35,226 --> 00:17:36,600
your TypeScript file will show up

00:17:36,600 --> 00:17:38,680
in your breakpoint definition list because

00:17:38,680 --> 00:17:40,470
of the map, the source map.

00:17:40,470 --> 00:17:42,280
If you do it in the TypeScript file,

00:17:42,280 --> 00:17:43,632
it'll just hit your breakpoint.

00:17:43,632 --> 00:17:44,590
So it's pretty awesome.

00:17:44,590 --> 00:17:45,000
ANDREW CONNELL: Yeah.

00:17:45,000 --> 00:17:46,930
If you try and actually hit the breakpoint in the JavaScript,

00:17:46,930 --> 00:17:48,721
it jumps over and puts it in the equivalent

00:17:48,721 --> 00:17:49,700
spot in the TypeScript.

00:17:49,700 --> 00:17:51,290
That's pretty cool.

00:17:51,290 --> 00:17:53,357
DAN WAHLIN: So let's wrap up finally, finally.

00:17:53,357 --> 00:17:55,190
You want to just briefly talk about service?

00:17:55,190 --> 00:17:55,540
ANDREW CONNELL: Yeah.

00:17:55,540 --> 00:17:56,956
Let me show you the service, here.

00:17:56,956 --> 00:18:00,884
So this one here, this is our TypeScript service.

00:18:00,884 --> 00:18:03,050
Actually, let me show yoi-- one of the things that's

00:18:03,050 --> 00:18:05,350
neat about this one is two things

00:18:05,350 --> 00:18:06,960
that we haven't really mentioned here.

00:18:06,960 --> 00:18:08,310
First, in the constructor, you see

00:18:08,310 --> 00:18:09,684
where we've got this keyword here

00:18:09,684 --> 00:18:12,560
of private on the $http service that's coming in.

00:18:12,560 --> 00:18:14,320
And what that's essentially going to do--

00:18:14,320 --> 00:18:16,400
think of it as like a shorthand for creating

00:18:16,400 --> 00:18:19,070
an internal variable or an internal property

00:18:19,070 --> 00:18:22,010
for this class, and marking it as private.

00:18:22,010 --> 00:18:24,220
So then I'll be able to say, like on line 12, there,

00:18:24,220 --> 00:18:28,139
where it says this .$http-- I can reference all those things

00:18:28,139 --> 00:18:29,180
that are being passed in.

00:18:29,180 --> 00:18:30,270
I don't have to have separate variables

00:18:30,270 --> 00:18:31,186
I've created for them.

00:18:31,186 --> 00:18:33,144
They're all just partly defined there.

00:18:33,144 --> 00:18:34,810
But the other thing too that you can see

00:18:34,810 --> 00:18:37,520
is I'm actually using the DefinitelyTyped type

00:18:37,520 --> 00:18:40,720
definition for Angular that I've pulled in.

00:18:40,720 --> 00:18:42,900
And I'm actually saying that $http

00:18:42,900 --> 00:18:46,310
is of type ng.iHTTP service.

00:18:46,310 --> 00:18:49,390
So that now when I type in $http.,

00:18:49,390 --> 00:18:52,657
I get some IntelliSense or some auto complete help

00:18:52,657 --> 00:18:54,990
that's going to show me all of the different things that

00:18:54,990 --> 00:18:55,979
are available to me.

00:18:55,979 --> 00:18:57,770
This is really cool, especially when you're

00:18:57,770 --> 00:18:59,160
working with promises and such.

00:18:59,160 --> 00:19:02,980
If I jump over to our, real briefly, to one of our lives

00:19:02,980 --> 00:19:07,380
services that we have-- where is that?

00:19:07,380 --> 00:19:08,530
That is right here.

00:19:08,530 --> 00:19:10,740
So this is inside of one of the promises

00:19:10,740 --> 00:19:14,440
that we returned back in making a call against one of our APIs.

00:19:14,440 --> 00:19:18,379
You can see where we're making our call-- the $http get.

00:19:18,379 --> 00:19:20,420
And then right here, when I get the results back,

00:19:20,420 --> 00:19:23,130
we've actually written out our own interface

00:19:23,130 --> 00:19:24,804
to define what the data looks like when

00:19:24,804 --> 00:19:26,220
it comes back so that I'm actually

00:19:26,220 --> 00:19:29,630
getting strong type and not just some random JSON response.

00:19:29,630 --> 00:19:32,600
That's hugely helpful in terms of productivity

00:19:32,600 --> 00:19:34,100
when you're working with this stuff.

00:19:34,100 --> 00:19:36,460
DAN WAHLIN: Especially on large, large, large apps, so.

00:19:36,460 --> 00:19:36,970
ANDREW CONNELL: Yeah.

00:19:36,970 --> 00:19:37,310
DAN WAHLIN: All right.

00:19:37,310 --> 00:19:38,990
So if you're interested in the code--

00:19:38,990 --> 00:19:41,892
because we're going to wrap up here.

00:19:41,892 --> 00:19:43,535
Let me give you this link.

00:19:43,535 --> 00:19:44,160
Well, I had it.

00:19:44,160 --> 00:19:44,840
Right there.

00:19:44,840 --> 00:19:46,966
One more time, here.

00:19:46,966 --> 00:19:48,340
And so this will be up on GitHub.

00:19:48,340 --> 00:19:49,960
We have the, again, the little versions,

00:19:49,960 --> 00:19:51,668
and then we have this really big version,

00:19:51,668 --> 00:19:53,240
if you're interested in jumping in.

00:19:53,240 --> 00:19:55,295
And we didn't do the full-on approach, right?

00:19:55,295 --> 00:19:55,990
ANDREW CONNELL: No, no, no.

00:19:55,990 --> 00:19:57,440
DAN WAHLIN: We did kind of a have your cake, eat it too.

00:19:57,440 --> 00:20:00,067
Not everything has its own little type and all that.

00:20:00,067 --> 00:20:01,900
You can do as much or as little as you want.

00:20:01,900 --> 00:20:03,440
And that's what we both really like.

00:20:03,440 --> 00:20:03,600
ANDREW CONNELL: Yep.

00:20:03,600 --> 00:20:04,380
Yep.

00:20:04,380 --> 00:20:06,213
It was a lot of fun-- a lot of fun doing it.

00:20:06,213 --> 00:20:08,310
And actually, it feels a lot more productive, too.

00:20:08,310 --> 00:20:09,030
DAN WAHLIN: It actually does.

00:20:09,030 --> 00:20:10,920
Because we worked on this one together,

00:20:10,920 --> 00:20:12,157
so it was pretty cool.

00:20:12,157 --> 00:20:12,740
So, all right.

00:20:12,740 --> 00:20:13,865
Well, thanks for your time.

00:20:13,865 --> 00:20:15,520
And definitely check out TypeScript.

00:20:15,520 --> 00:20:16,110
I think it's very cool.

00:20:16,110 --> 00:20:16,985
ANDREW CONNELL: Yeah.

00:20:16,985 --> 00:20:17,910
Thank you.

00:20:17,910 --> 00:20:18,810
Let's go home.

00:20:18,810 --> 00:20:20,360
DAN WAHLIN: All right, man.


YouTube URL: https://www.youtube.com/watch?v=U7NYTKgkZgo


