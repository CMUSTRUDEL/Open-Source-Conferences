Title: Deep Dive Into CLI Builders | Mike Hartington | ng-conf: Hardwired
Publication date: 2020-07-18
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

One of Angular’s best features, is also one of its most secretive. How does your project go from a bunch of files, to an amazing app that you can deploy? The secrete? Builders. We’ll not only look at how this happens, but take a look at the API involved so you write your own builder and integrate other tools that fit your needs.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,600 --> 00:00:21,920
uh yeah so

00:00:18,560 --> 00:00:25,359
we are going to talk about cli builders

00:00:21,920 --> 00:00:25,920
um so far uh what i've come to find is

00:00:25,359 --> 00:00:27,599
that

00:00:25,920 --> 00:00:29,359
there's like three or four people that

00:00:27,599 --> 00:00:32,000
know builders

00:00:29,359 --> 00:00:34,320
pretty pretty much in detail and they

00:00:32,000 --> 00:00:37,760
happen to be on the angular team

00:00:34,320 --> 00:00:39,680
uh so i hope that at the end of all this

00:00:37,760 --> 00:00:42,239
you at least understand what builders

00:00:39,680 --> 00:00:44,640
are and maybe you can start to think

00:00:42,239 --> 00:00:45,600
about places where a builder could make

00:00:44,640 --> 00:00:48,559
sense

00:00:45,600 --> 00:00:49,440
in your project or in your company as a

00:00:48,559 --> 00:00:52,719
way to

00:00:49,440 --> 00:00:54,640
integrate with uh just different systems

00:00:52,719 --> 00:00:56,840
and different build scripts that

00:00:54,640 --> 00:00:59,120
aren't necessarily part of an angular

00:00:56,840 --> 00:01:00,320
process uh so like frosty said my name

00:00:59,120 --> 00:01:02,239
is mike hardington

00:01:00,320 --> 00:01:04,720
i work for a company called ionic i'm an

00:01:02,239 --> 00:01:06,080
angular gde if you have any questions

00:01:04,720 --> 00:01:09,119
for me

00:01:06,080 --> 00:01:09,920
at any time during this tweet me love to

00:01:09,119 --> 00:01:12,400
know what uh

00:01:09,920 --> 00:01:13,040
people are thinking uh and hardington on

00:01:12,400 --> 00:01:15,439
twitter

00:01:13,040 --> 00:01:17,920
and if you want to copy this link real

00:01:15,439 --> 00:01:19,520
quick uh the slides are live right now

00:01:17,920 --> 00:01:21,759
so you should be able to get

00:01:19,520 --> 00:01:24,840
um everything that we're going to go

00:01:21,759 --> 00:01:28,479
over as well some video assets

00:01:24,840 --> 00:01:30,479
so so let's dive into it first by

00:01:28,479 --> 00:01:32,960
kind of understanding what a builder is

00:01:30,479 --> 00:01:34,320
because if you survey a group of angular

00:01:32,960 --> 00:01:36,320
developers and ask them

00:01:34,320 --> 00:01:37,439
hey do you know what builders are

00:01:36,320 --> 00:01:40,240
chances are they're

00:01:37,439 --> 00:01:40,960
going to say um aren't they those things

00:01:40,240 --> 00:01:44,000
that

00:01:40,960 --> 00:01:45,360
you know i call whenever i run a ng

00:01:44,000 --> 00:01:48,159
command

00:01:45,360 --> 00:01:49,680
and this is kind of true um they're

00:01:48,159 --> 00:01:52,720
similar to that but they are

00:01:49,680 --> 00:01:54,240
so subtly different uh so so if we were

00:01:52,720 --> 00:01:56,880
to isolate the characteristics

00:01:54,240 --> 00:01:58,560
of a builder to describe them they're

00:01:56,880 --> 00:01:59,280
really this kind of mysterious behind

00:01:58,560 --> 00:02:02,320
the scenes

00:01:59,280 --> 00:02:03,680
aspects of the cli you don't interact

00:02:02,320 --> 00:02:05,600
with them directly

00:02:03,680 --> 00:02:07,360
and you shouldn't really have to

00:02:05,600 --> 00:02:09,520
interact with them at all

00:02:07,360 --> 00:02:10,399
your cli itself is what's going to be

00:02:09,520 --> 00:02:12,720
the one that is

00:02:10,399 --> 00:02:13,920
calling a builder and handling all of

00:02:12,720 --> 00:02:16,239
that

00:02:13,920 --> 00:02:17,599
and they operate on this very simple

00:02:16,239 --> 00:02:19,760
principle that we'll see

00:02:17,599 --> 00:02:21,599
as we go forward now we're already

00:02:19,760 --> 00:02:23,840
familiar with a handful of

00:02:21,599 --> 00:02:24,640
builders when we start a new angular

00:02:23,840 --> 00:02:27,120
project

00:02:24,640 --> 00:02:27,920
so whenever we go ahead and we run ng

00:02:27,120 --> 00:02:30,000
build

00:02:27,920 --> 00:02:31,040
well what we're really running is the

00:02:30,000 --> 00:02:34,080
browser builder

00:02:31,040 --> 00:02:36,319
from angulardev kit when we go ahead and

00:02:34,080 --> 00:02:39,280
we run ng server

00:02:36,319 --> 00:02:39,599
as the name uh hintsat we are running a

00:02:39,280 --> 00:02:42,000
dev

00:02:39,599 --> 00:02:43,840
server builder from dev kit so we are

00:02:42,000 --> 00:02:45,040
just running this builder by running our

00:02:43,840 --> 00:02:48,239
cli command

00:02:45,040 --> 00:02:50,800
and the last one is whenever we run ng

00:02:48,239 --> 00:02:52,800
test we are running by default karma

00:02:50,800 --> 00:02:54,560
test uh test runner or we could swap

00:02:52,800 --> 00:02:57,599
that out for something like jest

00:02:54,560 --> 00:02:59,519
so the high level ng commands

00:02:57,599 --> 00:03:02,000
don't actually know any of the

00:02:59,519 --> 00:03:05,760
implementation details they just know

00:03:02,000 --> 00:03:08,720
run this thing which will run a builder

00:03:05,760 --> 00:03:10,319
now with all of these different kind of

00:03:08,720 --> 00:03:12,319
builders that we are

00:03:10,319 --> 00:03:14,159
interacting with they operate on this

00:03:12,319 --> 00:03:16,879
very simple principle

00:03:14,159 --> 00:03:18,879
given a set of options run this function

00:03:16,879 --> 00:03:20,800
and then just return the results

00:03:18,879 --> 00:03:22,720
there is nothing about a builder that

00:03:20,800 --> 00:03:24,799
says build my app

00:03:22,720 --> 00:03:26,000
the name's kind of a you know an

00:03:24,799 --> 00:03:29,040
unfortunate naming

00:03:26,000 --> 00:03:31,519
incident but builder just knows

00:03:29,040 --> 00:03:33,200
here are the options here's the context

00:03:31,519 --> 00:03:35,760
of which i am running in

00:03:33,200 --> 00:03:37,120
i'm going to do something uh with these

00:03:35,760 --> 00:03:40,720
options and then return

00:03:37,120 --> 00:03:42,400
something whatever that is i don't know

00:03:40,720 --> 00:03:44,879
so let's break this down real quick so

00:03:42,400 --> 00:03:48,000
that way we can see how all this

00:03:44,879 --> 00:03:50,159
comes together so if we have a vanilla

00:03:48,000 --> 00:03:52,480
angular project we are just opening up

00:03:50,159 --> 00:03:54,959
our angular.json file

00:03:52,480 --> 00:03:56,000
we're going to come up and look at this

00:03:54,959 --> 00:03:58,080
build

00:03:56,000 --> 00:03:59,439
object this is what we consider our

00:03:58,080 --> 00:04:01,360
architect

00:03:59,439 --> 00:04:02,959
they're not an architect if you think

00:04:01,360 --> 00:04:05,760
about the real life equivalent

00:04:02,959 --> 00:04:07,760
they aren't uh very they're not into the

00:04:05,760 --> 00:04:10,640
details of how something gets built

00:04:07,760 --> 00:04:12,239
they just describe the higher level uh

00:04:10,640 --> 00:04:15,280
ideas and design

00:04:12,239 --> 00:04:15,840
of what uh is going to get built so when

00:04:15,280 --> 00:04:19,040
we run

00:04:15,840 --> 00:04:22,240
build ng build or ng run app

00:04:19,040 --> 00:04:23,440
colon build this is the architect that

00:04:22,240 --> 00:04:25,440
we are calling

00:04:23,440 --> 00:04:26,960
so we will call our architect and then

00:04:25,440 --> 00:04:27,520
our architect is going to go through and

00:04:26,960 --> 00:04:30,639
say

00:04:27,520 --> 00:04:31,680
hey when i get called execute this

00:04:30,639 --> 00:04:33,759
builder

00:04:31,680 --> 00:04:34,800
now this builder is just going to go off

00:04:33,759 --> 00:04:37,040
and we're pointing to

00:04:34,800 --> 00:04:38,160
the angular dev kit package and it's

00:04:37,040 --> 00:04:41,040
going to run the

00:04:38,160 --> 00:04:42,240
build angular browser builder so pretty

00:04:41,040 --> 00:04:44,320
simple look up there

00:04:42,240 --> 00:04:45,919
uh we are going to get our options from

00:04:44,320 --> 00:04:46,240
the command lines and ones that we have

00:04:45,919 --> 00:04:49,520
hard

00:04:46,240 --> 00:04:51,440
coded in the file and then we're also

00:04:49,520 --> 00:04:53,520
going to provide some overrides

00:04:51,440 --> 00:04:54,800
or maybe if we're in ci or if we're

00:04:53,520 --> 00:04:58,479
doing a production build

00:04:54,800 --> 00:05:00,400
we can start to modify certain options

00:04:58,479 --> 00:05:02,000
so if this is how a builder operates

00:05:00,400 --> 00:05:04,160
then pretty much

00:05:02,000 --> 00:05:05,600
every single use case let's go ahead and

00:05:04,160 --> 00:05:08,880
just make a builder to see

00:05:05,600 --> 00:05:11,280
how how everything works

00:05:08,880 --> 00:05:12,479
but i think it's first important to uh

00:05:11,280 --> 00:05:15,759
answer the question

00:05:12,479 --> 00:05:16,320
why so if you want to learn to build a

00:05:15,759 --> 00:05:18,720
builder

00:05:16,320 --> 00:05:19,520
um having a good use case and why you

00:05:18,720 --> 00:05:22,160
would want to

00:05:19,520 --> 00:05:23,440
uh add one is going to really help you

00:05:22,160 --> 00:05:27,120
figure out

00:05:23,440 --> 00:05:29,440
what you need to do next if you have

00:05:27,120 --> 00:05:30,479
different tools like image optimization

00:05:29,440 --> 00:05:33,199
tasks that are

00:05:30,479 --> 00:05:35,280
based on npm scripts a builder can be a

00:05:33,199 --> 00:05:38,000
great way to integrate those tools

00:05:35,280 --> 00:05:38,639
into your angular cli project and have

00:05:38,000 --> 00:05:40,720
them feel

00:05:38,639 --> 00:05:42,400
like a much more natural part of your

00:05:40,720 --> 00:05:44,720
project

00:05:42,400 --> 00:05:46,320
plus it's pretty cool to be able to know

00:05:44,720 --> 00:05:47,120
how to do something and then go to your

00:05:46,320 --> 00:05:49,039
team and say

00:05:47,120 --> 00:05:50,880
hey look what i figured out how to do

00:05:49,039 --> 00:05:52,320
you don't know how to do that i do

00:05:50,880 --> 00:05:54,400
job security that's what we're all

00:05:52,320 --> 00:05:57,120
looking for

00:05:54,400 --> 00:05:58,000
so our process so far for creating a

00:05:57,120 --> 00:06:01,120
builder is

00:05:58,000 --> 00:06:02,240
just to make a directory and do npm init

00:06:01,120 --> 00:06:05,360
or yarn in it

00:06:02,240 --> 00:06:07,360
and create a package.json

00:06:05,360 --> 00:06:09,039
now instead of our package.json we're

00:06:07,360 --> 00:06:10,880
going to obviously give it a name

00:06:09,039 --> 00:06:12,400
uh version number and then we're going

00:06:10,880 --> 00:06:14,400
to add this key called

00:06:12,400 --> 00:06:16,240
builders now this is going to reference

00:06:14,400 --> 00:06:17,600
another json file

00:06:16,240 --> 00:06:19,520
uh and we're we're going to call this

00:06:17,600 --> 00:06:22,720
one builders.json

00:06:19,520 --> 00:06:25,360
now inside of our builders.json file

00:06:22,720 --> 00:06:27,280
we are going to create a list of

00:06:25,360 --> 00:06:30,319
different builders

00:06:27,280 --> 00:06:33,360
so here we have builders as a key

00:06:30,319 --> 00:06:34,639
and inside of that it has a list of

00:06:33,360 --> 00:06:37,440
other builders that we can

00:06:34,639 --> 00:06:39,199
work with so for instance this is our

00:06:37,440 --> 00:06:42,000
command builder

00:06:39,199 --> 00:06:43,120
here is the implementation for it so

00:06:42,000 --> 00:06:46,880
this is what gets

00:06:43,120 --> 00:06:49,360
executed when we call the builder

00:06:46,880 --> 00:06:50,560
this is a list of different options that

00:06:49,360 --> 00:06:54,080
we can pass

00:06:50,560 --> 00:06:55,520
to uh to our builder and then the cli

00:06:54,080 --> 00:06:57,840
can use the schema to

00:06:55,520 --> 00:06:59,120
validate saying hey this is not a valid

00:06:57,840 --> 00:07:03,199
option that you passed

00:06:59,120 --> 00:07:04,240
uh fix that and then to close it all out

00:07:03,199 --> 00:07:05,520
we're just going to give it a

00:07:04,240 --> 00:07:06,800
description because we're good

00:07:05,520 --> 00:07:08,319
developers we want to make sure our

00:07:06,800 --> 00:07:11,360
tools

00:07:08,319 --> 00:07:13,199
are basically self-documenting now if we

00:07:11,360 --> 00:07:15,360
kind of piece this all together we have

00:07:13,199 --> 00:07:18,240
the package.json at the top

00:07:15,360 --> 00:07:18,800
the builder.json at the in the middle

00:07:18,240 --> 00:07:21,960
and then

00:07:18,800 --> 00:07:23,919
the key for our builder inside of our

00:07:21,960 --> 00:07:26,800
angular.json

00:07:23,919 --> 00:07:28,639
so if we can see the lookup we have the

00:07:26,800 --> 00:07:31,240
package name

00:07:28,639 --> 00:07:32,720
inside of the package.json and then the

00:07:31,240 --> 00:07:35,039
angular.json

00:07:32,720 --> 00:07:37,680
and then we have the builder name kind

00:07:35,039 --> 00:07:40,639
of doing this nice little lookup

00:07:37,680 --> 00:07:41,280
so when we call at bionic builders we

00:07:40,639 --> 00:07:43,120
are going to

00:07:41,280 --> 00:07:45,199
look at the package version it's going

00:07:43,120 --> 00:07:47,360
to read our builder.json

00:07:45,199 --> 00:07:48,479
and then we're going to call the builder

00:07:47,360 --> 00:07:51,360
that we're passing in

00:07:48,479 --> 00:07:53,120
after that colon so let's take a look at

00:07:51,360 --> 00:07:55,360
the implementation detail and kind of

00:07:53,120 --> 00:07:58,560
understand how this is all working

00:07:55,360 --> 00:08:00,080
so we'll create a file called command

00:07:58,560 --> 00:08:01,759
builder

00:08:00,080 --> 00:08:03,520
and command builder is just going to

00:08:01,759 --> 00:08:06,720
have this default

00:08:03,520 --> 00:08:08,879
export of create builder now the cli

00:08:06,720 --> 00:08:11,440
operates on this standard principle of

00:08:08,879 --> 00:08:12,080
if you see a function that is exported

00:08:11,440 --> 00:08:15,039
called

00:08:12,080 --> 00:08:15,680
create builder run it and then it'll

00:08:15,039 --> 00:08:18,639
handle

00:08:15,680 --> 00:08:20,240
wiring up this whole entire process so

00:08:18,639 --> 00:08:22,000
our default export of create builder

00:08:20,240 --> 00:08:22,879
will just get called by the cli and

00:08:22,000 --> 00:08:25,680
we're going to pass

00:08:22,879 --> 00:08:26,240
in as an argument a function that we are

00:08:25,680 --> 00:08:28,319
going

00:08:26,240 --> 00:08:30,720
to write ourselves now this is the

00:08:28,319 --> 00:08:33,599
actual uh logic for our builder

00:08:30,720 --> 00:08:34,399
called command builder now command

00:08:33,599 --> 00:08:37,360
builder

00:08:34,399 --> 00:08:39,760
gets two arguments here we have an

00:08:37,360 --> 00:08:40,880
argument of options which are just

00:08:39,760 --> 00:08:45,000
options coming in

00:08:40,880 --> 00:08:46,480
from the um from our schema or from the

00:08:45,000 --> 00:08:48,480
angular.json

00:08:46,480 --> 00:08:50,800
and then the context which is the

00:08:48,480 --> 00:08:52,720
current running context that the builder

00:08:50,800 --> 00:08:54,640
is operating in this is all kind of

00:08:52,720 --> 00:08:56,640
inherited from the cli

00:08:54,640 --> 00:08:58,240
so you should be able to get information

00:08:56,640 --> 00:09:01,839
like your workspace

00:08:58,240 --> 00:09:04,640
route different builders that are also

00:09:01,839 --> 00:09:07,279
available to this particular project

00:09:04,640 --> 00:09:08,160
and whatnot now this is going to return

00:09:07,279 --> 00:09:09,279
a promise

00:09:08,160 --> 00:09:11,120
but it's important to note that you

00:09:09,279 --> 00:09:11,920
don't actually need to return a promise

00:09:11,120 --> 00:09:14,480
you could return

00:09:11,920 --> 00:09:15,680
an observable or you could return uh you

00:09:14,480 --> 00:09:17,760
know

00:09:15,680 --> 00:09:19,120
a synchronous method uh it doesn't

00:09:17,760 --> 00:09:22,240
really matter but what

00:09:19,120 --> 00:09:25,920
matters is that we are returning a value

00:09:22,240 --> 00:09:29,040
of build event so let's go forward and

00:09:25,920 --> 00:09:29,360
expand on this we are actually going to

00:09:29,040 --> 00:09:32,480
use

00:09:29,360 --> 00:09:33,120
node's child process and create this new

00:09:32,480 --> 00:09:36,000
process

00:09:33,120 --> 00:09:36,880
uh grabbing a command and then some

00:09:36,000 --> 00:09:39,040
arguments

00:09:36,880 --> 00:09:41,120
from our options so these are going to

00:09:39,040 --> 00:09:42,880
be things that users can set

00:09:41,120 --> 00:09:45,440
and we're just going to spawn a new

00:09:42,880 --> 00:09:46,000
process and from here on out it's fairly

00:09:45,440 --> 00:09:48,560
typical

00:09:46,000 --> 00:09:49,040
node programming like we have process

00:09:48,560 --> 00:09:51,360
that

00:09:49,040 --> 00:09:53,480
standard out every time we get data

00:09:51,360 --> 00:09:55,360
we're going to use

00:09:53,480 --> 00:09:57,440
context.logger.info which is our

00:09:55,360 --> 00:10:00,399
standard which is a standard

00:09:57,440 --> 00:10:01,040
node logging service to log out all that

00:10:00,399 --> 00:10:03,279
data

00:10:01,040 --> 00:10:04,560
and send it to string now the important

00:10:03,279 --> 00:10:06,480
thing here at the end

00:10:04,560 --> 00:10:08,560
is that we are going to resolve our

00:10:06,480 --> 00:10:10,399
promise when the process has

00:10:08,560 --> 00:10:13,040
closed and then we're just going to

00:10:10,399 --> 00:10:13,920
resolve with an object that has a key of

00:10:13,040 --> 00:10:15,040
success

00:10:13,920 --> 00:10:17,360
and it's either going to be true or

00:10:15,040 --> 00:10:20,320
false space on the exit code

00:10:17,360 --> 00:10:23,760
the exit code is zero it's true means

00:10:20,320 --> 00:10:26,079
everything has been successful

00:10:23,760 --> 00:10:27,440
so without imports obviously we're at

00:10:26,079 --> 00:10:30,079
like 20

00:10:27,440 --> 00:10:32,399
20-ish lines of code if we exclude the

00:10:30,079 --> 00:10:32,800
empty line on line number two not too

00:10:32,399 --> 00:10:36,399
bad

00:10:32,800 --> 00:10:36,800
altogether so let's go ahead and look at

00:10:36,399 --> 00:10:40,640
this

00:10:36,800 --> 00:10:43,640
uh in a live example so i have my

00:10:40,640 --> 00:10:44,800
cli over here and i just have this

00:10:43,640 --> 00:10:48,079
angular.json

00:10:44,800 --> 00:10:48,720
package file and i have the command

00:10:48,079 --> 00:10:50,959
builder

00:10:48,720 --> 00:10:53,839
set up right here obviously here's the

00:10:50,959 --> 00:10:56,959
key that we will run the architect

00:10:53,839 --> 00:10:58,160
here is our builder where we're calling

00:10:56,959 --> 00:11:00,079
bionic builders

00:10:58,160 --> 00:11:01,839
and then setting the custom build so our

00:11:00,079 --> 00:11:03,600
lookup that we've learned

00:11:01,839 --> 00:11:04,880
and then here are the different commands

00:11:03,600 --> 00:11:07,680
that we're going to run so

00:11:04,880 --> 00:11:08,720
if we're going to just run ls and then

00:11:07,680 --> 00:11:11,600
pass in the flags

00:11:08,720 --> 00:11:12,160
dash l and a whenever we do a normal

00:11:11,600 --> 00:11:14,959
build

00:11:12,160 --> 00:11:15,760
but on a production build we're going to

00:11:14,959 --> 00:11:18,959
use the

00:11:15,760 --> 00:11:22,000
tool cal say and pass in the argument uh

00:11:18,959 --> 00:11:22,640
builders are cool so let's just run this

00:11:22,000 --> 00:11:25,920
real quick

00:11:22,640 --> 00:11:30,240
so we'll say ng run demo

00:11:25,920 --> 00:11:30,240
app command build

00:11:30,320 --> 00:11:33,519
command build

00:11:33,600 --> 00:11:37,440
cool so our builder has run we're just

00:11:35,839 --> 00:11:40,480
listing out all the files

00:11:37,440 --> 00:11:43,440
inside of this directory now if we were

00:11:40,480 --> 00:11:45,440
to run this again

00:11:43,440 --> 00:11:46,560
and then pass in the production flag

00:11:45,440 --> 00:11:49,519
we're going to get a different

00:11:46,560 --> 00:11:50,639
output based on the tool calci so this

00:11:49,519 --> 00:11:52,560
is how it works

00:11:50,639 --> 00:11:53,920
here's we have different options for

00:11:52,560 --> 00:11:57,839
production and for

00:11:53,920 --> 00:11:57,839
non-production use cases

00:11:59,760 --> 00:12:05,839
and video just in case um

00:12:02,880 --> 00:12:07,440
but that's fairly simple uh there's

00:12:05,839 --> 00:12:08,560
nothing in there that touches any of the

00:12:07,440 --> 00:12:11,279
build processes

00:12:08,560 --> 00:12:13,120
and really there's no uh there's no

00:12:11,279 --> 00:12:16,079
actual

00:12:13,120 --> 00:12:17,440
real-life use case for that what about

00:12:16,079 --> 00:12:18,560
something a little bit more complex that

00:12:17,440 --> 00:12:20,079
involves webpack

00:12:18,560 --> 00:12:22,240
because as soon as you add webpack to

00:12:20,079 --> 00:12:23,600
the mix things get a little bit more

00:12:22,240 --> 00:12:25,839
complex

00:12:23,600 --> 00:12:27,519
well let's dive into this and see what

00:12:25,839 --> 00:12:30,959
we can get

00:12:27,519 --> 00:12:32,000
so starting off on the same kind of base

00:12:30,959 --> 00:12:34,639
that we had before

00:12:32,000 --> 00:12:35,680
we have this create builder function and

00:12:34,639 --> 00:12:38,720
we're going to pass

00:12:35,680 --> 00:12:40,800
in a new argument called extend builder

00:12:38,720 --> 00:12:42,160
now in this case we it looks similar to

00:12:40,800 --> 00:12:44,480
our command builder we have

00:12:42,160 --> 00:12:45,920
option and context getting passed in and

00:12:44,480 --> 00:12:49,760
then we're going to return

00:12:45,920 --> 00:12:51,680
an observable of builder output

00:12:49,760 --> 00:12:53,920
now from here we're going to start to

00:12:51,680 --> 00:12:57,120
call different functional uh functions

00:12:53,920 --> 00:12:58,000
available from devkit and this first one

00:12:57,120 --> 00:13:01,360
is going to be

00:12:58,000 --> 00:13:03,760
target from target string now target

00:13:01,360 --> 00:13:05,200
from target string is going to go ahead

00:13:03,760 --> 00:13:08,880
and

00:13:05,200 --> 00:13:11,920
take a builder name um

00:13:08,880 --> 00:13:12,959
as an as an option or as an argument and

00:13:11,920 --> 00:13:15,760
then return

00:13:12,959 --> 00:13:18,160
the different details about that builder

00:13:15,760 --> 00:13:20,480
so it's going to give us a project

00:13:18,160 --> 00:13:21,600
the target or the actual architect that

00:13:20,480 --> 00:13:24,240
we want to run

00:13:21,600 --> 00:13:24,880
and then the configuration for the so if

00:13:24,240 --> 00:13:28,560
it's

00:13:24,880 --> 00:13:30,880
production ci what have you

00:13:28,560 --> 00:13:31,920
once we have this target uh information

00:13:30,880 --> 00:13:35,519
which we're going to call

00:13:31,920 --> 00:13:35,839
target spec we're going to uh use it to

00:13:35,519 --> 00:13:37,760
get

00:13:35,839 --> 00:13:39,279
some more information from our project

00:13:37,760 --> 00:13:41,959
so we'll use fork join

00:13:39,279 --> 00:13:43,279
and we're going to call

00:13:41,959 --> 00:13:47,199
context.gettargetoptions

00:13:43,279 --> 00:13:49,440
and context.getbuildername for target

00:13:47,199 --> 00:13:51,519
so the first one is going to go through

00:13:49,440 --> 00:13:54,240
and get all the listed options

00:13:51,519 --> 00:13:55,600
in the angular.json um these could be

00:13:54,240 --> 00:13:56,959
things that

00:13:55,600 --> 00:13:59,920
whether or not we want to include

00:13:56,959 --> 00:14:02,959
certain files or certain assets

00:13:59,920 --> 00:14:04,399
to our builder we're just going to get

00:14:02,959 --> 00:14:07,440
all those and return them

00:14:04,399 --> 00:14:10,720
to our our our current builder

00:14:07,440 --> 00:14:11,440
from here context.getbuildername for

00:14:10,720 --> 00:14:13,120
target

00:14:11,440 --> 00:14:14,800
is actually just going to go ahead and

00:14:13,120 --> 00:14:16,639
get us the uh

00:14:14,800 --> 00:14:18,560
the lookup or the builder key

00:14:16,639 --> 00:14:20,880
information here

00:14:18,560 --> 00:14:22,959
so once we have the project the

00:14:20,880 --> 00:14:25,120
architect and then the configuration

00:14:22,959 --> 00:14:26,959
we're just going to go ahead and get the

00:14:25,120 --> 00:14:27,440
builder key so this would be something

00:14:26,959 --> 00:14:30,000
like

00:14:27,440 --> 00:14:30,959
angular dev kit slash build angular

00:14:30,000 --> 00:14:32,880
colon browser

00:14:30,959 --> 00:14:34,399
so it's that same kind of package lookup

00:14:32,880 --> 00:14:36,240
as before

00:14:34,399 --> 00:14:38,079
and once we have both of these uh pieces

00:14:36,240 --> 00:14:38,800
of information we're going to go ahead

00:14:38,079 --> 00:14:41,839
and plug that

00:14:38,800 --> 00:14:43,680
into another call

00:14:41,839 --> 00:14:45,920
another function called from context

00:14:43,680 --> 00:14:49,279
called validate options

00:14:45,920 --> 00:14:49,760
now validate options takes the options

00:14:49,279 --> 00:14:52,880
that we

00:14:49,760 --> 00:14:54,880
have in the workspace file and validates

00:14:52,880 --> 00:14:58,000
them against the schema

00:14:54,880 --> 00:15:00,560
now a really great example of this is in

00:14:58,000 --> 00:15:01,040
a previous builder that i was working on

00:15:00,560 --> 00:15:02,959
i

00:15:01,040 --> 00:15:04,160
didn't call validate options and i was

00:15:02,959 --> 00:15:07,360
trying to figure out

00:15:04,160 --> 00:15:08,160
why a live reload server wasn't live

00:15:07,360 --> 00:15:10,000
reloading

00:15:08,160 --> 00:15:12,560
like any changes i made it wouldn't

00:15:10,000 --> 00:15:15,440
reload well it turns out there's an

00:15:12,560 --> 00:15:16,480
option on the dev server builder to

00:15:15,440 --> 00:15:18,639
disable

00:15:16,480 --> 00:15:20,160
live reload because sometimes you

00:15:18,639 --> 00:15:22,160
wouldn't want a dev server to live

00:15:20,160 --> 00:15:24,800
reload apparently

00:15:22,160 --> 00:15:26,160
um by just adding a call to validate

00:15:24,800 --> 00:15:28,720
options i could validate

00:15:26,160 --> 00:15:30,720
the options from the workspace file

00:15:28,720 --> 00:15:32,959
against the internal options

00:15:30,720 --> 00:15:34,480
from the builder itself and get the

00:15:32,959 --> 00:15:36,160
complete picture of what are the

00:15:34,480 --> 00:15:37,040
defaults that i should be sending to

00:15:36,160 --> 00:15:40,320
this task

00:15:37,040 --> 00:15:41,360
and what are the ones from my uh that my

00:15:40,320 --> 00:15:43,920
user has set

00:15:41,360 --> 00:15:45,120
inside of their workspace file so that's

00:15:43,920 --> 00:15:47,199
all well and good

00:15:45,120 --> 00:15:48,240
uh we'll call that it's a promise so

00:15:47,199 --> 00:15:52,160
we'll use from

00:15:48,240 --> 00:15:54,560
to unwrap it and make it in observable

00:15:52,160 --> 00:15:55,839
and then once we have that information

00:15:54,560 --> 00:15:58,399
we'll get the finalized

00:15:55,839 --> 00:16:00,079
uh version of our options and then we're

00:15:58,399 --> 00:16:02,880
going to call a function called

00:16:00,079 --> 00:16:03,920
extend build or extend builder and this

00:16:02,880 --> 00:16:04,959
is something that we'll write in a

00:16:03,920 --> 00:16:07,040
moment

00:16:04,959 --> 00:16:08,000
but what extent builder is going to do

00:16:07,040 --> 00:16:11,040
is going to take

00:16:08,000 --> 00:16:13,680
the default browser builder and then

00:16:11,040 --> 00:16:15,839
we're going to use some currying to take

00:16:13,680 --> 00:16:17,920
that result or that builder and then

00:16:15,839 --> 00:16:19,519
pass in our finalize options and our

00:16:17,920 --> 00:16:22,399
contacts

00:16:19,519 --> 00:16:23,120
and modify what the default browser

00:16:22,399 --> 00:16:25,600
builder is

00:16:23,120 --> 00:16:26,959
doing so this is a little this is a

00:16:25,600 --> 00:16:28,240
little advanced and there are different

00:16:26,959 --> 00:16:30,720
ways to do this

00:16:28,240 --> 00:16:31,519
this is just one that i tend to prefer

00:16:30,720 --> 00:16:34,800
so what

00:16:31,519 --> 00:16:36,000
does extend builder look like well

00:16:34,800 --> 00:16:40,160
extend builder like

00:16:36,000 --> 00:16:41,680
i said takes a builder as an argument

00:16:40,160 --> 00:16:44,399
and then it's going to return our

00:16:41,680 --> 00:16:46,639
options and the context and modify

00:16:44,399 --> 00:16:48,240
the options and context from that

00:16:46,639 --> 00:16:50,880
original builder

00:16:48,240 --> 00:16:51,519
so here we're calling our builder which

00:16:50,880 --> 00:16:54,240
in this case

00:16:51,519 --> 00:16:55,920
is the default browser build option uh

00:16:54,240 --> 00:16:57,279
browser builds from dev kit

00:16:55,920 --> 00:17:00,959
and we're going to pass in our

00:16:57,279 --> 00:17:04,559
normalized options the original context

00:17:00,959 --> 00:17:07,120
and then we're going to uh modify the

00:17:04,559 --> 00:17:08,720
third argument inside of the execute

00:17:07,120 --> 00:17:10,959
browser builder

00:17:08,720 --> 00:17:13,520
or our transforms now this is going to

00:17:10,959 --> 00:17:16,720
be our webpack configuration

00:17:13,520 --> 00:17:19,120
and once we have access to this we could

00:17:16,720 --> 00:17:19,919
just return the webpack config and be

00:17:19,120 --> 00:17:22,000
happy

00:17:19,919 --> 00:17:23,120
but we want to modify it and add a new

00:17:22,000 --> 00:17:25,039
plugin

00:17:23,120 --> 00:17:26,880
there's plenty of plugins out there from

00:17:25,039 --> 00:17:29,919
webpack's ecosystem

00:17:26,880 --> 00:17:32,880
the one i am a big fan of is the nian

00:17:29,919 --> 00:17:34,559
progress plugin which will replace the

00:17:32,880 --> 00:17:38,799
standard out with a nice little

00:17:34,559 --> 00:17:41,360
nyan cat so with that all together

00:17:38,799 --> 00:17:42,080
uh minus imports we're at like 41 lines

00:17:41,360 --> 00:17:44,720
of code

00:17:42,080 --> 00:17:46,160
and we're extending the existing builder

00:17:44,720 --> 00:17:48,480
in a pretty non-destructive

00:17:46,160 --> 00:17:49,679
way so let's take a look at what that

00:17:48,480 --> 00:17:54,320
actually

00:17:49,679 --> 00:17:57,280
does so the setup here

00:17:54,320 --> 00:17:58,799
if we look at the angular.json again we

00:17:57,280 --> 00:18:01,360
don't need the command builder

00:17:58,799 --> 00:18:03,280
here is our extend builder we are

00:18:01,360 --> 00:18:03,679
passing in the builder that we want to

00:18:03,280 --> 00:18:07,120
call

00:18:03,679 --> 00:18:09,280
so bionic builders extend build and then

00:18:07,120 --> 00:18:10,720
the browser target here is just going to

00:18:09,280 --> 00:18:12,840
be our project name

00:18:10,720 --> 00:18:14,799
and then the actual test that we want to

00:18:12,840 --> 00:18:16,799
execute

00:18:14,799 --> 00:18:18,640
so let's go ahead and just run this real

00:18:16,799 --> 00:18:21,679
quick so we'll do ng run

00:18:18,640 --> 00:18:25,760
demo app extend

00:18:21,679 --> 00:18:27,440
build and if everything goes well

00:18:25,760 --> 00:18:29,280
we'll have a nice little nyan cat going

00:18:27,440 --> 00:18:30,799
across the screen and the builder output

00:18:29,280 --> 00:18:32,400
would still work

00:18:30,799 --> 00:18:34,480
so that's a little bit better than the

00:18:32,400 --> 00:18:36,080
default experience and we get some

00:18:34,480 --> 00:18:39,120
webpack goodness in there

00:18:36,080 --> 00:18:41,520
that's pretty awesome so

00:18:39,120 --> 00:18:42,160
again let's kind of wrap up real quick

00:18:41,520 --> 00:18:44,720
because we're

00:18:42,160 --> 00:18:46,960
near the end of our time uh what have we

00:18:44,720 --> 00:18:46,960
learned

00:18:47,039 --> 00:18:50,160
uh in most part i hope which you take

00:18:49,039 --> 00:18:51,360
away from this is that builders

00:18:50,160 --> 00:18:54,160
themselves

00:18:51,360 --> 00:18:56,160
aren't actually overly complicated again

00:18:54,160 --> 00:18:58,720
that simple principle of

00:18:56,160 --> 00:19:00,000
here are some options do something with

00:18:58,720 --> 00:19:03,280
them if not

00:19:00,000 --> 00:19:05,200
um and then return some results that's

00:19:03,280 --> 00:19:08,160
really all you need to know that

00:19:05,200 --> 00:19:09,440
about builders and what they actually do

00:19:08,160 --> 00:19:11,360
the hard part

00:19:09,440 --> 00:19:12,880
about creating builders is figuring out

00:19:11,360 --> 00:19:16,160
what apis you need

00:19:12,880 --> 00:19:18,720
and how to create the flow so

00:19:16,160 --> 00:19:20,080
once you get an idea of certain apis you

00:19:18,720 --> 00:19:21,919
need

00:19:20,080 --> 00:19:25,280
you can piece together everything in a

00:19:21,919 --> 00:19:27,520
kind of trial by error

00:19:25,280 --> 00:19:29,760
process you know most of them are going

00:19:27,520 --> 00:19:31,200
to come from the angular dev kit package

00:19:29,760 --> 00:19:32,960
and you're going to be reading a lot of

00:19:31,200 --> 00:19:35,840
type information from that

00:19:32,960 --> 00:19:36,720
so i highly suggest you know look at the

00:19:35,840 --> 00:19:40,000
actual

00:19:36,720 --> 00:19:40,640
build angular browser or the browser

00:19:40,000 --> 00:19:43,919
builder

00:19:40,640 --> 00:19:46,720
from uh angular dev kit build angular

00:19:43,919 --> 00:19:49,120
it's roughly 820 lines of code and that

00:19:46,720 --> 00:19:50,799
includes imports utilities

00:19:49,120 --> 00:19:52,880
and the most important thing about this

00:19:50,799 --> 00:19:55,520
is that there are types to follow

00:19:52,880 --> 00:19:56,880
so if you get lost or aren't sure what

00:19:55,520 --> 00:20:00,480
to do

00:19:56,880 --> 00:20:02,320
the types will guide you there's also a

00:20:00,480 --> 00:20:03,919
lot of great examples out there in the

00:20:02,320 --> 00:20:06,559
ecosystem

00:20:03,919 --> 00:20:07,919
minko if you go to his github has a

00:20:06,559 --> 00:20:10,159
whole

00:20:07,919 --> 00:20:12,240
example repo basically rebuilding the

00:20:10,159 --> 00:20:14,720
command builder

00:20:12,240 --> 00:20:16,480
there is a collection of builders from

00:20:14,720 --> 00:20:17,360
this community called at angular

00:20:16,480 --> 00:20:20,240
builders

00:20:17,360 --> 00:20:21,440
custom webpack which allows you to pass

00:20:20,240 --> 00:20:24,000
in a

00:20:21,440 --> 00:20:26,559
additional webpack and have it merged

00:20:24,000 --> 00:20:29,120
into the internal webpack config

00:20:26,559 --> 00:20:31,760
manfred obviously has his ngx build plus

00:20:29,120 --> 00:20:34,720
and then angular shules has their cli

00:20:31,760 --> 00:20:35,840
uh deploy target builder for deploying

00:20:34,720 --> 00:20:37,600
to github pages

00:20:35,840 --> 00:20:39,200
all different ways that you can do this

00:20:37,600 --> 00:20:41,840
and i'd be remiss if saying

00:20:39,200 --> 00:20:43,440
look at the one that i wrote for ionic

00:20:41,840 --> 00:20:45,120
at ionic angular toolkit

00:20:43,440 --> 00:20:47,600
it has the same kind of concepts and

00:20:45,120 --> 00:20:51,360
actually uses that extend builder

00:20:47,600 --> 00:20:53,440
example so evaluate if

00:20:51,360 --> 00:20:54,720
builders are going to be something you

00:20:53,440 --> 00:20:56,640
need to know

00:20:54,720 --> 00:20:57,919
honestly most people do not need to know

00:20:56,640 --> 00:21:00,400
this information

00:20:57,919 --> 00:21:02,000
uh if only just to understand how tools

00:21:00,400 --> 00:21:04,000
work most people aren't going to

00:21:02,000 --> 00:21:06,240
be writing their own builders but if

00:21:04,000 --> 00:21:09,120
you're in that use case where you need

00:21:06,240 --> 00:21:10,080
to include different tasks that are

00:21:09,120 --> 00:21:11,840
outside of angular

00:21:10,080 --> 00:21:13,760
a builder can be a great way to do it

00:21:11,840 --> 00:21:14,159
and there's going to be millions of ways

00:21:13,760 --> 00:21:15,760
to

00:21:14,159 --> 00:21:17,840
write the same builder so don't get

00:21:15,760 --> 00:21:18,720
discouraged if what you saw here doesn't

00:21:17,840 --> 00:21:20,080
end up

00:21:18,720 --> 00:21:22,000
being the same as what you've written

00:21:20,080 --> 00:21:30,580
before

00:21:22,000 --> 00:21:30,660
thank you

00:21:30,580 --> 00:21:32,700
[Music]

00:21:30,660 --> 00:21:36,080
[Applause]

00:21:32,700 --> 00:21:38,159
[Music]

00:21:36,080 --> 00:21:38,159

YouTube URL: https://www.youtube.com/watch?v=HyvZ26ofTvY


