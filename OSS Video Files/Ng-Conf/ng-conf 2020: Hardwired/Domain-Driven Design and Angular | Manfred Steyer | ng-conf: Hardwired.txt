Title: Domain-Driven Design and Angular | Manfred Steyer | ng-conf: Hardwired
Publication date: 2020-07-21
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

In this interactive session, we explore a case study on how to use proven domain-driven design principles to make the architecture of your Angular project maintainable in the long term. You also learn how to combine these ideas with best practices from the Angular community.

First, we define a strategic and tactical design for our case study, which we then implement with a monorepo that reflects our sub-domains. Then you learn in individual demonstrations how the use of libraries, APIs, facades, domain events, and access rules between libraries can ensure loose coupling and thus better maintainability.

In the end, you have a case study that you can use as a template for your projects.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:15,670
[Applause]

00:00:05,920 --> 00:00:19,039
[Music]

00:00:15,670 --> 00:00:24,140
so first of all let me get rid of this

00:00:19,039 --> 00:00:27,230
here and then let's get started yeah

00:00:24,140 --> 00:00:29,990
thanks for having me in the next hour we

00:00:27,230 --> 00:00:32,510
will talk about stome Trevon design and

00:00:29,990 --> 00:00:35,239
Angola and I want to start with one

00:00:32,510 --> 00:00:38,540
fashion so what do you think what does

00:00:35,239 --> 00:00:41,300
it take for a good architecture if you

00:00:38,540 --> 00:00:44,629
think about your current projects about

00:00:41,300 --> 00:00:47,900
your products what does it take well if

00:00:44,629 --> 00:00:51,260
you ask me it takes a lot of experience

00:00:47,900 --> 00:00:53,930
and ideally from a diverse team everyone

00:00:51,260 --> 00:00:57,350
shall sit together and everyone shall

00:00:53,930 --> 00:01:00,290
bring her own experiences to the team

00:00:57,350 --> 00:01:03,019
and of course there are some ways to

00:01:00,290 --> 00:01:06,290
accelerate this process or process of

00:01:03,019 --> 00:01:08,960
doing an architecture you can give them

00:01:06,290 --> 00:01:11,630
some caffeine or you could feed stand

00:01:08,960 --> 00:01:15,080
with pizza I made a lot of good

00:01:11,630 --> 00:01:17,450
experience with Pizza Oven CRA which is

00:01:15,080 --> 00:01:20,119
the pizza you know with ham and paging

00:01:17,450 --> 00:01:23,030
on it also with corn it leads to the

00:01:20,119 --> 00:01:25,130
best architectures but besides this

00:01:23,030 --> 00:01:28,609
let's take a bit with the topic

00:01:25,130 --> 00:01:31,999
experiences since years people think

00:01:28,609 --> 00:01:34,670
about how to share experiences and so

00:01:31,999 --> 00:01:37,670
some people came up with best practices

00:01:34,670 --> 00:01:39,590
there roads down best practices other

00:01:37,670 --> 00:01:42,920
people took him more formal approach

00:01:39,590 --> 00:01:45,499
they wrote down patterns and other

00:01:42,920 --> 00:01:48,259
people took some best practices took

00:01:45,499 --> 00:01:52,100
some patterns added a methodology and

00:01:48,259 --> 00:01:54,649
what turned out was a methodology a

00:01:52,100 --> 00:01:57,740
better alot she using some philosophy

00:01:54,649 --> 00:02:00,560
and one of those methodologies is two

00:01:57,740 --> 00:02:03,979
main Traven design perhaps domain driven

00:02:00,560 --> 00:02:06,740
design is the only methodology bridging

00:02:03,979 --> 00:02:09,740
the gap between your users requirements

00:02:06,740 --> 00:02:12,410
and your architecture and so in this

00:02:09,740 --> 00:02:15,620
talk I will answer one question namely

00:02:12,410 --> 00:02:18,610
how to create sustainable architectures

00:02:15,620 --> 00:02:22,190
with ideals from domain driven design

00:02:18,610 --> 00:02:25,370
until two words are very important for

00:02:22,190 --> 00:02:26,430
me the first word is sustainable it is

00:02:25,370 --> 00:02:29,489
not about

00:02:26,430 --> 00:02:32,939
quick wins this is not about creating a

00:02:29,489 --> 00:02:35,459
tiny application quickly it is about an

00:02:32,939 --> 00:02:38,730
investment into the future into

00:02:35,459 --> 00:02:41,790
something that can be maintained for ten

00:02:38,730 --> 00:02:45,000
years or long and the second word that

00:02:41,790 --> 00:02:47,790
is important here is ideas the interview

00:02:45,000 --> 00:02:50,430
design is not a religion for me the main

00:02:47,790 --> 00:02:53,280
proven design is for me a box with tools

00:02:50,430 --> 00:02:53,670
and I'm using some of those tools to

00:02:53,280 --> 00:02:55,250
achieve

00:02:53,670 --> 00:02:58,490
Disko

00:02:55,250 --> 00:03:00,740
so let's talk about the contents first

00:02:58,490 --> 00:03:03,650
of all I will give you an overview of

00:03:00,740 --> 00:03:06,170
domain driven design and then I will

00:03:03,650 --> 00:03:09,140
talk about a quite different topic a

00:03:06,170 --> 00:03:11,300
topic that seems to have nothing in

00:03:09,140 --> 00:03:12,140
common with domain driven design at

00:03:11,300 --> 00:03:15,710
first sight

00:03:12,140 --> 00:03:17,960
namely mono rebuilt but at the end of

00:03:15,710 --> 00:03:21,020
the second part we will realize that

00:03:17,960 --> 00:03:24,140
both topics are sides of the same coin

00:03:21,020 --> 00:03:26,960
and so I will bring both sides together

00:03:24,140 --> 00:03:29,930
and show how to use those two topics

00:03:26,960 --> 00:03:33,470
together how to use mono repose together

00:03:29,930 --> 00:03:36,350
50 ideas of domain driven design but

00:03:33,470 --> 00:03:38,870
first of all let me introduce myself a

00:03:36,350 --> 00:03:41,630
bit I am unthread I am a trainer and

00:03:38,870 --> 00:03:44,120
consultant for Angola I'm doing a lot of

00:03:41,630 --> 00:03:46,700
in-house trainings and in the last time

00:03:44,120 --> 00:03:48,680
also remotes trainings my current

00:03:46,700 --> 00:03:51,860
training is an advanced training for

00:03:48,680 --> 00:03:54,380
Angola in the enterprise I am part of

00:03:51,860 --> 00:03:57,500
the Google developer expert team and I

00:03:54,380 --> 00:03:59,870
am a trusted collaborator so perhaps the

00:03:57,500 --> 00:04:02,900
funny story about the word collaborator

00:03:59,870 --> 00:04:05,540
perhaps you know it's V in German have

00:04:02,900 --> 00:04:08,060
the exact same word we also have the

00:04:05,540 --> 00:04:12,050
word collaborator and it means exactly

00:04:08,060 --> 00:04:15,110
the same thing but always in a negative

00:04:12,050 --> 00:04:18,019
way so collaborating in German means

00:04:15,110 --> 00:04:21,859
teaming up with other people to destroy

00:04:18,019 --> 00:04:24,260
something well and if you look at my

00:04:21,859 --> 00:04:26,660
first pull request for the angular team

00:04:24,260 --> 00:04:29,450
it was about the German meaning

00:04:26,660 --> 00:04:31,970
meanwhile it is hopefully more about the

00:04:29,450 --> 00:04:35,470
Englishman saying this and doing a lot

00:04:31,970 --> 00:04:38,780
in the german-speaking area of Europe

00:04:35,470 --> 00:04:42,320
okay so let's get started with the first

00:04:38,780 --> 00:04:44,570
topic with domain-driven design we look

00:04:42,320 --> 00:04:47,000
at the main driven design from an

00:04:44,570 --> 00:04:50,120
high-level perspective we see two

00:04:47,000 --> 00:04:52,940
strategies there is strategic design and

00:04:50,120 --> 00:04:56,300
there is tactical design strategic

00:04:52,940 --> 00:04:59,330
design is about composing a big system

00:04:56,300 --> 00:05:02,780
in Bhutan eeeh more maintainable paths

00:04:59,330 --> 00:05:06,410
and tactical design is more about design

00:05:02,780 --> 00:05:07,569
patterns and practices as I will talk

00:05:06,410 --> 00:05:09,849
about

00:05:07,569 --> 00:05:12,699
protector I will more stick with

00:05:09,849 --> 00:05:16,029
strategic design especially in the first

00:05:12,699 --> 00:05:18,429
part of this session I will just do

00:05:16,029 --> 00:05:21,249
strategic design then I will pick

00:05:18,429 --> 00:05:24,610
several topics from the area of

00:05:21,249 --> 00:05:27,610
technical design and if you ask me what

00:05:24,610 --> 00:05:30,459
a strategic design do I would answer it

00:05:27,610 --> 00:05:33,610
with this very picture I will tell you

00:05:30,459 --> 00:05:36,939
strategic design tries to prevent a

00:05:33,610 --> 00:05:39,129
situation like this a situation where

00:05:36,939 --> 00:05:42,099
everything is in the mingott with

00:05:39,129 --> 00:05:44,740
everything else because if everything is

00:05:42,099 --> 00:05:47,709
in the minute with everything else it is

00:05:44,740 --> 00:05:49,899
not maintainable any more I guess we all

00:05:47,709 --> 00:05:52,599
know the situation you are changing

00:05:49,899 --> 00:05:55,990
something here and you are introducing a

00:05:52,599 --> 00:05:59,529
breaking change there something not

00:05:55,990 --> 00:06:02,349
really want to have so let me give you

00:05:59,529 --> 00:06:05,169
an example the first application I wrote

00:06:02,349 --> 00:06:07,719
about 20 years ago was a procurement

00:06:05,169 --> 00:06:09,939
system and you know your first

00:06:07,719 --> 00:06:14,830
application is like your first laughs

00:06:09,939 --> 00:06:17,769
you will never ever forget it that's why

00:06:14,830 --> 00:06:20,439
it came into mind for me when I prepared

00:06:17,769 --> 00:06:21,729
for this talk and back then we could

00:06:20,439 --> 00:06:24,159
have written this huge

00:06:21,729 --> 00:06:27,099
eprocurement system but instead of that

00:06:24,159 --> 00:06:30,719
we could have also written several tiny

00:06:27,099 --> 00:06:33,369
systems like a catalog system or like a

00:06:30,719 --> 00:06:36,519
approval system where the manager is

00:06:33,369 --> 00:06:39,279
saying no you don't get this new laptop

00:06:36,519 --> 00:06:41,529
we had the ordering system which was

00:06:39,279 --> 00:06:44,649
sending out your requests to the right

00:06:41,529 --> 00:06:46,569
vendor and we had something that was a

00:06:44,649 --> 00:06:50,110
bit special we had a specification

00:06:46,569 --> 00:06:53,289
system the specifications system was for

00:06:50,110 --> 00:06:55,779
the IT departments they specified your

00:06:53,289 --> 00:06:58,539
request they said hey you need a new

00:06:55,779 --> 00:07:01,269
laptop you get this laptop because you

00:06:58,539 --> 00:07:05,199
are a power worker and you get this veto

00:07:01,269 --> 00:07:08,589
because you are not the power funny

00:07:05,199 --> 00:07:12,699
thing in our specification one example

00:07:08,589 --> 00:07:15,389
was about CD burners the example was hey

00:07:12,699 --> 00:07:18,309
someone is requesting a CD burner

00:07:15,389 --> 00:07:20,790
without having the allowance for it

00:07:18,309 --> 00:07:22,800
without being allowed to use

00:07:20,790 --> 00:07:25,710
CD burner and of course that was

00:07:22,800 --> 00:07:28,140
forbidden because back then a CD burner

00:07:25,710 --> 00:07:31,200
was an object of prestige but an

00:07:28,140 --> 00:07:34,710
expensive one nowadays it is not an

00:07:31,200 --> 00:07:37,650
object of prestige if they ask my boy if

00:07:34,710 --> 00:07:40,320
he knows what a CD burner is he will

00:07:37,650 --> 00:07:43,350
very likely say no I don't know it at

00:07:40,320 --> 00:07:46,230
all well he is only three years old

00:07:43,350 --> 00:07:49,800
perhaps this is one reason but I think

00:07:46,230 --> 00:07:52,740
you get the point so the whole point

00:07:49,800 --> 00:07:55,770
here is to subdivide a big system into

00:07:52,740 --> 00:07:59,010
Mania parts we are calling those parts

00:07:55,770 --> 00:08:02,250
subdomains and those subdomains shall be

00:07:59,010 --> 00:08:05,960
self-contained as self-contained as

00:08:02,250 --> 00:08:09,630
possible so if you ask me how to

00:08:05,960 --> 00:08:11,370
identify all those subdomains the answer

00:08:09,630 --> 00:08:14,210
is you have to look at your business

00:08:11,370 --> 00:08:17,010
processes and this is a bit special

00:08:14,210 --> 00:08:19,920
because not only been doing software

00:08:17,010 --> 00:08:22,800
architecture we have to concentrate on

00:08:19,920 --> 00:08:24,930
death nagisa but now you have looked at

00:08:22,800 --> 00:08:27,990
the use case specific stuff at your

00:08:24,930 --> 00:08:30,750
processes if you look at this ordering

00:08:27,990 --> 00:08:33,510
process here you will see that first of

00:08:30,750 --> 00:08:37,260
all an employee is requesting a product

00:08:33,510 --> 00:08:39,900
and then the ID expert is specifying

00:08:37,260 --> 00:08:42,450
this order they are saying you get this

00:08:39,900 --> 00:08:46,230
wrong laptop because you are a power

00:08:42,450 --> 00:08:48,510
user the manager is saying you get it or

00:08:46,230 --> 00:08:52,080
you don't get it and then the buying

00:08:48,510 --> 00:08:54,540
agent make sure that your order is sent

00:08:52,080 --> 00:08:57,660
out to the cheapest or to the best

00:08:54,540 --> 00:09:00,630
friend then we look at the other process

00:08:57,660 --> 00:09:03,720
we see something similar one manager is

00:09:00,630 --> 00:09:05,910
saying hey I need more money and his

00:09:03,720 --> 00:09:08,370
manager or her manager will say of

00:09:05,910 --> 00:09:11,820
course you can have all that money or no

00:09:08,370 --> 00:09:13,950
you don't get it just by looking at the

00:09:11,820 --> 00:09:17,070
processes you see you have several

00:09:13,950 --> 00:09:21,090
domains involved here normally each

00:09:17,070 --> 00:09:23,130
domain has at least one domain expert it

00:09:21,090 --> 00:09:25,650
could be the employee it could be the

00:09:23,130 --> 00:09:29,490
manager and so we see if they have at

00:09:25,650 --> 00:09:32,490
least four business domains here another

00:09:29,490 --> 00:09:33,329
way to identify domains is to look at

00:09:32,490 --> 00:09:35,759
your main

00:09:33,329 --> 00:09:38,610
entities for instance when it comes to

00:09:35,759 --> 00:09:41,249
requesting a product the product itself

00:09:38,610 --> 00:09:44,189
is the main entity when it comes to

00:09:41,249 --> 00:09:47,429
approving an order the product of course

00:09:44,189 --> 00:09:50,249
plays a role but perhaps only a tiny

00:09:47,429 --> 00:09:53,220
role because here the budget and the

00:09:50,249 --> 00:09:55,860
hierarchy is more important the product

00:09:53,220 --> 00:09:58,379
itself might be just a name and the

00:09:55,860 --> 00:10:01,259
price when it comes to approving the

00:09:58,379 --> 00:10:04,589
order when it comes to requesting it it

00:10:01,259 --> 00:10:09,019
can also be about a lot of images q and

00:10:04,589 --> 00:10:12,360
A's some ratings of the product answer

00:10:09,019 --> 00:10:15,629
so when you've identified all your

00:10:12,360 --> 00:10:18,899
subdomains which is not an easy task you

00:10:15,629 --> 00:10:22,439
will find out that you need to model

00:10:18,899 --> 00:10:25,019
those domains and that you need to model

00:10:22,439 --> 00:10:28,139
their relationships between them perhaps

00:10:25,019 --> 00:10:30,119
you find out that all the domains need

00:10:28,139 --> 00:10:33,480
summed up from the catalogue it

00:10:30,119 --> 00:10:36,480
specially product data and so one first

00:10:33,480 --> 00:10:40,079
idea could be to give all those two main

00:10:36,480 --> 00:10:42,899
styrax access to the cattle it could be

00:10:40,079 --> 00:10:46,499
a first idea but obviously it is not the

00:10:42,899 --> 00:10:49,499
best idea because if every domain has

00:10:46,499 --> 00:10:51,929
full access to the catalogue you will

00:10:49,499 --> 00:10:54,209
have a lot of breaking changes for sure

00:10:51,929 --> 00:10:56,910
you change something in the catalog and

00:10:54,209 --> 00:11:00,079
you influence all the other domains this

00:10:56,910 --> 00:11:03,329
is the very situation v bonds to prevent

00:11:00,079 --> 00:11:06,869
think about all those cables think about

00:11:03,329 --> 00:11:09,419
this in dominguez situation but a better

00:11:06,869 --> 00:11:12,480
idea could be to come up with a shared

00:11:09,419 --> 00:11:15,389
kernel that kernel is just a fancy

00:11:12,480 --> 00:11:18,449
domain trip and assigned to them for a

00:11:15,389 --> 00:11:20,759
bunch of shared libraries but also the

00:11:18,449 --> 00:11:23,279
shared kernel is not the last word on

00:11:20,759 --> 00:11:25,860
this because the shared kernel is

00:11:23,279 --> 00:11:29,040
normally something everyone is

00:11:25,860 --> 00:11:31,769
responsible for and if everyone is

00:11:29,040 --> 00:11:35,119
responsible for it at the end of the day

00:11:31,769 --> 00:11:38,339
no one is responsible for it it is like

00:11:35,119 --> 00:11:41,069
cleaning up a shared flat if you are

00:11:38,339 --> 00:11:43,860
sharing the flat and if everyone is

00:11:41,069 --> 00:11:45,400
responsible for cleaning it up you can

00:11:43,860 --> 00:11:48,280
imagine how this flat

00:11:45,400 --> 00:11:50,950
look like we always say it well they

00:11:48,280 --> 00:11:54,340
bomb who thinks that the flat is 30

00:11:50,950 --> 00:11:56,940
she'll clean it so the big question here

00:11:54,340 --> 00:12:00,040
is also about the responsibilities if

00:11:56,940 --> 00:12:03,040
everyone is responsible no one will be

00:12:00,040 --> 00:12:05,560
responsible and so this can also lead to

00:12:03,040 --> 00:12:08,380
breaking changes there is another

00:12:05,560 --> 00:12:12,250
approach and calling it the API approach

00:12:08,380 --> 00:12:16,090
an API is just a tiny force ate a tiny

00:12:12,250 --> 00:12:18,940
phosphate exposing selected things for

00:12:16,090 --> 00:12:21,310
other domains that means are the domains

00:12:18,940 --> 00:12:24,580
don't see the Hulk at the log domain

00:12:21,310 --> 00:12:26,830
they only see selected things and only

00:12:24,580 --> 00:12:29,890
those selected things need to be

00:12:26,830 --> 00:12:33,520
backwards compatible in order to prevent

00:12:29,890 --> 00:12:36,220
breaking changes the official domain

00:12:33,520 --> 00:12:39,310
driven design term is open or ha stories

00:12:36,220 --> 00:12:41,530
but the name service has an additive

00:12:39,310 --> 00:12:44,770
meaning another meaning in the area of

00:12:41,530 --> 00:12:48,250
Angola so I'm going with the name API it

00:12:44,770 --> 00:12:52,030
also fits into this black box here so it

00:12:48,250 --> 00:12:54,310
seems to be more fitting when it comes

00:12:52,030 --> 00:12:57,340
to domain driven design and to this

00:12:54,310 --> 00:13:00,160
original book where all their ideas have

00:12:57,340 --> 00:13:02,290
been written up into you will find a lot

00:13:00,160 --> 00:13:04,780
of additional approaches for cross

00:13:02,290 --> 00:13:07,090
domain communication but for the time

00:13:04,780 --> 00:13:09,610
being I will stick with those ideas

00:13:07,090 --> 00:13:13,840
namely if the shi'ite kernel and if a

00:13:09,610 --> 00:13:16,990
peons so this was the first side of my

00:13:13,840 --> 00:13:19,210
coin the second side of the coin is at

00:13:16,990 --> 00:13:20,050
first sight something that's completely

00:13:19,210 --> 00:13:23,230
different

00:13:20,050 --> 00:13:25,870
it's a technically topic it's about mono

00:13:23,230 --> 00:13:28,540
repositories perhaps you've heard about

00:13:25,870 --> 00:13:30,610
mono repositories to put it in a

00:13:28,540 --> 00:13:33,970
nutshell it is just a big code

00:13:30,610 --> 00:13:37,150
repository which consists of all your

00:13:33,970 --> 00:13:41,050
subsystems everything that belongs to

00:13:37,150 --> 00:13:43,810
your system goes in there in my case I

00:13:41,050 --> 00:13:46,930
have an approved library for my approval

00:13:43,810 --> 00:13:49,570
domain I have a catalogue library I have

00:13:46,930 --> 00:13:52,900
a shared validation library and the

00:13:49,570 --> 00:13:55,960
application is everything that belongs

00:13:52,900 --> 00:14:00,019
to your system goes in here your system

00:13:55,960 --> 00:14:03,019
is subdivided by means of folders at

00:14:00,019 --> 00:14:06,470
and one nice thing about this workspace

00:14:03,019 --> 00:14:09,379
is this node modules folder not that it

00:14:06,470 --> 00:14:12,559
exists but that it exists just once

00:14:09,379 --> 00:14:15,800
because that means you just have one

00:14:12,559 --> 00:14:19,279
version of Angela one version of our x1

00:14:15,800 --> 00:14:21,799
version of ensure X and that's good just

00:14:19,279 --> 00:14:24,379
imagine what would happen if you had

00:14:21,799 --> 00:14:27,290
angle of five year and angle a nine

00:14:24,379 --> 00:14:30,110
there and imagine you try to compile

00:14:27,290 --> 00:14:33,350
everything together I guarantee you all

00:14:30,110 --> 00:14:35,709
hell would break loose so obviously it's

00:14:33,350 --> 00:14:38,869
a good idea to have one version in here

00:14:35,709 --> 00:14:41,749
saying this one advantage is its

00:14:38,869 --> 00:14:44,239
prevents version conflicts and another

00:14:41,749 --> 00:14:47,480
advantage is you don't have the burden

00:14:44,239 --> 00:14:50,059
with distribute your own libraries just

00:14:47,480 --> 00:14:52,730
think about this if you had distributed

00:14:50,059 --> 00:14:54,649
libraries you had to implement your

00:14:52,730 --> 00:14:56,779
libraries you had to assign a version

00:14:54,649 --> 00:14:59,389
number you had to publish those

00:14:56,779 --> 00:15:02,179
libraries then you had to integrate the

00:14:59,389 --> 00:15:04,279
libraries into your application you had

00:15:02,179 --> 00:15:06,799
to download it you had to make sure

00:15:04,279 --> 00:15:09,559
everything works and of course you will

00:15:06,799 --> 00:15:11,809
find the back what do you do you have to

00:15:09,559 --> 00:15:14,059
report this back you have to switch over

00:15:11,809 --> 00:15:15,740
to the library again you have to fix the

00:15:14,059 --> 00:15:18,049
back you have to assign a new version

00:15:15,740 --> 00:15:21,139
number you have to publish the library

00:15:18,049 --> 00:15:24,279
and so on and so forth it means if you

00:15:21,139 --> 00:15:27,410
are using distributed libraries for

00:15:24,279 --> 00:15:28,100
decomposing a big system you might run

00:15:27,410 --> 00:15:31,290
crazy

00:15:28,100 --> 00:15:34,800
it is nothing you want to do

00:15:31,290 --> 00:15:37,710
so rating a workspace a mono repo

00:15:34,800 --> 00:15:40,080
workspace is really a piece of H with

00:15:37,710 --> 00:15:43,560
the angular CLI you'll need two angular

00:15:40,080 --> 00:15:45,450
CLI you'll new up a new workspace and

00:15:43,560 --> 00:15:49,850
then within that workspace you can

00:15:45,450 --> 00:15:52,699
generate an application or a library

00:15:49,850 --> 00:15:55,370
then you can surf the application or you

00:15:52,699 --> 00:15:57,449
can build the application this works in

00:15:55,370 --> 00:16:01,859
Zangla six

00:15:57,449 --> 00:16:04,259
saying this if you are not fully afford

00:16:01,859 --> 00:16:07,499
this idea then I have a good message for

00:16:04,259 --> 00:16:10,259
you that mono repo is not a one-way

00:16:07,499 --> 00:16:12,209
street you can move back and forth all

00:16:10,259 --> 00:16:14,519
the time let's say you have this

00:16:12,209 --> 00:16:17,759
validation library as part of your mono

00:16:14,519 --> 00:16:20,339
repo and let's say you want to share it

00:16:17,759 --> 00:16:22,319
with other companies or with other

00:16:20,339 --> 00:16:25,679
project teams having their own

00:16:22,319 --> 00:16:29,189
repository well in this case you can

00:16:25,679 --> 00:16:31,679
export it using an VM and so you have

00:16:29,189 --> 00:16:34,980
the best of both worlds you have it

00:16:31,679 --> 00:16:38,369
within your moon repository that means

00:16:34,980 --> 00:16:40,889
it grows within your mana repository it

00:16:38,369 --> 00:16:43,230
gets more major alongside your big

00:16:40,889 --> 00:16:47,549
application but other teams other

00:16:43,230 --> 00:16:50,819
companies other branches of your company

00:16:47,549 --> 00:16:54,930
can also use it using NPM if they don't

00:16:50,819 --> 00:16:57,779
want to use your peach monel repository

00:16:54,930 --> 00:17:00,899
and saying this this is exactly how

00:16:57,779 --> 00:17:03,990
Angola is developed Angola is developed

00:17:00,899 --> 00:17:06,780
within a mono repository and that makes

00:17:03,990 --> 00:17:09,689
sure that Angola forms version nine

00:17:06,780 --> 00:17:12,150
works together with Angola Korver's nine

00:17:09,689 --> 00:17:15,120
and that this works together with Angola

00:17:12,150 --> 00:17:17,660
common version 9 and then they add on

00:17:15,120 --> 00:17:20,280
they press a button and then they are

00:17:17,660 --> 00:17:22,400
exporting everything for the rest of us

00:17:20,280 --> 00:17:25,740
using ambien

00:17:22,400 --> 00:17:29,220
if you like this idea of the moon'll

00:17:25,740 --> 00:17:32,520
repository you will very likely laughs

00:17:29,220 --> 00:17:36,179
and next annex is what I'm calling the

00:17:32,520 --> 00:17:39,480
sugar tip on top of the angular CLI it

00:17:36,179 --> 00:17:42,870
extends the angle of CLI it teaches the

00:17:39,480 --> 00:17:45,990
angular CLI new tricks that one of those

00:17:42,870 --> 00:17:48,540
tricks is this year you see the

00:17:45,990 --> 00:17:51,390
structure of your application you can

00:17:48,540 --> 00:17:54,150
get an dependency graph that shows which

00:17:51,390 --> 00:17:56,490
library is accessing which other label

00:17:54,150 --> 00:18:00,720
and this is where the cyclic uses

00:17:56,490 --> 00:18:04,200
because in this way you can guarantee

00:18:00,720 --> 00:18:06,540
that not every each and every library is

00:18:04,200 --> 00:18:08,580
accessing each and every other library

00:18:06,540 --> 00:18:11,970
you can prevent this in demented

00:18:08,580 --> 00:18:14,250
situation we've talked about before

00:18:11,970 --> 00:18:17,190
an axe comes with other tricks and other

00:18:14,250 --> 00:18:19,480
nice features I will show you some of

00:18:17,190 --> 00:18:22,180
them a bit late

00:18:19,480 --> 00:18:25,450
saying this if we are wondering how to

00:18:22,180 --> 00:18:28,930
get started with an ex just do what you

00:18:25,450 --> 00:18:32,350
did before but instead of engine you use

00:18:28,930 --> 00:18:35,290
this rad common use nvm in it and the

00:18:32,350 --> 00:18:38,560
rest is the same saying this you still

00:18:35,290 --> 00:18:42,040
have an angular CLI project because an

00:18:38,560 --> 00:18:44,560
ax is only extending the angular CLI so

00:18:42,040 --> 00:18:47,990
and she generate and she serve and she

00:18:44,560 --> 00:18:51,230
builds will work as before

00:18:47,990 --> 00:18:52,850
okay so much for theory we have seen two

00:18:51,230 --> 00:18:56,150
parts of the same coin

00:18:52,850 --> 00:18:58,730
their methodology key part as well as

00:18:56,150 --> 00:19:02,270
the definite ebook and now let's try to

00:18:58,730 --> 00:19:04,250
bring those two parts together if you

00:19:02,270 --> 00:19:07,340
try to bring those two parts together

00:19:04,250 --> 00:19:10,400
first of all it would create one sub

00:19:07,340 --> 00:19:11,270
folder for each domain in my Manu

00:19:10,400 --> 00:19:14,300
repository

00:19:11,270 --> 00:19:17,450
it means in my case I have perhaps a

00:19:14,300 --> 00:19:20,540
catalog folder I have ordering folder I

00:19:17,450 --> 00:19:23,630
have some other folders and then I will

00:19:20,540 --> 00:19:27,560
very likely have a shared folder for my

00:19:23,630 --> 00:19:32,060
shared krandle after that I can feel all

00:19:27,560 --> 00:19:35,660
my folders with some libraries and the

00:19:32,060 --> 00:19:39,110
people at novel defined several

00:19:35,660 --> 00:19:42,530
categories of libraries one category is

00:19:39,110 --> 00:19:46,100
the future library a future library is a

00:19:42,530 --> 00:19:49,820
library consisting of smart components

00:19:46,100 --> 00:19:53,900
it smart components know about your use

00:19:49,820 --> 00:19:56,810
cases it knows about your processes it

00:19:53,900 --> 00:20:01,040
knows how to help the user to accomplish

00:19:56,810 --> 00:20:03,890
a given goal that means those components

00:20:01,040 --> 00:20:06,470
are quite specific then you have UI

00:20:03,890 --> 00:20:09,260
libraries they consist of dumb

00:20:06,470 --> 00:20:13,520
components a dump component does not

00:20:09,260 --> 00:20:17,660
know about your use cases but because it

00:20:13,520 --> 00:20:20,000
does not know it is super reusable just

00:20:17,660 --> 00:20:22,370
think about the date time bigger it

00:20:20,000 --> 00:20:24,890
night's debates time picker is very dumb

00:20:22,370 --> 00:20:27,740
when it comes to knowledge about your

00:20:24,890 --> 00:20:30,320
domain it does not know anything about

00:20:27,740 --> 00:20:33,110
your use cases it does not even know

00:20:30,320 --> 00:20:35,900
which kind of date it is displaying you

00:20:33,110 --> 00:20:38,450
see there what a day it is it a delivery

00:20:35,900 --> 00:20:41,600
date is it a deadline it still does not

00:20:38,450 --> 00:20:44,440
know but because it doesn't know it is

00:20:41,600 --> 00:20:47,630
reusable with all the use cases open

00:20:44,440 --> 00:20:49,970
that means because of separating those

00:20:47,630 --> 00:20:52,970
two layers you make your system more

00:20:49,970 --> 00:20:55,820
reusable then you have something I'm

00:20:52,970 --> 00:20:59,420
calling the domain layer it contains

00:20:55,820 --> 00:21:02,780
your client sites model but also some

00:20:59,420 --> 00:21:04,880
logic to communicate with the backend we

00:21:02,780 --> 00:21:07,970
will see more about this in a minute and

00:21:04,880 --> 00:21:11,000
then there is a utility layer which

00:21:07,970 --> 00:21:13,520
holds your utility functions for

00:21:11,000 --> 00:21:16,190
instance authentication functions or

00:21:13,520 --> 00:21:18,980
locking functions or functions for

00:21:16,190 --> 00:21:21,310
converting dates into strings and vice

00:21:18,980 --> 00:21:21,310
versa

00:21:21,610 --> 00:21:28,750
this has a big advantage one advantage

00:21:25,090 --> 00:21:31,210
here is you have more water in here just

00:21:28,750 --> 00:21:33,910
by structuring your application in the

00:21:31,210 --> 00:21:36,640
columns and in the rows you have more

00:21:33,910 --> 00:21:39,220
order and there is less discussion about

00:21:36,640 --> 00:21:41,740
which building block goes where you

00:21:39,220 --> 00:21:44,500
clearly know oh this is a smart

00:21:41,740 --> 00:21:47,200
component from the catalog domain so it

00:21:44,500 --> 00:21:50,680
goes in here and you know oh this is a

00:21:47,200 --> 00:21:53,530
domain object and so it goes into the

00:21:50,680 --> 00:21:56,860
domain saying this they are several

00:21:53,530 --> 00:21:59,860
further advantages one advantage is you

00:21:56,860 --> 00:22:02,890
can easily introduce access restrictions

00:21:59,860 --> 00:22:05,110
here I'm saying I'm having vertically

00:22:02,890 --> 00:22:07,480
access restrictions which means the

00:22:05,110 --> 00:22:10,210
feature is allowed to access everything

00:22:07,480 --> 00:22:13,450
else but the domain is only allowed to

00:22:10,210 --> 00:22:17,830
access the YouTube one layer is only

00:22:13,450 --> 00:22:20,200
allowed to access layers below it and of

00:22:17,830 --> 00:22:22,660
course you can also introduce vertically

00:22:20,200 --> 00:22:25,150
access restrictions horizontal access

00:22:22,660 --> 00:22:28,120
restrictions like this year where I am

00:22:25,150 --> 00:22:30,340
saying well the catalog itself is only

00:22:28,120 --> 00:22:33,340
allowed to dock with the catalog and

00:22:30,340 --> 00:22:35,950
with the share domain and ordering is

00:22:33,340 --> 00:22:39,220
only allowed to dock with ordering and

00:22:35,950 --> 00:22:42,040
also the officia to me one more time

00:22:39,220 --> 00:22:44,950
this prevents that everything is

00:22:42,040 --> 00:22:47,200
accessing everything else and so we can

00:22:44,950 --> 00:22:49,510
prevent the situation I've showed you

00:22:47,200 --> 00:22:51,950
before with the picture with all the

00:22:49,510 --> 00:22:54,110
cables

00:22:51,950 --> 00:22:57,020
perhaps you're saying bail yeah that

00:22:54,110 --> 00:22:59,450
looks nice I have access restrictions I

00:22:57,020 --> 00:23:02,480
have more order but somehow that looks

00:22:59,450 --> 00:23:05,780
overwhelming and well it's not that

00:23:02,480 --> 00:23:07,820
overwhelming at all because normally you

00:23:05,780 --> 00:23:11,390
don't have a full rectangle here

00:23:07,820 --> 00:23:14,000
normally you have just some libraries

00:23:11,390 --> 00:23:16,430
within bond domain and some libraries

00:23:14,000 --> 00:23:19,130
within the shuttle let me talk about

00:23:16,430 --> 00:23:22,070
this in a minute before I'm talking

00:23:19,130 --> 00:23:25,340
about this let's also talk about my API

00:23:22,070 --> 00:23:28,910
idea I've shown you before his idea I've

00:23:25,340 --> 00:23:31,310
took out of domain driven design there

00:23:28,910 --> 00:23:34,910
is namely one issue with the shi'ite

00:23:31,310 --> 00:23:37,670
kernel just imagine you are building a

00:23:34,910 --> 00:23:40,540
component into the shi'ite con this

00:23:37,670 --> 00:23:43,670
component will of course have some

00:23:40,540 --> 00:23:45,560
dependencies for other components and so

00:23:43,670 --> 00:23:48,080
you need also to pull those other

00:23:45,560 --> 00:23:50,120
components into the shared cradle but

00:23:48,080 --> 00:23:52,760
also those other components will have

00:23:50,120 --> 00:23:55,600
some dependencies and so you are ending

00:23:52,760 --> 00:23:59,270
up moving everything into the shack and

00:23:55,600 --> 00:24:01,580
you can imagine when the shirt when the

00:23:59,270 --> 00:24:04,250
shared candle has about two-thirds of

00:24:01,580 --> 00:24:07,880
your application it is not worth much

00:24:04,250 --> 00:24:10,190
and so sometimes it's not the best idea

00:24:07,880 --> 00:24:13,220
to move stuff into the shared kernel

00:24:10,190 --> 00:24:16,940
sometimes it's better to define an API

00:24:13,220 --> 00:24:20,360
like you see here an API is basically

00:24:16,940 --> 00:24:23,450
just a library with an indexed as

00:24:20,360 --> 00:24:26,300
exposing specific things for other

00:24:23,450 --> 00:24:29,240
domains not everything only specific

00:24:26,300 --> 00:24:31,480
things for instance everything ordering

00:24:29,240 --> 00:24:34,789
needs from the cabin

00:24:31,480 --> 00:24:37,429
it's mentioned before it's all is not

00:24:34,789 --> 00:24:40,970
bad exhausting because you don't have a

00:24:37,429 --> 00:24:44,029
full rectangle you have normally feature

00:24:40,970 --> 00:24:47,120
libraries and domain libraries as part

00:24:44,029 --> 00:24:50,750
of your real domains and the rest is

00:24:47,120 --> 00:24:53,270
kind of reusable and so it goes to your

00:24:50,750 --> 00:24:56,300
shared com

00:24:53,270 --> 00:24:58,970
one more thing a little bug about is

00:24:56,300 --> 00:25:02,210
isolating you mean you can subdivide

00:24:58,970 --> 00:25:05,240
your domain into three parts according

00:25:02,210 --> 00:25:08,060
first of all the theory behind domain

00:25:05,240 --> 00:25:11,510
driven design but also according some

00:25:08,060 --> 00:25:13,760
best practices in the angle above saying

00:25:11,510 --> 00:25:16,610
this you have the domain model in the

00:25:13,760 --> 00:25:19,670
middle of your domain library it

00:25:16,610 --> 00:25:22,670
consists of your entities if you don't

00:25:19,670 --> 00:25:25,460
like the word entity on the Gaian think

00:25:22,670 --> 00:25:28,130
about it as about of your giant site

00:25:25,460 --> 00:25:30,860
model and you have some business logic

00:25:28,130 --> 00:25:34,130
in here business logic you need on the

00:25:30,860 --> 00:25:36,980
client stuff like validation for

00:25:34,130 --> 00:25:39,500
instance saying this of course the

00:25:36,980 --> 00:25:42,500
maturity of the business logic is in the

00:25:39,500 --> 00:25:45,790
backend but sometimes you need a tiny

00:25:42,500 --> 00:25:49,030
amount of it in the front and do

00:25:45,790 --> 00:25:52,280
infrastructure is about data access and

00:25:49,030 --> 00:25:54,350
application is about facets a force aid

00:25:52,280 --> 00:25:57,920
that shields the complexity of your

00:25:54,350 --> 00:26:00,620
domain if I say that exposes just what

00:25:57,920 --> 00:26:04,370
you need for bomb or for another use

00:26:00,620 --> 00:26:07,100
case and saying this the facet can only

00:26:04,370 --> 00:26:10,280
make can also make use of state

00:26:07,100 --> 00:26:13,400
management it can also hide details of

00:26:10,280 --> 00:26:16,400
state management so that they consume of

00:26:13,400 --> 00:26:19,220
the domain you're smart components do

00:26:16,400 --> 00:26:22,510
not need to know about your state

00:26:19,220 --> 00:26:22,510
management library

00:26:23,020 --> 00:26:29,380
perhaps you're saying yeah that looks

00:26:25,600 --> 00:26:33,220
nice but really month let layering is so

00:26:29,380 --> 00:26:36,370
much 1990s yes you are right but anyway

00:26:33,220 --> 00:26:39,159
it really works for me and for a lot of

00:26:36,370 --> 00:26:41,580
other companies but saying this this is

00:26:39,159 --> 00:26:44,679
not about layering for me you can use

00:26:41,580 --> 00:26:46,899
alternatives for layering like hexagonal

00:26:44,679 --> 00:26:49,690
architectures or a cleaner collection

00:26:46,899 --> 00:26:52,630
this is not about layering it is just

00:26:49,690 --> 00:26:55,539
about decomposing a system into

00:26:52,630 --> 00:26:59,140
libraries and it is about restricting

00:26:55,539 --> 00:27:01,840
access because only if you restrict

00:26:59,140 --> 00:27:05,299
access you can make sure that not

00:27:01,840 --> 00:27:08,779
everything talks to everything else

00:27:05,299 --> 00:27:12,169
I think it is enough for the theory but

00:27:08,779 --> 00:27:15,350
let's have a look at the practice let's

00:27:12,169 --> 00:27:19,399
have a look at a concrete implementation

00:27:15,350 --> 00:27:24,409
furnace let me skip the presentation

00:27:19,399 --> 00:27:27,860
here let me skip this bar and let me

00:27:24,409 --> 00:27:31,489
move to an exam so what we see here is a

00:27:27,860 --> 00:27:34,970
Manu repository I've created this mono

00:27:31,489 --> 00:27:37,279
repository with an ax and at first sight

00:27:34,970 --> 00:27:39,950
it looks like a traditional angle of

00:27:37,279 --> 00:27:43,340
solution that's just a tiny difference

00:27:39,950 --> 00:27:45,710
instead of a big project folder we have

00:27:43,340 --> 00:27:48,830
an application and an library folder and

00:27:45,710 --> 00:27:51,320
I think you can guess what goes in there

00:27:48,830 --> 00:27:55,009
the application folder holds your

00:27:51,320 --> 00:27:58,070
applications I just have one a big mono

00:27:55,009 --> 00:28:01,159
lid called UI you don't need to do it

00:27:58,070 --> 00:28:03,649
you can have several applications for

00:28:01,159 --> 00:28:07,609
instance one application bear domain

00:28:03,649 --> 00:28:10,460
which would bring you quite near to the

00:28:07,609 --> 00:28:12,830
idea of micro front ends but here for

00:28:10,460 --> 00:28:15,619
the sake of simplicity I just go with

00:28:12,830 --> 00:28:18,769
one application and here I have several

00:28:15,619 --> 00:28:21,830
libraries several libraries organized

00:28:18,769 --> 00:28:25,460
with subfolders and as mentioned each

00:28:21,830 --> 00:28:28,009
subfolder is just one domain here I have

00:28:25,460 --> 00:28:31,300
my catalog domain I have my ordering

00:28:28,009 --> 00:28:33,430
domain and here I have measured

00:28:31,300 --> 00:28:36,100
let's have a look to the catalogue

00:28:33,430 --> 00:28:39,430
domain the catalog domain has several

00:28:36,100 --> 00:28:43,150
features it has some domain logic it has

00:28:39,430 --> 00:28:46,450
an API if we look to the future browse

00:28:43,150 --> 00:28:49,300
product we will see an indexed yes a

00:28:46,450 --> 00:28:52,540
barrel and I'm always saying this

00:28:49,300 --> 00:28:54,910
indexed es is reason enough to go with

00:28:52,540 --> 00:28:58,690
libraries this is reason enough to

00:28:54,910 --> 00:29:01,300
decompose a big system into libraries

00:28:58,690 --> 00:29:05,770
which are bad of a mono repo because

00:29:01,300 --> 00:29:08,740
this is your public API everything you

00:29:05,770 --> 00:29:11,470
are exporting here needs to be backwards

00:29:08,740 --> 00:29:14,170
compatible because everything you are

00:29:11,470 --> 00:29:17,740
exporting here can be used by other

00:29:14,170 --> 00:29:20,290
libraries of your domain everything you

00:29:17,740 --> 00:29:23,560
are not exporting here is your secret

00:29:20,290 --> 00:29:25,540
and it is good to have secrets trust me

00:29:23,560 --> 00:29:28,240
it is really good to have secrets

00:29:25,540 --> 00:29:30,550
because everything you keep a secret can

00:29:28,240 --> 00:29:35,080
be changed afterwards without

00:29:30,550 --> 00:29:38,970
introducing breaking changes this is one

00:29:35,080 --> 00:29:42,670
big thing about stable software ISM if

00:29:38,970 --> 00:29:45,640
we go in here into our library of course

00:29:42,670 --> 00:29:48,700
we see an angular module it is just an

00:29:45,640 --> 00:29:50,490
ordinary angular module importing some

00:29:48,700 --> 00:29:53,770
stuff that you are in some stuff

00:29:50,490 --> 00:29:57,130
exporting some stuff and of course as

00:29:53,770 --> 00:29:58,390
this is a feature a feature from the

00:29:57,130 --> 00:30:02,560
catalog domain

00:29:58,390 --> 00:30:04,840
it needs the catalog to main library the

00:30:02,560 --> 00:30:08,800
catalog domain library if the data

00:30:04,840 --> 00:30:11,500
access services and thief mcian set

00:30:08,800 --> 00:30:13,600
model and this is important imported

00:30:11,500 --> 00:30:16,630
that way and perhaps you are noticing

00:30:13,600 --> 00:30:21,940
something here and not writing something

00:30:16,630 --> 00:30:25,750
like dot dot slash dot dot slash dot dot

00:30:21,940 --> 00:30:27,550
slash dot dot slash this and that this

00:30:25,750 --> 00:30:31,180
is something that would drive us crazy

00:30:27,550 --> 00:30:35,070
no I'm using a mapped name a Maps name

00:30:31,180 --> 00:30:37,830
that looks like ordinary library

00:30:35,070 --> 00:30:41,130
and of course the typescript compiler

00:30:37,830 --> 00:30:43,830
needs to know where this name is

00:30:41,130 --> 00:30:47,909
pointing to and the goodness such is an

00:30:43,830 --> 00:30:50,549
ax is setting up this very mapping it is

00:30:47,909 --> 00:30:53,429
done for you automatically it happens

00:30:50,549 --> 00:30:55,889
within yes conflict chase if you look

00:30:53,429 --> 00:30:58,470
here we have a lot of path mappings path

00:30:55,889 --> 00:31:02,480
mappings that say that this name for

00:30:58,470 --> 00:31:05,549
instance points to that file here and

00:31:02,480 --> 00:31:08,220
one more time this is where this active

00:31:05,549 --> 00:31:11,039
uses because you see here the map name

00:31:08,220 --> 00:31:15,350
it's pointing to the indexed s to the

00:31:11,039 --> 00:31:15,350
public API of this very life

00:31:15,370 --> 00:31:22,149
saying this this is also the key or bomb

00:31:19,070 --> 00:31:24,980
key for byte level solutions just

00:31:22,149 --> 00:31:28,340
imagine you have this customer who gave

00:31:24,980 --> 00:31:31,130
few tiny sheets of paper with people on

00:31:28,340 --> 00:31:33,649
it or breeches and numbers on it I guess

00:31:31,130 --> 00:31:36,490
you know those sheets of paper I really

00:31:33,649 --> 00:31:39,919
love them and for that you are

00:31:36,490 --> 00:31:42,970
implementing a special feature for this

00:31:39,919 --> 00:31:46,159
customer which I'm calling customer area

00:31:42,970 --> 00:31:49,100
just change this and then you can

00:31:46,159 --> 00:31:51,710
compile the application for a customer

00:31:49,100 --> 00:31:54,760
and you make sure that you only have the

00:31:51,710 --> 00:31:57,320
source code customer a meets Indian

00:31:54,760 --> 00:31:59,809
perhaps you're saying now hey man Fred

00:31:57,320 --> 00:32:01,340
you're using comments right in the

00:31:59,809 --> 00:32:04,520
middle of a JSON file

00:32:01,340 --> 00:32:07,899
is this forbidden yes I know it's not

00:32:04,520 --> 00:32:10,820
allowed but do you know something

00:32:07,899 --> 00:32:14,029
sometimes we have to risk something it

00:32:10,820 --> 00:32:17,059
really makes me feel alive like all to

00:32:14,029 --> 00:32:20,059
run about no just kidding in real life I

00:32:17,059 --> 00:32:23,029
would have several ideas convicts and if

00:32:20,059 --> 00:32:25,610
I compiled for this customer I would use

00:32:23,029 --> 00:32:29,320
this Deus config if I compile for that

00:32:25,610 --> 00:32:33,380
customer I use I would use that yes calm

00:32:29,320 --> 00:32:36,679
okay so we have this application we've

00:32:33,380 --> 00:32:39,200
stopped by that it into small libraries

00:32:36,679 --> 00:32:42,799
besides this it is just a traditional

00:32:39,200 --> 00:32:46,170
angle approach but now let's have a look

00:32:42,799 --> 00:32:50,040
at one of the features of an axe

00:32:46,170 --> 00:32:54,650
let's go to the console and let's run

00:32:50,040 --> 00:32:54,650
the dependency graph script

00:32:57,260 --> 00:33:02,330
look at this it gives me a graphically

00:32:59,929 --> 00:33:05,390
representation of my bro check let's

00:33:02,330 --> 00:33:08,120
zoom in it shows me okay I have an

00:33:05,390 --> 00:33:11,870
end-to-end testing suite and I have my

00:33:08,120 --> 00:33:15,500
PQ I'm on elite and then I have fear

00:33:11,870 --> 00:33:17,720
several domains with several Iblees now

00:33:15,500 --> 00:33:21,890
let's make sure everything fits the

00:33:17,720 --> 00:33:25,750
screen let me do a screenshot and let me

00:33:21,890 --> 00:33:25,750
switch over to OneNote

00:33:25,800 --> 00:33:34,970
let me paste it and now let's draw a bit

00:33:29,550 --> 00:33:38,130
here on this copy on this hard copy so

00:33:34,970 --> 00:33:40,380
if you look here we have an ordering

00:33:38,130 --> 00:33:43,740
feature that means this is a library

00:33:40,380 --> 00:33:46,230
from the ordering domain and if you look

00:33:43,740 --> 00:33:48,630
here here we have to do main logic of

00:33:46,230 --> 00:33:52,260
the ordering to me let's take another

00:33:48,630 --> 00:33:55,110
color here you see we have the future

00:33:52,260 --> 00:33:57,330
from the catalog catalog feature browse

00:33:55,110 --> 00:34:00,150
products and here we have another

00:33:57,330 --> 00:34:03,240
feature from the catalog and here we

00:34:00,150 --> 00:34:06,510
have the catalog domain logic and here

00:34:03,240 --> 00:34:08,550
we have the API of the color and the

00:34:06,510 --> 00:34:13,530
rest is part of the shared kernel a

00:34:08,550 --> 00:34:16,220
shared UI component for addresses

00:34:13,530 --> 00:34:20,250
and a shared library for authentication

00:34:16,220 --> 00:34:23,460
so just by looking at the colors now you

00:34:20,250 --> 00:34:27,090
can tell that you don't easily access

00:34:23,460 --> 00:34:29,429
another domain this is forbidden if you

00:34:27,090 --> 00:34:32,070
want to access another domain you have

00:34:29,429 --> 00:34:35,790
either to use the shared candle like

00:34:32,070 --> 00:34:38,040
here or well you have to use an API that

00:34:35,790 --> 00:34:41,370
is exposing specific things for you and

00:34:38,040 --> 00:34:43,980
one more time this prevents this in the

00:34:41,370 --> 00:34:47,550
mingotts system and this make sure your

00:34:43,980 --> 00:34:50,120
software is maintainable in lumber but

00:34:47,550 --> 00:34:53,460
now let's do something that's a bit bad

00:34:50,120 --> 00:34:57,840
let me be the bad guy for just a minute

00:34:53,460 --> 00:34:59,930
let me access the UI library from within

00:34:57,840 --> 00:35:03,010
the authentication library

00:34:59,930 --> 00:35:05,980
let me do

00:35:03,010 --> 00:35:08,800
this access here this access is

00:35:05,980 --> 00:35:11,530
forbidden according to our software

00:35:08,800 --> 00:35:14,140
architecture because if you think about

00:35:11,530 --> 00:35:17,530
our software architecture you see we had

00:35:14,140 --> 00:35:20,410
a layer beef UI libraries and below we

00:35:17,530 --> 00:35:22,840
had the utility layer and I say it we

00:35:20,410 --> 00:35:25,420
are only allowed to access everything in

00:35:22,840 --> 00:35:28,840
a top-down manner here I'm doing the

00:35:25,420 --> 00:35:32,020
exactly opposite I am accessing a

00:35:28,840 --> 00:35:35,230
library bottom-up I am accessing the UI

00:35:32,020 --> 00:35:38,680
library from within my utility layer and

00:35:35,230 --> 00:35:42,820
this is kind of a big let's find out how

00:35:38,680 --> 00:35:46,300
an axe is reacting upon this for this

00:35:42,820 --> 00:35:48,960
I'm switching over to my shared util alt

00:35:46,300 --> 00:35:52,950
module

00:35:48,960 --> 00:35:56,070
and Here I am importing the UI layer

00:35:52,950 --> 00:35:58,800
which is kind of forbidden and hey I'm

00:35:56,070 --> 00:36:01,830
getting immediately it slap into my face

00:35:58,800 --> 00:36:05,520
it is telling me that the rot check

00:36:01,830 --> 00:36:08,580
typed with tact with dibutyl can only

00:36:05,520 --> 00:36:11,820
depend on libraries packed with typos or

00:36:08,580 --> 00:36:14,430
to put it in another way a utility

00:36:11,820 --> 00:36:17,400
library is only allowed to use other

00:36:14,430 --> 00:36:20,760
utility libraries it is the last library

00:36:17,400 --> 00:36:23,790
in my stack I really love this but what

00:36:20,760 --> 00:36:26,040
I love more is I can do this on the

00:36:23,790 --> 00:36:29,490
console let me close this console here

00:36:26,040 --> 00:36:32,630
let me open up a new console and let me

00:36:29,490 --> 00:36:36,000
run and shilling and she'll ins with

00:36:32,630 --> 00:36:39,299
shared util off

00:36:36,000 --> 00:36:43,969
I'm getting the same arrow here

00:36:39,299 --> 00:36:47,640
just a second and another second and

00:36:43,969 --> 00:36:49,619
come on where is my agua here it is

00:36:47,640 --> 00:36:52,679
exactly the same ever

00:36:49,619 --> 00:36:55,649
and honestly I like this more I like

00:36:52,679 --> 00:36:58,289
this more not because I'm an old guy not

00:36:55,649 --> 00:37:00,989
because I grew up in denying this I like

00:36:58,289 --> 00:37:03,059
this on the console because everything

00:37:00,989 --> 00:37:06,599
that happens on the console can be

00:37:03,059 --> 00:37:09,089
automated within your CI process within

00:37:06,599 --> 00:37:11,849
your build server that means you can

00:37:09,089 --> 00:37:14,549
check on your build server if someone

00:37:11,849 --> 00:37:17,219
broke your architecture and if someone

00:37:14,549 --> 00:37:19,799
broke the architecture you can send out

00:37:17,219 --> 00:37:22,439
an email to the whole team you can tell

00:37:19,799 --> 00:37:25,529
the whole team hey man Fred broke the

00:37:22,439 --> 00:37:29,549
architecture go to him and help him to

00:37:25,529 --> 00:37:32,249
grow his Avernus it's up to Luke to you

00:37:29,549 --> 00:37:35,489
are you helped him to grow his awareness

00:37:32,249 --> 00:37:37,800
about this varied a high-tech Chabot

00:37:35,489 --> 00:37:41,130
please be nice

00:37:37,800 --> 00:37:43,920
okay so you can really automate

00:37:41,130 --> 00:37:47,610
it's nice isn't it but now the main

00:37:43,920 --> 00:37:50,010
question is how does an axe know about

00:37:47,610 --> 00:37:55,230
our architecture about this architecture

00:37:50,010 --> 00:37:58,680
with columns and rows with domains and

00:37:55,230 --> 00:38:01,740
with layers well at the end of the day

00:37:58,680 --> 00:38:05,100
it's not difficult at all an axe gives

00:38:01,740 --> 00:38:08,160
you this an exchange file it is created

00:38:05,100 --> 00:38:11,100
for you automatically and you can now

00:38:08,160 --> 00:38:15,300
use this an exchange file to assign

00:38:11,100 --> 00:38:18,810
packs to each and every library also to

00:38:15,300 --> 00:38:21,540
applications attack is nothing else than

00:38:18,810 --> 00:38:24,200
a category you can write in here what

00:38:21,540 --> 00:38:27,300
you want you can also write in here at

00:38:24,200 --> 00:38:30,870
base64 encoded string if you want to

00:38:27,300 --> 00:38:33,090
look like an expert but on to it but at

00:38:30,870 --> 00:38:36,120
the end of the day an axe does not care

00:38:33,090 --> 00:38:39,030
about what you're writing I've assigned

00:38:36,120 --> 00:38:43,020
to categories to most of my libraries

00:38:39,030 --> 00:38:46,050
the first category is telling an axe in

00:38:43,020 --> 00:38:49,680
which column my library is here I'm

00:38:46,050 --> 00:38:53,790
saying the catalog feature belongs to my

00:38:49,680 --> 00:38:56,370
catalog domain to my first column if

00:38:53,790 --> 00:38:59,280
remember the architecture from before

00:38:56,370 --> 00:39:02,900
the catalog was part of the first column

00:38:59,280 --> 00:39:06,630
and I'm also saying well it also did

00:39:02,900 --> 00:39:09,060
depends to my diet feature to my feature

00:39:06,630 --> 00:39:12,060
layer to this first row in my

00:39:09,060 --> 00:39:14,010
architecture I'm doing the same before

00:39:12,060 --> 00:39:17,070
the other libraries for instance here

00:39:14,010 --> 00:39:20,250
and saying catalog domain belongs to my

00:39:17,070 --> 00:39:23,430
first row to my robe if the catalog

00:39:20,250 --> 00:39:25,830
domain and it belongs to that I think it

00:39:23,430 --> 00:39:28,770
was the third column the column with the

00:39:25,830 --> 00:39:31,230
domain logic I'm just doing this for all

00:39:28,770 --> 00:39:33,990
my libraries and after doing this you

00:39:31,230 --> 00:39:37,530
can define linting rules for this

00:39:33,990 --> 00:39:41,880
category for this switch over to beauty

00:39:37,530 --> 00:39:45,630
as link Jason an axe team just put in

00:39:41,880 --> 00:39:48,300
here and an e rule that is called an axe

00:39:45,630 --> 00:39:49,710
and force module boundaries and now it's

00:39:48,300 --> 00:39:52,950
up to you to

00:39:49,710 --> 00:39:55,710
use this rule for your meanings here I'm

00:39:52,950 --> 00:39:58,140
saying hey domain catalog is only

00:39:55,710 --> 00:40:01,790
allowed to access other stuff in domain

00:39:58,140 --> 00:40:05,070
catalog and dimension and I'm saying

00:40:01,790 --> 00:40:08,099
domain ordering is only allowed to

00:40:05,070 --> 00:40:11,099
access other stuff in domain ordering it

00:40:08,099 --> 00:40:13,980
is allowed to access the API of the

00:40:11,099 --> 00:40:16,650
catalog exposing specific things for me

00:40:13,980 --> 00:40:19,980
and it is allowed to access the shared

00:40:16,650 --> 00:40:22,050
cram and the shared kernel is only

00:40:19,980 --> 00:40:25,200
allowed to dock with the shared Quran

00:40:22,050 --> 00:40:27,480
let's using those free access

00:40:25,200 --> 00:40:30,119
restrictions we've defined our

00:40:27,480 --> 00:40:31,440
horizontal rules you've seen on this

00:40:30,119 --> 00:40:33,780
lots

00:40:31,440 --> 00:40:36,900
I'm also defining the vertical rules

00:40:33,780 --> 00:40:39,750
here I'm saying a future library is only

00:40:36,900 --> 00:40:43,440
allowed to dock with the main Lordships

00:40:39,750 --> 00:40:46,770
utility api's and UI but if you look

00:40:43,440 --> 00:40:50,190
here the UI is only allowed to dock 50

00:40:46,770 --> 00:40:54,089
utility layer and the DVD layer is also

00:40:50,190 --> 00:40:57,329
only allowed to dock with it you might

00:40:54,089 --> 00:40:59,430
even remove this because if your billet

00:40:57,329 --> 00:41:02,880
is talk to your deal it is you have

00:40:59,430 --> 00:41:06,089
psyches and as you know compilers are

00:41:02,880 --> 00:41:08,460
not that happy about saris but anyway

00:41:06,089 --> 00:41:12,960
it's up to you how restrictive you are

00:41:08,460 --> 00:41:16,440
and how much are possibilities you

00:41:12,960 --> 00:41:19,530
grants to the rest of the D ok it's

00:41:16,440 --> 00:41:22,079
quite nice isn't it but I want to show

00:41:19,530 --> 00:41:26,640
you a bit more let's get rid of this one

00:41:22,079 --> 00:41:29,220
more time I want to show you a nice

00:41:26,640 --> 00:41:32,520
feature of an axe and for this I will

00:41:29,220 --> 00:41:35,339
start with a simple fourth experiment

00:41:32,520 --> 00:41:39,380
for this let's get rid of those lines

00:41:35,339 --> 00:41:43,859
here and let me write some other lines

00:41:39,380 --> 00:41:47,099
just imagine are changing this catalog

00:41:43,859 --> 00:41:50,160
ABI but would you say which other

00:41:47,099 --> 00:41:53,700
libraries can be affected by the change

00:41:50,160 --> 00:41:56,819
if you look at the daka texture what

00:41:53,700 --> 00:41:59,760
would you see which library can be

00:41:56,819 --> 00:42:02,730
affected by a breaking change here well

00:41:59,760 --> 00:42:06,810
of course not the catalog domain because

00:42:02,730 --> 00:42:10,200
it does not depend upon the catalog API

00:42:06,810 --> 00:42:13,410
but everything that is a parent belongs

00:42:10,200 --> 00:42:16,369
to it and so all the parents can be

00:42:13,410 --> 00:42:20,790
broken by introducing a breaking change

00:42:16,369 --> 00:42:23,790
the rest of the system cannot be

00:42:20,790 --> 00:42:26,670
influenced by a breaking change here and

00:42:23,790 --> 00:42:29,700
that means if we change something only

00:42:26,670 --> 00:42:32,160
here the only needs to read s this

00:42:29,700 --> 00:42:34,890
library and all its parents we don't

00:42:32,160 --> 00:42:37,530
need to read us the rest that means we

00:42:34,890 --> 00:42:39,329
can save a lot of time when it comes to

00:42:37,530 --> 00:42:42,540
retesting also when it comes to

00:42:39,329 --> 00:42:43,890
recombining because in theory the rest

00:42:42,540 --> 00:42:46,890
does not e

00:42:43,890 --> 00:42:49,200
needs to be recombined of course this

00:42:46,890 --> 00:42:51,779
fault experiment is quite easy in

00:42:49,200 --> 00:42:53,880
practice it's not that easy to find

00:42:51,779 --> 00:42:57,109
something like this out after

00:42:53,880 --> 00:42:59,880
programming a whole Bay on a feature and

00:42:57,109 --> 00:43:03,720
thanksfully and acts can help you with

00:42:59,880 --> 00:43:08,359
this to demonstrate you this feature let

00:43:03,720 --> 00:43:08,359
me get rid of all my changes

00:43:11,060 --> 00:43:18,090
and now let's introduce a major change

00:43:15,050 --> 00:43:21,420
within my catalog API

00:43:18,090 --> 00:43:25,340
let's move over to my catalogue API

00:43:21,420 --> 00:43:30,050
module and now I'm doing a major change

00:43:25,340 --> 00:43:32,460
if you seen it's this series my major

00:43:30,050 --> 00:43:36,589
change

00:43:32,460 --> 00:43:42,890
and now let's go to the console and run

00:43:36,589 --> 00:43:42,890
effect that effect that tap graph

00:43:43,540 --> 00:43:50,080
and an axe is now looking into Meg its

00:43:46,750 --> 00:43:52,720
history it is doing some static analysis

00:43:50,080 --> 00:43:55,660
of my application and it clearly shows

00:43:52,720 --> 00:43:58,860
me what can be affected by a change in

00:43:55,660 --> 00:44:01,900
the catalog API eval it can be this

00:43:58,860 --> 00:44:04,840
library here my future library my

00:44:01,900 --> 00:44:09,160
deployments monolith and of course the

00:44:04,840 --> 00:44:11,790
end-to-end testing see if I just display

00:44:09,160 --> 00:44:11,790
everything

00:44:11,800 --> 00:44:17,290
here we see just by looking at the

00:44:14,380 --> 00:44:20,050
colors the rest of the system cannot be

00:44:17,290 --> 00:44:22,960
affected and that means the rest of the

00:44:20,050 --> 00:44:27,490
system does not need to get retested or

00:44:22,960 --> 00:44:31,120
recover and for this we have also some

00:44:27,490 --> 00:44:34,360
nice and BAM scripts in here let me do

00:44:31,120 --> 00:44:39,190
the console and let me open a new

00:44:34,360 --> 00:44:43,440
console here if we look at to our into

00:44:39,190 --> 00:44:47,470
our package Jason we see for instance

00:44:43,440 --> 00:44:50,680
that we have a script called effect a

00:44:47,470 --> 00:44:53,500
test it is just executing their unit

00:44:50,680 --> 00:44:55,870
tests of the affected libraries the same

00:44:53,500 --> 00:44:59,470
is true for end-to-end tests using

00:44:55,870 --> 00:45:03,070
affected end to end and using affected

00:44:59,470 --> 00:45:06,280
build only the affected applications are

00:45:03,070 --> 00:45:10,119
rated that means if we had another

00:45:06,280 --> 00:45:12,999
application let's say

00:45:10,119 --> 00:45:16,240
we have this application here which is

00:45:12,999 --> 00:45:19,539
just using this library his library

00:45:16,240 --> 00:45:22,119
would not be rebuilt because it is not

00:45:19,539 --> 00:45:25,050
affected and also the application would

00:45:22,119 --> 00:45:29,040
not be read

00:45:25,050 --> 00:45:32,160
nice isn't it so I think that can save

00:45:29,040 --> 00:45:34,740
you a lot of time then knowing the modo

00:45:32,160 --> 00:45:37,260
repository perhaps you're saying now

00:45:34,740 --> 00:45:39,540
yeah that looks nice but somehow it

00:45:37,260 --> 00:45:42,720
looks overwhelming because we have all

00:45:39,540 --> 00:45:46,530
that libraries but saying this creating

00:45:42,720 --> 00:45:49,290
a new library is not that difficult just

00:45:46,530 --> 00:45:52,530
create a library instead of an NG module

00:45:49,290 --> 00:45:55,980
it is not a big difference if you type

00:45:52,530 --> 00:45:59,400
in an XI generate module or if you type

00:45:55,980 --> 00:46:02,040
in ng generate library for you it's

00:45:59,400 --> 00:46:04,110
about the same effort isn't it here I'm

00:46:02,040 --> 00:46:07,260
creating a feature which is called

00:46:04,110 --> 00:46:12,440
compare I want to compare two laptops

00:46:07,260 --> 00:46:15,330
and it is part of my directory or during

00:46:12,440 --> 00:46:16,660
authoring

00:46:15,330 --> 00:46:18,720
just press Enter

00:46:16,660 --> 00:46:22,530
[Music]

00:46:18,720 --> 00:46:25,770
yeah let's go through and yeah

00:46:22,530 --> 00:46:30,119
everything is generated for me my and

00:46:25,770 --> 00:46:32,339
she module is generated my index tester

00:46:30,119 --> 00:46:35,910
is it here it is is generated for me

00:46:32,339 --> 00:46:38,900
that means to have a public API and all

00:46:35,910 --> 00:46:42,359
the rest and if we look to our

00:46:38,900 --> 00:46:46,750
application I need to press escape to

00:46:42,359 --> 00:46:49,710
come back here to this mode

00:46:46,750 --> 00:46:49,710
NVC

00:46:49,760 --> 00:46:55,970
they had my catalog now should have a

00:46:54,170 --> 00:46:58,400
new feature no not the catalog the

00:46:55,970 --> 00:47:01,850
ordering domain helped a new feature

00:46:58,400 --> 00:47:05,240
which is called compare nice isn't it a

00:47:01,850 --> 00:47:08,850
full-fledged library I can now fill with

00:47:05,240 --> 00:47:14,480
Dellucci for my future

00:47:08,850 --> 00:47:17,090
okay so let's get back to this line

00:47:14,480 --> 00:47:19,970
we have seen we have a lot of

00:47:17,090 --> 00:47:22,580
fine-grained libraries and that's for

00:47:19,970 --> 00:47:25,460
the better because the library is the

00:47:22,580 --> 00:47:28,490
unit of recompilation and the unit of

00:47:25,460 --> 00:47:30,950
retesting they pursue a lot of time we

00:47:28,490 --> 00:47:33,430
can introduce fine-grain access

00:47:30,950 --> 00:47:36,380
restrictions we have information hiding

00:47:33,430 --> 00:47:40,070
because each and every library has this

00:47:36,380 --> 00:47:42,560
index yes exposing everything for other

00:47:40,070 --> 00:47:45,680
libraries the rest is part of your

00:47:42,560 --> 00:47:48,320
secrets and as mentioned it is good to

00:47:45,680 --> 00:47:51,920
have cigarettes and this might be a good

00:47:48,320 --> 00:47:54,560
alternative for ng modules if you have

00:47:51,920 --> 00:47:57,230
seen my talk from yesterday then you

00:47:54,560 --> 00:48:01,340
know that ng modules might become

00:47:57,230 --> 00:48:04,370
optional in the future and what's better

00:48:01,340 --> 00:48:07,730
than using a platform feature instead of

00:48:04,370 --> 00:48:11,510
an ng module a library a barrel with an

00:48:07,730 --> 00:48:14,570
index the as far and as mentioned ng

00:48:11,510 --> 00:48:17,340
generate library is as easy as writing

00:48:14,570 --> 00:48:21,330
and she generated much

00:48:17,340 --> 00:48:23,820
okay so much for the strategic design we

00:48:21,330 --> 00:48:27,000
have seen how to subdivide the

00:48:23,820 --> 00:48:30,870
application into layers and in columns

00:48:27,000 --> 00:48:34,170
and we have seen how to define access

00:48:30,870 --> 00:48:37,920
restrictions now I want to present you

00:48:34,170 --> 00:48:41,370
bomb design pattern out of the area of

00:48:37,920 --> 00:48:44,490
tactical design that proved to be handy

00:48:41,370 --> 00:48:47,850
and that is quite famous in the world of

00:48:44,490 --> 00:48:48,320
angular since about a year about a year

00:48:47,850 --> 00:48:52,470
ago

00:48:48,320 --> 00:48:56,520
Thomas Burleson proposed the idea of

00:48:52,470 --> 00:49:01,050
deficit for hiding details of your of

00:48:56,520 --> 00:49:04,770
your state management and he also did a

00:49:01,050 --> 00:49:08,040
talk last year here on and she comes you

00:49:04,770 --> 00:49:10,830
can check out this talk on YouTube for

00:49:08,040 --> 00:49:13,140
instance and that's why I'm calling this

00:49:10,830 --> 00:49:15,690
kind of fess 8 the Pearl is enforce 8

00:49:13,140 --> 00:49:18,990
you know when it comes to Star Trek we

00:49:15,690 --> 00:49:21,810
have that Jefferies tube here in Angola

00:49:18,990 --> 00:49:24,420
we have now Burleson for six and a

00:49:21,810 --> 00:49:27,410
Burleson phosphate is at the end of the

00:49:24,420 --> 00:49:30,450
day a simple idea which brings you a lot

00:49:27,410 --> 00:49:33,180
just think about your domain library

00:49:30,450 --> 00:49:37,350
your domain library consists of a lot of

00:49:33,180 --> 00:49:40,800
stuff a lot of alien sites let's say

00:49:37,350 --> 00:49:44,310
models like products and others we have

00:49:40,800 --> 00:49:46,560
some logic in here for instance logic to

00:49:44,310 --> 00:49:50,070
validate in order we have some data

00:49:46,560 --> 00:49:52,980
access services now if you write a

00:49:50,070 --> 00:49:56,070
feature component a smart component for

00:49:52,980 --> 00:49:59,490
a use case the author of this component

00:49:56,070 --> 00:50:02,760
will say oh my I have to concentrate on

00:49:59,490 --> 00:50:04,860
all of this and all of these details I

00:50:02,760 --> 00:50:07,200
don't want to know all those details I

00:50:04,860 --> 00:50:10,530
just want to know what I need for my

00:50:07,200 --> 00:50:13,770
feature and so the idea is to introduce

00:50:10,530 --> 00:50:16,860
a facet which shields the details of the

00:50:13,770 --> 00:50:20,189
domain which just exposes everything you

00:50:16,860 --> 00:50:24,009
need for just one use case

00:50:20,189 --> 00:50:26,400
it's for seed is just a service it can

00:50:24,009 --> 00:50:28,559
hold some state

00:50:26,400 --> 00:50:31,319
it's here is the state it has a

00:50:28,559 --> 00:50:33,539
constructor which gets hold of their

00:50:31,319 --> 00:50:36,390
other stuff by means of dependency

00:50:33,539 --> 00:50:40,680
injection and it provides some methods

00:50:36,390 --> 00:50:44,430
for your use case of course it would be

00:50:40,680 --> 00:50:47,900
a nice idea to not make angular to pull

00:50:44,430 --> 00:50:51,480
the state so please use observable see

00:50:47,900 --> 00:50:53,549
observables are also the key for

00:50:51,480 --> 00:50:56,430
messaging between parts of your

00:50:53,549 --> 00:50:59,099
application but now the big question is

00:50:56,430 --> 00:51:01,920
where does those observable come from

00:50:59,099 --> 00:51:04,230
and the very simple answer is this

00:51:01,920 --> 00:51:06,960
observable comes from and behavior

00:51:04,230 --> 00:51:09,779
subject this is the simplest way to

00:51:06,960 --> 00:51:12,480
provide an observable for a state

00:51:09,779 --> 00:51:15,150
management and sometimes using a

00:51:12,480 --> 00:51:18,059
behavior subject is good enough because

00:51:15,150 --> 00:51:21,089
we don't want to over engineer our

00:51:18,059 --> 00:51:24,020
applications over engineering is as bad

00:51:21,089 --> 00:51:27,080
as under engineering if you ask me

00:51:24,020 --> 00:51:29,720
and perhaps this is just okay that means

00:51:27,080 --> 00:51:32,930
you have here your facets and each and

00:51:29,720 --> 00:51:37,580
every facet has one or several behavior

00:51:32,930 --> 00:51:41,240
subject exposed as let's say exposed as

00:51:37,580 --> 00:51:43,430
Elsa but perhaps sometimes you find out

00:51:41,240 --> 00:51:46,490
it's not a good idea to have all those

00:51:43,430 --> 00:51:49,310
distribute that behavior subjects

00:51:46,490 --> 00:51:52,610
especially if it looks like this if you

00:51:49,310 --> 00:51:54,800
have a lot of overlapping at least since

00:51:52,610 --> 00:51:57,590
Ghostbusters we know that overlapping

00:51:54,800 --> 00:52:00,440
are not a good idea if everyone is

00:51:57,590 --> 00:52:03,680
allowed to write every state we will

00:52:00,440 --> 00:52:06,680
have a lot of redundancies and a lot of

00:52:03,680 --> 00:52:09,260
inconsistencies and also we will end up

00:52:06,680 --> 00:52:11,930
with a lot of psychics and that's why a

00:52:09,260 --> 00:52:15,620
lot of smart people in been that stage

00:52:11,930 --> 00:52:18,860
management libraries like mg rx the good

00:52:15,620 --> 00:52:21,860
thing is with using FS 8 you can

00:52:18,860 --> 00:52:25,640
introduce the stage management library

00:52:21,860 --> 00:52:27,500
on-demand just squeeze it under your

00:52:25,640 --> 00:52:30,650
face eat the rest of the application

00:52:27,500 --> 00:52:32,570
beetle not notice because the rest of

00:52:30,650 --> 00:52:35,960
the application is just seeing your

00:52:32,570 --> 00:52:38,720
physique this is especially a good thing

00:52:35,960 --> 00:52:42,710
for all the people out there not knowing

00:52:38,720 --> 00:52:45,440
if they need insure axe if you know for

00:52:42,710 --> 00:52:46,940
sure that you need ensure axe go with it

00:52:45,440 --> 00:52:50,030
skip the Perseids

00:52:46,940 --> 00:52:52,250
just use enter X in this case and your

00:52:50,030 --> 00:52:55,370
axe with these actions and selectors

00:52:52,250 --> 00:52:58,550
will be you opposite but if you are not

00:52:55,370 --> 00:53:01,550
sure then I recommend you start tiny

00:52:58,550 --> 00:53:04,310
start not with an open engineered

00:53:01,550 --> 00:53:07,490
architectural start tiny with behavior

00:53:04,310 --> 00:53:10,810
sub check and refactor if you see you

00:53:07,490 --> 00:53:10,810
need something that's more

00:53:11,589 --> 00:53:18,519
okay until now all we have seen a lot of

00:53:15,009 --> 00:53:21,699
features implemented in our repository a

00:53:18,519 --> 00:53:25,479
lot of features that go conform with

00:53:21,699 --> 00:53:28,479
ideas of domain driven design perhaps

00:53:25,479 --> 00:53:31,390
you're saying well it's nice but I have

00:53:28,479 --> 00:53:33,880
to do a lot of steps by hand I have to

00:53:31,390 --> 00:53:36,819
create force aids by hand I have to

00:53:33,880 --> 00:53:39,430
create models by hand I have to create

00:53:36,819 --> 00:53:42,910
all my libraries by hand as well as

00:53:39,430 --> 00:53:45,579
access restrictions and guess what this

00:53:42,910 --> 00:53:48,670
all can be automated there is a new

00:53:45,579 --> 00:53:51,339
feature called and acts plugins and you

00:53:48,670 --> 00:53:55,349
can automate everything I've showed you

00:53:51,339 --> 00:53:58,689
using a plug-in those plugins used

00:53:55,349 --> 00:54:02,170
features from the angular CLI like

00:53:58,689 --> 00:54:05,579
schematics or builders and I exactly did

00:54:02,170 --> 00:54:08,799
that I created an annex plug-in called

00:54:05,579 --> 00:54:11,739
BDD for domain driven design the full

00:54:08,799 --> 00:54:14,319
name is angular architects TDT and it

00:54:11,739 --> 00:54:17,589
just generates everything I have showed

00:54:14,319 --> 00:54:21,239
you in this let me give you a tiny

00:54:17,589 --> 00:54:26,049
example for this let me come out of my

00:54:21,239 --> 00:54:32,920
presentation and let me move into my

00:54:26,049 --> 00:54:38,410
exam so to get this plug-in just call

00:54:32,920 --> 00:54:41,229
and she at Angola architects slash TDD

00:54:38,410 --> 00:54:43,359
this will install everything for you I

00:54:41,229 --> 00:54:46,839
have already prepared for this that

00:54:43,359 --> 00:54:49,059
means I have already installed it after

00:54:46,839 --> 00:54:52,059
that you can say and she generate and

00:54:49,059 --> 00:54:55,299
then you go on not with component or

00:54:52,059 --> 00:54:59,289
with service or with module or with live

00:54:55,299 --> 00:55:02,529
reno you go on with angola architects

00:54:59,289 --> 00:55:07,349
slash TDD domain and now I would say

00:55:02,529 --> 00:55:07,349
let's create a approval domain

00:55:10,799 --> 00:55:19,140
and two main approval cannot find

00:55:14,099 --> 00:55:25,619
Marshall something vans wrong here I am

00:55:19,140 --> 00:55:28,729
very sorry so let's just and she at this

00:55:25,619 --> 00:55:28,729
library again

00:55:29,730 --> 00:55:31,790
you

00:55:34,950 --> 00:55:37,010
you

00:55:38,280 --> 00:55:42,889
earth goes down

00:55:39,810 --> 00:55:42,889
[Music]

00:55:44,630 --> 00:55:46,690
you

00:55:49,760 --> 00:55:53,080
Charleston seconds

00:55:53,590 --> 00:55:59,920
okay I let this run in the background if

00:55:56,650 --> 00:56:02,290
we have some time left and I will show

00:55:59,920 --> 00:56:05,290
it you but what I wanted to show you is

00:56:02,290 --> 00:56:08,860
at the end of the day you need one

00:56:05,290 --> 00:56:11,200
comment for in you domain and you need

00:56:08,860 --> 00:56:13,720
another comment for a feature and that's

00:56:11,200 --> 00:56:16,570
it it generates everything for you

00:56:13,720 --> 00:56:19,180
especially the access restrictions the

00:56:16,570 --> 00:56:23,140
libraries some COBOL and some phosphates

00:56:19,180 --> 00:56:25,810
and so on and so forth okay it seems

00:56:23,140 --> 00:56:26,620
like it was installed so let's keep it

00:56:25,810 --> 00:56:30,310
another try

00:56:26,620 --> 00:56:33,340
and she generate angle aha cadets to me

00:56:30,310 --> 00:56:36,280
intro a design domain yeah he said

00:56:33,340 --> 00:56:39,550
everything is generated for you as you

00:56:36,280 --> 00:56:42,820
see here you are module for you a domain

00:56:39,550 --> 00:56:47,430
also some tax within your and exchange

00:56:42,820 --> 00:56:47,430
and now let's go on with a future

00:56:48,250 --> 00:56:55,780
future let's call the feature manage

00:56:52,780 --> 00:56:55,780
requests

00:56:55,800 --> 00:57:03,520
and this is part of the approval domain

00:56:58,760 --> 00:57:06,660
I'm using the entity request

00:57:03,520 --> 00:57:09,910
and the application is my deployments

00:57:06,660 --> 00:57:14,150
monolids just let me double check I want

00:57:09,910 --> 00:57:16,940
to create a feature manage request

00:57:14,150 --> 00:57:19,880
and one more time hopefully let's cross

00:57:16,940 --> 00:57:23,599
fingers everything is generated for you

00:57:19,880 --> 00:57:26,329
now the feature library is generated as

00:57:23,599 --> 00:57:30,319
you see here with a module with an index

00:57:26,329 --> 00:57:33,710
to s you have a facet generated you have

00:57:30,319 --> 00:57:37,099
even some components generated a request

00:57:33,710 --> 00:57:39,260
entity as well as a data service and all

00:57:37,099 --> 00:57:41,660
the access restrictions with India's

00:57:39,260 --> 00:57:44,720
complicated but because it's that much

00:57:41,660 --> 00:57:48,380
fun let's create another feature let's

00:57:44,720 --> 00:57:50,360
call it request budget

00:57:48,380 --> 00:57:55,630
you

00:57:50,360 --> 00:57:55,630
is this about that but shirt requests

00:57:59,260 --> 00:58:06,640
and just give us some seconds Wow

00:58:03,330 --> 00:58:09,490
second features also created now let's

00:58:06,640 --> 00:58:12,760
for the last time of today FEM the rate

00:58:09,490 --> 00:58:15,880
at the ban and see growth let's go a

00:58:12,760 --> 00:58:20,150
baby if this command and let's run NBN

00:58:15,880 --> 00:58:23,289
run graph and then run that graph

00:58:20,150 --> 00:58:23,289
[Music]

00:58:25,900 --> 00:58:34,089
and well look at that beauty we have our

00:58:30,609 --> 00:58:37,799
own domain with two features and our two

00:58:34,089 --> 00:58:41,920
main library everything is just in bliss

00:58:37,799 --> 00:58:44,770
okay saying this this is open source you

00:58:41,920 --> 00:58:48,130
can also download it and modify it so

00:58:44,770 --> 00:58:50,650
that it fits more for unit if you like

00:58:48,130 --> 00:58:53,020
this dog perhaps you'll like my free

00:58:50,650 --> 00:58:57,130
ebook you can download it here at

00:58:53,020 --> 00:58:59,170
angular architects io / book it consists

00:58:57,130 --> 00:59:02,160
all those topics and some additional

00:58:59,170 --> 00:59:06,369
topics like micro thrombus

00:59:02,160 --> 00:59:08,890
just check it out if you like it and if

00:59:06,369 --> 00:59:11,799
you like it drop me an email if you have

00:59:08,890 --> 00:59:14,529
some feedback also drop me and in it

00:59:11,799 --> 00:59:17,140
okay we've seen several things today

00:59:14,529 --> 00:59:19,720
we've seen that slicing a big

00:59:17,140 --> 00:59:23,470
application into subdomains is a good

00:59:19,720 --> 00:59:26,559
idea also that slicing it into layers is

00:59:23,470 --> 00:59:28,779
secret that brings this matrix that

00:59:26,559 --> 00:59:31,210
assures that not everything is in the

00:59:28,779 --> 00:59:34,059
mingling with everything else we end up

00:59:31,210 --> 00:59:37,510
having fine-grained libraries and so we

00:59:34,059 --> 00:59:39,760
can enforce access respects also give an

00:59:37,510 --> 00:59:43,839
X plug ins you can automate all the

00:59:39,760 --> 00:59:46,930
stuff to not make it too boring to

00:59:43,839 --> 00:59:50,109
automate stuff you need all the time and

00:59:46,930 --> 00:59:53,170
there is a last thing and I always want

00:59:50,109 --> 00:59:55,930
you to remember this very last thing it

00:59:53,170 --> 00:59:58,359
is very important for me if you forget

00:59:55,930 --> 01:00:01,799
everything please keep this one last

00:59:58,359 --> 01:00:01,799
thing in mind namely

01:00:01,830 --> 01:00:07,200
you can accelerate your software

01:00:04,980 --> 01:00:10,380
architecture process with coffee bean

01:00:07,200 --> 01:00:13,110
and pizza and I really recommend you

01:00:10,380 --> 01:00:15,870
know it the pizza blob in Sierra which

01:00:13,110 --> 01:00:18,930
is the pizza with corn and paint on it I

01:00:15,870 --> 01:00:20,940
only made good experiences with it so

01:00:18,930 --> 01:00:22,950
thanks for having me it was really a

01:00:20,940 --> 01:00:25,530
pleasure to be part of this conference

01:00:22,950 --> 01:00:28,470
till you have my contact data you'll

01:00:25,530 --> 01:00:31,020
find all my slides in my blog and if you

01:00:28,470 --> 01:00:33,380
want follow me on Twitter so that we can

01:00:31,020 --> 01:00:33,380
eat

01:00:35,150 --> 01:00:41,260
[Applause]

01:00:35,470 --> 01:00:44,650
[Music]

01:00:41,260 --> 01:00:46,710
[Applause]

01:00:44,650 --> 01:00:46,710

YouTube URL: https://www.youtube.com/watch?v=N1JZNHep8YQ


