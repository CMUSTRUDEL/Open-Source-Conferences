Title: Common Challenges Facing Angular Enterprises | Stephen Fluin | ng-conf: Hardwired
Publication date: 2020-07-19
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

There are common challenges facing Angular teams who are buliding applicaitons at scale. In this talk Iâ€™ll demystify these questions, and start sharing what we know, and what we need your help with.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,119 --> 00:00:19,760
hello everyone uh

00:00:18,240 --> 00:00:21,760
as aaron said my name is steven fluin

00:00:19,760 --> 00:00:22,880
and i lead developer relations for the

00:00:21,760 --> 00:00:25,279
angular team

00:00:22,880 --> 00:00:26,720
uh we did a lot of prep for this talk

00:00:25,279 --> 00:00:28,240
because one of my favorite things to do

00:00:26,720 --> 00:00:29,599
is to reflect all the things that i'm

00:00:28,240 --> 00:00:30,160
hearing when i have all these great

00:00:29,599 --> 00:00:31,840
conversations

00:00:30,160 --> 00:00:34,320
with people from across the whole

00:00:31,840 --> 00:00:36,239
ecosystem is i want to reflect those

00:00:34,320 --> 00:00:37,680
back to the community so you actually

00:00:36,239 --> 00:00:39,120
know what other people are thinking and

00:00:37,680 --> 00:00:39,600
dealing with and what the challenges are

00:00:39,120 --> 00:00:40,879
because

00:00:39,600 --> 00:00:42,800
a lot of the things that we're each

00:00:40,879 --> 00:00:45,280
seeing are shared across

00:00:42,800 --> 00:00:46,480
all of us and so it's a really really

00:00:45,280 --> 00:00:49,039
good opportunity to do this

00:00:46,480 --> 00:00:50,559
and it's a very unique medium i heard

00:00:49,039 --> 00:00:52,000
from aaron that there's a ton of people

00:00:50,559 --> 00:00:53,840
on the livestream so

00:00:52,000 --> 00:00:55,920
i'm really glad to actually be here as

00:00:53,840 --> 00:00:56,719
part of the prep i did a few things so

00:00:55,920 --> 00:00:57,920
first i

00:00:56,719 --> 00:00:59,520
considered what sort of background i

00:00:57,920 --> 00:01:00,480
should have whether i should be sitting

00:00:59,520 --> 00:01:02,079
on a beach

00:01:00,480 --> 00:01:04,400
whether i should be drifting through the

00:01:02,079 --> 00:01:05,840
stars but at the end of the day i

00:01:04,400 --> 00:01:07,840
thought let's just keep it enterprising

00:01:05,840 --> 00:01:10,240
let's keep it professional

00:01:07,840 --> 00:01:12,000
with just a simple background i also did

00:01:10,240 --> 00:01:13,360
one other piece of prep which was i put

00:01:12,000 --> 00:01:17,119
up a little bit of a sign

00:01:13,360 --> 00:01:19,680
in my office here super formal

00:01:17,119 --> 00:01:20,880
so that my son and wife don't walk in on

00:01:19,680 --> 00:01:22,640
me so hopefully that doesn't happen

00:01:20,880 --> 00:01:24,640
otherwise we might have one of those

00:01:22,640 --> 00:01:26,640
new situations where my wife is like

00:01:24,640 --> 00:01:30,000
scrambling to grab my son

00:01:26,640 --> 00:01:31,280
uh i have a confession i used to think i

00:01:30,000 --> 00:01:33,759
understood enterprises

00:01:31,280 --> 00:01:35,920
uh this was 10 years ago and i thought

00:01:33,759 --> 00:01:38,320
to be enterprisee you had to wear

00:01:35,920 --> 00:01:40,159
a suit and tie to work every day so this

00:01:38,320 --> 00:01:42,720
is a picture of me like 10 years ago

00:01:40,159 --> 00:01:43,600
uh i realized now how dumb i looked and

00:01:42,720 --> 00:01:46,159
how

00:01:43,600 --> 00:01:47,520
mismatched that was to the expectations

00:01:46,159 --> 00:01:49,520
that people have

00:01:47,520 --> 00:01:51,280
and how misaligned that is with the kind

00:01:49,520 --> 00:01:54,159
of modern technology space

00:01:51,280 --> 00:01:55,920
so i i'm trying to always kind of forget

00:01:54,159 --> 00:01:57,840
that past and move on

00:01:55,920 --> 00:01:59,840
uh so i have done a much better job

00:01:57,840 --> 00:02:00,399
since then in terms of learning to

00:01:59,840 --> 00:02:02,079
listen

00:02:00,399 --> 00:02:03,680
and so one of my my favorite things to

00:02:02,079 --> 00:02:05,680
do is to just uh

00:02:03,680 --> 00:02:08,080
listen and try and remove myself from

00:02:05,680 --> 00:02:09,119
every question i ask remove myself from

00:02:08,080 --> 00:02:10,959
when people are telling me things would

00:02:09,119 --> 00:02:11,440
be like stop being like no that's not

00:02:10,959 --> 00:02:12,400
right

00:02:11,440 --> 00:02:13,920
really trying to understand the

00:02:12,400 --> 00:02:14,480
perspectives that everyone brings with

00:02:13,920 --> 00:02:16,000
them

00:02:14,480 --> 00:02:17,520
uh and so i wanted to get one

00:02:16,000 --> 00:02:18,720
perspective on business which was i was

00:02:17,520 --> 00:02:19,360
going to put together a really great

00:02:18,720 --> 00:02:20,959
slide

00:02:19,360 --> 00:02:22,720
uh trying to integrate my son and the

00:02:20,959 --> 00:02:25,040
concept of business and so

00:02:22,720 --> 00:02:25,920
i did a search for business in my uh

00:02:25,040 --> 00:02:27,360
google photos

00:02:25,920 --> 00:02:28,879
and i got this really nice business

00:02:27,360 --> 00:02:29,520
photo so that's that's my son with a

00:02:28,879 --> 00:02:31,440
cane

00:02:29,520 --> 00:02:32,800
and that's as close as i came to a solid

00:02:31,440 --> 00:02:34,879
connection to the things we're talking

00:02:32,800 --> 00:02:36,400
about today

00:02:34,879 --> 00:02:38,640
so i actually gave a very similar talk

00:02:36,400 --> 00:02:40,080
to this one last year at ngconf it was

00:02:38,640 --> 00:02:41,760
called angular for enterprise

00:02:40,080 --> 00:02:43,519
and we covered a whole bunch of really

00:02:41,760 --> 00:02:44,640
really important topics that were top of

00:02:43,519 --> 00:02:47,920
mind for everyone

00:02:44,640 --> 00:02:49,519
uh out in the world so we covered things

00:02:47,920 --> 00:02:50,000
like mobile applications do i ship with

00:02:49,519 --> 00:02:52,000
ionic

00:02:50,000 --> 00:02:53,840
do i ship with other technologies how do

00:02:52,000 --> 00:02:55,519
we share components across teams how do

00:02:53,840 --> 00:02:57,120
i build a hybrid application

00:02:55,519 --> 00:02:58,800
what should i be doing about testing

00:02:57,120 --> 00:03:00,239
what should i be doing about pwas how do

00:02:58,800 --> 00:03:00,800
i ship experiments how do i stay up to

00:03:00,239 --> 00:03:03,760
date

00:03:00,800 --> 00:03:05,360
uh how do i deal with build time the the

00:03:03,760 --> 00:03:06,239
good news is because i already gave this

00:03:05,360 --> 00:03:08,159
talk last year

00:03:06,239 --> 00:03:09,599
we have solved all of those problems so

00:03:08,159 --> 00:03:10,879
no one's having any of those issues

00:03:09,599 --> 00:03:14,239
anymore

00:03:10,879 --> 00:03:15,680
yeah i know that's not quite the case

00:03:14,239 --> 00:03:17,120
but what we end up seeing is that even

00:03:15,680 --> 00:03:18,400
though lots of people are still working

00:03:17,120 --> 00:03:19,920
on those issues those are still big

00:03:18,400 --> 00:03:21,840
issues across the ecosystem

00:03:19,920 --> 00:03:23,840
the pain points that we hear about over

00:03:21,840 --> 00:03:25,280
time tend to shift

00:03:23,840 --> 00:03:27,280
things that are still a challenge for

00:03:25,280 --> 00:03:29,360
some folks end up not coming up

00:03:27,280 --> 00:03:30,959
as often in conversations and we really

00:03:29,360 --> 00:03:32,560
see kind of two reasons for this the

00:03:30,959 --> 00:03:34,000
first is that there are new industry

00:03:32,560 --> 00:03:35,680
trends right the

00:03:34,000 --> 00:03:38,159
experiences that we're all delivering to

00:03:35,680 --> 00:03:39,920
our customers end up changing over time

00:03:38,159 --> 00:03:42,879
if you look at coronavirus and the

00:03:39,920 --> 00:03:45,200
current situation the global uh

00:03:42,879 --> 00:03:46,159
economy is in the way that businesses

00:03:45,200 --> 00:03:47,519
interact with their customers

00:03:46,159 --> 00:03:48,879
fundamentally changed

00:03:47,519 --> 00:03:50,239
and now that's changing the way that we

00:03:48,879 --> 00:03:51,360
build these applications and the types

00:03:50,239 --> 00:03:52,159
of experiences that we're trying to

00:03:51,360 --> 00:03:52,879
deliver

00:03:52,159 --> 00:03:54,239
and the other thing that ends up

00:03:52,879 --> 00:03:56,000
happening is that there's new technology

00:03:54,239 --> 00:03:56,400
trends so the technologies that we're

00:03:56,000 --> 00:03:58,000
using

00:03:56,400 --> 00:03:59,519
end up changing and evolving and getting

00:03:58,000 --> 00:04:00,080
better and the way that we use them ends

00:03:59,519 --> 00:04:02,480
up changing

00:04:00,080 --> 00:04:04,000
and so i wanted to give a fresh talk

00:04:02,480 --> 00:04:05,360
based on the conversations i've had over

00:04:04,000 --> 00:04:07,280
the last three months

00:04:05,360 --> 00:04:08,959
again about the top concerns that folks

00:04:07,280 --> 00:04:10,239
have brought to us which

00:04:08,959 --> 00:04:12,480
i'm actually a little bit surprised

00:04:10,239 --> 00:04:14,879
about some of these and so

00:04:12,480 --> 00:04:16,320
the number one tip that has come out of

00:04:14,879 --> 00:04:16,720
a lot of my enterprise conversations

00:04:16,320 --> 00:04:17,919
that

00:04:16,720 --> 00:04:20,000
this is really the only thing you need

00:04:17,919 --> 00:04:21,359
to remember about my talk uh is that if

00:04:20,000 --> 00:04:22,800
you want to do bundle

00:04:21,359 --> 00:04:24,000
analysis which you should be doing if

00:04:22,800 --> 00:04:24,800
you're trying to deliver great user

00:04:24,000 --> 00:04:26,160
experiences

00:04:24,800 --> 00:04:28,240
is use source map explorer there's a

00:04:26,160 --> 00:04:29,520
bunch of other tools like uh webpack has

00:04:28,240 --> 00:04:30,320
a bundle analyzer all those sort of

00:04:29,520 --> 00:04:32,320
things

00:04:30,320 --> 00:04:33,840
none of them do the job that you should

00:04:32,320 --> 00:04:35,120
be doing in terms of understanding what

00:04:33,840 --> 00:04:36,160
you're shipping out to production for

00:04:35,120 --> 00:04:37,840
your users

00:04:36,160 --> 00:04:39,280
and in enterprise conversations this was

00:04:37,840 --> 00:04:41,120
actually identified as one of the most

00:04:39,280 --> 00:04:43,040
valuable things they had learned

00:04:41,120 --> 00:04:45,840
and so make sure that you are using

00:04:43,040 --> 00:04:48,880
source map explorer

00:04:45,840 --> 00:04:50,000
so on to the more in-depth top five

00:04:48,880 --> 00:04:51,040
challenges that we've heard about from

00:04:50,000 --> 00:04:52,720
the ecosystem

00:04:51,040 --> 00:04:54,479
uh the first is something called

00:04:52,720 --> 00:04:56,720
microfrontends which

00:04:54,479 --> 00:04:58,320
the fact that i've heard this term for

00:04:56,720 --> 00:04:59,520
years but no one's ever talked about it

00:04:58,320 --> 00:05:00,800
no one's ever brought it up is really

00:04:59,520 --> 00:05:01,360
really interesting and so we'll dig into

00:05:00,800 --> 00:05:03,520
that

00:05:01,360 --> 00:05:05,120
uh server-side rendering is a big topic

00:05:03,520 --> 00:05:06,800
mono repositories and code sharing are

00:05:05,120 --> 00:05:08,320
something that keeps coming back up as

00:05:06,800 --> 00:05:09,440
really important things to understand

00:05:08,320 --> 00:05:11,199
and discuss

00:05:09,440 --> 00:05:12,960
we've got varied environments because i

00:05:11,199 --> 00:05:13,680
know that not every company and every

00:05:12,960 --> 00:05:15,840
team out there

00:05:13,680 --> 00:05:17,280
is able to exclusively dictate across

00:05:15,840 --> 00:05:19,199
the company or team

00:05:17,280 --> 00:05:20,400
that you're going to be using angular

00:05:19,199 --> 00:05:21,120
and then lastly we're going to talk

00:05:20,400 --> 00:05:23,039
about some of the business

00:05:21,120 --> 00:05:24,720
justifications trying to

00:05:23,039 --> 00:05:26,720
deal with some of the questions that we

00:05:24,720 --> 00:05:27,919
get from other people when we work with

00:05:26,720 --> 00:05:28,960
on teams

00:05:27,919 --> 00:05:30,639
so first we're going to start off

00:05:28,960 --> 00:05:32,720
talking about micro front ends and so

00:05:30,639 --> 00:05:34,639
micro front-ends are a really weird

00:05:32,720 --> 00:05:35,919
term and every time i talk to someone

00:05:34,639 --> 00:05:37,280
there they're using the term a little

00:05:35,919 --> 00:05:39,120
bit differently

00:05:37,280 --> 00:05:40,320
so whenever i talk about microphones i

00:05:39,120 --> 00:05:43,440
always ask what do you actually

00:05:40,320 --> 00:05:45,280
mean by that because it's a really cool

00:05:43,440 --> 00:05:46,880
concept that doesn't necessarily mean

00:05:45,280 --> 00:05:48,560
what we think it does in terms of

00:05:46,880 --> 00:05:50,240
angular and other technologies and so

00:05:48,560 --> 00:05:52,080
i want to kind of lay out what these

00:05:50,240 --> 00:05:55,440
applications tend to normally look like

00:05:52,080 --> 00:05:57,840
so if you build a default kind of naive

00:05:55,440 --> 00:05:58,960
angular application as a single page

00:05:57,840 --> 00:06:00,800
application you are going to have a

00:05:58,960 --> 00:06:01,440
browser that's going to load an angular

00:06:00,800 --> 00:06:03,280
application

00:06:01,440 --> 00:06:04,479
a single kind of monolithic thing that's

00:06:03,280 --> 00:06:05,840
going to have all the features

00:06:04,479 --> 00:06:08,080
visuals and capabilities of your

00:06:05,840 --> 00:06:09,759
application and if you're doing it

00:06:08,080 --> 00:06:11,440
a little bit better then you're going to

00:06:09,759 --> 00:06:12,720
be doing it a little bit more like this

00:06:11,440 --> 00:06:14,000
where you have a browser loading a

00:06:12,720 --> 00:06:15,280
smaller angular application and then

00:06:14,000 --> 00:06:16,639
angular application is going to be

00:06:15,280 --> 00:06:18,160
intelligently loading

00:06:16,639 --> 00:06:20,160
the features visuals and capabilities

00:06:18,160 --> 00:06:21,600
that it needs as the user

00:06:20,160 --> 00:06:22,800
navigates about the application based on

00:06:21,600 --> 00:06:25,520
what the user is actually doing and

00:06:22,800 --> 00:06:27,440
based on what they care about

00:06:25,520 --> 00:06:28,880
um i've tried to boil it down to the

00:06:27,440 --> 00:06:30,160
essential just in terms of

00:06:28,880 --> 00:06:31,039
separating the all the different

00:06:30,160 --> 00:06:32,720
definitions all the different

00:06:31,039 --> 00:06:35,360
implementations that people have

00:06:32,720 --> 00:06:37,039
for what a micro front end is for them

00:06:35,360 --> 00:06:39,199
into kind of three benefits that i think

00:06:37,039 --> 00:06:41,440
a lot of web developers are looking for

00:06:39,199 --> 00:06:42,960
first is fast initial load right we want

00:06:41,440 --> 00:06:43,840
great user experiences especially if

00:06:42,960 --> 00:06:45,199
we're building something like an

00:06:43,840 --> 00:06:47,199
e-commerce website

00:06:45,199 --> 00:06:49,039
we want seamless transitions so as i

00:06:47,199 --> 00:06:49,599
move from my product details page into

00:06:49,039 --> 00:06:51,199
the cart

00:06:49,599 --> 00:06:52,880
i want that to be fast instant i don't

00:06:51,199 --> 00:06:53,919
want anything getting in the way of that

00:06:52,880 --> 00:06:55,599
experience

00:06:53,919 --> 00:06:57,199
and then the last one is actually one of

00:06:55,599 --> 00:06:58,479
the tougher challenges in computer

00:06:57,199 --> 00:06:58,960
science in general web development in

00:06:58,479 --> 00:07:00,840
general

00:06:58,960 --> 00:07:02,000
which is this idea of independent

00:07:00,840 --> 00:07:03,520
deployability

00:07:02,000 --> 00:07:05,280
if we had a bunch of different single

00:07:03,520 --> 00:07:06,479
page applications across our app

00:07:05,280 --> 00:07:08,080
that would work fine right everyone

00:07:06,479 --> 00:07:09,440
could deploy themselves but when you

00:07:08,080 --> 00:07:11,440
start adding in those things like

00:07:09,440 --> 00:07:12,639
seamless transitions that becomes a much

00:07:11,440 --> 00:07:14,160
harder challenge

00:07:12,639 --> 00:07:15,919
and so let's actually talk about how we

00:07:14,160 --> 00:07:17,520
could answer some of those questions so

00:07:15,919 --> 00:07:18,880
on the fast load we actually have some

00:07:17,520 --> 00:07:20,560
really good answers so

00:07:18,880 --> 00:07:22,639
as we see with every single angular

00:07:20,560 --> 00:07:24,160
update and we saw from kara this morning

00:07:22,639 --> 00:07:25,759
if you just stay up to date with angular

00:07:24,160 --> 00:07:26,560
we are going to continue pushing the

00:07:25,759 --> 00:07:28,240
state of the art

00:07:26,560 --> 00:07:29,680
and make your bundle sizes smaller both

00:07:28,240 --> 00:07:30,800
in terms of the generated code in terms

00:07:29,680 --> 00:07:32,319
of the size of angular

00:07:30,800 --> 00:07:34,000
but also in terms of the tooling that we

00:07:32,319 --> 00:07:35,520
offer by things like the cli

00:07:34,000 --> 00:07:37,360
where we are always looking for new

00:07:35,520 --> 00:07:40,080
strategies new configurations

00:07:37,360 --> 00:07:41,199
that we can use to make your apps better

00:07:40,080 --> 00:07:42,000
without you having to change a single

00:07:41,199 --> 00:07:43,360
line of code

00:07:42,000 --> 00:07:45,360
one of the cooler experiments out there

00:07:43,360 --> 00:07:46,160
right now is actually adding a roll-up

00:07:45,360 --> 00:07:48,479
pass

00:07:46,160 --> 00:07:49,360
into the sequence of events that happen

00:07:48,479 --> 00:07:50,800
as part of the

00:07:49,360 --> 00:07:52,560
bundling or the build down leveling

00:07:50,800 --> 00:07:53,680
minification all those sorts of things

00:07:52,560 --> 00:07:55,120
uh it doesn't work for everyone yet

00:07:53,680 --> 00:07:56,720
that's why it's not default but there's

00:07:55,120 --> 00:07:58,080
a lot of cool innovations going on here

00:07:56,720 --> 00:07:58,800
and by staying up to date you're going

00:07:58,080 --> 00:08:01,520
to be getting

00:07:58,800 --> 00:08:02,879
to take advantage of all those benefits

00:08:01,520 --> 00:08:05,039
the other one that's really

00:08:02,879 --> 00:08:07,440
exciting and a lot of people are taking

00:08:05,039 --> 00:08:09,520
advantage of is server-side rendering

00:08:07,440 --> 00:08:10,800
because server-side rendering in some

00:08:09,520 --> 00:08:12,879
way whether that's a combination of

00:08:10,800 --> 00:08:14,479
pre-rendering or on request or some on

00:08:12,879 --> 00:08:16,720
request with caching

00:08:14,479 --> 00:08:17,599
is a great way to deliver better user

00:08:16,720 --> 00:08:19,360
experience

00:08:17,599 --> 00:08:21,039
especially in the perceived case where a

00:08:19,360 --> 00:08:22,720
user sees the products that they want to

00:08:21,039 --> 00:08:24,240
interact with faster

00:08:22,720 --> 00:08:26,080
and if you're server-side rendering

00:08:24,240 --> 00:08:27,599
every single page of application

00:08:26,080 --> 00:08:29,120
in a way if you're not bootstrapping the

00:08:27,599 --> 00:08:31,599
entire thing you are

00:08:29,120 --> 00:08:32,560
taking one step towards a micro front

00:08:31,599 --> 00:08:34,080
end right you've got

00:08:32,560 --> 00:08:35,680
simple html and a small angle

00:08:34,080 --> 00:08:37,200
application that just loads the parts of

00:08:35,680 --> 00:08:38,880
the app that you need to interact at

00:08:37,200 --> 00:08:40,479
that moment

00:08:38,880 --> 00:08:42,000
if we talk more about seamless

00:08:40,479 --> 00:08:43,120
transitions this is actually one of

00:08:42,000 --> 00:08:45,120
angular's strengths right

00:08:43,120 --> 00:08:46,880
if you contrast a normal angular

00:08:45,120 --> 00:08:48,480
application with a

00:08:46,880 --> 00:08:50,320
website where you have either a back-end

00:08:48,480 --> 00:08:52,560
rendering or a single-page application

00:08:50,320 --> 00:08:54,080
for every subset of features any other

00:08:52,560 --> 00:08:55,360
applications are very seamless

00:08:54,080 --> 00:08:56,800
especially in the way that we can

00:08:55,360 --> 00:08:57,839
transition between routes you can

00:08:56,800 --> 00:09:00,240
animate those things

00:08:57,839 --> 00:09:01,279
we really by taking control of the

00:09:00,240 --> 00:09:03,200
entire process

00:09:01,279 --> 00:09:05,440
we can do a lot of really really really

00:09:03,200 --> 00:09:07,519
cool things

00:09:05,440 --> 00:09:09,519
but when it comes to that third point

00:09:07,519 --> 00:09:11,120
that independent deployability

00:09:09,519 --> 00:09:13,279
that ends up becoming a fundamental

00:09:11,120 --> 00:09:13,760
issue because on the angular team at

00:09:13,279 --> 00:09:15,440
least

00:09:13,760 --> 00:09:17,360
we're pushing folks towards modern

00:09:15,440 --> 00:09:18,560
repositories because it solves a whole

00:09:17,360 --> 00:09:20,320
bunch of different problems

00:09:18,560 --> 00:09:21,680
from how do you test and how do you

00:09:20,320 --> 00:09:24,160
integrate all these different things

00:09:21,680 --> 00:09:25,839
because if i build an application and i

00:09:24,160 --> 00:09:28,240
want a subset of my application to be

00:09:25,839 --> 00:09:29,839
able to change it anytime

00:09:28,240 --> 00:09:31,519
then i then have to make guarantees i

00:09:29,839 --> 00:09:33,440
then have to make promises about

00:09:31,519 --> 00:09:34,560
how the subset that's changing and the

00:09:33,440 --> 00:09:36,240
rest of my application are going to

00:09:34,560 --> 00:09:38,240
continue working together

00:09:36,240 --> 00:09:40,480
so it's a really hard challenge to

00:09:38,240 --> 00:09:42,000
guarantee this api compatibility

00:09:40,480 --> 00:09:43,839
between a small subset of the

00:09:42,000 --> 00:09:46,080
application that you want to redeploy

00:09:43,839 --> 00:09:48,240
kind of live and you have to either find

00:09:46,080 --> 00:09:49,760
a way to subset the capabilities so you

00:09:48,240 --> 00:09:50,720
don't rely on everything anyone can do

00:09:49,760 --> 00:09:52,000
for example

00:09:50,720 --> 00:09:54,240
or you have to find a way to enforce

00:09:52,000 --> 00:09:54,880
those constraints and one of the things

00:09:54,240 --> 00:09:56,160
that

00:09:54,880 --> 00:09:57,839
is really exciting is when you have an

00:09:56,160 --> 00:09:59,279
intelligent build system you could

00:09:57,839 --> 00:10:00,959
theoretically know which parts of the

00:09:59,279 --> 00:10:03,040
application are changing and know

00:10:00,959 --> 00:10:04,399
hey even though i want to redeploy this

00:10:03,040 --> 00:10:05,760
subset of my application

00:10:04,399 --> 00:10:07,600
i know that i'm breaking the

00:10:05,760 --> 00:10:08,480
compatibility of the main layer of the

00:10:07,600 --> 00:10:10,000
main portal

00:10:08,480 --> 00:10:12,240
and so maybe we have to redeploy both of

00:10:10,000 --> 00:10:13,680
those you could independently create a

00:10:12,240 --> 00:10:15,440
intelligent chain

00:10:13,680 --> 00:10:17,680
so all of these are the challenges that

00:10:15,440 --> 00:10:19,600
are kind of fundamental to this concept

00:10:17,680 --> 00:10:20,880
but if you look at independent

00:10:19,600 --> 00:10:22,560
deployability we don't actually have a

00:10:20,880 --> 00:10:23,920
fantastic answer the answer today right

00:10:22,560 --> 00:10:25,920
now is use libraries

00:10:23,920 --> 00:10:27,839
so if you're trying to ship application

00:10:25,920 --> 00:10:29,760
functionality that you want to change

00:10:27,839 --> 00:10:31,600
uh you can do that you can ship that

00:10:29,760 --> 00:10:33,120
library onto a private npm you can ship

00:10:31,600 --> 00:10:35,040
that into a modern repository

00:10:33,120 --> 00:10:36,720
and you can change that library but then

00:10:35,040 --> 00:10:38,399
the application author still has to be

00:10:36,720 --> 00:10:39,760
the one redeploying everything so

00:10:38,399 --> 00:10:41,519
independent teams get a level of

00:10:39,760 --> 00:10:42,959
autonomy but there's still a

00:10:41,519 --> 00:10:45,440
central level of coordination that has

00:10:42,959 --> 00:10:46,720
to happen this is going to be changing

00:10:45,440 --> 00:10:48,640
in the future we hope

00:10:46,720 --> 00:10:51,279
so if you look towards tomorrow in the

00:10:48,640 --> 00:10:52,640
future iv and dynamic imports are going

00:10:51,279 --> 00:10:54,959
to be a huge part of this

00:10:52,640 --> 00:10:56,720
where as long as you can be guaranteeing

00:10:54,959 --> 00:10:58,000
the constraints and be guaranteeing the

00:10:56,720 --> 00:10:59,279
interaction between different parts of

00:10:58,000 --> 00:11:00,959
your application

00:10:59,279 --> 00:11:03,760
you can do things like dynamic imports

00:11:00,959 --> 00:11:05,279
where we can load code from the internet

00:11:03,760 --> 00:11:07,600
the big challenges there that we don't

00:11:05,279 --> 00:11:08,240
have today are that right now webpack

00:11:07,600 --> 00:11:09,600
for example

00:11:08,240 --> 00:11:11,040
in order to resolve those dynamic

00:11:09,600 --> 00:11:12,160
imports we have to know about everything

00:11:11,040 --> 00:11:13,519
at build time and so

00:11:12,160 --> 00:11:16,720
this is an area that we're actively

00:11:13,519 --> 00:11:20,240
looking into and we hear about a lot

00:11:16,720 --> 00:11:21,440
so the top second question that we get

00:11:20,240 --> 00:11:22,880
from enterprises and concern that has

00:11:21,440 --> 00:11:25,519
around server-side rendering because

00:11:22,880 --> 00:11:26,720
as we see that this is a lot of really

00:11:25,519 --> 00:11:27,760
good principles a lot of

00:11:26,720 --> 00:11:29,519
great ways to build great user

00:11:27,760 --> 00:11:30,320
experiences and i'm not going to talk

00:11:29,519 --> 00:11:32,399
about that at all

00:11:30,320 --> 00:11:34,320
minko on friday is going to be talking

00:11:32,399 --> 00:11:36,000
about that as part of a talk that he's

00:11:34,320 --> 00:11:38,959
giving on the broader state of universal

00:11:36,000 --> 00:11:41,200
server-side rendering and deployment

00:11:38,959 --> 00:11:42,320
the third issue that a lot of

00:11:41,200 --> 00:11:43,760
enterprises have brought up to us

00:11:42,320 --> 00:11:45,680
is this concept of modern repositories

00:11:43,760 --> 00:11:46,880
and code sharing because when we talk

00:11:45,680 --> 00:11:49,600
about how google does this

00:11:46,880 --> 00:11:50,480
it sounds really exciting but it's

00:11:49,600 --> 00:11:52,160
actually

00:11:50,480 --> 00:11:53,920
not that simple for a lot of teams and

00:11:52,160 --> 00:11:55,519
they see a lot of frustration and so

00:11:53,920 --> 00:11:57,040
i actually want to lay out the fact that

00:11:55,519 --> 00:11:58,399
it's a coordination problem

00:11:57,040 --> 00:11:58,720
fundamentally that we're trying to solve

00:11:58,399 --> 00:12:00,800
and

00:11:58,720 --> 00:12:02,079
you can solve it either way if you want

00:12:00,800 --> 00:12:04,399
to have a model repository

00:12:02,079 --> 00:12:07,600
that can help you solve this problem but

00:12:04,399 --> 00:12:09,120
then when you're doing a mono repository

00:12:07,600 --> 00:12:10,560
it solves the integration collaboration

00:12:09,120 --> 00:12:12,399
part but you actually have to worry

00:12:10,560 --> 00:12:14,160
about specificity and distribution

00:12:12,399 --> 00:12:15,440
whereas if you have many repositories

00:12:14,160 --> 00:12:16,639
you actually then have to be the one

00:12:15,440 --> 00:12:17,680
worrying about integration how do we

00:12:16,639 --> 00:12:18,800
make sure that everyone's using the same

00:12:17,680 --> 00:12:20,639
version of a library

00:12:18,800 --> 00:12:22,160
how do we resolve differences there how

00:12:20,639 --> 00:12:22,880
do we keep everyone moving forward

00:12:22,160 --> 00:12:23,920
together

00:12:22,880 --> 00:12:26,240
but then you don't have to worry about

00:12:23,920 --> 00:12:28,320
the specificity and distribution problem

00:12:26,240 --> 00:12:30,000
uh what i'll say is that it's definitely

00:12:28,320 --> 00:12:31,279
my perspective that tools and culture

00:12:30,000 --> 00:12:33,600
are easier to fix

00:12:31,279 --> 00:12:34,800
in the mono repository and i'll give a

00:12:33,600 --> 00:12:36,399
few examples of that so

00:12:34,800 --> 00:12:38,399
if you look at the angular angular

00:12:36,399 --> 00:12:39,920
repository on github

00:12:38,399 --> 00:12:41,360
we actually are trying to embody this

00:12:39,920 --> 00:12:42,639
idea of a mod repository so we have a

00:12:41,360 --> 00:12:44,320
packages folder with a bunch of

00:12:42,639 --> 00:12:46,160
different packages that are deployed

00:12:44,320 --> 00:12:48,000
to npm we have a third party folder

00:12:46,160 --> 00:12:49,760
where we're pulling in third-party code

00:12:48,000 --> 00:12:51,040
and github is continuing to get better

00:12:49,760 --> 00:12:52,639
and better at this

00:12:51,040 --> 00:12:54,480
in terms of its code search in terms of

00:12:52,639 --> 00:12:56,800
the ability to layout project structure

00:12:54,480 --> 00:12:57,519
even creating things like issue

00:12:56,800 --> 00:12:59,360
templates

00:12:57,519 --> 00:13:00,639
you can actually subset those into it

00:12:59,360 --> 00:13:01,760
and have multiple different options for

00:13:00,639 --> 00:13:03,040
issue templates and so

00:13:01,760 --> 00:13:04,959
this is a problem that's getting better

00:13:03,040 --> 00:13:06,399
and better if you're using bazel i would

00:13:04,959 --> 00:13:08,399
say that that is

00:13:06,399 --> 00:13:09,920
not necessarily needed if you're at a

00:13:08,399 --> 00:13:10,480
small or medium or even many large

00:13:09,920 --> 00:13:12,000
scales

00:13:10,480 --> 00:13:13,600
because you get up to extra large scales

00:13:12,000 --> 00:13:15,760
where you're moving past maybe

00:13:13,600 --> 00:13:17,200
50 libraries and applications and you

00:13:15,760 --> 00:13:19,200
start wanting to

00:13:17,200 --> 00:13:21,120
only rebuild the minimal subset that you

00:13:19,200 --> 00:13:22,160
need in order to build an application or

00:13:21,120 --> 00:13:23,839
build a library

00:13:22,160 --> 00:13:25,040
bazel can definitely help with that and

00:13:23,839 --> 00:13:26,800
there's even tools that like the angular

00:13:25,040 --> 00:13:28,399
team uses like pull approve to try and

00:13:26,800 --> 00:13:28,880
emulate some of the processes that you

00:13:28,399 --> 00:13:30,399
need

00:13:28,880 --> 00:13:32,399
that a little bit of overhead that you

00:13:30,399 --> 00:13:33,120
need in order to manage that specificity

00:13:32,399 --> 00:13:34,639
and manage

00:13:33,120 --> 00:13:36,160
hey who can control which parts of the

00:13:34,639 --> 00:13:39,279
repo who's involved in which parts of

00:13:36,160 --> 00:13:39,279
the mono repository

00:13:39,680 --> 00:13:43,040
so i want to introduce the concept of a

00:13:41,519 --> 00:13:44,000
viral monorepositor because this is one

00:13:43,040 --> 00:13:46,240
of the things that i see

00:13:44,000 --> 00:13:47,600
growing up all around the place so this

00:13:46,240 --> 00:13:48,959
is the concept that hey

00:13:47,600 --> 00:13:50,160
you want to use a modern repository you

00:13:48,959 --> 00:13:50,880
see the benefits you've heard us talk

00:13:50,160 --> 00:13:52,320
about it

00:13:50,880 --> 00:13:53,440
but you're like hey no one else on my

00:13:52,320 --> 00:13:54,079
team is going for it no one else in

00:13:53,440 --> 00:13:55,680
their company

00:13:54,079 --> 00:13:57,199
there's no company directive to go and

00:13:55,680 --> 00:13:58,160
build a model repository so what should

00:13:57,199 --> 00:13:59,920
i do

00:13:58,160 --> 00:14:02,160
and so the viral model repository starts

00:13:59,920 --> 00:14:03,440
like this you have a library team

00:14:02,160 --> 00:14:05,120
typically this is led by the library

00:14:03,440 --> 00:14:06,399
team but it doesn't have to be and they

00:14:05,120 --> 00:14:07,040
say to one of the applications that's

00:14:06,399 --> 00:14:09,279
using them

00:14:07,040 --> 00:14:11,279
hey why don't you check your application

00:14:09,279 --> 00:14:13,279
into our repository

00:14:11,279 --> 00:14:14,720
and the benefit to the application

00:14:13,279 --> 00:14:16,800
author by doing that

00:14:14,720 --> 00:14:18,720
is that they automatically get

00:14:16,800 --> 00:14:20,639
integration testing with the library

00:14:18,720 --> 00:14:22,639
they get synced and they get locked into

00:14:20,639 --> 00:14:24,880
place with the library so that both

00:14:22,639 --> 00:14:26,320
move forward together right you may

00:14:24,880 --> 00:14:27,199
change the library the integration test

00:14:26,320 --> 00:14:28,560
will immediately tell you if the

00:14:27,199 --> 00:14:30,000
application is incompatible

00:14:28,560 --> 00:14:31,680
and you can fix them both at the same

00:14:30,000 --> 00:14:32,880
time you can understand when changes are

00:14:31,680 --> 00:14:35,519
implicit or

00:14:32,880 --> 00:14:37,360
intentional and when they're exploit or

00:14:35,519 --> 00:14:38,880
implicit and accidental

00:14:37,360 --> 00:14:40,320
and this is really really powerful for

00:14:38,880 --> 00:14:41,600
the library it's valuable and then it

00:14:40,320 --> 00:14:43,440
also gives them better access to

00:14:41,600 --> 00:14:44,959
contributing back to the library

00:14:43,440 --> 00:14:46,320
which is something that's really really

00:14:44,959 --> 00:14:48,320
desirable is for everyone to be

00:14:46,320 --> 00:14:50,000
collaborating

00:14:48,320 --> 00:14:51,199
and then what happens is another

00:14:50,000 --> 00:14:52,560
application in your team or in your

00:14:51,199 --> 00:14:53,440
organization is going to see

00:14:52,560 --> 00:14:55,600
that you've done that they're going to

00:14:53,440 --> 00:14:56,800
say well i want those benefits too and

00:14:55,600 --> 00:14:58,079
so then they add themselves to the

00:14:56,800 --> 00:14:59,680
library now you've got two applications

00:14:58,079 --> 00:15:00,720
now you've got even better test coverage

00:14:59,680 --> 00:15:02,000
for the library

00:15:00,720 --> 00:15:04,000
and more cohesion between your

00:15:02,000 --> 00:15:07,920
applications and your ecosystem and so

00:15:04,000 --> 00:15:07,920
everything gets to move forward together

00:15:08,320 --> 00:15:13,440
so i apologize about the naming of viral

00:15:12,000 --> 00:15:16,000
repository it's probably not the best

00:15:13,440 --> 00:15:17,040
timing but if someone has a better name

00:15:16,000 --> 00:15:18,240
for it please

00:15:17,040 --> 00:15:20,480
shout at me on twitter and we'll

00:15:18,240 --> 00:15:21,680
definitely change my slides

00:15:20,480 --> 00:15:23,199
the fourth topic that i want to talk

00:15:21,680 --> 00:15:24,160
about from enterprises is varied

00:15:23,199 --> 00:15:26,320
environments

00:15:24,160 --> 00:15:28,160
because as i mentioned before we are not

00:15:26,320 --> 00:15:29,680
all using angular all the time

00:15:28,160 --> 00:15:32,399
and this can be a challenge for a lot of

00:15:29,680 --> 00:15:33,920
us if you reflect on how google works

00:15:32,399 --> 00:15:37,199
which is i think a really good model

00:15:33,920 --> 00:15:38,880
for agility and flexibility on teams

00:15:37,199 --> 00:15:40,560
oftentimes google is using great

00:15:38,880 --> 00:15:41,759
technology over fiat so we're not going

00:15:40,560 --> 00:15:43,120
across google's thing you have to do

00:15:41,759 --> 00:15:43,759
this you have to do this you have to do

00:15:43,120 --> 00:15:45,440
this right

00:15:43,759 --> 00:15:47,120
we try and build great infrastructure

00:15:45,440 --> 00:15:48,399
that teams want to use because it adds

00:15:47,120 --> 00:15:50,639
value to their lives

00:15:48,399 --> 00:15:52,480
so instead of pushing technology into

00:15:50,639 --> 00:15:53,600
people we're creating pull demand

00:15:52,480 --> 00:15:54,720
through great technology and there's a

00:15:53,600 --> 00:15:56,399
lot of good companies out there doing

00:15:54,720 --> 00:15:57,120
that one of my favorite examples that i

00:15:56,399 --> 00:16:00,079
always talk about

00:15:57,120 --> 00:16:00,720
is vmware with their clarity library and

00:16:00,079 --> 00:16:02,160
what

00:16:00,720 --> 00:16:04,160
google does is we give everyone very

00:16:02,160 --> 00:16:04,959
very high autonomy but at the same time

00:16:04,160 --> 00:16:07,680
we value

00:16:04,959 --> 00:16:08,320
that collaboration across different

00:16:07,680 --> 00:16:09,519
groups so

00:16:08,320 --> 00:16:11,759
even if you're using different

00:16:09,519 --> 00:16:14,480
technologies even if

00:16:11,759 --> 00:16:15,680
you have an infrastructure piece that is

00:16:14,480 --> 00:16:17,759
not shared across everyone

00:16:15,680 --> 00:16:18,880
collaborating across teams is super

00:16:17,759 --> 00:16:20,560
valuable

00:16:18,880 --> 00:16:22,720
but getting down to more specific

00:16:20,560 --> 00:16:24,560
answers varied environments

00:16:22,720 --> 00:16:26,240
end up being a big challenge right you

00:16:24,560 --> 00:16:26,560
have a team that's either using angular

00:16:26,240 --> 00:16:27,600
or

00:16:26,560 --> 00:16:29,279
for some reason they're not using

00:16:27,600 --> 00:16:30,800
angular and you want these teams to be

00:16:29,279 --> 00:16:32,160
able to work together collaborate

00:16:30,800 --> 00:16:34,240
even if you're not dictating what

00:16:32,160 --> 00:16:36,399
technology they should be using

00:16:34,240 --> 00:16:38,000
so i will say angular is fantastic at

00:16:36,399 --> 00:16:39,199
the orchestration layer if you look at a

00:16:38,000 --> 00:16:41,360
lot of the capabilities a lot of the

00:16:39,199 --> 00:16:43,279
mindsets that go into building angular

00:16:41,360 --> 00:16:44,800
we are focused on this idea of how does

00:16:43,279 --> 00:16:47,199
one part of the application updating

00:16:44,800 --> 00:16:48,720
inform another part of the application

00:16:47,199 --> 00:16:50,000
so these things can be kept in sync so

00:16:48,720 --> 00:16:53,120
that everything

00:16:50,000 --> 00:16:54,639
flows in a very logical direct way even

00:16:53,120 --> 00:16:56,480
through very different feature sets and

00:16:54,639 --> 00:16:57,759
very isolated feature sets

00:16:56,480 --> 00:16:59,600
but if you want to actually be sharing

00:16:57,759 --> 00:17:01,199
at a lower level uh we definitely have

00:16:59,600 --> 00:17:02,560
angular elements so you can create web

00:17:01,199 --> 00:17:03,680
components there's this great library

00:17:02,560 --> 00:17:05,760
out there from monfred

00:17:03,680 --> 00:17:07,679
called ngx build plus where you can ship

00:17:05,760 --> 00:17:08,160
either a bunch of web components that

00:17:07,679 --> 00:17:09,839
share

00:17:08,160 --> 00:17:12,400
a version of angular or independent web

00:17:09,839 --> 00:17:14,240
components kind of self bootstrap

00:17:12,400 --> 00:17:15,280
if you are starting to get into teams

00:17:14,240 --> 00:17:16,720
that are building their own custom

00:17:15,280 --> 00:17:17,280
elements and you want to start consuming

00:17:16,720 --> 00:17:19,280
those

00:17:17,280 --> 00:17:20,480
that can work really well for leaf nodes

00:17:19,280 --> 00:17:22,000
as well because

00:17:20,480 --> 00:17:23,600
angular has really great support for web

00:17:22,000 --> 00:17:24,959
components this is something that we're

00:17:23,600 --> 00:17:25,679
constantly looking at as the standards

00:17:24,959 --> 00:17:26,959
evolve we're actually trying to

00:17:25,679 --> 00:17:28,000
participate in a lot of those standards

00:17:26,959 --> 00:17:29,760
bodies

00:17:28,000 --> 00:17:31,360
but there's some feature gap there for

00:17:29,760 --> 00:17:33,280
example angular has directives where you

00:17:31,360 --> 00:17:34,480
can enrich existing elements with new

00:17:33,280 --> 00:17:35,600
functionality

00:17:34,480 --> 00:17:37,039
and this is a really powerful way

00:17:35,600 --> 00:17:37,919
because you can take components supplied

00:17:37,039 --> 00:17:39,200
by one team

00:17:37,919 --> 00:17:41,520
and add features and capabilities

00:17:39,200 --> 00:17:44,240
supplied by another team or how to

00:17:41,520 --> 00:17:46,240
take a component and add it into a drop

00:17:44,240 --> 00:17:48,080
a dialog box things like that so

00:17:46,240 --> 00:17:49,520
it's a very very powerful thing uh we

00:17:48,080 --> 00:17:50,960
also have things like form validation

00:17:49,520 --> 00:17:52,400
now this is some of these features are

00:17:50,960 --> 00:17:54,080
coming to the custom element specs so

00:17:52,400 --> 00:17:54,960
you now have form uh enrollment form

00:17:54,080 --> 00:17:56,480
participation

00:17:54,960 --> 00:17:58,720
but it doesn't seem have the same level

00:17:56,480 --> 00:18:00,480
of capabilities of angular

00:17:58,720 --> 00:18:01,760
and so always trying to consider where

00:18:00,480 --> 00:18:03,200
do we need compatibility and where

00:18:01,760 --> 00:18:04,480
should we be building and your wrappers

00:18:03,200 --> 00:18:06,320
for these components and those sorts of

00:18:04,480 --> 00:18:07,840
things

00:18:06,320 --> 00:18:09,360
one of the technologies that we we got a

00:18:07,840 --> 00:18:10,720
lot of questions about is this idea of

00:18:09,360 --> 00:18:12,160
constructable style sheets

00:18:10,720 --> 00:18:13,600
which is an emerging really exciting

00:18:12,160 --> 00:18:14,799
part of the standard where you can

00:18:13,600 --> 00:18:15,440
actually have a style sheet that can be

00:18:14,799 --> 00:18:17,200
adopted

00:18:15,440 --> 00:18:18,480
into multiple shadow roots so if you're

00:18:17,200 --> 00:18:19,280
using custom elements and you're using

00:18:18,480 --> 00:18:20,880
shadow roots

00:18:19,280 --> 00:18:22,480
one of the challenges you lose all the

00:18:20,880 --> 00:18:22,880
styles so you get perfect isolation but

00:18:22,480 --> 00:18:24,640
you get

00:18:22,880 --> 00:18:26,240
all you lose all of the shareability and

00:18:24,640 --> 00:18:27,280
all the composability of these large

00:18:26,240 --> 00:18:28,880
applications

00:18:27,280 --> 00:18:30,400
and custom style sheets look like they

00:18:28,880 --> 00:18:31,679
might be an answer to that

00:18:30,400 --> 00:18:33,360
right now they have limited browser

00:18:31,679 --> 00:18:34,799
support but this is a really exciting

00:18:33,360 --> 00:18:36,640
new technology that we're spending a lot

00:18:34,799 --> 00:18:38,160
of time thinking about

00:18:36,640 --> 00:18:40,240
as jeremy talked about earlier in his

00:18:38,160 --> 00:18:41,919
talk sas mixins and css variables

00:18:40,240 --> 00:18:43,440
end up being some of the better answers

00:18:41,919 --> 00:18:45,520
for collaboration uh

00:18:43,440 --> 00:18:47,039
in this space so mixins can really

00:18:45,520 --> 00:18:48,000
easily add stylistic functionality

00:18:47,039 --> 00:18:49,039
across your application for

00:18:48,000 --> 00:18:50,320
standardization

00:18:49,039 --> 00:18:52,640
and you can accomplish some of those

00:18:50,320 --> 00:18:55,360
same things with css

00:18:52,640 --> 00:18:56,799
variables or custom properties if if you

00:18:55,360 --> 00:18:59,840
don't require browser support

00:18:56,799 --> 00:19:01,520
angular does not use css properties or

00:18:59,840 --> 00:19:02,880
really extensively because it doesn't

00:19:01,520 --> 00:19:05,120
have complete browser support

00:19:02,880 --> 00:19:06,640
um natively and you have to do polyfills

00:19:05,120 --> 00:19:08,400
and that affects performance and things

00:19:06,640 --> 00:19:10,240
like that

00:19:08,400 --> 00:19:11,760
all right our last section here business

00:19:10,240 --> 00:19:13,120
justification so i just want to go

00:19:11,760 --> 00:19:14,799
through a couple of the

00:19:13,120 --> 00:19:16,480
major things that you can do to help

00:19:14,799 --> 00:19:18,799
talk to others in your organization

00:19:16,480 --> 00:19:20,400
about angular uh one of the hardest

00:19:18,799 --> 00:19:21,679
things that teams used to have

00:19:20,400 --> 00:19:23,520
was staying up to date we still hear

00:19:21,679 --> 00:19:24,960
teams that find it difficult to

00:19:23,520 --> 00:19:26,320
justify to business stakeholders who

00:19:24,960 --> 00:19:27,360
don't really understand the technology

00:19:26,320 --> 00:19:28,960
staying up to date

00:19:27,360 --> 00:19:30,640
but you can talk about the one version

00:19:28,960 --> 00:19:32,640
policy google has

00:19:30,640 --> 00:19:34,799
and really focus on the idea of things

00:19:32,640 --> 00:19:36,720
like agility security performance

00:19:34,799 --> 00:19:38,000
uh staying up to date is absolutely the

00:19:36,720 --> 00:19:40,240
recommended path by the angular team

00:19:38,000 --> 00:19:41,440
we offer a long-term support for older

00:19:40,240 --> 00:19:44,000
versions

00:19:41,440 --> 00:19:45,120
but we expect most teams to stay up to

00:19:44,000 --> 00:19:47,120
date and if you look around the

00:19:45,120 --> 00:19:48,000
ecosystem most people are doing it jules

00:19:47,120 --> 00:19:50,240
shared that

00:19:48,000 --> 00:19:51,120
as of the eve of version 9 most teams

00:19:50,240 --> 00:19:53,360
were on version 8

00:19:51,120 --> 00:19:54,480
as far as we could tell and so i think

00:19:53,360 --> 00:19:57,280
we're being very successful at making

00:19:54,480 --> 00:19:58,320
that path very very simple for teams

00:19:57,280 --> 00:20:00,000
the other thing that was really

00:19:58,320 --> 00:20:00,400
interesting in talking to enterprises

00:20:00,000 --> 00:20:03,200
this

00:20:00,400 --> 00:20:04,720
quarter was talking about this idea of

00:20:03,200 --> 00:20:06,960
usage tracking where if you are a

00:20:04,720 --> 00:20:09,039
library author uh you can actually

00:20:06,960 --> 00:20:10,480
track across your code repository if

00:20:09,039 --> 00:20:11,679
you're moving towards a mono repository

00:20:10,480 --> 00:20:12,799
or if you have kind of open source

00:20:11,679 --> 00:20:14,559
within your team

00:20:12,799 --> 00:20:15,919
you can track usage of your components

00:20:14,559 --> 00:20:16,960
you can analyze those sorts of things

00:20:15,919 --> 00:20:18,480
and there's some teams out there that

00:20:16,960 --> 00:20:21,760
are working on tooling

00:20:18,480 --> 00:20:23,440
to actually allow you to do that but

00:20:21,760 --> 00:20:24,720
the idea here is that if you understand

00:20:23,440 --> 00:20:25,760
how your components are being used and

00:20:24,720 --> 00:20:26,960
where they're being used you can

00:20:25,760 --> 00:20:28,400
actually make sure you're investing in

00:20:26,960 --> 00:20:29,679
the most used components

00:20:28,400 --> 00:20:31,360
uh you can use it to understand your

00:20:29,679 --> 00:20:32,320
customers you can say hey why is

00:20:31,360 --> 00:20:34,240
everybody using this

00:20:32,320 --> 00:20:35,440
this uh weird date range picker that we

00:20:34,240 --> 00:20:36,720
made as a one-off

00:20:35,440 --> 00:20:38,559
most people shouldn't be using that so

00:20:36,720 --> 00:20:40,000
there's a problem there and you can

00:20:38,559 --> 00:20:41,520
actually do take it further

00:20:40,000 --> 00:20:43,120
to the extent of we saw one company

00:20:41,520 --> 00:20:44,000
actually quantifying the value of their

00:20:43,120 --> 00:20:45,919
shared code

00:20:44,000 --> 00:20:47,520
and so with every release of their

00:20:45,919 --> 00:20:49,200
shared library they were saying

00:20:47,520 --> 00:20:51,440
this is how many applications we just

00:20:49,200 --> 00:20:52,880
helped to stay up to date to stay secure

00:20:51,440 --> 00:20:53,600
to stay performant to stay with the best

00:20:52,880 --> 00:20:54,960
experience

00:20:53,600 --> 00:20:56,240
and they translate that into dollars and

00:20:54,960 --> 00:20:57,200
i just thought that was a really really

00:20:56,240 --> 00:20:58,960
cool concept

00:20:57,200 --> 00:21:00,720
of translating component usage and

00:20:58,960 --> 00:21:03,760
release dates into

00:21:00,720 --> 00:21:04,320
actual value for the business so just to

00:21:03,760 --> 00:21:07,120
end up

00:21:04,320 --> 00:21:08,080
if uh these challenges uh it didn't make

00:21:07,120 --> 00:21:09,200
sense to you if you're experiencing

00:21:08,080 --> 00:21:09,760
other challenges what should you

00:21:09,200 --> 00:21:11,120
actually do

00:21:09,760 --> 00:21:12,240
so i definitely think you should be

00:21:11,120 --> 00:21:13,600
reaching out to our team you should be

00:21:12,240 --> 00:21:15,120
following an issue with bugs with

00:21:13,600 --> 00:21:17,200
feature requests those sorts of things

00:21:15,120 --> 00:21:18,720
we want to hear we are always listening

00:21:17,200 --> 00:21:20,320
that's why we have the uh

00:21:18,720 --> 00:21:21,760
annual survey that's why we do all these

00:21:20,320 --> 00:21:23,840
things in the communities to actually

00:21:21,760 --> 00:21:24,960
listen and be part of the community but

00:21:23,840 --> 00:21:26,240
the other thing you should do is kind of

00:21:24,960 --> 00:21:27,360
take ownership

00:21:26,240 --> 00:21:28,960
and try and build communities for

00:21:27,360 --> 00:21:30,400
yourself reach out to other people in

00:21:28,960 --> 00:21:31,200
your company reach out to other people

00:21:30,400 --> 00:21:32,240
on your team

00:21:31,200 --> 00:21:34,159
reach out to other people in your

00:21:32,240 --> 00:21:35,760
geographic region reach out to people

00:21:34,159 --> 00:21:37,520
that you share common interests with

00:21:35,760 --> 00:21:38,799
because community is what makes us all

00:21:37,520 --> 00:21:40,799
better and it's

00:21:38,799 --> 00:21:42,720
only going to be that together working

00:21:40,799 --> 00:21:45,840
together that we're all going to win

00:21:42,720 --> 00:21:45,840
thank you so much

00:21:47,240 --> 00:21:53,360
[Applause]

00:21:47,560 --> 00:21:55,400
[Music]

00:21:53,360 --> 00:21:58,799
[Applause]

00:21:55,400 --> 00:22:00,880
[Music]

00:21:58,799 --> 00:22:00,880

YouTube URL: https://www.youtube.com/watch?v=rMOufrAXUog


