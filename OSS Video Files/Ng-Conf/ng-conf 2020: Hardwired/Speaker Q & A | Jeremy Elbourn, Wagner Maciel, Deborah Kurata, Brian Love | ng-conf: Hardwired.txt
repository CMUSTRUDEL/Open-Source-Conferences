Title: Speaker Q & A | Jeremy Elbourn, Wagner Maciel, Deborah Kurata, Brian Love | ng-conf: Hardwired
Publication date: 2020-07-06
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Q&A panel with Jeremy Elbourn, Wagner Maciel, Deborah Kurata and Brian Love.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,330
[Applause]

00:00:05,920 --> 00:00:20,990
[Music]

00:00:16,330 --> 00:00:22,609
thanks Brian good job man that's one of

00:00:20,990 --> 00:00:24,019
those new features in 1809 that not a

00:00:22,609 --> 00:00:25,699
lot of people were aware of

00:00:24,019 --> 00:00:27,859
I appreciate Brian being so thorough

00:00:25,699 --> 00:00:30,619
about it he he really dove he dug into

00:00:27,859 --> 00:00:31,939
angular 9 and did a great job blogging

00:00:30,619 --> 00:00:34,339
about it and speaking about it with the

00:00:31,939 --> 00:00:36,620
community so we're going to take a

00:00:34,339 --> 00:00:39,010
minute we're gonna invite Brian all the

00:00:36,620 --> 00:00:43,879
last few speakers back to the pay this

00:00:39,010 --> 00:00:47,030
stage to do a Q&A session so we're gonna

00:00:43,879 --> 00:00:50,140
go to we will be back soon sign and

00:00:47,030 --> 00:00:50,140
we'll be back in a few minutes Thanks

00:00:51,600 --> 00:00:58,369
[Music]

00:01:01,900 --> 00:01:19,269
[Music]

00:01:32,590 --> 00:01:59,559
[Music]

00:02:03,080 --> 00:02:20,449
[Music]

00:02:33,770 --> 00:02:44,980
[Music]

00:02:47,790 --> 00:03:00,899
[Music]

00:03:04,420 --> 00:03:22,209
[Music]

00:03:32,180 --> 00:03:38,790
can you guys hear me okay um yeah we can

00:03:35,130 --> 00:03:41,400
hear you good how you doing everybody

00:03:38,790 --> 00:03:42,440
how you doing can you hear me yes hear

00:03:41,400 --> 00:03:46,319
me okay

00:03:42,440 --> 00:03:50,959
yeah all right whatever no once not ever

00:03:46,319 --> 00:03:53,849
once all right Brian you hear me good I

00:03:50,959 --> 00:03:55,200
can hear you Aaron all right so everyone

00:03:53,849 --> 00:03:56,550
really liked your talks I don't know if

00:03:55,200 --> 00:04:01,019
you guys were watching the chat but your

00:03:56,550 --> 00:04:04,200
tax were popular okay all right so we

00:04:01,019 --> 00:04:07,470
got some questions first question it's

00:04:04,200 --> 00:04:08,489
like by far the most up voted maybe it's

00:04:07,470 --> 00:04:11,280
because it's been out there in longest

00:04:08,489 --> 00:04:15,150
this is what are the downsides of

00:04:11,280 --> 00:04:18,500
angular Universal I'm guessing that's

00:04:15,150 --> 00:04:18,500
going to Wagner

00:04:19,639 --> 00:04:29,760
so Wagner you would need to unmute and

00:04:22,950 --> 00:04:31,800
answer that I could tell you some

00:04:29,760 --> 00:04:34,440
downsides but I'm at least slightly

00:04:31,800 --> 00:04:37,729
biased does any anyone want to speak to

00:04:34,440 --> 00:04:41,010
the downsides of angular Universal I

00:04:37,729 --> 00:04:42,780
mean there are always downsides to

00:04:41,010 --> 00:04:45,390
they're always trade-offs I should say

00:04:42,780 --> 00:04:47,760
with a you know design choice that

00:04:45,390 --> 00:04:50,910
you're making so server-side rendering

00:04:47,760 --> 00:04:53,039
doesn't serve trade-offs and that for

00:04:50,910 --> 00:04:55,500
example like you can't just use the Dom

00:04:53,039 --> 00:04:57,270
API is willy-nilly you can't do like get

00:04:55,500 --> 00:04:59,760
founding client wrecked or get computed

00:04:57,270 --> 00:05:01,680
style and things like that it's harder

00:04:59,760 --> 00:05:04,650
to respond to different sized sized

00:05:01,680 --> 00:05:07,080
viewports right so for mobile devices

00:05:04,650 --> 00:05:09,450
versus desktops that's something that

00:05:07,080 --> 00:05:11,729
you just can't always know the size of

00:05:09,450 --> 00:05:14,070
the viewport on the server true

00:05:11,729 --> 00:05:15,630
obviously there's infrastructure costs

00:05:14,070 --> 00:05:19,650
in doing server-side rendering versus

00:05:15,630 --> 00:05:21,539
doing purely client-side rendering you

00:05:19,650 --> 00:05:25,289
know and other other things like that

00:05:21,539 --> 00:05:27,450
yeah Wagner the question was the

00:05:25,289 --> 00:05:29,160
downside staying the universal it was

00:05:27,450 --> 00:05:31,740
like the most uploaded question you

00:05:29,160 --> 00:05:33,960
wanna you want to chime in yeah I think

00:05:31,740 --> 00:05:35,770
Jeremy actually nailed it yeah it's

00:05:33,960 --> 00:05:37,990
really taking the

00:05:35,770 --> 00:05:40,060
that a user would be experiencing with

00:05:37,990 --> 00:05:47,500
like all descriptors going on to grab

00:05:40,060 --> 00:05:50,830
their and you're uploading your area you

00:05:47,500 --> 00:05:52,180
want to get a balance there yeah so I'm

00:05:50,830 --> 00:05:56,470
going to say this real quick

00:05:52,180 --> 00:05:58,479
one of you is typing like a wildfire

00:05:56,470 --> 00:06:02,710
and it's really loud y'all one of those

00:05:58,479 --> 00:06:05,169
clickety-clack keyboards not me so just

00:06:02,710 --> 00:06:11,400
be aware that you're unneeded so I think

00:06:05,169 --> 00:06:13,900
it might be Debra Debra okay okay so um

00:06:11,400 --> 00:06:15,580
next question this one's for Jeremy

00:06:13,900 --> 00:06:18,940
Jeremy how do you determine when to

00:06:15,580 --> 00:06:22,090
decompose once you start to see similar

00:06:18,940 --> 00:06:25,539
reuse abstracting decomposing too early

00:06:22,090 --> 00:06:27,819
has kicked my team in the rear yeah so

00:06:25,539 --> 00:06:30,969
this is a difficult thing and it's one

00:06:27,819 --> 00:06:36,699
of the means that people will develop

00:06:30,969 --> 00:06:40,000
over the course of their career it's a

00:06:36,699 --> 00:06:43,389
general rule of thumb is build something

00:06:40,000 --> 00:06:44,949
once as just as you need it and then the

00:06:43,389 --> 00:06:46,690
second time you build it maybe there's

00:06:44,949 --> 00:06:48,460
some duplication and then when you get

00:06:46,690 --> 00:06:52,500
to the third time that's when you have

00:06:48,460 --> 00:06:54,969
to step back and extract things out it

00:06:52,500 --> 00:06:56,409
it's pretty different depending on

00:06:54,969 --> 00:06:58,300
whether or not you're building a library

00:06:56,409 --> 00:06:59,860
versus just for an application because

00:06:58,300 --> 00:07:01,779
if you are building for an application

00:06:59,860 --> 00:07:04,509
you generally just want to do them the

00:07:01,779 --> 00:07:08,409
minimum thing you need to do to you know

00:07:04,509 --> 00:07:11,440
launch some feature or fix an issue in a

00:07:08,409 --> 00:07:14,830
library space you do more want to be

00:07:11,440 --> 00:07:16,029
very deliberate about the API surfaces

00:07:14,830 --> 00:07:18,810
you're making available and the

00:07:16,029 --> 00:07:21,490
different parts you're making available

00:07:18,810 --> 00:07:24,099
that's a very much of a non-answer it

00:07:21,490 --> 00:07:26,800
really does depend on on a case-by-case

00:07:24,099 --> 00:07:28,990
basis you just have to look at no I

00:07:26,800 --> 00:07:31,210
think what you're what you're building I

00:07:28,990 --> 00:07:33,659
think it depends is usually the right

00:07:31,210 --> 00:07:38,740
answer so I think it was a good answer

00:07:33,659 --> 00:07:41,139
next question thanks Jeremy are there

00:07:38,740 --> 00:07:43,270
any standard tools to test web Aria

00:07:41,139 --> 00:07:45,430
accessibility in web applications I'm

00:07:43,270 --> 00:07:48,280
guessing this is for Jeremy as well

00:07:45,430 --> 00:07:51,120
yeah there are tools out there so

00:07:48,280 --> 00:07:54,790
lighthouse has an accessibility audit

00:07:51,120 --> 00:07:59,800
and acts by DQ is a really great

00:07:54,790 --> 00:08:03,490
accessibility linter and you also can

00:07:59,800 --> 00:08:04,780
just write unit tests and end to end

00:08:03,490 --> 00:08:07,810
tests like you would for any other

00:08:04,780 --> 00:08:09,670
feature for accessibility as well things

00:08:07,810 --> 00:08:12,340
like ax & lighthouse they do a very good

00:08:09,670 --> 00:08:14,620
job at what I call accessibility linting

00:08:12,340 --> 00:08:18,730
which is to tell you when something is

00:08:14,620 --> 00:08:20,110
obviously wrong but they don't give you

00:08:18,730 --> 00:08:23,470
the ability to say something is

00:08:20,110 --> 00:08:25,120
definitely correct in the same way that

00:08:23,470 --> 00:08:28,710
a linter doesn't tell if your code is

00:08:25,120 --> 00:08:30,850
correct there's really unfortunately

00:08:28,710 --> 00:08:33,940
when it comes to like screen readers and

00:08:30,850 --> 00:08:36,970
assistive technology no replacement for

00:08:33,940 --> 00:08:39,160
manual testing today there's no really

00:08:36,970 --> 00:08:42,160
tool no tooling I've seen out there that

00:08:39,160 --> 00:08:43,780
covers automated - testing all for a

00:08:42,160 --> 00:08:46,170
screen reader on top of an operating

00:08:43,780 --> 00:08:48,220
system because it's a pretty complicated

00:08:46,170 --> 00:08:49,840
thing to deal with because you have to

00:08:48,220 --> 00:08:51,790
be able to drive interactions at the

00:08:49,840 --> 00:08:57,390
operating system level rather than just

00:08:51,790 --> 00:08:57,390
a browser level right okay thanks man

00:08:58,080 --> 00:09:06,240
so this one I think is also for Wagner

00:09:01,300 --> 00:09:08,710
what if someone has some HTTP API calls

00:09:06,240 --> 00:09:12,070
how do I make that work with angular

00:09:08,710 --> 00:09:14,920
Universal so are the HTTP API calls

00:09:12,070 --> 00:09:16,720
going on in your components is that the

00:09:14,920 --> 00:09:18,130
question or is it something that has to

00:09:16,720 --> 00:09:25,090
happen as a response to a user

00:09:18,130 --> 00:09:26,580
interaction yes I don't know I'm just

00:09:25,090 --> 00:09:29,050
asking the question I got I don't know

00:09:26,580 --> 00:09:31,000
though that that's happening like just

00:09:29,050 --> 00:09:33,460
to generate your components then that's

00:09:31,000 --> 00:09:34,540
totally okay it'll render just fine

00:09:33,460 --> 00:09:37,510
the same way that it does when it's

00:09:34,540 --> 00:09:39,040
being rendered server-side if it's

00:09:37,510 --> 00:09:41,350
happening as a result of user

00:09:39,040 --> 00:09:43,600
interactions go probably still need to

00:09:41,350 --> 00:09:46,180
have a server up so that when the user

00:09:43,600 --> 00:09:48,460
does make that interaction it'll have a

00:09:46,180 --> 00:09:50,200
server to contact guys if that API is

00:09:48,460 --> 00:09:52,630
something else like unrelated to your

00:09:50,200 --> 00:09:55,480
app then it'll be handled the same way

00:09:52,630 --> 00:09:58,889
it would be in a regular case gotcha

00:09:55,480 --> 00:10:03,149
cool all right

00:09:58,889 --> 00:10:06,959
I guess this is where I'll let I'm gonna

00:10:03,149 --> 00:10:09,480
let Wagner take this and I'm a I'm a

00:10:06,959 --> 00:10:11,339
follow-up what are some of the key

00:10:09,480 --> 00:10:13,860
differences between Scully and the new

00:10:11,339 --> 00:10:15,569
angular universal pre-render what should

00:10:13,860 --> 00:10:17,579
we consider when choosing between the

00:10:15,569 --> 00:10:20,069
two I'm on that way I'm gonna go first

00:10:17,579 --> 00:10:21,749
I'm honestly not super familiar with

00:10:20,069 --> 00:10:24,329
Scully there's a lot of other

00:10:21,749 --> 00:10:26,189
pre-rendering API out there the biggest

00:10:24,329 --> 00:10:28,920
benefit though to using the pre-render

00:10:26,189 --> 00:10:32,069
builder that we wrote recently is that

00:10:28,920 --> 00:10:34,259
it's so close to angular's tooling it

00:10:32,069 --> 00:10:36,779
really uses all the tools that are meant

00:10:34,259 --> 00:10:38,430
to be used to do this correctly and it's

00:10:36,779 --> 00:10:41,309
parallelized so I'm not sure if Scully

00:10:38,430 --> 00:10:46,110
is paralyzed but yeah so just a

00:10:41,309 --> 00:10:47,730
performance and great so I'll say and

00:10:46,110 --> 00:10:50,490
I'm trying to be friendly

00:10:47,730 --> 00:10:52,889
I'll say Scully is parallelized as well

00:10:50,490 --> 00:10:54,259
it's just I haven't worked on a

00:10:52,889 --> 00:10:58,050
universal app before

00:10:54,259 --> 00:11:00,209
Scully's just angular whereas Universal

00:10:58,050 --> 00:11:03,360
is angular but like super focused in

00:11:00,209 --> 00:11:07,110
like dodging a lot of like things that

00:11:03,360 --> 00:11:08,879
people regularly do so i think i think i

00:11:07,110 --> 00:11:10,050
don't know i think a Scully may be a

00:11:08,879 --> 00:11:12,480
little bit easier to keep running but

00:11:10,050 --> 00:11:13,769
I'm not I'm not positive that but um I'm

00:11:12,480 --> 00:11:15,920
sure Wagner and I will have to grab

00:11:13,769 --> 00:11:18,779
beers all night talk it through

00:11:15,920 --> 00:11:20,689
so yeah all right I'm going on my next

00:11:18,779 --> 00:11:23,309
question then this one's back to Jeremy

00:11:20,689 --> 00:11:24,779
Jeremy is it good practice about

00:11:23,309 --> 00:11:27,959
switching light dark themes in

00:11:24,779 --> 00:11:29,189
components is there a constructus sorry

00:11:27,959 --> 00:11:32,610
is there good practice for steam

00:11:29,189 --> 00:11:37,019
switching yeah it depends on your use

00:11:32,610 --> 00:11:38,550
case right so it depends on your

00:11:37,019 --> 00:11:43,709
requirements right so if you want like

00:11:38,550 --> 00:11:45,540
absolutely minimize your CSS payload

00:11:43,709 --> 00:11:47,129
size that's on the browser at any given

00:11:45,540 --> 00:11:49,589
time you're probably going to want to be

00:11:47,129 --> 00:11:51,839
swapping style sheets and that's

00:11:49,589 --> 00:11:53,459
basically like either changing the HF on

00:11:51,839 --> 00:11:56,399
a link element or swapping out link

00:11:53,459 --> 00:11:59,509
elements to like totally change style

00:11:56,399 --> 00:12:01,470
sheets alternatively if you don't mind

00:11:59,509 --> 00:12:03,809
loading different style sheets at the

00:12:01,470 --> 00:12:05,699
same modes and pull styles at the same

00:12:03,809 --> 00:12:07,270
time you can use like CSS classes to

00:12:05,699 --> 00:12:09,700
toggle between a

00:12:07,270 --> 00:12:12,040
dark themes CSS variables or something

00:12:09,700 --> 00:12:14,860
you could do with this again CSS with in

00:12:12,040 --> 00:12:17,490
more modern browsers and they don't base

00:12:14,860 --> 00:12:20,170
that on some class but that's going to

00:12:17,490 --> 00:12:23,350
require you to build your theming around

00:12:20,170 --> 00:12:25,990
and CSS variables there's the new media

00:12:23,350 --> 00:12:30,010
queries for like prefers like theme

00:12:25,990 --> 00:12:33,100
prefers dark mean I see those as being

00:12:30,010 --> 00:12:36,370
something you would want to decide to

00:12:33,100 --> 00:12:37,630
use if you are okay with having all of

00:12:36,370 --> 00:12:40,390
your styles on the client at the same

00:12:37,630 --> 00:12:43,030
time because media queries require like

00:12:40,390 --> 00:12:45,220
both sets of styles to be there whereas

00:12:43,030 --> 00:12:47,020
if it's separate from that you have

00:12:45,220 --> 00:12:50,440
control over which styles to load at

00:12:47,020 --> 00:12:52,720
which time got you okay

00:12:50,440 --> 00:12:58,090
I'm going off vote counts here by the

00:12:52,720 --> 00:13:00,910
way next one up for Wagner again we've

00:12:58,090 --> 00:13:02,440
got what is the best strategy for

00:13:00,910 --> 00:13:05,710
migrating large existing angular

00:13:02,440 --> 00:13:09,430
applications to using angular universal

00:13:05,710 --> 00:13:11,920
pre rendering so generally if you

00:13:09,430 --> 00:13:14,170
already have a pre-existing like version

00:13:11,920 --> 00:13:17,860
of the angular universal schematic

00:13:14,170 --> 00:13:19,630
installed you can use ng update ng add

00:13:17,860 --> 00:13:21,340
will take care of most of the work for

00:13:19,630 --> 00:13:24,490
you creating some files and updating

00:13:21,340 --> 00:13:26,440
some others like your package.json but

00:13:24,490 --> 00:13:28,150
if you don't have angular routing

00:13:26,440 --> 00:13:29,650
already installed in that big project I

00:13:28,150 --> 00:13:31,900
would recommend installing it first so

00:13:29,650 --> 00:13:33,700
that when you do add the universal

00:13:31,900 --> 00:13:36,340
schematic and make changes to your

00:13:33,700 --> 00:13:39,430
routing module as well so what if I

00:13:36,340 --> 00:13:41,460
don't use Universal today what's the

00:13:39,430 --> 00:13:45,430
easiest way to add it into a giant

00:13:41,460 --> 00:13:47,980
angular app yes so you just want to run

00:13:45,430 --> 00:13:50,020
that ng add that ng Universal slash

00:13:47,980 --> 00:13:51,670
Express engine I would take care of

00:13:50,020 --> 00:13:54,370
creating the files that you need for

00:13:51,670 --> 00:13:56,620
server-side rendering and updating your

00:13:54,370 --> 00:13:59,010
other files to get you speed got you

00:13:56,620 --> 00:14:03,820
cool all right

00:13:59,010 --> 00:14:05,890
another question for Wagner can I use

00:14:03,820 --> 00:14:10,600
Universal for only part of my app like a

00:14:05,890 --> 00:14:12,460
specific age or component I believe you

00:14:10,600 --> 00:14:15,970
can I'm not sure if there's any

00:14:12,460 --> 00:14:17,410
restriction around that the schematic

00:14:15,970 --> 00:14:20,120
would be installed and maintained just

00:14:17,410 --> 00:14:22,580
like some core files so

00:14:20,120 --> 00:14:26,120
do think it would have effects on your

00:14:22,580 --> 00:14:27,589
whole application but if I understand

00:14:26,120 --> 00:14:29,360
correctly do they mean they want to

00:14:27,589 --> 00:14:33,380
render some things client-side and other

00:14:29,360 --> 00:14:34,490
things server-side no I mean I mean I'm

00:14:33,380 --> 00:14:36,230
guessing that's what they're saying but

00:14:34,490 --> 00:14:38,980
they're they're specifically asking can

00:14:36,230 --> 00:14:42,560
they can they render just a component

00:14:38,980 --> 00:14:45,860
hmm I don't believe there's support

00:14:42,560 --> 00:14:47,180
around that now I actually think this is

00:14:45,860 --> 00:14:48,830
something that we've been discussing for

00:14:47,180 --> 00:14:51,070
a long time in the universal community

00:14:48,830 --> 00:14:53,839
but that might be a better question for

00:14:51,070 --> 00:14:55,610
Minko if there's a coming a Q&A session

00:14:53,839 --> 00:14:58,279
coming up later yeah I know he'll be

00:14:55,610 --> 00:15:03,260
here we'll ask Minko good good call all

00:14:58,279 --> 00:15:05,210
right next one how would i 18n work

00:15:03,260 --> 00:15:07,370
within your Universal pre-rendering

00:15:05,210 --> 00:15:11,870
would it generate the same 800 files for

00:15:07,370 --> 00:15:14,630
each locale I believe it would currently

00:15:11,870 --> 00:15:17,510
I think there's an issue with the

00:15:14,630 --> 00:15:19,310
compiler generating some JSON files in

00:15:17,510 --> 00:15:20,839
the ITN I'm not a hundred percent sure

00:15:19,310 --> 00:15:24,529
on that so take that with a grain of

00:15:20,839 --> 00:15:26,180
salt but yeah I believe it'll render

00:15:24,529 --> 00:15:27,980
like basically the exact same way that

00:15:26,180 --> 00:15:29,779
server-side rendering is happening it's

00:15:27,980 --> 00:15:33,500
doing the same work just at build time

00:15:29,779 --> 00:15:34,610
instead of with the request so nothing

00:15:33,500 --> 00:15:36,020
should change if it was working before

00:15:34,610 --> 00:15:37,880
with server-side rendering it'll

00:15:36,020 --> 00:15:38,690
continue to work with for under keep

00:15:37,880 --> 00:15:43,070
working cool

00:15:38,690 --> 00:15:44,690
good no um wow these are I'm gonna try

00:15:43,070 --> 00:15:47,990
and I'm done

00:15:44,690 --> 00:15:50,450
moving down I'm moving down all right

00:15:47,990 --> 00:15:53,089
Oh actually my list is totally out of

00:15:50,450 --> 00:15:56,870
order okay sorry the top question is for

00:15:53,089 --> 00:16:00,620
Debra sorry Debra the whole list just

00:15:56,870 --> 00:16:03,110
restored okay Debra how do I handle

00:16:00,620 --> 00:16:05,480
negative scenarios and concat

00:16:03,110 --> 00:16:08,029
let's say I have three API calls in

00:16:05,480 --> 00:16:10,580
sequence and we need to unsubscribe from

00:16:08,029 --> 00:16:17,220
all the requests if any one of the

00:16:10,580 --> 00:16:21,890
sequence calls fails nothing

00:16:17,220 --> 00:16:21,890
being put on the spot and the Q&A panel

00:16:25,460 --> 00:16:33,600
would you use like an exhaust map with a

00:16:28,170 --> 00:16:37,290
catch air I don't know yeah definitely a

00:16:33,600 --> 00:16:43,670
catch air would catch any air and it

00:16:37,290 --> 00:16:48,090
would stop the rest of the team

00:16:43,670 --> 00:16:51,030
processing at that point what might be

00:16:48,090 --> 00:16:54,560
best for that kind of question is to

00:16:51,030 --> 00:16:58,050
maybe work up a little staff 'let's of

00:16:54,560 --> 00:17:01,740
more specifically what your code is

00:16:58,050 --> 00:17:04,890
trying to do and then post me a link to

00:17:01,740 --> 00:17:07,170
it on on Twitter and that I could look

00:17:04,890 --> 00:17:10,730
at it more closely exactly what you're

00:17:07,170 --> 00:17:12,959
what you're trying to do with that

00:17:10,730 --> 00:17:15,180
pratik if you if you want to reach out

00:17:12,959 --> 00:17:18,959
to Deborah sounds like you send her a

00:17:15,180 --> 00:17:21,180
stack over stack blitz or gist and

00:17:18,959 --> 00:17:24,150
she'll take a look at it next question

00:17:21,180 --> 00:17:26,730
also for Deborah a little bit on the

00:17:24,150 --> 00:17:28,710
spot Deborah so I don't know if you know

00:17:26,730 --> 00:17:30,390
this the stream cut out a little bit cuz

00:17:28,710 --> 00:17:32,790
you're so popular it kind of died in the

00:17:30,390 --> 00:17:36,710
middle your talk for a second so someone

00:17:32,790 --> 00:17:41,370
is asking Deborah can you please explain

00:17:36,710 --> 00:17:42,930
again switch map operator like you could

00:17:41,370 --> 00:17:45,560
do the QA panel version without any

00:17:42,930 --> 00:17:50,160
slides do you rest

00:17:45,560 --> 00:17:54,150
yeah I'm really bummed that about half

00:17:50,160 --> 00:17:56,250
of my talk sort of just disappeared I'm

00:17:54,150 --> 00:17:59,040
hoping that they came out okay on the

00:17:56,250 --> 00:18:03,180
video that was recorded and that you'll

00:17:59,040 --> 00:18:04,560
be able to watch it yeah you know it'll

00:18:03,180 --> 00:18:06,600
be online you got it definitely I

00:18:04,560 --> 00:18:07,410
recorded it definitely I got work okay

00:18:06,600 --> 00:18:09,990
good

00:18:07,410 --> 00:18:12,900
but the short version of switch map is

00:18:09,990 --> 00:18:16,080
that what it does is it immediately

00:18:12,900 --> 00:18:20,250
cancels any prior requests before doing

00:18:16,080 --> 00:18:23,370
the next one so say you had someone

00:18:20,250 --> 00:18:25,830
picking a set of items from the left to

00:18:23,370 --> 00:18:31,200
show the data on the right and they

00:18:25,830 --> 00:18:34,950
picked hammer no ring what would happen

00:18:31,200 --> 00:18:38,700
with contact map or merge map is that

00:18:34,950 --> 00:18:41,220
would go get each of those with switched

00:18:38,700 --> 00:18:43,530
map it actually cancels the first one so

00:18:41,220 --> 00:18:45,720
if the user picked the first item then

00:18:43,530 --> 00:18:47,160
the second item then the third item when

00:18:45,720 --> 00:18:48,929
they pick the second item it would

00:18:47,160 --> 00:18:52,140
cancel the request for the first one

00:18:48,929 --> 00:18:53,760
when they clicked the third one it would

00:18:52,140 --> 00:18:57,270
cancel the request for the second one

00:18:53,760 --> 00:19:00,390
and so it would only actually return the

00:18:57,270 --> 00:19:03,720
last one that they picked so as a key

00:19:00,390 --> 00:19:06,320
difference between switch map and the

00:19:03,720 --> 00:19:09,630
other ones is that it will cancel any

00:19:06,320 --> 00:19:13,710
current interim server bowls from

00:19:09,630 --> 00:19:15,600
executing so that it is focused on

00:19:13,710 --> 00:19:18,179
always the most recent thing that

00:19:15,600 --> 00:19:21,270
happened so it's really good to use in

00:19:18,179 --> 00:19:24,810
any case like a type of head case where

00:19:21,270 --> 00:19:26,550
you don't care anymore about your prior

00:19:24,810 --> 00:19:28,830
debt because now they type more

00:19:26,550 --> 00:19:32,340
characters and now you want to go get

00:19:28,830 --> 00:19:34,440
that request or in a case like the first

00:19:32,340 --> 00:19:38,310
one that I suggested that the user could

00:19:34,440 --> 00:19:40,910
pick I wanted the Hat no I want the

00:19:38,310 --> 00:19:44,250
scarf and then you want to ensure that

00:19:40,910 --> 00:19:47,910
you're only getting the actual last one

00:19:44,250 --> 00:19:50,820
that they picked so I'm hoping that no

00:19:47,910 --> 00:19:52,410
yeah yeah if you have more questions I

00:19:50,820 --> 00:19:55,020
Debra and I we've talked about this a

00:19:52,410 --> 00:19:56,880
lot so you can reach out to Debra online

00:19:55,020 --> 00:19:58,320
ask your questions and and and I know

00:19:56,880 --> 00:20:00,240
she's fantastic at helping people

00:19:58,320 --> 00:20:03,390
through these questions Twitter is a

00:20:00,240 --> 00:20:05,870
really good place to reach out okay

00:20:03,390 --> 00:20:09,150
perfect and you're just at Debra Kurata

00:20:05,870 --> 00:20:10,800
correct okay perfect all right next

00:20:09,150 --> 00:20:13,650
question is for Brian and it's a bit

00:20:10,800 --> 00:20:16,830
tough boy take a second before you dive

00:20:13,650 --> 00:20:18,990
in so you talked about the three the

00:20:16,830 --> 00:20:21,540
three template checking levels right and

00:20:18,990 --> 00:20:23,580
these are all brand new and obviously

00:20:21,540 --> 00:20:25,290
like if I have a giant app and I just

00:20:23,580 --> 00:20:28,860
turn it on the most strict one like I'm

00:20:25,290 --> 00:20:31,140
dead so the question is what strategy do

00:20:28,860 --> 00:20:32,850
you recommend to enable the template

00:20:31,140 --> 00:20:36,330
type checking incrementally like the

00:20:32,850 --> 00:20:38,520
just to roll it in piece by piece yeah

00:20:36,330 --> 00:20:41,190
that's a great question so certainly if

00:20:38,520 --> 00:20:43,250
you have a lot of template type errors

00:20:41,190 --> 00:20:45,680
in your application today

00:20:43,250 --> 00:20:47,390
you just enable strict you're gonna try

00:20:45,680 --> 00:20:49,850
to do an NG build and you're gonna get a

00:20:47,390 --> 00:20:51,290
lot of let red squiggly marks in your

00:20:49,850 --> 00:20:53,750
build it's gonna say you got a problem

00:20:51,290 --> 00:20:55,840
here got a problem there and so the

00:20:53,750 --> 00:20:58,610
strategy that I've recommended is that

00:20:55,840 --> 00:21:00,590
actually go ahead and do that strict and

00:20:58,610 --> 00:21:04,130
try a build because that's first of all

00:21:00,590 --> 00:21:06,320
that's gonna give you kind of a view

00:21:04,130 --> 00:21:09,230
into just how many problems you might

00:21:06,320 --> 00:21:11,390
have with template type errors and so

00:21:09,230 --> 00:21:13,070
that they don't kind of let you gauge in

00:21:11,390 --> 00:21:14,990
terms of just how much work is gonna

00:21:13,070 --> 00:21:18,470
need to be done in order to get from

00:21:14,990 --> 00:21:20,240
basic default to strict and so but put

00:21:18,470 --> 00:21:22,070
on going to your TS config file going to

00:21:20,240 --> 00:21:24,080
the angular compiler options enable

00:21:22,070 --> 00:21:26,810
strict try a build and see what happens

00:21:24,080 --> 00:21:29,450
so try it and then that'll let you kind

00:21:26,810 --> 00:21:32,000
of start to plan things out from there I

00:21:29,450 --> 00:21:34,160
think you could start to analyze just

00:21:32,000 --> 00:21:36,140
how like what are the different types of

00:21:34,160 --> 00:21:37,850
type errors you have and how many they

00:21:36,140 --> 00:21:40,220
are and then you can work with your

00:21:37,850 --> 00:21:41,840
project manager or work as a team to

00:21:40,220 --> 00:21:44,600
kind of plan through how you want to

00:21:41,840 --> 00:21:46,400
tackle those issues sprint by sprint you

00:21:44,600 --> 00:21:48,050
know obviously you gotta continue

00:21:46,400 --> 00:21:49,820
feature development and these types of

00:21:48,050 --> 00:21:51,320
things but you could start to plan that

00:21:49,820 --> 00:21:52,850
out and each sprint and say hey we're

00:21:51,320 --> 00:21:55,220
going to tackle these types of errors

00:21:52,850 --> 00:21:57,950
and then from there certainly you want

00:21:55,220 --> 00:21:59,900
to go you know go back to basic which is

00:21:57,950 --> 00:22:01,730
basically the template type checking

00:21:59,900 --> 00:22:05,180
that we have today with a RT builds in

00:22:01,730 --> 00:22:07,910
angular 8 and then go from basic to full

00:22:05,180 --> 00:22:10,070
and tackle those first and then once

00:22:07,910 --> 00:22:13,730
you're on full then go from full to

00:22:10,070 --> 00:22:15,500
strict and that'll help you kind of make

00:22:13,730 --> 00:22:17,540
that march towards having strict

00:22:15,500 --> 00:22:18,800
template type checking so I guess this

00:22:17,540 --> 00:22:21,950
is a question for everybody

00:22:18,800 --> 00:22:24,680
do you suspect it'll get harder as time

00:22:21,950 --> 00:22:26,210
go like the higher the level you go the

00:22:24,680 --> 00:22:28,190
more difficult is gonna be to roll that

00:22:26,210 --> 00:22:29,540
in or what's the thoughts is the first

00:22:28,190 --> 00:22:30,920
one the hardest is the third one the

00:22:29,540 --> 00:22:34,010
hardest they all kind of the same

00:22:30,920 --> 00:22:35,960
I think certainly go district' is going

00:22:34,010 --> 00:22:37,610
to be the hardest because that's where

00:22:35,960 --> 00:22:40,940
it's going to be doing the most type

00:22:37,610 --> 00:22:44,720
checking in your templates so going from

00:22:40,940 --> 00:22:47,120
basic to full it does more type checking

00:22:44,720 --> 00:22:49,430
for you but I think that's kind of an

00:22:47,120 --> 00:22:51,020
easy switch and then going from there to

00:22:49,430 --> 00:22:53,420
strict it's that's where it's gonna

00:22:51,020 --> 00:22:55,820
catch things like dollar event right now

00:22:53,420 --> 00:22:57,080
is just in any right and now it's gonna

00:22:55,820 --> 00:22:59,150
actually check

00:22:57,080 --> 00:23:02,390
all of that it's go check your pipes go

00:22:59,150 --> 00:23:05,120
check all of your Dom references so

00:23:02,390 --> 00:23:07,610
that's my opinion I don't know if Jeremy

00:23:05,120 --> 00:23:11,630
or Deborah or Wagner have opinions on on

00:23:07,610 --> 00:23:13,940
that go ahead and chime in yeah it's

00:23:11,630 --> 00:23:17,600
really just a matter of like tackling

00:23:13,940 --> 00:23:18,830
one at a time I think and then I don't

00:23:17,600 --> 00:23:24,890
know if there's anything I couldn't

00:23:18,830 --> 00:23:29,630
advise beyond that okay so the next

00:23:24,890 --> 00:23:31,460
question is for Wagner says is ng

00:23:29,630 --> 00:23:35,240
Universal worth investigating if the

00:23:31,460 --> 00:23:37,760
contents of my app are completely user

00:23:35,240 --> 00:23:41,030
role driven and I'm guessing that means

00:23:37,760 --> 00:23:44,510
behind a login probably sorry could you

00:23:41,030 --> 00:23:46,970
repeat that oh yeah sorry so is it worth

00:23:44,510 --> 00:23:49,730
investigating angular Universal if the

00:23:46,970 --> 00:23:52,370
contents of my app are completely user

00:23:49,730 --> 00:23:54,260
role-based and I'm guessing that means

00:23:52,370 --> 00:23:58,040
that the contents are largely behind a

00:23:54,260 --> 00:24:01,070
login largely but I would say probably

00:23:58,040 --> 00:24:02,120
not because in that case you're gonna

00:24:01,070 --> 00:24:04,540
have to interact with the server

00:24:02,120 --> 00:24:06,950
regardless to fetch that user data so

00:24:04,540 --> 00:24:08,780
unless there's like a lot of content

00:24:06,950 --> 00:24:10,460
that is getting rendered on the client

00:24:08,780 --> 00:24:13,160
that you can cache beforehand and like

00:24:10,460 --> 00:24:14,540
do some of that work beforehand you're

00:24:13,160 --> 00:24:17,300
still gonna have to contact the server

00:24:14,540 --> 00:24:19,130
so it doesn't really fit the exact use

00:24:17,300 --> 00:24:21,590
case I'm sure you could find a way to

00:24:19,130 --> 00:24:23,000
use it but again it's not the ideal case

00:24:21,590 --> 00:24:26,950
right right right

00:24:23,000 --> 00:24:31,550
okay we got one more question

00:24:26,950 --> 00:24:33,950
highest question is what are the

00:24:31,550 --> 00:24:40,130
differences between Universal pre-render

00:24:33,950 --> 00:24:42,020
and scully again my key I can name a

00:24:40,130 --> 00:24:44,590
couple cuz I say I know you say you're

00:24:42,020 --> 00:24:48,410
not familiar with it so yeah so

00:24:44,590 --> 00:24:52,240
Universal renders in node and scully

00:24:48,410 --> 00:24:55,220
renders in Chrome it uses puppeteer so

00:24:52,240 --> 00:24:58,310
that's a massive difference it means

00:24:55,220 --> 00:25:01,850
that Universal can be faster it also

00:24:58,310 --> 00:25:03,650
means that slowly will be significantly

00:25:01,850 --> 00:25:07,160
more forgiving like so there's these

00:25:03,650 --> 00:25:10,550
these big trade-offs if you're using

00:25:07,160 --> 00:25:12,500
Universal for pre-render only they

00:25:10,550 --> 00:25:14,480
both run at Build time so they don't

00:25:12,500 --> 00:25:19,820
have a runtime component so that's

00:25:14,480 --> 00:25:22,520
really powerful does this universal

00:25:19,820 --> 00:25:26,150
pre-render have markdown support for

00:25:22,520 --> 00:25:27,920
like doing blogs doing blogs like yeah

00:25:26,150 --> 00:25:30,320
yeah yeah like markdown file support I

00:25:27,920 --> 00:25:34,870
don't know

00:25:30,320 --> 00:25:38,570
Scully has markdown file support does

00:25:34,870 --> 00:25:40,010
but outside of that they're very similar

00:25:38,570 --> 00:25:42,800
in that you're just gonna write an

00:25:40,010 --> 00:25:45,800
angular app your angular apps gonna use

00:25:42,800 --> 00:25:47,300
HTTP client module to get data yep it's

00:25:45,800 --> 00:25:50,930
gonna get that data back and render it

00:25:47,300 --> 00:25:53,150
so as far as that goes they're very very

00:25:50,930 --> 00:25:54,140
easy and very familiar for angular

00:25:53,150 --> 00:25:56,780
developers so there's a lot of

00:25:54,140 --> 00:25:58,460
similarity if you're just talking about

00:25:56,780 --> 00:26:01,730
pre-rendering there's a lot of

00:25:58,460 --> 00:26:04,490
similarity they both have strengths

00:26:01,730 --> 00:26:07,340
there if you're talking about production

00:26:04,490 --> 00:26:10,490
SSR Scully doesn't do production SSR

00:26:07,340 --> 00:26:12,920
Scully's strictly a build time

00:26:10,490 --> 00:26:14,690
pre-render so those are some of the main

00:26:12,920 --> 00:26:18,680
differences I would say right is that

00:26:14,690 --> 00:26:20,300
something all right yeah okay right Erin

00:26:18,680 --> 00:26:22,160
I think the key takeaway there is

00:26:20,300 --> 00:26:23,210
because they're executed different

00:26:22,160 --> 00:26:25,280
contexts as some of the things that

00:26:23,210 --> 00:26:28,220
Jeremy mentioned earlier like not having

00:26:25,280 --> 00:26:30,200
access to the window size or the window

00:26:28,220 --> 00:26:31,820
object and the document things that you

00:26:30,200 --> 00:26:33,680
might be relying on in your application

00:26:31,820 --> 00:26:35,510
today because we're expecting to run in

00:26:33,680 --> 00:26:38,180
the context of a browser when you go to

00:26:35,510 --> 00:26:39,920
use angular Universal you got to be

00:26:38,180 --> 00:26:41,300
aware of all that right that it's not

00:26:39,920 --> 00:26:43,400
severe and some of those kind of

00:26:41,300 --> 00:26:45,650
trade-offs that Jeremy mentioned earlier

00:26:43,400 --> 00:26:47,810
let straight don't exist with scully

00:26:45,650 --> 00:26:50,540
true when I kind of said yes you know

00:26:47,810 --> 00:26:52,430
doing SSR but they're both perfectly

00:26:50,540 --> 00:26:54,350
that unless you're using a particular

00:26:52,430 --> 00:26:57,740
feature inside of scully that depends on

00:26:54,350 --> 00:26:59,270
me being run with puppets here then the

00:26:57,740 --> 00:27:00,650
pre-rendered go there will be faster

00:26:59,270 --> 00:27:03,920
because you're not launching a bunch of

00:27:00,650 --> 00:27:06,110
chrome instance yeah yeah it's just node

00:27:03,920 --> 00:27:08,630
Universal Devlin has the ability to run

00:27:06,110 --> 00:27:11,060
faster it paralyzes over a lighter

00:27:08,630 --> 00:27:12,510
process right puppeteers as a heavier

00:27:11,060 --> 00:27:14,460
process hi great

00:27:12,510 --> 00:27:17,440
okay that's good

00:27:14,460 --> 00:27:17,760
[Music]

00:27:17,440 --> 00:27:23,560
[Applause]

00:27:17,760 --> 00:27:26,900
[Music]

00:27:23,560 --> 00:27:28,960
[Applause]

00:27:26,900 --> 00:27:28,960

YouTube URL: https://www.youtube.com/watch?v=BjUmpzXg8Fc


