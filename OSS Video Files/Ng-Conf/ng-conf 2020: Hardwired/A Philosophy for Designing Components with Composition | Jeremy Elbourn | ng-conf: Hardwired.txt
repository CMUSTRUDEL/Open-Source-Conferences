Title: A Philosophy for Designing Components with Composition | Jeremy Elbourn | ng-conf: Hardwired
Publication date: 2020-06-22
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Everyone knows that you want “composition” in your architecture, but what are the practical implications of composition? How do you think about composition in the context of UI components? In this talk, you’ll hear about a specific strategy for bringing composition into your design to create components that are accessible, flexible, and maintainable.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:16,740 --> 00:00:21,990
all right so really quick before I start

00:00:19,560 --> 00:00:24,599
if you are hearing this on the live

00:00:21,990 --> 00:00:27,540
stream go ahead and say pizza in the

00:00:24,599 --> 00:00:31,140
chat so I know what the lag is between

00:00:27,540 --> 00:00:35,340
me saying something and people hearing

00:00:31,140 --> 00:00:39,480
it and so I'm gonna go ahead and get

00:00:35,340 --> 00:00:42,360
started so welcome to a philosophy for

00:00:39,480 --> 00:00:44,580
designing components with composition I

00:00:42,360 --> 00:00:46,949
want to give a very quick note before I

00:00:44,580 --> 00:00:50,370
start normally I give talks at ng-conf

00:00:46,949 --> 00:00:52,530
here to talk about updates in angular

00:00:50,370 --> 00:00:55,199
material and angular cdk and this talk

00:00:52,530 --> 00:00:57,780
is a little bit separate from that we

00:00:55,199 --> 00:01:01,440
are working on plenty of stuff for a

00:00:57,780 --> 00:01:04,229
human material and angular CDK it's just

00:01:01,440 --> 00:01:06,780
I wanted to talk a little bit more about

00:01:04,229 --> 00:01:08,010
my underlying philosophy right now all

00:01:06,780 --> 00:01:09,600
right I know I'm seeing all those pizzas

00:01:08,010 --> 00:01:13,830
in the chat okay so now I know it's

00:01:09,600 --> 00:01:16,290
about 15 seconds so if you don't know me

00:01:13,830 --> 00:01:18,360
my name is Jeremy oborin I'm a member of

00:01:16,290 --> 00:01:20,070
the angular team and I'm the TA for the

00:01:18,360 --> 00:01:23,880
angular components team which works on

00:01:20,070 --> 00:01:26,789
angular cdk and angular material and I

00:01:23,880 --> 00:01:29,399
wanted to give this talk in order to

00:01:26,789 --> 00:01:30,780
share some of the philosophy that I've

00:01:29,399 --> 00:01:33,780
developed over the years when it comes

00:01:30,780 --> 00:01:35,939
to building UI components and a lot of

00:01:33,780 --> 00:01:38,789
this talk is going to be focused on the

00:01:35,939 --> 00:01:41,909
idea of a common reusable or library

00:01:38,789 --> 00:01:44,039
components but I've observed that every

00:01:41,909 --> 00:01:46,740
application ends up needing to build at

00:01:44,039 --> 00:01:48,030
least some reusable components and so I

00:01:46,740 --> 00:01:51,719
think this is gonna be useful for

00:01:48,030 --> 00:01:54,299
everyone and all of my examples here use

00:01:51,719 --> 00:01:55,920
angular my experiences with angular but

00:01:54,299 --> 00:02:01,009
I think the high-level concepts here

00:01:55,920 --> 00:02:04,350
could apply to really any system so I

00:02:01,009 --> 00:02:06,659
want to start off by talking about

00:02:04,350 --> 00:02:10,020
starting your designs with the

00:02:06,659 --> 00:02:11,940
interaction pattern and what do I mean

00:02:10,020 --> 00:02:15,300
by interaction pattern well let's look

00:02:11,940 --> 00:02:18,630
at an example how many of you upon

00:02:15,300 --> 00:02:20,640
seeing this little bit of UI knows how

00:02:18,630 --> 00:02:23,190
it worked without really needing any

00:02:20,640 --> 00:02:25,350
instruction hopefully it's most of you

00:02:23,190 --> 00:02:28,770
you are at a tech conference and should

00:02:25,350 --> 00:02:31,350
be very technologically advanced people

00:02:28,770 --> 00:02:34,350
but even the least tech-savvy person you

00:02:31,350 --> 00:02:39,930
know probably knows how to use this at

00:02:34,350 --> 00:02:41,610
this point we know we can click on this

00:02:39,930 --> 00:02:44,250
trigger we'll get some options we select

00:02:41,610 --> 00:02:46,290
one and then selected this drop down

00:02:44,250 --> 00:02:48,390
interaction pattern has been ingrained

00:02:46,290 --> 00:02:52,740
in our collective consciousness over the

00:02:48,390 --> 00:02:54,750
last 50 years of computing so I my

00:02:52,740 --> 00:02:58,650
interaction pattern I mean it some

00:02:54,750 --> 00:03:01,470
common well understood interaction that

00:02:58,650 --> 00:03:03,540
a UI commonly contains are commonly

00:03:01,470 --> 00:03:06,210
recurs in you eyes across a wide variety

00:03:03,540 --> 00:03:07,410
of interfaces and it's not just this

00:03:06,210 --> 00:03:10,530
drop-down either there are plenty of

00:03:07,410 --> 00:03:13,740
these interaction patterns that you know

00:03:10,530 --> 00:03:16,020
what's going on there's this slider

00:03:13,740 --> 00:03:19,830
volume slider very intuitive pretty much

00:03:16,020 --> 00:03:21,630
everybody knows how to use that we have

00:03:19,830 --> 00:03:24,450
something again like a tabs you see this

00:03:21,630 --> 00:03:27,840
and your computer adjusted brains know

00:03:24,450 --> 00:03:30,780
how to use this and we are every day

00:03:27,840 --> 00:03:32,820
fundamentally composing our applications

00:03:30,780 --> 00:03:35,070
from these mostly well understood

00:03:32,820 --> 00:03:38,100
interaction patterns but is there

00:03:35,070 --> 00:03:42,390
anything out there that formalizes what

00:03:38,100 --> 00:03:44,640
these patterns are and how we think

00:03:42,390 --> 00:03:47,450
about these patterns as we go into

00:03:44,640 --> 00:03:50,459
building components and building

00:03:47,450 --> 00:03:52,580
applications and it just so happens that

00:03:50,459 --> 00:03:55,080
there is a really convenient

00:03:52,580 --> 00:03:58,530
standardized collection of these

00:03:55,080 --> 00:04:00,959
interaction patterns and that is the waa

00:03:58,530 --> 00:04:02,610
i Aria specification web accessibility

00:04:00,959 --> 00:04:05,459
initiative accessible rich internet

00:04:02,610 --> 00:04:08,250
applications or commonly just Aria for

00:04:05,459 --> 00:04:11,610
short this is a specification that

00:04:08,250 --> 00:04:13,770
complements the html5 spec and it

00:04:11,610 --> 00:04:15,270
captures the idea of augmenting HTML

00:04:13,770 --> 00:04:17,400
elements with additional semantic

00:04:15,270 --> 00:04:19,830
information that's used by assistive

00:04:17,400 --> 00:04:24,000
technology such as screen readers there

00:04:19,830 --> 00:04:25,580
are these are also are generally are the

00:04:24,000 --> 00:04:29,550
Aria spec has generally thought of

00:04:25,580 --> 00:04:32,160
really in terms of accessibility but I

00:04:29,550 --> 00:04:34,220
think that they serve a as a generally

00:04:32,160 --> 00:04:37,260
useful set of building blocks for all

00:04:34,220 --> 00:04:38,800
interaction design and so the way the

00:04:37,260 --> 00:04:41,590
Aria spec is set up is

00:04:38,800 --> 00:04:43,330
you can add this role attribute to an

00:04:41,590 --> 00:04:44,889
element to capture the interaction

00:04:43,330 --> 00:04:47,740
pattern that's being used by the element

00:04:44,889 --> 00:04:49,960
this role doesn't change any behavior

00:04:47,740 --> 00:04:52,360
about the component but it communicates

00:04:49,960 --> 00:04:55,030
to any assistive technology about how

00:04:52,360 --> 00:04:57,909
the component should work capturing the

00:04:55,030 --> 00:05:01,810
combination of structure States and

00:04:57,909 --> 00:05:05,440
interactions and there are about 70

00:05:01,810 --> 00:05:07,840
concrete total Aria roles and I would

00:05:05,440 --> 00:05:11,110
judge roughly half of them are relevant

00:05:07,840 --> 00:05:13,270
to UI component development you are

00:05:11,110 --> 00:05:15,069
probably very familiar with the very

00:05:13,270 --> 00:05:17,469
straightforward rules the button

00:05:15,069 --> 00:05:19,930
checkbox radio button link text box and

00:05:17,469 --> 00:05:21,879
so on these are captured by native

00:05:19,930 --> 00:05:24,580
browser elements and are the lowest

00:05:21,879 --> 00:05:26,620
level building block for everything that

00:05:24,580 --> 00:05:33,810
we built but there are more complex

00:05:26,620 --> 00:05:36,610
roles as well these are really the the

00:05:33,810 --> 00:05:37,990
main building blocks for the complex

00:05:36,610 --> 00:05:40,569
interactions that are seeing in most

00:05:37,990 --> 00:05:43,330
applications and really if you just know

00:05:40,569 --> 00:05:43,840
these six interactions you are in really

00:05:43,330 --> 00:05:46,719
good shape

00:05:43,840 --> 00:05:51,810
these are list box combo box grid dialog

00:05:46,719 --> 00:05:53,979
and new and tab lists and so in order to

00:05:51,810 --> 00:05:56,289
kind of show this off we're gonna play a

00:05:53,979 --> 00:05:58,060
little game called name that role

00:05:56,289 --> 00:06:00,279
normally this would be an audience

00:05:58,060 --> 00:06:01,990
participation section of the talk but

00:06:00,279 --> 00:06:04,840
because of our circumstances and the

00:06:01,990 --> 00:06:06,550
lack between the video and the chat I'm

00:06:04,840 --> 00:06:09,279
just gonna do the audience partition

00:06:06,550 --> 00:06:11,500
patient mark myself and so we're gonna

00:06:09,279 --> 00:06:12,909
look at an interaction pattern I'm

00:06:11,500 --> 00:06:15,520
trying to eat him Jeremy do you want me

00:06:12,909 --> 00:06:17,379
to do it you used here ah so first here

00:06:15,520 --> 00:06:18,879
we have this contact selection Jeremy

00:06:17,379 --> 00:06:20,979
you want me to be your audience member

00:06:18,879 --> 00:06:23,379
oh yeah frosty that'll be good all right

00:06:20,979 --> 00:06:24,940
I'm good so what do you would

00:06:23,379 --> 00:06:30,250
interaction pattern new things here real

00:06:24,940 --> 00:06:33,509
quick go I don't know that's some great

00:06:30,250 --> 00:06:37,840
audience the bad one sorry I don't know

00:06:33,509 --> 00:06:40,479
so the good one box check box this is

00:06:37,840 --> 00:06:42,610
check box interaction pattern yeah so

00:06:40,479 --> 00:06:46,029
you might think that but this is really

00:06:42,610 --> 00:06:49,089
a standard list box where you're

00:06:46,029 --> 00:06:51,669
selecting one or more values from a list

00:06:49,089 --> 00:06:52,690
of options all right what about this

00:06:51,669 --> 00:06:56,200
here where we have

00:06:52,690 --> 00:06:59,200
some chips that were using as filters a

00:06:56,200 --> 00:07:00,210
multi-select chip selector pill bottle I

00:06:59,200 --> 00:07:04,390
don't know I don't know it's called

00:07:00,210 --> 00:07:06,850
alright so yeah you uh those were some

00:07:04,390 --> 00:07:08,620
good ideas so checkbox is something you

00:07:06,850 --> 00:07:10,210
might think about here or toggle buttons

00:07:08,620 --> 00:07:12,970
because you're toggling things on and

00:07:10,210 --> 00:07:15,130
off but the surprising thing here is

00:07:12,970 --> 00:07:16,630
that list box is actually really

00:07:15,130 --> 00:07:19,120
appropriate here because you're

00:07:16,630 --> 00:07:19,960
selecting again values from a number of

00:07:19,120 --> 00:07:22,210
options

00:07:19,960 --> 00:07:24,190
and so even though this looks very

00:07:22,210 --> 00:07:26,950
visually different from this previous

00:07:24,190 --> 00:07:29,650
example where this looks more like a

00:07:26,950 --> 00:07:33,670
traditional list box these are actually

00:07:29,650 --> 00:07:36,280
the same interaction pattern here we

00:07:33,670 --> 00:07:38,380
have like a typical tabs interaction

00:07:36,280 --> 00:07:40,600
pattern and you would commonly think

00:07:38,380 --> 00:07:42,790
this is like tab list and tab and tab

00:07:40,600 --> 00:07:46,210
panel as a standard are your rules for

00:07:42,790 --> 00:07:51,520
that but if these tabs are changing the

00:07:46,210 --> 00:07:53,980
browser URL then you can also Express

00:07:51,520 --> 00:07:57,130
this as a nav element with anchors right

00:07:53,980 --> 00:07:58,870
so even though the visual is the same

00:07:57,130 --> 00:08:01,930
you can have multiple different

00:07:58,870 --> 00:08:05,550
interaction patterns that depend on how

00:08:01,930 --> 00:08:05,550
this is affecting the browser URL

00:08:05,560 --> 00:08:11,380
similarly for for this interaction right

00:08:08,140 --> 00:08:13,090
here there are cases where you could do

00:08:11,380 --> 00:08:14,830
something like this with listbox there

00:08:13,090 --> 00:08:17,980
are cases where you can use something

00:08:14,830 --> 00:08:19,330
like menu for this or combo box there

00:08:17,980 --> 00:08:21,700
are a lot of different options that

00:08:19,330 --> 00:08:25,030
could be applied to the same visual

00:08:21,700 --> 00:08:27,840
appearance and this can get really

00:08:25,030 --> 00:08:30,370
complex too you can end up having a more

00:08:27,840 --> 00:08:32,050
sophisticated component like this and

00:08:30,370 --> 00:08:34,060
I'm sure many enterprise applications

00:08:32,050 --> 00:08:36,219
that people here have worked on you have

00:08:34,060 --> 00:08:38,099
had to build components like this you've

00:08:36,219 --> 00:08:40,419
had mocks for things like this and

00:08:38,099 --> 00:08:43,450
because there's so much going on it can

00:08:40,419 --> 00:08:45,040
be difficult to figure out how users

00:08:43,450 --> 00:08:47,620
should interact with this what the

00:08:45,040 --> 00:08:49,930
keyboard shortcuts can be and so on and

00:08:47,620 --> 00:08:53,050
so the thing I really want to emphasize

00:08:49,930 --> 00:08:55,990
with all of this is that it's not always

00:08:53,050 --> 00:08:58,720
immediately obvious which pattern Maps

00:08:55,990 --> 00:09:00,640
all into a component and that's why when

00:08:58,720 --> 00:09:02,529
you're going into your design process

00:09:00,640 --> 00:09:05,439
and you're going into building something

00:09:02,529 --> 00:09:08,019
you should always start with your set of

00:09:05,439 --> 00:09:10,980
interaction patterns this is going to

00:09:08,019 --> 00:09:13,449
lead to the most consistent predictable

00:09:10,980 --> 00:09:15,300
experiences in your application because

00:09:13,449 --> 00:09:17,860
you're going to be using these

00:09:15,300 --> 00:09:20,350
standardized well understood patterns

00:09:17,860 --> 00:09:23,620
and composing them together into a

00:09:20,350 --> 00:09:25,410
larger experience this approach also has

00:09:23,620 --> 00:09:28,959
the benefit of making your design

00:09:25,410 --> 00:09:30,939
accessibility first so when you start

00:09:28,959 --> 00:09:32,230
with the Aria interaction patterns

00:09:30,939 --> 00:09:34,809
you're going to have a much easier time

00:09:32,230 --> 00:09:37,240
building interfaces that everyone can

00:09:34,809 --> 00:09:38,829
use and it's kind of an example here we

00:09:37,240 --> 00:09:41,800
can look at that complex component I

00:09:38,829 --> 00:09:46,089
showed us a moment ago and you can see

00:09:41,800 --> 00:09:47,980
we can decompose this visual into a set

00:09:46,089 --> 00:09:50,589
of interaction patterns that make sense

00:09:47,980 --> 00:09:53,290
where we have in this example a button

00:09:50,589 --> 00:09:56,019
that opens a dialog and that dialog can

00:09:53,290 --> 00:09:58,540
contain other buttons text inputs and a

00:09:56,019 --> 00:10:02,050
list box along with again more buttons

00:09:58,540 --> 00:10:05,439
and when you decompose this way at the

00:10:02,050 --> 00:10:09,180
start you are making your component

00:10:05,439 --> 00:10:12,600
easier to reason about easier to use and

00:10:09,180 --> 00:10:16,809
you're gonna have experiences that all

00:10:12,600 --> 00:10:19,449
instantly connect with and so that is

00:10:16,809 --> 00:10:20,980
talking about how to go about thinking

00:10:19,449 --> 00:10:24,490
about the behavior and the logic of your

00:10:20,980 --> 00:10:27,910
code but obviously styles are a big part

00:10:24,490 --> 00:10:31,089
of component building as well and the

00:10:27,910 --> 00:10:32,649
main thing I've learned about styles in

00:10:31,089 --> 00:10:35,740
terms of building common components is

00:10:32,649 --> 00:10:39,370
that style customization is inevitable

00:10:35,740 --> 00:10:40,899
and as you come to terms with this

00:10:39,370 --> 00:10:44,620
you're going to go through the five

00:10:40,899 --> 00:10:47,110
stages of people overriding your CSS so

00:10:44,620 --> 00:10:49,779
starting off with denial nobody is

00:10:47,110 --> 00:10:52,740
allowed to override my CSS you'll move

00:10:49,779 --> 00:10:55,420
into anger people are overriding my CSS

00:10:52,740 --> 00:10:59,620
Bargaining how can I stop you from

00:10:55,420 --> 00:11:01,000
overriding my CSS sadness all front-end

00:10:59,620 --> 00:11:03,490
applications are

00:11:01,000 --> 00:11:07,530
of cards that will come running down at

00:11:03,490 --> 00:11:11,740
any moments and finally acceptance

00:11:07,530 --> 00:11:13,780
people mean to override my CSS but that

00:11:11,740 --> 00:11:16,720
doesn't mean you're just gonna write

00:11:13,780 --> 00:11:18,280
your CSS and hope for the best

00:11:16,720 --> 00:11:20,470
there are some practical scoping

00:11:18,280 --> 00:11:23,710
appropriate coping sketch strategies you

00:11:20,470 --> 00:11:25,540
can have in order to give people the

00:11:23,710 --> 00:11:27,910
kinds of customization they need while

00:11:25,540 --> 00:11:29,890
also not making your components

00:11:27,910 --> 00:11:33,820
completely impossible to maintain

00:11:29,890 --> 00:11:36,820
so my favorite approach for dealing with

00:11:33,820 --> 00:11:39,490
this as the idea of parameterised sass

00:11:36,820 --> 00:11:41,500
mix-ins so this is where you are taking

00:11:39,490 --> 00:11:43,480
the styles for your component and you're

00:11:41,500 --> 00:11:46,990
capturing them inside of a sass mixin

00:11:43,480 --> 00:11:50,290
that is accepting some configuration

00:11:46,990 --> 00:11:54,850
block that includes all of the values

00:11:50,290 --> 00:11:57,220
that can control how your component

00:11:54,850 --> 00:11:59,050
renders and so this is an example if

00:11:57,220 --> 00:12:02,350
you're having a component called the

00:11:59,050 --> 00:12:04,060
Swiffer picker you are accepting this

00:12:02,350 --> 00:12:07,120
configuration option that has a size

00:12:04,060 --> 00:12:09,850
option and a primary color option and we

00:12:07,120 --> 00:12:11,710
can pull the values out of that

00:12:09,850 --> 00:12:14,170
configuration and apply them to our CSS

00:12:11,710 --> 00:12:15,820
and when someone uses a component

00:12:14,170 --> 00:12:17,380
component it looks like this where

00:12:15,820 --> 00:12:20,410
they're just including your mixin and

00:12:17,380 --> 00:12:22,150
passing in those parameters and what I

00:12:20,410 --> 00:12:26,290
really like is the idea of extending

00:12:22,150 --> 00:12:29,710
this concept to then further decompose a

00:12:26,290 --> 00:12:32,110
component styles into configurable

00:12:29,710 --> 00:12:33,700
categories and so you could imagine

00:12:32,110 --> 00:12:35,470
these categories as being something like

00:12:33,700 --> 00:12:38,130
base which would be your components base

00:12:35,470 --> 00:12:41,140
styles and then color typography

00:12:38,130 --> 00:12:43,720
animations in angular material we're

00:12:41,140 --> 00:12:46,060
working on adding density as an option

00:12:43,720 --> 00:12:51,850
like this and this is really great

00:12:46,060 --> 00:12:53,650
because it lets you compose styles at

00:12:51,850 --> 00:12:55,960
the application level in a really

00:12:53,650 --> 00:12:58,150
granular way and because these are SAS

00:12:55,960 --> 00:13:01,960
mix-ins you can take any one of these

00:12:58,150 --> 00:13:04,300
and scope it to a particular CSS

00:13:01,960 --> 00:13:06,250
selector such as a class and have it

00:13:04,300 --> 00:13:08,620
only apply within that section of your

00:13:06,250 --> 00:13:10,660
application which means that you

00:13:08,620 --> 00:13:14,140
have much more control over the amount

00:13:10,660 --> 00:13:16,180
of CSS you are generating and this is

00:13:14,140 --> 00:13:19,630
the approach that we take today with

00:13:16,180 --> 00:13:22,000
angular material this does make your

00:13:19,630 --> 00:13:24,160
components it requires a little bit more

00:13:22,000 --> 00:13:27,000
effort to build because you have to put

00:13:24,160 --> 00:13:31,630
in the time to separate your Styles into

00:13:27,000 --> 00:13:32,980
different pieces but I find that overall

00:13:31,630 --> 00:13:36,310
it leads to more maintainable

00:13:32,980 --> 00:13:38,860
experiences you may be wondering what

00:13:36,310 --> 00:13:42,730
about CSS variables as part of this

00:13:38,860 --> 00:13:44,440
right why not use those as part in order

00:13:42,730 --> 00:13:47,800
to deal with this problem and CSS

00:13:44,440 --> 00:13:49,780
variables are a part of solution to this

00:13:47,800 --> 00:13:52,060
problems they provide a native way to

00:13:49,780 --> 00:13:54,970
create clearly defined customization

00:13:52,060 --> 00:13:57,280
points however they are restricted to

00:13:54,970 --> 00:13:59,560
single values which requires that

00:13:57,280 --> 00:14:02,110
component authors encode every single

00:13:59,560 --> 00:14:05,380
customizable property into a variable

00:14:02,110 --> 00:14:07,960
and this can potentially get cumbersome

00:14:05,380 --> 00:14:10,360
and difficult to maintain it might also

00:14:07,960 --> 00:14:13,180
have performance issues if you really

00:14:10,360 --> 00:14:15,670
really care about your render speed and

00:14:13,180 --> 00:14:18,460
your poly filling so the polyfills here

00:14:15,670 --> 00:14:19,690
can get expensive and obviously all CSS

00:14:18,460 --> 00:14:22,330
variables are not supported in older

00:14:19,690 --> 00:14:25,330
browsers ie 11 and back another

00:14:22,330 --> 00:14:27,340
technology that is kind of newer here on

00:14:25,330 --> 00:14:30,130
that is a could be thought about as a

00:14:27,340 --> 00:14:32,620
partial solution to this problem in CSS

00:14:30,130 --> 00:14:36,190
parts and this is an emerging standard

00:14:32,620 --> 00:14:38,530
that allows people to customize certain

00:14:36,190 --> 00:14:40,000
parts that are clearly defined by a

00:14:38,530 --> 00:14:43,210
component author in a shadow Dom

00:14:40,000 --> 00:14:44,860
scenario and again this is a future

00:14:43,210 --> 00:14:46,390
partial solution to this problem it's

00:14:44,860 --> 00:14:49,320
not supported in older browsers like IE

00:14:46,390 --> 00:14:54,160
11 and it's not yet supported in Safari

00:14:49,320 --> 00:14:55,870
Allah and this wallet solve some

00:14:54,160 --> 00:14:58,330
problems does have a lot of the same

00:14:55,870 --> 00:15:00,520
problems as traditional CSS overriding

00:14:58,330 --> 00:15:02,200
in that people make assumptions about

00:15:00,520 --> 00:15:04,180
what styles are present and people may

00:15:02,200 --> 00:15:08,530
override styles in a way that you don't

00:15:04,180 --> 00:15:11,020
anticipate so that is talking about

00:15:08,530 --> 00:15:12,850
styles we talked a bit about how to go

00:15:11,020 --> 00:15:15,190
about thinking about composing behavior

00:15:12,850 --> 00:15:16,960
and logic in your component on one last

00:15:15,190 --> 00:15:20,720
area of composition I want to talk about

00:15:16,960 --> 00:15:24,410
is API design and in particular the

00:15:20,720 --> 00:15:27,260
yeah letting the user of your component

00:15:24,410 --> 00:15:28,820
compose parts and here by user I mean

00:15:27,260 --> 00:15:31,580
the developer or the engineer that's

00:15:28,820 --> 00:15:34,520
going to be using the component and to

00:15:31,580 --> 00:15:36,170
do this we're gonna play another quick

00:15:34,520 --> 00:15:38,840
game that I think frosty if you're there

00:15:36,170 --> 00:15:41,600
you can you can participate in all right

00:15:38,840 --> 00:15:45,260
so I'm writing the name ready a

00:15:41,600 --> 00:15:47,420
component and just real quick name as

00:15:45,260 --> 00:15:49,130
many features as you can for this

00:15:47,420 --> 00:15:50,930
component if you're watching on the

00:15:49,130 --> 00:15:55,550
stream try not to overwhelm the chat

00:15:50,930 --> 00:16:00,230
with this so frosty data table filter

00:15:55,550 --> 00:16:03,800
sort page selectors column selectors

00:16:00,230 --> 00:16:05,330
column hiders yeah that good yeah that's

00:16:03,800 --> 00:16:07,790
great that's great these are some of the

00:16:05,330 --> 00:16:09,950
things you've probably said summer day

00:16:07,790 --> 00:16:11,180
pagination filtering selection sticky

00:16:09,950 --> 00:16:13,040
headers in columns drag and dropping

00:16:11,180 --> 00:16:15,320
rows virtual scrolling inline it it both

00:16:13,040 --> 00:16:18,200
can it and on and on data tables are

00:16:15,320 --> 00:16:20,720
very complex and there are a whole huge

00:16:18,200 --> 00:16:23,480
baking implementations out there a big

00:16:20,720 --> 00:16:26,240
area of work and so if we're going to go

00:16:23,480 --> 00:16:27,680
build a component that like has all of

00:16:26,240 --> 00:16:31,010
these features then we're gonna just

00:16:27,680 --> 00:16:32,600
really need one big massive API surface

00:16:31,010 --> 00:16:35,150
we're gonna have a component that looks

00:16:32,600 --> 00:16:37,910
like this where it's gonna be taking in

00:16:35,150 --> 00:16:39,320
its data it's gonna have sort columns

00:16:37,910 --> 00:16:41,480
and sort directions and whether or not

00:16:39,320 --> 00:16:42,770
you're doing multiple sorting and what

00:16:41,480 --> 00:16:44,650
people can do with the sword and the

00:16:42,770 --> 00:16:47,690
pagination options and the sticky

00:16:44,650 --> 00:16:51,980
options and boy that's that's a really

00:16:47,690 --> 00:16:53,300
really big API surface and when we build

00:16:51,980 --> 00:16:56,780
all of these features into one API

00:16:53,300 --> 00:16:58,370
surface especially if we talk about

00:16:56,780 --> 00:17:00,950
things like client versus a surface ID

00:16:58,370 --> 00:17:03,680
data manipulation it gets really

00:17:00,950 --> 00:17:05,750
complicated especially as you're talking

00:17:03,680 --> 00:17:07,850
about all the permutations of these

00:17:05,750 --> 00:17:10,970
different options and with this approach

00:17:07,850 --> 00:17:12,589
as a consumer it's also difficult to do

00:17:10,970 --> 00:17:16,280
anything in the component that's not

00:17:12,589 --> 00:17:18,829
directly supported by that component and

00:17:16,280 --> 00:17:21,490
that means that when your UX designer

00:17:18,829 --> 00:17:25,910
comes to you with their revolutionary

00:17:21,490 --> 00:17:28,160
innovative new UI for pagination then

00:17:25,910 --> 00:17:29,810
you're stuck because you don't have a

00:17:28,160 --> 00:17:33,000
way to reach into the component

00:17:29,810 --> 00:17:36,360
internals and change that

00:17:33,000 --> 00:17:38,420
so what you can do about this is go

00:17:36,360 --> 00:17:41,490
about designing your UI components as

00:17:38,420 --> 00:17:43,380
composable parts that the person using

00:17:41,490 --> 00:17:46,440
that component is going to compose

00:17:43,380 --> 00:17:49,500
together and as an example here in

00:17:46,440 --> 00:17:51,420
angular material we have this mat table

00:17:49,500 --> 00:17:53,910
component that you know standard table

00:17:51,420 --> 00:17:56,460
renders rows of cells we also have a

00:17:53,910 --> 00:17:58,790
paginate ER for moving between pages of

00:17:56,460 --> 00:18:01,410
data we have a sort header sorting and

00:17:58,790 --> 00:18:03,810
going into this we made the decision

00:18:01,410 --> 00:18:06,180
that these components don't know about

00:18:03,810 --> 00:18:09,450
each other at all they are absolutely

00:18:06,180 --> 00:18:12,120
decoupled instead you set up your

00:18:09,450 --> 00:18:16,200
application so that you have a single

00:18:12,120 --> 00:18:19,230
data source that is the source of truth

00:18:16,200 --> 00:18:21,270
for all of these things in data flows

00:18:19,230 --> 00:18:23,910
from the data source independently into

00:18:21,270 --> 00:18:26,100
the table the paginate ER and the sort

00:18:23,910 --> 00:18:29,060
header and you can extend this model to

00:18:26,100 --> 00:18:31,530
also include filtering selection state

00:18:29,060 --> 00:18:33,540
keyboard navigation and so on without

00:18:31,530 --> 00:18:35,730
any of these pieces necessarily knowing

00:18:33,540 --> 00:18:38,130
about each other and it's not just the

00:18:35,730 --> 00:18:39,690
table in angular material we take this

00:18:38,130 --> 00:18:41,790
approach for other components as well

00:18:39,690 --> 00:18:44,730
you can see autocomplete as a

00:18:41,790 --> 00:18:46,980
composition of text input and an options

00:18:44,730 --> 00:18:49,170
panel a menu as a trigger button and an

00:18:46,980 --> 00:18:52,290
options panel and a date picker is a

00:18:49,170 --> 00:18:55,710
text input a trigger button and a

00:18:52,290 --> 00:18:57,450
calendar panel in code this could look

00:18:55,710 --> 00:19:00,510
something like this where you have a

00:18:57,450 --> 00:19:03,240
button and this is just a regular

00:19:00,510 --> 00:19:05,610
standalone button and you're adding some

00:19:03,240 --> 00:19:07,320
directive here in this example that is

00:19:05,610 --> 00:19:10,910
just pointing to the menu menu panel

00:19:07,320 --> 00:19:13,590
that gets opened as part of this and

00:19:10,910 --> 00:19:16,650
this is really nice because it provides

00:19:13,590 --> 00:19:17,910
some flexibility and it's also kind of

00:19:16,650 --> 00:19:19,500
easy to reason about if you want to

00:19:17,910 --> 00:19:21,030
style the button you style the button if

00:19:19,500 --> 00:19:22,650
you want to style the menu panel you

00:19:21,030 --> 00:19:24,210
style the menu panel if you want to swap

00:19:22,650 --> 00:19:27,450
out to a different menu panel you can

00:19:24,210 --> 00:19:29,310
swap out two different menu panel the

00:19:27,450 --> 00:19:31,380
benefits here is that your your code

00:19:29,310 --> 00:19:33,720
ends up much better following the idea

00:19:31,380 --> 00:19:36,290
of single responsibility because each

00:19:33,720 --> 00:19:39,540
part gets to focus on just doing one job

00:19:36,290 --> 00:19:41,490
again you get more flexibility because

00:19:39,540 --> 00:19:43,660
you can change out parts you can

00:19:41,490 --> 00:19:45,010
customize parts independently and

00:19:43,660 --> 00:19:47,950
thing I really like about this approach

00:19:45,010 --> 00:19:49,540
is that it surfaces native elements like

00:19:47,950 --> 00:19:52,330
you saw the button element in that

00:19:49,540 --> 00:19:54,760
example in our table we use native table

00:19:52,330 --> 00:19:56,860
elements in our bigger

00:19:54,760 --> 00:19:59,350
you know native text fields new button

00:19:56,860 --> 00:20:01,450
and this is really great because it

00:19:59,350 --> 00:20:02,950
reinforces the idea that people should

00:20:01,450 --> 00:20:04,750
be using native elements for

00:20:02,950 --> 00:20:07,210
accessibility and not reinventing things

00:20:04,750 --> 00:20:09,010
that already exist in the browser well

00:20:07,210 --> 00:20:11,020
there are some cons to this approach too

00:20:09,010 --> 00:20:12,700
though never believe somebody that only

00:20:11,020 --> 00:20:13,300
has positive things to tell you about

00:20:12,700 --> 00:20:16,810
something

00:20:13,300 --> 00:20:19,870
so you can end up with much more verbose

00:20:16,810 --> 00:20:23,710
api's when using this approach and you

00:20:19,870 --> 00:20:27,730
can end up with in total larger api

00:20:23,710 --> 00:20:29,740
surfaces however those api surfaces tend

00:20:27,730 --> 00:20:32,590
to be easier reason about because

00:20:29,740 --> 00:20:37,900
they're split up into smaller easier to

00:20:32,590 --> 00:20:40,510
understand sections so concluding and

00:20:37,900 --> 00:20:43,360
wrapping all of this up the fundamental

00:20:40,510 --> 00:20:46,360
idea that i want to get across in this

00:20:43,360 --> 00:20:48,730
talk across all of these concepts of

00:20:46,360 --> 00:20:50,860
starting with interaction patterns and

00:20:48,730 --> 00:20:53,860
decomposing styles into categories and

00:20:50,860 --> 00:20:55,540
allowing users to compose api's is that

00:20:53,860 --> 00:20:59,440
as you're going into building components

00:20:55,540 --> 00:21:01,510
focus on decomposing what you can and be

00:20:59,440 --> 00:21:04,450
very deliver a bit deliberate about

00:21:01,510 --> 00:21:08,140
recomposition in particular where that

00:21:04,450 --> 00:21:10,180
composition happens as you're going

00:21:08,140 --> 00:21:14,320
forward in writing design documents for

00:21:10,180 --> 00:21:16,330
new components sit down and write how

00:21:14,320 --> 00:21:17,650
the composition of patterns and Aria

00:21:16,330 --> 00:21:19,870
roles that are going to happen in your

00:21:17,650 --> 00:21:22,450
components write down the different

00:21:19,870 --> 00:21:23,800
types of style categories that you're

00:21:22,450 --> 00:21:25,900
going to deal with and how people might

00:21:23,800 --> 00:21:27,070
customize them when you start off

00:21:25,900 --> 00:21:29,020
thinking about these things from the

00:21:27,070 --> 00:21:31,510
beginning they're a lot easier to deal

00:21:29,020 --> 00:21:35,850
with know that customization is

00:21:31,510 --> 00:21:39,580
inevitable so build for flexibility and

00:21:35,850 --> 00:21:42,760
in that flexibility as you're deciding

00:21:39,580 --> 00:21:44,710
how much flexibility to offer know that

00:21:42,760 --> 00:21:47,410
all design choices have trade-offs right

00:21:44,710 --> 00:21:49,420
as you introduce flexibility you are

00:21:47,410 --> 00:21:52,390
trading off that in some time in some

00:21:49,420 --> 00:21:55,330
cases for verbosity or larger api

00:21:52,390 --> 00:21:56,690
surfaces and so it's always up to the

00:21:55,330 --> 00:21:58,220
application to decide what's

00:21:56,690 --> 00:22:01,400
for them and this is the fundamental

00:21:58,220 --> 00:22:03,650
nature of software engineering that's

00:22:01,400 --> 00:22:05,450
all I have to talk about today thank you

00:22:03,650 --> 00:22:07,700
again for joining you can find more

00:22:05,450 --> 00:22:10,550
about angular material in angular cdk on

00:22:07,700 --> 00:22:12,350
github on the angular components repo on

00:22:10,550 --> 00:22:14,360
material about angle that I owe and you

00:22:12,350 --> 00:22:20,590
can find a link to these slides at Chico

00:22:14,360 --> 00:22:20,590
/ng / twenty - components thank you

00:22:21,020 --> 00:22:22,680
[Music]

00:22:21,200 --> 00:22:27,330
[Applause]

00:22:22,680 --> 00:22:29,370
[Music]

00:22:27,330 --> 00:22:34,080
[Applause]

00:22:29,370 --> 00:22:34,080

YouTube URL: https://www.youtube.com/watch?v=oHTm5LYkgEY


