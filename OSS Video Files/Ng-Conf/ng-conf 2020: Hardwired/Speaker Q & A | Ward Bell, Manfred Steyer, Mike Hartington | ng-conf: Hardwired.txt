Title: Speaker Q & A | Ward Bell, Manfred Steyer, Mike Hartington | ng-conf: Hardwired
Publication date: 2020-07-18
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Q&A Panel with Manfred Steyer, Ward Bell and Mike Hartington

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,119 --> 00:00:20,560
all right everybody

00:00:18,560 --> 00:00:22,080
we're here for our q and a session

00:00:20,560 --> 00:00:24,640
gentlemen great job on your talks how

00:00:22,080 --> 00:00:24,640
you guys doing

00:00:24,720 --> 00:00:29,039
pretty good how you holding up on this

00:00:26,640 --> 00:00:32,480
uh this crazy pandemic area you guys

00:00:29,039 --> 00:00:32,480
doing okay your family's okay

00:00:33,200 --> 00:00:36,320
yeah we were really shelter in place

00:00:35,360 --> 00:00:37,600
people yeah

00:00:36,320 --> 00:00:39,840
california is definitely sheltering

00:00:37,600 --> 00:00:42,399
place mike where are you at

00:00:39,840 --> 00:00:44,719
uh in rhode island basically shelter in

00:00:42,399 --> 00:00:48,160
place to begin with manfred you're in

00:00:44,719 --> 00:00:48,160
you're in austria or germany

00:00:48,640 --> 00:00:53,120
manfred you're in austria or you're in

00:00:51,760 --> 00:00:55,360
germany

00:00:53,120 --> 00:00:56,239
i'm in austria currently yeah is it

00:00:55,360 --> 00:00:58,480
crazy over there

00:00:56,239 --> 00:01:00,559
a lot of you guys basically stay in

00:00:58,480 --> 00:01:03,280
shelter in place

00:01:00,559 --> 00:01:05,680
yeah so we have to shut down and we

00:01:03,280 --> 00:01:08,320
shall not leave the home and we have to

00:01:05,680 --> 00:01:11,040
wear masks if we go to the grocery

00:01:08,320 --> 00:01:12,080
okay so it's a bit a different situation

00:01:11,040 --> 00:01:14,080
okay cool

00:01:12,080 --> 00:01:16,080
um well we're gonna ask the audience

00:01:14,080 --> 00:01:17,680
real quick everybody if you look at the

00:01:16,080 --> 00:01:19,439
crowdcast app

00:01:17,680 --> 00:01:21,280
underneath the video there's a q a

00:01:19,439 --> 00:01:23,040
section or question section

00:01:21,280 --> 00:01:24,479
if you click in there you can actually

00:01:23,040 --> 00:01:25,840
ask questions

00:01:24,479 --> 00:01:27,520
and you can upload other people's

00:01:25,840 --> 00:01:28,799
questions currently all the questions

00:01:27,520 --> 00:01:29,680
there have to do with like live

00:01:28,799 --> 00:01:32,720
streaming

00:01:29,680 --> 00:01:35,600
questions and swag and

00:01:32,720 --> 00:01:37,600
and other stuff maybe um stop doing

00:01:35,600 --> 00:01:39,360
those questions for a few minutes

00:01:37,600 --> 00:01:41,200
and start doing questions that have to

00:01:39,360 --> 00:01:42,079
do with these three gentlemen's talks

00:01:41,200 --> 00:01:43,119
that just happened

00:01:42,079 --> 00:01:47,200
because that's kind of what we're here

00:01:43,119 --> 00:01:47,200
to talk about so um

00:01:47,280 --> 00:01:50,720
i guess what questions gentlemen did you

00:01:50,000 --> 00:01:52,840
guys see

00:01:50,720 --> 00:01:54,880
did you guys see kara's talk at the

00:01:52,840 --> 00:01:56,960
beginning

00:01:54,880 --> 00:01:59,600
nice that's kind of that yeah you yeah

00:01:56,960 --> 00:02:01,680
the three of you you see charis talk

00:01:59,600 --> 00:02:02,960
i was on deck so i couldn't yeah yeah

00:02:01,680 --> 00:02:03,759
yeah that's right you were on deck so

00:02:02,960 --> 00:02:06,560
you couldn't see it

00:02:03,759 --> 00:02:08,560
all right so um i guess this question

00:02:06,560 --> 00:02:10,399
i'm gonna throw it out there to anybody

00:02:08,560 --> 00:02:12,080
are there any good pattern to load

00:02:10,399 --> 00:02:15,040
components where the component isn't

00:02:12,080 --> 00:02:15,040
known at runtime

00:02:16,160 --> 00:02:21,760
that's a question so patterns for

00:02:19,040 --> 00:02:23,599
loading components that are not known at

00:02:21,760 --> 00:02:26,640
runtime was that the question

00:02:23,599 --> 00:02:28,879
yeah yeah it's not known until runtime

00:02:26,640 --> 00:02:28,879
yeah

00:02:29,040 --> 00:02:33,200
when the compiler runs yeah well no

00:02:31,599 --> 00:02:34,400
that's the compile time

00:02:33,200 --> 00:02:36,959
is there any way are there any good

00:02:34,400 --> 00:02:38,640
patterns for loading components

00:02:36,959 --> 00:02:40,239
that you don't know until runtime so

00:02:38,640 --> 00:02:41,840
more of like a dynamic loading of a

00:02:40,239 --> 00:02:44,560
component

00:02:41,840 --> 00:02:46,720
oh yeah yeah now i've got you well of

00:02:44,560 --> 00:02:48,959
course you could do this lazy loading

00:02:46,720 --> 00:02:51,599
i've shown in my presentation

00:02:48,959 --> 00:02:52,480
and one thing that makes loading

00:02:51,599 --> 00:02:56,000
components

00:02:52,480 --> 00:02:58,879
very very easy is using web components

00:02:56,000 --> 00:03:00,879
because a web component is just a script

00:02:58,879 --> 00:03:03,519
and after it has been loaded

00:03:00,879 --> 00:03:05,200
into the browser you just have a new

00:03:03,519 --> 00:03:08,480
html deck

00:03:05,200 --> 00:03:10,800
furthermore there are some work arounds

00:03:08,480 --> 00:03:13,280
where people tried to create something

00:03:10,800 --> 00:03:15,680
like a plugin system but currently

00:03:13,280 --> 00:03:17,840
i would either go with lazy loading or

00:03:15,680 --> 00:03:21,440
with web

00:03:17,840 --> 00:03:24,879
gotcha gotcha so um

00:03:21,440 --> 00:03:26,720
mike i know that you you wanted to speak

00:03:24,879 --> 00:03:28,799
about builders because

00:03:26,720 --> 00:03:29,920
you felt the frustration of like many

00:03:28,799 --> 00:03:31,760
others of like

00:03:29,920 --> 00:03:33,680
trying to know what they are and not

00:03:31,760 --> 00:03:35,280
being able to find anything

00:03:33,680 --> 00:03:37,040
what do you what's your current take on

00:03:35,280 --> 00:03:38,560
like the builder api and

00:03:37,040 --> 00:03:40,799
and i know you've done a lot with it

00:03:38,560 --> 00:03:42,239
what's your current take on it and like

00:03:40,799 --> 00:03:45,519
how how big do you think it's going to

00:03:42,239 --> 00:03:48,400
be for the annual community

00:03:45,519 --> 00:03:49,200
um i think it's going to be pretty big i

00:03:48,400 --> 00:03:51,840
mean

00:03:49,200 --> 00:03:52,720
so builders exist existed for a couple

00:03:51,840 --> 00:03:55,599
versions now

00:03:52,720 --> 00:03:57,280
uh and there was a previous uh version

00:03:55,599 --> 00:04:00,640
of builders in like angular

00:03:57,280 --> 00:04:02,400
6 of the cli

00:04:00,640 --> 00:04:04,480
that it was it was okay it was

00:04:02,400 --> 00:04:05,120
class-based but i think the approach to

00:04:04,480 --> 00:04:08,159
moving to

00:04:05,120 --> 00:04:10,480
just functions for this newest release

00:04:08,159 --> 00:04:11,920
uh makes things a lot simpler and

00:04:10,480 --> 00:04:15,519
actually lets people

00:04:11,920 --> 00:04:18,720
you know potentially build their own um

00:04:15,519 --> 00:04:20,639
i know before we had we had an ejection

00:04:18,720 --> 00:04:22,320
for people who wanted to

00:04:20,639 --> 00:04:24,160
extend the builder by using their own

00:04:22,320 --> 00:04:27,199
web pack stuff but i think

00:04:24,160 --> 00:04:29,840
the current solution makes it a lot

00:04:27,199 --> 00:04:31,440
cleaner to do and opens up so many

00:04:29,840 --> 00:04:33,680
possibilities for people to just

00:04:31,440 --> 00:04:35,199
add their own touches to their project

00:04:33,680 --> 00:04:37,520
that makes it

00:04:35,199 --> 00:04:39,919
their own and also integrates it with

00:04:37,520 --> 00:04:42,000
angular's own ecosystem

00:04:39,919 --> 00:04:43,600
cool a great example of it is manfred's

00:04:42,000 --> 00:04:44,720
ngx build plus

00:04:43,600 --> 00:04:47,680
like that stuff wouldn't have been

00:04:44,720 --> 00:04:50,560
possible without builders no i agree

00:04:47,680 --> 00:04:51,919
njx bill post manfred you're my hero on

00:04:50,560 --> 00:04:55,680
that thing by the way

00:04:51,919 --> 00:04:57,280
um without that um

00:04:55,680 --> 00:04:58,960
ng upgrade would be so much more

00:04:57,280 --> 00:05:00,880
difficult you you really

00:04:58,960 --> 00:05:03,199
bailed me out like i love your builder

00:05:00,880 --> 00:05:05,919
bro i love your builder

00:05:03,199 --> 00:05:06,880
oh cool i'm really happy it's helpful

00:05:05,919 --> 00:05:08,560
super helpful

00:05:06,880 --> 00:05:10,080
and you've been you've given us like on

00:05:08,560 --> 00:05:12,560
the spot support it's crazy

00:05:10,080 --> 00:05:14,479
i really really appreciate it thank you

00:05:12,560 --> 00:05:17,120
um

00:05:14,479 --> 00:05:18,479
so we got a question for manfred we have

00:05:17,120 --> 00:05:21,759
a question for ward

00:05:18,479 --> 00:05:22,800
so man for this they're asking felix

00:05:21,759 --> 00:05:24,479
asked

00:05:22,800 --> 00:05:26,560
memphis said ng modules won't be

00:05:24,479 --> 00:05:28,800
necessary anymore do you think that it's

00:05:26,560 --> 00:05:30,800
beneficial to not have them at all

00:05:28,800 --> 00:05:34,479
don't you think that they enforce the

00:05:30,800 --> 00:05:37,120
clean and modular application structure

00:05:34,479 --> 00:05:38,000
well i guess it's a matter of taste i'm

00:05:37,120 --> 00:05:41,360
sure you can

00:05:38,000 --> 00:05:42,320
write clean and reusable code without ng

00:05:41,360 --> 00:05:44,880
modules

00:05:42,320 --> 00:05:46,240
but some people really like ng modules

00:05:44,880 --> 00:05:49,680
because they group

00:05:46,240 --> 00:05:51,360
components together and so in the future

00:05:49,680 --> 00:05:54,479
if this is implemented

00:05:51,360 --> 00:05:57,039
i guess both will work so it's up to you

00:05:54,479 --> 00:05:57,600
but what i always recommend my customers

00:05:57,039 --> 00:06:01,919
is

00:05:57,600 --> 00:06:03,680
talk to the dev team and find one way of

00:06:01,919 --> 00:06:06,160
doing things because

00:06:03,680 --> 00:06:08,000
it does not come to a good and if some

00:06:06,160 --> 00:06:09,280
people in the team are working without

00:06:08,000 --> 00:06:12,160
energy monitors

00:06:09,280 --> 00:06:13,120
and other ones work with ng modules yeah

00:06:12,160 --> 00:06:15,039
yeah yeah so like

00:06:13,120 --> 00:06:16,400
half the team's doing thing hey half the

00:06:15,039 --> 00:06:19,600
team's doing thing b

00:06:16,400 --> 00:06:23,280
not great right yeah yeah i agree

00:06:19,600 --> 00:06:25,440
um thanks for the answer there uh ward

00:06:23,280 --> 00:06:29,600
question for you is it possible to

00:06:25,440 --> 00:06:29,600
inject services within interceptors

00:06:29,919 --> 00:06:35,840
yes and i showed several

00:06:33,360 --> 00:06:36,960
instances in which we were doing that

00:06:35,840 --> 00:06:41,120
and it's as simple

00:06:36,960 --> 00:06:42,960
as um as a any other service class that

00:06:41,120 --> 00:06:44,240
takes a dependency just put it in the

00:06:42,960 --> 00:06:48,080
constructor and you're

00:06:44,240 --> 00:06:50,960
ready to go so so the question is

00:06:48,080 --> 00:06:52,479
if you inject a service into an

00:06:50,960 --> 00:06:54,400
interceptor

00:06:52,479 --> 00:06:55,919
do the requests made in that service

00:06:54,400 --> 00:06:58,720
don't they also

00:06:55,919 --> 00:07:00,400
like inceptively go back through the

00:06:58,720 --> 00:07:01,919
same interceptor that you're building

00:07:00,400 --> 00:07:03,440
so like the question is isn't there like

00:07:01,919 --> 00:07:05,440
an inception circular

00:07:03,440 --> 00:07:07,520
problem thing okay so what you're

00:07:05,440 --> 00:07:09,759
talking about is where the injected

00:07:07,520 --> 00:07:13,520
service uses http client itself

00:07:09,759 --> 00:07:14,880
hello there you are uh uh whereas i was

00:07:13,520 --> 00:07:16,560
i was talking about other kinds of

00:07:14,880 --> 00:07:18,080
services that don't okay

00:07:16,560 --> 00:07:19,680
and yeah you'll get a circular

00:07:18,080 --> 00:07:22,960
dependency there

00:07:19,680 --> 00:07:23,599
and now it it is true that the call you

00:07:22,960 --> 00:07:25,199
make

00:07:23,599 --> 00:07:26,720
first of all even to get it in there you

00:07:25,199 --> 00:07:28,639
probably have to inject the injector and

00:07:26,720 --> 00:07:31,599
then ask the injector to get it out

00:07:28,639 --> 00:07:32,880
dynamically and then once you had http

00:07:31,599 --> 00:07:33,599
client and then you were trying to issue

00:07:32,880 --> 00:07:36,080
something

00:07:33,599 --> 00:07:36,639
you have to be very careful what you

00:07:36,080 --> 00:07:38,800
asked

00:07:36,639 --> 00:07:40,240
hp client to do and so that your

00:07:38,800 --> 00:07:42,560
interceptors

00:07:40,240 --> 00:07:44,479
recognized that and bypassed it so

00:07:42,560 --> 00:07:47,520
basically the idea is don't do that

00:07:44,479 --> 00:07:50,720
um if you really need to go get

00:07:47,520 --> 00:07:53,680
something from uh

00:07:50,720 --> 00:07:55,520
from the server and you really want to

00:07:53,680 --> 00:07:57,520
use hp client you can create a different

00:07:55,520 --> 00:07:59,680
brand new instance of it a shadowed

00:07:57,520 --> 00:08:00,240
instance of it to use or something like

00:07:59,680 --> 00:08:03,360
that but

00:08:00,240 --> 00:08:04,960
basically what i've done to be honest

00:08:03,360 --> 00:08:06,720
is i've used some other technique to

00:08:04,960 --> 00:08:11,840
make that's that server call

00:08:06,720 --> 00:08:12,560
i've used um actually rxjs has its own

00:08:11,840 --> 00:08:15,440
um

00:08:12,560 --> 00:08:16,879
a little ajax thing and so if i'm ever

00:08:15,440 --> 00:08:18,080
stuck like that and i haven't been but

00:08:16,879 --> 00:08:20,240
if i were

00:08:18,080 --> 00:08:21,840
uh i i would i might just you would

00:08:20,240 --> 00:08:24,400
never pass the whole interceptor

00:08:21,840 --> 00:08:24,879
yeah okay so i think that's a good point

00:08:24,400 --> 00:08:28,240
like

00:08:24,879 --> 00:08:30,400
the nature of the interceptor is

00:08:28,240 --> 00:08:31,440
that it would exist before any http

00:08:30,400 --> 00:08:34,479
right so

00:08:31,440 --> 00:08:36,959
to do an http inside of the http

00:08:34,479 --> 00:08:38,560
that's kind of meta that doesn't

00:08:36,959 --> 00:08:40,640
necessarily make a lot of sense right

00:08:38,560 --> 00:08:41,760
perfectly but actually i mean it's

00:08:40,640 --> 00:08:42,719
perfectly reasonable that you might want

00:08:41,760 --> 00:08:44,480
to talk to a

00:08:42,719 --> 00:08:46,720
outside server okay for example you

00:08:44,480 --> 00:08:48,720
might have to to go get a fresh token

00:08:46,720 --> 00:08:50,640
or to go get some piece of information

00:08:48,720 --> 00:08:53,680
from the serve from some server

00:08:50,640 --> 00:08:56,080
okay but you would want to find a way to

00:08:53,680 --> 00:08:58,880
avoid using http client to do it

00:08:56,080 --> 00:09:00,480
okay all right i see it so if you're

00:08:58,880 --> 00:09:02,240
doing http

00:09:00,480 --> 00:09:04,399
in a service that's being injected into

00:09:02,240 --> 00:09:06,720
an http interceptor

00:09:04,399 --> 00:09:08,800
you guys to use not http client module

00:09:06,720 --> 00:09:11,760
you got to use something else

00:09:08,800 --> 00:09:13,200
uh that's what i have done where i was i

00:09:11,760 --> 00:09:15,040
just wanted to make sure i bypassed

00:09:13,200 --> 00:09:16,480
everything i just used something simple

00:09:15,040 --> 00:09:18,080
because because that's not obviously

00:09:16,480 --> 00:09:21,040
that's a special case and so

00:09:18,080 --> 00:09:22,399
you you you can sidestep it or you've

00:09:21,040 --> 00:09:23,839
just got to find a way to make sure your

00:09:22,399 --> 00:09:26,320
interceptors recognize

00:09:23,839 --> 00:09:28,240
when they're being used like typically

00:09:26,320 --> 00:09:30,240
it's a different url right

00:09:28,240 --> 00:09:31,600
you know so if they recognize it they

00:09:30,240 --> 00:09:33,839
say you know what the

00:09:31,600 --> 00:09:35,680
interceptor bails out right away so it's

00:09:33,839 --> 00:09:37,839
okay gotcha done but

00:09:35,680 --> 00:09:39,120
be careful gotcha all right this next

00:09:37,839 --> 00:09:40,080
question i guess is gonna be kind of

00:09:39,120 --> 00:09:41,920
broad

00:09:40,080 --> 00:09:43,920
someone's asking hey i wanna know where

00:09:41,920 --> 00:09:46,080
i could find complete content related to

00:09:43,920 --> 00:09:47,680
http requests in angular

00:09:46,080 --> 00:09:50,080
all their parameters how they work over

00:09:47,680 --> 00:09:51,600
the network examples for headers and

00:09:50,080 --> 00:09:53,920
custom requests so

00:09:51,600 --> 00:09:55,440
let's say the three of you gentlemen are

00:09:53,920 --> 00:09:57,600
trying to learn more about those

00:09:55,440 --> 00:09:59,040
where do you go for the best

00:09:57,600 --> 00:10:05,839
documentation because it sounds like

00:09:59,040 --> 00:10:05,839
this person is a little frustrated yeah

00:10:06,480 --> 00:10:09,680
well i know it all so it doesn't really

00:10:08,240 --> 00:10:12,880
oh yeah that's true

00:10:09,680 --> 00:10:15,920
wait where'd you roll the documentation

00:10:12,880 --> 00:10:16,480
this person this is a critique on you my

00:10:15,920 --> 00:10:19,040
man

00:10:16,480 --> 00:10:20,720
oh man and i'm feeling the burn i'm

00:10:19,040 --> 00:10:23,440
feeling the burn actually i'm feeling

00:10:20,720 --> 00:10:26,560
your pain whoever asked that question

00:10:23,440 --> 00:10:34,560
um actually i do get uh there are

00:10:26,560 --> 00:10:34,560
obscure quarters anyone else

00:10:35,360 --> 00:10:38,880
mike where are you going to learn about

00:10:36,560 --> 00:10:41,440
this this ish

00:10:38,880 --> 00:10:42,720
uh i read the source for the most part

00:10:41,440 --> 00:10:46,000
as much as i can

00:10:42,720 --> 00:10:49,360
um when docs fail uh source

00:10:46,000 --> 00:10:52,480
code really doesn't so yeah

00:10:49,360 --> 00:10:56,160
yep you just go straight to the source

00:10:52,480 --> 00:10:58,640
yeah okay manfred

00:10:56,160 --> 00:11:00,000
yeah so i cannot say much about this

00:10:58,640 --> 00:11:03,200
either because i was

00:11:00,000 --> 00:11:06,320
an early adapter i adopter i was really

00:11:03,200 --> 00:11:10,000
happy when it arrived with version 4.3

00:11:06,320 --> 00:11:12,320
and somehow i knew it from angularjs so

00:11:10,000 --> 00:11:14,320
getting started with it was not a big

00:11:12,320 --> 00:11:15,360
deal for it so i guess i'm not the right

00:11:14,320 --> 00:11:18,720
person

00:11:15,360 --> 00:11:18,720
to talk about documentation

00:11:20,320 --> 00:11:24,079
okay cool we got a question coming

00:11:23,200 --> 00:11:25,839
here's the thing

00:11:24,079 --> 00:11:27,519
if you have a question and you can't get

00:11:25,839 --> 00:11:28,240
the answer you just throw it out to the

00:11:27,519 --> 00:11:31,360
community

00:11:28,240 --> 00:11:31,360
and you're going to get an answer

00:11:32,160 --> 00:11:36,000
so ward another another interceptor

00:11:33,920 --> 00:11:37,760
question any plans

00:11:36,000 --> 00:11:40,399
for work on request metadata for

00:11:37,760 --> 00:11:40,399
interceptors

00:11:41,279 --> 00:11:45,920
i have no plans for that uh oh you're

00:11:43,760 --> 00:11:49,360
asking about that

00:11:45,920 --> 00:11:50,560
no idea uh i don't know that there is a

00:11:49,360 --> 00:11:54,160
tension

00:11:50,560 --> 00:11:56,720
on uh the http client at this time

00:11:54,160 --> 00:11:57,600
but i am curious what i i wish that

00:11:56,720 --> 00:11:59,839
person would

00:11:57,600 --> 00:12:01,279
tell us what they are looking for we can

00:11:59,839 --> 00:12:04,639
see what can be done

00:12:01,279 --> 00:12:07,680
okay so i think this question

00:12:04,639 --> 00:12:10,720
may be a manfred question i'm sure that

00:12:07,680 --> 00:12:13,040
the other two know so the question is

00:12:10,720 --> 00:12:15,519
can you lazy load a component

00:12:13,040 --> 00:12:18,480
that also uses another component that

00:12:15,519 --> 00:12:19,920
you also want as well lazily loaded in

00:12:18,480 --> 00:12:24,079
the bundle

00:12:19,920 --> 00:12:27,440
without using an ng module yeah

00:12:24,079 --> 00:12:30,480
so honestly i haven't tried it but i

00:12:27,440 --> 00:12:31,839
guess it would be possible because if i

00:12:30,480 --> 00:12:34,480
think about this

00:12:31,839 --> 00:12:36,880
in this case the first component has an

00:12:34,480 --> 00:12:38,000
import statement pointing to the second

00:12:36,880 --> 00:12:40,240
component

00:12:38,000 --> 00:12:41,200
and if i'm registering the second

00:12:40,240 --> 00:12:43,279
component

00:12:41,200 --> 00:12:45,040
with the first component using this

00:12:43,279 --> 00:12:46,800
internal metadata stuff

00:12:45,040 --> 00:12:48,880
it should really work the import

00:12:46,800 --> 00:12:50,399
statement make sure that everything is

00:12:48,880 --> 00:12:53,200
bundled together but

00:12:50,399 --> 00:12:53,920
i did not do an experiment with this i

00:12:53,200 --> 00:12:57,360
guess it

00:12:53,920 --> 00:12:57,680
will work uh and it should work as soon

00:12:57,360 --> 00:13:00,720
as

00:12:57,680 --> 00:13:02,639
it's part of the public api yeah

00:13:00,720 --> 00:13:04,480
hey free opportunity for people to make

00:13:02,639 --> 00:13:06,240
an example and uh

00:13:04,480 --> 00:13:08,320
get some twitter points right there i

00:13:06,240 --> 00:13:09,839
bet i would be willing to retweet it

00:13:08,320 --> 00:13:11,600
right i'm sure that the three of you

00:13:09,839 --> 00:13:13,920
would do as well yeah

00:13:11,600 --> 00:13:15,600
good blog post or a good a nice gist or

00:13:13,920 --> 00:13:19,120
repo yeah

00:13:15,600 --> 00:13:20,959
um so manfred suppose that you had

00:13:19,120 --> 00:13:22,720
one of your clients was like hey i have

00:13:20,959 --> 00:13:23,839
a component i want to lazy load but that

00:13:22,720 --> 00:13:25,680
component also

00:13:23,839 --> 00:13:27,040
uses another component that i also want

00:13:25,680 --> 00:13:28,320
lazy loaded

00:13:27,040 --> 00:13:30,000
what would you recommend that they do

00:13:28,320 --> 00:13:33,519
would you just say oh use a use a

00:13:30,000 --> 00:13:36,639
freaking ng module or what would you say

00:13:33,519 --> 00:13:37,360
well so i would recommend them to

00:13:36,639 --> 00:13:40,240
currently

00:13:37,360 --> 00:13:41,760
don't use private apis they are nice to

00:13:40,240 --> 00:13:44,079
see what's coming next

00:13:41,760 --> 00:13:46,720
they are nice for seeing the potential

00:13:44,079 --> 00:13:49,040
but i would not use private apis so

00:13:46,720 --> 00:13:51,600
there is currently a workaround for this

00:13:49,040 --> 00:13:52,639
it is not pretty if they really really

00:13:51,600 --> 00:13:55,680
need it today

00:13:52,639 --> 00:13:57,040
i would create a dummy ng module within

00:13:55,680 --> 00:13:59,600
the same file

00:13:57,040 --> 00:14:02,160
where the first component is and this

00:13:59,600 --> 00:14:03,040
dummy ng module can point to the first

00:14:02,160 --> 00:14:05,839
component

00:14:03,040 --> 00:14:07,680
as well as to the second component this

00:14:05,839 --> 00:14:10,000
makes the compiler to buy

00:14:07,680 --> 00:14:11,519
up everything in a way that works at

00:14:10,000 --> 00:14:14,079
runtime

00:14:11,519 --> 00:14:14,800
we have to see we are in an early stage

00:14:14,079 --> 00:14:17,519
currently

00:14:14,800 --> 00:14:19,360
and i hope with further releases of

00:14:17,519 --> 00:14:21,519
angular this all will be

00:14:19,360 --> 00:14:22,720
more streamlined especially when those

00:14:21,519 --> 00:14:26,160
private apis

00:14:22,720 --> 00:14:29,760
become somehow public okay cool

00:14:26,160 --> 00:14:30,000
um i think i think any of the three you

00:14:29,760 --> 00:14:32,639
might

00:14:30,000 --> 00:14:34,560
answer this one but again it's coming

00:14:32,639 --> 00:14:38,000
back to dynamic component loading

00:14:34,560 --> 00:14:40,160
so i'll defer to to man for first

00:14:38,000 --> 00:14:42,320
can i import a dynamic component from a

00:14:40,160 --> 00:14:45,839
separate cdn

00:14:42,320 --> 00:14:45,839
instead of a relative path

00:14:46,240 --> 00:14:49,600
yeah that's that's an interesting

00:14:48,320 --> 00:14:52,880
question uh

00:14:49,600 --> 00:14:56,160
because in theory yes

00:14:52,880 --> 00:14:58,880
in practice it's it is really difficult

00:14:56,160 --> 00:15:01,839
because of the way how the angular cli

00:14:58,880 --> 00:15:05,199
works the angular cli is using webpack

00:15:01,839 --> 00:15:06,240
and webpack assumes that everything that

00:15:05,199 --> 00:15:08,800
is compiled

00:15:06,240 --> 00:15:10,880
is there at compile time together

00:15:08,800 --> 00:15:12,000
everything needs to bear the ptr at

00:15:10,880 --> 00:15:14,320
compile dime

00:15:12,000 --> 00:15:16,800
and then that back is splitting it into

00:15:14,320 --> 00:15:19,760
chunks that can be lazily loaded

00:15:16,800 --> 00:15:22,160
so the real question is it is really

00:15:19,760 --> 00:15:23,440
really difficult with webpack there are

00:15:22,160 --> 00:15:25,680
some workarounds

00:15:23,440 --> 00:15:27,600
i have some of them in my blog you can

00:15:25,680 --> 00:15:31,040
use web back externals

00:15:27,600 --> 00:15:33,440
together with ngx build plus

00:15:31,040 --> 00:15:34,880
and there are other workarounds in the

00:15:33,440 --> 00:15:37,920
internet you can find

00:15:34,880 --> 00:15:40,959
using some in official solutions but

00:15:37,920 --> 00:15:44,079
there is no good official one

00:15:40,959 --> 00:15:47,519
okay um so

00:15:44,079 --> 00:15:49,680
i have a question ward what percentage

00:15:47,519 --> 00:15:52,399
of your projects do you have

00:15:49,680 --> 00:15:53,839
http interceptors on like do you have it

00:15:52,399 --> 00:15:54,959
on all of them or is it just something

00:15:53,839 --> 00:15:56,480
that's not as often

00:15:54,959 --> 00:15:57,920
it's not as commonly needed or do you

00:15:56,480 --> 00:15:59,440
are you like no this is super commonly

00:15:57,920 --> 00:16:01,839
needed

00:15:59,440 --> 00:16:02,959
i use it i've used it on every single

00:16:01,839 --> 00:16:06,240
project

00:16:02,959 --> 00:16:10,000
my current client project i

00:16:06,240 --> 00:16:13,199
have uh from memory at least 10

00:16:10,000 --> 00:16:18,079
interceptors 10

00:16:13,199 --> 00:16:19,279
10. hello yep uh the the idea is to bri

00:16:18,079 --> 00:16:22,079
in other words you can put everything in

00:16:19,279 --> 00:16:25,680
one right but the whole idea here is

00:16:22,079 --> 00:16:28,240
to make each interceptor serve a purpose

00:16:25,680 --> 00:16:28,800
and and be focused because small you

00:16:28,240 --> 00:16:30,480
know

00:16:28,800 --> 00:16:32,240
like all code it's a lot easier to

00:16:30,480 --> 00:16:34,079
understand if it does one thing does one

00:16:32,240 --> 00:16:38,000
thing well and is small

00:16:34,079 --> 00:16:39,279
so uh uh things that you might think you

00:16:38,000 --> 00:16:40,800
might combine into one super

00:16:39,279 --> 00:16:42,959
interceptor i don't do that i create

00:16:40,800 --> 00:16:46,560
little interceptors and i just let it

00:16:42,959 --> 00:16:48,399
pass it all down and pass it all back up

00:16:46,560 --> 00:16:51,839
the super interceptor that's a that's a

00:16:48,399 --> 00:16:51,839
that's a comic book character right

00:16:53,279 --> 00:16:59,600
yes the super interceptor and

00:16:56,320 --> 00:17:02,560
i want to be that guy yeah okay um

00:16:59,600 --> 00:17:03,199
so that's news to me 10 interceptors in

00:17:02,560 --> 00:17:06,319
one app

00:17:03,199 --> 00:17:07,039
i need you to tell me some examples

00:17:06,319 --> 00:17:08,640
please

00:17:07,039 --> 00:17:10,799
teach teach some of us because some of

00:17:08,640 --> 00:17:13,120
us have zero interceptors right like

00:17:10,799 --> 00:17:14,160
some of us have significantly sized apps

00:17:13,120 --> 00:17:17,679
with zero

00:17:14,160 --> 00:17:18,079
zero interceptors uh i'm going to look

00:17:17,679 --> 00:17:21,919
at

00:17:18,079 --> 00:17:22,319
my index uh did i say 10 one two three

00:17:21,919 --> 00:17:25,199
four

00:17:22,319 --> 00:17:26,720
five six seven eight all right i have

00:17:25,199 --> 00:17:28,240
eight in this one

00:17:26,720 --> 00:17:30,480
uh and i'll just tell you what they are

00:17:28,240 --> 00:17:33,600
i have a debouncing interceptor

00:17:30,480 --> 00:17:34,240
um because i had one thing that the

00:17:33,600 --> 00:17:35,679
router

00:17:34,240 --> 00:17:37,200
i had these guards all over the place

00:17:35,679 --> 00:17:39,200
and it kept issuing you know all of them

00:17:37,200 --> 00:17:42,240
were making the same calls

00:17:39,200 --> 00:17:43,760
and it was making a you know

00:17:42,240 --> 00:17:46,080
hundreds of get calls well i'm

00:17:43,760 --> 00:17:47,919
exaggerating but anyway i debunked them

00:17:46,080 --> 00:17:50,000
i have the logging one i had the read

00:17:47,919 --> 00:17:53,360
only one i showed i have one

00:17:50,000 --> 00:17:55,840
um that accepts jason only

00:17:53,360 --> 00:17:58,559
uh i have somewhere i queue up the

00:17:55,840 --> 00:18:00,000
requests

00:17:58,559 --> 00:18:02,240
and batch them up and then send them

00:18:00,000 --> 00:18:03,760
rather than send them um immediately i

00:18:02,240 --> 00:18:05,760
have the auth interceptor

00:18:03,760 --> 00:18:07,600
i have a concurrency control interceptor

00:18:05,760 --> 00:18:10,720
because some of my

00:18:07,600 --> 00:18:13,760
um some of the data

00:18:10,720 --> 00:18:14,559
has to come with e-tags um in order to

00:18:13,760 --> 00:18:15,840
ensure

00:18:14,559 --> 00:18:17,760
that two people aren't making the same

00:18:15,840 --> 00:18:21,360
change at the same time

00:18:17,760 --> 00:18:24,240
and a busy one so uh that's

00:18:21,360 --> 00:18:25,120
eight or nine right there so so let me

00:18:24,240 --> 00:18:27,600
let me ask

00:18:25,120 --> 00:18:29,600
just trying to understand one of those

00:18:27,600 --> 00:18:32,320
those are all really good reasons

00:18:29,600 --> 00:18:34,000
um so your d bounce one that basically

00:18:32,320 --> 00:18:34,799
says hey if i'm making too many of these

00:18:34,000 --> 00:18:38,080
too often

00:18:34,799 --> 00:18:38,960
slow them down yeah so basically what it

00:18:38,080 --> 00:18:40,880
does is it

00:18:38,960 --> 00:18:43,039
it throws them into it recognizes

00:18:40,880 --> 00:18:45,280
certain urls and throws them

00:18:43,039 --> 00:18:46,320
into a queue and then it has a timer on

00:18:45,280 --> 00:18:49,840
that and

00:18:46,320 --> 00:18:51,440
when um either

00:18:49,840 --> 00:18:52,720
a certain amount of time passes because

00:18:51,440 --> 00:18:54,880
you don't want you don't want to wait

00:18:52,720 --> 00:18:57,679
forever right

00:18:54,880 --> 00:18:59,120
after a certain uh time frame it will

00:18:57,679 --> 00:19:02,000
send the request anyway

00:18:59,120 --> 00:19:03,840
uh but at least wait um i think like i

00:19:02,000 --> 00:19:07,120
have it set for

00:19:03,840 --> 00:19:09,360
like 10 or 20 microseconds before

00:19:07,120 --> 00:19:11,120
it issues them and that just helps me

00:19:09,360 --> 00:19:14,240
deal with request storms

00:19:11,120 --> 00:19:16,240
because request storms happen

00:19:14,240 --> 00:19:17,440
yeah totally you don't want all of your

00:19:16,240 --> 00:19:18,720
individ this is the thing

00:19:17,440 --> 00:19:20,720
you want to use interceptors where you

00:19:18,720 --> 00:19:23,600
have common common

00:19:20,720 --> 00:19:24,000
problem and where anything in the app

00:19:23,600 --> 00:19:27,120
could be

00:19:24,000 --> 00:19:31,760
issuing that request right and so

00:19:27,120 --> 00:19:33,440
this this was the case here okay so um

00:19:31,760 --> 00:19:35,919
so how do i opt into like your d bounce

00:19:33,440 --> 00:19:38,960
interceptor do i just add an extra

00:19:35,919 --> 00:19:39,440
uh config to my request and then that

00:19:38,960 --> 00:19:41,600
that's

00:19:39,440 --> 00:19:43,200
going to be gobbled up by your d-balance

00:19:41,600 --> 00:19:44,160
or your d-bounce interceptor or how do i

00:19:43,200 --> 00:19:45,440
opt into it

00:19:44,160 --> 00:19:47,280
because i'm guessing you don't d-bounce

00:19:45,440 --> 00:19:48,000
all requests but some of them you you

00:19:47,280 --> 00:19:50,160
cannot

00:19:48,000 --> 00:19:51,360
um as i kind of showed with the

00:19:50,160 --> 00:19:54,880
read-only

00:19:51,360 --> 00:19:56,000
uh not you know um you take their url

00:19:54,880 --> 00:19:56,480
and then you pass it to something that

00:19:56,000 --> 00:20:00,160
passes

00:19:56,480 --> 00:20:02,640
that says hey do i apply to you

00:20:00,160 --> 00:20:04,480
and so i always have a i often have a

00:20:02,640 --> 00:20:05,280
function and the debounce is an example

00:20:04,480 --> 00:20:06,799
of them

00:20:05,280 --> 00:20:08,559
um for example i'm only going to

00:20:06,799 --> 00:20:10,559
debounce gets right it would be

00:20:08,559 --> 00:20:11,919
dangerous dangerous dangerous to

00:20:10,559 --> 00:20:14,799
debounce anything that

00:20:11,919 --> 00:20:16,559
that's saved um but it's only again on

00:20:14,799 --> 00:20:18,080
certain urls and looks at them and it

00:20:16,559 --> 00:20:19,200
says okay i'm going to balance you

00:20:18,080 --> 00:20:20,720
otherwise i just

00:20:19,200 --> 00:20:22,640
let you pass you on to the next

00:20:20,720 --> 00:20:23,600
interceptor now where do i get that

00:20:22,640 --> 00:20:25,600
information

00:20:23,600 --> 00:20:27,039
well i could hard code it in a function

00:20:25,600 --> 00:20:29,200
or if i didn't want to do that

00:20:27,039 --> 00:20:31,919
um remember i can use dependency

00:20:29,200 --> 00:20:32,960
injection and so i could if i was really

00:20:31,919 --> 00:20:37,039
trying to

00:20:32,960 --> 00:20:40,799
to go crazy i could create a um

00:20:37,039 --> 00:20:43,440
a multi-provider and anybody could say

00:20:40,799 --> 00:20:44,559
hey i'm i'm one of those things i want

00:20:43,440 --> 00:20:46,080
you to debounce

00:20:44,559 --> 00:20:47,840
and then my interceptor would get all

00:20:46,080 --> 00:20:49,360
those and it would look at those and say

00:20:47,840 --> 00:20:54,640
yep you're in the list

00:20:49,360 --> 00:20:58,559
you're debounced gotcha one second

00:20:54,640 --> 00:21:00,080
so mike um i appreciate

00:20:58,559 --> 00:21:03,840
thanks to everybody involved the

00:21:00,080 --> 00:21:06,240
attendees especially because um

00:21:03,840 --> 00:21:07,760
in case you've ever done a live stream

00:21:06,240 --> 00:21:09,840
it's a little bit wonky to try and

00:21:07,760 --> 00:21:11,600
figure out all these moving pieces right

00:21:09,840 --> 00:21:13,120
it's a little bit like like changing oil

00:21:11,600 --> 00:21:14,480
while you drive down the freeway to be

00:21:13,120 --> 00:21:18,000
totally honest

00:21:14,480 --> 00:21:22,080
so um so mike i want you to imagine

00:21:18,000 --> 00:21:25,120
um i'm someone who i heard your talk

00:21:22,080 --> 00:21:27,200
i'm like all right that's cool

00:21:25,120 --> 00:21:28,799
what are some symptoms because i don't

00:21:27,200 --> 00:21:30,559
know if i need it though like okay cool

00:21:28,799 --> 00:21:32,240
mike just talked about something cool

00:21:30,559 --> 00:21:34,559
i don't know if i need a builder yet

00:21:32,240 --> 00:21:35,360
though tell me some symptoms if i'm at a

00:21:34,559 --> 00:21:37,360
large company

00:21:35,360 --> 00:21:39,280
i'm at an organization with a lot of

00:21:37,360 --> 00:21:41,520
moving bits

00:21:39,280 --> 00:21:44,720
what are the symptoms that hey it might

00:21:41,520 --> 00:21:48,080
be time to do a builder

00:21:44,720 --> 00:21:49,919
right right um you know once

00:21:48,080 --> 00:21:51,360
it's kind of the same way uh thought

00:21:49,919 --> 00:21:53,760
process like hey when should

00:21:51,360 --> 00:21:56,640
this become automated or like once you

00:21:53,760 --> 00:21:59,200
make this part of like a ci cd process

00:21:56,640 --> 00:21:59,840
um you look at the tasks that you are

00:21:59,200 --> 00:22:03,280
doing

00:21:59,840 --> 00:22:06,159
pretty often that aren't necessarily uh

00:22:03,280 --> 00:22:07,679
part of your current uh architecture so

00:22:06,159 --> 00:22:08,640
like if you're you're building your app

00:22:07,679 --> 00:22:12,080
obviously but

00:22:08,640 --> 00:22:16,960
are you doing some like css elimination

00:22:12,080 --> 00:22:19,120
or minification or image optimizations

00:22:16,960 --> 00:22:22,400
if you're doing all that and you're not

00:22:19,120 --> 00:22:24,159
making it part of your existing process

00:22:22,400 --> 00:22:26,400
then it's kind of time to think about

00:22:24,159 --> 00:22:27,280
okay i'm running a bill but then i'm

00:22:26,400 --> 00:22:29,919
also running

00:22:27,280 --> 00:22:30,960
all of this additional logic after the

00:22:29,919 --> 00:22:34,400
build has been done

00:22:30,960 --> 00:22:35,840
or after um something in my app has

00:22:34,400 --> 00:22:38,320
happened

00:22:35,840 --> 00:22:39,280
it could be nice to integrate that with

00:22:38,320 --> 00:22:41,840
the build and just

00:22:39,280 --> 00:22:42,320
have it happen uh so when you think

00:22:41,840 --> 00:22:44,960
about

00:22:42,320 --> 00:22:45,600
the tools that you have in the current

00:22:44,960 --> 00:22:48,320
kind of like

00:22:45,600 --> 00:22:50,159
scripts that are external to angular

00:22:48,320 --> 00:22:51,360
think about how often are these scripts

00:22:50,159 --> 00:22:54,159
being ran

00:22:51,360 --> 00:22:55,039
and you know would it make sense to

00:22:54,159 --> 00:22:57,280
reduce

00:22:55,039 --> 00:22:58,159
the manual work that i have to do to

00:22:57,280 --> 00:23:01,440
just make a

00:22:58,159 --> 00:23:04,159
builder that can handle that so

00:23:01,440 --> 00:23:05,200
kind of take it take it case by case so

00:23:04,159 --> 00:23:07,200
okay so

00:23:05,200 --> 00:23:09,120
i'm gonna try and paraphrase what i

00:23:07,200 --> 00:23:11,600
heard if i'm at a company

00:23:09,120 --> 00:23:12,720
i've got a i've got a significant size

00:23:11,600 --> 00:23:15,280
app and

00:23:12,720 --> 00:23:16,320
as part of my build step i'm also

00:23:15,280 --> 00:23:18,720
running like

00:23:16,320 --> 00:23:19,760
node script node script node script node

00:23:18,720 --> 00:23:21,840
script

00:23:19,760 --> 00:23:24,240
mike you're saying and those note strips

00:23:21,840 --> 00:23:25,840
always run every time i build

00:23:24,240 --> 00:23:27,039
and maybe i have different ones for dev

00:23:25,840 --> 00:23:28,080
and different ones for production right

00:23:27,039 --> 00:23:30,960
like

00:23:28,080 --> 00:23:31,520
you're saying hello it might be time for

00:23:30,960 --> 00:23:34,400
you to get

00:23:31,520 --> 00:23:35,440
uh to get a builder or to at least learn

00:23:34,400 --> 00:23:37,280
about it a bit more is that what you're

00:23:35,440 --> 00:23:40,720
saying it's like that's like a symptom

00:23:37,280 --> 00:23:43,919
okay um okay next

00:23:40,720 --> 00:23:46,240
question i think this goes for at least

00:23:43,919 --> 00:23:49,600
two maybe all three of you

00:23:46,240 --> 00:23:51,200
the person asks in your time as a

00:23:49,600 --> 00:23:53,279
consultant

00:23:51,200 --> 00:23:56,880
what are some of the pitfalls you see in

00:23:53,279 --> 00:23:56,880
angular apps that we should avoid

00:23:57,120 --> 00:24:02,000
so i'm just gonna let you guys fight

00:23:59,679 --> 00:24:05,840
whoever talks loudest talks best here

00:24:02,000 --> 00:24:05,840
but go ahead

00:24:06,080 --> 00:24:12,400
wow there's so many yeah they're hard

00:24:09,919 --> 00:24:14,480
you know as a consultant one of the

00:24:12,400 --> 00:24:15,039
biggest problems i solve is i walk in

00:24:14,480 --> 00:24:16,720
and i just

00:24:15,039 --> 00:24:18,400
ask everyone to talk to each other

00:24:16,720 --> 00:24:19,919
because a lot of what i

00:24:18,400 --> 00:24:22,159
a lot of what i'm solving is

00:24:19,919 --> 00:24:24,480
communication pattern problems not

00:24:22,159 --> 00:24:25,360
not actual like architecting it's just

00:24:24,480 --> 00:24:27,919
hey

00:24:25,360 --> 00:24:29,200
you talk to me and he talks to me or

00:24:27,919 --> 00:24:30,960
they talk to me

00:24:29,200 --> 00:24:32,080
i need you to talk to each other but so

00:24:30,960 --> 00:24:33,360
what are you guys seeing what are the

00:24:32,080 --> 00:24:34,559
pitfalls you're you're you're saying

00:24:33,360 --> 00:24:35,919
that people should have i think aaron

00:24:34,559 --> 00:24:38,960
you've hit on the most

00:24:35,919 --> 00:24:40,640
important one how do developers

00:24:38,960 --> 00:24:42,159
talk to each other and how do they share

00:24:40,640 --> 00:24:43,679
their discoveries

00:24:42,159 --> 00:24:46,960
uh one of the things i'm doing at my

00:24:43,679 --> 00:24:50,159
client is we have a um once a week

00:24:46,960 --> 00:24:51,200
we have a video conference uh in which

00:24:50,159 --> 00:24:53,679
we share

00:24:51,200 --> 00:24:55,600
mostly i do but i mean uh everybody's

00:24:53,679 --> 00:24:57,840
invited to share some technique

00:24:55,600 --> 00:24:59,200
or some new part of the uh project that

00:24:57,840 --> 00:25:02,320
they worked on

00:24:59,200 --> 00:25:04,799
and getting get into the code and and

00:25:02,320 --> 00:25:07,200
share ideas so for example that debounce

00:25:04,799 --> 00:25:09,360
interceptor i talked about

00:25:07,200 --> 00:25:10,960
that was a suggestion by um one of the

00:25:09,360 --> 00:25:12,799
developer my client developers when i

00:25:10,960 --> 00:25:14,559
was describing it

00:25:12,799 --> 00:25:16,159
a problem i was seeing it was a great

00:25:14,559 --> 00:25:19,600
idea and so

00:25:16,159 --> 00:25:20,799
uh having a regular session in which you

00:25:19,600 --> 00:25:23,440
just share ideas

00:25:20,799 --> 00:25:26,840
is i think one of the great ways to

00:25:23,440 --> 00:25:28,480
address the very real problem you

00:25:26,840 --> 00:25:31,919
described all right

00:25:28,480 --> 00:25:35,679
mike manfred i see two issues

00:25:31,919 --> 00:25:36,080
um one issue is under engineering you

00:25:35,679 --> 00:25:39,360
have

00:25:36,080 --> 00:25:43,200
one got module which contains everything

00:25:39,360 --> 00:25:44,080
but it is as uh bad as over engineering

00:25:43,200 --> 00:25:46,799
where you throw

00:25:44,080 --> 00:25:47,360
all your architectural buttons into the

00:25:46,799 --> 00:25:50,159
game

00:25:47,360 --> 00:25:51,360
without really needing them for instance

00:25:50,159 --> 00:25:54,080
i'm doing

00:25:51,360 --> 00:25:54,960
a lot with micro front vents nowadays

00:25:54,080 --> 00:25:57,520
and they

00:25:54,960 --> 00:25:59,039
have some meaning but sometimes they are

00:25:57,520 --> 00:26:01,840
really complicated

00:25:59,039 --> 00:26:02,480
and if you use them without needing them

00:26:01,840 --> 00:26:05,600
then you

00:26:02,480 --> 00:26:08,400
are creating a big overhead for

00:26:05,600 --> 00:26:10,799
all your process so i would really avoid

00:26:08,400 --> 00:26:11,520
against using patterns if you don't need

00:26:10,799 --> 00:26:13,919
them

00:26:11,520 --> 00:26:14,960
and the second one is more on an

00:26:13,919 --> 00:26:17,200
organisatoric

00:26:14,960 --> 00:26:18,799
level it is not knowing your

00:26:17,200 --> 00:26:21,520
architectural goals

00:26:18,799 --> 00:26:22,159
you need to know what your goals are and

00:26:21,520 --> 00:26:25,039
what it's

00:26:22,159 --> 00:26:27,120
more important just a funny example i

00:26:25,039 --> 00:26:31,279
have this customer who told me

00:26:27,120 --> 00:26:32,640
for us maintainability is more important

00:26:31,279 --> 00:26:35,840
than usability

00:26:32,640 --> 00:26:38,000
which is good if he knows it it sounds a

00:26:35,840 --> 00:26:39,760
bit funny but in this case they have to

00:26:38,000 --> 00:26:42,159
align the software with

00:26:39,760 --> 00:26:44,080
current restrictions of the government

00:26:42,159 --> 00:26:46,559
and so they need to maintain it to

00:26:44,080 --> 00:26:48,799
adjust it to all the restrictions and so

00:26:46,559 --> 00:26:50,080
it's clear there this is more important

00:26:48,799 --> 00:26:52,880
than usability

00:26:50,080 --> 00:26:54,159
in other situation it might be really

00:26:52,880 --> 00:26:56,720
vice versa there might

00:26:54,159 --> 00:26:57,520
be the case that usability is much more

00:26:56,720 --> 00:27:01,200
important than

00:26:57,520 --> 00:27:03,200
maintainability so know your goals

00:27:01,200 --> 00:27:04,880
now i think that's good it if you don't

00:27:03,200 --> 00:27:07,600
know your goal

00:27:04,880 --> 00:27:08,000
it's hard to say whose answer is right

00:27:07,600 --> 00:27:09,760
right

00:27:08,000 --> 00:27:12,640
because if we don't know where we're

00:27:09,760 --> 00:27:14,000
going are there any right answers right

00:27:12,640 --> 00:27:15,520
it's like it makes it it makes it a lot

00:27:14,000 --> 00:27:16,799
more difficult so those are really

00:27:15,520 --> 00:27:18,840
really good points

00:27:16,799 --> 00:27:20,000
all right i have another question for

00:27:18,840 --> 00:27:21,679
ward

00:27:20,000 --> 00:27:23,760
it's they they want to know is there a

00:27:21,679 --> 00:27:25,919
way to retry a call

00:27:23,760 --> 00:27:29,919
a certain amount of times if the request

00:27:25,919 --> 00:27:32,840
has a specific response code

00:27:29,919 --> 00:27:35,039
yes and it's i'm very happy that that

00:27:32,840 --> 00:27:36,960
person um

00:27:35,039 --> 00:27:38,799
added the caveat that it has to have a

00:27:36,960 --> 00:27:40,960
certain response code i've seen retry

00:27:38,799 --> 00:27:43,200
calls that would retry every call

00:27:40,960 --> 00:27:44,720
and like if you got a 404 it's not going

00:27:43,200 --> 00:27:46,240
to get any better right

00:27:44,720 --> 00:27:47,600
yeah that's the bottom there there's no

00:27:46,240 --> 00:27:49,120
more retry of your way through that one

00:27:47,600 --> 00:27:52,320
one minute from now

00:27:49,120 --> 00:27:54,880
so uh uh there

00:27:52,320 --> 00:27:55,919
are examples of retry interceptors i was

00:27:54,880 --> 00:27:58,080
going to say if i

00:27:55,919 --> 00:28:00,960
that will probably be my 9th 10th or

00:27:58,080 --> 00:28:04,399
11th interceptor on this project

00:28:00,960 --> 00:28:07,120
and yes you would look at the um uh

00:28:04,399 --> 00:28:07,679
response type and uh actually some years

00:28:07,120 --> 00:28:10,510
ago

00:28:07,679 --> 00:28:12,480
at angular connect um

00:28:10,510 --> 00:28:15,520
[Music]

00:28:12,480 --> 00:28:17,200
who was it that did it um one of the

00:28:15,520 --> 00:28:20,799
angular team did a

00:28:17,200 --> 00:28:23,279
a talk on retry http interceptors

00:28:20,799 --> 00:28:24,000
got you and i will try and find out and

00:28:23,279 --> 00:28:26,240
get that out

00:28:24,000 --> 00:28:27,520
okay so i have two more questions and

00:28:26,240 --> 00:28:29,279
then we're gonna be done

00:28:27,520 --> 00:28:31,039
first question is will the three of you

00:28:29,279 --> 00:28:31,919
share your decks on twitter your slide

00:28:31,039 --> 00:28:32,960
decks

00:28:31,919 --> 00:28:34,559
they're going to post them out from

00:28:32,960 --> 00:28:35,600
their personal account soon if you're

00:28:34,559 --> 00:28:37,039
not

00:28:35,600 --> 00:28:38,399
all right energy conf will retweet it

00:28:37,039 --> 00:28:39,039
but if you're not following the three of

00:28:38,399 --> 00:28:41,440
them

00:28:39,039 --> 00:28:42,799
you sh you should most of the i mean i

00:28:41,440 --> 00:28:44,080
would follow all the speakers i follow

00:28:42,799 --> 00:28:45,039
all the speakers here they're all

00:28:44,080 --> 00:28:47,840
fantastic

00:28:45,039 --> 00:28:50,080
um all right so thank you on that one

00:28:47,840 --> 00:28:52,080
the last one's a bit subjective

00:28:50,080 --> 00:28:54,720
and it's a thing that developers are bad

00:28:52,080 --> 00:28:56,559
at generally and that is assessing

00:28:54,720 --> 00:29:00,159
people's talent levels right we're bad

00:28:56,559 --> 00:29:00,159
at interviews i think we can all agree

00:29:00,799 --> 00:29:05,520
this person wants to know what are the

00:29:03,440 --> 00:29:08,159
things that make someone

00:29:05,520 --> 00:29:10,240
a beginner an intermediate or an

00:29:08,159 --> 00:29:12,000
advanced angular developer

00:29:10,240 --> 00:29:13,840
and how do you guys differentiate

00:29:12,000 --> 00:29:15,919
between those three i told you it's

00:29:13,840 --> 00:29:19,360
subjective and i put you on the spot but

00:29:15,919 --> 00:29:22,159
but it's a question and uh

00:29:19,360 --> 00:29:23,760
i'm gonna i'm gonna start with mike i'm

00:29:22,159 --> 00:29:26,720
gonna go to manfred and then we'll end

00:29:23,760 --> 00:29:30,080
with ward

00:29:26,720 --> 00:29:32,720
um i think you know first person uh the

00:29:30,080 --> 00:29:35,679
first level of like beginner

00:29:32,720 --> 00:29:36,880
they at least know some of the core

00:29:35,679 --> 00:29:40,399
concepts

00:29:36,880 --> 00:29:41,919
but as soon as something doesn't go well

00:29:40,399 --> 00:29:43,520
they're not quite sure how to move

00:29:41,919 --> 00:29:47,760
forward or how to

00:29:43,520 --> 00:29:50,559
get themselves out of uh trouble

00:29:47,760 --> 00:29:51,600
the kind of intermediate person would be

00:29:50,559 --> 00:29:53,360
able to do that

00:29:51,600 --> 00:29:55,520
get themselves in trouble but then also

00:29:53,360 --> 00:29:57,440
thinks about the higher pitcher to

00:29:55,520 --> 00:29:58,480
certain degrees like how do we structure

00:29:57,440 --> 00:30:02,159
everything

00:29:58,480 --> 00:30:04,880
um and then the expert tends to you know

00:30:02,159 --> 00:30:06,799
think solely about the architecture

00:30:04,880 --> 00:30:08,320
versus the low level details like

00:30:06,799 --> 00:30:10,640
they already know all that stuff they

00:30:08,320 --> 00:30:11,039
need to figure out how do we make this

00:30:10,640 --> 00:30:13,760
app

00:30:11,039 --> 00:30:15,760
as fast as possible load everything as

00:30:13,760 --> 00:30:18,080
efficiently as possible

00:30:15,760 --> 00:30:19,120
um and they really care about oh is this

00:30:18,080 --> 00:30:22,240
ng4

00:30:19,120 --> 00:30:24,240
uh doing everything correctly there

00:30:22,240 --> 00:30:26,399
are proper people who should be focusing

00:30:24,240 --> 00:30:30,240
on that

00:30:26,399 --> 00:30:33,120
gotcha thanks manfred yeah i completely

00:30:30,240 --> 00:30:33,120
agree with mike

00:30:33,200 --> 00:30:38,480
gotcha thanks manfred yeah i completely

00:30:37,039 --> 00:30:42,399
agree with mike

00:30:38,480 --> 00:30:46,080
and also i would say the only measure

00:30:42,399 --> 00:30:48,480
is experience because

00:30:46,080 --> 00:30:50,640
uh if you have a lot of experience

00:30:48,480 --> 00:30:53,279
especially with bigger projects

00:30:50,640 --> 00:30:54,080
then then you are more of an expert as

00:30:53,279 --> 00:30:56,320
before

00:30:54,080 --> 00:30:59,279
so i've talked with this guy about

00:30:56,320 --> 00:31:02,080
certifications in the area of angular

00:30:59,279 --> 00:31:04,399
and i told them don't do certifications

00:31:02,080 --> 00:31:05,039
because we all know those tests multiple

00:31:04,399 --> 00:31:07,039
choice

00:31:05,039 --> 00:31:08,960
we learn everything by heart and then we

00:31:07,039 --> 00:31:11,279
have the certification claiming

00:31:08,960 --> 00:31:13,519
behind experts so for me it's about

00:31:11,279 --> 00:31:14,640
experience and perhaps one more thought

00:31:13,519 --> 00:31:17,760
about this

00:31:14,640 --> 00:31:20,320
i think there is not only the sole

00:31:17,760 --> 00:31:22,080
angular expert anymore because angular

00:31:20,320 --> 00:31:24,880
is such a huge platform

00:31:22,080 --> 00:31:26,320
we can be experts in different areas

00:31:24,880 --> 00:31:29,919
experts for

00:31:26,320 --> 00:31:32,960
architecture or for component design

00:31:29,919 --> 00:31:35,120
for design systems and so on

00:31:32,960 --> 00:31:37,519
and the bond is not necessarily an

00:31:35,120 --> 00:31:41,919
expert for the other topic

00:31:37,519 --> 00:31:42,799
okay word so i agree with what those

00:31:41,919 --> 00:31:45,840
guys said

00:31:42,799 --> 00:31:46,399
i let me try a metaphor on you um i

00:31:45,840 --> 00:31:49,679
think of

00:31:46,399 --> 00:31:51,440
the software development like cooking

00:31:49,679 --> 00:31:53,279
if you you could tell right away when

00:31:51,440 --> 00:31:55,039
somebody can't hold a knife

00:31:53,279 --> 00:31:57,200
right that's a beginner and they take

00:31:55,039 --> 00:31:59,760
too long to chop the vegetables

00:31:57,200 --> 00:32:01,519
but eventually the sort of intermediate

00:31:59,760 --> 00:32:02,000
folks can work their way around the

00:32:01,519 --> 00:32:04,159
kitchen

00:32:02,000 --> 00:32:05,120
and they can follow a recipe and stuff

00:32:04,159 --> 00:32:06,480
like that

00:32:05,120 --> 00:32:08,240
they can follow recipes but they don't

00:32:06,480 --> 00:32:11,440
have any vision

00:32:08,240 --> 00:32:13,120
for what the dining experience can be

00:32:11,440 --> 00:32:15,360
when you get to the level of being an

00:32:13,120 --> 00:32:17,120
expert you're thinking not

00:32:15,360 --> 00:32:18,720
i mean you can always go down and you've

00:32:17,120 --> 00:32:20,320
got great knife skills

00:32:18,720 --> 00:32:22,000
you can make anything that the kitchen

00:32:20,320 --> 00:32:23,519
makes but really most of your time

00:32:22,000 --> 00:32:27,120
you're thinking about

00:32:23,519 --> 00:32:28,960
how do i create the dining experience

00:32:27,120 --> 00:32:30,240
that represents what my restaurant is

00:32:28,960 --> 00:32:32,720
about what is my

00:32:30,240 --> 00:32:34,640
style is my cooking what do i care about

00:32:32,720 --> 00:32:36,559
what do my customers care about

00:32:34,640 --> 00:32:38,399
that's where your mind is and your and

00:32:36,559 --> 00:32:41,120
so when i'm interviewing people

00:32:38,399 --> 00:32:43,200
i'm i'm asking them about their

00:32:41,120 --> 00:32:46,080
experience at each of these

00:32:43,200 --> 00:32:48,480
levels of cooking and i'm most excited

00:32:46,080 --> 00:32:50,320
when somebody knows exactly

00:32:48,480 --> 00:32:52,399
what the customer experience is supposed

00:32:50,320 --> 00:32:55,760
to be and cares about it

00:32:52,399 --> 00:32:57,919
no that's great um um

00:32:55,760 --> 00:32:59,279
i would add i don't have three levels

00:32:57,919 --> 00:33:02,080
i'm gonna add one big one

00:32:59,279 --> 00:33:04,159
just one one line in the sand i guess

00:33:02,080 --> 00:33:06,480
one goal i would give to people

00:33:04,159 --> 00:33:08,399
and and i think that the three of you

00:33:06,480 --> 00:33:09,600
will probably agree i know that there's

00:33:08,399 --> 00:33:11,840
certainly some other experts in the

00:33:09,600 --> 00:33:12,960
community for me there's a pinnacle

00:33:11,840 --> 00:33:15,840
skill

00:33:12,960 --> 00:33:16,399
for angular developers to that kind of

00:33:15,840 --> 00:33:18,159
goes

00:33:16,399 --> 00:33:19,840
you you're you're on your way to the

00:33:18,159 --> 00:33:23,360
next level or you're not

00:33:19,840 --> 00:33:25,120
um and that is hold on one second

00:33:23,360 --> 00:33:27,279
okay never mind there was a thing that

00:33:25,120 --> 00:33:30,640
disappeared on the live stream it's gone

00:33:27,279 --> 00:33:33,760
um okay the thing is it's reactive

00:33:30,640 --> 00:33:36,880
angular being able to appropriately

00:33:33,760 --> 00:33:37,600
embrace rxjs and all that observables

00:33:36,880 --> 00:33:40,480
can do

00:33:37,600 --> 00:33:41,919
to make your angular code cleaner to

00:33:40,480 --> 00:33:42,640
make your angular code more performant

00:33:41,919 --> 00:33:46,000
and to make it

00:33:42,640 --> 00:33:46,480
um to make it just the best version of

00:33:46,000 --> 00:33:48,000
it to make

00:33:46,480 --> 00:33:50,240
the least amount of it possible to do

00:33:48,000 --> 00:33:52,559
the same job versus

00:33:50,240 --> 00:33:54,720
you know your two promises uh your

00:33:52,559 --> 00:33:56,320
subscribes inside of subscribes

00:33:54,720 --> 00:33:57,919
and stuff like that and and i'm not

00:33:56,320 --> 00:34:00,080
shaming anyone i don't think that

00:33:57,919 --> 00:34:01,440
any of us were shaming anyone right i

00:34:00,080 --> 00:34:02,240
think it's just trying to answer the

00:34:01,440 --> 00:34:03,600
question of hey

00:34:02,240 --> 00:34:05,039
these are symptoms these are things

00:34:03,600 --> 00:34:05,600
these are goals that you should shoot

00:34:05,039 --> 00:34:09,200
for

00:34:05,600 --> 00:34:11,839
to kind of step up your game yeah

00:34:09,200 --> 00:34:13,280
okay well um i want to give a round of

00:34:11,839 --> 00:34:15,040
applause to you three gentlemen thank

00:34:13,280 --> 00:34:16,079
you for your talks thanks for your time

00:34:15,040 --> 00:34:18,839
on the panel here

00:34:16,079 --> 00:34:20,850
and we will chat with you later thank

00:34:18,839 --> 00:34:25,489
you

00:34:20,850 --> 00:34:27,540
[Music]

00:34:25,489 --> 00:34:30,960
[Applause]

00:34:27,540 --> 00:34:33,040
[Music]

00:34:30,960 --> 00:34:33,040

YouTube URL: https://www.youtube.com/watch?v=zhffyWQ7z3U


