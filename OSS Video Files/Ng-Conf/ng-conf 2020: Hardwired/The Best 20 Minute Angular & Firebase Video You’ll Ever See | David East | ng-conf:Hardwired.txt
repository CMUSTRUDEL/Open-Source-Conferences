Title: The Best 20 Minute Angular & Firebase Video You’ll Ever See | David East | ng-conf:Hardwired
Publication date: 2020-06-08
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Angular and Firebase have been a great match since day one. That’s why AngularFire, the official Firebase library for Angular, is one of the most popular open source Angular libraries. Angular speeds up front end development and Firebase speeds up back end development. Together you can build awesome realtime UIs without ever needing to run your own server. This talk won’t be your run of the mill slide deck of features. You’ll learn how to get up and running with Firebase by watching the creator of AngularFire build an app. By the end of this talk you’ll know how to use Firebase to stream data in realtime, authenticate users, upload user content like images, run serverless code snippets, monitor app performance, and set up Google Analytics for Angular apps.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:17,520
[Applause]

00:00:05,920 --> 00:00:19,840
[Music]

00:00:17,520 --> 00:00:22,430
[Applause]

00:00:19,840 --> 00:00:23,960
this is not an episode of cribs I'm

00:00:22,430 --> 00:00:26,539
actually here today to teach you all

00:00:23,960 --> 00:00:28,430
about angular and firebase my name is

00:00:26,539 --> 00:00:30,500
David East I'm a developer advocate at

00:00:28,430 --> 00:00:32,750
Google on the firebase team and for this

00:00:30,500 --> 00:00:35,380
talk I'm taking a moment out of my work

00:00:32,750 --> 00:00:38,399
from home scheduled to give you the best

00:00:35,380 --> 00:00:38,399
[Music]

00:00:38,440 --> 00:00:43,699
one second like I was saying I'm taking

00:00:42,350 --> 00:00:46,190
a moment from my work from home

00:00:43,699 --> 00:00:48,260
scheduled to give you the best 20

00:00:46,190 --> 00:00:52,220
minutes angular and firebase video you

00:00:48,260 --> 00:00:54,019
will ever see I think I mean Jeff

00:00:52,220 --> 00:00:55,790
Delaney and fire ship IO he makes really

00:00:54,019 --> 00:00:58,190
good videos but maybe none of them are

00:00:55,790 --> 00:00:59,930
exactly 20 minutes anyways in this video

00:00:58,190 --> 00:01:01,879
I'm gonna take a hands-on approach and

00:00:59,930 --> 00:01:03,979
I'm gonna show you some amazing things

00:01:01,879 --> 00:01:07,100
you can build with firebase and angular

00:01:03,979 --> 00:01:09,560
so what is firebase firebase is a

00:01:07,100 --> 00:01:11,570
platform for building powerful apps fast

00:01:09,560 --> 00:01:13,970
you just include a JavaScript library

00:01:11,570 --> 00:01:16,310
into your app and you're connected to a

00:01:13,970 --> 00:01:18,859
hosted back-end without needing to build

00:01:16,310 --> 00:01:24,700
it or host it yourself so get ready

00:01:18,859 --> 00:01:24,700
we're gonna go from 0 to 60 really quick

00:01:31,800 --> 00:01:37,830
like I was saying get ready we're gonna

00:01:35,040 --> 00:01:39,570
go from zero to 60 really quick

00:01:37,830 --> 00:01:41,430
firebase comes with a JavaScript library

00:01:39,570 --> 00:01:43,470
that knows how to connect to your hosted

00:01:41,430 --> 00:01:45,480
back-end you import the module and then

00:01:43,470 --> 00:01:47,160
call the initialize app method with

00:01:45,480 --> 00:01:49,590
configuration you get from the firebase

00:01:47,160 --> 00:01:52,230
dashboard this is all safe to put in

00:01:49,590 --> 00:01:53,880
your app no private keys here now this

00:01:52,230 --> 00:01:55,470
doesn't do anything but tell my app how

00:01:53,880 --> 00:01:57,600
to connect to firebase so let's

00:01:55,470 --> 00:02:00,900
synchronize data in real time with one

00:01:57,600 --> 00:02:03,210
of our databases fire store fire store

00:02:00,900 --> 00:02:05,370
is a document database which means you

00:02:03,210 --> 00:02:06,960
have collections and you have documents

00:02:05,370 --> 00:02:09,420
and a collection is just a list of

00:02:06,960 --> 00:02:11,460
documents so to get a single city ID tap

00:02:09,420 --> 00:02:13,740
into the collection of cities and grab

00:02:11,460 --> 00:02:15,780
the document by its ID and then from

00:02:13,740 --> 00:02:17,910
there I can call on snapshot to read

00:02:15,780 --> 00:02:19,890
this data in real time and every single

00:02:17,910 --> 00:02:22,020
time this data is updated in the

00:02:19,890 --> 00:02:24,750
database this callback method will fire

00:02:22,020 --> 00:02:26,940
off with new data and from there you can

00:02:24,750 --> 00:02:29,460
just query any element from the page and

00:02:26,940 --> 00:02:31,700
then you can bind that update to the

00:02:29,460 --> 00:02:31,700
view

00:02:33,130 --> 00:02:39,910
and you can see this is just a JSON

00:02:37,060 --> 00:02:42,760
object and every single time it updates

00:02:39,910 --> 00:02:45,849
in the database we'll get that instantly

00:02:42,760 --> 00:02:50,230
on the page

00:02:45,849 --> 00:02:51,999
now some of you angular and rxjs fans

00:02:50,230 --> 00:02:54,219
might be looking at this callback method

00:02:51,999 --> 00:02:58,359
and think to yourself this looks pretty

00:02:54,219 --> 00:03:00,700
familiar and actually we can return from

00:02:58,359 --> 00:03:03,879
this on snapshot method and it gives us

00:03:00,700 --> 00:03:06,219
an unsubscribe function so sometime

00:03:03,879 --> 00:03:08,500
later down the line if we wanted to stop

00:03:06,219 --> 00:03:11,909
listening in real time we could just

00:03:08,500 --> 00:03:11,909
call unsub

00:03:12,240 --> 00:03:18,620
and this is just like unobservable and

00:03:15,870 --> 00:03:19,830
that is why we built angularfire

00:03:18,620 --> 00:03:22,680
angularfire

00:03:19,830 --> 00:03:25,140
is the official library for angular and

00:03:22,680 --> 00:03:27,750
firebase it brings together angular fire

00:03:25,140 --> 00:03:30,450
base and rxjs and one library to make

00:03:27,750 --> 00:03:33,540
building things really fast all right so

00:03:30,450 --> 00:03:41,940
we just went from zero to ten now we're

00:03:33,540 --> 00:03:45,240
gonna go from ten to thirty one second

00:03:41,940 --> 00:03:47,940
we just went from zero to ten now let's

00:03:45,240 --> 00:03:49,860
go from ten to thirty let's make it to

00:03:47,940 --> 00:03:52,020
do app because you have to make it to do

00:03:49,860 --> 00:03:54,630
app and my main module on port from

00:03:52,020 --> 00:03:57,660
angular fire and initialize my needed

00:03:54,630 --> 00:03:59,250
and g modules i can call initialize app

00:03:57,660 --> 00:04:01,410
and i'm going to use the environment

00:03:59,250 --> 00:04:04,470
section of the angular CLI

00:04:01,410 --> 00:04:06,180
and i'm going to import from the angular

00:04:04,470 --> 00:04:07,680
firestorm module as well and this gives

00:04:06,180 --> 00:04:09,690
me everything I need for dependency

00:04:07,680 --> 00:04:11,130
injection this project is already set up

00:04:09,690 --> 00:04:12,630
with the router and we're getting back

00:04:11,130 --> 00:04:14,400
some wrap parameters which will help us

00:04:12,630 --> 00:04:16,140
read from the database so I'm going to

00:04:14,400 --> 00:04:19,320
inject the angular fire store service so

00:04:16,140 --> 00:04:21,030
we can talk to our back-end so the way

00:04:19,320 --> 00:04:24,060
that this project is set up is that we

00:04:21,030 --> 00:04:27,030
have a top-level collection of projects

00:04:24,060 --> 00:04:28,650
and each project is a document and

00:04:27,030 --> 00:04:30,510
documents can actually contain

00:04:28,650 --> 00:04:32,730
collections themselves and these are

00:04:30,510 --> 00:04:35,310
known as sub collections and this is

00:04:32,730 --> 00:04:37,410
where our to Do's live in the tasks sub

00:04:35,310 --> 00:04:39,420
collection this returns to us a

00:04:37,410 --> 00:04:41,580
collection reference which allows us to

00:04:39,420 --> 00:04:43,830
update modify and read data at this

00:04:41,580 --> 00:04:47,130
location which can actually be done with

00:04:43,830 --> 00:04:49,560
a generic as well and to read this data

00:04:47,130 --> 00:04:52,230
we're going to do it as an observable of

00:04:49,560 --> 00:04:53,760
tasks an array in that case and the

00:04:52,230 --> 00:04:55,770
collection reference has a bunch of

00:04:53,760 --> 00:04:58,310
methods to read the data back as in

00:04:55,770 --> 00:05:00,740
observable

00:04:58,310 --> 00:05:03,800
and so we can take this observable and

00:05:00,740 --> 00:05:07,820
then bind it in the template so in this

00:05:03,800 --> 00:05:11,210
unordered list use the ng if as trick to

00:05:07,820 --> 00:05:13,850
pipe the tasks back and then just

00:05:11,210 --> 00:05:18,050
iterate over them in the Li with ng for

00:05:13,850 --> 00:05:20,030
and each task has a title

00:05:18,050 --> 00:05:22,370
and just like that we have the data

00:05:20,030 --> 00:05:25,280
bound in the browser but what's the

00:05:22,370 --> 00:05:27,440
to-do list app without adding to dues so

00:05:25,280 --> 00:05:30,289
I'm going to use this input bar which is

00:05:27,440 --> 00:05:32,030
just an easy way for me to have a text

00:05:30,289 --> 00:05:34,460
box with a button and to be able to get

00:05:32,030 --> 00:05:36,699
the text back through this new value

00:05:34,460 --> 00:05:36,699
output

00:05:36,780 --> 00:05:41,970
and then back inside of the component

00:05:39,270 --> 00:05:43,740
I'm going to move the test collection to

00:05:41,970 --> 00:05:47,850
a property because this will allow me to

00:05:43,740 --> 00:05:50,160
use it in the on new task method and we

00:05:47,850 --> 00:05:52,680
can actually do this as a generic so it

00:05:50,160 --> 00:05:55,020
knows what needs to be added so inside

00:05:52,680 --> 00:05:58,860
of on new tasks I'm going to add the new

00:05:55,020 --> 00:06:01,350
tasks by calling the add method and this

00:05:58,860 --> 00:06:03,300
knows that it needs to be a column task

00:06:01,350 --> 00:06:05,639
so it's going to yell at me until I have

00:06:03,300 --> 00:06:07,410
the correct data type so in this case I

00:06:05,639 --> 00:06:10,680
need the category I'm not started and

00:06:07,410 --> 00:06:13,800
then some dummy user data so now when I

00:06:10,680 --> 00:06:16,320
enter a new task and hit the create

00:06:13,800 --> 00:06:19,710
button it automatically updates on the

00:06:16,320 --> 00:06:21,870
page but this is just too simple we all

00:06:19,710 --> 00:06:26,250
know that tasks have intermediate states

00:06:21,870 --> 00:06:31,860
like not started and in progress and

00:06:26,250 --> 00:06:33,479
also done and of course done done you

00:06:31,860 --> 00:06:35,010
know like when you say something's done

00:06:33,479 --> 00:06:36,840
but it's not actually done so you need

00:06:35,010 --> 00:06:39,600
to polish it up and write some tests so

00:06:36,840 --> 00:06:42,210
it's done done and just like that we

00:06:39,600 --> 00:06:44,669
have a Kanban board because if you stop

00:06:42,210 --> 00:06:47,760
and think about it most apps are just to

00:06:44,669 --> 00:06:49,860
do apps in disguise since these tasks

00:06:47,760 --> 00:06:52,110
are just an observable we can do some

00:06:49,860 --> 00:06:53,580
arcs jeaious magic instead of returning

00:06:52,110 --> 00:06:55,860
a single array of tasks

00:06:53,580 --> 00:06:58,350
we'll return an object of arrays and

00:06:55,860 --> 00:07:00,510
each key of the object being the

00:06:58,350 --> 00:07:03,810
category as in not started or in

00:07:00,510 --> 00:07:06,240
progress and rx makes this very easy we

00:07:03,810 --> 00:07:08,880
can just use the map operator to create

00:07:06,240 --> 00:07:10,919
the object iterate over each of the

00:07:08,880 --> 00:07:14,340
tasks make sure that there is at least

00:07:10,919 --> 00:07:17,340
an empty array or the existing array and

00:07:14,340 --> 00:07:20,610
then just add each item to the array and

00:07:17,340 --> 00:07:22,680
this updates every single time that the

00:07:20,610 --> 00:07:25,410
data is updated in the database because

00:07:22,680 --> 00:07:27,870
observables and firestore work very

00:07:25,410 --> 00:07:30,930
similar and this is still unobservable

00:07:27,870 --> 00:07:33,450
so we can use the ng if as syntax to

00:07:30,930 --> 00:07:37,530
unwrap the new object of arrays and then

00:07:33,450 --> 00:07:40,320
just bind each object to the tasks input

00:07:37,530 --> 00:07:43,410
and then to give this an extra bit of

00:07:40,320 --> 00:07:47,360
pizzazz we're going to wrap each list

00:07:43,410 --> 00:07:50,270
with the angular cdks drag list

00:07:47,360 --> 00:07:52,729
and the angular cdk makes this super

00:07:50,270 --> 00:07:55,550
easy we just make sure we pass all of

00:07:52,729 --> 00:07:58,629
the inputs and provide the right outputs

00:07:55,550 --> 00:08:01,159
and do that for each one of the columns

00:07:58,629 --> 00:08:03,740
then we just need to let the component

00:08:01,159 --> 00:08:06,650
know when something is being dragged and

00:08:03,740 --> 00:08:09,289
dropped so on a drop event we make sure

00:08:06,650 --> 00:08:12,409
it's a new container get the transferred

00:08:09,289 --> 00:08:15,409
item the category by the ID and then all

00:08:12,409 --> 00:08:18,280
we have to do is find the item in the

00:08:15,409 --> 00:08:20,990
database and then update its category

00:08:18,280 --> 00:08:23,270
so now when we drag we're getting an

00:08:20,990 --> 00:08:26,000
error so opening up the console you can

00:08:23,270 --> 00:08:27,860
see that it can't find the ID so when

00:08:26,000 --> 00:08:30,259
you're using value changes this just

00:08:27,860 --> 00:08:32,810
pulls back the data and not its

00:08:30,259 --> 00:08:35,959
corresponding document ID so using ID

00:08:32,810 --> 00:08:37,849
fields we can map that on to the data so

00:08:35,959 --> 00:08:40,279
now pulling up two browsers side by side

00:08:37,849 --> 00:08:44,120
if I drag a card just like that it

00:08:40,279 --> 00:08:46,459
updates in real time a vital part of any

00:08:44,120 --> 00:08:48,230
app is authentication firebase

00:08:46,459 --> 00:08:49,670
authentication gives you a lot of

00:08:48,230 --> 00:08:54,519
different ways to authenticate your

00:08:49,670 --> 00:08:58,190
users with just a few lines of code in

00:08:54,519 --> 00:09:00,980
just a few lines of code angularfire

00:08:58,190 --> 00:09:03,470
comes with two off modules the core

00:09:00,980 --> 00:09:05,540
angularfire auth module and also the

00:09:03,470 --> 00:09:07,699
angularfire auth Guard module the core

00:09:05,540 --> 00:09:09,230
module has methods for logging users in

00:09:07,699 --> 00:09:11,300
and monitoring they're logged in States

00:09:09,230 --> 00:09:15,079
and the auth Guard module allows you to

00:09:11,300 --> 00:09:17,690
protect routes and auth and the router

00:09:15,079 --> 00:09:20,680
tend to go hand-in-hand

00:09:17,690 --> 00:09:24,290
so in this case we're going to want to

00:09:20,680 --> 00:09:26,959
log a user in with Google and that is

00:09:24,290 --> 00:09:29,480
done with a redirect and that can make

00:09:26,959 --> 00:09:31,610
things a little bit tricky unless you're

00:09:29,480 --> 00:09:33,260
using the router so in this case I'm

00:09:31,610 --> 00:09:36,320
going to call the sign in with redirect

00:09:33,260 --> 00:09:38,660
method and give it a provider so here's

00:09:36,320 --> 00:09:40,760
the trick calling sign in with redirect

00:09:38,660 --> 00:09:43,220
won't ever return the user you're trying

00:09:40,760 --> 00:09:44,990
to log in and that's because that will

00:09:43,220 --> 00:09:47,329
call out to the third-party providers

00:09:44,990 --> 00:09:49,550
login page and then that calls back to

00:09:47,329 --> 00:09:52,940
yours meaning you'll never get to any

00:09:49,550 --> 00:09:55,730
code be on line 23 so the way you fix

00:09:52,940 --> 00:09:58,250
this is by getting the redirect result

00:09:55,730 --> 00:10:00,319
this resolves a promise that tells you

00:09:58,250 --> 00:10:00,920
whether a user has come back to the app

00:10:00,319 --> 00:10:03,709
through

00:10:00,920 --> 00:10:05,899
redirect and this is where you use the

00:10:03,709 --> 00:10:09,200
router to direct them where to go after

00:10:05,899 --> 00:10:11,450
they have logged in so cooking sign up

00:10:09,200 --> 00:10:13,910
takes us to a redirect where we select

00:10:11,450 --> 00:10:16,399
the user and then when we come back the

00:10:13,910 --> 00:10:19,160
results is detected and we're back into

00:10:16,399 --> 00:10:22,010
the page so our users are logged in but

00:10:19,160 --> 00:10:24,649
this route is not protected using the

00:10:22,010 --> 00:10:26,899
angularfire auth guard module we can

00:10:24,649 --> 00:10:29,420
reroute any unauthorized user back to

00:10:26,899 --> 00:10:32,029
the login page the angular router has

00:10:29,420 --> 00:10:34,220
this concept of route activations which

00:10:32,029 --> 00:10:35,990
means only allow someone to go to a

00:10:34,220 --> 00:10:38,810
route if it meets certain set of

00:10:35,990 --> 00:10:40,610
criteria angularfire integrates with

00:10:38,810 --> 00:10:42,949
this with the angularfire auth guard

00:10:40,610 --> 00:10:45,079
which means only activate the route if

00:10:42,949 --> 00:10:47,930
the user is logged in and then we can

00:10:45,079 --> 00:10:50,060
further customize with the pipeable

00:10:47,930 --> 00:10:53,329
methods like redirect unauthorized to

00:10:50,060 --> 00:10:55,339
and using this method we can say only

00:10:53,329 --> 00:10:57,829
allow users to get to the project space

00:10:55,339 --> 00:11:01,040
if they're logged in otherwise send them

00:10:57,829 --> 00:11:03,050
back to the home this customization is

00:11:01,040 --> 00:11:05,300
tacked on to the route in the data

00:11:03,050 --> 00:11:07,070
property so now when I try to access

00:11:05,300 --> 00:11:09,620
this route it kicks me right back to the

00:11:07,070 --> 00:11:12,199
login page all users and firebase auth

00:11:09,620 --> 00:11:14,089
come back with a user ID which makes it

00:11:12,199 --> 00:11:15,949
easy to organize their data in the

00:11:14,089 --> 00:11:17,120
database and we can get the logged in

00:11:15,949 --> 00:11:19,640
user with angularfire

00:11:17,120 --> 00:11:21,740
off as an observable and this will come

00:11:19,640 --> 00:11:24,470
back with lots of information so using

00:11:21,740 --> 00:11:26,000
the magic of rxjs you can map over this

00:11:24,470 --> 00:11:29,390
user and only return back the

00:11:26,000 --> 00:11:32,449
information you need such as the UID and

00:11:29,390 --> 00:11:35,360
a photo URL and since this is an

00:11:32,449 --> 00:11:39,949
observable you can map over it to create

00:11:35,360 --> 00:11:42,740
a new object such as this task which

00:11:39,949 --> 00:11:45,769
contains the user ID and their photo URL

00:11:42,740 --> 00:11:47,540
and then afterwards using tap we can

00:11:45,769 --> 00:11:50,899
operate our side effect of saving the

00:11:47,540 --> 00:11:53,209
task and as a side note calling to

00:11:50,899 --> 00:11:56,540
promise make sure that the unsubscribe

00:11:53,209 --> 00:11:58,339
is called for you each task is saved

00:11:56,540 --> 00:12:00,620
with a UID which means that we can

00:11:58,339 --> 00:12:02,899
address the important topic of security

00:12:00,620 --> 00:12:04,910
now that we have authenticated users

00:12:02,899 --> 00:12:07,100
entering data it's time to address

00:12:04,910 --> 00:12:09,380
security firebase is a platform that

00:12:07,100 --> 00:12:11,300
doesn't require you to run a server so

00:12:09,380 --> 00:12:15,519
what keeps someone from accessing your

00:12:11,300 --> 00:12:15,519
data well the answer to that is

00:12:15,630 --> 00:12:21,940
I'm so proud of you

00:12:19,260 --> 00:12:24,310
security roles are their own language

00:12:21,940 --> 00:12:26,560
they allow us to say who has access to

00:12:24,310 --> 00:12:28,420
what data and what that data should look

00:12:26,560 --> 00:12:31,750
like there are a bit of a mix between

00:12:28,420 --> 00:12:33,459
access control and schemas right now

00:12:31,750 --> 00:12:36,370
anyone can read or write to my database

00:12:33,459 --> 00:12:38,890
which is bad security rules allow you to

00:12:36,370 --> 00:12:42,220
match at a path level with route like

00:12:38,890 --> 00:12:44,709
parameters and then I can now match to

00:12:42,220 --> 00:12:46,390
the tasks and allow anyone to read or

00:12:44,709 --> 00:12:48,459
write if the data they are trying to

00:12:46,390 --> 00:12:50,760
send in has a user ID property that

00:12:48,459 --> 00:12:53,260
matches the currently logged in user

00:12:50,760 --> 00:12:55,480
security roles has special variables

00:12:53,260 --> 00:12:57,399
that allow you to inspect the requests

00:12:55,480 --> 00:12:59,140
that's coming in the data that's trying

00:12:57,399 --> 00:13:01,540
to be saved to the database and be

00:12:59,140 --> 00:13:03,820
currently logged in user and this allows

00:13:01,540 --> 00:13:06,520
you to be very specific with how you're

00:13:03,820 --> 00:13:08,770
going to secure your data this current

00:13:06,520 --> 00:13:11,470
role allows users to read and write data

00:13:08,770 --> 00:13:12,580
that they have created but that doesn't

00:13:11,470 --> 00:13:14,980
really promote a collaborative

00:13:12,580 --> 00:13:17,410
environment so let's create a role based

00:13:14,980 --> 00:13:19,630
system security roles allow you to write

00:13:17,410 --> 00:13:22,089
functions where I can look up data in

00:13:19,630 --> 00:13:24,820
the database using the built in get

00:13:22,089 --> 00:13:27,730
method which takes in a path to the data

00:13:24,820 --> 00:13:30,600
to read so we'll read at the projects

00:13:27,730 --> 00:13:32,950
and use a parameter for the project ID

00:13:30,600 --> 00:13:35,770
look into the collaborators sub

00:13:32,950 --> 00:13:38,589
collection and see if a user exists in

00:13:35,770 --> 00:13:40,540
what their role is so now I can say if

00:13:38,589 --> 00:13:44,589
you own your data or if the role for

00:13:40,540 --> 00:13:46,390
their user is a admin or an editor then

00:13:44,589 --> 00:13:49,089
they are allowed to collaborate in this

00:13:46,390 --> 00:13:51,550
project so the current logged in user

00:13:49,089 --> 00:13:54,100
isn't an admin or an editor so they get

00:13:51,550 --> 00:13:56,980
immediately kicked out so just for now

00:13:54,100 --> 00:14:00,610
I'm going to manually add the user into

00:13:56,980 --> 00:14:02,440
the database as an editor the ID will be

00:14:00,610 --> 00:14:05,050
their user ID and we can give them the

00:14:02,440 --> 00:14:07,380
role as the editor and when we go back

00:14:05,050 --> 00:14:09,640
they're allowed to collaborate and edit

00:14:07,380 --> 00:14:11,920
so let's add a feature that lets users

00:14:09,640 --> 00:14:14,740
add collaborators by entering in an

00:14:11,920 --> 00:14:16,420
email address when the user enters an

00:14:14,740 --> 00:14:19,060
email address you might think oh I know

00:14:16,420 --> 00:14:21,940
what I'll do I will query the users and

00:14:19,060 --> 00:14:23,709
find them by their email get their ID

00:14:21,940 --> 00:14:26,589
and then just add them as a collaborator

00:14:23,709 --> 00:14:27,610
and while that might work it's not very

00:14:26,589 --> 00:14:29,410
secure because

00:14:27,610 --> 00:14:31,750
that means that either this user or

00:14:29,410 --> 00:14:34,029
everyone can read from your users

00:14:31,750 --> 00:14:36,700
collection which probably is it a good

00:14:34,029 --> 00:14:39,519
thing so instead of doing that we can

00:14:36,700 --> 00:14:41,800
create a collaborator request sub

00:14:39,519 --> 00:14:44,079
collection and we can request that

00:14:41,800 --> 00:14:46,899
someone with the proper security can add

00:14:44,079 --> 00:14:48,790
them as a collaborator and it's a server

00:14:46,899 --> 00:14:50,920
where you would want to control that

00:14:48,790 --> 00:14:53,230
kind of access and we can do that easily

00:14:50,920 --> 00:14:55,089
with cloud functions all the work we've

00:14:53,230 --> 00:14:56,500
done so far is in the browser but

00:14:55,089 --> 00:14:58,990
sometimes you got to run some server

00:14:56,500 --> 00:15:01,329
code clap functions for firebase allows

00:14:58,990 --> 00:15:03,670
you to run server code in response to

00:15:01,329 --> 00:15:05,709
firebase events so you can send a push

00:15:03,670 --> 00:15:08,320
notification every time a document is

00:15:05,709 --> 00:15:10,300
created in firestore resize images that

00:15:08,320 --> 00:15:13,329
are uploaded to cloud storage and just

00:15:10,300 --> 00:15:16,420
like we're about to do read secure parts

00:15:13,329 --> 00:15:18,880
of your database let's build a cloud

00:15:16,420 --> 00:15:22,209
function cloud functions is all about

00:15:18,880 --> 00:15:25,450
triggered events and for a fire store we

00:15:22,209 --> 00:15:28,209
first specify a trigger with a document

00:15:25,450 --> 00:15:29,980
path which can contain parameters the

00:15:28,209 --> 00:15:32,019
project ID and the email in this case

00:15:29,980 --> 00:15:34,690
and when a document is created it will

00:15:32,019 --> 00:15:36,640
trigger this event firebase comes with

00:15:34,690 --> 00:15:38,980
an admin SDK that is specifically

00:15:36,640 --> 00:15:40,779
tailored to run on a server cloud

00:15:38,980 --> 00:15:42,730
functions contains all the environment

00:15:40,779 --> 00:15:44,709
variables you need so you don't have to

00:15:42,730 --> 00:15:46,149
hard code your configuration cloud

00:15:44,709 --> 00:15:49,000
functions is where you should write code

00:15:46,149 --> 00:15:52,029
that a client should not have access to

00:15:49,000 --> 00:15:54,699
like the ability to make a payment so

00:15:52,029 --> 00:15:57,160
seeing your payment private keys or

00:15:54,699 --> 00:16:00,040
having access to all of your users

00:15:57,160 --> 00:16:02,050
emails and other information the MN SDK

00:16:00,040 --> 00:16:04,839
is very similar to the client SDK

00:16:02,050 --> 00:16:06,550
especially API wise so you can write

00:16:04,839 --> 00:16:09,040
queries just as you would with the

00:16:06,550 --> 00:16:10,870
client SDK but since we're running in a

00:16:09,040 --> 00:16:12,040
node environment we can take advantage

00:16:10,870 --> 00:16:14,440
of async/await

00:16:12,040 --> 00:16:16,990
we don't need to stream this data in

00:16:14,440 --> 00:16:18,970
real time we just need to get it once so

00:16:16,990 --> 00:16:21,579
we can query the users for their email

00:16:18,970 --> 00:16:24,250
and then just await the get method to

00:16:21,579 --> 00:16:26,920
get the data back and then return the

00:16:24,250 --> 00:16:29,550
first results from the query since we

00:16:26,920 --> 00:16:32,529
know there's only one user per email

00:16:29,550 --> 00:16:35,050
cloud functions gives you context of

00:16:32,529 --> 00:16:38,020
every function invocation and we can use

00:16:35,050 --> 00:16:40,960
that to get the parameters from the

00:16:38,020 --> 00:16:43,720
document path such as the email and the

00:16:40,960 --> 00:16:46,450
project ID and we can use this

00:16:43,720 --> 00:16:49,510
information to securely add a

00:16:46,450 --> 00:16:52,240
collaborator by tapping into the project

00:16:49,510 --> 00:16:55,780
document and going to its collaborators

00:16:52,240 --> 00:16:59,080
sub collection and adding that users ID

00:16:55,780 --> 00:17:00,970
and their role one of the best practices

00:16:59,080 --> 00:17:03,730
for club functions is making sure that

00:17:00,970 --> 00:17:06,250
you return a promise from every trigger

00:17:03,730 --> 00:17:08,080
this lets Club functions know when your

00:17:06,250 --> 00:17:10,390
code is done so it doesn't have to run

00:17:08,080 --> 00:17:13,060
longer than it needs to and we will

00:17:10,390 --> 00:17:15,520
return a promise of deleting the

00:17:13,060 --> 00:17:17,680
collaborator request so we know that the

00:17:15,520 --> 00:17:20,920
request has been fulfilled what if this

00:17:17,680 --> 00:17:22,810
user is not in the database well that

00:17:20,920 --> 00:17:24,880
means that they are not a part of the

00:17:22,810 --> 00:17:27,280
app so we'll just do an else statement

00:17:24,880 --> 00:17:29,290
for now and maybe you know work on an

00:17:27,280 --> 00:17:31,480
email server somewhere down the line now

00:17:29,290 --> 00:17:33,820
when we add a collaborator by their

00:17:31,480 --> 00:17:36,520
email address the cloud function

00:17:33,820 --> 00:17:39,130
triggers adds them securely as an editor

00:17:36,520 --> 00:17:41,200
and the new user can modify tasks

00:17:39,130 --> 00:17:44,110
remember that to do comment about that

00:17:41,200 --> 00:17:46,450
email server well I have about three

00:17:44,110 --> 00:17:48,220
minutes left in this video so I think I

00:17:46,450 --> 00:17:51,070
can get it done and that's because with

00:17:48,220 --> 00:17:53,830
firebase extensions is a codeless way of

00:17:51,070 --> 00:17:57,280
doing common tasks like resizing images

00:17:53,830 --> 00:17:59,170
and yes triggering emails with

00:17:57,280 --> 00:18:01,360
extensions I can set up a cloud function

00:17:59,170 --> 00:18:03,400
with just UI so something that would

00:18:01,360 --> 00:18:06,400
have taken a lot of glue code can just

00:18:03,400 --> 00:18:08,680
be done in a few minutes oh I I don't

00:18:06,400 --> 00:18:10,750
have enough time for a funny joke let's

00:18:08,680 --> 00:18:13,480
install the trigger email extension

00:18:10,750 --> 00:18:16,270
extensions do a lot behind the scenes

00:18:13,480 --> 00:18:18,100
the UI is designed to be transparent

00:18:16,270 --> 00:18:20,200
about the resources that are being

00:18:18,100 --> 00:18:23,170
created the billing that needs to be

00:18:20,200 --> 00:18:25,780
enabled in the security access being

00:18:23,170 --> 00:18:28,060
granted to the extension extensions are

00:18:25,780 --> 00:18:30,400
configurable and this is where you can

00:18:28,060 --> 00:18:32,560
tailor to work for your use case you

00:18:30,400 --> 00:18:34,030
supply your own SMTP server the

00:18:32,560 --> 00:18:36,250
collection where you will trigger the

00:18:34,030 --> 00:18:38,650
email from and any templates that you

00:18:36,250 --> 00:18:41,110
want to use it'll take a few minutes to

00:18:38,650 --> 00:18:43,450
install this extension so let's look at

00:18:41,110 --> 00:18:45,580
the email templates in the database each

00:18:43,450 --> 00:18:48,730
document has an ID for the name of the

00:18:45,580 --> 00:18:50,770
template and a subject and the HTML and

00:18:48,730 --> 00:18:53,530
you can template this with handlebars

00:18:50,770 --> 00:18:54,580
style syntax back in the cloud function

00:18:53,530 --> 00:18:57,340
let's trigger

00:18:54,580 --> 00:18:59,080
the email extension this email extension

00:18:57,340 --> 00:19:00,550
actually works a lot like the cloud

00:18:59,080 --> 00:19:03,910
function that's written right here

00:19:00,550 --> 00:19:06,370
because it creates a cloud function

00:19:03,910 --> 00:19:08,800
trigger that listens to when documents

00:19:06,370 --> 00:19:10,990
are created at the mail collection so

00:19:08,800 --> 00:19:13,990
when we add one that has a template name

00:19:10,990 --> 00:19:17,290
with some data it will turn that into an

00:19:13,990 --> 00:19:19,060
email so all we have to do is grab that

00:19:17,290 --> 00:19:21,460
data from the database that needs to be

00:19:19,060 --> 00:19:23,920
templated which is the project in the

00:19:21,460 --> 00:19:25,810
admin user and once we send a

00:19:23,920 --> 00:19:28,930
collaboration request it will trigger

00:19:25,810 --> 00:19:31,870
this email if the user is not a user of

00:19:28,930 --> 00:19:34,480
the app and it always feels good to

00:19:31,870 --> 00:19:36,280
remove it to do or we could just keep it

00:19:34,480 --> 00:19:38,020
there and confuse everyone so let's add

00:19:36,280 --> 00:19:40,540
a user that doesn't belong to the app

00:19:38,020 --> 00:19:43,270
and when they check their email they get

00:19:40,540 --> 00:19:46,970
their invites which contains a link that

00:19:43,270 --> 00:19:49,370
allows them to sign up for the app

00:19:46,970 --> 00:19:51,049
all right I have like 30 seconds left

00:19:49,370 --> 00:19:53,210
but that's plenty of time to get this

00:19:51,049 --> 00:19:54,559
app deployed on firebase hosting to

00:19:53,210 --> 00:19:56,900
initialize firebase will use the

00:19:54,559 --> 00:19:58,760
firebase CLI with firebase in it hosting

00:19:56,900 --> 00:20:00,740
this will ask you what your project name

00:19:58,760 --> 00:20:02,330
is what your public folder is and

00:20:00,740 --> 00:20:04,610
whether you want it as a single page app

00:20:02,330 --> 00:20:06,799
which yes you do this gives us our

00:20:04,610 --> 00:20:10,220
configuration in firebase JSON in our

00:20:06,799 --> 00:20:11,750
project list in firebase RC then using

00:20:10,220 --> 00:20:14,030
the firebase CEO I will do firebase

00:20:11,750 --> 00:20:16,340
deploy - - only hosting - only to play

00:20:14,030 --> 00:20:20,390
hosting and then we have our project web

00:20:16,340 --> 00:20:22,580
app so I hope that was the best 20

00:20:20,390 --> 00:20:27,860
minute angular and firebase video you

00:20:22,580 --> 00:20:30,260
will ever see today at ng-conf in this

00:20:27,860 --> 00:20:32,299
timeslot we covered a lot in those 20

00:20:30,260 --> 00:20:34,280
minutes so if you want to see a more

00:20:32,299 --> 00:20:36,049
in-depth explanation where it goes a

00:20:34,280 --> 00:20:38,240
little bit slower than tune in to my

00:20:36,049 --> 00:20:40,220
youtube channel where I do live streams

00:20:38,240 --> 00:20:42,320
on firebase apps and I'm going to

00:20:40,220 --> 00:20:44,419
actually be rebuilding this one starting

00:20:42,320 --> 00:20:46,640
next week so thank you all so much for

00:20:44,419 --> 00:20:49,990
coming to my talk and I hope you have a

00:20:46,640 --> 00:20:49,990
great ng-conf hard

00:20:50,520 --> 00:20:53,789
[Music]

00:20:50,690 --> 00:20:53,789
[Applause]

00:20:54,330 --> 00:20:58,870
[Music]

00:20:56,830 --> 00:21:03,580
[Applause]

00:20:58,870 --> 00:21:03,580

YouTube URL: https://www.youtube.com/watch?v=NyHIFofBkGo


