Title: Speaker Q & A | Stephen Fluin, John Papa, & Yvonne Allen | ng-conf: Hardwired
Publication date: 2020-07-20
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Q&A panel with Stephen Fluin, John Papa and Yvonne Allen.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,199 --> 00:00:21,039
john

00:00:18,160 --> 00:00:23,199
john yeah you can hear us okay good

00:00:21,039 --> 00:00:24,640
stephen can hear us yvonne can hear us

00:00:23,199 --> 00:00:26,240
all right we got thumbs up all around

00:00:24,640 --> 00:00:29,279
perfect okay

00:00:26,240 --> 00:00:32,160
um you guys all did great by the way how

00:00:29,279 --> 00:00:35,440
do you feel about your talks

00:00:32,160 --> 00:00:36,559
glad it's over really you did so awesome

00:00:35,440 --> 00:00:39,680
i don't know if you were watching the

00:00:36,559 --> 00:00:41,680
comment section but it was on fire

00:00:39,680 --> 00:00:43,440
everyone loved your talk the whole the

00:00:41,680 --> 00:00:47,440
whole talk like

00:00:43,440 --> 00:00:49,680
yeah you did awesome who everybody

00:00:47,440 --> 00:00:51,840
oh thank you everybody yeah i know there

00:00:49,680 --> 00:00:56,320
was nobody who didn't it was awesome

00:00:51,840 --> 00:00:56,320
yvonne we've become one person yeah yeah

00:00:57,280 --> 00:01:01,280
i saw the lineup when i first saw like

00:00:59,359 --> 00:01:02,800
this gonna do i was like are you serious

00:01:01,280 --> 00:01:04,799
they put me like in the middle of all

00:01:02,800 --> 00:01:06,640
these very heavy hitters like i have to

00:01:04,799 --> 00:01:08,560
come correct like i have to do something

00:01:06,640 --> 00:01:10,000
to stand out because john is awesome

00:01:08,560 --> 00:01:12,080
steven is awesome

00:01:10,000 --> 00:01:13,040
um like and i'm just like right dab in

00:01:12,080 --> 00:01:14,720
the middle so it's like

00:01:13,040 --> 00:01:17,520
i don't want to be that that talk that

00:01:14,720 --> 00:01:20,080
was like yeah okay

00:01:17,520 --> 00:01:21,600
who's next that was fun i thought you

00:01:20,080 --> 00:01:23,759
did fantastic

00:01:21,600 --> 00:01:25,520
so yeah you did really good it was fun

00:01:23,759 --> 00:01:26,799
to watch thank you

00:01:25,520 --> 00:01:29,280
all right i'm going to jump into the

00:01:26,799 --> 00:01:30,640
questions

00:01:29,280 --> 00:01:33,360
i think this first one might be for you

00:01:30,640 --> 00:01:33,759
steven uh it's got the most votes it

00:01:33,360 --> 00:01:35,759
says

00:01:33,759 --> 00:01:37,119
is there a timeline for giving reactive

00:01:35,759 --> 00:01:39,600
forms a touch-up or

00:01:37,119 --> 00:01:40,960
overhaul our applications are all

00:01:39,600 --> 00:01:43,040
heavily form driven

00:01:40,960 --> 00:01:45,119
but the reactive forms api hasn't gotten

00:01:43,040 --> 00:01:48,560
any major features in a while

00:01:45,119 --> 00:01:50,399
i'll stop there sure so the easy answer

00:01:48,560 --> 00:01:52,240
is no there's not a timeline

00:01:50,399 --> 00:01:54,479
but i i know that's not a super

00:01:52,240 --> 00:01:55,920
satisfying answer um

00:01:54,479 --> 00:01:58,560
as everyone knows we've been working on

00:01:55,920 --> 00:02:01,840
getting version nine out uh in ib

00:01:58,560 --> 00:02:03,040
uh we're headed towards the future um

00:02:01,840 --> 00:02:05,200
i think there's a lot of new

00:02:03,040 --> 00:02:06,799
possibilities now where like we actually

00:02:05,200 --> 00:02:07,840
have this headspace to say

00:02:06,799 --> 00:02:10,560
what are the priorities and what should

00:02:07,840 --> 00:02:11,599
we be working on um for the the next few

00:02:10,560 --> 00:02:14,160
versions so

00:02:11,599 --> 00:02:14,879
uh i we hear this a lot so we know it's

00:02:14,160 --> 00:02:18,160
a problem and we

00:02:14,879 --> 00:02:19,360
do want to focus on it um it's just

00:02:18,160 --> 00:02:23,040
figuring out which one's the the top

00:02:19,360 --> 00:02:23,760
priority yeah i uh it is the top most

00:02:23,040 --> 00:02:26,480
voted

00:02:23,760 --> 00:02:28,480
issue on the angular github is the

00:02:26,480 --> 00:02:31,120
reactive form stuff so

00:02:28,480 --> 00:02:31,920
it is important anyway i know you guys

00:02:31,120 --> 00:02:34,080
have been like

00:02:31,920 --> 00:02:35,680
forced to focus on the thing and you

00:02:34,080 --> 00:02:36,800
guys are finally coming up for fresh air

00:02:35,680 --> 00:02:38,319
so it'll be cool to see

00:02:36,800 --> 00:02:39,920
when you get a chance to work on it so

00:02:38,319 --> 00:02:41,200
good luck and keep keep calling us out

00:02:39,920 --> 00:02:43,360
on on the things you care about

00:02:41,200 --> 00:02:45,920
yeah that's what we need to hear yeah

00:02:43,360 --> 00:02:48,640
good all right another one

00:02:45,920 --> 00:02:50,000
says hey steven is there any micro

00:02:48,640 --> 00:02:53,519
front-end apps

00:02:50,000 --> 00:02:53,519
in google build with angular

00:02:53,920 --> 00:02:59,360
sure uh so it depends on your definition

00:02:57,280 --> 00:03:04,080
of micro front-end as per the talk

00:02:59,360 --> 00:03:06,159
um what i'll say is that uh within

00:03:04,080 --> 00:03:07,680
google like the the concept of a micro

00:03:06,159 --> 00:03:10,000
front-end doesn't make as much

00:03:07,680 --> 00:03:11,519
sense because we're we do use really

00:03:10,000 --> 00:03:13,599
extensive lazy loading like

00:03:11,519 --> 00:03:14,959
every feature is a module everything's

00:03:13,599 --> 00:03:16,560
being lazy loaded and so

00:03:14,959 --> 00:03:18,080
like if you log into google cloud

00:03:16,560 --> 00:03:20,959
platform um

00:03:18,080 --> 00:03:22,560
you are loading into a bunch of

00:03:20,959 --> 00:03:23,840
different apps maintained by a bunch of

00:03:22,560 --> 00:03:27,040
different teams but it all feels like a

00:03:23,840 --> 00:03:27,040
single cohesive experience

00:03:27,200 --> 00:03:31,040
obviously they don't have a they they

00:03:28,879 --> 00:03:32,720
have often a shared entry point but they

00:03:31,040 --> 00:03:35,920
don't have to um

00:03:32,720 --> 00:03:36,879
so it's the we've got such good build

00:03:35,920 --> 00:03:39,360
systems and such

00:03:36,879 --> 00:03:41,040
like large products that are split up

00:03:39,360 --> 00:03:42,480
into tiny tiny pieces and so

00:03:41,040 --> 00:03:43,760
from a certain perspective already there

00:03:42,480 --> 00:03:45,599
but we're not taking advantage of things

00:03:43,760 --> 00:03:48,879
like server side rendering yet

00:03:45,599 --> 00:03:51,200
okay cool thanks man

00:03:48,879 --> 00:03:53,519
i think this one's for all three of you

00:03:51,200 --> 00:03:55,680
it says in your experience

00:03:53,519 --> 00:03:57,760
what is a healthy mix of expertise and

00:03:55,680 --> 00:03:59,040
overall team size for small medium and

00:03:57,760 --> 00:04:01,360
large teams

00:03:59,040 --> 00:04:05,200
how many entry level devs are too many

00:04:01,360 --> 00:04:05,200
for an expert to take under their wing

00:04:06,400 --> 00:04:10,879
just pick it off if you want to any one

00:04:08,799 --> 00:04:13,760
of you

00:04:10,879 --> 00:04:14,879
there is no perfect mix i think a lot of

00:04:13,760 --> 00:04:17,359
it depends on things

00:04:14,879 --> 00:04:19,280
i like to look at development teams as

00:04:17,359 --> 00:04:21,519
like a football baseball soccer

00:04:19,280 --> 00:04:23,120
rugby team whatever you whatever sport

00:04:21,519 --> 00:04:24,880
you like if sports were actually being

00:04:23,120 --> 00:04:27,120
played in the world right now

00:04:24,880 --> 00:04:28,560
and the way i look at that is you like

00:04:27,120 --> 00:04:30,080
to have some veterans on your team

00:04:28,560 --> 00:04:32,000
those could be your senior or principal

00:04:30,080 --> 00:04:33,199
level people uh you want a couple of

00:04:32,000 --> 00:04:34,240
those who've been there done that with

00:04:33,199 --> 00:04:36,000
the experience

00:04:34,240 --> 00:04:37,840
you want some youth on the team and

00:04:36,000 --> 00:04:39,280
energy some people who've just come in

00:04:37,840 --> 00:04:40,400
to this world because they see things

00:04:39,280 --> 00:04:42,160
with a different view

00:04:40,400 --> 00:04:44,080
and you want different kind of cultural

00:04:42,160 --> 00:04:46,240
different kind of backgrounds

00:04:44,080 --> 00:04:48,080
if you get a more diverse team all

00:04:46,240 --> 00:04:49,040
across the board in every way diversity

00:04:48,080 --> 00:04:52,080
can be

00:04:49,040 --> 00:04:52,800
seen or not seen it really does help the

00:04:52,080 --> 00:04:54,720
team now

00:04:52,800 --> 00:04:56,400
as far as size goes i like to break

00:04:54,720 --> 00:04:57,759
actual functional teams up into just a

00:04:56,400 --> 00:05:00,320
couple of people

00:04:57,759 --> 00:05:01,520
like studios of maybe five people that

00:05:00,320 --> 00:05:03,840
can work together

00:05:01,520 --> 00:05:04,960
and they can all coordinate in concert

00:05:03,840 --> 00:05:08,080
steven or yvonne do you have

00:05:04,960 --> 00:05:10,000
an opinion um i

00:05:08,080 --> 00:05:11,199
can say speaking from like the junior

00:05:10,000 --> 00:05:14,720
developer mid

00:05:11,199 --> 00:05:17,120
mid developer um considering that i just

00:05:14,720 --> 00:05:18,080
recently became more senior developer

00:05:17,120 --> 00:05:20,160
status

00:05:18,080 --> 00:05:21,120
um spending a lot of time as a dream

00:05:20,160 --> 00:05:23,759
developer

00:05:21,120 --> 00:05:25,199
uh and wanting like you know one thing

00:05:23,759 --> 00:05:27,360
about the developers is that they're

00:05:25,199 --> 00:05:29,520
hungry like they take part in their work

00:05:27,360 --> 00:05:30,720
they always have new ideas they're

00:05:29,520 --> 00:05:31,919
always out and

00:05:30,720 --> 00:05:34,560
they're more than once out in the

00:05:31,919 --> 00:05:36,240
community um not saying that

00:05:34,560 --> 00:05:37,680
you know like more senior ones aren't

00:05:36,240 --> 00:05:38,960
just like they're just kind of hungry

00:05:37,680 --> 00:05:40,080
they're really hungry they want to know

00:05:38,960 --> 00:05:42,080
all there is to know

00:05:40,080 --> 00:05:43,840
and they want to do a good job so

00:05:42,080 --> 00:05:44,479
definitely having a few of them on the

00:05:43,840 --> 00:05:48,080
team

00:05:44,479 --> 00:05:50,320
and maybe um making sure

00:05:48,080 --> 00:05:51,759
that there's a nice pairing where

00:05:50,320 --> 00:05:53,759
they're not afraid to come to you

00:05:51,759 --> 00:05:55,440
and you're not afraid or you don't treat

00:05:53,759 --> 00:05:57,520
them like they're kind of a nuance

00:05:55,440 --> 00:05:58,639
can definitely keep the team more

00:05:57,520 --> 00:06:01,039
congealed

00:05:58,639 --> 00:06:02,880
and you know having senior developers on

00:06:01,039 --> 00:06:04,560
the team not only add a lot of expertise

00:06:02,880 --> 00:06:07,120
as john said but it also

00:06:04,560 --> 00:06:09,039
plays a huge part in helping whether

00:06:07,120 --> 00:06:11,520
this developer stays a junior for

00:06:09,039 --> 00:06:13,120
three years or six months because the

00:06:11,520 --> 00:06:14,960
more you give to a junior developer

00:06:13,120 --> 00:06:15,520
especially really hungry ones and kind

00:06:14,960 --> 00:06:17,600
of

00:06:15,520 --> 00:06:19,039
you know make sure that the team is

00:06:17,600 --> 00:06:21,199
going right they will

00:06:19,039 --> 00:06:22,800
they can to become senior developers in

00:06:21,199 --> 00:06:24,720
no time which then

00:06:22,800 --> 00:06:27,199
makes your team more stronger and able

00:06:24,720 --> 00:06:29,360
to handle even more complex projects so

00:06:27,199 --> 00:06:30,479
for me definitely having a balance like

00:06:29,360 --> 00:06:31,919
what john said

00:06:30,479 --> 00:06:33,600
and knowing how to deal with in those

00:06:31,919 --> 00:06:35,680
rounds can definitely um

00:06:33,600 --> 00:06:37,840
play a huge part especially small small

00:06:35,680 --> 00:06:39,360
teams as well

00:06:37,840 --> 00:06:41,440
yeah and i agree with everything yvonne

00:06:39,360 --> 00:06:43,039
said uh the the thing i'll add is that

00:06:41,440 --> 00:06:44,639
i think it depends on the team and the

00:06:43,039 --> 00:06:46,639
product as well

00:06:44,639 --> 00:06:48,160
because if you look at a really stable

00:06:46,639 --> 00:06:49,599
product which has been around for a long

00:06:48,160 --> 00:06:51,680
time it's giant

00:06:49,599 --> 00:06:52,720
it's probably easier to bring on more

00:06:51,680 --> 00:06:53,280
junior team members right because you

00:06:52,720 --> 00:06:55,120
can give them

00:06:53,280 --> 00:06:56,720
easier tasks you they can take more time

00:06:55,120 --> 00:06:57,919
there's there's less pressure

00:06:56,720 --> 00:06:59,199
but at the same time it's probably not

00:06:57,919 --> 00:06:59,759
as good for their career so if you do

00:06:59,199 --> 00:07:02,880
have

00:06:59,759 --> 00:07:04,160
hungry passionate more junior members it

00:07:02,880 --> 00:07:05,039
can be more exciting to put them on the

00:07:04,160 --> 00:07:06,560
newer

00:07:05,039 --> 00:07:08,720
exciting things where there's a chance

00:07:06,560 --> 00:07:10,560
to make mistakes there's a chance to

00:07:08,720 --> 00:07:13,360
take ownership of something new and

00:07:10,560 --> 00:07:16,080
learn on the job

00:07:13,360 --> 00:07:17,759
awesome thanks steven your face is

00:07:16,080 --> 00:07:21,280
frozen but we can hear you still

00:07:17,759 --> 00:07:22,960
so keep going all right next question

00:07:21,280 --> 00:07:25,360
maybe yeah maybe he's a ventriloquist

00:07:22,960 --> 00:07:27,759
now he's practicing because he's

00:07:25,360 --> 00:07:28,960
trying to impress him just fine yeah his

00:07:27,759 --> 00:07:32,479
face is moving for me

00:07:28,960 --> 00:07:34,000
good job good job uh stephen all right

00:07:32,479 --> 00:07:35,599
so here's the next question i think this

00:07:34,000 --> 00:07:37,520
may be for john

00:07:35,599 --> 00:07:38,720
uh what is the best way to handle an

00:07:37,520 --> 00:07:41,360
error when fetching

00:07:38,720 --> 00:07:42,639
a lazy loaded route does there does

00:07:41,360 --> 00:07:46,000
preload have a retry

00:07:42,639 --> 00:07:47,759
or interceptor no it

00:07:46,000 --> 00:07:49,599
doesn't and i wish it does that's high

00:07:47,759 --> 00:07:50,800
on my feature list i was just tinkering

00:07:49,599 --> 00:07:52,960
today with trying to figure out how to

00:07:50,800 --> 00:07:56,000
get interceptors to work with preload

00:07:52,960 --> 00:07:58,160
but to be like a preload interceptor

00:07:56,000 --> 00:07:59,440
so i'm sure if i only knew someone on

00:07:58,160 --> 00:08:00,879
the angular team we could talk about

00:07:59,440 --> 00:08:02,639
that a little bit

00:08:00,879 --> 00:08:04,639
um right now if there's retries and

00:08:02,639 --> 00:08:06,160
fetches i mean with rxjs there's ways

00:08:04,639 --> 00:08:07,440
that you can actually pipe into that and

00:08:06,160 --> 00:08:09,520
find out what's happening

00:08:07,440 --> 00:08:10,720
uh but i have yet to find a way to make

00:08:09,520 --> 00:08:13,199
it retry

00:08:10,720 --> 00:08:14,400
steven is there a way to do that i don't

00:08:13,199 --> 00:08:16,160
know the answer to that but

00:08:14,400 --> 00:08:18,000
we should look in that together we

00:08:16,160 --> 00:08:21,199
should do that i'd love that

00:08:18,000 --> 00:08:23,280
great question awesome

00:08:21,199 --> 00:08:25,840
thanks for thanks for that answer all

00:08:23,280 --> 00:08:27,680
right next

00:08:25,840 --> 00:08:29,840
i think this one might be for steven are

00:08:27,680 --> 00:08:32,399
there any tools showing component usage

00:08:29,840 --> 00:08:34,640
in monorepo

00:08:32,399 --> 00:08:36,479
so uh there are a bunch of these tools

00:08:34,640 --> 00:08:38,000
out there i've seen them and i've talked

00:08:36,479 --> 00:08:39,360
to people that want to open source them

00:08:38,000 --> 00:08:42,719
and want to make them public

00:08:39,360 --> 00:08:44,640
uh that has not yet happened uh and so

00:08:42,719 --> 00:08:45,760
you can you can blame me for not pushing

00:08:44,640 --> 00:08:47,760
the community i mean

00:08:45,760 --> 00:08:49,200
uh it's it's a bunch of enterprises who

00:08:47,760 --> 00:08:50,480
their default assumption is hey i need

00:08:49,200 --> 00:08:51,279
this tool for me so i'm just gonna build

00:08:50,480 --> 00:08:52,800
it in secret

00:08:51,279 --> 00:08:55,120
and no one else will ever need it but i

00:08:52,800 --> 00:08:56,080
think there's a huge need here and so

00:08:55,120 --> 00:08:57,200
if you're out there if you're building

00:08:56,080 --> 00:08:58,399
one of these tools because i know a

00:08:57,200 --> 00:09:00,240
bunch of companies are

00:08:58,399 --> 00:09:01,360
uh let's pick me let's let's put

00:09:00,240 --> 00:09:02,320
together a group and let's all build one

00:09:01,360 --> 00:09:04,160
together

00:09:02,320 --> 00:09:06,080
yeah that's a great idea i agree all

00:09:04,160 --> 00:09:07,519
right next one also for steven and i'm

00:09:06,080 --> 00:09:10,720
just taking these off of the most

00:09:07,519 --> 00:09:13,360
of votes um

00:09:10,720 --> 00:09:14,640
steven for an enterprise strategy does

00:09:13,360 --> 00:09:17,680
it make sense

00:09:14,640 --> 00:09:20,480
to upgrade angular versions yearly

00:09:17,680 --> 00:09:21,120
and if so should one stay away from dot

00:09:20,480 --> 00:09:24,720
zero

00:09:21,120 --> 00:09:27,440
releases so what i'll say

00:09:24,720 --> 00:09:28,240
is that the quality of every angular

00:09:27,440 --> 00:09:30,080
commit

00:09:28,240 --> 00:09:31,839
is very very high and so when i say

00:09:30,080 --> 00:09:33,680
commit that means literally every commit

00:09:31,839 --> 00:09:37,440
that we merge into the master

00:09:33,680 --> 00:09:39,920
uh branch of uh our github repository

00:09:37,440 --> 00:09:41,279
is tested across all of google and so

00:09:39,920 --> 00:09:42,720
we're actually very very sure

00:09:41,279 --> 00:09:44,800
of every release of angular all the way

00:09:42,720 --> 00:09:45,440
down to patch and then we do a ton of

00:09:44,800 --> 00:09:48,560
extra

00:09:45,440 --> 00:09:50,399
testing for every major and so i would

00:09:48,560 --> 00:09:52,320
i have no fear about using zero releases

00:09:50,399 --> 00:09:53,600
in production um i don't recommend

00:09:52,320 --> 00:09:54,399
anyone else be afraid of them but i

00:09:53,600 --> 00:09:57,040
understand

00:09:54,399 --> 00:09:58,160
uh there's there's legacy concepts that

00:09:57,040 --> 00:10:00,160
make you afraid

00:09:58,160 --> 00:10:02,079
um i would definitely say upgrade twice

00:10:00,160 --> 00:10:03,040
a year don't don't wait for a year

00:10:02,079 --> 00:10:04,079
because

00:10:03,040 --> 00:10:05,120
you're just making more work for

00:10:04,079 --> 00:10:06,880
yourself and you're just putting

00:10:05,120 --> 00:10:08,640
yourself behind the curve

00:10:06,880 --> 00:10:11,200
yeah i'm going to add to that i'm going

00:10:08,640 --> 00:10:12,560
to because i get to work kind of closely

00:10:11,200 --> 00:10:14,720
with you you and your team

00:10:12,560 --> 00:10:16,399
on these early releases you guys say hey

00:10:14,720 --> 00:10:19,440
try this out

00:10:16,399 --> 00:10:21,200
and if you're worried about a release if

00:10:19,440 --> 00:10:23,040
you get in early you actually have the

00:10:21,200 --> 00:10:24,079
angular team's full attention like

00:10:23,040 --> 00:10:26,959
if you're like hey i'm going to get a

00:10:24,079 --> 00:10:28,240
bug the angular team if you do it early

00:10:26,959 --> 00:10:30,720
anything's like watching and they're

00:10:28,240 --> 00:10:31,680
there to fix your bugs like hands-on so

00:10:30,720 --> 00:10:32,959
you don't have to push your production

00:10:31,680 --> 00:10:34,800
but you can at least give it a try with

00:10:32,959 --> 00:10:35,440
them watching so i would say get in get

00:10:34,800 --> 00:10:38,000
in sooner

00:10:35,440 --> 00:10:39,120
rather than later if if you hit us up

00:10:38,000 --> 00:10:40,399
midway into

00:10:39,120 --> 00:10:42,480
the next major or the next miner or

00:10:40,399 --> 00:10:44,079
anything like that uh yeah we're

00:10:42,480 --> 00:10:45,680
it is far easier for us to go fix your

00:10:44,079 --> 00:10:46,720
bug before it goes out to everybody then

00:10:45,680 --> 00:10:49,279
after it's gone out

00:10:46,720 --> 00:10:50,560
totally i totally agree with that okay

00:10:49,279 --> 00:10:52,320
all right this one i think we're going

00:10:50,560 --> 00:10:54,200
back to john

00:10:52,320 --> 00:10:55,839
is there a way to preload modules

00:10:54,200 --> 00:10:58,079
asynchronously

00:10:55,839 --> 00:11:01,360
i've seen a preload strategy block.js

00:10:58,079 --> 00:11:04,640
while it gets the modules

00:11:01,360 --> 00:11:06,720
well pre-loading kind of happens async

00:11:04,640 --> 00:11:08,240
it happens behind the scenes for you

00:11:06,720 --> 00:11:10,800
already so it's not something that like

00:11:08,240 --> 00:11:13,519
you make your users wait for

00:11:10,800 --> 00:11:14,880
so when you say async i'm not really

00:11:13,519 --> 00:11:16,560
sure

00:11:14,880 --> 00:11:18,079
what your question is actually asking

00:11:16,560 --> 00:11:18,959
about i've seen the previous strategy

00:11:18,079 --> 00:11:20,959
block

00:11:18,959 --> 00:11:22,399
javascript yeah because it's not really

00:11:20,959 --> 00:11:23,040
on a background thread it's it's

00:11:22,399 --> 00:11:24,720
happening

00:11:23,040 --> 00:11:26,079
inside the browser so it's actually

00:11:24,720 --> 00:11:27,200
taking up the processing other browser

00:11:26,079 --> 00:11:28,160
when this happens

00:11:27,200 --> 00:11:30,000
yeah i don't i don't know if i

00:11:28,160 --> 00:11:30,399
understand there's like a worker thread

00:11:30,000 --> 00:11:33,920
i don't

00:11:30,399 --> 00:11:35,360
know of any yeah i don't know if i

00:11:33,920 --> 00:11:36,480
i don't think that's how it does happen

00:11:35,360 --> 00:11:38,240
actually it can't block on an

00:11:36,480 --> 00:11:40,880
asynchronous fetch for the data on the

00:11:38,240 --> 00:11:42,240
for this javascript so that's weird

00:11:40,880 --> 00:11:44,079
right but it's not like on a worker

00:11:42,240 --> 00:11:48,000
thread as far as i'm aware

00:11:44,079 --> 00:11:48,320
yeah all right well then uh the answer

00:11:48,000 --> 00:11:51,519
is

00:11:48,320 --> 00:11:54,800
no or i don't know okay next question

00:11:51,519 --> 00:11:56,320
john come on

00:11:54,800 --> 00:11:58,000
john you're you're famous you already

00:11:56,320 --> 00:12:03,440
knew this

00:11:58,000 --> 00:12:03,440
okay john how do you handle shared code

00:12:03,920 --> 00:12:07,600
if two pre-loaded routes use the same

00:12:06,079 --> 00:12:10,160
component services won't they be

00:12:07,600 --> 00:12:12,480
downloaded twice

00:12:10,160 --> 00:12:14,480
shared code of two pre-loaded routes

00:12:12,480 --> 00:12:17,680
download the same

00:12:14,480 --> 00:12:20,079
components and services go ahead

00:12:17,680 --> 00:12:21,440
no yeah you said it you got it i was

00:12:20,079 --> 00:12:22,639
just looking for the text i like to read

00:12:21,440 --> 00:12:24,320
them too yeah

00:12:22,639 --> 00:12:25,839
so if you've got two pre-loaded routes

00:12:24,320 --> 00:12:28,079
let's say heroes and

00:12:25,839 --> 00:12:29,600
villains two completely separate things

00:12:28,079 --> 00:12:31,839
if they're sharing the same

00:12:29,600 --> 00:12:34,480
services their prop that service is

00:12:31,839 --> 00:12:35,519
probably in the app module maybe it's in

00:12:34,480 --> 00:12:37,760
the main module

00:12:35,519 --> 00:12:38,720
so that thing's already been loaded

00:12:37,760 --> 00:12:40,480
already

00:12:38,720 --> 00:12:41,760
so no it doesn't download the thing

00:12:40,480 --> 00:12:43,680
twice uh in there

00:12:41,760 --> 00:12:45,200
if it's something that's too share

00:12:43,680 --> 00:12:46,880
angular's actually pretty smart about

00:12:45,200 --> 00:12:48,160
creating a bundle that's like um

00:12:46,880 --> 00:12:50,639
you might have seen in my demo i had a

00:12:48,160 --> 00:12:52,320
heroes dash villains bundle as well

00:12:50,639 --> 00:12:54,480
so as a heroes bundle a villain's bundle

00:12:52,320 --> 00:12:55,920
and then it was a hero's villains bundle

00:12:54,480 --> 00:12:57,760
that's where the shared code actually

00:12:55,920 --> 00:12:58,639
goes if there's two sharing in the same

00:12:57,760 --> 00:13:00,720
module

00:12:58,639 --> 00:13:02,079
so in that case heroes gets downloaded

00:13:00,720 --> 00:13:04,000
and so does the shared one

00:13:02,079 --> 00:13:05,279
and then when villains comes it gets

00:13:04,000 --> 00:13:06,320
that module but it's already got the

00:13:05,279 --> 00:13:09,600
shared one there

00:13:06,320 --> 00:13:12,160
so hard to talk about yeah so by default

00:13:09,600 --> 00:13:13,839
webpack which is what the cli is using

00:13:12,160 --> 00:13:15,600
we'll put that into a commons chunk

00:13:13,839 --> 00:13:17,200
that's what it's called

00:13:15,600 --> 00:13:19,040
so those pieces will get loaded into

00:13:17,200 --> 00:13:20,000
commons chunk but if you don't like that

00:13:19,040 --> 00:13:23,200
you can turn it

00:13:20,000 --> 00:13:24,880
off and each chunk actually at that

00:13:23,200 --> 00:13:26,720
point it will download it two times but

00:13:24,880 --> 00:13:28,320
by default

00:13:26,720 --> 00:13:30,320
it just it loads it one time but it

00:13:28,320 --> 00:13:31,839
loads it like when the whole app loads

00:13:30,320 --> 00:13:32,320
not it doesn't lazy load either of them

00:13:31,839 --> 00:13:34,320
they get

00:13:32,320 --> 00:13:36,240
when two things need that it gets put in

00:13:34,320 --> 00:13:37,920
the comments junk so yeah

00:13:36,240 --> 00:13:39,760
yeah i tried the demo that i showed it

00:13:37,920 --> 00:13:41,279
actually does do that so

00:13:39,760 --> 00:13:42,320
if you download that run it and the

00:13:41,279 --> 00:13:43,440
instructions should be in the readme

00:13:42,320 --> 00:13:46,160
it'll actually walk you through and you

00:13:43,440 --> 00:13:49,839
can see this happen

00:13:46,160 --> 00:13:49,839
okay um yvonne

00:13:49,920 --> 00:13:56,399
what about backward compatibility for

00:13:52,720 --> 00:13:56,399
taking out the entry component

00:13:56,880 --> 00:14:01,760
um i think oh am i on mute no we hear

00:14:00,240 --> 00:14:03,199
you you're frozen but you we can hear

00:14:01,760 --> 00:14:08,240
you

00:14:03,199 --> 00:14:09,760
oh oh there you are we see you now

00:14:08,240 --> 00:14:12,480
how are you hearing me i was on mute

00:14:09,760 --> 00:14:16,000
that's crazy um i mean

00:14:12,480 --> 00:14:17,680
i don't even know where uh

00:14:16,000 --> 00:14:19,600
so from what i read because i was doing

00:14:17,680 --> 00:14:21,279
a lot of research uh

00:14:19,600 --> 00:14:22,800
you will have to remove them from what i

00:14:21,279 --> 00:14:25,199
read i think um

00:14:22,800 --> 00:14:26,560
i may be wrong so don't quote me on that

00:14:25,199 --> 00:14:30,560
but i did read that

00:14:26,560 --> 00:14:33,760
you have to remove them

00:14:30,560 --> 00:14:35,600
all right thank you yeah i think if

00:14:33,760 --> 00:14:37,839
if you just leave your entry components

00:14:35,600 --> 00:14:38,560
actually stephen when you upgrade to

00:14:37,839 --> 00:14:40,480
nine

00:14:38,560 --> 00:14:43,040
isn't there a schematic that pulls out

00:14:40,480 --> 00:14:46,240
all your entry components for you

00:14:43,040 --> 00:14:48,800
i don't know i i might be

00:14:46,240 --> 00:14:49,839
that sounds likely if there's not i

00:14:48,800 --> 00:14:51,040
don't think it matters because

00:14:49,839 --> 00:14:52,480
they don't spread energy update and it

00:14:51,040 --> 00:14:53,680
works yeah they're just frivolous

00:14:52,480 --> 00:14:55,519
metadata at this point i don't think

00:14:53,680 --> 00:14:59,199
that they matter anymore right

00:14:55,519 --> 00:15:02,320
yeah they get recycled into shoes

00:14:59,199 --> 00:15:05,440
yeah no no no no shoes

00:15:02,320 --> 00:15:07,760
yeah they do there is a it's an outreach

00:15:05,440 --> 00:15:07,760
program

00:15:08,399 --> 00:15:11,440
yeah the entry components i actually

00:15:09,760 --> 00:15:12,000
wrote about this in a blog post um i've

00:15:11,440 --> 00:15:13,360
got a link

00:15:12,000 --> 00:15:14,959
if anybody wants to read it later i can

00:15:13,360 --> 00:15:18,480
stick it i think it was you i think it

00:15:14,959 --> 00:15:18,480
was you your article that i read

00:15:18,959 --> 00:15:26,399
yeah all right

00:15:22,880 --> 00:15:28,160
okay um let's go i'm this thing's not

00:15:26,399 --> 00:15:29,759
sorting anymore by the most stars so i

00:15:28,160 --> 00:15:32,880
have to find john

00:15:29,759 --> 00:15:36,399
could you talk about the importance of

00:15:32,880 --> 00:15:39,759
empty from rxjs

00:15:36,399 --> 00:15:41,920
empty or empathy uh

00:15:39,759 --> 00:15:44,000
i don't think rx just has empathy so

00:15:41,920 --> 00:15:45,839
let's just go with empathy

00:15:44,000 --> 00:15:47,839
okay i was making sure i heard it right

00:15:45,839 --> 00:15:50,480
because the audio glitched

00:15:47,839 --> 00:15:51,600
sorry okay so you're talking about what

00:15:50,480 --> 00:15:54,639
i showed in my

00:15:51,600 --> 00:15:57,199
uh presentation there's this empty

00:15:54,639 --> 00:15:59,120
constant that rxjs has

00:15:57,199 --> 00:16:01,279
that you can use and it's an observable

00:15:59,120 --> 00:16:03,279
of never

00:16:01,279 --> 00:16:05,680
of type never so basically what the

00:16:03,279 --> 00:16:08,320
empty does it's a way for you to

00:16:05,680 --> 00:16:09,759
return something from that function in

00:16:08,320 --> 00:16:11,040
the preload strategy so if you're not

00:16:09,759 --> 00:16:11,920
returning the load function which is

00:16:11,040 --> 00:16:13,360
unobservable

00:16:11,920 --> 00:16:14,880
you've got to return something and it

00:16:13,360 --> 00:16:17,040
still expects an observable but of

00:16:14,880 --> 00:16:20,959
nothing

00:16:17,040 --> 00:16:25,199
so that's why it does that all right

00:16:20,959 --> 00:16:28,800
so steven any news about

00:16:25,199 --> 00:16:31,920
angular for designers uh so

00:16:28,800 --> 00:16:34,720
no news about the specific co-design

00:16:31,920 --> 00:16:35,440
project uh although i'm i'm sure that

00:16:34,720 --> 00:16:38,079
the team that's

00:16:35,440 --> 00:16:38,560
continues to work on it uh they they

00:16:38,079 --> 00:16:40,160
love

00:16:38,560 --> 00:16:41,680
hearing about that they love feedback

00:16:40,160 --> 00:16:42,000
but what i would point people to right

00:16:41,680 --> 00:16:44,880
now

00:16:42,000 --> 00:16:46,000
is uh ui bakery um so this is a service

00:16:44,880 --> 00:16:48,320
from a different team

00:16:46,000 --> 00:16:50,079
called aqueo where it has similar sorts

00:16:48,320 --> 00:16:51,920
of kind of live interactive prototyping

00:16:50,079 --> 00:16:52,560
where you can click kind of in a visual

00:16:51,920 --> 00:16:53,920
experience

00:16:52,560 --> 00:16:55,839
that gives you real code that you can

00:16:53,920 --> 00:16:57,600
interact with so i would definitely

00:16:55,839 --> 00:16:59,120
tell people if you're interested in this

00:16:57,600 --> 00:17:00,160
sort of kind of rapid prototyping and

00:16:59,120 --> 00:17:02,959
you want a visual tool

00:17:00,160 --> 00:17:05,039
check out ui bakery yeah i'm actually

00:17:02,959 --> 00:17:05,760
i'm gonna drop a link to ui bakery down

00:17:05,039 --> 00:17:07,039
in the below

00:17:05,760 --> 00:17:09,679
like it's gonna go down to the button

00:17:07,039 --> 00:17:11,839
down there um they're doing a

00:17:09,679 --> 00:17:13,679
pre-release or an early release of their

00:17:11,839 --> 00:17:15,520
latest ui bakery with some new features

00:17:13,679 --> 00:17:17,600
with back-end api support

00:17:15,520 --> 00:17:19,039
so just to kind of piggyback they're a

00:17:17,600 --> 00:17:20,079
sponsor of the event so

00:17:19,039 --> 00:17:21,600
i'm going to say well i'm going to

00:17:20,079 --> 00:17:24,079
follow what stephen said go check out ui

00:17:21,600 --> 00:17:27,760
bakery thanks stephen

00:17:24,079 --> 00:17:30,240
all right um what's the best strategy

00:17:27,760 --> 00:17:31,679
no no backup backup backup this is for

00:17:30,240 --> 00:17:33,600
yvonne

00:17:31,679 --> 00:17:35,360
with entry components being deprecated

00:17:33,600 --> 00:17:36,400
does that mean when we upgrade from

00:17:35,360 --> 00:17:38,000
eight to nine

00:17:36,400 --> 00:17:40,240
we'd have to manually remove current

00:17:38,000 --> 00:17:41,039
usages or will the upgrade command

00:17:40,240 --> 00:17:44,640
automatically

00:17:41,039 --> 00:17:46,160
handle removing of unu of usage

00:17:44,640 --> 00:17:47,840
that i this is the one we already is

00:17:46,160 --> 00:17:48,160
that the same one we just uh talking

00:17:47,840 --> 00:17:49,440
about

00:17:48,160 --> 00:17:51,440
it's the same question it's different

00:17:49,440 --> 00:17:53,280
though but yeah

00:17:51,440 --> 00:17:54,640
so it took them out already john is that

00:17:53,280 --> 00:17:55,280
was that the answer it takes them out

00:17:54,640 --> 00:17:56,880
for you

00:17:55,280 --> 00:17:58,640
it does not take them out okay so it

00:17:56,880 --> 00:18:00,720
leaves them in yeah

00:17:58,640 --> 00:18:01,679
but they're functionally they're

00:18:00,720 --> 00:18:04,799
functionally like

00:18:01,679 --> 00:18:08,240
frivolous yeah yeah okay

00:18:04,799 --> 00:18:10,320
if if such when we remove

00:18:08,240 --> 00:18:11,840
components the reason why is because all

00:18:10,320 --> 00:18:15,440
of the information now

00:18:11,840 --> 00:18:16,960
is um added to the static properties and

00:18:15,440 --> 00:18:18,880
under the hood it still uses nd

00:18:16,960 --> 00:18:22,559
factories uh there's a wrapper class

00:18:18,880 --> 00:18:25,280
um that is the ng factory but in itself

00:18:22,559 --> 00:18:26,480
the component is now a reference to its

00:18:25,280 --> 00:18:28,080
own factory and it has all the

00:18:26,480 --> 00:18:30,400
information in those two properties

00:18:28,080 --> 00:18:31,760
so it's not really needed i mean you can

00:18:30,400 --> 00:18:33,760
leave them there if you don't want to

00:18:31,760 --> 00:18:36,559
you know deal with the tank for that but

00:18:33,760 --> 00:18:38,480
they're not going to be used

00:18:36,559 --> 00:18:39,760
yeah so as i'll come in a little bit

00:18:38,480 --> 00:18:40,640
here too so as part of the migration

00:18:39,760 --> 00:18:42,080
story

00:18:40,640 --> 00:18:43,600
when you update to version nine we want

00:18:42,080 --> 00:18:44,160
you to still be able to go back to the

00:18:43,600 --> 00:18:47,760
old

00:18:44,160 --> 00:18:49,120
uh rendering engine compiler um so

00:18:47,760 --> 00:18:50,880
like we want you to be compatible with

00:18:49,120 --> 00:18:52,320
both whereas

00:18:50,880 --> 00:18:54,559
when we start removing them when we we

00:18:52,320 --> 00:18:56,320
remove the the view engine compiler

00:18:54,559 --> 00:18:57,600
then they won't make any sense and so

00:18:56,320 --> 00:18:58,480
then we'll automatically migrate when we

00:18:57,600 --> 00:19:00,240
actually remove them

00:18:58,480 --> 00:19:02,160
and we change the api then we'll

00:19:00,240 --> 00:19:03,760
automatically remove them for you

00:19:02,160 --> 00:19:05,919
cool and it looks like igor just said

00:19:03,760 --> 00:19:08,400
the same thing

00:19:05,919 --> 00:19:09,520
i found it in the chat igor's been been

00:19:08,400 --> 00:19:12,720
out there so yeah

00:19:09,520 --> 00:19:13,840
okay cool um another question for

00:19:12,720 --> 00:19:16,400
stephen

00:19:13,840 --> 00:19:16,960
they're saying just wondering any news

00:19:16,400 --> 00:19:20,000
on

00:19:16,960 --> 00:19:22,000
angular photon

00:19:20,000 --> 00:19:23,039
sure uh so angular photon was an

00:19:22,000 --> 00:19:26,400
experiment that we

00:19:23,039 --> 00:19:28,160
we did with kind of dynamic

00:19:26,400 --> 00:19:29,440
loading of individual component

00:19:28,160 --> 00:19:31,679
behaviors and functionality

00:19:29,440 --> 00:19:33,280
uh it was just a proof of concept uh it

00:19:31,679 --> 00:19:34,960
was from our perspective successful in

00:19:33,280 --> 00:19:36,960
terms of we showed that we could do this

00:19:34,960 --> 00:19:38,000
the the problem with it was that it

00:19:36,960 --> 00:19:39,039
wasn't productionizable

00:19:38,000 --> 00:19:40,720
like we couldn't just release that

00:19:39,039 --> 00:19:41,280
feature because it wasn't compatible

00:19:40,720 --> 00:19:42,880
with

00:19:41,280 --> 00:19:45,360
most of the things that ngo developers

00:19:42,880 --> 00:19:47,919
do and so for us the big challenge

00:19:45,360 --> 00:19:49,440
was getting out ivy so that we are

00:19:47,919 --> 00:19:50,240
unblocked and now we can actually start

00:19:49,440 --> 00:19:51,600
to think about okay

00:19:50,240 --> 00:19:53,360
how could we productionize this how do

00:19:51,600 --> 00:19:55,039
we offer these sorts of capabilities

00:19:53,360 --> 00:19:57,120
uh in the existing angular world without

00:19:55,039 --> 00:19:59,919
breaking everyone's apis

00:19:57,120 --> 00:20:02,080
so it's something that we id enables us

00:19:59,919 --> 00:20:05,520
to start thinking about

00:20:02,080 --> 00:20:08,480
awesome thanks man okay

00:20:05,520 --> 00:20:09,120
what's the best strategy to build two

00:20:08,480 --> 00:20:11,919
apps

00:20:09,120 --> 00:20:12,960
separate urls internally and externally

00:20:11,919 --> 00:20:14,880
accessible

00:20:12,960 --> 00:20:17,840
with slight content changes into a

00:20:14,880 --> 00:20:19,440
single code repo

00:20:17,840 --> 00:20:21,600
any one of the three of you can answer

00:20:19,440 --> 00:20:24,480
that

00:20:21,600 --> 00:20:25,760
so two apps one's internal one's

00:20:24,480 --> 00:20:28,159
external

00:20:25,760 --> 00:20:32,000
slight content changes on a single code

00:20:28,159 --> 00:20:32,000
base or single repo sorry yeah

00:20:32,400 --> 00:20:36,640
a map with different databases or

00:20:34,159 --> 00:20:37,919
different database queries maybe

00:20:36,640 --> 00:20:39,760
yeah it all depends what you're doing

00:20:37,919 --> 00:20:41,039
you know different environments.ts you

00:20:39,760 --> 00:20:41,520
can have different environments files i

00:20:41,039 --> 00:20:43,200
mean

00:20:41,520 --> 00:20:44,880
this is something if you look at the

00:20:43,200 --> 00:20:46,400
like the klm air france of the world the

00:20:44,880 --> 00:20:48,000
deltas of the world

00:20:46,400 --> 00:20:49,520
this happens all the time in enterprise

00:20:48,000 --> 00:20:50,720
where we have multiple brands for the

00:20:49,520 --> 00:20:51,760
same product and so

00:20:50,720 --> 00:20:52,799
there's a bunch of different stories you

00:20:51,760 --> 00:20:54,000
can do at the content layer where if

00:20:52,799 --> 00:20:54,799
you're pulling content from a database

00:20:54,000 --> 00:20:56,720
you can do it there

00:20:54,799 --> 00:20:58,080
uh you can do it in an environs file and

00:20:56,720 --> 00:20:59,520
you can kind of conditional

00:20:58,080 --> 00:21:02,000
have conditional behaviors in every

00:20:59,520 --> 00:21:02,559
single component or you can have kind of

00:21:02,000 --> 00:21:05,280
different

00:21:02,559 --> 00:21:06,000
application layers wrapping on or lower

00:21:05,280 --> 00:21:07,520
level pieces

00:21:06,000 --> 00:21:09,360
you can have kind of injection tokens

00:21:07,520 --> 00:21:11,200
that identify which uh set

00:21:09,360 --> 00:21:12,400
of behavior is an after and there's a

00:21:11,200 --> 00:21:13,120
whole bunch of really good strategies

00:21:12,400 --> 00:21:14,640
around this and it

00:21:13,120 --> 00:21:16,720
it's heavily dependent on what problem

00:21:14,640 --> 00:21:19,440
you're trying to solve got you

00:21:16,720 --> 00:21:19,840
yeah i agree all right stephen it needs

00:21:19,440 --> 00:21:22,320
to

00:21:19,840 --> 00:21:22,880
work too yeah it is a lot of work all

00:21:22,320 --> 00:21:25,360
right

00:21:22,880 --> 00:21:26,960
is there any plan to stop support or dab

00:21:25,360 --> 00:21:31,840
on angular in the near future with so

00:21:26,960 --> 00:21:31,840
many frameworks coming forward

00:21:39,520 --> 00:21:45,360
uh no we we think angular is great

00:21:43,280 --> 00:21:47,760
the community continues to grow we build

00:21:45,360 --> 00:21:50,799
better and better apps every day

00:21:47,760 --> 00:21:52,400
why would we stop that's wonderful

00:21:50,799 --> 00:21:55,200
it continues to grow inside at google

00:21:52,400 --> 00:21:57,600
right yeah i mean like

00:21:55,200 --> 00:21:58,880
we have to keep building angular for

00:21:57,600 --> 00:21:59,919
google but we

00:21:58,880 --> 00:22:01,120
we're always going to do it in a way

00:21:59,919 --> 00:22:02,960
that supports the world because that's

00:22:01,120 --> 00:22:04,080
that's the core of who we are is doing

00:22:02,960 --> 00:22:06,400
this open source doing it with the

00:22:04,080 --> 00:22:09,440
ecosystem doing with the community

00:22:06,400 --> 00:22:11,760
got it all right jp

00:22:09,440 --> 00:22:14,159
set order in preload strategy is that

00:22:11,760 --> 00:22:16,000
possible

00:22:14,159 --> 00:22:17,520
uh yeah i commented on in the text a

00:22:16,000 --> 00:22:19,360
little you can

00:22:17,520 --> 00:22:20,640
with a lot of logic and hard work you

00:22:19,360 --> 00:22:22,320
could kind of write your own way to do

00:22:20,640 --> 00:22:25,520
it but nothing natively

00:22:22,320 --> 00:22:26,240
will do that for you okay it's good to

00:22:25,520 --> 00:22:27,919
know that

00:22:26,240 --> 00:22:29,280
if you do figure it out you should add

00:22:27,919 --> 00:22:30,880
it to that blog series of all your

00:22:29,280 --> 00:22:36,080
preload strategies

00:22:30,880 --> 00:22:36,080
yeah yeah okay um

00:22:37,919 --> 00:22:43,120
stephen do you have any recommendations

00:22:41,200 --> 00:22:44,880
for tooling

00:22:43,120 --> 00:22:46,720
to use tracking component usage in

00:22:44,880 --> 00:22:48,320
monorepo

00:22:46,720 --> 00:22:50,080
like dependency graph type stuff i think

00:22:48,320 --> 00:22:52,000
we already we already yeah yeah there's

00:22:50,080 --> 00:22:55,200
several of these questions in here

00:22:52,000 --> 00:22:56,799
okay one sec like i think that one

00:22:55,200 --> 00:22:58,640
really hit a nerve and

00:22:56,799 --> 00:23:00,159
so i i do want to put together a group

00:22:58,640 --> 00:23:04,240
to actually do this together

00:23:00,159 --> 00:23:05,760
so uh send me a twitter dm

00:23:04,240 --> 00:23:07,360
and we will put the script together and

00:23:05,760 --> 00:23:07,679
we will make sure this gets built all

00:23:07,360 --> 00:23:10,799
right

00:23:07,679 --> 00:23:13,919
steven what

00:23:10,799 --> 00:23:16,720
can we expect in

00:23:13,919 --> 00:23:16,720
angular 10

00:23:17,520 --> 00:23:22,559
break it down so i i will not make any

00:23:20,720 --> 00:23:23,679
commitments about specific functionality

00:23:22,559 --> 00:23:25,919
or features but

00:23:23,679 --> 00:23:26,799
i will just comment briefly on timing so

00:23:25,919 --> 00:23:29,919
uh it is

00:23:26,799 --> 00:23:33,440
currently april uh we are planning on

00:23:29,919 --> 00:23:34,240
uh cutting like moving to rc relatively

00:23:33,440 --> 00:23:37,039
quickly

00:23:34,240 --> 00:23:37,600
and moving to final relatively quickly

00:23:37,039 --> 00:23:40,799
here

00:23:37,600 --> 00:23:42,000
so do not expect uh we're not planning

00:23:40,799 --> 00:23:43,760
we're not thinking about

00:23:42,000 --> 00:23:45,440
spending three or four or five months on

00:23:43,760 --> 00:23:47,279
making this a giant big feature-rich

00:23:45,440 --> 00:23:49,679
release we're focused on

00:23:47,279 --> 00:23:50,559
uh kind of keeping the ecosystem moving

00:23:49,679 --> 00:23:52,960
forward

00:23:50,559 --> 00:23:53,760
and then kind of doing planning and

00:23:52,960 --> 00:23:56,880
figuring out

00:23:53,760 --> 00:23:58,320
the the future as we go so i would

00:23:56,880 --> 00:23:58,880
expect this release to relatively

00:23:58,320 --> 00:24:00,559
smaller

00:23:58,880 --> 00:24:02,080
compared to for example 9.0 or other

00:24:00,559 --> 00:24:06,880
releases

00:24:02,080 --> 00:24:09,919
gotcha okay um jp

00:24:06,880 --> 00:24:13,600
how is empty different than

00:24:09,919 --> 00:24:15,520
of null oh i don't know off the top of

00:24:13,600 --> 00:24:17,520
my head there i know that empty means

00:24:15,520 --> 00:24:19,279
that you have

00:24:17,520 --> 00:24:22,559
yeah actually of null might work in that

00:24:19,279 --> 00:24:24,799
case doesn't that emit a null then

00:24:22,559 --> 00:24:26,799
sorry doesn't that emit a null isn't

00:24:24,799 --> 00:24:28,960
that an object

00:24:26,799 --> 00:24:30,320
yeah null versus never i'm just not sure

00:24:28,960 --> 00:24:34,400
what the preload would do

00:24:30,320 --> 00:24:36,080
if you returned a null i don't know

00:24:34,400 --> 00:24:37,200
i can find out in the next two minutes

00:24:36,080 --> 00:24:38,480
from an observable standpoint they're

00:24:37,200 --> 00:24:39,840
definitely different

00:24:38,480 --> 00:24:41,760
but they might not be different in a

00:24:39,840 --> 00:24:46,400
pre-loading context okay

00:24:41,760 --> 00:24:48,960
cool all right i'm looking

00:24:46,400 --> 00:24:51,279
we got a lot more questions on here

00:24:48,960 --> 00:24:52,960
they're all kind of the same though

00:24:51,279 --> 00:24:55,520
um all right there's no more voting

00:24:52,960 --> 00:24:57,279
happening so hey aaron can yvonne and i

00:24:55,520 --> 00:24:58,640
um answer the question like steven did

00:24:57,279 --> 00:24:59,840
of what's coming in angular 10 because

00:24:58,640 --> 00:25:00,720
we're not in the angular team so we can

00:24:59,840 --> 00:25:04,320
say anything we want

00:25:00,720 --> 00:25:06,880
yeah no jp yvonne what's coming in

00:25:04,320 --> 00:25:06,880
angular 10

00:25:08,559 --> 00:25:13,760
yvonne did you freeze uh jp what's

00:25:11,360 --> 00:25:16,159
coming in angular

00:25:13,760 --> 00:25:17,120
uh everything they're going to have ice

00:25:16,159 --> 00:25:21,039
cream

00:25:17,120 --> 00:25:22,400
candy pizza coupons uh and steven is

00:25:21,039 --> 00:25:23,360
going to come to everybody's house

00:25:22,400 --> 00:25:25,840
personally

00:25:23,360 --> 00:25:26,799
and teach them how to use angular 10 oh

00:25:25,840 --> 00:25:28,960
i'll do the update

00:25:26,799 --> 00:25:28,960
i'm going

00:25:32,240 --> 00:25:37,760
can you hear us shrug she can't hear us

00:25:36,240 --> 00:25:40,400
all right

00:25:37,760 --> 00:25:40,880
google me when zoom when you can't use

00:25:40,400 --> 00:25:43,279
zoom

00:25:40,880 --> 00:25:44,400
use google me all right uh yvonne i wish

00:25:43,279 --> 00:25:47,120
you could hear us because we wanted you

00:25:44,400 --> 00:25:47,120
to answer a question

00:25:48,480 --> 00:25:51,919
oh yeah maybe someone will we'll just

00:25:50,080 --> 00:25:54,640
type to her and ask her to rejoin

00:25:51,919 --> 00:25:55,679
um holy crap it's like super super

00:25:54,640 --> 00:25:58,880
delayed

00:25:55,679 --> 00:26:02,480
yeah sorry buddy it's delayed um

00:25:58,880 --> 00:26:05,679
stephen jp yvonne do you guys have

00:26:02,480 --> 00:26:05,679
anything else you want to say

00:26:05,919 --> 00:26:10,799
stay safe stay healthy stay now

00:26:12,640 --> 00:26:19,520
can you hear me now yes

00:26:17,840 --> 00:26:21,279
i don't know what happened but i'm back

00:26:19,520 --> 00:26:23,120
what was the question um

00:26:21,279 --> 00:26:25,039
we want to know what we want you to

00:26:23,120 --> 00:26:26,640
answer what features will be

00:26:25,039 --> 00:26:28,480
in angular 10 and they can be any

00:26:26,640 --> 00:26:32,159
feature you want

00:26:28,480 --> 00:26:33,679
oh wow okay here's what the one that i

00:26:32,159 --> 00:26:36,000
want where like

00:26:33,679 --> 00:26:37,200
you have pre-loaded templates where like

00:26:36,000 --> 00:26:40,080
if you're doing a dash

00:26:37,200 --> 00:26:41,520
not a dashboard but like um e-commerce

00:26:40,080 --> 00:26:43,360
app or something like that you just like

00:26:41,520 --> 00:26:46,880
type in e-commerce into your

00:26:43,360 --> 00:26:47,279
angular's um cli and like all the stuff

00:26:46,880 --> 00:26:50,320
for

00:26:47,279 --> 00:26:51,679
like e-commerce pop-up um i don't have

00:26:50,320 --> 00:26:53,919
to like do any actual work

00:26:51,679 --> 00:26:55,039
and create my own data structure i'm

00:26:53,919 --> 00:26:56,720
saying on my own uh

00:26:55,039 --> 00:26:58,880
structure of an application just there

00:26:56,720 --> 00:27:02,240
for common things like e-commerce or

00:26:58,880 --> 00:27:03,520
yeah um stuff like that yeah

00:27:02,240 --> 00:27:04,799
all right i'm excited to see that and

00:27:03,520 --> 00:27:06,559
then you're nice even something

00:27:04,799 --> 00:27:08,880
community can help us with so yeah

00:27:06,559 --> 00:27:10,480
angular 10 just volunteered hey good

00:27:08,880 --> 00:27:11,760
luck on that one steve and that's a cool

00:27:10,480 --> 00:27:13,679
feature we're all excited

00:27:11,760 --> 00:27:15,039
you're cutting the rc any day so this is

00:27:13,679 --> 00:27:18,399
exciting

00:27:15,039 --> 00:27:20,640
right yes

00:27:18,399 --> 00:27:22,240
we're like developers naturally like we

00:27:20,640 --> 00:27:23,760
just want to do like the nissan amount

00:27:22,240 --> 00:27:24,799
of work so like if you have like free

00:27:23,760 --> 00:27:28,000
templates

00:27:24,799 --> 00:27:29,200
why not right all right okay and

00:27:28,000 --> 00:27:31,440
and you're volunteering for that right

00:27:29,200 --> 00:27:34,320
yvonne yeah she's volunteering

00:27:31,440 --> 00:27:36,000
all right okay all right everybody put

00:27:34,320 --> 00:27:37,360
your hands together for our panel

00:27:36,000 --> 00:27:39,840
thank you for coming thanks for your

00:27:37,360 --> 00:27:41,520
talks thanks for staying so dedicated in

00:27:39,840 --> 00:27:49,040
these stressful times we appreciate you

00:27:41,520 --> 00:27:51,530
thank you

00:27:49,040 --> 00:27:56,150
[Music]

00:27:51,530 --> 00:27:56,150
[Applause]

00:27:56,960 --> 00:27:59,039

YouTube URL: https://www.youtube.com/watch?v=kAX5LaulE_w


