Title: Http Interceptors: The Room Where It Happens | Ward Bell | ng-conf: Hardwired
Publication date: 2020-07-15
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Between an HTTP request and response lies a realm of decision and transformation under your command with HttpInterceptors. Add authentication headers, filter content, retry failed requests, react to errors, log traffic, control busy indicators, and just make stuff up. Interceptors are easy to write and test. They’re a good reason to polish your RxJS skills. After 20 minutes with me you’ll be in the room where it happens, just like Alexander Hamilton and Thomas Jefferson.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,160
[Applause]

00:00:05,920 --> 00:00:18,640
[Music]

00:00:16,160 --> 00:00:22,000
uh because i'm talking about http

00:00:18,640 --> 00:00:24,240
interceptors and um

00:00:22,000 --> 00:00:26,640
the theme uh we're still with musicals

00:00:24,240 --> 00:00:28,560
is uh the great one hamilton

00:00:26,640 --> 00:00:29,760
uh there's gonna be a little pop quiz at

00:00:28,560 --> 00:00:31,679
the end of my talk

00:00:29,760 --> 00:00:33,520
what don't look in your wallets don't go

00:00:31,679 --> 00:00:36,079
on the net what uh

00:00:33,520 --> 00:00:38,640
what bill is alexander hamilton on just

00:00:36,079 --> 00:00:41,760
keep that in the back of your mind

00:00:38,640 --> 00:00:44,879
so uh back in 1790 uh

00:00:41,760 --> 00:00:47,120
alexander hamilton got his bank

00:00:44,879 --> 00:00:49,039
and the cost of moving the capital to

00:00:47,120 --> 00:00:52,000
some swamp near virginia

00:00:49,039 --> 00:00:52,399
and uh no one knows how that happened

00:00:52,000 --> 00:00:56,079
it's

00:00:52,399 --> 00:00:59,199
uh the room where it happened um so

00:00:56,079 --> 00:01:02,160
uh there's an analogy here somewhere

00:00:59,199 --> 00:01:04,080
uh if you're using http client and

00:01:02,160 --> 00:01:06,960
you're the requester you send requests

00:01:04,080 --> 00:01:08,880
to the server and you get responses back

00:01:06,960 --> 00:01:11,520
but you don't know what happened it's

00:01:08,880 --> 00:01:13,280
all behind the scenes

00:01:11,520 --> 00:01:15,200
now if you're like me you'd probably

00:01:13,280 --> 00:01:16,720
like to inspect that request or maybe

00:01:15,200 --> 00:01:17,840
you would want to modify it in some way

00:01:16,720 --> 00:01:18,960
add some headers

00:01:17,840 --> 00:01:20,960
maybe you don't want to issue that

00:01:18,960 --> 00:01:22,880
request at all

00:01:20,960 --> 00:01:25,840
maybe you want to look at that response

00:01:22,880 --> 00:01:27,600
and interpret it before it goes back

00:01:25,840 --> 00:01:29,200
perhaps you want to modify a little bit

00:01:27,600 --> 00:01:30,079
tweak it a little bit before you send it

00:01:29,200 --> 00:01:32,960
back to

00:01:30,079 --> 00:01:34,640
to the caller and in some cases you'll

00:01:32,960 --> 00:01:36,640
simply want to replace the response

00:01:34,640 --> 00:01:40,079
altogether

00:01:36,640 --> 00:01:43,119
and for that you want http interceptors

00:01:40,079 --> 00:01:44,799
hard to say but easy to use okay let's

00:01:43,119 --> 00:01:46,159
jump right into one

00:01:44,799 --> 00:01:48,799
see the structure of it we're going to

00:01:46,159 --> 00:01:52,960
write a logging interceptor

00:01:48,799 --> 00:01:55,360
uh and it's a class hey that's great it

00:01:52,960 --> 00:01:56,960
implements an angular interface all of

00:01:55,360 --> 00:01:59,119
the interfaces that you'll need are in

00:01:56,960 --> 00:02:01,360
the http client

00:01:59,119 --> 00:02:01,360
uh

00:02:02,240 --> 00:02:09,440
library they're at angular common http

00:02:06,840 --> 00:02:12,560
and uh oh yes

00:02:09,440 --> 00:02:15,200
um so the interface only has one method

00:02:12,560 --> 00:02:17,120
uh and it's called intercept and it

00:02:15,200 --> 00:02:19,040
takes a request and this funny thing

00:02:17,120 --> 00:02:22,080
called an http handler

00:02:19,040 --> 00:02:24,480
and it's gonna return an observable

00:02:22,080 --> 00:02:26,000
let's take a look at that there's the

00:02:24,480 --> 00:02:29,840
request

00:02:26,000 --> 00:02:32,879
then you do your thing with that request

00:02:29,840 --> 00:02:34,720
then you take the request and you handle

00:02:32,879 --> 00:02:37,280
it you pass it to the handle method

00:02:34,720 --> 00:02:37,920
next and you return that and that is in

00:02:37,280 --> 00:02:41,200
fact

00:02:37,920 --> 00:02:43,760
an observable of http response

00:02:41,200 --> 00:02:44,400
i know it says http event but 90 of the

00:02:43,760 --> 00:02:47,519
time

00:02:44,400 --> 00:02:49,760
it's a response

00:02:47,519 --> 00:02:51,840
all right so that was the going out part

00:02:49,760 --> 00:02:53,120
you you you can see that we logged it we

00:02:51,840 --> 00:02:55,040
could have done that's the thing we

00:02:53,120 --> 00:02:59,120
wanted to do with the request

00:02:55,040 --> 00:03:02,080
um now uh that we've done that

00:02:59,120 --> 00:03:04,000
we're going to do something and the next

00:03:02,080 --> 00:03:05,360
handle returned an observable

00:03:04,000 --> 00:03:07,040
and so you do need to know a little bit

00:03:05,360 --> 00:03:08,159
about observables you know need to know

00:03:07,040 --> 00:03:10,720
enough that you're going to pipe

00:03:08,159 --> 00:03:14,239
something onto the end of it before it

00:03:10,720 --> 00:03:15,760
wanders on its way and you you use your

00:03:14,239 --> 00:03:16,959
operators they go there

00:03:15,760 --> 00:03:19,599
and in this case what we're going to do

00:03:16,959 --> 00:03:21,760
is tap into the response

00:03:19,599 --> 00:03:23,280
and log it because we're interested in a

00:03:21,760 --> 00:03:25,040
side effect we're going to just log it

00:03:23,280 --> 00:03:26,799
somewhere

00:03:25,040 --> 00:03:28,319
now you might also be interested in

00:03:26,799 --> 00:03:29,599
logging errors too because things don't

00:03:28,319 --> 00:03:33,280
always go right so

00:03:29,599 --> 00:03:34,000
tap has two arguments and the second one

00:03:33,280 --> 00:03:36,319
can log an

00:03:34,000 --> 00:03:36,319
error

00:03:37,280 --> 00:03:41,760
now interceptors are not just classes

00:03:40,959 --> 00:03:44,879
they're

00:03:41,760 --> 00:03:47,200
injected services so

00:03:44,879 --> 00:03:48,159
that means uh well you got to go provide

00:03:47,200 --> 00:03:49,920
it you can't

00:03:48,159 --> 00:03:51,680
you can't just throw an ad injector on

00:03:49,920 --> 00:03:53,200
it as you'll see for a minute so

00:03:51,680 --> 00:03:55,680
you got to provide it and you got to

00:03:53,200 --> 00:03:56,239
provide it in a very specific place you

00:03:55,680 --> 00:04:00,480
got to

00:03:56,239 --> 00:04:03,599
provide it at the same injector level

00:04:00,480 --> 00:04:04,640
where you uh import the http client

00:04:03,599 --> 00:04:08,239
module and

00:04:04,640 --> 00:04:11,760
for me and many people that's app module

00:04:08,239 --> 00:04:11,760
and you just throw it in there

00:04:12,959 --> 00:04:18,239
you just throw it in there uh

00:04:16,000 --> 00:04:20,880
and thank you siri for enjoying uh the

00:04:18,239 --> 00:04:24,400
show as well she just interrupted me

00:04:20,880 --> 00:04:25,759
um so uh with this you're using a

00:04:24,400 --> 00:04:28,800
different kind of providing you're using

00:04:25,759 --> 00:04:30,880
an injector symbol uh

00:04:28,800 --> 00:04:32,560
and there's this funny thing that

00:04:30,880 --> 00:04:33,840
multi-truth and that's because you're

00:04:32,560 --> 00:04:35,840
not going to have one injector

00:04:33,840 --> 00:04:37,600
you're going to have a lot of them and

00:04:35,840 --> 00:04:40,840
so we're not just providing a single

00:04:37,600 --> 00:04:42,479
service we're providing an array of

00:04:40,840 --> 00:04:44,960
services

00:04:42,479 --> 00:04:45,840
so let's uh let's go do another one and

00:04:44,960 --> 00:04:48,400
and note that

00:04:45,840 --> 00:04:49,199
um like any service which an interceptor

00:04:48,400 --> 00:04:50,960
is it can

00:04:49,199 --> 00:04:53,120
take injected dependencies that you can

00:04:50,960 --> 00:04:55,919
use in your interception

00:04:53,120 --> 00:04:58,400
so uh i don't about you but sometimes

00:04:55,919 --> 00:05:01,440
things take a long time to load

00:04:58,400 --> 00:05:04,160
and you need a spinner uh some kind of

00:05:01,440 --> 00:05:07,440
indicator that you're busy

00:05:04,160 --> 00:05:10,560
so uh you know

00:05:07,440 --> 00:05:12,400
it sounds simple but

00:05:10,560 --> 00:05:14,240
we realize that we've got all these

00:05:12,400 --> 00:05:16,000
requests throughout our application

00:05:14,240 --> 00:05:18,080
they're flying in from everywhere

00:05:16,000 --> 00:05:19,919
and you don't want to hook each one of

00:05:18,080 --> 00:05:22,880
them up to a busy indicator you'd like

00:05:19,919 --> 00:05:24,639
to have a centralized place to do it

00:05:22,880 --> 00:05:26,320
and when you do that you can realize

00:05:24,639 --> 00:05:28,800
that you can have many requests that get

00:05:26,320 --> 00:05:31,680
launched all at once or in sequence

00:05:28,800 --> 00:05:33,600
and uh so you can't just turn it on you

00:05:31,680 --> 00:05:36,080
have to keep track of what you're doing

00:05:33,600 --> 00:05:36,880
and uh count them up and then uh when

00:05:36,080 --> 00:05:38,960
you're done

00:05:36,880 --> 00:05:40,160
you can let them all go so you got to

00:05:38,960 --> 00:05:41,440
show that busy on the first

00:05:40,160 --> 00:05:43,440
request and then you got to hide the

00:05:41,440 --> 00:05:45,840
busy after the last response and in

00:05:43,440 --> 00:05:47,680
between you just got to keep it up there

00:05:45,840 --> 00:05:49,199
so that's what we're going to do and

00:05:47,680 --> 00:05:50,080
you'd start with a busy component you

00:05:49,199 --> 00:05:52,240
can imagine the

00:05:50,080 --> 00:05:54,400
the how it would display and it's going

00:05:52,240 --> 00:05:57,039
to use an observable that i created in

00:05:54,400 --> 00:05:59,360
my busy surface called busy state

00:05:57,039 --> 00:06:00,479
and we got to inject it and when busy

00:05:59,360 --> 00:06:02,880
stage is true

00:06:00,479 --> 00:06:04,160
the loading spin error shows up and then

00:06:02,880 --> 00:06:06,960
when it goes false

00:06:04,160 --> 00:06:07,759
it disappears all right on to the

00:06:06,960 --> 00:06:10,319
interceptor

00:06:07,759 --> 00:06:12,000
starts as a class implementing hdp

00:06:10,319 --> 00:06:14,800
interceptors

00:06:12,000 --> 00:06:15,600
and uh now you know just like anyone you

00:06:14,800 --> 00:06:17,440
you

00:06:15,600 --> 00:06:18,880
put the service you want to inject right

00:06:17,440 --> 00:06:20,080
there in the constructor and it gets

00:06:18,880 --> 00:06:21,919
injected

00:06:20,080 --> 00:06:23,280
uh well by the way there's no provided

00:06:21,919 --> 00:06:26,400
in all right remember

00:06:23,280 --> 00:06:29,360
we can't do that provided in root thing

00:06:26,400 --> 00:06:29,840
and um here is the intercept method

00:06:29,360 --> 00:06:31,520
which

00:06:29,840 --> 00:06:33,840
is you know the shell of it they all

00:06:31,520 --> 00:06:36,400
have this form

00:06:33,840 --> 00:06:37,039
let's uh figure out what message we want

00:06:36,400 --> 00:06:38,960
to show if

00:06:37,039 --> 00:06:40,240
if the request is a get we'll show

00:06:38,960 --> 00:06:41,919
loading if it's something else we'll

00:06:40,240 --> 00:06:44,560
just assume it's saving

00:06:41,919 --> 00:06:46,400
and now we're on the request side now we

00:06:44,560 --> 00:06:50,000
just call the busy service increment

00:06:46,400 --> 00:06:52,080
and bang the spinner will come up um

00:06:50,000 --> 00:06:54,479
now we gotta sort of take the spinner

00:06:52,080 --> 00:06:58,080
down when the last one comes through

00:06:54,479 --> 00:07:00,240
so we're gonna do that in here somewhere

00:06:58,080 --> 00:07:02,160
inside the pipe remember that's how you

00:07:00,240 --> 00:07:04,400
manipulate a response

00:07:02,160 --> 00:07:06,080
um but what one do we what operator do

00:07:04,400 --> 00:07:07,759
we choose

00:07:06,080 --> 00:07:10,000
the one we want is finalized and the

00:07:07,759 --> 00:07:10,479
reason we want finalize and not tap this

00:07:10,000 --> 00:07:13,280
time

00:07:10,479 --> 00:07:14,639
is because uh we want to be able to

00:07:13,280 --> 00:07:16,000
decrement that we want to shut that

00:07:14,639 --> 00:07:18,800
spinner down

00:07:16,000 --> 00:07:20,000
for whatever terminates the response so

00:07:18,800 --> 00:07:22,400
that could be

00:07:20,000 --> 00:07:23,360
you know the uh response happened it

00:07:22,400 --> 00:07:25,440
could be that there was an

00:07:23,360 --> 00:07:27,199
error it could be that somebody just

00:07:25,440 --> 00:07:30,639
unsubscribed without there being an

00:07:27,199 --> 00:07:31,840
error or um a a result and in all those

00:07:30,639 --> 00:07:36,319
cases you want to do it

00:07:31,840 --> 00:07:37,759
and finalize is your operator

00:07:36,319 --> 00:07:40,080
of course you got to remember to provide

00:07:37,759 --> 00:07:41,680
it so we go back to at module

00:07:40,080 --> 00:07:43,680
and we find a place to put it and i

00:07:41,680 --> 00:07:44,080
guess we've decided that it should go

00:07:43,680 --> 00:07:48,000
after

00:07:44,080 --> 00:07:48,000
logging http interceptor

00:07:48,319 --> 00:07:52,560
so now that we got two that raises an

00:07:50,800 --> 00:07:54,560
interesting question what's actually

00:07:52,560 --> 00:07:57,039
going on with all these interceptors

00:07:54,560 --> 00:07:58,000
what's going on so we said we have a

00:07:57,039 --> 00:08:01,199
requester at the top

00:07:58,000 --> 00:08:03,840
here we have a server at the bottom

00:08:01,199 --> 00:08:04,479
and uh well you know in this diagram

00:08:03,840 --> 00:08:06,879
we've got

00:08:04,479 --> 00:08:09,039
three interceptors so what's going on

00:08:06,879 --> 00:08:11,280
well the request comes in

00:08:09,039 --> 00:08:12,960
it goes into that you do whatever you do

00:08:11,280 --> 00:08:14,560
to it goes into the handle it goes on to

00:08:12,960 --> 00:08:16,160
the next interceptor

00:08:14,560 --> 00:08:17,759
goes in does whatever you do to it goes

00:08:16,160 --> 00:08:19,039
on to the next interceptor

00:08:17,759 --> 00:08:20,560
whatever you did to it goes to the

00:08:19,039 --> 00:08:22,000
handle goes on to the next and

00:08:20,560 --> 00:08:25,440
eventually

00:08:22,000 --> 00:08:27,840
it ends up at the server and then the

00:08:25,440 --> 00:08:29,360
server does whatever it wants to do and

00:08:27,840 --> 00:08:31,360
it sends it back to the first

00:08:29,360 --> 00:08:32,080
interceptor which is coming right out

00:08:31,360 --> 00:08:34,479
through

00:08:32,080 --> 00:08:36,479
uh the one that's closest to the server

00:08:34,479 --> 00:08:38,479
and it goes through whatever piping you

00:08:36,479 --> 00:08:39,680
had in mind there

00:08:38,479 --> 00:08:42,000
because it's an observable and you're

00:08:39,680 --> 00:08:42,640
just extending it and that pops out and

00:08:42,000 --> 00:08:44,560
that goes

00:08:42,640 --> 00:08:46,560
pops back up to the next interceptor

00:08:44,560 --> 00:08:48,959
which pops to the next interceptor

00:08:46,560 --> 00:08:49,760
and eventually your observable ends up

00:08:48,959 --> 00:08:52,720
back there

00:08:49,760 --> 00:08:52,720
at the requester

00:08:53,040 --> 00:08:57,279
this is sometimes known as the russian

00:08:55,440 --> 00:08:59,519
doll pattern because

00:08:57,279 --> 00:09:01,600
um each of the interceptors handles both

00:08:59,519 --> 00:09:03,760
the request stream going down

00:09:01,600 --> 00:09:05,279
and the response team coming back up so

00:09:03,760 --> 00:09:07,440
it's like stacked

00:09:05,279 --> 00:09:09,200
dolls right one into the other and all

00:09:07,440 --> 00:09:10,800
the requests flow down one way

00:09:09,200 --> 00:09:13,519
and then all the responses bubble back

00:09:10,800 --> 00:09:16,399
up the other way

00:09:13,519 --> 00:09:17,279
let's give ourselves another interceptor

00:09:16,399 --> 00:09:18,720
here

00:09:17,279 --> 00:09:20,640
this is one i actually use called the

00:09:18,720 --> 00:09:22,480
read-only interceptor

00:09:20,640 --> 00:09:24,080
and it's going to be an example of how

00:09:22,480 --> 00:09:26,399
we interrupt that flow that we just

00:09:24,080 --> 00:09:28,880
showed

00:09:26,399 --> 00:09:30,880
so the problem is this my app goes into

00:09:28,880 --> 00:09:31,440
read only mode from time to time for

00:09:30,880 --> 00:09:34,880
reasons

00:09:31,440 --> 00:09:36,160
i don't need to explain and while i'm

00:09:34,880 --> 00:09:37,920
doing that if i really want to have a

00:09:36,160 --> 00:09:39,680
read-only moment i you know i should go

00:09:37,920 --> 00:09:40,480
in there and disable the input controls

00:09:39,680 --> 00:09:43,440
but

00:09:40,480 --> 00:09:44,480
what if i miss one and i have i need

00:09:43,440 --> 00:09:46,959
some kind of backup

00:09:44,480 --> 00:09:48,000
i don't want a save request going to the

00:09:46,959 --> 00:09:49,839
server

00:09:48,000 --> 00:09:51,680
so i'm going to block the put posts and

00:09:49,839 --> 00:09:53,600
deletes uh

00:09:51,680 --> 00:09:54,959
although there's some posts because

00:09:53,600 --> 00:09:57,360
they've got these antique

00:09:54,959 --> 00:09:59,200
servers that are actually gets so you

00:09:57,360 --> 00:10:00,160
got to let those through so you filter

00:09:59,200 --> 00:10:01,760
those

00:10:00,160 --> 00:10:03,200
and there are other kinds of posts that

00:10:01,760 --> 00:10:05,519
i don't really

00:10:03,200 --> 00:10:07,360
have to stop maybe they're analytic

00:10:05,519 --> 00:10:08,000
posts so i have to filter them a little

00:10:07,360 --> 00:10:11,600
bit

00:10:08,000 --> 00:10:13,839
but basically you get the idea

00:10:11,600 --> 00:10:14,800
so let's write it again starts with a

00:10:13,839 --> 00:10:16,800
class

00:10:14,800 --> 00:10:18,640
and where this time we're injecting a

00:10:16,800 --> 00:10:20,079
session service so we can

00:10:18,640 --> 00:10:21,360
know a little bit about the read-only

00:10:20,079 --> 00:10:23,519
state and we're going to have a logger

00:10:21,360 --> 00:10:26,560
we probably should have had a logger

00:10:23,519 --> 00:10:27,200
in our logging interceptor here's the

00:10:26,560 --> 00:10:29,680
shell

00:10:27,200 --> 00:10:30,320
of our intercept method again request

00:10:29,680 --> 00:10:33,200
next

00:10:30,320 --> 00:10:34,959
output's an observable and i'm going to

00:10:33,200 --> 00:10:38,320
pick up the read-only state from

00:10:34,959 --> 00:10:40,240
the session service and now if

00:10:38,320 --> 00:10:42,640
it's not read-only or if it's one of

00:10:40,240 --> 00:10:46,800
those things that i said is okay to be

00:10:42,640 --> 00:10:48,480
uh sent even if it's a

00:10:46,800 --> 00:10:50,079
post or a put or something like that

00:10:48,480 --> 00:10:52,279
well you know i'm just going to handle

00:10:50,079 --> 00:10:54,480
it in the usual way

00:10:52,279 --> 00:10:55,440
otherwise if it is read only and i'm

00:10:54,480 --> 00:10:57,040
supposed to stop it

00:10:55,440 --> 00:10:58,959
of course i'm going to compose an error

00:10:57,040 --> 00:11:00,720
and i'm going to log it out

00:10:58,959 --> 00:11:02,480
but now i got to do something a little

00:11:00,720 --> 00:11:04,480
different

00:11:02,480 --> 00:11:06,880
i'm going to i'm not going to throw an

00:11:04,480 --> 00:11:10,000
error i'm going to return

00:11:06,880 --> 00:11:11,920
an error observable

00:11:10,000 --> 00:11:14,320
and one of the key things to notice here

00:11:11,920 --> 00:11:15,040
is i am not calling next handle that's

00:11:14,320 --> 00:11:18,079
right

00:11:15,040 --> 00:11:21,360
i am not going to hand this down the

00:11:18,079 --> 00:11:23,360
down to the next doll in the stack dolls

00:11:21,360 --> 00:11:25,120
so let's see what that looks like all

00:11:23,360 --> 00:11:26,720
right we have our three now we really do

00:11:25,120 --> 00:11:28,480
have three interceptors

00:11:26,720 --> 00:11:30,079
uh and they're logging read-only and

00:11:28,480 --> 00:11:31,519
busy interceptor because that's the way

00:11:30,079 --> 00:11:33,200
i'm going to set them up right so the

00:11:31,519 --> 00:11:34,720
first one goes to logging and it gets

00:11:33,200 --> 00:11:36,560
logged the next one goes to the

00:11:34,720 --> 00:11:39,519
read-only interceptor

00:11:36,560 --> 00:11:41,440
oh but it happens to be a post right you

00:11:39,519 --> 00:11:43,519
can see it's a post at the top

00:11:41,440 --> 00:11:45,600
so that gets intercepted and is an error

00:11:43,519 --> 00:11:47,519
response that flows up

00:11:45,600 --> 00:11:49,360
now flows back to the requester the busy

00:11:47,519 --> 00:11:51,680
interceptor never saw it the server

00:11:49,360 --> 00:11:53,760
never saw

00:11:51,680 --> 00:11:54,880
now we love being able to do that kind

00:11:53,760 --> 00:11:56,880
of thing

00:11:54,880 --> 00:11:58,160
and in order to get it to work just like

00:11:56,880 --> 00:12:01,680
that it's it's really in

00:11:58,160 --> 00:12:03,600
all and how you provide it so we

00:12:01,680 --> 00:12:06,399
we already had uh the logging

00:12:03,600 --> 00:12:08,560
interceptor and the busy interceptor

00:12:06,399 --> 00:12:09,920
and we know we want to log it but we

00:12:08,560 --> 00:12:11,200
don't want to get to the busy so what

00:12:09,920 --> 00:12:13,279
are we going to do

00:12:11,200 --> 00:12:14,639
well the order in the array matters so

00:12:13,279 --> 00:12:17,839
we got to move that one

00:12:14,639 --> 00:12:20,320
up and stick our read-only interceptor

00:12:17,839 --> 00:12:20,959
in there so the order in which you

00:12:20,320 --> 00:12:24,000
provide

00:12:20,959 --> 00:12:25,680
matters and because that matters

00:12:24,000 --> 00:12:27,360
by the way we're always going to want to

00:12:25,680 --> 00:12:28,800
have busy last because there's no reason

00:12:27,360 --> 00:12:29,440
to throw a spinner unless you're

00:12:28,800 --> 00:12:32,800
actually

00:12:29,440 --> 00:12:36,560
actually actually going to the server

00:12:32,800 --> 00:12:39,279
so uh the best way is not to

00:12:36,560 --> 00:12:40,560
dump them into app module or i don't

00:12:39,279 --> 00:12:42,240
sprinkle them around in a bunch of

00:12:40,560 --> 00:12:44,800
modules the best is to sort of pull it

00:12:42,240 --> 00:12:48,079
together so you can control the order

00:12:44,800 --> 00:12:48,639
and i do that in a barrel and so i

00:12:48,079 --> 00:12:51,760
create an

00:12:48,639 --> 00:12:54,240
array a provider array of

00:12:51,760 --> 00:12:55,920
providers that's what i call it and

00:12:54,240 --> 00:12:57,360
that's where i have the exact same thing

00:12:55,920 --> 00:12:59,279
i would have done in the module but i

00:12:57,360 --> 00:13:01,200
ordered them here exactly the way i want

00:12:59,279 --> 00:13:03,920
them and then

00:13:01,200 --> 00:13:05,040
i go back to my app model module i'm

00:13:03,920 --> 00:13:07,120
refactoring here

00:13:05,040 --> 00:13:09,200
and i pull out all those guys and i put

00:13:07,120 --> 00:13:11,360
in my http interceptor providers

00:13:09,200 --> 00:13:13,279
and now as i evolve my interceptors i'm

00:13:11,360 --> 00:13:14,959
not revisiting that module

00:13:13,279 --> 00:13:17,360
which is a good thing that's another

00:13:14,959 --> 00:13:20,399
good thing

00:13:17,360 --> 00:13:23,040
let's add a fourth one because uh our

00:13:20,399 --> 00:13:24,160
we're interested in well generally in uh

00:13:23,040 --> 00:13:27,920
authenticating

00:13:24,160 --> 00:13:30,320
uh but also our lesson here is about

00:13:27,920 --> 00:13:31,600
how to manipulate the request and the

00:13:30,320 --> 00:13:33,120
response

00:13:31,600 --> 00:13:33,839
so it has the same structure with you

00:13:33,120 --> 00:13:35,279
know we're going to have an

00:13:33,839 --> 00:13:36,399
authentication service and we're going

00:13:35,279 --> 00:13:39,279
to use the router

00:13:36,399 --> 00:13:40,320
so we inject those and now we're ready

00:13:39,279 --> 00:13:44,240
to start our

00:13:40,320 --> 00:13:45,600
intercept method that's our shell

00:13:44,240 --> 00:13:47,600
so from the off surface we want to get

00:13:45,600 --> 00:13:48,800
our access token and we want to prepare

00:13:47,600 --> 00:13:51,600
our headers here

00:13:48,800 --> 00:13:53,279
so we we set up some nice headers and we

00:13:51,600 --> 00:13:56,320
just assign those to the request

00:13:53,279 --> 00:13:59,120
right and no

00:13:56,320 --> 00:14:01,040
uh the request object is immutable

00:13:59,120 --> 00:14:03,839
you're not allowed to change it

00:14:01,040 --> 00:14:05,040
but it does come with a clone method and

00:14:03,839 --> 00:14:07,519
so the clone will make a

00:14:05,040 --> 00:14:08,160
shallow copy of it and it also takes an

00:14:07,519 --> 00:14:11,440
optional

00:14:08,160 --> 00:14:12,959
um argument where you can tell it what

00:14:11,440 --> 00:14:15,360
it how it should update the

00:14:12,959 --> 00:14:17,120
request and so that's where we're going

00:14:15,360 --> 00:14:18,560
to set the headers that we created there

00:14:17,120 --> 00:14:20,320
and also because

00:14:18,560 --> 00:14:21,760
we're talking coors here we want cookies

00:14:20,320 --> 00:14:23,600
to flow back and forth we can set some

00:14:21,760 --> 00:14:27,199
other things at the same time like

00:14:23,600 --> 00:14:29,120
with credentials and now

00:14:27,199 --> 00:14:31,600
we're ready to return the handle but

00:14:29,120 --> 00:14:34,240
notice uh what i'm doing here

00:14:31,600 --> 00:14:34,800
because i may want to handle errors but

00:14:34,240 --> 00:14:36,079
i

00:14:34,800 --> 00:14:38,240
don't have to jam it all into the

00:14:36,079 --> 00:14:39,440
intercept method i can delegate that to

00:14:38,240 --> 00:14:41,199
another method not only

00:14:39,440 --> 00:14:42,720
is it another method it's actually not

00:14:41,199 --> 00:14:45,120
another method it's an

00:14:42,720 --> 00:14:46,360
operator yes friends we're going to

00:14:45,120 --> 00:14:50,079
create our own

00:14:46,360 --> 00:14:53,360
rxjs operator

00:14:50,079 --> 00:14:54,399
is that hard to do no it's not hard at

00:14:53,360 --> 00:14:56,720
all

00:14:54,399 --> 00:14:58,160
an operator is simply a function that

00:14:56,720 --> 00:15:00,079
takes an observable in

00:14:58,160 --> 00:15:01,680
and puts an observable out and in our

00:15:00,079 --> 00:15:02,720
case for these things we're going to

00:15:01,680 --> 00:15:04,959
take that

00:15:02,720 --> 00:15:06,639
that observable of the response in and

00:15:04,959 --> 00:15:09,680
put one out

00:15:06,639 --> 00:15:11,440
all right well how hard is that to do

00:15:09,680 --> 00:15:13,360
it's really not hard at all you just

00:15:11,440 --> 00:15:14,880
take that source and you pipe onto it

00:15:13,360 --> 00:15:16,959
and then you go back to your

00:15:14,880 --> 00:15:18,240
you know whatever your level of rxjs

00:15:16,959 --> 00:15:21,440
skills are

00:15:18,240 --> 00:15:22,959
and start working that source so in our

00:15:21,440 --> 00:15:25,120
case we're going to catch

00:15:22,959 --> 00:15:26,000
the error all right that's the only

00:15:25,120 --> 00:15:27,760
thing we're going to do if it's good

00:15:26,000 --> 00:15:30,560
it's just going to fly right out of here

00:15:27,760 --> 00:15:31,519
it's going to be a pass-through operator

00:15:30,560 --> 00:15:33,360
and then we

00:15:31,519 --> 00:15:34,959
we do whatever we're going to do so

00:15:33,360 --> 00:15:37,120
inside the catch error

00:15:34,959 --> 00:15:38,720
if it's a 401 which means you're not

00:15:37,120 --> 00:15:41,040
authenticated there's some kind of

00:15:38,720 --> 00:15:42,959
you're unauthorized in some sense

00:15:41,040 --> 00:15:45,360
then i'm going to pass that on to

00:15:42,959 --> 00:15:47,040
something that does something about that

00:15:45,360 --> 00:15:49,040
and otherwise i'm going to use that

00:15:47,040 --> 00:15:50,880
thing we used last time the throw error

00:15:49,040 --> 00:15:52,000
i'm just going to return an error object

00:15:50,880 --> 00:15:55,040
and that will pass

00:15:52,000 --> 00:15:58,959
back up through the operator

00:15:55,040 --> 00:16:01,360
the interceptor dolls that we've created

00:15:58,959 --> 00:16:04,240
what might that error handler for the

00:16:01,360 --> 00:16:07,279
401 look like

00:16:04,240 --> 00:16:08,079
well uh i'm going to go dig into the

00:16:07,279 --> 00:16:12,399
headers from the

00:16:08,079 --> 00:16:15,040
response and if the token has expired

00:16:12,399 --> 00:16:15,680
i'll do one thing if it's any other

00:16:15,040 --> 00:16:18,000
cause

00:16:15,680 --> 00:16:19,920
i'm gonna do something else well if it's

00:16:18,000 --> 00:16:21,600
expired there's not much i can do so

00:16:19,920 --> 00:16:22,959
i've got that off service hanging around

00:16:21,600 --> 00:16:24,800
and i can just sign in again and when

00:16:22,959 --> 00:16:28,480
you sign in

00:16:24,800 --> 00:16:30,560
you know it uses some off out of the app

00:16:28,480 --> 00:16:32,160
sign-in mechanism we don't sign in

00:16:30,560 --> 00:16:34,800
within the app we delegate that out

00:16:32,160 --> 00:16:37,920
maybe the identity server or something

00:16:34,800 --> 00:16:39,720
and so uh it's going to leave the app

00:16:37,920 --> 00:16:42,240
but if for any other reason it's

00:16:39,720 --> 00:16:43,440
unauthorized i i got a problem and i've

00:16:42,240 --> 00:16:44,720
got to figure out what i'm going to do

00:16:43,440 --> 00:16:46,160
about it

00:16:44,720 --> 00:16:48,320
and you know what i'm going to do i'm

00:16:46,160 --> 00:16:51,519
going to navigate away that's right

00:16:48,320 --> 00:16:51,920
you can from inside an interceptor you

00:16:51,519 --> 00:16:54,800
can

00:16:51,920 --> 00:16:57,279
navigate and go to some safe place like

00:16:54,800 --> 00:16:58,639
wherever you're supposed to go whether

00:16:57,279 --> 00:17:00,320
there's some kind of authorization

00:16:58,639 --> 00:17:02,639
failure

00:17:00,320 --> 00:17:04,160
now you still have an obligation notice

00:17:02,639 --> 00:17:05,839
we hadn't returned

00:17:04,160 --> 00:17:07,760
anything at this point still have an

00:17:05,839 --> 00:17:10,799
obligation to return

00:17:07,760 --> 00:17:13,679
something and

00:17:10,799 --> 00:17:15,439
we know we've handled the error and we

00:17:13,679 --> 00:17:17,439
know that whoever is listening for this

00:17:15,439 --> 00:17:19,199
shouldn't do anything with the result

00:17:17,439 --> 00:17:21,039
but they shouldn't fail either

00:17:19,199 --> 00:17:22,319
so we're going to return empty which

00:17:21,039 --> 00:17:24,799
simply

00:17:22,319 --> 00:17:26,880
um the empty observable just completes

00:17:24,799 --> 00:17:27,600
and that will unsubscribe or do whatever

00:17:26,880 --> 00:17:29,039
it is that

00:17:27,600 --> 00:17:30,240
has to be done downstream but it won't

00:17:29,039 --> 00:17:33,200
send them an error and won't send them a

00:17:30,240 --> 00:17:36,559
result so they'll just be able to keep

00:17:33,200 --> 00:17:37,679
moving and then of course we've got to

00:17:36,559 --> 00:17:40,080
provide it

00:17:37,679 --> 00:17:42,400
but but where does it go where should i

00:17:40,080 --> 00:17:42,400
put it

00:17:44,640 --> 00:17:47,760
well i'm going to leave that as an

00:17:45,840 --> 00:17:49,679
exercise for you to figure out why

00:17:47,760 --> 00:17:50,880
that's the right place over time you'll

00:17:49,679 --> 00:17:52,559
be looking at your

00:17:50,880 --> 00:17:55,919
your interceptor providers and deciding

00:17:52,559 --> 00:17:55,919
what's the right order for you

00:17:56,160 --> 00:18:00,000
so one last time we're going to go

00:17:57,679 --> 00:18:01,440
through the flow it goes down

00:18:00,000 --> 00:18:03,120
it goes to read only it goes to auth

00:18:01,440 --> 00:18:07,600
interceptor busy interceptor

00:18:03,120 --> 00:18:10,160
onto the server back back back back

00:18:07,600 --> 00:18:11,200
but wait a minute how did it get to the

00:18:10,160 --> 00:18:13,440
server

00:18:11,200 --> 00:18:14,960
what's in there that what's the mystery

00:18:13,440 --> 00:18:18,240
in there

00:18:14,960 --> 00:18:19,280
well it turns out that http client

00:18:18,240 --> 00:18:22,640
actually has

00:18:19,280 --> 00:18:24,400
a final interceptor there is exactly one

00:18:22,640 --> 00:18:26,080
it's called http backend

00:18:24,400 --> 00:18:28,559
you can actually replace it in fact the

00:18:26,080 --> 00:18:29,360
angular in memory web api does replace

00:18:28,559 --> 00:18:31,440
it

00:18:29,360 --> 00:18:32,880
but uh but that's guaranteed to be the

00:18:31,440 --> 00:18:34,000
last interceptor no matter what other

00:18:32,880 --> 00:18:36,960
interceptors you set

00:18:34,000 --> 00:18:38,160
up and that's the one that makes the xhr

00:18:36,960 --> 00:18:41,440
call

00:18:38,160 --> 00:18:43,200
and so that's what your interceptor gets

00:18:41,440 --> 00:18:44,240
to which then goes to the server comes

00:18:43,200 --> 00:18:46,559
back here

00:18:44,240 --> 00:18:48,240
connects up there and on you go all

00:18:46,559 --> 00:18:51,760
right it's back to the quiz

00:18:48,240 --> 00:18:55,280
back to the quiz what bill

00:18:51,760 --> 00:18:59,039
is alexander hamilton on

00:18:55,280 --> 00:19:01,039
it turns out he's on the 10. uh so uh

00:18:59,039 --> 00:19:02,240
uh you're free to send your ten dollars

00:19:01,039 --> 00:19:05,280
to me

00:19:02,240 --> 00:19:07,120
uh now uh one of the things though uh in

00:19:05,280 --> 00:19:08,720
this time of crisis with two trillion

00:19:07,120 --> 00:19:12,160
dollars uh

00:19:08,720 --> 00:19:13,280
in uh uh funding uh the government has

00:19:12,160 --> 00:19:15,200
to make it up some way so

00:19:13,280 --> 00:19:16,480
um they're thinking of allowing

00:19:15,200 --> 00:19:18,559
celebrities

00:19:16,480 --> 00:19:19,679
to put their faces on they're bidding it

00:19:18,559 --> 00:19:21,600
out

00:19:19,679 --> 00:19:23,360
so pretty soon we could be seeing taylor

00:19:21,600 --> 00:19:26,720
swift on the 10.

00:19:23,360 --> 00:19:29,120
and i just think this is a tragedy uh

00:19:26,720 --> 00:19:30,799
to compound the existing tragedy i i am

00:19:29,120 --> 00:19:34,400
so disgusted

00:19:30,799 --> 00:19:36,799
by the idea that we might um might sell

00:19:34,400 --> 00:19:39,280
our currents our sacred currency out

00:19:36,799 --> 00:19:40,720
uh and i hope you join me in your sense

00:19:39,280 --> 00:19:44,160
of disgust

00:19:40,720 --> 00:19:46,960
um and on that uh pleasant note uh

00:19:44,160 --> 00:19:49,760
i thank you very much uh for attending

00:19:46,960 --> 00:19:49,760
the http

00:19:50,840 --> 00:19:52,460
interceptors

00:19:52,140 --> 00:19:58,260
[Applause]

00:19:52,460 --> 00:20:00,310
[Music]

00:19:58,260 --> 00:20:03,679
[Applause]

00:20:00,310 --> 00:20:05,760
[Music]

00:20:03,679 --> 00:20:05,760

YouTube URL: https://www.youtube.com/watch?v=BVzNDETj-CA


