Title: The State of NgRx | Mike Ryan | ng-conf: Hardwired
Publication date: 2020-06-15
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Mike is one of the creators of NgRx, a collection of high quality reactive libraries for Angular offering solutions for state management, side effects, and more. Learn how the NgRx platform grew in 2018 and get an updated glimpse into how NgRx plans to grow in 2020 in a new Ivy-enabled world.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,760 --> 00:00:19,920
so

00:00:18,240 --> 00:00:22,400
i'm really excited to be giving sort of

00:00:19,920 --> 00:00:24,720
the state of ngrx at this year's ng-conf

00:00:22,400 --> 00:00:26,480
but first let me introduce myself my

00:00:24,720 --> 00:00:30,400
name is mike ryan you can follow me on

00:00:26,480 --> 00:00:32,079
twitter and github at my dev i'm a

00:00:30,400 --> 00:00:33,360
software architect at synapse where i'm

00:00:32,079 --> 00:00:37,040
working on making north american

00:00:33,360 --> 00:00:37,040
manufacturing more sustainable

00:00:37,200 --> 00:00:41,040
i'm also a google developer expert in

00:00:39,360 --> 00:00:44,480
angular web technologies and i'm one of

00:00:41,040 --> 00:00:46,320
the co-creators of ngrx

00:00:44,480 --> 00:00:48,000
i want to talk about ngrx for a minute

00:00:46,320 --> 00:00:49,680
and what i want to do is i want to start

00:00:48,000 --> 00:00:53,039
off by reintroducing

00:00:49,680 --> 00:00:54,719
ngrx to all of you because if you get a

00:00:53,039 --> 00:00:56,960
little bit of history what ndx is it

00:00:54,719 --> 00:00:59,520
might help you make sense of where ngrx

00:00:56,960 --> 00:01:02,640
is going

00:00:59,520 --> 00:01:04,720
so ngrx was founded by at the time

00:01:02,640 --> 00:01:06,880
angular team member rob wormalt and the

00:01:04,720 --> 00:01:08,240
mission was to build out a reactivity

00:01:06,880 --> 00:01:09,920
layer for angular

00:01:08,240 --> 00:01:13,840
that's where the name comes from angular

00:01:09,920 --> 00:01:13,840
plus rxjs and grx

00:01:14,080 --> 00:01:17,680
the first library that we created was

00:01:15,840 --> 00:01:18,640
one that made us famous and that was

00:01:17,680 --> 00:01:20,240
store

00:01:18,640 --> 00:01:21,759
at this point in history store was

00:01:20,240 --> 00:01:24,159
really just a reactive implementation of

00:01:21,759 --> 00:01:25,920
redux there's only the one library

00:01:24,159 --> 00:01:28,080
and it was built to be completely

00:01:25,920 --> 00:01:28,400
compatible with redux from react land

00:01:28,080 --> 00:01:29,759
but

00:01:28,400 --> 00:01:32,000
built with observables underneath the

00:01:29,759 --> 00:01:32,000
hood

00:01:32,079 --> 00:01:35,520
library number two was the router if you

00:01:34,240 --> 00:01:37,600
saw brandon roberts talk

00:01:35,520 --> 00:01:38,560
yesterday about reactive routing you're

00:01:37,600 --> 00:01:39,759
already a little familiar with the

00:01:38,560 --> 00:01:40,799
history of this project so i won't go

00:01:39,759 --> 00:01:43,280
into it too much

00:01:40,799 --> 00:01:44,960
but the goal was to create a routing api

00:01:43,280 --> 00:01:46,799
that was ergonomically used

00:01:44,960 --> 00:01:48,320
in comparison to the angular router at

00:01:46,799 --> 00:01:50,560
the time it was also

00:01:48,320 --> 00:01:52,880
fully reactive embraced observables

00:01:50,560 --> 00:01:54,320
underneath the hood

00:01:52,880 --> 00:01:55,600
and the third library that we had way

00:01:54,320 --> 00:01:57,040
back in the day was the one that you are

00:01:55,600 --> 00:01:59,600
least likely to have actually heard of

00:01:57,040 --> 00:02:01,439
at this point that was ngrx

00:01:59,600 --> 00:02:04,000
it was a reactive library that wrapped

00:02:01,439 --> 00:02:05,280
the indexeddb api available in browsers

00:02:04,000 --> 00:02:08,319
so you kind of think of it being like

00:02:05,280 --> 00:02:09,920
super powered local storage

00:02:08,319 --> 00:02:10,959
so what happened to these libraries i

00:02:09,920 --> 00:02:12,640
think for many of you you're going to

00:02:10,959 --> 00:02:13,840
say well i only knew about android's

00:02:12,640 --> 00:02:16,480
estate management so i didn't know it

00:02:13,840 --> 00:02:16,480
did all these things

00:02:16,560 --> 00:02:20,400
well the router grew up the router

00:02:18,400 --> 00:02:22,640
became the angular router

00:02:20,400 --> 00:02:24,400
at the same time store really started to

00:02:22,640 --> 00:02:26,000
pick up in popularity

00:02:24,400 --> 00:02:27,760
now i like to say that store was really

00:02:26,000 --> 00:02:29,680
really popular because it was borrowing

00:02:27,760 --> 00:02:31,040
so many great ideas from other languages

00:02:29,680 --> 00:02:32,800
and ecosystems

00:02:31,040 --> 00:02:34,239
but i also kind of need to admit that it

00:02:32,800 --> 00:02:36,239
was really really getting popular

00:02:34,239 --> 00:02:40,560
because it was the only state management

00:02:36,239 --> 00:02:40,560
library for angular for a long long time

00:02:41,200 --> 00:02:44,640
so we had to really focus our resources

00:02:43,280 --> 00:02:45,840
on the store and the router

00:02:44,640 --> 00:02:48,400
to help grow them and make them

00:02:45,840 --> 00:02:50,080
successful and we had to let db

00:02:48,400 --> 00:02:51,840
kind of fade in the background

00:02:50,080 --> 00:02:54,080
eventually

00:02:51,840 --> 00:02:55,440
back then the ndx team was much smaller

00:02:54,080 --> 00:02:56,480
much scrappier we had to be a lot more

00:02:55,440 --> 00:02:59,680
selective with

00:02:56,480 --> 00:03:01,760
what resources we had

00:02:59,680 --> 00:03:03,040
so we let tv go into the background

00:03:01,760 --> 00:03:06,400
router lefty org

00:03:03,040 --> 00:03:07,920
and that really just left us with store

00:03:06,400 --> 00:03:10,080
and it stayed this way for nearly three

00:03:07,920 --> 00:03:10,879
years so i'm not terribly surprised that

00:03:10,080 --> 00:03:12,560
when someone says

00:03:10,879 --> 00:03:14,720
ngrx they think about our state

00:03:12,560 --> 00:03:16,480
management solution first

00:03:14,720 --> 00:03:18,080
but over the past year we've begun to

00:03:16,480 --> 00:03:19,920
stretch back into our original mission

00:03:18,080 --> 00:03:21,599
and we're trying to explore other ways

00:03:19,920 --> 00:03:25,120
to make the angular ecosystem

00:03:21,599 --> 00:03:26,640
or react so before i get into all the

00:03:25,120 --> 00:03:29,280
new goodness that we're bringing to you

00:03:26,640 --> 00:03:30,840
i kind of want to look back at 2019 by

00:03:29,280 --> 00:03:33,840
the numbers and see how the project's

00:03:30,840 --> 00:03:37,360
doing

00:03:33,840 --> 00:03:39,680
based on our stats for ngrx.io over 350

00:03:37,360 --> 00:03:43,360
000 developers are using some library

00:03:39,680 --> 00:03:43,360
within the ngrx ecosystem

00:03:43,760 --> 00:03:47,360
all together developers have downloaded

00:03:45,599 --> 00:03:50,400
ngrx store just store

00:03:47,360 --> 00:03:52,560
over 12 million times in 2019 alone and

00:03:50,400 --> 00:03:55,680
over 25 million times across the

00:03:52,560 --> 00:03:57,920
lifetime of the library

00:03:55,680 --> 00:03:59,280
these two numbers represent 30 growth

00:03:57,920 --> 00:04:00,959
for the ngrx project

00:03:59,280 --> 00:04:02,400
that's nearly twice as fast as the

00:04:00,959 --> 00:04:03,680
growth rate for angular

00:04:02,400 --> 00:04:05,200
that means more and more angular

00:04:03,680 --> 00:04:06,959
developers are getting on board within

00:04:05,200 --> 00:04:10,159
jrx and using some of the libraries that

00:04:06,959 --> 00:04:11,760
we publish underneath the platform

00:04:10,159 --> 00:04:14,319
we're also seeing big adoption within

00:04:11,760 --> 00:04:16,560
the enterprise space within google alone

00:04:14,319 --> 00:04:20,320
over 300 of the angular apps rely on

00:04:16,560 --> 00:04:21,440
ngrx for their state management solution

00:04:20,320 --> 00:04:23,600
and we couldn't have built this without

00:04:21,440 --> 00:04:24,720
the support of our community we're proud

00:04:23,600 --> 00:04:26,560
that in 2019

00:04:24,720 --> 00:04:29,199
over a hundred contributors from the

00:04:26,560 --> 00:04:30,880
community helps make ngrx as big as it

00:04:29,199 --> 00:04:32,160
is today

00:04:30,880 --> 00:04:33,520
and that's our contribution story that i

00:04:32,160 --> 00:04:34,960
want to talk about for just a second

00:04:33,520 --> 00:04:36,639
because we could have pulled off these

00:04:34,960 --> 00:04:39,280
amazing numbers with a little help from

00:04:36,639 --> 00:04:40,639
a few of our friends

00:04:39,280 --> 00:04:42,320
so first off i just want to highlight

00:04:40,639 --> 00:04:44,080
the team that builds in jrx

00:04:42,320 --> 00:04:46,880
it can be somewhat times a little fun to

00:04:44,080 --> 00:04:48,960
see the faces behind the project

00:04:46,880 --> 00:04:50,240
and in particular i want to highlight

00:04:48,960 --> 00:04:52,080
these four folks

00:04:50,240 --> 00:04:53,520
because in the past year we've added

00:04:52,080 --> 00:04:56,800
alex john ward

00:04:53,520 --> 00:04:58,320
and wes to the ngrxd alex is a software

00:04:56,800 --> 00:04:59,919
engineer at firebase and google and he

00:04:58,320 --> 00:05:01,520
brings a lot of great architectural

00:04:59,919 --> 00:05:02,800
mindset to the project

00:05:01,520 --> 00:05:05,680
he's really helped shape the technical

00:05:02,800 --> 00:05:07,440
direction of ngrx since joining the team

00:05:05,680 --> 00:05:09,680
he's actually the maintainer of ngrx

00:05:07,440 --> 00:05:11,360
within google so he helps support ngrx

00:05:09,680 --> 00:05:12,080
for those 300 plus applications i just

00:05:11,360 --> 00:05:13,919
mentioned

00:05:12,080 --> 00:05:15,919
and he brings all that perspective back

00:05:13,919 --> 00:05:18,000
to ngrx to help us succeed at an

00:05:15,919 --> 00:05:20,080
enormous scale

00:05:18,000 --> 00:05:21,759
donna ward brought us ngrx data and i'm

00:05:20,080 --> 00:05:23,280
excited to share a few slides about that

00:05:21,759 --> 00:05:25,120
project just a minute

00:05:23,280 --> 00:05:27,039
and lastly wes he's a software engineer

00:05:25,120 --> 00:05:29,039
at narwhal west creates a lot of great

00:05:27,039 --> 00:05:32,560
content for ngrx and spends his time

00:05:29,039 --> 00:05:32,560
helping developers be successful

00:05:33,360 --> 00:05:36,880
what i like about this team is the

00:05:34,639 --> 00:05:39,680
vibrancy of ways in which these members

00:05:36,880 --> 00:05:41,280
have gotten onto the team it shows that

00:05:39,680 --> 00:05:42,080
there is a path for you to get involved

00:05:41,280 --> 00:05:43,440
with a project

00:05:42,080 --> 00:05:45,360
if you're excited about trying to help

00:05:43,440 --> 00:05:47,520
us out whether it's being a great

00:05:45,360 --> 00:05:49,360
developer advocate for ngrx by creating

00:05:47,520 --> 00:05:50,639
blog posts giving talks and helping

00:05:49,360 --> 00:05:52,080
developers at meetups

00:05:50,639 --> 00:05:54,320
or you're contributing architectural

00:05:52,080 --> 00:05:55,840
guidance or you're actually writing code

00:05:54,320 --> 00:05:59,039
there's a path to get involved with this

00:05:55,840 --> 00:06:01,680
project and be a member of our team

00:05:59,039 --> 00:06:02,880
and so many of you have contributed code

00:06:01,680 --> 00:06:04,639
they're just a few of the top

00:06:02,880 --> 00:06:05,360
contributors to ngrx within the past

00:06:04,639 --> 00:06:07,120
year

00:06:05,360 --> 00:06:08,720
each of these faces here have helped

00:06:07,120 --> 00:06:10,240
deliver ngrx

00:06:08,720 --> 00:06:11,840
over the past year and we couldn't be

00:06:10,240 --> 00:06:14,800
more proud of how many people we get

00:06:11,840 --> 00:06:14,800
involved with the project

00:06:15,120 --> 00:06:19,120
so that in mind i think 2020 is going to

00:06:17,680 --> 00:06:21,360
be the year of ngrx

00:06:19,120 --> 00:06:22,960
getting back to its roots we're going to

00:06:21,360 --> 00:06:26,319
start embracing reactivity

00:06:22,960 --> 00:06:29,360
in more ways than just state management

00:06:26,319 --> 00:06:30,560
so let's take a look what i want to do

00:06:29,360 --> 00:06:33,919
is i want to introduce to you

00:06:30,560 --> 00:06:36,160
ngrx in three categories how is ngrx

00:06:33,919 --> 00:06:39,520
tackling state management

00:06:36,160 --> 00:06:42,400
how is ngrx dealing with reactive data

00:06:39,520 --> 00:06:45,039
and how is ngrx pushing observables into

00:06:42,400 --> 00:06:45,039
the view layer

00:06:45,360 --> 00:06:50,880
the first ngrx state ngrx state is

00:06:49,039 --> 00:06:52,720
focused on providing integraze

00:06:50,880 --> 00:06:54,880
enterprise grade state management and

00:06:52,720 --> 00:06:56,720
side effect isolation reactive angular

00:06:54,880 --> 00:06:59,280
application

00:06:56,720 --> 00:06:59,759
it's comprised of five libraries store

00:06:59,280 --> 00:07:01,280
fx

00:06:59,759 --> 00:07:03,199
entity router store and the storage

00:07:01,280 --> 00:07:05,440
devtools and we're really excited that

00:07:03,199 --> 00:07:07,520
we released version nine last month

00:07:05,440 --> 00:07:10,720
bringing full support for angular ivy

00:07:07,520 --> 00:07:12,880
into our estate management solution

00:07:10,720 --> 00:07:14,319
so since the last ng conf what's new

00:07:12,880 --> 00:07:16,319
what have we changed within these state

00:07:14,319 --> 00:07:17,680
management libraries

00:07:16,319 --> 00:07:19,360
well i think the thing that i'm most

00:07:17,680 --> 00:07:20,400
excited about are the new creator

00:07:19,360 --> 00:07:22,160
functions that improve

00:07:20,400 --> 00:07:24,080
type safety and reduce the amount of

00:07:22,160 --> 00:07:26,319
code you have to author to be successful

00:07:24,080 --> 00:07:28,240
within jrx state

00:07:26,319 --> 00:07:29,520
let's take a look at a few of these new

00:07:28,240 --> 00:07:31,759
creator functions and see how they

00:07:29,520 --> 00:07:34,560
reduce code

00:07:31,759 --> 00:07:35,280
so before an ngrx you'd have to write a

00:07:34,560 --> 00:07:36,960
lot of code

00:07:35,280 --> 00:07:38,880
just to get started with actions this

00:07:36,960 --> 00:07:41,199
was so disappointing to me his actions

00:07:38,880 --> 00:07:42,800
really are the fuel of the ngrx ship

00:07:41,199 --> 00:07:45,039
they're critical to getting an indirect

00:07:42,800 --> 00:07:46,319
state application be successful

00:07:45,039 --> 00:07:47,759
and if we were asking developers to

00:07:46,319 --> 00:07:48,720
write a ton of code just for the most

00:07:47,759 --> 00:07:50,240
critical part

00:07:48,720 --> 00:07:52,800
the developers are immediately going to

00:07:50,240 --> 00:07:54,319
be turned off by our solution

00:07:52,800 --> 00:07:55,520
with the new creator functions the

00:07:54,319 --> 00:07:56,319
amount of code you have to author at

00:07:55,520 --> 00:07:59,440
write actions

00:07:56,319 --> 00:08:01,360
is far reduced now you can focus on

00:07:59,440 --> 00:08:03,199
declaring exactly what your actions are

00:08:01,360 --> 00:08:05,440
and avoid a lot of the ceremony we had

00:08:03,199 --> 00:08:08,240
to uh together last

00:08:05,440 --> 00:08:10,879
previous version get type saved in your

00:08:08,240 --> 00:08:12,319
applications

00:08:10,879 --> 00:08:14,800
we brought the same code reductions to

00:08:12,319 --> 00:08:16,400
producers so beforehand you again you

00:08:14,800 --> 00:08:18,160
had to have a lot of ceremony

00:08:16,400 --> 00:08:19,360
during types you had to use these big

00:08:18,160 --> 00:08:20,720
switch statements to become hard to

00:08:19,360 --> 00:08:22,800
maintain over time

00:08:20,720 --> 00:08:24,639
and it was overall a lot of code a lot

00:08:22,800 --> 00:08:26,479
of ways in which developers could hurt

00:08:24,639 --> 00:08:28,800
themselves here

00:08:26,479 --> 00:08:29,680
so the new creator functions so much of

00:08:28,800 --> 00:08:31,120
that code's gone

00:08:29,680 --> 00:08:32,959
we can take care of that for you again

00:08:31,120 --> 00:08:36,479
letting you focus on the business logic

00:08:32,959 --> 00:08:36,479
of your ngrx application

00:08:36,880 --> 00:08:40,719
when it comes to effects not much has

00:08:39,519 --> 00:08:42,719
changed here

00:08:40,719 --> 00:08:43,919
we've introduced a creator function and

00:08:42,719 --> 00:08:45,200
it's not going to reduce a lot of code

00:08:43,919 --> 00:08:46,800
here but we did use this as an

00:08:45,200 --> 00:08:49,200
opportunity to make the api more

00:08:46,800 --> 00:08:51,440
consistent with the rest of ngrx state

00:08:49,200 --> 00:08:53,040
and also to improve type safe for

00:08:51,440 --> 00:08:55,120
example here in this

00:08:53,040 --> 00:08:56,880
example effect you might notice that

00:08:55,120 --> 00:08:59,680
there is a bit of a bug on this line

00:08:56,880 --> 00:09:02,240
where i did not map the result one of my

00:08:59,680 --> 00:09:03,839
observable calls back in action

00:09:02,240 --> 00:09:05,680
in the previous format and the previous

00:09:03,839 --> 00:09:07,120
apis we couldn't detect this error for

00:09:05,680 --> 00:09:08,800
you until runtime

00:09:07,120 --> 00:09:10,959
but with the new create effect helper we

00:09:08,800 --> 00:09:12,080
can raise a type error way earlier for

00:09:10,959 --> 00:09:15,120
you and help you get

00:09:12,080 --> 00:09:15,120
this code fixed

00:09:16,160 --> 00:09:20,160
so if you've avoided injeric state due

00:09:18,080 --> 00:09:20,880
to code volume i'd highly suggest taking

00:09:20,160 --> 00:09:23,120
another look

00:09:20,880 --> 00:09:25,120
the team's done a lot of great work in

00:09:23,120 --> 00:09:28,399
reducing how much code you have to write

00:09:25,120 --> 00:09:29,920
to be successful within jrx state

00:09:28,399 --> 00:09:32,080
speaking of success we've also

00:09:29,920 --> 00:09:33,120
introduced this idea of strict runtime

00:09:32,080 --> 00:09:34,800
checks

00:09:33,120 --> 00:09:36,720
and these strict runtime checks are

00:09:34,800 --> 00:09:38,480
really there to help developers adhere

00:09:36,720 --> 00:09:40,560
to the architectural constraints

00:09:38,480 --> 00:09:44,240
that ngrx relies on to make your

00:09:40,560 --> 00:09:46,959
applications fast and easy to debug

00:09:44,240 --> 00:09:49,040
what do these look like well there are a

00:09:46,959 --> 00:09:49,600
few runtime checks that are now enabled

00:09:49,040 --> 00:09:52,880
for you

00:09:49,600 --> 00:09:56,080
when you start using ngrx date

00:09:52,880 --> 00:09:57,040
the first is immutability checks ngrx

00:09:56,080 --> 00:09:59,200
wants to make sure

00:09:57,040 --> 00:10:00,560
that you are not mutating state or

00:09:59,200 --> 00:10:01,519
actions

00:10:00,560 --> 00:10:03,519
when you're implementing the

00:10:01,519 --> 00:10:04,880
architecture this is that you can

00:10:03,519 --> 00:10:07,200
leverage things like the

00:10:04,880 --> 00:10:08,480
on change or the on push change

00:10:07,200 --> 00:10:11,600
detection strategy

00:10:08,480 --> 00:10:13,680
for once within your application

00:10:11,600 --> 00:10:14,800
we also have checks now to verify that

00:10:13,680 --> 00:10:17,839
your state

00:10:14,800 --> 00:10:19,560
is serializable so

00:10:17,839 --> 00:10:22,079
here means that we can run

00:10:19,560 --> 00:10:22,959
json.stringify on it and then json.parse

00:10:22,079 --> 00:10:24,800
on it again

00:10:22,959 --> 00:10:26,480
and get back the same value that we

00:10:24,800 --> 00:10:28,320
originally serialized

00:10:26,480 --> 00:10:29,760
and this is important so we can show you

00:10:28,320 --> 00:10:30,959
your application state and things like

00:10:29,760 --> 00:10:32,560
the redux dev tools

00:10:30,959 --> 00:10:35,839
help you get insight until you're high

00:10:32,560 --> 00:10:37,519
into how your application is running

00:10:35,839 --> 00:10:39,120
and lastly we have runtime checks now

00:10:37,519 --> 00:10:41,360
for change

00:10:39,120 --> 00:10:42,800
so developers sometimes get caught up

00:10:41,360 --> 00:10:44,399
with zone js

00:10:42,800 --> 00:10:46,000
they might accidentally dispatch an

00:10:44,399 --> 00:10:48,560
action in a context that's

00:10:46,000 --> 00:10:49,760
not being watched by zone js leading to

00:10:48,560 --> 00:10:51,360
them to be frustrated

00:10:49,760 --> 00:10:53,279
when they dispatch an action they've

00:10:51,360 --> 00:10:54,399
reduced it but their ui is just not

00:10:53,279 --> 00:10:56,800
updated

00:10:54,399 --> 00:10:58,240
so now ngrx state will warn you if you

00:10:56,800 --> 00:11:00,880
dispatch an action and you aren't in

00:10:58,240 --> 00:11:02,320
zone js

00:11:00,880 --> 00:11:04,160
you can configure these in your root

00:11:02,320 --> 00:11:06,720
application module so

00:11:04,160 --> 00:11:08,640
you can opt in to or opt out of any of

00:11:06,720 --> 00:11:10,000
these strict runtime checks

00:11:08,640 --> 00:11:15,040
and again they're just there to help you

00:11:10,000 --> 00:11:18,800
be successful architecture

00:11:15,040 --> 00:11:21,040
so that's a brief update on ngrx state

00:11:18,800 --> 00:11:23,279
now let's turn our attention to ngrx

00:11:21,040 --> 00:11:26,000
data

00:11:23,279 --> 00:11:26,800
ngrx data is focused on abstracting the

00:11:26,000 --> 00:11:28,560
data

00:11:26,800 --> 00:11:30,240
needs of your view layer away from the

00:11:28,560 --> 00:11:34,320
mechanics of actually retrieving

00:11:30,240 --> 00:11:35,600
that data today there's only one library

00:11:34,320 --> 00:11:38,240
in the data family

00:11:35,600 --> 00:11:39,200
and that is ngrx data and we're really

00:11:38,240 --> 00:11:42,240
excited to bring

00:11:39,200 --> 00:11:43,680
ngrx data into the family

00:11:42,240 --> 00:11:45,519
as i mentioned at the top this is a

00:11:43,680 --> 00:11:46,079
library created by john papa and ward

00:11:45,519 --> 00:11:48,640
bell

00:11:46,079 --> 00:11:50,320
for a while it existed independently of

00:11:48,640 --> 00:11:52,639
the platform

00:11:50,320 --> 00:11:53,680
since then we've brought njx data into

00:11:52,639 --> 00:11:55,360
our mono repo

00:11:53,680 --> 00:11:56,720
we now publish it underneath the ngrx

00:11:55,360 --> 00:11:58,079
name we give it all the love and

00:11:56,720 --> 00:12:00,959
attention we give to all of our other

00:11:58,079 --> 00:12:02,800
grx libraries and the goal of this

00:12:00,959 --> 00:12:05,360
library is to really separate

00:12:02,800 --> 00:12:07,200
what data the client needs from how you

00:12:05,360 --> 00:12:09,120
retrieve it

00:12:07,200 --> 00:12:10,560
let's take a look at a very bare bones

00:12:09,120 --> 00:12:12,000
component to get an idea of what i mean

00:12:10,560 --> 00:12:13,200
here

00:12:12,000 --> 00:12:15,600
this is a component that's going to

00:12:13,200 --> 00:12:17,040
consume a list of authors

00:12:15,600 --> 00:12:18,560
we can tell it consumes a list of alters

00:12:17,040 --> 00:12:20,240
because it declares that it's part of

00:12:18,560 --> 00:12:21,360
the data that will be available in the

00:12:20,240 --> 00:12:23,120
template

00:12:21,360 --> 00:12:26,160
this is the data that this component

00:12:23,120 --> 00:12:27,519
needs it needs a list of authors

00:12:26,160 --> 00:12:29,839
and in the constructor we can see that

00:12:27,519 --> 00:12:32,959
we are wiring this up using a call

00:12:29,839 --> 00:12:35,680
to some api this is the mechanism of how

00:12:32,959 --> 00:12:37,519
we actually get that data

00:12:35,680 --> 00:12:39,040
now with the ngrx state we can actually

00:12:37,519 --> 00:12:40,480
decouple these two we can have

00:12:39,040 --> 00:12:42,639
components just consume

00:12:40,480 --> 00:12:44,079
data and not have to rely on the

00:12:42,639 --> 00:12:45,760
mechanics of getting that data into our

00:12:44,079 --> 00:12:47,839
application

00:12:45,760 --> 00:12:49,519
so with ngrx state the way you do this

00:12:47,839 --> 00:12:51,200
is first you declare some actions

00:12:49,519 --> 00:12:53,839
you have an action for entering maybe

00:12:51,200 --> 00:12:55,519
the author's page and then an action

00:12:53,839 --> 00:12:58,560
for getting all the authors successfully

00:12:55,519 --> 00:13:00,399
with your author's api

00:12:58,560 --> 00:13:02,160
then in your authors component you would

00:13:00,399 --> 00:13:04,079
select out the list of authors

00:13:02,160 --> 00:13:05,680
from the store and you'd say hey

00:13:04,079 --> 00:13:08,320
someone's entered the author's page

00:13:05,680 --> 00:13:08,720
relying on what's called an effect to

00:13:08,320 --> 00:13:11,120
step

00:13:08,720 --> 00:13:13,920
in listen for that interaction and

00:13:11,120 --> 00:13:16,240
actually make that api call for you

00:13:13,920 --> 00:13:18,000
so this strategy allows you to decouple

00:13:16,240 --> 00:13:21,120
how you retrieve data

00:13:18,000 --> 00:13:23,519
from the way you're consuming data but

00:13:21,120 --> 00:13:25,760
that was kind of a lot of code and so

00:13:23,519 --> 00:13:28,240
what we've found is that ngrx state

00:13:25,760 --> 00:13:30,320
may not scale well for really data

00:13:28,240 --> 00:13:31,600
driven applications that maybe have 50

00:13:30,320 --> 00:13:33,519
plus entities

00:13:31,600 --> 00:13:35,360
it's simply too much code to have to

00:13:33,519 --> 00:13:36,000
write if you're dealing with a really

00:13:35,360 --> 00:13:40,079
broad

00:13:36,000 --> 00:13:42,480
domain so ngrx data steps in

00:13:40,079 --> 00:13:43,600
and it offers an alternative it too

00:13:42,480 --> 00:13:46,800
abstracts away

00:13:43,600 --> 00:13:50,240
the mechanics of how data is fetched but

00:13:46,800 --> 00:13:52,160
it does it in a much different fashion

00:13:50,240 --> 00:13:54,480
so if you were to rebuild that same

00:13:52,160 --> 00:13:56,480
application using ngrx data we'd start

00:13:54,480 --> 00:13:58,880
by setting up what's called

00:13:56,480 --> 00:14:00,639
an any collection service so here i've

00:13:58,880 --> 00:14:03,040
built an any collection service for all

00:14:00,639 --> 00:14:04,639
of my authors in my application

00:14:03,040 --> 00:14:06,320
you can see that i'm extending a base

00:14:04,639 --> 00:14:07,920
class and then in my constructor i'm

00:14:06,320 --> 00:14:09,519
giving it just enough config

00:14:07,920 --> 00:14:11,360
so that we can use all the defaults

00:14:09,519 --> 00:14:12,880
within ngrx data

00:14:11,360 --> 00:14:15,120
and what's really cool about this is

00:14:12,880 --> 00:14:17,040
because we're relying on those defaults

00:14:15,120 --> 00:14:18,880
it within integerx data this is going to

00:14:17,040 --> 00:14:20,720
scaffold out in the background

00:14:18,880 --> 00:14:23,680
all the methods and services we need to

00:14:20,720 --> 00:14:25,360
start interacting with our api

00:14:23,680 --> 00:14:27,360
so from here we can take this entity

00:14:25,360 --> 00:14:30,639
collection service we can inject it

00:14:27,360 --> 00:14:31,680
into our author's component we can read

00:14:30,639 --> 00:14:33,440
an observable

00:14:31,680 --> 00:14:34,880
of those entities right off of the

00:14:33,440 --> 00:14:36,880
service and

00:14:34,880 --> 00:14:38,320
that any collection service will expose

00:14:36,880 --> 00:14:39,600
a get all method for us

00:14:38,320 --> 00:14:42,240
that already knows how to speak to our

00:14:39,600 --> 00:14:44,560
api and that's it that's all the code i

00:14:42,240 --> 00:14:45,839
have to write

00:14:44,560 --> 00:14:47,760
and what's really great about this is

00:14:45,839 --> 00:14:49,279
that it's completely built on top of

00:14:47,760 --> 00:14:50,959
ngrx state

00:14:49,279 --> 00:14:52,639
so it's reactive underneath the hood

00:14:50,959 --> 00:14:55,360
it's performance it's dealing with

00:14:52,639 --> 00:14:57,839
immutable data structures

00:14:55,360 --> 00:14:59,680
but you don't need to use ngrx state to

00:14:57,839 --> 00:15:01,440
make use of ngrx data

00:14:59,680 --> 00:15:03,440
they play great together so if you want

00:15:01,440 --> 00:15:04,959
to leverage the benefits of both ngrx

00:15:03,440 --> 00:15:07,279
data and ngrx

00:15:04,959 --> 00:15:09,120
state within your application you can

00:15:07,279 --> 00:15:10,639
but if you just want to use ngirx data

00:15:09,120 --> 00:15:11,199
with some other kind of state management

00:15:10,639 --> 00:15:14,399
solution

00:15:11,199 --> 00:15:14,399
that's totally fine too

00:15:15,839 --> 00:15:20,320
so now that we've looked at ngrx data

00:15:18,480 --> 00:15:22,480
let's talk about the newest

00:15:20,320 --> 00:15:24,639
part of the indrex family and that's in

00:15:22,480 --> 00:15:27,199
grx view

00:15:24,639 --> 00:15:29,040
so view right now has what i'd say two

00:15:27,199 --> 00:15:30,480
libraries in it though i should mention

00:15:29,040 --> 00:15:32,320
that these are not libraries that have

00:15:30,480 --> 00:15:34,959
actually been published yet

00:15:32,320 --> 00:15:36,480
the first is ngrx components if you've

00:15:34,959 --> 00:15:38,639
not seen my talk at angular connect

00:15:36,480 --> 00:15:40,320
about rethinking reactivity with ivy i

00:15:38,639 --> 00:15:42,000
would strongly recommend it it gives a

00:15:40,320 --> 00:15:44,000
really detailed introduction

00:15:42,000 --> 00:15:46,320
into inject's component and what we're

00:15:44,000 --> 00:15:48,399
trying to accomplish with this library

00:15:46,320 --> 00:15:50,480
and then yesterday brandon roberts gave

00:15:48,399 --> 00:15:51,199
a talk about reactive routing and how we

00:15:50,480 --> 00:15:53,440
might rethink

00:15:51,199 --> 00:15:54,959
parts of that too in the ivy landscape

00:15:53,440 --> 00:15:56,720
i'd recommend going back and watching

00:15:54,959 --> 00:15:59,920
his talk to get up to date

00:15:56,720 --> 00:16:01,600
on how that library works but for now i

00:15:59,920 --> 00:16:03,040
want to give you an update on component

00:16:01,600 --> 00:16:05,279
where is it at and where has it come in

00:16:03,040 --> 00:16:06,639
the past six months

00:16:05,279 --> 00:16:08,959
i should warn you that we're really at

00:16:06,639 --> 00:16:10,720
the bleeding edge of ngrx

00:16:08,959 --> 00:16:12,079
so you can use inject's component but

00:16:10,720 --> 00:16:13,759
it's not published npm

00:16:12,079 --> 00:16:15,759
we're already publishing nightlys of it

00:16:13,759 --> 00:16:17,839
so you can assume those nightlys

00:16:15,759 --> 00:16:20,079
we have some documentation published on

00:16:17,839 --> 00:16:21,279
indirect io go and start learning it

00:16:20,079 --> 00:16:22,800
and i know that there have been a few

00:16:21,279 --> 00:16:24,320
twitch streamers like mike hartington

00:16:22,800 --> 00:16:25,920
that have been going through using this

00:16:24,320 --> 00:16:26,720
library if you want to start thinking of

00:16:25,920 --> 00:16:29,839
the code

00:16:26,720 --> 00:16:29,839
samples that are working today

00:16:30,800 --> 00:16:34,000
with ngrx component we're trying to

00:16:32,800 --> 00:16:36,000
rethink how

00:16:34,000 --> 00:16:37,920
change detection works for angular

00:16:36,000 --> 00:16:39,199
applications

00:16:37,920 --> 00:16:41,759
so if you're not familiar with change

00:16:39,199 --> 00:16:43,120
detection is it is an element of the

00:16:41,759 --> 00:16:46,079
angular framework in which

00:16:43,120 --> 00:16:48,160
angular is going to figure out what data

00:16:46,079 --> 00:16:49,839
or state in your app has changed

00:16:48,160 --> 00:16:51,519
and then make it a determination if

00:16:49,839 --> 00:16:54,639
there was changes to that data

00:16:51,519 --> 00:16:57,279
on how to update why

00:16:54,639 --> 00:16:59,279
in an angular app zone js is the default

00:16:57,279 --> 00:17:00,959
mechanism angular uses to run change

00:16:59,279 --> 00:17:04,160
detection

00:17:00,959 --> 00:17:06,319
zone.js monkey patches all of the ways

00:17:04,160 --> 00:17:07,360
and async apis that are available in the

00:17:06,319 --> 00:17:08,720
browser

00:17:07,360 --> 00:17:10,319
so that when your angular app

00:17:08,720 --> 00:17:11,919
communicates with one of those async

00:17:10,319 --> 00:17:13,360
apis angular says hey

00:17:11,919 --> 00:17:14,720
i know they've reached out maybe made a

00:17:13,360 --> 00:17:16,240
network request or maybe they've opened

00:17:14,720 --> 00:17:18,000
up a websocket connection

00:17:16,240 --> 00:17:19,919
we should check to see if we need to run

00:17:18,000 --> 00:17:21,760
change detection

00:17:19,919 --> 00:17:24,319
but we found that at scale there are a

00:17:21,760 --> 00:17:26,400
few flaws with this approach

00:17:24,319 --> 00:17:27,839
versus that zone.js isn't going to have

00:17:26,400 --> 00:17:30,640
patched 100

00:17:27,839 --> 00:17:32,080
of the browser apis so as new and

00:17:30,640 --> 00:17:34,480
experimental apis are available

00:17:32,080 --> 00:17:35,919
to us as web developers to use zone.js

00:17:34,480 --> 00:17:38,880
may not be up to date enough

00:17:35,919 --> 00:17:39,760
to have actually patched those new apis

00:17:38,880 --> 00:17:42,240
additionally

00:17:39,760 --> 00:17:43,600
if libraries are using native async

00:17:42,240 --> 00:17:45,280
await within the browser

00:17:43,600 --> 00:17:46,960
node.js is going to have a hard time

00:17:45,280 --> 00:17:48,400
actually patching and understanding when

00:17:46,960 --> 00:17:51,039
those libraries

00:17:48,400 --> 00:17:52,400
have done something interesting finally

00:17:51,039 --> 00:17:53,840
if you're using a library that has some

00:17:52,400 --> 00:17:56,400
kind of scheduling built in

00:17:53,840 --> 00:17:56,880
like rxjs it can be easy to accidentally

00:17:56,400 --> 00:17:59,360
escape

00:17:56,880 --> 00:18:00,480
zones and start to use async apis that

00:17:59,360 --> 00:18:02,400
angular is not aware that you're going

00:18:00,480 --> 00:18:03,679
to call

00:18:02,400 --> 00:18:05,840
so what we wanted to do is we want to

00:18:03,679 --> 00:18:08,400
say hey can we use observables

00:18:05,840 --> 00:18:11,360
as our mechanism for determining when to

00:18:08,400 --> 00:18:11,360
run change detection

00:18:11,520 --> 00:18:17,039
so today njx component has two apis

00:18:14,160 --> 00:18:17,039
let's take a look at them

00:18:17,120 --> 00:18:21,679
the first api tries to address the

00:18:19,679 --> 00:18:24,240
a-sync pipe

00:18:21,679 --> 00:18:25,760
async pipe and angular is a mechanism of

00:18:24,240 --> 00:18:27,520
allowing you to use

00:18:25,760 --> 00:18:28,880
observable values directly in the

00:18:27,520 --> 00:18:30,400
template

00:18:28,880 --> 00:18:32,080
but we think that there could be a few

00:18:30,400 --> 00:18:34,000
improvements to the way the async pipe

00:18:32,080 --> 00:18:35,360
works

00:18:34,000 --> 00:18:37,120
so what we're going to do is we're going

00:18:35,360 --> 00:18:38,640
to use a drop in replacement from the

00:18:37,120 --> 00:18:41,679
injects component package

00:18:38,640 --> 00:18:43,679
called ngrx push like i said

00:18:41,679 --> 00:18:44,799
inject push is a drop-in replacement for

00:18:43,679 --> 00:18:46,240
the async pipe

00:18:44,799 --> 00:18:47,840
it's going to do the same thing it's

00:18:46,240 --> 00:18:49,360
going to let you use

00:18:47,840 --> 00:18:50,880
values that are wrapped up in an

00:18:49,360 --> 00:18:53,039
observable

00:18:50,880 --> 00:18:54,080
but it's going to differ in that the

00:18:53,039 --> 00:18:56,640
push pipe

00:18:54,080 --> 00:18:58,799
unlike the async pipe will actually

00:18:56,640 --> 00:19:02,000
schedule change detection for you

00:18:58,799 --> 00:19:04,000
when you push new values through it what

00:19:02,000 --> 00:19:06,080
this means is that if you have modeled

00:19:04,000 --> 00:19:07,600
your application state using observables

00:19:06,080 --> 00:19:09,280
and you rely on the push pipe throughout

00:19:07,600 --> 00:19:11,120
your entire angular app

00:19:09,280 --> 00:19:13,520
there's a chance you could be successful

00:19:11,120 --> 00:19:14,640
in using an angular app without zone.js

00:19:13,520 --> 00:19:16,400
altogether

00:19:14,640 --> 00:19:18,880
because you've modeled your app in such

00:19:16,400 --> 00:19:22,000
a way that you can inform angular

00:19:18,880 --> 00:19:22,799
via an observable api hey my data has

00:19:22,000 --> 00:19:24,559
changed

00:19:22,799 --> 00:19:27,280
and let the push pipe schedule change

00:19:24,559 --> 00:19:27,280
detection for you

00:19:28,400 --> 00:19:31,600
our second api tries to address a

00:19:30,000 --> 00:19:33,520
similar problem

00:19:31,600 --> 00:19:35,120
if you've used the async pipe before you

00:19:33,520 --> 00:19:36,799
may have run to the situation where you

00:19:35,120 --> 00:19:38,559
wanted to use a value

00:19:36,799 --> 00:19:40,320
wrapped up in an observable in multiple

00:19:38,559 --> 00:19:41,919
places through your template

00:19:40,320 --> 00:19:43,520
it leads to some cumbersome syntax

00:19:41,919 --> 00:19:45,200
you're repeating yourself often using

00:19:43,520 --> 00:19:47,280
the async type

00:19:45,200 --> 00:19:48,559
and well angular developers have been a

00:19:47,280 --> 00:19:50,400
little clever and they've found a

00:19:48,559 --> 00:19:52,559
workaround for this

00:19:50,400 --> 00:19:53,840
it turns out you can use ng-if to unwrap

00:19:52,559 --> 00:19:55,280
that value

00:19:53,840 --> 00:19:57,440
and then you can start to use that value

00:19:55,280 --> 00:20:00,080
in your template but this has a com

00:19:57,440 --> 00:20:02,000
a couple of gotchas first if the

00:20:00,080 --> 00:20:03,919
observable you're passing into ngif

00:20:02,000 --> 00:20:06,080
happens to contain a falsie value like

00:20:03,919 --> 00:20:07,200
false or undefined or null that's

00:20:06,080 --> 00:20:08,960
actually going to trigger the other

00:20:07,200 --> 00:20:10,000
behavior of ngf or won't show this

00:20:08,960 --> 00:20:11,679
element at all

00:20:10,000 --> 00:20:13,840
preventing you from using observables

00:20:11,679 --> 00:20:18,000
that might contain these types of values

00:20:13,840 --> 00:20:19,280
this way the second is that ngf doesn't

00:20:18,000 --> 00:20:21,039
let you handle things like the

00:20:19,280 --> 00:20:22,640
completion notification or error

00:20:21,039 --> 00:20:25,280
notification that the observables might

00:20:22,640 --> 00:20:25,280
be giving off

00:20:26,400 --> 00:20:29,840
so that's where ngrx let comes in it's a

00:20:28,799 --> 00:20:32,159
structural directive

00:20:29,840 --> 00:20:34,080
that works kind of like ngf except it's

00:20:32,159 --> 00:20:37,120
not going to show or hide content

00:20:34,080 --> 00:20:38,799
ngrxlut exists just to help you unwrap

00:20:37,120 --> 00:20:40,559
values

00:20:38,799 --> 00:20:42,799
you pass in an observable and then you

00:20:40,559 --> 00:20:44,480
can declare a template variable

00:20:42,799 --> 00:20:46,159
that points to the latest value coming

00:20:44,480 --> 00:20:47,840
out of that observable

00:20:46,159 --> 00:20:49,600
you can then use that in your template

00:20:47,840 --> 00:20:51,360
just as you'd expect

00:20:49,600 --> 00:20:53,200
it has additional hooks for using the

00:20:51,360 --> 00:20:54,640
completion and ar notifications coming

00:20:53,200 --> 00:20:55,919
off the observable that you pass in so

00:20:54,640 --> 00:20:57,919
check out the documentation if you want

00:20:55,919 --> 00:21:00,000
to see the full capabilities of ngrx

00:20:57,919 --> 00:21:00,880
live

00:21:00,000 --> 00:21:03,039
what's really cool about the light

00:21:00,880 --> 00:21:03,679
directive just like the push pipe is

00:21:03,039 --> 00:21:05,200
that

00:21:03,679 --> 00:21:07,679
not only is it going to help you use

00:21:05,200 --> 00:21:09,760
observable values but it too will run

00:21:07,679 --> 00:21:11,280
change detection for you

00:21:09,760 --> 00:21:13,200
so now through a combination of the let

00:21:11,280 --> 00:21:15,039
directive and the push pipe

00:21:13,200 --> 00:21:16,320
we're trying to make it as ergonomic and

00:21:15,039 --> 00:21:17,919
friendly as possible

00:21:16,320 --> 00:21:19,360
for you to use observables in your

00:21:17,919 --> 00:21:21,520
template and

00:21:19,360 --> 00:21:23,440
to hopefully unlock a developer path for

00:21:21,520 --> 00:21:24,720
you to use an alternative change

00:21:23,440 --> 00:21:27,679
detection strategy

00:21:24,720 --> 00:21:27,679
from zone.js

00:21:28,880 --> 00:21:33,200
this is just the beginning for ngrx

00:21:31,600 --> 00:21:35,120
component

00:21:33,200 --> 00:21:36,559
in order to be truly successful we're

00:21:35,120 --> 00:21:37,679
going to start thinking about ways to

00:21:36,559 --> 00:21:40,480
handle things like

00:21:37,679 --> 00:21:42,480
local state or components where you

00:21:40,480 --> 00:21:44,400
maybe don't want to rely on a global

00:21:42,480 --> 00:21:45,919
state management solution like ngrx

00:21:44,400 --> 00:21:47,440
state

00:21:45,919 --> 00:21:49,280
we'll also have some ideas on how to

00:21:47,440 --> 00:21:50,960
expand the ndx component api to make

00:21:49,280 --> 00:21:52,880
even more use cases

00:21:50,960 --> 00:21:55,120
easier to use if you want to do them

00:21:52,880 --> 00:21:55,120
react

00:21:57,200 --> 00:22:00,960
so that's a brief update on state data

00:21:59,919 --> 00:22:02,880
and view

00:22:00,960 --> 00:22:05,440
engineering state continues to be a

00:22:02,880 --> 00:22:06,000
robust enterprise grade state management

00:22:05,440 --> 00:22:08,080
solution

00:22:06,000 --> 00:22:10,000
for angular applications we're

00:22:08,080 --> 00:22:12,080
continuing to improve it by introducing

00:22:10,000 --> 00:22:12,720
new ways for you to build state

00:22:12,080 --> 00:22:14,960
management

00:22:12,720 --> 00:22:16,240
code that is hopefully smaller in code

00:22:14,960 --> 00:22:19,200
size

00:22:16,240 --> 00:22:22,240
more type safe and helps you implement

00:22:19,200 --> 00:22:24,559
the architecture successfully

00:22:22,240 --> 00:22:26,080
ngrx data is our newest collection of

00:22:24,559 --> 00:22:28,960
libraries to help you handle

00:22:26,080 --> 00:22:29,840
things like data retrieval how do you

00:22:28,960 --> 00:22:32,880
get data

00:22:29,840 --> 00:22:33,840
from your api it can play great within

00:22:32,880 --> 00:22:36,559
jrx state

00:22:33,840 --> 00:22:37,520
or you can use it on its own and lastly

00:22:36,559 --> 00:22:38,720
ngrx view

00:22:37,520 --> 00:22:41,120
it's our collection of libraries that

00:22:38,720 --> 00:22:43,120
we're pushing out this year

00:22:41,120 --> 00:22:44,240
it's going to help you use observables

00:22:43,120 --> 00:22:46,720
in your angular templates

00:22:44,240 --> 00:22:48,960
and explore ways to do change detection

00:22:46,720 --> 00:22:50,240
without zone js

00:22:48,960 --> 00:22:51,440
beyond these three projects we've also

00:22:50,240 --> 00:22:52,720
got a fourth one i'm sure you all have

00:22:51,440 --> 00:22:53,919
heard about it a couple of times at the

00:22:52,720 --> 00:22:54,640
conference but i'm going to mention it

00:22:53,919 --> 00:22:56,799
again

00:22:54,640 --> 00:22:57,919
we're holding a conference it's called

00:22:56,799 --> 00:22:59,520
indirect's confidence will be this

00:22:57,919 --> 00:23:02,000
november

00:22:59,520 --> 00:23:03,120
if you're able to do so so definitely

00:23:02,000 --> 00:23:03,919
come check it out it's completely

00:23:03,120 --> 00:23:05,600
community

00:23:03,919 --> 00:23:08,960
organized and we'll be excited to see

00:23:05,600 --> 00:23:10,159
you there so a few thank yous

00:23:08,960 --> 00:23:11,440
thank you to the team for putting

00:23:10,159 --> 00:23:12,880
together all these great releases this

00:23:11,440 --> 00:23:14,400
past year and for continuing to build

00:23:12,880 --> 00:23:16,320
out the platform

00:23:14,400 --> 00:23:17,600
thank you to our sponsors rebugs that

00:23:16,320 --> 00:23:20,480
we're oasis digital

00:23:17,600 --> 00:23:22,080
narwhal lucas rubicky deborah corrada uh

00:23:20,480 --> 00:23:23,520
your financial support has really helped

00:23:22,080 --> 00:23:25,440
our project

00:23:23,520 --> 00:23:27,280
and lastly most importantly thank you to

00:23:25,440 --> 00:23:28,799
our community we really appreciate all

00:23:27,280 --> 00:23:30,159
the value you provide to us whether

00:23:28,799 --> 00:23:31,600
you're creating blog posts sharing

00:23:30,159 --> 00:23:33,440
articles giving talks

00:23:31,600 --> 00:23:34,960
or contributing code you help make

00:23:33,440 --> 00:23:36,480
indirect success

00:23:34,960 --> 00:23:51,440
but with that thank you i hope you have

00:23:36,480 --> 00:23:53,520
a great rest of it

00:23:51,440 --> 00:23:53,520

YouTube URL: https://www.youtube.com/watch?v=PIbyYVSFbcw


