Title: Day 1 Keynote | Jules Kremer & Kara Erickson | ng-conf: Hardwired
Publication date: 2020-05-23
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Jules Kremer and Kara Erickson from the Angular team take the stage to share the latest and greatest changes that their team is working on.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:18,490
[Applause]

00:00:05,920 --> 00:00:21,740
[Music]

00:00:18,490 --> 00:00:24,619
I need the web frameworks team here at

00:00:21,740 --> 00:00:26,570
Google and yeah this is sort of a

00:00:24,619 --> 00:00:28,759
surreal experience and definitely not

00:00:26,570 --> 00:00:32,269
how any of us or myself expected to be

00:00:28,759 --> 00:00:33,949
attending ng comp 20/20 like Darren said

00:00:32,269 --> 00:00:35,120
I'm coming at you from the beautiful

00:00:33,949 --> 00:00:36,860
state of Hawaii

00:00:35,120 --> 00:00:39,980
we're excited I am and still a little

00:00:36,860 --> 00:00:41,839
dark I'm excited to be here today and G

00:00:39,980 --> 00:00:44,449
comp is always one of my favorite days

00:00:41,839 --> 00:00:46,309
of the year and I know that our team

00:00:44,449 --> 00:00:48,350
looks forward to ng-conf every year to

00:00:46,309 --> 00:00:50,180
not because we get to talk about the

00:00:48,350 --> 00:00:51,830
work we've been doing but because we get

00:00:50,180 --> 00:00:54,979
to hang out with all of you and our

00:00:51,830 --> 00:00:56,839
community and so I know I speak for the

00:00:54,979 --> 00:00:59,690
entire team when I say that we all wish

00:00:56,839 --> 00:01:01,430
we could be together in person and first

00:00:59,690 --> 00:01:03,500
I want to extend the team's thanks to

00:01:01,430 --> 00:01:05,720
the ng-conf organizers putting on a

00:01:03,500 --> 00:01:08,090
conference in normal life is super hard

00:01:05,720 --> 00:01:10,070
and changing everything during a global

00:01:08,090 --> 00:01:12,380
pandemic to pull this off online it's

00:01:10,070 --> 00:01:14,119
just no small feat so we are so grateful

00:01:12,380 --> 00:01:16,369
for your effort I know a bunch of you

00:01:14,119 --> 00:01:18,350
stayed up all night last night and from

00:01:16,369 --> 00:01:19,659
our hearts thank you thank you thank you

00:01:18,350 --> 00:01:22,369
for all the work you've done

00:01:19,659 --> 00:01:23,869
it's also been super hard to figure out

00:01:22,369 --> 00:01:25,579
what to say today during what is an

00:01:23,869 --> 00:01:27,590
extraordinary time in our world and

00:01:25,579 --> 00:01:29,899
we're all dealing with Kovan 19 and the

00:01:27,590 --> 00:01:32,390
impact it's having on our families and

00:01:29,899 --> 00:01:34,759
our communities and the angular team is

00:01:32,390 --> 00:01:36,649
no exception we along with all of our

00:01:34,759 --> 00:01:38,270
Google peers have been spending the past

00:01:36,649 --> 00:01:41,030
month shifting to a new way of working

00:01:38,270 --> 00:01:42,530
where we're working fully remote we've

00:01:41,030 --> 00:01:45,770
been getting our home offices set up

00:01:42,530 --> 00:01:47,749
some of us are working in an office some

00:01:45,770 --> 00:01:49,579
of us are working from their garage and

00:01:47,749 --> 00:01:52,429
others are working from the front seat

00:01:49,579 --> 00:01:54,409
of their car in their garage and our

00:01:52,429 --> 00:01:56,060
priority over the past month has been to

00:01:54,409 --> 00:01:58,130
figure out this new way of working and

00:01:56,060 --> 00:02:00,700
figure out how we collaborate within our

00:01:58,130 --> 00:02:03,289
team as well as across Google

00:02:00,700 --> 00:02:04,969
unfortunately the angular team has a lot

00:02:03,289 --> 00:02:07,490
of experience as a distributed team

00:02:04,969 --> 00:02:09,530
we've always had team members and

00:02:07,490 --> 00:02:11,390
contributors that live across the globe

00:02:09,530 --> 00:02:14,630
and we have many tools that support

00:02:11,390 --> 00:02:16,069
virtual work like slack and github so

00:02:14,630 --> 00:02:18,830
all in all we've been doing pretty well

00:02:16,069 --> 00:02:22,160
and we even released angular version 9.1

00:02:18,830 --> 00:02:24,140
last week personally I've been enjoying

00:02:22,160 --> 00:02:25,730
getting to see all the home cooks Fiat

00:02:24,140 --> 00:02:26,040
food that Googlers make since they're

00:02:25,730 --> 00:02:29,700
stuck

00:02:26,040 --> 00:02:31,260
home meeting the babies kids houses pets

00:02:29,700 --> 00:02:33,420
and roommates who join our meetings

00:02:31,260 --> 00:02:35,099
sometimes they join on purpose and

00:02:33,420 --> 00:02:38,819
there's been a few times that it's been

00:02:35,099 --> 00:02:40,230
completely by accident but we also have

00:02:38,819 --> 00:02:42,480
team members dealing with kids home from

00:02:40,230 --> 00:02:44,459
school illness or supporting their

00:02:42,480 --> 00:02:45,959
families and communities and we have

00:02:44,459 --> 00:02:48,450
some team members that are working on

00:02:45,959 --> 00:02:50,970
code 19 related projects at Google as

00:02:48,450 --> 00:02:52,310
well as in our open source community the

00:02:50,970 --> 00:02:55,920
times that we're facing are

00:02:52,310 --> 00:02:57,989
unprecedented and I'm encouraging all of

00:02:55,920 --> 00:03:01,590
us to prioritize the time we need for

00:02:57,989 --> 00:03:03,120
ourselves and our families I also want

00:03:01,590 --> 00:03:04,919
to thank the team for showing up every

00:03:03,120 --> 00:03:07,859
day during this crazy time and doing

00:03:04,919 --> 00:03:09,150
hard work as well as the community for

00:03:07,859 --> 00:03:11,700
coming together and getting involved

00:03:09,150 --> 00:03:13,680
we've seen just an explosion of

00:03:11,700 --> 00:03:16,109
collaboration between our contractors

00:03:13,680 --> 00:03:18,750
our contributors community leaders

00:03:16,109 --> 00:03:21,389
Meetup and event organizers and our gde

00:03:18,750 --> 00:03:23,459
team we're literally seeing the best of

00:03:21,389 --> 00:03:25,769
humanity come out we thank each of you

00:03:23,459 --> 00:03:28,159
for supporting each other supporting our

00:03:25,769 --> 00:03:30,780
team and angular itself

00:03:28,159 --> 00:03:32,099
so normally eyes be up on stage I'd have

00:03:30,780 --> 00:03:33,900
paid way more attention to what I'm

00:03:32,099 --> 00:03:36,180
wearing and I'd give you a bunch of

00:03:33,900 --> 00:03:38,430
updates and metrics but somehow today

00:03:36,180 --> 00:03:40,199
that just doesn't feel right with the

00:03:38,430 --> 00:03:42,180
world upside down and all of us behind

00:03:40,199 --> 00:03:44,250
these computer screens now more than

00:03:42,180 --> 00:03:46,889
ever it's important for us to connect as

00:03:44,250 --> 00:03:48,810
humans so today instead of doing all

00:03:46,889 --> 00:03:50,639
those updates and metrics I'm gonna

00:03:48,810 --> 00:03:52,979
share a little bit about more more about

00:03:50,639 --> 00:03:56,790
me why I'm here and what I've been up to

00:03:52,979 --> 00:04:00,239
at Google so I first joined the angular

00:03:56,790 --> 00:04:02,790
team back in 2015 as the leader for our

00:04:00,239 --> 00:04:04,530
developer relations team I was super

00:04:02,790 --> 00:04:06,870
excited by what I saw in angular and how

00:04:04,530 --> 00:04:08,939
companies could benefit from it as a

00:04:06,870 --> 00:04:10,590
Deverell person I spent most of my time

00:04:08,939 --> 00:04:12,419
listening and talking to the community

00:04:10,590 --> 00:04:14,819
and then taking everything I learned

00:04:12,419 --> 00:04:18,000
from all of you and influencing angular

00:04:14,819 --> 00:04:21,120
product direction after clears on the

00:04:18,000 --> 00:04:23,099
team I took a break to guide my children

00:04:21,120 --> 00:04:25,590
through the end of their high school to

00:04:23,099 --> 00:04:28,380
graduation and then off to college and

00:04:25,590 --> 00:04:30,720
just as I found myself facing empty-nest

00:04:28,380 --> 00:04:32,310
I unexpectedly had the opportunity to

00:04:30,720 --> 00:04:34,950
come back and lead Google's web

00:04:32,310 --> 00:04:38,370
framework efforts I had this opportunity

00:04:34,950 --> 00:04:40,200
to bring the angular team and our

00:04:38,370 --> 00:04:43,620
internal framework team named

00:04:40,200 --> 00:04:45,900
Wiz together and I looked at that chance

00:04:43,620 --> 00:04:47,790
it seemed like the perfect timing in my

00:04:45,900 --> 00:04:49,830
life to take on this leadership role as

00:04:47,790 --> 00:04:52,320
these two amazing kids of mine ventured

00:04:49,830 --> 00:04:53,910
off into the world and although he's

00:04:52,320 --> 00:04:56,280
gonna be angry with me in about two

00:04:53,910 --> 00:04:58,680
seconds I can't help but give a shout

00:04:56,280 --> 00:05:00,690
out to my son Gavin we were supposed to

00:04:58,680 --> 00:05:02,340
be attending ng comp together this year

00:05:00,690 --> 00:05:07,350
so hi honey

00:05:02,340 --> 00:05:09,120
call your mom as a leader my focus is on

00:05:07,350 --> 00:05:10,980
understanding the team's overall health

00:05:09,120 --> 00:05:13,560
and how to best serve our developer

00:05:10,980 --> 00:05:16,200
users both internal and external to

00:05:13,560 --> 00:05:18,030
Google and I'm a firm believer that as a

00:05:16,200 --> 00:05:21,690
leader the most important things that I

00:05:18,030 --> 00:05:24,000
can do are to listen observe and ask

00:05:21,690 --> 00:05:25,650
questions and while I was familiar with

00:05:24,000 --> 00:05:27,510
angular and I knew most of the people on

00:05:25,650 --> 00:05:29,940
the team I needed to find out what I

00:05:27,510 --> 00:05:32,610
didn't know when I returned and I needed

00:05:29,940 --> 00:05:34,680
to form a fresh new perspective so I

00:05:32,610 --> 00:05:36,360
held listening sessions and I observed

00:05:34,680 --> 00:05:38,520
the cadence and culture of our meetings

00:05:36,360 --> 00:05:40,440
I took a look at how our planning works

00:05:38,520 --> 00:05:43,140
and how the team was thinking about

00:05:40,440 --> 00:05:45,600
product strategy I wanted to understand

00:05:43,140 --> 00:05:48,630
angular its community where it had been

00:05:45,600 --> 00:05:50,040
and where it was going my laptop often

00:05:48,630 --> 00:05:52,920
looked like this at the end of every day

00:05:50,040 --> 00:05:56,010
covered in notes and reminders of things

00:05:52,920 --> 00:05:57,360
I'd seen or heard during the day and so

00:05:56,010 --> 00:05:58,860
while the team was working on getting

00:05:57,360 --> 00:06:00,540
angular version 9 released

00:05:58,860 --> 00:06:04,170
I began charting a course for what would

00:06:00,540 --> 00:06:06,090
come next in addition to all of our

00:06:04,170 --> 00:06:08,100
technical goals and our product goals

00:06:06,090 --> 00:06:10,350
one an important story that kept coming

00:06:08,100 --> 00:06:12,180
up was that our leads were wearing just

00:06:10,350 --> 00:06:13,800
too many hats they could be great tech

00:06:12,180 --> 00:06:16,170
leaders or they could be great

00:06:13,800 --> 00:06:20,340
engineering managers but trying to be

00:06:16,170 --> 00:06:23,850
both was a near impossible task this is

00:06:20,340 --> 00:06:25,410
Jen she is an experienced engineering

00:06:23,850 --> 00:06:28,140
manager who is joining us from the Wiz

00:06:25,410 --> 00:06:29,820
team jen has years of practice building

00:06:28,140 --> 00:06:32,010
and developing great teams inside of

00:06:29,820 --> 00:06:33,690
Google she's bringing new ideas on how

00:06:32,010 --> 00:06:34,920
we collaborate with each other and how

00:06:33,690 --> 00:06:37,050
we learned from each other

00:06:34,920 --> 00:06:38,940
jen has already rebooted the planning

00:06:37,050 --> 00:06:40,530
efforts for our next versions and has

00:06:38,940 --> 00:06:42,510
set her sights on how we have more

00:06:40,530 --> 00:06:44,910
transparency in our roadmap to all of

00:06:42,510 --> 00:06:46,440
you jen is just getting started and I'm

00:06:44,910 --> 00:06:49,590
looking forward to all of you getting to

00:06:46,440 --> 00:06:52,290
know her we've made some other important

00:06:49,590 --> 00:06:53,670
investments for angular we know how

00:06:52,290 --> 00:06:55,800
critical documentation

00:06:53,670 --> 00:06:58,320
to understanding angular so we recently

00:06:55,800 --> 00:07:00,180
hired a lead technical writer they'll be

00:06:58,320 --> 00:07:01,770
focused on making angular easier to

00:07:00,180 --> 00:07:03,300
learn and they'll be working with

00:07:01,770 --> 00:07:05,100
angular writers in our community that

00:07:03,300 --> 00:07:07,290
you might already you know like muna

00:07:05,100 --> 00:07:09,060
Halley and we're working with product

00:07:07,290 --> 00:07:10,800
management to better understand the web

00:07:09,060 --> 00:07:13,500
framework space as well as how

00:07:10,800 --> 00:07:15,090
developers use web frameworks and a new

00:07:13,500 --> 00:07:17,430
collaboration we're initiating with our

00:07:15,090 --> 00:07:19,230
data science team is teaching us ways to

00:07:17,430 --> 00:07:20,790
understand data signals and then

00:07:19,230 --> 00:07:23,730
incorporate those into our overall

00:07:20,790 --> 00:07:25,380
planning all of these things were doing

00:07:23,730 --> 00:07:27,300
and are focused on ensuring that we

00:07:25,380 --> 00:07:32,190
build an angular that works for everyone

00:07:27,300 --> 00:07:34,680
and sparks a little joy so just as we

00:07:32,190 --> 00:07:36,330
did with the core team Jen and I want to

00:07:34,680 --> 00:07:37,920
take a hard look at angular from the

00:07:36,330 --> 00:07:40,110
ground up and in every direction and

00:07:37,920 --> 00:07:42,990
that includes the community so we want

00:07:40,110 --> 00:07:44,460
to listen to your stories as well we

00:07:42,990 --> 00:07:46,440
heard that you want to contribute to

00:07:44,460 --> 00:07:49,020
angular and that's not so easy to do

00:07:46,440 --> 00:07:50,550
today we heard that the volume of issues

00:07:49,020 --> 00:07:53,160
makes it challenging for you to

00:07:50,550 --> 00:07:55,290
understand when a change you might care

00:07:53,160 --> 00:07:56,640
about is coming and we heard that you

00:07:55,290 --> 00:07:59,760
want a closer relationship with the

00:07:56,640 --> 00:08:01,350
project overall so in the coming months

00:07:59,760 --> 00:08:03,390
we'll be working on ways to build these

00:08:01,350 --> 00:08:05,520
connections and we're going to start

00:08:03,390 --> 00:08:07,560
today with our survey so if you haven't

00:08:05,520 --> 00:08:09,630
had a chance to take our 2020 survey

00:08:07,560 --> 00:08:11,700
invite you to do so now maybe not now

00:08:09,630 --> 00:08:15,510
wait until after an ng call for during

00:08:11,700 --> 00:08:17,430
the break one of the reasons that I was

00:08:15,510 --> 00:08:18,810
drawn to the angular originally was

00:08:17,430 --> 00:08:20,850
because of my background in the

00:08:18,810 --> 00:08:22,350
enterprise space I spent the majority of

00:08:20,850 --> 00:08:25,140
my career here building enterprise

00:08:22,350 --> 00:08:26,610
software when I was a new mom I was a

00:08:25,140 --> 00:08:29,040
software engineer building enterprise

00:08:26,610 --> 00:08:30,960
solutions when I returned to work full

00:08:29,040 --> 00:08:34,620
time I worked at Microsoft as an

00:08:30,960 --> 00:08:35,790
enterprise developer strategist and in

00:08:34,620 --> 00:08:37,860
my first role at Google

00:08:35,790 --> 00:08:40,200
I led enterprise strategies just as

00:08:37,860 --> 00:08:42,570
technology was moving to the web and

00:08:40,200 --> 00:08:45,240
this experience has led me to hold a

00:08:42,570 --> 00:08:47,130
strongly held belief which is that

00:08:45,240 --> 00:08:49,560
Google is just another enterprise for

00:08:47,130 --> 00:08:52,050
angular or enterprise customer for

00:08:49,560 --> 00:08:53,970
angular Google developers build the same

00:08:52,050 --> 00:08:56,160
types of apps that you all build they

00:08:53,970 --> 00:08:57,870
build consumer based apps small apps

00:08:56,160 --> 00:09:00,210
that grow to medium apps that grow to

00:08:57,870 --> 00:09:01,950
large apps some of those apps are on the

00:09:00,210 --> 00:09:04,560
public Internet others are behind a

00:09:01,950 --> 00:09:05,830
firewall some have large development

00:09:04,560 --> 00:09:08,680
teams and others are

00:09:05,830 --> 00:09:10,120
by just a handful of people some apps

00:09:08,680 --> 00:09:12,280
are in maintenance mode with all the

00:09:10,120 --> 00:09:15,130
complexity of a legacy code base and all

00:09:12,280 --> 00:09:16,840
the demands of new features and while

00:09:15,130 --> 00:09:18,610
Google engineers might use a slightly

00:09:16,840 --> 00:09:21,400
different tool chain or deploy slightly

00:09:18,610 --> 00:09:23,380
differently the use cases are primarily

00:09:21,400 --> 00:09:25,570
the same and so there's this

00:09:23,380 --> 00:09:27,310
intersection of concerns and it is in

00:09:25,570 --> 00:09:30,610
this intersection that we will be

00:09:27,310 --> 00:09:35,430
focusing on so that what helps Google

00:09:30,610 --> 00:09:37,810
helps the community and vice versa

00:09:35,430 --> 00:09:40,600
angular is now part of an organization

00:09:37,810 --> 00:09:41,770
called core developer at Korda were

00:09:40,600 --> 00:09:43,750
focused on building the best

00:09:41,770 --> 00:09:45,250
infrastructure for Google engineers and

00:09:43,750 --> 00:09:47,680
we are committed to the open source

00:09:45,250 --> 00:09:50,290
projects in our portfolio which includes

00:09:47,680 --> 00:09:52,510
angular our leadership team is very

00:09:50,290 --> 00:09:55,090
invested in angular success we have a

00:09:52,510 --> 00:09:56,650
brand new VP Michael he's so excited

00:09:55,090 --> 00:09:59,080
about angular that when we launched a

00:09:56,650 --> 00:10:01,710
blog post I can count the minutes until

00:09:59,080 --> 00:10:04,660
I have an email in my inbox from him

00:10:01,710 --> 00:10:06,640
near the end of last year we announced

00:10:04,660 --> 00:10:09,040
that there were more than 1500 projects

00:10:06,640 --> 00:10:11,560
using angular at Google today this

00:10:09,040 --> 00:10:13,540
number is over 2,000 and given powers

00:10:11,560 --> 00:10:15,910
many great experiences both inside and

00:10:13,540 --> 00:10:17,620
outside the company we're continuing to

00:10:15,910 --> 00:10:21,010
work with teams like Google Analytics

00:10:17,620 --> 00:10:23,410
firebase and Google cloud to work on new

00:10:21,010 --> 00:10:25,690
features and we have seen tremendous

00:10:23,410 --> 00:10:29,170
success since we landed angular version

00:10:25,690 --> 00:10:30,940
9 externally more than 10,000 public

00:10:29,170 --> 00:10:32,830
domains have already adopted the latest

00:10:30,940 --> 00:10:34,630
version of angular and we continue to

00:10:32,830 --> 00:10:37,600
see success with our strategy of making

00:10:34,630 --> 00:10:40,360
updates easy on the eve of the release

00:10:37,600 --> 00:10:45,070
of 9.0 most public apps were already

00:10:40,360 --> 00:10:46,840
using the latest version since 2018

00:10:45,070 --> 00:10:48,700
we've been serving thousands of

00:10:46,840 --> 00:10:51,400
developers about angular and while that

00:10:48,700 --> 00:10:53,020
20/20 survey isn't quite closed yet it

00:10:51,400 --> 00:10:54,760
looks like we've continued the positive

00:10:53,020 --> 00:10:58,440
trend with developer satisfaction

00:10:54,760 --> 00:11:01,630
increasing 31% over the past two years

00:10:58,440 --> 00:11:03,190
I joined angular originally because I

00:11:01,630 --> 00:11:04,720
was excited to work with a team who

00:11:03,190 --> 00:11:07,360
understood that engineers outside of

00:11:04,720 --> 00:11:09,160
Google mattered I rejoined the angular

00:11:07,360 --> 00:11:11,020
team because I was excited to have the

00:11:09,160 --> 00:11:13,570
opportunity to not only leave the team

00:11:11,020 --> 00:11:15,370
but to be back here with all of you this

00:11:13,570 --> 00:11:18,070
amazing community that treats each other

00:11:15,370 --> 00:11:19,209
like family I've seen proof of that over

00:11:18,070 --> 00:11:20,920
the past month

00:11:19,209 --> 00:11:23,949
we face this crisis in the world as

00:11:20,920 --> 00:11:27,040
we've moved ng Kampf online and in so

00:11:23,949 --> 00:11:28,209
many other ways and as our team goes

00:11:27,040 --> 00:11:30,879
through this time of growth and

00:11:28,209 --> 00:11:32,679
evolution I know that we need all of you

00:11:30,879 --> 00:11:34,899
on this journey with us and that

00:11:32,679 --> 00:11:38,769
together we're gonna be more than fine

00:11:34,899 --> 00:11:39,959
we are going to be freaking awesome so

00:11:38,769 --> 00:11:42,579
thank you for your time this morning

00:11:39,959 --> 00:11:44,920
thank you for being here with us thank

00:11:42,579 --> 00:11:46,629
you for believing in all of us and now

00:11:44,920 --> 00:11:48,399
I'm gonna hand it over to Kara Erickson

00:11:46,629 --> 00:11:50,139
who's the technical lead for angular

00:11:48,399 --> 00:11:56,139
framework and she'll be going deeper

00:11:50,139 --> 00:11:59,740
into angular version 9 Kara um ok great

00:11:56,139 --> 00:12:02,259
bye so hello everyone I'm Kara as I

00:11:59,740 --> 00:12:05,040
mentioned and I'm here to tell everybody

00:12:02,259 --> 00:12:08,920
about what's new and angular version 9

00:12:05,040 --> 00:12:11,139
so version 9 came out on February 6th of

00:12:08,920 --> 00:12:13,990
this year there is a lot to be excited

00:12:11,139 --> 00:12:15,189
about with this latest major and today

00:12:13,990 --> 00:12:16,899
I'll be giving you a tour of the

00:12:15,189 --> 00:12:20,079
features that I'm most excited about for

00:12:16,899 --> 00:12:22,899
version 9 and you may have noticed that

00:12:20,079 --> 00:12:25,149
our version 9.1 release also went out

00:12:22,899 --> 00:12:28,059
last week so I'll be discussing some of

00:12:25,149 --> 00:12:32,379
the features that are in 9.1 as well so

00:12:28,059 --> 00:12:34,869
let's get started so one of the biggest

00:12:32,379 --> 00:12:37,720
features in version 9 is the release of

00:12:34,869 --> 00:12:40,360
ivy if you haven't heard of ivy it's the

00:12:37,720 --> 00:12:42,279
new rendering engine for angular and it

00:12:40,360 --> 00:12:45,189
was released in preview mode in version

00:12:42,279 --> 00:12:49,299
8 in version 9 we've made it the default

00:12:45,189 --> 00:12:51,730
experience we are over the moon the ivy

00:12:49,299 --> 00:12:53,920
is finally out it represents a huge

00:12:51,730 --> 00:12:55,839
effort from the angular team given that

00:12:53,920 --> 00:12:58,449
we had to rewrite both the compiler and

00:12:55,839 --> 00:12:59,799
the runtime completely from scratch to

00:12:58,449 --> 00:13:01,839
get the characteristics that we wanted

00:12:59,799 --> 00:13:04,649
and to do it in a way that was as

00:13:01,839 --> 00:13:07,299
backwards compatible as humanly possible

00:13:04,649 --> 00:13:10,029
we've essentially spent the last year

00:13:07,299 --> 00:13:12,129
polishing and grooming ivy to cover all

00:13:10,029 --> 00:13:14,470
the corner cases because we really we

00:13:12,129 --> 00:13:16,089
care deeply that the update experience

00:13:14,470 --> 00:13:19,299
is as seamless as possible for angular

00:13:16,089 --> 00:13:22,540
developers so this was undoubtedly a big

00:13:19,299 --> 00:13:25,509
project but we were willing to invest

00:13:22,540 --> 00:13:27,069
the time to get it right because it came

00:13:25,509 --> 00:13:29,709
out of things that we were hearing

00:13:27,069 --> 00:13:31,779
developers wanted we were hearing that

00:13:29,709 --> 00:13:32,470
developers wanted smaller bundle sizes

00:13:31,779 --> 00:13:34,090
so that they

00:13:32,470 --> 00:13:36,450
have better startup performance and

00:13:34,090 --> 00:13:38,740
could keep their users engaged that way

00:13:36,450 --> 00:13:41,200
we were hearing the developers wanted

00:13:38,740 --> 00:13:43,270
apps that were speedy to develop so that

00:13:41,200 --> 00:13:46,060
they could have faster compilation times

00:13:43,270 --> 00:13:48,370
for building and testing and they wanted

00:13:46,060 --> 00:13:50,170
code bases that were easy to debug and

00:13:48,370 --> 00:13:54,700
maintain over time especially as their

00:13:50,170 --> 00:13:56,680
code bases started to grow so the ivy

00:13:54,700 --> 00:14:00,340
project was designed to address some of

00:13:56,680 --> 00:14:02,890
these concerns and now that ivy is out

00:14:00,340 --> 00:14:04,960
I'd like to discuss some of the benefits

00:14:02,890 --> 00:14:08,740
of Ivy as they relate to our original

00:14:04,960 --> 00:14:13,120
goals to make angular smaller faster and

00:14:08,740 --> 00:14:16,540
simpler our first goal was to make

00:14:13,120 --> 00:14:19,360
angular smaller and we had a few

00:14:16,540 --> 00:14:20,920
different strategies for doing this the

00:14:19,360 --> 00:14:23,590
first was to make the framework more

00:14:20,920 --> 00:14:26,110
compatible with tree-shaking so in

00:14:23,590 --> 00:14:29,470
previous versions of angular we had many

00:14:26,110 --> 00:14:31,090
core functions that would reference each

00:14:29,470 --> 00:14:33,460
other in the critical path for

00:14:31,090 --> 00:14:35,680
bootstrapping and this made it difficult

00:14:33,460 --> 00:14:37,240
for tree-shaking tools like tercer to

00:14:35,680 --> 00:14:39,610
remove framework code that the app

00:14:37,240 --> 00:14:41,860
wasn't actually using because of all the

00:14:39,610 --> 00:14:43,570
references it had to assume that the

00:14:41,860 --> 00:14:46,810
functions were being used and retained

00:14:43,570 --> 00:14:49,500
them in the final bundle with ivy

00:14:46,810 --> 00:14:51,940
instead of having the critical path

00:14:49,500 --> 00:14:54,400
referencing all of the functions instead

00:14:51,940 --> 00:14:56,440
we had the compiler generate only the

00:14:54,400 --> 00:14:59,110
functions that you needed and this

00:14:56,440 --> 00:15:02,710
removed the references that were causing

00:14:59,110 --> 00:15:04,060
unused code paths to be retained so that

00:15:02,710 --> 00:15:06,100
allowed tree-shaking to work as it was

00:15:04,060 --> 00:15:09,280
supposed to work so that was our first

00:15:06,100 --> 00:15:11,620
strategy and this feature is going to

00:15:09,280 --> 00:15:13,210
have the most benefit for apps that

00:15:11,620 --> 00:15:15,160
aren't using the full feature set of

00:15:13,210 --> 00:15:16,330
angular and because obviously then you

00:15:15,160 --> 00:15:18,760
can remove the things that you're not

00:15:16,330 --> 00:15:21,850
using but it also paves the way for

00:15:18,760 --> 00:15:23,440
additional features down the road so

00:15:21,850 --> 00:15:25,780
that we can allow for even tinier bundle

00:15:23,440 --> 00:15:31,180
sizes for things like angular elements

00:15:25,780 --> 00:15:32,740
and um you know use cases like that our

00:15:31,180 --> 00:15:35,530
second strategy producing the bundle

00:15:32,740 --> 00:15:38,800
size was to be more conservative with

00:15:35,530 --> 00:15:43,090
how we generated code so when I say code

00:15:38,800 --> 00:15:45,329
generation what do I mean so when you

00:15:43,090 --> 00:15:47,129
compile your application with angular

00:15:45,329 --> 00:15:50,339
the compiler will analyze all of your

00:15:47,129 --> 00:15:52,759
components and it will generate among

00:15:50,339 --> 00:15:55,290
other things a function that represents

00:15:52,759 --> 00:15:56,610
the templates that you've written or the

00:15:55,290 --> 00:16:00,920
template that you've written for each

00:15:56,610 --> 00:16:03,119
component and then I runtime these

00:16:00,920 --> 00:16:05,549
template functions will execute which

00:16:03,119 --> 00:16:08,429
will cause your application to render if

00:16:05,549 --> 00:16:11,309
we didn't have this separate compilation

00:16:08,429 --> 00:16:13,649
step what it would mean is that we'd

00:16:11,309 --> 00:16:15,629
have to do all of that analysis that of

00:16:13,649 --> 00:16:17,369
your templates at runtime instead of at

00:16:15,629 --> 00:16:20,100
compile time so you can think of

00:16:17,369 --> 00:16:22,829
compilation or code gen as a way for the

00:16:20,100 --> 00:16:24,540
compiler to pre analyze your components

00:16:22,829 --> 00:16:27,059
in your application and send that

00:16:24,540 --> 00:16:32,189
analysis data to the runtime in the form

00:16:27,059 --> 00:16:34,470
of generated code so the more code that

00:16:32,189 --> 00:16:36,869
you can generate from this analysis the

00:16:34,470 --> 00:16:39,059
more the runtime can actually skip doing

00:16:36,869 --> 00:16:41,269
that same processing at critical loading

00:16:39,059 --> 00:16:43,559
times so there is a trade-off between

00:16:41,269 --> 00:16:45,629
the amount of code that you generate and

00:16:43,559 --> 00:16:48,869
the amount of processing that you do at

00:16:45,629 --> 00:16:50,910
runtime so one way that we were able to

00:16:48,869 --> 00:16:53,100
reduce the generated code is by tweaking

00:16:50,910 --> 00:16:55,739
where we are kind of on this spectrum

00:16:53,100 --> 00:16:58,499
and so if we push a little bit of

00:16:55,739 --> 00:17:01,290
processing to the runtime we can remove

00:16:58,499 --> 00:17:03,389
some of the generated code and it's

00:17:01,290 --> 00:17:05,490
possible for us to do this because with

00:17:03,389 --> 00:17:07,679
IBB also introduced a number of

00:17:05,490 --> 00:17:10,169
performance improvements to the runtime

00:17:07,679 --> 00:17:12,299
as well so we introduced more aggressive

00:17:10,169 --> 00:17:17,039
caching of some of the processing data

00:17:12,299 --> 00:17:18,449
we're more conservative about how we you

00:17:17,039 --> 00:17:20,699
know we're cutting down an extraneous

00:17:18,449 --> 00:17:22,470
property reads especially metamorphic

00:17:20,699 --> 00:17:24,959
ones and because of these performance

00:17:22,470 --> 00:17:27,449
improvements we could offset the cost of

00:17:24,959 --> 00:17:29,659
doing more processing at runtime and

00:17:27,449 --> 00:17:32,399
reduce the size of the generated code

00:17:29,659 --> 00:17:34,139
we've also had a bunch of you know with

00:17:32,399 --> 00:17:36,750
a long tail of smaller optimizations

00:17:34,139 --> 00:17:38,100
like for example method chaining so we

00:17:36,750 --> 00:17:41,519
didn't have to duplicate method names

00:17:38,100 --> 00:17:44,880
grouping together and similar

00:17:41,519 --> 00:17:47,730
instructions things like that reducing

00:17:44,880 --> 00:17:50,909
the size of property names that couldn't

00:17:47,730 --> 00:17:55,710
be mangled but all in all we were able

00:17:50,909 --> 00:17:57,720
to save about 30% for each component so

00:17:55,710 --> 00:17:58,890
apps with lots of components are gonna

00:17:57,720 --> 00:18:00,870
see the most benefit from there

00:17:58,890 --> 00:18:04,440
because for every component that they

00:18:00,870 --> 00:18:11,130
have they'll be saving around 30% on the

00:18:04,440 --> 00:18:13,350
generated code so we were happy to see

00:18:11,130 --> 00:18:15,780
the results in the wild for some of

00:18:13,350 --> 00:18:17,760
these changes that we made for smaller

00:18:15,780 --> 00:18:20,150
apps that could benefit from tree

00:18:17,760 --> 00:18:23,250
shaking we saw about a 30% improvement

00:18:20,150 --> 00:18:26,160
for larger apps that could benefit from

00:18:23,250 --> 00:18:27,960
the coach and reduction we saw about 25

00:18:26,160 --> 00:18:31,050
to 40 percent improvement depending on

00:18:27,960 --> 00:18:34,230
your specific app and then for more

00:18:31,050 --> 00:18:36,240
moderately sized apps we're seeing kind

00:18:34,230 --> 00:18:38,640
of a flawed or diff because the benefits

00:18:36,240 --> 00:18:41,910
are being offset by a slightly larger

00:18:38,640 --> 00:18:43,170
fixed framework size and this fixed size

00:18:41,910 --> 00:18:45,210
is something that we can continue to

00:18:43,170 --> 00:18:49,070
reduce over time it's just a longer time

00:18:45,210 --> 00:18:51,330
frame to make some of those changes um

00:18:49,070 --> 00:18:54,630
yeah so we're really excited about this

00:18:51,330 --> 00:18:57,210
results it means you know a better

00:18:54,630 --> 00:18:59,010
startup experience for users which means

00:18:57,210 --> 00:19:03,810
more conversions for application authors

00:18:59,010 --> 00:19:05,910
so everyone is happy and I'm just here's

00:19:03,810 --> 00:19:08,340
some example of some of the feedback

00:19:05,910 --> 00:19:09,810
that we got from developers after

00:19:08,340 --> 00:19:13,350
version I am it out this is from hacker

00:19:09,810 --> 00:19:15,960
news someone says I just updated my

00:19:13,350 --> 00:19:17,910
mid-sized app from version 8.2 to

00:19:15,960 --> 00:19:22,170
version 9 with Ivy and the total es2015

00:19:17,910 --> 00:19:25,260
bundle size decreased from 973 KB to 669

00:19:22,170 --> 00:19:28,110
Kb and over 31% improvement with no

00:19:25,260 --> 00:19:31,410
effort on my part so the critical part

00:19:28,110 --> 00:19:33,720
to see here is the quote no effort this

00:19:31,410 --> 00:19:35,100
is one of our most important goals is

00:19:33,720 --> 00:19:36,690
just to make angular better without

00:19:35,100 --> 00:19:38,400
causing any extra work for anglish

00:19:36,690 --> 00:19:42,990
helpers so we were really excited to see

00:19:38,400 --> 00:19:47,790
this okay so our second goal was to make

00:19:42,990 --> 00:19:49,140
angular faster and by faster one of the

00:19:47,790 --> 00:19:50,850
things that we wanted to improve was

00:19:49,140 --> 00:19:52,740
build speed we were hearing from

00:19:50,850 --> 00:19:55,260
developers that you know as their apps

00:19:52,740 --> 00:19:57,120
got larger the build speed just wasn't

00:19:55,260 --> 00:19:59,220
as fast as they would like it to be um

00:19:57,120 --> 00:20:03,510
so we had a few strategies for improving

00:19:59,220 --> 00:20:05,700
the build speed the first one was simply

00:20:03,510 --> 00:20:09,630
asking the compiler to do a little bit

00:20:05,700 --> 00:20:10,650
less work so in the previous compiler we

00:20:09,630 --> 00:20:12,450
would always compile the application

00:20:10,650 --> 00:20:14,340
along with its

00:20:12,450 --> 00:20:17,340
tendencies so any libraries that it was

00:20:14,340 --> 00:20:18,540
using and this is kind of wasteful right

00:20:17,340 --> 00:20:20,340
because as you're making changes to your

00:20:18,540 --> 00:20:22,620
application your dependencies aren't

00:20:20,340 --> 00:20:25,080
likely changing as often unless you're

00:20:22,620 --> 00:20:28,410
continually re npm installing and

00:20:25,080 --> 00:20:30,060
changing your versions but we would

00:20:28,410 --> 00:20:31,800
still recompile your dependencies every

00:20:30,060 --> 00:20:34,770
time we recompile your application so

00:20:31,800 --> 00:20:37,620
that was a little slower than it needs

00:20:34,770 --> 00:20:39,540
to be so with Ivy we introduced a tool

00:20:37,620 --> 00:20:42,510
called an GCC or the angular

00:20:39,540 --> 00:20:44,190
compatibility compiler and this is a

00:20:42,510 --> 00:20:47,670
separate tool that we use to compile

00:20:44,190 --> 00:20:51,510
dependencies and so with Ivy what we're

00:20:47,670 --> 00:20:53,940
doing is we're only compiling your

00:20:51,510 --> 00:20:57,330
dependencies when necessary so we can

00:20:53,940 --> 00:20:58,650
kind of cache that data so as you're

00:20:57,330 --> 00:21:00,180
developing your application and you're

00:20:58,650 --> 00:21:01,980
changing your app code we're only

00:21:00,180 --> 00:21:03,480
recompiling your application and we're

00:21:01,980 --> 00:21:05,730
not continually recompiling your

00:21:03,480 --> 00:21:11,670
dependencies as well so that makes the

00:21:05,730 --> 00:21:14,070
build faster another strategy it had to

00:21:11,670 --> 00:21:16,890
do with removing the neeps who operate

00:21:14,070 --> 00:21:20,910
on JSON so this is kind of low-level but

00:21:16,890 --> 00:21:23,130
basically with the old compiler we were

00:21:20,910 --> 00:21:26,370
getting our two sources of data that had

00:21:23,130 --> 00:21:27,510
two different formats so we had your you

00:21:26,370 --> 00:21:29,220
know application components that were

00:21:27,510 --> 00:21:32,630
written in typescript and then we had

00:21:29,220 --> 00:21:35,130
your any libraries lorac was using and

00:21:32,630 --> 00:21:36,960
we got information from those libraries

00:21:35,130 --> 00:21:39,840
using the metadata JSON files

00:21:36,960 --> 00:21:41,190
he had JSON and typescript and so what

00:21:39,840 --> 00:21:43,980
the compiler would do is it would take

00:21:41,190 --> 00:21:46,770
our you know the application components

00:21:43,980 --> 00:21:49,920
type scripts and converts that into

00:21:46,770 --> 00:21:51,720
component JSON so that it could share

00:21:49,920 --> 00:21:55,560
some of the same code between compiling

00:21:51,720 --> 00:21:57,150
libraries in the application and so it

00:21:55,560 --> 00:22:00,570
could feed the JSON into the same

00:21:57,150 --> 00:22:03,330
process so that conversion from

00:22:00,570 --> 00:22:06,510
typescripts into JSON was kind of

00:22:03,330 --> 00:22:09,120
expensive so with Ivy we don't even have

00:22:06,510 --> 00:22:11,100
metadata JSON files anymore so there's

00:22:09,120 --> 00:22:13,350
no need to do this conversion we're

00:22:11,100 --> 00:22:17,400
operating a taught typescript entirely

00:22:13,350 --> 00:22:20,670
and so we can kind of avoid the cost for

00:22:17,400 --> 00:22:22,620
this completely so with these two

00:22:20,670 --> 00:22:24,510
improvements and again like a longer

00:22:22,620 --> 00:22:26,279
tail of smaller optimizations we were

00:22:24,510 --> 00:22:29,070
able to see a sizable

00:22:26,279 --> 00:22:30,869
action in built time and if you're

00:22:29,070 --> 00:22:34,259
wondering what I mean by build times

00:22:30,869 --> 00:22:36,659
specifically and we measure build time

00:22:34,259 --> 00:22:39,269
as kind of the time that it takes the

00:22:36,659 --> 00:22:40,889
angular compiler to run once you remove

00:22:39,269 --> 00:22:43,679
the time it takes for the typescript

00:22:40,889 --> 00:22:45,119
compiler to run because you know angular

00:22:43,679 --> 00:22:46,440
wraps the types of compiler and we don't

00:22:45,119 --> 00:22:49,559
really directly control the speed of

00:22:46,440 --> 00:22:52,109
that so we measure the overhead over

00:22:49,559 --> 00:22:55,710
typescript so for our own documentation

00:22:52,109 --> 00:22:58,529
app angular do we used to have an

00:22:55,710 --> 00:23:01,710
overhead of 0.8 X and with Ivy we had

00:22:58,529 --> 00:23:05,779
8.5 x overhead which is about a 40%

00:23:01,710 --> 00:23:09,269
improvement um and this speed-up is

00:23:05,779 --> 00:23:12,479
super useful because it means that for

00:23:09,269 --> 00:23:14,580
the first time ever we can use a OT for

00:23:12,479 --> 00:23:16,019
even dev mode builds which means that

00:23:14,580 --> 00:23:17,580
when you ng serve you're going to be

00:23:16,019 --> 00:23:18,809
getting the same compile time checks

00:23:17,580 --> 00:23:21,149
that you would with production builds

00:23:18,809 --> 00:23:23,389
which is pretty great for developer

00:23:21,149 --> 00:23:27,419
experience

00:23:23,389 --> 00:23:29,099
we also made tests faster and we were

00:23:27,419 --> 00:23:32,279
able to do this with one big change

00:23:29,099 --> 00:23:34,049
which was to be a little bit smarter

00:23:32,279 --> 00:23:37,799
about how we recompile components

00:23:34,049 --> 00:23:40,080
between tests so in view engine or the

00:23:37,799 --> 00:23:41,940
previous version of angular and we would

00:23:40,080 --> 00:23:46,200
recompile all of your components between

00:23:41,940 --> 00:23:48,210
every single test execution which again

00:23:46,200 --> 00:23:49,710
is pretty wasteful because you know it's

00:23:48,210 --> 00:23:53,039
likely that your components haven't been

00:23:49,710 --> 00:23:56,009
changing that much between each tests so

00:23:53,039 --> 00:23:59,429
with ivy we don't recompile components

00:23:56,009 --> 00:24:01,799
at all between tests unless you're using

00:23:59,429 --> 00:24:03,419
some of the override methods so if you

00:24:01,799 --> 00:24:05,789
have a component that's overwriting a

00:24:03,419 --> 00:24:07,799
components template then we'll recompile

00:24:05,789 --> 00:24:10,769
that specific component but we won't

00:24:07,799 --> 00:24:13,320
recompile everything and in most cases

00:24:10,769 --> 00:24:17,389
what this means is we won't be

00:24:13,320 --> 00:24:21,330
recompiling at all between tests so this

00:24:17,389 --> 00:24:26,549
was able to make a 50 to 40 to 50

00:24:21,330 --> 00:24:27,450
percent improvement in test speed lastly

00:24:26,549 --> 00:24:29,969
we were able to make

00:24:27,450 --> 00:24:34,109
internationalization faster and we were

00:24:29,969 --> 00:24:36,570
able to achieve this by moving the

00:24:34,109 --> 00:24:38,249
translation inlining process from the

00:24:36,570 --> 00:24:39,149
beginning of the build pipeline to the

00:24:38,249 --> 00:24:42,779
ends of the

00:24:39,149 --> 00:24:45,589
pipeline so in version 8 if you were

00:24:42,779 --> 00:24:47,729
trying to you know in line translations

00:24:45,589 --> 00:24:49,499
that would happen as part of the

00:24:47,729 --> 00:24:51,479
compilation step so while angular was

00:24:49,499 --> 00:24:53,820
compiling your application it would you

00:24:51,479 --> 00:24:55,889
know at the same time substitute the

00:24:53,820 --> 00:24:56,909
translation text for whatever test text

00:24:55,889 --> 00:24:58,799
you you know wrote when you're

00:24:56,909 --> 00:25:01,049
developing the app and what this would

00:24:58,799 --> 00:25:03,509
mean is that for every locale you'd have

00:25:01,049 --> 00:25:06,509
to go through the entire build pipeline

00:25:03,509 --> 00:25:09,029
separately so if your build was thirty

00:25:06,509 --> 00:25:10,830
seconds for every new locale you add

00:25:09,029 --> 00:25:11,849
you'd have to add another 30 seconds

00:25:10,830 --> 00:25:16,710
because it has to go through the whole

00:25:11,849 --> 00:25:19,979
process so with Ivy um we've moved the

00:25:16,710 --> 00:25:21,779
inlining to a post processing step so

00:25:19,979 --> 00:25:24,179
what this means is you compile with

00:25:21,779 --> 00:25:26,639
angular just once you go through your

00:25:24,179 --> 00:25:30,029
entire build pipeline just once and then

00:25:26,639 --> 00:25:32,669
and you only do the translation and

00:25:30,029 --> 00:25:34,469
lighting part for each locale so again

00:25:32,669 --> 00:25:36,869
if your build is thirty seconds and your

00:25:34,469 --> 00:25:38,759
translation in lighting process takes

00:25:36,869 --> 00:25:41,759
five seconds then you're only gonna pay

00:25:38,759 --> 00:25:45,210
for five seconds for each locale instead

00:25:41,759 --> 00:25:49,379
of the whole 30 and so with this

00:25:45,210 --> 00:25:53,450
improvement we saw about 10 times faster

00:25:49,379 --> 00:25:53,450
writes and bolts which is pretty cool

00:25:53,839 --> 00:26:00,149
okay so our our last goal was to make

00:25:56,969 --> 00:26:03,719
angular simpler to understand and to

00:26:00,149 --> 00:26:05,039
debug I'm and to show you this part I'm

00:26:03,719 --> 00:26:05,940
gonna jump into a quick debugging the

00:26:05,039 --> 00:26:12,299
ball because these things are kind of

00:26:05,940 --> 00:26:15,029
more fun to see in action so um I have a

00:26:12,299 --> 00:26:16,440
new CLI project here like that I created

00:26:15,029 --> 00:26:18,749
I haven't made a whole lot of changes to

00:26:16,440 --> 00:26:20,759
it but you can see here's the defaults

00:26:18,749 --> 00:26:25,609
you like template in here I've added a

00:26:20,759 --> 00:26:30,719
few bindings and however if I serve this

00:26:25,609 --> 00:26:32,759
you can see that I coated in a bug

00:26:30,719 --> 00:26:34,529
unfortunately and so I'm getting this

00:26:32,759 --> 00:26:36,239
expression changed after it has been

00:26:34,529 --> 00:26:39,779
checked error which is probably an error

00:26:36,239 --> 00:26:40,950
that you've all seen before and so I

00:26:39,779 --> 00:26:43,889
just want to show you what it would be

00:26:40,950 --> 00:26:46,859
like to debug this error with ivy so you

00:26:43,889 --> 00:26:48,149
can already see um the message text is

00:26:46,859 --> 00:26:49,289
pretty similar but if you look at the

00:26:48,149 --> 00:26:50,999
stack trace you can see this is

00:26:49,289 --> 00:26:52,250
completely different than what we had

00:26:50,999 --> 00:26:54,200
before

00:26:52,250 --> 00:26:56,900
if you go up a few frames in the stack

00:26:54,200 --> 00:26:58,910
you can see already from here that the

00:26:56,900 --> 00:27:00,740
air is being thrown due to a text

00:26:58,910 --> 00:27:03,230
interpolation you can see text interred

00:27:00,740 --> 00:27:04,490
plate one and you can also see which

00:27:03,230 --> 00:27:07,160
component it's in it's in the app

00:27:04,490 --> 00:27:08,780
component and this is the template

00:27:07,160 --> 00:27:11,540
function that we generated based on the

00:27:08,780 --> 00:27:13,160
app components template so if you wanted

00:27:11,540 --> 00:27:15,310
to see the exact line that's causing the

00:27:13,160 --> 00:27:18,970
error we can go ahead and click on that

00:27:15,310 --> 00:27:21,020
line and it'll take us to the exact line

00:27:18,970 --> 00:27:25,310
that's throwing the air which is pretty

00:27:21,020 --> 00:27:27,020
cool so I'm gonna pretend like you know

00:27:25,310 --> 00:27:30,440
I don't know how lifecycle hooks work

00:27:27,020 --> 00:27:33,950
right so we can debug this as if we're

00:27:30,440 --> 00:27:35,870
debugging this real so let's say so in

00:27:33,950 --> 00:27:38,450
my ng after viewing it hook

00:27:35,870 --> 00:27:40,010
I changed the value of this property so

00:27:38,450 --> 00:27:42,080
I probably say okay let's put a

00:27:40,010 --> 00:27:44,030
breakpoint here and let's put a

00:27:42,080 --> 00:27:46,310
breakpoint you know at this particular

00:27:44,030 --> 00:27:49,430
binding so I could figure out which one

00:27:46,310 --> 00:27:52,520
actually happens first so if i refresh

00:27:49,430 --> 00:27:55,340
the page it's gonna stop at the binding

00:27:52,520 --> 00:27:58,270
and I might wonder okay so at this point

00:27:55,340 --> 00:28:02,690
what is the value of the title binding

00:27:58,270 --> 00:28:05,990
so I can do a trick here by reading the

00:28:02,690 --> 00:28:07,910
title property from the context and I

00:28:05,990 --> 00:28:09,770
can see okay so the title is ng comp

00:28:07,910 --> 00:28:11,690
keynote right here so that's pretty cool

00:28:09,770 --> 00:28:14,810
so I know that it hasn't been changed

00:28:11,690 --> 00:28:17,990
yet to add the exclamation points which

00:28:14,810 --> 00:28:21,680
is what I had wanted to do here right

00:28:17,990 --> 00:28:22,730
and the Lysa clock and also while we

00:28:21,680 --> 00:28:23,810
here I can show you another quick trick

00:28:22,730 --> 00:28:25,520
which is you can just kind of look at

00:28:23,810 --> 00:28:28,160
the whole context if you you want see

00:28:25,520 --> 00:28:30,200
everything that's on there okay so let's

00:28:28,160 --> 00:28:32,450
say cool it's on the first value and

00:28:30,200 --> 00:28:36,020
drop keynote and I skip ahead and see uh

00:28:32,450 --> 00:28:37,670
the lifecycle hook it's being it's being

00:28:36,020 --> 00:28:39,020
executed after so obviously this isn't

00:28:37,670 --> 00:28:40,970
gonna work because the value is being

00:28:39,020 --> 00:28:45,290
changed after the volume has been

00:28:40,970 --> 00:28:47,900
checked as the error had communicated so

00:28:45,290 --> 00:28:51,280
that's how I would deal ugh this I also

00:28:47,900 --> 00:28:55,880
want to show you one more thing which is

00:28:51,280 --> 00:28:57,530
you can also debug things through kind

00:28:55,880 --> 00:29:00,920
of inspecting elements directly this is

00:28:57,530 --> 00:29:02,870
kind of a has a more feel - what

00:29:00,920 --> 00:29:04,640
debugging was like in angularjs so if

00:29:02,870 --> 00:29:06,550
you were to select for example the app

00:29:04,640 --> 00:29:09,110
component routes

00:29:06,550 --> 00:29:09,590
you could actually you know what I'm

00:29:09,110 --> 00:29:14,960
gonna do

00:29:09,590 --> 00:29:16,910
let's finish debugging rope right okay

00:29:14,960 --> 00:29:21,980
so let's do it here so again I'm going

00:29:16,910 --> 00:29:25,760
to select the app routes and then I can

00:29:21,980 --> 00:29:27,710
use this global ng object um to start

00:29:25,760 --> 00:29:29,270
you know inspecting my angular

00:29:27,710 --> 00:29:31,130
application you can see we have a bunch

00:29:29,270 --> 00:29:33,620
of new methods here that you might not

00:29:31,130 --> 00:29:35,510
have seen before so for now what I'm

00:29:33,620 --> 00:29:38,780
gonna do is I'm gonna grab the component

00:29:35,510 --> 00:29:41,540
that's on this element so get components

00:29:38,780 --> 00:29:43,250
and pass them in the elements you look

00:29:41,540 --> 00:29:47,150
at what hop is you can see that it's the

00:29:43,250 --> 00:29:49,730
app component context here and then

00:29:47,150 --> 00:29:51,980
let's say I want to change the value of

00:29:49,730 --> 00:29:58,160
it so I can do something like let's

00:29:51,980 --> 00:30:00,920
change you title to something new so you

00:29:58,160 --> 00:30:02,450
can see that obviously in comp the title

00:30:00,920 --> 00:30:04,220
has changed to something new but in the

00:30:02,450 --> 00:30:07,580
actual UI you can see that it still has

00:30:04,220 --> 00:30:09,230
the old value here so if I were still

00:30:07,580 --> 00:30:11,030
debugging maybe I'd want to run change

00:30:09,230 --> 00:30:14,290
section forward a frame to see the new

00:30:11,030 --> 00:30:18,220
values so I could do something like ng

00:30:14,290 --> 00:30:20,570
changes and then pass in the components

00:30:18,220 --> 00:30:23,810
and then you can see that it's updated

00:30:20,570 --> 00:30:25,190
UI um so we have a bunch of really handy

00:30:23,810 --> 00:30:27,590
utility methods like this so that you

00:30:25,190 --> 00:30:30,800
can kind of inspect elements run change

00:30:27,590 --> 00:30:34,100
detection and the stack traces are

00:30:30,800 --> 00:30:35,810
hopefully a little bit easier to read so

00:30:34,100 --> 00:30:39,050
I think these features are actually

00:30:35,810 --> 00:30:40,460
really exciting I remember when I was

00:30:39,050 --> 00:30:43,510
working on the angular components team a

00:30:40,460 --> 00:30:45,770
few years ago and I'd be building like a

00:30:43,510 --> 00:30:48,110
select dialogue or something like that

00:30:45,770 --> 00:30:50,210
and I'd run into some change detection

00:30:48,110 --> 00:30:52,730
issue and I'd have just such a hard time

00:30:50,210 --> 00:30:54,500
debugging it because the old stack

00:30:52,730 --> 00:30:56,810
traces would just kind of throw you in

00:30:54,500 --> 00:30:59,720
the middle of framework code execution

00:30:56,810 --> 00:31:01,280
aid have no idea kind of where you are

00:30:59,720 --> 00:31:03,680
in changed texturing or what had

00:31:01,280 --> 00:31:05,270
triggered the change detection and it

00:31:03,680 --> 00:31:08,060
was just so disorienting the way that it

00:31:05,270 --> 00:31:10,640
was the way that it would go in the

00:31:08,060 --> 00:31:12,380
previous version of angular so I wish

00:31:10,640 --> 00:31:14,120
that I had had methods like this that

00:31:12,380 --> 00:31:16,010
would help you kind of inspect where you

00:31:14,120 --> 00:31:17,840
are and help you debug change direction

00:31:16,010 --> 00:31:20,400
in a more imperative way so I think

00:31:17,840 --> 00:31:24,360
these changes are super excited

00:31:20,400 --> 00:31:28,600
okay so that's the demo

00:31:24,360 --> 00:31:31,809
so to summarize kind of what we just saw

00:31:28,600 --> 00:31:33,130
we have simpler stack traces in Ivy we

00:31:31,809 --> 00:31:35,020
no longer have just all of these

00:31:33,130 --> 00:31:36,670
frameworks specific functions that don't

00:31:35,020 --> 00:31:38,440
tell you where you are you can now walk

00:31:36,670 --> 00:31:40,000
up the stack and go directly to the

00:31:38,440 --> 00:31:45,010
template and that's causing the problem

00:31:40,000 --> 00:31:47,890
and again like I showed we have a new ng

00:31:45,010 --> 00:31:50,740
or an umma number of methods on the ng

00:31:47,890 --> 00:31:53,590
global I only talked about a few of them

00:31:50,740 --> 00:31:54,880
in the demo the apply changes and

00:31:53,590 --> 00:31:57,100
getcomponent but you can see there's

00:31:54,880 --> 00:32:00,100
this whole list of things that you can

00:31:57,100 --> 00:32:05,020
use like get listeners and get injector

00:32:00,100 --> 00:32:06,640
and we have docs for these in the

00:32:05,020 --> 00:32:11,650
emulator documentation so I highly

00:32:06,640 --> 00:32:14,110
recommend checking this out okay more

00:32:11,650 --> 00:32:17,800
cool things and we've also improved

00:32:14,110 --> 00:32:20,200
build errors with ivy so previously if

00:32:17,800 --> 00:32:24,070
you wrote something your template that

00:32:20,200 --> 00:32:27,040
wasn't in your ng module so I have not

00:32:24,070 --> 00:32:28,900
an existing component here um you get a

00:32:27,040 --> 00:32:31,360
little bit of context like the element

00:32:28,900 --> 00:32:33,600
above and the element below but it

00:32:31,360 --> 00:32:36,880
wouldn't tell you you know what template

00:32:33,600 --> 00:32:38,920
this particular code snippet was in

00:32:36,880 --> 00:32:40,150
which can be kind of problematic if you

00:32:38,920 --> 00:32:42,040
have a large application it's kind of

00:32:40,150 --> 00:32:42,820
hard to figure out where the error is

00:32:42,040 --> 00:32:45,880
coming from

00:32:42,820 --> 00:32:47,980
so it was ivy and we've made this a

00:32:45,880 --> 00:32:49,240
little bit easier so you can see exactly

00:32:47,980 --> 00:32:50,320
where the error is occurring it's

00:32:49,240 --> 00:32:52,390
occurring in the template of app

00:32:50,320 --> 00:32:54,070
component and you can see the specific

00:32:52,390 --> 00:32:57,490
line that is occurring in so it's on

00:32:54,070 --> 00:32:59,320
line 377 specifically and we've also

00:32:57,490 --> 00:33:01,150
made a number of aesthetic changes you

00:32:59,320 --> 00:33:04,450
can see that we have color coding for

00:33:01,150 --> 00:33:05,980
the first time and just formatting

00:33:04,450 --> 00:33:10,290
changes and it just makes it a more

00:33:05,980 --> 00:33:12,850
pleasant debugging experience in general

00:33:10,290 --> 00:33:15,520
we have also made type checking a bit

00:33:12,850 --> 00:33:17,410
more intuitive previously there were

00:33:15,520 --> 00:33:19,710
some things that we just didn't type

00:33:17,410 --> 00:33:21,760
check with the new strict templates mode

00:33:19,710 --> 00:33:25,030
we're also going to type check things

00:33:21,760 --> 00:33:26,890
like directive inputs event objects we

00:33:25,030 --> 00:33:28,810
had previously typed rekts local

00:33:26,890 --> 00:33:31,000
references to components and directives

00:33:28,810 --> 00:33:33,070
but now we're also going to check local

00:33:31,000 --> 00:33:35,710
references to Dom elements as well

00:33:33,070 --> 00:33:37,179
and template context types so whatever

00:33:35,710 --> 00:33:41,769
you're passing into structural

00:33:37,179 --> 00:33:43,809
directives like ng4 and i'm not going to

00:33:41,769 --> 00:33:46,029
go into too much detail about this one

00:33:43,809 --> 00:33:47,440
because we have two great talks coming

00:33:46,029 --> 00:33:50,350
up in the conference about tablet type

00:33:47,440 --> 00:33:52,509
checking so we have Alex's talk tomorrow

00:33:50,350 --> 00:33:55,450
morning about stronger type checking and

00:33:52,509 --> 00:33:58,570
tablets with Ivy and Brian's doing a

00:33:55,450 --> 00:34:00,490
lightning talk later today I'm also on

00:33:58,570 --> 00:34:01,720
top of type checking so definitely be

00:34:00,490 --> 00:34:06,820
sure to check these out if you want more

00:34:01,720 --> 00:34:08,560
details okay we have a few more things

00:34:06,820 --> 00:34:11,230
that we also made simpler for example

00:34:08,560 --> 00:34:14,379
style merging so one of our

00:34:11,230 --> 00:34:17,560
longest-standing issues in github is an

00:34:14,379 --> 00:34:19,450
issue about how when you bind to class

00:34:17,560 --> 00:34:21,730
directly like this like the general

00:34:19,450 --> 00:34:23,679
class that it's destructive and will

00:34:21,730 --> 00:34:26,980
overwrite any other classes that are on

00:34:23,679 --> 00:34:29,740
the same element and with Ivy we've made

00:34:26,980 --> 00:34:33,270
the rules regarding style precedence

00:34:29,740 --> 00:34:35,859
more comprehensive and intuitive so

00:34:33,270 --> 00:34:38,530
generally speaking the more specific a

00:34:35,859 --> 00:34:41,710
style is the higher its precedence so in

00:34:38,530 --> 00:34:43,329
this case and the highlighted binding

00:34:41,710 --> 00:34:46,240
would take precedence over the class by

00:34:43,329 --> 00:34:48,849
name because it's more specific which

00:34:46,240 --> 00:34:50,470
addresses that issue so if you're

00:34:48,849 --> 00:34:52,869
curious about style precedence again we

00:34:50,470 --> 00:34:54,310
have a guide in the angular Doc's so if

00:34:52,869 --> 00:34:58,990
you search for style precedents you

00:34:54,310 --> 00:35:02,770
should find it and we also made module

00:34:58,990 --> 00:35:04,540
definitions a little bit simpler so over

00:35:02,770 --> 00:35:06,790
the years you've seen a lot of confusion

00:35:04,540 --> 00:35:10,720
with entry components specifically

00:35:06,790 --> 00:35:13,810
because if you don't because previously

00:35:10,720 --> 00:35:14,980
if you didn't put a component in it

00:35:13,810 --> 00:35:17,230
template directly

00:35:14,980 --> 00:35:19,359
it wouldn't be compiled so you also had

00:35:17,230 --> 00:35:21,819
to add it to this entry components array

00:35:19,359 --> 00:35:23,470
but with Ivy it's no longer necessary to

00:35:21,819 --> 00:35:26,800
add things to entry components as well

00:35:23,470 --> 00:35:28,510
as declarations so the entry components

00:35:26,800 --> 00:35:33,150
array specifically is deprecated and you

00:35:28,510 --> 00:35:38,230
no longer have to add components to it

00:35:33,150 --> 00:35:39,640
okay so hopefully you can see how I Ivy

00:35:38,230 --> 00:35:42,609
has achieved at schools to be smaller

00:35:39,640 --> 00:35:44,230
faster and simpler but I also wanted to

00:35:42,609 --> 00:35:46,390
mention that there are a bunch of things

00:35:44,230 --> 00:35:50,170
you know in addition to these shiny

00:35:46,390 --> 00:35:52,349
and fixes like the fact that we fixed

00:35:50,170 --> 00:35:57,369
dozens and dozens of bugs over the last

00:35:52,349 --> 00:35:59,289
you know two years we through all of the

00:35:57,369 --> 00:36:00,970
compatibility testing compatibility

00:35:59,289 --> 00:36:02,650
testing that we did through Google and

00:36:00,970 --> 00:36:05,170
all of the testing that the community is

00:36:02,650 --> 00:36:07,809
done through our C periods we found a

00:36:05,170 --> 00:36:09,640
ton of edge cases and that's caused a

00:36:07,809 --> 00:36:11,829
mass addition of new tests for the

00:36:09,640 --> 00:36:14,140
framework to make it more stable we've

00:36:11,829 --> 00:36:17,529
removed literally years of technical

00:36:14,140 --> 00:36:19,180
debt and just overall angular as a

00:36:17,529 --> 00:36:23,140
project is healthier than it's ever been

00:36:19,180 --> 00:36:25,119
and as a team we've you know as we've

00:36:23,140 --> 00:36:27,309
been doing these rewrites we've had time

00:36:25,119 --> 00:36:29,019
to really think deeply about the

00:36:27,309 --> 00:36:31,299
concepts of angular and how we can make

00:36:29,019 --> 00:36:31,930
it simpler and more intuitive and easier

00:36:31,299 --> 00:36:34,720
to use

00:36:31,930 --> 00:36:38,859
over the next few years and we have so

00:36:34,720 --> 00:36:42,279
many ideas on how to make life easier

00:36:38,859 --> 00:36:43,630
for angular developers so um yeah I

00:36:42,279 --> 00:36:46,359
think we built a really strong

00:36:43,630 --> 00:36:50,109
foundation for the next few years so I'm

00:36:46,359 --> 00:36:52,089
really excited about that okay so in

00:36:50,109 --> 00:36:53,349
addition to IV version nine has a number

00:36:52,089 --> 00:36:57,730
of other improvements that I want to

00:36:53,349 --> 00:37:01,630
talk about one one big thing is that we

00:36:57,730 --> 00:37:03,910
added support for typescript 3.7 and in

00:37:01,630 --> 00:37:05,559
the angular 9.1 released last week we

00:37:03,910 --> 00:37:08,380
also added support for typescript read

00:37:05,559 --> 00:37:10,059
about eight so this keeps us up to date

00:37:08,380 --> 00:37:11,140
with the ecosystem and allows you to

00:37:10,059 --> 00:37:13,329
take advantage of new types core

00:37:11,140 --> 00:37:17,769
features like the optional chaining

00:37:13,329 --> 00:37:19,150
syntax here so check that out we also

00:37:17,769 --> 00:37:21,730
made a bunch of improvements to angular

00:37:19,150 --> 00:37:24,579
Universal for our server-side rendering

00:37:21,730 --> 00:37:26,950
story and we added a new pre rendering

00:37:24,579 --> 00:37:30,549
tool and we've gotten some pretty

00:37:26,950 --> 00:37:33,339
positive feedback about this these new

00:37:30,549 --> 00:37:34,930
improvements for example this tweet he

00:37:33,339 --> 00:37:37,660
says the developer experience of angular

00:37:34,930 --> 00:37:39,490
Universal is infinitely better now but

00:37:37,660 --> 00:37:41,140
again I'm not going to go into a whole

00:37:39,490 --> 00:37:43,890
lot of detail about Universal because we

00:37:41,140 --> 00:37:47,920
have a great talk coming up about that

00:37:43,890 --> 00:37:50,049
later today by Wagner angular Universal

00:37:47,920 --> 00:37:53,319
in our new pre renderer so definitely

00:37:50,049 --> 00:37:56,680
check that out on the component side we

00:37:53,319 --> 00:37:58,210
also added test harnesses um which is

00:37:56,680 --> 00:38:00,130
pretty cool because it's an abstraction

00:37:58,210 --> 00:38:02,170
layer that allows you to

00:38:00,130 --> 00:38:04,680
test whatever material components that

00:38:02,170 --> 00:38:08,489
you're using without having to rely on

00:38:04,680 --> 00:38:11,109
implementation details in HTML and CSS

00:38:08,489 --> 00:38:12,400
so this means that you know you don't

00:38:11,109 --> 00:38:14,289
have to worry about a class being

00:38:12,400 --> 00:38:15,489
removed or something material because

00:38:14,289 --> 00:38:18,729
you can just use the harness and be

00:38:15,489 --> 00:38:22,420
confident that that your tests will

00:38:18,729 --> 00:38:24,759
continue to work we also added a bunch

00:38:22,420 --> 00:38:26,619
of new components for example this new

00:38:24,759 --> 00:38:31,029
YouTube player component that embeds

00:38:26,619 --> 00:38:37,829
YouTube videos and this new Google Maps

00:38:31,029 --> 00:38:40,209
component that embeds Google Maps so um

00:38:37,829 --> 00:38:43,959
how do you get all of these amazing

00:38:40,209 --> 00:38:47,829
features and benefits you can use our

00:38:43,959 --> 00:38:49,029
handy dandy ng update experience and so

00:38:47,829 --> 00:38:51,579
first you'll want to update to the

00:38:49,029 --> 00:38:54,849
latest version of the CLI tooling and

00:38:51,579 --> 00:38:59,140
then then you'll want to update angular

00:38:54,849 --> 00:39:00,640
core in steel I normally we've gotten

00:38:59,140 --> 00:39:05,170
pretty positive feedback about the

00:39:00,640 --> 00:39:06,789
migration process um from so Craig

00:39:05,170 --> 00:39:09,489
McMurray from Dick's Sporting Goods said

00:39:06,789 --> 00:39:11,319
I got the email yesterday at 4 p.m. EST

00:39:09,489 --> 00:39:13,269
that nyan did oh final was out and by

00:39:11,319 --> 00:39:15,309
4:30 p.m. it was up in our staging

00:39:13,269 --> 00:39:16,690
environment that's a true demonstration

00:39:15,309 --> 00:39:19,239
to the hard work that you were all doing

00:39:16,690 --> 00:39:20,499
to make it easy for us to migrate so we

00:39:19,239 --> 00:39:22,269
love seeing things like this and

00:39:20,499 --> 00:39:24,880
hopefully everyone has this type of

00:39:22,269 --> 00:39:26,979
positive experience but we also have a

00:39:24,880 --> 00:39:30,160
number of tools to help you through your

00:39:26,979 --> 00:39:32,199
update so if you're updating Tanai and

00:39:30,160 --> 00:39:37,150
definitely check out update angular at

00:39:32,199 --> 00:39:38,489
i/o um it has you know some options that

00:39:37,150 --> 00:39:40,959
you can use to customize the

00:39:38,489 --> 00:39:41,979
instructions that you get but basically

00:39:40,959 --> 00:39:43,479
it has a list of really detailed

00:39:41,979 --> 00:39:43,839
instructions to help you update your

00:39:43,479 --> 00:39:47,559
progress

00:39:43,839 --> 00:39:49,989
your project we also have a dedicated

00:39:47,559 --> 00:39:51,489
guide to updating toover angular version

00:39:49,989 --> 00:39:54,640
9 and that lists things like breaking

00:39:51,489 --> 00:39:56,650
changes deprecations troubleshooting

00:39:54,640 --> 00:39:58,839
advice basically anything that you need

00:39:56,650 --> 00:40:03,749
to know so I would definitely check that

00:39:58,839 --> 00:40:06,519
out as well so now that the 9.1 release

00:40:03,749 --> 00:40:10,319
is out we're gonna start working on

00:40:06,519 --> 00:40:13,650
angular 10 zero and that's coming next

00:40:10,319 --> 00:40:19,729
oh there's a lot to be excited about so

00:40:13,650 --> 00:40:19,729
stay tuned thank you for your time

00:40:19,740 --> 00:40:25,860
[Applause]

00:40:20,060 --> 00:40:27,900
[Music]

00:40:25,860 --> 00:40:32,610
[Applause]

00:40:27,900 --> 00:40:32,610

YouTube URL: https://www.youtube.com/watch?v=Uz2D8QjQAIE


