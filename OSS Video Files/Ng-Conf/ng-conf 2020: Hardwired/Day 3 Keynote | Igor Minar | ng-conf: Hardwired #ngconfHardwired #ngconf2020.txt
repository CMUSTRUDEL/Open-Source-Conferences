Title: Day 3 Keynote | Igor Minar | ng-conf: Hardwired #ngconfHardwired #ngconf2020
Publication date: 2020-05-26
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Balancing DX & UX needs in Angular.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,240
[Applause]

00:00:05,920 --> 00:00:22,750
[Music]

00:00:16,240 --> 00:00:25,300
I hope everybody staying healthy and

00:00:22,750 --> 00:00:27,630
that all of you enjoying this very

00:00:25,300 --> 00:00:29,830
unexpected edition of our conference

00:00:27,630 --> 00:00:32,439
before we begin I would like to actually

00:00:29,830 --> 00:00:35,260
give a big shout out to the NGO for

00:00:32,439 --> 00:00:37,000
organizers but cooling off this virtual

00:00:35,260 --> 00:00:39,760
gathering on such short notice

00:00:37,000 --> 00:00:42,760
thank you thank you thank you you people

00:00:39,760 --> 00:00:44,559
are so freaking awesome we couldn't do

00:00:42,760 --> 00:00:47,080
this without you and we are so grateful

00:00:44,559 --> 00:00:51,100
to have you thank you for those that

00:00:47,080 --> 00:00:53,260
don't know me my name is Igor Minar I'm

00:00:51,100 --> 00:00:57,159
a software engineer at Google and I'm an

00:00:53,260 --> 00:00:59,650
angular / TL today I would like to share

00:00:57,159 --> 00:01:02,710
with you some insights from behind the

00:00:59,650 --> 00:01:05,080
scenes of making angular specifically I

00:01:02,710 --> 00:01:07,420
would like to dive into attention that

00:01:05,080 --> 00:01:10,689
we see between the needs of developer

00:01:07,420 --> 00:01:14,350
experience or DX and user experience and

00:01:10,689 --> 00:01:17,500
UX and talk about how to balance these

00:01:14,350 --> 00:01:19,900
two in angular in order for you to be

00:01:17,500 --> 00:01:22,549
able to build applications that users

00:01:19,900 --> 00:01:25,549
love to use

00:01:22,549 --> 00:01:29,540
I'm sure that many of you I too am a

00:01:25,549 --> 00:01:32,119
strong believer in the web platform it's

00:01:29,540 --> 00:01:33,680
a platform that is ubiquitous it's

00:01:32,119 --> 00:01:36,500
available almost everywhere

00:01:33,680 --> 00:01:38,659
it's a sec it's acceptable accessible

00:01:36,500 --> 00:01:41,720
it's accessible to everybody regardless

00:01:38,659 --> 00:01:43,520
of their skills or means and it's

00:01:41,720 --> 00:01:45,679
malleable which means that we can build

00:01:43,520 --> 00:01:47,479
very interesting user experiences on the

00:01:45,679 --> 00:01:50,539
web but it's also a platform that is

00:01:47,479 --> 00:01:53,450
ever-evolving it's not stagnant ah it

00:01:50,539 --> 00:01:55,490
changes it improves and it does so in a

00:01:53,450 --> 00:01:59,119
very stable way so we don't need to deal

00:01:55,490 --> 00:02:00,500
with breaking changes very often on the

00:01:59,119 --> 00:02:02,929
other hand if we look at the web

00:02:00,500 --> 00:02:06,319
ecosystem the ecosystem of loosely

00:02:02,929 --> 00:02:07,880
grouped tools patterns and libraries it

00:02:06,319 --> 00:02:10,220
often feels like we're dealing with a

00:02:07,880 --> 00:02:12,980
house build of cards for the longest

00:02:10,220 --> 00:02:15,430
time I wondered why where there is so

00:02:12,980 --> 00:02:18,230
many tools libraries and patterns

00:02:15,430 --> 00:02:20,660
seemingly doing doing the same or very

00:02:18,230 --> 00:02:23,120
similar thing and I don't know if I got

00:02:20,660 --> 00:02:25,069
the answer quite right but something

00:02:23,120 --> 00:02:26,480
tells me that maybe this tension between

00:02:25,069 --> 00:02:28,609
the developer experience and user

00:02:26,480 --> 00:02:32,359
experience and the trade of different

00:02:28,609 --> 00:02:35,030
solutions make results in big variety

00:02:32,359 --> 00:02:38,930
and diversity of solutions we have on

00:02:35,030 --> 00:02:40,880
the web often but not always the

00:02:38,930 --> 00:02:43,370
requirements and trade-offs that result

00:02:40,880 --> 00:02:45,769
in a good developer experience worsens

00:02:43,370 --> 00:02:49,850
the user experience the opposite is

00:02:45,769 --> 00:02:53,170
often true as well and you might wonder

00:02:49,850 --> 00:02:56,450
how does this manifest in the real world

00:02:53,170 --> 00:03:00,680
what is the common symptom the one I see

00:02:56,450 --> 00:03:05,090
very frequently is waiting

00:03:00,680 --> 00:03:07,810
who here loves waiting please raise a

00:03:05,090 --> 00:03:07,810
virtual hand

00:03:09,430 --> 00:03:15,890
well I hope you're raising

00:03:12,020 --> 00:03:18,080
and because I can see you but I do have

00:03:15,890 --> 00:03:19,280
to personally confess because I do love

00:03:18,080 --> 00:03:21,430
waiting for certain things

00:03:19,280 --> 00:03:25,070
I love waiting for sunsets or sunrises

00:03:21,430 --> 00:03:27,200
what I don't love waiting for and grow

00:03:25,070 --> 00:03:30,610
very impatient is when the application

00:03:27,200 --> 00:03:33,110
is taking too long to load similarly I

00:03:30,610 --> 00:03:36,470
often have a hard time focusing on work

00:03:33,110 --> 00:03:40,600
when a program I'm working on is taking

00:03:36,470 --> 00:03:44,270
a long time to build rebuild or test

00:03:40,600 --> 00:03:46,820
nobody likes waiting especially when you

00:03:44,270 --> 00:03:50,620
are trying to do something and waiting

00:03:46,820 --> 00:03:53,270
is in the way but waiting is real and

00:03:50,620 --> 00:03:56,510
way to comment from both users and

00:03:53,270 --> 00:03:59,300
developers and as we develop develop our

00:03:56,510 --> 00:04:01,880
tools and applications we often make

00:03:59,300 --> 00:04:05,750
trade-offs between who's gonna wait a

00:04:01,880 --> 00:04:08,270
bit more these trade-offs do exist we

00:04:05,750 --> 00:04:10,070
should accept them and we should treat

00:04:08,270 --> 00:04:13,280
them as as necessary evil of imperfect

00:04:10,070 --> 00:04:16,280
imperfect world we should focus on

00:04:13,280 --> 00:04:18,859
finding the right balance between making

00:04:16,280 --> 00:04:20,330
the trade-offs that impact the developer

00:04:18,859 --> 00:04:21,830
experience and user experience and

00:04:20,330 --> 00:04:22,840
finding that middle ground between the

00:04:21,830 --> 00:04:25,310
two

00:04:22,840 --> 00:04:28,100
we should also however acknowledge that

00:04:25,310 --> 00:04:31,070
building awesome what experiences

00:04:28,100 --> 00:04:32,390
requires a lot of collaboration and it

00:04:31,070 --> 00:04:35,660
requires a lot of collaboration because

00:04:32,390 --> 00:04:37,640
it's a complex task we often cannot do

00:04:35,660 --> 00:04:40,190
it by ourselves and the more people are

00:04:37,640 --> 00:04:44,210
involved the more people start to make

00:04:40,190 --> 00:04:45,440
trade-offs now if you look at the web we

00:04:44,210 --> 00:04:47,870
see that there are lots of people

00:04:45,440 --> 00:04:49,880
involved at different levels we have web

00:04:47,870 --> 00:04:52,220
platform engineers that are making their

00:04:49,880 --> 00:04:55,900
trade routes we have library authors

00:04:52,220 --> 00:04:58,460
that are making trade-offs we have our

00:04:55,900 --> 00:05:01,040
component authors reusable component

00:04:58,460 --> 00:05:04,130
authors there are also trading certain

00:05:01,040 --> 00:05:05,720
things for others lastly we have web

00:05:04,130 --> 00:05:07,160
developers that are building the

00:05:05,720 --> 00:05:09,070
applications by assembling all these

00:05:07,160 --> 00:05:11,780
pieces and running down the web platform

00:05:09,070 --> 00:05:14,540
we should also not forget about the end

00:05:11,780 --> 00:05:16,850
users that get to use the end result of

00:05:14,540 --> 00:05:18,380
this work however I have to point out

00:05:16,850 --> 00:05:21,790
that this slide is slightly outdated

00:05:18,380 --> 00:05:24,650
because in the today's commit 19 age

00:05:21,790 --> 00:05:25,670
that proximity of the users is not very

00:05:24,650 --> 00:05:28,490
safe

00:05:25,670 --> 00:05:29,150
so let's let's fix that muscle oh okay

00:05:28,490 --> 00:05:31,640
that's much better

00:05:29,150 --> 00:05:33,790
stay healthy everybody please stay

00:05:31,640 --> 00:05:33,790
healthy

00:05:33,960 --> 00:05:38,430
so as we saw that there is a lot of

00:05:36,690 --> 00:05:41,370
people making trade-offs at different

00:05:38,430 --> 00:05:44,400
layers of a building with experiences in

00:05:41,370 --> 00:05:47,759
these trade-offs add up they often

00:05:44,400 --> 00:05:49,800
affect developers but also users and

00:05:47,759 --> 00:05:51,900
rather than seeing this as a obstacle I

00:05:49,800 --> 00:05:54,330
wonder if we could change a perspective

00:05:51,900 --> 00:05:55,580
and so things slightly differently or

00:05:54,330 --> 00:05:58,710
actually quite differently

00:05:55,580 --> 00:06:00,539
what if user experience and developer

00:05:58,710 --> 00:06:03,030
experience we're friends and we're

00:06:00,539 --> 00:06:05,310
helping each other what if they were in

00:06:03,030 --> 00:06:06,879
reinforcing each other how could that

00:06:05,310 --> 00:06:09,369
work

00:06:06,879 --> 00:06:12,039
well I strongly believe that a great

00:06:09,369 --> 00:06:17,139
user experience meets the user where

00:06:12,039 --> 00:06:19,349
they are regardless of who they are in

00:06:17,139 --> 00:06:21,879
fact I'm often fascinated by watching

00:06:19,349 --> 00:06:25,360
someone who hasn't used a modern new

00:06:21,879 --> 00:06:27,669
eyes much and gets to use the cell phone

00:06:25,360 --> 00:06:31,209
for the first time for example a young

00:06:27,669 --> 00:06:33,429
child or an elderly person a great study

00:06:31,209 --> 00:06:35,229
subjects these people have no

00:06:33,429 --> 00:06:37,689
preconceptions about how modern new

00:06:35,229 --> 00:06:40,419
yours the UI is should work and all they

00:06:37,689 --> 00:06:43,089
know is the real physical world they

00:06:40,419 --> 00:06:44,499
know how to interact with it they know

00:06:43,089 --> 00:06:47,139
how it should behave and they have

00:06:44,499 --> 00:06:50,139
expectations around that a great UI is

00:06:47,139 --> 00:06:52,059
one that is easily understandable by

00:06:50,139 --> 00:06:55,269
these people because it behaves like a

00:06:52,059 --> 00:06:57,669
real world a poor user experience on the

00:06:55,269 --> 00:07:01,449
other hand is one that is janky uses odd

00:06:57,669 --> 00:07:06,550
UI interactions breaks user expectations

00:07:01,449 --> 00:07:10,809
around grass dress about gravity mass

00:07:06,550 --> 00:07:12,919
inertia and other essential laws of the

00:07:10,809 --> 00:07:18,069
real world

00:07:12,919 --> 00:07:21,169
great you eyes feel real great your eyes

00:07:18,069 --> 00:07:24,530
feel alive it feels like you're touching

00:07:21,169 --> 00:07:28,870
it and it just is one with you they feel

00:07:24,530 --> 00:07:31,270
right and they are fast

00:07:28,870 --> 00:07:33,400
a lot has been said about the speed I

00:07:31,270 --> 00:07:35,380
don't want to go into details but there

00:07:33,400 --> 00:07:40,600
are studies upon studies that tell us

00:07:35,380 --> 00:07:42,430
that fast you eyes result in better user

00:07:40,600 --> 00:07:45,660
experience they result in better using

00:07:42,430 --> 00:07:48,340
experience because people feel more

00:07:45,660 --> 00:07:50,590
immersed in the experience in this

00:07:48,340 --> 00:07:52,900
results in more interactions in more

00:07:50,590 --> 00:07:55,270
conversions and in more satisfaction

00:07:52,900 --> 00:07:58,540
that people are interacting with the

00:07:55,270 --> 00:08:01,210
applications tab then often the speed

00:07:58,540 --> 00:08:03,420
can be approximated by the size of

00:08:01,210 --> 00:08:06,430
JavaScript bundles that we shipped to a

00:08:03,420 --> 00:08:08,670
web clients we're going to talk about

00:08:06,430 --> 00:08:11,290
that in a bit but before we get there

00:08:08,670 --> 00:08:14,350
let's talk about how to actually build

00:08:11,290 --> 00:08:18,330
this great UI because building great UIs

00:08:14,350 --> 00:08:21,940
requires mastery just like learning to

00:08:18,330 --> 00:08:26,620
use an instrument musical instrument or

00:08:21,940 --> 00:08:28,990
any kind of form of art or substitutive

00:08:26,620 --> 00:08:32,350
engineering there is a mastery that is

00:08:28,990 --> 00:08:36,940
required to achieve great results and

00:08:32,350 --> 00:08:39,520
mastery requires practice mastery also

00:08:36,940 --> 00:08:43,270
requires iterations because you want to

00:08:39,520 --> 00:08:45,400
go over many things many failures and of

00:08:43,270 --> 00:08:47,560
course failure is a part of the success

00:08:45,400 --> 00:08:50,830
because the more you fail the more you

00:08:47,560 --> 00:08:52,210
learn about how not to do something but

00:08:50,830 --> 00:08:55,270
the way you want to fail you want to

00:08:52,210 --> 00:08:58,440
fail fast and you want to fail safely

00:08:55,270 --> 00:09:01,350
you want to learn from that and move on

00:08:58,440 --> 00:09:06,389
unless you are adventurous type in which

00:09:01,350 --> 00:09:09,769
case all bets are off but for most users

00:09:06,389 --> 00:09:13,769
iterating quickly enables us to explore

00:09:09,769 --> 00:09:16,379
more options more variations fail very

00:09:13,769 --> 00:09:18,449
often and quickly incrementally improve

00:09:16,379 --> 00:09:20,910
and end up with a much better result

00:09:18,449 --> 00:09:23,819
than the first thing that we got working

00:09:20,910 --> 00:09:26,160
and was just somewhat working but if we

00:09:23,819 --> 00:09:28,439
optimize just for iteration cycle and

00:09:26,160 --> 00:09:30,660
fast iteration cycle without consistent

00:09:28,439 --> 00:09:32,579
consideration for the impact on the user

00:09:30,660 --> 00:09:35,850
experience the results could be

00:09:32,579 --> 00:09:38,040
disastrous balancing these two needs is

00:09:35,850 --> 00:09:41,490
challenging but it's a challenge that is

00:09:38,040 --> 00:09:43,920
worthwhile I bet that many of you had an

00:09:41,490 --> 00:09:45,899
experience where you were able to get

00:09:43,920 --> 00:09:48,779
the balance just right you fine-tuned

00:09:45,899 --> 00:09:51,600
your application stack and you optimized

00:09:48,779 --> 00:09:54,269
do user experience and the application

00:09:51,600 --> 00:09:55,139
was just bliss to work with and the

00:09:54,269 --> 00:09:57,660
users loved it

00:09:55,139 --> 00:10:00,120
and everything was awesome this is great

00:09:57,660 --> 00:10:04,079
but the problem arises when such

00:10:00,120 --> 00:10:05,339
applications need to scale and balancing

00:10:04,079 --> 00:10:10,529
the developer experience and user

00:10:05,339 --> 00:10:12,329
experience at scale is what changes the

00:10:10,529 --> 00:10:14,550
dynamics the stakes are much higher

00:10:12,329 --> 00:10:17,069
doing it repeatedly and sustainably

00:10:14,550 --> 00:10:19,069
takes the challenge to a new level and

00:10:17,069 --> 00:10:22,620
this is what angular is trying to do

00:10:19,069 --> 00:10:24,959
angular goals is to make developers

00:10:22,620 --> 00:10:27,120
successful in developing great user

00:10:24,959 --> 00:10:28,529
interfaces and don't get me wrong I

00:10:27,120 --> 00:10:31,290
don't think that we found the right

00:10:28,529 --> 00:10:33,300
balance yet we ourselves are still

00:10:31,290 --> 00:10:34,920
iterating we made a lot of progress in

00:10:33,300 --> 00:10:36,959
this area and I'm going to share some of

00:10:34,920 --> 00:10:41,050
that but we still have a lot of work to

00:10:36,959 --> 00:10:43,899
do and we invite you to be part of that

00:10:41,050 --> 00:10:45,640
a good example of what we've already

00:10:43,899 --> 00:10:48,160
accomplished is if you are starting a

00:10:45,640 --> 00:10:50,950
new project today you can start it by

00:10:48,160 --> 00:10:53,070
running command engine new this command

00:10:50,950 --> 00:10:55,269
will generate a new project with

00:10:53,070 --> 00:10:57,760
reasonably good default you have

00:10:55,269 --> 00:11:01,240
reasonably fast iteration cycle you have

00:10:57,760 --> 00:11:03,100
a set of built time checks that tell you

00:11:01,240 --> 00:11:04,990
when there are bugs in your code that

00:11:03,100 --> 00:11:07,269
you should fix and you also have a

00:11:04,990 --> 00:11:09,880
production optimization pipeline that

00:11:07,269 --> 00:11:13,140
shrinks your application to create as

00:11:09,880 --> 00:11:16,110
good user experience as possible

00:11:13,140 --> 00:11:17,970
well how much better how much does this

00:11:16,110 --> 00:11:20,130
optimization pipeline affect the

00:11:17,970 --> 00:11:22,200
application well if we take a simple

00:11:20,130 --> 00:11:23,870
example of angular IO which

00:11:22,200 --> 00:11:27,300
unsurprisingly is an angular application

00:11:23,870 --> 00:11:30,150
and look at the total sum of all of the

00:11:27,300 --> 00:11:32,130
JavaScript code that we iterate on

00:11:30,150 --> 00:11:34,110
during development including all the

00:11:32,130 --> 00:11:39,140
libraries including all of the lazy

00:11:34,110 --> 00:11:41,610
loaded chunks it's about 5 megabytes

00:11:39,140 --> 00:11:45,000
with the optimization pipeline we can

00:11:41,610 --> 00:11:47,550
reduce that size by 87% and this is

00:11:45,000 --> 00:11:50,160
before the gzip or broadly compression

00:11:47,550 --> 00:11:52,320
even kicks in so it's very significant

00:11:50,160 --> 00:11:55,020
improvement and in fact one of our

00:11:52,320 --> 00:11:56,940
former team members hunts he used to

00:11:55,020 --> 00:11:59,400
joke that if we keep on improving an

00:11:56,940 --> 00:12:02,070
optimization pipeline will soon end up

00:11:59,400 --> 00:12:05,910
with negative payload sizes this didn't

00:12:02,070 --> 00:12:08,160
quite happen but over the last few years

00:12:05,910 --> 00:12:09,510
we actually made a lot of improvements

00:12:08,160 --> 00:12:12,030
and gradually improve the user

00:12:09,510 --> 00:12:14,360
experience of all the applications built

00:12:12,030 --> 00:12:16,770
with angular and we actually

00:12:14,360 --> 00:12:22,670
accomplished improvement of the

00:12:16,770 --> 00:12:22,670
magnitude or one time

00:12:22,770 --> 00:12:27,120
but we're not done yet if we look at

00:12:25,310 --> 00:12:29,040
applications that have been built with

00:12:27,120 --> 00:12:31,700
angular today without any advanced

00:12:29,040 --> 00:12:35,190
tricks you usually see small

00:12:31,700 --> 00:12:38,730
applications in the neighborhood of 150

00:12:35,190 --> 00:12:41,340
to 200 kilobytes this is okay but it's

00:12:38,730 --> 00:12:43,920
not great and we know the theoretical

00:12:41,340 --> 00:12:46,320
currently a theoretical minimum for for

00:12:43,920 --> 00:12:48,420
angular is about order of magnitude

00:12:46,320 --> 00:12:50,040
lower than that so we will keep on

00:12:48,420 --> 00:12:51,960
chipping away and making things better

00:12:50,040 --> 00:12:54,360
but we are also balancing that with

00:12:51,960 --> 00:12:56,790
other priorities like improving

00:12:54,360 --> 00:12:59,670
economics of API is adding features

00:12:56,790 --> 00:13:01,760
fixing bugs now that we made so much

00:12:59,670 --> 00:13:04,710
progress in this in the area of

00:13:01,760 --> 00:13:06,600
optimizations and shrinking the payload

00:13:04,710 --> 00:13:08,550
size we feel like we have a little more

00:13:06,600 --> 00:13:12,090
space to focus on other things in other

00:13:08,550 --> 00:13:12,500
areas of the platform oscar mentioned

00:13:12,090 --> 00:13:15,600
yesterday

00:13:12,500 --> 00:13:17,670
v9 and IV have been a big milestone for

00:13:15,600 --> 00:13:19,560
us we delivered the significant user

00:13:17,670 --> 00:13:21,540
experience improvements to all of the

00:13:19,560 --> 00:13:24,960
angular applications that upgrade to

00:13:21,540 --> 00:13:27,360
angular version 9 but it wasn't just the

00:13:24,960 --> 00:13:30,030
users that benefit from version 9 it's

00:13:27,360 --> 00:13:32,190
also delivers because developers will

00:13:30,030 --> 00:13:36,840
benefit from lots of improvements that

00:13:32,190 --> 00:13:40,890
v9 is packed we improved build times

00:13:36,840 --> 00:13:42,990
testing times rebuilt times localization

00:13:40,890 --> 00:13:44,940
of the application I'm excited about

00:13:42,990 --> 00:13:46,200
many more improvements that are still in

00:13:44,940 --> 00:13:47,550
the pipeline that haven't been released

00:13:46,200 --> 00:13:49,120
yet and you'll see in the future

00:13:47,550 --> 00:13:51,400
releases

00:13:49,120 --> 00:13:54,730
while angular tries really hard to steer

00:13:51,400 --> 00:13:57,460
away from trouble and and keep you safe

00:13:54,730 --> 00:13:59,140
accidents do still happen and this

00:13:57,460 --> 00:14:04,650
accidents can result in poor user

00:13:59,140 --> 00:14:04,650
experience but there is a good news

00:14:04,910 --> 00:14:10,460
you can help us prevent many of these

00:14:07,700 --> 00:14:14,020
disasters I'm gonna share four tips with

00:14:10,460 --> 00:14:18,530
you on how to improve user experience

00:14:14,020 --> 00:14:21,110
for your application but surprisingly or

00:14:18,530 --> 00:14:22,790
rather unsurprisingly what we see and

00:14:21,110 --> 00:14:25,130
hear from developers that apply many of

00:14:22,790 --> 00:14:26,900
these tricks they often yield the

00:14:25,130 --> 00:14:32,210
developer experience improvements as

00:14:26,900 --> 00:14:34,160
well and this is because the less less

00:14:32,210 --> 00:14:36,080
pure dependencies are in the system

00:14:34,160 --> 00:14:39,110
the faster the system can operate and

00:14:36,080 --> 00:14:42,800
can process all of the code and result

00:14:39,110 --> 00:14:46,760
in in a small application so tip number

00:14:42,800 --> 00:14:48,920
one this one is relatively simple learn

00:14:46,760 --> 00:14:50,660
how to analyze your application and

00:14:48,920 --> 00:14:53,330
specifically learn how to perf analyze

00:14:50,660 --> 00:14:56,390
the application this might be simple for

00:14:53,330 --> 00:14:59,030
many of you but for others it can be

00:14:56,390 --> 00:15:01,310
very unapproachable and scary and in

00:14:59,030 --> 00:15:04,340
fact just a few weeks ago I ran this

00:15:01,310 --> 00:15:06,770
experiment at an enterprise summit we

00:15:04,340 --> 00:15:08,780
were hosting in our office when I

00:15:06,770 --> 00:15:11,510
challenged the crowds to share their

00:15:08,780 --> 00:15:14,060
applications with me and I will take a

00:15:11,510 --> 00:15:16,160
look at them and quickly analyze them

00:15:14,060 --> 00:15:18,560
and point out the biggest issues in

00:15:16,160 --> 00:15:20,570
those applications and I guaranteed that

00:15:18,560 --> 00:15:21,620
I would improve the user experience in

00:15:20,570 --> 00:15:23,930
developer experience for those

00:15:21,620 --> 00:15:26,180
applications with only minor changes to

00:15:23,930 --> 00:15:28,130
the application this experiment was so

00:15:26,180 --> 00:15:30,440
successful they're actually wanting to

00:15:28,130 --> 00:15:31,540
share some of these basic steps with you

00:15:30,440 --> 00:15:34,449
as well

00:15:31,540 --> 00:15:36,910
first

00:15:34,449 --> 00:15:38,559
please install sourcemap Explorer this

00:15:36,910 --> 00:15:40,419
is a tool that will help you analyze the

00:15:38,559 --> 00:15:42,879
output of your production builds you

00:15:40,419 --> 00:15:45,269
might be familiar with another tool

00:15:42,879 --> 00:15:48,129
called web pack bundle analyzer which

00:15:45,269 --> 00:15:50,319
looks similar but operates on a

00:15:48,129 --> 00:15:53,049
different level and often results in

00:15:50,319 --> 00:15:55,600
very misleading results so I strongly

00:15:53,049 --> 00:15:57,999
suggest that you use sort Explorer as

00:15:55,600 --> 00:16:00,759
your first tool when exploring these

00:15:57,999 --> 00:16:03,129
these issues and use webpack analyzer

00:16:00,759 --> 00:16:05,169
only if your debugging is very specific

00:16:03,129 --> 00:16:08,079
issues this is because web pack analyzer

00:16:05,169 --> 00:16:09,970
doesn't see and understand what cursors

00:16:08,079 --> 00:16:12,429
the minification step at the very end of

00:16:09,970 --> 00:16:14,919
the pipeline does and in this step we

00:16:12,429 --> 00:16:17,139
dead code element in eliminate a lot of

00:16:14,919 --> 00:16:19,649
code that web pack analyzer still

00:16:17,139 --> 00:16:23,290
considers us retained which is incorrect

00:16:19,649 --> 00:16:25,839
next turn on source maps in your

00:16:23,290 --> 00:16:27,819
production builds there is just a simple

00:16:25,839 --> 00:16:29,470
command you can run this will make a

00:16:27,819 --> 00:16:31,299
change to angular JSON and your source

00:16:29,470 --> 00:16:35,199
maps will be produced when you fill the

00:16:31,299 --> 00:16:38,739
application next run your production

00:16:35,199 --> 00:16:42,039
build and the last step is run source

00:16:38,739 --> 00:16:44,350
map Explorer on the output of of your

00:16:42,039 --> 00:16:46,629
production build what you'll see is

00:16:44,350 --> 00:16:48,309
something like this I know that the

00:16:46,629 --> 00:16:49,779
screenshot is very small and might be

00:16:48,309 --> 00:16:51,759
very difficult for you to read so don't

00:16:49,779 --> 00:16:55,329
worry about it but the point is that you

00:16:51,759 --> 00:16:57,850
see this boxes and on this boxes

00:16:55,329 --> 00:17:01,770
represent how the application is

00:16:57,850 --> 00:17:04,020
composed and what is it composed of

00:17:01,770 --> 00:17:05,850
in this particular case we're looking at

00:17:04,020 --> 00:17:09,000
output from a very small application

00:17:05,850 --> 00:17:11,250
that I'm building from my dear wife she

00:17:09,000 --> 00:17:13,560
needed a tool to build so I build it

00:17:11,250 --> 00:17:15,390
it's not very complex application but it

00:17:13,560 --> 00:17:17,209
uses material design components which

00:17:15,390 --> 00:17:20,130
have a lot of nice features and

00:17:17,209 --> 00:17:23,670
accessibility features so it's not a

00:17:20,130 --> 00:17:26,040
real application either so if you look

00:17:23,670 --> 00:17:28,560
at this this output on what I typically

00:17:26,040 --> 00:17:30,390
do is I go through series of steps I

00:17:28,560 --> 00:17:31,110
look at the diagram and try to interpret

00:17:30,390 --> 00:17:33,690
what I see

00:17:31,110 --> 00:17:35,970
I point out what doesn't look right I

00:17:33,690 --> 00:17:39,000
focus on the biggest issues first and

00:17:35,970 --> 00:17:42,390
then I hypothesize about the root cause

00:17:39,000 --> 00:17:46,410
and try to confirm it then I go and fix

00:17:42,390 --> 00:17:48,240
it and verify by remeasuring and then I

00:17:46,410 --> 00:17:51,450
just repeat the whole process again

00:17:48,240 --> 00:17:54,150
where I build production build rerun

00:17:51,450 --> 00:17:59,280
source map Explorer and see modified

00:17:54,150 --> 00:18:00,510
improved results in this product case we

00:17:59,280 --> 00:18:02,670
are dealing with the application that is

00:18:00,510 --> 00:18:05,100
relatively small it's 380 kilobytes

00:18:02,670 --> 00:18:09,240
that's for angular standards that's

00:18:05,100 --> 00:18:10,980
actually pretty good but I know that it

00:18:09,240 --> 00:18:12,870
could be better in a big production

00:18:10,980 --> 00:18:15,920
applications you'll see much higher

00:18:12,870 --> 00:18:18,300
number don't be too worried about that

00:18:15,920 --> 00:18:20,400
because as you go through this process

00:18:18,300 --> 00:18:23,130
you will see easy ways how to you can

00:18:20,400 --> 00:18:24,750
improve on the application so in this

00:18:23,130 --> 00:18:26,660
case the biggest box and you can

00:18:24,750 --> 00:18:29,070
probably you cannot probably read it is

00:18:26,660 --> 00:18:31,500
attributed to code that comes from

00:18:29,070 --> 00:18:33,420
angular core angular the framework there

00:18:31,500 --> 00:18:35,100
is not much me as an application

00:18:33,420 --> 00:18:37,110
developer in this case can do about this

00:18:35,100 --> 00:18:40,170
so I'll leave that to Cara and other

00:18:37,110 --> 00:18:42,450
people too to deal with this part and

00:18:40,170 --> 00:18:45,040
make it smaller and this were actively

00:18:42,450 --> 00:18:48,040
working on

00:18:45,040 --> 00:18:50,290
the next thing that is quite big is this

00:18:48,040 --> 00:18:52,210
box at the ball at the bottom and that's

00:18:50,290 --> 00:18:53,620
a box that represents style sheets these

00:18:52,210 --> 00:18:55,750
are style sheets that come from material

00:18:53,620 --> 00:18:59,230
designing it's actually surprising that

00:18:55,750 --> 00:19:01,690
just for me to have nails nice style

00:18:59,230 --> 00:19:04,590
sheet defaults there's actually quite a

00:19:01,690 --> 00:19:07,330
lot of code that is associated with it

00:19:04,590 --> 00:19:08,950
I'm not sure if I can do anything about

00:19:07,330 --> 00:19:10,480
this as an application developer maybe I

00:19:08,950 --> 00:19:12,250
can try removing it and see what my

00:19:10,480 --> 00:19:15,580
application looks without the theme and

00:19:12,250 --> 00:19:18,040
the style sheets but maybe the right

00:19:15,580 --> 00:19:20,799
thing in this case would be to talk to

00:19:18,040 --> 00:19:22,720
Jeremy or file an issue against angular

00:19:20,799 --> 00:19:25,990
components and say hey this style she's

00:19:22,720 --> 00:19:31,090
actually pretty big could you make could

00:19:25,990 --> 00:19:33,190
you do anything about that the next the

00:19:31,090 --> 00:19:34,809
next big box is animations these are

00:19:33,190 --> 00:19:37,090
angular animations is code that power

00:19:34,809 --> 00:19:38,559
singular animations in my particular

00:19:37,090 --> 00:19:41,320
application I'm actually surprised that

00:19:38,559 --> 00:19:43,360
I see that animations are being pulled

00:19:41,320 --> 00:19:45,100
into my application because I don't

00:19:43,360 --> 00:19:47,620
really have any animations as far as I

00:19:45,100 --> 00:19:50,470
know in my application so maybe I should

00:19:47,620 --> 00:19:52,510
look and see am i accidentally importing

00:19:50,470 --> 00:19:55,720
animations but I don't need them and if

00:19:52,510 --> 00:19:59,770
I don't need them remove them the next

00:19:55,720 --> 00:20:02,470
one is down here the polyfill zone ge'ez

00:19:59,770 --> 00:20:03,429
so zone JIS is a library that allows us

00:20:02,470 --> 00:20:06,520
to trigger change detection

00:20:03,429 --> 00:20:08,650
automatically in my application the

00:20:06,520 --> 00:20:13,480
application is actually so small that if

00:20:08,650 --> 00:20:15,610
I wanted to shave extra 35 kilobytes I

00:20:13,480 --> 00:20:18,520
could actually do without zone j/s and

00:20:15,610 --> 00:20:20,620
trigger change detection manually I

00:20:18,520 --> 00:20:21,910
don't know yet if that's what I want to

00:20:20,620 --> 00:20:24,000
do in my application but that's

00:20:21,910 --> 00:20:28,000
something that that should be on my list

00:20:24,000 --> 00:20:30,040
and the last one is forms in this case

00:20:28,000 --> 00:20:32,530
it's surprising that that much code is

00:20:30,040 --> 00:20:34,299
being pulled into forms but if I look at

00:20:32,530 --> 00:20:37,360
my application there's actually a lot of

00:20:34,299 --> 00:20:40,360
UI patterns in my application that

00:20:37,360 --> 00:20:42,730
require accessibility affordances and I

00:20:40,360 --> 00:20:45,130
know that the forms library provides

00:20:42,730 --> 00:20:47,470
those so that seems like a good

00:20:45,130 --> 00:20:50,340
trade-off in order for my application to

00:20:47,470 --> 00:20:50,340
be accessible

00:20:50,420 --> 00:20:56,330
with this list I can then go and explore

00:20:53,030 --> 00:20:59,570
and tweak my application filed by bugs

00:20:56,330 --> 00:21:01,580
against angular or our fix issues in my

00:20:59,570 --> 00:21:04,070
application if you try this on the

00:21:01,580 --> 00:21:05,720
application you'll probably see much

00:21:04,070 --> 00:21:08,150
higher numbers because my application is

00:21:05,720 --> 00:21:09,560
very small and what I bet you'll see is

00:21:08,150 --> 00:21:11,210
that most of the problems will actually

00:21:09,560 --> 00:21:12,950
come from third-party libraries and

00:21:11,210 --> 00:21:14,720
we'll talk about those in a bit but

00:21:12,950 --> 00:21:17,510
before we get there I just want to

00:21:14,720 --> 00:21:20,450
quickly summarize the tools that do

00:21:17,510 --> 00:21:21,920
performance analysis and testing so we

00:21:20,450 --> 00:21:24,020
already talked about source nor Explorer

00:21:21,920 --> 00:21:27,080
which is invaluable when it comes to

00:21:24,020 --> 00:21:30,560
analyzing what actually gets shipped

00:21:27,080 --> 00:21:32,930
into the browser the next one I really

00:21:30,560 --> 00:21:37,610
like is a lighthouse and its online

00:21:32,930 --> 00:21:41,840
variant web dev slash measure this is a

00:21:37,610 --> 00:21:44,540
tool that runs a lot of reports and

00:21:41,840 --> 00:21:46,790
audits on application and allows me to

00:21:44,540 --> 00:21:48,620
get lots of insights and the last one I

00:21:46,790 --> 00:21:51,650
use quite frequently is webpagetest.org

00:21:48,620 --> 00:21:54,260
slash easy this is a pre-configured

00:21:51,650 --> 00:21:56,180
version of a page test that allows me to

00:21:54,260 --> 00:21:59,200
test my application on real devices on

00:21:56,180 --> 00:22:01,940
real networks which is super super handy

00:21:59,200 --> 00:22:04,250
let's move to the tip number two I

00:22:01,940 --> 00:22:06,290
already mentioned the file libraries and

00:22:04,250 --> 00:22:10,130
them being a common source of problems

00:22:06,290 --> 00:22:12,170
um so I really advise you if you start

00:22:10,130 --> 00:22:14,920
clicking on dependencies on third-party

00:22:12,170 --> 00:22:18,680
code do it very wisely

00:22:14,920 --> 00:22:21,530
you might however it kind of stuck and

00:22:18,680 --> 00:22:23,930
not know what wisely means and which

00:22:21,530 --> 00:22:26,600
libraries are good so I give you one

00:22:23,930 --> 00:22:30,860
simple tip if a library that you want to

00:22:26,600 --> 00:22:34,550
depend on in your browser code ships in

00:22:30,860 --> 00:22:39,230
commonjs or AMD format as the default or

00:22:34,550 --> 00:22:41,450
the primary way and yes module format is

00:22:39,230 --> 00:22:43,130
not available do not use it this will

00:22:41,450 --> 00:22:47,240
cause lots of the optimizations in your

00:22:43,130 --> 00:22:49,010
build pipeline and make your application

00:22:47,240 --> 00:22:52,400
much bigger as well as make your

00:22:49,010 --> 00:22:56,560
application built much slower instead

00:22:52,400 --> 00:23:00,640
prefer libraries that are bundled and

00:22:56,560 --> 00:23:03,230
published to NPM in the ES module format

00:23:00,640 --> 00:23:03,700
this is easily recognizable if you just

00:23:03,230 --> 00:23:06,880
look at the

00:23:03,700 --> 00:23:09,130
if you look at the package.json and in

00:23:06,880 --> 00:23:10,780
the future I see I think that we'll see

00:23:09,130 --> 00:23:14,020
more and more libraries using the is

00:23:10,780 --> 00:23:16,840
module format as the default tip number

00:23:14,020 --> 00:23:21,130
three lazy load everything or almost

00:23:16,840 --> 00:23:24,130
everything these days is actually quite

00:23:21,130 --> 00:23:25,720
easy you can use dynamic import you can

00:23:24,130 --> 00:23:28,870
laser load images you can list a lot

00:23:25,720 --> 00:23:32,590
other assets please do so in angular

00:23:28,870 --> 00:23:34,450
applications the only current tree

00:23:32,590 --> 00:23:36,190
sticking point is lazy loading of

00:23:34,450 --> 00:23:38,460
components and I'll mention that as

00:23:36,190 --> 00:23:41,740
something that we actually working on

00:23:38,460 --> 00:23:45,940
tip number four the last tip stay up to

00:23:41,740 --> 00:23:48,580
date I already mentioned that staying up

00:23:45,940 --> 00:23:51,550
to date helps you get all the benefits

00:23:48,580 --> 00:23:53,410
very quickly very easily we put a lot of

00:23:51,550 --> 00:23:56,230
effort into not breaking application and

00:23:53,410 --> 00:23:58,300
making the updates very automated and to

00:23:56,230 --> 00:24:00,250
do that we actually have ng update

00:23:58,300 --> 00:24:02,410
command which does several things it

00:24:00,250 --> 00:24:04,780
updates your dependencies it runs

00:24:02,410 --> 00:24:07,330
automated migrations that either migrate

00:24:04,780 --> 00:24:09,940
you over from the brigade api's to new

00:24:07,330 --> 00:24:12,640
api's or even improve your configuration

00:24:09,940 --> 00:24:15,520
of your project to be more aligned with

00:24:12,640 --> 00:24:18,130
better defaults and help you catch

00:24:15,520 --> 00:24:19,930
issues on whether they are bugs or

00:24:18,130 --> 00:24:21,940
performance issues and lastly it will

00:24:19,930 --> 00:24:23,490
also point you to migration docs so that

00:24:21,940 --> 00:24:27,510
you know what happened to your project

00:24:23,490 --> 00:24:27,510
whenever we make changes to your project

00:24:28,330 --> 00:24:33,519
some people still wonder if ng update

00:24:30,820 --> 00:24:36,039
works the good news is it does and we

00:24:33,519 --> 00:24:38,289
know some because from our telemetry as

00:24:36,039 --> 00:24:40,929
well as from surveys we see that most

00:24:38,289 --> 00:24:43,570
users are either on the latest or the

00:24:40,929 --> 00:24:45,309
last two versions of angular so ng

00:24:43,570 --> 00:24:47,200
update really works and makes this easy

00:24:45,309 --> 00:24:48,860
please use it it's going to make such a

00:24:47,200 --> 00:24:51,710
big difference

00:24:48,860 --> 00:24:55,190
um we covered quite a bit a lot of stuff

00:24:51,710 --> 00:24:57,500
in a short time there is still one more

00:24:55,190 --> 00:24:58,549
thing that I want to mention we're

00:24:57,500 --> 00:25:00,710
continuously working on more

00:24:58,549 --> 00:25:03,260
improvements we can't commit to

00:25:00,710 --> 00:25:05,420
timelines or exact specifications yet

00:25:03,260 --> 00:25:07,610
but I can tell you what we're exploring

00:25:05,420 --> 00:25:09,299
and what do you mind see coming in the

00:25:07,610 --> 00:25:11,730
future

00:25:09,299 --> 00:25:14,489
so some of the ideas we're exploring our

00:25:11,730 --> 00:25:17,489
better stricture default

00:25:14,489 --> 00:25:18,659
I'm just saying strict very carefully

00:25:17,489 --> 00:25:20,070
because we don't want to break

00:25:18,659 --> 00:25:22,049
applications we don't want to make it

00:25:20,070 --> 00:25:23,940
difficult for you to get to the new

00:25:22,049 --> 00:25:27,210
version of angular so we're evaluating

00:25:23,940 --> 00:25:28,980
every stricter default or better default

00:25:27,210 --> 00:25:30,570
and the impact business applications and

00:25:28,980 --> 00:25:32,970
coming up with strategies how to make it

00:25:30,570 --> 00:25:35,340
easier for you to get on this better

00:25:32,970 --> 00:25:37,049
default the next one is highly requested

00:25:35,340 --> 00:25:40,919
first-class support for dynamic

00:25:37,049 --> 00:25:43,950
component lazy loading this is currently

00:25:40,919 --> 00:25:45,929
possible in angular ib made it much

00:25:43,950 --> 00:25:50,340
easier but there are still few gotchas

00:25:45,929 --> 00:25:53,070
so we're not documenting and asking you

00:25:50,340 --> 00:25:55,769
to do in one particular way this is one

00:25:53,070 --> 00:25:57,600
of the top three requests that I hear

00:25:55,769 --> 00:25:59,970
from developers and we're quite aware

00:25:57,600 --> 00:26:03,179
that this is something that you would

00:25:59,970 --> 00:26:06,149
like and we explore it the next one is

00:26:03,179 --> 00:26:09,749
warning and errors when we detect common

00:26:06,149 --> 00:26:11,549
performance issues a good example of

00:26:09,749 --> 00:26:13,859
this is third-party libraries would it

00:26:11,549 --> 00:26:16,830
be nice if you started depending on a

00:26:13,859 --> 00:26:19,289
library but the library ships on in

00:26:16,830 --> 00:26:20,190
common J's format and we told you this

00:26:19,289 --> 00:26:22,950
is one of the things that we're

00:26:20,190 --> 00:26:25,350
exploring we definitely want to let you

00:26:22,950 --> 00:26:27,450
know that that is happening we're just

00:26:25,350 --> 00:26:29,570
trying to figure out how to do it in an

00:26:27,450 --> 00:26:32,369
ecosystem that is currently full of

00:26:29,570 --> 00:26:39,210
libraries that are shipped and published

00:26:32,369 --> 00:26:40,559
in a less than great format I'm looking

00:26:39,210 --> 00:26:42,179
at both the libraries in the angular

00:26:40,559 --> 00:26:44,549
ecosystem as well as at the wider

00:26:42,179 --> 00:26:46,320
ecosystem because there are many many

00:26:44,549 --> 00:26:48,859
commonly used libraries that are still

00:26:46,320 --> 00:26:52,379
shipped in in formats that are not great

00:26:48,859 --> 00:26:54,629
and lastly we have a lot of under the

00:26:52,379 --> 00:26:56,460
hood cleanup to do in angular and

00:26:54,629 --> 00:26:58,499
especially now that Ivy's done there's a

00:26:56,460 --> 00:27:01,019
lot of code that we can remove and that

00:26:58,499 --> 00:27:03,739
will make improvements both in user

00:27:01,019 --> 00:27:03,739
experience and though

00:27:03,960 --> 00:27:11,490
so we covered quite a lot I hope that

00:27:08,820 --> 00:27:13,850
this is gonna be useful everybody so

00:27:11,490 --> 00:27:16,289
let's just quickly summarize um I

00:27:13,850 --> 00:27:18,929
strongly believe that great you guys

00:27:16,289 --> 00:27:20,970
make people's life better and that's why

00:27:18,929 --> 00:27:23,610
we should care about user experience and

00:27:20,970 --> 00:27:25,799
user experience really matters I do

00:27:23,610 --> 00:27:28,409
believe that great user experiences are

00:27:25,799 --> 00:27:30,240
fast and feel real we have ways to

00:27:28,409 --> 00:27:31,860
measure this we should do so we should

00:27:30,240 --> 00:27:35,490
analyze them we should optimize for

00:27:31,860 --> 00:27:37,970
metrics that prove improved user

00:27:35,490 --> 00:27:41,669
satisfaction and improve user experience

00:27:37,970 --> 00:27:44,090
we also know that to build great user

00:27:41,669 --> 00:27:47,730
experiences mean to iterate quickly and

00:27:44,090 --> 00:27:50,159
we need to safely pay on a very often

00:27:47,730 --> 00:27:52,649
the more we fail the quickly we can more

00:27:50,159 --> 00:27:55,860
and more quickly can iterate the faster

00:27:52,649 --> 00:27:58,259
we'll find a better user experience that

00:27:55,860 --> 00:28:00,090
the users will be really happy with but

00:27:58,259 --> 00:28:02,679
to do so we need to improve the rover

00:28:00,090 --> 00:28:05,679
experience as well

00:28:02,679 --> 00:28:08,480
angular tries to balance these two

00:28:05,679 --> 00:28:11,510
experience and then what experience but

00:28:08,480 --> 00:28:13,429
tries to does it tries to do it at scale

00:28:11,510 --> 00:28:15,789
whether you're working on a large

00:28:13,429 --> 00:28:18,980
project on a large team in larger

00:28:15,789 --> 00:28:22,760
organization we're trying to improve the

00:28:18,980 --> 00:28:25,070
default and guide you in a way that will

00:28:22,760 --> 00:28:28,340
result in great developer experience but

00:28:25,070 --> 00:28:29,870
also the user experience and lastly if

00:28:28,340 --> 00:28:32,210
there's just one thing that I want you

00:28:29,870 --> 00:28:34,909
to remember from this heart it's please

00:28:32,210 --> 00:28:36,799
stay up to date with angular because as

00:28:34,909 --> 00:28:39,049
we are improving the platform the

00:28:36,799 --> 00:28:40,940
framework the CLI everything is getting

00:28:39,049 --> 00:28:44,720
better then you'll be getting all these

00:28:40,940 --> 00:28:46,340
improvements with that thank you very

00:28:44,720 --> 00:28:48,040
much for listening

00:28:46,340 --> 00:28:51,240
stay healthy everybody

00:28:48,040 --> 00:28:51,560
[Music]

00:28:51,240 --> 00:28:57,360
[Applause]

00:28:51,560 --> 00:28:59,400
[Music]

00:28:57,360 --> 00:29:04,109
[Applause]

00:28:59,400 --> 00:29:04,109

YouTube URL: https://www.youtube.com/watch?v=mShzv9QE1Qc


