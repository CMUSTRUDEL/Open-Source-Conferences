Title: State of RxJS | Ben Lesh | ng-conf: Hardwired
Publication date: 2020-06-08
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

RxJS has been steadily growing in popularity and usage as reactive programming paradigms become more the norm. RxJS core team member Ben Lesh will talk about upcoming pipeline features for RxJS, ecosystem projects, community updates, and whatâ€™s new in RxJS with Angular.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,270
[Applause]

00:00:05,920 --> 00:00:20,710
[Music]

00:00:16,270 --> 00:00:22,380
so unfortunately my friend Tracy Lee

00:00:20,710 --> 00:00:24,280
can't be with us today she's she

00:00:22,380 --> 00:00:25,450
originally she was gonna do this talk

00:00:24,280 --> 00:00:26,619
and that she asked me to help and then

00:00:25,450 --> 00:00:29,410
she had to pull out entirely for

00:00:26,619 --> 00:00:32,230
personal reasons but on her behalf I do

00:00:29,410 --> 00:00:33,280
have a Bob Ross finger puppet which is

00:00:32,230 --> 00:00:35,800
right here it's probably the best

00:00:33,280 --> 00:00:37,570
investment ever made there are no broken

00:00:35,800 --> 00:00:38,050
promises only observables waiting to

00:00:37,570 --> 00:00:40,960
happen

00:00:38,050 --> 00:00:42,190
so yeah that's enough weirdness from my

00:00:40,960 --> 00:00:44,500
house but I have that on my desk all the

00:00:42,190 --> 00:00:47,410
time that's super important to me uh-huh

00:00:44,500 --> 00:00:50,680
all right so I want to talk a little bit

00:00:47,410 --> 00:00:52,480
about the state of our XJS again my name

00:00:50,680 --> 00:00:54,850
is Ben Lesh I'm currently a senior

00:00:52,480 --> 00:00:58,329
engineer at Citadel securities I am also

00:00:54,850 --> 00:01:00,040
the lead on the rxjs project and I am

00:00:58,329 --> 00:01:01,899
formerly of the angular team as many of

00:01:00,040 --> 00:01:05,140
you know so it's good to be back and

00:01:01,899 --> 00:01:07,330
become one of these weird circumstances

00:01:05,140 --> 00:01:09,040
so I want to talk a little bit just

00:01:07,330 --> 00:01:11,229
really briefly I want to prefix this

00:01:09,040 --> 00:01:13,030
with what our goals are with our chests

00:01:11,229 --> 00:01:15,160
as that like the arts just core team's

00:01:13,030 --> 00:01:17,050
goals and really we're a utility library

00:01:15,160 --> 00:01:19,660
so we can associate it a lot with

00:01:17,050 --> 00:01:21,759
angular but I use it in react projects I

00:01:19,660 --> 00:01:22,929
use it and node we use it all over the

00:01:21,759 --> 00:01:25,330
place I've seen it used all over the

00:01:22,929 --> 00:01:27,190
place so our goals are really around

00:01:25,330 --> 00:01:28,750
trying to be stable and dependable with

00:01:27,190 --> 00:01:30,640
our releases and try not to break

00:01:28,750 --> 00:01:33,100
throats having smooth updates between

00:01:30,640 --> 00:01:35,080
releases we want to improve your

00:01:33,100 --> 00:01:36,789
developer experience as time goes on

00:01:35,080 --> 00:01:38,679
and we want to try to make arcs just

00:01:36,789 --> 00:01:41,890
smaller and faster to improve your user

00:01:38,679 --> 00:01:43,390
experience without ideally without you

00:01:41,890 --> 00:01:47,470
even knowing as you as you update over

00:01:43,390 --> 00:01:51,910
time so but some start off with a little

00:01:47,470 --> 00:01:53,890
news so the news around this is around

00:01:51,910 --> 00:01:57,520
the community we've got for one thing

00:01:53,890 --> 00:01:59,410
RCS is growing a lot so we've got about

00:01:57,520 --> 00:02:01,179
18 million more than 18 million

00:01:59,410 --> 00:02:02,530
downloads of weeks now which is ups from

00:02:01,179 --> 00:02:06,310
like 8 million at this time last year

00:02:02,530 --> 00:02:07,630
and that's that's a lot and it's NPM

00:02:06,310 --> 00:02:09,580
downloads though so you have to take

00:02:07,630 --> 00:02:11,410
that with a grain of salt because you

00:02:09,580 --> 00:02:13,420
could write a bot that did that if you

00:02:11,410 --> 00:02:15,160
wanted but it's I mean it's a fairly

00:02:13,420 --> 00:02:17,580
organic line except for that weird dip

00:02:15,160 --> 00:02:20,260
in December onto an app in there but

00:02:17,580 --> 00:02:21,400
it's it's showing growth and there's a

00:02:20,260 --> 00:02:24,550
lot of other signs of the community is

00:02:21,400 --> 00:02:26,350
growing as well I also want to take the

00:02:24,550 --> 00:02:29,069
time to welcome our newest core team

00:02:26,350 --> 00:02:31,109
member who's Moshe and I think

00:02:29,069 --> 00:02:32,219
i butchered his last time I had it might

00:02:31,109 --> 00:02:35,939
have had been an extra ghee in there I'm

00:02:32,219 --> 00:02:38,329
sorry Moshe but I met Moshe at Google he

00:02:35,939 --> 00:02:42,180
was one of the Googlers that helped me

00:02:38,329 --> 00:02:43,889
start a kind of a task force inside of

00:02:42,180 --> 00:02:45,750
Google to make sure that arks just a

00:02:43,889 --> 00:02:48,060
succinct inside of Google and he's now

00:02:45,750 --> 00:02:50,430
at Bloomberg and he's doing some amazing

00:02:48,060 --> 00:02:52,049
stuff with typescript he's got some

00:02:50,430 --> 00:02:53,549
really interesting ideas for things we

00:02:52,049 --> 00:02:54,870
can do and arts just to make your

00:02:53,549 --> 00:02:58,680
experience better so I'm really really

00:02:54,870 --> 00:03:01,290
happy to have him aboard very smart guy

00:02:58,680 --> 00:03:03,480
another thing that happened in the last

00:03:01,290 --> 00:03:05,340
year but just just this last September

00:03:03,480 --> 00:03:06,810
is we had our first ever all rxjs

00:03:05,340 --> 00:03:08,010
conference which was amazing it was a

00:03:06,810 --> 00:03:12,210
smaller conference but it was run by

00:03:08,010 --> 00:03:14,250
frosty and friends and it happened in

00:03:12,210 --> 00:03:15,570
Vegas there are some really great videos

00:03:14,250 --> 00:03:16,860
unfortunately that because of a

00:03:15,570 --> 00:03:18,930
technical gaffe they didn't get all of

00:03:16,860 --> 00:03:20,850
the videos but you can when I get this

00:03:18,930 --> 00:03:21,990
this out you can go to the youtube link

00:03:20,850 --> 00:03:23,880
and watch them with the videos some of

00:03:21,990 --> 00:03:26,400
the best talks actually Laura and the

00:03:23,880 --> 00:03:29,400
best talks I've ever seen on rxjs in a

00:03:26,400 --> 00:03:31,110
collection worth so I think the last

00:03:29,400 --> 00:03:36,380
thing that that folks heard is I was

00:03:31,110 --> 00:03:39,540
talking about ArcGIS Live Vegas just so

00:03:36,380 --> 00:03:41,580
you're aware this is a this was a great

00:03:39,540 --> 00:03:43,830
great confidence that happened last

00:03:41,580 --> 00:03:45,990
September put on by frosty and other

00:03:43,830 --> 00:03:48,300
folks that you probably know there was a

00:03:45,990 --> 00:03:50,160
smaller conference but some of the best

00:03:48,300 --> 00:03:52,290
talks have ever seen actually all of the

00:03:50,160 --> 00:03:55,050
best talks have ever seen in rxjs where

00:03:52,290 --> 00:03:56,460
we're at this conference and a lot of

00:03:55,050 --> 00:03:58,080
them are recorded some of them didn't

00:03:56,460 --> 00:04:00,210
make it through because of technical

00:03:58,080 --> 00:04:01,920
difficulties with recordings but you can

00:04:00,210 --> 00:04:03,239
find those on YouTube and I'll make sure

00:04:01,920 --> 00:04:06,780
to get these slides out so you can get

00:04:03,239 --> 00:04:08,489
that link there is another Arceus live

00:04:06,780 --> 00:04:09,720
coming up in September it was supposed

00:04:08,489 --> 00:04:13,380
to be a few weeks ago but because of

00:04:09,720 --> 00:04:14,840
current events it didn't happen so it's

00:04:13,380 --> 00:04:17,459
it's gonna be coming up in September

00:04:14,840 --> 00:04:18,630
hopefully we can do it on site if not

00:04:17,459 --> 00:04:21,150
maybe it'll have to be remote or

00:04:18,630 --> 00:04:23,220
something like that because it's again

00:04:21,150 --> 00:04:24,600
current events so hopefully the world

00:04:23,220 --> 00:04:26,700
straightens itself out for them and

00:04:24,600 --> 00:04:28,260
we'll see that you can find out more

00:04:26,700 --> 00:04:32,700
information about that ARC's Geist out

00:04:28,260 --> 00:04:34,890
live so let's let's talk about what's

00:04:32,700 --> 00:04:38,550
new in version 7

00:04:34,890 --> 00:04:40,260
so version 7 is that I skip something oh

00:04:38,550 --> 00:04:42,240
my gosh I'd skip the most important

00:04:40,260 --> 00:04:44,790
thing so this this is the biggest thing

00:04:42,240 --> 00:04:46,470
that's happened is this week our XS 7

00:04:44,790 --> 00:04:48,870
went to beta it's been an alpha for a

00:04:46,470 --> 00:04:53,640
long time you can still install it from

00:04:48,870 --> 00:04:54,990
arcs just at next and it said 700 bit is

00:04:53,640 --> 00:04:56,580
zero right now they'll probably be a

00:04:54,990 --> 00:04:57,840
beta one pretty quickly because there's

00:04:56,580 --> 00:05:01,050
a few things that we want to fix in

00:04:57,840 --> 00:05:03,270
there but again it's in beta it's it's

00:05:01,050 --> 00:05:04,260
pretty stable and it's got a lot of good

00:05:03,270 --> 00:05:07,280
stuff in it that I'm going to tell you

00:05:04,260 --> 00:05:07,280
about here shortly

00:05:08,480 --> 00:05:15,170
it's jumping slides I'm sorry all right

00:05:11,750 --> 00:05:16,820
so what's new into seven dodo

00:05:15,170 --> 00:05:18,230
so this is what's new in the beta

00:05:16,820 --> 00:05:19,700
release we've got improved stability and

00:05:18,230 --> 00:05:21,560
what I mean by that is we have a process

00:05:19,700 --> 00:05:23,750
in place now to try to make sure that we

00:05:21,560 --> 00:05:26,630
don't have any break it is between patch

00:05:23,750 --> 00:05:29,180
releases I'll talk about that shortly we

00:05:26,630 --> 00:05:31,310
have better types care support so trying

00:05:29,180 --> 00:05:32,480
to infer types for you much better and

00:05:31,310 --> 00:05:35,090
we're trying to use the latest features

00:05:32,480 --> 00:05:36,740
of typescript 3 we've got some new

00:05:35,090 --> 00:05:39,560
functionality that's exciting that I'm

00:05:36,740 --> 00:05:41,570
happy to tell you about and deprecations

00:05:39,560 --> 00:05:42,680
lots of dedications but there are things

00:05:41,570 --> 00:05:44,300
have been built up over time and we

00:05:42,680 --> 00:05:46,370
haven't removed anything yet because we

00:05:44,300 --> 00:05:48,170
don't want people to break because we

00:05:46,370 --> 00:05:51,620
removed an API and we've got a plan for

00:05:48,170 --> 00:05:53,090
that over the course of version 7 so I'm

00:05:51,620 --> 00:05:54,830
going to talk about that when I talk

00:05:53,090 --> 00:05:57,880
about what's gonna happen in version 7.1

00:05:54,830 --> 00:05:57,880
and and beyond

00:05:58,520 --> 00:06:00,580
you

00:06:01,100 --> 00:06:06,720
all right it's it's really jumping on

00:06:04,710 --> 00:06:09,720
slides I don't know why all right so I

00:06:06,720 --> 00:06:12,810
want to talk about improved stability so

00:06:09,720 --> 00:06:17,040
with improved stability what I'm talking

00:06:12,810 --> 00:06:18,780
about is we are working with partnering

00:06:17,040 --> 00:06:20,910
with Google so as a lot of you know I

00:06:18,780 --> 00:06:22,230
used to work at Google when I left

00:06:20,910 --> 00:06:23,940
Google there were some concern about

00:06:22,230 --> 00:06:26,190
whether or not Google would be able to

00:06:23,940 --> 00:06:29,670
keep ArcGIS up-to-date internally and

00:06:26,190 --> 00:06:30,750
they were and it was to the point where

00:06:29,670 --> 00:06:32,220
they they were worried they were gonna

00:06:30,750 --> 00:06:35,880
have to work our chest or something like

00:06:32,220 --> 00:06:36,990
that there's there's no reason it hasn't

00:06:35,880 --> 00:06:41,040
ever really been a good reason to do

00:06:36,990 --> 00:06:42,600
that but it out of just to try to make

00:06:41,040 --> 00:06:44,010
sure that Google was in good place and

00:06:42,600 --> 00:06:47,550
to make sure that rxjs was in a good

00:06:44,010 --> 00:06:49,560
place I worked with Moshe

00:06:47,550 --> 00:06:51,660
who I mentioned earlier who's our newest

00:06:49,560 --> 00:06:54,920
starts just core team for now who worked

00:06:51,660 --> 00:06:58,740
at Google to set up a task force that

00:06:54,920 --> 00:07:00,450
puts the latest version of ArcGIS into

00:06:58,740 --> 00:07:02,310
Google 3 which is their monitor

00:07:00,450 --> 00:07:03,660
repository and runs it against all of

00:07:02,310 --> 00:07:05,940
their build targets so thousands and

00:07:03,660 --> 00:07:08,070
thousands of build targets tons of apps

00:07:05,940 --> 00:07:11,160
using arcs just in every way you can

00:07:08,070 --> 00:07:12,660
imagine to see what breaks and they

00:07:11,160 --> 00:07:13,980
report to us and let us know what breaks

00:07:12,660 --> 00:07:16,410
and we work with them to resolve those

00:07:13,980 --> 00:07:19,950
issues well before you would ever see a

00:07:16,410 --> 00:07:21,750
published release on NPM so that's going

00:07:19,950 --> 00:07:23,790
to do a lot to make sure that new

00:07:21,750 --> 00:07:27,690
especially patch releases have no

00:07:23,790 --> 00:07:30,270
braking changes in them the other thing

00:07:27,690 --> 00:07:31,290
and that's going on is up cheese MANET I

00:07:30,270 --> 00:07:36,060
don't know understand why it says

00:07:31,290 --> 00:07:37,830
lunatic a two piece lights sorry so the

00:07:36,060 --> 00:07:39,930
the other thing about this is these two

00:07:37,830 --> 00:07:41,370
Googlers are helping us with these

00:07:39,930 --> 00:07:43,770
efforts and I really want to thank them

00:07:41,370 --> 00:07:46,440
Christine and Michael James I don't know

00:07:43,770 --> 00:07:49,080
if they're watching but they have worked

00:07:46,440 --> 00:07:51,210
tirelessly to help us update Google 3

00:07:49,080 --> 00:07:52,350
through this it's a major release that

00:07:51,210 --> 00:07:54,270
we're doing right now from 6:00 to 7:00

00:07:52,350 --> 00:07:56,400
so there are some breaking changes so

00:07:54,270 --> 00:07:58,050
they've been working to update through

00:07:56,400 --> 00:08:00,930
those breaking changes and working with

00:07:58,050 --> 00:08:01,980
us on what what we need to change on our

00:08:00,930 --> 00:08:03,510
end and what they might need to change

00:08:01,980 --> 00:08:04,860
on their end in order to get those

00:08:03,510 --> 00:08:07,050
things out can make sure that this

00:08:04,860 --> 00:08:09,389
release is good

00:08:07,050 --> 00:08:13,110
so another thing is we're on the latest

00:08:09,389 --> 00:08:14,370
version of tight rib now so 308 and that

00:08:13,110 --> 00:08:15,840
means we can use the latest features and

00:08:14,370 --> 00:08:17,970
type scripts and we've made a lot of

00:08:15,840 --> 00:08:19,889
typing's changes particularly things to

00:08:17,970 --> 00:08:24,750
generics that will help you out so you

00:08:19,889 --> 00:08:27,180
get better type inference in rxjs so for

00:08:24,750 --> 00:08:29,009
example an argument inference now what I

00:08:27,180 --> 00:08:31,620
what I mean by this is basically

00:08:29,009 --> 00:08:35,039
everywhere we can where you are passing

00:08:31,620 --> 00:08:36,779
in a rest of arguments we do our best to

00:08:35,039 --> 00:08:38,789
try to figure out what those arguments

00:08:36,779 --> 00:08:40,140
are what say there's a whole bunch of

00:08:38,789 --> 00:08:42,779
different observables or something like

00:08:40,140 --> 00:08:44,039
that and return an observable that

00:08:42,779 --> 00:08:45,360
matches all those types

00:08:44,039 --> 00:08:47,279
so before we might have had an upper

00:08:45,360 --> 00:08:49,440
bound limit of like eight or nine values

00:08:47,279 --> 00:08:52,709
and then after that we could infer the

00:08:49,440 --> 00:08:54,329
type anymore now we have in you can go

00:08:52,709 --> 00:08:57,270
up to any number of values and type

00:08:54,329 --> 00:08:58,980
script will figure it out so one example

00:08:57,270 --> 00:09:00,959
of this would be the simplest one which

00:08:58,980 --> 00:09:04,050
is of if you have more than nine

00:09:00,959 --> 00:09:06,270
different types or nine values passed of

00:09:04,050 --> 00:09:07,529
it would freak out that you get a build

00:09:06,270 --> 00:09:08,760
time error in to type script and it

00:09:07,529 --> 00:09:11,880
would say hey one of these isn't a

00:09:08,760 --> 00:09:14,730
scheduler like and that's wrong on so

00:09:11,880 --> 00:09:16,529
many levels one we're trying to get

00:09:14,730 --> 00:09:19,050
scheduler out of and I'll talk about

00:09:16,529 --> 00:09:21,450
that in a bit but to like it just sucks

00:09:19,050 --> 00:09:23,399
that this is your experience the other

00:09:21,450 --> 00:09:25,380
thing is the the observable you did get

00:09:23,399 --> 00:09:28,890
back would be wrong so it actually goes

00:09:25,380 --> 00:09:30,450
to I and doesn't even include J so it's

00:09:28,890 --> 00:09:33,060
the wrong type that you can get back

00:09:30,450 --> 00:09:35,010
anyway so even if you did get past that

00:09:33,060 --> 00:09:38,600
build error with any or something like

00:09:35,010 --> 00:09:41,820
that you still get the wrong result in

00:09:38,600 --> 00:09:43,230
the latest version of Arc's yes this is

00:09:41,820 --> 00:09:44,970
much better so you actually get back the

00:09:43,230 --> 00:09:46,500
proper type in these scenarios and you

00:09:44,970 --> 00:09:48,270
could add 20 more on there and it would

00:09:46,500 --> 00:09:51,600
still figure out what you need so this

00:09:48,270 --> 00:09:53,370
is true for of and merge and all sorts

00:09:51,600 --> 00:09:56,220
of other things that take these sorts of

00:09:53,370 --> 00:09:57,990
arguments so we fixed it we also fixed

00:09:56,220 --> 00:10:00,240
some bad types and what I mean by bad

00:09:57,990 --> 00:10:04,410
types are types that did not reflect the

00:10:00,240 --> 00:10:05,940
runtime behavior of actual api's so if

00:10:04,410 --> 00:10:08,640
you noticed in the chat earlier I was I

00:10:05,940 --> 00:10:11,279
was razzing David East a little bit

00:10:08,640 --> 00:10:13,470
about his use of - promise - promise is

00:10:11,279 --> 00:10:15,089
actually one of those that had that type

00:10:13,470 --> 00:10:16,500
so you look at this and it looks like it

00:10:15,089 --> 00:10:19,290
said okay so you've got we've got this

00:10:16,500 --> 00:10:20,520
get names and it's returning an

00:10:19,290 --> 00:10:22,650
observable of

00:10:20,520 --> 00:10:24,540
arrays of strings and when you to

00:10:22,650 --> 00:10:26,940
promise it everything here looks like

00:10:24,540 --> 00:10:29,310
it's just fine but what you don't notice

00:10:26,940 --> 00:10:31,080
is the type of names it's returned from

00:10:29,310 --> 00:10:33,690
that async/await metal weight is

00:10:31,080 --> 00:10:35,850
actually a string or undefined um and

00:10:33,690 --> 00:10:37,500
this is this is in version 7 and this is

00:10:35,850 --> 00:10:39,780
the correct behavior and the reason this

00:10:37,500 --> 00:10:42,240
is the correct behavior is if names

00:10:39,780 --> 00:10:44,520
happen to be empty stay it never emitted

00:10:42,240 --> 00:10:47,160
a value and it just completed to promise

00:10:44,520 --> 00:10:48,930
will resolve as undefined and it's done

00:10:47,160 --> 00:10:51,360
that since version 5 it's always done

00:10:48,930 --> 00:10:54,930
that and that's part of legacy behavior

00:10:51,360 --> 00:10:57,420
from even before version 5 and this is

00:10:54,930 --> 00:10:59,760
this meant that our typing's for it were

00:10:57,420 --> 00:11:02,250
incorrect so the proper typing is to

00:10:59,760 --> 00:11:04,980
always have or undefined now what that

00:11:02,250 --> 00:11:07,110
means for you is if you're using this

00:11:04,980 --> 00:11:08,700
you're gonna sometimes see this where

00:11:07,110 --> 00:11:11,610
you maybe were expecting a particular

00:11:08,700 --> 00:11:14,160
type an idea weight it and you have this

00:11:11,610 --> 00:11:15,990
error here it's either the solution is

00:11:14,160 --> 00:11:17,370
to either put a bang after to promise

00:11:15,990 --> 00:11:19,920
because you know it's gonna give you a

00:11:17,370 --> 00:11:21,420
value or just type it properly in an

00:11:19,920 --> 00:11:22,920
account for the fact that it could be

00:11:21,420 --> 00:11:25,250
undefined because this is this is

00:11:22,920 --> 00:11:29,040
correct that's trying to help you so

00:11:25,250 --> 00:11:30,570
there's there's also the fact that we're

00:11:29,040 --> 00:11:32,640
diaper kidding to promise because of

00:11:30,570 --> 00:11:33,870
this weird behavior and we have some

00:11:32,640 --> 00:11:35,760
replacements for it that are new

00:11:33,870 --> 00:11:38,030
features in version 7 that I'll talk

00:11:35,760 --> 00:11:40,730
about in a little bit

00:11:38,030 --> 00:11:42,440
so Union type returns are better we

00:11:40,730 --> 00:11:44,960
started doing this during version six

00:11:42,440 --> 00:11:46,340
and actually a few of the updates broke

00:11:44,960 --> 00:11:47,690
people like in particular I think can

00:11:46,340 --> 00:11:50,330
Canton have emerged map but we've now

00:11:47,690 --> 00:11:52,640
got this to where we've updated it

00:11:50,330 --> 00:11:55,160
throughout the library and what this

00:11:52,640 --> 00:11:58,580
means is if you have in this particular

00:11:55,160 --> 00:12:01,940
effects people are using ng rx where you

00:11:58,580 --> 00:12:03,680
might have you might you might have

00:12:01,940 --> 00:12:06,020
effects that are returning different

00:12:03,680 --> 00:12:07,820
types of actions and it freaks out

00:12:06,020 --> 00:12:08,960
trying to figure out what type of action

00:12:07,820 --> 00:12:11,420
is being returned from inside the

00:12:08,960 --> 00:12:13,970
concatenate and you get the wrong return

00:12:11,420 --> 00:12:16,940
type from from the observable so this

00:12:13,970 --> 00:12:21,200
this this will resolve that issue and

00:12:16,940 --> 00:12:22,640
you won't have to like explicitly type

00:12:21,200 --> 00:12:24,510
things anymore it'll just infer it

00:12:22,640 --> 00:12:26,370
properly

00:12:24,510 --> 00:12:27,300
all right let's move on to it what

00:12:26,370 --> 00:12:30,260
everybody likes to talk about new

00:12:27,300 --> 00:12:34,980
features like we needed more features

00:12:30,260 --> 00:12:36,900
all right yes first one is animation

00:12:34,980 --> 00:12:39,120
frames so this was an idea that was

00:12:36,900 --> 00:12:42,000
brought up actually last year at ng-conf

00:12:39,120 --> 00:12:43,350
I believe and what this is and you just

00:12:42,000 --> 00:12:47,640
saw that animate I'll play it one more

00:12:43,350 --> 00:12:50,820
time what this is is it is a static

00:12:47,640 --> 00:12:52,920
method that is an observable that fires

00:12:50,820 --> 00:12:57,600
on animation frames and gives you the

00:12:52,920 --> 00:13:00,630
milliseconds elapsed since the the start

00:12:57,600 --> 00:13:02,370
of the observable so it's useful for

00:13:00,630 --> 00:13:05,340
doing animations and it's much more

00:13:02,370 --> 00:13:07,410
useful than what the contemporaries were

00:13:05,340 --> 00:13:08,730
that people did all the time so there's

00:13:07,410 --> 00:13:10,530
many different ways to make an

00:13:08,730 --> 00:13:12,360
observable of animation frames currently

00:13:10,530 --> 00:13:14,460
in the library this is the old and

00:13:12,360 --> 00:13:16,530
busted ways integral of 0 with an

00:13:14,460 --> 00:13:19,050
animation frame scheduler range of 0

00:13:16,530 --> 00:13:21,540
like to infinity with an animation frame

00:13:19,050 --> 00:13:25,020
scheduler timer timer again same thing

00:13:21,540 --> 00:13:28,500
these are all they'll do identical stuff

00:13:25,020 --> 00:13:29,880
but distinct about this is if someone's

00:13:28,500 --> 00:13:31,170
doing this it's because they know

00:13:29,880 --> 00:13:32,580
something about the internal

00:13:31,170 --> 00:13:34,830
implementation of rxjs

00:13:32,580 --> 00:13:36,390
in these particular functions it's not

00:13:34,830 --> 00:13:38,670
because it's the best way to do it

00:13:36,390 --> 00:13:40,380
so it sucks that people had to know

00:13:38,670 --> 00:13:43,500
these recipes to do it and we've

00:13:40,380 --> 00:13:45,480
resolved that by giving you animation

00:13:43,500 --> 00:13:47,430
frames which again is better because it

00:13:45,480 --> 00:13:49,260
gives you the milliseconds elapsed since

00:13:47,430 --> 00:13:53,130
it started which is much more useful

00:13:49,260 --> 00:13:55,070
than just incrementing counter so that's

00:13:53,130 --> 00:13:58,190
that's their frame

00:13:55,070 --> 00:14:00,950
we also have new promise conversion

00:13:58,190 --> 00:14:03,770
functions so these these are what I was

00:14:00,950 --> 00:14:05,060
talking about with to promise before s

00:14:03,770 --> 00:14:08,900
lines are being slowed there we go

00:14:05,060 --> 00:14:11,510
so we've got last value from this

00:14:08,900 --> 00:14:15,890
replaces two promised out right so last

00:14:11,510 --> 00:14:17,270
value from what this does is it does

00:14:15,890 --> 00:14:20,000
exactly what two promised should have

00:14:17,270 --> 00:14:21,770
done in that it just waits to the last

00:14:20,000 --> 00:14:23,480
value or waits to the throw the promise

00:14:21,770 --> 00:14:27,940
to complete and then resolve to the

00:14:23,480 --> 00:14:29,990
blast value but if the promise completes

00:14:27,940 --> 00:14:32,720
without giving you a value say for

00:14:29,990 --> 00:14:35,720
example you give it an empty promise it

00:14:32,720 --> 00:14:37,820
actually will reject with an empty error

00:14:35,720 --> 00:14:43,070
that you can test for later on and say

00:14:37,820 --> 00:14:45,320
hey was was this was this empty like in

00:14:43,070 --> 00:14:46,970
not just not just an observable that

00:14:45,320 --> 00:14:48,890
could have emitted undefined right so

00:14:46,970 --> 00:14:50,960
you have a promise that returned

00:14:48,890 --> 00:14:52,280
undefined or something like that so like

00:14:50,960 --> 00:14:53,930
you can actually this is much much

00:14:52,280 --> 00:14:56,480
better behavior and they default it to

00:14:53,930 --> 00:14:57,980
something so this is more of what you

00:14:56,480 --> 00:14:59,510
would expect from a promise that never

00:14:57,980 --> 00:15:02,090
gave that that never gives you a value

00:14:59,510 --> 00:15:04,100
it's it's this was empty all right so

00:15:02,090 --> 00:15:09,350
that's much better behavior we also

00:15:04,100 --> 00:15:11,240
created first value from so this is the

00:15:09,350 --> 00:15:13,430
problem with two promise before was that

00:15:11,240 --> 00:15:15,260
people had a hard time rationalizing why

00:15:13,430 --> 00:15:18,500
is it the last value why isn't it the

00:15:15,260 --> 00:15:20,180
first value and so on now it's pretty

00:15:18,500 --> 00:15:22,220
explicit you know when you read the code

00:15:20,180 --> 00:15:23,810
you're awaiting the first value from

00:15:22,220 --> 00:15:25,940
this this observable what this does is

00:15:23,810 --> 00:15:28,820
it waits for the first ru to arrive

00:15:25,940 --> 00:15:31,820
it resolves promise with it and then

00:15:28,820 --> 00:15:35,150
immediately unsubscribes from that

00:15:31,820 --> 00:15:36,940
observable source the the other the

00:15:35,150 --> 00:15:38,930
other thing about this is it will also

00:15:36,940 --> 00:15:42,530
reject it an empty error if the

00:15:38,930 --> 00:15:44,230
observable completes without without

00:15:42,530 --> 00:15:46,570
emitting a value

00:15:44,230 --> 00:15:48,760
but just a reminder you only want to use

00:15:46,570 --> 00:15:50,260
this one necessary you lose cancellation

00:15:48,760 --> 00:15:52,390
when you convert to a promise this is

00:15:50,260 --> 00:15:56,440
only for api's that require promises

00:15:52,390 --> 00:15:58,890
so like legacy api's or async/await that

00:15:56,440 --> 00:15:58,890
sort of thing

00:16:00,460 --> 00:16:04,330
very sorry my slides are being slow

00:16:02,290 --> 00:16:06,340
there we go we also added and I'm

00:16:04,330 --> 00:16:09,580
excited about this async iterable

00:16:06,340 --> 00:16:11,860
support so in this example I've made

00:16:09,580 --> 00:16:13,900
this ticker with an async generator

00:16:11,860 --> 00:16:16,780
function called async ticker and it's

00:16:13,900 --> 00:16:18,250
it's got this a weight weight in there

00:16:16,780 --> 00:16:19,930
that's kind of funny to Rio wait wait

00:16:18,250 --> 00:16:21,760
but wait is just some function that

00:16:19,930 --> 00:16:24,010
waits for a certain number of

00:16:21,760 --> 00:16:25,690
milliseconds and results of promise so

00:16:24,010 --> 00:16:29,830
I've got this while true and basically

00:16:25,690 --> 00:16:31,720
what this is is it is it's going to

00:16:29,830 --> 00:16:33,640
return what's called an async iterable

00:16:31,720 --> 00:16:35,950
which when you next off if it gives you

00:16:33,640 --> 00:16:40,290
a promise to the next value essentially

00:16:35,950 --> 00:16:43,030
to an iterator result and now in RCS

00:16:40,290 --> 00:16:46,000
anywhere that accepted a promise or an

00:16:43,030 --> 00:16:49,870
observable before well now also except

00:16:46,000 --> 00:16:51,460
in an async interval so you can return

00:16:49,870 --> 00:16:53,050
an async interval inside of a kink at

00:16:51,460 --> 00:16:56,530
map or to defer or something like that

00:16:53,050 --> 00:16:58,030
and what it just arcs just just looks

00:16:56,530 --> 00:16:59,530
for that symbol that async iterator and

00:16:58,030 --> 00:17:02,290
you can read more about that in Mozilla

00:16:59,530 --> 00:17:03,670
developer Network but it provides some

00:17:02,290 --> 00:17:06,250
really interesting new possibilities for

00:17:03,670 --> 00:17:09,250
example I'm using defer here with an

00:17:06,250 --> 00:17:10,959
async function star you can use a map or

00:17:09,250 --> 00:17:13,089
a merge map or something with async

00:17:10,959 --> 00:17:14,680
function star as well and in this I'm

00:17:13,089 --> 00:17:18,459
saying okay well I want to wait to load

00:17:14,680 --> 00:17:20,140
the user and then I want to start a loop

00:17:18,459 --> 00:17:22,240
that goes and does something like long

00:17:20,140 --> 00:17:23,380
polling with a promise based API or

00:17:22,240 --> 00:17:25,680
something that goes and gets the

00:17:23,380 --> 00:17:28,480
messages for that user by user name and

00:17:25,680 --> 00:17:31,360
when it gets it if I have it I want to

00:17:28,480 --> 00:17:34,150
yield those messages and then it comes

00:17:31,360 --> 00:17:35,680
back around in the loop and then I do my

00:17:34,150 --> 00:17:37,750
processing the observable and it says

00:17:35,680 --> 00:17:39,990
okay well let's do the next one and so

00:17:37,750 --> 00:17:43,270
defer is gonna give me an observable of

00:17:39,990 --> 00:17:44,500
user messages via this long polling that

00:17:43,270 --> 00:17:47,140
I think you can compose in like

00:17:44,500 --> 00:17:49,150
interesting ways with with an async

00:17:47,140 --> 00:17:52,960
function

00:17:49,150 --> 00:17:53,860
we chose not to add conversion the other

00:17:52,960 --> 00:17:55,870
way around

00:17:53,860 --> 00:17:58,060
well and into the core of the library we

00:17:55,870 --> 00:18:00,370
the functionality was written into that

00:17:58,060 --> 00:18:02,230
PR by yours truly but we we talked about

00:18:00,370 --> 00:18:03,820
it in a core team meeting and we decided

00:18:02,230 --> 00:18:05,140
that it would be best to split that off

00:18:03,820 --> 00:18:06,460
to the side for now because there's a

00:18:05,140 --> 00:18:09,430
lot of different ways to take an

00:18:06,460 --> 00:18:12,610
observable and convert it to an async

00:18:09,430 --> 00:18:14,500
iterator where there's only really one

00:18:12,610 --> 00:18:17,470
valid way you should consume an async

00:18:14,500 --> 00:18:19,480
iterator as an as an observable so we

00:18:17,470 --> 00:18:22,320
decided you can consume async iterators

00:18:19,480 --> 00:18:25,420
but with our chests but can convert from

00:18:22,320 --> 00:18:27,610
an observable the other direction

00:18:25,420 --> 00:18:30,790
there's this other library which again

00:18:27,610 --> 00:18:32,320
is the exact code that we had in we're

00:18:30,790 --> 00:18:34,330
gonna put in our chests we're just put

00:18:32,320 --> 00:18:37,570
it in its own library called rxjs for a

00:18:34,330 --> 00:18:40,480
weight and you can see there on the side

00:18:37,570 --> 00:18:41,950
there's an example where it's doing each

00:18:40,480 --> 00:18:43,840
value from source what that's going to

00:18:41,950 --> 00:18:48,100
do is subscribe to the source it's gonna

00:18:43,840 --> 00:18:49,390
wait for a value from that source or and

00:18:48,100 --> 00:18:51,190
or as it gets values it's going to

00:18:49,390 --> 00:18:53,290
buffer them up and then it's gonna go

00:18:51,190 --> 00:18:54,520
through that for oh wait loop there's

00:18:53,290 --> 00:18:56,980
actually four different ways you can use

00:18:54,520 --> 00:18:59,230
it there's each value from that gives

00:18:56,980 --> 00:19:01,510
you every single value one at a time

00:18:59,230 --> 00:19:03,370
there's buffered values from so that

00:19:01,510 --> 00:19:04,570
takes the buffered values that have

00:19:03,370 --> 00:19:06,160
arrived while you were going through

00:19:04,570 --> 00:19:07,930
that loop and just gives you the whole

00:19:06,160 --> 00:19:09,760
buffer every single time you get the top

00:19:07,930 --> 00:19:12,310
of that loop or when that when something

00:19:09,760 --> 00:19:13,600
arrives there is latest value from which

00:19:12,310 --> 00:19:15,700
gives you the most recent value that

00:19:13,600 --> 00:19:17,050
arrived from the source and next value

00:19:15,700 --> 00:19:18,340
from which will wait for the next value

00:19:17,050 --> 00:19:20,020
to arrive from the source before it goes

00:19:18,340 --> 00:19:24,340
back in that loop so these are all

00:19:20,020 --> 00:19:25,330
really interesting features the other

00:19:24,340 --> 00:19:26,680
thing that you might want to check out

00:19:25,330 --> 00:19:30,040
if you're interested in async iterables

00:19:26,680 --> 00:19:32,440
is i XJS so this is also developed by

00:19:30,040 --> 00:19:34,330
members of the arcgis core team so have

00:19:32,440 --> 00:19:36,100
a sake in particular and paul taylor

00:19:34,330 --> 00:19:38,710
I've been working really hard on IX

00:19:36,100 --> 00:19:40,270
chess this is basically rxjs but for

00:19:38,710 --> 00:19:43,060
async intervals it's got different use

00:19:40,270 --> 00:19:44,800
cases it's particularly useful I think

00:19:43,060 --> 00:19:46,780
for node but it's it's pull based

00:19:44,800 --> 00:19:47,880
instead of push based so go check that

00:19:46,780 --> 00:19:50,620
out

00:19:47,880 --> 00:19:53,980
sorry though this is one thing about

00:19:50,620 --> 00:19:55,990
async intervals is async await the

00:19:53,980 --> 00:19:58,720
promises returned by them zones can't

00:19:55,990 --> 00:19:59,800
patch it so it will cause problems and

00:19:58,720 --> 00:20:02,560
zone I'm sure there's probably

00:19:59,800 --> 00:20:03,549
workarounds for this that I'm just not

00:20:02,560 --> 00:20:05,649
aware of

00:20:03,549 --> 00:20:07,270
that's that's something to be aware of

00:20:05,649 --> 00:20:09,309
is if you try to use these things

00:20:07,270 --> 00:20:11,140
natively you could have problems with

00:20:09,309 --> 00:20:13,360
stuns yes

00:20:11,140 --> 00:20:15,880
all right another new feature reset on

00:20:13,360 --> 00:20:17,560
success trooper retry this seems minor

00:20:15,880 --> 00:20:21,220
but it's the thing where if you have a

00:20:17,560 --> 00:20:23,620
source and it airs and you have like a

00:20:21,220 --> 00:20:25,360
retry account three what happens is it

00:20:23,620 --> 00:20:26,770
retries once did reach others again and

00:20:25,360 --> 00:20:28,120
then maybe it starts being successful

00:20:26,770 --> 00:20:31,240
again for a while but then when it airs

00:20:28,120 --> 00:20:33,460
again in version six it would only have

00:20:31,240 --> 00:20:35,770
one retry left it wouldn't reset that

00:20:33,460 --> 00:20:38,260
counter so we added a feature it's

00:20:35,770 --> 00:20:40,420
actually a non-breaking change but we

00:20:38,260 --> 00:20:42,100
added a feature called reset on success

00:20:40,420 --> 00:20:43,810
that you can configure and basically

00:20:42,100 --> 00:20:45,190
what that just says is if you do get one

00:20:43,810 --> 00:20:47,650
successful message through then reset

00:20:45,190 --> 00:20:50,890
that counter back to three so that's

00:20:47,650 --> 00:20:52,060
useful for some folks another new

00:20:50,890 --> 00:20:54,370
feature but they're not really new

00:20:52,060 --> 00:20:57,850
features that just remained can cat with

00:20:54,370 --> 00:21:00,370
merge with zip with yeah with with with

00:20:57,850 --> 00:21:02,920
with so basically what this is is we

00:21:00,370 --> 00:21:05,350
took all of our legacy operators like

00:21:02,920 --> 00:21:07,540
race zip combined latest merged in cat

00:21:05,350 --> 00:21:09,280
that were operators that have the same

00:21:07,540 --> 00:21:12,730
name as some of the creation methods and

00:21:09,280 --> 00:21:14,320
we renamed them to be to have width on

00:21:12,730 --> 00:21:15,640
the end and that kind of is more uniform

00:21:14,320 --> 00:21:17,800
with the rest of the operators in the

00:21:15,640 --> 00:21:19,600
library we were gonna remove them but we

00:21:17,800 --> 00:21:21,520
discovered especially if you're working

00:21:19,600 --> 00:21:23,800
with Google that there were still a lot

00:21:21,520 --> 00:21:27,700
of people using these in particular like

00:21:23,800 --> 00:21:29,500
King cat so these are just renames and

00:21:27,700 --> 00:21:33,150
we are going to remove the deprecated

00:21:29,500 --> 00:21:34,690
ones and the next version so

00:21:33,150 --> 00:21:36,550
deprecations we have a lot of

00:21:34,690 --> 00:21:39,790
duplications this version but but we

00:21:36,550 --> 00:21:43,030
didn't remove hardly anything so you

00:21:39,790 --> 00:21:46,390
shouldn't see any broken broken code

00:21:43,030 --> 00:21:47,980
because of missing stuff result

00:21:46,390 --> 00:21:51,760
selectors they've been deprecated since

00:21:47,980 --> 00:21:55,060
5.5 we still have them in there don't

00:21:51,760 --> 00:21:56,880
use them but but but they're still in

00:21:55,060 --> 00:21:59,230
there we haven't removed minutes version

00:21:56,880 --> 00:22:01,240
scheduled arguments are deprecated so

00:21:59,230 --> 00:22:03,190
like if you're passing schedulers to

00:22:01,240 --> 00:22:06,060
upper range or some of these other

00:22:03,190 --> 00:22:08,080
things we want you to stop doing that

00:22:06,060 --> 00:22:09,310
some of the things that require

00:22:08,080 --> 00:22:11,920
schedulers like things that actually

00:22:09,310 --> 00:22:13,890
require timing like timer interval that

00:22:11,920 --> 00:22:16,960
they'll probably stay there but these

00:22:13,890 --> 00:22:18,760
not as much what we want you to do is

00:22:16,960 --> 00:22:20,410
use the new scheduled API which was

00:22:18,760 --> 00:22:22,300
which was actually introduced last year

00:22:20,410 --> 00:22:23,010
and observe on which has been around for

00:22:22,300 --> 00:22:24,780
a while

00:22:23,010 --> 00:22:26,460
this is a better way to do it and this

00:22:24,780 --> 00:22:29,429
is just to move forward so we can try to

00:22:26,460 --> 00:22:31,260
like pull some of the scheduling logic

00:22:29,429 --> 00:22:33,710
out of operators that really don't need

00:22:31,260 --> 00:22:36,080
it in a lot of cases

00:22:33,710 --> 00:22:40,590
deprecated subscription signatures now

00:22:36,080 --> 00:22:42,180
this is something where this is gonna be

00:22:40,590 --> 00:22:43,650
jarring for some folks but we've got

00:22:42,180 --> 00:22:45,180
good reasons behind doing this we're

00:22:43,650 --> 00:22:47,040
trying to we're trying to narrow down

00:22:45,180 --> 00:22:51,380
the different ways you can call

00:22:47,040 --> 00:22:56,730
subscribe and tap but mostly subscribe

00:22:51,380 --> 00:22:58,950
it's Lois live and there alright so

00:22:56,730 --> 00:23:01,500
here's what's okay here's what we're not

00:22:58,950 --> 00:23:03,150
deprecating so basically subscribe with

00:23:01,500 --> 00:23:04,740
one argument if you want to think about

00:23:03,150 --> 00:23:06,750
it that way you can either you can

00:23:04,740 --> 00:23:09,180
either call subscribe with a function or

00:23:06,750 --> 00:23:11,730
you call subscribe with an observer or a

00:23:09,180 --> 00:23:12,810
partial observer the other ways will not

00:23:11,730 --> 00:23:14,010
break you want to call it with three

00:23:12,810 --> 00:23:16,530
functions right right now it's not

00:23:14,010 --> 00:23:19,080
broken just deprecated but the reason

00:23:16,530 --> 00:23:20,850
for this is is it becomes very clear to

00:23:19,080 --> 00:23:23,310
say oh I want to subscribe to this and I

00:23:20,850 --> 00:23:24,720
only care about errors you you're going

00:23:23,310 --> 00:23:27,510
to be forced to have an object in there

00:23:24,720 --> 00:23:29,490
that says error and has a function after

00:23:27,510 --> 00:23:32,160
it right so you know which is an arrant

00:23:29,490 --> 00:23:34,080
which is next the deprecated version

00:23:32,160 --> 00:23:35,670
would be like this and you've got some

00:23:34,080 --> 00:23:37,830
you've got subscribed with multiple

00:23:35,670 --> 00:23:39,570
functions passed to it the reason that

00:23:37,830 --> 00:23:41,790
we wanted to deprecate this is one it's

00:23:39,570 --> 00:23:43,110
a bad developer experience this is an

00:23:41,790 --> 00:23:44,940
experience where people have to go and

00:23:43,110 --> 00:23:47,250
they literally have to count to figure

00:23:44,940 --> 00:23:49,020
out am i in the next function am i in

00:23:47,250 --> 00:23:50,340
the error function or Emma in the

00:23:49,020 --> 00:23:52,890
complete function so it could be like

00:23:50,340 --> 00:23:55,440
null null function or null function or

00:23:52,890 --> 00:23:57,870
something like that and it's it's just

00:23:55,440 --> 00:24:01,350
not a really good experience for folks

00:23:57,870 --> 00:24:03,030
so it's much much better to have an

00:24:01,350 --> 00:24:04,740
object in there where you have to name

00:24:03,030 --> 00:24:06,840
what those things are

00:24:04,740 --> 00:24:08,730
little more verbose maybe but it's a

00:24:06,840 --> 00:24:10,470
better developer experience and the

00:24:08,730 --> 00:24:11,790
other thing is internal to the library

00:24:10,470 --> 00:24:15,330
right now we have this logic to

00:24:11,790 --> 00:24:17,430
reconcile did you pass a function or or

00:24:15,330 --> 00:24:19,020
an object or did you pass more than one

00:24:17,430 --> 00:24:20,700
function or you know are the three

00:24:19,020 --> 00:24:22,470
arguments and so on every time you

00:24:20,700 --> 00:24:25,440
subscribe to an observable we have to do

00:24:22,470 --> 00:24:28,340
this reconciliation to see what you've

00:24:25,440 --> 00:24:30,600
subscribed with so this will help us in

00:24:28,340 --> 00:24:32,400
version eight remove all of that logic

00:24:30,600 --> 00:24:34,230
and we can just say did you give us a

00:24:32,400 --> 00:24:35,820
function or did you give us an object

00:24:34,230 --> 00:24:37,050
and we know what to do with it and it

00:24:35,820 --> 00:24:38,909
makes the library smaller and more

00:24:37,050 --> 00:24:41,849
efficient

00:24:38,909 --> 00:24:43,559
again tap is the same thing it's

00:24:41,849 --> 00:24:45,059
basically subscribed only it's an

00:24:43,559 --> 00:24:47,009
operator right so it's the same thing

00:24:45,059 --> 00:24:48,989
you want to try to provide one argument

00:24:47,009 --> 00:24:50,309
to it the other so the other things are

00:24:48,989 --> 00:24:52,170
still there they still work there just

00:24:50,309 --> 00:24:54,330
deprecated

00:24:52,170 --> 00:24:57,390
and again here's what it looks like

00:24:54,330 --> 00:24:59,430
deprecated tab we want to reduce the

00:24:57,390 --> 00:25:00,870
scheduler footprints in this this

00:24:59,430 --> 00:25:07,320
upcoming releasing we are we already

00:25:00,870 --> 00:25:10,260
have so right now if you are if you're

00:25:07,320 --> 00:25:12,480
if you're just using share replay for

00:25:10,260 --> 00:25:15,600
example that's all you use you're gonna

00:25:12,480 --> 00:25:17,460
end up including about 4k worth of code

00:25:15,600 --> 00:25:20,160
that is all scheduler code that you're

00:25:17,460 --> 00:25:23,310
probably not even using at all and it's

00:25:20,160 --> 00:25:24,630
just because replay subject is used

00:25:23,310 --> 00:25:26,790
inside of share replay and replay

00:25:24,630 --> 00:25:28,800
subject was using scheduler to get a

00:25:26,790 --> 00:25:31,380
timestamp and that's it it wasn't using

00:25:28,800 --> 00:25:33,690
the scheduling part of it at all and

00:25:31,380 --> 00:25:34,920
there's several ways this could end up

00:25:33,690 --> 00:25:36,900
happening to you and you could end up

00:25:34,920 --> 00:25:40,380
loading your app by for kidding you

00:25:36,900 --> 00:25:42,480
didn't even mean to so things like

00:25:40,380 --> 00:25:44,940
interval timer audit time these other

00:25:42,480 --> 00:25:47,250
things like over time we want to move to

00:25:44,940 --> 00:25:51,390
where these things are not things that

00:25:47,250 --> 00:25:53,030
are adding extra code to you unless you

00:25:51,390 --> 00:25:55,410
actually explicitly want to use

00:25:53,030 --> 00:25:57,180
scheduler so we're gonna keep moving

00:25:55,410 --> 00:25:59,820
that direction over the course of

00:25:57,180 --> 00:26:02,070
version 7 and non breaking waves and

00:25:59,820 --> 00:26:04,440
then eventually try to fades out passing

00:26:02,070 --> 00:26:07,650
schedulers to some of these where we can

00:26:04,440 --> 00:26:09,480
for version 8 one of the ways we did

00:26:07,650 --> 00:26:11,790
that is with timestamp providers that's

00:26:09,480 --> 00:26:13,860
new and version 7 it's just an interface

00:26:11,790 --> 00:26:15,930
and it's an interface that has a now

00:26:13,860 --> 00:26:18,120
method on it that returns a number and

00:26:15,930 --> 00:26:20,580
the reason that's interesting is we were

00:26:18,120 --> 00:26:22,830
able to default replay subjects third

00:26:20,580 --> 00:26:24,180
argument so instead of defaulting it to

00:26:22,830 --> 00:26:26,610
like async scheduler or whatever it was

00:26:24,180 --> 00:26:29,160
defaulted to before now it's defaulted

00:26:26,610 --> 00:26:32,070
to it has actually defaulted to the date

00:26:29,160 --> 00:26:34,200
object so data objects native we don't

00:26:32,070 --> 00:26:35,370
the ship that you could also use in this

00:26:34,200 --> 00:26:37,140
case you could use the performance

00:26:35,370 --> 00:26:38,460
object which has endowments that on at

00:26:37,140 --> 00:26:39,960
the work terms number if you wanted some

00:26:38,460 --> 00:26:42,660
really really precise caching and your

00:26:39,960 --> 00:26:45,450
replay subject uh-hum I don't know why

00:26:42,660 --> 00:26:48,810
you do this but I would love to see the

00:26:45,450 --> 00:26:50,490
amazing branch and outline this anyways

00:26:48,810 --> 00:26:52,230
but you could do that or you could pass

00:26:50,490 --> 00:26:54,390
any object that just has a now method to

00:26:52,230 --> 00:26:56,430
to replace the subject and other things

00:26:54,390 --> 00:26:57,660
like time the time interval operator and

00:26:56,430 --> 00:27:00,390
so on

00:26:57,660 --> 00:27:00,930
all right now I want to talk about 7.1

00:27:00,390 --> 00:27:02,610
and beyond

00:27:00,930 --> 00:27:03,990
so I just talked about all these

00:27:02,610 --> 00:27:07,500
deprecations and things that are gonna

00:27:03,990 --> 00:27:10,140
change over time the minor versions of 7

00:27:07,500 --> 00:27:11,280
are we may release some small new

00:27:10,140 --> 00:27:13,770
features where there's some things that

00:27:11,280 --> 00:27:15,180
we rying but they'll be kind of off to

00:27:13,770 --> 00:27:17,760
the side of the main bulk of what you

00:27:15,180 --> 00:27:19,620
use in rxjs the biggest thing we want to

00:27:17,760 --> 00:27:21,720
do is in each version we want to release

00:27:19,620 --> 00:27:24,350
vs lint transformations or other other

00:27:21,720 --> 00:27:27,270
code transformations that help automate

00:27:24,350 --> 00:27:31,020
updating your app to not use all of the

00:27:27,270 --> 00:27:32,820
deprecated API s so really what we want

00:27:31,020 --> 00:27:34,290
to do is make sure that every single new

00:27:32,820 --> 00:27:36,540
major version of seven that comes out

00:27:34,290 --> 00:27:39,060
it's it's a it's not a breaking change

00:27:36,540 --> 00:27:40,710
because it's not a major version so

00:27:39,060 --> 00:27:42,150
we're I'm sorry minor version as every

00:27:40,710 --> 00:27:43,920
new minor version that comes out a

00:27:42,150 --> 00:27:45,960
version seven it's not a breaking change

00:27:43,920 --> 00:27:48,290
because we're working with Google to

00:27:45,960 --> 00:27:51,060
ensure that and it's these are minor

00:27:48,290 --> 00:27:53,070
improvements and we're providing new ES

00:27:51,060 --> 00:27:55,440
lint rules to help you not write bad

00:27:53,070 --> 00:27:58,560
stuff and we're actually helping you

00:27:55,440 --> 00:28:00,540
transform your code automatically away

00:27:58,560 --> 00:28:01,500
from deprecated API s so that when we

00:28:00,540 --> 00:28:03,300
get to version eight

00:28:01,500 --> 00:28:06,540
you're not jarred with this oh my god

00:28:03,300 --> 00:28:09,940
here's some huge amount of work I have

00:28:06,540 --> 00:28:13,090
to do to try to update all of my code

00:28:09,940 --> 00:28:14,500
so version 8 the Astra sphere is maybe

00:28:13,090 --> 00:28:16,600
it'll end up me in version 9 you don't

00:28:14,500 --> 00:28:17,950
know like there something could happen

00:28:16,600 --> 00:28:21,400
where we need to introduce a breaking

00:28:17,950 --> 00:28:23,380
change to accommodate browser things or

00:28:21,400 --> 00:28:26,920
runtime things or whatever not likely

00:28:23,380 --> 00:28:28,480
but it's possible so this is finally

00:28:26,920 --> 00:28:33,070
gonna be 2x so this is something that I

00:28:28,480 --> 00:28:35,830
have been working on and like chomping

00:28:33,070 --> 00:28:38,170
at the bit to do for two years but it to

00:28:35,830 --> 00:28:39,850
be responsible I can't just jump to do a

00:28:38,170 --> 00:28:43,240
leaner smaller version of rxjs or

00:28:39,850 --> 00:28:45,310
thoughts slowly my grain folks there we

00:28:43,240 --> 00:28:45,820
have some experiments already that we're

00:28:45,310 --> 00:28:47,680
done

00:28:45,820 --> 00:28:48,970
the experimental branch is still exist

00:28:47,680 --> 00:28:51,070
you can go check them out

00:28:48,970 --> 00:28:53,800
but like the version we settled on tends

00:28:51,070 --> 00:28:56,170
to be about 40% smaller and like angular

00:28:53,800 --> 00:28:58,630
app sizes as far as the footprint of

00:28:56,170 --> 00:28:59,740
arts jazz so and this is this is where

00:28:58,630 --> 00:29:01,420
we're gonna finally remove everything

00:28:59,740 --> 00:29:02,470
that we can that's been deprecated as

00:29:01,420 --> 00:29:04,240
long as we were able to make code

00:29:02,470 --> 00:29:08,170
transformations for it during the course

00:29:04,240 --> 00:29:09,510
of seven and of course we're always

00:29:08,170 --> 00:29:11,170
going to try to keep up with the latest

00:29:09,510 --> 00:29:14,950
advancements in JavaScript and

00:29:11,170 --> 00:29:16,990
typescript so those are big things but

00:29:14,950 --> 00:29:19,120
again we can't even do this until we get

00:29:16,990 --> 00:29:22,350
done with all of the code transformation

00:29:19,120 --> 00:29:22,350
migration tool type stuff

00:29:22,610 --> 00:29:27,170
think that I'm stuck again all right yes

00:29:25,550 --> 00:29:28,880
all right so that one of the questions I

00:29:27,170 --> 00:29:30,290
get from a lot of folks is how can you

00:29:28,880 --> 00:29:32,660
help us there's people that want to help

00:29:30,290 --> 00:29:34,940
the project one area we're gonna need a

00:29:32,660 --> 00:29:36,890
lot of help is if you have any expertise

00:29:34,940 --> 00:29:39,440
in doing code transformations this is

00:29:36,890 --> 00:29:41,780
gonna be a huge important part of our

00:29:39,440 --> 00:29:43,640
project coming up all of this is

00:29:41,780 --> 00:29:45,710
volunteer work nobody is being paid by a

00:29:43,640 --> 00:29:49,370
company to do massive amounts of work

00:29:45,710 --> 00:29:51,380
against the main repository we get some

00:29:49,370 --> 00:29:53,210
contributions what every now and then

00:29:51,380 --> 00:29:54,980
from companies they're from Google or

00:29:53,210 --> 00:29:57,410
whatever but they're onesie twosie

00:29:54,980 --> 00:30:02,720
most of the this work is done totally by

00:29:57,410 --> 00:30:05,150
volunteers and the bulk of the library

00:30:02,720 --> 00:30:07,310
work is mostly taken care of or will be

00:30:05,150 --> 00:30:09,590
taken care by core team members but like

00:30:07,310 --> 00:30:12,280
areas where we need help are going to be

00:30:09,590 --> 00:30:14,210
with us link code transformations

00:30:12,280 --> 00:30:16,400
documentation needs a lot of updates

00:30:14,210 --> 00:30:18,200
because we're gonna be making changes

00:30:16,400 --> 00:30:19,580
and some of the deprecated API is are

00:30:18,200 --> 00:30:21,080
still documented we might want to remove

00:30:19,580 --> 00:30:24,230
those or change some of the wording

00:30:21,080 --> 00:30:25,670
around them or like the subscriptions

00:30:24,230 --> 00:30:27,770
how we want people to subscribe a lot of

00:30:25,670 --> 00:30:29,270
the subscriptions might be done in

00:30:27,770 --> 00:30:31,730
deprecated ways and some of the

00:30:29,270 --> 00:30:33,710
documentation you can help our community

00:30:31,730 --> 00:30:36,530
this is even bigger than the first two

00:30:33,710 --> 00:30:38,450
honestly articles and how-to is videos

00:30:36,530 --> 00:30:40,100
mentoring your friends like if you

00:30:38,450 --> 00:30:43,160
really good at rxjs and you want to help

00:30:40,100 --> 00:30:46,640
other people or mentoring people that

00:30:43,160 --> 00:30:50,450
you don't even know online like please

00:30:46,640 --> 00:30:52,490
do some of the best experiences in my

00:30:50,450 --> 00:30:54,950
life have been from helping and some of

00:30:52,490 --> 00:30:57,170
the best benefits to my career have been

00:30:54,950 --> 00:30:59,810
from helping people that I don't know on

00:30:57,170 --> 00:31:02,600
the internet so I highly recommend doing

00:30:59,810 --> 00:31:04,070
that doing some research on rxjs or

00:31:02,600 --> 00:31:05,780
developer tools like if you want to do

00:31:04,070 --> 00:31:07,940
research like who's using what operators

00:31:05,780 --> 00:31:09,500
or whatever like that stuff's useful to

00:31:07,940 --> 00:31:12,110
us and well we're happy to work with you

00:31:09,500 --> 00:31:14,450
on all of that stuff if you're if you're

00:31:12,110 --> 00:31:16,640
doing something compelling we'd love to

00:31:14,450 --> 00:31:18,440
help you out we'd love to interact with

00:31:16,640 --> 00:31:20,570
you on those things and of course making

00:31:18,440 --> 00:31:22,370
libraries so if you're building a

00:31:20,570 --> 00:31:25,220
library with ArcGIS or that's built

00:31:22,370 --> 00:31:27,770
around a reactivity in ArcGIS please

00:31:25,220 --> 00:31:29,810
reach out to us and let us know about it

00:31:27,770 --> 00:31:33,110
and you know see it ask us how we can

00:31:29,810 --> 00:31:34,520
help you and then you know do what you

00:31:33,110 --> 00:31:35,960
can to well we'll do it we can do it to

00:31:34,520 --> 00:31:37,220
get it out there because these

00:31:35,960 --> 00:31:39,140
libraries give people more exposure

00:31:37,220 --> 00:31:40,910
darks jess which helps build the

00:31:39,140 --> 00:31:42,140
knowledge base which helps makes

00:31:40,910 --> 00:31:43,580
everyone experience everyone's

00:31:42,140 --> 00:31:47,930
experience working with it that much

00:31:43,580 --> 00:31:49,910
better so thank you that's all I have

00:31:47,930 --> 00:31:52,790
please stay safe this year it's these

00:31:49,910 --> 00:31:55,810
are extraordinary times I hope you have

00:31:52,790 --> 00:31:56,000
a fantastic weekend it'll help you

00:31:55,810 --> 00:31:59,089
[Music]

00:31:56,000 --> 00:31:59,089
[Applause]

00:32:01,970 --> 00:32:06,749
[Music]

00:32:02,130 --> 00:32:06,749

YouTube URL: https://www.youtube.com/watch?v=OC6g4yFsw0w


