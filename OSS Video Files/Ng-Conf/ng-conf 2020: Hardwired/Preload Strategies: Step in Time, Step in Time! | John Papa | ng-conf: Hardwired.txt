Title: Preload Strategies: Step in Time, Step in Time! | John Papa | ng-conf: Hardwired
Publication date: 2020-07-19
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Can you design your app to load progressively and predictively, creating a fast and immersive user experience that steps in time? Impossible you say? “Everything is possible, even the impossible.” (- Mary Poppins)

Your users care about how fast your app works. Learn how to load just what they need when they need it, adapt your user experience to low or no wifi, and experience what supercalifragilisticexpialidocious feels like. See how understanding user behavior and combining that with preloading strategies and RxJS can make a hugely positive impact on their user experience. You’ll never need a reason, never need a rhyme, when you make your app step in time.
Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:18,000 --> 00:00:21,680
welcome everybody

00:00:19,279 --> 00:00:23,840
uh today's topic is about preload

00:00:21,680 --> 00:00:25,680
strategies and it's to the theme step in

00:00:23,840 --> 00:00:28,320
time step in time

00:00:25,680 --> 00:00:29,679
if you like mary poppins well so do i so

00:00:28,320 --> 00:00:31,760
my name is john papa

00:00:29,679 --> 00:00:33,680
and i want to talk to you about

00:00:31,760 --> 00:00:36,160
something i really love and that's

00:00:33,680 --> 00:00:37,920
really good user experience so when

00:00:36,160 --> 00:00:39,600
you're building applications

00:00:37,920 --> 00:00:41,840
people say that it's impossible to

00:00:39,600 --> 00:00:42,960
create really great user experiences

00:00:41,840 --> 00:00:44,079
because you always have to choose

00:00:42,960 --> 00:00:47,200
between two impossible

00:00:44,079 --> 00:00:48,239
choices well even the impossible is

00:00:47,200 --> 00:00:50,160
possible

00:00:48,239 --> 00:00:51,520
so we're going to talk about how we can

00:00:50,160 --> 00:00:54,879
make our applications

00:00:51,520 --> 00:00:57,520
faster or snappier in step in time

00:00:54,879 --> 00:00:59,039
it all starts with a little town called

00:00:57,520 --> 00:01:00,800
eager and lazy loading

00:00:59,039 --> 00:01:02,879
now eager and lazy loading we all know

00:01:00,800 --> 00:01:04,159
about these right we start out and

00:01:02,879 --> 00:01:05,360
eager's like all right

00:01:04,159 --> 00:01:07,280
the users are going to wait for

00:01:05,360 --> 00:01:08,880
everything to load up front if you have

00:01:07,280 --> 00:01:10,000
a large application

00:01:08,880 --> 00:01:12,080
they're going to wait for everything to

00:01:10,000 --> 00:01:14,159
come up front and the time to their

00:01:12,080 --> 00:01:16,880
first interaction with your app is not

00:01:14,159 --> 00:01:19,200
going to be so great

00:01:16,880 --> 00:01:20,640
now lazy loading it's the promised land

00:01:19,200 --> 00:01:22,799
right we've been hearing about this for

00:01:20,640 --> 00:01:24,720
years we have to use lazy loading

00:01:22,799 --> 00:01:26,720
and users are going to wait until they

00:01:24,720 --> 00:01:27,520
navigate to a new route the upside with

00:01:26,720 --> 00:01:29,759
lady loading

00:01:27,520 --> 00:01:31,280
is that they get to get in there see the

00:01:29,759 --> 00:01:32,880
first screen right away

00:01:31,280 --> 00:01:34,640
and then in the background when you

00:01:32,880 --> 00:01:36,159
click on a link to go somewhere

00:01:34,640 --> 00:01:38,000
the user says okay i'm going to go to

00:01:36,159 --> 00:01:38,720
this other screen it's going to make

00:01:38,000 --> 00:01:40,400
them

00:01:38,720 --> 00:01:42,399
wait to get that other route and load it

00:01:40,400 --> 00:01:44,000
but it's still a weight

00:01:42,399 --> 00:01:45,439
so it's either wait for everything up

00:01:44,000 --> 00:01:48,240
front and then it's really fast

00:01:45,439 --> 00:01:50,000
that's eager loading or lazy loading is

00:01:48,240 --> 00:01:50,399
make it really fast to load first and

00:01:50,000 --> 00:01:52,479
then

00:01:50,399 --> 00:01:53,680
just load each thing on demand as they

00:01:52,479 --> 00:01:56,159
click on it

00:01:53,680 --> 00:01:57,680
well these are two impossible choices

00:01:56,159 --> 00:01:58,079
what i'm here to say is that there's a

00:01:57,680 --> 00:02:00,240
nice

00:01:58,079 --> 00:02:01,280
in between this is pre-loading

00:02:00,240 --> 00:02:03,119
strategies

00:02:01,280 --> 00:02:04,880
this is where you control the entire

00:02:03,119 --> 00:02:06,880
user experience

00:02:04,880 --> 00:02:08,000
now it's not as simple as just pressing

00:02:06,880 --> 00:02:09,200
a button

00:02:08,000 --> 00:02:11,120
although maybe it will be when we're

00:02:09,200 --> 00:02:12,480
done today but what you do

00:02:11,120 --> 00:02:14,560
is you control the experience by

00:02:12,480 --> 00:02:15,920
defining what is the user behavior you

00:02:14,560 --> 00:02:17,200
want

00:02:15,920 --> 00:02:19,040
so we're going to improve that user

00:02:17,200 --> 00:02:19,920
experience by loading the javascript

00:02:19,040 --> 00:02:22,160
bundles

00:02:19,920 --> 00:02:25,200
just when the user is needed so it's

00:02:22,160 --> 00:02:27,200
just in time or step in time

00:02:25,200 --> 00:02:28,480
so how does this work so here's how

00:02:27,200 --> 00:02:30,160
preloading works

00:02:28,480 --> 00:02:32,959
imagine that the eagerly loaded content

00:02:30,160 --> 00:02:34,480
comes up front but after so much time

00:02:32,959 --> 00:02:37,040
on a network you're going to see the

00:02:34,480 --> 00:02:38,319
pre-loaded lazy loaded javascript come

00:02:37,040 --> 00:02:39,920
later

00:02:38,319 --> 00:02:41,519
so here what's happening is the main

00:02:39,920 --> 00:02:43,440
application loads up front and after

00:02:41,519 --> 00:02:45,840
about 10 seconds or so

00:02:43,440 --> 00:02:47,920
then the application is usable that's

00:02:45,840 --> 00:02:50,239
the time to the first interactive

00:02:47,920 --> 00:02:50,959
and then the pre-loaded javascript comes

00:02:50,239 --> 00:02:53,120
afterwards

00:02:50,959 --> 00:02:54,879
what this means is that your users can

00:02:53,120 --> 00:02:57,200
get the site quickly up front

00:02:54,879 --> 00:02:58,480
they can use it and then go to other

00:02:57,200 --> 00:02:59,280
routes and by the time they go to

00:02:58,480 --> 00:03:01,680
another route

00:02:59,280 --> 00:03:04,000
all that code is already pre-loaded now

00:03:01,680 --> 00:03:06,239
why is it taking 10 seconds here how

00:03:04,000 --> 00:03:08,239
many of you here

00:03:06,239 --> 00:03:09,760
actually have a super fast network all

00:03:08,239 --> 00:03:11,680
the time

00:03:09,760 --> 00:03:14,400
yeah i don't either like conference

00:03:11,680 --> 00:03:16,879
network or sometimes if you live out in

00:03:14,400 --> 00:03:18,959
non-urban areas or sometimes you're just

00:03:16,879 --> 00:03:20,319
your isp doesn't work so great

00:03:18,959 --> 00:03:21,920
or maybe you work some place there's a

00:03:20,319 --> 00:03:22,720
lot of concrete and you can't get good

00:03:21,920 --> 00:03:24,239
signals

00:03:22,720 --> 00:03:26,000
there's a lot of reasons why people

00:03:24,239 --> 00:03:27,680
might not get fast wi-fi

00:03:26,000 --> 00:03:29,440
this is when it really shows up like it

00:03:27,680 --> 00:03:30,959
does here in this graph

00:03:29,440 --> 00:03:32,959
let's take a look at running a local

00:03:30,959 --> 00:03:35,680
network here and i'm simulating

00:03:32,959 --> 00:03:37,280
a slower speed so here's the application

00:03:35,680 --> 00:03:38,959
that we're going to see today

00:03:37,280 --> 00:03:40,959
notice it's taking a while to load it's

00:03:38,959 --> 00:03:42,400
even got some of one second latency

00:03:40,959 --> 00:03:44,159
now here's all the eagerly loaded

00:03:42,400 --> 00:03:46,480
content that's coming

00:03:44,159 --> 00:03:48,480
now we're emulating like 3g happening

00:03:46,480 --> 00:03:50,239
right now and then suddenly around 11

00:03:48,480 --> 00:03:52,080
seconds the content is loaded

00:03:50,239 --> 00:03:54,959
and then the pre-loaded stuff comes

00:03:52,080 --> 00:03:56,480
afterwards so now if i click on admin or

00:03:54,959 --> 00:03:58,239
villains and other things

00:03:56,480 --> 00:03:59,599
those particular routes can get loaded

00:03:58,239 --> 00:04:03,120
and the users can go to those

00:03:59,599 --> 00:04:04,720
really snappy so what happens when you

00:04:03,120 --> 00:04:06,159
navigate to a route let's break this

00:04:04,720 --> 00:04:08,959
down so you can do this

00:04:06,159 --> 00:04:10,640
yourselves first the router is going to

00:04:08,959 --> 00:04:11,760
make a network request to download a

00:04:10,640 --> 00:04:13,439
module

00:04:11,760 --> 00:04:15,280
so makes sense right you click on a

00:04:13,439 --> 00:04:17,280
route and then what happens is

00:04:15,280 --> 00:04:19,040
inside the router it says do i have this

00:04:17,280 --> 00:04:21,840
lazy loaded bundle

00:04:19,040 --> 00:04:23,600
currently in the browser so it's going

00:04:21,840 --> 00:04:26,720
to check to see that and if it doesn't

00:04:23,600 --> 00:04:28,160
it's going to fetch that bundle and once

00:04:26,720 --> 00:04:29,600
it fetches that bundle

00:04:28,160 --> 00:04:32,479
then it's going to cause the users to

00:04:29,600 --> 00:04:34,479
wait right so depending upon the speed

00:04:32,479 --> 00:04:35,680
of your app the speed of your network

00:04:34,479 --> 00:04:37,199
how you've pre-loaded

00:04:35,680 --> 00:04:38,560
that wait time could be a little bit

00:04:37,199 --> 00:04:40,880
different it could be small or it could

00:04:38,560 --> 00:04:41,759
be big

00:04:40,880 --> 00:04:43,680
so we're going to look at different

00:04:41,759 --> 00:04:45,120
preloading strategies now there's a

00:04:43,680 --> 00:04:45,840
couple that come out of the box with

00:04:45,120 --> 00:04:48,800
angular

00:04:45,840 --> 00:04:49,680
the default behavior is preload nothing

00:04:48,800 --> 00:04:51,600
that's our

00:04:49,680 --> 00:04:53,280
just basically work with lazy loading

00:04:51,600 --> 00:04:55,120
and don't preload anything

00:04:53,280 --> 00:04:57,440
only get the javascript as the user

00:04:55,120 --> 00:04:58,960
clicks in a route

00:04:57,440 --> 00:05:01,520
there's another much more aggressive

00:04:58,960 --> 00:05:03,280
preload this one sounds great at first

00:05:01,520 --> 00:05:04,880
it says get everything up front it's

00:05:03,280 --> 00:05:06,320
extremely aggressive

00:05:04,880 --> 00:05:08,320
but it also increases your network

00:05:06,320 --> 00:05:10,320
traffic and the usage

00:05:08,320 --> 00:05:12,080
so think about this if you've got an

00:05:10,320 --> 00:05:12,400
application with a lot of modules and

00:05:12,080 --> 00:05:14,160
they're

00:05:12,400 --> 00:05:15,680
large and you're on a slow network for

00:05:14,160 --> 00:05:17,759
your users

00:05:15,680 --> 00:05:19,039
if your users have preload all you're

00:05:17,759 --> 00:05:19,840
actually going to be occupying the

00:05:19,039 --> 00:05:21,600
network

00:05:19,840 --> 00:05:23,520
loading all that javascript while

00:05:21,600 --> 00:05:24,960
they're trying to use your application

00:05:23,520 --> 00:05:26,960
and they might not even need all those

00:05:24,960 --> 00:05:28,800
bundles loaded so you might want

00:05:26,960 --> 00:05:29,919
something in between

00:05:28,800 --> 00:05:32,560
and that's where we're here to talk

00:05:29,919 --> 00:05:34,400
about is custom preload strategies

00:05:32,560 --> 00:05:36,639
this is how you can control that

00:05:34,400 --> 00:05:39,120
customer experience

00:05:36,639 --> 00:05:40,720
so the way preloading works is like this

00:05:39,120 --> 00:05:41,840
after each navigation the router is

00:05:40,720 --> 00:05:44,320
going to check to see

00:05:41,840 --> 00:05:46,800
hey do you have any unloaded modules if

00:05:44,320 --> 00:05:48,479
there's any unloaded modules then

00:05:46,800 --> 00:05:49,919
it's going to say all right should any

00:05:48,479 --> 00:05:52,000
of them be pre-loaded

00:05:49,919 --> 00:05:53,919
and that's based on your logic so the

00:05:52,000 --> 00:05:55,360
first step happens automatically

00:05:53,919 --> 00:05:57,120
and then it's going to check your logic

00:05:55,360 --> 00:05:58,400
to see should any of them be pre-loaded

00:05:57,120 --> 00:06:00,800
and if so

00:05:58,400 --> 00:06:02,319
it'll actually preload those modules so

00:06:00,800 --> 00:06:05,360
you can decide which ones you want to

00:06:02,319 --> 00:06:07,039
put up front which ones you don't

00:06:05,360 --> 00:06:08,319
the place that you define this and set

00:06:07,039 --> 00:06:08,960
it up in your app if you're not familiar

00:06:08,319 --> 00:06:12,560
with it

00:06:08,960 --> 00:06:15,360
is right here oops

00:06:12,560 --> 00:06:17,199
so here we've got preloading nothing

00:06:15,360 --> 00:06:17,520
that's nothing at all that's the default

00:06:17,199 --> 00:06:20,080
so

00:06:17,520 --> 00:06:21,680
inside your router modules for root you

00:06:20,080 --> 00:06:23,039
pass this second option

00:06:21,680 --> 00:06:25,120
there's routes and then a pre-loading

00:06:23,039 --> 00:06:26,800
strategy that says basically don't

00:06:25,120 --> 00:06:29,520
preload that's the default

00:06:26,800 --> 00:06:31,120
or you can pre-load all things you get a

00:06:29,520 --> 00:06:32,400
preload you get a bundle and you get a

00:06:31,120 --> 00:06:33,759
bundle

00:06:32,400 --> 00:06:35,440
this is the other option it's the other

00:06:33,759 --> 00:06:37,120
side of the extreme that's where we're

00:06:35,440 --> 00:06:40,160
going to do everything

00:06:37,120 --> 00:06:42,960
for our customization so should you

00:06:40,160 --> 00:06:44,479
pre-load everything up front maybe it's

00:06:42,960 --> 00:06:46,479
something you have to think about

00:06:44,479 --> 00:06:48,240
but if you don't want to there's a

00:06:46,479 --> 00:06:49,680
couple options

00:06:48,240 --> 00:06:51,280
now i'm going to show you three options

00:06:49,680 --> 00:06:54,160
because i like the rule of three

00:06:51,280 --> 00:06:56,080
three different ways to pre-load your

00:06:54,160 --> 00:06:59,360
javascript bundles

00:06:56,080 --> 00:07:01,919
first you can opt in or opt

00:06:59,360 --> 00:07:03,759
out you can basically pick here's a

00:07:01,919 --> 00:07:04,639
bundle i want to preload here's a bundle

00:07:03,759 --> 00:07:06,240
i don't

00:07:04,639 --> 00:07:08,080
so you might have a customer orders app

00:07:06,240 --> 00:07:09,919
and say i want the customer site

00:07:08,080 --> 00:07:11,440
that bundle to be pre-loaded but i might

00:07:09,919 --> 00:07:12,240
not want the admin piece to be

00:07:11,440 --> 00:07:16,240
pre-loaded

00:07:12,240 --> 00:07:17,520
so you can define this at design time

00:07:16,240 --> 00:07:19,759
another way to do it is to check the

00:07:17,520 --> 00:07:21,280
network speed i've worked on many large

00:07:19,759 --> 00:07:22,479
apps where sometimes

00:07:21,280 --> 00:07:23,520
they're in a place where they know

00:07:22,479 --> 00:07:25,520
they're going to have good speed and

00:07:23,520 --> 00:07:27,360
other times they're on mobile devices

00:07:25,520 --> 00:07:28,560
or they're on cell phones or they're

00:07:27,360 --> 00:07:31,199
having to sell devices

00:07:28,560 --> 00:07:32,319
tethered to computers if that's the case

00:07:31,199 --> 00:07:33,840
you might want to check the network

00:07:32,319 --> 00:07:36,639
speed before you preload

00:07:33,840 --> 00:07:37,440
why do you really want to on a 3g

00:07:36,639 --> 00:07:40,080
network

00:07:37,440 --> 00:07:42,639
download something that might be one meg

00:07:40,080 --> 00:07:42,639
maybe not

00:07:42,960 --> 00:07:46,479
another option is to predict the

00:07:45,199 --> 00:07:49,440
pre-loading strategy

00:07:46,479 --> 00:07:50,479
based on the user's behaviors for

00:07:49,440 --> 00:07:52,400
example

00:07:50,479 --> 00:07:54,000
if somebody goes to a page we're going

00:07:52,400 --> 00:07:55,680
to do a shopping site they're looking

00:07:54,000 --> 00:07:57,280
for lysol wipes because they want to

00:07:55,680 --> 00:07:58,960
clean everything in their house

00:07:57,280 --> 00:08:01,039
they want to go find those they go to

00:07:58,960 --> 00:08:03,039
the shopping site they look for

00:08:01,039 --> 00:08:04,160
the search page once they get to the

00:08:03,039 --> 00:08:07,599
search page

00:08:04,160 --> 00:08:09,280
you know with a fair amount of certainty

00:08:07,599 --> 00:08:11,039
based upon analytics that they're going

00:08:09,280 --> 00:08:13,280
to press search and that's going to

00:08:11,039 --> 00:08:14,319
bring them to search results

00:08:13,280 --> 00:08:15,440
and then once they find the thing they

00:08:14,319 --> 00:08:16,720
want they're going to go to the search

00:08:15,440 --> 00:08:18,720
details

00:08:16,720 --> 00:08:21,440
so if those search results and details

00:08:18,720 --> 00:08:22,960
are in a different lazy loaded module

00:08:21,440 --> 00:08:23,919
couldn't you predict that if they get to

00:08:22,960 --> 00:08:25,039
the search page that you could

00:08:23,919 --> 00:08:27,120
automatically

00:08:25,039 --> 00:08:28,879
go ahead and load that there's certain

00:08:27,120 --> 00:08:30,080
behaviors we can look for and i'll show

00:08:28,879 --> 00:08:32,640
you how you can look for these and how

00:08:30,080 --> 00:08:33,919
you can code them

00:08:32,640 --> 00:08:35,440
so how do you create these custom

00:08:33,919 --> 00:08:36,159
preload strategies before we get into

00:08:35,440 --> 00:08:37,519
the demo

00:08:36,159 --> 00:08:39,519
we have to understand that we have to

00:08:37,519 --> 00:08:41,919
implement an interface so angular gives

00:08:39,519 --> 00:08:43,760
us this preload strategy interface

00:08:41,919 --> 00:08:45,519
we write our own logic that basically

00:08:43,760 --> 00:08:47,040
defines exactly what we wanted to do

00:08:45,519 --> 00:08:50,720
because we control it

00:08:47,040 --> 00:08:52,839
and then we just apply it to the routes

00:08:50,720 --> 00:08:55,760
so in a custom strategy we'll implement

00:08:52,839 --> 00:08:57,519
it we can set logic up for that function

00:08:55,760 --> 00:09:00,399
and then we can apply it

00:08:57,519 --> 00:09:02,800
super easy three steps and it's time for

00:09:00,399 --> 00:09:02,800
a demo

00:09:03,200 --> 00:09:07,040
okay so we're inside of our code base

00:09:05,600 --> 00:09:08,320
and we're going to see this a couple

00:09:07,040 --> 00:09:09,519
times today

00:09:08,320 --> 00:09:10,800
and i'll share all the code with you

00:09:09,519 --> 00:09:13,120
later right now i've got three

00:09:10,800 --> 00:09:14,560
strategies in my application

00:09:13,120 --> 00:09:16,160
we're going to take a look first at this

00:09:14,560 --> 00:09:19,519
opt in strategy

00:09:16,160 --> 00:09:20,880
here's how you define it so in my opt-in

00:09:19,519 --> 00:09:23,120
strategy

00:09:20,880 --> 00:09:24,720
i've defined this opt preload strategy

00:09:23,120 --> 00:09:27,120
here it's a class

00:09:24,720 --> 00:09:28,800
it's a service provided in the root and

00:09:27,120 --> 00:09:30,000
it implements the preload strategy

00:09:28,800 --> 00:09:31,839
interface

00:09:30,000 --> 00:09:33,440
and then it defines a single function

00:09:31,839 --> 00:09:34,240
called preload which accepts two

00:09:33,440 --> 00:09:37,360
arguments

00:09:34,240 --> 00:09:39,680
the route and the load the route

00:09:37,360 --> 00:09:42,399
is what's given to you so you can then

00:09:39,680 --> 00:09:43,920
determine what route did i get

00:09:42,399 --> 00:09:46,640
and then the load is a function that you

00:09:43,920 --> 00:09:48,560
can run if you want it to preload

00:09:46,640 --> 00:09:50,560
and if you don't you can just pass empty

00:09:48,560 --> 00:09:52,480
which comes out of rxjs

00:09:50,560 --> 00:09:53,600
so here we're checking to see with

00:09:52,480 --> 00:09:55,760
optional chaining

00:09:53,600 --> 00:09:57,519
is an optional chaining suite with

00:09:55,760 --> 00:09:59,440
optional chaining i can check to see if

00:09:57,519 --> 00:10:01,279
i've got a route which you should

00:09:59,440 --> 00:10:03,120
and it's got a data property with a

00:10:01,279 --> 00:10:05,600
preload property that is also

00:10:03,120 --> 00:10:07,440
truthy so even if it has the property

00:10:05,600 --> 00:10:08,959
and set the false it wouldn't work

00:10:07,440 --> 00:10:11,040
but if it has the property with any

00:10:08,959 --> 00:10:14,000
value in it that's basically not

00:10:11,040 --> 00:10:14,880
false or falsy it's going to load that

00:10:14,000 --> 00:10:16,720
route

00:10:14,880 --> 00:10:18,880
so what does that look like let's look

00:10:16,720 --> 00:10:20,160
and see where this opt-in preload

00:10:18,880 --> 00:10:22,959
strategy is used

00:10:20,160 --> 00:10:23,360
we can go find all references here we

00:10:22,959 --> 00:10:25,279
can see

00:10:23,360 --> 00:10:28,240
app module is using it so we'll flip

00:10:25,279 --> 00:10:28,240
over to app module

00:10:28,399 --> 00:10:31,519
now inside the app module we can scroll

00:10:30,399 --> 00:10:34,000
to the bottom

00:10:31,519 --> 00:10:35,680
we can see down here inside of our route

00:10:34,000 --> 00:10:36,720
we can set the pre-loading strategy

00:10:35,680 --> 00:10:38,240
right there

00:10:36,720 --> 00:10:40,320
now i'm going to set that to opt-in

00:10:38,240 --> 00:10:41,760
pre-load strategy

00:10:40,320 --> 00:10:43,200
now if i get rid of these comments and i

00:10:41,760 --> 00:10:44,320
put these in so you can look at them

00:10:43,200 --> 00:10:47,839
afterwards

00:10:44,320 --> 00:10:47,839
i'll just take them away for now

00:10:48,399 --> 00:10:52,480
you can see that this is just inside of

00:10:50,160 --> 00:10:54,480
the router module in my application

00:10:52,480 --> 00:10:56,480
very simple pre-load strategy opt-in

00:10:54,480 --> 00:10:57,920
pre-load now all i have to do is go to

00:10:56,480 --> 00:11:00,640
my router file

00:10:57,920 --> 00:11:02,000
in my router file i set up which routes

00:11:00,640 --> 00:11:03,519
i want to preload

00:11:02,000 --> 00:11:06,240
in this case i'm saying heroes should

00:11:03,519 --> 00:11:07,839
preload village to preload

00:11:06,240 --> 00:11:09,680
i want the admin to pre-load i'm setting

00:11:07,839 --> 00:11:13,040
them all up let's go ahead and turn

00:11:09,680 --> 00:11:15,760
off the villains actually just delete

00:11:13,040 --> 00:11:17,440
the line of code entirely

00:11:15,760 --> 00:11:19,360
and we'll do it this way so heroes

00:11:17,440 --> 00:11:21,680
villains admin

00:11:19,360 --> 00:11:24,640
and we're not doing the about so we run

00:11:21,680 --> 00:11:29,839
over to the application itself

00:11:24,640 --> 00:11:31,519
and we'll pull that over here

00:11:29,839 --> 00:11:32,800
now i'm going to reload the application

00:11:31,519 --> 00:11:34,480
and we're going to go inside the network

00:11:32,800 --> 00:11:37,920
tab

00:11:34,480 --> 00:11:38,720
we'll drag over the tools and look at

00:11:37,920 --> 00:11:39,920
what's happening

00:11:38,720 --> 00:11:42,800
now first thing i like to do is i'd like

00:11:39,920 --> 00:11:43,519
to type in module up inside the network

00:11:42,800 --> 00:11:45,040
tab

00:11:43,519 --> 00:11:47,360
that's going to filter all my network

00:11:45,040 --> 00:11:50,720
traffic and then i'm going to refresh

00:11:47,360 --> 00:11:52,240
over here on the left hand side the page

00:11:50,720 --> 00:11:53,760
and you're going to see i'm getting all

00:11:52,240 --> 00:11:56,800
of my heroes bundles

00:11:53,760 --> 00:11:57,920
first so i got the heroes bundles that

00:11:56,800 --> 00:12:00,160
works for me

00:11:57,920 --> 00:12:01,040
but what else did i get did i get any

00:12:00,160 --> 00:12:03,360
other preloads

00:12:01,040 --> 00:12:04,320
let's take a look so i go back into my

00:12:03,360 --> 00:12:06,320
code here

00:12:04,320 --> 00:12:08,720
and i can see that in my application

00:12:06,320 --> 00:12:11,120
i've got the opt-in

00:12:08,720 --> 00:12:12,160
and that opt-in is here and then i go to

00:12:11,120 --> 00:12:13,760
my router

00:12:12,160 --> 00:12:15,440
and i can see i've got my preload true

00:12:13,760 --> 00:12:16,880
for different settings

00:12:15,440 --> 00:12:19,440
and then i've got to go my strategy and

00:12:16,880 --> 00:12:20,880
see if my strategy is actually in place

00:12:19,440 --> 00:12:22,880
so once i've got all that those

00:12:20,880 --> 00:12:25,680
different modules will preload when i

00:12:22,880 --> 00:12:28,000
need them to preload

00:12:25,680 --> 00:12:29,040
the second kind of strategy that i want

00:12:28,000 --> 00:12:32,079
is going to be

00:12:29,040 --> 00:12:34,959
an on-demand preload

00:12:32,079 --> 00:12:37,279
so on demand is a little bit different

00:12:34,959 --> 00:12:38,639
on demand means that you get to decide

00:12:37,279 --> 00:12:40,240
when you're actually going to pre-load

00:12:38,639 --> 00:12:42,800
this stuff and we'll go over some

00:12:40,240 --> 00:12:44,399
comments for now there we go

00:12:42,800 --> 00:12:46,480
so with on-demand it's a little more

00:12:44,399 --> 00:12:47,839
implementation to code this what i'm

00:12:46,480 --> 00:12:49,600
looking for here now is

00:12:47,839 --> 00:12:51,600
i'm going to pull in a service called my

00:12:49,600 --> 00:12:54,000
preload on demand

00:12:51,600 --> 00:12:54,800
preload on demand is a service that

00:12:54,000 --> 00:12:56,480
gives me

00:12:54,800 --> 00:12:58,959
a notification so basically it's

00:12:56,480 --> 00:13:01,120
listening for numbers observable

00:12:58,959 --> 00:13:03,279
so i can then act upon that whenever

00:13:01,120 --> 00:13:05,360
somebody tells me to preload something

00:13:03,279 --> 00:13:06,959
i'm going to run this function it's

00:13:05,360 --> 00:13:08,720
going to listen for it

00:13:06,959 --> 00:13:11,200
and then it's going to determine this if

00:13:08,720 --> 00:13:13,279
there's a preload check

00:13:11,200 --> 00:13:16,079
so pre-load check what does that do it

00:13:13,279 --> 00:13:21,200
says hey do you have route data preload

00:13:16,079 --> 00:13:24,240
set on and is the route and its path

00:13:21,200 --> 00:13:25,680
right here is that route path inside of

00:13:24,240 --> 00:13:27,120
this option that you send

00:13:25,680 --> 00:13:28,880
so basically you're going to pass the

00:13:27,120 --> 00:13:30,959
path in for what you want to preload and

00:13:28,880 --> 00:13:33,680
it's going to match it to another

00:13:30,959 --> 00:13:36,480
to what's inside the router and if so

00:13:33,680 --> 00:13:38,160
it's going to go ahead and preload

00:13:36,480 --> 00:13:40,240
so it comes back and say if i should

00:13:38,160 --> 00:13:44,000
preload then

00:13:40,240 --> 00:13:45,920
return load otherwise return empty

00:13:44,000 --> 00:13:48,240
and that's the whole deal of it so the

00:13:45,920 --> 00:13:49,680
strategy is super simple with this one

00:13:48,240 --> 00:13:51,360
the real work is inside of this

00:13:49,680 --> 00:13:53,600
observable let's take a look at where

00:13:51,360 --> 00:13:56,240
this service exists and what it's doing

00:13:53,600 --> 00:13:58,320
so you find all references and come back

00:13:56,240 --> 00:14:00,560
over into the strategy itself

00:13:58,320 --> 00:14:02,000
we can see we've got our strategy here

00:14:00,560 --> 00:14:03,470
but look what's happening

00:14:02,000 --> 00:14:05,920
inside of our service

00:14:03,470 --> 00:14:08,320
[Music]

00:14:05,920 --> 00:14:10,959
here is our preload service and it

00:14:08,320 --> 00:14:12,720
simply defines a subject

00:14:10,959 --> 00:14:14,480
and that subject is implementing some

00:14:12,720 --> 00:14:14,959
options and what are those options going

00:14:14,480 --> 00:14:17,120
to be

00:14:14,959 --> 00:14:18,399
we can just click on it and you can see

00:14:17,120 --> 00:14:20,399
up here you've got the route path

00:14:18,399 --> 00:14:22,399
and preload so that's a true byte false

00:14:20,399 --> 00:14:24,560
by default

00:14:22,399 --> 00:14:25,440
so then i create a subject i get the

00:14:24,560 --> 00:14:27,199
observable

00:14:25,440 --> 00:14:29,120
and if somebody calls this function

00:14:27,199 --> 00:14:29,760
called start preload and they pass a

00:14:29,120 --> 00:14:31,600
path

00:14:29,760 --> 00:14:32,800
let's say they pass heroes or they pass

00:14:31,600 --> 00:14:34,880
villains it's

00:14:32,800 --> 00:14:37,199
automatically going to then say you know

00:14:34,880 --> 00:14:39,040
what go ahead and set those preload

00:14:37,199 --> 00:14:41,839
option to true for this route path

00:14:39,040 --> 00:14:43,120
and call subject next so this this

00:14:41,839 --> 00:14:44,800
method right here is called start

00:14:43,120 --> 00:14:46,480
preload on line 13.

00:14:44,800 --> 00:14:48,160
that is the thing that's going to kick

00:14:46,480 --> 00:14:51,040
off a preload

00:14:48,160 --> 00:14:52,560
of whatever route you want so how do you

00:14:51,040 --> 00:14:54,959
implement this

00:14:52,560 --> 00:14:56,560
imagine inside your navigation you've

00:14:54,959 --> 00:14:58,399
got a router link

00:14:56,560 --> 00:15:00,240
and in your router link there's my

00:14:58,399 --> 00:15:02,880
router link for heroes

00:15:00,240 --> 00:15:04,560
when i mouse over a particular menu item

00:15:02,880 --> 00:15:06,079
i want to preload whatever routes

00:15:04,560 --> 00:15:08,959
associated with that

00:15:06,079 --> 00:15:10,560
so all i have to do is pass in the menu

00:15:08,959 --> 00:15:12,639
item i want so in this case

00:15:10,560 --> 00:15:14,480
i'm going to pass in heroes that's going

00:15:12,639 --> 00:15:16,240
to preload that

00:15:14,480 --> 00:15:18,320
here's my villains route i want to pass

00:15:16,240 --> 00:15:20,160
in villains

00:15:18,320 --> 00:15:21,360
and then for this one i'll pass an admin

00:15:20,160 --> 00:15:23,920
and then about

00:15:21,360 --> 00:15:25,040
and the code for preload bundle is down

00:15:23,920 --> 00:15:27,360
here

00:15:25,040 --> 00:15:28,320
i just go and call my service start

00:15:27,360 --> 00:15:31,040
preload

00:15:28,320 --> 00:15:33,040
pass it the route path and then it's all

00:15:31,040 --> 00:15:34,800
good to go

00:15:33,040 --> 00:15:36,240
so to make this one work then we just

00:15:34,800 --> 00:15:37,680
have to type in the name of that

00:15:36,240 --> 00:15:41,199
particular

00:15:37,680 --> 00:15:44,000
preload service in this case that's our

00:15:41,199 --> 00:15:45,600
on demand preload strategy right here

00:15:44,000 --> 00:15:46,720
and that comes out of our preload

00:15:45,600 --> 00:15:50,000
strategy that we used

00:15:46,720 --> 00:15:50,000
so it's imported right there

00:15:50,079 --> 00:15:54,639
and then if we make sure we've reloaded

00:15:51,839 --> 00:15:56,639
our page

00:15:54,639 --> 00:15:58,399
now if i click on a button or i hover

00:15:56,639 --> 00:15:59,920
over different menu items i could go

00:15:58,399 --> 00:16:02,639
ahead and pre-load anything

00:15:59,920 --> 00:16:04,240
that i wanted to so that's where the

00:16:02,639 --> 00:16:08,240
things would preload for us

00:16:04,240 --> 00:16:10,560
automatically the last one

00:16:08,240 --> 00:16:12,240
is when i have a strategy that is a

00:16:10,560 --> 00:16:14,480
little more clever

00:16:12,240 --> 00:16:16,160
about where the user is we talked about

00:16:14,480 --> 00:16:18,000
network aware

00:16:16,160 --> 00:16:19,519
now did you know that there's a

00:16:18,000 --> 00:16:21,680
navigator api

00:16:19,519 --> 00:16:23,440
that comes with the browser now most

00:16:21,680 --> 00:16:24,720
modern browsers support this in fact

00:16:23,440 --> 00:16:26,160
almost all of them do

00:16:24,720 --> 00:16:28,000
so you can check to see if there's a

00:16:26,160 --> 00:16:28,560
navigator connection object and if there

00:16:28,000 --> 00:16:30,639
is

00:16:28,560 --> 00:16:32,560
i'm doing two different checks here i'm

00:16:30,639 --> 00:16:35,600
saying if the person has their mobile

00:16:32,560 --> 00:16:37,839
data saver option turned on then

00:16:35,600 --> 00:16:38,959
don't bother preloading anything because

00:16:37,839 --> 00:16:41,600
i don't want to slow them down if

00:16:38,959 --> 00:16:43,680
they're trying to save data

00:16:41,600 --> 00:16:44,639
if they're not they're just using a good

00:16:43,680 --> 00:16:46,160
connection

00:16:44,639 --> 00:16:48,160
then you can say all right what is the

00:16:46,160 --> 00:16:51,199
connections that you want to support

00:16:48,160 --> 00:16:52,320
if they're using slow 2g or 2g i don't

00:16:51,199 --> 00:16:54,880
want them to preload

00:16:52,320 --> 00:16:56,480
so therefore i'm going to return false

00:16:54,880 --> 00:16:58,079
but if they're on 3g or 4g

00:16:56,480 --> 00:16:59,600
i'm ok with this and i'm going to go

00:16:58,079 --> 00:17:01,839
ahead and preload

00:16:59,600 --> 00:17:04,079
so i'm using the network information to

00:17:01,839 --> 00:17:05,600
find out how fast is their network

00:17:04,079 --> 00:17:07,600
and then we can go ahead and pre-load

00:17:05,600 --> 00:17:08,880
the content as they want it

00:17:07,600 --> 00:17:11,439
so it's really up to you and how you

00:17:08,880 --> 00:17:13,360
implement this and the guard logic here

00:17:11,439 --> 00:17:14,480
it's just nice to have it because what

00:17:13,360 --> 00:17:15,839
if they're not

00:17:14,480 --> 00:17:18,720
using a browser that supports this

00:17:15,839 --> 00:17:21,280
navigator that happens to be in here

00:17:18,720 --> 00:17:22,559
so then you end up with all that the

00:17:21,280 --> 00:17:24,000
nice thing about these three different

00:17:22,559 --> 00:17:25,679
strategies that we've seen is that you

00:17:24,000 --> 00:17:27,660
can actually mix and match those

00:17:25,679 --> 00:17:30,559
to do it any way you like

00:17:27,660 --> 00:17:32,240
[Music]

00:17:30,559 --> 00:17:33,520
so you can run this demo at the links

00:17:32,240 --> 00:17:34,080
that i'll show you at the end but just

00:17:33,520 --> 00:17:36,559
in

00:17:34,080 --> 00:17:38,400
hindsight here what do we do we've got a

00:17:36,559 --> 00:17:39,840
network aware strategy

00:17:38,400 --> 00:17:41,120
that we walked through that's the one

00:17:39,840 --> 00:17:41,840
that checks to see the network that you

00:17:41,120 --> 00:17:43,600
have

00:17:41,840 --> 00:17:45,760
that's really good especially if your

00:17:43,600 --> 00:17:47,440
users might not always be on super fast

00:17:45,760 --> 00:17:49,039
wi-fi

00:17:47,440 --> 00:17:51,039
you've got an on-demand this is where

00:17:49,039 --> 00:17:53,360
you choose how it works

00:17:51,039 --> 00:17:55,280
in this case i'm choosing that when

00:17:53,360 --> 00:17:56,240
somebody hovers over a link or they

00:17:55,280 --> 00:17:58,400
press a button

00:17:56,240 --> 00:18:00,160
or they do a certain action on the page

00:17:58,400 --> 00:18:02,320
based upon user behavior

00:18:00,160 --> 00:18:04,400
then i'm going to go preload that thing

00:18:02,320 --> 00:18:06,400
because then the users might

00:18:04,400 --> 00:18:07,520
get that page to come up instantly by

00:18:06,400 --> 00:18:10,480
the time they actually click

00:18:07,520 --> 00:18:11,840
or do something with it and then there's

00:18:10,480 --> 00:18:13,039
the opt-in strategy

00:18:11,840 --> 00:18:15,200
and that one you can basically set a

00:18:13,039 --> 00:18:16,960
flag on the routes at design time

00:18:15,200 --> 00:18:20,240
to basically decide which ones will

00:18:16,960 --> 00:18:20,240
preload and which ones will not

00:18:20,640 --> 00:18:23,679
so again customizing preload strategy

00:18:22,799 --> 00:18:25,919
pretty simple

00:18:23,679 --> 00:18:27,679
you decide when to do it or when not to

00:18:25,919 --> 00:18:29,919
you can implement the interface

00:18:27,679 --> 00:18:31,120
you define your logic in this case

00:18:29,919 --> 00:18:33,520
you're using the data preload to

00:18:31,120 --> 00:18:35,760
determine if you pre-load or not

00:18:33,520 --> 00:18:36,960
and then you can simply add it if you

00:18:35,760 --> 00:18:40,640
get the preload option

00:18:36,960 --> 00:18:42,559
inside of your routes file

00:18:40,640 --> 00:18:44,400
and then the network aware strategy

00:18:42,559 --> 00:18:45,280
we've got the save data saver and then

00:18:44,400 --> 00:18:46,880
we decide which

00:18:45,280 --> 00:18:48,559
network connections we want i like to

00:18:46,880 --> 00:18:50,320
debug this to make sure i know

00:18:48,559 --> 00:18:52,400
which connections are popping up in my

00:18:50,320 --> 00:18:54,160
applications

00:18:52,400 --> 00:18:56,480
but in the end it's up to you and how

00:18:54,160 --> 00:18:58,400
you define this and if you do this

00:18:56,480 --> 00:19:00,000
your users will have a much better

00:18:58,400 --> 00:19:02,400
experience

00:19:00,000 --> 00:19:03,919
so final tips for you all i highly

00:19:02,400 --> 00:19:04,559
recommend that all of your applications

00:19:03,919 --> 00:19:06,720
define

00:19:04,559 --> 00:19:07,600
your preload strategy pick the one that

00:19:06,720 --> 00:19:09,120
you want

00:19:07,600 --> 00:19:10,720
there's other combinations that you can

00:19:09,120 --> 00:19:12,080
choose as well and you can grab these

00:19:10,720 --> 00:19:13,840
three that i created

00:19:12,080 --> 00:19:15,360
up from the repository that you're going

00:19:13,840 --> 00:19:17,120
to see in just a moment

00:19:15,360 --> 00:19:19,280
and if you want to not have to worry

00:19:17,120 --> 00:19:21,200
about writing these different

00:19:19,280 --> 00:19:23,200
strategies you can use the snippets that

00:19:21,200 --> 00:19:25,600
i have at this link it'll actually

00:19:23,200 --> 00:19:26,799
automatically fill in different kinds of

00:19:25,600 --> 00:19:29,039
pre-loading strategies

00:19:26,799 --> 00:19:30,559
right out of the box for you so if we go

00:19:29,039 --> 00:19:32,480
back and look at this real quick

00:19:30,559 --> 00:19:34,320
let's say i had nothing in that file if

00:19:32,480 --> 00:19:36,960
i come up here and i type in preload

00:19:34,320 --> 00:19:38,400
you can see there's a preload network

00:19:36,960 --> 00:19:39,919
right there there's a preloaded

00:19:38,400 --> 00:19:43,039
networking strategy

00:19:39,919 --> 00:19:44,320
if i want to type in make the fonts a

00:19:43,039 --> 00:19:46,320
little smaller

00:19:44,320 --> 00:19:47,760
i want to type in opt-in there's the

00:19:46,320 --> 00:19:51,280
opt-in strategy

00:19:47,760 --> 00:19:53,600
all you have to do is type in a dash

00:19:51,280 --> 00:19:54,400
preload and you'll see several different

00:19:53,600 --> 00:19:57,520
options here

00:19:54,400 --> 00:19:59,120
for preload strategies that you can use

00:19:57,520 --> 00:20:00,720
now you could of course write your own

00:19:59,120 --> 00:20:04,320
custom one anytime you want

00:20:00,720 --> 00:20:05,039
that'll work as well and if you want to

00:20:04,320 --> 00:20:07,760
see

00:20:05,039 --> 00:20:10,000
the repository all you have to do is go

00:20:07,760 --> 00:20:10,000
to

00:20:10,080 --> 00:20:15,760
github slash john papa slash

00:20:13,280 --> 00:20:17,200
angular preload and there's the code

00:20:15,760 --> 00:20:19,280
that you can get for this entire thing

00:20:17,200 --> 00:20:23,280
and i uploaded it this morning and

00:20:19,280 --> 00:20:25,200
everything is tour of heroes of course

00:20:23,280 --> 00:20:27,760
thank you very much for coming today and

00:20:25,200 --> 00:20:30,510
i hope that you have a good time and

00:20:27,760 --> 00:20:32,840
that you pre-load strategies to all your

00:20:30,510 --> 00:20:35,840
[Music]

00:20:32,840 --> 00:20:35,840
applications

00:20:37,340 --> 00:20:44,939
[Music]

00:20:39,830 --> 00:20:44,939
[Applause]

00:20:45,280 --> 00:20:47,360

YouTube URL: https://www.youtube.com/watch?v=rr5whHCdVCY


