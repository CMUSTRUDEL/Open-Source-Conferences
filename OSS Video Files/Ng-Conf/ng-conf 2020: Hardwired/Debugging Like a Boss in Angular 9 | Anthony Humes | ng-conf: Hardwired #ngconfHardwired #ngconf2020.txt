Title: Debugging Like a Boss in Angular 9 | Anthony Humes | ng-conf: Hardwired #ngconfHardwired #ngconf2020
Publication date: 2020-10-01
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

For the first time ever, Angular has implemented a robust debugging api (sorry, ng.probe doesnâ€™t count) that make sense and works. Come and learn tips and tricks that will improve the way you debug your Angular apps using the console in Angular 9.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,180 --> 00:00:02,970
[Music]

00:00:02,400 --> 00:00:16,480
[Applause]

00:00:02,970 --> 00:00:17,920
[Music]

00:00:16,480 --> 00:00:20,880
hey mgcop

00:00:17,920 --> 00:00:22,480
um before i get started i do want to say

00:00:20,880 --> 00:00:23,680
this presentation starts going badly

00:00:22,480 --> 00:00:24,880
maybe someone else has already said this

00:00:23,680 --> 00:00:25,760
but you should just type pizza into the

00:00:24,880 --> 00:00:27,199
chat

00:00:25,760 --> 00:00:29,679
save us all some a little bit of time

00:00:27,199 --> 00:00:31,760
now my name is anthony humes

00:00:29,679 --> 00:00:34,399
um i am an engineer for a company called

00:00:31,760 --> 00:00:36,719
simplefile down here in provo utah

00:00:34,399 --> 00:00:38,239
and if there's one thing that you need

00:00:36,719 --> 00:00:38,960
to know kind of about me or at least

00:00:38,239 --> 00:00:40,480
that i

00:00:38,960 --> 00:00:42,320
love is the fact that i'm a self-taught

00:00:40,480 --> 00:00:44,640
engineer um so about

00:00:42,320 --> 00:00:46,079
five six years ago i really did not like

00:00:44,640 --> 00:00:48,399
my job in marketing

00:00:46,079 --> 00:00:49,280
um so i graduated in so i started to

00:00:48,399 --> 00:00:51,680
look for some

00:00:49,280 --> 00:00:52,320
some differences and some changes and

00:00:51,680 --> 00:00:53,840
this

00:00:52,320 --> 00:00:56,079
angular just become one of those things

00:00:53,840 --> 00:00:59,039
that i just love to learn about and

00:00:56,079 --> 00:01:00,879
teach and to talk about so what i want

00:00:59,039 --> 00:01:02,800
to do is i want to start off today just

00:01:00,879 --> 00:01:05,760
by talking a little bit about a story so

00:01:02,800 --> 00:01:07,680
when i was first an engineer what i did

00:01:05,760 --> 00:01:10,000
is i did

00:01:07,680 --> 00:01:11,280
wordpress development now that's just

00:01:10,000 --> 00:01:14,880
basics bare bone

00:01:11,280 --> 00:01:17,280
almost nothing really to it um and

00:01:14,880 --> 00:01:18,479
yet as time progressed i wanted to do

00:01:17,280 --> 00:01:20,240
more so

00:01:18,479 --> 00:01:22,000
a client came to us and said hey i want

00:01:20,240 --> 00:01:24,320
to do a custom website

00:01:22,000 --> 00:01:26,159
now at the time we should have just done

00:01:24,320 --> 00:01:27,200
a wordpress website but what ended up

00:01:26,159 --> 00:01:28,720
happening is i was like hey you know

00:01:27,200 --> 00:01:30,320
what let's do something different and i

00:01:28,720 --> 00:01:31,759
convinced my boss that you know we

00:01:30,320 --> 00:01:33,520
should take this risk and

00:01:31,759 --> 00:01:34,799
and jump in and do some new things some

00:01:33,520 --> 00:01:37,200
different stuff so i did some

00:01:34,799 --> 00:01:38,479
research online trying to anthony a new

00:01:37,200 --> 00:01:39,520
solution that would be useful and they

00:01:38,479 --> 00:01:42,079
work well

00:01:39,520 --> 00:01:43,680
yeah i need you to figure out how to be

00:01:42,079 --> 00:01:45,360
a little bit louder you're a little soft

00:01:43,680 --> 00:01:48,799
on the stream sorry bro

00:01:45,360 --> 00:01:50,560
no no worries is that any better really

00:01:48,799 --> 00:01:54,479
uh can you turn it up on your mic a

00:01:50,560 --> 00:01:56,799
little bit it's a little bit better

00:01:54,479 --> 00:02:00,240
is that good are you using no i don't

00:01:56,799 --> 00:02:00,240
think you're using the right one in zoom

00:02:04,560 --> 00:02:09,840
i did but i will switch mics so

00:02:11,360 --> 00:02:14,080
is that any better

00:02:15,680 --> 00:02:19,360
hello can you guys hear me still any

00:02:17,120 --> 00:02:19,360
better

00:02:21,040 --> 00:02:25,040
that's better that's perfectly fine with

00:02:23,200 --> 00:02:28,959
me okay

00:02:25,040 --> 00:02:31,040
so no worries thanks aaron so

00:02:28,959 --> 00:02:32,319
as i was saying what we did is we ended

00:02:31,040 --> 00:02:33,680
up picking this new thing

00:02:32,319 --> 00:02:35,680
at least this new thing to me called

00:02:33,680 --> 00:02:37,920
ruby on rails and we picked a new

00:02:35,680 --> 00:02:40,160
database of postgres

00:02:37,920 --> 00:02:42,000
and we picked a brand new front end to

00:02:40,160 --> 00:02:43,200
make it things a little more snappy

00:02:42,000 --> 00:02:46,319
called backbone

00:02:43,200 --> 00:02:47,840
now for me i was like this is awesome

00:02:46,319 --> 00:02:48,640
this is really good and i was like you

00:02:47,840 --> 00:02:51,040
know what

00:02:48,640 --> 00:02:52,319
i totally have this everything's going

00:02:51,040 --> 00:02:52,800
to be awesome don't know anything about

00:02:52,319 --> 00:02:54,000
these

00:02:52,800 --> 00:02:57,200
but i'm going to go ahead and i'm going

00:02:54,000 --> 00:02:59,519
to do it and this is going to rock so

00:02:57,200 --> 00:03:00,480
what happened well we started this

00:02:59,519 --> 00:03:02,720
journey we went

00:03:00,480 --> 00:03:04,959
and months went by development and i had

00:03:02,720 --> 00:03:06,959
my own office i was building things

00:03:04,959 --> 00:03:08,000
it all felt really cool and i really

00:03:06,959 --> 00:03:09,680
enjoyed it

00:03:08,000 --> 00:03:11,200
but then little crack started to show

00:03:09,680 --> 00:03:12,800
where the

00:03:11,200 --> 00:03:14,400
just trying to figure out how things

00:03:12,800 --> 00:03:16,319
were breaking and what they were doing

00:03:14,400 --> 00:03:18,000
kept on becoming worse and kept on being

00:03:16,319 --> 00:03:21,200
having more and more problems

00:03:18,000 --> 00:03:22,480
well finally when i was in cr

00:03:21,200 --> 00:03:23,840
it was christmas time i was in

00:03:22,480 --> 00:03:24,720
disneyland with my family and i found

00:03:23,840 --> 00:03:28,560
myself working

00:03:24,720 --> 00:03:30,480
40 hours in disneyland and what ended up

00:03:28,560 --> 00:03:32,879
happening was i learned that

00:03:30,480 --> 00:03:34,560
this project had basically failed it was

00:03:32,879 --> 00:03:35,760
an absolute murder failure and it wasn't

00:03:34,560 --> 00:03:38,480
just like a small one

00:03:35,760 --> 00:03:40,239
it was such a failure that the client

00:03:38,480 --> 00:03:42,560
ended up going out of business

00:03:40,239 --> 00:03:44,239
and i ended up having to find a new job

00:03:42,560 --> 00:03:46,560
and what did i

00:03:44,239 --> 00:03:47,760
i couldn't ryan to ask myself why did

00:03:46,560 --> 00:03:49,599
this happen

00:03:47,760 --> 00:03:51,440
and what ended up happening was when

00:03:49,599 --> 00:03:53,599
critical production issues arose

00:03:51,440 --> 00:03:55,360
it was hard to debug them and that cost

00:03:53,599 --> 00:03:57,920
us so much time and money

00:03:55,360 --> 00:03:59,760
and issue after issue and what i learned

00:03:57,920 --> 00:04:01,920
was that i wasn't using even the basic

00:03:59,760 --> 00:04:04,159
debugging tools i didn't know how to use

00:04:01,920 --> 00:04:06,000
breakpoints in ruby i wasn't writing any

00:04:04,159 --> 00:04:07,920
kind of unit tests and i wasn't i

00:04:06,000 --> 00:04:09,439
never even opened up to chrome developer

00:04:07,920 --> 00:04:11,360
tools

00:04:09,439 --> 00:04:12,480
so from this what can we learn well to

00:04:11,360 --> 00:04:14,560
build good apps

00:04:12,480 --> 00:04:16,400
you must be able to to debug them

00:04:14,560 --> 00:04:18,239
effectively but not just that

00:04:16,400 --> 00:04:20,799
to debug effectively you must be able to

00:04:18,239 --> 00:04:24,400
use all of your available tools

00:04:20,799 --> 00:04:26,960
so that leads us to this new api

00:04:24,400 --> 00:04:28,960
inside of angular and what happened was

00:04:26,960 --> 00:04:30,720
we for me what i learned about this was

00:04:28,960 --> 00:04:32,560
we had a senior engineer come and ask me

00:04:30,720 --> 00:04:34,560
where did ng probe go

00:04:32,560 --> 00:04:35,759
and honestly i went ahead and i said

00:04:34,560 --> 00:04:38,320
well let me get back to you and i went

00:04:35,759 --> 00:04:39,919
to google and i typed in what is ng pro

00:04:38,320 --> 00:04:42,240
and i did some research and i ended up

00:04:39,919 --> 00:04:42,880
finding just a single small blog article

00:04:42,240 --> 00:04:44,720
about it

00:04:42,880 --> 00:04:46,880
and i went back and said oh there's

00:04:44,720 --> 00:04:48,479
these new methods in angular

00:04:46,880 --> 00:04:50,000
but that wasn't good enough and i needed

00:04:48,479 --> 00:04:51,840
to find out what was

00:04:50,000 --> 00:04:53,440
how did they work and what were they so

00:04:51,840 --> 00:04:54,639
i ended up doing some more research by

00:04:53,440 --> 00:04:56,000
reading the source code and kind of

00:04:54,639 --> 00:04:57,199
getting the feel for it

00:04:56,000 --> 00:04:59,280
i end up learning that these come

00:04:57,199 --> 00:05:00,479
directly from iv internal methods and

00:04:59,280 --> 00:05:02,639
that was like

00:05:00,479 --> 00:05:04,320
amazing and just totally made me like

00:05:02,639 --> 00:05:07,600
okay so this is something that ivy

00:05:04,320 --> 00:05:08,800
itself is using so the first question we

00:05:07,600 --> 00:05:10,000
have to ask ourselves if we're going to

00:05:08,800 --> 00:05:13,360
use these new methods

00:05:10,000 --> 00:05:15,280
is well hey where do i get them so if i

00:05:13,360 --> 00:05:18,560
go to the console and i type

00:05:15,280 --> 00:05:19,840
in just ng into this into the console

00:05:18,560 --> 00:05:22,639
i'm going to get a new set

00:05:19,840 --> 00:05:24,000
of methods and these are the methods

00:05:22,639 --> 00:05:26,960
that we can use for this debugging

00:05:24,000 --> 00:05:27,840
api now before we start we have to ask

00:05:26,960 --> 00:05:29,360
ourselves

00:05:27,840 --> 00:05:30,800
um all right i have to explain a little

00:05:29,360 --> 00:05:32,000
bit about this dollar sign zero you're

00:05:30,800 --> 00:05:34,160
gonna see both

00:05:32,000 --> 00:05:36,000
um as we walk through the rest of the

00:05:34,160 --> 00:05:38,000
slides and as we do the demo

00:05:36,000 --> 00:05:39,440
now dollar sign zero it's the most

00:05:38,000 --> 00:05:41,120
recent selection

00:05:39,440 --> 00:05:42,880
from the elements inspector or from

00:05:41,120 --> 00:05:44,080
using the inspect element so when you

00:05:42,880 --> 00:05:45,919
select that element

00:05:44,080 --> 00:05:47,360
and you select and you open up the

00:05:45,919 --> 00:05:48,479
developer tools by saying inspect

00:05:47,360 --> 00:05:50,000
element

00:05:48,479 --> 00:05:51,280
and you if you typed in dollar sign

00:05:50,000 --> 00:05:52,880
video you're going to get a reference to

00:05:51,280 --> 00:05:55,360
that element in the console

00:05:52,880 --> 00:05:56,639
so we can see that here if i select this

00:05:55,360 --> 00:05:58,720
paragraph

00:05:56,639 --> 00:06:00,560
and i type in dollar sign 0 i'm going to

00:05:58,720 --> 00:06:03,680
get that reference there

00:06:00,560 --> 00:06:05,039
now the first set of apis that i kind of

00:06:03,680 --> 00:06:05,520
want to walk they're going to be kind of

00:06:05,039 --> 00:06:06,960
getting

00:06:05,520 --> 00:06:09,360
angular elements so these are going to

00:06:06,960 --> 00:06:12,240
be getting angular

00:06:09,360 --> 00:06:13,919
components directives and listeners so

00:06:12,240 --> 00:06:15,759
let's walk through each one of these

00:06:13,919 --> 00:06:17,840
and see a little bit more about what

00:06:15,759 --> 00:06:19,680
some use cases might be for them

00:06:17,840 --> 00:06:21,199
so the first is going to be ng.get

00:06:19,680 --> 00:06:23,039
component now what it does is that it

00:06:21,199 --> 00:06:25,120
retrieves the component

00:06:23,039 --> 00:06:26,800
for an html element so if you've seen

00:06:25,120 --> 00:06:29,360
the html tags

00:06:26,800 --> 00:06:30,800
that was referencing your element um if

00:06:29,360 --> 00:06:32,720
you type if you were to select that and

00:06:30,800 --> 00:06:34,960
type in ng.git component it's going to

00:06:32,720 --> 00:06:36,639
return that and this is super useful

00:06:34,960 --> 00:06:38,560
for checking what's the state of my app

00:06:36,639 --> 00:06:40,240
at any moment in time so i can say okay

00:06:38,560 --> 00:06:42,560
well what is the state what is

00:06:40,240 --> 00:06:43,280
that current class instance on top of

00:06:42,560 --> 00:06:46,479
that

00:06:43,280 --> 00:06:48,080
if i do it's really helpful for testing

00:06:46,479 --> 00:06:49,039
like third-party components so if i've

00:06:48,080 --> 00:06:52,319
got something like

00:06:49,039 --> 00:06:53,520
ag grid or ngb bootstrap and i want to

00:06:52,319 --> 00:06:54,639
actually see what's the state of some of

00:06:53,520 --> 00:06:57,199
their components

00:06:54,639 --> 00:06:58,479
i can go ahead and i can type this in

00:06:57,199 --> 00:07:00,560
and get that state

00:06:58,479 --> 00:07:02,400
now directives if you type in

00:07:00,560 --> 00:07:03,039
ng.getdirectors it's going to retrieve

00:07:02,400 --> 00:07:06,080
an

00:07:03,039 --> 00:07:08,000
array of directives for any html element

00:07:06,080 --> 00:07:09,759
and this is super useful for seeing

00:07:08,000 --> 00:07:10,960
which directives are affecting the

00:07:09,759 --> 00:07:12,240
elements so sometimes you'll have

00:07:10,960 --> 00:07:13,840
directives that are effective elements

00:07:12,240 --> 00:07:15,680
through standard attributes

00:07:13,840 --> 00:07:18,160
it's always clear how it's being

00:07:15,680 --> 00:07:20,319
effective so you can debug and say hey

00:07:18,160 --> 00:07:21,840
what stuff is actually approaching is

00:07:20,319 --> 00:07:25,280
being done on this so

00:07:21,840 --> 00:07:26,960
the um and finally here ng.get listeners

00:07:25,280 --> 00:07:27,919
what it does is it returns both an array

00:07:26,960 --> 00:07:30,080
of html

00:07:27,919 --> 00:07:31,120
and host listeners for an html element

00:07:30,080 --> 00:07:33,120
and this is

00:07:31,120 --> 00:07:35,280
really useful for when you want to

00:07:33,120 --> 00:07:37,280
trigger your listeners without

00:07:35,280 --> 00:07:39,280
actually running through the action

00:07:37,280 --> 00:07:39,840
because we've done listeners with scroll

00:07:39,280 --> 00:07:42,080
events

00:07:39,840 --> 00:07:43,280
and for us there's a lot of times where

00:07:42,080 --> 00:07:45,360
i just want to see what happens when i

00:07:43,280 --> 00:07:47,280
give it a specific scroll event

00:07:45,360 --> 00:07:48,960
and i end up trying to scroll up and

00:07:47,280 --> 00:07:51,280
down just to get that event to happen

00:07:48,960 --> 00:07:52,960
perfectly where now i can test that

00:07:51,280 --> 00:07:54,400
so let's show an example of this so if i

00:07:52,960 --> 00:07:57,280
go ahead and i say

00:07:54,400 --> 00:07:59,280
i want to select this app child and i

00:07:57,280 --> 00:08:01,599
type in ng.get component

00:07:59,280 --> 00:08:02,879
i'm going to receive that component

00:08:01,599 --> 00:08:05,120
instance and this is going to be really

00:08:02,879 --> 00:08:06,879
helpful for testing things in isolation

00:08:05,120 --> 00:08:09,039
like checking the specific instance of

00:08:06,879 --> 00:08:11,199
an item inside of an ng for loop

00:08:09,039 --> 00:08:12,800
where i can say hey what is the actual

00:08:11,199 --> 00:08:15,120
data that's been provided here

00:08:12,800 --> 00:08:16,319
now once we have this instance the next

00:08:15,120 --> 00:08:17,840
thing that we can do with it is we can

00:08:16,319 --> 00:08:20,960
actually make changes

00:08:17,840 --> 00:08:23,199
and the this method ng.apply changes

00:08:20,960 --> 00:08:25,120
allows us to trigger change detection

00:08:23,199 --> 00:08:26,960
for that specific component

00:08:25,120 --> 00:08:28,240
so if we go ahead and we look at this

00:08:26,960 --> 00:08:31,680
and say

00:08:28,240 --> 00:08:34,240
um you know i want to say okay

00:08:31,680 --> 00:08:35,680
i'm selecting this component i type in

00:08:34,240 --> 00:08:38,320
ng.git component

00:08:35,680 --> 00:08:39,039
i change the value i run ng apply

00:08:38,320 --> 00:08:41,839
changes

00:08:39,039 --> 00:08:42,800
my actual value in my html is going to

00:08:41,839 --> 00:08:44,480
get updated

00:08:42,800 --> 00:08:45,920
and this can be really helpful for

00:08:44,480 --> 00:08:47,600
testing when i make changes

00:08:45,920 --> 00:08:49,360
or what actually occurs from that but

00:08:47,600 --> 00:08:51,200
it's also very helpful for

00:08:49,360 --> 00:08:52,880
debugging change detection issues so if

00:08:51,200 --> 00:08:54,880
you're thinking you're having changed

00:08:52,880 --> 00:08:56,480
detection issues you can go into your

00:08:54,880 --> 00:08:57,440
app you can select the element that is

00:08:56,480 --> 00:08:59,200
having problems

00:08:57,440 --> 00:09:00,480
and you can run it manually run a change

00:08:59,200 --> 00:09:03,680
detection

00:09:00,480 --> 00:09:04,800
cycle on that element now a couple of

00:09:03,680 --> 00:09:08,560
other methods here

00:09:04,800 --> 00:09:10,160
that are um that are kind of important

00:09:08,560 --> 00:09:12,720
are going to be like ng.get owning

00:09:10,160 --> 00:09:14,959
component and ng.get context so

00:09:12,720 --> 00:09:16,320
um get owning component it's just like

00:09:14,959 --> 00:09:18,080
the git component

00:09:16,320 --> 00:09:19,839
but it can be used on any element and it

00:09:18,080 --> 00:09:21,519
returns the parent component

00:09:19,839 --> 00:09:23,360
for that html element so it runs it

00:09:21,519 --> 00:09:25,519
traverses the html dom

00:09:23,360 --> 00:09:26,720
and finds the closest parent element

00:09:25,519 --> 00:09:28,640
that is an eight

00:09:26,720 --> 00:09:30,880
that is a comp an angular component and

00:09:28,640 --> 00:09:32,160
returns to you that instance that's very

00:09:30,880 --> 00:09:34,320
helpful if what you're seeing

00:09:32,160 --> 00:09:37,360
is things like paragraphs and that kind

00:09:34,320 --> 00:09:39,680
of stuff now ng.get context

00:09:37,360 --> 00:09:42,399
what it does is that is that it returns

00:09:39,680 --> 00:09:44,640
the context for like an ngf or an ng4

00:09:42,399 --> 00:09:47,360
for an html element so if you're seeing

00:09:44,640 --> 00:09:48,800
a an array of items or like a list

00:09:47,360 --> 00:09:51,920
you can actually use this to get some

00:09:48,800 --> 00:09:55,200
insight into what the ng4

00:09:51,920 --> 00:09:57,920
is actually doing inside of that element

00:09:55,200 --> 00:09:58,800
now a couple of other methods these are

00:09:57,920 --> 00:10:01,440
just uh

00:09:58,800 --> 00:10:03,120
ng.get root components and ng get

00:10:01,440 --> 00:10:04,160
injector

00:10:03,120 --> 00:10:06,000
we don't have enough time to really go

00:10:04,160 --> 00:10:07,040
over them in any depth but they're going

00:10:06,000 --> 00:10:08,959
to

00:10:07,040 --> 00:10:10,399
retrieve some machines just like what

00:10:08,959 --> 00:10:12,000
your base root component is

00:10:10,399 --> 00:10:13,920
that's been bootstrapped by angular as

00:10:12,000 --> 00:10:15,040
well as i'm getting the injector for a

00:10:13,920 --> 00:10:17,760
specific component

00:10:15,040 --> 00:10:18,959
now before we do our demo and talk a

00:10:17,760 --> 00:10:20,720
little bit about this i want to talk

00:10:18,959 --> 00:10:22,959
about what these apis

00:10:20,720 --> 00:10:23,839
won't really do how they probably won't

00:10:22,959 --> 00:10:27,200
help very much

00:10:23,839 --> 00:10:28,160
inside of your code base so the first

00:10:27,200 --> 00:10:29,600
thing is that

00:10:28,160 --> 00:10:31,360
is that they don't really replace using

00:10:29,600 --> 00:10:32,079
breakpoints in chrome they're in

00:10:31,360 --> 00:10:33,839
addition to

00:10:32,079 --> 00:10:35,519
that um and you're still going to find

00:10:33,839 --> 00:10:36,480
yourself needing to use breakpoints to

00:10:35,519 --> 00:10:38,800
be able to

00:10:36,480 --> 00:10:40,320
see how specific methods and actions are

00:10:38,800 --> 00:10:41,760
actually working inside of your

00:10:40,320 --> 00:10:43,440
components

00:10:41,760 --> 00:10:45,920
they also don't really work very well to

00:10:43,440 --> 00:10:46,720
the bug interactions between components

00:10:45,920 --> 00:10:48,320
so if i've got

00:10:46,720 --> 00:10:49,360
one method that you know i've got a

00:10:48,320 --> 00:10:51,200
bunch of components that i'll kind of

00:10:49,360 --> 00:10:52,800
rely on upon a central service

00:10:51,200 --> 00:10:54,480
it's not really going to be very helpful

00:10:52,800 --> 00:10:56,320
for me to do

00:10:54,480 --> 00:10:57,519
some of that now sometimes it can be but

00:10:56,320 --> 00:10:58,720
it's a lot of times where it's not going

00:10:57,519 --> 00:11:00,000
to be helpful for that

00:10:58,720 --> 00:11:01,760
the other thing that it won't be really

00:11:00,000 --> 00:11:03,680
helpful for is debugging complex state

00:11:01,760 --> 00:11:05,200
issues with observables and ngrx if

00:11:03,680 --> 00:11:07,760
you're running one of these

00:11:05,200 --> 00:11:08,959
um like observable store or ngrx this

00:11:07,760 --> 00:11:10,880
won't be probably the thing that can

00:11:08,959 --> 00:11:12,240
help you kind of detect

00:11:10,880 --> 00:11:15,200
beyond just looking at what the state of

00:11:12,240 --> 00:11:16,959
the components are how the actual flow

00:11:15,200 --> 00:11:18,399
is is being created how the actual

00:11:16,959 --> 00:11:19,920
state's being created

00:11:18,399 --> 00:11:22,079
and finally it's not going to magically

00:11:19,920 --> 00:11:24,320
fix every problem in your app

00:11:22,079 --> 00:11:25,760
um just like anything it's a tool it's a

00:11:24,320 --> 00:11:26,959
tool that goes into our tool belt that

00:11:25,760 --> 00:11:30,240
we can use

00:11:26,959 --> 00:11:32,880
to make things hopefully much easier

00:11:30,240 --> 00:11:35,120
by using all of our tools on toolbelt so

00:11:32,880 --> 00:11:36,800
one last thing before the demo

00:11:35,120 --> 00:11:38,720
we have a note from the angular team and

00:11:36,800 --> 00:11:39,760
we asked them about this they wanted us

00:11:38,720 --> 00:11:41,760
just to make certain that

00:11:39,760 --> 00:11:43,200
you knew that this is a this current api

00:11:41,760 --> 00:11:44,640
it's a work in progress

00:11:43,200 --> 00:11:46,320
these methods are just kind of the

00:11:44,640 --> 00:11:47,600
starting point for a way more powerful

00:11:46,320 --> 00:11:49,120
set of debug tools

00:11:47,600 --> 00:11:51,040
because they wanted to really replace

00:11:49,120 --> 00:11:52,160
the mg probe with a much better set of

00:11:51,040 --> 00:11:53,680
debug tools so

00:11:52,160 --> 00:11:55,839
you should expect in the future to see

00:11:53,680 --> 00:11:56,959
more methods better functionality and

00:11:55,839 --> 00:11:59,200
they're just going to continue to make

00:11:56,959 --> 00:12:00,480
this api much more powerful

00:11:59,200 --> 00:12:02,880
so let's go ahead and let's walk through

00:12:00,480 --> 00:12:04,320
our demo um i'm going to switch screens

00:12:02,880 --> 00:12:07,760
really quick so if you

00:12:04,320 --> 00:12:10,000
can um look at this so

00:12:07,760 --> 00:12:11,440
i want you to imagine that we're a brand

00:12:10,000 --> 00:12:13,600
new engineer

00:12:11,440 --> 00:12:15,360
and are to a company and we're being

00:12:13,600 --> 00:12:16,959
given this app to kind of look at

00:12:15,360 --> 00:12:18,480
and we wouldn't want to investigate its

00:12:16,959 --> 00:12:19,519
functionality not just look at its code

00:12:18,480 --> 00:12:21,519
but it's kind of just

00:12:19,519 --> 00:12:23,200
a look at how it's actually working so

00:12:21,519 --> 00:12:25,839
let's look right here

00:12:23,200 --> 00:12:27,519
at this page title so if we inspect this

00:12:25,839 --> 00:12:31,200
i can come here i can see that i have an

00:12:27,519 --> 00:12:34,480
h3 element now because i'm not selecting

00:12:31,200 --> 00:12:35,279
a um an actual component in angular i

00:12:34,480 --> 00:12:38,639
can do

00:12:35,279 --> 00:12:40,160
get owning component and i can pass in

00:12:38,639 --> 00:12:42,800
and say hey you know what it's just

00:12:40,160 --> 00:12:45,120
giving me the title component

00:12:42,800 --> 00:12:45,839
that is that is attached to this app

00:12:45,120 --> 00:12:47,519
title

00:12:45,839 --> 00:12:49,040
element so i'm going to go ahead and i'm

00:12:47,519 --> 00:12:50,720
going to call that

00:12:49,040 --> 00:12:52,560
and what i'm going to do is you can look

00:12:50,720 --> 00:12:53,600
and see hey the property inside of this

00:12:52,560 --> 00:12:55,360
component

00:12:53,600 --> 00:12:57,600
there's a title and it's equal to page

00:12:55,360 --> 00:12:59,760
titles so if i want to

00:12:57,600 --> 00:13:01,680
let's say change that i can do get

00:12:59,760 --> 00:13:04,959
owning component

00:13:01,680 --> 00:13:06,079
or i can do title i can change that to

00:13:04,959 --> 00:13:08,880
something like

00:13:06,079 --> 00:13:08,880
hey angie comp

00:13:09,920 --> 00:13:15,519
and run it now if i check my component

00:13:13,040 --> 00:13:16,079
i can see that its title has been

00:13:15,519 --> 00:13:18,320
updated

00:13:16,079 --> 00:13:19,839
to hey ngcon but of course you'll notice

00:13:18,320 --> 00:13:21,839
that the actual

00:13:19,839 --> 00:13:24,320
inside of my element nothing's changed

00:13:21,839 --> 00:13:26,320
or inside of my app nothing's changed so

00:13:24,320 --> 00:13:28,399
i want to run the end i want to run the

00:13:26,320 --> 00:13:30,560
um

00:13:28,399 --> 00:13:31,839
the change detection for so i can do ng

00:13:30,560 --> 00:13:34,160
apply changes

00:13:31,839 --> 00:13:36,720
i'm going to pass in ng get owning

00:13:34,160 --> 00:13:36,720
component

00:13:37,040 --> 00:13:41,199
i run that again and then hey we see

00:13:39,600 --> 00:13:42,639
that there's been a change now

00:13:41,199 --> 00:13:44,720
again this is going to be really helpful

00:13:42,639 --> 00:13:46,399
for debugging specific instances where

00:13:44,720 --> 00:13:48,079
you think the variables might be setting

00:13:46,399 --> 00:13:50,160
correctly and if you change them

00:13:48,079 --> 00:13:53,519
you can you can have an update and some

00:13:50,160 --> 00:13:56,560
change um you can see how that works so

00:13:53,519 --> 00:13:58,000
um another use case for this kind of

00:13:56,560 --> 00:14:00,399
behavior that we've seen

00:13:58,000 --> 00:14:01,839
in in my company as well as in my own

00:14:00,399 --> 00:14:02,639
code that's really helpful is when i

00:14:01,839 --> 00:14:04,240
want to debug

00:14:02,639 --> 00:14:06,079
some third-party library where i don't

00:14:04,240 --> 00:14:08,079
actually have access to the source code

00:14:06,079 --> 00:14:09,600
and i want to be like hey i'm debugging

00:14:08,079 --> 00:14:11,040
this other person's code this other

00:14:09,600 --> 00:14:13,120
person's app

00:14:11,040 --> 00:14:15,279
and i want to see how is it affecting my

00:14:13,120 --> 00:14:16,079
code so i can come up here so if we look

00:14:15,279 --> 00:14:18,959
at this i'm using

00:14:16,079 --> 00:14:20,959
a directive from angular bootstrap and

00:14:18,959 --> 00:14:22,320
you can see that we have ngb nav this is

00:14:20,959 --> 00:14:26,000
just a directive

00:14:22,320 --> 00:14:29,360
on this this list element so

00:14:26,000 --> 00:14:32,959
if i do ng dot get

00:14:29,360 --> 00:14:35,279
directives we can see that i'm getting

00:14:32,959 --> 00:14:36,800
a list of directives and we can see that

00:14:35,279 --> 00:14:39,279
one of them is ngb

00:14:36,800 --> 00:14:42,320
the only one really so let's go and

00:14:39,279 --> 00:14:42,320
let's select that item

00:14:43,120 --> 00:14:46,160
now so for if you're looking at this you

00:14:45,519 --> 00:14:48,639
can see

00:14:46,160 --> 00:14:49,440
this is the the instance at this moment

00:14:48,639 --> 00:14:52,560
in time

00:14:49,440 --> 00:14:54,160
for that specific class so there's a

00:14:52,560 --> 00:14:55,440
bunch of different properties on here i

00:14:54,160 --> 00:14:57,199
want to make a change

00:14:55,440 --> 00:14:59,040
directly to this component and see how

00:14:57,199 --> 00:15:00,399
that affects my app so i'm going to

00:14:59,040 --> 00:15:02,560
or this director what i'm going to do is

00:15:00,399 --> 00:15:04,639
i'm going to say

00:15:02,560 --> 00:15:05,600
and i'm going to change its orientation

00:15:04,639 --> 00:15:09,120
from horizontal

00:15:05,600 --> 00:15:12,079
to vertical now again

00:15:09,120 --> 00:15:12,720
nothing's changed because we're not

00:15:12,079 --> 00:15:14,160
we're not

00:15:12,720 --> 00:15:16,240
we haven't run our change detection so

00:15:14,160 --> 00:15:20,240
we do apply changes

00:15:16,240 --> 00:15:20,240
ng dot get owning components

00:15:20,399 --> 00:15:24,079
run it again hey i've actually made a

00:15:22,399 --> 00:15:26,560
change to a third party directive

00:15:24,079 --> 00:15:28,320
outside of my own code in isolation

00:15:26,560 --> 00:15:31,920
and i can see how that is affecting my

00:15:28,320 --> 00:15:31,920
app so let's change it back

00:15:33,519 --> 00:15:38,480
oops i better actually change that

00:15:39,440 --> 00:15:44,320
all right so now i want to walk through

00:15:43,040 --> 00:15:46,959
a couple of more

00:15:44,320 --> 00:15:49,199
examples and instances where recently

00:15:46,959 --> 00:15:51,440
i've seen huge benefits of my old

00:15:49,199 --> 00:15:52,800
own code as i've been debugging specific

00:15:51,440 --> 00:15:55,199
issues inside of

00:15:52,800 --> 00:15:56,720
the main app that i work on all day so

00:15:55,199 --> 00:15:57,920
if we look at the advanced tab i'm going

00:15:56,720 --> 00:16:00,000
to walk through this and just i'm going

00:15:57,920 --> 00:16:02,399
to explain this scenario a little bit

00:16:00,000 --> 00:16:03,920
so recently what we did is that we had

00:16:02,399 --> 00:16:06,480
an instance where we had

00:16:03,920 --> 00:16:07,600
a list of items and when we would

00:16:06,480 --> 00:16:09,600
trigger an action

00:16:07,600 --> 00:16:10,959
sometimes that list would be updated but

00:16:09,600 --> 00:16:13,360
sometimes it wouldn't

00:16:10,959 --> 00:16:14,800
and it wasn't 100 clear what was going

00:16:13,360 --> 00:16:16,240
on i thought that it

00:16:14,800 --> 00:16:17,759
might be an issue to do with change

00:16:16,240 --> 00:16:19,040
detection but it was hard for me to

00:16:17,759 --> 00:16:20,079
prove that it was an issue with change

00:16:19,040 --> 00:16:21,440
detection because

00:16:20,079 --> 00:16:24,160
there were some times with the exact

00:16:21,440 --> 00:16:27,600
same action where it worked just fine

00:16:24,160 --> 00:16:29,440
so to tell my you know to say hey this

00:16:27,600 --> 00:16:31,920
is actually change detection

00:16:29,440 --> 00:16:33,199
what i do um i went ahead and i ran the

00:16:31,920 --> 00:16:34,959
um

00:16:33,199 --> 00:16:36,480
i went ahead and i i ran the apply

00:16:34,959 --> 00:16:38,720
changes on it so i'll do this here

00:16:36,480 --> 00:16:39,519
so if i click this update list nothing

00:16:38,720 --> 00:16:41,279
is happening

00:16:39,519 --> 00:16:42,480
but if i hover over oh wait a second

00:16:41,279 --> 00:16:42,880
holy crap a whole bunch of stuff

00:16:42,480 --> 00:16:45,040
happened

00:16:42,880 --> 00:16:46,639
after i hovered over those elements i

00:16:45,040 --> 00:16:48,639
can continue to do that where

00:16:46,639 --> 00:16:50,560
i make the change and then hey there's

00:16:48,639 --> 00:16:51,040
some there's some stuff that's occurring

00:16:50,560 --> 00:16:53,120
so

00:16:51,040 --> 00:16:54,480
let's go and let's click update list and

00:16:53,120 --> 00:16:57,600
you know what what i want to do

00:16:54,480 --> 00:17:00,560
is that i want to select my my list here

00:16:57,600 --> 00:17:02,399
and so i'm going to select my list

00:17:00,560 --> 00:17:03,759
and what i'm going to do is that i

00:17:02,399 --> 00:17:07,760
actually want to see

00:17:03,759 --> 00:17:08,480
how does um what does the ng.getcontext

00:17:07,760 --> 00:17:10,640
look like

00:17:08,480 --> 00:17:12,959
so i'm going to let's do this so let's

00:17:10,640 --> 00:17:15,600
do ng

00:17:12,959 --> 00:17:16,480
and i'm going to select a list item ng

00:17:15,600 --> 00:17:19,839
dot

00:17:16,480 --> 00:17:21,439
get context i'm going to pass in the

00:17:19,839 --> 00:17:21,919
gate context now what this is giving to

00:17:21,439 --> 00:17:23,919
me

00:17:21,919 --> 00:17:24,959
is it's giving me the context for this

00:17:23,919 --> 00:17:26,880
specific element

00:17:24,959 --> 00:17:28,720
inside of my list so you can see it's

00:17:26,880 --> 00:17:30,559
got some good information about it is it

00:17:28,720 --> 00:17:32,720
first is it last even odd

00:17:30,559 --> 00:17:33,760
it also gives me what the item that's

00:17:32,720 --> 00:17:36,960
being passed in

00:17:33,760 --> 00:17:39,600
to that list element is going to be

00:17:36,960 --> 00:17:40,080
as well as hey here's the whole array

00:17:39,600 --> 00:17:42,400
and

00:17:40,080 --> 00:17:43,280
the index plus the total count so if i

00:17:42,400 --> 00:17:48,320
go ahead and i click

00:17:43,280 --> 00:17:50,320
update list and i run this again

00:17:48,320 --> 00:17:52,240
we can see that the index and the count

00:17:50,320 --> 00:17:54,640
are the same

00:17:52,240 --> 00:17:56,320
and sorry i don't think i clicked on it

00:17:54,640 --> 00:17:58,400
hold on a second

00:17:56,320 --> 00:18:00,240
what you get for having random stuff but

00:17:58,400 --> 00:18:02,720
you can see that my ng4 is

00:18:00,240 --> 00:18:04,799
actually different now even though the

00:18:02,720 --> 00:18:07,120
index and count hasn't changed

00:18:04,799 --> 00:18:08,000
the ng4 the array of stuff has been

00:18:07,120 --> 00:18:09,919
altered

00:18:08,000 --> 00:18:12,480
so if i'd say you know what i'm going to

00:18:09,919 --> 00:18:16,960
do ng apply changes

00:18:12,480 --> 00:18:16,960
ng dot get owning component

00:18:17,039 --> 00:18:20,720
and run it there we can see now there's

00:18:19,120 --> 00:18:21,039
four items in my array so i know for

00:18:20,720 --> 00:18:24,480
sure

00:18:21,039 --> 00:18:27,760
this is an issue that has been caused by

00:18:24,480 --> 00:18:29,360
um my change detection so um

00:18:27,760 --> 00:18:30,799
one last thing that i kind of want to

00:18:29,360 --> 00:18:32,640
look at is i want to look at how some

00:18:30,799 --> 00:18:33,360
listeners can hopefully benefit if we're

00:18:32,640 --> 00:18:36,880
looking at

00:18:33,360 --> 00:18:39,679
specific actions so um for me

00:18:36,880 --> 00:18:40,640
if i click on this and i refresh my app

00:18:39,679 --> 00:18:42,640
a little bit

00:18:40,640 --> 00:18:43,840
we can see hey when i hover over some of

00:18:42,640 --> 00:18:46,080
these items they're changing

00:18:43,840 --> 00:18:46,880
and if i click on these items there's an

00:18:46,080 --> 00:18:49,039
action being

00:18:46,880 --> 00:18:50,000
um that's firing from that so let's go

00:18:49,039 --> 00:18:51,760
and let's select this

00:18:50,000 --> 00:18:53,440
item three here i'm going to inspect

00:18:51,760 --> 00:18:55,679
this and what i'm going to do

00:18:53,440 --> 00:18:58,799
is on this paragraph i'm going to do ng

00:18:55,679 --> 00:18:58,799
dot get listeners

00:18:59,600 --> 00:19:03,039
i'm going to get an array of listeners i

00:19:01,039 --> 00:19:05,280
can see that the first one is a click

00:19:03,039 --> 00:19:07,679
handler so i can go all right i want to

00:19:05,280 --> 00:19:09,600
look at the click handler

00:19:07,679 --> 00:19:10,960
and for this element what i'm seeing is

00:19:09,600 --> 00:19:13,120
that i have

00:19:10,960 --> 00:19:14,240
the name of the handler what element

00:19:13,120 --> 00:19:18,480
it's attached to

00:19:14,240 --> 00:19:19,760
a callback and then a type and so for me

00:19:18,480 --> 00:19:21,039
what i want to do is i'm like hey you

00:19:19,760 --> 00:19:22,000
know what i want to trigger this

00:19:21,039 --> 00:19:25,760
callback

00:19:22,000 --> 00:19:27,520
outside of the normal flow of my angular

00:19:25,760 --> 00:19:30,559
app because maybe this callback

00:19:27,520 --> 00:19:32,480
um isn't really easily addressed i can't

00:19:30,559 --> 00:19:34,240
call it normally because of some element

00:19:32,480 --> 00:19:35,679
because of some ngif or some other

00:19:34,240 --> 00:19:37,360
behaviors right but i want to

00:19:35,679 --> 00:19:39,039
you know call it now so let's go ahead

00:19:37,360 --> 00:19:42,320
and let's do that

00:19:39,039 --> 00:19:43,760
so i'll do callback again nothing's

00:19:42,320 --> 00:19:44,799
changed because we haven't run our

00:19:43,760 --> 00:19:47,280
change detection

00:19:44,799 --> 00:19:47,919
but we can do that really easily by

00:19:47,280 --> 00:19:50,320
running the

00:19:47,919 --> 00:19:53,039
um that we can see hey that item has

00:19:50,320 --> 00:19:54,640
changed so i run it again

00:19:53,039 --> 00:19:57,039
and then we can keep on seeing that i am

00:19:54,640 --> 00:19:59,520
making the changes in isolation

00:19:57,039 --> 00:20:02,000
one at a time to test very specific

00:19:59,520 --> 00:20:03,440
instances of how my code is running

00:20:02,000 --> 00:20:05,440
and then if we look at the item that's

00:20:03,440 --> 00:20:07,600
directly above it this app list item

00:20:05,440 --> 00:20:09,440
what i can do is that i can also call

00:20:07,600 --> 00:20:12,159
listeners on this one

00:20:09,440 --> 00:20:13,520
one second and i can see that i am

00:20:12,159 --> 00:20:16,240
getting

00:20:13,520 --> 00:20:17,200
an element and that element actually has

00:20:16,240 --> 00:20:19,200
a listener

00:20:17,200 --> 00:20:21,360
that is a mouse over element and that's

00:20:19,200 --> 00:20:22,720
why when i'm hovering over these

00:20:21,360 --> 00:20:25,200
even though this is a host listener

00:20:22,720 --> 00:20:26,960
that's attached inside of the code

00:20:25,200 --> 00:20:29,039
i can see that hey that's the way that

00:20:26,960 --> 00:20:30,320
it's um i can see the actual callback

00:20:29,039 --> 00:20:34,080
that's occurring

00:20:30,320 --> 00:20:37,120
now i want to go but i want to talk just

00:20:34,080 --> 00:20:39,120
finally um about some of the next steps

00:20:37,120 --> 00:20:41,919
that you can take to hopefully make

00:20:39,120 --> 00:20:45,360
these api methods way more valuable

00:20:41,919 --> 00:20:47,440
to you in your everyday um work so

00:20:45,360 --> 00:20:48,799
first off spend some time experimenting

00:20:47,440 --> 00:20:51,679
with these new methods

00:20:48,799 --> 00:20:52,240
um look at them try and figure out well

00:20:51,679 --> 00:20:54,480
how

00:20:52,240 --> 00:20:55,919
how can i use them to debug my app

00:20:54,480 --> 00:20:57,600
because after i learned about them i

00:20:55,919 --> 00:20:58,480
didn't use them for at least two to

00:20:57,600 --> 00:20:59,840
three months

00:20:58,480 --> 00:21:01,760
it wasn't after a couple of months that

00:20:59,840 --> 00:21:02,720
i i reached a problem where i was like

00:21:01,760 --> 00:21:04,400
you know these things

00:21:02,720 --> 00:21:05,760
these could actually help it and the

00:21:04,400 --> 00:21:07,120
more that i've been

00:21:05,760 --> 00:21:09,200
using the more things that i've been

00:21:07,120 --> 00:21:11,679
finding have been very helpful for me

00:21:09,200 --> 00:21:13,360
um to uh um i've been using seeing more

00:21:11,679 --> 00:21:15,120
and more use cases for them

00:21:13,360 --> 00:21:17,039
also spend some time pair programming

00:21:15,120 --> 00:21:18,000
with another developer so as you're both

00:21:17,039 --> 00:21:19,520
looking at

00:21:18,000 --> 00:21:22,400
these codes and these elements you can

00:21:19,520 --> 00:21:25,039
actually see how they are going to

00:21:22,400 --> 00:21:25,919
affect your code or affect your

00:21:25,039 --> 00:21:27,520
debugging

00:21:25,919 --> 00:21:29,520
and then finally help someone in the

00:21:27,520 --> 00:21:30,640
community with a problem that they can't

00:21:29,520 --> 00:21:32,080
solve

00:21:30,640 --> 00:21:33,760
because the more that we help and we

00:21:32,080 --> 00:21:35,120
step outside of ourselves and work with

00:21:33,760 --> 00:21:37,039
people who are struggling or

00:21:35,120 --> 00:21:38,320
new to our community the more that we

00:21:37,039 --> 00:21:40,799
can actually

00:21:38,320 --> 00:21:41,600
both um grow the community and help

00:21:40,799 --> 00:21:43,360
everyone to

00:21:41,600 --> 00:21:45,200
be the best kind of engineers that we

00:21:43,360 --> 00:21:48,320
want to be um and i

00:21:45,200 --> 00:21:50,320
already said that was double that but

00:21:48,320 --> 00:21:51,600
always keep learning and that's the

00:21:50,320 --> 00:21:52,400
final thing that i want to leave with

00:21:51,600 --> 00:21:54,960
you

00:21:52,400 --> 00:21:55,600
is the more if we want to be an engineer

00:21:54,960 --> 00:21:58,080
who

00:21:55,600 --> 00:21:58,640
enjoys our job today tomorrow and in 10

00:21:58,080 --> 00:22:00,480
years

00:21:58,640 --> 00:22:02,880
and has a job today tomorrow and in 10

00:22:00,480 --> 00:22:04,799
years we need to never stop learning we

00:22:02,880 --> 00:22:06,720
need to always move forward we need to

00:22:04,799 --> 00:22:08,159
always be taking in the new things that

00:22:06,720 --> 00:22:10,480
are being developed and trying to figure

00:22:08,159 --> 00:22:12,400
out how they fit into our own app

00:22:10,480 --> 00:22:14,320
um finally i just wanted to say thank

00:22:12,400 --> 00:22:15,679
you again for taking the time to

00:22:14,320 --> 00:22:17,390
listen to me and i hope this is helpful

00:22:15,679 --> 00:22:24,840
for all of you

00:22:17,390 --> 00:22:26,860
[Music]

00:22:24,840 --> 00:22:27,620
cool

00:22:26,860 --> 00:22:29,670
[Music]

00:22:27,620 --> 00:22:33,120
[Applause]

00:22:29,670 --> 00:22:35,200
[Music]

00:22:33,120 --> 00:22:35,200

YouTube URL: https://www.youtube.com/watch?v=nK7gi_c_zrw


