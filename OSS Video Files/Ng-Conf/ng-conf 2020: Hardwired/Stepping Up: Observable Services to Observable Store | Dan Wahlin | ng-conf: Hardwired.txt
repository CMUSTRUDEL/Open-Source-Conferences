Title: Stepping Up: Observable Services to Observable Store | Dan Wahlin | ng-conf: Hardwired
Publication date: 2020-09-22
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Observable Services (also known as Subject in a Service) provide a great way for components to subscribe to changes that occur in a service. But how do you step your app up to the next level and create a state store that also supports notifications?

In this talk Dan Wahlin will show a simple yet powerful option called Observable Store that works across all front-end applications (Angular, React, Vue.js, and more). Learn how to store your state, access it, work with immutable store state, provide state change notifications, the role of RxJS and Subjects, debugging options, and more.
Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,180 --> 00:00:02,970
[Music]

00:00:02,400 --> 00:00:18,960
[Applause]

00:00:02,970 --> 00:00:21,279
[Music]

00:00:18,960 --> 00:00:22,880
all right everybody well it is exciting

00:00:21,279 --> 00:00:23,600
to be here i'll have to admit i would

00:00:22,880 --> 00:00:25,439
have rather

00:00:23,600 --> 00:00:26,720
seen you in person but we'll have to

00:00:25,439 --> 00:00:28,960
wait for uh

00:00:26,720 --> 00:00:30,080
next year i guess for that but i hope

00:00:28,960 --> 00:00:32,880
everybody's staying

00:00:30,080 --> 00:00:35,120
safe and healthy so my name is dan walin

00:00:32,880 --> 00:00:37,200
and last year at ng conf i talked about

00:00:35,120 --> 00:00:38,399
something called observable services and

00:00:37,200 --> 00:00:40,079
specifically talked about different

00:00:38,399 --> 00:00:40,960
types of rxjs subjects that are

00:00:40,079 --> 00:00:42,800
available

00:00:40,960 --> 00:00:44,879
so we talked about things like subject

00:00:42,800 --> 00:00:47,280
and behavior subject and async subject

00:00:44,879 --> 00:00:49,360
and replay subject and i'm not going to

00:00:47,280 --> 00:00:50,879
go rehash that you can go to youtube for

00:00:49,360 --> 00:00:52,160
that if you want to watch

00:00:50,879 --> 00:00:53,920
we're going to talk about taking it up

00:00:52,160 --> 00:00:56,879
to the next level though

00:00:53,920 --> 00:00:58,800
and a project called observable store

00:00:56,879 --> 00:00:59,199
and this is a state management solution

00:00:58,800 --> 00:01:01,600
that's

00:00:59,199 --> 00:01:03,039
very simple to get going with but very

00:01:01,600 --> 00:01:05,600
powerful too

00:01:03,039 --> 00:01:07,200
but not a lot of code so i'll walk you

00:01:05,600 --> 00:01:10,720
through it and that's what we'll do over

00:01:07,200 --> 00:01:12,320
the next 25 minutes or so here

00:01:10,720 --> 00:01:14,880
all right so there's a quote out there

00:01:12,320 --> 00:01:16,720
that i really like by al mcguire

00:01:14,880 --> 00:01:18,479
and uh you can see it here it says keep

00:01:16,720 --> 00:01:20,240
it simple when you get too complex you

00:01:18,479 --> 00:01:22,799
forget the obvious

00:01:20,240 --> 00:01:24,479
and i think it's a great quote i like to

00:01:22,799 --> 00:01:25,600
take it up a notch for anyone that does

00:01:24,479 --> 00:01:28,560
maintenance

00:01:25,600 --> 00:01:30,240
keep it simple because someone has to

00:01:28,560 --> 00:01:31,680
maintain this crap

00:01:30,240 --> 00:01:33,119
and you know it's a true story if

00:01:31,680 --> 00:01:33,680
anybody out there does production

00:01:33,119 --> 00:01:36,240
support

00:01:33,680 --> 00:01:37,520
you know all about this it's great to

00:01:36,240 --> 00:01:39,119
have solutions that

00:01:37,520 --> 00:01:41,920
work but it's even better to have

00:01:39,119 --> 00:01:43,360
solutions that aren't super complex

00:01:41,920 --> 00:01:45,200
that we can maintain so we're going to

00:01:43,360 --> 00:01:48,720
talk about how observable store

00:01:45,200 --> 00:01:50,320
can help you out with that all right so

00:01:48,720 --> 00:01:52,320
we're all accustomed to services in

00:01:50,320 --> 00:01:55,360
angular and we know they work great

00:01:52,320 --> 00:01:57,040
for sharing data and we could even store

00:01:55,360 --> 00:01:58,880
data of course in the service

00:01:57,040 --> 00:02:01,360
and exchange that with other areas of

00:01:58,880 --> 00:02:04,000
the app using things like subjects

00:02:01,360 --> 00:02:05,840
again that was the topic last time but

00:02:04,000 --> 00:02:08,399
as a service starts to

00:02:05,840 --> 00:02:10,239
proliferate throughout your application

00:02:08,399 --> 00:02:11,840
it ends up looking like this and at this

00:02:10,239 --> 00:02:12,239
point i'd argue that's not that big of a

00:02:11,840 --> 00:02:14,560
deal

00:02:12,239 --> 00:02:15,840
pretty easy to follow but as soon as

00:02:14,560 --> 00:02:17,280
services

00:02:15,840 --> 00:02:19,280
start getting data from multiple

00:02:17,280 --> 00:02:20,879
locations and components get data from

00:02:19,280 --> 00:02:22,319
multiple locations

00:02:20,879 --> 00:02:24,080
this is generally when you know you have

00:02:22,319 --> 00:02:26,959
a state management problem

00:02:24,080 --> 00:02:28,720
is you're confused have you ever been

00:02:26,959 --> 00:02:32,319
sitting there going

00:02:28,720 --> 00:02:34,319
i have no idea what is going on right

00:02:32,319 --> 00:02:35,840
now you're setting break points all over

00:02:34,319 --> 00:02:39,120
and you're just trying to figure out

00:02:35,840 --> 00:02:42,239
what is the flow of the actual data

00:02:39,120 --> 00:02:44,400
well one way to resolve this is to kind

00:02:42,239 --> 00:02:45,599
of have one service that becomes your

00:02:44,400 --> 00:02:48,160
store

00:02:45,599 --> 00:02:49,760
and then have all services interact with

00:02:48,160 --> 00:02:51,120
that to actually store the data

00:02:49,760 --> 00:02:52,720
something like this

00:02:51,120 --> 00:02:54,400
now there's a lot of solutions out there

00:02:52,720 --> 00:02:56,319
obviously that do this

00:02:54,400 --> 00:02:57,840
um and they're all very good this is not

00:02:56,319 --> 00:02:59,120
a talk about which one's better and

00:02:57,840 --> 00:03:01,760
which one's worse

00:02:59,120 --> 00:03:03,280
this is a different alternative and i'll

00:03:01,760 --> 00:03:04,560
explain more about the project and kind

00:03:03,280 --> 00:03:08,000
of how it came about here

00:03:04,560 --> 00:03:09,200
in just a moment so if we're going to do

00:03:08,000 --> 00:03:09,760
that though if we're going to have a

00:03:09,200 --> 00:03:11,680
store

00:03:09,760 --> 00:03:13,040
that multiple services and other parts

00:03:11,680 --> 00:03:14,959
of the app can interact with

00:03:13,040 --> 00:03:16,080
we definitely need a single source of

00:03:14,959 --> 00:03:17,920
truth

00:03:16,080 --> 00:03:19,440
we need immutable state that's going to

00:03:17,920 --> 00:03:20,720
be important because otherwise some of

00:03:19,440 --> 00:03:22,400
our change

00:03:20,720 --> 00:03:23,920
management doesn't fire like ng on

00:03:22,400 --> 00:03:27,040
changes unless the

00:03:23,920 --> 00:03:27,760
reference changes we need notifications

00:03:27,040 --> 00:03:30,400
because

00:03:27,760 --> 00:03:31,920
if you change my store over here but i

00:03:30,400 --> 00:03:33,519
have a component over here who never

00:03:31,920 --> 00:03:35,040
interacted with the store but wants to

00:03:33,519 --> 00:03:37,680
know when it changes

00:03:35,040 --> 00:03:39,440
we need to know about that of course

00:03:37,680 --> 00:03:40,879
from a debugging standpoint it'd be

00:03:39,440 --> 00:03:43,280
really nice to build a track

00:03:40,879 --> 00:03:44,640
change history now i'll show you a

00:03:43,280 --> 00:03:46,959
little bit about this at the end

00:03:44,640 --> 00:03:47,920
but you can either use observable store

00:03:46,959 --> 00:03:49,440
as you'll see

00:03:47,920 --> 00:03:50,959
to actually have everything just in the

00:03:49,440 --> 00:03:51,840
console if you want to just watch the

00:03:50,959 --> 00:03:54,000
flow

00:03:51,840 --> 00:03:55,920
or you can even use the redux dev tools

00:03:54,000 --> 00:03:58,080
if you wanted

00:03:55,920 --> 00:03:59,840
and then finally wouldn't it be nice if

00:03:58,080 --> 00:04:02,400
it was simple to implement and maintain

00:03:59,840 --> 00:04:03,439
it's not really hard and bonus what if

00:04:02,400 --> 00:04:06,080
it even worked with

00:04:03,439 --> 00:04:08,239
anything not just angular but even some

00:04:06,080 --> 00:04:11,439
of those other ones react and view and

00:04:08,239 --> 00:04:14,560
spelt and whatever you want to do so

00:04:11,439 --> 00:04:16,959
observable store came out of a prototype

00:04:14,560 --> 00:04:18,320
a couple years ago i was working with a

00:04:16,959 --> 00:04:20,639
larger company

00:04:18,320 --> 00:04:23,120
and in working with that company they

00:04:20,639 --> 00:04:25,360
wanted the equivalent of an observable

00:04:23,120 --> 00:04:26,479
service so in other words something that

00:04:25,360 --> 00:04:28,240
could

00:04:26,479 --> 00:04:30,320
notify other parts of the app that

00:04:28,240 --> 00:04:31,680
something changed but they also needed

00:04:30,320 --> 00:04:34,240
store functionality with

00:04:31,680 --> 00:04:35,840
it and kind of the story behind this is

00:04:34,240 --> 00:04:37,840
they had gone with another solution but

00:04:35,840 --> 00:04:39,440
they had had a bunch of new hires

00:04:37,840 --> 00:04:40,960
and they were just having a little bit

00:04:39,440 --> 00:04:42,080
of problem with productivity because not

00:04:40,960 --> 00:04:45,360
everybody knew what was going

00:04:42,080 --> 00:04:46,880
on so myself and another person there we

00:04:45,360 --> 00:04:49,120
started to put together a prototype and

00:04:46,880 --> 00:04:52,160
that eventually grew to what is now this

00:04:49,120 --> 00:04:53,600
library called observable storm so this

00:04:52,160 --> 00:04:55,520
is kind of my definition of it it

00:04:53,600 --> 00:04:56,880
provides a simple way to manage state in

00:04:55,520 --> 00:04:59,199
front end application

00:04:56,880 --> 00:05:01,520
while achieving many of the key goals of

00:04:59,199 --> 00:05:03,280
the more complex solutions out there

00:05:01,520 --> 00:05:05,759
and again that's not to say any of them

00:05:03,280 --> 00:05:08,240
out there are bad or worse or whatever

00:05:05,759 --> 00:05:10,160
not at all i'm a big believer in write

00:05:08,240 --> 00:05:12,080
tool for the right job

00:05:10,160 --> 00:05:13,520
and so there may be some apps out there

00:05:12,080 --> 00:05:14,639
that don't even need state management

00:05:13,520 --> 00:05:16,479
i'm going to argue there's several

00:05:14,639 --> 00:05:18,240
probably that don't and then you have

00:05:16,479 --> 00:05:18,960
the apps where you know you need state

00:05:18,240 --> 00:05:20,800
management

00:05:18,960 --> 00:05:23,039
because you have state flowing all over

00:05:20,800 --> 00:05:26,160
the place in your app

00:05:23,039 --> 00:05:28,400
so the way this works is really simple

00:05:26,160 --> 00:05:30,479
uh when we initially kind of worked on

00:05:28,400 --> 00:05:32,080
this and prototyped it and by the way a

00:05:30,479 --> 00:05:33,600
lot of the concepts that are now in

00:05:32,080 --> 00:05:35,919
observable store

00:05:33,600 --> 00:05:37,680
came from people like yourself it came

00:05:35,919 --> 00:05:38,000
from poll requests and ideas i'd hear

00:05:37,680 --> 00:05:40,560
about

00:05:38,000 --> 00:05:41,199
on github and so i i definitely won't

00:05:40,560 --> 00:05:42,560
take all the

00:05:41,199 --> 00:05:45,039
credit for some of the different things

00:05:42,560 --> 00:05:46,800
it does the way it works though

00:05:45,039 --> 00:05:48,880
is a component we're used to that

00:05:46,800 --> 00:05:50,639
calling into a service

00:05:48,880 --> 00:05:52,560
let's say that service maybe retrieves

00:05:50,639 --> 00:05:54,400
data from the server maybe with http

00:05:52,560 --> 00:05:56,960
client or something like that

00:05:54,400 --> 00:05:58,479
and then we need to store that in a

00:05:56,960 --> 00:06:01,840
store maybe just for

00:05:58,479 --> 00:06:03,440
caching purposes possibly so what we can

00:06:01,840 --> 00:06:06,960
do is extend

00:06:03,440 --> 00:06:08,319
customer service so that it is able to

00:06:06,960 --> 00:06:10,160
interact with this store you're going to

00:06:08,319 --> 00:06:12,639
see in a moment we can get state

00:06:10,160 --> 00:06:13,919
set state we can do state slice

00:06:12,639 --> 00:06:16,240
selectors

00:06:13,919 --> 00:06:17,600
and all kinds of fun stuff like that and

00:06:16,240 --> 00:06:19,120
then likewise we might have another

00:06:17,600 --> 00:06:20,160
component that has an order service or

00:06:19,120 --> 00:06:22,080
an invoice and

00:06:20,160 --> 00:06:24,240
they need to also interact with the

00:06:22,080 --> 00:06:26,960
store now who knows maybe they just read

00:06:24,240 --> 00:06:28,800
the state not every service of course is

00:06:26,960 --> 00:06:30,800
going to be updating the state

00:06:28,800 --> 00:06:32,240
but the bottom line is we need state to

00:06:30,800 --> 00:06:35,440
be able to flow through the app we need

00:06:32,240 --> 00:06:37,280
that single source of truth immutability

00:06:35,440 --> 00:06:39,840
track what's going on so that we're not

00:06:37,280 --> 00:06:41,039
lost and make it really easy to work

00:06:39,840 --> 00:06:44,160
with that's kind of the

00:06:41,039 --> 00:06:45,919
the overall goals here so how do you get

00:06:44,160 --> 00:06:46,160
started with this well you would install

00:06:45,919 --> 00:06:48,400
it

00:06:46,160 --> 00:06:49,599
this will be the easiest step and you

00:06:48,400 --> 00:06:51,840
can simply npm

00:06:49,599 --> 00:06:54,639
install uh code with dan observable

00:06:51,840 --> 00:06:55,919
store sadly observable store the package

00:06:54,639 --> 00:06:58,080
was taken

00:06:55,919 --> 00:06:59,039
so i had to create my own kind of sub

00:06:58,080 --> 00:07:01,360
here

00:06:59,039 --> 00:07:02,560
but it works well now once you've

00:07:01,360 --> 00:07:04,800
installed it it's

00:07:02,560 --> 00:07:06,080
tiny by the way uh i'd have to double

00:07:04,800 --> 00:07:07,759
check last night looked i think it's

00:07:06,080 --> 00:07:09,840
less than 250 lines of code

00:07:07,759 --> 00:07:12,000
most of the functionality is coming from

00:07:09,840 --> 00:07:12,639
rxjs so it's really wrapping a lot of

00:07:12,000 --> 00:07:16,400
that

00:07:12,639 --> 00:07:17,919
and just exposing the simple to use api

00:07:16,400 --> 00:07:19,440
so the next thing you're going to do is

00:07:17,919 --> 00:07:20,000
if you're using typescript and this is

00:07:19,440 --> 00:07:21,840
optional

00:07:20,000 --> 00:07:23,680
because you can use this with react or

00:07:21,840 --> 00:07:24,960
view or anything as mentioned

00:07:23,680 --> 00:07:27,440
but if you're using typescript we have

00:07:24,960 --> 00:07:29,919
support for things like interfaces

00:07:27,440 --> 00:07:31,520
so we can define a store state in other

00:07:29,919 --> 00:07:34,160
words what's going to go in

00:07:31,520 --> 00:07:35,919
our store now in this case i have a

00:07:34,160 --> 00:07:37,039
really simple example you'll notice i

00:07:35,919 --> 00:07:40,160
have customers

00:07:37,039 --> 00:07:40,720
a customer and orders all right now it

00:07:40,160 --> 00:07:42,240
could be

00:07:40,720 --> 00:07:44,160
really small like this it could be

00:07:42,240 --> 00:07:45,599
really big it's totally up to you

00:07:44,160 --> 00:07:48,720
and you could have you know sub

00:07:45,599 --> 00:07:51,360
properties in these properties of course

00:07:48,720 --> 00:07:52,720
now once we've done that now we need to

00:07:51,360 --> 00:07:55,440
hook observable store

00:07:52,720 --> 00:07:57,759
up to our angular services and that's an

00:07:55,440 --> 00:07:59,440
extremely simple step

00:07:57,759 --> 00:08:00,879
all we have to do is derive from

00:07:59,440 --> 00:08:03,440
observable store

00:08:00,879 --> 00:08:05,440
so here be an example notice we have a

00:08:03,440 --> 00:08:07,199
customer service that extends observable

00:08:05,440 --> 00:08:10,319
store of store state

00:08:07,199 --> 00:08:12,160
right here now that alone

00:08:10,319 --> 00:08:13,919
makes your service capable of

00:08:12,160 --> 00:08:16,319
interacting with the store now if you

00:08:13,919 --> 00:08:18,720
did this on let's say 10 services

00:08:16,319 --> 00:08:20,879
you still have one store all right it

00:08:18,720 --> 00:08:23,039
creates a singleton behind the scenes

00:08:20,879 --> 00:08:24,000
and all of them can then share the same

00:08:23,039 --> 00:08:26,879
data and

00:08:24,000 --> 00:08:28,400
interact with that store now because

00:08:26,879 --> 00:08:30,560
we're extending in this case you'll of

00:08:28,400 --> 00:08:32,159
course have to call super

00:08:30,560 --> 00:08:33,680
and there's some settings that you can

00:08:32,159 --> 00:08:35,599
do down here

00:08:33,680 --> 00:08:37,200
and we can track state history and we

00:08:35,599 --> 00:08:39,120
can log state changes and there's even

00:08:37,200 --> 00:08:40,479
more you can go to the github repo i'll

00:08:39,120 --> 00:08:41,919
give you a link at the end

00:08:40,479 --> 00:08:43,680
if you want some of the other properties

00:08:41,919 --> 00:08:45,519
that you can use

00:08:43,680 --> 00:08:46,800
now that's all it takes to get it

00:08:45,519 --> 00:08:49,680
registered

00:08:46,800 --> 00:08:51,040
because observable store is not specific

00:08:49,680 --> 00:08:52,560
to angular

00:08:51,040 --> 00:08:54,160
we don't have to go in and register

00:08:52,560 --> 00:08:55,839
modules or anything like that because

00:08:54,160 --> 00:08:58,480
again it can be used anywhere

00:08:55,839 --> 00:09:00,000
where there's javascript or typescript

00:08:58,480 --> 00:09:01,839
actually

00:09:00,000 --> 00:09:03,200
okay so let's say that we've done this

00:09:01,839 --> 00:09:06,160
now now what

00:09:03,200 --> 00:09:08,080
well now the service may use http client

00:09:06,160 --> 00:09:08,959
that you see here in the constructor and

00:09:08,080 --> 00:09:11,760
it may need to go

00:09:08,959 --> 00:09:12,399
call out and get data and maybe capture

00:09:11,760 --> 00:09:14,480
the data

00:09:12,399 --> 00:09:16,000
or just pull data from the store who

00:09:14,480 --> 00:09:18,720
knows maybe there's lookup data for

00:09:16,000 --> 00:09:20,480
example that we want to cache

00:09:18,720 --> 00:09:22,000
so then we need to get in set state to

00:09:20,480 --> 00:09:24,560
the store now this is very simple

00:09:22,000 --> 00:09:25,760
to do because we extended observable

00:09:24,560 --> 00:09:28,240
store

00:09:25,760 --> 00:09:29,680
we can call into a very simple api

00:09:28,240 --> 00:09:32,480
there's a set state

00:09:29,680 --> 00:09:34,160
and there's a get state now on the set

00:09:32,480 --> 00:09:36,000
stage in this case we're fetching some

00:09:34,160 --> 00:09:38,399
customers and i'm going to assume i want

00:09:36,000 --> 00:09:39,519
to cache them so you'll notice the first

00:09:38,399 --> 00:09:41,920
parameter there

00:09:39,519 --> 00:09:43,760
is customers and that will become the

00:09:41,920 --> 00:09:46,080
property name of course

00:09:43,760 --> 00:09:48,000
and then you'll notice the second one is

00:09:46,080 --> 00:09:49,760
i made an enumeration but you can pass a

00:09:48,000 --> 00:09:52,640
string if you wanted

00:09:49,760 --> 00:09:53,279
this is the action i need to track the

00:09:52,640 --> 00:09:56,160
actions

00:09:53,279 --> 00:09:58,560
because if i go into the history i need

00:09:56,160 --> 00:10:01,519
to know exactly what happened

00:09:58,560 --> 00:10:02,560
at what stage and so the action that you

00:10:01,519 --> 00:10:04,079
put here

00:10:02,560 --> 00:10:06,240
that would take care of that now i'm

00:10:04,079 --> 00:10:08,399
using what's called a string enum

00:10:06,240 --> 00:10:10,000
so this enumeration just saves me typing

00:10:08,399 --> 00:10:11,360
magic strings because i don't like

00:10:10,000 --> 00:10:12,800
strings a whole lot

00:10:11,360 --> 00:10:15,040
but ultimately behind the scenes is

00:10:12,800 --> 00:10:17,040
rendering string just saves me from

00:10:15,040 --> 00:10:18,720
typing that

00:10:17,040 --> 00:10:20,320
all right so now customers will be added

00:10:18,720 --> 00:10:23,040
to the store that's all you'd have to do

00:10:20,320 --> 00:10:23,920
very very simple and it'll do it in a

00:10:23,040 --> 00:10:27,120
cloning kind of

00:10:23,920 --> 00:10:29,040
immutable way now from there if you want

00:10:27,120 --> 00:10:30,640
to get state so let's say we call this

00:10:29,040 --> 00:10:32,480
getall function

00:10:30,640 --> 00:10:34,000
and if we already have customers in the

00:10:32,480 --> 00:10:36,480
store i'd like to use those i don't want

00:10:34,000 --> 00:10:39,200
to go back to the server in this case

00:10:36,480 --> 00:10:40,480
well we can call getstate within that

00:10:39,200 --> 00:10:42,000
service

00:10:40,480 --> 00:10:43,600
and because getstate is part of

00:10:42,000 --> 00:10:44,560
observable store we'll have access to

00:10:43,600 --> 00:10:46,959
that

00:10:44,560 --> 00:10:48,399
and now if we have some state which

00:10:46,959 --> 00:10:50,560
you'll see right here

00:10:48,399 --> 00:10:51,839
and we have customers we could go ahead

00:10:50,560 --> 00:10:53,040
and just return those

00:10:51,839 --> 00:10:55,279
you know in this case i'm wrapping it

00:10:53,040 --> 00:10:57,120
with of making observable of course

00:10:55,279 --> 00:10:58,880
and then if we don't we'll call the

00:10:57,120 --> 00:11:02,079
fetch customers that you just saw

00:10:58,880 --> 00:11:04,240
previously so very very simple now

00:11:02,079 --> 00:11:05,760
there's a lot more you can do with the

00:11:04,240 --> 00:11:07,600
get and set state

00:11:05,760 --> 00:11:09,200
i'll have to admit in 25 minutes i can't

00:11:07,600 --> 00:11:10,800
do that part justice

00:11:09,200 --> 00:11:12,640
but that's how easy it would be to get

00:11:10,800 --> 00:11:13,600
data in and out of the store at least to

00:11:12,640 --> 00:11:17,120
get started

00:11:13,600 --> 00:11:19,120
the beginner kind of way now what if you

00:11:17,120 --> 00:11:20,959
have a component or a service or some

00:11:19,120 --> 00:11:24,079
other aspect of your application

00:11:20,959 --> 00:11:26,959
that needs to be able to know about

00:11:24,079 --> 00:11:28,720
when that store changes what would you

00:11:26,959 --> 00:11:31,839
do there

00:11:28,720 --> 00:11:33,360
well i mentioned earlier that last time

00:11:31,839 --> 00:11:34,720
i talked it was called mastering the

00:11:33,360 --> 00:11:36,640
subject and we talked about all these

00:11:34,720 --> 00:11:38,560
subjects like behavior subject

00:11:36,640 --> 00:11:40,399
well observable story uses a behavior

00:11:38,560 --> 00:11:42,000
subject behind the scenes

00:11:40,399 --> 00:11:43,839
and what it will do is when somebody

00:11:42,000 --> 00:11:46,079
subscribes to a behavior subject you'll

00:11:43,839 --> 00:11:48,000
get the data that comes down

00:11:46,079 --> 00:11:50,240
now what if somebody subscribes later

00:11:48,000 --> 00:11:52,000
like component b down here

00:11:50,240 --> 00:11:54,079
well with a behavior subject they'll get

00:11:52,000 --> 00:11:56,480
the last piece of data

00:11:54,079 --> 00:11:58,240
and that will now slow down as well as

00:11:56,480 --> 00:12:00,000
any future data so really nice and

00:11:58,240 --> 00:12:03,200
that's really what's going on

00:12:00,000 --> 00:12:04,800
with the observable storm so what we can

00:12:03,200 --> 00:12:08,399
do then is observable store

00:12:04,800 --> 00:12:10,240
exposes a state change observable

00:12:08,399 --> 00:12:11,920
we can then subscribe to that now in

00:12:10,240 --> 00:12:12,959
this case i'm assuming i'm going to use

00:12:11,920 --> 00:12:15,120
an async pipe

00:12:12,959 --> 00:12:16,079
you'll notice this this stock customers

00:12:15,120 --> 00:12:17,519
here

00:12:16,079 --> 00:12:19,279
and i put the dollar there to kind of

00:12:17,519 --> 00:12:22,399
signify a more of a

00:12:19,279 --> 00:12:23,200
streaming operation but i call customer

00:12:22,399 --> 00:12:26,240
service which

00:12:23,200 --> 00:12:27,760
extends observable store state change

00:12:26,240 --> 00:12:29,920
and then i'm going to pipe the data that

00:12:27,760 --> 00:12:32,000
came in and only grab the tesla now this

00:12:29,920 --> 00:12:33,920
is the most primitive way to do that

00:12:32,000 --> 00:12:36,399
there's several other ways as well you

00:12:33,920 --> 00:12:39,120
can do state slice selector it's called

00:12:36,399 --> 00:12:39,680
and some other things as well but this

00:12:39,120 --> 00:12:41,279
is the

00:12:39,680 --> 00:12:43,120
kind of easy way to do that and then

00:12:41,279 --> 00:12:45,760
let's assume we would bind

00:12:43,120 --> 00:12:46,480
our customers that you see up top there

00:12:45,760 --> 00:12:49,600
to

00:12:46,480 --> 00:12:51,040
uh who knows maybe a ng-4 and we're

00:12:49,600 --> 00:12:53,920
going to use the async pipe

00:12:51,040 --> 00:12:54,399
to do that all right so that's kind of a

00:12:53,920 --> 00:12:57,519
quick

00:12:54,399 --> 00:13:00,240
overview now let me jump over to

00:12:57,519 --> 00:13:02,079
sample app here and this is part of the

00:13:00,240 --> 00:13:04,160
observable store sample so you're

00:13:02,079 --> 00:13:06,079
welcome to go to that project

00:13:04,160 --> 00:13:08,320
you'll see a samples folder and then you

00:13:06,079 --> 00:13:11,839
can take a look at this

00:13:08,320 --> 00:13:15,120
so you'll notice here that we now have

00:13:11,839 --> 00:13:16,720
a simple service that extends observable

00:13:15,120 --> 00:13:18,240
score and i'm not sure how big that is

00:13:16,720 --> 00:13:21,120
on your screen so i'm going to go even

00:13:18,240 --> 00:13:23,440
bigger um but here we go so here's my

00:13:21,120 --> 00:13:26,639
store state that's just an interface

00:13:23,440 --> 00:13:29,120
and then if i scroll on down in super

00:13:26,639 --> 00:13:29,680
i can pass in things like state slice

00:13:29,120 --> 00:13:32,560
slice

00:13:29,680 --> 00:13:34,399
selectors say that 10 times i can pass

00:13:32,560 --> 00:13:35,200
in settings for the store and you can

00:13:34,399 --> 00:13:38,480
even register

00:13:35,200 --> 00:13:40,240
settings uh globally for the app as well

00:13:38,480 --> 00:13:41,760
now you'll notice in this get user

00:13:40,240 --> 00:13:42,959
settings i'm going to demo this in just

00:13:41,760 --> 00:13:46,320
a moment

00:13:42,959 --> 00:13:48,160
i am going into set state and i'm going

00:13:46,320 --> 00:13:49,680
to set a property called user settings

00:13:48,160 --> 00:13:50,320
so let's imagine that the user can

00:13:49,680 --> 00:13:52,480
interact with

00:13:50,320 --> 00:13:53,680
user settings maybe change like their

00:13:52,480 --> 00:13:56,560
preferred name

00:13:53,680 --> 00:13:57,839
uh their email their theme and until it

00:13:56,560 --> 00:13:58,800
goes back to the server you want to

00:13:57,839 --> 00:14:01,760
store that

00:13:58,800 --> 00:14:02,560
and maybe those changes are used

00:14:01,760 --> 00:14:04,800
throughout the app

00:14:02,560 --> 00:14:06,320
maybe up on the toolbar for example you

00:14:04,800 --> 00:14:08,800
want to show preferred name

00:14:06,320 --> 00:14:10,800
or maybe the theme is for the whole app

00:14:08,800 --> 00:14:12,560
of course if they change it

00:14:10,800 --> 00:14:14,639
now in this case you'll notice i'm

00:14:12,560 --> 00:14:15,360
calling add user settings when i set the

00:14:14,639 --> 00:14:16,320
state

00:14:15,360 --> 00:14:18,959
all right and i'll show you where this

00:14:16,320 --> 00:14:20,560
is used in just a moment now if we go to

00:14:18,959 --> 00:14:21,760
update the settings i could also call

00:14:20,560 --> 00:14:23,519
set state in this case i have a

00:14:21,760 --> 00:14:26,000
different action

00:14:23,519 --> 00:14:27,760
and then we can come on down and anytime

00:14:26,000 --> 00:14:29,519
the state changes

00:14:27,760 --> 00:14:31,040
i can be notified about that now i'm

00:14:29,519 --> 00:14:33,519
making a little wrapper api

00:14:31,040 --> 00:14:34,320
around that to make it even easier for

00:14:33,519 --> 00:14:36,480
components

00:14:34,320 --> 00:14:38,000
to subscribe and i'll kind of get to

00:14:36,480 --> 00:14:41,920
that in just a moment so if we go

00:14:38,000 --> 00:14:41,920
into the application itself

00:14:42,240 --> 00:14:46,079
all right you'll um you'll notice it's a

00:14:44,560 --> 00:14:47,120
pretty simple app has customers and

00:14:46,079 --> 00:14:50,000
orders

00:14:47,120 --> 00:14:51,760
but if i go into settings here these

00:14:50,000 --> 00:14:55,279
settings are now in the store

00:14:51,760 --> 00:14:57,040
i just retrieved those jimbo apparently

00:14:55,279 --> 00:15:00,240
is the preferred name here

00:14:57,040 --> 00:15:02,160
let's say it needs to be jimbo 2 and i

00:15:00,240 --> 00:15:04,240
did a kind of blur event here

00:15:02,160 --> 00:15:05,839
when it updates the server and the store

00:15:04,240 --> 00:15:08,000
so as soon as i blur

00:15:05,839 --> 00:15:09,760
you'll notice jimbo 2 has expected

00:15:08,000 --> 00:15:10,959
updates here and then as i change the

00:15:09,760 --> 00:15:13,040
theme

00:15:10,959 --> 00:15:14,000
i need to notify the root component of

00:15:13,040 --> 00:15:16,160
that change

00:15:14,000 --> 00:15:18,160
so it's going to subscribe to the state

00:15:16,160 --> 00:15:20,399
change of the service

00:15:18,160 --> 00:15:22,160
and now when i go to dark and i know

00:15:20,399 --> 00:15:24,240
you're going wow damn that is the most

00:15:22,160 --> 00:15:25,839
phenomenal dark theme i've ever seen

00:15:24,240 --> 00:15:27,519
i know i put a lot of work into this

00:15:25,839 --> 00:15:30,160
thank you

00:15:27,519 --> 00:15:30,800
anyway you'll see that uh that's able to

00:15:30,160 --> 00:15:33,920
change

00:15:30,800 --> 00:15:34,560
and that's all being done by updating

00:15:33,920 --> 00:15:38,079
the store

00:15:34,560 --> 00:15:40,480
right then then the state change fires

00:15:38,079 --> 00:15:42,000
and then we can notify so again it's

00:15:40,480 --> 00:15:42,480
almost like an observable service but

00:15:42,000 --> 00:15:44,959
which

00:15:42,480 --> 00:15:45,920
with a whole bunch more bells and

00:15:44,959 --> 00:15:49,040
whistles

00:15:45,920 --> 00:15:50,720
going on there so to wrap up let me go

00:15:49,040 --> 00:15:53,199
to the component now

00:15:50,720 --> 00:15:55,279
for this so the one that's actually

00:15:53,199 --> 00:15:58,079
receiving some of these changes

00:15:55,279 --> 00:16:00,800
is the app component because it actually

00:15:58,079 --> 00:16:02,959
changes and sets some themed stuff

00:16:00,800 --> 00:16:05,440
so you'll notice i'm injecting the user

00:16:02,959 --> 00:16:07,839
settings service and a customer service

00:16:05,440 --> 00:16:10,160
but in this case what i'm doing is

00:16:07,839 --> 00:16:13,440
anytime the user settings is called

00:16:10,160 --> 00:16:15,519
or the user settings change fires

00:16:13,440 --> 00:16:16,880
all right these are both observables

00:16:15,519 --> 00:16:19,519
that's going to update my

00:16:16,880 --> 00:16:21,040
user settings and then in there i can

00:16:19,519 --> 00:16:23,600
use that to do things like

00:16:21,040 --> 00:16:25,199
update the theme now of course this is a

00:16:23,600 --> 00:16:26,399
pretty simple demo i can move that

00:16:25,199 --> 00:16:28,240
somewhere else

00:16:26,399 --> 00:16:30,000
but the whole point of this is now i

00:16:28,240 --> 00:16:31,680
have a way to easily know when things

00:16:30,000 --> 00:16:32,800
change if you go in and delete a

00:16:31,680 --> 00:16:34,480
customer

00:16:32,800 --> 00:16:36,800
there's a little red bubble up in the

00:16:34,480 --> 00:16:37,759
bar you saw and that will show the

00:16:36,800 --> 00:16:40,399
number of items

00:16:37,759 --> 00:16:42,000
the number of customers well we can

00:16:40,399 --> 00:16:43,360
influence that right here

00:16:42,000 --> 00:16:44,880
and notice i can grab the customer's

00:16:43,360 --> 00:16:46,959
length and subscribe and again this is

00:16:44,880 --> 00:16:49,519
just one of several ways you can know

00:16:46,959 --> 00:16:50,160
when the store changes there's also some

00:16:49,519 --> 00:16:53,759
selector

00:16:50,160 --> 00:16:56,480
type things you can do so to wrap up

00:16:53,759 --> 00:16:57,120
that is the fundamentals of how you get

00:16:56,480 --> 00:17:00,480
started

00:16:57,120 --> 00:17:03,680
with observable store to kind of review

00:17:00,480 --> 00:17:06,400
the overall goals here

00:17:03,680 --> 00:17:06,799
maybe come on powerpoint there we go all

00:17:06,400 --> 00:17:10,400
right

00:17:06,799 --> 00:17:11,520
so the overall goals are not that fast

00:17:10,400 --> 00:17:13,919
yeah it's fast

00:17:11,520 --> 00:17:14,720
uh single source of truth immutable

00:17:13,919 --> 00:17:16,240
state

00:17:14,720 --> 00:17:17,839
super important again there's a lot

00:17:16,240 --> 00:17:19,120
going on behind the scenes with

00:17:17,839 --> 00:17:21,439
observable store

00:17:19,120 --> 00:17:22,480
to ensure that the state is not being

00:17:21,439 --> 00:17:24,319
mutated

00:17:22,480 --> 00:17:26,959
because that can mess up all kinds of

00:17:24,319 --> 00:17:29,760
things we have notifications

00:17:26,959 --> 00:17:31,039
and we have a history as well now the

00:17:29,760 --> 00:17:32,000
actually i just realized i want to show

00:17:31,039 --> 00:17:35,600
one more quick thing

00:17:32,000 --> 00:17:39,760
there um on the history

00:17:35,600 --> 00:17:41,600
so let's see if i can go back

00:17:39,760 --> 00:17:44,400
i don't know where i put that tab so

00:17:41,600 --> 00:17:47,120
we'll we'll go in this way

00:17:44,400 --> 00:17:48,640
all right so when i go in another nice

00:17:47,120 --> 00:17:51,039
new feature that's just recently been

00:17:48,640 --> 00:17:53,919
added let's say i switch to dark

00:17:51,039 --> 00:17:55,039
and then i go back and i don't know i go

00:17:53,919 --> 00:17:57,840
to edit

00:17:55,039 --> 00:17:58,960
maybe change a customer something like

00:17:57,840 --> 00:18:00,960
this

00:17:58,960 --> 00:18:03,760
well we can come into the redux dev

00:18:00,960 --> 00:18:06,960
tools and we also get support

00:18:03,760 --> 00:18:09,840
for replaying all those actions or

00:18:06,960 --> 00:18:12,000
as of right with this demo it's actually

00:18:09,840 --> 00:18:13,760
going into the console and also writing

00:18:12,000 --> 00:18:14,000
out everything that's going on so even

00:18:13,760 --> 00:18:17,280
with

00:18:14,000 --> 00:18:18,320
the really simplistic uh kind of api you

00:18:17,280 --> 00:18:20,799
can use

00:18:18,320 --> 00:18:22,400
you can multiple ways see every little

00:18:20,799 --> 00:18:22,880
thing that's going on as you'll see down

00:18:22,400 --> 00:18:26,640
here

00:18:22,880 --> 00:18:28,640
in the devtools console pretty cool

00:18:26,640 --> 00:18:29,840
all right now i want to emphasize is

00:18:28,640 --> 00:18:31,600
this the way

00:18:29,840 --> 00:18:32,960
you know like i have spoken if you're a

00:18:31,600 --> 00:18:36,400
mandalorian fan

00:18:32,960 --> 00:18:38,960
uh no it's not the way there is no

00:18:36,400 --> 00:18:40,160
the way the way is what's ever best for

00:18:38,960 --> 00:18:42,559
your team

00:18:40,160 --> 00:18:44,559
so if you're looking for something i

00:18:42,559 --> 00:18:46,080
would highly encourage you evaluate this

00:18:44,559 --> 00:18:48,400
and the other solutions out there

00:18:46,080 --> 00:18:50,320
because everybody has different needs

00:18:48,400 --> 00:18:51,840
this has worked out extremely well for

00:18:50,320 --> 00:18:53,360
us and a lot of the companies we work

00:18:51,840 --> 00:18:54,880
with are using as well

00:18:53,360 --> 00:18:56,559
but it doesn't mean it's right for you

00:18:54,880 --> 00:18:58,720
you need to build your own prototype go

00:18:56,559 --> 00:19:00,720
through the samples and try it out

00:18:58,720 --> 00:19:02,400
so with that thank you so much have a

00:19:00,720 --> 00:19:03,120
great rest of the conference stay safe

00:19:02,400 --> 00:19:10,070
and healthy

00:19:03,120 --> 00:19:13,530
and keep a positive attitude

00:19:10,070 --> 00:19:15,570
[Music]

00:19:13,530 --> 00:19:19,039
[Applause]

00:19:15,570 --> 00:19:21,120
[Music]

00:19:19,039 --> 00:19:21,120

YouTube URL: https://www.youtube.com/watch?v=jn4AH5pGWhA


