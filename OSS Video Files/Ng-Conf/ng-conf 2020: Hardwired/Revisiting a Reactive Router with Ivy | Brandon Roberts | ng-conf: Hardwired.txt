Title: Revisiting a Reactive Router with Ivy | Brandon Roberts | ng-conf: Hardwired
Publication date: 2020-09-05
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

The release of Ivy opens up new possibilities of routing in Angular. Optional NgModules, lazy loading components, and dynamically creating components on the fly. The Angular Router is very powerful already, but what if we took a fresh look at a reactive router in this new world. This talk talks about the history of the router, and the process of building a new reactive router.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,180 --> 00:00:02,970
[Music]

00:00:02,400 --> 00:00:16,630
[Applause]

00:00:02,970 --> 00:00:16,630
[Music]

00:00:17,600 --> 00:00:20,960
so this is

00:00:18,480 --> 00:00:22,560
revisiting a reactive router with ivy

00:00:20,960 --> 00:00:24,720
and i've been wanting to give this talk

00:00:22,560 --> 00:00:26,000
uh for a while and research this idea

00:00:24,720 --> 00:00:27,920
for a long time

00:00:26,000 --> 00:00:30,960
so i'm pretty excited about finally

00:00:27,920 --> 00:00:32,800
being able to give this talk

00:00:30,960 --> 00:00:34,320
so my name is brandon roberts you can

00:00:32,800 --> 00:00:37,120
follow me on twitter at brandon t

00:00:34,320 --> 00:00:38,960
roberts where i tweet about gifts i

00:00:37,120 --> 00:00:40,559
tweet our gifts i talk about sports and

00:00:38,960 --> 00:00:41,920
sometimes i block people who eat smoked

00:00:40,559 --> 00:00:43,840
barbecue because that's really not a

00:00:41,920 --> 00:00:45,680
thing

00:00:43,840 --> 00:00:47,039
software engineer at narwhal you can

00:00:45,680 --> 00:00:48,480
find i'll talk about them more in a

00:00:47,039 --> 00:00:51,680
second

00:00:48,480 --> 00:00:56,160
i'm also a gde in angular

00:00:51,680 --> 00:00:56,160
and a maintainer on the ngrx project

00:00:56,239 --> 00:00:59,440
so as i mentioned before i work at

00:00:57,840 --> 00:01:01,840
narwhal and we love what we do

00:00:59,440 --> 00:01:03,840
we help software development teams build

00:01:01,840 --> 00:01:05,519
large applications to better way

00:01:03,840 --> 00:01:08,000
we offer consulting engineering and

00:01:05,519 --> 00:01:09,280
training we offer best practices i have

00:01:08,000 --> 00:01:11,760
deep knowledge in angular

00:01:09,280 --> 00:01:12,560
ngrx and other frameworks so if you need

00:01:11,760 --> 00:01:13,920
some help

00:01:12,560 --> 00:01:16,320
just reach out to us look at our

00:01:13,920 --> 00:01:17,920
services page take a look at our open

00:01:16,320 --> 00:01:18,560
source project nx that you've probably

00:01:17,920 --> 00:01:20,900
heard about

00:01:18,560 --> 00:01:23,360
and just talk to us

00:01:20,900 --> 00:01:28,080
[Music]

00:01:23,360 --> 00:01:29,600
so let's get into uh the agenda here

00:01:28,080 --> 00:01:31,520
so i'm going to talk about kind of the

00:01:29,600 --> 00:01:33,200
history of routers and angularjs

00:01:31,520 --> 00:01:34,640
and angular because it's kind of my

00:01:33,200 --> 00:01:37,360
thing

00:01:34,640 --> 00:01:38,400
we'll talk about ivy and what how that

00:01:37,360 --> 00:01:41,680
applies to

00:01:38,400 --> 00:01:42,640
routing and the things that i came

00:01:41,680 --> 00:01:46,079
across in

00:01:42,640 --> 00:01:46,079
building and building a router

00:01:46,720 --> 00:01:50,320
so and who's ready to hear some hot

00:01:48,479 --> 00:01:52,399
takes nobody

00:01:50,320 --> 00:01:55,119
okay cool but i do want to give some

00:01:52,399 --> 00:01:57,600
shout outs though to the people who have

00:01:55,119 --> 00:01:59,200
entertained my ideas about routing along

00:01:57,600 --> 00:02:02,880
the way and some of those

00:01:59,200 --> 00:02:04,640
people are brian ford of course victor

00:02:02,880 --> 00:02:06,880
savion on narwhal team

00:02:04,640 --> 00:02:09,360
uh victor beshay and jason hayden just

00:02:06,880 --> 00:02:11,840
to name a few i'm sure there are others

00:02:09,360 --> 00:02:15,599
who came along the way and uh generally

00:02:11,840 --> 00:02:15,599
one shout out rob also rob one mall

00:02:16,319 --> 00:02:19,840
so first i want to talk about angularjs

00:02:19,120 --> 00:02:22,239
routers

00:02:19,840 --> 00:02:24,400
because from my experience a lot of

00:02:22,239 --> 00:02:27,760
angular developers may have started

00:02:24,400 --> 00:02:29,760
using using after version 2.0

00:02:27,760 --> 00:02:33,599
so there are a couple of routers

00:02:29,760 --> 00:02:33,599
primarily used in angularjs

00:02:34,239 --> 00:02:37,760
there's the first one in angularjs which

00:02:36,480 --> 00:02:40,480
is a module named

00:02:37,760 --> 00:02:40,879
ng route and this module provides you

00:02:40,480 --> 00:02:42,720
with

00:02:40,879 --> 00:02:45,200
an ng view directive to render routes

00:02:42,720 --> 00:02:47,680
with in most cases you only have

00:02:45,200 --> 00:02:48,959
ever ever had one ng view in the entire

00:02:47,680 --> 00:02:51,840
application

00:02:48,959 --> 00:02:52,800
so this this one has been used some but

00:02:51,840 --> 00:02:55,120
if you're like me

00:02:52,800 --> 00:02:56,000
and you build a few angularjs

00:02:55,120 --> 00:02:59,280
applications

00:02:56,000 --> 00:02:59,920
you most likely use the ui router ui

00:02:59,280 --> 00:03:02,959
router

00:02:59,920 --> 00:03:05,120
gave you a ui view and had uh

00:03:02,959 --> 00:03:06,800
more flexibility in angularjs

00:03:05,120 --> 00:03:09,440
applications that was like a community

00:03:06,800 --> 00:03:11,840
build project

00:03:09,440 --> 00:03:13,599
ui router was built on top of promises

00:03:11,840 --> 00:03:14,319
because that's what we did in angularjs

00:03:13,599 --> 00:03:16,840
right

00:03:14,319 --> 00:03:19,280
it had support for multiple outlets

00:03:16,840 --> 00:03:22,000
resolvers and guards

00:03:19,280 --> 00:03:25,040
life cycle events and it was just about

00:03:22,000 --> 00:03:25,040
rendering components

00:03:25,920 --> 00:03:30,640
next up i'll cover the angular 2 as it

00:03:29,519 --> 00:03:32,560
was called back then

00:03:30,640 --> 00:03:33,840
router which was being developed at the

00:03:32,560 --> 00:03:36,159
time which was probably around

00:03:33,840 --> 00:03:37,440
around about the time i got involved

00:03:36,159 --> 00:03:39,840
with using and building things with

00:03:37,440 --> 00:03:39,840
angular

00:03:40,000 --> 00:03:43,200
so the angular 2 router had a lot of

00:03:41,760 --> 00:03:45,840
interesting goals

00:03:43,200 --> 00:03:47,519
it was written primarily using promises

00:03:45,840 --> 00:03:49,360
as its primary interface

00:03:47,519 --> 00:03:50,799
and i know what you're thinking where

00:03:49,360 --> 00:03:51,680
you're supposed to be in this reactive

00:03:50,799 --> 00:03:54,480
land where

00:03:51,680 --> 00:03:56,400
observables are becoming more prominent

00:03:54,480 --> 00:03:58,319
but one interesting to note is that

00:03:56,400 --> 00:03:59,920
that router still was using observables

00:03:58,319 --> 00:04:02,400
underneath it just wasn't exposing them

00:03:59,920 --> 00:04:02,400
publicly

00:04:02,720 --> 00:04:06,959
so back to where we were it uses

00:04:05,599 --> 00:04:09,439
promises

00:04:06,959 --> 00:04:10,879
it had a tree of routers at each level

00:04:09,439 --> 00:04:12,799
in the hierarchy as opposed to one

00:04:10,879 --> 00:04:14,879
single router

00:04:12,799 --> 00:04:17,840
it was also just about components as

00:04:14,879 --> 00:04:19,280
there were no energy modules at the time

00:04:17,840 --> 00:04:22,079
and it was going to be backported to

00:04:19,280 --> 00:04:22,079
angularjs

00:04:22,560 --> 00:04:26,639
along while this was happening uh we

00:04:25,520 --> 00:04:28,880
were looking at

00:04:26,639 --> 00:04:30,240
you know because of course we all like

00:04:28,880 --> 00:04:32,160
to build things and

00:04:30,240 --> 00:04:33,680
of course me and mike mike ryan are

00:04:32,160 --> 00:04:35,840
addicted to building routers

00:04:33,680 --> 00:04:38,240
uh mike and myself uh built injector

00:04:35,840 --> 00:04:39,680
router independent of the angular router

00:04:38,240 --> 00:04:41,440
because we wanted to take a fresh look

00:04:39,680 --> 00:04:43,840
at the reactivity with reactivity in

00:04:41,440 --> 00:04:43,840
mind

00:04:44,240 --> 00:04:47,440
so it was course uh built using

00:04:46,160 --> 00:04:51,199
observables

00:04:47,440 --> 00:04:54,240
and for everything from route traversal

00:04:51,199 --> 00:04:56,639
to route params and query params support

00:04:54,240 --> 00:04:58,720
for router links and route views

00:04:56,639 --> 00:05:00,080
and it was just about loading components

00:04:58,720 --> 00:05:03,120
and you can see how these

00:05:00,080 --> 00:05:06,160
these things may sound familiar to you

00:05:03,120 --> 00:05:07,919
so if we fast forward to angular router

00:05:06,160 --> 00:05:10,160
version 3

00:05:07,919 --> 00:05:11,680
the team wanted to make sure it kind of

00:05:10,160 --> 00:05:13,199
fit looked at this bit

00:05:11,680 --> 00:05:15,120
of what we were doing and wanted to make

00:05:13,199 --> 00:05:18,080
the angler rider more reactive to fit

00:05:15,120 --> 00:05:20,639
into this new world

00:05:18,080 --> 00:05:22,320
so you know what happened next right

00:05:20,639 --> 00:05:22,800
then was like hey that's a pretty cool

00:05:22,320 --> 00:05:24,880
ride

00:05:22,800 --> 00:05:27,039
ronnie you got there and then i'll let

00:05:24,880 --> 00:05:29,440
you fill in the blank here but

00:05:27,039 --> 00:05:30,960
if we're being serious about it we met

00:05:29,440 --> 00:05:32,479
we did meet with the angular team about

00:05:30,960 --> 00:05:34,800
the ngrx router

00:05:32,479 --> 00:05:35,600
and they appreciated the concepts that

00:05:34,800 --> 00:05:37,440
we the

00:05:35,600 --> 00:05:38,639
concepts and the look that we took in

00:05:37,440 --> 00:05:40,639
that approach

00:05:38,639 --> 00:05:43,280
and wanted to fold those concepts into

00:05:40,639 --> 00:05:43,280
the framework

00:05:43,919 --> 00:05:47,759
so me mike victor safkin and others went

00:05:46,560 --> 00:05:49,680
back to the drawing board

00:05:47,759 --> 00:05:52,479
and redesigned the angular router with

00:05:49,680 --> 00:05:55,199
the concepts of indirect router in mind

00:05:52,479 --> 00:05:55,840
so android's router goes to vladimir

00:05:55,199 --> 00:05:59,360
stock

00:05:55,840 --> 00:06:00,000
and comes gets a fresh rebuild and comes

00:05:59,360 --> 00:06:03,600
back

00:06:00,000 --> 00:06:06,400
as angular router all these

00:06:03,600 --> 00:06:07,440
github repos still exist today so if you

00:06:06,400 --> 00:06:10,639
want to go check them out

00:06:07,440 --> 00:06:12,479
and dig deeper you they're still there

00:06:10,639 --> 00:06:14,479
the one thing that was added with the

00:06:12,479 --> 00:06:20,160
integration of android's router

00:06:14,479 --> 00:06:22,080
as the angular router was ng modules

00:06:20,160 --> 00:06:23,840
so one thing to note if you ever

00:06:22,080 --> 00:06:26,400
wondered why

00:06:23,840 --> 00:06:27,600
there was never an angular version 3 now

00:06:26,400 --> 00:06:30,319
you know

00:06:27,600 --> 00:06:31,120
angular router was reintroduced in

00:06:30,319 --> 00:06:35,840
version 4

00:06:31,120 --> 00:06:35,840
and is what most of you know today

00:06:36,720 --> 00:06:40,160
so now that we have more context about

00:06:39,280 --> 00:06:43,600
the history

00:06:40,160 --> 00:06:45,680
of the routers in angularjs and

00:06:43,600 --> 00:06:49,759
the routers upcoming in angular let's

00:06:45,680 --> 00:06:51,919
fast forward to today

00:06:49,759 --> 00:06:54,160
angular ivy has landed officially and

00:06:51,919 --> 00:06:56,400
now we can really start to rethink

00:06:54,160 --> 00:06:57,599
some of the things uh rethink some of

00:06:56,400 --> 00:07:00,639
these ideas in angular

00:06:57,599 --> 00:07:00,639
rather than one of them

00:07:00,800 --> 00:07:04,880
so i won't rehash completely rehash all

00:07:03,199 --> 00:07:08,160
the new things in ivy

00:07:04,880 --> 00:07:08,800
as mentioned uh kara and alex did an

00:07:08,160 --> 00:07:11,680
excellent job

00:07:08,800 --> 00:07:12,639
talking about those well just cover them

00:07:11,680 --> 00:07:14,479
in general

00:07:12,639 --> 00:07:16,160
ivy of course brings a new rendering

00:07:14,479 --> 00:07:19,039
engine where components

00:07:16,160 --> 00:07:20,560
only bring in what they need there's

00:07:19,039 --> 00:07:21,919
this concept of locality

00:07:20,560 --> 00:07:25,039
where they have the instructions that

00:07:21,919 --> 00:07:28,560
they need at runtime

00:07:25,039 --> 00:07:31,039
and it also has a brand new compiler

00:07:28,560 --> 00:07:32,080
with many new features including better

00:07:31,039 --> 00:07:33,680
type checking

00:07:32,080 --> 00:07:38,080
to go along with the new rendering

00:07:33,680 --> 00:07:38,080
engine with aot being able by default

00:07:39,759 --> 00:07:45,360
so the question is what does this do for

00:07:42,880 --> 00:07:47,280
what does iv do for routing angular and

00:07:45,360 --> 00:07:51,360
how can we leverage that

00:07:47,280 --> 00:07:52,800
for a first look at a reactive router

00:07:51,360 --> 00:07:54,479
so if you'll indulge me for a second

00:07:52,800 --> 00:07:58,639
let's talk about the dream in angular as

00:07:54,479 --> 00:08:01,360
far as routers are concerned

00:07:58,639 --> 00:08:02,479
so prior to ivy when i talked about the

00:08:01,360 --> 00:08:04,160
current relative

00:08:02,479 --> 00:08:05,840
we were looking at the writers in

00:08:04,160 --> 00:08:08,879
angularjs

00:08:05,840 --> 00:08:09,520
and even the early ones in angular they

00:08:08,879 --> 00:08:11,759
were

00:08:09,520 --> 00:08:13,919
all about components and engine modules

00:08:11,759 --> 00:08:16,080
in later value versus angular

00:08:13,919 --> 00:08:17,919
were all about injectors because inject

00:08:16,080 --> 00:08:21,360
the ng modules were

00:08:17,919 --> 00:08:23,360
the way that you got these injectors

00:08:21,360 --> 00:08:26,960
and the context needed for a compilation

00:08:23,360 --> 00:08:28,879
of components

00:08:26,960 --> 00:08:31,360
but with ivy we're moving towards a

00:08:28,879 --> 00:08:34,000
future where you can primarily work with

00:08:31,360 --> 00:08:34,959
ng modules being optional and we can

00:08:34,000 --> 00:08:36,640
rely more

00:08:34,959 --> 00:08:38,240
on the components that have an injector

00:08:36,640 --> 00:08:40,399
hierarchy themselves

00:08:38,240 --> 00:08:44,080
and the components have the context

00:08:40,399 --> 00:08:44,080
themselves needed for their life cycle

00:08:44,560 --> 00:08:48,320
so we can get back to a place where

00:08:46,240 --> 00:08:49,680
routing in angular is just about using

00:08:48,320 --> 00:08:52,000
components again

00:08:49,680 --> 00:08:53,600
which simplifies the mental model for

00:08:52,000 --> 00:08:54,080
new users of angular as well as

00:08:53,600 --> 00:08:57,760
experience

00:08:54,080 --> 00:08:57,760
ones which is what we want right

00:08:59,040 --> 00:09:04,000
so building a reactive router i mean

00:09:02,320 --> 00:09:05,839
what does that actually mean what

00:09:04,000 --> 00:09:07,680
what do we mean when we say it needs to

00:09:05,839 --> 00:09:09,600
be reactive and i

00:09:07,680 --> 00:09:10,959
heard this term from rob and i agree

00:09:09,600 --> 00:09:13,279
with this term uh

00:09:10,959 --> 00:09:14,320
the term is observable and observable

00:09:13,279 --> 00:09:18,080
out we want

00:09:14,320 --> 00:09:19,920
streams we want streams of urls to as

00:09:18,080 --> 00:09:20,399
far as writing concerns streams of urls

00:09:19,920 --> 00:09:22,560
to be

00:09:20,399 --> 00:09:24,720
transformed or mapped into a stream of

00:09:22,560 --> 00:09:26,880
components

00:09:24,720 --> 00:09:28,240
we also need streams of information from

00:09:26,880 --> 00:09:30,080
the router

00:09:28,240 --> 00:09:31,920
for things like route params and query

00:09:30,080 --> 00:09:34,959
params

00:09:31,920 --> 00:09:37,279
and the active route

00:09:34,959 --> 00:09:38,240
so once again you've seen this picture

00:09:37,279 --> 00:09:40,880
before from

00:09:38,240 --> 00:09:42,640
rob wilmot and it still rains true today

00:09:40,880 --> 00:09:45,760
in my mind for reactivity

00:09:42,640 --> 00:09:45,760
everything is a stream

00:09:46,959 --> 00:09:50,080
so as you know at least with the current

00:09:49,600 --> 00:09:52,399
the

00:09:50,080 --> 00:09:54,399
angular router there are many things

00:09:52,399 --> 00:09:56,560
that we need to consider

00:09:54,399 --> 00:09:59,680
uh when if we want to build a react a

00:09:56,560 --> 00:10:01,760
router uh that's reactive

00:09:59,680 --> 00:10:05,200
but we'll just keep this scope to a few

00:10:01,760 --> 00:10:08,000
things for this talk

00:10:05,200 --> 00:10:09,040
so what do we need we need a way to

00:10:08,000 --> 00:10:11,839
interact with the

00:10:09,040 --> 00:10:12,720
history web api uh which is of course

00:10:11,839 --> 00:10:13,680
what's driving it

00:10:12,720 --> 00:10:16,720
driving us when we're building these

00:10:13,680 --> 00:10:17,680
single page apps apis provided by the

00:10:16,720 --> 00:10:21,040
browser

00:10:17,680 --> 00:10:21,040
to control the history stack

00:10:21,279 --> 00:10:26,720
we need of course the router to have the

00:10:25,120 --> 00:10:29,600
contain that global information

00:10:26,720 --> 00:10:31,680
including a stream of url changes

00:10:29,600 --> 00:10:33,360
you need something to parse the url into

00:10:31,680 --> 00:10:36,480
a structure that we can

00:10:33,360 --> 00:10:38,480
digest like i said that global

00:10:36,480 --> 00:10:41,600
information such as query params

00:10:38,480 --> 00:10:45,760
or the hash or fragment

00:10:41,600 --> 00:10:49,120
a way to register routes route matching

00:10:45,760 --> 00:10:49,120
and rendering of components

00:10:49,360 --> 00:10:52,560
so as i mentioned before the history api

00:10:51,920 --> 00:10:54,880
gives us

00:10:52,560 --> 00:10:57,040
where we want to listen for url changes

00:10:54,880 --> 00:11:00,640
as well as browser events

00:10:57,040 --> 00:11:02,480
such as push state events so the angular

00:11:00,640 --> 00:11:05,120
location service

00:11:02,480 --> 00:11:06,560
uh gives us some of these things already

00:11:05,120 --> 00:11:08,560
out of the box and you could

00:11:06,560 --> 00:11:11,440
to interact with the browser api so we

00:11:08,560 --> 00:11:11,440
can leverage that

00:11:12,399 --> 00:11:15,839
so this imagine our router service we

00:11:15,440 --> 00:11:17,839
would

00:11:15,839 --> 00:11:20,320
uh inject the location service and

00:11:17,839 --> 00:11:23,360
listen to url changes that we

00:11:20,320 --> 00:11:25,680
push through the framework and uh

00:11:23,360 --> 00:11:26,399
events that happen through the browser

00:11:25,680 --> 00:11:30,959
apis

00:11:26,399 --> 00:11:30,959
and push those in as part of our stream

00:11:31,680 --> 00:11:35,040
next we're going to talk about how we

00:11:33,839 --> 00:11:38,160
parse the url

00:11:35,040 --> 00:11:39,440
and i'm a big proponent of using web

00:11:38,160 --> 00:11:42,399
more web apis

00:11:39,440 --> 00:11:42,800
and there's a relatively new url web api

00:11:42,399 --> 00:11:45,839
for

00:11:42,800 --> 00:11:47,839
parsing urls according to the spec

00:11:45,839 --> 00:11:50,320
so it gives us less code we have to

00:11:47,839 --> 00:11:52,560
bundle and enter our application

00:11:50,320 --> 00:11:54,399
because it can be used in the browser

00:11:52,560 --> 00:11:54,800
and of course it could be extended for

00:11:54,399 --> 00:11:57,279
or

00:11:54,800 --> 00:11:59,279
configure for extensibility and it gives

00:11:57,279 --> 00:12:02,880
up information like the path

00:11:59,279 --> 00:12:04,959
query params and the fragment

00:12:02,880 --> 00:12:07,200
so this is just a small example of how

00:12:04,959 --> 00:12:10,399
we could pass our location to this

00:12:07,200 --> 00:12:12,320
web api and return that information back

00:12:10,399 --> 00:12:14,720
so that we can use it in our route

00:12:12,320 --> 00:12:14,720
matching

00:12:15,200 --> 00:12:18,800
so as i mentioned this is all about

00:12:17,760 --> 00:12:22,480
components

00:12:18,800 --> 00:12:26,000
so let's take a declarative approach

00:12:22,480 --> 00:12:29,680
at defining a router and routes

00:12:26,000 --> 00:12:32,240
uh with this way because

00:12:29,680 --> 00:12:34,560
we want to the router contains routes

00:12:32,240 --> 00:12:35,839
and the current activated route

00:12:34,560 --> 00:12:38,560
and if we're thinking of this in terms

00:12:35,839 --> 00:12:41,200
of streams we want to take the latest

00:12:38,560 --> 00:12:42,880
url and our set of routes we want to

00:12:41,200 --> 00:12:44,480
find a match and set that route as

00:12:42,880 --> 00:12:47,839
active

00:12:44,480 --> 00:12:51,279
so there's a component for that

00:12:47,839 --> 00:12:54,240
also we want to register these routes

00:12:51,279 --> 00:12:54,639
uh using components also the components

00:12:54,240 --> 00:12:56,800
has

00:12:54,639 --> 00:12:58,399
two important parts about it the path

00:12:56,800 --> 00:12:59,519
and the component that we want to bind

00:12:58,399 --> 00:13:02,000
to

00:12:59,519 --> 00:13:04,079
now there are many different strategies

00:13:02,000 --> 00:13:05,680
to use to match the current path of the

00:13:04,079 --> 00:13:07,680
euro with the route

00:13:05,680 --> 00:13:09,600
but in my research and from previous

00:13:07,680 --> 00:13:11,440
experiments i chose path to reg xp

00:13:09,600 --> 00:13:14,000
because it has power pattern matching

00:13:11,440 --> 00:13:14,000
under the hood

00:13:14,959 --> 00:13:19,200
so to register the route you drop the

00:13:18,160 --> 00:13:21,839
route component

00:13:19,200 --> 00:13:23,760
inside the router inside the contents of

00:13:21,839 --> 00:13:25,360
the router component

00:13:23,760 --> 00:13:27,519
and the rod is registered with this

00:13:25,360 --> 00:13:27,760
parent and able to match routes as they

00:13:27,519 --> 00:13:30,959
are

00:13:27,760 --> 00:13:33,040
parsed so

00:13:30,959 --> 00:13:35,600
each once the router is listening to the

00:13:33,040 --> 00:13:38,399
url changes and it finds a match

00:13:35,600 --> 00:13:39,040
each route itself has a place or an

00:13:38,399 --> 00:13:43,120
outlet

00:13:39,040 --> 00:13:43,120
to render that component if it's a match

00:13:43,440 --> 00:13:48,399
and this is where ivy comes in

00:13:46,480 --> 00:13:50,399
we have this component here and we have

00:13:48,399 --> 00:13:53,440
an outlet for it

00:13:50,399 --> 00:13:54,959
and it's pretty much as simple as using

00:13:53,440 --> 00:13:56,560
render component the new render

00:13:54,959 --> 00:14:00,800
component api

00:13:56,560 --> 00:14:03,600
in angular you see the symbol in

00:14:00,800 --> 00:14:05,760
in the slide here because it's a

00:14:03,600 --> 00:14:08,959
semi-private api that will come

00:14:05,760 --> 00:14:12,240
public hopefully in the future

00:14:08,959 --> 00:14:14,959
but it's still in work in progress

00:14:12,240 --> 00:14:15,760
like also if we wanted to use route

00:14:14,959 --> 00:14:19,120
params

00:14:15,760 --> 00:14:20,000
for a particular uh route to pass to the

00:14:19,120 --> 00:14:22,079
component

00:14:20,000 --> 00:14:23,279
this just is the same way as passing

00:14:22,079 --> 00:14:25,160
that to the

00:14:23,279 --> 00:14:27,040
path and letting it match on that

00:14:25,160 --> 00:14:29,839
[Music]

00:14:27,040 --> 00:14:31,760
so we have our router we have our routes

00:14:29,839 --> 00:14:35,600
and we still use that first

00:14:31,760 --> 00:14:35,600
uh match win strategy here

00:14:36,560 --> 00:14:40,399
if we look at the about component we can

00:14:38,560 --> 00:14:42,800
see some of the streams that we can get

00:14:40,399 --> 00:14:44,160
out of this the route params is a stream

00:14:42,800 --> 00:14:46,320
on its own because

00:14:44,160 --> 00:14:48,320
everything is a stream the router also

00:14:46,320 --> 00:14:49,040
contains streams of global information

00:14:48,320 --> 00:14:51,920
such as

00:14:49,040 --> 00:14:52,639
url career params and hash so that we

00:14:51,920 --> 00:14:54,399
can combo

00:14:52,639 --> 00:14:58,480
compose and combine these streams

00:14:54,399 --> 00:15:00,240
together easily within the component

00:14:58,480 --> 00:15:01,680
i also want to talk about lazy loading

00:15:00,240 --> 00:15:04,000
because dynamically low

00:15:01,680 --> 00:15:07,360
laser dynamically loading components has

00:15:04,000 --> 00:15:09,440
become much simpler with ivy

00:15:07,360 --> 00:15:10,959
if we take another look at the route

00:15:09,440 --> 00:15:13,199
component

00:15:10,959 --> 00:15:14,320
here we're just bind to a component

00:15:13,199 --> 00:15:17,680
itself

00:15:14,320 --> 00:15:20,240
uh combined to the component itself

00:15:17,680 --> 00:15:20,800
and if we were looking using an angular

00:15:20,240 --> 00:15:22,800
router

00:15:20,800 --> 00:15:25,199
you use low children because we're so

00:15:22,800 --> 00:15:27,680
used to using ng modules

00:15:25,199 --> 00:15:28,560
we want to get back to using components

00:15:27,680 --> 00:15:31,839
and use

00:15:28,560 --> 00:15:31,839
load component instead

00:15:32,079 --> 00:15:36,480
so to show what that looks like we have

00:15:34,880 --> 00:15:39,120
bind to a variable in the component

00:15:36,480 --> 00:15:41,199
class that's low component

00:15:39,120 --> 00:15:42,959
and then the component class itself

00:15:41,199 --> 00:15:44,399
because ivy lets us take advantage of

00:15:42,959 --> 00:15:46,320
that locality

00:15:44,399 --> 00:15:47,839
the component has everything it needs to

00:15:46,320 --> 00:15:51,279
render

00:15:47,839 --> 00:15:53,199
and we can render that dynamically

00:15:51,279 --> 00:15:55,680
and we've all written this before to

00:15:53,199 --> 00:15:57,920
wire up route providers

00:15:55,680 --> 00:15:58,800
so you could imagine a future to where

00:15:57,920 --> 00:16:01,839
we're

00:15:58,800 --> 00:16:04,720
just using the route providers itself

00:16:01,839 --> 00:16:06,639
to inject the instance of the router or

00:16:04,720 --> 00:16:09,120
with the new injectable apis

00:16:06,639 --> 00:16:10,320
we may not even have to we just drop our

00:16:09,120 --> 00:16:14,880
component

00:16:10,320 --> 00:16:14,880
into our template and go forward

00:16:15,519 --> 00:16:20,399
so as i mentioned here there are still

00:16:17,759 --> 00:16:22,800
some things i didn't cover

00:16:20,399 --> 00:16:24,399
things like guards and resolvers if

00:16:22,800 --> 00:16:26,639
we're taking a first look at this

00:16:24,399 --> 00:16:27,600
are streams that can be pushed down into

00:16:26,639 --> 00:16:29,920
the component

00:16:27,600 --> 00:16:30,959
because i want to drive home that we're

00:16:29,920 --> 00:16:32,560
keeping this idea of

00:16:30,959 --> 00:16:37,839
components and streams in the front of

00:16:32,560 --> 00:16:37,839
our minds

00:16:38,240 --> 00:16:43,199
so to recap we talked about angularjs

00:16:42,320 --> 00:16:45,519
routers

00:16:43,199 --> 00:16:47,040
and uh angularjs routers and angular

00:16:45,519 --> 00:16:50,480
routers

00:16:47,040 --> 00:16:52,320
talked about what iv is and how ib

00:16:50,480 --> 00:16:52,800
enables the dream of getting back to

00:16:52,320 --> 00:16:54,200
just

00:16:52,800 --> 00:16:56,880
components for routing

00:16:54,200 --> 00:16:58,480
[Music]

00:16:56,880 --> 00:17:00,160
we talked about what being reactive

00:16:58,480 --> 00:17:03,519
means observable in

00:17:00,160 --> 00:17:06,400
and observable out and covert uh

00:17:03,519 --> 00:17:09,360
idea of what a declarative reactive

00:17:06,400 --> 00:17:09,360
router could look like

00:17:10,319 --> 00:17:13,679
if you'd like to see a demo of what i

00:17:11,919 --> 00:17:14,559
discussed here in this talk visit the

00:17:13,679 --> 00:17:16,799
github repo

00:17:14,559 --> 00:17:18,400
and try it out i'm really interested in

00:17:16,799 --> 00:17:20,959
getting some more feedback on this

00:17:18,400 --> 00:17:23,439
because i'd like to see this become a

00:17:20,959 --> 00:17:23,439
real thing

00:17:24,559 --> 00:17:29,600
a couple of last things we mentioned we

00:17:27,280 --> 00:17:32,480
announced earlier ngrx conf

00:17:29,600 --> 00:17:33,760
is coming uh now indirect confidence

00:17:32,480 --> 00:17:37,200
coming

00:17:33,760 --> 00:17:39,360
to me two days 20 speakers november

00:17:37,200 --> 00:17:40,480
5th and 6th not just about state

00:17:39,360 --> 00:17:42,559
management

00:17:40,480 --> 00:17:45,440
a lot of other deep dive topics on

00:17:42,559 --> 00:17:48,799
reactive angular will be covered

00:17:45,440 --> 00:17:51,840
you can find more at comp.ngrx.io

00:17:48,799 --> 00:17:55,039
and tickets are currently on sale

00:17:51,840 --> 00:17:56,880
and also we just launched for narwhal we

00:17:55,039 --> 00:17:58,559
just launched nxcloud

00:17:56,880 --> 00:18:00,320
and this helps you speed up your build

00:17:58,559 --> 00:18:03,280
and test times by up to

00:18:00,320 --> 00:18:04,640
10x so you can sign up today and get a

00:18:03,280 --> 00:18:07,280
free 25

00:18:04,640 --> 00:18:09,120
hour time saving coupon you can find out

00:18:07,280 --> 00:18:15,270
more at nx.out

00:18:09,120 --> 00:18:19,120
thank you for having me

00:18:15,270 --> 00:18:23,749
[Music]

00:18:19,120 --> 00:18:23,749
[Applause]

00:18:24,640 --> 00:18:26,720

YouTube URL: https://www.youtube.com/watch?v=Nwp7IckoHxI


