Title: From Google Analytics to Universal Deploy Schematics! | James Daniels | ng-conf: Hardwired
Publication date: 2020-09-01
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Learn about some of the new features in AngularFire and how the Firebase team leveraged dynamic imports, ES Proxies, and new features in Angular 9 to build a more streamlined SDK.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,180 --> 00:00:02,970
[Music]

00:00:02,400 --> 00:00:16,630
[Applause]

00:00:02,970 --> 00:00:16,630
[Music]

00:00:16,640 --> 00:00:20,640
hey there everyone

00:00:17,920 --> 00:00:21,279
i'm james daniels uh you can find me on

00:00:20,640 --> 00:00:24,560
twitter on

00:00:21,279 --> 00:00:26,480
james uriah and i'm a developer programs

00:00:24,560 --> 00:00:28,160
engineer at google and i work on the

00:00:26,480 --> 00:00:31,439
firebase team

00:00:28,160 --> 00:00:32,719
uh well you may know me from uh such

00:00:31,439 --> 00:00:36,079
great hits as

00:00:32,719 --> 00:00:38,239
ng conf 2019 and ngconf

00:00:36,079 --> 00:00:39,360
2018. uh i've been talking about

00:00:38,239 --> 00:00:42,480
firebase and

00:00:39,360 --> 00:00:43,040
angularfire for a little bit now uh one

00:00:42,480 --> 00:00:45,840
of the

00:00:43,040 --> 00:00:46,559
most common speakers for the team but uh

00:00:45,840 --> 00:00:49,200
today

00:00:46,559 --> 00:00:51,600
let's just loop back cover a little bit

00:00:49,200 --> 00:00:53,920
of ground on what firebase is

00:00:51,600 --> 00:00:55,440
what problems we're trying to solve and

00:00:53,920 --> 00:00:56,840
then i'll walk you through

00:00:55,440 --> 00:00:58,879
some of the things that we've been doing

00:00:56,840 --> 00:01:01,199
lately so

00:00:58,879 --> 00:01:02,879
firebase is google's application

00:01:01,199 --> 00:01:06,240
development platform

00:01:02,879 --> 00:01:08,960
right we are the tools

00:01:06,240 --> 00:01:09,840
made for you to develop an application

00:01:08,960 --> 00:01:12,880
quickly

00:01:09,840 --> 00:01:14,799
to get to market faster and build better

00:01:12,880 --> 00:01:18,080
applications

00:01:14,799 --> 00:01:21,680
ultimately our mission is to have help

00:01:18,080 --> 00:01:24,000
app developers succeed right we want you

00:01:21,680 --> 00:01:25,680
shipping those cool applications

00:01:24,000 --> 00:01:27,040
and we want to increase that time to

00:01:25,680 --> 00:01:31,759
market

00:01:27,040 --> 00:01:33,520
uh two million apps use us um

00:01:31,759 --> 00:01:35,040
i don't know which one of these uh if

00:01:33,520 --> 00:01:35,840
any of them are using angular these are

00:01:35,040 --> 00:01:37,759
the ones that all

00:01:35,840 --> 00:01:40,159
approved to be on this slide but two

00:01:37,759 --> 00:01:42,240
million apps are using us right now

00:01:40,159 --> 00:01:45,119
and i'm sure some of these people are

00:01:42,240 --> 00:01:47,840
using angular behind the scenes

00:01:45,119 --> 00:01:49,759
so the problems that we solve right is

00:01:47,840 --> 00:01:52,000
really focused on

00:01:49,759 --> 00:01:53,360
the the developer cycle development

00:01:52,000 --> 00:01:56,000
cycle so it's

00:01:53,360 --> 00:01:57,600
first you develop your application right

00:01:56,000 --> 00:02:00,640
you need authentication

00:01:57,600 --> 00:02:03,759
you need to store data you need to have

00:02:00,640 --> 00:02:05,600
computing you need to respond to events

00:02:03,759 --> 00:02:07,840
and you need to test your applications

00:02:05,600 --> 00:02:08,879
we have a bunch of tools around this

00:02:07,840 --> 00:02:11,920
first part of the site

00:02:08,879 --> 00:02:13,520
develop and especially angular

00:02:11,920 --> 00:02:14,959
developers and people who have used

00:02:13,520 --> 00:02:16,560
firebase on the web

00:02:14,959 --> 00:02:18,080
these are the tools that you are most

00:02:16,560 --> 00:02:20,720
familiar with

00:02:18,080 --> 00:02:22,160
now firebase has a lot more tools right

00:02:20,720 --> 00:02:24,160
so we have tools around

00:02:22,160 --> 00:02:25,200
running your application release

00:02:24,160 --> 00:02:28,000
management

00:02:25,200 --> 00:02:29,920
analytics and crash reporting and we

00:02:28,000 --> 00:02:32,720
also have tools around engaging we have

00:02:29,920 --> 00:02:33,920
cloud messaging personalization and

00:02:32,720 --> 00:02:35,920
experimentation

00:02:33,920 --> 00:02:38,800
so ultimately we have tools around this

00:02:35,920 --> 00:02:40,319
entire app life cycle

00:02:38,800 --> 00:02:42,000
and we're supported on multiple

00:02:40,319 --> 00:02:45,120
platforms right ios

00:02:42,000 --> 00:02:48,319
android web c plus and unity uh

00:02:45,120 --> 00:02:50,959
of course everyone here right presumably

00:02:48,319 --> 00:02:53,599
your angular developers at least mostly

00:02:50,959 --> 00:02:54,720
um so you're very much focused on this

00:02:53,599 --> 00:02:57,920
web

00:02:54,720 --> 00:02:58,879
piece and as i touched on before in the

00:02:57,920 --> 00:03:01,440
past

00:02:58,879 --> 00:03:02,560
you know a lot of our tools were geared

00:03:01,440 --> 00:03:04,640
towards

00:03:02,560 --> 00:03:05,760
solving the problems for ios and android

00:03:04,640 --> 00:03:08,000
developers

00:03:05,760 --> 00:03:09,440
web we had you know a lot of tools back

00:03:08,000 --> 00:03:12,800
from the startup days

00:03:09,440 --> 00:03:13,599
but not much in the terms of new

00:03:12,800 --> 00:03:16,560
development

00:03:13,599 --> 00:03:18,080
since the acquisition by google but all

00:03:16,560 --> 00:03:21,360
of that's changed right

00:03:18,080 --> 00:03:23,519
so since i spoke at last ngconf

00:03:21,360 --> 00:03:24,959
uh firebase has been launching a lot of

00:03:23,519 --> 00:03:27,360
its features

00:03:24,959 --> 00:03:28,319
uh for the web right we have remote

00:03:27,360 --> 00:03:30,799
configuration

00:03:28,319 --> 00:03:31,599
we have the google analytics integration

00:03:30,799 --> 00:03:33,680
performance

00:03:31,599 --> 00:03:35,200
monitoring we now have emulators for a

00:03:33,680 --> 00:03:37,760
lot of our tools

00:03:35,200 --> 00:03:38,239
and much much more and really key to

00:03:37,760 --> 00:03:41,440
this

00:03:38,239 --> 00:03:44,720
right was this google analytics piece

00:03:41,440 --> 00:03:46,560
um we rely for a performance monitoring

00:03:44,720 --> 00:03:48,560
remote config and a lot of our features

00:03:46,560 --> 00:03:50,080
on this google analytics piece

00:03:48,560 --> 00:03:51,840
and finally google analytics for

00:03:50,080 --> 00:03:54,400
firebase for web

00:03:51,840 --> 00:03:56,879
is is now a thing which has really

00:03:54,400 --> 00:03:59,280
unblocked us and bringing a lot

00:03:56,879 --> 00:04:00,640
more of our platform to web developers

00:03:59,280 --> 00:04:02,959
so how does this affect you

00:04:00,640 --> 00:04:05,360
and how does it affect me beyond you

00:04:02,959 --> 00:04:07,360
know my being an employee of google

00:04:05,360 --> 00:04:09,120
uh i'm also the maintainer of

00:04:07,360 --> 00:04:11,760
angularfire right

00:04:09,120 --> 00:04:12,159
so uh announcing today we just released

00:04:11,760 --> 00:04:14,480
uh

00:04:12,159 --> 00:04:15,760
the first 6-0 stable version of

00:04:14,480 --> 00:04:19,120
angularfire

00:04:15,760 --> 00:04:21,040
um where we support angular 9 iv

00:04:19,120 --> 00:04:23,280
and some of the cool new stuff that i'll

00:04:21,040 --> 00:04:24,479
touch on but uh you can find us on

00:04:23,280 --> 00:04:27,520
github here github

00:04:24,479 --> 00:04:29,120
angular angularfire and

00:04:27,520 --> 00:04:30,720
that's where most of you are gonna be

00:04:29,120 --> 00:04:32,720
familiar with me right i'm the

00:04:30,720 --> 00:04:36,320
angularfire maintainer

00:04:32,720 --> 00:04:39,520
and angularfire is extensions

00:04:36,320 --> 00:04:42,080
to the js sdk we wrap it adding

00:04:39,520 --> 00:04:43,040
more angular features right the firebase

00:04:42,080 --> 00:04:46,800
js sdk

00:04:43,040 --> 00:04:50,320
is meant for any platform it's agnostic

00:04:46,800 --> 00:04:52,479
um and ultimately angularfire's job

00:04:50,320 --> 00:04:54,560
is to make the firebase js sdk a little

00:04:52,479 --> 00:04:57,520
bit more seamless in angular

00:04:54,560 --> 00:04:58,560
i'll jump in on some code and show you

00:04:57,520 --> 00:05:01,680
around a little bit

00:04:58,560 --> 00:05:02,800
in a few minutes but what i really want

00:05:01,680 --> 00:05:05,919
to talk about today

00:05:02,800 --> 00:05:07,360
is how we can use the deep

00:05:05,919 --> 00:05:09,199
google analytics integration with the

00:05:07,360 --> 00:05:10,800
angular router this is a new feature of

00:05:09,199 --> 00:05:13,039
angularfire

00:05:10,800 --> 00:05:14,639
um i want to show you how you can alter

00:05:13,039 --> 00:05:15,360
the behavior of your application without

00:05:14,639 --> 00:05:17,919
having to

00:05:15,360 --> 00:05:19,120
redeploy your application with firebase

00:05:17,919 --> 00:05:22,560
remote configuration

00:05:19,120 --> 00:05:25,039
right we're going to show a universal

00:05:22,560 --> 00:05:27,520
deployment schematics

00:05:25,039 --> 00:05:29,520
and i'm going to touch on how we're

00:05:27,520 --> 00:05:33,360
achieving some of our new lightweight

00:05:29,520 --> 00:05:35,440
lazy loaded modules so uh let's go ahead

00:05:33,360 --> 00:05:37,039
and jump into the code

00:05:35,440 --> 00:05:39,199
and of course this comes with the the

00:05:37,039 --> 00:05:40,240
standard caveats of i'm going to be live

00:05:39,199 --> 00:05:43,759
coding

00:05:40,240 --> 00:05:45,840
uh so things happen right uh but that's

00:05:43,759 --> 00:05:48,080
prey to the demo god so things are going

00:05:45,840 --> 00:05:48,080
well

00:05:48,320 --> 00:05:52,639
let's go ahead and jump over so here i

00:05:51,840 --> 00:05:55,919
just have a

00:05:52,639 --> 00:05:59,360
very very simple shell application

00:05:55,919 --> 00:06:02,639
running on localhost very simple

00:05:59,360 --> 00:06:07,199
i've actually spun it up here so this

00:06:02,639 --> 00:06:08,960
yarn started

00:06:07,199 --> 00:06:11,199
would have helped if i got that going

00:06:08,960 --> 00:06:15,120
before talking

00:06:11,199 --> 00:06:17,280
but you know it's going to do its thing

00:06:15,120 --> 00:06:18,400
and showing off the code base i have my

00:06:17,280 --> 00:06:20,000
app module

00:06:18,400 --> 00:06:22,080
i brought in a couple things already

00:06:20,000 --> 00:06:23,520
from angularfire just to save a little

00:06:22,080 --> 00:06:25,840
bit of time

00:06:23,520 --> 00:06:27,600
um but i this is the main thing right i

00:06:25,840 --> 00:06:28,400
brought in the angularfire module i

00:06:27,600 --> 00:06:30,160
initialized

00:06:28,400 --> 00:06:31,680
the application with our firebase

00:06:30,160 --> 00:06:33,840
credentials

00:06:31,680 --> 00:06:36,080
uh let's go ahead and see if that's now

00:06:33,840 --> 00:06:38,000
running let's reload this

00:06:36,080 --> 00:06:39,280
all right looks good um i brought in a

00:06:38,000 --> 00:06:42,479
couple other things this is the

00:06:39,280 --> 00:06:45,680
sample application i used to work on

00:06:42,479 --> 00:06:48,560
angularfire um i have a test of the

00:06:45,680 --> 00:06:50,720
database of firestore and i've left

00:06:48,560 --> 00:06:53,759
remote configuration blank

00:06:50,720 --> 00:06:56,160
so i will add analytics to this and then

00:06:53,759 --> 00:06:59,039
we'll play around with the remote config

00:06:56,160 --> 00:07:00,240
so adding analytics i first brought in

00:06:59,039 --> 00:07:02,800
the angular fire

00:07:00,240 --> 00:07:03,680
analytics module right this is going to

00:07:02,800 --> 00:07:06,800
be the

00:07:03,680 --> 00:07:10,000
angularfire wrapper for you know

00:07:06,800 --> 00:07:13,120
interacting with firebase analytics uh

00:07:10,000 --> 00:07:17,199
we now have a number of services so

00:07:13,120 --> 00:07:19,360
namely the screen tracking service

00:07:17,199 --> 00:07:20,560
by simply including angularfire module

00:07:19,360 --> 00:07:23,599
initializing

00:07:20,560 --> 00:07:26,479
bringing in unifier analytics and now

00:07:23,599 --> 00:07:30,160
the screen tracking service

00:07:26,479 --> 00:07:33,520
our application will lazy load

00:07:30,160 --> 00:07:34,000
gtag and it will hook into the angular

00:07:33,520 --> 00:07:36,080
router

00:07:34,000 --> 00:07:38,560
listen to the events and start

00:07:36,080 --> 00:07:43,120
transmitting those back to firebase

00:07:38,560 --> 00:07:44,639
we also have a user tracking service

00:07:43,120 --> 00:07:47,840
so if you're using firebase

00:07:44,639 --> 00:07:51,360
authentication whenever a user logs in

00:07:47,840 --> 00:07:55,840
it'll actually start logging their uuid

00:07:51,360 --> 00:07:55,840
um into google analytics

00:07:56,160 --> 00:08:02,160
so reload that there we go

00:07:59,199 --> 00:08:03,280
and now let's show you a little bit what

00:08:02,160 --> 00:08:06,160
the analytics

00:08:03,280 --> 00:08:07,919
experience looks like so since it takes

00:08:06,160 --> 00:08:09,440
a while to stream the data in i actually

00:08:07,919 --> 00:08:10,160
grab one of my other applications that

00:08:09,440 --> 00:08:12,479
has had

00:08:10,160 --> 00:08:14,879
data streaming in here for a while uh

00:08:12,479 --> 00:08:16,800
this is on snapshot this is uh

00:08:14,879 --> 00:08:19,120
the the application i built for the code

00:08:16,800 --> 00:08:21,440
labs at last in g-con

00:08:19,120 --> 00:08:23,199
and i actually updated it and brought in

00:08:21,440 --> 00:08:24,879
these new modules

00:08:23,199 --> 00:08:26,960
so here's the google analytics

00:08:24,879 --> 00:08:27,840
experience what we see here we actually

00:08:26,960 --> 00:08:29,919
have

00:08:27,840 --> 00:08:32,640
a number of events we have users logging

00:08:29,919 --> 00:08:35,440
into the system

00:08:32,640 --> 00:08:36,240
and we can filter on some of the

00:08:35,440 --> 00:08:40,800
parameters

00:08:36,240 --> 00:08:44,000
here and of course the console throws

00:08:40,800 --> 00:08:45,440
there we go uh we can actually see i'm

00:08:44,000 --> 00:08:47,760
automatically logging the

00:08:45,440 --> 00:08:49,600
the primary outlet here so i'm actually

00:08:47,760 --> 00:08:52,880
outlet tracking so if you have

00:08:49,600 --> 00:08:54,399
multiple outlets on the page uh when you

00:08:52,880 --> 00:08:56,160
render things in them you'll actually

00:08:54,399 --> 00:08:57,279
get those transmitted and you can

00:08:56,160 --> 00:08:59,680
actually see the screen

00:08:57,279 --> 00:09:00,800
class as well as the screen name getting

00:08:59,680 --> 00:09:02,959
transmitted

00:09:00,800 --> 00:09:05,839
so you can see this is actually based

00:09:02,959 --> 00:09:08,160
off the the route name

00:09:05,839 --> 00:09:09,519
and this is actually the the module

00:09:08,160 --> 00:09:11,760
getting loaded

00:09:09,519 --> 00:09:12,959
into the route so you can see where your

00:09:11,760 --> 00:09:14,720
usage is

00:09:12,959 --> 00:09:16,399
uh there's a lot of really cool data in

00:09:14,720 --> 00:09:19,120
here um

00:09:16,399 --> 00:09:19,920
and you can filter down down on things

00:09:19,120 --> 00:09:22,880
right

00:09:19,920 --> 00:09:24,080
you can filter by platform audiences

00:09:22,880 --> 00:09:26,480
stuff like that

00:09:24,080 --> 00:09:27,120
but this really isn't a google analytics

00:09:26,480 --> 00:09:29,519
lesson

00:09:27,120 --> 00:09:31,519
i just wanted to show you that by just

00:09:29,519 --> 00:09:33,680
adding those modules we're getting some

00:09:31,519 --> 00:09:37,360
really cool integrations

00:09:33,680 --> 00:09:40,160
with the angular router here and

00:09:37,360 --> 00:09:40,720
it's developed in such a way too that

00:09:40,160 --> 00:09:42,720
when you're

00:09:40,720 --> 00:09:43,920
in production mode you're still going to

00:09:42,720 --> 00:09:47,360
get really good naming

00:09:43,920 --> 00:09:49,680
and stuff like that uh whereas you know

00:09:47,360 --> 00:09:51,200
that's that's a hard problem because

00:09:49,680 --> 00:09:54,399
when you deploy to production mode

00:09:51,200 --> 00:09:54,399
things get angled a lot

00:09:55,519 --> 00:10:01,920
so we also have performance monitoring

00:09:58,560 --> 00:10:04,560
so by simply bringing in

00:10:01,920 --> 00:10:05,839
angular fire performance module we then

00:10:04,560 --> 00:10:09,120
get statistics

00:10:05,839 --> 00:10:11,120
on our performance of our application so

00:10:09,120 --> 00:10:12,720
we're going to get all network requests

00:10:11,120 --> 00:10:15,760
logged by default

00:10:12,720 --> 00:10:17,279
um first contentful paint stuff like

00:10:15,760 --> 00:10:18,560
that so we can actually dive in on

00:10:17,279 --> 00:10:21,440
traces

00:10:18,560 --> 00:10:23,680
i can see that you know localhost is

00:10:21,440 --> 00:10:25,440
performing a little bit faster than

00:10:23,680 --> 00:10:27,200
the production site so i should probably

00:10:25,440 --> 00:10:29,600
figure out why that is

00:10:27,200 --> 00:10:31,360
um and then i have a number of traces

00:10:29,600 --> 00:10:32,880
and i'll touch on traces

00:10:31,360 --> 00:10:36,560
in a second and show you how to put a

00:10:32,880 --> 00:10:38,560
trace into remote configuration

00:10:36,560 --> 00:10:41,440
finally i can look at the network tab i

00:10:38,560 --> 00:10:43,600
can see all the apis getting called

00:10:41,440 --> 00:10:46,480
by default is based off domain name i

00:10:43,600 --> 00:10:49,200
can actually create custom url patterns

00:10:46,480 --> 00:10:50,720
uh to look at that further but i can go

00:10:49,200 --> 00:10:53,600
ahead and jump in

00:10:50,720 --> 00:10:54,399
look at how often you know google tag

00:10:53,600 --> 00:10:56,240
manager

00:10:54,399 --> 00:11:00,320
how quickly the response time is

00:10:56,240 --> 00:11:02,240
payloads stuff like that

00:11:00,320 --> 00:11:04,640
great thing about all this data is if

00:11:02,240 --> 00:11:08,000
there's something here in the console

00:11:04,640 --> 00:11:09,600
that we don't uh provide for you

00:11:08,000 --> 00:11:11,120
all of this you can pipe it all to

00:11:09,600 --> 00:11:13,920
bigquery

00:11:11,120 --> 00:11:16,079
and do more advanced querying so that's

00:11:13,920 --> 00:11:18,160
that console experience

00:11:16,079 --> 00:11:19,760
now let's look at remote configuration

00:11:18,160 --> 00:11:22,640
so a remote configuration

00:11:19,760 --> 00:11:23,920
is a highly scalable service for

00:11:22,640 --> 00:11:27,279
basically delivering

00:11:23,920 --> 00:11:30,560
json payloads with variants

00:11:27,279 --> 00:11:34,480
two clients right so i have yo

00:11:30,560 --> 00:11:36,720
here what um i can update that i can add

00:11:34,480 --> 00:11:36,720
more

00:11:40,839 --> 00:11:45,600
parameters

00:11:43,760 --> 00:11:47,200
right and the idea here is this is

00:11:45,600 --> 00:11:50,880
configuration

00:11:47,200 --> 00:11:50,880
or i can say background color

00:11:53,120 --> 00:11:56,560
right and i could consume this somewhere

00:11:55,120 --> 00:12:00,079
in my application

00:11:56,560 --> 00:12:03,519
i could then put variants on this

00:12:00,079 --> 00:12:04,160
right i could you know vary by country

00:12:03,519 --> 00:12:06,480
region

00:12:04,160 --> 00:12:08,320
i could vary it by audiences which is a

00:12:06,480 --> 00:12:11,440
google analytics audience

00:12:08,320 --> 00:12:15,360
and a lot of other powerful things um

00:12:11,440 --> 00:12:15,360
let's go ahead and publish these changes

00:12:16,480 --> 00:12:22,880
let's go ahead and play around with

00:12:20,000 --> 00:12:23,440
the remote config so here i have a

00:12:22,880 --> 00:12:25,040
module

00:12:23,440 --> 00:12:26,560
just remote config module since i'm

00:12:25,040 --> 00:12:28,639
playing around with it

00:12:26,560 --> 00:12:29,680
and i brought in angularfire remote

00:12:28,639 --> 00:12:31,760
config

00:12:29,680 --> 00:12:33,600
via dependency injection and this is one

00:12:31,760 --> 00:12:34,560
of the best things that angularfire

00:12:33,600 --> 00:12:37,200
gives you

00:12:34,560 --> 00:12:38,880
um is is it's going to actually have

00:12:37,200 --> 00:12:39,279
dependency injection things are going to

00:12:38,880 --> 00:12:43,360
work

00:12:39,279 --> 00:12:43,360
a lot better in an angular sense

00:12:43,440 --> 00:12:46,639
so i can go here and i can go remote

00:12:45,519 --> 00:12:50,800
config

00:12:46,639 --> 00:12:53,519
drop changes and i can async type that

00:12:50,800 --> 00:12:55,440
and i can do json because remote config

00:12:53,519 --> 00:12:58,240
changes

00:12:55,440 --> 00:12:58,880
if you see the autocomplete here is

00:12:58,240 --> 00:13:03,200
actually an

00:12:58,880 --> 00:13:03,200
observable of remote config parameters

00:13:04,000 --> 00:13:07,120
so now when i save that to go back to my

00:13:06,000 --> 00:13:10,560
application

00:13:07,120 --> 00:13:13,120
i can actually see we have this

00:13:10,560 --> 00:13:14,320
here we're actually fetching the the

00:13:13,120 --> 00:13:17,200
value what

00:13:14,320 --> 00:13:18,880
key yo you know what time it fetched i

00:13:17,200 --> 00:13:21,200
refresh it we got that

00:13:18,880 --> 00:13:22,880
now you notice i refresh the page and

00:13:21,200 --> 00:13:25,680
i'm not getting new values

00:13:22,880 --> 00:13:27,920
right this is a highly scalable service

00:13:25,680 --> 00:13:32,160
and actually has a lot of caching

00:13:27,920 --> 00:13:32,160
um if you bear with me for a second

00:13:32,880 --> 00:13:35,839
i'm going to reset

00:13:36,560 --> 00:13:42,480
all of this and i fast forward in time a

00:13:40,720 --> 00:13:44,000
little bit

00:13:42,480 --> 00:13:47,040
here i'm actually constructing a new

00:13:44,000 --> 00:13:49,680
observable and i'm actually tracing it

00:13:47,040 --> 00:13:51,279
so now i'll actually be able to tell how

00:13:49,680 --> 00:13:52,560
quick it takes to get a response back

00:13:51,279 --> 00:13:54,560
from the server

00:13:52,560 --> 00:13:55,839
and then further what i've done in my

00:13:54,560 --> 00:13:57,680
app module

00:13:55,839 --> 00:13:59,760
is i jumped ahead a little bit and added

00:13:57,680 --> 00:14:01,120
a little bit more configuration

00:13:59,760 --> 00:14:03,440
right these are all the dependency

00:14:01,120 --> 00:14:06,800
injection tokens from angularfire

00:14:03,440 --> 00:14:08,800
and these allow me to configure things

00:14:06,800 --> 00:14:10,079
namely remote config right i can

00:14:08,800 --> 00:14:13,120
actually tell it

00:14:10,079 --> 00:14:15,040
that if i'm in dev mode you know reduce

00:14:13,120 --> 00:14:16,880
the caching time

00:14:15,040 --> 00:14:18,240
and that's going to make it so that you

00:14:16,880 --> 00:14:22,000
know i can see those

00:14:18,240 --> 00:14:23,839
much much faster in local development um

00:14:22,000 --> 00:14:26,000
and then let's you know our production

00:14:23,839 --> 00:14:29,279
version be more scalable

00:14:26,000 --> 00:14:29,279
so now when i refresh this

00:14:29,760 --> 00:14:32,800
i'm gonna have to restart

00:14:38,399 --> 00:14:48,079
we should now see new changes

00:14:45,600 --> 00:14:49,040
this is one of those live demo risks

00:14:48,079 --> 00:14:53,279
right

00:14:49,040 --> 00:14:53,279
well that didn't work let's move on

00:14:54,560 --> 00:14:59,839
uh so

00:15:00,959 --> 00:15:03,440
back here

00:15:04,000 --> 00:15:07,279
so one of the things that i've actually

00:15:05,680 --> 00:15:09,920
uh done here

00:15:07,279 --> 00:15:12,560
is this is it up up on the web i'm

00:15:09,920 --> 00:15:15,920
actually hosting this on firebase

00:15:12,560 --> 00:15:19,360
and there's a little trick here

00:15:15,920 --> 00:15:22,320
if i actually go and

00:15:19,360 --> 00:15:22,320
i curl this

00:15:24,639 --> 00:15:29,360
you can actually see that it has a bunch

00:15:27,199 --> 00:15:32,320
of data on it the image is there

00:15:29,360 --> 00:15:32,720
um we actually have our database content

00:15:32,320 --> 00:15:34,880
so

00:15:32,720 --> 00:15:35,920
this is actually hosted on cloud

00:15:34,880 --> 00:15:38,079
functions

00:15:35,920 --> 00:15:39,360
uh google cloud functions and firebase

00:15:38,079 --> 00:15:43,120
hosting

00:15:39,360 --> 00:15:46,000
and this is using our new um

00:15:43,120 --> 00:15:47,199
deploy script so now when we do ng

00:15:46,000 --> 00:15:50,079
deploy

00:15:47,199 --> 00:15:51,519
um this will actually if it's an angular

00:15:50,079 --> 00:15:53,839
universal application

00:15:51,519 --> 00:15:54,720
spin up the resources on cloud functions

00:15:53,839 --> 00:15:56,800
as well

00:15:54,720 --> 00:15:59,040
and we also have a cool option of

00:15:56,800 --> 00:16:01,759
ng-deploy preview where it'll actually

00:15:59,040 --> 00:16:03,519
spin up the local emulators um so you

00:16:01,759 --> 00:16:05,360
can actually see the application

00:16:03,519 --> 00:16:07,759
that you're about to deploy before you

00:16:05,360 --> 00:16:10,000
deploy it

00:16:07,759 --> 00:16:10,800
yeah so that's a little bit of what's

00:16:10,000 --> 00:16:14,880
new

00:16:10,800 --> 00:16:14,880
uh let me jump back to the slides here

00:16:17,440 --> 00:16:21,199
so i i mentioned the lightweight lazy

00:16:19,839 --> 00:16:23,680
loaded modules

00:16:21,199 --> 00:16:25,519
um it didn't seem like i had to juggle

00:16:23,680 --> 00:16:29,600
much right

00:16:25,519 --> 00:16:31,920
basically the we handled the lazy

00:16:29,600 --> 00:16:32,959
loading of the firebase js sdk behind

00:16:31,920 --> 00:16:35,120
the scenes

00:16:32,959 --> 00:16:36,800
if you use the firebase js sdk before

00:16:35,120 --> 00:16:39,360
one of its problems

00:16:36,800 --> 00:16:40,079
is that it's a rather large kind of

00:16:39,360 --> 00:16:41,920
legacy

00:16:40,079 --> 00:16:43,199
styled library this is one of the things

00:16:41,920 --> 00:16:44,160
that we're working on right we're

00:16:43,199 --> 00:16:47,199
working to make it

00:16:44,160 --> 00:16:49,680
more modular and more tree shakeable

00:16:47,199 --> 00:16:51,120
but it's sort of in that prototypical

00:16:49,680 --> 00:16:52,639
inheritance pattern

00:16:51,120 --> 00:16:54,639
um so when you pull and say

00:16:52,639 --> 00:16:57,360
authentication you're getting

00:16:54,639 --> 00:16:59,279
all the different sign in methods so to

00:16:57,360 --> 00:17:01,680
make a better experience for your end

00:16:59,279 --> 00:17:03,920
users we're actually lazy loading that

00:17:01,680 --> 00:17:05,039
so we're using three technologies to

00:17:03,920 --> 00:17:06,959
really achieve this

00:17:05,039 --> 00:17:09,360
first and foremost we're doing dynamic

00:17:06,959 --> 00:17:12,079
importing of those sdks

00:17:09,360 --> 00:17:12,880
uh we're then isolating the side effects

00:17:12,079 --> 00:17:15,600
by running that

00:17:12,880 --> 00:17:17,520
outside of the angular zone and then we

00:17:15,600 --> 00:17:20,240
have an es proxy which then

00:17:17,520 --> 00:17:21,199
handles all the promises and the promise

00:17:20,240 --> 00:17:23,280
chains

00:17:21,199 --> 00:17:24,480
and will actually jump back into the

00:17:23,280 --> 00:17:26,400
angular zone

00:17:24,480 --> 00:17:27,839
when there's something to inform the

00:17:26,400 --> 00:17:29,600
user about

00:17:27,839 --> 00:17:32,000
so i'll actually show you a little bit

00:17:29,600 --> 00:17:34,799
of a simplified version

00:17:32,000 --> 00:17:36,720
of the proxy itself so first we're

00:17:34,799 --> 00:17:38,799
creating an es proxy

00:17:36,720 --> 00:17:40,799
uh and we have this git which is going

00:17:38,799 --> 00:17:44,160
to allow us to get properties

00:17:40,799 --> 00:17:46,480
or functions off of it so first we jump

00:17:44,160 --> 00:17:48,480
outside the angular zone

00:17:46,480 --> 00:17:50,160
then i take whatever sdk we're

00:17:48,480 --> 00:17:52,640
dynamically importing

00:17:50,160 --> 00:17:54,480
and i actually look to see if it has a

00:17:52,640 --> 00:17:57,440
property

00:17:54,480 --> 00:17:58,880
that we're asking for already on the sdk

00:17:57,440 --> 00:18:02,960
so this would be something like

00:17:58,880 --> 00:18:05,039
you know dot then or you know dot catch

00:18:02,960 --> 00:18:06,640
something around promises or that

00:18:05,039 --> 00:18:08,880
dynamic import

00:18:06,640 --> 00:18:10,720
um so if you just want to get it as a

00:18:08,880 --> 00:18:13,600
promise and you call dot then

00:18:10,720 --> 00:18:14,559
or you call await then this here will

00:18:13,600 --> 00:18:18,799
just return

00:18:14,559 --> 00:18:21,120
the sdk import as a promise

00:18:18,799 --> 00:18:22,480
next at the very bottom we have this

00:18:21,120 --> 00:18:24,400
proxy object

00:18:22,480 --> 00:18:25,520
so here we're proxying just an empty

00:18:24,400 --> 00:18:28,480
function

00:18:25,520 --> 00:18:30,480
because we already have the sdk import

00:18:28,480 --> 00:18:32,000
so the empty function allows us to get

00:18:30,480 --> 00:18:35,120
the apply method

00:18:32,000 --> 00:18:36,640
so again if there's a get and there's a

00:18:35,120 --> 00:18:40,160
property on there say it's then

00:18:36,640 --> 00:18:41,760
say it's catch to string what be it

00:18:40,160 --> 00:18:43,919
and it's already on the promise just

00:18:41,760 --> 00:18:45,919
return it otherwise

00:18:43,919 --> 00:18:47,520
we're going to use apply and we get

00:18:45,919 --> 00:18:48,480
apply because we're passing it a

00:18:47,520 --> 00:18:50,000
function

00:18:48,480 --> 00:18:51,600
and that is going to be any function

00:18:50,000 --> 00:18:55,600
call right

00:18:51,600 --> 00:18:57,360
so if it's a function call on the sdk

00:18:55,600 --> 00:18:59,120
say you're dynamically importing

00:18:57,360 --> 00:19:02,320
firebase off and then you call

00:18:59,120 --> 00:19:04,080
off dot sign in

00:19:02,320 --> 00:19:06,000
then what we're going to do is jump onto

00:19:04,080 --> 00:19:07,679
that promise we're going to resolve the

00:19:06,000 --> 00:19:10,000
promise

00:19:07,679 --> 00:19:11,600
and then we're going to take whatever

00:19:10,000 --> 00:19:14,240
property you ask for or

00:19:11,600 --> 00:19:16,080
function and once the promise resolves

00:19:14,240 --> 00:19:18,400
return its args

00:19:16,080 --> 00:19:21,760
and what this effectively does for us is

00:19:18,400 --> 00:19:25,360
all the sdk methods are now promisified

00:19:21,760 --> 00:19:27,840
and all of the dynamic importing

00:19:25,360 --> 00:19:29,919
is hidden away from the user the real

00:19:27,840 --> 00:19:31,520
magic here is that promise right so we

00:19:29,919 --> 00:19:33,679
take an observable

00:19:31,520 --> 00:19:34,799
of the sdk import we turn it to a

00:19:33,679 --> 00:19:37,200
promise

00:19:34,799 --> 00:19:39,760
and then if it's a function we just bind

00:19:37,200 --> 00:19:43,280
it and return it

00:19:39,760 --> 00:19:46,240
if it's a promise then what we do is we

00:19:43,280 --> 00:19:47,039
resolve it then we jump back into the

00:19:46,240 --> 00:19:50,720
zone

00:19:47,039 --> 00:19:51,280
and run it and if it's just a property

00:19:50,720 --> 00:19:54,480
we

00:19:51,280 --> 00:19:55,520
jump back into the angular zone and just

00:19:54,480 --> 00:19:58,559
return

00:19:55,520 --> 00:20:00,799
that property so this little proxy

00:19:58,559 --> 00:20:02,320
it's very confusing uh it took me a

00:20:00,799 --> 00:20:04,720
while to get this right

00:20:02,320 --> 00:20:06,080
but yes proxies are really powerful i

00:20:04,720 --> 00:20:08,320
have a lot of foot guns too

00:20:06,080 --> 00:20:10,320
but basically what i've done here is

00:20:08,320 --> 00:20:12,559
taking the dynamic import

00:20:10,320 --> 00:20:13,440
and hiding it away from you the

00:20:12,559 --> 00:20:15,280
developer

00:20:13,440 --> 00:20:17,120
you don't have to worry about any of it

00:20:15,280 --> 00:20:18,000
so how does this look right consuming

00:20:17,120 --> 00:20:19,919
this

00:20:18,000 --> 00:20:22,559
so this is how it looks you you just

00:20:19,919 --> 00:20:24,720
import angular fire authentication

00:20:22,559 --> 00:20:26,480
um and we have an async login function

00:20:24,720 --> 00:20:27,840
that just calls this auth sign in with

00:20:26,480 --> 00:20:30,240
pop-up

00:20:27,840 --> 00:20:31,919
and we have a log out this off sign out

00:20:30,240 --> 00:20:32,480
if it was already a promise it's still a

00:20:31,919 --> 00:20:35,520
promise

00:20:32,480 --> 00:20:37,120
right uh so it makes the api

00:20:35,520 --> 00:20:39,200
so that you don't have to worry about

00:20:37,120 --> 00:20:42,400
any of this lazy loading how things are

00:20:39,200 --> 00:20:45,200
loading behind the scenes any of that

00:20:42,400 --> 00:20:46,400
and you know whenever you call one of

00:20:45,200 --> 00:20:49,280
those methods it's going to start

00:20:46,400 --> 00:20:50,400
importing that sdk so it is really truly

00:20:49,280 --> 00:20:51,919
lazy

00:20:50,400 --> 00:20:53,840
the same goes with performance

00:20:51,919 --> 00:20:56,640
monitoring and analytics right

00:20:53,840 --> 00:20:58,320
so you're not actually going to have the

00:20:56,640 --> 00:21:00,080
analytics library

00:20:58,320 --> 00:21:02,559
interfering with your time to first

00:21:00,080 --> 00:21:04,960
paint or your zone stability

00:21:02,559 --> 00:21:06,640
that's going to go off to the side and

00:21:04,960 --> 00:21:07,200
once that's loaded it's going to start

00:21:06,640 --> 00:21:09,760
sending

00:21:07,200 --> 00:21:12,320
data to google analytics but now google

00:21:09,760 --> 00:21:16,159
analytics is completely asynchronous

00:21:12,320 --> 00:21:19,520
and off of that critical path

00:21:16,159 --> 00:21:21,360
so i want to give some shout outs

00:21:19,520 --> 00:21:23,120
uh to a couple of things that i didn't

00:21:21,360 --> 00:21:25,440
have much time to talk about

00:21:23,120 --> 00:21:28,159
uh the new version of typescript gave us

00:21:25,440 --> 00:21:30,159
a lot of these capabilities

00:21:28,159 --> 00:21:32,559
we're now using ng packager which is

00:21:30,159 --> 00:21:33,520
solving our angular package format stuff

00:21:32,559 --> 00:21:36,159
for us

00:21:33,520 --> 00:21:38,880
it's really great i don't have to have a

00:21:36,159 --> 00:21:41,120
very very complicated build script

00:21:38,880 --> 00:21:42,640
uh and we have provided in any what is

00:21:41,120 --> 00:21:45,360
provided in any

00:21:42,640 --> 00:21:47,280
so basically uh this is an isolated

00:21:45,360 --> 00:21:49,919
service for every injector so whenever

00:21:47,280 --> 00:21:52,559
you pull in one of the firebase sdks

00:21:49,919 --> 00:21:53,360
it's isolated from the rest and you

00:21:52,559 --> 00:21:56,400
don't have to

00:21:53,360 --> 00:21:58,000
worry about conflicts this is allowing

00:21:56,400 --> 00:22:00,320
for a cleaner separation of concerns

00:21:58,000 --> 00:22:02,880
between modules and sdks

00:22:00,320 --> 00:22:04,159
for us personally the thing that it

00:22:02,880 --> 00:22:06,720
really brings to the table

00:22:04,159 --> 00:22:08,320
is say you're using google analytics or

00:22:06,720 --> 00:22:11,440
performance monitoring

00:22:08,320 --> 00:22:13,520
and you're an sdk or you're an npm

00:22:11,440 --> 00:22:15,919
module this is a common thing

00:22:13,520 --> 00:22:17,120
this really makes multi-tenancy in

00:22:15,919 --> 00:22:19,520
angular fire

00:22:17,120 --> 00:22:21,200
a lot cleaner um if you want to learn

00:22:19,520 --> 00:22:23,360
more about provided in any

00:22:21,200 --> 00:22:24,640
uh christian kohler actually has a

00:22:23,360 --> 00:22:26,880
really good article on this

00:22:24,640 --> 00:22:29,120
i'd recommend checking it out goes into

00:22:26,880 --> 00:22:33,919
great detail and compares it to

00:22:29,120 --> 00:22:36,400
the other types of dependency injection

00:22:33,919 --> 00:22:38,400
uh just recently the firebase console

00:22:36,400 --> 00:22:40,880
also migrated to angular 9 so

00:22:38,400 --> 00:22:42,880
huge shout out today your team uh we're

00:22:40,880 --> 00:22:44,480
benefiting from lazy loading uh some

00:22:42,880 --> 00:22:46,960
great improvements there

00:22:44,480 --> 00:22:48,320
and yeah the console's a little big the

00:22:46,960 --> 00:22:50,480
packages are a little big

00:22:48,320 --> 00:22:52,080
but uh there's a lot more work to do to

00:22:50,480 --> 00:22:53,919
slim things down

00:22:52,080 --> 00:22:55,520
but we're confident that we can do that

00:22:53,919 --> 00:22:58,720
work now that we're on

00:22:55,520 --> 00:22:59,280
angular and you know that that team has

00:22:58,720 --> 00:23:01,120
our back

00:22:59,280 --> 00:23:02,720
and it's giving us the great tools that

00:23:01,120 --> 00:23:05,600
we need to really

00:23:02,720 --> 00:23:06,240
increase the performance of the console

00:23:05,600 --> 00:23:07,919
and finally

00:23:06,240 --> 00:23:10,320
huge shout out to the angular community

00:23:07,919 --> 00:23:12,480
right and the angularfire community

00:23:10,320 --> 00:23:14,640
um we have a lot of awesome contributors

00:23:12,480 --> 00:23:16,159
i think we're at 120 contributors now

00:23:14,640 --> 00:23:19,280
for angularfire

00:23:16,159 --> 00:23:20,320
and you know everyone in that community

00:23:19,280 --> 00:23:23,360
makes my

00:23:20,320 --> 00:23:25,840
life a lot easier right

00:23:23,360 --> 00:23:27,039
um so you know if you're interested in

00:23:25,840 --> 00:23:30,320
these new capabilities

00:23:27,039 --> 00:23:31,600
uh go ahead and ng add angularfire uh

00:23:30,320 --> 00:23:33,360
that'll prompt you through

00:23:31,600 --> 00:23:35,280
set things up if you're a universal

00:23:33,360 --> 00:23:37,360
application it'll give you those

00:23:35,280 --> 00:23:40,320
deployment schematics and

00:23:37,360 --> 00:23:41,279
you know some really cool things uh

00:23:40,320 --> 00:23:43,919
thank you very much

00:23:41,279 --> 00:23:44,320
uh it was it was great chatting with you

00:23:43,919 --> 00:23:46,720
today

00:23:44,320 --> 00:23:48,159
um you know i wish that we were all in

00:23:46,720 --> 00:23:50,080
salt lake city and

00:23:48,159 --> 00:23:51,600
i could you know interact with people

00:23:50,080 --> 00:23:53,840
face to face i could

00:23:51,600 --> 00:23:54,720
you know go grab drinks with some of our

00:23:53,840 --> 00:23:57,279
contributors

00:23:54,720 --> 00:23:58,720
but um unfortunately it's stressful

00:23:57,279 --> 00:24:01,840
times and

00:23:58,720 --> 00:24:04,159
hopefully everyone here is healthy and

00:24:01,840 --> 00:24:05,840
you know has stable jobs and it's going

00:24:04,159 --> 00:24:19,840
to weather this storm

00:24:05,840 --> 00:24:19,840
but thanks for having me

00:24:20,799 --> 00:24:22,880

YouTube URL: https://www.youtube.com/watch?v=aMicMiHMrXA


