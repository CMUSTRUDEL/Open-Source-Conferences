Title: Angular Universal & Our New Prerenderer | Wagner Maciel | ng-conf: Hardwired
Publication date: 2020-06-30
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

In this talk we discuss and demonstrate the basics of Angular Universal, as well as the new features like prerendering and hot code reload, which were released in version 9

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:18,050
[Applause]

00:00:05,920 --> 00:00:21,570
[Music]

00:00:18,050 --> 00:00:23,220
and welcome to this session of ng-conf

00:00:21,570 --> 00:00:25,680
today we're gonna be talking about

00:00:23,220 --> 00:00:27,300
angular Universal in particular we're

00:00:25,680 --> 00:00:28,980
gonna be going over the basics as well

00:00:27,300 --> 00:00:32,369
as some of the latest features released

00:00:28,980 --> 00:00:34,140
in version 9 so a little bit about

00:00:32,369 --> 00:00:37,290
myself I graduated from New York

00:00:34,140 --> 00:00:39,420
University this past May I moved from

00:00:37,290 --> 00:00:41,699
New York to California in September to

00:00:39,420 --> 00:00:44,400
join Google and I joined the angular

00:00:41,699 --> 00:00:46,800
team only this past November so I'm

00:00:44,400 --> 00:00:49,860
relatively new to both software

00:00:46,800 --> 00:00:51,750
development and to this community but

00:00:49,860 --> 00:00:53,460
I'm so thankful for this community it's

00:00:51,750 --> 00:00:58,979
very apparent what a great community it

00:00:53,460 --> 00:01:01,409
is so what is angular Universal and you

00:00:58,979 --> 00:01:02,940
are universal at its core is a toolkit

00:01:01,409 --> 00:01:05,610
that allows you to do server-side

00:01:02,940 --> 00:01:07,799
rendering and pre-rendering for your

00:01:05,610 --> 00:01:09,690
angular apps we're gonna discuss

00:01:07,799 --> 00:01:11,670
pre-rendering later as it's one of the

00:01:09,690 --> 00:01:13,650
new features released in version 9

00:01:11,670 --> 00:01:15,330
but server-side rendering has been a

00:01:13,650 --> 00:01:18,630
staple of this project from the

00:01:15,330 --> 00:01:21,510
beginning so why use server-side

00:01:18,630 --> 00:01:23,190
rendering generally there are three main

00:01:21,510 --> 00:01:25,920
reasons why you'd want to use

00:01:23,190 --> 00:01:27,930
server-side rendering on your app the

00:01:25,920 --> 00:01:31,530
first being to show the first page

00:01:27,930 --> 00:01:33,870
quickly eBay actually found that a 100

00:01:31,530 --> 00:01:37,140
millisecond improvement in their search

00:01:33,870 --> 00:01:40,350
page load time led to 0.5% increase in

00:01:37,140 --> 00:01:42,690
their ads car count which is huge and us

00:01:40,350 --> 00:01:45,630
developers we often tend to forget about

00:01:42,690 --> 00:01:48,120
the milliseconds or when our users

00:01:45,630 --> 00:01:51,480
certainly don't it's critical to user

00:01:48,120 --> 00:01:53,310
engagement the next reason why you'd

00:01:51,480 --> 00:01:55,350
want to create a universal version of

00:01:53,310 --> 00:01:58,590
your app is to improve performance for

00:01:55,350 --> 00:02:01,140
weaker devices if I'm doing a lot of

00:01:58,590 --> 00:02:04,050
scripting in the browser on the client

00:02:01,140 --> 00:02:06,600
that I'm relying heavily on my end users

00:02:04,050 --> 00:02:09,869
devices so rendering an app in the

00:02:06,600 --> 00:02:12,540
browser is gonna put a more of a strain

00:02:09,869 --> 00:02:14,459
on their device and all these devices

00:02:12,540 --> 00:02:16,530
aren't always reliable they're they

00:02:14,459 --> 00:02:19,530
could be low powered or or mobile

00:02:16,530 --> 00:02:22,799
devices so rendering on the server helps

00:02:19,530 --> 00:02:24,420
to alleviate some of that string the

00:02:22,799 --> 00:02:26,069
last reason why you'd run it and want to

00:02:24,420 --> 00:02:29,220
use server-side rendering is to

00:02:26,069 --> 00:02:30,480
facilitate web crawlers Google Bing

00:02:29,220 --> 00:02:32,640
Facebook

00:02:30,480 --> 00:02:34,440
all these companies use web crawlers to

00:02:32,640 --> 00:02:36,629
understand what the content of your

00:02:34,440 --> 00:02:38,670
application is and then index it and

00:02:36,629 --> 00:02:42,180
make it searchable to the rest of the

00:02:38,670 --> 00:02:44,250
web and if you're doing a lot of

00:02:42,180 --> 00:02:45,659
rendering client-side it can be

00:02:44,250 --> 00:02:47,629
difficult for these web crawlers to

00:02:45,659 --> 00:02:50,129
understand what is going on in your app

00:02:47,629 --> 00:02:51,599
versus if you send over a static page

00:02:50,129 --> 00:02:55,650
which is what server-side rendering

00:02:51,599 --> 00:02:58,290
allows you to do now let's hop into a

00:02:55,650 --> 00:03:00,900
demo this is all better shown than

00:02:58,290 --> 00:03:02,610
explained we're gonna happen to a demo

00:03:00,900 --> 00:03:08,910
that I expose that shows us the basics

00:03:02,610 --> 00:03:10,500
of angular Universal oops so I'm gonna

00:03:08,910 --> 00:03:13,049
start off here by just running ng new

00:03:10,500 --> 00:03:15,090
and this is gonna create a brand new

00:03:13,049 --> 00:03:18,030
project I'm going to call it ng

00:03:15,090 --> 00:03:21,060
Universal demo and we don't need angular

00:03:18,030 --> 00:03:22,049
routing and CSS is gonna be just fine

00:03:21,060 --> 00:03:25,829
for this demonstration

00:03:22,049 --> 00:03:27,780
now ng new all it's doing is creating a

00:03:25,829 --> 00:03:30,299
brand new angular app and we're naming

00:03:27,780 --> 00:03:32,549
it ng Universal demo and hopefully using

00:03:30,299 --> 00:03:35,040
this simple app we're gonna be able to

00:03:32,549 --> 00:03:37,430
demonstrate all three of those bullet

00:03:35,040 --> 00:03:39,060
points facilitating web crawlers

00:03:37,430 --> 00:03:41,549
improving performance by reducing

00:03:39,060 --> 00:03:43,410
scripting on the client and also that

00:03:41,549 --> 00:03:45,660
first contentful paint how quickly we

00:03:43,410 --> 00:03:47,280
can show it so we're going to give this

00:03:45,660 --> 00:03:51,540
a second here while it finishes up

00:03:47,280 --> 00:03:54,680
installing my node modules let's just be

00:03:51,540 --> 00:03:54,680
patient here for a minute

00:04:05,860 --> 00:04:11,590
I think this doesn't finish up soon I'll

00:04:07,660 --> 00:04:13,660
just okay all done so now I'll CD into

00:04:11,590 --> 00:04:16,420
my app and first thing I'm going to do

00:04:13,660 --> 00:04:19,750
here is I'm gonna run ng add that ng

00:04:16,420 --> 00:04:20,860
Universal / Express engine let me clear

00:04:19,750 --> 00:04:24,420
this up so it's a little bit more

00:04:20,860 --> 00:04:27,730
apparent and this is gonna install the

00:04:24,420 --> 00:04:29,620
ng universal schematic and basically all

00:04:27,730 --> 00:04:31,720
that means is it's gonna create a couple

00:04:29,620 --> 00:04:35,380
of files and update a couple of other

00:04:31,720 --> 00:04:37,480
files and doing so it's going to set up

00:04:35,380 --> 00:04:41,280
our application for server-side

00:04:37,480 --> 00:04:45,100
rendering as well as pre rendering and

00:04:41,280 --> 00:04:46,900
if you if you had a previous version of

00:04:45,100 --> 00:04:48,850
ng Universal installed you'd run the

00:04:46,900 --> 00:04:52,000
same command but just instead of ad

00:04:48,850 --> 00:04:55,480
you'd write update so ng update at ng

00:04:52,000 --> 00:04:57,310
Universal slash Express engine and

00:04:55,480 --> 00:04:59,320
actually while this installs there's one

00:04:57,310 --> 00:05:03,100
other change I want to make to this app

00:04:59,320 --> 00:05:05,380
and it's in index.html I'm gonna add a

00:05:03,100 --> 00:05:08,140
script here and all the script is going

00:05:05,380 --> 00:05:10,540
to do is log the value of the first

00:05:08,140 --> 00:05:12,940
content pane to the console you can find

00:05:10,540 --> 00:05:15,340
the script that is pulled from web dev

00:05:12,940 --> 00:05:17,130
it's that all it's doing is just logging

00:05:15,340 --> 00:05:20,320
when that first consensual paint shows

00:05:17,130 --> 00:05:22,570
so jumping back to the terminal we see

00:05:20,320 --> 00:05:27,010
that this is done I'm actually I'll

00:05:22,570 --> 00:05:28,570
clear this up and run npm run start to

00:05:27,010 --> 00:05:30,490
startup this is gonna start up a

00:05:28,570 --> 00:05:34,150
client-side rendered version of our app

00:05:30,490 --> 00:05:37,800
and I'm also gonna run npm run build SSR

00:05:34,150 --> 00:05:43,510
let me make this fullscreen for us and

00:05:37,800 --> 00:05:46,360
npm run serve SSR and this is gonna spin

00:05:43,510 --> 00:05:49,720
up the server-side rendered version of

00:05:46,360 --> 00:05:53,290
our app actually it's going to npm run

00:05:49,720 --> 00:05:55,090
build SSR is going to compile our client

00:05:53,290 --> 00:05:57,580
bundle as well as our server bundle and

00:05:55,090 --> 00:06:00,100
then npm run serve SSR is going to use

00:05:57,580 --> 00:06:02,530
those two server-side render our

00:06:00,100 --> 00:06:05,440
application and it looks like our

00:06:02,530 --> 00:06:10,780
client-side version is already done

00:06:05,440 --> 00:06:13,660
compiling i can go to localhost 4200

00:06:10,780 --> 00:06:16,390
here and i'm gonna open up the console

00:06:13,660 --> 00:06:18,520
here in my dev tools so we can take a

00:06:16,390 --> 00:06:19,660
look at that first contentful paint and

00:06:18,520 --> 00:06:23,040
if i navigate so

00:06:19,660 --> 00:06:25,600
host 4,200 we see that it takes up about

00:06:23,040 --> 00:06:27,460
740 milliseconds for the first

00:06:25,600 --> 00:06:30,220
contentful paint the show and on

00:06:27,460 --> 00:06:36,220
subsequent loads it's hanging out at

00:06:30,220 --> 00:06:38,170
around 320 315 and we'll wait for the

00:06:36,220 --> 00:06:40,900
server side rendering vision of our apps

00:06:38,170 --> 00:06:44,730
have finished compiling and starting up

00:06:40,900 --> 00:06:44,730
so that we can juxtapose those two

00:06:45,090 --> 00:06:51,750
shouldn't be much longer here looks like

00:06:47,500 --> 00:06:51,750
we're up to our up to the end

00:06:53,010 --> 00:06:59,190
yeah great so now we'll navigate to

00:06:57,480 --> 00:07:05,110
localhost

00:06:59,190 --> 00:07:07,180
4000 and opening the comments console we

00:07:05,110 --> 00:07:10,270
see that the first one takes only 300

00:07:07,180 --> 00:07:14,940
and then subsequent loads are down to

00:07:10,270 --> 00:07:17,560
about 70 which is substantially less

00:07:14,940 --> 00:07:20,290
significantly less than our client-side

00:07:17,560 --> 00:07:22,840
version the next thing I want to take a

00:07:20,290 --> 00:07:26,140
look at is B if we hop over to the

00:07:22,840 --> 00:07:29,680
performance tab and we click on start

00:07:26,140 --> 00:07:31,840
profiling and reload page well wait a

00:07:29,680 --> 00:07:34,690
second what this is going to show us is

00:07:31,840 --> 00:07:37,330
the amount of scripting going on on the

00:07:34,690 --> 00:07:40,980
browser so here we see client side we

00:07:37,330 --> 00:07:46,290
have 236 milliseconds of scripting

00:07:40,980 --> 00:07:51,640
versus on our server side rendered app

00:07:46,290 --> 00:07:54,240
we run the exact same diagnostic we see

00:07:51,640 --> 00:07:56,650
it's only 90 milliseconds so

00:07:54,240 --> 00:07:58,330
substantially less and remember this is

00:07:56,650 --> 00:08:00,790
such a basic app this is just the app

00:07:58,330 --> 00:08:02,740
that you get from running ng new if you

00:08:00,790 --> 00:08:06,130
have a more complicated site say like a

00:08:02,740 --> 00:08:07,750
blog site or something like that the the

00:08:06,130 --> 00:08:11,770
performance benefits could be way

00:08:07,750 --> 00:08:13,690
greater now the last detail that I want

00:08:11,770 --> 00:08:16,780
to go over from that last bullet point

00:08:13,690 --> 00:08:18,790
facilitating web crawlers while this app

00:08:16,780 --> 00:08:20,380
I'll close these dev tools so we can get

00:08:18,790 --> 00:08:22,660
a better view while this app looks

00:08:20,380 --> 00:08:25,330
totally fine to me and you and we can

00:08:22,660 --> 00:08:28,780
interact with it just fine if I view the

00:08:25,330 --> 00:08:31,570
page source we we see that all we have

00:08:28,780 --> 00:08:32,380
here is a brute and nothing else inside

00:08:31,570 --> 00:08:34,720
of it

00:08:32,380 --> 00:08:36,970
we have the the head information from

00:08:34,720 --> 00:08:39,130
here the script that we added but inside

00:08:36,970 --> 00:08:40,570
of our body we have a proof and nothing

00:08:39,130 --> 00:08:42,669
else and that's because all of the

00:08:40,570 --> 00:08:46,840
content of our application is being

00:08:42,669 --> 00:08:48,280
populated by these scripts so if I look

00:08:46,840 --> 00:08:50,950
over at the page source of our

00:08:48,280 --> 00:08:53,080
server-side rendered app we'll see

00:08:50,950 --> 00:08:55,930
there's much more going on here it is

00:08:53,080 --> 00:08:58,060
way easier for a simple web crawler to

00:08:55,930 --> 00:09:01,360
understand what's going on all of our

00:08:58,060 --> 00:09:03,940
CSS is here and then down here we have

00:09:01,360 --> 00:09:06,280
our HTML we see a brute and then all of

00:09:03,940 --> 00:09:11,110
our content is there we have toolbar or

00:09:06,280 --> 00:09:14,320
banner so on and so forth so that's it

00:09:11,110 --> 00:09:16,870
for the basics of angular Universal now

00:09:14,320 --> 00:09:18,370
that we understand those let's get into

00:09:16,870 --> 00:09:21,390
some of the new features that were

00:09:18,370 --> 00:09:25,410
released in version line in particular

00:09:21,390 --> 00:09:30,010
live reloading for SSR and pre-rendering

00:09:25,410 --> 00:09:32,320
so live code reload what this does is it

00:09:30,010 --> 00:09:34,990
automatically recompiles the client and

00:09:32,320 --> 00:09:38,680
server bundle every time that you make a

00:09:34,990 --> 00:09:42,970
change and you save so similar to

00:09:38,680 --> 00:09:44,980
command npm run start it'll refresh

00:09:42,970 --> 00:09:50,080
everything for you and recompile things

00:09:44,980 --> 00:09:51,400
for you and free rendering pre-rendering

00:09:50,080 --> 00:09:54,250
is something that i actually had the

00:09:51,400 --> 00:09:56,560
privilege of working on it generates and

00:09:54,250 --> 00:09:59,350
saves static pages to the file system

00:09:56,560 --> 00:10:01,720
and it does so at Build time so you can

00:09:59,350 --> 00:10:04,420
have these files that contain the static

00:10:01,720 --> 00:10:07,120
version of your site of your page and

00:10:04,420 --> 00:10:11,740
you can just serve those using either a

00:10:07,120 --> 00:10:13,210
CDN or a very simple server so again

00:10:11,740 --> 00:10:17,800
let's hop into a demo so we can

00:10:13,210 --> 00:10:21,280
understand these even better ok so we're

00:10:17,800 --> 00:10:24,040
gonna be using the same same project

00:10:21,280 --> 00:10:25,750
from our basics demo the schematic is

00:10:24,040 --> 00:10:28,180
already installed the universal

00:10:25,750 --> 00:10:32,500
schematic and so we can just run npm run

00:10:28,180 --> 00:10:37,810
dev SSR so that we can get that live

00:10:32,500 --> 00:10:40,090
code reload with us with server-side

00:10:37,810 --> 00:10:43,440
rendering we'll just give this a minute

00:10:40,090 --> 00:10:43,440
to start up

00:10:44,960 --> 00:10:53,190
and once this is done will navigate to

00:10:48,740 --> 00:10:55,980
localhost 4200 okay

00:10:53,190 --> 00:10:58,260
and yeah we have an app it looks totally

00:10:55,980 --> 00:10:59,790
simple and regular we can see that

00:10:58,260 --> 00:11:01,680
server-side rendering is going on by

00:10:59,790 --> 00:11:04,290
taking a look at the page source we see

00:11:01,680 --> 00:11:06,450
that all of our application content is

00:11:04,290 --> 00:11:10,860
here it's not just a brute as it usually

00:11:06,450 --> 00:11:12,480
would be but the difference between just

00:11:10,860 --> 00:11:14,760
regular server-side rendering and this

00:11:12,480 --> 00:11:16,440
is now as a developer when I go to make

00:11:14,760 --> 00:11:18,120
a change let's say instead of app is

00:11:16,440 --> 00:11:23,610
running I want to say app is running

00:11:18,120 --> 00:11:26,490
with live code reload and I save will

00:11:23,610 --> 00:11:31,380
see that first date country compiles and

00:11:26,490 --> 00:11:33,140
then in the browser it reloads for us

00:11:31,380 --> 00:11:35,460
which is great just that much easier

00:11:33,140 --> 00:11:36,690
I'll actually do that one more time in

00:11:35,460 --> 00:11:38,820
case you didn't catch it because the

00:11:36,690 --> 00:11:43,310
reload was very very quick I'll just I

00:11:38,820 --> 00:11:46,740
guess put anything and you see here it

00:11:43,310 --> 00:11:49,529
recompiles and then in the browser it

00:11:46,740 --> 00:11:53,820
reloads by itself and so that's the

00:11:49,529 --> 00:11:57,390
simple npm Ramdev SSR live code reload

00:11:53,820 --> 00:12:00,750
with ng universal version 9 now for the

00:11:57,390 --> 00:12:03,930
last demo for the pre-render builder i

00:12:00,750 --> 00:12:05,459
created a simple a simple app but that's

00:12:03,930 --> 00:12:08,640
a little bit more complicated

00:12:05,459 --> 00:12:10,890
it's a pokedex app that when you

00:12:08,640 --> 00:12:15,020
navigate to a pokemon ID these IDs are

00:12:10,890 --> 00:12:18,060
just numbers from I believe 1 to 800

00:12:15,020 --> 00:12:20,400
it'll load the it'll fetch that Pokemon

00:12:18,060 --> 00:12:22,680
and then it'll display its name as well

00:12:20,400 --> 00:12:24,810
as the image corresponding to it on the

00:12:22,680 --> 00:12:27,750
browser mmm to get give you a feel for

00:12:24,810 --> 00:12:33,360
that I'll actually we can just start up

00:12:27,750 --> 00:12:36,209
a server here and yeah well we depending

00:12:33,360 --> 00:12:38,760
on what route we navigate to it's gonna

00:12:36,209 --> 00:12:40,920
be a different Pokemon every time and so

00:12:38,760 --> 00:12:43,529
this is a perfect use case we'll go to a

00:12:40,920 --> 00:12:47,430
local as 4200 here oh I already have one

00:12:43,529 --> 00:12:50,600
here seems this is a great use case for

00:12:47,430 --> 00:12:53,889
the pre-render builder I'll go to one

00:12:50,600 --> 00:12:58,899
Bulbasaur will go to five Charmeleon

00:12:53,889 --> 00:13:01,029
and hundred so since we have all these

00:12:58,899 --> 00:13:03,429
routes that are very simple these are

00:13:01,029 --> 00:13:05,259
these could be just static pages they've

00:13:03,429 --> 00:13:06,759
been written as an angular app but they

00:13:05,259 --> 00:13:09,100
don't need to be rendered server-side

00:13:06,759 --> 00:13:10,689
and they don't need to be every time a

00:13:09,100 --> 00:13:12,399
user makes requests and they don't need

00:13:10,689 --> 00:13:16,199
to be rendered on the client these can

00:13:12,399 --> 00:13:18,129
all be cached as just static files so

00:13:16,199 --> 00:13:20,739
here's the solution for that

00:13:18,129 --> 00:13:23,499
it's ng Universal all you have to do is

00:13:20,739 --> 00:13:26,589
go to the angular JSON file and at the

00:13:23,499 --> 00:13:27,720
bottom of the file see it's just all the

00:13:26,589 --> 00:13:29,859
way at the bottom just scroll down

00:13:27,720 --> 00:13:31,749
you'll find the pre-rendered builder

00:13:29,859 --> 00:13:35,109
defined here and inside the options

00:13:31,749 --> 00:13:37,029
you'll see routes now all you need to do

00:13:35,109 --> 00:13:39,549
is just define what routes you want to

00:13:37,029 --> 00:13:43,449
pre render actually you can even not

00:13:39,549 --> 00:13:45,279
define some of them inside of my routing

00:13:43,449 --> 00:13:48,579
module I believe I have one explicitly

00:13:45,279 --> 00:13:51,910
stated so then thanks the guest parser

00:13:48,579 --> 00:13:53,889
the the pre-render builder will actually

00:13:51,910 --> 00:13:55,480
be able to extract that route and we

00:13:53,889 --> 00:13:56,709
don't even need to write it but if you

00:13:55,480 --> 00:13:58,779
do if you do want to disable that

00:13:56,709 --> 00:14:01,779
feature you can just write guest routes

00:13:58,779 --> 00:14:05,319
and set that to false and that's and it

00:14:01,779 --> 00:14:07,449
won't do any extraction for you so all

00:14:05,319 --> 00:14:10,179
you have to do this simple command to

00:14:07,449 --> 00:14:13,839
pre render these two routes is and PM

00:14:10,179 --> 00:14:16,269
run your render now I'll give this a

00:14:13,839 --> 00:14:17,799
second it is going to build your client

00:14:16,269 --> 00:14:20,410
and server bundle every time that you do

00:14:17,799 --> 00:14:22,509
this because it wants to have the latest

00:14:20,410 --> 00:14:25,619
version of your app it doesn't want to

00:14:22,509 --> 00:14:30,839
pull and try to render using an outdated

00:14:25,619 --> 00:14:33,089
disk so it rebuilds it just to make sure

00:14:30,839 --> 00:14:35,829
we'll give this a second here well it

00:14:33,089 --> 00:14:37,329
while it builds those two and the pre

00:14:35,829 --> 00:14:39,039
rendering the the rendering of your

00:14:37,329 --> 00:14:42,549
routes and saving it to the file system

00:14:39,039 --> 00:14:45,279
is actually very very quick and this

00:14:42,549 --> 00:14:46,929
this is all the actual building I'll

00:14:45,279 --> 00:14:49,029
make this fullscreen to you is linear

00:14:46,929 --> 00:14:51,759
time and you'll see that these routes

00:14:49,029 --> 00:14:53,319
show up in not the right order and this

00:14:51,759 --> 00:14:57,519
is because the routes are being rendered

00:14:53,319 --> 00:15:01,110
in parallel so while this is linear this

00:14:57,519 --> 00:15:03,489
is going to be way way more optimized

00:15:01,110 --> 00:15:05,470
and really depends on how many CPUs you

00:15:03,489 --> 00:15:07,459
have at that point so we can see that

00:15:05,470 --> 00:15:10,699
these are being written to

00:15:07,459 --> 00:15:14,149
dis / demo / browser and then the route

00:15:10,699 --> 00:15:17,179
name so if I open up my file system and

00:15:14,149 --> 00:15:19,990
I go to disk / demo browser we can see

00:15:17,179 --> 00:15:23,480
that we have those three files here and

00:15:19,990 --> 00:15:24,980
it's defined and a folder that's named

00:15:23,480 --> 00:15:27,379
the same as the route slash index dot

00:15:24,980 --> 00:15:29,360
HTML and most CD ends are gonna be

00:15:27,379 --> 00:15:33,199
really good about this they're good at

00:15:29,360 --> 00:15:35,149
figuring out oh if I have a folder

00:15:33,199 --> 00:15:37,459
that's the name of this route and a user

00:15:35,149 --> 00:15:41,600
requests it I can just hand it the index

00:15:37,459 --> 00:15:43,399
out HTML from that folder and so see the

00:15:41,600 --> 00:15:46,040
ends like firebase are great at handling

00:15:43,399 --> 00:15:48,230
that for you so in an ideal world your

00:15:46,040 --> 00:15:50,089
server will not even get pinged for this

00:15:48,230 --> 00:15:52,730
it'll just be taken care of by the CDN

00:15:50,089 --> 00:15:54,290
so what if I actually want to render

00:15:52,730 --> 00:15:56,899
those d hundred routes that I'm capable

00:15:54,290 --> 00:15:59,449
of rendering for this app sure you can

00:15:56,899 --> 00:16:01,579
write them into this array over here but

00:15:59,449 --> 00:16:02,300
that's a bit cumbersome and we recognize

00:16:01,579 --> 00:16:04,579
that

00:16:02,300 --> 00:16:07,009
so the solution we came up with is you

00:16:04,579 --> 00:16:10,579
can define routes file and then just

00:16:07,009 --> 00:16:13,670
point this using a relative URL in this

00:16:10,579 --> 00:16:16,519
case um we have routes - file to find

00:16:13,670 --> 00:16:19,699
and this is just a bunch of routes

00:16:16,519 --> 00:16:21,549
separated by new lines and so you can

00:16:19,699 --> 00:16:24,709
auto generate this file however you like

00:16:21,549 --> 00:16:33,160
and all you got to do is point to it

00:16:24,709 --> 00:16:35,990
routes - file txt and again the hoops

00:16:33,160 --> 00:16:41,779
super simple command for running this

00:16:35,990 --> 00:16:44,509
and VM run pre-render and I'll close

00:16:41,779 --> 00:16:46,939
this make this fullscreen we're gonna

00:16:44,509 --> 00:16:50,179
wait here while this pre renders the the

00:16:46,939 --> 00:16:52,069
build time should be linear so it's

00:16:50,179 --> 00:16:55,730
gonna be the same as any other time you

00:16:52,069 --> 00:16:58,850
run this but the parallelization for the

00:16:55,730 --> 00:17:00,829
actual rendering should make the 800

00:16:58,850 --> 00:17:03,350
routes versus 300 Osby like not that

00:17:00,829 --> 00:17:04,970
much of a difference so hopefully what

00:17:03,350 --> 00:17:09,140
we'll see here is that the 800 routes

00:17:04,970 --> 00:17:14,449
are rendered in seconds we'll give this

00:17:09,140 --> 00:17:16,880
a second to build yeah and there we go

00:17:14,449 --> 00:17:19,970
you have hundreds of routes rendered in

00:17:16,880 --> 00:17:21,020
not like maybe five seconds so don't be

00:17:19,970 --> 00:17:23,870
afraid to use this as

00:17:21,020 --> 00:17:26,660
for your app if you have hundreds or

00:17:23,870 --> 00:17:28,670
even thousands or even tens of thousands

00:17:26,660 --> 00:17:30,790
of routes that you want a pre-render I'm

00:17:28,670 --> 00:17:34,250
sure this tool is capable of handling it

00:17:30,790 --> 00:17:38,420
and now if we want to actually view

00:17:34,250 --> 00:17:39,680
these we can run npm run serve SSR I'll

00:17:38,420 --> 00:17:42,260
clear this so it's a little bit more

00:17:39,680 --> 00:17:44,630
obvious and we can do this because the

00:17:42,260 --> 00:17:47,180
server and and clientbundle were built

00:17:44,630 --> 00:17:51,680
already by the pre-render builder um we

00:17:47,180 --> 00:17:55,370
go to localhost 4000 now and we go to 1

00:17:51,680 --> 00:17:56,810
/ index.html again if you were using a

00:17:55,370 --> 00:18:00,230
CDN you wouldn't have to write the slash

00:17:56,810 --> 00:18:01,790
index type HTML but the easy way to tell

00:18:00,230 --> 00:18:03,740
that this is a pre-rendered page is by

00:18:01,790 --> 00:18:06,470
just looking at the bottom of the

00:18:03,740 --> 00:18:08,390
elements tag of the elements tab and

00:18:06,470 --> 00:18:09,770
seeing that there's this little comment

00:18:08,390 --> 00:18:12,620
at the bottom that marks this page is

00:18:09,770 --> 00:18:15,290
pre-rendered so it's great for testing

00:18:12,620 --> 00:18:22,460
and we can of course verify that all the

00:18:15,290 --> 00:18:25,520
way up to 800 slash next HTML is being

00:18:22,460 --> 00:18:27,890
pre-rendered so that's all for this talk

00:18:25,520 --> 00:18:29,570
thank you so much I hope you learned

00:18:27,890 --> 00:18:32,030
something about NG Universal and I

00:18:29,570 --> 00:18:35,300
really hope that you're able to apply

00:18:32,030 --> 00:18:37,560
these features and and views and

00:18:35,300 --> 00:18:40,190
Universal in your application

00:18:37,560 --> 00:18:40,190
thank you very much

00:18:41,270 --> 00:18:47,390
[Applause]

00:18:41,600 --> 00:18:50,740
[Music]

00:18:47,390 --> 00:18:52,800
[Applause]

00:18:50,740 --> 00:18:52,800

YouTube URL: https://www.youtube.com/watch?v=BmWYmoMeprU


