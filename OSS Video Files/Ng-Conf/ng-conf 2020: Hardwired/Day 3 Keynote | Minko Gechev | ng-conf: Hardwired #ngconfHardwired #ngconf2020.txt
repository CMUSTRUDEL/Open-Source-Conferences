Title: Day 3 Keynote | Minko Gechev | ng-conf: Hardwired #ngconfHardwired #ngconf2020
Publication date: 2020-05-26
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

The State of Angular Deployment, SSR and Prerendering.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,640
[Applause]

00:00:05,920 --> 00:00:16,640
[Music]

00:00:17,810 --> 00:00:23,759
right hello everybody my name is Nikita

00:00:20,880 --> 00:00:24,990
Jeff I'm an engineer in game today I

00:00:23,759 --> 00:00:26,910
want to share with you what is the

00:00:24,990 --> 00:00:29,340
current state of the angular deployment

00:00:26,910 --> 00:00:31,079
server-side rendering and pre-rendering

00:00:29,340 --> 00:00:33,449
I'm going to put a couple of updates

00:00:31,079 --> 00:00:34,980
about what we built over the past couple

00:00:33,449 --> 00:00:37,110
of months into the context of the

00:00:34,980 --> 00:00:39,330
evolution of the web and I'm going to

00:00:37,110 --> 00:00:40,830
mix everything together with my personal

00:00:39,330 --> 00:00:43,379
story how I got introduced to web

00:00:40,830 --> 00:00:45,780
development so I'm pretty excited so I'm

00:00:43,379 --> 00:00:49,140
sharing this count Nvidia now first let

00:00:45,780 --> 00:00:52,020
us go to 1991 when the first website

00:00:49,140 --> 00:00:52,949
ever will deploys to the Internet it

00:00:52,020 --> 00:00:55,260
looks something like that

00:00:52,949 --> 00:00:58,289
we had this fascinating infrastructure

00:00:55,260 --> 00:01:00,480
of like distributed network of web

00:00:58,289 --> 00:01:02,480
servers that were serving static HTML

00:01:00,480 --> 00:01:05,290
files that were linked together through

00:01:02,480 --> 00:01:07,450
hyperlinks

00:01:05,290 --> 00:01:09,340
we were just serving these static files

00:01:07,450 --> 00:01:12,190
but if one of these web servers was

00:01:09,340 --> 00:01:13,930
going went down everything was still

00:01:12,190 --> 00:01:16,570
working properly we have because we had

00:01:13,930 --> 00:01:18,460
this fault tolerance at the same time

00:01:16,570 --> 00:01:19,810
serving the static files wasn't

00:01:18,460 --> 00:01:21,640
satisfying the requirements of the

00:01:19,810 --> 00:01:24,190
business so that's how different

00:01:21,640 --> 00:01:28,060
developers came up with the idea for the

00:01:24,190 --> 00:01:30,490
common gateway interface CGI is just a

00:01:28,060 --> 00:01:34,240
way for the web server to pass the users

00:01:30,490 --> 00:01:36,010
request to a external program that can

00:01:34,240 --> 00:01:39,520
fetch some data from a database or read

00:01:36,010 --> 00:01:41,200
a file and right after that return some

00:01:39,520 --> 00:01:43,060
rendered content to the web server that

00:01:41,200 --> 00:01:45,160
the web server was able to forward to

00:01:43,060 --> 00:01:46,660
the browser this way we were built we

00:01:45,160 --> 00:01:49,410
were able to build much more dynamic

00:01:46,660 --> 00:01:52,900
experiences we were able to generate

00:01:49,410 --> 00:01:56,110
automatically the page and store some

00:01:52,900 --> 00:01:58,270
data provided by the user so here is how

00:01:56,110 --> 00:02:00,310
this looked like in terms of boxes

00:01:58,270 --> 00:02:02,080
talking together first the user is

00:02:00,310 --> 00:02:04,030
requesting an HTML page from the web

00:02:02,080 --> 00:02:05,830
server the web server is forwarding this

00:02:04,030 --> 00:02:07,630
request to an external program which was

00:02:05,830 --> 00:02:10,510
fetching some data from somewhere and

00:02:07,630 --> 00:02:12,100
try it out really think the contents

00:02:10,510 --> 00:02:14,440
that the user is supposed to see in

00:02:12,100 --> 00:02:17,140
terms of markup this markup was rendered

00:02:14,440 --> 00:02:20,019
by the browser and at this point we have

00:02:17,140 --> 00:02:21,790
the largest content hole paint the page

00:02:20,019 --> 00:02:23,680
so at this point the page is already

00:02:21,790 --> 00:02:27,690
useful the user can engage with it can

00:02:23,680 --> 00:02:30,100
read this content and can do their job

00:02:27,690 --> 00:02:32,590
so the largest content pool paint is a

00:02:30,100 --> 00:02:34,690
user centric metric for estimating when

00:02:32,590 --> 00:02:36,100
the page is useful for the user this is

00:02:34,690 --> 00:02:39,100
an important metric that we're going to

00:02:36,100 --> 00:02:42,430
mention further in this talk although

00:02:39,100 --> 00:02:44,500
this was decent and it's heard the

00:02:42,430 --> 00:02:47,620
business for a bit still we were far

00:02:44,500 --> 00:02:49,690
from desktop like user experience we

00:02:47,620 --> 00:02:51,340
didn't have this responsive experience

00:02:49,690 --> 00:02:53,230
that people were used to from their

00:02:51,340 --> 00:02:55,810
desktop applications where just by

00:02:53,230 --> 00:02:58,090
clicking on a button something was

00:02:55,810 --> 00:03:01,180
happening on the screen on each tiny

00:02:58,090 --> 00:03:03,790
interaction with the CGI architecture we

00:03:01,180 --> 00:03:06,610
had to reload the entire page instead of

00:03:03,790 --> 00:03:08,410
just updating a subsection with the

00:03:06,610 --> 00:03:11,920
evolution of the web and different web

00:03:08,410 --> 00:03:14,530
technologies such as the iframe and xml

00:03:11,920 --> 00:03:17,380
httprequest we came up with the

00:03:14,530 --> 00:03:19,090
technology ajax ajax is an umbrella

00:03:17,380 --> 00:03:20,800
technology which includes the

00:03:19,090 --> 00:03:23,950
current API is that we can use in order

00:03:20,800 --> 00:03:26,290
to send a synchronous requests to a web

00:03:23,950 --> 00:03:28,290
server fetch some dates right after a to

00:03:26,290 --> 00:03:30,670
date just a tiny portion of the screen

00:03:28,290 --> 00:03:32,410
here is how things look like like that

00:03:30,670 --> 00:03:34,030
we're still sending requests to the web

00:03:32,410 --> 00:03:35,560
server which was forwarding this request

00:03:34,030 --> 00:03:37,480
to an external program through the

00:03:35,560 --> 00:03:39,700
common gateway interface which was

00:03:37,480 --> 00:03:41,500
fetching data from a database let's say

00:03:39,700 --> 00:03:43,750
and right after that returning rendered

00:03:41,500 --> 00:03:46,150
contents to the browser and the browser

00:03:43,750 --> 00:03:47,769
was able to render something so it was

00:03:46,150 --> 00:03:50,349
making the page useful at this point

00:03:47,769 --> 00:03:51,940
which the largest contentful paint right

00:03:50,349 --> 00:03:54,459
after that the page was also referencing

00:03:51,940 --> 00:03:56,500
some JavaScript files and these

00:03:54,459 --> 00:03:59,079
JavaScript files files were making the

00:03:56,500 --> 00:04:01,209
page interact in terms of desktop like

00:03:59,079 --> 00:04:02,769
user experience where they were adding

00:04:01,209 --> 00:04:05,140
different event listeners to certain

00:04:02,769 --> 00:04:06,430
don't elements and just by clicking on

00:04:05,140 --> 00:04:08,769
any of these elements or somehow

00:04:06,430 --> 00:04:10,860
interacting with it they were able to

00:04:08,769 --> 00:04:13,030
sync to trigger a synchronous requests

00:04:10,860 --> 00:04:15,190
fetch some data from the network and

00:04:13,030 --> 00:04:17,519
update only a small portion of the

00:04:15,190 --> 00:04:21,039
screen instead of reloading everything

00:04:17,519 --> 00:04:23,860
so that was a time when I got introduced

00:04:21,039 --> 00:04:25,870
to web development thanks to my high

00:04:23,860 --> 00:04:28,270
school teacher back then this is the

00:04:25,870 --> 00:04:32,680
authentic cover of the first book that I

00:04:28,270 --> 00:04:36,550
read this is Bulgarian for developments

00:04:32,680 --> 00:04:37,930
of web projects with PHP and MySQL yes I

00:04:36,550 --> 00:04:39,760
started with these two technologies I

00:04:37,930 --> 00:04:41,200
was not really sure what I am doing and

00:04:39,760 --> 00:04:44,830
this was this was a pretty heavy pretty

00:04:41,200 --> 00:04:46,900
heavy read over 500 pages so I just read

00:04:44,830 --> 00:04:49,479
about some api's and I pretty much

00:04:46,900 --> 00:04:50,830
learned them by heart because I really

00:04:49,479 --> 00:04:53,620
didn't know what's happening under the

00:04:50,830 --> 00:04:55,389
hood so that that's MySQL has some

00:04:53,620 --> 00:04:57,010
drivers for PHP and they were sending

00:04:55,389 --> 00:04:58,599
some requests over the network and

00:04:57,010 --> 00:05:01,479
fetching the paper certificate sockets I

00:04:58,599 --> 00:05:04,180
had no clue but I built this website

00:05:01,479 --> 00:05:06,639
which was in fact a CMS system that is

00:05:04,180 --> 00:05:09,400
one of my first websites and this had a

00:05:06,639 --> 00:05:11,620
lot of Ajax a lot of messy codes but I

00:05:09,400 --> 00:05:15,030
ended up presenting kids in front of a

00:05:11,620 --> 00:05:19,780
audience consisting of these two people

00:05:15,030 --> 00:05:23,620
in 2008 so this audience was a bunch of

00:05:19,780 --> 00:05:25,840
web experts in Bulgaria they evaluated

00:05:23,620 --> 00:05:28,690
my websites and thanks to this I was

00:05:25,840 --> 00:05:30,400
able to go to university I built a

00:05:28,690 --> 00:05:31,800
website back then based on the CMS

00:05:30,400 --> 00:05:34,319
system for meat

00:05:31,800 --> 00:05:35,789
showers for observation of meteor

00:05:34,319 --> 00:05:38,970
showers because I was pretty excited

00:05:35,789 --> 00:05:43,260
pretty passionate about the strong

00:05:38,970 --> 00:05:45,960
around the same time 2008 2009 things

00:05:43,260 --> 00:05:48,180
got pretty intense in terms of

00:05:45,960 --> 00:05:50,910
development on the front end we had

00:05:48,180 --> 00:05:52,860
backbone and angular jazz which put some

00:05:50,910 --> 00:05:54,590
structure on the web applications that

00:05:52,860 --> 00:05:58,650
were developing that we were building

00:05:54,590 --> 00:06:00,450
these two technologies helped us to help

00:05:58,650 --> 00:06:03,060
us help us to build more rich user

00:06:00,450 --> 00:06:04,650
experiences with JavaScript and they

00:06:03,060 --> 00:06:07,320
dramatically changed the way that we are

00:06:04,650 --> 00:06:08,940
rendering pages from the server we

00:06:07,320 --> 00:06:11,010
directly went to the client without

00:06:08,940 --> 00:06:12,480
rendering absolutely anything from the

00:06:11,010 --> 00:06:15,540
server so we were using the original

00:06:12,480 --> 00:06:17,880
architecture from 1991 where we were

00:06:15,540 --> 00:06:20,640
just serving static HTML files and right

00:06:17,880 --> 00:06:24,390
after that loading a bunch of JavaScript

00:06:20,640 --> 00:06:25,980
files that were executed and fetching

00:06:24,390 --> 00:06:28,350
some data from the network and finally

00:06:25,980 --> 00:06:31,170
rendering something useful on to the

00:06:28,350 --> 00:06:32,460
screen and making the page interact the

00:06:31,170 --> 00:06:34,500
page was really the page is really

00:06:32,460 --> 00:06:37,110
interactive with single page apps as we

00:06:34,500 --> 00:06:40,700
all know we really provide desktop like

00:06:37,110 --> 00:06:43,350
user experience but at the cost of

00:06:40,700 --> 00:06:45,600
making the user wait for a long time

00:06:43,350 --> 00:06:48,840
until we show something useful onto the

00:06:45,600 --> 00:06:51,270
screen and that is very far from idea

00:06:48,840 --> 00:06:54,300
right we we spent a lot of time in just

00:06:51,270 --> 00:06:55,830
loading scripts and the users we don't

00:06:54,300 --> 00:06:57,690
provide any useful information to the

00:06:55,830 --> 00:06:59,760
user so they very often just leave the

00:06:57,690 --> 00:07:02,160
pH since there is nothing there for them

00:06:59,760 --> 00:07:04,110
as framework alters we're spending a lot

00:07:02,160 --> 00:07:05,850
of time on optimizing the user

00:07:04,110 --> 00:07:07,800
experience and optimizing the bundle

00:07:05,850 --> 00:07:10,680
size in particular for your applications

00:07:07,800 --> 00:07:12,450
and for the framework itself during the

00:07:10,680 --> 00:07:15,090
first day of the conference from Kara

00:07:12,450 --> 00:07:16,590
you heard how we spends how much we

00:07:15,090 --> 00:07:18,480
invested in making sure that anger is

00:07:16,590 --> 00:07:19,980
three shakable we're generating the

00:07:18,480 --> 00:07:21,450
optimal set of instructions for your

00:07:19,980 --> 00:07:23,350
templates so that we can make your

00:07:21,450 --> 00:07:25,720
bundles smaller

00:07:23,350 --> 00:07:28,780
at certain points we even had the joke

00:07:25,720 --> 00:07:31,180
around version 4 like that the same joke

00:07:28,780 --> 00:07:33,250
joke as the previous talk in case you

00:07:31,180 --> 00:07:37,150
didn't hear it the first time we had

00:07:33,250 --> 00:07:39,190
this joke that by version 5.4 we're

00:07:37,150 --> 00:07:41,620
going to make ingress bundle size- so

00:07:39,190 --> 00:07:43,030
just by adding the framework to who your

00:07:41,620 --> 00:07:45,310
application we're going to shrink your

00:07:43,030 --> 00:07:47,800
bundles acts like that's obviously not

00:07:45,310 --> 00:07:51,130
possible and we still have a lot of work

00:07:47,800 --> 00:07:53,050
to do in order to optimize the angular

00:07:51,130 --> 00:07:54,940
ends to make your bundles even smaller

00:07:53,050 --> 00:07:56,950
but at certain point you just need to

00:07:54,940 --> 00:07:58,330
ship some JavaScript rights like you

00:07:56,950 --> 00:08:00,400
should definitely invest in making your

00:07:58,330 --> 00:08:02,530
application smaller but at certain

00:08:00,400 --> 00:08:05,440
points your bundles just can't get any

00:08:02,530 --> 00:08:09,610
smaller I put this very insightful code

00:08:05,440 --> 00:08:11,710
here for myself and that was in fact one

00:08:09,610 --> 00:08:13,360
of the motivations for different folks

00:08:11,710 --> 00:08:17,230
trying to run this client-side rendering

00:08:13,360 --> 00:08:18,610
on the server in order to have some code

00:08:17,230 --> 00:08:22,330
reuse between the client and the server

00:08:18,610 --> 00:08:25,230
and return some rendered contents to the

00:08:22,330 --> 00:08:27,670
user ahead of time that was arounds

00:08:25,230 --> 00:08:31,360
nodejs was getting traction this was

00:08:27,670 --> 00:08:34,150
probably 2013 2014 maybe a little bit

00:08:31,360 --> 00:08:35,950
before that different folks from the

00:08:34,150 --> 00:08:37,990
JavaScript open-source community trying

00:08:35,950 --> 00:08:40,150
tried to experiment with server-side

00:08:37,990 --> 00:08:43,750
rendering of client-side applications

00:08:40,150 --> 00:08:45,880
just by mocking some browser API and we

00:08:43,750 --> 00:08:49,140
went back to a similar architecture to

00:08:45,880 --> 00:08:51,580
what we previously had with CGI we have

00:08:49,140 --> 00:08:53,440
clients browser which is sending a

00:08:51,580 --> 00:08:55,540
request to a server and this time

00:08:53,440 --> 00:08:57,670
instead of forwarding the execution to

00:08:55,540 --> 00:08:59,740
an external program with CGI we were

00:08:57,670 --> 00:09:05,770
just running a Content site application

00:08:59,740 --> 00:09:06,300
in no J's environment at this point this

00:09:05,770 --> 00:09:08,700
class

00:09:06,300 --> 00:09:10,770
application is not using the dome api's

00:09:08,700 --> 00:09:12,870
in the way that they're used in the

00:09:10,770 --> 00:09:14,310
browser but it is using nodejs

00:09:12,870 --> 00:09:16,290
implementation of them and it was

00:09:14,310 --> 00:09:18,930
actually returning a rendered content

00:09:16,290 --> 00:09:20,310
that the user was already able to use so

00:09:18,930 --> 00:09:24,000
they were getting the largest content

00:09:20,310 --> 00:09:25,890
full paint on time and later on the

00:09:24,000 --> 00:09:27,450
browser was downloading a bunch of Java

00:09:25,890 --> 00:09:30,350
scripts that were making the page

00:09:27,450 --> 00:09:30,350
interactive as well

00:09:30,920 --> 00:09:35,730
2014 around this time actually I gave my

00:09:33,390 --> 00:09:36,210
very first international talk on ng

00:09:35,730 --> 00:09:39,090
Vegas

00:09:36,210 --> 00:09:40,920
I was I was super nervous in fact after

00:09:39,090 --> 00:09:43,290
I gave this talk about it's my research

00:09:40,920 --> 00:09:45,270
on angularjs and how we can use the

00:09:43,290 --> 00:09:47,550
immutable structure witness to speed up

00:09:45,270 --> 00:09:49,050
our applications like after my talk I

00:09:47,550 --> 00:09:51,360
just went to my room and I locked myself

00:09:49,050 --> 00:09:53,340
there and I stayed until the end of the

00:09:51,360 --> 00:09:55,200
day because that's how nervous I was

00:09:53,340 --> 00:09:57,360
like this was pretty huge experience

00:09:55,200 --> 00:10:00,420
traveling 6,000 miles from Bulgaria to

00:09:57,360 --> 00:10:01,740
Las Vegas to share my work and on this

00:10:00,420 --> 00:10:04,050
conference I met a lot of fantastic

00:10:01,740 --> 00:10:07,530
folks one of them was Patrick and

00:10:04,050 --> 00:10:10,200
Patrick together with Jeff two months

00:10:07,530 --> 00:10:13,020
later they presented their initial

00:10:10,200 --> 00:10:15,960
prototype for angular's first

00:10:13,020 --> 00:10:18,780
server-side rendering and universal this

00:10:15,960 --> 00:10:21,060
is a really exciting project that is

00:10:18,780 --> 00:10:22,560
still being developed very actively

00:10:21,060 --> 00:10:24,780
between the angular team and the

00:10:22,560 --> 00:10:27,900
community and since then this project

00:10:24,780 --> 00:10:30,840
evolved a lot it is now a robust

00:10:27,900 --> 00:10:32,880
industrial solution that a lot of really

00:10:30,840 --> 00:10:36,090
fantastic companies are using in

00:10:32,880 --> 00:10:39,120
production I want to invite Amanda on

00:10:36,090 --> 00:10:41,850
our virtual stage from CrunchBase with

00:10:39,120 --> 00:10:45,410
me to share more on how CrunchBase is

00:10:41,850 --> 00:10:45,410
using angular yourself

00:10:50,550 --> 00:10:56,940
hi Envy calm I'm Amanda so foldy I've

00:10:54,300 --> 00:11:00,209
been an engineer at crunchbase for four

00:10:56,940 --> 00:11:03,390
years and I'm here to share why angular

00:11:00,209 --> 00:11:06,620
Universal is just so important to our

00:11:03,390 --> 00:11:09,720
team crunch piece is the leading

00:11:06,620 --> 00:11:12,600
destination of private company data on

00:11:09,720 --> 00:11:15,060
the internet it started almost 15 years

00:11:12,600 --> 00:11:18,470
ago as a small database for tech

00:11:15,060 --> 00:11:21,779
reporters to keep track of funding data

00:11:18,470 --> 00:11:24,750
four years ago we became our own private

00:11:21,779 --> 00:11:29,100
company with a mission and that mission

00:11:24,750 --> 00:11:32,010
is to democratize access to company

00:11:29,100 --> 00:11:33,720
information and provide solutions that

00:11:32,010 --> 00:11:35,750
guide our users to their next

00:11:33,720 --> 00:11:38,420
opportunities

00:11:35,750 --> 00:11:40,819
but at the time we spun out as a private

00:11:38,420 --> 00:11:44,029
company we had we had a rails

00:11:40,819 --> 00:11:46,480
application and some of the pages were

00:11:44,029 --> 00:11:49,430
taking nearly 20 seconds to load and

00:11:46,480 --> 00:11:53,000
adding more data would make those pages

00:11:49,430 --> 00:11:56,389
even slower so how are we going to

00:11:53,000 --> 00:11:58,410
deliver on our huge mission as a web

00:11:56,389 --> 00:12:00,420
platform

00:11:58,410 --> 00:12:02,550
we knew we had to start from scratch

00:12:00,420 --> 00:12:04,860
with a foundation that was going to

00:12:02,550 --> 00:12:08,009
allow us to deliver new data to our

00:12:04,860 --> 00:12:10,860
users quickly without having them pay

00:12:08,009 --> 00:12:15,900
for that in their load time

00:12:10,860 --> 00:12:18,630
um enter and Euler universal server-side

00:12:15,900 --> 00:12:22,080
rendering our pages means that we can

00:12:18,630 --> 00:12:25,050
surface data faster so places where web

00:12:22,080 --> 00:12:28,920
users are searching for and sharing that

00:12:25,050 --> 00:12:34,140
data and really importantly we're doing

00:12:28,920 --> 00:12:37,530
that all in a singular code path it also

00:12:34,140 --> 00:12:40,530
means that when users go to access that

00:12:37,530 --> 00:12:42,330
data on our platform we're getting it to

00:12:40,530 --> 00:12:44,880
their browser in the quickest and

00:12:42,330 --> 00:12:48,020
lightest way possible

00:12:44,880 --> 00:12:50,690
when we think about how we make our data

00:12:48,020 --> 00:12:53,880
discoverable and accessible on the web

00:12:50,690 --> 00:12:57,350
we're talking about web crawlers the

00:12:53,880 --> 00:13:00,450
Google color has a two wave approach to

00:12:57,350 --> 00:13:03,750
indexing sites the first wave of

00:13:00,450 --> 00:13:06,120
indexing takes into account any HTML

00:13:03,750 --> 00:13:09,000
that it can access by requesting the

00:13:06,120 --> 00:13:11,400
source code as well as adding in any

00:13:09,000 --> 00:13:13,620
links that are in the source to the

00:13:11,400 --> 00:13:17,400
crawl queue

00:13:13,620 --> 00:13:20,580
the second wave of indexing renders and

00:13:17,400 --> 00:13:24,000
indexes JavaScript generated content and

00:13:20,580 --> 00:13:28,410
this can be hours or weeks behind that

00:13:24,000 --> 00:13:31,470
initial wave of indexing so if we were

00:13:28,410 --> 00:13:33,390
in that second wave of indexing access

00:13:31,470 --> 00:13:36,450
to newly added information on our

00:13:33,390 --> 00:13:39,960
platform would be limited to the users

00:13:36,450 --> 00:13:41,820
who already regularly visit us but what

00:13:39,960 --> 00:13:43,650
if you are searching for a new job and

00:13:41,820 --> 00:13:46,140
you didn't hear about the latest funding

00:13:43,650 --> 00:13:49,830
rounds a company got because our pages

00:13:46,140 --> 00:13:52,830
were a week behind getting crawl making

00:13:49,830 --> 00:13:55,140
decisions about opportunities is all

00:13:52,830 --> 00:13:59,670
about timing and we want to be in that

00:13:55,140 --> 00:14:01,529
first wave of indexing because over 70%

00:13:59,670 --> 00:14:06,410
of the traffic that we get to crunchbase

00:14:01,529 --> 00:14:09,779
com is attributed to organic search so

00:14:06,410 --> 00:14:11,900
in addition to showing up in search

00:14:09,779 --> 00:14:15,300
results as quickly as possible

00:14:11,900 --> 00:14:17,339
rendering our pages on the server also

00:14:15,300 --> 00:14:19,950
means that we're able to add semantic

00:14:17,339 --> 00:14:23,640
information to our pages which enables

00:14:19,950 --> 00:14:25,800
us to better represent our data having

00:14:23,640 --> 00:14:27,990
the ability to add structured data to

00:14:25,800 --> 00:14:31,230
our pages helps to classify the full

00:14:27,990 --> 00:14:32,940
contents of our pages and enables us to

00:14:31,230 --> 00:14:37,050
show in special search features like

00:14:32,940 --> 00:14:39,690
cards in Open Graph tags allow us to

00:14:37,050 --> 00:14:42,690
show up with descriptions titles and

00:14:39,690 --> 00:14:44,480
images when pasting them in various

00:14:42,690 --> 00:14:48,380
contexts

00:14:44,480 --> 00:14:51,350
this means that as much as possible our

00:14:48,380 --> 00:14:54,200
data is accessible to our users wherever

00:14:51,350 --> 00:14:56,230
they are even if that's not CrunchBase

00:14:54,200 --> 00:14:58,840
com

00:14:56,230 --> 00:15:02,440
and what does it mean for the users who

00:14:58,840 --> 00:15:07,150
do visit CrunchBase com

00:15:02,440 --> 00:15:12,160
we serve over 2,000 pages per minute so

00:15:07,150 --> 00:15:15,430
1 million users a week to users on six

00:15:12,160 --> 00:15:19,110
continents to the tune of a hundred and

00:15:15,430 --> 00:15:21,820
fifty milliseconds per request

00:15:19,110 --> 00:15:23,500
responding with fully formed HTML from

00:15:21,820 --> 00:15:26,260
the server means that we're getting

00:15:23,500 --> 00:15:29,290
information to our users as fast as we

00:15:26,260 --> 00:15:32,650
possibly can and as a small team of

00:15:29,290 --> 00:15:34,840
engineers we value angular Universal as

00:15:32,650 --> 00:15:38,770
a tool that allows us to liver on our

00:15:34,840 --> 00:15:41,680
huge mission we've been with Universal

00:15:38,770 --> 00:15:44,110
since the 100 beta and we look forward

00:15:41,680 --> 00:15:46,920
to continuing to learn and improve along

00:15:44,110 --> 00:15:46,920
with the community

00:15:48,670 --> 00:15:54,860
thank you very much Amanda talking to a

00:15:52,490 --> 00:15:57,500
lot of developers on conferences and

00:15:54,860 --> 00:15:59,330
like any external events and external

00:15:57,500 --> 00:16:01,790
forums we often hear about two main

00:15:59,330 --> 00:16:04,279
challenges change refresh time and

00:16:01,790 --> 00:16:05,990
deployment so we heard a feedback and

00:16:04,279 --> 00:16:09,800
put it a couple of improvements in

00:16:05,990 --> 00:16:11,540
version 9 in version 9 once you add the

00:16:09,800 --> 00:16:13,790
anger Universal schematics to your

00:16:11,540 --> 00:16:15,920
project and you make your project and

00:16:13,790 --> 00:16:19,700
anger Universal compatible you now have

00:16:15,920 --> 00:16:21,740
an angular CLI builder sir SSR which

00:16:19,700 --> 00:16:25,070
allows you to have the same live reload

00:16:21,740 --> 00:16:27,230
experience as ng serve but this time for

00:16:25,070 --> 00:16:29,000
anger anniversary application so this is

00:16:27,230 --> 00:16:31,820
not a complete replacement of ng serve

00:16:29,000 --> 00:16:33,529
because we need to build more things we

00:16:31,820 --> 00:16:36,649
need to build both the server and the

00:16:33,529 --> 00:16:38,300
client and it is slightly slower but at

00:16:36,649 --> 00:16:40,100
the same time it is really great to not

00:16:38,300 --> 00:16:41,600
have to reboot your client your server

00:16:40,100 --> 00:16:43,070
and try to average start your

00:16:41,600 --> 00:16:45,350
development and your Universal server

00:16:43,070 --> 00:16:47,990
every time when you make a change this

00:16:45,350 --> 00:16:50,660
way which just by running ng run the

00:16:47,990 --> 00:16:52,190
name of your app serve SSR you will be

00:16:50,660 --> 00:16:54,110
able to have life reload and you'll be

00:16:52,190 --> 00:16:57,110
able to test each piece of code in each

00:16:54,110 --> 00:17:00,260
change that you do to make sure it works

00:16:57,110 --> 00:17:01,490
both on the client and on the server in

00:17:00,260 --> 00:17:03,890
order to take advantage of this feature

00:17:01,490 --> 00:17:06,140
everything you need to do just run ng

00:17:03,890 --> 00:17:08,870
update and Universal slash Express

00:17:06,140 --> 00:17:11,480
engine and this is another example of

00:17:08,870 --> 00:17:13,490
this fantastic collaboration between the

00:17:11,480 --> 00:17:15,169
open source community the angular team

00:17:13,490 --> 00:17:17,600
and like different people with different

00:17:15,169 --> 00:17:19,520
backgrounds here Allen from the angular

00:17:17,600 --> 00:17:21,740
CLI team worked in collaboration with

00:17:19,520 --> 00:17:24,140
Manfred's who is one of our fantastic

00:17:21,740 --> 00:17:25,819
committed collaborators to build this

00:17:24,140 --> 00:17:28,320
experience and make it available for

00:17:25,819 --> 00:17:30,420
everyone

00:17:28,320 --> 00:17:33,150
another example for the collaboration

00:17:30,420 --> 00:17:35,130
that we had was in terms of deployments

00:17:33,150 --> 00:17:36,990
so there are many different ways to

00:17:35,130 --> 00:17:39,750
deploy an angular Universal application

00:17:36,990 --> 00:17:40,800
there are fantastic tutorials online but

00:17:39,750 --> 00:17:42,240
at the same time there are a lot of

00:17:40,800 --> 00:17:44,730
boiler plates that we can definitely

00:17:42,240 --> 00:17:47,310
eliminate it with schematics and all the

00:17:44,730 --> 00:17:49,290
power of the angular CLI so in

00:17:47,310 --> 00:17:51,210
collaboration with the firebase team at

00:17:49,290 --> 00:17:53,100
Google we worked on introducing

00:17:51,210 --> 00:17:55,350
deployment schematics for angular

00:17:53,100 --> 00:17:57,570
universal applications as part of

00:17:55,350 --> 00:18:00,330
angular slash fire let me show you how

00:17:57,570 --> 00:18:04,200
this works so here I am in an angular

00:18:00,330 --> 00:18:07,260
CLI Universal project with the Express

00:18:04,200 --> 00:18:09,060
engine all I need to do in order to

00:18:07,260 --> 00:18:12,780
deploy this application to production

00:18:09,060 --> 00:18:16,470
with firebase functions you just run ng

00:18:12,780 --> 00:18:18,510
apps and your slash fire here Here I am

00:18:16,470 --> 00:18:20,940
adding a canary version because I

00:18:18,510 --> 00:18:23,730
recorded this video Wow this

00:18:20,940 --> 00:18:25,140
functionality was too experimental now

00:18:23,730 --> 00:18:26,850
I'm waiting a couple of seconds to

00:18:25,140 --> 00:18:28,800
install a couple of dependencies and

00:18:26,850 --> 00:18:30,990
right after at angular you versatile

00:18:28,800 --> 00:18:32,880
detect and your fire schematics detected

00:18:30,990 --> 00:18:35,250
that I am inside of an angular universal

00:18:32,880 --> 00:18:38,280
project and suggested me to deploy it as

00:18:35,250 --> 00:18:41,130
a firebase function everything I need to

00:18:38,280 --> 00:18:43,500
do at this point is just agree with the

00:18:41,130 --> 00:18:45,360
firebase schematics and once I do that

00:18:43,500 --> 00:18:47,400
firebase is going to install a couple of

00:18:45,360 --> 00:18:49,470
other dependencies which would help us

00:18:47,400 --> 00:18:51,210
in our deployment it's going to prompt

00:18:49,470 --> 00:18:53,700
us to select one of our fighter firebase

00:18:51,210 --> 00:18:55,050
projects and now we can just run ng

00:18:53,700 --> 00:18:57,840
deploy

00:18:55,050 --> 00:19:00,660
whilst we run ng deploy this is going to

00:18:57,840 --> 00:19:02,309
start - it is going to build our

00:19:00,660 --> 00:19:04,080
application post the client and the

00:19:02,309 --> 00:19:06,120
server and try after that start

00:19:04,080 --> 00:19:08,610
deployment process is going to deployed

00:19:06,120 --> 00:19:10,350
our static assets to firebase hosting so

00:19:08,610 --> 00:19:11,850
it is going to use a CDN and provides

00:19:10,350 --> 00:19:13,950
the static assets from the closest

00:19:11,850 --> 00:19:17,730
location to the user and deploy the

00:19:13,950 --> 00:19:19,800
server to a firebase function well as we

00:19:17,730 --> 00:19:22,080
click on the URL we can see that we

00:19:19,800 --> 00:19:23,760
already have our application deployed to

00:19:22,080 --> 00:19:26,250
firebase hosting and it is all

00:19:23,760 --> 00:19:28,380
server-side rendered so we were able to

00:19:26,250 --> 00:19:31,020
achieve this with just two commands ng

00:19:28,380 --> 00:19:34,220
app and your slash fire and right after

00:19:31,020 --> 00:19:34,220
that ng deploy

00:19:35,299 --> 00:19:42,499
when talking about deployment of

00:19:37,869 --> 00:19:45,379
universal applications we often have a

00:19:42,499 --> 00:19:47,149
couple of things to consider for example

00:19:45,379 --> 00:19:49,100
we already mentioned that we're running

00:19:47,149 --> 00:19:50,570
the application on the server right but

00:19:49,100 --> 00:19:53,179
very often a lot of these applications

00:19:50,570 --> 00:19:55,519
of your rendering they do not change at

00:19:53,179 --> 00:19:57,440
all they're pretty much static applique

00:19:55,519 --> 00:19:59,629
there are pretty much static pages that

00:19:57,440 --> 00:20:02,539
don't depend on any dynamic parameters

00:19:59,629 --> 00:20:05,840
at all what we can do in this case is

00:20:02,539 --> 00:20:08,269
introduce a caching layer a test caching

00:20:05,840 --> 00:20:10,369
clear can help us to speed up the

00:20:08,269 --> 00:20:11,149
server-side rendering and not perform it

00:20:10,369 --> 00:20:13,369
when possible

00:20:11,149 --> 00:20:16,999
so first the user request is going to go

00:20:13,369 --> 00:20:19,220
to this caching there if we find that

00:20:16,999 --> 00:20:21,200
the response associated with this

00:20:19,220 --> 00:20:22,700
request is already there we can directly

00:20:21,200 --> 00:20:24,830
return it to the user and this is going

00:20:22,700 --> 00:20:26,450
to be pretty fast on the other side if

00:20:24,830 --> 00:20:28,820
it is not there we can perform

00:20:26,450 --> 00:20:32,570
server-side rendering catch the response

00:20:28,820 --> 00:20:36,350
and right after that return it to the

00:20:32,570 --> 00:20:38,269
user once the user has the response from

00:20:36,350 --> 00:20:40,369
our search site rendered page we can

00:20:38,269 --> 00:20:42,679
just download audio so here the Java

00:20:40,369 --> 00:20:46,340
scripts and bootstrap the page just

00:20:42,679 --> 00:20:47,149
hydrate and this works all right this is

00:20:46,340 --> 00:20:49,100
great

00:20:47,149 --> 00:20:51,529
in fact but at the same time we have

00:20:49,100 --> 00:20:54,019
this redundant caching player and we're

00:20:51,529 --> 00:20:56,629
rendering a lot of pages that don't

00:20:54,019 --> 00:20:58,489
really have to be rendered at request

00:20:56,629 --> 00:21:00,669
time right because they do not change a

00:20:58,489 --> 00:21:02,960
row so we shouldn't make the user wait

00:21:00,669 --> 00:21:03,830
until this page is rendered on the

00:21:02,960 --> 00:21:05,929
silver at all

00:21:03,830 --> 00:21:07,820
like we should render it ahead of time

00:21:05,929 --> 00:21:10,100
and that is where we can use

00:21:07,820 --> 00:21:11,749
pre-rendering pre-rendering is a

00:21:10,100 --> 00:21:14,179
technique which is very similar to

00:21:11,749 --> 00:21:16,369
server-side rendering but instead of

00:21:14,179 --> 00:21:17,869
rendering the page at request time on

00:21:16,369 --> 00:21:20,359
the server

00:21:17,869 --> 00:21:23,480
we're pre-rendering the pages as part of

00:21:20,359 --> 00:21:25,039
our build process this can speed up a

00:21:23,480 --> 00:21:27,470
lot of things which is going to make our

00:21:25,039 --> 00:21:29,269
deployment may be a little bit slower

00:21:27,470 --> 00:21:31,249
because we have to upload more assets

00:21:29,269 --> 00:21:33,259
and we have to have longer build time

00:21:31,249 --> 00:21:36,529
but at the same time it is going to

00:21:33,259 --> 00:21:39,649
reduce the time required for the user to

00:21:36,529 --> 00:21:41,239
extract to get the initial page because

00:21:39,649 --> 00:21:43,210
we can directly provided from a CDN

00:21:41,239 --> 00:21:46,580
instead of rendering clips on the server

00:21:43,210 --> 00:21:47,929
as part of angular version 9 as Wagner

00:21:46,580 --> 00:21:49,040
already mentioned during the first day

00:21:47,929 --> 00:21:51,050
of the conference

00:21:49,040 --> 00:21:54,260
we already introduced a pre-rendering

00:21:51,050 --> 00:21:56,270
builder for the angular CLI you can boot

00:21:54,260 --> 00:21:58,880
your projects with this pre-rendering

00:21:56,270 --> 00:22:03,080
Buner just by running ng run the name of

00:21:58,880 --> 00:22:05,150
your project : pre-render once you

00:22:03,080 --> 00:22:07,270
trigger this command we're first going

00:22:05,150 --> 00:22:09,770
to build your application we're going to

00:22:07,270 --> 00:22:12,230
produce all the production assets for

00:22:09,770 --> 00:22:15,380
both the angular you were so server and

00:22:12,230 --> 00:22:16,490
for your angular client and right after

00:22:15,380 --> 00:22:19,220
that we're going to start a pre

00:22:16,490 --> 00:22:22,130
rendering process which we played a lots

00:22:19,220 --> 00:22:23,410
to optimize it quite a lot in this case

00:22:22,130 --> 00:22:25,850
you can see that we're pre-rendering

00:22:23,410 --> 00:22:27,560
four hundred pages for less than a

00:22:25,850 --> 00:22:29,330
second and this is only possible because

00:22:27,560 --> 00:22:31,400
we are pre-rendering individual pages on

00:22:29,330 --> 00:22:34,330
different cores of your machine in

00:22:31,400 --> 00:22:34,330
parallel

00:22:34,530 --> 00:22:38,340
so folks from community they did even

00:22:36,450 --> 00:22:41,580
more aggressive experiments here Steve

00:22:38,340 --> 00:22:43,380
pre-rendered ten thousand pages in 75

00:22:41,580 --> 00:22:46,890
seconds and this also includes the view

00:22:43,380 --> 00:22:49,169
time the build time is taking I will see

00:22:46,890 --> 00:22:53,299
probably about a minute out of these 75

00:22:49,169 --> 00:22:53,299
seconds which is pretty impressive

00:22:53,680 --> 00:22:59,740
all these features that I'm talking

00:22:55,810 --> 00:23:01,990
about they're making us even better

00:22:59,740 --> 00:23:03,370
solution for the jam stack if you

00:23:01,990 --> 00:23:04,830
haven't heard about the gem stack this

00:23:03,370 --> 00:23:07,060
is this initiative for building

00:23:04,830 --> 00:23:11,560
client-side applications just by using

00:23:07,060 --> 00:23:14,200
javascript api s-- and markup just by

00:23:11,560 --> 00:23:16,780
deploying them to a CDN this way we can

00:23:14,200 --> 00:23:18,400
build very fast applications and we

00:23:16,780 --> 00:23:20,290
don't have to think about deployment at

00:23:18,400 --> 00:23:22,210
all because these are just static assets

00:23:20,290 --> 00:23:24,700
we can put them on c again and forget

00:23:22,210 --> 00:23:26,800
about with angular universe so you can

00:23:24,700 --> 00:23:29,380
already do that pretty easily you can

00:23:26,800 --> 00:23:31,120
just run ng app and universal stash

00:23:29,380 --> 00:23:33,580
express engine and right after a pre

00:23:31,120 --> 00:23:36,970
render your app and deploy it with

00:23:33,580 --> 00:23:39,280
either ng deploy or with Gaeta there is

00:23:36,970 --> 00:23:39,940
also a fantastic community project by

00:23:39,280 --> 00:23:45,730
hero devs

00:23:39,940 --> 00:23:47,410
skully this project is a booklet static

00:23:45,730 --> 00:23:49,600
site generator with a lot of plugins

00:23:47,410 --> 00:23:51,040
that allow you to provide allow you to

00:23:49,600 --> 00:23:53,350
get the different information from

00:23:51,040 --> 00:23:55,300
different data sources it uses different

00:23:53,350 --> 00:23:57,940
rendering mechanism compared to angular

00:23:55,300 --> 00:24:00,160
Universal instead of using Universal its

00:23:57,940 --> 00:24:02,350
uses the headless browser which visits

00:24:00,160 --> 00:24:04,750
the pages in your application one by one

00:24:02,350 --> 00:24:07,090
which has its own trade-offs it is a

00:24:04,750 --> 00:24:08,560
very complete tradition so it can

00:24:07,090 --> 00:24:11,080
pre-render pretty much any page that

00:24:08,560 --> 00:24:13,090
words in the browser on the other side

00:24:11,080 --> 00:24:14,830
it is a little bit slower compared to

00:24:13,090 --> 00:24:17,200
angular Universal which is really fast

00:24:14,830 --> 00:24:18,970
but at the same time it may not work for

00:24:17,200 --> 00:24:21,190
all of your pages especially if you're

00:24:18,970 --> 00:24:24,020
touching some browser api's that are not

00:24:21,190 --> 00:24:25,640
available in that context

00:24:24,020 --> 00:24:27,980
so I don't know if you felt my

00:24:25,640 --> 00:24:29,360
excitement here and how many times I

00:24:27,980 --> 00:24:31,610
said collaboration between different

00:24:29,360 --> 00:24:33,020
parties but like that's one of the main

00:24:31,610 --> 00:24:34,280
reasons I'm pursuing a career in the

00:24:33,020 --> 00:24:36,200
open-source all this fantastic

00:24:34,280 --> 00:24:40,100
collaboration between different people

00:24:36,200 --> 00:24:41,990
all this dynamic and open world of

00:24:40,100 --> 00:24:44,360
exchanging ideas and knowledge I'm

00:24:41,990 --> 00:24:46,270
really excited about shooting part of

00:24:44,360 --> 00:24:48,200
this open source angular community and

00:24:46,270 --> 00:24:52,360
thank you very much for being part of it

00:24:48,200 --> 00:24:52,360
as well thank you very much

00:24:53,240 --> 00:24:59,360
[Applause]

00:24:53,560 --> 00:25:01,400
[Music]

00:24:59,360 --> 00:25:06,079
[Applause]

00:25:01,400 --> 00:25:06,079

YouTube URL: https://www.youtube.com/watch?v=HuOHJYAkEFI


