Title: The Phantom of the Template Error | Brian Love | ng-conf: Hardwired
Publication date: 2020-07-06
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Lurking below the surface of the templates in your application are half-masked type errors that are closer to surfacing as grotesquely disfigured bugs than you realize. As the director of your application, what are you to do? Manually checking each template would result in an angry mob of engineers. Thankfully you can capture these phantom template errors using Ivyâ€™s new rich template type checking. Pulling away the mask through configuration flags we can reign in the terror once and for all.

Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,320
[Applause]

00:00:05,920 --> 00:00:17,199
[Music]

00:00:16,320 --> 00:00:18,960
all right today

00:00:17,199 --> 00:00:20,320
we're going to be talking about temple

00:00:18,960 --> 00:00:22,880
type checking in

00:00:20,320 --> 00:00:24,560
angular my name is brian love and i'm a

00:00:22,880 --> 00:00:26,160
google developer expert in angular and

00:00:24,560 --> 00:00:28,560
web technologies

00:00:26,160 --> 00:00:30,960
my goal is to help you today to build

00:00:28,560 --> 00:00:32,800
high quality software

00:00:30,960 --> 00:00:34,559
so i've done a lot of high level angular

00:00:32,800 --> 00:00:36,800
architecture reviews for companies

00:00:34,559 --> 00:00:38,719
from small to large and i want to share

00:00:36,800 --> 00:00:40,079
with you a quick story about meeting a

00:00:38,719 --> 00:00:42,079
team

00:00:40,079 --> 00:00:44,000
susan one of the engineers was very

00:00:42,079 --> 00:00:46,320
interested in the goal of building high

00:00:44,000 --> 00:00:47,039
quality software she asked lots of

00:00:46,320 --> 00:00:48,879
questions

00:00:47,039 --> 00:00:50,239
and had a lot of great insight into the

00:00:48,879 --> 00:00:52,239
application

00:00:50,239 --> 00:00:54,000
steve another one of the engineers he

00:00:52,239 --> 00:00:55,920
wasn't quite so interested

00:00:54,000 --> 00:00:57,760
i asked him what his role was on the

00:00:55,920 --> 00:00:59,920
team and he replied simply

00:00:57,760 --> 00:01:01,760
well i come to work i grab a ticket from

00:00:59,920 --> 00:01:04,400
the backlog i submit a pr

00:01:01,760 --> 00:01:05,840
and i'm done i could tell that steve was

00:01:04,400 --> 00:01:08,880
a little frustrated

00:01:05,840 --> 00:01:11,119
i know because i've been there so let me

00:01:08,880 --> 00:01:13,200
ask you a question

00:01:11,119 --> 00:01:14,560
do you want to build high quality

00:01:13,200 --> 00:01:16,640
software

00:01:14,560 --> 00:01:17,600
i asked steve if he wanted to build high

00:01:16,640 --> 00:01:20,479
quality software

00:01:17,600 --> 00:01:22,479
and of course he said yes but i knew

00:01:20,479 --> 00:01:24,000
that i had a little bit of convincing to

00:01:22,479 --> 00:01:25,600
do

00:01:24,000 --> 00:01:27,680
well there are probably some room for

00:01:25,600 --> 00:01:30,400
debate in terms of opinions on what

00:01:27,680 --> 00:01:31,840
exactly defines high quality software

00:01:30,400 --> 00:01:33,680
let me propose that high quality

00:01:31,840 --> 00:01:36,320
software contains fewer bugs

00:01:33,680 --> 00:01:37,439
and to further clarify by what i mean

00:01:36,320 --> 00:01:39,920
let me say that

00:01:37,439 --> 00:01:40,720
high quality software has fewer runtime

00:01:39,920 --> 00:01:44,159
exceptions

00:01:40,720 --> 00:01:46,079
in production well what if i told you

00:01:44,159 --> 00:01:48,799
that we could reduce bugs in our

00:01:46,079 --> 00:01:51,840
applications by up to 15 percent

00:01:48,799 --> 00:01:52,479
so what do i mean i mean 15 fewer

00:01:51,840 --> 00:01:55,920
runtime

00:01:52,479 --> 00:01:58,880
exceptions which means fifteen percent

00:01:55,920 --> 00:02:01,600
fewer issues to triage which means

00:01:58,880 --> 00:02:04,399
fifteen percent fewer fixed branches

00:02:01,600 --> 00:02:07,280
fifteen percent fewer pull requests

00:02:04,399 --> 00:02:10,160
fifteen percent fewer code reviews

00:02:07,280 --> 00:02:11,120
15 fewer red squiggly lines in our

00:02:10,160 --> 00:02:14,160
builds

00:02:11,120 --> 00:02:17,520
and maybe even 15 percent less

00:02:14,160 --> 00:02:20,239
oh man why did i pick this career

00:02:17,520 --> 00:02:22,080
and i'm not making this up truly there's

00:02:20,239 --> 00:02:24,560
a study called to type or not

00:02:22,080 --> 00:02:26,319
to type and this study was created by

00:02:24,560 --> 00:02:27,520
microsoft research in the university of

00:02:26,319 --> 00:02:29,680
college in london

00:02:27,520 --> 00:02:31,840
and the study analyzed over 1 million

00:02:29,680 --> 00:02:33,840
public javascript repositories

00:02:31,840 --> 00:02:36,160
and leveraging the project history they

00:02:33,840 --> 00:02:39,120
selected a bug and checked out the code

00:02:36,160 --> 00:02:41,120
just prior to the fix they then manually

00:02:39,120 --> 00:02:43,280
added type annotations to test

00:02:41,120 --> 00:02:44,959
if type checking would have reported the

00:02:43,280 --> 00:02:48,640
error in the code ahead of time

00:02:44,959 --> 00:02:50,239
the result is that 15 of these bugs

00:02:48,640 --> 00:02:52,319
could have been detected with type

00:02:50,239 --> 00:02:53,360
checking at this point you're probably

00:02:52,319 --> 00:02:55,680
thinking

00:02:53,360 --> 00:02:56,640
geesh brian this sounds good how do i do

00:02:55,680 --> 00:02:59,040
this

00:02:56,640 --> 00:03:00,319
well let me share with you one of the

00:02:59,040 --> 00:03:03,200
features in angular 9

00:03:00,319 --> 00:03:04,720
that i'm most excited about it's called

00:03:03,200 --> 00:03:07,280
template type checking

00:03:04,720 --> 00:03:09,040
with angular version 9 we have vastly

00:03:07,280 --> 00:03:10,000
improved error type checking in our

00:03:09,040 --> 00:03:11,920
templates

00:03:10,000 --> 00:03:13,920
so just like typescript can catch errors

00:03:11,920 --> 00:03:15,360
in your code before merging that pr and

00:03:13,920 --> 00:03:17,599
pushing to production

00:03:15,360 --> 00:03:19,519
so too can we leverage angular's new

00:03:17,599 --> 00:03:21,599
mode for template type checking

00:03:19,519 --> 00:03:24,560
to catch errors in our code ahead of

00:03:21,599 --> 00:03:27,040
time so angular version 9 with iv

00:03:24,560 --> 00:03:27,840
has enabled three new modes for template

00:03:27,040 --> 00:03:30,159
type checking

00:03:27,840 --> 00:03:32,159
we've got basic mode full mode and

00:03:30,159 --> 00:03:34,720
strict mode

00:03:32,159 --> 00:03:36,159
in basic mode angular's type checking is

00:03:34,720 --> 00:03:38,319
most relaxed

00:03:36,159 --> 00:03:40,560
this mode is similar to type checking in

00:03:38,319 --> 00:03:43,120
previous versions of angular

00:03:40,560 --> 00:03:44,720
the next is full mode this mode

00:03:43,120 --> 00:03:46,080
increases the level at which your

00:03:44,720 --> 00:03:48,879
templates are type checked in

00:03:46,080 --> 00:03:50,640
angular 9 with ivy things like embedded

00:03:48,879 --> 00:03:53,280
views and pipes are now type checked

00:03:50,640 --> 00:03:55,439
and that's good and this can help us to

00:03:53,280 --> 00:03:57,680
catch type errors ahead of time

00:03:55,439 --> 00:03:58,560
but we could still have runtime

00:03:57,680 --> 00:04:02,080
exceptions

00:03:58,560 --> 00:04:04,799
lurking in our templates finally

00:04:02,080 --> 00:04:05,360
we have strict mode strict mode like it

00:04:04,799 --> 00:04:08,319
sounds

00:04:05,360 --> 00:04:09,439
performs a strict check of our templates

00:04:08,319 --> 00:04:11,760
this is the mad

00:04:09,439 --> 00:04:13,439
max of template type checking in angular

00:04:11,760 --> 00:04:14,879
9 with iv enabled

00:04:13,439 --> 00:04:16,799
with strict mode you get all the

00:04:14,879 --> 00:04:17,600
benefits of type checking included in

00:04:16,799 --> 00:04:19,519
full mode

00:04:17,600 --> 00:04:21,519
with additional type checking we're

00:04:19,519 --> 00:04:22,160
talking about component binding type

00:04:21,519 --> 00:04:24,400
checking

00:04:22,160 --> 00:04:26,160
event object type checking determining

00:04:24,400 --> 00:04:27,120
the correct type of components and

00:04:26,160 --> 00:04:29,520
directives

00:04:27,120 --> 00:04:30,880
local references to dom elements safe

00:04:29,520 --> 00:04:33,759
navigation expressions

00:04:30,880 --> 00:04:34,479
and more with strict mode we can further

00:04:33,759 --> 00:04:36,639
reduce

00:04:34,479 --> 00:04:37,759
runtime errors and regressions in our

00:04:36,639 --> 00:04:40,080
code

00:04:37,759 --> 00:04:42,560
by leveraging full and strict mode

00:04:40,080 --> 00:04:45,120
configurations with the angular compiler

00:04:42,560 --> 00:04:45,919
i believe that you can reduce bugs in

00:04:45,120 --> 00:04:48,880
your code

00:04:45,919 --> 00:04:48,880
by up to 15

00:04:48,960 --> 00:04:52,560
so i'm at an angular meetup a little bit

00:04:51,040 --> 00:04:53,120
after this architecture review with the

00:04:52,560 --> 00:04:55,360
company

00:04:53,120 --> 00:04:57,040
and i see steve is there and i walk over

00:04:55,360 --> 00:04:59,120
to strike up a conversation with steve

00:04:57,040 --> 00:05:01,039
i say hey how's it going steve uh he

00:04:59,120 --> 00:05:02,800
replies and says hey brian guess what

00:05:01,039 --> 00:05:04,160
you're never going to guess what i did

00:05:02,800 --> 00:05:06,400
today and i said

00:05:04,160 --> 00:05:08,240
what's that steve and he replies and

00:05:06,400 --> 00:05:09,360
says because of the new template type

00:05:08,240 --> 00:05:11,120
checking in angular

00:05:09,360 --> 00:05:13,199
there are now fewer issues in our

00:05:11,120 --> 00:05:16,240
backlog so much so

00:05:13,199 --> 00:05:19,280
that i have more time to do what i love

00:05:16,240 --> 00:05:22,240
and i'm like cool what's that

00:05:19,280 --> 00:05:24,400
and he says tweeting tweeting the best

00:05:22,240 --> 00:05:26,479
memes and gifts on twitter

00:05:24,400 --> 00:05:28,000
in closing i'm not sure what you're

00:05:26,479 --> 00:05:30,320
gonna do with 15

00:05:28,000 --> 00:05:32,080
fewer bugs in your code maybe you can

00:05:30,320 --> 00:05:34,000
spend 15 minutes watching funny cat

00:05:32,080 --> 00:05:35,280
videos on youtube or tweeting out funny

00:05:34,000 --> 00:05:38,400
memes

00:05:35,280 --> 00:05:41,680
you do you but you can be rest assured

00:05:38,400 --> 00:05:43,759
knowing that 15 fewer bugs

00:05:41,680 --> 00:05:45,919
means a better life as an angular

00:05:43,759 --> 00:05:53,610
developer

00:05:45,919 --> 00:05:56,100
thank you very much

00:05:53,610 --> 00:05:58,140
[Music]

00:05:56,100 --> 00:06:01,520
[Applause]

00:05:58,140 --> 00:06:03,600
[Music]

00:06:01,520 --> 00:06:03,600

YouTube URL: https://www.youtube.com/watch?v=_8gx2QsuI74


