Title: How Ivy Will Improve Your Application Architecture | Manfred Steyer | ng-conf: Hardwired
Publication date: 2020-07-15
Playlist: ng-conf 2020: Hardwired
Description: 
	Get your free ticket to EnterpriseNG conference Keynote: https://ng-conf.org

Ivy is primarily associated with smaller bundles and therefore better performance. However, Ivy has much more to offer, and many smart concepts provide the foundation for some much-anticipated future features.

Find out how Ivy’s potential can impact your future architecture. We use a case study to explore a possible future without NgModules, the use of dynamic components or higher-order components, zone-less change detection, and new possibilities for lazy loading and plug-in systems.

In the end, you understand Ivy’s potential and how to start preparing for it today.
Watch all the ng-conf: Hardwired presentations/videos at https://videos.ng-conf.org

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

ng-conf: Hardwired is brought to you by:
- https://thinkster.io/ The best Angular and JavaScript tutorials on the web
- https://herodevs.com/ Engineering and consulting by web development experts
- https://xlts.dev/  Extended support for AngularJS

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,190 --> 00:00:02,970
[Music]

00:00:01,010 --> 00:00:03,980
[Applause]

00:00:02,970 --> 00:00:05,920
[Music]

00:00:03,980 --> 00:00:16,330
[Applause]

00:00:05,920 --> 00:00:19,660
[Music]

00:00:16,330 --> 00:00:23,289
so thanks for having me this will be

00:00:19,660 --> 00:00:25,480
about IV and detect chest and let me

00:00:23,289 --> 00:00:28,119
start with a question did you ever

00:00:25,480 --> 00:00:32,050
wonder what I'd be - behind the curtains

00:00:28,119 --> 00:00:34,059
I mean we've heard a lot of IV so far we

00:00:32,050 --> 00:00:36,879
have seen that IV leads to smaller

00:00:34,059 --> 00:00:39,550
bundles and so on but how does it really

00:00:36,879 --> 00:00:42,610
work well let me give you a small

00:00:39,550 --> 00:00:44,769
example what you see here is a simple

00:00:42,610 --> 00:00:47,140
hello world application with the title

00:00:44,769 --> 00:00:51,070
that is start abounds within the

00:00:47,140 --> 00:00:53,800
templates between two h1 ducts and when

00:00:51,070 --> 00:00:56,769
IV is doing its work first of all the

00:00:53,800 --> 00:01:00,489
typescript compiler it's down labeling

00:00:56,769 --> 00:01:03,670
the component to atmosphere 2015 or to

00:01:00,489 --> 00:01:06,490
eat its ECMO spurt five equivalents that

00:01:03,670 --> 00:01:09,130
looks like that and then IV is adding

00:01:06,490 --> 00:01:11,860
some metadata to its component and this

00:01:09,130 --> 00:01:14,110
metadata is basically a bunch of static

00:01:11,860 --> 00:01:16,390
properties I think the most important

00:01:14,110 --> 00:01:19,210
property is this year that component

00:01:16,390 --> 00:01:22,030
definition which holds a lot of data

00:01:19,210 --> 00:01:24,250
about the component and as you see it

00:01:22,030 --> 00:01:27,429
starts with this prefix it looks a bit

00:01:24,250 --> 00:01:29,050
like a Greek feta and this prefix is

00:01:27,429 --> 00:01:32,470
telling you that we are dealing with

00:01:29,050 --> 00:01:34,959
private API see if we look into this

00:01:32,470 --> 00:01:38,050
metadata you will find the type of the

00:01:34,959 --> 00:01:40,810
component the selectors and you will

00:01:38,050 --> 00:01:43,869
find a template function and this

00:01:40,810 --> 00:01:47,340
template function is basically your HTML

00:01:43,869 --> 00:01:50,440
template compiled by IB into Chavez if

00:01:47,340 --> 00:01:52,869
we look into it we see it has two

00:01:50,440 --> 00:01:55,330
parameters the first parameter is the

00:01:52,869 --> 00:01:58,599
random flag it can have two values

00:01:55,330 --> 00:02:01,209
namely one and two one means we are in

00:01:58,599 --> 00:02:04,270
the creation phase two means we are in

00:02:01,209 --> 00:02:06,910
the update phase well integration phase

00:02:04,270 --> 00:02:10,360
Angola is creating your template it is

00:02:06,910 --> 00:02:13,349
creating all your HTML backs like my h1

00:02:10,360 --> 00:02:17,310
tag and in the update phase it's

00:02:13,349 --> 00:02:20,620
performing data binding it's updating

00:02:17,310 --> 00:02:23,500
the context here is nothing else than

00:02:20,620 --> 00:02:26,710
your component instance in our case the

00:02:23,500 --> 00:02:29,330
instance having a table if we look in

00:02:26,710 --> 00:02:32,900
here we check for the random

00:02:29,330 --> 00:02:35,390
or IV div generated code checks for the

00:02:32,900 --> 00:02:37,790
render flag and if it's wrong the our

00:02:35,390 --> 00:02:41,060
integration phase we will create an

00:02:37,790 --> 00:02:44,450
element here it's an h1 element we will

00:02:41,060 --> 00:02:48,320
create and place hold on the placeholder

00:02:44,450 --> 00:02:52,130
gets the it1 and of course we are well

00:02:48,320 --> 00:02:54,830
behaved so we will close this h1 deck in

00:02:52,130 --> 00:02:56,930
rendering phase 2 in the update phase we

00:02:54,830 --> 00:02:59,840
are jumping to the element with the ID

00:02:56,930 --> 00:03:02,960
bond and then we are interpolating here

00:02:59,840 --> 00:03:06,530
something namely the title the title is

00:03:02,960 --> 00:03:09,380
written into the placeholder and that's

00:03:06,530 --> 00:03:13,400
basically what Ivy is doing behind the

00:03:09,380 --> 00:03:16,880
curtains so as you see here because we

00:03:13,400 --> 00:03:20,180
are very close to the dome we have less

00:03:16,880 --> 00:03:23,060
code this results in smaller bundle

00:03:20,180 --> 00:03:25,310
sizes and we are just using functions

00:03:23,060 --> 00:03:27,650
here as we know functions are tree

00:03:25,310 --> 00:03:30,440
shakable at least more tree shakable

00:03:27,650 --> 00:03:34,820
than methods and this is by IV Espada

00:03:30,440 --> 00:03:39,550
atresia now I want to use this knowledge

00:03:34,820 --> 00:03:42,860
to explain how IB will influence our

00:03:39,550 --> 00:03:45,680
architectures in the future and for this

00:03:42,860 --> 00:03:48,890
I prepared several stuff I will talk

00:03:45,680 --> 00:03:52,100
about lazy components I will talk about

00:03:48,890 --> 00:03:54,860
dynamic components I will talk about

00:03:52,100 --> 00:03:58,190
higher or other components as well as

00:03:54,860 --> 00:04:00,860
about standalone composed so first of

00:03:58,190 --> 00:04:03,560
all let me introduce myself I am unfit

00:04:00,860 --> 00:04:06,200
I'm a trained and consultant for angular

00:04:03,560 --> 00:04:08,180
I am doing a lot of in-house trainings

00:04:06,200 --> 00:04:10,970
for instance this one here which is

00:04:08,180 --> 00:04:13,459
about enterprise applications with

00:04:10,970 --> 00:04:17,270
Angola it's an advanced training and I'm

00:04:13,459 --> 00:04:20,540
also part of the angular community so

00:04:17,270 --> 00:04:22,940
let's start with lazy component saying

00:04:20,540 --> 00:04:26,270
this this guy here is really my soul

00:04:22,940 --> 00:04:29,120
mate and the soul mate of sure likes

00:04:26,270 --> 00:04:31,910
lazy loading I guess and when it comes

00:04:29,120 --> 00:04:33,080
to lazy loading components it's really

00:04:31,910 --> 00:04:35,960
easy baby

00:04:33,080 --> 00:04:38,360
because all you need is this that this

00:04:35,960 --> 00:04:40,340
dynamic import introduced with

00:04:38,360 --> 00:04:43,010
atmospheric 2070

00:04:40,340 --> 00:04:45,530
so you point to the file with your

00:04:43,010 --> 00:04:48,320
component and then you get back an

00:04:45,530 --> 00:04:50,780
object representing the whole file you

00:04:48,320 --> 00:04:53,150
are getting out the right export here

00:04:50,780 --> 00:04:55,640
it's the - portal component you need a

00:04:53,150 --> 00:04:58,640
component factory result well you can

00:04:55,640 --> 00:05:01,250
get hold of by abandon C injection this

00:04:58,640 --> 00:05:03,350
gives you a factory for this component

00:05:01,250 --> 00:05:06,170
and then you can instantiate this

00:05:03,350 --> 00:05:08,960
factory with great component within a

00:05:06,170 --> 00:05:11,630
few container saying this you can get

00:05:08,960 --> 00:05:16,760
hold of the few container by using this

00:05:11,630 --> 00:05:19,790
few child that correct Hey Manfred let

00:05:16,760 --> 00:05:22,430
me show you an example for hey Manfred

00:05:19,790 --> 00:05:25,430
can you hear me let's move out Manfred

00:05:22,430 --> 00:05:28,700
can you hear me yeah I can hear we we

00:05:25,430 --> 00:05:32,540
think that you may be flying by like a

00:05:28,700 --> 00:05:34,340
photon source or some sort of space and

00:05:32,540 --> 00:05:36,260
I'm like is the left the right half of

00:05:34,340 --> 00:05:37,730
your face is totally lighted up and we

00:05:36,260 --> 00:05:40,160
can't really see it well on the stream

00:05:37,730 --> 00:05:42,380
is any way you can close the blinds on

00:05:40,160 --> 00:05:44,240
your window that's because of the

00:05:42,380 --> 00:05:47,990
sunsets give me one second

00:05:44,240 --> 00:05:50,960
yeah yeah it's crazy what happens in

00:05:47,990 --> 00:05:55,550
space these days right like you're just

00:05:50,960 --> 00:06:01,370
flying around yeah on your spaceship and

00:05:55,550 --> 00:06:07,700
and like boat on like someone locks on

00:06:01,370 --> 00:06:09,110
phasers yeah yeah no yeah all right I'm

00:06:07,700 --> 00:06:12,130
turning it back on to you about holla

00:06:09,110 --> 00:06:15,620
you took care of it thank you okay great

00:06:12,130 --> 00:06:20,540
so let's come back to lazy loading what

00:06:15,620 --> 00:06:23,060
we see here is this example with tiles

00:06:20,540 --> 00:06:25,910
and all the tiles here in this dashboard

00:06:23,060 --> 00:06:28,430
are lazy loaded of course everyone can

00:06:25,910 --> 00:06:31,040
claim that lazy loading takes happen

00:06:28,430 --> 00:06:34,340
here so let me prove it to you let's

00:06:31,040 --> 00:06:38,140
jump into our f12 tools let's go to the

00:06:34,340 --> 00:06:41,180
network tab let's click add style and

00:06:38,140 --> 00:06:44,420
it's already lazy loaded one more try

00:06:41,180 --> 00:06:48,650
let's click to add tile and here we see

00:06:44,420 --> 00:06:51,740
it this component is really lazy that

00:06:48,650 --> 00:06:55,509
means we just care the component and

00:06:51,740 --> 00:06:59,720
nothing else so perhaps you're wondering

00:06:55,509 --> 00:07:02,660
why this works with Ivy because that did

00:06:59,720 --> 00:07:05,599
not work before didn't it so it works

00:07:02,660 --> 00:07:09,530
with Ivy because we've ID'd we have

00:07:05,599 --> 00:07:12,770
selfs describing components and that

00:07:09,530 --> 00:07:16,819
means that the component has everything

00:07:12,770 --> 00:07:19,099
we needs to render it at runtime think

00:07:16,819 --> 00:07:22,069
about these components mad about the

00:07:19,099 --> 00:07:25,789
field which is just a static property

00:07:22,069 --> 00:07:29,210
and the angola team is also calling this

00:07:25,789 --> 00:07:31,220
locally principle and so we need just to

00:07:29,210 --> 00:07:34,430
load the component and we are good

00:07:31,220 --> 00:07:37,280
students before that was not possible

00:07:34,430 --> 00:07:39,650
because before the metadata like this

00:07:37,280 --> 00:07:42,500
was part of ng modules and this is the

00:07:39,650 --> 00:07:52,520
very reason why we had to load and she

00:07:42,500 --> 00:07:54,570
modules assume video on top of the

00:07:52,520 --> 00:08:01,400
presentation

00:07:54,570 --> 00:08:04,380
is this one okay great

00:08:01,400 --> 00:08:07,400
so this brings a lot of potential of

00:08:04,380 --> 00:08:10,830
course we can do lazy loading in a very

00:08:07,400 --> 00:08:13,380
fine-grained way and this is also the

00:08:10,830 --> 00:08:16,110
key for partial hydration partial

00:08:13,380 --> 00:08:19,020
dehydration which means you just get an

00:08:16,110 --> 00:08:22,860
index.html a static index.html and

00:08:19,020 --> 00:08:27,780
everything you need will be loaded just

00:08:22,860 --> 00:08:29,880
on demand so for the rest of this

00:08:27,780 --> 00:08:32,190
presentation I have one word of warning

00:08:29,880 --> 00:08:36,600
for you in the rest of this presentation

00:08:32,190 --> 00:08:39,210
I will directly use private API s and as

00:08:36,600 --> 00:08:41,880
you can guess using private API is in

00:08:39,210 --> 00:08:44,820
production is not the best idea I'm

00:08:41,880 --> 00:08:47,940
doing this to show you the potential of

00:08:44,820 --> 00:08:50,760
IP and its potential for future versions

00:08:47,940 --> 00:08:53,430
of angular and I'm also showing this

00:08:50,760 --> 00:08:56,760
because it makes me feel like at a table

00:08:53,430 --> 00:08:59,010
if I'm going with private api's I like

00:08:56,760 --> 00:09:02,580
it if people say hey look at mantra this

00:08:59,010 --> 00:09:05,400
all started let's get started with

00:09:02,580 --> 00:09:08,280
dynamic and higher-order component if

00:09:05,400 --> 00:09:11,310
you look at this here this is a function

00:09:08,280 --> 00:09:13,890
creating a dynamic component and for

00:09:11,310 --> 00:09:16,860
this behave if you just need to create a

00:09:13,890 --> 00:09:19,350
class which works on the fly with

00:09:16,860 --> 00:09:21,780
typescript and JavaScript and then

00:09:19,350 --> 00:09:25,770
everything we need to do else is we need

00:09:21,780 --> 00:09:28,140
to add a property that looks like but IB

00:09:25,770 --> 00:09:30,630
would add at compile time for instance

00:09:28,140 --> 00:09:33,540
this components metadata property and

00:09:30,630 --> 00:09:37,050
when we return this component its

00:09:33,540 --> 00:09:40,050
component can be used as every IP based

00:09:37,050 --> 00:09:43,020
component now let's go one step further

00:09:40,050 --> 00:09:45,390
let's assume we are passing in here

00:09:43,020 --> 00:09:48,300
another component and let's further

00:09:45,390 --> 00:09:51,240
assume we are calling this component as

00:09:48,300 --> 00:09:53,300
part of our template function in this

00:09:51,240 --> 00:09:56,190
case we would have a higher-order

00:09:53,300 --> 00:09:59,400
component a higher-order component is

00:09:56,190 --> 00:10:02,610
just a component that is operating with

00:09:59,400 --> 00:10:04,880
other components and for this I have

00:10:02,610 --> 00:10:09,430
prepared another demonstration for you

00:10:04,880 --> 00:10:13,280
let's move by example for this

00:10:09,430 --> 00:10:16,190
in my example I have its - web page

00:10:13,280 --> 00:10:19,190
component let me show it you in action

00:10:16,190 --> 00:10:22,210
this dashboard page component takes a

00:10:19,190 --> 00:10:27,370
parameter which is called Europe

00:10:22,210 --> 00:10:29,770
let's make a forecast for 1998 I found

00:10:27,370 --> 00:10:32,260
out that making forecasts for the past

00:10:29,770 --> 00:10:35,620
is a bit easier and as you see here this

00:10:32,260 --> 00:10:38,620
year number is displayed here if we look

00:10:35,620 --> 00:10:41,860
into our component we see there is no

00:10:38,620 --> 00:10:44,140
trace of the route at all there is just

00:10:41,860 --> 00:10:47,260
an input and as we all know the route

00:10:44,140 --> 00:10:50,649
itself cannot work with inputs it was

00:10:47,260 --> 00:10:53,890
discussed then Angola was built but

00:10:50,649 --> 00:10:57,490
we've decided that we want to use the

00:10:53,890 --> 00:10:59,800
router explicitly and so what we

00:10:57,490 --> 00:11:02,680
normally need if we don't want to use

00:10:59,800 --> 00:11:05,110
the router within a component we need a

00:11:02,680 --> 00:11:07,390
rapper component a rapper component

00:11:05,110 --> 00:11:09,940
talking to the router taking all the

00:11:07,390 --> 00:11:12,880
parameters and passing them doing boot

00:11:09,940 --> 00:11:15,490
variants of course we could handwrite it

00:11:12,880 --> 00:11:18,790
I have a better solution I've written a

00:11:15,490 --> 00:11:23,770
higher order component works so let's

00:11:18,790 --> 00:11:26,740
switch to our app routes file and UVC

00:11:23,770 --> 00:11:29,709
I'm just pointing to my - webpage

00:11:26,740 --> 00:11:32,740
component and I'm passing it to this

00:11:29,709 --> 00:11:34,990
function be fruit and with root is

00:11:32,740 --> 00:11:38,620
basically creating this dynamic high or

00:11:34,990 --> 00:11:41,279
a component which bias this component to

00:11:38,620 --> 00:11:41,279
the road

00:11:43,360 --> 00:11:51,139
okay so also this has a lot of potential

00:11:48,350 --> 00:11:52,220
for your future architecture it provides

00:11:51,139 --> 00:11:55,220
more dynamic

00:11:52,220 --> 00:11:58,730
I mean creating dynamic components has

00:11:55,220 --> 00:12:01,160
never ever been as easy as that and if

00:11:58,730 --> 00:12:04,160
you ask me it's the key for a lot

00:12:01,160 --> 00:12:07,100
framework extensions it allows us to

00:12:04,160 --> 00:12:09,470
hook into the framework and extend stuff

00:12:07,100 --> 00:12:11,930
on the fly like we have seen before

00:12:09,470 --> 00:12:14,569
I think we will see a lot of open-source

00:12:11,930 --> 00:12:17,660
libraries using those extensions

00:12:14,569 --> 00:12:21,110
interview let's also talk about

00:12:17,660 --> 00:12:24,350
standalone component honestly I'm very

00:12:21,110 --> 00:12:27,410
excited about this topic it's one of my

00:12:24,350 --> 00:12:30,110
favorite topic standalone components

00:12:27,410 --> 00:12:33,649
also means we don't need ng modules

00:12:30,110 --> 00:12:35,630
anymore but if we don't go with ng

00:12:33,649 --> 00:12:39,230
modules there is one question that

00:12:35,630 --> 00:12:42,470
arises namely how does this component

00:12:39,230 --> 00:12:44,630
know that it can access this other

00:12:42,470 --> 00:12:48,759
component here it's per component

00:12:44,630 --> 00:12:51,800
showing a blue a green a red bar and

00:12:48,759 --> 00:12:55,040
honestly it is quite easy with IB

00:12:51,800 --> 00:12:57,139
because IB has this components metadata

00:12:55,040 --> 00:12:59,779
as a static property we've seen it

00:12:57,139 --> 00:13:03,050
before and there is a directive Stef's

00:12:59,779 --> 00:13:05,630
array and this is where we can place all

00:13:03,050 --> 00:13:08,449
the other components we are allowed to

00:13:05,630 --> 00:13:11,269
call I'm calling this the neighborhood

00:13:08,449 --> 00:13:13,310
of the component here the Park component

00:13:11,269 --> 00:13:15,709
would be the neighborhood of the -

00:13:13,310 --> 00:13:18,850
quartile component the official

00:13:15,709 --> 00:13:21,920
technical term is the compilation and

00:13:18,850 --> 00:13:25,490
now you need to be strong because I'm

00:13:21,920 --> 00:13:27,860
telling you that IV is at runtime not

00:13:25,490 --> 00:13:30,110
taking care of your components

00:13:27,860 --> 00:13:32,300
it doesn't need your components it is

00:13:30,110 --> 00:13:35,899
not referencing your components the

00:13:32,300 --> 00:13:40,730
compiler is at compile time transporting

00:13:35,899 --> 00:13:43,470
all the components into this very simple

00:13:40,730 --> 00:13:45,959
saying this just for the sake of

00:13:43,470 --> 00:13:47,819
simplicity I have removed some diaper

00:13:45,959 --> 00:13:50,399
surgeons on this slide

00:13:47,819 --> 00:13:52,649
normally it would be a bit more complex

00:13:50,399 --> 00:13:56,009
slightly more complex to do type

00:13:52,649 --> 00:13:59,069
assertions if you ask yourself how you

00:13:56,009 --> 00:14:02,149
can group components without ng module

00:13:59,069 --> 00:14:05,399
well just they can array like here and

00:14:02,149 --> 00:14:08,399
export this array from within a barrel

00:14:05,399 --> 00:14:11,879
for instance from within and index T as

00:14:08,399 --> 00:14:16,139
file that means that your parallels your

00:14:11,879 --> 00:14:19,459
index TS files will replace hopefully mg

00:14:16,139 --> 00:14:22,019
module in the future saying this

00:14:19,459 --> 00:14:24,660
replacing is perhaps not the best term

00:14:22,019 --> 00:14:27,600
because they will become optional at

00:14:24,660 --> 00:14:30,299
least this is the idea but they will not

00:14:27,600 --> 00:14:33,029
go away because if they are removed this

00:14:30,299 --> 00:14:35,549
would be a breaking change and it did

00:14:33,029 --> 00:14:38,639
not make good experiences with breaking

00:14:35,549 --> 00:14:41,429
changes in the angular community if you

00:14:38,639 --> 00:14:45,600
ask me so don't be afraid it will be an

00:14:41,429 --> 00:14:47,850
option for you okay so Minko get chef

00:14:45,600 --> 00:14:50,730
who is meanwhile part of the angular

00:14:47,850 --> 00:14:52,980
team wrote a proposal for all this it is

00:14:50,730 --> 00:14:55,589
just a prototype and this prototype

00:14:52,980 --> 00:14:58,589
shows that it might be possible to

00:14:55,589 --> 00:15:02,069
extend decorators like the component

00:14:58,589 --> 00:15:05,189
decorator buy and dependencies array you

00:15:02,069 --> 00:15:07,619
can just mention all their components

00:15:05,189 --> 00:15:09,749
you need for this component here where

00:15:07,619 --> 00:15:13,350
you could mentioned enable it is just a

00:15:09,749 --> 00:15:15,740
proposal so we will see if and how this

00:15:13,350 --> 00:15:19,220
will land in a future version of that

00:15:15,740 --> 00:15:24,439
let me show you an demonstration foot's

00:15:19,220 --> 00:15:28,799
so for this we will move back to our

00:15:24,439 --> 00:15:32,369
application and in my application I have

00:15:28,799 --> 00:15:36,029
here these components notice - pod aisle

00:15:32,369 --> 00:15:38,549
module and as you see here before the

00:15:36,029 --> 00:15:41,730
bar component was registered alongside

00:15:38,549 --> 00:15:44,369
that - what aisle component so the -

00:15:41,730 --> 00:15:46,889
fatale component was capable of using

00:15:44,369 --> 00:15:50,220
the power component this is not the case

00:15:46,889 --> 00:15:50,700
anymore but it works anyway so let's

00:15:50,220 --> 00:15:53,340
have

00:15:50,700 --> 00:15:55,980
look into our - bottle component let's

00:15:53,340 --> 00:15:58,710
find out why it works well it works

00:15:55,980 --> 00:16:01,350
because I've written this directive this

00:15:58,710 --> 00:16:04,230
directive which is taking the bar

00:16:01,350 --> 00:16:08,280
components array and registering it with

00:16:04,230 --> 00:16:11,190
in the matter of this very - fatale

00:16:08,280 --> 00:16:13,860
component so basically I'm doing what

00:16:11,190 --> 00:16:16,310
mink coat eats but without for King

00:16:13,860 --> 00:16:16,310
angle

00:16:17,339 --> 00:16:26,080
okay so let's go on it can also boot

00:16:23,350 --> 00:16:28,630
strap standalone components which is

00:16:26,080 --> 00:16:31,029
quite nice just call this ran the

00:16:28,630 --> 00:16:33,790
component function it's still a private

00:16:31,029 --> 00:16:37,390
one pass your angular component and

00:16:33,790 --> 00:16:40,540
that's it it has a lot of potential if

00:16:37,390 --> 00:16:42,970
you ask me it will influence our project

00:16:40,540 --> 00:16:45,640
structure in the future because we don't

00:16:42,970 --> 00:16:47,680
need energy modules anymore we can

00:16:45,640 --> 00:16:50,470
structure big applications with

00:16:47,680 --> 00:16:53,260
libraries for instance with an axe

00:16:50,470 --> 00:16:56,649
libraries and our with barrels with

00:16:53,260 --> 00:16:58,360
index D s files exporting everything we

00:16:56,649 --> 00:17:01,209
need and of course then the loan

00:16:58,360 --> 00:17:05,829
components are a big deal for web

00:17:01,209 --> 00:17:08,530
components if you like this what you've

00:17:05,829 --> 00:17:12,670
seen here check out my blog I've written

00:17:08,530 --> 00:17:14,890
a lot about those possibilities IB will

00:17:12,670 --> 00:17:18,520
provide for future versions of angular

00:17:14,890 --> 00:17:21,280
and if you did not like this talk check

00:17:18,520 --> 00:17:25,030
out my blog anim perhaps I'm writing

00:17:21,280 --> 00:17:27,850
better than am speaking units so let me

00:17:25,030 --> 00:17:29,830
come to a conclusion we've seen that we

00:17:27,850 --> 00:17:32,260
can do lazy loading in a very

00:17:29,830 --> 00:17:36,010
fine-grained way and this is the key for

00:17:32,260 --> 00:17:38,320
partial hydration partial dehydration we

00:17:36,010 --> 00:17:40,290
have seen that we can go with dynamic

00:17:38,320 --> 00:17:42,700
components and with higher-order

00:17:40,290 --> 00:17:45,520
components and at the end of the day

00:17:42,700 --> 00:17:50,830
this is the key for a lot of rainberge

00:17:45,520 --> 00:17:53,559
extensions also standalone component

00:17:50,830 --> 00:17:56,380
provides you a way to structure your

00:17:53,559 --> 00:17:59,920
application justice perils and libraries

00:17:56,380 --> 00:18:04,090
and also this is a big deal for web

00:17:59,920 --> 00:18:07,600
component so we are reaching the end but

00:18:04,090 --> 00:18:10,600
before I'm closing I want you I want to

00:18:07,600 --> 00:18:14,290
give you a side aside from my most

00:18:10,600 --> 00:18:17,830
famous scientist perhaps you know him he

00:18:14,290 --> 00:18:21,400
is a Matt Brown PhD this is how he looks

00:18:17,830 --> 00:18:22,870
like nowadays and he said your future

00:18:21,400 --> 00:18:26,740
hasn't been written yet

00:18:22,870 --> 00:18:28,390
so what Emmet meant is that we see a lot

00:18:26,740 --> 00:18:31,570
of features that are

00:18:28,390 --> 00:18:34,600
because of ivy but currently we don't

00:18:31,570 --> 00:18:37,630
know exactly how those features will end

00:18:34,600 --> 00:18:40,060
up in future versions of angle but we

00:18:37,630 --> 00:18:43,510
know maybe have been written with all

00:18:40,060 --> 00:18:46,150
those ideas in the head but we don't

00:18:43,510 --> 00:18:48,520
know how their public API be looking I'm

00:18:46,150 --> 00:18:51,490
quite sure this was what Emmett Brown

00:18:48,520 --> 00:18:56,410
wanted to tell us at the hand of Back to

00:18:51,490 --> 00:18:59,170
the Future 3 so here is my here are my

00:18:56,410 --> 00:19:02,290
contact data and you will find my slides

00:18:59,170 --> 00:19:04,540
and all my examples live in my block in

00:19:02,290 --> 00:19:06,760
some minutes thanks for having me and

00:19:04,540 --> 00:19:09,670
have a nice day

00:19:06,760 --> 00:19:10,000
[Music]

00:19:09,670 --> 00:19:15,790
[Applause]

00:19:10,000 --> 00:19:17,840
[Music]

00:19:15,790 --> 00:19:22,540
[Applause]

00:19:17,840 --> 00:19:22,540

YouTube URL: https://www.youtube.com/watch?v=6jqIw4dBpZk


