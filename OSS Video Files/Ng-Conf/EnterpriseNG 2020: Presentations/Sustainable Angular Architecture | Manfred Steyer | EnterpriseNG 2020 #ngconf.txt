Title: Sustainable Angular Architecture | Manfred Steyer | EnterpriseNG 2020Â #ngconf
Publication date: 2021-06-21
Playlist: EnterpriseNG 2020: Presentations
Description: 
	Monorepos allow huge enterprise applications to be subdivided into small and maintainable libraries. However, this is only one side of the coin: We need first to define criteria for slicing our application into individual parts and establish rules for communication between them.

This session looks at a solution provided by Strategic Domain-Driven Design. Using an Angular-based case study, we investigate the idea of the ubiquitous language and the bounded context, sub-domains, and context mapping. Building on this, you will learn how to implement these ideas for Angular using a monorepo. We also discuss approaches for reducing coupling between the specific parts of our monorepo.

By the end, you will have a technical solution and appropriate methodology to build sustainable Angular solutions.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts. 

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,120 --> 00:00:17,119
[Music]

00:00:03,840 --> 00:00:21,520
let us

00:00:17,119 --> 00:00:24,160
hi recently i played some computer games

00:00:21,520 --> 00:00:26,240
and i also read this car by the old game

00:00:24,160 --> 00:00:28,320
i've played a lot back then

00:00:26,240 --> 00:00:30,480
perhaps you know it it was called the

00:00:28,320 --> 00:00:33,520
incredible machine

00:00:30,480 --> 00:00:36,079
and the goal of the incredible machine

00:00:33,520 --> 00:00:38,719
balls to trigger a side effect

00:00:36,079 --> 00:00:40,000
at least i would explain it this way

00:00:38,719 --> 00:00:42,879
nowadays being

00:00:40,000 --> 00:00:44,160
and software developer for instance here

00:00:42,879 --> 00:00:46,960
we have a side effect

00:00:44,160 --> 00:00:49,039
because the balling ball is falling down

00:00:46,960 --> 00:00:51,120
it will trigger this cannon

00:00:49,039 --> 00:00:52,800
and the cannon will trigger additional

00:00:51,120 --> 00:00:55,680
stuff but please

00:00:52,800 --> 00:00:57,280
have a look by yourself you see it is

00:00:55,680 --> 00:01:00,559
falling down

00:00:57,280 --> 00:01:01,440
the cannon is triggered and so on and so

00:01:00,559 --> 00:01:04,479
forth

00:01:01,440 --> 00:01:05,439
so this game was really a lot of fun but

00:01:04,479 --> 00:01:08,000
honestly

00:01:05,439 --> 00:01:08,640
if your software architecture looks like

00:01:08,000 --> 00:01:12,159
this

00:01:08,640 --> 00:01:12,720
you really have an issue because in this

00:01:12,159 --> 00:01:16,080
case

00:01:12,720 --> 00:01:19,119
you cannot easily change a thing anymore

00:01:16,080 --> 00:01:20,479
changing something here makes breaking

00:01:19,119 --> 00:01:23,200
something there

00:01:20,479 --> 00:01:23,600
and this is a software that is really

00:01:23,200 --> 00:01:27,439
not

00:01:23,600 --> 00:01:28,320
maintainable to prevent such situations

00:01:27,439 --> 00:01:31,439
you can use

00:01:28,320 --> 00:01:32,640
ideas from domain-driven design which is

00:01:31,439 --> 00:01:35,600
perhaps the only

00:01:32,640 --> 00:01:37,040
methodology bridging the gap between

00:01:35,600 --> 00:01:40,000
your requirements

00:01:37,040 --> 00:01:41,040
and your software architecture or your

00:01:40,000 --> 00:01:44,799
course-grade

00:01:41,040 --> 00:01:47,360
application design if you look more

00:01:44,799 --> 00:01:48,960
closely to domain-driven design you see

00:01:47,360 --> 00:01:51,680
two disciplines

00:01:48,960 --> 00:01:54,079
one is called strategic design the other

00:01:51,680 --> 00:01:56,079
one is called tactical design

00:01:54,079 --> 00:01:59,680
strategic design is more about

00:01:56,079 --> 00:02:02,640
decomposing a big system into tiny parts

00:01:59,680 --> 00:02:03,280
while tactical design is more about

00:02:02,640 --> 00:02:06,399
design

00:02:03,280 --> 00:02:07,600
buttons and practices patterns like

00:02:06,399 --> 00:02:10,800
factories

00:02:07,600 --> 00:02:13,599
like repositories and so on

00:02:10,800 --> 00:02:15,360
as you see here strategic design it is

00:02:13,599 --> 00:02:17,760
more about architecture

00:02:15,360 --> 00:02:19,360
because architecture is all about

00:02:17,760 --> 00:02:22,480
decomposing a big

00:02:19,360 --> 00:02:23,360
chunk into tiny parts and so for the

00:02:22,480 --> 00:02:25,760
time being

00:02:23,360 --> 00:02:28,239
i will stick with this very aspect of

00:02:25,760 --> 00:02:28,239
ddd

00:02:28,560 --> 00:02:33,680
in this talk i will show you how to

00:02:31,040 --> 00:02:36,959
create sustainable architectures

00:02:33,680 --> 00:02:39,360
with ideas from domain design

00:02:36,959 --> 00:02:40,319
and here two terms are very important

00:02:39,360 --> 00:02:43,760
for me

00:02:40,319 --> 00:02:44,480
the first term is sustainable it is not

00:02:43,760 --> 00:02:47,040
about

00:02:44,480 --> 00:02:47,760
doing something in a quick and dirty way

00:02:47,040 --> 00:02:50,720
you know

00:02:47,760 --> 00:02:51,519
it is about investing a bit upfront to

00:02:50,720 --> 00:02:53,840
have a

00:02:51,519 --> 00:02:56,000
software that can be maintained for

00:02:53,840 --> 00:02:59,440
years or decades

00:02:56,000 --> 00:03:00,959
and it's about ideas because for me ddd

00:02:59,440 --> 00:03:03,360
is not a religion

00:03:00,959 --> 00:03:04,800
for me it is a nice toolbox and it

00:03:03,360 --> 00:03:07,440
really has

00:03:04,800 --> 00:03:10,480
some tools that do a good job for

00:03:07,440 --> 00:03:13,680
achieving this very goal

00:03:10,480 --> 00:03:16,080
but now let me tell you about the

00:03:13,680 --> 00:03:18,879
contents of this presentation

00:03:16,080 --> 00:03:21,440
i will tell you two things first of all

00:03:18,879 --> 00:03:22,000
i will show you what strategic design is

00:03:21,440 --> 00:03:24,400
about

00:03:22,000 --> 00:03:25,680
i will give you an overview and then i

00:03:24,400 --> 00:03:28,400
want to show you

00:03:25,680 --> 00:03:30,000
how to implement this idea with

00:03:28,400 --> 00:03:33,280
domain-driven design

00:03:30,000 --> 00:03:36,159
and with monoreapers

00:03:33,280 --> 00:03:36,400
but first of all let me introduce myself

00:03:36,159 --> 00:03:39,280
i

00:03:36,400 --> 00:03:41,920
am manfred i am a trainer and consultant

00:03:39,280 --> 00:03:44,319
and i'm focusing on angular

00:03:41,920 --> 00:03:46,080
i'm doing a lot of remote trainings and

00:03:44,319 --> 00:03:48,560
workshops nowadays

00:03:46,080 --> 00:03:50,319
and when there is not a pandemic i'm

00:03:48,560 --> 00:03:53,360
also doing a lot of stuff

00:03:50,319 --> 00:03:55,519
in-house besides this i'm quite

00:03:53,360 --> 00:03:58,319
connected to the angular community

00:03:55,519 --> 00:03:59,599
i live in austria i'm doing a lot of

00:03:58,319 --> 00:04:02,000
stuff in germany

00:03:59,599 --> 00:04:03,920
and i'm always happy if i can visit

00:04:02,000 --> 00:04:06,480
other countries

00:04:03,920 --> 00:04:07,920
so let's get started with the first

00:04:06,480 --> 00:04:11,439
chapter i've prepared

00:04:07,920 --> 00:04:14,560
it's about strategic design

00:04:11,439 --> 00:04:16,639
so the main idea of strategic design is

00:04:14,560 --> 00:04:19,840
not to write a monolith

00:04:16,639 --> 00:04:22,400
a monoliths that can do everything like

00:04:19,840 --> 00:04:23,120
booking a flight like boarding best

00:04:22,400 --> 00:04:26,560
sensors

00:04:23,120 --> 00:04:29,360
like checking in messengers and so on no

00:04:26,560 --> 00:04:31,280
instead of this big chunk of application

00:04:29,360 --> 00:04:34,080
strategic design tells you

00:04:31,280 --> 00:04:36,240
to create tiny sub-domains like a

00:04:34,080 --> 00:04:39,360
booking domain in our case

00:04:36,240 --> 00:04:41,040
a check-in domain a boarding domain or a

00:04:39,360 --> 00:04:43,440
luggage domain

00:04:41,040 --> 00:04:44,560
and now you should try to isolate your

00:04:43,440 --> 00:04:47,360
subdomains

00:04:44,560 --> 00:04:49,120
tell less than know about each other the

00:04:47,360 --> 00:04:51,680
better it is

00:04:49,120 --> 00:04:53,440
because in this case you can change one

00:04:51,680 --> 00:04:57,280
side without affecting

00:04:53,440 --> 00:04:59,520
another part of the application

00:04:57,280 --> 00:05:00,400
when you have found out about your

00:04:59,520 --> 00:05:03,759
domains

00:05:00,400 --> 00:05:06,560
you should put them into a context map

00:05:03,759 --> 00:05:09,199
this context map also shows you which

00:05:06,560 --> 00:05:11,039
domain needs to communicate with which

00:05:09,199 --> 00:05:13,680
other domains

00:05:11,039 --> 00:05:15,600
in this case each and every domain needs

00:05:13,680 --> 00:05:18,400
to communicate with booking

00:05:15,600 --> 00:05:19,280
because booking knows about all the book

00:05:18,400 --> 00:05:22,000
tickets

00:05:19,280 --> 00:05:24,639
and so it tells the other domains which

00:05:22,000 --> 00:05:27,759
best sensors are allowed to check in

00:05:24,639 --> 00:05:29,199
and which passengers are allowed to give

00:05:27,759 --> 00:05:32,639
you some luggage or

00:05:29,199 --> 00:05:35,440
to board the plane but giving

00:05:32,639 --> 00:05:36,960
all of them direct access and full

00:05:35,440 --> 00:05:40,400
access to booking

00:05:36,960 --> 00:05:43,280
is not a good idea because

00:05:40,400 --> 00:05:44,479
in this case a change within booking

00:05:43,280 --> 00:05:47,919
would influence

00:05:44,479 --> 00:05:50,720
all the other domains you would be

00:05:47,919 --> 00:05:53,600
capable of breaking the whole system

00:05:50,720 --> 00:05:55,919
just by modifying booking

00:05:53,600 --> 00:05:57,280
a bad idea is what they are calling the

00:05:55,919 --> 00:06:00,400
shared kernel

00:05:57,280 --> 00:06:01,039
the shared kernel is just a fancy ddd

00:06:00,400 --> 00:06:04,240
term

00:06:01,039 --> 00:06:07,039
for a bunch of shared libraries

00:06:04,240 --> 00:06:08,639
but the thing is as the shared kernel

00:06:07,039 --> 00:06:12,160
belongs everyone

00:06:08,639 --> 00:06:15,840
at the end of the day it belongs no one

00:06:12,160 --> 00:06:19,039
it is like cleaning a shirt flat

00:06:15,840 --> 00:06:21,360
i've always said well the person who

00:06:19,039 --> 00:06:22,560
thinks that this flat is dirty shall

00:06:21,360 --> 00:06:25,600
clean it

00:06:22,560 --> 00:06:27,280
you can really imagine how this flat

00:06:25,600 --> 00:06:28,960
looked like

00:06:27,280 --> 00:06:30,639
so we really want to prevent the

00:06:28,960 --> 00:06:32,960
situation like this because

00:06:30,639 --> 00:06:34,880
this situation can also introduce

00:06:32,960 --> 00:06:38,160
breaking changes

00:06:34,880 --> 00:06:41,840
a better idea would be to provide an api

00:06:38,160 --> 00:06:44,000
a facade which is exposing only selected

00:06:41,840 --> 00:06:47,280
stuff for other domains

00:06:44,000 --> 00:06:50,479
only a specific service or a tiny

00:06:47,280 --> 00:06:52,880
amount of services and only this

00:06:50,479 --> 00:06:54,639
selected exported stuff needs to be

00:06:52,880 --> 00:06:57,520
backwards compatible

00:06:54,639 --> 00:06:58,080
the rest can be changed rewritten thrown

00:06:57,520 --> 00:07:02,319
away

00:06:58,080 --> 00:07:04,639
as you like with terms of domain driven

00:07:02,319 --> 00:07:07,840
design you would call this api

00:07:04,639 --> 00:07:10,560
open or host service but as you know

00:07:07,840 --> 00:07:11,599
the term service has a different meaning

00:07:10,560 --> 00:07:15,840
in angular

00:07:11,599 --> 00:07:19,280
and so i'm going with the term

00:07:15,840 --> 00:07:22,639
by the way the term api better fits this

00:07:19,280 --> 00:07:22,639
tiny black box here

00:07:23,440 --> 00:07:26,479
if you look into domain driven design

00:07:25,520 --> 00:07:29,520
you will find

00:07:26,479 --> 00:07:32,240
out about a bunch of different

00:07:29,520 --> 00:07:33,520
additional strategies for cross-domain

00:07:32,240 --> 00:07:36,000
communication but

00:07:33,520 --> 00:07:38,720
for the time being i will stick with

00:07:36,000 --> 00:07:38,720
those two

00:07:39,360 --> 00:07:43,120
now let's talk about how we can use this

00:07:42,479 --> 00:07:46,319
idea

00:07:43,120 --> 00:07:48,639
and implement this idea with an annex

00:07:46,319 --> 00:07:51,520
monorepo

00:07:48,639 --> 00:07:53,680
if i need to implement this idea with an

00:07:51,520 --> 00:07:56,240
nx monorepo and honestly

00:07:53,680 --> 00:07:57,360
i've done this with tons of customers in

00:07:56,240 --> 00:07:59,440
the last month

00:07:57,360 --> 00:08:02,240
then the first step would be to

00:07:59,440 --> 00:08:05,759
subdivide the repository

00:08:02,240 --> 00:08:08,000
with directories i would introduce one

00:08:05,759 --> 00:08:11,039
directory pair subdomain

00:08:08,000 --> 00:08:12,000
and then i'm also introducing another

00:08:11,039 --> 00:08:15,520
directory

00:08:12,000 --> 00:08:17,680
for the shared kernel after that

00:08:15,520 --> 00:08:19,039
i can fill those directories with

00:08:17,680 --> 00:08:22,000
libraries

00:08:19,039 --> 00:08:24,400
and the smart people behind nx define

00:08:22,000 --> 00:08:27,919
several categories of libraries

00:08:24,400 --> 00:08:28,560
to make our life easier one category

00:08:27,919 --> 00:08:32,240
here

00:08:28,560 --> 00:08:35,519
is what it's called the feature library

00:08:32,240 --> 00:08:36,880
a feature library contains smart

00:08:35,519 --> 00:08:38,959
components

00:08:36,880 --> 00:08:42,320
you know a smart component is a

00:08:38,959 --> 00:08:45,360
component implementing a use case

00:08:42,320 --> 00:08:48,080
it exactly knows what to do to

00:08:45,360 --> 00:08:49,680
bring the user one step further to a

00:08:48,080 --> 00:08:52,640
specific goal

00:08:49,680 --> 00:08:54,080
and because it has been tailored for a

00:08:52,640 --> 00:08:57,440
specific use case

00:08:54,080 --> 00:08:59,680
it's not that reusable that's why we

00:08:57,440 --> 00:09:00,720
have utility libraries with dump

00:08:59,680 --> 00:09:03,519
components

00:09:00,720 --> 00:09:04,480
they are reusable think about a date

00:09:03,519 --> 00:09:06,959
time because

00:09:04,480 --> 00:09:07,760
you can reuse it within each and every

00:09:06,959 --> 00:09:11,600
use case

00:09:07,760 --> 00:09:14,160
dealing somehow with dates the next kind

00:09:11,600 --> 00:09:16,959
of library is the domain library

00:09:14,160 --> 00:09:18,800
it contains your domain model your

00:09:16,959 --> 00:09:22,560
client-side data model

00:09:18,800 --> 00:09:25,040
and also services operating upon it

00:09:22,560 --> 00:09:26,000
and then we have the utility layer

00:09:25,040 --> 00:09:29,200
having

00:09:26,000 --> 00:09:30,000
utility functions and services for

00:09:29,200 --> 00:09:33,920
instance

00:09:30,000 --> 00:09:35,920
for authentication or for logging

00:09:33,920 --> 00:09:37,200
this brings a lot of order in your

00:09:35,920 --> 00:09:39,680
architecture

00:09:37,200 --> 00:09:42,480
and this guarantees that people don't

00:09:39,680 --> 00:09:44,080
need to think much about where to find a

00:09:42,480 --> 00:09:47,519
specific piece

00:09:44,080 --> 00:09:48,000
because they can orientate themselves by

00:09:47,519 --> 00:09:50,399
their

00:09:48,000 --> 00:09:52,160
vertical domains and by the horizontal

00:09:50,399 --> 00:09:54,560
layers

00:09:52,160 --> 00:09:56,880
so finding out where to put something

00:09:54,560 --> 00:10:00,000
and finding out where to find something

00:09:56,880 --> 00:10:03,200
is quite easy also

00:10:00,000 --> 00:10:05,839
you can introduce access restrictions

00:10:03,200 --> 00:10:06,959
in this case for instance i defined that

00:10:05,839 --> 00:10:10,079
one layer

00:10:06,959 --> 00:10:12,640
is only allowed to access layers below

00:10:10,079 --> 00:10:14,000
here the feature layer is only allowed

00:10:12,640 --> 00:10:16,480
to access the ui

00:10:14,000 --> 00:10:17,279
layer the domain layer and the utility

00:10:16,480 --> 00:10:19,760
layer

00:10:17,279 --> 00:10:22,880
and the domain layer in turn is only

00:10:19,760 --> 00:10:26,000
allowed to talk with the utility layer

00:10:22,880 --> 00:10:28,959
this prevents this intermingle situation

00:10:26,000 --> 00:10:30,640
where everything is highly coupled to

00:10:28,959 --> 00:10:33,120
everything else

00:10:30,640 --> 00:10:34,320
something strategic design tries to

00:10:33,120 --> 00:10:37,200
prevent

00:10:34,320 --> 00:10:39,519
also it prevents cyclists as you know

00:10:37,200 --> 00:10:40,320
cycles are nothing the typescript

00:10:39,519 --> 00:10:44,160
compiler

00:10:40,320 --> 00:10:45,680
is very happy about this is one kind of

00:10:44,160 --> 00:10:48,160
access restriction but

00:10:45,680 --> 00:10:49,200
there is a more important kind of access

00:10:48,160 --> 00:10:52,320
restriction

00:10:49,200 --> 00:10:55,120
namely this one here this kind of

00:10:52,320 --> 00:10:55,839
access restrictions tells you that one

00:10:55,120 --> 00:10:58,399
domain

00:10:55,839 --> 00:10:59,440
is only allowed to talk with its own

00:10:58,399 --> 00:11:02,560
libraries

00:10:59,440 --> 00:11:03,680
and with the shared libraries so in this

00:11:02,560 --> 00:11:06,000
case booking

00:11:03,680 --> 00:11:07,279
is allowed to use booking libraries and

00:11:06,000 --> 00:11:09,440
shared libraries

00:11:07,279 --> 00:11:10,480
boarding is allowed to use boarding

00:11:09,440 --> 00:11:14,000
libraries

00:11:10,480 --> 00:11:16,720
and also shared libraries but booking

00:11:14,000 --> 00:11:19,519
is not allowed to directly communicate

00:11:16,720 --> 00:11:21,839
with boarding and vice versa

00:11:19,519 --> 00:11:22,560
if you want to share something you have

00:11:21,839 --> 00:11:25,920
to put it

00:11:22,560 --> 00:11:26,560
into your shared kernel but as discussed

00:11:25,920 --> 00:11:29,120
before

00:11:26,560 --> 00:11:31,600
the shared kernel is a bit problematic

00:11:29,120 --> 00:11:35,200
and so it would be a nice idea to

00:11:31,600 --> 00:11:39,360
introduce this api we've talked about

00:11:35,200 --> 00:11:40,240
an api exposing selected stuff from one

00:11:39,360 --> 00:11:42,959
domain

00:11:40,240 --> 00:11:43,519
for other domains but only selected

00:11:42,959 --> 00:11:45,279
stuff

00:11:43,519 --> 00:11:48,399
and only this stuff needs to be

00:11:45,279 --> 00:11:50,639
backwards compatible

00:11:48,399 --> 00:11:52,079
perhaps you're seeing now well that

00:11:50,639 --> 00:11:55,279
looks nice

00:11:52,079 --> 00:11:58,320
we have access restrictions everything

00:11:55,279 --> 00:12:00,079
is in place everything has its very own

00:11:58,320 --> 00:12:03,200
blaze in this matrix

00:12:00,079 --> 00:12:05,360
but somehow it's overwhelming well

00:12:03,200 --> 00:12:06,959
as a matter in fact it's not that

00:12:05,360 --> 00:12:09,680
overwhelming at all

00:12:06,959 --> 00:12:11,040
one reason is it is normally not a full

00:12:09,680 --> 00:12:14,320
rectangle

00:12:11,040 --> 00:12:16,240
normally you only have feature libraries

00:12:14,320 --> 00:12:17,120
and domain libraries in their real

00:12:16,240 --> 00:12:20,000
domains

00:12:17,120 --> 00:12:22,720
and you have reusable ui libraries and

00:12:20,000 --> 00:12:25,040
utility libraries in shared

00:12:22,720 --> 00:12:26,160
of course there are exceptions to each

00:12:25,040 --> 00:12:29,040
and every rule

00:12:26,160 --> 00:12:30,240
let's say you have a ui library you only

00:12:29,040 --> 00:12:32,800
need for boarding

00:12:30,240 --> 00:12:36,480
then you would put it into boarding to

00:12:32,800 --> 00:12:36,480
prevent this highly coupled

00:12:36,839 --> 00:12:41,600
situation

00:12:38,480 --> 00:12:42,560
also generating libraries is a piece of

00:12:41,600 --> 00:12:45,839
cake

00:12:42,560 --> 00:12:49,279
it is as difficult as generating an

00:12:45,839 --> 00:12:50,320
ng module only type in one command on

00:12:49,279 --> 00:12:54,000
command line

00:12:50,320 --> 00:12:58,480
and you were good okay

00:12:54,000 --> 00:12:58,480
now let me show you everything in action

00:12:59,120 --> 00:13:03,120
for this i have prepared an empty nx

00:13:01,839 --> 00:13:05,760
workspace

00:13:03,120 --> 00:13:06,720
and instead of creating all my libraries

00:13:05,760 --> 00:13:10,480
by hand

00:13:06,720 --> 00:13:12,480
i used this nbm package it's a very tiny

00:13:10,480 --> 00:13:14,880
nbm back catch i've written

00:13:12,480 --> 00:13:15,519
it contains some schematics to make it

00:13:14,880 --> 00:13:17,279
easy

00:13:15,519 --> 00:13:19,040
to create the structure we've seen

00:13:17,279 --> 00:13:23,360
before

00:13:19,040 --> 00:13:23,360
if we look into our dependency graph

00:13:24,320 --> 00:13:30,880
you will see two domains select all

00:13:28,079 --> 00:13:32,079
you see two domain the first domain is

00:13:30,880 --> 00:13:35,200
about booking

00:13:32,079 --> 00:13:36,000
it has one feature and one domain

00:13:35,200 --> 00:13:38,720
library

00:13:36,000 --> 00:13:40,480
the other domain is about luggage it

00:13:38,720 --> 00:13:43,760
consists of two features

00:13:40,480 --> 00:13:44,560
and also one domain library and as you

00:13:43,760 --> 00:13:47,120
see here

00:13:44,560 --> 00:13:48,240
those domains are isolated from each

00:13:47,120 --> 00:13:51,519
other

00:13:48,240 --> 00:13:52,720
it is forbidden to directly access the

00:13:51,519 --> 00:13:55,199
booking domain

00:13:52,720 --> 00:13:57,600
from within let's say luggage feature

00:13:55,199 --> 00:14:00,560
report loss

00:13:57,600 --> 00:14:01,440
this is forbidden if you try to do this

00:14:00,560 --> 00:14:04,800
you would get

00:14:01,440 --> 00:14:07,360
immediately a lending error if you want

00:14:04,800 --> 00:14:10,639
to reuse stuff from another domain

00:14:07,360 --> 00:14:14,000
you have to go via a shared kernel

00:14:10,639 --> 00:14:16,160
or by an api

00:14:14,000 --> 00:14:17,760
for instance the booking domain could

00:14:16,160 --> 00:14:20,959
expose an api

00:14:17,760 --> 00:14:24,399
which is in turn exposing selected stuff

00:14:20,959 --> 00:14:27,120
from its own booking domain

00:14:24,399 --> 00:14:29,760
but directly accessing something in

00:14:27,120 --> 00:14:33,519
another domain is forbidden

00:14:29,760 --> 00:14:36,959
now let's have a look into this

00:14:33,519 --> 00:14:40,079
if we look into this solution

00:14:36,959 --> 00:14:41,680
let me close the folders you see here a

00:14:40,079 --> 00:14:44,560
library

00:14:41,680 --> 00:14:46,720
folder and this library folder contains

00:14:44,560 --> 00:14:49,040
one subfolder battle main

00:14:46,720 --> 00:14:50,399
there is a booking folder there is a

00:14:49,040 --> 00:14:53,440
luggage folder

00:14:50,399 --> 00:14:56,560
and when we look into luggage we see one

00:14:53,440 --> 00:15:00,160
feature library another feature library

00:14:56,560 --> 00:15:01,760
and our domain library everything within

00:15:00,160 --> 00:15:04,720
those libraries is just

00:15:01,760 --> 00:15:06,560
traditional angular code but thanks to

00:15:04,720 --> 00:15:07,440
having libraries thanks to having

00:15:06,560 --> 00:15:10,399
domains

00:15:07,440 --> 00:15:11,360
everything is organized nicely and at

00:15:10,399 --> 00:15:13,519
first sight

00:15:11,360 --> 00:15:14,959
by looking at the folder name or at the

00:15:13,519 --> 00:15:18,639
prefix feature

00:15:14,959 --> 00:15:19,199
we know where this very library belongs

00:15:18,639 --> 00:15:23,760
to

00:15:19,199 --> 00:15:23,760
in our architecture matrix

00:15:24,639 --> 00:15:31,519
now let's try to do something ugly

00:15:27,760 --> 00:15:35,360
let's move to luggage feature

00:15:31,519 --> 00:15:38,160
luggage feature repo atlas

00:15:35,360 --> 00:15:41,680
and here let's try to import something

00:15:38,160 --> 00:15:45,839
from another domain

00:15:41,680 --> 00:15:49,040
for instance from our domain

00:15:45,839 --> 00:15:49,040
which is about booking

00:15:51,040 --> 00:15:55,440
so as you see here we immediately get

00:15:53,600 --> 00:15:57,759
their linting error

00:15:55,440 --> 00:15:58,880
and this linting error is telling us

00:15:57,759 --> 00:16:01,759
that a broadcast

00:15:58,880 --> 00:16:04,000
tagged with domain luggage can only

00:16:01,759 --> 00:16:06,959
depend on other projects

00:16:04,000 --> 00:16:08,720
within the luggage domain and it can

00:16:06,959 --> 00:16:11,600
also depend upon

00:16:08,720 --> 00:16:13,920
uh libraries that are shared that are

00:16:11,600 --> 00:16:17,279
part of the shiatka

00:16:13,920 --> 00:16:18,160
so our architectural matrix is enforced

00:16:17,279 --> 00:16:21,199
here

00:16:18,160 --> 00:16:25,199
and axe is doing this for us

00:16:21,199 --> 00:16:26,240
and to make an x doing this we just need

00:16:25,199 --> 00:16:29,279
to configure it

00:16:26,240 --> 00:16:31,680
it is just a matter of two json files

00:16:29,279 --> 00:16:34,480
the first json file is defining

00:16:31,680 --> 00:16:37,199
categories for your libraries

00:16:34,480 --> 00:16:39,199
here i've used the category domain

00:16:37,199 --> 00:16:41,959
luggage and domain shared

00:16:39,199 --> 00:16:43,759
and the other file which is the

00:16:41,959 --> 00:16:46,720
tslind.json file

00:16:43,759 --> 00:16:47,360
in future it will be the eslint json

00:16:46,720 --> 00:16:50,320
file

00:16:47,360 --> 00:16:51,279
is defining that a library from this

00:16:50,320 --> 00:16:53,920
category

00:16:51,279 --> 00:16:56,880
is only allowed to use libraries

00:16:53,920 --> 00:16:58,959
associated with another category

00:16:56,880 --> 00:17:00,079
so at the end of the day it is really

00:16:58,959 --> 00:17:03,279
just a matter

00:17:00,079 --> 00:17:07,120
of configuring those access restrictions

00:17:03,279 --> 00:17:09,919
within your json files

00:17:07,120 --> 00:17:12,160
also you get the same result when

00:17:09,919 --> 00:17:12,720
limiting your application at command

00:17:12,160 --> 00:17:15,919
line

00:17:12,720 --> 00:17:19,760
let me zoom in a bit let's do an ng

00:17:15,919 --> 00:17:24,959
lint and here i want to lint luggage

00:17:19,760 --> 00:17:24,959
feature report loss

00:17:28,880 --> 00:17:33,600
and yeah we get the same lending error i

00:17:31,919 --> 00:17:36,799
was never that happy

00:17:33,600 --> 00:17:39,679
about getting an error before because

00:17:36,799 --> 00:17:40,400
this means that you can introduce this

00:17:39,679 --> 00:17:42,880
check

00:17:40,400 --> 00:17:43,679
into your build server into your build

00:17:42,880 --> 00:17:46,960
scripts

00:17:43,679 --> 00:17:48,080
making sure that no one is never ever

00:17:46,960 --> 00:17:50,880
breaking your

00:17:48,080 --> 00:17:50,880
architecture

00:17:53,440 --> 00:17:56,480
so as you have seen here this all is

00:17:56,000 --> 00:17:59,200
about

00:17:56,480 --> 00:18:00,000
fine grained libraries you're using

00:17:59,200 --> 00:18:02,880
libraries

00:18:00,000 --> 00:18:03,520
instead of energy modules and so you can

00:18:02,880 --> 00:18:06,240
define

00:18:03,520 --> 00:18:06,799
fine grained access restrictions by the

00:18:06,240 --> 00:18:10,080
way

00:18:06,799 --> 00:18:13,520
fine grained libraries also allow for

00:18:10,080 --> 00:18:16,400
incremental recompilation and testing

00:18:13,520 --> 00:18:17,200
that means only the changed libraries

00:18:16,400 --> 00:18:20,480
needs to be

00:18:17,200 --> 00:18:23,360
retested and recompiled the rest is

00:18:20,480 --> 00:18:26,320
taking out from a cache

00:18:23,360 --> 00:18:27,280
it's another nice feature of nx and

00:18:26,320 --> 00:18:30,640
saying this

00:18:27,280 --> 00:18:32,160
you will really use libraries instead of

00:18:30,640 --> 00:18:35,440
ng modules

00:18:32,160 --> 00:18:36,559
while each library gets one ng module

00:18:35,440 --> 00:18:38,720
generated

00:18:36,559 --> 00:18:40,640
and that's really easy you can go with

00:18:38,720 --> 00:18:44,880
ng generate library

00:18:40,640 --> 00:18:48,160
you can also use my helper library with

00:18:44,880 --> 00:18:48,160
some helpers kinetics

00:18:48,240 --> 00:18:51,679
by the way there is another nice talk in

00:18:50,400 --> 00:18:54,320
this conference

00:18:51,679 --> 00:18:54,799
it is done by my good old friend yuri

00:18:54,320 --> 00:18:57,360
and

00:18:54,799 --> 00:19:01,360
he exactly talks about this incremental

00:18:57,360 --> 00:19:03,679
compilation aspect of annex

00:19:01,360 --> 00:19:04,880
also if you like this presentation

00:19:03,679 --> 00:19:08,080
perhaps you also

00:19:04,880 --> 00:19:09,039
like my free ebook you can download it

00:19:08,080 --> 00:19:11,039
here

00:19:09,039 --> 00:19:12,640
and there is a final thought i want to

00:19:11,039 --> 00:19:15,640
give you namely

00:19:12,640 --> 00:19:17,120
the main thinking is also the key for

00:19:15,640 --> 00:19:19,559
microfrontends

00:19:17,120 --> 00:19:20,960
because what are microfrontends

00:19:19,559 --> 00:19:24,160
microfrontends are

00:19:20,960 --> 00:19:27,200
a tiny piece of a bigger software system

00:19:24,160 --> 00:19:28,320
a tiny piece which is isolated from the

00:19:27,200 --> 00:19:31,520
other pieces

00:19:28,320 --> 00:19:33,840
to make it more maintainable and the

00:19:31,520 --> 00:19:36,480
foundation for cutting something

00:19:33,840 --> 00:19:37,679
into pieces is at the end of the day

00:19:36,480 --> 00:19:42,480
domain thinking

00:19:37,679 --> 00:19:42,480
domain modeling strategic domain design

00:19:42,720 --> 00:19:46,480
so let me sum everything up what did we

00:19:45,520 --> 00:19:48,480
see today

00:19:46,480 --> 00:19:51,840
we've seen that slicing a big

00:19:48,480 --> 00:19:52,799
application into subdomain is beneficial

00:19:51,840 --> 00:19:55,919
you'll get

00:19:52,799 --> 00:19:58,160
more or less independent parts which can

00:19:55,919 --> 00:20:01,440
be evolved separately

00:19:58,160 --> 00:20:03,760
without destroying anything else we've

00:20:01,440 --> 00:20:06,720
seen that using fine grained libraries

00:20:03,760 --> 00:20:07,840
is nice in order to introduce access

00:20:06,720 --> 00:20:10,640
restrictions

00:20:07,840 --> 00:20:13,440
you can really enforce them with lending

00:20:10,640 --> 00:20:16,159
when it comes to annex

00:20:13,440 --> 00:20:17,520
and there is a last thing i really want

00:20:16,159 --> 00:20:20,880
you to remember

00:20:17,520 --> 00:20:21,760
please never ever forget it if i forgot

00:20:20,880 --> 00:20:25,840
everything

00:20:21,760 --> 00:20:28,960
please remember this one thing namely

00:20:25,840 --> 00:20:29,360
don't make your software architecture to

00:20:28,960 --> 00:20:32,960
be

00:20:29,360 --> 00:20:37,360
an incredible machine it's a nice game

00:20:32,960 --> 00:20:39,120
but it's not a good architecture

00:20:37,360 --> 00:20:42,000
here you'll find my coordinates

00:20:39,120 --> 00:20:43,120
meanwhile i've uploaded all my material

00:20:42,000 --> 00:20:46,400
my examples

00:20:43,120 --> 00:20:49,520
and my slides to my blog and if you want

00:20:46,400 --> 00:20:52,720
follow me on twitter so that we can stay

00:20:49,520 --> 00:20:53,840
in contact thanks for having me it was

00:20:52,720 --> 00:20:58,039
really a pleasure

00:20:53,840 --> 00:21:01,039
and have a nice day have a nice

00:20:58,039 --> 00:21:01,039

YouTube URL: https://www.youtube.com/watch?v=hVHqGT5U5rA


