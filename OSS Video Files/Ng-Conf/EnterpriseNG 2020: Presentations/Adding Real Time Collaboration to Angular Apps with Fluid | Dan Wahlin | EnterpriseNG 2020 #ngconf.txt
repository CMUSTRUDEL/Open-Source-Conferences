Title: Adding Real Time Collaboration to Angular Apps with Fluid | Dan Wahlin | EnterpriseNG 2020 #ngconf
Publication date: 2021-04-26
Playlist: EnterpriseNG 2020: Presentations
Description: 
	As more and more of us work remotely the need for real time collaboration within applications is becoming increasingly important. How do you add a robust set of real time collaboration features into your app though? In this session, Dan Wahlin will discuss how to make that happen with a new Open Source project called “Fluid”. You’ll learn the “what, why, and how’s” of Fluid, what Fluid offers over raw web sockets, and how you can get started using Fluid in your applications.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket 👉 https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconf​ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,120 --> 00:00:17,359
[Music]

00:00:03,840 --> 00:00:19,119
let us

00:00:17,359 --> 00:00:21,279
well welcome everyone my name is dan

00:00:19,119 --> 00:00:22,000
walne and i'm excited to be here at

00:00:21,279 --> 00:00:23,760
another ng

00:00:22,000 --> 00:00:26,160
conf to talk to you about adding real

00:00:23,760 --> 00:00:27,760
time collaboration into your apps

00:00:26,160 --> 00:00:29,439
using something called the fluid

00:00:27,760 --> 00:00:31,519
framework and that's a brand new open

00:00:29,439 --> 00:00:32,960
source project from microsoft

00:00:31,519 --> 00:00:34,559
so we're going to talk about what fluid

00:00:32,960 --> 00:00:35,680
is how you could use it and how you can

00:00:34,559 --> 00:00:39,040
get started

00:00:35,680 --> 00:00:41,120
in this particular talk now first off in

00:00:39,040 --> 00:00:42,800
2020 it's definitely been a rough year i

00:00:41,120 --> 00:00:44,800
think for all of us so i hope you're

00:00:42,800 --> 00:00:46,000
healthy and safe and all those good

00:00:44,800 --> 00:00:48,800
things

00:00:46,000 --> 00:00:49,360
but i think part of going through 2020

00:00:48,800 --> 00:00:52,480
has been

00:00:49,360 --> 00:00:54,239
really upping our level of collaboration

00:00:52,480 --> 00:00:55,920
i know i work with a team that's now

00:00:54,239 --> 00:00:56,879
distributed across the world in fact

00:00:55,920 --> 00:00:58,399
some people have

00:00:56,879 --> 00:01:00,160
moved to other locations because they

00:00:58,399 --> 00:01:03,039
can now and

00:01:00,160 --> 00:01:04,479
you know we use teams or maybe use zoom

00:01:03,039 --> 00:01:06,560
or something like that to collaborate

00:01:04,479 --> 00:01:08,640
with audio and visual

00:01:06,560 --> 00:01:10,640
and chat and things like that but when

00:01:08,640 --> 00:01:11,920
it comes down to your apps themselves

00:01:10,640 --> 00:01:12,799
your custom maps how are you

00:01:11,920 --> 00:01:15,200
collaborating

00:01:12,799 --> 00:01:17,040
right now and when's the last time you

00:01:15,200 --> 00:01:18,640
actually thought about that

00:01:17,040 --> 00:01:20,560
thought about adding real time

00:01:18,640 --> 00:01:22,400
collaboration to your app

00:01:20,560 --> 00:01:23,920
and i'm going to offer for most of us we

00:01:22,400 --> 00:01:24,799
probably haven't thought about that

00:01:23,920 --> 00:01:26,799
because it's just

00:01:24,799 --> 00:01:27,920
not really something that was that easy

00:01:26,799 --> 00:01:30,000
to do

00:01:27,920 --> 00:01:31,360
sure there's websockets for real-time

00:01:30,000 --> 00:01:33,360
communication

00:01:31,360 --> 00:01:35,600
but real time collaboration gets pretty

00:01:33,360 --> 00:01:37,680
tricky and we'll talk through this so

00:01:35,600 --> 00:01:39,439
i'm gonna propose that i think over the

00:01:37,680 --> 00:01:40,479
next few years we're gonna see more of

00:01:39,439 --> 00:01:43,360
what i like to call

00:01:40,479 --> 00:01:44,479
a collaboration first design process and

00:01:43,360 --> 00:01:47,600
this is where

00:01:44,479 --> 00:01:48,799
we start designing the app but literally

00:01:47,600 --> 00:01:51,439
start going hey

00:01:48,799 --> 00:01:53,520
do we think multiple users might need to

00:01:51,439 --> 00:01:54,000
interact at exactly the same time in

00:01:53,520 --> 00:01:56,560
like this

00:01:54,000 --> 00:01:57,920
data grid in this calendar as they're

00:01:56,560 --> 00:02:00,479
drawing on a map with

00:01:57,920 --> 00:02:01,040
ink on a tablet or a phone and the list

00:02:00,479 --> 00:02:03,600
goes on

00:02:01,040 --> 00:02:05,200
games would be another example you know

00:02:03,600 --> 00:02:05,680
are we going to build that in from the

00:02:05,200 --> 00:02:07,840
start

00:02:05,680 --> 00:02:08,720
instead of thinking about it after the

00:02:07,840 --> 00:02:11,039
fact

00:02:08,720 --> 00:02:13,200
because as more and more of us work in

00:02:11,039 --> 00:02:15,120
distributed locations

00:02:13,200 --> 00:02:17,360
obviously that's going to change how we

00:02:15,120 --> 00:02:19,360
work with applications i'm sure there's

00:02:17,360 --> 00:02:21,599
been apps you've worked on

00:02:19,360 --> 00:02:23,040
where you wish that as somebody changed

00:02:21,599 --> 00:02:23,599
something because maybe you're on a call

00:02:23,040 --> 00:02:27,120
on like

00:02:23,599 --> 00:02:28,400
uh zoom for example or teams and

00:02:27,120 --> 00:02:29,680
you know they changed it and then you're

00:02:28,400 --> 00:02:31,760
like okay did you make the change

00:02:29,680 --> 00:02:33,440
they're like yeah then you gotta refresh

00:02:31,760 --> 00:02:34,319
or you have to wait for a timer now

00:02:33,440 --> 00:02:35,440
could you do some of that with

00:02:34,319 --> 00:02:38,400
websockets

00:02:35,440 --> 00:02:39,599
absolutely some of it but it gets a

00:02:38,400 --> 00:02:41,440
little tricky when you start

00:02:39,599 --> 00:02:44,480
collaborating at the string level

00:02:41,440 --> 00:02:46,000
think of google docs or word online

00:02:44,480 --> 00:02:47,680
that gets a lot trickier and you have to

00:02:46,000 --> 00:02:50,560
have algorithms like total order

00:02:47,680 --> 00:02:52,319
broadcasts crdts and others

00:02:50,560 --> 00:02:54,000
to actually make that even possible

00:02:52,319 --> 00:02:56,480
because it's really tricky

00:02:54,000 --> 00:02:57,440
to merge multiple people's collaborative

00:02:56,480 --> 00:02:59,200
data

00:02:57,440 --> 00:03:00,800
into each of the clients in the proper

00:02:59,200 --> 00:03:03,040
order in the proper time

00:03:00,800 --> 00:03:04,959
all that stuff so to kind of get you

00:03:03,040 --> 00:03:07,840
thinking about this let me run off to

00:03:04,959 --> 00:03:09,120
uh the fluidframework.com website you

00:03:07,840 --> 00:03:11,440
can get to the docs

00:03:09,120 --> 00:03:13,280
api docs all that stuff here you can go

00:03:11,440 --> 00:03:14,959
to the github repo here

00:03:13,280 --> 00:03:16,720
but i'm going to run the playground and

00:03:14,959 --> 00:03:18,080
just run some really quick demos to get

00:03:16,720 --> 00:03:19,040
you thinking here and the first one i'm

00:03:18,080 --> 00:03:20,239
going to run

00:03:19,040 --> 00:03:22,239
and i'm going to show you an angular

00:03:20,239 --> 00:03:23,840
version of this coming up it's called

00:03:22,239 --> 00:03:27,440
brainstorm

00:03:23,840 --> 00:03:28,000
and this allows you to add in a sticky

00:03:27,440 --> 00:03:30,400
note

00:03:28,000 --> 00:03:32,640
and then share it with others who are

00:03:30,400 --> 00:03:35,120
also connected to this current

00:03:32,640 --> 00:03:36,159
collaborative session we'll call it so

00:03:35,120 --> 00:03:38,560
at least one

00:03:36,159 --> 00:03:40,080
free day each week where we don't have

00:03:38,560 --> 00:03:41,760
uh meetings yeah i

00:03:40,080 --> 00:03:43,680
i'm in favor of that all in favor i

00:03:41,760 --> 00:03:45,280
think we would all like that

00:03:43,680 --> 00:03:47,040
so this person sees and goes oh yeah i

00:03:45,280 --> 00:03:48,560
love that idea and they vote on it and

00:03:47,040 --> 00:03:50,640
you can see it instantly shows up

00:03:48,560 --> 00:03:51,760
now while this is in the same browser

00:03:50,640 --> 00:03:54,720
obviously

00:03:51,760 --> 00:03:56,319
it is using fluid under the covers so

00:03:54,720 --> 00:03:58,000
all the stuff i'm going to show you

00:03:56,319 --> 00:03:59,519
it would work this way or you could do

00:03:58,000 --> 00:04:00,000
it for real where you have multiple

00:03:59,519 --> 00:04:01,840
people

00:04:00,000 --> 00:04:03,920
in you know even different countries

00:04:01,840 --> 00:04:06,239
doing this now let me add another one

00:04:03,920 --> 00:04:07,680
we need fewer motivational posters okay

00:04:06,239 --> 00:04:09,200
i don't know if that's good right now

00:04:07,680 --> 00:04:11,040
probably we need the opposite of that

00:04:09,200 --> 00:04:13,200
but we'll go ahead and do that

00:04:11,040 --> 00:04:14,400
uh they want a gym where we can work out

00:04:13,200 --> 00:04:17,359
with personal trainers

00:04:14,400 --> 00:04:19,280
okay great and we can even type in here

00:04:17,359 --> 00:04:20,799
i could say dan's idea or in this case

00:04:19,280 --> 00:04:23,040
it looks like we have a user over here

00:04:20,799 --> 00:04:26,160
to the right emery

00:04:23,040 --> 00:04:27,759
share idea formal friday

00:04:26,160 --> 00:04:29,520
i'm not voting for that one i don't do

00:04:27,759 --> 00:04:32,800
ties but anyway

00:04:29,520 --> 00:04:35,280
we can now vote we can collaborate live

00:04:32,800 --> 00:04:36,960
and this would be a perfect use case of

00:04:35,280 --> 00:04:38,800
real-time collaboration

00:04:36,960 --> 00:04:40,240
it could be on agendas it could be

00:04:38,800 --> 00:04:42,800
drawing like i said inc

00:04:40,240 --> 00:04:44,320
on maps or other diagrams there's all

00:04:42,800 --> 00:04:45,919
kinds of scenarios

00:04:44,320 --> 00:04:47,680
so could you do this with just

00:04:45,919 --> 00:04:50,320
websockets

00:04:47,680 --> 00:04:51,919
i would argue you could because at this

00:04:50,320 --> 00:04:53,759
level we're a little higher level

00:04:51,919 --> 00:04:55,280
we're not so concerned about order of

00:04:53,759 --> 00:04:57,360
the sticky notes

00:04:55,280 --> 00:04:58,880
we're not allowing people to type into

00:04:57,360 --> 00:05:01,840
these at the same time

00:04:58,880 --> 00:05:03,919
they each get their own so really we're

00:05:01,840 --> 00:05:05,440
just sending messages back and forth and

00:05:03,919 --> 00:05:07,120
syncing them but that is

00:05:05,440 --> 00:05:08,880
a higher level thing you could do with

00:05:07,120 --> 00:05:12,080
fluid now

00:05:08,880 --> 00:05:13,120
you can also get really low level if i

00:05:12,080 --> 00:05:16,479
open up this demo

00:05:13,120 --> 00:05:18,000
here and i start typing okay this is

00:05:16,479 --> 00:05:20,320
more like google docs

00:05:18,000 --> 00:05:22,800
word online those type of things where

00:05:20,320 --> 00:05:24,800
we could have multiple collaborators

00:05:22,800 --> 00:05:26,160
there you know injecting different

00:05:24,800 --> 00:05:28,160
keystrokes they're

00:05:26,160 --> 00:05:30,720
bolding they're doing all kinds of stuff

00:05:28,160 --> 00:05:33,199
here so let's bold and this person

00:05:30,720 --> 00:05:34,720
maybe makes it italic and underlines it

00:05:33,199 --> 00:05:36,880
who knows

00:05:34,720 --> 00:05:38,080
this is where the algorithms i mentioned

00:05:36,880 --> 00:05:40,080
get really really

00:05:38,080 --> 00:05:41,759
important and where they're like crucial

00:05:40,080 --> 00:05:44,960
very critical actually

00:05:41,759 --> 00:05:46,479
because without them this with just

00:05:44,960 --> 00:05:49,600
websockets alone

00:05:46,479 --> 00:05:51,280
is super super tricky so this is where

00:05:49,600 --> 00:05:53,360
the fluid framework really shines you

00:05:51,280 --> 00:05:54,080
can go super granular down to like the

00:05:53,360 --> 00:05:56,240
string level

00:05:54,080 --> 00:05:57,280
or you could go higher level like on

00:05:56,240 --> 00:05:59,919
brainstorm

00:05:57,280 --> 00:06:01,680
and just send messages back and forth

00:05:59,919 --> 00:06:04,319
now having shown you that

00:06:01,680 --> 00:06:06,240
let's go ahead and now jump into so what

00:06:04,319 --> 00:06:08,560
is fluid then exactly well

00:06:06,240 --> 00:06:10,080
we kind of just answered that but in a

00:06:08,560 --> 00:06:11,919
nutshell it's a collection of

00:06:10,080 --> 00:06:14,000
client-side libraries

00:06:11,919 --> 00:06:15,440
that you could use to build

00:06:14,000 --> 00:06:17,759
collaborative apps that

00:06:15,440 --> 00:06:18,880
in essence sync distributed data that's

00:06:17,759 --> 00:06:22,000
what it's all about

00:06:18,880 --> 00:06:23,520
is syncing distributed data but it takes

00:06:22,000 --> 00:06:25,840
it up a notch

00:06:23,520 --> 00:06:27,199
when you type and i type and michelle

00:06:25,840 --> 00:06:29,840
types over here

00:06:27,199 --> 00:06:31,120
we need to merge those keystrokes in in

00:06:29,840 --> 00:06:32,880
the appropriate order

00:06:31,120 --> 00:06:34,560
and how they were actually done

00:06:32,880 --> 00:06:37,199
collaboratively

00:06:34,560 --> 00:06:39,520
that does uh that functionality i should

00:06:37,199 --> 00:06:41,919
say is all built in the algorithms all

00:06:39,520 --> 00:06:43,039
used that i mentioned and it does all

00:06:41,919 --> 00:06:44,639
that for you

00:06:43,039 --> 00:06:47,039
in fact it makes it where you don't even

00:06:44,639 --> 00:06:49,520
think about the merging logic

00:06:47,039 --> 00:06:50,080
on each of the clients that just kind of

00:06:49,520 --> 00:06:53,520
happens

00:06:50,080 --> 00:06:55,360
automatically which is really nice now

00:06:53,520 --> 00:06:58,319
is this different than web sockets well

00:06:55,360 --> 00:07:01,280
it uses web sockets under the covers

00:06:58,319 --> 00:07:02,000
but is it different yeah it is because

00:07:01,280 --> 00:07:04,160
when you talk about

00:07:02,000 --> 00:07:06,240
things like socket io signalr and other

00:07:04,160 --> 00:07:08,560
websocket frameworks

00:07:06,240 --> 00:07:10,400
they are all about just moving data in

00:07:08,560 --> 00:07:13,520
real time they're real-time

00:07:10,400 --> 00:07:16,560
communication fluid can do

00:07:13,520 --> 00:07:17,520
that but as i saw in like the rich text

00:07:16,560 --> 00:07:19,599
demo

00:07:17,520 --> 00:07:21,280
it can actually go in and provide a way

00:07:19,599 --> 00:07:24,560
to move data structures around

00:07:21,280 --> 00:07:26,240
and synchronize them merge them

00:07:24,560 --> 00:07:27,680
and make sure everything's working as

00:07:26,240 --> 00:07:30,560
appropriate which is

00:07:27,680 --> 00:07:32,240
really really nice now moving along here

00:07:30,560 --> 00:07:33,919
there's a couple terms then i'm going to

00:07:32,240 --> 00:07:35,919
throw out when we get to the code

00:07:33,919 --> 00:07:37,680
so one of these is a distributed data

00:07:35,919 --> 00:07:39,919
structure these are the primitive

00:07:37,680 --> 00:07:41,120
data types you're going to use in fluid

00:07:39,919 --> 00:07:42,960
to actually

00:07:41,120 --> 00:07:44,319
sync up a string it's called shared

00:07:42,960 --> 00:07:47,599
string or

00:07:44,319 --> 00:07:50,479
a key value that's called a shared map

00:07:47,599 --> 00:07:52,319
or a sequence that where order matters

00:07:50,479 --> 00:07:54,080
that's called a shared object sequence

00:07:52,319 --> 00:07:55,759
notice they all start with shared

00:07:54,080 --> 00:07:58,000
because we're sharing the data across

00:07:55,759 --> 00:08:00,560
multiple collaborative clients

00:07:58,000 --> 00:08:01,599
all javascript clients by the way now

00:08:00,560 --> 00:08:04,240
they all send

00:08:01,599 --> 00:08:05,440
ops an op is really just an operation

00:08:04,240 --> 00:08:07,039
it's a change

00:08:05,440 --> 00:08:08,960
so you know they type the character well

00:08:07,039 --> 00:08:10,840
that's an op and that gets sent up to a

00:08:08,960 --> 00:08:12,080
service which we're going to talk about

00:08:10,840 --> 00:08:13,360
momentarily

00:08:12,080 --> 00:08:15,599
and then what we're going to do is have

00:08:13,360 --> 00:08:18,879
a data object which is really the

00:08:15,599 --> 00:08:21,840
type of bucket for one or more

00:08:18,879 --> 00:08:22,479
dds's distributed data structures that

00:08:21,840 --> 00:08:25,120
your app

00:08:22,479 --> 00:08:25,599
actually uses so think of this really as

00:08:25,120 --> 00:08:28,720
just

00:08:25,599 --> 00:08:32,000
a little house where the ddss all live

00:08:28,720 --> 00:08:33,519
and they can now be used to collaborate

00:08:32,000 --> 00:08:35,279
uh i don't know maybe they have little

00:08:33,519 --> 00:08:35,839
phones cell phones or something in the

00:08:35,279 --> 00:08:37,599
house

00:08:35,839 --> 00:08:39,039
and they can collaborate with other dds

00:08:37,599 --> 00:08:40,800
that live in other houses on

00:08:39,039 --> 00:08:42,320
other clients and that's really what's

00:08:40,800 --> 00:08:44,320
going on here

00:08:42,320 --> 00:08:46,080
now to show you this visually then we

00:08:44,320 --> 00:08:47,440
have a data object which would be like

00:08:46,080 --> 00:08:49,040
an angular service

00:08:47,440 --> 00:08:51,519
so we're all used to writing angular

00:08:49,040 --> 00:08:54,399
services with maybe http

00:08:51,519 --> 00:08:56,080
client or a graphql client or websocket

00:08:54,399 --> 00:08:58,480
client something like that

00:08:56,080 --> 00:09:01,040
same thing data object would in essence

00:08:58,480 --> 00:09:02,800
be a layer of an angular service

00:09:01,040 --> 00:09:04,240
that would have these dds's that are

00:09:02,800 --> 00:09:07,519
used to communicate an

00:09:04,240 --> 00:09:10,800
op to a fluid server

00:09:07,519 --> 00:09:12,720
now this fluid service that you see here

00:09:10,800 --> 00:09:13,920
you don't write any code for that you do

00:09:12,720 --> 00:09:15,120
have to get one running

00:09:13,920 --> 00:09:16,880
although in the future there's going to

00:09:15,120 --> 00:09:18,160
be one provided that you could use but

00:09:16,880 --> 00:09:19,680
for now you have to either get one

00:09:18,160 --> 00:09:20,480
running locally which i'm going to do in

00:09:19,680 --> 00:09:23,360
the demos

00:09:20,480 --> 00:09:24,399
something for just localhost or using

00:09:23,360 --> 00:09:26,399
docker containers

00:09:24,399 --> 00:09:28,560
on the github repo there's a readme for

00:09:26,399 --> 00:09:31,760
this you can actually stand up a

00:09:28,560 --> 00:09:33,680
more production quality fluid service

00:09:31,760 --> 00:09:35,120
and the fluid service though you write

00:09:33,680 --> 00:09:38,800
zero code though

00:09:35,120 --> 00:09:39,519
like nada it's awesome so when these ops

00:09:38,800 --> 00:09:41,200
flow up

00:09:39,519 --> 00:09:43,519
what's going to happen is then it will

00:09:41,200 --> 00:09:46,720
relay those ops to other clients

00:09:43,519 --> 00:09:48,720
like these they have their own copies of

00:09:46,720 --> 00:09:50,720
the dds's and data objects

00:09:48,720 --> 00:09:52,959
they get those they can then synchronize

00:09:50,720 --> 00:09:54,800
the view so i'm going to use observables

00:09:52,959 --> 00:09:57,040
actually for that in the demo

00:09:54,800 --> 00:09:58,560
and then we're kind of off to the races

00:09:57,040 --> 00:10:00,640
now the service has a little bit of

00:09:58,560 --> 00:10:02,240
storage because if somebody joins later

00:10:00,640 --> 00:10:03,839
they need to be caught up so it does

00:10:02,240 --> 00:10:06,000
track some things for you but that's all

00:10:03,839 --> 00:10:07,680
part of the fluid service layer

00:10:06,000 --> 00:10:10,079
but the bottom line is as an angular

00:10:07,680 --> 00:10:13,040
developer the only thing you worry about

00:10:10,079 --> 00:10:13,519
is really the data object and the dds's

00:10:13,040 --> 00:10:15,360
and

00:10:13,519 --> 00:10:17,600
the service once it's running if you did

00:10:15,360 --> 00:10:19,120
your own no code is written there it's

00:10:17,600 --> 00:10:20,480
just a reference implementation that

00:10:19,120 --> 00:10:22,720
just has to be running

00:10:20,480 --> 00:10:24,640
and then really all it does is it stamps

00:10:22,720 --> 00:10:26,560
the ops with a number

00:10:24,640 --> 00:10:28,000
to make sure they get processed in the

00:10:26,560 --> 00:10:30,560
proper order

00:10:28,000 --> 00:10:32,000
and merged with the proper logic on the

00:10:30,560 --> 00:10:34,160
different clients

00:10:32,000 --> 00:10:36,800
and the latency i want to add real quick

00:10:34,160 --> 00:10:37,440
here is super super low so latency would

00:10:36,800 --> 00:10:39,839
be you know

00:10:37,440 --> 00:10:40,800
across the network like how long are we

00:10:39,839 --> 00:10:43,120
taking

00:10:40,800 --> 00:10:44,959
um we can't overcome the speed of light

00:10:43,120 --> 00:10:47,040
i'm sure somebody's working on that but

00:10:44,959 --> 00:10:48,720
i haven't figured that one out yet but

00:10:47,040 --> 00:10:50,959
assuming you're in like the same

00:10:48,720 --> 00:10:52,560
region it would be almost instantaneous

00:10:50,959 --> 00:10:54,399
that's how fast this is

00:10:52,560 --> 00:10:56,399
now obviously if you're across the world

00:10:54,399 --> 00:10:58,320
it's going to be speed of light plus

00:10:56,399 --> 00:11:00,000
you know a little bit of network latency

00:10:58,320 --> 00:11:00,959
but it's very very fast so you could use

00:11:00,000 --> 00:11:03,760
it again for

00:11:00,959 --> 00:11:05,040
drawing inking type scenarios you could

00:11:03,760 --> 00:11:07,360
use it for games

00:11:05,040 --> 00:11:08,720
tracking user cursors multiple cursors

00:11:07,360 --> 00:11:11,680
in a doc

00:11:08,720 --> 00:11:12,800
editing strings all that fun stuff so

00:11:11,680 --> 00:11:14,560
now that we've seen

00:11:12,800 --> 00:11:16,240
that let's go ahead and move forward and

00:11:14,560 --> 00:11:16,560
we'll jump into some code here to wrap

00:11:16,240 --> 00:11:18,240
up

00:11:16,560 --> 00:11:19,760
and i'll show you how you can get

00:11:18,240 --> 00:11:20,959
started with this

00:11:19,760 --> 00:11:22,640
so the first demo we're going to take a

00:11:20,959 --> 00:11:24,640
look at here is a really simple one just

00:11:22,640 --> 00:11:25,200
to get us started and it's called dice

00:11:24,640 --> 00:11:27,040
roller

00:11:25,200 --> 00:11:29,279
it's kind of the hello world of fluid

00:11:27,040 --> 00:11:30,800
you could say so if i open this up it's

00:11:29,279 --> 00:11:33,040
a pretty standard angular project

00:11:30,800 --> 00:11:34,640
nothing special was created with the cli

00:11:33,040 --> 00:11:36,399
like you would normally do

00:11:34,640 --> 00:11:38,240
but you'll notice it has this dice

00:11:36,399 --> 00:11:40,160
roller data object

00:11:38,240 --> 00:11:42,480
and inside of it i have some packages

00:11:40,160 --> 00:11:45,440
that will be new such as fluid framework

00:11:42,480 --> 00:11:46,880
aqueduct fluid framework map and there's

00:11:45,440 --> 00:11:47,680
a whole bunch of others you can do as

00:11:46,880 --> 00:11:49,760
well

00:11:47,680 --> 00:11:50,959
but this fluid framework aqueduct has a

00:11:49,760 --> 00:11:52,959
really key

00:11:50,959 --> 00:11:54,959
symbol we need it's called data object

00:11:52,959 --> 00:11:56,639
something we talked about earlier

00:11:54,959 --> 00:11:58,720
and you can see i'm actually creating a

00:11:56,639 --> 00:11:59,760
class which is much like a service in

00:11:58,720 --> 00:12:02,639
angular

00:11:59,760 --> 00:12:04,000
where dice roller extends data object

00:12:02,639 --> 00:12:05,920
now what that's going to do

00:12:04,000 --> 00:12:07,279
is give us some functionality in fact

00:12:05,920 --> 00:12:09,600
it's going to give us

00:12:07,279 --> 00:12:11,200
dds specific functionality that we're

00:12:09,600 --> 00:12:12,399
going to use here

00:12:11,200 --> 00:12:14,480
so the first thing i'm going to do is

00:12:12,399 --> 00:12:15,440
come on down to the initializing first

00:12:14,480 --> 00:12:17,600
time

00:12:15,440 --> 00:12:18,560
now as the comment says here the very

00:12:17,600 --> 00:12:21,440
first client

00:12:18,560 --> 00:12:23,279
in our collaboration session to connect

00:12:21,440 --> 00:12:24,480
they're going to call this so just the

00:12:23,279 --> 00:12:26,320
first one though

00:12:24,480 --> 00:12:27,519
and what i'm going to do is go to this

00:12:26,320 --> 00:12:29,440
instance and i'm going to get to

00:12:27,519 --> 00:12:31,680
something called the root

00:12:29,440 --> 00:12:32,959
and this is a special type of dds which

00:12:31,680 --> 00:12:35,200
is the root dds

00:12:32,959 --> 00:12:36,320
it's called a shared directory it can

00:12:35,200 --> 00:12:38,480
actually store

00:12:36,320 --> 00:12:40,720
other dds's and it can even have

00:12:38,480 --> 00:12:43,920
hierarchies of dds's

00:12:40,720 --> 00:12:44,399
but we're going to go ahead and set a

00:12:43,920 --> 00:12:46,160
key

00:12:44,399 --> 00:12:48,240
and it's going to be dice value key

00:12:46,160 --> 00:12:50,240
you'll see that right up top here

00:12:48,240 --> 00:12:53,600
and then i'm just going to default it to

00:12:50,240 --> 00:12:55,760
1 in this particular scenario

00:12:53,600 --> 00:12:57,600
now the next thing we're going to do is

00:12:55,760 --> 00:13:00,160
once we've actually set a key and a

00:12:57,600 --> 00:13:01,600
value on this dds

00:13:00,160 --> 00:13:03,360
other clients are going to connect

00:13:01,600 --> 00:13:05,120
hopefully if it's collaborative

00:13:03,360 --> 00:13:06,880
and so now we're going to listen for

00:13:05,120 --> 00:13:08,880
changes to the dds

00:13:06,880 --> 00:13:10,560
and each client wants to listen to these

00:13:08,880 --> 00:13:13,279
changes so think of this first

00:13:10,560 --> 00:13:14,240
initializing first time life cycle event

00:13:13,279 --> 00:13:16,399
as the first time

00:13:14,240 --> 00:13:18,160
somebody connects this gets called that

00:13:16,399 --> 00:13:20,560
kind of sets up the dds

00:13:18,160 --> 00:13:21,839
all right that adds in essence a key and

00:13:20,560 --> 00:13:24,320
a value

00:13:21,839 --> 00:13:26,079
now the has initialized is every other

00:13:24,320 --> 00:13:27,440
client that connects

00:13:26,079 --> 00:13:29,839
then they're going to call hash

00:13:27,440 --> 00:13:30,320
initialized and we're going to subscribe

00:13:29,839 --> 00:13:33,839
to

00:13:30,320 --> 00:13:35,040
any changes to that dds so notice we say

00:13:33,839 --> 00:13:36,720
root on

00:13:35,040 --> 00:13:38,079
value changed and there's other types of

00:13:36,720 --> 00:13:40,800
things we can subscribe to

00:13:38,079 --> 00:13:42,560
but in this case value changed we're

00:13:40,800 --> 00:13:43,040
going to make sure that the key for the

00:13:42,560 --> 00:13:46,000
change

00:13:43,040 --> 00:13:48,560
matches our dice value key up top of

00:13:46,000 --> 00:13:51,040
course in this simple example it will

00:13:48,560 --> 00:13:52,560
and now i'm going to use a subject this

00:13:51,040 --> 00:13:54,959
is an rxjs subject

00:13:52,560 --> 00:13:56,000
to actually send data off to anyone that

00:13:54,959 --> 00:13:58,320
subscribes to this

00:13:56,000 --> 00:13:59,120
now you'll see that calls this dot value

00:13:58,320 --> 00:14:01,680
which just

00:13:59,120 --> 00:14:03,120
retrieves from that dds as you see right

00:14:01,680 --> 00:14:05,279
here

00:14:03,120 --> 00:14:08,320
now the only other really useful piece

00:14:05,279 --> 00:14:10,639
here is we have this roll function

00:14:08,320 --> 00:14:11,600
and the roll function is going to get a

00:14:10,639 --> 00:14:14,000
random

00:14:11,600 --> 00:14:16,320
number between 1 and 6 and then it's

00:14:14,000 --> 00:14:18,079
going to set that on the dds

00:14:16,320 --> 00:14:19,760
now that of course will call the value

00:14:18,079 --> 00:14:20,399
changed and then we can subscribe to

00:14:19,760 --> 00:14:23,680
that but

00:14:20,399 --> 00:14:25,199
in addition to setting it locally it's

00:14:23,680 --> 00:14:27,839
also going to send it out

00:14:25,199 --> 00:14:29,199
to the fluid service and then any other

00:14:27,839 --> 00:14:30,800
clients would get it

00:14:29,199 --> 00:14:33,760
so that's kind of the basics of how this

00:14:30,800 --> 00:14:36,720
one works as far as the data object

00:14:33,760 --> 00:14:38,480
now if we go into our component here

00:14:36,720 --> 00:14:40,320
it's kind of a single file component to

00:14:38,480 --> 00:14:42,240
keep it really simple

00:14:40,320 --> 00:14:43,600
we're going to bind in a dice character

00:14:42,240 --> 00:14:44,000
and then anytime it's clicked we're

00:14:43,600 --> 00:14:46,720
going to call

00:14:44,000 --> 00:14:47,920
that role function that you just saw now

00:14:46,720 --> 00:14:50,079
the rest of this is really just

00:14:47,920 --> 00:14:52,000
retrieving that dice roller data object

00:14:50,079 --> 00:14:52,320
you'll see this fluid service which just

00:14:52,000 --> 00:14:55,440
a

00:14:52,320 --> 00:14:56,399
custom one that i use to load the data

00:14:55,440 --> 00:14:58,560
object

00:14:56,399 --> 00:15:00,079
and it does that using container runtime

00:14:58,560 --> 00:15:00,480
factories we're not going to get into

00:15:00,079 --> 00:15:02,800
that

00:15:00,480 --> 00:15:04,079
but suffice it to say this can be very

00:15:02,800 --> 00:15:06,160
flexible on where

00:15:04,079 --> 00:15:07,839
the date object is located in this case

00:15:06,160 --> 00:15:10,079
it's in the app itself

00:15:07,839 --> 00:15:12,560
but you could actually load this type of

00:15:10,079 --> 00:15:14,720
functionality from like a cdn

00:15:12,560 --> 00:15:16,959
and then we're going to subscribe to

00:15:14,720 --> 00:15:18,800
that subject that you saw

00:15:16,959 --> 00:15:21,920
now i kind of skipped over the subject

00:15:18,800 --> 00:15:24,639
but in one of my previous ng conf talks

00:15:21,920 --> 00:15:26,079
a year or two ago i talked about the

00:15:24,639 --> 00:15:27,920
different types of subjects so if you're

00:15:26,079 --> 00:15:29,199
new to that feel free to check out that

00:15:27,920 --> 00:15:30,399
previous talk but

00:15:29,199 --> 00:15:32,399
really all we're doing is creating a

00:15:30,399 --> 00:15:34,480
subject in our data object and then

00:15:32,399 --> 00:15:36,959
we're getting the observable

00:15:34,480 --> 00:15:37,839
so here we're just subscribing to that

00:15:36,959 --> 00:15:40,399
observable

00:15:37,839 --> 00:15:42,320
and then we can unsubscribe now in

00:15:40,399 --> 00:15:42,800
addition to that anytime we subscribe

00:15:42,320 --> 00:15:45,199
and the

00:15:42,800 --> 00:15:47,519
the dice is rolled the values changed

00:15:45,199 --> 00:15:50,399
that calls this update dice character

00:15:47,519 --> 00:15:51,920
passes in the value of the die we then

00:15:50,399 --> 00:15:54,959
basically get a number from that

00:15:51,920 --> 00:15:55,440
and color and then we notify angular

00:15:54,959 --> 00:15:58,560
that

00:15:55,440 --> 00:16:00,800
hey something changed outside of angular

00:15:58,560 --> 00:16:02,800
and that's our change detector that

00:16:00,800 --> 00:16:04,320
caused detect changes

00:16:02,800 --> 00:16:06,000
now to run this simple app we can just

00:16:04,320 --> 00:16:07,600
go to the command prompt at the root of

00:16:06,000 --> 00:16:10,160
this folder

00:16:07,600 --> 00:16:12,000
and we can go ahead and try this out so

00:16:10,160 --> 00:16:13,680
i'm just going to run npm start normally

00:16:12,000 --> 00:16:14,639
you'd have to run npm install first of

00:16:13,680 --> 00:16:16,240
course

00:16:14,639 --> 00:16:18,720
but we'll run start now this is going to

00:16:16,240 --> 00:16:20,000
launch a loco fluid server called tiny

00:16:18,720 --> 00:16:23,040
licious

00:16:20,000 --> 00:16:23,839
interesting name yes and that will allow

00:16:23,040 --> 00:16:26,160
us to

00:16:23,839 --> 00:16:27,519
try this out locally as if we had

00:16:26,160 --> 00:16:29,839
multiple people involved

00:16:27,519 --> 00:16:31,839
all right so there's our first person

00:16:29,839 --> 00:16:32,480
now let's go ahead and we'll copy and

00:16:31,839 --> 00:16:35,040
paste this

00:16:32,480 --> 00:16:36,399
notice this id here that's kind of think

00:16:35,040 --> 00:16:39,440
of that as our collaboration

00:16:36,399 --> 00:16:40,560
document id so as long as someone else

00:16:39,440 --> 00:16:43,680
has that

00:16:40,560 --> 00:16:46,800
they can also collaborate and

00:16:43,680 --> 00:16:49,040
let's put these side by side actually

00:16:46,800 --> 00:16:50,480
and we'll go ahead and roll and notice

00:16:49,040 --> 00:16:52,880
every time that dds

00:16:50,480 --> 00:16:54,480
changes it gets relayed off to the other

00:16:52,880 --> 00:16:56,800
that's our subscription

00:16:54,480 --> 00:16:57,920
and then we update the ui with the dice

00:16:56,800 --> 00:17:00,399
character

00:16:57,920 --> 00:17:02,240
okay so not exactly the most useful demo

00:17:00,399 --> 00:17:04,000
there because that's all it really does

00:17:02,240 --> 00:17:05,760
but it's a good way to talk about the

00:17:04,000 --> 00:17:07,760
basics of

00:17:05,760 --> 00:17:09,280
our dds so let me go ahead and stop that

00:17:07,760 --> 00:17:10,640
one

00:17:09,280 --> 00:17:12,480
now the next one i'm going to run is the

00:17:10,640 --> 00:17:15,439
brainstorm because it's a little more

00:17:12,480 --> 00:17:16,480
robust and has quite a bit more to it

00:17:15,439 --> 00:17:18,000
there's another one i'm not going to

00:17:16,480 --> 00:17:20,000
have time to run today but

00:17:18,000 --> 00:17:21,760
this collaborative text area if you want

00:17:20,000 --> 00:17:24,079
to check that out that uses that shared

00:17:21,760 --> 00:17:27,280
string i've mentioned a few times

00:17:24,079 --> 00:17:30,880
let's go ahead and we'll close this one

00:17:27,280 --> 00:17:34,880
we'll go off to our brainstorm

00:17:30,880 --> 00:17:34,880
and we'll run mpm start here

00:17:35,840 --> 00:17:38,880
all right now this is the brainstorm it

00:17:37,840 --> 00:17:41,600
also has

00:17:38,880 --> 00:17:42,799
an id here so i'm going to copy that go

00:17:41,600 --> 00:17:46,000
to a new tab

00:17:42,799 --> 00:17:46,480
and we'll kind of drag this one over all

00:17:46,000 --> 00:17:48,799
right so

00:17:46,480 --> 00:17:50,320
now we have a true collaborative session

00:17:48,799 --> 00:17:52,960
between browsers

00:17:50,320 --> 00:17:53,520
and as i click we can share an idea

00:17:52,960 --> 00:17:57,120
you'll see it

00:17:53,520 --> 00:18:00,160
instantly pops up same thing over here

00:17:57,120 --> 00:18:02,640
we can vote as i showed earlier and this

00:18:00,160 --> 00:18:03,760
is also using dds's but this has three

00:18:02,640 --> 00:18:06,080
dds's

00:18:03,760 --> 00:18:07,679
has one for the users you see up here

00:18:06,080 --> 00:18:09,440
has one for the notes

00:18:07,679 --> 00:18:10,720
and it has one for the votes so we're

00:18:09,440 --> 00:18:13,520
kind of breaking this down

00:18:10,720 --> 00:18:15,200
into individual pieces so let me just

00:18:13,520 --> 00:18:18,080
walk you through the basics of this one

00:18:15,200 --> 00:18:20,640
it has quite a few more components in it

00:18:18,080 --> 00:18:22,640
but when it really boils down to what

00:18:20,640 --> 00:18:23,200
it's doing if we go into the services

00:18:22,640 --> 00:18:25,679
folder

00:18:23,200 --> 00:18:26,960
you're going to see this notaro data

00:18:25,679 --> 00:18:29,120
object

00:18:26,960 --> 00:18:31,200
and this does the same thing you saw

00:18:29,120 --> 00:18:32,640
earlier it extends data object

00:18:31,200 --> 00:18:34,640
but i'm going to walk you through real

00:18:32,640 --> 00:18:36,799
quick here some other features

00:18:34,640 --> 00:18:37,919
so like the other one i'm using in this

00:18:36,799 --> 00:18:40,160
case just a subject

00:18:37,919 --> 00:18:42,320
instead of behavior subject but notice

00:18:40,160 --> 00:18:44,799
i've defined three properties

00:18:42,320 --> 00:18:45,760
three shared maps now what's a shared

00:18:44,799 --> 00:18:47,280
map

00:18:45,760 --> 00:18:49,280
it's really the same thing as a

00:18:47,280 --> 00:18:51,440
javascript map except

00:18:49,280 --> 00:18:52,640
instead of just adding keys and values

00:18:51,440 --> 00:18:54,480
locally

00:18:52,640 --> 00:18:56,000
it will make sure those are distributed

00:18:54,480 --> 00:18:58,160
through the relay server

00:18:56,000 --> 00:19:00,000
that we talked about the fluid service

00:18:58,160 --> 00:19:01,760
to any other connected clients as you

00:19:00,000 --> 00:19:03,520
just saw on the demo there

00:19:01,760 --> 00:19:05,280
now right now these are just definitions

00:19:03,520 --> 00:19:06,720
they don't do anything we have to create

00:19:05,280 --> 00:19:08,720
them so if we come down to the

00:19:06,720 --> 00:19:10,000
initializing first time

00:19:08,720 --> 00:19:12,160
you're going to notice we have this

00:19:10,000 --> 00:19:15,440
create shared map for notes

00:19:12,160 --> 00:19:17,760
votes and users so this is our key

00:19:15,440 --> 00:19:20,480
if we jump down to that we're going to

00:19:17,760 --> 00:19:23,280
say sharedmap.create

00:19:20,480 --> 00:19:25,039
and we're going to give it the runtime

00:19:23,280 --> 00:19:26,080
that's actually going to be used to send

00:19:25,039 --> 00:19:27,840
the ops out

00:19:26,080 --> 00:19:29,520
remember we have operations that get

00:19:27,840 --> 00:19:31,280
sent out to the server

00:19:29,520 --> 00:19:33,039
well this runtime is responsible for

00:19:31,280 --> 00:19:33,760
that so it's kind of a behind the scenes

00:19:33,039 --> 00:19:36,640
thing

00:19:33,760 --> 00:19:37,520
that's part of our data object and what

00:19:36,640 --> 00:19:39,360
will happen then is we're going to

00:19:37,520 --> 00:19:42,000
create a shared map for notes a shared

00:19:39,360 --> 00:19:44,000
map for votes and a shared map for users

00:19:42,000 --> 00:19:46,480
and then we're going to set those on

00:19:44,000 --> 00:19:48,720
that route now remember the root

00:19:46,480 --> 00:19:51,200
was a shared directory i said this is

00:19:48,720 --> 00:19:54,160
what we looked at in dice roller

00:19:51,200 --> 00:19:55,200
and this is actually being used to store

00:19:54,160 --> 00:19:57,520
the dds

00:19:55,200 --> 00:19:59,919
that we're going to use now this whole

00:19:57,520 --> 00:20:01,760
process is only done by the very first

00:19:59,919 --> 00:20:03,840
client to connect to this

00:20:01,760 --> 00:20:05,440
so so that's kind of the only time that

00:20:03,840 --> 00:20:08,159
that'll get called

00:20:05,440 --> 00:20:10,000
now as others connect including this

00:20:08,159 --> 00:20:12,799
client the first client

00:20:10,000 --> 00:20:14,559
we're going to retrieve from the route

00:20:12,799 --> 00:20:16,400
the shared map for notes

00:20:14,559 --> 00:20:18,080
the shared map for votes and the shared

00:20:16,400 --> 00:20:19,840
map for users

00:20:18,080 --> 00:20:21,840
now the reason there's two gets this

00:20:19,840 --> 00:20:24,240
gets the handle

00:20:21,840 --> 00:20:25,600
basically the reference that's stored up

00:20:24,240 --> 00:20:27,679
top here

00:20:25,600 --> 00:20:29,039
and then the second get here actually

00:20:27,679 --> 00:20:31,280
gets the dds

00:20:29,039 --> 00:20:32,400
object itself so we're getting the

00:20:31,280 --> 00:20:34,080
reference to it

00:20:32,400 --> 00:20:35,919
then we're getting the dds object and

00:20:34,080 --> 00:20:38,799
pulling that out and storing it

00:20:35,919 --> 00:20:39,200
up in the property now once we've done

00:20:38,799 --> 00:20:40,960
that

00:20:39,200 --> 00:20:43,600
we have some user functionality but then

00:20:40,960 --> 00:20:46,240
we're going to listen for any changes to

00:20:43,600 --> 00:20:47,600
what happens on these maps and if i come

00:20:46,240 --> 00:20:49,440
on down to

00:20:47,600 --> 00:20:51,120
our create event listeners you'll see

00:20:49,440 --> 00:20:52,240
we're also listening just like with the

00:20:51,120 --> 00:20:54,880
dice roller

00:20:52,240 --> 00:20:55,440
for a value changed anytime a value

00:20:54,880 --> 00:20:57,120
changes

00:20:55,440 --> 00:20:59,200
we're going to grab that subject and

00:20:57,120 --> 00:21:02,240
call next and we're just going to pass

00:20:59,200 --> 00:21:04,799
value change in this case now

00:21:02,240 --> 00:21:05,600
in the component that uses all this when

00:21:04,799 --> 00:21:07,840
it gets that

00:21:05,600 --> 00:21:09,440
and says okay something changes it'll

00:21:07,840 --> 00:21:11,919
call to the data object

00:21:09,440 --> 00:21:14,720
and get either the notes the votes or

00:21:11,919 --> 00:21:16,159
the users that it needs

00:21:14,720 --> 00:21:18,000
now we also have some other things for

00:21:16,159 --> 00:21:20,080
users i'm not going to go through that

00:21:18,000 --> 00:21:21,120
but you can actually track all the users

00:21:20,080 --> 00:21:22,799
in the app i mean

00:21:21,120 --> 00:21:24,480
it's a collaboration app so you kind of

00:21:22,799 --> 00:21:25,919
need that right and that's what this

00:21:24,480 --> 00:21:28,159
functionality is down here but i'm going

00:21:25,919 --> 00:21:29,679
to skip over that for now

00:21:28,159 --> 00:21:32,480
now the last little piece i want to show

00:21:29,679 --> 00:21:34,559
you is in this create note here

00:21:32,480 --> 00:21:36,880
so when i hit the button to share the

00:21:34,559 --> 00:21:38,480
note in the demo i ran earlier that's

00:21:36,880 --> 00:21:40,159
calling into here and it just creates

00:21:38,480 --> 00:21:43,520
kind of a fake note

00:21:40,159 --> 00:21:45,640
we get some random text from an array

00:21:43,520 --> 00:21:47,600
but notice i'm going to call

00:21:45,640 --> 00:21:50,720
notesmap.set

00:21:47,600 --> 00:21:53,919
so just like i said a little bit earlier

00:21:50,720 --> 00:21:57,600
just like in a javascript map object

00:21:53,919 --> 00:21:59,679
dds's allow you to set and get data

00:21:57,600 --> 00:22:01,520
and the underlying infrastructure for

00:21:59,679 --> 00:22:03,520
you know the websockets and distributing

00:22:01,520 --> 00:22:04,960
it and stamping the numbers and

00:22:03,520 --> 00:22:06,320
making sure everything everything is

00:22:04,960 --> 00:22:08,240
resolved at the right time that's all

00:22:06,320 --> 00:22:10,159
done for us we don't really have to

00:22:08,240 --> 00:22:12,080
worry about that we just set and get

00:22:10,159 --> 00:22:15,120
data that's the general

00:22:12,080 --> 00:22:16,240
flow here now there's quite a bit more

00:22:15,120 --> 00:22:18,720
to this

00:22:16,240 --> 00:22:19,919
if we go into our app component for

00:22:18,720 --> 00:22:22,400
example

00:22:19,919 --> 00:22:24,159
we have an appnotero component where we

00:22:22,400 --> 00:22:26,400
pass in the data object

00:22:24,159 --> 00:22:27,440
as a model property so we have an input

00:22:26,400 --> 00:22:28,880
property here

00:22:27,440 --> 00:22:30,960
and just like in the dice roller i'm

00:22:28,880 --> 00:22:33,440
using a little fluid service i have to

00:22:30,960 --> 00:22:35,600
load that noteero data object

00:22:33,440 --> 00:22:37,440
pass it in so let's go ahead and jump to

00:22:35,600 --> 00:22:39,039
the app no tarot and this is where all

00:22:37,440 --> 00:22:41,039
the magic happens so

00:22:39,039 --> 00:22:42,960
we have a component for the pad which is

00:22:41,039 --> 00:22:44,720
the top part where you have the buttons

00:22:42,960 --> 00:22:45,919
and things and you click on that initial

00:22:44,720 --> 00:22:48,159
sticky note

00:22:45,919 --> 00:22:49,200
and then we have the board of the sticky

00:22:48,159 --> 00:22:51,440
notes

00:22:49,200 --> 00:22:52,720
now really all we're doing here is just

00:22:51,440 --> 00:22:56,159
passing in that

00:22:52,720 --> 00:22:58,640
data object which has the dds's

00:22:56,159 --> 00:22:59,520
and then we can act upon those so if i

00:22:58,640 --> 00:23:01,760
come on down

00:22:59,520 --> 00:23:02,799
here you'll notice that we're checking

00:23:01,760 --> 00:23:05,440
the model

00:23:02,799 --> 00:23:06,320
we subscribe to changes and that calls

00:23:05,440 --> 00:23:09,280
this

00:23:06,320 --> 00:23:11,360
changed and then that's going to cause

00:23:09,280 --> 00:23:13,679
us to say hey go into the model and get

00:23:11,360 --> 00:23:16,480
the notes from the board get the user

00:23:13,679 --> 00:23:17,760
current user get any other users and

00:23:16,480 --> 00:23:19,440
then we're going to tell angular to

00:23:17,760 --> 00:23:21,039
detect changes so there's quite a bit

00:23:19,440 --> 00:23:22,960
going on with this one

00:23:21,039 --> 00:23:24,480
but the actual fluid functionality is

00:23:22,960 --> 00:23:25,760
pretty straightforward this is just

00:23:24,480 --> 00:23:28,480
functionality that's

00:23:25,760 --> 00:23:29,440
right here and you'll notice it's just

00:23:28,480 --> 00:23:31,600
looping through

00:23:29,440 --> 00:23:32,480
the dbs the notes map we talked about

00:23:31,600 --> 00:23:34,720
earlier

00:23:32,480 --> 00:23:36,559
and then getting some info creating an

00:23:34,720 --> 00:23:37,840
array pushing it and then returning

00:23:36,559 --> 00:23:39,440
those notes

00:23:37,840 --> 00:23:41,840
that's actually what's being used right

00:23:39,440 --> 00:23:44,080
here so what happens is

00:23:41,840 --> 00:23:45,600
anytime a change comes in then from a

00:23:44,080 --> 00:23:48,159
remote client

00:23:45,600 --> 00:23:49,919
this gets called which then kind of goes

00:23:48,159 --> 00:23:51,840
and gets the latest notes the latest

00:23:49,919 --> 00:23:53,360
user the latest users

00:23:51,840 --> 00:23:55,679
and then we tell angular to update the

00:23:53,360 --> 00:23:57,279
ui and we kind of go from there and then

00:23:55,679 --> 00:24:00,240
that's all just using normal

00:23:57,279 --> 00:24:02,720
input and output bindings that we're

00:24:00,240 --> 00:24:04,880
pretty used to in angular here

00:24:02,720 --> 00:24:06,480
now there's a lot more i could go into

00:24:04,880 --> 00:24:08,880
but in the time we have i hope that

00:24:06,480 --> 00:24:12,400
gives you at least a taste of

00:24:08,880 --> 00:24:14,400
what a data object is and how these

00:24:12,400 --> 00:24:15,760
dds's can be used to create these

00:24:14,400 --> 00:24:16,640
collaborative sessions and i want to

00:24:15,760 --> 00:24:19,600
kind of call out

00:24:16,640 --> 00:24:21,440
notice that i didn't talk about a single

00:24:19,600 --> 00:24:23,200
line of server code because

00:24:21,440 --> 00:24:25,840
you don't write that code again you just

00:24:23,200 --> 00:24:27,760
focus on the front end part of this

00:24:25,840 --> 00:24:29,919
so that's a wrap on the demo and i hope

00:24:27,760 --> 00:24:30,880
that gives you a general idea about how

00:24:29,919 --> 00:24:32,720
to get started

00:24:30,880 --> 00:24:34,559
i'll have a link here at the end where

00:24:32,720 --> 00:24:37,600
you can get back to

00:24:34,559 --> 00:24:39,039
these particular demos that you see here

00:24:37,600 --> 00:24:40,480
brainstorm

00:24:39,039 --> 00:24:43,600
there's another one for collaborative

00:24:40,480 --> 00:24:45,200
text area and dice roller as well

00:24:43,600 --> 00:24:46,720
so to wrap things up you've now seen

00:24:45,200 --> 00:24:47,120
that the fluid framework is an open

00:24:46,720 --> 00:24:49,919
source

00:24:47,120 --> 00:24:50,960
library it was open sourced in september

00:24:49,919 --> 00:24:52,960
that provides

00:24:50,960 --> 00:24:54,480
real time collaboration so it's still a

00:24:52,960 --> 00:24:56,720
very new project

00:24:54,480 --> 00:24:58,480
they're actively looking for feedback on

00:24:56,720 --> 00:25:01,520
bugs feature requests

00:24:58,480 --> 00:25:03,440
accepting prs all that good stuff

00:25:01,520 --> 00:25:04,720
and they're even working on a hosted

00:25:03,440 --> 00:25:06,480
fluid service

00:25:04,720 --> 00:25:08,320
so that you won't even have to stand up

00:25:06,480 --> 00:25:10,159
the server at all you would just worry

00:25:08,320 --> 00:25:10,960
about your javascript and typescript

00:25:10,159 --> 00:25:12,720
code

00:25:10,960 --> 00:25:14,960
and you'd kind of be off to the races

00:25:12,720 --> 00:25:16,080
there now i've already shown you most of

00:25:14,960 --> 00:25:18,320
these links here

00:25:16,080 --> 00:25:20,000
the main one is fluidframework.com where

00:25:18,320 --> 00:25:21,360
you can get the docs the playground

00:25:20,000 --> 00:25:23,440
things like that

00:25:21,360 --> 00:25:25,360
but the very bottom link there is where

00:25:23,440 --> 00:25:25,919
you can get to the demos that i showed

00:25:25,360 --> 00:25:27,279
earlier

00:25:25,919 --> 00:25:29,919
if you actually want to play with these

00:25:27,279 --> 00:25:32,000
on your own and get started with fluid

00:25:29,919 --> 00:25:33,200
so with that thanks so much for checking

00:25:32,000 --> 00:25:35,760
out the session

00:25:33,200 --> 00:25:37,600
i hope that again you stay healthy and

00:25:35,760 --> 00:25:40,080
happy and

00:25:37,600 --> 00:25:42,000
safe during the rest of 2020 we'll hope

00:25:40,080 --> 00:25:44,000
that next year we can get together in

00:25:42,000 --> 00:25:47,279
person but i hope you have a great rest

00:25:44,000 --> 00:25:47,279

YouTube URL: https://www.youtube.com/watch?v=oEqVzDTXQBQ


