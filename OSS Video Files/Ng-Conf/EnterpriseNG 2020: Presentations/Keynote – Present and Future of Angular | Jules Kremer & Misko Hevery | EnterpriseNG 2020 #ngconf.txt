Title: Keynote â€“ Present and Future of Angular | Jules Kremer & Misko Hevery | EnterpriseNG 2020Â #ngconf
Publication date: 2021-05-03
Playlist: EnterpriseNG 2020: Presentations
Description: 
	Angular has been growing at Google for over four years now. In the process, weâ€™ve been continuously going through rapid technical and organizational evolution. In this talk, weâ€™ll share the current state of Angular inside Google. Weâ€™ll also look into the future to bring more light into some of the current and future projects we shared in our roadmap.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,120 --> 00:00:16,480
[Music]

00:00:03,840 --> 00:00:18,320
let us

00:00:16,480 --> 00:00:20,000
hey everyone i'm jules crummer i'm an

00:00:18,320 --> 00:00:21,840
engineering manager at google

00:00:20,000 --> 00:00:24,560
responsible for angular

00:00:21,840 --> 00:00:25,279
and i'm so excited to welcome you to ng

00:00:24,560 --> 00:00:27,279
enterprise

00:00:25,279 --> 00:00:28,640
although i'm very very sad that we are

00:00:27,279 --> 00:00:30,720
not here all together

00:00:28,640 --> 00:00:32,640
in one place i will miss the hallway

00:00:30,720 --> 00:00:33,840
tracks and getting to see familiar faces

00:00:32,640 --> 00:00:36,160
and meeting new ones

00:00:33,840 --> 00:00:37,760
i'm even going to miss the likely late

00:00:36,160 --> 00:00:39,520
night rehearsals mishko and i would have

00:00:37,760 --> 00:00:41,680
been doing in the hotel room

00:00:39,520 --> 00:00:43,920
getting ready for this session today i'm

00:00:41,680 --> 00:00:45,840
coming at you from the beautiful island

00:00:43,920 --> 00:00:48,239
of maui in hawaii which is

00:00:45,840 --> 00:00:50,239
not a bad place to be stuck during this

00:00:48,239 --> 00:00:52,079
strange time in our world

00:00:50,239 --> 00:00:54,000
and today i wanted to spend just a few

00:00:52,079 --> 00:00:56,239
minutes with you i'm going to give you a

00:00:54,000 --> 00:00:57,360
high level overview of how angular fits

00:00:56,239 --> 00:00:59,680
in at google

00:00:57,360 --> 00:01:00,559
and how where we fit in organizationally

00:00:59,680 --> 00:01:02,800
helps to support

00:01:00,559 --> 00:01:03,600
the most essential goal we have around

00:01:02,800 --> 00:01:05,760
angular

00:01:03,600 --> 00:01:06,720
which is the evergreen nature of angular

00:01:05,760 --> 00:01:08,479
itself

00:01:06,720 --> 00:01:10,400
we know how important it is to bring

00:01:08,479 --> 00:01:11,760
developers and the ecosystem along with

00:01:10,400 --> 00:01:13,360
us as we evolve

00:01:11,760 --> 00:01:16,080
and we view this goal as the most

00:01:13,360 --> 00:01:18,479
critical of our objectives

00:01:16,080 --> 00:01:20,240
while being evergreen is a goal we also

00:01:18,479 --> 00:01:23,040
know that we have values that help to

00:01:20,240 --> 00:01:24,799
guide how we're taking angular forward

00:01:23,040 --> 00:01:26,479
and we try to keep these values in mind

00:01:24,799 --> 00:01:28,080
over everything that we do

00:01:26,479 --> 00:01:29,520
you may have seen or heard us talk about

00:01:28,080 --> 00:01:31,439
these values in the past they've been

00:01:29,520 --> 00:01:33,200
consistent for a number of years

00:01:31,439 --> 00:01:34,799
we actually recently spent a couple days

00:01:33,200 --> 00:01:35,680
talking about these values trying to

00:01:34,799 --> 00:01:38,000
determine

00:01:35,680 --> 00:01:38,799
were they still true for us um and after

00:01:38,000 --> 00:01:40,479
that work

00:01:38,799 --> 00:01:42,399
we decided these are still the core

00:01:40,479 --> 00:01:44,079
values of the angular team

00:01:42,399 --> 00:01:46,240
we want to build a framework that

00:01:44,079 --> 00:01:47,840
generates apps that users love to use

00:01:46,240 --> 00:01:49,600
and we want developers who are building

00:01:47,840 --> 00:01:50,640
those apps to love to use angular to

00:01:49,600 --> 00:01:52,799
build them

00:01:50,640 --> 00:01:54,479
as an open source framework a community

00:01:52,799 --> 00:01:56,240
is very very important to us and the

00:01:54,479 --> 00:01:58,159
value of inclusivity is at the

00:01:56,240 --> 00:01:59,920
cornerstone of our community we want

00:01:58,159 --> 00:02:02,000
angular to be a community

00:01:59,920 --> 00:02:04,640
where everyone feels welcome wherever

00:02:02,000 --> 00:02:06,479
they are in the world

00:02:04,640 --> 00:02:08,399
along with these core values we have a

00:02:06,479 --> 00:02:09,599
set of principles or a set of angular

00:02:08,399 --> 00:02:10,560
strengths that we believe are the

00:02:09,599 --> 00:02:12,720
foundation

00:02:10,560 --> 00:02:14,879
of angular and so everything we think

00:02:12,720 --> 00:02:17,200
about in terms of the future of angular

00:02:14,879 --> 00:02:18,319
needs to stay true to these sting these

00:02:17,200 --> 00:02:20,480
strengths

00:02:18,319 --> 00:02:22,879
to be an opinionated batteries included

00:02:20,480 --> 00:02:24,800
framework that comes with best practices

00:02:22,879 --> 00:02:27,760
and well-integrated tooling

00:02:24,800 --> 00:02:29,760
before we released angular back in 2016

00:02:27,760 --> 00:02:31,840
i was actually the head of devrel

00:02:29,760 --> 00:02:33,840
and i spent a lot of time out in the

00:02:31,840 --> 00:02:34,640
community talking with folks many of you

00:02:33,840 --> 00:02:36,480
here today

00:02:34,640 --> 00:02:38,560
about what you would need from angular

00:02:36,480 --> 00:02:40,080
and i remember the cio of one

00:02:38,560 --> 00:02:41,920
really big company who's probably in the

00:02:40,080 --> 00:02:44,720
audience telling me how critical

00:02:41,920 --> 00:02:47,120
opinionation was to his team's ability

00:02:44,720 --> 00:02:49,360
to meet the demands of their company

00:02:47,120 --> 00:02:50,160
and for him scalability was also a

00:02:49,360 --> 00:02:52,000
factor

00:02:50,160 --> 00:02:53,280
and opinionation really helps with

00:02:52,000 --> 00:02:55,440
scalability

00:02:53,280 --> 00:02:56,400
because for many businesses right or

00:02:55,440 --> 00:02:59,120
just writing code

00:02:56,400 --> 00:03:00,239
some apps usually start small with small

00:02:59,120 --> 00:03:02,080
development teams

00:03:00,239 --> 00:03:04,000
maybe you're prototyping with one or two

00:03:02,080 --> 00:03:06,480
developers and then these apps

00:03:04,000 --> 00:03:08,879
grow and as the source code grows so

00:03:06,480 --> 00:03:10,720
does the size of the development team

00:03:08,879 --> 00:03:12,800
angular's opinionation helps with

00:03:10,720 --> 00:03:14,080
scalability as all those apps that

00:03:12,800 --> 00:03:14,720
you're building as you bring new

00:03:14,080 --> 00:03:17,360
developers

00:03:14,720 --> 00:03:18,879
on board they look familiar the code is

00:03:17,360 --> 00:03:19,920
recognizable the structure is

00:03:18,879 --> 00:03:22,159
recognizable

00:03:19,920 --> 00:03:23,120
and the tool chain that you're using is

00:03:22,159 --> 00:03:26,000
recognizable

00:03:23,120 --> 00:03:27,920
and consistent this tool chain and often

00:03:26,000 --> 00:03:29,599
comes from us via the cli but there's

00:03:27,920 --> 00:03:32,400
also many many partners

00:03:29,599 --> 00:03:34,080
in our thriving ecosystem which is also

00:03:32,400 --> 00:03:35,680
a strength of angular

00:03:34,080 --> 00:03:37,519
there's everything from state and data

00:03:35,680 --> 00:03:39,680
management to education and training

00:03:37,519 --> 00:03:40,400
providers to component libraries out

00:03:39,680 --> 00:03:42,480
there

00:03:40,400 --> 00:03:44,400
and we try to nurture this ecosystem as

00:03:42,480 --> 00:03:45,840
we bring angular forward

00:03:44,400 --> 00:03:47,200
and then finally there's that core

00:03:45,840 --> 00:03:47,840
strength the one i want to focus on

00:03:47,200 --> 00:03:50,239
today

00:03:47,840 --> 00:03:51,280
which is angular being evergreen and

00:03:50,239 --> 00:03:53,599
what we mean by this

00:03:51,280 --> 00:03:54,400
is that we enable you to stay up to date

00:03:53,599 --> 00:03:56,959
with the latest

00:03:54,400 --> 00:03:57,680
latest changes that we introduce um and

00:03:56,959 --> 00:04:00,720
we have this

00:03:57,680 --> 00:04:02,799
concept on angular called feature drops

00:04:00,720 --> 00:04:04,879
that we share a release and you get to

00:04:02,799 --> 00:04:06,319
take advantage of all the newest stuff

00:04:04,879 --> 00:04:08,720
by simply running ng

00:04:06,319 --> 00:04:10,640
update and this ability to seamlessly

00:04:08,720 --> 00:04:13,159
update and get all the latest goodness

00:04:10,640 --> 00:04:14,400
is in large part enabled by how we fit

00:04:13,159 --> 00:04:16,880
organizationally

00:04:14,400 --> 00:04:18,160
into google so i want to spend a few

00:04:16,880 --> 00:04:19,600
minutes chatting about that

00:04:18,160 --> 00:04:21,440
and then i'm going to hand over the talk

00:04:19,600 --> 00:04:22,880
to mishko where he

00:04:21,440 --> 00:04:25,120
can fill you in on where we're taking

00:04:22,880 --> 00:04:27,280
angular in the future

00:04:25,120 --> 00:04:29,199
so as with any business large business

00:04:27,280 --> 00:04:31,840
google is organized into groups and we

00:04:29,199 --> 00:04:33,840
call these groups pas or product areas

00:04:31,840 --> 00:04:34,880
there's google cloud as a product area

00:04:33,840 --> 00:04:37,440
for example and

00:04:34,880 --> 00:04:39,280
google ads as another example you might

00:04:37,440 --> 00:04:41,040
find it interesting or even odd

00:04:39,280 --> 00:04:42,720
that angular was originally part of the

00:04:41,040 --> 00:04:44,880
google ads pa

00:04:42,720 --> 00:04:46,960
and this was because angular originated

00:04:44,880 --> 00:04:47,759
out of a need for a scalable framework

00:04:46,960 --> 00:04:50,479
to power

00:04:47,759 --> 00:04:51,199
some of the largest apps that that drive

00:04:50,479 --> 00:04:54,000
the

00:04:51,199 --> 00:04:56,000
google ads business as angular became

00:04:54,000 --> 00:04:58,080
more and more popular at google

00:04:56,000 --> 00:04:59,520
being a part of ads made less and less

00:04:58,080 --> 00:05:01,280
sense so after

00:04:59,520 --> 00:05:03,759
angular gained a lot of internal

00:05:01,280 --> 00:05:06,160
momentum to the point where we are today

00:05:03,759 --> 00:05:06,960
the most commonly used web framework at

00:05:06,160 --> 00:05:09,360
google

00:05:06,960 --> 00:05:10,080
angular was reorganized in order for the

00:05:09,360 --> 00:05:11,680
team itself

00:05:10,080 --> 00:05:13,280
to work more efficiently more

00:05:11,680 --> 00:05:14,000
importantly to be able to work with

00:05:13,280 --> 00:05:17,680
others who

00:05:14,000 --> 00:05:19,919
also care about web development

00:05:17,680 --> 00:05:21,360
at its heart angular is a team that is

00:05:19,919 --> 00:05:23,440
building infrastructure for the

00:05:21,360 --> 00:05:24,800
development of web applications

00:05:23,440 --> 00:05:26,160
so it's different than building a

00:05:24,800 --> 00:05:27,280
product where you might find in the

00:05:26,160 --> 00:05:30,800
google cloud pa

00:05:27,280 --> 00:05:32,880
like cloud sql or gmail angular

00:05:30,800 --> 00:05:34,320
is building the tools that developers

00:05:32,880 --> 00:05:36,960
use to build products

00:05:34,320 --> 00:05:38,400
at google so as such we've moved into an

00:05:36,960 --> 00:05:40,800
infrastructure organization

00:05:38,400 --> 00:05:43,360
called core and within core we are part

00:05:40,800 --> 00:05:45,520
of a group called core developer

00:05:43,360 --> 00:05:46,639
every team within core developer is

00:05:45,520 --> 00:05:48,720
focused on one

00:05:46,639 --> 00:05:49,680
goal and that goal is to make google

00:05:48,720 --> 00:05:52,240
class development

00:05:49,680 --> 00:05:53,360
fast and easy for teams within core

00:05:52,240 --> 00:05:55,840
developer that have an

00:05:53,360 --> 00:05:57,840
external community such as tensorflow

00:05:55,840 --> 00:06:00,240
and firebase and angular

00:05:57,840 --> 00:06:02,000
we extrapolate this goal to make google

00:06:00,240 --> 00:06:04,319
class development fast and easy to the

00:06:02,000 --> 00:06:06,080
rest of the world as well

00:06:04,319 --> 00:06:08,000
within core developer we are part of

00:06:06,080 --> 00:06:09,280
core developer web and our teams are

00:06:08,000 --> 00:06:11,039
responsible for most of the

00:06:09,280 --> 00:06:11,919
infrastructure regarding web development

00:06:11,039 --> 00:06:14,240
at google

00:06:11,919 --> 00:06:15,199
within our org we have two groups web

00:06:14,240 --> 00:06:17,199
foundations

00:06:15,199 --> 00:06:19,120
these teams are where you'll find our

00:06:17,199 --> 00:06:20,720
build and serve or testing team

00:06:19,120 --> 00:06:22,720
some other open source teams that you

00:06:20,720 --> 00:06:25,039
might recognize like closure compiler

00:06:22,720 --> 00:06:26,960
and sas you'll also find the google

00:06:25,039 --> 00:06:29,360
typescript team here that is responsible

00:06:26,960 --> 00:06:30,720
for the typescript compiler at google

00:06:29,360 --> 00:06:32,960
you might even recognize some of the

00:06:30,720 --> 00:06:34,319
members of this team as the typescript

00:06:32,960 --> 00:06:36,560
team was incubated within

00:06:34,319 --> 00:06:38,560
angular but then as its momentum

00:06:36,560 --> 00:06:39,759
internally took hold and thousands and

00:06:38,560 --> 00:06:41,759
thousands of lines of code and

00:06:39,759 --> 00:06:43,600
typescript now exist at google

00:06:41,759 --> 00:06:45,680
that team became part of the core

00:06:43,600 --> 00:06:48,319
infrastructure and moved over into the

00:06:45,680 --> 00:06:50,560
web foundations group

00:06:48,319 --> 00:06:52,160
we also then have web frameworks that's

00:06:50,560 --> 00:06:54,080
what i'm responsible for

00:06:52,160 --> 00:06:55,840
so that includes angular and our sister

00:06:54,080 --> 00:06:57,840
team wiz star

00:06:55,840 --> 00:06:59,440
this reorganization has allowed us to

00:06:57,840 --> 00:07:01,440
work more closely with all these other

00:06:59,440 --> 00:07:03,599
teams that are focused on the web

00:07:01,440 --> 00:07:05,599
we reduced our redundant efforts and in

00:07:03,599 --> 00:07:06,960
my opinion the most valuable part of

00:07:05,599 --> 00:07:08,960
this reorganization

00:07:06,960 --> 00:07:11,039
is our ability to now collaborate with

00:07:08,960 --> 00:07:13,280
our peers and others that think about

00:07:11,039 --> 00:07:15,360
the web space on a daily basis

00:07:13,280 --> 00:07:17,520
as a few examples members of the angular

00:07:15,360 --> 00:07:19,039
team have recently spent cycles

00:07:17,520 --> 00:07:20,960
with our colleagues on the west star

00:07:19,039 --> 00:07:22,160
team thinking about how to evolve

00:07:20,960 --> 00:07:24,240
templating languages

00:07:22,160 --> 00:07:26,319
we did some work about how to evolve

00:07:24,240 --> 00:07:28,800
component foundations

00:07:26,319 --> 00:07:31,599
as well as thinking about production

00:07:28,800 --> 00:07:33,520
services for angular apps internally

00:07:31,599 --> 00:07:35,599
and then how the tooling around that

00:07:33,520 --> 00:07:38,960
might work for external

00:07:35,599 --> 00:07:40,240
production systems as well as a web

00:07:38,960 --> 00:07:42,720
framework at google

00:07:40,240 --> 00:07:45,039
we are responsible to support every

00:07:42,720 --> 00:07:46,160
single project that uses angular at

00:07:45,039 --> 00:07:47,919
google

00:07:46,160 --> 00:07:49,599
this report requirement is not just for

00:07:47,919 --> 00:07:51,120
angular it is for every team that

00:07:49,599 --> 00:07:52,879
provides infrastructure

00:07:51,120 --> 00:07:54,400
and so this is an easy task right for

00:07:52,879 --> 00:07:55,840
any team but what does this mean for

00:07:54,400 --> 00:07:57,120
angular specifically and why would it

00:07:55,840 --> 00:08:00,319
matter to you

00:07:57,120 --> 00:08:02,240
that's what i'm going to talk about next

00:08:00,319 --> 00:08:04,479
so we launched angular about four years

00:08:02,240 --> 00:08:06,400
ago i'll never forget the date because

00:08:04,479 --> 00:08:07,520
we launched it on september 14th of

00:08:06,400 --> 00:08:09,599
2016.

00:08:07,520 --> 00:08:11,680
september 14th also happens to be my

00:08:09,599 --> 00:08:13,440
birthday and so i'm always caught

00:08:11,680 --> 00:08:14,720
saying that aside from my last birthday

00:08:13,440 --> 00:08:16,800
which was my 50th

00:08:14,720 --> 00:08:18,160
the best birthday party i've ever had

00:08:16,800 --> 00:08:21,199
was the launch party for

00:08:18,160 --> 00:08:22,800
angular since the launch

00:08:21,199 --> 00:08:24,639
we've seen a tremendous growth

00:08:22,800 --> 00:08:25,599
internally as well as externally but

00:08:24,639 --> 00:08:28,080
here i'm focused on

00:08:25,599 --> 00:08:29,759
internal usage of angular as i've

00:08:28,080 --> 00:08:31,039
mentioned angular is the most commonly

00:08:29,759 --> 00:08:34,159
used web framework at

00:08:31,039 --> 00:08:35,919
google we've seen about 1.7 times growth

00:08:34,159 --> 00:08:36,880
in the number of apps in just the past

00:08:35,919 --> 00:08:39,760
year

00:08:36,880 --> 00:08:41,120
leaving us at about 2600 or so angular

00:08:39,760 --> 00:08:43,279
apps at google

00:08:41,120 --> 00:08:44,720
as you might know or have heard before i

00:08:43,279 --> 00:08:45,920
know we've talked about it in previous

00:08:44,720 --> 00:08:48,160
keynotes

00:08:45,920 --> 00:08:49,839
google uses a mono repo and if you've

00:08:48,160 --> 00:08:51,200
never read much or don't know much about

00:08:49,839 --> 00:08:52,800
the mono repo

00:08:51,200 --> 00:08:54,399
just google google mono repo there's

00:08:52,800 --> 00:08:55,279
some really great content out there

00:08:54,399 --> 00:08:57,040
about it

00:08:55,279 --> 00:08:59,680
but it's this internal system the

00:08:57,040 --> 00:09:02,399
monorepo system that helps angular to be

00:08:59,680 --> 00:09:03,519
stable and evergreen as part of the

00:09:02,399 --> 00:09:05,279
monorepo

00:09:03,519 --> 00:09:07,519
we know which products are dependent on

00:09:05,279 --> 00:09:10,240
angular and we have deep insights

00:09:07,519 --> 00:09:11,040
into those projects so when we push an

00:09:10,240 --> 00:09:12,959
update

00:09:11,040 --> 00:09:15,920
the build system compiles all of these

00:09:12,959 --> 00:09:18,080
projects and verifies the project ci

00:09:15,920 --> 00:09:19,519
which passes in which don't and so we

00:09:18,080 --> 00:09:20,000
can see if we're going to break

00:09:19,519 --> 00:09:22,480
something

00:09:20,000 --> 00:09:24,880
before we do an external release we can

00:09:22,480 --> 00:09:27,120
respond to those issues and fix them

00:09:24,880 --> 00:09:28,800
before you would ever see those in the

00:09:27,120 --> 00:09:30,959
public versions

00:09:28,800 --> 00:09:31,839
sometimes we do actually want to break

00:09:30,959 --> 00:09:33,279
angular

00:09:31,839 --> 00:09:35,839
but we know that if we do we're

00:09:33,279 --> 00:09:38,080
responsible for all those 2 600 projects

00:09:35,839 --> 00:09:40,240
at google if you break it you fix it

00:09:38,080 --> 00:09:42,640
and so we use automation in these cases

00:09:40,240 --> 00:09:44,160
to transform projects and migrate them

00:09:42,640 --> 00:09:46,320
to the latest versions

00:09:44,160 --> 00:09:47,760
and then this automation works its way

00:09:46,320 --> 00:09:51,040
back to all of you

00:09:47,760 --> 00:09:52,720
via ng update and this stability and

00:09:51,040 --> 00:09:56,480
automation and the

00:09:52,720 --> 00:09:58,399
particular view we have of all 2600 apps

00:09:56,480 --> 00:10:00,880
gives us a sort of intimate knowledge of

00:09:58,399 --> 00:10:03,519
how angular is used its edge cases the

00:10:00,880 --> 00:10:05,600
use cases any issues that might be

00:10:03,519 --> 00:10:06,720
its strengths right and this really

00:10:05,600 --> 00:10:08,480
allows us to have a different

00:10:06,720 --> 00:10:10,240
perspective of angular

00:10:08,480 --> 00:10:12,240
that you might find elsewhere and it

00:10:10,240 --> 00:10:14,000
helps us to innovate and define best

00:10:12,240 --> 00:10:16,000
practices and then integrate all of that

00:10:14,000 --> 00:10:18,079
into our tooling

00:10:16,000 --> 00:10:19,600
so all of this together the stability

00:10:18,079 --> 00:10:21,120
requirements the automation

00:10:19,600 --> 00:10:23,279
opportunities and these app

00:10:21,120 --> 00:10:24,720
insights this is the foundation for

00:10:23,279 --> 00:10:25,600
angular's greatest strength of being

00:10:24,720 --> 00:10:27,440
evergreen

00:10:25,600 --> 00:10:29,120
and this is how we ensure all of you

00:10:27,440 --> 00:10:29,760
take advantage of the newest versions of

00:10:29,120 --> 00:10:32,640
angular

00:10:29,760 --> 00:10:34,160
by simply using the ng ng-update command

00:10:32,640 --> 00:10:36,959
we think of this as a

00:10:34,160 --> 00:10:38,640
key unique value proposition of angular

00:10:36,959 --> 00:10:39,920
since most projects usually have a fixed

00:10:38,640 --> 00:10:41,680
version of the framework

00:10:39,920 --> 00:10:43,200
and a combination tool chain that you

00:10:41,680 --> 00:10:45,040
put together yourself

00:10:43,200 --> 00:10:47,120
for angular as part of our battery's

00:10:45,040 --> 00:10:48,320
included platform we want to deliver all

00:10:47,120 --> 00:10:52,000
of that to you

00:10:48,320 --> 00:10:54,079
via the simple cli command of ng update

00:10:52,000 --> 00:10:56,560
so that's just a brief little overview

00:10:54,079 --> 00:10:58,560
of how where we fit organizationally in

00:10:56,560 --> 00:11:00,079
google's mono repo helps us stay true to

00:10:58,560 --> 00:11:01,440
our evergreen goals

00:11:00,079 --> 00:11:03,120
one of the other questions i've been

00:11:01,440 --> 00:11:03,760
asked a lot over the last number of

00:11:03,120 --> 00:11:05,600
months are

00:11:03,760 --> 00:11:07,120
who are angular stakeholders who are you

00:11:05,600 --> 00:11:09,839
building this thing for

00:11:07,120 --> 00:11:11,760
and what do they want so at the root

00:11:09,839 --> 00:11:13,519
angular stakeholders are the users of

00:11:11,760 --> 00:11:14,959
web and the web applications on the web

00:11:13,519 --> 00:11:15,600
and the developers who are creating

00:11:14,959 --> 00:11:17,120
those

00:11:15,600 --> 00:11:18,480
but like obviously that's millions and

00:11:17,120 --> 00:11:20,320
millions and a lot of people in the

00:11:18,480 --> 00:11:22,160
world right so let's narrow that down to

00:11:20,320 --> 00:11:23,920
something that we can work with

00:11:22,160 --> 00:11:25,200
so if we narrow that down we have two

00:11:23,920 --> 00:11:26,640
main stakeholders

00:11:25,200 --> 00:11:28,320
the millions of developers in the

00:11:26,640 --> 00:11:29,920
external world and the thousands of

00:11:28,320 --> 00:11:31,440
google engineers working internally on

00:11:29,920 --> 00:11:33,760
the monorepo

00:11:31,440 --> 00:11:36,000
as you might imagine even with that many

00:11:33,760 --> 00:11:39,279
stakeholders there's a lot of use cases

00:11:36,000 --> 00:11:40,079
industries and workflows to support so a

00:11:39,279 --> 00:11:41,760
question

00:11:40,079 --> 00:11:43,760
that i'm asked is what do these users

00:11:41,760 --> 00:11:45,839
want and how do i manage

00:11:43,760 --> 00:11:47,040
their uh incoming feature requests where

00:11:45,839 --> 00:11:49,519
do i look for them

00:11:47,040 --> 00:11:51,519
do you email me how do you give me that

00:11:49,519 --> 00:11:53,760
so as an open source project

00:11:51,519 --> 00:11:55,680
github is the main avenue for product

00:11:53,760 --> 00:11:58,880
feedback and issues and we've been

00:11:55,680 --> 00:12:00,480
really really amping up the team's focus

00:11:58,880 --> 00:12:02,399
on triaging and

00:12:00,480 --> 00:12:03,839
making sure that github issues are well

00:12:02,399 --> 00:12:06,399
managed

00:12:03,839 --> 00:12:08,160
also we have a lot of relationships with

00:12:06,399 --> 00:12:09,920
our customers we do one-on-one

00:12:08,160 --> 00:12:11,680
customer meetings both internally and

00:12:09,920 --> 00:12:13,279
externally we talk to people at

00:12:11,680 --> 00:12:14,720
conferences in the hallway track like

00:12:13,279 --> 00:12:15,600
feature requests come from these

00:12:14,720 --> 00:12:16,959
relationships

00:12:15,600 --> 00:12:19,040
and just from having all of these

00:12:16,959 --> 00:12:21,760
customers in the world

00:12:19,040 --> 00:12:23,760
as well we have a tremendously amazing

00:12:21,760 --> 00:12:24,959
group of angular gdes or google

00:12:23,760 --> 00:12:27,200
developer experts

00:12:24,959 --> 00:12:28,160
we routinely dip into that well to ask

00:12:27,200 --> 00:12:31,760
for feedback

00:12:28,160 --> 00:12:33,440
uh to give us uh you know uh try our new

00:12:31,760 --> 00:12:34,000
releases before they're out kind of

00:12:33,440 --> 00:12:36,880
thing

00:12:34,000 --> 00:12:37,519
uh test messaging gdes are an invaluable

00:12:36,880 --> 00:12:40,720
source

00:12:37,519 --> 00:12:41,519
of requirements for us and then also we

00:12:40,720 --> 00:12:43,600
do surveys

00:12:41,519 --> 00:12:45,519
and we do surveys internally and

00:12:43,600 --> 00:12:47,519
externally and try to mirror these so

00:12:45,519 --> 00:12:50,079
that we can see the difference between

00:12:47,519 --> 00:12:52,160
these two main groups of stakeholders so

00:12:50,079 --> 00:12:53,839
if you see an angular survey come out

00:12:52,160 --> 00:12:55,200
we would really love it if we get the

00:12:53,839 --> 00:12:57,760
most responses to that

00:12:55,200 --> 00:13:00,000
as we can because this survey really

00:12:57,760 --> 00:13:01,360
helps us with our prioritization process

00:13:00,000 --> 00:13:03,680
that i'm going to talk about in just a

00:13:01,360 --> 00:13:03,680
minute

00:13:04,000 --> 00:13:08,800
but i wanted to stop because

00:13:07,040 --> 00:13:10,160
you're probably thinking feature

00:13:08,800 --> 00:13:12,320
requests in terms of

00:13:10,160 --> 00:13:13,600
engineering and product features that we

00:13:12,320 --> 00:13:15,600
could build into angular

00:13:13,600 --> 00:13:17,360
but it's really important to note that

00:13:15,600 --> 00:13:19,200
our investments are not just with the

00:13:17,360 --> 00:13:21,360
features of angular itself

00:13:19,200 --> 00:13:22,240
but we get requests for community

00:13:21,360 --> 00:13:25,040
programs

00:13:22,240 --> 00:13:26,000
such as the recent request for comment

00:13:25,040 --> 00:13:28,480
program that we

00:13:26,000 --> 00:13:30,240
instantiated that's been a request from

00:13:28,480 --> 00:13:32,399
the community for years

00:13:30,240 --> 00:13:34,160
we get requests around documentation so

00:13:32,399 --> 00:13:35,600
building new guides or building

00:13:34,160 --> 00:13:37,519
guides around integration with other

00:13:35,600 --> 00:13:38,959
products we also have our own

00:13:37,519 --> 00:13:40,639
infrastructure right

00:13:38,959 --> 00:13:42,399
we have a dev workflow that we need to

00:13:40,639 --> 00:13:44,560
support and we have projects around that

00:13:42,399 --> 00:13:47,600
so for example how do we move code from

00:13:44,560 --> 00:13:50,160
github into google's internal monorepo

00:13:47,600 --> 00:13:51,199
how is our own ci and testing landscape

00:13:50,160 --> 00:13:53,680
looking

00:13:51,199 --> 00:13:55,680
and then finally we're a team of humans

00:13:53,680 --> 00:13:59,440
and you need to bring humans together

00:13:55,680 --> 00:14:01,519
both have fun as well as to have time to

00:13:59,440 --> 00:14:03,920
visualize the art of the possible or to

00:14:01,519 --> 00:14:06,320
think about things in the future and so

00:14:03,920 --> 00:14:08,639
we spend time also ingesting team

00:14:06,320 --> 00:14:11,839
projects that the team wants to do

00:14:08,639 --> 00:14:13,760
um together and so you know

00:14:11,839 --> 00:14:15,760
it seems daunting to put all these on

00:14:13,760 --> 00:14:17,360
slides because that's a lot of requests

00:14:15,760 --> 00:14:18,639
and figuring out how to balance them is

00:14:17,360 --> 00:14:20,800
really really hard

00:14:18,639 --> 00:14:22,240
but one thing that has become clear

00:14:20,800 --> 00:14:25,199
after years and years

00:14:22,240 --> 00:14:25,920
of filtering and hearing input is that

00:14:25,199 --> 00:14:27,440
we've noted

00:14:25,920 --> 00:14:29,519
that in terms of these two main

00:14:27,440 --> 00:14:30,959
stakeholders there's not a lot of

00:14:29,519 --> 00:14:32,800
difference between

00:14:30,959 --> 00:14:34,240
google engineers and the angular

00:14:32,800 --> 00:14:37,440
developers like all of you

00:14:34,240 --> 00:14:39,360
out in the external world so we know

00:14:37,440 --> 00:14:41,360
that our sweet spot or where we should

00:14:39,360 --> 00:14:43,519
most heavily weight our efforts

00:14:41,360 --> 00:14:45,600
is in this venn diagram's middle place

00:14:43,519 --> 00:14:48,320
right the the things that meet both

00:14:45,600 --> 00:14:49,760
uh both communities needs and so we call

00:14:48,320 --> 00:14:52,000
this the sweet spot strategy

00:14:49,760 --> 00:14:54,000
and along with our core values we use

00:14:52,000 --> 00:14:57,120
this strategy as a foundation for how we

00:14:54,000 --> 00:14:59,920
think about evolving angular forward

00:14:57,120 --> 00:15:01,680
speaking of probably the most requested

00:14:59,920 --> 00:15:02,959
feature over the past number of years

00:15:01,680 --> 00:15:05,120
that i can remember

00:15:02,959 --> 00:15:06,959
has been for the angular team to release

00:15:05,120 --> 00:15:08,720
its roadmap to the public

00:15:06,959 --> 00:15:10,880
and while we've always had a workflow

00:15:08,720 --> 00:15:13,040
for our internal tracking purposes

00:15:10,880 --> 00:15:15,440
we've not historically done a great job

00:15:13,040 --> 00:15:17,360
showing all of you where we're going

00:15:15,440 --> 00:15:18,720
so earlier this year probably one of the

00:15:17,360 --> 00:15:19,360
biggest changes that we've made to

00:15:18,720 --> 00:15:20,880
angular

00:15:19,360 --> 00:15:23,360
was actually to the process and the

00:15:20,880 --> 00:15:26,000
workflow we use as a team

00:15:23,360 --> 00:15:28,160
so just after angular 9 was released we

00:15:26,000 --> 00:15:29,199
implemented a new prioritization process

00:15:28,160 --> 00:15:31,759
that we codenamed

00:15:29,199 --> 00:15:33,519
ng elephant this work has led to the

00:15:31,759 --> 00:15:34,079
public release of our roadmap that you

00:15:33,519 --> 00:15:37,600
can find

00:15:34,079 --> 00:15:39,519
at angulario to get to this roadmap

00:15:37,600 --> 00:15:41,519
every week the tech leads in engineering

00:15:39,519 --> 00:15:42,000
management get together to prioritize

00:15:41,519 --> 00:15:44,240
all the

00:15:42,000 --> 00:15:46,240
incoming work these sessions are

00:15:44,240 --> 00:15:47,440
collaborative where everyone has room to

00:15:46,240 --> 00:15:50,000
provide an opinion

00:15:47,440 --> 00:15:52,160
to discuss and then together we provide

00:15:50,000 --> 00:15:53,600
a ranking to the new project

00:15:52,160 --> 00:15:55,519
sometimes that means we have to move

00:15:53,600 --> 00:15:57,279
things down sometimes

00:15:55,519 --> 00:15:58,959
that new incoming request may have such

00:15:57,279 --> 00:16:00,160
an urgency that it gets a spot at the

00:15:58,959 --> 00:16:02,079
very top

00:16:00,160 --> 00:16:04,399
we are trying to update our roadmap

00:16:02,079 --> 00:16:05,839
quarterly so you'll see this movement in

00:16:04,399 --> 00:16:07,199
the roadmap

00:16:05,839 --> 00:16:09,279
and i hope that this gives you an

00:16:07,199 --> 00:16:11,360
understanding of how we sit in a room

00:16:09,279 --> 00:16:14,240
and decide how to put that together

00:16:11,360 --> 00:16:15,600
using the lens of our values of our

00:16:14,240 --> 00:16:17,680
sweet spot strategy

00:16:15,600 --> 00:16:20,160
and that evergreen desire we have to

00:16:17,680 --> 00:16:22,160
drive angular forward

00:16:20,160 --> 00:16:24,240
so i'm hopeful i've given you just a

00:16:22,160 --> 00:16:26,000
slice of how i as an engineering manager

00:16:24,240 --> 00:16:26,720
think about running the whole of of

00:16:26,000 --> 00:16:29,839
angular

00:16:26,720 --> 00:16:31,519
how us fitting into google aligns as an

00:16:29,839 --> 00:16:33,199
infrastructure team and allows us to

00:16:31,519 --> 00:16:36,240
really support that common

00:16:33,199 --> 00:16:38,000
or key goal of being evergreen

00:16:36,240 --> 00:16:39,600
and now i'm going to hand it off to

00:16:38,000 --> 00:16:41,040
mishko and he's going to talk a little

00:16:39,600 --> 00:16:42,880
bit about angular ivy

00:16:41,040 --> 00:16:44,399
and where we're going from here thank

00:16:42,880 --> 00:16:46,720
you so much for having me

00:16:44,399 --> 00:16:48,560
i hope to see you all next year live in

00:16:46,720 --> 00:16:50,880
person

00:16:48,560 --> 00:16:53,120
hello my name is mishko and i work at

00:16:50,880 --> 00:16:54,639
google on the angular framework

00:16:53,120 --> 00:16:56,320
today i would like to talk to you about

00:16:54,639 --> 00:16:58,320
angular framework and also about how

00:16:56,320 --> 00:16:59,519
angular team uses its core values in

00:16:58,320 --> 00:17:02,240
building a product

00:16:59,519 --> 00:17:03,360
which users and developers love first

00:17:02,240 --> 00:17:04,799
let's start by celebrating our

00:17:03,360 --> 00:17:05,919
achievements and reflecting on how we

00:17:04,799 --> 00:17:07,439
got here

00:17:05,919 --> 00:17:09,600
ivy was released at the beginning of

00:17:07,439 --> 00:17:12,240
this year as part of version 9 release

00:17:09,600 --> 00:17:13,280
and by all mean measures it has been a

00:17:12,240 --> 00:17:14,880
success

00:17:13,280 --> 00:17:17,039
we have heard a lot of positive feedback

00:17:14,880 --> 00:17:18,000
from the community our main metric is

00:17:17,039 --> 00:17:20,079
that it was a smooth

00:17:18,000 --> 00:17:22,000
transition for most developers the

00:17:20,079 --> 00:17:23,600
upgrade went without a hitch

00:17:22,000 --> 00:17:25,760
secondary benefits come in the form of

00:17:23,600 --> 00:17:28,640
size and build time improvements

00:17:25,760 --> 00:17:29,760
we are very proud of that we have worked

00:17:28,640 --> 00:17:32,080
very hard on ib

00:17:29,760 --> 00:17:33,600
as we think it will allow angular to

00:17:32,080 --> 00:17:35,360
remain competitive for many years to

00:17:33,600 --> 00:17:37,120
come

00:17:35,360 --> 00:17:38,720
while the project currently is mostly

00:17:37,120 --> 00:17:40,400
feature equivalent to view engine

00:17:38,720 --> 00:17:42,720
it lays the foundation which will allow

00:17:40,400 --> 00:17:45,200
us to deliver many new benefits

00:17:42,720 --> 00:17:46,799
in the future and remain innovative

00:17:45,200 --> 00:17:47,919
shipping such a complex rewrite would

00:17:46,799 --> 00:17:50,000
have been impossible without the

00:17:47,919 --> 00:17:51,679
benefits of google's monorepo

00:17:50,000 --> 00:17:54,880
every change which lands in angular

00:17:51,679 --> 00:17:57,120
repository must not break any of over 2

00:17:54,880 --> 00:17:58,160
600 angular applications which are

00:17:57,120 --> 00:18:00,320
currently existing

00:17:58,160 --> 00:18:02,480
inside of google this gives us

00:18:00,320 --> 00:18:03,840
tremendous amount of confidence that any

00:18:02,480 --> 00:18:06,400
change we do to angular

00:18:03,840 --> 00:18:08,080
will work for you too you can think of

00:18:06,400 --> 00:18:10,960
in google's monorepo

00:18:08,080 --> 00:18:12,640
as the ultimate test suite additionally

00:18:10,960 --> 00:18:14,720
we have collected many of the external

00:18:12,640 --> 00:18:16,240
most common angular libraries and tested

00:18:14,720 --> 00:18:18,400
them with ib to make sure that

00:18:16,240 --> 00:18:20,799
they work this is why the transition

00:18:18,400 --> 00:18:22,799
went so smooth

00:18:20,799 --> 00:18:24,320
while we had a strong focus on ivy we

00:18:22,799 --> 00:18:25,919
have collected some technical debt

00:18:24,320 --> 00:18:28,400
which we are hoping to focus on in

00:18:25,919 --> 00:18:28,960
version 11. ivy took over two years to

00:18:28,400 --> 00:18:30,720
develop

00:18:28,960 --> 00:18:32,480
part of the long development cycle was

00:18:30,720 --> 00:18:34,640
to focus uh

00:18:32,480 --> 00:18:36,640
was to focus to make sure that it will

00:18:34,640 --> 00:18:38,559
create the least amount of disturbance

00:18:36,640 --> 00:18:40,160
to existing applications

00:18:38,559 --> 00:18:44,240
and we have succeeded in that so let's

00:18:40,160 --> 00:18:44,240
see what we are focusing on next

00:18:45,760 --> 00:18:49,600
version 11 focuses is on reducing some

00:18:48,320 --> 00:18:51,440
of the technical depth which we have

00:18:49,600 --> 00:18:53,520
accumulated

00:18:51,440 --> 00:18:56,400
no fancy features just bug fixes

00:18:53,520 --> 00:18:58,320
performance and more

00:18:56,400 --> 00:19:00,000
my log is our internal code name for

00:18:58,320 --> 00:19:01,919
triaging issues on github

00:19:00,000 --> 00:19:04,240
we spend as much as 70 percent of our

00:19:01,919 --> 00:19:06,559
time focus on this activity

00:19:04,240 --> 00:19:08,320
by doing this we hope to gain insights

00:19:06,559 --> 00:19:10,000
as to which areas of the framework we

00:19:08,320 --> 00:19:12,400
should be focusing on next

00:19:10,000 --> 00:19:14,000
we use this information to prioritize

00:19:12,400 --> 00:19:15,919
which issues we work on

00:19:14,000 --> 00:19:17,039
next so that we can deliver the most

00:19:15,919 --> 00:19:19,679
value in this

00:19:17,039 --> 00:19:21,360
shortest amount of time we have made

00:19:19,679 --> 00:19:22,960
some great progress in this front

00:19:21,360 --> 00:19:25,120
for example we have fewer than 15

00:19:22,960 --> 00:19:26,880
untriage issues and components

00:19:25,120 --> 00:19:28,240
we have triage hundreds of issues to get

00:19:26,880 --> 00:19:29,679
to this point

00:19:28,240 --> 00:19:31,360
because of this process we are able to

00:19:29,679 --> 00:19:32,160
resolve some of the most wanted requests

00:19:31,360 --> 00:19:35,760
on github

00:19:32,160 --> 00:19:35,760
let's look at some of them now

00:19:36,240 --> 00:19:39,360
here are some examples of issues which

00:19:37,760 --> 00:19:40,799
have been resolved notice that all of

00:19:39,360 --> 00:19:42,640
these issues have high community

00:19:40,799 --> 00:19:43,600
engagement and as a result benefit a lot

00:19:42,640 --> 00:19:45,120
of people

00:19:43,600 --> 00:19:47,520
this is an example of lazy loading

00:19:45,120 --> 00:19:49,280
module and named outlets and routes not

00:19:47,520 --> 00:19:51,200
working properly

00:19:49,280 --> 00:19:53,039
and since we were working on router we

00:19:51,200 --> 00:19:54,640
also took care of related issues which

00:19:53,039 --> 00:19:56,400
allow our developers to build more

00:19:54,640 --> 00:19:58,880
cohesive story

00:19:56,400 --> 00:20:00,640
and more router work but router is not

00:19:58,880 --> 00:20:02,799
the only thing which we are focusing on

00:20:00,640 --> 00:20:05,440
here is an example of highly desired fix

00:20:02,799 --> 00:20:05,440
in the forms

00:20:05,520 --> 00:20:09,039
and finally we were able to solve the

00:20:07,520 --> 00:20:11,840
third most uploaded issue in our

00:20:09,039 --> 00:20:14,080
repository around internationalization

00:20:11,840 --> 00:20:15,520
this issue is asking to be able to

00:20:14,080 --> 00:20:16,960
translate not just templates

00:20:15,520 --> 00:20:19,280
but also strings inside of your

00:20:16,960 --> 00:20:20,799
application not everything is a template

00:20:19,280 --> 00:20:22,640
for example calling alert

00:20:20,799 --> 00:20:23,840
with text also needs to be translated

00:20:22,640 --> 00:20:26,400
and until recently

00:20:23,840 --> 00:20:28,159
was outside of the scope of angular this

00:20:26,400 --> 00:20:29,120
issue is a perfect example of how iv is

00:20:28,159 --> 00:20:31,520
helping us to make

00:20:29,120 --> 00:20:33,520
more agile as a framework being the

00:20:31,520 --> 00:20:35,520
third most requested issue clearly shows

00:20:33,520 --> 00:20:37,760
how important it was to the community

00:20:35,520 --> 00:20:39,600
the fix was not trivial with vue engine

00:20:37,760 --> 00:20:41,120
but became straightforward with ivy

00:20:39,600 --> 00:20:42,720
we expect to have many more of these

00:20:41,120 --> 00:20:44,559
kinds of wins as we

00:20:42,720 --> 00:20:46,640
start taking advantage of what ib

00:20:44,559 --> 00:20:47,760
enables

00:20:46,640 --> 00:20:50,559
let's have a closer look at the

00:20:47,760 --> 00:20:52,159
internationalization

00:20:50,559 --> 00:20:53,840
with ib the internationalization

00:20:52,159 --> 00:20:56,080
pipeline has been completely reworked

00:20:53,840 --> 00:20:59,120
resulting in key new features for you

00:20:56,080 --> 00:21:01,760
our developers as well as are your users

00:20:59,120 --> 00:21:03,280
the new i18n can run in both compile as

00:21:01,760 --> 00:21:05,360
well as in runtime mode

00:21:03,280 --> 00:21:07,039
in contrast to view engine which only

00:21:05,360 --> 00:21:08,240
supported compile time

00:21:07,039 --> 00:21:10,720
we heard this request from our

00:21:08,240 --> 00:21:13,280
developers and we delivered on it

00:21:10,720 --> 00:21:14,320
many of you have custom ways of storing

00:21:13,280 --> 00:21:17,520
or in processing

00:21:14,320 --> 00:21:18,880
iit n and as a result runtime solution

00:21:17,520 --> 00:21:19,840
is a better fit for some of these use

00:21:18,880 --> 00:21:21,440
cases

00:21:19,840 --> 00:21:23,440
this feature is implemented in such a

00:21:21,440 --> 00:21:25,200
way that if you choose

00:21:23,440 --> 00:21:27,120
compile time your runtime part will

00:21:25,200 --> 00:21:29,039
automatically be tree shaken away

00:21:27,120 --> 00:21:31,030
making sure that the resulting bundle is

00:21:29,039 --> 00:21:32,880
as small as possible

00:21:31,030 --> 00:21:36,000
[Music]

00:21:32,880 --> 00:21:38,320
the new i18n is now unified between

00:21:36,000 --> 00:21:39,919
angular templates as well as string

00:21:38,320 --> 00:21:41,679
needing localization inside of your

00:21:39,919 --> 00:21:43,120
application again think about how you

00:21:41,679 --> 00:21:45,200
would localize the text which you have

00:21:43,120 --> 00:21:47,039
to pass to an alert function

00:21:45,200 --> 00:21:48,880
this means that you can have single iot

00:21:47,039 --> 00:21:50,400
and solution for your application

00:21:48,880 --> 00:21:52,640
whereas before you would need two

00:21:50,400 --> 00:21:53,280
solutions one which angular provided for

00:21:52,640 --> 00:21:54,960
templates

00:21:53,280 --> 00:21:57,360
and one which you would need to provide

00:21:54,960 --> 00:21:59,679
for the rest of your application

00:21:57,360 --> 00:22:02,000
the area where we are most proud of is

00:21:59,679 --> 00:22:04,400
time savings in iot and compilation

00:22:02,000 --> 00:22:05,600
in ivy the build times for each

00:22:04,400 --> 00:22:07,440
additional

00:22:05,600 --> 00:22:09,760
language locale had only minimal

00:22:07,440 --> 00:22:10,559
overhead whereas view engine it resulted

00:22:09,760 --> 00:22:13,120
in a complete

00:22:10,559 --> 00:22:15,200
separate compilation pipeline execution

00:22:13,120 --> 00:22:16,960
resulting in some serious time savings

00:22:15,200 --> 00:22:18,559
in some instances saving as much as an

00:22:16,960 --> 00:22:22,080
hour of compile time

00:22:18,559 --> 00:22:24,240
across all accounts the compile-time

00:22:22,080 --> 00:22:26,480
i18n also has better support for lazy

00:22:24,240 --> 00:22:28,000
loading so that only translation strings

00:22:26,480 --> 00:22:31,200
which are needed in the current lazy

00:22:28,000 --> 00:22:33,039
loaded chunks are loaded

00:22:31,200 --> 00:22:34,559
you can learn more much more about this

00:22:33,039 --> 00:22:34,880
effort in this wonderful blog post by

00:22:34,559 --> 00:22:36,880
pete

00:22:34,880 --> 00:22:39,280
bacon darwin in this blog post pete

00:22:36,880 --> 00:22:41,039
talks about how the new system works

00:22:39,280 --> 00:22:43,360
what kind of benefits the new approach

00:22:41,039 --> 00:22:44,159
brings how the improvements were made in

00:22:43,360 --> 00:22:45,919
the ways

00:22:44,159 --> 00:22:47,520
and which are backwards compatible and

00:22:45,919 --> 00:22:49,600
how we got such significant speed

00:22:47,520 --> 00:22:52,080
improvements at build time

00:22:49,600 --> 00:22:54,080
beat was also provided significant

00:22:52,080 --> 00:22:56,799
implementation muscle behind this effort

00:22:54,080 --> 00:22:56,799
thank you pete

00:22:58,799 --> 00:23:01,840
this is a statement which no developer

00:23:00,320 --> 00:23:04,000
has ever made builds

00:23:01,840 --> 00:23:05,360
bring a lot of benefits and this is why

00:23:04,000 --> 00:23:07,200
we tolerate them

00:23:05,360 --> 00:23:09,679
but from time perspective we always want

00:23:07,200 --> 00:23:11,440
to get all of those benefits faster

00:23:09,679 --> 00:23:12,880
this is why a lot of what we do is to

00:23:11,440 --> 00:23:14,159
focus on build time

00:23:12,880 --> 00:23:15,760
not just build time for a small

00:23:14,159 --> 00:23:17,200
application but also build time for

00:23:15,760 --> 00:23:18,880
large applications which

00:23:17,200 --> 00:23:21,280
may have hundreds of developers working

00:23:18,880 --> 00:23:23,440
on them improving build performance is

00:23:21,280 --> 00:23:25,039
always something which we focus on

00:23:23,440 --> 00:23:26,720
we were able to get a lot of wins in

00:23:25,039 --> 00:23:30,000
this area because of something we

00:23:26,720 --> 00:23:31,520
refer to as iv locality it is the idea

00:23:30,000 --> 00:23:33,200
that when the compiler runs the

00:23:31,520 --> 00:23:34,880
execution it

00:23:33,200 --> 00:23:37,280
should only have access to local

00:23:34,880 --> 00:23:38,880
information never global information

00:23:37,280 --> 00:23:41,440
but adhering to this mantra we can

00:23:38,880 --> 00:23:41,679
compile angular components incrementally

00:23:41,440 --> 00:23:43,919
in

00:23:41,679 --> 00:23:45,600
ib rather than a single compilation at

00:23:43,919 --> 00:23:47,679
the very end as was the case with view

00:23:45,600 --> 00:23:49,360
engine

00:23:47,679 --> 00:23:50,720
the amount of compilation needed is

00:23:49,360 --> 00:23:52,400
proportional to the change

00:23:50,720 --> 00:23:54,080
introduced in the code base rather than

00:23:52,400 --> 00:23:56,000
the size of the code base

00:23:54,080 --> 00:23:59,200
the focus on locality has created many

00:23:56,000 --> 00:24:00,960
benefits let's look at some

00:23:59,200 --> 00:24:02,559
an example of such an improvement is

00:24:00,960 --> 00:24:05,039
ngcc

00:24:02,559 --> 00:24:06,720
ngcc is a compatibility compiler which

00:24:05,039 --> 00:24:08,320
takes code from npm

00:24:06,720 --> 00:24:10,080
which was compiled with view engine and

00:24:08,320 --> 00:24:11,520
translates it into something which ivy

00:24:10,080 --> 00:24:14,480
can understand

00:24:11,520 --> 00:24:15,520
ngcc runs as part of your main your npm

00:24:14,480 --> 00:24:18,559
install and can take

00:24:15,520 --> 00:24:20,480
some time to execute with version 11

00:24:18,559 --> 00:24:23,760
the engine cc is now up to four times

00:24:20,480 --> 00:24:25,760
faster than it was in version 10.

00:24:23,760 --> 00:24:27,840
many thanks to yoast who spent a lot of

00:24:25,760 --> 00:24:28,640
time profiling the tooling pipeline and

00:24:27,840 --> 00:24:31,520
looking

00:24:28,640 --> 00:24:32,559
to time to understand both micro and

00:24:31,520 --> 00:24:35,200
macro level

00:24:32,559 --> 00:24:36,880
to figure out how best to make it faster

00:24:35,200 --> 00:24:37,600
his hard work has really paid off and

00:24:36,880 --> 00:24:39,440
shows

00:24:37,600 --> 00:24:42,320
that iv is enabling a lot of places

00:24:39,440 --> 00:24:43,520
where we can do better

00:24:42,320 --> 00:24:45,360
make sure that you're keeping up with

00:24:43,520 --> 00:24:46,159
the angular releases to take advantage

00:24:45,360 --> 00:24:47,760
of these wins

00:24:46,159 --> 00:24:49,919
we spend a lot of time making sure that

00:24:47,760 --> 00:24:52,559
your update experience is as uneventful

00:24:49,919 --> 00:24:52,559
as possible

00:24:52,799 --> 00:24:56,400
as part of the work the angular compiler

00:24:55,120 --> 00:24:58,000
on the angular compiler we have

00:24:56,400 --> 00:25:00,080
discovered places where we could make

00:24:58,000 --> 00:25:02,080
improvements in our upstream tooling

00:25:00,080 --> 00:25:03,200
and namely typescript he used to work

00:25:02,080 --> 00:25:04,640
with the typescript team

00:25:03,200 --> 00:25:07,279
at microsoft to improve typescript

00:25:04,640 --> 00:25:09,200
compiler and to upstream these benefits

00:25:07,279 --> 00:25:11,039
type scrim team will release most likely

00:25:09,200 --> 00:25:12,880
as part of version 4.1

00:25:11,039 --> 00:25:14,080
this is a great example of how focusing

00:25:12,880 --> 00:25:15,760
on a problem and

00:25:14,080 --> 00:25:17,840
going all the way down a rabbit hole can

00:25:15,760 --> 00:25:18,640
benefit not just angular developers

00:25:17,840 --> 00:25:21,120
directly

00:25:18,640 --> 00:25:23,279
but also non-angular typescript users as

00:25:21,120 --> 00:25:23,279
well

00:25:24,640 --> 00:25:28,159
faster builds are good but not hot

00:25:26,720 --> 00:25:30,400
module reloading is better

00:25:28,159 --> 00:25:31,679
hot module reloading allows us to update

00:25:30,400 --> 00:25:32,480
only what has changed in your

00:25:31,679 --> 00:25:35,360
application

00:25:32,480 --> 00:25:37,039
without forcing you to do a full refresh

00:25:35,360 --> 00:25:38,000
the result is even faster development

00:25:37,039 --> 00:25:39,760
cycle

00:25:38,000 --> 00:25:42,080
the faster the cycle the more productive

00:25:39,760 --> 00:25:43,840
that you our developers can be the

00:25:42,080 --> 00:25:44,799
standard development experience is to

00:25:43,840 --> 00:25:47,520
change code

00:25:44,799 --> 00:25:49,919
recompile and refresh the page with hot

00:25:47,520 --> 00:25:51,120
module reloading you can change the code

00:25:49,919 --> 00:25:52,799
and our development server will

00:25:51,120 --> 00:25:53,600
recompile just the piece of code that

00:25:52,799 --> 00:25:55,039
you changed

00:25:53,600 --> 00:25:56,559
and pushed only the changes to the

00:25:55,039 --> 00:25:57,840
browser without forcing you to do

00:25:56,559 --> 00:25:59,360
refresh

00:25:57,840 --> 00:26:01,440
this results not only in faster

00:25:59,360 --> 00:26:02,880
development experience but also less

00:26:01,440 --> 00:26:05,120
distracting

00:26:02,880 --> 00:26:06,799
less distracting one as you can focus on

00:26:05,120 --> 00:26:08,799
problems at hand without breaking your

00:26:06,799 --> 00:26:10,559
flow

00:26:08,799 --> 00:26:12,080
hot module reloading has been possible

00:26:10,559 --> 00:26:12,880
in angular for a while now but with

00:26:12,080 --> 00:26:15,039
version 11

00:26:12,880 --> 00:26:16,720
we have introduced an hmr flag which

00:26:15,039 --> 00:26:17,360
configures the development environment

00:26:16,720 --> 00:26:19,360
for you

00:26:17,360 --> 00:26:21,200
to provide a better on-ramp for more

00:26:19,360 --> 00:26:22,880
developers for more deliver

00:26:21,200 --> 00:26:24,559
for more developers to take advantage of

00:26:22,880 --> 00:26:27,279
this more efficient way of developing

00:26:24,559 --> 00:26:27,279
your application

00:26:29,760 --> 00:26:33,520
few other things which are coming in the

00:26:31,120 --> 00:26:33,520
future

00:26:34,240 --> 00:26:38,240
iv language service preview our language

00:26:37,120 --> 00:26:40,559
service which

00:26:38,240 --> 00:26:42,159
plugs into many popular ides provides

00:26:40,559 --> 00:26:43,919
code completion and type checking for

00:26:42,159 --> 00:26:45,600
your favorite editor

00:26:43,919 --> 00:26:47,039
the current version of language server

00:26:45,600 --> 00:26:48,799
runs on top of view engine and as a

00:26:47,039 --> 00:26:49,919
result has all of the same limitations

00:26:48,799 --> 00:26:52,080
as view engine does

00:26:49,919 --> 00:26:53,840
namely the type checking does not fully

00:26:52,080 --> 00:26:55,679
work in embedded templates

00:26:53,840 --> 00:26:57,200
with iv compiler the type checking is

00:26:55,679 --> 00:26:58,960
greatly improved bringing these benefits

00:26:57,200 --> 00:27:00,559
to code completion as well

00:26:58,960 --> 00:27:02,400
these benefits will be rolled out slowly

00:27:00,559 --> 00:27:03,440
and incrementally in future releases but

00:27:02,400 --> 00:27:07,679
you can try it now

00:27:03,440 --> 00:27:09,520
in version 11 as an early preview

00:27:07,679 --> 00:27:10,880
we work regularly with webpack team to

00:27:09,520 --> 00:27:12,799
share knowledge and make sure that we

00:27:10,880 --> 00:27:15,520
are aware of each other's roadmaps

00:27:12,799 --> 00:27:17,120
as part of version 11 we'll be shipping

00:27:15,520 --> 00:27:18,720
back version 5 preview to collect

00:27:17,120 --> 00:27:20,320
feedback from the community

00:27:18,720 --> 00:27:21,760
this will allow you to take advantage of

00:27:20,320 --> 00:27:23,279
the latest and greatest tooling which

00:27:21,760 --> 00:27:25,760
webpack has created

00:27:23,279 --> 00:27:26,480
the the main benefits expected are about

00:27:25,760 --> 00:27:28,320
around

00:27:26,480 --> 00:27:30,000
improved backpack caching which should

00:27:28,320 --> 00:27:32,840
result in faster builds

00:27:30,000 --> 00:27:34,880
module federation and better tree

00:27:32,840 --> 00:27:36,480
shaking we have been working very

00:27:34,880 --> 00:27:38,799
closely with the eslint community

00:27:36,480 --> 00:27:40,480
in particular many thanks to james henry

00:27:38,799 --> 00:27:41,279
who implemented a great path for

00:27:40,480 --> 00:27:42,880
migration

00:27:41,279 --> 00:27:45,120
migrating existing projects using

00:27:42,880 --> 00:27:47,440
deprecated tsln to community

00:27:45,120 --> 00:27:48,640
support at eslint this is entirely

00:27:47,440 --> 00:27:50,240
community effort

00:27:48,640 --> 00:27:52,080
on angular team we have been providing

00:27:50,240 --> 00:27:52,720
some guidance but community did all the

00:27:52,080 --> 00:27:54,240
work

00:27:52,720 --> 00:27:56,000
as part of version 11 you will have a

00:27:54,240 --> 00:28:02,080
migration path to move from a deprecated

00:27:56,000 --> 00:28:05,200
tsln to aslint

00:28:02,080 --> 00:28:06,720
and as we mentioned we have plenty of

00:28:05,200 --> 00:28:08,559
long-awaited and highly

00:28:06,720 --> 00:28:10,320
um desired bug fixes and other

00:28:08,559 --> 00:28:12,799
improvements

00:28:10,320 --> 00:28:14,320
let's look at a longer term horizon of

00:28:12,799 --> 00:28:17,440
what we are working on

00:28:14,320 --> 00:28:18,880
and what you can expect next one thing

00:28:17,440 --> 00:28:20,720
which doesn't seem as a big deal at

00:28:18,880 --> 00:28:22,559
first but we believe will bring

00:28:20,720 --> 00:28:25,520
speed improvements to your first content

00:28:22,559 --> 00:28:27,039
paint is optimizing block resources

00:28:25,520 --> 00:28:29,120
when the browser loads the application's

00:28:27,039 --> 00:28:30,720
html there are strict rules about

00:28:29,120 --> 00:28:33,279
when it is possible for the browser to

00:28:30,720 --> 00:28:34,720
render html per browser standards

00:28:33,279 --> 00:28:36,880
the standards say that the browser has

00:28:34,720 --> 00:28:38,000
to wait with rendering until the style

00:28:36,880 --> 00:28:40,240
references

00:28:38,000 --> 00:28:41,440
above the html are resolved this means

00:28:40,240 --> 00:28:43,440
that many

00:28:41,440 --> 00:28:45,360
css references will become blocking in

00:28:43,440 --> 00:28:47,200
practice

00:28:45,360 --> 00:28:49,039
analyzing the css and extracting only

00:28:47,200 --> 00:28:50,320
the relevant styling information

00:28:49,039 --> 00:28:52,320
and then inlining the styling

00:28:50,320 --> 00:28:53,919
information the html can have dramatic

00:28:52,320 --> 00:28:55,360
improvements for the first content paint

00:28:53,919 --> 00:28:57,039
benchmarks

00:28:55,360 --> 00:28:58,799
to achieve this angular team has been

00:28:57,039 --> 00:28:59,760
working closely on a weekly basis with

00:28:58,799 --> 00:29:01,679
the chrome team

00:28:59,760 --> 00:29:03,120
to make the web better we have been

00:29:01,679 --> 00:29:05,200
discussing on how to automate such

00:29:03,120 --> 00:29:07,120
improvements for angular users

00:29:05,200 --> 00:29:08,399
and in the process explore many

00:29:07,120 --> 00:29:10,159
different strategies

00:29:08,399 --> 00:29:12,720
this strategy which we have settled on

00:29:10,159 --> 00:29:14,080
is this angular statically analyzes the

00:29:12,720 --> 00:29:15,760
component templates

00:29:14,080 --> 00:29:17,279
from those templates angular extracts

00:29:15,760 --> 00:29:19,679
references to the css

00:29:17,279 --> 00:29:20,880
and builds up map of which components

00:29:19,679 --> 00:29:22,399
need to know about which style

00:29:20,880 --> 00:29:24,000
information

00:29:22,399 --> 00:29:26,240
angular then uses this map to inline the

00:29:24,000 --> 00:29:28,320
desired styling and compile time

00:29:26,240 --> 00:29:30,320
finally the rest of the styles can get

00:29:28,320 --> 00:29:31,279
can be loaded lazily after the first

00:29:30,320 --> 00:29:34,960
page load

00:29:31,279 --> 00:29:34,960
is complete and rendering is done

00:29:35,200 --> 00:29:39,679
with some early benchmarks we're seeing

00:29:37,520 --> 00:29:41,200
improvements as high as 3.7 seconds for

00:29:39,679 --> 00:29:42,559
the first content paint

00:29:41,200 --> 00:29:44,159
this kind of improvement is something

00:29:42,559 --> 00:29:47,200
that angular team is very excited about

00:29:44,159 --> 00:29:48,799
and we hope you will be too

00:29:47,200 --> 00:29:50,240
and because the angular is evergreen you

00:29:48,799 --> 00:29:54,240
can get all of these benefits with

00:29:50,240 --> 00:29:56,159
minimal effort on your side

00:29:54,240 --> 00:29:57,760
we strive to make sure that the above

00:29:56,159 --> 00:29:59,440
command upgrades your code base to the

00:29:57,760 --> 00:30:02,000
latest version of angular

00:29:59,440 --> 00:30:04,080
it looks simple and innocent but there

00:30:02,000 --> 00:30:05,679
is a lot of technology packed behind it

00:30:04,080 --> 00:30:07,200
in its simplest form it installs the

00:30:05,679 --> 00:30:08,080
latest version of angular in your

00:30:07,200 --> 00:30:10,399
project

00:30:08,080 --> 00:30:11,120
but it does so it does much more as

00:30:10,399 --> 00:30:13,039
angular team

00:30:11,120 --> 00:30:15,440
deprecates apis or changes how things

00:30:13,039 --> 00:30:17,679
should be done we bundle automatic cone

00:30:15,440 --> 00:30:19,120
refactoring operations to this command

00:30:17,679 --> 00:30:20,720
the result is that when you upgrade to

00:30:19,120 --> 00:30:23,120
the latest version of angular

00:30:20,720 --> 00:30:24,880
we not only download latest bits but

00:30:23,120 --> 00:30:27,039
also change your code base to stay

00:30:24,880 --> 00:30:28,080
compatible with the latest api and best

00:30:27,039 --> 00:30:30,080
practices

00:30:28,080 --> 00:30:32,720
this feels like magic and we are very

00:30:30,080 --> 00:30:32,720
proud of this

00:30:33,760 --> 00:30:36,960
here's a list of things which we are

00:30:35,279 --> 00:30:39,840
investigating and may be coming up in

00:30:36,960 --> 00:30:39,840
angular's future

00:30:40,000 --> 00:30:43,679
webpack 5 module federation is promising

00:30:43,120 --> 00:30:45,279
to bring

00:30:43,679 --> 00:30:47,120
better lazy loading and more fine

00:30:45,279 --> 00:30:48,720
grained lazy loading to your application

00:30:47,120 --> 00:30:50,880
this would further help improve

00:30:48,720 --> 00:30:54,080
application startup time and response

00:30:50,880 --> 00:30:55,440
startup time and responsiveness angular

00:30:54,080 --> 00:30:56,640
devtools is something we'll talk about

00:30:55,440 --> 00:30:59,039
next so i'm going to defer the

00:30:56,640 --> 00:31:00,960
discussion for now

00:30:59,039 --> 00:31:02,559
optional ng module is something we have

00:31:00,960 --> 00:31:04,240
been giving a lot of thought

00:31:02,559 --> 00:31:06,000
the goal is to simplify the learning

00:31:04,240 --> 00:31:07,600
journey by reducing the number of

00:31:06,000 --> 00:31:08,480
concepts which you have to know to get

00:31:07,600 --> 00:31:10,080
started

00:31:08,480 --> 00:31:13,039
one way to achieve that would be to make

00:31:10,080 --> 00:31:13,039
modules optional

00:31:13,519 --> 00:31:18,000
zone zoneless zone.js is a very cool

00:31:16,240 --> 00:31:20,640
piece of technology which allows you to

00:31:18,000 --> 00:31:22,720
not have to worry about how about when

00:31:20,640 --> 00:31:25,120
angular needs to update the ui

00:31:22,720 --> 00:31:25,840
zone.js is magic which makes the data

00:31:25,120 --> 00:31:28,960
binding

00:31:25,840 --> 00:31:30,000
just work however zone js is not free it

00:31:28,960 --> 00:31:32,080
has a payload cost

00:31:30,000 --> 00:31:33,360
runtime cost as well as it tends to earn

00:31:32,080 --> 00:31:35,279
a side of caution

00:31:33,360 --> 00:31:36,559
and executes change direction way more

00:31:35,279 --> 00:31:38,880
often than it needs to be

00:31:36,559 --> 00:31:40,480
just to be safe if you want to run

00:31:38,880 --> 00:31:42,320
angular and want to minimize the number

00:31:40,480 --> 00:31:43,840
of change detection cycles as well as to

00:31:42,320 --> 00:31:45,360
build the leanest application

00:31:43,840 --> 00:31:47,840
then zoneless may be something of

00:31:45,360 --> 00:31:47,840
interest to you

00:31:48,240 --> 00:31:51,440
okay let's talk about devtools more in

00:31:49,840 --> 00:31:52,799
depth you can prob

00:31:51,440 --> 00:31:54,880
you are probably familiar with chrome

00:31:52,799 --> 00:31:56,720
dev tools extension called augury

00:31:54,880 --> 00:31:58,480
it was developed by wrangle io and it

00:31:56,720 --> 00:32:00,960
shows you the application

00:31:58,480 --> 00:32:02,640
structure injector relationships and

00:32:00,960 --> 00:32:04,080
other insights into how your application

00:32:02,640 --> 00:32:05,840
is running

00:32:04,080 --> 00:32:07,200
because of their expertise we are

00:32:05,840 --> 00:32:09,440
partnering with them to develop

00:32:07,200 --> 00:32:11,120
angular dev tools this is an effort in a

00:32:09,440 --> 00:32:12,000
very early stage so we can't make any

00:32:11,120 --> 00:32:14,000
promises

00:32:12,000 --> 00:32:17,200
but we can show you some of the features

00:32:14,000 --> 00:32:17,200
we are in the works

00:32:17,919 --> 00:32:22,159
what you see here is a component

00:32:19,600 --> 00:32:22,799
explorer this allows you to see dom tree

00:32:22,159 --> 00:32:24,399
as well as

00:32:22,799 --> 00:32:26,559
see which components and directives are

00:32:24,399 --> 00:32:28,159
attached to which locations in the dom

00:32:26,559 --> 00:32:29,760
you can select a particular component

00:32:28,159 --> 00:32:31,360
and examine its properties

00:32:29,760 --> 00:32:32,720
and then interact with them and then see

00:32:31,360 --> 00:32:34,080
how those changes reflect your

00:32:32,720 --> 00:32:35,679
application

00:32:34,080 --> 00:32:38,720
if you have used augury you should be

00:32:35,679 --> 00:32:38,720
very familiar with this

00:32:38,960 --> 00:32:42,399
on top of the component explorer angular

00:32:40,720 --> 00:32:43,840
devtools provides a profiler

00:32:42,399 --> 00:32:45,760
here you can see which components are

00:32:43,840 --> 00:32:47,039
running change detection when and how

00:32:45,760 --> 00:32:48,000
these change detection cycles spread

00:32:47,039 --> 00:32:49,360
across over

00:32:48,000 --> 00:32:51,760
across all of the components and

00:32:49,360 --> 00:32:53,440
directives you can also see the source

00:32:51,760 --> 00:32:54,880
of the change detection triggers

00:32:53,440 --> 00:32:56,559
you can then see how much time your

00:32:54,880 --> 00:32:58,960
applications spend in change detection

00:32:56,559 --> 00:32:59,679
lifecycle hooks or application code as

00:32:58,960 --> 00:33:03,760
well as

00:32:59,679 --> 00:33:03,760
frequent let's see of these changes

00:33:05,200 --> 00:33:10,000
in 2019 in angular connect i give a talk

00:33:07,760 --> 00:33:11,919
on how we are making angular fast the

00:33:10,000 --> 00:33:13,360
continuous focus on memory pressure as

00:33:11,919 --> 00:33:14,640
well as writing code in a way which

00:33:13,360 --> 00:33:17,440
makes it very easy

00:33:14,640 --> 00:33:18,320
and performant for vms to execute the

00:33:17,440 --> 00:33:20,399
result

00:33:18,320 --> 00:33:22,840
is the is that angular can be performed

00:33:20,399 --> 00:33:24,880
even on low power and low resource

00:33:22,840 --> 00:33:26,559
devices you can think of this as our

00:33:24,880 --> 00:33:28,159
focus on micro optimization of the

00:33:26,559 --> 00:33:28,720
framework so that each change detection

00:33:28,159 --> 00:33:32,559
cycle

00:33:28,720 --> 00:33:34,399
is as fast as possible but all of these

00:33:32,559 --> 00:33:35,919
focus on micro optimization may be

00:33:34,399 --> 00:33:38,240
missing a bigger picture

00:33:35,919 --> 00:33:39,600
as i said earlier zone.js is what allows

00:33:38,240 --> 00:33:41,840
you to not have to worry about

00:33:39,600 --> 00:33:43,760
when angular needs to update the ui

00:33:41,840 --> 00:33:45,679
however zone.js does not have perfect

00:33:43,760 --> 00:33:47,360
insight into your application

00:33:45,679 --> 00:33:50,159
and so it errs on the side of caution

00:33:47,360 --> 00:33:51,440
and overcalls the change diction

00:33:50,159 --> 00:33:53,679
if you want to build an application

00:33:51,440 --> 00:33:55,360
which can get you the last ounce of

00:33:53,679 --> 00:33:57,440
performance from your device

00:33:55,360 --> 00:33:59,279
then taking advantage of uh then taking

00:33:57,440 --> 00:34:01,600
change detection into your own hands

00:33:59,279 --> 00:34:02,960
allows you you to micro optimize the

00:34:01,600 --> 00:34:05,600
application

00:34:02,960 --> 00:34:07,360
zoneless is our exploration to how we

00:34:05,600 --> 00:34:07,840
could give that developer more control

00:34:07,360 --> 00:34:09,919
over

00:34:07,840 --> 00:34:11,679
when the change detection happens by

00:34:09,919 --> 00:34:12,879
doing so we would be able to reduce the

00:34:11,679 --> 00:34:14,320
number of change detection cycles

00:34:12,879 --> 00:34:15,919
significantly

00:34:14,320 --> 00:34:17,200
so a good way to think about it is that

00:34:15,919 --> 00:34:18,159
framework does a lot of micro

00:34:17,200 --> 00:34:20,480
optimization

00:34:18,159 --> 00:34:22,000
and zoneless will allow you to do macro

00:34:20,480 --> 00:34:23,919
optimization

00:34:22,000 --> 00:34:26,240
this is still in a very early phase and

00:34:23,919 --> 00:34:26,800
we will and we have more details we will

00:34:26,240 --> 00:34:29,520
be sure

00:34:26,800 --> 00:34:32,639
to share them with you so that we can

00:34:29,520 --> 00:34:32,639
get the community involved

00:34:33,200 --> 00:34:36,639
now let's talk about steps we're taking

00:34:34,720 --> 00:34:38,560
to make sure to make the community even

00:34:36,639 --> 00:34:39,919
more welcome by giving them visibility

00:34:38,560 --> 00:34:43,200
into what is going on

00:34:39,919 --> 00:34:44,960
and what our thought processes are

00:34:43,200 --> 00:34:46,399
one of the main questions we have heard

00:34:44,960 --> 00:34:47,440
from the community is that they don't

00:34:46,399 --> 00:34:49,760
have

00:34:47,440 --> 00:34:51,679
they don't know where angular is heading

00:34:49,760 --> 00:34:54,240
we worked hard to collect all of the

00:34:51,679 --> 00:34:55,119
work which we have been working on in a

00:34:54,240 --> 00:34:57,280
single place

00:34:55,119 --> 00:34:59,680
and publishing an angular roadmap this

00:34:57,280 --> 00:35:01,040
is was a hard effort because the web is

00:34:59,680 --> 00:35:02,640
changing very fast

00:35:01,040 --> 00:35:04,079
and there are many requirements which

00:35:02,640 --> 00:35:06,160
are being placed on angular

00:35:04,079 --> 00:35:07,359
from both internal customers as well as

00:35:06,160 --> 00:35:10,160
external community

00:35:07,359 --> 00:35:12,079
and all of this has to happen parallel

00:35:10,160 --> 00:35:15,119
as we are working towards keeping

00:35:12,079 --> 00:35:17,119
our existing commitments

00:35:15,119 --> 00:35:18,160
the roadmap is shared on angular i o for

00:35:17,119 --> 00:35:19,839
europe to explore

00:35:18,160 --> 00:35:21,680
our plans are to update the roadmap

00:35:19,839 --> 00:35:23,119
quarterly so we can keep the community

00:35:21,680 --> 00:35:26,720
informed and involved

00:35:23,119 --> 00:35:26,720
we invite you to go and explore it

00:35:27,119 --> 00:35:30,640
to continue our inclusivity we started a

00:35:29,119 --> 00:35:32,720
new rfc process

00:35:30,640 --> 00:35:34,480
where we both communicate to the

00:35:32,720 --> 00:35:35,920
community our plans as well as invite

00:35:34,480 --> 00:35:37,200
community to give us feedback about the

00:35:35,920 --> 00:35:38,960
direction

00:35:37,200 --> 00:35:41,280
so far this process has been piloted on

00:35:38,960 --> 00:35:43,119
two rfcs these rfcs have been

00:35:41,280 --> 00:35:45,520
have proven very beneficial as they have

00:35:43,119 --> 00:35:47,119
announced uncovered a lot of valuable

00:35:45,520 --> 00:35:48,800
and insightful feedback for us

00:35:47,119 --> 00:35:51,040
and at the same time made the community

00:35:48,800 --> 00:35:53,280
more informed about the direction we're

00:35:51,040 --> 00:35:55,040
taking but also about the deep resources

00:35:53,280 --> 00:35:56,480
which oftentimes may not be obvious

00:35:55,040 --> 00:35:58,800
behind the choices

00:35:56,480 --> 00:36:01,440
deep reasons which might not be obvious

00:35:58,800 --> 00:36:03,280
behind these choices

00:36:01,440 --> 00:36:06,400
the first rfcv pilot was about

00:36:03,280 --> 00:36:08,880
distributed format of the ib libraries

00:36:06,400 --> 00:36:09,839
the rfc represented technical reasoning

00:36:08,880 --> 00:36:12,000
about the direction

00:36:09,839 --> 00:36:13,839
and invited the community to discuss it

00:36:12,000 --> 00:36:16,000
has received over 100 likes

00:36:13,839 --> 00:36:17,520
and over 500 replies demonstrating the

00:36:16,000 --> 00:36:20,800
value of these discussions

00:36:17,520 --> 00:36:23,359
as well as the community engagement

00:36:20,800 --> 00:36:25,280
the second rfc was on angular cli side

00:36:23,359 --> 00:36:26,560
and was focused on eliminating rendering

00:36:25,280 --> 00:36:28,880
blocking requests which we have

00:36:26,560 --> 00:36:30,480
discussed earlier it too has drawn an

00:36:28,880 --> 00:36:33,200
excellent community engagement with over

00:36:30,480 --> 00:36:35,040
55 likes and over 25 comments

00:36:33,200 --> 00:36:38,480
our plan is to do more fcs in the future

00:36:35,040 --> 00:36:38,480
to keep the community engaged and

00:36:38,839 --> 00:36:41,760
informed

00:36:40,160 --> 00:36:43,839
i hope i was able to show you how we

00:36:41,760 --> 00:36:46,560
prioritize our actions

00:36:43,839 --> 00:36:48,320
and around our core values interview we

00:36:46,560 --> 00:36:50,480
want to focus on our users

00:36:48,320 --> 00:36:52,560
our developers and our community we

00:36:50,480 --> 00:36:54,320
focus on our users by making sure that

00:36:52,560 --> 00:36:55,440
angular applications are fast and

00:36:54,320 --> 00:36:57,200
feature rich

00:36:55,440 --> 00:36:58,800
we do this by building features into

00:36:57,200 --> 00:36:59,920
angular framework which makes it easy

00:36:58,800 --> 00:37:01,359
for you

00:36:59,920 --> 00:37:03,280
the angular developer to build

00:37:01,359 --> 00:37:05,359
world-class applications

00:37:03,280 --> 00:37:06,800
features such as internationalization

00:37:05,359 --> 00:37:09,359
making sure that applications run

00:37:06,800 --> 00:37:10,320
fast that the binaries are optimized and

00:37:09,359 --> 00:37:12,000
small

00:37:10,320 --> 00:37:13,520
we achieve these through collaboration

00:37:12,000 --> 00:37:14,000
with internal google teams such as

00:37:13,520 --> 00:37:15,280
chrome

00:37:14,000 --> 00:37:17,200
as well as external teams such as

00:37:15,280 --> 00:37:19,520
typescript and webpack

00:37:17,200 --> 00:37:21,040
we focus on you the developer and we

00:37:19,520 --> 00:37:22,320
focus to make sure that your developer

00:37:21,040 --> 00:37:24,720
experience is great

00:37:22,320 --> 00:37:26,000
things such as faster built better npm

00:37:24,720 --> 00:37:28,800
publishing formats

00:37:26,000 --> 00:37:31,359
easy upgrades focus on api stability and

00:37:28,800 --> 00:37:32,960
documentation

00:37:31,359 --> 00:37:34,400
finally we focus on a community by

00:37:32,960 --> 00:37:36,320
providing ways to engage

00:37:34,400 --> 00:37:37,599
and inform the community things such as

00:37:36,320 --> 00:37:39,920
publishing a road map

00:37:37,599 --> 00:37:41,599
creating rfc process and focusing and

00:37:39,920 --> 00:37:44,400
burning down issues

00:37:41,599 --> 00:37:46,079
uh on our backlog we want to build

00:37:44,400 --> 00:37:47,599
angular together where everyone feels

00:37:46,079 --> 00:37:48,960
welcome

00:37:47,599 --> 00:37:50,880
thank you for taking the time to listen

00:37:48,960 --> 00:37:54,880
to me to us and being part of the

00:37:50,880 --> 00:37:54,880

YouTube URL: https://www.youtube.com/watch?v=mIiVyuQ6FfM


