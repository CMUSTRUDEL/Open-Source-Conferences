Title: Testing NgRX | Cecelia Martinez | EnterpriseNG 2020Â #ngconf
Publication date: 2021-06-28
Playlist: EnterpriseNG 2020: Presentations
Description: 
	Interested in adding NgRx store validation to your UI or end-to-end tests? With Cypress, you can access your NgRx store in the browser to make assertions and even dispatch actions for testing. Learn how to better validate the behavior of your NgRx store when responding to real input in a browser.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,110 --> 00:00:04,460
[Music]

00:00:11,220 --> 00:00:14,359
[Music]

00:00:14,920 --> 00:00:17,920
not

00:00:18,560 --> 00:00:21,920
hello i'm cecilia martinez i'm a success

00:00:21,119 --> 00:00:24,960
engineer at

00:00:21,920 --> 00:00:31,840
cypress and this is testing ngrx

00:00:24,960 --> 00:00:31,840
actions and effects with cyprus

00:00:32,160 --> 00:00:36,960
so why end-to-end testing for ngrx

00:00:35,280 --> 00:00:39,360
specifically

00:00:36,960 --> 00:00:40,000
uh so i wanted to demonstrate how to

00:00:39,360 --> 00:00:42,480
validate

00:00:40,000 --> 00:00:44,800
ngrx store behavior when responding to

00:00:42,480 --> 00:00:46,879
actual user events in the browser

00:00:44,800 --> 00:00:48,079
a lot of testing of njrx currently is

00:00:46,879 --> 00:00:50,079
done with unit testing

00:00:48,079 --> 00:00:51,600
and this can be very effective to ensure

00:00:50,079 --> 00:00:55,120
that you know you get the

00:00:51,600 --> 00:00:56,960
expected output when doing different

00:00:55,120 --> 00:00:59,280
actions and things in the store

00:00:56,960 --> 00:01:01,199
but how does that hold up when your

00:00:59,280 --> 00:01:02,640
user's actually using your application

00:01:01,199 --> 00:01:04,239
so that's what i wanted to demonstrate

00:01:02,640 --> 00:01:06,080
today

00:01:04,239 --> 00:01:07,920
it also allows you to have more complete

00:01:06,080 --> 00:01:09,360
and effective end-to-end tests so

00:01:07,920 --> 00:01:10,240
typically with end-to-end tests you're

00:01:09,360 --> 00:01:11,920
validating

00:01:10,240 --> 00:01:13,520
and making assertions on things that are

00:01:11,920 --> 00:01:16,880
happening in the dom

00:01:13,520 --> 00:01:17,759
by testing your ngrx store with your end

00:01:16,880 --> 00:01:20,000
to end test

00:01:17,759 --> 00:01:22,400
you can dive even deeper and ensure that

00:01:20,000 --> 00:01:25,360
the state management of your application

00:01:22,400 --> 00:01:27,360
is functioning as it should be

00:01:25,360 --> 00:01:29,040
additionally when i started researching

00:01:27,360 --> 00:01:31,119
uh for this talk i found a lot of great

00:01:29,040 --> 00:01:32,240
existing resources for unit testing with

00:01:31,119 --> 00:01:35,280
ngrx but

00:01:32,240 --> 00:01:36,320
very little on end-to-end testing for

00:01:35,280 --> 00:01:39,360
ngrx

00:01:36,320 --> 00:01:41,200
so i wanted to add something new and not

00:01:39,360 --> 00:01:42,479
essentially redo what a lot of those

00:01:41,200 --> 00:01:45,520
really great resources

00:01:42,479 --> 00:01:47,920
that already exist are doing so speaking

00:01:45,520 --> 00:01:49,360
of those existing uh resources

00:01:47,920 --> 00:01:50,399
i leveraged one of those for the

00:01:49,360 --> 00:01:52,000
application that we're going to be

00:01:50,399 --> 00:01:55,200
testing today

00:01:52,000 --> 00:01:56,719
so our application under test is a

00:01:55,200 --> 00:01:59,799
favorite tv show app

00:01:56,719 --> 00:02:01,439
and you can find the test code at

00:01:59,799 --> 00:02:04,719
github.comcreate

00:02:01,439 --> 00:02:05,600
this dot ngrx testing and so this

00:02:04,719 --> 00:02:09,200
application

00:02:05,600 --> 00:02:10,319
it is a fork of this.ngrx testing which

00:02:09,200 --> 00:02:13,040
was an application

00:02:10,319 --> 00:02:14,959
used for the javascript marathon easy

00:02:13,040 --> 00:02:16,000
angular unit testing and ngrx

00:02:14,959 --> 00:02:18,959
presentation

00:02:16,000 --> 00:02:21,440
highly recommend giving that a watch for

00:02:18,959 --> 00:02:23,120
examples on unit testing with ngrx

00:02:21,440 --> 00:02:26,640
and we're going to be using that same

00:02:23,120 --> 00:02:29,040
application for cypress tests with ngrx

00:02:26,640 --> 00:02:31,120
so like i mentioned it's a favorite tv

00:02:29,040 --> 00:02:32,800
show application

00:02:31,120 --> 00:02:34,480
and it has a very you know some basic

00:02:32,800 --> 00:02:36,800
functionality kind of similar to

00:02:34,480 --> 00:02:37,599
a to-do app right so you can favorite a

00:02:36,800 --> 00:02:39,760
tv show

00:02:37,599 --> 00:02:42,879
unfavored a tv show and you can also

00:02:39,760 --> 00:02:42,879
remove one from the list

00:02:44,239 --> 00:02:47,360
so i want to talk about the testing

00:02:45,760 --> 00:02:48,080
approach and the different applications

00:02:47,360 --> 00:02:52,400
that we're going to

00:02:48,080 --> 00:02:53,680
cover today so the first step in testing

00:02:52,400 --> 00:02:55,200
your ngrx store

00:02:53,680 --> 00:02:57,040
is making sure that it's exposed to

00:02:55,200 --> 00:02:57,680
cyprus and you also want to make sure

00:02:57,040 --> 00:02:59,120
it's only

00:02:57,680 --> 00:03:01,360
exposed when you're in a testing

00:02:59,120 --> 00:03:04,159
environment or when you're using cypress

00:03:01,360 --> 00:03:06,080
so we'll talk about how to do that we'll

00:03:04,159 --> 00:03:07,920
talk about how to assert on actions

00:03:06,080 --> 00:03:09,680
so we'll be able to validate that

00:03:07,920 --> 00:03:12,239
correct actions have

00:03:09,680 --> 00:03:13,920
occurred and that you know any props

00:03:12,239 --> 00:03:15,360
that were passed through also were

00:03:13,920 --> 00:03:16,560
correct

00:03:15,360 --> 00:03:18,560
we're going to talk about asserting on

00:03:16,560 --> 00:03:21,840
effects so making sure that the

00:03:18,560 --> 00:03:23,440
expected side effects occur and we're

00:03:21,840 --> 00:03:25,200
also going to talk about how you can use

00:03:23,440 --> 00:03:27,840
cypress to actually dispatch

00:03:25,200 --> 00:03:29,680
actions in your ngrx store so all of

00:03:27,840 --> 00:03:30,400
this methodology i did not make up

00:03:29,680 --> 00:03:32,640
myself

00:03:30,400 --> 00:03:34,000
it comes from a cypress blog post about

00:03:32,640 --> 00:03:36,000
testing redux

00:03:34,000 --> 00:03:37,840
so applying the same methods for testing

00:03:36,000 --> 00:03:38,879
redux but specifically using here for

00:03:37,840 --> 00:03:40,400
ngrx

00:03:38,879 --> 00:03:44,159
which operates a little bit differently

00:03:40,400 --> 00:03:44,159
and has some additional functionality

00:03:44,959 --> 00:03:49,360
so like i mentioned uh the first thing

00:03:46,720 --> 00:03:52,720
that we need to do is expose our ngx to

00:03:49,360 --> 00:03:56,080
our ngrx store to cyprus

00:03:52,720 --> 00:03:58,319
so within our app.component.ts so again

00:03:56,080 --> 00:04:00,000
this is the application code this is not

00:03:58,319 --> 00:04:03,760
within your test code you do need to do

00:04:00,000 --> 00:04:05,200
this on the application code so in our

00:04:03,760 --> 00:04:06,799
you know app component that we're

00:04:05,200 --> 00:04:09,519
exporting essentially

00:04:06,799 --> 00:04:11,599
what we're doing is on line four you can

00:04:09,519 --> 00:04:13,120
see here that we're

00:04:11,599 --> 00:04:15,360
just stating that if the window is

00:04:13,120 --> 00:04:15,840
cypress so again if the application is

00:04:15,360 --> 00:04:18,639
running

00:04:15,840 --> 00:04:20,000
in cyprus we want to expose the store so

00:04:18,639 --> 00:04:22,800
we're going to say that the

00:04:20,000 --> 00:04:24,639
window dot store is our store and so

00:04:22,800 --> 00:04:26,960
that this dot store is essentially just

00:04:24,639 --> 00:04:28,720
our ngrc store for our application

00:04:26,960 --> 00:04:30,800
and again we're saying if we're in

00:04:28,720 --> 00:04:33,120
cyprus if window.cypress

00:04:30,800 --> 00:04:35,199
then please make the windows store match

00:04:33,120 --> 00:04:36,960
up with our application store

00:04:35,199 --> 00:04:40,639
and that allows us to be able to tap

00:04:36,960 --> 00:04:40,639
into it while we're running our tests

00:04:41,440 --> 00:04:44,960
all right so let's get into some of the

00:04:42,880 --> 00:04:46,240
actual magic that you can do with cyprus

00:04:44,960 --> 00:04:48,800
and so the first thing that we're going

00:04:46,240 --> 00:04:52,960
to talk about is asserting on ngrx

00:04:48,800 --> 00:04:54,800
actions so this is an example of one of

00:04:52,960 --> 00:04:56,639
our actions in our application so this

00:04:54,800 --> 00:04:59,919
is in our actions.ts

00:04:56,639 --> 00:05:00,320
file within our ngrx store folder and we

00:04:59,919 --> 00:05:02,400
have

00:05:00,320 --> 00:05:04,800
a get all success action that

00:05:02,400 --> 00:05:06,080
essentially has a type of shows api get

00:05:04,800 --> 00:05:08,960
all shows success

00:05:06,080 --> 00:05:10,000
and it accepts a prop of shows which is

00:05:08,960 --> 00:05:12,720
an array of

00:05:10,000 --> 00:05:14,160
the shows that are displayed on the page

00:05:12,720 --> 00:05:16,000
so in this case we have

00:05:14,160 --> 00:05:18,160
four tv shows that were displayed on the

00:05:16,000 --> 00:05:20,479
page and when the page loads uh

00:05:18,160 --> 00:05:21,680
there's a get all success action with

00:05:20,479 --> 00:05:23,919
the type again of

00:05:21,680 --> 00:05:24,720
shows api get all success and it accepts

00:05:23,919 --> 00:05:27,680
the props

00:05:24,720 --> 00:05:30,160
of shows so how can we test this uh so

00:05:27,680 --> 00:05:33,199
you can assert on the type of action

00:05:30,160 --> 00:05:35,600
last dispatched in the ngrx store

00:05:33,199 --> 00:05:38,400
as well as the value of the props that

00:05:35,600 --> 00:05:40,160
are passed through

00:05:38,400 --> 00:05:41,440
so what this looks like is in our test

00:05:40,160 --> 00:05:43,520
code

00:05:41,440 --> 00:05:45,360
you may see uh typically what you would

00:05:43,520 --> 00:05:48,479
have to do right is validate

00:05:45,360 --> 00:05:50,000
that we have four shows uh just and

00:05:48,479 --> 00:05:51,520
we're making a validation here on the

00:05:50,000 --> 00:05:54,720
dom so we're saying

00:05:51,520 --> 00:05:56,479
you know psi dot get data size show card

00:05:54,720 --> 00:05:58,000
we have four of those it should have

00:05:56,479 --> 00:05:59,840
length of four

00:05:58,000 --> 00:06:01,440
that's a kind of a way to just validate

00:05:59,840 --> 00:06:02,240
that everything is displaying correctly

00:06:01,440 --> 00:06:03,600
in the dom

00:06:02,240 --> 00:06:06,800
but if we want to go further and

00:06:03,600 --> 00:06:09,919
actually validate via our ngrx store

00:06:06,800 --> 00:06:10,400
that that action dispatched correctly we

00:06:09,919 --> 00:06:13,039
can

00:06:10,400 --> 00:06:14,240
in our test code tap in to the store so

00:06:13,039 --> 00:06:17,280
we can say that

00:06:14,240 --> 00:06:19,199
this on the window our store

00:06:17,280 --> 00:06:20,639
is the windows store so we're declaring

00:06:19,199 --> 00:06:22,560
that variable

00:06:20,639 --> 00:06:24,800
and then we're accessing the action that

00:06:22,560 --> 00:06:26,800
last ran in our store

00:06:24,800 --> 00:06:28,240
so we can do that by tapping into store

00:06:26,800 --> 00:06:30,479
dot actions observer

00:06:28,240 --> 00:06:31,759
and then the underscored value so again

00:06:30,479 --> 00:06:35,759
this is the last

00:06:31,759 --> 00:06:38,240
action that dispatched in our njrx store

00:06:35,759 --> 00:06:39,199
we can also access the props so in this

00:06:38,240 --> 00:06:41,360
case we have

00:06:39,199 --> 00:06:42,479
the value of the action and we're doing

00:06:41,360 --> 00:06:44,240
dot shows

00:06:42,479 --> 00:06:45,680
but again if you had any other props

00:06:44,240 --> 00:06:46,080
that you were passing through you'd be

00:06:45,680 --> 00:06:49,759
able

00:06:46,080 --> 00:06:51,759
to grab the value from those by just

00:06:49,759 --> 00:06:53,840
passing that through with the dots so

00:06:51,759 --> 00:06:54,800
say for example in addition to shows we

00:06:53,840 --> 00:06:57,440
also

00:06:54,800 --> 00:06:59,680
had a user list so then we and that was

00:06:57,440 --> 00:07:02,560
a prop that was accepted on our action

00:06:59,680 --> 00:07:05,440
so then we could do underscore value dot

00:07:02,560 --> 00:07:07,280
users and access those that way

00:07:05,440 --> 00:07:09,280
so in this case once we've kind of

00:07:07,280 --> 00:07:11,039
tapped into the store and grabbed those

00:07:09,280 --> 00:07:12,880
variables we can assert on them so

00:07:11,039 --> 00:07:14,800
in this case we're saying that we expect

00:07:12,880 --> 00:07:18,160
the action type

00:07:14,800 --> 00:07:18,880
to equal shows api get all show success

00:07:18,160 --> 00:07:20,639
and again

00:07:18,880 --> 00:07:22,800
that's because we're expecting that the

00:07:20,639 --> 00:07:24,080
last action that was dispatched by the

00:07:22,800 --> 00:07:26,639
ngrx store

00:07:24,080 --> 00:07:27,919
to have that type we're also making an

00:07:26,639 --> 00:07:30,400
assertion on the prop

00:07:27,919 --> 00:07:31,919
so we're saying that the shows we expect

00:07:30,400 --> 00:07:33,280
to have a length of four

00:07:31,919 --> 00:07:34,880
and again that's the prop that was

00:07:33,280 --> 00:07:35,599
passed through the action coming from

00:07:34,880 --> 00:07:38,639
our service

00:07:35,599 --> 00:07:41,280
and we expect that to have four shows

00:07:38,639 --> 00:07:41,759
and so rather than just asserting on the

00:07:41,280 --> 00:07:44,800
dom

00:07:41,759 --> 00:07:47,039
that yes there's four shows appearing

00:07:44,800 --> 00:07:50,720
we can actually validate that the ngrx

00:07:47,039 --> 00:07:50,720
store process that correctly

00:07:53,440 --> 00:07:59,199
all right so asserting on effects

00:07:57,199 --> 00:08:00,720
it's kind of a similar uh concept and

00:07:59,199 --> 00:08:02,879
process here

00:08:00,720 --> 00:08:04,240
so first i want to just talk about one

00:08:02,879 --> 00:08:05,199
of the effects that the fact that we're

00:08:04,240 --> 00:08:07,520
going to be testing

00:08:05,199 --> 00:08:09,280
so again this is in our application code

00:08:07,520 --> 00:08:12,479
uh in our fx.ts

00:08:09,280 --> 00:08:15,440
file we have this

00:08:12,479 --> 00:08:15,840
favorite show clicked action and we

00:08:15,440 --> 00:08:17,360
would

00:08:15,840 --> 00:08:19,919
are creating an effect on it that

00:08:17,360 --> 00:08:22,000
whenever a favorite shows clicked

00:08:19,919 --> 00:08:22,960
we expect that a favorite show success

00:08:22,000 --> 00:08:25,599
action with the correct

00:08:22,960 --> 00:08:27,280
show id to have occurred so again here

00:08:25,599 --> 00:08:29,440
on line three we can see

00:08:27,280 --> 00:08:32,240
that we're saying any actions of type

00:08:29,440 --> 00:08:34,640
favorite show clicked

00:08:32,240 --> 00:08:36,320
and then essentially we're expecting

00:08:34,640 --> 00:08:40,080
favorite shows success

00:08:36,320 --> 00:08:41,200
action and that is taking a show id so

00:08:40,080 --> 00:08:42,800
that is the effect that we're going to

00:08:41,200 --> 00:08:45,920
be testing on

00:08:42,800 --> 00:08:47,600
how do we do that so

00:08:45,920 --> 00:08:48,959
uh first thing we want to do and i'm

00:08:47,600 --> 00:08:51,040
going to break this down into sections

00:08:48,959 --> 00:08:52,560
because this is a bit of a longer test

00:08:51,040 --> 00:08:54,560
so the first thing that we do is we need

00:08:52,560 --> 00:08:56,720
to set things up for our test

00:08:54,560 --> 00:08:58,000
and in this case we are essentially

00:08:56,720 --> 00:09:01,040
going to select

00:08:58,000 --> 00:09:03,680
two shows as favorites

00:09:01,040 --> 00:09:04,880
so we're doing that two different ways

00:09:03,680 --> 00:09:07,279
the first way we're selecting the

00:09:04,880 --> 00:09:08,240
favorite show via the ngrx store and

00:09:07,279 --> 00:09:09,920
i'll explain in

00:09:08,240 --> 00:09:11,920
just a few minutes how to actually make

00:09:09,920 --> 00:09:13,360
that happen

00:09:11,920 --> 00:09:16,720
and then we're just selecting the second

00:09:13,360 --> 00:09:18,480
show via the dom by clicking on an item

00:09:16,720 --> 00:09:20,000
and again if we were doing you know our

00:09:18,480 --> 00:09:20,959
normal end to end tests and we want to

00:09:20,000 --> 00:09:23,519
validate

00:09:20,959 --> 00:09:24,320
all right we uh we selected two favorite

00:09:23,519 --> 00:09:26,880
shows

00:09:24,320 --> 00:09:29,680
uh we should have a length of two for

00:09:26,880 --> 00:09:31,360
our unfavorites

00:09:29,680 --> 00:09:34,000
but again we want to go further and we

00:09:31,360 --> 00:09:37,040
want to say all right ngrx store

00:09:34,000 --> 00:09:38,320
did the effect occur the way that we

00:09:37,040 --> 00:09:40,480
expect

00:09:38,320 --> 00:09:43,519
not just in the dom but in our actual

00:09:40,480 --> 00:09:45,120
state management tool in our store

00:09:43,519 --> 00:09:49,040
so again we're going to confirm the

00:09:45,120 --> 00:09:50,640
expected effect completed via ngrx

00:09:49,040 --> 00:09:52,399
we're going to start by getting the most

00:09:50,640 --> 00:09:53,920
recent action from the store

00:09:52,399 --> 00:09:56,320
and again this is going to get the most

00:09:53,920 --> 00:09:57,600
recent action dispatched by your ngrx

00:09:56,320 --> 00:09:59,040
store

00:09:57,600 --> 00:10:02,160
so we're essentially just naming the

00:09:59,040 --> 00:10:04,240
store we're grabbing that action

00:10:02,160 --> 00:10:06,160
after that we're going to confirm that

00:10:04,240 --> 00:10:08,880
the effect expected

00:10:06,160 --> 00:10:09,519
after favorite show clipped occurred so

00:10:08,880 --> 00:10:11,600
again

00:10:09,519 --> 00:10:13,120
we dispatched favorite show clicked and

00:10:11,600 --> 00:10:14,640
we did that in two different ways we did

00:10:13,120 --> 00:10:16,560
it via the ngrx store

00:10:14,640 --> 00:10:18,000
which i'll explain in just a moment and

00:10:16,560 --> 00:10:20,800
we also did it via the

00:10:18,000 --> 00:10:22,079
dom by clicking on an element so what

00:10:20,800 --> 00:10:24,959
happens is whenever we

00:10:22,079 --> 00:10:26,079
dispatch favorite show clicked according

00:10:24,959 --> 00:10:28,959
to our effect

00:10:26,079 --> 00:10:29,760
we would expect that the favorite show

00:10:28,959 --> 00:10:32,399
success

00:10:29,760 --> 00:10:33,440
action to dispatch so we can validate

00:10:32,399 --> 00:10:35,680
that once we've

00:10:33,440 --> 00:10:36,800
dispatched this favorite show clicked

00:10:35,680 --> 00:10:38,800
the last action

00:10:36,800 --> 00:10:40,800
shouldn't be favorite show clicked the

00:10:38,800 --> 00:10:43,200
last action should be

00:10:40,800 --> 00:10:44,880
favorite show success because if our

00:10:43,200 --> 00:10:46,560
effect is working properly

00:10:44,880 --> 00:10:48,240
whenever we dispatch favorite show

00:10:46,560 --> 00:10:51,519
clicked automatically

00:10:48,240 --> 00:10:53,279
our store should know to dispatch

00:10:51,519 --> 00:10:54,720
favorite show's success so that's what

00:10:53,279 --> 00:10:55,360
we're doing here we're asserting that

00:10:54,720 --> 00:10:57,760
hey

00:10:55,360 --> 00:11:00,320
favorite show success was the last

00:10:57,760 --> 00:11:02,640
action that dispatched from our store

00:11:00,320 --> 00:11:04,399
in addition we're also validating that

00:11:02,640 --> 00:11:06,480
the show id

00:11:04,399 --> 00:11:08,560
is equal to two so again we're valid

00:11:06,480 --> 00:11:10,320
we're asserting on the actual type of

00:11:08,560 --> 00:11:12,640
the action that was dispatched

00:11:10,320 --> 00:11:14,000
and then also the prop that passed

00:11:12,640 --> 00:11:16,320
through so in this case the show

00:11:14,000 --> 00:11:17,440
id the last one that we clicked on with

00:11:16,320 --> 00:11:20,000
favorite show clicked

00:11:17,440 --> 00:11:20,800
had an id of two so we would expect that

00:11:20,000 --> 00:11:25,440
our action

00:11:20,800 --> 00:11:25,440
to also have a show id of two

00:11:27,760 --> 00:11:34,000
all right so i talked about how when we

00:11:31,519 --> 00:11:34,720
dispatched our favorite shows clicked

00:11:34,000 --> 00:11:36,880
action

00:11:34,720 --> 00:11:39,600
we did that two different ways one was

00:11:36,880 --> 00:11:40,880
the traditional end-to-end testing

00:11:39,600 --> 00:11:42,560
method that you're probably used to

00:11:40,880 --> 00:11:43,120
where you essentially get the element on

00:11:42,560 --> 00:11:44,959
the dom

00:11:43,120 --> 00:11:46,720
and you click on it and when you click

00:11:44,959 --> 00:11:49,200
on that element

00:11:46,720 --> 00:11:50,639
our ngrx store dispatches that favorite

00:11:49,200 --> 00:11:52,240
show clicked action

00:11:50,639 --> 00:11:55,120
this is exactly how it would happen when

00:11:52,240 --> 00:11:56,639
your user is driving your application

00:11:55,120 --> 00:11:59,519
the other way that we can do this is

00:11:56,639 --> 00:12:02,079
actually tapping into our ngrx store

00:11:59,519 --> 00:12:02,639
and dispatching the action without using

00:12:02,079 --> 00:12:05,440
the dom

00:12:02,639 --> 00:12:06,560
at all you can do this for a couple

00:12:05,440 --> 00:12:08,880
different reasons

00:12:06,560 --> 00:12:10,160
so one of the reasons that you would use

00:12:08,880 --> 00:12:11,920
this is if you have

00:12:10,160 --> 00:12:13,519
some kind of complex state management

00:12:11,920 --> 00:12:16,160
that you need to set up that isn't

00:12:13,519 --> 00:12:17,920
efficient to use the dom to do that

00:12:16,160 --> 00:12:19,760
you can for example if you don't need to

00:12:17,920 --> 00:12:21,360
test that functionality in the dom

00:12:19,760 --> 00:12:23,839
because you have an existing test

00:12:21,360 --> 00:12:24,959
elsewhere that already tests favorite

00:12:23,839 --> 00:12:26,720
show clicked

00:12:24,959 --> 00:12:28,399
and you don't need to actually click the

00:12:26,720 --> 00:12:30,000
button to set that up

00:12:28,399 --> 00:12:32,399
then you can dispatch an action in your

00:12:30,000 --> 00:12:33,600
ngrx store to set the state up exactly

00:12:32,399 --> 00:12:35,920
how you want it

00:12:33,600 --> 00:12:37,120
to prepare for your test it also gives

00:12:35,920 --> 00:12:39,920
you just another

00:12:37,120 --> 00:12:41,760
additional level of validation that when

00:12:39,920 --> 00:12:44,480
you're dispatching

00:12:41,760 --> 00:12:45,600
effects within the store and not just in

00:12:44,480 --> 00:12:48,000
the ui

00:12:45,600 --> 00:12:49,279
so that you're getting the expected

00:12:48,000 --> 00:12:51,360
outcome

00:12:49,279 --> 00:12:52,720
and the the difference is that if you

00:12:51,360 --> 00:12:55,279
click on a button

00:12:52,720 --> 00:12:56,320
in the dom you may see things render

00:12:55,279 --> 00:12:58,560
properly

00:12:56,320 --> 00:13:00,480
but the state in your ngrx store may not

00:12:58,560 --> 00:13:02,720
actually be what you expect

00:13:00,480 --> 00:13:03,519
so by dispatching the action directly in

00:13:02,720 --> 00:13:05,120
the store

00:13:03,519 --> 00:13:06,560
you have a little bit more fine grained

00:13:05,120 --> 00:13:08,480
control

00:13:06,560 --> 00:13:10,000
over what's happening so let's take a

00:13:08,480 --> 00:13:13,120
look on how to do that it's actually a

00:13:10,000 --> 00:13:16,560
lot simpler than you would think

00:13:13,120 --> 00:13:18,320
so within our test code essentially

00:13:16,560 --> 00:13:20,320
we're saying psi dot window and again

00:13:18,320 --> 00:13:22,160
this is a way to just grab the window

00:13:20,320 --> 00:13:23,600
of the browser that your application is

00:13:22,160 --> 00:13:26,000
running in

00:13:23,600 --> 00:13:27,360
and you are saying that it's store

00:13:26,000 --> 00:13:30,720
you're grabbing onto that

00:13:27,360 --> 00:13:32,639
and you are invoking a command

00:13:30,720 --> 00:13:35,519
so you can use the invoke cypress

00:13:32,639 --> 00:13:38,240
command and pass through dispatch

00:13:35,519 --> 00:13:40,160
with an object that contains the type of

00:13:38,240 --> 00:13:43,040
the action that you want to dispatch

00:13:40,160 --> 00:13:43,360
and then also any required props so if

00:13:43,040 --> 00:13:46,240
you

00:13:43,360 --> 00:13:47,440
have a required show id for example for

00:13:46,240 --> 00:13:50,160
our

00:13:47,440 --> 00:13:51,519
favorite show clicked action you need to

00:13:50,160 --> 00:13:53,680
pass that through

00:13:51,519 --> 00:13:55,519
uh for example if we were doing the uh

00:13:53,680 --> 00:13:56,639
get all show success action we would

00:13:55,519 --> 00:13:59,680
need to pass through

00:13:56,639 --> 00:14:01,360
that shows prop or an object for

00:13:59,680 --> 00:14:03,360
our shows prop and you would refer that

00:14:01,360 --> 00:14:05,920
to dispatch correctly

00:14:03,360 --> 00:14:07,120
so in this case again we're dispatching

00:14:05,920 --> 00:14:10,000
the all shows

00:14:07,120 --> 00:14:12,000
favorite show and again that's the type

00:14:10,000 --> 00:14:13,519
of the action the type

00:14:12,000 --> 00:14:15,279
and then we're also passing through as

00:14:13,519 --> 00:14:18,320
our first um

00:14:15,279 --> 00:14:20,959
the show id which is a required prop for

00:14:18,320 --> 00:14:20,959
that action

00:14:21,360 --> 00:14:25,680
and again uh what you'll do is in your

00:14:23,680 --> 00:14:28,639
test code you'll just dispatch

00:14:25,680 --> 00:14:30,320
this action and that sets up your test

00:14:28,639 --> 00:14:31,920
in order to prepare for assertion so

00:14:30,320 --> 00:14:34,959
this is only part of the picture

00:14:31,920 --> 00:14:39,199
once you and again we can see

00:14:34,959 --> 00:14:41,680
that in our previous code

00:14:39,199 --> 00:14:43,600
we use this to select the first favorite

00:14:41,680 --> 00:14:46,639
show via ngrx

00:14:43,600 --> 00:14:48,320
so we said that our window we wanted to

00:14:46,639 --> 00:14:49,360
dispatch that action to favorite the

00:14:48,320 --> 00:14:50,959
show

00:14:49,360 --> 00:14:53,120
then we did the second one just using a

00:14:50,959 --> 00:14:54,000
regular click and then we were able to

00:14:53,120 --> 00:14:58,160
confirm that

00:14:54,000 --> 00:14:59,920
and validate it with our store

00:14:58,160 --> 00:15:01,920
all right so let's take a look at the

00:14:59,920 --> 00:15:03,680
cypress test runner in action

00:15:01,920 --> 00:15:06,240
and run some of these tests and see what

00:15:03,680 --> 00:15:06,240
they look like

00:15:06,480 --> 00:15:11,519
so i'm going to go ahead and open cyprus

00:15:09,920 --> 00:15:15,920
here

00:15:11,519 --> 00:15:15,920
and we're going to run our ngrx tests

00:15:17,040 --> 00:15:21,199
all right so that was pretty fast let's

00:15:18,880 --> 00:15:23,600
go ahead and break down step by step

00:15:21,199 --> 00:15:24,959
what happened there so our first test is

00:15:23,600 --> 00:15:27,839
validating the get all

00:15:24,959 --> 00:15:29,680
success action and again this is saying

00:15:27,839 --> 00:15:30,639
that when the page loads we expect the

00:15:29,680 --> 00:15:34,000
get all

00:15:30,639 --> 00:15:35,600
success action to run and we expect it

00:15:34,000 --> 00:15:38,800
to have a

00:15:35,600 --> 00:15:40,399
prop pass through of the shows and that

00:15:38,800 --> 00:15:43,199
should have a length of four because we

00:15:40,399 --> 00:15:44,639
have four shows on our page initially

00:15:43,199 --> 00:15:46,480
so with a cypress test runner in the

00:15:44,639 --> 00:15:48,320
command log you can actually uh

00:15:46,480 --> 00:15:49,680
hover over each command and see what's

00:15:48,320 --> 00:15:52,720
happening in your dom

00:15:49,680 --> 00:15:54,560
as the test proceeds so again initially

00:15:52,720 --> 00:15:56,320
we're just visiting

00:15:54,560 --> 00:15:58,880
our application and we can see here that

00:15:56,320 --> 00:16:01,199
we have our four shows

00:15:58,880 --> 00:16:04,560
initially we're just validating via the

00:16:01,199 --> 00:16:06,880
dom so we're saying that we expect

00:16:04,560 --> 00:16:09,920
there to be four show cards uh which

00:16:06,880 --> 00:16:11,519
there are so that assertion passes

00:16:09,920 --> 00:16:13,120
however uh with this part of the test

00:16:11,519 --> 00:16:13,759
we're actually doing the assertion on

00:16:13,120 --> 00:16:16,160
the window

00:16:13,759 --> 00:16:18,320
right so here we're saying that the

00:16:16,160 --> 00:16:19,040
shows api get all shows success and

00:16:18,320 --> 00:16:21,120
again

00:16:19,040 --> 00:16:23,680
that is coming from the last action

00:16:21,120 --> 00:16:25,360
dispatched by our ngrx store

00:16:23,680 --> 00:16:27,360
uh so we're saying that we expect that

00:16:25,360 --> 00:16:28,800
the type to equal shows api get all show

00:16:27,360 --> 00:16:32,000
success which it does

00:16:28,800 --> 00:16:34,399
and then we also expect that the shows

00:16:32,000 --> 00:16:35,839
array to have a length of four and that

00:16:34,399 --> 00:16:38,160
is the second assertion here that's

00:16:35,839 --> 00:16:39,839
happening that's passing

00:16:38,160 --> 00:16:41,839
the next test that we're using is

00:16:39,839 --> 00:16:43,440
validating the favorite show clicked

00:16:41,839 --> 00:16:44,800
action and effect and this is the really

00:16:43,440 --> 00:16:46,160
long one that i ran through

00:16:44,800 --> 00:16:48,240
so i'm gonna go through the same thing

00:16:46,160 --> 00:16:49,759
here so again the first thing that we do

00:16:48,240 --> 00:16:50,079
is we visit our application and we can

00:16:49,759 --> 00:16:52,639
see

00:16:50,079 --> 00:16:55,440
um it's you know kind of blank slate

00:16:52,639 --> 00:16:57,920
nothing's been updated at that point

00:16:55,440 --> 00:16:59,519
this is the first uh favorite where

00:16:57,920 --> 00:17:00,720
we're dispatching it via the store so

00:16:59,519 --> 00:17:03,040
we're invoking

00:17:00,720 --> 00:17:04,000
the all show's favorite show type and

00:17:03,040 --> 00:17:06,799
we're passing the show

00:17:04,000 --> 00:17:07,360
id of one and then this is where we're

00:17:06,799 --> 00:17:10,079
clicking

00:17:07,360 --> 00:17:11,600
uh the second item so this is equals one

00:17:10,079 --> 00:17:13,280
so that's grabbing the second item in

00:17:11,600 --> 00:17:14,880
the array so it's clicking the second

00:17:13,280 --> 00:17:18,000
show id

00:17:14,880 --> 00:17:21,280
and so we can go ahead and see here

00:17:18,000 --> 00:17:23,280
at this point that we now have two

00:17:21,280 --> 00:17:25,280
of the shows have been favorited so we

00:17:23,280 --> 00:17:27,360
have the show id of one

00:17:25,280 --> 00:17:29,840
and then we have the second show in the

00:17:27,360 --> 00:17:31,520
array and both have been favorited and

00:17:29,840 --> 00:17:33,360
this assertion passed because

00:17:31,520 --> 00:17:35,760
we expect it to have a length of two and

00:17:33,360 --> 00:17:38,000
it does so that's a dom validation

00:17:35,760 --> 00:17:41,280
again we can go further and we can

00:17:38,000 --> 00:17:43,520
actually validate via the ngrx store

00:17:41,280 --> 00:17:44,640
so we can see here we're grabbing our

00:17:43,520 --> 00:17:47,840
window

00:17:44,640 --> 00:17:50,720
and we're expecting that the last action

00:17:47,840 --> 00:17:51,039
dispatched by the ngrx store is favorite

00:17:50,720 --> 00:17:54,160
show

00:17:51,039 --> 00:17:56,480
success and again that's because we just

00:17:54,160 --> 00:17:58,480
dispatched favorite show clicked and

00:17:56,480 --> 00:18:00,320
because of our effect we expect it to

00:17:58,480 --> 00:18:01,600
automatically dispatch favorite show

00:18:00,320 --> 00:18:03,840
success

00:18:01,600 --> 00:18:04,640
and again we just clicked the second

00:18:03,840 --> 00:18:07,120
show here

00:18:04,640 --> 00:18:09,679
so we expect the show id to equal two

00:18:07,120 --> 00:18:12,720
which it does

00:18:09,679 --> 00:18:15,200
we also have some additional validation

00:18:12,720 --> 00:18:15,919
by going to the favorite shows tab here

00:18:15,200 --> 00:18:17,840
and just

00:18:15,919 --> 00:18:19,440
confirming that there are two favorite

00:18:17,840 --> 00:18:21,760
shows

00:18:19,440 --> 00:18:23,840
so this is a cypress test runner and

00:18:21,760 --> 00:18:26,240
this is demonstrating

00:18:23,840 --> 00:18:27,039
how to validate your ngrx store not only

00:18:26,240 --> 00:18:31,200
via the dom

00:18:27,039 --> 00:18:31,200
but via the store itself in the window

00:18:32,720 --> 00:18:38,720
all right so i wanted to share the

00:18:36,720 --> 00:18:40,960
some resources again for learning more

00:18:38,720 --> 00:18:43,039
about this using this technique to

00:18:40,960 --> 00:18:45,120
test your ngrx store with your

00:18:43,039 --> 00:18:47,760
end-to-end test using cypress

00:18:45,120 --> 00:18:48,320
so again the github repository is a link

00:18:47,760 --> 00:18:50,400
here

00:18:48,320 --> 00:18:51,919
i'll be sharing the slides as well on

00:18:50,400 --> 00:18:53,440
the repository in case you need to

00:18:51,919 --> 00:18:55,520
revisit them

00:18:53,440 --> 00:18:57,280
we also i wanted to share the cypress

00:18:55,520 --> 00:18:59,360
blog for testing the redux store

00:18:57,280 --> 00:19:00,640
again that's specific to redux but a lot

00:18:59,360 --> 00:19:02,960
of the same methodologies and

00:19:00,640 --> 00:19:05,039
applications will work with ngrx

00:19:02,960 --> 00:19:06,160
and again also our cypress documentation

00:19:05,039 --> 00:19:08,559
so this is

00:19:06,160 --> 00:19:09,600
the one source source of truth for

00:19:08,559 --> 00:19:11,840
cyprus if you

00:19:09,600 --> 00:19:13,200
want to learn more about getting started

00:19:11,840 --> 00:19:16,480
or some of the different things that you

00:19:13,200 --> 00:19:16,480
can do with our api

00:19:17,280 --> 00:19:21,919
all right so thank you very much for

00:19:19,360 --> 00:19:24,320
your time today i appreciate it again i

00:19:21,919 --> 00:19:25,039
am cecilia martinez i'm a success

00:19:24,320 --> 00:19:28,080
engineer

00:19:25,039 --> 00:19:28,559
at cypress.io and you can catch me on

00:19:28,080 --> 00:19:30,640
twitter

00:19:28,559 --> 00:19:32,480
at cecilia creates that's probably the

00:19:30,640 --> 00:19:35,840
best way to get in touch with me

00:19:32,480 --> 00:19:38,160
i'm also on github as cecilia creates as

00:19:35,840 --> 00:19:41,200
well so you can check out the repository

00:19:38,160 --> 00:19:43,520
for this talk and also some other things

00:19:41,200 --> 00:19:45,120
as well to learn about cypress and

00:19:43,520 --> 00:19:46,720
software testing

00:19:45,120 --> 00:19:50,880
thanks again for your time and have a

00:19:46,720 --> 00:19:50,880

YouTube URL: https://www.youtube.com/watch?v=7MIoSgxiq4Q


