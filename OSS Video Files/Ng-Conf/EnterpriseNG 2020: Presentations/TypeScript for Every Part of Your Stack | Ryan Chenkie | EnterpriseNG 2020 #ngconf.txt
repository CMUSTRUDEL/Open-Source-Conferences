Title: TypeScript for Every Part of Your Stack | Ryan Chenkie | EnterpriseNG 2020Â #ngconf
Publication date: 2021-07-06
Playlist: EnterpriseNG 2020: Presentations
Description: 
	The confidence we get from TypeScript in our Angular apps is great but what about the other parts of our stack? While itâ€™s common to use TypeScript in an Angular app, itâ€™s less common to use it in a Node backend. Itâ€™s especially less common to see database access be type-safe.

In this talk, weâ€™ll look at how your team can be more productive by using the same types for your Angular app, TypeScript Node server, and also database access with Prisma. Weâ€™ll show how to do all of this in an Nx monorepo.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,120 --> 00:00:16,400
[Music]

00:00:03,840 --> 00:00:18,640
let us

00:00:16,400 --> 00:00:20,320
as an angular developer you are probably

00:00:18,640 --> 00:00:21,840
familiar with typescript

00:00:20,320 --> 00:00:23,600
and perhaps you've seen for yourself how

00:00:21,840 --> 00:00:24,960
typescript allows us to catch bugs when

00:00:23,600 --> 00:00:27,279
we write our code

00:00:24,960 --> 00:00:29,279
as opposed to when it's run and i've

00:00:27,279 --> 00:00:31,119
benefited greatly from typescript myself

00:00:29,279 --> 00:00:33,120
but historically i haven't really taken

00:00:31,119 --> 00:00:34,880
it too much beyond the front end

00:00:33,120 --> 00:00:36,880
and i think this is the way a lot of

00:00:34,880 --> 00:00:38,640
developers and a lot of teams

00:00:36,880 --> 00:00:40,160
work they'll write their front end in

00:00:38,640 --> 00:00:42,800
typescript but then

00:00:40,160 --> 00:00:44,000
for a node.js backend or for some kind

00:00:42,800 --> 00:00:46,399
of database access

00:00:44,000 --> 00:00:48,239
they won't really apply types there and

00:00:46,399 --> 00:00:49,120
this is a shame because if we take the

00:00:48,239 --> 00:00:51,440
same types

00:00:49,120 --> 00:00:54,399
and share them across the whole stack we

00:00:51,440 --> 00:00:56,800
can move faster we can be more type safe

00:00:54,399 --> 00:00:57,680
and we can work across different teams

00:00:56,800 --> 00:00:59,920
more easily

00:00:57,680 --> 00:01:02,000
so i'd like to show you how we can use

00:00:59,920 --> 00:01:04,799
typescript across the whole stack

00:01:02,000 --> 00:01:05,519
and be type safe all the way down so

00:01:04,799 --> 00:01:07,360
we've got an

00:01:05,519 --> 00:01:09,200
nx workspace here it's got a couple

00:01:07,360 --> 00:01:10,159
things inside it has an angular

00:01:09,200 --> 00:01:12,799
application

00:01:10,159 --> 00:01:14,479
and then it's got this api and extending

00:01:12,799 --> 00:01:16,240
typescript to the api

00:01:14,479 --> 00:01:17,759
to the back end can be done really

00:01:16,240 --> 00:01:20,320
easily if we use

00:01:17,759 --> 00:01:22,159
nest js and that's what we're using here

00:01:20,320 --> 00:01:23,280
it gives us an environment that feels a

00:01:22,159 --> 00:01:25,759
lot like angular

00:01:23,280 --> 00:01:27,920
and it uses typescript out of the box so

00:01:25,759 --> 00:01:30,240
we get that type safety we want

00:01:27,920 --> 00:01:31,920
and because we're using nx we can share

00:01:30,240 --> 00:01:35,520
things across this whole

00:01:31,920 --> 00:01:37,520
monorepo and when it comes to defining a

00:01:35,520 --> 00:01:39,040
base kind of type that we might want to

00:01:37,520 --> 00:01:41,600
apply across the stack

00:01:39,040 --> 00:01:43,360
often it comes down to the data model

00:01:41,600 --> 00:01:45,920
level we might want to get close to the

00:01:43,360 --> 00:01:48,240
data model to think about the type that

00:01:45,920 --> 00:01:50,560
we would share across different places

00:01:48,240 --> 00:01:52,799
and we can start to build this in really

00:01:50,560 --> 00:01:55,280
easily if we use something like prisma

00:01:52,799 --> 00:01:56,640
so with prisma which gives us a tool set

00:01:55,280 --> 00:01:59,119
for database access

00:01:56,640 --> 00:02:00,320
and working with databases we've got

00:01:59,119 --> 00:02:03,280
this schema here

00:02:00,320 --> 00:02:05,040
i've got this model called post which is

00:02:03,280 --> 00:02:07,119
effectively a database table

00:02:05,040 --> 00:02:08,160
this post model points to something

00:02:07,119 --> 00:02:10,160
that's in our database

00:02:08,160 --> 00:02:12,080
as a table and we can take a look at it

00:02:10,160 --> 00:02:14,959
if we do npx prisma

00:02:12,080 --> 00:02:16,560
studio this is going to fire up a

00:02:14,959 --> 00:02:18,959
graphical user interface

00:02:16,560 --> 00:02:19,920
for our database and it's got some data

00:02:18,959 --> 00:02:21,920
in there

00:02:19,920 --> 00:02:23,280
and what we can get with prisma are

00:02:21,920 --> 00:02:26,319
typescript types

00:02:23,280 --> 00:02:29,760
so if we come over and we do npx prisma

00:02:26,319 --> 00:02:30,959
generate and then we go take a look in

00:02:29,760 --> 00:02:33,720
our node modules

00:02:30,959 --> 00:02:35,120
we can go to prisma client and

00:02:33,720 --> 00:02:36,959
index.d.t.s

00:02:35,120 --> 00:02:38,239
and we've got a type called post which

00:02:36,959 --> 00:02:40,959
matches up with

00:02:38,239 --> 00:02:43,040
our model so this post type can now be

00:02:40,959 --> 00:02:44,959
used across our application we can bring

00:02:43,040 --> 00:02:46,239
it into different spots and we can use

00:02:44,959 --> 00:02:48,319
it as we want

00:02:46,239 --> 00:02:50,959
so let's start with the api we can go in

00:02:48,319 --> 00:02:52,720
here and let's start in our app service

00:02:50,959 --> 00:02:54,959
right now this get post method is

00:02:52,720 --> 00:02:55,280
returning a promise that is type hinted

00:02:54,959 --> 00:02:57,680
to

00:02:55,280 --> 00:02:58,319
any but we want to get a little bit more

00:02:57,680 --> 00:03:00,879
specific

00:02:58,319 --> 00:03:02,959
let's pull in post from prismaclients

00:03:00,879 --> 00:03:04,879
and then we can say we want to return an

00:03:02,959 --> 00:03:07,440
array of posts instead

00:03:04,879 --> 00:03:09,200
prismaclient is really convenient we can

00:03:07,440 --> 00:03:11,440
see what's on it if we just do

00:03:09,200 --> 00:03:13,440
prisma dots and we've got a whole bunch

00:03:11,440 --> 00:03:15,599
of stuff we've got some prisma methods

00:03:13,440 --> 00:03:17,200
and then it points to our data model

00:03:15,599 --> 00:03:19,040
here points to posts

00:03:17,200 --> 00:03:20,959
and then we get a list of all of the

00:03:19,040 --> 00:03:21,680
operations we can do on our database

00:03:20,959 --> 00:03:24,959
there

00:03:21,680 --> 00:03:27,440
so prisma.post.findmany will return

00:03:24,959 --> 00:03:29,760
many posts we can save this and we can

00:03:27,440 --> 00:03:31,920
go into the controller now

00:03:29,760 --> 00:03:33,599
same thing here let's pull and post so

00:03:31,920 --> 00:03:35,599
we'll do import

00:03:33,599 --> 00:03:37,120
post that's the type that was

00:03:35,599 --> 00:03:38,480
automatically generated

00:03:37,120 --> 00:03:41,040
and we'll come that'll come from

00:03:38,480 --> 00:03:43,599
prismaclients and in here

00:03:41,040 --> 00:03:44,799
this will be post array is what's

00:03:43,599 --> 00:03:47,680
returned there

00:03:44,799 --> 00:03:48,560
okay so this is now being applied to the

00:03:47,680 --> 00:03:51,120
api side

00:03:48,560 --> 00:03:51,760
to the node.js side we want to also

00:03:51,120 --> 00:03:53,599
apply it

00:03:51,760 --> 00:03:55,439
to our front end and that's because it

00:03:53,599 --> 00:03:57,200
would be really great if we could go

00:03:55,439 --> 00:03:59,439
into a template here

00:03:57,200 --> 00:04:01,200
and just start pulling off very specific

00:03:59,439 --> 00:04:03,680
fields that we know to exist

00:04:01,200 --> 00:04:05,680
on our data so let's go into our data

00:04:03,680 --> 00:04:08,480
service we're going to data service

00:04:05,680 --> 00:04:10,319
and we want to type in this as that

00:04:08,480 --> 00:04:12,959
array of posts as well

00:04:10,319 --> 00:04:13,519
so because we are in nx we can just pull

00:04:12,959 --> 00:04:16,000
in

00:04:13,519 --> 00:04:17,840
imports directly from our node modules

00:04:16,000 --> 00:04:19,840
so that'll come from prisma clients

00:04:17,840 --> 00:04:21,040
and once again this is going to be an

00:04:19,840 --> 00:04:24,560
observable

00:04:21,040 --> 00:04:25,120
of type post array so we'll apply that

00:04:24,560 --> 00:04:26,720
there

00:04:25,120 --> 00:04:28,639
and we'll do the same thing in fact

00:04:26,720 --> 00:04:32,080
we'll just copy over

00:04:28,639 --> 00:04:34,720
this import to go into our app component

00:04:32,080 --> 00:04:35,360
which is where we can apply it to the

00:04:34,720 --> 00:04:38,160
public

00:04:35,360 --> 00:04:39,199
member posts here observable with post

00:04:38,160 --> 00:04:41,840
array

00:04:39,199 --> 00:04:42,960
so now what we can do is hop into our

00:04:41,840 --> 00:04:47,440
template

00:04:42,960 --> 00:04:50,080
and we can start to template this out so

00:04:47,440 --> 00:04:51,840
we have access to post dot and the

00:04:50,080 --> 00:04:54,880
properties that are on our data model

00:04:51,840 --> 00:04:55,919
so post.title can go in that h2 and then

00:04:54,880 --> 00:04:59,360
we can get a p

00:04:55,919 --> 00:05:01,440
tag with post.body

00:04:59,360 --> 00:05:03,759
so let's save this and we'll check it

00:05:01,440 --> 00:05:06,160
out here in the browser

00:05:03,759 --> 00:05:07,120
if we go get posts there's our posts we

00:05:06,160 --> 00:05:08,880
have total

00:05:07,120 --> 00:05:10,240
database type safety across the whole

00:05:08,880 --> 00:05:13,680
stack and we

00:05:10,240 --> 00:05:14,000
are using our base model type to inform

00:05:13,680 --> 00:05:16,080
us

00:05:14,000 --> 00:05:17,360
about what's available in the various

00:05:16,080 --> 00:05:18,479
parts of our stack

00:05:17,360 --> 00:05:20,160
if you want more information about

00:05:18,479 --> 00:05:22,639
prisma and how it fits into your angular

00:05:20,160 --> 00:05:24,560
project please check out prisma.io

00:05:22,639 --> 00:05:27,039
and feel free to reach out on twitter

00:05:24,560 --> 00:05:29,680
it's twitter.comprisma

00:05:27,039 --> 00:05:29,680

YouTube URL: https://www.youtube.com/watch?v=YXbJGXdb5Bc


