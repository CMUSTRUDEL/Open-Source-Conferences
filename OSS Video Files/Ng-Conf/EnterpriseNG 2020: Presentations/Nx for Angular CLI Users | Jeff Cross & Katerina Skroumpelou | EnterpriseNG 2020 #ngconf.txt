Title: Nx for Angular CLI Users | Jeff Cross & Katerina Skroumpelou | EnterpriseNG 2020Â #ngconf
Publication date: 2021-05-31
Playlist: EnterpriseNG 2020: Presentations
Description: 
	By now, youâ€™ve probably heard of Nx from Nrwl. You might know that itâ€™s a toolkit based on top of Angular CLI, and itâ€™s great for developing monorepos. But thereâ€™s so much more to Nx than just monorepos! In this talk, Jeff Cross and Katerina Skroumpelou will talk about everything Nx does to help you develop any Angular application better and faster.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.
Get your ticket ğŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,120 --> 00:00:17,039
[Music]

00:00:03,840 --> 00:00:20,400
let us

00:00:17,039 --> 00:00:24,320
hi y'all this is katarina

00:00:20,400 --> 00:00:27,840
and i'm jeff and we're from narwhal

00:00:24,320 --> 00:00:30,320
and today we'll talk to you about an axe

00:00:27,840 --> 00:00:31,039
this is jeff he's the co-founder of

00:00:30,320 --> 00:00:34,000
narwhal

00:00:31,039 --> 00:00:35,200
and he's a farmer of pigs chickens and

00:00:34,000 --> 00:00:38,000
humans

00:00:35,200 --> 00:00:39,440
you can follow him on twitter at jeff b

00:00:38,000 --> 00:00:41,920
cross

00:00:39,440 --> 00:00:43,840
and this is katarina a fellow narwhalian

00:00:41,920 --> 00:00:46,879
and she's part of the nx core team

00:00:43,840 --> 00:00:48,640
a gde for angular maps and web

00:00:46,879 --> 00:00:50,640
and she co-founded the angular athens

00:00:48,640 --> 00:00:52,879
meetup she's also a prolific speaker

00:00:50,640 --> 00:00:54,800
and instructor and a little known fact

00:00:52,879 --> 00:00:56,800
is she also gives great walking tours of

00:00:54,800 --> 00:00:59,199
athens if you're ever in the area

00:00:56,800 --> 00:01:00,079
you can follow her at cybercity on

00:00:59,199 --> 00:01:03,199
twitter or

00:01:00,079 --> 00:01:04,960
visit her site at cyber.city to learn

00:01:03,199 --> 00:01:06,720
all about sea monsters and everything

00:01:04,960 --> 00:01:08,400
else she's doing

00:01:06,720 --> 00:01:11,040
and collectively the two of us are known

00:01:08,400 --> 00:01:12,720
as bf jeff

00:01:11,040 --> 00:01:14,400
before we dive into our talk we have a

00:01:12,720 --> 00:01:17,680
couple of what if questions

00:01:14,400 --> 00:01:19,200
we'd like to get on your mind what if

00:01:17,680 --> 00:01:21,680
you could do a fresh checkout of your

00:01:19,200 --> 00:01:24,640
workspace and have the app running

00:01:21,680 --> 00:01:24,640
in a few seconds

00:01:25,040 --> 00:01:30,240
what if you could look forward to

00:01:27,360 --> 00:01:32,240
writing e3 tests

00:01:30,240 --> 00:01:33,439
and finally what if your prs could be

00:01:32,240 --> 00:01:35,680
validated in ci

00:01:33,439 --> 00:01:37,200
instantly how would that change how your

00:01:35,680 --> 00:01:39,040
team writes software

00:01:37,200 --> 00:01:42,159
would more features get done in a sprint

00:01:39,040 --> 00:01:45,360
would products get to market faster

00:01:42,159 --> 00:01:48,880
well nx is the tool that will help

00:01:45,360 --> 00:01:51,280
bring all those what-ifs to life

00:01:48,880 --> 00:01:52,079
but why should you use an x in the first

00:01:51,280 --> 00:01:53,920
place

00:01:52,079 --> 00:01:56,159
i guess you're thinking i already used

00:01:53,920 --> 00:01:58,799
the angular cli why would i need

00:01:56,159 --> 00:02:00,960
another tool for building or testing is

00:01:58,799 --> 00:02:03,360
there indeed so much added value

00:02:00,960 --> 00:02:05,439
and to top that you're thinking besides

00:02:03,360 --> 00:02:07,520
i don't even work on a mono ripple this

00:02:05,439 --> 00:02:09,520
is what an x is for right

00:02:07,520 --> 00:02:10,879
well we hope it will answer both your

00:02:09,520 --> 00:02:14,239
questions today

00:02:10,879 --> 00:02:16,080
and we will crush all this doubt

00:02:14,239 --> 00:02:17,280
in this presentation we'll see how nx

00:02:16,080 --> 00:02:20,000
will make your team happy

00:02:17,280 --> 00:02:22,000
and your builds fast first we'll look at

00:02:20,000 --> 00:02:23,760
all the modern tools that nx supports

00:02:22,000 --> 00:02:25,920
and offers and then we'll talk about how

00:02:23,760 --> 00:02:27,840
nx builds applications

00:02:25,920 --> 00:02:30,160
let's start by looking at the modern

00:02:27,840 --> 00:02:33,200
tools that nx offers

00:02:30,160 --> 00:02:34,160
nx offers support for all modern tools

00:02:33,200 --> 00:02:37,680
out there

00:02:34,160 --> 00:02:40,720
like eslint cyprus just storybook

00:02:37,680 --> 00:02:42,080
and prettier as you might know tslint

00:02:40,720 --> 00:02:43,519
has been deprecated

00:02:42,080 --> 00:02:45,040
so now the typescript community has

00:02:43,519 --> 00:02:47,040
standardized on eslint with the

00:02:45,040 --> 00:02:48,959
typescript eslamp plugin

00:02:47,040 --> 00:02:50,319
with nx you can choose whether to use

00:02:48,959 --> 00:02:53,680
legacy ts lent

00:02:50,319 --> 00:02:55,440
or to use newly supported eslint

00:02:53,680 --> 00:02:57,040
this is all thanks to the contributions

00:02:55,440 --> 00:02:58,959
of james henry and many other folks who

00:02:57,040 --> 00:03:00,959
worked on the typescript eslent package

00:02:58,959 --> 00:03:04,560
so thank you very much

00:03:00,959 --> 00:03:05,440
nx also supports cyprus cyprus is an e3

00:03:04,560 --> 00:03:07,680
test runner

00:03:05,440 --> 00:03:09,440
built for modern web it has a lot of

00:03:07,680 --> 00:03:11,519
great features like time travel

00:03:09,440 --> 00:03:12,879
real-time reloads automatic waiting

00:03:11,519 --> 00:03:16,000
screenshots and videos

00:03:12,879 --> 00:03:17,360
and more by default when creating a new

00:03:16,000 --> 00:03:19,840
front-end application

00:03:17,360 --> 00:03:21,280
and nx will use cyprus to create the e3

00:03:19,840 --> 00:03:23,040
test project

00:03:21,280 --> 00:03:25,120
cyprus will run in headed mode by

00:03:23,040 --> 00:03:26,480
default but you can also run your tests

00:03:25,120 --> 00:03:28,400
in headless mode

00:03:26,480 --> 00:03:30,799
videos and screenshots will be available

00:03:28,400 --> 00:03:33,360
for debugging in both cases

00:03:30,799 --> 00:03:34,799
in headless mode your test will be rerun

00:03:33,360 --> 00:03:35,840
every time you make a change to your

00:03:34,799 --> 00:03:38,879
application code

00:03:35,840 --> 00:03:41,120
by providing the watch flag

00:03:38,879 --> 00:03:43,200
run your tweet tests against production

00:03:41,120 --> 00:03:44,159
build and of course you can run your

00:03:43,200 --> 00:03:47,200
tests on ci

00:03:44,159 --> 00:03:47,680
as well you can specify a custom url to

00:03:47,200 --> 00:03:49,760
test

00:03:47,680 --> 00:03:51,440
you can take advantage of cypress code

00:03:49,760 --> 00:03:53,360
completion thanks to typescript

00:03:51,440 --> 00:03:54,720
and in general you can customize your

00:03:53,360 --> 00:03:56,640
cypress configuration

00:03:54,720 --> 00:03:58,239
however you need by modifying your

00:03:56,640 --> 00:04:01,519
cypress json file

00:03:58,239 --> 00:04:03,519
as you would normally do just is now

00:04:01,519 --> 00:04:05,280
nx's default unit test runner for

00:04:03,519 --> 00:04:06,879
front-end applications

00:04:05,280 --> 00:04:08,799
we added just support a couple of years

00:04:06,879 --> 00:04:12,400
ago years ago

00:04:08,799 --> 00:04:14,080
because just it was fast it's fast to

00:04:12,400 --> 00:04:15,760
write tests and fast to run them and

00:04:14,080 --> 00:04:17,919
it's fun the developer ergonomics are

00:04:15,760 --> 00:04:19,440
great for writing tests with jest so

00:04:17,919 --> 00:04:22,000
some even look forward to writing tests

00:04:19,440 --> 00:04:23,360
with it but more importantly jess has a

00:04:22,000 --> 00:04:25,120
thriving community with a

00:04:23,360 --> 00:04:26,160
well-maintained project which is really

00:04:25,120 --> 00:04:28,240
important for

00:04:26,160 --> 00:04:30,320
for sustainability of any large code

00:04:28,240 --> 00:04:32,080
base

00:04:30,320 --> 00:04:33,759
storybook is an environment for

00:04:32,080 --> 00:04:36,560
developing ui components

00:04:33,759 --> 00:04:37,840
in isolation it allows you to browse a

00:04:36,560 --> 00:04:39,440
component library

00:04:37,840 --> 00:04:41,759
view the different states of its

00:04:39,440 --> 00:04:43,120
component and interactively develop and

00:04:41,759 --> 00:04:45,040
test components

00:04:43,120 --> 00:04:47,040
and this is super useful especially if

00:04:45,040 --> 00:04:48,479
you're in a large team organization with

00:04:47,040 --> 00:04:50,400
shared libraries

00:04:48,479 --> 00:04:52,400
with the nx storybook plugin you can

00:04:50,400 --> 00:04:54,000
generate storybook configurations for

00:04:52,400 --> 00:04:57,120
individual projects

00:04:54,000 --> 00:04:58,000
beat apps or libraries and you can do so

00:04:57,120 --> 00:05:00,639
using either

00:04:58,000 --> 00:05:02,160
angular or react when generating a

00:05:00,639 --> 00:05:04,400
storable configuration

00:05:02,160 --> 00:05:05,759
you also get the option to set up an e3

00:05:04,400 --> 00:05:07,440
cypress app

00:05:05,759 --> 00:05:09,520
that is configured to run against the

00:05:07,440 --> 00:05:11,680
project storybook instance

00:05:09,520 --> 00:05:14,000
with an axe you can build serve and

00:05:11,680 --> 00:05:16,560
watch for changes to your stories

00:05:14,000 --> 00:05:18,639
lnx also helps you migrate from previous

00:05:16,560 --> 00:05:20,240
versions of storybook

00:05:18,639 --> 00:05:22,080
and the command to generate the

00:05:20,240 --> 00:05:22,800
storybook configuration for angular for

00:05:22,080 --> 00:05:25,520
example

00:05:22,800 --> 00:05:26,320
is the one provided in this sample annex

00:05:25,520 --> 00:05:28,960
g

00:05:26,320 --> 00:05:29,919
at narwhal slash angular colon server

00:05:28,960 --> 00:05:33,680
configuration

00:05:29,919 --> 00:05:35,440
and then your project's name nx sets up

00:05:33,680 --> 00:05:37,039
prettier configuration for you so your

00:05:35,440 --> 00:05:38,639
developers don't need to worry about

00:05:37,039 --> 00:05:40,240
code formatting they can focus on more

00:05:38,639 --> 00:05:41,520
interesting problems

00:05:40,240 --> 00:05:43,199
but not only does nx setup the

00:05:41,520 --> 00:05:44,400
configuration for you it also through

00:05:43,199 --> 00:05:46,320
the cli

00:05:44,400 --> 00:05:48,000
allows you to format only files that

00:05:46,320 --> 00:05:49,680
have changed between commits so that you

00:05:48,000 --> 00:05:51,360
can gradually improve the formatting of

00:05:49,680 --> 00:05:54,400
your code base

00:05:51,360 --> 00:05:56,560
and now it's demo time

00:05:54,400 --> 00:05:57,440
let's see the command to create an nx

00:05:56,560 --> 00:06:00,319
workspace

00:05:57,440 --> 00:06:02,960
it's npx create the next workspace and

00:06:00,319 --> 00:06:06,080
then the name of the workspace

00:06:02,960 --> 00:06:07,199
you can add some flags to pre-fill some

00:06:06,080 --> 00:06:09,840
of the options

00:06:07,199 --> 00:06:12,639
but you can also run just mpx create a

00:06:09,840 --> 00:06:15,919
next workspace and an interactive wizard

00:06:12,639 --> 00:06:17,199
will show up in your console now let's

00:06:15,919 --> 00:06:20,720
go in the console

00:06:17,199 --> 00:06:24,160
and type npx create a next workspace

00:06:20,720 --> 00:06:24,160
and see what will happen

00:06:25,120 --> 00:06:28,240
first of all it asks us to give a

00:06:26,960 --> 00:06:32,000
workspace name

00:06:28,240 --> 00:06:34,560
so let's give the name my workspace

00:06:32,000 --> 00:06:36,160
then it will ask us what we want to

00:06:34,560 --> 00:06:38,400
create in the new workspace

00:06:36,160 --> 00:06:41,520
we can create an empty workspace with a

00:06:38,400 --> 00:06:43,919
layout that works best for building apps

00:06:41,520 --> 00:06:46,319
or we can create a workspace with a

00:06:43,919 --> 00:06:48,479
single react application

00:06:46,319 --> 00:06:49,599
or a workspace with a single angular

00:06:48,479 --> 00:06:51,759
application

00:06:49,599 --> 00:06:53,039
or a workspace with a single next.js

00:06:51,759 --> 00:06:55,440
separation

00:06:53,039 --> 00:06:57,520
or a nest application or even a

00:06:55,440 --> 00:06:59,759
workspace with a single app built for

00:06:57,520 --> 00:07:01,919
using web components

00:06:59,759 --> 00:07:03,520
but we can also create a workspace with

00:07:01,919 --> 00:07:06,160
a full stack application

00:07:03,520 --> 00:07:08,080
using reactant express or a full stack

00:07:06,160 --> 00:07:10,319
application using angular and nest

00:07:08,080 --> 00:07:11,440
or an empty workspace with a layout that

00:07:10,319 --> 00:07:14,160
works best for

00:07:11,440 --> 00:07:15,680
open source projects we can also create

00:07:14,160 --> 00:07:17,280
an empty workspace

00:07:15,680 --> 00:07:18,720
and yeah this is the beginning of the

00:07:17,280 --> 00:07:21,919
list

00:07:18,720 --> 00:07:23,520
so let's go ahead and create

00:07:21,919 --> 00:07:26,160
a workspace with a single angular

00:07:23,520 --> 00:07:27,520
application

00:07:26,160 --> 00:07:29,599
let's see the options we get the

00:07:27,520 --> 00:07:32,479
application name let's give the name

00:07:29,599 --> 00:07:35,360
demo up then let's choose the default

00:07:32,479 --> 00:07:38,400
stylesheet format we'll use sas

00:07:35,360 --> 00:07:40,880
and default lender the eslint

00:07:38,400 --> 00:07:42,479
and yes we want to use annex cloud

00:07:40,880 --> 00:07:44,400
because it's free it doesn't require

00:07:42,479 --> 00:07:45,840
registration and it gives us faster

00:07:44,400 --> 00:07:48,560
builds run details

00:07:45,840 --> 00:07:49,440
and github integration it's a no-brainer

00:07:48,560 --> 00:07:52,800
right

00:07:49,440 --> 00:07:53,759
so let's go so now that the command

00:07:52,800 --> 00:07:57,199
finished running

00:07:53,759 --> 00:08:00,319
let's go to visual studio code and see

00:07:57,199 --> 00:08:04,960
what our command generated so

00:08:00,319 --> 00:08:08,240
we see that generated an apps folder

00:08:04,960 --> 00:08:09,599
and inside the apps folder we have the

00:08:08,240 --> 00:08:12,720
demo app

00:08:09,599 --> 00:08:14,720
and we also have inside the demo app

00:08:12,720 --> 00:08:16,720
we just have a proper angular

00:08:14,720 --> 00:08:19,039
application with our app module and our

00:08:16,720 --> 00:08:22,240
app component

00:08:19,039 --> 00:08:23,759
and then we have also a demo rp3 which

00:08:22,240 --> 00:08:27,280
is the cypress app

00:08:23,759 --> 00:08:27,280
that's what goes with our demo

00:08:34,080 --> 00:08:38,560
also we have a libraries folder which is

00:08:36,719 --> 00:08:40,640
empty at the moment but we will generate

00:08:38,560 --> 00:08:42,959
a library we have a tools folder

00:08:40,640 --> 00:08:44,880
which has a schematics where we can add

00:08:42,959 --> 00:08:45,839
our custom schematics in it in this

00:08:44,880 --> 00:08:48,320
folder

00:08:45,839 --> 00:08:51,279
and let's see we have our usual

00:08:48,320 --> 00:08:51,279
angularjson

00:08:53,360 --> 00:08:59,839
and we also have under nx json

00:08:56,880 --> 00:09:02,640
and some presets for jest and other

00:08:59,839 --> 00:09:05,600
configuration files

00:09:02,640 --> 00:09:07,680
so as promised let's take a look at the

00:09:05,600 --> 00:09:10,560
nx examples repository

00:09:07,680 --> 00:09:12,320
which showcases all of the features that

00:09:10,560 --> 00:09:14,399
we talked about before

00:09:12,320 --> 00:09:16,240
you can find it at this address on

00:09:14,399 --> 00:09:19,279
github

00:09:16,240 --> 00:09:22,080
narwhalslash nx examples

00:09:19,279 --> 00:09:23,200
so let's take a look what we have here

00:09:22,080 --> 00:09:26,480
we have

00:09:23,200 --> 00:09:29,600
the nx examples folder which has inside

00:09:26,480 --> 00:09:32,640
and the apps folder

00:09:29,600 --> 00:09:35,279
which has a cart application with

00:09:32,640 --> 00:09:38,160
its e3 tests and the card application we

00:09:35,279 --> 00:09:41,200
can see that it's a react application

00:09:38,160 --> 00:09:42,320
it also has a products application which

00:09:41,200 --> 00:09:45,680
as we can see

00:09:42,320 --> 00:09:45,680
is an angular application

00:09:45,760 --> 00:09:52,720
and it also has some libraries

00:09:49,360 --> 00:09:53,360
it has a the cart library which has

00:09:52,720 --> 00:09:57,760
inside

00:09:53,360 --> 00:09:57,760
some parts of the cart application

00:09:58,480 --> 00:10:02,079
and it has a products library which

00:10:01,519 --> 00:10:04,160
again

00:10:02,079 --> 00:10:06,240
has some part of the of the products

00:10:04,160 --> 00:10:07,279
application which we'll see in action in

00:10:06,240 --> 00:10:10,079
the browser

00:10:07,279 --> 00:10:12,560
and it also has a shared library in the

00:10:10,079 --> 00:10:13,920
shared library it has some shared ui

00:10:12,560 --> 00:10:16,000
components that

00:10:13,920 --> 00:10:18,160
are used by both of the applications

00:10:16,000 --> 00:10:22,079
like the header

00:10:18,160 --> 00:10:25,360
which we will see is written in jsx

00:10:22,079 --> 00:10:28,959
and some other utility libraries that

00:10:25,360 --> 00:10:31,360
like the jsxify and if we take a look it

00:10:28,959 --> 00:10:34,160
also has a library for state management

00:10:31,360 --> 00:10:37,519
which uses ngrx

00:10:34,160 --> 00:10:39,920
and then it has some other ui elements

00:10:37,519 --> 00:10:42,000
so let's take a look what do we see when

00:10:39,920 --> 00:10:43,200
we run the application to serve first

00:10:42,000 --> 00:10:46,399
the cart duplication

00:10:43,200 --> 00:10:49,200
we can do nx serve cart and

00:10:46,399 --> 00:10:52,320
it will just run our local server and we

00:10:49,200 --> 00:10:56,399
can see the application running

00:10:52,320 --> 00:11:00,880
the card application running in 4200

00:10:56,399 --> 00:11:04,079
port we can see the header here

00:11:00,880 --> 00:11:07,839
now let's take a look what happens when

00:11:04,079 --> 00:11:07,839
we serve the products application

00:11:10,240 --> 00:11:13,600
and we refresh here we see our products

00:11:12,560 --> 00:11:17,040
and again

00:11:13,600 --> 00:11:20,560
the same header as we said

00:11:17,040 --> 00:11:20,560
the products application

00:11:21,200 --> 00:11:25,360
the cards application is a react

00:11:22,880 --> 00:11:28,640
application and the products application

00:11:25,360 --> 00:11:32,560
is an angular application but the nx

00:11:28,640 --> 00:11:35,920
header that we saw the shared header

00:11:32,560 --> 00:11:37,680
is written in jsx but it's exported

00:11:35,920 --> 00:11:40,000
and we can see that we can import the

00:11:37,680 --> 00:11:43,680
same element like this

00:11:40,000 --> 00:11:47,279
in both our angular application

00:11:43,680 --> 00:11:47,279
and the react application

00:11:48,079 --> 00:11:58,240
and it's imported like this

00:11:56,320 --> 00:11:59,440
interesting thing to see is that some of

00:11:58,240 --> 00:12:01,600
our applications

00:11:59,440 --> 00:12:03,040
for example all the applications that go

00:12:01,600 --> 00:12:05,680
in the cart all the

00:12:03,040 --> 00:12:06,720
libraries that go in the carts

00:12:05,680 --> 00:12:09,600
application

00:12:06,720 --> 00:12:10,880
are written in react just like our cart

00:12:09,600 --> 00:12:13,839
application

00:12:10,880 --> 00:12:15,680
and the libraries that's the url

00:12:13,839 --> 00:12:17,279
libraries that go in the products are

00:12:15,680 --> 00:12:19,200
usually written in angular

00:12:17,279 --> 00:12:21,440
but as we saw we can have the shared

00:12:19,200 --> 00:12:25,440
libraries that are written

00:12:21,440 --> 00:12:27,839
for example in jsx

00:12:25,440 --> 00:12:29,760
and let's take a look what happens when

00:12:27,839 --> 00:12:32,959
we run the dependency graph

00:12:29,760 --> 00:12:36,079
so the dependency grapher application

00:12:32,959 --> 00:12:37,279
looks like this pretty more complete

00:12:36,079 --> 00:12:40,000
than the one we saw

00:12:37,279 --> 00:12:41,279
in the example application before right

00:12:40,000 --> 00:12:44,079
so we can see

00:12:41,279 --> 00:12:46,160
that the shared header for example which

00:12:44,079 --> 00:12:47,600
is used both by the products and card

00:12:46,160 --> 00:12:50,720
both the products on the card

00:12:47,600 --> 00:12:53,200
application depend on the shared header

00:12:50,720 --> 00:12:54,560
again d2a tests of course depend on

00:12:53,200 --> 00:12:57,279
their applications

00:12:54,560 --> 00:12:58,720
and we can see all the other uh

00:12:57,279 --> 00:13:02,639
dependencies that we have

00:12:58,720 --> 00:13:05,920
here for example the shared header

00:13:02,639 --> 00:13:07,040
you is using the jsx file library so it

00:13:05,920 --> 00:13:10,880
depends on this

00:13:07,040 --> 00:13:13,040
and so does this ui library here

00:13:10,880 --> 00:13:14,399
so in this nice way we can see the whole

00:13:13,040 --> 00:13:15,839
dependent graph

00:13:14,399 --> 00:13:18,399
we can choose to only see one

00:13:15,839 --> 00:13:21,760
application

00:13:18,399 --> 00:13:25,200
or we can group by folder

00:13:21,760 --> 00:13:28,320
now let's see we talked about

00:13:25,200 --> 00:13:31,120
the affected command now

00:13:28,320 --> 00:13:32,320
let's change something let's go ahead

00:13:31,120 --> 00:13:35,360
and change something

00:13:32,320 --> 00:13:37,279
in our header element for example let's

00:13:35,360 --> 00:13:38,320
change the background color from blue

00:13:37,279 --> 00:13:41,760
and make it red

00:13:38,320 --> 00:13:45,519
and save now if we go

00:13:41,760 --> 00:13:49,440
and run an x affected

00:13:45,519 --> 00:13:51,839
depth graph the depth rough will show us

00:13:49,440 --> 00:13:53,680
only these are these parts of our

00:13:51,839 --> 00:13:54,880
project which were affected by our

00:13:53,680 --> 00:13:57,360
change

00:13:54,880 --> 00:13:59,120
our change was in shared header and both

00:13:57,360 --> 00:14:00,160
the car's application on the product's

00:13:59,120 --> 00:14:02,560
application

00:14:00,160 --> 00:14:04,800
depend on the shared header but the

00:14:02,560 --> 00:14:08,160
three applications

00:14:04,800 --> 00:14:10,000
for carton products depends on the cards

00:14:08,160 --> 00:14:13,920
and products are respectively

00:14:10,000 --> 00:14:15,360
so if we were to rebuild retest or rerun

00:14:13,920 --> 00:14:17,600
these parts of the code that were

00:14:15,360 --> 00:14:19,360
affected would have to do the same thing

00:14:17,600 --> 00:14:23,360
again would have to re-test

00:14:19,360 --> 00:14:26,240
or rebuild so this dependency graph

00:14:23,360 --> 00:14:28,000
helps us understand a little bit better

00:14:26,240 --> 00:14:30,399
if we show the whole card

00:14:28,000 --> 00:14:31,680
again it will show us in red the parts

00:14:30,399 --> 00:14:33,440
that were affected

00:14:31,680 --> 00:14:37,440
and we will have a general better

00:14:33,440 --> 00:14:40,480
understanding of how our whole code base

00:14:37,440 --> 00:14:42,079
is affected when we change some small

00:14:40,480 --> 00:14:45,600
thing

00:14:42,079 --> 00:14:47,519
now let's see how an x mix builds fast

00:14:45,600 --> 00:14:49,839
let's break down an example of a single

00:14:47,519 --> 00:14:52,079
app composed of many libraries

00:14:49,839 --> 00:14:53,839
to see how an x uses intelligent

00:14:52,079 --> 00:14:55,920
analysis of a code change

00:14:53,839 --> 00:14:57,600
and know what projects can be affected

00:14:55,920 --> 00:14:59,839
by that change

00:14:57,600 --> 00:15:01,360
let's think of a customer service portal

00:14:59,839 --> 00:15:03,920
with these pages

00:15:01,360 --> 00:15:04,720
a knowledge base a page for support

00:15:03,920 --> 00:15:07,279
tickets

00:15:04,720 --> 00:15:07,839
and a live chat and let's say there is

00:15:07,279 --> 00:15:11,120
also

00:15:07,839 --> 00:15:13,279
a new ticket this is one app but we can

00:15:11,120 --> 00:15:14,639
partition it into several libraries that

00:15:13,279 --> 00:15:16,720
compose the app

00:15:14,639 --> 00:15:19,519
and each section of the app can have its

00:15:16,720 --> 00:15:20,959
own features which can be separated into

00:15:19,519 --> 00:15:23,120
even more libraries

00:15:20,959 --> 00:15:26,160
for example the new ticket feature is

00:15:23,120 --> 00:15:28,160
the screen where tickets are created

00:15:26,160 --> 00:15:30,320
and since those sections and features of

00:15:28,160 --> 00:15:31,839
the app will definitely share some

00:15:30,320 --> 00:15:34,720
components and utilities

00:15:31,839 --> 00:15:36,240
we can extrapolate more libraries such

00:15:34,720 --> 00:15:38,240
as a design system

00:15:36,240 --> 00:15:39,759
and some utilities for communicating

00:15:38,240 --> 00:15:41,839
with the backend

00:15:39,759 --> 00:15:43,279
in a real app there would be many more

00:15:41,839 --> 00:15:45,199
ways to partition and share

00:15:43,279 --> 00:15:48,399
functionality between libraries

00:15:45,199 --> 00:15:49,920
but let's keep it simple

00:15:48,399 --> 00:15:51,519
now let's consider lifecycle when a

00:15:49,920 --> 00:15:52,399
developer on the team wants to change

00:15:51,519 --> 00:15:54,959
the layout

00:15:52,399 --> 00:15:56,639
of the new ticket ui they would make the

00:15:54,959 --> 00:15:58,880
change inside the feature library and

00:15:56,639 --> 00:16:00,800
then open a pull request

00:15:58,880 --> 00:16:02,880
if your ci tooling doesn't understand

00:16:00,800 --> 00:16:03,839
what changed and what the impact of that

00:16:02,880 --> 00:16:06,079
change might be

00:16:03,839 --> 00:16:07,759
naturally it will build everything again

00:16:06,079 --> 00:16:10,320
just to be safe

00:16:07,759 --> 00:16:12,480
so as your project grows in scope if ci

00:16:10,320 --> 00:16:15,440
is building everything all the time

00:16:12,480 --> 00:16:17,120
that leads to the ci time growing along

00:16:15,440 --> 00:16:19,839
with the the number of projects in your

00:16:17,120 --> 00:16:19,839
repository

00:16:20,000 --> 00:16:23,360
so if we put that on a graph we can see

00:16:22,800 --> 00:16:25,360
that

00:16:23,360 --> 00:16:27,199
the full time it takes to run ci is

00:16:25,360 --> 00:16:29,120
really a factor of how many projects and

00:16:27,199 --> 00:16:29,920
how long each of those projects takes to

00:16:29,120 --> 00:16:33,839
build

00:16:29,920 --> 00:16:33,839
represented by these colored bars here

00:16:34,480 --> 00:16:38,880
but with nx we're smart about about

00:16:37,199 --> 00:16:40,880
knowing what you've changed and what

00:16:38,880 --> 00:16:43,600
could be affected by that change

00:16:40,880 --> 00:16:45,839
since nx maintains its own dependency

00:16:43,600 --> 00:16:47,519
graph or project graph underneath

00:16:45,839 --> 00:16:49,440
it can look at what you've actually

00:16:47,519 --> 00:16:52,880
changed between one branch

00:16:49,440 --> 00:16:55,199
to another and determine what's

00:16:52,880 --> 00:16:57,360
what's changed in that but also what's

00:16:55,199 --> 00:17:00,079
affected by that change

00:16:57,360 --> 00:17:01,120
and so nx can use that to be more

00:17:00,079 --> 00:17:03,680
intelligent about the

00:17:01,120 --> 00:17:04,640
commands that it can run so here we can

00:17:03,680 --> 00:17:06,640
see that nx

00:17:04,640 --> 00:17:07,839
knows that we've changed the new ticket

00:17:06,640 --> 00:17:09,679
library

00:17:07,839 --> 00:17:11,439
and since the support tickets feature

00:17:09,679 --> 00:17:14,240
depends on new ticket and the customer

00:17:11,439 --> 00:17:16,319
service app depends on support tickets

00:17:14,240 --> 00:17:17,280
it knows that customer service app and

00:17:16,319 --> 00:17:19,199
support tickets

00:17:17,280 --> 00:17:21,280
can be affected by this change and so it

00:17:19,199 --> 00:17:22,559
needs to re-validate those by running

00:17:21,280 --> 00:17:25,679
their own tests their own

00:17:22,559 --> 00:17:27,199
end-to-end tests and and whatever

00:17:25,679 --> 00:17:29,280
whatever other tasks could be affected

00:17:27,199 --> 00:17:31,200
by this change

00:17:29,280 --> 00:17:33,200
so since we can build only what's

00:17:31,200 --> 00:17:34,320
affected we can see that our total ci

00:17:33,200 --> 00:17:36,240
time

00:17:34,320 --> 00:17:37,679
still is a matter of the projects being

00:17:36,240 --> 00:17:39,760
built and how long they take but we're

00:17:37,679 --> 00:17:41,440
building fewer projects because we don't

00:17:39,760 --> 00:17:43,760
we know that some of the projects are

00:17:41,440 --> 00:17:46,160
not affected by this change

00:17:43,760 --> 00:17:47,120
so then if we compare to the original ci

00:17:46,160 --> 00:17:50,640
time we can see

00:17:47,120 --> 00:17:51,919
quite a bit of savings but we could do

00:17:50,640 --> 00:17:54,640
even better

00:17:51,919 --> 00:17:55,600
since nx is able to parallelize tasks

00:17:54,640 --> 00:17:58,640
you can run

00:17:55,600 --> 00:18:00,400
all three project tasks in parallel so

00:17:58,640 --> 00:18:03,039
that your ci time now becomes

00:18:00,400 --> 00:18:05,919
only as long as the longest project task

00:18:03,039 --> 00:18:05,919
in your workspace

00:18:06,720 --> 00:18:12,799
quite quite an improvement just from

00:18:09,200 --> 00:18:12,799
knowing what's affected by a change

00:18:12,960 --> 00:18:16,960
even though we are able to rebuild only

00:18:15,200 --> 00:18:19,840
three of these projects

00:18:16,960 --> 00:18:20,960
those projects depend on unaffected

00:18:19,840 --> 00:18:23,520
projects

00:18:20,960 --> 00:18:25,760
by default each affected project will

00:18:23,520 --> 00:18:27,520
pull in the sources of its dependencies

00:18:25,760 --> 00:18:29,840
to build from scratch

00:18:27,520 --> 00:18:30,640
but nx now supports the ability for

00:18:29,840 --> 00:18:33,520
libraries

00:18:30,640 --> 00:18:34,400
to be built independently and consumers

00:18:33,520 --> 00:18:37,919
will consume

00:18:34,400 --> 00:18:40,240
the packaged library instead of sources

00:18:37,919 --> 00:18:41,280
this allows what we call incremental

00:18:40,240 --> 00:18:43,679
building

00:18:41,280 --> 00:18:44,400
incremental building really becomes

00:18:43,679 --> 00:18:46,400
powerful

00:18:44,400 --> 00:18:48,480
when you can cache and reuse the

00:18:46,400 --> 00:18:51,039
packaged libraries

00:18:48,480 --> 00:18:52,320
so if i build and test the new ticket

00:18:51,039 --> 00:18:54,480
library in ci

00:18:52,320 --> 00:18:56,000
and the design system and validators

00:18:54,480 --> 00:18:59,200
libraries have already been

00:18:56,000 --> 00:19:01,520
built and cast in ci's local cache

00:18:59,200 --> 00:19:02,480
the builder can just build the source

00:19:01,520 --> 00:19:05,120
code

00:19:02,480 --> 00:19:07,280
inside the new ticket library without

00:19:05,120 --> 00:19:08,240
having to rebuild the source code from

00:19:07,280 --> 00:19:11,520
validators

00:19:08,240 --> 00:19:13,440
and design system

00:19:11,520 --> 00:19:15,280
so let's take a look at this example of

00:19:13,440 --> 00:19:16,799
building times for the three parts of

00:19:15,280 --> 00:19:18,960
the project

00:19:16,799 --> 00:19:21,360
if a dependency of the target has been

00:19:18,960 --> 00:19:22,720
built the build doesn't need to be

00:19:21,360 --> 00:19:24,880
totally fresh

00:19:22,720 --> 00:19:27,440
so each individual part can use the

00:19:24,880 --> 00:19:29,760
cache to save building time

00:19:27,440 --> 00:19:31,280
if we put the affected and parallel

00:19:29,760 --> 00:19:33,679
functionalities in action

00:19:31,280 --> 00:19:34,400
together with incremental cache our

00:19:33,679 --> 00:19:36,480
build time

00:19:34,400 --> 00:19:38,640
is practically reduced to a quarter of

00:19:36,480 --> 00:19:40,480
the initial

00:19:38,640 --> 00:19:43,039
let's take a look now from how we

00:19:40,480 --> 00:19:45,679
started and what we end up with

00:19:43,039 --> 00:19:47,919
at each step our build time is reduced

00:19:45,679 --> 00:19:49,200
and eventually with the use of affected

00:19:47,919 --> 00:19:52,240
in parallel

00:19:49,200 --> 00:19:55,679
and then incremental cache our total ci

00:19:52,240 --> 00:19:59,039
time is as long as our longest parallel

00:19:55,679 --> 00:20:00,880
task so we've seen how local cache can

00:19:59,039 --> 00:20:03,360
really speed up builds

00:20:00,880 --> 00:20:04,080
but here's another what if to consider

00:20:03,360 --> 00:20:06,720
what if

00:20:04,080 --> 00:20:07,280
ci and developer computers worked

00:20:06,720 --> 00:20:09,440
together

00:20:07,280 --> 00:20:11,520
what if they could share the work that

00:20:09,440 --> 00:20:14,240
the others have already done

00:20:11,520 --> 00:20:16,720
well that's where nx cloud comes in

00:20:14,240 --> 00:20:17,280
nxcloud takes what was otherwise a local

00:20:16,720 --> 00:20:18,880
cache

00:20:17,280 --> 00:20:20,960
isolated to the machine that the task

00:20:18,880 --> 00:20:21,840
was run on and now pushes it to our

00:20:20,960 --> 00:20:23,679
cloud

00:20:21,840 --> 00:20:25,840
and manages it in a way that if somebody

00:20:23,679 --> 00:20:26,720
runs the same task with similar enough

00:20:25,840 --> 00:20:29,840
environment

00:20:26,720 --> 00:20:31,520
then nx can just grab that result and

00:20:29,840 --> 00:20:34,640
replay it

00:20:31,520 --> 00:20:37,840
for other computers on the on the

00:20:34,640 --> 00:20:40,400
connected to the cloud so when nx cloud

00:20:37,840 --> 00:20:42,400
is added we can see those same timings

00:20:40,400 --> 00:20:44,720
where we were already seeing some some

00:20:42,400 --> 00:20:47,039
time savings from cast results

00:20:44,720 --> 00:20:48,320
improve even more by having more cache

00:20:47,039 --> 00:20:49,919
hits because

00:20:48,320 --> 00:20:51,440
the cash results are shared across

00:20:49,919 --> 00:20:53,520
people on your team

00:20:51,440 --> 00:20:55,039
and ci environments and then when we

00:20:53,520 --> 00:20:56,480
look at the bigger picture and compare

00:20:55,039 --> 00:20:58,799
it from where we started

00:20:56,480 --> 00:20:59,760
we can see that it's really the best

00:20:58,799 --> 00:21:01,760
case scenario is

00:20:59,760 --> 00:21:03,919
much much better than our our best case

00:21:01,760 --> 00:21:06,159
scenario with a naive build

00:21:03,919 --> 00:21:08,400
it's not uncommon to see 10x build

00:21:06,159 --> 00:21:11,200
performance improvements in ci

00:21:08,400 --> 00:21:11,840
plus improvements locally but it's not

00:21:11,200 --> 00:21:14,559
one way

00:21:11,840 --> 00:21:16,080
and not just ci that benefits every

00:21:14,559 --> 00:21:18,400
developer computer

00:21:16,080 --> 00:21:22,640
and environment in your organization can

00:21:18,400 --> 00:21:25,360
benefit from being connected to nx cloud

00:21:22,640 --> 00:21:27,280
beyond the modern tooling and the build

00:21:25,360 --> 00:21:28,880
optimizations that nx provides there are

00:21:27,280 --> 00:21:31,200
so many more things that make it

00:21:28,880 --> 00:21:33,360
a pleasant tool as part of your tool

00:21:31,200 --> 00:21:35,520
build it's integrated with visual studio

00:21:33,360 --> 00:21:37,600
code through the nx console plugin

00:21:35,520 --> 00:21:39,520
we have github integrations with nxcloud

00:21:37,600 --> 00:21:41,039
to post reports directly back to your

00:21:39,520 --> 00:21:43,200
pull requests

00:21:41,039 --> 00:21:45,360
you can extend nx with plugins and

00:21:43,200 --> 00:21:46,480
actually everything in nx is built with

00:21:45,360 --> 00:21:48,240
plugins

00:21:46,480 --> 00:21:50,559
we have first class support for react

00:21:48,240 --> 00:21:53,280
node and other tools

00:21:50,559 --> 00:21:55,200
and and the community has been building

00:21:53,280 --> 00:21:57,039
even more plugins

00:21:55,200 --> 00:21:59,600
so we hope this presentation has shown

00:21:57,039 --> 00:22:01,840
you how nx uses modern tools and build

00:21:59,600 --> 00:22:03,200
optimizations to make happy developers

00:22:01,840 --> 00:22:05,120
if you want to learn more you can go to

00:22:03,200 --> 00:22:08,640
nx dot dev slash

00:22:05,120 --> 00:22:10,640
modern dash angular and katherine and i

00:22:08,640 --> 00:22:13,840
both thank you for your time

00:22:10,640 --> 00:22:13,840

YouTube URL: https://www.youtube.com/watch?v=eimvdS-BGWY


