Title: OW2con 2011 The OW2 Kalimucho project, PART 1 Marc Dalmau, Philippe Roose
Publication date: 2012-01-09
Playlist: OW2con 2011 The OW2 Kalimucho project
Description: 
	Speakers: Marc Dalmau, Philippe Roose, LIUPPA/UPPA
Abstract: The democratization of wireless networks combined to the miniaturization of communication devices make pervasive applications possible. The integration of sensors enables the connection to hardware and software environments. Nevertheless, such profusion of heterogeneous devices, networks interfaces and user's needs must face the limitations of mobile devices. It requires adapting continuously the structure of deployed applications in order to suit both the users' needs and the execution environment.
To provide self adaptation, we offer a distributed platform called KALIMUCHO able to make hot (re-) deployment of distributed software components. This platform enables the deployment and the modification of the application structure at run time, as well as physical deployment on mobile hosts.
The platform is services oriented while applications are component based. Thanks to Osagaia Component Model (monitorable) and Korrontea Connector containers (also monitorable), states and events are sent from the application to the platform. Supervision and context recovery can be distributed on PC and Android devices.
The platform is made of three kinds of services:
• Services for supervision of the application: they execute the commands for creating/removing/connecting/disconnecting/migrating the components and allows loading dynamically the Java classes for the Business Components (BCs) and for the exchanged objects when needed. So the application part of the code is not resident on the mobile devices: the classes are loaded when creating a component and removed as soon as this component is removed.
• Services for network communication: they allow the platforms to communicate each other and support the middleware for the connectors.
• Services for the application: they provide services for the BCs in order to give then access to the resources managed by the platform. That means classical resources (texts, images, etc.) and specific resources provided by the hardware (GPS, SMS, etc.)
Captions: 
	00:00:03,859 --> 00:00:12,929
so I will present 30 mucho project the

00:00:08,639 --> 00:00:15,809
objective is to make a platform to a lot

00:00:12,929 --> 00:00:19,590
development of applications on various

00:00:15,809 --> 00:00:24,710
devices like samsung tablet smartphones

00:00:19,590 --> 00:00:28,470
and standard PCs also application

00:00:24,710 --> 00:00:31,140
applications are Java and made of Java

00:00:28,470 --> 00:00:36,059
components and these components are

00:00:31,140 --> 00:00:38,579
linked by flows of data and skadam utro

00:00:36,059 --> 00:00:41,460
can change the architecture of the

00:00:38,579 --> 00:00:45,210
application while it's running without

00:00:41,460 --> 00:00:49,140
stopping it that's our objective while

00:00:45,210 --> 00:00:53,489
your platform well for embedded

00:00:49,140 --> 00:00:57,180
applications it's very difficult to make

00:00:53,489 --> 00:00:59,840
adaptation we can all only make self

00:00:57,180 --> 00:01:02,550
adaptation and self adaptation means

00:00:59,840 --> 00:01:04,920
every application because the

00:01:02,550 --> 00:01:08,189
application need to have also

00:01:04,920 --> 00:01:10,380
possibilities inside in video our

00:01:08,189 --> 00:01:13,310
solution is components of the

00:01:10,380 --> 00:01:16,020
application are downloaded and removed

00:01:13,310 --> 00:01:18,990
downloaded when needed and removed when

00:01:16,020 --> 00:01:22,350
not used so we have only what is needed

00:01:18,990 --> 00:01:26,820
at one time components are created

00:01:22,350 --> 00:01:29,280
removed and moved migrated without

00:01:26,820 --> 00:01:31,740
stopping the running application that

00:01:29,280 --> 00:01:34,070
mean evolution of the application and

00:01:31,740 --> 00:01:37,380
communication between components are

00:01:34,070 --> 00:01:39,840
totally transparent they send and

00:01:37,380 --> 00:01:43,500
receive data but don't know where and

00:01:39,840 --> 00:01:48,540
from to the platform decides where data

00:01:43,500 --> 00:01:52,920
go and from where the data comes so

00:01:48,540 --> 00:01:55,049
applications are made of services and an

00:01:52,920 --> 00:01:57,659
application is a set of service of

00:01:55,049 --> 00:02:00,860
course and services are made of

00:01:57,659 --> 00:02:05,060
assemblies of components so all server

00:02:00,860 --> 00:02:09,750
service is some components with links

00:02:05,060 --> 00:02:11,770
and no component is light component that

00:02:09,750 --> 00:02:15,250
means in mate only one thing

00:02:11,770 --> 00:02:20,640
so we had some inputs and only one

00:02:15,250 --> 00:02:24,580
output so the deployment is

00:02:20,640 --> 00:02:27,420
reconfiguration of applications allows

00:02:24,580 --> 00:02:30,400
to add the user remove a user

00:02:27,420 --> 00:02:33,400
dynamically other service removal

00:02:30,400 --> 00:02:38,680
service of modified out of services

00:02:33,400 --> 00:02:41,710
though and we want to make dynamically

00:02:38,680 --> 00:02:45,810
adapt ation to the context to the user

00:02:41,710 --> 00:02:50,560
and also to the usage of the application

00:02:45,810 --> 00:02:52,690
so our application are like that some

00:02:50,560 --> 00:02:59,070
components distributed on some devices

00:02:52,690 --> 00:03:02,890
and links each component have no input

00:02:59,070 --> 00:03:05,440
as many input as we want and only one

00:03:02,890 --> 00:03:09,970
output but the output can be duplicated

00:03:05,440 --> 00:03:13,030
and send it to Martha I will take a

00:03:09,970 --> 00:03:17,380
little example to show what we want to

00:03:13,030 --> 00:03:20,380
do an organism's that take care of an

00:03:17,380 --> 00:03:22,840
environment can send an agent with a

00:03:20,380 --> 00:03:25,270
smart phone of course on the son of an

00:03:22,840 --> 00:03:29,920
environment accident what we won't test

00:03:25,270 --> 00:03:32,920
the when it arrives on the same the

00:03:29,920 --> 00:03:36,250
account can't send a video in a

00:03:32,920 --> 00:03:38,740
streaming mode to the center then the

00:03:36,250 --> 00:03:41,470
center want this video to be sent to an

00:03:38,740 --> 00:03:45,040
expert who is not here but use at home

00:03:41,470 --> 00:03:47,830
with a smartphone then the expert decide

00:03:45,040 --> 00:03:51,580
that it's important to get picture to

00:03:47,830 --> 00:03:56,500
make a file to ask for money to the

00:03:51,580 --> 00:03:58,510
european community or so on and to

00:03:56,500 --> 00:04:01,450
compress this information the centre

00:03:58,510 --> 00:04:04,870
wants to have the GPS position exact of

00:04:01,450 --> 00:04:08,970
each picture out contain mutual aid to

00:04:04,870 --> 00:04:13,420
do that when arriving on the same with

00:04:08,970 --> 00:04:20,710
the center with traditional PC and the

00:04:13,420 --> 00:04:24,850
Argent with a smart phone we sent some

00:04:20,710 --> 00:04:27,580
comments to the platform and a command

00:04:24,850 --> 00:04:30,070
to create a component so the component

00:04:27,580 --> 00:04:32,530
is created on the smartphone so I know

00:04:30,070 --> 00:04:35,320
command to create connector the

00:04:32,530 --> 00:04:38,560
connector is created and then document

00:04:35,320 --> 00:04:42,520
to another component and then the video

00:04:38,560 --> 00:04:47,350
is capture on the smartphone and sent to

00:04:42,520 --> 00:04:51,280
the center later we want to send this

00:04:47,350 --> 00:04:54,180
video to so experice end of a comment

00:04:51,280 --> 00:04:57,610
the platform that's a same component

00:04:54,180 --> 00:05:02,820
from this to this and the component is

00:04:57,610 --> 00:05:07,840
migrated a connection is redirected and

00:05:02,820 --> 00:05:14,770
the applications go on walking later

00:05:07,840 --> 00:05:18,190
we will stop the video stop the video

00:05:14,770 --> 00:05:21,450
display remove the connector and then

00:05:18,190 --> 00:05:27,160
start new components to send pictures

00:05:21,450 --> 00:05:31,200
from smartphone to the center and so

00:05:27,160 --> 00:05:35,260
expect smartphone and if we want to add

00:05:31,200 --> 00:05:37,750
the GPS position position we only need

00:05:35,260 --> 00:05:43,350
to create a new component create a new

00:05:37,750 --> 00:05:47,919
connector and so on well in this example

00:05:43,350 --> 00:05:50,820
all decision where because of utility we

00:05:47,919 --> 00:05:54,780
want that then we want another thing but

00:05:50,820 --> 00:06:00,370
what the objective of control is also is

00:05:54,780 --> 00:06:03,669
if the platform sense that the quality

00:06:00,370 --> 00:06:06,669
is bad when sending a video because so

00:06:03,669 --> 00:06:09,729
that work is not good or so on it can

00:06:06,669 --> 00:06:12,550
decide by itself to stop the video and

00:06:09,729 --> 00:06:16,260
start pictures because the video don't

00:06:12,550 --> 00:06:20,020
walk and picture will work but is later

00:06:16,260 --> 00:06:23,680
the platform sees that the network works

00:06:20,020 --> 00:06:26,169
well it can't stops the picture and go

00:06:23,680 --> 00:06:32,200
back to the video that's what we want

00:06:26,169 --> 00:06:35,280
also to do well how did it works in more

00:06:32,200 --> 00:06:38,590
details if we take this part of the

00:06:35,280 --> 00:06:41,560
example the deployment of two components

00:06:38,590 --> 00:06:44,039
and no connector what happens when the

00:06:41,560 --> 00:06:47,139
platform of the Argent smartphone

00:06:44,039 --> 00:06:50,889
receives this command so with the

00:06:47,139 --> 00:06:55,270
language for the command then it try to

00:06:50,889 --> 00:06:57,219
fund the code of the component because

00:06:55,270 --> 00:07:01,120
the code there was a byte code of the

00:06:57,219 --> 00:07:03,280
component is not don't load it for the

00:07:01,120 --> 00:07:05,949
moment in the smartphone so he sent a

00:07:03,280 --> 00:07:12,280
broadcast message looking for this code

00:07:05,949 --> 00:07:16,780
and one of his neighbors can't send the

00:07:12,280 --> 00:07:22,780
code so the code is sent and just not

00:07:16,780 --> 00:07:26,080
one can download it and start it if no

00:07:22,780 --> 00:07:30,819
neighbor can send the code so the

00:07:26,080 --> 00:07:34,270
request is broadcast one more time by

00:07:30,819 --> 00:07:38,050
each neighbor in order to try to find

00:07:34,270 --> 00:07:41,440
this code so in this example there is a

00:07:38,050 --> 00:07:45,430
code repository which is which sends the

00:07:41,440 --> 00:07:49,060
code and the code is relayed to the

00:07:45,430 --> 00:07:52,539
smartphone where the component is now

00:07:49,060 --> 00:07:54,699
created on some smart phone in order to

00:07:52,539 --> 00:07:57,699
continue we have to create a connector

00:07:54,699 --> 00:08:03,159
then to create a connector the this

00:07:57,699 --> 00:08:06,699
matter will try to find a route to the

00:08:03,159 --> 00:08:10,120
to the center so it sends a message like

00:08:06,699 --> 00:08:14,560
a ping message and you get a reply alway

00:08:10,120 --> 00:08:18,250
say then is a platform sent document to

00:08:14,560 --> 00:08:20,259
create the connector and so to part of

00:08:18,250 --> 00:08:24,310
the connector created and the link is

00:08:20,259 --> 00:08:25,960
established well what can happen is you

00:08:24,310 --> 00:08:30,129
send a ping massage and there is no

00:08:25,960 --> 00:08:32,760
reply so if that happens the platform

00:08:30,129 --> 00:08:38,229
will send the broadcast massage

00:08:32,760 --> 00:08:41,199
looking for how to find the center it

00:08:38,229 --> 00:08:44,350
works in the same thing every neighbor

00:08:41,199 --> 00:08:46,890
that gives this request we try with a

00:08:44,350 --> 00:08:50,430
pin message one

00:08:46,890 --> 00:08:53,490
two or more odd reply and then they

00:08:50,430 --> 00:08:57,120
reply that they can't do really they

00:08:53,490 --> 00:09:00,269
can't really for the center the

00:08:57,120 --> 00:09:02,940
smartphone will choose one will send

00:09:00,269 --> 00:09:06,720
each command to create a connector then

00:09:02,940 --> 00:09:10,110
it sends the command to create a

00:09:06,720 --> 00:09:13,680
connector and we have a connector not

00:09:10,110 --> 00:09:21,630
direct but walk-in connector between so

00:09:13,680 --> 00:09:25,260
to last the video display component you

00:09:21,630 --> 00:09:28,800
need to be created on the PC so it's the

00:09:25,260 --> 00:09:31,019
same the same things that we have seen

00:09:28,800 --> 00:09:35,269
for the first component and the

00:09:31,019 --> 00:09:39,029
application country if we take the

00:09:35,269 --> 00:09:42,750
problem of how to move component from

00:09:39,029 --> 00:09:47,250
one device to another with device what

00:09:42,750 --> 00:09:50,160
happens so for the moment we have this

00:09:47,250 --> 00:09:58,709
situation we send a comment to the

00:09:50,160 --> 00:10:01,709
platform on the PC in order to send the

00:09:58,709 --> 00:10:05,850
component to the other smartphone what

00:10:01,709 --> 00:10:09,120
happens it stops the component it gets

00:10:05,850 --> 00:10:12,329
the state of the component and then he

00:10:09,120 --> 00:10:16,079
looks for route to which always the same

00:10:12,329 --> 00:10:19,470
the same thing and then it will send the

00:10:16,079 --> 00:10:24,240
component as the serialized component

00:10:19,470 --> 00:10:29,220
Chavez realization classical well but

00:10:24,240 --> 00:10:31,860
the program is that the code the

00:10:29,220 --> 00:10:36,390
bytecode of this component is not in

00:10:31,860 --> 00:10:39,269
this so you have to look as seen before

00:10:36,390 --> 00:10:42,240
to find the code it finds a pod and when

00:10:39,269 --> 00:10:47,940
you get it he can get so serious

00:10:42,240 --> 00:10:51,720
component and start it but the

00:10:47,940 --> 00:10:55,920
connection is not yet good from this way

00:10:51,720 --> 00:10:59,310
to this way so the platform will send

00:10:55,920 --> 00:11:04,570
the command to redirect the connector

00:10:59,310 --> 00:11:08,440
and the smartphone will find route

00:11:04,570 --> 00:11:10,060
another way to the other and the

00:11:08,440 --> 00:11:15,040
connector is redirected and the

00:11:10,060 --> 00:11:21,040
application go on well we have a common

00:11:15,040 --> 00:11:23,350
language center common language to

00:11:21,040 --> 00:11:26,950
create a component to remove a component

00:11:23,350 --> 00:11:29,709
to send a component to another device to

00:11:26,950 --> 00:11:33,180
disconnect an input to disconnect an

00:11:29,709 --> 00:11:36,370
output to recollect any an input and to

00:11:33,180 --> 00:11:38,470
duplicate an an output we have solved

00:11:36,370 --> 00:11:41,260
commands for connector create remove

00:11:38,470 --> 00:11:44,410
redirect input redirect output and

00:11:41,260 --> 00:11:47,410
supplement also for context which state

00:11:44,410 --> 00:11:51,459
means which state of the Aust so state

00:11:47,410 --> 00:11:59,890
of the hostess our many mem free memory

00:11:51,459 --> 00:12:03,520
our episode and battery also the the

00:11:59,890 --> 00:12:10,149
state of the container that means for

00:12:03,520 --> 00:12:16,660
example for connector we can observe our

00:12:10,149 --> 00:12:24,370
kilo bytes or send it by seconds and and

00:12:16,660 --> 00:12:26,070
so on well the platform is this one we

00:12:24,370 --> 00:12:29,320
have the local part of the application

00:12:26,070 --> 00:12:32,020
that means the components walking and

00:12:29,320 --> 00:12:35,170
the connectors and we have part of

00:12:32,020 --> 00:12:38,500
supervision that can stop component

00:12:35,170 --> 00:12:40,690
start move it cetera we have a context

00:12:38,500 --> 00:12:44,260
capture that capture context from the

00:12:40,690 --> 00:12:49,540
application and from Hardware battery

00:12:44,260 --> 00:12:53,440
and so on and decision modules that can

00:12:49,540 --> 00:12:55,329
say it's time to change this

00:12:53,440 --> 00:12:59,949
configuration because it doesn't work

00:12:55,329 --> 00:13:02,529
well but for the moment the decision

00:12:59,949 --> 00:13:05,910
model is not yet implemented because we

00:13:02,529 --> 00:13:09,420
are working on it but it's not yet

00:13:05,910 --> 00:13:23,460
it so what we do we have done a test

00:13:09,420 --> 00:13:27,360
module a test module that replace the

00:13:23,460 --> 00:13:28,980
decision module and we can test the

00:13:27,360 --> 00:13:32,640
functioning of the platform but only

00:13:28,980 --> 00:13:35,010
with files with commands we prepare some

00:13:32,640 --> 00:13:39,680
commands and we start them to see what

00:13:35,010 --> 00:13:39,680
happens when these commands are executed

00:13:39,710 --> 00:13:48,240
well the the platform is made of a lot

00:13:43,350 --> 00:13:52,620
of services internal services services

00:13:48,240 --> 00:13:57,330
more usable we find the services for

00:13:52,620 --> 00:14:01,050
network find route finder a kind of DNS

00:13:57,330 --> 00:14:04,440
not really a big DNS but you need each

00:14:01,050 --> 00:14:07,380
platform know all his neighbors the

00:14:04,440 --> 00:14:12,120
address and the clock shift between the

00:14:07,380 --> 00:14:14,660
two the two the two devices and network

00:14:12,120 --> 00:14:17,040
communication layer two layers one

00:14:14,660 --> 00:14:20,310
independent of the network and the other

00:14:17,040 --> 00:14:22,560
dependent of the network then the part

00:14:20,310 --> 00:14:29,720
of command execution we call it

00:14:22,560 --> 00:14:32,430
supervisor the part of code management

00:14:29,720 --> 00:14:35,910
repository manager called loader and

00:14:32,430 --> 00:14:38,760
class manager and a part of context

00:14:35,910 --> 00:14:41,880
management most sensor and cost context

00:14:38,760 --> 00:14:47,190
manager and services for applications

00:14:41,880 --> 00:14:51,090
other access like GPS and so on and the

00:14:47,190 --> 00:14:54,830
containers for components and service

00:14:51,090 --> 00:15:00,170
management which registers also services

00:14:54,830 --> 00:15:00,170

YouTube URL: https://www.youtube.com/watch?v=n5p7CV2lEVI


