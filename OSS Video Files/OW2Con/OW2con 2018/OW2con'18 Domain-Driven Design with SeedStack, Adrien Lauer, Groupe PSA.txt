Title: OW2con'18 Domain-Driven Design with SeedStack, Adrien Lauer, Groupe PSA
Publication date: 2018-06-13
Playlist: OW2con 2018
Description: 
	Domain-Driven Design (DDD) has always been a major part of SeedStack but the latest version cranks it up to 11! This talk is about discovering the power behind DDD and how it can be effectively put to practice with SeedStack. 

In a demonstration, we will see how a simple business model can be implemented. Then we will progressively enrich it to a full-fledged micro-service, using features such as dependency injection, technology-agnostic data access or hypermedia-enabled REST APIs. Along the way, we will take advantage of the SeedStack ecosystem to integrate other technologies like Swagger, MongoDb, JPA or embedded servers.

Finally a quick wrap-up will describe how software projects at "Groupe PSA" are leveraging SeedStack to build sophisticated applications and micro-services, in an hybrid cloud environment.
Captions: 
	00:00:01,960 --> 00:00:09,440
[Music]

00:00:04,940 --> 00:00:14,660
hello everyone I'm at open air away from

00:00:09,440 --> 00:00:18,680
group PS a-- i'm here today to introduce

00:00:14,660 --> 00:00:23,670
sid stack to you which is a development

00:00:18,680 --> 00:00:25,890
framework java development framework so

00:00:23,670 --> 00:00:29,689
it is allocated that's its tag dot or if

00:00:25,890 --> 00:00:34,940
you want to have a look but let's let's

00:00:29,689 --> 00:00:34,940
go let's move on to the presentation so

00:00:35,329 --> 00:00:44,610
so what is it stack so like I said C

00:00:39,930 --> 00:00:46,410
stack is a modular Java framework which

00:00:44,610 --> 00:00:49,289
can be used to build the rest

00:00:46,410 --> 00:00:53,520
micro-services or classic web

00:00:49,289 --> 00:00:57,199
applications with UI and so on or

00:00:53,520 --> 00:01:01,079
command line applications so it is also

00:00:57,199 --> 00:01:03,359
a solution which comes with an

00:01:01,079 --> 00:01:05,339
architecture a software architecture for

00:01:03,359 --> 00:01:07,799
your projects so we believe we have a

00:01:05,339 --> 00:01:12,360
great software architecture that you can

00:01:07,799 --> 00:01:17,490
use without any pain to have a great

00:01:12,360 --> 00:01:22,710
solution right out of the box and and it

00:01:17,490 --> 00:01:26,580
use this domain-driven design for for

00:01:22,710 --> 00:01:29,310
your business to coat your business it

00:01:26,580 --> 00:01:31,979
is an extensible platform you can write

00:01:29,310 --> 00:01:36,689
plug-ins for it to implement

00:01:31,979 --> 00:01:39,840
technologies specific to your company or

00:01:36,689 --> 00:01:42,180
maybe to integrate another open-source

00:01:39,840 --> 00:01:46,170
technology so we have a lot of plugins

00:01:42,180 --> 00:01:49,979
already built in and of course it is

00:01:46,170 --> 00:01:53,040
open source otherwise I wouldn't be here

00:01:49,979 --> 00:02:00,659
today but it is under the Mozilla Public

00:01:53,040 --> 00:02:08,580
License - okay so at group ESA we use it

00:02:00,659 --> 00:02:10,950
stacks since 2013 and we have about 100

00:02:08,580 --> 00:02:13,550
projects that use it

00:02:10,950 --> 00:02:17,520
in various business domains like

00:02:13,550 --> 00:02:21,300
connected car manufacturing finance rnd

00:02:17,520 --> 00:02:24,900
and it is the reference software stack

00:02:21,300 --> 00:02:29,940
for any Java project we create from

00:02:24,900 --> 00:02:33,150
these days every Java project we do

00:02:29,940 --> 00:02:35,580
internally or or other that are

00:02:33,150 --> 00:02:40,410
contracted to our key suppliers like

00:02:35,580 --> 00:02:42,450
Capgemini Atos and so on so we minimally

00:02:40,410 --> 00:02:46,709
extends its stack internally because we

00:02:42,450 --> 00:02:49,560
have some specific security frameworks

00:02:46,709 --> 00:02:51,780
and some legacy frameworks we want to

00:02:49,560 --> 00:02:54,959
integrate it so we brought some plugins

00:02:51,780 --> 00:02:57,440
but otherwise it's the same we use

00:02:54,959 --> 00:03:02,400
internally as the open source one I

00:02:57,440 --> 00:03:04,860
present you today so how it is used so

00:03:02,400 --> 00:03:08,160
it is a development framework but we

00:03:04,860 --> 00:03:11,340
provide a generator for you to to start

00:03:08,160 --> 00:03:13,920
quickly so each project is composed of

00:03:11,340 --> 00:03:17,910
one or more independent modules and

00:03:13,920 --> 00:03:20,549
those modules are generated with maven

00:03:17,910 --> 00:03:22,920
plug-in so you can generate we have

00:03:20,549 --> 00:03:25,380
templates for rest micro services for

00:03:22,920 --> 00:03:29,190
command line programs batch jobs and so

00:03:25,380 --> 00:03:32,640
on in reusable business domains which

00:03:29,190 --> 00:03:34,680
you build as a library you can use in

00:03:32,640 --> 00:03:38,450
your company for every project if you

00:03:34,680 --> 00:03:42,870
want and each module follows the same

00:03:38,450 --> 00:03:45,870
reference of architecture and doing so

00:03:42,870 --> 00:03:48,680
it provides an organization wynken see

00:03:45,870 --> 00:03:52,230
consistency you have the same project

00:03:48,680 --> 00:03:55,290
architecture for every project in your

00:03:52,230 --> 00:03:57,390
enterprise so it can be good to move

00:03:55,290 --> 00:03:59,940
people from one to another and it's

00:03:57,390 --> 00:04:04,540
quite

00:03:59,940 --> 00:04:07,210
useful to to do support and so on so we

00:04:04,540 --> 00:04:09,370
also provide packaging so we provide

00:04:07,210 --> 00:04:13,090
production ready packaging of sit stack

00:04:09,370 --> 00:04:15,340
application directly with the plugin so

00:04:13,090 --> 00:04:17,680
the main features of the of the

00:04:15,340 --> 00:04:20,380
framework are classical features

00:04:17,680 --> 00:04:24,520
development features but we have some

00:04:20,380 --> 00:04:28,720
some particular technologies that that

00:04:24,520 --> 00:04:30,610
can be interesting we handle things like

00:04:28,720 --> 00:04:32,830
configuration looking transactions

00:04:30,610 --> 00:04:36,640
validation and so on in the core module

00:04:32,830 --> 00:04:39,460
so it's a base for everything but we use

00:04:36,640 --> 00:04:43,060
Google juice for dependency injection so

00:04:39,460 --> 00:04:45,550
we have a strongly typed dependency

00:04:43,060 --> 00:04:49,180
injection we don't use a spring inside

00:04:45,550 --> 00:04:53,020
this framework it's it's completely not

00:04:49,180 --> 00:04:57,040
based on spring and for security we use

00:04:53,020 --> 00:05:00,670
a pasture Shiro we have on the website

00:04:57,040 --> 00:05:05,770
the things we have under to embedded

00:05:00,670 --> 00:05:07,990
server & Jazzy to for REST API so we

00:05:05,770 --> 00:05:11,020
have support for media and web sockets

00:05:07,990 --> 00:05:13,180
if you need and we have a lot of

00:05:11,020 --> 00:05:15,340
extensions that we developed over the

00:05:13,180 --> 00:05:19,570
years like the business framework which

00:05:15,340 --> 00:05:21,700
is a the subject of this presentation

00:05:19,570 --> 00:05:26,260
the main subject we will see that just

00:05:21,700 --> 00:05:28,450
after and more than 30 add-ons for

00:05:26,260 --> 00:05:33,280
various technologies and we provide some

00:05:28,450 --> 00:05:36,190
tooling like your generator a packager

00:05:33,280 --> 00:05:38,290
and some development tools like live

00:05:36,190 --> 00:05:42,430
live reloading of the application and so

00:05:38,290 --> 00:05:46,600
on so as you can see in the lower left

00:05:42,430 --> 00:05:49,180
corner I have displayed the three

00:05:46,600 --> 00:05:51,540
versions of this year we provide three

00:05:49,180 --> 00:05:55,720
major versions of seed stack barrier and

00:05:51,540 --> 00:05:59,380
we have some minor versions between them

00:05:55,720 --> 00:06:04,630
but we have a fixed schedule of

00:05:59,380 --> 00:06:07,210
releasing in April July and November so

00:06:04,630 --> 00:06:10,090
domain driven design so it's a it's a

00:06:07,210 --> 00:06:13,400
main part of the framework also there

00:06:10,090 --> 00:06:16,620
there are some a lot of technologies and

00:06:13,400 --> 00:06:19,410
technologic add-ins it's a domain-driven

00:06:16,620 --> 00:06:23,120
design that sets it apart from other

00:06:19,410 --> 00:06:25,470
frameworks so it's a software approach

00:06:23,120 --> 00:06:28,740
which is focused on solving business

00:06:25,470 --> 00:06:32,730
problems but with code not with only

00:06:28,740 --> 00:06:36,240
with code and design and so you have to

00:06:32,730 --> 00:06:39,470
part of the domain-driven design method

00:06:36,240 --> 00:06:43,560
you have the strategic design which is

00:06:39,470 --> 00:06:46,500
which exists to to address high level

00:06:43,560 --> 00:06:50,040
high level organization considerations

00:06:46,500 --> 00:06:52,830
like which which domain I have in my

00:06:50,040 --> 00:06:56,430
company how do they relate and so on and

00:06:52,830 --> 00:06:58,640
the tactical design which we focus on in

00:06:56,430 --> 00:07:02,040
the framework because it's proposed

00:06:58,640 --> 00:07:05,370
pratik practical pattern to write

00:07:02,040 --> 00:07:07,860
software so you have patterns for

00:07:05,370 --> 00:07:12,620
creation patterns for persistence and so

00:07:07,860 --> 00:07:16,680
on so it is implemented in the framework

00:07:12,620 --> 00:07:19,350
so the framework will detect those

00:07:16,680 --> 00:07:21,480
patterns and will provide building

00:07:19,350 --> 00:07:24,420
blocks that you can use and extend to

00:07:21,480 --> 00:07:27,390
build your own business logic around

00:07:24,420 --> 00:07:30,570
this pattern and we will automate the

00:07:27,390 --> 00:07:32,580
recurrent task that comes with the

00:07:30,570 --> 00:07:37,290
domain driven design like object mapping

00:07:32,580 --> 00:07:39,420
and so on so to to follow the tradition

00:07:37,290 --> 00:07:41,250
I have some other world but it is a

00:07:39,420 --> 00:07:45,120
quite sophisticated hello world yeah

00:07:41,250 --> 00:07:47,580
because I want to to show at least as a

00:07:45,120 --> 00:07:52,800
service so you can see here that you

00:07:47,580 --> 00:07:56,850
have a Java class which is rest resource

00:07:52,800 --> 00:08:00,060
exposed on slash hello and it will

00:07:56,850 --> 00:08:03,450
inject service that you can see here

00:08:00,060 --> 00:08:05,340
with some juice dependency injection the

00:08:03,450 --> 00:08:07,020
service is declared here it could be in

00:08:05,340 --> 00:08:11,610
another file but I have put everything

00:08:07,020 --> 00:08:13,740
in this place this service is just an

00:08:11,610 --> 00:08:16,350
interface that you implement you can

00:08:13,740 --> 00:08:18,870
have multiple implementations and you

00:08:16,350 --> 00:08:22,110
inject it and use it like that so that's

00:08:18,870 --> 00:08:26,670
the only code needed to have a rest

00:08:22,110 --> 00:08:29,700
resource exposed on /hello which is

00:08:26,670 --> 00:08:33,470
injecting a web service and domain

00:08:29,700 --> 00:08:35,760
driven design service and so on so it's

00:08:33,470 --> 00:08:38,490
the framework will detect that and

00:08:35,760 --> 00:08:42,180
automatically do the initialization the

00:08:38,490 --> 00:08:44,660
configuration of every every part that's

00:08:42,180 --> 00:08:50,400
needed to make it work

00:08:44,660 --> 00:08:54,180
so by talking about the services it's

00:08:50,400 --> 00:08:57,690
one of the pattern so we have a lot of

00:08:54,180 --> 00:09:01,040
patterns implemented each one has its

00:08:57,690 --> 00:09:04,910
own use in the domain driven design

00:09:01,040 --> 00:09:09,210
approach so for modeling we have

00:09:04,910 --> 00:09:14,520
entities which you model your business

00:09:09,210 --> 00:09:16,560
object with object with an identity

00:09:14,520 --> 00:09:18,810
you also have value object without

00:09:16,560 --> 00:09:20,490
identity like an address for instance or

00:09:18,810 --> 00:09:24,110
a zip code

00:09:20,490 --> 00:09:28,310
we have aggregate to use to group

00:09:24,110 --> 00:09:32,370
entities and value object into current

00:09:28,310 --> 00:09:35,370
aggregate and in group we have

00:09:32,370 --> 00:09:39,420
specifications to do some query or to do

00:09:35,370 --> 00:09:43,470
some matching of business object and for

00:09:39,420 --> 00:09:45,300
the behavior part we have the factories

00:09:43,470 --> 00:09:49,670
the repositories of services the

00:09:45,300 --> 00:09:52,650
policies and events patterns which all

00:09:49,670 --> 00:09:55,050
can be used to implement some logic some

00:09:52,650 --> 00:09:57,780
business logic so for factory you have

00:09:55,050 --> 00:10:00,960
the creation logic repositories handle

00:09:57,780 --> 00:10:03,480
the persistence and so on so everything

00:10:00,960 --> 00:10:08,010
is based on interfaces and annotations

00:10:03,480 --> 00:10:10,640
so you annotate some interface or class

00:10:08,010 --> 00:10:13,980
and the framework will recognize it and

00:10:10,640 --> 00:10:17,070
and do something with it so for

00:10:13,980 --> 00:10:19,490
interfaces were to the outside world of

00:10:17,070 --> 00:10:22,500
your business we have assembler which

00:10:19,490 --> 00:10:25,140
encapsulate object mapping from the in

00:10:22,500 --> 00:10:28,110
Armadale to the outside world and the

00:10:25,140 --> 00:10:32,490
paginate are to do some quick pagination

00:10:28,110 --> 00:10:34,439
and things that are very often needed in

00:10:32,490 --> 00:10:37,360
business applications

00:10:34,439 --> 00:10:39,790
so like I said before the business

00:10:37,360 --> 00:10:43,230
framework implements patterns using

00:10:39,790 --> 00:10:47,860
annotations interfaces and based classes

00:10:43,230 --> 00:10:52,209
you choose the one you the level you

00:10:47,860 --> 00:10:54,279
want obviously if you if you extend base

00:10:52,209 --> 00:10:56,860
classes you are more coupled to the free

00:10:54,279 --> 00:10:59,739
market then only using annotations but

00:10:56,860 --> 00:11:04,089
you also benefit from our automation and

00:10:59,739 --> 00:11:06,999
quit your development so patterns are

00:11:04,089 --> 00:11:10,149
our strong link type we use generics for

00:11:06,999 --> 00:11:12,839
that so they can be automatically

00:11:10,149 --> 00:11:15,670
detected and they can be injected

00:11:12,839 --> 00:11:18,850
everywhere anywhere you want them like

00:11:15,670 --> 00:11:22,269
in a rest resource we saw before so you

00:11:18,850 --> 00:11:25,839
can see here some injection like here we

00:11:22,269 --> 00:11:28,209
inject a repository of customers this

00:11:25,839 --> 00:11:30,309
one is qualified within memory so we

00:11:28,209 --> 00:11:33,189
have just a map in memory of customers

00:11:30,309 --> 00:11:35,589
but we can Caliph qualify it with GPA if

00:11:33,189 --> 00:11:39,009
you have some relational database

00:11:35,589 --> 00:11:42,029
containing customers or MongoDB or so on

00:11:39,009 --> 00:11:45,100
so it depends on the add-ons you use and

00:11:42,029 --> 00:11:47,139
and which and where you want to put your

00:11:45,100 --> 00:11:50,410
customers so we have the same four

00:11:47,139 --> 00:11:53,259
factories and some seven services and so

00:11:50,410 --> 00:11:56,169
on you can see we always inject things

00:11:53,259 --> 00:12:01,179
by type and use them directly anywhere

00:11:56,169 --> 00:12:04,829
we want so we also provide automation

00:12:01,179 --> 00:12:07,660
for boilerplate code like pagination

00:12:04,829 --> 00:12:10,360
translation of specifications into

00:12:07,660 --> 00:12:14,079
database queries because we want to

00:12:10,360 --> 00:12:17,769
match maybe VIP customers and VIP

00:12:14,079 --> 00:12:19,959
customers to fetch them we have to have

00:12:17,769 --> 00:12:21,610
to make a specific query for the

00:12:19,959 --> 00:12:24,759
database but the framework can do that

00:12:21,610 --> 00:12:26,739
automatically and we have some object

00:12:24,759 --> 00:12:31,119
mapping strategies so we can not put a

00:12:26,739 --> 00:12:34,419
matically domain object to DTU and so on

00:12:31,119 --> 00:12:37,839
so I have an example here that brings in

00:12:34,419 --> 00:12:40,029
this all together but it may be quite

00:12:37,839 --> 00:12:43,179
complex especially if you don't

00:12:40,029 --> 00:12:44,850
understand Java but you can see here

00:12:43,179 --> 00:12:48,010
that we have some

00:12:44,850 --> 00:12:52,140
domain-specific language to do that you

00:12:48,010 --> 00:12:55,840
can see here that we assemble a page

00:12:52,140 --> 00:12:58,800
with some parameters a page of of

00:12:55,840 --> 00:13:02,560
customers which are matching a

00:12:58,800 --> 00:13:05,320
specification a VIP customer spec with

00:13:02,560 --> 00:13:08,320
some parameter and we provide a page of

00:13:05,320 --> 00:13:11,080
the two of that so that that does

00:13:08,320 --> 00:13:15,160
everything in a one-liner but you can

00:13:11,080 --> 00:13:16,540
also split them and use each one like

00:13:15,160 --> 00:13:22,420
you like you need in your business

00:13:16,540 --> 00:13:25,480
application so that's a part of of what

00:13:22,420 --> 00:13:28,420
the business framework can do in seed

00:13:25,480 --> 00:13:32,590
stack so it can do that with every

00:13:28,420 --> 00:13:35,920
technology you want you just have to use

00:13:32,590 --> 00:13:39,120
the right add-on to to integrate your

00:13:35,920 --> 00:13:42,700
profile preferred database or or

00:13:39,120 --> 00:13:49,470
anything you you want so I would like to

00:13:42,700 --> 00:13:53,490
give you a quick demo if I can so let's

00:13:49,470 --> 00:13:57,720
let's go to the website so we have here

00:13:53,490 --> 00:14:03,250
the command line to generate a project

00:13:57,720 --> 00:14:07,840
so I have run the generator and I can

00:14:03,250 --> 00:14:14,070
choose which type of project I want so I

00:14:07,840 --> 00:14:18,730
will generate a web project and I won't

00:14:14,070 --> 00:14:23,530
use any integration of persistence not

00:14:18,730 --> 00:14:27,400
no UI not okay so I have here a project

00:14:23,530 --> 00:14:33,240
that is generated I can open it in my

00:14:27,400 --> 00:14:33,240
development I run environment quickly

00:14:34,430 --> 00:14:47,830
I think it's not here it's in my project

00:14:48,580 --> 00:15:13,400
temp yes here okay select it import the

00:15:04,100 --> 00:15:18,220
project so you can see here that we have

00:15:13,400 --> 00:15:21,830
a basic structure of a maven project and

00:15:18,220 --> 00:15:24,440
with some other world resource I can

00:15:21,830 --> 00:15:27,080
show you there

00:15:24,440 --> 00:15:30,230
we have a standard structure that is

00:15:27,080 --> 00:15:34,160
shared by all project and we have just a

00:15:30,230 --> 00:15:37,130
basic hello world father for this it is

00:15:34,160 --> 00:15:41,660
really basic so from there you can write

00:15:37,130 --> 00:15:45,670
classes like we saw before you can

00:15:41,660 --> 00:15:49,640
integrate add-ons just by adding their

00:15:45,670 --> 00:15:52,190
dependency in the in the maven pom file

00:15:49,640 --> 00:15:55,090
you can see that we use a business from

00:15:52,190 --> 00:15:57,680
our we add some aid add-on to do

00:15:55,090 --> 00:16:01,120
automatic mapping and so on you just add

00:15:57,680 --> 00:16:04,910
them and they are automatically add

00:16:01,120 --> 00:16:07,840
working directly so I can run that from

00:16:04,910 --> 00:16:16,160
the command line with the seed stack

00:16:07,840 --> 00:16:19,220
plug-in I just to run and it will run my

00:16:16,160 --> 00:16:23,780
application I can switch to watch mode

00:16:19,220 --> 00:16:26,510
to have it reload automatically and and

00:16:23,780 --> 00:16:32,540
from there you have a basic hello world

00:16:26,510 --> 00:16:37,370
and major projects at PSA are built with

00:16:32,540 --> 00:16:42,110
this with this framework from this small

00:16:37,370 --> 00:16:46,950
heroine start to huge project with

00:16:42,110 --> 00:16:50,810
thousands and thousands of lines so they

00:16:46,950 --> 00:16:50,810
all use the domain-driven design

00:16:51,170 --> 00:17:00,480
approach and they build and sit stag to

00:16:55,190 --> 00:17:08,360
to make project

00:17:00,480 --> 00:17:14,100
Java project in at PSA so thank you for

00:17:08,360 --> 00:17:17,450
listening if you have any question I'm

00:17:14,100 --> 00:17:21,390
available just after this presentation

00:17:17,450 --> 00:17:25,230
to remind you that sit stack is is an

00:17:21,390 --> 00:17:27,420
open-source project under the WebGL

00:17:25,230 --> 00:17:32,070
license so it's business friendly you

00:17:27,420 --> 00:17:37,350
can use it for your own project without

00:17:32,070 --> 00:17:40,590
being afraid of license problems and you

00:17:37,350 --> 00:17:43,200
can use it and contribute to it if you

00:17:40,590 --> 00:17:44,310
if you feel like it so thank you

00:17:43,200 --> 00:17:50,339
everyone

00:17:44,310 --> 00:17:50,339

YouTube URL: https://www.youtube.com/watch?v=4CTOV6AaGHk


