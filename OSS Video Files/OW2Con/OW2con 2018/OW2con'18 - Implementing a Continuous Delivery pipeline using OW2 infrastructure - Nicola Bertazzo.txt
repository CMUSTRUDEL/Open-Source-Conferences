Title: OW2con'18 - Implementing a Continuous Delivery pipeline using OW2 infrastructure - Nicola Bertazzo
Publication date: 2018-06-13
Playlist: OW2con 2018
Description: 
	Not sure how to get started with DevOps and Continuous Delivery? This presentation offers a practical example of these practices being implemented on the GitLab instance provided by OW2 Infrastructure, giving some guidelines and best practices that will help you adopt them in your projects.
Captions: 
	00:00:00,030 --> 00:00:13,049
I know everybody my name is Nicola Berta

00:00:09,269 --> 00:00:15,809
so I'm from engineering group and today

00:00:13,049 --> 00:00:18,600
I'm here to show you how to implement

00:00:15,809 --> 00:00:23,850
continuous delivery using the owt

00:00:18,600 --> 00:00:26,130
infrastructure I am the team leader of

00:00:23,850 --> 00:00:28,380
Spago 4q project that is a free

00:00:26,130 --> 00:00:31,080
open-source platform to measure and

00:00:28,380 --> 00:00:35,190
analyze monitor the quality of product

00:00:31,080 --> 00:00:37,770
process and services and I work for

00:00:35,190 --> 00:00:41,129
engineering group for a 10 year as a

00:00:37,770 --> 00:00:44,730
project automation consultant and the

00:00:41,129 --> 00:00:48,750
whoops consultant in the last two years

00:00:44,730 --> 00:00:53,340
I work with Daniella Gilardi on stem

00:00:48,750 --> 00:00:57,149
project would be for the package and in

00:00:53,340 --> 00:01:00,000
this project I study how to implement

00:00:57,149 --> 00:01:03,629
continuous delivery using auto brooch

00:01:00,000 --> 00:01:08,010
infrastructure because what w2 is part

00:01:03,629 --> 00:01:10,049
of this project so I think that

00:01:08,010 --> 00:01:13,140
everybody know what is a continuous

00:01:10,049 --> 00:01:15,390
integration continue can find the

00:01:13,140 --> 00:01:19,220
definition of a Martin folder that is

00:01:15,390 --> 00:01:22,080
the one of founder of agile manifesto

00:01:19,220 --> 00:01:25,710
continuous integration is a practice of

00:01:22,080 --> 00:01:29,810
extreme programming where the developer

00:01:25,710 --> 00:01:34,009
team integrate their work more

00:01:29,810 --> 00:01:39,720
frequently usually more than once a day

00:01:34,009 --> 00:01:42,560
normally every commit trigger process

00:01:39,720 --> 00:01:46,200
that the build and test the product I

00:01:42,560 --> 00:01:49,890
think that most of you use a continuous

00:01:46,200 --> 00:01:53,490
integration using github now get low

00:01:49,890 --> 00:01:56,189
using Jenkins but Jenkins is not the

00:01:53,490 --> 00:01:59,280
only one tools to use to implement

00:01:56,189 --> 00:02:01,799
continuous integration the evolution of

00:01:59,280 --> 00:02:05,340
continuous integration is the continuous

00:02:01,799 --> 00:02:09,259
delivery that is practice of extreme

00:02:05,340 --> 00:02:12,480
programming where the development team

00:02:09,259 --> 00:02:13,360
prioritize is worker to keeping their

00:02:12,480 --> 00:02:17,350
product the

00:02:13,360 --> 00:02:20,850
readable over working on your feature so

00:02:17,350 --> 00:02:23,920
every time we have a product that is

00:02:20,850 --> 00:02:26,590
potentially the pre able to production

00:02:23,920 --> 00:02:29,290
environment and we implementing this

00:02:26,590 --> 00:02:32,440
practice is useful because everyone in

00:02:29,290 --> 00:02:37,810
the team pushing a button can deploy the

00:02:32,440 --> 00:02:40,540
product to the environment so in this

00:02:37,810 --> 00:02:44,440
chart you can see the difference between

00:02:40,540 --> 00:02:50,010
continuous integration that is the first

00:02:44,440 --> 00:02:52,900
part the blue one were in the server a

00:02:50,010 --> 00:02:57,160
continuous integration server check out

00:02:52,900 --> 00:03:00,070
the code build and execute Union test we

00:02:57,160 --> 00:03:03,520
can implement it using our continuous

00:03:00,070 --> 00:03:05,410
integration server like Jenkins and the

00:03:03,520 --> 00:03:07,060
next step is implementing continuous

00:03:05,410 --> 00:03:10,300
delivery to implement the continuous

00:03:07,060 --> 00:03:14,110
delivery we have to define a pipeline so

00:03:10,300 --> 00:03:17,080
a sequence of steps that can be executed

00:03:14,110 --> 00:03:20,380
in more than one environment so in this

00:03:17,080 --> 00:03:23,560
example you can see that after the build

00:03:20,380 --> 00:03:26,709
and test of the project we will deploy

00:03:23,560 --> 00:03:31,150
the project in a staged environment

00:03:26,709 --> 00:03:35,650
where we can perform some accept on test

00:03:31,150 --> 00:03:38,610
this pipeline is triggered every commit

00:03:35,650 --> 00:03:40,690
of the code and the difference between

00:03:38,610 --> 00:03:43,510
continuous delivery a continuous

00:03:40,690 --> 00:03:47,049
deployment is that in the continuous

00:03:43,510 --> 00:03:49,930
delivery you choose when you want to

00:03:47,049 --> 00:03:53,200
deploy the product and you can fire this

00:03:49,930 --> 00:03:55,290
deployment pushing a button in the

00:03:53,200 --> 00:03:58,450
continuous deployment everything is

00:03:55,290 --> 00:04:03,940
automatically and it's a practice that

00:03:58,450 --> 00:04:11,350
is done by Netflix and Facebook and the

00:04:03,940 --> 00:04:15,310
the main big company okay so to

00:04:11,350 --> 00:04:18,459
implement this practice these are the

00:04:15,310 --> 00:04:20,560
three main requirement we need to have

00:04:18,459 --> 00:04:23,770
the source code in a source code

00:04:20,560 --> 00:04:27,260
management system we need that our

00:04:23,770 --> 00:04:31,160
project is build with the autumn

00:04:27,260 --> 00:04:35,260
script so this these scripts can run in

00:04:31,160 --> 00:04:39,590
the local machine and also in the

00:04:35,260 --> 00:04:45,580
conserver and we need a server and sled

00:04:39,590 --> 00:04:51,280
to perform this automatic script so now

00:04:45,580 --> 00:04:53,660
I show you that this requirement is

00:04:51,280 --> 00:04:56,570
supported by the auto glitch

00:04:53,660 --> 00:05:01,130
infrastructure I think that every one of

00:04:56,570 --> 00:05:04,760
you that as a product in w-2 ecosystem

00:05:01,130 --> 00:05:07,250
use this infrastructure and you can see

00:05:04,760 --> 00:05:10,430
that there is a lot of tool that we can

00:05:07,250 --> 00:05:15,050
use to support the development of

00:05:10,430 --> 00:05:16,460
product and we can find github gitlab

00:05:15,050 --> 00:05:20,420
nexus sonarqube

00:05:16,460 --> 00:05:25,250
x wiki and so on today I will focus to

00:05:20,420 --> 00:05:28,340
MIT lab and get lab is not only a source

00:05:25,250 --> 00:05:32,380
code management system but it has also a

00:05:28,340 --> 00:05:38,900
shoe tracker inside and also on

00:05:32,380 --> 00:05:43,520
automation server and sleeve so today I

00:05:38,900 --> 00:05:46,220
show you a demo where I will use github

00:05:43,520 --> 00:05:51,650
of audibility infrastructure to

00:05:46,220 --> 00:05:54,380
implement continuous delivery so what we

00:05:51,650 --> 00:05:58,490
can say it and I will prove with my demo

00:05:54,380 --> 00:06:02,240
that is the infrastructure or W to allow

00:05:58,490 --> 00:06:06,310
us to implement continuous delivery so

00:06:02,240 --> 00:06:11,000
now it's demo time I record the the

00:06:06,310 --> 00:06:14,240
execution and I will show you simple

00:06:11,000 --> 00:06:18,920
java web application where this

00:06:14,240 --> 00:06:22,850
application display a message and these

00:06:18,920 --> 00:06:25,190
release as a docker container here you

00:06:22,850 --> 00:06:27,410
can find the pipeline that I implemented

00:06:25,190 --> 00:06:30,590
using the other between from structure

00:06:27,410 --> 00:06:33,320
so this pipeline is composed of four

00:06:30,590 --> 00:06:36,050
stage the base stage where I will check

00:06:33,320 --> 00:06:39,980
out the source code I will build the

00:06:36,050 --> 00:06:42,310
code using maven and script and I will

00:06:39,980 --> 00:06:42,310
execute

00:06:42,470 --> 00:06:47,840
unit test this is the the continuous

00:06:45,320 --> 00:06:51,740
integration part after that I will

00:06:47,840 --> 00:06:55,430
execute and publish the docker image of

00:06:51,740 --> 00:06:57,740
my application and I will deploy this

00:06:55,430 --> 00:07:00,290
image in staging environment and

00:06:57,740 --> 00:07:03,080
production environment you can imagine

00:07:00,290 --> 00:07:07,669
that this tile at this stage will

00:07:03,080 --> 00:07:12,460
execute in different environment so we

00:07:07,669 --> 00:07:15,590
need to configure at least four agents

00:07:12,460 --> 00:07:19,490
one agent to implement the continuous

00:07:15,590 --> 00:07:23,870
integration the green one maven three

00:07:19,490 --> 00:07:26,240
three nine one engine that build the

00:07:23,870 --> 00:07:30,139
image and publish the image in the

00:07:26,240 --> 00:07:34,070
repository and one agent for every

00:07:30,139 --> 00:07:39,169
environment to deploy this image as a

00:07:34,070 --> 00:07:42,790
container in the target environment so I

00:07:39,169 --> 00:07:42,790
will show you how to do that

00:07:56,740 --> 00:08:05,090
okay this is our infrastructure is that

00:08:01,759 --> 00:08:08,240
the W to get instance this is a demo

00:08:05,090 --> 00:08:12,970
project that I used for this purpose and

00:08:08,240 --> 00:08:17,509
in the setting you can find the C CD

00:08:12,970 --> 00:08:20,780
menu in this menu you can go to around

00:08:17,509 --> 00:08:25,009
settings render settings where you can

00:08:20,780 --> 00:08:27,470
find all the information to configure

00:08:25,009 --> 00:08:33,560
the audit that we need to implement the

00:08:27,470 --> 00:08:35,419
continuous delivery pipeline so here you

00:08:33,560 --> 00:08:39,339
can find all the information that you

00:08:35,419 --> 00:08:44,450
need to set up the agent so you need to

00:08:39,339 --> 00:08:47,089
execute github Runner and configure the

00:08:44,450 --> 00:08:51,250
agent now I will show you that I

00:08:47,089 --> 00:08:54,800
configure only two agent one agent is

00:08:51,250 --> 00:08:57,350
the first one that that I would use to

00:08:54,800 --> 00:09:02,450
perform the continuous integration part

00:08:57,350 --> 00:09:07,940
and I will use the information that you

00:09:02,450 --> 00:09:13,730
can find in the audibility website okay

00:09:07,940 --> 00:09:17,209
I put a description of my agent that is

00:09:13,730 --> 00:09:22,250
a million 339 and the more important

00:09:17,209 --> 00:09:27,579
part is to you assign a tag that I will

00:09:22,250 --> 00:09:27,579
use in the definition of the pipeline I

00:09:30,790 --> 00:09:40,209
will choose that the agent is a docker

00:09:35,779 --> 00:09:40,209
image and will run as a container

00:09:44,810 --> 00:09:53,650
and I use maven 3 3 9 JDK 8 as image to

00:09:50,480 --> 00:09:56,960
perform the continuous integration part

00:09:53,650 --> 00:10:01,100
after that I will configure another

00:09:56,960 --> 00:10:08,980
agent to build the publish and deploy

00:10:01,100 --> 00:10:08,980
the the docker image of my application

00:10:13,990 --> 00:10:31,250
so I call that is agent dr. build and I

00:10:22,370 --> 00:10:33,800
will assign 4 tags that is the tags that

00:10:31,250 --> 00:10:39,260
I will used to implement the four stage

00:10:33,800 --> 00:10:43,400
that I show before this agent I run in

00:10:39,260 --> 00:10:45,500
my local machine and will use the tools

00:10:43,400 --> 00:10:49,010
that is present on my local machine so I

00:10:45,500 --> 00:10:52,600
use it as I configured it as a shell so

00:10:49,010 --> 00:10:56,980
now I configure these two agents and

00:10:52,600 --> 00:11:03,730
these two agents we can find that is the

00:10:56,980 --> 00:11:03,730
present also in the github or w2 website

00:11:05,620 --> 00:11:14,210
ok yeah you can see docker build and

00:11:10,640 --> 00:11:24,320
maybe in three three nine so now we are

00:11:14,210 --> 00:11:25,880
ready to define the pipeline okay

00:11:24,320 --> 00:11:30,110
the definition of pipeline is very

00:11:25,880 --> 00:11:33,530
simple and I described before in the

00:11:30,110 --> 00:11:36,100
Maven 339 agent I will execute the

00:11:33,530 --> 00:11:40,460
continuous integration part so I will

00:11:36,100 --> 00:11:43,910
package the the project in the docker

00:11:40,460 --> 00:11:46,970
build I will perform the build of the

00:11:43,910 --> 00:11:51,860
docker image and I will push in our

00:11:46,970 --> 00:11:57,560
registry after that I will use a docker

00:11:51,860 --> 00:11:58,300
da Koran to push to check them the image

00:11:57,560 --> 00:12:01,250
and

00:11:58,300 --> 00:12:05,149
around as a container in the staging

00:12:01,250 --> 00:12:13,940
environment all this information is

00:12:05,149 --> 00:12:14,389
define in the github project in a simple

00:12:13,940 --> 00:12:18,980
file

00:12:14,389 --> 00:12:22,129
DML file where you can define as in a

00:12:18,980 --> 00:12:23,959
github in Jenkins pipeline the

00:12:22,129 --> 00:12:26,329
configuration I have the code of our

00:12:23,959 --> 00:12:33,230
pipeline that were I define the first

00:12:26,329 --> 00:12:37,519
age and I execute this script that I

00:12:33,230 --> 00:12:42,019
described before in the agent with tag

00:12:37,519 --> 00:12:45,800
maven 3 3 9 after that I will execute

00:12:42,019 --> 00:12:48,920
the registry in the agent tag docker

00:12:45,800 --> 00:12:52,449
build and I will build the image after

00:12:48,920 --> 00:12:56,629
that I will deploy the image in the

00:12:52,449 --> 00:13:02,959
staging and only for the master branch I

00:12:56,629 --> 00:13:06,350
will display a mono step that ask for a

00:13:02,959 --> 00:13:11,569
deploy to production so we have defined

00:13:06,350 --> 00:13:15,699
the pipeline now we are at the we can

00:13:11,569 --> 00:13:15,699
see the is a crucian of the pipeline

00:13:26,720 --> 00:13:32,040
okay so now in there is a question of

00:13:29,430 --> 00:13:38,480
what of pipeline I will change my

00:13:32,040 --> 00:13:38,480
application so I will change a file

00:13:38,570 --> 00:13:46,769
well I will change the default name and

00:13:43,620 --> 00:13:51,180
my application will display this name so

00:13:46,769 --> 00:13:55,399
i will change the file name to w2

00:13:51,180 --> 00:14:00,000
con 2080

00:13:55,399 --> 00:14:05,750
after that I will commit this change in

00:14:00,000 --> 00:14:05,750
a new branch that is a hello w2 branch

00:14:09,589 --> 00:14:23,029
okay and I ask Marty request to the

00:14:17,040 --> 00:14:26,070
master branch okay before to perform the

00:14:23,029 --> 00:14:32,000
finish the merger request you can see

00:14:26,070 --> 00:14:32,000
here that the pipeline is starting and

00:14:32,180 --> 00:14:42,990
as you can see here you is performing

00:14:39,899 --> 00:14:46,820
only twisted because we are not in the

00:14:42,990 --> 00:14:56,459
master branch but is in the hello branch

00:14:46,820 --> 00:15:02,329
so now it is a cute the it compiled and

00:14:56,459 --> 00:15:12,800
test my application in the Maven 3 3 9

00:15:02,329 --> 00:15:18,570
agent after that he published the

00:15:12,800 --> 00:15:25,680
artifact to the docker to the github

00:15:18,570 --> 00:15:31,310
instance we create the build the image

00:15:25,680 --> 00:15:31,310
and publish the image to the registry

00:15:35,059 --> 00:15:49,479
and after that it will deploy the

00:15:43,819 --> 00:15:49,479
application to the staging environment

00:15:51,489 --> 00:16:04,519
okay so as you can see the pipeline is

00:16:00,019 --> 00:16:08,389
acute in the right way and the state is

00:16:04,519 --> 00:16:11,869
passive and now in the environment

00:16:08,389 --> 00:16:15,589
section we can see that we have the

00:16:11,869 --> 00:16:16,759
deploy the the application in the

00:16:15,589 --> 00:16:20,329
staging environment

00:16:16,759 --> 00:16:28,989
so we can see that the application as

00:16:20,329 --> 00:16:28,989
the default name allah o w con 2018 okay

00:16:31,629 --> 00:16:40,759
so now we have seen the first as a

00:16:35,749 --> 00:16:44,119
cushion of the pipeline and now when we

00:16:40,759 --> 00:16:50,209
finish integrate the daily quest in the

00:16:44,119 --> 00:16:53,269
master branch okay we will see there is

00:16:50,209 --> 00:16:57,229
a crucial of the full pipeline so also

00:16:53,269 --> 00:17:01,099
the production part and it's very

00:16:57,229 --> 00:17:08,419
similar of the step that you I just show

00:17:01,099 --> 00:17:13,850
to you okay the pipeline is starting in

00:17:08,419 --> 00:17:16,759
the master and as you can see we have

00:17:13,850 --> 00:17:19,459
four stage not only the tree as before

00:17:16,759 --> 00:17:21,949
we have the build the registry they

00:17:19,459 --> 00:17:27,860
deploy to staging and deploy to

00:17:21,949 --> 00:17:30,860
production so now it is execute I speed

00:17:27,860 --> 00:17:33,190
up in the video because they take some

00:17:30,860 --> 00:17:33,190
minutes

00:17:36,510 --> 00:17:46,169
okay at the end we have the play button

00:17:40,200 --> 00:17:56,240
that a Lhasa to publish the image as a

00:17:46,169 --> 00:17:56,240
container in production environment okay

00:17:56,299 --> 00:18:04,380
after that we have a performer the the

00:18:01,980 --> 00:18:06,059
last step of the pipeline and we have

00:18:04,380 --> 00:18:11,460
published the application production

00:18:06,059 --> 00:18:16,230
environment so as I show to you in this

00:18:11,460 --> 00:18:19,350
demo I am I'm using the feature of

00:18:16,230 --> 00:18:25,410
github that is present in the audibly to

00:18:19,350 --> 00:18:28,950
infrastructure and we can use this

00:18:25,410 --> 00:18:32,490
gitlab to implement continuous delivery

00:18:28,950 --> 00:18:35,970
in our project so it's very cool for us

00:18:32,490 --> 00:18:50,130
and we will integrate all the stamp

00:18:35,970 --> 00:18:55,370
tools also in in this pipeline so I

00:18:50,130 --> 00:18:55,370
finish thank you for your attention

00:18:57,860 --> 00:19:01,740

YouTube URL: https://www.youtube.com/watch?v=93I8dm9E4t0


