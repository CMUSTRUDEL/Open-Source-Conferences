Title: OW2con'18 - Applied Security for Containers - Jesus Escolar
Publication date: 2018-06-13
Playlist: OW2con 2018
Description: 
	Thereâ€™s a constant rise of the container usage in the existing cloud ecosystem.
Most companies are evaluating how to migrate to newer, flexible and automated platform for content and application delivery.
The containers are building themselves alone across the business, but who's securing them?
We will discuss the evolution of infrastructure solutions from servers to containers.
We will discuss about how can they be secured.
What opensource security options are available today?
Where is the future leading towards container security?
What will come after containers?
Captions: 
	00:00:01,960 --> 00:00:05,420
[Music]

00:00:05,629 --> 00:00:10,500
so um the first thing is the

00:00:08,220 --> 00:00:12,590
presentation is to come on pair so thank

00:00:10,500 --> 00:00:15,299
you very much for being here

00:00:12,590 --> 00:00:18,359
my name is josue escolar i'm the CEO of

00:00:15,299 --> 00:00:21,930
excel arees we are a company built after

00:00:18,359 --> 00:00:24,960
a few years of investment in the

00:00:21,930 --> 00:00:26,910
security echo system and today we're

00:00:24,960 --> 00:00:28,859
going to talk about containers when I

00:00:26,910 --> 00:00:30,539
walk you through the container ecosystem

00:00:28,859 --> 00:00:33,630
and also I'm going to tell you what is

00:00:30,539 --> 00:00:35,730
available today our solutions that can

00:00:33,630 --> 00:00:38,370
provide security and also splitting them

00:00:35,730 --> 00:00:40,920
in the different types of security

00:00:38,370 --> 00:00:43,040
elements that we can process when we

00:00:40,920 --> 00:00:45,780
working with containers

00:00:43,040 --> 00:00:50,989
so first thing to understand is that we

00:00:45,780 --> 00:00:54,000
passed from the physical hardware or the

00:00:50,989 --> 00:00:56,219
bare metal where we started construct

00:00:54,000 --> 00:00:59,579
our applications and servers and we

00:00:56,219 --> 00:01:00,989
built on top of that virtualization with

00:00:59,579 --> 00:01:03,960
different solutions you can see the

00:01:00,989 --> 00:01:07,500
screen and also we moved into cloud

00:01:03,960 --> 00:01:10,740
cloud computing a later on we had a need

00:01:07,500 --> 00:01:13,040
to put all of these solutions that we

00:01:10,740 --> 00:01:14,340
were working with into a more

00:01:13,040 --> 00:01:17,130
compartmentalised

00:01:14,340 --> 00:01:20,570
and a more contained environment and

00:01:17,130 --> 00:01:23,310
that's how we came with the solution of

00:01:20,570 --> 00:01:24,900
containers and we build containers for

00:01:23,310 --> 00:01:27,240
two things we built containers for

00:01:24,900 --> 00:01:31,110
applications and also we build container

00:01:27,240 --> 00:01:33,840
to compute OSS operating systems and

00:01:31,110 --> 00:01:36,869
deploy them fast quick without the

00:01:33,840 --> 00:01:40,259
complexity of the virtualization and not

00:01:36,869 --> 00:01:43,439
so depending on vendors or manufacturers

00:01:40,259 --> 00:01:45,210
of specific types of hardware or SPC or

00:01:43,439 --> 00:01:47,909
specific types of virtualization

00:01:45,210 --> 00:01:50,430
solutions and the last evolution that

00:01:47,909 --> 00:01:52,439
we're going through now is function as a

00:01:50,430 --> 00:01:54,960
service which means instead of having to

00:01:52,439 --> 00:01:57,899
run those applications the applications

00:01:54,960 --> 00:02:00,270
already exist in your ecosystem and what

00:01:57,899 --> 00:02:02,460
you build is code in between those

00:02:00,270 --> 00:02:06,630
applications to extract from one

00:02:02,460 --> 00:02:08,520
specific service or provider an output

00:02:06,630 --> 00:02:11,129
and put it as an input with your

00:02:08,520 --> 00:02:13,890
transformation into another vendor or

00:02:11,129 --> 00:02:16,590
another solution and that's what we work

00:02:13,890 --> 00:02:21,120
Toula into containers and functions as a

00:02:16,590 --> 00:02:23,040
service so when we started talking about

00:02:21,120 --> 00:02:25,380
containers is something so new was when

00:02:23,040 --> 00:02:27,330
teresting and people is so excited today

00:02:25,380 --> 00:02:29,520
and there is a buzzword we all love

00:02:27,330 --> 00:02:31,380
booze words okay but then it comes to

00:02:29,520 --> 00:02:34,530
the reality containers started in the

00:02:31,380 --> 00:02:36,750
70s it didn't start yesterday didn't

00:02:34,530 --> 00:02:41,340
start five years ago so we started

00:02:36,750 --> 00:02:44,489
building isolation in the old mainframes

00:02:41,340 --> 00:02:46,500
with the old applications that we had at

00:02:44,489 --> 00:02:48,300
a time and that was the beginning of

00:02:46,500 --> 00:02:50,520
container isolate and that's the word

00:02:48,300 --> 00:02:53,550
that you need to keep today isolate and

00:02:50,520 --> 00:02:55,470
compartmentalized we evolved over the

00:02:53,550 --> 00:02:57,959
years so you see there is a lot of years

00:02:55,470 --> 00:02:59,910
in between 70 and 2000 before somebody

00:02:57,959 --> 00:03:03,390
came with the idea of doing the same

00:02:59,910 --> 00:03:07,590
thing at a higher scale later on we

00:03:03,390 --> 00:03:10,489
moved into creating a more better

00:03:07,590 --> 00:03:12,450
defying logic behind compartmentalized

00:03:10,489 --> 00:03:15,060
applications in the beginning was just

00:03:12,450 --> 00:03:17,459
compartmentalized shared resources and

00:03:15,060 --> 00:03:20,010
later on with Sun Microsystems we were

00:03:17,459 --> 00:03:23,040
able to create zones which was basically

00:03:20,010 --> 00:03:27,390
a way to isolate parts of the OS to

00:03:23,040 --> 00:03:29,910
actually provide ram disk access and CPU

00:03:27,390 --> 00:03:31,200
access to specific applications that was

00:03:29,910 --> 00:03:35,610
really the first time we had something

00:03:31,200 --> 00:03:38,910
and we could call a container then

00:03:35,610 --> 00:03:40,500
another time another period of dark ages

00:03:38,910 --> 00:03:43,290
were nobody really did too many things

00:03:40,500 --> 00:03:45,989
around it and we moved into openvz

00:03:43,290 --> 00:03:48,810
openvz was the first product that we

00:03:45,989 --> 00:03:54,000
could actually use to create many

00:03:48,810 --> 00:03:56,760
different instances of full pseudo OSS

00:03:54,000 --> 00:03:59,370
at the time only Linux and Linux at up

00:03:56,760 --> 00:04:01,470
to now where we could run different

00:03:59,370 --> 00:04:03,780
applications so for example ourselves

00:04:01,470 --> 00:04:06,420
myself as an individual I used it to

00:04:03,780 --> 00:04:09,000
create one of them in my computer where

00:04:06,420 --> 00:04:11,820
I could VPN through the internet and do

00:04:09,000 --> 00:04:14,670
a home to home private connection or for

00:04:11,820 --> 00:04:17,489
example to run an encapsulation of my

00:04:14,670 --> 00:04:19,829
traffic over DNS which is something that

00:04:17,489 --> 00:04:21,269
you shouldn't be doing but I did it just

00:04:19,829 --> 00:04:22,830
test it and to see how I could pass

00:04:21,269 --> 00:04:25,919
traffic from one point to the other

00:04:22,830 --> 00:04:27,900
using DNS and then obviously the big

00:04:25,919 --> 00:04:30,630
guys came into play

00:04:27,900 --> 00:04:33,600
Google said okay well I like the idea as

00:04:30,630 --> 00:04:35,010
they had thousands of engineers they

00:04:33,600 --> 00:04:35,790
said okay we're gonna build something

00:04:35,010 --> 00:04:38,310
more interesting we're gonna make

00:04:35,790 --> 00:04:40,050
something commercial free open and then

00:04:38,310 --> 00:04:42,210
commercial and they started with a

00:04:40,050 --> 00:04:44,520
concept of process containers where they

00:04:42,210 --> 00:04:46,889
actually isolated the whole logic and

00:04:44,520 --> 00:04:48,419
now we were getting close to the reality

00:04:46,889 --> 00:04:50,490
of the container something that you

00:04:48,419 --> 00:04:54,479
could actually play a home and playing

00:04:50,490 --> 00:04:57,690
the companies Google passed that to all

00:04:54,479 --> 00:05:01,440
these engineers that they took the code

00:04:57,690 --> 00:05:04,050
and they built the Linux containers the

00:05:01,440 --> 00:05:07,680
first time we had a real solution that

00:05:04,050 --> 00:05:10,169
we could use l XE Alex C is what you

00:05:07,680 --> 00:05:12,690
know today as Alex D if you ever work

00:05:10,169 --> 00:05:14,699
with containers and it's actually what

00:05:12,690 --> 00:05:18,960
is the basis for most of the containing

00:05:14,699 --> 00:05:22,260
ecosystem obviously behind that there

00:05:18,960 --> 00:05:25,169
was the need to create more tools tools

00:05:22,260 --> 00:05:28,979
that could actually provide capacity to

00:05:25,169 --> 00:05:30,990
be into the commercial space on and also

00:05:28,979 --> 00:05:32,400
into the organization's a few companies

00:05:30,990 --> 00:05:34,440
came after I'm not going to talk about

00:05:32,400 --> 00:05:35,789
the second one cloud foundry was good

00:05:34,440 --> 00:05:37,680
because they brought something very

00:05:35,789 --> 00:05:40,139
important an API so people could

00:05:37,680 --> 00:05:42,360
actually develop things remotely an

00:05:40,139 --> 00:05:44,970
access transform and change without

00:05:42,360 --> 00:05:47,070
having to know anything about the

00:05:44,970 --> 00:05:48,660
subsystems so they didn't have to go in

00:05:47,070 --> 00:05:52,590
the low level they could do it just with

00:05:48,660 --> 00:05:55,320
an API and in 2013 the holy grail came

00:05:52,590 --> 00:05:56,699
into place which is docker and I'm

00:05:55,320 --> 00:05:59,310
pretty sure that everybody here we never

00:05:56,699 --> 00:06:04,070
use containers put these DS in the IT or

00:05:59,310 --> 00:06:06,419
in any other type of area from computer

00:06:04,070 --> 00:06:08,849
computer systems knows about the world

00:06:06,419 --> 00:06:11,190
talker and doctor was or back-end to

00:06:08,849 --> 00:06:13,080
actually build the reality reality that

00:06:11,190 --> 00:06:15,060
we have now doctor brought something

00:06:13,080 --> 00:06:18,750
that nobody else did they brought an

00:06:15,060 --> 00:06:21,900
ecosystem similar to similar in logic as

00:06:18,750 --> 00:06:24,120
a metaphor to what Apple has done with

00:06:21,900 --> 00:06:26,760
the applications the rotor place to tell

00:06:24,120 --> 00:06:30,120
it to download and to actually recover

00:06:26,760 --> 00:06:32,190
images so if I need for example a web

00:06:30,120 --> 00:06:33,660
server I can choose from any of the

00:06:32,190 --> 00:06:35,610
images of the available web servers and

00:06:33,660 --> 00:06:37,409
get it installed in my dog hair

00:06:35,610 --> 00:06:39,210
implementation I just have to type a

00:06:37,409 --> 00:06:41,070
command and I get it I don't even need

00:06:39,210 --> 00:06:41,670
to think about it is just in the list

00:06:41,070 --> 00:06:44,640
and

00:06:41,670 --> 00:06:47,010
list is nearly eternal it never finishes

00:06:44,640 --> 00:06:49,680
it keeps on growing every day so that

00:06:47,010 --> 00:06:51,210
ability plus obviously all the ability

00:06:49,680 --> 00:06:54,030
to do the management and the

00:06:51,210 --> 00:06:55,230
orchestration was what brought today dr.

00:06:54,030 --> 00:06:57,090
to the level where they are and

00:06:55,230 --> 00:06:59,090
everybody now is building products on

00:06:57,090 --> 00:07:01,770
top of dr. but we need to think about

00:06:59,090 --> 00:07:03,360
security so what is the logic behind

00:07:01,770 --> 00:07:05,850
containers when you look about

00:07:03,360 --> 00:07:08,100
containers you think I don't understand

00:07:05,850 --> 00:07:11,010
them very well it's pretty simple in the

00:07:08,100 --> 00:07:13,400
image that you have here you have the

00:07:11,010 --> 00:07:15,660
definition on what is the virtualization

00:07:13,400 --> 00:07:17,370
transforming physical hardware into a

00:07:15,660 --> 00:07:20,340
virtual environment in a place where I

00:07:17,370 --> 00:07:22,050
can run many servers and services on top

00:07:20,340 --> 00:07:24,000
of the same hard work but the problem is

00:07:22,050 --> 00:07:26,700
that every time I do that and need to

00:07:24,000 --> 00:07:28,650
construct again an operating system I

00:07:26,700 --> 00:07:30,840
need to create one and put my

00:07:28,650 --> 00:07:33,120
applications on top it's very nice it's

00:07:30,840 --> 00:07:35,280
very easy it's today in nearly a monkey

00:07:33,120 --> 00:07:38,670
job you can actually do it sequentially

00:07:35,280 --> 00:07:41,760
so fast that nobody even cares today but

00:07:38,670 --> 00:07:43,800
the problem comes that is very big it's

00:07:41,760 --> 00:07:48,030
very time-consuming it's very difficult

00:07:43,800 --> 00:07:49,860
to revert back and also it can't scale

00:07:48,030 --> 00:07:52,020
as fast as required for certain type of

00:07:49,860 --> 00:07:53,550
applications the container side is

00:07:52,020 --> 00:07:55,500
different in the content side we have

00:07:53,550 --> 00:07:56,790
the same infrastructure but we have

00:07:55,500 --> 00:07:58,950
something that we call a container

00:07:56,790 --> 00:08:00,990
engine which is one of the practical

00:07:58,950 --> 00:08:02,700
brands today or vendors actually

00:08:00,990 --> 00:08:04,560
provides one of these engines or even

00:08:02,700 --> 00:08:06,240
the open-source ones and then on top of

00:08:04,560 --> 00:08:09,030
that the only thing you do is you have

00:08:06,240 --> 00:08:11,910
Charlotte binaries Charlotte executables

00:08:09,030 --> 00:08:14,310
Charlotte programs and shared libraries

00:08:11,910 --> 00:08:15,840
that are used by the same applications

00:08:14,310 --> 00:08:17,790
that you put on top and so instead of

00:08:15,840 --> 00:08:19,350
having to put operating systems you put

00:08:17,790 --> 00:08:22,320
applications and you can replicate that

00:08:19,350 --> 00:08:23,040
in the order of millions in the matter

00:08:22,320 --> 00:08:25,290
of minutes

00:08:23,040 --> 00:08:28,890
so if I have program Pro web server I

00:08:25,290 --> 00:08:31,230
can spin ten thousand web servers in

00:08:28,890 --> 00:08:33,660
probably one minute if I have the power

00:08:31,230 --> 00:08:35,460
I have enough power so resources so

00:08:33,660 --> 00:08:37,620
that's a big difference but as you see a

00:08:35,460 --> 00:08:40,890
new problem arises we are sharing

00:08:37,620 --> 00:08:44,040
resources in the backend while in the

00:08:40,890 --> 00:08:45,330
virtualization we are not so talking

00:08:44,040 --> 00:08:47,580
about security now that's what we are

00:08:45,330 --> 00:08:49,710
here the landscape of security is based

00:08:47,580 --> 00:08:51,540
on what we see here the technical

00:08:49,710 --> 00:08:53,970
dynamics and the customer pain

00:08:51,540 --> 00:08:54,780
everything that is about security end

00:08:53,970 --> 00:08:55,889
ops

00:08:54,780 --> 00:08:57,929
giving a lot of pain

00:08:55,889 --> 00:08:59,730
to our customers at the moment we see

00:08:57,929 --> 00:09:01,199
that inference of revolves they keeps on

00:08:59,730 --> 00:09:03,779
changing from very physical virtual

00:09:01,199 --> 00:09:05,399
containers cloud then we get the

00:09:03,779 --> 00:09:07,049
applications that keep on changing all

00:09:05,399 --> 00:09:08,609
the time because we got continuous

00:09:07,049 --> 00:09:10,709
integration and continuous development

00:09:08,609 --> 00:09:13,619
so we kind of do like in the past we

00:09:10,709 --> 00:09:16,949
wait for release 15 then 15 point 1 then

00:09:13,619 --> 00:09:19,079
16 then 16 point 2 we cannot do that we

00:09:16,949 --> 00:09:21,569
need to deploy applications very fast

00:09:19,079 --> 00:09:24,389
and also we have the threat if you're

00:09:21,569 --> 00:09:26,220
familiar with all the problematic today

00:09:24,389 --> 00:09:27,929
about the new generation of threat is

00:09:26,220 --> 00:09:29,489
they keep evolving all the time

00:09:27,929 --> 00:09:31,079
the kicker very vÃ¶lva even by the time

00:09:29,489 --> 00:09:32,519
that we are talking since I arrived to

00:09:31,079 --> 00:09:35,910
the building so the time I'm going to

00:09:32,519 --> 00:09:38,100
exit this building probably at least two

00:09:35,910 --> 00:09:41,009
new variants of malware will have been

00:09:38,100 --> 00:09:43,049
created not 2 mm sorry so that's

00:09:41,009 --> 00:09:45,029
actually the reality the threats keep on

00:09:43,049 --> 00:09:47,009
evolving and that ends up in people

00:09:45,029 --> 00:09:49,169
having to do a lot of audits and threat

00:09:47,009 --> 00:09:51,119
assessments people having to look into

00:09:49,169 --> 00:09:52,799
how they gonna not impact the

00:09:51,119 --> 00:09:55,519
performance of the infrastructure and

00:09:52,799 --> 00:10:00,239
also how they gonna try to simplify

00:09:55,519 --> 00:10:02,579
their IT to do not have to scale weigh

00:10:00,239 --> 00:10:04,949
more than the infrastructure requires

00:10:02,579 --> 00:10:07,949
just because of the complexity and that

00:10:04,949 --> 00:10:09,059
ends obviously in customer pain this is

00:10:07,949 --> 00:10:10,919
the picture that you need to keep in

00:10:09,059 --> 00:10:12,329
your brain this is the model the most

00:10:10,919 --> 00:10:14,699
important model they have seen ever

00:10:12,329 --> 00:10:16,919
developed in the last five years for

00:10:14,699 --> 00:10:20,489
security in high in all the hybrid

00:10:16,919 --> 00:10:22,980
ecosystem on clouds containers functions

00:10:20,489 --> 00:10:25,470
as a service anything that is built from

00:10:22,980 --> 00:10:29,100
an organization or that is consumed by

00:10:25,470 --> 00:10:31,649
an organization and deployed to your b2c

00:10:29,100 --> 00:10:33,419
or b2b at the moment the shared

00:10:31,649 --> 00:10:35,699
responsibility model is what you need to

00:10:33,419 --> 00:10:37,470
focus on it was the most important it

00:10:35,699 --> 00:10:39,089
separates the foundation services that

00:10:37,470 --> 00:10:42,869
you see there and your infrastructure

00:10:39,089 --> 00:10:45,689
for from what is used or consumed by

00:10:42,869 --> 00:10:48,720
your users or by your actual employees

00:10:45,689 --> 00:10:50,699
and the responsibility when you are for

00:10:48,720 --> 00:10:53,910
example using Google cloud or Amazon

00:10:50,699 --> 00:10:56,189
Cloud or Microsoft cloud or you build a

00:10:53,910 --> 00:10:58,289
cloud with your brand and your name and

00:10:56,189 --> 00:11:00,929
you give it to your customers the part

00:10:58,289 --> 00:11:02,910
that is below ok in dark that's your

00:11:00,929 --> 00:11:05,069
responsibility but whoever uses the

00:11:02,910 --> 00:11:08,730
cloud at the moment and put applications

00:11:05,069 --> 00:11:10,339
and put any services any OSS anything

00:11:08,730 --> 00:11:13,499
and give it to the cast

00:11:10,339 --> 00:11:16,139
everything on pink is your

00:11:13,499 --> 00:11:17,730
responsibility so if you're a developer

00:11:16,139 --> 00:11:20,519
and you develop applications you need to

00:11:17,730 --> 00:11:22,470
take care about all of the rest you can

00:11:20,519 --> 00:11:24,420
find this in the Google web page in the

00:11:22,470 --> 00:11:26,730
Amazon Web page or you can find it in

00:11:24,420 --> 00:11:28,319
the Microsoft Azure web page it's a

00:11:26,730 --> 00:11:30,239
model that is totally approved and

00:11:28,319 --> 00:11:31,980
accepted so all of that is your

00:11:30,239 --> 00:11:33,899
responsibility you will think like if I

00:11:31,980 --> 00:11:37,459
am using Google cloud or Amazon Cloud or

00:11:33,899 --> 00:11:42,059
any other cloud or let's call it maurice

00:11:37,459 --> 00:11:43,769
cloud I am NOT responsible for it they

00:11:42,059 --> 00:11:45,779
will take care of it it's not the case

00:11:43,769 --> 00:11:48,269
it's your responsibility and therefore

00:11:45,779 --> 00:11:50,309
all of that comes into what do I need to

00:11:48,269 --> 00:11:51,389
secure when I come into containers when

00:11:50,309 --> 00:11:53,999
I create these containerized

00:11:51,389 --> 00:11:56,579
applications how do I secure them so my

00:11:53,999 --> 00:11:58,439
problem is do I secure a host when I run

00:11:56,579 --> 00:12:00,269
my container engine do I secure the

00:11:58,439 --> 00:12:02,309
applications are developed do I secure

00:12:00,269 --> 00:12:04,920
the images that they package and I

00:12:02,309 --> 00:12:07,110
prepare to be deployed across all my

00:12:04,920 --> 00:12:08,939
organization of my customers do I look

00:12:07,110 --> 00:12:11,819
into the permissions do I look into the

00:12:08,939 --> 00:12:13,679
users I create or do I look into the

00:12:11,819 --> 00:12:16,230
traffic from the consumers do I look

00:12:13,679 --> 00:12:18,540
into all of them or none of them well

00:12:16,230 --> 00:12:20,579
the problem is that you probably have to

00:12:18,540 --> 00:12:22,740
look across all of them at the same time

00:12:20,579 --> 00:12:24,660
but there is not a single solution and

00:12:22,740 --> 00:12:27,089
that's where we come with the parity

00:12:24,660 --> 00:12:28,170
game that we have four containers which

00:12:27,089 --> 00:12:30,089
is totally different from the per

00:12:28,170 --> 00:12:33,360
agreement per item that you have for

00:12:30,089 --> 00:12:34,860
filter resources or virtualization so we

00:12:33,360 --> 00:12:37,499
know that the containers are running on

00:12:34,860 --> 00:12:40,199
top of an OS all the time an operating

00:12:37,499 --> 00:12:44,040
system we like it or not then they are

00:12:40,199 --> 00:12:46,559
also running either an OS themselves an

00:12:44,040 --> 00:12:49,079
operating system or applications also

00:12:46,559 --> 00:12:51,660
they have libraries that they use to

00:12:49,079 --> 00:12:54,089
actually execute the code and also this

00:12:51,660 --> 00:12:55,740
libraries are shared across others which

00:12:54,089 --> 00:12:57,929
is another big problem because we can

00:12:55,740 --> 00:12:59,790
have isolated libraries it would become

00:12:57,929 --> 00:13:02,519
again a virtualized environment and

00:12:59,790 --> 00:13:03,779
still we have to think about how do we

00:13:02,519 --> 00:13:05,429
deal with the multi-tenancy

00:13:03,779 --> 00:13:07,649
and the multi users for example you you

00:13:05,429 --> 00:13:09,929
and you are using my containers and you

00:13:07,649 --> 00:13:11,129
you and you're using the same and happen

00:13:09,929 --> 00:13:13,529
it happens that we share in the

00:13:11,129 --> 00:13:15,600
libraries so who is responsible for one

00:13:13,529 --> 00:13:20,850
of the libraries being hacked or being

00:13:15,600 --> 00:13:22,709
actually forged okay we need to actually

00:13:20,850 --> 00:13:24,059
think about the fact that we share the

00:13:22,709 --> 00:13:27,209
same it's like

00:13:24,059 --> 00:13:28,679
I like to think this about a toilet you

00:13:27,209 --> 00:13:30,660
know when you go to a toilet

00:13:28,679 --> 00:13:32,160
you don't have your isolated space you

00:13:30,660 --> 00:13:33,989
always sharing the space with the rest

00:13:32,160 --> 00:13:35,459
of the people there so you need to think

00:13:33,989 --> 00:13:37,589
that the same toilet that you're using

00:13:35,459 --> 00:13:38,699
somebody else is using it too so you may

00:13:37,589 --> 00:13:40,859
get to the toilet and get totally

00:13:38,699 --> 00:13:42,689
infected I need to think because

00:13:40,859 --> 00:13:43,679
somebody came and just did something

00:13:42,689 --> 00:13:45,239
don't you in the toilet

00:13:43,679 --> 00:13:46,980
so you need to think about dirty things

00:13:45,239 --> 00:13:49,709
who actually have the security always

00:13:46,980 --> 00:13:52,499
present so we got a contra bility

00:13:49,709 --> 00:13:55,019
vulnerability patching patching the

00:13:52,499 --> 00:13:57,569
systems the applications firewalling who

00:13:55,019 --> 00:13:59,609
manages the traffic do I go back to my

00:13:57,569 --> 00:14:01,679
provider and I complain about not having

00:13:59,609 --> 00:14:04,290
a proper firewall do I get breached and

00:14:01,679 --> 00:14:06,480
I go and say your firewall is bad or it

00:14:04,290 --> 00:14:08,309
was me that did a bad coding and I

00:14:06,480 --> 00:14:10,230
didn't think about putting any security

00:14:08,309 --> 00:14:12,419
solutions on it and what about role

00:14:10,230 --> 00:14:13,739
based access control who manages the

00:14:12,419 --> 00:14:15,779
accounts who puts them in the right

00:14:13,739 --> 00:14:18,329
place or actually decides who can get in

00:14:15,779 --> 00:14:19,859
and who can get out it's a lot of

00:14:18,329 --> 00:14:22,769
problems or problems that you need to

00:14:19,859 --> 00:14:25,139
think about and then it comes to how do

00:14:22,769 --> 00:14:27,720
I secure them so very interesting thing

00:14:25,139 --> 00:14:30,179
is oh let's do resource control you know

00:14:27,720 --> 00:14:32,309
let's go and use C groups in Linux and

00:14:30,179 --> 00:14:33,989
do a lot of resource control fine or

00:14:32,309 --> 00:14:36,149
let's do a discretionary disk literal

00:14:33,989 --> 00:14:38,429
yes access I define what you want people

00:14:36,149 --> 00:14:41,279
to access to or a mandatory one so I

00:14:38,429 --> 00:14:44,279
started using up-armored or selinux okay

00:14:41,279 --> 00:14:46,619
or maybe I try to use security secure

00:14:44,279 --> 00:14:48,809
computing with fine-grained access but

00:14:46,619 --> 00:14:50,639
all of that is so complex that at the

00:14:48,809 --> 00:14:53,399
end of the day I'm a destructor what

00:14:50,639 --> 00:14:55,379
I've done do they work doing start

00:14:53,399 --> 00:14:58,679
employing deficit people deficit ops

00:14:55,379 --> 00:15:01,679
people or the sector Bob's people into

00:14:58,679 --> 00:15:03,419
it or do we try to find an understanding

00:15:01,679 --> 00:15:07,289
on the ecosystem on what is going to be

00:15:03,419 --> 00:15:08,579
the best so security solutions that we

00:15:07,289 --> 00:15:10,470
have with the final in different groups

00:15:08,579 --> 00:15:12,149
we've got four building abilities I'm

00:15:10,470 --> 00:15:14,459
talking open-source all the time they

00:15:12,149 --> 00:15:16,589
got a commercial version new vector it

00:15:14,459 --> 00:15:18,480
uses the C's Center for internal

00:15:16,589 --> 00:15:20,339
security takes your images

00:15:18,480 --> 00:15:22,980
looks into the image and defines if the

00:15:20,339 --> 00:15:26,609
image is validated or not based on the

00:15:22,980 --> 00:15:27,539
C's database for free aqua sec does

00:15:26,609 --> 00:15:30,779
exactly the same thing

00:15:27,539 --> 00:15:32,669
it lists if your images okay is actually

00:15:30,779 --> 00:15:34,649
validated or not and if you have the

00:15:32,669 --> 00:15:37,180
right permissions okay in your

00:15:34,649 --> 00:15:40,670
kubernetes cluster

00:15:37,180 --> 00:15:42,170
Corie OS it is even another approach

00:15:40,670 --> 00:15:44,029
which is about vulnerabilities which

00:15:42,170 --> 00:15:46,520
takes the images the packages that you

00:15:44,029 --> 00:15:49,339
have created in standby and it actually

00:15:46,520 --> 00:15:51,380
analyzed them for as an aesthetic

00:15:49,339 --> 00:15:53,770
analysis to see if they are vulnerable

00:15:51,380 --> 00:15:55,459
and also it compares with different

00:15:53,770 --> 00:15:58,660
types of CVS

00:15:55,459 --> 00:16:00,610
and defines if they actually have any

00:15:58,660 --> 00:16:05,420
vulnerability that needs to be

00:16:00,610 --> 00:16:07,190
considered twist lock is another all of

00:16:05,420 --> 00:16:08,810
them are commercial but they have a free

00:16:07,190 --> 00:16:09,740
open source to source is very

00:16:08,810 --> 00:16:11,839
interesting because they do

00:16:09,740 --> 00:16:14,330
vulnerability management for the actual

00:16:11,839 --> 00:16:17,540
images and containers access control and

00:16:14,330 --> 00:16:19,580
also when the container is running it's

00:16:17,540 --> 00:16:22,160
in operation it looks about the room

00:16:19,580 --> 00:16:24,440
time day in real time execution to see

00:16:22,160 --> 00:16:26,930
if something is actually going wrong

00:16:24,440 --> 00:16:28,850
it's I like them very much actually

00:16:26,930 --> 00:16:30,770
they've got a full product that you can

00:16:28,850 --> 00:16:33,110
use as a Community Edition so if you

00:16:30,770 --> 00:16:35,330
don't need to get into corporate levels

00:16:33,110 --> 00:16:37,910
and pay for it you can actually test it

00:16:35,330 --> 00:16:39,290
even in production as a Community

00:16:37,910 --> 00:16:42,440
Edition later on you can get into the

00:16:39,290 --> 00:16:44,930
proper you know commercial stage aqua

00:16:42,440 --> 00:16:47,029
goes to analysis no more vulnerabilities

00:16:44,930 --> 00:16:49,670
so aqua is actually looking in through

00:16:47,029 --> 00:16:51,890
the pre-production analysis okay and the

00:16:49,670 --> 00:16:54,079
vulnerability and then you submit an

00:16:51,890 --> 00:16:55,850
image and see if they have vulnerability

00:16:54,079 --> 00:16:58,070
so you create your content when you're

00:16:55,850 --> 00:17:00,680
developing and you put it into aqua and

00:16:58,070 --> 00:17:02,270
then it leaks into the files and see if

00:17:00,680 --> 00:17:04,880
the files have been tampered with

00:17:02,270 --> 00:17:07,189
so all your prod all your code and all

00:17:04,880 --> 00:17:09,199
your actual application can be analyzed

00:17:07,189 --> 00:17:11,329
and then later on decide if it's good or

00:17:09,199 --> 00:17:15,230
bad based on your policies that you

00:17:11,329 --> 00:17:17,240
create since dick does also something

00:17:15,230 --> 00:17:18,620
which is related with behavior as you

00:17:17,240 --> 00:17:21,290
see all of them they complement

00:17:18,620 --> 00:17:25,579
themselves 6d does behavioral analysis

00:17:21,290 --> 00:17:26,990
to detect anomalies based on a baseline

00:17:25,579 --> 00:17:28,760
you create a baseline and you see if

00:17:26,990 --> 00:17:30,710
there are any anomalies into your

00:17:28,760 --> 00:17:32,780
containers and also that's very good

00:17:30,710 --> 00:17:36,559
because he works also for pool

00:17:32,780 --> 00:17:37,880
containers or micro services and notary

00:17:36,559 --> 00:17:41,240
is the last thing I'm going to talk

00:17:37,880 --> 00:17:43,250
about is just about making sure that

00:17:41,240 --> 00:17:44,720
there is no forgery in the images when

00:17:43,250 --> 00:17:46,070
you create the images you need to put

00:17:44,720 --> 00:17:48,230
them in a repository and in the

00:17:46,070 --> 00:17:49,890
repository you need to actually have a

00:17:48,230 --> 00:17:54,870
proper

00:17:49,890 --> 00:17:57,690
a proper database where you gonna deploy

00:17:54,870 --> 00:18:00,510
those image to and notary is implemented

00:17:57,690 --> 00:18:02,790
into the doctor as the update framework

00:18:00,510 --> 00:18:05,670
in github well now is Microsoft but I'm

00:18:02,790 --> 00:18:07,860
not going to talk about that and the

00:18:05,670 --> 00:18:09,810
goal of notary is to say my images are

00:18:07,860 --> 00:18:11,490
good they are not tempered you can

00:18:09,810 --> 00:18:13,770
download them it's the same thing as any

00:18:11,490 --> 00:18:16,790
update that you get today that is

00:18:13,770 --> 00:18:19,920
validated and non tampered with

00:18:16,790 --> 00:18:21,540
what's next what's the future then we

00:18:19,920 --> 00:18:24,120
don't know it it's very unclear we're

00:18:21,540 --> 00:18:26,280
lacking a lot of understanding about how

00:18:24,120 --> 00:18:28,290
container is going to evolve and we lack

00:18:26,280 --> 00:18:30,300
also the understanding of how it's going

00:18:28,290 --> 00:18:31,950
the solutions going to be implemented so

00:18:30,300 --> 00:18:32,940
the host can be infected the images can

00:18:31,950 --> 00:18:34,830
be vulnerable

00:18:32,940 --> 00:18:36,330
the images can be tampered with the

00:18:34,830 --> 00:18:37,920
files can be tampered with it was

00:18:36,330 --> 00:18:40,650
demonstrated in the black hat conference

00:18:37,920 --> 00:18:43,470
last year how somebody took an image and

00:18:40,650 --> 00:18:44,940
totally fully fill it with malware and

00:18:43,470 --> 00:18:46,800
then we'll see how people don't load it

00:18:44,940 --> 00:18:49,620
and execute the image from a repository

00:18:46,800 --> 00:18:52,590
and it was infected so there is a need

00:18:49,620 --> 00:18:55,640
for a next-generation solution in an

00:18:52,590 --> 00:18:57,390
open source for all of us based on the

00:18:55,640 --> 00:18:59,220
capabilities that are required today

00:18:57,390 --> 00:19:03,930
from any other type of security solution

00:18:59,220 --> 00:19:06,690
anti-malware IPS web reputation behavior

00:19:03,930 --> 00:19:09,180
monitoring machine learning artificial

00:19:06,690 --> 00:19:11,670
artificial intelligence and also some

00:19:09,180 --> 00:19:14,340
boxing to actually determine that the

00:19:11,670 --> 00:19:16,140
files and the content are good but there

00:19:14,340 --> 00:19:18,000
is nothing new there is nothing new in

00:19:16,140 --> 00:19:20,610
the market everything is pieces all

00:19:18,000 --> 00:19:23,640
together and today the ecosystem is so

00:19:20,610 --> 00:19:25,530
sparse there are 10 and I would say like

00:19:23,640 --> 00:19:28,830
tens and tens of solutions in the market

00:19:25,530 --> 00:19:30,330
but none of them do the full job so the

00:19:28,830 --> 00:19:32,220
security is actually based on different

00:19:30,330 --> 00:19:37,380
solutions all patched together one on

00:19:32,220 --> 00:19:38,390
top of the other any questions that was

00:19:37,380 --> 00:19:43,430
fast

00:19:38,390 --> 00:19:43,430

YouTube URL: https://www.youtube.com/watch?v=6H_3DWkjfnI


