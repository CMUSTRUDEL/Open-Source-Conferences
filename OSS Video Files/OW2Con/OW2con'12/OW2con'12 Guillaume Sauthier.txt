Title: OW2con'12 Guillaume Sauthier
Publication date: 2012-12-10
Playlist: OW2con'12
Description: 
	OW2 Utilities, The Swiss Army Knife of OW2 Projects - Guillaume Sauthier, PeerGreen
AbstractÂ : OW2 Utilities is a newly accepted project in the consortium. It aims to be the OW2 toolkit catalog for common pieces of code that everybody rewrite for each new project. This presentation will start with a description of the goals of that project, a little bit of history, then we will explain why it's important to maximize re-use within the consortium (reliability, ...). In a second part we will focus to the most useful and/or interesting modules provided by this project. This session will be developer-oriented, with code samples and effective use cases.
Captions: 
	00:00:00,000 --> 00:00:06,600
and sodium will talk to us about one of

00:00:03,090 --> 00:00:08,639
the new oh w two projects which came

00:00:06,600 --> 00:00:12,059
this year's is one of the new 2012

00:00:08,639 --> 00:00:15,800
projects called or w-2 utilities okay

00:00:12,059 --> 00:00:18,270
i'm not sure why i'm on the squat

00:00:15,800 --> 00:00:24,689
presentation line because i think it's

00:00:18,270 --> 00:00:28,410
more projects but like anyway so we will

00:00:24,689 --> 00:00:33,390
walk around this new project add video

00:00:28,410 --> 00:00:36,750
to utilities and what is the goal of the

00:00:33,390 --> 00:00:40,350
utilities project we have some kind of

00:00:36,750 --> 00:00:42,989
moto for activities and because your cod

00:00:40,350 --> 00:00:45,420
a cow should've wrote written only ones

00:00:42,989 --> 00:00:48,629
own because your card should be well

00:00:45,420 --> 00:00:50,700
tested on because God should be shirt on

00:00:48,629 --> 00:00:54,059
this is the main reason of the existence

00:00:50,700 --> 00:00:56,640
of the utilities projects so maybe a bit

00:00:54,059 --> 00:01:01,050
of genesis of hysteria could help you to

00:00:56,640 --> 00:01:04,439
understand utilities project is not new

00:01:01,050 --> 00:01:07,140
it was born in 2006 inside the easy

00:01:04,439 --> 00:01:13,110
beans project we use it as an incubator

00:01:07,140 --> 00:01:16,500
project and it is quite used in industry

00:01:13,110 --> 00:01:18,960
grade enterprise grade project for

00:01:16,500 --> 00:01:22,170
example it's using Jonah's Jasmine a sea

00:01:18,960 --> 00:01:28,560
beans shall be just mean for years so

00:01:22,170 --> 00:01:30,329
it's a industry ready it has been

00:01:28,560 --> 00:01:34,470
extracted from the sea beans projection

00:01:30,329 --> 00:01:37,920
2008 and we have up to 35 relates up to

00:01:34,470 --> 00:01:42,810
today so it's a quite active project and

00:01:37,920 --> 00:01:45,869
we have a lot of modules so we'll walk

00:01:42,810 --> 00:01:47,790
around some of the modules we have

00:01:45,869 --> 00:01:52,320
inaudible utility to other blue to

00:01:47,790 --> 00:01:57,149
utilities but we won't work for all

00:01:52,320 --> 00:02:01,049
because I think we have around 14

00:01:57,149 --> 00:02:04,710
modules on 15 minutes is so short so

00:02:01,049 --> 00:02:06,899
we'll have some quite basic stuff which

00:02:04,710 --> 00:02:09,810
I just want to mention we have some

00:02:06,899 --> 00:02:14,330
stuff around internationalization

00:02:09,810 --> 00:02:18,360
logging system so it's quite like slf4j

00:02:14,330 --> 00:02:23,459
for ji PA we have stuff for also around

00:02:18,360 --> 00:02:25,890
XML parsing I will let you extract

00:02:23,459 --> 00:02:28,459
information from from this slide but

00:02:25,890 --> 00:02:32,250
it's how to obtain a purser on how to

00:02:28,459 --> 00:02:35,130
easily pass the document based on this

00:02:32,250 --> 00:02:39,239
we have some XML configuration component

00:02:35,130 --> 00:02:42,030
which basically maps java objects to xn

00:02:39,239 --> 00:02:43,830
l so you can read your XML on directly

00:02:42,030 --> 00:02:46,430
have object instance that you could

00:02:43,830 --> 00:02:49,049
easily use some kind of simple text be

00:02:46,430 --> 00:02:52,530
we have someone cutting on the cutting

00:02:49,049 --> 00:02:56,239
stuff around base64 file to your

00:02:52,530 --> 00:02:59,880
elevation tools on some also some

00:02:56,239 --> 00:03:02,880
clusters or where object input stream so

00:02:59,880 --> 00:03:04,739
it was just to be mentioned I will talk

00:03:02,880 --> 00:03:08,880
more about some more interesting

00:03:04,739 --> 00:03:11,670
projects nowadays everybody's using

00:03:08,880 --> 00:03:14,250
annotations but annotation has to be

00:03:11,670 --> 00:03:17,010
read from the code to be useful so it's

00:03:14,250 --> 00:03:19,049
interesting to have some annotation

00:03:17,010 --> 00:03:24,000
processor only utilities we are

00:03:19,049 --> 00:03:28,530
providing that kind of tool it's simply

00:03:24,000 --> 00:03:31,260
an engine which travels of the classes

00:03:28,530 --> 00:03:33,930
and interfaces of an object instance

00:03:31,260 --> 00:03:36,480
it's reporting it in the regions so I'll

00:03:33,930 --> 00:03:39,810
give you some cut example you just have

00:03:36,480 --> 00:03:42,450
to instantiate a processor you had some

00:03:39,810 --> 00:03:45,420
annotation under which will react to the

00:03:42,450 --> 00:03:48,690
presence of annotation in the card and

00:03:45,420 --> 00:03:53,389
you process an instance on your unlock

00:03:48,690 --> 00:03:58,530
will be a call for each annotation found

00:03:53,389 --> 00:04:03,060
so it's quite easy to use we have to

00:03:58,530 --> 00:04:05,040
have some interesting event system which

00:04:03,060 --> 00:04:07,620
has the main capabilities and

00:04:05,040 --> 00:04:11,790
interesting capabilities to support a

00:04:07,620 --> 00:04:14,850
circle a synchronous events so you can

00:04:11,790 --> 00:04:16,919
see this like a storied own story to a

00:04:14,850 --> 00:04:19,799
pic notification system it's

00:04:16,919 --> 00:04:22,830
hierarchical it's multis ready we had

00:04:19,799 --> 00:04:23,550
some dispatchers who fires event twitter

00:04:22,830 --> 00:04:25,940
pic

00:04:23,550 --> 00:04:30,020
on you have event listener which will

00:04:25,940 --> 00:04:33,150
which subscribe to a topic on will be

00:04:30,020 --> 00:04:38,490
will be activated synchronously or

00:04:33,150 --> 00:04:42,629
asynchronously if the event is fine so a

00:04:38,490 --> 00:04:46,379
cookie ought to better'n distant with

00:04:42,629 --> 00:04:49,020
some card you had an event service' and

00:04:46,379 --> 00:04:53,669
which will register your event provider

00:04:49,020 --> 00:04:57,599
your dispatcher dispatcher are used as

00:04:53,669 --> 00:04:59,520
aventuras so the one who is firing the

00:04:57,599 --> 00:05:02,250
event will fire the events through the

00:04:59,520 --> 00:05:04,620
dispatcher on a synchronous lee dispatch

00:05:02,250 --> 00:05:09,120
shells will call the event listener

00:05:04,620 --> 00:05:10,620
which are associating and everything is

00:05:09,120 --> 00:05:13,050
going through the event service which is

00:05:10,620 --> 00:05:18,169
some kind of abyss so you have a loose

00:05:13,050 --> 00:05:18,169
coupling between dispatcher on listeners

00:05:18,469 --> 00:05:25,770
will also have some pull up eaja inside

00:05:23,069 --> 00:05:27,930
utility ism so it's a simple putting api

00:05:25,770 --> 00:05:30,779
and to reuse your inject object

00:05:27,930 --> 00:05:33,840
instances it's red safe we have to

00:05:30,779 --> 00:05:36,360
implementation really first one which is

00:05:33,840 --> 00:05:40,229
synchronization so when you start to

00:05:36,360 --> 00:05:44,069
pull object instance are created at

00:05:40,229 --> 00:05:46,529
startup that we also have some more

00:05:44,069 --> 00:05:51,449
advanced implementation which is a

00:05:46,529 --> 00:05:53,759
synchronous so instances are created on

00:05:51,449 --> 00:05:56,879
the flight when recreate when requested

00:05:53,759 --> 00:06:00,569
by separate straits so the reason exam

00:05:56,879 --> 00:06:03,389
Akkad example on well you can see that

00:06:00,569 --> 00:06:06,090
we are you are using your implement in

00:06:03,389 --> 00:06:08,250
the pool factory which is responsible to

00:06:06,090 --> 00:06:10,500
create instant season and you have a

00:06:08,250 --> 00:06:13,889
pool component which is using this

00:06:10,500 --> 00:06:16,770
Factory on the pool component is the one

00:06:13,889 --> 00:06:20,479
with the intelligence and he will ask

00:06:16,770 --> 00:06:23,969
the factory to create instance or delete

00:06:20,479 --> 00:06:27,330
disposed instance so it's quite easy to

00:06:23,969 --> 00:06:32,699
implement and to have for free pull

00:06:27,330 --> 00:06:35,980
system you have the server we also have

00:06:32,699 --> 00:06:40,120
some viable processing system

00:06:35,980 --> 00:06:42,040
in utilities on that's very useful when

00:06:40,120 --> 00:06:45,430
you have to extract a variable on

00:06:42,040 --> 00:06:47,560
expression from string from a string so

00:06:45,430 --> 00:06:50,440
for example here you have a simple

00:06:47,560 --> 00:06:54,630
expression hello speak a name on speaker

00:06:50,440 --> 00:06:59,050
name is a violin and you want to replace

00:06:54,630 --> 00:07:01,540
this expression with its real value so

00:06:59,050 --> 00:07:03,430
it's based on property resolver which

00:07:01,540 --> 00:07:05,590
will have to provide the value for a

00:07:03,430 --> 00:07:09,160
given expression on this property

00:07:05,590 --> 00:07:11,890
resolve our composite also you can mix

00:07:09,160 --> 00:07:16,210
them on this report recursion so you can

00:07:11,890 --> 00:07:18,670
have variables with variable inside so

00:07:16,210 --> 00:07:22,480
also I give a short example on so you

00:07:18,670 --> 00:07:25,030
create a substitution and gene um you

00:07:22,480 --> 00:07:28,480
create a chain resolver which will have

00:07:25,030 --> 00:07:30,490
to reservoir inside which are dedicated

00:07:28,480 --> 00:07:32,680
to resolve the speaker that name

00:07:30,490 --> 00:07:34,570
expression on another one which is a

00:07:32,680 --> 00:07:36,250
dedicated to resolve with that

00:07:34,570 --> 00:07:40,420
expression so you see it's very easy to

00:07:36,250 --> 00:07:42,340
implement a resolver and you just have

00:07:40,420 --> 00:07:47,470
to call the engine that substitute

00:07:42,340 --> 00:07:52,410
method with the expression to have z12

00:07:47,470 --> 00:07:55,450
value back so very easy when you have to

00:07:52,410 --> 00:08:01,900
to resolve to substitute expression

00:07:55,450 --> 00:08:05,980
variables in a string we also have a

00:08:01,900 --> 00:08:09,190
resource abstraction it's a uniform API

00:08:05,980 --> 00:08:12,850
for resource consumption on for example

00:08:09,190 --> 00:08:15,430
we are supporting out of the box the

00:08:12,850 --> 00:08:20,220
directory system jar file osgi candles

00:08:15,430 --> 00:08:23,860
it's extensible so in fact it's simply

00:08:20,220 --> 00:08:25,810
come on IP I am for that representin

00:08:23,860 --> 00:08:28,030
achieves on achieve is something which

00:08:25,810 --> 00:08:31,960
contains other files click on contains

00:08:28,030 --> 00:08:34,630
resources on so you can get the name the

00:08:31,960 --> 00:08:36,940
URL of the Archie archive you can get

00:08:34,630 --> 00:08:42,760
the resources as input stream or as a

00:08:36,940 --> 00:08:45,520
URL on the edge closeable so it's very

00:08:42,760 --> 00:08:48,700
easy when you have to abstract yourself

00:08:45,520 --> 00:08:50,380
from the format of the resources you

00:08:48,700 --> 00:08:55,850
want to access

00:08:50,380 --> 00:08:59,050
so it was used in easy beans first to be

00:08:55,850 --> 00:09:01,820
able to deploy directory which are

00:08:59,050 --> 00:09:05,180
constructed like a gb jar on radiology

00:09:01,820 --> 00:09:11,870
bija with our jar files and then we

00:09:05,180 --> 00:09:14,270
integrated the osgi bender part so

00:09:11,870 --> 00:09:16,940
everything is bender in utilities

00:09:14,270 --> 00:09:22,070
because we are using with GI in a lot of

00:09:16,940 --> 00:09:24,230
place so we have around 20 common

00:09:22,070 --> 00:09:27,860
liberal reason which are wrapped as osgi

00:09:24,230 --> 00:09:31,370
bundles so you have some comments some

00:09:27,860 --> 00:09:34,640
Apache Commons staff we as Java assist

00:09:31,370 --> 00:09:36,410
which is byte code generator the

00:09:34,640 --> 00:09:38,450
reference implementation of jack's b

00:09:36,410 --> 00:09:43,270
which is provided as blunder j groups

00:09:38,450 --> 00:09:51,290
chess eh so keep urban secant and so on

00:09:43,270 --> 00:09:53,420
it's ok thank you it's it's it's real

00:09:51,290 --> 00:09:55,160
bundle because we are we have done them

00:09:53,420 --> 00:09:58,790
correctly with their have exported

00:09:55,160 --> 00:10:02,390
package with version verified import so

00:09:58,790 --> 00:10:06,560
thou well done on all other modules of

00:10:02,390 --> 00:10:16,040
utilities RL co GI vendors with version

00:10:06,560 --> 00:10:18,560
API and exported content so we we as I

00:10:16,040 --> 00:10:22,940
said earlier the goal of you 2 g's is

00:10:18,560 --> 00:10:27,380
tushar card on we have done our part so

00:10:22,940 --> 00:10:31,370
we have exposed it to everyone i know we

00:10:27,380 --> 00:10:35,360
want you two to use it so i play some

00:10:31,370 --> 00:10:39,140
onion my squads from from anonymous so

00:10:35,360 --> 00:10:41,900
you can find the code in guitar use you

00:10:39,140 --> 00:10:43,520
have one repository for each for each

00:10:41,900 --> 00:10:46,820
module so you'll see a lot of

00:10:43,520 --> 00:10:50,360
repositories we have a website which is

00:10:46,820 --> 00:10:51,950
at the moment quite empty but we are

00:10:50,360 --> 00:10:55,730
ready we are waiting for you for some

00:10:51,950 --> 00:10:59,360
documentation we also have a continuous

00:10:55,730 --> 00:11:04,209
integration using bamboo on also we have

00:10:59,360 --> 00:11:04,209

YouTube URL: https://www.youtube.com/watch?v=6SYLJR7uKSQ


