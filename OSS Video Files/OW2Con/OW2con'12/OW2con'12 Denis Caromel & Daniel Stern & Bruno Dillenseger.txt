Title: OW2con'12 Denis Caromel & Daniel Stern & Bruno Dillenseger
Publication date: 2012-12-10
Playlist: OW2con'12
Description: 
	ProActive CLIF: Cloud Enabled Load Injection - Denis Caromel, ActiveEon & Bruno Dillenseger, Orange
AbstractÂ : This presentation shows how the 2 OW2 frameworks CLIF and ProActive are successfully used together in order to provide Cloud Enabled Load Injection.
Captions: 
	00:00:00,000 --> 00:00:07,470
good afternoon actually it's a from end

00:00:03,300 --> 00:00:10,230
to the cloud so I'm very glad to put on

00:00:07,470 --> 00:00:13,580
here what has been and what is still a

00:00:10,230 --> 00:00:16,710
great collaboration between around

00:00:13,580 --> 00:00:20,279
actively on and aidan area so we have

00:00:16,710 --> 00:00:23,670
been working on the integration of 20 w

00:00:20,279 --> 00:00:26,820
to project proactive and cliff in order

00:00:23,670 --> 00:00:31,349
to bring some added value so proactive

00:00:26,820 --> 00:00:33,210
is a platform which enables both cloud

00:00:31,349 --> 00:00:36,390
aggregation of existing resources

00:00:33,210 --> 00:00:39,629
together with the use of public cloud

00:00:36,390 --> 00:00:42,750
and cliff is a loud injection framework

00:00:39,629 --> 00:00:46,410
which make it possible to easily deploy

00:00:42,750 --> 00:00:52,050
application deploy load onto the

00:00:46,410 --> 00:00:54,960
applications and also deploy some tools

00:00:52,050 --> 00:00:57,059
that will gather the information about

00:00:54,960 --> 00:01:00,539
what is going on with the with system

00:00:57,059 --> 00:01:03,059
and the tests and we've been taking

00:01:00,539 --> 00:01:05,670
advantage of that to do it as you can

00:01:03,059 --> 00:01:07,920
see on the title in a community manner

00:01:05,670 --> 00:01:12,090
in a community manner in that way mean

00:01:07,920 --> 00:01:16,520
that you end user of the system can even

00:01:12,090 --> 00:01:20,100
provide the machines in order to

00:01:16,520 --> 00:01:22,619
contribute to the platform and also to

00:01:20,100 --> 00:01:26,880
get to a very distributed platform which

00:01:22,619 --> 00:01:28,320
is a very important quality for a test

00:01:26,880 --> 00:01:30,689
system because you want to test

00:01:28,320 --> 00:01:33,479
different latencies and different band

00:01:30,689 --> 00:01:36,840
wave in your system ok so this is what

00:01:33,479 --> 00:01:39,780
we'll be presenting today so I will give

00:01:36,840 --> 00:01:42,360
a short introduction then Danielle will

00:01:39,780 --> 00:01:45,479
explain the idea being a community cloud

00:01:42,360 --> 00:01:48,360
and finally Bruno will explain the

00:01:45,479 --> 00:01:51,869
architecture of the system and what we

00:01:48,360 --> 00:01:55,259
achieve in some perspective ok so

00:01:51,869 --> 00:01:58,290
proactive make it possible to actually

00:01:55,259 --> 00:02:02,250
gather physical resources in the company

00:01:58,290 --> 00:02:05,460
and to use external resources

00:02:02,250 --> 00:02:07,950
like my windows azure cloud platform but

00:02:05,460 --> 00:02:11,730
we also interface with OpenStack

00:02:07,950 --> 00:02:15,210
instances and will HP cloud for instance

00:02:11,730 --> 00:02:17,670
and on top of that we provide scheduling

00:02:15,210 --> 00:02:20,510
and orchestration so a construction in

00:02:17,670 --> 00:02:22,890
the sense that we have a workflow engine

00:02:20,510 --> 00:02:26,630
integrated in the platform which enables

00:02:22,890 --> 00:02:30,090
to basically manage what we call

00:02:26,630 --> 00:02:34,500
workload management for a company and we

00:02:30,090 --> 00:02:37,260
enable the enactment of workflows so its

00:02:34,500 --> 00:02:39,750
workload calm after people workflows

00:02:37,260 --> 00:02:42,470
where you want to deploy actually

00:02:39,750 --> 00:02:45,510
application in your platform and

00:02:42,470 --> 00:02:50,400
actually we can deploy application we

00:02:45,510 --> 00:02:56,570
both native executable but also software

00:02:50,400 --> 00:03:00,030
appliance virtual a system okay so

00:02:56,570 --> 00:03:02,010
proactive audibility project are a lot

00:03:00,030 --> 00:03:05,400
of future world world and activity ins

00:03:02,010 --> 00:03:09,120
as some customers so to refer to this

00:03:05,400 --> 00:03:12,540
morning keynote talks it's a free free

00:03:09,120 --> 00:03:16,680
model where we provide the entire system

00:03:12,540 --> 00:03:20,640
in open source within 0w to base and we

00:03:16,680 --> 00:03:24,690
have customer in IT in engineering in

00:03:20,640 --> 00:03:28,769
finance biotech and also in a medina and

00:03:24,690 --> 00:03:32,790
distribution okay so as a perspective i

00:03:28,769 --> 00:03:35,060
just like to draw strong point about the

00:03:32,790 --> 00:03:37,440
need for orchestration and cloud

00:03:35,060 --> 00:03:40,079
brokering so we are also part of the

00:03:37,440 --> 00:03:43,049
compatible one project and proactive

00:03:40,079 --> 00:03:45,739
make it possible to aggregate seems like

00:03:43,049 --> 00:03:48,750
local resources OpenStack and

00:03:45,739 --> 00:03:51,209
proprietary system like VMware for

00:03:48,750 --> 00:03:54,709
instance so it's also a migration for

00:03:51,209 --> 00:03:58,590
existing proprietary software to a

00:03:54,709 --> 00:04:00,900
system which is more open source and we

00:03:58,590 --> 00:04:04,530
actually presenting this kind of

00:04:00,900 --> 00:04:07,210
integration with GDF SUEZ at ministry of

00:04:04,530 --> 00:04:09,370
finance in a big project call you

00:04:07,210 --> 00:04:11,560
clouds we are we actually aggregating

00:04:09,370 --> 00:04:13,570
different part of the system so i said

00:04:11,560 --> 00:04:16,650
just in the previous talk it's very

00:04:13,570 --> 00:04:21,010
important to add the capacity to mix

00:04:16,650 --> 00:04:23,770
local resources with public and specific

00:04:21,010 --> 00:04:26,410
cloud so within that framework we have

00:04:23,770 --> 00:04:28,960
been working to build a community cloud

00:04:26,410 --> 00:04:33,360
and Danielle will explain in that

00:04:28,960 --> 00:04:33,360
framework what is a community cloud

00:04:34,530 --> 00:04:41,550
Thank You Dennis so I will shortly

00:04:38,680 --> 00:04:46,960
present you what a community cloud

00:04:41,550 --> 00:04:50,280
community cloud is actually and more or

00:04:46,960 --> 00:04:54,640
less the good old idea for the grid and

00:04:50,280 --> 00:04:58,300
it's still always economically

00:04:54,640 --> 00:05:03,760
innovative the the basic idea is to make

00:04:58,300 --> 00:05:08,740
a cloud by using not only large data

00:05:03,760 --> 00:05:15,370
centers but also no more regular small

00:05:08,740 --> 00:05:18,660
resources or ma my pc you PCL as it ran

00:05:15,370 --> 00:05:22,960
to integrate them to an existing cloud

00:05:18,660 --> 00:05:26,860
so from a certain certain point of view

00:05:22,960 --> 00:05:31,360
this application may be one of the many

00:05:26,860 --> 00:05:34,360
use cases of the community cloud that's

00:05:31,360 --> 00:05:37,090
why I present you what what's a

00:05:34,360 --> 00:05:40,980
committee cloud committee cloud is

00:05:37,090 --> 00:05:44,380
defined when the members of a community

00:05:40,980 --> 00:05:50,170
decide to share their CPU storage

00:05:44,380 --> 00:05:54,850
networks etc in order to build a common

00:05:50,170 --> 00:06:00,970
platform on top of which running cloud

00:05:54,850 --> 00:06:03,970
services the this this cloud platform

00:06:00,970 --> 00:06:09,100
may may be managed by the community

00:06:03,970 --> 00:06:12,760
itself or the community may delegate to

00:06:09,100 --> 00:06:16,720
an external manager for example a big

00:06:12,760 --> 00:06:17,880
operator like a range and 444 telecom

00:06:16,720 --> 00:06:21,450
operator

00:06:17,880 --> 00:06:25,140
this is highly legitimate to to make

00:06:21,450 --> 00:06:31,590
people share their results because after

00:06:25,140 --> 00:06:34,850
all the telecommunications is a matter

00:06:31,590 --> 00:06:38,840
of making people communicate and share

00:06:34,850 --> 00:06:43,350
something so this is why at orange labs

00:06:38,840 --> 00:06:46,890
we have been working in on this subject

00:06:43,350 --> 00:06:50,580
for two or three years and this is not

00:06:46,890 --> 00:06:53,720
the first case of our committee glad we

00:06:50,580 --> 00:06:59,490
we have started two or three years ago

00:06:53,720 --> 00:07:04,520
with with activity on first it was on a

00:06:59,490 --> 00:07:10,280
use case dedicated to video application

00:07:04,520 --> 00:07:15,260
this is the normal the basic basic

00:07:10,280 --> 00:07:19,680
community cloud case where several

00:07:15,260 --> 00:07:24,060
several SM is in the video sector decide

00:07:19,680 --> 00:07:28,800
to share the resource so the Coweta

00:07:24,060 --> 00:07:33,060
clouds have several technological

00:07:28,800 --> 00:07:36,600
problems storage optimization security

00:07:33,060 --> 00:07:40,230
and performance because the committee

00:07:36,600 --> 00:07:44,070
clouds are subject to resource term etc

00:07:40,230 --> 00:07:48,900
but this is not the subject to today so

00:07:44,070 --> 00:07:55,890
I hand over to to preneur to present the

00:07:48,900 --> 00:07:59,370
rest of the application thank you thank

00:07:55,890 --> 00:08:01,620
you danielle and good evening so what to

00:07:59,370 --> 00:08:05,280
do with the community cloud what about

00:08:01,620 --> 00:08:07,710
the testing when you want to test the

00:08:05,280 --> 00:08:09,810
performance of a system under test here

00:08:07,710 --> 00:08:13,650
and i think about your web application

00:08:09,810 --> 00:08:15,900
or your dns cluster or whatever you need

00:08:13,650 --> 00:08:18,510
to have big resources so typically you

00:08:15,900 --> 00:08:20,370
build a small data center made of

00:08:18,510 --> 00:08:23,700
servers and network equipment and

00:08:20,370 --> 00:08:25,800
software to generate traffic flow

00:08:23,700 --> 00:08:28,200
requests on your system under test and

00:08:25,800 --> 00:08:29,639
then you measure response time and

00:08:28,200 --> 00:08:32,010
resources edges

00:08:29,639 --> 00:08:34,560
Thank like that and so this is very

00:08:32,010 --> 00:08:39,570
costly and not all projects can afford

00:08:34,560 --> 00:08:41,610
buying such a restrictor so in but if

00:08:39,570 --> 00:08:44,730
you look at any company there are lots

00:08:41,610 --> 00:08:48,690
of PCs tens hundreds or thousands of

00:08:44,730 --> 00:08:51,709
pieces like here at orange lab that does

00:08:48,690 --> 00:08:55,440
that do nothing at night or during

00:08:51,709 --> 00:08:58,019
weekends so what about how about

00:08:55,440 --> 00:09:03,000
building a community cloud and running a

00:08:58,019 --> 00:09:05,820
load test with it if you want to do that

00:09:03,000 --> 00:09:09,560
first thing we'll do is to take audio

00:09:05,820 --> 00:09:12,540
Bluetooth Low testing framework cliff

00:09:09,560 --> 00:09:17,310
which is a project i'm leading since the

00:09:12,540 --> 00:09:20,370
very beginning in the name of orange the

00:09:17,310 --> 00:09:22,800
peculiarities of cliff is that it

00:09:20,370 --> 00:09:27,800
provides a high power load injection

00:09:22,800 --> 00:09:31,260
support you can imagine tests including

00:09:27,800 --> 00:09:35,670
hundreds of load injectors and with

00:09:31,260 --> 00:09:37,500
millions of virtual users with cliff you

00:09:35,670 --> 00:09:41,970
will be able to deploy load injectors

00:09:37,500 --> 00:09:45,269
and probes and to measure response times

00:09:41,970 --> 00:09:48,260
and resources usage cliff is very

00:09:45,269 --> 00:09:51,930
flexible and that it provides different

00:09:48,260 --> 00:09:54,060
variety of user interfaces gooeys and

00:09:51,930 --> 00:09:58,110
common light on integration to eclipse

00:09:54,060 --> 00:10:00,890
or jenkins Freya for example also it's

00:09:58,110 --> 00:10:04,920
flexible in that it provides it supports

00:10:00,890 --> 00:10:07,490
many different protocols the main ones

00:10:04,920 --> 00:10:11,910
are listed here but you can also

00:10:07,490 --> 00:10:15,930
integrate your own protocol proprietary

00:10:11,910 --> 00:10:17,519
or new that is not included today with

00:10:15,930 --> 00:10:22,560
an eclipse with other so we can

00:10:17,519 --> 00:10:25,410
integrate your own injector in java has

00:10:22,560 --> 00:10:28,230
a package particularity also the

00:10:25,410 --> 00:10:34,250
architectural of cliff is based and the

00:10:28,230 --> 00:10:37,260
w2's fractal component model so the

00:10:34,250 --> 00:10:41,550
distribution aspect is very important in

00:10:37,260 --> 00:10:44,120
cliff it's very critical so it is based

00:10:41,550 --> 00:10:47,550
on communication with their where

00:10:44,120 --> 00:10:51,750
fractal rmi which is a reference for

00:10:47,550 --> 00:10:55,769
implementation from a w-2 as of current

00:10:51,750 --> 00:10:58,560
svn shrank and available binary

00:10:55,769 --> 00:11:02,370
distribution this is based on factor re

00:10:58,560 --> 00:11:06,570
y and it works all right as long as you

00:11:02,370 --> 00:11:09,120
stay in you know single Network I would

00:11:06,570 --> 00:11:11,899
say and that you don't have a big big

00:11:09,120 --> 00:11:15,450
deployment so when it comes to a wide

00:11:11,899 --> 00:11:18,300
test with many load injectors on probes

00:11:15,450 --> 00:11:23,870
across several networks you may

00:11:18,300 --> 00:11:26,160
encounter reliability troubles and also

00:11:23,870 --> 00:11:29,190
troubles with routing issues with

00:11:26,160 --> 00:11:33,050
private network so we needed something

00:11:29,190 --> 00:11:37,230
as stronger than ever my more adaptable

00:11:33,050 --> 00:11:40,110
as a communication middleware and we use

00:11:37,230 --> 00:11:42,630
proactive because first of all virally

00:11:40,110 --> 00:11:46,230
provides those kind of features it's an

00:11:42,630 --> 00:11:49,050
ability to project it's a very good

00:11:46,230 --> 00:11:54,779
communication middleware with a lot of

00:11:49,050 --> 00:11:58,620
maturity and while also it has a fractal

00:11:54,779 --> 00:12:02,940
flavor through the great component model

00:11:58,620 --> 00:12:05,279
implementation and we built with

00:12:02,940 --> 00:12:09,089
activity on we collaborated in order to

00:12:05,279 --> 00:12:12,600
build this new branch of cliff based on

00:12:09,089 --> 00:12:15,230
proactive so if you want to build our

00:12:12,600 --> 00:12:18,000
load test with cliff on community cloud

00:12:15,230 --> 00:12:20,029
will use proactive not only for its

00:12:18,000 --> 00:12:23,279
advanced communication support but also

00:12:20,029 --> 00:12:26,610
for the cloud related

00:12:23,279 --> 00:12:31,139
features so here there is the system

00:12:26,610 --> 00:12:33,420
under test here there is our community

00:12:31,139 --> 00:12:36,959
cloud with all the contributors or the

00:12:33,420 --> 00:12:41,129
pieces that are available on each PC on

00:12:36,959 --> 00:12:43,850
each PC will run a proactive agent those

00:12:41,129 --> 00:12:48,050
agents will register themselves into the

00:12:43,850 --> 00:12:51,540
practice resourcing node so this node

00:12:48,050 --> 00:12:54,839
resourcing node will know which

00:12:51,540 --> 00:12:56,910
resources are available because in the

00:12:54,839 --> 00:13:01,110
community cloud resources appear and

00:12:56,910 --> 00:13:03,480
disappear very very fun and at the other

00:13:01,110 --> 00:13:06,720
at the other end of the chain of the

00:13:03,480 --> 00:13:09,540
preference tester he or she defines a

00:13:06,720 --> 00:13:12,569
lot test with cliff it uploads it to a

00:13:09,540 --> 00:13:16,050
loading to a continuous integration

00:13:12,569 --> 00:13:18,449
server based on Jenkins and the

00:13:16,050 --> 00:13:22,079
practically flag in if you don't know

00:13:18,449 --> 00:13:26,370
what Jenkins is just think of it just as

00:13:22,079 --> 00:13:31,170
a web GUI for a key and then when the

00:13:26,370 --> 00:13:35,339
tester wants to run a test it integrates

00:13:31,170 --> 00:13:37,589
it interacts with this gooey and then a

00:13:35,339 --> 00:13:41,819
job will be submitted to the practice

00:13:37,589 --> 00:13:44,699
scheduling node and then the scheduling

00:13:41,819 --> 00:13:49,920
node will find the right number of

00:13:44,699 --> 00:13:53,910
resources in order to run the test so

00:13:49,920 --> 00:13:58,259
there will be a one one computer here

00:13:53,910 --> 00:14:01,620
used for each load injector so I have to

00:13:58,259 --> 00:14:05,009
finish now with the perspectives we are

00:14:01,620 --> 00:14:07,949
finishing currently an infrastructure to

00:14:05,009 --> 00:14:10,920
run friendly user test of proactive

00:14:07,949 --> 00:14:14,850
click on community cloud in

00:14:10,920 --> 00:14:19,050
collaboration with a given as far as the

00:14:14,850 --> 00:14:21,290
escapees concern will be go will be

00:14:19,050 --> 00:14:24,720
going further into the integration of

00:14:21,290 --> 00:14:27,329
practice as the main communication

00:14:24,720 --> 00:14:30,149
middleware for cliff as in this vent

00:14:27,329 --> 00:14:31,360
rank and to do this we collaborate

00:14:30,149 --> 00:14:34,200
within the open cloud where

00:14:31,360 --> 00:14:36,519
project and the other the other

00:14:34,200 --> 00:14:40,450
perspective is that we want also to

00:14:36,519 --> 00:14:43,870
integrate to aggregate various sources

00:14:40,450 --> 00:14:48,399
of resources like community results

00:14:43,870 --> 00:14:52,980
clouds and also bigger data center based

00:14:48,399 --> 00:14:52,980

YouTube URL: https://www.youtube.com/watch?v=JvdC-6UkxmI


