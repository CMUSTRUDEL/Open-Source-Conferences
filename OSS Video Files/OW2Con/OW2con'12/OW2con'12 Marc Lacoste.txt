Title: OW2con'12 Marc Lacoste
Publication date: 2012-12-10
Playlist: OW2con'12
Description: 
	VESPA: Multi-Layered Self-Protection for IaaS Clouds - Marc Lacoste, Orange Labs. Abstract : Self-protection has raised growing interest as possible element of answer to the cloud protection challenge. Faced with multiple threats and heterogeneous defense systems, the autonomic approach proposes simpler, stronger, and more efficient cloud security management. Previous solutions fall at the last hurdle, overlooking one or several key desirable features such as flexible security policies, cross-layered defense, multiple control granularities, and open security architectures. This talk presents VESPA, an open self-protection architecture and framework for cloud infrastructures that overcomes the previous limitations. Developed in the OpenCloudWare project, VESPA adopts a policy-based management approach, and allows a two-level regulation of security, both within a software layer and across layers. Flexible coordination between self-protection loops allows enforcing a rich spectrum of security strategies such as cross-layer detection and reaction. A multi-plane, extensible architecture also enables simple integration of commodity detection and reaction components. Evaluation results on a VESPA KVM-based implementation show that the design is applicable for effective and yet flexible self-protection of cloud infrastructures.
Captions: 
	00:00:12,920 --> 00:00:20,760
so a good afternoon good evening

00:00:15,570 --> 00:00:24,840
everyone so today i will talk to you

00:00:20,760 --> 00:00:29,910
about a totally different topic which is

00:00:24,840 --> 00:00:33,420
about security and about we've talked a

00:00:29,910 --> 00:00:35,100
lot about automation and i will talk to

00:00:33,420 --> 00:00:38,760
you about a project we've been working

00:00:35,100 --> 00:00:42,570
on which is Vespa to go to work a fully

00:00:38,760 --> 00:00:45,690
automated cloud security so this is the

00:00:42,570 --> 00:00:49,079
result of a collaboration between orange

00:00:45,690 --> 00:00:51,360
and telecom Street Paris and it was work

00:00:49,079 --> 00:00:54,809
also performed within the open cloud

00:00:51,360 --> 00:00:58,649
where project so a bit of motivation as

00:00:54,809 --> 00:01:03,270
you probably know all due to sheer

00:00:58,649 --> 00:01:05,729
complexity security has become a number

00:01:03,270 --> 00:01:08,790
one production stopper to cloud

00:01:05,729 --> 00:01:11,040
computing you know all the bright side

00:01:08,790 --> 00:01:16,530
of the cloud computing but this is the

00:01:11,040 --> 00:01:19,439
dark side and this complexity leaves the

00:01:16,530 --> 00:01:23,490
door open to many types of threats so

00:01:19,439 --> 00:01:26,400
coming from the inside legitimate users

00:01:23,490 --> 00:01:29,479
/ privileged admins or from the outsides

00:01:26,400 --> 00:01:32,880
and here you have a number of them and

00:01:29,479 --> 00:01:37,130
when you look on the side of the defense

00:01:32,880 --> 00:01:39,799
and you have a great heterogeneity both

00:01:37,130 --> 00:01:42,570
undertook Lee in the different layers or

00:01:39,799 --> 00:01:47,270
horizontally between the network and the

00:01:42,570 --> 00:01:50,360
system so to master a mushrooming

00:01:47,270 --> 00:01:54,060
virginity and vulnerability

00:01:50,360 --> 00:01:58,350
self-protection has been advocated as a

00:01:54,060 --> 00:02:01,829
promising next step to fight this

00:01:58,350 --> 00:02:04,680
situation and with the promise of a

00:02:01,829 --> 00:02:07,439
simpler stronger more efficient and more

00:02:04,680 --> 00:02:10,319
flexible protection through automation

00:02:07,439 --> 00:02:11,210
of security with well-known benefits

00:02:10,319 --> 00:02:13,700
such as

00:02:11,210 --> 00:02:16,100
that means lighter administration lower

00:02:13,700 --> 00:02:20,360
incidence response time or reduce error

00:02:16,100 --> 00:02:23,120
rates and so this gives rise to the

00:02:20,360 --> 00:02:24,920
concept of self protecting or self

00:02:23,120 --> 00:02:28,490
defending clothes depending on the

00:02:24,920 --> 00:02:33,050
terminology however there remains one

00:02:28,490 --> 00:02:38,120
but and that's when big butt is how do

00:02:33,050 --> 00:02:40,460
you design self-protecting clouds so to

00:02:38,120 --> 00:02:43,820
achieve that goal you must be faced with

00:02:40,460 --> 00:02:47,750
three major challenges challenge number

00:02:43,820 --> 00:02:51,740
one is multi layer multi layering so to

00:02:47,750 --> 00:02:53,900
put it simply the infrastructure of the

00:02:51,740 --> 00:02:56,720
cloud is built from a number of

00:02:53,900 --> 00:03:00,200
different layers and each layer has its

00:02:56,720 --> 00:03:02,210
own security mechanisms however the

00:03:00,200 --> 00:03:05,560
security mechanisms generally do not

00:03:02,210 --> 00:03:09,170
talk to one another however the attacker

00:03:05,560 --> 00:03:11,860
will try to attack infrastructure using

00:03:09,170 --> 00:03:14,990
several layers at once so some things

00:03:11,860 --> 00:03:20,120
must be done there challenge number two

00:03:14,990 --> 00:03:21,770
is multilateral T so here the fact is

00:03:20,120 --> 00:03:23,660
that the cloud includes multiple

00:03:21,770 --> 00:03:26,690
stakeholders which have their own

00:03:23,660 --> 00:03:30,050
security objectives their own flex

00:03:26,690 --> 00:03:33,100
policies and thus it requires different

00:03:30,050 --> 00:03:36,160
monitoring granularity to try to

00:03:33,100 --> 00:03:39,650
reconcile those different policies and

00:03:36,160 --> 00:03:42,440
number three is openness we're not in a

00:03:39,650 --> 00:03:44,950
closed system the topology of the

00:03:42,440 --> 00:03:48,380
different stakeholders is the dynamic

00:03:44,950 --> 00:03:51,980
you have new threads which may arise

00:03:48,380 --> 00:03:54,800
into the system which may be unknown and

00:03:51,980 --> 00:03:57,350
so here chief concerns may be

00:03:54,800 --> 00:04:00,050
interoperability with third party

00:03:57,350 --> 00:04:05,270
security components and so you must have

00:04:00,050 --> 00:04:08,090
an open architecture so to build to face

00:04:05,270 --> 00:04:13,670
these concerns to build self-protecting

00:04:08,090 --> 00:04:16,280
clouds you must face and you must design

00:04:13,670 --> 00:04:19,630
your you must cook your cloud using four

00:04:16,280 --> 00:04:22,580
major principle principle number one is

00:04:19,630 --> 00:04:25,039
positive beistle protection

00:04:22,580 --> 00:04:27,770
that is to say the architecture should

00:04:25,039 --> 00:04:31,250
be a refinement of a well-defined

00:04:27,770 --> 00:04:33,500
adaptation model based on policies which

00:04:31,250 --> 00:04:36,789
brings well-known benefits in terms of

00:04:33,500 --> 00:04:39,860
adaptability principle number two is

00:04:36,789 --> 00:04:42,110
cross-layer defense that is to say the

00:04:39,860 --> 00:04:45,409
security mechanisms should not be placed

00:04:42,110 --> 00:04:47,689
only in one layer only in terms of

00:04:45,409 --> 00:04:49,430
detection or reaction but they should be

00:04:47,689 --> 00:04:52,400
synchronized between the different

00:04:49,430 --> 00:04:54,860
layers in order to to get the overall

00:04:52,400 --> 00:04:58,669
picture of an attack principle number

00:04:54,860 --> 00:05:00,169
three multiple self-protection loops you

00:04:58,669 --> 00:05:02,960
must have different levels of

00:05:00,169 --> 00:05:05,659
granularity to manage security so you

00:05:02,960 --> 00:05:07,849
must have different loops to automate

00:05:05,659 --> 00:05:10,840
and regulate security that must be

00:05:07,849 --> 00:05:13,599
defined and coordinated and finally

00:05:10,840 --> 00:05:16,539
principle number four open architecture

00:05:13,599 --> 00:05:19,190
you must have in your infrastructure

00:05:16,539 --> 00:05:22,219
different detection and reaction

00:05:19,190 --> 00:05:24,740
strategies and mechanisms to be able to

00:05:22,219 --> 00:05:27,199
face unknown threats and to be able to

00:05:24,740 --> 00:05:31,400
include new security of the shelf

00:05:27,199 --> 00:05:34,610
component in the architecture so these

00:05:31,400 --> 00:05:39,800
are principles now come to reality so

00:05:34,610 --> 00:05:42,409
what is vespa so vespa stands for

00:05:39,800 --> 00:05:44,839
virtual environment for self-protecting

00:05:42,409 --> 00:05:47,330
architecture so it's an autonomic

00:05:44,839 --> 00:05:50,389
security framework for regulating

00:05:47,330 --> 00:05:54,650
protection of just resources based on

00:05:50,389 --> 00:05:58,849
the previous principles so its aim is to

00:05:54,650 --> 00:06:01,490
regulate security automatically based on

00:05:58,849 --> 00:06:04,069
the previous principles with cross a

00:06:01,490 --> 00:06:06,589
cross-layer approach multiple levels of

00:06:04,069 --> 00:06:10,550
supervision granularity and an open and

00:06:06,589 --> 00:06:13,159
flexible architecture flex vespa is also

00:06:10,550 --> 00:06:16,009
a framework with an implementation of a

00:06:13,159 --> 00:06:21,050
kvm and a typical application can be

00:06:16,009 --> 00:06:24,349
used for risk aware Grindtime manager

00:06:21,050 --> 00:06:27,680
quarantine of VMs so the idea here is

00:06:24,349 --> 00:06:30,529
above your infrastructure yes you should

00:06:27,680 --> 00:06:32,200
propose autonomic management playing

00:06:30,529 --> 00:06:36,030
with the

00:06:32,200 --> 00:06:38,770
section decision and reaction steps

00:06:36,030 --> 00:06:40,840
typically an intrusion detection systems

00:06:38,770 --> 00:06:44,440
that will collect security relevant

00:06:40,840 --> 00:06:47,890
events that will feed these events to a

00:06:44,440 --> 00:06:50,230
decision center which will be able to

00:06:47,890 --> 00:06:53,530
take the security decision then to

00:06:50,230 --> 00:06:55,510
transmit orders to the firewall in order

00:06:53,530 --> 00:07:01,120
to dynamically according to the risk

00:06:55,510 --> 00:07:05,700
level control enter vm communications so

00:07:01,120 --> 00:07:09,460
in more detail how does Vesper work so

00:07:05,700 --> 00:07:12,580
the vespa system architecture is a layer

00:07:09,460 --> 00:07:15,490
oriented architecture organized into a

00:07:12,580 --> 00:07:18,310
number of plates so here you have a

00:07:15,490 --> 00:07:21,240
picture of gas infrastructure with a

00:07:18,310 --> 00:07:24,700
number of planes which are represented

00:07:21,240 --> 00:07:26,950
vertically so layer one may be the vm

00:07:24,700 --> 00:07:29,470
layer they are two maybe the hypervisor

00:07:26,950 --> 00:07:34,210
layer layer n maybe the physical layer

00:07:29,470 --> 00:07:36,220
and you have four planes at the bottom

00:07:34,210 --> 00:07:39,340
you have the resource plane which are

00:07:36,220 --> 00:07:41,650
the resources you want to protect above

00:07:39,340 --> 00:07:43,900
you have the security plane which

00:07:41,650 --> 00:07:46,810
contains a number of detection and

00:07:43,900 --> 00:07:49,510
reaction components which may act on the

00:07:46,810 --> 00:07:51,430
behavior and state of these resources so

00:07:49,510 --> 00:07:55,570
think of them as intrusion detection

00:07:51,430 --> 00:07:57,970
system or firewalls at the top you have

00:07:55,570 --> 00:08:00,760
the orchestration plane which contains

00:07:57,970 --> 00:08:03,340
the decision-making logic to manage

00:08:00,760 --> 00:08:06,880
security both within a layer and a

00:08:03,340 --> 00:08:08,920
cross-layer and between the security

00:08:06,880 --> 00:08:11,350
plane and the asian play and the

00:08:08,920 --> 00:08:14,260
orchestration plane you have a mediation

00:08:11,350 --> 00:08:17,530
layer built from a number of agents so

00:08:14,260 --> 00:08:20,700
you have two hierarchies of agents one

00:08:17,530 --> 00:08:23,020
hierarchy for detection to aggregate

00:08:20,700 --> 00:08:27,700
events coming from the security

00:08:23,020 --> 00:08:30,640
components through the decision layer

00:08:27,700 --> 00:08:34,000
and when you get the order from the

00:08:30,640 --> 00:08:36,760
decision layer a reaction hierarchy of

00:08:34,000 --> 00:08:39,790
agents to propagate that decision down

00:08:36,760 --> 00:08:41,620
to the security components so then you

00:08:39,790 --> 00:08:44,169
have a satisfaction of the best porn

00:08:41,620 --> 00:08:47,829
principles basically

00:08:44,169 --> 00:08:49,870
the framework is policy based which

00:08:47,829 --> 00:08:52,829
allows you to manage security with a

00:08:49,870 --> 00:08:56,070
well-defined self-protection model

00:08:52,829 --> 00:09:00,550
protection is automated as at two levels

00:08:56,070 --> 00:09:02,889
both within and across yes layers this

00:09:00,550 --> 00:09:07,329
different self-protection loops may may

00:09:02,889 --> 00:09:10,149
be flexibly orchestrated which allows to

00:09:07,329 --> 00:09:14,579
put in place a rich defense strategy and

00:09:10,149 --> 00:09:17,380
finally this architecture is layered

00:09:14,579 --> 00:09:19,870
extensible in order to be able to

00:09:17,380 --> 00:09:24,579
introduce in the architecture easily of

00:09:19,870 --> 00:09:26,440
the shelf security components so I will

00:09:24,579 --> 00:09:29,579
not bother you with the details of the

00:09:26,440 --> 00:09:34,300
security model since you have asked

00:09:29,579 --> 00:09:37,600
traditionally assets threads managers to

00:09:34,300 --> 00:09:39,940
protect them and the framework is policy

00:09:37,600 --> 00:09:42,550
oriented just to give you a flavor of

00:09:39,940 --> 00:09:47,170
how it works I will just show you how

00:09:42,550 --> 00:09:52,269
the agent plane is built so in the

00:09:47,170 --> 00:09:56,320
bottom you have agents you have security

00:09:52,269 --> 00:09:59,800
components which are typically intrusion

00:09:56,320 --> 00:10:01,149
detection systems or firewalls and at

00:09:59,800 --> 00:10:04,449
the top you have the decision-making

00:10:01,149 --> 00:10:08,079
logic using orchestrators and then you

00:10:04,449 --> 00:10:10,390
perform the loop as follows you sense

00:10:08,079 --> 00:10:13,690
the security context from the security

00:10:10,390 --> 00:10:15,399
components you aggregate this context in

00:10:13,690 --> 00:10:18,880
order to get the overall picture of your

00:10:15,399 --> 00:10:21,459
security context going up through the

00:10:18,880 --> 00:10:24,130
hierarchy of detection agents you take a

00:10:21,459 --> 00:10:26,170
decision to reconfigure or not the

00:10:24,130 --> 00:10:29,500
security policy in the horizontal

00:10:26,170 --> 00:10:32,279
orchestrator and then you push that

00:10:29,500 --> 00:10:36,370
decision down to the security component

00:10:32,279 --> 00:10:39,790
into more detail I will this figure

00:10:36,370 --> 00:10:42,610
shows you how to implement risk aware

00:10:39,790 --> 00:10:45,010
Quan time management so without going

00:10:42,610 --> 00:10:48,699
into the detail what you can see is that

00:10:45,010 --> 00:10:51,970
you have the different planes in the

00:10:48,699 --> 00:10:54,490
different colors and what should be able

00:10:51,970 --> 00:10:55,190
to the main points to remember here is

00:10:54,490 --> 00:10:56,660
that

00:10:55,190 --> 00:10:58,940
you have three main loops in the

00:10:56,660 --> 00:11:01,550
infrastructure you can have a feedback

00:10:58,940 --> 00:11:04,400
loop feedback security loop just at the

00:11:01,550 --> 00:11:07,100
vm level basically you detect the virus

00:11:04,400 --> 00:11:09,530
in your virtual machine and you're you

00:11:07,100 --> 00:11:11,480
are able to clean that virus within the

00:11:09,530 --> 00:11:14,510
virtual machine that's the first loop

00:11:11,480 --> 00:11:16,670
second loop you want to go a bit further

00:11:14,510 --> 00:11:18,860
you want to cut the communication and

00:11:16,670 --> 00:11:22,130
for this you're going to interact with

00:11:18,860 --> 00:11:26,870
the hypervisor and so you're going to go

00:11:22,130 --> 00:11:30,950
up into the cross-layer orchestrator and

00:11:26,870 --> 00:11:35,750
go back down to give orders to the lib

00:11:30,950 --> 00:11:38,510
Fiat 500 or third loop you may also give

00:11:35,750 --> 00:11:41,030
orders to migrate the virtual machines

00:11:38,510 --> 00:11:43,040
to secure kuantan zone and so the

00:11:41,030 --> 00:11:45,830
reaction mechanisms may be also the

00:11:43,040 --> 00:11:48,020
migration manager to migrate the virtual

00:11:45,830 --> 00:11:52,280
machines from the production environment

00:11:48,020 --> 00:11:55,280
to the quarantine zone and back so in

00:11:52,280 --> 00:11:57,980
conclusions some key points are written

00:11:55,280 --> 00:11:59,840
here to keep in mind about vespa so vest

00:11:57,980 --> 00:12:02,300
by is an architecture for effects

00:11:59,840 --> 00:12:05,750
effective and flexible self protection

00:12:02,300 --> 00:12:07,820
of gas resources basically you have to

00:12:05,750 --> 00:12:10,220
level tuning of security policies

00:12:07,820 --> 00:12:12,110
coordination of multiple loops and an

00:12:10,220 --> 00:12:14,000
open design in order to be able to

00:12:12,110 --> 00:12:16,790
integrate of the shelf security

00:12:14,000 --> 00:12:20,420
components so ongoing work actually

00:12:16,790 --> 00:12:24,440
despise about eight thousand lines of

00:12:20,420 --> 00:12:27,080
Python code running over kvm we're

00:12:24,440 --> 00:12:31,520
currently implementing a sea version

00:12:27,080 --> 00:12:34,610
using fractal using a number of security

00:12:31,520 --> 00:12:37,520
services which are aimed such as

00:12:34,610 --> 00:12:40,250
intrusion detection antivirus log

00:12:37,520 --> 00:12:44,089
analysis and the firewall and mandatory

00:12:40,250 --> 00:12:47,240
access control ongoing work is to extend

00:12:44,089 --> 00:12:49,490
a vespa to the multi-cloud setting to

00:12:47,240 --> 00:12:52,370
have inter cloud security using a

00:12:49,490 --> 00:12:55,820
security domain if you want to know more

00:12:52,370 --> 00:12:57,770
I invite you to read our paper which was

00:12:55,820 --> 00:13:01,839
recently published on international

00:12:57,770 --> 00:13:04,010
conference on autonomic computing by IBM

00:13:01,839 --> 00:13:07,160
which appeared in September and San

00:13:04,010 --> 00:13:08,270
Francisco and our be this concludes my

00:13:07,160 --> 00:13:10,250
presentation

00:13:08,270 --> 00:13:14,020
I'll be around to take questions if you

00:13:10,250 --> 00:13:14,020

YouTube URL: https://www.youtube.com/watch?v=nIiCoWHxkSg


