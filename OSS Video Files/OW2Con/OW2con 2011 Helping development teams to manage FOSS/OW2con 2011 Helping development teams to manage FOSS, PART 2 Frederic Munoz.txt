Title: OW2con 2011 Helping development teams to manage FOSS, PART 2 Frederic Munoz
Publication date: 2012-01-11
Playlist: OW2con 2011 Helping development teams to manage FOSS
Description: 
	Speaker: Freddy Munoz, Antelink
Abstract: Today, most software development teams use free and open source software (FOSS) components, because it increases the speed and the quality of the development. Many open source components are the de facto standard of their category. However, FOSS has licensing restrictions, and corporate organizations usually maintain a list of allowed and forbidden licenses. But how do you enforce this policy? How can you make sure that ALL files in your source repository, either belong to you, or fit your licensing policy?
A first, preventive approach is to train and increase the awareness of the development team to these licensing issues. Depending on the size of the team, it may be costly but necessary.
However, this does not ensure that a single individual will not add a forbidden icon or library, and jeopardize the legal status of the whole release â€” or the company, since software is becoming more and more a critical asset. Another approach is to verify what is included in the source repository, and check whether it belongs to the open-source world.
This can be done on-the-fly, whenever a new file is added into the source repository. It can also be part of the release process, as a verification step before publishing the release. In both cases, there are some tools to automate the detection process.
This talk explores the various options regarding FOSS detection, how this process can be integrated in the "software factory", and how the results can be displayed in a usable and efficient way.
Captions: 
	00:00:04,160 --> 00:00:10,769
so how we can handle this this is an

00:00:07,770 --> 00:00:14,070
important problem the needs to be so

00:00:10,769 --> 00:00:16,170
software quality depends on the right

00:00:14,070 --> 00:00:19,920
management of license so I've been

00:00:16,170 --> 00:00:22,650
telling we see three approaches we see a

00:00:19,920 --> 00:00:25,320
manual approach in which you do

00:00:22,650 --> 00:00:27,840
everything manually we see a tool based

00:00:25,320 --> 00:00:30,240
reactive approach which you produce your

00:00:27,840 --> 00:00:33,120
thing and then you able I'd what you

00:00:30,240 --> 00:00:35,969
have and you sit for license issues and

00:00:33,120 --> 00:00:39,629
we see a two days proactive approach in

00:00:35,969 --> 00:00:41,730
with you take a more send light post

00:00:39,629 --> 00:00:43,620
around you to evaluate everything as as

00:00:41,730 --> 00:00:46,410
you go through your development process

00:00:43,620 --> 00:00:49,170
so let me talk to you about the first

00:00:46,410 --> 00:00:50,760
person broke the Madeleine so in the

00:00:49,170 --> 00:00:52,620
manual approach to keep matter of

00:00:50,760 --> 00:00:54,890
tracking of every component so you go

00:00:52,620 --> 00:00:58,170
there you open up your product and

00:00:54,890 --> 00:01:00,059
whatever in whatever phase you want when

00:00:58,170 --> 00:01:02,969
the code is written or one when you have

00:01:00,059 --> 00:01:05,400
actually deliver the product and then

00:01:02,969 --> 00:01:07,200
you go and you make a list of the

00:01:05,400 --> 00:01:09,060
different components you have to take

00:01:07,200 --> 00:01:12,689
the versions it's troy you can do that

00:01:09,060 --> 00:01:16,740
with a programmer in a digital

00:01:12,689 --> 00:01:19,020
spreadsheet with strap then you maintain

00:01:16,740 --> 00:01:21,119
you maintain a lot Ashley stop those

00:01:19,020 --> 00:01:23,280
licenses and you shake for each

00:01:21,119 --> 00:01:25,729
component its license and its

00:01:23,280 --> 00:01:28,650
compatibility and you go step-by-step

00:01:25,729 --> 00:01:31,560
component by component and you do that

00:01:28,650 --> 00:01:33,869
iteratively and and finally you will

00:01:31,560 --> 00:01:37,409
have done your license checking problems

00:01:33,869 --> 00:01:39,210
very straightforward very simple however

00:01:37,409 --> 00:01:42,479
there is a little problem there this

00:01:39,210 --> 00:01:44,759
doesn't scale and it is too

00:01:42,479 --> 00:01:46,380
time-consuming you will spend most of

00:01:44,759 --> 00:01:48,780
your time tracking a license issue

00:01:46,380 --> 00:01:52,259
striking components instant instead of

00:01:48,780 --> 00:01:55,020
doing the actual work so this is not

00:01:52,259 --> 00:01:57,810
quite an effective approach a much

00:01:55,020 --> 00:02:01,740
better solution is a reactive tool

00:01:57,810 --> 00:02:04,950
supported approach English basically you

00:02:01,740 --> 00:02:06,869
deal your software are you regularly do

00:02:04,950 --> 00:02:08,520
you develop you go to the software

00:02:06,869 --> 00:02:13,220
factory and find out keep your

00:02:08,520 --> 00:02:16,290
product however at some point they're

00:02:13,220 --> 00:02:19,410
you when you have your product ready you

00:02:16,290 --> 00:02:21,930
go to someone else that has this magical

00:02:19,410 --> 00:02:24,450
machine capable of detecting open stores

00:02:21,930 --> 00:02:27,870
and doing diagonal diagnosis in your

00:02:24,450 --> 00:02:29,790
software packages you give that to that

00:02:27,870 --> 00:02:31,950
person that person passes through the

00:02:29,790 --> 00:02:34,500
machine as varied a list of different

00:02:31,950 --> 00:02:36,360
components and license I probably will

00:02:34,500 --> 00:02:38,610
advise you about different license

00:02:36,360 --> 00:02:43,770
compatibility and it will change charge

00:02:38,610 --> 00:02:47,130
you a lot of money for that so this is

00:02:43,770 --> 00:02:50,460
the more reactive approach the pervasive

00:02:47,130 --> 00:02:52,380
approach today so what's the issue there

00:02:50,460 --> 00:02:55,380
is that you are building your software

00:02:52,380 --> 00:02:57,120
you are developing your software you're

00:02:55,380 --> 00:02:59,970
passing through your all your software

00:02:57,120 --> 00:03:01,620
factory or securing your tests etc it or

00:02:59,970 --> 00:03:03,570
your continuous integration you're

00:03:01,620 --> 00:03:06,540
delivering your product and just before

00:03:03,570 --> 00:03:09,330
you release your product it goes

00:03:06,540 --> 00:03:12,450
straight through this magical name that

00:03:09,330 --> 00:03:14,790
analyzed thing produce this component

00:03:12,450 --> 00:03:16,890
list and keep that component leads back

00:03:14,790 --> 00:03:20,580
to executive and developers securing

00:03:16,890 --> 00:03:24,840
decided or lawyers decide some license

00:03:20,580 --> 00:03:27,030
or non-compliant developers get a little

00:03:24,840 --> 00:03:29,070
rusty about that change some components

00:03:27,030 --> 00:03:31,050
we play some components the whole

00:03:29,070 --> 00:03:34,170
process goes again the ship the product

00:03:31,050 --> 00:03:36,300
the database they're assuming that they

00:03:34,170 --> 00:03:39,030
are using database get updated 3

00:03:36,300 --> 00:03:45,360
positive public again they didn't give a

00:03:39,030 --> 00:03:47,670
license that impose afraid of your

00:03:45,360 --> 00:03:49,890
organization and there is regenerated

00:03:47,670 --> 00:03:52,080
sliced and they going back again to the

00:03:49,890 --> 00:03:54,600
developers and this process continues

00:03:52,080 --> 00:03:58,950
until that magical man decides that

00:03:54,600 --> 00:04:00,360
everything there is safe so as you can

00:03:58,950 --> 00:04:03,060
see the problem here is that you already

00:04:00,360 --> 00:04:06,120
do your software several times so you

00:04:03,060 --> 00:04:09,950
spend a lot of time actually replacing

00:04:06,120 --> 00:04:13,650
code that you should be knowing

00:04:09,950 --> 00:04:17,980
beforehand and getting aware of those

00:04:13,650 --> 00:04:20,200
nasty license problem so this is

00:04:17,980 --> 00:04:25,450
where were the alternative approach

00:04:20,200 --> 00:04:28,900
appears this is an alternative protein

00:04:25,450 --> 00:04:31,420
approach when you do is you build your

00:04:28,900 --> 00:04:34,990
software as you typically do you don't

00:04:31,420 --> 00:04:37,510
change almost nothing however it

00:04:34,990 --> 00:04:41,490
certainly during that development

00:04:37,510 --> 00:04:44,170
process you execute this cell line to

00:04:41,490 --> 00:04:46,660
execute destructive tools and that tool

00:04:44,170 --> 00:04:48,340
when developers are coding generates a

00:04:46,660 --> 00:04:50,650
reported tell you what all those words

00:04:48,340 --> 00:04:54,040
you have there if you have license

00:04:50,650 --> 00:04:56,410
violation or not and it goes to the next

00:04:54,040 --> 00:04:59,380
step on the software factory and then

00:04:56,410 --> 00:05:01,510
this tool execute and tells you whether

00:04:59,380 --> 00:05:04,210
you have open sirs there what's the

00:05:01,510 --> 00:05:06,370
nature of that open source etc extra I

00:05:04,210 --> 00:05:08,830
finally you get to ship your product and

00:05:06,370 --> 00:05:10,990
you perform the final check and if that

00:05:08,830 --> 00:05:15,640
chick is fine you are you're ready to

00:05:10,990 --> 00:05:19,030
ship your product everything is fine the

00:05:15,640 --> 00:05:22,000
biggest clear captain so you can do that

00:05:19,030 --> 00:05:24,610
in different ways for example you can

00:05:22,000 --> 00:05:27,450
rise your get people in the case you're

00:05:24,610 --> 00:05:32,200
using gate or another source control

00:05:27,450 --> 00:05:34,150
variable system for example your

00:05:32,200 --> 00:05:37,210
developers pushed some changes there

00:05:34,150 --> 00:05:40,660
these magical practical tools start

00:05:37,210 --> 00:05:42,790
working and the levers are report to the

00:05:40,660 --> 00:05:45,700
back to the developers with their very

00:05:42,790 --> 00:05:48,220
including open source at many impose

00:05:45,700 --> 00:05:50,530
afraid or not to the organization under

00:05:48,220 --> 00:05:53,170
code and if they're capable of finding

00:05:50,530 --> 00:05:55,240
that early on they can change the

00:05:53,170 --> 00:05:59,200
component or they can change that code

00:05:55,240 --> 00:06:01,450
snippet that is problematic without

00:05:59,200 --> 00:06:04,750
going through the whole step of

00:06:01,450 --> 00:06:06,280
compiling executing death and all the

00:06:04,750 --> 00:06:09,130
other things related to the development

00:06:06,280 --> 00:06:11,590
process this can be executed for super

00:06:09,130 --> 00:06:17,020
even in your IDE develop web developers

00:06:11,590 --> 00:06:19,450
code you can have some magical bracket

00:06:17,020 --> 00:06:21,490
tool scanning the code scanning the

00:06:19,450 --> 00:06:23,370
dependencies at all you whether use a

00:06:21,490 --> 00:06:25,830
license or not and rising not

00:06:23,370 --> 00:06:30,750
patience another when you have a license

00:06:25,830 --> 00:06:33,090
violation now the whole benefits that we

00:06:30,750 --> 00:06:38,040
are done telling seizures that your

00:06:33,090 --> 00:06:40,410
powers everyone to comply with license

00:06:38,040 --> 00:06:43,860
everyone in your wall development

00:06:40,410 --> 00:06:46,919
lifecycle is responsible for that fact

00:06:43,860 --> 00:06:50,550
on buying with license improving the

00:06:46,919 --> 00:06:53,760
quality of the software it's not just

00:06:50,550 --> 00:06:56,729
one person problem is the whole team

00:06:53,760 --> 00:06:58,530
that is implicated out there and as I

00:06:56,729 --> 00:07:01,680
like to say it's like bug detection

00:06:58,530 --> 00:07:05,310
karralys better be early you identify ER

00:07:01,680 --> 00:07:07,620
but Darrell you can correct them and the

00:07:05,310 --> 00:07:10,919
smaller is the direction is the same

00:07:07,620 --> 00:07:13,440
devices if you cut them but the license

00:07:10,919 --> 00:07:16,500
issues while you are coding then you can

00:07:13,440 --> 00:07:21,139
say a lot of money because you know both

00:07:16,500 --> 00:07:24,090
will be other steps in the process so

00:07:21,139 --> 00:07:27,150
what is the message that I want you to

00:07:24,090 --> 00:07:28,889
retain who is that prevention is very

00:07:27,150 --> 00:07:31,919
light direction we need to prevent

00:07:28,889 --> 00:07:34,700
having license issues instead of

00:07:31,919 --> 00:07:34,700

YouTube URL: https://www.youtube.com/watch?v=tEOiX-b5420


