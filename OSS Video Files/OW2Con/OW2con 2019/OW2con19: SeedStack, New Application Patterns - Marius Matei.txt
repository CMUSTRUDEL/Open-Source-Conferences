Title: OW2con19: SeedStack, New Application Patterns - Marius Matei
Publication date: 2019-06-19
Playlist: OW2con 2019
Description: 
	The design of cloud information systems requires usage of cloud ready development frameworks like SeedStack. SeedStack coding approach comes with some major benefits: compliance with open source cloud standards, modular design and clean code. Using domain driven design and bounded context concept, the microservices are finely identified. Operational elements like performance measures, APIs for connecting ressources are provided by SeedStack in order to prepare the integration of a cloud ready application with the host. SeedStack project templates and automation accelerate the development of cloud ready microservices. This presentation shows recent updates of SeedStack for building and operating modern architectures (microservices, Kafka, containers).
Captions: 
	00:00:05,810 --> 00:00:13,799
Thank You Daniela and Thank You Cedric

00:00:09,660 --> 00:00:19,859
and w2 for giving me this opportunity to

00:00:13,799 --> 00:00:22,500
be again with you this conference we

00:00:19,859 --> 00:00:26,250
will talk about patterns about software

00:00:22,500 --> 00:00:32,149
governance with cystic I'm a software

00:00:26,250 --> 00:00:38,010
architect and in 2013 my CTO asked me to

00:00:32,149 --> 00:00:40,800
to provide a stack which could give a

00:00:38,010 --> 00:00:45,570
new shape of our information system of

00:00:40,800 --> 00:00:49,590
our application so at that time the task

00:00:45,570 --> 00:00:52,199
was huge we have a lot of let's say

00:00:49,590 --> 00:00:55,640
business constraint because in PSA we

00:00:52,199 --> 00:00:58,109
have a lot of business we have

00:00:55,640 --> 00:01:00,300
manufacturing we have research and

00:00:58,109 --> 00:01:05,729
development we have retail we have human

00:01:00,300 --> 00:01:12,000
resources and newer we have connected

00:01:05,729 --> 00:01:13,350
car vehicle so we asked we had had a

00:01:12,000 --> 00:01:17,280
huge task

00:01:13,350 --> 00:01:23,400
we started in 2013 with our first

00:01:17,280 --> 00:01:27,930
internal release seed stock in in 2015

00:01:23,400 --> 00:01:30,090
our CEO asked us to to put this the

00:01:27,930 --> 00:01:34,920
stock onto open source it was the first

00:01:30,090 --> 00:01:38,880
recognition of the quality of our work

00:01:34,920 --> 00:01:41,430
in an internal form for PSA we try to do

00:01:38,880 --> 00:01:44,090
it and with the help of some people on

00:01:41,430 --> 00:01:48,329
Yahoo which are here we we did it in

00:01:44,090 --> 00:01:52,079
2015 and since that time we had a real

00:01:48,329 --> 00:01:55,020
roadmap real product roadmap which gives

00:01:52,079 --> 00:01:57,540
us the opportunity to to join the open

00:01:55,020 --> 00:01:59,759
source community and to join the most

00:01:57,540 --> 00:02:06,409
important patterns of the open source

00:01:59,759 --> 00:02:11,430
community so what is what is in stock

00:02:06,409 --> 00:02:12,879
sit stack is as you told it is a free

00:02:11,430 --> 00:02:16,719
market a framework

00:02:12,879 --> 00:02:22,920
helping you to develop application it is

00:02:16,719 --> 00:02:26,049
based on Java and it helps you to create

00:02:22,920 --> 00:02:29,500
mainly rest microservices which other

00:02:26,049 --> 00:02:33,219
let's say the core for our application

00:02:29,500 --> 00:02:36,459
today you can also create a traditional

00:02:33,219 --> 00:02:40,030
web application and since the last year

00:02:36,459 --> 00:02:43,389
we go through the cloud with several

00:02:40,030 --> 00:02:46,629
less computing like AWS lambda so you

00:02:43,389 --> 00:02:50,519
can have classic application you have

00:02:46,629 --> 00:02:53,859
can have new application all is based on

00:02:50,519 --> 00:02:56,250
a concept which the it's the domain

00:02:53,859 --> 00:02:59,370
driven design which is an innovative

00:02:56,250 --> 00:03:02,730
implementation of of the object

00:02:59,370 --> 00:03:05,500
principles which helps you to have a

00:03:02,730 --> 00:03:08,439
structured maintainable and evaluative

00:03:05,500 --> 00:03:11,169
code and also helps the developer to

00:03:08,439 --> 00:03:13,989
have a high productivity because he he

00:03:11,169 --> 00:03:17,379
is able to to share his god and to

00:03:13,989 --> 00:03:20,889
especially to to have predefined objects

00:03:17,379 --> 00:03:23,530
which are provided by the framework so

00:03:20,889 --> 00:03:26,229
on the bottom side of the image we have

00:03:23,530 --> 00:03:29,970
let's say the structure of the framework

00:03:26,229 --> 00:03:32,709
you have inside we have a Java framework

00:03:29,970 --> 00:03:34,930
you have a lot of components which we

00:03:32,709 --> 00:03:37,780
call add-ons we have a let's say a

00:03:34,930 --> 00:03:40,449
bundle of components to to deal with the

00:03:37,780 --> 00:03:42,659
most important patterns and we have the

00:03:40,449 --> 00:03:48,060
business framework which is a framework

00:03:42,659 --> 00:03:50,829
its own in order to develop your object

00:03:48,060 --> 00:03:55,900
concept you you want to put in your

00:03:50,829 --> 00:03:59,799
application so seed stock was for us in

00:03:55,900 --> 00:04:02,829
PSA first strategy enable because it

00:03:59,799 --> 00:04:05,530
helps us to to make the governance of

00:04:02,829 --> 00:04:12,669
our application seed stock is based

00:04:05,530 --> 00:04:16,509
mainly on a very common library on the

00:04:12,669 --> 00:04:20,560
open source market we system integrated

00:04:16,509 --> 00:04:23,210
these components so on our organization

00:04:20,560 --> 00:04:27,470
were able to know

00:04:23,210 --> 00:04:32,270
what application use as a library so if

00:04:27,470 --> 00:04:34,760
we have let's say a security patch to

00:04:32,270 --> 00:04:38,810
apply to our application we are able to

00:04:34,760 --> 00:04:42,260
to to know what to do and what the cost

00:04:38,810 --> 00:04:44,960
we have for this information system so

00:04:42,260 --> 00:04:47,200
we are ready to to govern and to manage

00:04:44,960 --> 00:04:52,550
our information system with the Cystic

00:04:47,200 --> 00:04:54,980
secondly for the purchasing side we can

00:04:52,550 --> 00:05:00,050
avoid vendor locking because we use open

00:04:54,980 --> 00:05:03,160
source we use standard last example is

00:05:00,050 --> 00:05:08,240
the usage of Java so we we built our

00:05:03,160 --> 00:05:13,340
this stack on a real open source release

00:05:08,240 --> 00:05:17,840
of Java so open JDK so you can never be

00:05:13,340 --> 00:05:21,350
locked with the seed stock you can you

00:05:17,840 --> 00:05:26,960
can import your own on add-ons but it's

00:05:21,350 --> 00:05:29,060
out your own on the supplier side so we

00:05:26,960 --> 00:05:32,210
can manage the interaction with our

00:05:29,060 --> 00:05:34,550
supplies because we always based on open

00:05:32,210 --> 00:05:40,300
source standards or is based on open

00:05:34,550 --> 00:05:44,419
source patterns so we can give them

00:05:40,300 --> 00:05:46,880
let's say instruction the development

00:05:44,419 --> 00:05:50,690
side we can give them training which is

00:05:46,880 --> 00:05:53,479
open source and when we work with us all

00:05:50,690 --> 00:05:56,030
is done so they we not not don't need to

00:05:53,479 --> 00:05:59,110
train them in order to to take into

00:05:56,030 --> 00:06:04,910
account our development and the last

00:05:59,110 --> 00:06:09,070
item is agility as we have an open open

00:06:04,910 --> 00:06:12,229
framework as we have let's say a Linux

00:06:09,070 --> 00:06:16,360
fashion platform for our for our

00:06:12,229 --> 00:06:20,240
framework we can integrate easily any

00:06:16,360 --> 00:06:25,940
solution which is open source in our in

00:06:20,240 --> 00:06:28,930
our framework so we are able because it

00:06:25,940 --> 00:06:34,910
is open it is based on a Linux

00:06:28,930 --> 00:06:38,240
fashion side of of a core system we can

00:06:34,910 --> 00:06:42,350
we can follow the changes and software

00:06:38,240 --> 00:06:45,830
design so if we go back in 2013 we did a

00:06:42,350 --> 00:06:49,430
traditional application CLI web

00:06:45,830 --> 00:06:54,110
application starting 2016 we were able

00:06:49,430 --> 00:07:00,080
to to deal with micro services deployed

00:06:54,110 --> 00:07:04,540
on the on paths or class and now we're

00:07:00,080 --> 00:07:08,000
also to interact with service and

00:07:04,540 --> 00:07:10,810
especially with cloud provider so we go

00:07:08,000 --> 00:07:14,720
we you go from more freedom from

00:07:10,810 --> 00:07:17,440
focusing on technical aspects to more

00:07:14,720 --> 00:07:22,280
constraint focus on business value

00:07:17,440 --> 00:07:25,040
ecosystem so if we take a look of the

00:07:22,280 --> 00:07:31,040
modern architectural design pattern

00:07:25,040 --> 00:07:33,230
let's say as seed stock has takes

00:07:31,040 --> 00:07:38,180
advantage of what we call domain driven

00:07:33,230 --> 00:07:40,550
design to build the business of the

00:07:38,180 --> 00:07:43,970
application we can deal with micro

00:07:40,550 --> 00:07:47,690
services very easily so we can can

00:07:43,970 --> 00:07:49,610
finally decouple the different

00:07:47,690 --> 00:07:52,820
components of the application we can

00:07:49,610 --> 00:07:55,160
deal also with streaming with service

00:07:52,820 --> 00:07:58,250
messaging let's say we can dealing with

00:07:55,160 --> 00:08:04,130
communication and ingestion of of data

00:07:58,250 --> 00:08:07,070
in your system and the last item we we

00:08:04,130 --> 00:08:10,660
did is the server-side in order to deal

00:08:07,070 --> 00:08:15,260
with integration with cloud native

00:08:10,660 --> 00:08:18,710
ecosystem so if we take the micro

00:08:15,260 --> 00:08:23,300
services we have here an example of how

00:08:18,710 --> 00:08:25,850
to who - to design a system with some

00:08:23,300 --> 00:08:30,080
micro services you see that each micro

00:08:25,850 --> 00:08:33,530
services has some components which

00:08:30,080 --> 00:08:35,050
provided bar by seed stack but also you

00:08:33,530 --> 00:08:38,950
have

00:08:35,050 --> 00:08:42,729
different resources integrated inside so

00:08:38,950 --> 00:08:46,210
we can do it because we have some

00:08:42,729 --> 00:08:51,340
releases which take into account basic

00:08:46,210 --> 00:08:54,010
micro-services concept so some features

00:08:51,340 --> 00:08:58,450
of the micro services are they must be

00:08:54,010 --> 00:09:01,900
lightweight in order to to deal with

00:08:58,450 --> 00:09:04,090
performance so we have an a server an

00:09:01,900 --> 00:09:07,570
embedded server undertow which is

00:09:04,090 --> 00:09:12,190
integrated with that but you can also

00:09:07,570 --> 00:09:14,440
add your own server if you want all is

00:09:12,190 --> 00:09:17,260
designed around the business because we

00:09:14,440 --> 00:09:22,810
have we have also a business framework

00:09:17,260 --> 00:09:26,590
inside based on DDD we have we can

00:09:22,810 --> 00:09:29,530
answer to the AP oriented feature with

00:09:26,590 --> 00:09:33,700
rest integration and swagger integration

00:09:29,530 --> 00:09:38,640
in seed stack we are a component which

00:09:33,700 --> 00:09:40,930
which give the design for failure

00:09:38,640 --> 00:09:43,960
characteristic to micro services so we

00:09:40,930 --> 00:09:47,400
have a Netflix circuit breaker component

00:09:43,960 --> 00:09:50,050
integrating in SeaTac we can deal with

00:09:47,400 --> 00:09:55,180
distributing distributed messaging we'll

00:09:50,050 --> 00:09:57,730
talk about it later with Apache Kafka we

00:09:55,180 --> 00:10:00,790
deal with containers so we can offer a

00:09:57,730 --> 00:10:04,470
docker support in seed stack and also we

00:10:00,790 --> 00:10:08,460
can monitor our components by using

00:10:04,470 --> 00:10:11,620
matrix library so all these elements

00:10:08,460 --> 00:10:16,150
give the ecosystem for the application

00:10:11,620 --> 00:10:20,680
to to to work as a micro service you

00:10:16,150 --> 00:10:26,170
know you know let's say password content

00:10:20,680 --> 00:10:30,580
is a service platform another cloud pad

00:10:26,170 --> 00:10:34,000
pattern is messaging is streaming so we

00:10:30,580 --> 00:10:39,610
did some integration with Apache Kafka

00:10:34,000 --> 00:10:45,310
and we have a common let's say

00:10:39,610 --> 00:10:48,370
better a common use case in our company

00:10:45,310 --> 00:10:51,910
it's integrated data from million of

00:10:48,370 --> 00:10:54,040
cars which are which are on the road so

00:10:51,910 --> 00:11:00,130
you have to integrate data from this

00:10:54,040 --> 00:11:02,560
class into our into our internal cloud a

00:11:00,130 --> 00:11:07,630
private cloud or public cloud so we do

00:11:02,560 --> 00:11:10,660
live graph guy we did some library to to

00:11:07,630 --> 00:11:13,840
produce messages for Kafka and we all we

00:11:10,660 --> 00:11:17,380
have also some library to consume

00:11:13,840 --> 00:11:20,470
consume messages from cough distributed

00:11:17,380 --> 00:11:23,650
streaming platform so we have all these

00:11:20,470 --> 00:11:27,760
already integrated insisted and we are

00:11:23,650 --> 00:11:31,420
able to - we implement it with this

00:11:27,760 --> 00:11:36,300
library our connected car information

00:11:31,420 --> 00:11:39,790
system and the last example is about

00:11:36,300 --> 00:11:44,020
serverless this is a work in progress

00:11:39,790 --> 00:11:48,730
for us so we integrated let's say

00:11:44,020 --> 00:11:50,770
lambdas in in our in our packages we are

00:11:48,730 --> 00:11:54,670
able to create lambdas and to deploy

00:11:50,770 --> 00:11:59,080
directly to to a cloud to Amazon

00:11:54,670 --> 00:12:01,660
especially so if you are able to take

00:11:59,080 --> 00:12:04,030
our code and put inside inside the

00:12:01,660 --> 00:12:06,580
lambda and deploy it which is flexible

00:12:04,030 --> 00:12:09,310
to use we have a simple resource model

00:12:06,580 --> 00:12:11,860
with a flexible authorization and you

00:12:09,310 --> 00:12:13,900
can also use execution model like a

00:12:11,860 --> 00:12:18,220
synchronous asynchronous on stream based

00:12:13,900 --> 00:12:20,800
but the work-in-progress is around how

00:12:18,220 --> 00:12:23,590
to integrate the other components from

00:12:20,800 --> 00:12:28,660
how to do deal with the other components

00:12:23,590 --> 00:12:34,380
of public load this is our work in

00:12:28,660 --> 00:12:39,040
progress today and let's talk about our

00:12:34,380 --> 00:12:46,149
open source project so it's open source

00:12:39,040 --> 00:12:50,089
since 2015 you can take the code now so

00:12:46,149 --> 00:12:53,720
to use it you can experience seed stock

00:12:50,089 --> 00:12:59,230
and can contribute to it there is a

00:12:53,720 --> 00:13:01,759
license which is MPL 2.0 on this stack

00:12:59,230 --> 00:13:06,170
all these open source frameworks

00:13:01,759 --> 00:13:12,290
advanced tools documentation and also

00:13:06,170 --> 00:13:14,899
this framework can be enriched with your

00:13:12,290 --> 00:13:17,630
property add-on in order to create a

00:13:14,899 --> 00:13:18,759
custom your custom distribution and

00:13:17,630 --> 00:13:27,589
deploy it

00:13:18,759 --> 00:13:30,020
so time is up for me I think okay thank

00:13:27,589 --> 00:13:34,990
you and if you have questions

00:13:30,020 --> 00:13:34,990

YouTube URL: https://www.youtube.com/watch?v=xZT0avSMYYI


