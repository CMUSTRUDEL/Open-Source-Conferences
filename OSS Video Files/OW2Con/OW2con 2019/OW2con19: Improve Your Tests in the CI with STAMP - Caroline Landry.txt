Title: OW2con19: Improve Your Tests in the CI with STAMP - Caroline Landry
Publication date: 2019-06-19
Playlist: OW2con 2019
Description: 
	This talk presents two automatic techniques that can be used in the CI to reveal weaknesses and suggest possible improvements of your test cases. The first one is based on mutation testing, while the second one is based on test amplification. Both techniques are now implemented for Java and are available as open source tools: Descartes and DSpot.
Captions: 
	00:00:05,629 --> 00:00:10,260
so good evening

00:00:07,620 --> 00:00:12,570
so I'm Carolyn hungry I'm working in the

00:00:10,260 --> 00:00:17,130
diverse team in energy I know Rennes in

00:00:12,570 --> 00:00:20,609
Brittany and I joined urea to un alphago

00:00:17,130 --> 00:00:22,650
for leading the stunt project and before

00:00:20,609 --> 00:00:25,560
that our works something like thirty

00:00:22,650 --> 00:00:31,430
years in the industry making development

00:00:25,560 --> 00:00:35,719
software develop on dentists so stump

00:00:31,430 --> 00:00:40,890
what is temp stamp is a European project

00:00:35,719 --> 00:00:43,410
including five companies for research

00:00:40,890 --> 00:00:49,430
institutions and one who pursues

00:00:43,410 --> 00:00:53,520
consumption or w-2 and stamp is about

00:00:49,430 --> 00:00:58,280
DevOps so we saw it's something like we

00:00:53,520 --> 00:01:02,160
already saw today and the basic idea was

00:00:58,280 --> 00:01:05,549
there Ops is actually about automation

00:01:02,160 --> 00:01:08,520
and continuous testing in the sense of

00:01:05,549 --> 00:01:11,280
fact every step you need some validation

00:01:08,520 --> 00:01:14,100
and acceptance of the step you've before

00:01:11,280 --> 00:01:16,860
going to the other one and that include

00:01:14,100 --> 00:01:19,409
also a lot of technologies that you can

00:01:16,860 --> 00:01:21,750
use at every step

00:01:19,409 --> 00:01:25,020
different step then depending where you

00:01:21,750 --> 00:01:27,840
are so it is soon unit test so you can

00:01:25,020 --> 00:01:29,369
have some winters or that I already when

00:01:27,840 --> 00:01:32,490
you are developing that allow you to

00:01:29,369 --> 00:01:35,460
avoid some compiling errors it's kind of

00:01:32,490 --> 00:01:37,470
things and of course it's linked to this

00:01:35,460 --> 00:01:44,130
continuous integration in continued

00:01:37,470 --> 00:01:47,670
development and so one of the key point

00:01:44,130 --> 00:01:49,680
and now for the tests automated test is

00:01:47,670 --> 00:01:53,430
that so test shoot are more about

00:01:49,680 --> 00:01:55,590
complex and there are no lot of software

00:01:53,430 --> 00:01:59,480
that have more line of codes of tests

00:01:55,590 --> 00:02:03,080
than the application itself so

00:01:59,480 --> 00:02:05,810
it's actually we make some measurement

00:02:03,080 --> 00:02:08,150
of some open source code and it's so at

00:02:05,810 --> 00:02:13,670
least sort of the projects you have more

00:02:08,150 --> 00:02:16,820
line of code of tests and software so

00:02:13,670 --> 00:02:19,730
the sediment ide main idea of stamps

00:02:16,820 --> 00:02:25,280
what's the concept of amplifications the

00:02:19,730 --> 00:02:29,480
idea there is really the knowledge of

00:02:25,280 --> 00:02:33,430
what you need to test its skill of the

00:02:29,480 --> 00:02:36,290
developers so human developers and so

00:02:33,430 --> 00:02:38,900
the developers know what they expect

00:02:36,290 --> 00:02:41,210
from the test and what the reserves they

00:02:38,900 --> 00:02:43,550
want to have and but the thing it's

00:02:41,210 --> 00:02:47,210
since they are human most of the time

00:02:43,550 --> 00:02:50,150
the tests are incomplete and so the idea

00:02:47,210 --> 00:02:53,380
is to take the test and to amplify them

00:02:50,150 --> 00:02:56,390
so it's generate from this test route

00:02:53,380 --> 00:02:58,250
new test on new ization complete the

00:02:56,390 --> 00:03:04,430
existing test or generic new test from

00:02:58,250 --> 00:03:08,150
there so the focus of stem so we need to

00:03:04,430 --> 00:03:11,570
focus on some research about on devote

00:03:08,150 --> 00:03:16,820
because there is a really a huge huge

00:03:11,570 --> 00:03:22,459
area to to complete and so first things

00:03:16,820 --> 00:03:24,620
it's unit testing so we see test

00:03:22,459 --> 00:03:27,680
amplification and how to test your test

00:03:24,620 --> 00:03:32,150
actually second one is configuration

00:03:27,680 --> 00:03:38,150
testing so we already heard of it so

00:03:32,150 --> 00:03:39,590
it's about tools about docker files and

00:03:38,150 --> 00:03:42,650
manipulating duke refers to

00:03:39,590 --> 00:03:45,470
automatically generate the

00:03:42,650 --> 00:03:46,730
configurations and execute the test your

00:03:45,470 --> 00:03:49,520
test suite in the different

00:03:46,730 --> 00:03:52,670
configurations and the last thing is

00:03:49,520 --> 00:03:57,950
when you operate you software and it is

00:03:52,670 --> 00:04:01,880
deployed you also have some some need

00:03:57,950 --> 00:04:05,110
some tools to monitor or to help you to

00:04:01,880 --> 00:04:07,820
have give feedback to the developers

00:04:05,110 --> 00:04:08,870
when you have some crashes or some

00:04:07,820 --> 00:04:15,410
problem

00:04:08,870 --> 00:04:19,760
on the software so I will put on to hear

00:04:15,410 --> 00:04:23,380
more the unit testing part since its the

00:04:19,760 --> 00:04:26,600
research leads by leonora and K th and

00:04:23,380 --> 00:04:31,070
so the first the first thing is a tool

00:04:26,600 --> 00:04:36,310
named Descartes and the object of

00:04:31,070 --> 00:04:40,460
descartes is to test your test actually

00:04:36,310 --> 00:04:42,020
you so we saw that the test now is more

00:04:40,460 --> 00:04:44,690
and more complicated it's a software

00:04:42,020 --> 00:04:48,770
itself and so what about testing your

00:04:44,690 --> 00:04:52,669
test writing another software to test it

00:04:48,770 --> 00:04:55,460
like gosh Kelly you know in YT no the

00:04:52,669 --> 00:04:57,320
software to test and one again so we

00:04:55,460 --> 00:05:01,520
need to find something else to validate

00:04:57,320 --> 00:05:04,310
your test and so one of the one of the

00:05:01,520 --> 00:05:07,250
techniques that are appears a long time

00:05:04,310 --> 00:05:09,169
ago it's mutation analysis that allow

00:05:07,250 --> 00:05:13,360
you to introduce forth in the code and

00:05:09,169 --> 00:05:18,860
to check that if you test with the Texas

00:05:13,360 --> 00:05:21,740
mutation and we something like two years

00:05:18,860 --> 00:05:25,010
ago there was no it's three years ago

00:05:21,740 --> 00:05:27,530
now there was a new concept about

00:05:25,010 --> 00:05:31,400
mutation Allison so that is called extra

00:05:27,530 --> 00:05:34,250
mutation so instead of working of the

00:05:31,400 --> 00:05:36,169
instruction level so because standard

00:05:34,250 --> 00:05:39,229
mutational a disease will allow you to

00:05:36,169 --> 00:05:41,390
change for example equal into not equal

00:05:39,229 --> 00:05:44,810
press into - these kind of things and

00:05:41,390 --> 00:05:47,660
for extra mutation you actually remove

00:05:44,810 --> 00:05:50,479
the entire body of a method and we

00:05:47,660 --> 00:05:56,110
proceed either by nothing if it's void

00:05:50,479 --> 00:06:01,970
written word or by a constant value so

00:05:56,110 --> 00:06:05,570
it Descartes so it's an implementation

00:06:01,970 --> 00:06:08,330
of c6 to MU tation analysis and it's

00:06:05,570 --> 00:06:09,830
based on Pitts that is tool available

00:06:08,330 --> 00:06:12,979
for ten years and opposition's tool

00:06:09,830 --> 00:06:15,020
available for 10 years for mutation

00:06:12,979 --> 00:06:19,099
analysis where you can substitute and

00:06:15,020 --> 00:06:20,810
replace of the mutation engine and it

00:06:19,099 --> 00:06:21,889
tells you to compute the code coverage

00:06:20,810 --> 00:06:24,110
so

00:06:21,889 --> 00:06:26,659
not code coverage you can have and so a

00:06:24,110 --> 00:06:29,719
mutation score that is a ratio between

00:06:26,659 --> 00:06:32,740
the number of mutant mutations that are

00:06:29,719 --> 00:06:37,009
not addicted towards the number of

00:06:32,740 --> 00:06:38,689
generating militants so it doesn't lead

00:06:37,009 --> 00:06:41,270
you to find what we call the pseudo

00:06:38,689 --> 00:06:46,490
tested method so the tested method is a

00:06:41,270 --> 00:06:48,740
method that is not detected by any test

00:06:46,490 --> 00:06:50,779
so you can remove your body of the

00:06:48,740 --> 00:06:54,889
method and the tester suit is still

00:06:50,779 --> 00:06:57,289
going and so it allows you to find

00:06:54,889 --> 00:07:01,580
weaknesses if your tests and weaknesses

00:06:57,289 --> 00:07:03,349
in your code actually so I have same

00:07:01,580 --> 00:07:06,080
pseudo testing method is a method

00:07:03,349 --> 00:07:09,879
executed by the test route but where any

00:07:06,080 --> 00:07:17,509
written can find a mutation am

00:07:09,879 --> 00:07:23,029
surprising we have found with so that

00:07:17,509 --> 00:07:25,159
estimate on in every product we test so

00:07:23,029 --> 00:07:26,629
absolute estimate on for example if you

00:07:25,159 --> 00:07:27,889
took this example for my pet chicken

00:07:26,629 --> 00:07:31,370
collections

00:07:27,889 --> 00:07:36,409
it's a Newton's and we have this our

00:07:31,370 --> 00:07:39,020
method that as associated States test

00:07:36,409 --> 00:07:42,469
and the purpose of the test is really to

00:07:39,020 --> 00:07:46,969
test this exception is waste and you can

00:07:42,469 --> 00:07:49,430
remove the body of fads so and so what

00:07:46,969 --> 00:07:52,430
happens here is that if you remove the

00:07:49,430 --> 00:07:54,289
body the exception is not waste so the

00:07:52,430 --> 00:07:57,169
test screen is a test shoot is this

00:07:54,289 --> 00:07:59,120
green so we call had a pseudo tested

00:07:57,169 --> 00:08:01,069
method and why it's because there is

00:07:59,120 --> 00:08:04,909
actually a bug in the test and there is

00:08:01,069 --> 00:08:08,139
a Fae that is missing here so that's one

00:08:04,909 --> 00:08:10,849
of the findings you can have with

00:08:08,139 --> 00:08:16,009
Descartes so allows you to identify

00:08:10,849 --> 00:08:18,229
which tests are weak so as I said we

00:08:16,009 --> 00:08:22,729
made some experiment with Descartes and

00:08:18,229 --> 00:08:25,490
we found absolute estimated in every

00:08:22,729 --> 00:08:31,390
project we tested so sometimes not a lot

00:08:25,490 --> 00:08:34,550
but still very significant numbers of

00:08:31,390 --> 00:08:35,539
absolute estimated that is very was very

00:08:34,550 --> 00:08:43,250
surprised

00:08:35,539 --> 00:08:46,550
for the developers so they got allows

00:08:43,250 --> 00:08:48,980
you to test the ability of the test to

00:08:46,550 --> 00:08:51,529
shoot to evaluate to find the bugs in

00:08:48,980 --> 00:08:53,930
your test suite and them and to find the

00:08:51,529 --> 00:08:56,569
witnesses and then we have another tool

00:08:53,930 --> 00:08:59,000
that is called despot and this pot

00:08:56,569 --> 00:09:02,569
allows you to automatically announce

00:08:59,000 --> 00:09:04,459
your test suite so either by generating

00:09:02,569 --> 00:09:06,819
new assertion that are missing in your

00:09:04,459 --> 00:09:11,089
test or generating new tests

00:09:06,819 --> 00:09:13,310
so this pot instead of mutates the

00:09:11,089 --> 00:09:16,310
source application we actually mutate

00:09:13,310 --> 00:09:20,959
the test suite to generate Bryant of the

00:09:16,310 --> 00:09:23,480
test and to increase the mutation score

00:09:20,959 --> 00:09:29,889
so the ability of your test to detect

00:09:23,480 --> 00:09:35,300
bugs for example if we have such kind of

00:09:29,889 --> 00:09:38,750
original test case that is Java G unit

00:09:35,300 --> 00:09:41,029
test you can have a mutation operator

00:09:38,750 --> 00:09:43,490
for the test shoot that is removing a

00:09:41,029 --> 00:09:46,490
method call and so you instrument the

00:09:43,490 --> 00:09:49,579
code rerun it and you can generate new

00:09:46,490 --> 00:09:53,269
ization from the new state-of-the of the

00:09:49,579 --> 00:09:57,430
source application and then generate a

00:09:53,269 --> 00:09:57,430
new test based on the previous one so

00:09:57,699 --> 00:10:08,779
joke you can also use you know the

00:10:00,980 --> 00:10:13,190
repair are true like changing the values

00:10:08,779 --> 00:10:15,170
the constant values or replicating a Col

00:10:13,190 --> 00:10:17,779
this kind of thing and you can also

00:10:15,170 --> 00:10:22,519
complete and have a new accession in you

00:10:17,779 --> 00:10:24,680
a new Newton in your tests so that's

00:10:22,519 --> 00:10:28,360
what this for did so we weren't also

00:10:24,680 --> 00:10:32,810
experiment with despot and we submitted

00:10:28,360 --> 00:10:35,779
1900 requests with test generated by it

00:10:32,810 --> 00:10:38,180
to open source project and so already

00:10:35,779 --> 00:10:43,060
certain requests have been accepted and

00:10:38,180 --> 00:10:47,029
so x t1 and 500 discussion

00:10:43,060 --> 00:10:49,230
so all these those tools are the idea of

00:10:47,029 --> 00:10:53,889
those tools is also to

00:10:49,230 --> 00:10:56,430
integrate same is a CI because if you

00:10:53,889 --> 00:10:59,860
are running the tools in your horse

00:10:56,430 --> 00:11:03,430
source entire source code or entire

00:10:59,860 --> 00:11:06,279
status test shoot it can take sometimes

00:11:03,430 --> 00:11:12,759
I have to say and so the idea was also

00:11:06,279 --> 00:11:15,899
to target only in the in the CI the

00:11:12,759 --> 00:11:21,069
changes so the tools are available

00:11:15,899 --> 00:11:25,559
either as another resin disease as a

00:11:21,069 --> 00:11:28,870
plug-in for example for eclipse or mavin

00:11:25,559 --> 00:11:31,569
gradall and also as the language come

00:11:28,870 --> 00:11:33,730
online so if you want the developer can

00:11:31,569 --> 00:11:36,459
run it on their application or the

00:11:33,730 --> 00:11:38,620
owners a test together with them before

00:11:36,459 --> 00:11:40,749
committing or whatever or making a poor

00:11:38,620 --> 00:11:43,930
request but the idea is also to

00:11:40,749 --> 00:11:46,269
integrate them in the system and their

00:11:43,930 --> 00:11:50,879
some of them already did some of our

00:11:46,269 --> 00:11:55,929
partner already did it and so to run

00:11:50,879 --> 00:11:59,319
used a cart and tweet notify witnesses

00:11:55,929 --> 00:12:01,300
only on changes that are been made and

00:11:59,319 --> 00:12:04,209
then to run this but only on the

00:12:01,300 --> 00:12:07,389
weaknesses and certified by yes so it's

00:12:04,209 --> 00:12:13,959
reduced drastically the running time of

00:12:07,389 --> 00:12:15,879
each tools so we also may so we have X

00:12:13,959 --> 00:12:21,550
wiki that already integrated a cut in

00:12:15,879 --> 00:12:23,170
his CI and also don't remember

00:12:21,550 --> 00:12:28,480
engineering also you've already

00:12:23,170 --> 00:12:30,610
intubated he has several tools and so

00:12:28,480 --> 00:12:35,889
the other tests we made is to provide

00:12:30,610 --> 00:12:38,889
the services those those analyses as a

00:12:35,889 --> 00:12:41,470
services in the cloud so we made it get

00:12:38,889 --> 00:12:46,540
up application so you can use it like

00:12:41,470 --> 00:12:50,110
you can use coveralls or travel or

00:12:46,540 --> 00:12:52,959
Travis in the in github and so when you

00:12:50,110 --> 00:12:55,839
commit your makeup or request it we run

00:12:52,959 --> 00:12:59,970
the analysis of line and give you the

00:12:55,839 --> 00:13:06,720
feedback of the analysis so through

00:12:59,970 --> 00:13:10,050
the github interface so if you want to

00:13:06,720 --> 00:13:14,970
know more about everything we have a

00:13:10,050 --> 00:13:20,070
github we have a website and so we are

00:13:14,970 --> 00:13:23,160
really expecting feedback from industry

00:13:20,070 --> 00:13:25,770
because it's really the way of research

00:13:23,160 --> 00:13:27,930
to improve their algorithms and

00:13:25,770 --> 00:13:30,810
realistic there is a lot of singing

00:13:27,930 --> 00:13:34,890
based on genetic algorithm and eristic

00:13:30,810 --> 00:13:40,740
and we need really to have a lot of real

00:13:34,890 --> 00:13:45,660
feedback from real usage so the contact

00:13:40,740 --> 00:13:48,720
or either anything of stamp the diverse

00:13:45,660 --> 00:13:53,750
team in area or the research on the

00:13:48,720 --> 00:13:58,350
subject decart and the spot made also

00:13:53,750 --> 00:14:02,760
jointly with key th in sweden and so

00:13:58,350 --> 00:14:08,040
thanks so there is some comic strip if

00:14:02,760 --> 00:14:11,090
you know them that about the the project

00:14:08,040 --> 00:14:13,800
we made a lot of dissemination effort

00:14:11,090 --> 00:14:18,810
thanks to audible you to to this project

00:14:13,800 --> 00:14:22,460
and it include this kind of cool cool

00:14:18,810 --> 00:14:22,460

YouTube URL: https://www.youtube.com/watch?v=kkhEcwcUNko


