Title: OW2con19 Keynote: Automating Compliance; a Growing Challenge for Agile + Cloud - Karsten Reincke
Publication date: 2019-06-17
Playlist: OW2con 2019
Description: 
	Automating Compliance: a Growing Challenge for Agile + Cloud
A precious keynote to remember the main aspects of Open Source Software compliance. From the datacenter to the smartphone, multiple licenses have to be managed for open source systems, kernels, components, libraries, applications, and containers. A real challenge with software updates on the fly and CI/CD chains.
Captions: 
	00:00:05,779 --> 00:00:16,230
hello as you can see I'm coming from a

00:00:11,490 --> 00:00:21,439
company which likes magenta and you can

00:00:16,230 --> 00:00:21,439
think magenta is the German orange and

00:00:22,369 --> 00:00:28,699
in January in April I participated in

00:00:26,130 --> 00:00:32,099
the legal and licensing workshop in

00:00:28,699 --> 00:00:35,160
Barcelona and the Free Software

00:00:32,099 --> 00:00:39,570
Foundation announced that they also have

00:00:35,160 --> 00:00:42,750
a t-shirt in magenta and I promised that

00:00:39,570 --> 00:00:53,420
I will give my next lecture in this

00:00:42,750 --> 00:00:57,680
t-shirt so it indeed contains the fifth

00:00:53,420 --> 00:01:03,090
freedoms and it is indeed free software

00:00:57,680 --> 00:01:07,710
goods so please can anyone take a photo

00:01:03,090 --> 00:01:11,400
and post it on Twitter with hash tags or

00:01:07,710 --> 00:01:15,259
a w-2 econ and two telecom so that I can

00:01:11,400 --> 00:01:20,700
prove my wife that I really did this

00:01:15,259 --> 00:01:25,500
good now no more short jokes let us be

00:01:20,700 --> 00:01:29,369
seriously and I think that force

00:01:25,500 --> 00:01:32,130
compliance is plain sailing we all know

00:01:29,369 --> 00:01:36,570
what we have to do to use open source

00:01:32,130 --> 00:01:39,960
software compliantly we knew that if we

00:01:36,570 --> 00:01:42,780
distribute open source software then we

00:01:39,960 --> 00:01:46,530
have to list each component of the

00:01:42,780 --> 00:01:49,200
software we have to name it together

00:01:46,530 --> 00:01:56,689
with a name and the release number we

00:01:49,200 --> 00:01:56,689
have to and oh sorry

00:01:59,320 --> 00:02:09,130
good whatever I did so we have to lift

00:02:06,610 --> 00:02:12,480
to list the corresponding copyright

00:02:09,130 --> 00:02:15,820
owners we have to add the respective

00:02:12,480 --> 00:02:19,360
respective license text the respect the

00:02:15,820 --> 00:02:22,930
respective disclaimer sometimes we have

00:02:19,360 --> 00:02:24,850
to add some additional files and for

00:02:22,930 --> 00:02:27,070
each component which is licensed under a

00:02:24,850 --> 00:02:30,070
week or a strong copyleft license we

00:02:27,070 --> 00:02:32,530
also have to add our written offer that

00:02:30,070 --> 00:02:35,739
we will send and distribute the source

00:02:32,530 --> 00:02:38,530
code and of course we have to set up a

00:02:35,739 --> 00:02:42,820
process for serving requests evoked by

00:02:38,530 --> 00:02:49,150
the last point if we do so on open

00:02:42,820 --> 00:02:53,410
source compliance is no big deal we have

00:02:49,150 --> 00:02:56,590
to put until list the components and we

00:02:53,410 --> 00:03:00,519
have to add an open source compliance

00:02:56,590 --> 00:03:06,790
artifact and to combine them into the

00:03:00,519 --> 00:03:09,940
product so if the bird is really as

00:03:06,790 --> 00:03:12,489
simple as ice and I described then why

00:03:09,940 --> 00:03:16,930
the hell are we talking about open

00:03:12,489 --> 00:03:23,650
source compliance so heavily let us live

00:03:16,930 --> 00:03:27,130
look at typical telecom product the IP

00:03:23,650 --> 00:03:30,610
TV and the structure of the IPTV product

00:03:27,130 --> 00:03:34,570
is this you have a data center which is

00:03:30,610 --> 00:03:38,280
streaming movies then you have to have a

00:03:34,570 --> 00:03:42,910
router which takes the stream into the

00:03:38,280 --> 00:03:46,480
setup box which translates the sixths to

00:03:42,910 --> 00:03:52,000
the TV and you have to have a smart

00:03:46,480 --> 00:03:55,090
phone for steering this setup and the

00:03:52,000 --> 00:04:01,750
good message is open source software is

00:03:55,090 --> 00:04:05,019
everywhere if we look if we take a

00:04:01,750 --> 00:04:08,380
deeper look at the situation then we see

00:04:05,019 --> 00:04:10,720
that we have different kind of products

00:04:08,380 --> 00:04:12,910
there are and components there are

00:04:10,720 --> 00:04:16,500
components which are not distribute

00:04:12,910 --> 00:04:23,350
by the product owner like this TV and

00:04:16,500 --> 00:04:26,550
the smartphone and there are distributed

00:04:23,350 --> 00:04:31,440
products like the setup box and the

00:04:26,550 --> 00:04:34,270
router and there are products source

00:04:31,440 --> 00:04:37,210
parts components which are not

00:04:34,270 --> 00:04:44,980
distributed you do not distribute a data

00:04:37,210 --> 00:04:49,510
center so what do we have to do what is

00:04:44,980 --> 00:04:52,360
our responsibility we have in case of a

00:04:49,510 --> 00:04:56,170
telecommunication I post it on a

00:04:52,360 --> 00:04:59,760
smartphone we as a company as a product

00:04:56,170 --> 00:05:03,580
owner fan of IPTV we have to be consider

00:04:59,760 --> 00:05:06,100
the compliance focus of the Linux

00:05:03,580 --> 00:05:10,270
libraries and the telecom application

00:05:06,100 --> 00:05:14,740
which we distribute in case of the set

00:05:10,270 --> 00:05:16,540
up box and here router we have to

00:05:14,740 --> 00:05:19,930
consider the compliance of the Linux

00:05:16,540 --> 00:05:22,390
kernel the the gnu/linux libraries which

00:05:19,930 --> 00:05:26,290
together are built the operating systems

00:05:22,390 --> 00:05:29,080
we have to consider some standalone

00:05:26,290 --> 00:05:33,010
applications like the Apache server

00:05:29,080 --> 00:05:37,919
again we have to consider our app and

00:05:33,010 --> 00:05:41,890
the libraries which we distribute and

00:05:37,919 --> 00:05:45,180
this is for all these we have to create

00:05:41,890 --> 00:05:49,480
these open-source compliance and

00:05:45,180 --> 00:05:51,780
artifacts the bad message is creating

00:05:49,480 --> 00:05:55,770
these artifacts once is not enough

00:05:51,780 --> 00:06:01,390
because our systems require that we

00:05:55,770 --> 00:06:06,580
update them over the air so we create CI

00:06:01,390 --> 00:06:10,990
CD chains for doing so and unfortunately

00:06:06,580 --> 00:06:13,630
done we have also the process to embed

00:06:10,990 --> 00:06:17,630
in these chain which creates the

00:06:13,630 --> 00:06:20,930
open-source compliance artifacts so

00:06:17,630 --> 00:06:25,520
the good message often it is said that

00:06:20,930 --> 00:06:28,280
it is good seems to be that in case of a

00:06:25,520 --> 00:06:30,920
data center we do not do have have to

00:06:28,280 --> 00:06:34,130
distribute anything and thou or we are

00:06:30,920 --> 00:06:37,340
safe let's have a look at the data

00:06:34,130 --> 00:06:40,300
center at a typical data center of IPT

00:06:37,340 --> 00:06:43,880
we at the bottom we have the bare metal

00:06:40,300 --> 00:06:46,880
each bare metal has an operating system

00:06:43,880 --> 00:06:51,710
and this operating system is often Linux

00:06:46,880 --> 00:06:55,370
a new Linux system on top of these bare

00:06:51,710 --> 00:06:59,090
metal we have the virtual ations layers

00:06:55,370 --> 00:07:02,450
we have two possibilities we can use

00:06:59,090 --> 00:07:07,600
open stacks or we can use humanities

00:07:02,450 --> 00:07:11,390
plus Dhokla and on top of these

00:07:07,600 --> 00:07:15,410
virtualization layer we have the virtual

00:07:11,390 --> 00:07:19,010
machines in case of open stock they are

00:07:15,410 --> 00:07:22,310
really virtual machines having their own

00:07:19,010 --> 00:07:27,230
operating system delivered by disk

00:07:22,310 --> 00:07:30,310
images and in case of docker these are

00:07:27,230 --> 00:07:34,880
linked collections into an underlying

00:07:30,310 --> 00:07:38,380
general operating system so where's the

00:07:34,880 --> 00:07:42,710
problem the problem we have two problems

00:07:38,380 --> 00:07:46,640
one problem is very simple if you use

00:07:42,710 --> 00:07:49,490
any AGP a licensed software in a data

00:07:46,640 --> 00:07:53,240
center then you have to consider that

00:07:49,490 --> 00:07:55,820
the HP a GPL requires that you have to

00:07:53,240 --> 00:07:58,760
deliver the complete software stack to

00:07:55,820 --> 00:07:59,450
anyone who has access to the product

00:07:58,760 --> 00:08:03,140
wire

00:07:59,450 --> 00:08:07,250
the network it is a very unclear

00:08:03,140 --> 00:08:10,190
description and proceeds precise so

00:08:07,250 --> 00:08:14,000
there is a bit of danger

00:08:10,190 --> 00:08:20,080
using a GPL components inside of a data

00:08:14,000 --> 00:08:23,750
center with respect to the compliance

00:08:20,080 --> 00:08:25,330
responsibilities the other point is more

00:08:23,750 --> 00:08:30,250
important

00:08:25,330 --> 00:08:36,450
if your this image are your docker

00:08:30,250 --> 00:08:41,620
container contains any SSH software and

00:08:36,450 --> 00:08:45,250
if you give your customer or anyone

00:08:41,620 --> 00:08:48,400
outside in the network access to such

00:08:45,250 --> 00:08:52,180
the disk image a virtual machine or a

00:08:48,400 --> 00:08:56,560
virtual virtual machine then he is able

00:08:52,180 --> 00:09:00,160
to use SCP for downloading the software

00:08:56,560 --> 00:09:02,290
and bingo you have distributed the

00:09:00,160 --> 00:09:06,250
software and if you're distributing

00:09:02,290 --> 00:09:11,050
software you have to be compliant so

00:09:06,250 --> 00:09:16,860
this is the real challenge of large

00:09:11,050 --> 00:09:20,500
companies and what do we do we are

00:09:16,860 --> 00:09:24,040
products use a mess of force components

00:09:20,500 --> 00:09:31,180
and sometimes I couldn't resist sorry

00:09:24,040 --> 00:09:33,820
sometimes in the form of a mess good but

00:09:31,180 --> 00:09:35,860
the message the good message is you are

00:09:33,820 --> 00:09:38,200
not alone whenever you have a problem

00:09:35,860 --> 00:09:41,680
you can be sure that other have

00:09:38,200 --> 00:09:44,800
considered a Jochen problem and in case

00:09:41,680 --> 00:09:48,010
of the community the community is very

00:09:44,800 --> 00:09:53,920
fast and it is a very probably that they

00:09:48,010 --> 00:09:59,070
already have designed solutions here's a

00:09:53,920 --> 00:10:04,500
map of out compliance automation tools

00:09:59,070 --> 00:10:07,690
we have tools which are a bit like

00:10:04,500 --> 00:10:09,520
organizations which deliver services

00:10:07,690 --> 00:10:16,570
like Osada

00:10:09,520 --> 00:10:20,650
or for example openSUSE cable then we

00:10:16,570 --> 00:10:24,130
have software which is closed software

00:10:20,650 --> 00:10:28,540
the software of Blackduck and flex era

00:10:24,130 --> 00:10:32,770
for example we have real usable tools

00:10:28,540 --> 00:10:37,450
like software 364 solitaire quarter

00:10:32,770 --> 00:10:39,010
master and we have companies which set

00:10:37,450 --> 00:10:41,410
up their services

00:10:39,010 --> 00:10:47,340
based on open-source software like light

00:10:41,410 --> 00:10:50,620
source or winDriver and we have even

00:10:47,340 --> 00:10:56,020
organizations which target a big picture

00:10:50,620 --> 00:11:01,050
like open chain so this is the world of

00:10:56,020 --> 00:11:01,050
open source it is not complete of course

00:11:05,220 --> 00:11:15,190
so please let me just jump into three

00:11:11,200 --> 00:11:19,600
examples as a reference for all the

00:11:15,190 --> 00:11:23,020
others at first we have software 360

00:11:19,600 --> 00:11:25,540
this is a system which provides a

00:11:23,020 --> 00:11:30,220
central hub for software components in

00:11:25,540 --> 00:11:33,130
an organization it allows you to trigger

00:11:30,220 --> 00:11:40,120
and to note the software you are really

00:11:33,130 --> 00:11:44,130
using and we have facility there is a

00:11:40,120 --> 00:11:47,380
workshop and force ology I think in

00:11:44,130 --> 00:11:51,430
afternoon this night head for Salah ji

00:11:47,380 --> 00:11:55,180
is an excellent tool for solid she does

00:11:51,430 --> 00:11:59,110
nothing more than finding the copyright

00:11:55,180 --> 00:12:03,640
statements in a set of products they did

00:11:59,110 --> 00:12:08,320
an excellent job it is really difficult

00:12:03,640 --> 00:12:11,170
to define the regular expressions for

00:12:08,320 --> 00:12:14,890
not creating false positives or false

00:12:11,170 --> 00:12:19,150
negatives and they they are really good

00:12:14,890 --> 00:12:26,050
this is an excellent tool for automate

00:12:19,150 --> 00:12:27,870
the current compliance and we have both

00:12:26,050 --> 00:12:33,100
course SPX

00:12:27,870 --> 00:12:35,800
SPD exam tries to be the software

00:12:33,100 --> 00:12:37,930
package data exchange as an open

00:12:35,800 --> 00:12:41,220
standard for communication software bill

00:12:37,930 --> 00:12:46,030
of material including components

00:12:41,220 --> 00:12:49,000
licenses and copyrights and this sounds

00:12:46,030 --> 00:12:52,170
a bit alike the open source compliance

00:12:49,000 --> 00:12:59,370
that artifacts I mentioned in the

00:12:52,170 --> 00:13:04,880
beginning of my little lecture so are we

00:12:59,370 --> 00:13:10,079
in the paradise is everything done

00:13:04,880 --> 00:13:14,250
complex but already ready goods do we

00:13:10,079 --> 00:13:18,389
have really a compliance to chain which

00:13:14,250 --> 00:13:22,410
can be used by a company a small or a

00:13:18,389 --> 00:13:25,470
large company let me tell you a little

00:13:22,410 --> 00:13:27,630
story I participated in the legal and

00:13:25,470 --> 00:13:30,690
licensing Berkshire and we had two

00:13:27,630 --> 00:13:34,529
workshops where these tools had the

00:13:30,690 --> 00:13:37,680
chance to introduce themselves and they

00:13:34,529 --> 00:13:39,440
did them very successfully and there was

00:13:37,680 --> 00:13:43,880
an undertone

00:13:39,440 --> 00:13:45,630
they gave the signal everything is done

00:13:43,880 --> 00:13:48,540
everything is ready

00:13:45,630 --> 00:13:53,730
especially SPD except we are the best

00:13:48,540 --> 00:13:56,760
tool of the world I am with respect to

00:13:53,730 --> 00:13:59,610
the complexity of my work and of the

00:13:56,760 --> 00:14:04,230
products of my company I'm a bit

00:13:59,610 --> 00:14:08,750
skeptical so what can we do can I create

00:14:04,230 --> 00:14:12,660
the next tool the next better tool no

00:14:08,750 --> 00:14:15,209
then I would only create the next singer

00:14:12,660 --> 00:14:18,209
in the chorus of the singer we are the

00:14:15,209 --> 00:14:22,399
best so what do we really need for

00:14:18,209 --> 00:14:24,930
solving this we must invent a

00:14:22,399 --> 00:14:28,890
test-driven open-source compliance out

00:14:24,930 --> 00:14:31,019
to imitation test-driven method is used

00:14:28,890 --> 00:14:33,930
in software development very

00:14:31,019 --> 00:14:37,079
successfully and in case of compliance

00:14:33,930 --> 00:14:41,670
is we need three products three virtual

00:14:37,079 --> 00:14:45,209
products and our proposal will be to use

00:14:41,670 --> 00:14:49,220
a very simple product only consisting of

00:14:45,209 --> 00:14:54,209
an hello world app using one VST library

00:14:49,220 --> 00:14:58,350
than a more complex product also a whole

00:14:54,209 --> 00:15:00,690
world up using J gtk libraries up down

00:14:58,350 --> 00:15:04,300
to the lip XML which is licensed under

00:15:00,690 --> 00:15:07,570
the MIT and a very complex

00:15:04,300 --> 00:15:13,649
product which delivers the complete

00:15:07,570 --> 00:15:16,180
stick if your remind the products I

00:15:13,649 --> 00:15:19,660
introduced in the beginning when you see

00:15:16,180 --> 00:15:23,890
that these test cases refer to the

00:15:19,660 --> 00:15:26,470
complexity of our products and what do

00:15:23,890 --> 00:15:29,709
we have to do in test-driven development

00:15:26,470 --> 00:15:32,860
we have also defined our open-source

00:15:29,709 --> 00:15:37,750
compliance artifacts and what's the

00:15:32,860 --> 00:15:41,529
reason to do so now these tools can have

00:15:37,750 --> 00:15:43,390
the chance to prove what Barilla can we

00:15:41,529 --> 00:15:46,450
use the method of test-driven

00:15:43,390 --> 00:15:49,330
development by comparing the readily

00:15:46,450 --> 00:15:54,610
prepared at and defined solution with

00:15:49,330 --> 00:15:57,300
the solutions they deliver and together

00:15:54,610 --> 00:16:01,589
we can close the automation gaps

00:15:57,300 --> 00:16:08,920
systematically and deutsche telekom

00:16:01,589 --> 00:16:12,040
will prepare will support this project

00:16:08,920 --> 00:16:14,709
it calls TD Oscar test-driven

00:16:12,040 --> 00:16:18,130
open-source compliance automation it is

00:16:14,709 --> 00:16:23,589
hosted under an open-source compliance

00:16:18,130 --> 00:16:26,890
github organization and if you think

00:16:23,589 --> 00:16:31,120
that dodgy Tilikum not only loves

00:16:26,890 --> 00:16:35,110
magenta but words starting with a t like

00:16:31,120 --> 00:16:40,620
t systems or t online or telecom then I

00:16:35,110 --> 00:16:40,620
only can say only SWA kimmel pawns

00:16:41,930 --> 00:16:48,730

YouTube URL: https://www.youtube.com/watch?v=y6MBhdXbT44


