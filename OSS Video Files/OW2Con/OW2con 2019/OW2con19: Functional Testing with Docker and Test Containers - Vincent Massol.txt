Title: OW2con19: Functional Testing with Docker and Test Containers - Vincent Massol
Publication date: 2019-06-19
Playlist: OW2con 2019
Description: 
	As a developer, it really helps being able to debug on one's own machine a problem that happened in production, in a given configuration of the software! This is what the TestContainers framework allows doing. It lets you drive Docker directly from within your unit tests and thus to have a very efficient mechanism to run your functional tests in a given environment.

This session will present TestContainers, applied to a real use case (XWiki), with a demonstration of how to use it for writing tests involving a database, a Servlet engine and more. What will be shown: JUnit5 integration, creating a custom Docker image right from within your unit tests, automatic recording of videos of running tests and integration with a Jenkins pipeline to iterate over all the configurations to test.
Captions: 
	00:00:01,920 --> 00:00:09,690
[Music]

00:00:06,540 --> 00:00:12,780
so I'm a Vincent and I work for a

00:00:09,690 --> 00:00:14,549
company called xwiki SS and I also work

00:00:12,780 --> 00:00:17,130
for an open-source project with the same

00:00:14,549 --> 00:00:17,609
name X wiki I'm a committee on that

00:00:17,130 --> 00:00:20,189
project

00:00:17,609 --> 00:00:22,320
and we participated to a research

00:00:20,189 --> 00:00:25,470
project a European research project for

00:00:22,320 --> 00:00:27,779
the past two and a half years and this

00:00:25,470 --> 00:00:30,210
research project is stamped as the blue

00:00:27,779 --> 00:00:32,940
icon you see on the screen and during

00:00:30,210 --> 00:00:36,090
these research project we work on

00:00:32,940 --> 00:00:38,670
amplifying testing that means starting

00:00:36,090 --> 00:00:41,489
from existing tests and generating new

00:00:38,670 --> 00:00:44,850
tests from existing tests and as part of

00:00:41,489 --> 00:00:47,700
this work we work on a subset which is

00:00:44,850 --> 00:00:52,079
which was configuration testing so

00:00:47,700 --> 00:00:54,719
configuration testing is is about taking

00:00:52,079 --> 00:00:57,239
your functional tests but running them

00:00:54,719 --> 00:00:59,850
in two different configurations so we'll

00:00:57,239 --> 00:01:02,340
see and we'll see how it works but I

00:00:59,850 --> 00:01:04,080
well I suspect that all of you are now

00:01:02,340 --> 00:01:06,990
used to writing functional tests

00:01:04,080 --> 00:01:09,600
automated functional tests and so we

00:01:06,990 --> 00:01:10,860
wanted to go a step beyond that and to

00:01:09,600 --> 00:01:13,920
execute those in various configurations

00:01:10,860 --> 00:01:17,119
so we'll see what we mean first the use

00:01:13,920 --> 00:01:19,830
case X wiki so X wiki is a web app and

00:01:17,119 --> 00:01:23,820
it's made of three components three big

00:01:19,830 --> 00:01:26,189
parts there is a database there is a the

00:01:23,820 --> 00:01:31,530
web app itself that runs into a servlet

00:01:26,189 --> 00:01:33,150
container and the browser so so testing

00:01:31,530 --> 00:01:36,869
various configurations mean testing

00:01:33,150 --> 00:01:39,420
various databases various servlet

00:01:36,869 --> 00:01:40,890
engines and various browsers that's what

00:01:39,420 --> 00:01:42,450
it means for X we key it can mean

00:01:40,890 --> 00:01:45,600
different things for different projects

00:01:42,450 --> 00:01:48,299
of course so more specifically for X

00:01:45,600 --> 00:01:50,909
wiki we wanted to test with different

00:01:48,299 --> 00:01:57,420
versions of my sequel different version

00:01:50,909 --> 00:02:00,329
of Postgres I / I / sequel and a lot of

00:01:57,420 --> 00:02:02,750
others are different drivers different

00:02:00,329 --> 00:02:06,840
Soviet containers like Tomcat or jetty

00:02:02,750 --> 00:02:09,149
different browsers chrome of Firefox and

00:02:06,840 --> 00:02:11,670
other configuration that I'm not listing

00:02:09,149 --> 00:02:13,709
here so if you do this matrix that's a

00:02:11,670 --> 00:02:15,840
lot of different configurations

00:02:13,709 --> 00:02:18,359
and if we want to make sure that our

00:02:15,840 --> 00:02:20,909
software runs for the users who

00:02:18,359 --> 00:02:23,730
downloads and use it well we need to

00:02:20,909 --> 00:02:26,790
verify that it does really by by

00:02:23,730 --> 00:02:28,260
automating the data our test before we

00:02:26,790 --> 00:02:30,030
started this project we were running

00:02:28,260 --> 00:02:34,019
automatically on only one configuration

00:02:30,030 --> 00:02:35,599
and and through this experiment that we

00:02:34,019 --> 00:02:38,219
started we're now running it on

00:02:35,599 --> 00:02:41,579
something like 25 or 30 different

00:02:38,219 --> 00:02:45,750
configurations so how do you implement

00:02:41,579 --> 00:02:48,989
this so the general solution is using

00:02:45,750 --> 00:02:51,510
docker to isolate each part to isolate D

00:02:48,989 --> 00:02:53,189
at the database part the servlet engine

00:02:51,510 --> 00:02:55,919
part and the browser part so that's

00:02:53,189 --> 00:02:58,319
that's easy but there are lots of ways

00:02:55,919 --> 00:03:01,169
of doing this you could do it for

00:02:58,319 --> 00:03:03,060
example at the level of the CI if you

00:03:01,169 --> 00:03:05,849
use Jenkins there's a docker plugin that

00:03:03,060 --> 00:03:08,489
you could use to try to do this but it

00:03:05,849 --> 00:03:11,069
has some drawbacks like for example if

00:03:08,489 --> 00:03:12,569
you do that then you're not able to test

00:03:11,069 --> 00:03:15,719
the various configuration on your laptop

00:03:12,569 --> 00:03:17,940
on your developer laptop and there are

00:03:15,719 --> 00:03:20,519
other configuration other solution sorry

00:03:17,940 --> 00:03:21,810
like at the maven level there is a maven

00:03:20,519 --> 00:03:24,959
plugin for docker

00:03:21,810 --> 00:03:26,970
which allows you to also start and stop

00:03:24,959 --> 00:03:30,060
containers I even create images from

00:03:26,970 --> 00:03:33,569
maven but again we found that it was not

00:03:30,060 --> 00:03:35,459
ideal because it doesn't it's not very

00:03:33,569 --> 00:03:38,040
easy for example to put breakpoints in

00:03:35,459 --> 00:03:40,019
your code whenever you run the code in a

00:03:38,040 --> 00:03:43,019
given configuration so we wanted

00:03:40,019 --> 00:03:46,290
something that executed on your laptop

00:03:43,019 --> 00:03:48,090
so in so you will be able to simulate

00:03:46,290 --> 00:03:50,129
any configuration and run that on your

00:03:48,090 --> 00:03:54,030
laptop but also be able to debug your

00:03:50,129 --> 00:03:56,250
software in your IDE so we found one

00:03:54,030 --> 00:03:59,790
little to one library that exists and

00:03:56,250 --> 00:04:02,340
that's called test containers and I've

00:03:59,790 --> 00:04:04,560
put on the screen an example of the

00:04:02,340 --> 00:04:07,169
documentation of test containers it

00:04:04,560 --> 00:04:10,290
allows you to easily control docker from

00:04:07,169 --> 00:04:14,519
your tests from your unit test in this

00:04:10,290 --> 00:04:17,009
example it's based on J unit 5 and if

00:04:14,519 --> 00:04:19,229
you look at the the example it says

00:04:17,009 --> 00:04:23,450
there is an ad container annotation and

00:04:19,229 --> 00:04:26,000
in this example for each says that

00:04:23,450 --> 00:04:27,800
new my sequel container so what this

00:04:26,000 --> 00:04:30,470
means is that it will start and stop a

00:04:27,800 --> 00:04:33,980
my sequel container before and after

00:04:30,470 --> 00:04:38,150
tests there is also the same whispers

00:04:33,980 --> 00:04:40,700
grass here so that's a very generic ways

00:04:38,150 --> 00:04:45,320
of running test containers but what we

00:04:40,700 --> 00:04:49,010
did is we we extended it and created

00:04:45,320 --> 00:04:50,990
some annotations so we had before doing

00:04:49,010 --> 00:04:54,170
this we had our selenium based test

00:04:50,990 --> 00:04:55,550
existing we had a lot of them so we

00:04:54,170 --> 00:04:57,200
wanted to make it very easy to run

00:04:55,550 --> 00:04:59,030
exactly the same test but with a

00:04:57,200 --> 00:05:02,270
different configuration so we're going

00:04:59,030 --> 00:05:03,920
to use an annotation at UI test and then

00:05:02,270 --> 00:05:05,480
we have several parameters in which you

00:05:03,920 --> 00:05:07,850
describe which database you want in

00:05:05,480 --> 00:05:12,410
which version which servlet engine a

00:05:07,850 --> 00:05:20,900
with version with browser etc so what I

00:05:12,410 --> 00:05:25,550
propose is to show you how it works so I

00:05:20,900 --> 00:05:33,260
mean I'm in the IDE here what I'm going

00:05:25,550 --> 00:05:35,780
to do is zoom a bit so that's a that's

00:05:33,260 --> 00:05:39,230
an example of a test or real test menu

00:05:35,780 --> 00:05:42,590
menu ID here and you see for this test I

00:05:39,230 --> 00:05:45,350
have I've configured a tomcat Tomcat 8

00:05:42,590 --> 00:05:48,440
latest version of Tomcat 8 with later

00:05:45,350 --> 00:05:50,210
version of my sequel 5 we run chrome and

00:05:48,440 --> 00:05:53,690
I've put offline because I wasn't sure

00:05:50,210 --> 00:05:55,940
but didn't the Wi-Fi here so it's not

00:05:53,690 --> 00:06:02,110
going to download anything and here I

00:05:55,940 --> 00:06:02,110
have a test and if I run that

00:06:07,950 --> 00:06:19,090
I've learned that yes so it's going to

00:06:16,030 --> 00:06:21,850
take a while so what does it do so it

00:06:19,090 --> 00:06:23,890
notices that xwiki is not started

00:06:21,850 --> 00:06:25,630
because you if you want for fast

00:06:23,890 --> 00:06:28,030
turnaround trip you can also start

00:06:25,630 --> 00:06:29,530
manually xwiki before somewhere and then

00:06:28,030 --> 00:06:31,270
it would not do all the deploy it with

00:06:29,530 --> 00:06:33,190
testing your running version so it's

00:06:31,270 --> 00:06:36,160
starting my sequel it has taught in my

00:06:33,190 --> 00:06:38,290
sequel you see that's not too long and

00:06:36,160 --> 00:06:40,960
it's it's revealing in our case we're

00:06:38,290 --> 00:06:42,820
actually rebuilding a custom version of

00:06:40,960 --> 00:06:45,730
X wiki for the testing because we want

00:06:42,820 --> 00:06:48,790
to test a minimal minimal X wiki for

00:06:45,730 --> 00:06:54,580
this test this is what it does there and

00:06:48,790 --> 00:06:58,680
then it's starting Tomcat here and once

00:06:54,580 --> 00:07:02,890
that is done it's going to provision

00:06:58,680 --> 00:07:05,260
some stuff for the test so this is okay

00:07:02,890 --> 00:07:08,860
I'm running on a live latest version of

00:07:05,260 --> 00:07:10,030
the on gate of get here 4x weekly so

00:07:08,860 --> 00:07:12,880
that was the biggest introduced

00:07:10,030 --> 00:07:19,900
yesterday with displaying some

00:07:12,880 --> 00:07:24,250
information but it doesn't matter so

00:07:19,900 --> 00:07:26,560
here so this is provisioning stuff for

00:07:24,250 --> 00:07:28,870
the test this is specific to X wiki and

00:07:26,560 --> 00:07:32,470
now it's it's starting it's going to

00:07:28,870 --> 00:07:35,890
start the the browser so we've done the

00:07:32,470 --> 00:07:38,260
database the servlet container and the

00:07:35,890 --> 00:07:40,720
browser very soon and the tests we

00:07:38,260 --> 00:07:42,630
launched so I will not wait till the end

00:07:40,720 --> 00:07:45,880
you will see it after it takes about

00:07:42,630 --> 00:07:48,610
let's say 2 minutes I think globally to

00:07:45,880 --> 00:07:52,450
start all those containers and then you

00:07:48,610 --> 00:07:55,690
get a result and you get the result of

00:07:52,450 --> 00:07:58,960
pass or fail but you also get something

00:07:55,690 --> 00:08:01,840
interesting is you get a video or get

00:07:58,960 --> 00:08:03,070
video of what happened I here if I

00:08:01,840 --> 00:08:06,370
wanted I could have put a breakpoint

00:08:03,070 --> 00:08:09,460
anywhere in the code and then I could

00:08:06,370 --> 00:08:11,370
have used a VNC client to connect to the

00:08:09,460 --> 00:08:14,500
container to the container running

00:08:11,370 --> 00:08:19,100
selenium and see exactly the screen and

00:08:14,500 --> 00:08:22,100
then step by step see each each action

00:08:19,100 --> 00:08:25,940
but there is also a video done so we see

00:08:22,100 --> 00:08:29,660
here it's done it's done now and it

00:08:25,940 --> 00:08:31,700
executed things and and the and here it

00:08:29,660 --> 00:08:34,580
says he passed the test but fell that's

00:08:31,700 --> 00:08:37,340
because we have we have some validation

00:08:34,580 --> 00:08:39,770
and since there were some things output

00:08:37,340 --> 00:08:41,740
on the console that were not normal we

00:08:39,770 --> 00:08:44,420
fail it but that's not related to

00:08:41,740 --> 00:08:49,820
configuration testing so if we look at

00:08:44,420 --> 00:08:52,460
the video I can open it and and this is

00:08:49,820 --> 00:08:55,220
what happened so we see it there is a

00:08:52,460 --> 00:08:57,860
some navigation inside the expiry of the

00:08:55,220 --> 00:08:59,630
mat eclis feeling things it was a bit

00:08:57,860 --> 00:09:02,630
first three consonants really see him

00:08:59,630 --> 00:09:05,420
but it doesn't matter the point is yeah

00:09:02,630 --> 00:09:07,490
you get a video if you want to see what

00:09:05,420 --> 00:09:10,130
happened you can debug manually and you

00:09:07,490 --> 00:09:10,640
can also get a screenshot if something

00:09:10,130 --> 00:09:12,380
fails

00:09:10,640 --> 00:09:20,540
you've got the screenshot at the moment

00:09:12,380 --> 00:09:28,220
of failing let's go back to the slides

00:09:20,540 --> 00:09:30,110
so why it is containers because you

00:09:28,220 --> 00:09:34,100
could have done the same thing if you

00:09:30,110 --> 00:09:36,320
wanted with a darker Java library now

00:09:34,100 --> 00:09:37,790
the right the nice thing with test

00:09:36,320 --> 00:09:40,850
containers is that it provides a lot of

00:09:37,790 --> 00:09:43,310
built-in containers so you don't need to

00:09:40,850 --> 00:09:45,440
invent how to do it so what does it mean

00:09:43,310 --> 00:09:48,590
by built-in it means that it knows how

00:09:45,440 --> 00:09:50,540
to start and stop them knows when they

00:09:48,590 --> 00:09:53,630
are started so that you don't need to do

00:09:50,540 --> 00:09:55,670
the waiting yourself and it and they are

00:09:53,630 --> 00:09:59,180
configurable with all the parameters you

00:09:55,670 --> 00:10:01,810
want so and there's my sequel Postgres

00:09:59,180 --> 00:10:05,930
elastics written and Jing's

00:10:01,810 --> 00:10:07,820
and nginx and a lot of others so that's

00:10:05,930 --> 00:10:12,710
cool the recording of video you've seen

00:10:07,820 --> 00:10:14,960
that that's quite nice and what's really

00:10:12,710 --> 00:10:17,000
nice is that I was I was really afraid

00:10:14,960 --> 00:10:19,550
at the beginning that by doing this we

00:10:17,000 --> 00:10:22,940
would get a lot of stray containers

00:10:19,550 --> 00:10:25,220
leave left running after the test like

00:10:22,940 --> 00:10:28,550
imagine you you stop it you stop the

00:10:25,220 --> 00:10:31,130
test in in midair you know how does it

00:10:28,550 --> 00:10:32,840
work does it the container remain there

00:10:31,130 --> 00:10:35,060
in docker do you need to remove them

00:10:32,840 --> 00:10:37,610
afterwards well the nice thing is that

00:10:35,060 --> 00:10:38,900
this container starts at the very

00:10:37,610 --> 00:10:41,840
beginning of stays continuously it

00:10:38,900 --> 00:10:43,190
starts a container a reaper container in

00:10:41,840 --> 00:10:46,640
charge of cleaning up all the other

00:10:43,190 --> 00:10:48,470
containers and actually it does I does

00:10:46,640 --> 00:10:49,970
that very well and I've never had a

00:10:48,470 --> 00:10:51,560
single instance where it doesn't clean

00:10:49,970 --> 00:10:53,780
properly so it does clean it properly

00:10:51,560 --> 00:10:55,250
and you don't have any stray containers

00:10:53,780 --> 00:11:00,920
less after the test

00:10:55,250 --> 00:11:02,690
that's really really appreciable so you

00:11:00,920 --> 00:11:05,600
can do anything and in our case we even

00:11:02,690 --> 00:11:08,870
use we even build docker images on the

00:11:05,600 --> 00:11:11,920
fly during the tests so that's that's

00:11:08,870 --> 00:11:15,920
also possible and working well so

00:11:11,920 --> 00:11:17,480
conclusion is for us since we've

00:11:15,920 --> 00:11:21,020
implemented that we've been able to

00:11:17,480 --> 00:11:23,810
reproduce bugs that we found with

00:11:21,020 --> 00:11:24,800
different configuration we found like

00:11:23,810 --> 00:11:27,140
about ten bucks

00:11:24,800 --> 00:11:29,390
since so for about let's say four months

00:11:27,140 --> 00:11:31,040
of operations with only a few tests

00:11:29,390 --> 00:11:33,500
converted to docker because we now need

00:11:31,040 --> 00:11:37,970
to convert or our previous element tests

00:11:33,500 --> 00:11:40,190
to two this docker base test and that's

00:11:37,970 --> 00:11:43,370
already very very interesting results

00:11:40,190 --> 00:11:46,910
for us we've also implemented support

00:11:43,370 --> 00:11:48,470
for docker some people call it daughter

00:11:46,910 --> 00:11:51,170
inside docker or talk to outside of

00:11:48,470 --> 00:11:53,660
talker because when your CI when you run

00:11:51,170 --> 00:11:56,360
this in your CI imagine you're running

00:11:53,660 --> 00:11:59,170
in Jenkins you may have the agents be

00:11:56,360 --> 00:12:03,320
docker container themselves in your CI

00:11:59,170 --> 00:12:05,180
so when so Jenkins starts a docker

00:12:03,320 --> 00:12:06,650
container and inside that dhoka dhoka

00:12:05,180 --> 00:12:08,870
can continue you've got your maven deal

00:12:06,650 --> 00:12:10,910
for example which itself run your

00:12:08,870 --> 00:12:13,880
functional tests which are themselves

00:12:10,910 --> 00:12:15,770
use docker so you need to be able to do

00:12:13,880 --> 00:12:19,220
that and test containers does support it

00:12:15,770 --> 00:12:22,010
so that works and the other thing I was

00:12:19,220 --> 00:12:23,900
afraid of was the false positive due to

00:12:22,010 --> 00:12:26,510
all these containers being startup and

00:12:23,900 --> 00:12:28,460
synchronized and syncing etc and in

00:12:26,510 --> 00:12:31,640
practice it seems to be quite stable and

00:12:28,460 --> 00:12:31,960
working quite well so that's the good

00:12:31,640 --> 00:12:34,430
news

00:12:31,960 --> 00:12:36,740
so in conclusion if you have one take

00:12:34,430 --> 00:12:38,450
take away from this is that with test

00:12:36,740 --> 00:12:41,450
containers you can do configuration

00:12:38,450 --> 00:12:43,160
testing right inside your ID and that's

00:12:41,450 --> 00:12:46,220
really awesome for developers because

00:12:43,160 --> 00:12:46,760
that's really hard part of debugging

00:12:46,220 --> 00:12:49,850
problem

00:12:46,760 --> 00:12:52,240
that happening in production thank you

00:12:49,850 --> 00:12:52,240
very much

00:12:53,210 --> 00:12:55,919

YouTube URL: https://www.youtube.com/watch?v=pqYBKZg1g9Q


