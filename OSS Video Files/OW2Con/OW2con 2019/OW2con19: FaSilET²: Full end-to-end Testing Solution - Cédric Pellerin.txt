Title: OW2con19: FaSilET²: Full end-to-end Testing Solution - Cédric Pellerin
Publication date: 2019-06-19
Playlist: OW2con 2019
Description: 
	FaSilET² is an Open Source really end to end testing solution. End to end means it can input data on a UI, check that the UI is modified according to certain rules and also check that the data modification led to a database field modification, a new line in a log file, a mail sent, and so on.
This solution is based on Perl scripts with a high abstraction level, thanks to Perl modules, so almost every developper or tester can write testing scripts.
Another key point is that FaSilET² can check the whole project, including logs, mails, databases, etc. All tests are made in real-life situation without modifying anything on servers. Only SSH access is required.
FaSilET² uses "actuators" to simulate users input and checking results on UI and "validators" to check logs, databases, etc. on local or remote servers.
FaSilET² uses LXC containers to start validators in parallel of actuators scripts so they don't interfer.
Some metrology modules can also be used to check CPU, RAM, disk space, etc. on servers while running tests.
Captions: 
	00:00:05,899 --> 00:00:11,550
good afternoon everyone everyone we

00:00:08,490 --> 00:00:14,089
thank you for coming I am a CID like

00:00:11,550 --> 00:00:16,730
Behar and I'm working for City come and

00:00:14,089 --> 00:00:21,689
I would like to introduce you tonight

00:00:16,730 --> 00:00:28,769
our new end to end testing system which

00:00:21,689 --> 00:00:33,020
is called a facility we focused on four

00:00:28,769 --> 00:00:39,059
main points while developing the ISM

00:00:33,020 --> 00:00:42,329
first one is twinned to have a framework

00:00:39,059 --> 00:00:47,910
and tours for developers and for quality

00:00:42,329 --> 00:00:51,750
assurance the second one which is for me

00:00:47,910 --> 00:00:54,539
the most important is we need to

00:00:51,750 --> 00:00:58,440
interact with code in production

00:00:54,539 --> 00:01:02,070
conditions that means don't add code for

00:00:58,440 --> 00:01:04,799
testing don't add anything just for

00:01:02,070 --> 00:01:10,760
testing you have your code you run it

00:01:04,799 --> 00:01:15,960
and facility can check monitor and

00:01:10,760 --> 00:01:18,810
validate it in production conditions so

00:01:15,960 --> 00:01:22,920
no need to insert tests only code or

00:01:18,810 --> 00:01:29,729
stubs and exactly act like a human

00:01:22,920 --> 00:01:33,270
tester it started because we developed a

00:01:29,729 --> 00:01:38,220
huge project for a big client and we had

00:01:33,270 --> 00:01:41,450
like mini project a user interface you

00:01:38,220 --> 00:01:46,560
know JavaScript and Java and so on

00:01:41,450 --> 00:01:49,020
we have database we have logs we have

00:01:46,560 --> 00:01:52,350
made server we have many thing like that

00:01:49,020 --> 00:01:57,259
and when we tell interact with the user

00:01:52,350 --> 00:02:00,600
interface we had the returns from the

00:01:57,259 --> 00:02:04,729
interface and we had also modifications

00:02:00,600 --> 00:02:08,129
in the database in the logs and so on

00:02:04,729 --> 00:02:11,819
and it was very difficult for us to

00:02:08,129 --> 00:02:13,900
always have a remote shell on the data

00:02:11,819 --> 00:02:19,299
on the server to check everything

00:02:13,900 --> 00:02:23,400
and so the same time and so on so we

00:02:19,299 --> 00:02:28,000
decided to develop this just a quick

00:02:23,400 --> 00:02:31,900
vocabulary first - to know what we're

00:02:28,000 --> 00:02:35,590
talking about we have three kind of

00:02:31,900 --> 00:02:38,079
scripts facility is a script based it's

00:02:35,590 --> 00:02:41,040
written in Perl language and it's crate

00:02:38,079 --> 00:02:44,170
based for now we plan to develop a

00:02:41,040 --> 00:02:47,739
graphical user interface later to help

00:02:44,170 --> 00:02:50,760
creating script but for now we have

00:02:47,739 --> 00:02:54,489
first script is called actuators

00:02:50,760 --> 00:02:58,239
actuators exactly act like a human like

00:02:54,489 --> 00:03:02,950
the tester like a developer or like a

00:02:58,239 --> 00:03:07,000
user an end user they are launched in

00:03:02,950 --> 00:03:10,239
pre-established orders the simulate

00:03:07,000 --> 00:03:12,340
human interaction but the also can load

00:03:10,239 --> 00:03:20,489
can be launched in parallel to simulate

00:03:12,340 --> 00:03:24,549
many many many human many input we have

00:03:20,489 --> 00:03:29,109
one module for now it's for selenium to

00:03:24,549 --> 00:03:34,709
use with with web graphical interface

00:03:29,109 --> 00:03:39,239
ISM but we could have also module with

00:03:34,709 --> 00:03:42,329
using telnet to input data directly

00:03:39,239 --> 00:03:49,329
another module to modify database

00:03:42,329 --> 00:03:52,389
depends on you and even if we use for

00:03:49,329 --> 00:03:55,889
embedded development we could have a

00:03:52,389 --> 00:03:58,840
module to simulate to simulate button

00:03:55,889 --> 00:04:05,560
physical buttons using your search

00:03:58,840 --> 00:04:11,319
protocol search this depends Sikandar

00:04:05,560 --> 00:04:15,069
treats are called validators these are

00:04:11,319 --> 00:04:17,079
responsible for validation what happened

00:04:15,069 --> 00:04:21,579
validate what happened when the

00:04:17,079 --> 00:04:25,360
actuators did something an exit or for

00:04:21,579 --> 00:04:27,819
example login on the screen

00:04:25,360 --> 00:04:30,849
vivoli the turn is responsible for

00:04:27,819 --> 00:04:37,300
checking if you have the right log line

00:04:30,849 --> 00:04:42,669
in the log server if the database is it

00:04:37,300 --> 00:04:45,370
correctly and so on we can have zero if

00:04:42,669 --> 00:04:48,520
not he did too many very debtors pair

00:04:45,370 --> 00:04:54,000
actuator and they are launched in

00:04:48,520 --> 00:04:57,210
parallel in Alexi containers why Alexi

00:04:54,000 --> 00:05:00,370
because it's very light very easy to use

00:04:57,210 --> 00:05:06,550
and very easy to integrate with the

00:05:00,370 --> 00:05:09,460
development the results are stored until

00:05:06,550 --> 00:05:15,270
they are needed so no need to hurry to

00:05:09,460 --> 00:05:20,229
get the result there are stalled result

00:05:15,270 --> 00:05:22,900
status can be passed fade so we can give

00:05:20,229 --> 00:05:26,050
us a validator if you see this in the

00:05:22,900 --> 00:05:30,750
load the test will pass issues disease

00:05:26,050 --> 00:05:33,819
the test will fail or timeout that means

00:05:30,750 --> 00:05:37,050
validator say ok I try to see something

00:05:33,819 --> 00:05:44,729
in the lab but never seen anything so

00:05:37,050 --> 00:05:48,370
you have a problem so as I told you

00:05:44,729 --> 00:05:53,289
reading local remote load the tables

00:05:48,370 --> 00:05:57,009
queries in a recession and so on and we

00:05:53,289 --> 00:06:00,099
I did monitors script that are here to

00:05:57,009 --> 00:06:06,400
monitor the state of some parts of the

00:06:00,099 --> 00:06:08,020
servers if your GUI for example is using

00:06:06,400 --> 00:06:10,539
your lot of resources you can have

00:06:08,020 --> 00:06:14,110
problems euro CPU or you can have a

00:06:10,539 --> 00:06:17,229
problem with memorial occasions these

00:06:14,110 --> 00:06:23,860
are responsible to check all of these

00:06:17,229 --> 00:06:28,360
during the world test process every

00:06:23,860 --> 00:06:33,219
action by actuators validators or

00:06:28,360 --> 00:06:37,449
monitors are time-stamped so after the

00:06:33,219 --> 00:06:38,960
test you are able to check everything at

00:06:37,449 --> 00:06:44,360
the same time ok

00:06:38,960 --> 00:06:48,949
I had this action taken at that time

00:06:44,360 --> 00:06:59,630
stamp okay one second later I had this

00:06:48,949 --> 00:07:05,000
result and so on for now just to start

00:06:59,630 --> 00:07:09,669
okay sorry we just passed the proof of

00:07:05,000 --> 00:07:18,430
concept status we had some working

00:07:09,669 --> 00:07:24,710
demonstration we have get lab side and

00:07:18,430 --> 00:07:30,590
the reasons for this is an MIT so more

00:07:24,710 --> 00:07:33,530
open like the more open than that we are

00:07:30,590 --> 00:07:37,759
just working on it we spent a lot of

00:07:33,530 --> 00:07:40,220
time talking about strategy about

00:07:37,759 --> 00:07:42,199
philosophy of this product how to do

00:07:40,220 --> 00:07:46,940
this how to do something different that

00:07:42,199 --> 00:07:56,900
what we can find somewhere on the on the

00:07:46,940 --> 00:07:59,090
web to have global vision you have the

00:07:56,900 --> 00:08:01,039
actuators running in the Ricochet

00:07:59,090 --> 00:08:05,479
containers if they are launched in

00:08:01,039 --> 00:08:11,470
parallel they act on GRI or on the

00:08:05,479 --> 00:08:16,490
system they catch the JIRA returns

00:08:11,470 --> 00:08:20,840
during this validators are tracking log

00:08:16,490 --> 00:08:23,300
server for example and after that when a

00:08:20,840 --> 00:08:24,050
validator one can launch another

00:08:23,300 --> 00:08:29,240
validator

00:08:24,050 --> 00:08:31,070
if he has some conditions and you have

00:08:29,240 --> 00:08:34,130
the monitors running also in elixir

00:08:31,070 --> 00:08:43,409
containers that are just checking the

00:08:34,130 --> 00:08:47,899
health of the system dynamic approach

00:08:43,409 --> 00:08:50,459
is very simple you write your script you

00:08:47,899 --> 00:08:56,569
launch a first min script which is

00:08:50,459 --> 00:09:00,720
called et tu dot pl actuators are passed

00:08:56,569 --> 00:09:04,279
containers are created for ready debtors

00:09:00,720 --> 00:09:08,819
and monitoring depends on actuators

00:09:04,279 --> 00:09:12,649
after that there are started once very

00:09:08,819 --> 00:09:16,589
the tours are started action takes place

00:09:12,649 --> 00:09:21,509
so actuators are started we wait for

00:09:16,589 --> 00:09:26,550
editors to finish we get and we stall

00:09:21,509 --> 00:09:31,740
the result a hot another route if needed

00:09:26,550 --> 00:09:41,430
if we have a right to Turin this is very

00:09:31,740 --> 00:09:44,759
global very high level point of view to

00:09:41,430 --> 00:09:49,319
help developers to work with we

00:09:44,759 --> 00:09:52,980
developed a lot of Perl module to have a

00:09:49,319 --> 00:09:57,329
higher point of view possible the

00:09:52,980 --> 00:10:02,329
highest one the better but we are

00:09:57,329 --> 00:10:05,370
working on existing module like selenium

00:10:02,329 --> 00:10:12,870
we use a lot of existing module of

00:10:05,370 --> 00:10:16,819
course we don't reinvent the wheel we

00:10:12,870 --> 00:10:20,459
can see here how it works just put

00:10:16,819 --> 00:10:22,759
actuators in a directory monitors in

00:10:20,459 --> 00:10:26,939
another world redditors the third wanna

00:10:22,759 --> 00:10:31,709
create et to.com which describes the

00:10:26,939 --> 00:10:35,100
order file chatters Turin and after that

00:10:31,709 --> 00:10:43,319
you score the main script with a

00:10:35,100 --> 00:10:45,949
directory as a parameter results are in

00:10:43,319 --> 00:10:45,949
JSON format

00:10:47,080 --> 00:10:57,190
easy to read easy to parse easy to do

00:10:51,010 --> 00:11:01,450
what you want after with perfect oars or

00:10:57,190 --> 00:11:04,720
everything and we all of course we are

00:11:01,450 --> 00:11:10,470
planning to complete this and to have

00:11:04,720 --> 00:11:10,470
all the tools you need in one bundle

00:11:13,680 --> 00:11:23,290
example a little example of results you

00:11:17,769 --> 00:11:26,079
can see it very simple for validators

00:11:23,290 --> 00:11:31,140
it's a little bigger because we have

00:11:26,079 --> 00:11:33,250
more things to to say one things

00:11:31,140 --> 00:11:37,000
important to note is that very details

00:11:33,250 --> 00:11:39,100
will give you not only the line Forex

00:11:37,000 --> 00:11:41,410
for example for log modules button is

00:11:39,100 --> 00:11:46,380
aligned you are waiting for but also the

00:11:41,410 --> 00:11:51,550
line before so it's easier for you to

00:11:46,380 --> 00:11:54,100
debug and even if the validator module

00:11:51,550 --> 00:11:57,160
cannot find the line expect the expected

00:11:54,100 --> 00:12:00,990
line it will give you the Rhine it

00:11:57,160 --> 00:12:00,990
control it can find it could find sorry

00:12:03,089 --> 00:12:17,160
just a screenshot to have a look nothing

00:12:06,930 --> 00:12:23,440
the ideal 0z improvement we are thinking

00:12:17,160 --> 00:12:26,130
for now provide the VM image to work

00:12:23,440 --> 00:12:30,310
with it immediately

00:12:26,130 --> 00:12:34,810
I'm module for network scanning for

00:12:30,310 --> 00:12:35,440
cyber security for example add IE

00:12:34,810 --> 00:12:42,100
modules

00:12:35,440 --> 00:12:45,430
maybe the GUI to generate actuator on

00:12:42,100 --> 00:12:47,680
radiator screen as I told you and we are

00:12:45,430 --> 00:12:51,959
thinking on other ways to use this

00:12:47,680 --> 00:12:56,560
framework cybersecurity for example

00:12:51,959 --> 00:12:59,470
Quality Assurance and many things it's

00:12:56,560 --> 00:13:00,670
really a very simple framework and

00:12:59,470 --> 00:13:04,240
versatile

00:13:00,670 --> 00:13:11,620
can use it for many things many things

00:13:04,240 --> 00:13:13,860
we didn't think about thank you very

00:13:11,620 --> 00:13:13,860

YouTube URL: https://www.youtube.com/watch?v=zi_blVaus5E


