Title: OW2con19 Integrating & Deploying Heterogeneous Legacy Components Inspired On A Microservice Archit.
Publication date: 2019-06-20
Playlist: OW2con 2019
Description: 
	The CROSSMINER project is open source project which basically focus on increasing dependence on open-source software (OSS) over the last years and the decisions related to depending on open-source software. The project is forked from a previous project called OSSMETER. The complexity and diversity of its legacy components raised challenges related to the integration and the communications between the build-in components and security aspects for the whole project. In this context, we would present how we used the Microservice techniques with docker to perform an integration and deployment of these heterogeneous legacy components.
- URLs
• GitHub Repository: https://github.com/crossminer/scava
• WIKI: https://crossminer.github.io/scava-docs/
Captions: 
	00:00:05,899 --> 00:00:13,620
hello everyone my name is Amin I'm a

00:00:10,320 --> 00:00:16,670
software engineer at from soft team

00:00:13,620 --> 00:00:21,359
research and development department

00:00:16,670 --> 00:00:25,170
today I'm gonna talk about the cross

00:00:21,359 --> 00:00:28,529
miner project basically we will focus on

00:00:25,170 --> 00:00:31,050
how we integrate it and deploy it 80

00:00:28,529 --> 00:00:33,780
erogenous legacy components inspired on

00:00:31,050 --> 00:00:40,469
a micro service architecture with the

00:00:33,780 --> 00:00:45,360
project first of all let me give you an

00:00:40,469 --> 00:00:47,430
overview about cross miner well the

00:00:45,360 --> 00:00:50,070
project titled developer centric

00:00:47,430 --> 00:00:53,460
knowledge mining from large open source

00:00:50,070 --> 00:00:55,890
software repositories is a European

00:00:53,460 --> 00:01:01,739
founded research project for the hora

00:00:55,890 --> 00:01:04,619
zone in 2020 by the way it's a follow-up

00:01:01,739 --> 00:01:08,070
of another project another research

00:01:04,619 --> 00:01:15,150
project called oz meter the cross miner

00:01:08,070 --> 00:01:18,720
project started on January 2017 and it's

00:01:15,150 --> 00:01:23,759
still ongoing on until the end of this

00:01:18,720 --> 00:01:27,960
year well now let's fix the context of

00:01:23,759 --> 00:01:30,150
the project the context is quite simple

00:01:27,960 --> 00:01:34,590
in definition quite complex in the

00:01:30,150 --> 00:01:38,189
implementation as a developer or as an

00:01:34,590 --> 00:01:42,150
architect I would like to develop new

00:01:38,189 --> 00:01:45,810
systems based on open source libraries

00:01:42,150 --> 00:01:48,479
or open source components to arrive to

00:01:45,810 --> 00:01:53,759
this objective we have to deal with a

00:01:48,479 --> 00:01:56,939
set of challenges first of all to search

00:01:53,759 --> 00:02:01,229
for candidate components that may which

00:01:56,939 --> 00:02:05,250
may fill your requirement then we have

00:02:01,229 --> 00:02:09,270
to evaluate the trivet set of potential

00:02:05,250 --> 00:02:12,660
candidates components to find the the

00:02:09,270 --> 00:02:13,740
most suitable one then we have to

00:02:12,660 --> 00:02:15,960
understand how to

00:02:13,740 --> 00:02:20,550
these components and how to integrate

00:02:15,960 --> 00:02:23,810
them in your system by having a look on

00:02:20,550 --> 00:02:30,090
the official documentation on the

00:02:23,810 --> 00:02:32,250
different blogs forums quite quite

00:02:30,090 --> 00:02:36,920
obvious example here we have Stack

00:02:32,250 --> 00:02:40,920
Overflow and finally we have to monitor

00:02:36,920 --> 00:02:43,920
this component because it could happen

00:02:40,920 --> 00:02:46,590
that its quality goes down for some

00:02:43,920 --> 00:02:52,350
reason maybe there is no longer support

00:02:46,590 --> 00:02:55,410
Exeter etc here at this point the cross

00:02:52,350 --> 00:02:57,380
miner project intervene to deal with all

00:02:55,410 --> 00:03:02,870
these challenges

00:02:57,380 --> 00:03:08,130
basically it helped to to extract

00:03:02,870 --> 00:03:11,340
automatically knowledge by applying and

00:03:08,130 --> 00:03:17,180
supplying some technique mining

00:03:11,340 --> 00:03:22,040
techniques from some mining techniques

00:03:17,180 --> 00:03:26,280
from a set of ore from various

00:03:22,040 --> 00:03:30,300
information sources here we have some

00:03:26,280 --> 00:03:35,430
from code source like github from back

00:03:30,300 --> 00:03:38,400
tracker systems from communication

00:03:35,430 --> 00:03:44,010
channels basically here we have an

00:03:38,400 --> 00:03:47,700
example from Stack Overflow etc etc now

00:03:44,010 --> 00:03:52,140
let's move to do a mission of the soft

00:03:47,700 --> 00:03:55,590
team within this project by the way soft

00:03:52,140 --> 00:04:00,230
team is one of the the consortium

00:03:55,590 --> 00:04:05,040
project one of the consortium project

00:04:00,230 --> 00:04:07,650
partners which was involved and it which

00:04:05,040 --> 00:04:11,180
was in charge of the architecture

00:04:07,650 --> 00:04:15,420
specification and the platform

00:04:11,180 --> 00:04:18,450
integration components it's also a use

00:04:15,420 --> 00:04:20,270
case provider by the integration of the

00:04:18,450 --> 00:04:24,570
cross minor project within the

00:04:20,270 --> 00:04:27,290
development process of its modeling tool

00:04:24,570 --> 00:04:27,290
model

00:04:27,830 --> 00:04:36,539
now let's move to the challenge that we

00:04:31,349 --> 00:04:40,430
had during our mission as I said cross

00:04:36,539 --> 00:04:44,370
miner is a complex complex platform

00:04:40,430 --> 00:04:46,560
basically the complexity and the

00:04:44,370 --> 00:04:50,550
etiology natee of the different

00:04:46,560 --> 00:04:53,879
components especially those irritated

00:04:50,550 --> 00:04:55,740
from the smiter project right the

00:04:53,879 --> 00:04:59,310
challenges related to the integration

00:04:55,740 --> 00:05:01,860
process well first of all we had to

00:04:59,310 --> 00:05:04,680
establish a kind of unified

00:05:01,860 --> 00:05:08,159
communication mechanism to allow the

00:05:04,680 --> 00:05:09,779
different back-end macro components to

00:05:08,159 --> 00:05:14,550
communicate to each other

00:05:09,779 --> 00:05:19,229
secondly we had to to have we had to

00:05:14,550 --> 00:05:22,050
establish or to use a seamless way in

00:05:19,229 --> 00:05:25,830
order to ante in order to establish

00:05:22,050 --> 00:05:29,759
communication between the back-end macro

00:05:25,830 --> 00:05:37,050
components with the different front-end

00:05:29,759 --> 00:05:40,259
clients here you we try to reduce the

00:05:37,050 --> 00:05:44,180
complexity of interaction between all

00:05:40,259 --> 00:05:49,949
these heterogeneous components and

00:05:44,180 --> 00:05:54,889
finally it's quite obvious to address

00:05:49,949 --> 00:06:01,099
other cross cuting aspects like security

00:05:54,889 --> 00:06:01,099
authentication and authorization as well

00:06:01,279 --> 00:06:09,979
one of the most solution available on

00:06:06,599 --> 00:06:13,349
the market we have macro services

00:06:09,979 --> 00:06:20,939
basically it's a kind of an architecture

00:06:13,349 --> 00:06:25,639
style which aim to to structure the plat

00:06:20,939 --> 00:06:29,039
to structure an application as a set of

00:06:25,639 --> 00:06:32,479
loosely couplet components and and

00:06:29,039 --> 00:06:39,460
dependent and and dependent deployed

00:06:32,479 --> 00:06:43,389
services basically each micro service

00:06:39,460 --> 00:06:47,110
address a single responsibility or a

00:06:43,389 --> 00:06:50,500
specific business functionality in the

00:06:47,110 --> 00:06:57,759
in with in a whole platform or in whole

00:06:50,500 --> 00:07:00,580
application so to explain in more

00:06:57,759 --> 00:07:06,220
details the different steps that we had

00:07:00,580 --> 00:07:09,639
to do to survive the first one is to

00:07:06,220 --> 00:07:13,210
identify the different or the main macro

00:07:09,639 --> 00:07:18,639
components that supports or that serve

00:07:13,210 --> 00:07:23,770
the course minor services here we we had

00:07:18,639 --> 00:07:26,680
take the choice to do not impose using a

00:07:23,770 --> 00:07:30,780
common technology to implement each

00:07:26,680 --> 00:07:34,510
component maybe one component could be

00:07:30,780 --> 00:07:39,419
developed or had been developed in Java

00:07:34,510 --> 00:07:43,240
the second in Python in go etc etc

00:07:39,419 --> 00:07:48,010
however the only contents is that each

00:07:43,240 --> 00:07:51,729
component or its all or the services

00:07:48,010 --> 00:07:57,340
exposed by each component should expose

00:07:51,729 --> 00:08:02,010
should be exposed to a rest endpoint the

00:07:57,340 --> 00:08:05,770
second step is to provide a unified

00:08:02,010 --> 00:08:08,590
layer in order to aggregate all the

00:08:05,770 --> 00:08:12,699
services provided by the back-end macro

00:08:08,590 --> 00:08:15,250
components here we aim it to use an

00:08:12,699 --> 00:08:18,690
applet gateway which is a pattern which

00:08:15,250 --> 00:08:26,490
came from the micro service ecosystem

00:08:18,690 --> 00:08:29,770
basically it's it's a cure or it serve

00:08:26,490 --> 00:08:33,459
the functionalities of a reverse proxy

00:08:29,770 --> 00:08:37,469
to write two redirects the different the

00:08:33,459 --> 00:08:41,560
different clients request to handle each

00:08:37,469 --> 00:08:43,450
all the require the client request to

00:08:41,560 --> 00:08:49,240
deliver to associated and to do

00:08:43,450 --> 00:08:51,110
corresponding platform components and

00:08:49,240 --> 00:08:56,260
the third step

00:08:51,110 --> 00:08:59,630
is to allow to address all the security

00:08:56,260 --> 00:09:03,880
aspects of the different services

00:08:59,630 --> 00:09:06,970
provided by the platform by using

00:09:03,880 --> 00:09:10,850
another component which come from the

00:09:06,970 --> 00:09:13,490
maker micro service ecosystem which is a

00:09:10,850 --> 00:09:18,140
kind of an auto get authentication

00:09:13,490 --> 00:09:21,740
system basically it's an underlayer of

00:09:18,140 --> 00:09:25,340
the API gateway which provides some

00:09:21,740 --> 00:09:29,420
authorization and some management levels

00:09:25,340 --> 00:09:33,530
for the different IP I expose it

00:09:29,420 --> 00:09:40,070
publicly by the way we implemented this

00:09:33,530 --> 00:09:43,430
one using a GWT token which is a

00:09:40,070 --> 00:09:48,610
mechanism for authentication and for the

00:09:43,430 --> 00:09:52,580
API gateway we used Netflix Zul a

00:09:48,610 --> 00:09:58,310
Netflix rule proxy or routing to

00:09:52,580 --> 00:10:00,770
implement this API gateway here it's an

00:09:58,310 --> 00:10:04,060
overview about the different components

00:10:00,770 --> 00:10:06,470
of the Micra of the cross minor project

00:10:04,060 --> 00:10:11,240
on the bottom we have the different

00:10:06,470 --> 00:10:14,960
back-end components and on the top we

00:10:11,240 --> 00:10:18,620
have the different layers here we have

00:10:14,960 --> 00:10:22,580
the API gateway and the authentication

00:10:18,620 --> 00:10:25,640
service which which had been added to

00:10:22,580 --> 00:10:30,190
the platform during the refactoring

00:10:25,640 --> 00:10:35,170
phase to move to the deployment solution

00:10:30,190 --> 00:10:40,220
we fell out we we planed to fill out a

00:10:35,170 --> 00:10:44,630
strategy based on containers for many

00:10:40,220 --> 00:10:47,950
reasons because it allowed to provide a

00:10:44,630 --> 00:10:52,490
new solution of the component processes

00:10:47,950 --> 00:10:57,650
and to facilitate the deployment and to

00:10:52,490 --> 00:11:02,750
speed up the deployment one of the most

00:10:57,650 --> 00:11:03,110
favorite a solution provided by in the

00:11:02,750 --> 00:11:04,460
map

00:11:03,110 --> 00:11:07,790
obeah

00:11:04,460 --> 00:11:12,560
in the market we have docker

00:11:07,790 --> 00:11:17,810
so we use it and which is a technology

00:11:12,560 --> 00:11:21,080
based on containers which are stable and

00:11:17,810 --> 00:11:25,610
available for different platform from

00:11:21,080 --> 00:11:30,380
for UNIX for Linux for Windows and Mac

00:11:25,610 --> 00:11:34,670
OS and bye-bye explosive exploring or

00:11:30,380 --> 00:11:36,980
exploding the docker compose which is a

00:11:34,670 --> 00:11:41,200
tool which come with docker in which

00:11:36,980 --> 00:11:46,810
allow us to run and to scale our

00:11:41,200 --> 00:11:50,720
platform and running multi containers

00:11:46,810 --> 00:11:56,000
here a kind of an overview of the

00:11:50,720 --> 00:12:00,820
different containers for the current

00:11:56,000 --> 00:12:06,020
running distribution of the platform and

00:12:00,820 --> 00:12:11,000
here we you you can follow up or trail

00:12:06,020 --> 00:12:15,260
our website trou do Twitter page and our

00:12:11,000 --> 00:12:17,320
github repository and there it is thank

00:12:15,260 --> 00:12:17,320

YouTube URL: https://www.youtube.com/watch?v=46HR6eZfEZk


