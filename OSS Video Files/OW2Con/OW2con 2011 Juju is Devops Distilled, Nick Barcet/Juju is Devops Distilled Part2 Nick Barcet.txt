Title: Juju is Devops Distilled Part2 Nick Barcet
Publication date: 2012-01-05
Playlist: OW2con 2011 Juju is Devops Distilled, Nick Barcet
Description: 
	Speaker:  Nicolas Barcet, Canonical
Abstract: Formerly called Ensemble, Juju is DevOps Distilled. Through the use of charms (renamed from formulas), juju provides shareable, re-usable, and repeatable expressions of DevOps best practices. Juju charms can be used unmodified, or easily changed and connected to fit your needs. Juju provides service orchestration. Juju focuses on managing the service units one need to deliver a single solution, above simply configuring the machines or cloud instances needed to run them. Charms developed, tested, and deployed on local hardware will operate the same in an EC2 API compatible cloud (which includes, of course, OpenStack). There's no need to learn a domain specific language (DSL) to use juju or create charms.
The presentation will deliver an introduction to Juju, using Hadoop as an exemple worload to deploy, and will open to discussions on how itcould be used by OW2 projects.
Captions: 
	00:00:06,410 --> 00:00:14,880
reusability means that there needs to be

00:00:10,580 --> 00:00:17,400
intelligence within the charm within the

00:00:14,880 --> 00:00:21,859
framework for the charm so that the

00:00:17,400 --> 00:00:24,720
charm can know about its environment and

00:00:21,859 --> 00:00:28,199
can make decision at deployment time

00:00:24,720 --> 00:00:31,109
based on this environment it also means

00:00:28,199 --> 00:00:34,050
that we want to have all the function to

00:00:31,109 --> 00:00:36,809
Andrew L scaling included within the

00:00:34,050 --> 00:00:40,620
charm so that once you've expressed this

00:00:36,809 --> 00:00:43,559
knowledge this DevOps knowledge once

00:00:40,620 --> 00:00:46,680
you've distilled it into your charm then

00:00:43,559 --> 00:00:49,379
it is reusable for anyone without having

00:00:46,680 --> 00:00:53,300
to understand again the internal logic

00:00:49,379 --> 00:00:53,300
of the service you're trying to expose

00:00:54,320 --> 00:01:00,600
one thing that we really didn't want to

00:00:58,079 --> 00:01:02,640
do what you impose a specific

00:01:00,600 --> 00:01:07,200
programming language when expressing a

00:01:02,640 --> 00:01:12,420
charm and the framework for Jeju is an

00:01:07,200 --> 00:01:16,080
event base system but for each event you

00:01:12,420 --> 00:01:18,600
can define whatever executable shall be

00:01:16,080 --> 00:01:21,180
called to end all the event so if you

00:01:18,600 --> 00:01:23,700
want to write a charming see I wish you

00:01:21,180 --> 00:01:26,790
good luck but you're enabled to do so if

00:01:23,700 --> 00:01:29,130
you want to write it in in bash or in

00:01:26,790 --> 00:01:31,860
Python or using a configuration

00:01:29,130 --> 00:01:36,299
management tool such as puppet or chef

00:01:31,860 --> 00:01:39,030
or CF engine or name it you are welcome

00:01:36,299 --> 00:01:41,909
to do so as long as this environment is

00:01:39,030 --> 00:01:46,229
something that can be pulled from the

00:01:41,909 --> 00:01:51,149
repository of the platform at the time

00:01:46,229 --> 00:01:55,619
of deployment we are fine with it so

00:01:51,149 --> 00:01:59,820
internally how does its work so as I

00:01:55,619 --> 00:02:04,469
told you the the basic notion of juju is

00:01:59,820 --> 00:02:07,829
to define charms which are the atoms the

00:02:04,469 --> 00:02:11,489
representation of the service and this

00:02:07,829 --> 00:02:15,080
atoms can be instance aided by the juju

00:02:11,489 --> 00:02:15,080
environment one or many

00:02:18,110 --> 00:02:24,060
however a service all by itself doesn't

00:02:20,730 --> 00:02:26,190
make a lot of sense a service needs to

00:02:24,060 --> 00:02:28,370
be collaborating with other services and

00:02:26,190 --> 00:02:30,600
we need to be able to express

00:02:28,370 --> 00:02:32,100
dependencies for example have a cloud

00:02:30,600 --> 00:02:34,710
application that depends on the load

00:02:32,100 --> 00:02:39,030
balancer and that depends on a database

00:02:34,710 --> 00:02:42,090
an SQL database and I will Express

00:02:39,030 --> 00:02:46,500
whenever I can this with an abstract

00:02:42,090 --> 00:02:49,080
format not specifying exactly oh I want

00:02:46,500 --> 00:02:53,430
my SQL or I want a pulse press I will

00:02:49,080 --> 00:02:57,620
just say SQL database if I can and at

00:02:53,430 --> 00:02:57,620
the time of deployment I can choose to

00:02:58,490 --> 00:03:03,930
resolve this dependency for a load

00:03:01,500 --> 00:03:07,140
balancer for example by H a proxy and

00:03:03,930 --> 00:03:11,970
the dependency for an SQL database with

00:03:07,140 --> 00:03:17,120
mysql i will establish the link between

00:03:11,970 --> 00:03:20,240
the two by satisfying these dependencies

00:03:17,120 --> 00:03:24,710
what's interesting in this mobile that

00:03:20,240 --> 00:03:27,210
multiple charms can provide the same

00:03:24,710 --> 00:03:31,650
resolution for a given dependency so for

00:03:27,210 --> 00:03:34,410
example I have a package called H a

00:03:31,650 --> 00:03:37,260
proxy which I started to deploy here but

00:03:34,410 --> 00:03:39,600
I can decide to replace it by another

00:03:37,260 --> 00:03:42,810
one named varnish and because the

00:03:39,600 --> 00:03:45,960
interface between these services are

00:03:42,810 --> 00:03:51,120
doing the same thing we can abstract

00:03:45,960 --> 00:03:53,820
this notion of a load balancer and make

00:03:51,120 --> 00:03:56,340
it completely independent of the D

00:03:53,820 --> 00:03:58,730
underlying code in my cloud application

00:03:56,340 --> 00:04:05,580
I could do exactly the same thing

00:03:58,730 --> 00:04:07,680
replacing my SQL bypass grass so if you

00:04:05,580 --> 00:04:09,000
followed me so far what you will

00:04:07,680 --> 00:04:14,220
understand is one thing that is very

00:04:09,000 --> 00:04:16,880
important in juju is this relation this

00:04:14,220 --> 00:04:19,560
release relation carried all the

00:04:16,880 --> 00:04:23,669
configuration information that is

00:04:19,560 --> 00:04:26,340
necessary to allow my cloud application

00:04:23,669 --> 00:04:27,210
to talk with am outside requirements a

00:04:26,340 --> 00:04:30,600
service

00:04:27,210 --> 00:04:34,470
and vice versa and this relation is what

00:04:30,600 --> 00:04:36,660
is allowing me to scale any component in

00:04:34,470 --> 00:04:39,080
a juju environment completely

00:04:36,660 --> 00:04:41,940
independently just by a single comment

00:04:39,080 --> 00:04:46,470
called dude you add unit and another one

00:04:41,940 --> 00:04:50,130
to remove are just a component called

00:04:46,470 --> 00:04:52,710
juju remove unit and it's because we

00:04:50,130 --> 00:04:54,449
know within juju of the existing

00:04:52,710 --> 00:04:56,280
relation between the different component

00:04:54,449 --> 00:04:59,820
that we can provide this automated

00:04:56,280 --> 00:05:02,729
scaling mechanism for example in a

00:04:59,820 --> 00:05:08,130
normal world without juju every time you

00:05:02,729 --> 00:05:10,139
would I have to remove arm an instance

00:05:08,130 --> 00:05:14,039
of your cloud application you would have

00:05:10,139 --> 00:05:17,849
to modify the configuration of your load

00:05:14,039 --> 00:05:19,800
balancer but you remove this IP address

00:05:17,849 --> 00:05:21,750
from it or every time you will have to

00:05:19,800 --> 00:05:23,460
add you would have to defy the load

00:05:21,750 --> 00:05:25,050
balancer to add the IP address to it

00:05:23,460 --> 00:05:27,479
this is something that is completely

00:05:25,050 --> 00:05:33,870
automatically handled for as many

00:05:27,479 --> 00:05:39,270
relations as you want so really the core

00:05:33,870 --> 00:05:42,180
of what we deliver in in juju is this

00:05:39,270 --> 00:05:48,060
capacity to express dependencies between

00:05:42,180 --> 00:05:50,550
services to define all the configuration

00:05:48,060 --> 00:05:52,680
for the services and to abstract the

00:05:50,550 --> 00:05:56,219
notion of relation with its

00:05:52,680 --> 00:06:04,190
configuration so that scaling is not

00:05:56,219 --> 00:06:08,909
anymore an issue this is an example of a

00:06:04,190 --> 00:06:12,389
wiki deployment where um I feel there's

00:06:08,909 --> 00:06:15,419
a little laser pointer here I don't know

00:06:12,389 --> 00:06:18,780
what you activated maybe this yeah so

00:06:15,419 --> 00:06:21,830
here we've got a wiki that oh by the way

00:06:18,780 --> 00:06:24,449
this graph is produced automatically by

00:06:21,830 --> 00:06:28,789
this guac is produced Oh matically by

00:06:24,449 --> 00:06:28,789
juju actually we produce our

00:06:29,640 --> 00:06:34,090
an output from the status comment that

00:06:32,140 --> 00:06:36,370
can be interpreted into this graph and

00:06:34,090 --> 00:06:39,780
here we've got a demo wiki that has been

00:06:36,370 --> 00:06:42,570
instantiated on two nodes that is

00:06:39,780 --> 00:06:46,090
talking with a load balancer that's been

00:06:42,570 --> 00:06:52,000
associated on one node which is talking

00:06:46,090 --> 00:06:55,030
to you a couple DB the domain database

00:06:52,000 --> 00:06:58,590
and it's slave and here we've got a

00:06:55,030 --> 00:07:01,450
memcache implementation and of course in

00:06:58,590 --> 00:07:06,000
whatever is in any of these box can be

00:07:01,450 --> 00:07:10,510
independently scale from each other box

00:07:06,000 --> 00:07:13,450
to respond to a given demand what what

00:07:10,510 --> 00:07:17,830
we are not doing indeed you at this time

00:07:13,450 --> 00:07:20,710
is determining when to scale so that

00:07:17,830 --> 00:07:23,680
still is something that you have to

00:07:20,710 --> 00:07:27,160
handle through an external service but

00:07:23,680 --> 00:07:32,920
we give you a very simple way to express

00:07:27,160 --> 00:07:37,120
how your services scale and use existing

00:07:32,920 --> 00:07:39,790
services to scale with it and have very

00:07:37,120 --> 00:07:42,340
very simple commands such as juju deploy

00:07:39,790 --> 00:07:45,220
GGO ad units did you remove unit to

00:07:42,340 --> 00:07:48,190
manage your infrastructure and this is

00:07:45,220 --> 00:07:51,340
how we are now talking with compatible

00:07:48,190 --> 00:07:53,770
one and specifically with Jamie on how

00:07:51,340 --> 00:07:57,220
we can connect this technology which

00:07:53,770 --> 00:07:59,440
does make sense at a given cloud

00:07:57,220 --> 00:08:01,270
infrastructure and which we think could

00:07:59,440 --> 00:08:07,180
translate very well from a core

00:08:01,270 --> 00:08:11,440
definition to a juju implementation no

00:08:07,180 --> 00:08:14,440
that's not our moving my slides so I

00:08:11,440 --> 00:08:17,470
wanted to keep it short I was only given

00:08:14,440 --> 00:08:19,060
20 minutes so i think i'm just at it if

00:08:17,470 --> 00:08:21,930
you want more information of course i'm

00:08:19,060 --> 00:08:24,820
here a little bit more until after lunch

00:08:21,930 --> 00:08:28,410
so please do not hesitate to come talk

00:08:24,820 --> 00:08:31,300
to me there is plenty of information

00:08:28,410 --> 00:08:33,700
documentation on juju do guincho calm

00:08:31,300 --> 00:08:35,740
there are also videos blog posts of

00:08:33,700 --> 00:08:38,440
people who have written charms that give

00:08:35,740 --> 00:08:41,979
that their experience on how this has

00:08:38,440 --> 00:08:44,310
been done on cloud da Vinci calm thank

00:08:41,979 --> 00:08:44,310

YouTube URL: https://www.youtube.com/watch?v=8_ubkJ-MrF0


