Title: Juju is Devops Distilled Part1 Nick Barcet
Publication date: 2012-01-05
Playlist: OW2con 2011 Juju is Devops Distilled, Nick Barcet
Description: 
	Speaker:  Nicolas Barcet, Canonical
Abstract: Formerly called Ensemble, Juju is DevOps Distilled. Through the use of charms (renamed from formulas), juju provides shareable, re-usable, and repeatable expressions of DevOps best practices. Juju charms can be used unmodified, or easily changed and connected to fit your needs. Juju provides service orchestration. Juju focuses on managing the service units one need to deliver a single solution, above simply configuring the machines or cloud instances needed to run them. Charms developed, tested, and deployed on local hardware will operate the same in an EC2 API compatible cloud (which includes, of course, OpenStack). There's no need to learn a domain specific language (DSL) to use juju or create charms.
The presentation will deliver an introduction to Juju, using Hadoop as an exemple worload to deploy, and will open to discussions on how itcould be used by OW2 projects.
Captions: 
	00:00:04,609 --> 00:00:12,990
hello everyone so do you well first of

00:00:10,800 --> 00:00:16,500
all I've had a few questions so i just

00:00:12,990 --> 00:00:19,770
added to slide just before starting this

00:00:16,500 --> 00:00:22,590
presentation to explain whoo canonical

00:00:19,770 --> 00:00:26,580
is canonical is the company that

00:00:22,590 --> 00:00:30,470
supports Ubuntu it's the company that

00:00:26,580 --> 00:00:34,140
employs most of the people working on

00:00:30,470 --> 00:00:36,980
the Ubuntu platform which are not

00:00:34,140 --> 00:00:39,300
community members half of our

00:00:36,980 --> 00:00:41,300
contribution coming from this team the

00:00:39,300 --> 00:00:47,190
other half is coming from the community

00:00:41,300 --> 00:00:50,129
bring to you is today a success not only

00:00:47,190 --> 00:00:55,170
anymore on the desktop but also in the

00:00:50,129 --> 00:00:57,120
cloud and we are quite proud to state

00:00:55,170 --> 00:01:01,620
now that we will choose number one cloud

00:00:57,120 --> 00:01:04,650
OS and that's the truth not only as a

00:01:01,620 --> 00:01:08,340
guest in the cloud but also as the host

00:01:04,650 --> 00:01:12,060
that is used in more and more deployment

00:01:08,340 --> 00:01:16,770
to deploy open source cloud whether it

00:01:12,060 --> 00:01:21,270
is using eucalyptus OpenStack or open

00:01:16,770 --> 00:01:24,270
nebula the the choice that we've made

00:01:21,270 --> 00:01:26,820
recently to switch to open sac was

00:01:24,270 --> 00:01:30,180
driven mostly by community reason and

00:01:26,820 --> 00:01:32,130
the adaptation but we are very happy to

00:01:30,180 --> 00:01:35,299
see a platform that is growing very

00:01:32,130 --> 00:01:39,420
rapidly and getting many many partners

00:01:35,299 --> 00:01:42,960
and I believe there is great future in

00:01:39,420 --> 00:01:45,899
open source cloud personally I've just

00:01:42,960 --> 00:01:48,630
recently been appointed as a director of

00:01:45,899 --> 00:01:51,479
the open cloud initiative some very

00:01:48,630 --> 00:01:55,560
interesting principal defined on the

00:01:51,479 --> 00:01:57,780
open cloud initiative org website you

00:01:55,560 --> 00:02:01,100
may want to have a look at it the next

00:01:57,780 --> 00:02:06,719
time you decide which provider to use

00:02:01,100 --> 00:02:09,849
any way back to juju as we've been

00:02:06,719 --> 00:02:13,329
dealing with cloud

00:02:09,849 --> 00:02:17,780
we've been realizing very quickly that

00:02:13,329 --> 00:02:22,640
when cloud was bringing was ability to

00:02:17,780 --> 00:02:25,390
give elasticity to people and when

00:02:22,640 --> 00:02:29,090
you're talking about elasticity managing

00:02:25,390 --> 00:02:31,970
machines is not anymore the best concept

00:02:29,090 --> 00:02:37,700
you can deal with what do you is

00:02:31,970 --> 00:02:42,040
offering is to manage services not

00:02:37,700 --> 00:02:48,159
machines anymore so if we look at a

00:02:42,040 --> 00:02:51,349
traditional stack we have the hardware

00:02:48,159 --> 00:02:54,010
that will always exist you have an

00:02:51,349 --> 00:02:58,430
operating system you'll have a

00:02:54,010 --> 00:03:01,359
virtualization layer you'll have in this

00:02:58,430 --> 00:03:03,590
visually industrialisation layer maybe

00:03:01,359 --> 00:03:07,849
cloud infrastructure as a service

00:03:03,590 --> 00:03:11,540
included people will use configuration

00:03:07,849 --> 00:03:13,750
management to automatically deployed

00:03:11,540 --> 00:03:16,040
machines and configuration management is

00:03:13,750 --> 00:03:19,310
really great when you've got a large

00:03:16,040 --> 00:03:23,060
number of machines to handle to

00:03:19,310 --> 00:03:25,940
reproduce your deployments over multiple

00:03:23,060 --> 00:03:28,909
machines however there was a missing

00:03:25,940 --> 00:03:31,849
link a link that would allow that you

00:03:28,909 --> 00:03:34,849
express not in terms of machines anymore

00:03:31,849 --> 00:03:37,069
but in terms of services how things

00:03:34,849 --> 00:03:44,359
interact together especially when you

00:03:37,069 --> 00:03:49,069
scale it in and out this arm is coming

00:03:44,359 --> 00:03:53,569
from the work we've been seeing and then

00:03:49,069 --> 00:03:56,150
embracing of a new kind of people these

00:03:53,569 --> 00:04:00,079
people are generally called DevOps

00:03:56,150 --> 00:04:03,709
people that are mixing the experience of

00:04:00,079 --> 00:04:08,389
a developer with the experience of an

00:04:03,709 --> 00:04:11,030
operator to deploy stuff in the cloud

00:04:08,389 --> 00:04:12,739
what the cloud brings to a developer is

00:04:11,030 --> 00:04:14,810
suddenly the ability to be its own

00:04:12,739 --> 00:04:16,639
operator it doesn't rely any more on the

00:04:14,810 --> 00:04:20,120
infrastructure people to deploy his

00:04:16,639 --> 00:04:23,060
application and the operator suddenly

00:04:20,120 --> 00:04:26,210
can become a developer and apply is now

00:04:23,060 --> 00:04:30,919
of being an operator to the development

00:04:26,210 --> 00:04:37,100
inmates when you do this one thing that

00:04:30,919 --> 00:04:40,370
is are occurring to you is that the less

00:04:37,100 --> 00:04:42,530
you deal with the machines the

00:04:40,370 --> 00:04:46,430
abstraction layer that the cloud brings

00:04:42,530 --> 00:04:49,160
to you he is great when you are the

00:04:46,430 --> 00:04:50,720
infrastructure as a service level but

00:04:49,160 --> 00:04:53,600
you're still dealing wincing and the

00:04:50,720 --> 00:04:57,350
less you dealing with machines the the

00:04:53,600 --> 00:04:59,389
freer you are to actually deliver what

00:04:57,350 --> 00:05:02,510
you want and it's actually much easier

00:04:59,389 --> 00:05:05,330
to explain to when i'm a developer or an

00:05:02,510 --> 00:05:08,660
operator to explain to my cio what I'm

00:05:05,330 --> 00:05:11,350
doing in terms of services I want to put

00:05:08,660 --> 00:05:14,240
in place a service to handle the

00:05:11,350 --> 00:05:17,930
emailing campaign that's something you

00:05:14,240 --> 00:05:23,540
understand I want you install Ubuntu or

00:05:17,930 --> 00:05:25,130
Windows or read at on a machine to send

00:05:23,540 --> 00:05:29,930
email and I want to install this on

00:05:25,130 --> 00:05:33,680
another machine to review contents this

00:05:29,930 --> 00:05:37,400
isn't not speaking to your CIO so really

00:05:33,680 --> 00:05:39,080
having the ability to raise the

00:05:37,400 --> 00:05:42,890
abstraction layer to service is

00:05:39,080 --> 00:05:48,580
something really important indeed you

00:05:42,890 --> 00:05:52,820
we've been defining what a service is

00:05:48,580 --> 00:05:56,660
through a concept called charms a charm

00:05:52,820 --> 00:06:01,639
is a definition that is meant to be

00:05:56,660 --> 00:06:04,419
completely shareable and reusable the

00:06:01,639 --> 00:06:08,180
idea here is that you want to be able to

00:06:04,419 --> 00:06:11,210
share this charm and reuse it as many

00:06:08,180 --> 00:06:13,460
time as you can without modification

00:06:11,210 --> 00:06:16,610
outside of the configuration of the

00:06:13,460 --> 00:06:19,070
charm of course the first time you write

00:06:16,610 --> 00:06:23,389
a charm you don't get everything every

00:06:19,070 --> 00:06:26,030
use case but over time if the charm is

00:06:23,389 --> 00:06:28,250
shared and there is a community that

00:06:26,030 --> 00:06:30,919
builds around it that can add to the

00:06:28,250 --> 00:06:33,740
configuration option you will have a

00:06:30,919 --> 00:06:36,320
build up that will bring all the

00:06:33,740 --> 00:06:39,770
configuration that one can dream of

00:06:36,320 --> 00:06:43,970
in time so for example instead of having

00:06:39,770 --> 00:06:47,690
a MySQL charm for standalone mysql

00:06:43,970 --> 00:06:51,440
another charm for replicated mysql why

00:06:47,690 --> 00:06:57,040
not have an option that says oh activate

00:06:51,440 --> 00:07:01,820
replication in my charm to deploy a

00:06:57,040 --> 00:07:05,030
charm and all the vocabulary and the

00:07:01,820 --> 00:07:07,880
basic concept are around jeju are very

00:07:05,030 --> 00:07:11,270
closely related to our experience we is

00:07:07,880 --> 00:07:15,560
dealing with packages Debian packages

00:07:11,270 --> 00:07:20,210
that we use in new bruns you did bring a

00:07:15,560 --> 00:07:22,790
breakthrough some 10 15 years ago in the

00:07:20,210 --> 00:07:25,640
way people were deploying software and

00:07:22,790 --> 00:07:28,190
what we're trying to do with juju is the

00:07:25,640 --> 00:07:31,700
same thing but going from packages that

00:07:28,190 --> 00:07:38,060
are on a single machine to services are

00:07:31,700 --> 00:07:42,730
deployed on a multitude of machine the

00:07:38,060 --> 00:07:46,070
idea here is as we have in the apt

00:07:42,730 --> 00:07:48,260
repositories something like thirty three

00:07:46,070 --> 00:07:52,730
thousand packages that represent

00:07:48,260 --> 00:07:55,670
something like 3500 applica application

00:07:52,730 --> 00:07:59,390
and user application we want to build a

00:07:55,670 --> 00:08:02,030
collection of charm that will mean that

00:07:59,390 --> 00:08:05,390
you have the charm you want when you

00:08:02,030 --> 00:08:07,100
need it and if you are developing your

00:08:05,390 --> 00:08:11,080
own application generally this

00:08:07,100 --> 00:08:14,800
application is internet interacting with

00:08:11,080 --> 00:08:17,150
services and if you can only care about

00:08:14,800 --> 00:08:19,760
writing the charm for your custom

00:08:17,150 --> 00:08:21,760
application and describe our G can

00:08:19,760 --> 00:08:25,640
interact with other services and

00:08:21,760 --> 00:08:28,930
automatically benefit from them it is a

00:08:25,640 --> 00:08:28,930
direct benefit to you

00:08:31,140 --> 00:08:42,210
the idea of juju is to focus on

00:08:37,020 --> 00:08:47,680
delivering service units that are

00:08:42,210 --> 00:08:51,310
focusing about one service okay in a

00:08:47,680 --> 00:08:56,530
charm we don't want to have 220 services

00:08:51,310 --> 00:09:01,840
being expressed we want these services

00:08:56,530 --> 00:09:03,910
to be armed are autonomous but then know

00:09:01,840 --> 00:09:06,790
about their relationship they can have

00:09:03,910 --> 00:09:10,900
with one another the way we've deployed

00:09:06,790 --> 00:09:14,080
we've written jujuy that we have

00:09:10,900 --> 00:09:16,240
something in juju called a provider and

00:09:14,080 --> 00:09:20,640
the provider is completely independent

00:09:16,240 --> 00:09:24,190
of the charm my provider is going to

00:09:20,640 --> 00:09:28,960
transform things have expressed in my

00:09:24,190 --> 00:09:34,290
charm into action into a cloud like

00:09:28,960 --> 00:09:40,240
Amazon ec2 or any ec2 compliant cloud or

00:09:34,290 --> 00:09:42,670
into a open sag or into why not a bare

00:09:40,240 --> 00:09:44,560
metal machine provider such as Orchestra

00:09:42,670 --> 00:09:49,450
which is a tool that we've built into

00:09:44,560 --> 00:09:52,150
ubuntu to deploy bare metal operating

00:09:49,450 --> 00:09:56,320
system on bare metal so we have the

00:09:52,150 --> 00:09:58,900
ability to express services we have the

00:09:56,320 --> 00:10:02,890
ability to define providers and

00:09:58,900 --> 00:10:07,020
independently choose at deployment time

00:10:02,890 --> 00:10:07,020

YouTube URL: https://www.youtube.com/watch?v=McHLMrwV7aI


