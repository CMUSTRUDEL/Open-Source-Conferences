Title: OW2con 2011 Wide-spreading performance testing at Orange with OW2 CLIF: an SOA use case Part 1
Publication date: 2012-01-12
Playlist: OW2con 2011 OW2con 2011 Wide-spreading performance testing
Description: 
	Speaker: Bruno Dillenseger, France Telecom/ Orange
Abstract: The CLIF Load Injection Framework project was launched in year 2003 by Orange Labs (France Telecom R&D) and INRIA, in the ObjectWeb /OW2 community. Since then, Orange Labs have been leading this project, bringing  many code contributions. Why? As an integrated telco, Orange has to handle and interconnect a great variety of Information and Networking technologies, with high stakes in terms of service availability and quality of service. Testing in general, and more particularly performance testing, has become a major challenge for Orange. Among the tens of real CLIF use cases at Orange, we focus on the WSOI test case, the web-service oriented infrastructure that runs over 500 web services consumers and providers, and handles about half a billion calls per month for the Orange Group.
Captions: 
	00:00:04,279 --> 00:00:11,519
so I'm going to talk about one use case

00:00:07,560 --> 00:00:17,060
among tens of existing use cases of

00:00:11,519 --> 00:00:21,539
cliff in the ranch and it will be about

00:00:17,060 --> 00:00:24,390
service-oriented architecture so what

00:00:21,539 --> 00:00:27,029
what clip is about it is about testing

00:00:24,390 --> 00:00:29,880
service performance and resilience to as

00:00:27,029 --> 00:00:33,120
high traffic what we can call also load

00:00:29,880 --> 00:00:35,760
testing so imagine any system in the

00:00:33,120 --> 00:00:40,530
rest here the application or equipment

00:00:35,760 --> 00:00:42,300
and where to test its performance what

00:00:40,530 --> 00:00:44,579
you are going to do here for testicles

00:00:42,300 --> 00:00:48,750
that you are going to generate request

00:00:44,579 --> 00:00:51,390
from those three bucks blue boxes here

00:00:48,750 --> 00:00:55,530
which I called Road injector one team at

00:00:51,390 --> 00:00:57,600
etc those load injectors will send

00:00:55,530 --> 00:01:00,270
requests wait for replies and measure

00:00:57,600 --> 00:01:02,969
the response times and they will

00:01:00,270 --> 00:01:06,659
generate these requests according to a

00:01:02,969 --> 00:01:11,670
given scenario that defines the workload

00:01:06,659 --> 00:01:15,299
and very typically those scenarios will

00:01:11,670 --> 00:01:18,860
have we run what we call via choice

00:01:15,299 --> 00:01:21,720
users we draw the artificial

00:01:18,860 --> 00:01:23,939
representation of real users it means

00:01:21,720 --> 00:01:26,700
that we want here to inject a realistic

00:01:23,939 --> 00:01:30,659
low so it's most of the time modeled

00:01:26,700 --> 00:01:36,420
according to real user sessions through

00:01:30,659 --> 00:01:38,470
the HR users and here you had also some

00:01:36,420 --> 00:01:41,170
resource probes that will make it

00:01:38,470 --> 00:01:45,820
to observe the risk of computing and

00:01:41,170 --> 00:01:48,490
networking usage on the system under

00:01:45,820 --> 00:01:51,520
test or exam from the cpu uzh network

00:01:48,490 --> 00:01:53,890
usage memory usage and so on but you can

00:01:51,520 --> 00:01:55,330
also put it on the load injectors in

00:01:53,890 --> 00:01:57,910
order to check that they are not

00:01:55,330 --> 00:02:01,120
overloaded because if your own injector

00:01:57,910 --> 00:02:04,720
are themselves promote it then you will

00:02:01,120 --> 00:02:07,120
get biased measures such a good

00:02:04,720 --> 00:02:08,710
situation and possibly they won't run

00:02:07,120 --> 00:02:10,810
exactly the scenario that you are

00:02:08,710 --> 00:02:13,810
defining so it's it's a good idea to

00:02:10,810 --> 00:02:18,040
check the head health of your load

00:02:13,810 --> 00:02:20,530
ejector and finally the test supervision

00:02:18,040 --> 00:02:23,680
here what you called many most of the

00:02:20,530 --> 00:02:28,120
time the console where you got the

00:02:23,680 --> 00:02:31,030
tester bench maker is supervising so it

00:02:28,120 --> 00:02:33,550
can execute the test monitor controlled

00:02:31,030 --> 00:02:40,090
execution of all my Road injectors on

00:02:33,550 --> 00:02:41,950
ports and finally generate a report and

00:02:40,090 --> 00:02:46,030
so what makes the difference between

00:02:41,950 --> 00:02:49,810
clip and overlook testing tools while

00:02:46,030 --> 00:02:51,720
chief comes with more more than just the

00:02:49,810 --> 00:02:56,860
basic picture that I've described before

00:02:51,720 --> 00:02:59,739
in the previous slide if really comes

00:02:56,860 --> 00:03:02,180
with advanced features for example you

00:02:59,739 --> 00:03:06,530
can change that in catering testing

00:03:02,180 --> 00:03:10,370
number of virtual users you have the

00:03:06,530 --> 00:03:15,319
support for tests on any scale we have

00:03:10,370 --> 00:03:17,920
examples in a range of tests with more

00:03:15,319 --> 00:03:21,760
than 10 million of virtual users and

00:03:17,920 --> 00:03:25,909
also with more than 1,000 root injectors

00:03:21,760 --> 00:03:27,799
which has a big big everything and we

00:03:25,909 --> 00:03:29,989
worked a lot recently during this year

00:03:27,799 --> 00:03:32,810
to optimize the deployment time and the

00:03:29,989 --> 00:03:36,290
resilience and the fault tolerance also

00:03:32,810 --> 00:03:39,829
because when you get distributed systems

00:03:36,290 --> 00:03:44,019
you may have some some faults and what

00:03:39,829 --> 00:03:46,669
you want to write your tests however

00:03:44,019 --> 00:03:49,090
also what is interesting is that you

00:03:46,669 --> 00:03:52,159
have we are integrated resource probes

00:03:49,090 --> 00:03:54,290
so when you deploy a plan there is both

00:03:52,159 --> 00:03:57,139
there are both the road injectors on the

00:03:54,290 --> 00:04:00,439
boat it's very convenient and we are

00:03:57,139 --> 00:04:06,169
also this is very recent this is a beta

00:04:00,439 --> 00:04:09,049
release now a limited room 42 what is

00:04:06,169 --> 00:04:13,069
also striking with k Fitz's person

00:04:09,049 --> 00:04:15,049
versatility first it is independent from

00:04:13,069 --> 00:04:21,430
your operating system because it's based

00:04:15,049 --> 00:04:28,729
on java 125 so you can run windows linux

00:04:21,430 --> 00:04:31,340
mac inter solaris or whatever or HP it

00:04:28,729 --> 00:04:33,860
is integrated to there is an integration

00:04:31,340 --> 00:04:37,699
13 so you can use it as plugins or as a

00:04:33,860 --> 00:04:39,529
standalone eclipse RCP application there

00:04:37,699 --> 00:04:43,669
is also an integration in

00:04:39,529 --> 00:04:45,919
the to add cell or GPS if you want to

00:04:43,669 --> 00:04:49,069
run a performance-based continuous

00:04:45,919 --> 00:04:52,839
integration there is also a command line

00:04:49,069 --> 00:04:58,129
which provides a full set of features

00:04:52,839 --> 00:05:00,919
used through and or method and you can

00:04:58,129 --> 00:05:03,109
define your own probes unload injectors

00:05:00,919 --> 00:05:04,819
very easily there is an eclipse with on

00:05:03,109 --> 00:05:07,849
to define your road injectors if you

00:05:04,819 --> 00:05:12,349
want to introduce you go to work or API

00:05:07,849 --> 00:05:14,119
for for generating a request and you can

00:05:12,349 --> 00:05:17,149
also define your own probe if you have

00:05:14,119 --> 00:05:23,449
some specific equipment that you want to

00:05:17,149 --> 00:05:25,789
monitor so the question is why why

00:05:23,449 --> 00:05:29,779
orange has been has launched this

00:05:25,789 --> 00:05:32,359
project and still contributing to the

00:05:29,779 --> 00:05:36,469
project and leading the project when the

00:05:32,359 --> 00:05:37,659
case of oranges is very particular it's

00:05:36,469 --> 00:05:42,739
an integrated telecommunications

00:05:37,659 --> 00:05:48,169
operator so it manages a vast variety of

00:05:42,739 --> 00:05:51,709
technologies mobile networks hotspots

00:05:48,169 --> 00:05:56,239
fixed networks all kinds of protocols

00:05:51,709 --> 00:06:01,610
for voice over IP or all the old voice

00:05:56,239 --> 00:06:06,079
technologies or protocols the dedicated

00:06:01,610 --> 00:06:08,239
to specific applications wide variety or

00:06:06,079 --> 00:06:12,199
so of equipments of service platforms

00:06:08,239 --> 00:06:15,679
applications and so on so with more than

00:06:12,199 --> 00:06:18,139
200 millions clients in 42 countries you

00:06:15,679 --> 00:06:21,379
can imagine that the performance issues

00:06:18,139 --> 00:06:25,159
are a critical especially orange wants

00:06:21,379 --> 00:06:27,169
to provide to be a reference in terms of

00:06:25,159 --> 00:06:31,280
quality of service and user experience

00:06:27,169 --> 00:06:33,350
and also user confidence so this is this

00:06:31,280 --> 00:06:39,410
shows that performance is really

00:06:33,350 --> 00:06:42,350
critical okay so cliff is led by a ranch

00:06:39,410 --> 00:06:50,000
in the very beginning it wasn't sure

00:06:42,350 --> 00:06:53,830
with within react and and why do we why

00:06:50,000 --> 00:06:57,470
why is this project strategy for lunch

00:06:53,830 --> 00:07:01,300
first of all for its versatility and its

00:06:57,470 --> 00:07:04,730
ability to be to be adapted to different

00:07:01,300 --> 00:07:07,370
technologies and you have here a list of

00:07:04,730 --> 00:07:10,760
I don't know how many protocols that we

00:07:07,370 --> 00:07:14,020
have been testing since the beginning it

00:07:10,760 --> 00:07:16,730
includes very known or why not protocols

00:07:14,020 --> 00:07:23,090
from the information technologies and

00:07:16,730 --> 00:07:26,120
networking things like things which are

00:07:23,090 --> 00:07:29,660
related to the homeless on boxes and

00:07:26,120 --> 00:07:33,139
also some pro priority proprietary

00:07:29,660 --> 00:07:36,140
protocols for which of course and no

00:07:33,139 --> 00:07:38,690
tooling was was existing before we did

00:07:36,140 --> 00:07:41,419
it of course it's much cheaper than

00:07:38,690 --> 00:07:45,080
specific commercial tools that while

00:07:41,419 --> 00:07:48,560
orange uses also for some for in some

00:07:45,080 --> 00:07:53,030
cases but which is not necessary for all

00:07:48,560 --> 00:07:54,630
these cases or not adapted because and

00:07:53,030 --> 00:07:58,230
protocols may

00:07:54,630 --> 00:08:00,990
supported what is interesting in going

00:07:58,230 --> 00:08:03,660
open source is the feedback from the

00:08:00,990 --> 00:08:05,640
community from the users because what is

00:08:03,660 --> 00:08:07,920
very important for a testing tool is the

00:08:05,640 --> 00:08:10,050
confidence that you have in the results

00:08:07,920 --> 00:08:12,840
in what you observe and so getting

00:08:10,050 --> 00:08:14,940
feedback from a community will give you

00:08:12,840 --> 00:08:18,090
more confidence because if there are

00:08:14,940 --> 00:08:20,040
some defaults in measures then the

00:08:18,090 --> 00:08:22,680
community we will tell you when you

00:08:20,040 --> 00:08:27,270
would be able to fix it so it's very

00:08:22,680 --> 00:08:31,250
very good for testing also because the

00:08:27,270 --> 00:08:34,560
the source code can be can be browsed by

00:08:31,250 --> 00:08:38,400
some advanced users that want to check

00:08:34,560 --> 00:08:40,970
that the measure is correct for it so

00:08:38,400 --> 00:08:43,950
feedback is very important of course we

00:08:40,970 --> 00:08:48,410
we have some community contributions so

00:08:43,950 --> 00:08:52,800
we get more then what we are spent and

00:08:48,410 --> 00:08:57,570
it's also kristin is a vector for a

00:08:52,800 --> 00:08:59,220
research transfer we did some we did

00:08:57,570 --> 00:09:02,610
some research in software components

00:08:59,220 --> 00:09:04,710
with the fractal components Madame also

00:09:02,610 --> 00:09:07,110
in autonomic computing and now in 12

00:09:04,710 --> 00:09:10,400
computing and we have a lot of use cases

00:09:07,110 --> 00:09:14,190
of all these advanced research topics

00:09:10,400 --> 00:09:16,200
that we applied in the field of

00:09:14,190 --> 00:09:20,550
reference this thing i will show you one

00:09:16,200 --> 00:09:27,030
of them so now let's focus on the use

00:09:20,550 --> 00:09:29,270
case by itself the ws12 I it means the

00:09:27,030 --> 00:09:33,500
web service orientated infrastructure

00:09:29,270 --> 00:09:36,210
which is the oranges web service

00:09:33,500 --> 00:09:41,630
orientated first infrastructure which is

00:09:36,210 --> 00:09:46,140
now deployed for many services so before

00:09:41,630 --> 00:09:52,230
before this recent past tutor each time

00:09:46,140 --> 00:09:54,110
we orange or a partner did what we're

00:09:52,230 --> 00:09:56,329
doing a service

00:09:54,110 --> 00:09:59,089
the service is here so it's either

00:09:56,329 --> 00:10:03,680
orange or Potter the users are below

00:09:59,089 --> 00:10:05,870
they are using this service the use of

00:10:03,680 --> 00:10:09,709
the neighbors and services which are

00:10:05,870 --> 00:10:13,850
building works for example for sending

00:10:09,709 --> 00:10:16,610
SMS messages nedra's book storage

00:10:13,850 --> 00:10:19,279
capabilities or identity management

00:10:16,610 --> 00:10:21,560
loading facilities contain billing and

00:10:19,279 --> 00:10:25,910
so on you have all these enablers and

00:10:21,560 --> 00:10:28,760
services you for example can manage the

00:10:25,910 --> 00:10:30,860
subscription to a service and you have

00:10:28,760 --> 00:10:33,860
an infrastructure in the video in

00:10:30,860 --> 00:10:37,730
between which will endure a lot of non

00:10:33,860 --> 00:10:41,329
functional features like like accounting

00:10:37,730 --> 00:10:43,850
your security access control service

00:10:41,329 --> 00:10:46,700
level management or oh that's this kind

00:10:43,850 --> 00:10:48,709
of stuff and what happened is that we

00:10:46,700 --> 00:10:52,610
had a proliferation of specific

00:10:48,709 --> 00:10:55,579
infrastructures you know with so it's

00:10:52,610 --> 00:11:02,420
very not easy to manage them to

00:10:55,579 --> 00:11:05,449
implement a so came w SOI platform with

00:11:02,420 --> 00:11:09,230
the idea of having a unified and share

00:11:05,449 --> 00:11:10,940
infrastructure forward services so the

00:11:09,230 --> 00:11:14,209
benefits are cost reduction of course

00:11:10,940 --> 00:11:16,610
because you are common security access

00:11:14,209 --> 00:11:21,339
control scaling supervision maintenance

00:11:16,610 --> 00:11:24,680
for everything is just the once and once

00:11:21,339 --> 00:11:26,630
and also when was new project is

00:11:24,680 --> 00:11:30,440
starting a new service starting and

00:11:26,630 --> 00:11:33,140
there is no cost the first are no delay

00:11:30,440 --> 00:11:37,830
because the infrastructure is ready is

00:11:33,140 --> 00:11:43,620
it it's ready to use and the beginning

00:11:37,830 --> 00:11:45,320
no cost to create it but of course the

00:11:43,620 --> 00:11:48,180
challenge is performance of

00:11:45,320 --> 00:11:52,140
unavailability because you have a kind

00:11:48,180 --> 00:11:55,650
of some whole thing here and of course

00:11:52,140 --> 00:11:58,950
if it's broken than many many services

00:11:55,650 --> 00:12:02,940
and pudding from third party partners

00:11:58,950 --> 00:12:06,860
will be locked up so what about

00:12:02,940 --> 00:12:11,250
performance we the are currently a

00:12:06,860 --> 00:12:15,780
500-watt services for the consumers and

00:12:11,250 --> 00:12:19,080
providers which are run on top and the

00:12:15,780 --> 00:12:24,090
work at the at the bottom of this of

00:12:19,080 --> 00:12:28,140
this verse this infrastructure and this

00:12:24,090 --> 00:12:32,400
is this scheme this line is the number

00:12:28,140 --> 00:12:34,020
of requests per month total amount of

00:12:32,400 --> 00:12:36,890
requests so now it's half a billion

00:12:34,020 --> 00:12:36,890
calls per month

00:12:39,500 --> 00:12:46,900
so how this infrastructure is built it

00:12:43,070 --> 00:12:49,490
will focus now on this on this block

00:12:46,900 --> 00:12:51,980
infrastructure well first there is a

00:12:49,490 --> 00:12:56,420
load balancer this is how do i will

00:12:51,980 --> 00:12:59,060
balancer and then after you have XML

00:12:56,420 --> 00:13:04,450
appliances which means it is hardware

00:12:59,060 --> 00:13:08,180
that will analyze the XML flows and then

00:13:04,450 --> 00:13:10,270
you have a configuration server which

00:13:08,180 --> 00:13:13,250
will push some configuration settings

00:13:10,270 --> 00:13:18,620
with regard to one particular service

00:13:13,250 --> 00:13:22,250
and you have also a directory to recall

00:13:18,620 --> 00:13:27,050
for example when a lot of things but for

00:13:22,250 --> 00:13:31,730
example access control to know if which

00:13:27,050 --> 00:13:35,060
consumer on partner is subscribed to a

00:13:31,730 --> 00:13:39,500
given enabler ourselves the main

00:13:35,060 --> 00:13:45,650
features of this mess of this w srei

00:13:39,500 --> 00:13:50,240
infrastructure is XML validation routing

00:13:45,650 --> 00:13:53,980
because the blog here doesn't know the

00:13:50,240 --> 00:13:58,190
address of the enabler of service it is

00:13:53,980 --> 00:14:01,040
routed through the wso i access control

00:13:58,190 --> 00:14:04,460
service level management security

00:14:01,040 --> 00:14:07,910
encryption compression or so because XML

00:14:04,460 --> 00:14:10,910
is very very verbose and also

00:14:07,910 --> 00:14:13,190
scalability so the scalability is that

00:14:10,910 --> 00:14:15,740
very because you have this load balancer

00:14:13,190 --> 00:14:20,320
very classical architecture and you can

00:14:15,740 --> 00:14:20,320

YouTube URL: https://www.youtube.com/watch?v=DkqyPYdgtZ4


