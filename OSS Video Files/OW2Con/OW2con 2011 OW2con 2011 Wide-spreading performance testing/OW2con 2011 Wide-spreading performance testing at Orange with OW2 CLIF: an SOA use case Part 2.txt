Title: OW2con 2011 Wide-spreading performance testing at Orange with OW2 CLIF: an SOA use case Part 2
Publication date: 2012-01-12
Playlist: OW2con 2011 OW2con 2011 Wide-spreading performance testing
Description: 
	Speaker: Bruno Dillenseger, France Telecom/ Orange
Abstract: The CLIF Load Injection Framework project was launched in year 2003 by Orange Labs (France Telecom R&D) and INRIA, in the ObjectWeb /OW2 community. Since then, Orange Labs have been leading this project, bringing  many code contributions. Why? As an integrated telco, Orange has to handle and interconnect a great variety of Information and Networking technologies, with high stakes in terms of service availability and quality of service. Testing in general, and more particularly performance testing, has become a major challenge for Orange. Among the tens of real CLIF use cases at Orange, we focus on the WSOI test case, the web-service oriented infrastructure that runs over 500 web services consumers and providers, and handles about half a billion calls per month for the Orange Group.
Captions: 
	00:00:03,920 --> 00:00:11,910
so all this is mostly supported by this

00:00:07,259 --> 00:00:15,059
Hardware here with back end here for

00:00:11,910 --> 00:00:20,910
configuration for configuring this

00:00:15,059 --> 00:00:23,840
appliance so how do we test this thing

00:00:20,910 --> 00:00:26,340
while our goal is to qualify the

00:00:23,840 --> 00:00:28,500
infrastructure itself we don't want to

00:00:26,340 --> 00:00:32,759
qualify the performance of the enablers

00:00:28,500 --> 00:00:35,010
services and Angela services we just

00:00:32,759 --> 00:00:38,879
want to know the performance of this

00:00:35,010 --> 00:00:42,809
vlog here so first of all the services

00:00:38,879 --> 00:00:46,230
our neighbors are fake we make some kind

00:00:42,809 --> 00:00:49,079
of drugs that will answer in a very

00:00:46,230 --> 00:00:51,930
printed matter because they are just fax

00:00:49,079 --> 00:00:58,469
em season enablers so we can concentrate

00:00:51,930 --> 00:01:00,410
and this designers we use cliff here

00:00:58,469 --> 00:01:03,300
they are to load injectors so two

00:01:00,410 --> 00:01:07,700
tuitions two computers are running HTTP

00:01:03,300 --> 00:01:14,130
injectors that we sell the soap request

00:01:07,700 --> 00:01:16,650
to the xml appliance will put also some

00:01:14,130 --> 00:01:19,890
probes in order to get some resource

00:01:16,650 --> 00:01:21,930
usage measures so on this on the

00:01:19,890 --> 00:01:26,490
directory and configuration server we

00:01:21,930 --> 00:01:29,700
can put processor problem numerical and

00:01:26,490 --> 00:01:33,869
what we can do also is to observe the

00:01:29,700 --> 00:01:36,479
load of the xml appliance through a

00:01:33,869 --> 00:01:39,570
simple network management protocol which

00:01:36,479 --> 00:01:42,479
is a standard for management management

00:01:39,570 --> 00:01:45,750
so there is an SNMP agent here it is

00:01:42,479 --> 00:01:48,360
delivered with the examiner plans and we

00:01:45,750 --> 00:01:51,710
have developed a special probe for cliff

00:01:48,360 --> 00:01:58,280
here which will get information from

00:01:51,710 --> 00:02:01,880
p agent so practically how do we do a

00:01:58,280 --> 00:02:06,680
que test with that why it's very simple

00:02:01,880 --> 00:02:10,610
here some people who use eclipse will

00:02:06,680 --> 00:02:13,940
recognize the letter from eclipse so

00:02:10,610 --> 00:02:18,890
this is can snap a screenshot of a part

00:02:13,940 --> 00:02:20,980
of the keeps our recipe Chris concern so

00:02:18,890 --> 00:02:25,010
classically you have you have a project

00:02:20,980 --> 00:02:28,250
where all your your definitions and

00:02:25,010 --> 00:02:30,860
results will be gathered so for example

00:02:28,250 --> 00:02:32,600
you have the test plan the test plan is

00:02:30,860 --> 00:02:37,000
released or inject ozone probes that

00:02:32,600 --> 00:02:41,330
must be deployed for this for this test

00:02:37,000 --> 00:02:44,630
you have scenario five dot X a X is

00:02:41,330 --> 00:02:47,390
which will in which you will describe

00:02:44,630 --> 00:02:51,890
the behavior of your virtual users and

00:02:47,390 --> 00:02:53,959
you will settle so the row profile which

00:02:51,890 --> 00:02:58,100
means the number of active your virtual

00:02:53,959 --> 00:03:00,079
users possibly you can have some

00:02:58,100 --> 00:03:01,970
external data that we have some data

00:03:00,079 --> 00:03:05,420
sets that will be used for your route

00:03:01,970 --> 00:03:07,450
injection by the scenario actually and

00:03:05,420 --> 00:03:10,549
this is the case here we have captured

00:03:07,450 --> 00:03:12,440
using the examiner presents an examiner

00:03:10,549 --> 00:03:15,290
friends feature we have captured several

00:03:12,440 --> 00:03:20,480
requests and we have stored them in some

00:03:15,290 --> 00:03:27,170
type so here the request that txt file

00:03:20,480 --> 00:03:29,750
is a soap request and finally you have

00:03:27,170 --> 00:03:32,299
two directories here to sub directories

00:03:29,750 --> 00:03:36,620
report and stats reports will be the

00:03:32,299 --> 00:03:38,829
directory for all the raw measures raw

00:03:36,620 --> 00:03:41,270
measures means for example one request

00:03:38,829 --> 00:03:44,150
will generate one

00:03:41,270 --> 00:03:48,530
measure and you are also a status report

00:03:44,150 --> 00:03:55,520
for gathering moving statistics which

00:03:48,530 --> 00:03:58,940
are which are collected at runtime so it

00:03:55,520 --> 00:04:01,040
can be quicker to into just to have a

00:03:58,940 --> 00:04:08,590
look at this moving statistics than

00:04:01,040 --> 00:04:12,830
doing a full report from the waters okay

00:04:08,590 --> 00:04:14,900
then first first step when you click

00:04:12,830 --> 00:04:17,090
project is created and now we'd create

00:04:14,900 --> 00:04:19,989
your scenario the first step is that you

00:04:17,090 --> 00:04:23,720
have to import the necessary proteins

00:04:19,989 --> 00:04:26,090
there are plugins for many things most

00:04:23,720 --> 00:04:29,330
of them are dedicated to support one

00:04:26,090 --> 00:04:31,820
protocol for example the ftp injector of

00:04:29,330 --> 00:04:34,400
a sip injector here we need the HTTP

00:04:31,820 --> 00:04:38,680
injector because we are going to eject

00:04:34,400 --> 00:04:42,080
load we are going to send HTTP requests

00:04:38,680 --> 00:04:45,350
but more precisely we are going to send

00:04:42,080 --> 00:04:48,350
in those HTTP requests stop messages so

00:04:45,350 --> 00:04:51,200
we will use the five major plug-in which

00:04:48,350 --> 00:04:54,200
makes it possible to redefine the

00:04:51,200 --> 00:04:56,600
request that txt file and then to make

00:04:54,200 --> 00:04:59,600
it available its content available to

00:04:56,600 --> 00:05:01,940
the road injector so we see here that we

00:04:59,600 --> 00:05:07,610
just use a planish tip injector and you

00:05:01,940 --> 00:05:12,290
can easily get the request from from an

00:05:07,610 --> 00:05:15,230
external file okay there is a constant i

00:05:12,290 --> 00:05:20,840
were to manage them three times that's

00:05:15,230 --> 00:05:23,420
basically all once you have all your

00:05:20,840 --> 00:05:26,480
your plugins in voltage you can define

00:05:23,420 --> 00:05:30,620
your behavior which is the behavior of a

00:05:26,480 --> 00:05:32,390
virtual user you have a while loop on

00:05:30,620 --> 00:05:35,690
the first request so basically the

00:05:32,390 --> 00:05:38,900
behavior of our virtual users here is

00:05:35,690 --> 00:05:43,840
just to loop on a post request with the

00:05:38,900 --> 00:05:45,520
parameters here and

00:05:43,840 --> 00:05:48,610
this special transcript with the

00:05:45,520 --> 00:05:51,010
constant timer will make this each

00:05:48,610 --> 00:05:54,400
iteration last one second so we'll have

00:05:51,010 --> 00:05:59,380
one post requests per second in this

00:05:54,400 --> 00:06:01,449
wheelchair user well then you define

00:05:59,380 --> 00:06:04,560
English scenario you define the Rope

00:06:01,449 --> 00:06:06,850
revised so you see this is the

00:06:04,560 --> 00:06:10,419
specification of the number of activity

00:06:06,850 --> 00:06:14,620
hul users coding too tight so you time

00:06:10,419 --> 00:06:18,850
is in second spear so here it must be

00:06:14,620 --> 00:06:21,610
yellow yes five sorry 50 50 seconds

00:06:18,850 --> 00:06:26,050
there is a round club 250 virtual users

00:06:21,610 --> 00:06:28,690
then you have a plateau until 150

00:06:26,050 --> 00:06:36,220
seconds and then around that and so on

00:06:28,690 --> 00:06:41,800
until here the end at five minutes with

00:06:36,220 --> 00:06:44,110
to madrid virtual users here is just one

00:06:41,800 --> 00:06:48,760
line because we have to find just one

00:06:44,110 --> 00:06:52,740
behavior visible p 0 p but you may

00:06:48,760 --> 00:06:55,720
define how many videos as you need and

00:06:52,740 --> 00:06:59,979
define a specific profile for each

00:06:55,720 --> 00:07:02,110
introducer for each behavior now we are

00:06:59,979 --> 00:07:04,660
generally the scenario and we just have

00:07:02,110 --> 00:07:07,360
to define the test plan which is the

00:07:04,660 --> 00:07:12,130
list of load injectors and probes that

00:07:07,360 --> 00:07:14,480
you want to deploy so still this is a

00:07:12,130 --> 00:07:17,750
snapshot of

00:07:14,480 --> 00:07:20,990
the couch interface here you haven't

00:07:17,750 --> 00:07:23,930
tapped panel with all the kinds of

00:07:20,990 --> 00:07:26,770
probes on tiptoes you're deployed so we

00:07:23,930 --> 00:07:31,880
can see that we are defined memory as

00:07:26,770 --> 00:07:35,300
CPU and XML appliances and Amir probes

00:07:31,880 --> 00:07:37,640
and here the tab that is visible is the

00:07:35,300 --> 00:07:43,370
injector tab I will see the diffusion of

00:07:37,640 --> 00:07:46,060
to load inject oh so the class just

00:07:43,370 --> 00:07:48,440
means here that we are using a specific

00:07:46,060 --> 00:07:53,660
environment for defining sensitive

00:07:48,440 --> 00:07:56,420
scenario which is Isaac brother because

00:07:53,660 --> 00:07:58,580
while optionally you can some people

00:07:56,420 --> 00:08:01,070
have to find older it's in my god more

00:07:58,580 --> 00:08:05,240
romance but in our cases you will use

00:08:01,070 --> 00:08:09,260
this and the arguments are just the name

00:08:05,240 --> 00:08:11,720
of the scenario file okay and this is

00:08:09,260 --> 00:08:14,030
the target server where we want to

00:08:11,720 --> 00:08:17,260
deploy it because the project and to

00:08:14,030 --> 00:08:21,080
load injection servers two different

00:08:17,260 --> 00:08:23,600
connection service here you have to a

00:08:21,080 --> 00:08:28,100
tree view of the deployment so you can

00:08:23,600 --> 00:08:31,910
see that on the cliffs ever 9 will you

00:08:28,100 --> 00:08:34,790
plug just a memory probe on the 02 you

00:08:31,910 --> 00:08:36,830
will deploy the proof of the XML

00:08:34,790 --> 00:08:42,050
appliance and the CPU probe on the road

00:08:36,830 --> 00:08:44,740
ejector and if 03 server there is just

00:08:42,050 --> 00:08:44,740
one checking

00:08:45,960 --> 00:08:52,870
and finally you just have to run your

00:08:48,370 --> 00:08:55,650
tests you see at the tetrapod you see

00:08:52,870 --> 00:08:59,340
the list of proton dick top and you can

00:08:55,650 --> 00:09:02,740
control them stop them resume then

00:08:59,340 --> 00:09:05,410
change dynamically some parameters so

00:09:02,740 --> 00:09:08,530
for example by clicking on the

00:09:05,410 --> 00:09:12,160
parameters the time for an injector can

00:09:08,530 --> 00:09:16,720
change the number of actual users at one

00:09:12,160 --> 00:09:18,990
time there are also many other features

00:09:16,720 --> 00:09:23,830
and at the bottom part of the monitoring

00:09:18,990 --> 00:09:28,500
protocol for example here we are

00:09:23,830 --> 00:09:34,770
monitoring metric full simple usage

00:09:28,500 --> 00:09:39,210
including user view and privileged cpu

00:09:34,770 --> 00:09:39,210
for the secure pros

00:09:42,750 --> 00:09:48,420
once the test is run you can browse the

00:09:45,810 --> 00:09:51,420
measures measures are gathered into the

00:09:48,420 --> 00:09:55,260
report airport images and there is one

00:09:51,420 --> 00:10:00,210
subdirectory / a test execution you see

00:09:55,260 --> 00:10:03,680
the name here and run by the date and

00:10:00,210 --> 00:10:07,620
then there is one sub directory for each

00:10:03,680 --> 00:10:12,270
probe or injector so this was the sip yo

00:10:07,620 --> 00:10:16,820
Pro dude identified by zero and cpu is a

00:10:12,270 --> 00:10:23,100
csv formatted file where you will find

00:10:16,820 --> 00:10:25,710
or you will find all your superiors here

00:10:23,100 --> 00:10:28,710
you have this backup of you of this plan

00:10:25,710 --> 00:10:33,270
so the list the definition of you

00:10:28,710 --> 00:10:36,720
approach a ninja top and then you have

00:10:33,270 --> 00:10:41,090
here the stats directory with Stephen

00:10:36,720 --> 00:10:44,460
one secretary for each execution at

00:10:41,090 --> 00:10:47,040
execution and then find your sources

00:10:44,460 --> 00:10:49,620
before Matt it looks bad but which does

00:10:47,040 --> 00:10:52,470
not contain provisions here but contain

00:10:49,620 --> 00:10:54,770
a statistical moving statistics about

00:10:52,470 --> 00:10:57,839
the testicle official for the measures

00:10:54,770 --> 00:10:59,580
and finally you can use the performance

00:10:57,839 --> 00:11:01,440
analysis and reporting troop while you

00:10:59,580 --> 00:11:04,350
can do whatever we want with the CSV

00:11:01,440 --> 00:11:07,290
files you have all the measures that in

00:11:04,350 --> 00:11:11,730
generated are available as spies but you

00:11:07,290 --> 00:11:14,610
can use this ebony tool so for example

00:11:11,730 --> 00:11:16,970
here we have drawn well very visible but

00:11:14,610 --> 00:11:19,110
there is the throughput in green here

00:11:16,970 --> 00:11:22,629
and there is

00:11:19,110 --> 00:11:25,720
the average response time the standard

00:11:22,629 --> 00:11:33,610
edition our response time and the

00:11:25,720 --> 00:11:37,300
maximum response time okay so this is

00:11:33,610 --> 00:11:42,310
the basic usage of creep apply to WS our

00:11:37,300 --> 00:11:44,889
I platform infrastructure here is an

00:11:42,310 --> 00:11:49,149
example of advanced usage with

00:11:44,889 --> 00:11:51,639
severability the road injection with

00:11:49,149 --> 00:11:55,240
cliff so this is basically cliff with a

00:11:51,639 --> 00:11:58,540
cliff probes cliff injectors and we have

00:11:55,240 --> 00:12:01,180
added a load control logic shock

00:11:58,540 --> 00:12:04,240
controller which makes which we observe

00:12:01,180 --> 00:12:06,759
results from the probes and injection

00:12:04,240 --> 00:12:08,889
system and according to some low

00:12:06,759 --> 00:12:11,319
detection policy will adapt the number

00:12:08,889 --> 00:12:16,649
of your trail users so we could find out

00:12:11,319 --> 00:12:18,910
in three minutes we could find that this

00:12:16,649 --> 00:12:25,059
specific configuration of the xml

00:12:18,910 --> 00:12:31,050
appliance i could run run with the night

00:12:25,059 --> 00:12:34,360
with sorry with eighty percent of load

00:12:31,050 --> 00:12:38,259
here the road eighty percent it could

00:12:34,360 --> 00:12:40,420
run here in a range of about four

00:12:38,259 --> 00:12:46,170
hundred metric users that was fully

00:12:40,420 --> 00:12:50,050
automatic we didn't have to find profile

00:12:46,170 --> 00:12:53,680
okay my conclusion so the conclusion is

00:12:50,050 --> 00:12:56,500
that cliff is not just it's not just yet

00:12:53,680 --> 00:13:00,100
testing tool because it comes with hype

00:12:56,500 --> 00:13:02,910
over and scalability outstanding and it

00:13:00,100 --> 00:13:07,000
has also an outstanding versatility

00:13:02,910 --> 00:13:09,880
flexibility be it through its variety of

00:13:07,000 --> 00:13:11,830
user interfaces or supported protocols

00:13:09,880 --> 00:13:16,149
or monitor of resources which can be

00:13:11,830 --> 00:13:17,589
extended extended with almost limit and

00:13:16,149 --> 00:13:22,200
there are still more advanced features

00:13:17,589 --> 00:13:25,930
to come coming from the research field

00:13:22,200 --> 00:13:27,580
as far as the use cases concerns why it

00:13:25,930 --> 00:13:32,610
was a qualification of the nuke similar

00:13:27,580 --> 00:13:37,870
plans based I saw infrastructure was

00:13:32,610 --> 00:13:40,330
finally rather simple captured those

00:13:37,870 --> 00:13:42,100
soap request I'm just use a plain HTTP

00:13:40,330 --> 00:13:45,700
inject oh we didn't have to find

00:13:42,100 --> 00:13:47,980
something new because all our plugins in

00:13:45,700 --> 00:13:50,310
the scenario module can exchange the

00:13:47,980 --> 00:13:53,190
data and

00:13:50,310 --> 00:13:56,010
okay we could do the full system load

00:13:53,190 --> 00:13:58,760
monitoring including the 6 ml appliance

00:13:56,010 --> 00:14:02,490
thanks to a divinity of grief of

00:13:58,760 --> 00:14:06,420
integrity new probes and in this case it

00:14:02,490 --> 00:14:11,160
was a nestling peer-based prob as of

00:14:06,420 --> 00:14:15,860
yesterday there was more than 3,500

00:14:11,160 --> 00:14:21,150
downloads of cliff just for November

00:14:15,860 --> 00:14:25,970
because we release the you do to that

00:14:21,150 --> 00:14:25,970

YouTube URL: https://www.youtube.com/watch?v=y3PBHOx0T_Y


