Title: OW2con 2011 ConPaaS PART 2 Guillaume Pierre
Publication date: 2012-01-09
Playlist: OW2con 2011 ConPaaS, Guillaume Pierre
Description: 
	Speaker: Guilaume Pierre, VU University Amsterdam
Abstract: ConPaaS is an open-source platform-as-a-service environment developed within the Contrail European research project. ConPaaS aims at simplifying the deployment of applications in the Cloud. It is designed as a set of elastic services dedicated to the hosting of a particular type of functionality. A service can be seen as a standalone component of a distributed application: for example, a Web server with a PHP execution module. Each ConPaaS service is self-managed and elastic: it can deploy itself on the Cloud, monitor its own performance, and increase or decrease its processing capacity by dynamically (de-)provisioning instances of itself in the Cloud. Services are designed to be composable: an application can for example use a Web hosting service, a database service to store the internal application state, a file storage service to store access logs, and a MapReduce service to periodically compute statistics from these logs. In this presentation I will give an overview of the overall Contrail project, then focus on ConPaaS: how it can help Cloud application developers, and how it is organized internally.
Captions: 
	00:00:04,339 --> 00:00:12,240
so basically this is the compass front

00:00:08,700 --> 00:00:15,330
ends what I'm going to do today is show

00:00:12,240 --> 00:00:19,470
you how i can in more or less eight to

00:00:15,330 --> 00:00:23,449
ten minutes deploy and scale wikipedia

00:00:19,470 --> 00:00:26,340
i'm going to have a wikipedia a

00:00:23,449 --> 00:00:28,560
application running in tomcat in an

00:00:26,340 --> 00:00:30,390
application server with his database

00:00:28,560 --> 00:00:32,820
we're going to take a database dump out

00:00:30,390 --> 00:00:35,550
of wikipedia load it in the database and

00:00:32,820 --> 00:00:38,370
done in here eight minutes I should have

00:00:35,550 --> 00:00:41,460
a working Wikipedia for you if I don't

00:00:38,370 --> 00:00:43,350
grew up I can just log in the system so

00:00:41,460 --> 00:00:45,870
right now nothing is running on my

00:00:43,350 --> 00:00:48,360
behalf pretty much the platform is empty

00:00:45,870 --> 00:00:49,890
what i can do is to create a service and

00:00:48,360 --> 00:00:52,379
over there i have a choice between for

00:00:49,890 --> 00:00:55,860
services which are implemented in and

00:00:52,379 --> 00:00:58,500
integrated i have something in what if i

00:00:55,860 --> 00:01:01,559
want to run PHP applications something

00:00:58,500 --> 00:01:05,670
for java applications my no sequel

00:01:01,559 --> 00:01:09,229
database or a MapReduce framework so i'm

00:01:05,670 --> 00:01:12,020
going to need a North equal database and

00:01:09,229 --> 00:01:15,350
I'm going to need a java application

00:01:12,020 --> 00:01:21,479
server so what is happening right now is

00:01:15,350 --> 00:01:27,119
a vm is being started on or platform in

00:01:21,479 --> 00:01:28,590
germany to run that no sequel Alex it's

00:01:27,119 --> 00:01:31,140
going to take a couple of minutes so in

00:01:28,590 --> 00:01:35,520
that time I can also start my job our

00:01:31,140 --> 00:01:40,560
service which will be dedicated to

00:01:35,520 --> 00:01:42,720
hosting our java servlets so for some

00:01:40,560 --> 00:01:45,439
reason we don't use Jonah's or not yet

00:01:42,720 --> 00:01:48,659
we are using this using tomcat instead

00:01:45,439 --> 00:01:53,070
but we could perfectly a bundle or join

00:01:48,659 --> 00:01:57,860
us inside a disk of services so in a few

00:01:53,070 --> 00:02:01,409
seconds my services should be started

00:01:57,860 --> 00:02:04,649
yes oh my scanner x service has started

00:02:01,409 --> 00:02:07,170
so i can do is go and take a look at it

00:02:04,649 --> 00:02:10,729
i can give it a better name like this is

00:02:07,170 --> 00:02:13,819
going to be my wiki pay deal

00:02:10,729 --> 00:02:18,019
the bees and basically what i see is i

00:02:13,819 --> 00:02:21,379
have one vm running which contains well

00:02:18,019 --> 00:02:22,819
which runs that database right now the

00:02:21,379 --> 00:02:24,860
database is empty there is no stage

00:02:22,819 --> 00:02:26,930
there is no nothing in there so what i'm

00:02:24,860 --> 00:02:32,269
going to do for the sake of the demo is

00:02:26,930 --> 00:02:37,120
to copy its IP address and upload my

00:02:32,269 --> 00:02:39,500
database dump so if we go back to the

00:02:37,120 --> 00:02:43,010
dashboard we can see that the system is

00:02:39,500 --> 00:02:44,540
starting to our uploads in number of key

00:02:43,010 --> 00:02:47,690
value pairs number of elements in my

00:02:44,540 --> 00:02:51,049
database when we have half a million we

00:02:47,690 --> 00:02:57,819
are ready you can see that the numbers

00:02:51,049 --> 00:03:01,549
grew i'm also going to take my database

00:02:57,819 --> 00:03:04,129
if you network is with me copy its IP

00:03:01,549 --> 00:03:08,959
address again because i need to give the

00:03:04,129 --> 00:03:10,910
IP address of that these are to my are

00:03:08,959 --> 00:03:14,690
to my application servers they need to

00:03:10,910 --> 00:03:16,930
know where to find the data so i'm

00:03:14,690 --> 00:03:19,010
rebuilding the package with the new

00:03:16,930 --> 00:03:21,500
configuration just in the words of data

00:03:19,010 --> 00:03:24,019
this is generating a war file the

00:03:21,500 --> 00:03:28,419
superest standards formats there's known

00:03:24,019 --> 00:03:28,419
there is no special file we need to have

00:03:29,799 --> 00:03:40,489
i'm going to go to my java service on

00:03:35,900 --> 00:03:43,700
upload medication so if you notice my

00:03:40,489 --> 00:03:48,169
java service right now has indeed one vm

00:03:43,700 --> 00:03:50,510
running but that vm says manager does

00:03:48,169 --> 00:03:52,280
not say this is a tomcat service running

00:03:50,510 --> 00:03:54,560
it does not say this is a web server

00:03:52,280 --> 00:03:58,370
basically dot VM is just in charge of

00:03:54,560 --> 00:04:01,840
managing a set of other VMS which

00:03:58,370 --> 00:04:05,510
actually are going to run the real good

00:04:01,840 --> 00:04:09,220
so everything is slow presume because of

00:04:05,510 --> 00:04:09,220
the network i hope that will still work

00:04:09,760 --> 00:04:16,769
yes

00:04:10,980 --> 00:04:19,320
so now let me start a real but a second

00:04:16,769 --> 00:04:21,750
vm I will still have one vm running a

00:04:19,320 --> 00:04:23,880
manager and that manager is in charge of

00:04:21,750 --> 00:04:27,150
receiving instructions to do more things

00:04:23,880 --> 00:04:30,090
one instruction could be well would you

00:04:27,150 --> 00:04:33,090
please create a vm containing a web

00:04:30,090 --> 00:04:35,190
server it could be well I have so many

00:04:33,090 --> 00:04:37,080
could you please create more cool could

00:04:35,190 --> 00:04:39,360
you create less here is a new version of

00:04:37,080 --> 00:04:41,550
the codes change the configuration files

00:04:39,360 --> 00:04:44,669
all those things get addressed to the

00:04:41,550 --> 00:04:47,160
manager manager is also the place where

00:04:44,669 --> 00:04:49,229
we're going to centralized monitoring

00:04:47,160 --> 00:04:54,860
information of course we want to monitor

00:04:49,229 --> 00:04:59,039
how fast the system is so right now my

00:04:54,860 --> 00:05:00,750
worker machine is being studied and that

00:04:59,039 --> 00:05:03,020
machine is going to contain three things

00:05:00,750 --> 00:05:06,720
it's going to contain a load balancer

00:05:03,020 --> 00:05:09,840
it's going to contain a web server add a

00:05:06,720 --> 00:05:11,910
tomcat server and basically the weights

00:05:09,840 --> 00:05:15,360
organized is that all traffic is handled

00:05:11,910 --> 00:05:17,550
by the load balancer and then requests

00:05:15,360 --> 00:05:19,770
for static documents go to the web

00:05:17,550 --> 00:05:23,639
server request for dynamic documents go

00:05:19,770 --> 00:05:25,470
to tomcat as long as you have one vm

00:05:23,639 --> 00:05:27,599
this is not really necessary to do all

00:05:25,470 --> 00:05:31,020
these complicated things but whenever we

00:05:27,599 --> 00:05:32,610
are going to scale the system up then

00:05:31,020 --> 00:05:34,740
you can very well decide well I'm going

00:05:32,610 --> 00:05:38,160
to have a few GM dedicated to draw the

00:05:34,740 --> 00:05:40,530
static pages you can have caching and

00:05:38,160 --> 00:05:42,840
all kind of things over there and I will

00:05:40,530 --> 00:05:45,300
have a few VMs specialized for

00:05:42,840 --> 00:05:50,700
generating dynamic document and then you

00:05:45,300 --> 00:05:52,919
can specialize your needs and expand so

00:05:50,700 --> 00:05:55,380
those are actual virtual machines being

00:05:52,919 --> 00:05:57,090
studied those are not displaced

00:05:55,380 --> 00:05:59,610
pretending to have a virtual machine

00:05:57,090 --> 00:06:04,620
those are actual applications being

00:05:59,610 --> 00:06:06,810
deployed but that should so actually why

00:06:04,620 --> 00:06:08,970
we're waiting what I can show you is the

00:06:06,810 --> 00:06:11,970
log of everything that's being done so

00:06:08,970 --> 00:06:15,810
right now that's the full history of

00:06:11,970 --> 00:06:18,870
what that service has been through what

00:06:15,810 --> 00:06:21,900
you can see is that it has started at a

00:06:18,870 --> 00:06:24,689
half past three so tell me that there

00:06:21,900 --> 00:06:26,639
should be a bit late for my presentation

00:06:24,689 --> 00:06:28,860
and right now we're creating one more

00:06:26,639 --> 00:06:32,929
note the request has been sent I we're

00:06:28,860 --> 00:06:32,929
pulling waiting for the note arrived

00:06:33,169 --> 00:06:37,889
alright so my node has failed which is

00:06:36,029 --> 00:06:42,059
no good and we're going to go through a

00:06:37,889 --> 00:06:45,239
second run as you may know everyone who

00:06:42,059 --> 00:06:47,869
has used cloud platforms extensively you

00:06:45,239 --> 00:06:51,569
know that something like five percent of

00:06:47,869 --> 00:06:55,110
vm creation requests fail for mysterious

00:06:51,569 --> 00:06:59,369
reasons this is true in open source

00:06:55,110 --> 00:07:01,229
cloud as well as commercial ones what

00:06:59,369 --> 00:07:03,300
can I tell you why actually let me

00:07:01,229 --> 00:07:06,419
finish my presentation and i'll come

00:07:03,300 --> 00:07:07,889
back to my demo when precision is

00:07:06,419 --> 00:07:11,339
finished something which is very

00:07:07,889 --> 00:07:12,839
important once i have reconfigured when

00:07:11,339 --> 00:07:15,629
deployed by application of application

00:07:12,839 --> 00:07:18,149
is running i can still request for

00:07:15,629 --> 00:07:19,829
changes i can still request for new

00:07:18,149 --> 00:07:22,499
version of the code to be deployed for

00:07:19,829 --> 00:07:24,319
jejeje configuration for more machines

00:07:22,499 --> 00:07:28,879
less machines i mean it's a very

00:07:24,319 --> 00:07:31,739
flexible system we want to avoid this

00:07:28,879 --> 00:07:33,059
dude or we will be back soon dulal is

00:07:31,739 --> 00:07:35,219
currently offline because we're

00:07:33,059 --> 00:07:37,379
upgrading or systems to provide a better

00:07:35,219 --> 00:07:41,219
experience well a better experience

00:07:37,379 --> 00:07:43,319
would be not seeing this so although the

00:07:41,219 --> 00:07:45,360
configurations will be done in such a

00:07:43,319 --> 00:07:49,039
way that the system will keep on working

00:07:45,360 --> 00:07:52,619
at any second of time during that period

00:07:49,039 --> 00:07:55,169
what we have right now there is a first

00:07:52,619 --> 00:07:58,349
alpha release online if you go two

00:07:55,169 --> 00:08:04,829
web.com posi you that's can pass with an

00:07:58,349 --> 00:08:07,649
N and 2 a's you'll find a source code

00:08:04,829 --> 00:08:09,689
for the front ins I mean though the web

00:08:07,649 --> 00:08:11,879
application I've been using to interact

00:08:09,689 --> 00:08:15,119
with the system for the web hosting

00:08:11,879 --> 00:08:18,179
service java and PHP those scalawags

00:08:15,119 --> 00:08:20,719
other the bees is not yet released but

00:08:18,179 --> 00:08:24,689
we will do this very soon hopefully

00:08:20,719 --> 00:08:26,219
let's say January probably we have a

00:08:24,689 --> 00:08:28,409
public test but so if you want to play

00:08:26,219 --> 00:08:31,559
with this you can just go to the system

00:08:28,409 --> 00:08:35,289
give us your name and email address and

00:08:31,559 --> 00:08:38,110
you'll be able to try to see simple free

00:08:35,289 --> 00:08:41,769
future plans well we will build more

00:08:38,110 --> 00:08:46,300
services there are two which are almost

00:08:41,769 --> 00:08:48,009
ready which are a service for a round my

00:08:46,300 --> 00:08:49,690
sequel in which the principal will be

00:08:48,009 --> 00:08:52,990
the same like you just snap your fingers

00:08:49,690 --> 00:08:54,459
and get a massive or other levies if you

00:08:52,990 --> 00:08:57,069
stuck your finger a second time you can

00:08:54,459 --> 00:09:00,040
scale it up and replicate the debates

00:08:57,069 --> 00:09:02,290
automatically bag of tasks this is for

00:09:00,040 --> 00:09:04,930
scientific applications in which you

00:09:02,290 --> 00:09:07,660
have a lot of more or less identical

00:09:04,930 --> 00:09:11,230
tasks to run and you want to automate a

00:09:07,660 --> 00:09:13,569
dissolution the system is designed

00:09:11,230 --> 00:09:16,500
subject creating new services is

00:09:13,569 --> 00:09:19,209
supposed to be very easy so if you have

00:09:16,500 --> 00:09:22,089
your middleware and you think well I

00:09:19,209 --> 00:09:25,449
would like to have I don't know data

00:09:22,089 --> 00:09:27,370
streaming as a service in turn pass well

00:09:25,449 --> 00:09:29,649
we we don't have the resources to do all

00:09:27,370 --> 00:09:33,519
this but it should be very easy to build

00:09:29,649 --> 00:09:37,630
a service around a decent software we

00:09:33,519 --> 00:09:39,760
will the plans is to allow users to have

00:09:37,630 --> 00:09:42,370
a manifest file to describe the entire

00:09:39,760 --> 00:09:48,130
application should I can put it like

00:09:42,370 --> 00:09:49,839
this so instead of deploying well i'm

00:09:48,130 --> 00:09:51,970
going to deploy my database and then i'm

00:09:49,839 --> 00:09:53,769
going to deploy my application server we

00:09:51,970 --> 00:09:55,750
should have one file that describes the

00:09:53,769 --> 00:09:57,579
entire application and suddenly i should

00:09:55,750 --> 00:10:00,100
not have to tell my vacation servers

00:09:57,579 --> 00:10:01,990
where is my database anymore because

00:10:00,100 --> 00:10:03,519
that would be automated because the

00:10:01,990 --> 00:10:05,920
system will know this is one application

00:10:03,519 --> 00:10:09,279
and this is a structure how things

00:10:05,920 --> 00:10:11,380
relate to each other there will be of

00:10:09,279 --> 00:10:13,209
course performance monitoring and it

00:10:11,380 --> 00:10:16,720
will be resource provisioning so you

00:10:13,209 --> 00:10:18,880
will be able to specify how fast you

00:10:16,720 --> 00:10:20,920
want the system to be let's say i want

00:10:18,880 --> 00:10:23,860
my application to respond within 500

00:10:20,920 --> 00:10:26,709
milliseconds the 15 will automatically

00:10:23,860 --> 00:10:28,899
add and remove machines such that you

00:10:26,709 --> 00:10:32,259
maintain this response time using the

00:10:28,899 --> 00:10:36,069
least number of resources possible we

00:10:32,259 --> 00:10:38,019
will also work on development tools for

00:10:36,069 --> 00:10:40,930
example if you build a web application

00:10:38,019 --> 00:10:43,269
is very useful to be able to have two

00:10:40,930 --> 00:10:44,529
versions of the deputation running one

00:10:43,269 --> 00:10:46,240
introduction

00:10:44,529 --> 00:10:47,439
the one your real users are using and

00:10:46,240 --> 00:10:50,079
you don't want to insert that one too

00:10:47,439 --> 00:10:51,519
much now if you're developing something

00:10:50,079 --> 00:10:53,410
new and you want to test it it's very

00:10:51,519 --> 00:10:55,600
useful to be able to have a second

00:10:53,410 --> 00:10:58,420
version running next to it and with some

00:10:55,600 --> 00:10:59,499
parameter either requests instruct your

00:10:58,420 --> 00:11:02,019
system where I want to use the

00:10:59,499 --> 00:11:06,759
development system to test it at some

00:11:02,019 --> 00:11:09,579
point swap that one into production so

00:11:06,759 --> 00:11:13,509
my conclusion before I show you let me

00:11:09,579 --> 00:11:18,100
check if my yes my note is there so now

00:11:13,509 --> 00:11:20,589
I have a manager at a second vm which

00:11:18,100 --> 00:11:24,189
contains a proxy a web server and a java

00:11:20,589 --> 00:11:26,769
flavor the interesting thing is I have

00:11:24,189 --> 00:11:28,509
two versions of the software of this one

00:11:26,769 --> 00:11:30,009
will the default one which is just a

00:11:28,509 --> 00:11:33,220
place holder Usain welcome to come bus

00:11:30,009 --> 00:11:35,649
at the other one is the week as long as

00:11:33,220 --> 00:11:40,740
I thought set the new one active the old

00:11:35,649 --> 00:11:40,740
one is still running so if i go to my

00:11:41,100 --> 00:11:47,980
application I see welcome to come bus on

00:11:43,930 --> 00:11:53,199
the other hand if I decide to set my

00:11:47,980 --> 00:11:55,839
scale Eric's wiki active and I go to the

00:11:53,199 --> 00:12:00,790
same page and reload I'm going to see my

00:11:55,839 --> 00:12:04,240
wiki running takes a while to load the

00:12:00,790 --> 00:12:07,750
Java classes in tomcat on first request

00:12:04,240 --> 00:12:09,819
yes here is my Wikipedia and this is a

00:12:07,750 --> 00:12:11,110
full wiki I can go and edit the pages i

00:12:09,819 --> 00:12:14,800
can do everything you can do on

00:12:11,110 --> 00:12:18,309
wikipedia i'm not going to show you this

00:12:14,800 --> 00:12:20,829
by lack of time but if I want to add

00:12:18,309 --> 00:12:24,639
machines the only thing I need to do is

00:12:20,829 --> 00:12:26,980
to say well please give me two more VMs

00:12:24,639 --> 00:12:30,129
which are going to run java tom cat and

00:12:26,980 --> 00:12:31,540
two more games will be created those or

00:12:30,129 --> 00:12:35,769
system will get reconfigured the

00:12:31,540 --> 00:12:41,040
capacity of racism military's so let me

00:12:35,769 --> 00:12:43,179
conclude can pass is an open-source

00:12:41,040 --> 00:12:46,870
integrated runtime environment for

00:12:43,179 --> 00:12:48,550
elastic cloud applications it's it

00:12:46,870 --> 00:12:50,019
contains a number of services it has

00:12:48,550 --> 00:12:52,629
application servers so you can serve

00:12:50,019 --> 00:12:55,949
static content dynamic content in PHP in

00:12:52,629 --> 00:12:58,060
Java we can do Python we can do Ruby

00:12:55,949 --> 00:13:00,640
their database servers

00:12:58,060 --> 00:13:02,350
my sequel scatter X is the new sequel

00:13:00,640 --> 00:13:06,610
database there are high-performance

00:13:02,350 --> 00:13:09,130
frameworks we can't build more if there

00:13:06,610 --> 00:13:10,330
is a need for it of course everything is

00:13:09,130 --> 00:13:14,440
open source I would not be here

00:13:10,330 --> 00:13:17,160
otherwise and the system is already at

00:13:14,440 --> 00:13:20,590
least partly available for testing and

00:13:17,160 --> 00:13:24,430
we're very eager to get as many users as

00:13:20,590 --> 00:13:27,090
possible so that concludes my talk if

00:13:24,430 --> 00:13:27,090

YouTube URL: https://www.youtube.com/watch?v=jtCYDv5S4lU


