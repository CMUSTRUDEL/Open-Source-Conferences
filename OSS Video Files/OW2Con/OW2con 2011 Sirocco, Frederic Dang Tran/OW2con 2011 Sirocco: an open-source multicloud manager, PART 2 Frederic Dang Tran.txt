Title: OW2con 2011 Sirocco: an open-source multicloud manager, PART 2 Frederic Dang Tran
Publication date: 2012-01-09
Playlist: OW2con 2011 Sirocco, Frederic Dang Tran
Description: 
	Speaker: Frederic Dang Tran, Orange Labs
Abstract: The Sirocco OW2 project was launched in 2011 with the goal of developing a multi-cloud IaaS (Infrastructure-as-a-Service) platform. This presentation will describe its architecture, give an overview of its current implementation and of its roadmap for 2012.  The Sirocco middleware exposes a single point of entry to access computing resources located in different IaaS cloud providers either private or public (e.g. Amazon EC2, OpenStack, VMware vCloud Director). In addition Sirocco comes with its own IaaS provider featuring multi-hypervisor support (Xen, KVM, ESX...). The Sirocco platform can be accessed either from a unified Web interface or programmatically through a REST API that hides provider-specific APIs. The Sirocco platform is based on an open framework with a clear separation between generic management logic and pluggable cloud-provider-specific connectors. It is worth noting that part of the Sirocco platform is based on work done in the context of the SelfXL French collaborative project notably with Bull and l'Ecole des Mines de Nantes.
Captions: 
	00:00:03,799 --> 00:00:13,620
now I moved to the the pro mac program

00:00:09,960 --> 00:00:16,949
providing access to your circle so here

00:00:13,620 --> 00:00:19,890
a few small digression we are involved

00:00:16,949 --> 00:00:22,260
when I say we'd arranged labs orange is

00:00:19,890 --> 00:00:26,609
involved in the the NPF cloud management

00:00:22,260 --> 00:00:28,859
working group this working group has

00:00:26,609 --> 00:00:34,140
been going on for a couple of years now

00:00:28,859 --> 00:00:37,920
and as released this cure a es api

00:00:34,140 --> 00:00:39,660
specification called see me see me

00:00:37,920 --> 00:00:44,190
stencil cloud in saskatoon management

00:00:39,660 --> 00:00:46,670
interface on so the CM GG membership

00:00:44,190 --> 00:00:49,950
includes some major IT vendors IQ

00:00:46,670 --> 00:00:52,949
software vendors of IBM HP see school

00:00:49,950 --> 00:00:55,590
and and so forth it is worth mentioning

00:00:52,949 --> 00:00:59,940
those are several European cut telcos

00:00:55,590 --> 00:01:02,690
involved in this working group Telecom

00:00:59,940 --> 00:01:06,720
Italia telefonica and in France Telecom

00:01:02,690 --> 00:01:10,170
so we have made the choice to adopt the

00:01:06,720 --> 00:01:15,170
seamy API as unified APR 0 go to provide

00:01:10,170 --> 00:01:17,820
a primary programmatic access here

00:01:15,170 --> 00:01:20,880
actually you see me in a spiritual

00:01:17,820 --> 00:01:23,880
context to to access several tad

00:01:20,880 --> 00:01:28,080
providers this is not the primary goal

00:01:23,880 --> 00:01:30,299
as a semi API as of today let's see me

00:01:28,080 --> 00:01:35,400
API offers some extension capabilities

00:01:30,299 --> 00:01:38,790
in the form of metadata metadata you can

00:01:35,400 --> 00:01:42,000
attach to an entity and fro Z's metadata

00:01:38,790 --> 00:01:46,049
you can it can provide some extensions

00:01:42,000 --> 00:01:47,399
and we can cover some specific multiclad

00:01:46,049 --> 00:01:49,649
features for example if you want

00:01:47,399 --> 00:01:52,079
probably on the virtual machine you can

00:01:49,649 --> 00:01:54,240
within this meta data specify the

00:01:52,079 --> 00:01:58,170
Pacific specific cloud providers you

00:01:54,240 --> 00:02:00,390
want you to talk to target if not if you

00:01:58,170 --> 00:02:04,770
want more information on CSD at the mt

00:02:00,390 --> 00:02:07,950
mts that you can follow this URL and you

00:02:04,770 --> 00:02:11,179
find a downloadable PDF visually the

00:02:07,950 --> 00:02:11,179
draft of the specification

00:02:11,330 --> 00:02:21,140
now very quick and view of the results

00:02:16,530 --> 00:02:23,670
model underpinning the semi dmt of API

00:02:21,140 --> 00:02:27,500
so there's a really quickly informal

00:02:23,670 --> 00:02:30,840
view it is not a UML diagram or whatever

00:02:27,500 --> 00:02:33,410
on the on the top you'll find the the

00:02:30,840 --> 00:02:36,120
rent type results entities the usual

00:02:33,410 --> 00:02:41,010
suspects a machine volume network and so

00:02:36,120 --> 00:02:43,769
on what a system in the MTF terminology

00:02:41,010 --> 00:02:45,269
is an appliance so when you see system

00:02:43,769 --> 00:02:49,080
actually can you can replace it with

00:02:45,269 --> 00:02:50,730
outlines a pattern news in this business

00:02:49,080 --> 00:02:52,620
model is to associate a template with

00:02:50,730 --> 00:02:55,170
each type of results you will find a

00:02:52,620 --> 00:02:57,420
machine template for machine we have a

00:02:55,170 --> 00:02:59,310
machine configuration stating the CPU

00:02:57,420 --> 00:03:02,880
this cramp capabilities of the machine

00:02:59,310 --> 00:03:06,090
and machine image the same pattern

00:03:02,880 --> 00:03:07,709
applies for volume and so on worth

00:03:06,090 --> 00:03:11,280
mentioning also if you have a meter

00:03:07,709 --> 00:03:15,920
abstraction that allows access to a

00:03:11,280 --> 00:03:24,930
metering information on resources and

00:03:15,920 --> 00:03:27,299
okay that's some oh okay just to finish

00:03:24,930 --> 00:03:29,459
my presentation would give you a quick

00:03:27,299 --> 00:03:37,220
overview of the architecture the circle

00:03:29,459 --> 00:03:37,220
platform so the management layer

00:03:37,370 --> 00:03:43,530
encapsulate most components dealing with

00:03:40,590 --> 00:03:45,780
a result provisioning user project

00:03:43,530 --> 00:03:50,069
management image manager and so forth on

00:03:45,780 --> 00:03:51,720
so actually the DM TFC me API appears at

00:03:50,069 --> 00:03:55,859
to Claire at two levels in this

00:03:51,720 --> 00:03:57,569
architecture it appears as an off API so

00:03:55,859 --> 00:04:01,290
the user facing API available to any

00:03:57,569 --> 00:04:04,829
user it also appear as kind of South API

00:04:01,290 --> 00:04:06,840
as this level to plug that providers so

00:04:04,829 --> 00:04:10,109
cloud providers will be accessed by the

00:04:06,840 --> 00:04:16,799
multi-cloud manager by through at the

00:04:10,109 --> 00:04:18,720
MTF same API a few more words about on

00:04:16,799 --> 00:04:21,750
the right I mentioned what we call an

00:04:18,720 --> 00:04:22,840
image factory there's ability to uh to

00:04:21,750 --> 00:04:25,270
generate

00:04:22,840 --> 00:04:28,120
an image based on some input some list

00:04:25,270 --> 00:04:30,220
of packages so meta data so here we do

00:04:28,120 --> 00:04:32,260
not expect Ravens will we hoped you to

00:04:30,220 --> 00:04:34,810
interact with third party or image

00:04:32,260 --> 00:04:40,990
factories such as you share soft

00:04:34,810 --> 00:04:43,449
presently this morning what we can okay

00:04:40,990 --> 00:04:46,600
in terms of cloud providers so here just

00:04:43,449 --> 00:04:50,320
for the sake of example I I'm have their

00:04:46,600 --> 00:04:52,300
own for tat providers the leftmost one

00:04:50,320 --> 00:04:54,970
called VMA me actually a cloud providers

00:04:52,300 --> 00:04:57,550
that is bundled with circle it is not a

00:04:54,970 --> 00:05:00,190
cloud provider / siege actually it

00:04:57,550 --> 00:05:04,030
offers the ability to directly interact

00:05:00,190 --> 00:05:05,860
with hypervisors hiding the advertiser

00:05:04,030 --> 00:05:09,550
specific management API so it could be

00:05:05,860 --> 00:05:12,160
leave work for kvm exam it could be

00:05:09,550 --> 00:05:15,610
exempt server API for citrix xenserver

00:05:12,160 --> 00:05:20,530
or it could be a vcr api for for vmware

00:05:15,610 --> 00:05:22,600
vsphere and ESX hypervisor we offer a

00:05:20,530 --> 00:05:26,770
support for OpenStack we offer support

00:05:22,600 --> 00:05:28,620
for ec2 we are working on support from a

00:05:26,770 --> 00:05:30,550
VMware vCloud director which is a

00:05:28,620 --> 00:05:34,389
collaborative which is important in

00:05:30,550 --> 00:05:40,590
context of our existence so it's being

00:05:34,389 --> 00:05:43,539
used internally by by by arranged okay

00:05:40,590 --> 00:05:45,910
now just to focus on the cloud over the

00:05:43,539 --> 00:05:48,060
side as I said previously the clap for

00:05:45,910 --> 00:05:51,490
the world offers an abstract interface

00:05:48,060 --> 00:05:56,229
which in first approximation is a java

00:05:51,490 --> 00:05:58,630
binding of the DMT SME API each cloud

00:05:56,229 --> 00:06:01,389
provider will advertise its capabilities

00:05:58,630 --> 00:06:04,660
at runtime and based on these

00:06:01,389 --> 00:06:06,880
capabilities requests for provision your

00:06:04,660 --> 00:06:09,700
request will be directed to cloud

00:06:06,880 --> 00:06:14,470
providers that match the requirements of

00:06:09,700 --> 00:06:18,280
the user so a concrete example could be

00:06:14,470 --> 00:06:23,560
just if some if a user want a vm with i

00:06:18,280 --> 00:06:28,200
say a an OS which eight core cpus

00:06:23,560 --> 00:06:30,280
whether given power in megahertz this

00:06:28,200 --> 00:06:34,630
request will be directed to the

00:06:30,280 --> 00:06:36,900
appropriate cloud providers capabilities

00:06:34,630 --> 00:06:39,819
also can be used for things

00:06:36,900 --> 00:06:41,800
here we have a monitoring service it is

00:06:39,819 --> 00:06:44,979
if it is mapped we see to it will be if

00:06:41,800 --> 00:06:49,240
would we map to the cad watch API from

00:06:44,979 --> 00:06:51,219
from amazon / cloud providers might not

00:06:49,240 --> 00:06:52,629
provide a monitoring monitoring service

00:06:51,219 --> 00:06:57,240
in that case this capability will be

00:06:52,629 --> 00:07:01,139
disabled for this cloud provider now

00:06:57,240 --> 00:07:05,020
more on the technological side how

00:07:01,139 --> 00:07:08,050
circle is currently implemented so it is

00:07:05,020 --> 00:07:12,250
currently a hybrid java ee osgi

00:07:08,050 --> 00:07:14,620
application there is a division of

00:07:12,250 --> 00:07:16,509
responsibility between business called

00:07:14,620 --> 00:07:18,849
dealing with the CMDB the contrary

00:07:16,509 --> 00:07:21,310
configuration management database update

00:07:18,849 --> 00:07:24,669
so here we use Java EE code with the

00:07:21,310 --> 00:07:26,949
transactional guarantees cloud providers

00:07:24,669 --> 00:07:30,879
as shown in the previous slide our

00:07:26,949 --> 00:07:35,020
package I burn our package as a ciose I

00:07:30,879 --> 00:07:38,909
bundles and they expose services respose

00:07:35,020 --> 00:07:43,650
api therapy I as I suppose GI services

00:07:38,909 --> 00:07:46,839
now we make use of various all w2

00:07:43,650 --> 00:07:50,860
technologies and platforms we make heavy

00:07:46,839 --> 00:07:52,599
use of Jonas this is our our application

00:07:50,860 --> 00:07:56,889
server dealing with supporting above

00:07:52,599 --> 00:08:00,509
July EE and os Jaya application code we

00:07:56,889 --> 00:08:02,500
make use of the Durham JMS compliant

00:08:00,509 --> 00:08:05,589
message generated middle world for a

00:08:02,500 --> 00:08:10,240
synchronous communication we make use of

00:08:05,589 --> 00:08:16,150
the entropy vm placement manager to to

00:08:10,240 --> 00:08:18,279
place vm on while meeting some

00:08:16,150 --> 00:08:22,750
constraints such as minimizing energy

00:08:18,279 --> 00:08:25,810
consumption and finger exam and last but

00:08:22,750 --> 00:08:27,129
not least the technological piece that

00:08:25,810 --> 00:08:31,750
we use heavily in our project is a

00:08:27,129 --> 00:08:33,579
j-class library which actually a greatly

00:08:31,750 --> 00:08:36,729
facilitates the development of cloud

00:08:33,579 --> 00:08:40,180
providers injectors is a multiclad java

00:08:36,729 --> 00:08:47,079
library with a an extensive support for

00:08:40,180 --> 00:08:50,680
a huge set of cloud providers ok so now

00:08:47,079 --> 00:08:53,950
to conclude nearly what

00:08:50,680 --> 00:08:56,860
next for scirocco respect you have a

00:08:53,950 --> 00:09:01,360
first say stable release as a circle

00:08:56,860 --> 00:09:06,490
platform by q2 2012 with support falls

00:09:01,360 --> 00:09:10,330
near the mts Samia API axis of active

00:09:06,490 --> 00:09:12,880
worked for 2012 include first what we

00:09:10,330 --> 00:09:17,040
call to mention of results placement so

00:09:12,880 --> 00:09:19,959
AB you have seen previously currently

00:09:17,040 --> 00:09:23,050
results are user needs you to place

00:09:19,959 --> 00:09:26,680
resources manually to specify which

00:09:23,050 --> 00:09:29,920
category you want for for for each VM is

00:09:26,680 --> 00:09:33,250
vm so here what ideally we want to

00:09:29,920 --> 00:09:35,070
target is to put in place a matchmaking

00:09:33,250 --> 00:09:38,649
process between the requirements of the

00:09:35,070 --> 00:09:42,390
cloud consumers and and the capabilities

00:09:38,649 --> 00:09:45,459
of the top providers we want this

00:09:42,390 --> 00:09:49,029
policies to be not to be hardwired in

00:09:45,459 --> 00:09:51,160
the platformer to be pluggable and we

00:09:49,029 --> 00:09:53,529
also respect not revenge will and to

00:09:51,160 --> 00:09:55,630
reuse as much as possible work done as

00:09:53,529 --> 00:09:58,510
where and in particular in context with

00:09:55,630 --> 00:10:00,370
the audibility consortium I'm thinking

00:09:58,510 --> 00:10:02,560
about the compatible one project

00:10:00,370 --> 00:10:06,580
thinking about the contrast project and

00:10:02,560 --> 00:10:09,160
maybe over other projects second item of

00:10:06,580 --> 00:10:10,870
work is multiclad image management so

00:10:09,160 --> 00:10:14,350
here we aim to have some flexible image

00:10:10,870 --> 00:10:17,410
management which hides the geto rigidity

00:10:14,350 --> 00:10:20,320
of the virus formats of image for this

00:10:17,410 --> 00:10:22,720
or that cloud provider so here we we

00:10:20,320 --> 00:10:25,360
will rely on on third-party image

00:10:22,720 --> 00:10:29,110
factories such as share soft or or or

00:10:25,360 --> 00:10:31,839
equivalent to generate some cloud

00:10:29,110 --> 00:10:36,459
provider specific image based on generic

00:10:31,839 --> 00:10:39,220
metadata last item of less taxes of work

00:10:36,459 --> 00:10:41,260
includes some work on more cloud

00:10:39,220 --> 00:10:46,089
providers reports such as a VMware

00:10:41,260 --> 00:10:49,529
vCloud for example ok so to conclude it

00:10:46,089 --> 00:10:52,779
would just say that any contribution and

00:10:49,529 --> 00:10:55,660
collaboration are welcome in context of

00:10:52,779 --> 00:10:58,480
my project the source code of project is

00:10:55,660 --> 00:11:02,170
available as a in the Forge or debris to

00:10:58,480 --> 00:11:03,250
forge of the project here I mentioned

00:11:02,170 --> 00:11:05,500
some various

00:11:03,250 --> 00:11:09,250
partners have been involved in the

00:11:05,500 --> 00:11:11,830
inception was a circle project bill is

00:11:09,250 --> 00:11:15,850
avert which is a start-up spinoff from

00:11:11,830 --> 00:11:17,520
the Academy no not and we hope to

00:11:15,850 --> 00:11:21,180
attract more patterns in in the future

00:11:17,520 --> 00:11:21,180

YouTube URL: https://www.youtube.com/watch?v=8Y5kU33DQqg


