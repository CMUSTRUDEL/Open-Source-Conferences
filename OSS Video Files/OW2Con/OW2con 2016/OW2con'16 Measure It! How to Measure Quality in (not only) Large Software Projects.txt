Title: OW2con'16 Measure It! How to Measure Quality in (not only) Large Software Projects
Publication date: 2016-09-27
Playlist: OW2con 2016
Description: 
	You can control what you can measure: this is particularly true for software quality. Measures means attributes (to be measured) and tools (to measure).
We have a pletora of tools to support entirely the Application Lifecycle Management: companies and communities can leverage open source to set up infrastructures filled with SCMs, issue trackers, static analyzers, wikis, planners, and so on. These infras can become mines of raw quality data: selecting and defining measures, metrics and ways to represent them is core to achieve a complete control of the quality of your developments.
In this talk Daniele will show you the experience in a large software company, involved both in open and closed source projects: processes, tools, measures adopted to let people to deliver software satisfying common quality attributes, shared across the organization by the means of guidelines and a common culture of quality.  This approach can be adopted by companies and communities as well: quality is the value perceived by end-users, who often arenâ€™t interested in knowing whether the software they are using is built by a community or a company. You will see how close this experience is to OW2 OSCAR quality analysis pillars.
Captions: 
	00:00:06,410 --> 00:00:14,160
hello and this presentation we will see

00:00:11,490 --> 00:00:17,220
the need for the measure and we will see

00:00:14,160 --> 00:00:19,609
at the end of this presentation the

00:00:17,220 --> 00:00:22,680
connection between the experience of

00:00:19,609 --> 00:00:25,560
engineering group in this field and the

00:00:22,680 --> 00:00:29,970
host car program and this is an

00:00:25,560 --> 00:00:33,140
interesting fact because the two the two

00:00:29,970 --> 00:00:36,210
entities are double to community and

00:00:33,140 --> 00:00:43,340
engineering can exchange information and

00:00:36,210 --> 00:00:46,910
experiences to grow together okay for

00:00:43,340 --> 00:00:52,230
everything that really matters in life

00:00:46,910 --> 00:00:55,410
we shouldn't improvise whether we want

00:00:52,230 --> 00:00:57,629
to build a tower or software product or

00:00:55,410 --> 00:01:01,859
something else more important in our

00:00:57,629 --> 00:01:08,880
life improvisation can waste our effort

00:01:01,859 --> 00:01:14,790
and can destroy our results the to how

00:01:08,880 --> 00:01:18,750
tours of this book people were found an

00:01:14,790 --> 00:01:21,509
easy way to get tongue gilbere the outer

00:01:18,750 --> 00:01:25,439
worlds of term ethics to get him heated

00:01:21,509 --> 00:01:29,310
up telling him I found something that is

00:01:25,439 --> 00:01:33,000
not not measurable you usually this

00:01:29,310 --> 00:01:37,100
thing get some gilberto heated up

00:01:33,000 --> 00:01:40,979
because he is strongly convinced that

00:01:37,100 --> 00:01:44,820
anything can be in some way measured and

00:01:40,979 --> 00:01:48,600
this is the an informal owe that to

00:01:44,820 --> 00:01:50,880
outers extracted from their relation

00:01:48,600 --> 00:01:52,890
with Tom guild anything you need to

00:01:50,880 --> 00:01:55,979
quantify can be measured in some way

00:01:52,890 --> 00:01:58,040
that is superior to not measuring it at

00:01:55,979 --> 00:02:00,899
all this is a very important thing and

00:01:58,040 --> 00:02:04,530
software development is a very complex

00:02:00,899 --> 00:02:08,729
matter it's not easy to control him and

00:02:04,530 --> 00:02:13,560
to measure him but it's better perform

00:02:08,729 --> 00:02:15,540
some measures and the question is how

00:02:13,560 --> 00:02:19,650
for instance how do you how would you

00:02:15,540 --> 00:02:22,530
measure this kind of statistics this is

00:02:19,650 --> 00:02:25,680
the distribution of the original

00:02:22,530 --> 00:02:30,660
origination of bugs and distribution of

00:02:25,680 --> 00:02:37,170
their detection and the effort to to fix

00:02:30,660 --> 00:02:40,500
them the first the first thing to do is

00:02:37,170 --> 00:02:43,140
to define which measure we want to turn

00:02:40,500 --> 00:02:45,959
to set up and a very pragmatic approach

00:02:43,140 --> 00:02:49,230
is the goal question metric so we define

00:02:45,959 --> 00:02:53,610
a goal we ask a question now to reach

00:02:49,230 --> 00:02:57,209
that goal and we define an answer with

00:02:53,610 --> 00:03:00,660
an indicator to answer to that question

00:02:57,209 --> 00:03:04,049
and from this answer we can refine and

00:03:00,660 --> 00:03:06,360
derive the metric this is an example we

00:03:04,049 --> 00:03:10,049
want to measure in box distribution and

00:03:06,360 --> 00:03:12,569
so we ask ourself in which project phase

00:03:10,049 --> 00:03:15,780
bugs are originated and from this

00:03:12,569 --> 00:03:21,299
question we can derive indicator the

00:03:15,780 --> 00:03:25,200
algorithm and so on okay until now this

00:03:21,299 --> 00:03:29,370
is methodology this is theory it's

00:03:25,200 --> 00:03:31,890
important the step steps father to set

00:03:29,370 --> 00:03:34,140
up a corporate framework or a frame

00:03:31,890 --> 00:03:37,470
worker shared within the the community

00:03:34,140 --> 00:03:39,989
because if we were together in a

00:03:37,470 --> 00:03:42,660
software product in several software

00:03:39,989 --> 00:03:49,170
projects we need to work in a specific

00:03:42,660 --> 00:03:53,220
way to achieve the the measurements this

00:03:49,170 --> 00:03:58,350
is the power corporate framework and if

00:03:53,220 --> 00:04:02,609
you see we can recognize several aspects

00:03:58,350 --> 00:04:05,819
in common with the Oscar pillars we have

00:04:02,609 --> 00:04:11,190
the management aspects the engineering

00:04:05,819 --> 00:04:13,670
aspects the system test the analysis

00:04:11,190 --> 00:04:16,500
design environment management and

00:04:13,670 --> 00:04:18,660
measurement and Reapers and sauron this

00:04:16,500 --> 00:04:23,849
is a very important starting starting

00:04:18,660 --> 00:04:26,900
point for for defining and collecting

00:04:23,849 --> 00:04:29,780
measures next

00:04:26,900 --> 00:04:33,500
the next steps of course starting from

00:04:29,780 --> 00:04:35,750
the framework is to derive some useful

00:04:33,500 --> 00:04:38,539
corporate matrix again with Cole

00:04:35,750 --> 00:04:41,860
question matrix we can define several

00:04:38,539 --> 00:04:47,900
matrix this is a short example of the

00:04:41,860 --> 00:04:52,250
common share in our company matrix this

00:04:47,900 --> 00:04:55,100
is a corporate culture for for instance

00:04:52,250 --> 00:04:59,780
we have bugs distribution by project

00:04:55,100 --> 00:05:02,449
phases of course we want to find that

00:04:59,780 --> 00:05:09,380
the initial distribution and bugs the

00:05:02,449 --> 00:05:13,039
text detection ratio and so on and there

00:05:09,380 --> 00:05:16,910
are also matrix that customers asked to

00:05:13,039 --> 00:05:19,340
hafsa for instance matrix from the

00:05:16,910 --> 00:05:21,800
static analysis of code that code

00:05:19,340 --> 00:05:24,530
essential complexity here you can see

00:05:21,800 --> 00:05:30,340
the experience from the field customers

00:05:24,530 --> 00:05:34,930
ask has measure us on this matrix and

00:05:30,340 --> 00:05:39,860
one step father customers measure has a

00:05:34,930 --> 00:05:42,530
defining service level agreement service

00:05:39,860 --> 00:05:46,099
level agreement are not only about the

00:05:42,530 --> 00:05:50,090
racial resolution time of bugs and so on

00:05:46,099 --> 00:05:52,940
but also in this matrix in the for

00:05:50,090 --> 00:05:56,210
instance quality of our software code

00:05:52,940 --> 00:06:01,220
and is important to define clearly

00:05:56,210 --> 00:06:04,789
without no ambiguity these indicators

00:06:01,220 --> 00:06:06,800
it's a important for us to be measured

00:06:04,789 --> 00:06:10,190
in the correct way by the customers and

00:06:06,800 --> 00:06:12,080
of course is important for the for the

00:06:10,190 --> 00:06:18,710
customers because it's an indicator of

00:06:12,080 --> 00:06:21,320
the quality of our production and a way

00:06:18,710 --> 00:06:25,099
to define a service level agreement is

00:06:21,320 --> 00:06:29,599
starting from using an extended back on

00:06:25,099 --> 00:06:32,030
our forum we start from measures matrix

00:06:29,599 --> 00:06:35,719
with a fine KPI these are the building

00:06:32,030 --> 00:06:37,030
blocks to define service level agreement

00:06:35,719 --> 00:06:40,540
and service level agree

00:06:37,030 --> 00:06:44,290
two instances it's important of course

00:06:40,540 --> 00:06:47,650
to have someone that is expert of this

00:06:44,290 --> 00:06:49,420
kind of things you need an expert in

00:06:47,650 --> 00:06:52,330
measures in quality and productivity

00:06:49,420 --> 00:06:55,830
intelligence to perform all of these

00:06:52,330 --> 00:06:59,410
another work analysis of the

00:06:55,830 --> 00:07:05,440
measurements metrics and indicators and

00:06:59,410 --> 00:07:09,820
so on the step the next step is to have

00:07:05,440 --> 00:07:13,030
the tools to collect these measures okay

00:07:09,820 --> 00:07:15,330
and here comes the infrastructure

00:07:13,030 --> 00:07:20,410
because the corporate infrastructure

00:07:15,330 --> 00:07:23,140
becomes it is both the a tool to boost

00:07:20,410 --> 00:07:26,560
production of course serving the needs

00:07:23,140 --> 00:07:29,890
of the developers but also it's a source

00:07:26,560 --> 00:07:33,030
source for measures and it's very

00:07:29,890 --> 00:07:36,640
important to assemble an infrastructure

00:07:33,030 --> 00:07:39,640
having measures in mind because in this

00:07:36,640 --> 00:07:44,740
way you can assemble an infrastructure

00:07:39,640 --> 00:07:48,220
that has a coherent coherent

00:07:44,740 --> 00:07:49,480
functionality I repeat both for the

00:07:48,220 --> 00:07:52,560
production the productivity of

00:07:49,480 --> 00:07:57,820
developers and as a sources of measures

00:07:52,560 --> 00:08:01,210
it's very important so to plan it to

00:07:57,820 --> 00:08:03,790
configure it we don't it's better to not

00:08:01,210 --> 00:08:08,740
use the default configurations it's

00:08:03,790 --> 00:08:11,410
better to perform several customization

00:08:08,740 --> 00:08:14,380
with the means of the single tools and

00:08:11,410 --> 00:08:17,740
it's very important who have a structure

00:08:14,380 --> 00:08:20,290
to manage it to to evolve the

00:08:17,740 --> 00:08:23,380
infrastructure and then train people to

00:08:20,290 --> 00:08:26,590
use tools in the correct way and support

00:08:23,380 --> 00:08:28,780
them and very important task and collect

00:08:26,590 --> 00:08:32,050
feedback say this is another kind of

00:08:28,780 --> 00:08:36,940
measure because this measure can let us

00:08:32,050 --> 00:08:39,280
to measure the the enhancement of our

00:08:36,940 --> 00:08:45,370
infrastructure the infrastructure of

00:08:39,280 --> 00:08:48,040
course vols with its users so to

00:08:45,370 --> 00:08:50,680
summarize we can say that rules of an

00:08:48,040 --> 00:08:52,930
infrastructure are tools

00:08:50,680 --> 00:08:56,170
to produce software of course and these

00:08:52,930 --> 00:08:59,200
tools will become sources for our

00:08:56,170 --> 00:09:01,630
measures then we need tools to collect

00:08:59,200 --> 00:09:04,330
measures and tools of course to

00:09:01,630 --> 00:09:07,930
visualize these these measures and that

00:09:04,330 --> 00:09:10,649
has to perform analysis this is the

00:09:07,930 --> 00:09:13,600
power corporate infrastructure

00:09:10,649 --> 00:09:17,500
represented with the Xavier lab DevOps

00:09:13,600 --> 00:09:20,860
diagram generator to be completely

00:09:17,500 --> 00:09:24,070
crystal clear with you sable ABS doesn't

00:09:20,860 --> 00:09:26,790
support XY key Spago for Q and test link

00:09:24,070 --> 00:09:30,370
but with the aim of the get the

00:09:26,790 --> 00:09:36,610
sebya labs is able to to support them

00:09:30,370 --> 00:09:38,649
and so the importance of the of planning

00:09:36,610 --> 00:09:41,709
and set up the infrastructure so you

00:09:38,649 --> 00:09:45,990
need an expert in software development

00:09:41,709 --> 00:09:51,190
processes so a person who had the

00:09:45,990 --> 00:09:55,150
technical and the technical information

00:09:51,190 --> 00:09:57,520
and the knowledge of the corporate

00:09:55,150 --> 00:10:01,510
processes to assemble the infrastructure

00:09:57,520 --> 00:10:03,610
in the correct way and then in this way

00:10:01,510 --> 00:10:08,440
we have an infrastructure there all the

00:10:03,610 --> 00:10:12,190
professional in our company can use to

00:10:08,440 --> 00:10:15,240
boost their home productivity to have a

00:10:12,190 --> 00:10:17,380
higher quality in their product and

00:10:15,240 --> 00:10:19,510
automatically this is a very important

00:10:17,380 --> 00:10:21,820
is a key factor for the success of an

00:10:19,510 --> 00:10:23,950
infrastructure and for the success of a

00:10:21,820 --> 00:10:27,839
process to collect measures and use them

00:10:23,950 --> 00:10:32,589
in the quality analysis these measures

00:10:27,839 --> 00:10:34,900
should be absolutely automatic they

00:10:32,589 --> 00:10:39,010
should come automatically from the

00:10:34,900 --> 00:10:41,020
professionals work and then of course we

00:10:39,010 --> 00:10:44,050
need to attract this data so we need an

00:10:41,020 --> 00:10:47,529
expert in atl and data warehouse design

00:10:44,050 --> 00:10:50,170
because this our foundation for our

00:10:47,529 --> 00:10:56,020
quality and productivity intelligence

00:10:50,170 --> 00:10:59,700
and at last professionals to build our

00:10:56,020 --> 00:11:03,670
reports and our and our dashboards I

00:10:59,700 --> 00:11:04,600
just to have an example internally we

00:11:03,670 --> 00:11:07,600
use JIRA

00:11:04,600 --> 00:11:09,310
as a traceability tool as I'm issue

00:11:07,600 --> 00:11:12,209
tracker but not done it issue tracker

00:11:09,310 --> 00:11:15,639
the default configuration have some

00:11:12,209 --> 00:11:18,310
default fields but having two more

00:11:15,639 --> 00:11:22,480
custom fields to define the project

00:11:18,310 --> 00:11:24,639
phase let us to quickly have the

00:11:22,480 --> 00:11:29,050
statistics we see in the in the

00:11:24,639 --> 00:11:32,920
beginning of this presentation and using

00:11:29,050 --> 00:11:35,620
JIRA dashboard we can build the

00:11:32,920 --> 00:11:39,360
dashboard the statistics we see we saw

00:11:35,620 --> 00:11:43,360
in at the beginning of this presentation

00:11:39,360 --> 00:11:46,410
another usage the risk management we

00:11:43,360 --> 00:11:50,310
used also JIRA to manage risk and

00:11:46,410 --> 00:11:57,279
configuring it properly we can have

00:11:50,310 --> 00:12:01,300
dashboards on the on risk assessment em

00:11:57,279 --> 00:12:03,490
here I'm meaning it project risk of of

00:12:01,300 --> 00:12:07,120
course this is a dashboard built by the

00:12:03,490 --> 00:12:10,630
means of Spago for Q and having our

00:12:07,120 --> 00:12:13,839
infrastructure used within a company we

00:12:10,630 --> 00:12:16,110
can derive automatically information

00:12:13,839 --> 00:12:19,920
from the production line of scott's

00:12:16,110 --> 00:12:25,000
number of projects in JIRA bugs

00:12:19,920 --> 00:12:27,610
requirement number the usage of for

00:12:25,000 --> 00:12:31,600
instance sonar cube for the static

00:12:27,610 --> 00:12:34,000
analysis and so on and again we can have

00:12:31,600 --> 00:12:35,920
automatically information about the

00:12:34,000 --> 00:12:38,620
usage of the infrastructure we can see

00:12:35,920 --> 00:12:40,509
in this in this way the effectiveness of

00:12:38,620 --> 00:12:42,970
our infrastructure because we can see

00:12:40,509 --> 00:12:48,069
how many people are using and if they

00:12:42,970 --> 00:12:52,540
are using it properly and again I told

00:12:48,069 --> 00:12:56,680
to do that we need also to support our

00:12:52,540 --> 00:12:58,899
user we can measure also support the

00:12:56,680 --> 00:13:01,180
effort of the of how support in

00:12:58,899 --> 00:13:05,620
supporting our our end users are

00:13:01,180 --> 00:13:10,480
professionals our our developers there

00:13:05,620 --> 00:13:12,939
is just to handle I will I won't believe

00:13:10,480 --> 00:13:14,460
Eddie fast okay the the connection with

00:13:12,939 --> 00:13:16,620
the with Oscar

00:13:14,460 --> 00:13:19,860
at the beginning of this presentation I

00:13:16,620 --> 00:13:24,060
told you that there are several and

00:13:19,860 --> 00:13:26,910
there were also several point in common

00:13:24,060 --> 00:13:29,760
for instance coding best practices of

00:13:26,910 --> 00:13:32,070
course in engineering we have these best

00:13:29,760 --> 00:13:34,620
practices we are migrating best

00:13:32,070 --> 00:13:37,410
practices and documentation on annex

00:13:34,620 --> 00:13:39,960
wiki distance measurement and metrics

00:13:37,410 --> 00:13:42,770
best practices from in the host care

00:13:39,960 --> 00:13:46,170
programs are tightly connected with the

00:13:42,770 --> 00:13:48,840
measurement that we can define in our in

00:13:46,170 --> 00:13:51,570
our company and software testing best

00:13:48,840 --> 00:13:56,000
practices you can see that in our

00:13:51,570 --> 00:14:00,120
company framework this is a process for

00:13:56,000 --> 00:14:02,610
for testing activities are pervasive and

00:14:00,120 --> 00:14:05,940
parallel process to the development

00:14:02,610 --> 00:14:09,840
process and affects all the phases in

00:14:05,940 --> 00:14:14,270
the of our software development in this

00:14:09,840 --> 00:14:18,120
way it's easy to collect measure and

00:14:14,270 --> 00:14:21,990
have an gain control on the overall

00:14:18,120 --> 00:14:27,350
quality of our software okay I you

00:14:21,990 --> 00:14:27,350

YouTube URL: https://www.youtube.com/watch?v=gGJr8JtAJCc


