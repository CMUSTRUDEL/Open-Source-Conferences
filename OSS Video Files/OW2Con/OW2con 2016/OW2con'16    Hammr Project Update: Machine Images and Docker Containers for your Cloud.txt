Title: OW2con'16    Hammr Project Update: Machine Images and Docker Containers for your Cloud
Publication date: 2016-09-27
Playlist: OW2con 2016
Description: 
	Hammr is an OW2 open source, command-line tool for creating consistent and repeatable machine images for different cloud or virtual environments, or migrating live systems from one environment to another. Designed for cloud era environments, where agility and automation are key, hammr helps organizations automate the creation of machine images for hybrid environments. This presentation will focus on the hybrid capabilities of hammr for any virtual or cloud target environment. It will also include a focus on DevOps and Docker integration, and show how hammr can be used to quickly build and run Docker images, helping accelerate development and test processes among other benefits. Finally, we will present the latest hammr features, including the ability for cloud providers to customize target platforms and expose their own IaaS infrastructure as top-level branded objects accessible via hammr, thus easing the path from user images to their cloud infrastructure.
Captions: 
	00:00:05,299 --> 00:00:12,599
hello so the this is a presentation that

00:00:10,160 --> 00:00:16,770
Shirley's promos put together so Julius

00:00:12,599 --> 00:00:19,980
is the project lead for hammer I'm just

00:00:16,770 --> 00:00:22,470
presenting the slides so of Joyce's told

00:00:19,980 --> 00:00:25,680
me the messages but uh so I would make

00:00:22,470 --> 00:00:28,500
any mistakes in this so what's hammer

00:00:25,680 --> 00:00:31,529
Hammer isn't it first of all it's under

00:00:28,500 --> 00:00:34,920
W to project it's a command-line tool

00:00:31,529 --> 00:00:36,450
written in Python realizing the URL here

00:00:34,920 --> 00:00:38,100
is the old URL for accessing to a

00:00:36,450 --> 00:00:39,899
project dashboard which you'll find all

00:00:38,100 --> 00:00:42,510
the information on the order with your

00:00:39,899 --> 00:00:46,710
website about hammer we'll also have a

00:00:42,510 --> 00:00:50,489
hammer io website and the source code is

00:00:46,710 --> 00:00:51,989
hosted on github and so what is hammer

00:00:50,489 --> 00:00:55,110
it's a command line tool which allows

00:00:51,989 --> 00:00:58,230
you to model your model your application

00:00:55,110 --> 00:00:59,940
model your stack and to be able to from

00:00:58,230 --> 00:01:02,730
one model produce different machine

00:00:59,940 --> 00:01:06,630
images from a single configuration file

00:01:02,730 --> 00:01:08,580
so in short on on the left here you have

00:01:06,630 --> 00:01:10,049
your what we call the template with the

00:01:08,580 --> 00:01:12,119
template represents your application

00:01:10,049 --> 00:01:13,619
it's a JSON file together with the

00:01:12,119 --> 00:01:16,080
binaries if you have any binaries

00:01:13,619 --> 00:01:19,320
included in your application and with

00:01:16,080 --> 00:01:22,650
hammer we connect to a you for server so

00:01:19,320 --> 00:01:24,900
you have a default online service which

00:01:22,650 --> 00:01:27,180
is accessible from the u.s. of website

00:01:24,900 --> 00:01:29,310
and otherwise through a probe which will

00:01:27,180 --> 00:01:31,259
present later on together with Stefan

00:01:29,310 --> 00:01:35,340
and which city has mentioned this

00:01:31,259 --> 00:01:38,310
morning you can create a self-service an

00:01:35,340 --> 00:01:40,049
account on a pub and a probe hosts what

00:01:38,310 --> 00:01:41,970
we call the factory in a probe which is

00:01:40,049 --> 00:01:46,700
a you for server which will generate the

00:01:41,970 --> 00:01:49,710
images for you and you can also export

00:01:46,700 --> 00:01:51,689
if you have hammer templates there you

00:01:49,710 --> 00:01:53,970
can re export them as a full bundle

00:01:51,689 --> 00:01:58,409
which you can then share with other

00:01:53,970 --> 00:02:00,570
people so hammer is a Python

00:01:58,409 --> 00:02:02,100
command-line tool so installing hammer

00:02:00,570 --> 00:02:05,399
the full documentation is on the website

00:02:02,100 --> 00:02:06,899
but typically you need Python 27 you

00:02:05,399 --> 00:02:08,879
need peep and then you just do pip

00:02:06,899 --> 00:02:10,750
install hammer and then you can shake

00:02:08,879 --> 00:02:12,760
which version you've got installed

00:02:10,750 --> 00:02:14,560
and as I come online if you just type

00:02:12,760 --> 00:02:17,200
hammer minus minus help people give you

00:02:14,560 --> 00:02:20,230
a list of all the different commands so

00:02:17,200 --> 00:02:22,240
how does it work how can you create and

00:02:20,230 --> 00:02:25,570
manage your applications tactical hammer

00:02:22,240 --> 00:02:28,390
so you write a template file which is a

00:02:25,570 --> 00:02:30,700
configuration file so we now offer so

00:02:28,390 --> 00:02:36,280
that's part of the novelties since this

00:02:30,700 --> 00:02:38,920
year we now offer llamo syntax as well

00:02:36,280 --> 00:02:40,390
as Jason and you have mainly two

00:02:38,920 --> 00:02:42,400
sections in the file you have one

00:02:40,390 --> 00:02:44,380
section which describes your application

00:02:42,400 --> 00:02:46,390
using the stack keyword also a quick

00:02:44,380 --> 00:02:48,580
example later on you have another

00:02:46,390 --> 00:02:51,010
section called builders which allow you

00:02:48,580 --> 00:02:52,900
to define which type of image you want

00:02:51,010 --> 00:02:54,550
to generate and if you have cloud

00:02:52,900 --> 00:02:56,410
accounts there's another section that

00:02:54,550 --> 00:02:59,800
described where you want to publish the

00:02:56,410 --> 00:03:02,410
image to order value to stack to equal

00:02:59,800 --> 00:03:04,360
our to wherever so this will allow you

00:03:02,410 --> 00:03:07,750
to publish the image if it's a cloud

00:03:04,360 --> 00:03:10,959
type image to your cloud provider so

00:03:07,750 --> 00:03:14,050
this is a simple example when you want

00:03:10,959 --> 00:03:16,630
to have John to describe your

00:03:14,050 --> 00:03:20,440
application so this one is simply based

00:03:16,630 --> 00:03:24,489
on debian version 8 it's got it's called

00:03:20,440 --> 00:03:27,070
engines and you only define what we call

00:03:24,489 --> 00:03:29,260
a minimal OS profile I'll explain that

00:03:27,070 --> 00:03:30,820
very quickly later on and you just say

00:03:29,260 --> 00:03:33,130
that four engines you need the engines

00:03:30,820 --> 00:03:35,860
package so this is of course very simple

00:03:33,130 --> 00:03:37,150
you may want to add other things so here

00:03:35,860 --> 00:03:39,250
you've got a stack keyword which

00:03:37,150 --> 00:03:41,410
describes your stack your application

00:03:39,250 --> 00:03:43,810
the OS keyword which describes the

00:03:41,410 --> 00:03:45,610
operating system profile and you have

00:03:43,810 --> 00:03:48,850
also the installation keyword where you

00:03:45,610 --> 00:03:51,790
could put other types of information so

00:03:48,850 --> 00:03:53,890
basically a stack as its described here

00:03:51,790 --> 00:03:56,260
so an installation profile you can add

00:03:53,890 --> 00:03:58,810
things like kernel parameter define new

00:03:56,260 --> 00:04:00,910
partitioning say whether you want the

00:03:58,810 --> 00:04:05,680
HTTP or not choose your keyboard your

00:04:00,910 --> 00:04:07,720
time zone in the OS profile we offer the

00:04:05,680 --> 00:04:09,489
possibility just to choose from three

00:04:07,720 --> 00:04:11,650
predefined types which is minimal

00:04:09,489 --> 00:04:13,690
minimal with desktop or server and then

00:04:11,650 --> 00:04:16,720
you can add all your OS packages that

00:04:13,690 --> 00:04:19,840
you want to let you know you need in the

00:04:16,720 --> 00:04:21,789
my software you can you can actually

00:04:19,840 --> 00:04:22,980
upload bundles so this is where for

00:04:21,789 --> 00:04:25,650
example you would have

00:04:22,980 --> 00:04:27,600
your application binaries so if you want

00:04:25,650 --> 00:04:29,370
to build a dr. ku templates you would

00:04:27,600 --> 00:04:31,800
put the doctor KU source code in there

00:04:29,370 --> 00:04:34,110
or packages and in the configuration

00:04:31,800 --> 00:04:35,790
this is where you would add your boot

00:04:34,110 --> 00:04:37,620
scripts so typically the scripts that

00:04:35,790 --> 00:04:42,030
you write when you want to configure the

00:04:37,620 --> 00:04:44,010
application so well you can validate the

00:04:42,030 --> 00:04:47,040
syntax otherwise you can just say

00:04:44,010 --> 00:04:49,500
template create minus minus the file

00:04:47,040 --> 00:04:51,990
which is the llamo file and this will

00:04:49,500 --> 00:04:55,130
validate the file and create only you

00:04:51,990 --> 00:04:57,270
for server a template which is an object

00:04:55,130 --> 00:04:59,760
representing your application you will

00:04:57,270 --> 00:05:02,520
also upload all the binaries that you

00:04:59,760 --> 00:05:04,860
need so at this stage you've just

00:05:02,520 --> 00:05:08,130
created an object of type template on

00:05:04,860 --> 00:05:09,570
the server and you can list also all the

00:05:08,130 --> 00:05:12,120
templates that you have so here I've got

00:05:09,570 --> 00:05:17,930
my ng engines to be an eight template

00:05:12,120 --> 00:05:20,670
and the next the next section would be

00:05:17,930 --> 00:05:22,710
defining which which images you want to

00:05:20,670 --> 00:05:25,350
which image or images you want to

00:05:22,710 --> 00:05:30,360
generate from this template so here I've

00:05:25,350 --> 00:05:32,550
got an example of of OpenStack image

00:05:30,360 --> 00:05:35,160
we're in a separate file i define what

00:05:32,550 --> 00:05:39,030
my OpenStack account is actual that in a

00:05:35,160 --> 00:05:41,580
minute I need for OpenStack you need to

00:05:39,030 --> 00:05:43,860
specify also when you want to publish

00:05:41,580 --> 00:05:45,300
you specify the tenant and the image

00:05:43,860 --> 00:05:48,630
name as it will appear in your library

00:05:45,300 --> 00:05:50,550
and it is an optional description for

00:05:48,630 --> 00:05:51,890
other types of cloud we you have

00:05:50,550 --> 00:05:54,560
different sections so the whole

00:05:51,890 --> 00:05:56,550
documentation is on the website some

00:05:54,560 --> 00:05:58,500
service queue whether it's public or

00:05:56,550 --> 00:06:01,380
private it depends on the target cloud

00:05:58,500 --> 00:06:04,410
really so here you've got the cloud

00:06:01,380 --> 00:06:08,940
credentials which is the audible you to

00:06:04,410 --> 00:06:11,520
stack account where you have the image

00:06:08,940 --> 00:06:14,310
endpoint and the Keystone endpoint for

00:06:11,520 --> 00:06:16,140
for authentication for other types of

00:06:14,310 --> 00:06:17,769
clouds you may want you may want you may

00:06:16,140 --> 00:06:20,360
have to provide

00:06:17,769 --> 00:06:24,529
keys for example this is the case for

00:06:20,360 --> 00:06:26,569
Amazon in the case of cloudstack it's

00:06:24,529 --> 00:06:30,229
very similar you provide endpoints an

00:06:26,569 --> 00:06:33,259
endpoint and a user password so again

00:06:30,229 --> 00:06:36,379
depends on the type of flat so once

00:06:33,259 --> 00:06:38,419
you've done that you need to what we

00:06:36,379 --> 00:06:40,459
call create the account so basically you

00:06:38,419 --> 00:06:42,259
import your credentials into the

00:06:40,459 --> 00:06:44,809
platform by doing hammer account create

00:06:42,259 --> 00:06:46,519
and then you just call hammer template

00:06:44,809 --> 00:06:48,619
build so what this will do is it will

00:06:46,519 --> 00:06:51,079
reuse the template so your description

00:06:48,619 --> 00:06:53,179
of the application and it will generate

00:06:51,079 --> 00:06:56,389
a machine image for that template so

00:06:53,179 --> 00:06:58,399
generating a machine image takes some

00:06:56,389 --> 00:07:01,219
time it depends on the size of course of

00:06:58,399 --> 00:07:02,749
of the image complexity of whatever

00:07:01,219 --> 00:07:05,029
packages you have to install during the

00:07:02,749 --> 00:07:08,089
generation could take anything between

00:07:05,029 --> 00:07:09,860
five and ten fifteen minutes and at the

00:07:08,089 --> 00:07:11,419
end of it you've got an image ID here

00:07:09,860 --> 00:07:12,969
which is returned to you which is the

00:07:11,419 --> 00:07:16,369
image that you will be able to publish

00:07:12,969 --> 00:07:18,769
so here the next command if you want to

00:07:16,369 --> 00:07:21,800
publish your image to your w-2 stack

00:07:18,769 --> 00:07:24,229
glance library you just hammer image

00:07:21,800 --> 00:07:26,239
publish minus minus ID and your passing

00:07:24,229 --> 00:07:29,689
parameter also the llamo file that

00:07:26,239 --> 00:07:32,629
describes where your or to template is

00:07:29,689 --> 00:07:35,749
and that's it so basically you've

00:07:32,629 --> 00:07:37,249
published their image to your cloud this

00:07:35,749 --> 00:07:39,259
is where we stop then you go to your

00:07:37,249 --> 00:07:41,899
OpenStack console or to your cloudstack

00:07:39,259 --> 00:07:43,729
console to your Amazon ec2 consult to be

00:07:41,899 --> 00:07:46,039
able to manipulate the image start an

00:07:43,729 --> 00:07:47,989
instance from it so basically you

00:07:46,039 --> 00:07:49,699
describe a template you generate the

00:07:47,989 --> 00:07:51,439
image from the same template to the

00:07:49,699 --> 00:07:54,050
format of your choice and then you can

00:07:51,439 --> 00:07:56,360
publish it to your client environment if

00:07:54,050 --> 00:07:59,899
you generate other images of type I

00:07:56,360 --> 00:08:01,189
don't know virtualbox or or ova ova if

00:07:59,899 --> 00:08:02,659
you can download them and use them

00:08:01,189 --> 00:08:06,039
locally if you want to use them on your

00:08:02,659 --> 00:08:10,159
local hypervisor on your on your desktop

00:08:06,039 --> 00:08:13,129
so we support a number of target machine

00:08:10,159 --> 00:08:19,489
image formats which are which are listed

00:08:13,129 --> 00:08:21,229
here and and okay so in the title of the

00:08:19,489 --> 00:08:23,059
presentation there are two points that

00:08:21,229 --> 00:08:25,610
we want to talk about a little bit more

00:08:23,059 --> 00:08:28,219
so got five minutes left on Billy one

00:08:25,610 --> 00:08:29,689
which is the doctor integration so

00:08:28,219 --> 00:08:33,169
basically we

00:08:29,689 --> 00:08:35,300
or as one of the target formats so

00:08:33,169 --> 00:08:38,599
technically speaking it's a oh jeez

00:08:35,300 --> 00:08:42,769
eat file what we do when you when you

00:08:38,599 --> 00:08:44,149
generate a docker image with hammer we

00:08:42,769 --> 00:08:46,639
actually generate a self-contained

00:08:44,149 --> 00:08:49,579
docker Bay's image containing the base

00:08:46,639 --> 00:08:52,009
so as opposed to darker layers where

00:08:49,579 --> 00:08:54,259
okay you've got your layers but you

00:08:52,009 --> 00:08:56,060
don't really have a full control of what

00:08:54,259 --> 00:08:58,550
your doctor server will bring you in

00:08:56,060 --> 00:09:00,850
terms of versions of packages here you

00:08:58,550 --> 00:09:02,689
generate the full stack so you have the

00:09:00,850 --> 00:09:04,250
you have the control of all the

00:09:02,689 --> 00:09:06,410
operating system packages and their

00:09:04,250 --> 00:09:09,350
versions so it gives you a bit more

00:09:06,410 --> 00:09:12,769
control about the software packages that

00:09:09,350 --> 00:09:14,149
will be present in your image also for

00:09:12,769 --> 00:09:16,009
the sake of transparency you'll be able

00:09:14,149 --> 00:09:18,439
to visualize all the packages that are

00:09:16,009 --> 00:09:20,600
in this image and you would gain in

00:09:18,439 --> 00:09:22,819
consistency compared to just the doctor

00:09:20,600 --> 00:09:29,079
layer the disadvantage is that it's

00:09:22,819 --> 00:09:31,759
heavier so so as so just to summarize

00:09:29,079 --> 00:09:33,949
since last time we presented hammers I

00:09:31,759 --> 00:09:36,139
believe was last year we've added the

00:09:33,949 --> 00:09:39,949
Yama support so not just chasing but

00:09:36,139 --> 00:09:41,509
also llamo also in the previous version

00:09:39,949 --> 00:09:43,939
where you wanted to add your binaries

00:09:41,509 --> 00:09:46,189
you had to wrap them in an archive now

00:09:43,939 --> 00:09:48,800
you can just point to directory you

00:09:46,189 --> 00:09:51,100
don't have to wrap them we've also added

00:09:48,800 --> 00:09:54,529
compatibility to the coming well the

00:09:51,100 --> 00:09:56,449
latest release of you for lab Center

00:09:54,529 --> 00:09:58,699
which is the server that allows you to

00:09:56,449 --> 00:10:01,069
do the image generation we've added some

00:09:58,699 --> 00:10:03,910
flat formats I particularly out scale

00:10:01,069 --> 00:10:06,230
and the documentation has been moved to

00:10:03,910 --> 00:10:08,149
to read the docs and github so the

00:10:06,230 --> 00:10:12,290
documentation itself is open source as

00:10:08,149 --> 00:10:14,629
well and in the outlook as I said about

00:10:12,290 --> 00:10:15,980
poker at the moment the fact that you

00:10:14,629 --> 00:10:17,600
generate a full image gives you the

00:10:15,980 --> 00:10:19,759
advantage of having all the whole stack

00:10:17,600 --> 00:10:22,100
but it's heavier so we also want to be

00:10:19,759 --> 00:10:24,230
able to model just the layers so that's

00:10:22,100 --> 00:10:26,509
the that's the next thing in the roadmap

00:10:24,230 --> 00:10:28,220
and assembles a stack from different

00:10:26,509 --> 00:10:31,399
existing layers that you might have in

00:10:28,220 --> 00:10:33,680
your library so the library will be a

00:10:31,399 --> 00:10:35,509
library of templates not only being full

00:10:33,680 --> 00:10:39,759
stacks but also layers and you'll be

00:10:35,509 --> 00:10:42,500
able to assemble those layers and also

00:10:39,759 --> 00:10:44,209
one function I haven't spoke spoken

00:10:42,500 --> 00:10:46,759
about is you don't have to create your

00:10:44,209 --> 00:10:49,970
stack from scratch you can also what we

00:10:46,759 --> 00:10:52,160
called scan existing workloads biblical

00:10:49,970 --> 00:10:55,459
migration or scan so if you have already

00:10:52,160 --> 00:10:57,500
a machine that's running you will you

00:10:55,459 --> 00:11:00,110
run a scan binary on this machine and

00:10:57,500 --> 00:11:01,699
that will import what we call a scan

00:11:00,110 --> 00:11:03,860
from which you can generate a template

00:11:01,699 --> 00:11:06,500
so that could be an easier way than just

00:11:03,860 --> 00:11:08,569
doing it from scratch and so there is

00:11:06,500 --> 00:11:10,550
some authentication mode on this sauce

00:11:08,569 --> 00:11:13,339
workload at the moment it's on a user

00:11:10,550 --> 00:11:17,720
password base and we want to allow API

00:11:13,339 --> 00:11:20,509
keys as well and also in the terms of

00:11:17,720 --> 00:11:23,600
bundles so you as I said very briefly

00:11:20,509 --> 00:11:25,639
before the boot scripts are separated

00:11:23,600 --> 00:11:27,439
from the binaries so if you want if you

00:11:25,639 --> 00:11:29,209
have several binaries in your in your

00:11:27,439 --> 00:11:30,769
stack several applications want to

00:11:29,209 --> 00:11:33,050
attach the boot scripts the

00:11:30,769 --> 00:11:34,610
configuration scripts individually to

00:11:33,050 --> 00:11:37,100
each application so if you want to

00:11:34,610 --> 00:11:40,279
combine our on a web server and I take

00:11:37,100 --> 00:11:41,959
two bays and ruin or whatever each of

00:11:40,279 --> 00:11:43,579
them will have their own scripts and you

00:11:41,959 --> 00:11:46,009
want to be able to bundle the binaries

00:11:43,579 --> 00:11:47,269
together with a script so this is an

00:11:46,009 --> 00:11:49,519
improvement that's coming by the end of

00:11:47,269 --> 00:11:51,529
the year where we remodel the way we

00:11:49,519 --> 00:11:54,130
package all the user packages is

00:11:51,529 --> 00:11:57,040
binaries together with it scripts so we

00:11:54,130 --> 00:12:00,529
we put them together rather than

00:11:57,040 --> 00:12:03,649
separating them and also when we build

00:12:00,529 --> 00:12:07,339
the image via this is my last night when

00:12:03,649 --> 00:12:09,589
we build the image the the script the

00:12:07,339 --> 00:12:11,300
configuration scripts are not executed

00:12:09,589 --> 00:12:14,350
they are executed at the first boot so

00:12:11,300 --> 00:12:17,360
we want to also allow the ability to run

00:12:14,350 --> 00:12:19,639
some of the configuration scripts at the

00:12:17,360 --> 00:12:21,110
image build time so they will this will

00:12:19,639 --> 00:12:22,639
make the first go to the machine much

00:12:21,110 --> 00:12:26,720
faster and will boot with already

00:12:22,639 --> 00:12:29,059
pre-configured applications so it's open

00:12:26,720 --> 00:12:34,029
source it's sort of a to please use it

00:12:29,059 --> 00:12:34,029
and please contribute it thanks

00:12:35,910 --> 00:12:37,940

YouTube URL: https://www.youtube.com/watch?v=DQUOPwRFmvs


