Title: OW2con'16 KEYNOTE The Linux Foundation's CII Badge Program
Publication date: 2016-09-28
Playlist: OW2con 2016
Description: 
	Introduction to the CII Badge Programe. The Core Infrastructure Initiative (CII) Best Practices Badge is an open source secure development maturity model. Projects having a CII badge will showcase the project's commitment to security. Open source project maintainers answer a short questionnaire to be awarded a "Best Practices Badge".
Captions: 
	00:00:05,600 --> 00:00:12,120
so good morning my name is Dave wheeler

00:00:08,550 --> 00:00:13,920
I worked as he mentioned the Institute

00:00:12,120 --> 00:00:17,010
for Defense analyses I'm very interested

00:00:13,920 --> 00:00:20,310
in defending software against attack I

00:00:17,010 --> 00:00:23,039
also support the Linux Foundation which

00:00:20,310 --> 00:00:24,689
is primarily what I'm going to be

00:00:23,039 --> 00:00:27,390
talking about today so I'm going to be

00:00:24,689 --> 00:00:29,730
talking about the linux foundation's CII

00:00:27,390 --> 00:00:32,279
or core infrastructure initiative best

00:00:29,730 --> 00:00:35,100
practices badge I'm the technical lead

00:00:32,279 --> 00:00:38,969
of the project and my hope is that i

00:00:35,100 --> 00:00:40,770
will inspire many of you to either work

00:00:38,969 --> 00:00:42,450
on your projects getting a badge or

00:00:40,770 --> 00:00:44,190
encourage the projects that you are

00:00:42,450 --> 00:00:46,200
involved with getting a badge so let me

00:00:44,190 --> 00:00:48,360
explain a little bit about that first

00:00:46,200 --> 00:00:50,430
I'm going to very very briefly give some

00:00:48,360 --> 00:00:52,440
background that may help especially

00:00:50,430 --> 00:00:55,410
those who are familiar with the Linux

00:00:52,440 --> 00:00:57,510
Foundation so first of all I hope that

00:00:55,410 --> 00:00:58,949
all of you will understand I have to

00:00:57,510 --> 00:01:00,660
deal with people from very very

00:00:58,949 --> 00:01:04,290
different backgrounds we have very

00:01:00,660 --> 00:01:05,850
different preconceptions about open

00:01:04,290 --> 00:01:08,909
source software which are often mistaken

00:01:05,850 --> 00:01:12,150
it is absolutely not the case that all

00:01:08,909 --> 00:01:13,530
open source software is insecure I meet

00:01:12,150 --> 00:01:15,869
those kinds of people particularly if

00:01:13,530 --> 00:01:19,259
they're from companies that are selling

00:01:15,869 --> 00:01:21,479
competing projects products however it's

00:01:19,259 --> 00:01:24,330
also not secure not true that all

00:01:21,479 --> 00:01:26,280
open-source offers secure just like all

00:01:24,330 --> 00:01:29,939
of the software some open source offers

00:01:26,280 --> 00:01:32,299
relatively secure and some is not this

00:01:29,939 --> 00:01:35,610
is particularly brought out to bear in

00:01:32,299 --> 00:01:38,729
2014 with Hartley vulnerability in

00:01:35,610 --> 00:01:40,470
openssl and this really demonstrated to

00:01:38,729 --> 00:01:43,020
a lot of people what really was already

00:01:40,470 --> 00:01:45,210
the case that there was some widely used

00:01:43,020 --> 00:01:47,939
open source software that nevertheless

00:01:45,210 --> 00:01:50,450
really needed some kind of investment

00:01:47,939 --> 00:01:53,430
for security and so the linux foundation

00:01:50,450 --> 00:01:55,380
created an organization inside it called

00:01:53,430 --> 00:01:58,200
the core infrastructure initiative and

00:01:55,380 --> 00:02:00,810
the mission here is here it's to fund

00:01:58,200 --> 00:02:05,250
and support critical elements of the

00:02:00,810 --> 00:02:07,110
global infrastructure initiative so

00:02:05,250 --> 00:02:09,000
here's a little more about the CIA just

00:02:07,110 --> 00:02:10,590
briefly it supported it's a

00:02:09,000 --> 00:02:11,190
multi-million dollar project supported

00:02:10,590 --> 00:02:12,690
by many

00:02:11,190 --> 00:02:16,170
the companies you would recognize a lot

00:02:12,690 --> 00:02:19,200
of these names i'm sure a fundamentally

00:02:16,170 --> 00:02:20,940
can be direct talked about in terms of

00:02:19,200 --> 00:02:23,580
three actions it collaboratively

00:02:20,940 --> 00:02:25,470
identifies and funds open-source

00:02:23,580 --> 00:02:29,160
projects open source our projects in

00:02:25,470 --> 00:02:31,500
need of assistance it allows developers

00:02:29,160 --> 00:02:34,230
to continue their work it is not the

00:02:31,500 --> 00:02:37,560
goal the CII to take over projects is

00:02:34,230 --> 00:02:40,220
the goal to help projects do a better

00:02:37,560 --> 00:02:42,780
job of what they're already doing and

00:02:40,220 --> 00:02:45,360
finally the CI is transitioning from

00:02:42,780 --> 00:02:46,770
point fixes to holistic solutions this

00:02:45,360 --> 00:02:48,570
does not mean that CI a-- is not

00:02:46,770 --> 00:02:51,720
interested in helping specific projects

00:02:48,570 --> 00:02:53,340
they still are however there are so many

00:02:51,720 --> 00:02:56,490
projects out there open source software

00:02:53,340 --> 00:02:58,650
projects that someone depends on that it

00:02:56,490 --> 00:03:00,750
is difficult to fund every single

00:02:58,650 --> 00:03:04,020
project that someone thinks is important

00:03:00,750 --> 00:03:05,850
so instead the CIA funds a few that are

00:03:04,020 --> 00:03:08,540
very important that are widely used and

00:03:05,850 --> 00:03:13,890
also find some activities that can help

00:03:08,540 --> 00:03:15,570
sort of raise all boats as it were here

00:03:13,890 --> 00:03:18,030
are some investments in some of the key

00:03:15,570 --> 00:03:20,600
open source software projects the graph

00:03:18,030 --> 00:03:24,060
on the left for example shows openssl

00:03:20,600 --> 00:03:26,610
the linux foundation CIA funded openssl

00:03:24,060 --> 00:03:28,709
including some key developers focusing

00:03:26,610 --> 00:03:31,800
on things like improving security the

00:03:28,709 --> 00:03:35,459
graph here shows the number of issues up

00:03:31,800 --> 00:03:37,470
until 2014 there were more issues being

00:03:35,459 --> 00:03:40,140
requested more tickets but no one

00:03:37,470 --> 00:03:43,709
actually responding to them and suddenly

00:03:40,140 --> 00:03:46,350
as of 2014 a huge number of tickets were

00:03:43,709 --> 00:03:47,640
resolved one way or the other and

00:03:46,350 --> 00:03:49,739
they're working with other projects

00:03:47,640 --> 00:03:55,720
including for example auditing the code

00:03:49,739 --> 00:03:57,790
and so on let's see I also

00:03:55,720 --> 00:04:01,000
funds projects that have multi-project

00:03:57,790 --> 00:04:03,160
impacts for example funds organization

00:04:01,000 --> 00:04:06,100
called the fuzzing project which uses

00:04:03,160 --> 00:04:08,860
tools called feathers that send random

00:04:06,100 --> 00:04:11,740
data into programs a very large amount

00:04:08,860 --> 00:04:13,900
of it looking to trigger vulnerabilities

00:04:11,740 --> 00:04:15,760
different kinds this has found a number

00:04:13,900 --> 00:04:18,310
of vulnerabilities that have since been

00:04:15,760 --> 00:04:21,310
fixed are the various open-source

00:04:18,310 --> 00:04:23,200
software projects I love development of

00:04:21,310 --> 00:04:25,780
something called the CIA census this was

00:04:23,200 --> 00:04:27,850
some quantitative work to analyze many

00:04:25,780 --> 00:04:30,130
different open source projects to try to

00:04:27,850 --> 00:04:32,620
identify which projects are particularly

00:04:30,130 --> 00:04:34,750
in trouble higher risk and never less

00:04:32,620 --> 00:04:37,720
widely used and perhaps most in need of

00:04:34,750 --> 00:04:44,950
funding and finally what focus today is

00:04:37,720 --> 00:04:47,770
the best practices badge okay all right

00:04:44,950 --> 00:04:49,570
so open source software I think will be

00:04:47,770 --> 00:04:52,300
unsurprised to know it tends to be more

00:04:49,570 --> 00:04:55,000
secure if it follows generally good

00:04:52,300 --> 00:04:57,820
security practices undergoes peer

00:04:55,000 --> 00:04:59,620
reviews but hopefully encourage those

00:04:57,820 --> 00:05:01,660
good practices in fact how we know what

00:04:59,620 --> 00:05:04,150
those are and another one how can we

00:05:01,660 --> 00:05:05,919
know if they're being followed so we

00:05:04,150 --> 00:05:07,930
developed a simple approach first we

00:05:05,919 --> 00:05:09,460
tried to identify a set of best

00:05:07,930 --> 00:05:12,450
practices for open-source software

00:05:09,460 --> 00:05:14,620
projects and here I'm focusing on

00:05:12,450 --> 00:05:17,620
production side now there's one of best

00:05:14,620 --> 00:05:19,650
practices for open source projects that

00:05:17,620 --> 00:05:21,970
are developing software not the

00:05:19,650 --> 00:05:23,740
reception side the one of the best

00:05:21,970 --> 00:05:26,590
practices for examining software you

00:05:23,740 --> 00:05:28,810
might bring in and this was based very

00:05:26,590 --> 00:05:31,180
much on existing materials existing

00:05:28,810 --> 00:05:34,240
practices are already used by various

00:05:31,180 --> 00:05:35,950
projects we all once we identify

00:05:34,240 --> 00:05:37,390
criteria we created a simple web

00:05:35,950 --> 00:05:40,900
application we're open source software

00:05:37,390 --> 00:05:42,760
projects can self-certified and if an

00:05:40,900 --> 00:05:45,130
open-source software project meets those

00:05:42,760 --> 00:05:47,950
criteria they get a batch and their days

00:05:45,130 --> 00:05:50,020
of saul certifications that scales now

00:05:47,950 --> 00:05:51,880
our problems will self certification I

00:05:50,020 --> 00:05:54,130
think many of you are aware and so we

00:05:51,880 --> 00:05:56,410
work to counter those for example

00:05:54,130 --> 00:05:58,390
there's automation that goes out and

00:05:56,410 --> 00:06:00,130
looks at the project and for example if

00:05:58,390 --> 00:06:02,020
we can determine well you may say that

00:06:00,130 --> 00:06:05,169
this is true but it's not we don't care

00:06:02,020 --> 00:06:07,660
if the human says it it you have to

00:06:05,169 --> 00:06:09,040
actually make that true we also require

00:06:07,660 --> 00:06:11,830
a public display of the answer

00:06:09,040 --> 00:06:16,510
and enables criticism whether or not

00:06:11,830 --> 00:06:18,400
those are actually true whenever you

00:06:16,510 --> 00:06:20,380
create some sort of criteria you need to

00:06:18,400 --> 00:06:23,020
come up with some sort of grading

00:06:20,380 --> 00:06:24,760
criteria some scoring system here's the

00:06:23,020 --> 00:06:27,010
scoring system that we use we have three

00:06:24,760 --> 00:06:29,590
different kinds of criteria must

00:06:27,010 --> 00:06:31,930
shouldn't suggested most of them are

00:06:29,590 --> 00:06:34,750
must or must not criteria and they must

00:06:31,930 --> 00:06:37,380
be met should criteria can be met or

00:06:34,750 --> 00:06:41,350
possibly unmet with justifications and

00:06:37,380 --> 00:06:43,270
suggested they can be matter on net at

00:06:41,350 --> 00:06:45,550
that's what we are fundamentally

00:06:43,270 --> 00:06:47,290
depending on psychology because most

00:06:45,550 --> 00:06:49,270
people don't like admitting when they

00:06:47,290 --> 00:06:52,390
don't do something that they admit they

00:06:49,270 --> 00:06:55,240
should be doing this I believe this is

00:06:52,390 --> 00:06:56,920
actually effective in some cases we do

00:06:55,240 --> 00:06:58,540
require you well we're in the

00:06:56,920 --> 00:07:01,330
justification to point to specific

00:06:58,540 --> 00:07:03,190
evidence currently we only have one

00:07:01,330 --> 00:07:06,610
level we do eventually hope to have

00:07:03,190 --> 00:07:09,580
multiple levels of badges but right now

00:07:06,610 --> 00:07:13,120
we're working just on a basic level what

00:07:09,580 --> 00:07:15,640
we call passing level that attempts to

00:07:13,120 --> 00:07:18,220
capture what well-run projects typically

00:07:15,640 --> 00:07:19,870
already do and this is important to

00:07:18,220 --> 00:07:22,810
understand the level we're focusing on

00:07:19,870 --> 00:07:25,720
us what do most projects currently do

00:07:22,810 --> 00:07:27,520
for each of those criteria not what

00:07:25,720 --> 00:07:28,990
should they do but millen actually does

00:07:27,520 --> 00:07:31,990
that we're not interested in those

00:07:28,990 --> 00:07:34,180
criteria the some sort of magical ideal

00:07:31,990 --> 00:07:36,220
and we're interested in what projects

00:07:34,180 --> 00:07:39,520
actually demonstrate is a doable thing

00:07:36,220 --> 00:07:43,630
and and we intend to update these

00:07:39,520 --> 00:07:45,970
criteria analy whenever you talk about

00:07:43,630 --> 00:07:47,890
cartoons probably useful to show some

00:07:45,970 --> 00:07:51,280
examples what do these criterion look

00:07:47,890 --> 00:07:53,050
like here's just a few and so hopefully

00:07:51,280 --> 00:07:55,750
we'll give you a flavor of what this

00:07:53,050 --> 00:07:58,720
looks like basics for example the

00:07:55,750 --> 00:08:00,640
software must be released as false these

00:07:58,720 --> 00:08:03,190
are criteria for open source software it

00:08:00,640 --> 00:08:05,620
makes no sense it's not actually open

00:08:03,190 --> 00:08:08,500
source software we suggest that it be

00:08:05,620 --> 00:08:10,180
licensed under the OSI there are some

00:08:08,500 --> 00:08:12,490
reasons some projects simply cannot

00:08:10,180 --> 00:08:15,850
change their licenses or choose a very

00:08:12,490 --> 00:08:17,350
unusual license however we do suggest we

00:08:15,850 --> 00:08:20,889
believe that there are advantages to

00:08:17,350 --> 00:08:23,889
using an OSI proof license

00:08:20,889 --> 00:08:27,340
change control project must have a

00:08:23,889 --> 00:08:29,770
version control source repository if you

00:08:27,340 --> 00:08:32,829
don't use software to control your

00:08:29,770 --> 00:08:34,240
software your versions your projects in

00:08:32,829 --> 00:08:37,510
a lot of trouble frankly it's very

00:08:34,240 --> 00:08:39,579
difficult for people to track keep to

00:08:37,510 --> 00:08:43,990
determine what's going on and therefore

00:08:39,579 --> 00:08:46,660
that isn't a must underreporting one of

00:08:43,990 --> 00:08:49,600
the musts is you must tell people how to

00:08:46,660 --> 00:08:51,670
report vulnerabilities this turns out to

00:08:49,600 --> 00:08:54,550
be an upper a problem for a surprisingly

00:08:51,670 --> 00:08:57,910
large number projects many projects have

00:08:54,550 --> 00:09:01,269
only public ways of reporting

00:08:57,910 --> 00:09:03,640
vulnerabilities but when I feel poor

00:09:01,269 --> 00:09:05,470
ting problems of any kind if I find a

00:09:03,640 --> 00:09:07,660
vulnerability in your software should I

00:09:05,470 --> 00:09:09,970
report it that way it's okay if you do

00:09:07,660 --> 00:09:11,560
but you need to make it clear most

00:09:09,970 --> 00:09:13,120
projects choose to have private

00:09:11,560 --> 00:09:15,610
reporting of vulnerabilities I

00:09:13,120 --> 00:09:18,640
personally prefer that myself but

00:09:15,610 --> 00:09:21,100
regardless of that please make it clear

00:09:18,640 --> 00:09:24,430
what you want people to do otherwise

00:09:21,100 --> 00:09:26,320
when the vulnerability is found there it

00:09:24,430 --> 00:09:28,089
needs to be first discussion about how

00:09:26,320 --> 00:09:30,850
to report a vulnerability that's the

00:09:28,089 --> 00:09:32,470
wrong time to have that discussion the

00:09:30,850 --> 00:09:36,360
project needs to determine ahead of time

00:09:32,470 --> 00:09:39,130
how to handle vulnerability reports

00:09:36,360 --> 00:09:41,860
unsurprisingly we wish to have projects

00:09:39,130 --> 00:09:45,430
with quality project with poor quality

00:09:41,860 --> 00:09:47,620
are unlikely to have good security so if

00:09:45,430 --> 00:09:50,019
the project requires building for use

00:09:47,620 --> 00:09:52,449
there must be working build system you

00:09:50,019 --> 00:09:54,630
can't possibly test it or use it or make

00:09:52,449 --> 00:09:57,010
improvements to it easily without that

00:09:54,630 --> 00:09:59,980
it has it must have at least one

00:09:57,010 --> 00:10:01,750
automated test suite if you don't have

00:09:59,980 --> 00:10:04,149
an automated test suite again you are

00:10:01,750 --> 00:10:06,190
unlikely produced called a product you

00:10:04,149 --> 00:10:07,570
are unlikely be able to make significant

00:10:06,190 --> 00:10:10,779
changes because you won't know if those

00:10:07,570 --> 00:10:12,850
changes broke your software must have a

00:10:10,779 --> 00:10:15,730
general policy that as you improve it

00:10:12,850 --> 00:10:17,980
you'll add tests we actually don't have

00:10:15,730 --> 00:10:19,990
a coverage requirement because how much

00:10:17,980 --> 00:10:22,300
testing is good enough that turns out to

00:10:19,990 --> 00:10:24,399
be difficult to answer we can talk later

00:10:22,300 --> 00:10:28,300
about for example the limits for folks

00:10:24,399 --> 00:10:30,850
have difficulty because many people do

00:10:28,300 --> 00:10:34,120
not have the hardware needed to test the

00:10:30,850 --> 00:10:34,750
software okay but you can certainly at

00:10:34,120 --> 00:10:36,610
least

00:10:34,750 --> 00:10:39,060
I've to do better as you improve your

00:10:36,610 --> 00:10:41,800
software make your tests offer better

00:10:39,060 --> 00:10:45,340
there must be some warning flags to warn

00:10:41,800 --> 00:10:48,720
you of common problems since this

00:10:45,340 --> 00:10:48,720

YouTube URL: https://www.youtube.com/watch?v=9pmeGBoTDiU


