Title: Enhanced software dependency management with FASTEN
Publication date: 2021-06-30
Playlist: OW2con'21
Description: 
	I will present how FASTEN project aim at giving more accurate dependencies insight by bringing evolution to the existing dependencies managers (such as Maven, Pip, etc.) by leveraging functions call graphs done across the whole ecosystem (e.g. Maven Central). You will learn how it can reduce false positives in reports that are recommending dependencies updates or detect issue at built time rather than at runtime. So if you are overwhelmed by constant notifications related to dependency upgrades, deprecation, etc. join me to find a solution!
Captions: 
	00:00:00,000 --> 00:00:03,050
[Music]

00:00:05,650 --> 00:00:11,970
[Music]

00:00:13,360 --> 00:00:16,000
hi everyone

00:00:14,160 --> 00:00:18,880
and thank you for joining me for this

00:00:16,000 --> 00:00:20,880
presentation of the fasten project

00:00:18,880 --> 00:00:23,439
and i will try to give you an overview

00:00:20,880 --> 00:00:26,080
of what is the project about

00:00:23,439 --> 00:00:27,840
and explain how we try to improve the

00:00:26,080 --> 00:00:30,720
dependency management

00:00:27,840 --> 00:00:31,359
by increasing the accuracy of package

00:00:30,720 --> 00:00:36,160
manager

00:00:31,359 --> 00:00:39,200
reports i'm anton motier ow to cto

00:00:36,160 --> 00:00:42,239
and i will in this presentation

00:00:39,200 --> 00:00:45,520
first start with the current situation

00:00:42,239 --> 00:00:48,960
of dependency management what tools

00:00:45,520 --> 00:00:50,879
we have what are their limitation and

00:00:48,960 --> 00:00:52,960
present the fasten project what is the

00:00:50,879 --> 00:00:55,520
idea behind the pheasant project and

00:00:52,960 --> 00:00:57,520
how it try to improve the current

00:00:55,520 --> 00:00:59,680
situation

00:00:57,520 --> 00:01:01,120
but also i will try to speak in a few

00:00:59,680 --> 00:01:04,239
words about the

00:01:01,120 --> 00:01:05,519
limitations that remain even after this

00:01:04,239 --> 00:01:08,479
improvement brings back

00:01:05,519 --> 00:01:09,600
the fascent project but first let me

00:01:08,479 --> 00:01:12,159
start with the

00:01:09,600 --> 00:01:13,119
the teams behind this project so

00:01:12,159 --> 00:01:16,080
actually

00:01:13,119 --> 00:01:18,560
we have a good mix of different

00:01:16,080 --> 00:01:20,479
contributors to the project

00:01:18,560 --> 00:01:22,720
we have some companies we have

00:01:20,479 --> 00:01:23,439
universities and we have non-profit

00:01:22,720 --> 00:01:27,840
organizing

00:01:23,439 --> 00:01:30,880
organization such as aw2

00:01:27,840 --> 00:01:32,000
all the all those uh participants

00:01:30,880 --> 00:01:35,600
collaborate to

00:01:32,000 --> 00:01:35,600
the development of the project

00:01:35,680 --> 00:01:41,040
so what is the current situation so

00:01:38,880 --> 00:01:43,200
now we when you do software development

00:01:41,040 --> 00:01:45,520
when you create a new piece of software

00:01:43,200 --> 00:01:46,880
uh you never create it from scratch

00:01:45,520 --> 00:01:49,280
you're always reusing

00:01:46,880 --> 00:01:51,119
pre-existing component it can be

00:01:49,280 --> 00:01:53,520
something low-level such as the

00:01:51,119 --> 00:01:56,159
some feature of the operating system

00:01:53,520 --> 00:01:59,920
like for example the file system

00:01:56,159 --> 00:02:02,000
it can be some features some libraries

00:01:59,920 --> 00:02:04,240
coming with the programming language you

00:02:02,000 --> 00:02:07,439
are using the standard library

00:02:04,240 --> 00:02:10,479
for example you will not implement again

00:02:07,439 --> 00:02:14,640
some sorting algorithm usually you're

00:02:10,479 --> 00:02:16,879
using pre-existent implementation

00:02:14,640 --> 00:02:18,959
and also more and more you are using

00:02:16,879 --> 00:02:22,480
third-party libraries

00:02:18,959 --> 00:02:24,959
and those libraries actually

00:02:22,480 --> 00:02:25,920
themselves have dependencies on other

00:02:24,959 --> 00:02:28,640
libraries

00:02:25,920 --> 00:02:29,040
so you end up with this kind of graphs

00:02:28,640 --> 00:02:31,599
where

00:02:29,040 --> 00:02:33,120
your code have a set of direct

00:02:31,599 --> 00:02:35,760
dependencies

00:02:33,120 --> 00:02:37,280
and those dependencies will have again

00:02:35,760 --> 00:02:39,120
other dependencies so

00:02:37,280 --> 00:02:40,720
we'll have what we call transitive

00:02:39,120 --> 00:02:43,440
dependencies

00:02:40,720 --> 00:02:44,239
for example here in our example the

00:02:43,440 --> 00:02:47,280
dependency

00:02:44,239 --> 00:02:50,000
ta here is transitive dependency

00:02:47,280 --> 00:02:50,800
and you can see some specific situation

00:02:50,000 --> 00:02:53,840
where you can

00:02:50,800 --> 00:02:57,200
directly depend on specific

00:02:53,840 --> 00:03:00,319
dependencies but also another few

00:02:57,200 --> 00:03:03,280
dependencies depend on the same library

00:03:00,319 --> 00:03:04,879
and in such situation it might get you

00:03:03,280 --> 00:03:07,440
into some trouble because

00:03:04,879 --> 00:03:08,400
you might require version one of the

00:03:07,440 --> 00:03:11,840
library

00:03:08,400 --> 00:03:15,120
but your dependency b might require this

00:03:11,840 --> 00:03:18,480
version two of the library z here

00:03:15,120 --> 00:03:20,239
and so you need to sort it out you need

00:03:18,480 --> 00:03:22,800
to pick only one version

00:03:20,239 --> 00:03:25,280
for example in java you can only load

00:03:22,800 --> 00:03:28,640
one version in one given class loader so

00:03:25,280 --> 00:03:32,640
there is some um decision to be made

00:03:28,640 --> 00:03:36,159
when we have such conflict

00:03:32,640 --> 00:03:37,840
and to help you with that you have a lot

00:03:36,159 --> 00:03:41,120
of toolings available

00:03:37,840 --> 00:03:44,319
and usually it's specific bar languages

00:03:41,120 --> 00:03:46,480
so for example in java world the

00:03:44,319 --> 00:03:48,080
currently probably most popular tooling

00:03:46,480 --> 00:03:50,000
it can help you with dealing with

00:03:48,080 --> 00:03:53,920
dependencies maven

00:03:50,000 --> 00:03:56,720
and so these tools will

00:03:53,920 --> 00:03:57,280
deal with the conflict i exposed in the

00:03:56,720 --> 00:04:00,319
previous

00:03:57,280 --> 00:04:01,599
slides but it also provides some central

00:04:00,319 --> 00:04:04,720
repositories

00:04:01,599 --> 00:04:06,959
where it store and organize all

00:04:04,720 --> 00:04:08,000
public dependencies usually open source

00:04:06,959 --> 00:04:10,560
libraries

00:04:08,000 --> 00:04:12,159
and so it take care of you for you of

00:04:10,560 --> 00:04:15,200
downloading the libraries

00:04:12,159 --> 00:04:17,600
and get them locally on your developer

00:04:15,200 --> 00:04:21,440
environment or on your continuous

00:04:17,600 --> 00:04:24,880
integration you have similar tools

00:04:21,440 --> 00:04:28,000
uh with python you have

00:04:24,880 --> 00:04:29,759
you have pip

00:04:28,000 --> 00:04:31,199
the c programming language it's a little

00:04:29,759 --> 00:04:33,680
bit specific but

00:04:31,199 --> 00:04:34,800
we we can say that the debian repository

00:04:33,680 --> 00:04:37,360
for example

00:04:34,800 --> 00:04:38,800
is a kind of central repositories and

00:04:37,360 --> 00:04:42,479
you have tools like

00:04:38,800 --> 00:04:43,199
uh apt that will do the dependency

00:04:42,479 --> 00:04:46,720
config

00:04:43,199 --> 00:04:49,280
resolution so you have

00:04:46,720 --> 00:04:49,759
all those tools that's really helped you

00:04:49,280 --> 00:04:52,240
to

00:04:49,759 --> 00:04:54,160
get your dependency and build the

00:04:52,240 --> 00:04:57,919
software

00:04:54,160 --> 00:05:01,120
but this doesn't prevent you from

00:04:57,919 --> 00:05:02,560
having this huge complexity um your

00:05:01,120 --> 00:05:06,000
software

00:05:02,560 --> 00:05:08,080
due to transitive dependency will have

00:05:06,000 --> 00:05:09,520
more and more increasing numbers of

00:05:08,080 --> 00:05:12,639
dependency

00:05:09,520 --> 00:05:14,800
and also on the central server of this

00:05:12,639 --> 00:05:16,000
package manager solution like on maven

00:05:14,800 --> 00:05:18,880
central for example

00:05:16,000 --> 00:05:19,759
you have huge ecosystem of libraries and

00:05:18,880 --> 00:05:22,240
you don't really have

00:05:19,759 --> 00:05:23,440
control over them it's only third-party

00:05:22,240 --> 00:05:26,479
development

00:05:23,440 --> 00:05:27,680
and it raised some issue regarding

00:05:26,479 --> 00:05:31,280
qualities

00:05:27,680 --> 00:05:32,320
for example what will happen if someone

00:05:31,280 --> 00:05:35,039
decided to remove

00:05:32,320 --> 00:05:37,039
the library previously published in a

00:05:35,039 --> 00:05:39,600
central repositories

00:05:37,039 --> 00:05:41,039
and if you rely on this library being

00:05:39,600 --> 00:05:43,280
available there

00:05:41,039 --> 00:05:45,199
it will break your build so if you are

00:05:43,280 --> 00:05:48,960
in a continuous development

00:05:45,199 --> 00:05:51,199
uh approach you might no longer be able

00:05:48,960 --> 00:05:54,479
to to deploy

00:05:51,199 --> 00:05:57,199
and also of course your at this

00:05:54,479 --> 00:06:00,160
dependency on the quality

00:05:57,199 --> 00:06:00,720
um i mean the quality of dependency will

00:06:00,160 --> 00:06:03,280
impact

00:06:00,720 --> 00:06:05,199
your application the quality the overall

00:06:03,280 --> 00:06:07,759
quality of your application

00:06:05,199 --> 00:06:09,440
but usually you carefully select your

00:06:07,759 --> 00:06:11,919
direct dependencies

00:06:09,440 --> 00:06:13,759
but you don't really look into

00:06:11,919 --> 00:06:17,039
transitive dependency because it's

00:06:13,759 --> 00:06:17,600
too much time consuming so maybe there

00:06:17,039 --> 00:06:19,600
is this

00:06:17,600 --> 00:06:20,720
security issue in one of the transitive

00:06:19,600 --> 00:06:24,800
dependency

00:06:20,720 --> 00:06:24,800
and it will impact your code

00:06:26,000 --> 00:06:33,120
so due to this huge graphs of dependency

00:06:30,319 --> 00:06:34,479
it's difficult to do manually search an

00:06:33,120 --> 00:06:37,440
assessment of quality

00:06:34,479 --> 00:06:39,199
for each library so nowadays you have

00:06:37,440 --> 00:06:42,160
tools that help you with that

00:06:39,199 --> 00:06:44,000
for example you have database of

00:06:42,160 --> 00:06:47,440
security venerabilities

00:06:44,000 --> 00:06:48,160
such as cve you have automated tools

00:06:47,440 --> 00:06:51,759
such as

00:06:48,160 --> 00:06:54,479
dependent buds that can scan your

00:06:51,759 --> 00:06:56,319
software manifesto and check that your

00:06:54,479 --> 00:06:57,120
dependency the version of dependency you

00:06:56,319 --> 00:06:59,840
are using

00:06:57,120 --> 00:07:00,240
doesn't include security vulnerabilities

00:06:59,840 --> 00:07:03,440
and

00:07:00,240 --> 00:07:06,639
they can even automate and working in

00:07:03,440 --> 00:07:10,160
collaboration with ci to suggest

00:07:06,639 --> 00:07:10,160
updating the library

00:07:10,639 --> 00:07:18,880
but all these tools

00:07:15,120 --> 00:07:23,280
have some important limitation because

00:07:18,880 --> 00:07:26,800
they work at um package level

00:07:23,280 --> 00:07:29,039
so maybe if you are this

00:07:26,800 --> 00:07:30,080
big library with a lot of feature you're

00:07:29,039 --> 00:07:34,479
only using as a

00:07:30,080 --> 00:07:37,599
part of the library so maybe in case of

00:07:34,479 --> 00:07:39,840
a security issue on the library

00:07:37,599 --> 00:07:40,800
it might not impact you because you're

00:07:39,840 --> 00:07:44,319
only using

00:07:40,800 --> 00:07:47,680
as a part of the library

00:07:44,319 --> 00:07:48,960
so you don't need to update even if the

00:07:47,680 --> 00:07:50,479
tools tell you that

00:07:48,960 --> 00:07:52,960
you should update because there is a

00:07:50,479 --> 00:07:55,759
security vulnerability for example

00:07:52,960 --> 00:07:56,960
um you probably don't need to update if

00:07:55,759 --> 00:08:00,960
you are not using this

00:07:56,960 --> 00:08:04,000
specific part so the tools really

00:08:00,960 --> 00:08:06,319
lack this accuracy and leading to false

00:08:04,000 --> 00:08:09,599
positive

00:08:06,319 --> 00:08:10,080
and even new tool like for example the

00:08:09,599 --> 00:08:13,440
res

00:08:10,080 --> 00:08:16,000
recent open source inside from google

00:08:13,440 --> 00:08:16,879
they only work at package level most of

00:08:16,000 --> 00:08:20,080
them

00:08:16,879 --> 00:08:23,680
so you you don't get this accuracy so

00:08:20,080 --> 00:08:26,879
you have reports about that includes

00:08:23,680 --> 00:08:29,520
false positive and this is really where

00:08:26,879 --> 00:08:31,759
fasten aim to provide a better

00:08:29,520 --> 00:08:35,279
alternative

00:08:31,759 --> 00:08:39,360
by bringing this accuracy to reports

00:08:35,279 --> 00:08:42,080
so you will provide reports on various

00:08:39,360 --> 00:08:43,760
aspects of the code so as i said

00:08:42,080 --> 00:08:47,440
security vulnerability but

00:08:43,760 --> 00:08:49,760
also license compliance code quality

00:08:47,440 --> 00:08:52,880
also

00:08:49,760 --> 00:08:56,480
to give you a more precise

00:08:52,880 --> 00:08:57,200
report so how it does that actually you

00:08:56,480 --> 00:09:00,240
can see here

00:08:57,200 --> 00:09:01,120
above on top what are the approach of

00:09:00,240 --> 00:09:05,519
dependency

00:09:01,120 --> 00:09:08,480
manager and what are the current

00:09:05,519 --> 00:09:09,200
what the current tools are doing the

00:09:08,480 --> 00:09:11,600
view

00:09:09,200 --> 00:09:13,519
libraries at package level and to see

00:09:11,600 --> 00:09:16,480
the dependencies between the various

00:09:13,519 --> 00:09:18,880
library and the different version

00:09:16,480 --> 00:09:19,760
but fasten will actually go deeper it

00:09:18,880 --> 00:09:23,760
will look

00:09:19,760 --> 00:09:26,800
inside your code your application code

00:09:23,760 --> 00:09:27,279
to see that function called so it will

00:09:26,800 --> 00:09:31,760
build

00:09:27,279 --> 00:09:34,800
this call graph and it will do the same

00:09:31,760 --> 00:09:36,000
for your dependencies and dependencies

00:09:34,800 --> 00:09:38,800
of dependencies and

00:09:36,000 --> 00:09:40,720
so on so it'll give you a very accurate

00:09:38,800 --> 00:09:44,560
view

00:09:40,720 --> 00:09:47,920
the world call graph of your application

00:09:44,560 --> 00:09:48,480
so for example if there is a security

00:09:47,920 --> 00:09:51,200
issue

00:09:48,480 --> 00:09:53,600
in an unused function here for example

00:09:51,200 --> 00:09:56,720
in library two

00:09:53,600 --> 00:09:58,000
it will not tell you to update and when

00:09:56,720 --> 00:10:00,160
i say it will not

00:09:58,000 --> 00:10:01,360
tell you to update we'll see later we

00:10:00,160 --> 00:10:04,800
have integration in

00:10:01,360 --> 00:10:06,720
package manager with fasten

00:10:04,800 --> 00:10:09,760
so it's actually the package manager

00:10:06,720 --> 00:10:12,399
that will report you that

00:10:09,760 --> 00:10:13,760
but if the issue is actually on one of

00:10:12,399 --> 00:10:17,680
the

00:10:13,760 --> 00:10:18,880
function method called in this case of

00:10:17,680 --> 00:10:21,839
course it will warn you

00:10:18,880 --> 00:10:23,760
and provide guidance with the required

00:10:21,839 --> 00:10:25,760
update

00:10:23,760 --> 00:10:28,000
but generating the code graph is

00:10:25,760 --> 00:10:31,360
actually only the first step

00:10:28,000 --> 00:10:34,399
in the processing of the application

00:10:31,360 --> 00:10:35,360
library codes by person actually owns

00:10:34,399 --> 00:10:36,640
the call graph

00:10:35,360 --> 00:10:39,600
of the application on all these

00:10:36,640 --> 00:10:42,160
dependencies is generated

00:10:39,600 --> 00:10:42,880
fasten will need to enrich this call

00:10:42,160 --> 00:10:46,760
graph

00:10:42,880 --> 00:10:48,000
with extra method data such as a

00:10:46,760 --> 00:10:51,519
non-vulnerability

00:10:48,000 --> 00:10:55,040
on each individual function

00:10:51,519 --> 00:10:58,240
and also licensing information

00:10:55,040 --> 00:11:01,279
quality metrics for the code

00:10:58,240 --> 00:11:04,560
and so on so this is really

00:11:01,279 --> 00:11:07,360
uh a very important step

00:11:04,560 --> 00:11:08,160
of fasten once you got the call graph it

00:11:07,360 --> 00:11:11,040
enrich

00:11:08,160 --> 00:11:12,640
the call graph with a bunch of meta data

00:11:11,040 --> 00:11:15,680
so this is an overview of the

00:11:12,640 --> 00:11:18,880
architecture of fasten

00:11:15,680 --> 00:11:20,880
so as i said fasten will generate the

00:11:18,880 --> 00:11:24,000
the call graph

00:11:20,880 --> 00:11:27,760
for that you will use the binary version

00:11:24,000 --> 00:11:29,760
available in public central depositories

00:11:27,760 --> 00:11:31,040
binary version of the library publicly

00:11:29,760 --> 00:11:33,600
available

00:11:31,040 --> 00:11:34,640
but it will actually to have more

00:11:33,600 --> 00:11:37,680
accurate call graph

00:11:34,640 --> 00:11:39,120
also use the source code and mix the

00:11:37,680 --> 00:11:41,680
code graph

00:11:39,120 --> 00:11:42,880
generated from static code analysis and

00:11:41,680 --> 00:11:45,440
dynamic codeline

00:11:42,880 --> 00:11:48,959
analysis together to have the most

00:11:45,440 --> 00:11:52,880
accurate call graph possible

00:11:48,959 --> 00:11:55,360
and it will also do this processing

00:11:52,880 --> 00:11:56,000
of external source of information such

00:11:55,360 --> 00:11:59,440
as

00:11:56,000 --> 00:12:00,399
a cv to get the security vulnerability

00:11:59,440 --> 00:12:04,240
information and

00:12:00,399 --> 00:12:09,200
associate them with specific code lines

00:12:04,240 --> 00:12:12,560
and then function in the call graph

00:12:09,200 --> 00:12:15,760
and it will also analyze the source code

00:12:12,560 --> 00:12:19,279
to find out about license for example to

00:12:15,760 --> 00:12:22,639
do some quality metrics and all that

00:12:19,279 --> 00:12:25,760
will be stored uh fasten actually use

00:12:22,639 --> 00:12:29,040
two different storage one

00:12:25,760 --> 00:12:32,720
for the call graph it's a graph database

00:12:29,040 --> 00:12:36,160
and one for the metadata it's a classic

00:12:32,720 --> 00:12:38,240
sql database

00:12:36,160 --> 00:12:40,959
with graph database here because as you

00:12:38,240 --> 00:12:43,360
can imagine the volume of data is

00:12:40,959 --> 00:12:46,079
quite large because we're scanning with

00:12:43,360 --> 00:12:48,240
the whole ecosystem

00:12:46,079 --> 00:12:50,079
so on evan central you can imagine there

00:12:48,240 --> 00:12:52,480
is quite a few libraries now

00:12:50,079 --> 00:12:54,240
and with all the the method of each

00:12:52,480 --> 00:12:56,639
library for each version

00:12:54,240 --> 00:12:59,120
so the volume of data is quite uh

00:12:56,639 --> 00:13:01,680
important

00:12:59,120 --> 00:13:02,320
then from the developers perspective how

00:13:01,680 --> 00:13:06,079
it

00:13:02,320 --> 00:13:08,880
will work interact with uh fasten

00:13:06,079 --> 00:13:09,519
actually most of it will happen through

00:13:08,880 --> 00:13:12,880
already

00:13:09,519 --> 00:13:16,880
existing dependency manager tools

00:13:12,880 --> 00:13:20,240
such as maven or pip they will

00:13:16,880 --> 00:13:22,160
query fasten to get the information

00:13:20,240 --> 00:13:23,600
the call graph already generated for the

00:13:22,160 --> 00:13:26,079
dependencies

00:13:23,600 --> 00:13:26,800
also part of the call graph generation

00:13:26,079 --> 00:13:29,680
will happen

00:13:26,800 --> 00:13:30,079
locally where the dependency manager

00:13:29,680 --> 00:13:32,639
tool

00:13:30,079 --> 00:13:34,240
is running this is for the code of the

00:13:32,639 --> 00:13:36,320
application that is not yet

00:13:34,240 --> 00:13:37,440
published of course because it's under

00:13:36,320 --> 00:13:40,079
development so

00:13:37,440 --> 00:13:41,040
this analysis square graph generation

00:13:40,079 --> 00:13:44,320
will be done

00:13:41,040 --> 00:13:47,199
locally and will be merged with

00:13:44,320 --> 00:13:48,399
the available call graph from the fasten

00:13:47,199 --> 00:13:51,440
server

00:13:48,399 --> 00:13:54,160
and then the resolution

00:13:51,440 --> 00:13:56,000
to find out if a specific for example

00:13:54,160 --> 00:13:59,040
vulnerab function is called

00:13:56,000 --> 00:14:01,440
is performed locally and

00:13:59,040 --> 00:14:03,279
based on the result this is reported to

00:14:01,440 --> 00:14:06,079
the users maybe it will

00:14:03,279 --> 00:14:08,160
make the build failed if there is a

00:14:06,079 --> 00:14:11,839
dependency that is called

00:14:08,160 --> 00:14:11,839
with a security vulnerability

00:14:12,079 --> 00:14:16,000
but if the vulnerability exists in a

00:14:14,800 --> 00:14:19,519
piece of code that is not

00:14:16,000 --> 00:14:21,680
called and the build will be successful

00:14:19,519 --> 00:14:23,839
so this work of course for the developer

00:14:21,680 --> 00:14:26,399
but most of the time also it will be

00:14:23,839 --> 00:14:27,839
really useful when the build is running

00:14:26,399 --> 00:14:31,839
with the continuous

00:14:27,839 --> 00:14:31,839
continuous integration server

00:14:31,920 --> 00:14:36,160
so that was a very brief overview of the

00:14:34,560 --> 00:14:38,800
fasten project

00:14:36,160 --> 00:14:39,279
i guess you might have some questions so

00:14:38,800 --> 00:14:42,399
don't

00:14:39,279 --> 00:14:45,120
hesitate to ask me in the chat or

00:14:42,399 --> 00:14:46,639
visit the fasten website of course i

00:14:45,120 --> 00:14:50,160
didn't mention it but

00:14:46,639 --> 00:14:53,120
uh fasten is an open source project so

00:14:50,160 --> 00:14:54,320
any contribution uh testing is more than

00:14:53,120 --> 00:14:57,600
welcome

00:14:54,320 --> 00:14:58,639
and this project is actually receiving

00:14:57,600 --> 00:15:01,680
funding from

00:14:58,639 --> 00:15:03,040
the european union as part of horizon

00:15:01,680 --> 00:15:06,480
00:15:03,040 --> 00:15:09,199
program so thank you all for your

00:15:06,480 --> 00:15:10,000
attention and don't hesitate to send me

00:15:09,199 --> 00:15:13,839
your question

00:15:10,000 --> 00:15:13,839

YouTube URL: https://www.youtube.com/watch?v=J4lrbU6Ulvg


