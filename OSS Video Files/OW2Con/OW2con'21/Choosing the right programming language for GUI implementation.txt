Title: Choosing the right programming language for GUI implementation
Publication date: 2021-06-28
Playlist: OW2con'21
Description: 
	Python, C / C ++, JavaScript or Java? What is the best language for your embedded GUI? Choosing the programming language to be used in your embedded GUI is a decision that depends on several factors. In general, you should look for languages ​​that developers are familiar with, in order to spend less time learning new technology. Also, the language must be suitable for the project objectives. High-level languages ​​- such as Python and JavaScript - tend to be easier to use and have more components available, which reduces time-to-market.. Low-level languages ​​- like C - require a little more work related to memory. However, it ensures high performance. Some intermediate languages ​​like C#, Java and Kotlin also bring frameworks that try to balance the best of both worlds: fast to development and low footprint and, therefore, high performance. In this session we will discuss use cases of GUI implementation for Linux Embedded and analyze the possibilities of languages ​​to be used. Main topics: - Pros and cons of the most used languages ​in GUI embedded development - Find out how to decide which language to use based in your project requirements - How new frameworks decrease development complexity while maintaining high performance and low footprint
Captions: 
	00:00:03,560 --> 00:00:08,800
[Music]

00:00:13,519 --> 00:00:16,320
hello everyone thanks for coming to our

00:00:15,200 --> 00:00:18,800
presentation

00:00:16,320 --> 00:00:20,400
my name is fabio i'm from total cross

00:00:18,800 --> 00:00:23,279
and i'm here to talk

00:00:20,400 --> 00:00:24,320
a little about what you consider when

00:00:23,279 --> 00:00:26,080
choosing

00:00:24,320 --> 00:00:27,760
your the right programming language for

00:00:26,080 --> 00:00:31,840
your next

00:00:27,760 --> 00:00:35,440
quiz project on linux embedded

00:00:31,840 --> 00:00:38,160
so when we think about uh we we project

00:00:35,440 --> 00:00:39,760
for embedded device we usually think of

00:00:38,160 --> 00:00:43,920
stuff like this

00:00:39,760 --> 00:00:45,440
uh simple applications that are not very

00:00:43,920 --> 00:00:48,719
attractive

00:00:45,440 --> 00:00:52,719
that just kind of gets the job done

00:00:48,719 --> 00:00:53,039
but uh as the the market grows and we

00:00:52,719 --> 00:00:56,239
have

00:00:53,039 --> 00:00:58,160
more people and more projects uh

00:00:56,239 --> 00:00:59,280
with implementations it's really

00:00:58,160 --> 00:01:02,640
important

00:00:59,280 --> 00:01:06,560
to really captivate the user

00:01:02,640 --> 00:01:10,640
uh it's it's especially important

00:01:06,560 --> 00:01:14,080
to bring back to to

00:01:10,640 --> 00:01:17,200
be able to gather all the experience

00:01:14,080 --> 00:01:20,640
the user has phone from

00:01:17,200 --> 00:01:22,080
his life from desktop applications and

00:01:20,640 --> 00:01:25,520
especially mobile

00:01:22,080 --> 00:01:26,080
applications since it's something so

00:01:25,520 --> 00:01:29,119
common

00:01:26,080 --> 00:01:31,759
in our lives to make

00:01:29,119 --> 00:01:32,479
our embedded applications easier to

00:01:31,759 --> 00:01:36,320
understand

00:01:32,479 --> 00:01:40,320
to learn to uh understand everything

00:01:36,320 --> 00:01:41,520
at a glance so instead of doing

00:01:40,320 --> 00:01:44,640
something like this

00:01:41,520 --> 00:01:48,799
we should try to make something uh

00:01:44,640 --> 00:01:48,799
more attractive like this

00:01:48,880 --> 00:01:53,520
or like this because at the end of the

00:01:51,920 --> 00:01:56,079
day the first impression

00:01:53,520 --> 00:01:56,880
uh you user will get from your

00:01:56,079 --> 00:02:00,719
application

00:01:56,880 --> 00:02:04,479
is uh comes from the the interface from

00:02:00,719 --> 00:02:05,439
your gui so uh you want to have

00:02:04,479 --> 00:02:09,840
something that

00:02:05,439 --> 00:02:12,879
your user can relate to can really uh

00:02:09,840 --> 00:02:17,680
get excited about using it

00:02:12,879 --> 00:02:17,680
to quickly understand what's going on uh

00:02:18,160 --> 00:02:21,520
from my personal experience i'm i'm not

00:02:20,560 --> 00:02:24,879
a doctor

00:02:21,520 --> 00:02:28,959
but uh recently i've been on a

00:02:24,879 --> 00:02:31,680
on a on a dentist and

00:02:28,959 --> 00:02:32,480
she was using a machine that frankly i

00:02:31,680 --> 00:02:36,000
don't know

00:02:32,480 --> 00:02:39,120
what it does but it had

00:02:36,000 --> 00:02:41,200
uh a screen and i could easily

00:02:39,120 --> 00:02:44,319
understand what was going on

00:02:41,200 --> 00:02:46,720
uh and so even as i was there laying on

00:02:44,319 --> 00:02:48,400
the chair with my mouth open i could

00:02:46,720 --> 00:02:52,160
look at the screen and see what was

00:02:48,400 --> 00:02:54,800
going on it was not something like this

00:02:52,160 --> 00:02:55,360
you know so that's the kind of thing you

00:02:54,800 --> 00:02:57,680
have to

00:02:55,360 --> 00:02:58,879
to to think especially when we're

00:02:57,680 --> 00:03:02,560
talking about

00:02:58,879 --> 00:03:05,680
uh really sensitive uh magic or

00:03:02,560 --> 00:03:06,560
industry related stuff so the user must

00:03:05,680 --> 00:03:08,800
be able to

00:03:06,560 --> 00:03:10,319
to to quickly understand everything at a

00:03:08,800 --> 00:03:13,440
glance and if i was

00:03:10,319 --> 00:03:14,080
able to do that uh on my position on the

00:03:13,440 --> 00:03:17,040
chair

00:03:14,080 --> 00:03:17,599
uh it was even easier for for her that

00:03:17,040 --> 00:03:20,800
was

00:03:17,599 --> 00:03:24,400
actually operating the machine so that's

00:03:20,800 --> 00:03:24,400
the kind of stuff you have to think

00:03:24,879 --> 00:03:29,040
and even they're thinking about uh more

00:03:28,159 --> 00:03:33,120
broad

00:03:29,040 --> 00:03:36,239
uh users more uh regular consumers

00:03:33,120 --> 00:03:39,040
uh having uh uh

00:03:36,239 --> 00:03:40,480
an easy to understand easy to use uh

00:03:39,040 --> 00:03:43,280
being able to cause uh

00:03:40,480 --> 00:03:44,480
a real good first impression uh can make

00:03:43,280 --> 00:03:47,519
all the difference

00:03:44,480 --> 00:03:48,959
even when choosing uh the kind of car

00:03:47,519 --> 00:03:51,840
you you want to drive

00:03:48,959 --> 00:03:54,400
so even when we're talking about uh a

00:03:51,840 --> 00:03:57,439
media center or something like that

00:03:54,400 --> 00:03:59,920
it may be even more important

00:03:57,439 --> 00:04:00,720
to be able to really captivate the user

00:03:59,920 --> 00:04:02,640
to show

00:04:00,720 --> 00:04:04,799
something that he won't get tired to

00:04:02,640 --> 00:04:05,920
look at every day when he's driving his

00:04:04,799 --> 00:04:09,840
car for example

00:04:05,920 --> 00:04:09,840
or when he's at at work

00:04:10,000 --> 00:04:15,840
so we have narrowed down to seven uh

00:04:13,120 --> 00:04:17,359
topics to consider when choosing the

00:04:15,840 --> 00:04:18,959
program right programming language for

00:04:17,359 --> 00:04:22,400
your next project

00:04:18,959 --> 00:04:24,320
so these seven topics are the time to

00:04:22,400 --> 00:04:27,120
develop

00:04:24,320 --> 00:04:29,360
developers cost and availability

00:04:27,120 --> 00:04:32,720
maintenance costs

00:04:29,360 --> 00:04:37,040
footprint a modern ui

00:04:32,720 --> 00:04:37,040
performance and language complexity

00:04:37,840 --> 00:04:44,720
so for for these topics we're going to

00:04:41,280 --> 00:04:47,360
to analyze four different

00:04:44,720 --> 00:04:48,080
languages uh it's important to note

00:04:47,360 --> 00:04:51,280
cells that

00:04:48,080 --> 00:04:53,199
that these languages uh are usually

00:04:51,280 --> 00:04:55,360
the the results are usually dependent on

00:04:53,199 --> 00:04:58,479
the type of framework attribute

00:04:55,360 --> 00:05:01,600
your gui and these topics are rated

00:04:58,479 --> 00:05:05,360
from one to five where

00:05:01,600 --> 00:05:05,680
one is a bad score so let's take a look

00:05:05,360 --> 00:05:10,000
at

00:05:05,680 --> 00:05:13,280
each language individually and see

00:05:10,000 --> 00:05:17,199
their strong and weakest suits

00:05:13,280 --> 00:05:20,479
so let's start with cc plus plus uh it's

00:05:17,199 --> 00:05:24,320
uh easily the most used language

00:05:20,479 --> 00:05:27,520
when we think about embedded uh embedded

00:05:24,320 --> 00:05:30,320
applications and some of the

00:05:27,520 --> 00:05:31,440
most used tools are the best available

00:05:30,320 --> 00:05:35,039
tools around

00:05:31,440 --> 00:05:38,400
are qt and lvgl so

00:05:35,039 --> 00:05:42,320
this these evaluation is based

00:05:38,400 --> 00:05:45,680
on these these frameworks

00:05:42,320 --> 00:05:48,720
as you can see we have a a

00:05:45,680 --> 00:05:50,800
really really low rating

00:05:48,720 --> 00:05:52,000
for language complexity time to

00:05:50,800 --> 00:05:54,240
developer developers

00:05:52,000 --> 00:05:56,560
cost and availability and maintenance

00:05:54,240 --> 00:05:59,600
costs because cc plus plus

00:05:56,560 --> 00:06:00,639
uh is a language that uh requires more

00:05:59,600 --> 00:06:04,080
effort

00:06:00,639 --> 00:06:07,440
more time to develop stuff

00:06:04,080 --> 00:06:10,880
like uh memory leaks and

00:06:07,440 --> 00:06:14,080
and and security uh issues

00:06:10,880 --> 00:06:17,120
are more are more common

00:06:14,080 --> 00:06:20,319
uh are easier to to to run to

00:06:17,120 --> 00:06:24,000
usually you want developers with

00:06:20,319 --> 00:06:27,120
uh more experienced developers

00:06:24,000 --> 00:06:30,720
that are harder to get by and and

00:06:27,120 --> 00:06:32,880
usually more costly considering these qt

00:06:30,720 --> 00:06:36,160
and the vgl

00:06:32,880 --> 00:06:39,520
we are able to to deliver modern uis

00:06:36,160 --> 00:06:42,400
uh this rating is more about the the the

00:06:39,520 --> 00:06:42,800
how easy it is to make a modern ui for

00:06:42,400 --> 00:06:46,160
this

00:06:42,800 --> 00:06:49,919
uh using this language so uh

00:06:46,160 --> 00:06:53,039
it's okay it's not not something

00:06:49,919 --> 00:06:56,479
uh that complicated that far fetch it

00:06:53,039 --> 00:06:57,360
uh and what you're getting from cc plus

00:06:56,479 --> 00:07:00,240
plus

00:06:57,360 --> 00:07:00,960
is performance and footprint so

00:07:00,240 --> 00:07:05,039
basically

00:07:00,960 --> 00:07:05,039
you won't get any better than that

00:07:06,160 --> 00:07:08,880
so now we're going to at the other end

00:07:07,759 --> 00:07:10,000
of the spectrum and talk about

00:07:08,880 --> 00:07:13,199
javascript

00:07:10,000 --> 00:07:16,560
uh the javascript has been getting uh

00:07:13,199 --> 00:07:17,680
a lot more traction uh in the embedded

00:07:16,560 --> 00:07:21,680
market

00:07:17,680 --> 00:07:25,039
because of the uh how easy it is to

00:07:21,680 --> 00:07:28,319
start a new project and to get a real

00:07:25,039 --> 00:07:29,440
uh re-attractive results with a modern

00:07:28,319 --> 00:07:33,039
ui

00:07:29,440 --> 00:07:36,560
especially because of

00:07:33,039 --> 00:07:39,120
frameworks like node-red and electron js

00:07:36,560 --> 00:07:41,039
here on disability evaluation we're

00:07:39,120 --> 00:07:42,800
considering electron gs

00:07:41,039 --> 00:07:44,639
because it's really easy to to make a

00:07:42,800 --> 00:07:47,840
modern ui

00:07:44,639 --> 00:07:51,120
and it's fairly common even for

00:07:47,840 --> 00:07:54,400
desktop applications so with javascript

00:07:51,120 --> 00:07:56,080
we have almost the exact opposite from

00:07:54,400 --> 00:08:00,319
cc plus plus we have

00:07:56,080 --> 00:08:03,599
a language that it's really easy to to

00:08:00,319 --> 00:08:06,240
learn and understand it's

00:08:03,599 --> 00:08:08,000
really faster to develop for javascript

00:08:06,240 --> 00:08:10,479
and there is a lot more

00:08:08,000 --> 00:08:11,120
developers available on the market

00:08:10,479 --> 00:08:14,400
however

00:08:11,120 --> 00:08:18,080
the flexibility and easy to use

00:08:14,400 --> 00:08:19,680
uh from javascript has a coset in terms

00:08:18,080 --> 00:08:22,560
of maintenance

00:08:19,680 --> 00:08:25,199
the very nature of javascript uh makes

00:08:22,560 --> 00:08:26,639
it more prone to errors that only happen

00:08:25,199 --> 00:08:30,400
in runtime

00:08:26,639 --> 00:08:33,599
and that are harder to to locate

00:08:30,400 --> 00:08:33,599
and and fix

00:08:34,399 --> 00:08:41,360
and of course the the the main drawbacks

00:08:37,680 --> 00:08:43,200
are the increased footprint and the low

00:08:41,360 --> 00:08:47,120
performance when compared to

00:08:43,200 --> 00:08:50,160
other solutions so

00:08:47,120 --> 00:08:54,160
it will definitely not be suitable for

00:08:50,160 --> 00:08:59,360
applications where uh

00:08:54,160 --> 00:08:59,360
you need low-cost hardware

00:09:01,519 --> 00:09:04,959
so the next language we consider is

00:09:03,200 --> 00:09:07,760
python

00:09:04,959 --> 00:09:09,519
much like javascript python is a fairly

00:09:07,760 --> 00:09:12,480
easy to learn and understand

00:09:09,519 --> 00:09:13,760
language so we have a low language

00:09:12,480 --> 00:09:19,200
complexity

00:09:13,760 --> 00:09:22,560
and it's a a quicker development

00:09:19,200 --> 00:09:24,640
it is also easier to come with to find

00:09:22,560 --> 00:09:26,640
developers in the market so it

00:09:24,640 --> 00:09:28,399
it translates in developer cost and

00:09:26,640 --> 00:09:32,880
availability

00:09:28,399 --> 00:09:35,120
uh but differently from

00:09:32,880 --> 00:09:36,959
javascript it doesn't have to come with

00:09:35,120 --> 00:09:39,920
a high maintenance cost

00:09:36,959 --> 00:09:40,560
on the lower side of the diagram we see

00:09:39,920 --> 00:09:42,880
we have

00:09:40,560 --> 00:09:45,680
a better ratio when it comes to

00:09:42,880 --> 00:09:50,000
performance footprint and modern ui

00:09:45,680 --> 00:09:52,160
uh much when we think about the ui

00:09:50,000 --> 00:09:53,360
the main framework we can use in python

00:09:52,160 --> 00:09:56,720
with qt

00:09:53,360 --> 00:10:00,880
uh much like cc plus plus so

00:09:56,720 --> 00:10:02,079
uh the the the rating is the same as cc

00:10:00,880 --> 00:10:03,600
plus plus

00:10:02,079 --> 00:10:05,440
but when you consider the performance in

00:10:03,600 --> 00:10:10,000
food sprints we we get

00:10:05,440 --> 00:10:13,120
uh uh uh a better ratio

00:10:10,000 --> 00:10:16,160
it's you don't have to compromise as

00:10:13,120 --> 00:10:21,440
much performance and foot sprint uh

00:10:16,160 --> 00:10:21,440
than the other previous two options

00:10:23,279 --> 00:10:28,000
so last but not least java is a fairly

00:10:26,399 --> 00:10:31,680
easy to learn and understand

00:10:28,000 --> 00:10:32,959
language it doesn't have a high language

00:10:31,680 --> 00:10:36,240
complexity

00:10:32,959 --> 00:10:39,200
but it's also a little more verbose than

00:10:36,240 --> 00:10:40,800
language like like javascript and python

00:10:39,200 --> 00:10:43,279
this translates in a higher time to

00:10:40,800 --> 00:10:43,279
develop

00:10:43,680 --> 00:10:47,200
but it's also very easy to come by

00:10:46,160 --> 00:10:50,160
developers

00:10:47,200 --> 00:10:50,640
for java especially because it's what uh

00:10:50,160 --> 00:10:54,320
it

00:10:50,640 --> 00:10:55,839
it has been for a long time a a fairly

00:10:54,320 --> 00:10:59,600
common language

00:10:55,839 --> 00:11:00,720
for schools and the broad market in

00:10:59,600 --> 00:11:03,440
general

00:11:00,720 --> 00:11:03,839
uh the maintenance cost is one of the

00:11:03,440 --> 00:11:07,120
best

00:11:03,839 --> 00:11:10,160
especially because uh uh java leverages

00:11:07,120 --> 00:11:13,920
a lot of the the the main problems

00:11:10,160 --> 00:11:16,399
like handling memory management and

00:11:13,920 --> 00:11:19,440
hardware related stuff

00:11:16,399 --> 00:11:20,399
but it's also easier to to maintain

00:11:19,440 --> 00:11:24,399
because

00:11:20,399 --> 00:11:26,880
it's easier to track down and locate

00:11:24,399 --> 00:11:30,480
problems and to locate them nearly

00:11:26,880 --> 00:11:30,480
during a compiled time

00:11:30,959 --> 00:11:34,000
kind of it's kind of the best words

00:11:33,360 --> 00:11:38,160
between

00:11:34,000 --> 00:11:40,640
c c plus plus and javascript uh

00:11:38,160 --> 00:11:42,480
it is also a lot easier to to come up

00:11:40,640 --> 00:11:46,240
with a modern ui

00:11:42,480 --> 00:11:49,760
uh once again uh considering

00:11:46,240 --> 00:11:52,399
uh we are using total cross which has

00:11:49,760 --> 00:11:53,040
its own api it's not i'm not considering

00:11:52,399 --> 00:11:57,279
here

00:11:53,040 --> 00:11:59,839
stuff like awt or swing

00:11:57,279 --> 00:12:03,360
and it also comes with a really great

00:11:59,839 --> 00:12:07,120
performance and smaller footprint

00:12:03,360 --> 00:12:10,800
and also with total crazy games no code

00:12:07,120 --> 00:12:14,800
which allows you to write

00:12:10,800 --> 00:12:17,360
photocross gui using android xml so if

00:12:14,800 --> 00:12:20,639
you're familiar to android development

00:12:17,360 --> 00:12:24,320
and the android xml you can

00:12:20,639 --> 00:12:28,560
develop interfaces just like you

00:12:24,320 --> 00:12:32,079
you've you you would uh with android

00:12:28,560 --> 00:12:34,880
and run on and run on total cross

00:12:32,079 --> 00:12:35,839
and that way you can leverage your

00:12:34,880 --> 00:12:39,600
previous

00:12:35,839 --> 00:12:42,399
knowledge and have the the benefits of

00:12:39,600 --> 00:12:46,560
performance and footprint

00:12:42,399 --> 00:12:46,560
from using toro cross and java

00:12:48,800 --> 00:12:51,920
so here's a quick overview uh throughout

00:12:51,440 --> 00:12:55,600
the

00:12:51,920 --> 00:12:59,440
four languages we've considered uh

00:12:55,600 --> 00:13:02,880
so once again whenever uh the

00:12:59,440 --> 00:13:05,839
the harder cause is your main limiting

00:13:02,880 --> 00:13:06,399
uh aspect of your project your problem

00:13:05,839 --> 00:13:09,920
will

00:13:06,399 --> 00:13:12,959
be bear with cc plus plus with simple

00:13:09,920 --> 00:13:14,320
c simple plus will be able to come with

00:13:12,959 --> 00:13:18,560
high performance

00:13:14,320 --> 00:13:21,040
and low footprint in cheaper devices

00:13:18,560 --> 00:13:22,320
on the other side of the spectrum if

00:13:21,040 --> 00:13:24,480
hardware costs is not

00:13:22,320 --> 00:13:25,600
a limit effect or and you want to be

00:13:24,480 --> 00:13:28,880
able to

00:13:25,600 --> 00:13:29,519
make a really attractive and modern

00:13:28,880 --> 00:13:32,480
device

00:13:29,519 --> 00:13:35,519
as fast as possible uh javascript is

00:13:32,480 --> 00:13:38,720
probably your best bet

00:13:35,519 --> 00:13:43,600
python comes with a more balanced option

00:13:38,720 --> 00:13:43,600
although it is still more uh

00:13:43,920 --> 00:13:49,760
more closely related to javascript

00:13:47,519 --> 00:13:51,360
because of its footprints and

00:13:49,760 --> 00:13:54,079
performance

00:13:51,360 --> 00:13:55,760
and if you need a more balanced

00:13:54,079 --> 00:14:00,160
well-round

00:13:55,760 --> 00:14:00,160
solution you can go with java

00:14:01,600 --> 00:14:05,040
and also uh it's important to consider

00:14:04,480 --> 00:14:07,760
the cost

00:14:05,040 --> 00:14:08,240
of the frameworks and the the the tools

00:14:07,760 --> 00:14:10,720
uh

00:14:08,240 --> 00:14:11,760
considered here so when you think about

00:14:10,720 --> 00:14:14,880
cc plus plus and

00:14:11,760 --> 00:14:17,040
python uh you may have

00:14:14,880 --> 00:14:18,480
you may want to use qt which is a

00:14:17,040 --> 00:14:21,839
commercial solution so

00:14:18,480 --> 00:14:22,240
that that cost has a has to be factored

00:14:21,839 --> 00:14:25,600
into

00:14:22,240 --> 00:14:28,959
as well but uh you can also consider

00:14:25,600 --> 00:14:30,000
using lvgl for cc plus plus or electron

00:14:28,959 --> 00:14:33,279
gs with javascript

00:14:30,000 --> 00:14:36,639
or total plus or java which can

00:14:33,279 --> 00:14:40,000
be used for free depending on

00:14:36,639 --> 00:14:40,000
on your of your project

00:14:43,760 --> 00:14:48,000
so once again thanks for coming to our

00:14:45,519 --> 00:14:50,240
presentation and i invite you

00:14:48,000 --> 00:14:52,079
to to know a little more about totocross

00:14:50,240 --> 00:14:53,360
you can find us on github slash

00:14:52,079 --> 00:14:57,440
totalcross

00:14:53,360 --> 00:15:00,720
so make sure to check us out and

00:14:57,440 --> 00:15:04,240
star favorites or projects to help us

00:15:00,720 --> 00:15:06,480
uh reach more people and also you can

00:15:04,240 --> 00:15:10,079
reach me on on leaky gene

00:15:06,480 --> 00:15:13,839
or other media and

00:15:10,079 --> 00:15:13,839
thanks again everyone for coming

00:15:15,850 --> 00:15:18,619

YouTube URL: https://www.youtube.com/watch?v=X7k46-cQAVc


