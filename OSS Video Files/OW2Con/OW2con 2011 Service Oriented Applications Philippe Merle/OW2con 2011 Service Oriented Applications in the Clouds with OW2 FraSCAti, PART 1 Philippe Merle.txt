Title: OW2con 2011 Service Oriented Applications in the Clouds with OW2 FraSCAti, PART 1 Philippe Merle
Publication date: 2012-01-06
Playlist: OW2con 2011 Service Oriented Applications Philippe Merle
Description: 
	Abstract: Cloud Computing is the major trend for provisioning on-demand scalable services. However, there is a proliferation of solutions to put Cloud Computing at work. Then developers will be face to two main problems: Multi-Cloud portability and Inter-Cloud distribution. Multi-Cloud portability means how to build service-oriented applications portable on different cloud platforms. Inter-cloud distribution means how provisioning service-oriented applications distributed across different cloud platforms. This talk presents how OW2 FraSCAti could help developers to build Multi and Inter Cloud Service Oriented Applications. OW2 FraSCAti is an open source middleware platform supporting OASIS Service Component Architecture (SCA). SCA is a set of specifications to build composite service-oriented applications. OW2 FraSCAti supports a large variety of technologies to build SCA applications like Java POJO, BPEL, Spring, OSGi, BPEL, scripting languages, JNA, WSDL, SOAP, REST, JMS, Java RMI, JSON-RPC, UPnP, JGroups, etc. OW2 FraSCAti supports eight Cloud Computing platforms: Amazon EC2, Amazon Elastic Beanstalk, CloudBees, DotCloud, Google App Engine, Heroku, InstaCompute, and OpenShift from Red Hat. Then a same SCA-based application could be deployed on these eight Cloud platforms but also across them. A live demonstration available at http://frascati.ow2.org will be presented during this talk.
Captions: 
	00:00:03,740 --> 00:00:09,950
my talk is about the current

00:00:06,950 --> 00:00:12,630
experimentation we down to two big

00:00:09,950 --> 00:00:17,369
service-oriented application with a

00:00:12,630 --> 00:00:20,400
sketchy and deploy than on multiple

00:00:17,369 --> 00:00:23,490
cloud so my objectives it not to send

00:00:20,400 --> 00:00:26,630
you a project or to sell you a solution

00:00:23,490 --> 00:00:31,859
is that just to show you some

00:00:26,630 --> 00:00:35,219
perspective on on which we work so this

00:00:31,859 --> 00:00:40,040
work is done in the context of the easy

00:00:35,219 --> 00:00:44,120
esor project orange funded project in

00:00:40,040 --> 00:00:48,899
factor if we trust the cloud computing

00:00:44,120 --> 00:00:54,000
evangelist persons shine the sky is blue

00:00:48,899 --> 00:00:58,190
and all the clothes are white and in

00:00:54,000 --> 00:01:03,329
fact i think that is certainly falls

00:00:58,190 --> 00:01:07,200
just for one reason is that there is not

00:01:03,329 --> 00:01:11,280
just one crowd but in fact there is a

00:01:07,200 --> 00:01:14,520
plethora of heterogeneous clothes here

00:01:11,280 --> 00:01:18,540
you you could see different form of

00:01:14,520 --> 00:01:22,650
clothes and i think that each of this

00:01:18,540 --> 00:01:25,650
form are wonderful and beautiful for

00:01:22,650 --> 00:01:28,560
instance i think that we you could

00:01:25,650 --> 00:01:34,590
imagine where is though as your clothes

00:01:28,560 --> 00:01:38,130
and where is the lunch crowd in this but

00:01:34,590 --> 00:01:41,549
is really different from the amazon

00:01:38,130 --> 00:01:46,049
cloud for instance i think that you

00:01:41,549 --> 00:01:50,040
could see also your cloud your own crowd

00:01:46,049 --> 00:01:53,790
certainly one of this picture i opted

00:01:50,040 --> 00:02:00,090
for you that you your plug is not a new

00:01:53,790 --> 00:02:05,040
again this is also a cloud this form is

00:02:00,090 --> 00:02:10,349
also a crowd and i hope also for you

00:02:05,040 --> 00:02:12,210
that he is not a tornado because this is

00:02:10,349 --> 00:02:17,040
also a crowd

00:02:12,210 --> 00:02:21,480
this is also a cloud so jay-z this

00:02:17,040 --> 00:02:23,850
picture is just to show you that the

00:02:21,480 --> 00:02:27,390
cloud computing is and will be

00:02:23,850 --> 00:02:31,080
heterogeneous there is not just one

00:02:27,390 --> 00:02:36,030
crowd out perhaps the better crowd will

00:02:31,080 --> 00:02:40,230
be around row as you or Amazon they

00:02:36,030 --> 00:02:43,790
think that this be the bad crowd but in

00:02:40,230 --> 00:02:48,600
the reality we will have several

00:02:43,790 --> 00:02:52,800
different crowd and the developer our

00:02:48,600 --> 00:02:56,850
faith at least a faith to to measure

00:02:52,800 --> 00:02:58,950
issue the reason for all the clothes

00:02:56,850 --> 00:03:03,110
there is a several issue about

00:02:58,950 --> 00:03:07,770
elasticity and tower / b tches la

00:03:03,110 --> 00:03:11,370
positioning etc but so the future I

00:03:07,770 --> 00:03:16,740
think that we will build a system

00:03:11,370 --> 00:03:20,700
deployed on multiple cloud and we need

00:03:16,740 --> 00:03:25,020
to think the first thing is the ability

00:03:20,700 --> 00:03:28,620
to to build service-oriented application

00:03:25,020 --> 00:03:32,880
portable on different cloud for certain

00:03:28,620 --> 00:03:35,220
person named Z's migration they want to

00:03:32,880 --> 00:03:38,810
migrate on application to the cloud and

00:03:35,220 --> 00:03:43,410
after to another cloud depending of the

00:03:38,810 --> 00:03:49,440
authoring of the different actor of the

00:03:43,410 --> 00:03:52,890
crud crud war so the first aspect is a

00:03:49,440 --> 00:03:57,900
new key code portability I i want to

00:03:52,890 --> 00:04:01,260
write one application and be independent

00:03:57,900 --> 00:04:06,290
of the different cloth and the different

00:04:01,260 --> 00:04:09,270
a Pai and in the different Club another

00:04:06,290 --> 00:04:13,440
aspect that could be interesting in the

00:04:09,270 --> 00:04:17,210
future if we have a multiple cloud

00:04:13,440 --> 00:04:19,590
infrastructure we want also to deploy

00:04:17,210 --> 00:04:23,400
distributed application on this

00:04:19,590 --> 00:04:24,500
distributed cloud infrastructure so we

00:04:23,400 --> 00:04:27,400
we need to

00:04:24,500 --> 00:04:31,870
vision service oriented application and

00:04:27,400 --> 00:04:34,190
the same applications must be could be

00:04:31,870 --> 00:04:38,950
distributed across different cloud

00:04:34,190 --> 00:04:43,210
provider or different cloud platform so

00:04:38,950 --> 00:04:47,630
my talk on my experimentation and

00:04:43,210 --> 00:04:51,950
demonstration in the next slide is about

00:04:47,630 --> 00:04:59,510
to provide a possible solution to these

00:04:51,950 --> 00:05:06,110
two issues so as everybody I have a

00:04:59,510 --> 00:05:08,560
vision and for some samuel's my origin

00:05:06,110 --> 00:05:12,260
is the service component architecture

00:05:08,560 --> 00:05:15,680
but in the past I have also other

00:05:12,260 --> 00:05:18,350
religion purchase for the region but

00:05:15,680 --> 00:05:22,580
currently my my religion is service or

00:05:18,350 --> 00:05:26,030
service component architecture I will

00:05:22,580 --> 00:05:29,390
not describe this technology in full

00:05:26,030 --> 00:05:35,840
detail what is important to do to know

00:05:29,390 --> 00:05:42,320
is that it just under define addresses

00:05:35,840 --> 00:05:46,250
consortium cyst and I agnostic about the

00:05:42,320 --> 00:05:48,800
technology that you we could use inside

00:05:46,250 --> 00:05:54,700
the service component architecture and

00:05:48,800 --> 00:05:58,220
the standard define component based

00:05:54,700 --> 00:06:00,830
programming model for service oriented

00:05:58,220 --> 00:06:04,130
architecture or service oriented

00:06:00,830 --> 00:06:09,200
application so this company this model

00:06:04,130 --> 00:06:13,220
is or if we could see as a classical

00:06:09,200 --> 00:06:16,940
component model that where we are I

00:06:13,220 --> 00:06:19,760
think that you have already seen this

00:06:16,940 --> 00:06:23,210
kind of concept the notion of

00:06:19,760 --> 00:06:26,300
application composite and composite is

00:06:23,210 --> 00:06:29,750
composed of different component business

00:06:26,300 --> 00:06:33,580
component and this different component

00:06:29,750 --> 00:06:38,860
are interconnected explicitly

00:06:33,580 --> 00:06:43,930
by services and reference see just the

00:06:38,860 --> 00:06:47,919
name in this standard but what is really

00:06:43,930 --> 00:06:51,520
interesting in the service component

00:06:47,919 --> 00:06:54,400
architecture is that is independent of

00:06:51,520 --> 00:06:58,090
the technology we use inside the

00:06:54,400 --> 00:07:02,110
application for for instance there is

00:06:58,090 --> 00:07:07,000
violence language to that are supported

00:07:02,110 --> 00:07:09,940
by a CA to implement a component we

00:07:07,000 --> 00:07:12,690
could describe a service we are

00:07:09,940 --> 00:07:19,300
different interface definition language

00:07:12,690 --> 00:07:26,199
we could use wsdl or Java or double v RG

00:07:19,300 --> 00:07:30,449
l or we could also use OMG IDL and we we

00:07:26,199 --> 00:07:35,139
could have integration between component

00:07:30,449 --> 00:07:39,940
through different binding communication

00:07:35,139 --> 00:07:44,889
binding protocols so we could use web

00:07:39,940 --> 00:07:49,539
savvy so Gemma's or we could use also

00:07:44,889 --> 00:07:54,639
any kind of service fee of protocols

00:07:49,539 --> 00:07:59,680
network pocket rockets so this is the

00:07:54,639 --> 00:08:04,770
base of this for just under and in the

00:07:59,680 --> 00:08:10,469
free sketchy project that is oath by

00:08:04,770 --> 00:08:12,729
autoplay video ah ee to we we give an

00:08:10,469 --> 00:08:16,680
open-source implementation of this

00:08:12,729 --> 00:08:19,990
thunder so we are compliant with the

00:08:16,680 --> 00:08:24,060
definition of this tunde so currently we

00:08:19,990 --> 00:08:29,080
support java degree verchiel soap

00:08:24,060 --> 00:08:35,680
interaction deepal jamai Raja Gemma's

00:08:29,080 --> 00:08:38,169
our spring component and this what is

00:08:35,680 --> 00:08:42,550
this picture are defined in the standard

00:08:38,169 --> 00:08:45,350
but in fact in Frascati really we try to

00:08:42,550 --> 00:08:49,790
go beyond this on the

00:08:45,350 --> 00:08:53,850
we have also implemented a West oriented

00:08:49,790 --> 00:08:58,890
protocol waste-to-energy the binding we

00:08:53,850 --> 00:09:02,190
have also this on a pc or binding would

00:08:58,890 --> 00:09:05,700
be pure empty java llamar orgy group

00:09:02,190 --> 00:09:11,550
communication inside the SGA we also

00:09:05,700 --> 00:09:15,360
support OHI bind a bundle in the an

00:09:11,550 --> 00:09:18,620
assembly of a CA component we also

00:09:15,360 --> 00:09:24,230
support scripting on template language

00:09:18,620 --> 00:09:27,540
to implement business component or with

00:09:24,230 --> 00:09:32,360
certain technology we also put

00:09:27,540 --> 00:09:38,850
integrator c library directly and see

00:09:32,360 --> 00:09:42,230
CLC library as a CA component another

00:09:38,850 --> 00:09:44,700
aspect of the oscars catchy is to to add

00:09:42,230 --> 00:09:49,740
runtime introspection and

00:09:44,700 --> 00:09:54,980
reconfiguration on top of ECA and the

00:09:49,740 --> 00:09:58,440
last point of Frascati as other

00:09:54,980 --> 00:10:03,360
middleware or application server is to

00:09:58,440 --> 00:10:06,710
propose a la carte solution so where you

00:10:03,360 --> 00:10:09,800
could build your you on for sketchy

00:10:06,710 --> 00:10:17,940
depending on your application needs or

00:10:09,800 --> 00:10:21,150
your system controls so this the first

00:10:17,940 --> 00:10:27,470
sketchy that currently existing dobrev a

00:10:21,150 --> 00:10:31,650
true and in fact for schedule so it's a

00:10:27,470 --> 00:10:36,300
application server or container for ACA

00:10:31,650 --> 00:10:39,570
application and but we could also see

00:10:36,300 --> 00:10:41,640
tools of lecture of a sketchy is to

00:10:39,570 --> 00:10:46,110
consider that first catch is an

00:10:41,640 --> 00:10:50,220
abstraction for a variety of existing

00:10:46,110 --> 00:10:53,600
middle one so for instance for web

00:10:50,220 --> 00:10:57,959
service or waste interaction we use a

00:10:53,600 --> 00:11:03,759
partial success or four

00:10:57,959 --> 00:11:08,769
deeper we use petal link repellent I'm

00:11:03,759 --> 00:11:11,500
name easy people are we 40 SI we

00:11:08,769 --> 00:11:16,360
integrate Vijaya standard which I

00:11:11,500 --> 00:11:20,440
container but for the the developer of

00:11:16,360 --> 00:11:24,670
one ACIP action you don't deal doesn't

00:11:20,440 --> 00:11:30,069
see the detail of this middleware in

00:11:24,670 --> 00:11:33,149
fact we just see the vca abstraction and

00:11:30,069 --> 00:11:37,180
we program with this abstraction and

00:11:33,149 --> 00:11:40,540
also that I to to execute the

00:11:37,180 --> 00:11:46,990
application on Phoenix or to execute

00:11:40,540 --> 00:11:49,480
people process with easy people or to 12

00:11:46,990 --> 00:11:54,550
a synchronous communication with one is

00:11:49,480 --> 00:11:59,199
managed by Frascati and another part of

00:11:54,550 --> 00:12:02,470
a sketchy is too when you have deploy

00:11:59,199 --> 00:12:06,790
your application you have an appt hi to

00:12:02,470 --> 00:12:10,540
access to this application and in fact

00:12:06,790 --> 00:12:13,630
the supplier is the fractal api and api

00:12:10,540 --> 00:12:18,970
defining though the at the beginning of

00:12:13,630 --> 00:12:21,660
auto v 2 consortium and we will use this

00:12:18,970 --> 00:12:25,209
API in the context of Frascati and

00:12:21,660 --> 00:12:29,800
disappear allow us to introspect Oh

00:12:25,209 --> 00:12:34,269
system or any part of a running system

00:12:29,800 --> 00:12:38,980
and also to over configured learning

00:12:34,269 --> 00:12:42,189
system and this IP I one were used in

00:12:38,980 --> 00:12:47,939
different for sketchy tools for instance

00:12:42,189 --> 00:12:53,139
or graphical interface to to explore a

00:12:47,939 --> 00:12:57,730
sec I application or an administration

00:12:53,139 --> 00:13:00,459
console we GNA mix our entire for other

00:12:57,730 --> 00:13:06,160
two generic tools that allowed to

00:13:00,459 --> 00:13:08,590
administrate running a CA reputation so

00:13:06,160 --> 00:13:13,540
we have started to move to

00:13:08,590 --> 00:13:16,990
to the crowd and what is important in a

00:13:13,540 --> 00:13:20,260
partially we don't want to just go to

00:13:16,990 --> 00:13:23,260
one crowd but we want to go to several

00:13:20,260 --> 00:13:31,120
of the maximum clothes that we could

00:13:23,260 --> 00:13:35,410
address currently we we have a first

00:13:31,120 --> 00:13:40,840
catchy running on amazon but also on

00:13:35,410 --> 00:13:46,020
other yes provider for instance instant

00:13:40,840 --> 00:13:49,720
compute is an engine gas provider and

00:13:46,020 --> 00:13:57,100
you should know what is the owner of

00:13:49,720 --> 00:14:02,610
this company wishes him Tata people we

00:13:57,100 --> 00:14:07,390
we have also deployed for sketchy on an

00:14:02,610 --> 00:14:11,250
inner vamp cloud but in ovens is a

00:14:07,390 --> 00:14:17,920
partner of the competitive one project

00:14:11,250 --> 00:14:22,510
we have also experimented privet yes

00:14:17,920 --> 00:14:25,810
Audrina yeah and we have also

00:14:22,510 --> 00:14:30,760
experimented to deploy frost catchy on

00:14:25,810 --> 00:14:34,480
existing pass so you we have all the

00:14:30,760 --> 00:14:39,250
public baths java base paths available

00:14:34,480 --> 00:14:45,700
around the world I say perhaps the

00:14:39,250 --> 00:14:50,290
service just to we pass that we doesn't

00:14:45,700 --> 00:14:53,340
choose is as you currently and also an

00:14:50,290 --> 00:14:56,610
engine paths or that provide the GTE

00:14:53,340 --> 00:14:56,610

YouTube URL: https://www.youtube.com/watch?v=ixiQp-HgOQ4


