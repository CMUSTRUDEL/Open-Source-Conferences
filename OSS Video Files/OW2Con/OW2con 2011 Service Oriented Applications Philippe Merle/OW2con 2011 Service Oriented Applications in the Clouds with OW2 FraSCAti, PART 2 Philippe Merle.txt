Title: OW2con 2011 Service Oriented Applications in the Clouds with OW2 FraSCAti, PART 2 Philippe Merle
Publication date: 2012-01-06
Playlist: OW2con 2011 Service Oriented Applications Philippe Merle
Description: 
	Speaker: Philippe Merle, INRIA
Abstract: Cloud Computing is the major trend for provisioning on-demand scalable services. However, there is a proliferation of solutions to put Cloud Computing at work. Then developers will be face to two main problems: Multi-Cloud portability and Inter-Cloud distribution. Multi-Cloud portability means how to build service-oriented applications portable on different cloud platforms. Inter-cloud distribution means how provisioning service-oriented applications distributed across different cloud platforms. This talk presents how OW2 FraSCAti could help developers to build Multi and Inter Cloud Service Oriented Applications. OW2 FraSCAti is an open source middleware platform supporting OASIS Service Component Architecture (SCA). SCA is a set of specifications to build composite service-oriented applications. OW2 FraSCAti supports a large variety of technologies to build SCA applications like Java POJO, BPEL, Spring, OSGi, BPEL, scripting languages, JNA, WSDL, SOAP, REST, JMS, Java RMI, JSON-RPC, UPnP, JGroups, etc. OW2 FraSCAti supports eight Cloud Computing platforms: Amazon EC2, Amazon Elastic Beanstalk, CloudBees, DotCloud, Google App Engine, Heroku, InstaCompute, and OpenShift from Red Hat. Then a same SCA-based application could be deployed on these eight Cloud platforms but also across them. A live demonstration available at http://frascati.ow2.org will be presented during this talk.
Captions: 
	00:00:04,910 --> 00:00:14,130
so but what we are will show in in the

00:00:09,929 --> 00:00:19,710
demonstration in fact we have deployed

00:00:14,130 --> 00:00:24,869
for sketchy on several or not around the

00:00:19,710 --> 00:00:30,480
world on each node we use parts of the

00:00:24,869 --> 00:00:34,739
yes deploy on this node and after we

00:00:30,480 --> 00:00:38,010
have deploy your HCA HCA basic

00:00:34,739 --> 00:00:43,110
application just due to experiment and

00:00:38,010 --> 00:00:46,039
we have also experimented a large-scale

00:00:43,110 --> 00:00:50,219
distributed the monitoring application

00:00:46,039 --> 00:00:52,860
that is not one application that one on

00:00:50,219 --> 00:00:56,070
just one node but is this is an

00:00:52,860 --> 00:01:01,350
application that one on all the node of

00:00:56,070 --> 00:01:07,519
this particular network so i will just

00:01:01,350 --> 00:01:07,519
go and show a small small demonstration

00:01:14,360 --> 00:01:17,080
two

00:01:17,720 --> 00:01:26,680
so if you have access to the network as

00:01:22,100 --> 00:01:29,990
you could also use this demonstration

00:01:26,680 --> 00:01:34,130
you just need to go to the free sketchy

00:01:29,990 --> 00:01:40,520
website and click on the link to support

00:01:34,130 --> 00:01:42,790
it prod providers this is what I are we

00:01:40,520 --> 00:01:42,790
done

00:01:53,890 --> 00:02:02,110
so currently is the list of all the

00:01:58,650 --> 00:02:05,260
platform that we wish you part in in

00:02:02,110 --> 00:02:09,539
fact we we have a running fast etsy

00:02:05,260 --> 00:02:13,750
instance on each of this platform and

00:02:09,539 --> 00:02:19,300
for instance I i will take the the

00:02:13,750 --> 00:02:22,510
instance running on a trapeze and on

00:02:19,300 --> 00:02:27,610
this instance we we have deployed a set

00:02:22,510 --> 00:02:31,000
of API application for for instance for

00:02:27,610 --> 00:02:34,450
I will not show all the this application

00:02:31,000 --> 00:02:38,290
but we have an example of application

00:02:34,450 --> 00:02:43,060
that is a proxy to the older West

00:02:38,290 --> 00:02:50,050
services so this AC application interact

00:02:43,060 --> 00:02:54,280
with all services we we have just

00:02:50,050 --> 00:02:58,150
implementing a basic example of a

00:02:54,280 --> 00:03:04,690
computation services here is the

00:02:58,150 --> 00:03:07,870
computation of Fibonacci series and we

00:03:04,690 --> 00:03:12,930
are also other proxy to existing

00:03:07,870 --> 00:03:17,019
services or I will not show all these

00:03:12,930 --> 00:03:21,910
services but what is a more interesting

00:03:17,019 --> 00:03:26,709
is that this five application and plus

00:03:21,910 --> 00:03:33,040
for sketchy run on all the plateau

00:03:26,709 --> 00:03:36,040
period of our network and we have also

00:03:33,040 --> 00:03:41,079
one application that interconnect all

00:03:36,040 --> 00:03:44,410
these disappear and in fact this this

00:03:41,079 --> 00:03:51,660
example of application that is also

00:03:44,410 --> 00:03:56,350
implemented in in it with eca it is a

00:03:51,660 --> 00:04:00,489
small monitoring application that the

00:03:56,350 --> 00:04:02,760
goal is to to have to cuda to do to

00:04:00,489 --> 00:04:05,770
access to

00:04:02,760 --> 00:04:12,280
mentoring you information about this

00:04:05,770 --> 00:04:16,570
peer-to-peer network so this is just the

00:04:12,280 --> 00:04:20,739
front end of the application where we

00:04:16,570 --> 00:04:25,090
see where I'll deployed the ref I

00:04:20,739 --> 00:04:30,250
sketchy node and currently I just

00:04:25,090 --> 00:04:34,540
running the ayah stop all those or not

00:04:30,250 --> 00:04:42,130
and just keep the American node at one

00:04:34,540 --> 00:04:45,550
at yes and the this exam it is kind of

00:04:42,130 --> 00:04:48,310
this application or in fact obtain

00:04:45,550 --> 00:04:52,240
information monitoring information about

00:04:48,310 --> 00:05:00,930
each cloud for instance I could have

00:04:52,240 --> 00:05:00,930
done with yes

00:05:09,020 --> 00:05:25,530
okay I could attend a set of information

00:05:14,690 --> 00:05:28,590
about each node but in fact okay so when

00:05:25,530 --> 00:05:32,310
I asked you to onenote it could obtain

00:05:28,590 --> 00:05:36,390
the information of all the world all the

00:05:32,310 --> 00:05:40,500
rules are not so the information is not

00:05:36,390 --> 00:05:44,790
important here is the IP address or

00:05:40,500 --> 00:05:48,420
memory the number of dead etc are not

00:05:44,790 --> 00:05:51,150
important but the application I just add

00:05:48,420 --> 00:05:55,880
the computation of latency between the

00:05:51,150 --> 00:06:00,120
node and the line that we see on this

00:05:55,880 --> 00:06:02,610
this picture on this map in in fact is

00:06:00,120 --> 00:06:11,190
one representation of the latency

00:06:02,610 --> 00:06:14,190
between the the cloud I have a lot of

00:06:11,190 --> 00:06:18,090
other things that I could show you but I

00:06:14,190 --> 00:06:29,330
prefer to to the do that I during the

00:06:18,090 --> 00:06:29,330
bike right

00:06:36,889 --> 00:06:53,330
so if you you like yes it is you see

00:06:45,719 --> 00:06:57,780
that I what we we have to try to address

00:06:53,330 --> 00:07:01,310
the motability are on multi cloud

00:06:57,780 --> 00:07:06,479
environment and the distribution between

00:07:01,310 --> 00:07:12,389
different cloud and quarantine we don't

00:07:06,479 --> 00:07:18,419
have a project that realized this this

00:07:12,389 --> 00:07:22,460
doing but we we adjust report that show

00:07:18,419 --> 00:07:28,020
that we could obtain this in the future

00:07:22,460 --> 00:07:34,620
and this poker running and you could

00:07:28,020 --> 00:07:37,830
access it but when we will address these

00:07:34,620 --> 00:07:41,550
two issues that we have a lot of a very

00:07:37,830 --> 00:07:47,150
shoot to address in the next generation

00:07:41,550 --> 00:07:50,669
of cloud computing for for instance

00:07:47,150 --> 00:07:55,069
milky milky cloud provisioning is

00:07:50,669 --> 00:07:58,409
something that compatible should address

00:07:55,069 --> 00:08:01,650
but after you have provisioning an

00:07:58,409 --> 00:08:04,349
application on metric load you need to

00:08:01,650 --> 00:08:08,729
manage and control this application at

00:08:04,349 --> 00:08:15,060
one time so we we have a lot of work to

00:08:08,729 --> 00:08:18,300
do we self-start property or we could

00:08:15,060 --> 00:08:21,539
dream also to migration at one time so

00:08:18,300 --> 00:08:24,930
you start your application to amazon and

00:08:21,539 --> 00:08:30,710
dynamically during the run time you

00:08:24,930 --> 00:08:33,719
migrate to another operator and another

00:08:30,710 --> 00:08:36,329
challenge that we want to address in the

00:08:33,719 --> 00:08:39,719
future is the multi-tenancy for ACA

00:08:36,329 --> 00:08:42,919
application also but either the same

00:08:39,719 --> 00:08:47,000
challenge that Jonas or other

00:08:42,919 --> 00:08:47,000
application server try to address

00:08:47,350 --> 00:08:50,010

YouTube URL: https://www.youtube.com/watch?v=t1J-4hEpr7o


