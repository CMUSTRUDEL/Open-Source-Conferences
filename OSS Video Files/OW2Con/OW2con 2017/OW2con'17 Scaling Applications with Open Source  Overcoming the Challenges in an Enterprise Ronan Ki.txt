Title: OW2con'17 Scaling Applications with Open Source  Overcoming the Challenges in an Enterprise Ronan Ki
Publication date: 2017-06-29
Playlist: OW2con 2017
Description: 
	
Captions: 
	00:00:01,960 --> 00:00:10,950
[Music]

00:00:04,910 --> 00:00:14,480
good morning Rajai that again good

00:00:10,950 --> 00:00:18,930
morning all right

00:00:14,480 --> 00:00:22,020
my name is Ronan Kirby and I work for

00:00:18,930 --> 00:00:24,630
nginx that's like engine engine in a car

00:00:22,020 --> 00:00:27,510
with an X at the end it's not enging

00:00:24,630 --> 00:00:30,630
sore it's like the old Linux Linux thing

00:00:27,510 --> 00:00:36,030
so it's engine X or at least that's

00:00:30,630 --> 00:00:38,250
that's how we call it so um I'm going to

00:00:36,030 --> 00:00:39,480
try and fill 30 minutes to talk to you

00:00:38,250 --> 00:00:41,040
today about something that's maybe a

00:00:39,480 --> 00:00:43,410
little different than I've written up

00:00:41,040 --> 00:00:44,989
here actually it's more more like to

00:00:43,410 --> 00:00:49,710
talk to you about the journey that

00:00:44,989 --> 00:00:52,170
engine X has been on since 2002 leading

00:00:49,710 --> 00:00:56,520
to where we are today which is a company

00:00:52,170 --> 00:01:00,500
with venture funding with in around the

00:00:56,520 --> 00:01:04,189
region of 200 staff across the u.s.

00:01:00,500 --> 00:01:07,470
multiple offices in Europe Russia and

00:01:04,189 --> 00:01:10,170
over a thousand enterprise customers and

00:01:07,470 --> 00:01:12,540
I think it's fair to say a relatively

00:01:10,170 --> 00:01:14,130
successful business I have to say that

00:01:12,540 --> 00:01:18,540
because I'm responsible for the amir

00:01:14,130 --> 00:01:20,280
number so rather than give you the the

00:01:18,540 --> 00:01:22,259
normal product pitch which is kind of

00:01:20,280 --> 00:01:24,240
what I'm used to doing I'm sort of pull

00:01:22,259 --> 00:01:26,189
myself back from that line a little and

00:01:24,240 --> 00:01:28,710
talk to you about our open-source

00:01:26,189 --> 00:01:30,960
journey and how that open-source journey

00:01:28,710 --> 00:01:35,790
is helping enterprises scale

00:01:30,960 --> 00:01:37,530
applications a little bit of a little

00:01:35,790 --> 00:01:40,650
bit of background on me as we get into

00:01:37,530 --> 00:01:43,590
this I spent about 10 11 years at Red

00:01:40,650 --> 00:01:47,610
Hat when I joined Red Hat when Red Hat

00:01:43,590 --> 00:01:49,560
was about 450 people which is a little

00:01:47,610 --> 00:01:53,909
less than the 10,000 it is now and

00:01:49,560 --> 00:01:56,310
open-source was as a commercial venture

00:01:53,909 --> 00:01:58,680
I suppose slightly less mature than it

00:01:56,310 --> 00:02:00,930
is today and we were trying to educate

00:01:58,680 --> 00:02:02,850
people on what things like subscriptions

00:02:00,930 --> 00:02:04,290
and and and all of those were in fact we

00:02:02,850 --> 00:02:07,560
hadn't even come up with subscriptions

00:02:04,290 --> 00:02:11,670
really as an industry at the time so let

00:02:07,560 --> 00:02:13,500
me start by giving you a brief ich look

00:02:11,670 --> 00:02:18,150
at the at the history

00:02:13,500 --> 00:02:23,340
of nginx so nginx was originally written

00:02:18,150 --> 00:02:25,440
by Igor to solve in 2002 Igor was trying

00:02:23,340 --> 00:02:28,020
to solve a problem that an awful lot of

00:02:25,440 --> 00:02:30,420
people were working on at the time which

00:02:28,020 --> 00:02:32,760
many of you will remember which is the C

00:02:30,420 --> 00:02:36,780
10 K problem so this was the challenge

00:02:32,760 --> 00:02:39,150
of getting a web server to handle 10,000

00:02:36,780 --> 00:02:42,480
concurrent connections a number that

00:02:39,150 --> 00:02:45,300
today seems like such a tiny number but

00:02:42,480 --> 00:02:47,130
at the time this was a real issue so

00:02:45,300 --> 00:02:50,880
people's approach to it at the time

00:02:47,130 --> 00:02:53,270
really was to crack Apache to death all

00:02:50,880 --> 00:02:55,800
right Apache was the de facto webserver

00:02:53,270 --> 00:02:58,740
people were putting it on bigger and

00:02:55,800 --> 00:03:01,860
bigger Linux servers FreeBSD servers and

00:02:58,740 --> 00:03:04,170
so on it was all about taking advantage

00:03:01,860 --> 00:03:07,620
of what SMP could do for you at the time

00:03:04,170 --> 00:03:10,080
and Igor who was working for Rambler

00:03:07,620 --> 00:03:12,020
Ramblers like a Russian internet

00:03:10,080 --> 00:03:15,660
provider and content provider

00:03:12,020 --> 00:03:17,640
Igor took a what I call a classically

00:03:15,660 --> 00:03:20,970
Russian approach to it which was I can

00:03:17,640 --> 00:03:24,060
engineer something better so we were

00:03:20,970 --> 00:03:28,890
decided to ground up write a new piece

00:03:24,060 --> 00:03:31,530
of software engine X and this is what he

00:03:28,890 --> 00:03:34,610
wrote this is clear to everybody right

00:03:31,530 --> 00:03:36,980
we're asking questions on this later oh

00:03:34,610 --> 00:03:38,820
dear how did that happen

00:03:36,980 --> 00:03:41,670
we'll give you another minute on that

00:03:38,820 --> 00:03:47,070
slide just to make sure you fully absorb

00:03:41,670 --> 00:03:54,780
it what oh my goodness what do you think

00:03:47,070 --> 00:03:56,770
is happening here all right stay so oh

00:03:54,780 --> 00:03:58,900
my good

00:03:56,770 --> 00:04:04,840
this isn't getting first I'll hang on

00:03:58,900 --> 00:04:08,920
it's on an auto there we go sorry any

00:04:04,840 --> 00:04:10,720
technical people about no okay oh this

00:04:08,920 --> 00:04:12,250
is ridiculous

00:04:10,720 --> 00:04:16,320
I'm just going to hover here with my

00:04:12,250 --> 00:04:16,320
finger here now

00:04:16,350 --> 00:04:23,770
yes do you think it'll stay there you

00:04:22,120 --> 00:04:25,390
know what I'm just going to escape from

00:04:23,770 --> 00:04:27,730
the presentation for a second if you

00:04:25,390 --> 00:04:35,290
don't mind and I will play it again from

00:04:27,730 --> 00:04:37,540
current slide okay so what he wrote was

00:04:35,290 --> 00:04:44,680
nginx the open source web server that

00:04:37,540 --> 00:04:47,820
many of you know wow this is this is

00:04:44,680 --> 00:04:47,820
starting to get a little bit annoying

00:04:48,240 --> 00:05:00,520
yep you know the spacebar is moving it

00:04:51,930 --> 00:05:09,990
so yes I've hit the pause so it's on

00:05:00,520 --> 00:05:09,990
it's on pause here okay one last time

00:05:17,740 --> 00:05:29,120
nope if I was using OpenOffice impress

00:05:24,800 --> 00:05:32,540
this wouldn't happen right so I'm going

00:05:29,120 --> 00:05:37,690
to come back to that in a second maybe

00:05:32,540 --> 00:05:43,880
if I close PowerPoint and open it again

00:05:37,690 --> 00:05:46,700
that always works right so what Igor

00:05:43,880 --> 00:05:48,860
wrote was this really scalable piece of

00:05:46,700 --> 00:05:52,400
non-blocking architecture as a web

00:05:48,860 --> 00:05:56,090
server okay a 3 megabyte footprint that

00:05:52,400 --> 00:05:58,940
scales up incredibly fast but doesn't

00:05:56,090 --> 00:06:01,480
hold on to resources so if something

00:05:58,940 --> 00:06:04,340
isn't needed it scales back down again

00:06:01,480 --> 00:06:07,580
not holding on to things and this made

00:06:04,340 --> 00:06:11,240
it an incredibly fast and scalable and

00:06:07,580 --> 00:06:15,830
lightweight web server so he opened

00:06:11,240 --> 00:06:18,290
sourced it in 2004 just pushed it out

00:06:15,830 --> 00:06:20,890
into the wild into the into the russian

00:06:18,290 --> 00:06:25,210
open-source community and you know

00:06:20,890 --> 00:06:29,060
maintained it a little did some

00:06:25,210 --> 00:06:34,040
maintenance on it some updates patching

00:06:29,060 --> 00:06:38,360
but not a whole lot else and fast

00:06:34,040 --> 00:06:41,390
forward to 2007 while reading a Google a

00:06:38,360 --> 00:06:45,920
Google security blog saw that nginx was

00:06:41,390 --> 00:06:48,320
listed as being 4% of the web server

00:06:45,920 --> 00:06:50,720
market they thought how on earth did

00:06:48,320 --> 00:06:54,140
this happen this is a piece of software

00:06:50,720 --> 00:06:56,360
that's in Russian only there is no

00:06:54,140 --> 00:06:57,880
marketing behind it there's no company

00:06:56,360 --> 00:07:01,190
behind it there is no English

00:06:57,880 --> 00:07:04,150
documentation how the hell is 4% of the

00:07:01,190 --> 00:07:07,750
internet running on this software and

00:07:04,150 --> 00:07:10,070
this is really a classic example of

00:07:07,750 --> 00:07:13,520
open-source adoption within the

00:07:10,070 --> 00:07:15,950
community it's a great example of people

00:07:13,520 --> 00:07:24,260
trying to find the best tool to solve a

00:07:15,950 --> 00:07:27,080
problem so in 2011 they couldn't keep up

00:07:24,260 --> 00:07:28,560
with the demand that was the maintenance

00:07:27,080 --> 00:07:31,290
updates

00:07:28,560 --> 00:07:34,230
the patches the feature update the

00:07:31,290 --> 00:07:37,710
feature requests for nginx so Igor along

00:07:34,230 --> 00:07:42,060
with two of his colleagues from Rambler

00:07:37,710 --> 00:07:46,710
left to set up nginx Inc with the

00:07:42,060 --> 00:07:48,900
headquarters in San Francisco and if we

00:07:46,710 --> 00:07:52,470
look at what's happened nginx since that

00:07:48,900 --> 00:07:55,889
time we're in aus 350 million websites

00:07:52,470 --> 00:08:01,620
today active websites running nginx as a

00:07:55,889 --> 00:08:03,840
web server 60% of the top 10,000 busiest

00:08:01,620 --> 00:08:07,550
web sites on the planet are running

00:08:03,840 --> 00:08:10,080
nginx and over half of the busiest

00:08:07,550 --> 00:08:13,950
100,000 websites on the Internet are

00:08:10,080 --> 00:08:14,610
running nginx if we look into the cloud

00:08:13,950 --> 00:08:19,500
space

00:08:14,610 --> 00:08:22,470
40% of all instances on AWS have nginx

00:08:19,500 --> 00:08:24,510
actively running inside us and that

00:08:22,470 --> 00:08:28,410
continues across the internet if you

00:08:24,510 --> 00:08:30,600
look at docker hub by a long shot nginx

00:08:28,410 --> 00:08:34,110
is the most downloaded software on

00:08:30,600 --> 00:08:37,560
docker hub in fact today nginx powers

00:08:34,110 --> 00:08:41,159
over 35% of the traffic on the public

00:08:37,560 --> 00:08:43,880
Internet and that's not a bad place to

00:08:41,159 --> 00:08:48,089
be for an open source piece of software

00:08:43,880 --> 00:08:51,900
but it also presents a set of challenges

00:08:48,089 --> 00:08:54,720
so now we'll look at how to the nginx

00:08:51,900 --> 00:08:58,140
embrace open source and how do we

00:08:54,720 --> 00:09:00,450
sustain the development of nginx the

00:08:58,140 --> 00:09:01,250
open source software before I go any

00:09:00,450 --> 00:09:03,900
further

00:09:01,250 --> 00:09:06,980
hands up here who had heard of nginx

00:09:03,900 --> 00:09:10,830
before coming here today or yesterday

00:09:06,980 --> 00:09:15,630
great hands up if you knew there was a

00:09:10,830 --> 00:09:17,790
company behind it all right was better

00:09:15,630 --> 00:09:22,980
than sometimes hands up if you know

00:09:17,790 --> 00:09:23,959
about nginx plus and down if you work at

00:09:22,980 --> 00:09:26,910
nginx

00:09:23,959 --> 00:09:27,650
all right there's a few that's that's

00:09:26,910 --> 00:09:30,810
not so bad

00:09:27,650 --> 00:09:34,050
so the challenge we had was how do we

00:09:30,810 --> 00:09:36,420
maintain the development of nginx but

00:09:34,050 --> 00:09:39,380
being true to open source keeping it

00:09:36,420 --> 00:09:39,380
both free and

00:09:39,570 --> 00:09:43,740
as open-source software but at the same

00:09:41,370 --> 00:09:47,250
time build a successful business around

00:09:43,740 --> 00:09:49,800
this so there's only one billion-dollar

00:09:47,250 --> 00:09:52,590
open-source business today that's red

00:09:49,800 --> 00:09:54,300
hat and many of us in this room are on

00:09:52,590 --> 00:09:56,280
the journey to trying to create the

00:09:54,300 --> 00:09:59,040
second billion-dollar open-source

00:09:56,280 --> 00:10:00,990
business whether that's nginx or

00:09:59,040 --> 00:10:04,740
something else we're all trying to

00:10:00,990 --> 00:10:07,400
ultimately get to that same goal and for

00:10:04,740 --> 00:10:14,910
us it really is about striking a balance

00:10:07,400 --> 00:10:17,430
so when nginx was formed into a company

00:10:14,910 --> 00:10:19,500
in 2011 there were a lot of changes

00:10:17,430 --> 00:10:21,060
happening in the industry so there are

00:10:19,500 --> 00:10:23,430
always a lot of changes happening in the

00:10:21,060 --> 00:10:25,080
industry the traditional three-tier

00:10:23,430 --> 00:10:27,810
architecture --zz were moving towards

00:10:25,080 --> 00:10:29,850
microservices really complex protocols

00:10:27,810 --> 00:10:32,580
were being replaced with very very

00:10:29,850 --> 00:10:34,590
simple and web-based protocols I'd like

00:10:32,580 --> 00:10:36,630
to say we were moving to containers but

00:10:34,590 --> 00:10:38,400
in this audience someone will point out

00:10:36,630 --> 00:10:40,410
to me the containers were around longer

00:10:38,400 --> 00:10:41,910
than most things on the screen here but

00:10:40,410 --> 00:10:45,110
containers in their modern form

00:10:41,910 --> 00:10:48,960
containers within Linux environments and

00:10:45,110 --> 00:10:50,730
DevOps was very much becoming an agile

00:10:48,960 --> 00:10:54,480
methodologies were very much becoming

00:10:50,730 --> 00:10:57,990
the mechanism embraced by companies both

00:10:54,480 --> 00:11:00,720
culturally and technology-wise and when

00:10:57,990 --> 00:11:03,570
this happens engineers will typically

00:11:00,720 --> 00:11:05,880
run toward tools that can solve the

00:11:03,570 --> 00:11:11,310
problems that these new approaches

00:11:05,880 --> 00:11:12,840
create for them and as we were doing

00:11:11,310 --> 00:11:16,560
this or excuse me as we were forming

00:11:12,840 --> 00:11:19,860
into a company our CEO Gus Robertson was

00:11:16,560 --> 00:11:21,630
speaking to enterprises about how they

00:11:19,860 --> 00:11:24,780
were dealing with these challenges how

00:11:21,630 --> 00:11:26,600
they were using nginx and the answer

00:11:24,780 --> 00:11:30,360
that came back was very very clear

00:11:26,600 --> 00:11:32,690
everybody was was using nginx at the

00:11:30,360 --> 00:11:35,250
core of delivering their applications

00:11:32,690 --> 00:11:38,460
but they were using a whole host of

00:11:35,250 --> 00:11:40,380
other open-source tools around it to try

00:11:38,460 --> 00:11:43,830
and deliver their applications to try

00:11:40,380 --> 00:11:46,430
and deliver great online experiences for

00:11:43,830 --> 00:11:46,430
their customers

00:11:46,600 --> 00:11:52,560
and so that in itself became how nginx

00:11:49,630 --> 00:11:55,870
was going to be as sustainable and

00:11:52,560 --> 00:11:58,800
ultimately profitable business and that

00:11:55,870 --> 00:12:02,260
was through the creation of nginx Plus

00:11:58,800 --> 00:12:05,020
nginx plus is our enterprise focused

00:12:02,260 --> 00:12:08,710
application delivery platform and it is

00:12:05,020 --> 00:12:11,590
taking all of those tools and additional

00:12:08,710 --> 00:12:14,380
features and functions and scripts and

00:12:11,590 --> 00:12:16,900
glue the people were creating around the

00:12:14,380 --> 00:12:19,750
open-source project nginx the

00:12:16,900 --> 00:12:22,510
open-source web server to use it as an

00:12:19,750 --> 00:12:24,850
application delivery platform but we

00:12:22,510 --> 00:12:28,390
were going to take a lot of the downside

00:12:24,850 --> 00:12:30,970
of doing that away from enterprises make

00:12:28,390 --> 00:12:34,180
it more sustainable more scalable by

00:12:30,970 --> 00:12:35,950
building it into a single platform that

00:12:34,180 --> 00:12:41,830
enables companies to do flawless

00:12:35,950 --> 00:12:44,500
application delivery so nginx plus is an

00:12:41,830 --> 00:12:46,360
open core model so we have the

00:12:44,500 --> 00:12:49,720
open-source nginx project which will

00:12:46,360 --> 00:12:51,670
always remain open-source and on top of

00:12:49,720 --> 00:12:53,500
that we have an additional set of

00:12:51,670 --> 00:12:57,570
features and functions which are only

00:12:53,500 --> 00:13:00,280
available in the nginx plus product as

00:12:57,570 --> 00:13:01,600
with pretty much every commercial open

00:13:00,280 --> 00:13:03,760
source offering today it's

00:13:01,600 --> 00:13:05,230
subscription-based although it's

00:13:03,760 --> 00:13:08,290
something we're particularly flexible

00:13:05,230 --> 00:13:09,970
about because in today's modern

00:13:08,290 --> 00:13:11,560
auto-scaling environments and

00:13:09,970 --> 00:13:13,660
containerized environments you get

00:13:11,560 --> 00:13:16,000
massive sprawl so it's very hard to just

00:13:13,660 --> 00:13:17,770
do sort of traditional subscription

00:13:16,000 --> 00:13:21,340
pricing so we're very flexible

00:13:17,770 --> 00:13:24,730
commercial models unlimited consumption

00:13:21,340 --> 00:13:27,520
models and what this allows us to do is

00:13:24,730 --> 00:13:30,640
to continue the development of the nginx

00:13:27,520 --> 00:13:33,460
project so by having this commercial

00:13:30,640 --> 00:13:35,610
offering we can sustainably keep

00:13:33,460 --> 00:13:38,710
developing both the open source project

00:13:35,610 --> 00:13:43,350
while we build a business based on the

00:13:38,710 --> 00:13:43,350
enterprise application delivery platform

00:13:44,910 --> 00:13:49,310
so

00:13:46,570 --> 00:13:53,810
let's take a look at what that platform

00:13:49,310 --> 00:13:59,980
does how people are using it and what

00:13:53,810 --> 00:14:02,770
its use cases are so that's interesting

00:13:59,980 --> 00:14:05,720
here we go again

00:14:02,770 --> 00:14:07,460
there builds on us this is what happens

00:14:05,720 --> 00:14:10,810
when you steal slides from somebody else

00:14:07,460 --> 00:14:14,180
you don't know there are builds on us so

00:14:10,810 --> 00:14:17,150
flawless application delivery focuses

00:14:14,180 --> 00:14:19,520
around five different areas you need to

00:14:17,150 --> 00:14:21,320
have advanced load balancing and caching

00:14:19,520 --> 00:14:23,330
so you need to be able to accelerate

00:14:21,320 --> 00:14:25,340
your application you need to be able to

00:14:23,330 --> 00:14:27,080
scale your application you need to make

00:14:25,340 --> 00:14:30,170
sure that your application is always

00:14:27,080 --> 00:14:31,760
available to your customers as part of

00:14:30,170 --> 00:14:33,920
that you also have to have health checks

00:14:31,760 --> 00:14:35,600
so if you don't have active health check

00:14:33,920 --> 00:14:37,010
something that's proactively checking

00:14:35,600 --> 00:14:39,380
whether your application is working

00:14:37,010 --> 00:14:41,300
properly or not then it's going to be a

00:14:39,380 --> 00:14:42,890
customer who discovers it's going to be

00:14:41,300 --> 00:14:44,090
a live customer connection that

00:14:42,890 --> 00:14:47,000
discovers whether or not your

00:14:44,090 --> 00:14:49,760
application is available you need

00:14:47,000 --> 00:14:53,480
extremely good security and access

00:14:49,760 --> 00:14:57,620
controls both to mitigate against bad

00:14:53,480 --> 00:14:59,560
actors as well as unintentional mishaps

00:14:57,620 --> 00:15:01,910
towards your traffic whether that's

00:14:59,560 --> 00:15:03,680
distributed denial of service attacks

00:15:01,910 --> 00:15:06,950
whether that is people trying to do

00:15:03,680 --> 00:15:09,410
cross-site scripting SQL injection you

00:15:06,950 --> 00:15:10,760
name it you're just as familiar as I am

00:15:09,410 --> 00:15:13,250
with what it takes to secure an

00:15:10,760 --> 00:15:16,250
application you need to be able to

00:15:13,250 --> 00:15:18,850
monitor it and manage it whether that's

00:15:16,250 --> 00:15:21,290
through native tools that come with your

00:15:18,850 --> 00:15:24,770
application delivery platform or by

00:15:21,290 --> 00:15:26,140
plugging it into other other

00:15:24,770 --> 00:15:28,010
applications or excuse me other

00:15:26,140 --> 00:15:31,010
application performance monitoring

00:15:28,010 --> 00:15:33,980
platforms and finally you need to have

00:15:31,010 --> 00:15:35,990
that backed up by somebody in a moment

00:15:33,980 --> 00:15:39,560
of crisis there's no point in turning to

00:15:35,990 --> 00:15:43,160
a community to solve your sev one issue

00:15:39,560 --> 00:15:46,460
at midnight on a Friday night when your

00:15:43,160 --> 00:15:50,960
entire customer base is off the air so

00:15:46,460 --> 00:15:54,950
we built nginx around a number of

00:15:50,960 --> 00:15:57,530
different areas or nginx plus it can be

00:15:54,950 --> 00:15:59,450
used as an advanced load balancer it can

00:15:57,530 --> 00:16:00,230
be used as a Content cache it can be

00:15:59,450 --> 00:16:01,850
used as

00:16:00,230 --> 00:16:04,430
webserver just like the open-source

00:16:01,850 --> 00:16:06,800
project it can be used for doing the

00:16:04,430 --> 00:16:11,300
security as well as the management and

00:16:06,800 --> 00:16:14,390
the monitoring so we can liken this to

00:16:11,300 --> 00:16:16,400
the engine of a car or excuse me liken

00:16:14,390 --> 00:16:18,770
it to an engine an engine doesn't have

00:16:16,400 --> 00:16:21,410
to just be used in a car you can use an

00:16:18,770 --> 00:16:23,420
engine in a water pump you can use it in

00:16:21,410 --> 00:16:26,210
an electricity generator you can use it

00:16:23,420 --> 00:16:29,120
in a bus in a car in a motorbike so

00:16:26,210 --> 00:16:31,970
nginx plus is that engine with so many

00:16:29,120 --> 00:16:38,060
different use cases we'll have a look at

00:16:31,970 --> 00:16:41,240
those use cases in a minute before we

00:16:38,060 --> 00:16:43,040
get on to the kind of additional

00:16:41,240 --> 00:16:46,400
features and functions that we have

00:16:43,040 --> 00:16:49,280
built into nginx plus if we look at what

00:16:46,400 --> 00:16:51,650
we deliver in that subscription um first

00:16:49,280 --> 00:16:54,680
and foremost in that list is proactive

00:16:51,650 --> 00:16:56,780
security updates and bug fixes there's a

00:16:54,680 --> 00:16:58,400
tipping point in industry and in

00:16:56,780 --> 00:17:01,090
enterprise everybody note here knows

00:16:58,400 --> 00:17:04,040
this I think where the risk of

00:17:01,090 --> 00:17:05,720
unsupported open source software is just

00:17:04,040 --> 00:17:09,470
not something that you can take for your

00:17:05,720 --> 00:17:11,810
business it's not worth the exposure the

00:17:09,470 --> 00:17:15,200
cost to your business if something goes

00:17:11,810 --> 00:17:17,000
wrong so the first thing we do even if

00:17:15,200 --> 00:17:19,370
you're not using the additional features

00:17:17,000 --> 00:17:21,500
and functions of nginx plus is we

00:17:19,370 --> 00:17:26,330
provide proactive security updates and

00:17:21,500 --> 00:17:30,230
bug fixes so in real terms before a CVE

00:17:26,330 --> 00:17:32,900
is ever published before a patch ever

00:17:30,230 --> 00:17:35,720
goes out to the community our nginx +

00:17:32,900 --> 00:17:39,110
customers have proactively received the

00:17:35,720 --> 00:17:41,480
fix for those bugs before they go public

00:17:39,110 --> 00:17:42,740
because we see it right with three

00:17:41,480 --> 00:17:45,590
hundred and fifty million websites

00:17:42,740 --> 00:17:48,260
running nginx we see when we release a

00:17:45,590 --> 00:17:51,170
patch people are immediately reviewing

00:17:48,260 --> 00:17:52,910
that patch to see what exploits are we

00:17:51,170 --> 00:17:55,520
fixing what are we trying to patch and

00:17:52,910 --> 00:17:59,510
can they exploit that across the massive

00:17:55,520 --> 00:18:01,280
public facing install base of nginx so

00:17:59,510 --> 00:18:02,960
we make sure that our enterprise

00:18:01,280 --> 00:18:05,570
customers do not have to worry about

00:18:02,960 --> 00:18:07,520
that they have at least two weeks of

00:18:05,570 --> 00:18:09,710
having received that patch before they

00:18:07,520 --> 00:18:12,340
have to excuse me before we will publish

00:18:09,710 --> 00:18:12,340
the CV

00:18:12,470 --> 00:18:18,110
and that doesn't just go for security it

00:18:15,230 --> 00:18:22,639
goes for ordinary bug fixes as well we

00:18:18,110 --> 00:18:25,039
have 24/7 support with an SLA down to 30

00:18:22,639 --> 00:18:28,460
minutes in fact our average response

00:18:25,039 --> 00:18:31,669
time for this quarter for q2 is 27

00:18:28,460 --> 00:18:34,130
minutes which isn't bad and then actual

00:18:31,669 --> 00:18:37,250
fact because our users tend to be so

00:18:34,130 --> 00:18:38,840
technical they typically will submit an

00:18:37,250 --> 00:18:40,549
email ticket rather than a telephone

00:18:38,840 --> 00:18:43,190
ticket because they can put a lot of

00:18:40,549 --> 00:18:45,830
information into that email and on

00:18:43,190 --> 00:18:48,169
average when they do we give them that

00:18:45,830 --> 00:18:50,330
give them the full fix in the first

00:18:48,169 --> 00:18:53,059
response so you're looking at people

00:18:50,330 --> 00:18:58,389
getting a fix to a save one issue in 27

00:18:53,059 --> 00:19:00,500
minutes normally when we get but a

00:18:58,389 --> 00:19:02,120
support tickets in its dent

00:19:00,500 --> 00:19:05,929
configuration or environmental issues

00:19:02,120 --> 00:19:08,779
but occasionally we do have people

00:19:05,929 --> 00:19:10,639
identify issues within nginx itself so

00:19:08,779 --> 00:19:14,059
we have the ability to issue hot fixes

00:19:10,639 --> 00:19:15,740
so our support team are co-located quite

00:19:14,059 --> 00:19:18,620
literally in the same space as our core

00:19:15,740 --> 00:19:21,200
engineering team and when something is

00:19:18,620 --> 00:19:23,870
identified as being a flaw or a problem

00:19:21,200 --> 00:19:26,630
in nginx plus we can issue a hotfix

00:19:23,870 --> 00:19:28,399
directly to the customer if they are off

00:19:26,630 --> 00:19:30,710
the air to get them back on the air

00:19:28,399 --> 00:19:33,620
while that bug fix then goes through the

00:19:30,710 --> 00:19:36,110
normal QA process and gets pushed out to

00:19:33,620 --> 00:19:38,419
to all of our customers so really the

00:19:36,110 --> 00:19:41,679
key being get that application back and

00:19:38,419 --> 00:19:41,679
available as quickly as possible

00:19:41,990 --> 00:19:46,850
we also do certification so we certify

00:19:44,179 --> 00:19:48,740
across certain Linux distributions bit

00:19:46,850 --> 00:19:51,110
like your operating system certifying

00:19:48,740 --> 00:19:53,600
against Hardware if it doesn't work it's

00:19:51,110 --> 00:19:55,880
our problem not your problem similarly

00:19:53,600 --> 00:19:57,830
we have a growing ecosystem around third

00:19:55,880 --> 00:20:00,409
party module providers who are

00:19:57,830 --> 00:20:03,320
certifying module plug-ins for nginx

00:20:00,409 --> 00:20:05,510
plus the software binaries that you get

00:20:03,320 --> 00:20:07,700
fringe nx+ have been through proper QA

00:20:05,510 --> 00:20:09,679
and testing it's not like the release

00:20:07,700 --> 00:20:12,110
cycle of the open source project which

00:20:09,679 --> 00:20:14,389
is a much much quicker release cycle so

00:20:12,110 --> 00:20:16,130
of course there is QA involved in that

00:20:14,389 --> 00:20:18,230
release cycle but it is not to the same

00:20:16,130 --> 00:20:21,950
enterprise level that you get with nginx

00:20:18,230 --> 00:20:23,899
plus it's a subscription so as new

00:20:21,950 --> 00:20:25,930
versions become available you get those

00:20:23,899 --> 00:20:28,130
new versions obviously

00:20:25,930 --> 00:20:29,660
confidentiality is an interesting one

00:20:28,130 --> 00:20:31,760
and this is something that came up with

00:20:29,660 --> 00:20:35,120
one of our customers recently and that

00:20:31,760 --> 00:20:37,250
is that when you have an issue do you

00:20:35,120 --> 00:20:39,890
really want your engineers to be seen

00:20:37,250 --> 00:20:41,570
out in public forums discussing that

00:20:39,890 --> 00:20:44,420
issue searching for problems for that

00:20:41,570 --> 00:20:46,280
issue so the confidentiality that comes

00:20:44,420 --> 00:20:49,250
with being able to call our engineers

00:20:46,280 --> 00:20:52,760
and say hey this is you know large bank

00:20:49,250 --> 00:20:54,260
large telco we have a problem you don't

00:20:52,760 --> 00:20:55,700
want those you don't want those

00:20:54,260 --> 00:20:57,830
questions being asked in public that

00:20:55,700 --> 00:21:00,110
confidentiality is very important or

00:20:57,830 --> 00:21:02,120
even the very nature of the query that

00:21:00,110 --> 00:21:05,690
they might have could lead to you being

00:21:02,120 --> 00:21:07,910
exposed and then the rest you have

00:21:05,690 --> 00:21:12,110
product documentation you have stable

00:21:07,910 --> 00:21:15,050
API interfaces we offer indemnity over

00:21:12,110 --> 00:21:17,870
the certain parts of the distribution

00:21:15,050 --> 00:21:20,870
and our enterprise customers are also

00:21:17,870 --> 00:21:22,730
part of a product advisory group so they

00:21:20,870 --> 00:21:24,890
can potentially contribute to the

00:21:22,730 --> 00:21:28,910
direction of the product as well

00:21:24,890 --> 00:21:30,470
and that's all before we get to the

00:21:28,910 --> 00:21:35,990
additional features and functions of

00:21:30,470 --> 00:21:38,210
engine X plus so these are focused and

00:21:35,990 --> 00:21:40,010
unconscious of the time so I'll speed up

00:21:38,210 --> 00:21:41,870
if the slides don't already start doing

00:21:40,010 --> 00:21:44,210
it for me again

00:21:41,870 --> 00:21:47,210
so the key features and functions of

00:21:44,210 --> 00:21:50,800
engine X plus are around load balancing

00:21:47,210 --> 00:21:56,090
so we provide load balancing for HTTP

00:21:50,800 --> 00:21:57,680
TCP UDP HTTP so even though we're

00:21:56,090 --> 00:21:59,900
sitting at the top of the stack we still

00:21:57,680 --> 00:22:02,690
go down a couple of layers we provide

00:21:59,900 --> 00:22:04,490
session persistence we provide really

00:22:02,690 --> 00:22:08,060
fine-grained cache control through the

00:22:04,490 --> 00:22:09,700
API we provide application based health

00:22:08,060 --> 00:22:12,140
checks so not just is my application

00:22:09,700 --> 00:22:15,650
responding yes or no but what is it

00:22:12,140 --> 00:22:17,930
responding with is it a 400 is it a 500

00:22:15,650 --> 00:22:19,460
those are still responses but they're

00:22:17,930 --> 00:22:20,720
not the right responses that's certainly

00:22:19,460 --> 00:22:23,420
not something you would want to pass

00:22:20,720 --> 00:22:27,290
through to a customer we also do service

00:22:23,420 --> 00:22:28,820
discovery through DNS so we can use most

00:22:27,290 --> 00:22:31,430
of the service discovery tools that

00:22:28,820 --> 00:22:33,460
you'd be familiar with on the security

00:22:31,430 --> 00:22:37,670
side we have a Web Application Firewall

00:22:33,460 --> 00:22:39,080
it's based on modsecurity 3.0 if any of

00:22:37,670 --> 00:22:41,720
you here have tried to use mods

00:22:39,080 --> 00:22:45,010
security with nginx before it typically

00:22:41,720 --> 00:22:48,140
involved recompiling modsecurity 2.9 the

00:22:45,010 --> 00:22:50,600
apache intended release putting it on

00:22:48,140 --> 00:22:52,789
nginx unstable not suitable for an

00:22:50,600 --> 00:22:55,429
enterprise deployment so we have our own

00:22:52,789 --> 00:22:58,669
ground of rewrite of mod security

00:22:55,429 --> 00:23:01,250
available on nginx plus we also do Java

00:22:58,669 --> 00:23:05,179
web token authentication we do single

00:23:01,250 --> 00:23:06,409
sign-on through open ID connect we have

00:23:05,179 --> 00:23:09,260
a lot of additional features and

00:23:06,409 --> 00:23:11,750
functions around streaming and bandwidth

00:23:09,260 --> 00:23:14,120
management of that streaming we do live

00:23:11,750 --> 00:23:16,279
activity monitoring and one of the most

00:23:14,120 --> 00:23:17,870
important things in the kind of

00:23:16,279 --> 00:23:20,169
environments that I suspect we're all

00:23:17,870 --> 00:23:22,940
working in today is on-the-fly

00:23:20,169 --> 00:23:25,220
reconfiguration so in other words as you

00:23:22,940 --> 00:23:27,049
do multiple releases during a day you're

00:23:25,220 --> 00:23:28,880
not interrupting the availability of

00:23:27,049 --> 00:23:30,889
your application just because you're

00:23:28,880 --> 00:23:34,149
updating your config so whether that's

00:23:30,889 --> 00:23:36,620
pushing a new release or removing

00:23:34,149 --> 00:23:42,019
something from your cluster it's not

00:23:36,620 --> 00:23:43,669
affected so very very quickly if we look

00:23:42,019 --> 00:23:46,730
at the traditional use cases for this

00:23:43,669 --> 00:23:48,769
first and foremost is replacing the

00:23:46,730 --> 00:23:51,350
traditional hardware load balancer so

00:23:48,769 --> 00:23:54,980
that's your f5 big IP citrix netscaler

00:23:51,350 --> 00:23:58,429
and so on whether it's a physical blinds

00:23:54,980 --> 00:24:00,710
or virtual appliance nginx plus is a

00:23:58,429 --> 00:24:03,470
tiny software footprint that essentially

00:24:00,710 --> 00:24:06,470
runs anywhere Linux can run so that is

00:24:03,470 --> 00:24:08,389
hardware virtualization private cloud

00:24:06,470 --> 00:24:11,059
public cloud in containers it really

00:24:08,389 --> 00:24:13,399
doesn't matter so it's very flexible

00:24:11,059 --> 00:24:15,830
it's a fraction of the cost typically

00:24:13,399 --> 00:24:18,139
there are no artificial limits put on it

00:24:15,830 --> 00:24:20,389
so your fruit put is not limited by us

00:24:18,139 --> 00:24:21,919
so the bigger infrastructure you put it

00:24:20,389 --> 00:24:26,419
on the more throughput you can do with

00:24:21,919 --> 00:24:28,760
it and it's DevOps friendly you can plug

00:24:26,419 --> 00:24:30,919
this into your automation tools you can

00:24:28,760 --> 00:24:33,169
do many reloads during the day it

00:24:30,919 --> 00:24:35,389
absolutely doesn't matter so there are

00:24:33,169 --> 00:24:37,850
two really common deployments one is

00:24:35,389 --> 00:24:40,970
where you would replace your traditional

00:24:37,850 --> 00:24:43,130
hardware load balancer that's a good

00:24:40,970 --> 00:24:44,809
solution saves you a lot of money the

00:24:43,130 --> 00:24:47,299
other is where you would stick it behind

00:24:44,809 --> 00:24:49,309
an existing set of hardware load

00:24:47,299 --> 00:24:52,010
balancers and this is a very common

00:24:49,309 --> 00:24:54,740
scenario whereby a DevOps

00:24:52,010 --> 00:24:56,870
need to make updates frequently they're

00:24:54,740 --> 00:24:58,490
doing releases during a day but they

00:24:56,870 --> 00:25:00,140
can't get the network team to keep up

00:24:58,490 --> 00:25:02,450
because making a change to the hardware

00:25:00,140 --> 00:25:04,730
load balancers means submitting a ticket

00:25:02,450 --> 00:25:07,520
that ticket gets worked on that ticket

00:25:04,730 --> 00:25:11,390
gets updated eventually it's certainly

00:25:07,520 --> 00:25:14,630
not conducive to the kind to agile

00:25:11,390 --> 00:25:22,059
development and the kind of updates that

00:25:14,630 --> 00:25:22,059
a DevOps team needs to do from there I

00:25:22,780 --> 00:25:28,910
the next use cases people using us for

00:25:26,090 --> 00:25:31,100
cloud migration and we see this an awful

00:25:28,910 --> 00:25:34,100
lot particularly in banking and telco

00:25:31,100 --> 00:25:37,610
where people need to very gradually over

00:25:34,100 --> 00:25:40,220
time migrate from an older version of an

00:25:37,610 --> 00:25:42,830
application to a new one not a forklift

00:25:40,220 --> 00:25:45,049
upgrade so what people are doing is

00:25:42,830 --> 00:25:47,419
sticking nginx plus in front of their

00:25:45,049 --> 00:25:50,390
existing application and using its

00:25:47,419 --> 00:25:52,820
content based routing to gradually over

00:25:50,390 --> 00:25:55,130
time redirect bits of that application

00:25:52,820 --> 00:25:58,480
into a new infrastructure or a new

00:25:55,130 --> 00:26:02,480
environment so it's a very scalable

00:25:58,480 --> 00:26:05,120
maintainable way of slowly moving your

00:26:02,480 --> 00:26:08,530
application bit by bit over time it also

00:26:05,120 --> 00:26:10,669
helps people who are moving to more

00:26:08,530 --> 00:26:12,770
microservices style architectures which

00:26:10,669 --> 00:26:16,460
I'll talk about in a second the other

00:26:12,770 --> 00:26:18,490
thing this does is putting engine x+ in

00:26:16,460 --> 00:26:21,080
front of that legacy application

00:26:18,490 --> 00:26:23,510
instantly gives that application scale

00:26:21,080 --> 00:26:26,179
we see it time and time again that just

00:26:23,510 --> 00:26:27,970
sticking a standard configuration of

00:26:26,179 --> 00:26:30,919
nginx plus in front of an application

00:26:27,970 --> 00:26:34,370
the smoothing effect that nginx Plus

00:26:30,919 --> 00:26:36,799
will give gives a performance increase

00:26:34,370 --> 00:26:41,090
and therefore longevity to that legacy

00:26:36,799 --> 00:26:43,850
application so what we're moving towards

00:26:41,090 --> 00:26:46,190
then is using nginx plus as your API

00:26:43,850 --> 00:26:48,110
gateway so it acts as that

00:26:46,190 --> 00:26:50,299
shock-absorber when you're getting all

00:26:48,110 --> 00:26:52,160
of those connections in and scales up

00:26:50,299 --> 00:26:54,320
really really smoothly and quickly and

00:26:52,160 --> 00:26:56,299
then scales down again as needed it's

00:26:54,320 --> 00:26:59,330
doing your security it's doing your

00:26:56,299 --> 00:27:00,770
routing based on the actual I was going

00:26:59,330 --> 00:27:02,360
to say based on the headers actually it

00:27:00,770 --> 00:27:05,450
can route based on pretty much kind of

00:27:02,360 --> 00:27:05,960
thing that comes in and again allows you

00:27:05,450 --> 00:27:08,510
to start

00:27:05,960 --> 00:27:11,960
breaking out applications slowly and

00:27:08,510 --> 00:27:13,730
surely over time and the ultimate

00:27:11,960 --> 00:27:15,350
evolution of this and it's probably what

00:27:13,730 --> 00:27:18,289
we spend most of our time talking about

00:27:15,350 --> 00:27:21,020
is it going into micro-services

00:27:18,289 --> 00:27:23,779
environments now this is something that

00:27:21,020 --> 00:27:26,179
in itself is probably a one-hour talk so

00:27:23,779 --> 00:27:28,789
I'll try and do it justice in 30 seconds

00:27:26,179 --> 00:27:32,779
or less essentially what we have is

00:27:28,789 --> 00:27:35,299
people putting nginx plus into every

00:27:32,779 --> 00:27:40,279
container in what's called a sidecar

00:27:35,299 --> 00:27:44,179
model so micro-services speaking to each

00:27:40,279 --> 00:27:47,450
other through nginx Plus that allows you

00:27:44,179 --> 00:27:49,250
first of all to secure through SSL all

00:27:47,450 --> 00:27:50,929
of the connections back and forth

00:27:49,250 --> 00:27:53,929
through the different micro services

00:27:50,929 --> 00:27:56,289
which might sound inefficient but nginx

00:27:53,929 --> 00:27:58,730
one through its natural efficiency and

00:27:56,289 --> 00:28:00,470
two through the fact that it uses

00:27:58,730 --> 00:28:02,990
keepalive D to maintain those

00:28:00,470 --> 00:28:05,059
connections and has session persistence

00:28:02,990 --> 00:28:07,520
means you don't have the normal overhead

00:28:05,059 --> 00:28:10,779
that comes with running SSL in between

00:28:07,520 --> 00:28:14,720
all of your micro services we've got the

00:28:10,779 --> 00:28:17,570
service discovery so it means that as

00:28:14,720 --> 00:28:19,820
you add more micro services as you scale

00:28:17,570 --> 00:28:21,980
out because you've had a peak demand on

00:28:19,820 --> 00:28:24,440
one part of your application you can

00:28:21,980 --> 00:28:27,789
make all of the existing containers or

00:28:24,440 --> 00:28:30,470
micro services they aware of the new

00:28:27,789 --> 00:28:32,360
instances that of course uses the

00:28:30,470 --> 00:28:35,659
on-the-fly reconfiguration as well to

00:28:32,360 --> 00:28:38,960
update the conflicts of them it gives

00:28:35,659 --> 00:28:40,820
you acceleration through caching and of

00:28:38,960 --> 00:28:42,770
course it's load balances and gives

00:28:40,820 --> 00:28:45,760
health checks through the entire

00:28:42,770 --> 00:28:48,860
architecture as well so this is a

00:28:45,760 --> 00:28:51,409
connective fabric between micro services

00:28:48,860 --> 00:28:53,870
that solves a lot of problems that

00:28:51,409 --> 00:28:56,480
people are having today and not every

00:28:53,870 --> 00:28:58,970
while not everybody is doing 100% of

00:28:56,480 --> 00:29:01,760
this architecture it's definitely where

00:28:58,970 --> 00:29:03,620
people are moving whether it's starting

00:29:01,760 --> 00:29:05,360
using nginx plus as an ingress

00:29:03,620 --> 00:29:08,480
controller at the edge of their

00:29:05,360 --> 00:29:10,130
application and then over time to put

00:29:08,480 --> 00:29:12,140
another one internally within that

00:29:10,130 --> 00:29:15,500
containerized environment to act as a

00:29:12,140 --> 00:29:17,960
centralized Rooter and then slowly but

00:29:15,500 --> 00:29:19,710
surely as the application grows moving

00:29:17,960 --> 00:29:27,289
to this sidecar model where you're

00:29:19,710 --> 00:29:33,149
nginx plus into every micro service so

00:29:27,289 --> 00:29:35,760
to summarize nginx plus is a DevOps

00:29:33,149 --> 00:29:38,039
centric enterprise application delivery

00:29:35,760 --> 00:29:41,850
platform so it works across physical

00:29:38,039 --> 00:29:44,039
virtual and all clouds it encourages

00:29:41,850 --> 00:29:46,399
growth as opposed to penalizing it so we

00:29:44,039 --> 00:29:49,020
don't put artificial limitations on

00:29:46,399 --> 00:29:51,750
throughput on connectivity or another

00:29:49,020 --> 00:29:53,730
thing like that we save you a truckload

00:29:51,750 --> 00:29:56,029
of money when you're doing it if you've

00:29:53,730 --> 00:30:00,870
been using traditional hardware or

00:29:56,029 --> 00:30:03,360
appliance based load balancers sticking

00:30:00,870 --> 00:30:05,399
engine X plus in front of legacy

00:30:03,360 --> 00:30:07,409
applications gives those legacy

00:30:05,399 --> 00:30:09,960
applications longevity

00:30:07,409 --> 00:30:11,840
it gives them scale it gives you the

00:30:09,960 --> 00:30:14,010
ability to scale out horizontally

00:30:11,840 --> 00:30:18,330
applications which don't naturally

00:30:14,010 --> 00:30:21,510
cluster and it gives you the time or the

00:30:18,330 --> 00:30:23,730
breadth to be able to gradually migrate

00:30:21,510 --> 00:30:25,770
those applications over time whether

00:30:23,730 --> 00:30:29,460
it's just from one stack to another or

00:30:25,770 --> 00:30:31,710
from physical or on-prem into cloud it

00:30:29,460 --> 00:30:33,870
really doesn't matter and we're solving

00:30:31,710 --> 00:30:35,730
real world problems that people have

00:30:33,870 --> 00:30:38,309
today around microservices and

00:30:35,730 --> 00:30:41,490
containerized environments we're

00:30:38,309 --> 00:30:43,500
mitigating the inherent risks that come

00:30:41,490 --> 00:30:45,990
to enterprise to large enterprise with

00:30:43,500 --> 00:30:49,260
open source software but at the same

00:30:45,990 --> 00:30:51,510
time allowing us to continue the

00:30:49,260 --> 00:30:54,000
development of a really great open

00:30:51,510 --> 00:30:56,250
source project that is the nginx web

00:30:54,000 --> 00:30:59,700
server and building a sustainable

00:30:56,250 --> 00:31:01,970
business while we're doing so and thank

00:30:59,700 --> 00:31:09,109
you very much

00:31:01,970 --> 00:31:09,109

YouTube URL: https://www.youtube.com/watch?v=SwD-LgVLbDs


