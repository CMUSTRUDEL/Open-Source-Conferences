Title: OW2con'17 Modern application design using SeedStack Marius Matei
Publication date: 2017-06-29
Playlist: OW2con 2017
Description: 
	The design of new information systems requires usage of cloud ready development frameworks like SeedStack. 
SeedStack coding approach comes with some major benefits: compliance with open source cloud standards, modular design and clean code. Using domain driven design and bounded context concept, the microservices are finely identified. 
Operational elements like performance measures, APIs for connecting ressources are provided by SeedStack in order to prepare the integration of a cloud ready application with the host.
SeedStack project templates and automation accelerate the development of cloud ready microservices.
This presentation demonstrates how to build and operate such microservices.
Captions: 
	00:00:01,960 --> 00:00:05,430
[Music]

00:00:05,480 --> 00:00:11,040
Thank You Stefan

00:00:08,099 --> 00:00:14,940
so we are very pleased to be here and to

00:00:11,040 --> 00:00:20,369
be an actor of this wonderful meeting so

00:00:14,940 --> 00:00:24,170
thank you w - and we'll try together to

00:00:20,369 --> 00:00:27,960
solve one of the most common problem in

00:00:24,170 --> 00:00:31,040
software engineering in great big

00:00:27,960 --> 00:00:38,090
enterprises its how to create

00:00:31,040 --> 00:00:42,329
application which better use the domain

00:00:38,090 --> 00:00:47,340
design of of the enterprise so the idea

00:00:42,329 --> 00:00:50,309
is to to capitalize around what we

00:00:47,340 --> 00:00:56,039
create commonly in the enterprises this

00:00:50,309 --> 00:00:59,059
is the domain and how to reuse two years

00:00:56,039 --> 00:01:03,799
ago and not only to to create talks and

00:00:59,059 --> 00:01:09,119
a small application so this go through

00:01:03,799 --> 00:01:15,360
quality close quote and this goes also

00:01:09,119 --> 00:01:18,810
through stacks and we also want to give

00:01:15,360 --> 00:01:21,240
an answer to another question how to run

00:01:18,810 --> 00:01:23,159
an application to every model platform

00:01:21,240 --> 00:01:26,369
and how to ensure from the beginning

00:01:23,159 --> 00:01:33,090
that our application is compatible with

00:01:26,369 --> 00:01:34,670
every modern platform so we have the

00:01:33,090 --> 00:01:37,490
solution it is set back

00:01:34,670 --> 00:01:40,049
so sit back it's an open source project

00:01:37,490 --> 00:01:46,770
since 2015

00:01:40,049 --> 00:01:50,880
it's MLP 2-0 license and there was

00:01:46,770 --> 00:01:53,520
created in a hunter pilant PSA group to

00:01:50,880 --> 00:01:57,649
avoid common problems in development

00:01:53,520 --> 00:02:01,290
like complex monolithic application like

00:01:57,649 --> 00:02:03,479
how to standard the business code in our

00:02:01,290 --> 00:02:07,399
application and how to reuse it how to

00:02:03,479 --> 00:02:10,390
better reuse the code and have a good

00:02:07,399 --> 00:02:13,770
governance of the components in our

00:02:10,390 --> 00:02:15,970
enterprise application so it's helped

00:02:13,770 --> 00:02:18,640
enterprises to build a software

00:02:15,970 --> 00:02:22,450
development strategy for all the

00:02:18,640 --> 00:02:27,610
business areas and it is the result of

00:02:22,450 --> 00:02:31,390
the experience in usage of frameworks in

00:02:27,610 --> 00:02:35,950
a lot of domains like banking

00:02:31,390 --> 00:02:39,010
manufacturing retail infrastructure

00:02:35,950 --> 00:02:46,630
digital and also so it is used in all

00:02:39,010 --> 00:02:49,900
the common areas of PACA group and the

00:02:46,630 --> 00:02:53,160
Cystic it's it's a full enterprise

00:02:49,900 --> 00:02:56,200
development solution which is based

00:02:53,160 --> 00:03:00,700
first on a Java framework or a small

00:02:56,200 --> 00:03:04,060
Java framework which has a which has a

00:03:00,700 --> 00:03:07,810
very modular architecture with plugins

00:03:04,060 --> 00:03:10,959
and kernels on this on the top of this

00:03:07,810 --> 00:03:13,300
Java framework we built a domain driven

00:03:10,959 --> 00:03:19,080
design framework which helps us to

00:03:13,300 --> 00:03:24,480
better design and code the domain

00:03:19,080 --> 00:03:27,160
business domain concepts then we have an

00:03:24,480 --> 00:03:32,080
you user interface framework which is

00:03:27,160 --> 00:03:34,570
w20 which accelerates development on the

00:03:32,080 --> 00:03:37,330
user interfaces it is based on angular

00:03:34,570 --> 00:03:41,110
framework and then we have an ecosystem

00:03:37,330 --> 00:03:44,340
of add-ons which gives answers the

00:03:41,110 --> 00:03:47,680
simplest answers for the developers

00:03:44,340 --> 00:03:50,500
technical answer or function answer and

00:03:47,680 --> 00:03:53,260
this is an extensible ecosystem that

00:03:50,500 --> 00:03:58,690
means everyone who wants to add its own

00:03:53,260 --> 00:04:03,670
contribution can can add its own plug-in

00:03:58,690 --> 00:04:08,500
on the city tech infrastructure but so

00:04:03,670 --> 00:04:12,459
city tack it's not only let's say our

00:04:08,500 --> 00:04:15,700
code it it's an integration of standards

00:04:12,459 --> 00:04:17,229
from the market and these are standards

00:04:15,700 --> 00:04:21,489
from the from the open source market of

00:04:17,229 --> 00:04:23,500
course and we just assemble open source

00:04:21,489 --> 00:04:27,660
standards and proprietary technologies

00:04:23,500 --> 00:04:34,620
and you have a list of our ass words

00:04:27,660 --> 00:04:38,050
chosen from the market like from the lw2

00:04:34,620 --> 00:04:41,170
platform known project we have also

00:04:38,050 --> 00:04:44,140
others like elasticsearch angularjs

00:04:41,170 --> 00:04:46,840
required Ria's for the interface user

00:04:44,140 --> 00:04:49,510
interfaces we have a lot of answers on

00:04:46,840 --> 00:04:56,500
the communication part as mqtt as a

00:04:49,510 --> 00:05:02,050
metro as Jersey and also so I think the

00:04:56,500 --> 00:05:04,600
best s answer is the tool to to take to

00:05:02,050 --> 00:05:08,170
give some code to code something as I'll

00:05:04,600 --> 00:05:10,780
show to the people how we can develop

00:05:08,170 --> 00:05:13,540
together and application please Orion

00:05:10,780 --> 00:05:16,960
hello everyone I will show you a quick

00:05:13,540 --> 00:05:20,620
demo of what sister can do if everything

00:05:16,960 --> 00:05:23,320
is working properly today I have some

00:05:20,620 --> 00:05:25,120
problems with the VPN so I may not be

00:05:23,320 --> 00:05:28,390
able to show you the running application

00:05:25,120 --> 00:05:32,130
but we will start to generate it and we

00:05:28,390 --> 00:05:36,510
will see ok so let's go on the website

00:05:32,130 --> 00:05:39,790
you can see that we have a website for

00:05:36,510 --> 00:05:42,610
cross attack that everything you want to

00:05:39,790 --> 00:05:44,650
know for the documentation and things

00:05:42,610 --> 00:05:47,680
like you guide the development games and

00:05:44,650 --> 00:05:52,030
so on so we will go to the QuickStart

00:05:47,680 --> 00:05:57,070
and generate a microservice project from

00:05:52,030 --> 00:06:01,090
scratch okay so let's generate something

00:05:57,070 --> 00:06:05,160
it's hard to type and in talk with you

00:06:01,090 --> 00:06:09,250
this mic in hand so I will do my best

00:06:05,160 --> 00:06:13,510
no that's okay thanks so I will start by

00:06:09,250 --> 00:06:16,140
creating a rest project with a generator

00:06:13,510 --> 00:06:21,700
[Music]

00:06:16,140 --> 00:06:24,810
ok you just have to fill some little

00:06:21,700 --> 00:06:27,070
information about your project name and

00:06:24,810 --> 00:06:32,800
you will have a fully function

00:06:27,070 --> 00:06:35,380
functional project in a few seconds so I

00:06:32,800 --> 00:06:37,030
have prepared a demo finished project

00:06:35,380 --> 00:06:40,870
for later

00:06:37,030 --> 00:06:45,310
but for now we can just start the

00:06:40,870 --> 00:06:48,610
project with a run comment from tooling

00:06:45,310 --> 00:06:53,760
and you will have a micro service

00:06:48,610 --> 00:06:57,240
running rest based the micro service

00:06:53,760 --> 00:07:00,580
with a full technology stack integrated

00:06:57,240 --> 00:07:05,520
automatically so you can hear that it

00:07:00,580 --> 00:07:10,090
started let's go to the page so it's a

00:07:05,520 --> 00:07:14,770
basic micro service so you have a REST

00:07:10,090 --> 00:07:18,060
API it's HIPAA media enabled so you can

00:07:14,770 --> 00:07:21,000
write some level three a REST API and

00:07:18,060 --> 00:07:23,680
it's based on Java standard like check

00:07:21,000 --> 00:07:28,180
RS and things like that so you have a

00:07:23,680 --> 00:07:30,730
whole technological stack available for

00:07:28,180 --> 00:07:32,500
for you and you can start adding things

00:07:30,730 --> 00:07:36,610
like business code

00:07:32,500 --> 00:07:38,620
persistent and so on easily by adding

00:07:36,610 --> 00:07:43,090
add-ons and using the framework of

00:07:38,620 --> 00:07:46,060
functionalities okay so let's walk

00:07:43,090 --> 00:07:51,220
through the zero tutorial a bit so I

00:07:46,060 --> 00:07:55,120
want to do it complexity because it's

00:07:51,220 --> 00:07:58,120
quite long but here you can see that we

00:07:55,120 --> 00:08:02,500
can write some business code like like

00:07:58,120 --> 00:08:05,940
you what you can see here it's a very

00:08:02,500 --> 00:08:10,000
simple domain model of some business and

00:08:05,940 --> 00:08:13,960
it it uses the business framework or

00:08:10,000 --> 00:08:17,200
sits back to to implement this kind of

00:08:13,960 --> 00:08:21,520
of code in a modular and able to end

00:08:17,200 --> 00:08:24,970
maintainable fashion okay so you can I

00:08:21,520 --> 00:08:29,770
can show you all the steps but I have

00:08:24,970 --> 00:08:37,300
some finished project already I can show

00:08:29,770 --> 00:08:39,820
you so maybe you will see something in

00:08:37,300 --> 00:08:42,190
presentation mode ok so you have the

00:08:39,820 --> 00:08:46,270
your typical data project here with

00:08:42,190 --> 00:08:49,060
which is a maven project and you can see

00:08:46,270 --> 00:08:52,870
that we have already a package structure

00:08:49,060 --> 00:08:57,190
some packages are following the

00:08:52,870 --> 00:09:00,790
domain-driven design layout and you can

00:08:57,190 --> 00:09:05,410
see that we are we have here or domain

00:09:00,790 --> 00:09:11,200
aggregate with classes and things like

00:09:05,410 --> 00:09:13,510
that put directly with the business

00:09:11,200 --> 00:09:18,790
framework of our city tacky so I can

00:09:13,510 --> 00:09:21,220
switch to the view the the logical view

00:09:18,790 --> 00:09:26,290
of user application you can see here

00:09:21,220 --> 00:09:29,470
that we have some domain aggregate and

00:09:26,290 --> 00:09:31,540
the services and so on which are written

00:09:29,470 --> 00:09:36,820
with it with its back and the city tag

00:09:31,540 --> 00:09:39,010
takes care of all the the the technical

00:09:36,820 --> 00:09:41,589
integration you have a dependency

00:09:39,010 --> 00:09:44,050
injection you have a persistent here we

00:09:41,589 --> 00:09:48,010
have a MongoDB persistent enabled word

00:09:44,050 --> 00:09:51,010
but you can have GPA or reggie's or

00:09:48,010 --> 00:09:53,740
anything like that anything you want so

00:09:51,010 --> 00:09:57,100
I can show you the the library of atoms

00:09:53,740 --> 00:10:01,150
we have to give you a quick idea of of

00:09:57,100 --> 00:10:04,050
what we can do so you can see here that

00:10:01,150 --> 00:10:09,100
we have a lot of atoms we have several

00:10:04,050 --> 00:10:11,740
dozens of Adam and for things like cash

00:10:09,100 --> 00:10:16,780
or database access benchmarking

00:10:11,740 --> 00:10:19,900
messaging and so on and you can easily

00:10:16,780 --> 00:10:23,380
add your own add-on creating an add-on

00:10:19,900 --> 00:10:26,589
is a matter of one day or a bit more if

00:10:23,380 --> 00:10:28,740
it's complicated but but you you can you

00:10:26,589 --> 00:10:31,110
can do that really quick and we have a

00:10:28,740 --> 00:10:34,950
lot of open source items but also

00:10:31,110 --> 00:10:42,209
proprietary add-ons at PSA for internal

00:10:34,950 --> 00:10:45,060
things that we keep at PSA so maybe I

00:10:42,209 --> 00:10:49,140
can I don't think I can show you the

00:10:45,060 --> 00:10:54,750
result because if I run the application

00:10:49,140 --> 00:10:58,540
I have my docker which is not working

00:10:54,750 --> 00:11:01,340
with my VPN so I don't think I can do

00:10:58,540 --> 00:11:03,430
that I will try

00:11:01,340 --> 00:11:06,079
[Music]

00:11:03,430 --> 00:11:08,180
but you can see that we can launch the

00:11:06,079 --> 00:11:12,850
application but I think in it we not

00:11:08,180 --> 00:11:16,699
connect to the MongoDB cluster now it's

00:11:12,850 --> 00:11:19,720
it's telling that no MongoDB cluster is

00:11:16,699 --> 00:11:22,490
available and we not go through the

00:11:19,720 --> 00:11:25,730
techno stick and as a fixing process but

00:11:22,490 --> 00:11:30,639
you can get the ID of having an

00:11:25,730 --> 00:11:30,639
application really clean and really

00:11:31,059 --> 00:11:40,399
really well executed architecture easily

00:11:36,529 --> 00:11:53,269
with its tax okay so I will go back to

00:11:40,399 --> 00:11:58,930
the presentation I know since our last

00:11:53,269 --> 00:12:05,870
video to Adobe to our strategy has

00:11:58,930 --> 00:12:08,839
focused on two main to main axes the

00:12:05,870 --> 00:12:12,800
first one is the micro services so we

00:12:08,839 --> 00:12:15,920
want to create which exact domain-driven

00:12:12,800 --> 00:12:18,230
design microservices in order to have a

00:12:15,920 --> 00:12:20,509
better and better application and

00:12:18,230 --> 00:12:25,930
modular application so we introduced

00:12:20,509 --> 00:12:33,170
this this solution these add-ons in our

00:12:25,930 --> 00:12:36,889
last releases of the 74 in April and we

00:12:33,170 --> 00:12:41,720
also introduced another component atoms

00:12:36,889 --> 00:12:45,939
in the next one July release so please

00:12:41,720 --> 00:12:50,300
go on and this part of this tag this

00:12:45,939 --> 00:12:52,009
axis has an answer which is given by the

00:12:50,300 --> 00:12:54,309
domain driven design approach is an

00:12:52,009 --> 00:12:58,160
object approach at the standard of

00:12:54,309 --> 00:13:01,959
micro-services and so we introduced a

00:12:58,160 --> 00:13:07,089
set of add-ons to code this kind of

00:13:01,959 --> 00:13:10,449
microservices while as using the

00:13:07,089 --> 00:13:12,920
frameworks water which is a reference in

00:13:10,449 --> 00:13:14,110
designing the encoding and documenting

00:13:12,920 --> 00:13:16,269
ad is

00:13:14,110 --> 00:13:20,890
using cheaper media as an engine of the

00:13:16,269 --> 00:13:24,640
application saying as a HTTP very thin

00:13:20,890 --> 00:13:29,200
client and service discovery and the

00:13:24,640 --> 00:13:33,970
circuit breaker inherited from Netflix

00:13:29,200 --> 00:13:35,709
approaches that hystrix yes yes you can

00:13:33,970 --> 00:13:37,269
see that we have a lot of atoms and we

00:13:35,709 --> 00:13:39,700
are shifting to micro-services

00:13:37,269 --> 00:13:41,980
applications at PSA and in seed stack

00:13:39,700 --> 00:13:44,649
because we we think that it's a better

00:13:41,980 --> 00:13:47,610
architecture for for future application

00:13:44,649 --> 00:13:50,950
so we are focusing a lot on this and

00:13:47,610 --> 00:13:53,970
providing add-ons to to create a such

00:13:50,950 --> 00:13:58,149
architecture but you can still create a

00:13:53,970 --> 00:14:03,579
old-fashioned application with the UI

00:13:58,149 --> 00:14:06,610
framework and create some some classic

00:14:03,579 --> 00:14:08,740
things we see stack - so this is this

00:14:06,610 --> 00:14:11,740
was the first directions of macro

00:14:08,740 --> 00:14:14,709
services the second one is to be able to

00:14:11,740 --> 00:14:16,570
run an application on every platform so

00:14:14,709 --> 00:14:18,910
I give you an example it's our platform

00:14:16,570 --> 00:14:21,459
built on open source components like

00:14:18,910 --> 00:14:24,640
darker cones will provide huge traffic

00:14:21,459 --> 00:14:27,070
and also and we want to have an

00:14:24,640 --> 00:14:29,880
application which is designed from the

00:14:27,070 --> 00:14:33,550
beginning to be interfaced with

00:14:29,880 --> 00:14:37,920
monitoring aspects with change

00:14:33,550 --> 00:14:42,880
management tools which with logging with

00:14:37,920 --> 00:14:45,040
tools like data backup and also CMDB -

00:14:42,880 --> 00:14:47,019
so we want to introduce from the

00:14:45,040 --> 00:14:50,410
beginning of the development process all

00:14:47,019 --> 00:14:54,040
the needed tools to interact in the run

00:14:50,410 --> 00:14:55,540
process with this tool and to be more

00:14:54,040 --> 00:14:58,360
developed than we are today

00:14:55,540 --> 00:15:01,350
so also be able to run on every years

00:14:58,360 --> 00:15:04,690
and every passage was one of the the

00:15:01,350 --> 00:15:08,230
constraint which we given from this from

00:15:04,690 --> 00:15:11,130
start and now seed stock addresses this

00:15:08,230 --> 00:15:15,130
that develops issues and it integrates

00:15:11,130 --> 00:15:18,160
the measures for the metering and also

00:15:15,130 --> 00:15:22,920
docker through generators we have

00:15:18,160 --> 00:15:27,450
add-ons like console etcd metrics in

00:15:22,920 --> 00:15:30,029
for our seed seed platform and also

00:15:27,450 --> 00:15:34,550
introduced some agility add-ons like a

00:15:30,029 --> 00:15:39,079
flood wave a fly way to do a better

00:15:34,550 --> 00:15:43,170
migrate databases the basis and some

00:15:39,079 --> 00:15:47,990
benchmark to add on to give some issues

00:15:43,170 --> 00:15:51,690
about performance of our applications so

00:15:47,990 --> 00:15:57,000
since that has today all the elements to

00:15:51,690 --> 00:16:04,290
to build an application from the design

00:15:57,000 --> 00:16:08,010
and and to run process and I hope you'll

00:16:04,290 --> 00:16:12,240
help us to to make our EE to as a

00:16:08,010 --> 00:16:16,170
mainstream project and help us also by

00:16:12,240 --> 00:16:21,810
using assisted to be a pillar of W to

00:16:16,170 --> 00:16:24,930
infrastructure consumption okay yes we

00:16:21,810 --> 00:16:28,860
have a lot of project at PSA that are

00:16:24,930 --> 00:16:31,800
using a seed stack but we have we have a

00:16:28,860 --> 00:16:34,350
very small community so I would like you

00:16:31,800 --> 00:16:38,810
to to check for for cystic on the

00:16:34,350 --> 00:16:41,610
website try the tutorial or or do the

00:16:38,810 --> 00:16:44,970
scissor examples of or yourself or just

00:16:41,610 --> 00:16:48,720
browse the docs to see it can be used

00:16:44,970 --> 00:16:54,240
for your project and if you want you may

00:16:48,720 --> 00:16:56,970
be you may contribute to but let's start

00:16:54,240 --> 00:16:59,070
using it before contributing okay so

00:16:56,970 --> 00:17:04,899
thank you very much

00:16:59,070 --> 00:17:04,899

YouTube URL: https://www.youtube.com/watch?v=O7OHjHy4Zz4


