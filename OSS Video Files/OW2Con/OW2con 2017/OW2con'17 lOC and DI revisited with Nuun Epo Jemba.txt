Title: OW2con'17 lOC and DI revisited with Nuun Epo Jemba
Publication date: 2017-06-29
Playlist: OW2con 2017
Description: 
	In this track, we present, Nuun is a powerful and flexible micro-framework for building enterprise class applications and stacks. 

Nuun brings another experience where developers do not spend time working on configuration. Configuration can be encapsulated in modules so developers can focus on writing application code.

Nuun brings a clean kernel/plugin design plus a JSR 330 compliant injection mechanism backed by Google Guice. It is designed to be compatible with the major injection frameworks (spring, guice for now, tapestry, picocontainer, jodd, etc to come ...). Nuun aims to be a reference for enterprise application development.

Nuun makes a clear separation between stack developers and business developers. Stack developers will define convention and high level technical aspects by creating plugins. Then business developers will be free from configuration and will be able to focus on business issues not technical issues.
Captions: 
	00:00:01,960 --> 00:00:05,430
[Music]

00:00:05,960 --> 00:00:16,020
everyone my name is a podium Bell and

00:00:09,210 --> 00:00:18,830
the perhaps yes yeah well okay just no

00:00:16,020 --> 00:00:25,380
rule so yes I will try to present you

00:00:18,830 --> 00:00:29,490
noon which is a Turner that that had to

00:00:25,380 --> 00:00:31,410
organize big project big software and I

00:00:29,490 --> 00:00:33,780
will try to give you another of you

00:00:31,410 --> 00:00:37,800
because it's not possible to describe

00:00:33,780 --> 00:00:41,399
all the ologies work so let's let's get

00:00:37,800 --> 00:00:43,649
started so I am putting my I'm a

00:00:41,399 --> 00:00:48,120
freelance and super architect and

00:00:43,649 --> 00:00:50,370
developer and I'm working for 18 years

00:00:48,120 --> 00:00:53,129
on software software architecture

00:00:50,370 --> 00:00:56,879
I like DDD domain-driven design and a

00:00:53,129 --> 00:01:00,780
good practice and I'm the author of

00:00:56,879 --> 00:01:02,609
noone like to know and i'm the quote oh

00:01:00,780 --> 00:01:08,369
sweet stack and the creator of business

00:01:02,609 --> 00:01:10,950
framework so what is noon noon is a java

00:01:08,369 --> 00:01:13,409
micro framework for designing enterprise

00:01:10,950 --> 00:01:17,280
class applications and software stack

00:01:13,409 --> 00:01:19,200
and it is back on the inversion of

00:01:17,280 --> 00:01:22,530
control architectural pattern

00:01:19,200 --> 00:01:25,979
he helps organize the lifecycle of

00:01:22,530 --> 00:01:28,590
application he give building blocks to

00:01:25,979 --> 00:01:32,520
organize the life cycle of the owner of

00:01:28,590 --> 00:01:36,509
an application it is compatible with

00:01:32,520 --> 00:01:38,159
over the metal framework of the market

00:01:36,509 --> 00:01:41,280
spring juries and so on

00:01:38,159 --> 00:01:44,759
and we can connect all the injection

00:01:41,280 --> 00:01:47,610
framework that we want and noon relies

00:01:44,759 --> 00:01:52,350
on the standard and proven proven

00:01:47,610 --> 00:01:56,460
components GSS to trigger object via

00:01:52,350 --> 00:01:58,680
jewish we are using Jews inside noon for

00:01:56,460 --> 00:02:02,880
the dependency injection we are using

00:01:58,680 --> 00:02:05,070
service rotor for discoverability we are

00:02:02,880 --> 00:02:08,459
using reflections for class pass

00:02:05,070 --> 00:02:10,920
scanning and all of this is orchestrated

00:02:08,459 --> 00:02:13,920
by a camel plugin protocol that i am

00:02:10,920 --> 00:02:19,500
rated for managing excellency

00:02:13,920 --> 00:02:23,550
and coupling and cohesion a little bit

00:02:19,500 --> 00:02:26,250
of history when elaborating a software

00:02:23,550 --> 00:02:28,410
stack for major clients I found out that

00:02:26,250 --> 00:02:31,530
the existing dependency injection

00:02:28,410 --> 00:02:34,740
injection framework was limited we have

00:02:31,530 --> 00:02:38,550
allowed a lake of explicit interface

00:02:34,740 --> 00:02:41,040
driven injection we have a lack of min

00:02:38,550 --> 00:02:44,160
to create my own convention

00:02:41,040 --> 00:02:47,190
especially when I want to automate the

00:02:44,160 --> 00:02:51,840
creation of binding this mission it was

00:02:47,190 --> 00:02:54,540
not possible we are freeing identifiers

00:02:51,840 --> 00:02:56,850
that was error from when we are doing a

00:02:54,540 --> 00:03:01,590
lot of integration with a big project

00:02:56,850 --> 00:03:05,700
and explicit configuration was in XML so

00:03:01,590 --> 00:03:09,239
variables so I know on that the auto

00:03:05,700 --> 00:03:10,980
wiring was concise but slow but in and

00:03:09,239 --> 00:03:13,620
it is not so well suitable for

00:03:10,980 --> 00:03:18,269
well-treated sorry for non-trivial

00:03:13,620 --> 00:03:22,590
application and we cannot delegate the

00:03:18,269 --> 00:03:25,049
behavior so why not why I create a noon

00:03:22,590 --> 00:03:27,060
because we need a clear and typesafe

00:03:25,049 --> 00:03:30,209
definition of the object graph because

00:03:27,060 --> 00:03:32,850
noon is used to create the object graph

00:03:30,209 --> 00:03:34,890
of the application in terms of

00:03:32,850 --> 00:03:37,010
dependency injection aspect-oriented

00:03:34,890 --> 00:03:40,200
programming and production management

00:03:37,010 --> 00:03:42,780
management and more we want a new

00:03:40,200 --> 00:03:44,640
experience for developer we don't want

00:03:42,780 --> 00:03:49,010
developers spend a lot of time

00:03:44,640 --> 00:03:53,250
configuration we want developer use

00:03:49,010 --> 00:03:55,739
already the API they want we want

00:03:53,250 --> 00:03:59,940
application just to be truly extensible

00:03:55,739 --> 00:04:02,250
and discoverable we just want to add

00:03:59,940 --> 00:04:06,060
something in the pump dependency and it

00:04:02,250 --> 00:04:09,269
will and it is working and we also want

00:04:06,060 --> 00:04:11,190
to know how it works we want a clean ant

00:04:09,269 --> 00:04:16,739
accretion of the third party framework

00:04:11,190 --> 00:04:19,049
without without bail and whistle and we

00:04:16,739 --> 00:04:23,220
want also a same software architecture

00:04:19,049 --> 00:04:25,800
so that's why I created known so what

00:04:23,220 --> 00:04:28,669
are the new building blocks how are

00:04:25,800 --> 00:04:28,669
known is working

00:04:28,760 --> 00:04:35,370
we have the runner simple runner with an

00:04:31,890 --> 00:04:37,740
entrepreneur's we introduce something

00:04:35,370 --> 00:04:40,710
interesting that is a metonym scan to

00:04:37,740 --> 00:04:45,390
easily configure package packages to

00:04:40,710 --> 00:04:48,030
scan in a another another framework you

00:04:45,390 --> 00:04:50,220
have to couple the definition of your

00:04:48,030 --> 00:04:53,160
package to scan to your batting this

00:04:50,220 --> 00:04:56,390
mission so i uncover this this is two

00:04:53,160 --> 00:04:59,730
separate thing now you can put your

00:04:56,390 --> 00:05:04,710
package to scan in this file and it will

00:04:59,730 --> 00:05:08,220
work we propose to api two levels of api

00:05:04,710 --> 00:05:11,550
the topology api which is a nominal api

00:05:08,220 --> 00:05:13,290
for the application developer normally

00:05:11,550 --> 00:05:15,600
you will want to use these because it is

00:05:13,290 --> 00:05:19,170
simple i will show you this just after

00:05:15,600 --> 00:05:22,580
and we are the kernel plug-in API which

00:05:19,170 --> 00:05:27,740
is a more advanced api and SPI aiming

00:05:22,580 --> 00:05:33,110
interprets tag designer is this aim

00:05:27,740 --> 00:05:36,180
Enterprise enterprise the programmer

00:05:33,110 --> 00:05:39,420
noon on DS has been designed as a nutter

00:05:36,180 --> 00:05:42,210
prize in an enterprise context so the

00:05:39,420 --> 00:05:47,160
enterprise IP has been API sorry has

00:05:42,210 --> 00:05:49,920
been designed first a simple example an

00:05:47,160 --> 00:05:55,050
example of the runner so we have the

00:05:49,920 --> 00:05:59,400
noon winner an entrepreneur with us as

00:05:55,050 --> 00:06:03,450
simple as that an example of the entry

00:05:59,400 --> 00:06:06,990
points which is a simple class which can

00:06:03,450 --> 00:06:11,180
present which implements runnable and we

00:06:06,990 --> 00:06:15,210
have the standard at inject GSL 3 3 0

00:06:11,180 --> 00:06:23,610
standard at inject for the service the

00:06:15,210 --> 00:06:25,710
run and and better so every mainland so

00:06:23,610 --> 00:06:29,190
the injection which we saw here are

00:06:25,710 --> 00:06:33,540
defined in a topology and that well is

00:06:29,190 --> 00:06:36,870
the topology no topology api decorative

00:06:33,540 --> 00:06:40,760
fragment of configuration like you see

00:06:36,870 --> 00:06:40,760
in spring country in fact but

00:06:40,970 --> 00:06:48,180
whereas here topologies are interfaces

00:06:44,310 --> 00:06:51,030
there are not classes because you don't

00:06:48,180 --> 00:06:53,820
have to test your configuration this is

00:06:51,030 --> 00:06:56,400
just decorative so you can declare all

00:06:53,820 --> 00:07:00,600
your basic definition LP interceptor

00:06:56,400 --> 00:07:05,250
product properties and so on let's see

00:07:00,600 --> 00:07:09,420
the example here we have a topology with

00:07:05,250 --> 00:07:12,960
the properties rules we are defining a

00:07:09,420 --> 00:07:16,860
server and string so inside my

00:07:12,960 --> 00:07:21,060
application HTTP new node will be

00:07:16,860 --> 00:07:23,910
injected we can define services here I

00:07:21,060 --> 00:07:27,300
see that internal hello what services

00:07:23,910 --> 00:07:31,740
will be injected in a kilowatt service

00:07:27,300 --> 00:07:36,450
key and I can even inject optional here

00:07:31,740 --> 00:07:41,040
the empty air will be injected and what

00:07:36,450 --> 00:07:44,490
is the wizard so if I if I put my inject

00:07:41,040 --> 00:07:48,270
server with my qualifier I will inject I

00:07:44,490 --> 00:07:51,570
will be injected with with HTTP in noon

00:07:48,270 --> 00:07:53,880
data yo hello what service we will have

00:07:51,570 --> 00:07:57,110
internal a web service as implementation

00:07:53,880 --> 00:07:59,910
and here out for the optional console

00:07:57,110 --> 00:08:04,190
complete service I will have the

00:07:59,910 --> 00:08:04,190
optional empty so this is very simple

00:08:05,000 --> 00:08:13,650
more advanced I can define the injection

00:08:09,480 --> 00:08:17,670
of generics I can define the exaction or

00:08:13,650 --> 00:08:20,330
wrong I can define the injection of an

00:08:17,670 --> 00:08:24,060
implementation for qualified service I

00:08:20,330 --> 00:08:27,480
can use provider for forms research

00:08:24,060 --> 00:08:33,150
switch v-0 and and I can even use I

00:08:27,480 --> 00:08:34,669
define interceptor and this is how we

00:08:33,150 --> 00:08:39,000
use it

00:08:34,669 --> 00:08:43,140
just at inject list service and it is a

00:08:39,000 --> 00:08:46,080
super meter if meter F scan is a

00:08:43,140 --> 00:08:49,080
directory that interesting because you

00:08:46,080 --> 00:08:53,360
can this file contains the leaf of the

00:08:49,080 --> 00:08:56,540
package to scan and I as I said

00:08:53,360 --> 00:08:59,450
for this uncouple configuration from

00:08:56,540 --> 00:09:01,550
classpath scan directive in your

00:08:59,450 --> 00:09:04,579
reusable component you can put your

00:09:01,550 --> 00:09:09,980
emitter scan and the camera will

00:09:04,579 --> 00:09:14,000
undelete the can i plug in app a P I

00:09:09,980 --> 00:09:17,779
which is the enterprise API so what does

00:09:14,000 --> 00:09:19,279
the camera the kernel is the look is

00:09:17,779 --> 00:09:21,230
building the object graph of the

00:09:19,279 --> 00:09:26,990
application with the help of plugins

00:09:21,230 --> 00:09:29,120
from the class pass I like I said the

00:09:26,990 --> 00:09:33,970
canal is in shadow object graph with the

00:09:29,120 --> 00:09:37,029
help of protein this is two interfaces

00:09:33,970 --> 00:09:40,880
the uses is to create your channel

00:09:37,029 --> 00:09:43,550
launched in it fast started and you can

00:09:40,880 --> 00:09:46,880
use the object graph method to get it

00:09:43,550 --> 00:09:49,390
here this is a juice injector and then

00:09:46,880 --> 00:09:52,399
you stop it I simple at that

00:09:49,390 --> 00:09:56,000
so the camera plug-in protocol is very

00:09:52,399 --> 00:10:00,589
interesting it is a the main aspect many

00:09:56,000 --> 00:10:02,930
new version of the of noon first first

00:10:00,589 --> 00:10:05,570
you can the kernel is loading loaded

00:10:02,930 --> 00:10:10,160
from the class pass then the kernel is

00:10:05,570 --> 00:10:12,829
loading holder plugins then with the all

00:10:10,160 --> 00:10:16,880
the plugins send request to the to the

00:10:12,829 --> 00:10:20,089
kernel a request can can be ok let me

00:10:16,880 --> 00:10:24,380
find all the services that is like that

00:10:20,089 --> 00:10:29,350
or like that with the name and with the

00:10:24,380 --> 00:10:32,990
service or and then the kernel is

00:10:29,350 --> 00:10:36,560
actually actually searching the class

00:10:32,990 --> 00:10:40,040
pass and read for properties after that

00:10:36,560 --> 00:10:43,279
the kernel will return the rigid from to

00:10:40,040 --> 00:10:45,860
the to the plug-in with the result or

00:10:43,279 --> 00:10:48,440
the plug-in will construct its own

00:10:45,860 --> 00:10:51,560
configuration which is locate a very

00:10:48,440 --> 00:10:54,860
local so the the content of the

00:10:51,560 --> 00:10:58,339
configuration are very split as very in

00:10:54,860 --> 00:11:00,949
function of the environment then each

00:10:58,339 --> 00:11:04,040
plug-in is returning back its own

00:11:00,949 --> 00:11:05,770
configuration to the kernel the kernel

00:11:04,040 --> 00:11:09,790
is constructing

00:11:05,770 --> 00:11:13,510
global configuration and the color is

00:11:09,790 --> 00:11:18,370
building the injector with this injector

00:11:13,510 --> 00:11:24,420
the canada-us we have our object graph

00:11:18,370 --> 00:11:26,980
which is tailored for the application so

00:11:24,420 --> 00:11:32,520
this is the determine deterministic

00:11:26,980 --> 00:11:36,310
runtime algorithm that lasts less than

00:11:32,520 --> 00:11:40,899
2200 microsecond and plugins can

00:11:36,310 --> 00:11:42,640
communicate and the protocol these

00:11:40,899 --> 00:11:45,339
protocol brings on adapters is an

00:11:42,640 --> 00:11:50,980
adaptive sorry resilient configuration

00:11:45,339 --> 00:11:52,990
system the Enterprise API give you the

00:11:50,980 --> 00:11:55,209
command key on a life cycle parameters

00:11:52,990 --> 00:11:58,480
this kernel listener

00:11:55,209 --> 00:12:00,820
I cannot detail all you have to do your

00:11:58,480 --> 00:12:05,620
tool to organize or to create your own

00:12:00,820 --> 00:12:08,500
stack you have an SPI with the plugins

00:12:05,620 --> 00:12:11,560
you have confirmed because with concern

00:12:08,500 --> 00:12:13,600
you can organize all your what is the

00:12:11,560 --> 00:12:16,570
concern from the action the concern

00:12:13,600 --> 00:12:18,610
cache is a confirm our security is

00:12:16,570 --> 00:12:19,540
unconcerned so you can organize all you

00:12:18,610 --> 00:12:22,900
okay

00:12:19,540 --> 00:12:26,620
the other the other stuff here so there

00:12:22,900 --> 00:12:30,270
is a lot of stuff you can do to add one

00:12:26,620 --> 00:12:34,529
to toward 1.0 so known is very easy a

00:12:30,270 --> 00:12:39,490
stable and using production but it is a

00:12:34,529 --> 00:12:44,040
incubation project in a w-2 - I have to

00:12:39,490 --> 00:12:47,770
finalize order or the API and finish the

00:12:44,040 --> 00:12:51,790
documentation blog and sample it will be

00:12:47,770 --> 00:12:53,500
cool if I have someone can test and have

00:12:51,790 --> 00:12:58,209
feedback from developers because this is

00:12:53,500 --> 00:13:01,890
a developer store and yes I feedback you

00:12:58,209 --> 00:13:01,890
will be great thank you

00:13:02,270 --> 00:13:04,330

YouTube URL: https://www.youtube.com/watch?v=px5UngXPOSM


