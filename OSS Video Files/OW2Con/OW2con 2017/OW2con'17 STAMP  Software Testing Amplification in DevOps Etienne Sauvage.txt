Title: OW2con'17 STAMP  Software Testing Amplification in DevOps Etienne Sauvage
Publication date: 2017-06-29
Playlist: OW2con 2017
Description: 
	DevOps strongly encourages the development of test suites and test scripts that can run automatically at every build in order to detect regressions as soon as possible. However, the manual development of strong test suites is extremely time consuming. In this talk I will introduce test amplification, as an original solution to address this pain point. This approach consists in leveraging existing test cases and scripts in order to produce new ones through automatic transformation processes. I will present initial results about unit test amplification, from the STAMP project.

https://www.stamp-project.eu/
Captions: 
	00:00:01,960 --> 00:00:09,300
[Music]

00:00:05,150 --> 00:00:16,190
except where I speak about protecting

00:00:09,300 --> 00:00:21,420
amplification and so you can I take a

00:00:16,190 --> 00:00:26,250
higher view spoon because the spoon is

00:00:21,420 --> 00:00:29,990
used in stem project and we have a it's

00:00:26,250 --> 00:00:35,640
an urban project that you can see 4-h

00:00:29,990 --> 00:00:42,090
2020 we've got nine partners and as a

00:00:35,640 --> 00:00:43,850
Kirlian ties below but we are in area we

00:00:42,090 --> 00:00:46,829
are in the DevOps paradigm

00:00:43,850 --> 00:00:51,360
so it's an evolution assists of whatever

00:00:46,829 --> 00:00:53,879
competition and because we saw that give

00:00:51,360 --> 00:00:58,050
representation means and speak to each

00:00:53,879 --> 00:00:59,879
other giving ways so to have a better

00:00:58,050 --> 00:01:07,860
communication between them we had a

00:00:59,879 --> 00:01:10,260
great AG will do more religious so it

00:01:07,860 --> 00:01:16,619
will have our feedback from production

00:01:10,260 --> 00:01:19,640
to development to have a functioning

00:01:16,619 --> 00:01:21,960
divert pardon you need a lot of

00:01:19,640 --> 00:01:25,860
automation because it

00:01:21,960 --> 00:01:28,890
you can't manually test build and

00:01:25,860 --> 00:01:34,100
deployed configure monitor your software

00:01:28,890 --> 00:01:38,939
each week so you'll need to weary of

00:01:34,100 --> 00:01:43,140
automation we will focus today more nama

00:01:38,939 --> 00:01:47,490
precisely and test automation so you've

00:01:43,140 --> 00:01:51,020
got to that execution unit testing user

00:01:47,490 --> 00:01:55,649
interface taking you have concerns about

00:01:51,020 --> 00:02:03,000
performance because you you can't have

00:01:55,649 --> 00:02:06,689
every day one hour of tests or where we

00:02:03,000 --> 00:02:11,050
notice to the database it may die it may

00:02:06,689 --> 00:02:15,550
take some arrows

00:02:11,050 --> 00:02:19,230
so it's a concern it's automation so you

00:02:15,550 --> 00:02:19,230
will get back metrics

00:02:19,260 --> 00:02:26,530
well basic metrics as the states pass

00:02:23,410 --> 00:02:30,280
orders tests fail how your car

00:02:26,530 --> 00:02:37,060
discovered by your test and this test

00:02:30,280 --> 00:02:42,610
automation obviously and at each time

00:02:37,060 --> 00:02:48,310
reduce your valuations and ask you to a

00:02:42,610 --> 00:02:54,940
detector code before raising them it

00:02:48,310 --> 00:02:58,710
divides a war bag a lot of time these

00:02:54,940 --> 00:03:05,290
test automation comes with difficulties

00:02:58,710 --> 00:03:11,830
because by unit tests and creating tests

00:03:05,290 --> 00:03:15,610
is maybe add from often difficult

00:03:11,830 --> 00:03:23,620
because it's not in your your scale you

00:03:15,610 --> 00:03:27,850
have to design your tests you I don't

00:03:23,620 --> 00:03:32,410
know any software which able to unit

00:03:27,850 --> 00:03:39,030
tests to cover everything in your unit

00:03:32,410 --> 00:03:42,040
test ok and so it's a difficulty and

00:03:39,030 --> 00:03:47,490
some tests are flaky what are flaky

00:03:42,040 --> 00:03:50,980
tests well this one time we passed and

00:03:47,490 --> 00:03:55,780
another time they fail ok which is a

00:03:50,980 --> 00:04:01,300
good one so it is a concern that stamp

00:03:55,780 --> 00:04:05,640
will help to address and when you've

00:04:01,300 --> 00:04:11,040
gotten done your unit test you will want

00:04:05,640 --> 00:04:11,040
to do more tests about configuration

00:04:11,910 --> 00:04:20,350
well it's a consequence of give up

00:04:15,310 --> 00:04:22,410
spiraling you see that your settlement

00:04:20,350 --> 00:04:30,120
of

00:04:22,410 --> 00:04:34,790
problems with configuration we observe

00:04:30,120 --> 00:04:38,330
what we like we we like convenient tools

00:04:34,790 --> 00:04:42,110
for automating

00:04:38,330 --> 00:04:45,690
automation of configuration dating a

00:04:42,110 --> 00:04:48,120
user in project we've got the very

00:04:45,690 --> 00:04:50,490
limited some person about configuration

00:04:48,120 --> 00:04:56,990
maybe we go test a true version of Java

00:04:50,490 --> 00:05:01,920
and to the design guides and but all so

00:04:56,990 --> 00:05:04,560
stamp will will fly to automatically

00:05:01,920 --> 00:05:06,600
transform existing test asset in order

00:05:04,560 --> 00:05:09,300
to detect revision Bex defer prediction

00:05:06,600 --> 00:05:16,380
and drive down the cost of software

00:05:09,300 --> 00:05:21,240
testing where it involved and stamp

00:05:16,380 --> 00:05:29,210
doesn't start from scratch it does with

00:05:21,240 --> 00:05:33,200
an existing test should it focused in

00:05:29,210 --> 00:05:38,250
precisely on the regression back and

00:05:33,200 --> 00:05:43,950
like your every automation tool its to

00:05:38,250 --> 00:05:49,860
drive down the cost here is the error

00:05:43,950 --> 00:05:53,130
world of test the unit test so you've

00:05:49,860 --> 00:05:57,950
got a message to search you instantiate

00:05:53,130 --> 00:06:04,250
an object and do some initiations and

00:05:57,950 --> 00:06:10,620
then you make assertions as River

00:06:04,250 --> 00:06:13,860
what does notification do is this you've

00:06:10,620 --> 00:06:16,770
got another function with the same first

00:06:13,860 --> 00:06:23,070
type instantiation initialization and

00:06:16,770 --> 00:06:28,400
then the tool will try to invoke over

00:06:23,070 --> 00:06:28,400
methods and make assertions in them and

00:06:28,460 --> 00:06:36,290
we'll take the methods you you patching

00:06:32,620 --> 00:06:38,060
it says tax added search second item

00:06:36,290 --> 00:06:42,680
emphasizing the extract them from the

00:06:38,060 --> 00:06:47,570
assertions and to put the bridges for

00:06:42,680 --> 00:06:54,919
flow values like a new SS that done

00:06:47,570 --> 00:06:57,590
after so the main goal is to focus on

00:06:54,919 --> 00:07:00,770
regulations so you've got an amplified

00:06:57,590 --> 00:07:02,330
test should P is your current version of

00:07:00,770 --> 00:07:06,260
the program it's a version and

00:07:02,330 --> 00:07:10,160
production on P prime is in developer

00:07:06,260 --> 00:07:13,940
versions a new version you okay you will

00:07:10,160 --> 00:07:16,669
run your amplify test should against the

00:07:13,940 --> 00:07:19,820
true version of your program and you'll

00:07:16,669 --> 00:07:28,910
spot the differences on HD references is

00:07:19,820 --> 00:07:32,680
a regulation bag how stamp is give a

00:07:28,910 --> 00:07:39,680
paradigm so George is an infinite loop

00:07:32,680 --> 00:07:43,910
of software development and and stamp

00:07:39,680 --> 00:07:47,840
will be in the blue part developer part

00:07:43,910 --> 00:07:51,590
and a bit in the orange pad mozzie

00:07:47,840 --> 00:07:56,180
apparatus part you know I told you about

00:07:51,590 --> 00:07:58,430
unit testing for regression bags I told

00:07:56,180 --> 00:08:03,979
you a bit about configuration tasting

00:07:58,430 --> 00:08:14,150
and the last part is a online testing

00:08:03,979 --> 00:08:18,470
it's the goal is to build a test when

00:08:14,150 --> 00:08:28,060
the application crash so here it will

00:08:18,470 --> 00:08:36,010
use the dialog to make it a test

00:08:28,060 --> 00:08:38,320
so for each part here the stunt goes as

00:08:36,010 --> 00:08:42,919
we use

00:08:38,320 --> 00:08:46,880
/ functions of am method during the

00:08:42,919 --> 00:08:55,730
amplified debt we aim at increasing

00:08:46,880 --> 00:09:00,020
coverage of the code we aim at giving

00:08:55,730 --> 00:09:04,779
add in deepening deployment

00:09:00,020 --> 00:09:10,100
configuration and of course to well

00:09:04,779 --> 00:09:18,050
analyze the logs to constrict test case

00:09:10,100 --> 00:09:20,570
from production problems here's the

00:09:18,050 --> 00:09:22,940
Baskins on buzz g-spots you've got to

00:09:20,570 --> 00:09:26,570
taste treat is a production version on

00:09:22,940 --> 00:09:29,170
the developer version and this developer

00:09:26,570 --> 00:09:32,740
does disperse easy amplified test shoot

00:09:29,170 --> 00:09:39,320
the test shoots on the program as input

00:09:32,740 --> 00:09:43,130
of this pod - to search into the input

00:09:39,320 --> 00:09:48,459
space input space it the parameters of

00:09:43,130 --> 00:09:51,770
submitted which our taste and after we

00:09:48,459 --> 00:09:55,820
you know amplification observation

00:09:51,770 --> 00:10:00,110
states that the regions of the major

00:09:55,820 --> 00:10:05,000
third and after that that's the last

00:10:00,110 --> 00:10:09,290
part we run tests against P and P Prime

00:10:05,000 --> 00:10:13,930
and look for differences and these

00:10:09,290 --> 00:10:19,540
appearances are the regression based so

00:10:13,930 --> 00:10:23,740
it's a French comic strip and Delhi and

00:10:19,540 --> 00:10:29,750
I don't want to sleep can you tell me a

00:10:23,740 --> 00:10:32,810
developer public ok how are you

00:10:29,750 --> 00:10:36,970
recruited the unit test of a unit test

00:10:32,810 --> 00:10:36,970
framework in ITN choose

00:10:40,100 --> 00:10:51,710
to find bags to make a tool to find

00:10:44,630 --> 00:10:56,840
those you need better so we make them we

00:10:51,710 --> 00:11:00,560
use a pit where pit is a metal imitation

00:10:56,840 --> 00:11:05,300
testing system mutation testing is well

00:11:00,560 --> 00:11:09,760
you've got a software we will put we

00:11:05,300 --> 00:11:16,160
will modify it to see what happens

00:11:09,760 --> 00:11:20,660
not it inject bugs into a program peach

00:11:16,160 --> 00:11:24,770
is a pit stands for beat em we color

00:11:20,660 --> 00:11:28,130
well and it's changed fry stands for

00:11:24,770 --> 00:11:34,700
instance it's change which our van with

00:11:28,130 --> 00:11:39,920
which Avenue equal but fine-grained

00:11:34,700 --> 00:11:43,550
force this is great but it doesn't apply

00:11:39,920 --> 00:11:48,770
to large code that arises because well

00:11:43,550 --> 00:11:53,190
for each greater van you get mobile one

00:11:48,770 --> 00:11:54,730
version and you pass it to the

00:11:53,190 --> 00:11:58,400
[Music]

00:11:54,730 --> 00:12:03,170
amplification that you've got a huge set

00:11:58,400 --> 00:12:06,530
of tests so the gut is an adaptation of

00:12:03,170 --> 00:12:15,950
pit with extra mutation operators it's

00:12:06,530 --> 00:12:18,320
simply empty the body of methods if it's

00:12:15,950 --> 00:12:25,850
a meter as a region value it's a

00:12:18,320 --> 00:12:29,540
constant with PD card stamped in the

00:12:25,850 --> 00:12:34,370
develops paneling doesn't world it isn't

00:12:29,540 --> 00:12:38,600
developed for itself and it's developed

00:12:34,370 --> 00:12:41,690
fights us cases we've got five when

00:12:38,600 --> 00:12:48,680
we've blacked if you won with table it's

00:12:41,690 --> 00:12:51,510
about healthcare aw2 we'll use stamp on

00:12:48,680 --> 00:12:55,650
some of this project

00:12:51,510 --> 00:12:59,910
at those fire is about Internet of

00:12:55,650 --> 00:13:06,210
Things and if le Vic's wiki at the

00:12:59,910 --> 00:13:09,510
speech and value system so it's a

00:13:06,210 --> 00:13:13,380
European project to find a Cuban at

00:13:09,510 --> 00:13:17,990
those engineering líneas cross a W to

00:13:13,380 --> 00:13:21,540
Santa to Delta Y and X wiki it started

00:13:17,990 --> 00:13:30,390
first of December last year and it will

00:13:21,540 --> 00:13:34,590
end in the three years later so I used

00:13:30,390 --> 00:13:42,060
to if you want to give it a try you'll

00:13:34,590 --> 00:13:45,870
find a eating ketchup and and well it's

00:13:42,060 --> 00:13:48,960
a small review of the project should've

00:13:45,870 --> 00:13:51,140
got an equation I'd be happy to try to

00:13:48,960 --> 00:13:51,140
answer

00:13:51,560 --> 00:13:56,060

YouTube URL: https://www.youtube.com/watch?v=BGiOiwVW0TU


