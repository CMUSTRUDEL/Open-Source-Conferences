Title: OW2online20: Intelligent package management with FASTEN( Amir Mir )
Publication date: 2020-06-22
Playlist: OW2con20 OW2online
Description: 
	As recent events, such as the leftpad incident and the Equifax data breach, have demonstrated, dependencies on networks of external libraries can introduce projects to significant operational and compliance risks as well as difficult to assess security implications. FASTEN introduces fine-grained, method-level, tracking of dependencies on top of existing dependency management networks. In our talk, we will present how FASTEN works on top of the Rust/Cargo and Java/Maven ecosystems.
Captions: 
	00:00:01,300 --> 00:00:04,399
[Music]

00:00:09,800 --> 00:00:14,490
hi everyone my name is Amir on a PhD

00:00:12,750 --> 00:00:17,730
candidate at Delft University of

00:00:14,490 --> 00:00:19,920
Technology it's my pleasure to present a

00:00:17,730 --> 00:00:23,400
faster project for all that you to

00:00:19,920 --> 00:00:25,070
online conference in this talk first

00:00:23,400 --> 00:00:27,810
attack you will open source software

00:00:25,070 --> 00:00:30,779
package management and package

00:00:27,810 --> 00:00:32,850
dependency networks in short PD ends the

00:00:30,779 --> 00:00:35,760
current issues with PD ends existing

00:00:32,850 --> 00:00:40,050
solutions and the root cause of the

00:00:35,760 --> 00:00:42,690
issues and I will present the faster

00:00:40,050 --> 00:00:44,910
project its solution the first NACA

00:00:42,690 --> 00:00:47,100
texture the current state of the project

00:00:44,910 --> 00:00:51,780
and finally I will talk about some

00:00:47,100 --> 00:00:54,809
examples of the faster workflow nowadays

00:00:51,780 --> 00:00:58,320
software developers reuse code to reduce

00:00:54,809 --> 00:01:00,239
development costs and open source

00:00:58,320 --> 00:01:02,879
software libraries are hosted on

00:01:00,239 --> 00:01:06,119
centralized repository such as made an

00:01:02,879 --> 00:01:08,400
entire pie thanks to the open source

00:01:06,119 --> 00:01:12,900
software the dream of collaborative

00:01:08,400 --> 00:01:15,420
duralumin is not possible open source

00:01:12,900 --> 00:01:17,520
libraries and software or considered as

00:01:15,420 --> 00:01:22,979
a building block for creating new

00:01:17,520 --> 00:01:24,960
software however when there are hundreds

00:01:22,979 --> 00:01:27,630
of thousands of software packages out

00:01:24,960 --> 00:01:30,659
there the package management becomes an

00:01:27,630 --> 00:01:33,780
important issue and basically they are

00:01:30,659 --> 00:01:36,030
soft package managers out there to help

00:01:33,780 --> 00:01:38,460
developers resolve dependencies and

00:01:36,030 --> 00:01:43,049
download record libraries for their own

00:01:38,460 --> 00:01:46,829
software for example we have an example

00:01:43,049 --> 00:01:49,200
here SL f4j is a java package and it is

00:01:46,829 --> 00:01:51,799
it's the phone itself is a basic is

00:01:49,200 --> 00:01:54,899
phone file here as we can see there are

00:01:51,799 --> 00:01:57,630
dependencies for the 4g for example

00:01:54,899 --> 00:02:00,990
log4j is a dependency for so the forge a

00:01:57,630 --> 00:02:03,960
packet and the important point is that

00:02:00,990 --> 00:02:06,840
the note 4 J is also your package body

00:02:03,960 --> 00:02:09,530
it has its own dependencies as listed on

00:02:06,840 --> 00:02:09,530
the right side

00:02:12,410 --> 00:02:19,680
when there are thousands of hundreds or

00:02:16,260 --> 00:02:23,930
thousands of packages out basically it

00:02:19,680 --> 00:02:26,550
creates a huge and complex networks

00:02:23,930 --> 00:02:28,530
basically each package has its own

00:02:26,550 --> 00:02:34,379
versions which makes things more

00:02:28,530 --> 00:02:38,819
complicated because of the complexity of

00:02:34,379 --> 00:02:41,580
the PD ins recently we saw some big

00:02:38,819 --> 00:02:46,200
failures for example left by project in

00:02:41,580 --> 00:02:50,630
2016 which made a large number of

00:02:46,200 --> 00:02:53,239
websites back then on abuelo lockdown

00:02:50,630 --> 00:02:57,660
another important failure was the

00:02:53,239 --> 00:02:59,579
Equifax in 2017 which affected around

00:02:57,660 --> 00:03:03,000
one hundred forty seven millions of

00:02:59,579 --> 00:03:10,110
people in America and their credit card

00:03:03,000 --> 00:03:12,209
information was revealed basically the

00:03:10,110 --> 00:03:15,200
recent failures that I mentioned happen

00:03:12,209 --> 00:03:19,650
because of the issues with the PDAs and

00:03:15,200 --> 00:03:22,290
from the loopers perspective there are

00:03:19,650 --> 00:03:24,720
basically four problems observability

00:03:22,290 --> 00:03:28,349
which means how can I know a package is

00:03:24,720 --> 00:03:30,480
outdated or the optic problem how can I

00:03:28,349 --> 00:03:33,810
check that an update doesn't break my

00:03:30,480 --> 00:03:37,139
current software and the trust problem

00:03:33,810 --> 00:03:38,790
which means that how can I trust code on

00:03:37,139 --> 00:03:42,989
the internet when I have important data

00:03:38,790 --> 00:03:45,299
on my own laptop or PC and from a

00:03:42,989 --> 00:03:47,669
maintenance perspective a big Union you

00:03:45,299 --> 00:03:49,769
have the object problem you know how can

00:03:47,669 --> 00:03:52,139
I know that if I updated the dependency

00:03:49,769 --> 00:03:54,120
of my patches it doesn't break the

00:03:52,139 --> 00:03:57,359
clients and the user who use my own

00:03:54,120 --> 00:03:59,549
delivery and the application problem you

00:03:57,359 --> 00:04:03,780
know for example if you look at the

00:03:59,549 --> 00:04:06,630
feature from a library it may break the

00:04:03,780 --> 00:04:09,269
clients problem in the colossi the

00:04:06,630 --> 00:04:11,639
client's program and then let for

00:04:09,269 --> 00:04:13,230
example the lack of incentive which

00:04:11,639 --> 00:04:16,320
means that you know the developer they

00:04:13,230 --> 00:04:18,630
spend their own free time but they

00:04:16,320 --> 00:04:19,489
expect you know some kind of e in

00:04:18,630 --> 00:04:22,800
commerce

00:04:19,489 --> 00:04:25,010
money working on their open source

00:04:22,800 --> 00:04:25,010
software

00:04:26,880 --> 00:04:31,480
there are some existing solutions out

00:04:29,680 --> 00:04:34,120
there to the issue for the issue toward

00:04:31,480 --> 00:04:36,280
solving issues opinions for example we

00:04:34,120 --> 00:04:37,020
have soft services like etomidate and

00:04:36,280 --> 00:04:40,150
abort

00:04:37,020 --> 00:04:42,100
but usually these solutions have their

00:04:40,150 --> 00:04:45,040
own problems for example they do not

00:04:42,100 --> 00:04:47,560
support for assessing updates for

00:04:45,040 --> 00:04:50,500
example if I update a dependency for my

00:04:47,560 --> 00:04:52,420
own package basically they don't help

00:04:50,500 --> 00:04:56,320
you whether it's safe to update or not

00:04:52,420 --> 00:04:58,330
another issue is no help with impact

00:04:56,320 --> 00:05:01,120
assessment for example if I change a

00:04:58,330 --> 00:05:04,900
function in my library how many clients

00:05:01,120 --> 00:05:08,190
will be affected after that and they may

00:05:04,900 --> 00:05:08,190
produce some false positives

00:05:09,000 --> 00:05:14,970
basically they recommend you to do

00:05:11,170 --> 00:05:14,970
something that basically should not do

00:05:16,890 --> 00:05:21,580
the root cause of the issues are

00:05:19,330 --> 00:05:25,030
discussed with pinions it comes from the

00:05:21,580 --> 00:05:28,330
fact that the client approaches they

00:05:25,030 --> 00:05:30,310
examine the the problem at the package

00:05:28,330 --> 00:05:32,860
level for example here we have at

00:05:30,310 --> 00:05:37,030
version 1 which depends on the very one

00:05:32,860 --> 00:05:38,860
we're at 3.2 this approach only looks at

00:05:37,030 --> 00:05:40,930
the problem at the package level however

00:05:38,860 --> 00:05:43,120
there are others whose solution which is

00:05:40,930 --> 00:05:47,530
called dependency Network Citians

00:05:43,120 --> 00:05:50,830
this approach is more precise because we

00:05:47,530 --> 00:05:54,040
examine the function calls in the

00:05:50,830 --> 00:05:56,410
packages which basically gives a gives

00:05:54,040 --> 00:06:01,210
us more insight and information to solve

00:05:56,410 --> 00:06:03,490
the issues with opinions inspired by the

00:06:01,210 --> 00:06:06,280
issues of the opinions at a faster

00:06:03,490 --> 00:06:08,890
project launched in January 2019 it

00:06:06,280 --> 00:06:12,820
stands for for analysis of software

00:06:08,890 --> 00:06:14,830
ecosystems as Network and the main goal

00:06:12,820 --> 00:06:17,020
of the project basically is to solve the

00:06:14,830 --> 00:06:18,940
issues of phidian's while making package

00:06:17,020 --> 00:06:23,790
management more robust and intelligent

00:06:18,940 --> 00:06:26,590
and basically the huge centralize

00:06:23,790 --> 00:06:31,300
reservist to host graphs and serve the

00:06:26,590 --> 00:06:33,350
analysis and the concert team that we

00:06:31,300 --> 00:06:35,600
have constant right

00:06:33,350 --> 00:06:40,610
consists of several universities and

00:06:35,600 --> 00:06:44,600
several components industry basically

00:06:40,610 --> 00:06:47,690
our solution provide more precise

00:06:44,600 --> 00:06:50,960
license compliance for example we have

00:06:47,690 --> 00:06:53,630
developers to know whether they violate

00:06:50,960 --> 00:06:59,150
copyright or not and we provide more

00:06:53,630 --> 00:07:01,310
precise risk profiling for example we

00:06:59,150 --> 00:07:03,470
help developers to know whether security

00:07:01,310 --> 00:07:07,820
vulnerability affects their packages or

00:07:03,470 --> 00:07:09,920
not and we provide more precise change

00:07:07,820 --> 00:07:11,750
impact analysis for example how many

00:07:09,920 --> 00:07:16,100
packages will be affected if I change

00:07:11,750 --> 00:07:18,260
the metal in my own library and the

00:07:16,100 --> 00:07:21,200
ultimate goal of the faster project is

00:07:18,260 --> 00:07:23,420
to integrate the solution with the

00:07:21,200 --> 00:07:25,430
current package management package

00:07:23,420 --> 00:07:28,250
managers that are out there right now

00:07:25,430 --> 00:07:32,390
for example Popo and Mabel and this is

00:07:28,250 --> 00:07:34,160
our ultimate goal and this is the

00:07:32,390 --> 00:07:37,220
overview of the fastener architecture on

00:07:34,160 --> 00:07:39,440
the left side we have date data streams

00:07:37,220 --> 00:07:42,010
that consists of package equals to

00:07:39,440 --> 00:07:44,960
explain polyforum even a debian and

00:07:42,010 --> 00:07:48,560
roast cargo and we have all negative

00:07:44,960 --> 00:07:50,270
information from CVE and NBD on the

00:07:48,560 --> 00:07:53,600
middle we have the fastest server which

00:07:50,270 --> 00:07:55,490
consists of coal gas generators because

00:07:53,600 --> 00:07:58,070
again the fastest solution is based on

00:07:55,490 --> 00:08:00,290
the CD ends if we examine the issues of

00:07:58,070 --> 00:08:02,690
the PDS at the function level rather

00:08:00,290 --> 00:08:04,580
than at the package level we have

00:08:02,690 --> 00:08:06,500
analysis layer which has several

00:08:04,580 --> 00:08:08,540
components such as the security

00:08:06,500 --> 00:08:11,660
compliance quality and risk and changing

00:08:08,540 --> 00:08:14,120
as I mentioned in the previous slide the

00:08:11,660 --> 00:08:17,600
fastest solution you know provide more

00:08:14,120 --> 00:08:19,900
precise impact analysis and license

00:08:17,600 --> 00:08:23,510
companies and security and quality

00:08:19,900 --> 00:08:27,410
assessment and we have a storage layer

00:08:23,510 --> 00:08:29,750
which consists of two database one

00:08:27,410 --> 00:08:33,950
forgets to engraft and another one for a

00:08:29,750 --> 00:08:36,800
stone metadata of called grabs and on

00:08:33,950 --> 00:08:39,400
the right side we provide basically a

00:08:36,800 --> 00:08:43,479
very high honor estate here to help

00:08:39,400 --> 00:08:46,510
first use our own to certain solutions

00:08:43,479 --> 00:08:48,430
that we provide and basically the

00:08:46,510 --> 00:08:52,270
continuous integration servers can also

00:08:48,430 --> 00:08:57,100
benefit from the rest a way that giving

00:08:52,270 --> 00:08:59,410
poor boy as I mentioned in the previous

00:08:57,100 --> 00:09:01,920
slide the metadata database is an

00:08:59,410 --> 00:09:05,020
important part in architecture it

00:09:01,920 --> 00:09:08,740
basically stores the metadata of the

00:09:05,020 --> 00:09:10,839
conquerors we generate for packages for

00:09:08,740 --> 00:09:13,029
is not what we have a table packages

00:09:10,839 --> 00:09:15,040
which source information about the

00:09:13,029 --> 00:09:16,690
package and we are our table for package

00:09:15,040 --> 00:09:20,290
versions each version of basically a

00:09:16,690 --> 00:09:22,570
package and we have a modules table for

00:09:20,290 --> 00:09:26,920
example in the case of Java and module

00:09:22,570 --> 00:09:28,930
corresponds to a class and to a store

00:09:26,920 --> 00:09:31,510
the callgames we also have Co levels

00:09:28,930 --> 00:09:34,420
tables which represent the nodes in the

00:09:31,510 --> 00:09:38,050
corner and we have ages table for

00:09:34,420 --> 00:09:41,620
stewing edges of a call graph and on the

00:09:38,050 --> 00:09:45,070
roads and on the right side as shown we

00:09:41,620 --> 00:09:52,839
have foils table for a story and files

00:09:45,070 --> 00:09:55,300
of all source code files system where

00:09:52,839 --> 00:09:58,540
project has started a year half is

00:09:55,300 --> 00:10:01,410
passed at the moment if we have alpha

00:09:58,540 --> 00:10:04,870
version of the project

00:10:01,410 --> 00:10:08,860
one of our main achievements was to

00:10:04,870 --> 00:10:10,570
generate 1.2 million joke on graphs to

00:10:08,860 --> 00:10:12,190
the best of our knowledge this is the

00:10:10,570 --> 00:10:16,930
first time that in the software engine

00:10:12,190 --> 00:10:19,690
community basically more than one minute

00:10:16,930 --> 00:10:23,500
corner of the generator and yes

00:10:19,690 --> 00:10:28,690
generated eight eighty thousand roasts

00:10:23,500 --> 00:10:32,650
call graphs and we also generate corners

00:10:28,690 --> 00:10:34,839
for Debian packages we deployed the

00:10:32,650 --> 00:10:37,480
fastest server on kubernetes classes for

00:10:34,839 --> 00:10:41,830
scalability which helped us generate

00:10:37,480 --> 00:10:43,630
more than 1 million call graphs and we

00:10:41,830 --> 00:10:46,959
made the initial implementation of it so

00:10:43,630 --> 00:10:49,329
they are available we are basically

00:10:46,959 --> 00:10:50,080
tasters data as I mentioned before it

00:10:49,329 --> 00:10:52,840
consists of

00:10:50,080 --> 00:11:00,490
that metadata database and it has a

00:10:52,840 --> 00:11:02,380
graph database for faster access now we

00:11:00,490 --> 00:11:07,270
have provided some examples of the

00:11:02,380 --> 00:11:12,580
faster workflow for example here we have

00:11:07,270 --> 00:11:15,580
example for pi PI which has a tool named

00:11:12,580 --> 00:11:18,310
pipe and to update the packages and to

00:11:15,580 --> 00:11:20,020
install packages for example after the

00:11:18,310 --> 00:11:22,090
first integration with the PI point

00:11:20,020 --> 00:11:24,580
basically they will approach an object

00:11:22,090 --> 00:11:26,260
the dependencies of his or her package

00:11:24,580 --> 00:11:27,730
with confidence without worrying what

00:11:26,260 --> 00:11:34,890
without warning about the great

00:11:27,730 --> 00:11:37,980
mechanism package our example is to

00:11:34,890 --> 00:11:41,620
decide whether to use a library or not

00:11:37,980 --> 00:11:43,600
for software patches again after the

00:11:41,620 --> 00:11:45,970
first integration the basically a

00:11:43,600 --> 00:11:48,280
developer can see the security

00:11:45,970 --> 00:11:52,000
vulnerabilities of a package and

00:11:48,280 --> 00:11:57,970
basically it's safe to object very safe

00:11:52,000 --> 00:12:00,250
to use a library or not and thank you

00:11:57,970 --> 00:12:03,060
all for listening to this talk and your

00:12:00,250 --> 00:12:06,820
attention if you have any questions and

00:12:03,060 --> 00:12:09,040
please check out our website for more

00:12:06,820 --> 00:12:11,260
information and we made our tool sets

00:12:09,040 --> 00:12:14,910
open source and available on get or on

00:12:11,260 --> 00:12:14,910

YouTube URL: https://www.youtube.com/watch?v=va24-LFNySE


