Title: OW2online20 -  Enabling DevOps for IoT Software Development, powered by Open Source( Hui Song )
Publication date: 2020-06-22
Playlist: OW2con20 OW2online
Description: 
	We would like to share our research journey towards enabling DevOps for IoT applications, and how Open Source makes the journey feasible and fun. DevOps is widely adopted for developing cloud applications, which supports developers in continuously placing software changes directly to production. As companies are including IoT and Edge devices into their IT infrastructures, supporting DevOps for IoT is a must. However, IoT challenges some fundamental assumptions behind DevOps, such as the homogeneous infrastructure and centralized governance, and therefore, breaking-through research is needed. Funded by H2020, 30 people from 12 partners crossing academia and industry gathered to solve these fundamental challenges, which results in full-stack open source tools for automatic deployment, learning-based operation and security monitoring of IoT applications, and risk management of the development process. The tools are evaluated on industrial use cases in intelligent transportation, smart building, and eHealth. The mass open source tools and communities around IoT development provides the sound foundation for this design research and the opportunities for the further exploitation of the results. In particular, we are proud of spinning off a start-up to commercialize the risk management services in the open source + SaaS model.
Captions: 
	00:00:01,300 --> 00:00:04,399
[Music]

00:00:09,620 --> 00:00:15,330
my name is husam I'm a researcher with

00:00:12,480 --> 00:00:18,960
syntax Norway together with my colleague

00:00:15,330 --> 00:00:20,490
Nicola would like to first thank all of

00:00:18,960 --> 00:00:23,820
the two for offering us this opportunity

00:00:20,490 --> 00:00:25,019
to share with you what we are doing in

00:00:23,820 --> 00:00:30,210
the product called

00:00:25,019 --> 00:00:32,309
enact enact is a research project funded

00:00:30,210 --> 00:00:36,239
by the European Commission under the

00:00:32,309 --> 00:00:40,920
external 20 program the product is about

00:00:36,239 --> 00:00:43,290
how to support DevOps as a new way for

00:00:40,920 --> 00:00:48,120
software development for inaudible

00:00:43,290 --> 00:00:51,239
things we found in this problem and we

00:00:48,120 --> 00:00:54,420
have some good ideas that we believe

00:00:51,239 --> 00:00:57,840
that will improve the way people develop

00:00:54,420 --> 00:01:02,100
how to software we do some experiment

00:00:57,840 --> 00:01:04,799
for a typing tool development and we're

00:01:02,100 --> 00:01:09,090
now in the phase of trying to use them

00:01:04,799 --> 00:01:12,210
in real cases from some use cases so

00:01:09,090 --> 00:01:15,030
this is a typical research process if

00:01:12,210 --> 00:01:18,830
you switch DevOps to some other topics

00:01:15,030 --> 00:01:21,600
for example call v19 then the process is

00:01:18,830 --> 00:01:25,290
almost the same from problem to research

00:01:21,600 --> 00:01:28,500
to innovation manufacturing but what

00:01:25,290 --> 00:01:32,280
makes this problem a little bit special

00:01:28,500 --> 00:01:35,040
which also makes us wanting to share it

00:01:32,280 --> 00:01:38,670
in this conference is that there is

00:01:35,040 --> 00:01:43,290
actually a hidden loot the whole precise

00:01:38,670 --> 00:01:46,890
is strongly supported or powered by open

00:01:43,290 --> 00:01:50,970
source we laborat that in the following

00:01:46,890 --> 00:01:55,110
slides to come up come back to the

00:01:50,970 --> 00:01:57,689
problem again software development for

00:01:55,110 --> 00:02:00,810
Internet of Things when we think about

00:01:57,689 --> 00:02:05,040
software development most of us will

00:02:00,810 --> 00:02:09,450
have the image somehow like the one

00:02:05,040 --> 00:02:12,580
shown on the left of a smart guy or girl

00:02:09,450 --> 00:02:16,900
sitting in front of a clean desk

00:02:12,580 --> 00:02:20,580
with just the monitors keyboard and

00:02:16,900 --> 00:02:22,990
mouse you do some change to our code

00:02:20,580 --> 00:02:26,530
when you're satisfied you click some

00:02:22,990 --> 00:02:28,780
button and then you can go how to grab

00:02:26,530 --> 00:02:30,070
some coffee have some chat with the

00:02:28,780 --> 00:02:33,130
colleague and when you're back

00:02:30,070 --> 00:02:36,640
everything is among unlike you start to

00:02:33,130 --> 00:02:40,350
see the monitoring result on how the

00:02:36,640 --> 00:02:40,350
system is actually running in the club

00:02:40,650 --> 00:02:48,250
easy and clean but I want to think about

00:02:45,220 --> 00:02:50,860
IOT stop the development I think many of

00:02:48,250 --> 00:02:54,760
us will still have the image somehow

00:02:50,860 --> 00:03:00,640
like the one on a right you have a desk

00:02:54,760 --> 00:03:03,670
with which is filled with some prototype

00:03:00,640 --> 00:03:07,630
devices that weld together in a strange

00:03:03,670 --> 00:03:11,710
way old fashioned the monitor just make

00:03:07,630 --> 00:03:15,370
sure you can get some output from some

00:03:11,710 --> 00:03:17,920
old devices you still do the change on

00:03:15,370 --> 00:03:22,110
your code but after that you need to

00:03:17,920 --> 00:03:26,050
build it and somehow transfer the code

00:03:22,110 --> 00:03:31,150
into some in a special way into some

00:03:26,050 --> 00:03:37,870
devices and after that you monitor how

00:03:31,150 --> 00:03:42,220
it works in old way and if it's

00:03:37,870 --> 00:03:46,120
something wrong you it's not so easy to

00:03:42,220 --> 00:03:51,670
figure out what was happening but does

00:03:46,120 --> 00:03:56,110
it have to be this way no I think add as

00:03:51,670 --> 00:03:59,590
IOT developers we also lacked a box we

00:03:56,110 --> 00:04:03,190
also wanted to be able to focus on the

00:03:59,590 --> 00:04:06,730
frequent and small changes small

00:04:03,190 --> 00:04:11,170
improvements to our system and we want

00:04:06,730 --> 00:04:14,080
to enjoy automation we also like to see

00:04:11,170 --> 00:04:19,359
the feedback from not only the devices

00:04:14,080 --> 00:04:23,530
on the desk but also the ones from our

00:04:19,359 --> 00:04:29,320
real customers but is

00:04:23,530 --> 00:04:33,100
so easy since IOT is anyway special it's

00:04:29,320 --> 00:04:35,710
different from development for colic

00:04:33,100 --> 00:04:39,300
software so first thing that date is

00:04:35,710 --> 00:04:42,460
distributed and it's divorced you have

00:04:39,300 --> 00:04:46,230
hundreds of thousands of IOT devices

00:04:42,460 --> 00:04:50,260
deployed far away from each other

00:04:46,230 --> 00:04:52,950
there are somehow different even if

00:04:50,260 --> 00:04:57,090
within the same application you may

00:04:52,950 --> 00:04:59,890
purchase those devices from different

00:04:57,090 --> 00:05:02,860
manufacturers all from the same one

00:04:59,890 --> 00:05:06,070
button they are produced maybe three

00:05:02,860 --> 00:05:08,590
month apart and they're no different the

00:05:06,070 --> 00:05:13,330
devices have different way for you to

00:05:08,590 --> 00:05:16,979
deploy software some of them are good

00:05:13,330 --> 00:05:21,160
enough to support a docker container

00:05:16,979 --> 00:05:26,470
some others even don't have operating

00:05:21,160 --> 00:05:29,650
system and the devices are having

00:05:26,470 --> 00:05:32,320
different context capabilities and user

00:05:29,650 --> 00:05:37,090
preferences and I have to handle

00:05:32,320 --> 00:05:39,850
scalability you really seriously and to

00:05:37,090 --> 00:05:42,490
make it worse the smart LT systems also

00:05:39,850 --> 00:05:44,860
have actuators which can impact the

00:05:42,490 --> 00:05:46,930
physical work making imagine what would

00:05:44,860 --> 00:05:50,410
happen if the different actuators want

00:05:46,930 --> 00:05:51,190
to work on the physical world in

00:05:50,410 --> 00:05:54,039
different ways

00:05:51,190 --> 00:05:57,370
so all these lead to challenges that are

00:05:54,039 --> 00:05:59,830
not handled by the current tools that

00:05:57,370 --> 00:06:02,919
are provided for cloud-based software

00:05:59,830 --> 00:06:07,510
development that was the question of the

00:06:02,919 --> 00:06:10,300
research problem how to support the

00:06:07,510 --> 00:06:16,030
continuous development and operation of

00:06:10,300 --> 00:06:18,460
trustworthy smart IOT systems we're

00:06:16,030 --> 00:06:23,110
trying to solve this problem by coming

00:06:18,460 --> 00:06:26,470
up with a set of software development

00:06:23,110 --> 00:06:28,350
tools which is which can be used to

00:06:26,470 --> 00:06:31,620
automate the different phases of the

00:06:28,350 --> 00:06:31,620
DevOps loop

00:06:32,490 --> 00:06:39,780
like to go quickly through all these

00:06:35,009 --> 00:06:44,270
tools by complete pipeline so in the

00:06:39,780 --> 00:06:47,280
middle is to Genesis which is our

00:06:44,270 --> 00:06:52,340
solution for the infrastructure as code

00:06:47,280 --> 00:06:55,110
for IOT which solved the challenge about

00:06:52,340 --> 00:06:59,610
different devices having different ways

00:06:55,110 --> 00:07:02,069
to deploy code so you provide a abstract

00:06:59,610 --> 00:07:04,590
deploying model together with the code

00:07:02,069 --> 00:07:07,949
that you compiled it for the different

00:07:04,590 --> 00:07:10,789
hardware architectures and then we

00:07:07,949 --> 00:07:14,159
deploy them into the devices

00:07:10,789 --> 00:07:16,319
automatically using our special using

00:07:14,159 --> 00:07:20,039
our engines that are specially developed

00:07:16,319 --> 00:07:22,110
for different types of devices the same

00:07:20,039 --> 00:07:26,819
tools is also used for different phases

00:07:22,110 --> 00:07:32,430
like give it for the risk management we

00:07:26,819 --> 00:07:37,289
use it to support the coding we use the

00:07:32,430 --> 00:07:41,900
spot coding and then we use the same

00:07:37,289 --> 00:07:44,669
model to analyze what are the potential

00:07:41,900 --> 00:07:48,270
conflicts beta activators and you use

00:07:44,669 --> 00:07:52,710
this for provided that they automate

00:07:48,270 --> 00:07:54,449
take activation conflict manager after

00:07:52,710 --> 00:07:58,169
everything is ready we'll give it to the

00:07:54,449 --> 00:08:01,610
test and a simulation environment that

00:07:58,169 --> 00:08:07,469
is what we provided for the devs face

00:08:01,610 --> 00:08:10,349
and for ops the same model is first used

00:08:07,469 --> 00:08:14,300
to a tool called demon act which

00:08:10,349 --> 00:08:18,419
distributed the parallel act active

00:08:14,300 --> 00:08:20,969
deployment plans into large number of

00:08:18,419 --> 00:08:24,360
devices according to their different

00:08:20,969 --> 00:08:27,060
contacts and after that for each device

00:08:24,360 --> 00:08:30,810
we use in the Genesis engine to actually

00:08:27,060 --> 00:08:33,899
deploy the code into these devices after

00:08:30,810 --> 00:08:39,419
the code is running in a system we use

00:08:33,899 --> 00:08:42,029
the same model as a central artifact to

00:08:39,419 --> 00:08:44,470
coordinate all the feedbacks we cut from

00:08:42,029 --> 00:08:48,100
a system through different tools like

00:08:44,470 --> 00:08:51,370
has access control the automatic

00:08:48,100 --> 00:08:54,090
adaptation based on online learning and

00:08:51,370 --> 00:08:55,300
root cause and license for the behavior

00:08:54,090 --> 00:08:57,820
problems

00:08:55,300 --> 00:09:03,280
so all these come back to the same model

00:08:57,820 --> 00:09:06,520
and pushed back to the depth face using

00:09:03,280 --> 00:09:11,050
the same deployment model that all the

00:09:06,520 --> 00:09:14,380
tools and you can see that all the

00:09:11,050 --> 00:09:16,960
research is around how to come up with

00:09:14,380 --> 00:09:19,270
the best software development tools that

00:09:16,960 --> 00:09:20,070
fit the different phases of IOT

00:09:19,270 --> 00:09:25,450
development

00:09:20,070 --> 00:09:28,870
we don't want to reinvent the wheels so

00:09:25,450 --> 00:09:32,680
the best way we believe is to improve

00:09:28,870 --> 00:09:35,470
adapt and customize existing tools so

00:09:32,680 --> 00:09:38,920
that people those tools that people are

00:09:35,470 --> 00:09:41,740
familiar with and they are the like

00:09:38,920 --> 00:09:45,220
working together with and then we adapt

00:09:41,740 --> 00:09:48,700
them to be able to use the past away for

00:09:45,220 --> 00:09:51,400
the coyote development so now comes the

00:09:48,700 --> 00:09:55,030
question where we can find all these

00:09:51,400 --> 00:09:57,670
tools and I think the answers were clear

00:09:55,030 --> 00:10:01,330
now that nowhere the open source

00:09:57,670 --> 00:10:04,360
community that we can find the best

00:10:01,330 --> 00:10:08,650
software development truth so those are

00:10:04,360 --> 00:10:12,040
just some examples of the open source

00:10:08,650 --> 00:10:15,730
tools that we use to develop as a basis

00:10:12,040 --> 00:10:19,420
to develop our tool for some of the

00:10:15,730 --> 00:10:23,190
tools we'll really go into the source

00:10:19,420 --> 00:10:25,690
code make some hacking changes within it

00:10:23,190 --> 00:10:31,710
some of them we mainly use them as a

00:10:25,690 --> 00:10:35,980
service to call the IP eyes and get the

00:10:31,710 --> 00:10:39,580
information from them and adapt it used

00:10:35,980 --> 00:10:45,090
in our way so that to make the support

00:10:39,580 --> 00:10:49,630
for our T development so just take one

00:10:45,090 --> 00:10:54,430
example the one of the tools is called

00:10:49,630 --> 00:10:55,260
Devon act we use the reused our project

00:10:54,430 --> 00:11:00,660
name

00:10:55,260 --> 00:11:04,740
so the tool is about how to distribute

00:11:00,660 --> 00:11:08,079
some potential or

00:11:04,740 --> 00:11:11,290
alternative deployment plans into a

00:11:08,079 --> 00:11:15,519
large number of devices depending on

00:11:11,290 --> 00:11:17,889
their contacts so analyzed and the

00:11:15,519 --> 00:11:20,620
problem I figure out that the first

00:11:17,889 --> 00:11:23,380
thing we need is to know what are the

00:11:20,620 --> 00:11:26,350
devices and what are the context of each

00:11:23,380 --> 00:11:31,620
of them this is what we called the fleet

00:11:26,350 --> 00:11:35,680
monitoring after that we assign the

00:11:31,620 --> 00:11:39,910
deployment plans to all of them based on

00:11:35,680 --> 00:11:44,019
the context and then the mapping will be

00:11:39,910 --> 00:11:47,470
used as input for the new structure as

00:11:44,019 --> 00:11:52,350
code solutions to actually install the

00:11:47,470 --> 00:11:55,389
software modules into the devices by

00:11:52,350 --> 00:11:59,560
dividing the system into these three

00:11:55,389 --> 00:12:01,720
components I find that for fleet

00:11:59,560 --> 00:12:03,639
monitoring we have good hopeless

00:12:01,720 --> 00:12:04,589
offering warps and one of them is

00:12:03,639 --> 00:12:09,940
assured

00:12:04,589 --> 00:12:16,139
LT hub which has both online service and

00:12:09,940 --> 00:12:20,709
also an open source code base I think

00:12:16,139 --> 00:12:22,779
ten years ago when you come into open

00:12:20,709 --> 00:12:23,709
source community and shout out the word

00:12:22,779 --> 00:12:27,010
microsoft

00:12:23,709 --> 00:12:31,290
probably get a lot of hungry stirrings

00:12:27,010 --> 00:12:35,199
everything has changed so Microsoft is

00:12:31,290 --> 00:12:39,540
actually contributing to open source and

00:12:35,199 --> 00:12:43,260
as for the device deployment some of the

00:12:39,540 --> 00:12:46,870
new infrastructure as code solutions

00:12:43,260 --> 00:12:50,709
like in Siebel and also our home

00:12:46,870 --> 00:12:53,920
solution the Genesis can also work here

00:12:50,709 --> 00:12:56,819
so the problem then is small on the

00:12:53,920 --> 00:12:59,920
fleet assignment we can focus on this I

00:12:56,819 --> 00:13:04,420
saw a research effort and will come up

00:12:59,920 --> 00:13:06,819
with the solution motor based solution

00:13:04,420 --> 00:13:08,510
so abstract the information into about

00:13:06,819 --> 00:13:14,370
into

00:13:08,510 --> 00:13:17,340
standard model and use the theory prove

00:13:14,370 --> 00:13:21,330
er to solve this problem in the

00:13:17,340 --> 00:13:25,800
mathematical way Eilert use cases also

00:13:21,330 --> 00:13:29,310
one of tools to benefit people outside

00:13:25,800 --> 00:13:32,070
of the product so one of the efforts is

00:13:29,310 --> 00:13:35,280
that some people phone from the project

00:13:32,070 --> 00:13:41,760
has decided to start up their own

00:13:35,280 --> 00:13:44,430
company in January 2019 the company is

00:13:41,760 --> 00:13:47,160
about providing the software as a

00:13:44,430 --> 00:13:51,050
service solution for continuous risk

00:13:47,160 --> 00:13:54,000
management providing to the DevOps teams

00:13:51,050 --> 00:13:56,340
the companies start to have some real

00:13:54,000 --> 00:14:01,410
users from a health and construction

00:13:56,340 --> 00:14:02,810
domain but this one of the 10 tools what

00:14:01,410 --> 00:14:06,570
about the others

00:14:02,810 --> 00:14:10,920
as a project funded by public money we

00:14:06,570 --> 00:14:14,970
really want that all people can benefit

00:14:10,920 --> 00:14:16,680
from the truth and can even join us to

00:14:14,970 --> 00:14:21,180
maintain these tools and I mean prove

00:14:16,680 --> 00:14:22,710
them even after the project is over so

00:14:21,180 --> 00:14:25,860
we can probably already guess what I

00:14:22,710 --> 00:14:29,220
want to say in the next slide yes we

00:14:25,860 --> 00:14:33,260
have our framework open sourced from the

00:14:29,220 --> 00:14:36,870
very beginning on gate lab and we have

00:14:33,260 --> 00:14:39,510
submitted our application to audible -

00:14:36,870 --> 00:14:42,840
so this is our story about a research

00:14:39,510 --> 00:14:45,290
project followed by open source thank

00:14:42,840 --> 00:14:45,290

YouTube URL: https://www.youtube.com/watch?v=qaVSbmJWZYA


