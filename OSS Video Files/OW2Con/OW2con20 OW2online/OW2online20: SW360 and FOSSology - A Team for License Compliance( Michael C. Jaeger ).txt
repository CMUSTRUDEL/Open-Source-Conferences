Title: OW2online20: SW360 and FOSSology - A Team for License Compliance( Michael C. Jaeger )
Publication date: 2020-06-22
Playlist: OW2con20 OW2online
Description: 
	FOSSology is an open source license compliance software system and toolkit. As a toolkit, you can run license, copyright and export control scans from the command line. As a system, a database and Web user interface provide you with a compliance workflow. License, copyright and export scanners are tools used in the workflow. FOSSology is license under the GPL, it is therefore available for anyone to facilitate license compliance tasks. While FOSSology provides the license analysis for individual OSS components, the Eclipse OSS project SW360 is a software catalogue to provide a central place for managing and sharing license information about software components used by an organization. It is designed to neatly integrate into existing infrastructures related to the management of software artifacts and projects by providing separate backend services for distinct tasks and a Web application to access these services.
Captions: 
	00:00:01,300 --> 00:00:04,399
[Music]

00:00:09,710 --> 00:00:13,889
my name is Michelle Giga and I would

00:00:12,360 --> 00:00:17,190
like to talk to you a little bit about

00:00:13,889 --> 00:00:20,100
force ology and SW 362 open-source tools

00:00:17,190 --> 00:00:21,990
in the area of license compliance we

00:00:20,100 --> 00:00:24,720
have the motto open-source license

00:00:21,990 --> 00:00:26,820
compliance by open source software so

00:00:24,720 --> 00:00:28,680
both software projects are actually open

00:00:26,820 --> 00:00:31,679
source projects let's start with force

00:00:28,680 --> 00:00:33,600
ology first force ology is a tool which

00:00:31,679 --> 00:00:35,969
finds license statements this sounds

00:00:33,600 --> 00:00:39,120
actually very trivial but it actually

00:00:35,969 --> 00:00:41,070
means a lot if you have an upload where

00:00:39,120 --> 00:00:43,320
no license statements are contained

00:00:41,070 --> 00:00:45,600
force ology will not find anything so

00:00:43,320 --> 00:00:47,700
you need to make sure that this package

00:00:45,600 --> 00:00:49,440
which you analyze with fossil ogee

00:00:47,700 --> 00:00:51,780
actually contains license statements

00:00:49,440 --> 00:00:54,059
also it doesn't look for source code if

00:00:51,780 --> 00:00:56,039
you have source code only force ology

00:00:54,059 --> 00:00:58,620
will not find anything if you look for

00:00:56,039 --> 00:01:00,449
source code the census to look on the

00:00:58,620 --> 00:01:02,190
origin of the phone source code and you

00:01:00,449 --> 00:01:03,690
need to have a database of already

00:01:02,190 --> 00:01:05,700
published source code for saleh g

00:01:03,690 --> 00:01:07,680
doesn't have that it just gets for

00:01:05,700 --> 00:01:10,320
licensing statements in order to analyze

00:01:07,680 --> 00:01:12,360
the package situation why would you need

00:01:10,320 --> 00:01:14,189
to look for license statement in the

00:01:12,360 --> 00:01:15,900
package anyway because many open source

00:01:14,189 --> 00:01:18,240
projects declare their licensing on

00:01:15,900 --> 00:01:20,490
their home page actually if you look

00:01:18,240 --> 00:01:22,890
inside packages for example Apache

00:01:20,490 --> 00:01:25,229
thrift and you use force ology you will

00:01:22,890 --> 00:01:27,090
find many different licensing and that's

00:01:25,229 --> 00:01:28,619
natural because open source software is

00:01:27,090 --> 00:01:31,049
comprised of other open source software

00:01:28,619 --> 00:01:32,850
or open source software's comprised of

00:01:31,049 --> 00:01:35,340
contributions by different parties and

00:01:32,850 --> 00:01:37,650
maybe they have used different licensing

00:01:35,340 --> 00:01:39,570
also if you look for example at the very

00:01:37,650 --> 00:01:41,880
famous open source project the Linux

00:01:39,570 --> 00:01:44,340
kernel project you will find depending

00:01:41,880 --> 00:01:47,579
on how you counted up to 30 distinctive

00:01:44,340 --> 00:01:50,430
licensing licensing statements for Saleh

00:01:47,579 --> 00:01:52,320
G is in fact a quite old project it was

00:01:50,430 --> 00:01:55,110
published by hewlett-packard in the year

00:01:52,320 --> 00:01:58,020
2008 and it was licensed under the GPL

00:01:55,110 --> 00:02:01,200
2.0 from that on today it's still

00:01:58,020 --> 00:02:02,939
available under the GPL 2.0 at the time

00:02:01,200 --> 00:02:05,490
when he'll a packet was publishing it

00:02:02,939 --> 00:02:07,049
they were scanning the Linux distros

00:02:05,490 --> 00:02:09,330
they have used for their printers

00:02:07,049 --> 00:02:11,640
scanners and so on and they found that

00:02:09,330 --> 00:02:13,710
it would make sense actually to store

00:02:11,640 --> 00:02:15,780
already scanned files because

00:02:13,710 --> 00:02:18,120
from district to district for product to

00:02:15,780 --> 00:02:20,160
product actually only a fraction of the

00:02:18,120 --> 00:02:22,380
fights was different so you could save

00:02:20,160 --> 00:02:25,770
time and efforts when you when you store

00:02:22,380 --> 00:02:28,080
files where you have already scanned the

00:02:25,770 --> 00:02:30,540
licensing inside so they came up with

00:02:28,080 --> 00:02:32,400
the server software which was usable by

00:02:30,540 --> 00:02:34,890
different persons working on different

00:02:32,400 --> 00:02:38,790
products and published it as an open

00:02:34,890 --> 00:02:40,260
source project in 2015 the project has

00:02:38,790 --> 00:02:42,350
been transferred to the Linux Foundation

00:02:40,260 --> 00:02:45,300
and since then it's a Linux Foundation

00:02:42,350 --> 00:02:47,370
collaborative project today for salah g

00:02:45,300 --> 00:02:49,890
is a server software which allows for

00:02:47,370 --> 00:02:52,620
multiple users analyzing files in a

00:02:49,890 --> 00:02:54,540
multi-tenant way the working with force

00:02:52,620 --> 00:02:57,780
ology is quite simple first you upload a

00:02:54,540 --> 00:03:00,150
package agents of the for salah g server

00:02:57,780 --> 00:03:02,700
software will unpack the posts the

00:03:00,150 --> 00:03:04,890
uploaded package look by different

00:03:02,700 --> 00:03:07,050
criteria for example licensing statement

00:03:04,890 --> 00:03:09,570
copyright statements may be also trade

00:03:07,050 --> 00:03:12,420
compliance when the scanning has been

00:03:09,570 --> 00:03:14,310
completed then the user can review the

00:03:12,420 --> 00:03:16,830
findings and actually sort out false

00:03:14,310 --> 00:03:19,170
positives and if that review check has

00:03:16,830 --> 00:03:22,050
been has been finished then you can

00:03:19,170 --> 00:03:25,320
generate reporting for example avert

00:03:22,050 --> 00:03:28,530
based report text files or reports in

00:03:25,320 --> 00:03:30,900
the SPD x format there are a lot of

00:03:28,530 --> 00:03:33,480
licenses a licensing scanner out there

00:03:30,900 --> 00:03:36,180
but the main point with fossil Egeus its

00:03:33,480 --> 00:03:38,580
specialized for review and after some

00:03:36,180 --> 00:03:41,130
years of your reviewing open source

00:03:38,580 --> 00:03:44,400
licensing and uploads it was found that

00:03:41,130 --> 00:03:47,550
a hierarchical view aggregating license

00:03:44,400 --> 00:03:49,740
findings is actually very important to

00:03:47,550 --> 00:03:52,680
sort out and quickly navigate to

00:03:49,740 --> 00:03:54,870
important licensing also for saleh g is

00:03:52,680 --> 00:03:57,780
optimized for looking into licensing

00:03:54,870 --> 00:04:00,510
found in individual files with powerful

00:03:57,780 --> 00:04:03,270
highlighting have a license relevant

00:04:00,510 --> 00:04:06,480
statements and also keywords and showing

00:04:03,270 --> 00:04:09,060
at the same time which licensing is

00:04:06,480 --> 00:04:13,050
actually referring to which found key

00:04:09,060 --> 00:04:15,270
word or text phrase and if you look at

00:04:13,050 --> 00:04:17,760
how fossil ogee works you will find out

00:04:15,270 --> 00:04:19,910
that it's as much about conclusions it's

00:04:17,760 --> 00:04:22,410
about that you scan a file that you

00:04:19,910 --> 00:04:24,570
review what the scanner has been found

00:04:22,410 --> 00:04:27,450
and then you conclude the licensing for

00:04:24,570 --> 00:04:29,610
a file what sounds cumbersome

00:04:27,450 --> 00:04:32,220
is actually also the thinking of the SPD

00:04:29,610 --> 00:04:34,350
external because also the SPD external

00:04:32,220 --> 00:04:36,630
distinguishes between licensing which

00:04:34,350 --> 00:04:38,930
has been identified in a file and the

00:04:36,630 --> 00:04:42,150
conclusion an expert was actually

00:04:38,930 --> 00:04:45,420
deriving from the findings it depends on

00:04:42,150 --> 00:04:47,190
the domain how much a conclusion is

00:04:45,420 --> 00:04:49,470
actually different from what a scanner

00:04:47,190 --> 00:04:52,140
has identified depending on the domain

00:04:49,470 --> 00:04:54,840
it can be up to 30% of the identified

00:04:52,140 --> 00:04:59,370
license statements where an expert has

00:04:54,840 --> 00:05:01,260
concluded a more precise definition of

00:04:59,370 --> 00:05:02,910
licensing has concluded maybe a

00:05:01,260 --> 00:05:06,450
different license and so on and so on

00:05:02,910 --> 00:05:08,880
and of course with fossil adji you can

00:05:06,450 --> 00:05:11,130
still automate if you wish to prefer or

00:05:08,880 --> 00:05:12,990
maybe pre check the found licensing

00:05:11,130 --> 00:05:15,150
without having an expert looking at

00:05:12,990 --> 00:05:17,880
individual files you have the REST API

00:05:15,150 --> 00:05:19,620
but you have also another project which

00:05:17,880 --> 00:05:21,690
is called force driver which is a Python

00:05:19,620 --> 00:05:23,880
library to remote control.you force

00:05:21,690 --> 00:05:25,860
ology and you have command-line tools

00:05:23,880 --> 00:05:29,130
that are available after you have

00:05:25,860 --> 00:05:32,250
installed for salah g the rest api by

00:05:29,130 --> 00:05:34,860
the way is very easy to use in the UI

00:05:32,250 --> 00:05:38,760
where you actually administer the

00:05:34,860 --> 00:05:41,730
settings of a user every user can go

00:05:38,760 --> 00:05:44,340
into this part of the UI and generate a

00:05:41,730 --> 00:05:47,160
token and this token can be used to

00:05:44,340 --> 00:05:49,200
authenticate against the rest api the

00:05:47,160 --> 00:05:51,710
rest API usage is also very

00:05:49,200 --> 00:05:54,480
straightforward first you prepare maybe

00:05:51,710 --> 00:05:56,430
you can create folders you can look at

00:05:54,480 --> 00:05:58,170
what's inside of the folders you can try

00:05:56,430 --> 00:05:58,740
to find your folder that you would like

00:05:58,170 --> 00:06:01,950
to use

00:05:58,740 --> 00:06:03,960
then you schedule skinjobs depending on

00:06:01,950 --> 00:06:05,610
your choice only for licensing for

00:06:03,960 --> 00:06:08,340
licensing and copyright statements and

00:06:05,610 --> 00:06:10,470
so on then you observe how long actually

00:06:08,340 --> 00:06:12,390
the scan dropped eight it's a

00:06:10,470 --> 00:06:14,220
long-running thing so it's not really

00:06:12,390 --> 00:06:16,830
that you have a request and then yet you

00:06:14,220 --> 00:06:18,420
get to response back and after the scan

00:06:16,830 --> 00:06:22,020
jobs have been finished you can download

00:06:18,420 --> 00:06:24,870
different reporting's they are more

00:06:22,020 --> 00:06:27,570
Force ology projects for example you

00:06:24,870 --> 00:06:29,820
have a takashi which is a novel license

00:06:27,570 --> 00:06:31,710
scanner only it's not really a UI

00:06:29,820 --> 00:06:34,050
project it's a command-line scanner and

00:06:31,710 --> 00:06:36,480
you would like to built in your scanner

00:06:34,050 --> 00:06:39,450
module with atashi which is based on

00:06:36,480 --> 00:06:41,220
information retrieval metrics the old

00:06:39,450 --> 00:06:43,140
way of finding licenses is by

00:06:41,220 --> 00:06:45,870
Tech's compersion or maybe using regular

00:06:43,140 --> 00:06:47,790
expressions or keywords but we found

00:06:45,870 --> 00:06:49,350
that also a new technology can be

00:06:47,790 --> 00:06:51,540
helpful which was derived from

00:06:49,350 --> 00:06:54,360
information retrieval working on tech

00:06:51,540 --> 00:06:57,150
statistics another open source project

00:06:54,360 --> 00:07:00,060
is about fossil og slides sophist ology

00:06:57,150 --> 00:07:02,340
slides is a one day course which has

00:07:00,060 --> 00:07:05,160
been published to the public on github

00:07:02,340 --> 00:07:06,570
where every party can actually take the

00:07:05,160 --> 00:07:08,850
slides and give their own trainings

00:07:06,570 --> 00:07:10,740
about Foss ology and another project

00:07:08,850 --> 00:07:13,260
that you will find in a fossil og group

00:07:10,740 --> 00:07:14,730
on github is for solo GML which is just

00:07:13,260 --> 00:07:16,080
an experiment how useful machine

00:07:14,730 --> 00:07:20,010
learning would be for license

00:07:16,080 --> 00:07:22,320
identification if you like force ology

00:07:20,010 --> 00:07:24,690
check out for solo G org or check out

00:07:22,320 --> 00:07:27,330
the github pages and maybe you would

00:07:24,690 --> 00:07:29,280
like to also start this project if you

00:07:27,330 --> 00:07:31,380
like force ology even more and maybe use

00:07:29,280 --> 00:07:33,510
it consider also to put your

00:07:31,380 --> 00:07:36,750
organization logo on the force ology

00:07:33,510 --> 00:07:38,640
homepage because it helps to actually

00:07:36,750 --> 00:07:40,770
support the credibility of histology

00:07:38,640 --> 00:07:44,460
which is very important for license

00:07:40,770 --> 00:07:45,990
control so far for force ology I hope

00:07:44,460 --> 00:07:48,000
you have questions feel free to contact

00:07:45,990 --> 00:07:53,130
me and now I would like to switch over

00:07:48,000 --> 00:07:56,010
to SW 360 SW 360 an open-source

00:07:53,130 --> 00:07:58,530
component hub came from the idea that in

00:07:56,010 --> 00:08:00,390
a larger organization you have multiple

00:07:58,530 --> 00:08:02,400
systems which deal actually with

00:08:00,390 --> 00:08:04,169
software components you maybe have

00:08:02,400 --> 00:08:06,419
licensed canals you have an artifact

00:08:04,169 --> 00:08:07,890
repository maybe you have already some

00:08:06,419 --> 00:08:10,229
project bill of material management

00:08:07,890 --> 00:08:12,450
maybe you do some code quality checking

00:08:10,229 --> 00:08:15,090
maybe you do source code scanning all

00:08:12,450 --> 00:08:17,310
these different software or servers or

00:08:15,090 --> 00:08:19,350
applications are actually dealing with

00:08:17,310 --> 00:08:21,090
software components and in an

00:08:19,350 --> 00:08:23,400
organization you would like to integrate

00:08:21,090 --> 00:08:25,290
these different systems and when you

00:08:23,400 --> 00:08:27,479
integrate them you're writing adapters

00:08:25,290 --> 00:08:30,000
and the likely problem that's actually

00:08:27,479 --> 00:08:31,620
happening is that mapping of software

00:08:30,000 --> 00:08:32,490
component naming will be part and will

00:08:31,620 --> 00:08:34,740
be necessary

00:08:32,490 --> 00:08:36,690
so mapping of software component naming

00:08:34,740 --> 00:08:38,940
comes from the fact that different

00:08:36,690 --> 00:08:41,400
systems are actually using different

00:08:38,940 --> 00:08:45,180
ways of naming components some use may

00:08:41,400 --> 00:08:47,790
be packaging URLs some use vendor

00:08:45,180 --> 00:08:49,709
component version some are calling

00:08:47,790 --> 00:08:51,750
vendors differently some are calling

00:08:49,709 --> 00:08:54,540
components differently so there can be

00:08:51,750 --> 00:08:55,529
very individual ways of how to express a

00:08:54,540 --> 00:08:58,200
company

00:08:55,529 --> 00:09:00,180
and for every connection between two

00:08:58,200 --> 00:09:01,980
systems you might come up with an

00:09:00,180 --> 00:09:06,060
individual mapping which is bad because

00:09:01,980 --> 00:09:08,550
it may cause a lot of effort the basic

00:09:06,060 --> 00:09:11,310
idea of software's W 360 is for large

00:09:08,550 --> 00:09:13,589
organization to serve as a component

00:09:11,310 --> 00:09:16,260
catalog as we say a phonebook for

00:09:13,589 --> 00:09:19,529
components where all software components

00:09:16,260 --> 00:09:21,360
which are in the organization and are

00:09:19,529 --> 00:09:23,970
referenced by different other systems

00:09:21,360 --> 00:09:26,790
can be strengths released or it as a hub

00:09:23,970 --> 00:09:29,730
and mapping can be done centrally there

00:09:26,790 --> 00:09:31,800
and you don't have this this need to

00:09:29,730 --> 00:09:33,990
build mappings between each individual

00:09:31,800 --> 00:09:36,450
system between individual systems and

00:09:33,990 --> 00:09:38,940
that's actually also very important

00:09:36,450 --> 00:09:41,250
because software 360 is not a component

00:09:38,940 --> 00:09:44,640
catalog of the most popular components

00:09:41,250 --> 00:09:48,450
or the most important 10,000 components

00:09:44,640 --> 00:09:51,810
and so on it's rather a catalog of

00:09:48,450 --> 00:09:54,089
components which are in use in your

00:09:51,810 --> 00:09:56,430
organization that's a different thing

00:09:54,089 --> 00:09:58,589
other other solutions can do this

00:09:56,430 --> 00:10:02,160
catalog of the most important 10,000

00:09:58,589 --> 00:10:04,589
components better than SW 360 SW 360 is

00:10:02,160 --> 00:10:07,380
truly for the components that are in use

00:10:04,589 --> 00:10:09,180
inside your organization and when you

00:10:07,380 --> 00:10:10,950
have a catalog of components it's very

00:10:09,180 --> 00:10:12,990
natural that you get to the next step

00:10:10,950 --> 00:10:14,940
imagine that you have different projects

00:10:12,990 --> 00:10:16,620
or products in your organization you

00:10:14,940 --> 00:10:18,329
would like actually to create bill of

00:10:16,620 --> 00:10:20,820
materials for for your products or

00:10:18,329 --> 00:10:22,770
projects and from the component catalogs

00:10:20,820 --> 00:10:24,870
you can actually map usage to your

00:10:22,770 --> 00:10:27,060
products and projects so you can manage

00:10:24,870 --> 00:10:28,770
the bill of materials for them and then

00:10:27,060 --> 00:10:31,380
actually enables a lot of other use

00:10:28,770 --> 00:10:33,510
cases for example not only for open

00:10:31,380 --> 00:10:35,700
source licensing to create license

00:10:33,510 --> 00:10:37,740
documentation for a product but also you

00:10:35,700 --> 00:10:39,690
could track vulnerabilities you could

00:10:37,740 --> 00:10:41,430
maybe care for trade compliance you

00:10:39,690 --> 00:10:43,740
could maybe find out about the use of

00:10:41,430 --> 00:10:46,380
commercial software inside your product

00:10:43,740 --> 00:10:49,110
and so on and so on that's the basic

00:10:46,380 --> 00:10:51,810
idea of SW 360 it focuses on the

00:10:49,110 --> 00:10:54,720
component on the components which are

00:10:51,810 --> 00:10:56,940
inside inside your organization and

00:10:54,720 --> 00:10:58,800
based on that and maintains bill of

00:10:56,940 --> 00:11:01,020
materials for your projects and products

00:10:58,800 --> 00:11:03,900
and this a bill of material you can run

00:11:01,020 --> 00:11:06,250
all the use cases which you would like

00:11:03,900 --> 00:11:09,280
to have a new distributive product

00:11:06,250 --> 00:11:13,180
s/w 360 is also very open not only it

00:11:09,280 --> 00:11:15,400
has a REST API but it uses the SPX files

00:11:13,180 --> 00:11:17,170
for for example importing licensing

00:11:15,400 --> 00:11:19,960
information to generate the license

00:11:17,170 --> 00:11:22,150
documentation for a product and by using

00:11:19,960 --> 00:11:24,370
SPD X is actually very independent from

00:11:22,150 --> 00:11:26,590
force ology if you have another license

00:11:24,370 --> 00:11:29,440
scanner or other compliance tools which

00:11:26,590 --> 00:11:32,050
generate SPD X it's no problem for SW

00:11:29,440 --> 00:11:36,550
360 because just relying on the SPD X

00:11:32,050 --> 00:11:39,760
file and also recently as it was added

00:11:36,550 --> 00:11:42,610
to SW 360 that you can that you can also

00:11:39,760 --> 00:11:47,070
upload the Bill of material of SW of in

00:11:42,610 --> 00:11:50,080
SPD X an SW 360 is not alone as

00:11:47,070 --> 00:11:53,800
companion to SW 360 there is antenna

00:11:50,080 --> 00:11:56,830
also an eclipse project and SW 360

00:11:53,800 --> 00:11:59,950
antenna is not an application that runs

00:11:56,830 --> 00:12:02,050
it's on its own it's rather a collection

00:11:59,950 --> 00:12:04,000
of command-line tools or modules for

00:12:02,050 --> 00:12:06,970
example for maven based build projects

00:12:04,000 --> 00:12:09,520
which are helping you to generate the

00:12:06,970 --> 00:12:12,280
Bill of material and use the rest api

00:12:09,520 --> 00:12:14,680
and SW 360 to transfer the determined

00:12:12,280 --> 00:12:16,870
bill of material at the same time for

00:12:14,680 --> 00:12:19,420
example in the Eclipse ecosystem there

00:12:16,870 --> 00:12:22,420
is steady steady is a new project in the

00:12:19,420 --> 00:12:24,210
Eclipse Foundation which takes the Bill

00:12:22,420 --> 00:12:28,390
of material and can maintain

00:12:24,210 --> 00:12:30,670
vulnerabilities and also even more can

00:12:28,390 --> 00:12:33,280
for example find malicious code in your

00:12:30,670 --> 00:12:35,440
software project and if you look into

00:12:33,280 --> 00:12:37,900
the Eclipse Foundation there is also a

00:12:35,440 --> 00:12:40,600
great framework for IP due diligence

00:12:37,900 --> 00:12:43,810
when you are in the role of publishing a

00:12:40,600 --> 00:12:45,820
new project as a project of the Eclipse

00:12:43,810 --> 00:12:47,950
Foundation there is an office and their

00:12:45,820 --> 00:12:50,740
process is defined which gives you

00:12:47,950 --> 00:12:52,750
guidance and also support to be licensed

00:12:50,740 --> 00:12:54,339
compliant and delivered with your

00:12:52,750 --> 00:12:58,570
Eclipse projects license compliant

00:12:54,339 --> 00:13:01,420
software so that was it for SW 360 and

00:12:58,570 --> 00:13:03,430
before that fossil OG I hope that this

00:13:01,420 --> 00:13:05,589
introduction was a help to you and

00:13:03,430 --> 00:13:08,550
please feel free to contact me in case

00:13:05,589 --> 00:13:08,550

YouTube URL: https://www.youtube.com/watch?v=r5DIhYkCJms


