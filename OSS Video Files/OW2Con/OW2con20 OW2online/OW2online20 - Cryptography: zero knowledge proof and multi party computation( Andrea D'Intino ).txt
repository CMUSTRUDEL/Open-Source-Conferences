Title: OW2online20 - Cryptography: zero knowledge proof and multi party computation( Andrea D'Intino )
Publication date: 2020-06-22
Playlist: OW2con20 OW2online
Description: 
	Zenroom is a tiny and cryptography smart contract executor that integrates in any application to authenticate and restrict access to data and execute human-readable smart contracts. In the video we show how to run Zenroom as a command line application or how to use the WASM-based web demo.
Captions: 
	00:00:01,300 --> 00:00:04,399
[Music]

00:00:09,889 --> 00:00:14,340
hello everyone

00:00:11,639 --> 00:00:17,940
Andrea from die Nora here I'm here to

00:00:14,340 --> 00:00:20,490
tell you about Zen room our crypto smart

00:00:17,940 --> 00:00:23,430
contract executor for database and

00:00:20,490 --> 00:00:27,090
blockchain so I'm going to show you this

00:00:23,430 --> 00:00:30,019
PowerPoint just a few slides then I'm

00:00:27,090 --> 00:00:33,630
gonna go through our website quickly and

00:00:30,019 --> 00:00:36,829
later I will show you a couple of

00:00:33,630 --> 00:00:41,280
examples about how to use Zen room once

00:00:36,829 --> 00:00:43,620
using our web-based demo website and

00:00:41,280 --> 00:00:48,059
once using Zen room as a common line

00:00:43,620 --> 00:00:52,170
application so then we will not show Zen

00:00:48,059 --> 00:00:55,170
limb is written in C so and CC 99 when

00:00:52,170 --> 00:00:58,260
built the payload is usually around one

00:00:55,170 --> 00:01:00,539
megabyte and it runs in as little as

00:00:58,260 --> 00:01:04,979
five hundred cases of RAM so it can run

00:01:00,539 --> 00:01:08,040
on very small systems we have building

00:01:04,979 --> 00:01:12,000
scripts and continuous integration

00:01:08,040 --> 00:01:18,119
building for Linux Windows Mac Android

00:01:12,000 --> 00:01:21,960
and iOS on multiple platform so x86 x64

00:01:18,119 --> 00:01:24,720
and armed plus we have a built for

00:01:21,960 --> 00:01:29,369
wazzle that I'm that I will show you in

00:01:24,720 --> 00:01:33,119
action we have a prototype builds for

00:01:29,369 --> 00:01:39,259
embedded hardware as well as binders for

00:01:33,119 --> 00:01:44,310
JavaScript the Java go Python closure

00:01:39,259 --> 00:01:48,390
and I think that's all most important

00:01:44,310 --> 00:01:50,460
Zen group executes smart contracts in an

00:01:48,390 --> 00:01:51,030
English like language that I will show

00:01:50,460 --> 00:01:55,409
you in a minute

00:01:51,030 --> 00:01:58,950
one more slides selected features Zen

00:01:55,409 --> 00:02:01,890
room offers fully deterministic and to

00:01:58,950 --> 00:02:08,429
an encryption where end-to-end means

00:02:01,890 --> 00:02:10,229
that you can encrypt something on an

00:02:08,429 --> 00:02:12,870
Android phone

00:02:10,229 --> 00:02:13,920
decrypted on our us and do some more

00:02:12,870 --> 00:02:16,920
creations in the

00:02:13,920 --> 00:02:22,050
sir and do some more encryption or

00:02:16,920 --> 00:02:25,260
decryption in a server so Zen rule runs

00:02:22,050 --> 00:02:29,220
in a fully deterministic mode meaning

00:02:25,260 --> 00:02:33,510
that for example the generation of a

00:02:29,220 --> 00:02:37,010
random number given the same random seed

00:02:33,510 --> 00:02:39,720
at the same parameters would generates

00:02:37,010 --> 00:02:44,550
the same random number of every platform

00:02:39,720 --> 00:02:46,380
it runs on Zen group performs what we

00:02:44,550 --> 00:02:49,140
call traditional cryptography so

00:02:46,380 --> 00:02:52,890
symmetric innocent metrics as well as

00:02:49,140 --> 00:02:56,940
zeroes proof and that case narcs where

00:02:52,890 --> 00:02:58,830
did that key snarks is a an offline

00:02:56,940 --> 00:03:00,510
version of the knowledge proof running

00:02:58,830 --> 00:03:03,930
it's more contract that is currently

00:03:00,510 --> 00:03:07,320
used in block chains in terms of curves

00:03:03,930 --> 00:03:10,010
Zen room can use different curves we can

00:03:07,320 --> 00:03:13,980
do a leak elliptic curve pairing

00:03:10,010 --> 00:03:17,209
elliptic curve diffie-hellman hashing

00:03:13,980 --> 00:03:20,400
and signing for multiple block chains

00:03:17,209 --> 00:03:23,549
currently zandrew supports a Bitcoin you

00:03:20,400 --> 00:03:27,840
know if derivatives we can do signature

00:03:23,549 --> 00:03:30,060
hashing for Hyper ledger so tooth for

00:03:27,840 --> 00:03:35,070
cosmos network and we're working with

00:03:30,060 --> 00:03:38,730
areum as well our website so the source

00:03:35,070 --> 00:03:41,100
code you finally need up here we have a

00:03:38,730 --> 00:03:42,260
download page on our main website that

00:03:41,100 --> 00:03:44,940
I'm gonna show you in a minute

00:03:42,260 --> 00:03:49,890
documentation page is Deb Dodds annual

00:03:44,940 --> 00:03:53,130
dork and our web-based demo is on that

00:03:49,890 --> 00:03:57,410
birds and malodorous team which is where

00:03:53,130 --> 00:04:01,530
I'm going next so quick on our website

00:03:57,410 --> 00:04:05,840
Xander dork here you can submit to our

00:04:01,530 --> 00:04:10,620
webinars we have usually one per month

00:04:05,840 --> 00:04:12,709
we scroll down here you have our source

00:04:10,620 --> 00:04:12,709
code

00:04:13,319 --> 00:04:20,850
our documentation and we're web demo and

00:04:17,100 --> 00:04:25,380
down here you have all our downloads so

00:04:20,850 --> 00:04:27,900
Linux Linux Mac common line x64 we'd

00:04:25,380 --> 00:04:32,240
never build for the x86 but obviously we

00:04:27,900 --> 00:04:35,130
can do that Windows is x86 Mac classic

00:04:32,240 --> 00:04:38,460
3664 this

00:04:35,130 --> 00:04:44,930
those are builds of Zen room as a

00:04:38,460 --> 00:04:50,910
library so android arm x arm 64 and x86

00:04:44,930 --> 00:04:54,060
iOS and below we have package we have

00:04:50,910 --> 00:04:56,970
bindings the packages so we have a giant

00:04:54,060 --> 00:04:59,310
nerd Zen room Raymond wasn't we have an

00:04:56,970 --> 00:05:02,360
NPM package for tip to be used in

00:04:59,310 --> 00:05:06,840
JavaScript Python bindings and go log

00:05:02,360 --> 00:05:08,699
let's go on a little bit let's open the

00:05:06,840 --> 00:05:15,449
web base demo that we also called

00:05:08,699 --> 00:05:18,810
sandbox so this uses Zen room trance

00:05:15,449 --> 00:05:20,729
compile it wasn't so the cryptography

00:05:18,810 --> 00:05:24,120
and a smart contract execution that you

00:05:20,729 --> 00:05:27,449
see here runs in the browser let's start

00:05:24,120 --> 00:05:31,099
with the examples let's pick a very

00:05:27,449 --> 00:05:31,099
simple one generator keeper

00:05:31,300 --> 00:05:37,789
so let's look at how the smart contract

00:05:35,150 --> 00:05:41,000
is written scenario simple create the

00:05:37,789 --> 00:05:44,150
keeper given that I know Nass and

00:05:41,000 --> 00:05:47,270
there's my my user name let's let's say

00:05:44,150 --> 00:05:50,210
that says Andrea when I create the

00:05:47,270 --> 00:05:54,770
keeper that print of my data I executed

00:05:50,210 --> 00:05:57,039
pressing run and I see the output down

00:05:54,770 --> 00:05:57,039
here

00:05:58,030 --> 00:06:06,820
let's try with a more complicated smart

00:06:01,240 --> 00:06:11,530
contract let me reload this just just to

00:06:06,820 --> 00:06:13,420
be sure sign a message using public key

00:06:11,530 --> 00:06:17,850
encryption this is a slightly more

00:06:13,420 --> 00:06:25,830
complicated smart contract that uses two

00:06:17,850 --> 00:06:29,770
inputs input data to be executed because

00:06:25,830 --> 00:06:34,690
he uses the key pair of the individual

00:06:29,770 --> 00:06:37,100
signing and then given a message and I

00:06:34,690 --> 00:06:38,790
have a keeper when I ride the string

00:06:37,100 --> 00:06:42,100
[Music]

00:06:38,790 --> 00:06:46,600
when I create the signature okay

00:06:42,100 --> 00:06:50,020
this signs a message using the private

00:06:46,600 --> 00:06:53,919
key of Alice and the public key of Bob

00:06:50,020 --> 00:06:59,800
which you can find here we can change

00:06:53,919 --> 00:07:01,330
the drafts this is my sign I can change

00:06:59,800 --> 00:07:06,669
to something else I could write hello

00:07:01,330 --> 00:07:13,180
world and I can run it again like the

00:07:06,669 --> 00:07:15,910
previous one so here we'll have this is

00:07:13,180 --> 00:07:17,860
this is the name of the object this is

00:07:15,910 --> 00:07:19,900
the content which is the encryption of

00:07:17,860 --> 00:07:24,210
this hello world and this is the

00:07:19,900 --> 00:07:27,850
cryptographic signature that contains

00:07:24,210 --> 00:07:32,680
that contains both the public key of

00:07:27,850 --> 00:07:37,150
Alice as well as the public key of one

00:07:32,680 --> 00:07:39,729
I'm gonna try now I'm gonna try I'm

00:07:37,150 --> 00:07:41,770
gonna show you how to use them as a

00:07:39,729 --> 00:07:43,720
common application so let's go back to

00:07:41,770 --> 00:07:47,680
our first smart contract that generates

00:07:43,720 --> 00:07:51,669
a key pair which is this one I'm gonna

00:07:47,680 --> 00:07:56,050
call Pete and I'm gonna go back well I'm

00:07:51,669 --> 00:08:00,220
gonna go go back to a terminal where I

00:07:56,050 --> 00:08:04,780
am using my raspberry pi so here I'm

00:08:00,220 --> 00:08:08,680
using the build of Zen room for for

00:08:04,780 --> 00:08:10,740
Linux arm I can launch sand room as a

00:08:08,680 --> 00:08:13,150
common application like this

00:08:10,740 --> 00:08:16,330
not much is gonna happen now it's a

00:08:13,150 --> 00:08:19,990
waiting for input but what I'm gonna do

00:08:16,330 --> 00:08:23,730
is I'm gonna create a file and write a

00:08:19,990 --> 00:08:30,370
smart contract in it so let's do now no

00:08:23,730 --> 00:08:39,100
contract dawg then I'm gonna paste this

00:08:30,370 --> 00:08:40,630
here create the key pair given around

00:08:39,100 --> 00:08:43,090
mazzaglia's when I could keep her that

00:08:40,630 --> 00:08:50,050
Prindle today yes this should be fine

00:08:43,090 --> 00:08:53,950
I save it and then I run it then room -

00:08:50,050 --> 00:08:57,340
said contract of them and here in the

00:08:53,950 --> 00:09:01,660
bottom I have my key pair the same way

00:08:57,340 --> 00:09:05,170
you saw it below you saw it in the in in

00:09:01,660 --> 00:09:09,310
the website next thing I'm going to show

00:09:05,170 --> 00:09:11,050
how to to save the output of the smart

00:09:09,310 --> 00:09:19,050
contract into file so would you

00:09:11,050 --> 00:09:21,190
gentlemen that contract as n PI T key

00:09:19,050 --> 00:09:24,190
dogs Jason

00:09:21,190 --> 00:09:26,760
so this should redirect the output into

00:09:24,190 --> 00:09:31,360
keynote jason then i can later use

00:09:26,760 --> 00:09:36,490
somewhere else when we look at yes

00:09:31,360 --> 00:09:41,470
Tito Jason was saved and it should have

00:09:36,490 --> 00:09:44,740
saved only the key pair not not the the

00:09:41,470 --> 00:09:49,030
usage log above let's look at the

00:09:44,740 --> 00:09:55,330
content now no Kido Jason here we go

00:09:49,030 --> 00:10:00,160
yeah it's not formatted pretty but I can

00:09:55,330 --> 00:10:02,650
I can copy it and and place it in a

00:10:00,160 --> 00:10:05,920
pretty Jason yeah it's the same format

00:10:02,650 --> 00:10:10,840
as the one you saw above okay

00:10:05,920 --> 00:10:14,950
and obviously the the key I'm using here

00:10:10,840 --> 00:10:17,770
I could be using it in the browser as

00:10:14,950 --> 00:10:21,430
well as in a mobile application which

00:10:17,770 --> 00:10:23,819
makes it and to and encryption okay so

00:10:21,430 --> 00:10:26,550
that was my video

00:10:23,819 --> 00:10:29,279
for anybody who have last question you

00:10:26,550 --> 00:10:38,300
can write me at Andreea

00:10:29,279 --> 00:10:38,300

YouTube URL: https://www.youtube.com/watch?v=KWBjn7rDRf4


