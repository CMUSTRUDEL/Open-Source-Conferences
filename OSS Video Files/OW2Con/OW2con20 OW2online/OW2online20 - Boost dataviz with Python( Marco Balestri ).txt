Title: OW2online20 - Boost dataviz with Python( Marco Balestri )
Publication date: 2020-06-22
Playlist: OW2con20 OW2online
Description: 
	The new R/Python widget allows to embed R and Python scripts directly within a cockpit filling a gap between datavisualization and datascience. With this widget, datascientists are able to integrate python facilities in a heterogeneous and multi-source environment and to present advanced analytics to a broader audience.
Captions: 
	00:00:01,300 --> 00:00:04,399
[Music]

00:00:10,250 --> 00:00:16,759
hello everyone and welcome thank you for

00:00:13,610 --> 00:00:18,890
attending this speech in which we will

00:00:16,759 --> 00:00:21,550
talk about how to boost data

00:00:18,890 --> 00:00:24,890
visualization with modern technology and

00:00:21,550 --> 00:00:27,500
in particular with Python in the next

00:00:24,890 --> 00:00:29,469
about 10 minutes I would like to show

00:00:27,500 --> 00:00:33,980
you how this particular technology

00:00:29,469 --> 00:00:37,160
Python was embedded inside the suite no

00:00:33,980 --> 00:00:39,620
age before starting I would like to say

00:00:37,160 --> 00:00:40,160
a few words about me my name is Marco

00:00:39,620 --> 00:00:43,370
Balestra

00:00:40,160 --> 00:00:46,039
and I am a developer at Norwich labs you

00:00:43,370 --> 00:00:47,870
can find here my references and feel

00:00:46,039 --> 00:00:50,899
free to write me if you have any

00:00:47,870 --> 00:00:53,510
questions at all or any doubts before

00:00:50,899 --> 00:00:56,449
diving into the details of the brand new

00:00:53,510 --> 00:01:00,229
functionalities of knowledge let me give

00:00:56,449 --> 00:01:01,850
you a brief overview of the suite now

00:01:00,229 --> 00:01:04,460
let me tell you something about

00:01:01,850 --> 00:01:07,430
knowledge how does it work what does it

00:01:04,460 --> 00:01:10,640
do and what are the goals and the

00:01:07,430 --> 00:01:13,810
features first of all no edge is open

00:01:10,640 --> 00:01:16,520
source and can be found on a w-2 Forge

00:01:13,810 --> 00:01:21,010
there you can find all the single

00:01:16,520 --> 00:01:24,020
packages and also the complete installer

00:01:21,010 --> 00:01:27,590
speaking now about the functionalities

00:01:24,020 --> 00:01:30,290
of noise I can say that it allows users

00:01:27,590 --> 00:01:33,770
to retrieve data from multiple data

00:01:30,290 --> 00:01:36,590
sources and it combines many analytical

00:01:33,770 --> 00:01:40,520
capabilities inside one single software

00:01:36,590 --> 00:01:44,120
it is accessible by a browser or via

00:01:40,520 --> 00:01:47,900
mobile devices and the analysis that

00:01:44,120 --> 00:01:51,860
users make a noise can be easily

00:01:47,900 --> 00:01:56,030
integrated in external web pages ok this

00:01:51,860 --> 00:01:58,550
was a quick brief overview but given

00:01:56,030 --> 00:02:02,090
this starting point the question is why

00:01:58,550 --> 00:02:04,850
Python well the two key words of these

00:02:02,090 --> 00:02:07,970
new innovations are advanced analytics

00:02:04,850 --> 00:02:10,879
and big data the goal is how to use

00:02:07,970 --> 00:02:15,349
these modern technologies such as Python

00:02:10,879 --> 00:02:18,860
to boost and in order to improve data

00:02:15,349 --> 00:02:21,200
analysis and visualization so on one

00:02:18,860 --> 00:02:23,890
side we have the large amount of data

00:02:21,200 --> 00:02:26,170
that various environments

00:02:23,890 --> 00:02:28,510
give us access to in particular

00:02:26,170 --> 00:02:32,500
knowledge defines a common interface

00:02:28,510 --> 00:02:35,290
which is called data set to access and

00:02:32,500 --> 00:02:38,980
retrieve those data from multiple data

00:02:35,290 --> 00:02:41,350
sources like databases like files or

00:02:38,980 --> 00:02:44,350
they can be repositories and so on on

00:02:41,350 --> 00:02:47,500
the other side instead we have the

00:02:44,350 --> 00:02:51,250
necessity of managing and visualizing

00:02:47,500 --> 00:02:53,739
this data efficiently and to fulfill

00:02:51,250 --> 00:02:56,709
this purpose it is essential for us that

00:02:53,739 --> 00:02:59,920
we learn how to properly use new

00:02:56,709 --> 00:03:02,890
technologies like Python by supporting

00:02:59,920 --> 00:03:06,239
Python as a programming language we can

00:03:02,890 --> 00:03:09,130
exploit the wide range of tools and

00:03:06,239 --> 00:03:11,140
libraries that for instance this

00:03:09,130 --> 00:03:15,100
language makes available to the final

00:03:11,140 --> 00:03:18,250
users we developed the possibility for

00:03:15,100 --> 00:03:21,670
users to create elements that can be for

00:03:18,250 --> 00:03:24,519
instance widgets or datasets by directly

00:03:21,670 --> 00:03:27,959
embedding their own Python scripts

00:03:24,519 --> 00:03:31,030
inside knowledge by doing this

00:03:27,959 --> 00:03:34,750
programmers or data scientists can

00:03:31,030 --> 00:03:38,140
define their code can write their own

00:03:34,750 --> 00:03:41,079
scripts in order to create their own

00:03:38,140 --> 00:03:43,900
highly customized and high-performing

00:03:41,079 --> 00:03:46,959
visualizations but why is it useful to

00:03:43,900 --> 00:03:50,170
embed Python code directly inside

00:03:46,959 --> 00:03:52,480
knowledge well it is useful because in

00:03:50,170 --> 00:03:55,049
this way user can work in a ready

00:03:52,480 --> 00:03:57,660
environment they don't have to deal with

00:03:55,049 --> 00:04:01,660
settings they don't have to deal with

00:03:57,660 --> 00:04:04,650
data gathering they only had to focus on

00:04:01,660 --> 00:04:07,959
the business logic of the application

00:04:04,650 --> 00:04:10,810
inside the script to be embedded in fact

00:04:07,959 --> 00:04:13,540
the users will have the possibility to

00:04:10,810 --> 00:04:16,690
access easily all the large amount of

00:04:13,540 --> 00:04:20,260
data that are that are already bound to

00:04:16,690 --> 00:04:22,840
knowledge this data are already given by

00:04:20,260 --> 00:04:26,979
the suite in the form of data sets and

00:04:22,840 --> 00:04:30,400
they are already ready to be processed

00:04:26,979 --> 00:04:33,310
and used suppose we have already defined

00:04:30,400 --> 00:04:35,960
a bunch of data sets they are based on

00:04:33,310 --> 00:04:39,259
queries files or anything we want

00:04:35,960 --> 00:04:41,770
when we write the pencil code we don't

00:04:39,259 --> 00:04:44,780
have to deal with those readers again

00:04:41,770 --> 00:04:47,750
hmm because they've already been defined

00:04:44,780 --> 00:04:50,990
once so the programmers will have the

00:04:47,750 --> 00:04:53,180
data already at their disposal without

00:04:50,990 --> 00:04:55,160
having to write again the code that

00:04:53,180 --> 00:04:57,710
retrieves them they don't have to write

00:04:55,160 --> 00:05:01,310
the queries or connection to databases

00:04:57,710 --> 00:05:03,800
in the code for instance and then in the

00:05:01,310 --> 00:05:07,910
script they can use all the libraries

00:05:03,800 --> 00:05:10,849
that Python makes available for users

00:05:07,910 --> 00:05:13,099
they can use these libraries that help

00:05:10,849 --> 00:05:17,300
creating plots or graphs and

00:05:13,099 --> 00:05:20,780
visualization and so on and they can use

00:05:17,300 --> 00:05:24,440
these libraries to exploit the imported

00:05:20,780 --> 00:05:27,979
data so combining the power of these two

00:05:24,440 --> 00:05:32,030
entities the data the graphical

00:05:27,979 --> 00:05:36,259
libraries and also the the freedom and

00:05:32,030 --> 00:05:39,199
the easy Python syntax it will be

00:05:36,259 --> 00:05:42,440
possible to make it quicker and easier

00:05:39,199 --> 00:05:45,650
to fill the existing gap between data

00:05:42,440 --> 00:05:48,460
visualization and data science and also

00:05:45,650 --> 00:05:51,430
by working in such an intuitive and

00:05:48,460 --> 00:05:54,770
heterogeneous environment like knowledge

00:05:51,430 --> 00:05:57,490
even people that let me say are not so

00:05:54,770 --> 00:06:00,590
comfortable with coding or programming

00:05:57,490 --> 00:06:01,400
will have access to the bird universe of

00:06:00,590 --> 00:06:04,610
big data

00:06:01,400 --> 00:06:07,159
so now let's simply the full power of

00:06:04,610 --> 00:06:09,159
this new engine embedded with the

00:06:07,159 --> 00:06:12,349
already existing tools and

00:06:09,159 --> 00:06:14,960
functionalities as you can see in this

00:06:12,349 --> 00:06:17,300
video we can exploit Python to create

00:06:14,960 --> 00:06:20,030
highly customized and interactive

00:06:17,300 --> 00:06:22,219
visualization and at the same time make

00:06:20,030 --> 00:06:23,840
it work together with all the

00:06:22,219 --> 00:06:27,110
traditional data analysis

00:06:23,840 --> 00:06:30,380
functionalities and components tables or

00:06:27,110 --> 00:06:33,680
selectors and all these elements can

00:06:30,380 --> 00:06:36,740
interact and modify the output of the

00:06:33,680 --> 00:06:39,020
visualization made with Python but the

00:06:36,740 --> 00:06:42,080
Python code that creates the

00:06:39,020 --> 00:06:45,110
visualization never changes it is

00:06:42,080 --> 00:06:47,599
produced by the user only once when he

00:06:45,110 --> 00:06:48,569
creates the cockpit and then it's

00:06:47,599 --> 00:06:50,909
embedded

00:06:48,569 --> 00:06:54,300
like to inside the widget and stays the

00:06:50,909 --> 00:06:56,789
same forever once a programmer or a data

00:06:54,300 --> 00:06:59,309
scientist has defined the script and as

00:06:56,789 --> 00:07:02,129
created the visualization everyone else

00:06:59,309 --> 00:07:05,429
can use his worker to visualize data

00:07:02,129 --> 00:07:09,569
efficiently without having to rewrite

00:07:05,429 --> 00:07:12,059
the code from scratch the interface that

00:07:09,569 --> 00:07:15,179
helps creating these kinds of

00:07:12,059 --> 00:07:18,839
visualizations is very usable very

00:07:15,179 --> 00:07:21,330
intuitive the user designing the cockpit

00:07:18,839 --> 00:07:23,939
will have a tab like this one in which

00:07:21,330 --> 00:07:27,869
he will have access to the data sets of

00:07:23,939 --> 00:07:30,899
knowledge all he has to do is choose

00:07:27,869 --> 00:07:33,959
from a selector the data set that he

00:07:30,899 --> 00:07:36,719
wants to work with and then the data

00:07:33,959 --> 00:07:40,019
will be imported and the users will also

00:07:36,719 --> 00:07:43,949
be able to see a preview of this data

00:07:40,019 --> 00:07:46,699
and just by doing this simple operation

00:07:43,949 --> 00:07:49,979
the connection with data is made and

00:07:46,699 --> 00:07:52,310
this data will be available in the

00:07:49,979 --> 00:07:54,230
Python code

00:07:52,310 --> 00:07:57,710
these will avoid losing precious time

00:07:54,230 --> 00:08:00,650
and sparing a lot of complexity to the

00:07:57,710 --> 00:08:03,200
programmer since he will not have to

00:08:00,650 --> 00:08:06,770
deal with data readers or connections

00:08:03,200 --> 00:08:09,430
and data will be already available for

00:08:06,770 --> 00:08:14,050
him inside a pandas dataframe variable

00:08:09,430 --> 00:08:14,050
accessible directly in the python code

00:08:14,440 --> 00:08:21,620
in the script editor the user can write

00:08:18,260 --> 00:08:24,320
his script and this code will likely use

00:08:21,620 --> 00:08:27,980
the data defined before in order to

00:08:24,320 --> 00:08:30,680
create some visualization upon them so

00:08:27,980 --> 00:08:33,940
for instance here I am defining the

00:08:30,680 --> 00:08:37,219
Python code that takes those data and

00:08:33,940 --> 00:08:41,330
produces as output a really simple image

00:08:37,219 --> 00:08:43,880
containing a bar chart of course in the

00:08:41,330 --> 00:08:46,880
script one can use whichever Python

00:08:43,880 --> 00:08:50,690
library likes and create all the kind of

00:08:46,880 --> 00:08:53,660
plots in fact this is the real purpose

00:08:50,690 --> 00:08:56,600
of the widget giving to the users the

00:08:53,660 --> 00:08:59,960
freedom to work without any constraints

00:08:56,600 --> 00:09:04,400
at all on the type of charts or on

00:08:59,960 --> 00:09:07,100
layouts that has to be produced once I

00:09:04,400 --> 00:09:10,250
click on save the Python code is

00:09:07,100 --> 00:09:12,470
executed by the engine the output is

00:09:10,250 --> 00:09:14,460
rendered and visualized inside the

00:09:12,470 --> 00:09:16,110
cockpit

00:09:14,460 --> 00:09:19,650
as you can see this makes all the

00:09:16,110 --> 00:09:22,860
process smooth and simple in just a few

00:09:19,650 --> 00:09:25,070
clicks we were able to get data and run

00:09:22,860 --> 00:09:28,140
the script that creates the chart and

00:09:25,070 --> 00:09:31,470
this is something that otherwise would

00:09:28,140 --> 00:09:35,150
have cost us hours of work if we had to

00:09:31,470 --> 00:09:38,970
deal with all the process by ourselves

00:09:35,150 --> 00:09:42,060
so freedom versatility and simplicity

00:09:38,970 --> 00:09:45,860
are in my opinion the three greatest

00:09:42,060 --> 00:09:45,860
conquerors of these widgets

00:09:46,820 --> 00:09:52,310
speaking about technical details the

00:09:49,460 --> 00:09:55,520
lightweight architecture of this new

00:09:52,310 --> 00:09:57,650
feature is based on the existence of a

00:09:55,520 --> 00:10:01,910
new data mining engine which is written

00:09:57,650 --> 00:10:05,300
in Python as well and this engine runs a

00:10:01,910 --> 00:10:08,450
standalone web service it is a service

00:10:05,300 --> 00:10:11,090
whose api's are separated from the

00:10:08,450 --> 00:10:13,760
knowledge meant server once and of

00:10:11,090 --> 00:10:16,490
course the component will be distributed

00:10:13,760 --> 00:10:19,880
alongside knowledge but will be optional

00:10:16,490 --> 00:10:22,190
this service will act as the core of

00:10:19,880 --> 00:10:24,530
every future Python functionality

00:10:22,190 --> 00:10:26,660
related to knowledge and will be in

00:10:24,530 --> 00:10:29,390
charge of managing all the data flows

00:10:26,660 --> 00:10:32,390
between knowledge and Python and most

00:10:29,390 --> 00:10:36,590
importantly it will be used let me say

00:10:32,390 --> 00:10:38,930
as a sort of remote code execute or for

00:10:36,590 --> 00:10:41,900
all the scripts that are embedded in

00:10:38,930 --> 00:10:44,810
widgets and data set when we use this

00:10:41,900 --> 00:10:47,720
new infrastructure we if we monitor the

00:10:44,810 --> 00:10:51,650
network activity we can notice exchange

00:10:47,720 --> 00:10:54,080
in the information flow in fact the

00:10:51,650 --> 00:10:56,780
traditional architecture expects the

00:10:54,080 --> 00:10:58,820
data to flow only between the clients

00:10:56,780 --> 00:11:01,940
and the knowledge server but when we use

00:10:58,820 --> 00:11:04,700
Python instead the data mining engine

00:11:01,940 --> 00:11:07,780
written in Python works as a proxy

00:11:04,700 --> 00:11:10,780
between client and server and this proxy

00:11:07,780 --> 00:11:13,760
processes requests execute code

00:11:10,780 --> 00:11:17,330
retrieves also data from knowledge and

00:11:13,760 --> 00:11:20,510
is responsible of returning back to the

00:11:17,330 --> 00:11:22,610
clients the desired outputs though the

00:11:20,510 --> 00:11:24,680
original data flow will be maintained

00:11:22,610 --> 00:11:26,810
for all the operations that don't

00:11:24,680 --> 00:11:29,690
require Python so for those operations

00:11:26,810 --> 00:11:32,080
nothing will change but instead when we

00:11:29,690 --> 00:11:34,550
need Python to perform some tasks

00:11:32,080 --> 00:11:37,970
knowledge will automatically recognize

00:11:34,550 --> 00:11:41,270
it and redirect all the requests towards

00:11:37,970 --> 00:11:44,680
the engine this idea allows us to treat

00:11:41,270 --> 00:11:48,590
the Python as an optional plug-in and

00:11:44,680 --> 00:11:51,280
furthermore it makes both the data

00:11:48,590 --> 00:11:53,690
mining engine and the noise server

00:11:51,280 --> 00:11:57,530
transparent and independent from each

00:11:53,690 --> 00:12:00,110
other alongside the Python engine we are

00:11:57,530 --> 00:12:02,570
developing another service to

00:12:00,110 --> 00:12:06,110
for the same functionalities through our

00:12:02,570 --> 00:12:08,300
scripts as well we want data scientists

00:12:06,110 --> 00:12:11,380
to be able to pick the language that

00:12:08,300 --> 00:12:13,550
they prefer might it be Python or R and

00:12:11,380 --> 00:12:17,120
provide support for the same

00:12:13,550 --> 00:12:19,579
functionalities in both languages so as

00:12:17,120 --> 00:12:22,160
they do with Python they will be able to

00:12:19,579 --> 00:12:26,060
use also our scripts in order to create

00:12:22,160 --> 00:12:29,240
widgets or datasets depending on their

00:12:26,060 --> 00:12:32,300
skills or on the problem to be solved

00:12:29,240 --> 00:12:36,140
the two languages are interchangeable at

00:12:32,300 --> 00:12:38,089
free will so at last the features that I

00:12:36,140 --> 00:12:40,160
showed you today will be released

00:12:38,089 --> 00:12:43,100
together with many other interesting

00:12:40,160 --> 00:12:46,700
news inside the next version of noid

00:12:43,100 --> 00:12:50,570
which will be the 7.2 version and is

00:12:46,700 --> 00:12:51,649
expected to come out by this summer this

00:12:50,570 --> 00:12:54,440
new version

00:12:51,649 --> 00:12:57,079
besides Python includes many other

00:12:54,440 --> 00:12:59,480
features that expand the gallery of

00:12:57,079 --> 00:13:03,200
possibility that the knowledge suit

00:12:59,480 --> 00:13:06,019
makes available we want to expand as far

00:13:03,200 --> 00:13:09,110
as possible the things that final users

00:13:06,019 --> 00:13:13,160
can do but at the same time keep them

00:13:09,110 --> 00:13:15,440
easy and useful of course we want to

00:13:13,160 --> 00:13:17,899
always be ready to accept new

00:13:15,440 --> 00:13:21,230
technologies for instance like Python

00:13:17,899 --> 00:13:23,380
and constantly use them to innovate what

00:13:21,230 --> 00:13:26,050
we already have

00:13:23,380 --> 00:13:28,870
okay I think we have come to an end I

00:13:26,050 --> 00:13:30,520
hope you enjoyed this overview if you

00:13:28,870 --> 00:13:33,850
have any question please don't hesitate

00:13:30,520 --> 00:13:36,640
to contact us we will of course get back

00:13:33,850 --> 00:13:38,800
to you as soon as possible I would also

00:13:36,640 --> 00:13:41,650
like to remind you to subscribe to our

00:13:38,800 --> 00:13:43,480
newsletter so we can stay in touch you

00:13:41,650 --> 00:13:46,290
can receive all the latest news about

00:13:43,480 --> 00:13:48,600
the knowledge work

00:13:46,290 --> 00:13:51,589
thank you everyone for the attention hi

00:13:48,600 --> 00:13:51,589

YouTube URL: https://www.youtube.com/watch?v=fYi39M1cRQg


