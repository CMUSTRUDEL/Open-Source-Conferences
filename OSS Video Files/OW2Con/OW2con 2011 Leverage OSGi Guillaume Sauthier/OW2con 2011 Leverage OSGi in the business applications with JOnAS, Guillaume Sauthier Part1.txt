Title: OW2con 2011 Leverage OSGi in the business applications with JOnAS, Guillaume Sauthier Part1
Publication date: 2012-01-09
Playlist: OW2con 2011 Leverage OSGi Guillaume Sauthier
Description: 
	Speakers: Guillaume Sauthier, Bull
Abstract: The OSGi technology allows to build modular and dynamic applications. Since a few years, this technology became more and more popular in the enterprise server stacks. This session will demonstrate why OSGi is important for next generation business applications and why Java EE standards are still very useful. This talk will then explain why business application should take advantage of both worlds and conclude with a focus on features offered by JOnAS an OSGi enterprise application server.
Captions: 
	00:00:03,620 --> 00:00:11,250
so I'm ghum sochi I'm working on on

00:00:09,059 --> 00:00:15,210
janae's so the alginate application

00:00:11,250 --> 00:00:20,550
server as part of bill so this talks

00:00:15,210 --> 00:00:25,199
about how to use osgi for your business

00:00:20,550 --> 00:00:27,810
applications on how to liberate the

00:00:25,199 --> 00:00:30,990
Jeunesse implication server on the Java

00:00:27,810 --> 00:00:38,219
EAP is that you'll knows to benefit from

00:00:30,990 --> 00:00:41,210
from SGI so here or agenda so why is it

00:00:38,219 --> 00:00:44,399
interesting to build veggie applications

00:00:41,210 --> 00:00:50,039
real business applications not only

00:00:44,399 --> 00:00:52,829
middleware stuff then we'll go to if VI

00:00:50,039 --> 00:00:55,890
has so many entreprise things in it why

00:00:52,829 --> 00:01:00,420
do you still need Jie with the questions

00:00:55,890 --> 00:01:03,140
um burn square is engine asses i braid

00:01:00,420 --> 00:01:07,979
applications so some kind of merge of

00:01:03,140 --> 00:01:11,369
osgi on cherry related technologies and

00:01:07,979 --> 00:01:13,439
then i will have our conclusion some the

00:01:11,369 --> 00:01:16,049
friction of the Jeunesse application

00:01:13,439 --> 00:01:18,509
server which is better breed application

00:01:16,049 --> 00:01:23,189
server because it meets osgi on jie

00:01:18,509 --> 00:01:28,229
technologies together so why do you want

00:01:23,189 --> 00:01:32,420
to build osgi applications the main

00:01:28,229 --> 00:01:38,009
advantage of co GI technologies is that

00:01:32,420 --> 00:01:41,009
you you have modular building blocks you

00:01:38,009 --> 00:01:43,560
have bundles so that's simple jars which

00:01:41,009 --> 00:01:46,320
are instalador removable on Evan

00:01:43,560 --> 00:01:49,110
updateable at runtime it's diametrically

00:01:46,320 --> 00:01:52,729
you start your server application server

00:01:49,110 --> 00:01:56,579
owns and then you will be able to add

00:01:52,729 --> 00:01:59,909
features at runtime without stopping

00:01:56,579 --> 00:02:02,610
everything and you can even update the

00:01:59,909 --> 00:02:06,180
feature that you have installed so that

00:02:02,610 --> 00:02:08,729
another's application composition you

00:02:06,180 --> 00:02:11,629
will be able to have exactly the

00:02:08,729 --> 00:02:14,490
features you need for your application

00:02:11,629 --> 00:02:17,590
you will have the right size

00:02:14,490 --> 00:02:19,570
on moreover because it's a modular

00:02:17,590 --> 00:02:24,310
system you will have a fine control onda

00:02:19,570 --> 00:02:28,030
balances it will be able for a module to

00:02:24,310 --> 00:02:29,890
say I just want to use a particular

00:02:28,030 --> 00:02:32,410
version about a particular service a

00:02:29,890 --> 00:02:35,890
particular package version and you will

00:02:32,410 --> 00:02:40,630
be able to say I just want to expose a

00:02:35,890 --> 00:02:42,970
part of my API are not the full content

00:02:40,630 --> 00:02:45,940
of your module so this will avoid the

00:02:42,970 --> 00:02:49,120
well-known jaw hell to clasp as hell

00:02:45,940 --> 00:02:53,620
well you don't really know which version

00:02:49,120 --> 00:02:55,860
of which are Jean you are using but ohg

00:02:53,620 --> 00:03:00,850
is just is not just the module system

00:02:55,860 --> 00:03:03,940
it's also a service it's also promotes a

00:03:00,850 --> 00:03:07,950
service oriented approach you module as

00:03:03,940 --> 00:03:12,480
part of the osgi environment is able to

00:03:07,950 --> 00:03:16,600
register a service for the environment

00:03:12,480 --> 00:03:19,720
so you register a service within within

00:03:16,600 --> 00:03:24,280
the registry on you publish it with a

00:03:19,720 --> 00:03:26,400
contract the service rpi and that

00:03:24,280 --> 00:03:29,820
enables a very interesting feature it's

00:03:26,400 --> 00:03:33,100
loose coupling between all your modules

00:03:29,820 --> 00:03:36,370
because as your service is just

00:03:33,100 --> 00:03:38,130
published with an interface you can

00:03:36,370 --> 00:03:40,210
substitute any implementation that

00:03:38,130 --> 00:03:43,600
implements that interface so you have

00:03:40,210 --> 00:03:45,760
loose coupling between your elements so

00:03:43,600 --> 00:03:47,800
consumers are requiring services

00:03:45,760 --> 00:03:50,830
description between all your modules is

00:03:47,800 --> 00:03:52,870
using the services API so you don't have

00:03:50,830 --> 00:03:55,260
any our differences on a given service

00:03:52,870 --> 00:03:58,990
provider does it loose coupling and

00:03:55,260 --> 00:04:01,360
moreover services are dynamic by nature

00:03:58,990 --> 00:04:03,580
because a module can be removed the

00:04:01,360 --> 00:04:06,910
service society with this module can

00:04:03,580 --> 00:04:10,720
disappear also so services can come and

00:04:06,910 --> 00:04:13,180
go as a at any time because of this

00:04:10,720 --> 00:04:19,510
dynamic natural building application

00:04:13,180 --> 00:04:22,390
building osea application is complex OLG

00:04:19,510 --> 00:04:24,880
I is working very hard to provide tools

00:04:22,390 --> 00:04:27,310
that helps you to build your

00:04:24,880 --> 00:04:30,580
applications more easily

00:04:27,310 --> 00:04:34,210
and for example you have some component

00:04:30,580 --> 00:04:36,639
models just like Java programming models

00:04:34,210 --> 00:04:39,460
that will help you to develop eurasia

00:04:36,639 --> 00:04:43,290
applications very easily based on

00:04:39,460 --> 00:04:46,840
annotations just like Jedi II modern

00:04:43,290 --> 00:04:49,360
annotations the interesting stuff with

00:04:46,840 --> 00:04:51,810
the USGA component models is that

00:04:49,360 --> 00:04:55,960
because they are all services oriented

00:04:51,810 --> 00:04:58,830
there are interoperable so you can use

00:04:55,960 --> 00:05:02,050
whatever component models you like on

00:04:58,830 --> 00:05:05,320
your application will be able to enter

00:05:02,050 --> 00:05:07,780
pyrite interoperate with other part of

00:05:05,320 --> 00:05:11,229
the application which are not using the

00:05:07,780 --> 00:05:15,180
same component matter so you just have

00:05:11,229 --> 00:05:18,580
to choice which one you prefer based on

00:05:15,180 --> 00:05:21,700
enterprise rules or just your personal

00:05:18,580 --> 00:05:27,700
tastes what were you still need Jie it

00:05:21,700 --> 00:05:31,870
simply because jenna is here for since

00:05:27,700 --> 00:05:36,880
many years um the Java EE skills are

00:05:31,870 --> 00:05:39,370
very widely known everybody here they

00:05:36,880 --> 00:05:42,250
understand gb's the GSF the

00:05:39,370 --> 00:05:46,479
presentations the cell let's GD b c and

00:05:42,250 --> 00:05:51,720
so on so so Java EE specification covers

00:05:46,479 --> 00:05:54,280
for a large spectrum of the business

00:05:51,720 --> 00:05:56,500
requirements you'll have from the

00:05:54,280 --> 00:05:59,860
presentation layer to the data layer so

00:05:56,500 --> 00:06:01,240
it's so late GbE GPA you also have the

00:05:59,860 --> 00:06:05,500
time to greet you with a transaction

00:06:01,240 --> 00:06:07,570
support which is provided by GTA all you

00:06:05,500 --> 00:06:09,850
also have a very important thing is the

00:06:07,570 --> 00:06:13,479
interoperability with modern technology

00:06:09,850 --> 00:06:17,830
like rest or soap which are using the

00:06:13,479 --> 00:06:21,450
jax-rs or jax-ws API but you also have

00:06:17,830 --> 00:06:26,770
the old stuff with crowbar on rme iiop

00:06:21,450 --> 00:06:30,580
so it's still interesting to have a bus

00:06:26,770 --> 00:06:34,960
of the two world so that's hybrid

00:06:30,580 --> 00:06:37,510
applications so average applications are

00:06:34,960 --> 00:06:41,080
using the best at usgi and the Java EE

00:06:37,510 --> 00:06:44,800
world you will benefits

00:06:41,080 --> 00:06:46,539
from a well-known programming model so

00:06:44,800 --> 00:06:50,020
you'll have all the ease of developments

00:06:46,539 --> 00:06:53,469
so the Java expelled groups are working

00:06:50,020 --> 00:06:55,750
very hard on so you'll benefits of the

00:06:53,469 --> 00:06:59,860
edge of accreditations the CDI

00:06:55,750 --> 00:07:02,020
invitation and so on I knew you start

00:06:59,860 --> 00:07:06,219
also to help first beams at all co GI

00:07:02,020 --> 00:07:08,139
benefits because you will be able to

00:07:06,219 --> 00:07:11,379
provide some part of your application as

00:07:08,139 --> 00:07:14,620
osgi models so you can be able to add

00:07:11,379 --> 00:07:16,150
them at runtime remove them on Evan

00:07:14,620 --> 00:07:20,560
update them because they always your

00:07:16,150 --> 00:07:26,050
vendors on moreover you can be able to

00:07:20,560 --> 00:07:29,129
interact a 22 world with java ee

00:07:26,050 --> 00:07:32,590
components which which will be able to

00:07:29,129 --> 00:07:35,889
use osgi services on the other way

00:07:32,590 --> 00:07:39,729
around with java ee components exposed

00:07:35,889 --> 00:07:44,469
as ogi services just like a gb for

00:07:39,729 --> 00:07:49,719
example so that was for a jie point of

00:07:44,469 --> 00:07:54,039
view no for an osgi point of view you

00:07:49,719 --> 00:07:56,770
you will be able to to have osgi

00:07:54,039 --> 00:08:01,000
applications which will be able to

00:07:56,770 --> 00:08:05,099
benefit from java ee components that

00:08:01,000 --> 00:08:10,620
means that you will be able to have a

00:08:05,099 --> 00:08:13,509
pure osgi vendors that will be able to

00:08:10,620 --> 00:08:16,060
use the servlets API using the HTTP

00:08:13,509 --> 00:08:20,469
service for example but you will also be

00:08:16,060 --> 00:08:22,990
able to to to use what is usually

00:08:20,469 --> 00:08:25,449
provided by the application server that

00:08:22,990 --> 00:08:29,650
connection pudding from GBCs on data

00:08:25,449 --> 00:08:33,089
sources will be able also to use GPA on

00:08:29,650 --> 00:08:33,089

YouTube URL: https://www.youtube.com/watch?v=p-c6emjBD8s


