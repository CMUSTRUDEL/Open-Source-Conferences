Title: OW2con 2011 Leverage OSGi in the business applications with JOnAS, Guillaume Sauthier Part2
Publication date: 2012-01-09
Playlist: OW2con 2011 Leverage OSGi Guillaume Sauthier
Description: 
	Speakers: Guillaume Sauthier, Bull
Abstract: The OSGi technology allows to build modular and dynamic applications. Since a few years, this technology became more and more popular in the enterprise server stacks. This session will demonstrate why OSGi is important for next generation business applications and why Java EE standards are still very useful. This talk will then explain why business application should take advantage of both worlds and conclude with a focus on features offered by JOnAS an OSGi enterprise application server.
Captions: 
	00:00:06,410 --> 00:00:17,460
so just a quick glimpse on on Jenna's so

00:00:13,080 --> 00:00:21,240
jealous is gow2 application server which

00:00:17,460 --> 00:00:23,970
is which is currently javadi five

00:00:21,240 --> 00:00:28,680
certified on we're working on java ee 6

00:00:23,970 --> 00:00:33,840
support the this application server is

00:00:28,680 --> 00:00:37,649
itself build on top of osgi so will

00:00:33,840 --> 00:00:41,940
benefit from to SGI modularity so we can

00:00:37,649 --> 00:00:44,219
provide an execution platform definition

00:00:41,940 --> 00:00:48,059
which is right size for your application

00:00:44,219 --> 00:00:50,940
needs in clear if your application is

00:00:48,059 --> 00:00:53,250
only using the web bot lonely using

00:00:50,940 --> 00:00:56,010
subjects will provide only the web

00:00:53,250 --> 00:00:59,520
container on all the other stuff will

00:00:56,010 --> 00:01:02,449
don't be loaded into memory on it would

00:00:59,520 --> 00:01:07,650
be a much more lighter on efficient

00:01:02,449 --> 00:01:11,520
application server so the sor principles

00:01:07,650 --> 00:01:14,729
which are provided by osgi also applied

00:01:11,520 --> 00:01:19,200
to jannas technical services on it

00:01:14,729 --> 00:01:23,580
maximized testability and the overall

00:01:19,200 --> 00:01:26,700
quality of the application server and

00:01:23,580 --> 00:01:30,119
because we are module are we provides a

00:01:26,700 --> 00:01:36,150
different execution provide for Donald

00:01:30,119 --> 00:01:39,990
we defined to we distribute to to

00:01:36,150 --> 00:01:44,850
profile the first one is which we call

00:01:39,990 --> 00:01:48,420
my progenies which is the key honor of

00:01:44,850 --> 00:01:51,530
Jonas so just understand it by its 0 gie

00:01:48,420 --> 00:01:55,770
framework plus some additional services

00:01:51,530 --> 00:01:59,579
on the deployment support and then we

00:01:55,770 --> 00:02:03,680
have the full profile which is a

00:01:59,579 --> 00:02:07,730
full-blown hawaii 5 5 & 6 no application

00:02:03,680 --> 00:02:12,710
server profile now you can think about

00:02:07,730 --> 00:02:15,980
because its profile you can imagine any

00:02:12,710 --> 00:02:19,370
from files that you want if you want

00:02:15,980 --> 00:02:25,160
just the web profile just select the web

00:02:19,370 --> 00:02:31,580
container on GTA and so on so we can do

00:02:25,160 --> 00:02:35,420
that with journals because we are an

00:02:31,580 --> 00:02:38,830
implementation of jye genessy is very

00:02:35,420 --> 00:02:42,830
well suited to provide the

00:02:38,830 --> 00:02:46,130
implementation of the OG I enterprise

00:02:42,830 --> 00:02:48,800
specifications so I don't know if Nick's

00:02:46,130 --> 00:02:53,180
yo needs it but it's a list of services

00:02:48,800 --> 00:02:57,800
that we provide so we'll have the HTTP

00:02:53,180 --> 00:03:01,940
service for staff let's full source

00:02:57,800 --> 00:03:05,570
added layers so you will be able to do

00:03:01,940 --> 00:03:10,040
dynamically add a servlet into your

00:03:05,570 --> 00:03:14,030
applications you also have we have to

00:03:10,040 --> 00:03:18,500
provide that that's what service on so

00:03:14,030 --> 00:03:20,120
if you're using TT bc and will you will

00:03:18,500 --> 00:03:21,680
be able to benefit from all the

00:03:20,120 --> 00:03:25,459
connection puddings that you have wizard

00:03:21,680 --> 00:03:26,930
our journeys transaction services on is

00:03:25,459 --> 00:03:31,130
that you provide either as an osgi

00:03:26,930 --> 00:03:35,780
enterprise service the jean day service

00:03:31,130 --> 00:03:39,890
is a work in progress and then you it's

00:03:35,780 --> 00:03:43,400
more on the road map but the OG I

00:03:39,890 --> 00:03:47,390
enterprise specification also defines

00:03:43,400 --> 00:03:50,720
two additional service API am the first

00:03:47,390 --> 00:03:53,900
one is to be able to expose your see a

00:03:50,720 --> 00:03:57,020
connector with in bandar as savvy season

00:03:53,900 --> 00:04:00,560
so all your resource adapters onions

00:03:57,020 --> 00:04:06,670
will be also able to use a gps service

00:04:00,560 --> 00:04:10,630
which is a higher level that access api

00:04:06,670 --> 00:04:13,550
all of these services have been

00:04:10,630 --> 00:04:17,269
implemented as part of the aza me

00:04:13,550 --> 00:04:21,940
european funded project and they are

00:04:17,269 --> 00:04:26,360
reused in the different

00:04:21,940 --> 00:04:29,750
internationals consortium's on Jenna's

00:04:26,360 --> 00:04:34,070
has been selected as the execution

00:04:29,750 --> 00:04:45,440
platform for the different national

00:04:34,070 --> 00:04:50,320
demonstrators so concretely how your

00:04:45,440 --> 00:04:53,030
applications can benefit from from osgi

00:04:50,320 --> 00:04:58,160
so the first things that your

00:04:53,030 --> 00:05:01,539
application can do is I can use services

00:04:58,160 --> 00:05:07,070
which are provided by the SGI framework

00:05:01,539 --> 00:05:09,830
so here in view you'll see the pure osgi

00:05:07,070 --> 00:05:13,370
bundles that you can understand on the

00:05:09,830 --> 00:05:16,300
platform these bundles can provide

00:05:13,370 --> 00:05:18,910
services on with using whatever

00:05:16,300 --> 00:05:23,650
component players that you have selected

00:05:18,910 --> 00:05:27,979
on that sorry season is usable from your

00:05:23,650 --> 00:05:30,470
gb you are forum in any java ee modules

00:05:27,979 --> 00:05:33,740
so for example here we have an HP three

00:05:30,470 --> 00:05:38,360
that can be injected using a special

00:05:33,740 --> 00:05:42,919
notation it can this service can be

00:05:38,360 --> 00:05:46,400
injected into zhe be so your java ee

00:05:42,919 --> 00:05:49,010
modules with just a simple annotation

00:05:46,400 --> 00:05:54,169
just like a natural resources can be

00:05:49,010 --> 00:05:59,780
able to use 0 gie services and it will

00:05:54,169 --> 00:06:03,050
be able to dynamically it will be

00:05:59,780 --> 00:06:06,139
notified if the service come on go so

00:06:03,050 --> 00:06:10,639
you get you got all the power of voice

00:06:06,139 --> 00:06:15,020
GIS services here but you'll also have

00:06:10,639 --> 00:06:19,220
the other way around where your your egb

00:06:15,020 --> 00:06:25,520
3 which is your which have implements

00:06:19,220 --> 00:06:28,699
your business intelligence this this v3

00:06:25,520 --> 00:06:31,219
will be exposed as service season as we

00:06:28,699 --> 00:06:35,610
answer no GI service season inside as a

00:06:31,219 --> 00:06:40,900
platform and because it has been

00:06:35,610 --> 00:06:43,720
register our services it is no visible

00:06:40,900 --> 00:06:47,470
just like any other osgi services in the

00:06:43,720 --> 00:06:51,930
execution of the Redmond so any osgi

00:06:47,470 --> 00:06:55,230
vendors can be able to use your services

00:06:51,930 --> 00:06:59,470
without knowing that its energy be three

00:06:55,230 --> 00:07:02,770
hidden behind or what is this

00:06:59,470 --> 00:07:06,820
interesting with this model is that your

00:07:02,770 --> 00:07:09,880
EG be here is using the well-known you

00:07:06,820 --> 00:07:12,400
be application programming model you are

00:07:09,880 --> 00:07:14,760
using your standard interfaces you are

00:07:12,400 --> 00:07:21,760
using your standard annotation and so on

00:07:14,760 --> 00:07:24,940
and it's very simple to to check

00:07:21,760 --> 00:07:28,060
benefits of all the Java EE skills which

00:07:24,940 --> 00:07:32,110
is known by a lot of developers on to

00:07:28,060 --> 00:07:39,760
easily mix that with zohdi application

00:07:32,110 --> 00:07:41,880
Madame so are the conclusions Cesar very

00:07:39,760 --> 00:07:45,880
programming model is here to stay

00:07:41,880 --> 00:07:49,360
because of so many people so that knows

00:07:45,880 --> 00:07:51,340
that knows that that model so don't

00:07:49,360 --> 00:07:53,740
throw away your GP an action books and

00:07:51,340 --> 00:07:55,750
so on and especially if you have a

00:07:53,740 --> 00:08:01,810
specification to read or something to

00:07:55,750 --> 00:08:04,240
learn this year 1cd I it so as not easy

00:08:01,810 --> 00:08:07,900
so it's really easy gie specifications

00:08:04,240 --> 00:08:10,780
that you should take a look at on

00:08:07,900 --> 00:08:13,720
moreover while G is gradually becoming

00:08:10,780 --> 00:08:20,110
more and more important every

00:08:13,720 --> 00:08:29,380
application server no is using osgi for

00:08:20,110 --> 00:08:33,070
by itself and everybody is moving to

00:08:29,380 --> 00:08:36,729
that direction so providing some kind of

00:08:33,070 --> 00:08:38,740
hybrid applications between osg eyes as

00:08:36,729 --> 00:08:41,440
you try well on the java in world so

00:08:38,740 --> 00:08:44,380
it's kind of convergence on your

00:08:41,440 --> 00:08:47,710
applications will benefit from all the

00:08:44,380 --> 00:08:50,500
oil GI modularity on all the dynamism

00:08:47,710 --> 00:08:54,300
the fact that you can update remove on

00:08:50,500 --> 00:08:54,300

YouTube URL: https://www.youtube.com/watch?v=qq7jCyajnXg


