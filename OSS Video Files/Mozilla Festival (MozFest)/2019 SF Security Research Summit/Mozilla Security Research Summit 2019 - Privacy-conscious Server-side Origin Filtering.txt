Title: Mozilla Security Research Summit 2019 - Privacy-conscious Server-side Origin Filtering
Publication date: 2019-06-24
Playlist: 2019 SF Security Research Summit
Description: 
	Michael Smith - Privacy-conscious Server-side Origin Filtering

Talk from the 2019 SF Security Research Summit (https://events.mozilla.org/moz2019securityresearchsummit). This event is part of the Security Engineering University Relationship Framework (SURF) initiative, which aims to increase collaboration between Mozilla and the academic community. We would like to leverage academic talent to help explore security and privacy research problems, and to strengthen Mozilla's ties to the academic community. Mozilla security engineers aim to actively participate in the research community through thesis supervision, collaborations, placements and Mozilla-hosted security summits. For more info see: https://surf.mozilla.org/

Slides: https://drive.google.com/open?id=12LmAhEl_Em4SQhNhCRaqe1AvJdy2uq0G
Captions: 
	00:00:00,030 --> 00:00:03,840
so I've been ticking with a proposal for

00:00:01,770 --> 00:00:05,490
enabling origin based filtering of

00:00:03,840 --> 00:00:08,790
requests on the server side designed for

00:00:05,490 --> 00:00:10,290
privacy in mind so say I pop up in

00:00:08,790 --> 00:00:12,929
Firefox and navigate to my favorite

00:00:10,290 --> 00:00:14,549
online egg buying website Firefox sends

00:00:12,929 --> 00:00:16,020
off requests remote server and the

00:00:14,549 --> 00:00:17,940
server sends back some HTML for the

00:00:16,020 --> 00:00:19,650
sites order form I fill in my

00:00:17,940 --> 00:00:21,660
information and I click on that submit

00:00:19,650 --> 00:00:24,150
button and Firefox and post information

00:00:21,660 --> 00:00:26,160
off to the remote server along with an

00:00:24,150 --> 00:00:28,050
HTTP cookie header containing my logged

00:00:26,160 --> 00:00:29,220
in authentication token so site can

00:00:28,050 --> 00:00:31,140
match up the purchase order of my

00:00:29,220 --> 00:00:33,210
account and tries to correct credit card

00:00:31,140 --> 00:00:35,670
for these eggs as I'm buying now the

00:00:33,210 --> 00:00:37,320
server sends back some HTML saying my

00:00:35,670 --> 00:00:40,950
order has been placed and presumably

00:00:37,320 --> 00:00:43,290
some eggs get sent to my doorstep but

00:00:40,950 --> 00:00:45,000
now say some egg loving fiend sets up

00:00:43,290 --> 00:00:46,680
their own evil web site to victimize

00:00:45,000 --> 00:00:49,469
people like me who happened to be logged

00:00:46,680 --> 00:00:51,390
in to buy eggs online calm in Firefox or

00:00:49,469 --> 00:00:53,399
whatever browser if I'm lured into

00:00:51,390 --> 00:00:55,829
visiting his evil web site it posts off

00:00:53,399 --> 00:00:59,129
its own request from my browser to buy

00:00:55,829 --> 00:01:00,840
eggs online coms check out endpoint now

00:00:59,129 --> 00:01:03,480
because it's what request is still going

00:01:00,840 --> 00:01:05,729
to buy eggs online.com Firefox dutifully

00:01:03,480 --> 00:01:07,380
attaches that same authentication token

00:01:05,729 --> 00:01:08,909
in the cookie header so my credit card

00:01:07,380 --> 00:01:10,500
gets charged for the order even though

00:01:08,909 --> 00:01:12,360
the attacker has prefilled their own

00:01:10,500 --> 00:01:14,430
address so the ice gets sent to their

00:01:12,360 --> 00:01:17,009
house instead of mine now we're

00:01:14,430 --> 00:01:19,229
proposing to fix situations like this by

00:01:17,009 --> 00:01:21,150
well tacking on another HTTP header a

00:01:19,229 --> 00:01:23,790
very simple one we call sex same-origin

00:01:21,150 --> 00:01:25,470
which is just one first name origin

00:01:23,790 --> 00:01:27,689
requests or zero for cross-origin

00:01:25,470 --> 00:01:29,430
requests like this one in this case the

00:01:27,689 --> 00:01:30,960
server could inspect that header see

00:01:29,430 --> 00:01:33,090
this as a cross sergeant request and

00:01:30,960 --> 00:01:37,409
block it from being processed saving me

00:01:33,090 --> 00:01:39,390
my egg money so this header essentially

00:01:37,409 --> 00:01:40,890
just encodes one bit information which

00:01:39,390 --> 00:01:43,079
is a desirable property in terms of

00:01:40,890 --> 00:01:44,790
privacy and bandwidth efficiency for a

00:01:43,079 --> 00:01:47,280
privacy compared to the HTTP referer

00:01:44,790 --> 00:01:48,720
header which is leeks full page URLs and

00:01:47,280 --> 00:01:50,700
is commonly abused for tracking users

00:01:48,720 --> 00:01:52,560
web history online for better with this

00:01:50,700 --> 00:01:54,299
efficiency with HTTP header compression

00:01:52,560 --> 00:01:56,340
we ought to be able to crush this

00:01:54,299 --> 00:01:57,840
effective one bit of information down

00:01:56,340 --> 00:01:59,250
enough to be feasible to include this

00:01:57,840 --> 00:02:02,549
header by default week's request the

00:01:59,250 --> 00:02:03,840
browser sends off but now in some

00:02:02,549 --> 00:02:05,759
situations you actually need to know

00:02:03,840 --> 00:02:08,520
more than just whether requests is same

00:02:05,759 --> 00:02:11,459
across origin for example say Romeo a

00:02:08,520 --> 00:02:12,930
little webcomic at my webcomic calm but

00:02:11,459 --> 00:02:13,380
for performance reasons I host the

00:02:12,930 --> 00:02:14,700
actual

00:02:13,380 --> 00:02:16,980
comic image files because they're

00:02:14,700 --> 00:02:19,470
relatively large an external CDN like

00:02:16,980 --> 00:02:21,840
Amazon s3 which bills me for every byte

00:02:19,470 --> 00:02:23,820
of image data it serves importantly

00:02:21,840 --> 00:02:25,500
those images end up getting served from

00:02:23,820 --> 00:02:27,390
a different origin for my main website

00:02:25,500 --> 00:02:29,940
the CD ends origins instead of my

00:02:27,390 --> 00:02:31,770
webcomic comm now say one day I come up

00:02:29,940 --> 00:02:33,930
with a particularly funny webcomic and

00:02:31,770 --> 00:02:35,730
post it to my site and some random

00:02:33,930 --> 00:02:37,170
content blogger stumbles across it and

00:02:35,730 --> 00:02:39,330
they do what content bloggers sometimes

00:02:37,170 --> 00:02:41,490
do they right-click and do copy image

00:02:39,330 --> 00:02:43,980
location and copy that see an image URL

00:02:41,490 --> 00:02:44,910
and slap it into their own website as

00:02:43,980 --> 00:02:47,040
this exactly what happened to the

00:02:44,910 --> 00:02:49,950
webcomic the oatmeal whose author got

00:02:47,040 --> 00:02:51,420
stuck within $1,000 AWS bill serving

00:02:49,950 --> 00:02:54,270
traffic coming from a hotlinked image

00:02:51,420 --> 00:02:55,470
from The Huffington Post now these six

00:02:54,270 --> 00:02:56,940
same origin headers isn't helped in this

00:02:55,470 --> 00:02:58,680
situation because the legitimate

00:02:56,940 --> 00:03:00,960
requests coming from my webcomic comm

00:02:58,680 --> 00:03:02,250
are themselves cross origin we'd really

00:03:00,960 --> 00:03:04,890
like to have in the situation like this

00:03:02,250 --> 00:03:06,660
is a textual origin header saying that

00:03:04,890 --> 00:03:08,640
these get requests are coming from my

00:03:06,660 --> 00:03:10,200
webcomic calm and not from some random

00:03:08,640 --> 00:03:12,330
blog which you'd like our CDN to block

00:03:10,200 --> 00:03:14,220
however it's not really feasible for the

00:03:12,330 --> 00:03:16,020
browser to include a full textual origin

00:03:14,220 --> 00:03:17,670
head or whatever request sends out both

00:03:16,020 --> 00:03:20,580
for privacy and for bandwidth efficiency

00:03:17,670 --> 00:03:22,320
reasons instead we address this by

00:03:20,580 --> 00:03:24,330
introducing a new disclosed origin

00:03:22,320 --> 00:03:26,340
attribute serve inspired by course which

00:03:24,330 --> 00:03:28,920
you can slap on to like an image tag or

00:03:26,340 --> 00:03:30,900
a form tag or an iframe so the referring

00:03:28,920 --> 00:03:32,940
page signals to the bar that did like to

00:03:30,900 --> 00:03:34,620
opt in to sending the full textual

00:03:32,940 --> 00:03:37,620
origin along with this particular

00:03:34,620 --> 00:03:38,910
request to the external server so you

00:03:37,620 --> 00:03:40,050
end up with a nice little model for

00:03:38,910 --> 00:03:41,970
providing servers with the right

00:03:40,050 --> 00:03:43,800
contextual information and where request

00:03:41,970 --> 00:03:45,750
seeing them are coming from which they

00:03:43,800 --> 00:03:47,070
can use to make security decisions to

00:03:45,750 --> 00:03:48,930
evaluate this model we implemented

00:03:47,070 --> 00:03:51,030
saying these headers in a little fork of

00:03:48,930 --> 00:03:53,010
Firefox and then we implemented handling

00:03:51,030 --> 00:03:54,959
the headers in some web app stuff for

00:03:53,010 --> 00:03:56,550
example we took C surf a popular anti

00:03:54,959 --> 00:03:59,850
CSRF middleware for nodejs

00:03:56,550 --> 00:04:03,030
replaces whole 1060 line crypto cookie

00:03:59,850 --> 00:04:04,560
token and T CSRF implantation which is a

00:04:03,030 --> 00:04:06,810
simple header check that boils down to

00:04:04,560 --> 00:04:08,700
three lines of non boilerplate code we

00:04:06,810 --> 00:04:10,620
also took WordPress is power something

00:04:08,700 --> 00:04:12,930
like 25 son the Internet and started

00:04:10,620 --> 00:04:14,459
digging to its camtc surf code and we

00:04:12,930 --> 00:04:16,109
actually found a number of new co surf

00:04:14,459 --> 00:04:17,010
holes there and we so we stripped out

00:04:16,109 --> 00:04:19,290
the whole complex

00:04:17,010 --> 00:04:21,000
token base ante CF system they had we

00:04:19,290 --> 00:04:22,200
drop and I heard lines in their code and

00:04:21,000 --> 00:04:24,060
replace it with some simple header

00:04:22,200 --> 00:04:26,940
checks which systemically fix all the

00:04:24,060 --> 00:04:28,860
CSRF bugs we also took Mineo and

00:04:26,940 --> 00:04:30,180
Souths hosted Amazon has to be clone and

00:04:28,860 --> 00:04:32,190
implemented these sort of disclosed

00:04:30,180 --> 00:04:34,440
origin origin header hot linking

00:04:32,190 --> 00:04:35,940
protection to that and we took the OAuth

00:04:34,440 --> 00:04:37,920
2 protocol and use the same header

00:04:35,940 --> 00:04:40,860
scheme in order to mitigate as known

00:04:37,920 --> 00:04:42,360
CSRF like pitfall in that protocol now

00:04:40,860 --> 00:04:43,050
some of you might be thinking then we

00:04:42,360 --> 00:04:44,670
fix this already

00:04:43,050 --> 00:04:46,710
well what we have right now is a

00:04:44,670 --> 00:04:49,110
grab-bag of different tools in sera web

00:04:46,710 --> 00:04:50,790
security HSM has its own caveat attached

00:04:49,110 --> 00:04:52,800
which makes it not really an ideal

00:04:50,790 --> 00:04:54,510
solution and each of them also only

00:04:52,800 --> 00:04:56,790
really targets only one specific pace

00:04:54,510 --> 00:04:58,260
like CSRF of what is he's a more general

00:04:56,790 --> 00:04:59,400
problem which is server's not having

00:04:58,260 --> 00:05:01,290
enough information about where they're

00:04:59,400 --> 00:05:04,620
requesting them come from in order to

00:05:01,290 --> 00:05:07,680
make security decisions one thing brief

00:05:04,620 --> 00:05:09,990
thing before I get cut off here is that

00:05:07,680 --> 00:05:12,870
they rate one of these things the origin

00:05:09,990 --> 00:05:15,210
header is standardized already and is

00:05:12,870 --> 00:05:17,580
also we have an a an abortion hitter

00:05:15,210 --> 00:05:19,290
like thing in our in our proposal but as

00:05:17,580 --> 00:05:20,850
Sarah dies it only applies to non get

00:05:19,290 --> 00:05:22,740
requests so it is too narrow to help

00:05:20,850 --> 00:05:24,630
with things like hot linking is also

00:05:22,740 --> 00:05:26,070
apparently too broad because we are now

00:05:24,630 --> 00:05:27,510
looking at blocking it remember we

00:05:26,070 --> 00:05:28,770
blocked the referer header which sort of

00:05:27,510 --> 00:05:30,780
defeated the whole point of introducing

00:05:28,770 --> 00:05:32,040
in the first place which is as a thing

00:05:30,780 --> 00:05:34,860
that we would send when therefore header

00:05:32,040 --> 00:05:36,660
was blocked we had some other stuff in

00:05:34,860 --> 00:05:39,169
the paper but no time talk about that so

00:05:36,660 --> 00:05:39,169
talk to me later

00:05:40,560 --> 00:05:42,920

YouTube URL: https://www.youtube.com/watch?v=cLth5RrlbZQ


