Title: Mozilla Security Research Summit 2019 - CRLite: When Industry & Academia Collide
Publication date: 2019-06-24
Playlist: 2019 SF Security Research Summit
Description: 
	Thyla van der Merwe - CRLite: When Industry & Academia Collide

Talk from the 2019 SF Security Research Summit (https://events.mozilla.org/moz2019securityresearchsummit). This event is part of the Security Engineering University Relationship Framework (SURF) initiative, which aims to increase collaboration between Mozilla and the academic community. We would like to leverage academic talent to help explore security and privacy research problems, and to strengthen Mozilla's ties to the academic community. Mozilla security engineers aim to actively participate in the research community through thesis supervision, collaborations, placements and Mozilla-hosted security summits. For more info see: https://surf.mozilla.org/

slides:
Captions: 
	00:00:00,299 --> 00:00:05,580
all right good morning everybody and to

00:00:03,210 --> 00:00:07,740
echo Steve sentiments welcome to our

00:00:05,580 --> 00:00:10,019
Security Summit is really nice to see

00:00:07,740 --> 00:00:11,880
all of you here now I'm not really going

00:00:10,019 --> 00:00:14,400
to talk about an open problem that we

00:00:11,880 --> 00:00:16,529
have per se but what I will be doing is

00:00:14,400 --> 00:00:19,320
talking about how an academic idea makes

00:00:16,529 --> 00:00:21,060
its way into an industry products now

00:00:19,320 --> 00:00:23,400
I'm very fortunate to be able to speak

00:00:21,060 --> 00:00:25,080
about this idea but these people listed

00:00:23,400 --> 00:00:26,490
in the team section are really the

00:00:25,080 --> 00:00:28,170
people who are doing most of the hard

00:00:26,490 --> 00:00:30,990
work so the top line there are the

00:00:28,170 --> 00:00:32,520
active engineers on the project and the

00:00:30,990 --> 00:00:36,030
two individuals below helped us out

00:00:32,520 --> 00:00:37,800
while they were at Mozilla now I'm going

00:00:36,030 --> 00:00:40,350
to start with a series of questions

00:00:37,800 --> 00:00:43,739
there are not complicated questions so

00:00:40,350 --> 00:00:47,910
don't panic who here uses the web on a

00:00:43,739 --> 00:00:51,570
daily basis and who uses the web to

00:00:47,910 --> 00:00:55,020
conduct sensitive transactions online

00:00:51,570 --> 00:00:57,780
shopping more than I would like online

00:00:55,020 --> 00:01:01,320
banking connecting with our nearest and

00:00:57,780 --> 00:01:03,030
dearest but why do we trust it well I

00:01:01,320 --> 00:01:05,850
would argue that we trust the web

00:01:03,030 --> 00:01:07,200
because we have TLS that works in

00:01:05,850 --> 00:01:10,799
combination with a public key

00:01:07,200 --> 00:01:13,170
infrastructure a PKI now I spent a lot

00:01:10,799 --> 00:01:15,720
of time thinking about TLS and I have

00:01:13,170 --> 00:01:18,689
the PhD battle scars to prove it but

00:01:15,720 --> 00:01:21,360
I've sort of taken the PKI bits for

00:01:18,689 --> 00:01:24,090
granted and as a browser vendor Mozilla

00:01:21,360 --> 00:01:26,159
cares a lot about this PKI bit and we

00:01:24,090 --> 00:01:27,509
should all care about this because of

00:01:26,159 --> 00:01:28,770
their problems here it means that

00:01:27,509 --> 00:01:33,360
they're going to be problems for every

00:01:28,770 --> 00:01:34,860
single user on the web now most of us in

00:01:33,360 --> 00:01:37,079
this room should be fairly comfortable

00:01:34,860 --> 00:01:38,790
with how the web PKI works there are

00:01:37,079 --> 00:01:41,159
these things called digital certificates

00:01:38,790 --> 00:01:43,170
and they bind an entity's identity to

00:01:41,159 --> 00:01:45,810
its public key and they are issued by

00:01:43,170 --> 00:01:47,520
certification authorities now right at

00:01:45,810 --> 00:01:49,950
the top of this chain we have the root

00:01:47,520 --> 00:01:52,439
CA and it's certificate will be embedded

00:01:49,950 --> 00:01:53,670
in the browser when we issue end

00:01:52,439 --> 00:01:55,229
interested certificates

00:01:53,670 --> 00:01:57,540
there might be a number of intermediate

00:01:55,229 --> 00:01:59,520
certificates along the way attaching the

00:01:57,540 --> 00:02:02,579
appropriate digital signatures as we go

00:01:59,520 --> 00:02:04,560
and we build this chain of trust that

00:02:02,579 --> 00:02:06,899
eventually leads back to the root and

00:02:04,560 --> 00:02:10,229
this is effectively how we inject trust

00:02:06,899 --> 00:02:11,260
into the web but what if something goes

00:02:10,229 --> 00:02:14,620
wrong

00:02:11,260 --> 00:02:17,200
right it's estimated that over 500,000

00:02:14,620 --> 00:02:19,629
private keys were compromised because of

00:02:17,200 --> 00:02:21,190
the hardly vulnerability now estimates

00:02:19,629 --> 00:02:23,260
vary and it's actually probably a lot

00:02:21,190 --> 00:02:26,950
more than five hundred thousand private

00:02:23,260 --> 00:02:28,269
keys and why do we care what could

00:02:26,950 --> 00:02:29,560
happen well an attacker could

00:02:28,269 --> 00:02:32,379
man-in-the-middle your TLS connection

00:02:29,560 --> 00:02:34,900
and potentially decrypt your TLS session

00:02:32,379 --> 00:02:37,599
the current session or an attacker could

00:02:34,900 --> 00:02:40,690
effectively impersonate a server which

00:02:37,599 --> 00:02:42,760
is bad so what should happen when a

00:02:40,690 --> 00:02:44,650
private key gets compromised well the

00:02:42,760 --> 00:02:46,900
owner of that private key should contact

00:02:44,650 --> 00:02:49,660
the CA and request revocation of the

00:02:46,900 --> 00:02:51,670
corresponding public key certificates so

00:02:49,660 --> 00:02:53,290
then the CA needs to produce a public

00:02:51,670 --> 00:02:55,359
and cryptographic key verifiable

00:02:53,290 --> 00:02:57,579
attestation that this certificate should

00:02:55,359 --> 00:02:59,620
no longer be trusted and the

00:02:57,579 --> 00:03:03,160
responsibility lies with the client to

00:02:59,620 --> 00:03:06,459
check for revocation so revocation is

00:03:03,160 --> 00:03:09,640
important but revocation in the wild is

00:03:06,459 --> 00:03:11,950
broken and what I'm going to say over

00:03:09,640 --> 00:03:13,150
the next 17 minutes or so is I'll talk

00:03:11,950 --> 00:03:15,519
about what current methods we have

00:03:13,150 --> 00:03:16,840
clarification checking and why they

00:03:15,519 --> 00:03:19,299
don't really work in the browser

00:03:16,840 --> 00:03:22,150
ecosystem I'll talk about a new way of

00:03:19,299 --> 00:03:24,730
doing things see our light and this is

00:03:22,150 --> 00:03:26,290
an idea that was born in academia and I

00:03:24,730 --> 00:03:29,380
think we have one of the authors with us

00:03:26,290 --> 00:03:31,480
today and then I'm going to talk about

00:03:29,380 --> 00:03:34,359
how we're translating this idea for use

00:03:31,480 --> 00:03:36,639
in Firefox and if there's time I'd like

00:03:34,359 --> 00:03:38,819
to end about or talking about what it

00:03:36,639 --> 00:03:41,230
means for an industry idea to take root

00:03:38,819 --> 00:03:43,510
or an academic idea to take roots in

00:03:41,230 --> 00:03:45,760
industry and whether or not initiatives

00:03:43,510 --> 00:03:49,989
like this are helping us to move towards

00:03:45,760 --> 00:03:51,579
a more robust PKI all right so what myth

00:03:49,989 --> 00:03:53,680
is do we currently have for checking

00:03:51,579 --> 00:03:55,450
revocation status they are certificate

00:03:53,680 --> 00:03:57,669
revocation lists TRL's

00:03:55,450 --> 00:03:59,590
and these are quite simply lists with

00:03:57,669 --> 00:04:01,810
serial numbers of certificates that have

00:03:59,590 --> 00:04:04,419
been revoked they are produced by CAS

00:04:01,810 --> 00:04:06,639
and they are signed by CAS a CA will

00:04:04,419 --> 00:04:09,280
embed a URL in a certificate in issues

00:04:06,639 --> 00:04:10,870
and when a client sees this URL the

00:04:09,280 --> 00:04:13,150
client has a responsibility for

00:04:10,870 --> 00:04:15,609
downloading the CRL and checking for

00:04:13,150 --> 00:04:17,560
revocation status now we don't really

00:04:15,609 --> 00:04:19,419
like CR ELLs because they add a lot of

00:04:17,560 --> 00:04:21,609
latency to the connection you have to

00:04:19,419 --> 00:04:24,430
download a big file often multiple

00:04:21,609 --> 00:04:26,830
megabytes before you can display a page

00:04:24,430 --> 00:04:30,040
so we don't really use CR ELLs in

00:04:26,830 --> 00:04:33,430
Firefox then is the online certificate

00:04:30,040 --> 00:04:35,800
status protocol or OCSP so this allows a

00:04:33,430 --> 00:04:39,070
client to request the revocation status

00:04:35,800 --> 00:04:42,190
of a single certificate it sends an OCSP

00:04:39,070 --> 00:04:45,190
request to a CA zero CSP responder and

00:04:42,190 --> 00:04:47,440
receives the response now in theory

00:04:45,190 --> 00:04:49,870
there should be a little bit better but

00:04:47,440 --> 00:04:52,120
it also adds latency to the connection

00:04:49,870 --> 00:04:54,700
there's a privacy problem here because

00:04:52,120 --> 00:04:56,920
now the CA knows what the domains that

00:04:54,700 --> 00:05:00,160
the client is visiting and these things

00:04:56,920 --> 00:05:02,290
often fail in practice so we support

00:05:00,160 --> 00:05:05,350
this mechanism we don't really like it

00:05:02,290 --> 00:05:07,210
now what you might notice in these two

00:05:05,350 --> 00:05:09,820
mechanisms is that the client is doing a

00:05:07,210 --> 00:05:12,400
lot of the work but what if we shift all

00:05:09,820 --> 00:05:14,920
of this to the server so what if instead

00:05:12,400 --> 00:05:17,919
the server does this whole OCSP dance

00:05:14,920 --> 00:05:20,470
and it staples the OCSP response to the

00:05:17,919 --> 00:05:23,200
certificate that is going to issue right

00:05:20,470 --> 00:05:25,060
now this is a lot better it helps with

00:05:23,200 --> 00:05:27,540
the privacy concerns there's a reduction

00:05:25,060 --> 00:05:30,580
in latency but it's not quite perfect

00:05:27,540 --> 00:05:33,250
because attackers can strip offers OCSP

00:05:30,580 --> 00:05:36,460
response and in so doing the attacker

00:05:33,250 --> 00:05:38,890
can happily fail open its way to victory

00:05:36,460 --> 00:05:40,300
and what does that mean while in the

00:05:38,890 --> 00:05:42,400
mechanisms I have described

00:05:40,300 --> 00:05:44,500
if a client cannot determine the

00:05:42,400 --> 00:05:47,590
revocation status of a certificate it

00:05:44,500 --> 00:05:49,330
goes ahead with a connection anyway even

00:05:47,590 --> 00:05:52,479
if in reality the certificate has been

00:05:49,330 --> 00:05:54,220
revoked if it were to fail closed the

00:05:52,479 --> 00:05:56,500
client would terminate the connection if

00:05:54,220 --> 00:05:58,960
it could not determine revocation status

00:05:56,500 --> 00:06:02,440
and this is what happens in a mechanism

00:05:58,960 --> 00:06:05,260
called OCSP must staple this is a TLS

00:06:02,440 --> 00:06:07,690
extension signals to the client you will

00:06:05,260 --> 00:06:09,310
be receiving a no CSP response and if

00:06:07,690 --> 00:06:11,860
the client doesn't receive that response

00:06:09,310 --> 00:06:14,080
it tears down the connection now we

00:06:11,860 --> 00:06:17,050
really like OCS PMS stable because it

00:06:14,080 --> 00:06:19,900
checks a lot of the boxes the problem is

00:06:17,050 --> 00:06:21,850
it's not very widely deployed on the web

00:06:19,900 --> 00:06:26,979
all right and a lot of hosts don't

00:06:21,850 --> 00:06:28,419
really support OCSP stapling so in all

00:06:26,979 --> 00:06:30,070
of the mechanisms that have described

00:06:28,419 --> 00:06:33,010
but are deployed at scale there are

00:06:30,070 --> 00:06:34,599
problems there are delays and in Firefox

00:06:33,010 --> 00:06:36,160
we see editions of up to 200

00:06:34,599 --> 00:06:36,860
milliseconds and I actually think in

00:06:36,160 --> 00:06:39,680
some cases it's

00:06:36,860 --> 00:06:43,939
much more than that they fail open and

00:06:39,680 --> 00:06:46,460
now privacy concerns but what if we

00:06:43,939 --> 00:06:48,919
could push all revocation information to

00:06:46,460 --> 00:06:51,050
all of the clients and there are already

00:06:48,919 --> 00:06:53,810
initiatives along these lines there's

00:06:51,050 --> 00:06:56,240
Google crl set and there's Mozilla's one

00:06:53,810 --> 00:06:58,789
crl which push partial revocation

00:06:56,240 --> 00:07:01,099
information to clients why not all

00:06:58,789 --> 00:07:03,740
revocation information I'll let you

00:07:01,099 --> 00:07:05,150
think about that for a second and of

00:07:03,740 --> 00:07:07,639
course there are some other ideas one of

00:07:05,150 --> 00:07:10,009
them involves using FM radio to send

00:07:07,639 --> 00:07:11,569
revocation information to clients so our

00:07:10,009 --> 00:07:15,529
all clients going to install FM

00:07:11,569 --> 00:07:17,300
receivers probably not so the problem

00:07:15,529 --> 00:07:20,000
with pushing or revocation information

00:07:17,300 --> 00:07:22,610
to clients is of course size size

00:07:20,000 --> 00:07:24,710
matters and this is where see our light

00:07:22,610 --> 00:07:27,319
comes in it compactly and efficiently

00:07:24,710 --> 00:07:31,849
stores revocation information and gets

00:07:27,319 --> 00:07:32,659
it to clients and what is the size trick

00:07:31,849 --> 00:07:35,210
how does it do this

00:07:32,659 --> 00:07:37,189
well it uses cascading room filters and

00:07:35,210 --> 00:07:39,349
I'll talk about those in just a second

00:07:37,189 --> 00:07:42,199
but with initiatives like certificate

00:07:39,349 --> 00:07:43,849
transparency and Internet scans we now

00:07:42,199 --> 00:07:46,250
have a pretty good view of the

00:07:43,849 --> 00:07:49,069
certificate ecosystem so see our light

00:07:46,250 --> 00:07:50,810
harnesses this data and compactly stores

00:07:49,069 --> 00:07:53,650
it in a data structure that supports

00:07:50,810 --> 00:07:56,169
queries to the finite set of unexpired

00:07:53,650 --> 00:07:58,969
certificates

00:07:56,169 --> 00:08:01,400
okay bloom filters so what is a bloom

00:07:58,969 --> 00:08:03,169
filter it's a probabilistic data

00:08:01,400 --> 00:08:06,409
structure that allows for the insertion

00:08:03,169 --> 00:08:08,449
of arbitrary sized data elements so you

00:08:06,409 --> 00:08:11,449
need a bit vector or a bit array of size

00:08:08,449 --> 00:08:13,729
m and you need K hash functions to

00:08:11,449 --> 00:08:15,680
determine array indices this is a very

00:08:13,729 --> 00:08:18,889
contrived examples for illustration

00:08:15,680 --> 00:08:20,629
purposes only so how would we put data

00:08:18,889 --> 00:08:23,629
item D in the filter

00:08:20,629 --> 00:08:26,719
well we'd compute H 1 of D this gives us

00:08:23,629 --> 00:08:30,020
4 so we set the bit in array an index 4

00:08:26,719 --> 00:08:33,740
to 1 we compute H 2 of D it's gives us

00:08:30,020 --> 00:08:35,269
11 we set this index to 1 we keep going

00:08:33,740 --> 00:08:36,979
we said 9 to 1

00:08:35,269 --> 00:08:39,169
and then we're going to say to 2 to 1

00:08:36,979 --> 00:08:41,719
right so now this item is in the bloom

00:08:39,169 --> 00:08:44,779
filter what if we were to put another

00:08:41,719 --> 00:08:46,790
data item into the bloom filter it might

00:08:44,779 --> 00:08:48,410
look something like this and you might

00:08:46,790 --> 00:08:50,630
notice that there's a magenta bit

00:08:48,410 --> 00:08:52,250
somewhere there and why is that

00:08:50,630 --> 00:08:54,260
that's because two data items have

00:08:52,250 --> 00:08:55,460
collided on the same index and this can

00:08:54,260 --> 00:09:00,230
definitely happen and there are also

00:08:55,460 --> 00:09:02,420
multiple hash functions now how do we

00:09:00,230 --> 00:09:05,510
determine if something is in the vault

00:09:02,420 --> 00:09:08,600
is d-star in this filter if any of the

00:09:05,510 --> 00:09:11,210
hid star values is zero then it's not in

00:09:08,600 --> 00:09:14,240
the filter we know that if all of these

00:09:11,210 --> 00:09:16,820
hid star values are one then it might be

00:09:14,240 --> 00:09:21,140
in the filter all right so maybe it's a

00:09:16,820 --> 00:09:22,030
legitimate insertion maybe it's not so

00:09:21,140 --> 00:09:24,440
we're going to have false positives

00:09:22,030 --> 00:09:26,780
right and this false positive rate is

00:09:24,440 --> 00:09:31,070
going to be determined by M K and the

00:09:26,780 --> 00:09:32,570
occupancy of this filter so what we'd

00:09:31,070 --> 00:09:34,280
like to do is we'd like to harness these

00:09:32,570 --> 00:09:36,980
bloom filters we want to store the set

00:09:34,280 --> 00:09:40,400
of revoked certificates are in a bloom

00:09:36,980 --> 00:09:43,450
filter right and here you you represents

00:09:40,400 --> 00:09:47,330
the set of Fernet unexpired certificates

00:09:43,450 --> 00:09:48,950
so if we were to store set R in a bloom

00:09:47,330 --> 00:09:52,580
filter we're going to get false

00:09:48,950 --> 00:09:54,680
positives right but why don't we just

00:09:52,580 --> 00:09:56,660
store those false positives in another

00:09:54,680 --> 00:09:59,360
bloom filter all right so this is the

00:09:56,660 --> 00:10:03,140
idea of cascading doing filters and this

00:09:59,360 --> 00:10:04,340
is what see our lights harnesses so see

00:10:03,140 --> 00:10:06,410
your light does something like this we

00:10:04,340 --> 00:10:08,770
take our we put it into the first bloom

00:10:06,410 --> 00:10:10,910
filter this is bloom filter number one

00:10:08,770 --> 00:10:13,760
but they're going to be false positives

00:10:10,910 --> 00:10:15,950
and what are these these are elements of

00:10:13,760 --> 00:10:17,870
s so these are unexpired and revoked

00:10:15,950 --> 00:10:20,480
certificates that should not really be

00:10:17,870 --> 00:10:22,880
in this first bloom filter so let's put

00:10:20,480 --> 00:10:25,550
those into another bloom filter all

00:10:22,880 --> 00:10:28,010
right again we're going to have false

00:10:25,550 --> 00:10:29,660
positives and what are these these are

00:10:28,010 --> 00:10:33,200
elements of R that shouldn't really be

00:10:29,660 --> 00:10:34,070
in bloom fall to number two so we keep

00:10:33,200 --> 00:10:35,630
going like this

00:10:34,070 --> 00:10:38,480
until they are no more false positives

00:10:35,630 --> 00:10:41,150
and we get a number of different bloom

00:10:38,480 --> 00:10:43,670
filters so what does this mean for data

00:10:41,150 --> 00:10:45,920
elements in these bloom filters so if d

00:10:43,670 --> 00:10:48,500
star is not in the first bloom filter

00:10:45,920 --> 00:10:50,360
then it's not in our if it is in the

00:10:48,500 --> 00:10:52,760
first priam filter well we don't really

00:10:50,360 --> 00:10:55,190
know because they're false positives if

00:10:52,760 --> 00:10:57,410
it's in the first bloom filter but not

00:10:55,190 --> 00:11:00,170
in the second one then it is an R if

00:10:57,410 --> 00:11:01,329
it's in both of them again we don't

00:11:00,170 --> 00:11:03,670
really know

00:11:01,329 --> 00:11:05,170
if it's in the next one if it's improved

00:11:03,670 --> 00:11:07,239
volts a wild blue impulse or two but not

00:11:05,170 --> 00:11:09,879
in blue until two three we know it's not

00:11:07,239 --> 00:11:12,670
in our right if it's in all three of

00:11:09,879 --> 00:11:15,610
them for three level bloom filter then

00:11:12,670 --> 00:11:17,259
it is an R so we want to use the

00:11:15,610 --> 00:11:19,059
structure the status structure to

00:11:17,259 --> 00:11:21,970
determine whether or not and unexpired

00:11:19,059 --> 00:11:24,279
certificates has been revoked so we

00:11:21,970 --> 00:11:26,139
start i is equal to one and we look

00:11:24,279 --> 00:11:28,989
inside these bloom filters and we keep

00:11:26,139 --> 00:11:32,649
going until you is not in a bloom filter

00:11:28,989 --> 00:11:35,589
if eyes art then it hasn't been revoked

00:11:32,649 --> 00:11:39,670
it's not in our if I is even then it is

00:11:35,589 --> 00:11:41,319
an R if it's in all of them we look at

00:11:39,670 --> 00:11:44,350
the number of levels of bloom filters

00:11:41,319 --> 00:11:47,559
that we have buts odd we know it is an R

00:11:44,350 --> 00:11:49,600
it's even it's not an R so this is how

00:11:47,559 --> 00:11:52,449
we determine the revocation status of

00:11:49,600 --> 00:11:55,389
certificates by looking at this filter

00:11:52,449 --> 00:11:57,639
cascade now what we want

00:11:55,389 --> 00:11:59,739
obviously is the minimum size possible

00:11:57,639 --> 00:12:02,649
for this data structure now a bloom

00:11:59,739 --> 00:12:05,649
filter singular is minimized when K is

00:12:02,649 --> 00:12:08,619
set to this and M is set to this oi'm is

00:12:05,649 --> 00:12:11,470
this the question with cascading bloom

00:12:08,619 --> 00:12:15,040
filters is well how do we set P to get

00:12:11,470 --> 00:12:16,989
the minimum possible size there's some

00:12:15,040 --> 00:12:19,360
really nice analysis in the paper and it

00:12:16,989 --> 00:12:21,549
actually shows that it's optimal to set

00:12:19,360 --> 00:12:23,259
P 1 for bloom filter 1 this is your

00:12:21,549 --> 00:12:25,600
biggest bloom filter and to use a

00:12:23,259 --> 00:12:28,869
different false positive rate P for the

00:12:25,600 --> 00:12:30,759
remaining bloom filters so we define p1

00:12:28,869 --> 00:12:32,799
to be this it depends on the size of our

00:12:30,759 --> 00:12:36,669
and the size of s and also on the false

00:12:32,799 --> 00:12:38,439
positive rate P and when P is not 0.5 we

00:12:36,669 --> 00:12:41,019
get close to a theoretical lower bound

00:12:38,439 --> 00:12:42,850
for the size of this filter cascade and

00:12:41,019 --> 00:12:44,679
there are some really nice simulations

00:12:42,850 --> 00:12:47,169
in the paper that confirm that this is

00:12:44,679 --> 00:12:48,429
actually true and the good news is that

00:12:47,169 --> 00:12:52,329
the size of this thing is going to be

00:12:48,429 --> 00:12:53,919
dominated by r and not as escrows s is

00:12:52,329 --> 00:12:55,389
usually much bigger than R so we

00:12:53,919 --> 00:12:59,350
wouldn't want that to dominate the size

00:12:55,389 --> 00:13:01,089
of this all right now in terms of the co

00:12:59,350 --> 00:13:02,739
light architecture there are two agents

00:13:01,089 --> 00:13:03,879
that you need to keep in mind there's

00:13:02,739 --> 00:13:05,799
the client that needs to do the

00:13:03,879 --> 00:13:07,360
revocation checking and there's the see

00:13:05,799 --> 00:13:09,369
our light aggregator which is

00:13:07,360 --> 00:13:09,960
responsible for constructing this rule

00:13:09,369 --> 00:13:13,250
to cascade

00:13:09,960 --> 00:13:15,720
and getting this information to clients

00:13:13,250 --> 00:13:18,480
now I have shamelessly stolen this

00:13:15,720 --> 00:13:20,370
diagram from the paper to represent the

00:13:18,480 --> 00:13:22,710
academic idea of what the architecture

00:13:20,370 --> 00:13:24,840
would look like we start with raw

00:13:22,710 --> 00:13:26,960
information this goes into the

00:13:24,840 --> 00:13:29,790
aggregator and we validate we extract

00:13:26,960 --> 00:13:32,520
active certificates they will use CR

00:13:29,790 --> 00:13:34,380
ELLs and OCSP responses to construct our

00:13:32,520 --> 00:13:37,140
we're going to put our into this

00:13:34,380 --> 00:13:39,900
cascaded bloom filter and then the

00:13:37,140 --> 00:13:42,870
aggregator produces a daily filter which

00:13:39,900 --> 00:13:45,930
in the papers are recorded at 10 bar ten

00:13:42,870 --> 00:13:47,160
megabytes and a delta updates so this is

00:13:45,930 --> 00:13:49,770
the difference between yesterday's

00:13:47,160 --> 00:13:51,270
filter and today's filter so if you

00:13:49,770 --> 00:13:52,710
downloaded yesterday's filter you don't

00:13:51,270 --> 00:13:54,780
need to download the whole thing again

00:13:52,710 --> 00:13:57,300
you can just download the Stelter which

00:13:54,780 --> 00:13:59,730
is quite a small file the aggregator

00:13:57,300 --> 00:14:01,980
will also produce an audit log so that

00:13:59,730 --> 00:14:05,840
third parties can independently verify

00:14:01,980 --> 00:14:08,310
the construction of this cascade and

00:14:05,840 --> 00:14:11,220
it's up to clients to go and fetch these

00:14:08,310 --> 00:14:13,470
files and do the revocation checking now

00:14:11,220 --> 00:14:14,850
in the academic paper it's stated that

00:14:13,470 --> 00:14:20,060
this idea is deplorable

00:14:14,850 --> 00:14:22,860
today so let's find out if that's true

00:14:20,060 --> 00:14:24,390
for anyone who's a Def Leppard fan you

00:14:22,860 --> 00:14:26,820
might notice that sort of my subtitle

00:14:24,390 --> 00:14:28,350
links to the title but don't take it too

00:14:26,820 --> 00:14:31,440
seriously

00:14:28,350 --> 00:14:33,210
now at Mozilla we realized that using CR

00:14:31,440 --> 00:14:35,670
Lite was going to help us to do things

00:14:33,210 --> 00:14:37,770
the Mozilla Way as part of our

00:14:35,670 --> 00:14:40,890
principles we care about the privacy of

00:14:37,770 --> 00:14:43,410
users on the web and we use OCSP which

00:14:40,890 --> 00:14:45,210
isn't really great for privacy and Co

00:14:43,410 --> 00:14:46,680
light can help us there and also the

00:14:45,210 --> 00:14:49,260
reduction in latency is going to be

00:14:46,680 --> 00:14:51,030
really nice so I stole this slide this

00:14:49,260 --> 00:14:53,400
little grey box from one of the CR line

00:14:51,030 --> 00:14:55,440
engineers when he was talking about why

00:14:53,400 --> 00:14:58,860
Mozilla wants to think about using CR

00:14:55,440 --> 00:15:01,410
light it has CR CR l-like properties

00:14:58,860 --> 00:15:04,230
there are very small data sizes means

00:15:01,410 --> 00:15:06,210
we'll be fast to pass the incremental

00:15:04,230 --> 00:15:08,580
update function was very appealing it

00:15:06,210 --> 00:15:10,530
would scale well and it could build on

00:15:08,580 --> 00:15:14,190
the useful properties of certificate

00:15:10,530 --> 00:15:16,200
transparency now this is our

00:15:14,190 --> 00:15:18,000
architecture so this is what we want to

00:15:16,200 --> 00:15:20,460
do well what we are prototyping in

00:15:18,000 --> 00:15:22,300
Firefox so we are actually only using

00:15:20,460 --> 00:15:23,860
certificate transparency in

00:15:22,300 --> 00:15:26,199
this is going into the aggregator and

00:15:23,860 --> 00:15:29,529
we're also using CR elzo need to

00:15:26,199 --> 00:15:31,420
construct our sitar right we construct

00:15:29,529 --> 00:15:33,970
our filter cascade and we produce our

00:15:31,420 --> 00:15:37,000
daily filter file and we produce for

00:15:33,970 --> 00:15:39,009
Delta update files in a day right this

00:15:37,000 --> 00:15:40,899
is what we want to do and our files are

00:15:39,009 --> 00:15:44,440
quite small we're at five megabytes and

00:15:40,899 --> 00:15:46,630
0.3 megabytes for these files and what's

00:15:44,440 --> 00:15:48,880
really lovely is that we already have

00:15:46,630 --> 00:15:51,220
the infrastructure to sign and push

00:15:48,880 --> 00:15:55,630
these files to our clients because of

00:15:51,220 --> 00:15:58,120
the one crl mechanism that we have now

00:15:55,630 --> 00:16:00,120
the paper did include a prototype and it

00:15:58,120 --> 00:16:02,170
was built as a Firefox extension and

00:16:00,120 --> 00:16:05,319
because it was built as a Firefox

00:16:02,170 --> 00:16:07,389
extension the authors had to rely on TLS

00:16:05,319 --> 00:16:09,790
api's for checking our certificate

00:16:07,389 --> 00:16:12,160
chains and this is JavaScript not really

00:16:09,790 --> 00:16:13,509
the most performance of languages we

00:16:12,160 --> 00:16:15,970
don't have to build it as an extension

00:16:13,509 --> 00:16:19,149
we can make it native to the browser so

00:16:15,970 --> 00:16:22,029
we can put it inside Firefox and we can

00:16:19,149 --> 00:16:24,009
use languages C++ we use rust we use a

00:16:22,029 --> 00:16:25,779
little bit of JavaScript but mostly it's

00:16:24,009 --> 00:16:28,209
in C++ and rust

00:16:25,779 --> 00:16:30,670
now in the academic prototype they

00:16:28,209 --> 00:16:32,259
record 10 milliseconds for checking a

00:16:30,670 --> 00:16:34,449
certificate chain right and this

00:16:32,259 --> 00:16:36,130
includes for passing up certificates

00:16:34,449 --> 00:16:38,560
because the API provides unpassed

00:16:36,130 --> 00:16:40,269
certificates so these are a few numbers

00:16:38,560 --> 00:16:44,110
on our site that I got from one of our

00:16:40,269 --> 00:16:46,630
engineers about month ago maybe and for

00:16:44,110 --> 00:16:47,949
us to check our certificates is between

00:16:46,630 --> 00:16:51,130
north one or one and North Point North

00:16:47,949 --> 00:16:53,170
for milliseconds but I will qualify that

00:16:51,130 --> 00:16:55,660
we're checking end entity certificates

00:16:53,170 --> 00:16:57,880
and we still make use of our one crl

00:16:55,660 --> 00:17:02,680
mechanism to check for the revocation of

00:16:57,880 --> 00:17:05,110
intermediate certificates now what has

00:17:02,680 --> 00:17:09,429
it been like to take an academic idea

00:17:05,110 --> 00:17:11,230
and put it into an industry product the

00:17:09,429 --> 00:17:12,789
idea tracked well with us we really

00:17:11,230 --> 00:17:16,750
liked it and the fact that there was a

00:17:12,789 --> 00:17:19,390
Firefox prototype really helped but the

00:17:16,750 --> 00:17:22,059
paper didn't or really couldn't take our

00:17:19,390 --> 00:17:24,250
existing infrastructure into account now

00:17:22,059 --> 00:17:26,620
in our case existing infrastructure has

00:17:24,250 --> 00:17:28,630
been a bonus it helps us but this isn't

00:17:26,620 --> 00:17:31,600
necessarily always going to be true for

00:17:28,630 --> 00:17:34,700
other initiatives early on we had some

00:17:31,600 --> 00:17:36,620
contact with the office more contact and

00:17:34,700 --> 00:17:38,600
as we progressed with the project we

00:17:36,620 --> 00:17:39,980
weren't that in touch with what the

00:17:38,600 --> 00:17:41,810
author with the authors or what they had

00:17:39,980 --> 00:17:44,390
done and maybe we could have sustained

00:17:41,810 --> 00:17:46,070
that throughout the project and I will

00:17:44,390 --> 00:17:48,200
say the timing is right for this type of

00:17:46,070 --> 00:17:49,790
solution to exists because of other

00:17:48,200 --> 00:17:51,950
initiatives that have come to the fore

00:17:49,790 --> 00:17:54,320
like certificate transparency so these

00:17:51,950 --> 00:17:58,490
tools can all work together to give us a

00:17:54,320 --> 00:18:00,170
solution like Sierra lights now when I

00:17:58,490 --> 00:18:01,820
spoke to one of the co line engineers I

00:18:00,170 --> 00:18:03,940
said what do you think about the system

00:18:01,820 --> 00:18:07,100
what do you think about this process and

00:18:03,940 --> 00:18:09,080
he said to me it's an excellent solution

00:18:07,100 --> 00:18:11,570
to a problem we just shouldn't have and

00:18:09,080 --> 00:18:14,630
and this is interesting and he's right

00:18:11,570 --> 00:18:16,760
because we have OCSP must staple right

00:18:14,630 --> 00:18:19,250
we could use this but it's not widely

00:18:16,760 --> 00:18:21,610
deployed and the reasons for it not been

00:18:19,250 --> 00:18:24,410
widely deployed I think go beyond

00:18:21,610 --> 00:18:29,840
engineering and it's a can of worms I

00:18:24,410 --> 00:18:31,850
won't open right now okay so I started

00:18:29,840 --> 00:18:34,580
the day with a question or a series of

00:18:31,850 --> 00:18:36,860
questions I'm going to end with one do

00:18:34,580 --> 00:18:38,630
we think that initiatives like this or

00:18:36,860 --> 00:18:42,310
Co light in particular is going to help

00:18:38,630 --> 00:18:44,600
us move towards a more robust web PKI I

00:18:42,310 --> 00:18:46,910
definitely think that is going to help

00:18:44,600 --> 00:18:48,800
and I can only really speak from being

00:18:46,910 --> 00:18:51,380
in the tech industry but after being in

00:18:48,800 --> 00:18:53,690
industry and then doing a PhD and then

00:18:51,380 --> 00:18:55,550
doing back in industry I can see the

00:18:53,690 --> 00:18:58,040
importance of the influence that these

00:18:55,550 --> 00:18:59,630
two spheres have on each other and the

00:18:58,040 --> 00:19:02,420
importance of the relationship between

00:18:59,630 --> 00:19:04,640
academia and industry and I really do

00:19:02,420 --> 00:19:06,460
believe that they are friends so thank

00:19:04,640 --> 00:19:10,109
you

00:19:06,460 --> 00:19:10,109

YouTube URL: https://www.youtube.com/watch?v=Ult8JPc3rPY


