Title: Mozilla Security Research Summit 2019 - Preventing Data Exfiltration Attempts in the Browser
Publication date: 2019-06-24
Playlist: 2019 SF Security Research Summit
Description: 
	Preventing Data Exfiltration Attempts in the Browser by Christoph Kerschbaumer

Talk from the 2019 SF Security Research Summit (https://events.mozilla.org/moz2019securityresearchsummit). This event is part of the Security Engineering University Relationship Framework (SURF) initiative, which aims to increase collaboration between Mozilla and the academic community. We would like to leverage academic talent to help explore security and privacy research problems, and to strengthen Mozilla's ties to the academic community. Mozilla security engineers aim to actively participate in the research community through thesis supervision, collaborations, placements and Mozilla-hosted security summits. For more info see: https://surf.mozilla.org/

Slides: https://drive.google.com/open?id=1adGQJKHIMe1el7FsAi3tYqetiyJQIW1U
Captions: 
	00:00:00,000 --> 00:00:07,740
I travel a lot and I made it a habit to

00:00:05,130 --> 00:00:10,349
do my expense reports immediately when I

00:00:07,740 --> 00:00:11,969
get back home so the other day I got

00:00:10,349 --> 00:00:14,420
back home from a business trip and

00:00:11,969 --> 00:00:19,170
they're locked into my banking account

00:00:14,420 --> 00:00:21,510
but this time it felt different it felt

00:00:19,170 --> 00:00:25,199
different in a way that it took long at

00:00:21,510 --> 00:00:27,570
the page took longer to load and since

00:00:25,199 --> 00:00:29,670
I'm engineer I took a closer look what

00:00:27,570 --> 00:00:32,430
was going on Firefox provides a lot of

00:00:29,670 --> 00:00:35,910
tools that allows you to investigate how

00:00:32,430 --> 00:00:38,700
many requests are made by a web page so

00:00:35,910 --> 00:00:41,280
I opened up the web console and I even I

00:00:38,700 --> 00:00:43,050
looked at all the requests and I even

00:00:41,280 --> 00:00:44,969
looked at the source code and eventually

00:00:43,050 --> 00:00:47,489
I figured out that my banking website

00:00:44,969 --> 00:00:49,680
not only loads data from the banking

00:00:47,489 --> 00:00:53,430
server but also from a third party

00:00:49,680 --> 00:00:56,160
script so what is that script doing I

00:00:53,430 --> 00:00:58,770
looked around and eventually I realized

00:00:56,160 --> 00:01:01,469
it is one of those scripts that analyzes

00:00:58,770 --> 00:01:03,719
your mouse behavior right so web pages

00:01:01,469 --> 00:01:05,549
use it to actually rearrange their links

00:01:03,719 --> 00:01:08,960
to make it more user friendly and to

00:01:05,549 --> 00:01:13,830
improve the usability of the web page

00:01:08,960 --> 00:01:16,890
and this is no good no good because it's

00:01:13,830 --> 00:01:20,220
my private data it's really like when

00:01:16,890 --> 00:01:25,500
you look at it you can see what what

00:01:20,220 --> 00:01:29,790
money I spent money on whatever so I

00:01:25,500 --> 00:01:31,770
contacted my bank and I told them this

00:01:29,790 --> 00:01:33,630
is a problem please can you remove the

00:01:31,770 --> 00:01:36,030
script and eventually I got through to

00:01:33,630 --> 00:01:37,560
the developers and initially they didn't

00:01:36,030 --> 00:01:39,930
even realize that that might be a

00:01:37,560 --> 00:01:43,350
problem so again I raised my concern

00:01:39,930 --> 00:01:47,090
please remove it and eventually they

00:01:43,350 --> 00:01:51,570
removed it right so this story tells us

00:01:47,090 --> 00:01:56,340
that quite often webpage authors are not

00:01:51,570 --> 00:01:58,890
even aware what are you doing okay with

00:01:56,340 --> 00:02:01,590
that I would like to welcome you all

00:01:58,890 --> 00:02:03,899
back from the lunch break and I would

00:02:01,590 --> 00:02:07,190
like to invite you on a quick tour on a

00:02:03,899 --> 00:02:11,129
15 minute tour behind the scenes

00:02:07,190 --> 00:02:13,800
starting with what is that technical

00:02:11,129 --> 00:02:17,040
problem or how does it technically work

00:02:13,800 --> 00:02:19,020
to exfiltrate data out of the browser we

00:02:17,040 --> 00:02:21,750
look at the current security model in

00:02:19,020 --> 00:02:24,720
the browser and then I prepared like

00:02:21,750 --> 00:02:27,060
three approaches that have the potential

00:02:24,720 --> 00:02:29,610
to overcome the problem of data

00:02:27,060 --> 00:02:32,040
exfiltration in the browser but let's

00:02:29,610 --> 00:02:35,120
start from the very beginning so

00:02:32,040 --> 00:02:39,450
explicitly I chose a slide or data from

00:02:35,120 --> 00:02:44,280
2012 and even back then like 90% of web

00:02:39,450 --> 00:02:46,080
pages are powered by JavaScript right so

00:02:44,280 --> 00:02:48,060
that was seven years ago and by now I

00:02:46,080 --> 00:02:50,730
can testify that literally every single

00:02:48,060 --> 00:02:54,750
webpage is powered by JavaScript right

00:02:50,730 --> 00:02:55,230
so it's really only present let's take a

00:02:54,750 --> 00:02:57,690
look

00:02:55,230 --> 00:03:00,060
so webpages load information from

00:02:57,690 --> 00:03:01,230
different origins on the web that's how

00:03:00,060 --> 00:03:03,420
the web works basically

00:03:01,230 --> 00:03:06,990
and then here Iowa straight the Raider

00:03:03,420 --> 00:03:07,800
as infocomm content comm and also exfil

00:03:06,990 --> 00:03:10,340
trader.com

00:03:07,800 --> 00:03:14,280
so quite commonly I mean this is

00:03:10,340 --> 00:03:16,920
simplified but when we look at it in

00:03:14,280 --> 00:03:19,950
this case like infocomm creates the DOM

00:03:16,920 --> 00:03:21,570
and the Dom is the representation model

00:03:19,950 --> 00:03:24,590
the document object model that really

00:03:21,570 --> 00:03:27,240
displays data in your browser so the

00:03:24,590 --> 00:03:29,130
infocomm creates a secret whatever added

00:03:27,240 --> 00:03:31,950
secret might be so in my case of the

00:03:29,130 --> 00:03:34,950
banking website it was all the different

00:03:31,950 --> 00:03:37,260
lines and all my expenses that I used in

00:03:34,950 --> 00:03:38,100
my credit card right so now Excel

00:03:37,260 --> 00:03:40,470
trader.com

00:03:38,100 --> 00:03:42,690
is also loaded in the same execution

00:03:40,470 --> 00:03:44,220
context so it's important to mention if

00:03:42,690 --> 00:03:46,170
it's loaded in the same execution

00:03:44,220 --> 00:03:49,290
context it has access to the fold on

00:03:46,170 --> 00:03:51,959
right so on a very simplified model what

00:03:49,290 --> 00:03:53,790
the exfiltrated script would do is or at

00:03:51,959 --> 00:03:55,830
least in the old days there are variety

00:03:53,790 --> 00:03:58,530
of channels but the easiest example is

00:03:55,830 --> 00:04:00,120
it creates a new image and with the

00:03:58,530 --> 00:04:03,150
image it sets the source to exfiltrate

00:04:00,120 --> 00:04:05,550
accom and then it appends whatever

00:04:03,150 --> 00:04:08,040
secret they are interested in as a

00:04:05,550 --> 00:04:09,600
payload right so this creep by now are

00:04:08,040 --> 00:04:12,000
quite sophisticated I'd say take

00:04:09,600 --> 00:04:13,500
screenshots even record what is going on

00:04:12,000 --> 00:04:18,720
like they have access to a full

00:04:13,500 --> 00:04:20,669
movements okay so now it is important to

00:04:18,720 --> 00:04:22,620
mention that the current security model

00:04:20,669 --> 00:04:24,780
that we have in a browser and that every

00:04:22,620 --> 00:04:27,330
major browser implements cannot do

00:04:24,780 --> 00:04:29,490
anything against that kind of a

00:04:27,330 --> 00:04:31,169
filtration attacks let's look at them

00:04:29,490 --> 00:04:33,870
real quick so the same origin policy

00:04:31,169 --> 00:04:36,659
itself allows objects for the same

00:04:33,870 --> 00:04:39,539
origin to access object for the same

00:04:36,659 --> 00:04:42,810
origin but prevents objects from

00:04:39,539 --> 00:04:45,689
different origins but only if they are

00:04:42,810 --> 00:04:47,639
not loaded in the same execution context

00:04:45,689 --> 00:04:50,490
like in the example I provided in the

00:04:47,639 --> 00:04:52,050
beginning the exfiltrated script or the

00:04:50,490 --> 00:04:54,750
analysis script was loaded in the same

00:04:52,050 --> 00:04:56,610
execution context also the second one

00:04:54,750 --> 00:04:58,919
here is the iframe sandbox doesn't do

00:04:56,610 --> 00:05:01,620
anything about it because we could use

00:04:58,919 --> 00:05:03,599
iframe sandbox to actually load a

00:05:01,620 --> 00:05:05,610
different document in my document and

00:05:03,599 --> 00:05:07,949
then it's isolated from each other but

00:05:05,610 --> 00:05:09,810
this also doesn't apply to loading a

00:05:07,949 --> 00:05:12,150
script in the same execution context and

00:05:09,810 --> 00:05:14,400
then finally a few years ago we came up

00:05:12,150 --> 00:05:16,440
with the content security policy and the

00:05:14,400 --> 00:05:19,020
content security policy allows you to

00:05:16,440 --> 00:05:22,529
whitelist where resources are loaded

00:05:19,020 --> 00:05:24,539
from on the web again here the CSP

00:05:22,529 --> 00:05:27,120
doesn't do anything to prevent that kind

00:05:24,539 --> 00:05:28,669
of data exfiltration attempts so a lot

00:05:27,120 --> 00:05:31,979
of the problems that we are facing

00:05:28,669 --> 00:05:33,930
within content security is actually that

00:05:31,979 --> 00:05:36,210
all of the security is not binary right

00:05:33,930 --> 00:05:39,060
it's not full trust it's not no trust

00:05:36,210 --> 00:05:41,250
there is that grey area in between where

00:05:39,060 --> 00:05:46,440
it's I refer to it as the semi trust

00:05:41,250 --> 00:05:51,839
right so moving on how can we prevent

00:05:46,440 --> 00:05:56,370
such data exfiltration attempts well I

00:05:51,839 --> 00:05:59,669
can tell you one thing we cannot simply

00:05:56,370 --> 00:06:02,819
block all of it right that would be one

00:05:59,669 --> 00:06:04,979
solution but yeah so I prepared as I

00:06:02,819 --> 00:06:08,039
said like three approaches that have the

00:06:04,979 --> 00:06:10,740
potential to actually stop that problem

00:06:08,039 --> 00:06:12,389
or mitigate the problem and what we have

00:06:10,740 --> 00:06:14,819
heard in the morning at the PhD

00:06:12,389 --> 00:06:17,490
lightning talks already saw that some

00:06:14,819 --> 00:06:19,169
people were very interested in data flow

00:06:17,490 --> 00:06:22,050
tracking and information flow tracking

00:06:19,169 --> 00:06:24,690
so let's start with that a quick

00:06:22,050 --> 00:06:27,389
overview we have seen a variety of

00:06:24,690 --> 00:06:29,969
information flow tracking systems over

00:06:27,389 --> 00:06:32,430
the past years so I don't know in a

00:06:29,969 --> 00:06:34,770
nutshell it is like every domain

00:06:32,430 --> 00:06:37,259
registered with itself and some kind of

00:06:34,770 --> 00:06:39,389
domain registry and then we track the

00:06:37,259 --> 00:06:40,879
flow of information throughout the

00:06:39,389 --> 00:06:42,589
JavaScript engine

00:06:40,879 --> 00:06:44,659
throughout the Dom bindings and

00:06:42,589 --> 00:06:46,610
throughout the DOM and then usually all

00:06:44,659 --> 00:06:49,099
of these approaches have something in

00:06:46,610 --> 00:06:52,459
common and that is a network monitor so

00:06:49,099 --> 00:06:55,869
before any requests are made we inspect

00:06:52,459 --> 00:06:58,789
if the labels yeah we inspect the labels

00:06:55,869 --> 00:07:01,369
and potentially block the requests at

00:06:58,789 --> 00:07:03,830
that point right so it is important to

00:07:01,369 --> 00:07:06,050
differentiate between data flow tracking

00:07:03,830 --> 00:07:08,240
and information flow tracking data flow

00:07:06,050 --> 00:07:10,699
tracking only tracks the information for

00:07:08,240 --> 00:07:13,610
direct assignments misses which in my

00:07:10,699 --> 00:07:17,449
opinion is very good right now because

00:07:13,610 --> 00:07:20,209
we can highlight where data actually is

00:07:17,449 --> 00:07:22,129
exfiltrated in that sense but only as

00:07:20,209 --> 00:07:23,659
long as we don't implement it in the

00:07:22,129 --> 00:07:25,729
browser itself because then the

00:07:23,659 --> 00:07:27,740
attackers would know oh they only do

00:07:25,729 --> 00:07:30,769
data flow tracking and they just do a

00:07:27,740 --> 00:07:33,019
few additional tricks for example branch

00:07:30,769 --> 00:07:34,969
on the secret has signed the information

00:07:33,019 --> 00:07:37,909
to a public variable which would not be

00:07:34,969 --> 00:07:39,740
labeled and the systems are passable

00:07:37,909 --> 00:07:41,419
right so it doesn't really make sense to

00:07:39,740 --> 00:07:43,159
build it in a browser nevertheless it's

00:07:41,419 --> 00:07:44,809
very important to do that in terms of

00:07:43,159 --> 00:07:47,599
research because at the moment since

00:07:44,809 --> 00:07:49,430
nothing like an information flow

00:07:47,599 --> 00:07:52,729
tracking or data flow tracking system is

00:07:49,430 --> 00:07:55,729
built into the browser we can highlight

00:07:52,729 --> 00:07:58,519
such as filtration attempts a bunch of

00:07:55,729 --> 00:08:00,800
the drawbacks are as I said we have seen

00:07:58,519 --> 00:08:03,050
so many different ones but all of them

00:08:00,800 --> 00:08:05,180
introduced a massive amount of overhead

00:08:03,050 --> 00:08:07,159
given the browser wars that were going

00:08:05,180 --> 00:08:09,499
on a few years ago where we really

00:08:07,159 --> 00:08:12,169
squeezed out every millisecond that we

00:08:09,499 --> 00:08:14,240
possibly can know browser vendor is most

00:08:12,169 --> 00:08:16,729
likely willing to build something that

00:08:14,240 --> 00:08:19,159
adds such a big amount of overhead into

00:08:16,729 --> 00:08:22,360
a browser and the other problem I kind

00:08:19,159 --> 00:08:24,769
of touched on that already is that

00:08:22,360 --> 00:08:26,300
sometimes its imprecise so if we would

00:08:24,769 --> 00:08:28,009
only do data flow tracking we would not

00:08:26,300 --> 00:08:29,929
label everything and if we do

00:08:28,009 --> 00:08:32,180
information flow tracking and we run it

00:08:29,929 --> 00:08:33,680
for a long amount of time we might run

00:08:32,180 --> 00:08:35,930
into a problem which is commonly

00:08:33,680 --> 00:08:37,909
referred to as label creep which means

00:08:35,930 --> 00:08:43,310
that every value is labeled with the

00:08:37,909 --> 00:08:45,560
highest label in the lens so that leaves

00:08:43,310 --> 00:08:49,279
two research questions to me in that

00:08:45,560 --> 00:08:50,839
area can we reduce that overhead if we

00:08:49,279 --> 00:08:53,240
can that would be awesome and we can

00:08:50,839 --> 00:08:53,920
reconsider building something like that

00:08:53,240 --> 00:08:57,699
into the browser

00:08:53,920 --> 00:08:59,619
and can we improve the precision the

00:08:57,699 --> 00:09:02,889
next one I would like to quickly touch

00:08:59,619 --> 00:09:05,410
is using black lists or block lists

00:09:02,889 --> 00:09:07,749
right so we have done and we have seen

00:09:05,410 --> 00:09:11,139
and we're actually doing it very similar

00:09:07,749 --> 00:09:16,029
leave for tracking protection will rely

00:09:11,139 --> 00:09:18,189
on lists and whenever like in that case

00:09:16,029 --> 00:09:22,089
X will trader comm would be loaded and

00:09:18,189 --> 00:09:23,949
we compare the URL if it is if it

00:09:22,089 --> 00:09:25,779
appears in the block list and if so we

00:09:23,949 --> 00:09:26,679
don't let the screed execute at all

00:09:25,779 --> 00:09:32,589
right

00:09:26,679 --> 00:09:35,679
which is fine but the drawbacks here is

00:09:32,589 --> 00:09:38,350
it takes a lot a long time to actually

00:09:35,679 --> 00:09:40,859
generate those lists and there is also a

00:09:38,350 --> 00:09:45,040
long round-trip time before we actually

00:09:40,859 --> 00:09:47,290
can pull those lists and load them into

00:09:45,040 --> 00:09:49,269
the browser like I don't know exactly

00:09:47,290 --> 00:09:51,669
what is the time for disconnect then do

00:09:49,269 --> 00:09:54,129
you know how often we update that Steve

00:09:51,669 --> 00:09:57,939
might know but anyway it takes a long

00:09:54,129 --> 00:10:00,009
time what is interesting is what I'm

00:09:57,939 --> 00:10:02,410
interested is can we do better

00:10:00,009 --> 00:10:04,029
like for example could we build some

00:10:02,410 --> 00:10:06,939
heuristics in the browser that

00:10:04,029 --> 00:10:10,179
identifies if something is malicious and

00:10:06,939 --> 00:10:11,739
use some kind of crowdsource based

00:10:10,179 --> 00:10:14,529
approach where every browser would

00:10:11,739 --> 00:10:17,019
basically report back to Mozilla or to

00:10:14,529 --> 00:10:20,079
some other third party letting them know

00:10:17,019 --> 00:10:22,989
oh this one exhibits malicious behavior

00:10:20,079 --> 00:10:26,319
and then we update the blocking list on

00:10:22,989 --> 00:10:30,959
the fly which leads to the next research

00:10:26,319 --> 00:10:34,660
questions for you can we improve the

00:10:30,959 --> 00:10:38,049
classification and can we improve the

00:10:34,660 --> 00:10:40,029
round-trip time and then finally I have

00:10:38,049 --> 00:10:43,449
one more approach which I personally

00:10:40,029 --> 00:10:46,569
find very interesting and that is can we

00:10:43,449 --> 00:10:49,600
a strict access to the Dom itself right

00:10:46,569 --> 00:10:53,199
so we let all of them let all the

00:10:49,600 --> 00:10:54,789
scripts execute sorry but what we could

00:10:53,199 --> 00:10:58,419
do is YX will trader.com in that

00:10:54,789 --> 00:11:01,389
particular case we could allow it to

00:10:58,419 --> 00:11:04,869
access or create new nodes in the Dom

00:11:01,389 --> 00:11:06,669
but then not necessarily access all of

00:11:04,869 --> 00:11:07,600
the other nodes or restrict access to

00:11:06,669 --> 00:11:09,430
specific

00:11:07,600 --> 00:11:13,060
that we are very interested in for

00:11:09,430 --> 00:11:15,490
example we tae kwon mentioned that this

00:11:13,060 --> 00:11:17,980
morning for example we could start by

00:11:15,490 --> 00:11:20,920
not allowing access to form elements

00:11:17,980 --> 00:11:24,190
right so this is quite interesting and I

00:11:20,920 --> 00:11:26,920
see that we could do something like

00:11:24,190 --> 00:11:30,699
build some kind of rappers mediators

00:11:26,920 --> 00:11:32,410
around that or even establish new

00:11:30,699 --> 00:11:34,300
attributes and then based on those

00:11:32,410 --> 00:11:36,670
attributes like some kind of public

00:11:34,300 --> 00:11:38,800
shaming approach where they actually

00:11:36,670 --> 00:11:40,779
have to use those empty boots and

00:11:38,800 --> 00:11:42,970
otherwise we will block them so as you

00:11:40,779 --> 00:11:45,579
can see a lot of my idea well my ideas

00:11:42,970 --> 00:11:47,410
our ideas here overlap and they are not

00:11:45,579 --> 00:11:51,279
exclusive so maybe it is a combination

00:11:47,410 --> 00:11:54,130
of a view of those approaches and then

00:11:51,279 --> 00:11:56,079
finally to round all that up it's always

00:11:54,130 --> 00:11:58,180
good if we have data right if we can

00:11:56,079 --> 00:12:00,550
back all of that up with data all the

00:11:58,180 --> 00:12:03,220
decisions we make at Mozilla based on

00:12:00,550 --> 00:12:06,060
data and then evaluating so what I can

00:12:03,220 --> 00:12:09,190
offer is we build some of those

00:12:06,060 --> 00:12:13,300
mechanisms we run some studies on it and

00:12:09,190 --> 00:12:15,730
evaluate if it works we can do it to a

00:12:13,300 --> 00:12:22,509
certain percentage of our population get

00:12:15,730 --> 00:12:24,420
at the data and evaluate it the data we

00:12:22,509 --> 00:12:26,740
are interested in obviously is

00:12:24,420 --> 00:12:29,040
quantified a malicious behavior and

00:12:26,740 --> 00:12:33,069
quantify the breakage that we are

00:12:29,040 --> 00:12:36,189
expecting around all that so with that I

00:12:33,069 --> 00:12:38,500
would like to summarize real quick what

00:12:36,189 --> 00:12:41,439
we looked at and then hopefully we all

00:12:38,500 --> 00:12:43,959
agree that this is a problem well to

00:12:41,439 --> 00:12:45,610
give an attention I hopefully I can was

00:12:43,959 --> 00:12:49,170
able to convince you to actually look

00:12:45,610 --> 00:12:53,889
into some of those problems as a summary

00:12:49,170 --> 00:12:55,600
the threat is real it is happening there

00:12:53,889 --> 00:12:58,000
are a few approaches out there that

00:12:55,600 --> 00:13:00,610
could potentially prevent it one of them

00:12:58,000 --> 00:13:03,040
is information flow tracking using block

00:13:00,610 --> 00:13:05,620
lists or also establishing some kind of

00:13:03,040 --> 00:13:08,439
mediators around that I'm interested in

00:13:05,620 --> 00:13:11,259
all of the approaches but maybe most

00:13:08,439 --> 00:13:14,050
likely there are more this is a very

00:13:11,259 --> 00:13:16,449
high-level overview and I'm happy to

00:13:14,050 --> 00:13:19,839
talk more in detail about every single

00:13:16,449 --> 00:13:21,260
approach yeah and with that I hope we

00:13:19,839 --> 00:13:22,580
can work together and

00:13:21,260 --> 00:13:25,360
really prevent data exfiltration

00:13:22,580 --> 00:13:31,139
attempts in the browser

00:13:25,360 --> 00:13:31,139

YouTube URL: https://www.youtube.com/watch?v=fkQslGIpfP0


