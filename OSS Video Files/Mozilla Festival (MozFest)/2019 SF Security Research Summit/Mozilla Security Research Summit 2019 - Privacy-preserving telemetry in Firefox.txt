Title: Mozilla Security Research Summit 2019 - Privacy-preserving telemetry in Firefox
Publication date: 2019-06-24
Playlist: 2019 SF Security Research Summit
Description: 
	Henry Corrigan-Gibbs - Privacy-preserving telemetry in Firefox

Talk from the 2019 SF Security Research Summit (https://events.mozilla.org/moz2019securityresearchsummit). This event is part of the Security Engineering University Relationship Framework (SURF) initiative, which aims to increase collaboration between Mozilla and the academic community. We would like to leverage academic talent to help explore security and privacy research problems, and to strengthen Mozilla's ties to the academic community. Mozilla security engineers aim to actively participate in the research community through thesis supervision, collaborations, placements and Mozilla-hosted security summits. For more info see: https://surf.mozilla.org/

Slides: https://drive.google.com/open?id=17yeKAqlMX3X8Yw3HEPgKvOzYnT-MOi_r
Captions: 
	00:00:00,140 --> 00:00:03,600
great so yeah I'm really excited to be

00:00:02,490 --> 00:00:05,430
here to tell you about some of the work

00:00:03,600 --> 00:00:07,379
I've been doing with this awesome team

00:00:05,430 --> 00:00:08,970
at Mozilla of people whose names are on

00:00:07,379 --> 00:00:11,969
the slide and also Dan Bonet at Stanford

00:00:08,970 --> 00:00:14,099
and if you haven't worked with people at

00:00:11,969 --> 00:00:16,500
Mozilla let me just first plug the

00:00:14,099 --> 00:00:17,490
experience it's so much fun so I'm

00:00:16,500 --> 00:00:18,630
excited to tell you about some of the

00:00:17,490 --> 00:00:21,210
work we've been doing on on

00:00:18,630 --> 00:00:22,439
privacy-preserving telemetry so the

00:00:21,210 --> 00:00:23,580
running example that I want to use

00:00:22,439 --> 00:00:25,080
throughout this talk and this is

00:00:23,580 --> 00:00:28,199
actually what's being deployed and

00:00:25,080 --> 00:00:29,609
nightly is about collecting data on the

00:00:28,199 --> 00:00:30,990
effectiveness of the content blocking

00:00:29,609 --> 00:00:32,759
feature that Steve mentioned earlier

00:00:30,990 --> 00:00:34,710
today so if you've used Firefox you may

00:00:32,759 --> 00:00:36,090
have seen this purple shield indicating

00:00:34,710 --> 00:00:38,100
that content blocking is blocking some

00:00:36,090 --> 00:00:39,570
stuff on a webpage and what it tries to

00:00:38,100 --> 00:00:40,710
do is find these trackers like

00:00:39,570 --> 00:00:42,629
third-party cookies or these other

00:00:40,710 --> 00:00:44,280
tricky things that advertisers use to

00:00:42,629 --> 00:00:46,399
follow you around the web and content

00:00:44,280 --> 00:00:48,809
blocking prevents those from loading

00:00:46,399 --> 00:00:50,940
Mozilla engineers want to know things

00:00:48,809 --> 00:00:52,850
like how many times did content blocking

00:00:50,940 --> 00:00:55,199
block a track and cookie from

00:00:52,850 --> 00:00:57,480
facebook.com or some other origin like

00:00:55,199 --> 00:00:59,690
this and they want this data to debug

00:00:57,480 --> 00:01:02,399
the feature and make it work better yeah

00:00:59,690 --> 00:01:04,619
the way that vendors tend to collect

00:01:02,399 --> 00:01:06,600
this type of data today is by just

00:01:04,619 --> 00:01:08,220
asking their users to send this data to

00:01:06,600 --> 00:01:10,920
them directly so you could imagine that

00:01:08,220 --> 00:01:12,390
your Firefox browser would every day

00:01:10,920 --> 00:01:13,830
send back to Mozilla a number that

00:01:12,390 --> 00:01:15,299
indicates how many times you blocked a

00:01:13,830 --> 00:01:16,530
particular track and cookie and then

00:01:15,299 --> 00:01:19,409
Mozilla could just sum up these numbers

00:01:16,530 --> 00:01:21,479
on their server the problem with doing

00:01:19,409 --> 00:01:22,950
this is that Mozilla in this using this

00:01:21,479 --> 00:01:25,049
kind of system ends up becoming a single

00:01:22,950 --> 00:01:26,729
points of privacy failure and the system

00:01:25,049 --> 00:01:29,040
right someone can come and steal this

00:01:26,729 --> 00:01:30,360
data malicious insiders potentially

00:01:29,040 --> 00:01:32,430
could abuse it or governments could

00:01:30,360 --> 00:01:34,020
could come asking for it and this

00:01:32,430 --> 00:01:36,150
content blocking data is actually pretty

00:01:34,020 --> 00:01:37,979
sensitive because it the the trackers

00:01:36,150 --> 00:01:39,420
that you've seen indicate a lot about

00:01:37,979 --> 00:01:40,799
which websites you've been visiting so

00:01:39,420 --> 00:01:44,070
you wouldn't want to give this data to

00:01:40,799 --> 00:01:45,570
Mozilla just in the clear so this system

00:01:44,070 --> 00:01:46,799
called prio that the Dan and I have been

00:01:45,570 --> 00:01:48,840
working on for a number of years now

00:01:46,799 --> 00:01:51,570
essentially allows Mozilla to collect

00:01:48,840 --> 00:01:52,770
aggregate usage data about how content

00:01:51,570 --> 00:01:54,720
blocking is being used in the browser

00:01:52,770 --> 00:01:56,759
browser without actually having to see

00:01:54,720 --> 00:01:59,159
any individual users sensitive data in

00:01:56,759 --> 00:02:00,869
the clear there is a new cryptographic

00:01:59,159 --> 00:02:02,549
tool called the proof on secret shared

00:02:00,869 --> 00:02:03,960
data that makes the system possible and

00:02:02,549 --> 00:02:06,750
I'll describe a little bit how that

00:02:03,960 --> 00:02:08,489
works and as I mentioned this is the

00:02:06,750 --> 00:02:10,739
basis for Mozilla's new

00:02:08,489 --> 00:02:12,989
privacy-preserving telemetry system so

00:02:10,739 --> 00:02:13,270
this deployment is in a pilot phase so

00:02:12,989 --> 00:02:15,010
it's a

00:02:13,270 --> 00:02:17,080
labeled by default only in the nightly

00:02:15,010 --> 00:02:19,390
browser or the nightly build and I'll

00:02:17,080 --> 00:02:20,650
explain why that is but even so as far

00:02:19,390 --> 00:02:22,390
as I know this is the largest deployment

00:02:20,650 --> 00:02:24,010
ever of technology based on

00:02:22,390 --> 00:02:26,500
probabilistically checkable proofs in

00:02:24,010 --> 00:02:28,330
the wild so it's an example of you know

00:02:26,500 --> 00:02:30,760
a seemingly theoretical cryptographic

00:02:28,330 --> 00:02:32,170
object being used to solve a practical

00:02:30,760 --> 00:02:35,290
privacy problem so that's one of the

00:02:32,170 --> 00:02:37,150
reasons why I'm excited about this so

00:02:35,290 --> 00:02:39,070
let me dig into this example a little

00:02:37,150 --> 00:02:40,180
bit more to explain how we're using it

00:02:39,070 --> 00:02:43,330
how the system works and how we're using

00:02:40,180 --> 00:02:46,240
it so think of each Firefox instance or

00:02:43,330 --> 00:02:49,300
each user eye as having a bit X I for

00:02:46,240 --> 00:02:51,670
every origin and this bit will be set if

00:02:49,300 --> 00:02:53,940
the browser ever blocked a tracker from

00:02:51,670 --> 00:02:56,350
this origin I'll call it site comm and

00:02:53,940 --> 00:02:58,000
as I mentioned these bits are sensitive

00:02:56,350 --> 00:02:59,710
because they reveal information about

00:02:58,000 --> 00:03:02,740
about your browsing history if you block

00:02:59,710 --> 00:03:04,870
the tracker from Fox News Network comm

00:03:02,740 --> 00:03:06,790
maybe means you're visiting a certain

00:03:04,870 --> 00:03:09,280
type of web site right so you again

00:03:06,790 --> 00:03:10,930
these bits are very sensitive so then

00:03:09,280 --> 00:03:12,550
for each of this say 2,500 known

00:03:10,930 --> 00:03:14,980
trackers on this disconnect block list

00:03:12,550 --> 00:03:16,600
Mozilla wants the sum over all the users

00:03:14,980 --> 00:03:18,430
bits so Mozilla wants know things like

00:03:16,600 --> 00:03:20,380
how often did content blocking block a

00:03:18,430 --> 00:03:22,180
particular tracker from her 50 to their

00:03:20,380 --> 00:03:24,970
origin and this ends up just being a sum

00:03:22,180 --> 00:03:26,440
over these Excise and to keep things

00:03:24,970 --> 00:03:27,790
simple I'm just gonna focus on one

00:03:26,440 --> 00:03:29,680
tracker for now so I'll drop the

00:03:27,790 --> 00:03:31,720
superscript think of each browser as

00:03:29,680 --> 00:03:33,940
having a bit and Mozilla wants the sum

00:03:31,720 --> 00:03:35,350
over all these bits and think of

00:03:33,940 --> 00:03:38,950
millions millions or hundreds of

00:03:35,350 --> 00:03:40,950
millions of bits the way the system

00:03:38,950 --> 00:03:43,150
works at a high level is as follows

00:03:40,950 --> 00:03:45,880
there's going to be multiple servers

00:03:43,150 --> 00:03:47,770
could be 2 could be more than to run by

00:03:45,880 --> 00:03:49,959
different organizations so think of

00:03:47,770 --> 00:03:52,120
Mozilla is running one server in some

00:03:49,959 --> 00:03:54,040
second organization like Stanford or

00:03:52,120 --> 00:03:55,840
ACLU or some other nonprofit running the

00:03:54,040 --> 00:03:58,780
second server and I'll come back to this

00:03:55,840 --> 00:04:00,340
in a minute and the way the users

00:03:58,780 --> 00:04:03,130
interact with the servers is as follows

00:04:00,340 --> 00:04:04,900
each user takes their private bit and

00:04:03,130 --> 00:04:06,310
they split it into multiple pieces using

00:04:04,900 --> 00:04:08,470
a cryptographic secret sharing scheme

00:04:06,310 --> 00:04:10,060
I'll describe they send one of each of

00:04:08,470 --> 00:04:12,700
these encoded pieces to each of the

00:04:10,060 --> 00:04:14,050
servers and these encoding czar have the

00:04:12,700 --> 00:04:16,330
property that the two servers can

00:04:14,050 --> 00:04:17,590
jointly compute the aggregate statistic

00:04:16,330 --> 00:04:21,609
of interest which is the sum of these

00:04:17,590 --> 00:04:23,530
bits without learning anything else the

00:04:21,609 --> 00:04:25,030
high level security property that we get

00:04:23,530 --> 00:04:25,800
is that an attacker will have to

00:04:25,030 --> 00:04:27,330
compromise

00:04:25,800 --> 00:04:29,000
all of the servers to learn any

00:04:27,330 --> 00:04:31,830
individual users sensitive information

00:04:29,000 --> 00:04:34,020
so for example mozilla can't turn around

00:04:31,830 --> 00:04:35,190
and sell this data or can't lose this

00:04:34,020 --> 00:04:39,090
data in the data breach because they

00:04:35,190 --> 00:04:40,620
don't actually have it themselves to be

00:04:39,090 --> 00:04:43,199
useful the system needs to satisfy a

00:04:40,620 --> 00:04:45,180
bunch of sort of security and

00:04:43,199 --> 00:04:46,919
performance properties so it should be

00:04:45,180 --> 00:04:48,599
correct in the sense that if everyone

00:04:46,919 --> 00:04:49,919
does the right thing the server should

00:04:48,599 --> 00:04:52,710
get the right answer they should get the

00:04:49,919 --> 00:04:54,180
sum of the users bits you can also ask

00:04:52,710 --> 00:04:55,530
for a stronger property like the server

00:04:54,180 --> 00:04:56,940
that the system works even if some of

00:04:55,530 --> 00:04:59,879
the servers fail and so on but I'm not

00:04:56,940 --> 00:05:01,110
going to talk about how that works the

00:04:59,879 --> 00:05:03,060
privacy property is the one I just

00:05:01,110 --> 00:05:05,280
mentioned we want the system to provide

00:05:03,060 --> 00:05:08,400
security Inlet unless an attacker can

00:05:05,280 --> 00:05:09,780
compromise all the servers there's an

00:05:08,400 --> 00:05:11,250
extension to this you can ask for a

00:05:09,780 --> 00:05:12,840
property called differential privacy

00:05:11,250 --> 00:05:14,490
that you can actually layer on top of

00:05:12,840 --> 00:05:18,000
the system but and again a way I'm not

00:05:14,490 --> 00:05:20,129
going to describe the third property is

00:05:18,000 --> 00:05:22,289
what we call disruption resistance or do

00:05:20,129 --> 00:05:23,969
s resistance which is that the worst a

00:05:22,289 --> 00:05:25,409
malicious client should be able to do so

00:05:23,969 --> 00:05:27,569
a client that's going to try to corrupt

00:05:25,409 --> 00:05:29,849
the output of the system is to lie about

00:05:27,569 --> 00:05:31,259
the value of her input so the worst

00:05:29,849 --> 00:05:33,120
thing a client can do if we're

00:05:31,259 --> 00:05:35,639
collecting sums of bits a client can

00:05:33,120 --> 00:05:38,009
send a zero or a one but it can't send a

00:05:35,639 --> 00:05:41,460
negative five or two thousand or some

00:05:38,009 --> 00:05:42,900
weird value and the last property is

00:05:41,460 --> 00:05:44,849
efficiency so we want this thing to work

00:05:42,900 --> 00:05:48,029
at really large scale to handle say all

00:05:44,849 --> 00:05:49,500
of Firefox telemetry data at the rate at

00:05:48,029 --> 00:05:51,330
which Mozilla receives it from the

00:05:49,500 --> 00:05:53,270
browser so say millions of submissions

00:05:51,330 --> 00:05:55,409
per server per hour

00:05:53,270 --> 00:05:57,449
so there's a bunch of really nice

00:05:55,409 --> 00:05:58,800
systems for solving this type of private

00:05:57,449 --> 00:06:01,319
aggregation problem in the literature

00:05:58,800 --> 00:06:03,029
each of them as far as I know has to

00:06:01,319 --> 00:06:05,940
relax one of these four properties that

00:06:03,029 --> 00:06:07,800
we we get or that we want so for example

00:06:05,940 --> 00:06:09,270
their systems that provide a relaxed

00:06:07,800 --> 00:06:11,370
notion of correctness that give a very

00:06:09,270 --> 00:06:13,860
approximate answer to the aggregate

00:06:11,370 --> 00:06:15,719
statistic that you're interested in but

00:06:13,860 --> 00:06:17,219
for this content blocking data where we

00:06:15,719 --> 00:06:19,440
actually care about rare events

00:06:17,219 --> 00:06:21,029
potentially this the signal again

00:06:19,440 --> 00:06:23,340
essentially gets lost in the noise with

00:06:21,029 --> 00:06:25,680
these systems there are systems that use

00:06:23,340 --> 00:06:27,900
say relaxed privacy models so that rely

00:06:25,680 --> 00:06:30,029
on the security worth of the Tor network

00:06:27,900 --> 00:06:31,889
or some type of Hardware Enclave but

00:06:30,029 --> 00:06:33,150
again these types of assumptions and

00:06:31,889 --> 00:06:34,500
sort of external dependencies are not

00:06:33,150 --> 00:06:36,719
something that we wanted for the system

00:06:34,500 --> 00:06:38,610
and then you can also relax disruption

00:06:36,719 --> 00:06:39,360
resistance so not prevent provide us

00:06:38,610 --> 00:06:42,060
protection

00:06:39,360 --> 00:06:44,129
or you can use heavy purpose heavy

00:06:42,060 --> 00:06:45,479
general-purpose cryptographic tools but

00:06:44,129 --> 00:06:46,830
in practice again we don't want to have

00:06:45,479 --> 00:06:49,229
to make these relaxation Ziff we don't

00:06:46,830 --> 00:06:52,110
have to and it turns out that with these

00:06:49,229 --> 00:06:53,819
new tools you don't need to so I'll

00:06:52,110 --> 00:06:55,680
describe now in a very very high-level

00:06:53,819 --> 00:06:57,930
how the system works to give you sort of

00:06:55,680 --> 00:06:59,610
a flavor of what's going on and I think

00:06:57,930 --> 00:07:02,759
the easiest way to do this is with a

00:06:59,610 --> 00:07:04,800
strawman scheme that gets almost all the

00:07:02,759 --> 00:07:06,509
way there but doesn't protect against

00:07:04,800 --> 00:07:09,270
malicious clients and then I'll explain

00:07:06,509 --> 00:07:10,830
how we fix up the strawman scheme so

00:07:09,270 --> 00:07:12,240
think of again there can be two servers

00:07:10,830 --> 00:07:14,009
or more than two so I've shown now with

00:07:12,240 --> 00:07:16,050
three servers how the system works and

00:07:14,009 --> 00:07:17,789
each server starts out at the beginning

00:07:16,050 --> 00:07:20,430
of the day with an accumulator that's

00:07:17,789 --> 00:07:22,020
initialized to 0 and each client comes

00:07:20,430 --> 00:07:23,939
online one at a time so each browser

00:07:22,020 --> 00:07:26,460
comes online this browser has its secret

00:07:23,939 --> 00:07:28,860
bit as one and what it does is it splits

00:07:26,460 --> 00:07:30,419
its bit into three pieces using a

00:07:28,860 --> 00:07:32,550
standard cryptographic secret sharing

00:07:30,419 --> 00:07:34,800
scheme so it picks three random numbers

00:07:32,550 --> 00:07:37,500
modulo some big prime that sum to the

00:07:34,800 --> 00:07:38,909
value of its bit and it sends one of

00:07:37,500 --> 00:07:42,000
these shares to each of the three

00:07:38,909 --> 00:07:43,800
servers and the idea of this type of

00:07:42,000 --> 00:07:45,539
secret sharing scheme is that if an

00:07:43,800 --> 00:07:47,310
attacker doesn't compromise all the

00:07:45,539 --> 00:07:51,270
server's it doesn't learn anything about

00:07:47,310 --> 00:07:52,440
the clients private private bit so the

00:07:51,270 --> 00:07:53,969
servers that add these shares and their

00:07:52,440 --> 00:07:55,560
accumulators that client can go offline

00:07:53,969 --> 00:07:57,089
so it's a very simple one-shot

00:07:55,560 --> 00:07:59,610
interaction from the clients to the

00:07:57,089 --> 00:08:01,020
servers so the next client comes online

00:07:59,610 --> 00:08:03,360
it does the same thing it splits its

00:08:01,020 --> 00:08:05,009
data value into bit into shares sends

00:08:03,360 --> 00:08:06,839
one share to each of the servers the

00:08:05,009 --> 00:08:08,699
server Zagat aggregate these shares and

00:08:06,839 --> 00:08:09,990
so on for the rest of the million

00:08:08,699 --> 00:08:12,659
clients that are going to participate in

00:08:09,990 --> 00:08:14,370
the system so then at the end of the day

00:08:12,659 --> 00:08:15,750
what the server's can do is they can

00:08:14,370 --> 00:08:18,000
publish the contents of their

00:08:15,750 --> 00:08:20,009
accumulators and by summing up these

00:08:18,000 --> 00:08:21,599
three accumulator values all the

00:08:20,009 --> 00:08:23,729
randomness of the secret sharing will

00:08:21,599 --> 00:08:25,110
cancel out and the server's will be left

00:08:23,729 --> 00:08:27,990
just with the sum of the client's bits

00:08:25,110 --> 00:08:29,669
which is exactly what we wanted so for

00:08:27,990 --> 00:08:31,469
example Mozilla at the end of the day

00:08:29,669 --> 00:08:34,140
would learn that 15 phones blocked

00:08:31,469 --> 00:08:36,089
trackers from site comm but they won't

00:08:34,140 --> 00:08:40,199
learn which phones did so you won't leak

00:08:36,089 --> 00:08:41,729
who's visiting which web site so this

00:08:40,199 --> 00:08:43,110
straw man scheme it feels like it got us

00:08:41,729 --> 00:08:44,760
almost all the way there actually it's

00:08:43,110 --> 00:08:46,440
correct it provides this privacy

00:08:44,760 --> 00:08:48,420
property we wanted and it's efficient

00:08:46,440 --> 00:08:50,760
but the reason why you can't use it in

00:08:48,420 --> 00:08:52,800
practice is that it's vulnerable to a

00:08:50,760 --> 00:08:54,420
trivial denial of service attack

00:08:52,800 --> 00:08:56,070
and the way that works is you could

00:08:54,420 --> 00:08:57,720
imagine there's some evil ad network out

00:08:56,070 --> 00:08:59,610
there that wants to corrupt the

00:08:57,720 --> 00:09:01,320
statistics that Mozilla is computing at

00:08:59,610 --> 00:09:03,209
the end of the day and instead of

00:09:01,320 --> 00:09:04,980
sending a share of a zero one value a

00:09:03,209 --> 00:09:07,830
bit as it's supposed to it could send a

00:09:04,980 --> 00:09:10,110
share of a large value like 53 or 53

00:09:07,830 --> 00:09:11,760
million or negative 53 million there's

00:09:10,110 --> 00:09:13,829
sort of no no limit on how bad this

00:09:11,760 --> 00:09:15,959
could be and the problem is that the

00:09:13,829 --> 00:09:17,760
privacy property of the secret sharing

00:09:15,959 --> 00:09:20,160
scheme prevents the servers from

00:09:17,760 --> 00:09:21,750
noticing that this attack is underway so

00:09:20,160 --> 00:09:23,430
the servers will happily accept these

00:09:21,750 --> 00:09:26,130
garbage shares and at the end of the day

00:09:23,430 --> 00:09:27,510
they'll get a grossly overinflated value

00:09:26,130 --> 00:09:29,579
for this aggregate statistic that they

00:09:27,510 --> 00:09:31,019
want and even worse than that they don't

00:09:29,579 --> 00:09:33,209
they won't know which clients caused

00:09:31,019 --> 00:09:34,920
this to happen so this is a big problem

00:09:33,209 --> 00:09:38,760
and this is why you know you couldn't

00:09:34,920 --> 00:09:40,649
use this system as described you can fix

00:09:38,760 --> 00:09:42,510
this this problem using general-purpose

00:09:40,649 --> 00:09:44,670
cryptographic tools so you can use

00:09:42,510 --> 00:09:47,100
things like multi-party computation or

00:09:44,670 --> 00:09:48,570
traditional zero knowledge proof but

00:09:47,100 --> 00:09:51,480
these things end up being relatively

00:09:48,570 --> 00:09:53,010
expensive so instead what we do is we

00:09:51,480 --> 00:09:54,660
construct a new type of cryptographic

00:09:53,010 --> 00:09:57,300
tool call that proof on secret shared

00:09:54,660 --> 00:09:58,770
data that's much lighter weight and is

00:09:57,300 --> 00:10:02,339
essentially exactly the right tool for

00:09:58,770 --> 00:10:04,140
this job so I'm not gonna have time to

00:10:02,339 --> 00:10:05,700
describe in detail how this works but

00:10:04,140 --> 00:10:08,430
I'll describe conceptually how we

00:10:05,700 --> 00:10:12,660
implement this or essentially what the

00:10:08,430 --> 00:10:14,160
the the API is of this tool so the way

00:10:12,660 --> 00:10:16,290
we use proofs on secret shared data is

00:10:14,160 --> 00:10:18,000
as follows after the client sends its

00:10:16,290 --> 00:10:20,640
share to the servers so I've used these

00:10:18,000 --> 00:10:22,260
brackets to indicate shared values but

00:10:20,640 --> 00:10:24,750
before the servers actually accept these

00:10:22,260 --> 00:10:27,029
shares what the servers ask the client

00:10:24,750 --> 00:10:30,360
to do is in addition send them some type

00:10:27,029 --> 00:10:32,459
of proof and this proof essentially

00:10:30,360 --> 00:10:35,010
attests to the servers or proves to the

00:10:32,459 --> 00:10:38,010
servers that these shares of the exes if

00:10:35,010 --> 00:10:40,500
you added them up would end up we and

00:10:38,010 --> 00:10:41,970
somehow these X's encode a 0 or a 1 that

00:10:40,500 --> 00:10:44,339
these shares are well formed or well

00:10:41,970 --> 00:10:47,310
encoded and so what the service can do

00:10:44,339 --> 00:10:48,779
is by checking essentially by exchanging

00:10:47,310 --> 00:10:51,149
only a small number of bits of

00:10:48,779 --> 00:10:53,190
communications say 200 bytes the servers

00:10:51,149 --> 00:10:54,839
can check this proof and be convinced

00:10:53,190 --> 00:10:57,029
that if they added up their shares they

00:10:54,839 --> 00:11:00,870
would get a 0 or a 1 and not some huge

00:10:57,029 --> 00:11:02,640
value or some other malformed value so

00:11:00,870 --> 00:11:04,380
in essence this the server is using this

00:11:02,640 --> 00:11:06,089
proof on secret share data idea can

00:11:04,380 --> 00:11:06,720
detect and reject malformed client

00:11:06,089 --> 00:11:08,129
submissions

00:11:06,720 --> 00:11:09,420
before they have a chance to corrupt the

00:11:08,129 --> 00:11:11,639
aggregate statistics they're going to

00:11:09,420 --> 00:11:13,199
compute so for example in the in the

00:11:11,639 --> 00:11:15,149
Mozilla deployment each clients can

00:11:13,199 --> 00:11:17,910
influence the value of each statistic by

00:11:15,149 --> 00:11:19,379
sort of plus minus one at most and after

00:11:17,910 --> 00:11:20,879
checking the proofs then the servers do

00:11:19,379 --> 00:11:22,290
everything as before they'll accept

00:11:20,879 --> 00:11:25,319
these values and add them into there

00:11:22,290 --> 00:11:27,120
they're running accumulators so just to

00:11:25,319 --> 00:11:29,100
give you a sense of the performance

00:11:27,120 --> 00:11:31,350
improvement of this system over the

00:11:29,100 --> 00:11:34,500
prior techniques this is a chart showing

00:11:31,350 --> 00:11:35,639
on the x-axis is the number of origins

00:11:34,500 --> 00:11:39,060
that you're reporting data about

00:11:35,639 --> 00:11:40,829
increases it shows how the throughput of

00:11:39,060 --> 00:11:43,050
a prio cluster that's processing these

00:11:40,829 --> 00:11:45,149
submissions changes so this baseline

00:11:43,050 --> 00:11:46,709
scheme with the dashed red line is

00:11:45,149 --> 00:11:48,209
showing a scheme that provides no

00:11:46,709 --> 00:11:49,889
privacy whatsoever so this is just

00:11:48,209 --> 00:11:51,930
sending data over TLS to this cluster

00:11:49,889 --> 00:11:54,930
and the blue line is one that provides

00:11:51,930 --> 00:11:56,100
both privacy and disruption resistance

00:11:54,930 --> 00:11:58,589
using traditional zero knowledge proof

00:11:56,100 --> 00:12:00,269
and prio is somewhere in between so it's

00:11:58,589 --> 00:12:02,550
something like 50x faster than the

00:12:00,269 --> 00:12:05,730
traditional approach and it still may be

00:12:02,550 --> 00:12:07,589
10x shy of no privacy whatsoever but the

00:12:05,730 --> 00:12:09,930
point is with this optimization we're

00:12:07,589 --> 00:12:13,110
getting a huge savings over over the

00:12:09,930 --> 00:12:15,059
prior art so that's what I wanted to say

00:12:13,110 --> 00:12:16,500
about about the tools themselves now

00:12:15,059 --> 00:12:20,189
I'll mention just a little bit about how

00:12:16,500 --> 00:12:22,800
this deployment in Firefox is working so

00:12:20,189 --> 00:12:25,470
we wrote a C library called Lib prio

00:12:22,800 --> 00:12:29,009
that implements a subset of prio in C

00:12:25,470 --> 00:12:30,899
and this is built on top of NSS which is

00:12:29,009 --> 00:12:33,569
the the crypto library used in in most

00:12:30,899 --> 00:12:35,129
in Firefox and it's only around 4,000

00:12:33,569 --> 00:12:36,839
lines of code so actually the secret

00:12:35,129 --> 00:12:40,800
sharing stuff is not terribly

00:12:36,839 --> 00:12:42,990
complicated to to implement so since

00:12:40,800 --> 00:12:44,519
late last year we've been in a pilot

00:12:42,990 --> 00:12:46,620
deploy sort of pilot phase of this

00:12:44,519 --> 00:12:48,420
deployment where we've implemented this

00:12:46,620 --> 00:12:50,610
code in Firefox with this team at

00:12:48,420 --> 00:12:52,379
Mozilla and it's enabled by default only

00:12:50,610 --> 00:12:54,660
in the nightly build of the browser and

00:12:52,379 --> 00:12:56,490
the reason it's only running and nightly

00:12:54,660 --> 00:12:59,370
is because right now Mozilla is running

00:12:56,490 --> 00:13:01,050
all the prio servers so so conceivably

00:12:59,370 --> 00:13:02,910
if the Mozilla employees got together

00:13:01,050 --> 00:13:04,889
they could learn the the private data

00:13:02,910 --> 00:13:06,300
and so for that reason we're only

00:13:04,889 --> 00:13:08,790
collecting essentially non-sensitive

00:13:06,300 --> 00:13:11,610
test information for the moment and

00:13:08,790 --> 00:13:15,310
what's happening right now is a bunch of

00:13:11,610 --> 00:13:17,140
the folks on the both telemetry team and

00:13:15,310 --> 00:13:18,910
sort of security teams have been working

00:13:17,140 --> 00:13:20,800
to integrate this with the content

00:13:18,910 --> 00:13:21,970
blocking infrastructure and move the

00:13:20,800 --> 00:13:23,470
second server out to an external

00:13:21,970 --> 00:13:27,070
organization and that's happening

00:13:23,470 --> 00:13:29,020
literally right now the way this is

00:13:27,070 --> 00:13:30,130
getting deployed in Firefox I'll just

00:13:29,020 --> 00:13:31,990
say at a high level kind of looks like

00:13:30,130 --> 00:13:33,520
this in your browser right now are the

00:13:31,990 --> 00:13:36,070
two public keys for these two prio

00:13:33,520 --> 00:13:37,810
servers one secret key is held by

00:13:36,070 --> 00:13:41,290
Mozilla and one will be held by the

00:13:37,810 --> 00:13:42,370
second server and every 24 hours or

00:13:41,290 --> 00:13:45,100
whenever your browser sends this

00:13:42,370 --> 00:13:46,600
telemetry ping what will happen is or

00:13:45,100 --> 00:13:48,970
what happens now is your browser sends

00:13:46,600 --> 00:13:50,620
one packet encrypted to Mozilla and one

00:13:48,970 --> 00:13:54,370
packet encrypted to the second server

00:13:50,620 --> 00:13:56,200
and a nice consequence of the secret

00:13:54,370 --> 00:13:58,330
sharing scheme we're using is that these

00:13:56,200 --> 00:14:00,700
two packets have different sizes so the

00:13:58,330 --> 00:14:01,990
packet that you send to Mozilla grows

00:14:00,700 --> 00:14:03,400
with the amount of data that you're

00:14:01,990 --> 00:14:05,260
reporting so with a number of origins

00:14:03,400 --> 00:14:06,490
that you're reporting data about but the

00:14:05,260 --> 00:14:08,440
packet that you send to the second

00:14:06,490 --> 00:14:10,870
server is just an encrypted AES key so

00:14:08,440 --> 00:14:12,160
it's a constant size thing which is nice

00:14:10,870 --> 00:14:13,720
because it means that the bandwidth

00:14:12,160 --> 00:14:15,670
requirements on the second server are

00:14:13,720 --> 00:14:16,930
going to be relatively modest even if

00:14:15,670 --> 00:14:20,500
we're collecting relatively large

00:14:16,930 --> 00:14:21,790
amounts of data so if you're a Firefox

00:14:20,500 --> 00:14:23,200
user you can actually open up your

00:14:21,790 --> 00:14:26,560
browser and see these two public keys

00:14:23,200 --> 00:14:28,090
sitting inside your your config and if

00:14:26,560 --> 00:14:29,140
you're really enthusiastic about this I

00:14:28,090 --> 00:14:30,760
can actually show you how to generate

00:14:29,140 --> 00:14:32,950
some proofs on secret shared data and

00:14:30,760 --> 00:14:36,220
your browser console which at least to

00:14:32,950 --> 00:14:37,240
me is is kind of entertaining the other

00:14:36,220 --> 00:14:39,670
thing you can do is that if you're using

00:14:37,240 --> 00:14:41,830
nightly you can open up your telemetry

00:14:39,670 --> 00:14:43,540
window so go to about telemetry and see

00:14:41,830 --> 00:14:45,960
this telemetry data that we're going to

00:14:43,540 --> 00:14:48,040
be collecting through prio which

00:14:45,960 --> 00:14:49,600
essentially captures information about

00:14:48,040 --> 00:14:53,020
which trackers you've been blocking or

00:14:49,600 --> 00:14:54,310
your browser has been seeing a couple

00:14:53,020 --> 00:14:56,350
more things so if you if you want to

00:14:54,310 --> 00:14:57,880
know read a little bit more about the

00:14:56,350 --> 00:15:00,460
details of how this Mozilla integration

00:14:57,880 --> 00:15:02,290
has been going Rob and Anthony and Eric

00:15:00,460 --> 00:15:04,390
have a blog post from late last year and

00:15:02,290 --> 00:15:05,950
Chris has a blog post more recently

00:15:04,390 --> 00:15:09,870
about the integration with a content

00:15:05,950 --> 00:15:12,190
blocking infrastructure so the plan is

00:15:09,870 --> 00:15:15,340
initially to collect data on something

00:15:12,190 --> 00:15:17,560
like 2500 block list rules so this bit

00:15:15,340 --> 00:15:19,630
will indicate which of these 2500 rules

00:15:17,560 --> 00:15:21,760
have been triggered by content blocking

00:15:19,630 --> 00:15:22,990
in your browser and if you look at the

00:15:21,760 --> 00:15:24,140
block list this is this one from

00:15:22,990 --> 00:15:26,089
disconnected

00:15:24,140 --> 00:15:27,680
it's dimension they include things like

00:15:26,089 --> 00:15:28,760
Google Analytics and AdWords and

00:15:27,680 --> 00:15:32,450
Facebook and all sorts of other stuff

00:15:28,760 --> 00:15:33,709
including some things that that to me

00:15:32,450 --> 00:15:34,459
seem kind of relatively sensitive

00:15:33,709 --> 00:15:35,779
because they again

00:15:34,459 --> 00:15:38,810
capture information about your browsing

00:15:35,779 --> 00:15:40,459
history so for now the idea is to

00:15:38,810 --> 00:15:42,589
collect data on a relatively small

00:15:40,459 --> 00:15:44,510
fraction of page loads for a relatively

00:15:42,589 --> 00:15:46,459
small fraction of clients but the

00:15:44,510 --> 00:15:47,720
telemetry folks picked these numbers to

00:15:46,459 --> 00:15:49,220
be large enough so that they could get

00:15:47,720 --> 00:15:50,450
some sort of statistical significance

00:15:49,220 --> 00:15:53,510
for the the measurements that they're

00:15:50,450 --> 00:15:54,920
going to get out and in release we're

00:15:53,510 --> 00:15:56,720
gonna expect to process something like

00:15:54,920 --> 00:15:59,269
200 million telemetry submissions per

00:15:56,720 --> 00:16:00,200
day but in an initial pilot phase I

00:15:59,269 --> 00:16:00,980
think it's going to be more like a

00:16:00,200 --> 00:16:03,680
million a week

00:16:00,980 --> 00:16:05,690
and right so this amounts to something

00:16:03,680 --> 00:16:08,149
like tens of gigabytes per day of data

00:16:05,690 --> 00:16:12,260
to the second server so not huge amounts

00:16:08,149 --> 00:16:13,880
of data fortunately one thing I want to

00:16:12,260 --> 00:16:16,370
mention is that if you're interested in

00:16:13,880 --> 00:16:19,070
this type of work either from a research

00:16:16,370 --> 00:16:20,800
or implementation angle this stuff is

00:16:19,070 --> 00:16:23,000
all open source and there's a ton of

00:16:20,800 --> 00:16:25,339
ideas that we have that we haven't had

00:16:23,000 --> 00:16:27,170
time to implement in the browser so

00:16:25,339 --> 00:16:28,940
things like adding us adding support for

00:16:27,170 --> 00:16:31,399
computing not just sums over bits but

00:16:28,940 --> 00:16:32,990
sums over larger integer types there's a

00:16:31,399 --> 00:16:34,190
bunch of optimizations on the client the

00:16:32,990 --> 00:16:36,800
server side that we haven't implemented

00:16:34,190 --> 00:16:39,020
or how to add differential privacy to

00:16:36,800 --> 00:16:40,430
the system there's also just low-level

00:16:39,020 --> 00:16:42,079
kind of C hacking things to make the

00:16:40,430 --> 00:16:45,170
code more portable say on Windows and

00:16:42,079 --> 00:16:46,579
then in the next few months we're hoping

00:16:45,170 --> 00:16:49,970
to rewrite parts of this in rust

00:16:46,579 --> 00:16:52,100
actually Fraser found a bug a memory

00:16:49,970 --> 00:16:54,709
corruption error in Inlet prio already

00:16:52,100 --> 00:16:56,450
which kind of has been keeping me up at

00:16:54,709 --> 00:16:58,640
night so now I think we should probably

00:16:56,450 --> 00:17:00,950
move some of this code to rust and then

00:16:58,640 --> 00:17:02,600
also I think the folks at Mozilla are

00:17:00,950 --> 00:17:04,280
still looking for the right organization

00:17:02,600 --> 00:17:05,600
to serve as the second server so if

00:17:04,280 --> 00:17:07,300
you're interested or you know someone

00:17:05,600 --> 00:17:09,439
who might be interested in doing that

00:17:07,300 --> 00:17:11,360
please come talk to me or any of the

00:17:09,439 --> 00:17:12,890
Mozilla folks who are involved to me I

00:17:11,360 --> 00:17:15,949
think this is exciting because it's sort

00:17:12,890 --> 00:17:17,660
of one of the first attempts to run one

00:17:15,949 --> 00:17:20,720
of these multi-party protocols at large

00:17:17,660 --> 00:17:22,100
scale so it would be an exciting

00:17:20,720 --> 00:17:23,270
opportunity to get in on the ground

00:17:22,100 --> 00:17:24,740
floor of this kind of thing and I'm

00:17:23,270 --> 00:17:26,030
hoping that other other companies will

00:17:24,740 --> 00:17:29,120
pick up this type of technology in the

00:17:26,030 --> 00:17:30,470
future so just to wrap up so prio is

00:17:29,120 --> 00:17:33,380
this new system for privacy-preserving

00:17:30,470 --> 00:17:35,450
telemetry that's being used in Firefox

00:17:33,380 --> 00:17:37,160
to to collect data about the browser's

00:17:35,450 --> 00:17:39,020
content blocking feature and

00:17:37,160 --> 00:17:40,970
make it better and as I mentioned

00:17:39,020 --> 00:17:42,470
deployment is ongoing development is

00:17:40,970 --> 00:17:43,970
ongoing and please come talk to me or

00:17:42,470 --> 00:17:45,290
any of the other Mozilla folks who are

00:17:43,970 --> 00:17:47,240
who are active in this if you're

00:17:45,290 --> 00:17:50,150
interested in helping hello and the code

00:17:47,240 --> 00:17:53,050
and the paper and the bug are here

00:17:50,150 --> 00:17:53,050

YouTube URL: https://www.youtube.com/watch?v=w7AHAq-mU-M


