Title: OpenMP BoF Part 3 - Texas Instruments - SC14
Publication date: 2014-12-13
Playlist: SC14 OpenMP BOF and Booth Talks
Description: 
	Eric Stotzer, Texas Instruments, describes how TI is using OpenMP in embedded high performance processors for telecommunications.
Captions: 
	00:00:00,079 --> 00:00:08,429
ok so I am Eric starter i am with texas

00:00:05,009 --> 00:00:11,240
instruments and some of you may be

00:00:08,429 --> 00:00:14,610
asking texas instruments what kind of

00:00:11,240 --> 00:00:17,100
why are you here and so we've been

00:00:14,610 --> 00:00:20,010
developing high-performance processors

00:00:17,100 --> 00:00:22,410
for the embedded space for quite a while

00:00:20,010 --> 00:00:24,590
now this slide here is just giving you

00:00:22,410 --> 00:00:28,560
an example of where some of those

00:00:24,590 --> 00:00:30,660
applications spaces are really a lot of

00:00:28,560 --> 00:00:32,250
the processors that we're using in the

00:00:30,660 --> 00:00:34,620
HPC space have come from our

00:00:32,250 --> 00:00:37,200
telecommunications infrastructure space

00:00:34,620 --> 00:00:38,550
so when you're talking on your cell

00:00:37,200 --> 00:00:40,140
phone and you're out you're seeing all

00:00:38,550 --> 00:00:41,610
these antennas that are all over the

00:00:40,140 --> 00:00:43,050
place the bet at the bottom of those

00:00:41,610 --> 00:00:45,030
antennas are these things about base

00:00:43,050 --> 00:00:46,710
stations because they're there at the

00:00:45,030 --> 00:00:48,030
base of the antenna so you would of

00:00:46,710 --> 00:00:51,120
course call them a base station and

00:00:48,030 --> 00:00:52,590
inside there are a lot of DSPs doing a

00:00:51,120 --> 00:00:55,110
lot of specialized high performance

00:00:52,590 --> 00:00:58,170
computing and so we've tried to adapt

00:00:55,110 --> 00:00:59,719
those digital signal processors to the

00:00:58,170 --> 00:01:04,379
high-performance embedded space and

00:00:59,719 --> 00:01:05,580
what's made them well I'll could get to

00:01:04,379 --> 00:01:07,320
that here is that what's made them a

00:01:05,580 --> 00:01:11,340
little easier to use is that we've put

00:01:07,320 --> 00:01:13,020
arm cores on there to give a friendlier

00:01:11,340 --> 00:01:15,659
interface so that you can run a run

00:01:13,020 --> 00:01:18,689
something like Linux and then offload

00:01:15,659 --> 00:01:20,400
your code to the DSPs for signal

00:01:18,689 --> 00:01:22,860
processing and high-performance compute

00:01:20,400 --> 00:01:24,270
so we have a architecture that we call

00:01:22,860 --> 00:01:27,330
Keystone which is basically a

00:01:24,270 --> 00:01:30,299
system-on-chip architecture where we can

00:01:27,330 --> 00:01:32,909
put in arms and use peas and graphics

00:01:30,299 --> 00:01:35,159
processors and those what you're seeing

00:01:32,909 --> 00:01:38,250
on the left and on the right you have

00:01:35,159 --> 00:01:41,130
things that are specialized or hardened

00:01:38,250 --> 00:01:43,890
accelerators so one of the very first

00:01:41,130 --> 00:01:48,299
ones that we had there the first family

00:01:43,890 --> 00:01:51,630
was at that point DSP only and we called

00:01:48,299 --> 00:01:55,170
that keystone one and we worked with

00:01:51,630 --> 00:01:58,710
some people at looking at how you could

00:01:55,170 --> 00:02:01,530
use this for not traditional I guess

00:01:58,710 --> 00:02:03,990
signal processing stuff

00:02:01,530 --> 00:02:05,040
it was interesting we have eight DSPs on

00:02:03,990 --> 00:02:06,049
there we had single precision floating

00:02:05,040 --> 00:02:09,600
point double-precision floating-point

00:02:06,049 --> 00:02:12,270
and there were some research done by

00:02:09,600 --> 00:02:13,560
some people at kth where they started

00:02:12,270 --> 00:02:17,130
looking hey what if we were in linpack

00:02:13,560 --> 00:02:18,569
just on these tsps you know what kind of

00:02:17,130 --> 00:02:19,860
power and performance would we get

00:02:18,569 --> 00:02:21,780
because they were originally designed

00:02:19,860 --> 00:02:23,610
for embedded systems where power was

00:02:21,780 --> 00:02:26,489
important and they got some good numbers

00:02:23,610 --> 00:02:29,459
so this is sort of how we evolved into

00:02:26,489 --> 00:02:33,470
getting into this space at that point

00:02:29,459 --> 00:02:36,060
and still today you can buy these these

00:02:33,470 --> 00:02:37,920
boards that have lots of DSPs crammed on

00:02:36,060 --> 00:02:41,160
them and then it's there to book on a

00:02:37,920 --> 00:02:42,750
PCIe slot that you put them in but then

00:02:41,160 --> 00:02:44,190
we came out with ki sent to and this is

00:02:42,750 --> 00:02:45,780
the device that actually added the ARM

00:02:44,190 --> 00:02:49,530
processors on there so now you've got

00:02:45,780 --> 00:02:51,690
forearm a 15 processors along with the a

00:02:49,530 --> 00:02:53,670
DSPs there were some other things added

00:02:51,690 --> 00:02:56,819
there's an increase increases in some of

00:02:53,670 --> 00:02:58,290
the memory sizes and now this chip

00:02:56,819 --> 00:03:00,060
became even more interesting because you

00:02:58,290 --> 00:03:01,590
could be you can build a real system

00:03:00,060 --> 00:03:06,030
just based around this chip it's not a

00:03:01,590 --> 00:03:07,530
PCIe sort of chip and/or sfc what's also

00:03:06,030 --> 00:03:09,630
interesting is that the DSPs and the

00:03:07,530 --> 00:03:12,720
arms they all have access to the same

00:03:09,630 --> 00:03:14,730
shared memory so it's not all floating

00:03:12,720 --> 00:03:18,180
across a bus they can access the same

00:03:14,730 --> 00:03:20,100
memory so then vendors we started

00:03:18,180 --> 00:03:22,260
working with vendors uh people became

00:03:20,100 --> 00:03:25,079
interested so probably the one that

00:03:22,260 --> 00:03:27,269
might be most applicable to traditional

00:03:25,079 --> 00:03:29,820
HPC would be what's going on with HP and

00:03:27,269 --> 00:03:31,739
their moonshot system so they have a

00:03:29,820 --> 00:03:33,660
chat they have a cartridge now that they

00:03:31,739 --> 00:03:35,970
can plug in their system that is built

00:03:33,660 --> 00:03:39,090
around this SOC there's others there's

00:03:35,970 --> 00:03:41,060
brown dwarf which is more uses this a

00:03:39,090 --> 00:03:42,989
CTA chassis which is from

00:03:41,060 --> 00:03:44,850
telecommunication space but trying to

00:03:42,989 --> 00:03:46,829
adapt it to more of a general purpose

00:03:44,850 --> 00:03:49,590
computing environment there's also these

00:03:46,829 --> 00:03:52,370
little EVMS the TI cells that you can

00:03:49,590 --> 00:03:55,739
use if you want just want to evaluate it

00:03:52,370 --> 00:03:57,359
evm is an evaluation module so in the

00:03:55,739 --> 00:03:58,950
embedded world you know you're going to

00:03:57,359 --> 00:04:00,540
building on specialized stuff you can

00:03:58,950 --> 00:04:02,010
buy these little boards from TI do your

00:04:00,540 --> 00:04:06,420
software development and then build your

00:04:02,010 --> 00:04:07,680
hard work so they're called edms so so

00:04:06,420 --> 00:04:08,910
we looked at this like well this is very

00:04:07,680 --> 00:04:11,840
similar to

00:04:08,910 --> 00:04:14,250
scalable model for heterogeneous

00:04:11,840 --> 00:04:15,960
programming you can run NPI on the arms

00:04:14,250 --> 00:04:18,239
and when the process lands on the arm

00:04:15,960 --> 00:04:20,760
you can then offload the highly

00:04:18,239 --> 00:04:23,250
intensive parts to the DSPs using

00:04:20,760 --> 00:04:28,050
something like opencl or the openmp

00:04:23,250 --> 00:04:29,670
accelerator model so this is what we've

00:04:28,050 --> 00:04:33,320
been working on at TI is we've been

00:04:29,670 --> 00:04:36,630
working on the open mp4 auto support we

00:04:33,320 --> 00:04:39,060
use the like I just said we use the

00:04:36,630 --> 00:04:40,260
target regions too we're running all the

00:04:39,060 --> 00:04:41,790
code on the arm and then we use the

00:04:40,260 --> 00:04:47,220
target regions to offload code to the

00:04:41,790 --> 00:04:53,130
DSPs so currently this is where we're at

00:04:47,220 --> 00:04:54,870
we open in P 30 support was on is

00:04:53,130 --> 00:04:57,420
available on the device i showed you

00:04:54,870 --> 00:05:00,060
earlier keystone one that has just the

00:04:57,420 --> 00:05:02,820
eight DSPs so we run a bare metal

00:05:00,060 --> 00:05:04,350
implementation of openmp on the DSPs

00:05:02,820 --> 00:05:05,940
bare metal meaning there's no operating

00:05:04,350 --> 00:05:08,520
system where there are openmp runtime

00:05:05,940 --> 00:05:12,090
runs right on top some low-level API

00:05:08,520 --> 00:05:14,040
functions that we have for the DSPs then

00:05:12,090 --> 00:05:15,900
for Keystone to what we've done is we've

00:05:14,040 --> 00:05:17,910
taken that implementation of open and p

00:05:15,900 --> 00:05:22,020
and we've added the device constructs

00:05:17,910 --> 00:05:24,690
support for out of open and p4 oh so now

00:05:22,020 --> 00:05:27,510
you're running opening p on the arms and

00:05:24,690 --> 00:05:31,110
then you're offloading regions to the

00:05:27,510 --> 00:05:32,370
DSPs using the 400 constructs we're

00:05:31,110 --> 00:05:35,180
currently working on we're kind of

00:05:32,370 --> 00:05:38,850
skipping through on and just working on

00:05:35,180 --> 00:05:40,590
supporting for Toto completely and if

00:05:38,850 --> 00:05:42,600
you'd like to learn more or see some of

00:05:40,590 --> 00:05:45,300
these pieces of hardware that I've shown

00:05:42,600 --> 00:05:51,440
you then please come by the Texas

00:05:45,300 --> 00:05:51,440

YouTube URL: https://www.youtube.com/watch?v=_NMJkT-2IHM


