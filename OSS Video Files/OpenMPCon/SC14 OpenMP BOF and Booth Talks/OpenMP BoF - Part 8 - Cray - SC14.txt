Title: OpenMP BoF - Part 8 - Cray - SC14
Publication date: 2014-12-14
Playlist: SC14 OpenMP BOF and Booth Talks
Description: 
	James Beyer (Cray) gives status of OpenMP 4.0 in CCE. Presented at the OpenMP BoF at Supercomputing 14, November 2014, New Orleans.
Captions: 
	00:00:00,560 --> 00:00:05,069
alright so I didn't say cray obviously

00:00:03,929 --> 00:00:07,799
I'm from Korea if you look around you

00:00:05,069 --> 00:00:10,650
find it so I'm going to talk about where

00:00:07,799 --> 00:00:11,880
we are with open mp4 oh so I'm probably

00:00:10,650 --> 00:00:14,549
the only person up here who actually

00:00:11,880 --> 00:00:17,100
compiler that does open ACC it's kind of

00:00:14,549 --> 00:00:19,980
a dirty word for some people it's going

00:00:17,100 --> 00:00:21,810
to become apparent that it's not that

00:00:19,980 --> 00:00:23,160
bad so I have this statement up here

00:00:21,810 --> 00:00:26,099
because i'm actually going to be talking

00:00:23,160 --> 00:00:27,630
about stuff is not released and it may

00:00:26,099 --> 00:00:28,920
change and what we implement when we

00:00:27,630 --> 00:00:30,890
actually do release the compiler which

00:00:28,920 --> 00:00:35,460
will be out at the end late next year

00:00:30,890 --> 00:00:37,620
Louis camel skip over that so status the

00:00:35,460 --> 00:00:39,329
simdi directive so everybody thinks

00:00:37,620 --> 00:00:41,879
india is a great idea cray was probably

00:00:39,329 --> 00:00:45,420
the only company that didn't want to add

00:00:41,879 --> 00:00:47,129
Cindy to openmp with the way it

00:00:45,420 --> 00:00:49,890
direction we took was we actually add

00:00:47,129 --> 00:00:51,930
took the simdi directive as a hint we

00:00:49,890 --> 00:00:53,579
have had a prefer vector directive for a

00:00:51,930 --> 00:00:55,860
very long time that's what you're doing

00:00:53,579 --> 00:00:59,579
we put sim too young I'll Lupin for us

00:00:55,860 --> 00:01:03,229
if you put Cindy on it a function is an

00:00:59,579 --> 00:01:06,240
inline directive so you cannot build a

00:01:03,229 --> 00:01:08,220
sim d library with our compiler and

00:01:06,240 --> 00:01:10,020
until somebody proves to us that they

00:01:08,220 --> 00:01:14,310
need to do that they won't be able to do

00:01:10,020 --> 00:01:15,420
it skipping over 72 affinity affinity

00:01:14,310 --> 00:01:17,310
we've done some work there's a really

00:01:15,420 --> 00:01:19,320
good reason why OpenMP knees affinity

00:01:17,310 --> 00:01:20,970
then that's because every library under

00:01:19,320 --> 00:01:23,520
the Sun wants to have its own helper

00:01:20,970 --> 00:01:25,200
thread these days your MPI library has a

00:01:23,520 --> 00:01:28,860
helper three openmp wants to have a

00:01:25,200 --> 00:01:31,020
helper thread your this thread that

00:01:28,860 --> 00:01:33,150
thread the they all want helper threads

00:01:31,020 --> 00:01:35,820
will help her threads get in the way as

00:01:33,150 --> 00:01:37,710
soon as you have your system like the

00:01:35,820 --> 00:01:40,350
crate systems do where we actually will

00:01:37,710 --> 00:01:42,720
map your all your threads to a specific

00:01:40,350 --> 00:01:44,430
tour the helper threads get in the way

00:01:42,720 --> 00:01:48,119
and it messes up everything you can talk

00:01:44,430 --> 00:01:51,090
about with OpenMP affinity only the

00:01:48,119 --> 00:01:52,590
openmp threads get infinity maps given

00:01:51,090 --> 00:01:56,189
to them everybody else floats around

00:01:52,590 --> 00:01:58,170
unknown so that it gives us a way to

00:01:56,189 --> 00:02:00,390
give back the performance that people

00:01:58,170 --> 00:02:02,940
have lost when they try to use

00:02:00,390 --> 00:02:04,290
these a lot of their libraries I mean

00:02:02,940 --> 00:02:06,420
skip device constructs for a second and

00:02:04,290 --> 00:02:08,190
go down to you DRS we've started the UDR

00:02:06,420 --> 00:02:11,490
implementation we have a design for it

00:02:08,190 --> 00:02:13,200
it'll be done it's actually going to

00:02:11,490 --> 00:02:14,610
vast majority but will have to be done

00:02:13,200 --> 00:02:16,230
in the front end if you know we think

00:02:14,610 --> 00:02:17,610
about our compiler nothing has been done

00:02:16,230 --> 00:02:19,230
for openmp in the front end and our

00:02:17,610 --> 00:02:20,400
compiler before this is the first

00:02:19,230 --> 00:02:26,310
feature that will be done in the front

00:02:20,400 --> 00:02:27,390
end going back to device constructs we

00:02:26,310 --> 00:02:29,430
were literally built mapping the

00:02:27,390 --> 00:02:32,190
directives from OpenMP on to our open

00:02:29,430 --> 00:02:34,020
ACC architecture so everything inside

00:02:32,190 --> 00:02:35,700
our compiler as soon as it gets from the

00:02:34,020 --> 00:02:37,590
front end into the optimizer where we do

00:02:35,700 --> 00:02:40,050
all of our work it looks like open acc

00:02:37,590 --> 00:02:42,570
to us we have a bit tell us this openmp

00:02:40,050 --> 00:02:44,580
because there's a few minor changes but

00:02:42,570 --> 00:02:46,380
that's otherwise it maps directly onto

00:02:44,580 --> 00:02:48,030
it you can extract from that what that

00:02:46,380 --> 00:02:50,010
means for us anyways there's no

00:02:48,030 --> 00:02:52,800
difference between openmp and open a cc

00:02:50,010 --> 00:02:55,019
as far as the compiler is concerned we

00:02:52,800 --> 00:02:56,970
have a lot of work to do there you just

00:02:55,019 --> 00:02:58,350
gotten started if you're curious about

00:02:56,970 --> 00:02:59,489
what work we've accomplished you can

00:02:58,350 --> 00:03:02,459
come by our booth I'm not going to talk

00:02:59,489 --> 00:03:04,350
about it here because it's like 15

00:03:02,459 --> 00:03:06,269
slides to talk about mg if you want to

00:03:04,350 --> 00:03:07,860
talk about it come to our booth you

00:03:06,269 --> 00:03:10,920
can't miss this was a big science astray

00:03:07,860 --> 00:03:14,670
circling around in the sky we found some

00:03:10,920 --> 00:03:16,500
issues then that's what you can come

00:03:14,670 --> 00:03:17,790
talk to me well we actually talked about

00:03:16,500 --> 00:03:19,079
it in the subcommittee and in the

00:03:17,790 --> 00:03:21,269
language committee and we have an

00:03:19,079 --> 00:03:23,670
approach to solve that one issue that we

00:03:21,269 --> 00:03:28,190
found that was really scary at first and

00:03:23,670 --> 00:03:28,190

YouTube URL: https://www.youtube.com/watch?v=bbcfRVyDqFA


