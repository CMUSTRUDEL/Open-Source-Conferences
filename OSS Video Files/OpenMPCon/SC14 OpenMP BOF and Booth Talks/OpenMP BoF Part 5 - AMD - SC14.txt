Title: OpenMP BoF Part 5 - AMD - SC14
Publication date: 2014-12-14
Playlist: SC14 OpenMP BOF and Booth Talks
Description: 
	Guansong Zhang, AMD, describes how they are using OpenMP 4.0 to offload computations onto a GPU. Presented at Supercomputing 14, November 2014, New Orleans.
Captions: 
	00:00:00,000 --> 00:00:09,559
so my name is Gwen samjhana and I'm from

00:00:04,560 --> 00:00:15,599
md so like I think most of people know

00:00:09,559 --> 00:00:20,730
AMD is coming back to hpc but in terms

00:00:15,599 --> 00:00:24,779
of opp we are relatively new so tonight

00:00:20,730 --> 00:00:27,689
I wanted I like to share some of ideas

00:00:24,779 --> 00:00:33,780
and the sauce we had when we try to

00:00:27,689 --> 00:00:36,600
implement open T on our system lets the

00:00:33,780 --> 00:00:40,200
wooden I say our sister that means the

00:00:36,600 --> 00:00:42,809
GPU and a specifically we I want to say

00:00:40,200 --> 00:00:49,789
something about offloading the open p

00:00:42,809 --> 00:00:54,870
offloading model armed GPU and I put I

00:00:49,789 --> 00:00:58,289
mean a lot of people here know me AMD is

00:00:54,870 --> 00:01:01,020
new to open p but i'm not i spent like

00:00:58,289 --> 00:01:04,260
10 years more than 10 years in IBM and

00:01:01,020 --> 00:01:08,280
most of the time I when I was there I

00:01:04,260 --> 00:01:11,130
was working with open key so I put a

00:01:08,280 --> 00:01:14,460
disclaimer there i'm trying to say the

00:01:11,130 --> 00:01:17,640
ideas the opinions here some probably

00:01:14,460 --> 00:01:23,939
just from from the author may not be

00:01:17,640 --> 00:01:26,430
representing AMD and also have a grog

00:01:23,939 --> 00:01:34,380
schooner I think I saw him somewhere

00:01:26,430 --> 00:01:37,380
okay they're on the list so trying to ok

00:01:34,380 --> 00:01:39,570
so here is my some of my sauce why we

00:01:37,380 --> 00:01:41,610
come to open key I can make this really

00:01:39,570 --> 00:01:44,909
quick I think most people understand

00:01:41,610 --> 00:01:48,180
what I'm talking here now like this is a

00:01:44,909 --> 00:01:51,060
well-known industry standard and and I

00:01:48,180 --> 00:01:56,880
can list many names under this split

00:01:51,060 --> 00:01:59,250
like IBM Intel and cray there are there

00:01:56,880 --> 00:02:03,920
are many many of people like well

00:01:59,250 --> 00:02:06,840
vendors actually actively producing like

00:02:03,920 --> 00:02:11,540
developing open key compilers and it

00:02:06,840 --> 00:02:16,430
gave user wide choice for their

00:02:11,540 --> 00:02:18,590
competition need so this is the Wonder

00:02:16,430 --> 00:02:22,790
side the second bridge I want to say

00:02:18,590 --> 00:02:26,049
this is really about the open p user I

00:02:22,790 --> 00:02:29,390
think this is the best one of the best

00:02:26,049 --> 00:02:32,390
programming parallel programming model

00:02:29,390 --> 00:02:34,400
because it supports this what we call

00:02:32,390 --> 00:02:37,280
what I like to call this incremental

00:02:34,400 --> 00:02:39,260
parallel programming the idea there is

00:02:37,280 --> 00:02:41,859
just that you have a sequential program

00:02:39,260 --> 00:02:45,799
and then with one or two line of change

00:02:41,859 --> 00:02:49,040
then you you you code it become parallel

00:02:45,799 --> 00:02:53,480
I think you tell today in the booth

00:02:49,040 --> 00:02:57,049
wrong a very interesting demo they have

00:02:53,480 --> 00:03:00,680
to groove competing to show like how

00:02:57,049 --> 00:03:06,859
fast you can you can paralyze a code and

00:03:00,680 --> 00:03:10,340
you gotta like how many number like a 40

00:03:06,859 --> 00:03:15,079
times speedup and the post group use of

00:03:10,340 --> 00:03:20,530
MP and the third thing I want to say is

00:03:15,079 --> 00:03:27,620
this foundation for the full two

00:03:20,530 --> 00:03:30,440
developers if you work on the software

00:03:27,620 --> 00:03:33,949
tools you can you can actually do

00:03:30,440 --> 00:03:37,639
extensive analysis on the user code and

00:03:33,949 --> 00:03:41,659
find out the hot spot and then point

00:03:37,639 --> 00:03:44,239
ouch and give users a hint how to make

00:03:41,659 --> 00:03:47,659
them parallel and once you've you

00:03:44,239 --> 00:03:50,659
identify those hot spot using open p

00:03:47,659 --> 00:03:54,769
directive to changing them into to

00:03:50,659 --> 00:03:59,810
changing them into parallel is quite

00:03:54,769 --> 00:04:03,169
straightforward with that i want to

00:03:59,810 --> 00:04:08,000
mention the second point like why we

00:04:03,169 --> 00:04:11,449
want to do GPU i think the key point is

00:04:08,000 --> 00:04:13,849
that those two things you have you see

00:04:11,449 --> 00:04:16,820
many people in the downstairs in the

00:04:13,849 --> 00:04:19,549
hole in the in the exhibition hall show

00:04:16,820 --> 00:04:24,120
the computation power there i think in

00:04:19,549 --> 00:04:32,310
the end GPU will produce the best

00:04:24,120 --> 00:04:35,010
performance per dollar per watt so here

00:04:32,310 --> 00:04:38,520
I try to do an odd look of the GPU

00:04:35,010 --> 00:04:41,910
programming you can see I try to split

00:04:38,520 --> 00:04:44,880
split to the GPU programming into two

00:04:41,910 --> 00:04:48,540
kinds you can do externally explicit

00:04:44,880 --> 00:04:51,449
colonel developing or you can do

00:04:48,540 --> 00:04:55,470
implicit colonel developing because

00:04:51,449 --> 00:04:58,919
either way eventually you you want to

00:04:55,470 --> 00:05:02,240
use the some kind of Colonel running on

00:04:58,919 --> 00:05:05,130
the GPU and the in the in this slice

00:05:02,240 --> 00:05:10,830
which I am trying to save up some some

00:05:05,130 --> 00:05:13,889
some of my voice I lost it already like

00:05:10,830 --> 00:05:17,820
in this slide I'm trying to say the open

00:05:13,889 --> 00:05:22,289
p is one of the simple thing in the in

00:05:17,820 --> 00:05:26,250
the in the other category and maybe it

00:05:22,289 --> 00:05:28,620
may not produce the best fast program

00:05:26,250 --> 00:05:37,139
for you but it certainly or be the

00:05:28,620 --> 00:05:41,250
simplest so here is the summarized of

00:05:37,139 --> 00:05:45,289
the like highlights in my mind on on

00:05:41,250 --> 00:05:50,190
wide on the advantage and disadvantage

00:05:45,289 --> 00:05:55,919
open key had on the GPU system like GPU

00:05:50,190 --> 00:05:59,400
have the massive parallel course is not

00:05:55,919 --> 00:06:05,690
available on the regular cpu and not

00:05:59,400 --> 00:06:09,840
only that it also can paralyze your

00:06:05,690 --> 00:06:14,250
memory operation for this point like I

00:06:09,840 --> 00:06:20,070
think I used to work on cpu I I kind of

00:06:14,250 --> 00:06:23,729
have some some how to say this I have

00:06:20,070 --> 00:06:27,150
some experience on this I realize the

00:06:23,729 --> 00:06:31,919
GPU has this extra advantage on memory

00:06:27,150 --> 00:06:36,570
access but we also have issues of course

00:06:31,919 --> 00:06:38,190
like when we do the GPU programming

00:06:36,570 --> 00:06:41,970
right now we don't

00:06:38,190 --> 00:06:48,900
have enough tools like all the debugger

00:06:41,970 --> 00:06:52,380
compilers stuff and in profiler here is

00:06:48,900 --> 00:06:56,340
a trying to back up my point I still a

00:06:52,380 --> 00:06:59,340
slide from our sales team this is trying

00:06:56,340 --> 00:07:02,400
to compare Nvidia and AMD but that's not

00:06:59,340 --> 00:07:04,950
to the point if you are like a media

00:07:02,400 --> 00:07:09,060
team don't be offended like I just grab

00:07:04,950 --> 00:07:14,310
something and try to say the performance

00:07:09,060 --> 00:07:20,480
for wat and the performance like put our

00:07:14,310 --> 00:07:24,630
is GPU has unique advantage and also

00:07:20,480 --> 00:07:28,530
this page I also still somewhere this is

00:07:24,630 --> 00:07:30,990
Amy unique thing and I have to put it

00:07:28,530 --> 00:07:34,470
here and through this i want to say

00:07:30,990 --> 00:07:38,450
three things first when we have when you

00:07:34,470 --> 00:07:43,680
have the HSA device where you share the

00:07:38,450 --> 00:07:47,280
cpu and a CPU and the GPU memory all the

00:07:43,680 --> 00:07:52,320
pointers in utero region will work

00:07:47,280 --> 00:07:55,200
naturally second thing is the memory you

00:07:52,320 --> 00:07:58,380
from the GPU perspective you have more

00:07:55,200 --> 00:08:01,890
access of the memory and then the third

00:07:58,380 --> 00:08:05,460
thing is you have platform atomic so in

00:08:01,890 --> 00:08:11,090
the on the GPU side you can do atomic

00:08:05,460 --> 00:08:14,669
operation as well and here is a

00:08:11,090 --> 00:08:18,810
summarized of which md young and what we

00:08:14,669 --> 00:08:21,990
will do we we partner with we part away

00:08:18,810 --> 00:08:27,650
we had a pascal team at all partner we

00:08:21,990 --> 00:08:31,650
try to release the the intro compiler

00:08:27,650 --> 00:08:34,770
2014 14 and therefore the details people

00:08:31,650 --> 00:08:40,250
can visit md pose and we can talk it

00:08:34,770 --> 00:08:45,660
there we also participate the clown OEM

00:08:40,250 --> 00:08:49,400
effort and readjust mission and we want

00:08:45,660 --> 00:08:51,510
to release that on our HSA system and

00:08:49,400 --> 00:08:54,060
the final thing

00:08:51,510 --> 00:08:59,040
justice show some preliminary number on

00:08:54,060 --> 00:09:03,210
our faux pearl cards and this is trying

00:08:59,040 --> 00:09:06,990
to do a comparison between PGI compiler

00:09:03,210 --> 00:09:11,070
on our cars and Pascal compiler or cars

00:09:06,990 --> 00:09:18,230
and in the red is ours and the bigger

00:09:11,070 --> 00:09:18,230

YouTube URL: https://www.youtube.com/watch?v=Ho59N0VydMc


