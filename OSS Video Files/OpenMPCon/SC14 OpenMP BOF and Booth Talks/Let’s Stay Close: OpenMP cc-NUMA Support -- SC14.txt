Title: Letâ€™s Stay Close: OpenMP cc-NUMA Support -- SC14
Publication date: 2014-12-13
Playlist: SC14 OpenMP BOF and Booth Talks
Description: 
	Presented by Ruud van der Pas, Oracle, at SC14 November 19, 2014
Captions: 
	00:00:00,000 --> 00:00:06,000
well welcome good morning good morning

00:00:02,159 --> 00:00:08,099
to this talk in this talk I'm with the

00:00:06,000 --> 00:00:10,139
title let's stay close and I think the

00:00:08,099 --> 00:00:14,179
meaning of that title will get clear

00:00:10,139 --> 00:00:16,440
along the way i'll i'll show you the

00:00:14,179 --> 00:00:20,910
relationship between the stadium a

00:00:16,440 --> 00:00:22,619
hamburger and OpenMP and whenever ya

00:00:20,910 --> 00:00:27,359
when you interested feel feel free to

00:00:22,619 --> 00:00:31,230
take a seat so one thing that I like to

00:00:27,359 --> 00:00:33,020
do is look at the big picture and that

00:00:31,230 --> 00:00:36,120
can that can be an eye opener for

00:00:33,020 --> 00:00:38,660
example here for those of you that were

00:00:36,120 --> 00:00:41,910
not at the buff yesterday what is this

00:00:38,660 --> 00:00:45,210
this is a plastic soccer goal with the

00:00:41,910 --> 00:00:47,789
ball you might think and it is but when

00:00:45,210 --> 00:00:50,520
you see it in perspective you see

00:00:47,789 --> 00:00:52,860
something very different and that's

00:00:50,520 --> 00:00:56,550
exactly what I want to do I want to look

00:00:52,860 --> 00:00:59,940
at the big picture of a fairly complex

00:00:56,550 --> 00:01:01,379
topic thread affinity support in openmp

00:00:59,940 --> 00:01:03,449
that's what we're going to talk about

00:01:01,379 --> 00:01:05,640
but it'll be interleaved with some

00:01:03,449 --> 00:01:10,020
lightweight slides and but I'll also

00:01:05,640 --> 00:01:12,150
convey information I hope so here's the

00:01:10,020 --> 00:01:14,280
summary and then I'll go into the

00:01:12,150 --> 00:01:17,100
details and I know people will stop by

00:01:14,280 --> 00:01:18,360
and I hope hope they'll it's exciting

00:01:17,100 --> 00:01:20,970
enough for them to stay but here's the

00:01:18,360 --> 00:01:24,509
summary here's a stadium and in the

00:01:20,970 --> 00:01:26,460
stadium we have places and in terms of

00:01:24,509 --> 00:01:29,670
OpenMP that's where threads can execute

00:01:26,460 --> 00:01:32,009
and that's called the place and that's a

00:01:29,670 --> 00:01:33,770
very very important word to remember in

00:01:32,009 --> 00:01:37,890
this context it's called a place a place

00:01:33,770 --> 00:01:42,659
please take a seat the place is where a

00:01:37,890 --> 00:01:48,659
thread can potentially execute okay then

00:01:42,659 --> 00:01:51,740
let me see something now we have some

00:01:48,659 --> 00:01:54,869
sort of attraction in that same stadium

00:01:51,740 --> 00:01:59,630
like the food place where we would like

00:01:54,869 --> 00:02:02,579
to be and that's the hamburger place and

00:01:59,630 --> 00:02:04,740
what people often like to do is deal

00:02:02,579 --> 00:02:06,689
because the food the food will be there

00:02:04,740 --> 00:02:08,940
you got to go to the food and that's

00:02:06,689 --> 00:02:11,550
actually what you want to do with the

00:02:08,940 --> 00:02:13,920
affinity and the metaphors of course you

00:02:11,550 --> 00:02:16,950
got your data and the threads will

00:02:13,920 --> 00:02:18,930
move to that data so it's not the data

00:02:16,950 --> 00:02:21,780
moving it's the threads moving to where

00:02:18,930 --> 00:02:23,880
they where they are to be that's what

00:02:21,780 --> 00:02:26,069
you control through the affinity policy

00:02:23,880 --> 00:02:29,580
so the two things you you have to think

00:02:26,069 --> 00:02:33,690
about the places you have and where you

00:02:29,580 --> 00:02:36,120
want to have things being executed what

00:02:33,690 --> 00:02:38,959
are we worried about this why is this

00:02:36,120 --> 00:02:41,700
such an issue well let me show you a

00:02:38,959 --> 00:02:44,580
very simple template CC Numa

00:02:41,700 --> 00:02:46,590
architecture I show a to socket system

00:02:44,580 --> 00:02:49,019
here and we've got two processors or

00:02:46,590 --> 00:02:52,380
cores or sockets or whatever two things

00:02:49,019 --> 00:02:55,110
that X can execute and nowadays even

00:02:52,380 --> 00:02:57,150
even small to socket systems have this

00:02:55,110 --> 00:02:59,299
kind of architecture and that's being

00:02:57,150 --> 00:03:02,360
done for scalable memory performance

00:02:59,299 --> 00:03:05,430
that's called sisi new micash Kohan

00:03:02,360 --> 00:03:07,590
non-uniform memory access and the reason

00:03:05,430 --> 00:03:10,769
it's non uniform is that the memory is

00:03:07,590 --> 00:03:12,930
scattered over the system so each

00:03:10,769 --> 00:03:15,299
processor talks to a portion of the

00:03:12,930 --> 00:03:17,519
memory but thanks to a smart cache

00:03:15,299 --> 00:03:20,100
coherent interconnect you will see all

00:03:17,519 --> 00:03:22,980
of that memory you don't even know it's

00:03:20,100 --> 00:03:25,650
physically distributed you better know

00:03:22,980 --> 00:03:27,720
about it but it's hidden it's kind of

00:03:25,650 --> 00:03:30,299
transparent so to you disappears as one

00:03:27,720 --> 00:03:34,049
machine with a bunch of course and some

00:03:30,299 --> 00:03:37,370
memory the question is how to distribute

00:03:34,049 --> 00:03:41,130
the data so let's say the data is here

00:03:37,370 --> 00:03:43,799
well when I'm running here in this

00:03:41,130 --> 00:03:47,090
processor it's fine i have the fastest

00:03:43,799 --> 00:03:49,769
data access possible it's not so fine

00:03:47,090 --> 00:03:52,829
when I'm running over there and I gotta

00:03:49,769 --> 00:03:54,780
get my data that will slow me down and

00:03:52,829 --> 00:03:56,549
think about the parallel program may be

00:03:54,780 --> 00:03:58,200
a few threads are running here they'll

00:03:56,549 --> 00:04:00,090
get their data very quickly and some

00:03:58,200 --> 00:04:02,700
other threads are running there and you

00:04:00,090 --> 00:04:05,459
all end up waiting in that barrier for

00:04:02,700 --> 00:04:08,209
those threads to be finished so that's

00:04:05,459 --> 00:04:08,209
not a good situation

00:04:09,270 --> 00:04:15,240
it's key to remember that ultimately the

00:04:12,630 --> 00:04:18,270
operating system deciding where to place

00:04:15,240 --> 00:04:20,700
data it's in charge of that what we can

00:04:18,270 --> 00:04:22,770
do is tell it what we would like to do

00:04:20,700 --> 00:04:25,020
and there were several solutions

00:04:22,770 --> 00:04:27,000
available before it got into opening

00:04:25,020 --> 00:04:29,070
people at home but overall system

00:04:27,000 --> 00:04:31,020
specific okay so there are solutions

00:04:29,070 --> 00:04:33,210
today even if you don't have open at the

00:04:31,020 --> 00:04:35,250
photo though the beauty now is that you

00:04:33,210 --> 00:04:39,720
have a more standard way of expressing

00:04:35,250 --> 00:04:41,280
that affinity okay so what all pretty

00:04:39,720 --> 00:04:43,470
much all operating systems that I know

00:04:41,280 --> 00:04:44,880
about do is they allocate the data

00:04:43,470 --> 00:04:49,770
according to what it's called first

00:04:44,880 --> 00:04:52,500
touch so what does that mean well here's

00:04:49,770 --> 00:04:55,110
a little loop that loop initialize a

00:04:52,500 --> 00:04:57,360
vector 20 it's a very very simple

00:04:55,110 --> 00:04:59,610
operation don't don't get confused by

00:04:57,360 --> 00:05:02,040
the 100 that's just to make the diagram

00:04:59,610 --> 00:05:04,530
a little easier but you have a loop and

00:05:02,040 --> 00:05:06,540
you initialize data 20 a question to you

00:05:04,530 --> 00:05:09,120
could be where will the day to go well

00:05:06,540 --> 00:05:12,450
that depends on the policy the OS has

00:05:09,120 --> 00:05:14,550
and the first touch policy says the one

00:05:12,450 --> 00:05:17,340
who touches the data for the first time

00:05:14,550 --> 00:05:19,890
will own it so if I don't do anything

00:05:17,340 --> 00:05:23,070
somebody will execute this loop and will

00:05:19,890 --> 00:05:27,630
own the data from their own so what will

00:05:23,070 --> 00:05:29,550
happen is from there now this process of

00:05:27,630 --> 00:05:32,250
my own all the data that may or may not

00:05:29,550 --> 00:05:36,380
be what I want okay but that's first

00:05:32,250 --> 00:05:39,720
touch so they all end up in whoever is

00:05:36,380 --> 00:05:43,050
touch when I say touch it's technically

00:05:39,720 --> 00:05:45,990
it is defined as the thread setting up

00:05:43,050 --> 00:05:47,930
the tob entry the address mapping for

00:05:45,990 --> 00:05:51,120
the first time okay that's first touch

00:05:47,930 --> 00:05:54,270
okay there's a very easy solution to

00:05:51,120 --> 00:05:55,880
this simple problem here in this case i

00:05:54,270 --> 00:05:59,130
would like to run this on to threads

00:05:55,880 --> 00:06:03,450
because then both will initialize half

00:05:59,130 --> 00:06:05,820
of the array and likewise they'll have

00:06:03,450 --> 00:06:07,950
half of the data whether that's of

00:06:05,820 --> 00:06:09,780
benefit further on that's of course up

00:06:07,950 --> 00:06:12,060
to me to decide upon but that's what

00:06:09,780 --> 00:06:14,160
it's called first touch and this is how

00:06:12,060 --> 00:06:16,710
you take use it to your advantage now I

00:06:14,160 --> 00:06:20,419
got my day just scattered and the way

00:06:16,710 --> 00:06:22,950
you use it you look at your algorithm

00:06:20,419 --> 00:06:25,110
how does it access the data

00:06:22,950 --> 00:06:27,680
and they go back to the drawing board

00:06:25,110 --> 00:06:30,120
can I massage that first part

00:06:27,680 --> 00:06:33,030
initialization part so that it ends up

00:06:30,120 --> 00:06:35,670
where I'll need it later on that's kind

00:06:33,030 --> 00:06:38,430
of cumbersome and if it works it's fine

00:06:35,670 --> 00:06:40,410
but again now with the affinity we have

00:06:38,430 --> 00:06:44,990
a much better way to control this kind

00:06:40,410 --> 00:06:44,990
of stuff okay

00:06:45,129 --> 00:06:50,649
so here's a template you know multi-core

00:06:48,610 --> 00:06:53,259
architecture that's very common these

00:06:50,649 --> 00:06:55,330
days pretty much everybody has it of

00:06:53,259 --> 00:06:58,659
course the devil is in the details but

00:06:55,330 --> 00:07:02,319
at a sufficiently high level we see a

00:06:58,659 --> 00:07:05,889
bunch of course the core support one or

00:07:02,319 --> 00:07:08,319
more Hardware threads and there's a

00:07:05,889 --> 00:07:11,259
fairly complex memory here okay behind

00:07:08,319 --> 00:07:13,989
it I all collapsed that into memory but

00:07:11,259 --> 00:07:16,659
as caches in this level one level two

00:07:13,989 --> 00:07:18,629
shared caches private caches but

00:07:16,659 --> 00:07:21,669
ultimately there's some portion of

00:07:18,629 --> 00:07:25,659
memory to store your data and that's

00:07:21,669 --> 00:07:28,599
confined to sockets okay and then there

00:07:25,659 --> 00:07:30,550
is a global interconnect that glues it

00:07:28,599 --> 00:07:33,909
all together to one so you you need

00:07:30,550 --> 00:07:36,279
element a from your data the system will

00:07:33,909 --> 00:07:38,319
find it for you and as I said several

00:07:36,279 --> 00:07:42,879
times already you'd rather have it close

00:07:38,319 --> 00:07:45,429
to where you need it so to get good

00:07:42,879 --> 00:07:49,119
scalable performance it's absolutely

00:07:45,429 --> 00:07:50,829
critical that threads are there where

00:07:49,119 --> 00:07:52,779
the data is and as I said in the

00:07:50,829 --> 00:07:54,969
beginning the philosophy is the data is

00:07:52,779 --> 00:07:57,629
where it is and you move to your data

00:07:54,969 --> 00:08:01,499
because that's cheaper way cheaper and

00:07:57,629 --> 00:08:04,300
easier in a way so what are the benefits

00:08:01,499 --> 00:08:06,099
the big benefit is you don't no longer

00:08:04,300 --> 00:08:08,499
have all these remote references to your

00:08:06,099 --> 00:08:09,969
data elsewhere and especially on larger

00:08:08,499 --> 00:08:14,619
machines more than two sockets that

00:08:09,969 --> 00:08:16,360
really starts to play a role okay you

00:08:14,619 --> 00:08:17,860
maximize the bandwidth because now

00:08:16,360 --> 00:08:19,629
they're all reading at the same time

00:08:17,860 --> 00:08:21,459
from their memories so you get

00:08:19,629 --> 00:08:24,699
parallelism at the bandwidth level

00:08:21,459 --> 00:08:26,469
instead of all maximizing out that met

00:08:24,699 --> 00:08:28,749
the bandwidth of woonsocket or just a

00:08:26,469 --> 00:08:33,189
few you reduce the latency because

00:08:28,749 --> 00:08:34,779
you're closer to your data and yeah

00:08:33,189 --> 00:08:37,539
those are the two main benefits i would

00:08:34,779 --> 00:08:39,519
say now again the philosophy is data is

00:08:37,539 --> 00:08:42,459
wherever it may be we're not going to

00:08:39,519 --> 00:08:47,019
move data and threads move to where they

00:08:42,459 --> 00:08:49,300
need the data when that brings me to the

00:08:47,019 --> 00:08:52,360
two key concepts in the affinity control

00:08:49,300 --> 00:08:55,689
the place list and I showed you some

00:08:52,360 --> 00:08:57,870
kind of funny examples of places but

00:08:55,689 --> 00:08:59,970
we'll get more serious in a minute

00:08:57,870 --> 00:09:02,610
and on top of that there's the affinity

00:08:59,970 --> 00:09:05,760
policy that dictates where things should

00:09:02,610 --> 00:09:08,160
go where should they execute so keep in

00:09:05,760 --> 00:09:12,120
mind is a two-step kind of process so

00:09:08,160 --> 00:09:15,060
you got your place list and one way is a

00:09:12,120 --> 00:09:18,690
place consists of a set of numbers and

00:09:15,060 --> 00:09:21,720
those numbers correspond to what the

00:09:18,690 --> 00:09:25,290
hardware has so you need to know you

00:09:21,720 --> 00:09:27,390
need to have some way of telling okay

00:09:25,290 --> 00:09:30,240
that's thread 0 that's hardware thread

00:09:27,390 --> 00:09:31,950
for and that's on this core so that's

00:09:30,240 --> 00:09:33,990
what you need to know if you want to use

00:09:31,950 --> 00:09:36,960
these numbers but that's just the way it

00:09:33,990 --> 00:09:39,510
is I call that a scheduling unit a

00:09:36,960 --> 00:09:42,029
number means that's something that can

00:09:39,510 --> 00:09:43,680
run my thread it doesn't have to be

00:09:42,029 --> 00:09:46,320
hardware thread it could be basically

00:09:43,680 --> 00:09:50,670
could be anything it's it's some sort of

00:09:46,320 --> 00:09:53,460
execution vehicle and that's that's a

00:09:50,670 --> 00:09:57,360
place and again that's where take a seat

00:09:53,460 --> 00:09:59,610
please that's all right okay and this is

00:09:57,360 --> 00:10:01,589
a reminder that two books available for

00:09:59,610 --> 00:10:04,140
the most active participant so far you

00:10:01,589 --> 00:10:08,370
have not been very active so there's

00:10:04,140 --> 00:10:10,320
still opportunity so again scheduling

00:10:08,370 --> 00:10:13,830
unit where I thread can run excuse me I

00:10:10,320 --> 00:10:15,029
do need a bit of water and that could be

00:10:13,830 --> 00:10:22,320
a hardware threat could be something

00:10:15,029 --> 00:10:27,270
else now a single place could consist of

00:10:22,320 --> 00:10:30,720
a single number that's a single element

00:10:27,270 --> 00:10:33,150
place or that's usually not a good

00:10:30,720 --> 00:10:36,600
situation because it means the OS has no

00:10:33,150 --> 00:10:39,720
freedom it's generally better to have a

00:10:36,600 --> 00:10:42,120
place with multiple elements so the OS

00:10:39,720 --> 00:10:45,150
can choose have given more freedom if

00:10:42,120 --> 00:10:47,370
the hardware allows for that better take

00:10:45,150 --> 00:10:51,000
advantage of it because it's a you know

00:10:47,370 --> 00:10:53,190
time shared multi-user OS so the OS is

00:10:51,000 --> 00:10:55,830
running maybe something else so give it

00:10:53,190 --> 00:10:59,820
more freedom if you can so that's up to

00:10:55,830 --> 00:11:01,470
you to put that into the place list so

00:10:59,820 --> 00:11:04,589
let's not get more specific let's look

00:11:01,470 --> 00:11:08,640
at an example I'm talking here about an

00:11:04,589 --> 00:11:11,220
imaginary system with two sockets two

00:11:08,640 --> 00:11:11,660
cores per socket so in total we have

00:11:11,220 --> 00:11:15,710
four

00:11:11,660 --> 00:11:16,790
course and each core has four threats so

00:11:15,710 --> 00:11:18,980
we're talking about the sixteenth

00:11:16,790 --> 00:11:22,010
threaded system over fairly in standard

00:11:18,980 --> 00:11:27,170
configuration and here's the lower level

00:11:22,010 --> 00:11:30,290
picture and let me show you here the

00:11:27,170 --> 00:11:32,450
numbers and on your OS there should be

00:11:30,290 --> 00:11:35,270
commands ways to find out what these

00:11:32,450 --> 00:11:37,850
numbers are that's where the machine

00:11:35,270 --> 00:11:39,890
dependency comes into the picture so you

00:11:37,850 --> 00:11:42,530
got to know like okay hardware thread

00:11:39,890 --> 00:11:47,350
five is actually on suck at zero and

00:11:42,530 --> 00:11:53,780
call one here and there ways to do that

00:11:47,350 --> 00:11:55,640
sorry oh that's a proxy PU info will

00:11:53,780 --> 00:11:58,040
tell you and there's no more control

00:11:55,640 --> 00:12:01,340
okay or the question is how you find out

00:11:58,040 --> 00:12:02,930
on Linux yeah yeah / Brock is your

00:12:01,340 --> 00:12:06,590
friends that's where you'll find a lot

00:12:02,930 --> 00:12:09,410
of information all right okay so for

00:12:06,590 --> 00:12:12,020
example I could define a place and

00:12:09,410 --> 00:12:16,070
remember this is one place consists of

00:12:12,020 --> 00:12:19,850
four elements 0 1 2 3 and that means

00:12:16,070 --> 00:12:23,060
that I'm looking at this court so here

00:12:19,850 --> 00:12:26,330
I'm describing to the system that this

00:12:23,060 --> 00:12:30,110
place is consist of the four threads

00:12:26,330 --> 00:12:31,880
connected to that court okay and you get

00:12:30,110 --> 00:12:33,170
all the freedom you have you do whatever

00:12:31,880 --> 00:12:35,090
you like you can come up with very

00:12:33,170 --> 00:12:36,890
bizarre configurations you can come up

00:12:35,090 --> 00:12:39,820
with something that makes more sense

00:12:36,890 --> 00:12:42,500
it's up to you okay so you got a place

00:12:39,820 --> 00:12:44,960
okay and I suggest that in this case

00:12:42,500 --> 00:12:48,380
that defines all the threads in stock at

00:12:44,960 --> 00:12:50,810
zero core 0 and as you can imagine these

00:12:48,380 --> 00:12:54,500
lists get very long so there's a very

00:12:50,810 --> 00:12:57,860
convenient interval notation in this

00:12:54,500 --> 00:13:00,770
case 0 colon 401 and you got to know

00:12:57,860 --> 00:13:02,540
that this is the starting number the

00:13:00,770 --> 00:13:06,170
tricky part is a little bit this is the

00:13:02,540 --> 00:13:09,460
account not the last element so I want

00:13:06,170 --> 00:13:13,700
to have four numbers starting with 0 and

00:13:09,460 --> 00:13:16,880
an increment of 1 0 1 2 3 okay so that's

00:13:13,700 --> 00:13:19,610
how I anyway and I i can tell you you'll

00:13:16,880 --> 00:13:23,750
be using this all the time because these

00:13:19,610 --> 00:13:24,830
this get really long okay so key to

00:13:23,750 --> 00:13:26,570
remember the

00:13:24,830 --> 00:13:29,150
numbers within the place they don't

00:13:26,570 --> 00:13:32,300
matter that's the freedom again you give

00:13:29,150 --> 00:13:33,800
to the scheduler pick one and it can

00:13:32,300 --> 00:13:36,050
hopefully take advantage of that lets

00:13:33,800 --> 00:13:39,530
you take advantage of that so in terms

00:13:36,050 --> 00:13:44,240
of a place 0 1 2 3 is the same as 3 to

00:13:39,530 --> 00:13:46,100
10 doesn't matter and the ideas of

00:13:44,240 --> 00:13:48,050
course that that's like at that level it

00:13:46,100 --> 00:13:52,160
doesn't matter for performance which one

00:13:48,050 --> 00:13:56,560
you select ok now the place list as you

00:13:52,160 --> 00:14:00,380
can imagine consists of a list of places

00:13:56,560 --> 00:14:03,290
ok so this is a place list consisting of

00:14:00,380 --> 00:14:09,620
two places and each place in this case

00:14:03,290 --> 00:14:14,780
has four elements now here the order

00:14:09,620 --> 00:14:16,730
does matter so I need to stress that so

00:14:14,780 --> 00:14:20,630
and there's a very good reason why the

00:14:16,730 --> 00:14:23,870
order matters because the policy that

00:14:20,630 --> 00:14:26,600
i'm going to apply is is applicable at

00:14:23,870 --> 00:14:29,870
the level of places and i want to talk

00:14:26,600 --> 00:14:32,090
about things like spread and close well

00:14:29,870 --> 00:14:34,070
what does close mean that means that the

00:14:32,090 --> 00:14:38,690
order starts to matter so keep that in

00:14:34,070 --> 00:14:43,460
mind there the order matters ok so this

00:14:38,690 --> 00:14:45,800
place list is different ok i reversed

00:14:43,460 --> 00:14:51,050
the two places not a big deal i just

00:14:45,800 --> 00:14:53,270
need to emphasize that so and you set

00:14:51,050 --> 00:14:54,590
that in OpenMP through OMP on the school

00:14:53,270 --> 00:15:00,020
places that's an environment variable

00:14:54,590 --> 00:15:02,210
that defines your places ok so you use

00:15:00,020 --> 00:15:04,550
the shell syntax that you're you know

00:15:02,210 --> 00:15:06,560
you like and you set this one in this

00:15:04,550 --> 00:15:08,780
case to this so I now I have two places

00:15:06,560 --> 00:15:12,020
again each consisting of four elements

00:15:08,780 --> 00:15:16,390
ok and again the interval notation

00:15:12,020 --> 00:15:19,430
applies to this as well so I can do this

00:15:16,390 --> 00:15:20,750
ok actually I could go a little bit

00:15:19,430 --> 00:15:24,920
further but it gets a little bit

00:15:20,750 --> 00:15:28,490
mind-boggling they're so so I got again

00:15:24,920 --> 00:15:34,190
I see some puzzled faces syntax starting

00:15:28,490 --> 00:15:36,890
number 0 count so 0 1 2 3 4 next one

00:15:34,190 --> 00:15:38,329
eight nine ten eleven because again this

00:15:36,890 --> 00:15:42,019
is the count

00:15:38,329 --> 00:15:43,850
we destroyed the increment okay that's

00:15:42,019 --> 00:15:45,799
why I stress that earlier on that's like

00:15:43,850 --> 00:15:47,179
okay don't make a mistake there you'll

00:15:45,799 --> 00:15:50,389
have a different place less than you

00:15:47,179 --> 00:15:54,259
think you have it may work but not the

00:15:50,389 --> 00:15:56,540
way they drink up now I like this as

00:15:54,259 --> 00:16:00,230
much as I like it there's a more

00:15:56,540 --> 00:16:04,489
convenient way then they called abstract

00:16:00,230 --> 00:16:08,119
names so you can just say my places are

00:16:04,489 --> 00:16:11,480
all the sockets in the system or all the

00:16:08,119 --> 00:16:13,339
course now lower Kenya larity or all the

00:16:11,480 --> 00:16:14,989
threads in the system so you don't have

00:16:13,339 --> 00:16:17,799
to worry about numbers it's more

00:16:14,989 --> 00:16:21,049
portable definitely more portable and

00:16:17,799 --> 00:16:24,350
all you do is you say OMP places equals

00:16:21,049 --> 00:16:29,329
course and the system will figure it out

00:16:24,350 --> 00:16:32,779
for you okay you can even say well but I

00:16:29,329 --> 00:16:35,089
only want you to use for course that

00:16:32,779 --> 00:16:37,970
gives a certain freedom that you may or

00:16:35,089 --> 00:16:39,829
may not like okay if you want to have

00:16:37,970 --> 00:16:43,970
full control use the numbers if you're

00:16:39,829 --> 00:16:47,899
okay well pick some some course that's

00:16:43,970 --> 00:16:49,819
fine the system dependent system

00:16:47,899 --> 00:16:53,480
dependent there's an environment

00:16:49,819 --> 00:16:56,059
variable which I now have to cite OMP

00:16:53,480 --> 00:16:59,259
underscore display underscore env

00:16:56,059 --> 00:17:02,569
environment that will show you yep

00:16:59,259 --> 00:17:05,659
strongly recommend it to use okay all

00:17:02,569 --> 00:17:07,459
right and an implementation is free to

00:17:05,659 --> 00:17:09,230
add names to it these have to be

00:17:07,459 --> 00:17:11,389
supported if you're compliant with photo

00:17:09,230 --> 00:17:13,429
out these have to be supported if you

00:17:11,389 --> 00:17:15,769
feel like this doesn't cover my hardware

00:17:13,429 --> 00:17:17,179
all the way you can add names to it but

00:17:15,769 --> 00:17:19,939
of course from that moment on you lose

00:17:17,179 --> 00:17:22,399
portability fine i think that's a very

00:17:19,939 --> 00:17:25,519
acceptable thing so let's take an

00:17:22,399 --> 00:17:27,769
example i said oh NP places equals

00:17:25,519 --> 00:17:34,120
course in my imaginary architecture

00:17:27,769 --> 00:17:37,010
that's the same as this again or the

00:17:34,120 --> 00:17:38,419
interval notation okay well pick

00:17:37,010 --> 00:17:40,460
whatever you like and of course in this

00:17:38,419 --> 00:17:42,350
case you would definitely go to to use

00:17:40,460 --> 00:17:46,520
course you know why make it harder than

00:17:42,350 --> 00:17:48,440
then it is all right and the

00:17:46,520 --> 00:17:51,110
mind-boggling thing is you can apply the

00:17:48,440 --> 00:17:52,070
interval notations at the place level so

00:17:51,110 --> 00:17:55,970
i can repeat

00:17:52,070 --> 00:17:57,980
places I know I'm already running out of

00:17:55,970 --> 00:17:59,360
time which I conveniently ignore I just

00:17:57,980 --> 00:18:02,630
hope we have enough disk space in the

00:17:59,360 --> 00:18:05,150
camera so this is the same thing now

00:18:02,630 --> 00:18:07,780
this one is repeat this means for places

00:18:05,150 --> 00:18:10,190
and each value is incremented by four

00:18:07,780 --> 00:18:12,770
you know you probably have to look at it

00:18:10,190 --> 00:18:14,630
once or maybe twice or three times to

00:18:12,770 --> 00:18:18,380
realize it's the same but it is the same

00:18:14,630 --> 00:18:21,080
so it's a very compact notation okay so

00:18:18,380 --> 00:18:22,730
now we have defined the places this

00:18:21,080 --> 00:18:25,100
tells the system where we can execute

00:18:22,730 --> 00:18:27,440
our threads time to tell it how to

00:18:25,100 --> 00:18:30,530
distribute the threads over the system

00:18:27,440 --> 00:18:34,580
that's the affinity policy and here I'm

00:18:30,530 --> 00:18:38,810
back again with my stadium so we have

00:18:34,580 --> 00:18:41,390
maybe 0 that's the field place it could

00:18:38,810 --> 00:18:43,580
be some cheap place it could be a

00:18:41,390 --> 00:18:46,430
balcony place it could be in a legal

00:18:43,580 --> 00:18:49,100
place on the roof and of course there's

00:18:46,430 --> 00:18:52,120
our hamburger place and what we want to

00:18:49,100 --> 00:18:54,980
do is we want to map the threads onto

00:18:52,120 --> 00:19:00,410
whatever we want ok that's your next

00:18:54,980 --> 00:19:02,810
choice to make so the affinity policy

00:19:00,410 --> 00:19:08,180
tells the system out of all these places

00:19:02,810 --> 00:19:11,840
what to use and how ok so I just said

00:19:08,180 --> 00:19:16,400
and you do that in a symbolic way there

00:19:11,840 --> 00:19:19,070
are three key words master close or

00:19:16,400 --> 00:19:21,800
spread and by the way I'm not sure this

00:19:19,070 --> 00:19:24,200
is on the slides this applies to every

00:19:21,800 --> 00:19:27,020
parallel region so on a perp I should

00:19:24,200 --> 00:19:29,150
taper parallel region basis so you say

00:19:27,020 --> 00:19:30,680
at this level I want you to use this

00:19:29,150 --> 00:19:32,750
policy and maybe the next level a

00:19:30,680 --> 00:19:34,670
different policy so it works very well

00:19:32,750 --> 00:19:36,800
with nested parallelism for example I

00:19:34,670 --> 00:19:39,650
then put it on slides but I definitely

00:19:36,800 --> 00:19:43,700
should have done so again each parallel

00:19:39,650 --> 00:19:45,800
region has that policy ok so i'll stick

00:19:43,700 --> 00:19:49,120
with like one level here but again you

00:19:45,800 --> 00:19:52,220
can nest these things and and binding is

00:19:49,120 --> 00:19:55,190
implied what is binding mean that means

00:19:52,220 --> 00:19:57,590
the threat won't move once it has been

00:19:55,190 --> 00:19:59,030
assigned to ultimately you will go on to

00:19:57,590 --> 00:20:02,750
one of those low-level numbers for you

00:19:59,030 --> 00:20:05,000
and it'll stay there for the duration of

00:20:02,750 --> 00:20:06,620
that parallel region and that makes

00:20:05,000 --> 00:20:08,360
sense because it means you stay close to

00:20:06,620 --> 00:20:11,150
your data you don't move away after all

00:20:08,360 --> 00:20:12,860
ok that's the runt of the question is

00:20:11,150 --> 00:20:17,600
how do you guarantee that that's the

00:20:12,860 --> 00:20:18,860
runtime system doing that for you ok so

00:20:17,600 --> 00:20:20,720
you don't have to worry I know there's

00:20:18,860 --> 00:20:24,670
like a low-level API is for binding

00:20:20,720 --> 00:20:24,670
that's done for you ok

00:20:25,840 --> 00:20:32,230
right the common here is that the OS and

00:20:29,460 --> 00:20:33,580
the summer wes's or most of us are

00:20:32,230 --> 00:20:35,590
fairly liberal because they think they

00:20:33,580 --> 00:20:37,809
know better than you do here we take

00:20:35,590 --> 00:20:39,549
control and the runtime system will do

00:20:37,809 --> 00:20:42,340
that for us which is really nice I'd

00:20:39,549 --> 00:20:46,960
really like that yeah so the binding is

00:20:42,340 --> 00:20:50,529
implied so some policies this is the

00:20:46,960 --> 00:20:52,240
master policy I've got the master thread

00:20:50,529 --> 00:20:54,570
and we all want to be very close to that

00:20:52,240 --> 00:20:58,270
master fit all right that's one policy

00:20:54,570 --> 00:21:00,070
then there's the clothes policy where we

00:20:58,270 --> 00:21:02,860
all want to be nice and cozy very close

00:21:00,070 --> 00:21:04,570
to the master said oh sorry going to be

00:21:02,860 --> 00:21:07,360
nice and cozy alter that master fed

00:21:04,570 --> 00:21:11,770
somewhere there and there's the spread

00:21:07,360 --> 00:21:14,020
policy where we all want to be kind of

00:21:11,770 --> 00:21:16,960
spread out relative to the master said

00:21:14,020 --> 00:21:18,669
okay and that of course has pros and

00:21:16,960 --> 00:21:21,190
cons it depends on your application and

00:21:18,669 --> 00:21:24,309
keep in mind you do this on a per

00:21:21,190 --> 00:21:26,200
parallel region basis so you can really

00:21:24,309 --> 00:21:28,750
tailor it to whatever you're doing there

00:21:26,200 --> 00:21:30,460
and it can show it it'll change it can

00:21:28,750 --> 00:21:32,320
you can change it like okay in this part

00:21:30,460 --> 00:21:33,850
of my computation I want to have it like

00:21:32,320 --> 00:21:36,100
this and here won't it like that that

00:21:33,850 --> 00:21:38,230
that's fine that'll work the one thing

00:21:36,100 --> 00:21:40,960
that doesn't change is your place list

00:21:38,230 --> 00:21:44,860
the place list is set once and for all

00:21:40,960 --> 00:21:46,059
okay but the policy is adapted all right

00:21:44,860 --> 00:21:48,070
so you do that through another

00:21:46,059 --> 00:21:51,940
environment variable pro condos combined

00:21:48,070 --> 00:21:55,140
and here's an example I want to have the

00:21:51,940 --> 00:21:57,970
first level threads to be spread out and

00:21:55,140 --> 00:22:01,230
then the second level if any will be

00:21:57,970 --> 00:22:01,230
closed okay

00:22:01,539 --> 00:22:07,059
if you like you can do this so this is

00:22:04,179 --> 00:22:08,649
for all parallel regions as with every

00:22:07,059 --> 00:22:10,539
environment variable is kind of globally

00:22:08,649 --> 00:22:12,999
applicable you can do it on a per

00:22:10,539 --> 00:22:18,609
parallel region basis by using the proc

00:22:12,999 --> 00:22:20,919
bind clause that mix and match okay so

00:22:18,609 --> 00:22:23,200
the place list defines what's available

00:22:20,919 --> 00:22:25,119
to wrap it up for the duration of the

00:22:23,200 --> 00:22:28,299
program the affinity policy defines

00:22:25,119 --> 00:22:30,159
where threads go okay and let me finish

00:22:28,299 --> 00:22:34,570
with one example and then I'm really

00:22:30,159 --> 00:22:37,749
done so i'll say in my imaginary to

00:22:34,570 --> 00:22:42,070
socket system course that will under the

00:22:37,749 --> 00:22:45,659
hood create a place list for me i'll

00:22:42,070 --> 00:22:49,389
tell the threads to be spread out and

00:22:45,659 --> 00:22:51,549
i'm going to use for threads okay now in

00:22:49,389 --> 00:22:53,619
the specifications is well defined what

00:22:51,549 --> 00:22:56,080
that means in terms of what places are

00:22:53,619 --> 00:22:59,489
generated and whatever but what it boils

00:22:56,080 --> 00:23:03,220
down to is one open and pthread / place

00:22:59,489 --> 00:23:05,499
no surprise i have four threads i want

00:23:03,220 --> 00:23:10,179
to spread them out and i have four cores

00:23:05,499 --> 00:23:12,909
in my system so this is again my system

00:23:10,179 --> 00:23:17,109
and this is how they're going to run so

00:23:12,909 --> 00:23:21,159
i got one here place another place my

00:23:17,109 --> 00:23:27,639
four places and the threads let me say i

00:23:21,159 --> 00:23:31,720
hope they'll pop up they will run nah ok

00:23:27,639 --> 00:23:34,200
and i'll say that one more time the

00:23:31,720 --> 00:23:38,499
choice this is totally arbitrary choice

00:23:34,200 --> 00:23:40,869
shouldn't matter and that was the talk

00:23:38,499 --> 00:23:42,549
any more questions I know I'm running

00:23:40,869 --> 00:23:45,220
awfully late i'm throwing for keeping

00:23:42,549 --> 00:23:50,159
you longer than we promised i'm not even

00:23:45,220 --> 00:23:50,159
sure we promised something i didn't yeah

00:23:53,430 --> 00:24:00,490
scanner is an extension then but it may

00:23:57,460 --> 00:24:03,940
be an old one oh sorry so the question

00:24:00,490 --> 00:24:06,340
is the Xeon Phi says scatter I think

00:24:03,940 --> 00:24:11,500
scatter may be implemented before

00:24:06,340 --> 00:24:13,660
opening p4 todo was out how would you

00:24:11,500 --> 00:24:17,140
spread because that gives me portability

00:24:13,660 --> 00:24:19,240
across other platforms I assume their

00:24:17,140 --> 00:24:21,130
scatter is the same as the spread in

00:24:19,240 --> 00:24:23,470
photo dough but you have to check the

00:24:21,130 --> 00:24:26,950
documentation my guess is that was

00:24:23,470 --> 00:24:28,930
invented before photo came out and I

00:24:26,950 --> 00:24:31,540
think it may even be an early name for

00:24:28,930 --> 00:24:33,640
spread maybe I don't know dick will know

00:24:31,540 --> 00:24:35,110
in the audience but he's very quiet dick

00:24:33,640 --> 00:24:36,940
actually in the audience he's one of the

00:24:35,110 --> 00:24:41,200
guys behind it he's keeping me very

00:24:36,940 --> 00:24:49,980
honest so ok so again sorry for running

00:24:41,200 --> 00:24:49,980
late yep beginning Yeah right right

00:24:53,790 --> 00:24:58,720
well all you move okay so the question

00:24:56,830 --> 00:25:01,360
is this hinges on the fact that your

00:24:58,720 --> 00:25:03,340
data is in the proper place or you you

00:25:01,360 --> 00:25:06,700
play with the policies to move them

00:25:03,340 --> 00:25:08,860
there okay like I want you to all to run

00:25:06,700 --> 00:25:12,990
in that socket because I know that's

00:25:08,860 --> 00:25:12,990
where my data is or close to the court

00:25:13,020 --> 00:25:19,840
okay how do you know where the date is

00:25:17,220 --> 00:25:22,740
opening p doesn't have an API for that

00:25:19,840 --> 00:25:25,720
actually I just think maybe we should on

00:25:22,740 --> 00:25:28,210
our operating system solarz there's an

00:25:25,720 --> 00:25:31,930
API to tell you okay but you have to

00:25:28,210 --> 00:25:34,600
code it in so yeah that's you touch upon

00:25:31,930 --> 00:25:38,560
a good point how do you know actually

00:25:34,600 --> 00:25:39,910
you also you altima tlie you may not be

00:25:38,560 --> 00:25:41,710
able to easily tell where your threads

00:25:39,910 --> 00:25:43,060
are running you hope for the best there

00:25:41,710 --> 00:25:46,480
are ways to find out talk with me

00:25:43,060 --> 00:25:49,450
offline and i can tell you yeah all

00:25:46,480 --> 00:25:53,290
right no more questions we have a lucky

00:25:49,450 --> 00:25:57,190
draw and I'll I promise to give a book

00:25:53,290 --> 00:26:00,610
to the most active active participants

00:25:57,190 --> 00:26:02,350
and you ask a bunch of questions and I

00:26:00,610 --> 00:26:03,760
know you have a copy of us a bunch of

00:26:02,350 --> 00:26:07,210
questions I think you have the book

00:26:03,760 --> 00:26:13,690
already yeah all right make some money

00:26:07,210 --> 00:26:18,090
out of this ever lucky draw I think you

00:26:13,690 --> 00:26:18,090

YouTube URL: https://www.youtube.com/watch?v=2F4DSDtRO5Q


