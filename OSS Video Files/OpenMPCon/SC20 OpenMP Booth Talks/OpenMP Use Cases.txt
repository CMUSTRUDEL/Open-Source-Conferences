Title: OpenMP Use Cases
Publication date: 2020-10-31
Playlist: SC20 OpenMP Booth Talks
Description: 
	This presentation, delivered by Matthijs van Wavren of OpenMP ARB and CS GROUP, is part of the OpenMP Booth Talk series created for Supercomputing 2020. A PDF of this presentation as well as more videos from this series can be downloaded at https://www.openmp.org/events/openmp-sc20/
Captions: 
	00:00:03,360 --> 00:00:06,880
welcome ladies and gentlemen

00:00:07,040 --> 00:00:11,120
let me present myself my name is

00:00:08,800 --> 00:00:16,240
matthias van waveren

00:00:11,120 --> 00:00:19,359
i'm with the openmp arb ncs group

00:00:16,240 --> 00:00:20,640
and i will present a set of openmp use

00:00:19,359 --> 00:00:23,039
cases

00:00:20,640 --> 00:00:23,039
today

00:00:24,640 --> 00:00:30,560
i have chosen the seven use cases in

00:00:27,760 --> 00:00:34,079
different fields

00:00:30,560 --> 00:00:38,559
from medical oil and gas to

00:00:34,079 --> 00:00:38,559
automotive financial and physics fields

00:00:41,200 --> 00:00:44,640
the first use case i want to discuss is

00:00:43,600 --> 00:00:47,200
a topical

00:00:44,640 --> 00:00:50,000
is the speeding up of search for a cobit

00:00:47,200 --> 00:00:50,000
19 drug

00:00:51,680 --> 00:00:57,039
so when looking for a drug to neutralize

00:00:55,199 --> 00:00:59,920
the sarskoff

00:00:57,039 --> 00:01:01,760
viruses then medical researchers look

00:00:59,920 --> 00:01:04,320
for molecules that can

00:01:01,760 --> 00:01:08,720
[Music]

00:01:04,320 --> 00:01:12,479
dock onto the spikes of the

00:01:08,720 --> 00:01:15,280
virus and stop it

00:01:12,479 --> 00:01:16,880
so for this there's these software auto

00:01:15,280 --> 00:01:21,200
dock

00:01:16,880 --> 00:01:21,200
which is a molecular docking application

00:01:21,600 --> 00:01:27,840
used open source by many

00:01:24,960 --> 00:01:27,840
medical researchers

00:01:29,439 --> 00:01:35,200
and the compute intensive part of this

00:01:32,880 --> 00:01:36,880
application is a lamarckin genetic

00:01:35,200 --> 00:01:40,240
algorithm

00:01:36,880 --> 00:01:42,720
so a genetic algorithm is a based on

00:01:40,240 --> 00:01:44,720
and inspired by the work of darwin on

00:01:42,720 --> 00:01:47,759
genetics

00:01:44,720 --> 00:01:48,720
where you have a population which

00:01:47,759 --> 00:01:52,240
evolves

00:01:48,720 --> 00:01:55,280
from generation to generation and from

00:01:52,240 --> 00:01:56,719
only the fittest

00:01:55,280 --> 00:01:58,640
individual makes it to the next

00:01:56,719 --> 00:01:59,520
generation there's a fitness faction

00:01:58,640 --> 00:02:01,280
that

00:01:59,520 --> 00:02:02,640
governs how the natural selection is

00:02:01,280 --> 00:02:04,640
done and

00:02:02,640 --> 00:02:06,880
mutation is also introduced into the

00:02:04,640 --> 00:02:09,520
algorithm

00:02:06,880 --> 00:02:11,920
where different individuals are randomly

00:02:09,520 --> 00:02:11,920
changed

00:02:12,239 --> 00:02:15,760
so this genic algorithm was paralyzed

00:02:15,360 --> 00:02:19,599
with

00:02:15,760 --> 00:02:22,720
hybrid openmp mpi

00:02:19,599 --> 00:02:25,360
in this case so openmp is then used

00:02:22,720 --> 00:02:25,920
for intra node parallelism to split up

00:02:25,360 --> 00:02:28,480
the

00:02:25,920 --> 00:02:30,560
work over the course of a shared memory

00:02:28,480 --> 00:02:33,840
smv system

00:02:30,560 --> 00:02:37,840
and mpi is used for inter

00:02:33,840 --> 00:02:37,840
node communications

00:02:42,160 --> 00:02:46,720
so auto dock paralyzed in this way is

00:02:44,480 --> 00:02:49,120
used amongst others on mogon 2 which is

00:02:46,720 --> 00:02:51,680
the mine supercomputer system

00:02:49,120 --> 00:02:53,680
and for dress is widely used by medical

00:02:51,680 --> 00:02:56,640
research around the world

00:02:53,680 --> 00:02:57,200
for searching for covet 19 drugs and

00:02:56,640 --> 00:03:04,400
other

00:02:57,200 --> 00:03:06,959
drugs against other diseases

00:03:04,400 --> 00:03:09,920
okay the next use case is speeding up of

00:03:06,959 --> 00:03:13,120
seismic analysis with openmp

00:03:09,920 --> 00:03:16,159
so seismic analysis is used

00:03:13,120 --> 00:03:18,400
in oilfield exploration in the image on

00:03:16,159 --> 00:03:22,239
the right hand side we see that

00:03:18,400 --> 00:03:25,599
a ship has a line of hydrophones which

00:03:22,239 --> 00:03:25,599
are underwater microphones

00:03:26,159 --> 00:03:33,920
which capture sound coming from the

00:03:29,760 --> 00:03:36,799
earth and the ship also has a

00:03:33,920 --> 00:03:38,159
air gun behind him which is a source of

00:03:36,799 --> 00:03:40,319
shock waves

00:03:38,159 --> 00:03:42,239
the shock waves propagate through the

00:03:40,319 --> 00:03:44,480
earth reflect on the

00:03:42,239 --> 00:03:46,000
earth bound the earth layers and come

00:03:44,480 --> 00:03:49,519
back to the microphones

00:03:46,000 --> 00:03:50,239
seismic analysis is then used to analyze

00:03:49,519 --> 00:03:54,799
the

00:03:50,239 --> 00:03:57,439
signals captured by the hydrophones

00:03:54,799 --> 00:03:59,680
in order to make an image of the

00:03:57,439 --> 00:04:01,680
subsurface

00:03:59,680 --> 00:04:03,120
this case we're looking at the mini mod

00:04:01,680 --> 00:04:05,439
application

00:04:03,120 --> 00:04:07,120
which is a stencil based application

00:04:05,439 --> 00:04:09,120
that solves the wavy equation

00:04:07,120 --> 00:04:10,799
the wave equation is of course the

00:04:09,120 --> 00:04:14,480
equation that governs

00:04:10,799 --> 00:04:17,359
the propagation of sound waves

00:04:14,480 --> 00:04:18,560
and the computational intensive part in

00:04:17,359 --> 00:04:20,479
this

00:04:18,560 --> 00:04:22,639
application is the stencil computation

00:04:20,479 --> 00:04:25,199
that is computation

00:04:22,639 --> 00:04:25,840
where you have the value at the grid

00:04:25,199 --> 00:04:28,560
point

00:04:25,840 --> 00:04:31,199
depends on the values at neighboring

00:04:28,560 --> 00:04:31,199
grid points

00:04:33,280 --> 00:04:39,919
and in this computation has been

00:04:36,400 --> 00:04:42,160
implemented with openmp tasks

00:04:39,919 --> 00:04:42,960
so a task-based model is where you have

00:04:42,160 --> 00:04:46,960
a

00:04:42,960 --> 00:04:46,960
the software creates a pool of tasks

00:04:47,040 --> 00:04:54,000
and each task is

00:04:50,639 --> 00:04:54,880
taken up by a thread which exits on the

00:04:54,000 --> 00:04:57,120
core

00:04:54,880 --> 00:04:58,320
when the thread has finished the task

00:04:57,120 --> 00:05:01,199
the first asset take

00:04:58,320 --> 00:05:02,960
to the cup it goes to the next task in

00:05:01,199 --> 00:05:06,720
the task pool

00:05:02,960 --> 00:05:09,520
and so all the threads on the system

00:05:06,720 --> 00:05:11,919
take tasks from task pool until the pool

00:05:09,520 --> 00:05:14,160
is finished

00:05:11,919 --> 00:05:16,000
this is the way of paralyzing the

00:05:14,160 --> 00:05:20,080
computation

00:05:16,000 --> 00:05:20,080
on the set of course

00:05:20,560 --> 00:05:25,199
so this has been done in the minimum

00:05:23,280 --> 00:05:27,600
application

00:05:25,199 --> 00:05:28,479
and now it is used by total and the

00:05:27,600 --> 00:05:31,919
stony brook

00:05:28,479 --> 00:05:33,840
universities on the

00:05:31,919 --> 00:05:35,280
supercomputer summit and quarry in the

00:05:33,840 --> 00:05:38,160
us

00:05:35,280 --> 00:05:40,800
and total uses it in its outfit

00:05:38,160 --> 00:05:40,800
exploration

00:05:44,160 --> 00:05:47,759
the following use case is the

00:05:45,759 --> 00:05:49,680
computation of the binding energy of the

00:05:47,759 --> 00:05:52,880
coronine dimer

00:05:49,680 --> 00:05:55,199
this comes from chemistry

00:05:52,880 --> 00:05:56,400
the coronine dimer is shown in the image

00:05:55,199 --> 00:06:00,400
is a

00:05:56,400 --> 00:06:03,759
two dimer means two molecules

00:06:00,400 --> 00:06:04,400
and we want to know what is the binding

00:06:03,759 --> 00:06:07,840
energy

00:06:04,400 --> 00:06:07,840
of these two molecules

00:06:10,000 --> 00:06:15,840
this is done with the software nwchem

00:06:13,840 --> 00:06:21,840
which is a widely used open source

00:06:15,840 --> 00:06:21,840
package for computational chemistry

00:06:23,919 --> 00:06:28,319
nw chem computes quantum mechanical

00:06:27,280 --> 00:06:32,880
computations

00:06:28,319 --> 00:06:32,880
which are very compute intensive so

00:06:32,960 --> 00:06:40,000
in these computations uh things like the

00:06:38,080 --> 00:06:41,759
energy levels of the atoms and the

00:06:40,000 --> 00:06:44,960
molecules

00:06:41,759 --> 00:06:48,240
are computed and

00:06:44,960 --> 00:06:50,319
from there uh

00:06:48,240 --> 00:06:51,360
different properties of the molecules

00:06:50,319 --> 00:06:55,039
are calculated

00:06:51,360 --> 00:06:55,039
amongst others debinding energy

00:06:55,919 --> 00:06:59,520
and these computations are so intensive

00:06:57,599 --> 00:07:01,919
that they are these

00:06:59,520 --> 00:07:05,680
are very good candidates for the

00:07:01,919 --> 00:07:05,680
forthcoming quantum computers

00:07:06,400 --> 00:07:10,960
in this case we it has been implemented

00:07:08,479 --> 00:07:15,280
as openmp for

00:07:10,960 --> 00:07:19,680
smp and accelerator systems

00:07:15,280 --> 00:07:22,960
and the intranode and accelerated

00:07:19,680 --> 00:07:26,319
offload features of openmp4.5 are used

00:07:22,960 --> 00:07:26,319
so intranode that means

00:07:26,639 --> 00:07:34,960
adapting the software so it uses

00:07:30,319 --> 00:07:38,800
the cores of a smp system efficiently

00:07:34,960 --> 00:07:42,639
and accelerator offload means offloading

00:07:38,800 --> 00:07:45,919
computations on the gpu accelerator

00:07:42,639 --> 00:07:47,199
for instance and getting the results

00:07:45,919 --> 00:07:50,639
back to the host

00:07:47,199 --> 00:07:50,639
which is then the smp system

00:07:54,319 --> 00:07:58,639
so this nwcam is a widely used open

00:07:57,199 --> 00:08:01,039
source package

00:07:58,639 --> 00:08:02,319
and is available on many hpc systems

00:08:01,039 --> 00:08:06,560
including

00:08:02,319 --> 00:08:06,560
shaheen in saudi arabia and korea in the

00:08:10,840 --> 00:08:15,759
u.s

00:08:13,440 --> 00:08:18,319
the following use cases the speeding up

00:08:15,759 --> 00:08:21,199
of modeling of subsurface and sub

00:08:18,319 --> 00:08:21,199
surface flow

00:08:21,759 --> 00:08:28,560
on the right you see an image where

00:08:25,039 --> 00:08:32,159
computation is illustrated of the

00:08:28,560 --> 00:08:35,440
modeling of the surface flow

00:08:32,159 --> 00:08:35,440
but in

00:08:35,760 --> 00:08:43,120
bound or modeled with

00:08:39,039 --> 00:08:46,399
with the land surface and atmosphere

00:08:43,120 --> 00:08:48,959
and in the case of the european 2003

00:08:46,399 --> 00:08:48,959
heatwave

00:08:51,839 --> 00:08:55,360
this has been done with these software

00:08:54,640 --> 00:08:57,600
paraflow

00:08:55,360 --> 00:09:00,160
which is a watershed model to simulate

00:08:57,600 --> 00:09:03,440
surface and subsurface fluid flow

00:09:00,160 --> 00:09:07,680
so watersheds that includes

00:09:03,440 --> 00:09:11,920
rivers and valleys and

00:09:07,680 --> 00:09:11,920
subsurface also caves

00:09:14,240 --> 00:09:19,600
and these software uses

00:09:17,360 --> 00:09:20,399
non-linear and multi-grid solvers which

00:09:19,600 --> 00:09:24,399
are

00:09:20,399 --> 00:09:28,080
quite computationally intensive and also

00:09:24,399 --> 00:09:30,000
couples land and water models

00:09:28,080 --> 00:09:32,640
as in the example on the right hand side

00:09:30,000 --> 00:09:32,640
where you have the

00:09:33,279 --> 00:09:38,080
water and surface are coupled

00:09:40,320 --> 00:09:44,959
the power flow is implemented as a

00:09:44,000 --> 00:09:47,760
package with

00:09:44,959 --> 00:09:47,760
different backends

00:09:48,160 --> 00:09:54,240
and openmp is one of the back ends

00:09:51,920 --> 00:09:57,279
so that powerflow can run on the

00:09:54,240 --> 00:09:57,279
intranode systems

00:10:01,519 --> 00:10:05,839
it has been implemented such a way that

00:10:06,160 --> 00:10:11,200
it can be eventually used in up to 30

00:10:09,360 --> 00:10:14,079
thousand processors

00:10:11,200 --> 00:10:19,839
on supercomputers such as edison corey

00:10:14,079 --> 00:10:19,839
yellowstone and joe queen

00:10:23,120 --> 00:10:28,240
next use case is from the autumn

00:10:25,399 --> 00:10:31,519
automotive field

00:10:28,240 --> 00:10:31,519
this is a field where

00:10:31,760 --> 00:10:37,200
autonomous driving is being researched

00:10:34,800 --> 00:10:40,480
and developed

00:10:37,200 --> 00:10:43,279
where uh card has

00:10:40,480 --> 00:10:46,560
cameras which analyze the surroundings

00:10:43,279 --> 00:10:49,600
and uses that information to

00:10:46,560 --> 00:10:49,600
define where it's going

00:10:49,760 --> 00:10:56,160
so openmp has been used to

00:10:52,800 --> 00:10:57,360
speed up this this process in this case

00:10:56,160 --> 00:11:00,320
in this

00:10:57,360 --> 00:11:01,600
autoware autonomous driving platform

00:11:00,320 --> 00:11:03,760
software

00:11:01,600 --> 00:11:05,120
which is open source autonomous driving

00:11:03,760 --> 00:11:08,240
software which is used

00:11:05,120 --> 00:11:10,079
used by several manufacturers and the

00:11:08,240 --> 00:11:11,760
mapping module as you can imagine is

00:11:10,079 --> 00:11:12,959
computational intensive this is the

00:11:11,760 --> 00:11:16,720
module where

00:11:12,959 --> 00:11:16,720
the data coming from the cameras

00:11:16,959 --> 00:11:20,800
is analyzed in order to figure out where

00:11:19,760 --> 00:11:24,000
the vehicle

00:11:20,800 --> 00:11:24,000
is actually sitting

00:11:25,040 --> 00:11:29,680
this has been implemented with openmp

00:11:27,839 --> 00:11:31,120
device offloading and parallelization

00:11:29,680 --> 00:11:33,760
directives

00:11:31,120 --> 00:11:34,800
you can imagine in the car you're not

00:11:33,760 --> 00:11:39,279
going to put an

00:11:34,800 --> 00:11:43,440
smp system so these are embedded systems

00:11:39,279 --> 00:11:47,200
and openmp is used to offload

00:11:43,440 --> 00:11:48,880
the computation on the embedded system

00:11:47,200 --> 00:11:51,279
and get the data back to the whole

00:11:48,880 --> 00:11:51,279
system

00:11:51,519 --> 00:11:57,839
and also paralyze on the hose which is a

00:11:55,120 --> 00:11:57,839
shared memory system

00:11:59,200 --> 00:12:02,480
the target platforms in this case are

00:12:01,360 --> 00:12:06,720
nvidia gpu

00:12:02,480 --> 00:12:06,720
and renesas r car processors

00:12:07,600 --> 00:12:12,240
and this is for the device offloading

00:12:09,360 --> 00:12:16,320
where you have your

00:12:12,240 --> 00:12:18,880
computations dataized and sent to the

00:12:16,320 --> 00:12:20,160
accelerator computations are done on the

00:12:18,880 --> 00:12:22,839
accelerator

00:12:20,160 --> 00:12:25,120
and the results are coming back to the

00:12:22,839 --> 00:12:27,120
host

00:12:25,120 --> 00:12:29,360
so the autoway autonomous driving

00:12:27,120 --> 00:12:32,000
platform

00:12:29,360 --> 00:12:35,120
is a platform which is available for

00:12:32,000 --> 00:12:35,120
manufacturers to use

00:12:37,040 --> 00:12:42,160
the next use case is the

00:12:40,079 --> 00:12:44,240
speeding up with openmp of european

00:12:42,160 --> 00:12:46,720
option pricing

00:12:44,240 --> 00:12:49,279
this is comes from the financial field

00:12:46,720 --> 00:12:54,480
european options

00:12:49,279 --> 00:12:58,560
are options that uh a buyer

00:12:54,480 --> 00:13:01,519
buys and can check

00:12:58,560 --> 00:13:02,880
cash out at a specific time in the

00:13:01,519 --> 00:13:06,000
future

00:13:02,880 --> 00:13:08,000
so he has to wait until that time before

00:13:06,000 --> 00:13:10,399
using that option this is a difference

00:13:08,000 --> 00:13:12,160
from the american option where it can

00:13:10,399 --> 00:13:15,519
the option can be used any time until

00:13:12,160 --> 00:13:15,519
the maturity date

00:13:16,720 --> 00:13:23,440
so this pricing is calculated

00:13:20,320 --> 00:13:26,639
with the by solving the black scholes

00:13:23,440 --> 00:13:28,880
partial differential equations

00:13:26,639 --> 00:13:30,560
which have been developed in the 70s

00:13:28,880 --> 00:13:34,880
already

00:13:30,560 --> 00:13:38,800
in order to predict the price

00:13:34,880 --> 00:13:40,560
of an european option this problem is an

00:13:38,800 --> 00:13:41,600
embarrassingly parallel problem there

00:13:40,560 --> 00:13:44,720
are no

00:13:41,600 --> 00:13:44,720
data dependencies

00:13:46,000 --> 00:13:49,600
so it can easily be paralyzed with omp

00:13:48,320 --> 00:13:52,480
parallel on the

00:13:49,600 --> 00:13:52,480
ship memory system

00:13:54,320 --> 00:14:04,639
all where it has been implemented

00:14:02,720 --> 00:14:06,000
and this is a type of work that is done

00:14:04,639 --> 00:14:09,279
in banks

00:14:06,000 --> 00:14:16,800
so and and use on their

00:14:09,279 --> 00:14:19,760
shimmer systems

00:14:16,800 --> 00:14:21,600
so let me finish with the physics use

00:14:19,760 --> 00:14:23,440
case

00:14:21,600 --> 00:14:26,959
this is the simulation of process of

00:14:23,440 --> 00:14:26,959
high energy density physics

00:14:28,000 --> 00:14:31,839
on the right hand side you have a image

00:14:30,720 --> 00:14:32,680
where laser

00:14:31,839 --> 00:14:35,750
laser

00:14:32,680 --> 00:14:35,750
[Music]

00:14:36,800 --> 00:14:39,360
lasers are

00:14:39,920 --> 00:14:47,120
propagation is simulated the red

00:14:44,480 --> 00:14:47,920
is a laser beam under below the image

00:14:47,120 --> 00:14:50,720
and the green

00:14:47,920 --> 00:14:52,399
on the top of image is also a laser beam

00:14:50,720 --> 00:14:53,440
so this has been implemented with the

00:14:52,399 --> 00:14:54,800
hydra code

00:14:53,440 --> 00:14:57,120
which is the multiphysics in the

00:14:54,800 --> 00:14:59,920
simulation code with which

00:14:57,120 --> 00:15:01,920
radiation transfer atomic physics and

00:14:59,920 --> 00:15:04,399
laser propagation is

00:15:01,920 --> 00:15:04,399
computed

00:15:04,959 --> 00:15:08,240
again this is a quantum mechanical

00:15:06,639 --> 00:15:11,760
computation

00:15:08,240 --> 00:15:14,880
which are compute intensive

00:15:11,760 --> 00:15:18,079
so in this case since we compute the

00:15:14,880 --> 00:15:23,920
laser photon properties

00:15:18,079 --> 00:15:23,920
they go along this specific laser beam

00:15:25,120 --> 00:15:28,399
this hydra has been implemented with the

00:15:27,680 --> 00:15:31,199
hybrid

00:15:28,399 --> 00:15:32,480
openmp mpi so this is where you have

00:15:31,199 --> 00:15:35,920
openmp

00:15:32,480 --> 00:15:39,040
used to parallelize on the node

00:15:35,920 --> 00:15:43,040
and mpi is used to predict

00:15:39,040 --> 00:15:43,040
data communications between the nodes

00:15:47,839 --> 00:15:52,320
so hydra has been developed and is used

00:15:51,040 --> 00:15:55,600
by lawrence livermore

00:15:52,320 --> 00:15:56,639
lab to simulate fusion and nuclear

00:15:55,600 --> 00:16:01,360
processes

00:15:56,639 --> 00:16:04,560
they have a national ignition facility

00:16:01,360 --> 00:16:09,839
where they do also the experimental work

00:16:04,560 --> 00:16:09,839
and coupled with the simulation work

00:16:12,000 --> 00:16:19,040
so well thank you for your attention

00:16:15,759 --> 00:16:23,519
i hope these use cases have been

00:16:19,040 --> 00:16:28,160
interesting and motivating for you

00:16:23,519 --> 00:16:28,160
and good luck with the rest of the

00:16:28,279 --> 00:16:31,279

YouTube URL: https://www.youtube.com/watch?v=LoI3ZphDqAw


