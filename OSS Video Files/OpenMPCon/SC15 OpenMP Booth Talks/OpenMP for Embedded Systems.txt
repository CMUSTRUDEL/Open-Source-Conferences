Title: OpenMP for Embedded Systems
Publication date: 2015-11-29
Playlist: SC15 OpenMP Booth Talks
Description: 
	SC15 OpenMP Booth Talks    Speaker: Sunita Chandrasekaran, University of Delaware
Title: OpenMP for Embedded Systems
Slides:  http://openmp.org/sc15/OpenMP-booth-talk-Sunita-Nov-2015.pdf
Captions: 
	00:00:00,000 --> 00:00:06,240
so this stuff is going to give you a

00:00:02,939 --> 00:00:08,880
brief idea about how OpenMP can be used

00:00:06,240 --> 00:00:11,070
for not only hpc but also for on

00:00:08,880 --> 00:00:12,780
embedded platforms where you have

00:00:11,070 --> 00:00:14,160
resource constraints you don't have you

00:00:12,780 --> 00:00:16,170
know that much memory or left many

00:00:14,160 --> 00:00:18,570
course so you don't have the luxury

00:00:16,170 --> 00:00:21,900
divorce subscribe resources and things

00:00:18,570 --> 00:00:24,449
like that so we are going to look

00:00:21,900 --> 00:00:27,380
quickly into why is this working for who

00:00:24,449 --> 00:00:30,240
so this particular slide shows you from

00:00:27,380 --> 00:00:32,730
2000 until babe you know how the

00:00:30,240 --> 00:00:34,700
hardware have evolved the sense we

00:00:32,730 --> 00:00:37,320
started off with single core systems

00:00:34,700 --> 00:00:41,129
homogeneous course and then we went all

00:00:37,320 --> 00:00:42,989
the way until today 2015 where we are

00:00:41,129 --> 00:00:45,239
seeing in a course that your

00:00:42,989 --> 00:00:48,600
heterogeneous you have systems with arm

00:00:45,239 --> 00:00:51,329
cores DSP cores and we have Qualcomm

00:00:48,600 --> 00:00:53,610
Snapdragon kind of course and we have

00:00:51,329 --> 00:00:56,100
core processors from Intel Xeon Phi and

00:00:53,610 --> 00:00:58,920
this mikes landing which will be out i

00:00:56,100 --> 00:01:01,050
think in summer 2016 and we have jet

00:00:58,920 --> 00:01:03,300
simply a one of nvidia which caught our

00:01:01,050 --> 00:01:06,780
man GPU cores so it's a more homogeneous

00:01:03,300 --> 00:01:09,030
GPU cores but we are seeing lots of you

00:01:06,780 --> 00:01:10,080
know heterogeneous systems and cpu

00:01:09,030 --> 00:01:12,690
possible

00:01:10,080 --> 00:01:14,820
so although it looks cool the question

00:01:12,690 --> 00:01:17,130
is how do you program these active

00:01:14,820 --> 00:01:20,370
devices right so what should I 52 baby

00:01:17,130 --> 00:01:22,290
programming so before we get that I

00:01:20,370 --> 00:01:28,290
wanted to show this called charities

00:01:22,290 --> 00:01:32,700
from GDC GDC 2015 I think we're putting

00:01:28,290 --> 00:01:34,500
nvidia CEO drives on to the platform you

00:01:32,700 --> 00:01:36,870
know with an RD connect which is

00:01:34,500 --> 00:01:38,340
actually glass and nvidia tickle at TK 1

00:01:36,870 --> 00:01:40,470
i'm pleased to be you and it was pretty

00:01:38,340 --> 00:01:42,180
fascinating so he comes on the stage for

00:01:40,470 --> 00:01:45,210
a few inches and has already connect

00:01:42,180 --> 00:01:47,190
hard so it's just a fight at school and

00:01:45,210 --> 00:01:49,890
subscribe to my sis office here at

00:01:47,190 --> 00:01:52,979
devices so how do you program this magic

00:01:49,890 --> 00:01:55,020
device so the challenge that we are

00:01:52,979 --> 00:01:58,020
seeing in the embedded platform is that

00:01:55,020 --> 00:02:00,119
it's it's mostly the propriety reset or

00:01:58,020 --> 00:02:02,340
programming environment you have is to

00:02:00,119 --> 00:02:06,030
write to the hardware so if you take

00:02:02,340 --> 00:02:07,550
texas instruments or qualcomm or you

00:02:06,030 --> 00:02:10,740
know one of the semiconductor company

00:02:07,550 --> 00:02:13,050
companies you would see that they have a

00:02:10,740 --> 00:02:15,450
tool set but the truth that only talks

00:02:13,050 --> 00:02:17,400
to its own hardware but if you take the

00:02:15,450 --> 00:02:19,950
particular tools that and try to program

00:02:17,400 --> 00:02:22,500
on another platform even believe the

00:02:19,950 --> 00:02:24,420
standard family of the vendor it may not

00:02:22,500 --> 00:02:27,640
work so you might have to

00:02:24,420 --> 00:02:30,820
so that weeks the whole program is a big

00:02:27,640 --> 00:02:32,710
issues where people like that occurs in

00:02:30,820 --> 00:02:34,660
programmers and I'm not saying on

00:02:32,710 --> 00:02:36,550
low-level details in fine Chaco Canyon

00:02:34,660 --> 00:02:39,220
hardware and try to find out what the

00:02:36,550 --> 00:02:42,130
software preaching we do not write ones

00:02:39,220 --> 00:02:44,290
and use it everywhere we write ones and

00:02:42,130 --> 00:02:45,940
we never we use it because um changes

00:02:44,290 --> 00:02:47,950
right so there is a lot of engineering

00:02:45,940 --> 00:02:50,440
effort and there is a lot of time

00:02:47,950 --> 00:02:52,630
consuming effort going on so high time

00:02:50,440 --> 00:02:54,190
to market solutions leading the fine

00:02:52,630 --> 00:02:56,740
with takes for the product to go to the

00:02:54,190 --> 00:02:58,900
market becomes longer because we need to

00:02:56,740 --> 00:03:00,910
refactor or you know we do with these

00:02:58,900 --> 00:03:02,680
boards which because it doesn't work for

00:03:00,910 --> 00:03:05,739
more than one device so there is high

00:03:02,680 --> 00:03:07,540
TDM so bottom line is we have these cool

00:03:05,739 --> 00:03:10,750
devices we have stroked right people's

00:03:07,540 --> 00:03:12,520
at how do you actually look into

00:03:10,750 --> 00:03:14,739
building this end of an industry

00:03:12,520 --> 00:03:16,690
standard which is you know which has

00:03:14,739 --> 00:03:18,910
programming models which is run by

00:03:16,690 --> 00:03:21,160
industry academia universities that's a

00:03:18,910 --> 00:03:24,070
standard programming model and you use

00:03:21,160 --> 00:03:25,900
that on multiple platforms in order to

00:03:24,070 --> 00:03:28,120
gain some portability aspect where you

00:03:25,900 --> 00:03:30,910
want to do so on Naboo performance for

00:03:28,120 --> 00:03:33,340
the code so the reason behind using

00:03:30,910 --> 00:03:34,600
industry standard is to offer a portable

00:03:33,340 --> 00:03:37,780
software solutions

00:03:34,600 --> 00:03:42,250
be able I get more than 11 homes JP I

00:03:37,780 --> 00:03:44,110
take alpha in upscale FPGAs steak r + EP

00:03:42,250 --> 00:03:46,420
use take nvidia you want to write once

00:03:44,110 --> 00:03:49,510
and they be able to use your coat on to

00:03:46,420 --> 00:03:52,540
the finest so that's diving in the open

00:03:49,510 --> 00:03:54,400
empty box over in an open MP might be

00:03:52,540 --> 00:03:58,420
pretty familiar with the slide which is

00:03:54,400 --> 00:04:00,130
from tiffany's openmp as i see 14

00:03:58,420 --> 00:04:02,470
actually news from his bar an empty

00:04:00,130 --> 00:04:07,240
session so we see how this planet has

00:04:02,470 --> 00:04:10,060
evolved from 1997-2014 and it's still

00:04:07,240 --> 00:04:12,370
evolving so this is where it got started

00:04:10,060 --> 00:04:14,860
and hoping openmp also started

00:04:12,370 --> 00:04:17,170
supporting axially the sands 2014 and

00:04:14,860 --> 00:04:19,690
now we are moving on opening before or x

00:04:17,170 --> 00:04:21,610
and taught me about cool new features

00:04:19,690 --> 00:04:23,710
and things like that so it's been

00:04:21,610 --> 00:04:26,320
evolving multiple vendors were lots of

00:04:23,710 --> 00:04:29,110
people using it and you know there's

00:04:26,320 --> 00:04:31,150
it's gained a lot of fractional so if we

00:04:29,110 --> 00:04:33,730
look into how the openmp implementation

00:04:31,150 --> 00:04:36,730
itself works the beauty of often impedes

00:04:33,730 --> 00:04:39,070
helpers you plug-in directives you don't

00:04:36,730 --> 00:04:41,470
change the port so you just need to use

00:04:39,070 --> 00:04:42,490
the c forum and oversee this gospel you

00:04:41,470 --> 00:04:44,050
have

00:04:42,490 --> 00:04:46,150
you just need to know the price of

00:04:44,050 --> 00:04:47,380
guidelines you need to use which is

00:04:46,150 --> 00:04:48,699
where you have so many open if you

00:04:47,380 --> 00:04:50,650
orioles and things where they teach you

00:04:48,699 --> 00:04:53,530
what kind of what kind of black men you

00:04:50,650 --> 00:04:55,569
should use and you plug it in and the

00:04:53,530 --> 00:04:57,430
compiler produces sort of a translation

00:04:55,569 --> 00:04:58,840
but the compiler is a magic compiler

00:04:57,430 --> 00:05:01,419
which there's all the crazy things under

00:04:58,840 --> 00:05:03,669
the hood and you will get a cord that

00:05:01,419 --> 00:05:05,590
were able to port on several platforms

00:05:03,669 --> 00:05:08,500
plus you're able to run it on multiple

00:05:05,590 --> 00:05:10,630
cores not just a single port and there

00:05:08,500 --> 00:05:13,840
is a long time component which does all

00:05:10,630 --> 00:05:15,729
the scheduling of tasks proving a work

00:05:13,840 --> 00:05:18,699
units two different pores or different

00:05:15,729 --> 00:05:20,259
platforms and things like that so we

00:05:18,699 --> 00:05:21,759
have open and B which is greater than

00:05:20,259 --> 00:05:25,060
the standard which puts we could

00:05:21,759 --> 00:05:27,520
definitely use so this kind of talks

00:05:25,060 --> 00:05:29,169
about you know we have open mp3 we know

00:05:27,520 --> 00:05:30,759
it works awesome we have tons of

00:05:29,169 --> 00:05:34,000
complications tons of great they working

00:05:30,759 --> 00:05:37,000
on it so what is it that open mpi needs

00:05:34,000 --> 00:05:39,150
to do more or what can be attached to

00:05:37,000 --> 00:05:41,440
open MP or what can ultimately be

00:05:39,150 --> 00:05:43,659
translated to in order to make it even

00:05:41,440 --> 00:05:45,699
work on indirect systems is a bid

00:05:43,659 --> 00:05:47,980
opening is fabulous on HBC so how we get

00:05:45,699 --> 00:05:49,990
that work on an embedded platform right

00:05:47,980 --> 00:05:51,820
so this particular scientist else that

00:05:49,990 --> 00:05:53,650
we have these booths set up a our models

00:05:51,820 --> 00:05:55,690
but sometimes when you are talking about

00:05:53,650 --> 00:05:57,730
an ambulance system you're formed which

00:05:55,690 --> 00:05:59,470
has got a GPU card or you know it's got

00:05:57,730 --> 00:06:02,050
its got these apple processors have his

00:05:59,470 --> 00:06:04,450
m94 processors which which is the one

00:06:02,050 --> 00:06:06,730
behind all your you know cool things in

00:06:04,450 --> 00:06:08,440
your apple apps actually so there are

00:06:06,730 --> 00:06:11,650
these poor processes they are hard to

00:06:08,440 --> 00:06:13,300
cpus so in our core processors or in our

00:06:11,650 --> 00:06:15,430
systems which may not even have an

00:06:13,300 --> 00:06:18,160
operating system it might be bare metal

00:06:15,430 --> 00:06:20,950
so how can open it we pop that palm

00:06:18,160 --> 00:06:24,310
which doesn't have an oil it's very walk

00:06:20,950 --> 00:06:27,040
to it so the diving into Oh get another

00:06:24,310 --> 00:06:29,290
standard which is put together by multi

00:06:27,040 --> 00:06:31,030
for association that's the link and i

00:06:29,290 --> 00:06:33,790
can give you the slides if you're

00:06:31,030 --> 00:06:36,010
interested so multi-core association is

00:06:33,790 --> 00:06:38,140
basically a standard programming model

00:06:36,010 --> 00:06:40,570
again and there are more than geez

00:06:38,140 --> 00:06:42,880
listed over here for members of our

00:06:40,570 --> 00:06:44,980
association including University of

00:06:42,880 --> 00:06:47,620
Houston and in diversity of Delaware

00:06:44,980 --> 00:06:49,330
will also become a member of mca so we

00:06:47,620 --> 00:06:52,450
have texas instruments qualcomm siemens

00:06:49,330 --> 00:06:54,430
etc so what is what are these guys do we

00:06:52,450 --> 00:06:56,260
know there's HTML issues programming

00:06:54,430 --> 00:06:58,540
aspects prevalent systems so what these

00:06:56,260 --> 00:07:01,580
guys do is they have created a pee Ice

00:06:58,540 --> 00:07:04,669
that will help you manage the resources

00:07:01,580 --> 00:07:06,409
me save for enforce a PSP course OTP of

00:07:04,669 --> 00:07:09,349
course or you know any sort of those

00:07:06,409 --> 00:07:12,349
specialized accelerators and be able to

00:07:09,349 --> 00:07:17,120
communicate across course across four

00:07:12,349 --> 00:07:18,620
hours or on have a PST audio communicate

00:07:17,120 --> 00:07:20,810
between those two different types of

00:07:18,620 --> 00:07:23,360
platforms so you will be able to

00:07:20,810 --> 00:07:25,669
communicate with MCA api's and fasting

00:07:23,360 --> 00:07:28,400
which is becoming south in programming

00:07:25,669 --> 00:07:30,560
model these days to be used so mca has

00:07:28,400 --> 00:07:33,219
come up with the past parallelism kind

00:07:30,560 --> 00:07:36,590
of an API which allows you to create

00:07:33,219 --> 00:07:38,840
initialized if you analyze dependencies

00:07:36,590 --> 00:07:42,199
between tasks and you know make the

00:07:38,840 --> 00:07:43,900
class parallelism as possible the forum

00:07:42,199 --> 00:07:46,129
here whatever

00:07:43,900 --> 00:07:48,379
so what did we want to do in this

00:07:46,129 --> 00:07:50,569
research we know openmp exist we know

00:07:48,379 --> 00:07:53,389
MCA if this kind of exists for the pool

00:07:50,569 --> 00:07:55,879
industry standards so what we wanted to

00:07:53,389 --> 00:07:57,979
do is somebody should be able to create

00:07:55,879 --> 00:08:01,129
an application written and openmp that

00:07:57,979 --> 00:08:03,740
you know is easy and we wanted to

00:08:01,129 --> 00:08:06,110
translate on an NP to the multiverse

00:08:03,740 --> 00:08:08,000
kind of Association API layer which

00:08:06,110 --> 00:08:10,490
gives you a capillary will communicate

00:08:08,000 --> 00:08:13,699
of managed and export asks underneath

00:08:10,490 --> 00:08:15,280
and on a platform which may be has in

00:08:13,699 --> 00:08:18,010
our powers which may be has

00:08:15,280 --> 00:08:20,170
or might be poisonous bare metal and

00:08:18,010 --> 00:08:22,300
then you could forget the underlying

00:08:20,170 --> 00:08:25,540
platforms which could be anything so

00:08:22,300 --> 00:08:28,139
this is our software solution snack

00:08:25,540 --> 00:08:31,450
opening on an MCA and the car get well

00:08:28,139 --> 00:08:35,110
then how did you do it so this talk is

00:08:31,450 --> 00:08:37,159
going to focus on the asker ilysm but in

00:08:35,110 --> 00:08:38,839
the past or we have used

00:08:37,159 --> 00:08:40,930
resource management as well as

00:08:38,839 --> 00:08:45,170
communication management

00:08:40,930 --> 00:08:48,320
and perform successfully published an

00:08:45,170 --> 00:08:52,110
ipsw works out and take on an LCD years

00:08:48,320 --> 00:08:53,670
Exeter I'm saying this because fine

00:08:52,110 --> 00:08:56,900
you need to know the difference between

00:08:53,670 --> 00:08:59,550
what Cassandra passed in

00:08:56,900 --> 00:09:01,140
so diving into the multicolored fast

00:08:59,550 --> 00:09:02,460
manage going to tell so this is what I

00:09:01,140 --> 00:09:06,600
was talking about you have an

00:09:02,460 --> 00:09:08,610
application write an application in nvm

00:09:06,600 --> 00:09:12,270
cells and Patrick appear starting point

00:09:08,610 --> 00:09:15,570
and heavy API is going to small lots of

00:09:12,270 --> 00:09:17,820
tasks and it has this am happy one time

00:09:15,570 --> 00:09:19,920
layer which also coordinates with the

00:09:17,820 --> 00:09:22,920
communication API and the resource

00:09:19,920 --> 00:09:26,220
management API and you have four cores

00:09:22,920 --> 00:09:28,500
of pi K or the five big O's of X equal

00:09:26,220 --> 00:09:31,230
so this is what the M that is trying to

00:09:28,500 --> 00:09:33,030
accomplish a very type of course and

00:09:31,230 --> 00:09:35,850
this is stas parallel programming model

00:09:33,030 --> 00:09:37,950
and start with all written in EM copy of

00:09:35,850 --> 00:09:40,170
your duty translate and go down to the

00:09:37,950 --> 00:09:42,880
Lord

00:09:40,170 --> 00:09:44,890
overview of empathy is basically an

00:09:42,880 --> 00:09:47,560
industry standard quantity of a lots of

00:09:44,890 --> 00:09:49,990
industry and Stevens Germany has a major

00:09:47,560 --> 00:09:52,360
role to play in applicator reading

00:09:49,990 --> 00:09:54,800
move along with any suggestion welcome

00:09:52,360 --> 00:09:57,380
excess instrumental

00:09:54,800 --> 00:09:59,800
it's scalable and enter key

00:09:57,380 --> 00:10:02,959
specification is designed in flames see

00:09:59,800 --> 00:10:06,050
you on top of any kind of voice or even

00:10:02,959 --> 00:10:08,769
bare metal the implementations that you

00:10:06,050 --> 00:10:08,769
will find online

00:10:09,189 --> 00:10:14,920
Houston mcat the implementation which is

00:10:12,470 --> 00:10:17,389
open source and there is a github

00:10:14,920 --> 00:10:20,720
available online if you don't find it

00:10:17,389 --> 00:10:22,519
again I'm you rightly there is another

00:10:20,720 --> 00:10:24,589
open source implementation that Siemens

00:10:22,519 --> 00:10:26,930
came up with and it's part of their

00:10:24,589 --> 00:10:29,960
larger product PMDB so these are the

00:10:26,930 --> 00:10:33,110
phone communications out there

00:10:29,960 --> 00:10:36,380
so a little bit about the impacting

00:10:33,110 --> 00:10:38,600
teachers themselves you have costs a few

00:10:36,380 --> 00:10:40,640
systems is working so right we have

00:10:38,600 --> 00:10:42,800
course of different heights and the

00:10:40,640 --> 00:10:44,510
tasks are viewed upon and different

00:10:42,800 --> 00:10:46,250
views you have local fuse global cues in

00:10:44,510 --> 00:10:48,560
the pinnacle point where your pores are

00:10:46,250 --> 00:10:50,210
the course kind of take tasks from each

00:10:48,560 --> 00:10:53,780
of the fuse the same to all those

00:10:50,210 --> 00:10:55,520
different platforms so the in the really

00:10:53,780 --> 00:10:56,780
good thing we always to know that these

00:10:55,520 --> 00:10:59,000
are the commonalities what I'm happy

00:10:56,780 --> 00:11:02,450
there is a job there is an action and

00:10:59,000 --> 00:11:04,130
there is a pass meaning you could every

00:11:02,450 --> 00:11:05,570
unhappy job is describing what is the

00:11:04,130 --> 00:11:07,160
work that you are going which is

00:11:05,570 --> 00:11:10,070
technically your job plain and simple

00:11:07,160 --> 00:11:13,160
and action is basically it could be a

00:11:10,070 --> 00:11:16,130
hard erection of a software action one

00:11:13,160 --> 00:11:19,640
job and have multiple actions which

00:11:16,130 --> 00:11:22,820
means an action and go on for a action

00:11:19,640 --> 00:11:25,490
be and go on for type of people so you

00:11:22,820 --> 00:11:27,050
have multiple actions on job and several

00:11:25,490 --> 00:11:28,940
different platforms you can target and

00:11:27,050 --> 00:11:30,380
hospice we already know what it asked us

00:11:28,940 --> 00:11:33,380
to lightweight operation and find

00:11:30,380 --> 00:11:35,779
Valerie so we did it with a kind of

00:11:33,380 --> 00:11:38,209
experimental approaches using

00:11:35,779 --> 00:11:42,980
and that we as a standalone application

00:11:38,209 --> 00:11:45,139
writes a chord using a happy a and B you

00:11:42,980 --> 00:11:47,269
write record and OpenMP and translate

00:11:45,139 --> 00:11:50,389
that with happy so quickly let's look

00:11:47,269 --> 00:11:52,220
into how both of them swear so this

00:11:50,389 --> 00:11:54,740
might look overwhelming but the bottom

00:11:52,220 --> 00:11:56,869
line is destruction of how you create

00:11:54,740 --> 00:11:59,749
tasks and how you start assigning it to

00:11:56,869 --> 00:12:01,399
the course or you schedule them and in a

00:11:59,749 --> 00:12:03,499
work sort of scheduling algorithms you

00:12:01,399 --> 00:12:05,689
can employ when does the car gets

00:12:03,499 --> 00:12:07,550
finalized when does it gets killed and

00:12:05,689 --> 00:12:09,980
you know when you start moving things

00:12:07,550 --> 00:12:12,470
around and that structural perspective

00:12:09,980 --> 00:12:13,459
flow so it's quickly if they go through

00:12:12,470 --> 00:12:15,829
the initial

00:12:13,459 --> 00:12:18,170
the job action you pay the past great

00:12:15,829 --> 00:12:20,179
for the task if it's performing some if

00:12:18,170 --> 00:12:22,550
not respect to another cast so on so

00:12:20,179 --> 00:12:24,470
forth and there is an M copy layer

00:12:22,550 --> 00:12:26,149
basically because in your embedded

00:12:24,470 --> 00:12:28,610
systems you are going to have course of

00:12:26,149 --> 00:12:30,309
four bikes right now man GPU so how do

00:12:28,610 --> 00:12:32,600
you communicate between an interview

00:12:30,309 --> 00:12:35,329
communication layer so this could be

00:12:32,600 --> 00:12:37,579
your host or which is your CPU and that

00:12:35,329 --> 00:12:39,079
could be your DP you I'm pleased to hear

00:12:37,579 --> 00:12:42,709
so you're communicating between both the

00:12:39,079 --> 00:12:46,040
layers the platforms that we use to test

00:12:42,709 --> 00:12:48,980
our silver in the platform eight ports

00:12:46,040 --> 00:12:51,139
direction organization of actually

00:12:48,980 --> 00:12:53,899
working before going off the end of

00:12:51,139 --> 00:12:57,679
existence and we also tested it on an

00:12:53,899 --> 00:13:01,009
nvidia Jetson TK 1 which got four plus

00:12:57,679 --> 00:13:03,019
one the whiteboard arm cortex and a

00:13:01,009 --> 00:13:05,240
Kepler GPU with wanted to do for reports

00:13:03,019 --> 00:13:09,150
the compilers for both of platforms

00:13:05,240 --> 00:13:11,040
respective your x86 GCC and MVC

00:13:09,150 --> 00:13:13,089
wardens and the benchmarks that we

00:13:11,040 --> 00:13:19,250
tested

00:13:13,089 --> 00:13:21,350
barcelona the reference implementation

00:13:19,250 --> 00:13:25,520
stem cells are Simmons empathy knows

00:13:21,350 --> 00:13:27,709
openmp implementation as well as I think

00:13:25,520 --> 00:13:29,480
one more one of the atmosphere was open

00:13:27,709 --> 00:13:32,310
you ate

00:13:29,480 --> 00:13:36,120
okay let's look at some results it is

00:13:32,310 --> 00:13:39,029
the last few Slater so stand alone uhm

00:13:36,120 --> 00:13:41,760
Cappy evaluation based on that we use

00:13:39,029 --> 00:13:46,470
for this farce Lu so we look at the

00:13:41,760 --> 00:13:49,050
rafters you have for course or 430 on

00:13:46,470 --> 00:13:51,779
pinned El platform virtual screen doors

00:13:49,050 --> 00:13:54,450
and then you have for our ports and the

00:13:51,779 --> 00:13:56,450
gray scale your looks is your GCC the

00:13:54,450 --> 00:13:59,040
pillow openmp task

00:13:56,450 --> 00:14:00,720
given time kappa and you ate in cafes

00:13:59,040 --> 00:14:03,840
and fermentation two different types of

00:14:00,720 --> 00:14:06,810
scheduling so they see that even after

00:14:03,840 --> 00:14:08,610
introducing the M capping layer we don't

00:14:06,810 --> 00:14:11,010
see an overhead compared to who knows

00:14:08,610 --> 00:14:12,450
open a cleanup indentation which a new

00:14:11,010 --> 00:14:14,880
service are you can play with it even

00:14:12,450 --> 00:14:18,270
more and this is even better because

00:14:14,880 --> 00:14:20,310
siemens and kathy still does not have to

00:14:18,270 --> 00:14:22,410
a capital e to communicate between two

00:14:20,310 --> 00:14:24,420
different type of course and that's why

00:14:22,410 --> 00:14:27,120
you see a bit of a deputy so they're

00:14:24,420 --> 00:14:29,640
working on it and we have GCC open our

00:14:27,120 --> 00:14:32,310
ego and we have uhm happy you know both

00:14:29,640 --> 00:14:35,070
the scheduling back post and DCC open

00:14:32,310 --> 00:14:37,380
until your is available as part of the

00:14:35,070 --> 00:14:39,930
jensen ta1 software so i believe it's a

00:14:37,380 --> 00:14:41,070
fine-tuned open and reading orientation

00:14:39,930 --> 00:14:43,380
because it's part of the dips and he

00:14:41,070 --> 00:14:46,050
came on software package so comparing

00:14:43,380 --> 00:14:49,020
that against our own uhm happy which is

00:14:46,050 --> 00:14:50,910
pretty good again put speed up as a

00:14:49,020 --> 00:14:52,920
serial port and we don't have an

00:14:50,910 --> 00:14:55,260
overhead Pickers to introduce the m

00:14:52,920 --> 00:14:58,200
kappa layer which means you know I

00:14:55,260 --> 00:14:59,459
post-war the prototype implementation so

00:14:58,200 --> 00:15:01,740
this is the picture

00:14:59,459 --> 00:15:04,290
find a show where you have a job and it

00:15:01,740 --> 00:15:06,300
could go in prepared to actions one

00:15:04,290 --> 00:15:08,759
action could be a Buddha nor what i can

00:15:06,300 --> 00:15:10,079
put your processor or what have you so

00:15:08,759 --> 00:15:12,449
the action would be anything it doesn't

00:15:10,079 --> 00:15:14,519
need to be a cpu action per se which is

00:15:12,449 --> 00:15:17,310
the beauty of using costs and happy

00:15:14,519 --> 00:15:18,910
tasks on the type of car parts

00:15:17,310 --> 00:15:22,420
um

00:15:18,910 --> 00:15:23,950
so this one is talking about you know so

00:15:22,420 --> 00:15:26,200
we're quite quite it why do we have this

00:15:23,950 --> 00:15:28,840
hypothesis significance of this so we

00:15:26,200 --> 00:15:32,350
use the uhm happy implementation and we

00:15:28,840 --> 00:15:35,050
created several different approaches one

00:15:32,350 --> 00:15:38,620
of God was vanilla cpu sequential which

00:15:35,050 --> 00:15:42,270
is your way of our am happy cpu like em

00:15:38,620 --> 00:15:44,680
copies one action is going to CPU

00:15:42,270 --> 00:15:47,500
actions on his way to see me

00:15:44,680 --> 00:15:49,870
you and empathy single action to GPU

00:15:47,500 --> 00:15:52,149
which one is in the quarterback so

00:15:49,870 --> 00:15:54,010
underneath so obviously could add us the

00:15:52,149 --> 00:15:57,130
best we all know prod us the best on

00:15:54,010 --> 00:15:59,980
NVIDIA GPUs on the so this this picture

00:15:57,130 --> 00:16:02,440
was to show that although because your

00:15:59,980 --> 00:16:06,100
great speed up using an app EDP you but

00:16:02,440 --> 00:16:07,750
you could call a puter action using an M

00:16:06,100 --> 00:16:09,670
happy action which means you could call

00:16:07,750 --> 00:16:11,800
any other action which was going to be

00:16:09,670 --> 00:16:14,500
necessarily a product a good action

00:16:11,800 --> 00:16:17,200
works on a GPU but it could be a dsb

00:16:14,500 --> 00:16:20,080
actually could work on a TI platform so

00:16:17,200 --> 00:16:22,270
on so forth so this is a graph that just

00:16:20,080 --> 00:16:24,640
sure that it works and happy different

00:16:22,270 --> 00:16:26,320
options on the platforms it's a working

00:16:24,640 --> 00:16:29,240
prototype

00:16:26,320 --> 00:16:31,580
so so far we only saw a poor that was

00:16:29,240 --> 00:16:34,880
written using em dirty this one is okay

00:16:31,580 --> 00:16:37,610
so unhappy is still a low-level API of

00:16:34,880 --> 00:16:40,040
the obstructed even further so why can't

00:16:37,610 --> 00:16:41,720
I write a cordon open and pink right we

00:16:40,040 --> 00:16:43,700
have used open a few tasks which is

00:16:41,720 --> 00:16:45,430
definitely an easier way the program now

00:16:43,700 --> 00:16:47,740
spaced

00:16:45,430 --> 00:16:50,230
so why don't I use an open and ill just

00:16:47,740 --> 00:16:53,020
becoming more and translate that we

00:16:50,230 --> 00:16:56,970
initially saw works and try and invent

00:16:53,020 --> 00:17:00,850
that on the same different levels so to

00:16:56,970 --> 00:17:06,189
give you a brief idea asking constructs

00:17:00,850 --> 00:17:07,630
and API is so that's the picture I

00:17:06,189 --> 00:17:09,880
wanted to get to so you have an open up

00:17:07,630 --> 00:17:13,120
the application Tyler translates that

00:17:09,880 --> 00:17:15,300
and it's actually the thoughts on the

00:17:13,120 --> 00:17:17,530
top it's also building activity in

00:17:15,300 --> 00:17:19,420
library which is the one that we

00:17:17,530 --> 00:17:20,589
designed and eventually you would see

00:17:19,420 --> 00:17:22,959
that it gets linked in there is an

00:17:20,589 --> 00:17:24,870
executable created for the type of the

00:17:22,959 --> 00:17:28,870
platform that we were targeting for your

00:17:24,870 --> 00:17:31,240
openmp application so compiler front and

00:17:28,870 --> 00:17:33,220
consoling OpenMP and chem packet

00:17:31,240 --> 00:17:35,050
function calls and you implemented at

00:17:33,220 --> 00:17:37,360
the constant calls and convert OpenMP

00:17:35,050 --> 00:17:41,530
tasks to objects and then you do the

00:17:37,360 --> 00:17:43,720
linking eventually if your executable so

00:17:41,530 --> 00:17:45,929
quickly looking at the evaluation of an

00:17:43,720 --> 00:17:50,350
open and be translated and happy

00:17:45,929 --> 00:17:52,990
implementation we see a lip balm rtl and

00:17:50,350 --> 00:17:55,780
we see an open and peace instead of em

00:17:52,990 --> 00:17:58,420
happy our gear and we actually see the

00:17:55,780 --> 00:18:01,030
game bar going better at times compared

00:17:58,420 --> 00:18:04,160
to the purple bar which is your

00:18:01,030 --> 00:18:05,929
again a point in North yer is that the

00:18:04,160 --> 00:18:08,570
scroll station did not force overhead

00:18:05,929 --> 00:18:12,340
and we evaluate with that using a TCC's

00:18:08,570 --> 00:18:12,340
OpenMP micro benchmarks that

00:18:14,650 --> 00:18:17,070
very well

00:18:17,120 --> 00:18:23,000
yes the bottom line is you know there

00:18:19,940 --> 00:18:25,090
was no to use an open ft cord which is

00:18:23,000 --> 00:18:29,170
easier to write than fix

00:18:25,090 --> 00:18:34,300
okay so until what we knew was we wanted

00:18:29,170 --> 00:18:35,750
to explore pastoralism in forum be

00:18:34,300 --> 00:18:38,060
required forms

00:18:35,750 --> 00:18:39,860
faded a fast paced implementation goal

00:18:38,060 --> 00:18:41,420
was to use industry standards because

00:18:39,860 --> 00:18:44,630
you want to be able to program better

00:18:41,420 --> 00:18:46,640
and not for too low level and extract

00:18:44,630 --> 00:18:50,270
oil will details at the programmers let

00:18:46,640 --> 00:18:51,650
afraid so we did this we used in da

00:18:50,270 --> 00:18:53,450
streets

00:18:51,650 --> 00:18:55,400
translator openmp I'm happy which is

00:18:53,450 --> 00:18:57,710
even better for the industry standards

00:18:55,400 --> 00:19:00,500
one is high level one is imperative you

00:18:57,710 --> 00:19:02,150
know there were so further abstraction

00:19:00,500 --> 00:19:04,730
because we've got in an open entry level

00:19:02,150 --> 00:19:06,800
here the program we're still years after

00:19:04,730 --> 00:19:08,990
software development obviously passed a

00:19:06,800 --> 00:19:10,820
TPM the program managers are happy

00:19:08,990 --> 00:19:13,910
because the product was out in the

00:19:10,820 --> 00:19:15,860
market faster and report once you use

00:19:13,910 --> 00:19:18,020
multiple times that's the reason why I

00:19:15,860 --> 00:19:20,240
showed the mcat reaction could be spun

00:19:18,020 --> 00:19:22,820
into a quarter note for a cpu note or a

00:19:20,240 --> 00:19:25,220
DSP know so that's a beauty of writing

00:19:22,820 --> 00:19:27,260
ones and using a 22 times when we

00:19:25,220 --> 00:19:29,510
targeted on more than one platform so it

00:19:27,260 --> 00:19:31,520
was good to see that it's not just india

00:19:29,510 --> 00:19:36,700
but you know if you ought to work on arm

00:19:31,520 --> 00:19:41,770
was GPU the power

00:19:36,700 --> 00:19:44,430
and this is published hpc and looking

00:19:41,770 --> 00:19:44,430
for then p.m.

00:19:47,310 --> 00:19:50,310

YouTube URL: https://www.youtube.com/watch?v=3uFIbTq6tU0


