Title: New Features in OpenMP 4.0 API Specs - YongHong Yan - SC13
Publication date: 2014-12-13
Playlist: SC13
Description: 
	From Supercomputing 13, November 19, 2013, Denver CO.
YongHong Yan (U. of Houston) gives an overview of the new features in the OpenMP 4.0 API specifications.
Captions: 
	00:00:01,110 --> 00:00:04,469
okay thank you

00:00:07,100 --> 00:00:14,309
it's a Stan okay thank you for coming we

00:00:11,910 --> 00:00:17,400
try it will tell you what the new

00:00:14,309 --> 00:00:20,610
feature in the opening p40 and my slide

00:00:17,400 --> 00:00:23,820
is the it's very technical what I mean

00:00:20,610 --> 00:00:26,130
not a lot of feeder or animation but I

00:00:23,820 --> 00:00:28,800
will try to explain the concept an idea

00:00:26,130 --> 00:00:30,660
in the spec as much as I can so in my

00:00:28,800 --> 00:00:32,550
mind my name is yo homie I'm from the

00:00:30,660 --> 00:00:35,129
university of houston we do all our

00:00:32,550 --> 00:00:37,650
research intern with the open p extend

00:00:35,129 --> 00:00:41,640
the OMP oh maybe compiler right I'm

00:00:37,650 --> 00:00:44,070
research so and ok what it open be I'm

00:00:41,640 --> 00:00:46,769
going to stick skip this slide but just

00:00:44,070 --> 00:00:48,900
make sure you know we all have like open

00:00:46,769 --> 00:00:52,589
p hat is AP I have to ride in shared

00:00:48,900 --> 00:00:55,530
memory programming has I don't remember

00:00:52,589 --> 00:00:57,900
exactly number 27 something number from

00:00:55,530 --> 00:01:02,089
both the industry National Lab and

00:00:57,900 --> 00:01:02,089
academia okay

00:01:02,870 --> 00:01:10,040
and from both industry and national lab

00:01:06,350 --> 00:01:12,710
at a premium John spectrum and OPP for

00:01:10,040 --> 00:01:15,920
our zero is release on july two thousand

00:01:12,710 --> 00:01:19,700
thirteen and the spec is on the website

00:01:15,920 --> 00:01:23,479
and at least all this new feature from

00:01:19,700 --> 00:01:26,300
three dollar 1240 and all these a

00:01:23,479 --> 00:01:27,649
section number here so if you get it

00:01:26,300 --> 00:01:29,720
wrong you get at least slide you want to

00:01:27,649 --> 00:01:32,030
quick reference from the spec you can

00:01:29,720 --> 00:01:34,630
just a point blue section number so

00:01:32,030 --> 00:01:37,610
basically we have the photo zero had

00:01:34,630 --> 00:01:39,979
accelerators to pour ce midi extension

00:01:37,610 --> 00:01:42,950
and a place and a thread hierarchy

00:01:39,979 --> 00:01:44,649
affinity has group classes group at a

00:01:42,950 --> 00:01:47,240
dependent husk error handling

00:01:44,649 --> 00:01:49,369
user-defined a reduction and secretion

00:01:47,240 --> 00:01:53,300
consisting the Atomics and unfortunate

00:01:49,369 --> 00:01:55,220
2003 so it's a big big addition and my

00:01:53,300 --> 00:01:57,560
view is it's probably the largest

00:01:55,220 --> 00:02:02,149
addition so far internally or maybe

00:01:57,560 --> 00:02:03,920
history issue of this reversion and the

00:02:02,149 --> 00:02:05,600
i'm going to goes through each of them

00:02:03,920 --> 00:02:07,630
at the mansion event can so feel free to

00:02:05,600 --> 00:02:10,729
stop being for any question and

00:02:07,630 --> 00:02:13,099
accelerator model and its base song I'm

00:02:10,729 --> 00:02:15,830
summarizing streets kissing accelerator

00:02:13,099 --> 00:02:18,050
model first off loading so the code and

00:02:15,830 --> 00:02:20,209
the data how to be offloaded to the

00:02:18,050 --> 00:02:23,000
accelerator at least how the hardware is

00:02:20,209 --> 00:02:25,550
design this is a basic concept so the

00:02:23,000 --> 00:02:28,280
language interface will design has is

00:02:25,550 --> 00:02:31,069
called OMP target it is it targeted the

00:02:28,280 --> 00:02:33,290
directive that tell the compiler that

00:02:31,069 --> 00:02:37,989
this code over region need to be

00:02:33,290 --> 00:02:41,780
offloaded to a target device it's it's a

00:02:37,989 --> 00:02:44,060
the recording device basically it

00:02:41,780 --> 00:02:47,330
determined using in the cloth is the

00:02:44,060 --> 00:02:50,599
device and the map is a cloth that tail

00:02:47,330 --> 00:02:52,160
which stayed to be offloaded so is aim

00:02:50,599 --> 00:02:55,700
to working with different kind of

00:02:52,160 --> 00:03:00,530
accelerator including GPGPU Mike DSP and

00:02:55,700 --> 00:03:02,690
fpga and this isn't anywhere interesting

00:03:00,530 --> 00:03:05,120
you know you can think of a remote node

00:03:02,690 --> 00:03:07,099
at something like accelerate can offload

00:03:05,120 --> 00:03:10,400
something but it is not something

00:03:07,099 --> 00:03:12,499
designing the in the user one or

00:03:10,400 --> 00:03:14,239
something designer we want but you can

00:03:12,499 --> 00:03:15,490
explore this capability if you have

00:03:14,239 --> 00:03:19,000
combined or n times

00:03:15,490 --> 00:03:21,550
and the right if some time the

00:03:19,000 --> 00:03:23,680
accelerator had digital memory compared

00:03:21,550 --> 00:03:26,230
with the horse and the remoter know that

00:03:23,680 --> 00:03:29,140
the same scene so that's one scene

00:03:26,230 --> 00:03:32,440
offloading and the next slide slide

00:03:29,140 --> 00:03:35,400
number five I'm give you a white example

00:03:32,440 --> 00:03:37,300
and this is a very simple vector

00:03:35,400 --> 00:03:40,930
multiplication vector magic in

00:03:37,300 --> 00:03:42,760
multiplication respectfully and this is

00:03:40,930 --> 00:03:45,670
a region of the way I'm putting in the

00:03:42,760 --> 00:03:48,070
bracket it is original open peacoat if

00:03:45,670 --> 00:03:50,140
you have this original a comparative are

00:03:48,070 --> 00:03:52,870
you running on CP you not to offload

00:03:50,140 --> 00:03:55,720
released piece of peril loop and the

00:03:52,870 --> 00:03:57,880
more additional program I we added here

00:03:55,720 --> 00:04:00,090
is put a target now telling the compiler

00:03:57,880 --> 00:04:02,650
list piece of apparel code will be

00:04:00,090 --> 00:04:05,080
absolutely to the to the accelerator

00:04:02,650 --> 00:04:09,070
then tell the compiler how we want to

00:04:05,080 --> 00:04:11,860
map map the date so basically a a weaver

00:04:09,070 --> 00:04:14,110
and a beat a to array and the compiler

00:04:11,860 --> 00:04:16,510
should be figure out to be able to

00:04:14,110 --> 00:04:18,220
figure out the side of that array and

00:04:16,510 --> 00:04:20,770
they do the data movement over the whole

00:04:18,220 --> 00:04:25,330
Iranian said oh just copy that a pointer

00:04:20,770 --> 00:04:27,460
so that's a to its mean from the host to

00:04:25,330 --> 00:04:29,770
the accelerator and same thing from is a

00:04:27,460 --> 00:04:33,790
result come back from the filter to the

00:04:29,770 --> 00:04:35,950
host so that's one and the second

00:04:33,790 --> 00:04:38,590
example it's basically more information

00:04:35,950 --> 00:04:40,210
to the to the compiler you know

00:04:38,590 --> 00:04:41,890
sometimes if computers you feel

00:04:40,210 --> 00:04:44,830
difficult for the compiler to figure out

00:04:41,890 --> 00:04:47,890
that array for exam in this example the

00:04:44,830 --> 00:04:49,990
component lattices for this procedure

00:04:47,890 --> 00:04:52,390
can find all this is P wave that it's

00:04:49,990 --> 00:04:54,790
any size of an array but in this example

00:04:52,390 --> 00:04:58,090
is passing by pointer so if a compiler

00:04:54,790 --> 00:05:00,280
only capable or I miss its most boost

00:04:58,090 --> 00:05:02,080
compiler the only are not analyze the

00:05:00,280 --> 00:05:04,210
code or only transform of the code based

00:05:02,080 --> 00:05:06,070
on a procedure so inter procedure now

00:05:04,210 --> 00:05:08,830
sometimes very hard especially if you

00:05:06,070 --> 00:05:10,660
have a library code so now we have to

00:05:08,830 --> 00:05:13,330
give a compiler more information here so

00:05:10,660 --> 00:05:15,820
this is pointer and how long that a

00:05:13,330 --> 00:05:17,950
region going to be a hadoop gay with

00:05:15,820 --> 00:05:20,440
more information that from these are

00:05:17,950 --> 00:05:22,270
dress from foe totally ain't number of

00:05:20,440 --> 00:05:24,850
animate that can give more information

00:05:22,270 --> 00:05:26,620
to compiler to generate a code today

00:05:24,850 --> 00:05:27,740
right hand code to do the offloading of

00:05:26,620 --> 00:05:32,810
a date

00:05:27,740 --> 00:05:35,919
I think I know that the box code is

00:05:32,810 --> 00:05:35,919
offloaded like

00:05:37,230 --> 00:05:42,000
yeah the questions it is implied the

00:05:39,900 --> 00:05:49,730
peril region code of load of the Jeep to

00:05:42,000 --> 00:05:49,730
the accelerator answered yes a 40 GPU

00:05:53,960 --> 00:05:59,940
yes I will have more detail okay by the

00:05:57,000 --> 00:06:02,130
default of this bag tell you this piece

00:05:59,940 --> 00:06:04,110
of code going to run if they don't have

00:06:02,130 --> 00:06:08,010
this powerful it's going to write on

00:06:04,110 --> 00:06:09,840
wine spread its assuming the remote node

00:06:08,010 --> 00:06:11,880
had the motive of thread without but

00:06:09,840 --> 00:06:14,040
this is standard opening p so it's a

00:06:11,880 --> 00:06:15,480
baby tell that remote aside you had

00:06:14,040 --> 00:06:17,160
along to the opening people are reaching

00:06:15,480 --> 00:06:19,640
and there's a parallel loop to do the

00:06:17,160 --> 00:06:19,640
loop chunky

00:06:20,120 --> 00:06:26,820
questions puts their mine at the top one

00:06:24,260 --> 00:06:35,870
stack Mason lost Mallory

00:06:26,820 --> 00:06:35,870
ah yes

00:06:39,199 --> 00:06:46,050
still game series like can you pass like

00:06:42,629 --> 00:06:48,419
the rain projects so we the question is

00:06:46,050 --> 00:06:50,610
whether you can pass a c.c processor

00:06:48,419 --> 00:06:52,439
array object kind of scene oh that's

00:06:50,610 --> 00:06:56,729
probably tough for the compiler to do

00:06:52,439 --> 00:07:00,659
that is you know the the deep copy kind

00:06:56,729 --> 00:07:03,210
of thing it's a the big open expect pou

00:07:00,659 --> 00:07:05,849
least a way to do that and allow you to

00:07:03,210 --> 00:07:09,149
do a specific rate region not messing

00:07:05,849 --> 00:07:11,370
from zero from any to a 90 but so far

00:07:09,149 --> 00:07:13,740
only one the mission so if you working

00:07:11,370 --> 00:07:15,870
on the consistency contiguous memory

00:07:13,740 --> 00:07:17,879
space that should be fine multiboot

00:07:15,870 --> 00:07:20,879
dimensional array will be challenging I

00:07:17,879 --> 00:07:22,199
mean it's not it's not it's not undoable

00:07:20,879 --> 00:07:23,999
but it's just challenging for the

00:07:22,199 --> 00:07:26,009
compiler right time to do that if a

00:07:23,999 --> 00:07:29,669
motive on a dimension array non

00:07:26,009 --> 00:07:35,149
contiguous memory space is that possible

00:07:29,669 --> 00:07:35,149
to control data the question would you

00:07:37,880 --> 00:07:43,009
with a previous that created that on my

00:07:41,670 --> 00:07:46,059
GPU

00:07:43,009 --> 00:07:46,059
my front is

00:07:46,790 --> 00:07:52,740
slap and he stuck yeah the question is

00:07:50,370 --> 00:07:54,720
the weather you can reuse the data

00:07:52,740 --> 00:07:57,800
already mapped right yeah they don't

00:07:54,720 --> 00:08:01,170
hurt it yes yes i have an example later

00:07:57,800 --> 00:08:03,450
yeah maybe goes to later as we some some

00:08:01,170 --> 00:08:06,000
only saw example will answer some of

00:08:03,450 --> 00:08:09,030
your questions and this is one off

00:08:06,000 --> 00:08:11,280
loading and the second is the explicit

00:08:09,030 --> 00:08:14,730
maybe I think we already see that so

00:08:11,280 --> 00:08:16,470
that the data mapping is the example we

00:08:14,730 --> 00:08:18,630
just saw is data maybe it's just combine

00:08:16,470 --> 00:08:20,790
it with the code offloading and but

00:08:18,630 --> 00:08:22,920
sometimes that's the other two question

00:08:20,790 --> 00:08:25,860
Bobby and somehow we just want to tell

00:08:22,920 --> 00:08:27,840
we on offload this piece of data but not

00:08:25,860 --> 00:08:29,820
a code here is the example call it

00:08:27,840 --> 00:08:32,180
targeted data the reason I put it on

00:08:29,820 --> 00:08:35,669
bracket the target ad is a combined

00:08:32,180 --> 00:08:39,930
directive if the data is not a clause of

00:08:35,669 --> 00:08:43,740
a target a directive so targeted date is

00:08:39,930 --> 00:08:45,480
tail are only offload date but if you

00:08:43,740 --> 00:08:49,850
just targeted direct means overload the

00:08:45,480 --> 00:08:53,220
both state and a code so in this example

00:08:49,850 --> 00:08:55,670
for this is code block here and I tell

00:08:53,220 --> 00:08:59,520
the compiler won't ask offloaded loose

00:08:55,670 --> 00:09:02,010
array a B and another Arabia Skinner

00:08:59,520 --> 00:09:04,770
where I Bowie and a be an array array

00:09:02,010 --> 00:09:08,340
and least offloading will be only

00:09:04,770 --> 00:09:10,950
applied to least code blocks so not

00:09:08,340 --> 00:09:13,410
after that so only after that only we

00:09:10,950 --> 00:09:17,250
did is cool but the code it is still on

00:09:13,410 --> 00:09:18,960
the cpu at this point unless we tell the

00:09:17,250 --> 00:09:21,450
compiler that i won't overload this

00:09:18,960 --> 00:09:23,610
piece of code now so if you have a cold

00:09:21,450 --> 00:09:25,830
raining here is the City of Hope is

00:09:23,610 --> 00:09:27,240
there any on cpu but if you care I tell

00:09:25,830 --> 00:09:29,520
the compiler I want to lose collagen

00:09:27,240 --> 00:09:32,670
least code going to be offered on the

00:09:29,520 --> 00:09:36,420
accelerator and they will inherit these

00:09:32,670 --> 00:09:38,850
data mapping from on the upper level

00:09:36,420 --> 00:09:41,630
code blocks

00:09:38,850 --> 00:09:41,630
let's say

00:09:43,400 --> 00:09:49,350
and let me how are with you the array

00:09:45,840 --> 00:09:51,150
region here you know stop but you know

00:09:49,350 --> 00:09:52,770
the best way it's working I mean the

00:09:51,150 --> 00:09:55,560
easiest way for the comparative support

00:09:52,770 --> 00:10:00,320
as is this is a one dimensional array

00:09:55,560 --> 00:10:00,320
space in your contiguous memory region

00:10:01,089 --> 00:10:05,800
and the targeted at example that's

00:10:03,189 --> 00:10:09,189
example you know basically either in the

00:10:05,800 --> 00:10:13,689
top level of that code block we may

00:10:09,189 --> 00:10:16,689
update our AP so the array p the this

00:10:13,689 --> 00:10:19,029
mapping will be available to this whole

00:10:16,689 --> 00:10:22,180
code region that's why we call the

00:10:19,029 --> 00:10:24,519
Matthew inherent is so in this code

00:10:22,180 --> 00:10:26,290
originally sees this peril loop where we

00:10:24,519 --> 00:10:29,139
offloaded the accelerator that's why you

00:10:26,290 --> 00:10:31,180
can still using p reference it could be

00:10:29,139 --> 00:10:35,319
reference to the date on the accelerator

00:10:31,180 --> 00:10:38,499
on all on the host so here you know the

00:10:35,319 --> 00:10:43,480
least example we only made the weave and

00:10:38,499 --> 00:10:45,850
v2 mapping Foley's target offloading not

00:10:43,480 --> 00:10:48,040
here but aleast example we do another

00:10:45,850 --> 00:10:51,040
man because we we really ensure I that

00:10:48,040 --> 00:10:52,629
we went away to hear this is a you know

00:10:51,040 --> 00:10:54,610
what it called somehow you have to do

00:10:52,629 --> 00:10:57,129
this to type of a mani because they're

00:10:54,610 --> 00:10:59,939
the initialization okay this is having

00:10:57,129 --> 00:10:59,939
on the cpu side

00:11:00,950 --> 00:11:05,880
what is the second one is the third most

00:11:04,110 --> 00:11:08,280
important the hierarchical pallidum you

00:11:05,880 --> 00:11:11,600
know if you look at a GPGPU they have

00:11:08,280 --> 00:11:14,550
like taking the cure term like they have

00:11:11,600 --> 00:11:16,380
agreed or blocks in the wine levels to

00:11:14,550 --> 00:11:19,620
read hierarchy underneath then it's

00:11:16,380 --> 00:11:22,560
called a threat of a block of a strand

00:11:19,620 --> 00:11:24,840
is another second level hierarchy so any

00:11:22,560 --> 00:11:26,580
each level with red anarkali you can

00:11:24,840 --> 00:11:28,470
creat winding machine with the mission

00:11:26,580 --> 00:11:31,260
or 32 mission with authority or reduce

00:11:28,470 --> 00:11:33,630
entity either thread or brawn and what's

00:11:31,260 --> 00:11:37,470
the opening p40 reintroduce it called

00:11:33,630 --> 00:11:41,940
League and legal it's the multiple teams

00:11:37,470 --> 00:11:45,210
and each team contain a number of thread

00:11:41,940 --> 00:11:46,530
so open p help me before we before they

00:11:45,210 --> 00:11:48,330
were there the team contact a team

00:11:46,530 --> 00:11:50,840
leader at the group of thread now

00:11:48,330 --> 00:11:53,460
basically we add one more level of

00:11:50,840 --> 00:11:55,860
organizing that teams between now we

00:11:53,460 --> 00:11:58,740
have can have multiple teams and each

00:11:55,860 --> 00:12:02,250
team have multiple thread ok this is the

00:11:58,740 --> 00:12:04,620
language interface over here their code

00:12:02,250 --> 00:12:07,770
we want offloading and underneath that

00:12:04,620 --> 00:12:09,960
we we create a number of the teams and

00:12:07,770 --> 00:12:12,270
each team have a number of a thread like

00:12:09,960 --> 00:12:16,410
a way of two team is team has a thread

00:12:12,270 --> 00:12:18,030
and now here when we do distribute it's

00:12:16,410 --> 00:12:21,870
basically distribute this pair loop

00:12:18,030 --> 00:12:24,420
among the teams I'm going to show you a

00:12:21,870 --> 00:12:28,080
little example video showed how do this

00:12:24,420 --> 00:12:30,510
further distribution of lube Armada the

00:12:28,080 --> 00:12:33,540
thread of Indian team and the West note

00:12:30,510 --> 00:12:35,910
here so if you have use an open the

00:12:33,540 --> 00:12:39,230
barrier here the barrier only apply

00:12:35,910 --> 00:12:41,940
within a team not across multiple team

00:12:39,230 --> 00:12:44,190
so that's you know something similar to

00:12:41,940 --> 00:12:46,260
the two distinct thread kind of a

00:12:44,190 --> 00:12:48,660
synchronization the barrier only apply

00:12:46,260 --> 00:12:51,090
within a block it is oh maybe the

00:12:48,660 --> 00:12:53,670
barrier only apply within a team not

00:12:51,090 --> 00:12:57,720
across him so far this is what we put

00:12:53,670 --> 00:13:03,890
put the standard provide and some

00:12:57,720 --> 00:13:08,040
example here I Sudan products with team

00:13:03,890 --> 00:13:10,050
so here we have a parallel loop we tell

00:13:08,040 --> 00:13:13,650
the compiler leads the code you need to

00:13:10,050 --> 00:13:14,730
be offloaded the whole are basically the

00:13:13,650 --> 00:13:18,000
whole

00:13:14,730 --> 00:13:19,829
the whole scene here I do I should put a

00:13:18,000 --> 00:13:22,829
line number and the data mapping in the

00:13:19,829 --> 00:13:25,920
BNs see that thing in the next directory

00:13:22,829 --> 00:13:28,350
we create a team and understand and the

00:13:25,920 --> 00:13:29,970
thread the thread limit is this is

00:13:28,350 --> 00:13:31,800
something you know compiler or hardware

00:13:29,970 --> 00:13:34,079
limitation that you want to tell the

00:13:31,800 --> 00:13:37,769
maximum number of a thread or each team

00:13:34,079 --> 00:13:40,290
but you can take a big tail experian how

00:13:37,769 --> 00:13:42,199
many sway you want to create and there

00:13:40,290 --> 00:13:44,310
the reduction we want to apply to

00:13:42,199 --> 00:13:46,740
because we want to consolidate order

00:13:44,310 --> 00:13:49,199
data and it is for Lisa level data

00:13:46,740 --> 00:13:51,209
distribution on other the this is the

00:13:49,199 --> 00:13:53,430
two level of a loop if you look at at

00:13:51,209 --> 00:13:57,600
least code here Lisa level loop we

00:13:53,430 --> 00:14:00,959
create the number of iteration is equal

00:13:57,600 --> 00:14:05,209
to the number of team so basically each

00:14:00,959 --> 00:14:07,860
team will be pick one of the iteration

00:14:05,209 --> 00:14:10,139
the number of GV number blocks and this

00:14:07,860 --> 00:14:12,510
loop the the inner agency based in

00:14:10,139 --> 00:14:16,620
number of love so basically we we a

00:14:12,510 --> 00:14:18,870
multiple team the disc will split these

00:14:16,620 --> 00:14:21,959
parallel loop among multiple team it's

00:14:18,870 --> 00:14:25,019
like the open V parallel for for this

00:14:21,959 --> 00:14:27,209
chunk size that's the one and then

00:14:25,019 --> 00:14:29,310
underneath that it's just a standard or

00:14:27,209 --> 00:14:32,100
MP code because I may be working with

00:14:29,310 --> 00:14:36,149
teams of a thread and in this example

00:14:32,100 --> 00:14:37,980
and for each team there will be they

00:14:36,149 --> 00:14:40,290
were working on this peril loop or

00:14:37,980 --> 00:14:42,209
perform the standard open loop honking

00:14:40,290 --> 00:14:44,399
and there will be another reduction

00:14:42,209 --> 00:14:49,050
having here you're each team you need to

00:14:44,399 --> 00:14:50,819
perform reduction and on top of level or

00:14:49,050 --> 00:14:53,940
a thread of kimmy for instruction there

00:14:50,819 --> 00:14:56,130
on top of level or the league need to

00:14:53,940 --> 00:15:02,449
perform reduction to come with some

00:14:56,130 --> 00:15:02,449
value back to the result next thing

00:15:02,660 --> 00:15:12,790
ah yes that's a that's more easily the

00:15:08,990 --> 00:15:16,639
major you know introduction of these

00:15:12,790 --> 00:15:19,730
opening p40 accelerate support there are

00:15:16,639 --> 00:15:24,019
other features but nada not that's not

00:15:19,730 --> 00:15:26,209
uh at the key point here and the wines

00:15:24,019 --> 00:15:29,689
needed a clear target if there are some

00:15:26,209 --> 00:15:32,540
time if we if people already well some

00:15:29,689 --> 00:15:35,120
library like judaa 2 blocks or to die of

00:15:32,540 --> 00:15:36,350
ft I just want to call it instead of

00:15:35,120 --> 00:15:38,750
writing your code or write your

00:15:36,350 --> 00:15:42,019
compatible you can declare a target let

00:15:38,750 --> 00:15:44,120
the oldest is this is function is is a

00:15:42,019 --> 00:15:46,339
function running on the accelerator and

00:15:44,120 --> 00:15:48,829
then in that a piece of coal you can

00:15:46,339 --> 00:15:53,199
just call that a function and a target

00:15:48,829 --> 00:15:56,060
update talking about it is something

00:15:53,199 --> 00:16:00,050
here if you want if you want it to

00:15:56,060 --> 00:16:02,529
someone update date on the heart from

00:16:00,050 --> 00:16:05,839
the data only from the copy on the

00:16:02,529 --> 00:16:08,000
accelerate in the middle of this region

00:16:05,839 --> 00:16:12,970
so the data can be copied back or or

00:16:08,000 --> 00:16:15,560
forth from Anna to the accelerator and

00:16:12,970 --> 00:16:17,180
this tutor simile it is another about

00:16:15,560 --> 00:16:20,329
going to shoot here later in the

00:16:17,180 --> 00:16:23,630
internet as simdi support exist a

00:16:20,329 --> 00:16:26,660
sequence offloading using task this is

00:16:23,630 --> 00:16:31,449
something like a combined with open the

00:16:26,660 --> 00:16:35,660
path to support etc I synchronize

00:16:31,449 --> 00:16:39,079
offloading of over code region so you

00:16:35,660 --> 00:16:42,680
don't blocking the cpu to waiting for

00:16:39,079 --> 00:16:45,199
the GPU to complete and re region we

00:16:42,680 --> 00:16:48,680
just mention an if clause is another one

00:16:45,199 --> 00:16:51,230
that you can tell these compiler that if

00:16:48,680 --> 00:16:53,209
certain condition made please to offload

00:16:51,230 --> 00:16:56,059
otherwise please ignore running on the

00:16:53,209 --> 00:16:59,029
host raynham routine right now we

00:16:56,059 --> 00:17:02,779
basically check how many how many device

00:16:59,029 --> 00:17:06,919
on that system you know seeing or set

00:17:02,779 --> 00:17:09,470
the default device to offload code yeah

00:17:06,919 --> 00:17:11,820
that's pretty much of these accelera

00:17:09,470 --> 00:17:15,209
support part

00:17:11,820 --> 00:17:15,209
we had a question

00:17:15,230 --> 00:17:19,150
so I'm aware that as

00:17:21,340 --> 00:17:24,720
what's the status of okay

00:17:24,839 --> 00:17:28,100
eilers that's

00:17:28,370 --> 00:17:36,020
oh yeah this is the release the specs

00:17:32,210 --> 00:17:39,050
just released july there's only wine

00:17:36,020 --> 00:17:41,630
compiler doing this carnival we add a

00:17:39,050 --> 00:17:43,910
support of these photos 0 it is the

00:17:41,630 --> 00:17:48,080
roast combined is at work between us and

00:17:43,910 --> 00:17:50,240
Livermore we do some initial support of

00:17:48,080 --> 00:17:54,350
photos 0 accelerator only accelerated

00:17:50,240 --> 00:17:56,630
par 4 with only for maybe 40 with the

00:17:54,350 --> 00:17:59,510
roast compiler basically we have paper

00:17:56,630 --> 00:18:02,630
in the eye womp published that's the

00:17:59,510 --> 00:18:06,350
only thing I know so far but there's a

00:18:02,630 --> 00:18:09,710
lot of open HTC compiler so we have our

00:18:06,350 --> 00:18:11,780
obviously comparing over us you know

00:18:09,710 --> 00:18:14,270
support to your one of my understand

00:18:11,780 --> 00:18:15,920
it's converting Open City composite

00:18:14,270 --> 00:18:17,750
support of the be further there is not

00:18:15,920 --> 00:18:19,820
that difficult it's mainly the changing

00:18:17,750 --> 00:18:22,250
of the pastor and language in your face

00:18:19,820 --> 00:18:26,300
the underline inside saw machine could

00:18:22,250 --> 00:18:30,610
be leveraged I'm sorry to follow review

00:18:26,300 --> 00:18:30,610
the question the question okay

00:18:31,970 --> 00:18:35,320
can I have a bottle what

00:18:37,860 --> 00:18:42,480
I got a UH

00:18:52,260 --> 00:18:58,900
ok the next big addition needs simdi

00:18:55,420 --> 00:19:02,670
loops and it's basically supported

00:18:58,900 --> 00:19:05,470
Wechter addition of a parallel loop

00:19:02,670 --> 00:19:07,030
architecture that's a head vector so

00:19:05,470 --> 00:19:11,830
there are two interface introduced in

00:19:07,030 --> 00:19:14,530
OMP simdi and OMP force MD and this is

00:19:11,830 --> 00:19:17,500
like applied to a loop that held the

00:19:14,530 --> 00:19:20,290
compiler do lose two vector addition for

00:19:17,500 --> 00:19:22,900
this peril loop and at least also can be

00:19:20,290 --> 00:19:25,720
combined with oh maybe teens and or

00:19:22,900 --> 00:19:27,850
maybe target these are like this will be

00:19:25,720 --> 00:19:31,450
something working with intel xeon five

00:19:27,850 --> 00:19:34,210
in identify it is accelerator it is off

00:19:31,450 --> 00:19:38,260
it's an accelerator and it has very good

00:19:34,210 --> 00:19:41,710
vector vector unit so that's basically

00:19:38,260 --> 00:19:44,290
is were working because at least we'll

00:19:41,710 --> 00:19:46,420
work the distribution here then we

00:19:44,290 --> 00:19:48,730
mentioned this is the combined dispute

00:19:46,420 --> 00:19:51,100
with a parallel fall and this you will

00:19:48,730 --> 00:19:53,740
chunk this peril loop among multiple

00:19:51,100 --> 00:19:56,230
teams and each team get a chunk of

00:19:53,740 --> 00:19:59,230
espero reach this powerful and within

00:19:56,230 --> 00:20:02,470
each chunk they have steam d will be

00:19:59,230 --> 00:20:04,690
applied this is something is pretty I'm

00:20:02,470 --> 00:20:07,300
pretty challenging for programmer now

00:20:04,690 --> 00:20:09,390
you have multiple at least two level or

00:20:07,300 --> 00:20:11,560
paralyze your winterization first

00:20:09,390 --> 00:20:14,110
chunking that trooper more multiple team

00:20:11,560 --> 00:20:15,610
second is talking of a lubricated

00:20:14,110 --> 00:20:18,960
reading you have to apply work tradition

00:20:15,610 --> 00:20:18,960
the combine will apply a tradition

00:20:23,140 --> 00:20:28,390
pounces

00:20:25,370 --> 00:20:28,390
he doesn't work

00:20:30,250 --> 00:20:36,190
yeah the question the question is the

00:20:33,910 --> 00:20:38,380
user you know did it using it in the

00:20:36,190 --> 00:20:39,970
right away right yeah but what's the

00:20:38,380 --> 00:20:43,480
problem what what's what's a compiler

00:20:39,970 --> 00:20:46,330
will house the compiler or will do by my

00:20:43,480 --> 00:20:50,110
answer probably compiler may be confused

00:20:46,330 --> 00:20:52,390
and just you can or that and overcome by

00:20:50,110 --> 00:20:55,000
tell you if combined are smart novel is

00:20:52,390 --> 00:20:56,590
the wrong wrong way over using that tell

00:20:55,000 --> 00:20:59,560
you these are wrong way using it no

00:20:56,590 --> 00:21:01,840
it'sit's komaraiah it's just do whatever

00:20:59,560 --> 00:21:05,970
you can is in a conversion circuit you

00:21:01,840 --> 00:21:05,970
know conservative way that's

00:21:11,870 --> 00:21:15,070
I to argue

00:21:16,370 --> 00:21:19,450
donetta places

00:21:19,710 --> 00:21:25,020
yeah the question is whether the simile

00:21:22,230 --> 00:21:27,120
it's only applied to sue architecture

00:21:25,020 --> 00:21:30,539
that has vectors capability or can be

00:21:27,120 --> 00:21:34,500
applied to other after cads like GPGPU

00:21:30,539 --> 00:21:37,679
right and this also a implementation

00:21:34,500 --> 00:21:41,549
issue so the implementation may kick

00:21:37,679 --> 00:21:46,350
simdi and can work too namely GPU kind

00:21:41,549 --> 00:21:49,350
of model it's all depend if Anna some

00:21:46,350 --> 00:21:51,480
compiler if they don't have a etc

00:21:49,350 --> 00:21:57,870
support the command maybe just paralyzed

00:21:51,480 --> 00:22:00,289
on the cpu as much as you can oh you say

00:21:57,870 --> 00:22:00,289
about this

00:22:00,350 --> 00:22:10,940
quick question Oh the question is what

00:22:07,130 --> 00:22:14,299
AMD sing about this approach oh I really

00:22:10,940 --> 00:22:17,299
don't yeah it's virtually for APU I

00:22:14,299 --> 00:22:20,510
really don't have leased under AMD it's

00:22:17,299 --> 00:22:24,740
part of the openmp center but least this

00:22:20,510 --> 00:22:27,860
Lisa proposal with mainly pretty you

00:22:24,740 --> 00:22:33,370
know champion pilot in hill ah these

00:22:27,860 --> 00:22:33,370
like just to take

00:22:37,159 --> 00:22:40,539
specify do this on the

00:22:44,930 --> 00:22:52,130
yeah they were your comments the weather

00:22:49,580 --> 00:22:56,020
GPU could be just doing that on the APU

00:22:52,130 --> 00:22:56,020
without the copy data or artists

00:22:56,800 --> 00:23:04,780
subsystem

00:22:59,290 --> 00:23:07,540
yeah the my my soul is like this is the

00:23:04,780 --> 00:23:09,490
spec you know how the compiler improv in

00:23:07,540 --> 00:23:12,100
your interpreter spec is completely

00:23:09,490 --> 00:23:14,260
different yeah it can work it's like a

00:23:12,100 --> 00:23:18,760
map it's just not necessary to be Dana

00:23:14,260 --> 00:23:21,370
movement it's yeah it could be yeah it's

00:23:18,760 --> 00:23:23,290
very possible it's so it's depend on the

00:23:21,370 --> 00:23:25,750
hardware and that's why some time come

00:23:23,290 --> 00:23:27,190
on with this kind of thinner for

00:23:25,750 --> 00:23:29,950
different kind of hardware is very

00:23:27,190 --> 00:23:31,360
challenged you so this interpretation of

00:23:29,950 --> 00:23:33,640
the compiler and the different winter

00:23:31,360 --> 00:23:36,330
implement its or lived with how they

00:23:33,640 --> 00:23:36,330
interpret them

00:23:39,510 --> 00:23:47,580
and only I went in slide off the tip d a

00:23:43,700 --> 00:23:51,120
certain way it's a lot to introduce it

00:23:47,580 --> 00:23:52,590
the openmp thread affinity but before

00:23:51,120 --> 00:23:55,800
they'll talk about that I want you know

00:23:52,590 --> 00:23:57,870
I'm sure you know but if kids we're not

00:23:55,800 --> 00:24:02,070
familiar you know the first class policy

00:23:57,870 --> 00:24:06,390
in the numa machine I should skip this

00:24:02,070 --> 00:24:09,000
one okay let me just how quickly and

00:24:06,390 --> 00:24:11,880
it's the new mines like the array

00:24:09,000 --> 00:24:15,990
animator will be allocated on that on

00:24:11,880 --> 00:24:18,060
that Mary region who were there close to

00:24:15,990 --> 00:24:21,120
the professor who going to access it

00:24:18,060 --> 00:24:25,170
first that's by my way of explaining

00:24:21,120 --> 00:24:27,750
that so in this parallel for and if

00:24:25,170 --> 00:24:31,860
least Lupo is running on this processor

00:24:27,750 --> 00:24:35,940
and this will Alec not allocated that

00:24:31,860 --> 00:24:39,480
array in physical memory that close to

00:24:35,940 --> 00:24:44,220
this professor and that's the numeration

00:24:39,480 --> 00:24:46,560
that's the way all of Numa working so in

00:24:44,220 --> 00:24:49,080
this code if we put a pair of for

00:24:46,560 --> 00:24:52,650
running on these two thread and the same

00:24:49,080 --> 00:24:54,320
thing here now because this peril for

00:24:52,650 --> 00:24:57,240
we'll be splitting the two three and

00:24:54,320 --> 00:24:59,490
issuer we obtain half of that array and

00:24:57,240 --> 00:25:02,070
half of that will be put out on the

00:24:59,490 --> 00:25:03,300
memory a close to this processor and the

00:25:02,070 --> 00:25:07,080
other half of is closed order this

00:25:03,300 --> 00:25:09,540
professor let's see you my effect so

00:25:07,080 --> 00:25:11,250
it's later on because with the memory

00:25:09,540 --> 00:25:13,440
allocation was down it's now if not

00:25:11,250 --> 00:25:15,360
going to the ship around now we if you

00:25:13,440 --> 00:25:17,850
later on we have another parallel region

00:25:15,360 --> 00:25:20,460
and now the loop with the switch as a

00:25:17,850 --> 00:25:24,630
professor this way we need access data

00:25:20,460 --> 00:25:26,880
from 0 to 4 49 you know how do you

00:25:24,630 --> 00:25:29,430
remove the memory of death cross this

00:25:26,880 --> 00:25:33,540
one it's called a member at least called

00:25:29,430 --> 00:25:35,370
a new my effect so the ways the way they

00:25:33,540 --> 00:25:39,320
call the first pass because whoever past

00:25:35,370 --> 00:25:43,380
that memory region will that members

00:25:39,320 --> 00:25:46,560
will be allocated all that a band hello

00:25:43,380 --> 00:25:48,960
to that processor so the OMB current

00:25:46,560 --> 00:25:51,660
before us to three down before 40 they

00:25:48,960 --> 00:25:52,240
don't have xsplit support or help the

00:25:51,660 --> 00:25:54,730
programmer

00:25:52,240 --> 00:25:56,770
to do handle this kind of situation the

00:25:54,730 --> 00:25:58,900
programmer had to know if you write your

00:25:56,770 --> 00:26:01,059
optimizer code you have to know there's

00:25:58,900 --> 00:26:04,600
you may affect is the first touch policy

00:26:01,059 --> 00:26:07,450
you write a code on do this way and the

00:26:04,600 --> 00:26:11,530
photo 0 trying to address this issue by

00:26:07,450 --> 00:26:14,260
record OMP proceed and OMP finding

00:26:11,530 --> 00:26:17,640
thread so I'm trying to listen my

00:26:14,260 --> 00:26:19,900
understanding of the spell and nothing

00:26:17,640 --> 00:26:22,540
with the right away but I think I'm

00:26:19,900 --> 00:26:24,580
understand rightly and oh baby please

00:26:22,540 --> 00:26:27,600
detail the right hire or hear the

00:26:24,580 --> 00:26:29,830
execution same that there is multiple

00:26:27,600 --> 00:26:31,590
hardware swear when I mean put hundreds

00:26:29,830 --> 00:26:34,360
where you can just sink / harder work or

00:26:31,590 --> 00:26:37,270
it's not at least this is not open piece

00:26:34,360 --> 00:26:39,240
we're going this way in the memory is a

00:26:37,270 --> 00:26:42,100
piece where a map to the hard worker and

00:26:39,240 --> 00:26:44,920
is it till the compiler till they run

00:26:42,100 --> 00:26:46,570
hard this is how the architecture going

00:26:44,920 --> 00:26:50,410
to be if you run a nice piece called

00:26:46,570 --> 00:26:52,030
code on this machine so this is this is

00:26:50,410 --> 00:26:55,980
like you can think of a memory hierarchy

00:26:52,030 --> 00:26:58,750
of that machine so like if we have uh

00:26:55,980 --> 00:27:01,179
how do you for socket example is a

00:26:58,750 --> 00:27:05,080
socket had two core processor in this

00:27:01,179 --> 00:27:08,260
way now we can put 0 1 2 3 4 free use of

00:27:05,080 --> 00:27:10,510
this socket at the one place and how

00:27:08,260 --> 00:27:12,040
each place has two core tell all the

00:27:10,510 --> 00:27:14,470
right time or this is the information

00:27:12,040 --> 00:27:16,300
and give to you make use of that now

00:27:14,470 --> 00:27:18,460
it's all come to the implementation how

00:27:16,300 --> 00:27:20,890
to make using that but is the way that

00:27:18,460 --> 00:27:23,080
only provide is wait for the programmer

00:27:20,890 --> 00:27:24,940
you can tell the right time this is the

00:27:23,080 --> 00:27:28,809
this is the architecture going to run

00:27:24,940 --> 00:27:32,580
and now the program how to how to do

00:27:28,809 --> 00:27:37,809
this is how you find a parallel region

00:27:32,580 --> 00:27:41,320
to the architecture so the praça pine is

00:27:37,809 --> 00:27:44,320
another cloth over parallel directive to

00:27:41,320 --> 00:27:47,950
specify how we want a sign open be

00:27:44,320 --> 00:27:50,020
thread to the places basically withheld

00:27:47,950 --> 00:27:53,260
the commander right now oh where is the

00:27:50,020 --> 00:27:56,170
right habits you not pleased by lees

00:27:53,260 --> 00:27:58,540
open p swear to that hardware threat

00:27:56,170 --> 00:28:00,669
will add hybrid cold so i'm not going to

00:27:58,540 --> 00:28:02,740
call it or this video there are multiple

00:28:00,669 --> 00:28:04,830
rail or biting it's called different

00:28:02,740 --> 00:28:07,440
policy but that's me

00:28:04,830 --> 00:28:09,809
year of the open please support us

00:28:07,440 --> 00:28:11,880
affinity to tell the how the

00:28:09,809 --> 00:28:13,620
architecture feel how the binding and

00:28:11,880 --> 00:28:16,110
the letter right hand handle that

00:28:13,620 --> 00:28:18,440
hopefully you can do good work we don't

00:28:16,110 --> 00:28:22,309
know you know if or implementation issue

00:28:18,440 --> 00:28:27,210
the different binding policy recorder

00:28:22,309 --> 00:28:29,250
like master clothes and spread I'm not

00:28:27,210 --> 00:28:32,159
going to go do that as that detail it's

00:28:29,250 --> 00:28:35,399
a it's all impact when you do the

00:28:32,159 --> 00:28:38,789
fighting and what the what the view of

00:28:35,399 --> 00:28:40,529
interest rate has locally on these

00:28:38,789 --> 00:28:42,779
weenie weenie ran you're cold you know

00:28:40,529 --> 00:28:45,059
if they're nasty the parallel for the

00:28:42,779 --> 00:28:47,429
housing it the additional step binding

00:28:45,059 --> 00:28:49,500
good to be is how the handle you know

00:28:47,429 --> 00:28:51,450
but if they flee can look at spec later

00:28:49,500 --> 00:28:54,980
or did some example doctrine already

00:28:51,450 --> 00:28:54,980
published and order the slide

00:28:56,110 --> 00:28:58,950
I think

00:28:59,480 --> 00:29:04,310
obvious the next way though he beat a

00:29:02,030 --> 00:29:08,500
sixth inning this is not a huge honor

00:29:04,310 --> 00:29:11,210
it's a pretty big addition internally

00:29:08,500 --> 00:29:12,920
internally the application support in

00:29:11,210 --> 00:29:15,140
terms of the language is not a lot but

00:29:12,920 --> 00:29:17,570
we will have a gue support a lot of a

00:29:15,140 --> 00:29:20,210
use application the first ones specified

00:29:17,570 --> 00:29:22,370
path dependency now before that we have

00:29:20,210 --> 00:29:24,640
a task of weight to block or leave at

00:29:22,370 --> 00:29:28,130
least point or this task stop here

00:29:24,640 --> 00:29:31,160
before we continue and this follows

00:29:28,130 --> 00:29:32,960
there are we introducing the odd that we

00:29:31,160 --> 00:29:36,350
can introduce in the dependent between

00:29:32,960 --> 00:29:40,580
individual task by specifying in out

00:29:36,350 --> 00:29:43,220
which means if I if when swear have out

00:29:40,580 --> 00:29:45,590
and that's where I have in BK linked

00:29:43,220 --> 00:29:48,230
them together at the divinity do not we

00:29:45,590 --> 00:29:50,600
are not constrained by the task wait

00:29:48,230 --> 00:29:52,040
that's that's very important feature we

00:29:50,600 --> 00:29:53,420
we have it down some implementing i'm

00:29:52,040 --> 00:29:55,520
going to show you some drug another way

00:29:53,420 --> 00:29:57,290
the only task group this is a different

00:29:55,520 --> 00:29:58,670
way the task of weight has a way the

00:29:57,290 --> 00:30:01,280
weight is if they called a shallow

00:29:58,670 --> 00:30:04,100
second edition only synchronized the

00:30:01,280 --> 00:30:06,620
siblings read not save any task but not

00:30:04,100 --> 00:30:08,750
the recursive recruited hospitals the

00:30:06,620 --> 00:30:12,110
task group will join all these paths

00:30:08,750 --> 00:30:14,660
created within that code block it's like

00:30:12,110 --> 00:30:17,210
if you if you if you look at a secret

00:30:14,660 --> 00:30:18,830
with you know silk is like pass away if

00:30:17,210 --> 00:30:20,600
the excellent language excellent has the

00:30:18,830 --> 00:30:22,820
finish is the kind of thing it's like

00:30:20,600 --> 00:30:26,640
extreme finish we synchronize all this

00:30:22,820 --> 00:30:28,230
has created within that code block

00:30:26,640 --> 00:30:30,330
so I'm going to show you something that

00:30:28,230 --> 00:30:32,070
we did our union in our leads to the air

00:30:30,330 --> 00:30:34,640
you example if you look at you know you

00:30:32,070 --> 00:30:37,110
are you example is like you have you

00:30:34,640 --> 00:30:39,240
competed the car appeared the commuter

00:30:37,110 --> 00:30:40,860
the roll and a column and then in the

00:30:39,240 --> 00:30:43,040
search tab you could hook computer the

00:30:40,860 --> 00:30:45,990
rest of that and a propagator this week

00:30:43,040 --> 00:30:49,290
there's three step of air UD competition

00:30:45,990 --> 00:30:53,280
it was first step second step and each

00:30:49,290 --> 00:30:56,010
step each with each step all this block

00:30:53,280 --> 00:30:59,520
can be computed in peril and before that

00:30:56,010 --> 00:31:01,860
the way we do paralyzation create a task

00:30:59,520 --> 00:31:04,110
for this blue box has a task of waiter

00:31:01,860 --> 00:31:06,120
there then create a multi task on lose

00:31:04,110 --> 00:31:08,130
the green box had a task waited there

00:31:06,120 --> 00:31:10,770
and then create a multiple time on this

00:31:08,130 --> 00:31:13,110
together box has task awaited there so

00:31:10,770 --> 00:31:15,330
that the primary here if you see from

00:31:13,110 --> 00:31:17,250
the green box to the yellow box and the

00:31:15,330 --> 00:31:18,810
synchronization have has been having a

00:31:17,250 --> 00:31:21,270
mall motive with hot is the Globo we

00:31:18,810 --> 00:31:24,080
call the global barrier stop here but

00:31:21,270 --> 00:31:26,550
it's actually if these two green box

00:31:24,080 --> 00:31:29,340
campinas computation we can start in

00:31:26,550 --> 00:31:32,130
launching this yellow box that depend

00:31:29,340 --> 00:31:34,830
only on these two green box so that's

00:31:32,130 --> 00:31:38,160
why we're able to use in the open be 40

00:31:34,830 --> 00:31:41,100
in our to do that and we get a pretty

00:31:38,160 --> 00:31:43,290
good speed up it is a compared with the

00:31:41,100 --> 00:31:47,480
standard or maybe implementation you

00:31:43,290 --> 00:31:51,080
think ask away you know it's a it's

00:31:47,480 --> 00:31:53,850
raining on the four th thread are

00:31:51,080 --> 00:31:56,220
compared with the Intel compiler GCC

00:31:53,850 --> 00:31:58,080
song Kamara PGA easy to compare with

00:31:56,220 --> 00:31:59,610
other data driven computation like a

00:31:58,080 --> 00:32:01,590
quark and a bit part in order to

00:31:59,610 --> 00:32:04,520
computing data division see

00:32:01,590 --> 00:32:04,520
implementation

00:32:06,230 --> 00:32:11,960
by the next way the Arab handling okay

00:32:08,830 --> 00:32:13,880
this is uh is something you know before

00:32:11,960 --> 00:32:17,870
that oh maybe if there's something wrong

00:32:13,880 --> 00:32:19,820
with in thread the this is the the cold

00:32:17,870 --> 00:32:21,410
will crash of the code or crash because

00:32:19,820 --> 00:32:24,230
the right if it don't have no support

00:32:21,410 --> 00:32:26,780
the way error modem has support that now

00:32:24,230 --> 00:32:29,510
if a stray to see some errors straighter

00:32:26,780 --> 00:32:31,730
can initiate a kind soul call pill out

00:32:29,510 --> 00:32:33,740
of thread oh these systems around there

00:32:31,730 --> 00:32:37,190
we should stop processing the rest of

00:32:33,740 --> 00:32:39,350
the parallel region and that's the main

00:32:37,190 --> 00:32:41,510
purpose of doing that the way we do that

00:32:39,350 --> 00:32:46,100
if we once where the focus on straighter

00:32:41,510 --> 00:32:47,870
a had a cancel signal but and now or

00:32:46,100 --> 00:32:49,730
that's red when these check that signal

00:32:47,870 --> 00:32:52,190
when you see that signal we will just

00:32:49,730 --> 00:32:54,410
ignore the rest of competition and go to

00:32:52,190 --> 00:32:57,740
the rest over the parallel go to the

00:32:54,410 --> 00:32:59,630
inner pero region and the series here we

00:32:57,740 --> 00:33:01,730
don't know we win this is to air due to

00:32:59,630 --> 00:33:04,160
check whether the cancellation with the

00:33:01,730 --> 00:33:07,309
with the initial or not so we there

00:33:04,160 --> 00:33:09,380
there the seller our cancellation point

00:33:07,309 --> 00:33:12,169
identify like Oh PMP barrier is the

00:33:09,380 --> 00:33:14,450
cancellation point and any by Rico and

00:33:12,169 --> 00:33:16,309
each trainer will check whether is the

00:33:14,450 --> 00:33:19,820
cancellation initiate or not if there

00:33:16,309 --> 00:33:22,340
are they go to school jump to the end of

00:33:19,820 --> 00:33:25,510
the Pharaoh region that's how the error

00:33:22,340 --> 00:33:25,510
handling model working

00:33:26,029 --> 00:33:28,059
I

00:33:30,700 --> 00:33:35,749
to tell them

00:33:32,519 --> 00:33:35,749
canceled directed

00:33:39,309 --> 00:33:45,460
they were progressively i don't i don't

00:33:42,820 --> 00:33:47,409
remember we still discussing in the in

00:33:45,460 --> 00:33:50,110
the news tanner they will introduce a

00:33:47,409 --> 00:33:53,559
new random api weather cancellation with

00:33:50,110 --> 00:33:56,649
the ignition or not there is yeah

00:33:53,559 --> 00:34:00,120
whether it's if my cook the questions

00:33:56,649 --> 00:34:03,309
whether they're the right hand api that

00:34:00,120 --> 00:34:06,539
can the user can use the query whether

00:34:03,309 --> 00:34:09,849
they're the cancellation ignition along

00:34:06,539 --> 00:34:12,190
no admire last battle and I need to do

00:34:09,849 --> 00:34:16,149
get a detail but i do remember there's

00:34:12,190 --> 00:34:19,349
something plan to be there for that in

00:34:16,149 --> 00:34:19,349
this version or photo one

00:34:21,669 --> 00:34:26,399
and the definer or user-defined

00:34:23,349 --> 00:34:28,329
introduction it's for the user to create

00:34:26,399 --> 00:34:31,349
reduction the more than the standard

00:34:28,329 --> 00:34:34,089
like plus bonus from the user can create

00:34:31,349 --> 00:34:35,950
reduction function themselves and put it

00:34:34,089 --> 00:34:38,490
in a pair of loop to do the further

00:34:35,950 --> 00:34:38,490
reduction

00:34:39,909 --> 00:34:46,589
and a Tom extension is basically

00:34:43,450 --> 00:34:49,720
introduced it compares to all kind of a

00:34:46,589 --> 00:34:52,569
or a flash kind of interface to

00:34:49,720 --> 00:34:55,899
programmer to do that you know this is a

00:34:52,569 --> 00:34:58,420
something introduced but I don't see

00:34:55,899 --> 00:35:01,359
these the people think is a big deal but

00:34:58,420 --> 00:35:03,990
looks to me it's pretty should be there

00:35:01,359 --> 00:35:03,990
earlier

00:35:05,319 --> 00:35:10,019
and the next one okay no Tom

00:35:08,140 --> 00:35:12,640
comparability this is my life drive I

00:35:10,019 --> 00:35:14,920
stick it in there had this awful only

00:35:12,640 --> 00:35:17,079
model for Mike and the same ed support

00:35:14,920 --> 00:35:19,599
if you do the summer of your document

00:35:17,079 --> 00:35:22,690
it'd be pretty they already mixed in

00:35:19,599 --> 00:35:24,759
working pretty pretty stable and what we

00:35:22,690 --> 00:35:27,489
did in the Rose compiler we have a paper

00:35:24,759 --> 00:35:29,829
publicly I won't that's for the gpgpu we

00:35:27,489 --> 00:35:31,839
improve data gpgpu and they vaguely

00:35:29,829 --> 00:35:35,109
source of sauce compiler transformation

00:35:31,839 --> 00:35:37,269
we transform this open p a curator bono

00:35:35,109 --> 00:35:40,299
to a chuckhole we didn't go to the

00:35:37,269 --> 00:35:42,369
binary region and open you our

00:35:40,299 --> 00:35:44,410
compiler at the US we have a task

00:35:42,369 --> 00:35:47,199
dependencies support the URL of the

00:35:44,410 --> 00:35:49,839
result i'll just show you and the next

00:35:47,199 --> 00:35:52,509
opening c c compiler like if they're

00:35:49,839 --> 00:35:54,249
open season camera my mind finish you

00:35:52,509 --> 00:35:56,170
know base my experience of doing that in

00:35:54,249 --> 00:35:59,549
our compiler it should be not that

00:35:56,170 --> 00:36:01,869
complicated to do to support open p and

00:35:59,549 --> 00:36:05,589
maybe all recorded create they are doing

00:36:01,869 --> 00:36:10,150
something but maybe Oracle is doing the

00:36:05,589 --> 00:36:13,370
affinity support you know that's so far

00:36:10,150 --> 00:36:18,040
as far as I can guess

00:36:13,370 --> 00:36:18,040
that's it thank you very much thank you

00:36:23,569 --> 00:36:25,630

YouTube URL: https://www.youtube.com/watch?v=53GapytfaZY


