Title: OpenMP BoF - SC13 - Part 1
Publication date: 2014-12-13
Playlist: SC13
Description: 
	Michael Wong (IBM, and OpenMP ARB CEO) and Bronis de Supinski (LLNL) present latest activity regarding OpenMP.
Captions: 
	00:00:00,000 --> 00:00:06,240
thank you for coming my name is michael

00:00:02,490 --> 00:00:07,980
wong i'm the CEO of openmp so I want it

00:00:06,240 --> 00:00:09,719
today I want there's a lot on the agenda

00:00:07,980 --> 00:00:11,429
and I want to give up my time as much as

00:00:09,719 --> 00:00:13,290
quickly as possible so that you can get

00:00:11,429 --> 00:00:14,820
to some of the exciting stuff the big

00:00:13,290 --> 00:00:16,890
thing that I want you to remember is

00:00:14,820 --> 00:00:19,500
that in this year openmp four-point-oh

00:00:16,890 --> 00:00:23,330
debuted and to us it's a significant

00:00:19,500 --> 00:00:26,580
paradigm shift in parallel ism okay and

00:00:23,330 --> 00:00:33,480
let me see if I'm showing some of this

00:00:26,580 --> 00:00:35,579
stuff properly all right so that's just

00:00:33,480 --> 00:00:37,079
showing you the announcement itself for

00:00:35,579 --> 00:00:38,520
the rest of this talk this is going to

00:00:37,079 --> 00:00:39,750
be a condensed version of the exhibit

00:00:38,520 --> 00:00:41,790
and talk that i'm going to give later on

00:00:39,750 --> 00:00:43,590
but for today for the most part i want

00:00:41,790 --> 00:00:46,890
to give a quick overview what we've done

00:00:43,590 --> 00:00:49,829
in very quick time and then i want to

00:00:46,890 --> 00:00:52,559
hand over hand it over to lewis who is

00:00:49,829 --> 00:00:53,879
going to talk about I want 2014

00:00:52,559 --> 00:00:56,940
something that many of you guys have

00:00:53,879 --> 00:00:58,410
been looking for the other thing is the

00:00:56,940 --> 00:01:00,090
new usual think that we like to do at

00:00:58,410 --> 00:01:02,520
this one this this kind of office give

00:01:00,090 --> 00:01:04,140
you a quick taste not at the in-depth

00:01:02,520 --> 00:01:07,080
tutorial there are places for that of

00:01:04,140 --> 00:01:08,729
the openmp four-point-oh specification

00:01:07,080 --> 00:01:10,350
and who better to give that description

00:01:08,729 --> 00:01:13,680
then the language chair who is sitting

00:01:10,350 --> 00:01:15,390
beside me proneness from LOL and then

00:01:13,680 --> 00:01:17,340
surely after that we're going to talk

00:01:15,390 --> 00:01:19,950
about look at a new proposal a new

00:01:17,340 --> 00:01:23,729
programming model from some from my good

00:01:19,950 --> 00:01:25,350
friend from oracle son rude that should

00:01:23,729 --> 00:01:27,210
be very exciting stand by for that one

00:01:25,350 --> 00:01:29,280
and then after that we're going to

00:01:27,210 --> 00:01:31,619
follow that with dump the discussion

00:01:29,280 --> 00:01:32,850
about the support of OpenMP in open

00:01:31,619 --> 00:01:34,439
source software and open source

00:01:32,850 --> 00:01:36,720
compilers and one of thats coming up

00:01:34,439 --> 00:01:39,600
rapidly is client the other one is

00:01:36,720 --> 00:01:43,259
obviously GCC so Jim clowning Jim Jim

00:01:39,600 --> 00:01:44,759
County I keep using hammer it's going to

00:01:43,259 --> 00:01:46,530
come from Intel is going to come up and

00:01:44,759 --> 00:01:47,820
talk about how OpenMP is supported on

00:01:46,530 --> 00:01:50,430
clang that you guys want to hear all

00:01:47,820 --> 00:01:52,290
that I certainly do finally and not

00:01:50,430 --> 00:01:54,090
least of all something very exciting and

00:01:52,290 --> 00:01:56,250
it's going to be part of the openmp

00:01:54,090 --> 00:01:57,750
language standard is something that is

00:01:56,250 --> 00:01:59,070
coming out of rice university with the

00:01:57,750 --> 00:02:02,840
collaboration of large number of people

00:01:59,070 --> 00:02:06,210
and it's the openmp tools kit tools api

00:02:02,840 --> 00:02:07,799
ok so what's what have we done so far

00:02:06,210 --> 00:02:09,509
this year I'll just go for over quickly

00:02:07,799 --> 00:02:11,520
what have we not done come on we've

00:02:09,509 --> 00:02:13,290
started we've debuted a new language

00:02:11,520 --> 00:02:13,780
specification virtually almost a new

00:02:13,290 --> 00:02:16,540
language

00:02:13,780 --> 00:02:18,760
with tremendous support for accelerators

00:02:16,540 --> 00:02:20,470
heterogeneous programming industries

00:02:18,760 --> 00:02:23,500
full support was sim for high-level

00:02:20,470 --> 00:02:25,330
Cindy language okay that often super

00:02:23,500 --> 00:02:27,280
super surprise people I'm actually very

00:02:25,330 --> 00:02:29,470
active on the c++ standard as well due

00:02:27,280 --> 00:02:30,940
to and which even the c-class most and

00:02:29,470 --> 00:02:33,160
who is now only following up with

00:02:30,940 --> 00:02:36,670
potential support in that direction we

00:02:33,160 --> 00:02:38,650
have support for affinity for arrow

00:02:36,670 --> 00:02:41,050
model anyway I'm not going to steal

00:02:38,650 --> 00:02:42,670
bonuses thunder the other thing is that

00:02:41,050 --> 00:02:44,350
we've been growing rapidly we are now

00:02:42,670 --> 00:02:46,690
like 26 members where three new members

00:02:44,350 --> 00:02:48,880
join last last year I'll try to remember

00:02:46,690 --> 00:02:53,519
remember the Red Hat lawrence livermore

00:02:48,880 --> 00:02:53,519
I'm sorry university of houston and

00:02:53,940 --> 00:02:59,860
Barcelona supercomputing Center okay

00:02:56,769 --> 00:03:01,690
we're also looking at a new new mission

00:02:59,860 --> 00:03:03,280
statement and that's coming along very

00:03:01,690 --> 00:03:05,260
well we've been discussing this with a

00:03:03,280 --> 00:03:07,450
member for almost all year now with the

00:03:05,260 --> 00:03:09,519
ARB with the directors help guiding us

00:03:07,450 --> 00:03:12,700
along and it's a much it gives a much

00:03:09,519 --> 00:03:14,290
broader scope okay to hear about that I

00:03:12,700 --> 00:03:17,470
just a tune or come to Tom Burke Tom

00:03:14,290 --> 00:03:18,940
Thursday's exhibitors phone we're

00:03:17,470 --> 00:03:21,030
looking at future we're now rapidly

00:03:18,940 --> 00:03:23,140
looking at future editions the openmp

00:03:21,030 --> 00:03:24,670
under such under the aegis and the

00:03:23,140 --> 00:03:26,680
guidance of this mission this new

00:03:24,670 --> 00:03:29,049
mission statement which expands us to

00:03:26,680 --> 00:03:31,420
new additional forms of accelerator

00:03:29,049 --> 00:03:33,670
support what the hell played for

00:03:31,420 --> 00:03:35,590
instance actually of open ACC members as

00:03:33,670 --> 00:03:38,049
well too and some of our own members

00:03:35,590 --> 00:03:40,900
usage experience we look at more

00:03:38,049 --> 00:03:44,230
affinity support most simply more forms

00:03:40,900 --> 00:03:47,260
of loop parallelism ok error model I'm

00:03:44,230 --> 00:03:49,720
much more expanded in a model so there's

00:03:47,260 --> 00:03:51,850
a lot coming on and yes there needs to

00:03:49,720 --> 00:03:53,890
be more education on ok openmp

00:03:51,850 --> 00:03:55,840
four-point-oh because after all many of

00:03:53,890 --> 00:03:57,370
us are actually yes still even members

00:03:55,840 --> 00:03:59,500
on the committee are also learning how

00:03:57,370 --> 00:04:01,690
how many of these language work and

00:03:59,500 --> 00:04:03,549
interact and we're trying to bring that

00:04:01,690 --> 00:04:05,920
knowledge you as soon as we find them

00:04:03,549 --> 00:04:08,109
through either videos webinars talks

00:04:05,920 --> 00:04:10,540
tutorials look for all of those things

00:04:08,109 --> 00:04:12,820
so that ultimately we can break open MTV

00:04:10,540 --> 00:04:15,100
the most versatile and useful language

00:04:12,820 --> 00:04:21,310
but every form of architecture there is

00:04:15,100 --> 00:04:25,340
out there so first thing is Michael

00:04:21,310 --> 00:04:28,400
indicated urban mp4 is now

00:04:25,340 --> 00:04:30,530
Mitchell standard it was ratified in

00:04:28,400 --> 00:04:32,620
july i could give you the exact date

00:04:30,530 --> 00:04:36,470
except that i would be wrong because

00:04:32,620 --> 00:04:42,800
some of the votes had to be done an

00:04:36,470 --> 00:04:44,870
abstention abstention anyway so so you

00:04:42,800 --> 00:04:47,630
know the question got asked is does that

00:04:44,870 --> 00:04:49,610
mean we're done I can promise you the

00:04:47,630 --> 00:04:51,770
answer is no we are not done we got a

00:04:49,610 --> 00:04:54,620
lot more work to do and we're already

00:04:51,770 --> 00:04:57,590
starting to do it but it's a pretty

00:04:54,620 --> 00:05:02,780
significant step we've added a lot of

00:04:57,590 --> 00:05:05,300
things to open in pain 40 so there are

00:05:02,780 --> 00:05:12,290
those who would tell you that openmp 30

00:05:05,300 --> 00:05:15,620
was was a dramatic change from 2.5 my

00:05:12,290 --> 00:05:20,680
claim is that 40 is a bigger step

00:05:15,620 --> 00:05:27,620
forward then then from 32 from 31 then

00:05:20,680 --> 00:05:30,229
30 was from 25 our tent was to only

00:05:27,620 --> 00:05:32,419
break existing code you know did not

00:05:30,229 --> 00:05:35,660
maintain backwards compatibility if it

00:05:32,419 --> 00:05:37,700
was absolutely necessary my belief is

00:05:35,660 --> 00:05:40,340
that we did not find it necessary in any

00:05:37,700 --> 00:05:42,710
cases if you find something that you did

00:05:40,340 --> 00:05:45,200
let me that we did make it so existing

00:05:42,710 --> 00:05:51,950
code knowing or work let me know and

00:05:45,200 --> 00:05:54,050
then I'll say I'm sorry anyhow so we use

00:05:51,950 --> 00:05:55,520
a ticket system and we ended up 106

00:05:54,050 --> 00:05:58,130
tickets if you've been following along

00:05:55,520 --> 00:06:07,220
as we've been gone along with OpenMP

00:05:58,130 --> 00:06:11,050
from 30 to 31 to 40 we were working on

00:06:07,220 --> 00:06:14,419
40 we released a couple comment drafts

00:06:11,050 --> 00:06:16,639
they're called are c1 or c2 we also had

00:06:14,419 --> 00:06:20,270
a tech report on what we would do for

00:06:16,639 --> 00:06:22,820
accelerator support there are those who

00:06:20,270 --> 00:06:25,800
noticed that what we did for accelerator

00:06:22,820 --> 00:06:28,039
support in RC 2 so rc1 didn't

00:06:25,800 --> 00:06:31,289
to accelerate your support and the tech

00:06:28,039 --> 00:06:35,009
report was done released at the same

00:06:31,289 --> 00:06:37,830
time as rc1 that what we had in our c2

00:06:35,009 --> 00:06:40,800
is substantially different from what was

00:06:37,830 --> 00:06:44,159
in the tech report what we now have 40

00:06:40,800 --> 00:06:46,229
is very like what we had in our c2 but

00:06:44,159 --> 00:06:48,780
we we did add a number of things that

00:06:46,229 --> 00:06:51,659
that are actually fairly important we

00:06:48,780 --> 00:06:55,229
were asking Jim where where things stand

00:06:51,659 --> 00:06:57,990
for Intel many things and he said well

00:06:55,229 --> 00:07:00,780
we haven't done all of these combined

00:06:57,990 --> 00:07:04,409
directives that you had and I said well

00:07:00,780 --> 00:07:06,930
you know they're not really all that you

00:07:04,409 --> 00:07:09,509
know hard or different and he said well

00:07:06,930 --> 00:07:12,599
they're actually different in a

00:07:09,509 --> 00:07:14,250
fundamental way from the prior combined

00:07:12,599 --> 00:07:16,289
constructs that you have and that that's

00:07:14,250 --> 00:07:19,050
actually true previously all the

00:07:16,289 --> 00:07:21,629
combined constructs were just shorthand

00:07:19,050 --> 00:07:23,849
for writing one construct followed by

00:07:21,629 --> 00:07:25,740
another and we actually have constructs

00:07:23,849 --> 00:07:28,979
now that our combined constructs that

00:07:25,740 --> 00:07:32,880
you can't write by writing one followed

00:07:28,979 --> 00:07:34,620
by the other and the reason we added

00:07:32,880 --> 00:07:36,870
them was because you needed to be able

00:07:34,620 --> 00:07:39,539
to write these things without following

00:07:36,870 --> 00:07:40,830
one by the other and in particular what

00:07:39,539 --> 00:07:49,250
they did is they allowed you to do

00:07:40,830 --> 00:07:53,900
things like distribute a the threads it

00:07:49,250 --> 00:07:57,810
in a loop across multiple teams of

00:07:53,900 --> 00:08:00,360
multiple threads on a device all right

00:07:57,810 --> 00:08:04,740
and what we had no rc2 would have

00:08:00,360 --> 00:08:06,509
required you to actually split the loop

00:08:04,740 --> 00:08:09,029
into two pieces one that you distribute

00:08:06,509 --> 00:08:12,710
it across the teams and then the other

00:08:09,029 --> 00:08:17,940
one that you then ran as a parallel loop

00:08:12,710 --> 00:08:19,710
on each of separate teams which was

00:08:17,940 --> 00:08:21,690
really going to be very painful we have

00:08:19,710 --> 00:08:24,300
a lot of complaints about that so we

00:08:21,690 --> 00:08:27,150
added it anyway so where do we add for

00:08:24,300 --> 00:08:28,710
us so we added device constructs so that

00:08:27,150 --> 00:08:31,660
means we now have support for

00:08:28,710 --> 00:08:36,789
accelerators for being able to offload

00:08:31,660 --> 00:08:41,500
from your host device to some other

00:08:36,789 --> 00:08:43,390
device available on on your system so I

00:08:41,500 --> 00:08:45,250
would claim that that's a completely new

00:08:43,390 --> 00:08:47,740
form of parallelism that we're

00:08:45,250 --> 00:08:50,170
supporting at OpenMP I'd say that's a

00:08:47,740 --> 00:08:52,920
pretty major addition another thing we

00:08:50,170 --> 00:08:56,050
added were Cindy constructs all right

00:08:52,920 --> 00:08:58,300
this is also another form of parallelism

00:08:56,050 --> 00:09:01,420
that we did not support previously all

00:08:58,300 --> 00:09:03,670
right so the semi constructs is

00:09:01,420 --> 00:09:06,490
interesting because it really is very

00:09:03,670 --> 00:09:10,630
similar to how OpenMP originally arose

00:09:06,490 --> 00:09:15,070
it actually is basically saying pretty

00:09:10,630 --> 00:09:19,630
much every all the compiler implementers

00:09:15,070 --> 00:09:21,520
already had support for Cindy and in

00:09:19,630 --> 00:09:23,710
their compilers they just offset it

00:09:21,520 --> 00:09:27,700
differently and even when they use the

00:09:23,710 --> 00:09:29,980
same term it would often mean subtly

00:09:27,700 --> 00:09:34,870
different things all right and so now

00:09:29,980 --> 00:09:37,620
you can use openmp to go and have this

00:09:34,870 --> 00:09:40,060
vector parallelism in your code to

00:09:37,620 --> 00:09:42,700
instruct the compiler to generate vector

00:09:40,060 --> 00:09:44,770
parallelism and be confident that you're

00:09:42,700 --> 00:09:48,420
gonna get the same effect across the

00:09:44,770 --> 00:09:51,130
range of machines that you might run on

00:09:48,420 --> 00:09:53,110
we've added cancellation which is also a

00:09:51,130 --> 00:09:55,990
pretty big step so now you can well

00:09:53,110 --> 00:10:00,130
while running a group of tasks or

00:09:55,990 --> 00:10:01,840
running a parallel region or a work

00:10:00,130 --> 00:10:04,090
sharing construct you can decide that

00:10:01,840 --> 00:10:08,500
well I hit some condition that makes me

00:10:04,090 --> 00:10:10,330
want to stop at that region and actually

00:10:08,500 --> 00:10:13,180
have it stop as opposed to having it

00:10:10,330 --> 00:10:15,310
work very hard yourself to get out of it

00:10:13,180 --> 00:10:18,070
or having no mechanism at all by which

00:10:15,310 --> 00:10:19,750
to support it and you can see there's a

00:10:18,070 --> 00:10:22,270
bunch of other things task dependences

00:10:19,750 --> 00:10:24,430
is another big addition thread affinity

00:10:22,270 --> 00:10:27,280
control so we've gone from being nearly

00:10:24,430 --> 00:10:29,290
able in 31 to say keep my threads

00:10:27,280 --> 00:10:31,300
running where they where they're running

00:10:29,290 --> 00:10:33,070
don't move them around to actually being

00:10:31,300 --> 00:10:39,520
able to control where they're running

00:10:33,070 --> 00:10:41,320
and to on a per parallel region basis

00:10:39,520 --> 00:10:44,290
choose to

00:10:41,320 --> 00:10:47,440
move those threads around well defined

00:10:44,290 --> 00:10:49,990
way we've added user-defined

00:10:47,440 --> 00:10:52,090
introductions we've provided an initial

00:10:49,990 --> 00:10:54,690
support for for training 2003 and I'll

00:10:52,090 --> 00:10:57,940
say a little bit more about that shortly

00:10:54,690 --> 00:11:00,640
so we've added some very limited support

00:10:57,940 --> 00:11:04,260
for array sections we've we've actually

00:11:00,640 --> 00:11:08,080
added a mechanism by which you can

00:11:04,260 --> 00:11:10,180
identify array sections in C and C++ and

00:11:08,080 --> 00:11:12,700
then in a couple places you're actually

00:11:10,180 --> 00:11:15,820
able to use array sections either in

00:11:12,700 --> 00:11:19,570
Fortran or in c and c++ for example you

00:11:15,820 --> 00:11:21,790
can specify tasks dependences with array

00:11:19,570 --> 00:11:25,000
sections and you can also use array

00:11:21,790 --> 00:11:26,980
sections with the map constructs in the

00:11:25,000 --> 00:11:29,500
debate with the NAP clauses in the

00:11:26,980 --> 00:11:31,950
device constructs I think those are the

00:11:29,500 --> 00:11:35,590
only places currently we support them

00:11:31,950 --> 00:11:38,710
currently you cannot privatize a an

00:11:35,590 --> 00:11:40,840
array section if i had to guess you'll

00:11:38,710 --> 00:11:42,340
never be able to do that but if you

00:11:40,840 --> 00:11:44,740
really think that there's a reason to do

00:11:42,340 --> 00:11:45,880
it let us know and then we can argue

00:11:44,740 --> 00:11:50,800
about whether or not it's actually

00:11:45,880 --> 00:11:52,600
possible anyway so and then we've got it

00:11:50,800 --> 00:11:55,210
sequentially consistent Atomics and

00:11:52,600 --> 00:11:57,160
finally there's an environment variable

00:11:55,210 --> 00:12:00,520
you can now set so that you actually

00:11:57,160 --> 00:12:02,590
will have your job print out the initial

00:12:00,520 --> 00:12:06,220
state of all of the internal control

00:12:02,590 --> 00:12:08,230
variables in OpenMP and if you don't

00:12:06,220 --> 00:12:13,260
know what openmp internal control

00:12:08,230 --> 00:12:16,300
variables are you can ask me later so

00:12:13,260 --> 00:12:20,550
here's the plan that we have first of

00:12:16,300 --> 00:12:24,670
all the big thing is we now have so we

00:12:20,550 --> 00:12:26,590
release open mp4 oh and what you might

00:12:24,670 --> 00:12:29,710
notice if you go and download the new

00:12:26,590 --> 00:12:34,360
specification is that the former

00:12:29,710 --> 00:12:36,940
appendix a of the previous specification

00:12:34,360 --> 00:12:39,550
documents no longer exists and that was

00:12:36,940 --> 00:12:41,320
the examples and what we did is we

00:12:39,550 --> 00:12:44,080
actually remove the examples from the

00:12:41,320 --> 00:12:47,710
specification all right and there's a

00:12:44,080 --> 00:12:49,840
very good reason for that I know that a

00:12:47,710 --> 00:12:52,540
lot of people found that someone jar

00:12:49,840 --> 00:12:56,290
disturbing but the reason is it now

00:12:52,540 --> 00:12:59,520
allows us to go and update the examples

00:12:56,290 --> 00:13:02,170
independent of updating the

00:12:59,520 --> 00:13:05,350
specification all right so our plan is

00:13:02,170 --> 00:13:07,780
to be much more proactive and adding

00:13:05,350 --> 00:13:09,610
examples so if we find something that is

00:13:07,780 --> 00:13:11,350
unclear somebody provides us a good

00:13:09,610 --> 00:13:13,120
example we're going to be looking at

00:13:11,350 --> 00:13:15,970
being able to include it into the

00:13:13,120 --> 00:13:18,490
examples document and the initial

00:13:15,970 --> 00:13:20,290
version of it has been released so if

00:13:18,490 --> 00:13:24,190
you go to the specification page you can

00:13:20,290 --> 00:13:26,470
download it it has several examples for

00:13:24,190 --> 00:13:30,160
the device constructs and we're

00:13:26,470 --> 00:13:31,720
currently working on adding examples for

00:13:30,160 --> 00:13:33,220
many of the other features a few of

00:13:31,720 --> 00:13:36,720
which we already have in there so it

00:13:33,220 --> 00:13:40,690
also has examples forecast dependences

00:13:36,720 --> 00:13:43,510
the Fortran how we support the fortune

00:13:40,690 --> 00:13:44,800
associate construct and one other thing

00:13:43,510 --> 00:13:49,300
which I remember if I thought about it

00:13:44,800 --> 00:13:52,240
but go and look for yourself so anyhow

00:13:49,300 --> 00:13:56,400
our plan forward is very similar to what

00:13:52,240 --> 00:14:00,780
we did after 30 we're going to

00:13:56,400 --> 00:14:03,580
concurrently work on an open mp4 dot one

00:14:00,780 --> 00:14:06,370
and at the same time look at much more

00:14:03,580 --> 00:14:10,150
significant changes for an open mp5 all

00:14:06,370 --> 00:14:13,630
right our working timeline for 41 is

00:14:10,150 --> 00:14:18,520
that our goal is for in two years from

00:14:13,630 --> 00:14:22,720
from now and supercomputing at SC 15

00:14:18,520 --> 00:14:26,380
will be able to have the release of 41

00:14:22,720 --> 00:14:32,290
or perhaps in the very least the release

00:14:26,380 --> 00:14:34,170
of the comic draft for 41 all right and

00:14:32,290 --> 00:14:38,440
that's going to largely be

00:14:34,170 --> 00:14:40,180
clarifications in errata 44 dot 0 we've

00:14:38,440 --> 00:14:42,010
already found things that we wish we had

00:14:40,180 --> 00:14:44,680
said a little bit more clearly and

00:14:42,010 --> 00:14:46,720
things like that in addition there were

00:14:44,680 --> 00:14:48,730
some things that because we wanted to go

00:14:46,720 --> 00:14:51,670
ahead and get 40 out and we felt that it

00:14:48,730 --> 00:14:53,500
was ready to be useful but that we could

00:14:51,670 --> 00:15:00,280
do to refine some of the new features

00:14:53,500 --> 00:15:02,680
that will add we will be taking the very

00:15:00,280 --> 00:15:05,410
much a requirement is that

00:15:02,680 --> 00:15:07,540
we won't add anything in the 4-1 that

00:15:05,410 --> 00:15:10,540
causes a backwards compatibility

00:15:07,540 --> 00:15:13,120
problems so if it would break existing

00:15:10,540 --> 00:15:15,610
code it won't be added in for one it

00:15:13,120 --> 00:15:18,670
would be delayed until 50 are not

00:15:15,610 --> 00:15:20,920
adopted ever all right so this shouldn't

00:15:18,670 --> 00:15:25,330
involve a huge implementation burden

00:15:20,920 --> 00:15:27,070
beyond 40 all right then in 50 we're

00:15:25,330 --> 00:15:32,020
going to be looking at again dressing

00:15:27,070 --> 00:15:34,660
major open issues I right now my guess

00:15:32,020 --> 00:15:39,010
is that that 50 will be much less of a

00:15:34,660 --> 00:15:43,930
significant change from 41 then 40 was

00:15:39,010 --> 00:15:47,709
from 31 we'll see you know I'm trying to

00:15:43,930 --> 00:15:49,270
remember yogi Berra's statement about

00:15:47,709 --> 00:15:54,279
predictions being hard particularly

00:15:49,270 --> 00:15:56,500
about the future anyhow so again we'll

00:15:54,279 --> 00:15:59,440
be using a do not break existing code

00:15:56,500 --> 00:16:05,250
unnecessarily the time frame is freely

00:15:59,440 --> 00:16:08,730
TBD my working thought is SC 17

00:16:05,250 --> 00:16:16,510
realistically we're probably more like

00:16:08,730 --> 00:16:18,070
summer of 2000 18 or SC 18 so here's a

00:16:16,510 --> 00:16:20,580
little bit of details on what we'll be

00:16:18,070 --> 00:16:22,779
doing in for one so we'll have many

00:16:20,580 --> 00:16:24,640
clarifications and minor enhancements I

00:16:22,779 --> 00:16:27,459
said there's some things we want to do

00:16:24,640 --> 00:16:29,529
for Cindy extensions one of the big

00:16:27,459 --> 00:16:33,250
things we want to do is add support and

00:16:29,529 --> 00:16:36,790
C and C++ for a raise and for templates

00:16:33,250 --> 00:16:41,020
and C++ you can kind of already do it

00:16:36,790 --> 00:16:43,060
but it's I would claim that at least for

00:16:41,020 --> 00:16:44,890
a raise it's not really well supported

00:16:43,060 --> 00:16:46,480
and we're hoping to make it a lot better

00:16:44,890 --> 00:16:49,440
supported you could kind of use

00:16:46,480 --> 00:16:55,230
user-defined reductions to get your

00:16:49,440 --> 00:16:55,230
reductions on C and C++ arrays yes

00:16:55,680 --> 00:17:00,490
so we have plenty of 70 extensions so we

00:16:58,570 --> 00:17:03,310
have some minor refinements to the

00:17:00,490 --> 00:17:05,410
tsendi extensions to be honest I'm not

00:17:03,310 --> 00:17:11,020
in recalling exactly what was on the

00:17:05,410 --> 00:17:12,850
table but Jim's cohorts that Intel have

00:17:11,020 --> 00:17:14,650
already told us that there were some

00:17:12,850 --> 00:17:18,160
things they had in mind that they think

00:17:14,650 --> 00:17:20,410
we should do to tweak what we have so we

00:17:18,160 --> 00:17:24,280
have pretty pretty complete symmetry

00:17:20,410 --> 00:17:26,260
support nap and in court of zero so

00:17:24,280 --> 00:17:27,700
calling that extensions we should stop

00:17:26,260 --> 00:17:30,160
calling on extensions that's now going

00:17:27,700 --> 00:17:32,440
to standard right so this is a few more

00:17:30,160 --> 00:17:37,630
minor changes oh yes I should be simply

00:17:32,440 --> 00:17:40,720
refine the fire engines right all right

00:17:37,630 --> 00:17:42,730
so runtime routines to support

00:17:40,720 --> 00:17:44,860
cancellation is something that will

00:17:42,730 --> 00:17:46,710
definitely see we're looking at initial

00:17:44,860 --> 00:17:48,880
support for memory affinity so I'm

00:17:46,710 --> 00:17:50,830
strongly hoping one of the things that

00:17:48,880 --> 00:17:53,320
will add and poured out one will be

00:17:50,830 --> 00:17:55,360
support for next touch and indeed ER

00:17:53,320 --> 00:17:58,150
will probably applaud such an idea since

00:17:55,360 --> 00:18:07,180
he's been advocating this as long as I

00:17:58,150 --> 00:18:09,220
can remember we're even hoping to do

00:18:07,180 --> 00:18:11,500
something about interoperability for P

00:18:09,220 --> 00:18:13,570
threads so what we would like to do is

00:18:11,500 --> 00:18:15,280
tell you what happens if say for

00:18:13,570 --> 00:18:18,450
instance you have a program that gets

00:18:15,280 --> 00:18:21,220
started creates a P thread and you call

00:18:18,450 --> 00:18:23,980
and you encounter an open MP construct

00:18:21,220 --> 00:18:26,590
in the original thread and and the P

00:18:23,980 --> 00:18:28,630
thread you created apparently we're sup

00:18:26,590 --> 00:18:32,470
we're completely silent about what the

00:18:28,630 --> 00:18:35,460
semantics are in the building of the

00:18:32,470 --> 00:18:39,780
device constructs we really created a

00:18:35,460 --> 00:18:42,490
this constructive this concept of teams

00:18:39,780 --> 00:18:43,990
my initial thought is that what we would

00:18:42,490 --> 00:18:46,630
do is basically say that they're

00:18:43,990 --> 00:18:48,370
separate teams and so they really work

00:18:46,630 --> 00:18:51,360
separately you won't be able to

00:18:48,370 --> 00:18:53,830
synchronize across them and you won't be

00:18:51,360 --> 00:18:57,430
and if the implementation would it then

00:18:53,830 --> 00:19:00,070
be expected to maintain that it may

00:18:57,430 --> 00:19:01,420
prove that that is a fairly significant

00:19:00,070 --> 00:19:03,750
implementation burden so

00:19:01,420 --> 00:19:08,050
that may end up getting pushed off the

00:19:03,750 --> 00:19:10,210
500k tasking in standalone reductions

00:19:08,050 --> 00:19:12,760
and so I'm told I'm short on time so I'm

00:19:10,210 --> 00:19:15,390
going to move forward quickly so one of

00:19:12,760 --> 00:19:18,040
the biggest things is that the

00:19:15,390 --> 00:19:20,980
accelerator subcommittee really wants to

00:19:18,040 --> 00:19:24,130
push forward on some refinements to the

00:19:20,980 --> 00:19:29,050
vice constructs so they want to have at

00:19:24,130 --> 00:19:31,350
we have in our zeal to add the combined

00:19:29,050 --> 00:19:33,610
clauses there's some that we missed

00:19:31,350 --> 00:19:35,740
there are those who complained that we

00:19:33,610 --> 00:19:37,420
added too many they will be

00:19:35,740 --> 00:19:45,850
disappointing to hear that our plan is

00:19:37,420 --> 00:19:49,930
to add more and in addition originally

00:19:45,850 --> 00:19:52,510
openmp said that if the in combined

00:19:49,930 --> 00:19:54,700
constructs you have clauses that that

00:19:52,510 --> 00:19:59,200
could apply to either of the constructs

00:19:54,700 --> 00:20:02,890
and the meaning and if applying them to

00:19:59,200 --> 00:20:06,280
one or the other would lead to a

00:20:02,890 --> 00:20:09,430
different effect then the result was

00:20:06,280 --> 00:20:12,040
unspecified we went about trying to

00:20:09,430 --> 00:20:16,120
specify it for many of the possible

00:20:12,040 --> 00:20:19,260
cases as part of wrapping up for oh we

00:20:16,120 --> 00:20:21,940
missed a few so for instance if you say

00:20:19,260 --> 00:20:26,680
target something another parallel and

00:20:21,940 --> 00:20:29,590
then you say if which construct does it

00:20:26,680 --> 00:20:32,560
apply to well we didn't say and so that

00:20:29,590 --> 00:20:34,870
means that the result is unspecified and

00:20:32,560 --> 00:20:37,180
so I anticipate that we'll do something

00:20:34,870 --> 00:20:38,800
to mitigate that because you'd really

00:20:37,180 --> 00:20:44,830
like to be able to have an if clause on

00:20:38,800 --> 00:20:46,300
that combined one all right so we're

00:20:44,830 --> 00:20:48,460
looking at a bunch of different things a

00:20:46,300 --> 00:20:52,900
Snickers work queues unstructured data

00:20:48,460 --> 00:20:56,580
movement so how do you handle moving

00:20:52,900 --> 00:20:58,570
parts of the structure for instance i

00:20:56,580 --> 00:21:01,170
won't going to all the Rusties because

00:20:58,570 --> 00:21:05,550
i'm basically running out of time the

00:21:01,170 --> 00:21:05,550
thing I will point out is the

00:21:06,030 --> 00:21:10,510
accelerator subcommittees it wants to be

00:21:08,710 --> 00:21:12,580
very aggressive and they think that they

00:21:10,510 --> 00:21:15,370
can cover all these things I

00:21:12,580 --> 00:21:17,529
highlighted here in a year and get these

00:21:15,370 --> 00:21:24,039
out and ready to be done and put forward

00:21:17,529 --> 00:21:26,080
all right the plan will be to well they

00:21:24,039 --> 00:21:29,409
they were arguing that we should get 41

00:21:26,080 --> 00:21:31,299
done in the year the fact is in order to

00:21:29,409 --> 00:21:33,760
get a specification out the door there's

00:21:31,299 --> 00:21:37,539
a there's a fair amount of process all

00:21:33,760 --> 00:21:39,880
right so we have to our mechanism says

00:21:37,539 --> 00:21:41,380
we a Latin we release a comet draft and

00:21:39,880 --> 00:21:43,720
give people chance to give us feedback

00:21:41,380 --> 00:21:45,909
and tell us where we're not doing things

00:21:43,720 --> 00:21:48,880
right there's a lot of review and

00:21:45,909 --> 00:21:53,200
getting the language the the text of the

00:21:48,880 --> 00:21:55,990
of the specification really hone down to

00:21:53,200 --> 00:22:00,309
the way we want it that process takes at

00:21:55,990 --> 00:22:02,620
a minimum six months all right so if you

00:22:00,309 --> 00:22:05,110
think about trying to give us the next

00:22:02,620 --> 00:22:06,519
version of the spec out in a year that

00:22:05,110 --> 00:22:09,279
would mean that they would have to have

00:22:06,519 --> 00:22:10,570
all this done in six months I think

00:22:09,279 --> 00:22:13,059
they're ambitious to think they're going

00:22:10,570 --> 00:22:14,260
to get all this done in a year there's

00:22:13,059 --> 00:22:16,600
no way in hell they're going to get it

00:22:14,260 --> 00:22:18,880
done in six months so what we've agreed

00:22:16,600 --> 00:22:20,860
is that we will work very hard to get

00:22:18,880 --> 00:22:23,490
these things move through the language

00:22:20,860 --> 00:22:27,940
committee voted on so that they're

00:22:23,490 --> 00:22:30,340
essentially accept being adopted for 41

00:22:27,940 --> 00:22:32,830
but the 401 hasn't been released and

00:22:30,340 --> 00:22:35,860
they can release a type report that

00:22:32,830 --> 00:22:38,649
shows what's been accepted and then you

00:22:35,860 --> 00:22:40,510
can / you concur to it and they can

00:22:38,649 --> 00:22:43,120
implement to it with with a high degree

00:22:40,510 --> 00:22:44,830
of certainty that when for one comes out

00:22:43,120 --> 00:22:48,220
it's not going to be like the tech

00:22:44,830 --> 00:22:52,090
report that we had that went along with

00:22:48,220 --> 00:22:53,679
RC one all right I'm not going to go

00:22:52,090 --> 00:22:55,809
into this because I'm out of time and

00:22:53,679 --> 00:22:59,380
really standing here I'll just say that

00:22:55,809 --> 00:23:02,950
if you look at the speck you'll see that

00:22:59,380 --> 00:23:05,080
we haven't finished with 2014 2003 we're

00:23:02,950 --> 00:23:08,000
working hard on it we hope to get it

00:23:05,080 --> 00:23:10,280
done by 441

00:23:08,000 --> 00:23:12,770
and that's going to be a big thing to do

00:23:10,280 --> 00:23:16,160
and then there's a long list of things

00:23:12,770 --> 00:23:19,300
that we're doing for planning for 50 and

00:23:16,160 --> 00:23:19,300

YouTube URL: https://www.youtube.com/watch?v=2KHgYbE2H3w


