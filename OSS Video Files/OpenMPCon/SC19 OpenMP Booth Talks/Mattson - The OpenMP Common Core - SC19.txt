Title: Mattson - The OpenMP Common Core - SC19
Publication date: 2019-11-25
Playlist: SC19 OpenMP Booth Talks
Description: 
	November 20, 2019 SC19 Denver
Slides: https://www.openmp.org/wp-content/uploads/SC19-Mattson-Common-Core.pdf
Captions: 
	00:00:00,530 --> 00:00:06,740
grab your coffee no don't grab your

00:00:03,270 --> 00:00:06,740
coffee then come here that'd be tacky

00:00:08,389 --> 00:00:14,309
that's right the most modest and humble

00:00:11,450 --> 00:00:17,789
speaker in the history of supercomputing

00:00:14,309 --> 00:00:20,490
how long am I supposed to talk 15

00:00:17,789 --> 00:00:21,960
minutes but I've got like 45 minutes of

00:00:20,490 --> 00:00:25,439
great material here then I better get

00:00:21,960 --> 00:00:27,119
started so I have no idea what sort of

00:00:25,439 --> 00:00:29,189
background you all have an open M panes

00:00:27,119 --> 00:00:30,960
it's I only have 15 minutes I'm gonna

00:00:29,189 --> 00:00:33,000
plunge onward but make this interactive

00:00:30,960 --> 00:00:34,890
I can have to judge from your body

00:00:33,000 --> 00:00:37,410
language when to go slow and when to go

00:00:34,890 --> 00:00:40,050
fast so I'm talking about the OpenMP

00:00:37,410 --> 00:00:42,180
Common Core which is a quest I've been

00:00:40,050 --> 00:00:44,180
on for several years now to the

00:00:42,180 --> 00:00:46,620
irritation of some of my colleagues

00:00:44,180 --> 00:00:48,180
because I'm focusing on a look back

00:00:46,620 --> 00:00:50,850
let's not look forward

00:00:48,180 --> 00:00:53,520
let's look backwards so when we look at

00:00:50,850 --> 00:00:56,070
the beginning of openmp this is a plot

00:00:53,520 --> 00:00:59,190
of the number of pages in the spec over

00:00:56,070 --> 00:01:01,350
time now we removed the frontmatter we

00:00:59,190 --> 00:01:03,210
removed indices examples of pendants

00:01:01,350 --> 00:01:05,909
ease this is the part of the spec that

00:01:03,210 --> 00:01:07,979
defines the language and as you can see

00:01:05,909 --> 00:01:10,110
we started out with separate specs for C

00:01:07,979 --> 00:01:13,110
and for Fortran and we started out

00:01:10,110 --> 00:01:15,170
around 40 pages and after several

00:01:13,110 --> 00:01:18,240
implementations we got up to around 60

00:01:15,170 --> 00:01:21,689
pages this is good this is good

00:01:18,240 --> 00:01:23,189
and it all fit in and I went back to one

00:01:21,689 --> 00:01:25,080
of the oldest slides I could find in my

00:01:23,189 --> 00:01:28,170
laptop I've been teaching open in P

00:01:25,080 --> 00:01:31,020
since 1997 so I've been teaching this

00:01:28,170 --> 00:01:33,960
stuff a long time this is from 2003 our

00:01:31,020 --> 00:01:36,720
introductory slide OpenMP and all I want

00:01:33,960 --> 00:01:39,659
to emphasize is we stated the whole goal

00:01:36,720 --> 00:01:42,119
of this thing was to make it easy to

00:01:39,659 --> 00:01:44,310
create multi-threaded programming but

00:01:42,119 --> 00:01:47,070
people after multi-threaded programs

00:01:44,310 --> 00:01:49,920
what people have to remember is the goal

00:01:47,070 --> 00:01:52,649
was simplicity that's what motivated us

00:01:49,920 --> 00:01:55,079
that's what we were out to do so over

00:01:52,649 --> 00:01:57,689
time we merge the Fortran and C specs

00:01:55,079 --> 00:02:00,390
and I have to just say well this died

00:01:57,689 --> 00:02:03,299
down a little bit I have to say that the

00:02:00,390 --> 00:02:05,460
open NP 2.5 spec is the one that we

00:02:03,299 --> 00:02:08,849
could really be proud of the ones before

00:02:05,460 --> 00:02:13,060
that we were all amateurs and and it it

00:02:08,849 --> 00:02:15,340
showed 2.5 is a thing of beauty and

00:02:13,060 --> 00:02:16,450
and I'm not saying that arrogantly that

00:02:15,340 --> 00:02:18,069
it's because of me

00:02:16,450 --> 00:02:19,930
now it's just we kind of figured it out

00:02:18,069 --> 00:02:21,700
and we became masters at spec writing

00:02:19,930 --> 00:02:23,680
but think about it that was one two

00:02:21,700 --> 00:02:26,319
three four or five it took us until the

00:02:23,680 --> 00:02:28,980
sixth one to really get it right now

00:02:26,319 --> 00:02:31,090
what these all focused on was

00:02:28,980 --> 00:02:32,530
multi-threading and mostly with parallel

00:02:31,090 --> 00:02:34,510
loops and this was the hardware model

00:02:32,530 --> 00:02:37,420
now I could go on to this whole stack

00:02:34,510 --> 00:02:39,550
but basically we assumed you had a

00:02:37,420 --> 00:02:40,420
symmetric multiprocessor system now we

00:02:39,550 --> 00:02:43,270
knew better

00:02:40,420 --> 00:02:45,550
we knew in the you know the early 2000s

00:02:43,270 --> 00:02:47,290
that most systems are non-uniform but we

00:02:45,550 --> 00:02:49,390
wanted to keep the system simple and

00:02:47,290 --> 00:02:51,070
figured that's a sacrifice we'll make

00:02:49,390 --> 00:02:51,910
we'll just keep it SMP would keep it

00:02:51,070 --> 00:02:55,780
really simple

00:02:51,910 --> 00:03:00,959
as we matched on we added tasks how many

00:02:55,780 --> 00:03:03,340
of you have used an OpenMP task okay

00:03:00,959 --> 00:03:06,550
they're awesome aren't they aren't they

00:03:03,340 --> 00:03:08,680
wonderful any right we added tasks we

00:03:06,550 --> 00:03:12,100
added sim deconstructs now this is very

00:03:08,680 --> 00:03:14,860
important in openmp 3.1 in 2012 or so

00:03:12,100 --> 00:03:16,840
because the hardware model changed now

00:03:14,860 --> 00:03:19,090
all of a sudden we didn't just have SMP

00:03:16,840 --> 00:03:21,459
we had explicit vector units that we

00:03:19,090 --> 00:03:23,739
hung off of each one of those cores so

00:03:21,459 --> 00:03:26,890
that added new hardware features to the

00:03:23,739 --> 00:03:29,489
model then we added Numa constructs and

00:03:26,890 --> 00:03:31,810
target constructs which made this

00:03:29,489 --> 00:03:34,540
radical change the hardware model

00:03:31,810 --> 00:03:38,680
alright so now you could program a GPU

00:03:34,540 --> 00:03:41,769
from OpenMP how many have done that you

00:03:38,680 --> 00:03:43,900
have well your real ringer okay okay

00:03:41,769 --> 00:03:46,000
yeah I've been teaching programming your

00:03:43,900 --> 00:03:49,829
GPU with OpenMP for several years now

00:03:46,000 --> 00:03:52,720
it's fun it's rewarding it's really cool

00:03:49,829 --> 00:03:55,799
because we love GPUs and I work for

00:03:52,720 --> 00:03:59,200
Intel and I can proudly say I love GPUs

00:03:55,799 --> 00:04:02,079
so at any rate then we came out with the

00:03:59,200 --> 00:04:07,170
5.0 spec and you can see the trend here

00:04:02,079 --> 00:04:10,420
we went from 40 pages to over 600 pages

00:04:07,170 --> 00:04:12,579
I think we're getting a little complex I

00:04:10,420 --> 00:04:15,640
think things are getting a little Attic

00:04:12,579 --> 00:04:17,140
well I'm gonna stay out of control but I

00:04:15,640 --> 00:04:19,329
want to be clear and the reason I like

00:04:17,140 --> 00:04:21,099
to do this build up everything we've

00:04:19,329 --> 00:04:23,979
added was for a very good reason

00:04:21,099 --> 00:04:26,050
you know the hardware changed we changed

00:04:23,979 --> 00:04:26,240
the algorithms people wanted to use you

00:04:26,050 --> 00:04:28,250
know

00:04:26,240 --> 00:04:30,560
they wanted your regular parallelism we

00:04:28,250 --> 00:04:32,300
added tasks people realized my

00:04:30,560 --> 00:04:34,610
hardware's numa I need to start

00:04:32,300 --> 00:04:37,250
programming to it so I am not

00:04:34,610 --> 00:04:40,370
criticizing the content that went into

00:04:37,250 --> 00:04:43,250
that 600 pages aspect all I'm saying is

00:04:40,370 --> 00:04:46,039
is we've lost sight of that original

00:04:43,250 --> 00:04:48,650
goal of simplicity and I think we have

00:04:46,039 --> 00:04:52,069
to get back to it I think we've made

00:04:48,650 --> 00:04:55,990
open MP a big scary thing you know want

00:04:52,069 --> 00:05:01,039
to hold up the spec book over there yeah

00:04:55,990 --> 00:05:02,750
that's the spec that's right I haven't

00:05:01,039 --> 00:05:03,590
even read that whole thing I mean just

00:05:02,750 --> 00:05:05,930
oh man

00:05:03,590 --> 00:05:08,110
so I think the initial impression people

00:05:05,930 --> 00:05:10,550
now have and they come up to openmp is

00:05:08,110 --> 00:05:13,909
this is too complicated I'm just going

00:05:10,550 --> 00:05:17,150
to write Python so I want to change that

00:05:13,909 --> 00:05:19,819
I want to return to our roots and change

00:05:17,150 --> 00:05:21,970
how we present openmp so we present that

00:05:19,819 --> 00:05:24,919
simple core and then build up from there

00:05:21,970 --> 00:05:27,229
so oh and this asks the question though

00:05:24,919 --> 00:05:29,900
of well how do people actually use

00:05:27,229 --> 00:05:32,810
openmp and they need to understand how

00:05:29,900 --> 00:05:34,130
people cut most commonly-used openmp so

00:05:32,810 --> 00:05:35,630
since I don't have a lot of time you

00:05:34,130 --> 00:05:37,909
just want to say I'm going to show

00:05:35,630 --> 00:05:39,199
several versions of the pie program I'm

00:05:37,909 --> 00:05:41,900
going to compute the area under the

00:05:39,199 --> 00:05:43,729
curve and this is the simple code and I

00:05:41,900 --> 00:05:47,840
hope you don't mind that it's in C I

00:05:43,729 --> 00:05:50,419
know God programmed in Fortran 77 but

00:05:47,840 --> 00:05:56,360
I'm not God I'm male so I can't be God

00:05:50,419 --> 00:05:58,460
so I have this in C and so I think the

00:05:56,360 --> 00:06:01,759
most fundamental way people use it is

00:05:58,460 --> 00:06:04,310
this thing we call the SP MD program the

00:06:01,759 --> 00:06:06,710
SPMD pattern you create a team of

00:06:04,310 --> 00:06:08,780
threads with that parallel you call your

00:06:06,710 --> 00:06:11,240
thread ID you pick up how many threads

00:06:08,780 --> 00:06:13,490
you use that to split up the iterations

00:06:11,240 --> 00:06:15,500
and I can do a huge amount of

00:06:13,490 --> 00:06:17,719
programming this way the advantage of

00:06:15,500 --> 00:06:19,460
this style of programming is it's very

00:06:17,719 --> 00:06:21,889
nice when you want to take advantage of

00:06:19,460 --> 00:06:23,210
the numa features of a system so it's a

00:06:21,889 --> 00:06:25,460
really handy way to program so that's

00:06:23,210 --> 00:06:27,139
one way people use it so I call that

00:06:25,460 --> 00:06:29,960
like the fundamental building blocks of

00:06:27,139 --> 00:06:32,150
multi-threading parallel get set thread

00:06:29,960 --> 00:06:35,210
number you know get thread number whoa

00:06:32,150 --> 00:06:37,760
there's a typo there any rate then the

00:06:35,210 --> 00:06:39,920
other way people use OpenMP oh I'm sorry

00:06:37,760 --> 00:06:41,780
what about Fortran yeah for

00:06:39,920 --> 00:06:44,360
 programmers can't put declarations

00:06:41,780 --> 00:06:46,250
inside an executable unit of code so you

00:06:44,360 --> 00:06:47,900
have to have these clauses for managing

00:06:46,250 --> 00:06:50,000
the data environment so there's a

00:06:47,900 --> 00:06:52,010
cluster of constructs that just have to

00:06:50,000 --> 00:06:54,620
be there for Fortran users shared

00:06:52,010 --> 00:06:57,650
private first private default none and

00:06:54,620 --> 00:06:59,660
we'll use them in situ it's just in C

00:06:57,650 --> 00:07:01,610
you can actually adopt a style where you

00:06:59,660 --> 00:07:05,150
don't use these very often but in

00:07:01,610 --> 00:07:07,280
Fortran you have no choice so now we go

00:07:05,150 --> 00:07:11,840
to the way that perhaps most people

00:07:07,280 --> 00:07:13,250
think of OpenMP and that is oh oh gosh

00:07:11,840 --> 00:07:17,690
you don't have to memorize my slides

00:07:13,250 --> 00:07:20,150
better okay if you have threads you have

00:07:17,690 --> 00:07:21,800
to put order constraints among the

00:07:20,150 --> 00:07:24,230
concurrent threads that's

00:07:21,800 --> 00:07:25,790
synchronization constructs and the ones

00:07:24,230 --> 00:07:28,550
that people use again and again and

00:07:25,790 --> 00:07:30,830
openmp are critical and barrier so

00:07:28,550 --> 00:07:33,650
that's the next block synchronization in

00:07:30,830 --> 00:07:34,970
the Common Core now we get to where I

00:07:33,650 --> 00:07:37,550
thought we were going to go next to

00:07:34,970 --> 00:07:39,620
money many people and many of my friends

00:07:37,550 --> 00:07:42,200
at Intel this is where they start I

00:07:39,620 --> 00:07:44,900
don't but they start with that you put a

00:07:42,200 --> 00:07:47,030
pragma OMP parallel for in a reduction

00:07:44,900 --> 00:07:49,220
if you need it and then openmp comes a

00:07:47,030 --> 00:07:52,190
way to split up loops and this is a fine

00:07:49,220 --> 00:07:54,050
way to use OpenMP i'm not criticizing it

00:07:52,190 --> 00:07:56,330
it's just I like people to understand

00:07:54,050 --> 00:07:58,880
threads first so I don't start there so

00:07:56,330 --> 00:08:00,290
that's my next cluster see we're

00:07:58,880 --> 00:08:03,170
building the common core up it's not

00:08:00,290 --> 00:08:06,380
that hard then of course you need tasks

00:08:03,170 --> 00:08:08,210
oh I love tasks you know standard

00:08:06,380 --> 00:08:10,220
pattern of using tasks I'm showing here

00:08:08,210 --> 00:08:12,110
is divide and conquer I have a single

00:08:10,220 --> 00:08:14,090
thread that starts things off and then I

00:08:12,110 --> 00:08:15,740
recursively split my job down and put it

00:08:14,090 --> 00:08:18,110
back together I would love to get a

00:08:15,740 --> 00:08:20,060
whole talk on tasks but he's only giving

00:08:18,110 --> 00:08:23,090
me 15 minutes and I'm through most of

00:08:20,060 --> 00:08:25,190
that already so that's my next cluster

00:08:23,090 --> 00:08:26,900
of instructions for the common core and

00:08:25,190 --> 00:08:29,090
then there's a few that I just couldn't

00:08:26,900 --> 00:08:32,690
describe anywhere else no wait the

00:08:29,090 --> 00:08:36,800
schedule Clause is on four so that's the

00:08:32,690 --> 00:08:39,800
common core it's an elegant API from a

00:08:36,800 --> 00:08:44,540
more civilized age so it's really

00:08:39,800 --> 00:08:46,670
awesome and I think for you experienced

00:08:44,540 --> 00:08:49,400
programmers who've been using openmp a

00:08:46,670 --> 00:08:50,990
long time you know you've mastered the

00:08:49,400 --> 00:08:52,130
pieces of it you're going to use that's

00:08:50,990 --> 00:08:54,740
great

00:08:52,130 --> 00:08:56,630
key thing about the common core is going

00:08:54,740 --> 00:08:59,450
to the effort to identify what it is

00:08:56,630 --> 00:09:01,700
that people need just to get started

00:08:59,450 --> 00:09:05,020
with serious application programming and

00:09:01,700 --> 00:09:09,260
I submit that these constructs here are

00:09:05,020 --> 00:09:12,200
for probably 95 98 percent of opening P

00:09:09,260 --> 00:09:14,720
programmers all they will ever use so we

00:09:12,200 --> 00:09:17,000
should teach it that way we should start

00:09:14,720 --> 00:09:19,310
with the Common Core and only after

00:09:17,000 --> 00:09:21,890
you've mastered the Common Core move on

00:09:19,310 --> 00:09:23,900
and in case you're going gee I like that

00:09:21,890 --> 00:09:25,940
idea I would like to start learning the

00:09:23,900 --> 00:09:27,770
Common Core or have an experienced

00:09:25,940 --> 00:09:30,590
programmer I should start teaching the

00:09:27,770 --> 00:09:32,960
Common Core we've written a book and

00:09:30,590 --> 00:09:34,460
she's holding it up over there you could

00:09:32,960 --> 00:09:37,760
actually walk over and hold it in your

00:09:34,460 --> 00:09:40,850
hands cuddle it gently it's a nice book

00:09:37,760 --> 00:09:42,470
I I'm really proud of this book it's a

00:09:40,850 --> 00:09:45,830
book that's needed to be written for a

00:09:42,470 --> 00:09:48,200
long long long time and it's really a

00:09:45,830 --> 00:09:51,230
book about how to learn openmp how to

00:09:48,200 --> 00:09:53,630
master openmp and it breaks it down into

00:09:51,230 --> 00:09:56,780
these very logical example driven

00:09:53,630 --> 00:09:59,030
presentation of the Common Core so it's

00:09:56,780 --> 00:10:01,190
a great book it also has I might mention

00:09:59,030 --> 00:10:02,780
a discussion to the memory model which

00:10:01,190 --> 00:10:05,330
as far as I can tell is not written down

00:10:02,780 --> 00:10:07,580
anywhere else in the universe so even

00:10:05,330 --> 00:10:09,350
for more advanced programmers the memory

00:10:07,580 --> 00:10:11,660
model chapter in the sack third part of

00:10:09,350 --> 00:10:13,700
that book is a must-read even if you're

00:10:11,660 --> 00:10:17,300
more advanced so go out and buy my book

00:10:13,700 --> 00:10:19,550
okay or better yet you might be able to

00:10:17,300 --> 00:10:22,460
win a copy you just go and sign up with

00:10:19,550 --> 00:10:23,960
my lovely assistant over there and you

00:10:22,460 --> 00:10:26,420
might be able to win a copy of the

00:10:23,960 --> 00:10:29,000
common core book or I just went to the

00:10:26,420 --> 00:10:31,880
MIT press booth and they have a few more

00:10:29,000 --> 00:10:33,650
copies on sale and remember if you buy

00:10:31,880 --> 00:10:36,170
them here you get a 30 percent discount

00:10:33,650 --> 00:10:39,620
so and since you want to own the book

00:10:36,170 --> 00:10:42,470
anyway you're gonna save money so that's

00:10:39,620 --> 00:10:45,470
all I hope I hit my time limit okay oh

00:10:42,470 --> 00:10:46,880
right that's good that's good and I

00:10:45,470 --> 00:10:49,130
don't have to go anywhere immediately

00:10:46,880 --> 00:10:50,960
after this so I can get off camera and

00:10:49,130 --> 00:10:53,690
then answer any questions either about

00:10:50,960 --> 00:11:00,070
the Common Core or the future of OpenMP

00:10:53,690 --> 00:11:03,410
or anything about OpenMP or sickle or or

00:11:00,070 --> 00:11:05,030
hpf or Julia or I don't know any HPC

00:11:03,410 --> 00:11:07,090
topic thank you

00:11:05,030 --> 00:11:07,090

YouTube URL: https://www.youtube.com/watch?v=tSnQR_LRVyY


