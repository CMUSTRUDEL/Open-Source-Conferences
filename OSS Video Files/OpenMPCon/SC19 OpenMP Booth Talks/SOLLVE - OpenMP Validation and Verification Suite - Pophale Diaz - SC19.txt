Title: SOLLVE - OpenMP Validation and Verification Suite - Pophale Diaz - SC19
Publication date: 2019-11-27
Playlist: SC19 OpenMP Booth Talks
Description: 
	SC19 - November 19, 2019 - Denver
Captions: 
	00:00:00,030 --> 00:00:05,940
so today's press is solve OpenMP

00:00:03,300 --> 00:00:08,309
validation and verification effort now I

00:00:05,940 --> 00:00:12,240
will explain what is solve and what is a

00:00:08,309 --> 00:00:13,679
what is happening in this project but we

00:00:12,240 --> 00:00:15,960
are collaborating with the University of

00:00:13,679 --> 00:00:19,080
Delaware on this project and we are

00:00:15,960 --> 00:00:23,160
trying to develop an openmp validation

00:00:19,080 --> 00:00:25,019
suite so it's all this is the outline of

00:00:23,160 --> 00:00:26,730
my presentation I will explain what this

00:00:25,019 --> 00:00:30,449
all project is what is the scope of the

00:00:26,730 --> 00:00:33,090
VNV what does the suite look like and

00:00:30,449 --> 00:00:36,239
what is our design process in some

00:00:33,090 --> 00:00:37,649
results some success stories how would

00:00:36,239 --> 00:00:42,149
although would like to call it

00:00:37,649 --> 00:00:44,610
collaborate with the community so this

00:00:42,149 --> 00:00:47,070
is all project it has a runtime

00:00:44,610 --> 00:00:50,100
component it has compiled a component so

00:00:47,070 --> 00:00:54,750
basically is trying to scale openmp by a

00:00:50,100 --> 00:00:57,390
LLVM for exists kale but the vnb aspect

00:00:54,750 --> 00:00:59,420
of it is implementation agnostic it does

00:00:57,390 --> 00:01:02,969
not mean that we are restricted to LLVM

00:00:59,420 --> 00:01:08,040
specifically anyone can use it and we

00:01:02,969 --> 00:01:09,600
can help or the company at large so what

00:01:08,040 --> 00:01:12,150
what is the scope and intent of the we

00:01:09,600 --> 00:01:14,360
envy we want to verify the status of

00:01:12,150 --> 00:01:16,650
your in openmp implementations

00:01:14,360 --> 00:01:20,460
specifically more specifically for the

00:01:16,650 --> 00:01:25,560
ECP exascale platforms but we I can you

00:01:20,460 --> 00:01:28,320
can use tests on all hardware we want to

00:01:25,560 --> 00:01:30,659
evaluate the OpenMP functionality in the

00:01:28,320 --> 00:01:33,000
buffer almonds on target architectures

00:01:30,659 --> 00:01:38,490
now different implementations are at

00:01:33,000 --> 00:01:41,880
different levels of implementing 4.5 5.0

00:01:38,490 --> 00:01:43,530
I don't know if a 5.0 is so it's

00:01:41,880 --> 00:01:45,090
underway but I don't think there is a

00:01:43,530 --> 00:01:47,310
complete implementation out there

00:01:45,090 --> 00:01:49,110
so using these tests you'll get a fair

00:01:47,310 --> 00:01:49,740
idea of how much implementation has been

00:01:49,110 --> 00:01:54,960
done

00:01:49,740 --> 00:01:56,399
what is remain what tests can be so we

00:01:54,960 --> 00:01:58,649
want to check the implementations

00:01:56,399 --> 00:02:02,159
conformance to the OpenMP standard the

00:01:58,649 --> 00:02:06,450
openmp standard itself is humongous and

00:02:02,159 --> 00:02:08,280
it was not built to understand well it's

00:02:06,450 --> 00:02:12,000
from a combine it developers perspective

00:02:08,280 --> 00:02:13,500
you can't start writing OpenMP code just

00:02:12,000 --> 00:02:16,230
by looking at the standard

00:02:13,500 --> 00:02:18,720
and we simplify the process the VMP test

00:02:16,230 --> 00:02:21,690
suite also is you can also look at it as

00:02:18,720 --> 00:02:24,240
an example base though we have an

00:02:21,690 --> 00:02:26,370
example document the examples document

00:02:24,240 --> 00:02:29,250
is not supposed to be exhaustive this

00:02:26,370 --> 00:02:34,260
one wherever were we hit we try to be as

00:02:29,250 --> 00:02:37,260
exhaustive as possible and we want to go

00:02:34,260 --> 00:02:40,080
it as motivated by ECP applications like

00:02:37,260 --> 00:02:44,510
what specific features are important to

00:02:40,080 --> 00:02:47,370
them we try to address more general

00:02:44,510 --> 00:02:51,360
demands from the OpenMP community if you

00:02:47,370 --> 00:02:54,540
start the conversation and we want to

00:02:51,360 --> 00:02:56,610
verify the readiness for open MP

00:02:54,540 --> 00:02:58,560
applications what does that mean now if

00:02:56,610 --> 00:03:00,959
you have an open MP application and you

00:02:58,560 --> 00:03:03,480
don't know how this is going to look how

00:03:00,959 --> 00:03:05,970
this is going to fare on any CP platform

00:03:03,480 --> 00:03:08,310
like summit or frontier coming around

00:03:05,970 --> 00:03:10,230
you can make a small kernel and send it

00:03:08,310 --> 00:03:12,090
to us and we can run them because we

00:03:10,230 --> 00:03:14,040
have access to all these platforms we

00:03:12,090 --> 00:03:15,690
can run them and tell you ok this is how

00:03:14,040 --> 00:03:18,480
it was going to look or this is

00:03:15,690 --> 00:03:20,040
conforming to open and P or you need to

00:03:18,480 --> 00:03:24,410
change this to make this more efficient

00:03:20,040 --> 00:03:26,730
so this is one of the users this is a

00:03:24,410 --> 00:03:29,610
diagram that shows how we develop our

00:03:26,730 --> 00:03:31,500
test so we analyze an open MP we take it

00:03:29,610 --> 00:03:33,870
each directive each Clause we try to

00:03:31,500 --> 00:03:36,480
keep the test as independent of each

00:03:33,870 --> 00:03:38,640
other as possible in the feature sets we

00:03:36,480 --> 00:03:40,380
formulate a test we discuss as an ERISA

00:03:38,640 --> 00:03:42,959
specification as you know the

00:03:40,380 --> 00:03:45,049
specification its there are constraints

00:03:42,959 --> 00:03:47,730
all across the specification and and to

00:03:45,049 --> 00:03:51,269
surely say that ok this is a valid

00:03:47,730 --> 00:03:53,010
opening P program a specific well coming

00:03:51,269 --> 00:03:55,709
to offloading and things like that it's

00:03:53,010 --> 00:03:58,829
difficult so discuss that if it is valid

00:03:55,709 --> 00:04:00,239
test we move on to test it with our

00:03:58,829 --> 00:04:02,310
available implementations or the

00:04:00,239 --> 00:04:05,519
different platforms and if the test

00:04:02,310 --> 00:04:07,560
passes we put it back in a V and V if it

00:04:05,519 --> 00:04:09,600
does not then we try to figure out what

00:04:07,560 --> 00:04:12,000
happened there is it something to do

00:04:09,600 --> 00:04:13,650
with the test was it a bug in the

00:04:12,000 --> 00:04:15,720
implementation and we have found such

00:04:13,650 --> 00:04:17,660
box and we have reported in them to the

00:04:15,720 --> 00:04:22,049
vendors and they have corrected it in

00:04:17,660 --> 00:04:24,330
the next release so sometimes it's a

00:04:22,049 --> 00:04:26,039
specification issue in terms of how

00:04:24,330 --> 00:04:27,210
people understand sometimes the

00:04:26,039 --> 00:04:29,160
implementers understand this

00:04:27,210 --> 00:04:31,680
back in a very different way from what a

00:04:29,160 --> 00:04:34,949
user does and we try to address this by

00:04:31,680 --> 00:04:40,259
bringing it up in the openmp era the

00:04:34,949 --> 00:04:44,340
specification forum so we started the

00:04:40,259 --> 00:04:47,180
V&B suite at four point five so as the

00:04:44,340 --> 00:04:50,940
people might be aware 4.0 was where

00:04:47,180 --> 00:04:53,190
OpenMP offload two devices came in and

00:04:50,940 --> 00:04:55,620
four point five was a refinement on it

00:04:53,190 --> 00:04:57,470
with a few new features so we have

00:04:55,620 --> 00:05:00,240
started developing the test suite

00:04:57,470 --> 00:05:02,940
specifically focusing on the offload

00:05:00,240 --> 00:05:05,009
capability because ECP machines everyone

00:05:02,940 --> 00:05:07,560
is going towards the TPU or device

00:05:05,009 --> 00:05:11,610
programming and that is important for us

00:05:07,560 --> 00:05:13,770
so we started with that and as we finish

00:05:11,610 --> 00:05:16,680
four point five we'll move on to 5.0 or

00:05:13,770 --> 00:05:21,539
5.1 depending on what the vendors are

00:05:16,680 --> 00:05:23,280
deemed right so example of our

00:05:21,539 --> 00:05:25,680
understanding respect so as we were

00:05:23,280 --> 00:05:30,210
developing the test we found out that

00:05:25,680 --> 00:05:32,520
when we did the adi to from like it is a

00:05:30,210 --> 00:05:34,889
very natural way you would want to only

00:05:32,520 --> 00:05:37,080
have half of the array your so you're

00:05:34,889 --> 00:05:39,960
dividing up the work and you want to map

00:05:37,080 --> 00:05:41,490
of the area but what we found out was

00:05:39,960 --> 00:05:44,039
that's not correct

00:05:41,490 --> 00:05:46,080
because there is an implicit mapping on

00:05:44,039 --> 00:05:48,060
the target which does the entire array

00:05:46,080 --> 00:05:50,460
and the specification says that you

00:05:48,060 --> 00:05:52,469
can't have first map or subset and then

00:05:50,460 --> 00:05:54,930
map the first so the overlapping

00:05:52,469 --> 00:05:58,080
sections does not allow that you have to

00:05:54,930 --> 00:06:01,320
the second map has to be a subset of the

00:05:58,080 --> 00:06:03,539
first I don't know if that is here but

00:06:01,320 --> 00:06:05,909
these are a few things that we found out

00:06:03,539 --> 00:06:09,560
while writing the test and it was not

00:06:05,909 --> 00:06:12,870
really explicit in the specification so

00:06:09,560 --> 00:06:16,560
this works when you a load the entire

00:06:12,870 --> 00:06:19,320
area size and you try to use half of it

00:06:16,560 --> 00:06:22,259
through a map a lock that works so these

00:06:19,320 --> 00:06:23,940
are the typical works of OpenMP target

00:06:22,259 --> 00:06:25,650
offload that we are trying to capture

00:06:23,940 --> 00:06:31,229
and you are trying to test this in

00:06:25,650 --> 00:06:33,539
implementation now something about the

00:06:31,229 --> 00:06:36,719
Ambika specification now we found out

00:06:33,539 --> 00:06:40,500
that you can't have a variable in the

00:06:36,719 --> 00:06:42,720
shade loss and map it from

00:06:40,500 --> 00:06:45,060
and have it in the math laws it is there

00:06:42,720 --> 00:06:47,040
is a specific one line somewhere in the

00:06:45,060 --> 00:06:50,640
spec that says there is this restriction

00:06:47,040 --> 00:06:54,780
you circumvented you have to change the

00:06:50,640 --> 00:06:57,390
thing of scalars so that you can use

00:06:54,780 --> 00:07:00,840
this car the share scalar this in a

00:06:57,390 --> 00:07:03,150
shared clause so this is something that

00:07:00,840 --> 00:07:05,700
a programmer is not going to realize

00:07:03,150 --> 00:07:10,860
first off without wealth learning

00:07:05,700 --> 00:07:12,720
respects from top to bottom so we look

00:07:10,860 --> 00:07:15,990
at all these try to make test cases

00:07:12,720 --> 00:07:19,140
simple usable as so that people can

00:07:15,990 --> 00:07:21,630
understand how OpenMP is used as well as

00:07:19,140 --> 00:07:29,160
verified the specification now who say

00:07:21,630 --> 00:07:30,690
will take over the rest of it so I'm

00:07:29,160 --> 00:07:32,850
going to try to code a little bit of

00:07:30,690 --> 00:07:35,070
what is the infrastructure we are trying

00:07:32,850 --> 00:07:35,370
to build and how we are planning for the

00:07:35,070 --> 00:07:38,730
future

00:07:35,370 --> 00:07:40,950
to try to extend it to five oh we has

00:07:38,730 --> 00:07:42,660
sort of mentioned we have started with

00:07:40,950 --> 00:07:44,669
four five because at the moment we were

00:07:42,660 --> 00:07:47,010
working on this bibo wasn't released yet

00:07:44,669 --> 00:07:49,620
and most of the developer development

00:07:47,010 --> 00:07:52,410
was happening in four five and we want

00:07:49,620 --> 00:07:53,910
to make sure that we are getting to a

00:07:52,410 --> 00:07:55,710
point in four five where we are happy

00:07:53,910 --> 00:07:57,120
and satisfied with the coverage in order

00:07:55,710 --> 00:07:58,740
for us to move to fibre but we

00:07:57,120 --> 00:08:02,100
understand how important it is for the

00:07:58,740 --> 00:08:04,650
vendors right now to obtain FIFO so we

00:08:02,100 --> 00:08:06,390
want to use make files because it's

00:08:04,650 --> 00:08:08,310
something that is is already available

00:08:06,390 --> 00:08:09,930
in most of the systems because it's

00:08:08,310 --> 00:08:12,930
something that is easy easily deployed

00:08:09,930 --> 00:08:15,450
so we wanted to have a multiple options

00:08:12,930 --> 00:08:17,400
that allows the user to be to customize

00:08:15,450 --> 00:08:19,800
the weight that we run the tests for

00:08:17,400 --> 00:08:21,510
example we want them to be verbose

00:08:19,800 --> 00:08:25,770
sometimes but we want them to just be

00:08:21,510 --> 00:08:27,720
pass and fail we want them to be we may

00:08:25,770 --> 00:08:29,880
have multiple different versions of day

00:08:27,720 --> 00:08:32,010
of compilers in the system so we

00:08:29,880 --> 00:08:34,890
probably want to support module files so

00:08:32,010 --> 00:08:37,919
in especially in HPC environments we

00:08:34,890 --> 00:08:40,020
will usually have module files some sort

00:08:37,919 --> 00:08:42,030
of lower modules Orleanians modules or

00:08:40,020 --> 00:08:44,730
any of these sort of capillaries so we

00:08:42,030 --> 00:08:47,220
extended it to be able to support those

00:08:44,730 --> 00:08:49,950
set of files we wanted it to be flexible

00:08:47,220 --> 00:08:54,150
respect to systems were using or they

00:08:49,950 --> 00:08:57,360
will speak to the pilot we were using so

00:08:54,150 --> 00:09:00,930
what we did was we tried to split up the

00:08:57,360 --> 00:09:03,990
process in in in a make a specific part

00:09:00,930 --> 00:09:07,830
and a system specific part so what we do

00:09:03,990 --> 00:09:10,650
is we have a folder in the

00:09:07,830 --> 00:09:12,420
infrastructure that is expecting to have

00:09:10,650 --> 00:09:15,270
the test that we are trying to develop

00:09:12,420 --> 00:09:17,220
within that folder with to have the

00:09:15,270 --> 00:09:19,350
multiple versions one of the things that

00:09:17,220 --> 00:09:23,400
we realize here is that it was easier to

00:09:19,350 --> 00:09:25,620
split up the specifically the test of 4

00:09:23,400 --> 00:09:27,510
5 5 oh and any other implementation in

00:09:25,620 --> 00:09:29,640
the future because sometimes there are

00:09:27,510 --> 00:09:31,200
slight changes that make some of the

00:09:29,640 --> 00:09:34,770
tests that we have developed for 4 5

00:09:31,200 --> 00:09:36,720
node not valid in a anymore in 5o or not

00:09:34,770 --> 00:09:38,760
valid anymore in the future so trying to

00:09:36,720 --> 00:09:41,010
be incremental with respect to openmp

00:09:38,760 --> 00:09:44,040
resulted to be more complicated than

00:09:41,010 --> 00:09:45,420
just trying to build one particular

00:09:44,040 --> 00:09:48,510
implementation there may be tests that

00:09:45,420 --> 00:09:50,910
will be duplicated of course but most

00:09:48,510 --> 00:09:52,620
likely the parts where it's complete we

00:09:50,910 --> 00:09:54,150
will not have to go and cherry-pick

00:09:52,620 --> 00:09:55,920
those parts and try to figure out how to

00:09:54,150 --> 00:10:00,390
organize it in the source code or

00:09:55,920 --> 00:10:03,840
somewhere else so inside we divide it up

00:10:00,390 --> 00:10:08,490
into multiple directives and for each of

00:10:03,840 --> 00:10:13,020
the directives we have a deep folder we

00:10:08,490 --> 00:10:17,490
have said we have on the other side we

00:10:13,020 --> 00:10:20,010
have a folder inside of which we keep a

00:10:17,490 --> 00:10:23,880
systems folder where we are allowing the

00:10:20,010 --> 00:10:27,270
people to specify a particular flat for

00:10:23,880 --> 00:10:29,310
systems or particular compilers working

00:10:27,270 --> 00:10:30,990
on so they can extend the available

00:10:29,310 --> 00:10:32,790
compilers we don't want the user to

00:10:30,990 --> 00:10:34,620
always have to go and specify all the

00:10:32,790 --> 00:10:36,360
flags that you need put OpenMP

00:10:34,620 --> 00:10:38,880
especially photo uploading because for

00:10:36,360 --> 00:10:40,320
example in GCC you have F openmp F

00:10:38,880 --> 00:10:42,030
enough a way of loading that you have

00:10:40,320 --> 00:10:43,680
the type of target your to have in and

00:10:42,030 --> 00:10:43,890
then you have probably the linking of

00:10:43,680 --> 00:10:45,420
the

00:10:43,890 --> 00:10:48,150
offloading part the linking of the host

00:10:45,420 --> 00:10:51,390
part so it becomes a big and they're

00:10:48,150 --> 00:10:54,720
both a common lines so what we want to

00:10:51,390 --> 00:10:56,940
have is we want to have everything built

00:10:54,720 --> 00:11:00,300
in and trying to support it

00:10:56,940 --> 00:11:02,430
compilers as as we can from from out of

00:11:00,300 --> 00:11:04,710
the box but also allowed the people to

00:11:02,430 --> 00:11:07,790
extend that so really you know in a

00:11:04,710 --> 00:11:12,180
recent commit that we had we started a

00:11:07,790 --> 00:11:14,670
supporting a AMTA OMP that is a risk

00:11:12,180 --> 00:11:17,790
that has been released many times and I

00:11:14,670 --> 00:11:19,230
have results for them but now somebody

00:11:17,790 --> 00:11:21,029
if somebody wants to use that they just

00:11:19,230 --> 00:11:22,829
have to download it and most of the

00:11:21,029 --> 00:11:26,430
flags that you need for a UMP are

00:11:22,829 --> 00:11:28,079
already embedded in them so in the

00:11:26,430 --> 00:11:30,629
system file what you will be able to do

00:11:28,079 --> 00:11:32,550
is extend all of those simple cases so

00:11:30,629 --> 00:11:33,959
for example for the module files we are

00:11:32,550 --> 00:11:35,370
not going to be able to know whether

00:11:33,959 --> 00:11:37,230
they are children aim of the modules for

00:11:35,370 --> 00:11:39,420
each of they compile it so week there is

00:11:37,230 --> 00:11:41,100
an option but you kind of specified what

00:11:39,420 --> 00:11:42,660
is the name of them audio and every time

00:11:41,100 --> 00:11:43,949
it will run a test it will load the

00:11:42,660 --> 00:11:46,079
module to make sure that that is a

00:11:43,949 --> 00:11:49,529
particular context that you want to be

00:11:46,079 --> 00:11:53,249
building away working on there is also a

00:11:49,529 --> 00:11:55,439
template folder where we keep like all

00:11:53,249 --> 00:11:56,939
the users of the old fuzzy world so in

00:11:55,439 --> 00:11:58,170
the infra whenever we were making the

00:11:56,939 --> 00:12:01,079
inference search and one of the things

00:11:58,170 --> 00:12:03,209
that we did was trying to otherwise the

00:12:01,079 --> 00:12:04,829
way we output about the test so whenever

00:12:03,209 --> 00:12:07,170
we are running a test we want to always

00:12:04,829 --> 00:12:09,480
have the same sort of message we also

00:12:07,170 --> 00:12:11,579
want to need know what file created the

00:12:09,480 --> 00:12:13,230
message worth lining the file created

00:12:11,579 --> 00:12:15,329
the message so we created a help file

00:12:13,230 --> 00:12:17,309
and in the template folder you can see

00:12:15,329 --> 00:12:19,350
all the possible uses of that particular

00:12:17,309 --> 00:12:21,569
file and the hair file is visually

00:12:19,350 --> 00:12:23,910
serene do MPV and they be of the hair

00:12:21,569 --> 00:12:30,829
file is to be able to standardize it the

00:12:23,910 --> 00:12:34,939
way we we show the output in the test so

00:12:30,829 --> 00:12:37,139
currently we have a website where we

00:12:34,939 --> 00:12:39,389
manually right now we are trying to go

00:12:37,139 --> 00:12:41,309
into continuous integration but manually

00:12:39,389 --> 00:12:43,139
right now what we do is every so often

00:12:41,309 --> 00:12:45,089
we update the results on that system

00:12:43,139 --> 00:12:47,040
that we have right now you can't see

00:12:45,089 --> 00:12:48,480
more than thousand runs in there because

00:12:47,040 --> 00:12:50,339
we have been running it on multiple

00:12:48,480 --> 00:12:52,170
versions of GCC we have been donated or

00:12:50,339 --> 00:12:54,120
multiple versions of clang we have been

00:12:52,170 --> 00:12:56,970
running you don't see multiple systems

00:12:54,120 --> 00:12:58,800
so we have some it we used to have Titan

00:12:56,970 --> 00:13:00,839
before not anymore

00:12:58,800 --> 00:13:02,550
so we have been always trying to to

00:13:00,839 --> 00:13:06,089
expand as much as possibly between

00:13:02,550 --> 00:13:09,779
vendors and in between different systems

00:13:06,089 --> 00:13:11,670
because we have also realized that when

00:13:09,779 --> 00:13:13,620
you stay with a single implementation

00:13:11,670 --> 00:13:15,300
you tend to get biased to that

00:13:13,620 --> 00:13:17,129
particular implementation and we have

00:13:15,300 --> 00:13:19,800
noticed that sometimes we are not able

00:13:17,129 --> 00:13:21,509
to catch bugs on our tests and then

00:13:19,800 --> 00:13:23,740
somebody else that is working on

00:13:21,509 --> 00:13:26,110
independent compiler comes back and they

00:13:23,740 --> 00:13:27,850
are like look this the specification

00:13:26,110 --> 00:13:29,679
actually says this so we go back and

00:13:27,850 --> 00:13:31,089
have to remixed at this right so the

00:13:29,679 --> 00:13:33,160
cycle that Toru was shown at the

00:13:31,089 --> 00:13:35,709
beginning is actually something that we

00:13:33,160 --> 00:13:38,559
sometimes have to redo or even contains

00:13:35,709 --> 00:13:40,240
that we already have so what I want to

00:13:38,559 --> 00:13:42,309
say is that please visit the website to

00:13:40,240 --> 00:13:44,139
make sure that you have you will get all

00:13:42,309 --> 00:13:46,749
the output you can't see it what

00:13:44,139 --> 00:13:49,629
compiler generate the output you can see

00:13:46,749 --> 00:13:51,459
how to collaborate some of the things

00:13:49,629 --> 00:13:53,050
that we have trying to have been trying

00:13:51,459 --> 00:13:55,929
to keep track of is what are the bugs

00:13:53,050 --> 00:13:57,670
that we find but this is also process

00:13:55,929 --> 00:13:59,379
that each vendor has a different way to

00:13:57,670 --> 00:14:02,230
communicate with them so we try to

00:13:59,379 --> 00:14:04,779
summarize where we have the things also

00:14:02,230 --> 00:14:06,369
in the specification so an example of an

00:14:04,779 --> 00:14:08,170
issue that we have funded or not an

00:14:06,369 --> 00:14:09,759
issue but jumped in that grading and a

00:14:08,170 --> 00:14:11,980
special discussion in the specification

00:14:09,759 --> 00:14:13,269
was we realized that the interpretation

00:14:11,980 --> 00:14:14,589
of the number of devices can be

00:14:13,269 --> 00:14:16,629
different if you are considering the

00:14:14,589 --> 00:14:19,089
host as a device or not as a cell device

00:14:16,629 --> 00:14:21,339
and so probably somebody that had one

00:14:19,089 --> 00:14:24,999
GPU and one CPU would result into

00:14:21,339 --> 00:14:26,889
obtaining to OEM phenom devices and so

00:14:24,999 --> 00:14:28,839
it becomes a question of what do we do

00:14:26,889 --> 00:14:30,579
with respect to to that number so we

00:14:28,839 --> 00:14:32,589
raise that question into a specification

00:14:30,579 --> 00:14:35,709
the specification came back to us saying

00:14:32,589 --> 00:14:37,809
we we have to be more clear about this

00:14:35,709 --> 00:14:41,709
and so the most likely is going to alter

00:14:37,809 --> 00:14:44,589
the way by one or the way six-oh is is

00:14:41,709 --> 00:14:46,749
release so we keep we try to keep track

00:14:44,589 --> 00:14:48,790
of this this is mainly for for our book

00:14:46,749 --> 00:14:50,949
to a bookkeeping but there has been many

00:14:48,790 --> 00:14:53,829
cases what we where we submit works we

00:14:50,949 --> 00:14:55,990
have submitted works to IBM we have

00:14:53,829 --> 00:14:57,790
submitted bucks to LLVM and to GCC and

00:14:55,990 --> 00:15:00,519
we are trying to always increase the

00:14:57,790 --> 00:15:02,799
number of compilers that we use we know

00:15:00,519 --> 00:15:04,209
for example that there are several

00:15:02,799 --> 00:15:06,369
vendors that are right that right now

00:15:04,209 --> 00:15:09,579
interested and that are using their test

00:15:06,369 --> 00:15:13,119
suite for their own tracking of their

00:15:09,579 --> 00:15:16,299
owns their own bugs for example for

00:15:13,119 --> 00:15:19,360
regulation takes testing we also have a

00:15:16,299 --> 00:15:20,920
lot of interest in because we are part

00:15:19,360 --> 00:15:22,899
of the ECP project we have a lot of

00:15:20,920 --> 00:15:24,879
interest in the new systems to be able

00:15:22,899 --> 00:15:28,480
to use this as part of the validation

00:15:24,879 --> 00:15:30,549
process of new systems so I think that

00:15:28,480 --> 00:15:31,959
what we are focusing on alert is trying

00:15:30,549 --> 00:15:34,360
to build our infrastructure that allows

00:15:31,959 --> 00:15:35,139
multiple people from multiple area sites

00:15:34,360 --> 00:15:37,029
to

00:15:35,139 --> 00:15:39,040
contribute to us I've tried to keep it

00:15:37,029 --> 00:15:41,889
as been the employee has been there

00:15:39,040 --> 00:15:43,779
independent as possible so for example

00:15:41,889 --> 00:15:46,239
some result in Summit there are multiple

00:15:43,779 --> 00:15:51,209
ways that you can run this these are

00:15:46,239 --> 00:15:54,369
results for denote GCC IBM Excel and

00:15:51,209 --> 00:15:56,350
LLVM compiler in some it in particular

00:15:54,369 --> 00:15:58,419
there are two versions of LLVM one is

00:15:56,350 --> 00:16:02,919
day9 the trunk version the other one is

00:15:58,419 --> 00:16:05,889
the coral or yky katie version of LLVM

00:16:02,919 --> 00:16:08,049
that is also available to download so we

00:16:05,889 --> 00:16:11,230
have been able to try those today to to

00:16:08,049 --> 00:16:13,509
tried our test with on those two and we

00:16:11,230 --> 00:16:15,850
see for example that if you if you were

00:16:13,509 --> 00:16:17,619
to seek only within IBM Excel you'll see

00:16:15,850 --> 00:16:19,660
that all of it passes but if whenever

00:16:17,619 --> 00:16:22,209
you move to another one so month the

00:16:19,660 --> 00:16:26,169
term of sometimes they fail so for

00:16:22,209 --> 00:16:28,179
example IBM Excel supports C++ a class

00:16:26,169 --> 00:16:30,369
is almost out of the works in open mp4

00:16:28,179 --> 00:16:33,160
file but there are elements that are

00:16:30,369 --> 00:16:34,600
extensions on the IBM a compiler that

00:16:33,160 --> 00:16:36,939
are not necessarily supported by the

00:16:34,600 --> 00:16:39,399
specification itself so we if we were to

00:16:36,939 --> 00:16:40,720
say only with the IBM we wouldn't find

00:16:39,399 --> 00:16:42,879
out that some of the tests that we

00:16:40,720 --> 00:16:45,279
created in the past that were using C++

00:16:42,879 --> 00:16:48,339
classes were had to be modified in order

00:16:45,279 --> 00:16:52,049
to be compliant with four four five we

00:16:48,339 --> 00:16:55,899
have also run it on our own systems and

00:16:52,049 --> 00:16:57,220
in this we have we try to summarize all

00:16:55,899 --> 00:16:59,319
the different versions that we already

00:16:57,220 --> 00:17:03,730
have and that we're allowed to publish

00:16:59,319 --> 00:17:07,689
right now we have clang we have GCC or G

00:17:03,730 --> 00:17:09,850
new we have a o and P we have Excel C

00:17:07,689 --> 00:17:12,010
and we have the coral trend and and all

00:17:09,850 --> 00:17:15,370
of them we see that there is still some

00:17:12,010 --> 00:17:17,740
room and sometimes these vendors are

00:17:15,370 --> 00:17:19,269
contacting us saying there may be things

00:17:17,740 --> 00:17:21,490
in our tests that we have to look up

00:17:19,269 --> 00:17:23,289
work so what I'm trying to say here is

00:17:21,490 --> 00:17:25,029
that if you are a user of our test suite

00:17:23,289 --> 00:17:26,740
and you find out that there is something

00:17:25,029 --> 00:17:29,950
that you want to discuss with us we are

00:17:26,740 --> 00:17:32,139
always open to that okay for example you

00:17:29,950 --> 00:17:34,960
know a OMP OMP has multiple release

00:17:32,139 --> 00:17:38,019
already so we have from six to six to

00:17:34,960 --> 00:17:40,179
eighty four zero seven zero zero one

00:17:38,019 --> 00:17:42,090
what they wait to envision release seven

00:17:40,179 --> 00:17:44,080
five and there has been some

00:17:42,090 --> 00:17:45,909
improvements that i have there we

00:17:44,080 --> 00:17:47,470
recently had a conversation with them

00:17:45,909 --> 00:17:48,820
they said we have some comments for you

00:17:47,470 --> 00:17:50,440
so we are all

00:17:48,820 --> 00:17:52,269
ready having conversations with them and

00:17:50,440 --> 00:17:53,679
we want to see if if this is something

00:17:52,269 --> 00:17:55,740
that we have to release it or if this is

00:17:53,679 --> 00:17:58,929
something that they have to move it okay

00:17:55,740 --> 00:18:00,789
and also maintaining this amount of

00:17:58,929 --> 00:18:02,590
compilers tend to be difficult so it's

00:18:00,789 --> 00:18:04,149
not only about writing the test it's

00:18:02,590 --> 00:18:05,889
also about trying to come up with as

00:18:04,149 --> 00:18:07,659
many system every one with as many

00:18:05,889 --> 00:18:11,110
compilers as we can so we are also

00:18:07,659 --> 00:18:12,610
trying to meet with vendors to see how

00:18:11,110 --> 00:18:15,759
we can make this place a little bit more

00:18:12,610 --> 00:18:18,940
smooth for us as well so there are some

00:18:15,759 --> 00:18:21,580
success stories for example AMD and Cray

00:18:18,940 --> 00:18:25,210
has already told us that there is they

00:18:21,580 --> 00:18:26,950
are using this Intel has already told us

00:18:25,210 --> 00:18:29,230
that they are using this for their own a

00:18:26,950 --> 00:18:31,090
compiler development so there are

00:18:29,230 --> 00:18:33,909
already members that are interested a

00:18:31,090 --> 00:18:35,830
most of them the major criticism is the

00:18:33,909 --> 00:18:39,159
amount of tests that we have and our

00:18:35,830 --> 00:18:41,620
major a message for them is we need as

00:18:39,159 --> 00:18:43,659
many hands and eyes on these because

00:18:41,620 --> 00:18:45,970
it's really hard to keep to give

00:18:43,659 --> 00:18:48,009
everything to their weight with our

00:18:45,970 --> 00:18:50,350
effort so we want this to be a community

00:18:48,009 --> 00:18:51,759
effort and we want to have as many

00:18:50,350 --> 00:18:54,789
people as we have and so for that reason

00:18:51,759 --> 00:18:57,610
we try to specify how the collaboration

00:18:54,789 --> 00:18:59,110
happens we are open to issues we are

00:18:57,610 --> 00:19:01,419
open to pull requests we are open to

00:18:59,110 --> 00:19:03,519
communication or to have in meetings or

00:19:01,419 --> 00:19:08,139
whatever whether any of the compiler

00:19:03,519 --> 00:19:11,019
vendors one so yeah we we I think that

00:19:08,139 --> 00:19:13,000
our our project has decided to track

00:19:11,019 --> 00:19:15,549
attention and we just want to make sure

00:19:13,000 --> 00:19:17,320
that we remain as the option for for

00:19:15,549 --> 00:19:19,269
this and we want to always continue in a

00:19:17,320 --> 00:19:22,889
vendor independent because then they're

00:19:19,269 --> 00:19:26,049
independent we do not want to reach the

00:19:22,889 --> 00:19:29,139
testing that each of the vendor has

00:19:26,049 --> 00:19:30,879
because they they still need that for

00:19:29,139 --> 00:19:32,230
own development there is still we took

00:19:30,879 --> 00:19:34,450
the trade their own tests were there on

00:19:32,230 --> 00:19:36,009
the runway but that test that they are

00:19:34,450 --> 00:19:38,019
creating will be biased to their own

00:19:36,009 --> 00:19:40,029
particular implementation and we want it

00:19:38,019 --> 00:19:42,399
to be something that we can make sure

00:19:40,029 --> 00:19:45,909
that the specification itself is is

00:19:42,399 --> 00:19:48,879
clear that we can all agree with respect

00:19:45,909 --> 00:19:50,919
to how to interpret things so if you

00:19:48,879 --> 00:19:52,870
wanna collaborate you can go into our

00:19:50,919 --> 00:19:54,820
give up you can create issues if you

00:19:52,870 --> 00:19:57,010
don't have time to do a peer you can say

00:19:54,820 --> 00:19:59,289
why don't you look at this a particular

00:19:57,010 --> 00:20:01,149
test you can do this or if you tried on

00:19:59,289 --> 00:20:02,980
a particular system for example we had

00:20:01,149 --> 00:20:06,840
somebody from NEC

00:20:02,980 --> 00:20:10,210
using it ona on the outter i6 system

00:20:06,840 --> 00:20:11,740
well you're too many threads and it's

00:20:10,210 --> 00:20:13,899
hard for us so right now we are trying

00:20:11,740 --> 00:20:15,879
to improve that so we make sure that we

00:20:13,899 --> 00:20:18,029
are also useful for them so just come

00:20:15,879 --> 00:20:21,389
into our website and make sure that you

00:20:18,029 --> 00:20:23,980
give us comments and whatever you need

00:20:21,389 --> 00:20:25,809
if you need if you need to check the

00:20:23,980 --> 00:20:27,940
status of our implementation you can go

00:20:25,809 --> 00:20:29,769
into our website if you need to check

00:20:27,940 --> 00:20:31,330
the status of some back of some

00:20:29,769 --> 00:20:33,190
particular implementation go into our

00:20:31,330 --> 00:20:34,720
website go into our results you can

00:20:33,190 --> 00:20:37,059
filter by system you complete by

00:20:34,720 --> 00:20:38,769
compiler you can click on it it will pop

00:20:37,059 --> 00:20:40,629
up a new window it will show you what

00:20:38,769 --> 00:20:42,940
the output was what was the issue

00:20:40,629 --> 00:20:47,860
if you won't need to check your own

00:20:42,940 --> 00:20:50,230
openmp you can obtain the git repo and

00:20:47,860 --> 00:20:52,450
run it yourself there are already

00:20:50,230 --> 00:20:54,399
instructions in in our website on how to

00:20:52,450 --> 00:20:56,049
do this and if you have a problem or you

00:20:54,399 --> 00:20:58,330
wanna mention something you can either

00:20:56,049 --> 00:21:00,970
submit an issue or create a PR and we'll

00:20:58,330 --> 00:21:02,740
be happy to take a look at it and if you

00:21:00,970 --> 00:21:04,720
find that something is missing please

00:21:02,740 --> 00:21:06,580
submit an issue or create a PR and

00:21:04,720 --> 00:21:10,230
communicate with us we are trying to be

00:21:06,580 --> 00:21:10,230

YouTube URL: https://www.youtube.com/watch?v=UEj8r4P0lcE


