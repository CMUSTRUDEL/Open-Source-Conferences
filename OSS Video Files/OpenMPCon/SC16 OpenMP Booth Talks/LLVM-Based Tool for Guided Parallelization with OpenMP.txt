Title: LLVM-Based Tool for Guided Parallelization with OpenMP
Publication date: 2016-11-21
Playlist: SC16 OpenMP Booth Talks
Description: 
	Manuel Arenaz,  Appentra, University of CoruÃ±a, Spain
SC16 Booth talk November 2016 Salt Lake City
Captions: 
	00:00:00,000 --> 00:00:05,130
hope so thank you very much for

00:00:02,460 --> 00:00:09,269
threatening this this token for your

00:00:05,130 --> 00:00:11,820
your interest in in our work well i am

00:00:09,269 --> 00:00:14,340
professor in in spain university of

00:00:11,820 --> 00:00:17,670
Caronia and i conducted research more

00:00:14,340 --> 00:00:19,529
than 15 years ago on advances static

00:00:17,670 --> 00:00:22,590
analysis of programs and trying to find

00:00:19,529 --> 00:00:24,150
now found in a startup company called

00:00:22,590 --> 00:00:27,330
upendra trying to find different

00:00:24,150 --> 00:00:29,340
innovative ways to help its pc

00:00:27,330 --> 00:00:31,740
developers to pour the course and

00:00:29,340 --> 00:00:34,980
modernize this code for modern hardware

00:00:31,740 --> 00:00:38,250
either using multi colors to m-files

00:00:34,980 --> 00:00:41,760
GPUs whatever the hover it is okay so

00:00:38,250 --> 00:00:44,700
here we are presenting a new tool that

00:00:41,760 --> 00:00:46,890
we have just finished developing almost

00:00:44,700 --> 00:00:48,350
as weak and we prevent with back to

00:00:46,890 --> 00:00:51,840
lunch during the following month

00:00:48,350 --> 00:00:53,550
beginning of next year and everything of

00:00:51,840 --> 00:00:56,010
the work we are doing is based on the

00:00:53,550 --> 00:00:58,140
llvm infrastructure that is a common

00:00:56,010 --> 00:01:01,410
infrastructure for the whole industrial

00:00:58,140 --> 00:01:03,660
for us as we know so all of the

00:01:01,410 --> 00:01:05,430
techniques on a personality that we do

00:01:03,660 --> 00:01:09,420
is top on top of this infrastructure

00:01:05,430 --> 00:01:12,090
that is used for by Intel invidi on IBM

00:01:09,420 --> 00:01:14,070
all of this all of the major labs and

00:01:12,090 --> 00:01:16,200
major industries and basically what we

00:01:14,070 --> 00:01:19,020
do is with our static analysis we are

00:01:16,200 --> 00:01:21,840
trying to apply to help people modernize

00:01:19,020 --> 00:01:24,180
their code in particular by helping them

00:01:21,840 --> 00:01:27,090
in paralyzing their sequential code to

00:01:24,180 --> 00:01:30,060
be efficient executed GPUs multi-course

00:01:27,090 --> 00:01:33,479
unify whatever the the software it is ok

00:01:30,060 --> 00:01:37,159
so this is what my talk is going to be

00:01:33,479 --> 00:01:39,869
about today so I will begin to explain

00:01:37,159 --> 00:01:45,090
why pal work by a new technology to do

00:01:39,869 --> 00:01:47,549
this so basically we're facing thrilling

00:01:45,090 --> 00:01:50,159
days where everybody needs to modernize

00:01:47,549 --> 00:01:52,670
the software this is a very tough work

00:01:50,159 --> 00:01:54,810
because you have to pour your code I'm

00:01:52,670 --> 00:01:57,030
important part of the quote that you

00:01:54,810 --> 00:01:58,770
have to do is platform independent but

00:01:57,030 --> 00:02:01,610
other party's platform dependence so at

00:01:58,770 --> 00:02:04,920
some time at some point you are facing a

00:02:01,610 --> 00:02:07,740
workflow that goes through many many

00:02:04,920 --> 00:02:09,720
iterations where you repeat performance

00:02:07,740 --> 00:02:12,599
measurement of your code you have to

00:02:09,720 --> 00:02:13,770
decide how to paralyze your code compile

00:02:12,599 --> 00:02:15,930
it to binary the bar

00:02:13,770 --> 00:02:17,010
executed until you achieve the

00:02:15,930 --> 00:02:20,370
performance that you need for your

00:02:17,010 --> 00:02:23,100
applications so all of these stages of

00:02:20,370 --> 00:02:24,570
the of the war flow are covered by

00:02:23,100 --> 00:02:25,950
flagship products that you have

00:02:24,570 --> 00:02:27,870
available in the market by the

00:02:25,950 --> 00:02:29,610
Commission or free but there is a one

00:02:27,870 --> 00:02:32,340
states that is the palace station stage

00:02:29,610 --> 00:02:34,710
that currently remains almost as a

00:02:32,340 --> 00:02:37,230
manual process you must learn to

00:02:34,710 --> 00:02:38,700
parallel parallel programming or you

00:02:37,230 --> 00:02:40,950
must have expressed in your team that

00:02:38,700 --> 00:02:44,160
helped you to modernize too poor and too

00:02:40,950 --> 00:02:46,620
paralyzed your code so this even today

00:02:44,160 --> 00:02:48,870
it remains also almost as a manual

00:02:46,620 --> 00:02:51,900
process so the question is how can we

00:02:48,870 --> 00:02:54,240
help you how we make these states easier

00:02:51,900 --> 00:03:00,030
for you to put your clothes on to

00:02:54,240 --> 00:03:02,910
develop Justin difficult so after four

00:03:00,030 --> 00:03:04,410
years since we founded the company we

00:03:02,910 --> 00:03:06,270
engage it with the origination a

00:03:04,410 --> 00:03:07,770
laboratory and it has been very

00:03:06,270 --> 00:03:09,900
important for us because we had the

00:03:07,770 --> 00:03:13,170
opportunity to collaborate with people

00:03:09,900 --> 00:03:17,760
that knows really well the needs of

00:03:13,170 --> 00:03:20,160
their real users the users that know all

00:03:17,760 --> 00:03:22,470
of this the stages are covered as is

00:03:20,160 --> 00:03:24,510
said by a variety of tools but for

00:03:22,470 --> 00:03:26,820
politicians you don't really have a tool

00:03:24,510 --> 00:03:28,560
that makes the work for you so in the

00:03:26,820 --> 00:03:30,690
end you have to do it yourself and to

00:03:28,560 --> 00:03:32,340
decide which are the best policy and

00:03:30,690 --> 00:03:35,310
strategy for your call and this is

00:03:32,340 --> 00:03:37,950
really a difficult difficult work that

00:03:35,310 --> 00:03:40,670
you have to face so we engage with Oscar

00:03:37,950 --> 00:03:43,830
with Fernanda and they help us during

00:03:40,670 --> 00:03:45,990
one year almost one year and a half to

00:03:43,830 --> 00:03:48,120
really understand what they need that

00:03:45,990 --> 00:03:51,480
the users are having in the National Lab

00:03:48,120 --> 00:03:53,850
and you can extrapolate these to all the

00:03:51,480 --> 00:03:57,860
labs on all the universities that are

00:03:53,850 --> 00:04:00,180
working in the windy HPC community so

00:03:57,860 --> 00:04:02,520
with this project with them we were able

00:04:00,180 --> 00:04:04,830
to validate the palaver technology on

00:04:02,520 --> 00:04:06,420
Titan the supercomputer and you can see

00:04:04,830 --> 00:04:09,540
here some of the results we have

00:04:06,420 --> 00:04:11,700
published it in a paper with with Oscar

00:04:09,540 --> 00:04:16,080
and you can see that we have a speed up

00:04:11,700 --> 00:04:18,510
from 2 x 240 X using OpenMP open if you

00:04:16,080 --> 00:04:21,600
see on the tent and supercomputing that

00:04:18,510 --> 00:04:24,090
is a hybrid compute a computer has

00:04:21,600 --> 00:04:25,500
multi-course and GPUs and the performers

00:04:24,090 --> 00:04:27,210
that you can obtain pretty much

00:04:25,500 --> 00:04:29,220
dependent depends on the

00:04:27,210 --> 00:04:30,569
features of the program itself not on

00:04:29,220 --> 00:04:33,810
the hardwood you're runnin runnin on

00:04:30,569 --> 00:04:36,630
okay so we were able to validate it this

00:04:33,810 --> 00:04:39,380
was the first step for us to validate

00:04:36,630 --> 00:04:43,080
our technology and one of the first

00:04:39,380 --> 00:04:47,210
requirement we had from them is ok we

00:04:43,080 --> 00:04:50,970
have been doors changing however every

00:04:47,210 --> 00:04:53,069
2-3 years so the software stack changes

00:04:50,970 --> 00:04:55,380
as the harbor changes so you can see an

00:04:53,069 --> 00:04:58,830
evolution in this standard like OpenMP

00:04:55,380 --> 00:05:01,949
it evolved from open p 2 3 4 and they

00:04:58,830 --> 00:05:05,250
they incorporate features in the

00:05:01,949 --> 00:05:08,250
language in the in the in the in the

00:05:05,250 --> 00:05:11,099
standard that provides you a way to

00:05:08,250 --> 00:05:12,810
program in parallel a multi-core to

00:05:11,099 --> 00:05:15,389
extend it with tasking and now to

00:05:12,810 --> 00:05:18,000
offload the workload to any kind of

00:05:15,389 --> 00:05:21,960
accelerator others it may be a GPU as

00:05:18,000 --> 00:05:23,669
you fight or whatever it is so one of

00:05:21,960 --> 00:05:27,050
the things they may they were most

00:05:23,669 --> 00:05:29,699
interested in is okay how can we train

00:05:27,050 --> 00:05:32,610
newcomers to the field to learn all of

00:05:29,699 --> 00:05:34,770
this complex programming environment and

00:05:32,610 --> 00:05:37,919
even how can we train our explicit

00:05:34,770 --> 00:05:39,770
developers to recycle themselves with

00:05:37,919 --> 00:05:42,599
the noobs that had come to the market

00:05:39,770 --> 00:05:44,219
every one to three years with the change

00:05:42,599 --> 00:05:46,620
of the hardware and the changes in the

00:05:44,219 --> 00:05:49,380
software stack so working with Fernanda

00:05:46,620 --> 00:05:52,259
we came up with a specification of a new

00:05:49,380 --> 00:05:53,820
tool that we call the power trainer hope

00:05:52,259 --> 00:05:56,130
that this is the one that we will be

00:05:53,820 --> 00:05:59,520
presenting here today and it is intended

00:05:56,130 --> 00:06:01,919
to cover the needs of training and to

00:05:59,520 --> 00:06:03,810
make you learning open and be in this

00:06:01,919 --> 00:06:05,969
particular case in a more productive

00:06:03,810 --> 00:06:10,130
manner in a faster way this is what we

00:06:05,969 --> 00:06:13,919
will be showing here today okay so

00:06:10,130 --> 00:06:15,599
learning faster we call it expression

00:06:13,919 --> 00:06:19,050
some people call it experiential

00:06:15,599 --> 00:06:20,759
learning what's the difference when we

00:06:19,050 --> 00:06:23,009
lecture parallel programming we usually

00:06:20,759 --> 00:06:25,110
give the students a lot of materials

00:06:23,009 --> 00:06:29,250
that they have to simulate in their

00:06:25,110 --> 00:06:31,199
heads the next level to increase the

00:06:29,250 --> 00:06:32,849
retention of learning by the students is

00:06:31,199 --> 00:06:35,430
okay let's provide them with some

00:06:32,849 --> 00:06:37,560
exercises but they can't play with and

00:06:35,430 --> 00:06:40,590
they can learn and they can apply what

00:06:37,560 --> 00:06:44,820
they have learned in one to three days

00:06:40,590 --> 00:06:47,640
serve lamb okay so but they still the

00:06:44,820 --> 00:06:52,050
result a very very big very big gap

00:06:47,640 --> 00:06:54,480
between the complexity of the codes that

00:06:52,050 --> 00:06:56,850
you can face in that 23 days training

00:06:54,480 --> 00:06:59,280
and the complexity of your call will you

00:06:56,850 --> 00:07:01,440
go back office and you try to apply

00:06:59,280 --> 00:07:04,050
everything you have learned to the code

00:07:01,440 --> 00:07:08,370
that you are you have in your science or

00:07:04,050 --> 00:07:10,620
injure your your daily work so for you

00:07:08,370 --> 00:07:12,390
to really apply all you have learned and

00:07:10,620 --> 00:07:14,280
go back to your office and apply it

00:07:12,390 --> 00:07:16,050
immediately what you really need this

00:07:14,280 --> 00:07:17,880
from the very beginning to begin to

00:07:16,050 --> 00:07:21,030
practice with everything you have

00:07:17,880 --> 00:07:23,160
learned in a very similar in a very fast

00:07:21,030 --> 00:07:24,930
manner and applying it to your code so

00:07:23,160 --> 00:07:26,880
when you when you finish your course

00:07:24,930 --> 00:07:28,500
you're learning curves you have already

00:07:26,880 --> 00:07:31,230
been able to apply what you have learned

00:07:28,500 --> 00:07:33,480
to your real goal so when you go back to

00:07:31,230 --> 00:07:35,040
your video don't begin from scratch you

00:07:33,480 --> 00:07:37,650
begin with something that you have

00:07:35,040 --> 00:07:39,870
learned during the courses okay so this

00:07:37,650 --> 00:07:41,730
is what some people call experiential

00:07:39,870 --> 00:07:43,680
learning that this and the student

00:07:41,730 --> 00:07:46,350
center couples when you learn by

00:07:43,680 --> 00:07:49,140
practicing immediately with your calls

00:07:46,350 --> 00:07:52,290
and with your what you're doing so let

00:07:49,140 --> 00:07:54,690
me give you show you a demonstration of

00:07:52,290 --> 00:07:58,140
of the tool i will use several calls

00:07:54,690 --> 00:08:02,670
from physics from its past computations

00:07:58,140 --> 00:08:06,720
and even from very well-known micro

00:08:02,670 --> 00:08:09,420
kernels of using real applications and

00:08:06,720 --> 00:08:11,280
we will do it with OpenMP and we can do

00:08:09,420 --> 00:08:13,890
it well either with DC CEO the PGI

00:08:11,280 --> 00:08:16,080
compiler winter compiler if we are not

00:08:13,890 --> 00:08:22,770
in this case we are not tied 20-20

00:08:16,080 --> 00:08:25,110
platform so this is the tool so imagine

00:08:22,770 --> 00:08:27,150
this two panels kind of google

00:08:25,110 --> 00:08:29,880
translator instead of english to spanish

00:08:27,150 --> 00:08:32,550
from sequential to partner so you can

00:08:29,880 --> 00:08:34,470
choose what kind of plasmas you want to

00:08:32,550 --> 00:08:37,620
use either open in p or open it easy

00:08:34,470 --> 00:08:40,290
okay here you have a project manager is

00:08:37,620 --> 00:08:42,030
what you can't have your codes or the

00:08:40,290 --> 00:08:44,220
codes or the exercises that the lecture

00:08:42,030 --> 00:08:46,620
provides you during the course and you

00:08:44,220 --> 00:08:48,900
can have the sources and you can open

00:08:46,620 --> 00:08:52,230
this code let's begin with a simple

00:08:48,900 --> 00:08:53,340
example you open the code and you can

00:08:52,230 --> 00:08:55,920
see instantly

00:08:53,340 --> 00:08:57,300
that this parallel code has been

00:08:55,920 --> 00:08:59,640
generated by the pally with technology

00:08:57,300 --> 00:09:02,180
we have analyzed the call we have

00:08:59,640 --> 00:09:06,300
analyzed econ the dependencies we have

00:09:02,180 --> 00:09:08,610
detected a reduction operation on the

00:09:06,300 --> 00:09:11,160
variable son we do all this job for you

00:09:08,610 --> 00:09:13,320
we destroyed the parallelism we decide

00:09:11,160 --> 00:09:15,360
whether it can be paralyzed or not we

00:09:13,320 --> 00:09:18,050
build the best paralyzation strategy for

00:09:15,360 --> 00:09:20,490
this and we implemented in open mp4 you

00:09:18,050 --> 00:09:23,790
okay this is all that we are doing at

00:09:20,490 --> 00:09:26,280
this moment so at this point what you

00:09:23,790 --> 00:09:28,860
all have can do in this part of the UI

00:09:26,280 --> 00:09:31,320
you have two profiles sequential and

00:09:28,860 --> 00:09:32,100
parallel this has been tested in for the

00:09:31,320 --> 00:09:33,960
first time in the Barcelona

00:09:32,100 --> 00:09:37,380
supercomputing Center three weeks ago

00:09:33,960 --> 00:09:39,840
and some students really find it really

00:09:37,380 --> 00:09:42,180
useful to to lend using this tool so

00:09:39,840 --> 00:09:44,460
here what you can do is just select the

00:09:42,180 --> 00:09:47,040
preferred sequential profile you can

00:09:44,460 --> 00:09:51,840
select the compiler of choice let's use

00:09:47,040 --> 00:09:54,150
the g new compiler and you can for the

00:09:51,840 --> 00:09:58,530
prodigy effective in this case the p

00:09:54,150 --> 00:10:00,570
project you can clean the profile build

00:09:58,530 --> 00:10:02,940
a profile you can see that we are

00:10:00,570 --> 00:10:08,280
compiling all of the sources of the

00:10:02,940 --> 00:10:11,810
program and you can run it now this is a

00:10:08,280 --> 00:10:15,180
quick security sequentially in my laptop

00:10:11,810 --> 00:10:20,300
something above two seconds now we want

00:10:15,180 --> 00:10:20,300
to go to parallel we can again

00:10:21,000 --> 00:10:26,250
clean the execution profile build this

00:10:23,640 --> 00:10:29,040
reveal the code in parallel activating

00:10:26,250 --> 00:10:33,350
openmp ability to support or the support

00:10:29,040 --> 00:10:33,350
that you need and now we run it again

00:10:33,650 --> 00:10:40,500
and you can see that within the top ten

00:10:36,870 --> 00:10:42,720
any speed up the reason is that with the

00:10:40,500 --> 00:10:44,460
goo eyes you have did your sequential

00:10:42,720 --> 00:10:47,070
code the only cause you have to maintain

00:10:44,460 --> 00:10:49,200
that you have to write but and you have

00:10:47,070 --> 00:10:51,090
the parallel code the question is what

00:10:49,200 --> 00:10:52,440
version of the code this equation of the

00:10:51,090 --> 00:10:55,410
parallel was used for the peril

00:10:52,440 --> 00:10:58,910
execution how do you sir can you choose

00:10:55,410 --> 00:11:01,980
which version do one then tool to use so

00:10:58,910 --> 00:11:07,160
you can you have to focus on this button

00:11:01,980 --> 00:11:10,380
here if I click here you can see that

00:11:07,160 --> 00:11:12,690
the UI is telling you okay instead of

00:11:10,380 --> 00:11:14,640
compiling and generating the binary with

00:11:12,690 --> 00:11:16,590
the sequential code I will use this

00:11:14,640 --> 00:11:19,950
parallel version that you are telling me

00:11:16,590 --> 00:11:24,150
to use now when you reckon pal I will

00:11:19,950 --> 00:11:28,050
use some shortcuts clean compile you can

00:11:24,150 --> 00:11:29,550
see that we are compiling the version

00:11:28,050 --> 00:11:36,620
the parallel version that we have just

00:11:29,550 --> 00:11:41,310
left okay and now you can run 4x faster

00:11:36,620 --> 00:11:43,860
right so this is the first the most

00:11:41,310 --> 00:11:45,480
basic usage of the tool let's see a more

00:11:43,860 --> 00:11:49,380
complex example for instance this

00:11:45,480 --> 00:11:50,970
mandible set I activate this project so

00:11:49,380 --> 00:11:52,200
that the bone activate the project what

00:11:50,970 --> 00:11:54,330
this means is that this equation

00:11:52,200 --> 00:11:57,720
profiles will use the source code of

00:11:54,330 --> 00:12:01,920
this project so now I go again to

00:11:57,720 --> 00:12:05,120
sequential profile clean compile now it

00:12:01,920 --> 00:12:09,140
is compiling the Mandelbrot code and

00:12:05,120 --> 00:12:09,140
executed sequentially

00:12:09,629 --> 00:12:14,889
in the meanwhile I can open the mandible

00:12:12,819 --> 00:12:20,679
code you can see that is much more

00:12:14,889 --> 00:12:23,529
complex code the magic if imagine

00:12:20,679 --> 00:12:25,119
whether to you can figure out if this

00:12:23,529 --> 00:12:28,059
code can be secreted in parallel or not

00:12:25,119 --> 00:12:30,519
we do it for you and we build the

00:12:28,059 --> 00:12:33,309
parallel implementation for you here you

00:12:30,519 --> 00:12:34,990
can see the parallel pragma with

00:12:33,309 --> 00:12:37,809
appropriate the scoping sharing and

00:12:34,990 --> 00:12:40,629
private variables as well as a schedule

00:12:37,809 --> 00:12:43,689
that we can derive ok and again you can

00:12:40,629 --> 00:12:46,869
go you can select this version so that

00:12:43,689 --> 00:12:48,970
this is the one that is used for the

00:12:46,869 --> 00:12:56,369
parallel execution you go to a parallel

00:12:48,970 --> 00:13:01,089
profile cling compile and run and it is

00:12:56,369 --> 00:13:04,029
10 seconds down to two seconds ok and

00:13:01,089 --> 00:13:06,730
now there is an important feature that

00:13:04,029 --> 00:13:09,069
we have here that's these buttons when

00:13:06,730 --> 00:13:11,230
you are when you are learning if I'm a

00:13:09,069 --> 00:13:13,660
lecture I want to post to propose you an

00:13:11,230 --> 00:13:15,879
exercise and I typically described you

00:13:13,660 --> 00:13:18,519
apparel implementation but now I want

00:13:15,879 --> 00:13:20,679
you to fine-tune black mass and closest

00:13:18,519 --> 00:13:23,740
so that you can increase the speed up of

00:13:20,679 --> 00:13:25,869
your parallel implementation so this is

00:13:23,740 --> 00:13:28,869
a complete editor you can modify the

00:13:25,869 --> 00:13:29,799
code here but you cannot modify the

00:13:28,869 --> 00:13:32,499
parallel version that we have

00:13:29,799 --> 00:13:34,420
automatically generated so for you to

00:13:32,499 --> 00:13:37,259
fine-tune it what you can do is create a

00:13:34,420 --> 00:13:42,220
copy of this parallel implementation

00:13:37,259 --> 00:13:45,689
let's call it version 1 and now you can

00:13:42,220 --> 00:13:45,689
edit this let's change the schedule

00:13:47,740 --> 00:13:53,450
for instance to dynamic we save we

00:13:51,080 --> 00:13:57,020
select this version for parallel

00:13:53,450 --> 00:14:02,300
execution and now we'll go again down to

00:13:57,020 --> 00:14:05,150
the profile will compile and run and

00:14:02,300 --> 00:14:07,280
from two seconds goes down to 1.5

00:14:05,150 --> 00:14:09,320
seconds because you can play and you can

00:14:07,280 --> 00:14:11,270
handle different versions for that

00:14:09,320 --> 00:14:13,520
enables you to fine-tune the apparel

00:14:11,270 --> 00:14:15,800
implementation that the technology has

00:14:13,520 --> 00:14:18,020
provided you ok this is very interesting

00:14:15,800 --> 00:14:20,510
for learning because you can try

00:14:18,020 --> 00:14:22,190
different different pair employment

00:14:20,510 --> 00:14:24,740
ation event unit to the needs of your

00:14:22,190 --> 00:14:27,530
code and you can open your uncle's here

00:14:24,740 --> 00:14:29,990
and you can be see what the tool

00:14:27,530 --> 00:14:33,830
generates and fine tune it to your needs

00:14:29,990 --> 00:14:37,070
I am finally let's activate this product

00:14:33,830 --> 00:14:40,010
this project because it is interesting

00:14:37,070 --> 00:14:42,530
because here it is a sparse matrix

00:14:40,010 --> 00:14:44,480
vector product that typically all of the

00:14:42,530 --> 00:14:48,380
tools failed to paralyze because you

00:14:44,480 --> 00:14:50,090
have this in erase here rope it here and

00:14:48,380 --> 00:14:52,460
call in that are unknown whose values

00:14:50,090 --> 00:14:54,650
are unknown and compile time but the

00:14:52,460 --> 00:14:56,950
fact that you don't know the values it

00:14:54,650 --> 00:14:59,240
should not prevent you for paralyzed ago

00:14:56,950 --> 00:15:01,250
what must have impact is in the

00:14:59,240 --> 00:15:03,200
performance that you can get depending

00:15:01,250 --> 00:15:06,520
on the values of the arrays but you can

00:15:03,200 --> 00:15:09,140
esteem paralyze it by prop protecting

00:15:06,520 --> 00:15:11,540
the appropriate instructions with

00:15:09,140 --> 00:15:13,780
appropriate atomic operations so again

00:15:11,540 --> 00:15:16,700
we can do this for you and we can even

00:15:13,780 --> 00:15:19,130
paralyzed both loops and minimize the

00:15:16,700 --> 00:15:21,470
overhead across loops by using a unique

00:15:19,130 --> 00:15:23,270
parallel region for the football for

00:15:21,470 --> 00:15:24,560
volt to lose so this kind of

00:15:23,270 --> 00:15:26,810
optimizations to minimize

00:15:24,560 --> 00:15:28,910
synchronization is also in the

00:15:26,810 --> 00:15:31,730
technology and other things now we have

00:15:28,910 --> 00:15:33,470
the most basic politician strategies

00:15:31,730 --> 00:15:35,660
implemented but in the following months

00:15:33,470 --> 00:15:38,090
we will be incorporating and supporting

00:15:35,660 --> 00:15:39,680
new parallel implementations to provide

00:15:38,090 --> 00:15:43,490
you a variety of implementation that you

00:15:39,680 --> 00:15:45,380
can just try and test and see which is

00:15:43,490 --> 00:15:51,439
the best for for your needs of for Yoko

00:15:45,380 --> 00:15:58,939
ok any questions so far

00:15:51,439 --> 00:15:58,939
okay so this is the most basic usage and

00:16:00,889 --> 00:16:07,759
just to summarize what we have is an

00:16:05,310 --> 00:16:10,680
interactive tool for its PC training

00:16:07,759 --> 00:16:13,620
driving users that are saying that they

00:16:10,680 --> 00:16:15,509
can use in use it even for developing if

00:16:13,620 --> 00:16:17,610
you are not developing large cause of

00:16:15,509 --> 00:16:19,680
millions of sorts lines of code but the

00:16:17,610 --> 00:16:21,899
small code that you are prototyping you

00:16:19,680 --> 00:16:23,579
can even put into the tool I will help

00:16:21,899 --> 00:16:25,829
you to paralyze it even if you're not

00:16:23,579 --> 00:16:27,990
training or you're not doing self

00:16:25,829 --> 00:16:30,360
learning of opening Pierre whatever

00:16:27,990 --> 00:16:33,029
standard you can even use it for a small

00:16:30,360 --> 00:16:36,120
developing of politics / a parallel

00:16:33,029 --> 00:16:37,920
prototypes so we have a complete

00:16:36,120 --> 00:16:39,149
interactive real-time editor it's the

00:16:37,920 --> 00:16:41,970
only technology that can do this

00:16:39,149 --> 00:16:43,769
interactively we assist you in the

00:16:41,970 --> 00:16:46,019
palace asian with openmp and of course

00:16:43,769 --> 00:16:48,660
also with other standards like open sec

00:16:46,019 --> 00:16:50,399
we are supporting see and we plan to

00:16:48,660 --> 00:16:53,399
support fortran we are working and

00:16:50,399 --> 00:16:55,290
collaborating now with PG ir nvidia that

00:16:53,399 --> 00:16:56,850
they are support that creating support

00:16:55,290 --> 00:16:58,740
for fortran for Darrell LLB I

00:16:56,850 --> 00:17:01,319
infrastructure we are working very

00:16:58,740 --> 00:17:05,270
closely with them to try to have support

00:17:01,319 --> 00:17:11,339
and support during next year be sure

00:17:05,270 --> 00:17:14,010
sorry is one of our goals also as long

00:17:11,339 --> 00:17:16,890
as at this moment as long as you have a

00:17:14,010 --> 00:17:19,530
C++ code and the most intensive parties

00:17:16,890 --> 00:17:21,510
see like with the syntax you can tune it

00:17:19,530 --> 00:17:25,110
at you can compare it and use it but we

00:17:21,510 --> 00:17:27,720
also respect to improve the technology

00:17:25,110 --> 00:17:30,240
so as you can handle even a classes of

00:17:27,720 --> 00:17:32,460
the stl vector sum handle them as

00:17:30,240 --> 00:17:36,900
regular arrays and provide you a support

00:17:32,460 --> 00:17:39,480
for that so in addition you will we will

00:17:36,900 --> 00:17:41,940
also incorporate detail reports of what

00:17:39,480 --> 00:17:43,530
peril ISM has been instructed and white

00:17:41,940 --> 00:17:46,380
has been a started so that you can learn

00:17:43,530 --> 00:17:48,710
more examples and also when the tool

00:17:46,380 --> 00:17:51,240
fails to paralyze will provide you

00:17:48,710 --> 00:17:53,549
meaningful messages to tell you okay we

00:17:51,240 --> 00:17:56,360
have failed because of the reason not

00:17:53,549 --> 00:17:58,710
just because there is an T output or

00:17:56,360 --> 00:18:00,659
true dependencies that you cannot really

00:17:58,710 --> 00:18:02,280
figure out what is the relationship of

00:18:00,659 --> 00:18:03,130
those type of that type of dependencies

00:18:02,280 --> 00:18:04,930
with the

00:18:03,130 --> 00:18:06,520
that you're writing okay so it will

00:18:04,930 --> 00:18:08,740
translate this into meaningful pole

00:18:06,520 --> 00:18:10,090
beautiful messages from you and of

00:18:08,740 --> 00:18:12,970
course we will support multiple

00:18:10,090 --> 00:18:15,370
compilers and finally we like to finish

00:18:12,970 --> 00:18:18,610
this presentation with explaining what

00:18:15,370 --> 00:18:22,170
is this take away your work take away

00:18:18,610 --> 00:18:22,170
your work what we mean by this is that

00:18:24,870 --> 00:18:29,820
when you finish your work and your

00:18:27,400 --> 00:18:29,820
training

00:18:38,380 --> 00:18:43,750
when you create a project in Paragor

00:18:40,390 --> 00:18:46,270
trainer you select a directory and it

00:18:43,750 --> 00:18:48,520
creates all of this directory structure

00:18:46,270 --> 00:18:51,580
for you what you have separated the

00:18:48,520 --> 00:18:54,190
sources the binaries for pre compilation

00:18:51,580 --> 00:18:56,470
the executables and you can even add in

00:18:54,190 --> 00:18:59,950
resources different data set that you

00:18:56,470 --> 00:19:02,940
can use to run the experiment so this is

00:18:59,950 --> 00:19:05,350
in a single direct in a single directory

00:19:02,940 --> 00:19:07,600
this make files are automatically

00:19:05,350 --> 00:19:09,460
generated by the tool you just drag and

00:19:07,600 --> 00:19:12,220
drop the files and it creates a make

00:19:09,460 --> 00:19:14,830
file for you so you can compress this

00:19:12,220 --> 00:19:18,190
take it to your home to your office and

00:19:14,830 --> 00:19:19,750
compress it and run it run it as if you

00:19:18,190 --> 00:19:26,400
were within the tool how do you can do

00:19:19,750 --> 00:19:26,400
this you can invoke make

00:19:29,890 --> 00:19:35,320
like this and it is making exactly the

00:19:33,610 --> 00:19:37,300
same that you can see in the control of

00:19:35,320 --> 00:19:39,850
the guy this is what we mean by take

00:19:37,300 --> 00:19:42,370
away and we have found in our

00:19:39,850 --> 00:19:44,320
discussions with users from ovid really

00:19:42,370 --> 00:19:45,940
useful because you may go go back home

00:19:44,320 --> 00:19:48,070
and you don't have the tool available

00:19:45,940 --> 00:19:49,540
but you can still do your work as long

00:19:48,070 --> 00:19:52,840
as you have appropriate compilers of

00:19:49,540 --> 00:20:00,150
course in your in your laptop okay or

00:19:52,840 --> 00:20:03,430
injure a vaca station so finally as

00:20:00,150 --> 00:20:05,560
conclusions I want to begin with this

00:20:03,430 --> 00:20:07,540
because we are really proud of it we

00:20:05,560 --> 00:20:10,060
have been selected as a startup company

00:20:07,540 --> 00:20:12,580
based in Spain we have been selected for

00:20:10,060 --> 00:20:14,950
this amazing technology showcase we are

00:20:12,580 --> 00:20:20,020
having selected jointly with companies

00:20:14,950 --> 00:20:22,090
from a IBM nvidia intel MIT and we are

00:20:20,020 --> 00:20:23,620
there with them so outside this piece of

00:20:22,090 --> 00:20:26,050
all it is a the best industry

00:20:23,620 --> 00:20:27,880
recognition that the startup and half so

00:20:26,050 --> 00:20:29,560
we are really proud of it if you want to

00:20:27,880 --> 00:20:31,420
play with the tool and see them a please

00:20:29,560 --> 00:20:33,400
visit us in our booth there is one

00:20:31,420 --> 00:20:34,960
person of our team there of you can

00:20:33,400 --> 00:20:36,850
learn from him and you can he will ask

00:20:34,960 --> 00:20:41,860
you answer all the questions you might

00:20:36,850 --> 00:20:43,810
have also we need your feedback we need

00:20:41,860 --> 00:20:45,730
feedback from real users there are so

00:20:43,810 --> 00:20:48,550
many things that we have to do in the UI

00:20:45,730 --> 00:20:50,410
in the technology different policies and

00:20:48,550 --> 00:20:52,390
strategies to support the question for

00:20:50,410 --> 00:20:54,880
us are which are the most important from

00:20:52,390 --> 00:20:56,880
users for that we need your feedback so

00:20:54,880 --> 00:21:00,400
we have created an early access program

00:20:56,880 --> 00:21:02,470
where we are inviting all of the people

00:21:00,400 --> 00:21:05,230
in the National Labs people in academia

00:21:02,470 --> 00:21:07,600
in of course we are inviting you as

00:21:05,230 --> 00:21:09,190
attendees to this talk just contact me

00:21:07,600 --> 00:21:10,870
and we will come provide York City with

00:21:09,190 --> 00:21:12,730
the following month to a server would

00:21:10,870 --> 00:21:14,260
you be able to execute the tool and you

00:21:12,730 --> 00:21:16,630
will be able to play with it so please

00:21:14,260 --> 00:21:18,280
do not hesitate to contact me and try it

00:21:16,630 --> 00:21:20,830
and give us feedback or what are the

00:21:18,280 --> 00:21:23,320
priorities we can be a prioritized the

00:21:20,830 --> 00:21:27,400
features to implement and finally of

00:21:23,320 --> 00:21:29,170
course I still want to thank all which

00:21:27,400 --> 00:21:31,720
also i want to thank and beer for giving

00:21:29,170 --> 00:21:35,680
us access to their resources expertise

00:21:31,720 --> 00:21:39,280
and machines to test all of this all of

00:21:35,680 --> 00:21:42,130
this all our work i will keep on working

00:21:39,280 --> 00:21:43,630
with them to create a next generation

00:21:42,130 --> 00:21:46,960
tool not intended for training

00:21:43,630 --> 00:21:48,220
but for hpc developers do don't if if

00:21:46,960 --> 00:21:49,870
you are an expert you don't want back

00:21:48,220 --> 00:21:51,340
black boxes you don't want the

00:21:49,870 --> 00:21:53,590
technology to do all the job for you

00:21:51,340 --> 00:21:55,450
without understanding what's going on

00:21:53,590 --> 00:21:57,250
behind the scenes so the next two will

00:21:55,450 --> 00:21:59,290
provide you insights of to all the

00:21:57,250 --> 00:22:00,640
information that we collect so that you

00:21:59,290 --> 00:22:02,410
can provide additional hint you can

00:22:00,640 --> 00:22:04,690
override the decisions that the

00:22:02,410 --> 00:22:07,090
technology has taken okay we will call

00:22:04,690 --> 00:22:09,160
this tool that by water system and we

00:22:07,090 --> 00:22:11,230
expect to present it in supercomputing

00:22:09,160 --> 00:22:13,210
this year that's our roadmap at this

00:22:11,230 --> 00:22:16,380
moment so we hope to be here again

00:22:13,210 --> 00:22:16,380

YouTube URL: https://www.youtube.com/watch?v=3Xa493IPxcY


