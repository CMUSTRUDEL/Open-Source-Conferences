Title: Tim Mattson (Intel) at OpenMPCon 2015
Publication date: 2015-10-11
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	Matthijs van Waveren interviews Tim Mattson of Intel about new architectures and OpenMP. Recorded September 28, 2015 at SuperC, RWTH Aachen, Germany
Captions: 
	00:00:03,410 --> 00:00:09,990
okay well Tim thank you for joining us

00:00:07,560 --> 00:00:12,540
for this interview mm-hmm by Patrick

00:00:09,990 --> 00:00:15,599
they met in his principal engineer Intel

00:00:12,540 --> 00:00:18,810
Corporation and I was just given the day

00:00:15,599 --> 00:00:24,930
long tutorial openmp in the openmp calm

00:00:18,810 --> 00:00:29,390
mm-hmm and let me start so during the

00:00:24,930 --> 00:00:31,800
tutorial you mentioned the new memory

00:00:29,390 --> 00:00:35,219
architecture is being developed by Intel

00:00:31,800 --> 00:00:39,840
and how do you see openmp handling the

00:00:35,219 --> 00:00:41,850
new features I don't I don't know but I

00:00:39,840 --> 00:00:44,360
assure you were working hard on it yeah

00:00:41,850 --> 00:00:48,840
i mean this this is an extremely

00:00:44,360 --> 00:00:53,789
interesting time in the the world of

00:00:48,840 --> 00:00:57,329
hard work when you look at the state of

00:00:53,789 --> 00:01:00,120
DRAM and how its packaged with cpus so

00:00:57,329 --> 00:01:03,199
you know intel has the the next release

00:01:00,120 --> 00:01:05,790
if it's xeon phi processor family

00:01:03,199 --> 00:01:07,080
codename knights landing and we've

00:01:05,790 --> 00:01:09,630
already said there's going to be some

00:01:07,080 --> 00:01:12,840
memory just right there in the package

00:01:09,630 --> 00:01:15,180
some d rams we call it MCD re on which i

00:01:12,840 --> 00:01:16,530
think stands for multi-channel dram so

00:01:15,180 --> 00:01:19,229
you know you've got this deer am right

00:01:16,530 --> 00:01:21,750
on the package which is very very high

00:01:19,229 --> 00:01:23,400
bandwidth as another level of memory

00:01:21,750 --> 00:01:26,009
hierarchy and you can configure it as a

00:01:23,400 --> 00:01:28,439
cash you can configure it as a extension

00:01:26,009 --> 00:01:30,150
of the other drm you can configure it as

00:01:28,439 --> 00:01:31,920
a separate scratchpad there's different

00:01:30,150 --> 00:01:33,810
ways to configure it so that just

00:01:31,920 --> 00:01:36,990
greatly absolutely complexity of the

00:01:33,810 --> 00:01:40,799
memory hierarchy then on top of that we

00:01:36,990 --> 00:01:43,850
have non-volatile memory so non-volatile

00:01:40,799 --> 00:01:47,040
memory in a server platform is a key

00:01:43,850 --> 00:01:48,840
it's potentially a game changer I'm not

00:01:47,040 --> 00:01:51,570
sure how it's going to be used in the

00:01:48,840 --> 00:01:54,000
HPC space but in the big data space

00:01:51,570 --> 00:01:55,799
where I spend a lot of my time it's

00:01:54,000 --> 00:01:58,680
going to have huge impact as we re

00:01:55,799 --> 00:02:00,240
implement databases taking in fact that

00:01:58,680 --> 00:02:02,460
you have this non-volatile memory if a

00:02:00,240 --> 00:02:05,820
node goes down you no longer lose all

00:02:02,460 --> 00:02:07,560
the memory so this is yet another layer

00:02:05,820 --> 00:02:10,500
of the memory hierarchy that will be

00:02:07,560 --> 00:02:12,600
existing in the off-the-shelf server

00:02:10,500 --> 00:02:15,420
boards that we build HPC system

00:02:12,600 --> 00:02:19,020
Trump so how is open em peeking a deal

00:02:15,420 --> 00:02:22,740
with it I don't know we're working on it

00:02:19,020 --> 00:02:23,850
very hard but I don't know how it's

00:02:22,740 --> 00:02:26,820
going to deal with it but it's going to

00:02:23,850 --> 00:02:29,370
have to and you know I look at some of

00:02:26,820 --> 00:02:32,790
the latest features with affinity and

00:02:29,370 --> 00:02:34,080
places and nested parallelism you know I

00:02:32,790 --> 00:02:37,290
think these are going to pay of play a

00:02:34,080 --> 00:02:38,640
very big deal a very big role you know

00:02:37,290 --> 00:02:41,040
we're going to have to its kind of

00:02:38,640 --> 00:02:42,270
ignored before that that you have to

00:02:41,040 --> 00:02:43,920
deal with the fact that you have a

00:02:42,270 --> 00:02:45,600
hierarchy of threads with different

00:02:43,920 --> 00:02:47,160
layers and the threads have a different

00:02:45,600 --> 00:02:48,360
relationship to levels in the memory

00:02:47,160 --> 00:02:50,700
subsystem I think that's gonna become

00:02:48,360 --> 00:02:54,240
even more important you also mentioned

00:02:50,700 --> 00:02:57,990
so that your you've always a big data

00:02:54,240 --> 00:03:00,030
space yes so do you see openmp making

00:02:57,990 --> 00:03:05,340
inroads in that application fields

00:03:00,030 --> 00:03:06,930
absolutely not it's you know it's a

00:03:05,340 --> 00:03:11,250
different look there's no reason it

00:03:06,930 --> 00:03:12,870
couldn't and and I talk to people about

00:03:11,250 --> 00:03:16,530
this all the time you know there's just

00:03:12,870 --> 00:03:19,350
different communities seem to have their

00:03:16,530 --> 00:03:21,030
tastes for different programming models

00:03:19,350 --> 00:03:23,160
and different approaches you know the

00:03:21,030 --> 00:03:26,100
big data worlds in love with Java we

00:03:23,160 --> 00:03:28,470
don't even have a binding of OpenMP to

00:03:26,100 --> 00:03:32,220
Java I wish we did I've been saying for

00:03:28,470 --> 00:03:34,740
years we should that but we don't sell

00:03:32,220 --> 00:03:37,050
would be one way to get into that field

00:03:34,740 --> 00:03:40,350
then it would be maybe maybe you know

00:03:37,050 --> 00:03:42,000
the other thing is the different

00:03:40,350 --> 00:03:43,470
different styles of parallels and they

00:03:42,000 --> 00:03:46,830
tend to work at much higher level of

00:03:43,470 --> 00:03:50,580
abstractions and so I don't know if

00:03:46,830 --> 00:03:53,220
OpenMP is really a good fit for that

00:03:50,580 --> 00:03:55,170
community I mean technically looking at

00:03:53,220 --> 00:03:57,540
what OpenMP does look it's a general

00:03:55,170 --> 00:03:59,520
multi-threaded programming model and

00:03:57,540 --> 00:04:01,350
with it the target and device constructs

00:03:59,520 --> 00:04:03,930
it handles accelerators there's

00:04:01,350 --> 00:04:05,790
absolutely no reason it couldn't play a

00:04:03,930 --> 00:04:08,370
role in that space but you know there is

00:04:05,790 --> 00:04:09,690
there is a idea fashion and what people

00:04:08,370 --> 00:04:11,130
are fast with you know people are used

00:04:09,690 --> 00:04:13,530
to what sort of things they like in

00:04:11,130 --> 00:04:16,340
programming and OpenMP just really

00:04:13,530 --> 00:04:18,980
hasn't made big inroads outside hpc

00:04:16,340 --> 00:04:20,510
and whether the applications main

00:04:18,980 --> 00:04:23,210
applications feel we're opening be is

00:04:20,510 --> 00:04:25,310
most relevant for your knowledge and

00:04:23,210 --> 00:04:28,810
impression in your experience well I

00:04:25,310 --> 00:04:31,610
mean I'm a scientific programmer so in

00:04:28,810 --> 00:04:34,820
the world of high performance computing

00:04:31,610 --> 00:04:37,580
and supercomputing NPI plus openmp is

00:04:34,820 --> 00:04:40,940
the standard bottle so you know I

00:04:37,580 --> 00:04:44,900
personally have done a lot of work in

00:04:40,940 --> 00:04:47,030
molecular biology and open and pees all

00:04:44,900 --> 00:04:50,290
over that space you know molecular

00:04:47,030 --> 00:04:52,010
dynamics quantum chemistry codes

00:04:50,290 --> 00:04:53,770
basically anywhere you see a

00:04:52,010 --> 00:04:57,229
differential equation you want to solve

00:04:53,770 --> 00:05:00,680
OpenMP is great so you know openmp has

00:04:57,229 --> 00:05:04,190
had excellent penetration in the HPC

00:05:00,680 --> 00:05:08,450
space and what I am very excited about

00:05:04,190 --> 00:05:13,669
is the ability to program accelerators

00:05:08,450 --> 00:05:15,680
and GPUs with with openmp my obsession

00:05:13,669 --> 00:05:17,650
which will be clear every time you hear

00:05:15,680 --> 00:05:21,770
me give a talk this week at openmp con

00:05:17,650 --> 00:05:25,010
my obsession is I want a single software

00:05:21,770 --> 00:05:28,910
base that can move between the CPU the

00:05:25,010 --> 00:05:31,180
GPU and now FPGAs I want one softer base

00:05:28,910 --> 00:05:34,010
to cover all of those and today and

00:05:31,180 --> 00:05:37,280
systems and potentially embedded systems

00:05:34,010 --> 00:05:42,139
sure today there's only one way to do

00:05:37,280 --> 00:05:43,970
that it's called opencl and opencl works

00:05:42,139 --> 00:05:46,460
for that but for whatever reason

00:05:43,970 --> 00:05:48,590
remember what I said about fashions and

00:05:46,460 --> 00:05:50,180
you know different programming model

00:05:48,590 --> 00:05:52,520
communities latch onto different things

00:05:50,180 --> 00:05:54,020
the eighth pc community has not

00:05:52,520 --> 00:05:56,270
particularly been thrilled about

00:05:54,020 --> 00:05:58,400
adopting opencl i think that's a mistake

00:05:56,270 --> 00:06:00,440
but it doesn't matter what I think right

00:05:58,400 --> 00:06:02,780
you know it's what does the programming

00:06:00,440 --> 00:06:04,550
community adopt all right programming

00:06:02,780 --> 00:06:07,220
communities looked at opencl and said no

00:06:04,550 --> 00:06:08,990
thank you but there's a lot of interest

00:06:07,220 --> 00:06:13,970
around directive based approaches in the

00:06:08,990 --> 00:06:18,440
HPC community so I think with open mp40

00:06:13,970 --> 00:06:21,889
and for dot one and the targeted and and

00:06:18,440 --> 00:06:24,590
device directives we have a shot at

00:06:21,889 --> 00:06:27,670
creating that software foundation that

00:06:24,590 --> 00:06:30,250
will work across GPU cpu embedded

00:06:27,670 --> 00:06:32,620
and fpga we're not there yet though

00:06:30,250 --> 00:06:35,080
because it still is today open seals

00:06:32,620 --> 00:06:37,870
only we can do that but I'm very very

00:06:35,080 --> 00:06:40,300
hopeful the the ball is in open MP

00:06:37,870 --> 00:06:42,220
escort you know if the openmp community

00:06:40,300 --> 00:06:44,410
meaning the vendors and the

00:06:42,220 --> 00:06:47,170
Architectural Review Board get their act

00:06:44,410 --> 00:06:51,850
together and get a standard out there

00:06:47,170 --> 00:06:54,880
and deployed we have a chance of taking

00:06:51,850 --> 00:06:57,700
over that platform for openmp so I'm

00:06:54,880 --> 00:07:01,120
very very excited and I'm just chomping

00:06:57,700 --> 00:07:04,060
at the bit to be able to take a GPU and

00:07:01,120 --> 00:07:05,860
program it from OpenMP well let's look

00:07:04,060 --> 00:07:08,380
forward to that then and thank you very

00:07:05,860 --> 00:07:10,470
much for your time oh sure sure thank

00:07:08,380 --> 00:07:10,470

YouTube URL: https://www.youtube.com/watch?v=DMGbCA0awWo


