Title: Max Odendahl (Silexica) at OpenMPCon 2015
Publication date: 2015-10-11
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	Max Odendahl, CEO of Silexica, talks to Matthijs van Waveren about their multicore compiler tools that support OpenMP. Recorded at OpenMPCon 2015 at RWTH Aachen University, Aachen, Germany September 30, 2015.

For information about Silexica multicore programming tools, go to http://silexica.com
Captions: 
	00:00:04,500 --> 00:00:10,680
okay max pleased to meet you thanks for

00:00:07,390 --> 00:00:14,050
joining us at the openmp calm thankfully

00:00:10,680 --> 00:00:16,599
so we're very glad that you accept it to

00:00:14,050 --> 00:00:20,140
sponsor the conference Max is CEO of

00:00:16,599 --> 00:00:22,570
celexa car spin-off of the University of

00:00:20,140 --> 00:00:25,660
our compare who has developed a very

00:00:22,570 --> 00:00:26,980
interesting paralyzation tool perhaps

00:00:25,660 --> 00:00:30,310
you can tell us a bit more about that

00:00:26,980 --> 00:00:32,470
later so we have a complete product line

00:00:30,310 --> 00:00:35,170
to make embedded multi core programming

00:00:32,470 --> 00:00:39,370
easier so our main goal is bring back

00:00:35,170 --> 00:00:41,920
productivity for parallel programming so

00:00:39,370 --> 00:00:44,590
a lot of things have to be done manually

00:00:41,920 --> 00:00:46,510
currently so you have to analyze your

00:00:44,590 --> 00:00:48,520
sequential application to understand

00:00:46,510 --> 00:00:50,320
where is the parallelism we need to

00:00:48,520 --> 00:00:53,800
distribute this parallelism to a given

00:00:50,320 --> 00:00:55,750
multi-core system you need to write a

00:00:53,800 --> 00:00:58,390
lot of different codes manually and

00:00:55,750 --> 00:01:00,910
after you analyze your application so

00:00:58,390 --> 00:01:02,440
many different manual eight steps and

00:01:00,910 --> 00:01:04,479
you need to know a lot of software

00:01:02,440 --> 00:01:06,179
knowledge a lot of hardware knowledge

00:01:04,479 --> 00:01:08,439
and so everything is really difficult

00:01:06,179 --> 00:01:10,570
and what we're trying to do with our

00:01:08,439 --> 00:01:13,929
product line is bringing in automation

00:01:10,570 --> 00:01:15,310
to do this automatically for you so we

00:01:13,929 --> 00:01:17,380
have one product which can take

00:01:15,310 --> 00:01:19,719
sequential C code and paralyze it

00:01:17,380 --> 00:01:21,520
automatically for you we have one

00:01:19,719 --> 00:01:23,380
product which takes a parallel

00:01:21,520 --> 00:01:25,450
description and will distribute it to a

00:01:23,380 --> 00:01:27,579
giving a given multi-core system

00:01:25,450 --> 00:01:30,579
automatically and we also have automatic

00:01:27,579 --> 00:01:33,700
code generation and to take away this

00:01:30,579 --> 00:01:35,829
manual called rewriting for you so

00:01:33,700 --> 00:01:38,170
that's the general overview of the our

00:01:35,829 --> 00:01:40,090
products and what we've shown here for

00:01:38,170 --> 00:01:42,100
the first time now is for first product

00:01:40,090 --> 00:01:43,840
going from sequential C code where we

00:01:42,100 --> 00:01:46,209
can find parallels amount of medically

00:01:43,840 --> 00:01:48,719
what you just added is that we can

00:01:46,209 --> 00:01:52,780
automatically insert OpenMP proudness

00:01:48,719 --> 00:01:54,549
fully automatically no manual user

00:01:52,780 --> 00:01:56,079
interaction you don't have to change

00:01:54,549 --> 00:01:59,079
your code you don't have to do any

00:01:56,079 --> 00:02:01,749
single manual step all you need is give

00:01:59,079 --> 00:02:04,119
a sequential C code or you know take

00:02:01,749 --> 00:02:05,950
your own existing sequential legacy C

00:02:04,119 --> 00:02:07,170
code press the button and you will have

00:02:05,950 --> 00:02:13,020
automatic open

00:02:07,170 --> 00:02:15,780
the acceleration mm-hmm very good and so

00:02:13,020 --> 00:02:19,739
your user also showed me the version of

00:02:15,780 --> 00:02:23,580
the code where you extend and distribute

00:02:19,739 --> 00:02:28,680
the word on devices ya know that can be

00:02:23,580 --> 00:02:30,630
armed or DSP devices yep so what what

00:02:28,680 --> 00:02:35,160
hardware do you cover is your tool and

00:02:30,630 --> 00:02:39,930
we cover all the it's a usual embedded

00:02:35,160 --> 00:02:41,730
system so any type of arm device DSPs

00:02:39,930 --> 00:02:46,380
you could even have some specific

00:02:41,730 --> 00:02:48,330
hardware accelerator and in there so we

00:02:46,380 --> 00:02:51,209
can handle all the different devices the

00:02:48,330 --> 00:02:53,010
only week resident is that it's a c2c

00:02:51,209 --> 00:02:57,060
approach so at the end we generate C

00:02:53,010 --> 00:02:59,370
code so the only thing you need is an

00:02:57,060 --> 00:03:02,010
existing c compiler for your embedded

00:02:59,370 --> 00:03:03,959
system which usually everybody has right

00:03:02,010 --> 00:03:06,360
so and then it doesn't matter for us is

00:03:03,959 --> 00:03:08,940
its arm or is it these be or is it some

00:03:06,360 --> 00:03:14,519
specific hardware accelerator and also

00:03:08,940 --> 00:03:17,430
of course the SMP also your systems

00:03:14,519 --> 00:03:20,160
parallel aboard record a lot of new

00:03:17,430 --> 00:03:26,940
systems coming up and that's also our

00:03:20,160 --> 00:03:28,739
target of course okay so yes well users

00:03:26,940 --> 00:03:30,630
might be interested in trying out here

00:03:28,739 --> 00:03:33,390
software so what are the possibilities

00:03:30,630 --> 00:03:35,070
could absolutely so they can just

00:03:33,390 --> 00:03:37,470
contact me write me an email we go to

00:03:35,070 --> 00:03:40,500
our website to get an overview we have

00:03:37,470 --> 00:03:43,049
free demo versions so people can you

00:03:40,500 --> 00:03:44,640
know just contact us and tell us what

00:03:43,049 --> 00:03:46,890
they're interested in what the challenge

00:03:44,640 --> 00:03:48,930
is and then we can sit with them and

00:03:46,890 --> 00:03:51,959
walk them through or sent them a demo

00:03:48,930 --> 00:03:54,530
version depending on their needs yeah

00:03:51,959 --> 00:03:57,540
okay so when the hope that we can help

00:03:54,530 --> 00:04:00,660
developers would be great and the higher

00:03:57,540 --> 00:04:03,859
productivity is your life well thank you

00:04:00,660 --> 00:04:03,859

YouTube URL: https://www.youtube.com/watch?v=sWHCHZJTU-8


