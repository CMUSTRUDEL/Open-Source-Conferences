Title: James Beyer (NVIDIA) at OpenMPCon 2015
Publication date: 2015-10-11
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	James Beyer of NVIDIA talks about OpenMP and OpenACC with Matthijs van Waveren. Recorded at OpenMPCon 2015, SuperC, RWTH Aachen University, Aachen Germany, September 28, 2015
Captions: 
	00:00:03,980 --> 00:00:09,259
well okay James thank you for joining us

00:00:07,170 --> 00:00:12,419
and you're the very nice presentation

00:00:09,259 --> 00:00:18,179
James is a senior runtime engineer at

00:00:12,419 --> 00:00:21,140
Nvidia and discussed the open empathy

00:00:18,179 --> 00:00:24,779
and open ACC related issues that you

00:00:21,140 --> 00:00:27,810
mentioned that there were some example

00:00:24,779 --> 00:00:30,689
where openmp and open ACC learn from

00:00:27,810 --> 00:00:32,189
each other my presence structured data

00:00:30,689 --> 00:00:38,090
conference but you go through more

00:00:32,189 --> 00:00:40,020
detail of those exams so the present

00:00:38,090 --> 00:00:42,379
learning from them that the present

00:00:40,020 --> 00:00:45,629
behavior actually was a interesting

00:00:42,379 --> 00:00:47,309
problem just because with present an

00:00:45,629 --> 00:00:48,329
open agency when we've been open agency

00:00:47,309 --> 00:00:49,680
we thought well the present table is

00:00:48,329 --> 00:00:51,239
going to be this really expensive thing

00:00:49,680 --> 00:00:52,530
you're going to go in here you go

00:00:51,239 --> 00:00:53,879
through all this work and you're going

00:00:52,530 --> 00:00:57,570
to come back now and you'll have spent

00:00:53,879 --> 00:00:59,760
all this time in there we forgot the big

00:00:57,570 --> 00:01:02,219
thing is going to do data transfers to a

00:00:59,760 --> 00:01:02,780
device it takes a long time to do a data

00:01:02,219 --> 00:01:04,670
type

00:01:02,780 --> 00:01:06,140
so after you start your first data

00:01:04,670 --> 00:01:08,720
transfer you can do all the president

00:01:06,140 --> 00:01:12,650
look at you want and they're all hidden

00:01:08,720 --> 00:01:14,090
behind that Daniel so an open MP time

00:01:12,650 --> 00:01:18,170
frame we had already started to learn

00:01:14,090 --> 00:01:19,729
some of that and then open agency

00:01:18,170 --> 00:01:21,560
realized that you know what if you don't

00:01:19,729 --> 00:01:25,280
do the president test you end up with

00:01:21,560 --> 00:01:27,590
strange user errors that the users need

00:01:25,280 --> 00:01:29,360
your help to understand what they need

00:01:27,590 --> 00:01:30,440
to be told this you know what we said

00:01:29,360 --> 00:01:32,149
don't look for president but it was

00:01:30,440 --> 00:01:33,440
there there for you didn't use the

00:01:32,149 --> 00:01:37,009
delight of the data you thought you were

00:01:33,440 --> 00:01:38,300
using so yeah it started out as a

00:01:37,009 --> 00:01:41,869
performance thing that actually turned

00:01:38,300 --> 00:01:43,610
into a a correctness issue we just said

00:01:41,869 --> 00:01:46,520
you know what the correctness problems

00:01:43,610 --> 00:01:49,369
that come from this behavior just are

00:01:46,520 --> 00:01:52,470
too big to bother with any possible game

00:01:49,369 --> 00:01:56,110
performing scenarios

00:01:52,470 --> 00:01:58,780
yeah the other side there was a default

00:01:56,110 --> 00:02:01,660
first private open that he got it wrong

00:01:58,780 --> 00:02:04,180
right head and no cases unfortunately I

00:02:01,660 --> 00:02:08,410
was the one that kind of puts the

00:02:04,180 --> 00:02:11,500
default map to from for scalars for

00:02:08,410 --> 00:02:13,540
openmp because that's really more

00:02:11,500 --> 00:02:15,040
intimately with what openmp does open

00:02:13,540 --> 00:02:19,180
and be everything is shared by the fall

00:02:15,040 --> 00:02:20,320
excel forward tasks and until for one we

00:02:19,180 --> 00:02:22,720
actually said you know what the target

00:02:20,320 --> 00:02:24,790
concept is a task construct which is a

00:02:22,720 --> 00:02:28,980
different name then all some first

00:02:24,790 --> 00:02:32,980
private behavior becomes normal and then

00:02:28,980 --> 00:02:34,630
the question is its first private on on

00:02:32,980 --> 00:02:37,000
everything they could write ideas are

00:02:34,630 --> 00:02:38,500
just unharmed scalars both scalars it's

00:02:37,000 --> 00:02:40,390
really important to be first private

00:02:38,500 --> 00:02:43,660
because without first private scalars

00:02:40,390 --> 00:02:45,459
you can't shape your machine because on

00:02:43,660 --> 00:02:46,840
a video you up there you just described

00:02:45,459 --> 00:02:49,680
the machine that you're going to run it

00:02:46,840 --> 00:02:52,959
and then you launch a kernel on that

00:02:49,680 --> 00:02:55,239
and when your if you can't describe the

00:02:52,959 --> 00:02:57,040
machine effectively you have a slow

00:02:55,239 --> 00:02:58,870
colonel even if the colonel could run

00:02:57,040 --> 00:03:00,010
extremely fast on the architecture runs

00:02:58,870 --> 00:03:02,830
slow cause it isn't giving enough

00:03:00,010 --> 00:03:06,100
resources so

00:03:02,830 --> 00:03:07,840
and then this the example of structured

00:03:06,100 --> 00:03:09,550
data Bell strikes were both there be an

00:03:07,840 --> 00:03:14,410
open ACC both got it wrong the first

00:03:09,550 --> 00:03:20,130
time yes that's when we did it we had a

00:03:14,410 --> 00:03:22,360
slip fun when crane did what we did and

00:03:20,130 --> 00:03:25,870
Intel did evading we have different

00:03:22,360 --> 00:03:28,540
target audiences creias hpc that's all

00:03:25,870 --> 00:03:30,340
windows and vidya is little more wide oh

00:03:28,540 --> 00:03:32,410
so now that I'm in nvidia at the link or

00:03:30,340 --> 00:03:37,110
broader but I pray no is there I was

00:03:32,410 --> 00:03:41,500
thinking HBC and hpc C++ isn't better 48

00:03:37,110 --> 00:03:44,230
C++ codes in general don't optimize well

00:03:41,500 --> 00:03:46,750
on all compiles some compilers do a

00:03:44,230 --> 00:03:48,330
great job with it others don't so we

00:03:46,750 --> 00:03:50,440
weren't thinking about those users

00:03:48,330 --> 00:03:52,300
unfortunately those answers do actually

00:03:50,440 --> 00:03:55,590
want to run their code on devices and

00:03:52,300 --> 00:03:58,810
they could run them very effectively

00:03:55,590 --> 00:04:00,880
intel offer but they couldn't with with

00:03:58,810 --> 00:04:02,680
OpenMP so we had to go back and look at

00:04:00,880 --> 00:04:06,000
what did we get wrong this is very

00:04:02,680 --> 00:04:08,670
obvious fixative both

00:04:06,000 --> 00:04:11,040
admit being nobody seemed very rapidly

00:04:08,670 --> 00:04:13,400
not identify the problem and fix it in

00:04:11,040 --> 00:04:16,000
essentially the same

00:04:13,400 --> 00:04:19,660
okay well thank you very much for your

00:04:16,000 --> 00:04:19,660

YouTube URL: https://www.youtube.com/watch?v=ijaWKLMPyvQ


