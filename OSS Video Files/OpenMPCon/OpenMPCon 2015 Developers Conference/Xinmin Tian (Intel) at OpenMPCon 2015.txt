Title: Xinmin Tian (Intel) at OpenMPCon 2015
Publication date: 2015-10-11
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	Xinmin Tian (Intel) discusses the SIMD extensions to the OpenMP specification with Matthijs van Waveren. Recorded at SuperC, RWTH Aachen University, Aachen Germany on September 29, 2015 as part of OpenMPCon 2015.
Captions: 
	00:00:04,790 --> 00:00:09,599
okay Jim in thank you for joining us

00:00:07,680 --> 00:00:12,030
thank you for giving a very interesting

00:00:09,599 --> 00:00:16,680
presentation at the openmp calm thank

00:00:12,030 --> 00:00:20,279
you which we hope will become growing

00:00:16,680 --> 00:00:24,119
confidence in the future so you talked

00:00:20,279 --> 00:00:27,150
about Cynthia extensions to the standard

00:00:24,119 --> 00:00:30,449
so you mentioned that open AP is a first

00:00:27,150 --> 00:00:33,450
industry standard to include explicit

00:00:30,449 --> 00:00:35,550
vector programming constructs could you

00:00:33,450 --> 00:00:40,309
tell us more why we added Cindy

00:00:35,550 --> 00:00:43,050
constructs to the OpenAPI standard the

00:00:40,309 --> 00:00:45,210
before we're adding the SMT constructed

00:00:43,050 --> 00:00:48,539
into the open beer standard different

00:00:45,210 --> 00:00:50,730
wonder has a different set of the pragma

00:00:48,539 --> 00:00:53,840
and the extensions to deal with a

00:00:50,730 --> 00:00:58,050
vectorization for examples of IV TF

00:00:53,840 --> 00:01:01,620
pragma vector and the loop chipcount the

00:00:58,050 --> 00:01:03,539
whole bunch of the construct the

00:01:01,620 --> 00:01:07,049
different Wagner has all their own set

00:01:03,539 --> 00:01:09,960
of the contract and the first time when

00:01:07,049 --> 00:01:13,920
we saw that we say all the new way we

00:01:09,960 --> 00:01:18,360
can standardize this sense of the user

00:01:13,920 --> 00:01:22,189
can have a portable the SMD programming

00:01:18,360 --> 00:01:24,630
model to use so those model can be used

00:01:22,189 --> 00:01:27,720
implemented by all the wonders compiler

00:01:24,630 --> 00:01:32,460
so user don't have to use a wonderful

00:01:27,720 --> 00:01:35,009
you know specific vector pragma or

00:01:32,460 --> 00:01:38,189
construct to deal with the vectorization

00:01:35,009 --> 00:01:40,460
that's one of the motivation we try to

00:01:38,189 --> 00:01:42,290
you know proposed and

00:01:40,460 --> 00:01:46,250
and added the signature the open B

00:01:42,290 --> 00:01:50,540
languages standard thank you and so in

00:01:46,250 --> 00:01:51,979
your experience of meeting users do you

00:01:50,540 --> 00:01:55,220
have example of users that are using

00:01:51,979 --> 00:01:58,280
those contracts and yes we have a lot of

00:01:55,220 --> 00:02:01,340
users user explicitly vectoring program

00:01:58,280 --> 00:02:03,890
model since we introduced the wine Intel

00:02:01,340 --> 00:02:07,460
first the prototype and the implement of

00:02:03,890 --> 00:02:09,800
the pragma SMD even before we propose to

00:02:07,460 --> 00:02:12,890
this to the open B language community so

00:02:09,800 --> 00:02:16,700
the user feedback is pretty positive

00:02:12,890 --> 00:02:20,540
that's why we pushed and the proposed to

00:02:16,700 --> 00:02:23,060
this expletive vector program consider

00:02:20,540 --> 00:02:26,060
to be part of the open piece tandem okay

00:02:23,060 --> 00:02:29,150
yeah the performance can users say says

00:02:26,060 --> 00:02:34,040
from explicit vectorization can be a few

00:02:29,150 --> 00:02:40,580
acts to the 16 x 4 x 8x a different

00:02:34,040 --> 00:02:43,700
really depends on the application is it

00:02:40,580 --> 00:02:45,290
used that in all types of applications

00:02:43,700 --> 00:02:47,480
what is that from scientific

00:02:45,290 --> 00:02:50,739
applications oh the application domains

00:02:47,480 --> 00:02:53,930
all kinds of like a from the financial

00:02:50,739 --> 00:02:57,130
application imaging process in medical

00:02:53,930 --> 00:03:00,579
imaging process an application again

00:02:57,130 --> 00:03:03,049
application and the HPC application the

00:03:00,579 --> 00:03:06,250
applications can leverage explicit

00:03:03,049 --> 00:03:09,799
program model is all over the different

00:03:06,250 --> 00:03:12,280
applications online okay thank you very

00:03:09,799 --> 00:03:12,280

YouTube URL: https://www.youtube.com/watch?v=NoaKK2_HygQ


