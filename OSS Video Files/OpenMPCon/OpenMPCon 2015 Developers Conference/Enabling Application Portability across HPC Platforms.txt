Title: Enabling Application Portability across HPC Platforms
Publication date: 2015-12-17
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	Full Title: Enabling Application Portability across HPC Platforms using Open Standards: User-oriented goals for OpenMP

Presented by Tim Mattson, Intel on behalf of Alice Koniges, Lawrence Berkeley National Lab.  Co-authors: Richard Gerber and Yun He, Lawrence Berkeley National Lab. Fernanda Foertter, Oak Ridge National Lab.

Abstract: Portability plus performance are key requirements for large-scale scientific simulations on the path to exascale. Users of the high-end computing facilities such as the National Energy Research Scientific Computing Center (NERSC) and the Oak Ridge Leadership Computing Facility (OLCF) are demanding portable standards to enable their codes to run on differing high performance computing (HPC) architectures with relatively little user intervention between differing versions that have been optimized for performance.

The emerging OpenMP standards are poised to offer such portability. In this presentation, we will discuss several important goals and requirements of portable standards in the context of OpenMP.

We will also encourage audience participation as we discuss and formulate the current state-of-the-art in this area and our hopes and goals for the future. We will start by describing the current and next generation architectures at NERSC and OLCF and explain how the differences require different general programming paradigms to facilitate high-performance implementations.

Then we will overview the current work by the OpenMP standard to address application portability.We will illustrate the current state-of-the-art with examples from real application codes that are currently running at scale on our differing architectures. Finally, we will address the user needs for the next generation of architectures, and enlist audience user and vendor participation in the road to portable programming.
YouTube URL: https://www.youtube.com/watch?v=_CBMRNUIzTE


