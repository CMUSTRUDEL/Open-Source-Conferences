Title: Eric Stotzer (Texas Instruments) at OpenMPCon 2015
Publication date: 2015-10-11
Playlist: OpenMPCon 2015 Developers Conference
Description: 
	Eric Stotzer (Texas Instruments) discusses using OpenMP in embedded systems with Matthijs van Waveren at OpenMPCon 2015. Recorded September 29, 2015 at SuperC, RWTH Aachen University, Aachen Germany
Captions: 
	00:00:04,700 --> 00:00:12,540
hello Eric welcome to the conference it

00:00:09,000 --> 00:00:15,420
was a pleasure to hear your keynote very

00:00:12,540 --> 00:00:18,720
interesting on OpenMP in embedded

00:00:15,420 --> 00:00:22,590
systems thank you eric is a auto pilot

00:00:18,720 --> 00:00:27,810
yvette texas instruments and you

00:00:22,590 --> 00:00:29,580
discussed several ways how to extend the

00:00:27,810 --> 00:00:33,000
usage of mobility in the embedded

00:00:29,580 --> 00:00:36,450
systems world yes could you elaborate

00:00:33,000 --> 00:00:40,829
well well I think that openmp has been

00:00:36,450 --> 00:00:43,440
targeted for high-performance computing

00:00:40,829 --> 00:00:45,480
in the more casual supercomputing and

00:00:43,440 --> 00:00:47,969
desktop environment and that there's

00:00:45,480 --> 00:00:50,340
this whole other world embedded

00:00:47,969 --> 00:00:54,090
processing that's out there and that I

00:00:50,340 --> 00:00:56,039
think there's a way for open p if we do

00:00:54,090 --> 00:00:59,219
some of these things like being able to

00:00:56,039 --> 00:01:01,859
dinner event driven model we can we can

00:00:59,219 --> 00:01:03,840
adopt open impede to work and their

00:01:01,859 --> 00:01:06,720
subsystems and then that would bring a

00:01:03,840 --> 00:01:08,189
whole new set of developers into the

00:01:06,720 --> 00:01:11,610
OpenAPI which i think would be a good

00:01:08,189 --> 00:01:15,509
thing mm-hmm so in also a whole set of

00:01:11,610 --> 00:01:20,280
new applications you would see open

00:01:15,509 --> 00:01:22,229
mping cars and so yeah scary right I

00:01:20,280 --> 00:01:24,659
could have it in a car or something like

00:01:22,229 --> 00:01:25,830
that yeah but yeah that's that's the

00:01:24,659 --> 00:01:28,470
idea I mean I'm sure at some point

00:01:25,830 --> 00:01:30,689
people were like oh I can't program

00:01:28,470 --> 00:01:32,070
these things in C code I've got to do

00:01:30,689 --> 00:01:34,650
everything in assembly language

00:01:32,070 --> 00:01:36,960
sunsets it's the same way you want to

00:01:34,650 --> 00:01:39,690
take those higher level models because

00:01:36,960 --> 00:01:42,630
you have to the complexity of the

00:01:39,690 --> 00:01:43,950
systems is just increasing and we need

00:01:42,630 --> 00:01:47,220
higher level programming models like

00:01:43,950 --> 00:01:51,300
OpenMP yeah you mentioned the multi

00:01:47,220 --> 00:01:53,550
processing system on ships and you would

00:01:51,300 --> 00:01:55,590
like openly be to be able from any

00:01:53,550 --> 00:01:58,740
device to launch code on any other

00:01:55,590 --> 00:02:01,619
device and you right so mean what you're

00:01:58,740 --> 00:02:03,000
seeing it's an integration you had you

00:02:01,619 --> 00:02:04,170
had a lot of different processors in the

00:02:03,000 --> 00:02:06,390
system and you're seeing all this

00:02:04,170 --> 00:02:08,489
collapse into one chip you're seeing

00:02:06,390 --> 00:02:11,070
chips that are specialized for certain

00:02:08,489 --> 00:02:12,989
activities but what we need is a

00:02:11,070 --> 00:02:15,239
programming model that can deal with

00:02:12,989 --> 00:02:17,459
that because today the model is very

00:02:15,239 --> 00:02:19,320
piecemeal and contained for each

00:02:17,459 --> 00:02:20,640
processor and you want to want to have

00:02:19,320 --> 00:02:21,780
something that's more holistic and

00:02:20,640 --> 00:02:25,200
that's going to hoping we can do with

00:02:21,780 --> 00:02:28,860
the with the accelerator one is adapted

00:02:25,200 --> 00:02:30,930
to be a heterogeneous model so continue

00:02:28,860 --> 00:02:35,489
extending the accelerator model I saw

00:02:30,930 --> 00:02:37,830
you at an example is armed GPUs East oh

00:02:35,489 --> 00:02:41,010
no we have type of devices many one

00:02:37,830 --> 00:02:43,890
shape yeah like 11 1 chip is just there

00:02:41,010 --> 00:02:47,180
for real real real hard real-time signal

00:02:43,890 --> 00:02:50,190
processor chip for math part Cornell

00:02:47,180 --> 00:02:52,670
graphics for the GPU and are running

00:02:50,190 --> 00:02:54,840
Linux but you know we want a holistic

00:02:52,670 --> 00:02:58,590
programming model that can comprehend

00:02:54,840 --> 00:03:00,220
all that yeah also write the interesting

00:02:58,590 --> 00:03:03,670
comments you made on the

00:03:00,220 --> 00:03:06,340
the goal of real time is not so much to

00:03:03,670 --> 00:03:10,060
be as fast as possible but just to meet

00:03:06,340 --> 00:03:11,680
the deadline the code is read the result

00:03:10,060 --> 00:03:14,740
of the court is ready when it's needed

00:03:11,680 --> 00:03:16,960
right yeah well so often and open up you

00:03:14,740 --> 00:03:18,460
talk about performance we talk about you

00:03:16,960 --> 00:03:20,110
know how performance getting things done

00:03:18,460 --> 00:03:22,450
as quickly as possible but that's not

00:03:20,110 --> 00:03:25,510
always the most important thing and it

00:03:22,450 --> 00:03:26,650
often is that systems but not when

00:03:25,510 --> 00:03:28,120
you're just dealing with the real time

00:03:26,650 --> 00:03:30,370
constraint you just want to make sure

00:03:28,120 --> 00:03:33,280
that you are your process or your task

00:03:30,370 --> 00:03:35,020
is complete before a deadline doing it

00:03:33,280 --> 00:03:37,390
faster than the deadlines really not

00:03:35,020 --> 00:03:39,580
helping you in any way if you could slow

00:03:37,390 --> 00:03:41,380
it down maybe use less power and still

00:03:39,580 --> 00:03:44,440
make your deadline that's might be

00:03:41,380 --> 00:03:50,560
better so there's always a trade-off

00:03:44,440 --> 00:03:53,200
that maybe is more more evident in

00:03:50,560 --> 00:03:55,120
embedded systems between power and what

00:03:53,200 --> 00:03:56,440
you have to the to performance and what

00:03:55,120 --> 00:03:58,510
you have to do to get that performance

00:03:56,440 --> 00:04:01,240
yeah I mean you could think of an

00:03:58,510 --> 00:04:05,830
imaging application where you have in a

00:04:01,240 --> 00:04:07,930
car your image camera takes some images

00:04:05,830 --> 00:04:10,420
brings them to the car you get process

00:04:07,930 --> 00:04:12,190
in a decision is taken listen to go to

00:04:10,420 --> 00:04:14,620
the left or the right right and then

00:04:12,190 --> 00:04:16,109
with the car has a limited amount of

00:04:14,620 --> 00:04:20,639
power so you want to

00:04:16,109 --> 00:04:23,460
try to be as not used as much as as

00:04:20,639 --> 00:04:25,889
possible so there's a trade-off between

00:04:23,460 --> 00:04:28,259
by your engine speed yeah well I mean in

00:04:25,889 --> 00:04:29,939
a car you you have more power but it

00:04:28,259 --> 00:04:32,129
would even be worse when you have things

00:04:29,939 --> 00:04:33,960
that are more remote and embedded and

00:04:32,129 --> 00:04:38,310
battery-powered and things like that or

00:04:33,960 --> 00:04:40,020
then then power becomes much more

00:04:38,310 --> 00:04:41,639
critical we're working off the battery

00:04:40,020 --> 00:04:45,689
so there you see the power in the

00:04:41,639 --> 00:04:47,520
performance trade-offs yep let's

00:04:45,689 --> 00:04:50,370
definitely okay well very very

00:04:47,520 --> 00:04:52,830
interesting topics eric and i hope you

00:04:50,370 --> 00:04:56,060
enjoyed the rest of the conference thank

00:04:52,830 --> 00:04:56,060
you very much you're welcome

00:04:59,650 --> 00:05:01,710

YouTube URL: https://www.youtube.com/watch?v=tduKnAz1HOQ


