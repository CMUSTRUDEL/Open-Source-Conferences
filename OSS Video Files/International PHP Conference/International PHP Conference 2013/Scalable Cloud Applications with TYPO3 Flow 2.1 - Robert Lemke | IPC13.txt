Title: Scalable Cloud Applications with TYPO3 Flow 2.1 - Robert Lemke | IPC13
Publication date: 2016-06-09
Playlist: International PHP Conference 2013
Description: 
	TYPO3 Flow has been designed to feel all at home in cloud environments. In version 2.1 another important feature takes shape: cloud storage and cloud publishing for all of your application's assets.
In this session you'll learn which architecture and hosting approach is needed in order to run scalable and robust Flow applications. We'll also cover related topics such as configuration management, virtual servers, persistence strategies, job queues, content delivery networks, and monitoring.
Captions: 
	00:00:06,379 --> 00:00:11,790
welcome again so for everybody who

00:00:08,940 --> 00:00:16,980
didn't see the previous session that was

00:00:11,790 --> 00:00:18,899
an overview of flow 20 with a sneak peek

00:00:16,980 --> 00:00:21,840
to all of the features and one of thing

00:00:18,899 --> 00:00:26,340
we looked at was the resource management

00:00:21,840 --> 00:00:28,980
and this session is about resource

00:00:26,340 --> 00:00:31,680
management so I'm Robert from the flow

00:00:28,980 --> 00:00:35,640
project and type of three project and

00:00:31,680 --> 00:00:39,239
nails project and I started some years

00:00:35,640 --> 00:00:42,300
ago with a flow project and well you

00:00:39,239 --> 00:00:49,850
know that story already anyway resources

00:00:42,300 --> 00:00:53,489
and flow we want to be able to star

00:00:49,850 --> 00:00:57,120
files uploaded files but all kinds of

00:00:53,489 --> 00:01:01,319
assets your application might manage in

00:00:57,120 --> 00:01:04,379
a file system for example or somewhere

00:01:01,319 --> 00:01:07,350
else at some remote location probably

00:01:04,379 --> 00:01:10,500
accessible through ssh or you want to

00:01:07,350 --> 00:01:12,420
have cloud storage support and on the

00:01:10,500 --> 00:01:17,400
other hand also you want to publish to

00:01:12,420 --> 00:01:20,520
all kinds of different targets and this

00:01:17,400 --> 00:01:23,880
is what the resource management in flow

00:01:20,520 --> 00:01:26,430
to one is about flow to one will

00:01:23,880 --> 00:01:29,550
hopefully be published end of this year

00:01:26,430 --> 00:01:31,440
so it's basically working but the

00:01:29,550 --> 00:01:34,500
question is how much time I can spend on

00:01:31,440 --> 00:01:37,320
on it while we've released me as 10 now

00:01:34,500 --> 00:01:40,740
on the other hand nails 10 depends on

00:01:37,320 --> 00:01:45,450
flow to one so that might accelerate

00:01:40,740 --> 00:01:48,990
things a bit if you have a bunch of

00:01:45,450 --> 00:01:51,150
different things to store so objects

00:01:48,990 --> 00:01:56,220
content and resources that is what we

00:01:51,150 --> 00:02:01,250
face in Neos so object the object world

00:01:56,220 --> 00:02:04,350
is your domain models so any kind of

00:02:01,250 --> 00:02:06,750
objects you put into your repositories

00:02:04,350 --> 00:02:11,730
and flow they need to be stored

00:02:06,750 --> 00:02:15,400
somewhere and for that usually we have a

00:02:11,730 --> 00:02:17,230
database with doctrine that's

00:02:15,400 --> 00:02:20,319
pretty easy to scale across multiple

00:02:17,230 --> 00:02:23,049
servers so because that that is one of

00:02:20,319 --> 00:02:25,689
the problems you're facing if you want

00:02:23,049 --> 00:02:27,790
to have a scalable application you don't

00:02:25,689 --> 00:02:31,060
want to have so many dependencies on the

00:02:27,790 --> 00:02:35,680
actual machine what you would like to

00:02:31,060 --> 00:02:38,620
achieve is a very lightweight set up

00:02:35,680 --> 00:02:42,400
where you say okay I automatically

00:02:38,620 --> 00:02:45,099
create a new virtual server and you're

00:02:42,400 --> 00:02:47,769
using something like chef or puppets to

00:02:45,099 --> 00:02:52,209
configure that server I don't know

00:02:47,769 --> 00:02:56,530
anybody of you using chef or puppet yeah

00:02:52,209 --> 00:02:59,500
puppet or chef path perth piff chef

00:02:56,530 --> 00:03:03,700
puppet yes I i started with puppet and

00:02:59,500 --> 00:03:06,480
then switch to chef because i like how

00:03:03,700 --> 00:03:09,280
chef allows you to sometimes take

00:03:06,480 --> 00:03:12,459
influence on the order things i execute

00:03:09,280 --> 00:03:15,400
it but in practice it doesn't matter so

00:03:12,459 --> 00:03:19,690
much I guess but what you really want to

00:03:15,400 --> 00:03:22,449
do is you have a fresh machine fresh

00:03:19,690 --> 00:03:26,919
Linux set up and then just have some

00:03:22,449 --> 00:03:29,230
configuration provided by share for

00:03:26,919 --> 00:03:32,609
puppet and then execute that and within

00:03:29,230 --> 00:03:34,930
a few minutes you have your web server

00:03:32,609 --> 00:03:38,079
exactly with the PHP version you need

00:03:34,930 --> 00:03:41,590
with the database you need etc and then

00:03:38,079 --> 00:03:44,310
can use some tool awesome scripts to

00:03:41,590 --> 00:03:47,409
deploy your application on that server

00:03:44,310 --> 00:03:49,419
and depending on your setup that can be

00:03:47,409 --> 00:03:53,260
quite quick so it might be that within

00:03:49,419 --> 00:03:55,659
three minutes or even faster from from

00:03:53,260 --> 00:04:00,639
nothing you have a full running machine

00:03:55,659 --> 00:04:04,629
with your application now if you need to

00:04:00,639 --> 00:04:07,150
scale then you need probably need a

00:04:04,629 --> 00:04:09,370
second machine also for failover reasons

00:04:07,150 --> 00:04:12,970
you want one a second machine or third

00:04:09,370 --> 00:04:14,829
one and the traditional hosting or the

00:04:12,970 --> 00:04:16,810
traditional applications were not really

00:04:14,829 --> 00:04:21,070
suited to that you have shared file

00:04:16,810 --> 00:04:23,620
system usually so for example in type of

00:04:21,070 --> 00:04:25,810
three when you upload something and that

00:04:23,620 --> 00:04:28,150
has changed recently you now have a file

00:04:25,810 --> 00:04:29,230
abstraction layer there but usually when

00:04:28,150 --> 00:04:32,800
you upload something

00:04:29,230 --> 00:04:35,170
it ends up in the file system and then

00:04:32,800 --> 00:04:36,970
you can use NFS to share that across

00:04:35,170 --> 00:04:40,360
some web servers but that is error prone

00:04:36,970 --> 00:04:44,380
and also bit slow sometimes it would be

00:04:40,360 --> 00:04:45,940
nicer if your application would not

00:04:44,380 --> 00:04:49,720
depend on the actual machine but

00:04:45,940 --> 00:04:52,630
everything would be stored in on some

00:04:49,720 --> 00:04:55,450
other servers because that in practice

00:04:52,630 --> 00:04:59,350
what you can do is just kill any of your

00:04:55,450 --> 00:05:01,000
web servers machines and it won't have

00:04:59,350 --> 00:05:05,230
any impact on your overall application

00:05:01,000 --> 00:05:08,980
or website because maybe you have some

00:05:05,230 --> 00:05:11,140
load balancing set up which just realize

00:05:08,980 --> 00:05:16,150
okay that machine machine has gone too

00:05:11,140 --> 00:05:18,580
bad I'll take another one and we had

00:05:16,150 --> 00:05:21,400
that goal for flow from the beginning so

00:05:18,580 --> 00:05:25,780
that's why we encapsulated a direct

00:05:21,400 --> 00:05:28,000
access to file system etc okay so coming

00:05:25,780 --> 00:05:33,880
back to this object is quite easy to

00:05:28,000 --> 00:05:38,050
handle that is in a database if you're

00:05:33,880 --> 00:05:41,800
using math girl yes clustering is not so

00:05:38,050 --> 00:05:44,830
nice usually but fortunately also their

00:05:41,800 --> 00:05:46,510
providers who specialized in that but if

00:05:44,830 --> 00:05:48,100
that is not enough you still can use

00:05:46,510 --> 00:05:52,240
something completely different you can

00:05:48,100 --> 00:05:55,510
also switch to know SQL database if that

00:05:52,240 --> 00:05:59,890
fits your application and for the

00:05:55,510 --> 00:06:02,500
content in the US so we we store our

00:05:59,890 --> 00:06:05,920
objects through doctrine as you've seen

00:06:02,500 --> 00:06:07,750
previously and for continent we have

00:06:05,920 --> 00:06:10,150
some layer in between and nails and

00:06:07,750 --> 00:06:11,920
there is the content repository which in

00:06:10,150 --> 00:06:14,980
the end is based on dr. E and so it's

00:06:11,920 --> 00:06:18,010
also stored in the database so what

00:06:14,980 --> 00:06:22,660
remains is basically how to deal with

00:06:18,010 --> 00:06:25,900
your resources and what we do in flow is

00:06:22,660 --> 00:06:31,090
this um everything you upload for

00:06:25,900 --> 00:06:37,420
example or any image any document you

00:06:31,090 --> 00:06:40,450
import is encapsulated by a resource

00:06:37,420 --> 00:06:42,700
object so actually we need to store that

00:06:40,450 --> 00:06:47,500
object in the database

00:06:42,700 --> 00:06:50,410
that means everything you upload needs

00:06:47,500 --> 00:06:54,310
to have a corresponding resource object

00:06:50,410 --> 00:06:56,110
in the database that was already true

00:06:54,310 --> 00:06:58,210
with earlier versions of flow but now

00:06:56,110 --> 00:07:00,090
it's important because that resource

00:06:58,210 --> 00:07:04,050
object also contains the information

00:07:00,090 --> 00:07:07,650
where is the actual binary data stored

00:07:04,050 --> 00:07:12,160
and because because you can actually mix

00:07:07,650 --> 00:07:15,100
different storages and say I use a file

00:07:12,160 --> 00:07:19,510
system for this purpose i use a cloud

00:07:15,100 --> 00:07:21,790
storage for some other purpose and in

00:07:19,510 --> 00:07:24,850
this session i want to show you a lot of

00:07:21,790 --> 00:07:30,360
these things with actual code and actual

00:07:24,850 --> 00:07:33,310
configuration so it's a bit of

00:07:30,360 --> 00:07:36,010
experimental session so previously i

00:07:33,310 --> 00:07:37,870
just realized that through the network

00:07:36,010 --> 00:07:39,820
connection i had some problems accessing

00:07:37,870 --> 00:07:44,650
the resources so we'll see how it works

00:07:39,820 --> 00:07:47,910
out but i can at least show you how the

00:07:44,650 --> 00:07:52,060
code looks like ends then i can simulate

00:07:47,910 --> 00:07:53,410
how it would behave you know and as

00:07:52,060 --> 00:07:58,300
always if you have any questions in

00:07:53,410 --> 00:08:02,680
between then just ask right away so i

00:07:58,300 --> 00:08:07,030
have some sample application here which

00:08:02,680 --> 00:08:14,230
is a little bookshop and it's possible

00:08:07,030 --> 00:08:17,200
to upload books there and know not to

00:08:14,230 --> 00:08:19,450
upload books it's possible to create a

00:08:17,200 --> 00:08:25,680
new book there and upload images for

00:08:19,450 --> 00:08:25,680
example some xbase book for example ah

00:08:26,580 --> 00:08:35,710
let's make thirty nine euros still a

00:08:30,550 --> 00:08:40,260
good one so you know I can create that

00:08:35,710 --> 00:08:44,290
it's uploaded and you see a nice image

00:08:40,260 --> 00:08:46,960
so I only briefly talked about that in

00:08:44,290 --> 00:08:48,790
the last session so if you don't mind I

00:08:46,960 --> 00:08:51,550
would like to explain you how that works

00:08:48,790 --> 00:08:54,640
for you as a developer wants to use

00:08:51,550 --> 00:08:56,200
images what you need to do in your

00:08:54,640 --> 00:09:01,150
controller and

00:08:56,200 --> 00:09:05,800
model so let's take a look at how this

00:09:01,150 --> 00:09:08,080
is actually implemented and I'm now

00:09:05,800 --> 00:09:09,880
using the new presentation mode of peach

00:09:08,080 --> 00:09:20,680
piece Tom the very first time let's see

00:09:09,880 --> 00:09:27,400
how that works out interesting quite big

00:09:20,680 --> 00:09:30,520
so there's a book controller that the

00:09:27,400 --> 00:09:35,320
book controller is responsible for what

00:09:30,520 --> 00:09:37,030
you've just seen here so actually this

00:09:35,320 --> 00:09:39,970
URL here is pointing to the book

00:09:37,030 --> 00:09:42,250
controller and when you just call it

00:09:39,970 --> 00:09:46,000
like this it calls the index action of

00:09:42,250 --> 00:09:49,480
that controller so let's see how that

00:09:46,000 --> 00:09:52,480
looks like basically there's some some

00:09:49,480 --> 00:09:56,790
other sample code in there which is an

00:09:52,480 --> 00:09:56,790
example of a simple cash you could use

00:09:56,940 --> 00:10:06,760
so it it just stores the content

00:10:02,880 --> 00:10:12,670
generated by the template in some cash

00:10:06,760 --> 00:10:15,490
and next time a user spat again but we

00:10:12,670 --> 00:10:18,790
don't need that now so that's why this

00:10:15,490 --> 00:10:21,990
part here is commented what you actually

00:10:18,790 --> 00:10:21,990
could also do is

00:10:27,390 --> 00:10:32,840
by the way while i'm typing you can also

00:10:29,580 --> 00:10:37,470
listen to the other talk so you have

00:10:32,840 --> 00:10:41,190
double information so this would be the

00:10:37,470 --> 00:10:43,710
more simple version of it now you find

00:10:41,190 --> 00:10:48,120
our books from the repository assign it

00:10:43,710 --> 00:10:51,600
to the view and oh actually this is not

00:10:48,120 --> 00:10:53,460
necessary if you don't return anything

00:10:51,600 --> 00:10:57,450
in your action the view will

00:10:53,460 --> 00:11:03,840
automatically be rendered so let's see

00:10:57,450 --> 00:11:07,620
if that's it works oh it does alright so

00:11:03,840 --> 00:11:09,840
far for the the actual controller the

00:11:07,620 --> 00:11:13,800
index action and if you create a new

00:11:09,840 --> 00:11:17,610
book there's nothing fancy in in here at

00:11:13,800 --> 00:11:21,690
least so have flow will detect ok so you

00:11:17,610 --> 00:11:26,310
expect a new book here a new book object

00:11:21,690 --> 00:11:29,430
and as you remember what's coming in is

00:11:26,310 --> 00:11:32,340
an array of information and flow will

00:11:29,430 --> 00:11:34,410
convert that array into a new book

00:11:32,340 --> 00:11:38,220
object and start in the book repository

00:11:34,410 --> 00:11:40,950
here so nothing really fancy in the

00:11:38,220 --> 00:11:47,310
controller so let's have a look at the

00:11:40,950 --> 00:11:58,040
book model it's quite big I thing is it

00:11:47,310 --> 00:11:58,040
config group configurable font size

00:12:00,200 --> 00:12:03,200
presentation

00:12:09,149 --> 00:12:20,769
but it seems it doesn't apply to the

00:12:12,370 --> 00:12:30,939
presentation mode anyway can you still

00:12:20,769 --> 00:12:32,620
read that no yes no wha more or less but

00:12:30,939 --> 00:12:40,660
I know how to change the font size of

00:12:32,620 --> 00:12:53,110
that and I think 16 so that's good

00:12:40,660 --> 00:12:57,309
enough doesn't work interesting we'll do

00:12:53,110 --> 00:13:06,180
it that like that yeah apply oh I I

00:12:57,309 --> 00:13:09,399
really applied it a few times anyway so

00:13:06,180 --> 00:13:12,029
we have the book model here and the book

00:13:09,399 --> 00:13:15,329
model basically has a title prize

00:13:12,029 --> 00:13:19,420
description these are just simple types

00:13:15,329 --> 00:13:23,199
PHP simple type string integer that's

00:13:19,420 --> 00:13:26,110
actually pretty bad thing no it's not so

00:13:23,199 --> 00:13:31,209
if you have a story price never use a

00:13:26,110 --> 00:13:33,180
float do you know why I mean what would

00:13:31,209 --> 00:13:36,220
be quite handy right because we have

00:13:33,180 --> 00:13:43,750
euros and since you could use a float

00:13:36,220 --> 00:13:47,199
for that yeah so it's it's not actually

00:13:43,750 --> 00:13:49,029
precise once you start calculating then

00:13:47,199 --> 00:13:51,370
you might lose a few cents here and

00:13:49,029 --> 00:13:53,139
there and that's not not what you want

00:13:51,370 --> 00:13:57,179
in a shop for example so always use

00:13:53,139 --> 00:14:02,649
integers and always calculate in the

00:13:57,179 --> 00:14:06,519
incense in this in this case so and we

00:14:02,649 --> 00:14:11,410
have a description reviews and here we

00:14:06,519 --> 00:14:14,350
got an image so the most simple way to

00:14:11,410 --> 00:14:17,390
include an image here is directly store

00:14:14,350 --> 00:14:21,450
a resource object

00:14:17,390 --> 00:14:28,920
it's just a one-to-one relation to a

00:14:21,450 --> 00:14:34,560
resource object and okay so that there's

00:14:28,920 --> 00:14:41,790
a simple setter here set image which

00:14:34,560 --> 00:14:43,470
also expect resource object now we've

00:14:41,790 --> 00:14:45,990
seen the controller with the create

00:14:43,470 --> 00:14:47,700
action that is unchanged if you upload

00:14:45,990 --> 00:14:50,700
an image or not it's always the same

00:14:47,700 --> 00:14:54,770
create action it accepts a new book the

00:14:50,700 --> 00:15:06,680
model here has a new property image and

00:14:54,770 --> 00:15:06,680
if you look into the fluid file this one

00:15:08,300 --> 00:15:17,820
so here's the form for creating a new

00:15:11,340 --> 00:15:20,990
book and it has a bit much markup and

00:15:17,820 --> 00:15:25,820
that's because of Twitter bootstrap but

00:15:20,990 --> 00:15:31,620
here's the image so this basically

00:15:25,820 --> 00:15:36,540
renders just an upload in HTML there's

00:15:31,620 --> 00:15:39,450
nothing special about it and up here

00:15:36,540 --> 00:15:42,660
don't forget to set the encoding type to

00:15:39,450 --> 00:15:48,570
multi-part form data so it's a regular

00:15:42,660 --> 00:15:50,820
HTML form the controller with its great

00:15:48,570 --> 00:15:53,730
action doesn't have anything special for

00:15:50,820 --> 00:15:56,400
the image so the actual magic for

00:15:53,730 --> 00:15:59,180
uploading an image happens through the

00:15:56,400 --> 00:15:59,180
property mapper

00:16:04,310 --> 00:16:10,970
because the property mapper will see oh

00:16:07,130 --> 00:16:14,120
there's an array of title and ISBN and

00:16:10,970 --> 00:16:18,500
etc coming in and it needs to convert

00:16:14,120 --> 00:16:21,560
that to a new book and one of the

00:16:18,500 --> 00:16:24,710
properties is called image dot resource

00:16:21,560 --> 00:16:29,290
and now the one of the properties is

00:16:24,710 --> 00:16:32,390
gone yeah exactly image dad resource and

00:16:29,290 --> 00:16:35,750
the target of that and the target type

00:16:32,390 --> 00:16:39,350
is a resource object so it will also not

00:16:35,750 --> 00:16:42,020
only look in the post data but also in

00:16:39,350 --> 00:16:44,990
the files data in PHP if there's an

00:16:42,020 --> 00:16:48,170
upload with that name and then

00:16:44,990 --> 00:16:54,710
automatically convert the uploaded file

00:16:48,170 --> 00:16:56,390
into a resource object so from a user's

00:16:54,710 --> 00:16:58,610
perspective or from a developer's

00:16:56,390 --> 00:17:03,110
perspective the only thing you need to

00:16:58,610 --> 00:17:05,540
remember is an uploaded file ends up as

00:17:03,110 --> 00:17:08,510
a resource object and flow will do the

00:17:05,540 --> 00:17:14,569
wiring of that if you name the

00:17:08,510 --> 00:17:17,449
parameters right so there's that's the

00:17:14,569 --> 00:17:21,370
background of this am now if you don't

00:17:17,449 --> 00:17:31,910
use cloud resources sorry about my voice

00:17:21,370 --> 00:17:34,340
um oops then with a new resource

00:17:31,910 --> 00:17:38,380
management and flow to one and this is

00:17:34,340 --> 00:17:46,310
split up into different sub directories

00:17:38,380 --> 00:17:48,980
so you see and this is for performance

00:17:46,310 --> 00:17:50,870
reasons unfortunately now you could

00:17:48,980 --> 00:17:52,880
think that a modern file system doesn't

00:17:50,870 --> 00:17:56,060
have a problem if you put thousands of

00:17:52,880 --> 00:17:59,600
files in in one directory yeah that's

00:17:56,060 --> 00:18:02,150
wrong unfortunately they still have

00:17:59,600 --> 00:18:07,010
problems with that at least file systems

00:18:02,150 --> 00:18:08,560
like x3 or x4 you so if you have more

00:18:07,010 --> 00:18:14,330
than thousand files in the directory

00:18:08,560 --> 00:18:16,700
it's getting slow so we split it up into

00:18:14,330 --> 00:18:22,690
sub directories

00:18:16,700 --> 00:18:27,230
this is our image up upload we just had

00:18:22,690 --> 00:18:34,010
that is automatic mirrored to the web

00:18:27,230 --> 00:18:44,080
directory well that's some old stuff

00:18:34,010 --> 00:18:48,410
flying around so many sub directories

00:18:44,080 --> 00:18:52,910
alright so you see finally there's even

00:18:48,410 --> 00:18:58,070
another old one this is the file which

00:18:52,910 --> 00:19:00,620
is being published and this is also what

00:18:58,070 --> 00:19:03,740
you will find out when you open this in

00:19:00,620 --> 00:19:13,220
a new tab here that is exactly the path

00:19:03,740 --> 00:19:18,020
you've seen okay so when I delete this

00:19:13,220 --> 00:19:21,890
book here the nice thing is that all

00:19:18,020 --> 00:19:26,360
these files disappear again and remember

00:19:21,890 --> 00:19:29,960
I didn't implement anything special in

00:19:26,360 --> 00:19:32,360
my controller or in my action that if

00:19:29,960 --> 00:19:35,210
the book is deleted that also the files

00:19:32,360 --> 00:19:38,330
are removed so flow watches all these

00:19:35,210 --> 00:19:40,910
resource objects' and knows if they are

00:19:38,330 --> 00:19:44,660
used if they are referenced by another

00:19:40,910 --> 00:19:46,880
object so if your book object has a

00:19:44,660 --> 00:19:51,550
one-to-one relation to the resource

00:19:46,880 --> 00:19:54,920
object that is registered and as soon as

00:19:51,550 --> 00:19:58,760
no object is using the resource object

00:19:54,920 --> 00:20:02,900
anymore there's an event triggered which

00:19:58,760 --> 00:20:06,370
deletes the actual files so there's an

00:20:02,900 --> 00:20:06,370
automatic cleanup happening

00:20:08,160 --> 00:20:21,490
so let's upload something again so now

00:20:18,370 --> 00:20:25,240
you see okay it created the resource

00:20:21,490 --> 00:20:28,150
directories again so why do we have I

00:20:25,240 --> 00:20:32,260
need to repeat and so why is everything

00:20:28,150 --> 00:20:34,210
stored twice well the reason is is not

00:20:32,260 --> 00:20:40,150
said that you actually want to publish

00:20:34,210 --> 00:20:43,450
that uploaded resource imagine someone

00:20:40,150 --> 00:20:47,230
is uploading a copy of his driver's

00:20:43,450 --> 00:20:50,610
license in your application do you want

00:20:47,230 --> 00:20:53,590
to publish that automatically right away

00:20:50,610 --> 00:20:56,170
rather not so but it needs to be stored

00:20:53,590 --> 00:20:58,600
somewhere so that is why i distinguish

00:20:56,170 --> 00:21:04,809
between the storage and the publishing

00:20:58,600 --> 00:21:06,880
target and yes it uses twice the memory

00:21:04,809 --> 00:21:09,910
in this case you can actually configure

00:21:06,880 --> 00:21:14,580
the filesystem target to use a symlink

00:21:09,910 --> 00:21:22,870
instead i just didn't do that here and

00:21:14,580 --> 00:21:25,360
then instead of the real file it would

00:21:22,870 --> 00:21:29,559
create a symbolic link to the private

00:21:25,360 --> 00:21:32,080
directory oh the actual file there as

00:21:29,559 --> 00:21:34,750
long as one object is using the resource

00:21:32,080 --> 00:21:37,090
object it's still there so if you want

00:21:34,750 --> 00:21:39,790
to delete it from the book title but

00:21:37,090 --> 00:21:41,770
still have it in some media library then

00:21:39,790 --> 00:21:43,540
the media library also needs a reference

00:21:41,770 --> 00:21:45,520
to the resource object otherwise it

00:21:43,540 --> 00:21:51,550
would never find it again I'll show you

00:21:45,520 --> 00:21:55,120
how that looks like in the database so

00:21:51,550 --> 00:22:00,130
we have a table here for resource

00:21:55,120 --> 00:22:04,770
objects and let's take a look at the

00:22:00,130 --> 00:22:07,390
structure what we store there is the

00:22:04,770 --> 00:22:12,460
flow specific persistent object

00:22:07,390 --> 00:22:14,980
identifier that's just use your ID flow

00:22:12,460 --> 00:22:17,650
needs then we have the shower one of the

00:22:14,980 --> 00:22:21,250
content and also the md5 which is useful

00:22:17,650 --> 00:22:23,620
for cloud storages we have the file name

00:22:21,250 --> 00:22:26,410
we have a collection name and you'll see

00:22:23,620 --> 00:22:30,010
that in a second we also stop the media

00:22:26,410 --> 00:22:35,490
type and the file size so that's what we

00:22:30,010 --> 00:22:38,380
store about the resource object and I

00:22:35,490 --> 00:22:41,080
didn't I showed a very simple example in

00:22:38,380 --> 00:22:45,340
my book I only referenced a resource

00:22:41,080 --> 00:22:59,170
object and let's take a look at the

00:22:45,340 --> 00:23:08,350
index.html again oh no not that one he's

00:22:59,170 --> 00:23:12,840
got pretty cool boys ok so I actually

00:23:08,350 --> 00:23:17,740
didn't show you this piece of template

00:23:12,840 --> 00:23:20,140
so you see um actually there's an if

00:23:17,740 --> 00:23:21,790
condition if there is booked our image

00:23:20,140 --> 00:23:23,980
so it could be that the book doesn't

00:23:21,790 --> 00:23:27,610
have an image but if there is booked out

00:23:23,980 --> 00:23:31,360
image then render an image tag and the

00:23:27,610 --> 00:23:36,400
source should be a URL rendered by the

00:23:31,360 --> 00:23:41,020
resource view helper that is in the

00:23:36,400 --> 00:23:44,770
resource management it it knows how to

00:23:41,020 --> 00:23:50,620
render some public URL pointing to your

00:23:44,770 --> 00:23:54,820
file and this will actually might

00:23:50,620 --> 00:23:57,610
trigger a publication process so you

00:23:54,820 --> 00:23:59,800
just passes the the resource object here

00:23:57,610 --> 00:24:03,310
and that's a very simple example now you

00:23:59,800 --> 00:24:05,500
have the image data but sometimes you

00:24:03,310 --> 00:24:07,450
need a bit more you want to have the

00:24:05,500 --> 00:24:11,680
caption for that image you want to have

00:24:07,450 --> 00:24:14,260
multiple versions and you need and Joan

00:24:11,680 --> 00:24:18,490
you need more metadata and of course

00:24:14,260 --> 00:24:25,110
nails we need that let's look at the

00:24:18,490 --> 00:24:25,110
base configuration before resource

00:24:27,550 --> 00:24:34,850
okay you can now open your eyes again

00:24:30,050 --> 00:24:38,450
look at this hmm and first I define

00:24:34,850 --> 00:24:41,630
where can I store things and I'll where

00:24:38,450 --> 00:24:44,840
are things toward I have two storages by

00:24:41,630 --> 00:24:50,270
default I have the persistent resources

00:24:44,840 --> 00:24:51,770
starch that are all my uploads and I

00:24:50,270 --> 00:24:55,610
have the default static resources

00:24:51,770 --> 00:24:57,230
storage that is all the files you have

00:24:55,610 --> 00:25:05,300
in your packages that's a read-only

00:24:57,230 --> 00:25:06,920
storage make sense right so this default

00:25:05,300 --> 00:25:10,070
persistence resources storage is a

00:25:06,920 --> 00:25:13,160
writable file system storage and I give

00:25:10,070 --> 00:25:15,560
it a certain path here so it ends up

00:25:13,160 --> 00:25:18,800
doing exactly the same like in flow

00:25:15,560 --> 00:25:25,370
before in stores uploaded files in data

00:25:18,800 --> 00:25:27,050
persistent resources now the second

00:25:25,370 --> 00:25:30,020
thing you define other publishing

00:25:27,050 --> 00:25:33,500
targets so you might publish that to any

00:25:30,020 --> 00:25:37,040
kind of location by default we simulate

00:25:33,500 --> 00:25:39,080
the same thing you have in like you had

00:25:37,040 --> 00:25:43,640
and flow so we have a local web

00:25:39,080 --> 00:25:45,410
directory where we publish the

00:25:43,640 --> 00:25:50,930
persistent resources and the static

00:25:45,410 --> 00:25:58,040
resources and the glue between storage

00:25:50,930 --> 00:26:00,380
and target is the collection so we have

00:25:58,040 --> 00:26:02,780
a static and a persistent collection and

00:26:00,380 --> 00:26:04,760
you create can create your very own

00:26:02,780 --> 00:26:09,380
collection so for example you could say

00:26:04,760 --> 00:26:12,440
I have an invoices collection all the

00:26:09,380 --> 00:26:15,470
PDF files of your invoices end up in a

00:26:12,440 --> 00:26:17,480
certain collection which is published to

00:26:15,470 --> 00:26:20,120
a certain target and store it in a

00:26:17,480 --> 00:26:26,000
certain location and all other assets

00:26:20,120 --> 00:26:28,280
are stored and published elsewhere so

00:26:26,000 --> 00:26:31,040
the very simple thing I can have here is

00:26:28,280 --> 00:26:33,260
I use the default static resources

00:26:31,040 --> 00:26:35,570
storage and publish that to the local

00:26:33,260 --> 00:26:39,790
web directory static resources target I

00:26:35,570 --> 00:26:39,790
like long names as you see

00:26:40,120 --> 00:26:48,410
and in more fancy setups you can have

00:26:46,039 --> 00:26:51,860
patterns and say okay these kinds of

00:26:48,410 --> 00:26:55,640
files should be published they're not

00:26:51,860 --> 00:26:59,890
part of flow to one but definitely part

00:26:55,640 --> 00:27:04,190
of the concept is being able to add

00:26:59,890 --> 00:27:10,280
filters and post processors so you could

00:27:04,190 --> 00:27:13,070
say all CSS files or SAS files for

00:27:10,280 --> 00:27:16,520
example should be compiled and or

00:27:13,070 --> 00:27:18,740
JavaScript files should be minified this

00:27:16,520 --> 00:27:23,659
is all part of the resource management

00:27:18,740 --> 00:27:28,400
in flow and actually you will be able as

00:27:23,659 --> 00:27:31,669
far as i can see today all the ascetic

00:27:28,400 --> 00:27:37,640
filters which exist for that purpose

00:27:31,669 --> 00:27:39,700
will have compatible interfaces now

00:27:37,640 --> 00:27:41,900
let's look at the more interesting

00:27:39,700 --> 00:27:44,240
storage and that is the rec space

00:27:41,900 --> 00:27:50,419
storage in this case you can also use

00:27:44,240 --> 00:27:54,460
Amazon s3 or create your own so I have a

00:27:50,419 --> 00:28:00,070
storage here I use a certain container

00:27:54,460 --> 00:28:00,070
so let's take a look at and that so

00:28:04,830 --> 00:28:14,070
come on okay there you go so I already

00:28:10,919 --> 00:28:18,630
published a few of the static resources

00:28:14,070 --> 00:28:20,789
just to test but here is a container

00:28:18,630 --> 00:28:26,990
called persistent target for example

00:28:20,789 --> 00:28:30,659
that's currently an empty so this is

00:28:26,990 --> 00:28:33,269
where we store all the published all the

00:28:30,659 --> 00:28:38,659
uploaded resources and then I have two

00:28:33,269 --> 00:28:43,260
targets I use the static target

00:28:38,659 --> 00:28:46,830
container and now you can see a nice

00:28:43,260 --> 00:28:53,279
thing here for the persistent resources

00:28:46,830 --> 00:28:55,769
i use the CDN so I say okay this is the

00:28:53,279 --> 00:28:59,549
URL i copied from from my rec space

00:28:55,769 --> 00:29:01,470
account all the uploaded resources will

00:28:59,549 --> 00:29:09,389
will be published to your content

00:29:01,470 --> 00:29:12,179
delivery network right away and here

00:29:09,389 --> 00:29:15,149
again I have the glue which is basically

00:29:12,179 --> 00:29:19,740
the same like like locally but now with

00:29:15,149 --> 00:29:23,070
all rec space so let me switch to that

00:29:19,740 --> 00:29:25,139
configuration I do that by just setting

00:29:23,070 --> 00:29:26,580
a different environment variable and say

00:29:25,139 --> 00:29:28,649
okay I don't want to have the

00:29:26,580 --> 00:29:32,639
development context and flow but the

00:29:28,649 --> 00:29:35,570
development rec space context so I have

00:29:32,639 --> 00:29:35,570
my additional settings

00:29:46,080 --> 00:29:53,260
so now when I reload this image should

00:29:48,730 --> 00:29:57,820
be broken hopefully because that is not

00:29:53,260 --> 00:30:07,240
published I'm also locked out because

00:29:57,820 --> 00:30:16,770
I'm in a different context now so let me

00:30:07,240 --> 00:30:31,990
just delete that actually I have locking

00:30:16,770 --> 00:30:37,900
somewhere okay doesn't matter okay so X

00:30:31,990 --> 00:30:44,440
pays again the price dropped

00:30:37,900 --> 00:30:46,390
dramatically now you see and the upload

00:30:44,440 --> 00:30:51,670
took a bit longer and also the image

00:30:46,390 --> 00:30:53,170
came a bit later that's the purpose of a

00:30:51,670 --> 00:30:59,590
content delivery network it should be

00:30:53,170 --> 00:31:03,780
slower right so something obviously

00:30:59,590 --> 00:31:06,340
happened let's look at the log file here

00:31:03,780 --> 00:31:08,410
actually you can now see okay so

00:31:06,340 --> 00:31:10,630
something is going on there with Rex

00:31:08,410 --> 00:31:17,740
break classifieds it created a new

00:31:10,630 --> 00:31:23,740
object there copied it nice so let's

00:31:17,740 --> 00:31:26,640
have a look at the container hmm that

00:31:23,740 --> 00:31:26,640
sometimes it takes a while

00:31:30,570 --> 00:31:40,320
you know you have it but you don't know

00:31:33,430 --> 00:31:40,320
it it's the wrong country I I did

00:31:41,280 --> 00:31:54,400
there's probably much more in there so

00:31:47,620 --> 00:31:56,830
that should be this one yeah so it

00:31:54,400 --> 00:32:03,100
downloads it um actually what you can

00:31:56,830 --> 00:32:07,510
see um is that we set a custom header

00:32:03,100 --> 00:32:11,220
here which is a content-disposition

00:32:07,510 --> 00:32:17,340
header with the original file name

00:32:11,220 --> 00:32:17,340
because now when you see this image here

00:32:18,960 --> 00:32:31,180
or this URL actually no we also have the

00:32:26,950 --> 00:32:34,120
file name there it's irrelevant for for

00:32:31,180 --> 00:32:40,750
the CDN actually but we just add it it

00:32:34,120 --> 00:32:42,790
doesn't do any harm and then for a PDF

00:32:40,750 --> 00:32:45,370
file so for example when you downloaded

00:32:42,790 --> 00:32:47,170
the PDF file will actually have the

00:32:45,370 --> 00:32:53,230
actual file name from the uploaded

00:32:47,170 --> 00:33:01,750
resource okay that seems to work now

00:32:53,230 --> 00:33:05,620
let's create a second book and not what

00:33:01,750 --> 00:33:09,370
I do is I upload a file with a different

00:33:05,620 --> 00:33:12,270
name but exactly the same data so i just

00:33:09,370 --> 00:33:12,270
made a copy of this

00:33:19,310 --> 00:33:32,820
so what happened now hopefully is we

00:33:27,060 --> 00:33:36,870
still have this one storage but now we

00:33:32,820 --> 00:33:42,030
have if you look at this in a new tab or

00:33:36,870 --> 00:33:44,540
it downloads it all right away so that

00:33:42,030 --> 00:33:48,360
you see actually for the publication

00:33:44,540 --> 00:33:51,630
it's a second file because it has a

00:33:48,360 --> 00:33:54,330
different file name and the reason is

00:33:51,630 --> 00:33:57,210
just I mean imagine you're creating are

00:33:54,330 --> 00:34:01,710
using a portal for finding a girlfriend

00:33:57,210 --> 00:34:04,460
and someone uploaded a goal uploaded the

00:34:01,710 --> 00:34:07,560
photo first with a certain name and

00:34:04,460 --> 00:34:09,600
uploads the same photo for someone else

00:34:07,560 --> 00:34:12,120
with a different name you would be

00:34:09,600 --> 00:34:15,690
completely confused if you download it

00:34:12,120 --> 00:34:18,179
and it has a name you didn't expect you

00:34:15,690 --> 00:34:20,250
can see that so even if someone else is

00:34:18,179 --> 00:34:26,669
uploading exactly the same file you want

00:34:20,250 --> 00:34:30,950
to keep the original file name hmm

00:34:26,669 --> 00:34:30,950
probably it it was a bad example anyway

00:34:32,510 --> 00:34:39,990
okay i'll upload well you were probably

00:34:37,620 --> 00:34:44,850
looking at this file right with the

00:34:39,990 --> 00:34:50,210
chicks home we can of course upload that

00:34:44,850 --> 00:34:53,609
as well takes a bit longer

00:34:50,210 --> 00:34:58,380
but there you saw lots of chicks there

00:34:53,609 --> 00:35:02,750
and also theoretically at least let's

00:34:58,380 --> 00:35:02,750
see there should be another file now

00:35:02,809 --> 00:35:18,480
there you go and in the exactly for the

00:35:11,910 --> 00:35:21,270
persistent target here you see that that

00:35:18,480 --> 00:35:24,000
the images have been published multiple

00:35:21,270 --> 00:35:26,250
times there's no actual way around it as

00:35:24,000 --> 00:35:28,349
a rec space doesn't support siblings in

00:35:26,250 --> 00:35:35,900
the content delivery network so we

00:35:28,349 --> 00:35:38,460
actually publish them multiple times so

00:35:35,900 --> 00:35:44,450
yeah let's see if it can also clean up

00:35:38,460 --> 00:35:44,450
again I just remove these books

00:35:54,160 --> 00:36:00,410
so that there's this old file from

00:35:56,930 --> 00:36:06,430
another demo left but it also cleaned up

00:36:00,410 --> 00:36:09,859
nicely so that's basically the idea and

00:36:06,430 --> 00:36:13,690
something which was unfortunately but

00:36:09,859 --> 00:36:13,690
broke and I plan to show it to you

00:36:14,650 --> 00:36:22,549
should I try it again yeah let let me

00:36:20,539 --> 00:36:24,289
give you the last try um because it's

00:36:22,549 --> 00:36:26,390
quite nice for the whole media

00:36:24,289 --> 00:36:32,630
management I also rewrote the whole

00:36:26,390 --> 00:36:35,349
media package for flow 21 I don't know

00:36:32,630 --> 00:36:35,349
that was wrong

00:36:45,089 --> 00:37:09,960
so so so I know actually nothing that's

00:36:53,230 --> 00:37:09,960
two works see you top three media

00:37:19,290 --> 00:37:22,290
um

00:37:26,060 --> 00:37:37,070
okay let's see if that works I have no

00:37:29,250 --> 00:37:37,070
idea and doctrine oops

00:37:44,190 --> 00:37:51,510
ok looks promising hmm

00:37:55,400 --> 00:38:03,650
not so promising okay

00:38:11,290 --> 00:38:13,350
you

00:38:14,420 --> 00:38:19,299
I knew it

00:38:39,330 --> 00:38:46,810
okay so unfortunately the database

00:38:43,810 --> 00:38:59,530
migration didn't work out but anywhere

00:38:46,810 --> 00:39:01,590
I'll show you the API shortly so when

00:38:59,530 --> 00:39:04,270
you are using the new media management

00:39:01,590 --> 00:39:08,050
you're dealing with these acid objects

00:39:04,270 --> 00:39:11,710
and you have image objects which extent

00:39:08,050 --> 00:39:17,170
asset you also have audio and and all

00:39:11,710 --> 00:39:25,930
that so now the nice thing is the acid

00:39:17,170 --> 00:39:31,860
method class here has a method called

00:39:25,930 --> 00:39:35,190
get thumbnail so any kind of acid and

00:39:31,860 --> 00:39:38,620
mostly images right now but if you have

00:39:35,190 --> 00:39:40,660
whatever document if you needed a

00:39:38,620 --> 00:39:44,800
thumbnail you just call cab thumbnail

00:39:40,660 --> 00:39:48,370
and set the maximum with maximum height

00:39:44,800 --> 00:39:53,080
etc what you'll get back is a thumbnail

00:39:48,370 --> 00:39:54,990
object and you can just use that display

00:39:53,080 --> 00:39:59,950
it in your template is that your you can

00:39:54,990 --> 00:40:02,430
also access that through your image view

00:39:59,950 --> 00:40:02,430
helper

00:40:07,050 --> 00:40:13,119
look at this this is now slightly

00:40:10,630 --> 00:40:15,670
different it uses the media package and

00:40:13,119 --> 00:40:19,240
the imageview Halpern says not resource

00:40:15,670 --> 00:40:23,530
but image booked out image and you just

00:40:19,240 --> 00:40:25,330
say maximum width is 200 pixels it will

00:40:23,530 --> 00:40:29,710
automatically create a thumbnail for you

00:40:25,330 --> 00:40:32,230
and publish that to your CDN now the

00:40:29,710 --> 00:40:35,920
nice thing is if you change the original

00:40:32,230 --> 00:40:39,130
image all thumbnails will be unpublished

00:40:35,920 --> 00:40:41,530
and next time recreated so you don't

00:40:39,130 --> 00:40:46,240
have to clean up all thumbnails used

00:40:41,530 --> 00:40:53,560
everywhere and there are some more nice

00:40:46,240 --> 00:40:56,020
things you can do with images so you can

00:40:53,560 --> 00:41:00,970
just create a new image variant object

00:40:56,020 --> 00:41:04,930
and pass it an original image and then

00:41:00,970 --> 00:41:13,240
you have a working copy of that original

00:41:04,930 --> 00:41:18,790
image and in this image variant you have

00:41:13,240 --> 00:41:23,010
nice method of course but you have a

00:41:18,790 --> 00:41:25,750
method here called add adjustment and

00:41:23,010 --> 00:41:28,780
you have a bunch of adjustments here I

00:41:25,750 --> 00:41:32,440
just implemented a few to test this but

00:41:28,780 --> 00:41:35,170
you can imagine now we have resize image

00:41:32,440 --> 00:41:38,290
adjustment crop image adjustment you can

00:41:35,170 --> 00:41:40,960
implement black and white filter

00:41:38,290 --> 00:41:42,730
adjustment or whatever all this

00:41:40,960 --> 00:41:45,970
information is just attached to the

00:41:42,730 --> 00:41:49,450
image variant and when you call get

00:41:45,970 --> 00:41:53,140
resource this is lazily rendered and

00:41:49,450 --> 00:41:55,500
published to your CDN with all the

00:41:53,140 --> 00:41:59,590
adjustments changed and you can just

00:41:55,500 --> 00:42:01,750
call a method for example set with on

00:41:59,590 --> 00:42:05,640
your resides adjustment and everything

00:42:01,750 --> 00:42:10,600
will be updated all thumbnails

00:42:05,640 --> 00:42:13,570
everything is use and finally imagine

00:42:10,600 --> 00:42:16,600
you have an image three variants 50

00:42:13,570 --> 00:42:18,070
thumbnails attached to your book when

00:42:16,600 --> 00:42:19,210
you delete your book everything is

00:42:18,070 --> 00:42:30,609
cleaned up again

00:42:19,210 --> 00:42:35,310
and unpublished from this again so that

00:42:30,609 --> 00:42:39,849
was the answer to how to store resources

00:42:35,310 --> 00:42:47,230
do you have any questions I am should be

00:42:39,849 --> 00:42:49,540
my last session today alright if you can

00:42:47,230 --> 00:42:52,930
think of more questions afterwards I'll

00:42:49,540 --> 00:42:54,869
gladly answer them all so you can read a

00:42:52,930 --> 00:42:59,770
bit more about resource management

00:42:54,869 --> 00:43:02,109
soonish on my block and yeah i'll

00:42:59,770 --> 00:43:05,710
publish this these slides of these

00:43:02,109 --> 00:43:08,800
slides these false lights and the sample

00:43:05,710 --> 00:43:14,580
code on the joint in page for the

00:43:08,800 --> 00:43:14,580

YouTube URL: https://www.youtube.com/watch?v=hQ_ig3Ustn0


