Title: PHP 5.5 new Features - Julien Pauli | IPC13
Publication date: 2016-06-09
Playlist: International PHP Conference 2013
Description: 
	PHP 5.5 is here! This talk will show you what new features we added in PHP 5.5. We'll then talk about Generators, new password hashing API, finally keword ... Also, we'll see what new functions/methods has been added in Core or extension as well as what's been deprecated and the backward compatibility breaks. This talk is all you need to know about the 5.5 release.

More information: https://phpconference.com/en
Captions: 
	00:00:07,160 --> 00:00:15,389
welcome welcome to this this dog this

00:00:10,500 --> 00:00:20,850
session about well it's about PHP 55 but

00:00:15,389 --> 00:00:23,699
I can also talk about PHP's future we

00:00:20,850 --> 00:00:27,840
are talking about actually internally

00:00:23,699 --> 00:00:32,520
about PHP 5.6 or something like that

00:00:27,840 --> 00:00:38,070
well even new new features but let's

00:00:32,520 --> 00:00:43,050
focus first on this 55 release ok so

00:00:38,070 --> 00:00:45,750
let's go so I'm a Julian podium French I

00:00:43,050 --> 00:00:50,820
used to work for blah blah car now I

00:00:45,750 --> 00:00:53,699
work for a sensual in Paris under

00:00:50,820 --> 00:00:57,559
release manager of the 55 release

00:00:53,699 --> 00:01:00,539
together with David so yeah which is a

00:00:57,559 --> 00:01:07,080
we are two people releasing releasing

00:01:00,539 --> 00:01:09,869
PHP I like I like HP I like open source

00:01:07,080 --> 00:01:13,080
software I like c programming i like

00:01:09,869 --> 00:01:17,100
unix programming things like that and I

00:01:13,080 --> 00:01:19,380
like sharing my knowledge you know with

00:01:17,100 --> 00:01:22,320
people so talking to you or writing

00:01:19,380 --> 00:01:24,750
articles or technical stuff books or

00:01:22,320 --> 00:01:28,590
things like that so you can find me on

00:01:24,750 --> 00:01:33,479
github and Twitter etc you you know all

00:01:28,590 --> 00:01:35,369
this so this is why the elephant okay so

00:01:33,479 --> 00:01:38,850
for people who didn't know why the

00:01:35,369 --> 00:01:41,880
elephants this is the answer this is

00:01:38,850 --> 00:01:43,829
just PHP and the elephant this is funny

00:01:41,880 --> 00:01:46,770
I like to show this picture on the

00:01:43,829 --> 00:01:50,759
beginning of my talks just to answer the

00:01:46,770 --> 00:01:53,850
question why and happened and let's

00:01:50,759 --> 00:01:59,270
start first by talking about PHP

00:01:53,850 --> 00:02:03,450
releases here you can see the dates

00:01:59,270 --> 00:02:07,879
where we used to release PHP in the past

00:02:03,450 --> 00:02:11,100
okay so it's very it's very sparse tits

00:02:07,879 --> 00:02:13,970
it's not very very clean

00:02:11,100 --> 00:02:17,520
release dates it's just we we released

00:02:13,970 --> 00:02:21,950
version whenever we want it to and not

00:02:17,520 --> 00:02:26,730
whenever the public the programmers the

00:02:21,950 --> 00:02:32,760
people wanted to so it's it's been very

00:02:26,730 --> 00:02:37,350
very bad in the past now starting with

00:02:32,760 --> 00:02:41,160
PHP 5.4 we have a release a key a

00:02:37,350 --> 00:02:47,610
release process okay and this release

00:02:41,160 --> 00:02:49,470
process is written detailed in an RFC on

00:02:47,610 --> 00:02:53,340
our wiki if you want to have more

00:02:49,470 --> 00:02:57,420
details but basically it says we're

00:02:53,340 --> 00:03:00,750
gonna release a new major where major or

00:02:57,420 --> 00:03:06,120
minor it depends on what you how you you

00:03:00,750 --> 00:03:11,220
you understand it release major every

00:03:06,120 --> 00:03:14,660
year starting from five four okay the

00:03:11,220 --> 00:03:18,090
versions are supported by the community

00:03:14,660 --> 00:03:20,490
for three years of life it's two years

00:03:18,090 --> 00:03:23,760
of life plus when your security fixes

00:03:20,490 --> 00:03:27,690
and then it stops we dropped support and

00:03:23,760 --> 00:03:32,100
we support the next version okay and we

00:03:27,690 --> 00:03:37,470
have revisions versions this is fixing

00:03:32,100 --> 00:03:43,230
fixing bugs every month so starting from

00:03:37,470 --> 00:03:47,670
five four and then sure 55 we have we

00:03:43,230 --> 00:03:50,970
have release every month for revisions

00:03:47,670 --> 00:03:53,490
for back fixings so we are now at five

00:03:50,970 --> 00:03:56,730
point five point five and then next

00:03:53,490 --> 00:04:00,080
month five point five point six etc etc

00:03:56,730 --> 00:04:04,380
etc and then next year should be

00:04:00,080 --> 00:04:07,200
something like june or july the next PHP

00:04:04,380 --> 00:04:11,160
version which should be something like

00:04:07,200 --> 00:04:14,880
five point six but it's not yet sure it

00:04:11,160 --> 00:04:17,489
could be something like 6.0 but i cannot

00:04:14,880 --> 00:04:22,460
say we really cannot say it all depends

00:04:17,489 --> 00:04:26,000
on on the ideas we got on on the patchy

00:04:22,460 --> 00:04:29,389
and on things like that we are not very

00:04:26,000 --> 00:04:34,060
sure but we start having a good good

00:04:29,389 --> 00:04:37,520
site about this so this is important

00:04:34,060 --> 00:04:40,099
this is actual this that does not mean

00:04:37,520 --> 00:04:42,380
that in the future we won't change this

00:04:40,099 --> 00:04:46,479
release process it's actually something

00:04:42,380 --> 00:04:52,250
we are practicing we are testing okay

00:04:46,479 --> 00:04:53,990
starting from 54 if the community is we

00:04:52,250 --> 00:04:56,630
have great support for the community or

00:04:53,990 --> 00:04:59,449
if it's okay for the community to have

00:04:56,630 --> 00:05:03,229
this Reese process then we will continue

00:04:59,449 --> 00:05:05,270
with it if it's too short to long or

00:05:03,229 --> 00:05:07,310
something like that we probably will

00:05:05,270 --> 00:05:12,440
modify it in the future okay but

00:05:07,310 --> 00:05:17,419
actually it's like this so expect a 5.6

00:05:12,440 --> 00:05:24,349
in next june next year then of something

00:05:17,419 --> 00:05:25,970
like a 5.7 5.8 or it could be a 6.0 we

00:05:24,349 --> 00:05:28,639
don't really know but we will

00:05:25,970 --> 00:05:34,190
communicate about this in the future

00:05:28,639 --> 00:05:38,360
when we when we know so 5657 what am I

00:05:34,190 --> 00:05:46,750
saying let's talk about 55 and you can

00:05:38,360 --> 00:05:50,199
help us okay with PHP it's not very hard

00:05:46,750 --> 00:05:53,750
you can help us in many ways and

00:05:50,199 --> 00:05:57,560
everybody thinks that yes you have to

00:05:53,750 --> 00:06:00,710
know C language you have to know a PHP

00:05:57,560 --> 00:06:03,380
internals which are quite hard to to

00:06:00,710 --> 00:06:07,789
know to contribute no that's wrong there

00:06:03,380 --> 00:06:09,770
are many ways to contribute one way we

00:06:07,789 --> 00:06:11,900
tend to forget about it the

00:06:09,770 --> 00:06:14,770
documentation you know the documentation

00:06:11,900 --> 00:06:18,800
is something really really nice which

00:06:14,770 --> 00:06:23,599
kind of made PHP what it is nowadays

00:06:18,800 --> 00:06:28,039
okay it's very well translated in many

00:06:23,599 --> 00:06:31,219
languages but it's all free work you

00:06:28,039 --> 00:06:34,279
know its contribution I do it for the

00:06:31,219 --> 00:06:35,630
French documentation on my spare time

00:06:34,279 --> 00:06:37,640
like

00:06:35,630 --> 00:06:39,650
yesterday evening or this evening or

00:06:37,640 --> 00:06:42,290
something like that when I want to and I

00:06:39,650 --> 00:06:44,240
have time to because i like the language

00:06:42,290 --> 00:06:46,640
i want to push it i want to support it

00:06:44,240 --> 00:06:49,550
it's a it's free on my spare time and

00:06:46,640 --> 00:06:53,120
you can help us with translation you can

00:06:49,550 --> 00:06:56,810
help us by reporting bugs reporting bug

00:06:53,120 --> 00:07:01,790
is something to take seriously it's

00:06:56,810 --> 00:07:05,120
about knowing it's a burg showing it's a

00:07:01,790 --> 00:07:08,120
bug and eventually if you can add a

00:07:05,120 --> 00:07:11,150
patch then it's it's okay as well it's

00:07:08,120 --> 00:07:14,840
better but you can at least report it on

00:07:11,150 --> 00:07:16,820
bugs dot php.net you can help us with

00:07:14,840 --> 00:07:22,190
the infrastructure we had security

00:07:16,820 --> 00:07:26,830
problems few days ago there are not so

00:07:22,190 --> 00:07:30,520
many people contributing to PHP okay

00:07:26,830 --> 00:07:32,930
they do this mainly on their spare time

00:07:30,520 --> 00:07:35,600
sometimes they get paid for that but

00:07:32,930 --> 00:07:39,860
it's not always the case so we always

00:07:35,600 --> 00:07:42,590
need people to help and helping is not

00:07:39,860 --> 00:07:45,770
an individual thing it's about getting

00:07:42,590 --> 00:07:50,290
in the community knowing how it works

00:07:45,770 --> 00:07:53,450
and then working together like on every

00:07:50,290 --> 00:07:55,870
open source software okay so we would

00:07:53,450 --> 00:07:59,570
need help so you can you can help us

00:07:55,870 --> 00:08:01,790
there are many many uses PHP worldwide

00:07:59,570 --> 00:08:03,620
but not so many contributors so if you

00:08:01,790 --> 00:08:06,550
want to help you can ask me or you can

00:08:03,620 --> 00:08:10,850
send a mail to the to the mailing lists

00:08:06,550 --> 00:08:14,810
telling what what you want to do and we

00:08:10,850 --> 00:08:18,880
will sure welcome you with a smile and

00:08:14,810 --> 00:08:24,140
weather and enthusiasm it's a very nice

00:08:18,880 --> 00:08:27,500
so let's talk about five are now I have

00:08:24,140 --> 00:08:32,390
new features and I selected some

00:08:27,500 --> 00:08:35,030
features about 55 that's not all the new

00:08:32,390 --> 00:08:37,760
feature but the main feature the main

00:08:35,030 --> 00:08:40,400
new feature the important ones you have

00:08:37,760 --> 00:08:43,460
a minor ones little ones you can get

00:08:40,400 --> 00:08:47,600
them on the documentation same i will

00:08:43,460 --> 00:08:48,450
show you how all those stuff works but i

00:08:47,600 --> 00:08:51,420
won't get

00:08:48,450 --> 00:08:53,820
too deep because a we have time it's

00:08:51,420 --> 00:08:56,220
just a presentation if you want to get

00:08:53,820 --> 00:08:58,740
deeper the documentation is up to date

00:08:56,220 --> 00:09:03,300
nowadays 455 so you can read it it's

00:08:58,740 --> 00:09:07,560
very nicely done and you can talk to me

00:09:03,300 --> 00:09:09,900
or any other PHP guy or who knows that

00:09:07,560 --> 00:09:13,310
later in the conference if you want more

00:09:09,900 --> 00:09:16,100
information on a specific subject so

00:09:13,310 --> 00:09:19,220
let's talk about new features

00:09:16,100 --> 00:09:24,170
technically technical ones and then

00:09:19,220 --> 00:09:28,160
engine changes you know like a syntax or

00:09:24,170 --> 00:09:33,240
things like that and then what breaks

00:09:28,160 --> 00:09:39,260
compared to 54 and what's the future of

00:09:33,240 --> 00:09:43,730
PHP so password hashing API cool feature

00:09:39,260 --> 00:09:47,540
will show we see that in a minute

00:09:43,730 --> 00:09:51,420
generators which is a kind of ITA raters

00:09:47,540 --> 00:09:54,960
modified something strange if you don't

00:09:51,420 --> 00:09:58,020
know it so perhaps it's better to to

00:09:54,960 --> 00:10:02,520
have a document yourself about under

00:09:58,020 --> 00:10:05,070
about that subject before testing this

00:10:02,520 --> 00:10:08,070
in PHP but you see it's not that hard

00:10:05,070 --> 00:10:10,890
the final keyword perhaps you you know

00:10:08,070 --> 00:10:14,280
what it is about a try-catch is an

00:10:10,890 --> 00:10:17,820
important feature NOP code cache which

00:10:14,280 --> 00:10:20,670
is now integrated in PHP i will talk to

00:10:17,820 --> 00:10:26,010
you further in few minutes about this

00:10:20,670 --> 00:10:31,110
and then engine changes so a new Posada

00:10:26,010 --> 00:10:36,660
api PHP is very you know PHP it's a easy

00:10:31,110 --> 00:10:40,620
to to learn easy to develop and we as

00:10:36,660 --> 00:10:45,420
contributors writing code and making PHP

00:10:40,620 --> 00:10:49,170
we try to think for the user so that the

00:10:45,420 --> 00:10:51,420
user has little code to write and this

00:10:49,170 --> 00:10:54,090
little code does many things internally

00:10:51,420 --> 00:10:59,760
okay and there was something strange

00:10:54,090 --> 00:11:01,260
about PHP it's a web language it handles

00:10:59,760 --> 00:11:05,190
that races and

00:11:01,260 --> 00:11:11,480
networks network stuff and things like

00:11:05,190 --> 00:11:16,490
that but there was before 55 no way to

00:11:11,480 --> 00:11:19,920
identify someone and check against

00:11:16,490 --> 00:11:21,990
credentials a password in an easy way

00:11:19,920 --> 00:11:26,420
that's something crazy when you think

00:11:21,990 --> 00:11:29,840
about PHP because it's it's a language

00:11:26,420 --> 00:11:34,950
which tries to make the wave easier but

00:11:29,840 --> 00:11:37,980
something crucial like identify someone

00:11:34,950 --> 00:11:42,630
and check against credential was not

00:11:37,980 --> 00:11:46,950
included in the language now you have in

00:11:42,630 --> 00:11:52,500
PHP 55 very nice a very cool very easy

00:11:46,950 --> 00:11:56,460
very fluent api just to check about a

00:11:52,500 --> 00:11:58,620
password just to login a user on your

00:11:56,460 --> 00:12:02,490
website you know the easier thing the

00:11:58,620 --> 00:12:05,240
thing everyone knows how to do it but

00:12:02,490 --> 00:12:09,840
there are many ways many things like

00:12:05,240 --> 00:12:14,520
salty encrypting and things just crazy

00:12:09,840 --> 00:12:17,490
stuff and then everyone does does it in

00:12:14,520 --> 00:12:20,120
its own way perhaps it's not secure

00:12:17,490 --> 00:12:23,520
perhaps it's to secure perhaps it's to

00:12:20,120 --> 00:12:30,660
CPU the CPU cost is too intensive for

00:12:23,520 --> 00:12:38,210
which one will now PHP has added new new

00:12:30,660 --> 00:12:40,820
functions to both make a password a

00:12:38,210 --> 00:12:46,140
cryptid password and check it check

00:12:40,820 --> 00:12:51,000
against against it with very simple and

00:12:46,140 --> 00:12:53,790
easy functions look at this let's say

00:12:51,000 --> 00:12:57,600
you have a password which is the string

00:12:53,790 --> 00:13:00,660
secret wow this is secret password you

00:12:57,600 --> 00:13:03,480
now can generate a hash with just one

00:13:00,660 --> 00:13:07,250
function call and then store this hash

00:13:03,480 --> 00:13:11,550
somewhere let's say in a database field

00:13:07,250 --> 00:13:14,730
and PHP takes care of all the complex

00:13:11,550 --> 00:13:18,420
stuff behind the scene ok so you

00:13:14,730 --> 00:13:21,449
password you have and you get

00:13:18,420 --> 00:13:24,540
something like this strange string you

00:13:21,449 --> 00:13:26,639
don't have to know anything about it and

00:13:24,540 --> 00:13:28,860
then you store it somewhere in a

00:13:26,639 --> 00:13:31,500
database and then when the user comes

00:13:28,860 --> 00:13:34,649
back and then tries to log in you just

00:13:31,500 --> 00:13:36,660
have to password verify what has been

00:13:34,649 --> 00:13:40,050
provided by the user and then it returns

00:13:36,660 --> 00:13:45,000
true or false and that's it okay that's

00:13:40,050 --> 00:13:48,089
all nothing to think about it's very

00:13:45,000 --> 00:13:49,980
easy so you have the hash and the

00:13:48,089 --> 00:13:53,430
password verified function is just the

00:13:49,980 --> 00:13:56,130
rivers at the password hash function and

00:13:53,430 --> 00:14:00,029
we just returns true or false okay so

00:13:56,130 --> 00:14:05,190
that's that's very nice because nothing

00:14:00,029 --> 00:14:09,300
there's nothing more to do sure as usual

00:14:05,190 --> 00:14:12,720
PHP let you take hand on the internal

00:14:09,300 --> 00:14:15,690
stuff if you want to but if you don't

00:14:12,720 --> 00:14:21,990
want to you don't have to do anything

00:14:15,690 --> 00:14:23,670
more than this if you want to take if

00:14:21,990 --> 00:14:27,720
you want to take hand to have hand in

00:14:23,670 --> 00:14:31,440
the internal stuff I will let you watch

00:14:27,720 --> 00:14:33,870
the documentation if you want to get

00:14:31,440 --> 00:14:37,560
deeper in this but you can see that the

00:14:33,870 --> 00:14:40,290
password hash has many arguments and you

00:14:37,560 --> 00:14:45,209
have constants which will tell which

00:14:40,290 --> 00:14:48,209
algorithm to use and an array as a third

00:14:45,209 --> 00:14:51,889
parameter which give details about the

00:14:48,209 --> 00:14:54,990
algorithm to use like the CPU cost a

00:14:51,889 --> 00:14:56,850
custom salt if you want to to have a

00:14:54,990 --> 00:14:59,310
custom salt if you don't want it will

00:14:56,850 --> 00:15:02,250
generate one for you and things like

00:14:59,310 --> 00:15:07,620
that so you have options to take hand on

00:15:02,250 --> 00:15:11,550
this okay usually you don't need but if

00:15:07,620 --> 00:15:14,550
you want to you have them just one that

00:15:11,550 --> 00:15:17,060
base field to store your password you

00:15:14,550 --> 00:15:20,190
see it's a it's a string which

00:15:17,060 --> 00:15:23,130
encapsulate all the technical stuff like

00:15:20,190 --> 00:15:26,490
the algorithm used the sword to cost the

00:15:23,130 --> 00:15:27,900
hash itself already stored into into the

00:15:26,490 --> 00:15:31,440
string you don't have to

00:15:27,900 --> 00:15:34,220
to care about about complex stuff

00:15:31,440 --> 00:15:41,880
anymore if you don't just don't want to

00:15:34,220 --> 00:15:45,690
it's like like PHP it's easy just get

00:15:41,880 --> 00:15:48,840
things done and if you want them to be

00:15:45,690 --> 00:15:52,200
done in a specific manner you'd still

00:15:48,840 --> 00:15:56,610
can take your hand on on on this and

00:15:52,200 --> 00:16:00,240
it's it's a quite cool feature which

00:15:56,610 --> 00:16:03,840
seems simple but it's been not that

00:16:00,240 --> 00:16:08,070
simple to add in the language so now

00:16:03,840 --> 00:16:11,220
it's in in 55 if you want to you have a

00:16:08,070 --> 00:16:17,310
custom a PHP based implementation of

00:16:11,220 --> 00:16:19,740
this to backport on 54 and 53 this one

00:16:17,310 --> 00:16:21,630
is sea-based it's integrated in the

00:16:19,740 --> 00:16:26,070
language but if you want to try it with

00:16:21,630 --> 00:16:28,830
the old version which our current

00:16:26,070 --> 00:16:32,370
version like 53 or 54 you can you can

00:16:28,830 --> 00:16:35,310
grab the code on on get up it's a

00:16:32,370 --> 00:16:39,240
php-based library and you can just try

00:16:35,310 --> 00:16:41,820
it's exactly the same API you can just

00:16:39,240 --> 00:16:45,710
try it should be written on the

00:16:41,820 --> 00:16:50,130
documentation if I remember it's been

00:16:45,710 --> 00:16:53,310
okay it's a little bit cut butter no

00:16:50,130 --> 00:16:56,400
worry let's talk about another cool

00:16:53,310 --> 00:17:00,620
feature which is called generators who

00:16:56,400 --> 00:17:04,650
knows about generators in in programming

00:17:00,620 --> 00:17:10,940
no nobody raise your hand no no no yes

00:17:04,650 --> 00:17:15,630
when one person or two generators are

00:17:10,940 --> 00:17:20,250
something which is not a php-based you

00:17:15,630 --> 00:17:24,780
know it's a it's a it's a special manner

00:17:20,250 --> 00:17:28,500
of using iterators and it's implemented

00:17:24,780 --> 00:17:32,310
in languages like Python or Java Script

00:17:28,500 --> 00:17:37,020
or asti sharp or language like that like

00:17:32,310 --> 00:17:39,330
that so perhaps you could go and for

00:17:37,020 --> 00:17:40,760
those language and see how it's been

00:17:39,330 --> 00:17:43,220
implemented

00:17:40,760 --> 00:17:46,730
that you get an ID or if you just don't

00:17:43,220 --> 00:17:51,020
want let's talk about PHP and let's show

00:17:46,730 --> 00:17:57,020
how PHP now integrated generators in the

00:17:51,020 --> 00:17:59,180
new 55 version sure you have a big big

00:17:57,020 --> 00:18:03,710
documentation stuff about this on the

00:17:59,180 --> 00:18:06,890
php.net website so what is a generator a

00:18:03,710 --> 00:18:10,810
generator is something which is which

00:18:06,890 --> 00:18:14,510
should be used if you want to get a

00:18:10,810 --> 00:18:17,450
quick and dirty well not that dirty but

00:18:14,510 --> 00:18:19,100
a quick and dirty I traitor you just

00:18:17,450 --> 00:18:21,380
don't want to implement the iterator

00:18:19,100 --> 00:18:23,900
interface and define the five methods

00:18:21,380 --> 00:18:27,950
you know Karen's next and things like

00:18:23,900 --> 00:18:31,840
that it's good it's nice but for for

00:18:27,950 --> 00:18:36,940
easy stuff and for a quick stuff it's

00:18:31,840 --> 00:18:40,190
it's just a pain to implement iterators

00:18:36,940 --> 00:18:43,370
di tutto I tell to aggregate interface

00:18:40,190 --> 00:18:48,580
sometimes it's a it's just too long and

00:18:43,370 --> 00:18:53,390
too and too bad to do and that's why you

00:18:48,580 --> 00:18:57,410
should use generators about this this is

00:18:53,390 --> 00:19:01,370
a this is an example of generators

00:18:57,410 --> 00:19:05,240
generators I did a new keyword in PHP

00:19:01,370 --> 00:19:09,050
which is good yield okay so if you have

00:19:05,240 --> 00:19:11,540
this word in your PHP nowadays then you

00:19:09,050 --> 00:19:15,220
cannot go to 55 because you you have a

00:19:11,540 --> 00:19:19,670
problem but sure you don't have I think

00:19:15,220 --> 00:19:22,280
la as you can see generators have been

00:19:19,670 --> 00:19:26,000
implemented in a very specific manner in

00:19:22,280 --> 00:19:31,130
PHP in that they are implemented in a

00:19:26,000 --> 00:19:36,560
function which is not a function okay

00:19:31,130 --> 00:19:40,820
it's something crazy now why we did that

00:19:36,560 --> 00:19:45,080
you know PHP we we have a we have a

00:19:40,820 --> 00:19:48,490
contract we have a manner of thinking

00:19:45,080 --> 00:19:51,590
which is do not do not break everything

00:19:48,490 --> 00:19:54,460
when you when you go to the plus one

00:19:51,590 --> 00:19:58,750
version or break a little things so

00:19:54,460 --> 00:20:02,950
we used function to add a traitor's so

00:19:58,750 --> 00:20:05,430
that we don't add so many keywords and

00:20:02,950 --> 00:20:10,000
new structures and use in taxes you know

00:20:05,430 --> 00:20:14,200
complex it's just get what's done and

00:20:10,000 --> 00:20:16,900
add new feature on it and that's what we

00:20:14,200 --> 00:20:19,960
get and that's very cool and very easy

00:20:16,900 --> 00:20:25,030
to use so you have a function and this

00:20:19,960 --> 00:20:27,370
function you get it and as you can see

00:20:25,030 --> 00:20:29,650
it does not return any value it's

00:20:27,370 --> 00:20:31,450
forbidden you cannot use the Rick turn

00:20:29,650 --> 00:20:34,660
key word together with the yield keyword

00:20:31,450 --> 00:20:37,510
it will you will get an error okay you

00:20:34,660 --> 00:20:41,680
get a function and this function you

00:20:37,510 --> 00:20:46,090
yield fields and the yield keyword will

00:20:41,680 --> 00:20:49,360
throw values to the for each loop as you

00:20:46,090 --> 00:20:52,810
can see here so when you when you when

00:20:49,360 --> 00:20:55,390
you have yield cold it means that when

00:20:52,810 --> 00:20:59,380
you are going to iterate over the

00:20:55,390 --> 00:21:01,810
generator it will give you the call as

00:20:59,380 --> 00:21:04,360
the value and then in the second

00:21:01,810 --> 00:21:08,020
iteration you will have a key and a

00:21:04,360 --> 00:21:11,620
value with the same syntax you you

00:21:08,020 --> 00:21:15,670
should be used to the array syntax and

00:21:11,620 --> 00:21:21,880
then it ends okay this is a very easy

00:21:15,670 --> 00:21:25,480
example you can start finding much more

00:21:21,880 --> 00:21:28,360
complex example on the web as PHP 55 is

00:21:25,480 --> 00:21:31,330
now something like five month old and

00:21:28,360 --> 00:21:35,080
people just start using stuff like that

00:21:31,330 --> 00:21:37,510
and doing things which can be very very

00:21:35,080 --> 00:21:42,490
nice very cool so what is a generator

00:21:37,510 --> 00:21:46,300
internally what is dollar gen here it's

00:21:42,490 --> 00:21:49,270
not a function it's not internally we we

00:21:46,300 --> 00:21:53,470
use this as an object okay as you can

00:21:49,270 --> 00:21:57,070
see if I dump the gin valuable here you

00:21:53,470 --> 00:22:02,470
have an object of the generator class

00:21:57,070 --> 00:22:05,650
okay and this object implements itself

00:22:02,470 --> 00:22:07,290
the eye turret or interface okay so you

00:22:05,650 --> 00:22:10,470
can call

00:22:07,290 --> 00:22:13,260
the iterative methods on it like next

00:22:10,470 --> 00:22:15,300
current you have more methods than the

00:22:13,260 --> 00:22:17,910
iterator because it's generator it's

00:22:15,300 --> 00:22:21,120
little bit more complex you can see on

00:22:17,910 --> 00:22:24,900
the documentation this makes you makes

00:22:21,120 --> 00:22:29,460
you think you should be used to that as

00:22:24,900 --> 00:22:32,300
in PHP 5.3 we added a very very cool

00:22:29,460 --> 00:22:37,290
feature which is called closures and

00:22:32,300 --> 00:22:39,300
closures are internally implemented as

00:22:37,290 --> 00:22:42,030
object of the closure class you should

00:22:39,300 --> 00:22:45,200
know that nowadays and it's the same

00:22:42,030 --> 00:22:48,390
that's been done for generators

00:22:45,200 --> 00:22:51,150
internally it's an object if you just

00:22:48,390 --> 00:22:54,720
try to reflection the generator class

00:22:51,150 --> 00:22:58,620
you can see that it's a class which

00:22:54,720 --> 00:23:01,980
implements I iterator okay and like

00:22:58,620 --> 00:23:04,200
closures you cannot use this class and

00:23:01,980 --> 00:23:08,160
this object directly you cannot

00:23:04,200 --> 00:23:11,220
instantiate a generator object ok now

00:23:08,160 --> 00:23:13,980
you can extend the generator class its

00:23:11,220 --> 00:23:17,190
internal like the closure class you

00:23:13,980 --> 00:23:21,440
should know ok if you want to make a

00:23:17,190 --> 00:23:25,380
generator you have to write a function

00:23:21,440 --> 00:23:28,290
with at least one yield keyword inside

00:23:25,380 --> 00:23:31,710
and the compiler will compile your code

00:23:28,290 --> 00:23:35,760
and notice that you have a yield keyword

00:23:31,710 --> 00:23:38,190
in into a function and it will transform

00:23:35,760 --> 00:23:41,430
turn that to a generator internally and

00:23:38,190 --> 00:23:43,500
if you have a yield keyword you just

00:23:41,430 --> 00:23:45,750
don't need and don't have and cannot

00:23:43,500 --> 00:23:48,540
have a return keyword because it's not

00:23:45,750 --> 00:23:55,590
internally into a function it's just a

00:23:48,540 --> 00:23:58,710
generator this this is something new for

00:23:55,590 --> 00:24:02,700
PHP programmers but believe me it's PHP

00:23:58,710 --> 00:24:05,760
so it's about it matter of just hours of

00:24:02,700 --> 00:24:08,460
practicing and you have something which

00:24:05,760 --> 00:24:11,670
is nice and then ideas are are coming

00:24:08,460 --> 00:24:13,830
and and then you you have can do crazy

00:24:11,670 --> 00:24:16,890
stuff with generators generating

00:24:13,830 --> 00:24:19,450
generators themselves and things start

00:24:16,890 --> 00:24:23,110
getting crazy like you could have

00:24:19,450 --> 00:24:25,149
a closure which just returns a closure

00:24:23,110 --> 00:24:27,490
which returns the closure it's the same

00:24:25,149 --> 00:24:30,519
you can do crazy stuff with this anyway

00:24:27,490 --> 00:24:32,320
this is the class rewind valid current

00:24:30,519 --> 00:24:35,980
key next this is the I to return

00:24:32,320 --> 00:24:40,450
interface and then this is used

00:24:35,980 --> 00:24:45,130
internally when you yield then it calls

00:24:40,450 --> 00:24:47,169
send okay it's things like that and fro

00:24:45,130 --> 00:24:52,090
is about throwing exception in

00:24:47,169 --> 00:24:55,299
generators because usually you cannot

00:24:52,090 --> 00:24:57,190
rewind a generator manually you have to

00:24:55,299 --> 00:25:00,820
use for each it's going to throw an

00:24:57,190 --> 00:25:05,590
exception and use this method internally

00:25:00,820 --> 00:25:09,399
and you can as well use it if you want

00:25:05,590 --> 00:25:12,639
roots just more complex and you can see

00:25:09,399 --> 00:25:18,309
examples on the on the documentation

00:25:12,639 --> 00:25:21,309
show I recall it's not a PHP feature PHP

00:25:18,309 --> 00:25:26,019
stuff it's a programming language surf

00:25:21,309 --> 00:25:28,570
okay generator so just try to see how

00:25:26,019 --> 00:25:31,480
other languages implemented that and

00:25:28,570 --> 00:25:37,149
then come back to HP NC oh yes okay it's

00:25:31,480 --> 00:25:39,279
been like that it's it's cool yes we

00:25:37,149 --> 00:25:42,639
talked about generators we talked about

00:25:39,279 --> 00:25:43,809
just talked about throw then when we

00:25:42,639 --> 00:25:46,870
talked about for we talked about

00:25:43,809 --> 00:25:51,039
exceptions and try catch these blocks

00:25:46,870 --> 00:25:54,070
okay you know PHP has no finally keyword

00:25:51,039 --> 00:25:58,809
finally is something really nice you

00:25:54,070 --> 00:26:03,789
have particularly in Java or C++ now

00:25:58,809 --> 00:26:07,929
starting with 55 we added the finally

00:26:03,789 --> 00:26:11,230
keyword it just works like it works in

00:26:07,929 --> 00:26:15,940
any other language there is nothing more

00:26:11,230 --> 00:26:20,590
to say okay it's a it's code that will

00:26:15,940 --> 00:26:23,409
be run anyway whether you stay in the

00:26:20,590 --> 00:26:26,649
tri or whether if you go in any catch

00:26:23,409 --> 00:26:29,679
block it will use the finally block at

00:26:26,649 --> 00:26:32,260
the end okay like you can see on this

00:26:29,679 --> 00:26:38,680
flow shot over there

00:26:32,260 --> 00:26:42,820
so it's gonna use this anyway if it goes

00:26:38,680 --> 00:26:47,590
in try our catch it's been asked for for

00:26:42,820 --> 00:26:50,980
many years and we always answered you

00:26:47,590 --> 00:26:53,980
have other ways to do yes you can do

00:26:50,980 --> 00:26:58,150
with other ways but there are some edge

00:26:53,980 --> 00:27:01,900
cases where if you don't have finally

00:26:58,150 --> 00:27:04,810
you just can't get your stuff done or in

00:27:01,900 --> 00:27:07,480
in adding adding lots of codes

00:27:04,810 --> 00:27:11,410
everywhere with error endless and things

00:27:07,480 --> 00:27:15,010
crazy like that exception handlers so we

00:27:11,410 --> 00:27:18,130
finally added this to the language you

00:27:15,010 --> 00:27:22,930
could use it something like this okay I

00:27:18,130 --> 00:27:25,870
saw PHP a very very easy thing it's just

00:27:22,930 --> 00:27:28,870
a presentation with a my secret

00:27:25,870 --> 00:27:31,450
connection and then if you want to close

00:27:28,870 --> 00:27:34,210
your connection in any way any manner

00:27:31,450 --> 00:27:36,490
having exception having fatally rose or

00:27:34,210 --> 00:27:39,460
anything you can use now the final

00:27:36,490 --> 00:27:44,530
keyword and your code will get executed

00:27:39,460 --> 00:27:48,510
anyway there are some tricks if you use

00:27:44,530 --> 00:27:52,950
things like exit keyword or if you use

00:27:48,510 --> 00:27:56,860
things that I'm sure you don't use like

00:27:52,950 --> 00:27:59,830
go to features or things like that if

00:27:56,860 --> 00:28:03,610
you have tries in two tries in two

00:27:59,830 --> 00:28:06,820
trials with final is everywhere the

00:28:03,610 --> 00:28:10,450
engine just does what should be done if

00:28:06,820 --> 00:28:14,860
you as you can expect if it meets an

00:28:10,450 --> 00:28:18,300
exit keyword it won't run finally block

00:28:14,860 --> 00:28:23,110
anyway because exit is just stopped now

00:28:18,300 --> 00:28:26,740
all those little edge cases are all

00:28:23,110 --> 00:28:30,070
documented on php.net documentation it's

00:28:26,740 --> 00:28:33,280
very very easy to check so I want to

00:28:30,070 --> 00:28:36,130
present I won't show them here but you

00:28:33,280 --> 00:28:39,820
can sure get more more information on

00:28:36,130 --> 00:28:44,840
the documentation finally finally other

00:28:39,820 --> 00:28:48,860
changes no we don't support unicode

00:28:44,840 --> 00:28:52,419
and so you have lots of ways to try to

00:28:48,860 --> 00:28:55,940
support it like mb strings or or the

00:28:52,419 --> 00:29:00,500
internalization extension which you

00:28:55,940 --> 00:29:03,799
perhaps know in 55 it's been massively

00:29:00,500 --> 00:29:07,750
worked on and improved it's like you

00:29:03,799 --> 00:29:12,049
have twice twice the number of classes

00:29:07,750 --> 00:29:16,100
compared to 54 so this extension which

00:29:12,049 --> 00:29:21,740
is used to to handle characters numbers

00:29:16,100 --> 00:29:24,890
and things like that in every country so

00:29:21,740 --> 00:29:28,850
this extension which is really nice in

00:29:24,890 --> 00:29:32,929
53 even nicer in five four in five five

00:29:28,850 --> 00:29:34,669
it's twice big okay so very nice if you

00:29:32,929 --> 00:29:39,440
if you use it know that you will you

00:29:34,669 --> 00:29:44,799
will have a great great new features if

00:29:39,440 --> 00:29:49,510
you use 55 curl has been updated as well

00:29:44,799 --> 00:29:52,039
just classical to to manage the new curl

00:29:49,510 --> 00:29:57,490
implementation new lip curl we don't

00:29:52,039 --> 00:30:00,770
support python less than 2 pi for anyway

00:29:57,490 --> 00:30:05,179
we upgraded some libraries and we added

00:30:00,770 --> 00:30:08,539
some new functions just you should if

00:30:05,179 --> 00:30:10,940
you don't know are a column just go and

00:30:08,539 --> 00:30:17,080
try to see what it does it's very nice

00:30:10,940 --> 00:30:21,320
it's something PHP users tend to write

00:30:17,080 --> 00:30:25,149
10-2 wrote back in PHP itself now it's

00:30:21,320 --> 00:30:29,299
done internally rekelen it's very nice

00:30:25,149 --> 00:30:32,210
process title for CLI api and lots of

00:30:29,299 --> 00:30:39,529
bugs fixes and things like that one

00:30:32,210 --> 00:30:43,880
other changes and sure so generators new

00:30:39,529 --> 00:30:47,390
password API the finally keyword some

00:30:43,880 --> 00:30:51,049
extension has been upgraded and the

00:30:47,390 --> 00:30:53,870
language itself has been upgraded this

00:30:51,049 --> 00:30:56,390
means the manner you write it and it

00:30:53,870 --> 00:30:58,580
executes your code has been little bit

00:30:56,390 --> 00:31:03,220
changed so hero

00:30:58,580 --> 00:31:07,880
the the changes you can expect from 55

00:31:03,220 --> 00:31:10,970
it's a little feature it's been asked

00:31:07,880 --> 00:31:14,419
for four years as well for which now

00:31:10,970 --> 00:31:16,669
supports the lists tractor okay I recall

00:31:14,419 --> 00:31:19,460
you that list is not a function in PHP

00:31:16,669 --> 00:31:22,240
it's a like function but it's not a

00:31:19,460 --> 00:31:25,779
function okay it looks like because it

00:31:22,240 --> 00:31:29,769
parentheses and parameters but it's not

00:31:25,779 --> 00:31:34,130
it's not a function you could not use

00:31:29,769 --> 00:31:38,269
least the return of the list structure

00:31:34,130 --> 00:31:41,720
directly into a for each structure d 455

00:31:38,269 --> 00:31:44,720
so when you had an array of arrays of

00:31:41,720 --> 00:31:49,519
values if you wanted to iterate and get

00:31:44,720 --> 00:31:52,220
the inner the the deepest values into

00:31:49,519 --> 00:31:55,610
the RAS you just could not do it in a

00:31:52,220 --> 00:31:58,159
one line of code you had to you had two

00:31:55,610 --> 00:32:01,070
for each the first array then for every

00:31:58,159 --> 00:32:03,139
inner array you had to list and get the

00:32:01,070 --> 00:32:07,159
values because the list could not be

00:32:03,139 --> 00:32:11,480
used into into the forage structure now

00:32:07,159 --> 00:32:13,490
you can do it in 55 perhaps you will

00:32:11,480 --> 00:32:15,169
never use it but PHP it's always like

00:32:13,490 --> 00:32:19,130
that whether that's the feeling I

00:32:15,169 --> 00:32:22,010
personally had its mmm it should be cool

00:32:19,130 --> 00:32:26,600
if I could do this oh yes PHP supports

00:32:22,010 --> 00:32:29,299
it okay it's when you need it just

00:32:26,600 --> 00:32:32,510
perhaps once per year you have it yeah

00:32:29,299 --> 00:32:35,419
that makes you have a cool language it's

00:32:32,510 --> 00:32:37,639
always been like that show you you don't

00:32:35,419 --> 00:32:42,320
have everything nobody nothing is

00:32:37,639 --> 00:32:46,070
perfect but we try to do things more and

00:32:42,320 --> 00:32:50,320
more useful for users for end users so

00:32:46,070 --> 00:32:53,480
list into for which structures it's okay

00:32:50,320 --> 00:32:56,179
multiple I torito perhaps you've never

00:32:53,480 --> 00:33:01,429
used that and I guess you've never used

00:32:56,179 --> 00:33:04,850
a multiple a traitor ah it's a it's an

00:33:01,429 --> 00:33:06,889
idolater which gets into it too I

00:33:04,850 --> 00:33:09,409
iterators and the first one will be

00:33:06,889 --> 00:33:11,090
aight rated to get the key and the

00:33:09,409 --> 00:33:12,120
second one to get the value when there

00:33:11,090 --> 00:33:17,930
was a problem with

00:33:12,120 --> 00:33:22,860
this it's that behind 55 using for each

00:33:17,930 --> 00:33:25,410
for each something as a key value you

00:33:22,860 --> 00:33:29,310
could have any type in value but you

00:33:25,410 --> 00:33:34,980
could not have a complex type in the key

00:33:29,310 --> 00:33:39,870
okay for each could not get you with

00:33:34,980 --> 00:33:42,000
keys that are arrays or objects it's not

00:33:39,870 --> 00:33:46,190
possible keys not values values you get

00:33:42,000 --> 00:33:49,500
anything you want okay starting with 55

00:33:46,190 --> 00:33:53,540
you have to use a night aerator to to

00:33:49,500 --> 00:33:59,730
return a complex keys and now it works

00:33:53,540 --> 00:34:03,780
before it it just threw something like

00:33:59,730 --> 00:34:06,990
warning a key key value cannot be array

00:34:03,780 --> 00:34:09,900
and for every loop warning warning

00:34:06,990 --> 00:34:14,570
warning p value cannot be right now key

00:34:09,900 --> 00:34:18,420
values this variable can be of any type

00:34:14,570 --> 00:34:20,520
now okay before it could not could just

00:34:18,420 --> 00:34:23,160
be an integer or a string now it can be

00:34:20,520 --> 00:34:25,590
an array or even an object and using

00:34:23,160 --> 00:34:28,830
these with iterators together with

00:34:25,590 --> 00:34:31,700
generators and you can have very complex

00:34:28,830 --> 00:34:34,260
structures which could can look very

00:34:31,700 --> 00:34:37,740
very bad at first sight but which are

00:34:34,260 --> 00:34:39,270
very cleverly cleverly designed so it it

00:34:37,740 --> 00:34:42,180
can be used together with new features

00:34:39,270 --> 00:34:44,880
on it it can be it can be very nice for

00:34:42,180 --> 00:34:49,440
you if you if you need it just once or

00:34:44,880 --> 00:34:54,570
twice it's not very common but now a HP

00:34:49,440 --> 00:35:00,180
550 handles that very nicely what

00:34:54,570 --> 00:35:05,120
changes next or perhaps perhaps you need

00:35:00,180 --> 00:35:08,580
to do that and if you need to do that

00:35:05,120 --> 00:35:12,440
start with 5 4 if I free just could not

00:35:08,580 --> 00:35:15,750
do it now in 55 you can dereference

00:35:12,440 --> 00:35:19,290
constant expression directly okay so if

00:35:15,750 --> 00:35:22,920
you have a string like PHP and you want

00:35:19,290 --> 00:35:24,690
the first character so the second the

00:35:22,920 --> 00:35:25,510
first index of the second character age

00:35:24,690 --> 00:35:28,360
you

00:35:25,510 --> 00:35:31,690
now use the brackets and directly

00:35:28,360 --> 00:35:33,940
extract this like in arrays okay it can

00:35:31,690 --> 00:35:38,290
be done directly it's more concise

00:35:33,940 --> 00:35:42,810
writing use it don't use it I don't know

00:35:38,290 --> 00:35:46,480
it's a anyway now we can do that

00:35:42,810 --> 00:35:49,000
sometimes sometimes I had people saying

00:35:46,480 --> 00:35:52,390
yes you can have I raised you can but

00:35:49,000 --> 00:35:54,610
you cannot get directly so so put this

00:35:52,390 --> 00:35:57,850
in a variable and you get directly on

00:35:54,610 --> 00:36:01,210
the same line keeping it readable a

00:35:57,850 --> 00:36:04,420
little bit now we can do it and it works

00:36:01,210 --> 00:36:07,930
like you can see for any dimension in

00:36:04,420 --> 00:36:12,010
any deepness of the arrays you can you

00:36:07,930 --> 00:36:16,150
can do this well use it don't use it I

00:36:12,010 --> 00:36:20,470
don't know ok same I'll use it don't use

00:36:16,150 --> 00:36:24,280
it boonville function you know we have a

00:36:20,470 --> 00:36:33,100
interval a string Val things like that

00:36:24,280 --> 00:36:36,370
to get to cast special special types now

00:36:33,100 --> 00:36:39,160
you can use a new function which is

00:36:36,370 --> 00:36:43,650
called bull Val why we added it because

00:36:39,160 --> 00:36:47,740
usually we cast ok we just don't use

00:36:43,650 --> 00:36:50,410
functions to transform the types in PHP

00:36:47,740 --> 00:36:53,830
usually usually what we see it's just

00:36:50,410 --> 00:36:57,790
casts its type between parentheses just

00:36:53,830 --> 00:37:02,250
behind a type and it converts if you

00:36:57,790 --> 00:37:04,750
have function nobody uses them but

00:37:02,250 --> 00:37:07,900
functions are useful when you want to

00:37:04,750 --> 00:37:10,180
use them as callbacks and now you can

00:37:07,900 --> 00:37:14,860
use boudoir as callback which will

00:37:10,180 --> 00:37:20,860
transform this array to boolean values

00:37:14,860 --> 00:37:22,720
so like with PHP a trans typing rules so

00:37:20,860 --> 00:37:26,230
you will get something like true true

00:37:22,720 --> 00:37:28,390
false true and then you can turn these

00:37:26,230 --> 00:37:30,730
two integrals and have maps and things

00:37:28,390 --> 00:37:35,820
like that well it's little bit little

00:37:30,730 --> 00:37:40,110
function just to show in these slides

00:37:35,820 --> 00:37:43,370
and haha this is interesting for those

00:37:40,110 --> 00:37:48,390
of you using objects and I guess

00:37:43,370 --> 00:37:51,270
everyone now use objects nowadays we

00:37:48,390 --> 00:37:55,020
added in 5 free something which should

00:37:51,270 --> 00:37:58,650
have been added in 5.0 but has never

00:37:55,020 --> 00:38:01,050
been done but it was ready in two

00:37:58,650 --> 00:38:04,250
thousand four but the contributors

00:38:01,050 --> 00:38:09,180
disagreed on the ways to implement

00:38:04,250 --> 00:38:12,330
namespaces in 5.0 so we added them in

00:38:09,180 --> 00:38:16,680
5.3 and then when you have namespaces

00:38:12,330 --> 00:38:19,980
you have a problem it's that when you

00:38:16,680 --> 00:38:23,850
are into a class which is itself named

00:38:19,980 --> 00:38:28,560
spaced you cannot get the fully

00:38:23,850 --> 00:38:32,670
qualified class name easily okay this is

00:38:28,560 --> 00:38:35,580
very nice to get if you want to use this

00:38:32,670 --> 00:38:39,060
is a concrete useful example when you

00:38:35,580 --> 00:38:43,680
use PHP unit test cases if you want to

00:38:39,060 --> 00:38:48,420
get a mock object of yourself or of your

00:38:43,680 --> 00:38:54,600
own class why not you cannot get back

00:38:48,420 --> 00:38:56,970
the free qualified class name be four

00:38:54,600 --> 00:39:02,730
five five okay you had to write it by

00:38:56,970 --> 00:39:04,560
hand this is a 22 to construct it by

00:39:02,730 --> 00:39:06,870
hand using the underscore underscore

00:39:04,560 --> 00:39:08,670
namespace underscore underscore magic

00:39:06,870 --> 00:39:11,340
constant which gets the current

00:39:08,670 --> 00:39:13,140
namespace then you concatenate with an

00:39:11,340 --> 00:39:16,500
Oscar Oscar class underscore underscore

00:39:13,140 --> 00:39:19,430
and have you get back / or not or should

00:39:16,500 --> 00:39:22,170
I now you have a very very special

00:39:19,430 --> 00:39:25,020
internal constant which has been added

00:39:22,170 --> 00:39:28,110
it's a virtual constant okay which has

00:39:25,020 --> 00:39:33,750
been added to every class this constant

00:39:28,110 --> 00:39:35,640
is itself named class it's not randomly

00:39:33,750 --> 00:39:41,760
chosen it's because it's a reserved

00:39:35,640 --> 00:39:45,360
keyword and you cannot hit against a

00:39:41,760 --> 00:39:46,980
future constant or of use in your class

00:39:45,360 --> 00:39:48,310
because you have you cannot have you

00:39:46,980 --> 00:39:51,580
cannot have a con

00:39:48,310 --> 00:39:53,770
stunt of views which is named class

00:39:51,580 --> 00:39:57,040
because you're going to have a parcero

00:39:53,770 --> 00:40:00,370
that's why we renamed it class it's a

00:39:57,040 --> 00:40:04,990
packaged for sure and every class now

00:40:00,370 --> 00:40:09,550
has a class magical constant which just

00:40:04,990 --> 00:40:11,710
gets you the fully qualified class name

00:40:09,550 --> 00:40:13,570
it's something like understand Oscar

00:40:11,710 --> 00:40:15,460
namespace concatenated with others

00:40:13,570 --> 00:40:18,310
conosco class and of course core ok it's

00:40:15,460 --> 00:40:22,980
magical it's automatic every class has

00:40:18,310 --> 00:40:27,070
this it's a it's good I had this problem

00:40:22,980 --> 00:40:33,030
starting with 53 so now in 55 it's

00:40:27,070 --> 00:40:36,160
solved one very very nice feature

00:40:33,030 --> 00:40:43,240
perhaps the nicest well it depends on

00:40:36,160 --> 00:40:48,400
your point of view is finally we added a

00:40:43,240 --> 00:40:51,220
default oph implementation into PHP

00:40:48,400 --> 00:40:53,950
release okay it's been asked for

00:40:51,220 --> 00:40:58,690
something like perhaps 10 years because

00:40:53,950 --> 00:41:02,470
nowadays you cannot run PHP with no okay

00:40:58,690 --> 00:41:06,280
code cache on a production server it

00:41:02,470 --> 00:41:11,500
just does not work let's let's say it

00:41:06,280 --> 00:41:16,260
okay so I'm starting in two thousand and

00:41:11,500 --> 00:41:22,660
you had many caches which were developed

00:41:16,260 --> 00:41:25,930
like a PC you know it and X sketch or a

00:41:22,660 --> 00:41:28,320
Turk memory manager something dimitris

00:41:25,930 --> 00:41:33,040
to have implemented itself and

00:41:28,320 --> 00:41:36,310
application is based on on this or you

00:41:33,040 --> 00:41:42,880
your vendor oph solution which could be

00:41:36,310 --> 00:41:46,300
just nice but it was a mess PHP you

00:41:42,880 --> 00:41:48,670
download it from php.net you put

00:41:46,300 --> 00:41:50,710
something in prediction it just does not

00:41:48,670 --> 00:41:52,660
work because you have no up code cache

00:41:50,710 --> 00:41:57,120
integrated into the language it for

00:41:52,660 --> 00:42:01,670
something so so strange so we added

00:41:57,120 --> 00:42:06,410
something called OPH okey KH is

00:42:01,670 --> 00:42:12,190
the name of what used to be sent

00:42:06,410 --> 00:42:17,380
optimizepress which is the zen company

00:42:12,190 --> 00:42:21,470
oppa codes cash solution it was closed

00:42:17,380 --> 00:42:24,740
before 55 and then just freed it and

00:42:21,470 --> 00:42:28,339
gave it to the PHP community starting

00:42:24,740 --> 00:42:31,030
with 55 to integrate it directly into

00:42:28,339 --> 00:42:38,210
the language so what to say about this

00:42:31,030 --> 00:42:42,319
first oph is bundled as an extension in

00:42:38,210 --> 00:42:45,319
PHP 55 so you download PHP 55 you

00:42:42,319 --> 00:42:50,950
directly have in the next folder deokee

00:42:45,319 --> 00:42:54,980
catch code it's compiled by default and

00:42:50,950 --> 00:42:59,359
you have to enable it in a PHP dot I now

00:42:54,980 --> 00:43:02,049
it's just a dot s 0 object like you are

00:42:59,359 --> 00:43:06,589
used to a dll if you use windows

00:43:02,049 --> 00:43:10,549
platforms it's in 55 it's implementing

00:43:06,589 --> 00:43:14,240
other as an extension it is planned in

00:43:10,549 --> 00:43:18,140
next PHP version to fully merge its code

00:43:14,240 --> 00:43:21,740
into PHP core so that's not an extension

00:43:18,140 --> 00:43:25,190
anymore it's bundled it's merged like a

00:43:21,740 --> 00:43:29,569
code merge directly into PHP it's not

00:43:25,190 --> 00:43:32,900
very easy to do that's why we started

00:43:29,569 --> 00:43:35,420
releasing it as an extension in 55 and

00:43:32,900 --> 00:43:39,020
it should be probably in the next

00:43:35,420 --> 00:43:42,200
version probably something like 506 it

00:43:39,020 --> 00:43:47,089
should be a directly merged into the

00:43:42,200 --> 00:43:49,970
core so that you you cannot you have no

00:43:47,089 --> 00:43:56,059
extension anymore it's it's clean you

00:43:49,970 --> 00:43:59,119
know it's a it's clean code oph has been

00:43:56,059 --> 00:44:02,089
released as well as an extension in the

00:43:59,119 --> 00:44:07,220
pickle website so that you can download

00:44:02,089 --> 00:44:10,670
it and it supports PHP 5.2 point three

00:44:07,220 --> 00:44:14,180
and point for okay so you can use it

00:44:10,670 --> 00:44:15,410
with PHP 5.2 point three point four now

00:44:14,180 --> 00:44:19,030
adays

00:44:15,410 --> 00:44:22,880
that be warned that any new feature

00:44:19,030 --> 00:44:29,059
which now is added to ok catch won't

00:44:22,880 --> 00:44:31,760
support 53 and 54 okay we we have lots

00:44:29,059 --> 00:44:34,700
of difficulties internally to support

00:44:31,760 --> 00:44:37,869
old PHP version without they are used or

00:44:34,700 --> 00:44:41,119
not it's just a matter of time we are

00:44:37,869 --> 00:44:45,920
dozens of contributors and we have to

00:44:41,119 --> 00:44:50,210
support for PHP version we do it now

00:44:45,920 --> 00:44:53,869
adays 40 p KH but in the future probably

00:44:50,210 --> 00:44:58,670
that support will be dropped for 52 53

00:44:53,869 --> 00:45:04,700
and even 54 but it won't impact you as

00:44:58,670 --> 00:45:09,079
we use it in compile time so if the epic

00:45:04,700 --> 00:45:12,799
code cache extension guess guess is that

00:45:09,079 --> 00:45:16,400
you use let's say five free it will

00:45:12,799 --> 00:45:20,420
disable some features that are now I did

00:45:16,400 --> 00:45:23,779
in the default 55 release okay like some

00:45:20,420 --> 00:45:28,760
optimization passes that won't be back

00:45:23,779 --> 00:45:32,150
part even in in five four anyway the

00:45:28,760 --> 00:45:35,650
cash just works for every PHP version a

00:45:32,150 --> 00:45:41,240
pc is now that it's not really really

00:45:35,650 --> 00:45:47,000
the case but a pc is very hard to

00:45:41,240 --> 00:45:51,650
maintain i will talk about this later it

00:45:47,000 --> 00:45:53,990
won't be a graded anymore in the future

00:45:51,650 --> 00:45:55,910
because it's very hard to maintain and

00:45:53,990 --> 00:45:59,000
now we have a default cash so what's a

00:45:55,910 --> 00:46:01,309
new key catch well just to just to

00:45:59,000 --> 00:46:05,029
recall you what it is it something like

00:46:01,309 --> 00:46:08,510
just prevents PHP code from being

00:46:05,029 --> 00:46:13,400
compiled at every pass so you should use

00:46:08,510 --> 00:46:16,609
this in prediction I i will give the

00:46:13,400 --> 00:46:19,220
further talks about opee code internals

00:46:16,609 --> 00:46:22,069
how it works and it's a try if you want

00:46:19,220 --> 00:46:24,980
to attend this in the future in in in

00:46:22,069 --> 00:46:27,740
the year to come things like that so APC

00:46:24,980 --> 00:46:31,690
is very hard to maintain its it's me

00:46:27,740 --> 00:46:38,030
it's a no you cannot do it it's just a

00:46:31,690 --> 00:46:41,480
Rasmus and two people at least knows how

00:46:38,030 --> 00:46:44,500
to do and they don't work anymore on

00:46:41,480 --> 00:46:49,070
this because I have not no more time so

00:46:44,500 --> 00:46:51,770
54 has been a pc still nowadays is not

00:46:49,070 --> 00:46:58,369
very short hundred percent to work with

00:46:51,770 --> 00:47:00,800
54 it's so complex it's a first from

00:46:58,369 --> 00:47:05,350
historic whole bad low level designs

00:47:00,800 --> 00:47:11,360
anyway now we have a default of cash

00:47:05,350 --> 00:47:16,010
just grab it try it give it a try and if

00:47:11,360 --> 00:47:19,790
it's okay for you just try to if you if

00:47:16,010 --> 00:47:24,100
you can afford these just try to to

00:47:19,790 --> 00:47:26,510
replace a PC biopic a chore in a further

00:47:24,100 --> 00:47:29,960
server upgrade perhaps you should

00:47:26,510 --> 00:47:34,040
consider using okie cage now or if you

00:47:29,960 --> 00:47:36,430
have another cash from user it's just

00:47:34,040 --> 00:47:40,010
okay to use it as well just try not to

00:47:36,430 --> 00:47:43,490
enable to occlude cases that in the same

00:47:40,010 --> 00:47:46,940
PHP because it's going to be it's going

00:47:43,490 --> 00:47:49,369
to be sports and SEC Falls everywhere

00:47:46,940 --> 00:47:53,150
it's going to bug do never never in able

00:47:49,369 --> 00:47:56,630
to he could cash or more in the same PHP

00:47:53,150 --> 00:48:00,890
it's a APC has something that

00:47:56,630 --> 00:48:03,410
application does not have its a user

00:48:00,890 --> 00:48:07,550
cash you know the functions a pc stole a

00:48:03,410 --> 00:48:11,180
pc fetch so we know this and someone a

00:48:07,550 --> 00:48:15,950
contributor just grab a pc threw away

00:48:11,180 --> 00:48:21,109
all the OT code cache and just kept the

00:48:15,950 --> 00:48:27,040
user cash functions and named it a pc

00:48:21,109 --> 00:48:31,760
user LPC you a pc you is a pc without

00:48:27,040 --> 00:48:35,480
the OPA code cash engine so now from my

00:48:31,760 --> 00:48:38,300
experience at rebecca we use Appa cash

00:48:35,480 --> 00:48:41,029
with a pc you as a user cash because we

00:48:38,300 --> 00:48:43,219
use a pc as a user cash used

00:48:41,029 --> 00:48:49,729
use and now we use a PC you as a replace

00:48:43,219 --> 00:48:55,489
and it just just runs nice you can grab

00:48:49,729 --> 00:48:59,089
this on vicar and 0 ph is PHP licensed

00:48:55,489 --> 00:49:05,779
and we'd be upgraded together with PHP

00:48:59,089 --> 00:49:08,779
so when we released five for a pc was

00:49:05,779 --> 00:49:14,599
not compatible with 54 and we had to

00:49:08,779 --> 00:49:18,650
wait years before a pc was something

00:49:14,599 --> 00:49:22,489
like somehow compatible with I for now

00:49:18,650 --> 00:49:24,229
you can grab you can get 55 56 57 we

00:49:22,489 --> 00:49:26,299
have a nappy code cache default

00:49:24,229 --> 00:49:32,150
implementation which just works ok we

00:49:26,299 --> 00:49:34,789
support it like we support PHP a pc is

00:49:32,150 --> 00:49:40,369
still supported but there are very very

00:49:34,789 --> 00:49:44,269
little comets no more comments in a pc a

00:49:40,369 --> 00:49:48,679
little bit now we focus on opkg what

00:49:44,269 --> 00:49:52,150
breaks nothing well yes extension my

00:49:48,679 --> 00:49:56,059
secure has been deprecated finally so

00:49:52,150 --> 00:49:58,640
that's it it froze deprecated messages

00:49:56,059 --> 00:50:01,609
and in 56 it one be added anymore we

00:49:58,640 --> 00:50:03,559
dropped support for old windows we

00:50:01,609 --> 00:50:08,539
dropped support for functions you never

00:50:03,559 --> 00:50:10,549
used and you will never use the brakes

00:50:08,539 --> 00:50:15,289
are very very very very very little

00:50:10,549 --> 00:50:18,559
compared 253 254 okay very little if you

00:50:15,289 --> 00:50:22,279
use just the first one perhaps could

00:50:18,559 --> 00:50:25,459
impact you especially very very I guess

00:50:22,279 --> 00:50:28,400
old codes but that's all that's all for

00:50:25,459 --> 00:50:32,919
me okay I'm minor changes in packing

00:50:28,400 --> 00:50:38,209
back things like that and performances

00:50:32,919 --> 00:50:41,119
what about PHP 55 performances so you

00:50:38,209 --> 00:50:44,779
know perhaps or if you don't know I tell

00:50:41,119 --> 00:50:48,049
you that going from 53 to 54 has been

00:50:44,779 --> 00:50:49,860
the biggest boost in performance PHP has

00:50:48,049 --> 00:50:56,140
never

00:50:49,860 --> 00:50:59,260
had okay so 5 325 for expect on our

00:50:56,140 --> 00:51:03,520
project section server it was twice fast

00:50:59,260 --> 00:51:09,820
so it was 20 servers 10 servers we fight

00:51:03,520 --> 00:51:14,470
for okay 55 we are not wizard no magical

00:51:09,820 --> 00:51:18,100
no magic 55 it's literally the little

00:51:14,470 --> 00:51:21,490
bit faster than 54 but not that 5 free

00:51:18,100 --> 00:51:24,340
gap try free to 54 it was something like

00:51:21,490 --> 00:51:27,040
twenty percent thirty percent or even

00:51:24,340 --> 00:51:32,710
more 50 persons performance not for 55

00:51:27,040 --> 00:51:36,430
so last last slides and then i will ask

00:51:32,710 --> 00:51:42,130
four questions this is something like on

00:51:36,430 --> 00:51:45,400
a platform run phpunit so this is CLI so

00:51:42,130 --> 00:51:50,650
you can see that between 53 and 54 you

00:51:45,400 --> 00:51:53,740
had a less time it's not twice less okay

00:51:50,650 --> 00:51:55,180
but it's just phpunit and CLI really

00:51:53,740 --> 00:51:57,520
depends you know that performance is

00:51:55,180 --> 00:52:00,760
something you cannot really give numbers

00:51:57,520 --> 00:52:03,370
for but those ones are real and 55 you

00:52:00,760 --> 00:52:06,700
see that you have yes this should be

00:52:03,370 --> 00:52:09,370
just a measure a row something like that

00:52:06,700 --> 00:52:11,980
you have a little less time and the same

00:52:09,370 --> 00:52:15,310
memory footprint and same for from 53 to

00:52:11,980 --> 00:52:18,040
54 had very very low memory footprint we

00:52:15,310 --> 00:52:21,250
optimized lots lots lots of things in

00:52:18,040 --> 00:52:25,350
five four in five five it's a little bit

00:52:21,250 --> 00:52:29,590
less so the engine performance test

00:52:25,350 --> 00:52:33,400
which is you cannot see it at the back I

00:52:29,590 --> 00:52:40,210
guess because it's leads a little but

00:52:33,400 --> 00:52:44,290
it's just easy tests like to try to

00:52:40,210 --> 00:52:46,690
fetch get try to try to try is set try

00:52:44,290 --> 00:52:52,450
to fetch a constant from a class try to

00:52:46,690 --> 00:52:56,620
to just create a new object okay just

00:52:52,450 --> 00:53:00,760
let's see create a new object in PHP 5.3

00:52:56,620 --> 00:53:03,400
it took about one second seven for this

00:53:00,760 --> 00:53:09,760
and in the total is 20

00:53:03,400 --> 00:53:12,970
seconds in five four it's fifty percent

00:53:09,760 --> 00:53:17,279
less you can see it was for this one

00:53:12,970 --> 00:53:24,359
just at random it was 1.7 and now it's

00:53:17,279 --> 00:53:29,200
0.8 and in 55 its daily the same you see

00:53:24,359 --> 00:53:32,980
sometimes we use the empty line the

00:53:29,200 --> 00:53:37,839
third line of the second was 0.2 and now

00:53:32,980 --> 00:53:40,450
it's 0.26 and it was 0.25 hmm okay so

00:53:37,839 --> 00:53:44,079
the total time is the same so we have

00:53:40,450 --> 00:53:46,599
nearly the same performance in 55 then

00:53:44,079 --> 00:53:49,150
in five for a little bit more it's a

00:53:46,599 --> 00:53:51,970
little bit better but don't expect a

00:53:49,150 --> 00:53:55,660
huge boost like 5 325 for which was

00:53:51,970 --> 00:54:00,490
something never never done before okay

00:53:55,660 --> 00:54:04,599
but it's still better that said 55 and

00:54:00,490 --> 00:54:08,710
every PHP version adds new features to

00:54:04,599 --> 00:54:12,339
the language together it decreases the

00:54:08,710 --> 00:54:15,760
runtime so we have to keep this in mind

00:54:12,339 --> 00:54:18,250
as well that we add features but we

00:54:15,760 --> 00:54:22,270
don't the engine performance does not

00:54:18,250 --> 00:54:28,920
suffice the opposite okay we try to to

00:54:22,270 --> 00:54:28,920
optimize things a lot okay so thank you

00:54:29,040 --> 00:54:31,100

YouTube URL: https://www.youtube.com/watch?v=KZqnBIHit6M


