Title: The Proxy Pattern in PHP - Marco Pivetta |Â IPC13
Publication date: 2016-06-09
Playlist: International PHP Conference 2013
Description: 
	What is an Object Proxy? This talk explains how virtual proxies, ghost objects and generally "fake" objects can actually help improving the performance and memory impact of your applications while reducing complexity! Marco Pivetta will show some practical examples of usage of proxies, their advantages and disadvantages, and even suggest you how to make your PHP more awesome with well known technologies such as ProxyManager, Zend\ServiceManager or Symfony\DependencyInjection.

More information: https://phpconference.com/en/
Captions: 
	00:00:05,120 --> 00:00:13,019
hi everyone my name is Markham I'm

00:00:10,860 --> 00:00:16,859
Italian I live here in Germany but I do

00:00:13,019 --> 00:00:20,880
the talk on English because of personal

00:00:16,859 --> 00:00:25,140
preference my nickname is a Crimea stats

00:00:20,880 --> 00:00:28,619
my battle name and I work as an

00:00:25,140 --> 00:00:30,240
independent software consultant and for

00:00:28,619 --> 00:00:35,940
the road team Rove team which is

00:00:30,240 --> 00:00:40,110
composed by many many github hardcore

00:00:35,940 --> 00:00:43,649
users we're awesome and we love the

00:00:40,110 --> 00:00:47,539
Marquis tag okay for those who don't

00:00:43,649 --> 00:00:47,539
notice this is the definition of awesome

00:00:50,899 --> 00:00:57,629
all right I'm also active in the

00:00:54,750 --> 00:00:59,820
doctrine team will build the or em so

00:00:57,629 --> 00:01:02,010
what you're going to see is basically

00:00:59,820 --> 00:01:04,379
experienced it comes from patching

00:01:02,010 --> 00:01:09,630
around internal staff in the doctrine or

00:01:04,379 --> 00:01:13,470
em and I also often work on Zen frame or

00:01:09,630 --> 00:01:15,119
two as a contributor have a bunch of

00:01:13,470 --> 00:01:18,020
projects on their work Ramius which is

00:01:15,119 --> 00:01:21,090
my also my twitter and github handle

00:01:18,020 --> 00:01:25,710
press just a bit of projects I'm working

00:01:21,090 --> 00:01:30,210
on I mean as if I didn't have enough

00:01:25,710 --> 00:01:32,970
stuff to do but I do it I do it for fun

00:01:30,210 --> 00:01:37,680
yeah mainly I'm a contractor for a

00:01:32,970 --> 00:01:40,439
sudden so I'm having fun with it that's

00:01:37,680 --> 00:01:43,560
the that's the point ok I'm talking

00:01:40,439 --> 00:01:46,500
about the proxy button in PHP today how

00:01:43,560 --> 00:01:50,220
many people know what the proxy is in

00:01:46,500 --> 00:01:52,470
object oriented programming ok how many

00:01:50,220 --> 00:01:55,350
people here have been using dark Lenore

00:01:52,470 --> 00:01:59,070
am lately ok it's basically the same

00:01:55,350 --> 00:02:01,049
people ok so i hope you will see

00:01:59,070 --> 00:02:03,840
something interesting today there's some

00:02:01,049 --> 00:02:06,509
basics I'm just covering up game so what

00:02:03,840 --> 00:02:09,149
is a proxy a proxy is basically an

00:02:06,509 --> 00:02:12,900
interface it's something with being us

00:02:09,149 --> 00:02:13,770
and something else so this is basically

00:02:12,900 --> 00:02:17,190
copy

00:02:13,770 --> 00:02:19,050
pasted from Wikipedia but become the

00:02:17,190 --> 00:02:22,650
concept is that it is something between

00:02:19,050 --> 00:02:25,140
us and what we call a real subject so in

00:02:22,650 --> 00:02:27,840
networking the proxy is a firewall it is

00:02:25,140 --> 00:02:29,820
proxy a socks proxy in object-oriented

00:02:27,840 --> 00:02:32,400
programming it is actually an object

00:02:29,820 --> 00:02:35,880
which stays between us and something we

00:02:32,400 --> 00:02:40,260
want to act on so the concept is quite

00:02:35,880 --> 00:02:43,020
simple so you see the deer okay and I'm

00:02:40,260 --> 00:02:50,790
actually going to say no it's fake let's

00:02:43,020 --> 00:02:53,970
check testa so the idea is that a proxy

00:02:50,790 --> 00:02:55,610
is an object that looks exactly like the

00:02:53,970 --> 00:02:59,280
object that we want to communicate with

00:02:55,610 --> 00:03:06,480
so we will say that the proxy implements

00:02:59,280 --> 00:03:09,030
a real subject interface a proxy can

00:03:06,480 --> 00:03:10,410
actually completely replace the real

00:03:09,030 --> 00:03:13,740
subject because of the risk of

00:03:10,410 --> 00:03:15,990
substitution principle so whenever you

00:03:13,740 --> 00:03:19,620
want to use an object you don't know if

00:03:15,990 --> 00:03:21,090
it is a proxy or a real object the idea

00:03:19,620 --> 00:03:22,890
is quite simple this is

00:03:21,090 --> 00:03:25,350
object-oriented programming so we have

00:03:22,890 --> 00:03:27,150
an interface and then we have a proxy

00:03:25,350 --> 00:03:29,940
and a real subject and they both

00:03:27,150 --> 00:03:32,790
implement the same interface which means

00:03:29,940 --> 00:03:35,760
that when declined a client object a

00:03:32,790 --> 00:03:39,000
generic client object consumes a subject

00:03:35,760 --> 00:03:41,550
interface so we have a client which

00:03:39,000 --> 00:03:45,930
knows about this subject interface we

00:03:41,550 --> 00:03:47,970
can also have the client consume either

00:03:45,930 --> 00:03:50,880
the real subject which implements the

00:03:47,970 --> 00:03:53,730
subject interface or we can just have a

00:03:50,880 --> 00:03:57,750
proxy replacing it so what we have is a

00:03:53,730 --> 00:03:59,790
client here consuming the proxy it looks

00:03:57,750 --> 00:04:04,380
exactly the same doesn't know the

00:03:59,790 --> 00:04:07,800
difference so in PHP we tend to simplify

00:04:04,380 --> 00:04:10,770
things a bit we're also a bit lazy so

00:04:07,800 --> 00:04:14,130
there's not that many interfaces and we

00:04:10,770 --> 00:04:17,640
can say that a subject proxy extends the

00:04:14,130 --> 00:04:20,400
real subject and that's mostly how we do

00:04:17,640 --> 00:04:22,049
it nowadays expecially would code

00:04:20,400 --> 00:04:27,560
generation but we'll see that later on

00:04:22,049 --> 00:04:30,210
so you still shoot use interfaces really

00:04:27,560 --> 00:04:32,040
so what ok this is basics of

00:04:30,210 --> 00:04:34,050
object-oriented programming so we saw

00:04:32,040 --> 00:04:36,630
that the risk of substitution principle

00:04:34,050 --> 00:04:38,280
can be used to replace an object and

00:04:36,630 --> 00:04:41,510
implementation of an object with another

00:04:38,280 --> 00:04:45,510
what can we actually do with this praxis

00:04:41,510 --> 00:04:48,870
there's some definitions there's some

00:04:45,510 --> 00:04:53,160
here how many have read this book

00:04:48,870 --> 00:04:56,130
actually okay more hands up next time

00:04:53,160 --> 00:04:59,520
please this is really important as well

00:04:56,130 --> 00:05:02,390
as this one there are some definitions

00:04:59,520 --> 00:05:08,790
also in here how many did read this one

00:05:02,390 --> 00:05:11,400
okay even less okay read it it's it's

00:05:08,790 --> 00:05:15,360
important it's it's the almost history

00:05:11,400 --> 00:05:18,180
of computer programming and there's also

00:05:15,360 --> 00:05:21,330
a lot of confusion on the internet about

00:05:18,180 --> 00:05:23,900
what a proxy is there's different

00:05:21,330 --> 00:05:28,380
definitions different kind of usages

00:05:23,900 --> 00:05:30,750
strange names so I just simplified it

00:05:28,380 --> 00:05:33,320
and take it took the ones from the Gang

00:05:30,750 --> 00:05:37,860
of Four which is the second book you saw

00:05:33,320 --> 00:05:40,320
and I'm going to basically go over this

00:05:37,860 --> 00:05:42,480
simply at the simplest implementations

00:05:40,320 --> 00:05:44,310
of proxies so the first one is the

00:05:42,480 --> 00:05:48,360
remote proxy so what you have is an

00:05:44,310 --> 00:05:50,790
object that is in your local address

00:05:48,360 --> 00:05:54,240
space and it looks exactly like for

00:05:50,790 --> 00:05:56,220
example a customer object but in food

00:05:54,240 --> 00:05:58,230
what happens is that it is an object we

00:05:56,220 --> 00:06:01,440
in a completely different part of your

00:05:58,230 --> 00:06:03,720
system so maybe a different server a

00:06:01,440 --> 00:06:05,940
different process you don't know

00:06:03,720 --> 00:06:09,540
basically it is something that

00:06:05,940 --> 00:06:12,150
interfaces to something remote we have

00:06:09,540 --> 00:06:14,850
virtual proxy which is a kind of proxy

00:06:12,150 --> 00:06:18,390
that allows lazy loading and allows us

00:06:14,850 --> 00:06:20,610
to work with very very heavy objects a

00:06:18,390 --> 00:06:22,920
protection proxy which is basically what

00:06:20,610 --> 00:06:28,920
a firewall does it is an object that

00:06:22,920 --> 00:06:33,300
stays up we lost Mike no okay a

00:06:28,920 --> 00:06:36,590
protection proxy which basically allows

00:06:33,300 --> 00:06:39,960
us to filter access to an API

00:06:36,590 --> 00:06:41,110
transparently so exactly like a firewall

00:06:39,960 --> 00:06:45,130
just in object oriented

00:06:41,110 --> 00:06:48,310
programming and a smart reference smart

00:06:45,130 --> 00:06:49,810
reference which is a concept which is

00:06:48,310 --> 00:06:52,750
very useful in aspect-oriented

00:06:49,810 --> 00:06:55,330
programming event management and so on

00:06:52,750 --> 00:07:02,890
because it allows us to do logic when

00:06:55,330 --> 00:07:07,150
stuff happens um so what okay fancy

00:07:02,890 --> 00:07:08,950
terms and a lot of confusion so far

00:07:07,150 --> 00:07:12,280
because we don't know what we can do

00:07:08,950 --> 00:07:14,140
with this so let's get more practical

00:07:12,280 --> 00:07:18,130
and see how we actually implement those

00:07:14,140 --> 00:07:20,500
in PHP let's see the remote proxy I'm

00:07:18,130 --> 00:07:25,000
going to go in order so what we have is

00:07:20,500 --> 00:07:28,560
just a real subject then I just picture

00:07:25,000 --> 00:07:31,630
here at the intertubes internet and then

00:07:28,560 --> 00:07:33,340
we have a proxy object what happens is

00:07:31,630 --> 00:07:36,460
that we have an object that looks

00:07:33,340 --> 00:07:40,390
exactly like this one but instead it

00:07:36,460 --> 00:07:43,750
consumes a client this is basically a

00:07:40,390 --> 00:07:45,910
remote adapter which communicates with a

00:07:43,750 --> 00:07:50,980
server component which has access then

00:07:45,910 --> 00:07:55,330
to the real data so that maybe if you're

00:07:50,980 --> 00:07:57,220
unlucky sup okay but basically it can be

00:07:55,330 --> 00:07:58,750
anything so you basically have this

00:07:57,220 --> 00:08:01,660
object communicating through these

00:07:58,750 --> 00:08:05,140
adapters and retrieving the data you

00:08:01,660 --> 00:08:07,750
want to work with um let's make a simple

00:08:05,140 --> 00:08:09,880
example with a tweet we have a tweet

00:08:07,750 --> 00:08:14,530
object and this sweet object is very

00:08:09,880 --> 00:08:18,220
simple testable it's rattle seem rather

00:08:14,530 --> 00:08:19,870
simple to use instantiate and so on so

00:08:18,220 --> 00:08:22,480
the tweet gets instantiated with the

00:08:19,870 --> 00:08:24,760
data array data array gets stored

00:08:22,480 --> 00:08:27,630
locally and then when we call the get

00:08:24,760 --> 00:08:31,060
text matter that method basically

00:08:27,630 --> 00:08:36,250
retrieves us a key in the data array of

00:08:31,060 --> 00:08:38,470
this object we don't want to retrieve

00:08:36,250 --> 00:08:42,190
one thousand tweets every time

00:08:38,470 --> 00:08:44,500
especially if we want to like just have

00:08:42,190 --> 00:08:46,510
a list of identifiers soft wheat so what

00:08:44,500 --> 00:08:49,800
we can do is implementing a proxy around

00:08:46,510 --> 00:08:52,900
it proxy which is a second object a

00:08:49,800 --> 00:08:54,700
treat proxy which extends the tweet

00:08:52,900 --> 00:08:55,900
that's very important

00:08:54,700 --> 00:08:58,750
that's what allows the risk of

00:08:55,900 --> 00:09:01,140
substitution principle to work and what

00:08:58,750 --> 00:09:04,150
we do is changing the constructor

00:09:01,140 --> 00:09:05,500
because well you have to do the

00:09:04,150 --> 00:09:08,410
assumption that the constructor isn't

00:09:05,500 --> 00:09:09,970
part of the interface but constructors

00:09:08,410 --> 00:09:13,800
being part of the interface is an

00:09:09,970 --> 00:09:17,050
anti-pattern anyway so don't do that and

00:09:13,800 --> 00:09:20,260
we pass in an API object an identifier

00:09:17,050 --> 00:09:23,410
of the tweet and then the get text is

00:09:20,260 --> 00:09:26,110
completely different but communicates in

00:09:23,410 --> 00:09:29,470
the same way so when we call get tweet

00:09:26,110 --> 00:09:32,890
text sorry when we call get tweet the

00:09:29,470 --> 00:09:35,920
API object is asked for a tweet text for

00:09:32,890 --> 00:09:38,080
this ID and the data is fetched through

00:09:35,920 --> 00:09:40,030
the internets basically that's very

00:09:38,080 --> 00:09:42,220
useful if you for example one to load

00:09:40,030 --> 00:09:43,990
videos and so on because you don't want

00:09:42,220 --> 00:09:46,450
to store all the videos local in memory

00:09:43,990 --> 00:09:48,820
you just want to fetch them from youtube

00:09:46,450 --> 00:09:52,950
if you're doing some really nasty stuff

00:09:48,820 --> 00:09:57,220
and basically load them on demand and

00:09:52,950 --> 00:09:59,770
how to use that so the normal tweet just

00:09:57,220 --> 00:10:02,470
gets instantiated with the data and then

00:09:59,770 --> 00:10:04,690
you can call it right away then for the

00:10:02,470 --> 00:10:07,290
proxy you have to build some kind of

00:10:04,690 --> 00:10:10,210
Twitter API here I don't know what it is

00:10:07,290 --> 00:10:14,950
library of preference then I'm building

00:10:10,210 --> 00:10:17,140
a tweet proxy and passing in the the API

00:10:14,950 --> 00:10:19,690
object and identifiers and then I can

00:10:17,140 --> 00:10:23,620
called get tweet so that's pretty

00:10:19,690 --> 00:10:25,960
straightforward so there's some pros and

00:10:23,620 --> 00:10:29,440
cons song about this the first one is

00:10:25,960 --> 00:10:31,810
that you can share object across

00:10:29,440 --> 00:10:34,510
multiple systems it may be a process

00:10:31,810 --> 00:10:36,760
maybe accounts because it's really hard

00:10:34,510 --> 00:10:39,550
to keep data consistency but nowadays

00:10:36,760 --> 00:10:43,300
we're really moving towards api api

00:10:39,550 --> 00:10:45,220
driven architectures and it is really

00:10:43,300 --> 00:10:46,990
important to build smaller atomic

00:10:45,220 --> 00:10:49,540
systems that do smaller task and

00:10:46,990 --> 00:10:52,390
communicate with with each other through

00:10:49,540 --> 00:10:54,790
api's to remote api's you don't have

00:10:52,390 --> 00:10:57,100
memory usage locally that's really

00:10:54,790 --> 00:10:59,620
really really relevant if you want to

00:10:57,100 --> 00:11:04,350
fetch a YouTube video and you don't have

00:10:59,620 --> 00:11:06,480
it on your drive or whatever big images

00:11:04,350 --> 00:11:09,240
um

00:11:06,480 --> 00:11:11,490
and it can work as an adapter for a

00:11:09,240 --> 00:11:14,339
completely different object somewhere so

00:11:11,490 --> 00:11:18,269
if you if you have bad luck and you have

00:11:14,339 --> 00:11:22,500
to work with sap which is my unlucky

00:11:18,269 --> 00:11:24,180
example of choice you just have the

00:11:22,500 --> 00:11:26,310
choice of building a remote object

00:11:24,180 --> 00:11:29,339
basing it on some soap communication

00:11:26,310 --> 00:11:31,980
channel and then you can basically build

00:11:29,339 --> 00:11:35,010
your object in your local space with the

00:11:31,980 --> 00:11:36,930
interface you want use the real data

00:11:35,010 --> 00:11:40,260
with the real object usually remote

00:11:36,930 --> 00:11:42,570
remote data with the proxy object and

00:11:40,260 --> 00:11:45,990
then you have a testable implementation

00:11:42,570 --> 00:11:49,740
both for remote API and from the local

00:11:45,990 --> 00:11:52,769
140 local one so it is more complex to

00:11:49,740 --> 00:11:55,980
stop it is not easy to set up you need

00:11:52,769 --> 00:11:59,670
to basically design the proxy by hand

00:11:55,980 --> 00:12:02,360
and obviously it fails as soon as the

00:11:59,670 --> 00:12:04,980
adapter fails the internet went out

00:12:02,360 --> 00:12:07,230
current went out somewhere on the other

00:12:04,980 --> 00:12:10,260
side of the planet the other pressure

00:12:07,230 --> 00:12:16,740
process crashed and so on and it is slow

00:12:10,260 --> 00:12:19,290
of course so the other thing that

00:12:16,740 --> 00:12:22,050
practised soph and that we had already

00:12:19,290 --> 00:12:25,079
in this example talking about YouTube

00:12:22,050 --> 00:12:27,449
videos is lazy loading lazy loading is

00:12:25,079 --> 00:12:32,130
for very expensive objects for example

00:12:27,449 --> 00:12:34,319
database connections file hand refs very

00:12:32,130 --> 00:12:37,639
large objects that need a lot of memory

00:12:34,319 --> 00:12:40,769
and that you don't need all the time and

00:12:37,639 --> 00:12:42,329
for example hashes encryption and so on

00:12:40,769 --> 00:12:44,940
you don't want to compute the hash all

00:12:42,329 --> 00:12:47,220
the time you may have the hash object

00:12:44,940 --> 00:12:48,569
there and you compute it really just

00:12:47,220 --> 00:12:51,149
when needed because a hash may be

00:12:48,569 --> 00:12:53,690
designed to take one second of

00:12:51,149 --> 00:12:56,579
computational power of your system and

00:12:53,690 --> 00:12:58,380
this is a pattern this is not a proxy so

00:12:56,579 --> 00:13:04,079
we're seeing a proxy that solves this

00:12:58,380 --> 00:13:06,660
and first sorry first let's go to the to

00:13:04,079 --> 00:13:09,329
the actual example what we could I

00:13:06,660 --> 00:13:13,589
assume everybody has done something like

00:13:09,329 --> 00:13:16,709
this someone maybe when you were doing

00:13:13,589 --> 00:13:20,130
like the do operations what i'm doing

00:13:16,709 --> 00:13:21,930
here is very similar to the tweet

00:13:20,130 --> 00:13:23,730
what we have is a customer object i'm

00:13:21,930 --> 00:13:28,020
building the customer object with the DB

00:13:23,730 --> 00:13:30,060
connection passing in the ID is the same

00:13:28,020 --> 00:13:34,170
as the remote object in this case and

00:13:30,060 --> 00:13:37,290
what I do is calling an init method

00:13:34,170 --> 00:13:40,740
whenever I call public API on the object

00:13:37,290 --> 00:13:43,890
so what happens is that my object gets

00:13:40,740 --> 00:13:47,460
initialized with data only at the first

00:13:43,890 --> 00:13:51,210
call to any of its public API method so

00:13:47,460 --> 00:13:53,850
that's useful to avoid a lot of input

00:13:51,210 --> 00:13:56,130
output operations but that's really

00:13:53,850 --> 00:13:59,250
nasty because now we have a customer

00:13:56,130 --> 00:14:02,160
objects which represents data about the

00:13:59,250 --> 00:14:04,770
customer and what does the customer

00:14:02,160 --> 00:14:07,610
object have to do with the database does

00:14:04,770 --> 00:14:10,680
the customer know about the database

00:14:07,610 --> 00:14:13,590
okay so there are some problems we now

00:14:10,680 --> 00:14:17,520
have logic which is regarding

00:14:13,590 --> 00:14:21,060
instantiation logic the instantiation

00:14:17,520 --> 00:14:25,500
problem mix it with the logic of our own

00:14:21,060 --> 00:14:27,920
data um we have dependency to a DB

00:14:25,500 --> 00:14:30,410
connection within within the data object

00:14:27,920 --> 00:14:35,430
that's like basically what active record

00:14:30,410 --> 00:14:37,620
style or am stew where you have to

00:14:35,430 --> 00:14:40,140
extend some super class object which

00:14:37,620 --> 00:14:42,020
knows everything about the database with

00:14:40,140 --> 00:14:45,230
some static magic or something like that

00:14:42,020 --> 00:14:49,920
really nasty stuff in my opinion at last

00:14:45,230 --> 00:14:51,720
and it's not really nice to read you

00:14:49,920 --> 00:14:54,780
don't have all these methods with the

00:14:51,720 --> 00:14:57,120
init method in it and you have to

00:14:54,780 --> 00:14:58,620
remember that you have to call the init

00:14:57,120 --> 00:15:02,010
method and when you don't do that

00:14:58,620 --> 00:15:04,080
something explodes and goes wild it is

00:15:02,010 --> 00:15:07,170
harder to test now I have to market the

00:15:04,080 --> 00:15:11,610
B connection object to just test a user

00:15:07,170 --> 00:15:13,080
object a customer object so there's a

00:15:11,610 --> 00:15:18,240
solution to that and it is basically

00:15:13,080 --> 00:15:20,550
splitting it into two objects there's

00:15:18,240 --> 00:15:23,130
two solutions to this problem one is the

00:15:20,550 --> 00:15:25,680
virtual proxy virtual proxy which is

00:15:23,130 --> 00:15:28,950
basically a wrapper around a real

00:15:25,680 --> 00:15:33,300
instance of this subject again we are

00:15:28,950 --> 00:15:33,930
calling in this real subject and then we

00:15:33,300 --> 00:15:36,060
have a go

00:15:33,930 --> 00:15:38,640
object ghost object which is much more

00:15:36,060 --> 00:15:42,690
complicated and involves some serious

00:15:38,640 --> 00:15:46,110
magic um let's go with virtual proxy

00:15:42,690 --> 00:15:48,779
first vertel proxy is basically a rapper

00:15:46,110 --> 00:15:51,570
acid so now I'm building an image object

00:15:48,779 --> 00:15:54,510
which is a bit simpler mmm what I do is

00:15:51,570 --> 00:15:57,540
building this image object with the path

00:15:54,510 --> 00:16:00,839
to an image and then I'm loading the

00:15:57,540 --> 00:16:03,300
image directly as a resource here so

00:16:00,839 --> 00:16:06,480
this image is a resource I'm actually

00:16:03,300 --> 00:16:09,330
not aware if the GD library loads it all

00:16:06,480 --> 00:16:11,160
in memory but it should and then I have

00:16:09,330 --> 00:16:15,660
a good size method and this gets size

00:16:11,160 --> 00:16:18,480
method simply cause that's some calls to

00:16:15,660 --> 00:16:21,810
get me the width and the height of my

00:16:18,480 --> 00:16:24,600
image and this takes a lot of memory for

00:16:21,810 --> 00:16:27,690
every image that I create I basically

00:16:24,600 --> 00:16:30,779
load all the imaging memory what we do

00:16:27,690 --> 00:16:33,990
is creating a second object which is an

00:16:30,779 --> 00:16:36,740
image vehicle proxy which extends

00:16:33,990 --> 00:16:39,209
against again in the image extending or

00:16:36,740 --> 00:16:42,180
basically having the same type is very

00:16:39,209 --> 00:16:45,330
important to keep it in mind what I do

00:16:42,180 --> 00:16:47,880
is rewriting the constructor and what

00:16:45,330 --> 00:16:50,330
I'm doing is not loading the image

00:16:47,880 --> 00:16:52,680
directly but keeping just the

00:16:50,330 --> 00:16:56,130
constructor parameters in memory and

00:16:52,680 --> 00:16:59,900
what I do is implementing the image the

00:16:56,130 --> 00:17:03,510
init method in this object and then here

00:16:59,900 --> 00:17:06,030
instantiating the real image so now what

00:17:03,510 --> 00:17:09,569
we have is two classes one is just here

00:17:06,030 --> 00:17:12,120
for the instantiation logic so one has

00:17:09,569 --> 00:17:14,660
justice in it mattered and overrides all

00:17:12,120 --> 00:17:17,100
the methods of these two per class and

00:17:14,660 --> 00:17:18,959
the other one is just about the data so

00:17:17,100 --> 00:17:21,300
now we test two kinds of logic

00:17:18,959 --> 00:17:23,670
completely different in a completely

00:17:21,300 --> 00:17:26,520
different way and completely insulated

00:17:23,670 --> 00:17:28,230
problems so this solves just one problem

00:17:26,520 --> 00:17:33,059
the other one solves the other problem

00:17:28,230 --> 00:17:35,340
that's good so what we get is a lot of

00:17:33,059 --> 00:17:38,340
improvement in memory consumption so

00:17:35,340 --> 00:17:40,620
when we build an image proxy I just made

00:17:38,340 --> 00:17:42,740
up some some numbers here okay I don't

00:17:40,620 --> 00:17:45,570
have an example what we do is basically

00:17:42,740 --> 00:17:47,730
building an image building another image

00:17:45,570 --> 00:17:50,340
proxy another image proxy and

00:17:47,730 --> 00:17:53,190
American assumption stays pretty much

00:17:50,340 --> 00:17:56,010
the same okay there's just the overhead

00:17:53,190 --> 00:17:59,669
of the strings and what happens is then

00:17:56,010 --> 00:18:02,820
that as soon as I call the image get

00:17:59,669 --> 00:18:05,820
sighs methods then the proxies actually

00:18:02,820 --> 00:18:09,270
needs to initialize themselves and you

00:18:05,820 --> 00:18:13,110
get the actual memory and able to output

00:18:09,270 --> 00:18:16,710
operations so there's some pros and cons

00:18:13,110 --> 00:18:19,200
about this but the first brush is that

00:18:16,710 --> 00:18:20,760
we now have a dedicated object which

00:18:19,200 --> 00:18:23,850
just solves the problem of

00:18:20,760 --> 00:18:26,429
initialization and it doesn't get in the

00:18:23,850 --> 00:18:33,480
way of my actual logic that I tested

00:18:26,429 --> 00:18:35,910
before it has a better performance

00:18:33,480 --> 00:18:40,230
impact we now have input output

00:18:35,910 --> 00:18:42,030
operations only on demand it doesn't

00:18:40,230 --> 00:18:44,000
have that much overhead we have just the

00:18:42,030 --> 00:18:47,309
overhead of a second object in memory

00:18:44,000 --> 00:18:51,059
and we have the constructor parameters

00:18:47,309 --> 00:18:53,490
in memory so we have to keep those and

00:18:51,059 --> 00:18:56,070
it is simply quite simple to implement

00:18:53,490 --> 00:18:58,260
you can write it yourself and it is

00:18:56,070 --> 00:19:01,260
better looking than the previous logic

00:18:58,260 --> 00:19:04,049
but it is not really optimal if you have

00:19:01,260 --> 00:19:06,179
like a table of items and you want to

00:19:04,049 --> 00:19:09,270
load them all and have all the data

00:19:06,179 --> 00:19:12,390
about all the objects and of course lazy

00:19:09,270 --> 00:19:15,059
loading means lazy failing which means

00:19:12,390 --> 00:19:17,070
that when you load a set of 100 proxies

00:19:15,059 --> 00:19:20,429
and then one of the images is missing

00:19:17,070 --> 00:19:23,100
you get an exception I'm just calling

00:19:20,429 --> 00:19:26,250
yet sighs on an object and I get an

00:19:23,100 --> 00:19:31,350
exception that's strange I wouldn't

00:19:26,250 --> 00:19:34,549
expect that and there's a minor problem

00:19:31,350 --> 00:19:37,740
which is that the real subject and the

00:19:34,549 --> 00:19:39,510
subject proxy are not the same object so

00:19:37,740 --> 00:19:42,860
if you implement something like fluent

00:19:39,510 --> 00:19:46,410
interfaces you will have a problem so we

00:19:42,860 --> 00:19:49,230
will maybe have comparisons where two

00:19:46,410 --> 00:19:51,990
objects which represent the same object

00:19:49,230 --> 00:19:54,480
from a lot from a logical perspective I

00:19:51,990 --> 00:19:58,620
actually different so the identity

00:19:54,480 --> 00:20:01,049
operation is broken that's where the

00:19:58,620 --> 00:20:01,850
ghost object comes in so the ghost

00:20:01,049 --> 00:20:04,740
object

00:20:01,850 --> 00:20:09,540
is basically the same as the proxy

00:20:04,740 --> 00:20:14,400
virtual proxy what it does is defining a

00:20:09,540 --> 00:20:16,860
a copy of all the properties of the real

00:20:14,400 --> 00:20:21,410
instance but all the properties are

00:20:16,860 --> 00:20:26,190
basically now they're unavailable and

00:20:21,410 --> 00:20:28,560
any access to any public API of the

00:20:26,190 --> 00:20:31,860
object causes initialization of the

00:20:28,560 --> 00:20:34,830
object so what happens is that we don't

00:20:31,860 --> 00:20:37,410
have a rapid instance anymore so we

00:20:34,830 --> 00:20:40,560
can't break the object by for example

00:20:37,410 --> 00:20:44,700
implementing affluent interface this is

00:20:40,560 --> 00:20:47,670
what the doctrine proxies do which is by

00:20:44,700 --> 00:20:51,540
design required to do so I'm because

00:20:47,670 --> 00:20:53,370
otherwise did your and would explode not

00:20:51,540 --> 00:20:56,880
understanding which object is the real

00:20:53,370 --> 00:20:59,700
one and you can maybe check this library

00:20:56,880 --> 00:21:01,920
out to see how we actually do it because

00:20:59,700 --> 00:21:06,230
it's fairly simple code we just have a

00:21:01,920 --> 00:21:09,000
template on how to generate a proxy

00:21:06,230 --> 00:21:12,360
let's make a simpler simplified example

00:21:09,000 --> 00:21:14,970
of a ghost object and picking the image

00:21:12,360 --> 00:21:17,460
again what happens is that again I'm

00:21:14,970 --> 00:21:19,680
just storing the path with the

00:21:17,460 --> 00:21:23,510
constructor I now have another property

00:21:19,680 --> 00:21:29,930
which is initialized equal falls and

00:21:23,510 --> 00:21:33,720
what I do in the init method is actually

00:21:29,930 --> 00:21:36,150
creating a new image so I'm really

00:21:33,720 --> 00:21:38,700
calling a constructor and then I'm

00:21:36,150 --> 00:21:41,430
copying localizing all the properties my

00:21:38,700 --> 00:21:43,470
current object so now I don't have a

00:21:41,430 --> 00:21:45,630
second instance this one gets garbage

00:21:43,470 --> 00:21:48,660
collected immediately assuming that you

00:21:45,630 --> 00:21:53,570
don't do any static mass here okay

00:21:48,660 --> 00:21:58,020
that's up to you being having a clean

00:21:53,570 --> 00:22:00,540
logic about the instantiation so this is

00:21:58,020 --> 00:22:04,740
very tricky and this is not actually how

00:22:00,540 --> 00:22:06,660
we do it but how we do it is like at

00:22:04,740 --> 00:22:08,580
those on lines of code they don't fit

00:22:06,660 --> 00:22:10,290
here and this pattern as to explain

00:22:08,580 --> 00:22:12,900
especially with the reflection API in

00:22:10,290 --> 00:22:15,739
the middle so there's some pros and cons

00:22:12,900 --> 00:22:18,389
the pros and cons are basically

00:22:15,739 --> 00:22:22,049
the same of the virtual proxy what we

00:22:18,389 --> 00:22:24,989
get here is the fact that we have the

00:22:22,049 --> 00:22:27,869
real instance being actually de proxy so

00:22:24,989 --> 00:22:31,289
we now don't call methods on a second

00:22:27,869 --> 00:22:34,259
instance but we call we call parent

00:22:31,289 --> 00:22:37,499
logic we call logic on the same instance

00:22:34,259 --> 00:22:42,570
so the identity operations and the hash

00:22:37,499 --> 00:22:45,239
of the object they stay the same again

00:22:42,570 --> 00:22:48,509
it solves all the other problems of the

00:22:45,239 --> 00:22:50,549
vertical proxy and has always the same

00:22:48,509 --> 00:22:52,529
problems it is a bit harder to implement

00:22:50,549 --> 00:22:56,509
and the constructor logic has to be

00:22:52,529 --> 00:22:59,489
actually solved via reflection and

00:22:56,509 --> 00:23:03,450
there's this minor advantage that we

00:22:59,489 --> 00:23:06,359
have less objects in memory so if we if

00:23:03,450 --> 00:23:08,369
you want to D talk by Julian this

00:23:06,359 --> 00:23:11,369
morning there's less chances that you

00:23:08,369 --> 00:23:16,139
have a memory leak in here I think it

00:23:11,369 --> 00:23:19,289
was ice yesterday so same advantages and

00:23:16,139 --> 00:23:22,710
disadvantages same lazy failures but it

00:23:19,289 --> 00:23:26,850
is actually much more safe to use much

00:23:22,710 --> 00:23:31,700
harder to implement the protection proxy

00:23:26,850 --> 00:23:35,460
which is a quite simple proxy type and

00:23:31,700 --> 00:23:37,980
it helps when you want to filter access

00:23:35,460 --> 00:23:40,049
to an API so you have an API already

00:23:37,980 --> 00:23:41,789
wrote it you already wrote your objects

00:23:40,049 --> 00:23:45,059
your application and now suddenly

00:23:41,789 --> 00:23:47,639
someone abuses some method call and you

00:23:45,059 --> 00:23:51,450
want to defend against that call it's

00:23:47,639 --> 00:23:54,600
like RM minus RF asterisk okay you don't

00:23:51,450 --> 00:23:58,409
want people to call that or particular

00:23:54,600 --> 00:24:01,619
people with certain roles what happens

00:23:58,409 --> 00:24:05,249
is that you then build this decorator

00:24:01,619 --> 00:24:08,279
around the real subject and you

00:24:05,249 --> 00:24:11,190
basically apply the same logic that we

00:24:08,279 --> 00:24:13,619
had before and you add protection to the

00:24:11,190 --> 00:24:15,299
API so what we do here is wrapping a

00:24:13,619 --> 00:24:18,269
real instance of the object we are not

00:24:15,299 --> 00:24:20,340
lazy loading it again now the API object

00:24:18,269 --> 00:24:24,450
is actually the one passed to the proxy

00:24:20,340 --> 00:24:26,549
which extends the API object and what we

00:24:24,450 --> 00:24:27,950
do is overriding all the methods that we

00:24:26,549 --> 00:24:30,919
want to protect

00:24:27,950 --> 00:24:33,860
then calling some protection logic and

00:24:30,919 --> 00:24:36,380
then proxying the call to the rapid

00:24:33,860 --> 00:24:38,960
object so we have again the problems

00:24:36,380 --> 00:24:42,740
about identity and so on but now we can

00:24:38,960 --> 00:24:45,950
stop people from like calling more than

00:24:42,740 --> 00:24:48,440
they are allowed to and that's useful

00:24:45,950 --> 00:24:52,039
when you want to separate the logic

00:24:48,440 --> 00:24:54,950
about role access control from actually

00:24:52,039 --> 00:24:56,870
the logic of your objects so you now

00:24:54,950 --> 00:25:02,000
code your object and worry about

00:24:56,870 --> 00:25:04,970
limiting access after that um how you

00:25:02,000 --> 00:25:06,889
you would use it so what i'm doing here

00:25:04,970 --> 00:25:10,399
is building the api protection proxy

00:25:06,889 --> 00:25:13,340
with a real api passed in and then i'm

00:25:10,399 --> 00:25:19,210
passing a limit of 50 limit of 50 which

00:25:13,340 --> 00:25:21,889
gets past here as a private property and

00:25:19,210 --> 00:25:25,039
then i'm calling this method in a loop

00:25:21,889 --> 00:25:31,429
and someone is just going to puke and

00:25:25,039 --> 00:25:33,289
say now stop I don't want you so um the

00:25:31,429 --> 00:25:35,899
advantage is that now you can code your

00:25:33,289 --> 00:25:38,360
API your objects your logic and don't

00:25:35,899 --> 00:25:40,760
worry about access protection that comes

00:25:38,360 --> 00:25:44,090
later on the disadvantage is that now

00:25:40,760 --> 00:25:45,710
your objects are basically your proxies

00:25:44,090 --> 00:25:48,019
are modifying the behavior of your

00:25:45,710 --> 00:25:50,630
object so you may have an exception type

00:25:48,019 --> 00:25:52,970
that you don't expect the protection x5

00:25:50,630 --> 00:25:56,090
exception but that's that's acceptable

00:25:52,970 --> 00:25:58,789
because we are talking about security so

00:25:56,090 --> 00:26:01,070
we are basically closing out another

00:25:58,789 --> 00:26:03,049
system what happens to that system is

00:26:01,070 --> 00:26:08,090
not our problem our first problem is

00:26:03,049 --> 00:26:10,639
just defending our core logic um these

00:26:08,090 --> 00:26:15,289
smart reference is another proxy type

00:26:10,639 --> 00:26:18,529
that I want to talk about and it is

00:26:15,289 --> 00:26:21,889
basically a method of applying more

00:26:18,529 --> 00:26:26,269
logic as soon as some methods are called

00:26:21,889 --> 00:26:28,309
so it is basically a decorator but the

00:26:26,269 --> 00:26:32,149
difference between the decorator and the

00:26:28,309 --> 00:26:35,149
proxy is mainly the fact that the proxy

00:26:32,149 --> 00:26:39,350
keeps the same API and the same behavior

00:26:35,149 --> 00:26:41,659
of the real subject so it is good for

00:26:39,350 --> 00:26:42,020
aspect-oriented programming anyone here

00:26:41,659 --> 00:26:47,170
done

00:26:42,020 --> 00:26:52,400
any aop that's scary stuff okay nobody

00:26:47,170 --> 00:26:55,130
does anybody know what Aoki is okay so

00:26:52,400 --> 00:26:59,510
if you don't know what Aoki is it is

00:26:55,130 --> 00:27:01,670
basically introducing aspects and logic

00:26:59,510 --> 00:27:04,400
that should be executed as soon as that

00:27:01,670 --> 00:27:07,970
happens it's like adding rules to your

00:27:04,400 --> 00:27:14,210
code generally when this is executed

00:27:07,970 --> 00:27:16,480
also execute this one so there's a

00:27:14,210 --> 00:27:19,910
couple of use cases for example caching

00:27:16,480 --> 00:27:22,040
you have a very slow method and you want

00:27:19,910 --> 00:27:24,650
that method to be called only once in a

00:27:22,040 --> 00:27:29,270
while and then all the other method

00:27:24,650 --> 00:27:33,670
calls will be cached logging triggering

00:27:29,270 --> 00:27:36,740
events mocking eh be unit marks are

00:27:33,670 --> 00:27:40,190
basically smart references they allow

00:27:36,740 --> 00:27:42,980
you to modify how the object works but

00:27:40,190 --> 00:27:47,330
they still allow you to say okay let it

00:27:42,980 --> 00:27:53,060
executes the original logic and aop in

00:27:47,330 --> 00:27:55,190
general that's a really interesting use

00:27:53,060 --> 00:27:57,530
case you have to have a good use case

00:27:55,190 --> 00:28:00,050
for AUP but it is a good use case for

00:27:57,530 --> 00:28:02,560
this kind of practicing so a smart

00:28:00,050 --> 00:28:06,620
reference example what happens is that

00:28:02,560 --> 00:28:08,900
we have a slow method it takes 10-20

00:28:06,620 --> 00:28:12,110
seconds to compute and then we don't

00:28:08,900 --> 00:28:15,140
have any changes for like an hour what

00:28:12,110 --> 00:28:17,840
we're doing is I'm using an annotation

00:28:15,140 --> 00:28:21,160
here don't kill me this is basically

00:28:17,840 --> 00:28:26,690
just saying okay this method has to be

00:28:21,160 --> 00:28:30,080
cached 3600 seconds and let's do have

00:28:26,690 --> 00:28:33,560
this stuff in the real object I used an

00:28:30,080 --> 00:28:35,000
annotation you can use config you can do

00:28:33,560 --> 00:28:37,490
whatever you want but basically the idea

00:28:35,000 --> 00:28:40,720
that we want that method to be cached

00:28:37,490 --> 00:28:45,500
what happens is that in a proxy object

00:28:40,720 --> 00:28:48,620
we override the method so we have an API

00:28:45,500 --> 00:28:53,000
caching proxy extends API we pass in an

00:28:48,620 --> 00:28:55,590
API object and a cash and our do heavy

00:28:53,000 --> 00:28:58,470
stuff method gets over it

00:28:55,590 --> 00:29:01,830
and now tries to first get a check if a

00:28:58,470 --> 00:29:04,559
cached element is in memory and if it is

00:29:01,830 --> 00:29:07,799
cashed it retrieves that otherwise it

00:29:04,559 --> 00:29:13,320
calls the real method on the API and

00:29:07,799 --> 00:29:15,690
then stores it in the cache so it is

00:29:13,320 --> 00:29:18,000
pretty much voodoo this happens when you

00:29:15,690 --> 00:29:20,909
have these large frameworks that you

00:29:18,000 --> 00:29:25,850
configure and say connect this with that

00:29:20,909 --> 00:29:28,830
they generate kind of this stuff and

00:29:25,850 --> 00:29:32,039
okay so let's see how you implement the

00:29:28,830 --> 00:29:35,130
proxy in PHP actually implementing a

00:29:32,039 --> 00:29:40,820
proxy in PHP this is what I usually see

00:29:35,130 --> 00:29:47,640
as a poor coders proxy implementation

00:29:40,820 --> 00:29:50,940
anyone use PHP magic here okay yeah so

00:29:47,640 --> 00:29:53,970
what we do is basically using the magic

00:29:50,940 --> 00:29:57,149
underscore underscore call method and we

00:29:53,970 --> 00:30:00,480
build a proxy that in theory is able to

00:29:57,149 --> 00:30:02,730
proxy anything what happens is that we

00:30:00,480 --> 00:30:06,659
just have a rapid object some rapid

00:30:02,730 --> 00:30:09,750
stuff here and this rapid stuff gets

00:30:06,659 --> 00:30:13,230
called via call user func array which is

00:30:09,750 --> 00:30:17,640
some magic PHP triggering and some

00:30:13,230 --> 00:30:19,289
arguments so this usually works that it

00:30:17,640 --> 00:30:20,669
breaks the list of substitution

00:30:19,289 --> 00:30:24,270
principle because it doesn't have the

00:30:20,669 --> 00:30:29,750
same API as my object so don't do this

00:30:24,270 --> 00:30:32,309
don't ever do this proxying is hard so

00:30:29,750 --> 00:30:35,580
let's see what happens when we do that

00:30:32,309 --> 00:30:39,750
we have a bank account and then we have

00:30:35,580 --> 00:30:42,809
a function pay with a bank account don't

00:30:39,750 --> 00:30:45,210
I don't know what he will pay because I

00:30:42,809 --> 00:30:48,929
didn't add any parameters but I assume

00:30:45,210 --> 00:30:51,870
he will pay I hope so and then we have

00:30:48,929 --> 00:30:54,120
our pool proxy and we build it with some

00:30:51,870 --> 00:30:59,220
rapid stuff and then we have this call

00:30:54,120 --> 00:31:02,250
method so what happens is that as soon

00:30:59,220 --> 00:31:05,100
as we build the poor proxy with a new

00:31:02,250 --> 00:31:07,860
bank account and then we say pay with

00:31:05,100 --> 00:31:09,450
the account something will explode so

00:31:07,860 --> 00:31:12,360
this won't work

00:31:09,450 --> 00:31:17,090
okay the API is not the same therefore

00:31:12,360 --> 00:31:21,149
it will basically crash implementing a

00:31:17,090 --> 00:31:24,690
good generic proxy first of all you have

00:31:21,149 --> 00:31:28,289
to you have to follow the liskov

00:31:24,690 --> 00:31:32,730
substitution principle otherwise Barbara

00:31:28,289 --> 00:31:36,269
Liskov will follow you in hell now she's

00:31:32,730 --> 00:31:39,809
actually rocking and she is still doing

00:31:36,269 --> 00:31:42,330
talk so I was wasn't expecting that and

00:31:39,809 --> 00:31:46,169
it is not so trivial to implement the

00:31:42,330 --> 00:31:49,110
proxy because PHP is a mess let's say it

00:31:46,169 --> 00:31:52,679
PHP is actually a mess so you have magic

00:31:49,110 --> 00:31:54,809
captors magic setters serialization

00:31:52,679 --> 00:31:59,299
logic there's this serializable

00:31:54,809 --> 00:32:01,830
interface tour sleep and wake up what

00:31:59,299 --> 00:32:04,019
there's cloning with the underscore

00:32:01,830 --> 00:32:05,960
underscore clone and there's public

00:32:04,019 --> 00:32:09,120
properties because we don't have

00:32:05,960 --> 00:32:12,019
property accessors which is a feature

00:32:09,120 --> 00:32:15,480
that we try to push some months ago and

00:32:12,019 --> 00:32:17,610
which will basically got us rid of all

00:32:15,480 --> 00:32:20,220
the gutter satyrs altogether but we

00:32:17,610 --> 00:32:22,649
don't have that because we don't have

00:32:20,220 --> 00:32:26,100
nice things now I'm just kidding I mean

00:32:22,649 --> 00:32:29,370
PHP is still good but it's worse than

00:32:26,100 --> 00:32:33,779
anything else for this stuff as far as I

00:32:29,370 --> 00:32:36,269
know so there's a lot of thinking that

00:32:33,779 --> 00:32:40,139
you have to to put into building a

00:32:36,269 --> 00:32:43,080
generic proxy and also what happens is

00:32:40,139 --> 00:32:45,179
that as soon as you start developing a

00:32:43,080 --> 00:32:50,870
proxying library this is what comes out

00:32:45,179 --> 00:32:55,470
so I don't know if you see this story so

00:32:50,870 --> 00:32:59,029
this is basically the code that you have

00:32:55,470 --> 00:33:02,159
to write for a generic proxy with one

00:32:59,029 --> 00:33:04,590
get full methods all the rest is just

00:33:02,159 --> 00:33:07,080
dirt that you have to code in order to

00:33:04,590 --> 00:33:10,679
have the object we have exactly like the

00:33:07,080 --> 00:33:12,570
real object so what we saw before are

00:33:10,679 --> 00:33:15,299
just simplify the examples obviously

00:33:12,570 --> 00:33:19,260
this is the generic one which does all

00:33:15,299 --> 00:33:23,670
the things so that's why i wrote a

00:33:19,260 --> 00:33:25,560
library which is called proxy manager

00:33:23,670 --> 00:33:30,090
is used in Symphony framework and zend

00:33:25,560 --> 00:33:32,160
framework to and probably will I am

00:33:30,090 --> 00:33:34,670
trying to push it into doctrine and it

00:33:32,160 --> 00:33:38,370
tries to solve all the proxy problems

00:33:34,670 --> 00:33:40,890
okay you don't have to use it because

00:33:38,370 --> 00:33:44,400
proxying is not a subject that interests

00:33:40,890 --> 00:33:47,160
everyone in proxying is magic and maybe

00:33:44,400 --> 00:33:50,250
you want magic maybe you don't many

00:33:47,160 --> 00:33:53,670
don't okay but it still solves some use

00:33:50,250 --> 00:33:56,490
cases so you may need to be aware of it

00:33:53,670 --> 00:33:58,860
and it deals with the problem of

00:33:56,490 --> 00:34:02,280
bringing out the garbage and generating

00:33:58,860 --> 00:34:04,320
code yourself you don't have to go while

00:34:02,280 --> 00:34:06,360
the encode your proxies by hand and

00:34:04,320 --> 00:34:08,040
something like that so you now focus on

00:34:06,360 --> 00:34:09,750
the problems that you have and just say

00:34:08,040 --> 00:34:13,230
okay we want a virtual proxy I want a

00:34:09,750 --> 00:34:15,750
remote proxy you want a smart reference

00:34:13,230 --> 00:34:18,120
and so on so forth so it solves is a bit

00:34:15,750 --> 00:34:20,460
of problems there's also the null

00:34:18,120 --> 00:34:24,200
objects which is another thing I can

00:34:20,460 --> 00:34:28,830
maybe answer that in questions later on

00:34:24,200 --> 00:34:32,040
and that's how you use it basically this

00:34:28,830 --> 00:34:35,810
is generating a virtual proxy with proxy

00:34:32,040 --> 00:34:38,940
manager so what we have is my slowed foo

00:34:35,810 --> 00:34:41,970
object which is a very slow object it

00:34:38,940 --> 00:34:44,520
takes 10 seconds to instantiate it I put

00:34:41,970 --> 00:34:46,860
just asleep 10 seconds here in the

00:34:44,520 --> 00:34:49,640
constructor and then we have just a do

00:34:46,860 --> 00:34:52,320
full method which occurs something okay

00:34:49,640 --> 00:34:55,140
we assume here we're building something

00:34:52,320 --> 00:35:00,150
very large something very complex is

00:34:55,140 --> 00:35:03,390
happening here okay and this is how you

00:35:00,150 --> 00:35:06,890
solve it with the library approach so

00:35:03,390 --> 00:35:09,510
you have some very ugly / factory

00:35:06,890 --> 00:35:12,330
because i'm not good at naming stuff so

00:35:09,510 --> 00:35:16,320
that's what comes out it's like the

00:35:12,330 --> 00:35:20,790
springs abstract singleton proxy factory

00:35:16,320 --> 00:35:25,440
factory I think I'm nearly there I mean

00:35:20,790 --> 00:35:27,180
I can do it so then you say okay factory

00:35:25,440 --> 00:35:29,280
build me a proxy and I want the proxy of

00:35:27,180 --> 00:35:31,740
this type this is the class of the proxy

00:35:29,280 --> 00:35:34,650
and this is how you initialize that

00:35:31,740 --> 00:35:36,850
proxy this is the init method of the

00:35:34,650 --> 00:35:40,150
proxy so I'm passing in a closure

00:35:36,850 --> 00:35:42,070
just says a proxy of rapid objects at

00:35:40,150 --> 00:35:45,630
the rapid object to the real instance

00:35:42,070 --> 00:35:48,670
and then set the proxy as initialized I

00:35:45,630 --> 00:35:52,650
can maybe show that as in an example

00:35:48,670 --> 00:35:56,920
running and instantiating 1000 of these

00:35:52,650 --> 00:35:59,410
10-second taking objects and then I can

00:35:56,920 --> 00:36:03,580
just call the api of the object proxy do

00:35:59,410 --> 00:36:05,140
phool and that's it and that works ok so

00:36:03,580 --> 00:36:07,150
you don't have to code all this stuff

00:36:05,140 --> 00:36:11,020
somewhere it has been generated it has

00:36:07,150 --> 00:36:15,580
been put into TMP or in memory or it has

00:36:11,020 --> 00:36:18,370
used evil evil ok it is evil but it has

00:36:15,580 --> 00:36:23,560
used cases so i'm using evil in some

00:36:18,370 --> 00:36:27,070
cases you can build smart references so

00:36:23,560 --> 00:36:31,510
what you have is again a very very very

00:36:27,070 --> 00:36:33,400
ugly factory somewhere and then you say

00:36:31,510 --> 00:36:35,560
create me a proxy and I want the proxy

00:36:33,400 --> 00:36:37,750
around a DB connection I already have a

00:36:35,560 --> 00:36:41,080
DB connection I want to build a proxy

00:36:37,750 --> 00:36:45,030
around it and then I say before each

00:36:41,080 --> 00:36:49,090
time you call the query object then I

00:36:45,030 --> 00:36:51,730
hawk where is being executed and after

00:36:49,090 --> 00:36:54,670
every time that you execute a query

00:36:51,730 --> 00:36:58,090
basically call the query method I want a

00:36:54,670 --> 00:37:00,520
query completed output and then as soon

00:36:58,090 --> 00:37:04,780
as I call the bigquery I get my output

00:37:00,520 --> 00:37:07,450
so forgetting about the naming stuff but

00:37:04,780 --> 00:37:11,890
that's much simpler than writing at one

00:37:07,450 --> 00:37:16,330
thousand lines code class that solves

00:37:11,890 --> 00:37:19,660
the problem of proxy and it integrates

00:37:16,330 --> 00:37:21,520
with san fran motu and symfony2 and it

00:37:19,660 --> 00:37:24,520
allows you for example to define

00:37:21,520 --> 00:37:27,640
services as lazy because you have this

00:37:24,520 --> 00:37:30,910
like giant security subsystem for

00:37:27,640 --> 00:37:33,520
example in symphony and it takes 10-20

00:37:30,910 --> 00:37:35,470
dependencies and maybe you don't need it

00:37:33,520 --> 00:37:38,590
because your application is stepping out

00:37:35,470 --> 00:37:40,810
before same frozen framework you maybe

00:37:38,590 --> 00:37:43,470
have an RM and you're not even using it

00:37:40,810 --> 00:37:49,150
a soap service which needs to pass some

00:37:43,470 --> 00:37:50,030
w dsl somewhere and you don't need it

00:37:49,150 --> 00:37:52,580
for every year

00:37:50,030 --> 00:37:55,190
so what you say is you have some service

00:37:52,580 --> 00:37:56,890
and say okay pass it to the laser

00:37:55,190 --> 00:38:00,020
service factory she's going to

00:37:56,890 --> 00:38:02,240
instantiate it for me and then you just

00:38:00,020 --> 00:38:05,380
say what it looks like so you have the

00:38:02,240 --> 00:38:08,870
class name for the service that's it

00:38:05,380 --> 00:38:11,690
same for symphony so you have a service

00:38:08,870 --> 00:38:15,020
like my service name and it has a class

00:38:11,690 --> 00:38:19,910
and then you say lazy true and it will

00:38:15,020 --> 00:38:22,250
be instantiated lazily some useful

00:38:19,910 --> 00:38:24,860
libraries there's a couple of

00:38:22,250 --> 00:38:27,530
interesting libraries that I went

00:38:24,860 --> 00:38:30,470
through while researching the different

00:38:27,530 --> 00:38:32,660
ways proxies were generated doctrine's

00:38:30,470 --> 00:38:35,810
proxy generator is basically in my boot

00:38:32,660 --> 00:38:39,400
camp I got there and there was already a

00:38:35,810 --> 00:38:42,170
proxy implementation quite old one and

00:38:39,400 --> 00:38:44,510
it was really simple to understand it

00:38:42,170 --> 00:38:48,470
doesn't solve all the use cases but it

00:38:44,510 --> 00:38:50,750
has a lot of them solved and it works

00:38:48,470 --> 00:38:53,660
quite well because I don't see that many

00:38:50,750 --> 00:38:56,480
bugs in the proc simplement a shin of

00:38:53,660 --> 00:38:59,810
doctrine nowadays there's my library

00:38:56,480 --> 00:39:02,360
because I spent I don't know how many

00:38:59,810 --> 00:39:04,100
are so I'm doing it it's just for fun

00:39:02,360 --> 00:39:06,140
because i'm not using actually all the

00:39:04,100 --> 00:39:09,200
proxies that in there that are in there

00:39:06,140 --> 00:39:11,660
but i felt that i had to like cover them

00:39:09,200 --> 00:39:14,270
all and trying to build them and see

00:39:11,660 --> 00:39:16,580
what the edge cases of PHP are and it

00:39:14,270 --> 00:39:18,830
really pushes the language to the limits

00:39:16,580 --> 00:39:23,990
because you really do some very dirty

00:39:18,830 --> 00:39:26,870
stuff to get everything running flow by

00:39:23,990 --> 00:39:30,290
type of three and that's interesting

00:39:26,870 --> 00:39:32,480
because they use proxying for injecting

00:39:30,290 --> 00:39:34,790
dependencies that was that is a thing

00:39:32,480 --> 00:39:36,740
that I saw and was quite interesting so

00:39:34,790 --> 00:39:40,160
you basically have a class like a

00:39:36,740 --> 00:39:44,420
controller and you say here these are

00:39:40,160 --> 00:39:46,610
the properties and inject like database

00:39:44,420 --> 00:39:48,980
connection here or inject a security

00:39:46,610 --> 00:39:52,810
layer here and what happens is that flow

00:39:48,980 --> 00:39:55,220
will regenerate the controller class and

00:39:52,810 --> 00:39:58,970
pass in and set the properties

00:39:55,220 --> 00:40:02,720
automatically positive negative the no

00:39:58,970 --> 00:40:03,559
but really interesting to see and this

00:40:02,720 --> 00:40:07,759
July

00:40:03,559 --> 00:40:09,920
by Schmidt Joe Johanna's Schmidt who is

00:40:07,759 --> 00:40:13,640
a very active in this infinite community

00:40:09,920 --> 00:40:15,859
and he has been building this code

00:40:13,640 --> 00:40:18,380
generation library that tried for the

00:40:15,859 --> 00:40:21,259
first time to abstract generating

00:40:18,380 --> 00:40:24,259
proxies and that's where I got started

00:40:21,259 --> 00:40:26,630
at building my library but i had to

00:40:24,259 --> 00:40:29,349
leave it because of licensing issues so

00:40:26,630 --> 00:40:32,119
it's still a good example of very good

00:40:29,349 --> 00:40:34,249
abstracted code about how to generate

00:40:32,119 --> 00:40:36,170
code if you want to go that way I mean

00:40:34,249 --> 00:40:38,920
generating code is not for everyone I

00:40:36,170 --> 00:40:41,839
would not suggest it to anyone actually

00:40:38,920 --> 00:40:44,329
but if you need to just go there and

00:40:41,839 --> 00:40:48,920
look at how he build it how he has done

00:40:44,329 --> 00:40:51,199
it there's another interesting library

00:40:48,920 --> 00:40:55,309
if you never did any aspect oriented

00:40:51,199 --> 00:40:58,819
programming take note of this this is a

00:40:55,309 --> 00:41:01,069
google LP PHP which is a pure PHP

00:40:58,819 --> 00:41:04,130
implementation of the aspect-oriented

00:41:01,069 --> 00:41:06,650
programming pearling or some basics of

00:41:04,130 --> 00:41:09,319
it I mean there's not all of it in it

00:41:06,650 --> 00:41:12,829
but the interesting stuff is that he

00:41:09,319 --> 00:41:16,249
uses proxies to add logic like like we

00:41:12,829 --> 00:41:18,319
saw in the caching example caching a

00:41:16,249 --> 00:41:22,429
long-running object a long-running

00:41:18,319 --> 00:41:24,769
method and what he does is rewriting the

00:41:22,429 --> 00:41:27,199
autoloader of your application so that

00:41:24,769 --> 00:41:30,619
at runtime why your application loads

00:41:27,199 --> 00:41:35,059
the object it will generate the proxies

00:41:30,619 --> 00:41:38,569
around them so that's really tricky it's

00:41:35,059 --> 00:41:40,279
really magic stuff and it's again an

00:41:38,569 --> 00:41:42,619
edge case something that you may want to

00:41:40,279 --> 00:41:45,439
look into if you really want to see some

00:41:42,619 --> 00:41:47,479
real magic going on and stay there three

00:41:45,439 --> 00:41:50,630
hours and trying to understand what the

00:41:47,479 --> 00:41:54,529
hell is doing here I mean have no idea

00:41:50,630 --> 00:41:56,479
what is going on but very tricky very

00:41:54,529 --> 00:41:58,910
interesting to see how it was

00:41:56,479 --> 00:42:04,900
implemented okay I'm just going to be

00:41:58,910 --> 00:42:07,219
trivial stuff proxying fluent interfaces

00:42:04,900 --> 00:42:12,780
everybody familiar with leather fluent

00:42:07,219 --> 00:42:15,480
interfaces raise your hand okay

00:42:12,780 --> 00:42:19,640
okay for those who didn't raise it it's

00:42:15,480 --> 00:42:22,440
basically being able to call a method in

00:42:19,640 --> 00:42:25,230
multiple subsidy his subsequent calls

00:42:22,440 --> 00:42:29,490
chained calls so-called like jQuery

00:42:25,230 --> 00:42:32,460
jQuery this that then and so on the

00:42:29,490 --> 00:42:34,890
problem is that basically is calling API

00:42:32,460 --> 00:42:39,120
and that API does some stuff and returns

00:42:34,890 --> 00:42:42,570
the object itself and that breaks a lot

00:42:39,120 --> 00:42:45,090
of stuff that breaks virtual praxis

00:42:42,570 --> 00:42:47,570
because we had a rapid instance so now

00:42:45,090 --> 00:42:50,540
we have a nun rapid instance it breaks

00:42:47,570 --> 00:42:54,360
protection proxies smart references

00:42:50,540 --> 00:43:00,390
breaks everything okay how many of you

00:42:54,360 --> 00:43:06,980
do use fluent interfaces okay don't how

00:43:00,390 --> 00:43:10,590
many like fluent interfaces go away out

00:43:06,980 --> 00:43:14,760
now seriously don't don't don't don't

00:43:10,590 --> 00:43:17,070
there's no real meaning in a fluent in

00:43:14,760 --> 00:43:19,560
the face except for really some edge

00:43:17,070 --> 00:43:21,510
cases like building DSL the problem is

00:43:19,560 --> 00:43:23,640
that you break the encapsulation of your

00:43:21,510 --> 00:43:25,230
object this may be a bit controversial

00:43:23,640 --> 00:43:26,730
but what happens is that you're

00:43:25,230 --> 00:43:30,150
returning an object with the same

00:43:26,730 --> 00:43:31,980
interface but in the code that consumes

00:43:30,150 --> 00:43:35,100
that object you are assuming that it is

00:43:31,980 --> 00:43:36,720
the same instance while you just have to

00:43:35,100 --> 00:43:39,180
assume the type of the object that is

00:43:36,720 --> 00:43:42,870
returned you can't do a sumption of what

00:43:39,180 --> 00:43:46,890
instance will be returned so that's my

00:43:42,870 --> 00:43:50,490
idea of light breaks encapsulation so we

00:43:46,890 --> 00:43:52,770
have this object it's a bank account we

00:43:50,490 --> 00:43:56,100
have a pain method passing in an amount

00:43:52,770 --> 00:43:59,250
and then we subtract that amount from

00:43:56,100 --> 00:44:04,380
the object and return this how do we

00:43:59,250 --> 00:44:09,090
proxy this method without breaking the

00:44:04,380 --> 00:44:12,990
fluent interface so when we do this what

00:44:09,090 --> 00:44:14,970
we have is basically returning the bank

00:44:12,990 --> 00:44:17,670
account every time so if we proxy this

00:44:14,970 --> 00:44:21,030
every time that we call pay we unwrap it

00:44:17,670 --> 00:44:22,680
so you built 10 14 rappers around this

00:44:21,030 --> 00:44:24,270
object because you want to protect it

00:44:22,680 --> 00:44:26,770
you want to cash it you want and then

00:44:24,270 --> 00:44:31,360
with a single call you broke them all

00:44:26,770 --> 00:44:34,690
in a single call so there's a dirty hack

00:44:31,360 --> 00:44:36,720
to do that and what you can do is

00:44:34,690 --> 00:44:39,130
something that I found quite interesting

00:44:36,720 --> 00:44:42,580
it may be interesting for other use

00:44:39,130 --> 00:44:45,730
cases generally regarding rappers so not

00:44:42,580 --> 00:44:50,130
just for proxies I extend the object

00:44:45,730 --> 00:44:54,190
usual proxy stuff and what I do is

00:44:50,130 --> 00:44:57,430
copying the properties in my local

00:44:54,190 --> 00:44:59,800
object so I'm copying every property

00:44:57,430 --> 00:45:03,250
private protected public properties in

00:44:59,800 --> 00:45:05,290
my object by reference okay very

00:45:03,250 --> 00:45:07,330
important by reference which means that

00:45:05,290 --> 00:45:09,940
as soon as I modify the property in my

00:45:07,330 --> 00:45:13,750
current bank account proxy it also gets

00:45:09,940 --> 00:45:15,490
modified in the bank account object so

00:45:13,750 --> 00:45:17,320
now what happens is that I have the

00:45:15,490 --> 00:45:20,740
function pay and they have some macro

00:45:17,320 --> 00:45:24,160
methyl alcohol before the actual logic

00:45:20,740 --> 00:45:28,300
then I can call parent pay and what I

00:45:24,160 --> 00:45:31,000
got is something like this bike 100 200

00:45:28,300 --> 00:45:33,460
300 that's something really interesting

00:45:31,000 --> 00:45:35,380
i found this the first time in the Zen

00:45:33,460 --> 00:45:36,880
framer to dependency injection container

00:45:35,380 --> 00:45:41,860
because it was doing some of this

00:45:36,880 --> 00:45:46,780
trickery it's dirty hacks I hope it will

00:45:41,860 --> 00:45:49,230
help you someone in the future and the

00:45:46,780 --> 00:45:56,320
other one is public property is proxying

00:45:49,230 --> 00:45:59,050
so without property accessors of which i

00:45:56,320 --> 00:46:03,550
was talking before does anybody here

00:45:59,050 --> 00:46:06,700
know how i could call a method whenever

00:46:03,550 --> 00:46:11,730
i try to read or write from the name

00:46:06,700 --> 00:46:13,750
property here what we can do and is

00:46:11,730 --> 00:46:16,390
unsetting the properties while

00:46:13,750 --> 00:46:19,360
constructing my object so I unset this

00:46:16,390 --> 00:46:21,640
name and unset this your name what

00:46:19,360 --> 00:46:25,390
happens is that these basically are

00:46:21,640 --> 00:46:28,930
reference pointers in the PHP core and

00:46:25,390 --> 00:46:31,300
when we do the unset we reduce the rev

00:46:28,930 --> 00:46:32,920
counter by one the properties disappear

00:46:31,300 --> 00:46:37,650
because their gap wedge collected

00:46:32,920 --> 00:46:40,420
immediately and what we do is then

00:46:37,650 --> 00:46:40,829
wrapping the object and what happens

00:46:40,420 --> 00:46:44,160
next

00:46:40,829 --> 00:46:46,289
that now we can call the magics a band

00:46:44,160 --> 00:46:49,170
gap metals because every time that they

00:46:46,289 --> 00:46:51,239
try to access the name property PHP says

00:46:49,170 --> 00:46:56,670
I don't know a name property in my

00:46:51,239 --> 00:47:00,239
object ok PHP is both completely ugly

00:46:56,670 --> 00:47:03,869
sake it's but sometimes it's really

00:47:00,239 --> 00:47:06,930
awesome this is really nice sometimes I

00:47:03,869 --> 00:47:08,969
mean hates the dirty trick and it

00:47:06,930 --> 00:47:10,709
doesn't work for example on HH vm

00:47:08,969 --> 00:47:13,969
because HH vm was implemented

00:47:10,709 --> 00:47:18,690
differently but it's patil nice to know

00:47:13,969 --> 00:47:21,859
so don't do this at home this is an

00:47:18,690 --> 00:47:28,819
advice by excel saga anyone who saw this

00:47:21,859 --> 00:47:28,819

YouTube URL: https://www.youtube.com/watch?v=Ka8wlV8M6Vg


