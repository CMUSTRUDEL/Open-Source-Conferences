Title: Interview mit Steve Kamerman | IPC13
Publication date: 2016-06-09
Playlist: International PHP Conference 2013
Description: 
	Einer der gefragtesten Vortr채ge am zweiten Tag der diesj채hrigen International PHP Conference 2013 in M체nchen war High-Performance PHP with HipHop von Steve Kamerman. Wir haben die Gelegenheit genutzt und uns mit dem sympathischen Amerikaner 체ber Facebooks Technologie zur Beschleunigung von PHP unterhalten.

Weitere Informationen https://phpconference.com/de/
Captions: 
	00:00:06,259 --> 00:00:09,870
Tom basically from p.m. Alexei not

00:00:08,460 --> 00:00:12,000
always been making of the International

00:00:09,870 --> 00:00:14,759
PHP conference and he's been him Steve

00:00:12,000 --> 00:00:16,980
common man i'm going to switch to

00:00:14,759 --> 00:00:19,859
English Steve please introduce yourself

00:00:16,980 --> 00:00:21,930
so my name is Steve cameramen I'm a PHP

00:00:19,859 --> 00:00:23,939
developer I was the author of an open

00:00:21,930 --> 00:00:25,680
source project called Terra orful which

00:00:23,939 --> 00:00:28,710
became quite popular in the mid 2000s

00:00:25,680 --> 00:00:30,119
and I've started a company with some

00:00:28,710 --> 00:00:32,340
business partners called SI entra mobile

00:00:30,119 --> 00:00:34,680
and we've taken thats warfel project and

00:00:32,340 --> 00:00:38,489
made it commercial your topic here is

00:00:34,680 --> 00:00:42,450
some hip hop for PHP please tell us

00:00:38,489 --> 00:00:45,899
something about hip hop sure so hip hop

00:00:42,450 --> 00:00:47,430
for PHP is essentially a source code it

00:00:45,899 --> 00:00:50,930
started as a source code translator from

00:00:47,430 --> 00:00:53,910
PHP into c plus plus the idea is to

00:00:50,930 --> 00:00:56,250
increase performance now it exists in a

00:00:53,910 --> 00:00:57,719
virtual machine form but the goal is

00:00:56,250 --> 00:01:00,149
still the same which is to increase the

00:00:57,719 --> 00:01:02,309
performance of PHP so we do have a

00:01:00,149 --> 00:01:05,790
performance problem with PHP instead

00:01:02,309 --> 00:01:08,580
right yes definitely PHP is not a high

00:01:05,790 --> 00:01:11,930
performance language so Facebook being

00:01:08,580 --> 00:01:14,460
the quintessential large-scale PHP site

00:01:11,930 --> 00:01:16,530
had had a big problem of being able to

00:01:14,460 --> 00:01:18,210
scale so they were getting there traffic

00:01:16,530 --> 00:01:19,619
was increasing at such a high rate that

00:01:18,210 --> 00:01:21,420
they couldn't even add servers fast

00:01:19,619 --> 00:01:25,439
enough to handle the increase in traffic

00:01:21,420 --> 00:01:27,689
so okay to be honest how many projects

00:01:25,439 --> 00:01:31,350
out there meeting this kind of

00:01:27,689 --> 00:01:33,380
performance like Facebook does there are

00:01:31,350 --> 00:01:35,430
certainly not very many projects yeah

00:01:33,380 --> 00:01:37,979
Facebook has obviously thousands of

00:01:35,430 --> 00:01:39,450
servers and so even if the problem is

00:01:37,979 --> 00:01:40,650
going from one server to two servers

00:01:39,450 --> 00:01:41,970
that can be a lot of effort on your part

00:01:40,650 --> 00:01:44,610
so if you can add a component to your

00:01:41,970 --> 00:01:46,590
server to delay or you know otherwise

00:01:44,610 --> 00:01:48,740
defer this transition to multiple

00:01:46,590 --> 00:01:52,890
servers that might be of interest to you

00:01:48,740 --> 00:01:55,649
why you should is average developer for

00:01:52,890 --> 00:01:57,840
maybe in company with don't know 5,000

00:01:55,649 --> 00:02:00,360
people or something like that use hip

00:01:57,840 --> 00:02:03,990
hop for PHP is there any reason for me

00:02:00,360 --> 00:02:05,549
to use it absolutely in in our company

00:02:03,990 --> 00:02:08,039
we have lots of customers that are

00:02:05,549 --> 00:02:09,810
startup companies that have maybe five

00:02:08,039 --> 00:02:12,150
total employees and they're serving

00:02:09,810 --> 00:02:13,530
billions of page views per month usually

00:02:12,150 --> 00:02:13,890
these are ad networks in these types of

00:02:13,530 --> 00:02:16,170
things

00:02:13,890 --> 00:02:19,290
so there are use cases in which is very

00:02:16,170 --> 00:02:20,400
important to have low latency and to be

00:02:19,290 --> 00:02:22,860
able to handle out of traffic for

00:02:20,400 --> 00:02:24,990
example in when serving an ad from an ad

00:02:22,860 --> 00:02:26,790
network you might have a total of 50

00:02:24,990 --> 00:02:27,900
milliseconds to be able to decide what

00:02:26,790 --> 00:02:30,090
ad you're going to serve and serve it

00:02:27,900 --> 00:02:31,800
and so if you're adding 20 milliseconds

00:02:30,090 --> 00:02:36,780
of latency because of Apaches overhead

00:02:31,800 --> 00:02:39,270
that's very bad news well indeed how

00:02:36,780 --> 00:02:41,820
difficult is it to switch my application

00:02:39,270 --> 00:02:46,260
so my Everett show in PHP built a

00:02:41,820 --> 00:02:48,709
vacation to hip hop hip hop is a

00:02:46,260 --> 00:02:51,570
replacement for the PHP runtime and so

00:02:48,709 --> 00:02:53,820
obviously Facebook having developed it

00:02:51,570 --> 00:02:55,290
it's tailored to their needs and so

00:02:53,820 --> 00:02:57,690
there are extensions that are not

00:02:55,290 --> 00:02:59,280
supported for example mysql I so if you

00:02:57,690 --> 00:03:01,769
use MySQL I I can tell you right now

00:02:59,280 --> 00:03:04,380
it's not going to work now that they've

00:03:01,769 --> 00:03:06,630
made a commitment to add this extension

00:03:04,380 --> 00:03:08,970
as well as others but but at the end of

00:03:06,630 --> 00:03:10,800
the day you need a unit test your your

00:03:08,970 --> 00:03:12,570
application with hip hop to make sure

00:03:10,800 --> 00:03:13,800
it's compatible so facebook wants to

00:03:12,570 --> 00:03:16,950
give something back to the community

00:03:13,800 --> 00:03:18,450
with hip hop i'm not sure that their

00:03:16,950 --> 00:03:21,570
intent was to give back to the community

00:03:18,450 --> 00:03:25,680
necessarily that seems to be a awesome

00:03:21,570 --> 00:03:28,500
side effect now because PHP because hip

00:03:25,680 --> 00:03:31,079
hop replaces the PHP runtime a lot of

00:03:28,500 --> 00:03:33,360
the code from PHP may be integrated into

00:03:31,079 --> 00:03:35,489
the hip hop code and therefore it has to

00:03:33,360 --> 00:03:36,780
be distributed under well in this case

00:03:35,489 --> 00:03:39,030
it has to be distributed under the same

00:03:36,780 --> 00:03:41,190
license which is the PHP license so it's

00:03:39,030 --> 00:03:45,030
inextricable link to PHP I think is the

00:03:41,190 --> 00:03:47,239
reason that it stays open source okay so

00:03:45,030 --> 00:03:52,019
how many features of PHP 55 are

00:03:47,239 --> 00:03:54,989
supported by hip-hop ah well I can only

00:03:52,019 --> 00:03:56,280
name about eight features that i can

00:03:54,989 --> 00:03:58,560
think of that have been added to 5.5

00:03:56,280 --> 00:04:00,480
from 5.4 but i can tell you that hip

00:03:58,560 --> 00:04:03,570
hop's focus is to maintain function

00:04:00,480 --> 00:04:07,019
perry with 5.4 first and to that end

00:04:03,570 --> 00:04:10,560
it's very close so are there plans to to

00:04:07,019 --> 00:04:13,200
change the behavior you mean to upgrade

00:04:10,560 --> 00:04:15,239
it to ya 15 compatibility I'm sure bets

00:04:13,200 --> 00:04:18,090
in the in the works yeah I mean it's a

00:04:15,239 --> 00:04:19,560
matter of if they're using the function

00:04:18,090 --> 00:04:22,049
then it's valuable to them and they'll

00:04:19,560 --> 00:04:24,870
be an incentive to to add but I mean in

00:04:22,049 --> 00:04:27,570
PHP 5.5 you have things like array

00:04:24,870 --> 00:04:29,910
column which is a vaguely user rarely

00:04:27,570 --> 00:04:31,860
use them function are multiple iterator

00:04:29,910 --> 00:04:33,750
which iterates keys and values from

00:04:31,860 --> 00:04:35,430
different sources these things are neat

00:04:33,750 --> 00:04:38,490
but there's plenty of ways to get around

00:04:35,430 --> 00:04:41,400
yeah but we do have the posh part assing

00:04:38,490 --> 00:04:44,340
a hashing API for example so it would be

00:04:41,400 --> 00:04:46,740
correct the password hashing API so it

00:04:44,340 --> 00:04:50,130
would be great to have this one in hip

00:04:46,740 --> 00:04:51,600
hop true yeah what you say is right i

00:04:50,130 --> 00:04:55,200
mean the fact that there's not support

00:04:51,600 --> 00:04:57,660
for 5.5 is potentially a problem but to

00:04:55,200 --> 00:05:01,590
give you an example in preparing for my

00:04:57,660 --> 00:05:03,510
my talk at IPC i was doing some unit

00:05:01,590 --> 00:05:05,160
testing on the zend framework to in hip

00:05:03,510 --> 00:05:06,660
hop it was like ninety-eight percent of

00:05:05,160 --> 00:05:09,360
the unit tests were passing or ninety

00:05:06,660 --> 00:05:13,080
percent but in the PHP runtime it was

00:05:09,360 --> 00:05:15,090
the same also ninety percent so so there

00:05:13,080 --> 00:05:16,980
is always some stuff that doesn't work I

00:05:15,090 --> 00:05:18,240
mean to say that you're going to

00:05:16,980 --> 00:05:20,790
immediately switch all your servers to

00:05:18,240 --> 00:05:22,650
5.5 and not anticipate any sort of

00:05:20,790 --> 00:05:26,040
problems in your code base which I think

00:05:22,650 --> 00:05:27,600
be ignorant so so there may be some

00:05:26,040 --> 00:05:30,930
inherent risk anyway and using features

00:05:27,600 --> 00:05:34,010
that are just introduced mentioning your

00:05:30,930 --> 00:05:36,270
your session so what can we look for

00:05:34,010 --> 00:05:38,720
well I'm going to go into into a little

00:05:36,270 --> 00:05:42,360
bit more detail about why PHP is slow

00:05:38,720 --> 00:05:45,360
you know what what improvements does

00:05:42,360 --> 00:05:47,040
hip-hopper page we make how what is the

00:05:45,360 --> 00:05:49,740
level of effort for integration for if

00:05:47,040 --> 00:05:51,420
you want to switch you know the pros and

00:05:49,740 --> 00:05:53,580
cons speech yeah I'm not suggesting

00:05:51,420 --> 00:05:55,680
everyone use hip / PHP I'm suggesting

00:05:53,580 --> 00:05:57,540
that everyone understand that there are

00:05:55,680 --> 00:06:01,080
alternatives out there and this may be a

00:05:57,540 --> 00:06:03,300
good substitute for the standard PHP so

00:06:01,080 --> 00:06:07,680
one of the last questions why is peach p

00:06:03,300 --> 00:06:09,330
slow sure PHP is slow for a couple of

00:06:07,680 --> 00:06:11,550
big reasons the first one is called

00:06:09,330 --> 00:06:13,920
symbol table lookup the problem is that

00:06:11,550 --> 00:06:16,010
PHP has to go looking for every variable

00:06:13,920 --> 00:06:18,750
that you use so if you have a function

00:06:16,010 --> 00:06:20,610
named foo and it takes a parameter named

00:06:18,750 --> 00:06:22,620
bar it has to go first look in the

00:06:20,610 --> 00:06:24,000
symbol table for the function foo figure

00:06:22,620 --> 00:06:26,310
out where is in memory retrieve that

00:06:24,000 --> 00:06:28,530
then go figure out what the variable bar

00:06:26,310 --> 00:06:30,660
is and go find it in memory in addition

00:06:28,530 --> 00:06:33,120
it doesn't have static binding for

00:06:30,660 --> 00:06:34,980
constants so we're a constant value

00:06:33,120 --> 00:06:37,800
might be Steve and in a compiled

00:06:34,980 --> 00:06:41,169
language it's replaced with the literal

00:06:37,800 --> 00:06:43,599
string in PHP that's not the case and it

00:06:41,169 --> 00:06:45,669
the second major problem with PHP is

00:06:43,599 --> 00:06:47,319
that the interpreter can't infer the

00:06:45,669 --> 00:06:49,779
types of the variables so I might have a

00:06:47,319 --> 00:06:51,520
variable called dollar sign a that's a

00:06:49,779 --> 00:06:54,279
string and I might turn it into an int

00:06:51,520 --> 00:06:55,840
and that into an object and then back to

00:06:54,279 --> 00:06:58,150
null I might unset it and then turn it

00:06:55,840 --> 00:07:00,909
back into a string again and because of

00:06:58,150 --> 00:07:02,830
this there's no there's no way to

00:07:00,909 --> 00:07:04,629
optimize the code execution path

00:07:02,830 --> 00:07:06,879
underneath for different types of

00:07:04,629 --> 00:07:08,620
variables Steve thank you for taking

00:07:06,879 --> 00:07:10,449
time and I hope you enjoy it

00:07:08,620 --> 00:07:13,150
international peace conference and I

00:07:10,449 --> 00:07:15,539
hope you do enjoy immunity I will indeed

00:07:13,150 --> 00:07:15,539

YouTube URL: https://www.youtube.com/watch?v=3e-ev7zBY5Y


