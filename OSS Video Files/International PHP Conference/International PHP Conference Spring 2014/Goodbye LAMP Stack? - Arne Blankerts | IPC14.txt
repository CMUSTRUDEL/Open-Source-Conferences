Title: Goodbye LAMP Stack? - Arne Blankerts | IPC14
Publication date: 2016-06-09
Playlist: International PHP Conference Spring 2014
Description: 
	The LAMP stack has been the tried and true backbone of the web for
almost two decades. Lately though, more and more websites replace
Apache HTTPD with nginx and move from plain (My)SQL to No(t only) SQL. And now itâ€™s time to get ready for a new heart: HHVM is a powerful new runtime for the PHP language and this session by Arne Blankerts will show you how to get your application to run on it.

More information: https://phpconference.com/en/
Captions: 
	00:00:08,750 --> 00:00:12,900
okay I guess we're gonna start and leave

00:00:11,280 --> 00:00:19,710
the door open so that this summer I can

00:00:12,900 --> 00:00:23,730
flow in okay so welcome to the well the

00:00:19,710 --> 00:00:26,400
third hvm talk on this conference it's

00:00:23,730 --> 00:00:29,490
not just only about eight hvm it's about

00:00:26,400 --> 00:00:32,219
the lamb steak in general and think how

00:00:29,490 --> 00:00:34,020
you might want to change things to even

00:00:32,219 --> 00:00:37,620
accommodate all the cool things you can

00:00:34,020 --> 00:00:39,870
do with eight hvm so let's start with

00:00:37,620 --> 00:00:41,600
the first introduction and I think the

00:00:39,870 --> 00:00:49,350
project that doesn't really like me

00:00:41,600 --> 00:00:52,620
let's see if we can fix that better okay

00:00:49,350 --> 00:00:55,230
so that's obviously me and I'm working

00:00:52,620 --> 00:00:57,840
with PHP for well over a decade

00:00:55,230 --> 00:01:00,870
yes people keep telling me which means

00:00:57,840 --> 00:01:03,210
I'm obviously getting old I'm a security

00:01:00,870 --> 00:01:04,860
paranoid which usually means that when

00:01:03,210 --> 00:01:06,869
people want to have code reviews that

00:01:04,860 --> 00:01:10,500
I'm the guy doing the security audits on

00:01:06,869 --> 00:01:12,080
that stuff and I'm usually a system

00:01:10,500 --> 00:01:15,000
architect that means I'm designing the

00:01:12,080 --> 00:01:18,479
infrastructure or help people building

00:01:15,000 --> 00:01:20,009
the infrastructure so it ATM is

00:01:18,479 --> 00:01:22,049
obviously quite an important part in

00:01:20,009 --> 00:01:23,549
that and that's why it came to be that

00:01:22,049 --> 00:01:26,250
I'm going to give a presentation on it

00:01:23,549 --> 00:01:27,600
an author author of some open source

00:01:26,250 --> 00:01:29,220
software but that's not too important

00:01:27,600 --> 00:01:31,530
this is just marketing so let's just go

00:01:29,220 --> 00:01:33,750
on and as I already started in the

00:01:31,530 --> 00:01:35,369
beginning small disclaimer this is not a

00:01:33,750 --> 00:01:37,350
talk on how you're going to configure or

00:01:35,369 --> 00:01:39,600
change or modify or whatever things you

00:01:37,350 --> 00:01:41,430
might have to do to get common or famous

00:01:39,600 --> 00:01:43,740
open source software to run on a JVM

00:01:41,430 --> 00:01:45,540
this is just about this deck and how to

00:01:43,740 --> 00:01:47,280
get things done and how to get this deck

00:01:45,540 --> 00:01:49,049
installed so if you're hoping for like

00:01:47,280 --> 00:01:51,299
the most important work or configuration

00:01:49,049 --> 00:01:52,829
him to get WordPress run on HTM or

00:01:51,299 --> 00:01:54,990
Drupal or whatever kind of thing

00:01:52,829 --> 00:01:56,070
this is not your presentation so I'm

00:01:54,990 --> 00:01:57,810
hoping we're going to again too many

00:01:56,070 --> 00:02:03,060
people upset with that but this is just

00:01:57,810 --> 00:02:06,270
focusing on the stack in general okay so

00:02:03,060 --> 00:02:09,179
let's take a bit of a journey back into

00:02:06,270 --> 00:02:12,209
time and the original stack which gave

00:02:09,179 --> 00:02:13,650
the abbreviation la a la MP as in lamb

00:02:12,209 --> 00:02:15,930
is of course Linus

00:02:13,650 --> 00:02:18,329
the operating system Apache at the web

00:02:15,930 --> 00:02:20,069
server even though that obviously just

00:02:18,329 --> 00:02:23,670
the software group not necessarily a

00:02:20,069 --> 00:02:26,879
software MySQL also just the software

00:02:23,670 --> 00:02:30,599
and a company but never mind and PHP as

00:02:26,879 --> 00:02:32,400
a module within the web server the

00:02:30,599 --> 00:02:34,590
biggest problem with that is at some

00:02:32,400 --> 00:02:38,189
point in time people realize that having

00:02:34,590 --> 00:02:41,579
the webserver and the PHP in one has the

00:02:38,189 --> 00:02:44,609
benefit for everything that is just PHP

00:02:41,579 --> 00:02:46,560
but has a really bad impact on

00:02:44,609 --> 00:02:48,599
performance and everything as soon as

00:02:46,560 --> 00:02:51,269
you don't deliver static content like

00:02:48,599 --> 00:02:53,340
images CSS files whatever that don't

00:02:51,269 --> 00:02:55,950
involve PHP at all because you are going

00:02:53,340 --> 00:02:57,690
to initialize PHP along the way because

00:02:55,950 --> 00:02:59,040
it's in a more audio form it's within

00:02:57,690 --> 00:03:01,859
the web server even though you don't

00:02:59,040 --> 00:03:04,260
need it so people realized ok you know

00:03:01,859 --> 00:03:06,329
what we have to change that and we're

00:03:04,260 --> 00:03:07,980
gonna swap over to a different web

00:03:06,329 --> 00:03:08,609
server where we can actually separate

00:03:07,980 --> 00:03:11,760
that stuff

00:03:08,609 --> 00:03:14,129
so having nginx for example you could

00:03:11,760 --> 00:03:16,019
also of course view slide hd-dvd but I

00:03:14,129 --> 00:03:18,629
think hardly anybody heard about that

00:03:16,019 --> 00:03:21,359
being developed actually so I think this

00:03:18,629 --> 00:03:22,949
is on a bother declining state and an X

00:03:21,359 --> 00:03:26,069
on the other hand is getting really

00:03:22,949 --> 00:03:28,829
really popular and the most important

00:03:26,069 --> 00:03:30,930
difference is that it refuses to have

00:03:28,829 --> 00:03:32,609
like modules like what PHP included

00:03:30,930 --> 00:03:33,810
there are some modules in there of

00:03:32,609 --> 00:03:36,030
course but they are really small and

00:03:33,810 --> 00:03:39,840
just basically adding core functionality

00:03:36,030 --> 00:03:43,590
so if you decide to go away from HTTP

00:03:39,840 --> 00:03:47,040
demons by Apache and swap over or switch

00:03:43,590 --> 00:03:50,250
over to nginx you're going to have to

00:03:47,040 --> 00:03:52,590
realize that running PHP is not the same

00:03:50,250 --> 00:03:54,690
anymore as it was before even though

00:03:52,590 --> 00:03:56,790
from your application run of you nothing

00:03:54,690 --> 00:03:58,409
really has to change but the

00:03:56,790 --> 00:04:01,049
configuration point is really different

00:03:58,409 --> 00:04:03,900
but in the next requires you is to have

00:04:01,049 --> 00:04:05,760
PHP as a separate process which sounds

00:04:03,900 --> 00:04:07,949
really bizarre if you're only going to

00:04:05,760 --> 00:04:10,739
do standard HTTP requests with always

00:04:07,949 --> 00:04:12,620
and always require PHP to be executed

00:04:10,739 --> 00:04:14,900
basically on a web service for example

00:04:12,620 --> 00:04:17,070
but as soon as we have like both things

00:04:14,900 --> 00:04:19,320
static files as I mentioned before and

00:04:17,070 --> 00:04:20,760
PHP on the other hand this is genius

00:04:19,320 --> 00:04:22,650
because the web server can do whatever

00:04:20,760 --> 00:04:24,719
has been designed for deliver content

00:04:22,650 --> 00:04:26,580
and as soon as they are something

00:04:24,719 --> 00:04:27,150
dynamic is going to forward that request

00:04:26,580 --> 00:04:29,550
to the extra

00:04:27,150 --> 00:04:32,550
PHP process doing everything for you so

00:04:29,550 --> 00:04:33,990
they had individual processes and in the

00:04:32,550 --> 00:04:35,610
very processes can be configured

00:04:33,990 --> 00:04:37,020
individually and they we can run

00:04:35,610 --> 00:04:39,600
individually and they can be run on

00:04:37,020 --> 00:04:41,460
multiple machines individually funny

00:04:39,600 --> 00:04:44,100
thing is quite many installations you

00:04:41,460 --> 00:04:45,449
can see outside there people have nginx

00:04:44,100 --> 00:04:47,490
as a load balancer up front

00:04:45,449 --> 00:04:50,460
to forward the request to the actual

00:04:47,490 --> 00:04:52,860
standard Apache PHP combination which

00:04:50,460 --> 00:04:54,419
makes it so from the technical

00:04:52,860 --> 00:04:56,370
perspective everything just looked fine

00:04:54,419 --> 00:04:58,020
you still have the separation but you

00:04:56,370 --> 00:05:00,270
still have way too much overhead on the

00:04:58,020 --> 00:05:03,240
PHP machine because you don't really

00:05:00,270 --> 00:05:06,960
need the HTTP level on that and your

00:05:03,240 --> 00:05:11,400
next can talk with over fast EDI and PHP

00:05:06,960 --> 00:05:13,289
has PHP fpm and PHP cm is the fast UGI

00:05:11,400 --> 00:05:15,570
process manager meaning it's going to

00:05:13,289 --> 00:05:17,520
run as a standalone process speaking

00:05:15,570 --> 00:05:19,410
with the party GI protocol to whatever

00:05:17,520 --> 00:05:22,770
server who wants to talk to it

00:05:19,410 --> 00:05:24,419
and with the nginx that's obviously the

00:05:22,770 --> 00:05:26,550
best partner you can get and it can be

00:05:24,419 --> 00:05:28,770
run locally over network or whatever

00:05:26,550 --> 00:05:30,990
kind of socket interface whatever you

00:05:28,770 --> 00:05:36,990
think makes this most make most sense

00:05:30,990 --> 00:05:40,280
for you so the coolest thing and this

00:05:36,990 --> 00:05:42,479
idea is you have the web server and

00:05:40,280 --> 00:05:45,000
whatever kind of concept the web server

00:05:42,479 --> 00:05:47,039
might be using and the next for example

00:05:45,000 --> 00:05:48,810
uses events Antonio is just one process

00:05:47,039 --> 00:05:51,180
and spawning event handling internally

00:05:48,810 --> 00:05:52,710
Apache uses the forks or threading

00:05:51,180 --> 00:05:57,240
depending on what operating system

00:05:52,710 --> 00:05:59,430
you're on this is web stuff and PHP even

00:05:57,240 --> 00:06:01,229
though it might create HTML stuff this

00:05:59,430 --> 00:06:02,250
is not really HTTP related it's

00:06:01,229 --> 00:06:05,010
something completely different it's

00:06:02,250 --> 00:06:07,590
running software and the result is going

00:06:05,010 --> 00:06:09,620
to be sent over HTTP fine but PHP is not

00:06:07,590 --> 00:06:12,090
involved in that at least not by default

00:06:09,620 --> 00:06:14,220
so the idea of having the web server

00:06:12,090 --> 00:06:16,050
having its process and process from and

00:06:14,220 --> 00:06:18,599
handling processes whatever things makes

00:06:16,050 --> 00:06:20,250
the most sense is cool on one hand and

00:06:18,599 --> 00:06:22,050
on the other hand having PHP over here

00:06:20,250 --> 00:06:24,659
doing the same thing handling its

00:06:22,050 --> 00:06:28,080
processes as it sees fit so you can have

00:06:24,659 --> 00:06:29,970
a bunch of PHP processes waiting to be

00:06:28,080 --> 00:06:31,800
ready to be executed so you can just

00:06:29,970 --> 00:06:33,990
have like for example say okay I'm going

00:06:31,800 --> 00:06:36,810
to add a worker pool here of PHP stacks

00:06:33,990 --> 00:06:39,090
and say ok this is ten twenty hundred

00:06:36,810 --> 00:06:40,480
whatever you need of waiting in PHP

00:06:39,090 --> 00:06:42,610
processes and

00:06:40,480 --> 00:06:44,020
we have the web server on this side and

00:06:42,610 --> 00:06:46,270
it's going to choose whatever free

00:06:44,020 --> 00:06:49,300
process is here to fill out the request

00:06:46,270 --> 00:06:50,950
to so this is really simple balancing on

00:06:49,300 --> 00:06:52,900
both sides so you don't have to have one

00:06:50,950 --> 00:06:55,030
big fed server for everything but you

00:06:52,900 --> 00:06:57,160
can really dedicate hardware and CPU

00:06:55,030 --> 00:07:00,850
time to whatever use case you have most

00:06:57,160 --> 00:07:03,340
interesting so let's see how that looks

00:07:00,850 --> 00:07:05,080
from the configuration perspective and

00:07:03,340 --> 00:07:06,640
if you are used to a little bit of the

00:07:05,080 --> 00:07:09,190
how the Apache configuration might look

00:07:06,640 --> 00:07:14,710
like this is not that different except

00:07:09,190 --> 00:07:16,420
that the break is to order the tech

00:07:14,710 --> 00:07:19,710
things from the Apache configuration

00:07:16,420 --> 00:07:22,240
moved into curly braces so to say and

00:07:19,710 --> 00:07:23,920
this is just a service section so I'm

00:07:22,240 --> 00:07:26,890
trying to keep the samples really really

00:07:23,920 --> 00:07:29,080
small and of course you have like the

00:07:26,890 --> 00:07:30,760
standard document root which is just

00:07:29,080 --> 00:07:32,020
root because it doesn't matter if it's a

00:07:30,760 --> 00:07:34,860
document it's just like the root

00:07:32,020 --> 00:07:36,880
directory and you have location matches

00:07:34,860 --> 00:07:39,220
and what's the coolest thing at least

00:07:36,880 --> 00:07:42,160
from my perspective in what index can do

00:07:39,220 --> 00:07:43,630
is having in location clear slash so

00:07:42,160 --> 00:07:46,590
everything that's better do the standard

00:07:43,630 --> 00:07:49,210
path if there's no specific match to it

00:07:46,590 --> 00:07:50,530
it's going to match with this thing so

00:07:49,210 --> 00:07:52,150
this is basically a regular expression

00:07:50,530 --> 00:07:53,440
and it's very simple form you can even

00:07:52,150 --> 00:07:55,360
have regular expressions in a complex

00:07:53,440 --> 00:07:58,000
form in here this is really a simple

00:07:55,360 --> 00:08:01,900
example so basically all requests gonna

00:07:58,000 --> 00:08:04,570
match to this small section and the cool

00:08:01,900 --> 00:08:07,480
thing here is it says try files the

00:08:04,570 --> 00:08:09,340
requested URI so what the webserver is

00:08:07,480 --> 00:08:10,990
going to do is it's going to check if

00:08:09,340 --> 00:08:13,330
that particular requested your eye is

00:08:10,990 --> 00:08:16,030
meshing the file that's under this

00:08:13,330 --> 00:08:19,090
directory structure if it is it's going

00:08:16,030 --> 00:08:20,590
to deliver it if it is not well it's

00:08:19,090 --> 00:08:23,350
going to be forwarded to this location

00:08:20,590 --> 00:08:24,640
and since this is not a location even

00:08:23,350 --> 00:08:25,810
though that's for the syntactic point of

00:08:24,640 --> 00:08:27,190
your location as well it's not a

00:08:25,810 --> 00:08:30,370
location you can specify from the

00:08:27,190 --> 00:08:32,229
outside it's not never gonna match you

00:08:30,370 --> 00:08:34,810
can use whatever kind of key here and

00:08:32,229 --> 00:08:37,330
then have it forwarded to the actual PHP

00:08:34,810 --> 00:08:39,640
processing so with this simple thing you

00:08:37,330 --> 00:08:41,170
basically tell the web server everything

00:08:39,640 --> 00:08:42,490
that's actually a local file just

00:08:41,170 --> 00:08:45,550
deliver it and don't bother telling

00:08:42,490 --> 00:08:47,530
anybody just do it as soon as you don't

00:08:45,550 --> 00:08:51,010
find this file for what the request to

00:08:47,530 --> 00:08:52,630
PHP this of course has the negative side

00:08:51,010 --> 00:08:54,550
of it people come up with really crazy

00:08:52,630 --> 00:08:56,850
file names or whatever kind of

00:08:54,550 --> 00:08:59,199
they all gonna end up at the PHP level

00:08:56,850 --> 00:09:01,720
so you don't necessarily directly get a

00:08:59,199 --> 00:09:03,040
404 but this is not the standard thing

00:09:01,720 --> 00:09:05,769
to expect that people come up with

00:09:03,040 --> 00:09:08,170
really bizarre requests and if you have

00:09:05,769 --> 00:09:09,970
a somewhat sane routing it's not going

00:09:08,170 --> 00:09:12,699
to be that expensive on the PHP level

00:09:09,970 --> 00:09:15,790
anyways to realize okay this is another

00:09:12,699 --> 00:09:17,350
request I can handle what also is quite

00:09:15,790 --> 00:09:19,449
interesting to notice is that this

00:09:17,350 --> 00:09:23,589
script file name that we have in this

00:09:19,449 --> 00:09:26,410
line in my example is static that means

00:09:23,589 --> 00:09:28,870
pretty much every modern web application

00:09:26,410 --> 00:09:32,170
has one base file usually it's called

00:09:28,870 --> 00:09:35,019
index dot PHP or in my case bootstrap

00:09:32,170 --> 00:09:36,550
dot PHP so every week this is going to

00:09:35,019 --> 00:09:38,319
go through that single file I don't need

00:09:36,550 --> 00:09:39,910
the generic file name matching whatever

00:09:38,319 --> 00:09:42,430
kind of bizarre things anymore I don't

00:09:39,910 --> 00:09:44,350
need any compute complex rewrite rules

00:09:42,430 --> 00:09:47,680
or anything just go to forward all

00:09:44,350 --> 00:09:49,089
requests to that particular script of

00:09:47,680 --> 00:09:50,709
course you can say okay I don't really

00:09:49,089 --> 00:09:52,540
want this I want to have the old way of

00:09:50,709 --> 00:09:54,639
doing it then you just have to pass in

00:09:52,540 --> 00:09:56,309
the URI again as a parameter in here and

00:09:54,639 --> 00:09:58,480
then it's going to be relative to that

00:09:56,309 --> 00:10:02,019
another thing that you might notice is

00:09:58,480 --> 00:10:05,769
that this bootstrap file here is not

00:10:02,019 --> 00:10:07,660
another document root that's quite

00:10:05,769 --> 00:10:09,160
helpful because the web server doesn't

00:10:07,660 --> 00:10:10,389
need to know that particular file

00:10:09,160 --> 00:10:11,949
because it's never going to actually

00:10:10,389 --> 00:10:14,649
deliver it it's going to be executed

00:10:11,949 --> 00:10:17,350
it's code so it's going to be run by PHP

00:10:14,649 --> 00:10:18,790
so theoretically this particular path

00:10:17,350 --> 00:10:21,519
does not even have to be on the same

00:10:18,790 --> 00:10:23,529
server all we're telling in this

00:10:21,519 --> 00:10:25,660
configuration setting here is you know

00:10:23,529 --> 00:10:28,089
what pass it on to this IP address on

00:10:25,660 --> 00:10:30,790
that particular port and then run this

00:10:28,089 --> 00:10:32,410
particular script if this is the same

00:10:30,790 --> 00:10:34,480
machine okay based on this IP address it

00:10:32,410 --> 00:10:35,709
obviously is but if it's a different IP

00:10:34,480 --> 00:10:37,600
address it's going to be a different

00:10:35,709 --> 00:10:40,509
machine and that path is not on the same

00:10:37,600 --> 00:10:42,309
box so you have now what people actually

00:10:40,509 --> 00:10:43,629
hope for quite a while you have the web

00:10:42,309 --> 00:10:44,980
server which is just the web server and

00:10:43,629 --> 00:10:47,410
everything else is on an application

00:10:44,980 --> 00:10:48,990
server you don't need to have actual

00:10:47,410 --> 00:10:51,670
source code on the web server anymore

00:10:48,990 --> 00:10:53,110
which is quite helpful it is from a

00:10:51,670 --> 00:10:54,629
security perspective and remember and

00:10:53,110 --> 00:10:57,339
the security paranoid so I should know

00:10:54,629 --> 00:11:02,889
at least be afraid enough to actually

00:10:57,339 --> 00:11:07,440
care ok so having separated concerns web

00:11:02,889 --> 00:11:10,630
server web stuff PHP PHP stuff

00:11:07,440 --> 00:11:14,230
so as I said before this is one single

00:11:10,630 --> 00:11:17,290
thing and how this actual service is

00:11:14,230 --> 00:11:18,610
executed as in how many PHP processes

00:11:17,290 --> 00:11:20,529
are waiting it's something you have to

00:11:18,610 --> 00:11:23,170
configure on PHP level which is not

00:11:20,529 --> 00:11:24,820
something we're gonna cover today but of

00:11:23,170 --> 00:11:28,810
course having one single machine is not

00:11:24,820 --> 00:11:30,700
necessarily helpful in scaling so the

00:11:28,810 --> 00:11:32,260
cool thing is as I said also before

00:11:30,700 --> 00:11:35,500
nginx is quite often used as a load

00:11:32,260 --> 00:11:36,730
balancer usually load balancing two HTTP

00:11:35,500 --> 00:11:39,279
demons on the backend

00:11:36,730 --> 00:11:41,710
so whether you playing proxy but it can

00:11:39,279 --> 00:11:43,450
also do the same thing with the PHP pool

00:11:41,710 --> 00:11:45,339
so you can say okay I'm going to create

00:11:43,450 --> 00:11:47,830
an upstream element we'll give it a name

00:11:45,339 --> 00:11:49,980
in this case PHP pool and then define

00:11:47,830 --> 00:11:52,540
whatever amount of service I want and

00:11:49,980 --> 00:11:54,190
the cool thing is otherwise it wouldn't

00:11:52,540 --> 00:11:55,839
be real load balancing is you can

00:11:54,190 --> 00:11:58,480
specify all kinds of attributes along

00:11:55,839 --> 00:12:00,850
and the most important part here is that

00:11:58,480 --> 00:12:02,200
having the weight telling okay it's more

00:12:00,850 --> 00:12:05,920
likely that this server is going to be

00:12:02,200 --> 00:12:08,529
picked this is just a generic load

00:12:05,920 --> 00:12:10,420
balancing mechanism you can specify the

00:12:08,529 --> 00:12:13,420
weights and you can say okay if this

00:12:10,420 --> 00:12:17,230
machine fails to reply on three requests

00:12:13,420 --> 00:12:20,050
we're gonna timeout it for 30 seconds so

00:12:17,230 --> 00:12:21,910
it's not even going to get stuck if one

00:12:20,050 --> 00:12:24,010
of the machines are down its don't it

00:12:21,910 --> 00:12:25,959
realize ok the third attempt this box

00:12:24,010 --> 00:12:28,630
did not return the relative apply within

00:12:25,959 --> 00:12:31,150
recent timeouts we're going to fail this

00:12:28,630 --> 00:12:33,220
machine for 30 seconds so it's not going

00:12:31,150 --> 00:12:34,570
to get requests all the time because

00:12:33,220 --> 00:12:36,760
maybe it's just simply overloaded and

00:12:34,570 --> 00:12:38,290
nginx doesn't know about it so 30

00:12:36,760 --> 00:12:39,520
seconds wait time might solve the

00:12:38,290 --> 00:12:42,400
problem you can of course configure

00:12:39,520 --> 00:12:44,230
those values as you like another cool

00:12:42,400 --> 00:12:46,360
thing is the backup in here this

00:12:44,230 --> 00:12:48,310
particular box is not going to get any

00:12:46,360 --> 00:12:52,510
traffic unless one of those things are

00:12:48,310 --> 00:12:54,550
down so you can even create hot standby

00:12:52,510 --> 00:12:57,940
machines in that context which is quite

00:12:54,550 --> 00:12:59,920
helpful of course you need to map this

00:12:57,940 --> 00:13:02,110
stuff back into the configuration and

00:12:59,920 --> 00:13:03,670
the only thing that's changed compared

00:13:02,110 --> 00:13:05,529
to the thing before if that the faster

00:13:03,670 --> 00:13:12,130
the I pass here now has just the key

00:13:05,529 --> 00:13:14,770
name of my pool quite subtle so far

00:13:12,130 --> 00:13:17,200
right the cool thing is with all this

00:13:14,770 --> 00:13:18,970
matching things here and all the pools

00:13:17,200 --> 00:13:22,570
and configurations

00:13:18,970 --> 00:13:22,960
all the time adding ports so of course I

00:13:22,570 --> 00:13:25,270
can

00:13:22,960 --> 00:13:27,070
now even decide to run different PHP

00:13:25,270 --> 00:13:29,320
versions at the same point in time by

00:13:27,070 --> 00:13:31,180
simply having different PHP stacks with

00:13:29,320 --> 00:13:33,700
on different spots so let's say I'm

00:13:31,180 --> 00:13:38,260
going to create a PHP pool for 5 2 or 3

00:13:33,700 --> 00:13:41,320
or 4 5 . 5 & 4 5 foot 4 maybe beter of 5

00:13:38,260 --> 00:13:42,970
6 whatever just different ports they may

00:13:41,320 --> 00:13:45,790
be even on the same machine then

00:13:42,970 --> 00:13:47,620
configure a different location entry and

00:13:45,790 --> 00:13:49,450
say ok you know we have this particular

00:13:47,620 --> 00:13:51,490
part of software maybe for example we

00:13:49,450 --> 00:13:54,820
had to embed a forum which doesn't work

00:13:51,490 --> 00:13:56,620
with PHP 5 5 but requires PHP 5 3 well

00:13:54,820 --> 00:13:58,450
then just match your location on the

00:13:56,620 --> 00:14:02,920
forum and then forward all the requests

00:13:58,450 --> 00:14:03,940
to the 5/3 pool since it's not part of

00:14:02,920 --> 00:14:05,620
the webserver anymore

00:14:03,940 --> 00:14:07,540
it can be used at any particular spot

00:14:05,620 --> 00:14:09,310
and you can decide even on a per file

00:14:07,540 --> 00:14:10,660
basis actually you know I'm going to

00:14:09,310 --> 00:14:12,300
forward this to this particular type of

00:14:10,660 --> 00:14:14,890
pool and this particular configuration

00:14:12,300 --> 00:14:17,560
it can also be quite helpful quite many

00:14:14,890 --> 00:14:19,180
people run software that has different

00:14:17,560 --> 00:14:21,160
tasks to accomplish at the same point in

00:14:19,180 --> 00:14:23,650
time or at least in the site in general

00:14:21,160 --> 00:14:25,240
saying for example you have a standard

00:14:23,650 --> 00:14:27,130
website for browsing and there's surf

00:14:25,240 --> 00:14:29,140
affinity for example upload pictures and

00:14:27,130 --> 00:14:30,820
they have to get rescaled or check for

00:14:29,140 --> 00:14:33,160
viruses whatever so this is obviously a

00:14:30,820 --> 00:14:35,680
bit of a more complex task so it might

00:14:33,160 --> 00:14:37,210
require more memory now it doesn't make

00:14:35,680 --> 00:14:40,030
any sense to have the standard browsing

00:14:37,210 --> 00:14:41,830
processes run forever and consume memory

00:14:40,030 --> 00:14:43,420
like crazy just because one single

00:14:41,830 --> 00:14:46,300
aspect of the application might require

00:14:43,420 --> 00:14:48,010
this with this tipple approach you can

00:14:46,300 --> 00:14:49,330
say okay if it's the upload script we're

00:14:48,010 --> 00:14:51,190
going to forward it to a specific

00:14:49,330 --> 00:14:52,510
location which is just going to have

00:14:51,190 --> 00:14:54,040
more memory assigned and run around

00:14:52,510 --> 00:14:56,800
times everything else has to accept

00:14:54,040 --> 00:14:59,100
within 5 seconds and has to only we use

00:14:56,800 --> 00:15:01,870
whatever kind of small amount of memory

00:14:59,100 --> 00:15:03,640
so that's really easy to scale things

00:15:01,870 --> 00:15:05,650
and to limit things and even to limit

00:15:03,640 --> 00:15:07,030
side effects in case you realize and

00:15:05,650 --> 00:15:09,280
people are attacking you and you have a

00:15:07,030 --> 00:15:11,740
descriptor is going to be limited in its

00:15:09,280 --> 00:15:15,070
resources there's hardly any impact on

00:15:11,740 --> 00:15:16,900
it as soon as you allow everybody to do

00:15:15,070 --> 00:15:19,089
everything just because one tiny aspect

00:15:16,900 --> 00:15:21,570
may eventually require more permissions

00:15:19,089 --> 00:15:23,980
or more memory more CPU time whatever

00:15:21,570 --> 00:15:26,320
you're going to end up having problems

00:15:23,980 --> 00:15:27,820
if somebody is trying to attack you and

00:15:26,320 --> 00:15:29,410
as soon as you scale it out into smaller

00:15:27,820 --> 00:15:30,850
processes and they're smaller pools that

00:15:29,410 --> 00:15:32,110
doesn't have to be a fool of like

00:15:30,850 --> 00:15:32,769
hundreds of machines it can just be one

00:15:32,110 --> 00:15:35,199
single instance

00:15:32,769 --> 00:15:36,459
it's perfectly fine you can even run

00:15:35,199 --> 00:15:39,069
different configurations on the same

00:15:36,459 --> 00:15:42,399
machine just to limit everything you can

00:15:39,069 --> 00:15:45,040
also run the PHP fpm process as a

00:15:42,399 --> 00:15:46,660
different user saying okay you know this

00:15:45,040 --> 00:15:49,480
is the standard application is running

00:15:46,660 --> 00:15:51,129
as PHP or nginx or whatever kind of user

00:15:49,480 --> 00:15:52,329
that makes sense for you and this

00:15:51,129 --> 00:15:53,679
particular process is running as a

00:15:52,329 --> 00:15:54,910
different user because it needs to run

00:15:53,679 --> 00:15:57,160
different things has different

00:15:54,910 --> 00:15:59,470
permissions it's really easy to make

00:15:57,160 --> 00:16:01,989
small tiny boxes that are isolated and

00:15:59,470 --> 00:16:04,089
just limited to a certain requirement

00:16:01,989 --> 00:16:09,040
and nothing else which is really really

00:16:04,089 --> 00:16:19,689
helpful so with this particular change

00:16:09,040 --> 00:16:22,029
yes the question it's the same it's just

00:16:19,689 --> 00:16:24,459
an extension to PHP and you can decide

00:16:22,029 --> 00:16:26,499
for whatever reason to form I have a for

00:16:24,459 --> 00:16:28,540
example you want to have the same or the

00:16:26,499 --> 00:16:30,160
center website run without XD back but

00:16:28,540 --> 00:16:32,170
certain area of you for your debugging

00:16:30,160 --> 00:16:33,939
in for example have a configuration

00:16:32,170 --> 00:16:36,279
setting that's going to run that on a

00:16:33,939 --> 00:16:39,339
particular stack it won't be on stack

00:16:36,279 --> 00:16:40,959
where you load X debug for example in

00:16:39,339 --> 00:16:42,339
general I wouldn't recommend running XD

00:16:40,959 --> 00:16:44,529
back on production because it's having

00:16:42,339 --> 00:16:45,939
quite some impact Excite pop would be

00:16:44,529 --> 00:16:47,829
easier if you're not debugging but just

00:16:45,939 --> 00:16:49,329
seeing performance data if H buff does

00:16:47,829 --> 00:16:52,029
not have any runtime impact that's

00:16:49,329 --> 00:16:54,699
actually enabled so excited for would be

00:16:52,029 --> 00:16:58,420
easier and less painful terms of

00:16:54,699 --> 00:17:04,380
performance that would simply create a

00:16:58,420 --> 00:17:06,370
different pool for that I won't really

00:17:04,380 --> 00:17:07,809
depends on your on your context it's

00:17:06,370 --> 00:17:09,880
really hard to answer in a generic way

00:17:07,809 --> 00:17:11,260
if that makes sense or not but you can

00:17:09,880 --> 00:17:12,939
of course have different configurations

00:17:11,260 --> 00:17:15,010
with different extensions loaded as well

00:17:12,939 --> 00:17:17,799
you don't need to have for example the

00:17:15,010 --> 00:17:19,179
imagemagick extension enabled if nobody

00:17:17,799 --> 00:17:21,579
uses that except for one script and you

00:17:19,179 --> 00:17:24,069
create one pool that only has that that

00:17:21,579 --> 00:17:25,689
makes the PHP finally smaller again by

00:17:24,069 --> 00:17:27,520
default everybody thinks like okay we

00:17:25,689 --> 00:17:29,590
need a one-size-fits-all configuration

00:17:27,520 --> 00:17:31,090
which is perfectly fine if you have just

00:17:29,590 --> 00:17:33,100
one machine and it's only a small amount

00:17:31,090 --> 00:17:35,139
of request but if you start to realize

00:17:33,100 --> 00:17:37,149
that you're losing quite some CPU time

00:17:35,139 --> 00:17:38,020
memory and others resources that I

00:17:37,149 --> 00:17:39,549
actually quite valuable

00:17:38,020 --> 00:17:42,010
if the server starts to hit a certain

00:17:39,549 --> 00:17:44,500
level of activity it makes a lot of

00:17:42,010 --> 00:17:45,929
sense to reduce the binary size that's

00:17:44,500 --> 00:17:48,240
actually running to a sweet

00:17:45,929 --> 00:17:49,710
small amount and only that particular on

00:17:48,240 --> 00:17:50,940
that the majority of things need and

00:17:49,710 --> 00:17:52,379
everything else needs to get scaled out

00:17:50,940 --> 00:17:54,330
to a different process I mean there's

00:17:52,379 --> 00:17:56,039
still one process running with all the

00:17:54,330 --> 00:17:57,450
extensions or at least one law for

00:17:56,039 --> 00:17:59,519
example the imagemagick thing for

00:17:57,450 --> 00:18:00,600
rescaling and working with images but

00:17:59,519 --> 00:18:03,090
everything else is running on the

00:18:00,600 --> 00:18:04,169
smallest possible thing and then the

00:18:03,090 --> 00:18:05,730
majority of things are running smaller

00:18:04,169 --> 00:18:07,529
so you have like hundreds of requests

00:18:05,730 --> 00:18:09,119
with hardly any memory usage and you

00:18:07,529 --> 00:18:11,669
have only one process that whether

00:18:09,119 --> 00:18:13,259
whatever request amount maybe it's two

00:18:11,669 --> 00:18:34,409
it really depends on how much you have

00:18:13,259 --> 00:18:36,809
to scale yes well it has to be something

00:18:34,409 --> 00:18:38,610
the web server can determine so if it's

00:18:36,809 --> 00:18:40,619
somewhat in the path that you can

00:18:38,610 --> 00:18:43,289
determine that as a rule then that will

00:18:40,619 --> 00:18:45,029
work you can even have it look into the

00:18:43,289 --> 00:18:47,490
post request so if you see it's an

00:18:45,029 --> 00:18:49,980
upload request as in it's on post

00:18:47,490 --> 00:18:53,159
and to this particular type of URL then

00:18:49,980 --> 00:18:55,019
routed you can add where it's really I'm

00:18:53,159 --> 00:18:56,909
trying to keep the smallest examples

00:18:55,019 --> 00:18:59,519
here and your next has a really powerful

00:18:56,909 --> 00:19:00,960
program configuration thing you can even

00:18:59,519 --> 00:19:02,610
write scripts in there to configure

00:19:00,960 --> 00:19:05,220
various things dynamically and have

00:19:02,610 --> 00:19:06,929
decisions based on headers and IP

00:19:05,220 --> 00:19:09,929
addresses you can even say okay if I'm

00:19:06,929 --> 00:19:11,490
running on the local IPS or a range I

00:19:09,929 --> 00:19:13,289
know then we're going to fold it to

00:19:11,490 --> 00:19:14,700
whatever stack with X debug enabled for

00:19:13,289 --> 00:19:16,740
example and everybody else is going to

00:19:14,700 --> 00:19:20,009
get to the stack that it has no X debug

00:19:16,740 --> 00:19:21,389
enabled this is really flexible but you

00:19:20,009 --> 00:19:22,740
have to come up with a pattern that you

00:19:21,389 --> 00:19:24,360
actually the web server can see so it

00:19:22,740 --> 00:19:30,360
has to be something within the HTTP

00:19:24,360 --> 00:19:35,159
request one way or another okay

00:19:30,360 --> 00:19:37,470
okay so with that particular change we

00:19:35,159 --> 00:19:41,779
managed something very important bless

00:19:37,470 --> 00:19:44,100
you we are now technically ready for hvm

00:19:41,779 --> 00:19:46,710
the reason why we are now already and

00:19:44,100 --> 00:19:48,690
not just before is that with my PHP

00:19:46,710 --> 00:19:51,840
everything is loaded within the web

00:19:48,690 --> 00:19:53,370
server and technically hvm does not

00:19:51,840 --> 00:19:54,809
exist as a module because it doesn't

00:19:53,370 --> 00:19:56,640
make any sense for them to create it I

00:19:54,809 --> 00:19:59,010
mean it's software Facebook created and

00:19:56,640 --> 00:20:00,360
they don't run HTTP demons by Apache so

00:19:59,010 --> 00:20:01,860
they didn't have any interest in doing

00:20:00,360 --> 00:20:04,590
so it even took them quite some

00:20:01,860 --> 00:20:05,730
convincing to implement fast UGI because

00:20:04,590 --> 00:20:09,059
they have their own way of handling

00:20:05,730 --> 00:20:10,620
things so I don't have to anybody

00:20:09,059 --> 00:20:14,389
attended the questions talk on a chat

00:20:10,620 --> 00:20:17,190
really everything it ATM does is

00:20:14,389 --> 00:20:19,049
basically created because Facebook had a

00:20:17,190 --> 00:20:20,850
need for it so you have to keep in mind

00:20:19,049 --> 00:20:23,429
if it's not your problem that Facebook

00:20:20,850 --> 00:20:25,230
is solving it's their problem so in case

00:20:23,429 --> 00:20:27,059
your problem is not their problem then

00:20:25,230 --> 00:20:28,980
you might not having this particular

00:20:27,059 --> 00:20:31,409
binding for this tiny of support that

00:20:28,980 --> 00:20:33,750
you actually wanted in this particular

00:20:31,409 --> 00:20:35,460
case Facebook hardly had a need for a

00:20:33,750 --> 00:20:36,720
frosty GI but they realized it makes

00:20:35,460 --> 00:20:38,220
sense if they want to have a bit of a

00:20:36,720 --> 00:20:41,130
public audience and more people actually

00:20:38,220 --> 00:20:44,760
make use of it so far TJ I support got

00:20:41,130 --> 00:20:45,000
edit and for that to work I mean yes I

00:20:44,760 --> 00:20:47,639
know

00:20:45,000 --> 00:20:49,830
Apache theoretically has third-party

00:20:47,639 --> 00:20:52,200
modules for first egi as well but their

00:20:49,830 --> 00:20:55,529
support is so limited and so many things

00:20:52,200 --> 00:20:56,940
don't work that I don't think it's worth

00:20:55,529 --> 00:20:58,049
actually mentioning it and just do it

00:20:56,940 --> 00:21:00,240
for the sake of the arguing that

00:20:58,049 --> 00:21:03,059
actually is there so people don't claim

00:21:00,240 --> 00:21:05,340
yeah Apache can do this as well well it

00:21:03,059 --> 00:21:06,950
can talk to party GI but it's not the

00:21:05,340 --> 00:21:10,679
same what

00:21:06,950 --> 00:21:13,139
anything's can do so having this tiny

00:21:10,679 --> 00:21:15,240
split we are ready for a chat um because

00:21:13,139 --> 00:21:16,799
now we have the web server and we have

00:21:15,240 --> 00:21:21,240
PHP as one binary and we're just given

00:21:16,799 --> 00:21:24,000
to replace PHP by n2 ATM so ATM is a

00:21:21,240 --> 00:21:28,169
standalone thing it's pretty much the

00:21:24,000 --> 00:21:30,630
same from executing then PHP would have

00:21:28,169 --> 00:21:33,299
been by fast VIP means as I'm running

00:21:30,630 --> 00:21:35,309
PHP fpm you can run it from the command

00:21:33,299 --> 00:21:39,600
line and of course you have to install

00:21:35,309 --> 00:21:42,270
it the easiest way at least if you are

00:21:39,600 --> 00:21:44,580
running red head distributions is to

00:21:42,270 --> 00:21:47,070
create a young repository

00:21:44,580 --> 00:21:50,040
or actually not really create but just

00:21:47,070 --> 00:21:54,120
configure it so this is a configuration

00:21:50,040 --> 00:21:56,790
file 8hp MDOT repo so far Facebook does

00:21:54,120 --> 00:21:58,980
not really care too much about actually

00:21:56,790 --> 00:22:00,900
releasing installed scripts for that so

00:21:58,980 --> 00:22:03,150
you just have to do that manually which

00:22:00,900 --> 00:22:05,190
is a really simple configuration file

00:22:03,150 --> 00:22:07,440
for it's the same for every repo type

00:22:05,190 --> 00:22:10,560
basically you specify the path where

00:22:07,440 --> 00:22:14,340
that stuff needs to be fetched from you

00:22:10,560 --> 00:22:16,380
enable it you say you wanna run the mg

00:22:14,340 --> 00:22:20,880
PG check all the files

00:22:16,380 --> 00:22:23,550
and this is where the GPU file would be

00:22:20,880 --> 00:22:25,710
located this of course can be skipped at

00:22:23,550 --> 00:22:28,020
least in theory but again the security

00:22:25,710 --> 00:22:29,760
paranoid I wouldn't install any software

00:22:28,020 --> 00:22:32,100
that's not been signed by anyone that I

00:22:29,760 --> 00:22:33,810
at least to some extent trust and since

00:22:32,100 --> 00:22:35,100
they released their public key for it

00:22:33,810 --> 00:22:36,810
I'm going to install that key and at

00:22:35,100 --> 00:22:38,340
least I know if something is really

00:22:36,810 --> 00:22:40,320
broken with it at least I'm a facebook

00:22:38,340 --> 00:22:43,050
screw-up and not somebody else managed

00:22:40,320 --> 00:22:44,850
to hack in between so for that to work

00:22:43,050 --> 00:22:49,170
we of course have to get this particular

00:22:44,850 --> 00:22:51,030
file first and that's actually quite

00:22:49,170 --> 00:22:52,710
simple we just have to get this file

00:22:51,030 --> 00:22:55,620
this is available on the download page

00:22:52,710 --> 00:22:57,510
from them and we just place it into the

00:22:55,620 --> 00:22:59,780
path that we just have configured in the

00:22:57,510 --> 00:23:03,270
previous slide as in this directory here

00:22:59,780 --> 00:23:05,610
so this is really simple just W get to

00:23:03,270 --> 00:23:07,020
put there to file there then we are

00:23:05,610 --> 00:23:09,240
basically already set to install it

00:23:07,020 --> 00:23:11,100
there's not really any big magic of

00:23:09,240 --> 00:23:13,110
course you can get the source code they

00:23:11,100 --> 00:23:14,460
have all the sources on github and you

00:23:13,110 --> 00:23:17,010
can compile it yourself

00:23:14,460 --> 00:23:19,740
they have some patched libraries that

00:23:17,010 --> 00:23:22,260
they require so it's even having SAP

00:23:19,740 --> 00:23:24,030
repositories included so and it takes

00:23:22,260 --> 00:23:25,680
quite some time to compile I try to

00:23:24,030 --> 00:23:27,710
compile it on this machine and it took I

00:23:25,680 --> 00:23:29,910
think like nine hours or so in total

00:23:27,710 --> 00:23:32,280
just because they don't have I don't

00:23:29,910 --> 00:23:33,960
have the much scaling powers I mean it's

00:23:32,280 --> 00:23:36,870
a laptop CPU so it's not necessarily

00:23:33,960 --> 00:23:39,600
built to be really really fast so it

00:23:36,870 --> 00:23:41,130
takes really some time but once it's

00:23:39,600 --> 00:23:44,490
compiled in general I mean it's a C

00:23:41,130 --> 00:23:46,110
program to some extent so once it's done

00:23:44,490 --> 00:23:48,210
and you only change tiny things that's

00:23:46,110 --> 00:23:51,090
getting faster and recompiling it but

00:23:48,210 --> 00:23:52,740
for me at least if I want to install an

00:23:51,090 --> 00:23:54,960
operating system I'm going to use

00:23:52,740 --> 00:23:56,880
precompiled packages so if I'm going to

00:23:54,960 --> 00:23:58,020
add additional components I'm going to

00:23:56,880 --> 00:24:01,560
use pre-compile components

00:23:58,020 --> 00:24:06,090
as well that's a matter of trusting the

00:24:01,560 --> 00:24:08,580
vendor of course sure but mixing manual

00:24:06,090 --> 00:24:09,960
installs and using operating system

00:24:08,580 --> 00:24:11,700
installs it's not necessarily very

00:24:09,960 --> 00:24:13,350
helpful if you want to maintain a bunch

00:24:11,700 --> 00:24:16,110
of service it may be okay for testing

00:24:13,350 --> 00:24:19,290
purposes and I even compiled a TPM

00:24:16,110 --> 00:24:20,850
sometimes myself now using my own server

00:24:19,290 --> 00:24:25,830
which has a bunch of more CPU so it's

00:24:20,850 --> 00:24:27,510
going a lot faster and then create

00:24:25,830 --> 00:24:29,700
packages myself so I can install

00:24:27,510 --> 00:24:30,620
packages on here again so that's just

00:24:29,700 --> 00:24:35,190
easier to manage

00:24:30,620 --> 00:24:36,750
speaking of installing this is all we

00:24:35,190 --> 00:24:38,160
have to do once we have configured the

00:24:36,750 --> 00:24:39,660
repository it's pretty much works the

00:24:38,160 --> 00:24:42,000
same way if you have a Debian Ubuntu

00:24:39,660 --> 00:24:44,400
system of course you're not going to use

00:24:42,000 --> 00:24:46,970
Yummie use I use apt-get but it's the

00:24:44,400 --> 00:24:49,110
same concept just at the end sources

00:24:46,970 --> 00:24:50,430
repository the up repository from them

00:24:49,110 --> 00:24:52,290
it's on the same machine it's just a

00:24:50,430 --> 00:24:56,120
different path and you can install it

00:24:52,290 --> 00:24:58,440
with up get installed hvm so same thing

00:24:56,120 --> 00:25:02,610
once we got it installed we are pretty

00:24:58,440 --> 00:25:09,840
much ready to roll and we can just start

00:25:02,610 --> 00:25:12,990
it as a 50 GI server the reason why this

00:25:09,840 --> 00:25:15,180
is actually having mode server is that

00:25:12,990 --> 00:25:17,610
it hbm by itself is pretty much the same

00:25:15,180 --> 00:25:19,470
as PHP you can just run PHP and then

00:25:17,610 --> 00:25:21,270
give it a file name and then it's going

00:25:19,470 --> 00:25:23,550
to execute it but this case we want to

00:25:21,270 --> 00:25:24,840
have it as the server so they have

00:25:23,550 --> 00:25:27,540
everything in one binary they don't have

00:25:24,840 --> 00:25:30,230
PHP fpm or far CGI as a specific binary

00:25:27,540 --> 00:25:33,110
it's just a switch on the command line

00:25:30,230 --> 00:25:35,970
and since we are in case we are

00:25:33,110 --> 00:25:38,370
upgrading or moving over and we didn't

00:25:35,970 --> 00:25:40,110
stop the PHP process yet we have a

00:25:38,370 --> 00:25:43,380
conflict because this thought of ously

00:25:40,110 --> 00:25:44,850
is already taken and now again something

00:25:43,380 --> 00:25:47,100
really cool comes into play because if

00:25:44,850 --> 00:25:49,530
we cannot change the port here we can

00:25:47,100 --> 00:25:51,210
decide again based on the directory or

00:25:49,530 --> 00:25:53,550
on the request or whatever kind of

00:25:51,210 --> 00:25:55,650
pattern you want to use as a decision

00:25:53,550 --> 00:26:00,030
maker whether we're going to run this

00:25:55,650 --> 00:26:02,010
particular code with PHP or with hvm so

00:26:00,030 --> 00:26:04,110
you can have both it's not a

00:26:02,010 --> 00:26:07,530
one-size-fits-all and it's not one or

00:26:04,110 --> 00:26:09,740
the other you can have both the cool

00:26:07,530 --> 00:26:11,550
thing is even if you have a session the

00:26:09,740 --> 00:26:13,410
theorization format

00:26:11,550 --> 00:26:15,990
of course identical so you can store

00:26:13,410 --> 00:26:17,670
stuff in a session from ATM and then

00:26:15,990 --> 00:26:19,800
read it later on with a standard PHP

00:26:17,670 --> 00:26:22,050
again it just works it's doing all the

00:26:19,800 --> 00:26:24,210
same things so it's really easy to

00:26:22,050 --> 00:26:25,980
realize okay you know this is taking too

00:26:24,210 --> 00:26:27,720
long and this works with HP I'm already

00:26:25,980 --> 00:26:29,370
so we're just gonna run this with a 3m

00:26:27,720 --> 00:26:30,780
but everything else is not necessarily

00:26:29,370 --> 00:26:32,670
stable yet so we're going to split the

00:26:30,780 --> 00:26:35,090
processes and just have some processes

00:26:32,670 --> 00:26:38,850
run with HTM and others don't

00:26:35,090 --> 00:26:42,210
that's fairly fairly easy and I think

00:26:38,850 --> 00:26:44,700
it's quite powerful okay since we don't

00:26:42,210 --> 00:26:45,929
have any specific IP addresses or any

00:26:44,700 --> 00:26:48,540
kind of confirmation obviously is going

00:26:45,929 --> 00:26:51,630
to be local and quite many people

00:26:48,540 --> 00:26:53,100
realize using local and IP address is

00:26:51,630 --> 00:26:56,400
kind of stupid so because have we have

00:26:53,100 --> 00:26:59,250
sockets for that so we can use sockets

00:26:56,400 --> 00:27:02,880
of course as well and even though it's

00:26:59,250 --> 00:27:05,520
been installed by by a package in this

00:27:02,880 --> 00:27:08,010
case an RPM package or a Debian package

00:27:05,520 --> 00:27:13,350
we have to configure the path names

00:27:08,010 --> 00:27:15,840
where the socket is going to be and then

00:27:13,350 --> 00:27:19,200
can run this I'm using this as engine

00:27:15,840 --> 00:27:20,820
axis which means that also an X is able

00:27:19,200 --> 00:27:22,320
to access the socket otherwise it's

00:27:20,820 --> 00:27:23,730
going to be quite hard for the web

00:27:22,320 --> 00:27:26,940
server to communicate with the socket

00:27:23,730 --> 00:27:30,420
server so it's the same thing speaking

00:27:26,940 --> 00:27:32,730
faster the eye just over the socket and

00:27:30,420 --> 00:27:34,110
of course I would have to adjust the hvm

00:27:32,730 --> 00:27:36,660
and not be there in the next

00:27:34,110 --> 00:27:38,730
configuration to use the socket and not

00:27:36,660 --> 00:27:40,830
the IP address in this case as well but

00:27:38,730 --> 00:27:43,470
this is the same thing just replacing

00:27:40,830 --> 00:27:45,980
the IP by UNIX colon and then the path

00:27:43,470 --> 00:27:45,980
to the socket

00:27:49,320 --> 00:27:52,680
okay the headline is actually completely

00:27:51,240 --> 00:27:57,090
wrong that shouldn't mean it makes it

00:27:52,680 --> 00:27:59,550
service so if you look at this

00:27:57,090 --> 00:28:02,040
particular service file later versions

00:27:59,550 --> 00:28:04,260
of pretty much every line of

00:28:02,040 --> 00:28:08,540
distribution these days is going to use

00:28:04,260 --> 00:28:12,540
not the old energy system anymore but

00:28:08,540 --> 00:28:14,250
well system D and to make it a service

00:28:12,540 --> 00:28:15,720
because obviously if you're on an actual

00:28:14,250 --> 00:28:17,070
server you don't want to restart the

00:28:15,720 --> 00:28:19,020
server manually all the time and want to

00:28:17,070 --> 00:28:22,410
run something on a command line so we

00:28:19,020 --> 00:28:24,780
have to have a service so this is basic

00:28:22,410 --> 00:28:25,290
configuration I cannot even type what

00:28:24,780 --> 00:28:29,930
did I do

00:28:25,290 --> 00:28:34,500
it's faster I'm not a CGI service C's

00:28:29,930 --> 00:28:35,850
okay so telling it's a simple service we

00:28:34,500 --> 00:28:37,920
want to run this is pretty much exactly

00:28:35,850 --> 00:28:40,290
the same thing that we had before they

00:28:37,920 --> 00:28:41,190
even ended up the at the end it's the

00:28:40,290 --> 00:28:41,850
same thing that you would run on the

00:28:41,190 --> 00:28:43,680
command line

00:28:41,850 --> 00:28:46,440
just tell it okay you know we want to

00:28:43,680 --> 00:28:47,820
have it run after this type in network

00:28:46,440 --> 00:28:51,270
started because otherwise we may have a

00:28:47,820 --> 00:28:52,620
problem communicating then okay on a

00:28:51,270 --> 00:28:54,270
multi-user target that's a standard

00:28:52,620 --> 00:28:58,380
thing just making sure this stuff

00:28:54,270 --> 00:29:02,940
actually runs in standard services so

00:28:58,380 --> 00:29:04,170
this is really the basic thing the

00:29:02,940 --> 00:29:11,340
goofiness will have quite some time left

00:29:04,170 --> 00:29:16,020
that's perfect because what we ended up

00:29:11,340 --> 00:29:17,820
doing is we switched the right side and

00:29:16,020 --> 00:29:21,150
we still left the left side of course

00:29:17,820 --> 00:29:23,580
and interesting thing is the HBM is

00:29:21,150 --> 00:29:26,730
running on Linux and it's running on Mac

00:29:23,580 --> 00:29:29,310
OS and on any other PST and currently

00:29:26,730 --> 00:29:30,870
it's not running on Windows for the same

00:29:29,310 --> 00:29:32,100
thing as I said before it's not

00:29:30,870 --> 00:29:34,020
Facebook's platform

00:29:32,100 --> 00:29:35,850
Facebook doesn't care it's the same

00:29:34,020 --> 00:29:37,890
thing which actually happened to PHP for

00:29:35,850 --> 00:29:40,380
quite a while that nobody in the PHP

00:29:37,890 --> 00:29:41,940
core team cared enough about windows so

00:29:40,380 --> 00:29:44,370
nobody wrote a Windows port and nobody

00:29:41,940 --> 00:29:46,650
maintained it so it was pure luck if PHP

00:29:44,370 --> 00:29:48,090
would actually run on Windows or not and

00:29:46,650 --> 00:29:50,100
it was Microsoft we had to actually take

00:29:48,090 --> 00:29:51,630
money into their hand and throw it at

00:29:50,100 --> 00:29:55,110
developers to make sure they actually

00:29:51,630 --> 00:29:56,640
maintain a Windows board and this is the

00:29:55,110 --> 00:29:59,130
same for each VM there's no interest

00:29:56,640 --> 00:30:02,760
whatsoever nobody saying enough is

00:29:59,130 --> 00:30:05,460
running PHP fpm on

00:30:02,760 --> 00:30:06,780
in a high-performance environment that's

00:30:05,460 --> 00:30:10,080
the only environment where a JVM would

00:30:06,780 --> 00:30:13,020
actually make sense so nobody needs to

00:30:10,080 --> 00:30:14,790
care about having HTM on Windows that

00:30:13,020 --> 00:30:16,530
makes of course development a bit harder

00:30:14,790 --> 00:30:18,210
if you want to develop on Windows but

00:30:16,530 --> 00:30:20,669
that's what virtual machines are for I

00:30:18,210 --> 00:30:22,620
would say so the right thing is

00:30:20,669 --> 00:30:25,110
perfectly fine Linux is probably going

00:30:22,620 --> 00:30:26,790
to stay if we actually gonna need MySQL

00:30:25,110 --> 00:30:28,190
in your setup pretty much depends on

00:30:26,790 --> 00:30:31,590
your environment what you're going to do

00:30:28,190 --> 00:30:35,549
it's actually quite helpful to replace

00:30:31,590 --> 00:30:37,950
the standard filesystem session stuff by

00:30:35,549 --> 00:30:40,650
memcache or Redis or something there are

00:30:37,950 --> 00:30:42,419
both extensions for PHP they also work

00:30:40,650 --> 00:30:44,640
with ATM not the extensions but the

00:30:42,419 --> 00:30:46,410
configuration logic works so you can

00:30:44,640 --> 00:30:48,890
actually have the session stored in

00:30:46,410 --> 00:30:48,890
either thing

00:30:55,610 --> 00:31:02,970
the extension itself know everything

00:30:59,820 --> 00:31:12,419
that it's not core PHP has to be ported

00:31:02,970 --> 00:31:14,880
to a church VM yeah the session safe

00:31:12,419 --> 00:31:16,350
handling on Redis seems to work I

00:31:14,880 --> 00:31:19,740
haven't tried it myself I've just been

00:31:16,350 --> 00:31:21,150
told it works so I can really tell

00:31:19,740 --> 00:31:23,220
Facebook is using memcache for

00:31:21,150 --> 00:31:24,240
everything so I'm under percent sure

00:31:23,220 --> 00:31:27,539
they have a workingman cache

00:31:24,240 --> 00:31:30,779
implementation memcache D with birth in

00:31:27,539 --> 00:31:32,159
the new API every other extension of

00:31:30,779 --> 00:31:34,320
course of you of your own is an

00:31:32,159 --> 00:31:37,200
extension or any kind of thing XD back

00:31:34,320 --> 00:31:40,880
won't work in HTM either I mean it's a

00:31:37,200 --> 00:31:43,710
PHP extension so it's not kind of work

00:31:40,880 --> 00:31:46,559
the cool thing is that with it at VM you

00:31:43,710 --> 00:31:49,020
can really easily create your own

00:31:46,559 --> 00:31:50,970
extensions because they have basically

00:31:49,020 --> 00:31:52,890
an API that allows you to write that in

00:31:50,970 --> 00:31:54,899
more or less userland code so it's

00:31:52,890 --> 00:31:58,200
pretty much PHP code that you can use to

00:31:54,899 --> 00:31:59,580
bind in C library for example so it's

00:31:58,200 --> 00:32:03,270
technically easy but it's of course not

00:31:59,580 --> 00:32:06,570
the same so if you require specific

00:32:03,270 --> 00:32:09,210
extensions that the facebook team did

00:32:06,570 --> 00:32:11,429
not yet port or care enough about to

00:32:09,210 --> 00:32:12,600
actually implement fully then you're out

00:32:11,429 --> 00:32:14,309
of luck and then you need to go to the

00:32:12,600 --> 00:32:16,080
split way or if it doesn't work because

00:32:14,309 --> 00:32:19,140
every request needs those extensions

00:32:16,080 --> 00:32:21,950
then well then a chat game is not for

00:32:19,140 --> 00:32:21,950
you at least not yet

00:32:23,419 --> 00:32:28,499
okay I don't have that many slides

00:32:26,580 --> 00:32:31,499
anymore because I want to discuss a few

00:32:28,499 --> 00:32:32,700
things and I hope you're still not

00:32:31,499 --> 00:32:33,989
falling asleep even though it's getting

00:32:32,700 --> 00:32:40,080
really warm here at least I'm sweating

00:32:33,989 --> 00:32:43,710
like crazy just in general who heard had

00:32:40,080 --> 00:32:45,539
heard of hvm before coming here that's

00:32:43,710 --> 00:32:47,279
everybody almost that's perfect

00:32:45,539 --> 00:32:51,090
okay who's actually considering or even

00:32:47,279 --> 00:32:53,929
using it already okay

00:32:51,090 --> 00:33:09,619
of the people just voted who is using it

00:32:53,929 --> 00:33:09,619
okay what's your experience okay okay

00:33:19,040 --> 00:33:39,450
and stable okay okay okay cool

00:33:36,980 --> 00:33:42,929
the interesting what the reason why I'm

00:33:39,450 --> 00:33:45,750
asking is that quite many people come to

00:33:42,929 --> 00:33:47,070
us and like hey do we need hvm and this

00:33:45,750 --> 00:33:49,320
is obviously a question that's not

00:33:47,070 --> 00:33:51,090
really easy to answer and I want to take

00:33:49,320 --> 00:33:54,270
if anybody else is carrying to find out

00:33:51,090 --> 00:33:55,860
that answer and as I said before even

00:33:54,270 --> 00:33:57,690
though for repressor which is a quite

00:33:55,860 --> 00:34:01,049
famous open-source project especially in

00:33:57,690 --> 00:34:02,700
the US that's bound to be really good

00:34:01,049 --> 00:34:05,040
support for it sooner or later

00:34:02,700 --> 00:34:07,140
as soon as you have specific problems

00:34:05,040 --> 00:34:09,419
yourself you always have to remember at

00:34:07,140 --> 00:34:11,070
least the way it works currently is for

00:34:09,419 --> 00:34:14,250
Facebook this is basically a spin-off of

00:34:11,070 --> 00:34:15,810
their own needs and if they have time

00:34:14,250 --> 00:34:17,070
and an interest to actually fix the

00:34:15,810 --> 00:34:18,690
problem they're going to work on it

00:34:17,070 --> 00:34:20,760
otherwise you are free to fix it

00:34:18,690 --> 00:34:22,919
yourself which probably means you have

00:34:20,760 --> 00:34:25,350
to understand C and C++ code to actually

00:34:22,919 --> 00:34:27,000
write it in their code base and it's not

00:34:25,350 --> 00:34:28,740
guaranteed to be adopted there's a bunch

00:34:27,000 --> 00:34:31,020
of pull requests on github that they

00:34:28,740 --> 00:34:32,639
don't care to to merge yet for various

00:34:31,020 --> 00:34:34,350
reasons sometimes it's like well we

00:34:32,639 --> 00:34:35,669
don't like this coding style but quite

00:34:34,350 --> 00:34:37,169
often it's like yeah we have to assign

00:34:35,669 --> 00:34:39,119
all kinds of legal things first because

00:34:37,169 --> 00:34:40,919
we are having intellectual property

00:34:39,119 --> 00:34:42,750
stuffy in here we'll just like the

00:34:40,919 --> 00:34:47,220
standard u.s. problem of intellectual

00:34:42,750 --> 00:34:50,040
property and the other thing is it may

00:34:47,220 --> 00:34:52,590
not even be faster than before of course

00:34:50,040 --> 00:34:54,000
the PHP part is going to be faster but

00:34:52,590 --> 00:34:55,500
depending on your application and what

00:34:54,000 --> 00:34:57,990
it's doing it might not actually have

00:34:55,500 --> 00:34:59,460
any benefits if your example just for

00:34:57,990 --> 00:35:01,500
example take the image as I mentioned

00:34:59,460 --> 00:35:03,930
earlier so you have PHP code that's

00:35:01,500 --> 00:35:05,100
going to accept an uploaded file which

00:35:03,930 --> 00:35:06,980
is supposed to be an image and then

00:35:05,100 --> 00:35:10,140
rescale it and then save it somewhere

00:35:06,980 --> 00:35:11,850
yes the PHP part can be faster but

00:35:10,140 --> 00:35:13,320
chances are you're actually using the

00:35:11,850 --> 00:35:14,970
extension to do the image handling which

00:35:13,320 --> 00:35:19,260
already is C so it's not going to be any

00:35:14,970 --> 00:35:20,820
faster anyhow so same thing for database

00:35:19,260 --> 00:35:22,170
if you have an application that's

00:35:20,820 --> 00:35:24,359
reading and writing to a database

00:35:22,170 --> 00:35:27,270
constantly and can't do anything by

00:35:24,359 --> 00:35:28,290
itself except doing really complex

00:35:27,270 --> 00:35:30,040
queries all the time

00:35:28,290 --> 00:35:31,660
well the

00:35:30,040 --> 00:35:36,400
is going to weight faster but that's not

00:35:31,660 --> 00:35:38,770
necessarily going to help you so the

00:35:36,400 --> 00:35:40,990
decision whether or not it ATM is for

00:35:38,770 --> 00:35:42,310
you depends of course first of all or

00:35:40,990 --> 00:35:44,620
the feature that you require already

00:35:42,310 --> 00:35:46,810
implemented that's a bunch of extensions

00:35:44,620 --> 00:35:50,590
that are there quite some of them are

00:35:46,810 --> 00:35:52,840
partially there and quite some just are

00:35:50,590 --> 00:35:55,420
on their plan to be ported or to be

00:35:52,840 --> 00:35:56,980
added later and of course it really

00:35:55,420 --> 00:35:59,860
depends if it's going to be worth the

00:35:56,980 --> 00:36:02,920
hassle if you already made the change as

00:35:59,860 --> 00:36:04,600
I myself back from Apache go to nginx

00:36:02,920 --> 00:36:06,420
then it's really easy to use it as a

00:36:04,600 --> 00:36:08,800
drop-in replacement just give it a try

00:36:06,420 --> 00:36:10,960
if you actually have to change all the

00:36:08,800 --> 00:36:12,280
snake things first then I recommend that

00:36:10,960 --> 00:36:14,080
you actually do this first and make sure

00:36:12,280 --> 00:36:16,780
that you have a stable environment with

00:36:14,080 --> 00:36:18,850
nginx and PHP fpm because then switching

00:36:16,780 --> 00:36:20,230
over and even having tiny parts swapped

00:36:18,850 --> 00:36:22,360
over where you actually might see a

00:36:20,230 --> 00:36:23,920
benefit that's exactly what you're going

00:36:22,360 --> 00:36:26,500
to need and that's going to help you

00:36:23,920 --> 00:36:28,180
most it's not I have to run a chat VM

00:36:26,500 --> 00:36:29,590
hundred percent this may work for many

00:36:28,180 --> 00:36:32,110
applications but it's not a requirement

00:36:29,590 --> 00:36:34,270
having this split-brain kind of approach

00:36:32,110 --> 00:36:36,190
decided to put various things on a chat

00:36:34,270 --> 00:36:38,140
um where the CPU and how it actually

00:36:36,190 --> 00:36:41,500
makes a lot of sense fine

00:36:38,140 --> 00:36:43,600
just do it the current situation really

00:36:41,500 --> 00:36:45,010
is interesting and it's of course there

00:36:43,600 --> 00:36:47,770
are more things happening I mean it's

00:36:45,010 --> 00:36:49,960
not just like HTM there's other projects

00:36:47,770 --> 00:36:52,180
that compile PHP code there's this PHP

00:36:49,960 --> 00:36:54,790
ng project that maybe some people heard

00:36:52,180 --> 00:36:56,800
about that the Zen team that wrote the

00:36:54,790 --> 00:36:58,600
original engine decided to spend quite

00:36:56,800 --> 00:37:01,150
some time and energy on enhancing the

00:36:58,600 --> 00:37:02,830
actual standard PHP so whatever PHP

00:37:01,150 --> 00:37:05,230
version comes next not five not six but

00:37:02,830 --> 00:37:07,300
maybe five seven or even six depending

00:37:05,230 --> 00:37:10,270
on what they choose to use next them

00:37:07,300 --> 00:37:13,000
might have PHP mg in it maybe maybe not

00:37:10,270 --> 00:37:14,590
they're not really clear on that yet but

00:37:13,000 --> 00:37:17,290
this is also going to be quite a lot

00:37:14,590 --> 00:37:19,390
faster again with all the other stuff

00:37:17,290 --> 00:37:22,750
still working of course so it really

00:37:19,390 --> 00:37:24,640
depends what fits your needs best and as

00:37:22,750 --> 00:37:27,400
much as I would like to I cannot really

00:37:24,640 --> 00:37:28,900
answer that for anybody we can look at

00:37:27,400 --> 00:37:30,370
it in case you need it I mean we're

00:37:28,900 --> 00:37:33,580
concerns after all so you can buy our

00:37:30,370 --> 00:37:35,110
knowledge for money but it's still

00:37:33,580 --> 00:37:37,870
something you have to look at betting

00:37:35,110 --> 00:37:40,300
your 7 decided yourself I for myself

00:37:37,870 --> 00:37:41,950
try all my software with ATM and I have

00:37:40,300 --> 00:37:44,030
like I think like five or six bucks that

00:37:41,950 --> 00:37:46,040
are still open and so I got everything

00:37:44,030 --> 00:37:48,230
I wrote works flawlessly with atrium yet

00:37:46,040 --> 00:37:49,430
but it's at least interesting to realize

00:37:48,230 --> 00:37:51,350
that at least a lot of things that you

00:37:49,430 --> 00:37:53,270
do in actual PHP that's a lot faster of

00:37:51,350 --> 00:37:56,000
course but all the benchmarks are really

00:37:53,270 --> 00:37:57,680
cool if they just do PHP only stuff as

00:37:56,000 --> 00:37:59,960
soon as you rely on lots of extensions

00:37:57,680 --> 00:38:02,420
and even if you do XML stuff the

00:37:59,960 --> 00:38:04,670
majority of things happens in little XML

00:38:02,420 --> 00:38:07,310
so if it's an L is slow it'd just be a

00:38:04,670 --> 00:38:08,660
mess not going to make it faster little

00:38:07,310 --> 00:38:10,760
bit smelly luckily is relatively fast

00:38:08,660 --> 00:38:13,160
but still there are various things where

00:38:10,760 --> 00:38:15,560
the PHP execution and the speed of it is

00:38:13,160 --> 00:38:21,230
not going to cost that much of a big

00:38:15,560 --> 00:38:23,990
impact on your application okay we have

00:38:21,230 --> 00:38:27,260
roughly seven minutes for questions in

00:38:23,990 --> 00:38:27,560
case there are questions or it's warm in

00:38:27,260 --> 00:38:52,220
here

00:38:27,560 --> 00:38:54,740
so I would get out of here anyway yes io

00:38:52,220 --> 00:38:56,930
traffic well everything in memory is

00:38:54,740 --> 00:38:59,150
fast of course so I would probably

00:38:56,930 --> 00:39:02,530
recommend simply using a file system as

00:38:59,150 --> 00:39:06,080
intent of s which is in memory that

00:39:02,530 --> 00:39:07,370
kills both problems you have the

00:39:06,080 --> 00:39:08,690
filesystem in memory so it's the

00:39:07,370 --> 00:39:10,420
standard fathom you can easily access it

00:39:08,690 --> 00:39:13,370
from outside without any special tools

00:39:10,420 --> 00:39:15,410
but you can have extensions to nginx for

00:39:13,370 --> 00:39:16,610
Redis I'm I think for a memcache is

00:39:15,410 --> 00:39:18,200
rather I never looked at it because I'm

00:39:16,610 --> 00:39:20,060
usually using Redis for pretty much

00:39:18,200 --> 00:39:23,030
anything that's key value store related

00:39:20,060 --> 00:39:26,290
and you can serve files and whatever

00:39:23,030 --> 00:39:29,060
kind of things from register ectly yes

00:39:26,290 --> 00:39:31,130
recently using an apache load balancer

00:39:29,060 --> 00:39:33,829
and

00:39:31,130 --> 00:39:36,680
other web servers based on a patient

00:39:33,829 --> 00:39:40,039
cells and now we will switch over to the

00:39:36,680 --> 00:39:44,180
nginx constructor and use that what you

00:39:40,039 --> 00:39:49,369
are showing us here and where ah thank

00:39:44,180 --> 00:39:52,420
you okay any more questions okay I think

00:39:49,369 --> 00:39:52,420
everybody is fed up it's way too

00:40:05,200 --> 00:40:11,420
regarding performance because I've read

00:40:08,089 --> 00:40:18,229
a lot using the stock it was like 10 to

00:40:11,420 --> 00:40:20,119
15% much faster than port IP okay IP it

00:40:18,229 --> 00:40:21,440
appears that always has connecting

00:40:20,119 --> 00:40:23,299
handshake all kinds of things even

00:40:21,440 --> 00:40:24,680
though it's local it's still IP so it's

00:40:23,299 --> 00:40:27,289
an overhead and yes you're gonna notice

00:40:24,680 --> 00:40:29,509
that on a really loaded machine if it's

00:40:27,289 --> 00:40:31,630
just like you run it test environment on

00:40:29,509 --> 00:40:34,279
you're not gonna notice the difference

00:40:31,630 --> 00:40:37,009
but I'm really loaded machines you're

00:40:34,279 --> 00:40:38,900
gonna see it the funny thing is that if

00:40:37,009 --> 00:40:40,369
you have high traffic sites this is not

00:40:38,900 --> 00:40:42,440
really a question anymore because you're

00:40:40,369 --> 00:40:44,150
not going to have the web server and PHP

00:40:42,440 --> 00:40:53,079
on the same machine anyway so you cannot

00:40:44,150 --> 00:40:55,670
use sockets not that your question okay

00:40:53,079 --> 00:40:58,180
okay well then thanks for coming thanks

00:40:55,670 --> 00:40:58,180

YouTube URL: https://www.youtube.com/watch?v=2MVfqCXunY4


