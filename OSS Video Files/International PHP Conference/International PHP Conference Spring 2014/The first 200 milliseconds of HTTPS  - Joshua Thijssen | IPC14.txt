Title: The first 200 milliseconds of HTTPS  - Joshua Thijssen | IPC14
Publication date: 2016-06-09
Playlist: International PHP Conference Spring 2014
Description: 
	What happens when your browser connects to a HTTPS secure site? We all know it has to do something with certificates, blue and green address bars and sometimes your browser will give warnings which we normally click away. But what actually happens under the hood? In this talk Joshua Thijssen will give a step-by-step explanation on the first few hundred milliseconds during a connection to HTTPS. He will talk about master secrets, shared secrets, cipher suites, x509 certificates and why secure does not (always) mean secure.


More information: https://phpconference.com/en/
Captions: 
	00:00:06,500 --> 00:00:13,679
welcome everybody so today I want to

00:00:11,519 --> 00:00:17,130
talk about the first 200 milliseconds of

00:00:13,679 --> 00:00:19,320
HTTP I'm not sure what I'm going to do

00:00:17,130 --> 00:00:25,890
with the rest of the 45 minutes I have

00:00:19,320 --> 00:00:29,010
but so we're done pretty quickly now I'm

00:00:25,890 --> 00:00:30,990
gonna talk about a few things first of

00:00:29,010 --> 00:00:32,669
all first of all I'm gonna tell you a

00:00:30,990 --> 00:00:36,750
little bit about what's happening in the

00:00:32,669 --> 00:00:39,469
first 200 milliseconds of HTTP what's

00:00:36,750 --> 00:00:42,690
happening when it creates a connection

00:00:39,469 --> 00:00:46,140
secondly I will try and give some tips

00:00:42,690 --> 00:00:50,129
on how to hardening your set up how to

00:00:46,140 --> 00:00:51,840
set up your HTTP webserver hopefully

00:00:50,129 --> 00:00:55,140
give you some insights in new and

00:00:51,840 --> 00:00:56,129
upcoming techno and which may or may not

00:00:55,140 --> 00:00:58,559
happen in the future

00:00:56,129 --> 00:01:01,620
and hopefully show you a little bit

00:00:58,559 --> 00:01:05,549
about the things you may or may not know

00:01:01,620 --> 00:01:08,640
already so for everybody who was

00:01:05,549 --> 00:01:11,909
thinking this is a talk about heartbleed

00:01:08,640 --> 00:01:13,740
it is not I will show you a little bit

00:01:11,909 --> 00:01:18,270
about what's happening but it's not the

00:01:13,740 --> 00:01:21,540
focus of their presentation how many of

00:01:18,270 --> 00:01:24,540
you have actually used HTTPS to begin

00:01:21,540 --> 00:01:28,680
with if somebody's not raising their

00:01:24,540 --> 00:01:30,540
hand either they are sleeping or if you

00:01:28,680 --> 00:01:34,380
uploaded a cap to YouTube you probably

00:01:30,540 --> 00:01:36,479
have used now this talk is actually

00:01:34,380 --> 00:01:37,290
inspired by a blog post written by Jeff

00:01:36,479 --> 00:01:39,689
Moser

00:01:37,290 --> 00:01:42,750
here's the link if you're interested in

00:01:39,689 --> 00:01:44,490
this stuff hopefully it isn't you are

00:01:42,750 --> 00:01:46,860
interested in take a look at this side

00:01:44,490 --> 00:01:48,990
it's a little bit outdated but still has

00:01:46,860 --> 00:01:51,810
got a lot of information I won't go into

00:01:48,990 --> 00:01:55,470
details today but still it's it's really

00:01:51,810 --> 00:01:58,920
fun to see it so before I'm gonna start

00:01:55,470 --> 00:02:01,590
about HTTPS in general I want to give

00:01:58,920 --> 00:02:04,860
you a little bit of information about

00:02:01,590 --> 00:02:08,009
what's happening before that I'm going

00:02:04,860 --> 00:02:09,929
to talk about SSL and I think you're all

00:02:08,009 --> 00:02:12,349
familiar with the term secure socket

00:02:09,929 --> 00:02:15,970
layer yes no a little bit

00:02:12,349 --> 00:02:19,220
there's gonna be short but scary history

00:02:15,970 --> 00:02:22,549
back in the old days and with the old

00:02:19,220 --> 00:02:25,579
days I mean 1994 who is older than that

00:02:22,549 --> 00:02:29,209
younger than that other people born in

00:02:25,579 --> 00:02:35,390
94 I always feel old

00:02:29,209 --> 00:02:38,359
94 I can remember that in 1994 a company

00:02:35,390 --> 00:02:41,120
called Netscape maybe you're familiar

00:02:38,359 --> 00:02:44,680
with them they created something called

00:02:41,120 --> 00:02:47,510
ssl 1.0 this is a time that internet was

00:02:44,680 --> 00:02:49,700
still very young

00:02:47,510 --> 00:02:52,280
nobody wanted to upload pictures of cats

00:02:49,700 --> 00:02:53,230
and everything but still its SSL was

00:02:52,280 --> 00:02:55,879
there

00:02:53,230 --> 00:02:57,709
fortunately considering what comes next

00:02:55,879 --> 00:02:59,329
this was paper where it's never been

00:02:57,709 --> 00:03:05,780
released it's an eternal thing from

00:02:59,329 --> 00:03:09,920
Netscape February 95 that came SSL 2.0

00:03:05,780 --> 00:03:12,530
finally a first version of SSL codename

00:03:09,920 --> 00:03:18,730
not so secure socket layer because it

00:03:12,530 --> 00:03:21,590
was still full of holes June 1996

00:03:18,730 --> 00:03:23,660
finally Netscape produced something that

00:03:21,590 --> 00:03:25,489
was stable enough secure enough that

00:03:23,660 --> 00:03:29,480
could be released out to the public and

00:03:25,489 --> 00:03:33,190
it is called SSL 3.0 so this is already

00:03:29,480 --> 00:03:36,769
two years later this is the time that

00:03:33,190 --> 00:03:40,040
SSL HTTPS internet in general became

00:03:36,769 --> 00:03:42,290
booming business ecommerce sites came up

00:03:40,040 --> 00:03:46,970
things like I don't even know if Amazon

00:03:42,290 --> 00:03:50,780
but neva anyway more SSL sites came up

00:03:46,970 --> 00:03:54,650
and what they did is there's a group

00:03:50,780 --> 00:03:56,629
called IETF which is like I don't know

00:03:54,650 --> 00:03:58,280
what you can call it like the people who

00:03:56,629 --> 00:03:59,930
control the internet like the internet

00:03:58,280 --> 00:04:02,650
police but don't really have it ours

00:03:59,930 --> 00:04:06,049
like you know the Dutch cops basically

00:04:02,650 --> 00:04:08,299
they they took over and they said okay

00:04:06,049 --> 00:04:11,000
we're gonna you know embrace this SSL

00:04:08,299 --> 00:04:12,650
but obviously we can't use SSL as a term

00:04:11,000 --> 00:04:17,359
because things are confusing as it is

00:04:12,650 --> 00:04:20,419
already so we gonna name it TLS so they

00:04:17,359 --> 00:04:23,479
took SSL they renamed it to TLS but

00:04:20,419 --> 00:04:25,919
basically that's version the TLS 1.0 is

00:04:23,479 --> 00:04:28,919
not really a new version

00:04:25,919 --> 00:04:31,050
actually it's called SSL 3.1 this will

00:04:28,919 --> 00:04:33,960
become very confusing later on because

00:04:31,050 --> 00:04:36,539
when people are talking about SSL 3.1 or

00:04:33,960 --> 00:04:40,020
TLS 1.0 they actually mean the same

00:04:36,539 --> 00:04:43,249
thing really confusing at this point

00:04:40,020 --> 00:04:48,180
1999 there came a whole lot of nothing

00:04:43,249 --> 00:04:51,779
until 2006 in 2006 or 7 years later was

00:04:48,180 --> 00:04:55,080
the next version TLS 1.1 so not 2.0 or

00:04:51,779 --> 00:04:58,080
something smaller bug fixes security

00:04:55,080 --> 00:05:03,090
leaks more new stuff but not really a

00:04:58,080 --> 00:05:05,099
whole complete new set again 2008 TLS

00:05:03,090 --> 00:05:07,800
1.2 and this is actually the latest

00:05:05,099 --> 00:05:09,900
version we are dealing with today so

00:05:07,800 --> 00:05:14,330
we're dealing with a version that's from

00:05:09,900 --> 00:05:20,629
2008 when will speech be 5.0 released I

00:05:14,330 --> 00:05:22,740
think about the same yeah so it's all

00:05:20,629 --> 00:05:25,529
but this is this is what we deal with

00:05:22,740 --> 00:05:28,349
well you see here the the the red the

00:05:25,529 --> 00:05:31,379
greens and the yellows and pretty much

00:05:28,349 --> 00:05:33,659
it stands for what you should use should

00:05:31,379 --> 00:05:36,750
definitely not use and it's okay to use

00:05:33,659 --> 00:05:41,659
green is okay to use don't use SSL 3.0

00:05:36,750 --> 00:05:44,550
and TLS 1.0 definitely not use SSL 2.0

00:05:41,659 --> 00:05:47,310
there's a site called trustworthy

00:05:44,550 --> 00:05:49,259
internet.org so you know I can

00:05:47,310 --> 00:05:52,259
definitely go wrong there it actually

00:05:49,259 --> 00:05:54,000
shows you the connections made on the

00:05:52,259 --> 00:05:56,490
Internet so when you do an HTTP

00:05:54,000 --> 00:05:59,129
connection ninety nine point six percent

00:05:56,490 --> 00:06:05,399
of that connection actually will accept

00:05:59,129 --> 00:06:10,430
TLS 1.0 sorry SSL 3.0 99.3% users TLS

00:06:05,399 --> 00:06:11,789
1.0 and only 18.2% and twenty point two

00:06:10,430 --> 00:06:14,569
20.7%

00:06:11,789 --> 00:06:17,729
uses TLS one point one or one point two

00:06:14,569 --> 00:06:20,310
so this is really scary so the best

00:06:17,729 --> 00:06:22,979
versions aren't really supported that

00:06:20,310 --> 00:06:25,169
much and even worse ssl 2.0 which

00:06:22,979 --> 00:06:27,199
definitely is a no-no nowadays twenty

00:06:25,169 --> 00:06:29,740
five point seven percent of the times

00:06:27,199 --> 00:06:35,949
this was 2000

00:06:29,740 --> 00:06:39,759
a lot better not by much but still it's

00:06:35,949 --> 00:06:40,840
going up fast so SSL 2.0 degraded a

00:06:39,759 --> 00:06:43,569
little bit which is good

00:06:40,840 --> 00:06:48,280
TLS 1.0 and SSL 3 are still up there

00:06:43,569 --> 00:06:50,259
with 99% but TLS 1.2 upped a little bit

00:06:48,280 --> 00:06:53,020
and this is a really good thing because

00:06:50,259 --> 00:06:57,220
browsers and web servers both are

00:06:53,020 --> 00:06:59,979
capable of doing TLS 1.1 and 1.2

00:06:57,220 --> 00:07:00,550
nowadays so that number goes up next

00:06:59,979 --> 00:07:03,849
year

00:07:00,550 --> 00:07:07,360
I don't even imagine it will go to 50%

00:07:03,849 --> 00:07:09,849
so this is a really good thing today I'm

00:07:07,360 --> 00:07:12,550
going to talk about TLS 1.2 so the

00:07:09,849 --> 00:07:15,130
latest version of course you'll take

00:07:12,550 --> 00:07:21,669
your homework so you've read our C 5 2 4

00:07:15,130 --> 00:07:25,150
6 right everybody get your copy out ok

00:07:21,669 --> 00:07:28,120
so basically what it says is TLS 1.2 is

00:07:25,150 --> 00:07:30,310
a binary protocol so it doesn't work the

00:07:28,120 --> 00:07:31,870
same way as you can do with HTTP just

00:07:30,310 --> 00:07:33,370
you know sniff on the wire and see

00:07:31,870 --> 00:07:35,770
what's going on it's it's binary

00:07:33,370 --> 00:07:38,919
it works with different so-called

00:07:35,770 --> 00:07:40,960
records all kinds of different elements

00:07:38,919 --> 00:07:43,320
inside the protocol and I will show you

00:07:40,960 --> 00:07:46,150
later on how it works

00:07:43,320 --> 00:07:48,219
those records have different protocols

00:07:46,150 --> 00:07:50,650
underneath and the most important ones

00:07:48,219 --> 00:07:52,120
is a handshake protocol alert protocol

00:07:50,650 --> 00:07:54,370
shows you when something goes wrong

00:07:52,120 --> 00:07:56,710
change ciphers back is an important one

00:07:54,370 --> 00:07:58,930
an application protocol which I will

00:07:56,710 --> 00:08:01,719
show later again so what I'm going to do

00:07:58,930 --> 00:08:04,870
today is actually show you what's going

00:08:01,719 --> 00:08:08,500
on when you go to http web sites so if

00:08:04,870 --> 00:08:11,259
you type in your browser HTTP and the

00:08:08,500 --> 00:08:14,110
URL up to the point that you actually

00:08:11,259 --> 00:08:16,000
get something from it and what's

00:08:14,110 --> 00:08:18,729
happening is that the client and server

00:08:16,000 --> 00:08:21,039
do all kinds of callbacks to each other

00:08:18,729 --> 00:08:23,050
so client goes here then the server

00:08:21,039 --> 00:08:25,150
responds then the client responds server

00:08:23,050 --> 00:08:28,719
responds again and finally you can get

00:08:25,150 --> 00:08:31,120
your request on a secure line so these

00:08:28,719 --> 00:08:34,659
are the things that happens in the first

00:08:31,120 --> 00:08:39,159
200 ish milliseconds of HTTP and I will

00:08:34,659 --> 00:08:41,889
try to go there you know step by step to

00:08:39,159 --> 00:08:46,989
show you a little bit what's going on

00:08:41,889 --> 00:08:49,209
I will do some life wire sharking it's

00:08:46,989 --> 00:08:51,100
not completely life because I don't

00:08:49,209 --> 00:08:54,549
really really want to do it completely

00:08:51,100 --> 00:08:57,309
life I just did a screen crap of an euro

00:08:54,549 --> 00:08:59,919
L grep before so this is what happened I

00:08:57,309 --> 00:09:01,509
think 15 minutes ago and I will show you

00:08:59,919 --> 00:09:03,759
a little bit what's going on so the

00:09:01,509 --> 00:09:05,559
first thing I'm gonna do is the client

00:09:03,759 --> 00:09:09,040
hello parts so that's the first thing

00:09:05,559 --> 00:09:13,359
what's happening I hope you can all see

00:09:09,040 --> 00:09:17,769
this does anyone know what Wireshark is

00:09:13,359 --> 00:09:19,989
anyone used white shark before okay so I

00:09:17,769 --> 00:09:23,019
don't have to plain explain how awesome

00:09:19,989 --> 00:09:24,730
that tool is right okay so what I will

00:09:23,019 --> 00:09:26,199
show you and this is going to be a

00:09:24,730 --> 00:09:30,879
little bit hard because I have to look

00:09:26,199 --> 00:09:33,609
at this screen what is happening here is

00:09:30,879 --> 00:09:37,720
that I create a connection to the server

00:09:33,609 --> 00:09:39,669
with a client hello protocol and I'm

00:09:37,720 --> 00:09:42,639
gonna skip all the information about

00:09:39,669 --> 00:09:44,769
tcp/ip and all the things that happening

00:09:42,639 --> 00:09:47,110
there and focus on the top layer the

00:09:44,769 --> 00:09:49,929
secure socket layer the SSL they keep

00:09:47,110 --> 00:09:53,410
mentioning SSL and TLS together it's all

00:09:49,929 --> 00:09:54,910
you can you know exchange that now the

00:09:53,410 --> 00:09:57,579
first thing you're going to see is that

00:09:54,910 --> 00:10:00,429
it's a certain type namely our handshake

00:09:57,579 --> 00:10:05,169
protocol and it's got a version version

00:10:00,429 --> 00:10:08,199
TLS 1.0 you see in binary that it's the

00:10:05,169 --> 00:10:12,399
encoded as 0 3 0 & 1

00:10:08,199 --> 00:10:16,169
that stands for SSL 3.1 now this is a

00:10:12,399 --> 00:10:18,459
confusing part inside that has protocol

00:10:16,169 --> 00:10:20,769
there's a whole lot of information about

00:10:18,459 --> 00:10:24,069
things that the client will send to the

00:10:20,769 --> 00:10:26,769
server I won't go to all of them but the

00:10:24,069 --> 00:10:30,610
funny thing is that here it says oh this

00:10:26,769 --> 00:10:33,129
thing is from TLS 1.2 so it uses all

00:10:30,610 --> 00:10:36,850
things together you know doesn't have to

00:10:33,129 --> 00:10:39,220
be that confusing but alas it is one of

00:10:36,850 --> 00:10:41,769
the most important things is that you

00:10:39,220 --> 00:10:44,649
see here some kind of random number and

00:10:41,769 --> 00:10:49,779
that random number consists of a UNIX

00:10:44,649 --> 00:10:53,739
timestamp basically a date and some

00:10:49,779 --> 00:10:55,779
random time random bytes how many of you

00:10:53,739 --> 00:11:01,149
have ever tried to create something ran

00:10:55,779 --> 00:11:02,620
in PHP okay how many has tried to create

00:11:01,149 --> 00:11:04,319
something random in PHP for

00:11:02,620 --> 00:11:14,649
cryptographic purposes

00:11:04,319 --> 00:11:17,589
okay don't know the thing is generating

00:11:14,649 --> 00:11:19,389
randomness is really hard if you want to

00:11:17,589 --> 00:11:21,249
do it for cryptographic purposes and

00:11:19,389 --> 00:11:24,610
this is exactly what we want to do this

00:11:21,249 --> 00:11:26,439
is all cryptography because randomness

00:11:24,610 --> 00:11:28,149
is not really possible on computer

00:11:26,439 --> 00:11:29,980
computers are deterministic so you can't

00:11:28,149 --> 00:11:33,730
really do anything random that's why

00:11:29,980 --> 00:11:36,189
it's called pseudo-random what we need

00:11:33,730 --> 00:11:40,269
to get something that looks like it's

00:11:36,189 --> 00:11:42,279
random it's called entropy entropy is

00:11:40,269 --> 00:11:44,139
basically uncertainty we get all kinds

00:11:42,279 --> 00:11:48,069
of different sources that makes our

00:11:44,139 --> 00:11:51,899
formulas much more random does anyone

00:11:48,069 --> 00:11:58,449
know entropy sources which you could use

00:11:51,899 --> 00:12:01,000
anyone yeah yeah everything that's

00:11:58,449 --> 00:12:10,360
that's not not deterministic you can use

00:12:01,000 --> 00:12:12,430
how about time yeah the time by itself

00:12:10,360 --> 00:12:17,680
is really not a very good entropy source

00:12:12,430 --> 00:12:20,470
if you look into the PHP core that's

00:12:17,680 --> 00:12:22,779
pretty much the not completely the only

00:12:20,470 --> 00:12:27,279
source they use but the most important

00:12:22,779 --> 00:12:29,740
source they use PHP is very bad when it

00:12:27,279 --> 00:12:33,759
comes to entropy it pretty much doesn't

00:12:29,740 --> 00:12:36,279
really do that right things like as well

00:12:33,759 --> 00:12:39,129
micro time is perfect if you want to

00:12:36,279 --> 00:12:41,470
decide if your site needs to be blue or

00:12:39,129 --> 00:12:41,860
needs to be red you're perfectly fine

00:12:41,470 --> 00:12:43,509
with that

00:12:41,860 --> 00:12:46,149
if you could if you're going to use

00:12:43,509 --> 00:12:48,699
something like this to generate salts

00:12:46,149 --> 00:12:49,870
for your passwords to generate passwords

00:12:48,699 --> 00:12:53,079
or something else

00:12:49,870 --> 00:12:56,499
don't don't even try to do that these

00:12:53,079 --> 00:12:59,949
are equally bad rant anti rant on unique

00:12:56,499 --> 00:13:03,189
ID there are some good ones though the a

00:12:59,949 --> 00:13:05,800
so called something called open SSL pre

00:13:03,189 --> 00:13:08,379
do random bytes that generates strong

00:13:05,800 --> 00:13:10,430
random numbers you can use actually

00:13:08,379 --> 00:13:12,529
there is an option that says

00:13:10,430 --> 00:13:15,140
if it can't use it it would turn

00:13:12,529 --> 00:13:17,089
information that it could not use strong

00:13:15,140 --> 00:13:19,460
bytes but overall that's a really good

00:13:17,089 --> 00:13:21,830
way you could also read if you're on a

00:13:19,460 --> 00:13:24,500
Linux system for instance from def

00:13:21,830 --> 00:13:27,020
random or def your to random which are

00:13:24,500 --> 00:13:28,610
random source is created by the Linux

00:13:27,020 --> 00:13:30,850
kernel that does all kinds of different

00:13:28,610 --> 00:13:33,260
entropy sources so that's a good one

00:13:30,850 --> 00:13:35,959
another way is use a hardware random

00:13:33,260 --> 00:13:38,330
number generator basically it's it's

00:13:35,959 --> 00:13:40,250
something hardware and you can stick it

00:13:38,330 --> 00:13:42,950
in and it will generate numbers for you

00:13:40,250 --> 00:13:45,350
they take things like you know cosmic

00:13:42,950 --> 00:13:47,060
radiation and things like that so you

00:13:45,350 --> 00:13:50,029
know you're pretty safe if you use

00:13:47,060 --> 00:13:52,360
something like that this one is nice to

00:13:50,029 --> 00:13:55,880
a million random digits anyone know that

00:13:52,360 --> 00:13:59,480
it's a book it's created or somewhere in

00:13:55,880 --> 00:14:02,480
the 1950s and it's a book with literally

00:13:59,480 --> 00:14:06,140
a million random digit numbers it's

00:14:02,480 --> 00:14:09,290
created by a roulette wheel but they use

00:14:06,140 --> 00:14:11,660
it in all days to calibrate new random

00:14:09,290 --> 00:14:13,970
machines so if they create a new random

00:14:11,660 --> 00:14:16,190
machines they could actually see if the

00:14:13,970 --> 00:14:18,680
numbers are random enough by checking

00:14:16,190 --> 00:14:21,200
that against this book it's republished

00:14:18,680 --> 00:14:24,800
in 2001 you can actually look at it at

00:14:21,200 --> 00:14:27,800
Amazon please do not now but after the

00:14:24,800 --> 00:14:31,070
talk because it's got all kinds of funny

00:14:27,800 --> 00:14:33,770
comments on them if you have don't have

00:14:31,070 --> 00:14:36,170
enough on a 1 million random number

00:14:33,770 --> 00:14:39,230
generator and of digits there's actually

00:14:36,170 --> 00:14:42,860
a sequel it's it's literally called a

00:14:39,230 --> 00:14:45,110
million random digits the sequel I I

00:14:42,860 --> 00:14:48,770
think there may be a movie for that

00:14:45,110 --> 00:14:51,380
later on but now it's read the comments

00:14:48,770 --> 00:14:53,930
it's just a funny but yeah you know they

00:14:51,380 --> 00:14:57,200
use that in old days another real good

00:14:53,930 --> 00:14:59,980
thing is a library called random lip

00:14:57,200 --> 00:15:02,720
from Anthony Ferrara at Mac so I think

00:14:59,980 --> 00:15:04,760
most people know them it's it's one of

00:15:02,720 --> 00:15:07,490
the you know big guys from security in

00:15:04,760 --> 00:15:11,180
PHP and he created a library which

00:15:07,490 --> 00:15:12,950
allows you to create secure numbers or a

00:15:11,180 --> 00:15:15,050
little bit less secure numbers or even

00:15:12,950 --> 00:15:17,209
weak numbers depending on how fast you

00:15:15,050 --> 00:15:19,490
need to things need to get them so

00:15:17,209 --> 00:15:21,620
really take a look at this library if

00:15:19,490 --> 00:15:23,240
you want to do random numbers more

00:15:21,620 --> 00:15:26,750
securely than you know what

00:15:23,240 --> 00:15:30,890
speed us so yeah random numbers it's

00:15:26,750 --> 00:15:32,839
it's really hard to to create them but

00:15:30,890 --> 00:15:35,870
fortunately it has created that for us

00:15:32,839 --> 00:15:38,600
and now we can continue I'm gonna skip a

00:15:35,870 --> 00:15:42,110
few things but I will come to the cipher

00:15:38,600 --> 00:15:44,360
Suites and the cipher suites is actually

00:15:42,110 --> 00:15:48,649
a list in this case there are 20 20

00:15:44,360 --> 00:15:51,709
suites here that tells the client to the

00:15:48,649 --> 00:15:54,560
server listen these are the different

00:15:51,709 --> 00:15:56,540
security measurements I know of this

00:15:54,560 --> 00:15:59,450
these are the different ways of to

00:15:56,540 --> 00:16:01,820
encrypt data it doesn't decide which one

00:15:59,450 --> 00:16:06,350
is going to use it just tells the server

00:16:01,820 --> 00:16:09,860
I know these ones and you see that they

00:16:06,350 --> 00:16:14,149
really look confusing TLS DHE RSA etc

00:16:09,860 --> 00:16:17,360
but in fact it's it's there's a there's

00:16:14,149 --> 00:16:19,490
a really good format for it so if you

00:16:17,360 --> 00:16:23,420
have something like this you can break

00:16:19,490 --> 00:16:30,350
it down like this so you got TLS ECD h e

00:16:23,420 --> 00:16:33,260
ec d sa AAS 128 GCM and sha 265 so what

00:16:30,350 --> 00:16:36,380
does this mean basically the first part

00:16:33,260 --> 00:16:38,329
this one is used for exchanging key

00:16:36,380 --> 00:16:41,029
information I will talk about that later

00:16:38,329 --> 00:16:43,399
the second part if it's there it's used

00:16:41,029 --> 00:16:46,760
for authenticating that information so

00:16:43,399 --> 00:16:48,920
it's not encrypting it but it tells you

00:16:46,760 --> 00:16:52,040
if you know whatever you sent is valid

00:16:48,920 --> 00:16:53,959
yes or no and this is the actual type it

00:16:52,040 --> 00:16:56,540
is going to be used during your

00:16:53,959 --> 00:16:59,420
communication what a lot of people don't

00:16:56,540 --> 00:17:01,459
realize is that there are two different

00:16:59,420 --> 00:17:04,400
ways of communicating through an HTTP

00:17:01,459 --> 00:17:06,980
connection one is setting up the secure

00:17:04,400 --> 00:17:09,740
connection which is encrypted but the

00:17:06,980 --> 00:17:11,689
actual communication between the client

00:17:09,740 --> 00:17:15,069
and server is encrypted differently and

00:17:11,689 --> 00:17:19,819
this is the one that decides which one

00:17:15,069 --> 00:17:22,280
will be using so in this case a aes-128

00:17:19,819 --> 00:17:24,800
and there's a block cipher mote in this

00:17:22,280 --> 00:17:26,209
case it's not always the case and the

00:17:24,800 --> 00:17:28,670
last one is used for message

00:17:26,209 --> 00:17:32,990
authenticating one of the neat functions

00:17:28,670 --> 00:17:34,910
of TLS is that not only the data is

00:17:32,990 --> 00:17:37,100
secure over the line but it's

00:17:34,910 --> 00:17:39,500
automatically validated you know

00:17:37,100 --> 00:17:42,260
is this what you send really the thing

00:17:39,500 --> 00:17:46,370
you sent so you can't change it one way

00:17:42,260 --> 00:17:49,790
of the data you can also not say okay

00:17:46,370 --> 00:17:51,200
you know I replay things later on it

00:17:49,790 --> 00:17:53,090
will actually detect that and it uses

00:17:51,200 --> 00:17:57,890
this message authentication for that so

00:17:53,090 --> 00:18:00,170
it's it's it really needs so this is

00:17:57,890 --> 00:18:04,310
pretty obvious right now so we cut ours

00:18:00,170 --> 00:18:07,270
a bit here we got a s 265 CBC here and

00:18:04,310 --> 00:18:15,050
we use char 265 for message validation

00:18:07,270 --> 00:18:20,720
does anyone know what this would do it

00:18:15,050 --> 00:18:23,090
it would work it would use no for it's

00:18:20,720 --> 00:18:25,460
it's communication for it's it's it's a

00:18:23,090 --> 00:18:28,400
key authentication and it would use no

00:18:25,460 --> 00:18:31,190
for encryption so basically you have an

00:18:28,400 --> 00:18:37,130
unencrypted line but still you are using

00:18:31,190 --> 00:18:38,660
HTTPS so please don't try to use this

00:18:37,130 --> 00:18:40,100
one as a browser and say you know this

00:18:38,660 --> 00:18:42,020
is the only one again because if the

00:18:40,100 --> 00:18:44,950
server says okay fine we use this one

00:18:42,020 --> 00:18:49,160
then you still have an authenticated

00:18:44,950 --> 00:18:50,630
communication but it's not encrypted and

00:18:49,160 --> 00:18:52,370
I don't think your browser will say

00:18:50,630 --> 00:18:54,980
listen something fishy's going on I

00:18:52,370 --> 00:18:56,870
think it will accept that normally your

00:18:54,980 --> 00:18:59,090
browser's your web browsers won't accept

00:18:56,870 --> 00:19:00,710
this so this is only there for mostly

00:18:59,090 --> 00:19:03,890
debugging purposes and stuff like that

00:19:00,710 --> 00:19:05,900
so you're pretty safe if you're

00:19:03,890 --> 00:19:07,910
configuring everything okay if you don't

00:19:05,900 --> 00:19:12,470
configure everything okay this might

00:19:07,910 --> 00:19:15,080
work but most probably don't what's

00:19:12,470 --> 00:19:17,300
really funny is that even though the

00:19:15,080 --> 00:19:19,340
client your browser will say you know

00:19:17,300 --> 00:19:21,650
these are the 20 different cipher suites

00:19:19,340 --> 00:19:24,050
I know of it's actually the server

00:19:21,650 --> 00:19:26,840
that's going to decide which one we will

00:19:24,050 --> 00:19:30,640
be using so it could be that you have

00:19:26,840 --> 00:19:33,050
like a really high great encryption

00:19:30,640 --> 00:19:37,070
cipher suite up there and maybe some

00:19:33,050 --> 00:19:39,050
lower ones down down as well maybe

00:19:37,070 --> 00:19:41,000
server can still say you know what we're

00:19:39,050 --> 00:19:43,160
gonna use the less secure one it's

00:19:41,000 --> 00:19:45,110
totally valid to do that actually I will

00:19:43,160 --> 00:19:48,230
show you in the example I'm using now I

00:19:45,110 --> 00:19:50,050
actually have a found a site that uses a

00:19:48,230 --> 00:19:54,370
less secure

00:19:50,050 --> 00:19:56,830
ritum cipher suite for that so because

00:19:54,370 --> 00:19:58,840
the server ultimately decide on which

00:19:56,830 --> 00:20:00,600
cipher you're going to use this is

00:19:58,840 --> 00:20:03,040
really important

00:20:00,600 --> 00:20:06,430
always configure your ciphers on your

00:20:03,040 --> 00:20:08,620
webserver always don't expect that oh

00:20:06,430 --> 00:20:10,180
you know what I just installed nginx or

00:20:08,620 --> 00:20:14,770
installed Apache and everything we're

00:20:10,180 --> 00:20:17,230
trying maybe but always make sure that

00:20:14,770 --> 00:20:20,200
your ciphers are in order so you don't

00:20:17,230 --> 00:20:22,900
use broken ciphers correct ciphers or

00:20:20,200 --> 00:20:25,990
stuff like that so how do we do that

00:20:22,900 --> 00:20:28,120
quite easily you can use these ones for

00:20:25,990 --> 00:20:30,270
Apache this one for nginx and everything

00:20:28,120 --> 00:20:34,750
will be okay well at least for now

00:20:30,270 --> 00:20:36,160
probably there's a website here that

00:20:34,750 --> 00:20:38,500
shows you a little bit more information

00:20:36,160 --> 00:20:41,230
about what the ciphers are what they do

00:20:38,500 --> 00:20:43,360
why they are here and what what to

00:20:41,230 --> 00:20:46,930
expect firstly you can see here that it

00:20:43,360 --> 00:20:49,870
doesn't accept our no cipher suite and

00:20:46,930 --> 00:20:52,120
the same one here as well so this means

00:20:49,870 --> 00:20:54,640
that if you correctly set it up like

00:20:52,120 --> 00:20:57,550
this you can't use TLS no but no no for

00:20:54,640 --> 00:21:00,910
instance a slides will be online later

00:20:57,550 --> 00:21:02,530
on so you can take a look if everything

00:21:00,910 --> 00:21:04,780
I'm going to tell you is really really

00:21:02,530 --> 00:21:06,700
boring and I totally agree with you I

00:21:04,780 --> 00:21:09,820
couldn't stand listening to myself to be

00:21:06,700 --> 00:21:11,850
honest there is one URL you have to

00:21:09,820 --> 00:21:16,420
remember it's this one

00:21:11,850 --> 00:21:18,940
anyone know this one yeah it's a website

00:21:16,420 --> 00:21:21,910
that can test your HTTP websites you

00:21:18,940 --> 00:21:24,070
just type in your HTTP website and we'll

00:21:21,910 --> 00:21:26,230
give you a breakdown on how security

00:21:24,070 --> 00:21:28,560
scientists what the things are you need

00:21:26,230 --> 00:21:33,700
to fix and how to fix them basically

00:21:28,560 --> 00:21:37,060
really awesome sorry okay let's get back

00:21:33,700 --> 00:21:39,580
to the wire sharking oh here we are

00:21:37,060 --> 00:21:42,070
so these are the cipher suites I just

00:21:39,580 --> 00:21:44,050
sent over a couple of Suites and we see

00:21:42,070 --> 00:21:47,830
which one is going to be used that will

00:21:44,050 --> 00:21:50,650
be used later on you see that here we

00:21:47,830 --> 00:21:52,600
get something called extensions TLS is

00:21:50,650 --> 00:21:54,760
really awesome because it's got like the

00:21:52,600 --> 00:21:56,110
basic features which are the cipher

00:21:54,760 --> 00:21:58,150
suites and the random stuff like that

00:21:56,110 --> 00:22:00,760
but you can also add extensions to them

00:21:58,150 --> 00:22:03,620
and if both your browser and your server

00:22:00,760 --> 00:22:06,170
know about a certain extension they can

00:22:03,620 --> 00:22:09,470
actually use it one extension for

00:22:06,170 --> 00:22:12,320
instance is server name a server name is

00:22:09,470 --> 00:22:15,620
it's what we call as an eye you know

00:22:12,320 --> 00:22:20,360
that if you go to HP 1.1 you can have

00:22:15,620 --> 00:22:23,180
multiple hosts on one IP right most of

00:22:20,360 --> 00:22:24,710
you probably know that you can't do that

00:22:23,180 --> 00:22:29,240
on HTTP right

00:22:24,710 --> 00:22:32,710
but with S&I you can so SNI allows you

00:22:29,240 --> 00:22:36,320
to have multiple websites on the same ip

00:22:32,710 --> 00:22:38,450
through HTTP fortunately it's not

00:22:36,320 --> 00:22:40,670
supported all the way everywhere but

00:22:38,450 --> 00:22:42,920
nowadays it's okay

00:22:40,670 --> 00:22:44,750
so that's this extension another

00:22:42,920 --> 00:22:46,280
extension you probably have heard of the

00:22:44,750 --> 00:22:49,760
last few weeks is the heartbeat

00:22:46,280 --> 00:22:54,710
extension I think there was some kind of

00:22:49,760 --> 00:22:57,679
bug inside that pretty much rendered the

00:22:54,710 --> 00:23:00,920
whole internet useless athletes at least

00:22:57,679 --> 00:23:04,010
the HTTPS part it's just an extension

00:23:00,920 --> 00:23:06,140
it's one of the the extensions here and

00:23:04,010 --> 00:23:08,690
there was something wrong with it so it

00:23:06,140 --> 00:23:10,990
has nothing to do with TLS by itself

00:23:08,690 --> 00:23:15,290
it's just like you know PHP extension

00:23:10,990 --> 00:23:16,700
the same thing and that's a lot more in

00:23:15,290 --> 00:23:18,290
here I'm not going to go over them

00:23:16,700 --> 00:23:21,410
because it's it's it's all too

00:23:18,290 --> 00:23:23,300
complicated and also difficult to show

00:23:21,410 --> 00:23:25,790
you I just want to show you there's an

00:23:23,300 --> 00:23:28,790
eye so pretty much every decent browser

00:23:25,790 --> 00:23:32,320
and server supports it nowadays except

00:23:28,790 --> 00:23:38,570
ie6 Windows XP Blackberry Android 2.0 so

00:23:32,320 --> 00:23:41,450
nobody cares I think so yeah if you want

00:23:38,570 --> 00:23:43,100
to use sni nowadays please go for it

00:23:41,450 --> 00:23:43,550
unless you have a really good reason for

00:23:43,100 --> 00:23:46,220
it

00:23:43,550 --> 00:23:50,720
maybe ie6 but then you have other

00:23:46,220 --> 00:23:53,300
problems I think so that's the client

00:23:50,720 --> 00:23:55,360
hello part so we're still at the

00:23:53,300 --> 00:23:57,830
beginning and now we had 15 milliseconds

00:23:55,360 --> 00:23:59,300
inside the connection so all the

00:23:57,830 --> 00:24:01,940
information has been sent from the

00:23:59,300 --> 00:24:05,559
browser to the server and now the server

00:24:01,940 --> 00:24:08,559
will send some back to the browser and

00:24:05,559 --> 00:24:08,559
again

00:24:09,770 --> 00:24:16,050
I'll show it a little bit to you so this

00:24:13,500 --> 00:24:20,100
is like the client hello and now we get

00:24:16,050 --> 00:24:22,320
to with another part server hello and

00:24:20,100 --> 00:24:23,760
you see here that the server does pretty

00:24:22,320 --> 00:24:27,120
much the same thing so we got the

00:24:23,760 --> 00:24:29,040
handshaking TLS 1.0 you see that a

00:24:27,120 --> 00:24:33,330
handshake protocol cell if user still

00:24:29,040 --> 00:24:35,820
has 1.0 again very confusing and some

00:24:33,330 --> 00:24:38,070
random bytes so we got the time random

00:24:35,820 --> 00:24:40,970
bytes so now two sides have two

00:24:38,070 --> 00:24:44,340
different sets of random bytes right

00:24:40,970 --> 00:24:46,530
session IDs don't really want to talk

00:24:44,340 --> 00:24:50,580
about it but it's like for continuation

00:24:46,530 --> 00:24:53,310
of TLS traffic but one cool thing is you

00:24:50,580 --> 00:24:55,890
see the surface with here so pretty much

00:24:53,310 --> 00:24:58,620
this server decided okay you know what I

00:24:55,890 --> 00:25:01,730
know with cyber Suites you gonna support

00:24:58,620 --> 00:25:06,150
we're gonna use TLS hours a with our c4

00:25:01,730 --> 00:25:08,970
124 at 28 and d5 now if I go back to the

00:25:06,150 --> 00:25:11,880
list of cipher suites you will see that

00:25:08,970 --> 00:25:13,950
it starts with the top one and the top

00:25:11,880 --> 00:25:16,680
one is the most preferred cipher suite

00:25:13,950 --> 00:25:19,860
that the client wants to use so the

00:25:16,680 --> 00:25:21,870
lower down the less preferable it is for

00:25:19,860 --> 00:25:23,700
the client to use that one so let's take

00:25:21,870 --> 00:25:30,440
a look where we can find that or is a

00:25:23,700 --> 00:25:35,940
thingy not here not here there it is

00:25:30,440 --> 00:25:39,420
it's the bottom one so this server

00:25:35,940 --> 00:25:39,900
decided to use the least secure cipher

00:25:39,420 --> 00:25:41,640
suite

00:25:39,900 --> 00:25:43,710
it actually has got some good reasons

00:25:41,640 --> 00:25:45,660
for that because this one is very fast

00:25:43,710 --> 00:25:48,210
considering the top ones so that's

00:25:45,660 --> 00:25:51,420
probably the reason why so you see here

00:25:48,210 --> 00:25:53,790
that even though I got a whole kind of a

00:25:51,420 --> 00:26:07,440
whole set of cool cipher suites it still

00:25:53,790 --> 00:26:10,470
uses this one okay so next we come up to

00:26:07,440 --> 00:26:12,690
I think for most of you are the most

00:26:10,470 --> 00:26:15,470
familiar part of dealing with SSL and

00:26:12,690 --> 00:26:19,530
TLS and HTTPS are the certificates

00:26:15,470 --> 00:26:21,440
anyone dealt with certificates yeah I

00:26:19,530 --> 00:26:26,880
created self-signed certificates maybe

00:26:21,440 --> 00:26:29,640
okay so what's happening here is that in

00:26:26,880 --> 00:26:33,060
this case it sends a whole list of

00:26:29,640 --> 00:26:35,970
certificates you can see it's a

00:26:33,060 --> 00:26:37,950
certificate says I am Microsoft com it

00:26:35,970 --> 00:26:40,730
sends another certificate another one

00:26:37,950 --> 00:26:45,450
and another one

00:26:40,730 --> 00:26:48,690
so certificates are a way of making sure

00:26:45,450 --> 00:26:51,150
that the server is who assess yes you

00:26:48,690 --> 00:26:51,800
know you can validate who you're talking

00:26:51,150 --> 00:26:55,260
to

00:26:51,800 --> 00:26:57,530
however most people don't really

00:26:55,260 --> 00:27:01,860
understand the whole concept behind

00:26:57,530 --> 00:27:05,250
certificates an SSL certificate it is

00:27:01,860 --> 00:27:07,830
not really an SSL certificate we still

00:27:05,250 --> 00:27:09,840
call it SSL certificate but quite

00:27:07,830 --> 00:27:11,370
frankly it should be either called TLS

00:27:09,840 --> 00:27:13,620
certificate because we're dealing with

00:27:11,370 --> 00:27:16,860
TLS nowadays but it actually called an

00:27:13,620 --> 00:27:19,260
x.509 certificate that's the format it

00:27:16,860 --> 00:27:21,150
actually uses and also is not

00:27:19,260 --> 00:27:22,950
automatically secure people think oh

00:27:21,150 --> 00:27:25,440
I've got a certificate so it's secure

00:27:22,950 --> 00:27:29,160
definitely it's not the case it's also

00:27:25,440 --> 00:27:30,480
not automatically trustworthy some

00:27:29,160 --> 00:27:34,140
people say you know I've got a

00:27:30,480 --> 00:27:35,490
certificate from this agency so it's

00:27:34,140 --> 00:27:37,740
much better than yourself signed

00:27:35,490 --> 00:27:41,100
certificate that is not the case

00:27:37,740 --> 00:27:43,890
self-signed certificates are just as

00:27:41,100 --> 00:27:46,610
secure as your certificate you bought

00:27:43,890 --> 00:27:51,330
from maybe hundreds of dollars per years

00:27:46,610 --> 00:27:54,780
exactly the same security and obviously

00:27:51,330 --> 00:27:57,540
SSL certificates are not cheap there are

00:27:54,780 --> 00:27:59,580
some people wants if you're gonna buy an

00:27:57,540 --> 00:28:03,900
SSL certificate if there are no other

00:27:59,580 --> 00:28:05,970
reasons get the cheapest one because you

00:28:03,900 --> 00:28:07,440
don't gain anything with it if you want

00:28:05,970 --> 00:28:09,600
to gain like you know the green address

00:28:07,440 --> 00:28:11,820
bar stuff like that you might need to

00:28:09,600 --> 00:28:13,360
pay some more money but if you don't

00:28:11,820 --> 00:28:15,280
care about that get the cheapest

00:28:13,360 --> 00:28:18,700
one that works most of the time

00:28:15,280 --> 00:28:22,420
perfectly so this is what an SSL

00:28:18,700 --> 00:28:24,929
certificate is not so what is it it's at

00:28:22,420 --> 00:28:28,540
this point the best way to prove

00:28:24,929 --> 00:28:30,820
authentic identity you know it's the

00:28:28,540 --> 00:28:34,809
best way to prove that this server it

00:28:30,820 --> 00:28:37,120
says research yes it's a way to

00:28:34,809 --> 00:28:39,760
bootstrap the encrypted communication

00:28:37,120 --> 00:28:42,100
we've seen that we're going to use a

00:28:39,760 --> 00:28:45,100
third of encryption but that encryption

00:28:42,100 --> 00:28:48,190
is called symmetrical both sides of the

00:28:45,100 --> 00:28:51,100
owl need to have the same key and we

00:28:48,190 --> 00:28:52,690
sent the key over through some

00:28:51,100 --> 00:28:55,059
information that's stored inside the

00:28:52,690 --> 00:28:57,880
certificate it's also very misleading

00:28:55,059 --> 00:29:00,100
because if you go to the side that sells

00:28:57,880 --> 00:29:04,900
SSL certificates or the people here who

00:29:00,100 --> 00:29:09,460
sell them now do you raise your hand no

00:29:04,900 --> 00:29:11,440
no problem 99% on the side is really

00:29:09,460 --> 00:29:14,020
misleading in this marketing talk you

00:29:11,440 --> 00:29:16,750
know doesn't make any sense at all and

00:29:14,020 --> 00:29:20,440
to be honest for most of the time it's

00:29:16,750 --> 00:29:22,630
too expensive as well so what's inside

00:29:20,440 --> 00:29:25,630
such a certificate first of all the

00:29:22,630 --> 00:29:30,460
owner information is this owner who who

00:29:25,630 --> 00:29:32,410
am I talking to domain information for

00:29:30,460 --> 00:29:36,010
which domains is this certificate valid

00:29:32,410 --> 00:29:37,690
for so you know for which in this case

00:29:36,010 --> 00:29:40,900
it was Microsoft calm but could be

00:29:37,690 --> 00:29:43,360
github.com or something else expiring

00:29:40,900 --> 00:29:46,419
information from when to when is this

00:29:43,360 --> 00:29:48,309
certificate valid it's also in there as

00:29:46,419 --> 00:29:50,770
well so this is why certificate is only

00:29:48,309 --> 00:29:56,160
valid for one year or two years or five

00:29:50,770 --> 00:29:58,299
years it's embedded inside Isis difficut

00:29:56,160 --> 00:30:02,830
unfortunately if I have a certificate

00:29:58,299 --> 00:30:04,929
Who am I just to you know get an editor

00:30:02,830 --> 00:30:06,780
up there and change you know the expiry

00:30:04,929 --> 00:30:10,150
date or something like that

00:30:06,780 --> 00:30:11,520
fortunately you can't because what's

00:30:10,150 --> 00:30:15,280
happening if you get a certificate

00:30:11,520 --> 00:30:18,610
schedule you're domain.com it's signed

00:30:15,280 --> 00:30:21,790
by somebody else does anyone understand

00:30:18,610 --> 00:30:25,780
the concept of signing sort of not

00:30:21,790 --> 00:30:27,460
really when you sign something you say

00:30:25,780 --> 00:30:30,010
okay whatever is

00:30:27,460 --> 00:30:32,740
I validate it and this is the proof I

00:30:30,010 --> 00:30:34,630
have that it's authentic so what they

00:30:32,740 --> 00:30:36,670
actually do is they have another

00:30:34,630 --> 00:30:39,660
certificate most of the time this is

00:30:36,670 --> 00:30:41,850
called an intermediate certificate and

00:30:39,660 --> 00:30:47,050
they're going to use that to actually

00:30:41,850 --> 00:30:48,700
sign your first certificate and it's

00:30:47,050 --> 00:30:51,460
like a signature you know it's it's like

00:30:48,700 --> 00:30:54,430
I verify the digits correct and what you

00:30:51,460 --> 00:30:57,520
can do is a little bit more difficult to

00:30:54,430 --> 00:30:59,560
explain but basically you can see when

00:30:57,520 --> 00:31:02,520
you change information inside the

00:30:59,560 --> 00:31:04,270
certificate then the signature will not

00:31:02,520 --> 00:31:06,540
be correct anymore

00:31:04,270 --> 00:31:10,360
so in this case you can see easily if

00:31:06,540 --> 00:31:12,790
the certificate is correct yes or no but

00:31:10,360 --> 00:31:15,270
now we have a problem because can't I

00:31:12,790 --> 00:31:16,920
just change the intermediate CA as well

00:31:15,270 --> 00:31:20,020
yes

00:31:16,920 --> 00:31:24,160
so there we have a root CA and at root

00:31:20,020 --> 00:31:25,330
CA actually sighs the intermediate CA so

00:31:24,160 --> 00:31:29,740
now we have a problem

00:31:25,330 --> 00:31:33,100
kind of change the root CA yes well you

00:31:29,740 --> 00:31:36,040
see where I'm going to right at the end

00:31:33,100 --> 00:31:37,930
of the line which there isn't there is

00:31:36,040 --> 00:31:40,960
some place where I have to say okay you

00:31:37,930 --> 00:31:44,410
know what I trust this certificate no

00:31:40,960 --> 00:31:47,650
matter what I will trust it this is

00:31:44,410 --> 00:31:50,260
normally the root CA and this is what we

00:31:47,650 --> 00:31:52,150
called implied trust because we're going

00:31:50,260 --> 00:31:55,000
to trust certificates that we don't know

00:31:52,150 --> 00:31:57,250
anything about but it's incorporated

00:31:55,000 --> 00:31:59,350
inside our browsers inside our operating

00:31:57,250 --> 00:32:02,560
systems and if that certificate says

00:31:59,350 --> 00:32:04,210
some other certificate is okay then we

00:32:02,560 --> 00:32:08,590
take it's okay you know who am I to

00:32:04,210 --> 00:32:10,240
argue with the root CA actually it was

00:32:08,590 --> 00:32:12,850
actually a Dutch company so sorry about

00:32:10,240 --> 00:32:16,330
that a few years ago two years maybe

00:32:12,850 --> 00:32:19,390
last year that was a root CA that was

00:32:16,330 --> 00:32:21,190
hacked so we couldn't trust that anymore

00:32:19,390 --> 00:32:23,110
so all the browser's all the OSS and

00:32:21,190 --> 00:32:27,040
everything had to you know be changed

00:32:23,110 --> 00:32:28,240
just to get rid of that root CA so the

00:32:27,040 --> 00:32:30,340
root CA or the root certificate

00:32:28,240 --> 00:32:32,380
authorities they are built inside your

00:32:30,340 --> 00:32:34,690
browser and OSS and everything and we

00:32:32,380 --> 00:32:36,100
automatically trust them so that's

00:32:34,690 --> 00:32:39,700
pretty scary because that's the

00:32:36,100 --> 00:32:41,320
foundation of our encryption so

00:32:39,700 --> 00:32:43,870
automatically you

00:32:41,320 --> 00:32:46,090
them to be if you don't want that many

00:32:43,870 --> 00:32:50,560
inside your West inside your browser

00:32:46,090 --> 00:32:52,230
right I've checked with well you can

00:32:50,560 --> 00:32:57,090
check it yourself with this command line

00:32:52,230 --> 00:33:01,980
this is the security system from Mozilla

00:32:57,090 --> 00:33:04,930
that actually uses that stores all the

00:33:01,980 --> 00:33:07,120
root certificates that's inside Mozilla

00:33:04,930 --> 00:33:10,720
and it's used for other browsers as well

00:33:07,120 --> 00:33:19,300
so how many you think will be there you

00:33:10,720 --> 00:33:21,610
know ten maybe yeah 174 so there is 174

00:33:19,300 --> 00:33:24,460
companies and these are not all of them

00:33:21,610 --> 00:33:27,190
I assure you that we don't know anything

00:33:24,460 --> 00:33:30,220
about I don't even think people can name

00:33:27,190 --> 00:33:32,260
more than five I think that we don't

00:33:30,220 --> 00:33:34,390
know anything about but they just sell

00:33:32,260 --> 00:33:43,390
certificates and we automatically trust

00:33:34,390 --> 00:33:45,190
them so because they compiled in the

00:33:43,390 --> 00:33:50,290
browser says oh this is a root

00:33:45,190 --> 00:33:53,250
certificate so we trust them I don't

00:33:50,290 --> 00:33:55,990
know it might be money but no it's it's

00:33:53,250 --> 00:33:58,450
to be honest I don't know how they can I

00:33:55,990 --> 00:34:00,400
don't know how you can get a root

00:33:58,450 --> 00:34:02,580
certificate accepted to be honest I

00:34:00,400 --> 00:34:07,380
think there are guidelines for that but

00:34:02,580 --> 00:34:11,110
no I don't do root certificates myself

00:34:07,380 --> 00:34:13,030
so yeah if if it's one of these 174

00:34:11,110 --> 00:34:15,810
your browser will automatically accept

00:34:13,030 --> 00:34:19,000
your certificate if it's not one of the

00:34:15,810 --> 00:34:23,470
174 for instance when you self signed it

00:34:19,000 --> 00:34:26,500
so you say you know me myself except

00:34:23,470 --> 00:34:27,970
this active trust this certificate then

00:34:26,500 --> 00:34:29,860
you brows a little complain it will say

00:34:27,970 --> 00:34:31,060
hey I don't trust this certificate what

00:34:29,860 --> 00:34:34,720
you're gonna do with it and people

00:34:31,060 --> 00:34:36,280
always click oh okay but you should be

00:34:34,720 --> 00:34:38,320
aware of that that's the difference

00:34:36,280 --> 00:34:40,120
between self signed and signing it

00:34:38,320 --> 00:34:44,230
through would see a that's that's the

00:34:40,120 --> 00:34:46,320
thing so the x.509 certificates are used

00:34:44,230 --> 00:34:49,300
to authenticate the server basically

00:34:46,320 --> 00:34:51,760
what people don't know is that servers

00:34:49,300 --> 00:34:54,639
can ask clients to authenticate them as

00:34:51,760 --> 00:34:57,609
well obviously a browser of a web server

00:34:54,639 --> 00:34:59,980
do that github doesn't ask you as a

00:34:57,609 --> 00:35:02,170
client you know what I won't prove that

00:34:59,980 --> 00:35:04,240
you are who you say you are but for

00:35:02,170 --> 00:35:06,760
instance what would happen if you create

00:35:04,240 --> 00:35:09,089
a restful service for instance and you

00:35:06,760 --> 00:35:11,829
communicate between you know two clients

00:35:09,089 --> 00:35:13,809
you can actually say to the web servers

00:35:11,829 --> 00:35:16,119
there you know I want to authenticate

00:35:13,809 --> 00:35:18,490
both sides of that not only one side

00:35:16,119 --> 00:35:19,720
both side of them so that's really cool

00:35:18,490 --> 00:35:21,869
because then we have two-way

00:35:19,720 --> 00:35:24,549
authentication instead of just one way

00:35:21,869 --> 00:35:27,819
so if you do restful services or ready

00:35:24,549 --> 00:35:29,490
to be services over TLS you know have

00:35:27,819 --> 00:35:33,180
them authenticate both way

00:35:29,490 --> 00:35:36,309
so for API so this is really really cool

00:35:33,180 --> 00:35:39,039
okay so we've done a server hello we

00:35:36,309 --> 00:35:42,099
don't a certificate one thing I didn't

00:35:39,039 --> 00:35:45,250
show you but it's very trivial is a

00:35:42,099 --> 00:35:48,190
hello dawn it says okay fine I'm done

00:35:45,250 --> 00:35:51,519
with you know whatever I want to do so

00:35:48,190 --> 00:35:53,769
next up are the simple things is the

00:35:51,519 --> 00:35:56,730
client key exchange the change cypress

00:35:53,769 --> 00:36:01,089
peck and the so-called phoenix packets

00:35:56,730 --> 00:36:03,009
what's this so we did the server hello

00:36:01,089 --> 00:36:05,650
we did certificate we did the server

00:36:03,009 --> 00:36:10,480
hello done we go to the client key

00:36:05,650 --> 00:36:12,700
exchange again TLS 1.0 you see a client

00:36:10,480 --> 00:36:16,960
key exchange and you see here and are

00:36:12,700 --> 00:36:18,759
they encrypted premaster secret this is

00:36:16,960 --> 00:36:23,670
something that the browser will send out

00:36:18,759 --> 00:36:28,269
to the server by generating some kind of

00:36:23,670 --> 00:36:30,869
code a key and actually encrypted with

00:36:28,269 --> 00:36:34,329
information taken from the certificate

00:36:30,869 --> 00:36:37,690
so we can't do this unless we get a

00:36:34,329 --> 00:36:40,420
certificate first and this pre master is

00:36:37,690 --> 00:36:42,819
a really important number because we're

00:36:40,420 --> 00:36:45,430
gonna use that later on to get all our

00:36:42,819 --> 00:36:51,160
keys so it's not our master key but it's

00:36:45,430 --> 00:36:55,750
the pre master key okay this is gary

00:36:51,160 --> 00:36:58,440
complex now we have three types of

00:36:55,750 --> 00:37:01,960
information we have a premaster secret

00:36:58,440 --> 00:37:04,599
we have the client random number and we

00:37:01,960 --> 00:37:06,609
have the server random number and both

00:37:04,599 --> 00:37:08,849
sides of the owl the web server and the

00:37:06,609 --> 00:37:12,099
client have three information

00:37:08,849 --> 00:37:14,529
what happened next is that it's going to

00:37:12,099 --> 00:37:16,630
create a master secret from that it's

00:37:14,529 --> 00:37:19,979
it's an algorithm you can even look it

00:37:16,630 --> 00:37:23,969
up in the RFC it creates a master secret

00:37:19,979 --> 00:37:23,969
that's not enough yes

00:37:26,880 --> 00:37:32,739
yeah which which I showed you before

00:37:29,249 --> 00:37:35,559
from that master secret it actually does

00:37:32,739 --> 00:37:38,440
pretty much the same loop again but now

00:37:35,559 --> 00:37:39,969
use the master secret the server random

00:37:38,440 --> 00:37:43,450
number and the client random number and

00:37:39,969 --> 00:37:46,150
hustle them into something called a key

00:37:43,450 --> 00:37:48,700
buffer so there's a whole lot of things

00:37:46,150 --> 00:37:51,670
going on and that key buffer is actually

00:37:48,700 --> 00:37:55,779
used for creating keys on communicating

00:37:51,670 --> 00:37:58,269
and a six different keys or kind of keys

00:37:55,779 --> 00:38:02,499
that's going to be used a client Mac a

00:37:58,269 --> 00:38:06,789
client key client IV and a server make a

00:38:02,499 --> 00:38:10,619
server key and a server IV the Mex are

00:38:06,789 --> 00:38:12,729
used for authenticating for

00:38:10,619 --> 00:38:16,660
authenticating the message I show you

00:38:12,729 --> 00:38:19,420
before that TLS can not only encrypt but

00:38:16,660 --> 00:38:22,209
also verify data that's being used by

00:38:19,420 --> 00:38:23,890
the client Mac and a server Mac and the

00:38:22,209 --> 00:38:26,289
client key and the server key are

00:38:23,890 --> 00:38:29,309
actually used for encrypting data and

00:38:26,289 --> 00:38:31,719
the IV is sometimes used for certain

00:38:29,309 --> 00:38:35,619
cipher suites but don't have to worry

00:38:31,719 --> 00:38:37,539
about that this also implies that we use

00:38:35,619 --> 00:38:40,660
a different key from sending from the

00:38:37,539 --> 00:38:44,019
client to the server than we do from the

00:38:40,660 --> 00:38:47,890
server to the client if for some reason

00:38:44,019 --> 00:38:50,979
somebody get hold of my client key that

00:38:47,890 --> 00:38:53,499
means it can encrypt the information

00:38:50,979 --> 00:38:56,859
from the client to the server but not

00:38:53,499 --> 00:38:58,569
from the server to the client but then

00:38:56,859 --> 00:39:00,670
again you have half the data so maybe

00:38:58,569 --> 00:39:03,969
that's enough but still you know only

00:39:00,670 --> 00:39:05,799
half of your encryption is is broken at

00:39:03,969 --> 00:39:10,119
that place so there are two different

00:39:05,799 --> 00:39:12,130
encryption keys used for both sides if

00:39:10,119 --> 00:39:17,170
you want to try something yourself

00:39:12,130 --> 00:39:19,930
PHP I've done it to be honest PHP wasn't

00:39:17,170 --> 00:39:22,119
completely capable of dealing with this

00:39:19,930 --> 00:39:22,690
there are some issues in PHP itself that

00:39:22,119 --> 00:39:24,849
makes

00:39:22,690 --> 00:39:26,470
it doesn't work meaning I'm probably the

00:39:24,849 --> 00:39:30,250
first one who ever created something

00:39:26,470 --> 00:39:31,780
like this appear to be but you can't

00:39:30,250 --> 00:39:33,640
figure out yourself I've been a little

00:39:31,780 --> 00:39:38,069
bit of block about it on how it works

00:39:33,640 --> 00:39:43,240
maybe you get more information from that

00:39:38,069 --> 00:39:45,220
so at that point both sides have all the

00:39:43,240 --> 00:39:48,099
keys that is needing for communication

00:39:45,220 --> 00:39:49,780
but this is still all out of there open

00:39:48,099 --> 00:39:51,339
everybody can snoop this information

00:39:49,780 --> 00:39:55,869
because that's pretty much what I did

00:39:51,339 --> 00:39:57,640
here so everybody can still see that one

00:39:55,869 --> 00:40:01,000
of the cool things is that this

00:39:57,640 --> 00:40:03,640
premaster secret I see here can only be

00:40:01,000 --> 00:40:05,920
read only be dictated by the web server

00:40:03,640 --> 00:40:08,140
nobody else everybody can read this I

00:40:05,920 --> 00:40:10,480
can you know print it out in a magazine

00:40:08,140 --> 00:40:12,730
and give it to you you can't do anything

00:40:10,480 --> 00:40:16,000
with it only when you have the

00:40:12,730 --> 00:40:19,780
certificate from the server then you can

00:40:16,000 --> 00:40:22,270
decrypt this at the end we have

00:40:19,780 --> 00:40:24,490
something called a change cipher spec

00:40:22,270 --> 00:40:27,069
protocol this is the part where the

00:40:24,490 --> 00:40:29,440
server says you know what I've done with

00:40:27,069 --> 00:40:31,960
all the set up from now on everything

00:40:29,440 --> 00:40:36,460
will be encrypted it will be the last

00:40:31,960 --> 00:40:37,839
package that will be encrypted you can

00:40:36,460 --> 00:40:40,000
see it here as well because at this

00:40:37,839 --> 00:40:42,670
point the server sends something else

00:40:40,000 --> 00:40:43,329
but Wireshark says you know it's it's

00:40:42,670 --> 00:40:46,089
encrypted

00:40:43,329 --> 00:40:47,710
I don't know what's inside it because

00:40:46,089 --> 00:40:50,650
it's encrypted then this is the whole

00:40:47,710 --> 00:40:52,599
point of encrypting stuff so at this

00:40:50,650 --> 00:40:59,619
point you know you see it works because

00:40:52,599 --> 00:41:02,140
wire short has no idea but at the other

00:40:59,619 --> 00:41:04,089
side this kind this time the server has

00:41:02,140 --> 00:41:05,500
to do the same thing as well at this

00:41:04,089 --> 00:41:07,930
point the server has all the information

00:41:05,500 --> 00:41:10,630
as well so it can say you know what I'm

00:41:07,930 --> 00:41:15,569
gonna change my self-respect too and I

00:41:10,630 --> 00:41:15,569
will say you know done so at this point

00:41:23,410 --> 00:41:28,930
it's hard for me to see it here

00:41:30,430 --> 00:41:35,450
this is this one here the server says

00:41:33,410 --> 00:41:38,120
okay I'm going to change the Cypress

00:41:35,450 --> 00:41:39,860
back as well and I've got some encrypted

00:41:38,120 --> 00:41:41,390
information for you as well so now the

00:41:39,860 --> 00:41:42,980
browser and the server are really

00:41:41,390 --> 00:41:44,810
laughing their ass off because something

00:41:42,980 --> 00:41:47,900
is happening and nobody else knows what

00:41:44,810 --> 00:41:50,180
but this is what happening and from this

00:41:47,900 --> 00:41:52,430
point on you can see here application

00:41:50,180 --> 00:41:54,910
data but it's encrypted you know the

00:41:52,430 --> 00:41:57,980
only thing I know it's probably HP but

00:41:54,910 --> 00:41:59,480
what's inside I don't know and here as

00:41:57,980 --> 00:42:01,660
well and from this point on all

00:41:59,480 --> 00:42:04,850
communication will be done encrypted

00:42:01,660 --> 00:42:11,630
it's 200 milliseconds from when I was

00:42:04,850 --> 00:42:13,970
starting pretty much on average so at

00:42:11,630 --> 00:42:16,820
this point we can just do our whatever

00:42:13,970 --> 00:42:20,450
we want to do over TLS normally when you

00:42:16,820 --> 00:42:21,920
do HTTPS it will be a CTP traffic but if

00:42:20,450 --> 00:42:24,800
you have your own things you want to do

00:42:21,920 --> 00:42:26,840
over TLS might as well TLS is a really

00:42:24,800 --> 00:42:30,290
simple protocol and you can do tunnel

00:42:26,840 --> 00:42:31,880
everything over it what you want to be

00:42:30,290 --> 00:42:33,620
honest I was a bit lying on saying that

00:42:31,880 --> 00:42:37,160
Wireshark didn't know what's happening

00:42:33,620 --> 00:42:40,310
inside encrypted things but that because

00:42:37,160 --> 00:42:44,030
Wireshark can decrypt your HTTP traffic

00:42:40,310 --> 00:42:45,380
and it does this in a way by well you

00:42:44,030 --> 00:42:48,980
have to enable your browser for that

00:42:45,380 --> 00:42:50,960
because what needs to be done is for

00:42:48,980 --> 00:42:53,270
Wireshark to know what's going on is to

00:42:50,960 --> 00:42:55,160
figure out what is meant with something

00:42:53,270 --> 00:42:58,010
with the premaster secret what is that

00:42:55,160 --> 00:43:01,100
what is that number if you if you can't

00:42:58,010 --> 00:43:03,470
tell it to Wireshark then it doesn't

00:43:01,100 --> 00:43:05,180
know but you can decrypt it with

00:43:03,470 --> 00:43:07,310
something called the SSL key log file

00:43:05,180 --> 00:43:13,100
now this is something that is supported

00:43:07,310 --> 00:43:14,800
by I think Firefox and Chrome and if you

00:43:13,100 --> 00:43:17,810
do this on a Mac because I have a Mac

00:43:14,800 --> 00:43:21,950
set environment setting SSL key lock

00:43:17,810 --> 00:43:26,090
file to a certain file it will dump all

00:43:21,950 --> 00:43:28,130
the information for your SSL connection

00:43:26,090 --> 00:43:31,490
so it will dump the premaster secrets

00:43:28,130 --> 00:43:33,740
and all kinds of clock number stuff so

00:43:31,490 --> 00:43:36,290
that information can be picked up by

00:43:33,740 --> 00:43:39,320
Wireshark and actually decrypted for you

00:43:36,290 --> 00:43:41,120
so nobody else can do it but for you and

00:43:39,320 --> 00:43:43,940
your own system you can do it as long as

00:43:41,120 --> 00:43:46,759
you tell the browser use this one

00:43:43,940 --> 00:43:50,299
and I can demonstrate to you because

00:43:46,759 --> 00:43:53,240
I've done it as well so I've added that

00:43:50,299 --> 00:43:59,089
environment setting to my system so it

00:43:53,240 --> 00:44:02,440
will be available now inside Wireshark I

00:43:59,089 --> 00:44:05,630
have of course SSL because they haven't

00:44:02,440 --> 00:44:09,170
renamed the TLS yet and I saved it in

00:44:05,630 --> 00:44:14,089
temp Rito text and if I click OK then

00:44:09,170 --> 00:44:15,859
all of a sudden I will see ok you

00:44:14,089 --> 00:44:19,960
remember that after the cipher spec

00:44:15,859 --> 00:44:23,930
something else came up came as well and

00:44:19,960 --> 00:44:25,910
there's actually this one now you can

00:44:23,930 --> 00:44:29,480
see it's actually a handshake protocol

00:44:25,910 --> 00:44:31,339
called finished and afterwards you see

00:44:29,480 --> 00:44:34,039
here you secure socket layer so you see

00:44:31,339 --> 00:44:35,420
application data but now it can decrypt

00:44:34,039 --> 00:44:38,869
that and you can actually see what's

00:44:35,420 --> 00:44:41,269
going on apparently this is people too

00:44:38,869 --> 00:44:45,380
cold get it the fifth icon in this case

00:44:41,269 --> 00:44:46,430
so if you go to debug HCPs traffic you

00:44:45,380 --> 00:44:48,289
can do that quite easily

00:44:46,430 --> 00:44:50,720
even with Wireshark so you don't need

00:44:48,289 --> 00:44:52,220
any charles proxies or anything

00:44:50,720 --> 00:44:54,289
complicated to set it up

00:44:52,220 --> 00:44:57,170
just set your environment setting FYI

00:44:54,289 --> 00:44:59,450
shot up and running and you're done so

00:44:57,170 --> 00:45:05,779
this is really cool on on debugging

00:44:59,450 --> 00:45:07,849
stuff I think Firefox and Chrome are

00:45:05,779 --> 00:45:16,460
working definitely not Safari definitely

00:45:07,849 --> 00:45:21,079
not ie but maybe others yeah you can do

00:45:16,460 --> 00:45:24,349
it yeah you can do that as well and then

00:45:21,079 --> 00:45:25,930
you can do third party as well yes it is

00:45:24,349 --> 00:45:28,670
possible

00:45:25,930 --> 00:45:32,150
ok so basically this is what happening

00:45:28,670 --> 00:45:34,700
in TLS not really dead complex right

00:45:32,150 --> 00:45:39,039
it's still it is complex but you know

00:45:34,700 --> 00:45:39,039
it's manageable let me put it that way

00:45:40,240 --> 00:45:47,839
TLS has over it obviously but it's

00:45:45,950 --> 00:45:50,720
definitely worth it especially you know

00:45:47,839 --> 00:45:54,829
if you do banking ecommerce uploading

00:45:50,720 --> 00:45:57,490
cat pictures definitely go for HTTP some

00:45:54,829 --> 00:46:00,850
cipher suites are better than others but

00:45:57,490 --> 00:46:03,520
this is why sometimes servers decide on

00:46:00,850 --> 00:46:06,810
you know what let's do a less secure

00:46:03,520 --> 00:46:10,900
cipher suite because it's faster for us

00:46:06,810 --> 00:46:12,820
compute computational wise but you know

00:46:10,900 --> 00:46:15,820
for the reasons as well so our speed

00:46:12,820 --> 00:46:18,250
security is always a compromise if you

00:46:15,820 --> 00:46:20,950
want to figure out how your open SSL

00:46:18,250 --> 00:46:23,410
cipher suites are running on your own

00:46:20,950 --> 00:46:25,510
system you can use open SSL tool which

00:46:23,410 --> 00:46:27,400
speed that will actually show you all

00:46:25,510 --> 00:46:29,460
the you know benchmarks for all the

00:46:27,400 --> 00:46:34,800
different cipher suites on your system

00:46:29,460 --> 00:46:40,150
so are we safe yet I dare you to say yes

00:46:34,800 --> 00:46:43,210
but nope no what happens that three

00:46:40,150 --> 00:46:46,360
months the secret we talked about what

00:46:43,210 --> 00:46:48,700
happened if somebody and I don't gonna

00:46:46,360 --> 00:46:51,850
call any three-letter agencies in

00:46:48,700 --> 00:46:57,070
America if somebody gets hold of the

00:46:51,850 --> 00:46:59,770
private key what happens you basically

00:46:57,070 --> 00:47:03,550
can derive all the secrets write all the

00:46:59,770 --> 00:47:06,100
secret files so people like Pink Floyd

00:47:03,550 --> 00:47:08,830
and everything what they can do is they

00:47:06,100 --> 00:47:10,480
can say you know what let's grab all the

00:47:08,830 --> 00:47:12,790
information we have on the internet

00:47:10,480 --> 00:47:13,990
right now and we store it I don't know

00:47:12,790 --> 00:47:16,800
in a MySQL database

00:47:13,990 --> 00:47:20,140
you know how they gonna store it and

00:47:16,800 --> 00:47:22,030
then you just wait until either they're

00:47:20,140 --> 00:47:25,060
gonna crack the private key from

00:47:22,030 --> 00:47:28,120
somebody or they force the private key

00:47:25,060 --> 00:47:30,580
from somebody or some other way find a

00:47:28,120 --> 00:47:32,200
private key for somebody at that but at

00:47:30,580 --> 00:47:34,840
that point they can crack all the data

00:47:32,200 --> 00:47:37,960
and sometimes you know you don't care

00:47:34,840 --> 00:47:39,850
you know it means that last year you

00:47:37,960 --> 00:47:41,980
uploaded the picture or you did that or

00:47:39,850 --> 00:47:43,660
you did that but sometimes you know you

00:47:41,980 --> 00:47:47,050
don't want that so all the information

00:47:43,660 --> 00:47:49,720
you saw on HTTP might be safe now but

00:47:47,050 --> 00:47:53,650
might not be safe here ten years from

00:47:49,720 --> 00:47:57,610
now and could be correct by them this is

00:47:53,650 --> 00:48:01,780
what another cipher suite we seen before

00:47:57,610 --> 00:48:04,600
is using something called perfect

00:48:01,780 --> 00:48:07,540
forwarding secrecy and perfect

00:48:04,600 --> 00:48:10,570
forwarding secretly forwarding secrecy

00:48:07,540 --> 00:48:13,210
means that compromising the Prima

00:48:10,570 --> 00:48:15,850
secret does not compromise the complete

00:48:13,210 --> 00:48:17,590
communication by itself you still have

00:48:15,850 --> 00:48:20,890
to do that one by one

00:48:17,590 --> 00:48:22,890
basically it it's not really huh no

00:48:20,890 --> 00:48:26,860
scent correct but you can see it as like

00:48:22,890 --> 00:48:30,100
salting for your premaster secret so

00:48:26,860 --> 00:48:32,140
it's it's it's like a salt perfect

00:48:30,100 --> 00:48:34,720
forward secrecy means that if you

00:48:32,140 --> 00:48:37,600
compromise one key you cannot compromise

00:48:34,720 --> 00:48:39,460
other Keys as well so PFS or pre

00:48:37,600 --> 00:48:41,590
forwarding secrecy is something you want

00:48:39,460 --> 00:48:43,630
to implement on your service as well

00:48:41,590 --> 00:48:46,780
because you know makes things much safer

00:48:43,630 --> 00:48:49,990
or fortunately be a vast need server and

00:48:46,780 --> 00:48:53,230
browser support now browser support

00:48:49,990 --> 00:48:55,950
until not a long ago was really crap

00:48:53,230 --> 00:48:58,480
Cerf support wasn't much better and

00:48:55,950 --> 00:49:01,240
something like this will show you a

00:48:58,480 --> 00:49:04,650
little bit this is like almost a year

00:49:01,240 --> 00:49:08,830
ago and you can see that if you're using

00:49:04,650 --> 00:49:12,040
Safari then pretty much none of the web

00:49:08,830 --> 00:49:15,270
sites are using actually PFS they

00:49:12,040 --> 00:49:19,120
actually not pre for the secret secure

00:49:15,270 --> 00:49:21,700
even Firefox and Chrome they're up at

00:49:19,120 --> 00:49:24,340
one third of the sites one third of the

00:49:21,700 --> 00:49:26,980
HTTPS sites are configured for perfect

00:49:24,340 --> 00:49:29,320
warning secrecy it's not a lot this is

00:49:26,980 --> 00:49:32,230
only a year ago to be honest I haven't

00:49:29,320 --> 00:49:33,490
seen the ones this year but it won't be

00:49:32,230 --> 00:49:38,080
a little bit better

00:49:33,490 --> 00:49:40,510
not much Safari Internet explorer you're

00:49:38,080 --> 00:49:44,410
basically on your own at that point so

00:49:40,510 --> 00:49:47,740
it's up to you to use it or not another

00:49:44,410 --> 00:49:50,340
site Internet Explorer Microsoft doesn't

00:49:47,740 --> 00:49:53,830
really do perfect for in secrecy

00:49:50,340 --> 00:49:57,880
however if you use nginx web server with

00:49:53,830 --> 00:50:00,010
Firefox good time of the number of

00:49:57,880 --> 00:50:02,530
course are actually perfect forward

00:50:00,010 --> 00:50:05,050
secrecy enabled so this is really good

00:50:02,530 --> 00:50:07,630
this is why more people are using nginx

00:50:05,050 --> 00:50:10,060
than Apache nowadays so you get you know

00:50:07,630 --> 00:50:16,210
more stuff and more perfect forward

00:50:10,060 --> 00:50:19,120
secrecy automatically with it so this is

00:50:16,210 --> 00:50:21,130
what happens when you order the cipher

00:50:19,120 --> 00:50:23,140
suites before I show you the Apache and

00:50:21,130 --> 00:50:24,340
the nginx configurations they are

00:50:23,140 --> 00:50:27,610
actually config

00:50:24,340 --> 00:50:30,340
for doing perfect forwarding secrecy if

00:50:27,610 --> 00:50:32,680
the browser supports it if the browser

00:50:30,340 --> 00:50:35,110
doesn't support it it tries Auto cipher

00:50:32,680 --> 00:50:38,170
suites that aren't BFS and they both but

00:50:35,110 --> 00:50:39,460
still you know secure enough we have to

00:50:38,170 --> 00:50:42,190
be careful that if you're going to

00:50:39,460 --> 00:50:44,050
enable PFS cipher suites on your system

00:50:42,190 --> 00:50:46,380
it's going to be heavy computations

00:50:44,050 --> 00:50:49,390
because it works a little bit different

00:50:46,380 --> 00:50:51,430
so it's gonna be much much harder for

00:50:49,390 --> 00:50:53,050
your web servers so if you have a web

00:50:51,430 --> 00:50:54,040
server already running it at hundred

00:50:53,050 --> 00:50:56,440
percent of its power

00:50:54,040 --> 00:51:00,790
don't naval P of s because that's not

00:50:56,440 --> 00:51:03,670
going to work probably an SSL test the

00:51:00,790 --> 00:51:05,950
website will show you as well if you

00:51:03,670 --> 00:51:08,260
have perfect forward secrecy enabled and

00:51:05,950 --> 00:51:10,530
for which browsers it actually is

00:51:08,260 --> 00:51:14,170
supported because you can enable it for

00:51:10,530 --> 00:51:16,600
instance Chrome but maybe disable it for

00:51:14,170 --> 00:51:19,390
IE when it's not supported so every

00:51:16,600 --> 00:51:25,690
information is there as well really

00:51:19,390 --> 00:51:31,090
awesome site ok too much info not too

00:51:25,690 --> 00:51:34,090
worried still it's still late if you

00:51:31,090 --> 00:51:37,510
want to know how can I securely set up

00:51:34,090 --> 00:51:41,350
my web server again SSL labs the web

00:51:37,510 --> 00:51:42,790
site there's a best practices URL and it

00:51:41,350 --> 00:51:44,500
gives you all the information it will

00:51:42,790 --> 00:51:45,640
tell you what to do it will also tell

00:51:44,500 --> 00:51:49,390
you what not to do

00:51:45,640 --> 00:51:52,380
because sometimes things might seem a

00:51:49,390 --> 00:51:55,630
make sense like getting certificates for

00:51:52,380 --> 00:51:56,110
4096 bytes for instance doesn't make

00:51:55,630 --> 00:51:58,180
sense

00:51:56,110 --> 00:52:00,160
it will say it and it will say why it

00:51:58,180 --> 00:52:02,200
doesn't make sense etc so you can

00:52:00,160 --> 00:52:05,350
actually have a lot of information in

00:52:02,200 --> 00:52:07,030
there to set up your web server as well

00:52:05,350 --> 00:52:11,920
so definitely if you're going to set it

00:52:07,030 --> 00:52:14,350
up take a look at this site questions

00:52:11,920 --> 00:52:17,740
does does the the handshaking

00:52:14,350 --> 00:52:20,110
occur every time you do a request no it

00:52:17,740 --> 00:52:22,720
will do that when it's a new connection

00:52:20,110 --> 00:52:24,340
however when you you know do a second

00:52:22,720 --> 00:52:27,460
connection get in the second image or

00:52:24,340 --> 00:52:29,980
whatever it has a session ID like a

00:52:27,460 --> 00:52:31,450
session token that resolves still

00:52:29,980 --> 00:52:34,330
there's a little bit of overhead but not

00:52:31,450 --> 00:52:37,210
as much as you see see here 200

00:52:34,330 --> 00:52:41,900
milliseconds is a lot

00:52:37,210 --> 00:52:48,310
yes I Prix with you well there are some

00:52:41,900 --> 00:52:48,310
tweaks one of the most used weeks is get

00:52:48,430 --> 00:52:53,030
faster but less secure of Cyprus sweet

00:52:51,080 --> 00:52:56,089
because then the commutations aren't

00:52:53,030 --> 00:53:00,890
that much and you can actually use less

00:52:56,089 --> 00:53:05,349
time so apart from that there isn't

00:53:00,890 --> 00:53:07,970
really a lot I think the new TLS

00:53:05,349 --> 00:53:09,680
versions will have have more speed like

00:53:07,970 --> 00:53:12,050
like what we do with speedy and

00:53:09,680 --> 00:53:14,180
everything they want to do it in in TLS

00:53:12,050 --> 00:53:17,990
as well but for the moment no that's

00:53:14,180 --> 00:53:20,180
that's it but a proxy server is still

00:53:17,990 --> 00:53:22,910
secure because you have to manually

00:53:20,180 --> 00:53:25,460
upload the private key to that proxy

00:53:22,910 --> 00:53:27,500
server a proxy server by itself cannot

00:53:25,460 --> 00:53:32,030
do that you have to enforce it the

00:53:27,500 --> 00:53:34,670
processor to actually be able to decrypt

00:53:32,030 --> 00:53:36,440
the data it cannot do that by itself the

00:53:34,670 --> 00:53:38,810
same as Wireshark it cannot do it by

00:53:36,440 --> 00:53:41,930
itself but if I tell them to do it like

00:53:38,810 --> 00:53:44,420
I did with the environment setting then

00:53:41,930 --> 00:53:46,520
it can so it's still safe but you

00:53:44,420 --> 00:53:48,380
manually you can overrule that for

00:53:46,520 --> 00:53:51,260
mostly development purposes obviously

00:53:48,380 --> 00:53:53,359
the session IDs a because you do

00:53:51,260 --> 00:53:57,260
authentication of it as well so you have

00:53:53,359 --> 00:53:59,480
the signing of the information before it

00:53:57,260 --> 00:54:01,730
actually resumes something so it it's

00:53:59,480 --> 00:54:03,859
not that you can just send over session

00:54:01,730 --> 00:54:06,260
ID and you know what just start again

00:54:03,859 --> 00:54:07,880
you have to prove as a client that you

00:54:06,260 --> 00:54:11,540
are the owner of the session ID

00:54:07,880 --> 00:54:14,630
basically so it's yeah it's safe maybe

00:54:11,540 --> 00:54:19,670
not an SSL 1.0 or something but I don't

00:54:14,630 --> 00:54:24,080
know but until as it sits yes yeah well

00:54:19,670 --> 00:54:28,700
why doesn't multiple hosts on one IP

00:54:24,080 --> 00:54:30,920
doesn't work on HTTPS you mean the thing

00:54:28,700 --> 00:54:33,950
is it doesn't work on HTTP as well

00:54:30,920 --> 00:54:35,330
because you connect to a website but

00:54:33,950 --> 00:54:37,430
basically you're connecting to an IP

00:54:35,330 --> 00:54:40,580
address right

00:54:37,430 --> 00:54:43,400
what HTTP 1.1 does is say you know I

00:54:40,580 --> 00:54:45,950
want to get this URL but this is the

00:54:43,400 --> 00:54:48,950
host I want to connect to but you can't

00:54:45,950 --> 00:54:50,070
do that on HTTPS because HCPs is

00:54:48,950 --> 00:54:51,780
encrypted and it does

00:54:50,070 --> 00:54:53,960
now which server you need to go to

00:54:51,780 --> 00:54:58,410
because the HTTP is encrypted so

00:54:53,960 --> 00:55:03,000
basically the S&I extension is is much

00:54:58,410 --> 00:55:06,270
much like the host header in HTTP it

00:55:03,000 --> 00:55:07,980
uses the same way only it's not really

00:55:06,270 --> 00:55:10,110
supported from the beginning so it's

00:55:07,980 --> 00:55:14,580
it's an extension and not everybody

00:55:10,110 --> 00:55:16,710
supports it but nowadays named virtual

00:55:14,580 --> 00:55:18,570
host with the host name isn't supported

00:55:16,710 --> 00:55:21,780
on webs on clients that that only

00:55:18,570 --> 00:55:25,340
supports HTTP 1.0 but nobody cares so

00:55:21,780 --> 00:55:28,340
the same thing here as well ok clear

00:55:25,340 --> 00:55:28,340
anymore

00:55:30,170 --> 00:55:35,550
ok cool if you want to have more

00:55:32,910 --> 00:55:38,580
information about well me hopefully but

00:55:35,550 --> 00:55:41,250
from SSL programs well here's some

00:55:38,580 --> 00:55:42,660
information about me Twitter I have some

00:55:41,250 --> 00:55:45,510
blog posts as well take a look at the

00:55:42,660 --> 00:55:48,450
TLS stuff I did in PHP it's it's really

00:55:45,510 --> 00:55:52,880
funny I think and you can email me as

00:55:48,450 --> 00:55:52,880

YouTube URL: https://www.youtube.com/watch?v=-sWVS2eerYs


