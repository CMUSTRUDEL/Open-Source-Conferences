Title: PHP 5.4 --Â An Update - Johannes SchlÃ¼ter | IPC11
Publication date: 2013-05-10
Playlist: International PHP Conference 2011
Description: 
	Johannes SchlÃ¼ter at the International PHP Conference 2011 with his Session "PHP 5.4 --Â An Update".

The successful launch of PHP 5.3 in 2009 has not been the end of the development for PHP. Quite contrary: with new contributors, new ideas and new features PHP proves to be among the language platforms moving the fastest. In this session you will learn about new features in PHP 5.4, which recently reached beta status, and will learn what you can do now to prepare your code.

More information: https://phpconference.com/en
Captions: 
	00:00:08,809 --> 00:00:16,920
so good morning everybody when I started

00:00:15,480 --> 00:00:19,560
these slides i was a little bit

00:00:16,920 --> 00:00:23,189
wondering about what i thought what the

00:00:19,560 --> 00:00:25,140
topic would be php5 for an update it's a

00:00:23,189 --> 00:00:28,349
session and update on what's going on or

00:00:25,140 --> 00:00:30,630
we'll php5 for be only a small update

00:00:28,349 --> 00:00:33,989
which you can easily apply to your

00:00:30,630 --> 00:00:35,760
systems I'm not right to which of these

00:00:33,989 --> 00:00:38,520
bogus I'm going to talk about maybe

00:00:35,760 --> 00:00:40,700
about those making this an update

00:00:38,520 --> 00:00:45,270
session talking about an update of

00:00:40,700 --> 00:00:48,750
current PHP versions so who am i I'm

00:00:45,270 --> 00:00:52,020
johannes i'm working at at oracle in the

00:00:48,750 --> 00:00:55,399
mysql engineering team where I'm doing

00:00:52,020 --> 00:00:58,829
all different kinds stuff related to PHP

00:00:55,399 --> 00:01:01,820
basically trying to make mysql more

00:00:58,829 --> 00:01:07,350
accessible to all of you developing PHP

00:01:01,820 --> 00:01:09,150
at the same time a bit outside of my job

00:01:07,350 --> 00:01:12,540
I'm doing the release management for the

00:01:09,150 --> 00:01:15,420
 series of PHP 53 but i'm going to

00:01:12,540 --> 00:01:17,189
talk here about PHP 5 for release

00:01:15,420 --> 00:01:18,869
management basically means that I'm

00:01:17,189 --> 00:01:21,990
responsible for everything which is

00:01:18,869 --> 00:01:24,600
broken in PHP 53 and if something is

00:01:21,990 --> 00:01:26,040
very good in PHP 53 come to me talk to

00:01:24,600 --> 00:01:28,409
me and I will tell you who is

00:01:26,040 --> 00:01:31,070
responsible and whom you can send a gift

00:01:28,409 --> 00:01:33,540
or whatever to say thank you for

00:01:31,070 --> 00:01:36,030
implementing a feature if you want to

00:01:33,540 --> 00:01:39,600
read my blog or email me or follow me on

00:01:36,030 --> 00:01:47,369
Twitter there's the information about

00:01:39,600 --> 00:01:52,079
that now why doesn't this work as it's

00:01:47,369 --> 00:01:53,549
supposed to be so um version

00:01:52,079 --> 00:01:55,829
distributing I think I'm always

00:01:53,549 --> 00:01:58,170
wondering a little bit about it's a bit

00:01:55,829 --> 00:01:59,820
hard to see you all with the lights on

00:01:58,170 --> 00:02:02,159
here from stage but we will do it

00:01:59,820 --> 00:02:06,780
anyways who is still using PHP for

00:02:02,159 --> 00:02:12,850
having to care about PHP 5 PHP for one

00:02:06,780 --> 00:02:18,640
person 2 3 4 you poor people

00:02:12,850 --> 00:02:20,260
you a very poor and I hope you get the

00:02:18,640 --> 00:02:22,300
chance to update to a more modern

00:02:20,260 --> 00:02:24,580
version of PHP at some time or get rid

00:02:22,300 --> 00:02:27,490
of the project or whatever who is using

00:02:24,580 --> 00:02:30,790
PHP 52 mainly or has to care about PHP

00:02:27,490 --> 00:02:34,480
52 compatibility that's a few more PHP

00:02:30,790 --> 00:02:36,250
53 who's using PHP 53 stuff own oh it's

00:02:34,480 --> 00:02:40,690
about the same a little bit more on page

00:02:36,250 --> 00:02:44,170
p53 maybe we are using 520 still it's

00:02:40,690 --> 00:02:49,000
the update 253 is quite easy and php5

00:02:44,170 --> 00:02:52,000
two is out of support by PHP internet so

00:02:49,000 --> 00:02:53,290
you should update especially as the next

00:02:52,000 --> 00:02:54,820
updates coming and the next one is

00:02:53,290 --> 00:02:57,760
coming and the next one is coming next

00:02:54,820 --> 00:03:00,520
one is coming that's quite odd statistic

00:02:57,760 --> 00:03:01,870
by the way it's just from an application

00:03:00,520 --> 00:03:05,110
where we have a calling home feature

00:03:01,870 --> 00:03:07,780
integrated and that's over quite a few

00:03:05,110 --> 00:03:12,580
years Spencer it's no current statistic

00:03:07,780 --> 00:03:15,010
on what's got out but PHP 52 is I guess

00:03:12,580 --> 00:03:21,430
still the the dominant platform

00:03:15,010 --> 00:03:23,680
unfortunately that's broken now it's

00:03:21,430 --> 00:03:26,140
there that's a problem of these this

00:03:23,680 --> 00:03:28,840
office program i'm using for this

00:03:26,140 --> 00:03:31,120
presentation that sometimes it loses

00:03:28,840 --> 00:03:36,490
part of the content anyways who had

00:03:31,120 --> 00:03:41,290
about PHP 6 and then passed who tried it

00:03:36,490 --> 00:03:45,520
out derek is the only one yeah good for

00:03:41,290 --> 00:03:47,740
years and PHP 6 of dead and we

00:03:45,520 --> 00:03:51,930
discovered some years ago well we have

00:03:47,740 --> 00:03:55,180
this PHP 6 project going on which was an

00:03:51,930 --> 00:03:58,420
major effort to bring more native unico

00:03:55,180 --> 00:04:00,820
into the PHP runtime into PHP making it

00:03:58,420 --> 00:04:04,210
more unicode aware from Anton level and

00:04:00,820 --> 00:04:05,980
then we figured hmm it's taking so much

00:04:04,210 --> 00:04:07,720
time to do you have so many other

00:04:05,980 --> 00:04:11,650
features so let's bring out a new

00:04:07,720 --> 00:04:13,870
version and we call that PHP 53 say what

00:04:11,650 --> 00:04:16,960
NRA mostly was talking about back then

00:04:13,870 --> 00:04:20,890
he was driving the PHP 6 product for

00:04:16,960 --> 00:04:25,330
some time was that PHP 53 is PHP six

00:04:20,890 --> 00:04:26,680
without a unique out stuff so we

00:04:25,330 --> 00:04:28,750
introduced namespace

00:04:26,680 --> 00:04:30,370
has been introduced anonymous functions

00:04:28,750 --> 00:04:33,940
or closures or whatever you want to call

00:04:30,370 --> 00:04:37,300
them and some other things in PHP 5 3

00:04:33,940 --> 00:04:40,990
and release that as a step towards PHP

00:04:37,300 --> 00:04:44,470
six now it's a few years later and we

00:04:40,990 --> 00:04:47,560
figured out well we have so many things

00:04:44,470 --> 00:04:51,490
ready and with PHP 6 project is going

00:04:47,560 --> 00:04:55,870
nowhere so nowadays we could say PHP 54

00:04:51,490 --> 00:05:00,580
is PHP six without unicode well with the

00:04:55,870 --> 00:05:04,240
small difference that PHP six is a

00:05:00,580 --> 00:05:07,090
cancer project fauna and we are moving

00:05:04,240 --> 00:05:09,400
in a way and maybe someday we start with

00:05:07,090 --> 00:05:12,550
a new approach for doing deeper unicode

00:05:09,400 --> 00:05:17,349
new race integration maybe not we will

00:05:12,550 --> 00:05:19,660
see one one thing about releases of

00:05:17,349 --> 00:05:22,389
software and updates the first question

00:05:19,660 --> 00:05:25,000
always is what will it break can I

00:05:22,389 --> 00:05:29,229
simply update it and run my applications

00:05:25,000 --> 00:05:31,960
as they were and well PHP six a PHP 54

00:05:29,229 --> 00:05:35,710
how do you get PHP 6 in my head and php5

00:05:31,960 --> 00:05:39,190
for will break things and I considered a

00:05:35,710 --> 00:05:41,949
good thing to do since what we are

00:05:39,190 --> 00:05:44,260
breaking a mostly old stuff that's a

00:05:41,949 --> 00:05:47,169
rough list of things which are going to

00:05:44,260 --> 00:05:50,770
break I'm going to talk about some of

00:05:47,169 --> 00:05:52,090
these in detail 1 i'm not going to talk

00:05:50,770 --> 00:05:56,620
about for instance since it doesn't

00:05:52,090 --> 00:05:58,840
matter is a y2k compliance that's in PHP

00:05:56,620 --> 00:06:02,169
any setting we are going to remove and

00:05:58,840 --> 00:06:04,180
some other things but let's look into

00:06:02,169 --> 00:06:07,150
details for some one of the biggest

00:06:04,180 --> 00:06:10,389
changes in my from my perspective which

00:06:07,150 --> 00:06:11,979
is going to break some applications in

00:06:10,389 --> 00:06:13,949
some way if they don't care is that

00:06:11,979 --> 00:06:18,820
we're changing the default care of set

00:06:13,949 --> 00:06:21,039
so traditionally PHP automatically sends

00:06:18,820 --> 00:06:23,889
a content-type header to the web browser

00:06:21,039 --> 00:06:27,280
telling it ok you're getting HTML

00:06:23,889 --> 00:06:29,830
content it doesn't specify an encoding

00:06:27,280 --> 00:06:32,800
certainly browser will use for back to

00:06:29,830 --> 00:06:36,159
its default encoding which is letting

00:06:32,800 --> 00:06:39,840
one or code page 2 52 on Windows or

00:06:36,159 --> 00:06:39,840
whatever zone and

00:06:39,930 --> 00:06:47,050
so basic encoding which is good for our

00:06:44,470 --> 00:06:49,350
environment we have our German unloads

00:06:47,050 --> 00:06:52,720
and we have all that kind of stuff and

00:06:49,350 --> 00:06:57,880
that's going to be changed then PHP will

00:06:52,720 --> 00:06:59,650
send a carrot equals utf-8 which then

00:06:57,880 --> 00:07:06,160
means that the web page you're standing

00:06:59,650 --> 00:07:08,170
will be interpreted as utf-8 so let's

00:07:06,160 --> 00:07:09,940
talk about for about where it says

00:07:08,170 --> 00:07:13,600
consequences this is not only about the

00:07:09,940 --> 00:07:15,640
output but we're also changing the some

00:07:13,600 --> 00:07:19,170
functions in PHP like HTML and tities

00:07:15,640 --> 00:07:21,610
HTML special cars so they by default

00:07:19,170 --> 00:07:24,580
interpret the interim the input they get

00:07:21,610 --> 00:07:27,400
as he would have eight and not let in

00:07:24,580 --> 00:07:29,920
one what they did before when we are

00:07:27,400 --> 00:07:32,200
sending out a web page as you'd hear

00:07:29,920 --> 00:07:34,420
fate and it has a form on it the web

00:07:32,200 --> 00:07:39,130
browser will typically respond with an

00:07:34,420 --> 00:07:40,900
answer using the utf-8 encoding so even

00:07:39,130 --> 00:07:44,200
that will change that the data you get

00:07:40,900 --> 00:07:46,690
will be utf-8 that's a bit unfortunate

00:07:44,200 --> 00:07:48,730
if you didn't consider it but you can't

00:07:46,690 --> 00:07:52,900
prepare for this in your application

00:07:48,730 --> 00:07:56,860
already by a setting your encoding in

00:07:52,900 --> 00:07:59,470
your application properly every time so

00:07:56,860 --> 00:08:03,190
don't rely on the am on the default

00:07:59,470 --> 00:08:08,050
header but set em content content type

00:08:03,190 --> 00:08:12,340
text HTML cancered iso 8859-1 or

00:08:08,050 --> 00:08:14,560
whatever and nanny application will

00:08:12,340 --> 00:08:17,380
still use the old end coding and will

00:08:14,560 --> 00:08:19,780
continue to work hopefully when using

00:08:17,380 --> 00:08:23,110
HTML entities and HTML special care stay

00:08:19,780 --> 00:08:25,420
as the third parameter i think it is the

00:08:23,110 --> 00:08:30,670
second the second third parameters about

00:08:25,420 --> 00:08:33,790
quotes so the the second parameter is it

00:08:30,670 --> 00:08:36,940
a second one of the parameters is the

00:08:33,790 --> 00:08:39,010
encoding of the string which would be

00:08:36,940 --> 00:08:41,440
used by HTML and titus and you should

00:08:39,010 --> 00:08:44,440
always pass and encoding there then your

00:08:41,440 --> 00:08:46,960
future safe that's a small change in

00:08:44,440 --> 00:08:49,480
your application you should do and set

00:08:46,960 --> 00:08:51,970
the encoding there the proper thing

00:08:49,480 --> 00:08:53,560
might also be might also to change the

00:08:51,970 --> 00:08:55,210
application go over to UT

00:08:53,560 --> 00:08:58,210
fate with your application use that

00:08:55,210 --> 00:09:00,820
encoding on a long run that gives you

00:08:58,210 --> 00:09:07,140
way less trouble using that encoding but

00:09:00,820 --> 00:09:10,180
for a small time it's a good way to

00:09:07,140 --> 00:09:12,160
specific to specify explicitly that

00:09:10,180 --> 00:09:17,380
you're using latin1 and you won't have

00:09:12,160 --> 00:09:19,390
problems with this in the future so one

00:09:17,380 --> 00:09:20,710
other thing we're removing and which I

00:09:19,390 --> 00:09:22,930
consider is a good thing which are

00:09:20,710 --> 00:09:26,200
removing or it's actually the first

00:09:22,930 --> 00:09:30,490
thing on the slide is that a safe mode

00:09:26,200 --> 00:09:34,350
is going to be removed safe mode was

00:09:30,490 --> 00:09:37,180
invented yields back in the times before

00:09:34,350 --> 00:09:39,490
virtualization before different other

00:09:37,180 --> 00:09:43,870
mechanisms we have a nowadays as a way

00:09:39,490 --> 00:09:49,029
to enclose the PHP application so it's a

00:09:43,870 --> 00:09:50,650
small area for itself and have

00:09:49,029 --> 00:09:53,110
especially in shared hosting

00:09:50,650 --> 00:09:55,860
environments it's interesting to to lock

00:09:53,110 --> 00:09:58,660
down what the PHP application can do

00:09:55,860 --> 00:10:01,330
over time it has shown that the setting

00:09:58,660 --> 00:10:04,839
doesn't really work out as well as one

00:10:01,330 --> 00:10:11,940
might hope there are places where it can

00:10:04,839 --> 00:10:16,270
be bypassed there are places where it's

00:10:11,940 --> 00:10:18,460
hurting more than it helps it's hard to

00:10:16,270 --> 00:10:22,330
really implement in the code sorry

00:10:18,460 --> 00:10:25,690
dropped it what we what we will keep its

00:10:22,330 --> 00:10:28,360
the open basedir restriction setting so

00:10:25,690 --> 00:10:31,360
you can specify okay that user may only

00:10:28,360 --> 00:10:34,450
access files in that area in that

00:10:31,360 --> 00:10:37,870
subdirectory and nothing more that

00:10:34,450 --> 00:10:45,850
setting will stay and can be used

00:10:37,870 --> 00:10:48,400
continuously in future so if you rely on

00:10:45,850 --> 00:10:51,040
this feature two separate things out and

00:10:48,400 --> 00:10:54,040
you want to really have a separation

00:10:51,040 --> 00:10:56,170
between things nowadays virtualization

00:10:54,040 --> 00:10:58,720
has a very little overhead there are

00:10:56,170 --> 00:11:01,330
other system system features for

00:10:58,720 --> 00:11:05,589
separating User Content you can use some

00:11:01,330 --> 00:11:07,209
su rapper you can use privileged systems

00:11:05,589 --> 00:11:09,970
on some operating

00:11:07,209 --> 00:11:12,699
and some kinds of these would really

00:11:09,970 --> 00:11:15,040
bring the separation from the operating

00:11:12,699 --> 00:11:17,889
system and not in the sleigh of PHP with

00:11:15,040 --> 00:11:20,230
which is quite high up and can't do the

00:11:17,889 --> 00:11:25,569
same good job as the operating system

00:11:20,230 --> 00:11:28,179
can do itself okay so from developer

00:11:25,569 --> 00:11:30,160
this would make things only simpler and

00:11:28,179 --> 00:11:32,829
not hurt in any way that it's being

00:11:30,160 --> 00:11:34,449
removed some operations people might

00:11:32,829 --> 00:11:37,779
have bit complained some shared hosting

00:11:34,449 --> 00:11:40,079
people might complain but developers

00:11:37,779 --> 00:11:43,149
should be happy about this being gone

00:11:40,079 --> 00:11:45,759
another thing where everybody using PHP

00:11:43,149 --> 00:11:50,009
should be happy about being gone is our

00:11:45,759 --> 00:11:53,529
friend magic votes who hates magic votes

00:11:50,009 --> 00:11:56,079
come on I want to see all hands I want

00:11:53,529 --> 00:12:01,360
to see all handsome magic votes really

00:11:56,079 --> 00:12:04,119
really really hurt if I if I look back

00:12:01,360 --> 00:12:08,009
at some old PHP code that's what we did

00:12:04,119 --> 00:12:11,379
10 years ago or so dollar name had been

00:12:08,009 --> 00:12:13,600
thanks to register globals and variable

00:12:11,379 --> 00:12:16,149
coming from the outside name parameter

00:12:13,600 --> 00:12:21,339
from the URL or something we directly

00:12:16,149 --> 00:12:24,879
put it in the SQL query and happily just

00:12:21,339 --> 00:12:27,160
was more or less safe code since magic

00:12:24,879 --> 00:12:30,999
votes did some escaping and we're

00:12:27,160 --> 00:12:33,549
placing it inside vote so in some

00:12:30,999 --> 00:12:35,769
situations might actually be safe but

00:12:33,549 --> 00:12:39,519
you still shouldn't do it so what people

00:12:35,769 --> 00:12:41,980
came up with moss in a very simplified

00:12:39,519 --> 00:12:43,569
way doing something like that that's

00:12:41,980 --> 00:12:45,730
that's not good way of doing this

00:12:43,569 --> 00:12:49,199
getting rid of magic votes if it's

00:12:45,730 --> 00:12:52,569
enabled and then escape everything again

00:12:49,199 --> 00:12:54,610
this first part is really annoying to do

00:12:52,569 --> 00:12:56,259
all the time but you have to do it if

00:12:54,610 --> 00:12:57,850
you want to write in portable

00:12:56,259 --> 00:13:00,009
application which works on every host

00:12:57,850 --> 00:13:02,160
you have to get rid of these magic

00:13:00,009 --> 00:13:06,490
quotes since you can rely on them being

00:13:02,160 --> 00:13:09,399
turned off or turn on or whatever and so

00:13:06,490 --> 00:13:14,549
you get rid of them and then do the

00:13:09,399 --> 00:13:14,549
escaping again in

00:13:14,819 --> 00:13:21,220
in future one can get rid of these

00:13:18,249 --> 00:13:23,560
things one has to mind one I always has

00:13:21,220 --> 00:13:25,540
to mind of courses that you still have

00:13:23,560 --> 00:13:28,240
to do the escaping so you can rid of the

00:13:25,540 --> 00:13:33,089
can't get rid of the lower part but all

00:13:28,240 --> 00:13:36,579
is handling about its magic folds on and

00:13:33,089 --> 00:13:38,350
have I have to get rid of this is going

00:13:36,579 --> 00:13:42,009
away and I think it's a good thing to

00:13:38,350 --> 00:13:47,350
not have anymore this is bad feature and

00:13:42,009 --> 00:13:50,319
now so what you should do in preparation

00:13:47,350 --> 00:13:53,230
for an update is refugee application

00:13:50,319 --> 00:13:59,110
make sure it's a good advice and

00:13:53,230 --> 00:14:01,809
actually even even not only for for php5

00:13:59,110 --> 00:14:04,120
for compatibility but also general

00:14:01,809 --> 00:14:06,970
advice make sure your scaping your data

00:14:04,120 --> 00:14:08,920
properly all the time and make sure you

00:14:06,970 --> 00:14:13,779
don't rely on magic quotes to do this

00:14:08,920 --> 00:14:18,879
since magic quotes imagining and magic

00:14:13,779 --> 00:14:23,529
doesn't really work out well ok so we've

00:14:18,879 --> 00:14:25,300
dropped some things and php5 for and did

00:14:23,529 --> 00:14:27,579
I did lists are more things more things

00:14:25,300 --> 00:14:29,529
like SQLite two weeks stems from the

00:14:27,579 --> 00:14:33,610
previous slide and some other one things

00:14:29,529 --> 00:14:38,550
so there's some void and why it can be

00:14:33,610 --> 00:14:43,629
filled with new stuff we have a smooth

00:14:38,550 --> 00:14:46,540
for a few small additions in PHP one

00:14:43,629 --> 00:14:51,180
thing is around this small tag here

00:14:46,540 --> 00:14:54,639
that's not bounty to the short X

00:14:51,180 --> 00:14:57,160
directive in php.ini which means it's

00:14:54,639 --> 00:15:00,490
always an available you can always use

00:14:57,160 --> 00:15:02,559
this thing with PHP 54 and it will it

00:15:00,490 --> 00:15:05,259
will work and every system which is nice

00:15:02,559 --> 00:15:08,949
for people using templates with PHP who

00:15:05,259 --> 00:15:11,529
doesn't know what this does does tag no

00:15:08,949 --> 00:15:12,999
hands showing up either you're ashamed

00:15:11,529 --> 00:15:18,639
of not knowing which wouldn't be a

00:15:12,999 --> 00:15:23,889
problem but I like when people reactants

00:15:18,639 --> 00:15:25,240
away and so you can always use that one

00:15:23,889 --> 00:15:27,430
it's really nice when you are using

00:15:25,240 --> 00:15:33,790
templates writing templates and

00:15:27,430 --> 00:15:36,190
HP what some people do then yeah here's

00:15:33,790 --> 00:15:39,700
the example what's going on those will

00:15:36,190 --> 00:15:41,920
always work another small addition to

00:15:39,700 --> 00:15:45,700
the language we've introduced and people

00:15:41,920 --> 00:15:47,770
introducing in PHP 54 is the syntax see

00:15:45,700 --> 00:15:49,779
it so you get a function call a function

00:15:47,770 --> 00:15:52,570
retreat is returning an array and you

00:15:49,779 --> 00:15:56,290
can directly access a specific element

00:15:52,570 --> 00:16:00,730
of the array there learn current

00:15:56,290 --> 00:16:02,560
discussion coming up since with irate we

00:16:00,730 --> 00:16:06,100
have two syntaxes you can use curly

00:16:02,560 --> 00:16:08,020
braces or brackets and this will only

00:16:06,100 --> 00:16:09,790
work only with the bracketed version

00:16:08,020 --> 00:16:12,760
maybe we are well extended I don't think

00:16:09,790 --> 00:16:17,529
so but might be that will work with

00:16:12,760 --> 00:16:20,399
curly braces too and it's it's a nice

00:16:17,529 --> 00:16:24,070
small addition many people I quested it

00:16:20,399 --> 00:16:27,190
here's an more or less real life example

00:16:24,070 --> 00:16:32,250
of real life since I didn't really use

00:16:27,190 --> 00:16:38,220
this code besides the slide that so here

00:16:32,250 --> 00:16:41,050
I'm having my iterator / PDO query and

00:16:38,220 --> 00:16:45,670
then I only interested in the first

00:16:41,050 --> 00:16:49,810
column of my result set of my here and

00:16:45,670 --> 00:16:51,940
so I can don't need a temporary variable

00:16:49,810 --> 00:16:53,620
which I used before to get the return

00:16:51,940 --> 00:16:56,230
value of the function call of the

00:16:53,620 --> 00:16:59,320
current function and then returning the

00:16:56,230 --> 00:17:01,810
first element but it can directly access

00:16:59,320 --> 00:17:04,839
the element and everything else will be

00:17:01,810 --> 00:17:07,959
cleaned up happy and requested for some

00:17:04,839 --> 00:17:09,850
time we didn't introduce it earlier

00:17:07,959 --> 00:17:12,850
since we had some troubles or doubts

00:17:09,850 --> 00:17:16,720
about some memory handling issues but

00:17:12,850 --> 00:17:19,390
thats works fine though then there's

00:17:16,720 --> 00:17:25,959
another topical again this error on this

00:17:19,390 --> 00:17:28,150
slide no tie pins we we edit them now

00:17:25,959 --> 00:17:31,059
people are looking forward to having tie

00:17:28,150 --> 00:17:35,800
pins about four floats for integers for

00:17:31,059 --> 00:17:38,770
springs for bullion's for did i forget

00:17:35,800 --> 00:17:41,200
any type I didn't forget any type but

00:17:38,770 --> 00:17:41,710
that's not what we're adding that was

00:17:41,200 --> 00:17:43,450
and

00:17:41,710 --> 00:17:46,450
element for some time that you can add

00:17:43,450 --> 00:17:48,460
type in forest ring and say okay this

00:17:46,450 --> 00:17:49,960
parameter should be a string that

00:17:48,460 --> 00:17:52,809
parameter should be an integer that

00:17:49,960 --> 00:17:54,640
parameter should be in float but there

00:17:52,809 --> 00:17:57,250
were some lengthy discussions about this

00:17:54,640 --> 00:18:00,340
feature and in the end it was decided

00:17:57,250 --> 00:18:02,260
that it doesn't really fit in the

00:18:00,340 --> 00:18:07,600
language I guess there it will disagree

00:18:02,260 --> 00:18:09,640
with this and yeah so we didn't add

00:18:07,600 --> 00:18:12,010
these type ins we added one more type

00:18:09,640 --> 00:18:15,220
into anyways though which is called

00:18:12,010 --> 00:18:17,980
kahlerville what they call about type

00:18:15,220 --> 00:18:20,590
and you can say okay whatever it's being

00:18:17,980 --> 00:18:24,490
passed has to be something which can be

00:18:20,590 --> 00:18:27,340
called what can be called called can be

00:18:24,490 --> 00:18:28,990
a stirring the striving having a

00:18:27,340 --> 00:18:32,169
function name so if there's a function

00:18:28,990 --> 00:18:34,659
foo and calling this would work would be

00:18:32,169 --> 00:18:37,330
allowed if not it's in fatal error so

00:18:34,659 --> 00:18:41,080
it's so type in some hints but they

00:18:37,330 --> 00:18:42,520
produce an error callable could be an

00:18:41,080 --> 00:18:45,850
array with the class name and a method

00:18:42,520 --> 00:18:52,390
name or an object or appear to be 53

00:18:45,850 --> 00:18:55,450
closer or an animus function an issue

00:18:52,390 --> 00:18:57,669
with this carnival type ennis it doesn't

00:18:55,450 --> 00:19:00,460
specify an interface of some kind so

00:18:57,669 --> 00:19:02,620
it's you don't know if you can really

00:19:00,460 --> 00:19:07,750
use the function being passed for

00:19:02,620 --> 00:19:13,090
instance if foo expects two parameters

00:19:07,750 --> 00:19:16,090
you can say they call him expecting a

00:19:13,090 --> 00:19:18,429
call callable thing expecting two

00:19:16,090 --> 00:19:21,460
parameters of something like that can

00:19:18,429 --> 00:19:23,169
only say its callable and make no

00:19:21,460 --> 00:19:25,240
information about the about the

00:19:23,169 --> 00:19:29,710
prototype about the arguments being

00:19:25,240 --> 00:19:32,710
required which is a bit unfortunate but

00:19:29,710 --> 00:19:35,520
that's the way we can get it and make

00:19:32,710 --> 00:19:35,520
some people happy

00:19:41,000 --> 00:19:50,850
then another XM addition we did was not

00:19:47,490 --> 00:19:52,710
Allah dis support foreclosures that's a

00:19:50,850 --> 00:19:56,789
discussion we already had when we were

00:19:52,710 --> 00:20:00,779
using PHP 53 about how should we handle

00:19:56,789 --> 00:20:04,730
dollar this the reference to the current

00:20:00,779 --> 00:20:07,980
object when you are creating and closure

00:20:04,730 --> 00:20:12,179
inside it and in class inside an object

00:20:07,980 --> 00:20:15,390
method so right here and have a class

00:20:12,179 --> 00:20:19,500
with a function get printer and inside

00:20:15,390 --> 00:20:22,620
that a method and creating a closure and

00:20:19,500 --> 00:20:25,350
any question is what should shut dollar

00:20:22,620 --> 00:20:27,720
this be the same instance flying in

00:20:25,350 --> 00:20:29,399
those functions and there were some

00:20:27,720 --> 00:20:31,860
discounts about it whether we really

00:20:29,399 --> 00:20:34,289
wanted and or not and there are still

00:20:31,860 --> 00:20:37,490
some people who say it's a stupid idea

00:20:34,289 --> 00:20:42,840
to automatically bind the dollar this

00:20:37,490 --> 00:20:46,380
reference or it's not yeah but it was

00:20:42,840 --> 00:20:49,620
decided to do and so in this case when

00:20:46,380 --> 00:20:53,010
I'm here getting dollar I get printer

00:20:49,620 --> 00:20:54,899
and then use dollar printer in some

00:20:53,010 --> 00:20:58,710
other place somewhere ads and my

00:20:54,899 --> 00:21:00,600
application somewhere far far away the

00:20:58,710 --> 00:21:03,690
dollar this inside the function will

00:21:00,600 --> 00:21:09,419
still be the same object as the dollar a

00:21:03,690 --> 00:21:11,669
used here one thing we didn't do is if

00:21:09,419 --> 00:21:16,700
you're assigning this to a property like

00:21:11,669 --> 00:21:19,649
if we would say dollar this x equals

00:21:16,700 --> 00:21:21,600
function blah blah blah you can't

00:21:19,649 --> 00:21:26,690
directly call it it's a limitation in

00:21:21,600 --> 00:21:28,740
the language but I guess that's

00:21:26,690 --> 00:21:34,970
interesting for some people already in

00:21:28,740 --> 00:21:37,500
this case alright another big feature

00:21:34,970 --> 00:21:41,850
actually the biggest feature introduced

00:21:37,500 --> 00:21:44,850
with PHP 5 4 is trades crates is

00:21:41,850 --> 00:21:48,809
sometimes called engine level copy and

00:21:44,850 --> 00:21:51,389
paste what it basically does is you have

00:21:48,809 --> 00:21:54,029
a trait declaration which look

00:21:51,389 --> 00:21:56,609
like a class declaration he have some

00:21:54,029 --> 00:21:59,489
methods you can actually even define

00:21:56,609 --> 00:22:02,070
some properties in there which I don't

00:21:59,489 --> 00:22:04,139
have in this example and then have

00:22:02,070 --> 00:22:08,149
another then have a regular class and

00:22:04,139 --> 00:22:12,869
say this class uses the trade hello

00:22:08,149 --> 00:22:16,049
which is that one and by that the engine

00:22:12,869 --> 00:22:19,139
will do something which looks like it

00:22:16,049 --> 00:22:21,450
would copy the function from from the

00:22:19,139 --> 00:22:25,669
trade as it would be standing inside

00:22:21,450 --> 00:22:30,179
that code at that place so later on I

00:22:25,669 --> 00:22:32,700
can instantiate my class traits test and

00:22:30,179 --> 00:22:35,609
call the hello method and it will really

00:22:32,700 --> 00:22:41,849
behave like it had always been declared

00:22:35,609 --> 00:22:47,999
at this mmm point in the language and E

00:22:41,849 --> 00:22:51,059
and a code you can do some modifications

00:22:47,999 --> 00:22:54,419
to these methods being being imported

00:22:51,059 --> 00:22:58,259
for instance I can say okay I want to

00:22:54,419 --> 00:23:00,149
use from the hello world trade demand a

00:22:58,259 --> 00:23:03,659
method to say hello but I want to have a

00:23:00,149 --> 00:23:06,539
protected so when doing this this won't

00:23:03,659 --> 00:23:13,859
work since the method now is in public

00:23:06,539 --> 00:23:21,419
anymore but it's protected right one can

00:23:13,859 --> 00:23:23,669
do more things like having a trade which

00:23:21,419 --> 00:23:25,409
has a method called say something and

00:23:23,669 --> 00:23:28,499
have another trait where the method

00:23:25,409 --> 00:23:30,539
called say something import bows and you

00:23:28,499 --> 00:23:33,779
get a conflict so you have to you can

00:23:30,539 --> 00:23:36,479
rename it and say okay the site

00:23:33,779 --> 00:23:39,570
something of the hello trade well now we

00:23:36,479 --> 00:23:43,440
will call world and they'll say

00:23:39,570 --> 00:23:48,479
something from from the world class will

00:23:43,440 --> 00:23:51,929
be called say world and then this whole

00:23:48,479 --> 00:23:56,039
thing will behave like these methods are

00:23:51,929 --> 00:23:59,759
always been there which means they have

00:23:56,039 --> 00:24:02,009
access to private members of the my

00:23:59,759 --> 00:24:03,899
hello world class they have access to

00:24:02,009 --> 00:24:04,980
protected stuff they have access to

00:24:03,899 --> 00:24:08,760
Republic stuff up

00:24:04,980 --> 00:24:11,309
le2 if they approve it they can be

00:24:08,760 --> 00:24:13,740
accessed from only that class like it

00:24:11,309 --> 00:24:16,410
had been declared app and now look big

00:24:13,740 --> 00:24:18,900
questions of course when do I really use

00:24:16,410 --> 00:24:20,910
this a simple example I don't have it on

00:24:18,900 --> 00:24:23,309
a slider unfortunately would be

00:24:20,910 --> 00:24:25,950
something like Sebastian and a row in

00:24:23,309 --> 00:24:28,290
the room no okay so he can't kill me as

00:24:25,950 --> 00:24:30,660
a singleton implementation where you

00:24:28,290 --> 00:24:32,910
have the same implementation of a single

00:24:30,660 --> 00:24:37,669
you want to use it in many many many

00:24:32,910 --> 00:24:39,540
classes it always looks the same calling

00:24:37,669 --> 00:24:41,970
creating a new instance of the object

00:24:39,540 --> 00:24:45,059
passing in the Indy parameter C are

00:24:41,970 --> 00:24:48,570
getting and you need it in different

00:24:45,059 --> 00:24:51,510
classes now a classic way you could do

00:24:48,570 --> 00:24:54,750
is extend from the class having this

00:24:51,510 --> 00:24:56,160
this get instance method but that

00:24:54,750 --> 00:25:00,380
doesn't really make sense from the

00:24:56,160 --> 00:25:03,660
inheritance button point of view since n

00:25:00,380 --> 00:25:06,360
class extending that class isn't really

00:25:03,660 --> 00:25:08,820
related to to sing out in class in any

00:25:06,360 --> 00:25:10,700
way except that it wants to method so

00:25:08,820 --> 00:25:13,080
what you traditionally have to do is

00:25:10,700 --> 00:25:15,570
write this function i'll copy it over

00:25:13,080 --> 00:25:18,929
all the time they get a time and again

00:25:15,570 --> 00:25:21,390
and again which is a bit annoying one

00:25:18,929 --> 00:25:24,299
thing i recently saw when i was playing

00:25:21,390 --> 00:25:28,110
in the symphony to area some guy had

00:25:24,299 --> 00:25:30,030
written an implementation of trees we

00:25:28,110 --> 00:25:32,490
had in interface and then provided a

00:25:30,030 --> 00:25:36,809
default implementation for most of the

00:25:32,490 --> 00:25:38,370
methods using a trade so people who are

00:25:36,809 --> 00:25:39,960
happy with the default implementation

00:25:38,370 --> 00:25:41,730
can use the parts of the default

00:25:39,960 --> 00:25:43,740
implementation they need but i don't

00:25:41,730 --> 00:25:48,929
have to extend from it which is quite

00:25:43,740 --> 00:25:52,980
nice I guess so that's one a big big

00:25:48,929 --> 00:25:55,020
change in the in the language really one

00:25:52,980 --> 00:25:58,350
thing which makes me say something like

00:25:55,020 --> 00:26:02,700
that PHP is one of the fastest evolving

00:25:58,350 --> 00:26:06,030
languages existing if you look for

00:26:02,700 --> 00:26:08,429
example at Java Oracle recently released

00:26:06,030 --> 00:26:11,220
java 7 they release and they are

00:26:08,429 --> 00:26:14,520
planning to Reese Java 8 and if you look

00:26:11,220 --> 00:26:16,770
at that in the language guess it takes

00:26:14,520 --> 00:26:18,480
them way longer to change your stuff and

00:26:16,770 --> 00:26:20,850
it's more they have quite

00:26:18,480 --> 00:26:23,790
smaller changes that we are having 53

00:26:20,850 --> 00:26:26,760
adding namespaces adding closures 54

00:26:23,790 --> 00:26:29,809
adding stuff like trades and so on so

00:26:26,760 --> 00:26:33,270
there's really things happening in PHP

00:26:29,809 --> 00:26:36,600
faster than in other languages it's it

00:26:33,270 --> 00:26:39,690
it's at least what I'm claiming we did

00:26:36,600 --> 00:26:45,780
some small changes to reflection one

00:26:39,690 --> 00:26:49,230
thing of course is around trade so when

00:26:45,780 --> 00:26:52,530
using traits as I said the method

00:26:49,230 --> 00:26:55,410
behaves like it had always been in that

00:26:52,530 --> 00:26:57,540
class so it will reflection you can see

00:26:55,410 --> 00:26:59,360
okay that method belongs to that class

00:26:57,540 --> 00:27:01,530
and in turn has always been there but

00:26:59,360 --> 00:27:04,410
additionally can see okay have a class

00:27:01,530 --> 00:27:08,780
and can ask but why our reflection which

00:27:04,410 --> 00:27:12,350
other which trades are being referred to

00:27:08,780 --> 00:27:15,780
and get some information about this

00:27:12,350 --> 00:27:18,000
there's some trouble I had with get

00:27:15,780 --> 00:27:20,549
trade aliases but it's fixed so I could

00:27:18,000 --> 00:27:23,070
I should be I shouldn't strike it out

00:27:20,549 --> 00:27:27,660
anymore and that's an older slide

00:27:23,070 --> 00:27:31,020
actually um and so there are some

00:27:27,660 --> 00:27:33,059
methods for that but when you're having

00:27:31,020 --> 00:27:34,980
your reflection method instance showing

00:27:33,059 --> 00:27:36,840
you a method it won't tell you which

00:27:34,980 --> 00:27:39,030
trade it's coming from it will tell you

00:27:36,840 --> 00:27:41,580
oh I belong to the class and you have no

00:27:39,030 --> 00:27:44,750
way I'm getting back to the original

00:27:41,580 --> 00:27:48,990
trade to get some reflection on that

00:27:44,750 --> 00:27:51,419
then another small addition we did to to

00:27:48,990 --> 00:27:53,190
the reflection API I don't know if you

00:27:51,419 --> 00:27:55,740
know the difference there are two kinds

00:27:53,190 --> 00:27:59,190
of extensions for PHP dear PHP modules

00:27:55,740 --> 00:28:01,559
and send extensions PHP more nodes is

00:27:59,190 --> 00:28:03,840
basically everything in PHP every

00:28:01,559 --> 00:28:06,419
function as an a PHP module or extension

00:28:03,840 --> 00:28:09,660
and then there are some things like XD

00:28:06,419 --> 00:28:12,929
bug by Derek which I have specific

00:28:09,660 --> 00:28:14,960
features need a deeper way in the engine

00:28:12,929 --> 00:28:17,580
or and meet some other time when they

00:28:14,960 --> 00:28:19,830
initialize or something because I sent

00:28:17,580 --> 00:28:24,330
extensions and there's some small

00:28:19,830 --> 00:28:26,160
reflection stuff around them really

00:28:24,330 --> 00:28:28,770
small additional only

00:28:26,160 --> 00:28:32,850
and then there are some change to the to

00:28:28,770 --> 00:28:37,020
the command line interface and of course

00:28:32,850 --> 00:28:40,620
these reflection form we have this minus

00:28:37,020 --> 00:28:42,720
minus our e- minus RC flags to get

00:28:40,620 --> 00:28:44,880
reflection information about classes and

00:28:42,720 --> 00:28:46,740
extensions and functions inside PHP

00:28:44,880 --> 00:28:49,410
directly from your command line that's

00:28:46,740 --> 00:28:55,970
extended for ascent extensions well

00:28:49,410 --> 00:28:58,890
small change not really notable ten php5

00:28:55,970 --> 00:29:01,500
to I guess introduced the feature called

00:28:58,890 --> 00:29:04,260
the interactive shell so if you have PHP

00:29:01,500 --> 00:29:06,990
compiled will read line support and he

00:29:04,260 --> 00:29:09,840
called PHP a you get an interactive

00:29:06,990 --> 00:29:13,470
prompt where you can type some code get

00:29:09,840 --> 00:29:16,970
it executed now I am changed and push

00:29:13,470 --> 00:29:20,630
the arrow up key change the line

00:29:16,970 --> 00:29:24,600
executed again and do things like that

00:29:20,630 --> 00:29:27,200
there were two main concerns are

00:29:24,600 --> 00:29:32,610
received by the future i implemented in

00:29:27,200 --> 00:29:34,620
initially and one is that as I said you

00:29:32,610 --> 00:29:37,710
need a red line module enabled for this

00:29:34,620 --> 00:29:40,890
and many distributions don't like

00:29:37,710 --> 00:29:44,880
enabling extensions as compiled in

00:29:40,890 --> 00:29:48,240
objects and they don't really like red

00:29:44,880 --> 00:29:50,240
line due to some licensing issues GPL

00:29:48,240 --> 00:29:55,950
PHP license and all that kind of stuff

00:29:50,240 --> 00:29:58,530
so with PHP 54 if red line is available

00:29:55,950 --> 00:30:01,980
as a shared object as an external PHP

00:29:58,530 --> 00:30:04,920
extension those interactive prompt will

00:30:01,980 --> 00:30:06,750
still work and there's another issue

00:30:04,920 --> 00:30:09,150
there was if they have been a fatal

00:30:06,750 --> 00:30:12,540
error inside the execution of a line and

00:30:09,150 --> 00:30:14,190
he will shell would terminate and would

00:30:12,540 --> 00:30:16,920
not store its history which is a bit

00:30:14,190 --> 00:30:21,720
annoying this will now continue usually

00:30:16,920 --> 00:30:24,240
in most cases to run mmm and there was a

00:30:21,720 --> 00:30:26,850
feature request about well I want to

00:30:24,240 --> 00:30:30,420
show my hostname inside the prompts I

00:30:26,850 --> 00:30:33,210
know which machine i'm on and what this

00:30:30,420 --> 00:30:35,920
looks like it or no if it's screenshot

00:30:33,210 --> 00:30:38,840
is big enough so

00:30:35,920 --> 00:30:43,070
somewhere as PHP minor dash a being

00:30:38,840 --> 00:30:46,040
called then you get a prompt PHP greater

00:30:43,070 --> 00:30:47,920
than sign and then I change a PHP I and

00:30:46,040 --> 00:30:50,780
I setting and can change my prompt and

00:30:47,920 --> 00:30:53,420
execute some code and it will survive

00:30:50,780 --> 00:30:55,400
fatal errors it's a nice tool for for

00:30:53,420 --> 00:30:57,290
development when quickly testing out

00:30:55,400 --> 00:31:06,710
some stuff I don't know anybody has ever

00:30:57,290 --> 00:31:09,110
used us mode know a few so PHP dash a

00:31:06,710 --> 00:31:15,020
when having red line and abled really

00:31:09,110 --> 00:31:18,140
useful help another edition for for the

00:31:15,020 --> 00:31:20,330
command line interface actually there

00:31:18,140 --> 00:31:26,390
are some people who say it shouldn't be

00:31:20,330 --> 00:31:27,710
in the NSEL a hate the slides it

00:31:26,390 --> 00:31:29,690
shouldn't be in the command line

00:31:27,710 --> 00:31:32,270
interface but should be its own binary

00:31:29,690 --> 00:31:36,140
which isn't embedded web server inside a

00:31:32,270 --> 00:31:38,690
PHP binary so you don't have to set up

00:31:36,140 --> 00:31:42,130
and represent to run your PHP

00:31:38,690 --> 00:31:46,820
application but you simply say PHP dash

00:31:42,130 --> 00:31:49,520
capital as localhost colon 8080 and you

00:31:46,820 --> 00:31:52,040
will have an HTTP server listening on

00:31:49,520 --> 00:31:53,960
the port 8080 on your local machine and

00:31:52,040 --> 00:31:56,960
you can access it from their local

00:31:53,960 --> 00:31:59,540
machine and get some files now you need

00:31:56,960 --> 00:32:00,920
to define a document root by default it

00:31:59,540 --> 00:32:03,110
will use the current working directory

00:32:00,920 --> 00:32:06,800
so if you're in the root of your

00:32:03,110 --> 00:32:09,710
application and start it up and there

00:32:06,800 --> 00:32:14,600
you go you have your web server and if

00:32:09,710 --> 00:32:18,160
you need a document root it's a dash t

00:32:14,600 --> 00:32:21,350
is the option like a document or hoot

00:32:18,160 --> 00:32:27,260
since dash R and dash D were already

00:32:21,350 --> 00:32:30,770
used so T was the available one now a

00:32:27,260 --> 00:32:34,730
web server in PHP question of your

00:32:30,770 --> 00:32:37,130
obvious latest may I use it to host my

00:32:34,730 --> 00:32:40,280
application well there's the small word

00:32:37,130 --> 00:32:43,280
word development for good reasons there

00:32:40,280 --> 00:32:45,320
are some limitations in it and we don't

00:32:43,280 --> 00:32:47,180
plan to make it a full-featured web

00:32:45,320 --> 00:32:48,509
server since they're better products for

00:32:47,180 --> 00:32:50,279
that there are people

00:32:48,509 --> 00:32:52,649
are focused on building web servers so

00:32:50,279 --> 00:32:54,989
there's no need for us to to compete in

00:32:52,649 --> 00:32:58,259
that area but provide something they can

00:32:54,989 --> 00:33:01,559
work with one of the limitations is PHP

00:32:58,259 --> 00:33:04,529
is single threaded so is this so it can

00:33:01,559 --> 00:33:09,419
handle one request at a time not what

00:33:04,529 --> 00:33:12,109
you want for web server usually and then

00:33:09,419 --> 00:33:16,679
there are some limitations about what

00:33:12,109 --> 00:33:19,469
about configuration possibilities and

00:33:16,679 --> 00:33:22,289
all that kind of stuff one thing for

00:33:19,469 --> 00:33:25,139
instance it doesn't support by itself is

00:33:22,289 --> 00:33:27,959
something like Maury white or other ey

00:33:25,139 --> 00:33:31,729
rules they say if you looks like this

00:33:27,959 --> 00:33:35,219
avoided to that but what you can do is

00:33:31,729 --> 00:33:39,679
to define a Rooter script and a routing

00:33:35,219 --> 00:33:43,709
script like it it on this command line

00:33:39,679 --> 00:33:46,229
this trip will always be called if it's

00:33:43,709 --> 00:33:48,690
specified this is the script which will

00:33:46,229 --> 00:33:50,669
always handle each and every quest in

00:33:48,690 --> 00:33:53,699
there you have access to all the

00:33:50,669 --> 00:33:56,909
different request variables and dollar

00:33:53,699 --> 00:33:59,099
underscore server like request URI or

00:33:56,909 --> 00:34:04,409
whatever and you can implement you a

00:33:59,099 --> 00:34:08,490
white handling yourself and I think it's

00:34:04,409 --> 00:34:11,279
quite nice addition to really start in

00:34:08,490 --> 00:34:16,379
the in the development and test your

00:34:11,279 --> 00:34:19,440
application out and even very useful to

00:34:16,379 --> 00:34:22,379
try out php5 for a tested before release

00:34:19,440 --> 00:34:25,319
it and give us feedback on things you

00:34:22,379 --> 00:34:27,179
are breaking on things not good and so

00:34:25,319 --> 00:34:28,740
on so we can fix them before the release

00:34:27,179 --> 00:34:34,379
i will talk about it a little bit later

00:34:28,740 --> 00:34:41,159
again when does the session end at half

00:34:34,379 --> 00:34:44,730
or if what ten minutes ago oh and then i

00:34:41,159 --> 00:34:47,460
have to hurry i wasn't we have that okay

00:34:44,730 --> 00:34:51,139
small addition Jason serializable if you

00:34:47,460 --> 00:34:51,139
have an object or you have an array I

00:34:51,529 --> 00:34:58,940
have 25 minutes he says somebody please

00:34:56,069 --> 00:34:58,940
look it up and tell me

00:34:59,690 --> 00:35:13,650
okay thanks then I don't have enough

00:35:05,610 --> 00:35:17,490
slides yeah of course so there's a small

00:35:13,650 --> 00:35:19,710
additions Jason Jason see realize we had

00:35:17,490 --> 00:35:22,260
it in the opening session basically

00:35:19,710 --> 00:35:25,710
everybody is doing nowadays everybody of

00:35:22,260 --> 00:35:28,380
course it's html5 web applications

00:35:25,710 --> 00:35:32,640
interactive blah blah blah and you need

00:35:28,380 --> 00:35:34,380
Jason well will I think 53 or 52 and

00:35:32,640 --> 00:35:36,930
whatever we introduced a JSON encode

00:35:34,380 --> 00:35:40,220
function which takes an array takes an

00:35:36,930 --> 00:35:43,140
object and encodes and as a json string

00:35:40,220 --> 00:35:45,570
now if you're totally putting in a more

00:35:43,140 --> 00:35:48,150
complex object structure might be nice

00:35:45,570 --> 00:35:50,250
to say okay I want to have this field at

00:35:48,150 --> 00:35:52,140
this field but not this field and so

00:35:50,250 --> 00:35:55,230
we're adding this Jason serializable

00:35:52,140 --> 00:35:59,940
interface if you implement it you need a

00:35:55,230 --> 00:36:04,610
method called Jason serialize and this

00:35:59,940 --> 00:36:08,520
method has to return a jason compliant

00:36:04,610 --> 00:36:11,310
string which won't be touched any more

00:36:08,520 --> 00:36:15,840
by PHP but copied over into new

00:36:11,310 --> 00:36:17,130
resulting string and which can do some

00:36:15,840 --> 00:36:20,250
magic whatever you need in your

00:36:17,130 --> 00:36:22,650
application really handy if you have

00:36:20,250 --> 00:36:25,170
really complex structures like an array

00:36:22,650 --> 00:36:27,390
of objects and you want to have these

00:36:25,170 --> 00:36:31,290
objects do some modifications or

00:36:27,390 --> 00:36:34,200
something like that question sometimes

00:36:31,290 --> 00:36:37,800
comes up with this is okay where's the

00:36:34,200 --> 00:36:39,380
Jason unsee realize interface when the

00:36:37,800 --> 00:36:42,360
basic information is that's not possible

00:36:39,380 --> 00:36:43,860
since Jason doesn't really have the

00:36:42,360 --> 00:36:47,430
information we need it has no type

00:36:43,860 --> 00:36:49,620
information there is no nothing else but

00:36:47,430 --> 00:36:53,250
the information whether it's an array or

00:36:49,620 --> 00:36:58,260
an object by an object is in the hash

00:36:53,250 --> 00:37:01,250
map and in raisin so not really useful

00:36:58,260 --> 00:37:06,570
to to figure out what should be done by

00:37:01,250 --> 00:37:08,910
d by the decoding which class would be

00:37:06,570 --> 00:37:10,750
which method should be attached so you

00:37:08,910 --> 00:37:12,490
have to do it yourself

00:37:10,750 --> 00:37:15,840
decoding do they do the conversion

00:37:12,490 --> 00:37:21,070
itself back into the objects you need

00:37:15,840 --> 00:37:23,650
now question always of course also is ok

00:37:21,070 --> 00:37:25,840
we have new features will PHP be slower

00:37:23,650 --> 00:37:28,090
and slower and slower and slower and

00:37:25,840 --> 00:37:30,270
slower and of course that's not it not

00:37:28,090 --> 00:37:34,720
the case I don't have current numbers

00:37:30,270 --> 00:37:36,100
unfortunately out I plan to run some

00:37:34,720 --> 00:37:41,380
benchmarks what I didn't do it in the

00:37:36,100 --> 00:37:44,020
end so it's a long list of the

00:37:41,380 --> 00:37:46,420
performance improvements there are

00:37:44,020 --> 00:37:48,640
things like internal we restore strings

00:37:46,420 --> 00:37:51,580
only one time if they used multiple

00:37:48,640 --> 00:37:54,910
times and the application which reduces

00:37:51,580 --> 00:37:57,880
memory reduced memory means a you don't

00:37:54,910 --> 00:38:00,910
have to allocate more memory which means

00:37:57,880 --> 00:38:02,590
less time and less memory usage means

00:38:00,910 --> 00:38:04,630
also you can't handle more regrets in

00:38:02,590 --> 00:38:09,100
parallel since you have more memory

00:38:04,630 --> 00:38:10,960
available and so there are many many are

00:38:09,100 --> 00:38:14,190
improvements in all different areas of

00:38:10,960 --> 00:38:16,840
PHP making and faster hopefully at least

00:38:14,190 --> 00:38:20,080
so that's always a good reason to to

00:38:16,840 --> 00:38:24,580
update especially again cloud cloud

00:38:20,080 --> 00:38:27,940
cloud spending less money for for cloud

00:38:24,580 --> 00:38:32,890
service is great and also for the

00:38:27,940 --> 00:38:35,740
environment key message always is tested

00:38:32,890 --> 00:38:38,740
tested test test release candidates test

00:38:35,740 --> 00:38:42,180
alpha versions test beta versions it's

00:38:38,740 --> 00:38:46,180
really important recently with the PHP 5

00:38:42,180 --> 00:38:50,830
375 38 we really had some issues in a

00:38:46,180 --> 00:38:53,680
testing area like in PHP 538 currently

00:38:50,830 --> 00:38:56,560
the is underscore a function behaves

00:38:53,680 --> 00:38:58,600
differently than it did before which is

00:38:56,560 --> 00:39:00,220
triggering some autoloaders which are

00:38:58,600 --> 00:39:01,990
failing or just giving we're just

00:39:00,220 --> 00:39:05,110
breaking some applications and kind of

00:39:01,990 --> 00:39:09,130
does stuff which means it wasn't really

00:39:05,110 --> 00:39:12,070
tested enough we have our testitude we

00:39:09,130 --> 00:39:15,430
had some issues running that too there

00:39:12,070 --> 00:39:20,620
was a 537 release so we needed a 538

00:39:15,430 --> 00:39:23,790
release but even if we do a better job

00:39:20,620 --> 00:39:26,130
at running our test suite for PHP

00:39:23,790 --> 00:39:29,100
it's still just a limited set of

00:39:26,130 --> 00:39:31,290
functionality available in PHP a key

00:39:29,100 --> 00:39:33,420
part really is that people like you who

00:39:31,290 --> 00:39:37,350
are writing applications and you're

00:39:33,420 --> 00:39:39,060
using PHP in ways which the developers

00:39:37,350 --> 00:39:44,010
didn't intend or don't didn't think

00:39:39,060 --> 00:39:46,380
about it might be used should really

00:39:44,010 --> 00:39:48,300
test these things and the sooner we get

00:39:46,380 --> 00:39:51,870
feedback the sooner we can fix it ever

00:39:48,300 --> 00:39:54,420
it's released with a bug like this a

00:39:51,870 --> 00:39:58,110
case which is really really really

00:39:54,420 --> 00:40:00,150
really annoying for many people we have

00:39:58,110 --> 00:40:03,240
the issue that diversion is out an

00:40:00,150 --> 00:40:05,100
aversion which is out can hardly be

00:40:03,240 --> 00:40:06,840
pulled back since it's out and people

00:40:05,100 --> 00:40:09,480
are using it in people maybe are

00:40:06,840 --> 00:40:12,060
depending on this new behavior which is

00:40:09,480 --> 00:40:15,150
breaking your application so we can

00:40:12,060 --> 00:40:17,520
switch back probably since that would

00:40:15,150 --> 00:40:21,120
break the other applications so test it

00:40:17,520 --> 00:40:24,210
send feedback send back reports and even

00:40:21,120 --> 00:40:27,140
if sometimes in the bug tracker you get

00:40:24,210 --> 00:40:33,900
it oh you're stupid it's bogus come on

00:40:27,140 --> 00:40:35,370
please still do it please test it if you

00:40:33,900 --> 00:40:38,190
want to learn more you can ask me

00:40:35,370 --> 00:40:41,820
questions that's the best way right now

00:40:38,190 --> 00:40:45,900
since I'm way here and if I'm not here

00:40:41,820 --> 00:40:49,200
there are some URLs on the slide and as

00:40:45,900 --> 00:40:52,050
a website called joined in where you can

00:40:49,200 --> 00:40:55,230
give some feedback on presentations and

00:40:52,050 --> 00:40:57,060
usually people presenting talks really

00:40:55,230 --> 00:40:59,640
like having some feedback to know what I

00:40:57,060 --> 00:41:01,140
can improve sometimes they notice

00:40:59,640 --> 00:41:04,740
themselves for instance I should have

00:41:01,140 --> 00:41:09,030
more slides and sometimes people don't

00:41:04,740 --> 00:41:11,190
notice and it's good to have some

00:41:09,030 --> 00:41:14,400
feedback about that since everybody

00:41:11,190 --> 00:41:17,240
wants to improve I hope at least so with

00:41:14,400 --> 00:41:17,240

YouTube URL: https://www.youtube.com/watch?v=2qvV53S1cu4


