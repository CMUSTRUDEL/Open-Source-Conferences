Title: A LAMP Stack Professional’s Journey to AI | Georgiana Gligor | IPC Spring 2018
Publication date: 2019-02-11
Playlist: Agile & Culture
Description: 
	Georgiana Gligor (Tekkie Consulting): Artificial intelligence products are all the rage these days. AI is not scary, and there are a lot of awesome things you can do with it right from PHP. How do we, as LAMP stack professionals, ensure we embark this wonderful journey? I’ll show you how we built, with PHP, a devops chatbot that enables the release manager skip the confusing discussions with the tekkies and master the release process. It’s not just a simple bot, because we added from day 1 natural language processing smartness to it, so that our user base is extended to the project managers, business analysts, and customer engagement teammates. Johnny started as a devops friend for one of our customers, being extremely helpful in our day-to-day tasks. It later evolved to a tech lead/scrum master role, and even reminds us to do our timesheets. Here are some discussions you might have with Johnny: “What tickets are ready for QA?” “What version of the API is installed in production?” “Are there unused branches for the website?” "Has test coverage decrease in the last week for the API?" "What is the development team on the ETL project?" "Add Mary as a developer to the API project".
Captions: 
	00:00:03,140 --> 00:00:09,780
[Music]

00:00:07,099 --> 00:00:12,599
the afternoon sessions right after the

00:00:09,780 --> 00:00:17,609
excellent keynote that was a little bit

00:00:12,599 --> 00:00:20,130
before mmm I have a topic that might

00:00:17,609 --> 00:00:21,539
look a bit different in the landscape of

00:00:20,130 --> 00:00:24,840
the conference because it's a

00:00:21,539 --> 00:00:27,449
combination of many technologies that we

00:00:24,840 --> 00:00:29,490
used in the past year to deliver a

00:00:27,449 --> 00:00:33,890
product that we're using in-house and

00:00:29,490 --> 00:00:36,899
sometimes our customers want it so

00:00:33,890 --> 00:00:39,149
because we don't find like a proper name

00:00:36,899 --> 00:00:42,059
you know naming in development is like

00:00:39,149 --> 00:00:45,390
the most hard thing to do so we started

00:00:42,059 --> 00:00:48,000
with John Doe and it ended up as Johnny

00:00:45,390 --> 00:00:50,520
I know it's not the ideal name so if you

00:00:48,000 --> 00:00:53,940
find a better one feel free to come over

00:00:50,520 --> 00:01:00,230
and come up with a better idea than we

00:00:53,940 --> 00:01:02,940
did so a couple of words about myself

00:01:00,230 --> 00:01:06,060
maybe you've seen my talk yesterday

00:01:02,940 --> 00:01:09,540
about how to train your minions another

00:01:06,060 --> 00:01:12,290
very interesting thing that we like to

00:01:09,540 --> 00:01:18,840
do at our company and for our customers

00:01:12,290 --> 00:01:20,610
hmm so first of all I'm not a web

00:01:18,840 --> 00:01:22,700
developer I started doing web

00:01:20,610 --> 00:01:26,220
development and then later moved to

00:01:22,700 --> 00:01:30,710
applications more than 15 years ago it's

00:01:26,220 --> 00:01:33,780
quite a long time and I want you to like

00:01:30,710 --> 00:01:36,119
give up the stress so many times and

00:01:33,780 --> 00:01:37,829
pick something more easy to do and then

00:01:36,119 --> 00:01:41,280
every time I come back with the new

00:01:37,829 --> 00:01:44,310
ideas and fresh technologies so I myself

00:01:41,280 --> 00:01:46,710
am a minion for the past 15 years I

00:01:44,310 --> 00:01:48,630
never stop learning I recommend you do

00:01:46,710 --> 00:01:51,600
the same thing

00:01:48,630 --> 00:01:55,200
so in the past seven years I specialized

00:01:51,600 --> 00:01:58,259
in - it's not a niche but it's of the

00:01:55,200 --> 00:02:00,240
way a tricky place to find working -

00:01:58,259 --> 00:02:03,869
like working on large scale applications

00:02:00,240 --> 00:02:06,180
and when I say large scale I mean in 10

00:02:03,869 --> 00:02:09,750
million dollars a day or transactions

00:02:06,180 --> 00:02:13,410
that kind of stuff hmm so this is where

00:02:09,750 --> 00:02:16,170
I come from and I thought

00:02:13,410 --> 00:02:19,380
myself as an architect for the past

00:02:16,170 --> 00:02:22,410
seven years but what I mostly do is i

00:02:19,380 --> 00:02:26,610
hack systems so I made them do what my

00:02:22,410 --> 00:02:30,750
customers need them to do last but not

00:02:26,610 --> 00:02:32,520
least I because of attending so many

00:02:30,750 --> 00:02:34,800
successful international conferences I

00:02:32,520 --> 00:02:37,140
discovered that my own Romania doesn't

00:02:34,800 --> 00:02:38,820
have one so we started one last October

00:02:37,140 --> 00:02:42,780
and in a couple of weeks we'll have

00:02:38,820 --> 00:02:45,540
already our second edition if you feel

00:02:42,780 --> 00:02:49,220
like traveling to Romania please do it

00:02:45,540 --> 00:02:51,870
will be a super fun and interesting and

00:02:49,220 --> 00:02:54,750
as I said because I like to hike a lot

00:02:51,870 --> 00:02:57,950
of things I also discovered that doing a

00:02:54,750 --> 00:03:02,490
PhD in AI sounds like a very bright idea

00:02:57,950 --> 00:03:05,850
so part of the this talk is coming from

00:03:02,490 --> 00:03:08,970
applying some of the lessons that we

00:03:05,850 --> 00:03:12,480
learned there and mostly the data

00:03:08,970 --> 00:03:18,060
collection is actually a result of my

00:03:12,480 --> 00:03:20,220
beginning months in my PhD for for you

00:03:18,060 --> 00:03:22,590
to follow better at home I actually

00:03:20,220 --> 00:03:26,550
prepared a codebase

00:03:22,590 --> 00:03:29,160
you're free to download this a code

00:03:26,550 --> 00:03:34,290
it's a docker eyes diversion that

00:03:29,160 --> 00:03:36,600
contains all the necessary tools to get

00:03:34,290 --> 00:03:38,640
to set up and all of the sample codes

00:03:36,600 --> 00:03:41,459
that you will see in the later slides

00:03:38,640 --> 00:03:43,260
and additionally because we are using

00:03:41,459 --> 00:03:46,500
JIRA we have a doctor eyes the first

00:03:43,260 --> 00:03:49,200
version of jurors so in order to perform

00:03:46,500 --> 00:03:51,360
the actual setup of JIRA I also prepared

00:03:49,200 --> 00:03:53,190
like a very small YouTube video he

00:03:51,360 --> 00:03:56,790
initially it was like an internal

00:03:53,190 --> 00:03:59,310
training for us because we communicated

00:03:56,790 --> 00:04:01,709
the step so many times and figured out

00:03:59,310 --> 00:04:04,290
that maybe of three four-minute video is

00:04:01,709 --> 00:04:09,060
much better idea so feel free to use

00:04:04,290 --> 00:04:11,040
that one as well now in order to talk

00:04:09,060 --> 00:04:14,700
about any kind of chat BOTS I believe

00:04:11,040 --> 00:04:17,609
that to structure the presentation a

00:04:14,700 --> 00:04:20,910
better idea would be to actually look

00:04:17,609 --> 00:04:24,810
into how chat BOTS have come to life and

00:04:20,910 --> 00:04:26,790
what is the current state in 2018

00:04:24,810 --> 00:04:30,080
then I will in

00:04:26,790 --> 00:04:33,720
use the architecture of our pot Johnny

00:04:30,080 --> 00:04:37,530
and then we'll have some demo videos at

00:04:33,720 --> 00:04:40,680
the very end if the time allows we'll

00:04:37,530 --> 00:04:42,420
also have some questions if we don't

00:04:40,680 --> 00:04:47,690
have enough time feel free to grab me

00:04:42,420 --> 00:04:51,060
I'm here all day today as well so um

00:04:47,690 --> 00:04:53,970
when we actually look into chat box did

00:04:51,060 --> 00:04:55,530
you know that the first chat bot is not

00:04:53,970 --> 00:04:59,370
something that appeared like 2 or 3

00:04:55,530 --> 00:05:02,010
years ago but appeared in 1966 that's

00:04:59,370 --> 00:05:05,070
quite a long time ago and it was

00:05:02,010 --> 00:05:08,340
actually created at the MIT artificial

00:05:05,070 --> 00:05:14,000
intelligence laboratory it started as a

00:05:08,340 --> 00:05:17,160
pattern matching tool and later on in

00:05:14,000 --> 00:05:20,580
time from it grew from an academia

00:05:17,160 --> 00:05:24,090
perspective to a more production-ready

00:05:20,580 --> 00:05:26,850
perspective so come 1993 a very

00:05:24,090 --> 00:05:29,520
interesting milestone is egg drop which

00:05:26,850 --> 00:05:33,480
is in fact a combination of TCL script

00:05:29,520 --> 00:05:37,110
see modules for the RC platforms to help

00:05:33,480 --> 00:05:41,060
administrators do more user management

00:05:37,110 --> 00:05:44,430
and channel management tasks so this is

00:05:41,060 --> 00:05:49,410
something that was already production

00:05:44,430 --> 00:05:56,310
ready and in 2011 also quite a long time

00:05:49,410 --> 00:05:59,850
ago but not that long ago on a o L now

00:05:56,310 --> 00:06:03,990
defunct instant messaging there used to

00:05:59,850 --> 00:06:07,170
be a real chat bot so smarter child was

00:06:03,990 --> 00:06:11,040
the first chat bot that resembles what

00:06:07,170 --> 00:06:13,500
we do today in terms of chat BOTS and

00:06:11,040 --> 00:06:17,790
it's such a shame that it was on a

00:06:13,500 --> 00:06:21,690
platform that is not used anymore if you

00:06:17,790 --> 00:06:23,850
want to start your journey into building

00:06:21,690 --> 00:06:26,400
BOTS I think a good idea is to go

00:06:23,850 --> 00:06:29,180
through the bot directories and see all

00:06:26,400 --> 00:06:32,160
of the weather chat BOTS all of the

00:06:29,180 --> 00:06:34,860
boring ones but also discover some

00:06:32,160 --> 00:06:37,770
hidden gems and here I have like a short

00:06:34,860 --> 00:06:39,870
list of places where you can start from

00:06:37,770 --> 00:06:42,600
and

00:06:39,870 --> 00:06:45,630
the last one chatbots dot-org is

00:06:42,600 --> 00:06:49,530
something that I'm using to as a

00:06:45,630 --> 00:06:52,770
reference to see how many platforms are

00:06:49,530 --> 00:06:56,150
people using when when they are watching

00:06:52,770 --> 00:06:58,770
chatbots so you can see it's not only

00:06:56,150 --> 00:07:01,229
what you would assume like facebook chat

00:06:58,770 --> 00:07:05,010
boards or Skype slack chat bots but

00:07:01,229 --> 00:07:06,930
there are a lot of things that people

00:07:05,010 --> 00:07:09,570
who have chat bots for and though we

00:07:06,930 --> 00:07:12,139
don't even know they are writing them

00:07:09,570 --> 00:07:18,060
for so quite a very interesting place to

00:07:12,139 --> 00:07:19,500
to go so let's move on from the boring

00:07:18,060 --> 00:07:21,930
introduction part to the more

00:07:19,500 --> 00:07:25,050
interesting developer oriented ones so

00:07:21,930 --> 00:07:28,320
if you are to start writing a chat bot

00:07:25,050 --> 00:07:30,270
what would you need first of all you

00:07:28,320 --> 00:07:32,010
need a user to communicate with a

00:07:30,270 --> 00:07:34,710
certain level of a conversational

00:07:32,010 --> 00:07:37,169
interface and most of the time your

00:07:34,710 --> 00:07:40,190
users will perceive that conversational

00:07:37,169 --> 00:07:43,139
interfaces beings about what it's only

00:07:40,190 --> 00:07:46,229
like the front end in a normal

00:07:43,139 --> 00:07:47,940
traditional web application because all

00:07:46,229 --> 00:07:52,080
of the processing is done in the

00:07:47,940 --> 00:07:55,010
background is the actual complicated

00:07:52,080 --> 00:07:58,740
part that you you will need to build and

00:07:55,010 --> 00:08:02,520
in order to address those many platforms

00:07:58,740 --> 00:08:06,360
that we looked briefly a couple of

00:08:02,520 --> 00:08:09,360
minutes ago there are some bot

00:08:06,360 --> 00:08:12,539
frameworks that you can use the trick to

00:08:09,360 --> 00:08:14,340
using a bot framework is that the wave

00:08:12,539 --> 00:08:16,020
messaging works with our Facebook

00:08:14,340 --> 00:08:17,610
application it's completely different

00:08:16,020 --> 00:08:20,880
from the one that you would use on

00:08:17,610 --> 00:08:23,370
Twitter or slide and so on so when you

00:08:20,880 --> 00:08:27,050
use a bot framework what happens is that

00:08:23,370 --> 00:08:29,639
the message that the bot framework will

00:08:27,050 --> 00:08:32,599
interpret will have the same structure

00:08:29,639 --> 00:08:35,729
so this is what it does internally it

00:08:32,599 --> 00:08:38,370
aligns all the inputs and outputs into a

00:08:35,729 --> 00:08:41,310
certain level in our case we chose pot

00:08:38,370 --> 00:08:43,110
master and what butt master dies is

00:08:41,310 --> 00:08:45,660
translates everything to the Facebook

00:08:43,110 --> 00:08:48,360
structure of messaging and other

00:08:45,660 --> 00:08:50,459
platforms use of course their own

00:08:48,360 --> 00:08:52,430
version there are quite a lot of them

00:08:50,459 --> 00:08:54,710
and

00:08:52,430 --> 00:08:58,100
important think about a boat framework

00:08:54,710 --> 00:09:00,290
that you need to remember is that it's

00:08:58,100 --> 00:09:03,230
not a very complex piece of software so

00:09:00,290 --> 00:09:05,930
other than doing the translation it will

00:09:03,230 --> 00:09:14,149
just communicate all the information to

00:09:05,930 --> 00:09:17,959
your background processing code so I

00:09:14,149 --> 00:09:21,529
picked a code sample from the bot master

00:09:17,959 --> 00:09:23,600
website just for you to see the multiple

00:09:21,529 --> 00:09:25,700
platforms that it can already interact

00:09:23,600 --> 00:09:28,279
with out of the box you just install it

00:09:25,700 --> 00:09:30,770
and you can already do Facebook

00:09:28,279 --> 00:09:33,140
messaging it doesn't say Facebook but

00:09:30,770 --> 00:09:35,320
the messenger bot is the Facebook one it

00:09:33,140 --> 00:09:38,360
knows how to communicate with slack

00:09:35,320 --> 00:09:43,640
Twitter and telegram which are the most

00:09:38,360 --> 00:09:46,010
used and nowadays so I think in the past

00:09:43,640 --> 00:09:49,180
year I personally delivered like seven

00:09:46,010 --> 00:09:51,800
or eight projects having chat BOTS and

00:09:49,180 --> 00:09:54,920
this way of standardization really

00:09:51,800 --> 00:09:57,589
helped me focus on the background code

00:09:54,920 --> 00:10:00,800
instead of communicating with all these

00:09:57,589 --> 00:10:05,120
platforms a very interesting one that I

00:10:00,800 --> 00:10:06,800
want you to see is the socket IO so not

00:10:05,120 --> 00:10:08,990
only you can grab information and

00:10:06,800 --> 00:10:12,230
communicate it to various channels but

00:10:08,990 --> 00:10:15,200
you can also have a socket IO connection

00:10:12,230 --> 00:10:17,029
which is very useful when you want for

00:10:15,200 --> 00:10:19,550
example to have like an administration

00:10:17,029 --> 00:10:22,220
interface to watch the status of your

00:10:19,550 --> 00:10:25,880
command you can just put the data to the

00:10:22,220 --> 00:10:28,490
socket connection and deliver it in that

00:10:25,880 --> 00:10:31,910
way in addition to people interacting

00:10:28,490 --> 00:10:35,630
with the traditional channels so very

00:10:31,910 --> 00:10:37,790
useful and if you want to have a look on

00:10:35,630 --> 00:10:40,490
how it's used it's quite simple you just

00:10:37,790 --> 00:10:44,500
instantiate a new bot master instance

00:10:40,490 --> 00:10:46,820
and then you add the bots that you want

00:10:44,500 --> 00:10:50,180
the communication channels that you want

00:10:46,820 --> 00:10:52,550
to robot to to talk to and you have a

00:10:50,180 --> 00:10:55,760
couple of settings for each of them and

00:10:52,550 --> 00:10:58,760
in the end your bot master instance will

00:10:55,760 --> 00:11:02,959
be able to talk to all of these channels

00:10:58,760 --> 00:11:06,140
simultaneously so the good thing is that

00:11:02,959 --> 00:11:09,200
you only have like one

00:11:06,140 --> 00:11:13,760
Braes and all of the communication

00:11:09,200 --> 00:11:15,260
channels will be transparent to you for

00:11:13,760 --> 00:11:17,390
the same instance so you don't need to

00:11:15,260 --> 00:11:23,900
write a boat for every platform very

00:11:17,390 --> 00:11:26,360
very useful now what does our journey

00:11:23,900 --> 00:11:29,330
the deployer do different from other

00:11:26,360 --> 00:11:31,190
bots if you look in the select directory

00:11:29,330 --> 00:11:33,710
or in the documentation

00:11:31,190 --> 00:11:36,830
you probably discover that you can write

00:11:33,710 --> 00:11:39,710
a slide but in a much simpler manner you

00:11:36,830 --> 00:11:42,110
just have a standard command and once

00:11:39,710 --> 00:11:44,150
your message starts with that standard

00:11:42,110 --> 00:11:47,720
command everything else will be passed

00:11:44,150 --> 00:11:51,530
as parameters to that bots now that is a

00:11:47,720 --> 00:11:54,950
very useful beginning scenario but we

00:11:51,530 --> 00:11:57,380
are in 2018 and people love natural

00:11:54,950 --> 00:11:59,290
language so in order to interact in a

00:11:57,380 --> 00:12:05,240
natural language manner with your bot

00:11:59,290 --> 00:12:09,760
you cannot use those tricks as a matter

00:12:05,240 --> 00:12:13,790
of fact our journey bot started life in

00:12:09,760 --> 00:12:17,000
2010 as a Skype bot that was doing

00:12:13,790 --> 00:12:19,520
exactly the same things but it was very

00:12:17,000 --> 00:12:21,260
difficult to use by project managers and

00:12:19,520 --> 00:12:23,750
by clay people because they need to

00:12:21,260 --> 00:12:26,990
remember all of those command formats

00:12:23,750 --> 00:12:30,950
and so on and that is why we now have a

00:12:26,990 --> 00:12:33,920
natural language part so how do you

00:12:30,950 --> 00:12:37,220
actually deal with natural language

00:12:33,920 --> 00:12:39,100
processing well in addition to grabbing

00:12:37,220 --> 00:12:42,800
the data from the communication channel

00:12:39,100 --> 00:12:46,400
your processing part which I call the

00:12:42,800 --> 00:12:50,390
brains of the bot will actually talk to

00:12:46,400 --> 00:12:53,210
and in our case IBM Watson service that

00:12:50,390 --> 00:12:56,330
will do the NLP part and then it will

00:12:53,210 --> 00:12:59,860
give you back the intent of the user so

00:12:56,330 --> 00:13:03,130
what was the user actually saying now

00:12:59,860 --> 00:13:05,360
it's a good thing about having a

00:13:03,130 --> 00:13:08,300
back-end piece of code that would

00:13:05,360 --> 00:13:10,930
communicate with an NLP service that you

00:13:08,300 --> 00:13:14,360
can very easily replace IBM Watson with

00:13:10,930 --> 00:13:17,690
API dot a eye or with dark floor and

00:13:14,360 --> 00:13:19,459
other things so it's a you don't get

00:13:17,690 --> 00:13:25,699
tied to a certain and

00:13:19,459 --> 00:13:28,850
provider and an automation that I really

00:13:25,699 --> 00:13:31,519
want to make at this point is that there

00:13:28,850 --> 00:13:34,360
are two different options one of them is

00:13:31,519 --> 00:13:38,480
to use a cloud-based version like Watson

00:13:34,360 --> 00:13:41,449
and dialogue flow for Anna Lou but if

00:13:38,480 --> 00:13:44,059
you want if your customer has the

00:13:41,449 --> 00:13:46,519
requirement of doing the NLU in-house

00:13:44,059 --> 00:13:48,439
there are certain platforms and one of

00:13:46,519 --> 00:13:49,819
them is actually based here in Germany

00:13:48,439 --> 00:13:52,160
it's called Raza

00:13:49,819 --> 00:13:54,379
so if you use rational you you can

00:13:52,160 --> 00:13:57,529
actually train models and install them

00:13:54,379 --> 00:14:00,139
on premises using this exact

00:13:57,529 --> 00:14:02,600
architecture so or you just replace the

00:14:00,139 --> 00:14:05,959
Watson with Rosa and it will

00:14:02,600 --> 00:14:09,439
automatically do what you need on in

00:14:05,959 --> 00:14:13,220
terms of venue now I want to give you a

00:14:09,439 --> 00:14:16,639
warning NLU is expensive training the

00:14:13,220 --> 00:14:20,480
model so you really need some hardware

00:14:16,639 --> 00:14:22,610
or some other means of doing the model

00:14:20,480 --> 00:14:25,699
training but once you have the model

00:14:22,610 --> 00:14:28,220
train then the actual and you

00:14:25,699 --> 00:14:32,629
understanding is fast for the customer

00:14:28,220 --> 00:14:39,199
so the only heavy expensive part is the

00:14:32,629 --> 00:14:41,269
model training of piece of information

00:14:39,199 --> 00:14:43,399
that is not very well known maybe you

00:14:41,269 --> 00:14:45,980
believe IBM Watson is coming from the

00:14:43,399 --> 00:14:46,459
famous detective stories it's not the

00:14:45,980 --> 00:14:49,759
case

00:14:46,459 --> 00:14:52,850
in fact the first CEO of IBM was called

00:14:49,759 --> 00:14:55,579
Watson so this is how they they named it

00:14:52,850 --> 00:15:00,160
and when you say Watson you are in fact

00:14:55,579 --> 00:15:03,769
talking about a large collection of

00:15:00,160 --> 00:15:07,910
technologies AI an ml machine learning

00:15:03,769 --> 00:15:11,629
so it's a very generic term in our case

00:15:07,910 --> 00:15:17,199
we used Watson conversation specifically

00:15:11,629 --> 00:15:21,889
designed for chat BOTS but it's only

00:15:17,199 --> 00:15:24,350
useful for quite simple flows so if you

00:15:21,889 --> 00:15:25,999
have a very complex flow in in your

00:15:24,350 --> 00:15:28,490
dialogue that you want to cover the

00:15:25,999 --> 00:15:31,399
stories become more and more complex

00:15:28,490 --> 00:15:32,430
then you have the possibility to move to

00:15:31,399 --> 00:15:36,510
knowledge studio

00:15:32,430 --> 00:15:39,750
which performs this task better let's

00:15:36,510 --> 00:15:42,210
say so there are various solutions that

00:15:39,750 --> 00:15:42,780
you can choose there is no right way of

00:15:42,210 --> 00:15:45,420
course

00:15:42,780 --> 00:15:48,840
like in any software project and I have

00:15:45,420 --> 00:15:51,810
a couple of screenshots from Watson

00:15:48,840 --> 00:15:54,810
conversation to help you get started so

00:15:51,810 --> 00:15:57,480
we have the term of workspaces that we

00:15:54,810 --> 00:15:59,520
work with and they already provide the

00:15:57,480 --> 00:16:03,930
very complex one the car dashboard and

00:15:59,520 --> 00:16:06,030
then any of the workspaces that you use

00:16:03,930 --> 00:16:07,860
will have a unique identifier and this

00:16:06,030 --> 00:16:13,710
is what you need to plug into your code

00:16:07,860 --> 00:16:19,170
and I'm not sure how well we will be

00:16:13,710 --> 00:16:21,210
able to see this so um this is the car

00:16:19,170 --> 00:16:24,810
dashboard example which is very useful

00:16:21,210 --> 00:16:28,230
to learn from so you can see it has a

00:16:24,810 --> 00:16:31,490
lot of intent trying to reveal what the

00:16:28,230 --> 00:16:35,670
user has said and in here the number

00:16:31,490 --> 00:16:38,790
tells you how many samples they gave to

00:16:35,670 --> 00:16:41,580
train that particular intent so you can

00:16:38,790 --> 00:16:44,400
see the capabilities has more than 100

00:16:41,580 --> 00:16:47,430
examples the more examples you give it

00:16:44,400 --> 00:16:50,130
the smarter your BOTS will be a trick

00:16:47,430 --> 00:16:53,940
about using cloud-based versions is that

00:16:50,130 --> 00:16:56,690
they not only use your supplied intends

00:16:53,940 --> 00:17:00,450
but they also have the collection

00:16:56,690 --> 00:17:02,640
standard one that they add to your

00:17:00,450 --> 00:17:06,750
knowledge base so it's not only 100

00:17:02,640 --> 00:17:09,450
examples whereas in the case of energy

00:17:06,750 --> 00:17:12,030
view models that you train yourself you

00:17:09,450 --> 00:17:13,620
have to give every individual example

00:17:12,030 --> 00:17:17,580
that is why the training takes so much

00:17:13,620 --> 00:17:20,160
longer so cloud based versions actually

00:17:17,580 --> 00:17:25,020
use a lot more examples and that's why

00:17:20,160 --> 00:17:32,040
there are much look much smarter because

00:17:25,020 --> 00:17:35,340
the training set is much wider and you

00:17:32,040 --> 00:17:38,460
can see that for every in our case one

00:17:35,340 --> 00:17:41,880
of the intent is how many tickets do we

00:17:38,460 --> 00:17:43,560
have ready for testing for QA and we are

00:17:41,880 --> 00:17:46,380
just giving like five or six examples

00:17:43,560 --> 00:17:48,750
and this is already a good enough start

00:17:46,380 --> 00:17:52,919
for the body to understand what's going

00:17:48,750 --> 00:17:55,100
on and in what some conversation you

00:17:52,919 --> 00:17:58,620
have on the right hand side something

00:17:55,100 --> 00:18:00,840
that you can already try out so you can

00:17:58,620 --> 00:18:03,120
do trial and error

00:18:00,840 --> 00:18:09,059
training until you get it the way you

00:18:03,120 --> 00:18:13,200
want it to be this is in fact a video

00:18:09,059 --> 00:18:15,720
demonstrating how you can use the tryout

00:18:13,200 --> 00:18:18,720
so if you say what can we test something

00:18:15,720 --> 00:18:20,520
that we never had hear it already

00:18:18,720 --> 00:18:23,640
understood your intent and it will

00:18:20,520 --> 00:18:25,580
reveal it and when you talk to what some

00:18:23,640 --> 00:18:28,380
conversation it's a JSON based

00:18:25,580 --> 00:18:31,200
conversation so it will send you the

00:18:28,380 --> 00:18:39,960
relevant information in a JSON format so

00:18:31,200 --> 00:18:41,850
you can depict your intent but this way

00:18:39,960 --> 00:18:43,590
of showing you the interface is not as

00:18:41,850 --> 00:18:45,559
interesting as showing you the final

00:18:43,590 --> 00:18:48,090
demos so we'll save the time for that I

00:18:45,559 --> 00:18:50,690
want to walk you a little bit through

00:18:48,090 --> 00:18:57,440
the architecture architecture is a very

00:18:50,690 --> 00:19:01,740
fancy word but let's use it for now so

00:18:57,440 --> 00:19:03,780
it's more of a diagram to help you

00:19:01,740 --> 00:19:06,120
figure out what are the moving parts of

00:19:03,780 --> 00:19:11,039
the system and where you can interact

00:19:06,120 --> 00:19:14,580
with so in our case a team mate asks a

00:19:11,039 --> 00:19:15,750
question to the bot the conversational

00:19:14,580 --> 00:19:18,929
interface that we discussed previously

00:19:15,750 --> 00:19:21,330
and Indian will receive an answer this

00:19:18,929 --> 00:19:24,419
is what your end user sees this is what

00:19:21,330 --> 00:19:27,600
my project manager sees so what happens

00:19:24,419 --> 00:19:30,030
under the hood well the bot discusses

00:19:27,600 --> 00:19:35,730
with some server-side code was a brace

00:19:30,030 --> 00:19:39,860
part to try to figure out what what the

00:19:35,730 --> 00:19:43,919
user has said so what is the meaning and

00:19:39,860 --> 00:19:47,220
compute the answer now in order to do

00:19:43,919 --> 00:19:49,590
the and a little part we go to Watson

00:19:47,220 --> 00:19:53,460
and say what did Mighty Mite actually

00:19:49,590 --> 00:19:58,080
mean and extract the intent sometimes

00:19:53,460 --> 00:19:59,850
you also match entities so you will see

00:19:58,080 --> 00:20:03,539
in the next example that

00:19:59,850 --> 00:20:07,559
entity is in our case it was a question

00:20:03,539 --> 00:20:13,019
when was the last deploy of the CMS to

00:20:07,559 --> 00:20:15,720
QA QA that value is the instance of the

00:20:13,019 --> 00:20:17,609
environment entity so the environment is

00:20:15,720 --> 00:20:22,019
gray or it can be staging or production

00:20:17,609 --> 00:20:25,979
and so on once we have the NLU

00:20:22,019 --> 00:20:28,169
figured out then we can go to Jenkins if

00:20:25,979 --> 00:20:30,960
we did our build with Jenkins we now do

00:20:28,169 --> 00:20:33,330
it of course with the racket lab so we

00:20:30,960 --> 00:20:35,220
go and interact with the github API to

00:20:33,330 --> 00:20:38,159
find out that information from the

00:20:35,220 --> 00:20:42,149
runners and then the unprocessed data

00:20:38,159 --> 00:20:43,950
arrives in the server side component in

00:20:42,149 --> 00:20:46,169
the brace and then we can do data

00:20:43,950 --> 00:20:51,629
processing so that we can compose a

00:20:46,169 --> 00:20:53,849
decent answer to the user and user so

00:20:51,629 --> 00:20:56,519
you can see here all of the stack that

00:20:53,849 --> 00:20:59,249
we are using for a very simple devops

00:20:56,519 --> 00:21:02,249
chain but it looks quite daunting in the

00:20:59,249 --> 00:21:05,580
beginning it feels like playing Lego so

00:21:02,249 --> 00:21:07,950
if you are going to build a customer

00:21:05,580 --> 00:21:12,479
facing chat bot you will need to have a

00:21:07,950 --> 00:21:19,200
lot of sessions to train the NLU part

00:21:12,479 --> 00:21:21,739
because you want your body to not do bad

00:21:19,200 --> 00:21:24,239
things like them Microsoft ones that

00:21:21,739 --> 00:21:26,820
some people manage to learn is how to

00:21:24,239 --> 00:21:32,220
swear and other things so you need to be

00:21:26,820 --> 00:21:37,229
very restrictive with what it can do but

00:21:32,220 --> 00:21:40,080
also with what it cannot do so the other

00:21:37,229 --> 00:21:42,269
components in our case would be changes

00:21:40,080 --> 00:21:46,039
or gitlab and JIRA to extract the

00:21:42,269 --> 00:21:48,419
information so now a couple of

00:21:46,039 --> 00:21:51,599
informations on how to set up select

00:21:48,419 --> 00:21:54,059
chat bots so it's quite simple you need

00:21:51,599 --> 00:21:58,369
to create a slack application in the API

00:21:54,059 --> 00:22:03,210
or a version of the website in our case

00:21:58,369 --> 00:22:05,399
we'll have the company workspace and it

00:22:03,210 --> 00:22:11,450
will you need to pick up these two

00:22:05,399 --> 00:22:11,450
tokens and set them up in in bot master

00:22:12,120 --> 00:22:22,350
then for a demo I'm using a and rock

00:22:16,800 --> 00:22:26,220
version of octobot but you will need to

00:22:22,350 --> 00:22:31,470
provide the hook that slack will send

00:22:26,220 --> 00:22:34,440
data to and enable the events that we

00:22:31,470 --> 00:22:36,270
want your chat bot to understand so you

00:22:34,440 --> 00:22:38,670
don't want to receive all the events

00:22:36,270 --> 00:22:41,130
that are ever happening in the general

00:22:38,670 --> 00:22:46,740
select channel for example so you only

00:22:41,130 --> 00:22:48,750
want the ions or groups once depending

00:22:46,740 --> 00:22:51,300
on your needs you can set up different

00:22:48,750 --> 00:22:55,650
events that select will send over to

00:22:51,300 --> 00:22:57,270
your hook moving on to the more more

00:22:55,650 --> 00:23:00,420
interesting part where we get to see

00:22:57,270 --> 00:23:02,640
some code both master as I mentioned

00:23:00,420 --> 00:23:05,010
it's the part that is translating of

00:23:02,640 --> 00:23:08,370
various communication channel messages

00:23:05,010 --> 00:23:11,970
into one standard format so in our case

00:23:08,370 --> 00:23:13,890
to set up a button master instance

00:23:11,970 --> 00:23:17,700
that's connected to slap a slack we need

00:23:13,890 --> 00:23:19,590
to set up a file in selecting 0 with a

00:23:17,700 --> 00:23:22,830
certain team identified that you get

00:23:19,590 --> 00:23:25,950
from slack and then the bot user ID and

00:23:22,830 --> 00:23:28,800
the SS tokens that we picked up in the

00:23:25,950 --> 00:23:33,210
previous screens so it's a configuration

00:23:28,800 --> 00:23:35,190
only way it's not something very complex

00:23:33,210 --> 00:23:36,120
you can get it up and running in like

00:23:35,190 --> 00:23:40,230
five minutes

00:23:36,120 --> 00:23:42,690
and the actual application that is

00:23:40,230 --> 00:23:48,450
receiving the messages you see here how

00:23:42,690 --> 00:23:50,520
we set up the slack bot and attach it to

00:23:48,450 --> 00:23:52,890
the bot mastermind instance and then we

00:23:50,520 --> 00:23:55,620
provide the credentials coming up from

00:23:52,890 --> 00:23:58,740
environment variables so this is a very

00:23:55,620 --> 00:24:01,740
easy way to if we for example want to

00:23:58,740 --> 00:24:04,700
add more channels more teams it's very

00:24:01,740 --> 00:24:09,660
easy to deploy this piece of code

00:24:04,700 --> 00:24:13,500
because it's just very very simple to

00:24:09,660 --> 00:24:15,630
configure and in botmaster you have two

00:24:13,500 --> 00:24:17,490
means of addressing one of them is

00:24:15,630 --> 00:24:20,460
incoming messages and the other one is

00:24:17,490 --> 00:24:23,790
outgoing messages so in our case we just

00:24:20,460 --> 00:24:25,550
need to handle the incoming messages so

00:24:23,790 --> 00:24:30,140
we

00:24:25,550 --> 00:24:32,300
to the request and then forward is the

00:24:30,140 --> 00:24:35,500
actual text that the user has input it

00:24:32,300 --> 00:24:39,920
referred it to the brace component and

00:24:35,500 --> 00:24:43,130
then act on on the response so if we

00:24:39,920 --> 00:24:44,810
don't have a 200 response we just say

00:24:43,130 --> 00:24:48,260
that there is something wrong but other

00:24:44,810 --> 00:24:52,340
than that we compose as a response so as

00:24:48,260 --> 00:24:56,510
you can see is the first part of the bot

00:24:52,340 --> 00:24:59,810
is not not a very complicated one in

00:24:56,510 --> 00:25:03,620
here you can see how we we test it so we

00:24:59,810 --> 00:25:07,250
just supply the user message and then we

00:25:03,620 --> 00:25:09,110
receive a text version that we are going

00:25:07,250 --> 00:25:12,800
to display in the Select channel if you

00:25:09,110 --> 00:25:18,290
deal with multiple channels you will

00:25:12,800 --> 00:25:21,190
need a bit more code in this part moving

00:25:18,290 --> 00:25:24,170
on to the brains part this is a very

00:25:21,190 --> 00:25:30,620
simple and nice PHP application so

00:25:24,170 --> 00:25:32,900
nothing fancy I actually am showing the

00:25:30,620 --> 00:25:35,150
structure because I think it's easier to

00:25:32,900 --> 00:25:38,270
to explain so we only have one

00:25:35,150 --> 00:25:39,800
conversation controller that receives

00:25:38,270 --> 00:25:44,330
the message from botmaster

00:25:39,800 --> 00:25:47,720
and we have three different services for

00:25:44,330 --> 00:25:49,190
this example one of them is asked which

00:25:47,720 --> 00:25:49,940
goes to what's on and grabs the

00:25:49,190 --> 00:25:52,670
information

00:25:49,940 --> 00:25:55,850
the other one is execute communicate

00:25:52,670 --> 00:25:58,640
with Jenkins or github and the other one

00:25:55,850 --> 00:26:03,980
is task tracking so go to GRI and figure

00:25:58,640 --> 00:26:07,250
out things from from there so if we want

00:26:03,980 --> 00:26:08,900
to look at the code on how this

00:26:07,250 --> 00:26:13,220
communication is performed it's quite

00:26:08,900 --> 00:26:16,250
simple we deserialize the request into

00:26:13,220 --> 00:26:18,350
an entity or and we have an exception

00:26:16,250 --> 00:26:21,620
listener if the information is not

00:26:18,350 --> 00:26:26,150
properly deserialized then we go on the

00:26:21,620 --> 00:26:28,400
fallback track if the we didn't receive

00:26:26,150 --> 00:26:33,290
any kind of message of very simpler

00:26:28,400 --> 00:26:36,890
handling and then we get some ask

00:26:33,290 --> 00:26:38,220
surface instance from the dependency

00:26:36,890 --> 00:26:42,690
injection container

00:26:38,220 --> 00:26:47,549
and execute the ask method which goes on

00:26:42,690 --> 00:26:50,940
and talks to the another component you

00:26:47,549 --> 00:26:55,220
can see here if no intent was discovered

00:26:50,940 --> 00:26:58,740
so we didn't figure out what the users

00:26:55,220 --> 00:27:01,140
message how it translated to any intent

00:26:58,740 --> 00:27:04,140
then we can also handle that case

00:27:01,140 --> 00:27:07,470
because if there is no intent then of

00:27:04,140 --> 00:27:11,400
course we our bot doesn't understand

00:27:07,470 --> 00:27:14,850
that particular type text so this is the

00:27:11,400 --> 00:27:19,049
place where you do the more nice

00:27:14,850 --> 00:27:21,990
processing of how you communicate with

00:27:19,049 --> 00:27:25,200
your end-users the fact that your bot

00:27:21,990 --> 00:27:30,000
wasn't prepared to answer the question

00:27:25,200 --> 00:27:32,789
that they had and because I'm showing

00:27:30,000 --> 00:27:37,950
you like a trimmed-down version it's

00:27:32,789 --> 00:27:40,350
like a demo version of the code this one

00:27:37,950 --> 00:27:44,520
only has like three intent

00:27:40,350 --> 00:27:48,750
we of course have about 20 intent at at

00:27:44,520 --> 00:27:53,970
the time so ours looks more complex and

00:27:48,750 --> 00:27:57,090
is not a switch based code but in in

00:27:53,970 --> 00:28:00,090
this instance you see that based on the

00:27:57,090 --> 00:28:03,419
intent you go and execute a certain

00:28:00,090 --> 00:28:05,850
method that does what you need to do so

00:28:03,419 --> 00:28:08,370
let's take for example the second case

00:28:05,850 --> 00:28:11,159
where you do a build and deploy this is

00:28:08,370 --> 00:28:14,669
how we package all our code so we say

00:28:11,159 --> 00:28:17,580
please build this component the CMS or

00:28:14,669 --> 00:28:19,830
the API or some other component perform

00:28:17,580 --> 00:28:24,120
a build and it will trigger a Jenkins

00:28:19,830 --> 00:28:26,549
build where we actually pack the RPM or

00:28:24,120 --> 00:28:30,299
tab package this is the standard way for

00:28:26,549 --> 00:28:34,970
us to deliver the code and then once we

00:28:30,299 --> 00:28:39,360
have the RPM and it's a declared in the

00:28:34,970 --> 00:28:42,600
on the server side then we move on and

00:28:39,360 --> 00:28:45,809
do maybe an installation or not so we

00:28:42,600 --> 00:28:49,409
have not that's why I said we have a lot

00:28:45,809 --> 00:28:52,020
of intent in some cases we only need to

00:28:49,409 --> 00:28:53,880
prepare the build in other cases we need

00:28:52,020 --> 00:28:58,500
prepared to build and deploy or change

00:28:53,880 --> 00:29:02,100
those methods so sometimes we need to

00:28:58,500 --> 00:29:05,280
control the actual deploy step quite

00:29:02,100 --> 00:29:07,230
easy so if you were wondering how

00:29:05,280 --> 00:29:09,750
exactly do communicate with Watson as I

00:29:07,230 --> 00:29:12,480
said it's a very simple JSON request and

00:29:09,750 --> 00:29:16,740
response so what we do is prepare a

00:29:12,480 --> 00:29:19,650
request based on the question and with

00:29:16,740 --> 00:29:23,850
that civilized version we count from a

00:29:19,650 --> 00:29:26,730
post with all the authentication tokens

00:29:23,850 --> 00:29:30,630
taken care of in the Watson service and

00:29:26,730 --> 00:29:34,350
then get the response deserialize it

00:29:30,630 --> 00:29:35,760
into a entity and then from there on we

00:29:34,350 --> 00:29:38,880
can actually count how many times

00:29:35,760 --> 00:29:41,520
whether because if you if your bot

00:29:38,880 --> 00:29:44,340
matches two or three times then you need

00:29:41,520 --> 00:29:46,890
to pick the one that has the most the

00:29:44,340 --> 00:29:53,120
highest level of probability and this is

00:29:46,890 --> 00:29:57,750
something we'll see a bit later so I

00:29:53,120 --> 00:30:03,030
actually think we don't have enough time

00:29:57,750 --> 00:30:06,930
for Q&A so these videos I don't think we

00:30:03,030 --> 00:30:10,220
have time for them I will try to show

00:30:06,930 --> 00:30:13,640
you the first demo because it's more

00:30:10,220 --> 00:30:20,220
more interesting so let me find out

00:30:13,640 --> 00:30:24,780
which one it is this one so the first

00:30:20,220 --> 00:30:26,880
demo is going to see how many issues in

00:30:24,780 --> 00:30:29,580
the development team are ready for a

00:30:26,880 --> 00:30:34,020
certain environment in this example the

00:30:29,580 --> 00:30:37,080
clay so you can do some small chitchat

00:30:34,020 --> 00:30:39,420
you say hi and Johnny will respond with

00:30:37,080 --> 00:30:42,270
a different sentence every time and then

00:30:39,420 --> 00:30:46,650
you ask do you have tickets ready for QA

00:30:42,270 --> 00:30:48,330
and what happens is that at the moment

00:30:46,650 --> 00:30:51,120
we don't have any issues in the testing

00:30:48,330 --> 00:30:52,830
you can see here the boards that I'm

00:30:51,120 --> 00:30:55,440
using as as an example

00:30:52,830 --> 00:30:58,770
so once I'm moving a ticket to the ready

00:30:55,440 --> 00:31:00,780
for QA column which is the actual query

00:30:58,770 --> 00:31:03,090
that I need to perform and now I'm

00:31:00,780 --> 00:31:05,810
asking a different kind of question are

00:31:03,090 --> 00:31:09,990
there issues ready for testing

00:31:05,810 --> 00:31:11,940
you can see that we have a list and we

00:31:09,990 --> 00:31:14,010
even made it with the links so it's

00:31:11,940 --> 00:31:22,860
clickable so that the project manager

00:31:14,010 --> 00:31:26,130
can immediately go there so now if we

00:31:22,860 --> 00:31:29,880
move the other one straight to ready for

00:31:26,130 --> 00:31:38,820
QA and try using a different sentence

00:31:29,880 --> 00:31:40,980
what ticket are ready for something so

00:31:38,820 --> 00:31:44,100
every time you use a different way of

00:31:40,980 --> 00:31:53,750
formulating the question and it will

00:31:44,100 --> 00:31:56,760
match the Z intent you can see that both

00:31:53,750 --> 00:32:01,010
issues that you see in the in the

00:31:56,760 --> 00:32:01,010
background in JIRA are now displayed

00:32:06,290 --> 00:32:16,440
okay so this one we can in fact close

00:32:13,460 --> 00:32:21,380
another very interesting example that I

00:32:16,440 --> 00:32:21,380
want you to walk you through is the

00:32:21,860 --> 00:32:28,500
right so first I'm cleaning up the slack

00:32:25,740 --> 00:32:33,360
history because it's going to get too

00:32:28,500 --> 00:32:36,240
crowded and then this is the build and

00:32:33,360 --> 00:32:38,130
deploy part and in this demo it's one

00:32:36,240 --> 00:32:41,100
single step performing the build and

00:32:38,130 --> 00:32:43,680
executing the deploy so when we say I

00:32:41,100 --> 00:32:46,340
need you to build an RC or release

00:32:43,680 --> 00:32:48,900
candidate for the CMS and deploy to QA

00:32:46,340 --> 00:32:50,430
this is an asynchronous message you

00:32:48,900 --> 00:32:52,920
never know when the build is going to

00:32:50,430 --> 00:32:54,660
end so you just say yes I started the

00:32:52,920 --> 00:32:56,330
build process I understood what we

00:32:54,660 --> 00:33:00,780
wanted and I started the build process

00:32:56,330 --> 00:33:02,670
followed by deploy so if we go now in in

00:33:00,780 --> 00:33:05,910
Jenkins we can see that the correct

00:33:02,670 --> 00:33:08,790
build was triggered and here I have some

00:33:05,910 --> 00:33:14,640
random failing jobs so that some are

00:33:08,790 --> 00:33:18,180
working and some are not working if we

00:33:14,640 --> 00:33:19,040
you don't use RC and just write build a

00:33:18,180 --> 00:33:21,440
new release

00:33:19,040 --> 00:33:24,500
candidate of the front end and deployed

00:33:21,440 --> 00:33:26,540
to integration you can see that Jenkins

00:33:24,500 --> 00:33:30,830
is coming back and saying success it was

00:33:26,540 --> 00:33:33,080
a very easy one that didn't take too

00:33:30,830 --> 00:33:35,150
much time and you see that the

00:33:33,080 --> 00:33:37,940
parameters were correctly instantiated

00:33:35,150 --> 00:33:40,300
so we just have one Jenkins job that

00:33:37,940 --> 00:33:42,740
does all the builds and in fact

00:33:40,300 --> 00:33:45,770
introduction what we do is dispatch

00:33:42,740 --> 00:33:48,200
other Jenkins jobs for the specific

00:33:45,770 --> 00:33:58,550
environment with the actual code that

00:33:48,200 --> 00:34:01,940
you need to build the RPM so this one is

00:33:58,550 --> 00:34:05,330
a random failure furthermore and you can

00:34:01,940 --> 00:34:07,490
see that also it picked up the component

00:34:05,330 --> 00:34:13,880
as front-end and the environment as

00:34:07,490 --> 00:34:15,860
being QA if you want to get very risky

00:34:13,880 --> 00:34:18,740
you can deploy to production in this way

00:34:15,860 --> 00:34:22,460
and this is something that two of our

00:34:18,740 --> 00:34:23,870
customers actually do and they don't

00:34:22,460 --> 00:34:26,270
feel like it's risk anymore

00:34:23,870 --> 00:34:30,100
because the entire deployment process is

00:34:26,270 --> 00:34:39,200
a very streamlined so let's see here

00:34:30,100 --> 00:34:41,630
again the next build would you actually

00:34:39,200 --> 00:34:45,679
have the courage to do this in

00:34:41,630 --> 00:34:48,980
production with your code allow your

00:34:45,679 --> 00:35:00,580
manager to just say put put the last

00:34:48,980 --> 00:35:00,580
latest thing in production no okay we do

00:35:01,540 --> 00:35:08,660
and now the last example that I wanted

00:35:04,850 --> 00:35:12,230
to show you was you know Jenkins is a

00:35:08,660 --> 00:35:14,240
very tricky interface to navigate into

00:35:12,230 --> 00:35:16,600
so if you need to go in the history and

00:35:14,240 --> 00:35:22,420
discovered when something happened it's

00:35:16,600 --> 00:35:22,420
not very nice so this is why we have the

00:35:23,830 --> 00:35:26,830
query

00:35:30,460 --> 00:35:39,470
okay so we just set up the demo we

00:35:34,550 --> 00:35:46,010
perform the deploy and you can see here

00:35:39,470 --> 00:35:48,260
that so I'm picking up the response from

00:35:46,010 --> 00:35:50,600
Watson because I want you to see the

00:35:48,260 --> 00:35:53,480
confidence level that it had that it

00:35:50,600 --> 00:35:56,000
matched to the right intent so if we

00:35:53,480 --> 00:35:59,840
just look at the JSON that it sent us

00:35:56,000 --> 00:36:02,690
you see the confidence level is 0.92 so

00:35:59,840 --> 00:36:05,930
92% confidence that it got the right

00:36:02,690 --> 00:36:09,560
intent is a very good one you can put

00:36:05,930 --> 00:36:11,270
some thresholds so if you don't want to

00:36:09,560 --> 00:36:15,920
execute in pants which are lower than

00:36:11,270 --> 00:36:18,920
80% match you can discard those very

00:36:15,920 --> 00:36:21,260
easily so now when we ask when was the

00:36:18,920 --> 00:36:24,710
website last last deploy in staging we

00:36:21,260 --> 00:36:27,080
just go and query the Jenkins API we

00:36:24,710 --> 00:36:30,050
extract a very long JSON and go and find

00:36:27,080 --> 00:36:36,440
out the historical information in a much

00:36:30,050 --> 00:36:38,050
more meaningful way and now here I think

00:36:36,440 --> 00:36:41,540
I have an example with a lower

00:36:38,050 --> 00:36:44,210
confidence level so if we ask something

00:36:41,540 --> 00:36:47,570
that wasn't trained you see we only have

00:36:44,210 --> 00:36:51,590
like four training examples and this is

00:36:47,570 --> 00:36:53,990
not very good you need a minimum of ten

00:36:51,590 --> 00:36:58,810
but I recommend doing twenty thirty

00:36:53,990 --> 00:37:02,600
training examples you see it's just a

00:36:58,810 --> 00:37:07,060
0.54 so 54% confidence is not very good

00:37:02,600 --> 00:37:13,750
you may not want to execute that intent

00:37:07,060 --> 00:37:16,730
and another question would be also not

00:37:13,750 --> 00:37:18,500
matched in so we don't type the exact

00:37:16,730 --> 00:37:20,570
sentence that we used for training I

00:37:18,500 --> 00:37:23,960
want to know when we refresh the API in

00:37:20,570 --> 00:37:26,360
QA or when we did the last deployment of

00:37:23,960 --> 00:37:29,960
the CMS in production this is super

00:37:26,360 --> 00:37:31,970
useful in meetings I can tell you that

00:37:29,960 --> 00:37:35,060
our project measures are using this

00:37:31,970 --> 00:37:36,920
feature the most because as they can

00:37:35,060 --> 00:37:39,230
find out relevant information without

00:37:36,920 --> 00:37:42,080
going to the technical team at all and

00:37:39,230 --> 00:37:42,829
it's just scraping the history and they

00:37:42,080 --> 00:37:52,549
can find out

00:37:42,829 --> 00:37:55,249
who did what when and for the kicks in

00:37:52,549 --> 00:37:58,400
the in the audience I'm showing you the

00:37:55,249 --> 00:38:01,009
Jenkins API call that we executed and

00:37:58,400 --> 00:38:05,150
you see this is a very very long session

00:38:01,009 --> 00:38:10,239
and we are discovering the last

00:38:05,150 --> 00:38:13,369
execution successful or not by

00:38:10,239 --> 00:38:15,140
identifying the right parameters so the

00:38:13,369 --> 00:38:17,630
previous questions was with the queue

00:38:15,140 --> 00:38:21,799
environment and with the CMS component

00:38:17,630 --> 00:38:24,890
and this is how we grab the timestamp

00:38:21,799 --> 00:38:28,599
and just displaying information so very

00:38:24,890 --> 00:38:33,079
very simple from a customer perspective

00:38:28,599 --> 00:38:36,349
and remember this is just the devops

00:38:33,079 --> 00:38:44,209
chat bot it's not a customer facing one

00:38:36,349 --> 00:38:50,150
so our customers are our teammate so

00:38:44,209 --> 00:38:53,150
more more examples of that and we even

00:38:50,150 --> 00:39:06,979
access and prove the correctness of the

00:38:53,150 --> 00:39:09,429
of the query that we executed okay so if

00:39:06,979 --> 00:39:12,229
we are to do this we looked at the

00:39:09,429 --> 00:39:16,089
extraction build and deploy and query

00:39:12,229 --> 00:39:16,089
history so thank you very much

00:39:20,290 --> 00:39:30,460
I think we have enough time for

00:39:23,260 --> 00:39:33,400
questions so I'm others did it look

00:39:30,460 --> 00:39:36,370
complicated would you feel confident to

00:39:33,400 --> 00:39:41,710
go home with this tech stack and build

00:39:36,370 --> 00:39:45,160
your own bot yeah couple of smiles in

00:39:41,710 --> 00:39:48,790
the back so when we first started

00:39:45,160 --> 00:39:53,050
working chat BOTS things weren't as easy

00:39:48,790 --> 00:39:57,880
as this you can imagine so we fought all

00:39:53,050 --> 00:40:01,180
the alpha and beta bugs but right now

00:39:57,880 --> 00:40:05,890
the conversational interface market is

00:40:01,180 --> 00:40:08,560
much more stable and there are quite a

00:40:05,890 --> 00:40:13,510
lot of requests for this kind of product

00:40:08,560 --> 00:40:16,260
even for other things then DevOps so we

00:40:13,510 --> 00:40:19,390
do a lot of conversational interfaces on

00:40:16,260 --> 00:40:22,390
grabbing users preferences about who

00:40:19,390 --> 00:40:24,790
knows what and you know we get to ask

00:40:22,390 --> 00:40:28,060
them a lot of questions and the natural

00:40:24,790 --> 00:40:30,820
language understanding part is the one

00:40:28,060 --> 00:40:34,090
that does the wow effect because you can

00:40:30,820 --> 00:40:35,830
actually relate to the chat bot before

00:40:34,090 --> 00:40:39,570
handing over the conversation to a

00:40:35,830 --> 00:40:44,460
person or to an email chain is about

00:40:39,570 --> 00:40:44,460
knowledge is not that complicated

00:40:49,150 --> 00:41:09,279
I will have to come over to understand

00:40:54,970 --> 00:41:12,640
the question I apologize not really no

00:41:09,279 --> 00:41:15,970
because this is just doing this example

00:41:12,640 --> 00:41:18,940
in particular is doing build and

00:41:15,970 --> 00:41:22,420
deployment and we will test it our build

00:41:18,940 --> 00:41:24,789
and deployment strategy so we didn't

00:41:22,420 --> 00:41:28,799
invent that one on the spot it's just

00:41:24,789 --> 00:41:32,319
building a UI on top of it but for

00:41:28,799 --> 00:41:35,859
customer-facing baat customers asked all

00:41:32,319 --> 00:41:38,170
sorts of crazy questions and it's very

00:41:35,859 --> 00:41:40,569
difficult to figure out the intent that

00:41:38,170 --> 00:41:43,359
is why I was mentioning that you need a

00:41:40,569 --> 00:41:45,760
very good training set to actually

00:41:43,359 --> 00:41:54,099
figure out the meaning of what was said

00:41:45,760 --> 00:41:56,349
and I can recommend you to perform more

00:41:54,099 --> 00:41:59,470
testing than development for any given

00:41:56,349 --> 00:42:01,869
chatbot because the impression that you

00:41:59,470 --> 00:42:04,029
live on the customer is more important

00:42:01,869 --> 00:42:06,579
than giving an extra piece of

00:42:04,029 --> 00:42:09,670
functionality so if you screw up in the

00:42:06,579 --> 00:42:12,789
communication part it's more painful

00:42:09,670 --> 00:42:17,920
than screwing up of Naughton having a

00:42:12,789 --> 00:42:27,630
certain feature implemented welcome any

00:42:17,920 --> 00:42:32,349
other questions how do we test but so

00:42:27,630 --> 00:42:35,230
first of all we test the intent matching

00:42:32,349 --> 00:42:38,920
in watson or in Raza

00:42:35,230 --> 00:42:43,260
so for deployments that happen on

00:42:38,920 --> 00:42:46,089
premises we are using rasayana loop and

00:42:43,260 --> 00:42:48,940
we develop scenarios together with the

00:42:46,089 --> 00:42:52,029
customer to cover all the happy flows

00:42:48,940 --> 00:42:54,839
and then all the negative scenarios we

00:42:52,029 --> 00:42:59,410
try to figure out what can go wrong

00:42:54,839 --> 00:43:02,530
so it's a double testing you have to

00:42:59,410 --> 00:43:06,160
have like a positive hat and then

00:43:02,530 --> 00:43:08,110
destructive Hut it's very difficult as a

00:43:06,160 --> 00:43:11,260
developer because you tend to only code

00:43:08,110 --> 00:43:15,870
the happy flows but you need to to test

00:43:11,260 --> 00:43:19,150
very very heavily the negative parts and

00:43:15,870 --> 00:43:21,640
if you use a cloud-based and a new

00:43:19,150 --> 00:43:25,480
version it will know about swear words

00:43:21,640 --> 00:43:28,000
and other complicated things if you do

00:43:25,480 --> 00:43:30,490
your own on-premises model you will have

00:43:28,000 --> 00:43:34,450
to train the model to understand that

00:43:30,490 --> 00:43:36,250
the customer is saying something bad but

00:43:34,450 --> 00:43:38,710
you need to handle these scenarios

00:43:36,250 --> 00:43:42,460
negative ones as well so it's quite a

00:43:38,710 --> 00:43:44,620
lot of scenario writing resembles

00:43:42,460 --> 00:43:47,020
behavior driven development but it's

00:43:44,620 --> 00:43:49,420
completely different and you need

00:43:47,020 --> 00:43:51,670
non-technical people if you don't build

00:43:49,420 --> 00:43:53,260
a technical chatbot of course you need

00:43:51,670 --> 00:43:56,260
non-technical people who are very

00:43:53,260 --> 00:43:59,460
familiar with the domain to do the

00:43:56,260 --> 00:43:59,460
training in a correct way

00:44:09,990 --> 00:44:17,500
so the question is did we try to put

00:44:12,730 --> 00:44:19,470
voice as an interface for the bot so

00:44:17,500 --> 00:44:22,510
that somebody can issue voice commands

00:44:19,470 --> 00:44:28,740
this is something that we are in fact

00:44:22,510 --> 00:44:32,950
working on so we we have an API that

00:44:28,740 --> 00:44:35,530
does voice understanding and the catch

00:44:32,950 --> 00:44:38,800
is that we need to have a proof of

00:44:35,530 --> 00:44:43,240
concept for a future contract so we

00:44:38,800 --> 00:44:46,180
looked into more into better solutions

00:44:43,240 --> 00:44:48,610
for this just using an API is not always

00:44:46,180 --> 00:44:53,650
doing the trick so there are some very

00:44:48,610 --> 00:44:56,470
good libraries let's say that you

00:44:53,650 --> 00:44:58,450
install on your mobile device and it

00:44:56,470 --> 00:45:00,730
will do the recognition voice

00:44:58,450 --> 00:45:05,440
recognition and transcription to text on

00:45:00,730 --> 00:45:08,320
the device so there are solutions in the

00:45:05,440 --> 00:45:11,020
market I cannot show you one I know it

00:45:08,320 --> 00:45:13,480
would be the most impressive demo but I

00:45:11,020 --> 00:45:15,820
don't have it right now with me it is

00:45:13,480 --> 00:45:16,300
possible and doable so you can play with

00:45:15,820 --> 00:45:27,190
it

00:45:16,300 --> 00:45:29,650
nately yeah so the question is does the

00:45:27,190 --> 00:45:32,290
bot does the bot only understand English

00:45:29,650 --> 00:45:34,810
yes at this point it only understands

00:45:32,290 --> 00:45:38,380
English because we are an international

00:45:34,810 --> 00:45:42,790
team so we don't need to work with other

00:45:38,380 --> 00:45:45,310
languages but if you train your models

00:45:42,790 --> 00:45:48,220
so you don't rely on cloud versions you

00:45:45,310 --> 00:45:51,550
can train them in your language so the

00:45:48,220 --> 00:45:53,890
rasa na loob pipelines are highly

00:45:51,550 --> 00:45:57,130
configurable and they use all sorts of

00:45:53,890 --> 00:45:59,920
stemming so you can adapt the build

00:45:57,130 --> 00:46:09,640
pipeline to your language so that it

00:45:59,920 --> 00:46:12,190
provides maximum results okay if you

00:46:09,640 --> 00:46:15,490
have further questions I'll be right

00:46:12,190 --> 00:46:16,260
outside so feel free to grab me thank

00:46:15,490 --> 00:46:17,140
you very much

00:46:16,260 --> 00:46:22,840
[Applause]

00:46:17,140 --> 00:46:22,840

YouTube URL: https://www.youtube.com/watch?v=sWQ8vIYjFlU


