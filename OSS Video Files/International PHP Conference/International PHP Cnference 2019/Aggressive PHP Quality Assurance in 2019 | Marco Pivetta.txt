Title: Aggressive PHP Quality Assurance in 2019 | Marco Pivetta
Publication date: 2019-11-22
Playlist: International PHP Cnference 2019
Description: 
	PHP has a reputation for being a very flexible, yet very messy programming language: Keeping the chaos at bay requires a non-trivial amount of cognitive load and technical expertise.
In this talk, we will explore how quality assurance for popular open source packages has evolved in the past few years, and how we can further improve our own projects. We will cover architectural practices, naming, code design, tooling and how to avoid common pitfalls that waste everyone’s time. With this experience, we can all help the PHP ecosystem in further evolutions.

Speaker: Marco Pivetta (Roave, LLC.) | https://phpconference.com/speaker/marco-pivetta/

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,000 --> 00:00:04,670
[Music]

00:00:06,779 --> 00:00:12,630
I think we can get started in good all

00:00:12,240 --> 00:00:14,670
right

00:00:12,630 --> 00:00:16,619
so it's time for me to show you this

00:00:14,670 --> 00:00:21,300
presentation that I've been working on

00:00:16,619 --> 00:00:25,050
tonight I'm just give me okay so this is

00:00:21,300 --> 00:00:28,349
aggressive beefy QA in 2019 I want to

00:00:25,050 --> 00:00:30,330
specify in 2019 because if somebody sees

00:00:28,349 --> 00:00:36,000
this in 10 years you're probably gonna

00:00:30,330 --> 00:00:38,850
rip their hair off by the way is anyone

00:00:36,000 --> 00:00:42,930
not German speaking I'm just okay Coco

00:00:38,850 --> 00:00:45,629
Coco yeah so basically I just want to

00:00:42,930 --> 00:00:47,070
make sure if you have a question you

00:00:45,629 --> 00:00:48,840
don't know how to formulate it you want

00:00:47,070 --> 00:00:50,070
to do things in German feel free to do

00:00:48,840 --> 00:00:53,340
that I understand German

00:00:50,070 --> 00:00:56,969
I will gladly translate to my degree of

00:00:53,340 --> 00:00:58,710
knowledge I'm Marco this is how I

00:00:56,969 --> 00:01:02,300
present myself on the Internet

00:00:58,710 --> 00:01:04,559
so if you see that coming that's scary

00:01:02,300 --> 00:01:07,350
you know your prayer requests will be

00:01:04,559 --> 00:01:10,290
rejected no I'm just kidding but I have

00:01:07,350 --> 00:01:12,299
these ominous presence of mercury the

00:01:10,290 --> 00:01:13,830
guy that always says no mark is the guy

00:01:12,299 --> 00:01:17,640
that always finds the problem

00:01:13,830 --> 00:01:20,880
nothing is ever fine and it's kind of

00:01:17,640 --> 00:01:24,000
true I find stuff that other people

00:01:20,880 --> 00:01:25,530
don't find because I'm trained not

00:01:24,000 --> 00:01:29,700
because I'm smarter it's just that I do

00:01:25,530 --> 00:01:32,790
it a lot so I see a lot okay if I do 20

00:01:29,700 --> 00:01:34,320
code reviews a day I'm gonna be more

00:01:32,790 --> 00:01:38,630
experienced than somebody doing it once

00:01:34,320 --> 00:01:41,400
a day and that's very much normal so I

00:01:38,630 --> 00:01:42,000
have this ominous presence of I'm the

00:01:41,400 --> 00:01:44,970
bad guy

00:01:42,000 --> 00:01:46,680
and I want to kind of fix it so we'll

00:01:44,970 --> 00:01:48,860
see how to do that during the talk or

00:01:46,680 --> 00:01:51,479
maybe I'm making it worse I don't know

00:01:48,860 --> 00:01:55,530
I'm a consultant I work for a company

00:01:51,479 --> 00:01:59,549
called Rove we're a group of mostly

00:01:55,530 --> 00:02:00,869
stray dogs that come to your company get

00:01:59,549 --> 00:02:04,840
your money and then spend it to go to

00:02:00,869 --> 00:02:06,880
conferences now

00:02:04,840 --> 00:02:09,819
back in time I did a talk called

00:02:06,880 --> 00:02:14,800
extremely defensive PHP did anyone see

00:02:09,819 --> 00:02:16,510
that very few okay well if we run out of

00:02:14,800 --> 00:02:18,430
material I'm gonna start with extremely

00:02:16,510 --> 00:02:22,209
fancy PHP it's an all talk but I still

00:02:18,430 --> 00:02:24,940
remember it so extremely offensive PHP

00:02:22,209 --> 00:02:27,610
was a set of practices where I said look

00:02:24,940 --> 00:02:29,650
write code this way because you're gonna

00:02:27,610 --> 00:02:32,050
avoid this problem write code this way

00:02:29,650 --> 00:02:33,940
because you're gonna be having less

00:02:32,050 --> 00:02:36,580
trouble understanding and debugging it

00:02:33,940 --> 00:02:39,370
later so it was a talk about best

00:02:36,580 --> 00:02:41,680
practices there's a lot of discussion

00:02:39,370 --> 00:02:45,040
around best practices and their validity

00:02:41,680 --> 00:02:46,989
best practices are valid follow them and

00:02:45,040 --> 00:02:49,450
they're called best practices because

00:02:46,989 --> 00:02:51,459
that's the best we know at the moment it

00:02:49,450 --> 00:02:54,069
doesn't mean that they're subjective

00:02:51,459 --> 00:02:56,019
they are best practices anyone telling

00:02:54,069 --> 00:03:00,310
otherwise is kind of saying

00:02:56,019 --> 00:03:04,180
there but best practices are contextual

00:03:00,310 --> 00:03:06,760
to the time where they are active so you

00:03:04,180 --> 00:03:08,620
know smoke a cigarette every morning

00:03:06,760 --> 00:03:10,269
because it's gonna help you during the

00:03:08,620 --> 00:03:12,820
day it's probably not something you want

00:03:10,269 --> 00:03:14,320
to do this year you know maybe your

00:03:12,820 --> 00:03:17,109
grandfather did something like that

00:03:14,320 --> 00:03:17,590
right because they saw it on TV or

00:03:17,109 --> 00:03:20,290
something

00:03:17,590 --> 00:03:24,130
so the talk was from 2014 and it's time

00:03:20,290 --> 00:03:25,480
to update a few things so today we

00:03:24,130 --> 00:03:28,450
talked about software Quality Assurance

00:03:25,480 --> 00:03:33,010
specifically software Quality Assurance

00:03:28,450 --> 00:03:35,859
is and if you go to Wikipedia is a bunch

00:03:33,010 --> 00:03:37,540
of mumbo-jumbo about ISO standards the

00:03:35,859 --> 00:03:40,690
idea is that you have standards of

00:03:37,540 --> 00:03:43,150
quality that say this is a bad thing and

00:03:40,690 --> 00:03:45,549
should be avoided and this is what we

00:03:43,150 --> 00:03:47,680
follow as a practice to make sure things

00:03:45,549 --> 00:03:49,870
work right and this is how the software

00:03:47,680 --> 00:03:52,750
should work according to specification

00:03:49,870 --> 00:03:54,609
you try to make a standard can be

00:03:52,750 --> 00:03:58,420
subjective can be some sort of

00:03:54,609 --> 00:04:01,329
standardized version but you want to

00:03:58,420 --> 00:04:04,900
follow it now why quality standards

00:04:01,329 --> 00:04:08,680
who here is a developer okay everyone I

00:04:04,900 --> 00:04:10,660
kind of write this is a bit redundant

00:04:08,680 --> 00:04:14,110
why quality standards for developer

00:04:10,660 --> 00:04:16,180
right it always feels like this when you

00:04:14,110 --> 00:04:18,120
go into a company and they don't have

00:04:16,180 --> 00:04:20,400
quality standards so you go and

00:04:18,120 --> 00:04:22,740
I say here's a wheel yeah but they say

00:04:20,400 --> 00:04:24,960
no thank you we're busy we don't have

00:04:22,740 --> 00:04:28,350
time to implement the wheel because

00:04:24,960 --> 00:04:31,350
we're stuck working and I've seen this

00:04:28,350 --> 00:04:33,870
in many many many companies and I've

00:04:31,350 --> 00:04:37,740
seen it really really bad especially in

00:04:33,870 --> 00:04:42,210
Germany in Germany there's this very

00:04:37,740 --> 00:04:43,830
weird company well we're a critic way of

00:04:42,210 --> 00:04:46,860
seeing things where little companies

00:04:43,830 --> 00:04:49,010
want to behave like corporates and a lot

00:04:46,860 --> 00:04:51,419
of people say we always did it that way

00:04:49,010 --> 00:04:55,169
it's a very dangerous phrase to use

00:04:51,419 --> 00:04:57,870
don't try to challenge it now

00:04:55,169 --> 00:05:02,930
what happens is that you go into this

00:04:57,870 --> 00:05:07,200
vicious cycle oh that's really bad oh

00:05:02,930 --> 00:05:10,139
now I broke it so effectively you got

00:05:07,200 --> 00:05:12,960
deadlines at the top when the deadline

00:05:10,139 --> 00:05:16,320
comes up everyone is in a haste to get

00:05:12,960 --> 00:05:19,500
stuff yeah oh it still works okay

00:05:16,320 --> 00:05:22,530
so everyone gets work done really quick

00:05:19,500 --> 00:05:26,460
very hasty once you got the hasty work

00:05:22,530 --> 00:05:29,039
deployed since you did it in a hurry

00:05:26,460 --> 00:05:30,330
it goes to production production breaks

00:05:29,039 --> 00:05:32,940
and then everyone is spending time

00:05:30,330 --> 00:05:34,560
firefighting and by firefighting you

00:05:32,940 --> 00:05:37,500
waste time that you should otherwise

00:05:34,560 --> 00:05:39,510
spend in improving your processes not

00:05:37,500 --> 00:05:45,780
just software processes but processes in

00:05:39,510 --> 00:05:49,979
general so it is very much well known

00:05:45,780 --> 00:05:52,289
that it takes an exponential amount of

00:05:49,979 --> 00:05:55,620
time to fix problems once they reach

00:05:52,289 --> 00:05:56,910
production so if you fix a problem in

00:05:55,620 --> 00:05:59,340
your software while you're still

00:05:56,910 --> 00:06:01,650
deciding what to build that's gonna cost

00:05:59,340 --> 00:06:04,260
you nothing but if you want to change

00:06:01,650 --> 00:06:06,060
how the software works after it landed

00:06:04,260 --> 00:06:10,800
in production that's gonna cost a lot

00:06:06,060 --> 00:06:13,950
more it's very obvious okay but in

00:06:10,800 --> 00:06:16,139
practice what you want to do is you want

00:06:13,950 --> 00:06:19,500
to keep either this cycle very short

00:06:16,139 --> 00:06:20,880
keep it very squished and make

00:06:19,500 --> 00:06:23,750
production deployment and development

00:06:20,880 --> 00:06:26,909
very close to each other like seconds or

00:06:23,750 --> 00:06:29,430
you try to fix as much as possible here

00:06:26,909 --> 00:06:32,490
and we are here this is where we work

00:06:29,430 --> 00:06:34,639
today analysis and design

00:06:32,490 --> 00:06:36,930
there are other movements around

00:06:34,639 --> 00:06:38,940
observability that mostly focus on

00:06:36,930 --> 00:06:40,560
looking at stuff in production and

00:06:38,940 --> 00:06:43,409
fixing production and keeping production

00:06:40,560 --> 00:06:45,389
close to development that is not

00:06:43,409 --> 00:06:45,840
exclusive with this talk you can do that

00:06:45,389 --> 00:06:48,240
too

00:06:45,840 --> 00:06:50,879
this talk is mostly about what you can

00:06:48,240 --> 00:06:54,629
do now what you do at the beginning of

00:06:50,879 --> 00:06:59,610
project if you find a defect a problem

00:06:54,629 --> 00:07:04,919
in the software you can reduce the cost

00:06:59,610 --> 00:07:07,349
that it takes to fix a problem to a very

00:07:04,919 --> 00:07:09,659
minimum effort by either doing something

00:07:07,349 --> 00:07:13,020
like a pair programming or by

00:07:09,659 --> 00:07:15,479
effectively doing some local continues

00:07:13,020 --> 00:07:16,949
integration which is not remote

00:07:15,479 --> 00:07:19,110
continuous integration you don't push

00:07:16,949 --> 00:07:21,090
and wait half an hour it's already

00:07:19,110 --> 00:07:24,539
already context switch the already on a

00:07:21,090 --> 00:07:27,810
different problem you do TDD and by the

00:07:24,539 --> 00:07:30,240
way if you notice TDD is even further

00:07:27,810 --> 00:07:32,310
away from pair programming pair

00:07:30,240 --> 00:07:34,050
programming is most effective having two

00:07:32,310 --> 00:07:36,479
people look at the same code and looking

00:07:34,050 --> 00:07:38,400
at it and reasoning about it means that

00:07:36,479 --> 00:07:40,560
you constantly have lateral thinking

00:07:38,400 --> 00:07:42,780
about problems so you constantly try to

00:07:40,560 --> 00:07:45,990
attack a bug from different angles and

00:07:42,780 --> 00:07:48,960
then you see that you can have parallel

00:07:45,990 --> 00:07:51,120
testing I rarely see that that means you

00:07:48,960 --> 00:07:53,400
have somebody else doing testing on this

00:07:51,120 --> 00:07:56,550
side and attacking your software

00:07:53,400 --> 00:07:58,710
continuously but you see now code review

00:07:56,550 --> 00:08:01,319
is already up here it's already in red

00:07:58,710 --> 00:08:02,880
sorry getting high you know problems

00:08:01,319 --> 00:08:04,650
found in code review are already more

00:08:02,880 --> 00:08:07,409
expensive now I have to put in a comment

00:08:04,650 --> 00:08:09,330
on Friday evening and you are gonna fix

00:08:07,409 --> 00:08:11,130
it on Monday morning and there's a

00:08:09,330 --> 00:08:12,630
weekend in-between nobody freaking

00:08:11,130 --> 00:08:16,069
remembers what happened because you had

00:08:12,630 --> 00:08:19,169
so much boost during a weekend right

00:08:16,069 --> 00:08:21,449
then there's traditional system testing

00:08:19,169 --> 00:08:25,699
which is effectively Amazon Mechanical

00:08:21,449 --> 00:08:29,219
Turk with QA people don't do that and

00:08:25,699 --> 00:08:32,070
yeah traditional acceptance testing so

00:08:29,219 --> 00:08:34,349
this still assumes testing right we are

00:08:32,070 --> 00:08:37,950
also in a world where companies still do

00:08:34,349 --> 00:08:40,229
not do testing sometimes I say sometimes

00:08:37,950 --> 00:08:42,479
to make it nice because I know companies

00:08:40,229 --> 00:08:44,490
don't do testing they still sell it as a

00:08:42,479 --> 00:08:46,840
separate line item and that's extremely

00:08:44,490 --> 00:08:50,230
unprofessional

00:08:46,840 --> 00:08:55,510
to make it clear Quality Assurance is

00:08:50,230 --> 00:08:58,030
not people the role of the Quality

00:08:55,510 --> 00:09:00,100
Assurance person sitting at a computer

00:08:58,030 --> 00:09:01,630
and reviewing everything that went to

00:09:00,100 --> 00:09:05,950
production by testing manually

00:09:01,630 --> 00:09:08,590
everything is don't do that

00:09:05,950 --> 00:09:10,840
those people should be attacking your

00:09:08,590 --> 00:09:14,020
system by doing pen testing by trying to

00:09:10,840 --> 00:09:16,330
figure out UX issues by trying to figure

00:09:14,020 --> 00:09:18,430
out how the system breaks in ways that

00:09:16,330 --> 00:09:21,730
have nothing to do with how the feature

00:09:18,430 --> 00:09:23,680
was developed it is mostly up to

00:09:21,730 --> 00:09:26,530
automated tools to figure out if the

00:09:23,680 --> 00:09:29,620
system is healthy and keeps running so

00:09:26,530 --> 00:09:32,230
it is not a manual and repetitive task

00:09:29,620 --> 00:09:35,110
so you shouldn't stay there and have a

00:09:32,230 --> 00:09:36,840
schedule and test step by step I've seen

00:09:35,110 --> 00:09:40,180
that too you know Excel spreadsheet

00:09:36,840 --> 00:09:42,490
dating the column and the test to be run

00:09:40,180 --> 00:09:46,990
and somebody every morning did this

00:09:42,490 --> 00:09:49,720
testing by hand don't do that it costs

00:09:46,990 --> 00:09:53,560
money to run this stuff and it is gonna

00:09:49,720 --> 00:09:57,070
make people mad right nobody wants that

00:09:53,560 --> 00:09:59,620
kind of job that's horrible and then

00:09:57,070 --> 00:10:02,830
absolutely it's not someone else's

00:09:59,620 --> 00:10:05,830
problem as developers we should take

00:10:02,830 --> 00:10:08,770
care of the quality of what comes out of

00:10:05,830 --> 00:10:12,160
our development environment and we

00:10:08,770 --> 00:10:14,140
should instead do things ourselves when

00:10:12,160 --> 00:10:16,360
it comes to repetitive tasks we are good

00:10:14,140 --> 00:10:18,190
at automating we should write the

00:10:16,360 --> 00:10:21,090
automation around it we should not drop

00:10:18,190 --> 00:10:24,040
it on somebody else now you see Lisa is

00:10:21,090 --> 00:10:25,990
visibly pissed here and that's how the

00:10:24,040 --> 00:10:27,910
QA department usually feels about the

00:10:25,990 --> 00:10:29,170
development department and the

00:10:27,910 --> 00:10:31,960
development department the other way

00:10:29,170 --> 00:10:33,520
around so this entire you know drop it

00:10:31,960 --> 00:10:37,330
on someone else he's not really making

00:10:33,520 --> 00:10:43,360
it nice nor is gonna make friends that

00:10:37,330 --> 00:10:45,640
doesn't really help right so the other

00:10:43,360 --> 00:10:48,550
problem with this traditional testing

00:10:45,640 --> 00:10:50,820
approach is that effectively oh by the

00:10:48,550 --> 00:10:50,820
way

00:10:51,120 --> 00:10:56,670
I wasn't having my slide notes which

00:10:54,959 --> 00:10:58,769
makes it a bit harder to understand

00:10:56,670 --> 00:11:00,300
what's going on right so effectively we

00:10:58,769 --> 00:11:02,309
have this scenario where the developer

00:11:00,300 --> 00:11:04,410
mocks out all the data and knows exactly

00:11:02,309 --> 00:11:07,259
what to avoid there's only the happy

00:11:04,410 --> 00:11:09,029
path absolutely no touching everything

00:11:07,259 --> 00:11:11,639
else because everything explodes and

00:11:09,029 --> 00:11:14,639
then when the software goes to this QA

00:11:11,639 --> 00:11:15,990
department you know it comes back as in

00:11:14,639 --> 00:11:17,939
nothing works yeah it works as expected

00:11:15,990 --> 00:11:22,980
according to my little feature

00:11:17,939 --> 00:11:25,410
specification so yeah again not making

00:11:22,980 --> 00:11:27,329
friends that's not healthy that's not

00:11:25,410 --> 00:11:33,569
building useful relationships between

00:11:27,329 --> 00:11:36,149
people so don't do this traditional QA I

00:11:33,569 --> 00:11:39,930
broke the slides yeah

00:11:36,149 --> 00:11:41,699
so effectively going back to this kind

00:11:39,930 --> 00:11:44,430
of diagram you see you want to keep it

00:11:41,699 --> 00:11:46,279
this short as short as possible you want

00:11:44,430 --> 00:11:49,589
to keep it on the left of the diagram

00:11:46,279 --> 00:11:51,899
that means that the people writing the

00:11:49,589 --> 00:11:54,689
code are also the people finding the

00:11:51,899 --> 00:11:58,290
defects as soon as possible there's a

00:11:54,689 --> 00:12:00,899
very old paper of very old you know I

00:11:58,290 --> 00:12:04,189
wasn't even in software yet this is

00:12:00,899 --> 00:12:06,360
software defect removal efficiency 1996

00:12:04,189 --> 00:12:07,800
they were already looking at this I

00:12:06,360 --> 00:12:10,529
don't know how much this applies to

00:12:07,800 --> 00:12:14,309
modern software and according to what we

00:12:10,529 --> 00:12:17,689
do nowadays with TDD if you do TDD which

00:12:14,309 --> 00:12:22,589
is probably one in 10 developers maybe

00:12:17,689 --> 00:12:24,889
but effectively the most defects are

00:12:22,589 --> 00:12:27,870
introduced during development of course

00:12:24,889 --> 00:12:31,589
you find maybe half of them during

00:12:27,870 --> 00:12:34,050
development in practice what what they

00:12:31,589 --> 00:12:35,790
used to say in clean code is that every

00:12:34,050 --> 00:12:39,509
three to four lines of code you have a

00:12:35,790 --> 00:12:40,889
bug so imagine that now imagine that you

00:12:39,509 --> 00:12:42,389
have a million lines of code running

00:12:40,889 --> 00:12:44,579
your software because you're running it

00:12:42,389 --> 00:12:47,670
on the Linux kernel you don't want to

00:12:44,579 --> 00:12:50,879
know what's happening in there and

00:12:47,670 --> 00:12:55,439
effectively the cost to repair a defect

00:12:50,879 --> 00:12:58,139
goes up in two magnitudes multiplied by

00:12:55,439 --> 00:13:00,870
six six hundred and forty times compared

00:12:58,139 --> 00:13:02,850
to when you're developing it's not just

00:13:00,870 --> 00:13:04,930
a technical problem it's also people

00:13:02,850 --> 00:13:06,520
problem you are starting to get

00:13:04,930 --> 00:13:09,399
more people involved in this feedback

00:13:06,520 --> 00:13:10,870
loop you're developing and then somebody

00:13:09,399 --> 00:13:13,000
else figures out the problem there's

00:13:10,870 --> 00:13:15,060
communication even during that

00:13:13,000 --> 00:13:17,050
communication then can there can be

00:13:15,060 --> 00:13:20,710
misunderstanding and you're gonna add

00:13:17,050 --> 00:13:23,890
bugs so traditional software testing is

00:13:20,710 --> 00:13:28,450
absolutely and it is dad don't

00:13:23,890 --> 00:13:32,410
do that okay if you still do that try to

00:13:28,450 --> 00:13:35,740
repurpose people doing this QA thing to

00:13:32,410 --> 00:13:39,700
do exploratory testing hunting for bugs

00:13:35,740 --> 00:13:43,899
not repeating testing but inventing new

00:13:39,700 --> 00:13:46,060
tests inventing new scenarios right so

00:13:43,899 --> 00:13:48,190
back to who is the developer everyone in

00:13:46,060 --> 00:13:52,630
here was a developer you need to own

00:13:48,190 --> 00:13:54,459
your QA hat you are also QA everything

00:13:52,630 --> 00:13:55,690
you produce should come to a certain

00:13:54,459 --> 00:13:57,640
degree of quality

00:13:55,690 --> 00:14:00,250
we're not perfect we are still gonna

00:13:57,640 --> 00:14:02,520
introduce bugs so I'm not expecting

00:14:00,250 --> 00:14:04,570
anyone to write perfect code right and

00:14:02,520 --> 00:14:06,190
somebody coming to a job interview and

00:14:04,570 --> 00:14:10,240
saying that they write perfect code you

00:14:06,190 --> 00:14:12,820
should never hire those people but we

00:14:10,240 --> 00:14:15,850
can start from somewhere so first of all

00:14:12,820 --> 00:14:18,760
you want to start as a team of

00:14:15,850 --> 00:14:21,660
developers to understand what are you

00:14:18,760 --> 00:14:24,160
building there's a talk I think by

00:14:21,660 --> 00:14:25,660
Stefan priggish I think is doing a talk

00:14:24,160 --> 00:14:27,790
about what are you building is either

00:14:25,660 --> 00:14:34,540
sniffing or army I don't like always

00:14:27,790 --> 00:14:36,910
confuse the DCCC HPCC guys but you want

00:14:34,540 --> 00:14:39,430
to have a direction where you're going

00:14:36,910 --> 00:14:43,209
and that direction should be decided as

00:14:39,430 --> 00:14:45,060
a team and should be discussed so this

00:14:43,209 --> 00:14:47,440
is about collecting requirements and

00:14:45,060 --> 00:14:51,130
distilling them into a way that is

00:14:47,440 --> 00:14:54,279
readable and understandable and at least

00:14:51,130 --> 00:14:56,079
for me what worked really well was BDD

00:14:54,279 --> 00:15:00,310
and the mind driven development

00:14:56,079 --> 00:15:02,770
now BDD well DDD is kind of like the way

00:15:00,310 --> 00:15:05,230
you talk to business you should look

00:15:02,770 --> 00:15:08,140
into it has nothing to do with you a but

00:15:05,230 --> 00:15:10,680
it helps you understanding what business

00:15:08,140 --> 00:15:13,990
wants from you and to try and design

00:15:10,680 --> 00:15:17,709
requirements so that you know what you

00:15:13,990 --> 00:15:18,860
will have to look for while testing ok

00:15:17,709 --> 00:15:21,830
if you don't have a part

00:15:18,860 --> 00:15:24,290
then what are you testing against right

00:15:21,830 --> 00:15:25,940
you can test against stuff that you know

00:15:24,290 --> 00:15:27,590
every application has but if every

00:15:25,940 --> 00:15:31,070
application has it why should you buy

00:15:27,590 --> 00:15:34,690
why should we buy your software and BDD

00:15:31,070 --> 00:15:37,460
is about emerging specifications so you

00:15:34,690 --> 00:15:40,600
iterate over what the system does and

00:15:37,460 --> 00:15:42,800
try to figure out what it should do and

00:15:40,600 --> 00:15:44,570
these are the so called functional

00:15:42,800 --> 00:15:47,930
requirements and if you distill them you

00:15:44,570 --> 00:15:50,360
get out with documents that are kind of

00:15:47,930 --> 00:15:53,870
like this this is a feature file written

00:15:50,360 --> 00:15:55,820
in gherkin just specific language that

00:15:53,870 --> 00:15:58,550
is a very simplified version of English

00:15:55,820 --> 00:16:00,860
in which you write examples that are

00:15:58,550 --> 00:16:03,140
understandable to developers so

00:16:00,860 --> 00:16:06,890
technical people non-technical people

00:16:03,140 --> 00:16:10,580
business people you put these in your

00:16:06,890 --> 00:16:13,610
project so if somebody needs to test

00:16:10,580 --> 00:16:16,760
manually they take this they can test

00:16:13,610 --> 00:16:18,740
manually somebody writes automation they

00:16:16,760 --> 00:16:21,710
can take this and write the automation

00:16:18,740 --> 00:16:24,980
for it but at least you understand what

00:16:21,710 --> 00:16:26,420
your system is supposed to do once you

00:16:24,980 --> 00:16:32,240
know that you know what you're going to

00:16:26,420 --> 00:16:37,250
test against the second thing of course

00:16:32,240 --> 00:16:40,130
is architecture so a good architecture

00:16:37,250 --> 00:16:42,710
is a good ground to build the stable

00:16:40,130 --> 00:16:46,190
software that works for your use case it

00:16:42,710 --> 00:16:49,370
doesn't need to be you know every bells

00:16:46,190 --> 00:16:51,920
and whistles design with secure s events

00:16:49,370 --> 00:16:53,570
or seeing microservice whatever now

00:16:51,920 --> 00:16:55,820
there's no need for that it could be

00:16:53,570 --> 00:16:58,580
very simple but the idea is that

00:16:55,820 --> 00:17:01,640
architecture is about taking decisions

00:16:58,580 --> 00:17:04,520
and owning them and keeping them

00:17:01,640 --> 00:17:06,710
throughout the life of the project if

00:17:04,520 --> 00:17:09,170
you don't have a good well-defined

00:17:06,710 --> 00:17:10,850
architecture what happens usually is

00:17:09,170 --> 00:17:13,700
that you start looking at the system and

00:17:10,850 --> 00:17:16,520
every second file looks different and

00:17:13,700 --> 00:17:18,650
uses a different design pattern just for

00:17:16,520 --> 00:17:20,570
the sake of trying it out so you jump

00:17:18,650 --> 00:17:23,630
into these projects that have twenty

00:17:20,570 --> 00:17:25,760
ways of implementing the same thing even

00:17:23,630 --> 00:17:27,200
though you know maybe there was no need

00:17:25,760 --> 00:17:30,830
for it so it looks like an

00:17:27,200 --> 00:17:32,780
experimentation ground which may be

00:17:30,830 --> 00:17:36,200
maybe interesting but it

00:17:32,780 --> 00:17:40,490
terrible to maintain so the architecture

00:17:36,200 --> 00:17:42,860
is mostly the important stuff that is

00:17:40,490 --> 00:17:45,080
kind of what runs your system it's a

00:17:42,860 --> 00:17:46,580
layer below its what business doesn't

00:17:45,080 --> 00:17:49,070
care about honestly

00:17:46,580 --> 00:17:50,570
but it's what allows you to be fast and

00:17:49,070 --> 00:17:54,620
what allows you to keep the system

00:17:50,570 --> 00:17:57,140
running long term and I like to call it

00:17:54,620 --> 00:17:59,750
a non-functional requirement because

00:17:57,140 --> 00:18:01,640
it's stuff that others don't see the

00:17:59,750 --> 00:18:03,920
architecture is kind of rate you know

00:18:01,640 --> 00:18:05,780
uninteresting to people people come to

00:18:03,920 --> 00:18:07,520
the hotel they want to sleep at night

00:18:05,780 --> 00:18:10,250
they don't care about how the pillars

00:18:07,520 --> 00:18:10,760
are put or where the cables are in the

00:18:10,250 --> 00:18:12,710
walls

00:18:10,760 --> 00:18:15,560
you know that's architecture nobody

00:18:12,710 --> 00:18:18,620
cares about that there is a very good

00:18:15,560 --> 00:18:21,650
tool to document and discuss

00:18:18,620 --> 00:18:25,360
architecture which is the ADR approach

00:18:21,650 --> 00:18:27,650
so it's an architecture decision record

00:18:25,360 --> 00:18:28,850
sounds complicated but it's really

00:18:27,650 --> 00:18:32,750
really simple

00:18:28,850 --> 00:18:36,380
in your repository of your project all

00:18:32,750 --> 00:18:40,880
right you take and you commit files like

00:18:36,380 --> 00:18:43,310
these we say here's what we did this is

00:18:40,880 --> 00:18:45,350
the background of it this is what we

00:18:43,310 --> 00:18:48,130
decided and this is what it's going to

00:18:45,350 --> 00:18:51,080
come out of it negatives and positives

00:18:48,130 --> 00:18:53,600
documented so it's very similar to an

00:18:51,080 --> 00:18:55,520
RFC in a programming language you want

00:18:53,600 --> 00:18:58,700
to propose a change to how we do things

00:18:55,520 --> 00:19:02,080
in the software like tomorrow we make

00:18:58,700 --> 00:19:05,210
all our value objects immutable because

00:19:02,080 --> 00:19:07,010
this happened and it's going to bring us

00:19:05,210 --> 00:19:09,170
disadvantage and it's going to lead to

00:19:07,010 --> 00:19:11,930
these busy breaks that we foresee will

00:19:09,170 --> 00:19:15,800
be a pain to fix but we see value in it

00:19:11,930 --> 00:19:18,080
and you take this send it in as a merge

00:19:15,800 --> 00:19:21,470
request for request and everyone

00:19:18,080 --> 00:19:24,590
discusses it not some kind of high you

00:19:21,470 --> 00:19:28,430
know high trone architect role everyone

00:19:24,590 --> 00:19:31,460
in the teams owns it so the point is

00:19:28,430 --> 00:19:33,620
discussing it discussing it once you

00:19:31,460 --> 00:19:36,230
discussed it you document it in a

00:19:33,620 --> 00:19:37,940
documentation you know you can kind of

00:19:36,230 --> 00:19:41,870
change a couple lines and whatever and

00:19:37,940 --> 00:19:45,770
then you can follow it so if somebody

00:19:41,870 --> 00:19:46,460
comes in and says look I think it's

00:19:45,770 --> 00:19:48,620
wrong

00:19:46,460 --> 00:19:50,420
to do it this way because I think in

00:19:48,620 --> 00:19:52,700
this particular piece of code it works

00:19:50,420 --> 00:19:56,030
better this way you can either point

00:19:52,700 --> 00:19:58,460
them at the ADR entry and say this is

00:19:56,030 --> 00:20:01,150
how we do it or you can say write a new

00:19:58,460 --> 00:20:04,370
IDR in which you propose a new approach

00:20:01,150 --> 00:20:06,740
okay so you can take something that you

00:20:04,370 --> 00:20:08,690
took from this conference talk and put

00:20:06,740 --> 00:20:11,060
it in an ADR inside your project and say

00:20:08,690 --> 00:20:12,950
we are gonna try doing the way Marco

00:20:11,060 --> 00:20:18,860
tries to do it you know that is your

00:20:12,950 --> 00:20:22,700
problem to automation automation is

00:20:18,860 --> 00:20:26,450
where we as developers both produce

00:20:22,700 --> 00:20:31,160
value and reduce jobs so it has blesses

00:20:26,450 --> 00:20:32,780
and minuses whatever but for me

00:20:31,160 --> 00:20:37,370
automation mostly means continuous

00:20:32,780 --> 00:20:38,690
integration in this case so in quality

00:20:37,370 --> 00:20:40,220
assurance you don't really care that

00:20:38,690 --> 00:20:41,960
much about how to improve the

00:20:40,220 --> 00:20:44,750
development environment you you're

00:20:41,960 --> 00:20:47,600
mostly about verifying that the outcome

00:20:44,750 --> 00:20:50,360
of that is qualitative enough there are

00:20:47,600 --> 00:20:53,200
tools that are about improving the

00:20:50,360 --> 00:20:55,850
development environment and automating

00:20:53,200 --> 00:20:57,710
some kind of code fixes and stuff like

00:20:55,850 --> 00:21:00,380
that but that's mostly out of scope for

00:20:57,710 --> 00:21:02,930
the talk today so what I see is

00:21:00,380 --> 00:21:06,140
continuous integration so it's not

00:21:02,930 --> 00:21:07,850
necessarily the semantically correct way

00:21:06,140 --> 00:21:10,550
of doing continuous integration is that

00:21:07,850 --> 00:21:14,480
you have a set of checks if all is good

00:21:10,550 --> 00:21:16,880
then cool otherwise exit one that's CI

00:21:14,480 --> 00:21:21,590
for me there's nothing more to it it's

00:21:16,880 --> 00:21:23,330
very simple now the tools are important

00:21:21,590 --> 00:21:26,600
in PHP because PHP is a horrible

00:21:23,330 --> 00:21:29,780
language PHP is really really really a

00:21:26,600 --> 00:21:30,290
horrible language and you can do a lot

00:21:29,780 --> 00:21:31,940
in it

00:21:30,290 --> 00:21:34,030
there are worse languages you can take

00:21:31,940 --> 00:21:37,760
Ruby for example you know it's worse a

00:21:34,030 --> 00:21:39,290
JavaScript don't get me wrong I'm not

00:21:37,760 --> 00:21:41,420
saying it out of spite

00:21:39,290 --> 00:21:43,280
I'm saying it because these languages

00:21:41,420 --> 00:21:46,040
simply allow you to do too many things

00:21:43,280 --> 00:21:48,920
so you have a language that lets you do

00:21:46,040 --> 00:21:50,570
everything everything whatever you want

00:21:48,920 --> 00:21:53,450
to do you want to change a function on

00:21:50,570 --> 00:21:56,360
an object at runtime sure let's replace

00:21:53,450 --> 00:21:59,920
the prototype of the object is it a good

00:21:56,360 --> 00:22:02,440
idea experience says no okay

00:21:59,920 --> 00:22:04,420
in PHP you can do a lot of things on

00:22:02,440 --> 00:22:07,870
your objects that are possibly just bad

00:22:04,420 --> 00:22:10,090
ideas so that was making it in horrible

00:22:07,870 --> 00:22:11,799
language I see better languages as

00:22:10,090 --> 00:22:15,070
languages where you can do less things

00:22:11,799 --> 00:22:16,330
in very few ways because they kinda

00:22:15,070 --> 00:22:18,640
already give you some sort of

00:22:16,330 --> 00:22:23,140
architecture ground on how to build

00:22:18,640 --> 00:22:25,750
software so in PHP what happens is that

00:22:23,140 --> 00:22:27,250
experience becomes King since the

00:22:25,750 --> 00:22:29,080
language does not really bring

00:22:27,250 --> 00:22:31,030
experience with itself it's more like

00:22:29,080 --> 00:22:33,580
here's a bunch of things that everyone

00:22:31,030 --> 00:22:34,299
used over the years right and you figure

00:22:33,580 --> 00:22:36,940
it out now

00:22:34,299 --> 00:22:39,160
so you have to get some expert like me

00:22:36,940 --> 00:22:42,580
come over and tell you what's good and

00:22:39,160 --> 00:22:44,530
what's wrong alright and I get paid for

00:22:42,580 --> 00:22:46,059
it right if I go into language that

00:22:44,530 --> 00:22:50,710
already fixed these problems then I'm

00:22:46,059 --> 00:22:53,410
out of a job which i think is fine it's

00:22:50,710 --> 00:22:56,169
just a bit sad so effectively the tools

00:22:53,410 --> 00:22:58,630
that come with the language are well the

00:22:56,169 --> 00:23:01,809
tool to come with the community around

00:22:58,630 --> 00:23:04,570
the language ecosystem are effectively

00:23:01,809 --> 00:23:07,000
these kind of knowledge this experience

00:23:04,570 --> 00:23:08,530
the authors of the tools have taken the

00:23:07,000 --> 00:23:11,679
experience of what is good what is bad

00:23:08,530 --> 00:23:14,380
put it into the tool and now it's

00:23:11,679 --> 00:23:16,630
problem solved you run the tool and the

00:23:14,380 --> 00:23:19,000
tool tells you what the decisions are

00:23:16,630 --> 00:23:22,030
there is no need to kind of reinvent it

00:23:19,000 --> 00:23:23,590
of course you can challenge it you can

00:23:22,030 --> 00:23:24,970
come up with improvements to the tools

00:23:23,590 --> 00:23:27,400
but basically you take this little

00:23:24,970 --> 00:23:29,559
experience you make on this specific

00:23:27,400 --> 00:23:31,330
problem you put it into the tool now

00:23:29,559 --> 00:23:32,280
everyone using the tool will benefit

00:23:31,330 --> 00:23:37,590
from it

00:23:32,280 --> 00:23:41,169
so since we rely heavily on the tools I

00:23:37,590 --> 00:23:44,650
suggest that's also my suggestion go

00:23:41,169 --> 00:23:49,390
with them on a repo the reason is you

00:23:44,650 --> 00:23:53,110
don't want to set up PHP unit 30 times

00:23:49,390 --> 00:23:56,440
for 30 projects do it once there's no

00:23:53,110 --> 00:23:58,600
point in doing it 20 million times multi

00:23:56,440 --> 00:24:00,549
repo you can discuss it you really need

00:23:58,600 --> 00:24:02,530
to have a strong use case for multi

00:24:00,549 --> 00:24:07,000
ripple don't do it for the sake of doing

00:24:02,530 --> 00:24:08,679
it so once you assuming you have let's

00:24:07,000 --> 00:24:11,710
say that we have isolated one project

00:24:08,679 --> 00:24:13,930
one repository so we are working in one

00:24:11,710 --> 00:24:15,760
repository now

00:24:13,930 --> 00:24:17,170
remember you have to replicate this

00:24:15,760 --> 00:24:19,630
entire discussion from multiple

00:24:17,170 --> 00:24:22,240
repositories if that's how you work we

00:24:19,630 --> 00:24:24,850
can start introducing tools so one tool

00:24:22,240 --> 00:24:27,960
that I really like is since you loves

00:24:24,850 --> 00:24:30,520
dodge runs and she loves the DEP track

00:24:27,960 --> 00:24:35,890
now that track is mostly developed a

00:24:30,520 --> 00:24:40,140
similar manic in color and what this

00:24:35,890 --> 00:24:43,720
tool does is it takes your sources

00:24:40,140 --> 00:24:46,720
analyzes them categorizes them so

00:24:43,720 --> 00:24:48,820
creates clusters of classes such as

00:24:46,720 --> 00:24:50,800
these are controllers these are services

00:24:48,820 --> 00:24:54,070
this is about payments and this is about

00:24:50,800 --> 00:24:57,300
check out and puts them in categories

00:24:54,070 --> 00:25:00,040
and then you define which category of

00:24:57,300 --> 00:25:03,070
classes can rely on which other category

00:25:00,040 --> 00:25:03,910
so in practice you configure it with

00:25:03,070 --> 00:25:07,420
with Yama

00:25:03,910 --> 00:25:09,070
suddenly and you tell it okay we want to

00:25:07,420 --> 00:25:11,650
analyze sources we want to exclude

00:25:09,070 --> 00:25:15,190
anything that looks like a test

00:25:11,650 --> 00:25:16,900
we have controllers so a controller is

00:25:15,190 --> 00:25:18,700
anything that has controller in its name

00:25:16,900 --> 00:25:20,890
very simple rule write a regular

00:25:18,700 --> 00:25:23,950
expression based so it works as long as

00:25:20,890 --> 00:25:25,900
you have relatively good conventions or

00:25:23,950 --> 00:25:28,390
you can maybe write your own kind of

00:25:25,900 --> 00:25:32,800
collector we say it's interface based

00:25:28,390 --> 00:25:35,130
instead of name based so here we are

00:25:32,800 --> 00:25:37,630
categorizing things in controllers

00:25:35,130 --> 00:25:40,240
repositories and services so I took just

00:25:37,630 --> 00:25:42,610
the example from the readme okay I'm not

00:25:40,240 --> 00:25:44,770
gonna tell you how to configure all of

00:25:42,610 --> 00:25:46,540
that track and how to go fine-grain in

00:25:44,770 --> 00:25:49,240
it there's a dedicated talk just about

00:25:46,540 --> 00:25:51,970
that track so now that you can write

00:25:49,240 --> 00:25:53,530
categorize them you can put rules on top

00:25:51,970 --> 00:25:55,960
of them so you say a controller can

00:25:53,530 --> 00:25:58,450
depend on services and a service can

00:25:55,960 --> 00:26:00,940
depend on a repository but the

00:25:58,450 --> 00:26:03,340
repository cannot depend on any other

00:26:00,940 --> 00:26:05,110
category that is defined here so you're

00:26:03,340 --> 00:26:07,990
still free to use other things that are

00:26:05,110 --> 00:26:11,050
uncharacterized but from the repository

00:26:07,990 --> 00:26:13,060
you cannot use these other two so when

00:26:11,050 --> 00:26:16,300
you then run the tool it will generate a

00:26:13,060 --> 00:26:20,890
nice diagram and this diagram says look

00:26:16,300 --> 00:26:23,460
in your sources you have one case where

00:26:20,890 --> 00:26:25,929
your repository depends on a controller

00:26:23,460 --> 00:26:28,539
that's a violation

00:26:25,929 --> 00:26:29,289
you cannot do that this means use

00:26:28,539 --> 00:26:31,269
statement

00:26:29,289 --> 00:26:33,639
this means doclock this means type int

00:26:31,269 --> 00:26:36,659
this means dependency all of these

00:26:33,639 --> 00:26:39,909
nothing is loud that way so it's a

00:26:36,659 --> 00:26:42,909
relatively simple way to ensure that the

00:26:39,909 --> 00:26:44,649
junior developer in your company is not

00:26:42,909 --> 00:26:47,499
going to mix all classes together and

00:26:44,649 --> 00:26:50,529
just write one of those God classes that

00:26:47,499 --> 00:26:53,110
does everything so it encourages

00:26:50,529 --> 00:26:55,840
layer-based development which can be

00:26:53,110 --> 00:26:58,659
seen as both positive and negative up to

00:26:55,840 --> 00:27:00,999
you to decide whether that's nice you

00:26:58,659 --> 00:27:04,059
know take an ADR write an AVR this is

00:27:00,999 --> 00:27:06,730
how we write software but it will give

00:27:04,059 --> 00:27:08,320
you this very nice overview of where you

00:27:06,730 --> 00:27:11,799
screwed up in the dependencies you

00:27:08,320 --> 00:27:14,769
introduced it in CI has exit one if

00:27:11,799 --> 00:27:17,139
there's a violation is that simple so

00:27:14,769 --> 00:27:18,970
you can pretty much ensure that people

00:27:17,139 --> 00:27:19,749
don't use the wrong thing in the wrong

00:27:18,970 --> 00:27:22,450
location

00:27:19,749 --> 00:27:24,399
then comes static analysis now depth

00:27:22,450 --> 00:27:26,350
rack is some sort of static analysis but

00:27:24,399 --> 00:27:27,940
since it's mostly taking names and

00:27:26,350 --> 00:27:30,279
wiring them together I would say it's

00:27:27,940 --> 00:27:33,789
very little analysis and more like

00:27:30,279 --> 00:27:37,240
categorization so for static analysis

00:27:33,789 --> 00:27:40,539
there's a bunch of tools I think there's

00:27:37,240 --> 00:27:43,330
also Damien Dominion at the conference

00:27:40,539 --> 00:27:46,720
he's speaking about exa khat

00:27:43,330 --> 00:27:50,019
but what I usually do is I use these

00:27:46,720 --> 00:27:51,629
tools there's a song by Vimeo I think

00:27:50,019 --> 00:27:54,909
there's a talk about it on Thursday

00:27:51,629 --> 00:27:56,499
which is very interesting look at it

00:27:54,909 --> 00:27:58,240
because it's the most advanced type

00:27:56,499 --> 00:28:02,649
checker that there is in PHP right now

00:27:58,240 --> 00:28:05,590
to my opinion there's PHP Stan which is

00:28:02,649 --> 00:28:07,179
the most kind of like used type checker

00:28:05,590 --> 00:28:10,629
I don't think it's the more advanced

00:28:07,179 --> 00:28:13,389
right now but it is catching up and I'm

00:28:10,629 --> 00:28:15,159
personally even a sponsor of PHP Stan I

00:28:13,389 --> 00:28:17,110
think I actually gave them money to get

00:28:15,159 --> 00:28:18,970
a release done because it is that

00:28:17,110 --> 00:28:24,820
important to get static analysis into

00:28:18,970 --> 00:28:26,919
the ecosystem there's fun which I never

00:28:24,820 --> 00:28:29,350
used because it requires extensions and

00:28:26,919 --> 00:28:32,289
I'm allergic to extensions I don't

00:28:29,350 --> 00:28:36,279
install extensions in my PHP stuff I try

00:28:32,289 --> 00:28:38,370
to run with the bare minimum and there's

00:28:36,279 --> 00:28:40,470
PHP inspections a

00:28:38,370 --> 00:28:43,800
which is a plugin that install

00:28:40,470 --> 00:28:46,050
installing your IDE and it mostly gives

00:28:43,800 --> 00:28:48,270
you this immediate feedback so you don't

00:28:46,050 --> 00:28:50,700
need to you know push it somewhere or

00:28:48,270 --> 00:28:53,550
run a tool to get the errors you you see

00:28:50,700 --> 00:28:54,990
them highlighted in your ID it finds a

00:28:53,550 --> 00:28:58,520
lot of interesting things about

00:28:54,990 --> 00:29:02,850
performance security issues and so on so

00:28:58,520 --> 00:29:06,030
my tool of choice right now is some it's

00:29:02,850 --> 00:29:08,520
not because of anything specific it's

00:29:06,030 --> 00:29:12,480
just because to my from my point of view

00:29:08,520 --> 00:29:14,580
it is the most advanced one now what do

00:29:12,480 --> 00:29:15,900
these tools do they take your code and

00:29:14,580 --> 00:29:18,929
they basically tell you that it's wrong

00:29:15,900 --> 00:29:20,280
that's all I do right whatever you do if

00:29:18,929 --> 00:29:22,350
you never install one of those you

00:29:20,280 --> 00:29:23,370
install it now you run it it will tell

00:29:22,350 --> 00:29:25,410
you that something is wrong

00:29:23,370 --> 00:29:27,750
it's barely unless you have an empty

00:29:25,410 --> 00:29:29,820
directory you're not gonna have code

00:29:27,750 --> 00:29:30,540
without issues so don't worry that much

00:29:29,820 --> 00:29:34,679
about it

00:29:30,540 --> 00:29:37,890
so what is interesting is that in type

00:29:34,679 --> 00:29:41,340
systems I don't know how many have

00:29:37,890 --> 00:29:43,290
studied some type theory but type theory

00:29:41,340 --> 00:29:45,960
is not about verifying that a program is

00:29:43,290 --> 00:29:47,850
correct it's very hard to do that

00:29:45,960 --> 00:29:50,190
because there's there are problems like

00:29:47,850 --> 00:29:52,320
determination problem the halting

00:29:50,190 --> 00:29:54,179
problem in which you basically cannot

00:29:52,320 --> 00:29:57,000
demonstrate that the program will stop

00:29:54,179 --> 00:29:59,970
or not so there are mathematical limits

00:29:57,000 --> 00:30:02,640
to what a type system can tell you about

00:29:59,970 --> 00:30:06,059
your program but what the type can tell

00:30:02,640 --> 00:30:08,910
you is that if program is definitely

00:30:06,059 --> 00:30:10,860
wrong so a type can tell you upfront

00:30:08,910 --> 00:30:15,000
look this is wrong it will never work

00:30:10,860 --> 00:30:18,330
and you will get a crash so that's very

00:30:15,000 --> 00:30:20,490
powerful of types so in practice you

00:30:18,330 --> 00:30:22,920
have a set of programs the type check

00:30:20,490 --> 00:30:25,050
and the correct programs are always a

00:30:22,920 --> 00:30:27,210
subset of problems that type check

00:30:25,050 --> 00:30:31,110
whether you then have a type system or

00:30:27,210 --> 00:30:34,980
not that's up to you but a system that

00:30:31,110 --> 00:30:37,620
renders an aien in the UI is wrong right

00:30:34,980 --> 00:30:39,660
if you have n a n rendering UI you know

00:30:37,620 --> 00:30:41,520
that program is not correct and that's

00:30:39,660 --> 00:30:46,320
probably because you mix the apples and

00:30:41,520 --> 00:30:49,320
oranges with a plus operation right so

00:30:46,320 --> 00:30:54,150
to install this thing this thing

00:30:49,320 --> 00:30:57,600
this is a bit small can ever can I

00:30:54,150 --> 00:31:00,200
really see this what is this what what

00:30:57,600 --> 00:31:00,200
is this letter

00:31:00,330 --> 00:31:08,940
okay this is making worse a press ctrl+

00:31:06,060 --> 00:31:11,160
and this happens okay

00:31:08,940 --> 00:31:14,880
don't write your slides in react to that

00:31:11,160 --> 00:31:17,310
idea okay so you composure require it of

00:31:14,880 --> 00:31:19,200
course I prefer using required dev for

00:31:17,310 --> 00:31:21,450
dependencies reason is it integrates

00:31:19,200 --> 00:31:24,390
well with my update approach for

00:31:21,450 --> 00:31:28,230
dependencies people have opinions but I

00:31:24,390 --> 00:31:30,090
prefer it this way so what's on does is

00:31:28,230 --> 00:31:33,030
it takes a bunch of code like this is

00:31:30,090 --> 00:31:35,610
obviously simplified so we have a

00:31:33,030 --> 00:31:38,370
function foo here function foo except

00:31:35,610 --> 00:31:43,190
this string dollar s returns void and

00:31:38,370 --> 00:31:46,200
then inside we have a return bar now an

00:31:43,190 --> 00:31:49,170
experienced programmer will obviously

00:31:46,200 --> 00:31:51,480
say this is now this is also

00:31:49,170 --> 00:31:54,900
what Psalm says so some will say look

00:31:51,480 --> 00:31:56,820
you're returning you're returning

00:31:54,900 --> 00:31:58,770
something but this function has a void

00:31:56,820 --> 00:32:01,260
type declaration so why are you

00:31:58,770 --> 00:32:04,110
returning something but it will also

00:32:01,260 --> 00:32:07,560
look at string are you using string

00:32:04,110 --> 00:32:11,100
dollar s and it will say look you're not

00:32:07,560 --> 00:32:13,200
using that why is it there and it will

00:32:11,100 --> 00:32:15,060
also look at the void and say look you

00:32:13,200 --> 00:32:19,110
have voided declared but the function

00:32:15,060 --> 00:32:20,990
returns something okay and then it will

00:32:19,110 --> 00:32:24,090
complain other other things for example

00:32:20,990 --> 00:32:28,650
the lower a has 5 as a first parameter

00:32:24,090 --> 00:32:31,080
well second key let's say and then you

00:32:28,650 --> 00:32:33,360
called function foo with the number

00:32:31,080 --> 00:32:36,780
instead of a string and here you called

00:32:33,360 --> 00:32:39,060
foo without a parameter even though our

00:32:36,780 --> 00:32:42,420
parameters regard these are very trivial

00:32:39,060 --> 00:32:45,210
issues the PHP system will catch them

00:32:42,420 --> 00:32:46,800
and throw exceptions usually but in

00:32:45,210 --> 00:32:50,310
practice this is stuff that you should

00:32:46,800 --> 00:32:53,370
never need to manually code review this

00:32:50,310 --> 00:32:55,290
is wrong up front that's the idea you

00:32:53,370 --> 00:32:56,700
know is wrong it's never gonna work

00:32:55,290 --> 00:32:58,500
maybe it's gonna work but it's not gonna

00:32:56,700 --> 00:33:01,200
do whatever you expected so it's still

00:32:58,500 --> 00:33:02,730
wrong and that's again because PHP is a

00:33:01,200 --> 00:33:05,040
shitty language it keeps running when

00:33:02,730 --> 00:33:09,059
does four things wrong so shouldn't be

00:33:05,040 --> 00:33:12,660
that way the other thing is once you

00:33:09,059 --> 00:33:14,460
start using these rules and using these

00:33:12,660 --> 00:33:18,419
type checkers you start writing code in

00:33:14,460 --> 00:33:20,870
a completely different way so for

00:33:18,419 --> 00:33:23,580
example what I started doing recently is

00:33:20,870 --> 00:33:26,760
using this song immutable at the top

00:33:23,580 --> 00:33:30,240
here some immutable has been around for

00:33:26,760 --> 00:33:32,640
a month now so it's very recent and now

00:33:30,240 --> 00:33:35,760
you can declare that this class called

00:33:32,640 --> 00:33:38,520
price is immutable and I'm just gonna

00:33:35,760 --> 00:33:41,760
make the price a public property public

00:33:38,520 --> 00:33:43,679
int property and I don't care if it's

00:33:41,760 --> 00:33:45,030
public if it needs a getter or if it's

00:33:43,679 --> 00:33:47,190
private or whatever

00:33:45,030 --> 00:33:50,309
why because I declared it is immutable

00:33:47,190 --> 00:33:52,470
so anything using it that runs troops on

00:33:50,309 --> 00:33:54,870
and tries to write to that property is

00:33:52,470 --> 00:33:57,450
gonna be a violation and you cannot do

00:33:54,870 --> 00:34:00,000
that so it gives you also some freedom

00:33:57,450 --> 00:34:02,370
you can now go back into doing public

00:34:00,000 --> 00:34:06,090
stuff you can do go back into declaring

00:34:02,370 --> 00:34:07,799
just a race and assuming that some key

00:34:06,090 --> 00:34:10,230
in the array must be there because you

00:34:07,799 --> 00:34:12,629
can type check that and the type checker

00:34:10,230 --> 00:34:14,609
can guarantee that an array with a

00:34:12,629 --> 00:34:17,250
certain key will be produced so in that

00:34:14,609 --> 00:34:19,560
specific scenario you don't need to

00:34:17,250 --> 00:34:23,149
invent a new object structure a new

00:34:19,560 --> 00:34:23,149
collection type and stuff like that

00:34:24,050 --> 00:34:28,879
interesting for the code quality

00:34:26,159 --> 00:34:32,669
perspective is that it gives you an

00:34:28,879 --> 00:34:35,639
inference percentage here I call it type

00:34:32,669 --> 00:34:37,710
coverage this is kind of type coverage

00:34:35,639 --> 00:34:39,359
so what it says okay yeah I took three

00:34:37,710 --> 00:34:41,280
point nine seconds which by the way is

00:34:39,359 --> 00:34:44,070
impressive this is about a library that

00:34:41,280 --> 00:34:46,800
is like one megabyte of sources so

00:34:44,070 --> 00:34:48,929
that's a very fast for that amount of

00:34:46,800 --> 00:34:51,359
code at least my from my point of view

00:34:48,929 --> 00:34:53,550
but here it says I inferred ninety-nine

00:34:51,359 --> 00:34:56,909
point seven eight four five percent of

00:34:53,550 --> 00:35:01,890
the types what does that mean that means

00:34:56,909 --> 00:35:04,470
that four point two point two two

00:35:01,890 --> 00:35:08,970
percent right point two to five percent

00:35:04,470 --> 00:35:10,470
of the source we still have scenarios

00:35:08,970 --> 00:35:12,660
where the type checker does not really

00:35:10,470 --> 00:35:15,620
understand fully what is going on in

00:35:12,660 --> 00:35:17,870
your code and he just bailed out

00:35:15,620 --> 00:35:20,390
that's because PHP is very squishy if

00:35:17,870 --> 00:35:21,980
you have an evil statement you have no

00:35:20,390 --> 00:35:23,780
idea what the types of anything are

00:35:21,980 --> 00:35:27,190
gonna be in that context if you have a

00:35:23,780 --> 00:35:29,930
JSON decode what is gonna be this the

00:35:27,190 --> 00:35:32,090
shape of the data structure that you are

00:35:29,930 --> 00:35:34,250
looking at so there is where you need to

00:35:32,090 --> 00:35:37,430
add assertions and verify the type and

00:35:34,250 --> 00:35:40,460
teach the type system about the shape of

00:35:37,430 --> 00:35:42,200
the data that you're looking at the more

00:35:40,460 --> 00:35:44,600
you raise this number the more

00:35:42,200 --> 00:35:46,940
confidence you will have in what the

00:35:44,600 --> 00:35:49,670
type checker is doing for you so if you

00:35:46,940 --> 00:35:52,670
have like an 80% you know that your

00:35:49,670 --> 00:35:54,440
system is doing a lot of 20% of

00:35:52,670 --> 00:35:56,720
your system is basically shipping around

00:35:54,440 --> 00:35:59,540
mixed values and hoping that everything

00:35:56,720 --> 00:36:00,970
works which is basically just wishful

00:35:59,540 --> 00:36:04,070
things in there

00:36:00,970 --> 00:36:06,320
so the other thing is you get immediate

00:36:04,070 --> 00:36:08,300
feedback this is fast this is very close

00:36:06,320 --> 00:36:10,190
to the development cycle I'm writing

00:36:08,300 --> 00:36:12,350
code and getting immediate feedback back

00:36:10,190 --> 00:36:14,560
from it and getting immediate this is

00:36:12,350 --> 00:36:14,560
wrong

00:36:14,990 --> 00:36:19,130
we're all some legacy projects so if you

00:36:17,360 --> 00:36:20,630
got the very legacy project that is like

00:36:19,130 --> 00:36:22,730
one of those nightmare traps with

00:36:20,630 --> 00:36:26,030
hundreds of millions of lines that have

00:36:22,730 --> 00:36:28,610
no sense whatsoever there's this idea of

00:36:26,030 --> 00:36:31,550
using a baseline file works with some

00:36:28,610 --> 00:36:33,620
and now works also with PHP stun so you

00:36:31,550 --> 00:36:35,480
generate the file and this file is a map

00:36:33,620 --> 00:36:37,670
of everything that is a known issue in

00:36:35,480 --> 00:36:39,230
your source and what you can do is you

00:36:37,670 --> 00:36:43,100
can configure a continuous integration

00:36:39,230 --> 00:36:46,910
system to ignore known errors but not

00:36:43,100 --> 00:36:49,130
allow new errors which is very powerful

00:36:46,910 --> 00:36:50,660
so you're saying yeah the old code is

00:36:49,130 --> 00:36:53,240
 but we're not going to touch it but

00:36:50,660 --> 00:36:58,520
anything you write new please follow the

00:36:53,240 --> 00:37:04,640
rules testing now assuming everything in

00:36:58,520 --> 00:37:07,340
here does testing yeah I mean ok the

00:37:04,640 --> 00:37:09,620
tools that I prefer for this are these

00:37:07,340 --> 00:37:12,380
three these punitive we had in PHP spec

00:37:09,620 --> 00:37:15,940
PHP spec not not really necessary I

00:37:12,380 --> 00:37:20,270
think it's mostly a style of writing

00:37:15,940 --> 00:37:22,010
tests is more TDD oriented I never had

00:37:20,270 --> 00:37:24,920
issues with just testing with PHP unit

00:37:22,010 --> 00:37:26,870
and B hat the reason why I need B hat is

00:37:24,920 --> 00:37:29,500
that I still have specifications and I

00:37:26,870 --> 00:37:32,080
want to use those specifications to

00:37:29,500 --> 00:37:35,650
have a declaration of what the system

00:37:32,080 --> 00:37:38,020
does and test against that but phpunit

00:37:35,650 --> 00:37:41,440
is more than sufficient for most TDD

00:37:38,020 --> 00:37:42,970
scenarios - so we are using PHP unit by

00:37:41,440 --> 00:37:47,950
Sebastian Merriman and contributors

00:37:42,970 --> 00:37:50,380
obviously there are others but I'll be

00:37:47,950 --> 00:37:52,540
honest I don't really care there's a lot

00:37:50,380 --> 00:37:55,030
of tools out there if you're gonna use

00:37:52,540 --> 00:37:58,210
something like out on on your test suite

00:37:55,030 --> 00:38:00,010
it may be the coolest thing on earth but

00:37:58,210 --> 00:38:01,870
you're not gonna have anyone actually

00:38:00,010 --> 00:38:04,840
learning how to use it and how to

00:38:01,870 --> 00:38:07,150
integrate it with other tools so before

00:38:04,840 --> 00:38:13,000
using something exotic maybe consider

00:38:07,150 --> 00:38:14,590
starting from this so this is really

00:38:13,000 --> 00:38:18,340
hard to read with this projector by the

00:38:14,590 --> 00:38:20,800
way we have in this case a system under

00:38:18,340 --> 00:38:24,190
test I wrote an example class this is

00:38:20,800 --> 00:38:27,790
class my function my function receives

00:38:24,190 --> 00:38:30,700
an array of numbers and then it will run

00:38:27,790 --> 00:38:32,020
in a loop and say if the number is not

00:38:30,700 --> 00:38:34,720
numbered then I'm gonna throw an

00:38:32,020 --> 00:38:38,590
exception so far so good

00:38:34,720 --> 00:38:42,250
perfectly valid PHP right now I write a

00:38:38,590 --> 00:38:44,170
test and in this test which tests

00:38:42,250 --> 00:38:48,610
nothing it tests just that this will

00:38:44,170 --> 00:38:52,780
throw we create our function and we call

00:38:48,610 --> 00:38:59,020
it with a B and C as parameters will

00:38:52,780 --> 00:39:06,010
this pass the test yes it will pass the

00:38:59,020 --> 00:39:08,200
test will it pass CI we pass all this G

00:39:06,010 --> 00:39:10,900
I pipeline according to rules when we

00:39:08,200 --> 00:39:13,140
define so far tools that mean stalled so

00:39:10,900 --> 00:39:13,140
far

00:39:14,000 --> 00:39:22,130
hopefully not right because this makes

00:39:16,820 --> 00:39:28,760
no sense this part makes no sense we

00:39:22,130 --> 00:39:31,160
said that this is a list of integers so

00:39:28,760 --> 00:39:32,990
why is there a test calling it with a

00:39:31,160 --> 00:39:36,260
list of inter with the list of strings

00:39:32,990 --> 00:39:38,599
this makes no sense no sense and some

00:39:36,260 --> 00:39:40,730
will tell us that it says argument one

00:39:38,599 --> 00:39:44,000
of my function invoke expects a reiki

00:39:40,730 --> 00:39:47,210
int instead we gave it an array with a

00:39:44,000 --> 00:39:50,840
string string and string okay so the

00:39:47,210 --> 00:39:53,480
type checker says no so the good thing

00:39:50,840 --> 00:39:56,060
is if you do testing and this is not a

00:39:53,480 --> 00:39:58,099
testing talk but once you combine it

00:39:56,060 --> 00:40:00,890
with the other static analysis thing you

00:39:58,099 --> 00:40:02,930
can throw away a lot of tests a lot of

00:40:00,890 --> 00:40:05,210
checks a lot of runtime checks a lot of

00:40:02,930 --> 00:40:08,330
tests assertions throw them all away

00:40:05,210 --> 00:40:11,599
rely on the type system more than you

00:40:08,330 --> 00:40:14,540
know just a runtime so effectively yeah

00:40:11,599 --> 00:40:16,190
the code is also not valid by the way

00:40:14,540 --> 00:40:20,359
the system under test is also not valid

00:40:16,190 --> 00:40:25,700
it says you got a contradiction between

00:40:20,359 --> 00:40:28,520
in turay and trying to reconcile type

00:40:25,700 --> 00:40:31,480
int to not end which is not int here

00:40:28,520 --> 00:40:35,510
right it says this doesn't make sense

00:40:31,480 --> 00:40:37,580
effectively so again types are not a

00:40:35,510 --> 00:40:40,040
runtime problem you can know upfront if

00:40:37,580 --> 00:40:42,530
a test or if a system under test is

00:40:40,040 --> 00:40:44,869
wrong I had a very lengthy discussion

00:40:42,530 --> 00:40:46,880
about this with James they come from

00:40:44,869 --> 00:40:48,950
Rove and we she said but marker you

00:40:46,880 --> 00:40:51,530
always say assert everything never trust

00:40:48,950 --> 00:40:53,119
the input and whatever if you have full

00:40:51,530 --> 00:40:55,820
control from a static analysis

00:40:53,119 --> 00:40:58,580
perspective perspective on your system

00:40:55,820 --> 00:41:01,339
you can simply skip these problems and

00:40:58,580 --> 00:41:03,230
say look you're expected to call it with

00:41:01,339 --> 00:41:05,420
an int array you're gonna call it with

00:41:03,230 --> 00:41:07,190
an int array or I'm gonna find out I'm

00:41:05,420 --> 00:41:12,290
gonna find you and I'm gonna kill you

00:41:07,190 --> 00:41:16,280
all right again correct programs are

00:41:12,290 --> 00:41:18,740
already type checked I wrote a tool

00:41:16,280 --> 00:41:20,660
about this spawn from this discussion

00:41:18,740 --> 00:41:22,550
which was basically but marker you

00:41:20,660 --> 00:41:27,080
cannot force people to run static

00:41:22,550 --> 00:41:27,740
analysis unless it or can I so if you

00:41:27,080 --> 00:41:29,780
installed

00:41:27,740 --> 00:41:32,030
if you're a package maintainer and you

00:41:29,780 --> 00:41:34,550
have a library you install this and what

00:41:32,030 --> 00:41:36,530
it will do is when people install your

00:41:34,550 --> 00:41:40,730
package it will run static analysis

00:41:36,530 --> 00:41:43,670
against their code against their code

00:41:40,730 --> 00:41:47,480
and if there is a violation in their

00:41:43,670 --> 00:41:50,210
code where it uses your code it will

00:41:47,480 --> 00:41:53,869
fail the installation composer install

00:41:50,210 --> 00:41:59,270
will simply say no which works I really

00:41:53,869 --> 00:42:01,100
like that then comes quality of tests

00:41:59,270 --> 00:42:04,580
and by the way I'm really really going

00:42:01,100 --> 00:42:08,180
slower here so are we testing well

00:42:04,580 --> 00:42:10,340
enough now we have my filter here my

00:42:08,180 --> 00:42:13,910
filter is a function that receives an

00:42:10,340 --> 00:42:15,619
integer list sorry an integer array we

00:42:13,910 --> 00:42:17,840
don't really care about what kind of

00:42:15,619 --> 00:42:19,790
array comes in and it returns a list of

00:42:17,840 --> 00:42:20,810
integers carefully a list of integers is

00:42:19,790 --> 00:42:22,970
something very specific

00:42:20,810 --> 00:42:26,119
it means it's a packed array so there

00:42:22,970 --> 00:42:29,300
are no gaps in it if you have ever a

00:42:26,119 --> 00:42:31,130
JSON encode and you skipped a key

00:42:29,300 --> 00:42:32,960
somewhere in an integer based array you

00:42:31,130 --> 00:42:36,950
know that it comes back as an object and

00:42:32,960 --> 00:42:38,990
you lost there so effectively we're

00:42:36,950 --> 00:42:40,850
gonna do an array values over a filter

00:42:38,990 --> 00:42:44,480
and we're gonna filter values that are

00:42:40,850 --> 00:42:47,359
smaller or equal to so the value must be

00:42:44,480 --> 00:42:51,680
3 or bigger in order to pass this filter

00:42:47,359 --> 00:42:54,380
function so there is a tool for checking

00:42:51,680 --> 00:42:56,600
this so we run a test first of all my

00:42:54,380 --> 00:42:59,150
task that I wrote says I'm gonna have

00:42:56,600 --> 00:43:02,510
three elements when a filter is 0 3 4 5

00:42:59,150 --> 00:43:04,730
ok I expect 0 to be filtered out but my

00:43:02,510 --> 00:43:06,200
tests simply asserts on the length of

00:43:04,730 --> 00:43:09,470
the array it's not doing anything more

00:43:06,200 --> 00:43:11,960
fancy I've wrote it in a hurry and then

00:43:09,470 --> 00:43:15,710
what I do is I run this thing this is

00:43:11,960 --> 00:43:17,840
called infection infection is a mutation

00:43:15,710 --> 00:43:21,890
testing framework has anybody heard and

00:43:17,840 --> 00:43:26,450
not heard of mutation testing nori ok so

00:43:21,890 --> 00:43:29,800
mutation testing takes your tests runs

00:43:26,450 --> 00:43:33,220
them figures out what code did you run

00:43:29,800 --> 00:43:35,990
then it will modify the code slightly

00:43:33,220 --> 00:43:38,390
run the test again and if the test still

00:43:35,990 --> 00:43:40,330
passes that means your code your test is

00:43:38,390 --> 00:43:43,900
not sufficiently good

00:43:40,330 --> 00:43:47,590
okay let's see an example so as I said I

00:43:43,900 --> 00:43:49,780
had this my filter it filters it does an

00:43:47,590 --> 00:43:51,540
array values of an array filter and it

00:43:49,780 --> 00:43:54,010
filters everything greater than two

00:43:51,540 --> 00:43:56,650
right and then I have a test and this

00:43:54,010 --> 00:43:59,460
test checks that an array of length

00:43:56,650 --> 00:44:03,310
three is produced when I filter 0 3 4 5

00:43:59,460 --> 00:44:07,140
okay so when I run this infection will

00:44:03,310 --> 00:44:10,930
report something like this it says I

00:44:07,140 --> 00:44:14,050
produced two mutants that were not

00:44:10,930 --> 00:44:16,690
detected so I mutated the code twice and

00:44:14,050 --> 00:44:18,850
I still managed to pass the test so

00:44:16,690 --> 00:44:21,700
something in your code is not tested

00:44:18,850 --> 00:44:25,510
well enough and if we look at the report

00:44:21,700 --> 00:44:28,300
of it it will tell us what it changed so

00:44:25,510 --> 00:44:30,490
it changed the code so for example one

00:44:28,300 --> 00:44:33,670
of the mutants says I change these great

00:44:30,490 --> 00:44:36,760
they're two greater equal and the code

00:44:33,670 --> 00:44:39,400
still worked so you did not test the

00:44:36,760 --> 00:44:43,480
limit scenario on this comparison

00:44:39,400 --> 00:44:44,980
expression and then it will test it will

00:44:43,480 --> 00:44:48,280
in this case it does something very

00:44:44,980 --> 00:44:50,350
fishy you see this array filter I

00:44:48,280 --> 00:44:52,570
removed it sorry I remove the array

00:44:50,350 --> 00:44:55,630
values and I only left array filter

00:44:52,570 --> 00:44:59,260
there okay so we're not every valuing

00:44:55,630 --> 00:45:04,380
the entire structure anymore and the

00:44:59,260 --> 00:45:09,400
tests still passed now interestingly

00:45:04,380 --> 00:45:11,140
will this type check with a new code

00:45:09,400 --> 00:45:19,480
without the array values will this type

00:45:11,140 --> 00:45:22,320
check I told you before our code uses

00:45:19,480 --> 00:45:26,050
list here

00:45:22,320 --> 00:45:28,330
okay so careful there it will not type

00:45:26,050 --> 00:45:32,100
check because now since we're no longer

00:45:28,330 --> 00:45:35,470
doing array values then it means that

00:45:32,100 --> 00:45:38,440
there may be gaps in our array in the

00:45:35,470 --> 00:45:40,540
keys so this is a limit of mutation

00:45:38,440 --> 00:45:43,060
testing right now so it's very powerful

00:45:40,540 --> 00:45:44,800
to see what your tests are useful or not

00:45:43,060 --> 00:45:47,290
and whether you're testing well enough

00:45:44,800 --> 00:45:49,690
but you on the other end it kind of

00:45:47,290 --> 00:45:52,120
conflicts with static analysis at the

00:45:49,690 --> 00:45:53,710
moment because this mutation is valid

00:45:52,120 --> 00:45:54,509
but we should never have to write a test

00:45:53,710 --> 00:45:57,039
for the

00:45:54,509 --> 00:46:00,670
because my static analysis guarantees

00:45:57,039 --> 00:46:02,319
that at least comes out right so this

00:46:00,670 --> 00:46:04,210
mutation is not valid but we're not

00:46:02,319 --> 00:46:07,990
running static analysis on the mutations

00:46:04,210 --> 00:46:10,299
and that's wishful thinking so hopefully

00:46:07,990 --> 00:46:11,950
at some point in the future we will have

00:46:10,299 --> 00:46:14,170
a combination of static analysis and

00:46:11,950 --> 00:46:16,990
mutation testing where the static

00:46:14,170 --> 00:46:18,849
analysis knows that the mutant is not

00:46:16,990 --> 00:46:22,960
valid because it does no longer respect

00:46:18,849 --> 00:46:25,269
the types of the system so now that

00:46:22,960 --> 00:46:27,670
we've done all of this now finally comes

00:46:25,269 --> 00:46:30,220
code style code style is not that

00:46:27,670 --> 00:46:32,829
important it's kind of secondary what I

00:46:30,220 --> 00:46:34,930
like to say is pick a base a good base

00:46:32,829 --> 00:46:37,539
for now is PS r12 it came out a couple

00:46:34,930 --> 00:46:40,240
months ago but you can pick whatever you

00:46:37,539 --> 00:46:42,069
like the point is pick something because

00:46:40,240 --> 00:46:44,259
it makes code easier to write and read

00:46:42,069 --> 00:46:46,150
for everyone in the company because it

00:46:44,259 --> 00:46:47,619
looks all the same and not oh yeah this

00:46:46,150 --> 00:46:49,390
is Marcos code and this is this other

00:46:47,619 --> 00:46:51,339
guy's code and you know exactly who

00:46:49,390 --> 00:46:53,230
wrote the code before even you know

00:46:51,339 --> 00:46:55,079
actually reading you just look from far

00:46:53,230 --> 00:46:57,220
and you see exactly who wrote the code

00:46:55,079 --> 00:47:00,519
there is more to it though

00:46:57,220 --> 00:47:02,529
I think coding style for basics is cool

00:47:00,519 --> 00:47:05,319
but you can use a strict coding style

00:47:02,529 --> 00:47:08,049
now there are multiple libraries for

00:47:05,319 --> 00:47:10,450
this but we wrote in doctrine we wrote

00:47:08,049 --> 00:47:12,400
doctrine coding standard doctoring

00:47:10,450 --> 00:47:15,250
coding standard is a strict coding

00:47:12,400 --> 00:47:17,680
standard the idea is that as I told you

00:47:15,250 --> 00:47:20,410
PHP allows you to do way too many things

00:47:17,680 --> 00:47:22,420
in way too many different ways let's get

00:47:20,410 --> 00:47:24,730
rid of some let's write in a stricter

00:47:22,420 --> 00:47:26,890
way so the talk that I did that

00:47:24,730 --> 00:47:29,170
extremely defensive PHP we took it and

00:47:26,890 --> 00:47:29,529
we put it in a coding style it's that

00:47:29,170 --> 00:47:32,140
easy

00:47:29,529 --> 00:47:33,759
now it's a tool I don't need to repeat

00:47:32,140 --> 00:47:36,369
the talk you just install the tool it

00:47:33,759 --> 00:47:39,670
tells you why we're doing things so for

00:47:36,369 --> 00:47:42,730
example here we have lay starting

00:47:39,670 --> 00:47:46,029
binding on a constant we say static a

00:47:42,730 --> 00:47:48,549
and what the tool says is look you can't

00:47:46,029 --> 00:47:51,220
do that late that the binding is

00:47:48,549 --> 00:47:53,829
disabled for constant because the

00:47:51,220 --> 00:47:56,289
constant is not in and a thing you

00:47:53,829 --> 00:47:57,880
should override it's confusing from a

00:47:56,289 --> 00:48:00,430
developer point of view it's not an API

00:47:57,880 --> 00:48:02,440
use an interface with a getter on the

00:48:00,430 --> 00:48:05,380
interface and implement it in a

00:48:02,440 --> 00:48:07,630
hierarchy instead it will do things like

00:48:05,380 --> 00:48:10,210
disabling double assignments

00:48:07,630 --> 00:48:12,430
so here maybe you meant to create two

00:48:10,210 --> 00:48:15,580
days time instances an assignment depth

00:48:12,430 --> 00:48:17,260
separate variables but then you happen

00:48:15,580 --> 00:48:22,300
to have two variables referencing the

00:48:17,260 --> 00:48:24,970
same object this is 99% debug simply

00:48:22,300 --> 00:48:27,130
disallow it you don't need it is sort of

00:48:24,970 --> 00:48:29,080
feature in the language just write a new

00:48:27,130 --> 00:48:32,740
line with an assignment and then you

00:48:29,080 --> 00:48:34,120
know what you did and it will also do

00:48:32,740 --> 00:48:36,820
other things that are a bit more fancy

00:48:34,120 --> 00:48:38,920
for example here we have a conditional

00:48:36,820 --> 00:48:40,810
that is the typical conditional of

00:48:38,920 --> 00:48:44,110
somebody to wrote code in a haste and

00:48:40,810 --> 00:48:46,060
did not refactor anything and you see

00:48:44,110 --> 00:48:49,930
that that is pretty much redundant it

00:48:46,060 --> 00:48:54,490
will simply smash it together and just

00:48:49,930 --> 00:48:56,770
keep the expression it will also disable

00:48:54,490 --> 00:49:00,160
some abominations of the language that

00:48:56,770 --> 00:49:03,040
are absolutely outrageous so for example

00:49:00,160 --> 00:49:07,300
the extract function if you don't know

00:49:03,040 --> 00:49:09,670
what it does that's probably better the

00:49:07,300 --> 00:49:11,350
idea is that you have an array and it

00:49:09,670 --> 00:49:13,090
will produce variables in the current

00:49:11,350 --> 00:49:16,210
scope based on the keys of those bearer

00:49:13,090 --> 00:49:18,250
of that array and that's horrible that's

00:49:16,210 --> 00:49:20,770
absolutely impossible to track and

00:49:18,250 --> 00:49:23,110
compact it is the opposite compact got

00:49:20,770 --> 00:49:25,960
some traction with liable lately don't

00:49:23,110 --> 00:49:27,430
use that don't do that compact will take

00:49:25,960 --> 00:49:29,620
foo and bar and producing array with

00:49:27,430 --> 00:49:31,600
keys foo and bar based on the variables

00:49:29,620 --> 00:49:36,250
in the current scope absolutely

00:49:31,600 --> 00:49:39,310
ridiculous construct don't do that you

00:49:36,250 --> 00:49:40,840
get therefore a simpler language from

00:49:39,310 --> 00:49:42,910
the simple language you also get some

00:49:40,840 --> 00:49:46,740
performance benefits and the static

00:49:42,910 --> 00:49:50,380
analysis tools will also benefit from it

00:49:46,740 --> 00:49:52,300
for performance there's PHP bunch not

00:49:50,380 --> 00:49:54,130
much to say about it but if you have

00:49:52,300 --> 00:49:57,520
code that is very performance sensitive

00:49:54,130 --> 00:49:59,470
you can run this on your code so in my

00:49:57,520 --> 00:50:02,620
case this is a random proxy manager and

00:49:59,470 --> 00:50:05,500
what I do is I verify that certain calls

00:50:02,620 --> 00:50:07,840
stay within certain thresholds you can

00:50:05,500 --> 00:50:10,180
run reports so you can do fancy graphs

00:50:07,840 --> 00:50:11,710
and you can you know dump it into

00:50:10,180 --> 00:50:13,870
database and do whatever you want with

00:50:11,710 --> 00:50:16,510
the reports for me it is important to

00:50:13,870 --> 00:50:18,430
show that my library is not adding too

00:50:16,510 --> 00:50:19,720
much overhead to the language for

00:50:18,430 --> 00:50:22,510
example

00:50:19,720 --> 00:50:26,140
speaking of performance you should have

00:50:22,510 --> 00:50:27,640
a monitoring a PM system so yes this is

00:50:26,140 --> 00:50:30,099
all nice and shiny on your local

00:50:27,640 --> 00:50:32,170
computer but once it hits the fan when a

00:50:30,099 --> 00:50:34,270
 hits the fan in production you

00:50:32,170 --> 00:50:36,579
really want to know what and why it's

00:50:34,270 --> 00:50:39,010
low and there's a few tools so for

00:50:36,579 --> 00:50:40,809
example there's data dog out here if you

00:50:39,010 --> 00:50:41,170
want to go check them out that's a good

00:50:40,809 --> 00:50:44,049
idea

00:50:41,170 --> 00:50:46,839
if you've never seen an APM but there's

00:50:44,049 --> 00:50:48,910
tide waves which is PHP specific written

00:50:46,839 --> 00:50:50,950
by one of the doctrine people that is

00:50:48,910 --> 00:50:53,859
now mostly doing that when you mail a

00:50:50,950 --> 00:50:56,079
valet there's sentry sentry will tell

00:50:53,859 --> 00:50:58,359
you what went wrong in your application

00:50:56,079 --> 00:51:00,160
producing I stack trace so that people

00:50:58,359 --> 00:51:01,630
don't have to open a debugger and try to

00:51:00,160 --> 00:51:03,940
figure figure out what happened in

00:51:01,630 --> 00:51:05,349
production you just get a nice report

00:51:03,940 --> 00:51:07,660
with a stack trace in everything and

00:51:05,349 --> 00:51:11,020
there's tools like instant and data dog

00:51:07,660 --> 00:51:13,030
they will even tell you that a database

00:51:11,020 --> 00:51:14,710
query in this system led to a failure in

00:51:13,030 --> 00:51:16,119
this system that led the failure in this

00:51:14,710 --> 00:51:18,460
system that ladder failure in this

00:51:16,119 --> 00:51:20,770
system that led to 500 error here and

00:51:18,460 --> 00:51:23,200
they do that by linking together they

00:51:20,770 --> 00:51:25,869
request through systems through a thing

00:51:23,200 --> 00:51:27,880
called open tracing so everything gets

00:51:25,869 --> 00:51:31,660
kind of like every socket you open gets

00:51:27,880 --> 00:51:33,789
attached a trace kind of so now you got

00:51:31,660 --> 00:51:35,559
it stable you got it performant you got

00:51:33,789 --> 00:51:38,859
it tested and everything you want it

00:51:35,559 --> 00:51:41,079
stable to make it stable if you have an

00:51:38,859 --> 00:51:43,240
API specification you should test

00:51:41,079 --> 00:51:44,890
against that don't just write the

00:51:43,240 --> 00:51:46,599
documentation and hope that the

00:51:44,890 --> 00:51:49,210
documentation is what your system does

00:51:46,599 --> 00:51:51,339
but write the documentation in a way

00:51:49,210 --> 00:51:53,170
that you can use it as either part of

00:51:51,339 --> 00:51:55,510
your tests or you can test directly

00:51:53,170 --> 00:51:58,480
against the documentation so an API

00:51:55,510 --> 00:52:00,880
specifically the specification of algae

00:51:58,480 --> 00:52:04,869
that I had very good success with these

00:52:00,880 --> 00:52:07,539
let's Neve open API IPS r7 validator so

00:52:04,869 --> 00:52:09,069
what it did is intercepted all requests

00:52:07,539 --> 00:52:11,440
and responses going back and forth from

00:52:09,069 --> 00:52:13,480
my testing environment and it will

00:52:11,440 --> 00:52:16,000
validate against what we documented in

00:52:13,480 --> 00:52:18,819
open API on a system where documentation

00:52:16,000 --> 00:52:20,980
could not be generated you want to

00:52:18,819 --> 00:52:22,900
prevent BC breaks this is more for

00:52:20,980 --> 00:52:25,329
package developers so if you have a

00:52:22,900 --> 00:52:27,220
package that you release you can use

00:52:25,329 --> 00:52:29,740
this Rove backward compatibility check

00:52:27,220 --> 00:52:31,779
and this will tell you basically no you

00:52:29,740 --> 00:52:33,790
can't do that unless you raise the major

00:52:31,779 --> 00:52:37,420
version and it will figure it

00:52:33,790 --> 00:52:41,410
for the grand majority of changes in

00:52:37,420 --> 00:52:44,020
your API so in this case you run it you

00:52:41,410 --> 00:52:47,380
say I want to check from version 262 to

00:52:44,020 --> 00:52:49,120
master tell me if there are bc breaks so

00:52:47,380 --> 00:52:51,010
you can put it in your CI and it will

00:52:49,120 --> 00:52:53,740
tell you look I removed this function

00:52:51,010 --> 00:52:56,050
and here it will say look the parameter

00:52:53,740 --> 00:52:59,500
Association mapping of this function

00:52:56,050 --> 00:53:02,500
change from array to a no controversy

00:52:59,500 --> 00:53:04,630
and Association metadata how does what

00:53:02,500 --> 00:53:06,700
that means is out of scope for the talk

00:53:04,630 --> 00:53:08,800
but it's basically telling you look you

00:53:06,700 --> 00:53:12,580
change the type declaration for that

00:53:08,800 --> 00:53:15,730
parameter and that's a bishopric now you

00:53:12,580 --> 00:53:17,410
got this table keep it updated you

00:53:15,730 --> 00:53:18,730
cannot update your system if you don't

00:53:17,410 --> 00:53:22,330
know if you're gonna break it

00:53:18,730 --> 00:53:23,370
so please first do the other things then

00:53:22,330 --> 00:53:26,320
work on updates

00:53:23,370 --> 00:53:29,170
there's dependable I love the Panda bot

00:53:26,320 --> 00:53:33,760
even though it's puns my inbox the Panda

00:53:29,170 --> 00:53:35,580
box works on github and basically every

00:53:33,760 --> 00:53:38,380
Monday I got something like 50 emails

00:53:35,580 --> 00:53:40,030
about here's things that I updated and

00:53:38,380 --> 00:53:41,680
it's usually about Symphony because

00:53:40,030 --> 00:53:43,510
Symphony can't manage to do one release

00:53:41,680 --> 00:53:46,320
only when it's needed but it needs to

00:53:43,510 --> 00:53:48,600
release all the packages all the time I

00:53:46,320 --> 00:53:51,310
find it annoying but whatever so

00:53:48,600 --> 00:53:53,470
effectively I update all the packages

00:53:51,310 --> 00:53:56,830
regularly and this way I know exactly

00:53:53,470 --> 00:53:59,770
which package broke what in my system

00:53:56,830 --> 00:54:02,590
and it is very powerful because I can

00:53:59,770 --> 00:54:05,230
help other maintainer x' understand

00:54:02,590 --> 00:54:07,510
whether their system broke because of

00:54:05,230 --> 00:54:10,450
what they changed in a minor release or

00:54:07,510 --> 00:54:12,820
something that there's security

00:54:10,450 --> 00:54:15,550
advisories security advisories is a

00:54:12,820 --> 00:54:18,210
single composer Jason it's a project you

00:54:15,550 --> 00:54:21,610
require and it will prevent it from

00:54:18,210 --> 00:54:25,690
updating two dependencies that have

00:54:21,610 --> 00:54:29,590
known security issues that's it there's

00:54:25,690 --> 00:54:31,390
no API nor CLE you just require it you

00:54:29,590 --> 00:54:34,780
can no longer install stuff that is

00:54:31,390 --> 00:54:36,220
affected by security advisories and then

00:54:34,780 --> 00:54:40,630
there's two tools that I also helped

00:54:36,220 --> 00:54:43,300
developing one is Matias gloves composer

00:54:40,630 --> 00:54:45,270
required checker this will tell you if

00:54:43,300 --> 00:54:48,300
you have code

00:54:45,270 --> 00:54:51,240
that depends on stuff that is not

00:54:48,300 --> 00:54:53,580
declared in your composure Jason so what

00:54:51,240 --> 00:54:55,800
can happen is very dangerous you have a

00:54:53,580 --> 00:54:58,680
dependency that is installed by accident

00:54:55,800 --> 00:54:59,910
you're relying on it but then you forget

00:54:58,680 --> 00:55:02,280
about it

00:54:59,910 --> 00:55:04,710
and during an update that dependency

00:55:02,280 --> 00:55:07,260
disappears and your local code no longer

00:55:04,710 --> 00:55:10,080
works right so it should be in your

00:55:07,260 --> 00:55:12,090
composer Jason there's the opposite

00:55:10,080 --> 00:55:13,350
composer unused it will figure out that

00:55:12,090 --> 00:55:17,130
you have dependencies that you're not

00:55:13,350 --> 00:55:22,050
using it will do the same right so I

00:55:17,130 --> 00:55:22,560
spoke a lot so interesting reference

00:55:22,050 --> 00:55:24,750
table

00:55:22,560 --> 00:55:28,410
these are advices of tools that you can

00:55:24,750 --> 00:55:31,680
import in your projects install the idea

00:55:28,410 --> 00:55:33,360
is that you automate tasks keep in mind

00:55:31,680 --> 00:55:35,070
that automating tasks does not mean that

00:55:33,360 --> 00:55:36,840
the work goes away because these tools

00:55:35,070 --> 00:55:38,940
are tools they're written by human they

00:55:36,840 --> 00:55:42,210
will fail and when they don't do what

00:55:38,940 --> 00:55:44,580
you want you will hate them and you may

00:55:42,210 --> 00:55:46,290
waste more time than what you saved in

00:55:44,580 --> 00:55:47,880
implementing them so always keep this

00:55:46,290 --> 00:55:49,230
reference table how many times a day am

00:55:47,880 --> 00:55:52,380
i doing something how much does it take

00:55:49,230 --> 00:55:55,350
and is it worth automating for tools

00:55:52,380 --> 00:55:59,300
that already exists that's fine install

00:55:55,350 --> 00:56:02,940
them give them a try I also redefined

00:55:59,300 --> 00:56:04,920
the kind of dependency the requirements

00:56:02,940 --> 00:56:08,730
pyramid of your project first of all

00:56:04,920 --> 00:56:12,750
make it work then make it nice then make

00:56:08,730 --> 00:56:15,840
it fast then keep it stable and finally

00:56:12,750 --> 00:56:17,280
keep it updated I think this is kind of

00:56:15,840 --> 00:56:20,160
what the system should do you start from

00:56:17,280 --> 00:56:25,109
below and work your way up in the

00:56:20,160 --> 00:56:27,090
pyramid and I think when you want to

00:56:25,109 --> 00:56:29,400
look at it in more detail in steps that

00:56:27,090 --> 00:56:30,540
you want to do is first of all you need

00:56:29,400 --> 00:56:32,400
to have requirements and these

00:56:30,540 --> 00:56:33,900
requirements need to be agreed upon by

00:56:32,400 --> 00:56:35,369
the team if you don't agree on

00:56:33,900 --> 00:56:38,190
requirements you already have a bug

00:56:35,369 --> 00:56:41,310
there it's called people that's the bug

00:56:38,190 --> 00:56:42,840
you Hoffler once you got that you need

00:56:41,310 --> 00:56:46,670
an architecture if you don't have an

00:56:42,840 --> 00:56:46,670
architecture you basically got WordPress

00:56:48,320 --> 00:56:53,030
after that you keep static analysis

00:56:51,380 --> 00:56:54,800
static analysis ensures that your

00:56:53,030 --> 00:56:57,380
architecture is kept in place and it

00:56:54,800 --> 00:56:59,570
makes sense with the static analysis you

00:56:57,380 --> 00:57:02,900
can then go on and implement tests and

00:56:59,570 --> 00:57:05,390
verify the quality of your tests once

00:57:02,900 --> 00:57:07,790
you've got a system that is tested you

00:57:05,390 --> 00:57:10,280
can use stability if you need stability

00:57:07,790 --> 00:57:12,170
if your system is not used only by you

00:57:10,280 --> 00:57:15,080
but also by others you need to guarantee

00:57:12,170 --> 00:57:17,660
the stability once you've got stability

00:57:15,080 --> 00:57:19,580
you can automate updates which basically

00:57:17,660 --> 00:57:21,230
means daily compose your update that's

00:57:19,580 --> 00:57:23,360
really all you need to do you do a daily

00:57:21,230 --> 00:57:25,220
composer update if you got stability and

00:57:23,360 --> 00:57:25,550
you got tests you can do that all the

00:57:25,220 --> 00:57:29,000
time

00:57:25,550 --> 00:57:31,220
you can run on PHP trunk you don't even

00:57:29,000 --> 00:57:35,660
need to wait for releases as long as you

00:57:31,220 --> 00:57:37,540
test stuff and then code style code

00:57:35,660 --> 00:57:40,090
style is not that important as you see

00:57:37,540 --> 00:57:43,010
it's really at the end of the pyramid

00:57:40,090 --> 00:57:44,510
okay so there's a lot of stuff

00:57:43,010 --> 00:57:46,310
in-between and what I usually see is

00:57:44,510 --> 00:57:49,550
people put in code style down here and

00:57:46,310 --> 00:57:54,860
then working everything up and it's a

00:57:49,550 --> 00:57:57,500
nightmare important to say PHP is no

00:57:54,860 --> 00:57:59,270
longer an interpreted language we always

00:57:57,500 --> 00:58:01,670
go through the docker build process we

00:57:59,270 --> 00:58:03,770
always go through the CI process make a

00:58:01,670 --> 00:58:05,960
package upload it somewhere through a

00:58:03,770 --> 00:58:07,940
deployment of some way we no longer log

00:58:05,960 --> 00:58:09,710
into a server change a couple lines and

00:58:07,940 --> 00:58:10,220
see what happens that's not what we do

00:58:09,710 --> 00:58:14,360
anymore

00:58:10,220 --> 00:58:16,730
okay so these tools take time try to

00:58:14,360 --> 00:58:18,710
make them fast but it is ok to have a

00:58:16,730 --> 00:58:20,210
build time at this point and even if it

00:58:18,710 --> 00:58:22,910
looks like a different language at the

00:58:20,210 --> 00:58:26,420
end of the day is still much safer to

00:58:22,910 --> 00:58:28,820
work this way ok thank you very much I

00:58:26,420 --> 00:58:30,470
am really sorry I don't have much time

00:58:28,820 --> 00:58:32,840
for questions and I'm also holding you

00:58:30,470 --> 00:58:35,840
off for lunch but feel free to come over

00:58:32,840 --> 00:58:37,770
here and ask any question if you want to

00:58:35,840 --> 00:58:39,080
delay your lunch thank you very much

00:58:37,770 --> 00:58:50,390
[Applause]

00:58:39,080 --> 00:58:53,480
[Music]

00:58:50,390 --> 00:58:53,480
[Applause]

00:58:55,130 --> 00:59:00,909

YouTube URL: https://www.youtube.com/watch?v=8rdTSYljts4


