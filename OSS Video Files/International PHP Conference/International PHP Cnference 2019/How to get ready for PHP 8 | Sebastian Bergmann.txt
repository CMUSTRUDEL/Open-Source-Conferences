Title: How to get ready for PHP 8 | Sebastian Bergmann
Publication date: 2019-11-25
Playlist: International PHP Cnference 2019
Description: 
	Currently, the PHP project actively supports PHP 7.2 and PHP 7.3. The security support for PHP 7.1 ends in December 2019. Now is the time to prepare for this year’s PHP 7.4 and plan for next year’s PHP 8. Attendees of this presentation will learn everything they need to know about PHP 7.4 and how to keep up with PHP’s development so that they will not be surprised, at least not in a bad way, when PHP 7.4 and PHP 8 come out.

Speaker: Sebastian Bergmann (thePHP.cc) | https://phpconference.com/speaker/sebastian-bergmann/

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,000 --> 00:00:04,670
[Music]

00:00:05,569 --> 00:00:15,509
hello and welcome to how to get ready

00:00:08,820 --> 00:00:18,690
for PHP 8 I'm Sebastian and PHP is

00:00:15,509 --> 00:00:22,619
turning 25 next year which means that

00:00:18,690 --> 00:00:24,960
I'm using PHP now as a developer for

00:00:22,619 --> 00:00:28,500
something like 22 and a half years or

00:00:24,960 --> 00:00:31,140
something like that and twenty years ago

00:00:28,500 --> 00:00:33,090
I started to work on contribute to PHP

00:00:31,140 --> 00:00:35,850
in the form of bug fixes and

00:00:33,090 --> 00:00:38,489
documentation and things like that and

00:00:35,850 --> 00:00:42,050
19 years ago started to work on PHP unit

00:00:38,489 --> 00:00:45,090
and when I'm not working on open source

00:00:42,050 --> 00:00:48,149
which I still like to do and I spend as

00:00:45,090 --> 00:00:52,050
much of my spare time on that as I

00:00:48,149 --> 00:00:55,920
possibly can when I'm not doing that

00:00:52,050 --> 00:01:00,059
most recently I'm trying to explain to

00:00:55,920 --> 00:01:01,920
European politicians and administrative

00:01:00,059 --> 00:01:03,989
people and people working for the

00:01:01,920 --> 00:01:07,680
European Community Commission what

00:01:03,989 --> 00:01:10,080
open-source really is about and when I'm

00:01:07,680 --> 00:01:12,750
not doing that I actually have to make a

00:01:10,080 --> 00:01:15,030
living and I do that through consulting

00:01:12,750 --> 00:01:17,400
coaching and training have PHP teams

00:01:15,030 --> 00:01:21,000
build better software for that I

00:01:17,400 --> 00:01:22,979
co-founded a PHP consulting company 10

00:01:21,000 --> 00:01:27,090
years ago never anniversary this year

00:01:22,979 --> 00:01:30,329
and I'm not going into more sales pitchy

00:01:27,090 --> 00:01:32,840
stuff than that we have a website as of

00:01:30,329 --> 00:01:34,409
last week and we even have a new website

00:01:32,840 --> 00:01:36,630
have fun

00:01:34,409 --> 00:01:38,939
look it up and find out who that person

00:01:36,630 --> 00:01:46,939
is standing at the front babbling about

00:01:38,939 --> 00:01:46,939
PHP 8 so in case you did not know

00:01:47,030 --> 00:01:53,520
today is October 23rd 2019 if you did

00:01:52,560 --> 00:01:55,350
not know that already

00:01:53,520 --> 00:02:01,229
congratulations you have already learned

00:01:55,350 --> 00:02:04,619
something try to be funny I'm a German

00:02:01,229 --> 00:02:08,670
doesn't always work that way so - what I

00:02:04,619 --> 00:02:10,380
mean by that is today is October 23rd

00:02:08,670 --> 00:02:14,820
00:02:10,380 --> 00:02:19,380
active support for PHP seven one ended

00:02:14,820 --> 00:02:25,200
ten months ago the PHP open-source

00:02:19,380 --> 00:02:27,450
project has two two variants of support

00:02:25,200 --> 00:02:30,170
when the new version comes out there is

00:02:27,450 --> 00:02:35,150
two years of active support for a new

00:02:30,170 --> 00:02:38,540
PHP version active support means all

00:02:35,150 --> 00:02:42,120
problems that we find all bugs all

00:02:38,540 --> 00:02:46,950
security fixes we try to fix at security

00:02:42,120 --> 00:02:50,460
issues we try to fix them active support

00:02:46,950 --> 00:02:53,520
for 57 one ended 10 months ago that

00:02:50,460 --> 00:02:56,820
means at the moment if if if a bug is

00:02:53,520 --> 00:02:59,700
reported for PHP 7 1 it will not be

00:02:56,820 --> 00:03:08,790
fixed unless it is a critical security

00:02:59,700 --> 00:03:12,300
issue security support for PHP 7 1 ends

00:03:08,790 --> 00:03:14,550
at the end of this year that usually

00:03:12,300 --> 00:03:18,090
means that in the first or second week

00:03:14,550 --> 00:03:22,320
of January there will be the final bug

00:03:18,090 --> 00:03:25,170
fix release for PHP 7 1 if and only if

00:03:22,320 --> 00:03:33,450
there is a security issue that needs

00:03:25,170 --> 00:03:38,010
needs fixing active support for PHP 7 2

00:03:33,450 --> 00:03:40,260
ends in two months that means the last

00:03:38,010 --> 00:03:43,130
version with real bug fixes like bug

00:03:40,260 --> 00:03:45,900
fixes that are not related to security

00:03:43,130 --> 00:03:49,170
will be made like in the first or second

00:03:45,900 --> 00:03:51,420
week of January and maybe you are

00:03:49,170 --> 00:03:53,640
beginning to see a pattern sorry to be

00:03:51,420 --> 00:03:55,710
for being repetitive but sometimes this

00:03:53,640 --> 00:03:58,430
needs to be done to actually hammer

00:03:55,710 --> 00:04:02,430
knowledge into the heads of people

00:03:58,430 --> 00:04:08,760
security support for PHP 7 2 ends at the

00:04:02,430 --> 00:04:13,290
end of next year active support for PHP

00:04:08,760 --> 00:04:16,290
7 3 currently the latest and greatest at

00:04:13,290 --> 00:04:19,530
least for five or six more weeks more on

00:04:16,290 --> 00:04:22,820
that in a bit active support for PHP 7 3

00:04:19,530 --> 00:04:26,400
ends at the end of next year

00:04:22,820 --> 00:04:32,670
security support for PHP 73 ends at the

00:04:26,400 --> 00:04:35,910
end of 2021 what I might want what am I

00:04:32,670 --> 00:04:42,330
trying to save is that if you are not on

00:04:35,910 --> 00:04:44,550
PHP 72 or PHP 73 at the moment you have

00:04:42,330 --> 00:04:46,560
a problem or you may have a problem you

00:04:44,550 --> 00:04:50,130
have a problem if it is a hard problem

00:04:46,560 --> 00:04:56,220
for you to upgrade to a version of PHP

00:04:50,130 --> 00:04:59,810
that is currently supported and there

00:04:56,220 --> 00:05:02,790
are always these extreme and exotic play

00:04:59,810 --> 00:05:06,360
examples that I can give because for

00:05:02,790 --> 00:05:09,570
instance we have worked with a customer

00:05:06,360 --> 00:05:13,440
in the United States last year where for

00:05:09,570 --> 00:05:16,110
the last two years most of other

00:05:13,440 --> 00:05:23,010
developers were working on was upgrading

00:05:16,110 --> 00:05:24,900
from PHP 5-2 to PHP 5'4 and that is that

00:05:23,010 --> 00:05:28,710
turned out for them to be a really hard

00:05:24,900 --> 00:05:32,070
problem because surprise if you do not

00:05:28,710 --> 00:05:33,870
update your stack in within ten or

00:05:32,070 --> 00:05:37,020
fifteen years or if you only do that

00:05:33,870 --> 00:05:39,990
every ten or fifteen years then every

00:05:37,020 --> 00:05:41,669
ten or fifteen years you are in a very

00:05:39,990 --> 00:05:44,160
deep hole that you have to dig yourself

00:05:41,669 --> 00:05:46,860
out of whereas if you do this

00:05:44,160 --> 00:05:49,979
continuously and upgrade to the latest

00:05:46,860 --> 00:05:53,580
minor version every year or every one

00:05:49,979 --> 00:05:55,860
and a half years then yes there will be

00:05:53,580 --> 00:05:58,590
a hole that you have to do that you have

00:05:55,860 --> 00:06:03,390
to dig yourself out of but that hole is

00:05:58,590 --> 00:06:05,340
maybe a foot deep and not like a

00:06:03,390 --> 00:06:13,710
kilometer or to the center of the earth

00:06:05,340 --> 00:06:16,669
or whatever so and in case you are in

00:06:13,710 --> 00:06:20,640
doubt about which version of PHP are

00:06:16,669 --> 00:06:24,990
currently supported this is really handy

00:06:20,640 --> 00:06:28,440
website php.net slash supported versions

00:06:24,990 --> 00:06:30,510
dot PHP when you can see which versions

00:06:28,440 --> 00:06:34,080
of PHP are currently supported how long

00:06:30,510 --> 00:06:36,360
are they supported and if you're really

00:06:34,080 --> 00:06:38,699
unlucky you can also get in from

00:06:36,360 --> 00:06:42,270
when the version of PHP that you are

00:06:38,699 --> 00:06:46,590
currently using died right life is too

00:06:42,270 --> 00:06:49,259
short for old software and especially

00:06:46,590 --> 00:06:53,610
for an open-source project such as PHP

00:06:49,259 --> 00:06:56,069
it's really really really hard and let's

00:06:53,610 --> 00:06:57,990
face it it's almost impossible for a

00:06:56,069 --> 00:07:00,990
project that is run by volunteers

00:06:57,990 --> 00:07:04,909
nobody is paid to work on PHP for

00:07:00,990 --> 00:07:08,280
instance it's really hard to maintain

00:07:04,909 --> 00:07:10,169
more than one version we do it the PHP

00:07:08,280 --> 00:07:11,879
project does it it maintains more than

00:07:10,169 --> 00:07:13,949
one version it means maintains two

00:07:11,879 --> 00:07:16,550
versions at the same time and that

00:07:13,949 --> 00:07:22,400
already puts a lot of stress on people

00:07:16,550 --> 00:07:25,680
so sorry we cannot do more than that

00:07:22,400 --> 00:07:27,599
talking about some nicer things for a

00:07:25,680 --> 00:07:29,789
second before we talk about the really

00:07:27,599 --> 00:07:33,419
bad things before we get to the really

00:07:29,789 --> 00:07:36,360
nice things in detail next months will

00:07:33,419 --> 00:07:39,120
see the release of PHP 74 we are

00:07:36,360 --> 00:07:42,589
currently at a stage where we recently

00:07:39,120 --> 00:07:45,569
released probably the second to last

00:07:42,589 --> 00:07:47,460
release candidate it may even be the

00:07:45,569 --> 00:07:49,830
final release credit depending on how

00:07:47,460 --> 00:07:55,080
many problems we find in there but

00:07:49,830 --> 00:07:57,089
usually mid or end November of each year

00:07:55,080 --> 00:08:00,479
is when the new minor version of PHP

00:07:57,089 --> 00:08:03,599
comes out so last year it was 57 3 this

00:08:00,479 --> 00:08:07,710
year it will be 57 for next year will be

00:08:03,599 --> 00:08:10,259
special because next year will be the

00:08:07,710 --> 00:08:15,449
year of PHP h0 at the end of the year

00:08:10,259 --> 00:08:18,839
more on that in a bit so the point that

00:08:15,449 --> 00:08:22,229
I was trying to bring across with all

00:08:18,839 --> 00:08:24,270
these things like next months we will

00:08:22,229 --> 00:08:26,520
see PHP seven four and in two months

00:08:24,270 --> 00:08:28,139
support for that version will end and at

00:08:26,520 --> 00:08:31,500
the end of next year the version support

00:08:28,139 --> 00:08:37,199
for that will end and so on is that ever

00:08:31,500 --> 00:08:41,610
since the release cycle of PHP 5-4 / PG

00:08:37,199 --> 00:08:47,100
55 we have a reliable schedule before

00:08:41,610 --> 00:08:50,110
that it was very wild wild west cowboy

00:08:47,100 --> 00:08:53,560
style release manage

00:08:50,110 --> 00:08:56,829
there was no no way to know for a

00:08:53,560 --> 00:09:01,000
company that builds software using PHP

00:08:56,829 --> 00:09:03,360
or a company such as as such as Red Hat

00:09:01,000 --> 00:09:07,389
packages PHP for the Linux distribution

00:09:03,360 --> 00:09:10,480
to know when a new version of PHP will

00:09:07,389 --> 00:09:13,269
be released because people were working

00:09:10,480 --> 00:09:20,019
on new features were fixing bugs all of

00:09:13,269 --> 00:09:22,000
that happens in CVS head at the time to

00:09:20,019 --> 00:09:23,339
people in the audience that have never

00:09:22,000 --> 00:09:25,300
used CVS

00:09:23,339 --> 00:09:29,439
congratulations count yourself lucky

00:09:25,300 --> 00:09:33,160
you'll miss out on a very frustrating

00:09:29,439 --> 00:09:35,199
piece of technology I remember I was

00:09:33,160 --> 00:09:39,370
really happy when subversion came along

00:09:35,199 --> 00:09:43,480
and I was really happy when I got rid of

00:09:39,370 --> 00:09:45,339
subversion but back in the day people

00:09:43,480 --> 00:09:49,720
were adding new features fixing bugs

00:09:45,339 --> 00:09:52,779
making major changes in CVS Head which

00:09:49,720 --> 00:09:55,350
is more or less equivalent to to master

00:09:52,779 --> 00:09:58,449
branch and git

00:09:55,350 --> 00:10:00,910
but there was no timetable nobody knew

00:09:58,449 --> 00:10:03,009
okay when do we do a feature freeze when

00:10:00,910 --> 00:10:04,839
do we want to release all of that and

00:10:03,009 --> 00:10:06,730
this was frustrating for everybody

00:10:04,839 --> 00:10:09,189
involved was frustrating for the people

00:10:06,730 --> 00:10:15,550
at Red Hat who wanted to package a new

00:10:09,189 --> 00:10:18,310
version of PHP because it happened right

00:10:15,550 --> 00:10:22,149
often that the PHP project would

00:10:18,310 --> 00:10:25,569
eventually release a new version just a

00:10:22,149 --> 00:10:27,040
week or two or a month after Red Hat had

00:10:25,569 --> 00:10:30,870
made a feature freeze for the Linux

00:10:27,040 --> 00:10:34,350
distributions so they missed out on that

00:10:30,870 --> 00:10:37,569
and it took a long time to catch up

00:10:34,350 --> 00:10:40,360
it was also frustrating for everybody

00:10:37,569 --> 00:10:42,069
who contributed to PHP because they

00:10:40,360 --> 00:10:44,410
implemented a new feature or an

00:10:42,069 --> 00:10:45,879
optimization that they really needed

00:10:44,410 --> 00:10:47,699
because otherwise they would not have

00:10:45,879 --> 00:10:51,339
implemented it

00:10:47,699 --> 00:10:54,399
they managed to share it with the world

00:10:51,339 --> 00:10:57,819
sort of by getting it accepted into CVS

00:10:54,399 --> 00:11:00,279
head but they didn't know whether or not

00:10:57,819 --> 00:11:02,380
they would have to wait one month three

00:11:00,279 --> 00:11:05,530
months six months to

00:11:02,380 --> 00:11:08,260
years until this change that they

00:11:05,530 --> 00:11:12,220
contributed would make it into an

00:11:08,260 --> 00:11:15,010
official final release version that is

00:11:12,220 --> 00:11:17,920
no longer the case we changed the way

00:11:15,010 --> 00:11:20,890
the PHP project releases new versions

00:11:17,920 --> 00:11:24,370
while ago like a long while ago by now

00:11:20,890 --> 00:11:27,160
and ever since 5055 there's this steady

00:11:24,370 --> 00:11:34,930
rhythm of every year one minor new

00:11:27,160 --> 00:11:38,440
version and it's very predictable while

00:11:34,930 --> 00:11:43,960
I do not believe that a programming

00:11:38,440 --> 00:11:48,040
language can follow semantic versioning

00:11:43,960 --> 00:11:51,850
in the same strictness as the library or

00:11:48,040 --> 00:11:55,060
a tool can do the PHP project strives

00:11:51,850 --> 00:11:57,550
really hard to follow on the ideas of

00:11:55,060 --> 00:11:59,890
semantic versioning meaning we have

00:11:57,550 --> 00:12:03,160
three-digit version numbers major minor

00:11:59,890 --> 00:12:07,150
bug fix if you are more mathematically

00:12:03,160 --> 00:12:10,120
inclined that would be x y and z if you

00:12:07,150 --> 00:12:13,210
are more into emojis it looks more like

00:12:10,120 --> 00:12:14,860
this yeah oh my god everything is going

00:12:13,210 --> 00:12:16,560
to fail everything is going to break

00:12:14,860 --> 00:12:18,910
that's the major version number

00:12:16,560 --> 00:12:21,400
everything is awesome because I get new

00:12:18,910 --> 00:12:24,000
features and everything keeps working as

00:12:21,400 --> 00:12:27,820
it did before it's the minor version and

00:12:24,000 --> 00:12:30,790
PHP is sick and we need to provide a

00:12:27,820 --> 00:12:35,200
patch to fix it that's bug fixed level

00:12:30,790 --> 00:12:36,760
that's patch level that's the Z so as I

00:12:35,200 --> 00:12:40,270
mentioned a new minor version is raised

00:12:36,760 --> 00:12:42,520
every year in q4 unless there is a new

00:12:40,270 --> 00:12:44,950
major version which will get next year a

00:12:42,520 --> 00:12:48,700
new minor version has two years of

00:12:44,950 --> 00:12:52,720
active support meaning all types of bugs

00:12:48,700 --> 00:12:55,860
will be fixed followed by one year of

00:12:52,720 --> 00:12:55,860
security support

00:12:57,550 --> 00:13:03,700
and every time a new major version is

00:13:00,820 --> 00:13:09,279
released people get really really scared

00:13:03,700 --> 00:13:13,060
oh my god everything is going to break

00:13:09,279 --> 00:13:15,370
how can I deal with this and a lot of

00:13:13,060 --> 00:13:18,880
people unfortunately deal with this by

00:13:15,370 --> 00:13:22,300
not dealing with it by sticking the head

00:13:18,880 --> 00:13:25,600
into the ground and hoping that this new

00:13:22,300 --> 00:13:27,610
version of PHP will not catch on that

00:13:25,600 --> 00:13:29,610
they don't need to think about it that

00:13:27,610 --> 00:13:32,529
everything is fine the way that it is

00:13:29,610 --> 00:13:35,320
until ten years later they realize oh

00:13:32,529 --> 00:13:41,350
it's we are missing out on a lot of

00:13:35,320 --> 00:13:45,519
stuff don't even start looking at things

00:13:41,350 --> 00:13:48,459
related to security or privacy or gdpr

00:13:45,519 --> 00:13:51,399
whatever suddenly we need the latest

00:13:48,459 --> 00:13:54,190
version and then if you skipped one

00:13:51,399 --> 00:13:57,519
major version for instance that's not

00:13:54,190 --> 00:14:00,610
going to be fun so the lesson that

00:13:57,519 --> 00:14:03,910
should be learned from that is upgrading

00:14:00,610 --> 00:14:07,260
the version of PHP you use must not be a

00:14:03,910 --> 00:14:10,089
rare event because if it is a rare event

00:14:07,260 --> 00:14:13,540
if it's something that you only do like

00:14:10,089 --> 00:14:15,930
every 5 or 10 years then that rare event

00:14:13,540 --> 00:14:20,170
is something that you are scared of and

00:14:15,930 --> 00:14:25,020
I've seen it firsthand developers are

00:14:20,170 --> 00:14:29,110
not at their best when they're scared so

00:14:25,020 --> 00:14:33,670
the only remedy to that is to do it

00:14:29,110 --> 00:14:35,620
often do it once a year once every one

00:14:33,670 --> 00:14:40,990
and a half years find a good rhythm

00:14:35,620 --> 00:14:43,829
align your release cycle to the release

00:14:40,990 --> 00:14:46,180
cycle of PHP make sure that you are

00:14:43,829 --> 00:14:48,670
prepared when the new version of PHP

00:14:46,180 --> 00:14:51,850
comes out to upgrade to be able to

00:14:48,670 --> 00:14:54,190
upgrade to it don't get me wrong I'm not

00:14:51,850 --> 00:14:57,880
recommending that on release day you

00:14:54,190 --> 00:15:04,180
will go and install PHP 8000 or this

00:14:57,880 --> 00:15:07,120
year PHP seven-four-zero I mean it's

00:15:04,180 --> 00:15:09,579
well tested by now because as as part of

00:15:07,120 --> 00:15:11,440
the steady release schedule we also

00:15:09,579 --> 00:15:15,010
beefed up the quality assurance

00:15:11,440 --> 00:15:17,200
of the PHP releases so the assumption is

00:15:15,010 --> 00:15:18,790
that seven-four-zero will be stable

00:15:17,200 --> 00:15:22,570
enough to be to be put into production

00:15:18,790 --> 00:15:26,560
immediately but you don't have to but

00:15:22,570 --> 00:15:31,000
you should be prepared to do that at the

00:15:26,560 --> 00:15:33,700
point in time when you want to do it you

00:15:31,000 --> 00:15:36,640
must not think about upgrading your PHP

00:15:33,700 --> 00:15:41,050
stack as a special project it's not

00:15:36,640 --> 00:15:42,670
something that should be a special

00:15:41,050 --> 00:15:45,250
ticket somewhere in you issue tracker

00:15:42,670 --> 00:15:49,840
somewhere is on it but instead it should

00:15:45,250 --> 00:15:51,910
be part of your normal operational

00:15:49,840 --> 00:15:55,060
procedure it should be some people call

00:15:51,910 --> 00:15:57,850
it or some people recently coined the

00:15:55,060 --> 00:16:00,580
term cyber hygiene because everything

00:15:57,850 --> 00:16:05,110
you prefix this cyber becomes suddenly

00:16:00,580 --> 00:16:07,600
really important so we already know for

00:16:05,110 --> 00:16:10,540
centuries that hygiene is important so

00:16:07,600 --> 00:16:14,040
cyber hygiene is important so and that

00:16:10,540 --> 00:16:18,310
means keep your dependencies fresh use

00:16:14,040 --> 00:16:23,140
sane reasonable latest fresh versions

00:16:18,310 --> 00:16:26,970
and don't try to run your business on a

00:16:23,140 --> 00:16:31,590
20 year old version of PHP in 2019 and

00:16:26,970 --> 00:16:31,590
I'm not making it up I've seen that

00:16:32,340 --> 00:16:36,430
already mention that make it part of

00:16:34,570 --> 00:16:38,560
your upper normal operational procedure

00:16:36,430 --> 00:16:41,530
- every once in a while upgrade to

00:16:38,560 --> 00:16:43,260
version of PHP and this is not limited

00:16:41,530 --> 00:16:47,080
to PHP itself

00:16:43,260 --> 00:16:48,850
this means the framework you build your

00:16:47,080 --> 00:16:53,110
application on top of this means the

00:16:48,850 --> 00:16:55,930
dependencies that you that you use make

00:16:53,110 --> 00:16:58,330
it part of your normal development

00:16:55,930 --> 00:17:00,970
process to room in at regular intervals

00:16:58,330 --> 00:17:04,569
look at your dependencies and update

00:17:00,970 --> 00:17:07,870
them this should be a role in the team

00:17:04,569 --> 00:17:09,850
it should not necessarily be like one

00:17:07,870 --> 00:17:12,100
developer is responsible for all the

00:17:09,850 --> 00:17:14,230
version upgrades no that should be a

00:17:12,100 --> 00:17:16,360
rotating role from sprint to sprint

00:17:14,230 --> 00:17:20,069
maybe but somebody needs to be

00:17:16,360 --> 00:17:22,780
responsible to do that and don't mix

00:17:20,069 --> 00:17:24,550
commits to version control that update

00:17:22,780 --> 00:17:25,089
dependencies and composer Jason with

00:17:24,550 --> 00:17:27,189
other

00:17:25,089 --> 00:17:30,789
changes in PHP source code don't do that

00:17:27,189 --> 00:17:34,179
unless API changes then it's okay and

00:17:30,789 --> 00:17:38,250
necessary but just like always don't mix

00:17:34,179 --> 00:17:40,480
different topics in the commit and again

00:17:38,250 --> 00:17:43,090
talking from experience people do that

00:17:40,480 --> 00:17:44,740
and then run into rather interesting

00:17:43,090 --> 00:17:51,360
problems when they want to revert such a

00:17:44,740 --> 00:17:55,779
commit and yeah so there is no need

00:17:51,360 --> 00:17:59,169
fortunately for a crystal ball or some

00:17:55,779 --> 00:18:01,450
other kind of magical device to know

00:17:59,169 --> 00:18:05,640
what the future holds for the next

00:18:01,450 --> 00:18:10,029
version of PHP because it's open source

00:18:05,640 --> 00:18:14,649
at every point in time you can look at

00:18:10,029 --> 00:18:17,980
PHP skit repository and look at the news

00:18:14,649 --> 00:18:22,960
file at the file named news and at the

00:18:17,980 --> 00:18:26,799
file named upgrading to see up-to-date

00:18:22,960 --> 00:18:28,960
information on what you need to know to

00:18:26,799 --> 00:18:34,270
upgrade your existing code to that new

00:18:28,960 --> 00:18:36,190
version of PHP when it comes out why can

00:18:34,270 --> 00:18:39,250
you look at that at every point in time

00:18:36,190 --> 00:18:42,340
because nobody in the PHP project would

00:18:39,250 --> 00:18:45,460
want to write that file which at the

00:18:42,340 --> 00:18:48,990
time when a new release is made which

00:18:45,460 --> 00:18:52,330
represents one year of effort into new

00:18:48,990 --> 00:18:56,590
functionality and optimizations and

00:18:52,330 --> 00:19:00,070
cleanup to write that file from scratch

00:18:56,590 --> 00:19:02,500
on release day or day before release day

00:19:00,070 --> 00:19:06,100
know that file is continuously updated

00:19:02,500 --> 00:19:08,919
every time an important change is made

00:19:06,100 --> 00:19:09,340
so you can just go there look at the

00:19:08,919 --> 00:19:15,070
file

00:19:09,340 --> 00:19:18,279
keep up to date and you do not even need

00:19:15,070 --> 00:19:21,130
to do that because in the perfect world

00:19:18,279 --> 00:19:25,330
in your development environment you work

00:19:21,130 --> 00:19:28,630
with error reporting set to minus one in

00:19:25,330 --> 00:19:30,480
your PHP ini configuration file minus

00:19:28,630 --> 00:19:35,020
one means

00:19:30,480 --> 00:19:37,360
complain about everything that PHP can

00:19:35,020 --> 00:19:41,610
complain about

00:19:37,360 --> 00:19:50,470
this includes warnings notices

00:19:41,610 --> 00:19:54,520
deprecations strict violations etc turn

00:19:50,470 --> 00:19:57,640
it on figure out where your code

00:19:54,520 --> 00:20:00,910
currently would not work with the next

00:19:57,640 --> 00:20:02,920
version of PHP and fix it in most cases

00:20:00,910 --> 00:20:08,080
those fixes can be made within a couple

00:20:02,920 --> 00:20:10,660
of minutes so talking about these

00:20:08,080 --> 00:20:13,030
backward compatibility breaks what are

00:20:10,660 --> 00:20:16,990
the things that you can and should do

00:20:13,030 --> 00:20:21,220
today to be prepared for PHP 7/4 and PHP

00:20:16,990 --> 00:20:24,370
eight most importantly going to show you

00:20:21,220 --> 00:20:27,610
some examples now and most of these

00:20:24,370 --> 00:20:33,130
things have been deprecated for quite

00:20:27,610 --> 00:20:37,480
some time to be fair for some of these

00:20:33,130 --> 00:20:39,640
things we only ever mentioned yeah that

00:20:37,480 --> 00:20:42,670
that's deprecated that some time ago at

00:20:39,640 --> 00:20:45,520
some point in time is going away but we

00:20:42,670 --> 00:20:48,340
never actually deprecated that it in PHP

00:20:45,520 --> 00:20:50,700
code so you never ever got the

00:20:48,340 --> 00:20:54,220
deprecation warning until recently

00:20:50,700 --> 00:20:58,300
whatever recently may mean so for

00:20:54,220 --> 00:21:01,990
instance one of the new features of PHP

00:20:58,300 --> 00:21:05,020
5 when it came out 15 years ago so ever

00:21:01,990 --> 00:21:07,240
remember correctly was that you could

00:21:05,020 --> 00:21:11,110
name the constructor of your class

00:21:07,240 --> 00:21:14,620
underscore underscore construct in PHP 4

00:21:11,110 --> 00:21:18,510
and in PvP 3 the name of your

00:21:14,620 --> 00:21:23,560
constructor was the name of the class

00:21:18,510 --> 00:21:27,310
and we intended people starting with PHP

00:21:23,560 --> 00:21:29,440
5 to only ever going forward use

00:21:27,310 --> 00:21:33,120
underscore underscore construct as the

00:21:29,440 --> 00:21:38,800
name of your constructor method however

00:21:33,120 --> 00:21:41,530
we failed to mark the old way the PHP 4

00:21:38,800 --> 00:21:44,000
style constructors as deprecated when we

00:21:41,530 --> 00:21:47,690
released PHP 5

00:21:44,000 --> 00:21:49,970
and we forgot it or decided not to

00:21:47,690 --> 00:21:53,500
deprecated in five one five two five

00:21:49,970 --> 00:21:56,720
three five four five five five six and

00:21:53,500 --> 00:21:58,430
only in PHP seven zero we finally marked

00:21:56,720 --> 00:22:00,650
it as being deprecated ever since then

00:21:58,430 --> 00:22:02,480
you get a duplication warning but you're

00:22:00,650 --> 00:22:05,300
only going to see it if you configure

00:22:02,480 --> 00:22:06,500
your PHP accordingly to see these

00:22:05,300 --> 00:22:10,220
deprecations warning

00:22:06,500 --> 00:22:12,200
hence my advice from earlier configure

00:22:10,220 --> 00:22:16,160
your development PHP environment in such

00:22:12,200 --> 00:22:18,680
a way that you see all these warnings so

00:22:16,160 --> 00:22:23,330
I really hope nobody has pitched before

00:22:18,680 --> 00:22:25,850
style constructors any more right now

00:22:23,330 --> 00:22:29,870
they still work you get a duplication

00:22:25,850 --> 00:22:32,780
notice yes but it still works in PHP

00:22:29,870 --> 00:22:35,140
eight you will not get the deprecation

00:22:32,780 --> 00:22:38,330
notice anymore

00:22:35,140 --> 00:22:40,910
and it will no longer automatically

00:22:38,330 --> 00:22:43,220
execute this method so your code will

00:22:40,910 --> 00:22:49,160
stop working so now is the time to fix

00:22:43,220 --> 00:22:53,180
that this was also deprecated a while

00:22:49,160 --> 00:22:56,180
ago calling a method that is not

00:22:53,180 --> 00:22:59,990
declared static statically I don't know

00:22:56,180 --> 00:23:04,070
why you would want to do this but it was

00:22:59,990 --> 00:23:08,420
possible and then we figured out it's a

00:23:04,070 --> 00:23:10,220
bad idea to allow this and then we

00:23:08,420 --> 00:23:12,170
documented at some point the fact that

00:23:10,220 --> 00:23:14,030
we think it's a bad idea in code by

00:23:12,170 --> 00:23:21,250
marking it as deprecated and now it's

00:23:14,030 --> 00:23:24,290
going away this is really bizarre

00:23:21,250 --> 00:23:28,810
because the syntax at the top was never

00:23:24,290 --> 00:23:28,810
intended to be there in the first place

00:23:31,060 --> 00:23:38,660
that's more or less an unintentional

00:23:35,360 --> 00:23:43,280
feature of the parser of peach before

00:23:38,660 --> 00:23:46,070
and PHP five and while cleaning up the

00:23:43,280 --> 00:23:52,610
compiler for PHP seven we found that or

00:23:46,070 --> 00:23:54,560
somebody found that and disabilities are

00:23:52,610 --> 00:23:56,519
just two deprecated at the point in time

00:23:54,560 --> 00:24:00,709
and not hard remove it

00:23:56,519 --> 00:24:03,859
because apparently people use that

00:24:00,709 --> 00:24:08,190
nikita wrote this really useful tool

00:24:03,859 --> 00:24:10,379
they you can declare a search expression

00:24:08,190 --> 00:24:15,209
on an abstract syntax tree for a PHP

00:24:10,379 --> 00:24:17,339
program and then fire that up too to get

00:24:15,209 --> 00:24:20,129
up and look at all repositories on

00:24:17,339 --> 00:24:23,759
github that use PHP and search for a

00:24:20,129 --> 00:24:27,589
pattern of syntax and that was being

00:24:23,759 --> 00:24:31,200
used so that's very deprecated now

00:24:27,589 --> 00:24:35,159
so anyway apparently what that means we

00:24:31,200 --> 00:24:37,950
were able to cast dollar variable to

00:24:35,159 --> 00:24:42,059
unset which does not make sense because

00:24:37,950 --> 00:24:44,729
unset is not a type but surprisingly not

00:24:42,059 --> 00:24:47,609
only did that not yield a syntax error

00:24:44,729 --> 00:24:51,719
but it has the same effect as calling

00:24:47,609 --> 00:24:53,909
the unset function on that variable so

00:24:51,719 --> 00:25:03,089
if you want to unset a variable use

00:24:53,909 --> 00:25:06,419
unset and don't cast to unset the TREC

00:25:03,089 --> 00:25:09,509
errors configuration directive has been

00:25:06,419 --> 00:25:12,179
removed which means that the very very

00:25:09,509 --> 00:25:18,119
special variable PHP underscore error

00:25:12,179 --> 00:25:20,940
message is no longer available I have to

00:25:18,119 --> 00:25:22,649
say that at some point in time I knew

00:25:20,940 --> 00:25:26,279
that this variable and that

00:25:22,649 --> 00:25:30,209
configuration directive existed and but

00:25:26,279 --> 00:25:33,329
since I never used it in over 20 years I

00:25:30,209 --> 00:25:36,629
was always surprised that it exists when

00:25:33,329 --> 00:25:40,379
I came across that ravenica when I came

00:25:36,629 --> 00:25:42,749
across code that uses when doing a code

00:25:40,379 --> 00:25:46,589
review and I always had a hard time

00:25:42,749 --> 00:25:51,059
wrapping my head around why what and how

00:25:46,589 --> 00:25:55,969
and usually that code can be rewritten

00:25:51,059 --> 00:25:59,940
in a way that is less confusing and now

00:25:55,969 --> 00:26:02,249
you have to rewrite it because that

00:25:59,940 --> 00:26:04,889
functionality is going away if you

00:26:02,249 --> 00:26:07,730
really need to know what the most recent

00:26:04,889 --> 00:26:11,090
era was that was triggered

00:26:07,730 --> 00:26:15,230
there's the arrogate last function but

00:26:11,090 --> 00:26:17,660
before you refactor your code from the

00:26:15,230 --> 00:26:21,080
syntax construct that no longer exists -

00:26:17,660 --> 00:26:25,430
one that still exists think long and

00:26:21,080 --> 00:26:28,160
hard whether you really need to make

00:26:25,430 --> 00:26:34,220
runtime decisions based on errors that

00:26:28,160 --> 00:26:38,120
previously happened chances are very

00:26:34,220 --> 00:26:40,670
high that you do not want to do this in

00:26:38,120 --> 00:26:43,070
most cases you're either can delete that

00:26:40,670 --> 00:26:45,680
code and nothing bad will happen and if

00:26:43,070 --> 00:26:47,240
you still need it exceptions are a much

00:26:45,680 --> 00:26:51,650
better way of achieving what you

00:26:47,240 --> 00:26:56,570
probably want constants can no longer

00:26:51,650 --> 00:26:58,850
have case insensitive names which means

00:26:56,570 --> 00:27:04,730
that the third argument for the define

00:26:58,850 --> 00:27:07,160
function may no longer be true to be

00:27:04,730 --> 00:27:09,260
honest again I didn't know that define

00:27:07,160 --> 00:27:14,030
has a third optional argument which

00:27:09,260 --> 00:27:16,520
could be used to allow case insensitive

00:27:14,030 --> 00:27:18,110
names for constants I don't know why you

00:27:16,520 --> 00:27:22,310
want to have that when the rest of the

00:27:18,110 --> 00:27:25,610
language is not anyway it's it's been

00:27:22,310 --> 00:27:29,690
cleaned up and all as well talking about

00:27:25,610 --> 00:27:33,410
constants since forever

00:27:29,690 --> 00:27:36,890
PHP had this fallback mechanism where

00:27:33,410 --> 00:27:42,230
when you used a constant that is not

00:27:36,890 --> 00:27:45,560
declared it would on the fly create a

00:27:42,230 --> 00:27:49,540
value that has as its contents the name

00:27:45,560 --> 00:27:49,540
of the constant that was not declared

00:27:50,440 --> 00:28:00,200
which I always found confusing and since

00:27:55,670 --> 00:28:05,300
57 - that at least is no longer just and

00:28:00,200 --> 00:28:09,560
notice but a warning a warning with with

00:28:05,300 --> 00:28:16,610
the message stop doing this it will stop

00:28:09,560 --> 00:28:20,230
working in PHP 8 and in PHP 8 as you can

00:28:16,610 --> 00:28:22,660
right now get it from from get

00:28:20,230 --> 00:28:24,310
code like that will no longer work it

00:28:22,660 --> 00:28:27,240
results in a heart error which i think

00:28:24,310 --> 00:28:27,240
is really good

00:28:28,590 --> 00:28:39,790
back when 55 zero came out for the short

00:28:35,950 --> 00:28:42,760
period of time between PHP 5 0 and PHP 5

00:28:39,790 --> 00:28:47,260
1 development we thought it would be a

00:28:42,760 --> 00:28:50,200
brilliant idea to implement class

00:28:47,260 --> 00:28:56,260
loading in a way that you have the

00:28:50,200 --> 00:28:58,720
update option to have 1:1 global

00:28:56,260 --> 00:29:02,320
function underscore Auto underscore

00:28:58,720 --> 00:29:04,690
NASCAR Auto load that is called as a

00:29:02,320 --> 00:29:07,300
callback this is the name of a class

00:29:04,690 --> 00:29:10,510
when that class is used for the first

00:29:07,300 --> 00:29:13,030
time and does not exist this is the

00:29:10,510 --> 00:29:19,870
origin story of Auto loaders as we know

00:29:13,030 --> 00:29:22,300
them today turned out really quickly one

00:29:19,870 --> 00:29:25,150
speech p50 was out and people were

00:29:22,300 --> 00:29:29,110
starting to use auto load people realize

00:29:25,150 --> 00:29:32,260
oh the vendor of that library they

00:29:29,110 --> 00:29:35,020
define an autoloader and they define it

00:29:32,260 --> 00:29:36,730
in the file that they own in the global

00:29:35,020 --> 00:29:39,280
namespace because that's the way it

00:29:36,730 --> 00:29:42,430
works and that name is underscore

00:29:39,280 --> 00:29:44,080
underscore auto load that conflicts on

00:29:42,430 --> 00:29:46,450
the one hand with all the other

00:29:44,080 --> 00:29:49,480
libraries that I pull in as dependencies

00:29:46,450 --> 00:29:51,580
and it conflicts with my very own auto

00:29:49,480 --> 00:29:55,000
loader that I use in my own application

00:29:51,580 --> 00:29:58,120
so turned out that idea was not as good

00:29:55,000 --> 00:30:01,210
as we thought it would be well the idea

00:29:58,120 --> 00:30:04,050
of Auto loading is good just the idea of

00:30:01,210 --> 00:30:09,610
how we implemented it was rather limited

00:30:04,050 --> 00:30:13,410
so in PHP 5 1 we introduced a stack of

00:30:09,610 --> 00:30:16,720
Auto loaders that is no longer a special

00:30:13,410 --> 00:30:21,250
name for a function but you can just

00:30:16,720 --> 00:30:26,890
call SPL auto load register and provide

00:30:21,250 --> 00:30:29,680
as many autoloaders as you want and you

00:30:26,890 --> 00:30:32,470
have a stack and PHP will ask the first

00:30:29,680 --> 00:30:33,760
auto loader that that was registered do

00:30:32,470 --> 00:30:36,250
you know this class

00:30:33,760 --> 00:30:39,250
no you don't know it okay I try the

00:30:36,250 --> 00:30:45,930
second one you know the class great take

00:30:39,250 --> 00:30:48,670
care of loading that and continue so I

00:30:45,930 --> 00:30:49,540
really hope that nobody is using

00:30:48,670 --> 00:30:52,180
underscore underscore

00:30:49,540 --> 00:30:54,070
autoload anymore and it's been at least

00:30:52,180 --> 00:30:56,620
ten years since I've seen that in the

00:30:54,070 --> 00:31:04,840
wild so I really hope that nobody is

00:30:56,620 --> 00:31:08,170
going to be affected by that if you use

00:31:04,840 --> 00:31:11,380
set error handler you have to upload

00:31:08,170 --> 00:31:12,760
update your usage of that function to

00:31:11,380 --> 00:31:15,370
register error handlers because the

00:31:12,760 --> 00:31:18,700
fifth parameter is gone this is not

00:31:15,370 --> 00:31:21,550
really a big issue this should also be

00:31:18,700 --> 00:31:23,440
no big issue because if you want to use

00:31:21,550 --> 00:31:25,630
anonymous functions in your code because

00:31:23,440 --> 00:31:29,770
they're great for things like sorting

00:31:25,630 --> 00:31:31,960
and callbacks and stuff you should have

00:31:29,770 --> 00:31:36,660
already been intrinsically motivated

00:31:31,960 --> 00:31:41,350
ever since PHP 5-3 to use the new syntax

00:31:36,660 --> 00:31:45,700
because it leads to code that is more

00:31:41,350 --> 00:31:49,450
robust and clicker to execute in the old

00:31:45,700 --> 00:31:51,490
days we had create function I mean we

00:31:49,450 --> 00:31:53,050
still have create function that is why

00:31:51,490 --> 00:31:55,440
I'm talk about talking about it here

00:31:53,050 --> 00:31:58,540
today because it's going away finally

00:31:55,440 --> 00:32:00,280
but create function if you use create

00:31:58,540 --> 00:32:03,100
function to create an anonymous function

00:32:00,280 --> 00:32:04,990
you need to pass create function to

00:32:03,100 --> 00:32:09,100
parameters with parameters which are

00:32:04,990 --> 00:32:12,160
strings strings that can not without

00:32:09,100 --> 00:32:14,830
executing the code we validated whether

00:32:12,160 --> 00:32:17,740
or not they contain correct PHP syntax

00:32:14,830 --> 00:32:20,830
that is the problem with regard to

00:32:17,740 --> 00:32:22,630
robustness of the code the problem with

00:32:20,830 --> 00:32:26,260
regard to performance comes from the

00:32:22,630 --> 00:32:29,140
fact that every time you want to create

00:32:26,260 --> 00:32:30,970
that anonymous function that codes need

00:32:29,140 --> 00:32:33,610
in code needs to be compiled again

00:32:30,970 --> 00:32:35,710
because it's just a string if you use

00:32:33,610 --> 00:32:38,890
the modern way of declaring anonymous

00:32:35,710 --> 00:32:42,280
functions the bytecode those that

00:32:38,890 --> 00:32:45,740
function is compiled into can be cached

00:32:42,280 --> 00:32:48,860
just like any other PHP bytecode

00:32:45,740 --> 00:32:50,899
not so if you use create function so in

00:32:48,860 --> 00:32:52,970
PHP I'd create function is finally going

00:32:50,899 --> 00:33:00,250
away if you still use it

00:32:52,970 --> 00:33:06,460
reinfect or your code the old way of

00:33:00,250 --> 00:33:06,460
iterating arrays is finally going away

00:33:07,420 --> 00:33:15,440
[Music]

00:33:09,549 --> 00:33:22,070
yeah one of the really big features of

00:33:15,440 --> 00:33:25,610
PHP for PHP for 19 years ago was the for

00:33:22,070 --> 00:33:29,750
each operator so that you do not have to

00:33:25,610 --> 00:33:35,480
use reset list each and manually

00:33:29,750 --> 00:33:37,600
implement for each behavior if you still

00:33:35,480 --> 00:33:39,590
have that in your code today

00:33:37,600 --> 00:33:42,710
congratulations you have been missing

00:33:39,590 --> 00:33:47,049
out on one of the biggest improvements

00:33:42,710 --> 00:33:47,049
of PHP for for almost 20 years

00:33:47,480 --> 00:33:57,679
yeah and you chuckle and you laugh but

00:33:52,460 --> 00:34:01,970
when that change to deprecated each went

00:33:57,679 --> 00:34:06,440
into PHP the next day I had failing

00:34:01,970 --> 00:34:10,429
tests for PHP units on Travis with the

00:34:06,440 --> 00:34:13,520
nightly build of PHP because in a source

00:34:10,429 --> 00:34:15,619
code file that is part of PHP unit that

00:34:13,520 --> 00:34:19,159
at that point in time I had not touched

00:34:15,619 --> 00:34:25,070
in over 15 years there was still that

00:34:19,159 --> 00:34:29,899
one usage of each and at first I thought

00:34:25,070 --> 00:34:31,879
hmm ok yeah a nice interesting funny

00:34:29,899 --> 00:34:34,520
that I still have that how long can it

00:34:31,879 --> 00:34:38,629
take to refactor that one minute two

00:34:34,520 --> 00:34:42,230
minute tops 3 hours later I was finally

00:34:38,629 --> 00:34:46,970
done because what I am that could that

00:34:42,230 --> 00:34:50,210
code needed a complete rewrite because

00:34:46,970 --> 00:34:52,460
it was modifying the array indexes value

00:34:50,210 --> 00:34:54,740
were iterating over value over iterating

00:34:52,460 --> 00:34:58,280
over it and it was so obscure that I did

00:34:54,740 --> 00:34:59,010
not see it on first glance or second

00:34:58,280 --> 00:35:03,210
glance

00:34:59,010 --> 00:35:05,820
or third glance it's really confusing

00:35:03,210 --> 00:35:07,710
code that you do not want to have so I

00:35:05,820 --> 00:35:10,890
really hope that you're all using for

00:35:07,710 --> 00:35:15,090
each and not reset list each to iterate

00:35:10,890 --> 00:35:25,369
over arrays so and if you do get rid of

00:35:15,090 --> 00:35:32,820
it starting with PHP eight numeric array

00:35:25,369 --> 00:35:38,490
indexes will work differently when you

00:35:32,820 --> 00:35:41,010
have negative integers and that's I know

00:35:38,490 --> 00:35:43,440
that's very vague and obscure and the

00:35:41,010 --> 00:35:46,080
example I have over there it's very

00:35:43,440 --> 00:35:48,480
explicit I think at least I think it is

00:35:46,080 --> 00:35:52,050
to get the point across what to change

00:35:48,480 --> 00:35:54,240
in actual behavior but to me it's really

00:35:52,050 --> 00:35:57,240
hard to put that piece of code into

00:35:54,240 --> 00:36:01,670
words so what does the example do we

00:35:57,240 --> 00:36:04,320
haven't we start we create a fresh array

00:36:01,670 --> 00:36:08,630
that array initially has one element

00:36:04,320 --> 00:36:12,450
with the key minus 2 and the value a

00:36:08,630 --> 00:36:15,359
then we add new elements to that array

00:36:12,450 --> 00:36:19,770
without specifying the key so PHP

00:36:15,359 --> 00:36:25,710
automatically assigns the key prior to

00:36:19,770 --> 00:36:27,780
PHP 8 if we start like here with minus 2

00:36:25,710 --> 00:36:30,990
and we add another element it would not

00:36:27,780 --> 00:36:33,660
use minus 1 for the next element that

00:36:30,990 --> 00:36:36,210
it's added without an explicit key it

00:36:33,660 --> 00:36:40,680
would use 0 because 0 is the lowest one

00:36:36,210 --> 00:36:42,930
that is still free by default and I

00:36:40,680 --> 00:36:47,210
really hope that nobody has code out

00:36:42,930 --> 00:36:49,440
there that is affected by this change

00:36:47,210 --> 00:36:53,760
because that would be really confusing

00:36:49,440 --> 00:36:56,790
code to work with I think the new

00:36:53,760 --> 00:36:58,920
behavior is makes much more sense if you

00:36:56,790 --> 00:37:01,380
start with minus 1 and want to add an

00:36:58,920 --> 00:37:05,190
element and the next element has minus 1

00:37:01,380 --> 00:37:09,240
as its key again if you're affected by

00:37:05,190 --> 00:37:11,640
this I'm sorry but take this as an

00:37:09,240 --> 00:37:12,260
opportunity to clean up code that

00:37:11,640 --> 00:37:15,080
probably

00:37:12,260 --> 00:37:16,270
confuses at least some developers on

00:37:15,080 --> 00:37:22,430
your team

00:37:16,270 --> 00:37:25,070
every time they look at that code the

00:37:22,430 --> 00:37:28,760
default error reporting level is now it

00:37:25,070 --> 00:37:31,340
all that means it now includes some more

00:37:28,760 --> 00:37:34,400
things than than before I don't know

00:37:31,340 --> 00:37:36,740
what what what it was before we why do I

00:37:34,400 --> 00:37:39,320
not know such simple things as that

00:37:36,740 --> 00:37:41,330
because ever since I can remember my

00:37:39,320 --> 00:37:46,460
error reporting is configured to minus

00:37:41,330 --> 00:37:50,080
one so I get always everything even when

00:37:46,460 --> 00:37:52,940
a new category of PHP errors is added

00:37:50,080 --> 00:37:56,180
because what error reporting has as its

00:37:52,940 --> 00:37:59,660
value is a bit mask and minus one flips

00:37:56,180 --> 00:38:01,640
all the bits which means I always get

00:37:59,660 --> 00:38:05,540
everything even if a completely new

00:38:01,640 --> 00:38:08,090
category is added one day and this place

00:38:05,540 --> 00:38:12,260
startup errors is now enabled by default

00:38:08,090 --> 00:38:14,750
so you'll always see errors like I could

00:38:12,260 --> 00:38:16,780
not load that extension that you wanted

00:38:14,750 --> 00:38:19,280
me to load from the configuration file

00:38:16,780 --> 00:38:20,780
something that is really confusing for

00:38:19,280 --> 00:38:23,290
some developers because they are really

00:38:20,780 --> 00:38:28,570
sure that you installed an extension

00:38:23,290 --> 00:38:33,080
like I don't know P cough or up cash or

00:38:28,570 --> 00:38:36,410
MongoDB I have installed it why is it

00:38:33,080 --> 00:38:39,400
not there like when I run my application

00:38:36,410 --> 00:38:41,780
I get undefined class blah blah blah and

00:38:39,400 --> 00:38:43,850
I don't see an error message here you

00:38:41,780 --> 00:38:45,680
don't see an error message because this

00:38:43,850 --> 00:38:49,310
place startup errors is configured to

00:38:45,680 --> 00:38:56,480
off and you don't see cannot load a la

00:38:49,310 --> 00:39:00,170
la that's good so but it's not all

00:38:56,480 --> 00:39:02,480
things that are going away or are being

00:39:00,170 --> 00:39:09,380
broken and behave differently we also

00:39:02,480 --> 00:39:11,590
get some nice new features so what do we

00:39:09,380 --> 00:39:11,590
get

00:39:12,109 --> 00:39:23,990
for me the big feature of PHP 74 is

00:39:15,960 --> 00:39:27,030
typed attributes that's one less

00:39:23,990 --> 00:39:29,670
location in the code where I was not

00:39:27,030 --> 00:39:31,980
there where I am not able to put type

00:39:29,670 --> 00:39:34,470
information optional type information to

00:39:31,980 --> 00:39:37,770
be more correct so for instance in PHP

00:39:34,470 --> 00:39:41,579
73 we may have code like this the class

00:39:37,770 --> 00:39:44,730
that represents an email address a value

00:39:41,579 --> 00:39:46,500
object it's immutable it's self

00:39:44,730 --> 00:39:49,069
validating you cannot create it without

00:39:46,500 --> 00:39:52,050
a valid email address and so on and

00:39:49,069 --> 00:39:55,200
internally we store that email address

00:39:52,050 --> 00:39:58,740
as a string but we cannot write private

00:39:55,200 --> 00:40:03,210
string dollar email we have to fall back

00:39:58,740 --> 00:40:07,170
to annotations in code comments to mark

00:40:03,210 --> 00:40:09,569
this as a string and the IDE knows how

00:40:07,170 --> 00:40:12,740
to work with that static analysis tools

00:40:09,569 --> 00:40:18,720
like son know how to work with it but

00:40:12,740 --> 00:40:21,660
it's not nice and I get no runtime error

00:40:18,720 --> 00:40:25,710
of and I try to put something into that

00:40:21,660 --> 00:40:28,550
attribute that is not a string so with

00:40:25,710 --> 00:40:33,540
PHP 74 we can finally add type

00:40:28,550 --> 00:40:37,470
declarations to attributes of classes

00:40:33,540 --> 00:40:39,450
and like I said that's one more location

00:40:37,470 --> 00:40:44,990
in the code where we can put this

00:40:39,450 --> 00:40:47,940
optional typed information for me

00:40:44,990 --> 00:40:50,640
depending on how I count or how do I

00:40:47,940 --> 00:40:53,010
think about this there's two or three

00:40:50,640 --> 00:40:55,470
more things missing from the type system

00:40:53,010 --> 00:40:57,630
that I would really like to have I would

00:40:55,470 --> 00:40:59,609
like to have at least the option to

00:40:57,630 --> 00:41:06,450
declare types for local variables which

00:40:59,609 --> 00:41:08,970
could sometimes be useful I'm missing

00:41:06,450 --> 00:41:12,900
typed arrays I would really like to say

00:41:08,970 --> 00:41:17,190
this is an array of full objects right

00:41:12,900 --> 00:41:19,859
now I use collections instead that I

00:41:17,190 --> 00:41:22,470
type save collections that I generate

00:41:19,859 --> 00:41:24,200
using a code generator because I'm too

00:41:22,470 --> 00:41:27,770
lazy to always write the same

00:41:24,200 --> 00:41:30,380
and I would not have to write that code

00:41:27,770 --> 00:41:32,990
all the time from scratch for each type

00:41:30,380 --> 00:41:35,540
I want the collection of if we had

00:41:32,990 --> 00:41:37,430
generics so that's something that I'm

00:41:35,540 --> 00:41:42,530
missing

00:41:37,430 --> 00:41:44,630
and beyond that Union types would be

00:41:42,530 --> 00:41:48,710
nice intersection types would be nice

00:41:44,630 --> 00:41:49,910
maybe a mixed type would be nice to make

00:41:48,710 --> 00:41:52,430
it explicit in code

00:41:49,910 --> 00:41:55,190
I had yes I have thought about what the

00:41:52,430 --> 00:41:58,940
correct type for this value would be and

00:41:55,190 --> 00:42:04,220
I was not able to make it more specific

00:41:58,940 --> 00:42:07,730
than mixed sometimes that would be

00:42:04,220 --> 00:42:10,430
useful especially when cleaning up and

00:42:07,730 --> 00:42:11,869
modernizing in legacy code and just make

00:42:10,430 --> 00:42:14,510
it explicit I have thought about this

00:42:11,869 --> 00:42:17,839
this is not missing by accident because

00:42:14,510 --> 00:42:19,760
nobody looked at it this is mixed I

00:42:17,839 --> 00:42:24,770
cannot be more specific than that and

00:42:19,760 --> 00:42:28,760
just documented in codes like that that

00:42:24,770 --> 00:42:30,700
of course all falls all falls into line

00:42:28,760 --> 00:42:34,099
this PHP s

00:42:30,700 --> 00:42:40,069
type system evolution over the last

00:42:34,099 --> 00:42:43,369
couple of years ever since PHP five-page

00:42:40,069 --> 00:42:47,540
the PHP language has provided more and

00:42:43,369 --> 00:42:50,839
more options to put type information on

00:42:47,540 --> 00:42:54,170
values and this is a concept that is

00:42:50,839 --> 00:42:56,900
known as gradual typing you're not

00:42:54,170 --> 00:42:59,450
forced to put that type information in

00:42:56,900 --> 00:43:04,099
there compared as other programming

00:42:59,450 --> 00:43:06,740
languages force you to always annotate

00:43:04,099 --> 00:43:09,560
your values with the type no it's

00:43:06,740 --> 00:43:12,290
optional I mean from a language

00:43:09,560 --> 00:43:14,690
perspective is optional if you ask me as

00:43:12,290 --> 00:43:17,480
somebody who writes PHP code for me it's

00:43:14,690 --> 00:43:20,030
not optional I always put all type

00:43:17,480 --> 00:43:22,599
information there into the code that I

00:43:20,030 --> 00:43:28,310
can and I'm looking really forward to

00:43:22,599 --> 00:43:31,339
two years from now and I can require PHP

00:43:28,310 --> 00:43:33,319
74 for PHP unit and kind of can get rid

00:43:31,339 --> 00:43:35,750
of all of these doc blocks with the type

00:43:33,319 --> 00:43:37,970
information for attributes

00:43:35,750 --> 00:43:43,700
me glorious day even I make that commit

00:43:37,970 --> 00:43:46,180
makes me very happy and we're getting

00:43:43,700 --> 00:43:50,180
more into a situation where it is

00:43:46,180 --> 00:43:55,070
possible and possible not with a lot of

00:43:50,180 --> 00:43:58,190
effort at least in new code it's a lot

00:43:55,070 --> 00:44:00,230
of effort to achieve that in in 20 year

00:43:58,190 --> 00:44:02,630
old legacy applications with millions of

00:44:00,230 --> 00:44:05,540
lines of code but we are now in a

00:44:02,630 --> 00:44:09,130
situation where we can write code that

00:44:05,540 --> 00:44:13,970
is type safe where through static

00:44:09,130 --> 00:44:19,010
analysis be it in the IDE with phpstorm

00:44:13,970 --> 00:44:22,220
or with a tool like some through static

00:44:19,010 --> 00:44:26,359
analysis and type inference figure out

00:44:22,220 --> 00:44:29,630
for each variable for each parameter for

00:44:26,359 --> 00:44:31,340
each return value what is the type of

00:44:29,630 --> 00:44:35,869
that value that is being passed around

00:44:31,340 --> 00:44:39,320
and to detect problems due to not

00:44:35,869 --> 00:44:42,770
matching types before running the

00:44:39,320 --> 00:44:45,589
software even before running unit tests

00:44:42,770 --> 00:44:49,609
for instance and of course the more type

00:44:45,589 --> 00:44:53,420
information I have in my code a certain

00:44:49,609 --> 00:44:56,839
type of unit tests is no longer

00:44:53,420 --> 00:45:01,310
necessary because PHP takes care of

00:44:56,839 --> 00:45:03,760
those type checks I encourage each and

00:45:01,310 --> 00:45:06,650
every one of you to go to the talk of

00:45:03,760 --> 00:45:11,530
Matthew Brown tomorrow the main take

00:45:06,650 --> 00:45:15,349
create and maintain of Sun in my opinion

00:45:11,530 --> 00:45:18,380
the most important addition to the PHP

00:45:15,349 --> 00:45:21,260
tool ecosystem over the last couple of

00:45:18,380 --> 00:45:24,109
years it's the best type checker that we

00:45:21,260 --> 00:45:27,500
have and it's a really good tool to work

00:45:24,109 --> 00:45:30,410
with and write I start using it a little

00:45:27,500 --> 00:45:34,460
bit over a year ago and I'm at the point

00:45:30,410 --> 00:45:37,310
where I cannot I still can imagine

00:45:34,460 --> 00:45:41,510
working without it but I do not want to

00:45:37,310 --> 00:45:45,440
work without it anymore and if you want

00:45:41,510 --> 00:45:47,930
to take it to the extreme at least if

00:45:45,440 --> 00:45:49,140
you are the developer of a library that

00:45:47,930 --> 00:45:52,950
is commonly used

00:45:49,140 --> 00:45:55,349
and let's say you use some to type-check

00:45:52,950 --> 00:45:58,680
and enforce the type safety of your

00:45:55,349 --> 00:46:03,180
library code and want to make sure that

00:45:58,680 --> 00:46:07,589
people that use your library use your

00:46:03,180 --> 00:46:11,339
library in the correct way you just

00:46:07,589 --> 00:46:14,430
depend on you are using it wrong in your

00:46:11,339 --> 00:46:17,970
composer JSON file and what happens then

00:46:14,430 --> 00:46:21,810
is let's say I have a library that I

00:46:17,970 --> 00:46:23,910
published on packages and you have a

00:46:21,810 --> 00:46:27,330
project an in-house project and you want

00:46:23,910 --> 00:46:29,849
to use my library you install my

00:46:27,330 --> 00:46:32,010
libraries through composer and composer

00:46:29,849 --> 00:46:33,869
downloads it it puts it into vendor

00:46:32,010 --> 00:46:34,349
updates the autoloader bla bla bla bla

00:46:33,869 --> 00:46:39,660
bla

00:46:34,349 --> 00:46:43,320
everything as usual composer will see oh

00:46:39,660 --> 00:46:46,080
I installed as a dependency of the

00:46:43,320 --> 00:46:47,910
dependency I wanted to install rove you

00:46:46,080 --> 00:46:51,000
are using it wrong and that thing has

00:46:47,910 --> 00:46:53,580
configured a hook that is executed after

00:46:51,000 --> 00:46:57,349
the package has been installed and what

00:46:53,580 --> 00:47:02,060
you are using it as wrong does then is

00:46:57,349 --> 00:47:06,150
behind the scenes it installs son and

00:47:02,060 --> 00:47:09,839
runs a type check on your code that is

00:47:06,150 --> 00:47:13,080
using my library and refused and tells

00:47:09,839 --> 00:47:15,510
composer to not install my library if

00:47:13,080 --> 00:47:21,900
your code is using my library in the

00:47:15,510 --> 00:47:27,510
wrong way granted that is very extreme

00:47:21,900 --> 00:47:31,080
and there are academic papers out there

00:47:27,510 --> 00:47:34,830
or academic articles I should say that

00:47:31,080 --> 00:47:36,750
refer to people like me and Marco

00:47:34,830 --> 00:47:39,570
pavetta will create it you are using it

00:47:36,750 --> 00:47:41,490
wrong and others may be the probably

00:47:39,570 --> 00:47:44,820
also met Matt Brown the creator of Matt

00:47:41,490 --> 00:47:46,980
of some there are people out there that

00:47:44,820 --> 00:47:51,300
refer to people like us as typing

00:47:46,980 --> 00:47:53,220
terrorists because we want to type all

00:47:51,300 --> 00:47:55,320
the things because we want to have type

00:47:53,220 --> 00:47:57,869
safety won't want to reason about our

00:47:55,320 --> 00:48:01,020
software and we want to be reasonably

00:47:57,869 --> 00:48:02,370
sure that the types match all the time

00:48:01,020 --> 00:48:05,280
because because

00:48:02,370 --> 00:48:07,050
then we have less problems and then

00:48:05,280 --> 00:48:09,060
opposed to us

00:48:07,050 --> 00:48:11,070
typing terrorists are the freedom

00:48:09,060 --> 00:48:18,240
fighters that do not want to use types

00:48:11,070 --> 00:48:22,950
anywhere but I digress if you like that

00:48:18,240 --> 00:48:26,160
then you may also like don't which is a

00:48:22,950 --> 00:48:28,170
trait that you can use in your objects

00:48:26,160 --> 00:48:29,910
to make sure that that object cannot be

00:48:28,170 --> 00:48:32,610
cloned that cannot be serialized it

00:48:29,910 --> 00:48:35,880
cannot be uncivilized you cannot have

00:48:32,610 --> 00:48:38,610
magic methods and so on and that really

00:48:35,880 --> 00:48:43,890
closes down your objects and makes your

00:48:38,610 --> 00:48:47,070
objects more robust yeah more features

00:48:43,890 --> 00:48:51,260
more new features not just type system

00:48:47,070 --> 00:48:54,180
wise we also have something that

00:48:51,260 --> 00:48:55,920
developers that perform prefer more of a

00:48:54,180 --> 00:48:59,190
functional approach to software

00:48:55,920 --> 00:49:05,370
development arrow functions are new in

00:48:59,190 --> 00:49:09,030
PHP 74 and I have to say that I don't

00:49:05,370 --> 00:49:11,580
really understand every each and every

00:49:09,030 --> 00:49:15,720
last detail of what this feature is

00:49:11,580 --> 00:49:20,010
about but I can show you this example

00:49:15,720 --> 00:49:24,210
from the RFC which I understand and it's

00:49:20,010 --> 00:49:28,080
all about reducing cognitive load and

00:49:24,210 --> 00:49:32,390
boilerplate code when you only use very

00:49:28,080 --> 00:49:36,330
simple anonymous functions or closures

00:49:32,390 --> 00:49:40,530
so there is a new keyword FN short for

00:49:36,330 --> 00:49:43,080
function for arrow function and then you

00:49:40,530 --> 00:49:46,290
can achieve the same effect as shown

00:49:43,080 --> 00:49:48,990
below with less code whether or not the

00:49:46,290 --> 00:49:51,150
above is more readable than the example

00:49:48,990 --> 00:49:55,410
shown below I leave that up to you I

00:49:51,150 --> 00:49:58,230
don't want to judge that now that I have

00:49:55,410 --> 00:50:00,540
read the RFC I understand that the

00:49:58,230 --> 00:50:03,480
things shown at the top matches the

00:50:00,540 --> 00:50:05,340
things shown at the bottom but whether

00:50:03,480 --> 00:50:10,920
or not I'm going to use that I don't

00:50:05,340 --> 00:50:13,920
know another feature that is new in PHP

00:50:10,920 --> 00:50:17,330
74 is pre loading I talked a little bit

00:50:13,920 --> 00:50:19,540
about Auto loading earlier

00:50:17,330 --> 00:50:22,940
so what autoloading does is when a class

00:50:19,540 --> 00:50:25,880
trait or interface is used for the first

00:50:22,940 --> 00:50:28,040
time and it's not yet declared this

00:50:25,880 --> 00:50:31,970
callback mechanism is triggered to load

00:50:28,040 --> 00:50:39,110
the code for the class or unit of codes

00:50:31,970 --> 00:50:42,320
that is to be used that's nice we

00:50:39,110 --> 00:50:44,690
usually use byte code caches and these

00:50:42,320 --> 00:50:47,180
days that means up cache which became

00:50:44,690 --> 00:50:51,080
the default standards byte code cache

00:50:47,180 --> 00:50:53,750
for PHP byte code caching meaning you do

00:50:51,080 --> 00:50:56,150
not compile your PHP code into something

00:50:53,750 --> 00:50:59,840
that the machine can execute on each and

00:50:56,150 --> 00:51:02,720
every request but only when the source

00:50:59,840 --> 00:51:05,150
code has changed so you save a lot of

00:51:02,720 --> 00:51:08,120
time because you do not need to compile

00:51:05,150 --> 00:51:12,530
on each and every request makes

00:51:08,120 --> 00:51:18,410
everything faster however we still need

00:51:12,530 --> 00:51:22,420
to our PHP still needs to do quite a lot

00:51:18,410 --> 00:51:26,180
of operations including IO operations

00:51:22,420 --> 00:51:30,320
when a class is used for the first time

00:51:26,180 --> 00:51:34,330
within a request the class is not loaded

00:51:30,320 --> 00:51:36,890
the autoloader triggers the auto loader

00:51:34,330 --> 00:51:39,770
searches in the worst case for the class

00:51:36,890 --> 00:51:42,470
source code in the file system in the

00:51:39,770 --> 00:51:45,440
best case it uses an auto load map and

00:51:42,470 --> 00:51:47,300
just needs to resolve from one key to a

00:51:45,440 --> 00:51:49,460
source code file and then includes that

00:51:47,300 --> 00:51:52,430
source code file and then the byte code

00:51:49,460 --> 00:51:54,470
caches realizes I do not need to talk to

00:51:52,430 --> 00:51:57,200
the disk and actually load that and read

00:51:54,470 --> 00:52:00,230
that and compile it because I roll in

00:51:57,200 --> 00:52:04,700
rehab it in the cache everything I just

00:52:00,230 --> 00:52:07,190
explained goes away if you use pre

00:52:04,700 --> 00:52:11,120
loading because this pre loading you

00:52:07,190 --> 00:52:16,070
define this these are the source code

00:52:11,120 --> 00:52:19,490
files that I need in my application how

00:52:16,070 --> 00:52:21,860
that usually works is you have an or you

00:52:19,490 --> 00:52:25,370
have a file that looks very similar to

00:52:21,860 --> 00:52:28,210
an autumn to a map based auto loader

00:52:25,370 --> 00:52:30,910
like the one that you typically create

00:52:28,210 --> 00:52:33,779
with the PHP a/b tool the PHP auto load

00:52:30,910 --> 00:52:36,970
builder if you create a static class map

00:52:33,779 --> 00:52:39,069
you create a preload script and

00:52:36,970 --> 00:52:42,130
configure that in your PHP configuration

00:52:39,069 --> 00:52:46,299
file this is my preload script and this

00:52:42,130 --> 00:52:49,539
script is automatically loaded when the

00:52:46,299 --> 00:52:54,400
process starts for instance when you are

00:52:49,539 --> 00:52:57,549
fast cgi worker process starts and for

00:52:54,400 --> 00:53:01,599
all requests that are handled by that

00:52:57,549 --> 00:53:06,369
process the classes interfaces and

00:53:01,599 --> 00:53:08,019
traits that are loaded pre-loaded are

00:53:06,369 --> 00:53:10,710
always available and we can

00:53:08,019 --> 00:53:12,849
short-circuit the auto loader and

00:53:10,710 --> 00:53:16,470
figuring out whether or not we need to

00:53:12,849 --> 00:53:20,230
load the class which means which makes

00:53:16,470 --> 00:53:23,349
applications a lot faster if you want to

00:53:20,230 --> 00:53:25,690
learn more about that for instance how

00:53:23,349 --> 00:53:29,130
much fast or how you set this up and

00:53:25,690 --> 00:53:34,119
what that means for for for how you

00:53:29,130 --> 00:53:35,890
develop and deploy your applications my

00:53:34,119 --> 00:53:38,799
colleague and friend Ana had a

00:53:35,890 --> 00:53:40,839
presentation about this this morning at

00:53:38,799 --> 00:53:44,019
this conference sorry you missed it in

00:53:40,839 --> 00:53:46,329
case you missed it but his presentation

00:53:44,019 --> 00:53:49,420
material will soon be up on our website

00:53:46,329 --> 00:53:52,440
at that URL so you can at least get the

00:53:49,420 --> 00:53:55,089
slides I looked at the slides they are

00:53:52,440 --> 00:53:57,099
to a large degree self-explanatory

00:53:55,089 --> 00:53:59,109
because it's configuration examples and

00:53:57,099 --> 00:54:03,309
example scripts and so on lots of

00:53:59,109 --> 00:54:04,809
information is in there so have a look

00:54:03,309 --> 00:54:07,089
at that and if you have questions I'm

00:54:04,809 --> 00:54:09,190
sure that he'll answer them either here

00:54:07,089 --> 00:54:11,740
at the conference he's still here until

00:54:09,190 --> 00:54:15,940
Friday or just drop us an email and

00:54:11,740 --> 00:54:18,880
he'll can answer that another new

00:54:15,940 --> 00:54:24,359
feature in 57 4 is the foreign function

00:54:18,880 --> 00:54:24,359
interface and if you need to use

00:54:24,930 --> 00:54:32,769
functionality from within PHP that is

00:54:29,230 --> 00:54:35,799
provided by a shared object like a

00:54:32,769 --> 00:54:39,089
library that is implemented in C C++ go

00:54:35,799 --> 00:54:39,089
rust whatever

00:54:39,470 --> 00:54:46,020
traditionally you would have to write Z

00:54:43,080 --> 00:54:49,320
code that uses that libraries

00:54:46,020 --> 00:54:52,320
functionality and to expose it to PHP

00:54:49,320 --> 00:54:57,330
and you had to write a lot of code to

00:54:52,320 --> 00:55:01,320
map the data that is used by the library

00:54:57,330 --> 00:55:03,960
to data structures of PHP which meet

00:55:01,320 --> 00:55:06,810
which meant number one you need to be a

00:55:03,960 --> 00:55:09,660
C developer number two you need to be

00:55:06,810 --> 00:55:13,950
able to write C code that interfaces

00:55:09,660 --> 00:55:15,750
with PHP all that hurdles are going away

00:55:13,950 --> 00:55:18,750
with for this a foreign function

00:55:15,750 --> 00:55:24,120
interface where you can just write PHP

00:55:18,750 --> 00:55:26,880
code and declare in the PHP code the

00:55:24,120 --> 00:55:29,610
prototype of the functionality that you

00:55:26,880 --> 00:55:33,750
want to use in this hello world style

00:55:29,610 --> 00:55:38,100
example we are using the standard c

00:55:33,750 --> 00:55:43,320
library lip c dot so6 which is on every

00:55:38,100 --> 00:55:46,320
current unix system and we want to use

00:55:43,320 --> 00:55:48,150
the printf function from that so for

00:55:46,320 --> 00:55:51,900
that we need to provide the prototype

00:55:48,150 --> 00:55:55,410
that what would be in dot H header file

00:55:51,900 --> 00:55:58,440
if we were doing development and we just

00:55:55,410 --> 00:56:01,260
say ok printf function has this name it

00:55:58,440 --> 00:56:06,690
has a return value which is int and it

00:56:01,260 --> 00:56:08,460
takes a Const char pointer named format

00:56:06,690 --> 00:56:13,800
as the first parameter and then a very

00:56:08,460 --> 00:56:16,920
addict list of parameters after that the

00:56:13,800 --> 00:56:20,100
result of that is an object that has the

00:56:16,920 --> 00:56:22,140
printf function and we can just call

00:56:20,100 --> 00:56:25,080
that and use printf from the standard

00:56:22,140 --> 00:56:27,540
seen sniper e directly of course like

00:56:25,080 --> 00:56:31,500
any hello world out example out there

00:56:27,540 --> 00:56:33,720
this is totally pointless but it fits on

00:56:31,500 --> 00:56:38,640
one slide it's totally pointless because

00:56:33,720 --> 00:56:40,940
PHP already has a printf function but if

00:56:38,640 --> 00:56:43,800
you ever needed to deal with

00:56:40,940 --> 00:56:45,300
functionality that has we have many

00:56:43,800 --> 00:56:49,080
customers for instance that have very

00:56:45,300 --> 00:56:51,780
specific C libraries that they need to

00:56:49,080 --> 00:56:54,210
interface with to talk to various

00:56:51,780 --> 00:56:57,240
if ik hardware for instance and it's a

00:56:54,210 --> 00:56:59,400
huge maintenance effort to maintain the

00:56:57,240 --> 00:57:02,580
PHP extension that interfaces with that

00:56:59,400 --> 00:57:04,650
library that maintenance is hopefully

00:57:02,580 --> 00:57:10,950
gone thanks to foreign function

00:57:04,650 --> 00:57:14,300
interface and finally there is not that

00:57:10,950 --> 00:57:17,940
much that I can tell you about PHP eight

00:57:14,300 --> 00:57:21,060
besides how to get ready for it

00:57:17,940 --> 00:57:23,220
so that when it comes next year you can

00:57:21,060 --> 00:57:25,890
use it because we have cleaned up your

00:57:23,220 --> 00:57:30,420
code you're no longer using any of these

00:57:25,890 --> 00:57:33,570
backward-compatible any of these syntax

00:57:30,420 --> 00:57:34,910
features that are no longer supported so

00:57:33,570 --> 00:57:37,380
you're not affected by the backward

00:57:34,910 --> 00:57:41,880
compatibility breaks that are introduced

00:57:37,380 --> 00:57:45,570
is 58 and the only new thing that I can

00:57:41,880 --> 00:57:47,460
talk about right now for PHP 8 it's

00:57:45,570 --> 00:57:50,580
probably also going to be the biggest

00:57:47,460 --> 00:57:53,400
month biggest one a year from now which

00:57:50,580 --> 00:57:56,550
is the just-in-time compiler because PHP

00:57:53,400 --> 00:58:00,750
8 will once again be a lot faster

00:57:56,550 --> 00:58:05,220
compared to PHP 7 probably not on the

00:58:00,750 --> 00:58:09,210
same scale of three times faster from

00:58:05,220 --> 00:58:13,200
PHP 7 versus PC 5 but still it will be

00:58:09,210 --> 00:58:17,340
faster it will use less energy which is

00:58:13,200 --> 00:58:19,650
always good but more than that I cannot

00:58:17,340 --> 00:58:24,510
say anything about that because we're

00:58:19,650 --> 00:58:26,580
still finishing PHP 74 and slowly but

00:58:24,510 --> 00:58:29,820
steadily the future development for PHP

00:58:26,580 --> 00:58:32,640
8 will start in the next weeks or months

00:58:29,820 --> 00:58:35,700
there are a lot of RFC's that needs to

00:58:32,640 --> 00:58:37,620
be voted on or that sometimes some of

00:58:35,700 --> 00:58:40,110
them have already been voted upon but

00:58:37,620 --> 00:58:42,380
the implementation is missing I'm hoping

00:58:40,110 --> 00:58:45,480
for some additions to the type system

00:58:42,380 --> 00:58:47,970
union types for instance generics would

00:58:45,480 --> 00:58:51,660
be really nice things like that but

00:58:47,970 --> 00:58:53,370
maybe not maybe a year from now we will

00:58:51,660 --> 00:58:57,290
know more probably six months from now

00:58:53,370 --> 00:58:57,290
we will know more thank you

00:58:58,380 --> 00:59:11,380
[Music]

00:59:13,440 --> 00:59:19,209

YouTube URL: https://www.youtube.com/watch?v=RjiOKgmqosQ


