Title: Fix me if you can: architecture evolution step by step | Denys Bulakh
Publication date: 2020-01-31
Playlist: International PHP Cnference 2019
Description: 
	When you’re building successful startup, there’s always lack of resources, time and ability to implement enterprise level architecture. You start with minimum valuable product, then think which features would you customers need, then fight with your competitors. However, time is going and earlier or later, you would need to come back to all your architectural technical debt, make a pause and think, how will you grow further. In this session I’d like to share our experience gained in Regiondo – startup which is currently being transformed into enterprise level company. We will talk about service oriented architecture, domain driven design and other general concepts and practice. We will think together, how to refactor your production application step by step without complete switch off / switch on. And I will tell you how we are doing this today in Regiondo

Speaker: Denys Bulakh (Regiondo GmbH) | https://phpconference.com/speaker/denys-bulakh/

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,000 --> 00:00:14,040
I somehow this device is not working but

00:00:09,030 --> 00:00:16,590
I will try to work without it so first

00:00:14,040 --> 00:00:19,140
of all I'd like to say that it's really

00:00:16,590 --> 00:00:20,550
pleasant to be here on stage it's my

00:00:19,140 --> 00:00:23,220
first experience section on such a big

00:00:20,550 --> 00:00:24,720
event so if I make some mistakes do not

00:00:23,220 --> 00:00:30,750
judge me too much I will try to avoid

00:00:24,720 --> 00:00:34,140
them but anyway this presentation is

00:00:30,750 --> 00:00:36,630
about retexture it's about a retexture

00:00:34,140 --> 00:00:39,750
evolution specifically in start-up

00:00:36,630 --> 00:00:41,820
projects yes so with this presentation I

00:00:39,750 --> 00:00:43,829
don't want to teach you how to do

00:00:41,820 --> 00:00:44,940
properly or not because we learned a lot

00:00:43,829 --> 00:00:46,980
from the previous one

00:00:44,940 --> 00:00:51,480
thanks to Henning actually it was very

00:00:46,980 --> 00:00:54,840
interesting here I want to share our

00:00:51,480 --> 00:00:58,219
experience our project experience how we

00:00:54,840 --> 00:01:00,629
built our project and how we plan to

00:00:58,219 --> 00:01:03,500
transform it into something bigger than

00:01:00,629 --> 00:01:11,159
just a start-up few words about myself

00:01:03,500 --> 00:01:14,430
so I am CTO of some kind of small

00:01:11,159 --> 00:01:18,360
company startup company and it differs a

00:01:14,430 --> 00:01:22,170
lot from being CTO of BMW or sa B of

00:01:18,360 --> 00:01:27,290
course so despite I'm in charge of

00:01:22,170 --> 00:01:29,400
almost all technical stack all technical

00:01:27,290 --> 00:01:32,130
processes in company in developmental

00:01:29,400 --> 00:01:34,770
product I still need a CTO to think

00:01:32,130 --> 00:01:40,619
strategically and think how will we

00:01:34,770 --> 00:01:43,350
develop our product further still I'm

00:01:40,619 --> 00:01:45,329
developer inside and my way of thinking

00:01:43,350 --> 00:01:47,880
is developer like and I'm talking like a

00:01:45,329 --> 00:01:49,770
developer I'm doing like a developer I

00:01:47,880 --> 00:01:54,750
like to do things instead of talking

00:01:49,770 --> 00:01:58,409
yeah and that's helped me I think with

00:01:54,750 --> 00:02:01,500
my role a lot yeah I'd like to bring

00:01:58,409 --> 00:02:02,759
some information about our product

00:02:01,500 --> 00:02:04,500
because it's important to understand

00:02:02,759 --> 00:02:06,170
from the beginning about what we will

00:02:04,500 --> 00:02:11,280
talk next 60 minutes

00:02:06,170 --> 00:02:12,980
so basically Rwanda is software as a

00:02:11,280 --> 00:02:17,060
service product

00:02:12,980 --> 00:02:19,250
a b2b product so it's a booking system

00:02:17,060 --> 00:02:24,019
booking system for leisure activity

00:02:19,250 --> 00:02:28,580
providers and our main customers are

00:02:24,019 --> 00:02:32,989
businesses not the consumers and this

00:02:28,580 --> 00:02:35,930
actually also defines how to develop our

00:02:32,989 --> 00:02:37,700
product for them so basically the idea

00:02:35,930 --> 00:02:43,010
of the product is we allow in our

00:02:37,700 --> 00:02:45,230
suppliers to manage their products their

00:02:43,010 --> 00:02:49,930
availabilities their resources their

00:02:45,230 --> 00:02:53,750
staff actually the irregular as a

00:02:49,930 --> 00:02:55,340
software platform and also it allows to

00:02:53,750 --> 00:02:59,120
sell tickets for these activities of

00:02:55,340 --> 00:03:02,120
course in on their own ticket shops on

00:02:59,120 --> 00:03:04,760
websites but also offline this point of

00:03:02,120 --> 00:03:06,590
sales which we provide as well but also

00:03:04,760 --> 00:03:10,000
we have integrations with many different

00:03:06,590 --> 00:03:13,640
platforms marketplaces and basically

00:03:10,000 --> 00:03:15,200
channels so we allow also to sell there

00:03:13,640 --> 00:03:17,989
and then all the bookings will be

00:03:15,200 --> 00:03:23,180
managed in the ganda so this is our idea

00:03:17,989 --> 00:03:25,099
of our product today but it was not like

00:03:23,180 --> 00:03:26,450
this in the very beginning so in the

00:03:25,099 --> 00:03:28,549
very beginning the governor was

00:03:26,450 --> 00:03:31,130
completely different product it was

00:03:28,549 --> 00:03:35,269
basically a marketplace like we

00:03:31,130 --> 00:03:39,230
integrate now this so it was be to seek

00:03:35,269 --> 00:03:42,730
product it was ecommerce startup selling

00:03:39,230 --> 00:03:48,500
tickets or let's say gift vouchers for

00:03:42,730 --> 00:03:52,880
touristic activities and basically why

00:03:48,500 --> 00:03:55,250
why did we change from being like this

00:03:52,880 --> 00:03:57,829
into completely different product we

00:03:55,250 --> 00:04:00,590
started as a start-up and first of all

00:03:57,829 --> 00:04:02,840
to answer next question I like to

00:04:00,590 --> 00:04:06,230
highlight the question what is startup

00:04:02,840 --> 00:04:10,160
at all yeah so what does it mean not the

00:04:06,230 --> 00:04:12,829
word but the general definition in real

00:04:10,160 --> 00:04:16,549
in religion and how many of you are

00:04:12,829 --> 00:04:18,470
working in startups so which is some

00:04:16,549 --> 00:04:21,560
pretty some of you and so you may know

00:04:18,470 --> 00:04:26,389
but what is startup actually is it

00:04:21,560 --> 00:04:28,280
always high technology well not exactly

00:04:26,389 --> 00:04:31,659
because there are many startups with

00:04:28,280 --> 00:04:34,550
different business models is it about

00:04:31,659 --> 00:04:36,800
innovation well good startup should be

00:04:34,550 --> 00:04:39,860
innovative of course but still you can

00:04:36,800 --> 00:04:41,000
take real idea existing ad and build

00:04:39,860 --> 00:04:45,379
another one

00:04:41,000 --> 00:04:49,099
Airbnb but better for example is it

00:04:45,379 --> 00:04:51,500
success does it mean success not at all

00:04:49,099 --> 00:04:52,099
exactly I mean there is no guarantee of

00:04:51,500 --> 00:04:53,659
success

00:04:52,099 --> 00:04:55,909
yeah so it's good if you build

00:04:53,659 --> 00:04:58,460
successful startup but many of startups

00:04:55,909 --> 00:05:02,659
unfortunately fails but some of them

00:04:58,460 --> 00:05:06,020
become becoming really good product so

00:05:02,659 --> 00:05:09,199
basically for myself startup is first of

00:05:06,020 --> 00:05:11,990
all state of mind state of mind of

00:05:09,199 --> 00:05:15,289
developers of business to solve the

00:05:11,990 --> 00:05:17,330
problem without obvious solution because

00:05:15,289 --> 00:05:18,830
if it would be obvious solutions and

00:05:17,330 --> 00:05:22,039
many other companies would do this

00:05:18,830 --> 00:05:23,960
before you these limited resources

00:05:22,039 --> 00:05:26,840
because startups basically means always

00:05:23,960 --> 00:05:30,169
that you have limited resources limited

00:05:26,840 --> 00:05:33,979
developers limited money and so on

00:05:30,169 --> 00:05:36,229
and you need to be fast really to be in

00:05:33,979 --> 00:05:38,419
time to be on the market otherwise you

00:05:36,229 --> 00:05:40,520
will fail and of course there is no

00:05:38,419 --> 00:05:42,650
success guarantee because you never know

00:05:40,520 --> 00:05:45,349
when you start a startup if it works or

00:05:42,650 --> 00:05:47,629
not if it expect it or not but if you

00:05:45,349 --> 00:05:50,360
build successful product you must

00:05:47,629 --> 00:05:54,020
understand that it could it should be

00:05:50,360 --> 00:05:55,879
able to grow further so if you build

00:05:54,020 --> 00:05:59,300
startup issues which is super successive

00:05:55,879 --> 00:06:01,879
successful but you cannot do you cannot

00:05:59,300 --> 00:06:05,770
scale it further then it's also fail

00:06:01,879 --> 00:06:08,060
unfortunately so what does it mean for

00:06:05,770 --> 00:06:10,550
developers because we own developers

00:06:08,060 --> 00:06:14,139
conference what does it mean working on

00:06:10,550 --> 00:06:17,259
such environment such company basically

00:06:14,139 --> 00:06:19,460
it sets specific very specific

00:06:17,259 --> 00:06:23,960
development process in start-up

00:06:19,460 --> 00:06:26,509
companies which actually I would say is

00:06:23,960 --> 00:06:31,580
feature driven development because

00:06:26,509 --> 00:06:34,479
basically all you plan to do all you

00:06:31,580 --> 00:06:36,770
design and all you build is always

00:06:34,479 --> 00:06:38,810
connected to the features to the

00:06:36,770 --> 00:06:40,159
business value which actually is

00:06:38,810 --> 00:06:43,550
requested by

00:06:40,159 --> 00:06:48,139
your end customers buy by the business

00:06:43,550 --> 00:06:50,539
yes so business comes to you or you need

00:06:48,139 --> 00:06:52,069
to cut to ask the business what features

00:06:50,539 --> 00:06:56,149
should i implement what should be

00:06:52,069 --> 00:06:57,800
included in mine domain we all know

00:06:56,149 --> 00:07:00,249
about the men during development yeah so

00:06:57,800 --> 00:07:02,360
what should be included there and

00:07:00,249 --> 00:07:04,939
actually developing by features

00:07:02,360 --> 00:07:08,719
developing by business request it always

00:07:04,939 --> 00:07:12,319
risky because you are on a high risk to

00:07:08,719 --> 00:07:14,149
build product this ronk architecture to

00:07:12,319 --> 00:07:16,699
build it wrong and then you will not be

00:07:14,149 --> 00:07:19,399
able to scale it further when you have

00:07:16,699 --> 00:07:21,939
successful product and also another

00:07:19,399 --> 00:07:25,459
thing is when you are building your

00:07:21,939 --> 00:07:28,879
minimum valuable product it's what you

00:07:25,459 --> 00:07:32,809
start with but generally it will adjust

00:07:28,879 --> 00:07:34,759
so after you have minimum product you

00:07:32,809 --> 00:07:36,349
have new requirements in your ideas from

00:07:34,759 --> 00:07:38,449
your business and you change it and you

00:07:36,349 --> 00:07:40,579
have another version of your product and

00:07:38,449 --> 00:07:42,679
then new ideas you need to change again

00:07:40,579 --> 00:07:44,509
the product and at the end as it was

00:07:42,679 --> 00:07:47,629
with faragonda you probably will have

00:07:44,509 --> 00:07:49,629
completely different product from that

00:07:47,629 --> 00:07:52,369
one which you started working on and

00:07:49,629 --> 00:07:57,409
this is developer you need to understand

00:07:52,369 --> 00:08:00,289
if you go deeper in beyond the case so

00:07:57,409 --> 00:08:03,349
as an example to explain in the

00:08:00,289 --> 00:08:06,409
beginning we had a marketplace component

00:08:03,349 --> 00:08:08,539
we had we added so for marketplace

00:08:06,409 --> 00:08:10,939
actually we took typical ecommerce

00:08:08,539 --> 00:08:12,469
system the most popular at the moment

00:08:10,939 --> 00:08:14,839
and one of the most popular now

00:08:12,469 --> 00:08:17,689
Magento actually and we added some

00:08:14,839 --> 00:08:19,249
components to extend it with the ability

00:08:17,689 --> 00:08:21,289
to create your own product with the

00:08:19,249 --> 00:08:24,769
ability to sell basically vouchers and

00:08:21,289 --> 00:08:26,719
redeem them later with some advanced

00:08:24,769 --> 00:08:29,419
recommendation engine advanced search

00:08:26,719 --> 00:08:34,639
engine so we had some set of components

00:08:29,419 --> 00:08:38,509
and it was pretty simple but then we got

00:08:34,639 --> 00:08:42,560
our first big clients a client who

00:08:38,509 --> 00:08:45,050
actually requested something more and we

00:08:42,560 --> 00:08:47,750
were thinking like ok we can do this and

00:08:45,050 --> 00:08:49,279
we added some kind of pro version of our

00:08:47,750 --> 00:08:52,230
system which added some additional

00:08:49,279 --> 00:08:54,540
features like ability to

00:08:52,230 --> 00:08:56,459
make changes in your design on your page

00:08:54,540 --> 00:08:59,899
or ability to see more detailed

00:08:56,459 --> 00:09:03,600
statistics for the for the sales and

00:08:59,899 --> 00:09:05,399
later on thinking on this request we

00:09:03,600 --> 00:09:07,769
added also advanced dashboard which

00:09:05,399 --> 00:09:09,660
allowed actually to make much more to

00:09:07,769 --> 00:09:11,850
our supplier suppliers to our clients

00:09:09,660 --> 00:09:14,100
and they had before this management of

00:09:11,850 --> 00:09:16,529
product management of bookings working

00:09:14,100 --> 00:09:19,829
with customers it's some kind of CRM

00:09:16,529 --> 00:09:21,860
system what we added then we added even

00:09:19,829 --> 00:09:24,149
we went even further and we added

00:09:21,860 --> 00:09:26,820
resource and availability management in

00:09:24,149 --> 00:09:30,060
our system and this was actually pretty

00:09:26,820 --> 00:09:33,180
complicated component because it really

00:09:30,060 --> 00:09:36,480
replaced all the logic for stock

00:09:33,180 --> 00:09:37,740
calculation what we sell and for

00:09:36,480 --> 00:09:40,500
availability of the product which

00:09:37,740 --> 00:09:42,779
products is actually when available

00:09:40,500 --> 00:09:45,600
which time slots exactly you can sell

00:09:42,779 --> 00:09:47,730
and later

00:09:45,600 --> 00:09:51,000
we transformed our product completely

00:09:47,730 --> 00:09:54,510
into booking system booking platform and

00:09:51,000 --> 00:09:56,670
basically we switch it off initial

00:09:54,510 --> 00:10:00,300
marketplace initial components which

00:09:56,670 --> 00:10:04,740
were basically the main components in

00:10:00,300 --> 00:10:07,709
our minimum value available product so

00:10:04,740 --> 00:10:09,540
same things but in architecture so as I

00:10:07,709 --> 00:10:12,420
told you we had an ecommerce engine and

00:10:09,540 --> 00:10:15,149
we had only two components and all the

00:10:12,420 --> 00:10:17,040
questions which we were discussing in IT

00:10:15,149 --> 00:10:21,209
together with business at that point of

00:10:17,040 --> 00:10:23,490
time all our domain was basically based

00:10:21,209 --> 00:10:26,040
around ecommerce and we were discussing

00:10:23,490 --> 00:10:29,970
visual design and usability we were

00:10:26,040 --> 00:10:34,290
implementing different changes in in in

00:10:29,970 --> 00:10:37,440
UI we were implementing a B schema of UI

00:10:34,290 --> 00:10:40,260
we were talking a lot about SEO because

00:10:37,440 --> 00:10:42,269
we wanted more sales on our website we

00:10:40,260 --> 00:10:44,190
were talking about search optimizations

00:10:42,269 --> 00:10:46,890
for customers and gale locations

00:10:44,190 --> 00:10:49,949
optimizations for customers to sell even

00:10:46,890 --> 00:10:55,769
more tickets like typical ecommerce shop

00:10:49,949 --> 00:10:57,959
and the main trackable thing for us it

00:10:55,769 --> 00:11:01,140
was conversion rate if we have higher

00:10:57,959 --> 00:11:03,779
conversion rate we have higher sales we

00:11:01,140 --> 00:11:06,030
are really on a good point so this was

00:11:03,779 --> 00:11:07,710
our concerns and our

00:11:06,030 --> 00:11:12,960
problems which were solving in the very

00:11:07,710 --> 00:11:15,000
beginning of our journey and in 2018 our

00:11:12,960 --> 00:11:17,370
high tech chure was much more

00:11:15,000 --> 00:11:19,230
complicated so basically we were

00:11:17,370 --> 00:11:22,830
continuing to develop in our engine

00:11:19,230 --> 00:11:28,380
which was initially we our database

00:11:22,830 --> 00:11:31,980
become much bigger with some really data

00:11:28,380 --> 00:11:34,370
which probably we can delete from it but

00:11:31,980 --> 00:11:36,210
we didn't do this we added another

00:11:34,370 --> 00:11:37,980
databases on the ground

00:11:36,210 --> 00:11:41,130
we added public API to make this

00:11:37,980 --> 00:11:43,010
integrations with other platforms we

00:11:41,130 --> 00:11:45,870
added queue management system to proceed

00:11:43,010 --> 00:11:49,380
request on the ground to make again

00:11:45,870 --> 00:11:51,510
better experience for our customers and

00:11:49,380 --> 00:11:54,960
of course of course we added many

00:11:51,510 --> 00:11:59,640
additional components additionally two

00:11:54,960 --> 00:12:02,280
initial two or three ones and this was

00:11:59,640 --> 00:12:08,130
in 2018 we start the review in

00:12:02,280 --> 00:12:10,530
architecture why many reasons of course

00:12:08,130 --> 00:12:13,560
as we had b2b product it's very

00:12:10,530 --> 00:12:15,150
important for us to be online as much as

00:12:13,560 --> 00:12:16,890
possible close to hundred percent

00:12:15,150 --> 00:12:19,380
because if our business is not working

00:12:16,890 --> 00:12:21,690
it's not only our business not working

00:12:19,380 --> 00:12:24,500
it's not a business of our clients is

00:12:21,690 --> 00:12:28,020
not working and this is really high

00:12:24,500 --> 00:12:29,970
responsibility for us and we had some

00:12:28,020 --> 00:12:32,400
issues with availability and we started

00:12:29,970 --> 00:12:34,560
thinking what we can improve them but

00:12:32,400 --> 00:12:38,700
also we started thinking strategically

00:12:34,560 --> 00:12:40,560
because in 2018 we already started due

00:12:38,700 --> 00:12:44,460
diligence processes with our investors

00:12:40,560 --> 00:12:46,500
with further acquisition stocks and so

00:12:44,460 --> 00:12:48,240
on and it was also a lot of talks with

00:12:46,500 --> 00:12:50,820
consultants regarding our high tech

00:12:48,240 --> 00:12:52,890
chure and we basically were talking

00:12:50,820 --> 00:12:55,070
completely different things than in the

00:12:52,890 --> 00:12:58,620
very beginning so main topics were

00:12:55,070 --> 00:13:01,560
reliability scalability because all

00:12:58,620 --> 00:13:05,490
these we need to deliver the best

00:13:01,560 --> 00:13:08,190
experience for our customers but also of

00:13:05,490 --> 00:13:10,500
course performance development process

00:13:08,190 --> 00:13:13,380
developed process also very important

00:13:10,500 --> 00:13:15,690
because we were growing not only as a

00:13:13,380 --> 00:13:18,960
product not only as a business but also

00:13:15,690 --> 00:13:19,290
with our technical team so we needed to

00:13:18,960 --> 00:13:22,470
improve

00:13:19,290 --> 00:13:25,410
our pretty simple processes which we had

00:13:22,470 --> 00:13:27,300
before we started talking about

00:13:25,410 --> 00:13:28,800
deployment processes how we do

00:13:27,300 --> 00:13:31,019
deployment how often we can do

00:13:28,800 --> 00:13:32,970
deployment how they are reliable and of

00:13:31,019 --> 00:13:36,720
course all these topics were related to

00:13:32,970 --> 00:13:40,860
architecture and architecture is

00:13:36,720 --> 00:13:44,569
something which you need to talk for

00:13:40,860 --> 00:13:47,509
strategically goals here anyway and

00:13:44,569 --> 00:13:50,880
basically we analyzed all the things and

00:13:47,509 --> 00:13:54,529
we made some improvements to increase

00:13:50,880 --> 00:13:56,250
stability of the platform to decrease

00:13:54,529 --> 00:13:59,490
problems which we've had with

00:13:56,250 --> 00:14:01,050
availability of the service and we

00:13:59,490 --> 00:14:04,589
understood that ok we have a product

00:14:01,050 --> 00:14:07,139
which is working currently we have no

00:14:04,589 --> 00:14:10,560
big issues at the moment which we cannot

00:14:07,139 --> 00:14:14,490
solve with small changes but basically

00:14:10,560 --> 00:14:18,810
we have a monolithic product which is

00:14:14,490 --> 00:14:23,120
not really exactly bad but still

00:14:18,810 --> 00:14:26,190
thinking strategically it has some

00:14:23,120 --> 00:14:27,540
advantages and disadvantages and if you

00:14:26,190 --> 00:14:28,380
talk further about advantages and

00:14:27,540 --> 00:14:31,980
disadvantages

00:14:28,380 --> 00:14:35,519
so of course bras of heaven monolithic

00:14:31,980 --> 00:14:37,500
product is quite short least for me but

00:14:35,519 --> 00:14:39,540
it's basically based on the easier

00:14:37,500 --> 00:14:41,790
easier development and faster

00:14:39,540 --> 00:14:45,149
development and this relates basically

00:14:41,790 --> 00:14:47,339
not to the question is it monolithic or

00:14:45,149 --> 00:14:49,649
not it relates that it's easier and

00:14:47,339 --> 00:14:52,319
faster develop monolithic products for

00:14:49,649 --> 00:14:53,880
people who were building it yeah so it

00:14:52,319 --> 00:14:56,519
means you know your product you know all

00:14:53,880 --> 00:14:58,560
the dependencies you know how it works

00:14:56,519 --> 00:15:01,079
you know the state and you can easily

00:14:58,560 --> 00:15:04,260
extend it you can easily debug it and

00:15:01,079 --> 00:15:05,910
it's easy and of course one of the

00:15:04,260 --> 00:15:09,120
advantages is consistency that you have

00:15:05,910 --> 00:15:11,550
one application which you can easier

00:15:09,120 --> 00:15:14,819
understand in the back and support from

00:15:11,550 --> 00:15:16,800
thirst view but the same time if you

00:15:14,819 --> 00:15:19,560
think about scaling and strategically

00:15:16,800 --> 00:15:21,540
then it's really hard to scale such kind

00:15:19,560 --> 00:15:25,040
of product it of course it depends on

00:15:21,540 --> 00:15:28,110
architecture inside monolith but

00:15:25,040 --> 00:15:30,720
components inside in monoliths are often

00:15:28,110 --> 00:15:32,520
highly coupled and you cannot scale them

00:15:30,720 --> 00:15:34,500
separately one from another

00:15:32,520 --> 00:15:36,390
and this actually is a concern because

00:15:34,500 --> 00:15:39,450
some of the components in our product

00:15:36,390 --> 00:15:42,570
are already being used more than others

00:15:39,450 --> 00:15:44,640
and already have much bigger traffic

00:15:42,570 --> 00:15:46,590
than others why not to have a be ability

00:15:44,640 --> 00:15:49,950
to scale them separately from the big

00:15:46,590 --> 00:15:52,410
monolith yeah and it's hard really to

00:15:49,950 --> 00:15:54,390
reuse components in in monolith I mean

00:15:52,410 --> 00:15:58,890
inside this model it probably you can do

00:15:54,390 --> 00:16:01,620
this and you many many patterns for this

00:15:58,890 --> 00:16:04,110
but if you want to build something a bit

00:16:01,620 --> 00:16:06,390
different probably it will be hard and

00:16:04,110 --> 00:16:09,420
it's like a black box black box for

00:16:06,390 --> 00:16:10,830
people who are looking on it outside so

00:16:09,420 --> 00:16:13,350
for new developers here for newcomers

00:16:10,830 --> 00:16:15,480
it's hard to learn this product for

00:16:13,350 --> 00:16:17,580
newcomers of course you can write a lot

00:16:15,480 --> 00:16:19,560
of documentation but still having

00:16:17,580 --> 00:16:24,090
monolith product after a couple of years

00:16:19,560 --> 00:16:25,800
of development well it has some it has

00:16:24,090 --> 00:16:28,500
some complicated stuff here which you

00:16:25,800 --> 00:16:31,940
need to really learn and it's

00:16:28,500 --> 00:16:35,430
complicated to test it because basically

00:16:31,940 --> 00:16:36,950
it's hard to test separate components

00:16:35,430 --> 00:16:40,350
because there are couple it and

00:16:36,950 --> 00:16:42,720
basically the testing usually is done on

00:16:40,350 --> 00:16:46,260
the level of all monolid complete

00:16:42,720 --> 00:16:48,050
monolith and this is also not it takes a

00:16:46,260 --> 00:16:50,880
lot of resources it takes a lot of time

00:16:48,050 --> 00:16:54,680
for every deployment and this basically

00:16:50,880 --> 00:17:01,290
leads to unstable or delayed release

00:16:54,680 --> 00:17:04,380
release release management so you can

00:17:01,290 --> 00:17:08,490
live with this I mean it works why you

00:17:04,380 --> 00:17:10,200
need to change because if you change you

00:17:08,490 --> 00:17:12,600
need to answer a question how to change

00:17:10,200 --> 00:17:15,030
and then question do me know really how

00:17:12,600 --> 00:17:17,430
to change but working with this kind of

00:17:15,030 --> 00:17:22,770
project this model it earlier or later

00:17:17,430 --> 00:17:24,660
will will be I will name it workaround

00:17:22,770 --> 00:17:28,110
driven development because on some point

00:17:24,660 --> 00:17:30,260
of time its becomes harder and harder to

00:17:28,110 --> 00:17:33,180
extend it with new functionality and

00:17:30,260 --> 00:17:35,550
moreover business comes to you and ask

00:17:33,180 --> 00:17:36,780
for some new additional feature and you

00:17:35,550 --> 00:17:40,200
understand that this feature is

00:17:36,780 --> 00:17:42,300
basically against few previous one and

00:17:40,200 --> 00:17:45,420
then you start building workarounds to

00:17:42,300 --> 00:17:46,530
support both of them and this really a

00:17:45,420 --> 00:17:49,210
problem because

00:17:46,530 --> 00:17:49,630
at the end you will end up with supreme

00:17:49,210 --> 00:17:51,640
soup

00:17:49,630 --> 00:17:53,410
don't touch if it works and basically

00:17:51,640 --> 00:17:55,330
your business will come to you ask for

00:17:53,410 --> 00:17:57,130
developing Samson you will say oh no

00:17:55,330 --> 00:17:59,890
it's too hard to complicate it let's

00:17:57,130 --> 00:18:03,130
postpone it well for business is nothing

00:17:59,890 --> 00:18:05,680
else to do then postpone it but still

00:18:03,130 --> 00:18:07,300
with such approach on some of the

00:18:05,680 --> 00:18:09,220
Christmas seasons when we have increased

00:18:07,300 --> 00:18:13,480
sales and please traffic you will end up

00:18:09,220 --> 00:18:15,930
this big fail of your product and the

00:18:13,480 --> 00:18:19,960
important thing that on this step with

00:18:15,930 --> 00:18:22,690
when your product is really down and you

00:18:19,960 --> 00:18:25,420
trying to you're trying to fix it with

00:18:22,690 --> 00:18:28,090
some additional workarounds it's really

00:18:25,420 --> 00:18:31,030
much harder to fix it then if you are

00:18:28,090 --> 00:18:32,950
prepared for it before and if you don't

00:18:31,030 --> 00:18:35,500
have this issue at all so it's much

00:18:32,950 --> 00:18:38,560
easier to be prepared for such case and

00:18:35,500 --> 00:18:40,090
avoid it then fix it afterwards because

00:18:38,560 --> 00:18:42,060
afterwards you will have no time for

00:18:40,090 --> 00:18:45,940
this

00:18:42,060 --> 00:18:50,650
so what to do then is the product how to

00:18:45,940 --> 00:18:53,860
fix it several ideas will come in your

00:18:50,650 --> 00:18:56,050
mind probably so first of all you will

00:18:53,860 --> 00:18:58,810
think ok we need to do refactoring to

00:18:56,050 --> 00:19:01,510
improve it it's quality you can do it

00:18:58,810 --> 00:19:03,310
but business will not understand you

00:19:01,510 --> 00:19:05,260
actually on this because this is

00:19:03,310 --> 00:19:07,990
something like a never-ending process

00:19:05,260 --> 00:19:10,510
and you can start refactoring one

00:19:07,990 --> 00:19:12,220
component and then go to the factory in

00:19:10,510 --> 00:19:14,230
another component and then you will

00:19:12,220 --> 00:19:16,210
understand that ok the first component

00:19:14,230 --> 00:19:18,400
is really still not so good and you will

00:19:16,210 --> 00:19:21,040
return to it and really from my

00:19:18,400 --> 00:19:25,090
experience this process is really hard

00:19:21,040 --> 00:19:27,040
to manage and hard to plan yeah and you

00:19:25,090 --> 00:19:30,790
will do it probably on the ground given

00:19:27,040 --> 00:19:32,710
some percentage of your time but it will

00:19:30,790 --> 00:19:35,040
really do motivate you and your

00:19:32,710 --> 00:19:38,560
colleagues and business at all and

00:19:35,040 --> 00:19:41,470
probably even it will add new bugs in

00:19:38,560 --> 00:19:43,060
your system because if you factor in you

00:19:41,470 --> 00:19:44,770
do it better from the code perspective

00:19:43,060 --> 00:19:46,960
but probably it will not from not work

00:19:44,770 --> 00:19:48,730
from the business perspective second

00:19:46,960 --> 00:19:52,210
option which I see is complete rebuild

00:19:48,730 --> 00:19:54,670
yeah so this like sounds good because if

00:19:52,210 --> 00:19:57,280
you build new product completely from

00:19:54,670 --> 00:19:58,780
scratch we can built it as a state of

00:19:57,280 --> 00:19:59,650
the art we can build the best

00:19:58,780 --> 00:20:04,659
architecture

00:19:59,650 --> 00:20:08,110
we can make it ever since as we want we

00:20:04,659 --> 00:20:10,360
can plan it but still it's really very

00:20:08,110 --> 00:20:12,429
so first of all it's very expensive yeah

00:20:10,360 --> 00:20:14,350
because you need to stop doing what

00:20:12,429 --> 00:20:17,169
you're doing and completely focus on

00:20:14,350 --> 00:20:19,690
building the same product but

00:20:17,169 --> 00:20:21,490
differently and basically it will lead

00:20:19,690 --> 00:20:23,710
you for double work because you need to

00:20:21,490 --> 00:20:27,250
still support your legacy product and

00:20:23,710 --> 00:20:29,440
you will still develop new one and

00:20:27,250 --> 00:20:31,630
basically to avoid this double work you

00:20:29,440 --> 00:20:33,130
need to make complete code freeze or

00:20:31,630 --> 00:20:35,110
feature freeze something like that and

00:20:33,130 --> 00:20:36,789
then business will not understand you

00:20:35,110 --> 00:20:40,059
and your customers will not understand

00:20:36,789 --> 00:20:43,809
you because it it's really if your

00:20:40,059 --> 00:20:45,669
startup it's really it's really not easy

00:20:43,809 --> 00:20:47,080
to say it transfer your customers that

00:20:45,669 --> 00:20:48,190
sorry this feature will be implemented

00:20:47,080 --> 00:20:52,990
in two years because we are doing

00:20:48,190 --> 00:20:56,830
complete rebuild and the third step is

00:20:52,990 --> 00:20:58,990
step by step evolution so this means

00:20:56,830 --> 00:21:02,010
that you take in part of your

00:20:58,990 --> 00:21:05,230
application building them from scratch

00:21:02,010 --> 00:21:07,690
but not complete application at all at

00:21:05,230 --> 00:21:11,190
once so in this case only limited part

00:21:07,690 --> 00:21:14,440
of application are affected at once and

00:21:11,190 --> 00:21:17,200
additionally you can really have defined

00:21:14,440 --> 00:21:20,590
plan of migration you can list steps

00:21:17,200 --> 00:21:22,899
which you want to do one by one and risk

00:21:20,590 --> 00:21:24,070
is limited actually to single component

00:21:22,899 --> 00:21:25,840
which you are building currently if it

00:21:24,070 --> 00:21:28,570
doesn't work at the end it's bad I mean

00:21:25,840 --> 00:21:30,490
it's a waste of time but still your

00:21:28,570 --> 00:21:32,470
product is not affected at the moment

00:21:30,490 --> 00:21:36,539
and of course it's really easy to roll

00:21:32,470 --> 00:21:36,539
back in case if you do something wrong

00:21:38,520 --> 00:21:45,429
so here in this in mind this step by

00:21:42,520 --> 00:21:47,890
step migration you need to understand

00:21:45,429 --> 00:21:50,140
why we're doing this and we said

00:21:47,890 --> 00:21:52,659
together with our IT team and we asked

00:21:50,140 --> 00:21:55,720
asked ourselves like why do we need to

00:21:52,659 --> 00:21:59,200
do this what concerns do we have and

00:21:55,720 --> 00:22:02,740
basically these concerns are pretty

00:21:59,200 --> 00:22:04,750
obvious we're concerned about database

00:22:02,740 --> 00:22:08,200
structure and its size because it's

00:22:04,750 --> 00:22:10,210
really hard to scale big database we are

00:22:08,200 --> 00:22:12,520
concerned about some performance speaks

00:22:10,210 --> 00:22:13,539
they are mostly connected actually to

00:22:12,520 --> 00:22:15,970
database when we have some

00:22:13,539 --> 00:22:17,710
locking this and so on and we're

00:22:15,970 --> 00:22:21,009
concerned about slow development process

00:22:17,710 --> 00:22:23,139
and a lot of legacy code which we still

00:22:21,009 --> 00:22:25,029
have an application which was already

00:22:23,139 --> 00:22:28,600
switch it off but we need some how to

00:22:25,029 --> 00:22:30,489
deal it visit to support it still and

00:22:28,600 --> 00:22:33,580
this all leads to complicated deployment

00:22:30,489 --> 00:22:37,720
process as well but is it enough to

00:22:33,580 --> 00:22:40,029
define the technical problems well we

00:22:37,720 --> 00:22:41,499
need to define also business problems so

00:22:40,029 --> 00:22:45,929
we need to talk to your beer to to our

00:22:41,499 --> 00:22:50,649
business to your managers to sales to

00:22:45,929 --> 00:22:53,769
directors and talk about business needs

00:22:50,649 --> 00:22:57,970
and try to understand as we have got

00:22:53,769 --> 00:23:00,309
from the previous presentation how

00:22:57,970 --> 00:23:05,649
application flow is working yeah so for

00:23:00,309 --> 00:23:08,799
this we need to to take to divide the

00:23:05,649 --> 00:23:10,690
project into logical parts and decide

00:23:08,799 --> 00:23:14,349
which components are really critical and

00:23:10,690 --> 00:23:15,789
which components we need to have stable

00:23:14,349 --> 00:23:19,269
as is possible and which components

00:23:15,789 --> 00:23:22,979
makes pain for us for business for our

00:23:19,269 --> 00:23:26,440
customers and you need of course to

00:23:22,979 --> 00:23:28,809
visualize this yeah and now I can jump

00:23:26,440 --> 00:23:30,159
just quickly because we talked a lot on

00:23:28,809 --> 00:23:33,190
this conference about domain driven

00:23:30,159 --> 00:23:35,259
design and I believe you you know pretty

00:23:33,190 --> 00:23:37,509
much about it but I will just quickly

00:23:35,259 --> 00:23:40,960
jump into the main driven design because

00:23:37,509 --> 00:23:41,529
basically domain driven design is about

00:23:40,960 --> 00:23:44,320
business

00:23:41,529 --> 00:23:46,479
yeah it's about business needs about

00:23:44,320 --> 00:23:48,519
problems which you need to solve it's

00:23:46,479 --> 00:23:49,899
not so technical question from the

00:23:48,519 --> 00:23:52,690
beginning and you need to start from

00:23:49,899 --> 00:23:57,399
this define your core values and core

00:23:52,690 --> 00:23:59,429
logic from from your business and it

00:23:57,399 --> 00:24:02,019
expects actually domain driven design

00:23:59,429 --> 00:24:04,929
paradigmatic spects that you will be in

00:24:02,019 --> 00:24:07,299
strong collaboration with all parts of

00:24:04,929 --> 00:24:11,499
your company it's all parts of your

00:24:07,299 --> 00:24:14,139
business with all domain experts who are

00:24:11,499 --> 00:24:15,970
these domain experts there is no answer

00:24:14,139 --> 00:24:21,039
so you need to define yourself it's

00:24:15,970 --> 00:24:22,749
basically depends very very much on on a

00:24:21,039 --> 00:24:25,509
company's we're very working on the

00:24:22,749 --> 00:24:26,950
products and so on but basically for

00:24:25,509 --> 00:24:28,570
domain driven design

00:24:26,950 --> 00:24:30,970
everybody knows what it is just a

00:24:28,570 --> 00:24:33,220
question who is really using it in in

00:24:30,970 --> 00:24:37,540
real in in real on production in your

00:24:33,220 --> 00:24:39,970
products from you so not so many people

00:24:37,540 --> 00:24:42,100
we are talking a lot but we are not

00:24:39,970 --> 00:24:45,340
using it and might we must start using

00:24:42,100 --> 00:24:52,660
it because we cannot talk only about

00:24:45,340 --> 00:24:55,390
technology so first we need to work in

00:24:52,660 --> 00:24:57,520
our problem space we need to define our

00:24:55,390 --> 00:24:59,410
core domain and core domain in this case

00:24:57,520 --> 00:25:02,050
it's a bounded context yeah bounded

00:24:59,410 --> 00:25:03,190
context which the main bound in context

00:25:02,050 --> 00:25:04,810
in a context which developed as a

00:25:03,190 --> 00:25:07,660
strategic initiative of your business

00:25:04,810 --> 00:25:09,880
you need to make really high level

00:25:07,660 --> 00:25:14,220
strategic analyse of your components of

00:25:09,880 --> 00:25:17,050
your logic of your flows and define

00:25:14,220 --> 00:25:20,950
steps which your application and your

00:25:17,050 --> 00:25:22,720
business working on like really we do

00:25:20,950 --> 00:25:24,850
this on previous presentation and we

00:25:22,720 --> 00:25:27,090
need to build the context map and based

00:25:24,850 --> 00:25:29,500
on this context maybe we can go further

00:25:27,090 --> 00:25:31,540
after problem space you are in solution

00:25:29,500 --> 00:25:33,670
space yeah and only this only after

00:25:31,540 --> 00:25:37,930
solving previous part you can talk about

00:25:33,670 --> 00:25:41,260
technology only now you need to start

00:25:37,930 --> 00:25:44,110
planning implementation of your of your

00:25:41,260 --> 00:25:45,520
bounded context it's really wrong and I

00:25:44,110 --> 00:25:48,250
would not recommend to start from

00:25:45,520 --> 00:25:50,860
technology because then you will build

00:25:48,250 --> 00:25:55,650
probably the best architecture which

00:25:50,860 --> 00:25:58,540
will not work for your product well

00:25:55,650 --> 00:26:00,520
bounded context in this case it's a

00:25:58,540 --> 00:26:02,680
abstraction layer abstraction of your

00:26:00,520 --> 00:26:04,800
domain names you can have one core

00:26:02,680 --> 00:26:07,510
domain and you have you will have

00:26:04,800 --> 00:26:09,640
several subdomains and each of these

00:26:07,510 --> 00:26:12,280
subdomains will have its own bounded

00:26:09,640 --> 00:26:14,050
context and basically it's important

00:26:12,280 --> 00:26:18,720
that this bounded context is really

00:26:14,050 --> 00:26:21,190
implemented these a idea of solving or

00:26:18,720 --> 00:26:23,130
creating of solution to the problem

00:26:21,190 --> 00:26:26,140
which were defined with your core domain

00:26:23,130 --> 00:26:28,930
so if you back to our will get on the

00:26:26,140 --> 00:26:31,900
product this is very simplified

00:26:28,930 --> 00:26:33,730
very simplified picture how to basically

00:26:31,900 --> 00:26:35,500
understand your application in this case

00:26:33,730 --> 00:26:38,710
we we understood that okay

00:26:35,500 --> 00:26:41,110
we have some product which has basically

00:26:38,710 --> 00:26:43,870
so when customer is buying or because

00:26:41,110 --> 00:26:45,610
we're selling the product always casts

00:26:43,870 --> 00:26:47,770
availability and stock management

00:26:45,610 --> 00:26:50,380
so it means we know because we sell an

00:26:47,770 --> 00:26:51,790
experiences we know that some experience

00:26:50,380 --> 00:26:55,000
is available on particular day

00:26:51,790 --> 00:26:56,830
particular time and basically product

00:26:55,000 --> 00:26:58,660
and availability will lead to placing of

00:26:56,830 --> 00:27:00,820
booking yeah so this is not a part of

00:26:58,660 --> 00:27:02,320
our application booking can come also

00:27:00,820 --> 00:27:04,090
from the channels from integrations

00:27:02,320 --> 00:27:06,130
which we have in our system and

00:27:04,090 --> 00:27:09,130
basically from bookings we will do

00:27:06,130 --> 00:27:11,200
accounting and then later on we will end

00:27:09,130 --> 00:27:16,090
up with some reporting of course we have

00:27:11,200 --> 00:27:18,970
bigger amount of subdomains let's say

00:27:16,090 --> 00:27:20,890
but as an example it works perfectly

00:27:18,970 --> 00:27:24,790
so it's something very obstructed which

00:27:20,890 --> 00:27:26,470
you can start from after doing this we

00:27:24,790 --> 00:27:28,600
need to make data structure review and

00:27:26,470 --> 00:27:30,280
basically this is not only the data

00:27:28,600 --> 00:27:32,220
structure so it's not about your

00:27:30,280 --> 00:27:34,480
database it's more about your

00:27:32,220 --> 00:27:38,280
implementation about your models you

00:27:34,480 --> 00:27:41,559
need to an existing product already do

00:27:38,280 --> 00:27:46,890
the coupling of the data yeah so if you

00:27:41,559 --> 00:27:49,809
have some strictly connected models from

00:27:46,890 --> 00:27:51,190
not connected subdomains you need to

00:27:49,809 --> 00:27:53,290
split them and you need to clean your

00:27:51,190 --> 00:27:55,500
database before going further and

00:27:53,290 --> 00:28:00,220
basically as an example of a data

00:27:55,500 --> 00:28:02,740
structure review so if you do it we have

00:28:00,220 --> 00:28:04,929
for example some suite tables or three

00:28:02,740 --> 00:28:07,120
data models and they are highly couple

00:28:04,929 --> 00:28:09,760
at each other connected and at the end

00:28:07,120 --> 00:28:12,549
we will have probably more data models

00:28:09,760 --> 00:28:14,049
but they are really cleanly decoupled

00:28:12,549 --> 00:28:19,299
and they don't have any connections to

00:28:14,049 --> 00:28:21,010
each other so now I can I want to talk

00:28:19,299 --> 00:28:24,460
also about service-oriented architecture

00:28:21,010 --> 00:28:28,660
so this is additional pattern visual

00:28:24,460 --> 00:28:31,660
style of development which basically is

00:28:28,660 --> 00:28:33,429
about the development when components

00:28:31,660 --> 00:28:36,730
when services are provided by components

00:28:33,429 --> 00:28:38,679
and these components are serving the

00:28:36,730 --> 00:28:40,690
services via the network protocol in

00:28:38,679 --> 00:28:42,610
frames of dee-dee-dee-dee-dee it also

00:28:40,690 --> 00:28:46,299
means implementation of operations which

00:28:42,610 --> 00:28:48,340
are not conceptually belong to one

00:28:46,299 --> 00:28:50,650
single object so it's it's a service

00:28:48,340 --> 00:28:52,619
which can basically work with several

00:28:50,650 --> 00:28:56,249
objects in returning

00:28:52,619 --> 00:28:58,860
services to your component so by us

00:28:56,249 --> 00:29:02,440
services are considered in this case as

00:28:58,860 --> 00:29:04,629
applications single applications which

00:29:02,440 --> 00:29:09,360
implement solutions in frames of our

00:29:04,629 --> 00:29:11,529
bounded context and having this in mind

00:29:09,360 --> 00:29:13,330
we can talk also about layered

00:29:11,529 --> 00:29:16,659
architecture in layered architecture

00:29:13,330 --> 00:29:18,879
also known as NT architecture we need to

00:29:16,659 --> 00:29:21,759
separate components into different

00:29:18,879 --> 00:29:24,789
layers we have presentation layer we

00:29:21,759 --> 00:29:27,249
have service layer we have domain model

00:29:24,789 --> 00:29:29,769
persistence layer and data layer and the

00:29:27,249 --> 00:29:31,119
main idea that components on all these

00:29:29,769 --> 00:29:32,559
layers should not communicate with

00:29:31,119 --> 00:29:35,830
components higher so the communication

00:29:32,559 --> 00:29:37,960
should go always from top to down and

00:29:35,830 --> 00:29:41,649
let's talk about the service layer

00:29:37,960 --> 00:29:42,999
because this is what we started doing in

00:29:41,649 --> 00:29:46,509
regarding we started implementing our

00:29:42,999 --> 00:29:50,139
service layer basically if you take our

00:29:46,509 --> 00:29:53,769
initial contact mapping and the model

00:29:50,139 --> 00:29:56,740
data model revealed structure we can

00:29:53,769 --> 00:29:58,659
already define which services we can

00:29:56,740 --> 00:30:02,259
include in our application in our case

00:29:58,659 --> 00:30:04,629
we have around 20 services which will

00:30:02,259 --> 00:30:07,419
cover more overall functionality here

00:30:04,629 --> 00:30:11,940
it's less is just as an example but I

00:30:07,419 --> 00:30:15,279
really and I don't want to have services

00:30:11,940 --> 00:30:18,279
in amount of hundreds here because then

00:30:15,279 --> 00:30:20,919
it will be really hard to to support

00:30:18,279 --> 00:30:23,169
them so this is important how you split

00:30:20,919 --> 00:30:26,499
your domain into subdomains and this

00:30:23,169 --> 00:30:30,179
will help you to define properly which

00:30:26,499 --> 00:30:30,179
services basically you need to develop

00:30:30,899 --> 00:30:35,740
so if we talk about the particular

00:30:34,179 --> 00:30:37,869
service which we need to develop it's

00:30:35,740 --> 00:30:39,700
also can be defined by different steps

00:30:37,869 --> 00:30:41,200
here so first of all you need to think

00:30:39,700 --> 00:30:43,240
about the text tag because now you know

00:30:41,200 --> 00:30:45,159
the business needs and you can analyze

00:30:43,240 --> 00:30:45,659
basically how it to solve this business

00:30:45,159 --> 00:30:48,220
needs

00:30:45,659 --> 00:30:51,789
after talk a defining text tech you need

00:30:48,220 --> 00:30:54,460
to to check your bounded context and

00:30:51,789 --> 00:30:56,350
build let's say endpoints yeah which

00:30:54,460 --> 00:30:58,119
your service need to serve based on the

00:30:56,350 --> 00:31:00,809
context which you have and these

00:30:58,119 --> 00:31:04,629
endpoints later will be used by your

00:31:00,809 --> 00:31:06,200
application and then it comes

00:31:04,629 --> 00:31:08,690
implementation it's

00:31:06,200 --> 00:31:11,720
and at the end you need to connect your

00:31:08,690 --> 00:31:14,950
service to your application basically

00:31:11,720 --> 00:31:17,210
and if you go further step-by-step

00:31:14,950 --> 00:31:19,250
regarding the tech stack you can define

00:31:17,210 --> 00:31:21,140
tech stack as you wish but I would

00:31:19,250 --> 00:31:23,420
recommend to keep it as simple as

00:31:21,140 --> 00:31:25,910
possible according to your needs and

00:31:23,420 --> 00:31:28,450
according to the business needs in our K

00:31:25,910 --> 00:31:32,090
is basically PHP and mysql or mariadb

00:31:28,450 --> 00:31:34,429
works quite good yeah and we have HP

00:31:32,090 --> 00:31:36,710
developers mostly and basically for

00:31:34,429 --> 00:31:39,710
services which are key with this tech

00:31:36,710 --> 00:31:41,870
stack I would not do anything anything

00:31:39,710 --> 00:31:44,990
different the only thing for us was that

00:31:41,870 --> 00:31:46,760
before we were hosted on a physical

00:31:44,990 --> 00:31:49,370
servers yeah and now we considering

00:31:46,760 --> 00:31:50,960
going with our services miss cubed Metis

00:31:49,370 --> 00:31:54,679
and with cloud solutions yeah because

00:31:50,960 --> 00:31:56,510
this basically will allow us to make the

00:31:54,679 --> 00:31:59,330
scalability per service and allow to

00:31:56,510 --> 00:32:01,460
optimize the process of scalability and

00:31:59,330 --> 00:32:05,240
a lot atomize the process of deployments

00:32:01,460 --> 00:32:07,340
and support of our application so these

00:32:05,240 --> 00:32:09,679
are the services which we define for our

00:32:07,340 --> 00:32:11,720
let's say first application but

00:32:09,679 --> 00:32:15,530
basically service rendered to the

00:32:11,720 --> 00:32:18,170
texture itself it allows you to use any

00:32:15,530 --> 00:32:20,059
text tag as you need for every

00:32:18,170 --> 00:32:22,490
particular service because basically

00:32:20,059 --> 00:32:25,490
then services will communicate through

00:32:22,490 --> 00:32:28,190
their unified adapters to the network

00:32:25,490 --> 00:32:30,800
and basically one service doesn't care

00:32:28,190 --> 00:32:34,100
which technologies not using used in

00:32:30,800 --> 00:32:37,120
another service and this is for example

00:32:34,100 --> 00:32:41,179
the whole list of technology which we

00:32:37,120 --> 00:32:42,800
somehow use or plan to use in our system

00:32:41,179 --> 00:32:44,630
yeah so it doesn't mean that we already

00:32:42,800 --> 00:32:47,900
using everything from it in the older

00:32:44,630 --> 00:32:49,309
but now we are part of bigger company of

00:32:47,900 --> 00:32:51,410
your contractor my this group and this

00:32:49,309 --> 00:32:54,490
is mainly stack which we have available

00:32:51,410 --> 00:33:03,230
for further implementation at the

00:32:54,490 --> 00:33:04,730
governor if you go to the next step it's

00:33:03,230 --> 00:33:06,410
in points how to build your endpoints

00:33:04,730 --> 00:33:08,840
how do how to understand which in points

00:33:06,410 --> 00:33:10,880
should be simply check your bounded

00:33:08,840 --> 00:33:12,620
context which you build before and check

00:33:10,880 --> 00:33:15,050
your application analyze context and

00:33:12,620 --> 00:33:17,710
define these endpoints which will solve

00:33:15,050 --> 00:33:19,760
actually problems which Orsola solve the

00:33:17,710 --> 00:33:21,919
concerns which you have solved this

00:33:19,760 --> 00:33:24,200
may make the solution for your domain

00:33:21,919 --> 00:33:26,000
and of course it's important to do

00:33:24,200 --> 00:33:28,340
commend this because this is a very

00:33:26,000 --> 00:33:30,049
beginning of your development of the

00:33:28,340 --> 00:33:33,740
service and all what you defined you

00:33:30,049 --> 00:33:35,779
need to put some area and we use an open

00:33:33,740 --> 00:33:38,779
API Docs actually for it as annotations

00:33:35,779 --> 00:33:41,419
in PHP and it works pretty good so we

00:33:38,779 --> 00:33:43,039
define our Docs and then end point by

00:33:41,419 --> 00:33:45,710
end point we just implement in them and

00:33:43,039 --> 00:33:48,440
we can split basically and you can do

00:33:45,710 --> 00:33:52,549
this with not only one or two developers

00:33:48,440 --> 00:33:56,870
but with a whole team on the

00:33:52,549 --> 00:33:59,029
implementation stage basically you know

00:33:56,870 --> 00:34:01,070
the testers are a test are important I

00:33:59,029 --> 00:34:02,510
don't want to tell anything more about

00:34:01,070 --> 00:34:04,309
the test-driven development or something

00:34:02,510 --> 00:34:07,279
like that because I believe you know

00:34:04,309 --> 00:34:10,149
ever since but I only would say that

00:34:07,279 --> 00:34:13,339
writing tests in the very beginning is

00:34:10,149 --> 00:34:15,200
it works pretty good for us because if

00:34:13,339 --> 00:34:17,270
you define your end points for the

00:34:15,200 --> 00:34:19,250
service you know what need to be

00:34:17,270 --> 00:34:21,859
implemented and if you have a disability

00:34:19,250 --> 00:34:23,450
services tests or tests which are

00:34:21,859 --> 00:34:26,379
implemented based on these endpoints you

00:34:23,450 --> 00:34:29,210
can easily split the development between

00:34:26,379 --> 00:34:32,899
development team and not here not to

00:34:29,210 --> 00:34:39,710
have any disruptions or any blockings

00:34:32,899 --> 00:34:42,200
or any conflicts actually so at the end

00:34:39,710 --> 00:34:43,819
when implementation is finished you need

00:34:42,200 --> 00:34:45,950
to connect your service to use your

00:34:43,819 --> 00:34:47,510
service and you need to do this as fast

00:34:45,950 --> 00:34:49,669
as possible because remember we have a

00:34:47,510 --> 00:34:51,200
feature freeze or code freeze for some

00:34:49,669 --> 00:34:53,990
part of application and your business

00:34:51,200 --> 00:34:58,490
expecting that you will deliver and

00:34:53,990 --> 00:35:01,130
remove this lock in as fast as possible

00:34:58,490 --> 00:35:03,800
and that's why after you implemented one

00:35:01,130 --> 00:35:06,950
particular service use it and basically

00:35:03,800 --> 00:35:10,760
in our case if you remember the layered

00:35:06,950 --> 00:35:13,430
architecture we consider in our monolith

00:35:10,760 --> 00:35:15,440
current terminal it as presentation

00:35:13,430 --> 00:35:17,510
level area and all the logic which was

00:35:15,440 --> 00:35:19,940
implemented in in monolith and which was

00:35:17,510 --> 00:35:22,280
basically moved to the service it needs

00:35:19,940 --> 00:35:24,020
to be replaced with communication with

00:35:22,280 --> 00:35:26,359
the service and in this case monolith

00:35:24,020 --> 00:35:27,980
will do basically API request or any

00:35:26,359 --> 00:35:29,800
other request to the service instead of

00:35:27,980 --> 00:35:33,160
implementation of code inside

00:35:29,800 --> 00:35:35,800
and this makes the monolid smaller

00:35:33,160 --> 00:35:39,760
because basically the logic implemented

00:35:35,800 --> 00:35:42,790
in the model it will decrease and of

00:35:39,760 --> 00:35:45,460
course API gateway would work also good

00:35:42,790 --> 00:35:48,580
because if you make many services 2030

00:35:45,460 --> 00:35:50,880
services it's good to have one unified

00:35:48,580 --> 00:35:53,950
interface for communication of them

00:35:50,880 --> 00:35:56,620
generally we currently considering conch

00:35:53,950 --> 00:35:58,710
as just a simple very simple a packet

00:35:56,620 --> 00:36:02,710
way which will basically allow to

00:35:58,710 --> 00:36:06,910
collect all the endpoints and manage

00:36:02,710 --> 00:36:10,210
them easily so the release cycle for

00:36:06,910 --> 00:36:12,640
each service includes basically not many

00:36:10,210 --> 00:36:14,620
points not many milestones so first of

00:36:12,640 --> 00:36:16,420
all as I told you it's code freeze or

00:36:14,620 --> 00:36:18,580
feature freeze let's say on the

00:36:16,420 --> 00:36:20,590
application so you don't want to make

00:36:18,580 --> 00:36:22,780
double work then it's development

00:36:20,590 --> 00:36:24,610
process and then at the end you connect

00:36:22,780 --> 00:36:26,560
into your application your service and

00:36:24,610 --> 00:36:28,240
then you can just simply start with the

00:36:26,560 --> 00:36:31,330
next service and with completely the

00:36:28,240 --> 00:36:35,110
same pattern and in such way you will

00:36:31,330 --> 00:36:37,450
replace one by one all the logic from

00:36:35,110 --> 00:36:41,680
your application and you will have ad

00:36:37,450 --> 00:36:43,570
and many services you will have your

00:36:41,680 --> 00:36:46,030
service layer interface and you will

00:36:43,570 --> 00:36:47,320
have your monolid which basically after

00:36:46,030 --> 00:36:49,750
some period of time when you have

00:36:47,320 --> 00:36:51,610
already most of the service implemented

00:36:49,750 --> 00:36:52,990
you can start splitting the monolith you

00:36:51,610 --> 00:36:55,480
can start splitting it into smaller

00:36:52,990 --> 00:36:57,130
litewear interfaces basically it can be

00:36:55,480 --> 00:36:59,380
anything it can be front-end application

00:36:57,130 --> 00:37:01,420
which works directly busy.i it can be

00:36:59,380 --> 00:37:04,180
back-end application it depends on your

00:37:01,420 --> 00:37:06,670
basically subdomains yes so you can

00:37:04,180 --> 00:37:09,000
split down on it and at the end you will

00:37:06,670 --> 00:37:14,380
get rid of it

00:37:09,000 --> 00:37:16,330
the only concern here is that if you

00:37:14,380 --> 00:37:18,400
have many services they are not

00:37:16,330 --> 00:37:19,180
communicating only with monolith they

00:37:18,400 --> 00:37:22,090
are communicating

00:37:19,180 --> 00:37:24,880
one which another because product

00:37:22,090 --> 00:37:28,350
basically needs to know about the price

00:37:24,880 --> 00:37:32,290
or in our in this case or availability

00:37:28,350 --> 00:37:33,880
is completely connected to check out

00:37:32,290 --> 00:37:35,320
because check out is asking availability

00:37:33,880 --> 00:37:37,120
and so on and then we will have

00:37:35,320 --> 00:37:41,070
basically many many many connections

00:37:37,120 --> 00:37:43,390
between services which basically will be

00:37:41,070 --> 00:37:47,319
like a monolid without

00:37:43,390 --> 00:37:51,160
monolid because we still are having our

00:37:47,319 --> 00:37:54,029
components completely tablet basically

00:37:51,160 --> 00:37:56,380
you will end up with another problem and

00:37:54,029 --> 00:37:58,420
here it's a hard question what to do

00:37:56,380 --> 00:38:00,660
because basically you splitted your

00:37:58,420 --> 00:38:03,970
manual it into services but you still

00:38:00,660 --> 00:38:06,210
communicating with them as with common

00:38:03,970 --> 00:38:08,680
components of monolith and that's

00:38:06,210 --> 00:38:11,710
something we understood we need to find

00:38:08,680 --> 00:38:15,220
another solution and actually we found

00:38:11,710 --> 00:38:20,710
it in even sourcing yeah so basically

00:38:15,220 --> 00:38:24,190
every component every service on some

00:38:20,710 --> 00:38:27,569
state change of its models can give this

00:38:24,190 --> 00:38:30,700
update to other services doesn't matter

00:38:27,569 --> 00:38:36,269
when the data will be requested by them

00:38:30,700 --> 00:38:40,089
and basically send in this event to the

00:38:36,269 --> 00:38:44,490
to some unified let's say message Basia

00:38:40,089 --> 00:38:48,569
oregon source system will distribute it

00:38:44,490 --> 00:38:50,440
behind the logic without code without

00:38:48,569 --> 00:38:54,099
direct connection from service to

00:38:50,440 --> 00:38:56,049
service and basically we will have

00:38:54,099 --> 00:38:58,059
something like that so we will have

00:38:56,049 --> 00:39:00,609
still our services we will have api

00:38:58,059 --> 00:39:02,670
gateway to connect with the front end

00:39:00,609 --> 00:39:06,759
player with a presentation layer and

00:39:02,670 --> 00:39:09,339
each of the service will produce data to

00:39:06,759 --> 00:39:11,559
enhance stream and depending on the need

00:39:09,339 --> 00:39:14,559
each of other services will basically

00:39:11,559 --> 00:39:16,480
consume this data and replicate it in

00:39:14,559 --> 00:39:18,190
local storage if needed or use it

00:39:16,480 --> 00:39:20,380
somehow independent on the service and

00:39:18,190 --> 00:39:22,359
in this case we don't have basically

00:39:20,380 --> 00:39:30,250
direct connections between services

00:39:22,359 --> 00:39:35,380
which makes us happier basically if we

00:39:30,250 --> 00:39:37,329
put it into our graphics let's say about

00:39:35,380 --> 00:39:39,519
availability service as one of the

00:39:37,329 --> 00:39:44,019
services and it's implemented like

00:39:39,519 --> 00:39:46,349
application remember and it has adopters

00:39:44,019 --> 00:39:50,769
here so all the connections to all the

00:39:46,349 --> 00:39:52,900
different let's say edges here or

00:39:50,769 --> 00:39:56,559
different sources are done through the

00:39:52,900 --> 00:39:56,980
adapters and basically the application

00:39:56,559 --> 00:40:01,960
itself

00:39:56,980 --> 00:40:04,030
doesn't know anything about adaptors

00:40:01,960 --> 00:40:06,369
here so they implemented separately and

00:40:04,030 --> 00:40:08,890
they are basically their task is to

00:40:06,369 --> 00:40:10,060
connect two different sources and one of

00:40:08,890 --> 00:40:11,830
the adapter in this case will be

00:40:10,060 --> 00:40:15,369
streaming platform and as adapter will

00:40:11,830 --> 00:40:17,080
be to API gateway and another adapter

00:40:15,369 --> 00:40:18,160
will be for example for database yes so

00:40:17,080 --> 00:40:20,680
this is very simple

00:40:18,160 --> 00:40:24,430
Siana but basically it gives us

00:40:20,680 --> 00:40:29,859
understanding that in this case we can

00:40:24,430 --> 00:40:34,050
basically use our application for

00:40:29,859 --> 00:40:37,090
different purposes yes of our service

00:40:34,050 --> 00:40:41,800
this is about the hexagonal architecture

00:40:37,090 --> 00:40:44,500
yeah so hexagonal architecture is means

00:40:41,800 --> 00:40:47,680
that all the connections all the inputs

00:40:44,500 --> 00:40:50,580
outputs of the application should be

00:40:47,680 --> 00:40:52,690
implemented on the edges yeah and

00:40:50,580 --> 00:40:56,859
basically the connectivity to other

00:40:52,690 --> 00:40:58,270
sources should not be really be inside

00:40:56,859 --> 00:41:06,550
application it should be easily it

00:40:58,270 --> 00:41:08,369
completely so basically currently we are

00:41:06,550 --> 00:41:11,410
on the very beginning of our journey

00:41:08,369 --> 00:41:14,460
because we just as I told you started

00:41:11,410 --> 00:41:17,890
this process last year and currently we

00:41:14,460 --> 00:41:19,750
we started with thinking in terms of

00:41:17,890 --> 00:41:23,050
business and this year we started

00:41:19,750 --> 00:41:27,220
already with implementation so this our

00:41:23,050 --> 00:41:28,869
solution space so I don't have any

00:41:27,220 --> 00:41:33,040
results like how it works at the moment

00:41:28,869 --> 00:41:35,440
for you yeah but I hope in some next PC

00:41:33,040 --> 00:41:38,410
conferences I will report to you and

00:41:35,440 --> 00:41:42,010
tell the success story of complete

00:41:38,410 --> 00:41:46,900
migration of monolithic startup project

00:41:42,010 --> 00:41:50,380
into service-oriented architecture so

00:41:46,900 --> 00:41:52,750
that's all from my side thank you for

00:41:50,380 --> 00:41:55,530
your time and we have still some time

00:41:52,750 --> 00:41:55,530
for questions if you have

00:41:59,330 --> 00:42:17,340

YouTube URL: https://www.youtube.com/watch?v=5YY2bW4agBU


