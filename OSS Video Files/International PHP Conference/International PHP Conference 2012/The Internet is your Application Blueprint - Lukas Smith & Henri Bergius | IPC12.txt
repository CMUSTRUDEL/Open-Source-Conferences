Title: The Internet is your Application Blueprint - Lukas Smith & Henri Bergius | IPC12
Publication date: 2013-05-10
Playlist: International PHP Conference 2012
Description: 
	Exclusive from the International PHP Conference 2012 --Â Lukas Smith and Henri Bergius with their Keynote "The Internet is your Appliclation Blueprint".

The internet is based on loosely connected services and standards. Yet it seems most web developers choose to build applications that are essentially one gigantic blob using self invented ad hoc protocols and APIs. With the emergence of SaaS solutions and a growing number of tools to leverage open standards, excuses for developers are running ever more thin to stick to monolithic design principles.

More Information: https://phpconference.com/en
Captions: 
	00:00:06,470 --> 00:00:12,179
and now I'm very happy to announce the

00:00:09,420 --> 00:00:16,529
keynote the internet is your application

00:00:12,179 --> 00:00:32,009
blueprint by Luca Smith and Henry bagus

00:00:16,529 --> 00:00:34,219
please welcome those go-to guys yeah so

00:00:32,009 --> 00:00:36,360
hello everybody I'm Henry bad news

00:00:34,219 --> 00:00:38,879
originally from Finland now living in

00:00:36,360 --> 00:00:43,559
Berlin background in the Midgard

00:00:38,879 --> 00:00:45,180
community hi I'm Lucas Smith living in

00:00:43,559 --> 00:00:48,000
Switzerland originally from Berlin

00:00:45,180 --> 00:00:50,670
working for a company called leap and

00:00:48,000 --> 00:00:53,730
quite involved in symfony2 and PHP stuff

00:00:50,670 --> 00:00:56,550
in general okay so yeah we're talking

00:00:53,730 --> 00:01:00,120
about the internet the application

00:00:56,550 --> 00:01:02,899
blueprint that you should follow the sad

00:01:00,120 --> 00:01:06,119
fact is if you look at your current

00:01:02,899 --> 00:01:08,909
software everything you've built most

00:01:06,119 --> 00:01:11,460
likely they are monoliths the

00:01:08,909 --> 00:01:15,509
architectural diagram will look like

00:01:11,460 --> 00:01:18,030
this you have underneath a database file

00:01:15,509 --> 00:01:20,759
system some things like that then you

00:01:18,030 --> 00:01:23,909
have a framework it might be just PHP or

00:01:20,759 --> 00:01:25,830
maybe you're using rails or symphony or

00:01:23,909 --> 00:01:29,130
whatever and then you have the

00:01:25,830 --> 00:01:32,579
application there and this application

00:01:29,130 --> 00:01:35,729
consists of things that spit up machine

00:01:32,579 --> 00:01:38,460
readable stuff HTML and even executable

00:01:35,729 --> 00:01:43,970
JavaScript but anyhow all of it is in

00:01:38,460 --> 00:01:48,780
this one tall silo this kind of monolith

00:01:43,970 --> 00:01:53,250
might remind you of something last time

00:01:48,780 --> 00:01:57,329
we saw these monoliths there was also a

00:01:53,250 --> 00:02:01,259
computer that kind of misbehaved so you

00:01:57,329 --> 00:02:03,840
might want to reconsider of course the

00:02:01,259 --> 00:02:05,939
other thing about the monolith is that

00:02:03,840 --> 00:02:08,489
it's a great place for hiding spaghetti

00:02:05,939 --> 00:02:10,080
code it might be your code it might be

00:02:08,489 --> 00:02:13,230
somebody else's code maybe it's

00:02:10,080 --> 00:02:15,730
something you got as a dependency

00:02:13,230 --> 00:02:17,950
our software consists of so much

00:02:15,730 --> 00:02:22,450
spaghetti that some people actually made

00:02:17,950 --> 00:02:25,420
it the religion as you can see here so

00:02:22,450 --> 00:02:30,099
let's let's try to clean our act a bit

00:02:25,420 --> 00:02:35,730
because otherwise this monolithic big

00:02:30,099 --> 00:02:38,379
unwieldy codebase will hold you hostage

00:02:35,730 --> 00:02:40,720
you need to go to new direction maybe

00:02:38,379 --> 00:02:42,159
your business plan changes or maybe

00:02:40,720 --> 00:02:44,140
there's a new requirement in business

00:02:42,159 --> 00:02:46,120
partner you need to integrate with new

00:02:44,140 --> 00:02:52,329
feature you'd like to do and suddenly

00:02:46,120 --> 00:02:54,780
this silo makes it very difficult um the

00:02:52,329 --> 00:02:57,250
other thing is technologies come and go

00:02:54,780 --> 00:02:59,440
they're a bit like fashion you know now

00:02:57,250 --> 00:03:07,329
the it's the long skirts or whatever

00:02:59,440 --> 00:03:09,970
stripes or squares the screenshots you

00:03:07,329 --> 00:03:12,609
see here about various technologies

00:03:09,970 --> 00:03:14,379
sucking I think are mostly a testament

00:03:12,609 --> 00:03:18,160
to the fact that if some particular

00:03:14,379 --> 00:03:21,549
technology becomes reasonable enough to

00:03:18,160 --> 00:03:25,269
be used or widely enough used they will

00:03:21,549 --> 00:03:28,030
be rants about it so essentially the

00:03:25,269 --> 00:03:30,370
story is probably if you want to use

00:03:28,030 --> 00:03:36,699
some technology and nobody's saying that

00:03:30,370 --> 00:03:39,430
it sucks then nobody's using it and you

00:03:36,699 --> 00:03:43,470
know technologies fail you might

00:03:39,430 --> 00:03:47,549
remember this guy the play well he's

00:03:43,470 --> 00:03:51,549
more it's not being so visible lately

00:03:47,549 --> 00:03:55,090
mainly because Twitter started their

00:03:51,549 --> 00:03:57,069
story building everything on rails which

00:03:55,090 --> 00:03:58,930
was a good way to get started but then

00:03:57,069 --> 00:04:00,519
obviously it didn't scale to the

00:03:58,930 --> 00:04:03,280
millions and millions of users they have

00:04:00,519 --> 00:04:06,190
now so they had to go and my great

00:04:03,280 --> 00:04:08,829
things to different pieces now we might

00:04:06,190 --> 00:04:11,260
have seen a lot less Vale well if they

00:04:08,829 --> 00:04:16,539
have been taught about decoupling things

00:04:11,260 --> 00:04:19,239
right from the beginning right so the

00:04:16,539 --> 00:04:20,829
internet is built on top of protocols

00:04:19,239 --> 00:04:25,090
and that is very very significant

00:04:20,829 --> 00:04:25,820
because based on this this architecture

00:04:25,090 --> 00:04:29,420
there

00:04:25,820 --> 00:04:32,270
the internet is scalable it embraces

00:04:29,420 --> 00:04:36,260
failure so failure is not something that

00:04:32,270 --> 00:04:38,480
is try to be avoided at all costs but

00:04:36,260 --> 00:04:41,510
it's something that if it happens things

00:04:38,480 --> 00:04:44,120
keep moving things keep going on you

00:04:41,510 --> 00:04:47,240
don't just flat-out fail and nothing

00:04:44,120 --> 00:04:50,480
happens anymore you still see one side

00:04:47,240 --> 00:04:53,420
even if another one goes down right it

00:04:50,480 --> 00:04:55,850
also delegates responsibility it's not a

00:04:53,420 --> 00:04:57,470
central authority that knows how to do

00:04:55,850 --> 00:04:58,940
everything and knows how to display

00:04:57,470 --> 00:05:00,650
everything it knows how to process

00:04:58,940 --> 00:05:03,380
everything so it delegates

00:05:00,650 --> 00:05:05,300
responsibility in there by the different

00:05:03,380 --> 00:05:07,280
kinds the actors within the internet

00:05:05,300 --> 00:05:11,090
that actually make up the Internet can

00:05:07,280 --> 00:05:14,270
all do their part in in bringing content

00:05:11,090 --> 00:05:16,760
and useful features and its language

00:05:14,270 --> 00:05:18,620
agnostic so it's not everything is

00:05:16,760 --> 00:05:21,380
written in PHP okay most is written in

00:05:18,620 --> 00:05:24,440
PHP but some of this is written in Java

00:05:21,380 --> 00:05:26,800
and Ruby and so and so forth and that's

00:05:24,440 --> 00:05:29,780
fine and it works in a place together

00:05:26,800 --> 00:05:31,220
now the what it all really just boils

00:05:29,780 --> 00:05:34,520
down to all the things that I just

00:05:31,220 --> 00:05:38,270
mentioned is it's decoupled so things

00:05:34,520 --> 00:05:40,640
are not tightly coupled together me

00:05:38,270 --> 00:05:45,890
enabling all these things that I just

00:05:40,640 --> 00:05:48,740
mentioned before and now let's look at

00:05:45,890 --> 00:05:51,140
how that could affect your the way that

00:05:48,740 --> 00:05:53,440
you're building an application so will

00:05:51,140 --> 00:05:56,480
later we'll look at more of a service

00:05:53,440 --> 00:05:59,390
approach to this but even inside your

00:05:56,480 --> 00:06:01,700
applications well you don't necessarily

00:05:59,390 --> 00:06:03,400
have to have HTTP or some other

00:06:01,700 --> 00:06:05,840
protocols for communicating between

00:06:03,400 --> 00:06:08,660
inside your applications you have a

00:06:05,840 --> 00:06:12,280
concept called interfaces and interfaces

00:06:08,660 --> 00:06:16,400
are in a sense programming lead level

00:06:12,280 --> 00:06:18,770
protocols however we haven't really been

00:06:16,400 --> 00:06:21,320
doing that a lot in with PHP

00:06:18,770 --> 00:06:23,150
specifically there's actually a group

00:06:21,320 --> 00:06:26,390
called the framework interoperability

00:06:23,150 --> 00:06:29,330
group they went through a couple names

00:06:26,390 --> 00:06:31,870
or non official names before but they

00:06:29,330 --> 00:06:33,950
basically brought the peas are zero

00:06:31,870 --> 00:06:36,590
convention which is basically a

00:06:33,950 --> 00:06:39,290
convention defining how you're supposed

00:06:36,590 --> 00:06:39,560
to structure your files on disk and how

00:06:39,290 --> 00:06:44,360
that

00:06:39,560 --> 00:06:46,610
maps then to autoloading but since then

00:06:44,360 --> 00:06:48,680
they've so they have the piece are 0

00:06:46,610 --> 00:06:50,300
then the FPS are one and two these are

00:06:48,680 --> 00:06:53,900
one and two are basically about coding

00:06:50,300 --> 00:06:55,639
style and that's it so far so now the

00:06:53,900 --> 00:06:59,419
list is basically talking about how to

00:06:55,639 --> 00:07:02,240
interpret white space like is a is it an

00:06:59,419 --> 00:07:04,280
empty line if I still have some spaces

00:07:02,240 --> 00:07:08,410
in there or not rather than really

00:07:04,280 --> 00:07:12,020
tackling important stuff like interfaces

00:07:08,410 --> 00:07:13,700
so right now I think they're about 20

00:07:12,020 --> 00:07:15,919
emails per day and really they just talk

00:07:13,700 --> 00:07:18,380
about coding style i think it's it's

00:07:15,919 --> 00:07:20,570
valid like I'm fine that there's a piece

00:07:18,380 --> 00:07:23,000
or one piece or two standard but I would

00:07:20,570 --> 00:07:27,620
much rather like to see us work towards

00:07:23,000 --> 00:07:30,470
standardized HTTP interfaces like what

00:07:27,620 --> 00:07:33,680
symfony2 in zend framework offer or HTTP

00:07:30,470 --> 00:07:36,650
kinds caching and logging and things

00:07:33,680 --> 00:07:39,080
like that because if we would have such

00:07:36,650 --> 00:07:41,150
interfaces people could create libraries

00:07:39,080 --> 00:07:43,070
that implement these interfaces and your

00:07:41,150 --> 00:07:45,110
application would no longer be bound to

00:07:43,070 --> 00:07:47,000
a specific implementation of that you

00:07:45,110 --> 00:07:49,280
could just swap that out and everything

00:07:47,000 --> 00:07:51,830
would keep working again keeping with

00:07:49,280 --> 00:07:54,860
the idea that i can use different

00:07:51,830 --> 00:07:56,930
browsers to browse the internet if i

00:07:54,860 --> 00:07:59,390
don't like how firefox works i can

00:07:56,930 --> 00:08:01,280
switch to chrome and the same thing

00:07:59,390 --> 00:08:03,440
we're currently not making possible in

00:08:01,280 --> 00:08:05,419
our applications because we're binding

00:08:03,440 --> 00:08:11,000
our applications to run specific

00:08:05,419 --> 00:08:13,490
implementation yeah so one one way to

00:08:11,000 --> 00:08:16,340
look at it is obviously interfaces are

00:08:13,490 --> 00:08:20,210
important inside a particular piece of

00:08:16,340 --> 00:08:22,700
software but then you can also go a bit

00:08:20,210 --> 00:08:24,470
further you can think about services

00:08:22,700 --> 00:08:27,139
that particular pieces of your

00:08:24,470 --> 00:08:29,139
applications supply so that takes us

00:08:27,139 --> 00:08:32,050
back to service oriented architecture

00:08:29,139 --> 00:08:35,930
you might remember all the hype about it

00:08:32,050 --> 00:08:39,709
few years back but there's actually some

00:08:35,930 --> 00:08:42,169
pretty good points there behind all that

00:08:39,709 --> 00:08:43,849
type most of the stuff that we use to

00:08:42,169 --> 00:08:46,250
call service oriented architecture you

00:08:43,849 --> 00:08:48,680
would now call cloud or you used to call

00:08:46,250 --> 00:08:52,640
Ajax or whatever so let's let's see what

00:08:48,680 --> 00:08:53,360
actually is there so if you think about

00:08:52,640 --> 00:08:55,519
a tip

00:08:53,360 --> 00:08:58,519
web application there's various

00:08:55,519 --> 00:09:01,459
different services that are always there

00:08:58,519 --> 00:09:02,990
there's some sort of account service

00:09:01,459 --> 00:09:04,880
which handles the logins the

00:09:02,990 --> 00:09:08,029
authorization who is permitted to do

00:09:04,880 --> 00:09:11,209
what then there is the data storage and

00:09:08,029 --> 00:09:13,190
retrieval service I call it API here and

00:09:11,209 --> 00:09:16,130
then there's the actual web front then

00:09:13,190 --> 00:09:19,100
where stuff happens now most web

00:09:16,130 --> 00:09:22,130
applications do all of these as one big

00:09:19,100 --> 00:09:25,130
monolithic block that's because that's

00:09:22,130 --> 00:09:28,459
the way frameworks and documentation and

00:09:25,130 --> 00:09:31,519
everything guides us to do it but really

00:09:28,459 --> 00:09:34,190
these things are separate and there's no

00:09:31,519 --> 00:09:36,380
particular reason why they should run in

00:09:34,190 --> 00:09:40,459
the same process or the same server or

00:09:36,380 --> 00:09:45,320
in any case be bound together that

00:09:40,459 --> 00:09:48,410
tightly when we were researching for

00:09:45,320 --> 00:09:52,250
this keynote I ran into a couple of very

00:09:48,410 --> 00:09:56,360
good blog posts about like how people

00:09:52,250 --> 00:10:00,199
think about building websites in the

00:09:56,360 --> 00:10:02,899
modern era not just trying to do

00:10:00,199 --> 00:10:05,329
everything as one application but

00:10:02,899 --> 00:10:08,230
instead taking different pieces of

00:10:05,329 --> 00:10:12,920
services on the internet and then

00:10:08,230 --> 00:10:15,279
binding your application to those and if

00:10:12,920 --> 00:10:18,890
necessary then building your own stuff

00:10:15,279 --> 00:10:21,110
alongside so if you need something that

00:10:18,890 --> 00:10:26,300
isn't available make it a separate

00:10:21,110 --> 00:10:28,699
service and one of them actually these

00:10:26,300 --> 00:10:33,970
guys were showing a very interesting

00:10:28,699 --> 00:10:37,459
tool called pros where they decoupled

00:10:33,970 --> 00:10:40,160
the act of web editing from the actual

00:10:37,459 --> 00:10:43,010
web server completely the content is

00:10:40,160 --> 00:10:45,440
stored in a git repository you log into

00:10:43,010 --> 00:10:47,779
your get up github account and you get

00:10:45,440 --> 00:10:49,820
the list of whatever content you have on

00:10:47,779 --> 00:10:54,290
your website and then you just go and

00:10:49,820 --> 00:10:57,440
edit it and this way the whole act of

00:10:54,290 --> 00:10:59,570
editing your stuff has nothing to do

00:10:57,440 --> 00:11:02,510
with the way it's published you could

00:10:59,570 --> 00:11:04,699
easily make this send emails or whatever

00:11:02,510 --> 00:11:07,310
you get versioning all that stuff comes

00:11:04,699 --> 00:11:12,710
there so this is a pretty nice way

00:11:07,310 --> 00:11:13,670
thinking about authoring now if you

00:11:12,710 --> 00:11:15,640
think about service-oriented

00:11:13,670 --> 00:11:19,580
architecture you know big words

00:11:15,640 --> 00:11:22,340
complicated ideas but the fact is most

00:11:19,580 --> 00:11:27,160
of you are actually already using

00:11:22,340 --> 00:11:27,160
service-oriented at least parts of it

00:11:27,460 --> 00:11:34,790
one good example our feeds if you're

00:11:32,990 --> 00:11:37,460
running a blog or a news website New

00:11:34,790 --> 00:11:39,800
York most likely providing a feed out of

00:11:37,460 --> 00:11:42,529
it there are also websites like planet

00:11:39,800 --> 00:11:46,100
PHP here which actually are completely

00:11:42,529 --> 00:11:49,400
built around the idea of feeds they grab

00:11:46,100 --> 00:11:51,710
blogs of I would imagine quite a lot of

00:11:49,400 --> 00:11:54,260
people in this room mesh them all

00:11:51,710 --> 00:12:02,630
together and provide one unified news

00:11:54,260 --> 00:12:05,330
feed another one nowadays website login

00:12:02,630 --> 00:12:08,000
is often looking more like a Formula One

00:12:05,330 --> 00:12:10,100
car because you have all these different

00:12:08,000 --> 00:12:13,550
logos sign in with Google Facebook

00:12:10,100 --> 00:12:18,440
Twitter whatever but that's a good

00:12:13,550 --> 00:12:20,570
example of delegating the act of

00:12:18,440 --> 00:12:22,640
authenticating a user to an external

00:12:20,570 --> 00:12:24,830
server service how many of you have done

00:12:22,640 --> 00:12:31,280
let's say Facebook all the vacation in a

00:12:24,830 --> 00:12:34,220
web app maybe one third yeah I'm not

00:12:31,280 --> 00:12:37,760
asking about the other services it just

00:12:34,220 --> 00:12:40,390
shows that this is actual service

00:12:37,760 --> 00:12:43,970
oriented stuff you are already doing

00:12:40,390 --> 00:12:47,900
commenting is another one all of us have

00:12:43,970 --> 00:12:49,700
written PHP scripts or CGI scripts in

00:12:47,900 --> 00:12:52,310
the good old times which would handle

00:12:49,700 --> 00:12:54,800
some sort of user comments and then of

00:12:52,310 --> 00:12:56,900
course you always get to the fun part of

00:12:54,800 --> 00:13:00,050
dealing with the comments spammers and

00:12:56,900 --> 00:13:01,459
all that there are pretty good services

00:13:00,050 --> 00:13:03,800
out there you can use the facebook

00:13:01,459 --> 00:13:06,980
comments you can use Disqus and more and

00:13:03,800 --> 00:13:09,950
more blogs and other web services are

00:13:06,980 --> 00:13:11,930
actually switching to using comments as

00:13:09,950 --> 00:13:14,390
a service instead of using their own

00:13:11,930 --> 00:13:16,490
code for that because a centralized

00:13:14,390 --> 00:13:18,980
service can provide a nicer user

00:13:16,490 --> 00:13:21,200
interface user experience and secondly

00:13:18,980 --> 00:13:24,770
they are a lot better capable

00:13:21,200 --> 00:13:26,540
to handle comment spam just because you

00:13:24,770 --> 00:13:30,320
know they lead with the same spammers

00:13:26,540 --> 00:13:32,000
and a lot of websites embedding is

00:13:30,320 --> 00:13:34,400
another one when i started doing

00:13:32,000 --> 00:13:35,840
websites ok when I started doing

00:13:34,400 --> 00:13:39,170
websites we didn't have video on the web

00:13:35,840 --> 00:13:41,690
at all but let's say 10 15 years ago you

00:13:39,170 --> 00:13:43,780
would have to go through real networks

00:13:41,690 --> 00:13:46,610
or some other company and by this big

00:13:43,780 --> 00:13:48,020
expensive media streaming service just

00:13:46,610 --> 00:13:51,650
to be able to have video on your website

00:13:48,020 --> 00:13:53,990
or slides or whatever nowadays all of us

00:13:51,650 --> 00:13:58,640
are just embedding the stuff from

00:13:53,990 --> 00:14:00,590
YouTube Vimeo whatever analytics is

00:13:58,640 --> 00:14:02,750
another one instead of installing your

00:14:00,590 --> 00:14:04,670
own analysis tools you're probably using

00:14:02,750 --> 00:14:07,400
google analytics WebTrends something

00:14:04,670 --> 00:14:14,030
like that all of these are services that

00:14:07,400 --> 00:14:16,610
you use search again we all use to

00:14:14,030 --> 00:14:18,470
install these custom search engines but

00:14:16,610 --> 00:14:21,380
nowadays you know Google does a pretty

00:14:18,470 --> 00:14:28,430
good job of searching so just why not

00:14:21,380 --> 00:14:31,180
use their search as a service then you

00:14:28,430 --> 00:14:35,480
get to build bit more interesting things

00:14:31,180 --> 00:14:38,450
you can do actual you can also make your

00:14:35,480 --> 00:14:41,030
website be a service when you're

00:14:38,450 --> 00:14:42,340
publishing HTML pages you can use

00:14:41,030 --> 00:14:47,030
semantic markup so you can use

00:14:42,340 --> 00:14:49,340
microformats microdata or rdfa to

00:14:47,030 --> 00:14:53,480
explain the things you're showing on a

00:14:49,340 --> 00:14:55,640
web page and this is where actually your

00:14:53,480 --> 00:14:58,250
website becomes a service to other

00:14:55,640 --> 00:15:00,500
systems like in this case a google

00:14:58,250 --> 00:15:03,290
search so you can look at the first

00:15:00,500 --> 00:15:05,240
result there it's not an ad it's just

00:15:03,290 --> 00:15:07,430
the regular search result just like the

00:15:05,240 --> 00:15:09,170
others the different the reason why it

00:15:07,430 --> 00:15:11,960
looks different is because they are

00:15:09,170 --> 00:15:14,480
using semantic markup to tell okay this

00:15:11,960 --> 00:15:17,240
is a recipe here are the ratings for it

00:15:14,480 --> 00:15:20,630
here's a picture and then the search

00:15:17,240 --> 00:15:23,420
engine shows it so in this case it's

00:15:20,630 --> 00:15:25,610
really your website that is the service

00:15:23,420 --> 00:15:29,180
and Google that is the client to that

00:15:25,610 --> 00:15:33,710
service and you get better results I've

00:15:29,180 --> 00:15:34,760
heard reports of getting like ten twenty

00:15:33,710 --> 00:15:37,180
percent

00:15:34,760 --> 00:15:39,410
increase just because of doing this and

00:15:37,180 --> 00:15:42,650
then when we have semantic markup you

00:15:39,410 --> 00:15:44,150
can actually do other cool stuff like my

00:15:42,650 --> 00:15:45,440
tool will create Jess that we are going

00:15:44,150 --> 00:15:50,810
to be talking about more in the next

00:15:45,440 --> 00:15:52,550
session we have this one here does uses

00:15:50,810 --> 00:15:55,250
the same semantic markup that Google

00:15:52,550 --> 00:15:58,610
uses you had at this JavaScript tool to

00:15:55,250 --> 00:16:00,740
your web page and it makes all of your

00:15:58,610 --> 00:16:02,780
page or the relevant part of your page

00:16:00,740 --> 00:16:04,730
editable you just edit it where it's

00:16:02,780 --> 00:16:07,730
shown you click Save it goes to your

00:16:04,730 --> 00:16:09,410
server this is something that now an

00:16:07,730 --> 00:16:11,420
increasing amount of different content

00:16:09,410 --> 00:16:13,670
management systems is doing and you can

00:16:11,420 --> 00:16:15,920
do the same for your own application so

00:16:13,670 --> 00:16:18,350
while you are helping Google understand

00:16:15,920 --> 00:16:22,790
your content you can also help your end

00:16:18,350 --> 00:16:25,220
users to produce the data and of course

00:16:22,790 --> 00:16:29,350
there's all these different pieces of

00:16:25,220 --> 00:16:32,180
infrastructure this is a bit more a

00:16:29,350 --> 00:16:36,740
point where it really depends on what

00:16:32,180 --> 00:16:38,540
you need and what you can do but more

00:16:36,740 --> 00:16:40,250
and more parts of what you're running

00:16:38,540 --> 00:16:42,710
you can actually get from somebody else

00:16:40,250 --> 00:16:46,880
you can have Microsoft host your message

00:16:42,710 --> 00:16:49,130
queue or you can have reddy's host your

00:16:46,880 --> 00:16:51,560
database and you can really mix and

00:16:49,130 --> 00:16:54,260
match there there are lots of lots and

00:16:51,560 --> 00:16:56,810
lots of specialized service providers

00:16:54,260 --> 00:16:59,630
there you don't have to do email sending

00:16:56,810 --> 00:17:01,340
on your own server or SMS or whatever

00:16:59,630 --> 00:17:03,380
you can get all of these different

00:17:01,340 --> 00:17:06,320
building blocks out of the Internet of

00:17:03,380 --> 00:17:08,750
course most of them come with a some

00:17:06,320 --> 00:17:11,510
sort of subscription price so in the end

00:17:08,750 --> 00:17:15,370
it really depends maybe it might maybe

00:17:11,510 --> 00:17:15,370
cheaper to do it on your own maybe not

00:17:15,699 --> 00:17:21,650
right of course there's some issues with

00:17:18,829 --> 00:17:23,810
that but actually I want to add sort of

00:17:21,650 --> 00:17:26,930
more of a personal experience with with

00:17:23,810 --> 00:17:29,180
exactly that so in our the company I

00:17:26,930 --> 00:17:32,240
work for leap we had this very very

00:17:29,180 --> 00:17:35,180
ancient CMS we've now migrated our

00:17:32,240 --> 00:17:37,010
homepage to something newer but the

00:17:35,180 --> 00:17:39,140
content authoring we didn't migrate in

00:17:37,010 --> 00:17:41,420
that process so right now you still have

00:17:39,140 --> 00:17:45,290
to use the old ancient CMS if you want

00:17:41,420 --> 00:17:47,330
to write a blog post and that really

00:17:45,290 --> 00:17:48,680
became a major annoyance for people and

00:17:47,330 --> 00:17:51,890
since we did want to

00:17:48,680 --> 00:17:55,150
encourage all the teams to blog about

00:17:51,890 --> 00:17:57,830
you know the projects that they've done

00:17:55,150 --> 00:18:01,550
Hagel one of the founders actually he

00:17:57,830 --> 00:18:04,370
just created a github project and he's

00:18:01,550 --> 00:18:05,960
now just has a cron job monitoring

00:18:04,370 --> 00:18:09,470
anything that gets added to that github

00:18:05,960 --> 00:18:12,410
project and all you have to do to add a

00:18:09,470 --> 00:18:14,390
new blog post is to put a markdown file

00:18:12,410 --> 00:18:16,310
into that good repository and

00:18:14,390 --> 00:18:19,820
automatically will be added to the blog

00:18:16,310 --> 00:18:21,620
so we sort we solve two things there so

00:18:19,820 --> 00:18:23,240
now we don't need to set up accounts for

00:18:21,620 --> 00:18:24,710
everybody on the CMS anymore because

00:18:23,240 --> 00:18:26,150
they already have a github account and

00:18:24,710 --> 00:18:29,030
they have the permissions through github

00:18:26,150 --> 00:18:30,980
so we solved authentication that way and

00:18:29,030 --> 00:18:33,740
the authoring everybody can use whatever

00:18:30,980 --> 00:18:36,380
editor they prefer right so it's a very

00:18:33,740 --> 00:18:39,380
very simple solution to something that

00:18:36,380 --> 00:18:40,850
was a major annoyance right and again

00:18:39,380 --> 00:18:44,750
it's actually this is all using free

00:18:40,850 --> 00:18:47,870
services but anyway enough of the happy

00:18:44,750 --> 00:18:51,980
talk there are we see some problems

00:18:47,870 --> 00:18:54,740
going into the cloud or whatever right

00:18:51,980 --> 00:18:58,460
so this is the blog post talks about

00:18:54,740 --> 00:19:03,260
some of the problems so obviously when

00:18:58,460 --> 00:19:04,850
you get started service are oriented

00:19:03,260 --> 00:19:06,980
architectures can take longer to get

00:19:04,850 --> 00:19:08,660
started like just you know getting all

00:19:06,980 --> 00:19:11,230
these pieces together setting them up

00:19:08,660 --> 00:19:13,850
you know getting your account set up

00:19:11,230 --> 00:19:16,790
connecting it all together can take

00:19:13,850 --> 00:19:18,740
longer at the same time if you just

00:19:16,790 --> 00:19:22,580
think about like I want to create a new

00:19:18,740 --> 00:19:24,380
website then obviously you could

00:19:22,580 --> 00:19:26,540
download something like drupal and get

00:19:24,380 --> 00:19:28,400
started and if you know Drupal well then

00:19:26,540 --> 00:19:31,160
probably you're going to be very quick

00:19:28,400 --> 00:19:33,530
and creating a new website if not then

00:19:31,160 --> 00:19:35,600
maybe something simpler just using

00:19:33,530 --> 00:19:38,050
Jekyll and discuss might even get you

00:19:35,600 --> 00:19:40,340
there faster and you would be using

00:19:38,050 --> 00:19:43,010
separate services that you can scale

00:19:40,340 --> 00:19:46,610
separately and in advance separately in

00:19:43,010 --> 00:19:47,840
terms of features now another and i

00:19:46,610 --> 00:19:49,850
think that's that's actually one of the

00:19:47,840 --> 00:19:52,370
biggest concerns that i personally have

00:19:49,850 --> 00:19:54,410
is that you'll run into different api's

00:19:52,370 --> 00:19:56,720
they might not be compatible with each

00:19:54,410 --> 00:20:00,110
other and as you're building your own

00:19:56,720 --> 00:20:02,029
services and you're especially initially

00:20:00,110 --> 00:20:04,190
you're going to be changing a lot

00:20:02,029 --> 00:20:07,940
things and then your api's are going to

00:20:04,190 --> 00:20:11,479
get out of date API versioning is sort

00:20:07,940 --> 00:20:14,330
of an iffy topic it gets can get quite

00:20:11,479 --> 00:20:17,989
annoying at some point to maintain older

00:20:14,330 --> 00:20:20,359
api's and migrating everything at once

00:20:17,989 --> 00:20:22,869
if it's all one application might be

00:20:20,359 --> 00:20:26,690
easier in terms of just you know

00:20:22,869 --> 00:20:28,549
organizational aspects another thing is

00:20:26,690 --> 00:20:30,349
that to benefit from all these services

00:20:28,549 --> 00:20:33,409
architecture and if you're building your

00:20:30,349 --> 00:20:35,389
own services on obviously what you need

00:20:33,409 --> 00:20:36,919
to do is then also to separate it on

00:20:35,389 --> 00:20:39,919
different servers if you want to be able

00:20:36,919 --> 00:20:41,690
to scale them separately however if you

00:20:39,919 --> 00:20:43,070
have just a very small project you

00:20:41,690 --> 00:20:45,019
probably don't want to set up three

00:20:43,070 --> 00:20:46,489
different virtual machines for all the

00:20:45,019 --> 00:20:49,190
different services so that's another

00:20:46,489 --> 00:20:51,080
overhead to consider when you're doing

00:20:49,190 --> 00:20:52,999
that then again there are lots of

00:20:51,080 --> 00:20:54,859
providers that are making it quite easy

00:20:52,999 --> 00:20:57,950
to set up separate virtual machines and

00:20:54,859 --> 00:21:00,499
scale them without having to invest more

00:20:57,950 --> 00:21:02,899
money than with a single server that has

00:21:00,499 --> 00:21:06,529
the same resources in terms of

00:21:02,899 --> 00:21:10,179
processing raw processing power and I

00:21:06,529 --> 00:21:13,820
and that's that's another big topic here

00:21:10,179 --> 00:21:15,499
you're sort of on your own even though

00:21:13,820 --> 00:21:19,729
you can't solve everything on your own

00:21:15,499 --> 00:21:23,869
so you're going to deal with things that

00:21:19,729 --> 00:21:26,389
are maybe less supported or less

00:21:23,869 --> 00:21:29,599
well-known because most people are still

00:21:26,389 --> 00:21:31,609
going doing some framework as their

00:21:29,599 --> 00:21:33,589
architecture not many people are

00:21:31,609 --> 00:21:38,119
thinking in terms of using all these

00:21:33,589 --> 00:21:40,909
services and so yeah there might be more

00:21:38,119 --> 00:21:42,889
more work for you to do in terms of the

00:21:40,909 --> 00:21:45,979
learning experience and setting this up

00:21:42,889 --> 00:21:48,619
at the same time I think it's a it's a

00:21:45,979 --> 00:21:52,580
trend that will continue and therefore I

00:21:48,619 --> 00:21:55,609
think more people will become skilled in

00:21:52,580 --> 00:21:57,229
these kinds of setups and there's

00:21:55,609 --> 00:22:00,440
obviously lots more things to consider

00:21:57,229 --> 00:22:02,779
like if I have a separate service for

00:22:00,440 --> 00:22:05,509
the authentication separate service for

00:22:02,779 --> 00:22:07,519
my for my comments and another service

00:22:05,509 --> 00:22:09,559
doing something else how do I write a

00:22:07,519 --> 00:22:12,409
query that spans all these three

00:22:09,559 --> 00:22:15,080
different services right with SQL my own

00:22:12,409 --> 00:22:15,920
database it's quite easy to do they're

00:22:15,080 --> 00:22:17,990
not any

00:22:15,920 --> 00:22:19,400
standards for doing that quite yet and

00:22:17,990 --> 00:22:22,160
then there will be performance

00:22:19,400 --> 00:22:24,980
considerations there are other aspects

00:22:22,160 --> 00:22:27,080
as well just legal things terms of

00:22:24,980 --> 00:22:28,730
service like if the service is down it

00:22:27,080 --> 00:22:30,680
might mean that you're losing a lot of

00:22:28,730 --> 00:22:32,150
business but the contract that you're

00:22:30,680 --> 00:22:34,490
being offered doesn't care about that

00:22:32,150 --> 00:22:37,460
there might be legal problems like is

00:22:34,490 --> 00:22:41,240
discussed even legal in Germany because

00:22:37,460 --> 00:22:43,160
you're storing user data outside of

00:22:41,240 --> 00:22:46,610
Germany outside of the jurisdiction of

00:22:43,160 --> 00:22:50,300
Germany and that doesn't quite fly well

00:22:46,610 --> 00:22:52,250
with the German privacy laws there may

00:22:50,300 --> 00:22:54,050
be missing features and again you might

00:22:52,250 --> 00:22:56,690
find that these are very very important

00:22:54,050 --> 00:22:58,160
but the provider doesn't care so what do

00:22:56,690 --> 00:22:59,660
you have to do then you still have to

00:22:58,160 --> 00:23:02,840
create your own service integrate that

00:22:59,660 --> 00:23:04,490
with the other service and you know so

00:23:02,840 --> 00:23:07,250
that that creates some some some

00:23:04,490 --> 00:23:10,580
overheads and things like that I still

00:23:07,250 --> 00:23:12,500
think that thinking in and in terms of

00:23:10,580 --> 00:23:15,530
service oriented architecture and

00:23:12,500 --> 00:23:17,750
reusing these services like we using

00:23:15,530 --> 00:23:19,790
flickr for image upload and things like

00:23:17,750 --> 00:23:22,460
that will save you a lot of time when

00:23:19,790 --> 00:23:24,830
you get when you get going and can also

00:23:22,460 --> 00:23:26,420
help you scale but they are definitely

00:23:24,830 --> 00:23:27,710
these problems and these are the things

00:23:26,420 --> 00:23:30,230
that you need to consider when you're

00:23:27,710 --> 00:23:33,020
making these decisions and you also need

00:23:30,230 --> 00:23:40,580
to factor that in when you're setting

00:23:33,020 --> 00:23:44,510
the setting up your project yeah so once

00:23:40,580 --> 00:23:46,490
you overstep all those hurdles the next

00:23:44,510 --> 00:23:49,010
big question is how do you actually

00:23:46,490 --> 00:23:51,880
manage this kind of architecture how do

00:23:49,010 --> 00:23:54,140
you how do you build these things and

00:23:51,880 --> 00:23:56,660
there's a couple of couple of good

00:23:54,140 --> 00:23:57,860
techniques here one of them is each side

00:23:56,660 --> 00:23:59,450
includes so if you've been running

00:23:57,860 --> 00:24:01,760
varnish or something you might be

00:23:59,450 --> 00:24:05,990
already familiar so if you look at the

00:24:01,760 --> 00:24:08,960
yahoo page for instance you can see

00:24:05,990 --> 00:24:11,680
there's a lot of content there and you

00:24:08,960 --> 00:24:14,330
could easily think of this as different

00:24:11,680 --> 00:24:17,540
with bits and pieces coming from

00:24:14,330 --> 00:24:19,790
different services so something that

00:24:17,540 --> 00:24:23,060
it's something like H side includes can

00:24:19,790 --> 00:24:27,080
actually go and talk to different parts

00:24:23,060 --> 00:24:30,559
of your infrastructure to serve

00:24:27,080 --> 00:24:32,570
a single page to the end user so if your

00:24:30,559 --> 00:24:35,299
stock quotes or your weather information

00:24:32,570 --> 00:24:38,480
are handled by separate service and your

00:24:35,299 --> 00:24:39,740
newsfeed by another then with each side

00:24:38,480 --> 00:24:42,799
includes you can actually bring them

00:24:39,740 --> 00:24:45,919
together present one consistent web page

00:24:42,799 --> 00:24:48,529
to the end user and still handle caching

00:24:45,919 --> 00:24:50,630
and all that stuff efficiently so this

00:24:48,529 --> 00:24:55,220
is a good way to kind of tie up the user

00:24:50,630 --> 00:24:58,789
experience then the other thing is how

00:24:55,220 --> 00:25:01,639
to deal with all these events how to

00:24:58,789 --> 00:25:04,580
connect these services together so there

00:25:01,639 --> 00:25:08,059
at least my experience message queues

00:25:04,580 --> 00:25:10,100
are highly useful so you could do

00:25:08,059 --> 00:25:13,639
something like this in this case we have

00:25:10,100 --> 00:25:15,529
an ORM that sends storage events like

00:25:13,639 --> 00:25:18,620
this and this record was created or

00:25:15,529 --> 00:25:19,789
updated we go to a message router and we

00:25:18,620 --> 00:25:21,830
look at the different things we are

00:25:19,789 --> 00:25:23,929
actually interested in and we sent them

00:25:21,830 --> 00:25:25,610
to different business processes maybe if

00:25:23,929 --> 00:25:27,740
you create a new user we need to send

00:25:25,610 --> 00:25:31,059
them an welcome email instead of

00:25:27,740 --> 00:25:34,490
handling that directly inside our

00:25:31,059 --> 00:25:36,799
database classes we can separate that

00:25:34,490 --> 00:25:39,289
completely out it can run our separate

00:25:36,799 --> 00:25:41,299
machine maybe even be done in this

00:25:39,289 --> 00:25:43,820
different programming language and this

00:25:41,299 --> 00:25:47,019
way you can have a lot more flexibility

00:25:43,820 --> 00:25:49,789
the other important piece here is the

00:25:47,019 --> 00:25:53,630
business metrics so this might be

00:25:49,789 --> 00:25:55,760
something useful you can track every

00:25:53,630 --> 00:25:58,279
message coming through anything that is

00:25:55,760 --> 00:26:00,409
saved to any parts of your service

00:25:58,279 --> 00:26:02,450
infrastructure you can at least get

00:26:00,409 --> 00:26:04,760
information this is how many comments

00:26:02,450 --> 00:26:07,010
were created yesterday this is how many

00:26:04,760 --> 00:26:09,740
users registered or this many customers

00:26:07,010 --> 00:26:11,539
paid an invoice and this can help you

00:26:09,740 --> 00:26:13,850
figure out where the scalability

00:26:11,539 --> 00:26:16,010
bottlenecks are it can also bring you

00:26:13,850 --> 00:26:18,350
very valuable insights about how your

00:26:16,010 --> 00:26:23,120
business how your web application is

00:26:18,350 --> 00:26:26,690
actually operating yeah i think the the

00:26:23,120 --> 00:26:31,690
message queue architecture is something

00:26:26,690 --> 00:26:34,940
that is very very useful going forward

00:26:31,690 --> 00:26:36,770
where you really enable also your

00:26:34,940 --> 00:26:39,830
different teams within your organization

00:26:36,770 --> 00:26:40,920
to come up with different questions or

00:26:39,830 --> 00:26:44,130
challenges

00:26:40,920 --> 00:26:47,730
without having to talk to each team so

00:26:44,130 --> 00:26:49,980
again this this metrics example is there

00:26:47,730 --> 00:26:52,380
might be one team writing or adding the

00:26:49,980 --> 00:26:54,900
new commenting and then there's another

00:26:52,380 --> 00:26:57,180
team that is integrated interested in

00:26:54,900 --> 00:26:59,490
the metrics and without a message queue

00:26:57,180 --> 00:27:01,740
these two teams have to do hold meetings

00:26:59,490 --> 00:27:04,380
together and decide on a pis and things

00:27:01,740 --> 00:27:05,940
like that if the entire organization has

00:27:04,380 --> 00:27:09,240
already agreed on how to put a message

00:27:05,940 --> 00:27:11,430
on a queue then that's it you don't have

00:27:09,240 --> 00:27:14,160
to have a meeting just because you want

00:27:11,430 --> 00:27:15,870
some sort of integration point all you

00:27:14,160 --> 00:27:18,810
have to ensure that everybody puts any

00:27:15,870 --> 00:27:20,460
relevant event into the queue and then

00:27:18,810 --> 00:27:23,970
everybody can take out the pieces that

00:27:20,460 --> 00:27:26,370
they care about but any rate so let's

00:27:23,970 --> 00:27:31,160
bring that back a little bit to the PHP

00:27:26,370 --> 00:27:35,030
world and so earlier I was talking about

00:27:31,160 --> 00:27:37,500
decoupling on the application level and

00:27:35,030 --> 00:27:40,620
there is already something that I think

00:27:37,500 --> 00:27:42,570
will be very very critical in that trend

00:27:40,620 --> 00:27:44,700
and that's called composure it's a

00:27:42,570 --> 00:27:48,930
dependency manager there's a website

00:27:44,700 --> 00:27:51,180
called packages orgy where anybody can

00:27:48,930 --> 00:27:53,250
register their package however if you

00:27:51,180 --> 00:27:54,680
have your own library set our internal

00:27:53,250 --> 00:27:57,480
that you don't want to make public

00:27:54,680 --> 00:28:01,790
there's actually also a sub-project of

00:27:57,480 --> 00:28:04,080
the composer project called sahi that

00:28:01,790 --> 00:28:06,930
allows you to set up your own package

00:28:04,080 --> 00:28:09,900
repository and let still leverage

00:28:06,930 --> 00:28:13,560
composer to define your dependencies now

00:28:09,900 --> 00:28:17,340
I was also talking about interfaces so

00:28:13,560 --> 00:28:20,190
this is an example of or an excerpt from

00:28:17,340 --> 00:28:23,160
a composer file it's basically you write

00:28:20,190 --> 00:28:26,580
it down in JSON and so this is the the

00:28:23,160 --> 00:28:29,970
jackalope package and Jackalope

00:28:26,580 --> 00:28:32,580
implements standardized interface set of

00:28:29,970 --> 00:28:34,850
interfaces called peach pcr and there

00:28:32,580 --> 00:28:37,080
are multiple implementations of that and

00:28:34,850 --> 00:28:39,480
so what you can do in your composure

00:28:37,080 --> 00:28:43,070
Jason you can say that I provide an

00:28:39,480 --> 00:28:45,930
implementation of PHP CR and then any

00:28:43,070 --> 00:28:47,790
application code that's written against

00:28:45,930 --> 00:28:50,250
these interfaces the PHP see our

00:28:47,790 --> 00:28:53,250
interfaces all is going to say I'm going

00:28:50,250 --> 00:28:54,580
to require peach PC a peach pcr

00:28:53,250 --> 00:28:58,830
implementation

00:28:54,580 --> 00:29:01,630
right and so as soon as anybody adds any

00:28:58,830 --> 00:29:04,390
like as soon as you add Jackalope to

00:29:01,630 --> 00:29:06,640
your project that p it basically means

00:29:04,390 --> 00:29:09,549
that it has an implementation of peach

00:29:06,640 --> 00:29:12,100
pcr so i can have another package that

00:29:09,549 --> 00:29:14,200
says again I need peach PCR to work all

00:29:12,100 --> 00:29:15,850
is going to state is I need a PHP see

00:29:14,200 --> 00:29:18,760
our implementation and by adding

00:29:15,850 --> 00:29:22,659
Jackalope that dependency is solved so

00:29:18,760 --> 00:29:25,000
if we start working on more interfaces

00:29:22,659 --> 00:29:27,029
for PHP again for HTTP clients for

00:29:25,000 --> 00:29:30,309
caching and logging with this approach

00:29:27,029 --> 00:29:32,230
any package that just needs caching all

00:29:30,309 --> 00:29:35,649
it has to say is I need a cache

00:29:32,230 --> 00:29:38,889
implementation and following that set of

00:29:35,649 --> 00:29:41,320
interfaces and I need a log set of law

00:29:38,889 --> 00:29:45,429
classes that implement these interfaces

00:29:41,320 --> 00:29:47,669
so I think if we really push hard and

00:29:45,429 --> 00:29:50,320
work through the challenge of

00:29:47,669 --> 00:29:52,750
standardizing these interfaces together

00:29:50,320 --> 00:29:55,630
with composer we will have finally a way

00:29:52,750 --> 00:29:57,130
of expressing that in a way that

00:29:55,630 --> 00:29:59,380
actually lets us separate the

00:29:57,130 --> 00:30:04,179
dependencies and create cleaner

00:29:59,380 --> 00:30:07,120
applications I'm working on a project

00:30:04,179 --> 00:30:10,330
called symfony2 cmf there we trying to

00:30:07,120 --> 00:30:13,389
follow these principles so we're using

00:30:10,330 --> 00:30:18,010
PHP CR for quantum storage again this is

00:30:13,389 --> 00:30:20,320
a specification of just interfaces and

00:30:18,010 --> 00:30:23,230
there we've actually set up on the

00:30:20,320 --> 00:30:25,809
example project where we originally used

00:30:23,230 --> 00:30:27,789
one implementation and just by changing

00:30:25,809 --> 00:30:31,299
configuration we can use any of the

00:30:27,789 --> 00:30:34,570
other implementations just fine we're

00:30:31,299 --> 00:30:37,630
also using symfony2 obviously you know

00:30:34,570 --> 00:30:39,070
well written framework same approach

00:30:37,630 --> 00:30:40,750
could be applied using zend framework

00:30:39,070 --> 00:30:44,200
any other framework for that matter

00:30:40,750 --> 00:30:47,260
we're using Henry's create Jess which

00:30:44,200 --> 00:30:49,870
allows us to really keep the service

00:30:47,260 --> 00:30:51,429
side separate from the from the client

00:30:49,870 --> 00:30:54,820
side because all we have to do on the

00:30:51,429 --> 00:30:56,679
server side is generate rdfa and then

00:30:54,820 --> 00:30:58,750
create JS can process that and then

00:30:56,679 --> 00:31:02,649
create jess sends us package.json that

00:30:58,750 --> 00:31:03,850
we then store in the database but as a

00:31:02,649 --> 00:31:07,029
matter of fact if somebody doesn't like

00:31:03,850 --> 00:31:08,380
trade Jess or the UI or whatever you can

00:31:07,029 --> 00:31:10,770
just throw that out and still

00:31:08,380 --> 00:31:14,560
use the cmf and just create a new UI

00:31:10,770 --> 00:31:16,930
using whatever they prefer xjs etc and

00:31:14,560 --> 00:31:19,510
then we're also going to use varnish for

00:31:16,930 --> 00:31:21,760
caching one thing that we currently are

00:31:19,510 --> 00:31:25,810
missing on here is where as the other

00:31:21,760 --> 00:31:27,160
services like Flickr vimeo etc for image

00:31:25,810 --> 00:31:29,860
processing and that's definitely

00:31:27,160 --> 00:31:31,480
something that should be covered as well

00:31:29,860 --> 00:31:33,670
and i think that's actually something

00:31:31,480 --> 00:31:39,220
that most users nowadays expect from a

00:31:33,670 --> 00:31:41,170
CMS so yeah kind of to draw some

00:31:39,220 --> 00:31:43,750
conclusions the important lesson here is

00:31:41,170 --> 00:31:46,590
when you're building a larger piece of

00:31:43,750 --> 00:31:49,690
software think in the terms of protocols

00:31:46,590 --> 00:31:52,060
what parts of your software could be

00:31:49,690 --> 00:31:54,070
separate what kind of protocols they

00:31:52,060 --> 00:31:57,250
would they need for communicating with

00:31:54,070 --> 00:32:00,130
each other in some cases it's fine to do

00:31:57,250 --> 00:32:02,350
this as interfaces if you're doing to

00:32:00,130 --> 00:32:05,140
these two pieces in PHP and you know

00:32:02,350 --> 00:32:07,660
that from now to eternity they will be

00:32:05,140 --> 00:32:11,560
PHP then working with interfaces is fine

00:32:07,660 --> 00:32:13,030
enough if you if you know there might be

00:32:11,560 --> 00:32:15,700
different teams working with different

00:32:13,030 --> 00:32:18,190
languages or you might want to scale

00:32:15,700 --> 00:32:21,420
things independently then you want to

00:32:18,190 --> 00:32:24,520
think about some sort of wire protocol

00:32:21,420 --> 00:32:26,530
the other thing is don't even though you

00:32:24,520 --> 00:32:28,360
know you will need to build services you

00:32:26,530 --> 00:32:30,730
need to build new applications we use

00:32:28,360 --> 00:32:32,920
all the existing infrastructure this

00:32:30,730 --> 00:32:35,260
might mean instead of writing your own

00:32:32,920 --> 00:32:37,360
library to do authentication or logging

00:32:35,260 --> 00:32:39,880
go to packages or if you're using

00:32:37,360 --> 00:32:42,910
node.js to NPM to all these different

00:32:39,880 --> 00:32:45,550
code repositories and get the library

00:32:42,910 --> 00:32:47,380
that does it there might be a hosted

00:32:45,550 --> 00:32:49,990
service doing the thing you need then

00:32:47,380 --> 00:32:53,230
just go and use it you know the point is

00:32:49,990 --> 00:32:57,310
not to have more code the point is to

00:32:53,230 --> 00:32:59,050
have more functionality so yeah the

00:32:57,310 --> 00:33:01,000
other thing is really when you're

00:32:59,050 --> 00:33:03,640
building our own stuff build things as

00:33:01,000 --> 00:33:07,290
services don't build these monolithic

00:33:03,640 --> 00:33:10,510
blobs it might be that it's that you are

00:33:07,290 --> 00:33:12,850
your own services consumer but it might

00:33:10,510 --> 00:33:14,830
also be that somebody else in your

00:33:12,850 --> 00:33:17,590
organization or some business partner

00:33:14,830 --> 00:33:20,140
needs that data and then having an

00:33:17,590 --> 00:33:22,450
exposed standardized service in

00:33:20,140 --> 00:33:25,560
interface makes a lot of sense

00:33:22,450 --> 00:33:25,560

YouTube URL: https://www.youtube.com/watch?v=VQdl7J_24PA


