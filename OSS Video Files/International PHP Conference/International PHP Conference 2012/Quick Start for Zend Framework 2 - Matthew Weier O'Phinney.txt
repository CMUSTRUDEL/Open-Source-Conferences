Title: Quick Start for Zend Framework 2 - Matthew Weier O'Phinney
Publication date: 2013-05-10
Playlist: International PHP Conference 2012
Description: 
	Matthew Weier O`Phinney, Zend Technologies, presents a simple web application built with Zend Framework 2. He shows the new features of the framework, including its modular architecture, the Event Manager, and more. The aim of this talk is provide developers with the basic knowledge needed to develop applications on ZF2.

More Information: https://phpconference.com/en
Captions: 
	00:00:00,000 --> 00:00:08,580
[Music]

00:00:06,500 --> 00:00:11,759
good afternoon everybody get their

00:00:08,580 --> 00:00:14,360
coffee and tea no nobody's gonna sleep

00:00:11,759 --> 00:00:14,360
today right

00:00:15,139 --> 00:00:19,680
okay we're here for his in framework two

00:00:17,490 --> 00:00:21,840
I believe there's another talk I'm not

00:00:19,680 --> 00:00:25,260
speaking in German I don't know German

00:00:21,840 --> 00:00:27,029
I'm sorry but I'm very pleased to be

00:00:25,260 --> 00:00:30,990
here in Berlin for IPC this year so

00:00:27,029 --> 00:00:32,130
thanks for having me I about me I have

00:00:30,990 --> 00:00:33,510
actually been surprised this when the

00:00:32,130 --> 00:00:35,969
first conferences I walked around that I

00:00:33,510 --> 00:00:37,170
haven't had people trying to get my

00:00:35,969 --> 00:00:38,399
attention the whole time which is kind

00:00:37,170 --> 00:00:40,500
of cool

00:00:38,399 --> 00:00:43,200
my name is Mathew we're affinis my

00:00:40,500 --> 00:00:44,340
wife's name was weird and actually as it

00:00:43,200 --> 00:00:46,620
turns out they are from Germanic

00:00:44,340 --> 00:00:49,200
heritage so it should be wire but we

00:00:46,620 --> 00:00:51,690
don't say that in the US my twitter

00:00:49,200 --> 00:00:54,239
handle is real finis I've been doing PHP

00:00:51,690 --> 00:00:56,850
since 2000 I've been doing other

00:00:54,239 --> 00:00:58,350
programming before that my degree is not

00:00:56,850 --> 00:01:02,899
in computer science although I started

00:00:58,350 --> 00:01:04,769
in computer science I actually learned

00:01:02,899 --> 00:01:06,750
object-oriented programming in Perl

00:01:04,769 --> 00:01:09,600
first so it's been a really interesting

00:01:06,750 --> 00:01:11,909
journey I've been contributing to Zen

00:01:09,600 --> 00:01:14,430
framework since January of 2006 it was

00:01:11,909 --> 00:01:17,670
announced as a project in October of

00:01:14,430 --> 00:01:19,140
2005 at the first design con and of

00:01:17,670 --> 00:01:21,869
course then we have an internal mandates

00:01:19,140 --> 00:01:24,659
to utilize an framework within the

00:01:21,869 --> 00:01:27,180
company and I was working on the the CMS

00:01:24,659 --> 00:01:29,040
solution and back-end services so I

00:01:27,180 --> 00:01:30,900
started off doing actually an XML RPC

00:01:29,040 --> 00:01:32,549
server and then gradually more and more

00:01:30,900 --> 00:01:34,920
until Andy asked me to be on the

00:01:32,549 --> 00:01:39,119
framework team I've been leading the

00:01:34,920 --> 00:01:40,650
team since April of 2008 I've got two

00:01:39,119 --> 00:01:42,720
other developers on the team so there's

00:01:40,650 --> 00:01:44,850
only three of us believe it or not but

00:01:42,720 --> 00:01:46,680
we are really an army of hundreds

00:01:44,850 --> 00:01:49,140
because of the number of contributors I

00:01:46,680 --> 00:01:51,270
love open-source it's just one of those

00:01:49,140 --> 00:01:52,350
things I love I feel really fortunate

00:01:51,270 --> 00:01:54,810
that I can do

00:01:52,350 --> 00:01:59,159
open-source as my professional job which

00:01:54,810 --> 00:02:00,210
is pretty cool I then framework to has

00:01:59,159 --> 00:02:02,280
been a long time in coming

00:02:00,210 --> 00:02:05,640
his first stable version of Zen

00:02:02,280 --> 00:02:08,039
framework was July of 2007 and now we're

00:02:05,640 --> 00:02:11,550
coming up on July of 2012 and a little

00:02:08,039 --> 00:02:13,250
over a month here and we realized you

00:02:11,550 --> 00:02:15,740
know over the course of time that thing

00:02:13,250 --> 00:02:18,530
could be better the things that we're

00:02:15,740 --> 00:02:20,480
gonna look at primarily right now

00:02:18,530 --> 00:02:21,980
first off pH be greater than or equal to

00:02:20,480 --> 00:02:24,590
five point three we want to use these

00:02:21,980 --> 00:02:26,330
new features I wish we could say 5.4 but

00:02:24,590 --> 00:02:28,940
the fact the matter is long term

00:02:26,330 --> 00:02:30,650
solutions for most hosting providers and

00:02:28,940 --> 00:02:33,770
Linux distributions are going to be on

00:02:30,650 --> 00:02:35,930
five point three for a few years a lot

00:02:33,770 --> 00:02:37,220
more flexibility this was something a

00:02:35,930 --> 00:02:38,510
lot of people complained about was it

00:02:37,220 --> 00:02:40,970
was really hard to hook into different

00:02:38,510 --> 00:02:42,920
parts of the works workflow within Zen

00:02:40,970 --> 00:02:45,800
framework one so we've got a lot of

00:02:42,920 --> 00:02:49,040
events a lot of services more

00:02:45,800 --> 00:02:50,270
performance this is something that we

00:02:49,040 --> 00:02:53,420
were only able to prove in the last

00:02:50,270 --> 00:02:55,670
three weeks but it is more performant at

00:02:53,420 --> 00:02:58,150
this point now that di is no longer the

00:02:55,670 --> 00:03:00,890
primary dependency injection mechanism

00:02:58,150 --> 00:03:04,010
open processes this may seem like not a

00:03:00,890 --> 00:03:05,780
lot but we no longer require CLA to give

00:03:04,010 --> 00:03:07,880
you an idea of how this impacted the

00:03:05,780 --> 00:03:10,220
project we went from maybe a couple

00:03:07,880 --> 00:03:12,709
dozen contributors in the first year

00:03:10,220 --> 00:03:16,340
year-and-a-half of Zen framework to to

00:03:12,709 --> 00:03:18,680
over a hundred within the next six

00:03:16,340 --> 00:03:20,660
months so this has actually been a huge

00:03:18,680 --> 00:03:22,610
thing the other thing of course was we

00:03:20,660 --> 00:03:26,750
moved to Zen framework to development to

00:03:22,610 --> 00:03:28,280
get and github which is facilitated just

00:03:26,750 --> 00:03:29,780
all sorts of contributions we get

00:03:28,280 --> 00:03:31,880
everything from you know one or two

00:03:29,780 --> 00:03:33,590
character typos fixes to you know full

00:03:31,880 --> 00:03:36,980
features coming in to the PO request to

00:03:33,590 --> 00:03:38,510
you and having that easy simple process

00:03:36,980 --> 00:03:41,930
that everybody's familiar with has such

00:03:38,510 --> 00:03:44,030
benefited everybody tremendously and

00:03:41,930 --> 00:03:46,130
diverse installation methods Zen

00:03:44,030 --> 00:03:48,049
framework one the only real installation

00:03:46,130 --> 00:03:50,870
method is downloading a tar ball or a

00:03:48,049 --> 00:03:54,560
zip and taking that or using SVN

00:03:50,870 --> 00:03:57,530
externals we have Pyrus support already

00:03:54,560 --> 00:03:59,780
and that's per component not just the

00:03:57,530 --> 00:04:01,130
project itself but per component same

00:03:59,780 --> 00:04:03,110
thing with composer we just introduced

00:04:01,130 --> 00:04:04,730
that in beta 4 and of course get some

00:04:03,110 --> 00:04:08,959
modules if you're really daring and want

00:04:04,730 --> 00:04:10,430
to use get subtree this is kind of an a

00:04:08,959 --> 00:04:14,360
slide a lot of the stuff that we're

00:04:10,430 --> 00:04:17,359
going to be bringing to the table so

00:04:14,360 --> 00:04:19,310
when we look at Zen framework one and we

00:04:17,359 --> 00:04:22,250
want to characterize it I think of

00:04:19,310 --> 00:04:23,810
Singleton's and registries hard-coded

00:04:22,250 --> 00:04:24,860
dependencies soft dependencies things

00:04:23,810 --> 00:04:26,449
that are coming out of your bootstrap

00:04:24,860 --> 00:04:29,270
that you're not actually declaring

00:04:26,449 --> 00:04:31,490
it's a mess and it seemed really great

00:04:29,270 --> 00:04:33,439
as we're developing it but as time goes

00:04:31,490 --> 00:04:36,620
on you see the limitations it's hard to

00:04:33,439 --> 00:04:38,300
test it's hard to do substitutions it's

00:04:36,620 --> 00:04:40,789
very easy to get caught in this morass

00:04:38,300 --> 00:04:42,349
of where did this actually come in into

00:04:40,789 --> 00:04:44,990
play how did it get injected in the

00:04:42,349 --> 00:04:47,599
first place as you have to weigh I would

00:04:44,990 --> 00:04:49,069
say event-driven services and we're

00:04:47,599 --> 00:04:52,879
gonna actually look at each of the

00:04:49,069 --> 00:04:55,580
pieces our newer contextual approach is

00:04:52,879 --> 00:04:57,550
looking at solid principles but

00:04:55,580 --> 00:05:01,490
specifically we're looking at a few

00:04:57,550 --> 00:05:03,469
types of paradigms decoupling and we

00:05:01,490 --> 00:05:05,180
have two different tools for that as NDI

00:05:03,469 --> 00:05:07,129
and then service manager we'll look at

00:05:05,180 --> 00:05:10,159
that in a few minutes it's event-driven

00:05:07,129 --> 00:05:11,569
we use the event manager a lot when I

00:05:10,159 --> 00:05:13,460
say events here and also mean things

00:05:11,569 --> 00:05:15,319
like signals aspect oriented programming

00:05:13,460 --> 00:05:18,979
we kind of combined a bunch of different

00:05:15,319 --> 00:05:22,460
ideas into a single component here we

00:05:18,979 --> 00:05:24,469
use a lot of SPL extensions our standard

00:05:22,460 --> 00:05:26,990
Lib is primarily SPL extensions at this

00:05:24,469 --> 00:05:29,120
point working around some limitations

00:05:26,990 --> 00:05:31,129
you know they keep implementation and

00:05:29,120 --> 00:05:32,930
SPL actually removes things which is

00:05:31,129 --> 00:05:35,479
what it's supposed to do but sometimes I

00:05:32,930 --> 00:05:36,680
want to iterate more than once so we

00:05:35,479 --> 00:05:40,069
have things like that or you want to see

00:05:36,680 --> 00:05:42,110
realize that sort of stuff we're taking

00:05:40,069 --> 00:05:43,699
full advantage of PHP 5.3 the biggest

00:05:42,110 --> 00:05:46,219
backwards compatibility change is the

00:05:43,699 --> 00:05:47,479
very first one namespaces but that's

00:05:46,219 --> 00:05:49,310
actually a good thing because you can

00:05:47,479 --> 00:05:51,259
still use Zen framework one code ends

00:05:49,310 --> 00:05:53,629
and framework two if you want to because

00:05:51,259 --> 00:05:56,620
they don't conflict even though we have

00:05:53,629 --> 00:05:58,849
a CL in both or authentication and both

00:05:56,620 --> 00:06:00,770
we utilize them two functions in closure

00:05:58,849 --> 00:06:02,629
so not a lot within the code but we make

00:06:00,770 --> 00:06:04,219
it really easy for you to do it which

00:06:02,629 --> 00:06:06,349
makes it easy for you to rapidly develop

00:06:04,219 --> 00:06:11,149
applications you don't have to declare a

00:06:06,349 --> 00:06:13,099
new class or a new method or a new

00:06:11,149 --> 00:06:14,779
function in order to hook into the event

00:06:13,099 --> 00:06:16,310
system for instance you can just declare

00:06:14,779 --> 00:06:16,939
quick closure right there and start

00:06:16,310 --> 00:06:18,649
doing things

00:06:16,939 --> 00:06:22,250
this is particularly nice for debugging

00:06:18,649 --> 00:06:25,189
I can go and tie into an event and just

00:06:22,250 --> 00:06:26,839
attach a listening that's a lambda late

00:06:25,189 --> 00:06:28,460
static binding this is one I never

00:06:26,839 --> 00:06:31,189
thought I would really enjoy it I love

00:06:28,460 --> 00:06:32,389
it now but there's some really cool

00:06:31,189 --> 00:06:36,399
things you can do with the extension if

00:06:32,389 --> 00:06:36,399
you have late static binding available

00:06:36,730 --> 00:06:41,780
releases we're currently at 2.0 beta for

00:06:39,920 --> 00:06:43,640
our betas are more of a gmail style

00:06:41,780 --> 00:06:45,050
we're doing rolling features as we go

00:06:43,640 --> 00:06:45,590
until we get to a point where we feel

00:06:45,050 --> 00:06:48,470
stable

00:06:45,590 --> 00:06:50,150
we're expecting a 2.0 beta 5 at the end

00:06:48,470 --> 00:06:53,020
of this coming month of June actually

00:06:50,150 --> 00:06:55,970
it's June now I wrote this last week so

00:06:53,020 --> 00:06:59,060
at the end of June and then a stable

00:06:55,970 --> 00:07:00,590
release by the end of the summer most of

00:06:59,060 --> 00:07:02,510
what we're doing for beta 5 is actually

00:07:00,590 --> 00:07:05,720
calling stuff that we don't feel it's

00:07:02,510 --> 00:07:09,080
shippable for the stable release and we

00:07:05,720 --> 00:07:10,670
see right now looks like it will for the

00:07:09,080 --> 00:07:14,990
stable release so this is a great time

00:07:10,670 --> 00:07:17,000
to pick it up and test so I talked that

00:07:14,990 --> 00:07:21,790
we have some architectural patterns that

00:07:17,000 --> 00:07:24,770
were utilizing heavily and what we have

00:07:21,790 --> 00:07:27,380
in particular is an idea of contract

00:07:24,770 --> 00:07:29,020
oriented design one of the problems with

00:07:27,380 --> 00:07:31,550
Zen framework one was extensibility

00:07:29,020 --> 00:07:32,540
because so many of the the different

00:07:31,550 --> 00:07:34,160
things that you needed to do were

00:07:32,540 --> 00:07:36,620
extending off of other classes sometimes

00:07:34,160 --> 00:07:39,290
nested three or four deep it was hard to

00:07:36,620 --> 00:07:40,880
substitute if you needed to so we

00:07:39,290 --> 00:07:42,680
decided that anywhere that we want to

00:07:40,880 --> 00:07:44,540
have a substitution that we want people

00:07:42,680 --> 00:07:45,950
to have flexibility to do something else

00:07:44,540 --> 00:07:48,320
we write an interface

00:07:45,950 --> 00:07:50,180
so there's dozens I think probably

00:07:48,320 --> 00:07:52,220
hundreds of interfaces right now in the

00:07:50,180 --> 00:07:53,690
odds-on framework - the idea is that

00:07:52,220 --> 00:07:55,280
anywhere that you want to use one of

00:07:53,690 --> 00:07:57,560
those interfaces you can substitute

00:07:55,280 --> 00:08:01,250
another idea to give an idea of how this

00:07:57,560 --> 00:08:02,960
worked we were trying to evaluate what

00:08:01,250 --> 00:08:05,660
the performance of Zend framework 2 was

00:08:02,960 --> 00:08:09,050
and it was hard to evaluate because as

00:08:05,660 --> 00:08:12,470
NCI uses reflection by default it's a

00:08:09,050 --> 00:08:14,510
possible to create your own definitions

00:08:12,470 --> 00:08:16,190
and compile definitions and everything

00:08:14,510 --> 00:08:18,590
but by default it uses a runtime

00:08:16,190 --> 00:08:21,190
definition and as a result we were

00:08:18,590 --> 00:08:24,290
seeing you know not great performance

00:08:21,190 --> 00:08:26,240
however we were utilizing an interface

00:08:24,290 --> 00:08:29,260
for where the dependency injector came

00:08:26,240 --> 00:08:32,770
in so evan query one of our developers

00:08:29,260 --> 00:08:34,880
from the community went and created an

00:08:32,770 --> 00:08:37,190
implementation of that interface that

00:08:34,880 --> 00:08:38,960
basically was a big service locator but

00:08:37,190 --> 00:08:41,320
it was all programmatic so we're able to

00:08:38,960 --> 00:08:43,010
like eliminate a DI entirely from the

00:08:41,320 --> 00:08:44,930
results and we could see what the true

00:08:43,010 --> 00:08:47,330
performance of the application framework

00:08:44,930 --> 00:08:49,700
was because we were able to do the

00:08:47,330 --> 00:08:50,900
substitutions so

00:08:49,700 --> 00:08:53,090
part of that of course is favoring

00:08:50,900 --> 00:08:54,680
composition over inheritance so instead

00:08:53,090 --> 00:08:57,770
of us having these huge inheritance tree

00:08:54,680 --> 00:08:59,900
we now have a few implementations of a

00:08:57,770 --> 00:09:01,010
particular thing and of course that

00:08:59,900 --> 00:09:03,890
means that we have to do two pendency

00:09:01,010 --> 00:09:08,510
injection of some sort another thing

00:09:03,890 --> 00:09:10,370
about the interface is it allows us to

00:09:08,510 --> 00:09:11,900
focus on what is the core message what

00:09:10,370 --> 00:09:14,090
are the core concerns we want to do in

00:09:11,900 --> 00:09:15,380
Zen framework - it was really easy in

00:09:14,090 --> 00:09:18,440
Zen framework one for somebody to come

00:09:15,380 --> 00:09:19,970
up and say I'd like this feature and me

00:09:18,440 --> 00:09:21,200
to say oh that sounds really cool and go

00:09:19,970 --> 00:09:22,520
and implement it and then discover it

00:09:21,200 --> 00:09:24,920
broke two other features we'd already

00:09:22,520 --> 00:09:26,600
implemented so now instead I might

00:09:24,920 --> 00:09:28,660
actually say to you that sounds really

00:09:26,600 --> 00:09:31,400
cool why don't you implement it yourself

00:09:28,660 --> 00:09:32,600
and then you can put it in but that

00:09:31,400 --> 00:09:34,340
means it's going to be a more stable

00:09:32,600 --> 00:09:36,410
framework for everybody else and that's

00:09:34,340 --> 00:09:39,830
really the goal that we're looking for

00:09:36,410 --> 00:09:41,090
here so dependency injection how many

00:09:39,830 --> 00:09:44,210
are not familiar with dependency

00:09:41,090 --> 00:09:47,150
injection or haven't used it much nobody

00:09:44,210 --> 00:09:48,980
this is good a few okay so this is a

00:09:47,150 --> 00:09:50,900
little bit of rudimentary stuff for most

00:09:48,980 --> 00:09:53,260
of you but you know in a nutshell we

00:09:50,900 --> 00:09:55,040
show two different kinds here we've got

00:09:53,260 --> 00:09:57,260
required dependencies through the

00:09:55,040 --> 00:09:59,060
constructor on line seven and then of

00:09:57,260 --> 00:10:02,150
course optional dependencies through

00:09:59,060 --> 00:10:04,250
setter injection on line eight so bass

00:10:02,150 --> 00:10:05,900
is noob as with foo and then we say set

00:10:04,250 --> 00:10:07,340
bar new bar so this is dependency

00:10:05,900 --> 00:10:10,100
injection that's just passing an object

00:10:07,340 --> 00:10:14,480
in typically you will type int so that

00:10:10,100 --> 00:10:17,210
you can enforce a contract Zen bi is a

00:10:14,480 --> 00:10:19,970
dependency injection container and it's

00:10:17,210 --> 00:10:21,860
a slightly different beast back here we

00:10:19,970 --> 00:10:25,160
all know how to write this I did

00:10:21,860 --> 00:10:26,630
container we configure so we have a

00:10:25,160 --> 00:10:28,580
number of injection patterns that we

00:10:26,630 --> 00:10:30,230
support constructors and setters

00:10:28,580 --> 00:10:33,020
obviously interface injection is a fun

00:10:30,230 --> 00:10:35,780
one if you create an aware interface it

00:10:33,020 --> 00:10:37,850
will automatically try and inject we can

00:10:35,780 --> 00:10:40,760
also do annotations and a number of

00:10:37,850 --> 00:10:42,590
other things basically you manage

00:10:40,760 --> 00:10:45,590
dependencies through configuration and

00:10:42,590 --> 00:10:47,120
annotation the annotation is optional

00:10:45,590 --> 00:10:49,670
you don't have to use it if it's there

00:10:47,120 --> 00:10:50,780
it will utilize it and in fact I think

00:10:49,670 --> 00:10:53,150
there's a flag so you can tell it

00:10:50,780 --> 00:10:55,280
whether or not you want to we also

00:10:53,150 --> 00:10:57,530
provide a compiler so that you can point

00:10:55,280 --> 00:11:00,140
it to a set of classes and it will go

00:10:57,530 --> 00:11:02,330
and figure out what the definitions are

00:11:00,140 --> 00:11:03,510
and cache them for you in a way that you

00:11:02,330 --> 00:11:07,620
can then

00:11:03,510 --> 00:11:10,680
feed into the DI container so sample

00:11:07,620 --> 00:11:12,570
definition looks something like this so

00:11:10,680 --> 00:11:16,020
we're defining class bass so this is for

00:11:12,570 --> 00:11:17,460
that same example we had here we're

00:11:16,020 --> 00:11:19,440
going to define a definition for it

00:11:17,460 --> 00:11:21,720
no we don't typically want to do this

00:11:19,440 --> 00:11:23,730
thing actually Zen D eyes does a really

00:11:21,720 --> 00:11:24,930
good job of discovering this but this is

00:11:23,730 --> 00:11:28,320
what it would compile it down to you

00:11:24,930 --> 00:11:30,390
we've got a constructor that has a foo

00:11:28,320 --> 00:11:34,020
argument that is of type foo the class

00:11:30,390 --> 00:11:36,390
foo and it's required a set bar when I

00:11:34,020 --> 00:11:37,470
say required here at the method level

00:11:36,390 --> 00:11:39,390
we're saying that it's required

00:11:37,470 --> 00:11:42,570
injections so when I pull this out it

00:11:39,390 --> 00:11:45,110
has to have this by default setters will

00:11:42,570 --> 00:11:49,940
not be that way unless you tell the

00:11:45,110 --> 00:11:52,380
compiler to do so we've got a bar

00:11:49,940 --> 00:11:53,760
parameter and it's a type bar and of

00:11:52,380 --> 00:11:55,560
course it's required if we call that

00:11:53,760 --> 00:11:57,840
method so this is what it looks like

00:11:55,560 --> 00:11:58,710
this is a lot of code I don't want to

00:11:57,840 --> 00:12:01,080
write these and that's probably have a

00:11:58,710 --> 00:12:04,170
compiler for it but using the container

00:12:01,080 --> 00:12:05,700
is pretty simple we go and we grab the

00:12:04,170 --> 00:12:08,580
configuration so we can configure

00:12:05,700 --> 00:12:10,290
definitions instances and things like

00:12:08,580 --> 00:12:11,460
two other parameters you use definition

00:12:10,290 --> 00:12:13,770
and instance were the ones I used most

00:12:11,460 --> 00:12:16,050
often say our class definition then we

00:12:13,770 --> 00:12:17,760
give our definition there and we

00:12:16,050 --> 00:12:19,530
configure the I container and then we

00:12:17,760 --> 00:12:22,140
grab Baz out of it and we'll have foo

00:12:19,530 --> 00:12:25,860
and bar at that point actually that

00:12:22,140 --> 00:12:27,800
should be bar shouldn't it yep well

00:12:25,860 --> 00:12:30,210
anyway we grab it and it's all fully

00:12:27,800 --> 00:12:31,920
instantiate it now for a simple example

00:12:30,210 --> 00:12:33,570
like this it doesn't make any sense but

00:12:31,920 --> 00:12:36,540
when you start thinking about why we

00:12:33,570 --> 00:12:38,100
looked at di it does the reason that we

00:12:36,540 --> 00:12:41,640
started looking at di in the first place

00:12:38,100 --> 00:12:44,130
is how do you get resources into the

00:12:41,640 --> 00:12:45,540
controllers that you use how does how do

00:12:44,130 --> 00:12:47,870
you do it in Zen framework one anybody

00:12:45,540 --> 00:12:50,580
here using Zen framework one okay

00:12:47,870 --> 00:12:51,960
randomly just shout it out how do how do

00:12:50,580 --> 00:12:55,250
you get so like say for instance a

00:12:51,960 --> 00:12:57,870
database connection into your controller

00:12:55,250 --> 00:12:59,670
yes okay I'm hearing four or five

00:12:57,870 --> 00:13:02,670
different answers out there right that's

00:12:59,670 --> 00:13:04,230
the problem and so that's what we're

00:13:02,670 --> 00:13:07,170
trying to answer is how do I get that

00:13:04,230 --> 00:13:09,600
into there well if I define a setter for

00:13:07,170 --> 00:13:12,030
it and I have a word definition for it

00:13:09,600 --> 00:13:15,060
in the container I can pull my

00:13:12,030 --> 00:13:17,040
controller as a service out of the

00:13:15,060 --> 00:13:19,199
container and it's fully configured with

00:13:17,040 --> 00:13:20,399
all of its dependencies that's simpler

00:13:19,199 --> 00:13:24,350
because then I don't have to worry about

00:13:20,399 --> 00:13:24,350
how I get it I just know it's there so

00:13:25,759 --> 00:13:30,259
we have a bunch of use cases here we

00:13:28,769 --> 00:13:32,820
support annotation based injections

00:13:30,259 --> 00:13:34,319
interface injections all the use cases

00:13:32,820 --> 00:13:37,410
are captured which is great

00:13:34,319 --> 00:13:41,910
Ralph is Ralph Schindler also dramatic

00:13:37,410 --> 00:13:44,790
descent he I did all the mostly di stuff

00:13:41,910 --> 00:13:47,759
and so he compiled all the use cases in

00:13:44,790 --> 00:13:48,779
this project called zf2 di use cases so

00:13:47,759 --> 00:13:50,100
if you want to see all the different

00:13:48,779 --> 00:13:51,779
ones you can go there I think there's

00:13:50,100 --> 00:13:54,180
like 26 different ones and there right

00:13:51,779 --> 00:13:55,620
now you can see how there you can

00:13:54,180 --> 00:13:59,459
configure the container how you can not

00:13:55,620 --> 00:14:02,190
do all these different pieces now that

00:13:59,459 --> 00:14:04,649
said Zen di I mentioned before that it

00:14:02,190 --> 00:14:08,009
uses reflection by default so it tends

00:14:04,649 --> 00:14:09,660
to be slow and it's a limitation of

00:14:08,009 --> 00:14:11,370
using reflection now like I said you can

00:14:09,660 --> 00:14:14,009
compile them but that introduces a step

00:14:11,370 --> 00:14:15,720
when you're doing development that means

00:14:14,009 --> 00:14:17,069
you either have to compile each time or

00:14:15,720 --> 00:14:18,839
you need to fall back to runtime and

00:14:17,069 --> 00:14:21,389
quite often you'll forget to compile

00:14:18,839 --> 00:14:23,100
when it goes to production the other

00:14:21,389 --> 00:14:24,899
thing is the container configuring the

00:14:23,100 --> 00:14:28,170
container is a bit difficult to learn

00:14:24,899 --> 00:14:30,389
while it has a very regular format since

00:14:28,170 --> 00:14:32,190
there are so many different use cases it

00:14:30,389 --> 00:14:33,630
becomes a little problematic if you

00:14:32,190 --> 00:14:35,220
wanted it for instance inject the same

00:14:33,630 --> 00:14:38,639
method several times with different

00:14:35,220 --> 00:14:40,290
objects difficult if you want to say

00:14:38,639 --> 00:14:42,810
that these setters are required but

00:14:40,290 --> 00:14:44,310
these aren't difficult so it's it's

00:14:42,810 --> 00:14:46,019
difficult that way the other thing is

00:14:44,310 --> 00:14:47,639
debugging is hard you'll get back a

00:14:46,019 --> 00:14:48,959
cryptic message saying oh hey I wasn't

00:14:47,639 --> 00:14:50,459
able to get it out of the container and

00:14:48,959 --> 00:14:51,829
it might be for an object you didn't

00:14:50,459 --> 00:14:56,310
even know you were trying to retrieve

00:14:51,829 --> 00:14:57,990
and all you get is this tree and even XD

00:14:56,310 --> 00:14:59,250
bugs sometimes can't make a good sense

00:14:57,990 --> 00:15:02,310
of it as to what you're actually trying

00:14:59,250 --> 00:15:04,139
to get so we started looking at this and

00:15:02,310 --> 00:15:05,639
said you know di is fantastic we loved

00:15:04,139 --> 00:15:07,680
the concept of di but we need something

00:15:05,639 --> 00:15:10,310
faster and easier to educate people with

00:15:07,680 --> 00:15:12,839
so we came up with a service manager

00:15:10,310 --> 00:15:14,819
service managers very fast because

00:15:12,839 --> 00:15:18,300
there's no magic or discovery it's just

00:15:14,819 --> 00:15:20,939
code you write the code for it you code

00:15:18,300 --> 00:15:22,439
and configure your injections i when I

00:15:20,939 --> 00:15:24,120
say configure in this case you'll have

00:15:22,439 --> 00:15:27,120
the configuration right there which is

00:15:24,120 --> 00:15:28,350
fantastic it's all explicit which makes

00:15:27,120 --> 00:15:29,790
the debugging simpler because when

00:15:28,350 --> 00:15:30,730
there's a problem you'll find the

00:15:29,790 --> 00:15:32,019
problem it will

00:15:30,730 --> 00:15:33,820
you know your fatal errors are pointing

00:15:32,019 --> 00:15:37,089
to your factory or whatever where you're

00:15:33,820 --> 00:15:38,470
defining all this there are a number of

00:15:37,089 --> 00:15:40,810
different types of services that the

00:15:38,470 --> 00:15:42,250
service manager is able to understand

00:15:40,810 --> 00:15:43,930
we've got explicit ones where you say

00:15:42,250 --> 00:15:45,850
hey I'm gonna put this object in the

00:15:43,930 --> 00:15:47,680
container and that's easy I'm gonna go

00:15:45,850 --> 00:15:48,790
through all these in a minute here you

00:15:47,680 --> 00:15:51,399
have invoke a bowl is where you simply

00:15:48,790 --> 00:15:53,680
say heyo and you call pull this service

00:15:51,399 --> 00:15:56,230
give me an instance of this class and so

00:15:53,680 --> 00:15:57,519
you give just a class name factories you

00:15:56,230 --> 00:15:59,290
say when I pull the service here's a

00:15:57,519 --> 00:16:01,600
fact earning can be any sort of PHP call

00:15:59,290 --> 00:16:03,010
back any call back works we have an ax

00:16:01,600 --> 00:16:05,019
factoring interface in which case they

00:16:03,010 --> 00:16:06,519
will call that particular method but any

00:16:05,019 --> 00:16:09,339
call back so this is great you can

00:16:06,519 --> 00:16:12,610
actually do lambda or a closure within

00:16:09,339 --> 00:16:14,529
your module classes to do this can alias

00:16:12,610 --> 00:16:17,440
so when I pull the service pull the

00:16:14,529 --> 00:16:19,690
service instead abstract factories if

00:16:17,440 --> 00:16:21,339
you want to handle arbitrary classes

00:16:19,690 --> 00:16:24,370
maybe they follow a certain pattern like

00:16:21,339 --> 00:16:26,680
controllers for instance you could do an

00:16:24,370 --> 00:16:28,300
ad check factory that will do that we

00:16:26,680 --> 00:16:31,029
actually use an abstract factory to fall

00:16:28,300 --> 00:16:33,790
back to di so that if you are pulling a

00:16:31,029 --> 00:16:34,870
class name and that class exists that

00:16:33,790 --> 00:16:36,610
will actually try and pull it out of the

00:16:34,870 --> 00:16:39,579
DI container at that point if there's no

00:16:36,610 --> 00:16:42,130
service name associated scoped

00:16:39,579 --> 00:16:43,720
containers basically where you want to

00:16:42,130 --> 00:16:45,130
limit what can be created and give a

00:16:43,720 --> 00:16:46,839
little bit more logic around it we use a

00:16:45,130 --> 00:16:48,790
scope container for pulling controllers

00:16:46,839 --> 00:16:50,380
actually as services and that's mainly

00:16:48,790 --> 00:16:53,319
to ensure that we don't try and pull

00:16:50,380 --> 00:16:54,910
just an arbitrary object and then you

00:16:53,319 --> 00:16:57,190
can decide whether or not an instance is

00:16:54,910 --> 00:16:59,440
shared so look at each of these first

00:16:57,190 --> 00:17:01,240
one is the simplest to service a service

00:16:59,440 --> 00:17:04,480
so I say well that's the shared one

00:17:01,240 --> 00:17:06,339
that's the run one we'll skip that one

00:17:04,480 --> 00:17:07,720
uh-huh well what we would say here

00:17:06,339 --> 00:17:09,220
actually is when we say sir we'd say

00:17:07,720 --> 00:17:10,959
services up here and we'd say event

00:17:09,220 --> 00:17:13,419
manager and we'd give it I'd say like

00:17:10,959 --> 00:17:15,730
new event manager right there I cut and

00:17:13,419 --> 00:17:18,130
pasted incorrectly earlier in vocables

00:17:15,730 --> 00:17:20,020
this is the easiest one we say foo is

00:17:18,130 --> 00:17:22,209
going to be some component foo and so

00:17:20,020 --> 00:17:23,319
we'll instantiate that since instances

00:17:22,209 --> 00:17:24,910
are shared by default it will

00:17:23,319 --> 00:17:26,559
instantiate it once and then any other

00:17:24,910 --> 00:17:30,970
time I'd call it it will give back that

00:17:26,559 --> 00:17:34,030
particular instance factories factories

00:17:30,970 --> 00:17:36,610
get the service manager as their sole

00:17:34,030 --> 00:17:39,280
argument so you can actually pull things

00:17:36,610 --> 00:17:41,799
out of there and I'm not actually doing

00:17:39,280 --> 00:17:43,960
it here but for instance I could pull

00:17:41,799 --> 00:17:44,500
another dependency out and inject it

00:17:43,960 --> 00:17:45,730
into the

00:17:44,500 --> 00:17:47,410
instructor here some factories are

00:17:45,730 --> 00:17:49,120
really great when you need to actually

00:17:47,410 --> 00:17:53,020
do a little bit of work to get your

00:17:49,120 --> 00:17:55,810
instance you can use any call back so

00:17:53,020 --> 00:17:58,840
use a the very first one for Phu I'm

00:17:55,810 --> 00:18:00,910
using just a closure right there for bar

00:17:58,840 --> 00:18:02,350
I'm specifying a static method so I can

00:18:00,910 --> 00:18:04,170
use a static method if I want to that's

00:18:02,350 --> 00:18:07,090
great for a factory for instance or I

00:18:04,170 --> 00:18:08,890
can do a class implementing the factory

00:18:07,090 --> 00:18:10,990
interface a Zen service manage your

00:18:08,890 --> 00:18:15,300
factory interface if I implement that it

00:18:10,990 --> 00:18:18,040
will see that and call it correctly

00:18:15,300 --> 00:18:19,510
aliasing I can alias to an existing

00:18:18,040 --> 00:18:22,180
service so that's the first one on line

00:18:19,510 --> 00:18:24,250
19 their line 20 I am aliasing to

00:18:22,180 --> 00:18:25,600
another alias so you can actually do

00:18:24,250 --> 00:18:27,460
this we deal with some circular

00:18:25,600 --> 00:18:29,560
dependency detection and making sure

00:18:27,460 --> 00:18:31,690
that that doesn't end up messing up your

00:18:29,560 --> 00:18:34,900
code more but that's actually really

00:18:31,690 --> 00:18:38,200
useful I use that for instance the CFC

00:18:34,900 --> 00:18:40,180
user module uses an alias to point to

00:18:38,200 --> 00:18:41,740
the database adapter and also did the

00:18:40,180 --> 00:18:44,230
authentication service so I can actually

00:18:41,740 --> 00:18:52,060
pull that and actually have aliases of

00:18:44,230 --> 00:18:54,010
my own yep detect what yeah yep yeah

00:18:52,060 --> 00:18:55,390
yeah we don't want that to happen yes

00:18:54,010 --> 00:18:59,830
yeah a circular reference detection is

00:18:55,390 --> 00:19:01,300
built-in me there abstract factory this

00:18:59,830 --> 00:19:03,220
is what the object factory interface

00:19:01,300 --> 00:19:05,460
looks like basically can I create a

00:19:03,220 --> 00:19:07,480
service with this particular name and

00:19:05,460 --> 00:19:09,100
then create the service with the name in

00:19:07,480 --> 00:19:11,590
which case you get the service manager

00:19:09,100 --> 00:19:14,110
and then the name passed to it and you

00:19:11,590 --> 00:19:17,830
try and create it as I said before we

00:19:14,110 --> 00:19:19,690
have an object di factory that will use

00:19:17,830 --> 00:19:22,090
the DI container that you configure in

00:19:19,690 --> 00:19:25,420
order to do to pull something out that

00:19:22,090 --> 00:19:28,420
way so if you want to use di you can and

00:19:25,420 --> 00:19:29,860
you can also say shared services but

00:19:28,420 --> 00:19:31,270
typically everything is shared by

00:19:29,860 --> 00:19:33,880
default so if I don't want something

00:19:31,270 --> 00:19:35,620
shared I pass a false value here this is

00:19:33,880 --> 00:19:37,780
a good example of one we wanted an event

00:19:35,620 --> 00:19:40,830
manager instance per class that

00:19:37,780 --> 00:19:43,450
requested one and then a shared manager

00:19:40,830 --> 00:19:44,860
injected into that then that one's going

00:19:43,450 --> 00:19:50,530
to be shared so the event manager we had

00:19:44,860 --> 00:19:51,670
to say no do not share so the fun part

00:19:50,530 --> 00:19:53,290
about the service manager is you can

00:19:51,670 --> 00:19:56,740
configure in a lot of different places

00:19:53,290 --> 00:19:57,710
and override configuration and override

00:19:56,740 --> 00:19:59,630
some of the definitions

00:19:57,710 --> 00:20:00,950
easily so you can do it at the

00:19:59,630 --> 00:20:02,390
application before you bootstrap

00:20:00,950 --> 00:20:05,179
anything you can do it in your module

00:20:02,390 --> 00:20:07,850
classes you can specify a configuration

00:20:05,179 --> 00:20:09,500
for the service manager the module

00:20:07,850 --> 00:20:11,029
configuration can do it and you can also

00:20:09,500 --> 00:20:12,529
be local override configuration so

00:20:11,029 --> 00:20:14,840
there's a variety of places you can do

00:20:12,529 --> 00:20:17,480
it you can use aliasing you can override

00:20:14,840 --> 00:20:20,149
and what we found is it's very fast

00:20:17,480 --> 00:20:22,039
means very intuitive we had some people

00:20:20,149 --> 00:20:25,159
playing with it with the XenServer UI

00:20:22,039 --> 00:20:28,520
team who were comparing di to Vudu and

00:20:25,159 --> 00:20:30,020
using the force and now they like the

00:20:28,520 --> 00:20:33,080
service manager because it's very easy

00:20:30,020 --> 00:20:34,220
for them to understand and debug so this

00:20:33,080 --> 00:20:36,080
is one of the core patterns is

00:20:34,220 --> 00:20:38,299
dependency injection how do I get my

00:20:36,080 --> 00:20:41,390
dependencies into my controller and we

00:20:38,299 --> 00:20:43,970
use services for this another thing to

00:20:41,390 --> 00:20:45,440
note is our plug-in broker is service

00:20:43,970 --> 00:20:47,210
locator aware so we'll get the service

00:20:45,440 --> 00:20:49,070
manager instance so it makes it really

00:20:47,210 --> 00:20:52,190
easy to have plugins that need

00:20:49,070 --> 00:20:53,659
dependencies so view helpers your

00:20:52,190 --> 00:20:55,130
controller plugins that sort of thing

00:20:53,659 --> 00:21:00,470
you can pull those out and they'll have

00:20:55,130 --> 00:21:02,630
their dependencies when you pull them so

00:21:00,470 --> 00:21:04,909
I mentioned event-driven services and we

00:21:02,630 --> 00:21:08,840
talked about services now but let's talk

00:21:04,909 --> 00:21:09,919
about the event manager who doesn't do

00:21:08,840 --> 00:21:11,419
JavaScript in here

00:21:09,919 --> 00:21:20,149
nobody's gonna raise their hand right

00:21:11,419 --> 00:21:22,940
who has never seen JavaScript so we've

00:21:20,149 --> 00:21:26,630
all done JavaScript who has we all know

00:21:22,940 --> 00:21:28,340
what events are right right we who has

00:21:26,630 --> 00:21:30,169
not triggered an event or your capture

00:21:28,340 --> 00:21:33,500
you know registering the event listener

00:21:30,169 --> 00:21:35,539
at some point right we all have the

00:21:33,500 --> 00:21:37,309
event manager is analogous to that we

00:21:35,539 --> 00:21:40,130
trigger an event and then we listen and

00:21:37,309 --> 00:21:42,649
react to triggered events so we have an

00:21:40,130 --> 00:21:44,480
event manager which handles you know

00:21:42,649 --> 00:21:46,429
assigning you know listeners to the

00:21:44,480 --> 00:21:49,370
specific signals and then it triggers

00:21:46,429 --> 00:21:51,529
them and you will compose an event

00:21:49,370 --> 00:21:55,909
manager in an object and so that you can

00:21:51,529 --> 00:21:58,130
trigger events from your object so we

00:21:55,909 --> 00:22:00,049
aggregate those the listener in SEN

00:21:58,130 --> 00:22:02,299
framework to are simply any PHP callback

00:22:00,049 --> 00:22:04,340
so it can be you know it can be a

00:22:02,299 --> 00:22:06,559
closure it could be a static method it

00:22:04,340 --> 00:22:09,740
could be a typical array callback of

00:22:06,559 --> 00:22:11,930
some sort anything that is callable can

00:22:09,740 --> 00:22:13,580
be used

00:22:11,930 --> 00:22:15,320
listeners simply react to an event so it

00:22:13,580 --> 00:22:16,820
gets the event as its sole argument and

00:22:15,320 --> 00:22:18,470
it's able to pull parameters out of

00:22:16,820 --> 00:22:20,150
there I know what the target

00:22:18,470 --> 00:22:22,430
you know what called the triggered the

00:22:20,150 --> 00:22:24,410
event and that sort of thing the event

00:22:22,430 --> 00:22:24,950
is simply an action it's just a name

00:22:24,410 --> 00:22:27,410
really

00:22:24,950 --> 00:22:29,890
so I say trigger something and it then

00:22:27,410 --> 00:22:33,830
figures out what listeners are attached

00:22:29,890 --> 00:22:36,830
this is the simplest example I'm

00:22:33,830 --> 00:22:39,110
attaching a closure here to the do event

00:22:36,830 --> 00:22:42,110
and you can see I can get the parameters

00:22:39,110 --> 00:22:44,330
and the the event name and I'm just

00:22:42,110 --> 00:22:45,820
going to print that off and I'm good to

00:22:44,330 --> 00:22:48,140
go

00:22:45,820 --> 00:22:49,580
you'll notice here the null part this is

00:22:48,140 --> 00:22:51,740
because there's no target normally I'm

00:22:49,580 --> 00:22:53,870
doing the event manager within an object

00:22:51,740 --> 00:22:57,170
in which case I will pass dollar this

00:22:53,870 --> 00:22:58,670
there at which point when I go into here

00:22:57,170 --> 00:23:00,200
I can say you get target and I'll have

00:22:58,670 --> 00:23:03,080
that object instance so I can figure out

00:23:00,200 --> 00:23:05,660
the context in which I was called but

00:23:03,080 --> 00:23:08,330
then I get past parameters this is a

00:23:05,660 --> 00:23:10,850
very simple one typically we actually

00:23:08,330 --> 00:23:13,100
have context specific events so the NBC

00:23:10,850 --> 00:23:15,650
has an NBC event the view has a view

00:23:13,100 --> 00:23:17,480
event that have some contextual setters

00:23:15,650 --> 00:23:20,179
and getters so that you can say I want

00:23:17,480 --> 00:23:22,550
to get the application instance or the

00:23:20,179 --> 00:23:24,590
router or the route matches and I can

00:23:22,550 --> 00:23:26,059
grab those out of the event so that we

00:23:24,590 --> 00:23:29,480
have this context that's shared

00:23:26,059 --> 00:23:31,340
throughout there's a lot of pieces that

00:23:29,480 --> 00:23:35,390
we have I mentioned earlier the shared

00:23:31,340 --> 00:23:37,370
manager we can attach here to a specific

00:23:35,390 --> 00:23:39,410
instance of an event manager the charity

00:23:37,370 --> 00:23:41,000
event manager allows us to say hey I may

00:23:39,410 --> 00:23:43,070
not have an instance of this particular

00:23:41,000 --> 00:23:45,950
class but once there is one it can

00:23:43,070 --> 00:23:48,200
listen in on on here in pole events out

00:23:45,950 --> 00:23:50,540
of me you know event listeners out of me

00:23:48,200 --> 00:23:51,950
in order to trigger them this may seem

00:23:50,540 --> 00:23:54,290
like well why would you want to do that

00:23:51,950 --> 00:23:55,520
but it's tremendously useful for

00:23:54,290 --> 00:23:57,050
instance during boot sprint wrapping you

00:23:55,520 --> 00:23:59,179
may know that certain objects may

00:23:57,050 --> 00:24:00,290
sometimes be at play but you don't know

00:23:59,179 --> 00:24:02,300
if it'll actually be triggered in this

00:24:00,290 --> 00:24:03,650
particular context perhaps you know

00:24:02,300 --> 00:24:06,320
we'll have an error at some point and

00:24:03,650 --> 00:24:08,120
perhaps we won't but if we do it'll get

00:24:06,320 --> 00:24:09,800
triggered which is really nice we have

00:24:08,120 --> 00:24:11,090
wildcard attachment so you don't have to

00:24:09,800 --> 00:24:13,270
necessarily know the name of the event

00:24:11,090 --> 00:24:15,320
you can use wildcards in here

00:24:13,270 --> 00:24:17,150
short-circuiting both from within any

00:24:15,320 --> 00:24:19,250
venue so you can say stop propagation

00:24:17,150 --> 00:24:21,160
nothing there's some sort of a weird

00:24:19,250 --> 00:24:23,870
thing happened here we should stop or

00:24:21,160 --> 00:24:25,640
you can have some sort of rule and we

00:24:23,870 --> 00:24:28,220
define the roles as closures or as

00:24:25,640 --> 00:24:30,950
callbacks and you can say evaluate the

00:24:28,220 --> 00:24:33,080
return value from a particular listener

00:24:30,950 --> 00:24:34,880
and decide if we need to stop we use

00:24:33,080 --> 00:24:37,340
this in the MVC for instance if we get a

00:24:34,880 --> 00:24:39,710
response at any time we short circuit

00:24:37,340 --> 00:24:42,620
and we exit back out and return that

00:24:39,710 --> 00:24:44,140
response the other part is because we

00:24:42,620 --> 00:24:46,220
have access to the responses we do

00:24:44,140 --> 00:24:48,290
aggregate the responses so that if you

00:24:46,220 --> 00:24:52,540
want to you can go and aggregate through

00:24:48,290 --> 00:24:54,799
those and react to them if you want so

00:24:52,540 --> 00:24:57,350
so far we've been talking about patterns

00:24:54,799 --> 00:24:58,880
and so it seems like you know why are

00:24:57,350 --> 00:25:00,770
you doing all this well let's take a

00:24:58,880 --> 00:25:03,410
look at that me see the MVC is really

00:25:00,770 --> 00:25:04,610
it's all event-driven and so you have

00:25:03,410 --> 00:25:07,669
these services and you've got these

00:25:04,610 --> 00:25:09,950
listeners bootstrapping is an event

00:25:07,669 --> 00:25:13,190
routing is event dispatching is an event

00:25:09,950 --> 00:25:15,320
rendering the view is an event finishing

00:25:13,190 --> 00:25:17,330
the request is an event and so you can

00:25:15,320 --> 00:25:20,660
have arbitrary numbers of listeners on

00:25:17,330 --> 00:25:21,980
any one of them I forgot to mention we

00:25:20,660 --> 00:25:23,120
also have priority within the event

00:25:21,980 --> 00:25:24,850
manager so you can figure out you know

00:25:23,120 --> 00:25:29,150
exactly where you want it in the queue

00:25:24,850 --> 00:25:30,830
so when it comes to the MVC we've talked

00:25:29,150 --> 00:25:33,049
about two of the core concepts and

00:25:30,830 --> 00:25:37,610
that's events and services the third one

00:25:33,049 --> 00:25:39,679
is controllers so events everything's an

00:25:37,610 --> 00:25:40,730
event and these are like the main events

00:25:39,679 --> 00:25:43,190
that we have in the system you can

00:25:40,730 --> 00:25:45,350
define your own events as well but we

00:25:43,190 --> 00:25:46,790
have for loading the modules and we'll

00:25:45,350 --> 00:25:50,000
talk about modules in a minute here but

00:25:46,790 --> 00:25:51,590
pre and post loading all the modules and

00:25:50,000 --> 00:25:54,230
loading an individual module we can do

00:25:51,590 --> 00:25:55,669
things bootstrap route dispatching

00:25:54,230 --> 00:25:57,350
dispatch error if we have some sort of

00:25:55,669 --> 00:25:58,640
error that occurs we dispatch something

00:25:57,350 --> 00:26:01,100
separate so we can figure out how to

00:25:58,640 --> 00:26:05,299
handle that error and then rendering and

00:26:01,100 --> 00:26:08,990
finish for services we have the service

00:26:05,299 --> 00:26:10,130
manager and we talked about this biggest

00:26:08,990 --> 00:26:15,650
thing though is this last point

00:26:10,130 --> 00:26:17,299
controllers our services yes you can

00:26:15,650 --> 00:26:19,100
inject the service locator into the

00:26:17,299 --> 00:26:22,940
controllers and lazily pull stuff out

00:26:19,100 --> 00:26:24,530
don't do it get your dependencies

00:26:22,940 --> 00:26:27,429
injected by the service manager create

00:26:24,530 --> 00:26:29,870
factories season so that you can do this

00:26:27,429 --> 00:26:31,760
basically you're providing services

00:26:29,870 --> 00:26:33,740
you're providing controllers that are

00:26:31,760 --> 00:26:36,220
going to listen in and do some things to

00:26:33,740 --> 00:26:39,140
do some work of some sort

00:26:36,220 --> 00:26:42,560
and your controllers are what are called

00:26:39,140 --> 00:26:44,780
dispatchable z' basically just we're

00:26:42,560 --> 00:26:46,640
doing HTTP right we have a request

00:26:44,780 --> 00:26:48,860
coming in and we want to deliver a

00:26:46,640 --> 00:26:50,870
response back out a dispatchable takes

00:26:48,860 --> 00:26:53,330
the request also response objects so

00:26:50,870 --> 00:26:55,010
that we have a shared piece here and we

00:26:53,330 --> 00:26:57,350
return that response object back out so

00:26:55,010 --> 00:26:59,420
we know what to do with it we're just

00:26:57,350 --> 00:27:01,370
doing HTTP no negotiation so that's all

00:26:59,420 --> 00:27:02,660
we're doing controllers can be really

00:27:01,370 --> 00:27:04,520
simple

00:27:02,660 --> 00:27:05,900
the default controllers we have actually

00:27:04,520 --> 00:27:08,660
have a lot of stuff going on there's

00:27:05,900 --> 00:27:11,330
event management there's aggregating a

00:27:08,660 --> 00:27:13,880
service can manager we have a great

00:27:11,330 --> 00:27:16,100
plug-in broker there's a lot of stuff

00:27:13,880 --> 00:27:18,290
and it's for your convenience however to

00:27:16,100 --> 00:27:20,030
give an example in my own website I have

00:27:18,290 --> 00:27:21,050
a page controller I know that certain

00:27:20,030 --> 00:27:23,180
routes are going to come in and I just

00:27:21,050 --> 00:27:25,310
want them to go to a certain view script

00:27:23,180 --> 00:27:26,570
all I did was a implemented the

00:27:25,310 --> 00:27:29,270
dispatchable interface which is a

00:27:26,570 --> 00:27:30,680
dispatch request response and I returned

00:27:29,270 --> 00:27:32,660
two response so I'm able to go in there

00:27:30,680 --> 00:27:35,630
and say do I have a view script that

00:27:32,660 --> 00:27:38,660
corresponds if so return my view of a

00:27:35,630 --> 00:27:40,760
model and I'm done so I was able to do

00:27:38,660 --> 00:27:42,800
something very simple you can do simple

00:27:40,760 --> 00:27:45,890
you can do complex but that's all a

00:27:42,800 --> 00:27:47,330
controller is so now we get into the

00:27:45,890 --> 00:27:53,060
true QuickStart and that's a Zen

00:27:47,330 --> 00:28:00,260
skeleton application how many of you use

00:27:53,060 --> 00:28:03,830
end tool okay it's gone we may introduce

00:28:00,260 --> 00:28:04,940
tooling eventually again through we have

00:28:03,830 --> 00:28:06,320
had somebody working on a console

00:28:04,940 --> 00:28:08,150
component and we're looking at some

00:28:06,320 --> 00:28:09,590
stuff with tooling but we started

00:28:08,150 --> 00:28:11,060
looking and saying hey we want people to

00:28:09,590 --> 00:28:13,010
start using them we see right away and

00:28:11,060 --> 00:28:14,840
we want to give them an easy way so we

00:28:13,010 --> 00:28:17,270
have the skeleton application most

00:28:14,840 --> 00:28:19,430
likely Zen tool will use the skeleton

00:28:17,270 --> 00:28:23,240
application to you know give you get you

00:28:19,430 --> 00:28:26,810
started you can grab the skeleton

00:28:23,240 --> 00:28:28,790
application really easily you clone the

00:28:26,810 --> 00:28:31,040
skeleton application off of github you

00:28:28,790 --> 00:28:32,750
go into it we use composer we actually

00:28:31,040 --> 00:28:35,000
have the composer got far file in there

00:28:32,750 --> 00:28:36,890
so you just say PHP composer got far

00:28:35,000 --> 00:28:39,820
install it grabs in framework for you

00:28:36,890 --> 00:28:43,100
and then you point your v host at it and

00:28:39,820 --> 00:28:44,240
you're good to go it's good to start so

00:28:43,100 --> 00:28:48,500
it gives you everything to go right off

00:28:44,240 --> 00:28:49,970
the bat now the folders tree we have a

00:28:48,500 --> 00:28:52,610
you things right off the bat there's

00:28:49,970 --> 00:28:53,930
config data module public and vendor I'm

00:28:52,610 --> 00:28:57,290
gonna go through them in order except

00:28:53,930 --> 00:28:59,150
for module will be last config folder

00:28:57,290 --> 00:29:01,040
has Auto load and these are your local

00:28:59,150 --> 00:29:03,020
overrides so with that we can glob

00:29:01,040 --> 00:29:04,640
things that's why it's called Auto load

00:29:03,020 --> 00:29:06,770
because we're gonna use a glob pattern

00:29:04,640 --> 00:29:08,240
in order to go through them and what

00:29:06,770 --> 00:29:09,760
we've decided is we're no longer going

00:29:08,240 --> 00:29:12,890
to use environments within the configs

00:29:09,760 --> 00:29:14,330
instead you define your environments by

00:29:12,890 --> 00:29:16,220
having different configurations and

00:29:14,330 --> 00:29:18,800
establishing a different glob pattern so

00:29:16,220 --> 00:29:20,060
the default one is global local so your

00:29:18,800 --> 00:29:21,770
global ones will probably go into

00:29:20,060 --> 00:29:23,360
version control the local ones you'll

00:29:21,770 --> 00:29:28,070
have somewhere else and you'll glove

00:29:23,360 --> 00:29:29,060
them in and be able to go from there but

00:29:28,070 --> 00:29:30,920
that's in there now the application

00:29:29,060 --> 00:29:32,330
config is actually relatively short

00:29:30,920 --> 00:29:34,630
because at the beginning of the

00:29:32,330 --> 00:29:36,980
application we really just want to know

00:29:34,630 --> 00:29:40,070
how are we going to get our controllers

00:29:36,980 --> 00:29:41,990
so we'll do that through modules and is

00:29:40,070 --> 00:29:44,270
there any default configuration we need

00:29:41,990 --> 00:29:45,890
for the service manager we're not going

00:29:44,270 --> 00:29:47,330
to talk about these too much other than

00:29:45,890 --> 00:29:48,470
you'll notice that we have two

00:29:47,330 --> 00:29:50,510
directories that we've already seen

00:29:48,470 --> 00:29:51,980
module and vendor in here and those will

00:29:50,510 --> 00:29:56,360
be the default paths that we're going to

00:29:51,980 --> 00:29:58,760
look at for modules and then we activate

00:29:56,360 --> 00:30:01,130
modules explicitly there's no automatic

00:29:58,760 --> 00:30:03,020
anything here we want to explicitly say

00:30:01,130 --> 00:30:04,490
I want the application module if I add

00:30:03,020 --> 00:30:08,360
other ones I'm going to explicitly add

00:30:04,490 --> 00:30:10,370
them in their data folder is going to be

00:30:08,360 --> 00:30:12,680
for you know web data of some sort it

00:30:10,370 --> 00:30:14,300
could be uploads it could be your

00:30:12,680 --> 00:30:18,470
caching stuff and there's all sorts of

00:30:14,300 --> 00:30:20,750
things public of course is the document

00:30:18,470 --> 00:30:23,060
route we have our index dot PHP our

00:30:20,750 --> 00:30:27,440
htaccess any assets that sort of stuff

00:30:23,060 --> 00:30:29,000
boring vendor folder now I say Zen

00:30:27,440 --> 00:30:31,160
framework here if you use composer it

00:30:29,000 --> 00:30:33,860
will actually go to Zend framework slash

00:30:31,160 --> 00:30:36,620
Zen framework all lowercase composer

00:30:33,860 --> 00:30:37,870
uses the package name as a hierarchy so

00:30:36,620 --> 00:30:41,540
it's kind of strange

00:30:37,870 --> 00:30:43,610
regardless since the if you got the

00:30:41,540 --> 00:30:44,330
skeleton application it will find it so

00:30:43,610 --> 00:30:46,130
it will find there

00:30:44,330 --> 00:30:48,230
if you install other things through

00:30:46,130 --> 00:30:50,240
composer or through Pyrus these are your

00:30:48,230 --> 00:30:51,530
vendor libraries your going to put them

00:30:50,240 --> 00:30:53,000
in here that's stuff that you don't want

00:30:51,530 --> 00:30:55,250
to touch typically stuff you don't want

00:30:53,000 --> 00:30:57,470
even in your version control because

00:30:55,250 --> 00:31:00,280
you'll reimplemented play hookie are

00:30:57,470 --> 00:31:03,170
something that pulls that in

00:31:00,280 --> 00:31:06,230
but modules are interesting

00:31:03,170 --> 00:31:07,880
I like modules our module folds are

00:31:06,230 --> 00:31:10,460
actually I'm just gonna define a module

00:31:07,880 --> 00:31:11,990
first and we'll go back to that modules

00:31:10,460 --> 00:31:14,360
all related cloade and assets that

00:31:11,990 --> 00:31:16,460
relate to a specific problem you're not

00:31:14,360 --> 00:31:19,700
gonna put your entire application in a

00:31:16,460 --> 00:31:23,660
single folder anymore if you're writing

00:31:19,700 --> 00:31:25,550
a contact form write a module and have

00:31:23,660 --> 00:31:27,890
that module have the controller any

00:31:25,550 --> 00:31:29,780
validation any forum stuff that you want

00:31:27,890 --> 00:31:31,780
to do in that particular module I've

00:31:29,780 --> 00:31:34,670
already written one so you don't have to

00:31:31,780 --> 00:31:36,830
if you're going to write to use your

00:31:34,670 --> 00:31:38,210
authentication write it as a module and

00:31:36,830 --> 00:31:41,210
in fact somebody already has we have a

00:31:38,210 --> 00:31:43,580
GF Commons organization on github now

00:31:41,210 --> 00:31:44,930
and they're trying to create high

00:31:43,580 --> 00:31:47,270
quality models for you

00:31:44,930 --> 00:31:48,980
CFC user has a very basic stuff that

00:31:47,270 --> 00:31:50,870
hooks in does NDB but they also have

00:31:48,980 --> 00:31:53,360
some extensions that are further modules

00:31:50,870 --> 00:31:55,490
that extend modules for using doctrine

00:31:53,360 --> 00:31:57,770
over a deductr know where m or doctrine

00:31:55,490 --> 00:32:02,690
Oh DM and I believe there's also one for

00:31:57,770 --> 00:32:04,010
a github so auth system the point is

00:32:02,690 --> 00:32:06,950
that you group the related code in one

00:32:04,010 --> 00:32:09,560
place because of the service manager and

00:32:06,950 --> 00:32:11,840
the event system you can pull these you

00:32:09,560 --> 00:32:15,440
know use these in other modules or in

00:32:11,840 --> 00:32:16,910
your application area very easily so you

00:32:15,440 --> 00:32:18,440
want to have it self-contained that

00:32:16,910 --> 00:32:20,600
makes it easier for you to maintain it

00:32:18,440 --> 00:32:21,740
makes you easier to reuse it makes it

00:32:20,600 --> 00:32:25,730
easier to test because you're only

00:32:21,740 --> 00:32:28,940
testing that specific functionality the

00:32:25,730 --> 00:32:31,220
module is basically just a single

00:32:28,940 --> 00:32:34,760
directory and you'll have this module

00:32:31,220 --> 00:32:38,420
dot PHP in there it's a class in that

00:32:34,760 --> 00:32:40,430
namespace I if I were in a different one

00:32:38,420 --> 00:32:42,290
like fly contact that would be my module

00:32:40,430 --> 00:32:45,860
name and I'd have a class fly contact

00:32:42,290 --> 00:32:48,440
module that module class is an empty

00:32:45,860 --> 00:32:50,300
class by default you can define some

00:32:48,440 --> 00:32:52,190
behavior that we have listeners in the

00:32:50,300 --> 00:32:54,140
module loader that will go and do things

00:32:52,190 --> 00:32:55,670
some default ones and I'll show you in a

00:32:54,140 --> 00:32:57,470
minute are things like grabbing auto

00:32:55,670 --> 00:32:59,620
loader configurations so that it knows

00:32:57,470 --> 00:33:01,940
about the classes that you've defined

00:32:59,620 --> 00:33:03,680
grabbing configurations so if you have

00:33:01,940 --> 00:33:06,190
configuration that's specific like mu

00:33:03,680 --> 00:33:08,420
PA's helpers that you want to define

00:33:06,190 --> 00:33:11,270
services that you want to define it will

00:33:08,420 --> 00:33:12,860
do that you can even define services in

00:33:11,270 --> 00:33:14,570
your module so if your

00:33:12,860 --> 00:33:17,470
doing things like closures for factories

00:33:14,570 --> 00:33:20,000
you can do that very simple structure

00:33:17,470 --> 00:33:21,650
the recommended structure we use we have

00:33:20,000 --> 00:33:23,510
config and that's where your module

00:33:21,650 --> 00:33:25,610
specific configuration goes source for

00:33:23,510 --> 00:33:27,440
the PHP code view for the view code I

00:33:25,610 --> 00:33:29,360
also quite often have a public directory

00:33:27,440 --> 00:33:31,610
for assets that are specific to that

00:33:29,360 --> 00:33:33,440
module so for instance if I have any

00:33:31,610 --> 00:33:35,679
images or CSS or JavaScript

00:33:33,440 --> 00:33:38,990
in fact the default application one does

00:33:35,679 --> 00:33:43,280
it has it uses Twitter bootstrap so it

00:33:38,990 --> 00:33:48,110
has some JavaScript and CSS assets so

00:33:43,280 --> 00:33:50,150
this is what it looks like the basic

00:33:48,110 --> 00:33:52,970
goal of a module though is to inform the

00:33:50,150 --> 00:33:54,890
MVC of services which include your

00:33:52,970 --> 00:33:56,870
controllers so that it knows what it can

00:33:54,890 --> 00:33:58,970
do so you want to tell it how do I route

00:33:56,870 --> 00:34:00,500
to specific controllers here are the

00:33:58,970 --> 00:34:02,140
controllers that I know of and here any

00:34:00,500 --> 00:34:04,309
services that are related to it

00:34:02,140 --> 00:34:07,910
they're supposed to be plug-and-play and

00:34:04,309 --> 00:34:08,780
I'm doing a full-day workshop DPC on

00:34:07,910 --> 00:34:11,659
Thursday

00:34:08,780 --> 00:34:13,429
that's PHP conference and the first two

00:34:11,659 --> 00:34:15,619
things I do is I am installing a contact

00:34:13,429 --> 00:34:17,240
form and ZFC user and it's really a drop

00:34:15,619 --> 00:34:19,369
them in and I do a little configuration

00:34:17,240 --> 00:34:23,270
and that's all there is to it it's

00:34:19,369 --> 00:34:24,290
really quite nice once we do that you

00:34:23,270 --> 00:34:26,389
know the modules are simple it's a

00:34:24,290 --> 00:34:29,500
namespace and you have a module class

00:34:26,389 --> 00:34:31,580
file you should be developing modules

00:34:29,500 --> 00:34:33,950
the entities that are for a specific

00:34:31,580 --> 00:34:36,409
problem go into their plugins go into

00:34:33,950 --> 00:34:38,450
their 99% of time you're gonna be doing

00:34:36,409 --> 00:34:39,980
this you'll have things that are

00:34:38,450 --> 00:34:41,659
specific to your application and your

00:34:39,980 --> 00:34:43,250
application module or you know some

00:34:41,659 --> 00:34:46,490
things you might have a few modules that

00:34:43,250 --> 00:34:47,480
are really you never going to reuse but

00:34:46,490 --> 00:34:51,020
most the time you're going to still be

00:34:47,480 --> 00:34:52,879
doing modules and that's because this is

00:34:51,020 --> 00:34:54,590
saying it's a self-contained B piece of

00:34:52,879 --> 00:34:57,109
functionality that has all the different

00:34:54,590 --> 00:34:59,240
concerns that you're interested in now

00:34:57,109 --> 00:35:00,530
this module PHP like I said here we've

00:34:59,240 --> 00:35:02,180
got our auto loaded config we're going

00:35:00,530 --> 00:35:03,980
to do a class map auto loader and

00:35:02,180 --> 00:35:06,770
standard auto loader with our namespace

00:35:03,980 --> 00:35:08,630
our configuration we'll grab that config

00:35:06,770 --> 00:35:11,540
module config that PHP this stuff is

00:35:08,630 --> 00:35:12,830
really easy you can also say I want to

00:35:11,540 --> 00:35:14,420
tie into the bootstrap I want to do

00:35:12,830 --> 00:35:19,010
certain things when the bootstrap event

00:35:14,420 --> 00:35:21,530
is triggered you can do service manager

00:35:19,010 --> 00:35:23,630
configuration as it loops through it

00:35:21,530 --> 00:35:25,400
will see that it has service manager

00:35:23,630 --> 00:35:26,270
configuration and pull that from that

00:35:25,400 --> 00:35:27,680
method

00:35:26,270 --> 00:35:32,539
and there's a few other listeners that

00:35:27,680 --> 00:35:33,829
we do as well I talked about the other

00:35:32,539 --> 00:35:36,619
thing we've got you know we need to

00:35:33,829 --> 00:35:38,180
inform it of controllers and stuff part

00:35:36,619 --> 00:35:40,490
of that's going to be our our

00:35:38,180 --> 00:35:42,880
configuration so we want to configure

00:35:40,490 --> 00:35:45,260
our router our router is really fun

00:35:42,880 --> 00:35:47,089
we've got about seven or eight different

00:35:45,260 --> 00:35:48,950
route types that you can do ranging from

00:35:47,089 --> 00:35:50,839
regular expressions to host names to

00:35:48,950 --> 00:35:53,240
segment routes to literal routes like

00:35:50,839 --> 00:35:54,740
this one and really all you're doing is

00:35:53,240 --> 00:35:57,500
need to find some configuration in there

00:35:54,740 --> 00:35:59,690
in this case we have controller in

00:35:57,500 --> 00:36:02,230
action never use that one always writing

00:35:59,690 --> 00:36:05,510
an explicit one and I go through this on

00:36:02,230 --> 00:36:07,520
Thursday unfortunately you can do the

00:36:05,510 --> 00:36:09,170
literal routes another thing that you

00:36:07,520 --> 00:36:11,510
can do is you can nest the routes so you

00:36:09,170 --> 00:36:12,680
can have child routes and so you can

00:36:11,510 --> 00:36:14,480
define something so one of the

00:36:12,680 --> 00:36:18,289
recommendations I have is that you have

00:36:14,480 --> 00:36:19,490
a top-level module route and then child

00:36:18,289 --> 00:36:21,559
routes underneath it so that you can

00:36:19,490 --> 00:36:23,569
change you know like the namespace on

00:36:21,559 --> 00:36:27,160
the URL system that you utilize for that

00:36:23,569 --> 00:36:29,390
particular controller or rather module

00:36:27,160 --> 00:36:30,680
besides the routes then of course you

00:36:29,390 --> 00:36:33,710
know we said in here that we're going to

00:36:30,680 --> 00:36:35,779
use the go to an index controller so now

00:36:33,710 --> 00:36:37,369
we need to define the index service

00:36:35,779 --> 00:36:39,140
you'll notice here that we have

00:36:37,369 --> 00:36:41,210
separated this is because the controller

00:36:39,140 --> 00:36:42,619
stuff is a scoped container so we're

00:36:41,210 --> 00:36:45,349
going to say that the index one is going

00:36:42,619 --> 00:36:46,940
to go to that particular index

00:36:45,349 --> 00:36:48,740
controller we can do both classes and

00:36:46,940 --> 00:36:50,869
factories classes are like in vocables

00:36:48,740 --> 00:36:58,640
and then factories if you need to do any

00:36:50,869 --> 00:37:00,319
sort of di really easy and then there's

00:36:58,640 --> 00:37:01,700
some other pieces you know we've looked

00:37:00,319 --> 00:37:04,400
at and router and controller view

00:37:01,700 --> 00:37:06,589
manager within you typically you'll only

00:37:04,400 --> 00:37:09,020
be taking looking at the template maps

00:37:06,589 --> 00:37:11,869
and template paths stacks and perhaps

00:37:09,020 --> 00:37:13,490
helpers in the application when we have

00:37:11,869 --> 00:37:15,589
a lot more because we want to you know

00:37:13,490 --> 00:37:18,260
set up things like how we display 404 is

00:37:15,589 --> 00:37:20,450
how we display error pages the doctype

00:37:18,260 --> 00:37:22,450
you can set the base path here if you

00:37:20,450 --> 00:37:24,710
want to so if you're going to be under a

00:37:22,450 --> 00:37:27,680
you know within the same v host as

00:37:24,710 --> 00:37:28,789
another application you can do that so

00:37:27,680 --> 00:37:32,720
these are some of the typical ones

00:37:28,789 --> 00:37:35,359
you'll see the index controller looks a

00:37:32,720 --> 00:37:37,600
lot like what we had in GF one because

00:37:35,359 --> 00:37:40,910
you're simply going to

00:37:37,600 --> 00:37:42,830
we append action to the controllers that

00:37:40,910 --> 00:37:44,030
you're going to use to the actions that

00:37:42,830 --> 00:37:46,790
you want to use and then controller

00:37:44,030 --> 00:37:49,460
there it's very similar one piece that's

00:37:46,790 --> 00:37:51,440
different though is that there's no view

00:37:49,460 --> 00:37:53,780
rendering right off the bat view

00:37:51,440 --> 00:37:56,090
rendering happens at the very end you

00:37:53,780 --> 00:37:58,310
can return a view model here though and

00:37:56,090 --> 00:37:59,780
what the view model does is it tells me

00:37:58,310 --> 00:38:01,460
okay here's the template I want to use

00:37:59,780 --> 00:38:03,680
here are any variables I want to use

00:38:01,460 --> 00:38:05,510
from rendering there's a view model in

00:38:03,680 --> 00:38:08,750
the event that represents the layout and

00:38:05,510 --> 00:38:10,430
this gets then injected into that we

00:38:08,750 --> 00:38:12,800
have a number of listeners by default

00:38:10,430 --> 00:38:14,210
that will do things like auto populate

00:38:12,800 --> 00:38:17,690
the template if you didn't do it

00:38:14,210 --> 00:38:19,580
yourself if you returned in an array it

00:38:17,690 --> 00:38:21,530
will create a view model for you and

00:38:19,580 --> 00:38:23,390
inject that into the layout view model

00:38:21,530 --> 00:38:25,280
as well you can also tell it what

00:38:23,390 --> 00:38:27,320
variable you want to capture it to in

00:38:25,280 --> 00:38:29,150
the layout so that if you wanted to say

00:38:27,320 --> 00:38:31,250
this is going to be the sidebar you

00:38:29,150 --> 00:38:34,730
could capture it to the sidebar variable

00:38:31,250 --> 00:38:35,960
in the layout and say capture - so this

00:38:34,730 --> 00:38:38,390
is one thing that's very different

00:38:35,960 --> 00:38:40,130
we don't render until the very end that

00:38:38,390 --> 00:38:41,360
actually gives us a whole bunch of

00:38:40,130 --> 00:38:43,130
different things that we can do for

00:38:41,360 --> 00:38:44,330
instance if I want to do JSON or

00:38:43,130 --> 00:38:47,990
something like that I can have a

00:38:44,330 --> 00:38:50,060
rendering strategy that says hey the

00:38:47,990 --> 00:38:51,020
accept header says that I want JSON back

00:38:50,060 --> 00:38:53,359
so now we're going to use the JSON

00:38:51,020 --> 00:38:54,140
renderer at this point I'm not going to

00:38:53,359 --> 00:38:57,470
go into all that because this is

00:38:54,140 --> 00:38:59,000
supposed to be a QuickStart so this is

00:38:57,470 --> 00:39:00,020
it really most of stuff that you're

00:38:59,000 --> 00:39:04,130
going to be doing is you're going to

00:39:00,020 --> 00:39:05,210
create a module and so you'll create

00:39:04,130 --> 00:39:06,530
this directory structure we actually

00:39:05,210 --> 00:39:08,119
have a skeleton module that you can do

00:39:06,530 --> 00:39:10,910
that has this entire directory structure

00:39:08,119 --> 00:39:14,180
and some sample assets and configuration

00:39:10,910 --> 00:39:15,470
for you and you you know create some

00:39:14,180 --> 00:39:17,930
controllers you create some routing

00:39:15,470 --> 00:39:19,850
configuration and you tell the

00:39:17,930 --> 00:39:20,420
application that here's my module and

00:39:19,850 --> 00:39:23,680
you're good to go

00:39:20,420 --> 00:39:23,680
so you have a question

00:39:31,330 --> 00:39:35,860
so you can still use libraries you know

00:39:34,570 --> 00:39:37,450
you can put those in the vendor area you

00:39:35,860 --> 00:39:38,560
can even have a library and within there

00:39:37,450 --> 00:39:41,800
there's nothing saying you can't use

00:39:38,560 --> 00:39:43,390
that and in fact you can specify you

00:39:41,800 --> 00:39:45,760
know in your application module you can

00:39:43,390 --> 00:39:47,500
say I also want to add this auto loader

00:39:45,760 --> 00:39:49,870
configuration and so it will go and you

00:39:47,500 --> 00:39:52,510
know look in that directory for those

00:39:49,870 --> 00:39:54,190
things the other thing you can do I've

00:39:52,510 --> 00:39:55,990
done this with some of my stuff I know

00:39:54,190 --> 00:39:57,130
that I'm using the same classes over and

00:39:55,990 --> 00:39:58,780
over again I've actually created a

00:39:57,130 --> 00:40:01,030
module that has that then I drop that in

00:39:58,780 --> 00:40:03,520
and it's just code in there there's no

00:40:01,030 --> 00:40:05,140
MVC stuff but there's you know models

00:40:03,520 --> 00:40:12,180
and interfaces and stuff that I'm gonna

00:40:05,140 --> 00:40:13,680
be using over and over again mm-hmm

00:40:12,180 --> 00:40:20,410
exactly

00:40:13,680 --> 00:40:22,930
yep you got it so skip forward a bit

00:40:20,410 --> 00:40:26,490
here so was there another question over

00:40:22,930 --> 00:40:29,410
here I thought I saw a hand okay

00:40:26,490 --> 00:40:31,630
packaging options how do you get a Zen

00:40:29,410 --> 00:40:33,190
framework - first off with the packages

00:40:31,630 --> 00:40:35,440
that Zend framework comm you can see

00:40:33,190 --> 00:40:36,880
that URL on the top line here that's

00:40:35,440 --> 00:40:41,650
where all the packages for Zen framework

00:40:36,880 --> 00:40:44,140
- are right now that web server is also

00:40:41,650 --> 00:40:46,240
a pair to channel server and it also has

00:40:44,140 --> 00:40:50,290
a pair - installers who called Pyrus

00:40:46,240 --> 00:40:51,790
available for you so you can grab it you

00:40:50,290 --> 00:40:54,610
can use double you get to get the pyro

00:40:51,790 --> 00:40:57,370
stop fire you say virus not fire vendor

00:40:54,610 --> 00:40:59,140
directory and then we say we want a

00:40:57,370 --> 00:41:01,630
channel discover packages and framework

00:40:59,140 --> 00:41:03,130
comm and then I'm gonna install the

00:41:01,630 --> 00:41:04,810
entire framework that's what line four

00:41:03,130 --> 00:41:08,040
is or if I wanted to do a single

00:41:04,810 --> 00:41:10,210
component I can say like ZF - Zen blog

00:41:08,040 --> 00:41:11,710
so we could have per component

00:41:10,210 --> 00:41:12,730
installation so if there's just a few

00:41:11,710 --> 00:41:17,590
that you want to do you can do it

00:41:12,730 --> 00:41:20,830
through Pyrus Pyrus is really cool I've

00:41:17,590 --> 00:41:22,570
had a lot of hope for it but a frame

00:41:20,830 --> 00:41:24,190
it's stalled a lot and the reason being

00:41:22,570 --> 00:41:25,780
that the the lead developers are both

00:41:24,190 --> 00:41:29,470
really busy which makes sense you know

00:41:25,780 --> 00:41:31,270
they're the well employed so the other

00:41:29,470 --> 00:41:33,400
thing that we added with beta 4 is

00:41:31,270 --> 00:41:36,040
composer support how many of you here

00:41:33,400 --> 00:41:38,620
know composer at this point a lot of you

00:41:36,040 --> 00:41:42,040
so for those of you don't know composer

00:41:38,620 --> 00:41:43,690
a few guys got together and said hey we

00:41:42,040 --> 00:41:44,390
don't like package management in PHP

00:41:43,690 --> 00:41:46,849
when you

00:41:44,390 --> 00:41:48,349
you know Pyrus is okay pears okay but

00:41:46,849 --> 00:41:51,950
it's not great and we want to make it

00:41:48,349 --> 00:41:54,319
easier they were inspired by the node

00:41:51,950 --> 00:41:56,809
package manager they looked at you know

00:41:54,319 --> 00:41:57,740
Red Hat and I have to get and stuff like

00:41:56,809 --> 00:42:00,250
that and they tried to figure out a way

00:41:57,740 --> 00:42:02,390
that we can do it it's really nice tool

00:42:00,250 --> 00:42:04,549
packages org has a list of different

00:42:02,390 --> 00:42:06,289
packages and it's also a place where you

00:42:04,549 --> 00:42:08,089
can register packages if you want and

00:42:06,289 --> 00:42:11,569
then get composer is where you actually

00:42:08,089 --> 00:42:14,359
get the the binary basically what you do

00:42:11,569 --> 00:42:15,859
is you tell it most of time you just

00:42:14,359 --> 00:42:18,559
like require but if you have an

00:42:15,859 --> 00:42:21,039
additional repository which we defined

00:42:18,559 --> 00:42:23,930
one with packages does in framework calm

00:42:21,039 --> 00:42:26,329
so we say it's a composer repository and

00:42:23,930 --> 00:42:27,740
we give it the URL to it and it will

00:42:26,329 --> 00:42:29,660
then know where to find our package

00:42:27,740 --> 00:42:32,119
information and then you say I want to

00:42:29,660 --> 00:42:33,109
require if you say we'd send frameworks

00:42:32,119 --> 00:42:34,579
and framework you actually don't need

00:42:33,109 --> 00:42:36,289
the repository because that will go to

00:42:34,579 --> 00:42:37,789
github but if you want an individual

00:42:36,289 --> 00:42:38,359
package you can say something like Zen

00:42:37,789 --> 00:42:41,240
framework

00:42:38,359 --> 00:42:43,190
slashes and vlog and tell it a specific

00:42:41,240 --> 00:42:45,470
version or range of versions you can

00:42:43,190 --> 00:42:47,630
even say asterisks for any version and

00:42:45,470 --> 00:42:49,880
it will go and grab that Pacific package

00:42:47,630 --> 00:42:51,950
for you and the way it does it is you

00:42:49,880 --> 00:42:55,279
grab the Installer and then you say

00:42:51,950 --> 00:42:56,720
install what's cool about this is you

00:42:55,279 --> 00:43:00,410
can actually keep the stuff outside of

00:42:56,720 --> 00:43:01,730
your your version control what this says

00:43:00,410 --> 00:43:03,710
is that when you install it the first

00:43:01,730 --> 00:43:05,000
time creates a composer clock and says

00:43:03,710 --> 00:43:07,759
this is the version that was installed

00:43:05,000 --> 00:43:09,589
and you put that in version control then

00:43:07,759 --> 00:43:12,230
in your deployment phase you can go and

00:43:09,589 --> 00:43:15,890
say composer update and it will see that

00:43:12,230 --> 00:43:18,079
composer lock grab the the files for you

00:43:15,890 --> 00:43:20,660
and install them for you so this is a

00:43:18,079 --> 00:43:23,269
really nice tool so this is another

00:43:20,660 --> 00:43:25,099
option for you we also have some zip and

00:43:23,269 --> 00:43:26,630
tar balls of both the full framework

00:43:25,099 --> 00:43:28,700
with tests and everything as well as a

00:43:26,630 --> 00:43:31,250
minimal version for those of you who

00:43:28,700 --> 00:43:33,230
really want to go that way but these are

00:43:31,250 --> 00:43:34,609
the two easiest ways I can get a

00:43:33,230 --> 00:43:35,900
skeleton application up and running in

00:43:34,609 --> 00:43:40,549
like a minute and a half at this point

00:43:35,900 --> 00:43:41,930
and it's fantastic we're running close

00:43:40,549 --> 00:43:44,779
to time here so I'm going to talk about

00:43:41,930 --> 00:43:46,880
kind of contributions I told you earlier

00:43:44,779 --> 00:43:50,059
the betas are kind of a rolling feature

00:43:46,880 --> 00:43:51,829
like Gmail style so we're getting

00:43:50,059 --> 00:43:54,920
towards the end of that cycle and we

00:43:51,829 --> 00:43:56,269
really need people to test there are a

00:43:54,920 --> 00:43:58,370
lot of ways you can contribute our

00:43:56,269 --> 00:43:59,630
contribution is all upon

00:43:58,370 --> 00:44:00,830
Hubb we have a mailing list and

00:43:59,630 --> 00:44:02,720
everything I'll give you URLs for that

00:44:00,830 --> 00:44:05,090
in a minute but what we need you to do

00:44:02,720 --> 00:44:08,990
is write code write documentation write

00:44:05,090 --> 00:44:12,860
tests test it yourself and give us

00:44:08,990 --> 00:44:14,150
feedback most feedback these days is

00:44:12,860 --> 00:44:16,130
actually coming in the form of poll

00:44:14,150 --> 00:44:16,700
requests which i think is the best way

00:44:16,130 --> 00:44:18,860
possible

00:44:16,700 --> 00:44:20,360
uh-huh so basically if you run across

00:44:18,860 --> 00:44:22,190
something and it doesn't work for you

00:44:20,360 --> 00:44:24,200
give a poll request it can even be a

00:44:22,190 --> 00:44:27,290
pull request simply saying here's a test

00:44:24,200 --> 00:44:28,760
showing my problem and we'll take that

00:44:27,290 --> 00:44:31,730
and say okay now we have a failing test

00:44:28,760 --> 00:44:33,590
and Travis CI is complaining at us so

00:44:31,730 --> 00:44:38,000
we're gonna go and fix it so this is a

00:44:33,590 --> 00:44:39,590
good thing but going download it start

00:44:38,000 --> 00:44:41,360
building applications build modules off

00:44:39,590 --> 00:44:44,840
of it see what works and what doesn't

00:44:41,360 --> 00:44:46,490
and get back to us our main area is we

00:44:44,840 --> 00:44:49,370
have a sub site within framework design

00:44:46,490 --> 00:44:51,440
comm / CF - that has links to our

00:44:49,370 --> 00:44:54,350
mailing list it has links to the bug

00:44:51,440 --> 00:44:57,050
tracker it has links to github we use

00:44:54,350 --> 00:44:59,510
agile Zen now to manage our releases so

00:44:57,050 --> 00:45:00,950
you can we have a board that's pulled

00:44:59,510 --> 00:45:03,560
from the API but you can also register

00:45:00,950 --> 00:45:05,060
with agile Zen and it shows you how so

00:45:03,560 --> 00:45:07,220
they can look at the board and see where

00:45:05,060 --> 00:45:09,110
you can help so you can see stuff that's

00:45:07,220 --> 00:45:10,370
stuck in the ready phase or it's work in

00:45:09,110 --> 00:45:12,800
progress but clearly it hasn't been

00:45:10,370 --> 00:45:16,100
updated in 21 days you can go and then

00:45:12,800 --> 00:45:18,140
contact the developer for that we have

00:45:16,100 --> 00:45:20,270
weekly IRC meetings normally it would be

00:45:18,140 --> 00:45:22,670
a write about two or three hours from

00:45:20,270 --> 00:45:26,450
now it's on Wednesday no tomorrow it's

00:45:22,670 --> 00:45:28,370
on Wednesdays at 800 UTC as ends you

00:45:26,450 --> 00:45:29,930
have two meeting on freenode we

00:45:28,370 --> 00:45:31,970
published the agenda is usually a day or

00:45:29,930 --> 00:45:32,990
two ahead of time so you can see if

00:45:31,970 --> 00:45:34,820
there's something you're interested in

00:45:32,990 --> 00:45:36,590
if you have a subject you want to bring

00:45:34,820 --> 00:45:40,760
up and there's not an agenda create one

00:45:36,590 --> 00:45:42,770
and add it and then it's you have talked

00:45:40,760 --> 00:45:45,550
to is our main IRC channel on freenode

00:45:42,770 --> 00:45:47,780
and there's always people in there

00:45:45,550 --> 00:45:48,890
you'll see a few people that seem to be

00:45:47,780 --> 00:45:51,290
there 24/7

00:45:48,890 --> 00:45:52,610
Ivan Cory is one of those don't do what

00:45:51,290 --> 00:45:55,880
he does he's doing some sort of

00:45:52,610 --> 00:45:57,320
dysphasic sleep pattern and I it sleeps

00:45:55,880 --> 00:45:58,880
for like four hours a day it's crazy

00:45:57,320 --> 00:45:59,270
it's like 20-minute naps for every four

00:45:58,880 --> 00:46:00,920
hours

00:45:59,270 --> 00:46:03,800
so he seems like he's on there all the

00:46:00,920 --> 00:46:06,230
time and he is we've got a few other

00:46:03,800 --> 00:46:08,600
people trying it out which is endlessly

00:46:06,230 --> 00:46:10,340
funny but yeah go in there if you have

00:46:08,600 --> 00:46:12,020
questions or if you want to contribute

00:46:10,340 --> 00:46:12,680
people will point you to stuff that you

00:46:12,020 --> 00:46:15,060
can do

00:46:12,680 --> 00:46:16,440
feedback for this talk is on joined in

00:46:15,060 --> 00:46:18,720
if you haven't gone there already start

00:46:16,440 --> 00:46:20,940
writing talks that you've seen direct

00:46:18,720 --> 00:46:22,770
feedback there's my email address and my

00:46:20,940 --> 00:46:24,660
twitter handle is we're off any are

00:46:22,770 --> 00:46:29,130
there any last questions before we're

00:46:24,660 --> 00:46:31,560
done any pending and things that would

00:46:29,130 --> 00:46:32,760
people were interested in okay I think

00:46:31,560 --> 00:46:35,220
we're actually technically over time I

00:46:32,760 --> 00:46:36,840
show fifty minutes on here so thanks for

00:46:35,220 --> 00:46:39,030
coming I hope you enjoy the rest of the

00:46:36,840 --> 00:46:41,270
conference and try out some work to

00:46:39,030 --> 00:46:41,270
please

00:46:43,830 --> 00:46:52,800

YouTube URL: https://www.youtube.com/watch?v=NsOrT1R6IQ0


