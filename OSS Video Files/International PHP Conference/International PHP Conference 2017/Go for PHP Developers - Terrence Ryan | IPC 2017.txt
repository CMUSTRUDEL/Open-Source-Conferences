Title: Go for PHP Developers - Terrence Ryan | IPC 2017
Publication date: 2019-01-23
Playlist: International PHP Conference 2017
Description: 
	Terrence Ryan (Google) at IPC 2017: Different jobs require different tools. There are times where PHP isnâ€™t the right tool for the job. When those times arise, Go can be a great alternative tool to use. Go is a compiled programming language created by Google and used in emerging tools like Docker and Kubernetes. This session will take you through the basics of Go, compare and contrast it with PHP, and give you some pointers as to what problem areas can you best use Go to compliment your PHP applications.
Captions: 
	00:00:02,100 --> 00:00:10,469
[Music]

00:00:06,830 --> 00:00:12,300
so who here is a PHP developer okay

00:00:10,469 --> 00:00:14,040
alright anybody here not a PHP developer

00:00:12,300 --> 00:00:17,100
you're from the JavaScript side of the

00:00:14,040 --> 00:00:19,980
conference but you snuck in okay would

00:00:17,100 --> 00:00:21,390
you admit it if you did know okay so

00:00:19,980 --> 00:00:23,039
we're all PHP developer anybody here not

00:00:21,390 --> 00:00:25,289
a developer does something else systems

00:00:23,039 --> 00:00:25,590
work or something else okay good all

00:00:25,289 --> 00:00:27,630
right

00:00:25,590 --> 00:00:28,980
not that I mind just I know who

00:00:27,630 --> 00:00:30,390
everybody is they're all PHP developers

00:00:28,980 --> 00:00:33,360
how many of you here have played around

00:00:30,390 --> 00:00:37,140
with go already okay how many people

00:00:33,360 --> 00:00:38,550
have not touched it ever okay all right

00:00:37,140 --> 00:00:41,790
has anybody here just to heckle the

00:00:38,550 --> 00:00:45,600
Google guy no okay would you admit that

00:00:41,790 --> 00:00:47,190
if you did okay yes okay good all right

00:00:45,600 --> 00:00:49,649
all right that gives me a good grounding

00:00:47,190 --> 00:00:51,510
I'm Terry Ryan I'm a developer advocate

00:00:49,649 --> 00:00:54,510
for Google cloud which means I go around

00:00:51,510 --> 00:00:57,059
I spent half my time developing on top

00:00:54,510 --> 00:01:01,100
of Google cloud just like a I guess a

00:00:57,059 --> 00:01:03,270
customer with a really really good NDA

00:01:01,100 --> 00:01:05,489
and the other half of the time I spend

00:01:03,270 --> 00:01:08,430
going out talking about what Google

00:01:05,489 --> 00:01:10,920
cloud can do I don't think this prez Oh

00:01:08,430 --> 00:01:14,280
has a lot of like specific to Google

00:01:10,920 --> 00:01:17,280
cloud stuff in it but if I did and I'm

00:01:14,280 --> 00:01:19,470
not remembering it everything you can do

00:01:17,280 --> 00:01:20,939
you could do on AWS or Azure or anything

00:01:19,470 --> 00:01:23,880
else but I don't think I get into that

00:01:20,939 --> 00:01:25,979
too much another thing I want to make

00:01:23,880 --> 00:01:28,320
sure I make clear as go is just another

00:01:25,979 --> 00:01:29,939
tool this is something that worries me

00:01:28,320 --> 00:01:31,740
giving this type of talk where you're

00:01:29,939 --> 00:01:33,659
saying like hey you develop it one thing

00:01:31,740 --> 00:01:36,570
you should try this other thing right

00:01:33,659 --> 00:01:38,189
and it sometimes comes off as give up

00:01:36,570 --> 00:01:42,090
give up what you're doing and do this

00:01:38,189 --> 00:01:45,240
new thing I don't want to make that I I

00:01:42,090 --> 00:01:48,180
don't want to make that impression go as

00:01:45,240 --> 00:01:50,700
a tool PHP are tools these are these are

00:01:48,180 --> 00:01:52,320
tools we use in our development life I'm

00:01:50,700 --> 00:01:55,040
hopefully and giving you just another

00:01:52,320 --> 00:01:58,790
tool that you can use

00:01:55,040 --> 00:02:01,160
so introduction what is go so goes a

00:01:58,790 --> 00:02:02,480
programming language right it is it was

00:02:01,160 --> 00:02:05,750
developed at Google it's open source

00:02:02,480 --> 00:02:07,820
it's compiled and at some point when you

00:02:05,750 --> 00:02:10,130
start exploring go you ask yourself what

00:02:07,820 --> 00:02:13,330
the hell is this thing comes up and all

00:02:10,130 --> 00:02:16,010
the documentation go has a mascot

00:02:13,330 --> 00:02:18,230
they're very the community is very

00:02:16,010 --> 00:02:21,380
weirdly weirdly attached to it so you

00:02:18,230 --> 00:02:23,870
will see it everywhere and it's a little

00:02:21,380 --> 00:02:26,180
creepy so just that's okay that's normal

00:02:23,870 --> 00:02:27,920
they do that if you want to find out

00:02:26,180 --> 00:02:30,530
more about it it has its own page or the

00:02:27,920 --> 00:02:33,170
go website they like I said they take it

00:02:30,530 --> 00:02:35,570
very very seriously all right so what

00:02:33,170 --> 00:02:37,790
does go we said goes programming

00:02:35,570 --> 00:02:41,540
language it's open source was started at

00:02:37,790 --> 00:02:44,060
Google it is now sort of not run by

00:02:41,540 --> 00:02:47,180
Google itself anymore has its own

00:02:44,060 --> 00:02:51,170
steering committee that takes care of it

00:02:47,180 --> 00:02:52,310
it is compiled in contrast to PHP it is

00:02:51,170 --> 00:02:54,170
garbage collected so you don't have to

00:02:52,310 --> 00:02:56,240
worry about memory allocation or any of

00:02:54,170 --> 00:02:58,880
that stuff it is strongly typed and

00:02:56,240 --> 00:03:00,890
statically typed meaning every variable

00:02:58,880 --> 00:03:02,840
has a type you have to declare it out

00:03:00,890 --> 00:03:04,400
right from the get-go and once you

00:03:02,840 --> 00:03:06,260
declare a type you cannot change that

00:03:04,400 --> 00:03:08,300
variable to another type you can convert

00:03:06,260 --> 00:03:13,640
to a new variable of a different type

00:03:08,300 --> 00:03:18,110
but once a variable is set it is set the

00:03:13,640 --> 00:03:22,580
syntax is C ish I think it has its own

00:03:18,110 --> 00:03:24,560
syntax that's sort of C but well we'll

00:03:22,580 --> 00:03:29,120
see about that it is very very simple

00:03:24,560 --> 00:03:31,670
and that's not necessarily a brag that's

00:03:29,120 --> 00:03:33,560
just a statement of there aren't usually

00:03:31,670 --> 00:03:36,620
ten different ways to get something done

00:03:33,560 --> 00:03:40,459
there's usually just one way of doing it

00:03:36,620 --> 00:03:42,260
that may or may not be good for you it's

00:03:40,459 --> 00:03:44,690
built to use multiple processors so it

00:03:42,260 --> 00:03:46,160
kind of has a where nosov multiple multi

00:03:44,690 --> 00:03:48,769
processor architectures from the get-go

00:03:46,160 --> 00:03:51,620
so spinning off concurrent processes are

00:03:48,769 --> 00:03:52,940
pretty easy tools are already designed

00:03:51,620 --> 00:03:54,680
to deal with the fact that yes we're

00:03:52,940 --> 00:03:57,709
going to be pulling down

00:03:54,680 --> 00:03:58,810
packages from the Internet to to run our

00:03:57,709 --> 00:04:01,120
stuff

00:03:58,810 --> 00:04:02,440
and the language has tools built in to

00:04:01,120 --> 00:04:04,569
make that a little bit easier

00:04:02,440 --> 00:04:06,160
testing is built in and it's a language

00:04:04,569 --> 00:04:09,069
folks focused on software engineering

00:04:06,160 --> 00:04:12,880
and this is where I feel like there's a

00:04:09,069 --> 00:04:16,000
big win to kind of join up with PHP

00:04:12,880 --> 00:04:18,040
developers because a lot of the a lot of

00:04:16,000 --> 00:04:19,570
the other languages that are sort of

00:04:18,040 --> 00:04:22,419
still up-and-coming right now like

00:04:19,570 --> 00:04:25,120
Erlang and rust and you name them they

00:04:22,419 --> 00:04:26,830
tend to be academic they tend to be like

00:04:25,120 --> 00:04:29,500
we have this concept that we want to we

00:04:26,830 --> 00:04:31,750
want to pursue this concept goes about

00:04:29,500 --> 00:04:35,560
getting stuff done and I feel a lot of

00:04:31,750 --> 00:04:37,120
kinship there with PHP to out like we we

00:04:35,560 --> 00:04:39,460
don't care that like academics may not

00:04:37,120 --> 00:04:41,020
look kindly on the language it gets

00:04:39,460 --> 00:04:44,590
stuff done I can get stuff done really

00:04:41,020 --> 00:04:47,890
quickly in it and go has that same that

00:04:44,590 --> 00:04:49,750
same property so we're gonna start we're

00:04:47,890 --> 00:04:51,220
gonna write a simple CLI I'm gonna jump

00:04:49,750 --> 00:04:52,540
back and forth sometimes I'm just gonna

00:04:51,220 --> 00:04:56,050
show the code sometimes I'm gonna show

00:04:52,540 --> 00:04:57,790
the code and run it from my IDE so let's

00:04:56,050 --> 00:05:01,000
just see some code already so let's

00:04:57,790 --> 00:05:03,880
write our first go program this is the

00:05:01,000 --> 00:05:05,919
structure I have a file name main go it

00:05:03,880 --> 00:05:08,260
is packaged main and have a function in

00:05:05,919 --> 00:05:11,830
it called main this is pretty standard

00:05:08,260 --> 00:05:15,400
if you want to create a go binary this

00:05:11,830 --> 00:05:17,470
will be the this will this will be the

00:05:15,400 --> 00:05:19,720
the main source the the the main

00:05:17,470 --> 00:05:21,430
starting point for the binary so even if

00:05:19,720 --> 00:05:22,479
I add packages even if I write sub

00:05:21,430 --> 00:05:24,390
packages

00:05:22,479 --> 00:05:26,680
I'm going to have to start with a main

00:05:24,390 --> 00:05:28,450
new you don't necessarily have to name

00:05:26,680 --> 00:05:31,930
it main go but that's sort of

00:05:28,450 --> 00:05:33,190
stylistically what they do this is hello

00:05:31,930 --> 00:05:36,130
world right I've just don't print line

00:05:33,190 --> 00:05:37,419
hello world this isn't actually how you

00:05:36,130 --> 00:05:39,640
would do it and go I just wanted to

00:05:37,419 --> 00:05:42,160
write the simplest version of it because

00:05:39,640 --> 00:05:45,310
what you would do in go is you would

00:05:42,160 --> 00:05:47,770
actually use the standard library use

00:05:45,310 --> 00:05:51,490
the thumped and yes they call it thumped

00:05:47,770 --> 00:05:55,150
the thumped package which has all of the

00:05:51,490 --> 00:05:58,690
string all the i/o writing strings and

00:05:55,150 --> 00:06:00,789
handling.that features you'll notice

00:05:58,690 --> 00:06:02,260
that I have to import it even if it's in

00:06:00,789 --> 00:06:04,360
the standard library I have to pretty

00:06:02,260 --> 00:06:06,220
much import everything the one exception

00:06:04,360 --> 00:06:09,590
being that print line that is there for

00:06:06,220 --> 00:06:12,810
those in the last slide that's there for

00:06:09,590 --> 00:06:15,660
basically therefore debugging without

00:06:12,810 --> 00:06:18,260
having to import bumped but this is how

00:06:15,660 --> 00:06:23,490
I do hello world VAR string hello world

00:06:18,260 --> 00:06:26,040
bumped print and then then I'd call the

00:06:23,490 --> 00:06:28,650
string and do it that way so let's just

00:06:26,040 --> 00:06:30,180
show that real quick show that I've got

00:06:28,650 --> 00:06:36,270
nothing up my sleeve and this stuff all

00:06:30,180 --> 00:06:37,940
really works let's see yeah close this

00:06:36,270 --> 00:06:41,870
down who's going to get back to it later

00:06:37,940 --> 00:06:43,890
alright hello world - there we go

00:06:41,870 --> 00:06:48,900
alright is this big enough or do I need

00:06:43,890 --> 00:06:51,150
to pump up the fun a little bit oh the

00:06:48,900 --> 00:06:54,050
lighting is rough let me let me see

00:06:51,150 --> 00:06:54,050
references

00:06:54,230 --> 00:06:59,100
is that better okay

00:06:57,390 --> 00:07:02,040
all right I'm gonna bump it up one more

00:06:59,100 --> 00:07:05,419
time and then we'll run so to run this

00:07:02,040 --> 00:07:13,860
I'm just gonna go main go sorry

00:07:05,419 --> 00:07:16,740
go run main go hello world shocking so

00:07:13,860 --> 00:07:20,580
that's simple go all right now let's go

00:07:16,740 --> 00:07:22,740
further let's go here all right so

00:07:20,580 --> 00:07:26,130
that's all I call it now

00:07:22,740 --> 00:07:28,260
I wrote the string like this VAR s

00:07:26,130 --> 00:07:30,720
string equals hello world but that's not

00:07:28,260 --> 00:07:32,850
actually how you do it and go I just

00:07:30,720 --> 00:07:35,720
sort of wanted to make it very clear

00:07:32,850 --> 00:07:38,910
what I was doing before I explained this

00:07:35,720 --> 00:07:42,000
in go you use type inference a lot when

00:07:38,910 --> 00:07:45,540
you're setting straight variables like

00:07:42,000 --> 00:07:49,380
this so I would actually just say s :

00:07:45,540 --> 00:07:51,360
equals hello world go will initialize

00:07:49,380 --> 00:07:52,380
the variable and assume that it's a

00:07:51,360 --> 00:07:56,970
string because that's what you're

00:07:52,380 --> 00:07:59,250
passing it so this is actually how I

00:07:56,970 --> 00:08:00,290
write that and just a little bit

00:07:59,250 --> 00:08:04,590
different okay

00:08:00,290 --> 00:08:06,660
so types standard types are pretty

00:08:04,590 --> 00:08:10,500
prevalent Bull's strings a whole bunch

00:08:06,660 --> 00:08:12,090
of intz bytes runes floats complex and

00:08:10,500 --> 00:08:15,750
I'll talk about arrays slices and maps

00:08:12,090 --> 00:08:17,340
now so you're used to dealing with

00:08:15,750 --> 00:08:19,229
arrays and in every other language you

00:08:17,340 --> 00:08:22,620
call it an array but you very rarely

00:08:19,229 --> 00:08:26,010
deal with straight arrays in go

00:08:22,620 --> 00:08:28,919
reason why is because an array and go is

00:08:26,010 --> 00:08:30,960
a finite order of collected elements so

00:08:28,919 --> 00:08:34,140
I say users equals four strings and I

00:08:30,960 --> 00:08:36,539
have four strings safe there if I want

00:08:34,140 --> 00:08:38,219
to do something dynamic I use a slice

00:08:36,539 --> 00:08:39,390
which points to an array but you ever

00:08:38,219 --> 00:08:42,000
actually see the array implementation

00:08:39,390 --> 00:08:46,860
underneath it and I would say users

00:08:42,000 --> 00:08:49,650
equals in a slice of strings Y so let's

00:08:46,860 --> 00:08:51,089
go here's I set an array of greetings

00:08:49,650 --> 00:08:52,260
right because we're doing hello world

00:08:51,089 --> 00:08:54,029
we're going to do hello world in

00:08:52,260 --> 00:08:57,529
multiple languages

00:08:54,029 --> 00:09:01,560
I say greetings equals an array of five

00:08:57,529 --> 00:09:03,930
strings and here they are well if I add

00:09:01,560 --> 00:09:05,520
to it it'd be an array of six strings

00:09:03,930 --> 00:09:10,560
but since we're statically typed we

00:09:05,520 --> 00:09:12,240
can't change so I could never change or

00:09:10,560 --> 00:09:15,480
add anything to this array because this

00:09:12,240 --> 00:09:18,060
is an array of five I could sub in I

00:09:15,480 --> 00:09:21,360
could swap elements I could replace

00:09:18,060 --> 00:09:25,140
hello world with the Korean if I wanted

00:09:21,360 --> 00:09:28,160
to but I couldn't add Korean so what I

00:09:25,140 --> 00:09:31,380
would do is instead create a slice of

00:09:28,160 --> 00:09:32,670
strings and then I can append greetings

00:09:31,380 --> 00:09:35,850
append and I can add I guess that's

00:09:32,670 --> 00:09:38,250
Greek I'm adding to it so when in doubt

00:09:35,850 --> 00:09:39,540
just use a slice I never actually like

00:09:38,250 --> 00:09:44,760
the number of times I've ever actually

00:09:39,540 --> 00:09:46,620
used a what is a a go array is like I

00:09:44,760 --> 00:09:49,170
almost always do slices but you go and

00:09:46,620 --> 00:09:50,730
look up this stuff up and the kind of

00:09:49,170 --> 00:09:52,320
documentation assumes you know that

00:09:50,730 --> 00:09:54,209
distinction that you know that slices

00:09:52,320 --> 00:09:56,459
are slices are what you want and arrays

00:09:54,209 --> 00:10:01,170
or not what you want so just a little

00:09:56,459 --> 00:10:03,330
gotcha there okay so I now have a slice

00:10:01,170 --> 00:10:06,450
of strings that I'm going to use to

00:10:03,330 --> 00:10:09,240
power this app and now I can do

00:10:06,450 --> 00:10:11,279
something like this where I say here's

00:10:09,240 --> 00:10:14,160
my I just abbreviated it but assume that

00:10:11,279 --> 00:10:17,360
it's all the strings I'm gonna randomly

00:10:14,160 --> 00:10:21,600
seed whenever you call the random

00:10:17,360 --> 00:10:24,720
function you have to seed it so I want

00:10:21,600 --> 00:10:26,339
to seam it with time now UNIX Nano this

00:10:24,720 --> 00:10:28,380
is good for this type of application but

00:10:26,339 --> 00:10:31,170
not good enough for like cryptography so

00:10:28,380 --> 00:10:34,410
just be aware of that

00:10:31,170 --> 00:10:36,540
take the length of the greeting array

00:10:34,410 --> 00:10:39,089
and then I'm gonna get a random value

00:10:36,540 --> 00:10:43,200
for this and I'm gonna plug it in here

00:10:39,089 --> 00:10:47,190
and this is how I refer to that okay so

00:10:43,200 --> 00:10:51,470
we now switch back once it was that four

00:10:47,190 --> 00:10:59,029
main 3 yep so here's that same function

00:10:51,470 --> 00:11:03,620
I'm gonna run that go run main that go

00:10:59,029 --> 00:11:06,600
okay and I get the Spanish or Portuguese

00:11:03,620 --> 00:11:09,180
Korean Greek all right so it's working

00:11:06,600 --> 00:11:11,279
as expected although I'm worried that it

00:11:09,180 --> 00:11:16,380
there we go all right oh hey it's not

00:11:11,279 --> 00:11:18,240
the German great all right so now it'd

00:11:16,380 --> 00:11:20,550
be nice to have input right we want to

00:11:18,240 --> 00:11:23,040
actually you know interact with our app

00:11:20,550 --> 00:11:25,829
here so this would be the format I'd

00:11:23,040 --> 00:11:28,139
like to do we'll just start with getting

00:11:25,829 --> 00:11:30,810
one of the values of that array instead

00:11:28,139 --> 00:11:33,149
of getting a random value I'm what I'll

00:11:30,810 --> 00:11:36,839
do is I'll use Aflac so I'll say flag

00:11:33,149 --> 00:11:39,300
int I'll parts the flags and then I'll

00:11:36,839 --> 00:11:45,060
use the flag here now let's break this

00:11:39,300 --> 00:11:47,010
up explain it so flag int Lang which is

00:11:45,060 --> 00:11:49,470
the string I'm going to use on the

00:11:47,010 --> 00:11:53,040
command line a default value and a

00:11:49,470 --> 00:11:55,230
definition which I can use to get help

00:11:53,040 --> 00:11:57,779
from my executables later if I want I

00:11:55,230 --> 00:12:01,440
parts the flags and then again I'm going

00:11:57,779 --> 00:12:03,570
to use star I what is the star star

00:12:01,440 --> 00:12:06,810
means that I get a pointer and not the

00:12:03,570 --> 00:12:10,680
actual value pointer is a link to the

00:12:06,810 --> 00:12:12,360
memory address of the of the value it

00:12:10,680 --> 00:12:15,120
allows us to pass by reference instead

00:12:12,360 --> 00:12:16,620
of passing by value basically in dealing

00:12:15,120 --> 00:12:18,300
with them you will see stars and you'll

00:12:16,620 --> 00:12:20,430
see ampersands I could talk about this

00:12:18,300 --> 00:12:23,670
for a very long time but we'll give just

00:12:20,430 --> 00:12:27,269
sort of a quick if you just see P person

00:12:23,670 --> 00:12:29,790
equals Steve 28 P is a person it's just

00:12:27,269 --> 00:12:31,199
a person if you see the ampersand here

00:12:29,790 --> 00:12:33,959
it means that you're creating a

00:12:31,199 --> 00:12:35,790
reference to a person and not the actual

00:12:33,959 --> 00:12:36,810
it's not the actual values it's the

00:12:35,790 --> 00:12:39,120
reference you're going to be passing

00:12:36,810 --> 00:12:44,710
around and then if I want to get that

00:12:39,120 --> 00:12:46,810
value out ID no I I use the

00:12:44,710 --> 00:12:48,580
the star to get it out that's going to

00:12:46,810 --> 00:12:50,050
give you the actual value if I pass in

00:12:48,580 --> 00:12:52,540
the ampersand that's going to pass me

00:12:50,050 --> 00:12:55,839
the reference and then my functions can

00:12:52,540 --> 00:12:59,050
require either the value or the

00:12:55,839 --> 00:13:02,200
reference you will see this a lot so

00:12:59,050 --> 00:13:04,120
just be aware of it when you start you

00:13:02,200 --> 00:13:06,190
start using this that you need to you

00:13:04,120 --> 00:13:07,480
need to pass around the references for a

00:13:06,190 --> 00:13:11,080
lot of the standard library especially

00:13:07,480 --> 00:13:12,970
for things where you're mutating the the

00:13:11,080 --> 00:13:16,029
value you're going to want to pass a

00:13:12,970 --> 00:13:18,790
pointer instead of passing the value all

00:13:16,029 --> 00:13:20,110
right they're gonna handle errors we're

00:13:18,790 --> 00:13:22,720
gonna make sure that if someone passes

00:13:20,110 --> 00:13:25,450
in a value that is not in the array that

00:13:22,720 --> 00:13:27,190
we throw an error message now this is

00:13:25,450 --> 00:13:30,670
one of those places where I point out

00:13:27,190 --> 00:13:32,290
that go is simple in a lot of languages

00:13:30,670 --> 00:13:35,040
you can create some sort of thing that

00:13:32,290 --> 00:13:39,520
kind of is I is between these two values

00:13:35,040 --> 00:13:41,529
for shorthand you cannot in go why

00:13:39,520 --> 00:13:44,920
because this expresses it expresses it

00:13:41,529 --> 00:13:46,779
simply and well I assume right that's

00:13:44,920 --> 00:13:49,240
what the authors were trying to do they

00:13:46,779 --> 00:13:50,380
don't they don't want to they just want

00:13:49,240 --> 00:13:53,170
to make it simple and brute force this

00:13:50,380 --> 00:13:56,950
works everybody will understand it there

00:13:53,170 --> 00:14:02,020
you go all right so I'm going to run

00:13:56,950 --> 00:14:04,209
this and make sure that again nothing up

00:14:02,020 --> 00:14:15,779
my sleeve there we go

00:14:04,209 --> 00:14:18,670
and me go run main go Lang equal four

00:14:15,779 --> 00:14:23,020
hello well yep alright I got it and then

00:14:18,670 --> 00:14:24,160
one then two all right so this is all

00:14:23,020 --> 00:14:27,490
working and then if I pass in a value

00:14:24,160 --> 00:14:28,900
that is completely wrong I get the error

00:14:27,490 --> 00:14:29,829
message out great

00:14:28,900 --> 00:14:33,550
so everything's working the way he

00:14:29,829 --> 00:14:37,000
expected to okay so let's finish up this

00:14:33,550 --> 00:14:38,380
program it would be nice actually if

00:14:37,000 --> 00:14:43,899
this was the interface right right pass

00:14:38,380 --> 00:14:46,540
in the language that I want so what I'm

00:14:43,899 --> 00:14:48,579
gonna do is do a map which you might

00:14:46,540 --> 00:14:51,520
recognize as a hash or just a

00:14:48,579 --> 00:14:56,710
associative array in PHP but it's called

00:14:51,520 --> 00:14:58,900
a map in go and to be very exact you

00:14:56,710 --> 00:15:01,840
to initialize it with this format the

00:14:58,900 --> 00:15:04,960
key value and the value sorry the key

00:15:01,840 --> 00:15:06,280
type and the value type so I can do it

00:15:04,960 --> 00:15:08,830
one of two ways you can do it literally

00:15:06,280 --> 00:15:11,860
or I can make it

00:15:08,830 --> 00:15:13,300
it'll make an uninitialized value of it

00:15:11,860 --> 00:15:18,040
and then I can use that later and

00:15:13,300 --> 00:15:19,690
populate it dynamically so then this

00:15:18,040 --> 00:15:21,850
becomes really simple I have a map I

00:15:19,690 --> 00:15:24,730
take in the format from the flag and

00:15:21,850 --> 00:15:27,160
then I check to see if it's in the the

00:15:24,730 --> 00:15:28,840
map and then print it out which point

00:15:27,160 --> 00:15:32,440
someone might say what the hell is that

00:15:28,840 --> 00:15:34,120
thing you will see a lot of go code that

00:15:32,440 --> 00:15:36,610
looks like this and when you're first

00:15:34,120 --> 00:15:38,650
getting into it it will confuse the hell

00:15:36,610 --> 00:15:41,650
or at least it did me if it didn't like

00:15:38,650 --> 00:15:43,780
great doesn't confuse you great but it

00:15:41,650 --> 00:15:44,890
did confuse me when I first got to it so

00:15:43,780 --> 00:15:47,590
let's break this down if I was doing

00:15:44,890 --> 00:15:50,590
this in PHP do pretty straightforward I

00:15:47,590 --> 00:15:52,990
have an array of greetings I just type

00:15:50,590 --> 00:15:55,240
them in like that I check to see if the

00:15:52,990 --> 00:15:58,480
value is already set in arc V if it

00:15:55,240 --> 00:16:02,710
isn't I set it to English because I I

00:15:58,480 --> 00:16:04,150
prefer English sorry you could set it to

00:16:02,710 --> 00:16:05,620
german and be fine

00:16:04,150 --> 00:16:07,930
then i check to see if it exists in the

00:16:05,620 --> 00:16:10,150
array and if it does I print out the

00:16:07,930 --> 00:16:12,490
value if it doesn't I send out an error

00:16:10,150 --> 00:16:14,650
message okay pretty straightforward

00:16:12,490 --> 00:16:16,030
pretty simple all right so let's now

00:16:14,650 --> 00:16:17,050
switch back to this concert this is

00:16:16,030 --> 00:16:18,160
exactly what we're doing here we're

00:16:17,050 --> 00:16:19,870
checking to see if it exists in the

00:16:18,160 --> 00:16:21,520
array and if it does it's going to spit

00:16:19,870 --> 00:16:25,870
out the message and if it doesn't it's

00:16:21,520 --> 00:16:32,080
going to spit out an error so if our

00:16:25,870 --> 00:16:35,380
okay equals G flag L or sorry pointer L

00:16:32,080 --> 00:16:36,910
okay printf all right so let's let's

00:16:35,380 --> 00:16:40,320
break this out let's let's separate this

00:16:36,910 --> 00:16:42,430
out first okay so we split out the if

00:16:40,320 --> 00:16:44,770
makes a little bit more sense but let's

00:16:42,430 --> 00:16:49,440
make the variables like human readable

00:16:44,770 --> 00:16:52,930
and we get this result key exists equals

00:16:49,440 --> 00:16:56,980
greetings language go can return more

00:16:52,930 --> 00:16:59,410
than one results from a function you can

00:16:56,980 --> 00:17:01,180
return its two is the most common but

00:16:59,410 --> 00:17:05,500
you could return any number that you

00:17:01,180 --> 00:17:08,920
want so when we pull when we do this

00:17:05,500 --> 00:17:10,540
this operation when we try to get the

00:17:08,920 --> 00:17:13,110
key of a map out

00:17:10,540 --> 00:17:16,810
it returns two variables a result and

00:17:13,110 --> 00:17:18,220
does the key exists so if the key exists

00:17:16,810 --> 00:17:19,930
we want to print the result if the key

00:17:18,220 --> 00:17:23,590
doesn't exist we're gonna we're gonna

00:17:19,930 --> 00:17:26,380
send this error message but all of the

00:17:23,590 --> 00:17:27,610
variables here that aren't from above

00:17:26,380 --> 00:17:30,730
and that aren't reading and language

00:17:27,610 --> 00:17:35,020
result he exists only really get called

00:17:30,730 --> 00:17:36,610
here so go prefers if you're only gonna

00:17:35,020 --> 00:17:38,500
call it and like if you're only gonna

00:17:36,610 --> 00:17:41,050
use it once to keep it in the most

00:17:38,500 --> 00:17:44,170
limited scope you possibly can so if we

00:17:41,050 --> 00:17:48,450
do that we can put if result he exists

00:17:44,170 --> 00:17:51,040
greeting language and then key exists

00:17:48,450 --> 00:17:54,040
then print out the result and then

00:17:51,040 --> 00:17:56,140
result and key exists only exists in

00:17:54,040 --> 00:17:58,780
this one little box and then after this

00:17:56,140 --> 00:18:00,160
there those variables go away and so

00:17:58,780 --> 00:18:03,760
that's a little bit more efficient and

00:18:00,160 --> 00:18:06,760
then finally go prefers small variable

00:18:03,760 --> 00:18:11,680
names so you would write it like this R

00:18:06,760 --> 00:18:13,450
equals okay okay and that so we go back

00:18:11,680 --> 00:18:17,260
here and now this makes a little bit

00:18:13,450 --> 00:18:19,360
more sense this may bring up the

00:18:17,260 --> 00:18:21,100
question why are go variables so short

00:18:19,360 --> 00:18:23,320
and you will see this all the time when

00:18:21,100 --> 00:18:25,450
you read source code go read any of the

00:18:23,320 --> 00:18:29,230
standard libraries the the variable

00:18:25,450 --> 00:18:32,380
names are like it's almost like go is

00:18:29,230 --> 00:18:37,510
like could we be like less scrutiny than

00:18:32,380 --> 00:18:40,360
Pearl could we do that and the reason

00:18:37,510 --> 00:18:42,300
why is because go Raiders ago we hate

00:18:40,360 --> 00:18:45,040
you and we hate things that are good

00:18:42,300 --> 00:18:46,540
that is the joke I make at their expense

00:18:45,040 --> 00:18:48,430
what they would actually tell you is

00:18:46,540 --> 00:18:49,780
that variable names and go should be

00:18:48,430 --> 00:18:51,310
short rather than long this is

00:18:49,780 --> 00:18:52,900
especially true for local variables as

00:18:51,310 --> 00:18:55,180
limited scope so in that case

00:18:52,900 --> 00:18:57,670
result and key exists or like they're

00:18:55,180 --> 00:18:59,140
only used in that one space it makes

00:18:57,670 --> 00:19:00,720
sense we don't need to scan over the

00:18:59,140 --> 00:19:02,890
whole document to see where they are

00:19:00,720 --> 00:19:04,810
they're only used at one spot we can

00:19:02,890 --> 00:19:06,100
make them one one character and that's

00:19:04,810 --> 00:19:08,950
all that matters so prefers to either

00:19:06,100 --> 00:19:11,710
line count prefer I to slice index and

00:19:08,950 --> 00:19:14,350
the joke I like to make is that PHP

00:19:11,710 --> 00:19:17,140
would call this a dog go would call this

00:19:14,350 --> 00:19:18,100
D all right of course we could all laugh

00:19:17,140 --> 00:19:19,690
at our friends in the Java community

00:19:18,100 --> 00:19:23,270
because they would call it puppet with

00:19:19,690 --> 00:19:26,420
the sad face factory beat right

00:19:23,270 --> 00:19:30,530
so I kind of happier to go this really

00:19:26,420 --> 00:19:32,090
really short way actually it could make

00:19:30,530 --> 00:19:34,700
the joke that be another type of factory

00:19:32,090 --> 00:19:37,610
the dog but I don't want to want to be

00:19:34,700 --> 00:19:39,350
too scatological so as short as we can

00:19:37,610 --> 00:19:40,370
without with while being descriptive and

00:19:39,350 --> 00:19:42,170
the further away from which they're

00:19:40,370 --> 00:19:44,120
being used the longer they can be so if

00:19:42,170 --> 00:19:45,860
you have a variable that is used

00:19:44,120 --> 00:19:47,480
throughout your entire routine or your

00:19:45,860 --> 00:19:48,920
entire package it's a global variable

00:19:47,480 --> 00:19:52,070
yeah you're gonna want to be long so

00:19:48,920 --> 00:19:53,600
it's descriptive but if if it's short

00:19:52,070 --> 00:19:55,970
and it's really used in one place are

00:19:53,600 --> 00:19:57,710
right so the local variable is are a

00:19:55,970 --> 00:20:01,940
package public variable would be rate

00:19:57,710 --> 00:20:05,810
right so some variable name conventions

00:20:01,940 --> 00:20:07,970
- this helps out I is usually index C is

00:20:05,810 --> 00:20:10,750
count or context depending on the

00:20:07,970 --> 00:20:13,700
context R and W or reader/writer

00:20:10,750 --> 00:20:16,040
requester responds for HTTP request

00:20:13,700 --> 00:20:17,780
error is our buffers buffer F is file

00:20:16,040 --> 00:20:19,360
and okay is for any one of those times

00:20:17,780 --> 00:20:21,830
you do an assertion as something exists

00:20:19,360 --> 00:20:27,140
okay is kind of what you'll see in the

00:20:21,830 --> 00:20:29,570
code alright so we have our CLI we're

00:20:27,140 --> 00:20:32,300
able to do more operations with it

00:20:29,570 --> 00:20:34,250
I'm not going to bother running it let's

00:20:32,300 --> 00:20:37,220
now talk about packaging or writing code

00:20:34,250 --> 00:20:40,190
to be shared so this is that same

00:20:37,220 --> 00:20:42,710
function packaged up so I could use it

00:20:40,190 --> 00:20:45,140
in multiple other places so in this case

00:20:42,710 --> 00:20:46,610
I have packaged hello world because I'm

00:20:45,140 --> 00:20:50,390
defining it off it's got to be in its

00:20:46,610 --> 00:20:52,760
own folder called hello world VAR

00:20:50,390 --> 00:20:54,920
greetings I have that defined and then I

00:20:52,760 --> 00:20:56,810
don't have to worry about flags and I

00:20:54,920 --> 00:20:59,810
just say greet language and you see this

00:20:56,810 --> 00:21:01,520
is a long variable name I actually got

00:20:59,810 --> 00:21:04,280
the note that doesn't really need to be

00:21:01,520 --> 00:21:06,890
language could just be Lang but it could

00:21:04,280 --> 00:21:08,480
be shorter and I decided I'll be for the

00:21:06,890 --> 00:21:12,110
purpose of this be a little bit longer

00:21:08,480 --> 00:21:14,180
and less less than screw double so it

00:21:12,110 --> 00:21:15,590
takes the language which is a string and

00:21:14,180 --> 00:21:17,750
it's gonna return a string and an error

00:21:15,590 --> 00:21:23,960
like I said this is actually a very very

00:21:17,750 --> 00:21:28,220
common pattern results and error so if R

00:21:23,960 --> 00:21:30,980
is okay return the result and nil for an

00:21:28,220 --> 00:21:33,410
empty air else return an empty string

00:21:30,980 --> 00:21:35,600
and errors new the the language you

00:21:33,410 --> 00:21:36,770
selected is not valid now this actually

00:21:35,600 --> 00:21:38,780
isn't how

00:21:36,770 --> 00:21:41,510
I would do this just kind of wanted to

00:21:38,780 --> 00:21:42,710
start here what actually no no I'll get

00:21:41,510 --> 00:21:44,510
to that in a second never mind that is

00:21:42,710 --> 00:21:49,430
how we do stuff don't ignore the man

00:21:44,510 --> 00:21:51,230
behind the curtain so in my packages if

00:21:49,430 --> 00:21:52,880
I want it to be a local function the

00:21:51,230 --> 00:21:54,950
first letter is lowercase if I want it

00:21:52,880 --> 00:21:57,050
to be public the first letter is

00:21:54,950 --> 00:21:59,720
uppercase and that's all there is to it

00:21:57,050 --> 00:22:01,750
one in this private or exported on

00:21:59,720 --> 00:22:06,710
exported and the other one is exported

00:22:01,750 --> 00:22:09,290
so going back to this well there we go

00:22:06,710 --> 00:22:11,450
going back to this example Greek would

00:22:09,290 --> 00:22:14,540
be accessible outside the package helper

00:22:11,450 --> 00:22:18,410
would only work inside the package okay

00:22:14,540 --> 00:22:20,630
so now I get to error handling so I had

00:22:18,410 --> 00:22:21,980
this this is the function right and I

00:22:20,630 --> 00:22:23,780
return errors new the language you

00:22:21,980 --> 00:22:26,540
selected is not valid what I would

00:22:23,780 --> 00:22:29,420
actually do is I would create a exported

00:22:26,540 --> 00:22:31,640
variable or not found and I'll call it

00:22:29,420 --> 00:22:33,770
errors new the language of seconds not

00:22:31,640 --> 00:22:36,830
value and then I would pass this error

00:22:33,770 --> 00:22:39,110
out and I'll show you why in a second so

00:22:36,830 --> 00:22:43,640
in my calling code the way I handle this

00:22:39,110 --> 00:22:47,810
is I call the greet function and then if

00:22:43,640 --> 00:22:51,710
error is not nil lobbed fatal error that

00:22:47,810 --> 00:22:53,390
are like the text of the error but in

00:22:51,710 --> 00:22:55,610
this particular function I have the list

00:22:53,390 --> 00:22:59,390
somewhere I could return the list if I

00:22:55,610 --> 00:23:01,070
wanted to so what I can do is say if

00:22:59,390 --> 00:23:02,870
error hello world are not found is

00:23:01,070 --> 00:23:05,330
exported so are these two values the

00:23:02,870 --> 00:23:09,200
same if they are just list the languages

00:23:05,330 --> 00:23:11,870
if not then throw an error and otherwise

00:23:09,200 --> 00:23:13,070
if it works just return the reading so

00:23:11,870 --> 00:23:14,990
you'll see this a lot when you start

00:23:13,070 --> 00:23:16,670
handling errors you will compare errors

00:23:14,990 --> 00:23:19,390
and it's really great when you have

00:23:16,670 --> 00:23:23,630
defined arrow types makes this sort of

00:23:19,390 --> 00:23:27,160
negotiation a lot easier okay so here is

00:23:23,630 --> 00:23:29,920
my hello world package all kind of setup

00:23:27,160 --> 00:23:33,650
so when I want to call this fat package

00:23:29,920 --> 00:23:36,530
I am sharing it on my github repo under

00:23:33,650 --> 00:23:38,360
go samples in hello world so anyone else

00:23:36,530 --> 00:23:40,910
wants to use this this is what they

00:23:38,360 --> 00:23:42,560
would refer to and I'll show you how to

00:23:40,910 --> 00:23:44,390
pull down these dependencies in a second

00:23:42,560 --> 00:23:45,740
but this makes it really clear when

00:23:44,390 --> 00:23:47,510
you're reading the code if you want to

00:23:45,740 --> 00:23:50,360
look what pack what is this package that

00:23:47,510 --> 00:23:50,690
he's calling if they're up here and they

00:23:50,360 --> 00:23:52,250
don't

00:23:50,690 --> 00:23:56,000
any prefixes we know they're standard

00:23:52,250 --> 00:23:57,620
library if they're down here and the

00:23:56,000 --> 00:23:59,990
formatting tools you use for go we'll

00:23:57,620 --> 00:24:01,220
split these up for you but if not you

00:23:59,990 --> 00:24:03,440
have to do this you have to split them

00:24:01,220 --> 00:24:06,040
up like this just for readability sake

00:24:03,440 --> 00:24:07,940
then I know where that is now

00:24:06,040 --> 00:24:11,090
all right let's talk about object

00:24:07,940 --> 00:24:12,620
orientation because go is not really

00:24:11,090 --> 00:24:14,810
object oriented but you can sort of pull

00:24:12,620 --> 00:24:16,610
it off you can do what we do we call

00:24:14,810 --> 00:24:18,080
custom types and you're mostly around

00:24:16,610 --> 00:24:20,510
structs but you can do anything as a

00:24:18,080 --> 00:24:23,960
custom type but most custom types are

00:24:20,510 --> 00:24:26,300
gonna be strings be structs so instead

00:24:23,960 --> 00:24:28,390
of passing out just a string of greeting

00:24:26,300 --> 00:24:32,450
i want to pass out a structure that

00:24:28,390 --> 00:24:35,840
structure has text string and then I can

00:24:32,450 --> 00:24:37,940
add methods to that custom type so I add

00:24:35,840 --> 00:24:40,190
a receiver here saying gee greeting so

00:24:37,940 --> 00:24:43,460
whatever whatever the reading has been

00:24:40,190 --> 00:24:46,520
set if someone asks for the address it's

00:24:43,460 --> 00:24:48,500
gonna return gtx+ human so you know I

00:24:46,520 --> 00:24:53,530
say hello it's gonna say hello human

00:24:48,500 --> 00:24:55,730
right then if I want them to be private

00:24:53,530 --> 00:24:58,940
because we don't want our threats to

00:24:55,730 --> 00:25:00,710
bubble out of this custom type we have

00:24:58,940 --> 00:25:03,050
our threat so only another method in

00:25:00,710 --> 00:25:07,970
here can call that and ha human we will

00:25:03,050 --> 00:25:11,360
crush them so and then if I want to have

00:25:07,970 --> 00:25:12,980
a exported variable I can do that too so

00:25:11,360 --> 00:25:15,320
this secret wood is part of the

00:25:12,980 --> 00:25:18,410
structure but it's only callable only

00:25:15,320 --> 00:25:23,800
interactable from inside the structure

00:25:18,410 --> 00:25:26,420
itself so package type and method names

00:25:23,800 --> 00:25:29,300
be districted the descriptive but

00:25:26,420 --> 00:25:31,610
concise so package l a little bit too

00:25:29,300 --> 00:25:33,620
short package lock file writer a little

00:25:31,610 --> 00:25:35,810
bit too long the sweet spot we're

00:25:33,620 --> 00:25:38,240
looking for is lock right and then don't

00:25:35,810 --> 00:25:41,240
repeat yourself in the method name so no

00:25:38,240 --> 00:25:44,060
log lock file write or log lock I'll

00:25:41,240 --> 00:25:46,460
read better yet would be log write that

00:25:44,060 --> 00:25:50,060
takes a file log read that takes the

00:25:46,460 --> 00:25:51,110
file but even better than that and I

00:25:50,060 --> 00:25:53,390
won't go too much in interface

00:25:51,110 --> 00:25:56,300
interfaces but just interfaces are a

00:25:53,390 --> 00:25:59,090
thing in didn't go I could write to an

00:25:56,300 --> 00:26:02,360
interface so log right destination aisle

00:25:59,090 --> 00:26:04,290
writer library source IO reader well

00:26:02,360 --> 00:26:07,140
this allows me to do is

00:26:04,290 --> 00:26:08,790
especially for testing like it was like

00:26:07,140 --> 00:26:10,140
a web request right I don't want to

00:26:08,790 --> 00:26:12,450
actually spit up a browser and do my

00:26:10,140 --> 00:26:13,890
tests in a browser I want to just have

00:26:12,450 --> 00:26:16,260
the test all work command-line so what

00:26:13,890 --> 00:26:18,300
you can do is simulate a web browser

00:26:16,260 --> 00:26:22,830
because all of the methods around the

00:26:18,300 --> 00:26:24,720
web require a type not necessarily sorry

00:26:22,830 --> 00:26:26,880
require an interface and not necessarily

00:26:24,720 --> 00:26:30,050
it has to be an HTTP request it can be

00:26:26,880 --> 00:26:34,050
any reader or any writer so that helps

00:26:30,050 --> 00:26:35,430
all right speaking of the web we didn't

00:26:34,050 --> 00:26:37,620
come here to build CL eyes we came here

00:26:35,430 --> 00:26:39,480
to build web applications so let's do

00:26:37,620 --> 00:26:40,740
that so we have our web app and we have

00:26:39,480 --> 00:26:43,080
our base package that we talked about

00:26:40,740 --> 00:26:44,700
before package hello world we have our

00:26:43,080 --> 00:26:47,130
greetings we have our error that works

00:26:44,700 --> 00:26:49,260
porting we have our greet function which

00:26:47,130 --> 00:26:51,060
report returns a string and an error and

00:26:49,260 --> 00:26:53,340
then we have our languages function that

00:26:51,060 --> 00:26:57,240
just returns the array of greetings

00:26:53,340 --> 00:26:58,800
I made this private this private and

00:26:57,240 --> 00:27:00,510
this call it because I don't want

00:26:58,800 --> 00:27:04,260
someone outside the package manipulating

00:27:00,510 --> 00:27:06,120
the greetings then we have our web

00:27:04,260 --> 00:27:09,570
function we see we have a bunch of new

00:27:06,120 --> 00:27:11,850
imports we have log coding JSON and net

00:27:09,570 --> 00:27:14,940
HTTP then we have our hello or package

00:27:11,850 --> 00:27:18,660
we have this I'll talk about that so

00:27:14,940 --> 00:27:21,330
basically with go for the most part we

00:27:18,660 --> 00:27:24,060
don't use outside browsers because HTTP

00:27:21,330 --> 00:27:25,740
serving is all built-in to go I'm sorry

00:27:24,060 --> 00:27:27,900
not outside browsers what I meant

00:27:25,740 --> 00:27:30,210
outside web servers right like so you

00:27:27,900 --> 00:27:34,100
can hook this up to nginx and that is a

00:27:30,210 --> 00:27:37,140
that is in some use cases pretty common

00:27:34,100 --> 00:27:39,810
but even more common than that is to

00:27:37,140 --> 00:27:41,310
just expose your you know built the web

00:27:39,810 --> 00:27:47,310
server and the go executable and expose

00:27:41,310 --> 00:27:49,470
the web executable like and I often get

00:27:47,310 --> 00:27:52,890
the question like well is that like is

00:27:49,470 --> 00:27:54,930
that safe can you really spin just your

00:27:52,890 --> 00:27:57,360
language directly out and the answer is

00:27:54,930 --> 00:27:59,610
like we do it at Google all the time so

00:27:57,360 --> 00:28:02,490
we're ok with it

00:27:59,610 --> 00:28:04,920
so we've been doing it just fine but

00:28:02,490 --> 00:28:06,360
some people do put a reverse proxy in

00:28:04,920 --> 00:28:09,420
front of it and that's totally fine but

00:28:06,360 --> 00:28:11,730
so I handle function I say I want all

00:28:09,420 --> 00:28:13,230
requests to get handled by handle get I

00:28:11,730 --> 00:28:15,420
want all requests by list handled by

00:28:13,230 --> 00:28:18,760
handle list and then I want you to

00:28:15,420 --> 00:28:22,520
listen and serve on port 8080

00:28:18,760 --> 00:28:25,700
so handle lists is pretty similar just

00:28:22,520 --> 00:28:28,190
that's pretty basic I get the list from

00:28:25,700 --> 00:28:30,470
hello world languages I convert it to

00:28:28,190 --> 00:28:33,350
JSON I then take that and if there's an

00:28:30,470 --> 00:28:35,990
error I spit out the error and if not I

00:28:33,350 --> 00:28:38,390
sent out the JSON with HTTP status okay

00:28:35,990 --> 00:28:43,160
and I'll show that function in a second

00:28:38,390 --> 00:28:44,990
hello get a little bit more there I get

00:28:43,160 --> 00:28:46,970
the form value so I want the query

00:28:44,990 --> 00:28:50,780
string for language from the from the

00:28:46,970 --> 00:28:52,070
URL I want greet and I do that function

00:28:50,780 --> 00:28:53,930
if they ask for something I don't have

00:28:52,070 --> 00:28:55,550
I've returned just the error I didn't

00:28:53,930 --> 00:28:59,150
bother with error checking or you know

00:28:55,550 --> 00:29:01,490
checking if it's not found then send the

00:28:59,150 --> 00:29:02,990
JSON and then handle error is pretty

00:29:01,490 --> 00:29:06,410
straightforward I convert it to a string

00:29:02,990 --> 00:29:10,160
I sorry I converted to JSON and then I

00:29:06,410 --> 00:29:12,590
send it to using send JSON and I'd lock

00:29:10,160 --> 00:29:15,620
the error otherwise send JSON will take

00:29:12,590 --> 00:29:18,790
set the header write the status and in

00:29:15,620 --> 00:29:21,680
that case before was HTTP okay this time

00:29:18,790 --> 00:29:23,060
it's status internal server error it'll

00:29:21,680 --> 00:29:28,520
write that and then print out the

00:29:23,060 --> 00:29:30,080
content to the response writer so we'll

00:29:28,520 --> 00:29:37,190
see that in action before I get to

00:29:30,080 --> 00:29:39,100
concurrency that's concurrency there we

00:29:37,190 --> 00:29:47,360
go so here we are we're running this

00:29:39,100 --> 00:29:50,720
will go t go run main that go and we'll

00:29:47,360 --> 00:29:54,370
allow outside function calls and then

00:29:50,720 --> 00:29:57,530
this should throw a 404 which is fine

00:29:54,370 --> 00:30:00,920
because we actually want that so we feed

00:29:57,530 --> 00:30:02,420
list we get that if we go to get and we

00:30:00,920 --> 00:30:05,630
put nothing in we get the languages

00:30:02,420 --> 00:30:08,750
invalid and if we put in why am I asking

00:30:05,630 --> 00:30:10,670
for French I ask for German hello well

00:30:08,750 --> 00:30:12,970
and we look back here on the command

00:30:10,670 --> 00:30:15,710
line we'll see that the error bubbled up

00:30:12,970 --> 00:30:17,420
into standard out they could also get

00:30:15,710 --> 00:30:19,250
sent to the logs but then we kind of

00:30:17,420 --> 00:30:22,970
know what's going on when that happened

00:30:19,250 --> 00:30:25,270
so simple web server written in go and

00:30:22,970 --> 00:30:28,280
that was that was all it took

00:30:25,270 --> 00:30:30,170
okay so one of the big features of go

00:30:28,280 --> 00:30:31,040
that we talk about a lot is concurrency

00:30:30,170 --> 00:30:32,450
and I

00:30:31,040 --> 00:30:34,100
showoff concurrency I don't have any

00:30:32,450 --> 00:30:38,900
slides on it I'm just going to show kind

00:30:34,100 --> 00:30:41,210
of pure code so I have a couple

00:30:38,900 --> 00:30:44,000
functions here greeting Munich read

00:30:41,210 --> 00:30:46,490
Paris greet Cairo Beijing whatnot

00:30:44,000 --> 00:30:48,560
if we look at what I have here I have

00:30:46,490 --> 00:30:51,890
some constants which are the distance I

00:30:48,560 --> 00:30:55,280
am from each of these places these are

00:30:51,890 --> 00:30:57,560
approximate in kilometers from each one

00:30:55,280 --> 00:30:59,450
of these places for and we're in Munich

00:30:57,560 --> 00:31:02,930
so it makes sense that it would start

00:30:59,450 --> 00:31:05,780
from Munich so when I greet let's look

00:31:02,930 --> 00:31:09,320
down and see what the Greek functions do

00:31:05,780 --> 00:31:10,700
in each city this just de ferran trait

00:31:09,320 --> 00:31:13,130
this is just a way of tracing how long

00:31:10,700 --> 00:31:14,300
it takes because you'll see that in a

00:31:13,130 --> 00:31:15,950
minute

00:31:14,300 --> 00:31:17,360
then we're gonna sleep in milliseconds

00:31:15,950 --> 00:31:19,370
the distance from the city and

00:31:17,360 --> 00:31:23,030
kilometers and then afterwards we're

00:31:19,370 --> 00:31:24,530
gonna send a greeting and we'll pass in

00:31:23,030 --> 00:31:27,050
German so we've spent in the right

00:31:24,530 --> 00:31:29,690
language and you'll see all that does is

00:31:27,050 --> 00:31:31,670
call hello world Greek language and then

00:31:29,690 --> 00:31:33,470
print out ignore the color stuff it's

00:31:31,670 --> 00:31:37,150
just it's just changing the formatting

00:31:33,470 --> 00:31:41,420
when it comes out in Munich which is

00:31:37,150 --> 00:31:45,470
zero kilometers away they say hello welt

00:31:41,420 --> 00:31:47,960
right okay all right and that's it

00:31:45,470 --> 00:31:49,490
you'll notice here I don't really care

00:31:47,960 --> 00:31:50,660
about the error not because you

00:31:49,490 --> 00:31:51,770
shouldn't care about errors but I just

00:31:50,660 --> 00:31:53,180
want to make it a little bit simpler and

00:31:51,770 --> 00:31:56,120
when I don't care about the variable I

00:31:53,180 --> 00:31:58,940
set it to this underscore the reason why

00:31:56,120 --> 00:32:00,920
is if I let this be error that would be

00:31:58,940 --> 00:32:03,980
a variable that I initialize then then

00:32:00,920 --> 00:32:05,900
don't use and go we'll throw a

00:32:03,980 --> 00:32:08,570
compilation error so if you if you spin

00:32:05,900 --> 00:32:10,360
up a variable you have to use it if you

00:32:08,570 --> 00:32:12,260
include a package you have to use it

00:32:10,360 --> 00:32:13,910
otherwise go we'll send a compilation

00:32:12,260 --> 00:32:15,880
error all right so we know what this

00:32:13,910 --> 00:32:18,950
function is going to do it's going to

00:32:15,880 --> 00:32:22,130
greet all of from all of these places

00:32:18,950 --> 00:32:24,710
and it's gonna it's gonna basically take

00:32:22,130 --> 00:32:31,910
as much time as it is far away so let's

00:32:24,710 --> 00:32:33,860
go run main go all right you kind of see

00:32:31,910 --> 00:32:35,690
it happens immediately from unic takes

00:32:33,860 --> 00:32:37,970
longer from paris takes still longer

00:32:35,690 --> 00:32:40,220
from cairo and it's gonna keep going as

00:32:37,970 --> 00:32:43,340
we go through this is suboptimal right

00:32:40,220 --> 00:32:47,779
like it shouldn't take

00:32:43,340 --> 00:32:51,409
and plus n plus n plus n it should take

00:32:47,779 --> 00:32:53,149
the longest time of the last greeting

00:32:51,409 --> 00:32:56,019
right it should it should be Mexico City

00:32:53,149 --> 00:32:58,700
I believe is it'll be the furthest away

00:32:56,019 --> 00:33:02,480
so this whole thing which should have

00:32:58,700 --> 00:33:04,249
taken nine point eight four or five

00:33:02,480 --> 00:33:05,929
seconds took thirty seconds because we

00:33:04,249 --> 00:33:07,549
added all these up if we could do them

00:33:05,929 --> 00:33:10,399
all at the same time we'd get a better

00:33:07,549 --> 00:33:13,460
result so we're gonna do that so we're

00:33:10,399 --> 00:33:16,309
gonna comment out this and we're gonna

00:33:13,460 --> 00:33:18,710
add concurrency go concurrency is

00:33:16,309 --> 00:33:21,590
actually really straightforward and

00:33:18,710 --> 00:33:24,980
simple to start with that gets really

00:33:21,590 --> 00:33:33,259
confusing so hopefully I won't get you

00:33:24,980 --> 00:33:38,499
there we comment this out all right

00:33:33,259 --> 00:33:43,820
I'm gonna cheat there we go come on yeah

00:33:38,499 --> 00:33:45,350
all right so to run in a separate

00:33:43,820 --> 00:33:47,119
product not in a separate process but

00:33:45,350 --> 00:33:49,509
what we call a go routine which is much

00:33:47,119 --> 00:33:53,090
lighter weight than a thread in a Java

00:33:49,509 --> 00:33:55,519
I just put go in front of it so it

00:33:53,090 --> 00:33:57,830
creates its own subroutine go greet me

00:33:55,519 --> 00:33:59,480
to go greet Paris go greet Cairo and

00:33:57,830 --> 00:34:04,220
these will all run separately and I

00:33:59,480 --> 00:34:05,389
don't have to I don't have to wait on

00:34:04,220 --> 00:34:08,960
each one they'll all run at the same

00:34:05,389 --> 00:34:10,339
time so let's do that again and oh whoa

00:34:08,960 --> 00:34:13,669
we actually got Munich in before it

00:34:10,339 --> 00:34:16,069
stopped why well because it's going to

00:34:13,669 --> 00:34:18,710
fire off each one of these and in this

00:34:16,069 --> 00:34:23,010
case let me actually let me clear that

00:34:18,710 --> 00:34:25,679
so it's less confusing try it again

00:34:23,010 --> 00:34:29,280
it was able to get to Munich but by the

00:34:25,679 --> 00:34:30,720
time it called the rest of them it was

00:34:29,280 --> 00:34:33,899
done so it closed down the whole

00:34:30,720 --> 00:34:37,200
function so in this case I can't I can't

00:34:33,899 --> 00:34:39,030
just fire and forget because the the app

00:34:37,200 --> 00:34:40,379
isn't still running now if I was running

00:34:39,030 --> 00:34:42,149
something like a web server I could

00:34:40,379 --> 00:34:43,830
probably do it because the whole process

00:34:42,149 --> 00:34:45,780
is still gonna keep running but in this

00:34:43,830 --> 00:34:48,179
case what I'm just going to do to make

00:34:45,780 --> 00:34:51,060
this kind of the simplest is I'm going

00:34:48,179 --> 00:34:53,669
to sleep for 12 seconds and if I sleep

00:34:51,060 --> 00:34:55,050
for 12 seconds we should see the

00:34:53,669 --> 00:34:57,680
function stays running and all of these

00:34:55,050 --> 00:35:01,500
happen and they happen instead of

00:34:57,680 --> 00:35:03,420
additively they happen sequentially and

00:35:01,500 --> 00:35:04,440
sort of yeah so sequential I'm sorry it

00:35:03,420 --> 00:35:06,630
says it sequentially they're happening

00:35:04,440 --> 00:35:08,820
from parallel so the whole thing took 12

00:35:06,630 --> 00:35:10,320
seconds which is good but still Suffa

00:35:08,820 --> 00:35:12,630
optimal because I had to like sleep for

00:35:10,320 --> 00:35:18,770
some arbitrary amount of time what would

00:35:12,630 --> 00:35:22,109
be better is if I could if I could wait

00:35:18,770 --> 00:35:23,820
for things to get done so I'm gonna go

00:35:22,109 --> 00:35:26,250
to that version of it which again gets a

00:35:23,820 --> 00:35:31,260
little bit more complicated so I'll walk

00:35:26,250 --> 00:35:34,140
through this code backhand clear all

00:35:31,260 --> 00:35:37,890
right so what I'm doing here is I create

00:35:34,140 --> 00:35:38,970
a sink weight group and I add 6 to it

00:35:37,890 --> 00:35:40,140
cuz that's the number of functions going

00:35:38,970 --> 00:35:41,609
to call you can you can do this

00:35:40,140 --> 00:35:44,400
dynamically if you want and I do in a

00:35:41,609 --> 00:35:47,340
lot of cases then I wrap an anonymous

00:35:44,400 --> 00:35:50,040
function here this is go function greet

00:35:47,340 --> 00:35:51,869
Munich and then also say WD done so

00:35:50,040 --> 00:35:53,609
there's six of them where they get done

00:35:51,869 --> 00:35:55,770
firing they're gonna say done and then

00:35:53,609 --> 00:35:57,890
the counter is gonna slowly go down on

00:35:55,770 --> 00:36:00,240
this at the very end of this I say wait

00:35:57,890 --> 00:36:03,150
it's gonna wait till all of them are

00:36:00,240 --> 00:36:07,410
done so now when I run this function I'm

00:36:03,150 --> 00:36:11,460
clear again and then go run Mingo it's

00:36:07,410 --> 00:36:13,020
gonna run again in parallel great we're

00:36:11,460 --> 00:36:14,280
gonna take a little bit longer for the

00:36:13,020 --> 00:36:16,530
rest of it to come because it's further

00:36:14,280 --> 00:36:20,250
away but then San Francisco Mexico City

00:36:16,530 --> 00:36:22,040
and then done no nope because I didn't

00:36:20,250 --> 00:36:25,020
actually save sorry about that

00:36:22,040 --> 00:36:27,210
so let me try that one more time with

00:36:25,020 --> 00:36:28,500
actually saving it and you'll see

00:36:27,210 --> 00:36:31,020
what'll happen then in this case it'll

00:36:28,500 --> 00:36:33,090
go all the way to the end and then and

00:36:31,020 --> 00:36:34,590
right after Mexico City instead of

00:36:33,090 --> 00:36:35,760
having to wait another three seconds

00:36:34,590 --> 00:36:36,330
there you go

00:36:35,760 --> 00:36:38,760
worked

00:36:36,330 --> 00:36:41,130
alright so that is concurrency and go

00:36:38,760 --> 00:36:42,330
really simple to get started with can

00:36:41,130 --> 00:36:45,240
get very confusing

00:36:42,330 --> 00:36:49,160
the further out you go so let's talk a

00:36:45,240 --> 00:36:51,630
little bit about tooling go if you

00:36:49,160 --> 00:36:53,910
contribute to any go open source you

00:36:51,630 --> 00:36:57,300
have to format it the right way

00:36:53,910 --> 00:36:59,610
there is no there is no though do we put

00:36:57,300 --> 00:37:02,190
it on another line do we put spaces

00:36:59,610 --> 00:37:03,240
there is no that discussion and go there

00:37:02,190 --> 00:37:05,910
is one way to do it

00:37:03,240 --> 00:37:09,510
you run go fump and it'll take care of

00:37:05,910 --> 00:37:11,400
that for you like no extra lines like if

00:37:09,510 --> 00:37:12,360
you if you like I'm gonna leave a whole

00:37:11,400 --> 00:37:13,830
bunch of space here because I want to

00:37:12,360 --> 00:37:18,960
write a function there eventually go

00:37:13,830 --> 00:37:21,000
we'll just go nope and that's just again

00:37:18,960 --> 00:37:25,110
a stylistic there's only one way of

00:37:21,000 --> 00:37:27,480
doing it that that has its pluses and

00:37:25,110 --> 00:37:29,520
minuses if I want to build the

00:37:27,480 --> 00:37:31,170
executable I just say go build and

00:37:29,520 --> 00:37:32,490
that'll build the executable of this

00:37:31,170 --> 00:37:36,240
version I don't have to run it every

00:37:32,490 --> 00:37:39,330
single time testing go tests I'm gonna

00:37:36,240 --> 00:37:43,320
really quickly go through testing

00:37:39,330 --> 00:37:44,130
scenario here so in my HelloWorld

00:37:43,320 --> 00:37:47,150
package

00:37:44,130 --> 00:37:49,230
I have HelloWorld underscore test and

00:37:47,150 --> 00:37:52,260
you'll see that up the top

00:37:49,230 --> 00:37:54,390
it's just part backage HelloWorld so

00:37:52,260 --> 00:37:57,960
this is uh this is what we call a white

00:37:54,390 --> 00:38:00,330
box test because it can see everything

00:37:57,960 --> 00:38:01,890
that's in the package so it can call

00:38:00,330 --> 00:38:04,800
internal variables and it can it can

00:38:01,890 --> 00:38:07,140
cause more harm or do more good

00:38:04,800 --> 00:38:08,970
depending on your outlook so I have a I

00:38:07,140 --> 00:38:11,460
have my test here so I'm going to go

00:38:08,970 --> 00:38:15,360
ahead and run this and so I'm just going

00:38:11,460 --> 00:38:17,580
to say go test and you'll see that it

00:38:15,360 --> 00:38:19,230
passes now one of the cool things that's

00:38:17,580 --> 00:38:21,540
built into the testing tool is coverage

00:38:19,230 --> 00:38:26,550
built right in and I can see that I'm

00:38:21,540 --> 00:38:27,960
only at 5757 percent of my statements

00:38:26,550 --> 00:38:30,330
are covered and that's because I'm

00:38:27,960 --> 00:38:35,360
hiding all of this up here commented it

00:38:30,330 --> 00:38:35,360
out so let's go ahead and uncomment this

00:38:36,670 --> 00:38:44,170
and when I do that right now and this is

00:38:41,890 --> 00:38:45,910
one of the I'm gonna go to the slide

00:38:44,170 --> 00:38:52,630
just because it it I could show it all

00:38:45,910 --> 00:38:54,809
in one screen so let me make it bigger

00:38:52,630 --> 00:38:57,430
sorry about that

00:38:54,809 --> 00:39:01,000
so a very common pattern we see in go

00:38:57,430 --> 00:39:03,039
testing is you build a table of tests so

00:39:01,000 --> 00:39:06,760
you build cases I have my input I have

00:39:03,039 --> 00:39:10,480
what I expect out and I have an error so

00:39:06,760 --> 00:39:13,450
in the case of I put in nothing I should

00:39:10,480 --> 00:39:15,099
get back nothing and error not found if

00:39:13,450 --> 00:39:18,640
I put in English I should get back hello

00:39:15,099 --> 00:39:21,510
world and then I do a range over those

00:39:18,640 --> 00:39:25,660
and the range format it goes for index

00:39:21,510 --> 00:39:27,339
value range classes so I don't care

00:39:25,660 --> 00:39:29,109
about the index I only want the value so

00:39:27,339 --> 00:39:31,480
I go actually out error out equals this

00:39:29,109 --> 00:39:33,099
and then if actual out does not equal

00:39:31,480 --> 00:39:36,039
out I'm gonna throw an error and if

00:39:33,099 --> 00:39:37,569
actual error doesn't I actually can

00:39:36,039 --> 00:39:39,369
ignore this part I didn't realize that

00:39:37,569 --> 00:39:41,500
when I wrote this slide but I actually

00:39:39,369 --> 00:39:45,579
just say if actual error is the same as

00:39:41,500 --> 00:39:49,990
CR then then throw this so this test

00:39:45,579 --> 00:39:55,210
results so when I call this code go

00:39:49,990 --> 00:39:59,230
ahead and run it will see that there are

00:39:55,210 --> 00:40:01,750
two failing tests here you need to write

00:39:59,230 --> 00:40:03,309
this kind of like so we can see what the

00:40:01,750 --> 00:40:05,440
input and what the output was but if you

00:40:03,309 --> 00:40:06,849
do that I can see oh I have some extra

00:40:05,440 --> 00:40:10,930
statements here for English that I don't

00:40:06,849 --> 00:40:13,509
really need I'll comment that out and

00:40:10,930 --> 00:40:16,269
then when I go here I'll go test cover

00:40:13,509 --> 00:40:21,190
and we'll see I'm at 85% but it's all

00:40:16,269 --> 00:40:23,349
passing but what is that last 15% and

00:40:21,190 --> 00:40:24,789
again this isn't you should for

00:40:23,349 --> 00:40:25,059
something this small it's not that big a

00:40:24,789 --> 00:40:27,190
deal

00:40:25,059 --> 00:40:29,049
you should necessarily have to pursue

00:40:27,190 --> 00:40:30,369
100% coverage but like I'm gonna be a

00:40:29,049 --> 00:40:33,309
stickler I'm going to say it's got to be

00:40:30,369 --> 00:40:36,130
hundred percent covered one of the ways

00:40:33,309 --> 00:40:38,289
that I can do this I can see what's

00:40:36,130 --> 00:40:41,890
going on because you'll notice that I

00:40:38,289 --> 00:40:44,030
have if I hold on if I run this test

00:40:41,890 --> 00:40:46,520
here run package tests

00:40:44,030 --> 00:40:47,840
it runs if I run it the idea I get the

00:40:46,520 --> 00:40:52,430
coverage and then I can actually see

00:40:47,840 --> 00:40:53,690
here alright so that green is all stuff

00:40:52,430 --> 00:40:54,890
that was handled by the tests of right

00:40:53,690 --> 00:40:56,510
of the stuff that was not I'm not

00:40:54,890 --> 00:40:58,660
testing whether or not the error

00:40:56,510 --> 00:41:03,740
returned so let me go back and do that

00:40:58,660 --> 00:41:06,260
and now what I run this package I get

00:41:03,740 --> 00:41:07,640
100% coverage and I go back here and

00:41:06,260 --> 00:41:09,740
you'll see that line is lit up

00:41:07,640 --> 00:41:11,030
so all this tolling is integrated and

00:41:09,740 --> 00:41:13,130
it's all part of the copÃ¡n like you get

00:41:11,030 --> 00:41:15,800
it right from the right from downloading

00:41:13,130 --> 00:41:17,920
go in the first place so really really

00:41:15,800 --> 00:41:19,610
helps make testing and all that faster

00:41:17,920 --> 00:41:20,900
documentation if I want to see the

00:41:19,610 --> 00:41:23,090
documentation of the package I can type

00:41:20,900 --> 00:41:24,980
go doc if I want to see it in a way

00:41:23,090 --> 00:41:28,070
that's actually meaningful and helpful I

00:41:24,980 --> 00:41:30,170
say go doc HTTP they are different one

00:41:28,070 --> 00:41:34,820
is go Spacedock and one is go doc one

00:41:30,170 --> 00:41:37,760
one word HCP 8080 and then assuming I

00:41:34,820 --> 00:41:39,770
write all of my comments properly and

00:41:37,760 --> 00:41:41,840
there's a there's a style guide to

00:41:39,770 --> 00:41:43,580
writing that and most of the go linting

00:41:41,840 --> 00:41:47,330
tools will catch if you don't you'll

00:41:43,580 --> 00:41:49,460
follow it you will get this out and you

00:41:47,330 --> 00:41:52,130
start looking through go documentation

00:41:49,460 --> 00:41:54,230
you will see this type of screen this

00:41:52,130 --> 00:41:56,150
this exact look and feel all over the

00:41:54,230 --> 00:41:58,370
place because that's it's the only thing

00:41:56,150 --> 00:42:00,740
people use for documentation is your

00:41:58,370 --> 00:42:02,690
package documentation you can add

00:42:00,740 --> 00:42:04,370
examples and you can add other stuff to

00:42:02,690 --> 00:42:06,620
it to make it make it work and in fact

00:42:04,370 --> 00:42:08,780
the way you add examples is you add it

00:42:06,620 --> 00:42:12,560
to your test case and it'll actually

00:42:08,780 --> 00:42:14,090
test the example code for you so that if

00:42:12,560 --> 00:42:17,060
you write example code that doesn't work

00:42:14,090 --> 00:42:19,190
it'll get flagged by your tests so all

00:42:17,060 --> 00:42:20,540
that all of it you can be sure that all

00:42:19,190 --> 00:42:24,650
of your examples and everything work

00:42:20,540 --> 00:42:26,450
before it gets into documentation so if

00:42:24,650 --> 00:42:29,960
I want to retrieve a dependency I say go

00:42:26,450 --> 00:42:31,820
get github.com slash gorilla slash RPC

00:42:29,960 --> 00:42:33,170
that'll get that package down and pull

00:42:31,820 --> 00:42:36,830
it down so that's how I retrieve

00:42:33,170 --> 00:42:38,690
dependencies as I'm building like as I

00:42:36,830 --> 00:42:41,690
can kind of figure out that I need other

00:42:38,690 --> 00:42:45,260
packages to do stuff ID you see that I'm

00:42:41,690 --> 00:42:47,330
using vs code vs code has go tools not

00:42:45,260 --> 00:42:50,630
built right in but really really easily

00:42:47,330 --> 00:42:52,430
downloadable and so you see here's me

00:42:50,630 --> 00:42:54,110
writing stumbling through writing my go

00:42:52,430 --> 00:42:57,620
code

00:42:54,110 --> 00:43:01,040
I see I make a a main eye sorry I'm

00:42:57,620 --> 00:43:04,610
throwing the microphone around the

00:43:01,040 --> 00:43:06,860
thumps printf you see I get help for it

00:43:04,610 --> 00:43:09,590
and then what's really great is I have a

00:43:06,860 --> 00:43:11,210
thing that will just call in if I call

00:43:09,590 --> 00:43:15,140
code it'll automatically write the

00:43:11,210 --> 00:43:18,140
import for me and that's called go

00:43:15,140 --> 00:43:20,270
imports which is sort of a superset of

00:43:18,140 --> 00:43:21,950
go thumped and you'll notice that I put

00:43:20,270 --> 00:43:25,820
all those extra lines and I saved it

00:43:21,950 --> 00:43:29,990
it automatically wrote back so that is

00:43:25,820 --> 00:43:31,340
that alright so that's it for kind of

00:43:29,990 --> 00:43:32,780
talking through the language now when I

00:43:31,340 --> 00:43:35,360
talk about some use cases I want to talk

00:43:32,780 --> 00:43:37,970
about when does it make sense

00:43:35,360 --> 00:43:41,600
not necessarily switch but to sub in go

00:43:37,970 --> 00:43:43,580
for something so I'm gonna take my first

00:43:41,600 --> 00:43:45,290
task here which is I'm gonna get

00:43:43,580 --> 00:43:47,960
articles from a word press my sequel

00:43:45,290 --> 00:43:50,420
instance I'm going to flatten them into

00:43:47,960 --> 00:43:51,920
straight HTML files I don't I don't I

00:43:50,420 --> 00:43:53,330
don't want to store it in WordPress

00:43:51,920 --> 00:43:56,840
anymore maybe and I'm gonna write it to

00:43:53,330 --> 00:43:58,040
disk alright so in all of these examples

00:43:56,840 --> 00:44:01,040
I'm gonna go through I didn't

00:43:58,040 --> 00:44:02,900
necessarily write the best PHP or go

00:44:01,040 --> 00:44:06,140
code I could I wrote a straightforward

00:44:02,900 --> 00:44:08,510
brute forth algorithm unless I make a

00:44:06,140 --> 00:44:11,510
notice that I did like I'll call him out

00:44:08,510 --> 00:44:13,190
in a couple places but I basically just

00:44:11,510 --> 00:44:14,680
straightforward got done the task it

00:44:13,190 --> 00:44:17,600
happened in a reasonable amount of time

00:44:14,680 --> 00:44:21,800
so I didn't overly optimize either end

00:44:17,600 --> 00:44:24,220
of this so when I wrote to disk so I

00:44:21,800 --> 00:44:28,010
wrote the same algorithm in both in both

00:44:24,220 --> 00:44:31,610
languages I tried to do it ten times and

00:44:28,010 --> 00:44:33,890
you'll see that PHP happened in 573

00:44:31,610 --> 00:44:36,410
milliseconds and go happened in 557

00:44:33,890 --> 00:44:38,810
milliseconds and if I increase the time

00:44:36,410 --> 00:44:41,440
to ten that's a hundred you'll see that

00:44:38,810 --> 00:44:44,840
the PHP was actually faster than the go

00:44:41,440 --> 00:44:46,340
why because if you repeat this a whole

00:44:44,840 --> 00:44:47,510
bunch of times they'll they'll go back

00:44:46,340 --> 00:44:50,630
and forth wanna win and want to lose

00:44:47,510 --> 00:44:52,280
because it's the processing and the

00:44:50,630 --> 00:44:53,900
memory and all that like that's not the

00:44:52,280 --> 00:44:56,060
real stumbling block here the real

00:44:53,900 --> 00:44:58,820
stumbling block here is IO and IO is

00:44:56,060 --> 00:45:01,970
expensive like you know doesn't matter

00:44:58,820 --> 00:45:04,520
what language you're using IO is going

00:45:01,970 --> 00:45:06,830
to be expensive now

00:45:04,520 --> 00:45:08,360
that was my first attempts but I was

00:45:06,830 --> 00:45:10,340
like come on you're talking about go you

00:45:08,360 --> 00:45:12,710
should make it outperform right like you

00:45:10,340 --> 00:45:15,890
should have a point here so I cheated

00:45:12,710 --> 00:45:18,260
and I wrote the the first time I did it

00:45:15,890 --> 00:45:19,520
I did it sequentially so basically I

00:45:18,260 --> 00:45:21,320
just looped through and every time I

00:45:19,520 --> 00:45:24,590
just wrote I wrote I had a function that

00:45:21,320 --> 00:45:26,630
wrote the the outputs for my second

00:45:24,590 --> 00:45:28,190
attempt I used concurrency so just

00:45:26,630 --> 00:45:31,130
exactly what I did before I waited till

00:45:28,190 --> 00:45:34,369
they were all done I'm sorry I I fanned

00:45:31,130 --> 00:45:35,600
out to as many processes as I needed and

00:45:34,369 --> 00:45:37,730
waited till they are all done and

00:45:35,600 --> 00:45:39,770
finished the go code when I did that

00:45:37,730 --> 00:45:42,980
you'll see that I got it yeah

00:45:39,770 --> 00:45:45,890
so the PHP took 4.6 seconds and the go

00:45:42,980 --> 00:45:49,640
p-- up 2.8 seconds is this really

00:45:45,890 --> 00:45:53,210
compelling to like switch yeah probably

00:45:49,640 --> 00:45:54,590
not right if now if I'm doing this if I

00:45:53,210 --> 00:45:56,900
have to do this millions and millions of

00:45:54,590 --> 00:45:59,119
times well maybe because that is you

00:45:56,900 --> 00:46:01,100
know a 60 something percent reduction

00:45:59,119 --> 00:46:03,650
but those numbers will go back and forth

00:46:01,100 --> 00:46:06,050
and so I I mean honestly in this

00:46:03,650 --> 00:46:07,850
particular use case surprise like you

00:46:06,050 --> 00:46:11,390
shouldn't necessarily switch right it

00:46:07,850 --> 00:46:14,890
doesn't really buy you anything so for

00:46:11,390 --> 00:46:18,530
my next one I got rid of I oh I just did

00:46:14,890 --> 00:46:20,750
a memory and processor intensive

00:46:18,530 --> 00:46:23,180
operation so get password from randomly

00:46:20,750 --> 00:46:24,350
generated list okay so I have a list of

00:46:23,180 --> 00:46:27,020
passwords that I want to scroll through

00:46:24,350 --> 00:46:29,450
I'm gonna test if that password conforms

00:46:27,020 --> 00:46:31,730
to dictionary like a look of rules so

00:46:29,450 --> 00:46:33,950
upper case lower case has numeric has

00:46:31,730 --> 00:46:36,020
special characters but it also includes

00:46:33,950 --> 00:46:38,750
the dictionary check does this word

00:46:36,020 --> 00:46:42,230
contains this password contain any word

00:46:38,750 --> 00:46:46,430
in the dictionary in the dictionary that

00:46:42,230 --> 00:46:49,430
I have so for my first method the best

00:46:46,430 --> 00:46:50,869
way to do this like algorithmically or

00:46:49,430 --> 00:46:53,119
I'm sure they're better ways to do it

00:46:50,869 --> 00:46:55,130
but the best way I have found is to

00:46:53,119 --> 00:46:59,030
break up the word into all its sub all

00:46:55,130 --> 00:47:02,630
the the valid valid parts in this

00:46:59,030 --> 00:47:05,420
particular case the the minimum length

00:47:02,630 --> 00:47:06,859
of the password was four characters so I

00:47:05,420 --> 00:47:08,330
didn't have to look for words smaller

00:47:06,859 --> 00:47:09,710
than four key I'm sorry the minimum

00:47:08,330 --> 00:47:10,910
length of a dictionary word was four

00:47:09,710 --> 00:47:12,320
character so I didn't have to look for

00:47:10,910 --> 00:47:14,540
words that were shorter than four

00:47:12,320 --> 00:47:16,070
characters I break it up in all the

00:47:14,540 --> 00:47:18,140
could situate things that it could

00:47:16,070 --> 00:47:18,530
possibly be and I spin through looking

00:47:18,140 --> 00:47:19,760
through

00:47:18,530 --> 00:47:21,050
the dictionary they can do a whole bunch

00:47:19,760 --> 00:47:22,880
of things like well if it's not the same

00:47:21,050 --> 00:47:24,050
length it's not the same thing if it

00:47:22,880 --> 00:47:25,760
doesn't start with the same letter it's

00:47:24,050 --> 00:47:28,040
not the same and I can speed up that

00:47:25,760 --> 00:47:34,190
algorithm pretty quickly to the point

00:47:28,040 --> 00:47:37,280
where if we do it 10 times in PHP 141

00:47:34,190 --> 00:47:41,660
milliseconds and 10 times and go is 77

00:47:37,280 --> 00:47:46,160
milliseconds if I up the trials to a

00:47:41,660 --> 00:47:51,710
thousand I'm seeing you know 200 to 91

00:47:46,160 --> 00:47:52,700
and then if I up the trials - what is

00:47:51,710 --> 00:47:55,340
that a hundred thousand a hundred

00:47:52,700 --> 00:47:57,230
thousand PHP takes seven seconds and go

00:47:55,340 --> 00:48:00,710
could happen under a second so it's

00:47:57,230 --> 00:48:01,910
about seven times faster I had to double

00:48:00,710 --> 00:48:04,100
check this result I wanted me because it

00:48:01,910 --> 00:48:06,290
doesn't scale linearly it just doesn't

00:48:04,100 --> 00:48:08,360
go over time go was able to just

00:48:06,290 --> 00:48:11,570
outperform PHP on this particular task

00:48:08,360 --> 00:48:16,130
now that's with the optimal algorithm if

00:48:11,570 --> 00:48:18,380
for some reason I needed to just do

00:48:16,130 --> 00:48:20,720
brute force and just check every single

00:48:18,380 --> 00:48:22,370
word is in this dictionary because I

00:48:20,720 --> 00:48:24,980
don't know I don't trust the other

00:48:22,370 --> 00:48:26,440
algorithm or something then we get a

00:48:24,980 --> 00:48:31,850
different result

00:48:26,440 --> 00:48:35,330
PHP 900 milliseconds 294 for 10 when we

00:48:31,850 --> 00:48:37,490
get to a thousand PCP takes in 96

00:48:35,330 --> 00:48:41,090
seconds whereas go happens at 1.8

00:48:37,490 --> 00:48:43,910
seconds or 45 times faster so for this

00:48:41,090 --> 00:48:46,040
particular use case of doing something

00:48:43,910 --> 00:48:50,540
that's just memory and processor

00:48:46,040 --> 00:48:53,930
intensive doesn't have any i/o go can

00:48:50,540 --> 00:48:55,700
significantly out form the form of PHP

00:48:53,930 --> 00:48:57,470
now if you're not having a problem with

00:48:55,700 --> 00:49:00,170
a part of your your site with a part of

00:48:57,470 --> 00:49:02,000
your code base don't switch to go but if

00:49:00,170 --> 00:49:03,080
you have a performance problem like one

00:49:02,000 --> 00:49:05,990
part of your PHP and you haven't been

00:49:03,080 --> 00:49:08,240
able to solve it with an algorithm it

00:49:05,990 --> 00:49:10,790
might make sense in one case to drop

00:49:08,240 --> 00:49:14,270
down it just for that one operation to

00:49:10,790 --> 00:49:18,740
go write an executable and do it that

00:49:14,270 --> 00:49:22,580
way you also do obviously if PHP you can

00:49:18,740 --> 00:49:24,190
also go drop down to C I like writing go

00:49:22,580 --> 00:49:26,780
better than C this is why I bring it up

00:49:24,190 --> 00:49:29,900
alright my final test is more of a

00:49:26,780 --> 00:49:33,920
systems problem than a coding problem

00:49:29,900 --> 00:49:36,010
so I wrote an app and I'll actually I'll

00:49:33,920 --> 00:49:40,910
show off the app just because it's fun

00:49:36,010 --> 00:49:42,350
so we're doing a big event for us we're

00:49:40,910 --> 00:49:44,600
showing off a technology called

00:49:42,350 --> 00:49:46,450
kubernetes and container engine because

00:49:44,600 --> 00:49:49,070
anybody here familiar with kubernetes

00:49:46,450 --> 00:49:50,840
i'm talking about it tomorrow so if you

00:49:49,070 --> 00:49:52,130
want to know more about it ken long

00:49:50,840 --> 00:49:53,780
story short I wanted to show off what

00:49:52,130 --> 00:49:55,870
Cooper naze can do and one of the things

00:49:53,780 --> 00:49:57,920
kubernetes can do is I could run

00:49:55,870 --> 00:49:59,360
containers on it and if the containers

00:49:57,920 --> 00:50:01,160
go down it can bring them back right

00:49:59,360 --> 00:50:02,420
away so I could say always run twelve

00:50:01,160 --> 00:50:04,130
containers in kubernetes is going to

00:50:02,420 --> 00:50:05,090
keep twelve containers running so we're

00:50:04,130 --> 00:50:09,770
doing an event we wanted to show this

00:50:05,090 --> 00:50:10,970
off so I wrote a game whack a pod so

00:50:09,770 --> 00:50:13,340
what I'm gonna do here is I'm gonna fire

00:50:10,970 --> 00:50:15,470
up a kubernetes cluster and these are

00:50:13,340 --> 00:50:20,210
all my containers and I'm actually gonna

00:50:15,470 --> 00:50:23,480
go through and kill them right so I got

00:50:20,210 --> 00:50:25,160
sound - so you see kubernetes come

00:50:23,480 --> 00:50:26,960
brings them up now there are three what

00:50:25,160 --> 00:50:30,950
knocked down the service cool I got the

00:50:26,960 --> 00:50:32,240
bomb so it's kind of simple and silly

00:50:30,950 --> 00:50:34,190
there but there are three containers

00:50:32,240 --> 00:50:37,220
going on here there's UI which is served

00:50:34,190 --> 00:50:38,930
up by one container there's the color

00:50:37,220 --> 00:50:40,280
service to see the colors constantly

00:50:38,930 --> 00:50:42,560
changing that's the service that we're

00:50:40,280 --> 00:50:44,240
trying to take down and these pods are

00:50:42,560 --> 00:50:46,790
running it and then there's an admin

00:50:44,240 --> 00:50:49,820
service that takes the commands delete

00:50:46,790 --> 00:50:51,860
pods so when I want to go to kill one of

00:50:49,820 --> 00:50:53,810
these there's a admin process that's

00:50:51,860 --> 00:50:55,700
holding on to that alright

00:50:53,810 --> 00:50:58,370
so that's my app I first wrote it in PHP

00:50:55,700 --> 00:51:01,970
because I needed to get it done right so

00:50:58,370 --> 00:51:05,900
I wrote it in about a week less than a

00:51:01,970 --> 00:51:08,180
week actually actually two days as a

00:51:05,900 --> 00:51:10,760
proof of concept and it ended up kind of

00:51:08,180 --> 00:51:13,820
going forward and being a version of

00:51:10,760 --> 00:51:17,300
this not this version because I they

00:51:13,820 --> 00:51:18,830
didn't like the whimsical mole stuff so

00:51:17,300 --> 00:51:22,760
we changed it to be corporate and ugly

00:51:18,830 --> 00:51:25,520
but whatever that's another story but we

00:51:22,760 --> 00:51:29,060
we use this we use this PHP code we used

00:51:25,520 --> 00:51:30,470
it to demonstrate at our big corporate

00:51:29,060 --> 00:51:33,760
event with a hundred thousand I'm sorry

00:51:30,470 --> 00:51:36,710
with ten thousand people they're cool

00:51:33,760 --> 00:51:39,680
but I got this request can we move this

00:51:36,710 --> 00:51:41,270
to run not on your continue like I don't

00:51:39,680 --> 00:51:42,210
care how big any of the containers are

00:51:41,270 --> 00:51:43,740
because I don't

00:51:42,210 --> 00:51:44,940
pay for computing right because they've

00:51:43,740 --> 00:51:46,680
worked for Google and it's just Google

00:51:44,940 --> 00:51:48,300
pays for it but people are like hey

00:51:46,680 --> 00:51:49,470
who's great but we'd like the containers

00:51:48,300 --> 00:51:50,520
to be smaller we wanted to run this

00:51:49,470 --> 00:51:52,890
thing called mini cubes that are run on

00:51:50,520 --> 00:51:55,970
a laptop and so we need much smaller

00:51:52,890 --> 00:52:00,510
containers all right so that's the task

00:51:55,970 --> 00:52:01,560
so when I wrote it in PHP so yeah so we

00:52:00,510 --> 00:52:04,170
host on Cooper neighs but have the

00:52:01,560 --> 00:52:07,920
smallest docker containers possible so

00:52:04,170 --> 00:52:10,680
when I wrote it on peach on the first

00:52:07,920 --> 00:52:13,230
pass I did the API which is the random

00:52:10,680 --> 00:52:16,740
color dinner I did that PHP and the

00:52:13,230 --> 00:52:18,210
docker container I used which was Google

00:52:16,740 --> 00:52:22,140
App Engine PHP latest that's a version

00:52:18,210 --> 00:52:23,700
of the container of PHP that we run it's

00:52:22,140 --> 00:52:27,420
pretty lightweight not as lightweight as

00:52:23,700 --> 00:52:32,220
it possibly could be because it has PHP

00:52:27,420 --> 00:52:35,640
nginx and then the Google Cloud SDK so

00:52:32,220 --> 00:52:37,890
it ends up being 171 megabytes with the

00:52:35,640 --> 00:52:40,470
code added to it you see that over there

00:52:37,890 --> 00:52:43,770
that's not outrageously big but it's

00:52:40,470 --> 00:52:45,780
also not you know optimized the admin

00:52:43,770 --> 00:52:47,609
which is just a kubernetes is a proxy to

00:52:45,780 --> 00:52:49,440
the kubernetes api that lives on the

00:52:47,609 --> 00:52:51,359
cluster that was also written in PHP

00:52:49,440 --> 00:52:53,910
that was also the same image and that

00:52:51,359 --> 00:52:55,290
was 171 megabytes and then the game

00:52:53,910 --> 00:52:58,680
which is the UI for the app which is

00:52:55,290 --> 00:53:00,839
just HTML Javascript CSS i did with the

00:52:58,680 --> 00:53:02,580
same image and you'll see that's like 10

00:53:00,839 --> 00:53:04,740
Meg's more because there's images and

00:53:02,580 --> 00:53:08,970
stuff in it so this whole game clocked

00:53:04,740 --> 00:53:10,320
in at 523 Meg's of stuff like half a gig

00:53:08,970 --> 00:53:13,740
that I'm pushing around to various

00:53:10,320 --> 00:53:17,780
clusters and containers to use I could

00:53:13,740 --> 00:53:21,359
do this better I could do this faster so

00:53:17,780 --> 00:53:22,589
one of the tricks you find out when you

00:53:21,359 --> 00:53:25,200
start using docker and you start using

00:53:22,589 --> 00:53:28,980
corn eddie's is you can use minimal

00:53:25,200 --> 00:53:30,480
containers and the minimalists container

00:53:28,980 --> 00:53:32,640
that you can use is a real word

00:53:30,480 --> 00:53:34,140
minimalist the middle yet is but I don't

00:53:32,640 --> 00:53:36,330
I'm not I'm thinking he's in a room all

00:53:34,140 --> 00:53:37,770
right the the smallest container that

00:53:36,330 --> 00:53:39,839
you could possibly start with is

00:53:37,770 --> 00:53:41,760
something called scratch right which is

00:53:39,839 --> 00:53:44,220
nothing like there's nothing going on in

00:53:41,760 --> 00:53:46,410
it like you you try to tell me try to

00:53:44,220 --> 00:53:50,400
ask this H into it and it'll do nothing

00:53:46,410 --> 00:53:52,619
right but with go I can write an

00:53:50,400 --> 00:53:55,980
executable that contains everything I

00:53:52,619 --> 00:53:57,960
have on it and put it in and so this is

00:53:55,980 --> 00:53:59,640
common thing you do you take a go do you

00:53:57,960 --> 00:54:02,190
think yo you build an executable you

00:53:59,640 --> 00:54:04,680
host it on scratch and it just handles

00:54:02,190 --> 00:54:06,359
everything it has to handle and so you

00:54:04,680 --> 00:54:09,780
can make very very small docker

00:54:06,359 --> 00:54:12,330
containers with this how small well

00:54:09,780 --> 00:54:14,730
my API I shrunk down to two megabytes

00:54:12,330 --> 00:54:17,400
the admin I shrunk down to megabytes and

00:54:14,730 --> 00:54:18,900
then for game I didn't use Galang and

00:54:17,400 --> 00:54:21,000
scratch it was a channel JavaScript CSS

00:54:18,900 --> 00:54:22,800
so I just switched to nginx because I

00:54:21,000 --> 00:54:24,180
wanted there to be engine and wanted to

00:54:22,800 --> 00:54:27,290
use nginx and not have to write my own

00:54:24,180 --> 00:54:31,290
version so I was able to shave almost

00:54:27,290 --> 00:54:34,470
90% of the size of these around by

00:54:31,290 --> 00:54:38,100
switching to this now this wasn't

00:54:34,470 --> 00:54:41,369
prompted by a developer need this wasn't

00:54:38,100 --> 00:54:43,350
this wasn't prompted by you know go

00:54:41,369 --> 00:54:46,740
could do something PHP couldn't from a

00:54:43,350 --> 00:54:48,540
developer well sort of right building an

00:54:46,740 --> 00:54:51,660
executable out of PHP code like you

00:54:48,540 --> 00:54:55,710
can't do that at least not natively as

00:54:51,660 --> 00:54:58,650
far as I know but you can kind of you

00:54:55,710 --> 00:55:01,400
can't kind of do this with it so so does

00:54:58,650 --> 00:55:03,660
it actually matter in this case you know

00:55:01,400 --> 00:55:05,670
yes it did matter being able to shrink

00:55:03,660 --> 00:55:07,530
it down made it maybe be able to use it

00:55:05,670 --> 00:55:09,480
on much smaller installs of Cooper

00:55:07,530 --> 00:55:10,400
Nettie's and allows me to use this demo

00:55:09,480 --> 00:55:14,310
in more places

00:55:10,400 --> 00:55:17,280
so go weirdness there's some things that

00:55:14,310 --> 00:55:19,680
bug knew Gophers one there's no concept

00:55:17,280 --> 00:55:21,780
of exception you'll see that throughout

00:55:19,680 --> 00:55:26,460
the entire code base whenever I deal

00:55:21,780 --> 00:55:28,410
with an error I do this if error does

00:55:26,460 --> 00:55:30,690
not equal nil return nil and in fact

00:55:28,410 --> 00:55:32,850
this is the joke that this is a go

00:55:30,690 --> 00:55:34,230
programmers keyboard right because they

00:55:32,850 --> 00:55:38,010
need this button because they write this

00:55:34,230 --> 00:55:39,390
all the time people get frustrated about

00:55:38,010 --> 00:55:41,609
it you'll see why I don't like our

00:55:39,390 --> 00:55:42,780
handling and go right there this this

00:55:41,609 --> 00:55:44,910
will be shared so if you want to call

00:55:42,780 --> 00:55:48,690
these links you don't have to go to them

00:55:44,910 --> 00:55:50,040
now so all I can say is yeah it's

00:55:48,690 --> 00:55:51,720
frustrating when you first come to it

00:55:50,040 --> 00:55:55,220
but you get used to it and then you end

00:55:51,720 --> 00:55:58,200
up like for me who is somewhat sloppily

00:55:55,220 --> 00:56:00,920
inclined to write code having to handle

00:55:58,200 --> 00:56:04,109
all your errors right away has act

00:56:00,920 --> 00:56:05,280
personally has made me better better at

00:56:04,109 --> 00:56:09,220
programming so

00:56:05,280 --> 00:56:11,740
but you get used to it no generics some

00:56:09,220 --> 00:56:13,720
people this drives them nuts

00:56:11,740 --> 00:56:16,630
Galang doesn't have like a generic class

00:56:13,720 --> 00:56:18,760
like like you can have in Java

00:56:16,630 --> 00:56:20,350
maybe array slices and maps will work

00:56:18,760 --> 00:56:22,660
maybe an interface will work for what

00:56:20,350 --> 00:56:25,540
you need maybe using vortac functions

00:56:22,660 --> 00:56:29,710
will use and maybe go isn't for you if

00:56:25,540 --> 00:56:33,160
you really really need generics go isn't

00:56:29,710 --> 00:56:36,550
gonna be for you go path is confusing

00:56:33,160 --> 00:56:38,200
yes it is so you have this concept and

00:56:36,550 --> 00:56:39,820
go called go path all your go projects

00:56:38,200 --> 00:56:42,970
happen in a workspace in a workspace has

00:56:39,820 --> 00:56:44,920
source bin package so you take all of

00:56:42,970 --> 00:56:49,600
your code typically and put it in source

00:56:44,920 --> 00:56:51,310
so in my case I have a folder github / -

00:56:49,600 --> 00:56:54,640
your name - Brian it's like a project

00:56:51,310 --> 00:56:56,080
game and all that happens there it gets

00:56:54,640 --> 00:56:58,420
difficult like what if you want to

00:56:56,080 --> 00:56:59,880
include your go program in another like

00:56:58,420 --> 00:57:02,070
in another place on your file system

00:56:59,880 --> 00:57:06,820
then you start doing weird stuff with

00:57:02,070 --> 00:57:09,940
symbolic links and stuff and then but go

00:57:06,820 --> 00:57:12,550
is going to look for all of your all of

00:57:09,940 --> 00:57:16,060
your other code all of your binaries in

00:57:12,550 --> 00:57:18,820
this space so typically you write a go

00:57:16,060 --> 00:57:23,020
path environment variable that points to

00:57:18,820 --> 00:57:24,670
your go folder it is there's no way

00:57:23,020 --> 00:57:27,190
around this it is annoying and hard to

00:57:24,670 --> 00:57:29,260
deal with and does cause some impedance

00:57:27,190 --> 00:57:32,500
when you first move over to go its be

00:57:29,260 --> 00:57:34,360
aware of it dependency management

00:57:32,500 --> 00:57:35,350
yeah dependency management can get a

00:57:34,360 --> 00:57:37,810
little frustrating we don't have

00:57:35,350 --> 00:57:41,530
something like a poser and go just yet

00:57:37,810 --> 00:57:43,390
there is this thing called DEP which is

00:57:41,530 --> 00:57:45,730
maturing soon

00:57:43,390 --> 00:57:46,480
it should be out within the next couple

00:57:45,730 --> 00:57:48,910
of months

00:57:46,480 --> 00:57:52,060
like as I think there's it's an it's an

00:57:48,910 --> 00:57:53,410
beta now or alpha now so you can in the

00:57:52,060 --> 00:57:56,650
bleeding-edge versions ago you can get

00:57:53,410 --> 00:58:00,820
to it but right now the problem is not

00:57:56,650 --> 00:58:03,700
easily solved so some conclusions real

00:58:00,820 --> 00:58:05,320
quick I want to make it like I said very

00:58:03,700 --> 00:58:09,430
clear use go for problems where you're

00:58:05,320 --> 00:58:11,290
having pain in PHP dealing with all the

00:58:09,430 --> 00:58:13,990
things you need to handle but I get very

00:58:11,290 --> 00:58:15,430
worried when I'm the Google guy that

00:58:13,990 --> 00:58:19,000
people just sort of shrink things down

00:58:15,430 --> 00:58:20,530
and well so that Google I said you

00:58:19,000 --> 00:58:22,870
go for all the things right and stop

00:58:20,530 --> 00:58:25,360
using PHP that's not what I'm saying

00:58:22,870 --> 00:58:27,550
right there are times where go can give

00:58:25,360 --> 00:58:28,720
you really really good productivity

00:58:27,550 --> 00:58:30,700
enhancements and performance

00:58:28,720 --> 00:58:33,730
enhancements so if that's the case use

00:58:30,700 --> 00:58:35,740
it if not don't also when you go to

00:58:33,730 --> 00:58:38,260
search for stuff you're gonna want to

00:58:35,740 --> 00:58:40,660
search for golang instead of just go

00:58:38,260 --> 00:58:42,790
otherwise you'll find a lot of confusing

00:58:40,660 --> 00:58:44,520
results they solve that problem

00:58:42,790 --> 00:58:47,710
relatively early with the language they

00:58:44,520 --> 00:58:50,920
refer to it often as golang in articles

00:58:47,710 --> 00:58:53,800
and whatnot and then finally yeah it

00:58:50,920 --> 00:58:54,910
stole images thank you guys very much if

00:58:53,800 --> 00:58:56,710
you want to get in touch with me after

00:58:54,910 --> 00:58:59,080
this talk Twitter is probably the best

00:58:56,710 --> 00:59:00,520
way if you want this Prez oh it is

00:58:59,080 --> 00:59:01,930
available it'll be available through the

00:59:00,520 --> 00:59:04,450
conference but also if you want to get

00:59:01,930 --> 00:59:07,510
to it directly bitly t prayin

00:59:04,450 --> 00:59:10,780
- go for PHP well that'll say thank you

00:59:07,510 --> 00:59:11,760
guys very much and thank you

00:59:10,780 --> 00:59:22,109
[Applause]

00:59:11,760 --> 00:59:22,109

YouTube URL: https://www.youtube.com/watch?v=KWWo0vJaogI


