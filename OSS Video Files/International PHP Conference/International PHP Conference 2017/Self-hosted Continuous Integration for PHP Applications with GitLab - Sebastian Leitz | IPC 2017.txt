Title: Self-hosted Continuous Integration for PHP Applications with GitLab - Sebastian Leitz | IPC 2017
Publication date: 2019-01-23
Playlist: International PHP Conference 2017
Description: 
	Sebastian Leitz (ETES GmbH) at IPC 2017: Over the course of some years, we established a workflow for developing PHP APIs or web applications which we’d like to share with you. We’re a German company, and the business model is very focused on data security and self-hosted solution with maximum control over where the data resides and who has access to it. We try to stay away from Travis CI and the likes without cut back on features.
Using GitLab, PhpStorm, Docker, Codeception, PSR-7 middleware, Zend Framework, Doctrine, custom migration routines, messaging and more we created and refined a self-hosted setup for developing our applications.
Together, we can set up a new demo project and discover the steps necessary to travel from idea to deployment. This is only based on our best practices, so hopefully it is relatable to your daily business, tasks and perspectives. Maybe it can help you refine your own workflow or move away from cloud services. We’d also love to get feedback and discuss further optimisations with you.
Captions: 
	00:00:02,100 --> 00:00:08,460
[Music]

00:00:05,690 --> 00:00:10,860
welcome to my session on the at the

00:00:08,460 --> 00:00:13,969
international PHP conference about self

00:00:10,860 --> 00:00:16,910
hosting continuous integration for your

00:00:13,969 --> 00:00:21,920
company or hobby project or whatever

00:00:16,910 --> 00:00:24,330
with gitlab the motivation for this talk

00:00:21,920 --> 00:00:28,590
comes from some years back when I first

00:00:24,330 --> 00:00:31,260
attended this conference I don't

00:00:28,590 --> 00:00:35,760
remember the year and I really couldn't

00:00:31,260 --> 00:00:38,309
get into how to work with the PHP topics

00:00:35,760 --> 00:00:41,280
I I learned at that conference nobody

00:00:38,309 --> 00:00:44,160
told us how to set up an environment

00:00:41,280 --> 00:00:46,110
that works that actually performs tests

00:00:44,160 --> 00:00:49,050
and checks where the software works or

00:00:46,110 --> 00:00:52,410
how to deploy stuff to some obscure

00:00:49,050 --> 00:00:55,920
target where it should run so now I want

00:00:52,410 --> 00:00:57,989
to go into that topic a bit it will be

00:00:55,920 --> 00:01:00,449
rather low level like how to install

00:00:57,989 --> 00:01:04,409
stuff and how to what to combine

00:01:00,449 --> 00:01:06,229
combined to to get an A+ result but

00:01:04,409 --> 00:01:08,369
still I would like to check who uses

00:01:06,229 --> 00:01:13,470
continuous integration in any form

00:01:08,369 --> 00:01:15,390
during development okay that's half I

00:01:13,470 --> 00:01:19,159
would have expected more but so that's

00:01:15,390 --> 00:01:22,350
good to have an audience for this part

00:01:19,159 --> 00:01:30,869
next question would be who uses git lap

00:01:22,350 --> 00:01:33,799
already oh that's fine yeah then another

00:01:30,869 --> 00:01:36,630
motivation is my company specializes in

00:01:33,799 --> 00:01:39,900
using open source software much as

00:01:36,630 --> 00:01:43,380
possible and staying away from American

00:01:39,900 --> 00:01:47,549
cloud service providers for German data

00:01:43,380 --> 00:01:51,450
security regulations and pure belief or

00:01:47,549 --> 00:01:54,619
whatever so that is the the metaphor the

00:01:51,450 --> 00:01:57,960
self hosted part in this presentation

00:01:54,619 --> 00:01:59,640
what I would like to cover today is what

00:01:57,960 --> 00:02:01,560
you have to do before you actually get

00:01:59,640 --> 00:02:07,770
started with the project

00:02:01,560 --> 00:02:10,649
installing gate lab for for starts how

00:02:07,770 --> 00:02:13,870
to get tests running and how to perform

00:02:10,649 --> 00:02:16,930
them them in get continuous integrations

00:02:13,870 --> 00:02:22,180
how to get your application to a target

00:02:16,930 --> 00:02:24,220
location and some aspects of how to

00:02:22,180 --> 00:02:27,849
perform database migrations in large

00:02:24,220 --> 00:02:30,549
applications and we have not finished

00:02:27,849 --> 00:02:34,000
refining our process so there will be a

00:02:30,549 --> 00:02:35,650
small chapter on how to get that better

00:02:34,000 --> 00:02:38,560
in the next years and I would also like

00:02:35,650 --> 00:02:41,290
to welcome your input input on that what

00:02:38,560 --> 00:02:45,730
you have already done or what you would

00:02:41,290 --> 00:02:47,620
like to see so when you get started with

00:02:45,730 --> 00:02:51,060
the fresh company or with a fresh

00:02:47,620 --> 00:02:55,359
concept you need to structure it a bit

00:02:51,060 --> 00:02:57,040
beforehand so it mainly depends on what

00:02:55,359 --> 00:02:58,870
kind of architecture you're building you

00:02:57,040 --> 00:03:01,840
might want to structure your source code

00:02:58,870 --> 00:03:04,209
into some directories or how to group

00:03:01,840 --> 00:03:07,420
project what libraries to move aside

00:03:04,209 --> 00:03:11,459
into a separate project this is very

00:03:07,420 --> 00:03:13,569
specific and cannot be generalized I

00:03:11,459 --> 00:03:17,620
assume you want to use version control

00:03:13,569 --> 00:03:21,639
so probably get is anybody using SVN

00:03:17,620 --> 00:03:26,560
mercurial CVS ok but still I guess the

00:03:21,639 --> 00:03:28,269
majority is using it you should think

00:03:26,560 --> 00:03:31,299
about what where to put some

00:03:28,269 --> 00:03:32,709
documentation user guides stuff you've

00:03:31,299 --> 00:03:38,069
write down for other developers that

00:03:32,709 --> 00:03:40,959
will later join your team such things

00:03:38,069 --> 00:03:43,199
how deep do you want to go into testing

00:03:40,959 --> 00:03:47,230
is the best and Backman here I hope not

00:03:43,199 --> 00:03:51,069
ok so let's assume you will want to have

00:03:47,230 --> 00:03:52,690
a basic level of testing and you might

00:03:51,069 --> 00:03:55,019
want to define some responsibilities

00:03:52,690 --> 00:03:57,819
perhaps there's a database team or

00:03:55,019 --> 00:04:00,849
middleware team or whatever but still

00:03:57,819 --> 00:04:03,400
that is something to think beforehand if

00:04:00,849 --> 00:04:05,169
you are structured if not if you're

00:04:03,400 --> 00:04:06,549
agile that perhaps you're not doing

00:04:05,169 --> 00:04:12,220
anything of that before and that still

00:04:06,549 --> 00:04:14,349
it works regarding get work flows we

00:04:12,220 --> 00:04:20,019
discovered there are quite some things

00:04:14,349 --> 00:04:23,440
to think of beforehand I have linked or

00:04:20,019 --> 00:04:25,630
put some URLs there to think about it it

00:04:23,440 --> 00:04:27,060
mainly is clear that you have a master

00:04:25,630 --> 00:04:30,360
branch and get somehow

00:04:27,060 --> 00:04:34,020
but how to work with other branches can

00:04:30,360 --> 00:04:38,550
be a religious thing some companies

00:04:34,020 --> 00:04:42,570
might prefer this or that who uses does

00:04:38,550 --> 00:04:46,820
anybody know get flow or get lap flow or

00:04:42,570 --> 00:04:51,810
github flow no okay

00:04:46,820 --> 00:04:54,419
so it mainly is how many branches do you

00:04:51,810 --> 00:04:56,820
want to have in your project and who is

00:04:54,419 --> 00:04:59,460
responsible for merging which branches

00:04:56,820 --> 00:05:01,560
in which directions I can really

00:04:59,460 --> 00:05:03,500
recommend to read all three parts or a

00:05:01,560 --> 00:05:06,180
comparison you might find by a google

00:05:03,500 --> 00:05:10,790
who has a custom flow in his

00:05:06,180 --> 00:05:13,260
organization three four or five okay

00:05:10,790 --> 00:05:15,030
that's also interesting probably you

00:05:13,260 --> 00:05:18,180
might have to write that down then as

00:05:15,030 --> 00:05:20,010
well so I put that here it's one of the

00:05:18,180 --> 00:05:23,760
things that most of our new developers

00:05:20,010 --> 00:05:25,550
might start asking about like why what

00:05:23,760 --> 00:05:28,830
is that branch and why is it there and

00:05:25,550 --> 00:05:30,690
where can i push now and why can't I

00:05:28,830 --> 00:05:34,250
push there and so on so please write it

00:05:30,690 --> 00:05:37,350
down in some kind of developer guide and

00:05:34,250 --> 00:05:39,030
before you if you want to work with the

00:05:37,350 --> 00:05:41,220
branches you usually have some kind of

00:05:39,030 --> 00:05:44,520
associated environments like there might

00:05:41,220 --> 00:05:48,380
be a production branch that corresponds

00:05:44,520 --> 00:05:50,910
with a production environment perhaps so

00:05:48,380 --> 00:05:53,550
usually you need to set up those target

00:05:50,910 --> 00:05:56,580
environments somehow have a hosting

00:05:53,550 --> 00:06:00,330
environment or a cloud provider or

00:05:56,580 --> 00:06:02,669
container farm or whatever so this is

00:06:00,330 --> 00:06:05,000
not scope of this this talk but you need

00:06:02,669 --> 00:06:10,260
to do that beforehand

00:06:05,000 --> 00:06:13,050
now git lab which we choose for version

00:06:10,260 --> 00:06:18,200
control and all kinds of other things is

00:06:13,050 --> 00:06:21,270
just one provider for git repositories

00:06:18,200 --> 00:06:24,360
it's quite like it hop but not quite

00:06:21,270 --> 00:06:28,800
like it half as well because you can

00:06:24,360 --> 00:06:30,990
host it on your own server for no cost

00:06:28,800 --> 00:06:33,360
at all inspect is right from

00:06:30,990 --> 00:06:35,690
infrastructure github offers you the

00:06:33,360 --> 00:06:37,890
possibility to create a report

00:06:35,690 --> 00:06:40,740
repositories for your organization

00:06:37,890 --> 00:06:42,770
online we have paid plans

00:06:40,740 --> 00:06:45,479
you're free stuff open-source software

00:06:42,770 --> 00:06:47,190
and get lab is basically the same thing

00:06:45,479 --> 00:06:54,479
on your own server with some additional

00:06:47,190 --> 00:06:55,949
features to set it up you can either

00:06:54,479 --> 00:06:58,410
choose the easy way there's also a

00:06:55,949 --> 00:07:01,199
hosted version with paid plans and all

00:06:58,410 --> 00:07:03,870
the stuff but that is not the talk is

00:07:01,199 --> 00:07:06,330
about self hosting things so I guess we

00:07:03,870 --> 00:07:09,330
won't choose that and then it's really

00:07:06,330 --> 00:07:11,819
easy they have a bundled setup that

00:07:09,330 --> 00:07:13,409
includes everything you'd only have to

00:07:11,819 --> 00:07:16,380
have a virtual machine where to run it

00:07:13,409 --> 00:07:20,699
feed of your own local cluster or in

00:07:16,380 --> 00:07:22,409
some cloud you can create the report you

00:07:20,699 --> 00:07:24,090
can you can integrate the repository

00:07:22,409 --> 00:07:27,720
they provide and just install the

00:07:24,090 --> 00:07:29,729
package and then it's running my system

00:07:27,720 --> 00:07:32,099
administration guys always hate me for

00:07:29,729 --> 00:07:34,919
that because it bundles its own database

00:07:32,099 --> 00:07:38,130
its own radiused cash its own everything

00:07:34,919 --> 00:07:40,430
and they rather like to have the

00:07:38,130 --> 00:07:43,590
packages the operating system provides

00:07:40,430 --> 00:07:46,590
but yeah I hope you have the free

00:07:43,590 --> 00:07:51,780
freedom in your company to just install

00:07:46,590 --> 00:07:53,969
it anyway if you first install it you

00:07:51,780 --> 00:07:56,930
might want to configure some nice things

00:07:53,969 --> 00:07:59,669
like LDAP integration into your local

00:07:56,930 --> 00:08:03,690
directory service so you have all your

00:07:59,669 --> 00:08:05,520
developers in there beforehand I would

00:08:03,690 --> 00:08:07,740
really recommend that you might want to

00:08:05,520 --> 00:08:11,210
put your logo in there to distinguish it

00:08:07,740 --> 00:08:15,409
from other customers kits or whatever

00:08:11,210 --> 00:08:15,409
and then you have it there

00:08:15,449 --> 00:08:22,740
Devere gitlab has a very active

00:08:19,610 --> 00:08:24,780
maintenance or or development cycle they

00:08:22,740 --> 00:08:27,780
really releases a whole new release

00:08:24,780 --> 00:08:30,960
every second 22nd of a month so you at

00:08:27,780 --> 00:08:34,409
least have 12 major upgrade events in a

00:08:30,960 --> 00:08:36,870
year planned but they make it

00:08:34,409 --> 00:08:40,020
hassle-free you just do a young update

00:08:36,870 --> 00:08:44,339
or apt-get upgrade or how do you call it

00:08:40,020 --> 00:08:49,140
in that distribution there's one central

00:08:44,339 --> 00:08:51,630
configuration file this gitlab RB thing

00:08:49,140 --> 00:08:54,089
here if you change anything in there it

00:08:51,630 --> 00:08:55,740
will apply those configuration

00:08:54,089 --> 00:08:59,040
changes to all the distributed services

00:08:55,740 --> 00:09:01,199
the gitlab bundles and the reconfigure

00:08:59,040 --> 00:09:06,509
and restart will make them active in

00:09:01,199 --> 00:09:10,680
your get live instance so okay that was

00:09:06,509 --> 00:09:12,959
a very technical now this is get lap it

00:09:10,680 --> 00:09:17,100
works in your browser so it's very

00:09:12,959 --> 00:09:20,189
modern you have a list of projects that

00:09:17,100 --> 00:09:22,889
you might be associated with some tool

00:09:20,189 --> 00:09:25,019
bar icons like how much work do you have

00:09:22,889 --> 00:09:28,129
to do if it's counting higher and higher

00:09:25,019 --> 00:09:31,949
you might start to look at your backlog

00:09:28,129 --> 00:09:34,259
and basically everybody you have in your

00:09:31,949 --> 00:09:37,379
get Lab instance can just start a

00:09:34,259 --> 00:09:40,030
project might be something you have in

00:09:37,379 --> 00:09:42,319
your free time

00:09:40,030 --> 00:09:45,209
[Music]

00:09:42,319 --> 00:09:47,999
time in your your employer leaves you or

00:09:45,209 --> 00:09:51,269
you have some work project you might

00:09:47,999 --> 00:09:53,540
create a group for associated projects

00:09:51,269 --> 00:09:58,290
for a customer for some kind of new

00:09:53,540 --> 00:10:01,819
business idea you start and groups can

00:09:58,290 --> 00:10:05,309
contain many projects a project is a

00:10:01,819 --> 00:10:08,100
repository and much more like one group

00:10:05,309 --> 00:10:10,670
one project contains one repository for

00:10:08,100 --> 00:10:14,129
software but also an initiative tracker

00:10:10,670 --> 00:10:16,769
only especially for this project Viki

00:10:14,129 --> 00:10:19,399
you could use a place where you can

00:10:16,769 --> 00:10:22,529
store arbitrary code code snippets you

00:10:19,399 --> 00:10:26,910
can have merge requests and discussions

00:10:22,529 --> 00:10:31,490
within that project and it always always

00:10:26,910 --> 00:10:33,689
has a custom CI and continues to develop

00:10:31,490 --> 00:10:37,050
deployment pipeline with for each

00:10:33,689 --> 00:10:40,230
project integrated so this is what a new

00:10:37,050 --> 00:10:44,819
project looks like you have a sidebar

00:10:40,230 --> 00:10:47,519
with all kinds of menu items and this is

00:10:44,819 --> 00:10:49,350
where you would find the code but there

00:10:47,519 --> 00:10:52,889
is no code because I just created an

00:10:49,350 --> 00:10:56,459
blank empty project let's fast forward a

00:10:52,889 --> 00:10:57,899
bit I filled that project a bit with

00:10:56,459 --> 00:11:00,689
code because I want to spare you the

00:10:57,899 --> 00:11:02,850
development my team and I recreated a

00:11:00,689 --> 00:11:06,149
really cool application it outputs hello

00:11:02,850 --> 00:11:07,620
world you can't find the repository on

00:11:06,149 --> 00:11:11,460
that URI but

00:11:07,620 --> 00:11:14,040
have not pushed all the things which are

00:11:11,460 --> 00:11:16,500
to come yet in this presentation about

00:11:14,040 --> 00:11:18,180
continuous deployment and so on but

00:11:16,500 --> 00:11:20,120
still it works it has a hello world

00:11:18,180 --> 00:11:23,940
example and it has some tests in there

00:11:20,120 --> 00:11:26,250
um I will fill it fill in that after the

00:11:23,940 --> 00:11:30,000
talk so you might go there for reference

00:11:26,250 --> 00:11:35,339
purposes later on let's start with

00:11:30,000 --> 00:11:37,800
testing that application who of you uses

00:11:35,339 --> 00:11:43,500
fire I already asked who tested a bit

00:11:37,800 --> 00:11:49,370
but who uses code ception okay the all

00:11:43,500 --> 00:11:51,779
the rest uses plain old PHP unit okay so

00:11:49,370 --> 00:11:55,110
to introduce you to conception that's

00:11:51,779 --> 00:11:57,480
just a wrapper framework around PHP unit

00:11:55,110 --> 00:12:00,589
which I will just use for a small test

00:11:57,480 --> 00:12:03,960
here we installed it with composure and

00:12:00,589 --> 00:12:05,850
generate the acceptance test so that's

00:12:03,960 --> 00:12:08,700
something that actually tries out your

00:12:05,850 --> 00:12:11,220
application and see whether it works it

00:12:08,700 --> 00:12:13,890
could be testing a login procedure or

00:12:11,220 --> 00:12:15,600
checking whether requesting a new

00:12:13,890 --> 00:12:18,089
password actually sends you an email

00:12:15,600 --> 00:12:21,540
which you can't really do with the unit

00:12:18,089 --> 00:12:24,810
test but it also can integrate plan unit

00:12:21,540 --> 00:12:29,510
tests where you have assert equals and

00:12:24,810 --> 00:12:34,050
all the other stuff this is our small

00:12:29,510 --> 00:12:36,089
acceptance test so it checks where I

00:12:34,050 --> 00:12:38,700
where the it starts the application

00:12:36,089 --> 00:12:40,650
checks where it is and whether it can

00:12:38,700 --> 00:12:42,959
see the text string hello world

00:12:40,650 --> 00:12:44,790
somewhere on this page if you start up

00:12:42,959 --> 00:12:46,140
the repository and and run the command

00:12:44,790 --> 00:12:49,050
line

00:12:46,140 --> 00:12:52,110
CLI server of PHP you will see the hello

00:12:49,050 --> 00:12:56,640
world and if I ran that in my PHP storm

00:12:52,110 --> 00:12:58,680
it will pass so great we have a test and

00:12:56,640 --> 00:13:01,470
it really has good coverage like there's

00:12:58,680 --> 00:13:04,650
nothing else in this application that's

00:13:01,470 --> 00:13:06,240
a good starting point what we want to do

00:13:04,650 --> 00:13:10,560
with continuous integration now is that

00:13:06,240 --> 00:13:13,260
we want to check our application does

00:13:10,560 --> 00:13:14,910
not break at a later point somebody one

00:13:13,260 --> 00:13:17,339
might want to add something to the home

00:13:14,910 --> 00:13:20,700
page and accidentally to throw out our

00:13:17,339 --> 00:13:23,220
really important headline hello world

00:13:20,700 --> 00:13:27,120
which would be bad for our customers so

00:13:23,220 --> 00:13:30,750
we try to establish an automated

00:13:27,120 --> 00:13:34,170
function that always performs tests when

00:13:30,750 --> 00:13:36,600
users do changes and this is what you

00:13:34,170 --> 00:13:39,180
usually call continuous integration it

00:13:36,600 --> 00:13:41,070
is in this case integrated into gitlab

00:13:39,180 --> 00:13:44,460
but there are also other software

00:13:41,070 --> 00:13:48,270
components like Jenkins or Travis or

00:13:44,460 --> 00:13:56,070
what else is there would have missed big

00:13:48,270 --> 00:13:59,130
ones is that okay so get lab make sure

00:13:56,070 --> 00:14:01,410
those tests we have set up are performed

00:13:59,130 --> 00:14:05,630
every time somebody pushes something to

00:14:01,410 --> 00:14:07,890
our repository it does that by

00:14:05,630 --> 00:14:10,110
distributing the work that actually has

00:14:07,890 --> 00:14:15,360
to be done to some kind of runners which

00:14:10,110 --> 00:14:18,090
perform the tests you can define which

00:14:15,360 --> 00:14:20,550
kind of tests around per project so it's

00:14:18,090 --> 00:14:22,830
a bit different from like Jenkins where

00:14:20,550 --> 00:14:25,050
you have a separate software if you want

00:14:22,830 --> 00:14:27,090
tests for a project that it's in your

00:14:25,050 --> 00:14:30,840
version control system you have to setup

00:14:27,090 --> 00:14:33,000
Jenkins and tell it where the repository

00:14:30,840 --> 00:14:36,000
is and listen for hook events or

00:14:33,000 --> 00:14:38,700
whatever is used there and perform

00:14:36,000 --> 00:14:41,610
something then get lab integrates this

00:14:38,700 --> 00:14:44,430
directly into the project so as a

00:14:41,610 --> 00:14:46,350
project owner I can just set up my CI

00:14:44,430 --> 00:14:52,650
independently from everything else in

00:14:46,350 --> 00:14:54,390
the company this works with a

00:14:52,650 --> 00:14:57,300
configuration file that I can just

00:14:54,390 --> 00:15:01,970
include in my repository it's called

00:14:57,300 --> 00:15:05,460
cold dot git lab - CI dot yml llaman

00:15:01,970 --> 00:15:08,490
whatever which also explains this weird

00:15:05,460 --> 00:15:10,970
syntax where indentions and dashes are

00:15:08,490 --> 00:15:12,980
really important and if you mix them

00:15:10,970 --> 00:15:19,050
strange things can happen

00:15:12,980 --> 00:15:21,980
not my idea this is a basic example for

00:15:19,050 --> 00:15:25,680
setup of CI in our hello world example

00:15:21,980 --> 00:15:28,540
and I want to go into the different

00:15:25,680 --> 00:15:30,820
parts of it this is

00:15:28,540 --> 00:15:34,900
to specify a docker image this was run

00:15:30,820 --> 00:15:38,280
with who does use docker well that's

00:15:34,900 --> 00:15:38,280
much more than two years ago

00:15:38,640 --> 00:15:43,680
the advantage of using docker here is

00:15:41,410 --> 00:15:45,970
that we have a self-contained

00:15:43,680 --> 00:15:49,210
environment that our tests can perform

00:15:45,970 --> 00:15:51,400
in and nobody gets hurt except docker

00:15:49,210 --> 00:15:54,490
has some security issues but that

00:15:51,400 --> 00:15:55,540
certainly happens so good lab uses

00:15:54,490 --> 00:15:59,350
talker

00:15:55,540 --> 00:16:02,020
it tells all this distributed runners to

00:15:59,350 --> 00:16:04,530
use a specific docker image for all

00:16:02,020 --> 00:16:07,630
kinds of different for our purposes and

00:16:04,530 --> 00:16:09,760
the tests we later set up in this file

00:16:07,630 --> 00:16:11,500
are performed within the docker

00:16:09,760 --> 00:16:14,740
container that is running specifically

00:16:11,500 --> 00:16:19,360
for this event but where does the docker

00:16:14,740 --> 00:16:20,830
container camp from which I did not show

00:16:19,360 --> 00:16:24,040
here is you have to install some

00:16:20,830 --> 00:16:26,140
components to run containers as we are

00:16:24,040 --> 00:16:28,750
trying to establish a self host to the

00:16:26,140 --> 00:16:30,330
environment it makes sense to also self

00:16:28,750 --> 00:16:33,220
host those CI

00:16:30,330 --> 00:16:35,890
containers and in our company we just

00:16:33,220 --> 00:16:37,750
made it a requirement that everybody who

00:16:35,890 --> 00:16:40,570
has a computer in the company which is

00:16:37,750 --> 00:16:43,720
basically everybody should install a

00:16:40,570 --> 00:16:47,110
docker engine and the CI runner of

00:16:43,720 --> 00:16:48,670
gitlab which is two lines like yum

00:16:47,110 --> 00:16:53,260
install docker and yum install git live

00:16:48,670 --> 00:16:55,060
CI Runner and you have to just set up a

00:16:53,260 --> 00:16:57,370
communication channel between those two

00:16:55,060 --> 00:17:00,250
so the clients as soon as they're

00:16:57,370 --> 00:17:01,570
running contact get lab and ask for new

00:17:00,250 --> 00:17:03,820
jobs Here I am

00:17:01,570 --> 00:17:05,710
give me something if there's nothing

00:17:03,820 --> 00:17:08,020
nothing happens but as soon as there is

00:17:05,710 --> 00:17:12,550
a build task one of the clients in our

00:17:08,020 --> 00:17:15,400
pool start to perform some work this is

00:17:12,550 --> 00:17:18,490
really low cost because we have a lot of

00:17:15,400 --> 00:17:20,860
unused CPU lying around in the company

00:17:18,490 --> 00:17:22,390
usually and you don't need any kind of

00:17:20,860 --> 00:17:24,370
cloud infrastructure for that it just

00:17:22,390 --> 00:17:26,050
works in the local network it even works

00:17:24,370 --> 00:17:29,080
if people are working from remote places

00:17:26,050 --> 00:17:33,850
like VPN because the communication is

00:17:29,080 --> 00:17:35,440
based on the client side so the client

00:17:33,850 --> 00:17:38,590
has a doctor named doctor environment

00:17:35,440 --> 00:17:41,649
and it has a connection to get lab so it

00:17:38,590 --> 00:17:43,960
can freely use any kind of docker images

00:17:41,649 --> 00:17:47,830
who has already built custom docker

00:17:43,960 --> 00:17:53,039
images okay that's less than using

00:17:47,830 --> 00:17:55,929
docker so docker principally defines

00:17:53,039 --> 00:17:58,409
docker files which are kind of

00:17:55,929 --> 00:18:02,470
descriptions what is in the container

00:17:58,409 --> 00:18:05,830
there are a lot of things on hop comm

00:18:02,470 --> 00:18:08,139
which is a repository for templates that

00:18:05,830 --> 00:18:11,740
anybody else can create there is a

00:18:08,139 --> 00:18:16,269
docker template for like a Debian

00:18:11,740 --> 00:18:18,129
installation or for they might even be

00:18:16,269 --> 00:18:22,629
one for gitlab if you host it in a

00:18:18,129 --> 00:18:24,879
docker container we try to set up our

00:18:22,629 --> 00:18:27,249
own docker container here that's why

00:18:24,879 --> 00:18:29,950
there's a template line up here which

00:18:27,249 --> 00:18:33,100
one to use so that's our prefix and we

00:18:29,950 --> 00:18:36,429
created a PHP 7-1 template which is

00:18:33,100 --> 00:18:40,779
basically a blank Linux with some

00:18:36,429 --> 00:18:42,909
install commands for PHP binary this

00:18:40,779 --> 00:18:46,419
docker image that we then upload it to

00:18:42,909 --> 00:18:49,619
our docker hub account and get lab will

00:18:46,419 --> 00:18:52,179
download that anytime it is requested

00:18:49,619 --> 00:18:56,320
it can also be cached so it's not really

00:18:52,179 --> 00:18:58,149
that much of a burden this makes sure we

00:18:56,320 --> 00:19:01,119
have a built environment that we can

00:18:58,149 --> 00:19:03,009
define beforehand so we know in this

00:19:01,119 --> 00:19:05,649
container there's a peach p71 of a

00:19:03,009 --> 00:19:07,450
defined version which we installed there

00:19:05,649 --> 00:19:11,470
might also be some libraries like soap

00:19:07,450 --> 00:19:15,429
or psql or whatever you might want to

00:19:11,470 --> 00:19:18,190
use in that and if we were write it here

00:19:15,429 --> 00:19:20,169
get lab we'll make sure this is used if

00:19:18,190 --> 00:19:24,159
you write nothing in there I think a

00:19:20,169 --> 00:19:27,879
plain linux image is used so no PHP

00:19:24,159 --> 00:19:31,440
there now there is a next part of the

00:19:27,879 --> 00:19:34,840
file that is called a job description

00:19:31,440 --> 00:19:37,119
this file can contain any kind and any

00:19:34,840 --> 00:19:39,279
number of job descriptions and multiple

00:19:37,119 --> 00:19:42,700
jobs form a pipeline in continuous

00:19:39,279 --> 00:19:45,340
integration so this pipeline is really

00:19:42,700 --> 00:19:48,310
quite small it only has one drop which I

00:19:45,340 --> 00:19:51,940
called acceptance test

00:19:48,310 --> 00:19:53,770
the acceptance tests performs three

00:19:51,940 --> 00:19:56,500
steps basically it does something

00:19:53,770 --> 00:19:58,660
beforehand then it does some main stuff

00:19:56,500 --> 00:20:00,730
and in the end it collects some files

00:19:58,660 --> 00:20:04,210
that are lying around after performing

00:20:00,730 --> 00:20:06,670
the job in this case for our acceptance

00:20:04,210 --> 00:20:09,370
test we need somebody to run our

00:20:06,670 --> 00:20:12,370
composer because we don't have any kind

00:20:09,370 --> 00:20:14,380
of conception available or other

00:20:12,370 --> 00:20:16,330
dependencies that might be here used to

00:20:14,380 --> 00:20:19,990
print out hello world like a template

00:20:16,330 --> 00:20:22,060
engine or whatever the actual script

00:20:19,990 --> 00:20:24,040
part is that what you would also run in

00:20:22,060 --> 00:20:28,870
your local command line if you want to

00:20:24,040 --> 00:20:30,610
execute the tests in your IDE it

00:20:28,870 --> 00:20:33,240
probably is a button but you still could

00:20:30,610 --> 00:20:36,960
use a command line so it starts the the

00:20:33,240 --> 00:20:40,510
web server in the background and then

00:20:36,960 --> 00:20:45,220
runs the code ception oh that was the

00:20:40,510 --> 00:20:48,220
wrong button code ception tests which is

00:20:45,220 --> 00:20:51,420
equivalent to the green output we had

00:20:48,220 --> 00:20:53,710
beforehand if everything goes well and

00:20:51,420 --> 00:20:57,220
artifacts are something that I want to

00:20:53,710 --> 00:20:59,650
collect after the build runs normally

00:20:57,220 --> 00:21:01,660
you have a test and tests have output

00:20:59,650 --> 00:21:05,260
like they produce a log file that

00:21:01,660 --> 00:21:08,140
everything is okay or more important if

00:21:05,260 --> 00:21:10,690
nothing works out quite right they have

00:21:08,140 --> 00:21:13,660
a log file what went wrong and in this

00:21:10,690 --> 00:21:16,030
case I can say collect this path here

00:21:13,660 --> 00:21:18,730
upload it to a central gate lab a

00:21:16,030 --> 00:21:21,040
storage path and keep it there for 15

00:21:18,730 --> 00:21:24,370
minutes so some developer might get some

00:21:21,040 --> 00:21:27,430
insight from it this is what it looks

00:21:24,370 --> 00:21:30,910
like if it is performed if I push this

00:21:27,430 --> 00:21:37,780
repository with the file a pipeline is

00:21:30,910 --> 00:21:40,330
created by me and it's running as soon

00:21:37,780 --> 00:21:42,240
as something some runners free in this

00:21:40,330 --> 00:21:45,640
case it really happened

00:21:42,240 --> 00:21:47,560
with no delay but if you have a high

00:21:45,640 --> 00:21:48,820
volume company and all your runners are

00:21:47,560 --> 00:21:52,270
busy it might take some time until

00:21:48,820 --> 00:21:55,420
somebody picks up the job inside this

00:21:52,270 --> 00:21:58,100
pipeline we have a

00:21:55,420 --> 00:22:01,100
number of jobs in this case only one and

00:21:58,100 --> 00:22:04,190
this is also pending it's waiting to

00:22:01,100 --> 00:22:06,140
complete if you look into that you get a

00:22:04,190 --> 00:22:07,820
life output of the things that are

00:22:06,140 --> 00:22:12,110
happening in that docker container

00:22:07,820 --> 00:22:14,390
it's streamed by an HTTP API with some

00:22:12,110 --> 00:22:17,410
minimal delay and you can watch what

00:22:14,390 --> 00:22:21,710
happens like for example it's running on

00:22:17,410 --> 00:22:23,620
the computer of my colleague muscle it's

00:22:21,710 --> 00:22:25,820
running with our image

00:22:23,620 --> 00:22:31,370
somebody has pulled the image from the

00:22:25,820 --> 00:22:35,240
registry checked out our project from

00:22:31,370 --> 00:22:37,040
get some more we're here and now it's

00:22:35,240 --> 00:22:40,880
running all the steps i defined in the

00:22:37,040 --> 00:22:43,220
configuration file until in the end it

00:22:40,880 --> 00:22:44,990
looks good and has a check mark if it

00:22:43,220 --> 00:22:47,960
doesn't you'll get an email there's also

00:22:44,990 --> 00:22:49,430
a browser plugin and all other kinds of

00:22:47,960 --> 00:22:53,990
means to inform the developer that

00:22:49,430 --> 00:23:00,980
something went wrong okay any questions

00:22:53,990 --> 00:23:03,080
to that point okay now this is a really

00:23:00,980 --> 00:23:04,090
trivial test nobody wants to test hello

00:23:03,080 --> 00:23:07,070
world anymore

00:23:04,090 --> 00:23:08,330
so here are some suggestions what you

00:23:07,070 --> 00:23:12,640
could do in your continuous integration

00:23:08,330 --> 00:23:14,960
workflow it depends on what you're

00:23:12,640 --> 00:23:16,880
working at but you might want to

00:23:14,960 --> 00:23:18,440
consider having either unit tests or

00:23:16,880 --> 00:23:20,990
functional tests or even acceptance

00:23:18,440 --> 00:23:23,120
tests all three the three of them and

00:23:20,990 --> 00:23:26,540
all the other stuff that academic

00:23:23,120 --> 00:23:28,760
research provides us with you might want

00:23:26,540 --> 00:23:30,200
to if you're having a web application

00:23:28,760 --> 00:23:33,200
you might want to perform cross browser

00:23:30,200 --> 00:23:36,560
browser tests with different real

00:23:33,200 --> 00:23:39,170
browsers for example you might want to

00:23:36,560 --> 00:23:42,260
get some metrics from your tests like

00:23:39,170 --> 00:23:46,270
how much coverage do we have or other

00:23:42,260 --> 00:23:48,440
static another this stuff you can do

00:23:46,270 --> 00:23:50,780
yesterday we had a great talk from

00:23:48,440 --> 00:23:52,760
somebody about code smells and how to

00:23:50,780 --> 00:23:54,560
fix them but I think you could also of

00:23:52,760 --> 00:23:58,610
course analyze code smells very deeply

00:23:54,560 --> 00:24:00,890
in here and I also recommend to have

00:23:58,610 --> 00:24:02,510
some really trivial things like even

00:24:00,890 --> 00:24:05,090
though there are some really good

00:24:02,510 --> 00:24:07,910
debuggers for PHP people tend to use var

00:24:05,090 --> 00:24:08,900
them a lot so if somebody commits of our

00:24:07,910 --> 00:24:10,490
time you might want to

00:24:08,900 --> 00:24:13,100
check whether there is one and then

00:24:10,490 --> 00:24:15,560
break the chain and not have that commit

00:24:13,100 --> 00:24:19,880
Amit admitted to any kind of production

00:24:15,560 --> 00:24:23,060
release some people are do really like

00:24:19,880 --> 00:24:24,740
code style other people don't care but

00:24:23,060 --> 00:24:27,620
if you're one of the guys who needs the

00:24:24,740 --> 00:24:29,540
bracket in the other line please then

00:24:27,620 --> 00:24:32,710
you might also integrate it change a

00:24:29,540 --> 00:24:36,020
check here on PSR to conformity or

00:24:32,710 --> 00:24:40,460
send or Symphony standard or whatever

00:24:36,020 --> 00:24:42,920
you are using and if you establish this

00:24:40,460 --> 00:24:46,270
I won't go into how the how long the

00:24:42,920 --> 00:24:49,490
file looks now it looks about like this

00:24:46,270 --> 00:24:52,940
you suddenly have in this case four

00:24:49,490 --> 00:24:54,200
drops running in one pipeline in this

00:24:52,940 --> 00:24:56,690
case you can see they have a different

00:24:54,200 --> 00:24:58,970
status two of them are still waiting for

00:24:56,690 --> 00:25:02,300
some runners to be free my colleagues of

00:24:58,970 --> 00:25:05,690
obviously are busy using all our other

00:25:02,300 --> 00:25:08,810
containers to our are already running

00:25:05,690 --> 00:25:11,630
and if we wait some more time all of

00:25:08,810 --> 00:25:14,300
them are finished and we can also get

00:25:11,630 --> 00:25:15,650
some coverage information now or get the

00:25:14,300 --> 00:25:18,740
information that they build the pipeline

00:25:15,650 --> 00:25:22,160
has passed at all to have a cool badge

00:25:18,740 --> 00:25:25,610
at our repository or whatever you can

00:25:22,160 --> 00:25:28,280
also put the information into a slack or

00:25:25,610 --> 00:25:30,950
matter most chat or whatever so that it

00:25:28,280 --> 00:25:37,130
can be a bit of proud what your team

00:25:30,950 --> 00:25:39,170
performed like okay there is a gate

00:25:37,130 --> 00:25:42,140
lepsy i example for this kind of setup

00:25:39,170 --> 00:25:43,450
in the repository so you can have a look

00:25:42,140 --> 00:25:47,360
at that later

00:25:43,450 --> 00:25:49,490
now continuous integration is also about

00:25:47,360 --> 00:25:51,590
other parts not only performing tests

00:25:49,490 --> 00:25:53,690
but you might want to have real

00:25:51,590 --> 00:25:56,120
integration tasks like you have your

00:25:53,690 --> 00:25:58,100
repository which contains code you have

00:25:56,120 --> 00:26:00,740
a lot of dependencies you have your own

00:25:58,100 --> 00:26:02,390
libraries that you need to somehow link

00:26:00,740 --> 00:26:04,550
into the whole application before you

00:26:02,390 --> 00:26:06,890
can actually click and use a browser to

00:26:04,550 --> 00:26:11,510
perform some tests

00:26:06,890 --> 00:26:13,490
so in all regularity I try to induce to

00:26:11,510 --> 00:26:16,820
introduce some build steps before we

00:26:13,490 --> 00:26:18,350
actually do the test steps which is kind

00:26:16,820 --> 00:26:20,660
of weird because PHP does not really

00:26:18,350 --> 00:26:22,370
have a build process of course there is

00:26:20,660 --> 00:26:24,500
a compiler but it's

00:26:22,370 --> 00:26:26,690
not something we try to influence a lot

00:26:24,500 --> 00:26:30,200
it just happens

00:26:26,690 --> 00:26:35,540
so it's more of a virtual build we have

00:26:30,200 --> 00:26:37,880
the source code oh we have the source

00:26:35,540 --> 00:26:42,230
code and you might want to put something

00:26:37,880 --> 00:26:43,490
in this whole thing before you package a

00:26:42,230 --> 00:26:45,440
release that you want to ship to the

00:26:43,490 --> 00:26:48,020
customer in form of a bundled zip or

00:26:45,440 --> 00:26:51,890
that you want to push to your packages

00:26:48,020 --> 00:26:58,310
or to wherever you want to deploy your

00:26:51,890 --> 00:27:00,650
releases - so what do you want to do for

00:26:58,310 --> 00:27:04,940
example if you have some private

00:27:00,650 --> 00:27:06,290
repositories in your build chain which

00:27:04,940 --> 00:27:08,660
might be the case if you're not

00:27:06,290 --> 00:27:11,750
developing open source tools how can you

00:27:08,660 --> 00:27:14,060
integrate that mmm basically you have

00:27:11,750 --> 00:27:16,480
the possibility in Composer to list

00:27:14,060 --> 00:27:19,760
other composer repositories not only

00:27:16,480 --> 00:27:25,060
packages but any kind of private

00:27:19,760 --> 00:27:28,550
packages satyrs or even playing get

00:27:25,060 --> 00:27:33,500
backends has anybody used a repository

00:27:28,550 --> 00:27:36,640
clause in composer Jason yeah okay so

00:27:33,500 --> 00:27:39,320
that's some people you already use it

00:27:36,640 --> 00:27:42,500
but if you do that you may must make

00:27:39,320 --> 00:27:44,810
sure that the place where the composer

00:27:42,500 --> 00:27:46,940
is executed and tries to load those

00:27:44,810 --> 00:27:49,220
dependencies actually has access to

00:27:46,940 --> 00:27:52,280
those private repository that you linked

00:27:49,220 --> 00:27:53,840
in there so you see I built environment

00:27:52,280 --> 00:27:55,190
which is distributed to all kind of

00:27:53,840 --> 00:27:57,380
docker containers floating around

00:27:55,190 --> 00:28:00,140
somewhere in your company tries to

00:27:57,380 --> 00:28:03,260
access a private repository which it

00:28:00,140 --> 00:28:06,050
might not be able to do good lip has a

00:28:03,260 --> 00:28:11,020
concept called private variables that

00:28:06,050 --> 00:28:13,850
you can configure via the web GUI and

00:28:11,020 --> 00:28:16,370
they can be used during the build

00:28:13,850 --> 00:28:20,180
process without anybody getting a clue

00:28:16,370 --> 00:28:22,040
about the actual values in there and

00:28:20,180 --> 00:28:25,100
that means in that case that means you

00:28:22,040 --> 00:28:29,440
are creating an SSH key private and

00:28:25,100 --> 00:28:32,390
public and you have the public key to

00:28:29,440 --> 00:28:35,060
tell the github repository or any other

00:28:32,390 --> 00:28:36,340
kind of place it's okay to to give that

00:28:35,060 --> 00:28:38,650
information away

00:28:36,340 --> 00:28:42,279
to somebody and you hide the private key

00:28:38,650 --> 00:28:45,700
inside gitlab configuration now in your

00:28:42,279 --> 00:28:50,860
get lab CI file you need to post that

00:28:45,700 --> 00:28:54,549
key file into a virtual SSH config file

00:28:50,860 --> 00:28:59,020
or order you call the key file as a sage

00:28:54,549 --> 00:29:03,520
ID RSA dot whatever so this is done with

00:28:59,020 --> 00:29:05,559
the SSH at command and some other stuff

00:29:03,520 --> 00:29:09,970
like don't care whether the IP is

00:29:05,559 --> 00:29:12,580
trusted yet or not it really looks ugly

00:29:09,970 --> 00:29:15,070
I know because it's broken and all stuff

00:29:12,580 --> 00:29:18,070
but this is actually recommended way by

00:29:15,070 --> 00:29:20,470
gate lab to put secure as a sage

00:29:18,070 --> 00:29:23,860
communication in there might be refined

00:29:20,470 --> 00:29:26,529
sometime in the future so this enables

00:29:23,860 --> 00:29:30,880
you to access all the private repository

00:29:26,529 --> 00:29:37,330
in your build process ok any questions

00:29:30,880 --> 00:29:40,149
on that ok then we won't like to deliver

00:29:37,330 --> 00:29:43,299
that final product somewhere we have a

00:29:40,149 --> 00:29:47,320
build stage that makes some kind of

00:29:43,299 --> 00:29:49,270
bundle out of our software we have a

00:29:47,320 --> 00:29:52,779
test stage that goes over that and

00:29:49,270 --> 00:29:54,399
validates everything is ok and then we

00:29:52,779 --> 00:29:56,200
want to publish it

00:29:54,399 --> 00:29:58,090
now it really depends on what you are

00:29:56,200 --> 00:30:00,279
working on sometimes you only have

00:29:58,090 --> 00:30:01,899
software that you provide as a zip

00:30:00,279 --> 00:30:03,700
release somewhere and upload it to

00:30:01,899 --> 00:30:05,590
storage but you might also have

00:30:03,700 --> 00:30:07,659
real-life environments if you have

00:30:05,590 --> 00:30:09,549
providing a cloud service a website or

00:30:07,659 --> 00:30:11,230
whatever that you can actively deploy

00:30:09,549 --> 00:30:15,700
into and make the software run

00:30:11,230 --> 00:30:18,549
immediately in that case we would call

00:30:15,700 --> 00:30:22,240
it deployment to a server which I try to

00:30:18,549 --> 00:30:24,190
figure as a workflow like this if you're

00:30:22,240 --> 00:30:25,870
doing that you probably want to enable

00:30:24,190 --> 00:30:28,870
some kind of maintenance mode in the

00:30:25,870 --> 00:30:31,179
target system so that people do not see

00:30:28,870 --> 00:30:33,340
any kind of strange things during

00:30:31,179 --> 00:30:36,880
development you have to copy the new

00:30:33,340 --> 00:30:41,320
files over to the target environment I'm

00:30:36,880 --> 00:30:43,120
really in the way right sorry perhaps

00:30:41,320 --> 00:30:44,919
you have to apply some make migrations

00:30:43,120 --> 00:30:46,659
because you have to transform the target

00:30:44,919 --> 00:30:48,429
environment it's unkind I did the

00:30:46,659 --> 00:30:50,200
database or other you have to

00:30:48,429 --> 00:30:52,990
some temporary files around or you

00:30:50,200 --> 00:30:54,940
decided some CSS paths are different if

00:30:52,990 --> 00:30:57,460
you in the future you might want to

00:30:54,940 --> 00:31:02,200
clear some caches and in the end you

00:30:57,460 --> 00:31:06,419
just rien a believing were this is this

00:31:02,200 --> 00:31:09,789
can be a manual process who does

00:31:06,419 --> 00:31:13,570
automated deployment somewhere wow

00:31:09,789 --> 00:31:17,950
that's good so I'm not talking to to the

00:31:13,570 --> 00:31:19,690
wall here that's good and what I would

00:31:17,950 --> 00:31:21,519
also recommend is deploy to cumin tation

00:31:19,690 --> 00:31:22,779
alongside so because your application

00:31:21,519 --> 00:31:25,090
changed you might have updated

00:31:22,779 --> 00:31:28,690
documentation do that in the same step

00:31:25,090 --> 00:31:31,690
and not forget about it but the question

00:31:28,690 --> 00:31:33,759
still remains how to do this this is

00:31:31,690 --> 00:31:37,299
some of the methods we have been using

00:31:33,759 --> 00:31:39,730
in the last five years or so one

00:31:37,299 --> 00:31:43,149
traditional way is like go to the target

00:31:39,730 --> 00:31:45,039
server have a good clone or you have a

00:31:43,149 --> 00:31:46,899
git repository there already you do a

00:31:45,039 --> 00:31:49,649
git fetch and check out a new tag or

00:31:46,899 --> 00:31:52,360
release or branch or commit or whatever

00:31:49,649 --> 00:31:55,659
that means your target system actually

00:31:52,360 --> 00:31:57,220
is a good repository repository with all

00:31:55,659 --> 00:31:59,830
kind of history information that might

00:31:57,220 --> 00:32:01,960
be might be leaked and which has a kind

00:31:59,830 --> 00:32:03,789
of authorization with your git and

00:32:01,960 --> 00:32:05,080
association with a good repository that

00:32:03,789 --> 00:32:06,519
you might not want to have out there in

00:32:05,080 --> 00:32:09,009
the public because your customer has

00:32:06,519 --> 00:32:11,710
exit 2's access to the system or

00:32:09,009 --> 00:32:13,809
whatever still it is a valid way of

00:32:11,710 --> 00:32:15,249
doing it you might download a release

00:32:13,809 --> 00:32:18,700
from somewhere that you've previously

00:32:15,249 --> 00:32:21,820
published on a kind of cloud storage you

00:32:18,700 --> 00:32:23,860
might just want to copy files from where

00:32:21,820 --> 00:32:25,450
you are from the deployment process from

00:32:23,860 --> 00:32:27,399
the build process directly to the target

00:32:25,450 --> 00:32:28,090
system you can use something like

00:32:27,399 --> 00:32:33,119
deployer

00:32:28,090 --> 00:32:35,490
does anybody know deployer ok yeah one I

00:32:33,119 --> 00:32:37,720
would like to talk to you later

00:32:35,490 --> 00:32:40,419
because I haven't really gotten into

00:32:37,720 --> 00:32:42,309
that that much or you can also publish

00:32:40,419 --> 00:32:46,299
the software some kind of operating

00:32:42,309 --> 00:32:48,419
system package like RPM or depth or how

00:32:46,299 --> 00:32:51,509
do you call it in in this other world

00:32:48,419 --> 00:32:54,309
where you can bundle the software in to

00:32:51,509 --> 00:32:56,679
in our case I would like to demonstrate

00:32:54,309 --> 00:32:59,889
how to deploy it with a Narsingh which

00:32:56,679 --> 00:33:02,179
is something we end up quite often using

00:32:59,889 --> 00:33:04,129
so I'm introducing a new

00:33:02,179 --> 00:33:08,090
in my pipeline which I call deployment

00:33:04,129 --> 00:33:10,549
to production it has a new stage stages

00:33:08,090 --> 00:33:12,679
distinguished time during the build

00:33:10,549 --> 00:33:15,980
process so it does not happen parallely

00:33:12,679 --> 00:33:18,019
with a test but only afterwards I also

00:33:15,980 --> 00:33:19,309
have an environment flag and tell it it

00:33:18,019 --> 00:33:21,529
only should work on the production

00:33:19,309 --> 00:33:24,080
branch of maggot so I'm following some

00:33:21,529 --> 00:33:25,700
kind of get lab flow here or github flow

00:33:24,080 --> 00:33:28,309
I have an actual branch for my

00:33:25,700 --> 00:33:30,950
production system and not every comment

00:33:28,309 --> 00:33:33,379
somebody makes should be deployed to

00:33:30,950 --> 00:33:36,320
production because it might not be ready

00:33:33,379 --> 00:33:38,539
yet on the other hand you might want to

00:33:36,320 --> 00:33:40,220
protect protect that branch against any

00:33:38,539 --> 00:33:42,679
kind of interference by people who are

00:33:40,220 --> 00:33:45,320
not authorized to do it like protect the

00:33:42,679 --> 00:33:47,480
branches and get so you define some

00:33:45,320 --> 00:33:48,830
project project owners two or three

00:33:47,480 --> 00:33:50,570
people in your organization who can

00:33:48,830 --> 00:33:52,909
actually decide what will go into

00:33:50,570 --> 00:33:55,159
production and only they can trigger

00:33:52,909 --> 00:33:57,590
this CI pipeline as well because only

00:33:55,159 --> 00:34:01,490
they can create push events on that

00:33:57,590 --> 00:34:04,639
branch okay what is actually happening

00:34:01,490 --> 00:34:06,590
here we try some kind of SSH connection

00:34:04,639 --> 00:34:09,790
before we do the file transfer because

00:34:06,590 --> 00:34:12,950
we're following that five or six step

00:34:09,790 --> 00:34:15,980
workflow I explained just some slides

00:34:12,950 --> 00:34:19,339
ago we're connecting as some kind of

00:34:15,980 --> 00:34:20,839
user to a system which I have which has

00:34:19,339 --> 00:34:23,240
an IP address or hostname which is

00:34:20,839 --> 00:34:25,940
reachable but which I also hide in some

00:34:23,240 --> 00:34:29,089
kind of arrival to be to have it easier

00:34:25,940 --> 00:34:31,639
changeable and so on and we execute our

00:34:29,089 --> 00:34:33,679
maintenance enable script let's assume

00:34:31,639 --> 00:34:35,359
our application has something like that

00:34:33,679 --> 00:34:36,980
it might also have a framework like

00:34:35,359 --> 00:34:38,480
symphony which also hasn't built in

00:34:36,980 --> 00:34:40,940
maintenance mode so you might want to

00:34:38,480 --> 00:34:44,240
trigger that whatever you feel free to

00:34:40,940 --> 00:34:46,309
use then we have an AR sync which

00:34:44,240 --> 00:34:51,099
updates everything and also deletes

00:34:46,309 --> 00:34:55,460
files which are stale from our local

00:34:51,099 --> 00:34:57,349
part here to our target system but what

00:34:55,460 --> 00:35:00,109
we usually tend to do is we try to

00:34:57,349 --> 00:35:01,849
exclude quite a lot of stuff which we do

00:35:00,109 --> 00:35:05,119
not put in this line here because it's

00:35:01,849 --> 00:35:06,829
really a lot hmm normally when we're in

00:35:05,119 --> 00:35:09,589
that state during during the build

00:35:06,829 --> 00:35:12,579
process we have a copy of our repository

00:35:09,589 --> 00:35:15,799
without all the dependencies installed

00:35:12,579 --> 00:35:16,160
with some things lying around like a git

00:35:15,799 --> 00:35:20,150
ignore

00:35:16,160 --> 00:35:22,190
file get directory and other stuff

00:35:20,150 --> 00:35:24,530
that's that is not recommended to be in

00:35:22,190 --> 00:35:27,260
the production environment so so we have

00:35:24,530 --> 00:35:29,180
an exclude file here which hides all

00:35:27,260 --> 00:35:33,230
that stuff and prevents it from being

00:35:29,180 --> 00:35:35,059
transferred to the target system also if

00:35:33,230 --> 00:35:38,180
you're using the delete option with our

00:35:35,059 --> 00:35:40,010
sync it would delete any kind of file it

00:35:38,180 --> 00:35:41,690
accounts encounters on the other side

00:35:40,010 --> 00:35:44,770
which is not present in your local build

00:35:41,690 --> 00:35:47,299
for example a production config file

00:35:44,770 --> 00:35:49,400
that is lying around and of course it's

00:35:47,299 --> 00:35:51,859
not in your repository because then it

00:35:49,400 --> 00:35:53,930
would be overwritten all the time and

00:35:51,859 --> 00:35:56,240
you would have to put that into the

00:35:53,930 --> 00:35:59,599
execute file as well to prevent it from

00:35:56,240 --> 00:36:04,220
being overwritten after we copied

00:35:59,599 --> 00:36:06,230
everything we try to make a database

00:36:04,220 --> 00:36:08,630
dump apply some migrations with which

00:36:06,230 --> 00:36:11,329
will be a later chapter here and disable

00:36:08,630 --> 00:36:13,690
the maintenance mode if anything goes

00:36:11,329 --> 00:36:15,799
wrong during that process like copying

00:36:13,690 --> 00:36:21,500
doesn't work because we can't connect

00:36:15,799 --> 00:36:24,770
instead a question the question was how

00:36:21,500 --> 00:36:26,450
to perform a rollback there will be roll

00:36:24,770 --> 00:36:29,029
backs later on do you regard that as a

00:36:26,450 --> 00:36:31,510
question because of the migrations or of

00:36:29,029 --> 00:36:31,510
the files

00:36:36,260 --> 00:36:42,480
yeah that's what okay the question again

00:36:40,170 --> 00:36:43,829
was you can't roll back fast enough

00:36:42,480 --> 00:36:46,290
because you can't just change the sim

00:36:43,829 --> 00:36:49,650
link it will take time to copy all the

00:36:46,290 --> 00:36:51,660
files yes this is a basic thing you

00:36:49,650 --> 00:36:53,280
could also like copy all the files into

00:36:51,660 --> 00:36:54,839
a DAT separate directory you wait until

00:36:53,280 --> 00:36:57,359
everything set up and test it and then

00:36:54,839 --> 00:36:59,250
move the sim Ling of some kind of V host

00:36:57,359 --> 00:37:01,260
to point to that directory that is

00:36:59,250 --> 00:37:04,260
exactly what a framework like deployer

00:37:01,260 --> 00:37:07,710
is trying to do so I'm eager to talk to

00:37:04,260 --> 00:37:10,859
the guy behind there which I only have

00:37:07,710 --> 00:37:13,349
tested in some version a year ago and

00:37:10,859 --> 00:37:16,170
they had a quite rapid development they

00:37:13,349 --> 00:37:17,880
actually also use arcing or other means

00:37:16,170 --> 00:37:19,530
on the lower level but they have an

00:37:17,880 --> 00:37:20,910
abstraction up on top of that where you

00:37:19,530 --> 00:37:24,480
can just execute it with some kind of

00:37:20,910 --> 00:37:27,390
deploy commands and they will do all the

00:37:24,480 --> 00:37:28,920
stuff and in the end just change a

00:37:27,390 --> 00:37:30,750
pointer to somewhere and they will also

00:37:28,920 --> 00:37:33,300
leave the old stuff lying around for

00:37:30,750 --> 00:37:36,089
some kind of defined time or version

00:37:33,300 --> 00:37:38,190
count or whatever yes I think I would

00:37:36,089 --> 00:37:39,839
recommend that if it makes sense in your

00:37:38,190 --> 00:37:41,970
context this is just a very simple

00:37:39,839 --> 00:37:43,859
example of just copying over

00:37:41,970 --> 00:37:45,270
if something happens your application

00:37:43,859 --> 00:37:47,220
will be a maintenance mode for some

00:37:45,270 --> 00:37:50,730
hours until you debug it it yes might

00:37:47,220 --> 00:37:57,420
not be the best way to do it okay any

00:37:50,730 --> 00:37:59,369
other questions no ok so alongside

00:37:57,420 --> 00:38:02,250
deploying all that stuff you should also

00:37:59,369 --> 00:38:04,859
deploy documentation what we have found

00:38:02,250 --> 00:38:07,530
out is it should it is good to have the

00:38:04,859 --> 00:38:09,630
documentation somewhere alongside your

00:38:07,530 --> 00:38:11,819
code so we try to have a Doc's directory

00:38:09,630 --> 00:38:13,589
with some kind of markdown documents

00:38:11,819 --> 00:38:15,270
because markdown is what everybody uses

00:38:13,589 --> 00:38:18,359
nowadays and you can really have a nice

00:38:15,270 --> 00:38:19,710
look at it in your repository but you

00:38:18,359 --> 00:38:23,490
can also use any other kind of

00:38:19,710 --> 00:38:25,440
documentation and then we try to use MK

00:38:23,490 --> 00:38:28,380
Docs which is unfortunately Python

00:38:25,440 --> 00:38:31,440
software but there have never found

00:38:28,380 --> 00:38:34,710
anything in PHP which will build some

00:38:31,440 --> 00:38:36,569
nice HTML out of the markdown you can

00:38:34,710 --> 00:38:38,250
define weight has to go you can define

00:38:36,569 --> 00:38:40,559
multiple language suffixes and other

00:38:38,250 --> 00:38:42,990
stuff and then we deploy that as well

00:38:40,559 --> 00:38:45,000
with an arcing or whatever or in within

00:38:42,990 --> 00:38:46,559
the same arcing even because you have a

00:38:45,000 --> 00:38:47,970
whole build process you can also also

00:38:46,559 --> 00:38:49,660
put it together before you do the

00:38:47,970 --> 00:38:51,700
deployment

00:38:49,660 --> 00:38:53,800
and I would recommend to do the same

00:38:51,700 --> 00:38:58,600
thing for like a open API specification

00:38:53,800 --> 00:39:00,700
or swagger like it was known before so

00:38:58,600 --> 00:39:02,890
you have an up-to-date documentation all

00:39:00,700 --> 00:39:06,790
the time so do not build your actual

00:39:02,890 --> 00:39:08,560
swagger UI instance locally and then

00:39:06,790 --> 00:39:13,810
push it but do it every time you do a

00:39:08,560 --> 00:39:15,580
deployment ok one aspect that is

00:39:13,810 --> 00:39:17,560
important during deployment might be

00:39:15,580 --> 00:39:24,690
database migrations who is using an

00:39:17,560 --> 00:39:24,690
application that has a database ok hmm

00:39:25,380 --> 00:39:32,560
nevermind that is quite a lot so what we

00:39:30,040 --> 00:39:35,350
really had issues with this if you do

00:39:32,560 --> 00:39:37,270
actually the deployments partially

00:39:35,350 --> 00:39:38,800
automated or whatever you have new

00:39:37,270 --> 00:39:40,510
source code and you have an old database

00:39:38,800 --> 00:39:42,160
and it might not really fit together

00:39:40,510 --> 00:39:44,380
because you introduced a new column and

00:39:42,160 --> 00:39:47,470
somebody has to go there and execute

00:39:44,380 --> 00:39:48,970
something to insert the column and also

00:39:47,470 --> 00:39:50,770
sometimes you need to change values

00:39:48,970 --> 00:39:53,110
because you restructured something you

00:39:50,770 --> 00:39:55,300
might need to update some datasets to

00:39:53,110 --> 00:39:57,160
reflect a new column or because you

00:39:55,300 --> 00:39:58,810
decided you're introducing a country

00:39:57,160 --> 00:40:01,960
flag or whatever and you need to

00:39:58,810 --> 00:40:04,510
populate that so that means you have to

00:40:01,960 --> 00:40:07,390
have migrations basically migrations

00:40:04,510 --> 00:40:09,370
work like this you start with an empty

00:40:07,390 --> 00:40:12,370
database in the beginning of your

00:40:09,370 --> 00:40:14,560
project and every time you change your

00:40:12,370 --> 00:40:19,300
database it's a migration so it's

00:40:14,560 --> 00:40:21,040
migrating from state a to state B some

00:40:19,300 --> 00:40:22,600
projects also start not with an empty

00:40:21,040 --> 00:40:24,760
database but with some predefined

00:40:22,600 --> 00:40:26,290
structure so that would be migration 0

00:40:24,760 --> 00:40:28,150
because nobody ever applies the

00:40:26,290 --> 00:40:30,790
migration but you configure the database

00:40:28,150 --> 00:40:32,650
with a default template from some SQL

00:40:30,790 --> 00:40:37,540
file and afterwards you have the

00:40:32,650 --> 00:40:39,160
migrations now if you deploy to a

00:40:37,540 --> 00:40:41,770
production environment or whatever

00:40:39,160 --> 00:40:45,870
environment you all can also deploy the

00:40:41,770 --> 00:40:48,370
migration assets or instructions to that

00:40:45,870 --> 00:40:50,590
environment and execute them but you

00:40:48,370 --> 00:40:54,700
should trust them you should be able to

00:40:50,590 --> 00:40:57,820
know it will work out and not that your

00:40:54,700 --> 00:40:59,770
database gets corrupted or database

00:40:57,820 --> 00:41:02,350
migrations are never executed and then

00:40:59,770 --> 00:41:05,320
you're running into problems

00:41:02,350 --> 00:41:07,900
this is what several libraries try to do

00:41:05,320 --> 00:41:12,550
for example doctrine migrations who uses

00:41:07,900 --> 00:41:17,110
doctrine and migrations okay what do the

00:41:12,550 --> 00:41:21,240
others use hmm

00:41:17,110 --> 00:41:23,560
and they also have migration yeah okay

00:41:21,240 --> 00:41:25,870
I'm not better than the world but I

00:41:23,560 --> 00:41:27,670
would like to say we really use our own

00:41:25,870 --> 00:41:30,040
stuff because we inspected the rest and

00:41:27,670 --> 00:41:32,110
found them to have some flaws in the

00:41:30,040 --> 00:41:35,980
concept of deployments like I introduced

00:41:32,110 --> 00:41:41,530
it before here the problem is if you're

00:41:35,980 --> 00:41:44,380
deploying something like here that's our

00:41:41,530 --> 00:41:46,180
migration number one it gets executed in

00:41:44,380 --> 00:41:47,830
the target system that is something that

00:41:46,180 --> 00:41:52,690
trying migrations or whatever can also

00:41:47,830 --> 00:41:55,090
do and alongside it it has to put some

00:41:52,690 --> 00:41:57,370
information about going backwards there

00:41:55,090 --> 00:41:59,710
because if you have to roll back to the

00:41:57,370 --> 00:42:03,180
state previously known to the system you

00:41:59,710 --> 00:42:07,210
also have to redo the database changes

00:42:03,180 --> 00:42:09,070
now for exactly well but doctrine

00:42:07,210 --> 00:42:11,860
migrations has an issue there because

00:42:09,070 --> 00:42:13,750
the information about migrating and

00:42:11,860 --> 00:42:16,630
rolling back is always combined in the

00:42:13,750 --> 00:42:18,010
same class and if you roll back that

00:42:16,630 --> 00:42:22,660
class is missing from the target system

00:42:18,010 --> 00:42:24,370
so how do you roll back which is why we

00:42:22,660 --> 00:42:29,590
created something I don't perhaps never

00:42:24,370 --> 00:42:31,690
will fix it it yeah but so we try to fix

00:42:29,590 --> 00:42:34,330
that and we do that like this we have

00:42:31,690 --> 00:42:36,850
the migration file which is executed and

00:42:34,330 --> 00:42:40,660
as a trace it leaves the rollback file

00:42:36,850 --> 00:42:42,760
in the system the rollback file itself

00:42:40,660 --> 00:42:44,980
is not in our repository but only

00:42:42,760 --> 00:42:47,800
instructions about creating the rollback

00:42:44,980 --> 00:42:49,180
file are in the repository so we can do

00:42:47,800 --> 00:42:52,480
that sometimes and then we have a

00:42:49,180 --> 00:42:53,740
database state and now it happens that

00:42:52,480 --> 00:42:56,650
we have to roll back to the previous

00:42:53,740 --> 00:42:58,510
iteration and this is lost this is not

00:42:56,650 --> 00:43:01,150
in the target environment anymore but

00:42:58,510 --> 00:43:03,190
the database still thinks it is so we

00:43:01,150 --> 00:43:05,440
have the rollback trace file lying

00:43:03,190 --> 00:43:08,800
around and our automated script now

00:43:05,440 --> 00:43:10,780
execute this and thus the database can

00:43:08,800 --> 00:43:12,600
be reverted of course you can't revert

00:43:10,780 --> 00:43:14,740
all database changes because if you have

00:43:12,600 --> 00:43:16,390
created something

00:43:14,740 --> 00:43:18,280
kept for it sometime you properly

00:43:16,390 --> 00:43:20,740
populated those values and you roll back

00:43:18,280 --> 00:43:22,630
you might lose production data but I

00:43:20,740 --> 00:43:24,480
think you do not do that many roll backs

00:43:22,630 --> 00:43:28,630
in your production environment at all

00:43:24,480 --> 00:43:30,520
hopefully so now it gets really small to

00:43:28,630 --> 00:43:35,859
read that is an example migration file

00:43:30,520 --> 00:43:38,440
of our setup here we are trying to add

00:43:35,859 --> 00:43:41,200
two new columns because we detected

00:43:38,440 --> 00:43:43,390
using users are using brute force to

00:43:41,200 --> 00:43:45,250
break user logins we need two new

00:43:43,390 --> 00:43:49,000
columns because we need to lock accounts

00:43:45,250 --> 00:43:52,450
and make them available again after some

00:43:49,000 --> 00:43:55,000
time period so basically those are the

00:43:52,450 --> 00:43:58,359
statements from up here wrapped into

00:43:55,000 --> 00:44:01,690
some kind of command because we use

00:43:58,359 --> 00:44:04,030
doctrine we try to apply the database

00:44:01,690 --> 00:44:05,440
migrations using doctrine that has the

00:44:04,030 --> 00:44:08,200
advantage that we don't have to

00:44:05,440 --> 00:44:10,839
configure a separate database connection

00:44:08,200 --> 00:44:13,480
during our migration steps doctrine

00:44:10,839 --> 00:44:16,300
already knows which database to use so

00:44:13,480 --> 00:44:18,849
we don't run it using p SQL prompts or

00:44:16,300 --> 00:44:22,570
whatever but rather use it using the

00:44:18,849 --> 00:44:25,450
doctrine abstraction or CLI and in the

00:44:22,570 --> 00:44:28,570
same step after those are executed roll

00:44:25,450 --> 00:44:30,990
back files are written into the system

00:44:28,570 --> 00:44:34,089
which contain the reverse SQL our

00:44:30,990 --> 00:44:36,220
commands it'll really look technical

00:44:34,089 --> 00:44:37,750
here but you can also have a look at the

00:44:36,220 --> 00:44:42,220
repository later once I push the

00:44:37,750 --> 00:44:45,160
database part which is not pushed yet so

00:44:42,220 --> 00:44:48,460
this is principally like we have a

00:44:45,160 --> 00:44:51,339
numbered sequence of migration files

00:44:48,460 --> 00:44:53,680
starting from 0 0 0 0 or whatever you

00:44:51,339 --> 00:44:57,940
want to until some higher count and

00:44:53,680 --> 00:45:00,760
every time the migration is executed it

00:44:57,940 --> 00:45:03,760
leaves a rollback file of the same name

00:45:00,760 --> 00:45:06,160
so you can associate them and our my

00:45:03,760 --> 00:45:07,420
great migration script which I put not

00:45:06,160 --> 00:45:11,290
did not put here because it's quite

00:45:07,420 --> 00:45:13,540
lengthy every time checks whether there

00:45:11,290 --> 00:45:16,540
is a migration file that has no rollback

00:45:13,540 --> 00:45:18,369
present so that should be applied then

00:45:16,540 --> 00:45:20,710
if there is a migration felt that has a

00:45:18,369 --> 00:45:22,630
rollback lying around that is applied

00:45:20,710 --> 00:45:25,089
already and you should not do anything

00:45:22,630 --> 00:45:26,470
and if there's a roll big file lying

00:45:25,089 --> 00:45:28,539
around that does not have a migration

00:45:26,470 --> 00:45:30,869
anymore apply the rollback

00:45:28,539 --> 00:45:34,359
and we're back to where we want to be

00:45:30,869 --> 00:45:36,309
okay I have no idea whether that is a

00:45:34,359 --> 00:45:37,539
recommended way but it's something we

00:45:36,309 --> 00:45:40,169
came up with in the last year's because

00:45:37,539 --> 00:45:43,959
we had problems with doctrine migrations

00:45:40,169 --> 00:45:46,179
now first thing is we want to test that

00:45:43,959 --> 00:45:49,179
because it really sounds weird what we

00:45:46,179 --> 00:45:51,039
do with running arbitrary SQL on some

00:45:49,179 --> 00:45:52,929
kind of production environment and I

00:45:51,039 --> 00:45:55,169
won't let that happen before we test

00:45:52,929 --> 00:45:57,939
that and the principle is really simple

00:45:55,169 --> 00:46:00,549
during your build steps you can have

00:45:57,939 --> 00:46:02,559
another test migration step which has an

00:46:00,549 --> 00:46:05,130
empty docker database from a post rest

00:46:02,559 --> 00:46:07,749
container which you can load down from

00:46:05,130 --> 00:46:11,739
docker hub or it might be MySQL or no

00:46:07,749 --> 00:46:14,679
SQL and it's empty then you just run all

00:46:11,739 --> 00:46:17,559
the migrations in sequence and sequence

00:46:14,679 --> 00:46:20,140
and sequence and afterwards you kill all

00:46:17,559 --> 00:46:21,549
the migrations files so you run rerun

00:46:20,140 --> 00:46:22,749
your migration script and it starts

00:46:21,549 --> 00:46:24,880
going back through all the road back

00:46:22,749 --> 00:46:26,289
files and then you make a structural

00:46:24,880 --> 00:46:29,650
dump of the database and it should be

00:46:26,289 --> 00:46:31,809
empty if it not is empty you might might

00:46:29,650 --> 00:46:33,759
have missed up to clean up something

00:46:31,809 --> 00:46:37,539
during a rollback file and if something

00:46:33,759 --> 00:46:39,849
happens like one of the SQL commands has

00:46:37,539 --> 00:46:42,369
an arrow it will also break the chain so

00:46:39,849 --> 00:46:48,279
you have validated your database

00:46:42,369 --> 00:46:49,809
migrations here okay then there is one

00:46:48,279 --> 00:46:54,789
point here about the future business

00:46:49,809 --> 00:46:57,819
wish list for our projects I've seen a

00:46:54,789 --> 00:47:00,579
lot about get lab CI being able to have

00:46:57,819 --> 00:47:02,409
dynamic container environments for every

00:47:00,579 --> 00:47:04,869
kind of branch so if you're having a

00:47:02,409 --> 00:47:07,329
feature branch it can also create an

00:47:04,869 --> 00:47:08,979
automatic environment for you running in

00:47:07,329 --> 00:47:12,099
a container which bundles all your

00:47:08,979 --> 00:47:14,499
application stuff I have not found any

00:47:12,099 --> 00:47:17,079
kind of cool guides for doing this for

00:47:14,499 --> 00:47:20,199
PHP so it's postponed but I hope we can

00:47:17,079 --> 00:47:22,239
introduce that soon you I would also

00:47:20,199 --> 00:47:25,269
like to use the gitlab integrated

00:47:22,239 --> 00:47:28,419
tomatoes which is a metric metric

00:47:25,269 --> 00:47:30,369
database or monitoring database to

00:47:28,419 --> 00:47:33,880
collect something like exception counts

00:47:30,369 --> 00:47:37,299
or failed logins or other metrics from

00:47:33,880 --> 00:47:40,390
our applications feed that into the get

00:47:37,299 --> 00:47:41,710
lab and for example visualize it using

00:47:40,390 --> 00:47:44,950
graph Anna

00:47:41,710 --> 00:47:47,140
as I learned something about coat smells

00:47:44,950 --> 00:47:49,930
yesterday I really would like to dive

00:47:47,140 --> 00:47:52,210
deeper dive deeper into that and put it

00:47:49,930 --> 00:47:54,400
in our file so perhaps you might might

00:47:52,210 --> 00:47:57,880
find that in the repository soon as well

00:47:54,400 --> 00:48:00,400
and do a common base repository for all

00:47:57,880 --> 00:48:04,390
our projects to get other developers

00:48:00,400 --> 00:48:06,339
start easier in our company okay thank

00:48:04,390 --> 00:48:08,170
you for listening

00:48:06,339 --> 00:48:09,010
and please come forward with your

00:48:08,170 --> 00:48:19,749
questions now

00:48:09,010 --> 00:48:19,749

YouTube URL: https://www.youtube.com/watch?v=m35iG5v-rRw


