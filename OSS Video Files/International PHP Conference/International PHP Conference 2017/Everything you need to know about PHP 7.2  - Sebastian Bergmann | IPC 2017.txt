Title: Everything you need to know about PHP 7.2  - Sebastian Bergmann | IPC 2017
Publication date: 2019-01-23
Playlist: International PHP Conference 2017
Description: 
	Sebastian Bergmann (thePHP.cc) at IPC 2017: Almost two years after the release of PHP 7.0 it is time to look ahead to PHP 7.2 (and say “Goodbye!” to PHP 5). The attendees of this session will learn how to prepare their code for this upcoming version in order to leverage its performance improvements as well as its new functionality offerings as soon as possible and with the least amount of risk.
Captions: 
	00:00:02,100 --> 00:00:08,610
[Music]

00:00:05,750 --> 00:00:13,410
good morning and welcome to everything

00:00:08,610 --> 00:00:15,480
you need to know about peach p72 hi I'm

00:00:13,410 --> 00:00:19,260
Sebastian and I've been doing things

00:00:15,480 --> 00:00:21,180
with PHP and to PHP for I don't know how

00:00:19,260 --> 00:00:23,310
many years now I think it's 18 or 19

00:00:21,180 --> 00:00:26,730
years since I had my first contact with

00:00:23,310 --> 00:00:30,210
PHP what I do know that is that almost

00:00:26,730 --> 00:00:32,189
to the day 17 years ago I spoke for the

00:00:30,210 --> 00:00:34,170
first time at a PHP conference which was

00:00:32,189 --> 00:00:36,570
in October 2000 in Cologne at the

00:00:34,170 --> 00:00:39,329
world's first PHP conference which was

00:00:36,570 --> 00:00:41,370
quite nice not necessarily because I got

00:00:39,329 --> 00:00:43,110
to speak at the conference but because

00:00:41,370 --> 00:00:47,219
for the very first time I met people

00:00:43,110 --> 00:00:50,640
that I've only worked with so prior to

00:00:47,219 --> 00:00:52,710
that via email and IRC and so on so that

00:00:50,640 --> 00:00:55,070
was a really good boost for a community

00:00:52,710 --> 00:01:00,149
having these conference events going on

00:00:55,070 --> 00:01:03,750
if I'm not at a conference and not on a

00:01:00,149 --> 00:01:05,880
train plane or at home fixing bugs on

00:01:03,750 --> 00:01:09,960
phpunit or some other open-source

00:01:05,880 --> 00:01:12,659
projects I'm involved in then I'm on

00:01:09,960 --> 00:01:14,760
site with customers helping teams build

00:01:12,659 --> 00:01:17,939
better software with PHP that's what I

00:01:14,760 --> 00:01:21,150
do work as a consultant PHP consulting

00:01:17,939 --> 00:01:24,299
company and that's all the advertising

00:01:21,150 --> 00:01:26,640
that you're going to get out of me not

00:01:24,299 --> 00:01:30,299
really into marketing and stuff don't

00:01:26,640 --> 00:01:34,409
care about that so we are here today

00:01:30,299 --> 00:01:40,970
about to talk about PHP 7 or I'm here to

00:01:34,409 --> 00:01:45,000
talk about PHP 757 - in particular and I

00:01:40,970 --> 00:01:47,880
have a confession to make I don't know

00:01:45,000 --> 00:01:49,710
if you know this but if you present at a

00:01:47,880 --> 00:01:51,930
conference like half a year before that

00:01:49,710 --> 00:01:55,920
you have to submit your abstract your

00:01:51,930 --> 00:01:57,780
proposal and then it gets accepted which

00:01:55,920 --> 00:01:59,460
means like half a year ago I needed to

00:01:57,780 --> 00:02:02,490
propose this session today and have a

00:01:59,460 --> 00:02:05,900
year ago that it I knew that about 4

00:02:02,490 --> 00:02:09,000
weeks later we will get PHP 7 to

00:02:05,900 --> 00:02:12,690
half year ago there were a lot more

00:02:09,000 --> 00:02:16,680
RFC's on the discussion and it looked

00:02:12,690 --> 00:02:19,260
like they would be accepted so I had no

00:02:16,680 --> 00:02:22,830
doubt that I would have enough to talk

00:02:19,260 --> 00:02:25,470
about today unfortunately some of these

00:02:22,830 --> 00:02:28,140
RFC's have not been accepted yet or not

00:02:25,470 --> 00:02:29,820
accepted in time some of them have been

00:02:28,140 --> 00:02:32,640
accepted since then and are now

00:02:29,820 --> 00:02:35,400
implemented for PHP 7/3 so that but

00:02:32,640 --> 00:02:37,950
that's something for next year and

00:02:35,400 --> 00:02:40,650
others are still under discussion so I

00:02:37,950 --> 00:02:42,600
have a little bit less and that I

00:02:40,650 --> 00:02:45,630
expected to talk about but I hope still

00:02:42,600 --> 00:02:48,720
hope that this will be useful and not

00:02:45,630 --> 00:02:53,120
boring boring is an important word that

00:02:48,720 --> 00:02:55,320
I'll come back to in a little bit so

00:02:53,120 --> 00:02:59,610
almost two years ago

00:02:55,320 --> 00:03:06,350
PHP 7-0 was released first major version

00:02:59,610 --> 00:03:10,530
for PHP since 2004 2004 PHP 5 came out

00:03:06,350 --> 00:03:14,700
we skipped PHP 6 because of book

00:03:10,530 --> 00:03:17,459
publishers I will not go into details

00:03:14,700 --> 00:03:21,049
about that because that usually derails

00:03:17,459 --> 00:03:23,489
into sebastian talking really bad about

00:03:21,049 --> 00:03:26,280
publishing companies and I'm not in the

00:03:23,489 --> 00:03:28,680
mood to do that if you're interested in

00:03:26,280 --> 00:03:32,280
details find details on the internals

00:03:28,680 --> 00:03:35,820
mailing list or find me in the hallway

00:03:32,280 --> 00:03:38,940
track and I may tell an anecdote or two

00:03:35,820 --> 00:03:43,830
about book publishers so this happened

00:03:38,940 --> 00:03:48,450
two years ago can I get a quick show of

00:03:43,830 --> 00:03:50,630
hands from you guys who is not on PHP 7

00:03:48,450 --> 00:03:50,630
yet

00:03:52,910 --> 00:04:04,310
that is less than expected so okay just

00:04:00,520 --> 00:04:06,590
a quick recap for those who have not had

00:04:04,310 --> 00:04:09,020
the time to look at peach p7 in detail

00:04:06,590 --> 00:04:12,530
yet or and are not using peach p7 yet

00:04:09,020 --> 00:04:18,380
peach p7 brought about a lot of change

00:04:12,530 --> 00:04:19,940
in four major areas performance there

00:04:18,380 --> 00:04:22,640
was a lot of refactoring there was a lot

00:04:19,940 --> 00:04:26,800
of cleanup and changes to the type

00:04:22,640 --> 00:04:29,660
system performance is the thing that

00:04:26,800 --> 00:04:32,630
everybody cares about yay it's three

00:04:29,660 --> 00:04:34,940
times faster that's awesome

00:04:32,630 --> 00:04:38,240
but you don't have to believe synthetic

00:04:34,940 --> 00:04:40,700
benchmarks at people like me publish if

00:04:38,240 --> 00:04:42,170
you want to have proved that 57 is

00:04:40,700 --> 00:04:45,200
faster look at what companies are

00:04:42,170 --> 00:04:47,060
writing about it that's something that I

00:04:45,200 --> 00:04:50,660
find really amazing about the PHP

00:04:47,060 --> 00:04:53,270
community almost every major site that

00:04:50,660 --> 00:04:55,520
uses PHP to develop their software has a

00:04:53,270 --> 00:04:57,140
tech blog or goes to conferences and

00:04:55,520 --> 00:04:59,630
speaks about their practical experience

00:04:57,140 --> 00:05:02,420
and that's also the case for the upgrade

00:04:59,630 --> 00:05:04,970
from PHP files to teach p7 companies

00:05:02,420 --> 00:05:10,010
like Purdue have this blog post made a

00:05:04,970 --> 00:05:11,930
show among many other stats at this

00:05:10,010 --> 00:05:19,910
point in time they made the switch from

00:05:11,930 --> 00:05:22,610
HP v 256 to HP 7 sorry and their

00:05:19,910 --> 00:05:26,660
response time went down from 120 hundred

00:05:22,610 --> 00:05:28,880
and 30 milliseconds down to hottest is

00:05:26,660 --> 00:05:32,690
like 50 60 minus milliseconds which is

00:05:28,880 --> 00:05:35,060
great they were able to answer requests

00:05:32,690 --> 00:05:38,030
faster with speech p7 than with speech

00:05:35,060 --> 00:05:40,760
p5 while at the same time using less

00:05:38,030 --> 00:05:46,910
servers which is why they estimate that

00:05:40,760 --> 00:05:49,870
they save around 1 million dollars by

00:05:46,910 --> 00:05:52,430
switching from 55 to 57 which is nice

00:05:49,870 --> 00:05:53,510
Rasmus likes to think about this in

00:05:52,430 --> 00:05:55,669
different terms

00:05:53,510 --> 00:05:57,530
he's not talking about saving money he

00:05:55,669 --> 00:06:01,010
talks about how good this is for the

00:05:57,530 --> 00:06:03,560
environment it's green IT if you can do

00:06:01,010 --> 00:06:05,849
the same or better with less servers

00:06:03,560 --> 00:06:07,860
that means less hardware

00:06:05,849 --> 00:06:09,929
power and that's good for the

00:06:07,860 --> 00:06:12,749
environment so if you need yet another

00:06:09,929 --> 00:06:18,050
reason to go to PHP seven think about

00:06:12,749 --> 00:06:20,490
the planet similar stats from trivago

00:06:18,050 --> 00:06:23,099
don't get your hopes up too much it

00:06:20,490 --> 00:06:26,189
doesn't go down to zero sorry no zero

00:06:23,099 --> 00:06:27,839
milliseconds response time and also

00:06:26,189 --> 00:06:30,779
don't think that they did something

00:06:27,839 --> 00:06:34,199
stupid and just went offline for an hour

00:06:30,779 --> 00:06:35,939
or two what they did was they migrated

00:06:34,199 --> 00:06:37,679
the service one by one they took one

00:06:35,939 --> 00:06:39,479
server out of the load balancing and

00:06:37,679 --> 00:06:42,509
this is a chart from the very first

00:06:39,479 --> 00:06:44,809
server that I put took out and they

00:06:42,509 --> 00:06:47,429
performed the upgrade did some final

00:06:44,809 --> 00:06:50,249
testing on real production hardware

00:06:47,429 --> 00:06:53,459
before they put it back into the load

00:06:50,249 --> 00:06:55,199
balancer and then for a couple of hours

00:06:53,459 --> 00:06:58,800
they rotated and it took them a couple

00:06:55,199 --> 00:07:02,249
of minutes to rotate the upgrade from 55

00:06:58,800 --> 00:07:04,649
to 57 they are also very happy response

00:07:02,249 --> 00:07:07,189
time went down from something like 100

00:07:04,649 --> 00:07:10,349
and 780 milliseconds to 100 milliseconds

00:07:07,189 --> 00:07:12,569
while using a lot less memory from 40

00:07:10,349 --> 00:07:15,659
megabytes per request to 10 megabytes

00:07:12,569 --> 00:07:18,869
per request and they did that with a lot

00:07:15,659 --> 00:07:22,529
less CPU usage than before they are

00:07:18,869 --> 00:07:25,469
quite happy similar charts from tumblr

00:07:22,529 --> 00:07:29,099
and many other sites and if you're

00:07:25,469 --> 00:07:31,319
interested in more benchmarks Rasmus has

00:07:29,099 --> 00:07:34,009
a habit of collecting these benchmarks

00:07:31,319 --> 00:07:36,479
and making it his own benchmarks for

00:07:34,009 --> 00:07:40,979
standard open-source solutions like

00:07:36,479 --> 00:07:43,139
Drupal WordPress Magento whatever the

00:07:40,979 --> 00:07:45,269
latest iteration of those benchmarks you

00:07:43,139 --> 00:07:47,189
can find in this presentation that he

00:07:45,269 --> 00:07:52,829
gave last week I think or two weeks ago

00:07:47,189 --> 00:07:56,999
in Brazil if your interest interested in

00:07:52,829 --> 00:08:00,749
more details about the new features of

00:07:56,999 --> 00:08:02,610
PHP 7-0 and vp7 one there's a video

00:08:00,749 --> 00:08:05,399
recording of a presentation I gave five

00:08:02,610 --> 00:08:09,240
years ago on that in Bulgaria if I

00:08:05,399 --> 00:08:11,579
remember correctly yes also yesterday I

00:08:09,240 --> 00:08:14,819
talked for like six hours or so about

00:08:11,579 --> 00:08:16,740
PHP seven zero and PHP seven one sorry

00:08:14,819 --> 00:08:18,510
if you have missed that if you're

00:08:16,740 --> 00:08:20,070
interested in details

00:08:18,510 --> 00:08:22,470
and learning more than you probably ever

00:08:20,070 --> 00:08:25,680
wanted to learn about type systems and

00:08:22,470 --> 00:08:28,290
what PHP actually does with regards to

00:08:25,680 --> 00:08:33,030
tightening and why there's also a video

00:08:28,290 --> 00:08:37,229
recording of that and of course if you

00:08:33,030 --> 00:08:39,479
don't want to watch videos or if you

00:08:37,229 --> 00:08:42,060
don't want to watch me talking about

00:08:39,479 --> 00:08:43,710
stuff in the video then you can read

00:08:42,060 --> 00:08:45,440
something that I've wrote together with

00:08:43,710 --> 00:08:49,440
Sun and Stefan which is this ebook

00:08:45,440 --> 00:08:52,110
that's a 25% discount while IPC is going

00:08:49,440 --> 00:08:55,770
that might be a good chance to get that

00:08:52,110 --> 00:08:59,430
ebook this ebook is special in the way

00:08:55,770 --> 00:09:01,440
that we continuously update the e-book

00:08:59,430 --> 00:09:04,260
there are free updates for as long as

00:09:01,440 --> 00:09:07,770
PHP 7 is maintained and updated by the

00:09:04,260 --> 00:09:09,630
PHP project there's an update coming

00:09:07,770 --> 00:09:13,260
soon in a couple of weeks that will

00:09:09,630 --> 00:09:15,180
cover all the changes of PHP 7 - in the

00:09:13,260 --> 00:09:18,390
branch we already have the first changes

00:09:15,180 --> 00:09:20,970
for PHP 73 for the RFC's that have

00:09:18,390 --> 00:09:23,610
already been accepted in PHP 73 and

00:09:20,970 --> 00:09:26,070
already implemented there we are not yet

00:09:23,610 --> 00:09:30,290
sure whether or not it makes sense to

00:09:26,070 --> 00:09:33,180
immediately put these things in the book

00:09:30,290 --> 00:09:35,030
I'm rather hesitant to do to do that

00:09:33,180 --> 00:09:37,650
because way back when

00:09:35,030 --> 00:09:40,980
before PHP 5 for us at least I was

00:09:37,650 --> 00:09:43,170
writing a book on PHP 5 and all the

00:09:40,980 --> 00:09:45,930
changes in PHP 5 and in the two or three

00:09:43,170 --> 00:09:48,690
months before pp5 finally came out I had

00:09:45,930 --> 00:09:51,630
to rewrite like half the book so just

00:09:48,690 --> 00:09:53,280
because an RFC was accepted today or a

00:09:51,630 --> 00:09:55,830
couple of weeks ago and is implemented

00:09:53,280 --> 00:09:58,980
currently in master does not guarantee

00:09:55,830 --> 00:10:02,760
that it will actually be released as PHP

00:09:58,980 --> 00:10:05,250
century in recent years or for quite

00:10:02,760 --> 00:10:08,310
some time now actually there has not

00:10:05,250 --> 00:10:10,680
been a last-minute pull out of a feature

00:10:08,310 --> 00:10:12,510
but you never know it would be really

00:10:10,680 --> 00:10:15,120
confusing to have something documented

00:10:12,510 --> 00:10:18,140
and that's not going to happen but if

00:10:15,120 --> 00:10:23,430
you're continuously working on that and

00:10:18,140 --> 00:10:26,640
that's it so in about four weeks time if

00:10:23,430 --> 00:10:29,780
all goes according to plan PHP seven two

00:10:26,640 --> 00:10:29,780
will be released

00:10:30,170 --> 00:10:40,530
so what do you need to know about peach

00:10:32,640 --> 00:10:44,520
pcenter turns out you really have to

00:10:40,530 --> 00:10:47,550
know only very little you only have to

00:10:44,520 --> 00:10:50,310
know at least immediately and in the

00:10:47,550 --> 00:10:55,350
short-term about the things that have

00:10:50,310 --> 00:10:58,830
the potential of breaking things yes

00:10:55,350 --> 00:11:02,250
it's a minor release and there shouldn't

00:10:58,830 --> 00:11:06,270
be any backwards-compatible breaks in

00:11:02,250 --> 00:11:13,740
there but some tiny ones that shouldn't

00:11:06,270 --> 00:11:16,650
actually affect anyone crept in but

00:11:13,740 --> 00:11:19,590
we'll go through those in a minute and

00:11:16,650 --> 00:11:21,630
they are not I don't think that they

00:11:19,590 --> 00:11:23,970
well in a perfect world they wouldn't

00:11:21,630 --> 00:11:26,580
affect anyone well in a more in a much

00:11:23,970 --> 00:11:29,040
more perfect world those mistakes would

00:11:26,580 --> 00:11:31,410
never have been in PHP so now we did not

00:11:29,040 --> 00:11:32,610
have to fix them but we don't live in a

00:11:31,410 --> 00:11:38,160
perfect world so we have to deal with

00:11:32,610 --> 00:11:41,430
that remember about ten minutes ago I

00:11:38,160 --> 00:11:43,680
said that the word boring would come up

00:11:41,430 --> 00:11:47,970
again please don't fall asleep

00:11:43,680 --> 00:11:50,850
I mean boring in a very good way PHP 72

00:11:47,970 --> 00:11:54,360
is a boring release and that's good I

00:11:50,850 --> 00:11:56,580
like boring software boring software

00:11:54,360 --> 00:12:00,270
means that it's mature that I can use it

00:11:56,580 --> 00:12:03,600
without fear of things going really

00:12:00,270 --> 00:12:07,830
wrong yes there are some minor PC issues

00:12:03,600 --> 00:12:11,880
in there but as you'll see they

00:12:07,830 --> 00:12:14,760
shouldn't really have an effect so just

00:12:11,880 --> 00:12:16,940
in case somebody fell asleep I'll wake

00:12:14,760 --> 00:12:20,430
you up with a hammer of breaking changes

00:12:16,940 --> 00:12:22,560
or at least I try to hopefully you find

00:12:20,430 --> 00:12:24,990
all of these things boring because you

00:12:22,560 --> 00:12:26,520
never have of Road code like that or at

00:12:24,990 --> 00:12:34,620
least won't admit in public that you

00:12:26,520 --> 00:12:38,160
wrote code like that so get type has

00:12:34,620 --> 00:12:40,940
changed its result type for closed

00:12:38,160 --> 00:12:40,940
resources

00:12:40,950 --> 00:12:45,269
that is a breaking change it shouldn't

00:12:44,220 --> 00:12:48,570
affect anyone

00:12:45,269 --> 00:12:52,079
it affected one test case in PHP unit

00:12:48,570 --> 00:12:53,820
for a really weird edge case where at

00:12:52,079 --> 00:12:56,370
hard code at the return value of cat

00:12:53,820 --> 00:13:00,690
type in a test somewhere that's been

00:12:56,370 --> 00:13:04,290
fixed so what happens if prior to PHP

00:13:00,690 --> 00:13:07,350
seven - if you call the get type

00:13:04,290 --> 00:13:09,570
function which does exactly what the

00:13:07,350 --> 00:13:13,529
name suggests you give it a variable and

00:13:09,570 --> 00:13:16,860
it returns the type of that variable if

00:13:13,529 --> 00:13:19,680
you call that on a resource and the

00:13:16,860 --> 00:13:23,190
resource is this special variable type

00:13:19,680 --> 00:13:27,839
thing that PHP has for network

00:13:23,190 --> 00:13:30,360
connections file pointers and so on so

00:13:27,839 --> 00:13:32,430
for instance if you call F open it

00:13:30,360 --> 00:13:35,220
returns a file pointer it's something

00:13:32,430 --> 00:13:38,910
that you can use to use other to use

00:13:35,220 --> 00:13:39,300
with other file system functions like f

00:13:38,910 --> 00:13:42,329
read

00:13:39,300 --> 00:13:44,279
f put and F right and so on to do

00:13:42,329 --> 00:13:48,870
something on the stream resource that

00:13:44,279 --> 00:13:53,070
represents that file on disk if you call

00:13:48,870 --> 00:13:54,329
get type on a resource like the one

00:13:53,070 --> 00:14:00,690
returned by US Open

00:13:54,329 --> 00:14:02,459
you get resource this PHP seven one that

00:14:00,690 --> 00:14:06,720
has not changed in seven - what has

00:14:02,459 --> 00:14:08,550
changed is when you closed that resource

00:14:06,720 --> 00:14:12,420
and you're for instance close that file

00:14:08,550 --> 00:14:15,029
using F close prior to PHP seven - for

00:14:12,420 --> 00:14:20,790
whatever reason get type foot return

00:14:15,029 --> 00:14:24,420
unknown type now it returns resource

00:14:20,790 --> 00:14:26,610
closed which is much nicer which is what

00:14:24,420 --> 00:14:28,350
it should have been since PHP three or

00:14:26,610 --> 00:14:31,490
pitch before whenever gets type was

00:14:28,350 --> 00:14:31,490
introduced but it didn't

00:14:35,160 --> 00:14:41,009
just the other day I looked at PHP

00:14:37,410 --> 00:14:43,860
source code for get type and there is

00:14:41,009 --> 00:14:46,769
this huge switch statement wherein one

00:14:43,860 --> 00:14:50,850
default came in a default cast case it

00:14:46,769 --> 00:14:53,250
says unknown type that code is still in

00:14:50,850 --> 00:14:55,319
there but I was not able to figure out

00:14:53,250 --> 00:14:58,980
for which type of variable that we still

00:14:55,319 --> 00:15:00,930
have in PHP somewhere it would now still

00:14:58,980 --> 00:15:03,060
return unknown type I don't know

00:15:00,930 --> 00:15:05,699
need to ask it at some point someone who

00:15:03,060 --> 00:15:08,699
may or may not know could be that that

00:15:05,699 --> 00:15:14,370
code cannot be removed would be great

00:15:08,699 --> 00:15:19,949
deleting code is always good the

00:15:14,370 --> 00:15:22,980
behavior of its object has changed for

00:15:19,949 --> 00:15:31,050
objects of the very special class PHP

00:15:22,980 --> 00:15:33,600
incomplete laws so how to can you get an

00:15:31,050 --> 00:15:35,670
object of that very special class PHP

00:15:33,600 --> 00:15:38,100
incomplete class that happens when you

00:15:35,670 --> 00:15:41,250
uncie realize using uncie you realize

00:15:38,100 --> 00:15:44,939
either directly or indirectly when

00:15:41,250 --> 00:15:47,639
you're using the session extension when

00:15:44,939 --> 00:15:50,850
you try to uncie realize a variable that

00:15:47,639 --> 00:15:53,610
contains an object of a class that is

00:15:50,850 --> 00:15:56,699
not loaded and cannot be loaded through

00:15:53,610 --> 00:16:03,149
Auto loading then PHP gives you an

00:15:56,699 --> 00:16:07,709
object of type PHP incomplete class for

00:16:03,149 --> 00:16:10,139
all intents and purposes that is sort of

00:16:07,709 --> 00:16:12,540
an object but it doesn't really work

00:16:10,139 --> 00:16:16,920
because it's incomplete the class is not

00:16:12,540 --> 00:16:19,170
there but it's an object you can access

00:16:16,920 --> 00:16:22,649
the attributes of that objects that were

00:16:19,170 --> 00:16:24,660
written in there everything into it by

00:16:22,649 --> 00:16:26,309
the uncie realized function or the

00:16:24,660 --> 00:16:28,949
session extension you can access them

00:16:26,309 --> 00:16:33,120
using the arrow notation so according to

00:16:28,949 --> 00:16:40,939
syntax it's an object doesn't have any

00:16:33,120 --> 00:16:40,939
methods because no class but its object

00:16:41,110 --> 00:16:51,700
returned false in 1571 and now it

00:16:44,290 --> 00:16:54,640
returns true I'm not really sure which

00:16:51,700 --> 00:16:57,149
of the two is correct I can only tell

00:16:54,640 --> 00:17:00,070
you that this change has happened I

00:16:57,149 --> 00:17:03,010
think the problem is even before that

00:17:00,070 --> 00:17:05,020
that uncie realized should not try to

00:17:03,010 --> 00:17:07,000
give you something that it cannot create

00:17:05,020 --> 00:17:09,640
because the class doesn't exist

00:17:07,000 --> 00:17:14,770
maybe that problem should be or should

00:17:09,640 --> 00:17:16,600
have been addressed but I can only tell

00:17:14,770 --> 00:17:26,380
you that this is how it happens right

00:17:16,600 --> 00:17:29,500
now and hope I hope that you have no

00:17:26,380 --> 00:17:31,480
code that D that depends on this object

00:17:29,500 --> 00:17:31,990
being used on page being complete class

00:17:31,480 --> 00:17:38,140
and so on

00:17:31,990 --> 00:17:41,650
I also hope and now we are getting into

00:17:38,140 --> 00:17:45,340
the territory of changes where I looked

00:17:41,650 --> 00:17:47,610
at a change and I thought why the hell

00:17:45,340 --> 00:17:53,679
is that even possible to begin with and

00:17:47,610 --> 00:17:58,030
why are people using that so you can

00:17:53,679 --> 00:17:59,980
cast an array to an object and you have

00:17:58,030 --> 00:18:02,559
been able to do that for a really long

00:17:59,980 --> 00:18:04,540
time I really hope that nobody does that

00:18:02,559 --> 00:18:12,780
because it doesn't make any sense at

00:18:04,540 --> 00:18:17,290
least not to me at some point somebody

00:18:12,780 --> 00:18:21,280
ran into a problem with that if you have

00:18:17,290 --> 00:18:25,840
an array and that array has integer keys

00:18:21,280 --> 00:18:30,929
and you cast that array is integer keys

00:18:25,840 --> 00:18:33,790
to an object you get an object that has

00:18:30,929 --> 00:18:40,220
attributes where the names of the

00:18:33,790 --> 00:18:44,149
attributes are integers that works

00:18:40,220 --> 00:18:48,669
what doesn't work is accessing those

00:18:44,149 --> 00:18:48,669
attributes because that's invalid syntax

00:18:48,909 --> 00:19:02,529
you cannot write dollar ol arrow one to

00:18:54,919 --> 00:19:08,330
access that attribute or zero you cannot

00:19:02,529 --> 00:19:11,960
it's a syntax error yet PHP happily

00:19:08,330 --> 00:19:14,509
creates such an object using that weird

00:19:11,960 --> 00:19:19,190
operation and there's not really another

00:19:14,509 --> 00:19:21,500
way of creating an object like an

00:19:19,190 --> 00:19:24,350
attribute like that other than using

00:19:21,500 --> 00:19:29,929
variable variables which hopefully

00:19:24,350 --> 00:19:35,809
nobody uses anyway either so the

00:19:29,929 --> 00:19:37,879
solution for that in PHP 7 tool is to

00:19:35,809 --> 00:19:41,600
convert these integer keys to strings

00:19:37,879 --> 00:19:47,080
and then there are strings in the end

00:19:41,600 --> 00:19:52,279
you can access them but please don't

00:19:47,080 --> 00:19:54,679
it's not good for your sanity couple of

00:19:52,279 --> 00:19:57,049
things were removed and deprecated they

00:19:54,679 --> 00:19:59,629
were sent to the desert actually as

00:19:57,049 --> 00:20:02,840
people say in PHP we sent them to

00:19:59,629 --> 00:20:05,029
Siberia which is an old nickname for

00:20:02,840 --> 00:20:09,259
pickle but we only use that for

00:20:05,029 --> 00:20:14,840
extensions so I used a picture of a

00:20:09,259 --> 00:20:17,570
desert so removals and applications it's

00:20:14,840 --> 00:20:21,679
a minor release so we shouldn't be

00:20:17,570 --> 00:20:24,950
removing anything but we had to remove

00:20:21,679 --> 00:20:29,149
something which is XM crypt because

00:20:24,950 --> 00:20:32,450
that's a security risk the library that

00:20:29,149 --> 00:20:34,940
MDM crypt extension wraps has not been

00:20:32,450 --> 00:20:40,879
maintained and updated and fixed in

00:20:34,940 --> 00:20:45,019
years deprecating that extension did not

00:20:40,879 --> 00:20:47,720
help raise awareness for the issue so it

00:20:45,019 --> 00:20:50,570
was removed now the code really breaks

00:20:47,720 --> 00:20:52,800
if you try to use encrypt functionality

00:20:50,570 --> 00:20:56,020
with PHP 7 to

00:20:52,800 --> 00:20:59,050
if you have code that uses encrypt and

00:20:56,020 --> 00:21:01,690
you use encrypt for doing cryptography

00:20:59,050 --> 00:21:04,990
cryptography and security related things

00:21:01,690 --> 00:21:07,960
and if you use encrypt you are

00:21:04,990 --> 00:21:10,750
vulnerable to attacks in the underlying

00:21:07,960 --> 00:21:12,520
library the cryptography is broken or

00:21:10,750 --> 00:21:16,810
can be broken depending on how you use

00:21:12,520 --> 00:21:20,200
it so that's why we removed it the only

00:21:16,810 --> 00:21:22,090
other things we removed at least one of

00:21:20,200 --> 00:21:25,600
for one of which we are pretty sure that

00:21:22,090 --> 00:21:28,900
doesn't affect too many people first of

00:21:25,600 --> 00:21:31,540
all in the I don't know 20 plus years

00:21:28,900 --> 00:21:34,540
that PHP has been supported on network

00:21:31,540 --> 00:21:36,490
network we didn't really have that much

00:21:34,540 --> 00:21:39,910
interaction with people who used it on

00:21:36,490 --> 00:21:42,460
network and net fare is no longer

00:21:39,910 --> 00:21:44,500
supported for quite some time and that's

00:21:42,460 --> 00:21:48,370
why we removed the code as part of

00:21:44,500 --> 00:21:50,980
cleanup and also there's not really a

00:21:48,370 --> 00:21:52,720
point in supporting versions of Windows

00:21:50,980 --> 00:21:56,460
that Microsoft doesn't support anymore

00:21:52,720 --> 00:22:00,100
so we removed micro even though specific

00:21:56,460 --> 00:22:08,320
code for Windows for stuff older than

00:22:00,100 --> 00:22:12,360
Windows 7 and Server 2008 in PHP 72 we

00:22:08,320 --> 00:22:12,360
deprecated a couple of more features

00:22:12,600 --> 00:22:20,590
that will be removed in the future

00:22:15,430 --> 00:22:25,120
release probably in PHP 8 and this is

00:22:20,590 --> 00:22:27,100
the the these are the highlights if you

00:22:25,120 --> 00:22:29,230
will of the things that were deprecated

00:22:27,100 --> 00:22:32,230
those are all the deprecations

00:22:29,230 --> 00:22:33,670
on the language level in the core of PHP

00:22:32,230 --> 00:22:38,440
there a couple of the applications and

00:22:33,670 --> 00:22:42,520
extensions like M B string and Posterous

00:22:38,440 --> 00:22:46,210
I think I don't know those are the

00:22:42,520 --> 00:22:49,540
language level duplications and the

00:22:46,210 --> 00:22:52,210
first time I read the term bare words

00:22:49,540 --> 00:22:55,510
unquoted strings I had no idea what that

00:22:52,210 --> 00:22:57,250
was after I realized what it was I

00:22:55,510 --> 00:23:01,060
realize okay of course

00:22:57,250 --> 00:23:02,410
I've known this feature or wouldn't

00:23:01,060 --> 00:23:04,840
really go as far as calling in the

00:23:02,410 --> 00:23:05,200
future but maybe 20 years ago it was an

00:23:04,840 --> 00:23:08,680
in

00:23:05,200 --> 00:23:12,300
idea but or night sounded like a nice

00:23:08,680 --> 00:23:12,300
idea but we shouldn't have done it I

00:23:12,360 --> 00:23:20,080
just didn't know that there was a term

00:23:14,980 --> 00:23:25,210
for it so what does that mean if you use

00:23:20,080 --> 00:23:27,940
a constant that is not declared PHP

00:23:25,210 --> 00:23:30,100
falls back to declaring a new constant

00:23:27,940 --> 00:23:34,150
on the fly that has the name of the

00:23:30,100 --> 00:23:35,220
constant as its value please don't do

00:23:34,150 --> 00:23:42,820
that

00:23:35,220 --> 00:23:44,710
and in PHP 7 1 that is just a notice use

00:23:42,820 --> 00:23:46,000
of undefined constant foo assumed phoom

00:23:44,710 --> 00:23:51,220
blah blah blah

00:23:46,000 --> 00:23:53,190
as of PHP 7 - that was elevated from or

00:23:51,220 --> 00:23:56,230
escalated from a notice to a warning

00:23:53,190 --> 00:23:59,080
with the notice that it's going to be

00:23:56,230 --> 00:24:09,040
removed in a future version of P likely

00:23:59,080 --> 00:24:11,920
PHP 8 the original mechanism for

00:24:09,040 --> 00:24:15,160
autoloading has been deprecated back

00:24:11,920 --> 00:24:18,310
when PHP 5 0 came out the only way to

00:24:15,160 --> 00:24:20,530
have an auto loading mechanism was to

00:24:18,310 --> 00:24:25,510
have a global function that was named

00:24:20,530 --> 00:24:28,210
underscore underscore autoload that was

00:24:25,510 --> 00:24:30,760
very limited because you could only have

00:24:28,210 --> 00:24:34,180
one autoloader and it was really hard to

00:24:30,760 --> 00:24:36,010
chain all the loaders for instance you

00:24:34,180 --> 00:24:38,230
wanted to use a library or a framework

00:24:36,010 --> 00:24:41,350
that came with its own auto loader now

00:24:38,230 --> 00:24:44,770
you had to modify your auto loader to

00:24:41,350 --> 00:24:48,130
chain and delegate to third-party all

00:24:44,770 --> 00:24:52,090
the loaders what was really inconvenient

00:24:48,130 --> 00:24:55,420
to work with and in 57 1 if I remember

00:24:52,090 --> 00:24:58,330
correctly Marcos added SPL auto load

00:24:55,420 --> 00:25:02,950
register which allowed you to register

00:24:58,330 --> 00:25:05,830
more than one auto loader and it did not

00:25:02,950 --> 00:25:08,110
have to be a special name anymore you

00:25:05,830 --> 00:25:11,410
could use anonymous functions later when

00:25:08,110 --> 00:25:14,860
HP v 3 came out and that's basically how

00:25:11,410 --> 00:25:16,780
we do all the loading today mostly you

00:25:14,860 --> 00:25:18,490
don't care about that anyway because the

00:25:16,780 --> 00:25:20,500
auto loader code is generated you

00:25:18,490 --> 00:25:23,890
a tool like PHP autoload builder or

00:25:20,500 --> 00:25:28,420
composer or what have you but the old

00:25:23,890 --> 00:25:33,340
mechanism is still there and that's can

00:25:28,420 --> 00:25:37,300
lead to confusing situations when you

00:25:33,340 --> 00:25:40,630
use an old codebase that use this

00:25:37,300 --> 00:25:42,430
mechanism visiting version of PHP with a

00:25:40,630 --> 00:25:44,170
newer version of PHP and versions of

00:25:42,430 --> 00:25:46,360
components that have their own auto

00:25:44,170 --> 00:25:48,190
loader then you can run into weird

00:25:46,360 --> 00:25:51,970
situation so it's time to get rid of

00:25:48,190 --> 00:25:56,260
that and that's what we started novice

00:25:51,970 --> 00:25:58,990
57 - it's deprecated as at least as far

00:25:56,260 --> 00:26:01,570
as I can see it's not the deprecation

00:25:58,990 --> 00:26:03,460
that gives you a deprecation notice at

00:26:01,570 --> 00:26:07,900
runtime

00:26:03,460 --> 00:26:11,350
it's deprecated in documentation and in

00:26:07,900 --> 00:26:13,990
the change log of PHP 7 - so it has no

00:26:11,350 --> 00:26:15,700
immediate effect but you should take

00:26:13,990 --> 00:26:18,310
this into account prevent one speech

00:26:15,700 --> 00:26:27,640
piayed comes around that won't involve

00:26:18,310 --> 00:26:30,310
will no longer work this should have

00:26:27,640 --> 00:26:34,900
been deprecated back when PHP 5 3 came

00:26:30,310 --> 00:26:38,950
out in 2009 PHP 5 3 introduced anonymous

00:26:34,900 --> 00:26:42,490
functions and closures which were

00:26:38,950 --> 00:26:46,510
possible sort of possible really

00:26:42,490 --> 00:26:48,760
inconvenient and slow and crappy but to

00:26:46,510 --> 00:26:54,580
some degree it was possible before PHP 5

00:26:48,760 --> 00:26:58,330
3 using the arcane bizarre ancient

00:26:54,580 --> 00:27:02,320
create function function which among

00:26:58,330 --> 00:27:04,870
many other flaws only works on strings

00:27:02,320 --> 00:27:08,260
so you give it strings and that's just

00:27:04,870 --> 00:27:10,270
string and you cannot really syntax

00:27:08,260 --> 00:27:13,420
check that during development the IDE

00:27:10,270 --> 00:27:15,820
cannot really look inside there the byte

00:27:13,420 --> 00:27:18,040
code cannot be optimized for that

00:27:15,820 --> 00:27:20,680
because it cannot really be compiled so

00:27:18,040 --> 00:27:22,330
it's a runtime evil thing and if you

00:27:20,680 --> 00:27:24,070
have an error in there you only see it

00:27:22,330 --> 00:27:27,520
at runtime and other compile time it's

00:27:24,070 --> 00:27:29,800
you don't want to use that and if you

00:27:27,520 --> 00:27:31,299
need anonymous function since p35 3 you

00:27:29,800 --> 00:27:34,070
can have them

00:27:31,299 --> 00:27:37,280
natively you don't need that clutch to

00:27:34,070 --> 00:27:39,429
get it working so hopefully nobody uses

00:27:37,280 --> 00:27:39,429
it anymore

00:27:44,320 --> 00:27:50,270
this is the backwards compatibility

00:27:46,060 --> 00:27:52,940
change like I looked at this said yes

00:27:50,270 --> 00:27:55,180
great that this is gone or that this

00:27:52,940 --> 00:28:00,530
will be gone in the foreseeable future

00:27:55,180 --> 00:28:04,330
and I was a hundred percent sure that I

00:28:00,530 --> 00:28:09,620
would not be affected by this personally

00:28:04,330 --> 00:28:12,920
24 hour laters travesty I hadn't had a

00:28:09,620 --> 00:28:16,520
new nightly built of PHP 7 2 and the

00:28:12,920 --> 00:28:20,630
test for PHP unit were failing like half

00:28:16,520 --> 00:28:23,510
of them and I woke up in the morning and

00:28:20,630 --> 00:28:27,230
looked at that and said I didn't do

00:28:23,510 --> 00:28:29,360
anything yesterday why did it work

00:28:27,230 --> 00:28:32,890
yesterday why is not working today and

00:28:29,360 --> 00:28:35,030
look at the output answer is oh hang on

00:28:32,890 --> 00:28:36,860
that was the thing that you were happy

00:28:35,030 --> 00:28:39,460
about yesterday and now it comes back to

00:28:36,860 --> 00:28:44,540
bite you

00:28:39,460 --> 00:28:49,460
unfortunately dealing with each is not

00:28:44,540 --> 00:28:52,700
as easy it's not always as easy as

00:28:49,460 --> 00:28:58,340
replacing it with for each as I had any

00:28:52,700 --> 00:29:01,340
example before this is from a part of

00:28:58,340 --> 00:29:03,590
PHP unit that is probably among the

00:29:01,340 --> 00:29:05,570
oldest code that is stirred in PHP unit

00:29:03,590 --> 00:29:11,300
that was written like I don't know 15

00:29:05,570 --> 00:29:14,740
years ago 16 years ago it wasn't even

00:29:11,300 --> 00:29:19,520
written by me was written by Andre but

00:29:14,740 --> 00:29:21,530
who cares it's it's in my project I'm

00:29:19,520 --> 00:29:24,590
responsible for that so it had to be

00:29:21,530 --> 00:29:26,780
fixed and unfortunately in that case it

00:29:24,590 --> 00:29:30,770
was not as easy as replacing each piece

00:29:26,780 --> 00:29:35,000
for each because that code does some

00:29:30,770 --> 00:29:37,550
really weird modifications into nested

00:29:35,000 --> 00:29:42,170
each things that modify the thing over

00:29:37,550 --> 00:29:46,030
which each runs and after a couple of

00:29:42,170 --> 00:29:49,660
hours of trying to rewrite that code

00:29:46,030 --> 00:29:49,660
without using each

00:29:51,970 --> 00:29:56,170
sorry this for each instead of each I

00:29:54,460 --> 00:29:58,090
just replaced it like this

00:29:56,170 --> 00:29:59,830
I still use current because for some

00:29:58,090 --> 00:30:03,490
reason current has not been deprecated

00:29:59,830 --> 00:30:06,880
only each of course this was the very

00:30:03,490 --> 00:30:09,040
short-term fix that's the one I did

00:30:06,880 --> 00:30:12,820
before before so the first thing was I

00:30:09,040 --> 00:30:14,290
suppressed that thing of course then PHP

00:30:12,820 --> 00:30:15,910
code sniffer started complaining he was

00:30:14,290 --> 00:30:17,290
suppressing something there and the IDE

00:30:15,910 --> 00:30:18,730
complained hey you're doing something

00:30:17,290 --> 00:30:21,550
that violates the coding guidelines yes

00:30:18,730 --> 00:30:24,490
I know but I don't want Travis to yell

00:30:21,550 --> 00:30:28,690
at me while other pull requests are

00:30:24,490 --> 00:30:32,230
coming in so took a little bit of time

00:30:28,690 --> 00:30:35,560
and eventually someone sent me a pull

00:30:32,230 --> 00:30:40,060
request that did this and it fix things

00:30:35,560 --> 00:30:44,080
and it still uses current and next and

00:30:40,060 --> 00:30:45,790
reset and so on and hopefully so my goal

00:30:44,080 --> 00:30:49,480
is to completely get rid of that class

00:30:45,790 --> 00:30:57,460
at some point very soon then I don't

00:30:49,480 --> 00:30:59,920
need to fix it but I probably in nine

00:30:57,460 --> 00:31:02,950
out of ten cases you have something like

00:30:59,920 --> 00:31:05,200
this like this is how if I have seen

00:31:02,950 --> 00:31:07,510
each and will be used in the wild that's

00:31:05,200 --> 00:31:11,170
usually how I've seen it that's the old

00:31:07,510 --> 00:31:14,140
PHP recent acts before PHP for added for

00:31:11,170 --> 00:31:17,190
each to iterate over arrays which was

00:31:14,140 --> 00:31:19,300
then later expanded to also cover

00:31:17,190 --> 00:31:22,240
objects that implement the iterator

00:31:19,300 --> 00:31:24,160
interface you just wild list key comma

00:31:22,240 --> 00:31:28,270
Val equals each and then you could

00:31:24,160 --> 00:31:33,400
iterate over that if you've never seen

00:31:28,270 --> 00:31:40,540
53 code good for you bonus points if you

00:31:33,400 --> 00:31:43,810
have never written code like that when

00:31:40,540 --> 00:31:45,670
this was deprecated I had another what

00:31:43,810 --> 00:31:48,570
the hell moment because I didn't know

00:31:45,670 --> 00:31:48,570
that this was possible

00:31:50,430 --> 00:31:58,020
the unset cast has been removed I have

00:31:55,530 --> 00:32:04,260
no idea why you would want to use that

00:31:58,020 --> 00:32:08,490
syntax to unset X now that raises the

00:32:04,260 --> 00:32:11,880
deprecation notice it's really bizarre

00:32:08,490 --> 00:32:17,870
and I have seen it never used in the

00:32:11,880 --> 00:32:17,870
wild or I have and I forgot about it

00:32:23,660 --> 00:32:32,400
there are also new features not just

00:32:29,820 --> 00:32:39,840
breaking things but also new things new

00:32:32,400 --> 00:32:41,580
shiny things but not a lot of them like

00:32:39,840 --> 00:32:43,980
the high of course of course I'm only

00:32:41,580 --> 00:32:46,620
focusing on the language level various

00:32:43,980 --> 00:32:51,330
extensions have new functions and new

00:32:46,620 --> 00:32:53,070
functionality and so on on the language

00:32:51,330 --> 00:32:56,940
level the biggest change is the

00:32:53,070 --> 00:33:01,110
introduction of the object type you can

00:32:56,940 --> 00:33:06,780
now use the object keyword in type

00:33:01,110 --> 00:33:09,150
declarations which also means that you

00:33:06,780 --> 00:33:15,660
could no longer can have a class named

00:33:09,150 --> 00:33:17,940
object it wasn't you know it was if I

00:33:15,660 --> 00:33:20,000
remember correctly it was not reserved

00:33:17,940 --> 00:33:23,340
in code it was reserved in documentation

00:33:20,000 --> 00:33:25,230
like don't blame us if at some point in

00:33:23,340 --> 00:33:29,690
the future we decides to make object a

00:33:25,230 --> 00:33:29,690
reserved word you have been warned

00:33:30,650 --> 00:33:35,670
so this is allows you to say in in in

00:33:34,050 --> 00:33:38,640
the signature of a functional method I

00:33:35,670 --> 00:33:40,080
want an object any object I don't really

00:33:38,640 --> 00:33:41,970
care if it's implements a specific

00:33:40,080 --> 00:33:47,820
interface or is of a specific type I

00:33:41,970 --> 00:33:51,679
just want an object and that is not

00:33:47,820 --> 00:33:54,300
really something that you want to use in

00:33:51,679 --> 00:33:57,540
application specific code it's something

00:33:54,300 --> 00:34:01,020
that makes sense in a couple of cases

00:33:57,540 --> 00:34:03,060
when you write generic libraries for

00:34:01,020 --> 00:34:03,610
instance like a component that does

00:34:03,060 --> 00:34:05,950
something

00:34:03,610 --> 00:34:08,679
on objects on object graphs and object

00:34:05,950 --> 00:34:10,560
structures and wants to ensure encode

00:34:08,679 --> 00:34:15,609
that what you pass to it as an argument

00:34:10,560 --> 00:34:18,190
really is an object without having to

00:34:15,609 --> 00:34:22,570
manually use its object inside the body

00:34:18,190 --> 00:34:24,550
of the method so if you call such a

00:34:22,570 --> 00:34:25,750
functional method that says I want an

00:34:24,550 --> 00:34:28,419
object with something that is not an

00:34:25,750 --> 00:34:34,720
object you get a type error which is

00:34:28,419 --> 00:34:37,109
what you would expect I guess when it

00:34:34,720 --> 00:34:39,879
comes to inheritance we need to take

00:34:37,109 --> 00:34:42,040
covariance and contravariance into

00:34:39,879 --> 00:34:45,510
account which just means that if you

00:34:42,040 --> 00:34:48,609
have a parent class that has a method

00:34:45,510 --> 00:34:52,510
that one's a specific foo

00:34:48,609 --> 00:34:56,200
a child class can extend that and make

00:34:52,510 --> 00:34:58,119
that type replace that specific type

00:34:56,200 --> 00:35:01,960
with the generic object type and that's

00:34:58,119 --> 00:35:05,730
allowed because it still works with a

00:35:01,960 --> 00:35:11,680
fool but it also works with other things

00:35:05,730 --> 00:35:14,410
and the same just in reverse order when

00:35:11,680 --> 00:35:16,720
you think about it the covariance for

00:35:14,410 --> 00:35:18,700
the return type declarations you have a

00:35:16,720 --> 00:35:23,859
parent class that says I return

00:35:18,700 --> 00:35:27,160
something of type object the child class

00:35:23,859 --> 00:35:31,150
can get more specific with the return

00:35:27,160 --> 00:35:35,410
type again the thing that it returns is

00:35:31,150 --> 00:35:42,130
also an object so the contract of the

00:35:35,410 --> 00:35:44,380
parent class still holds you're not

00:35:42,130 --> 00:35:46,840
allowed to do that the other way around

00:35:44,380 --> 00:35:48,670
you have a parent class that says I want

00:35:46,840 --> 00:35:50,890
an object any object just gives me an

00:35:48,670 --> 00:35:52,840
object and then you have a child class

00:35:50,890 --> 00:36:00,060
that says I only work with a specific

00:35:52,840 --> 00:36:04,420
object that reduces the argument range

00:36:00,060 --> 00:36:07,260
that's not allowed and then you get a

00:36:04,420 --> 00:36:07,260
warning

00:36:09,210 --> 00:36:15,680
not sure I agree with the fact that it's

00:36:11,880 --> 00:36:15,680
just a warning it should be an error but

00:36:16,099 --> 00:36:22,259
sometimes PHP is very lenient and only

00:36:20,730 --> 00:36:26,640
tries to nudge you in the right

00:36:22,259 --> 00:36:29,460
direction with a warning it is now

00:36:26,640 --> 00:36:31,680
possible to remove argument type

00:36:29,460 --> 00:36:34,009
annotations when overriding inherited

00:36:31,680 --> 00:36:36,420
methods

00:36:34,009 --> 00:36:38,549
following the same logic that we had for

00:36:36,420 --> 00:36:40,019
the object type so for instance if we

00:36:38,549 --> 00:36:42,990
have a parent class that says in a

00:36:40,019 --> 00:36:45,630
method I want an integer then a child

00:36:42,990 --> 00:36:48,539
class that overrides this can say I work

00:36:45,630 --> 00:36:53,420
with any type and that's okay because it

00:36:48,539 --> 00:36:56,579
still also work works with an int and

00:36:53,420 --> 00:37:08,819
prior to push me seven - that was a

00:36:56,579 --> 00:37:12,329
fatal error aside from the language

00:37:08,819 --> 00:37:18,119
itself where we have a very now have the

00:37:12,329 --> 00:37:21,480
object type and the parameter type

00:37:18,119 --> 00:37:23,849
widening that I just showed probably the

00:37:21,480 --> 00:37:25,739
biggest change in for our biggest new

00:37:23,849 --> 00:37:31,400
functionality that we got is ready to

00:37:25,739 --> 00:37:34,440
cryptography and security the password

00:37:31,400 --> 00:37:39,980
hashing API ID password underscore

00:37:34,440 --> 00:37:45,869
functions they now support the argon - I

00:37:39,980 --> 00:37:48,960
hash algorithm which recently won a hell

00:37:45,869 --> 00:37:50,460
- Inge algorithm competition so that Meg

00:37:48,960 --> 00:37:55,559
makes it very good I guess

00:37:50,460 --> 00:37:58,589
I dunno I'm not really into cryptography

00:37:55,559 --> 00:38:00,809
and security that would be something

00:37:58,589 --> 00:38:03,029
that Arnie could talk about for at least

00:38:00,809 --> 00:38:06,119
an hour or so sorry

00:38:03,029 --> 00:38:09,569
I'm not honor and the other major thing

00:38:06,119 --> 00:38:12,019
that happened what PHP had been lacking

00:38:09,569 --> 00:38:15,029
for quite awhile was a dedicated

00:38:12,019 --> 00:38:18,239
extension that deals with cryptography

00:38:15,029 --> 00:38:20,849
functionality talked about earlier M

00:38:18,239 --> 00:38:22,440
crypts no longer maintained then even

00:38:20,849 --> 00:38:24,450
the library

00:38:22,440 --> 00:38:29,400
that it uses lip em crypt has not has

00:38:24,450 --> 00:38:32,730
been unmaintained for quite a while but

00:38:29,400 --> 00:38:33,900
in the open source universe over the

00:38:32,730 --> 00:38:38,010
last couple of years

00:38:33,900 --> 00:38:41,930
lips sodium established itself as the

00:38:38,010 --> 00:38:44,579
go-to library for cryptography stuff

00:38:41,930 --> 00:38:47,579
this convenient api's and good

00:38:44,579 --> 00:38:52,770
implementations and we offer various

00:38:47,579 --> 00:38:56,310
algorithms and we now have an extension

00:38:52,770 --> 00:38:57,240
that wraps this library which provides a

00:38:56,310 --> 00:39:00,030
modern easy-to-use

00:38:57,240 --> 00:39:06,329
api for encryption decryption signatures

00:39:00,030 --> 00:39:08,339
password hashing and more so if you need

00:39:06,329 --> 00:39:10,829
to do something like that if you need to

00:39:08,339 --> 00:39:13,440
migrate code away from M crypt this

00:39:10,829 --> 00:39:15,750
should be your target some of the stuff

00:39:13,440 --> 00:39:18,119
that lip sodium can do you can do with

00:39:15,750 --> 00:39:27,119
open SSL and pH peace of methacel

00:39:18,119 --> 00:39:30,569
extension yes not really a feature but

00:39:27,119 --> 00:39:34,170
performance is again an issue in in in a

00:39:30,569 --> 00:39:36,119
very positive way where PHP seven one

00:39:34,170 --> 00:39:44,250
didn't really get much faster than PHP

00:39:36,119 --> 00:39:46,530
seven zero PHP seven to got faster and I

00:39:44,250 --> 00:39:48,359
have good news for you in case you're

00:39:46,530 --> 00:39:51,599
interesting interested in reading

00:39:48,359 --> 00:39:53,910
academic papers that explain by PHP 72

00:39:51,599 --> 00:39:59,240
is faster and by PHP 73 has the

00:39:53,910 --> 00:40:02,520
potential to be even faster than PHP 72

00:39:59,240 --> 00:40:05,520
the people responsible for PHP seven

00:40:02,520 --> 00:40:06,930
being a lot faster than PHP five

00:40:05,520 --> 00:40:10,040
remember the benchmarks from the

00:40:06,930 --> 00:40:12,589
beginning two to three times faster

00:40:10,040 --> 00:40:13,980
those performance improvements are

00:40:12,589 --> 00:40:16,710
mostly

00:40:13,980 --> 00:40:19,980
almost excused exclusively due to the

00:40:16,710 --> 00:40:24,630
work done by Nikita Popov Dimitri's dog

00:40:19,980 --> 00:40:27,300
of an engine and Dimitri and Nikita have

00:40:24,630 --> 00:40:29,910
started to go to academic conferences on

00:40:27,300 --> 00:40:32,420
compiler design and language runtimes

00:40:29,910 --> 00:40:35,369
and share with the academic community

00:40:32,420 --> 00:40:36,000
the types of optimizations and

00:40:35,369 --> 00:40:38,750
implemented

00:40:36,000 --> 00:40:42,900
techniques they have applied in PHP 7-0

00:40:38,750 --> 00:40:44,670
what they did in PHP 7 one was or 4:57

00:40:42,900 --> 00:40:47,420
one was lay the groundwork for an

00:40:44,670 --> 00:40:50,400
optimization framework of PHP bytecode

00:40:47,420 --> 00:40:53,940
but not that many optimizations were

00:40:50,400 --> 00:40:58,140
implemented there in PHP 72 we have the

00:40:53,940 --> 00:41:01,140
first optimizations that work on byte

00:40:58,140 --> 00:41:04,530
code that use this new framework and

00:41:01,140 --> 00:41:06,570
they are and they are not stopping

00:41:04,530 --> 00:41:09,750
they keep optimizing things and the

00:41:06,570 --> 00:41:11,700
latest optimizations they do they come

00:41:09,750 --> 00:41:13,950
next year with speech p73 because it's

00:41:11,700 --> 00:41:17,369
too late to get that into PHP 7/2 and

00:41:13,950 --> 00:41:20,280
and stabilize it quite an interesting

00:41:17,369 --> 00:41:26,760
paper if you like computer science

00:41:20,280 --> 00:41:29,609
papers yeah this is a benchmark that I

00:41:26,760 --> 00:41:33,510
did I think last week or so with last

00:41:29,609 --> 00:41:36,060
week's nightly build of PHP 7/2 is and I

00:41:33,510 --> 00:41:38,880
came to about 8 percent faster visibly

00:41:36,060 --> 00:41:44,030
per unit test fee that had 44,000 unit

00:41:38,880 --> 00:41:48,320
tests no I own you can get and that was

00:41:44,030 --> 00:41:52,920
that was with out the optimizations

00:41:48,320 --> 00:41:56,490
enabled than just other stuff that you

00:41:52,920 --> 00:41:58,770
get always without turn on the bytecode

00:41:56,490 --> 00:42:01,740
cash-on-cash and turning on the

00:41:58,770 --> 00:42:05,430
optimizer for some reason I was unable

00:42:01,740 --> 00:42:06,690
to turn on the optimizations on the

00:42:05,430 --> 00:42:09,810
command line which is where peer-to-peer

00:42:06,690 --> 00:42:11,670
inference is something I plan on

00:42:09,810 --> 00:42:19,800
figuring out with the help of Dmitriy at

00:42:11,670 --> 00:42:21,900
some point okay we've talked about stuff

00:42:19,800 --> 00:42:24,510
that has the potential of breaking

00:42:21,900 --> 00:42:28,070
things hopefully it does not break

00:42:24,510 --> 00:42:32,460
anything for you because you never wrote

00:42:28,070 --> 00:42:34,859
weird confusing code like that do just

00:42:32,460 --> 00:42:36,930
have a favor and write boring code write

00:42:34,859 --> 00:42:40,109
code that doesn't use really bizarre

00:42:36,930 --> 00:42:43,410
syntax constructs talk about new

00:42:40,109 --> 00:42:45,800
features and I told you that PHP 7/2 is

00:42:43,410 --> 00:42:45,800
faster

00:42:46,870 --> 00:42:58,010
if you need more arguments for going

00:42:53,300 --> 00:43:00,500
from PHP 5 to PHP 7 the time for those

00:42:58,010 --> 00:43:03,650
arguments is now because time for PHP 5

00:43:00,500 --> 00:43:07,220
is running out sorry to be the bearer of

00:43:03,650 --> 00:43:08,930
bad news which i think is good news

00:43:07,220 --> 00:43:11,240
because time in life is too short for

00:43:08,930 --> 00:43:13,340
all software but that that's that that's

00:43:11,240 --> 00:43:18,650
but that's only when I'm varying my

00:43:13,340 --> 00:43:21,230
open-source head and ok so PHP 5 was

00:43:18,650 --> 00:43:25,640
great but it's time to move on and a lot

00:43:21,230 --> 00:43:27,980
of big popular major PHP based

00:43:25,640 --> 00:43:33,740
open-source projects have started to

00:43:27,980 --> 00:43:36,280
move on latest version of Neos which

00:43:33,740 --> 00:43:40,460
came out in January requires peach p7

00:43:36,280 --> 00:43:43,640
PHP unit 6 which came out in February

00:43:40,460 --> 00:43:46,970
requires PHP 7 latest version of type

00:43:43,640 --> 00:43:50,690
was three type of 3 requires PHP 7 PHP

00:43:46,970 --> 00:43:54,350
spec requires PHP 7 laravel requires

00:43:50,690 --> 00:43:56,990
peach b7 Symphony 4 which is scheduled

00:43:54,350 --> 00:44:00,530
for release in next month requires peach

00:43:56,990 --> 00:44:02,150
p71 they skip a PHP 7 0 and there's a

00:44:00,530 --> 00:44:04,450
reason for that that I'll show you in

00:44:02,150 --> 00:44:04,450
just a bit

00:44:05,050 --> 00:44:12,650
PHP unit 7 is planned for next February

00:44:08,720 --> 00:44:16,130
it will require peach p71 PHP unit AIDS

00:44:12,650 --> 00:44:19,310
planned for 2019 will require PHP 7 2

00:44:16,130 --> 00:44:24,290
and so on you get the idea

00:44:19,310 --> 00:44:26,090
the wordings on the PHP community has

00:44:24,290 --> 00:44:31,310
learned from a big mistake

00:44:26,090 --> 00:44:34,400
from the PHP 4 255 migration when PHP 5

00:44:31,310 --> 00:44:37,130
was released we did not announce an

00:44:34,400 --> 00:44:41,120
end-of-life date from hitch before it

00:44:37,130 --> 00:44:41,570
took us three years to say ok a year

00:44:41,120 --> 00:44:45,890
from now

00:44:41,570 --> 00:44:48,710
we dropped support for page before that

00:44:45,890 --> 00:44:50,750
no longer happens we learn from that PHP

00:44:48,710 --> 00:44:53,240
has a steady release cycle with a new

00:44:50,750 --> 00:44:57,030
minor version every year

00:44:53,240 --> 00:44:58,920
with clear rules on how long that's

00:44:57,030 --> 00:45:04,080
going to be supported so you can plan

00:44:58,920 --> 00:45:07,380
for that and other projects from the PHP

00:45:04,080 --> 00:45:09,780
ecosystem now piggyback on that support

00:45:07,380 --> 00:45:12,030
lifecycle and say things like people PHP

00:45:09,780 --> 00:45:13,830
unit does speech for unit does the unit

00:45:12,030 --> 00:45:16,830
says every year in February as a new

00:45:13,830 --> 00:45:18,420
major version that drops support for

00:45:16,830 --> 00:45:21,390
versions of PHP that are no longer

00:45:18,420 --> 00:45:25,980
supported by the PHP project so this is

00:45:21,390 --> 00:45:28,970
a timeline of PHP 5 was originally

00:45:25,980 --> 00:45:32,340
released in July 2004

00:45:28,970 --> 00:45:33,860
some people say PHP 5 0 was an alpha

00:45:32,340 --> 00:45:38,370
release

00:45:33,860 --> 00:45:40,050
php5 one was a beta PHP 5 2 was the

00:45:38,370 --> 00:45:43,620
first stable release but it was missing

00:45:40,050 --> 00:45:47,910
namespaces which is why PHP 5 3 became

00:45:43,620 --> 00:45:52,950
so popular and then the PHP project got

00:45:47,910 --> 00:45:57,150
sidetracked with PP 6 the thing that

00:45:52,950 --> 00:45:59,370
never was and never will be even if

00:45:57,150 --> 00:46:01,280
certain book publishers try to tell you

00:45:59,370 --> 00:46:04,140
something else

00:46:01,280 --> 00:46:08,040
one of the best-selling PHP box is still

00:46:04,140 --> 00:46:11,670
PHP 6 and MySQL 6 there is no PHP 6

00:46:08,040 --> 00:46:18,660
there is no MySQL 6 but that book is

00:46:11,670 --> 00:46:22,110
still selling so but ever since

00:46:18,660 --> 00:46:25,250
PHP 55 we are on the steady release

00:46:22,110 --> 00:46:29,550
cycle and that works and it's reliable

00:46:25,250 --> 00:46:32,250
there's a website or a page on php.net

00:46:29,550 --> 00:46:37,290
where you can look up what the currently

00:46:32,250 --> 00:46:39,900
supported versions of PHP are if the

00:46:37,290 --> 00:46:42,480
version of PHP you're using is not here

00:46:39,900 --> 00:46:48,480
or if it is read then you are using a

00:46:42,480 --> 00:46:51,990
version of PHP that is dead sorry if

00:46:48,480 --> 00:46:54,510
it's orange then it is in security

00:46:51,990 --> 00:46:56,580
support which means it gets critical

00:46:54,510 --> 00:47:00,930
security issues fixed but no bug fixes

00:46:56,580 --> 00:47:02,850
if it's green that means it is actively

00:47:00,930 --> 00:47:05,390
supported bugs are regularly fixed

00:47:02,850 --> 00:47:07,980
security issues are fixed

00:47:05,390 --> 00:47:09,750
so if you still use Peachtree 55 or

00:47:07,980 --> 00:47:13,920
older then you use a version of PHP that

00:47:09,750 --> 00:47:15,810
already reached its end of life if you

00:47:13,920 --> 00:47:17,610
still use PHP five six then you use a

00:47:15,810 --> 00:47:22,410
version of PHP that will reach its end

00:47:17,610 --> 00:47:26,790
of life on December 31st 2018 that is

00:47:22,410 --> 00:47:31,980
the end of next year you have one more

00:47:26,790 --> 00:47:36,540
year to get away from PHP five before

00:47:31,980 --> 00:47:38,310
it's no longer supported if you use PHP

00:47:36,540 --> 00:47:40,080
seven zero then you use a version of PHP

00:47:38,310 --> 00:47:46,410
that will reach its end of active

00:47:40,080 --> 00:47:47,220
support this December because this

00:47:46,410 --> 00:47:49,710
December

00:47:47,220 --> 00:47:53,220
PHP seven has been out for two years

00:47:49,710 --> 00:47:56,370
each new release of PHP against two

00:47:53,220 --> 00:47:59,640
years of active support two years of bug

00:47:56,370 --> 00:48:04,080
fixes and then one additional year of

00:47:59,640 --> 00:48:06,090
critical security fixes if you need to

00:48:04,080 --> 00:48:10,410
see this different with some bold and

00:48:06,090 --> 00:48:12,290
some font magic here you go if you need

00:48:10,410 --> 00:48:16,950
to see it different with less words

00:48:12,290 --> 00:48:21,270
there you go sorry about the repetition

00:48:16,950 --> 00:48:23,940
but this is important you want to be on

00:48:21,270 --> 00:48:28,500
the version of PHP that is actively

00:48:23,940 --> 00:48:31,530
supported by the PHP project yes you can

00:48:28,500 --> 00:48:36,990
pay operating system vendors or other

00:48:31,530 --> 00:48:38,670
companies a lot of money to get support

00:48:36,990 --> 00:48:42,890
for PHP five six for the next ten years

00:48:38,670 --> 00:48:50,700
but that doesn't really make you happy

00:48:42,890 --> 00:48:55,170
at least it shouldn't that's all that I

00:48:50,700 --> 00:48:58,440
need that I know right now about PHP 17

00:48:55,170 --> 00:49:00,660
that I think you should know we have a

00:48:58,440 --> 00:49:07,140
couple of minutes left for questions if

00:49:00,660 --> 00:49:11,480
there are any - only for questions

00:49:07,140 --> 00:49:11,480
everybody needs coffee or fresh air

00:49:14,900 --> 00:49:17,900
yes

00:49:29,620 --> 00:49:36,380
mm-hmm so question was why do I want to

00:49:34,580 --> 00:49:39,590
get rid of the built-in functions

00:49:36,380 --> 00:49:43,760
current and next when the same naming

00:49:39,590 --> 00:49:45,470
holds true for iterators yeah you're

00:49:43,760 --> 00:49:49,420
probably correct maybe I do not want to

00:49:45,470 --> 00:49:52,760
get rid of that it's just that's

00:49:49,420 --> 00:49:55,430
conceptually on the internal side of

00:49:52,760 --> 00:49:58,490
things of PHP a current and next are

00:49:55,430 --> 00:50:03,380
closely related to the two each

00:49:58,490 --> 00:50:05,450
and maybe it's just because I already

00:50:03,380 --> 00:50:07,160
worked with those functions back in PHP

00:50:05,450 --> 00:50:09,980
3 even we didn't have for each and I'm

00:50:07,160 --> 00:50:11,810
so used to using them together so to me

00:50:09,980 --> 00:50:14,600
it's conceptually the same thing and

00:50:11,810 --> 00:50:16,700
when one is deprecated then you don't

00:50:14,600 --> 00:50:19,840
really need the others anymore maybe

00:50:16,700 --> 00:50:21,950
that feeling is wrong I don't know

00:50:19,840 --> 00:50:29,740
there's probably a reason why they were

00:50:21,950 --> 00:50:29,740
not deprecated yes other questions

00:50:33,230 --> 00:50:36,980
okay then enjoy your coffee break thank

00:50:36,240 --> 00:50:38,280
you

00:50:36,980 --> 00:50:48,599
[Applause]

00:50:38,280 --> 00:50:48,599

YouTube URL: https://www.youtube.com/watch?v=od19SMYxRZQ


