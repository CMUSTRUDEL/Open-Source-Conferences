Title: Creating Enterprise Web Applications with Node.js | Sebastian Springer | IPC Spring 2018
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2018
Description: 
	Sebastian Springer (MaibornWolff GmbH): Node.js is a lightweight but yet capable platform for creating powerful web applications. The core of Node.js is kept small and restricted to a limited functionality that is extended by a vast ecosystem. With the right combination of packages you are able to build full-featured web applications. There is nearly no limit in features starting with simple problems such as authentication or logging over web interfaces with REST or GraphQL to a whole application based on a microservices architecture. In this talk I will introduce you to some commonly used packages and show you how to use them by example.
Captions: 
	00:00:05,600 --> 00:00:13,679
hello everyone so I'm here to tell you

00:00:10,650 --> 00:00:16,440
something about nodejs and I put

00:00:13,679 --> 00:00:21,449
Enterprise in the title so I get picked

00:00:16,440 --> 00:00:27,420
for this conference so I'm going to tell

00:00:21,449 --> 00:00:31,189
you some lessons learned we learned over

00:00:27,420 --> 00:00:34,430
the last few years in developing node.js

00:00:31,189 --> 00:00:37,920
applications for bigger companies and

00:00:34,430 --> 00:00:42,059
yes we have some node.js applications

00:00:37,920 --> 00:00:44,789
run in production they are web

00:00:42,059 --> 00:00:48,590
applications so we implemented a web

00:00:44,789 --> 00:00:52,140
server in Noches but we also wrote some

00:00:48,590 --> 00:00:56,070
command-line tools for our customers so

00:00:52,140 --> 00:00:59,730
you can use node.js in every environment

00:00:56,070 --> 00:01:05,850
you want to we have node running in

00:00:59,730 --> 00:01:10,580
public web services or company internal

00:01:05,850 --> 00:01:14,010
services so it's scaling pretty good

00:01:10,580 --> 00:01:18,020
yeah that's me my name is Sebastian I'm

00:01:14,010 --> 00:01:21,180
from Munich I work at a company that is

00:01:18,020 --> 00:01:24,830
primarily focused on Java development

00:01:21,180 --> 00:01:29,579
but we're building up a node.js

00:01:24,830 --> 00:01:35,100
department and yeah we're doing so far

00:01:29,579 --> 00:01:37,950
pretty good recently I talked to some of

00:01:35,100 --> 00:01:40,920
my colleagues which are big Java

00:01:37,950 --> 00:01:45,090
developers and we talked about no chance

00:01:40,920 --> 00:01:47,000
and they told told me so yeah yeah no

00:01:45,090 --> 00:01:49,710
J's is a funny thing and you can do

00:01:47,000 --> 00:01:54,090
funny stuff with it but the main problem

00:01:49,710 --> 00:01:58,619
is it's JavaScript and if you think of

00:01:54,090 --> 00:02:01,649
JavaScript most of the people think oh

00:01:58,619 --> 00:02:05,750
that's a jungle you can't do enterprise

00:02:01,649 --> 00:02:08,700
applications beside some fancy front-end

00:02:05,750 --> 00:02:12,720
we prove them wrong

00:02:08,700 --> 00:02:16,590
so I'm showing you a way through the

00:02:12,720 --> 00:02:20,430
JavaScript jungle with no J's and I'm

00:02:16,590 --> 00:02:23,959
going to tell you how we usually start

00:02:20,430 --> 00:02:28,050
our projects which tools we are using

00:02:23,959 --> 00:02:30,120
which best practices are coming in handy

00:02:28,050 --> 00:02:33,450
when it comes to developing bigger

00:02:30,120 --> 00:02:36,720
applications and I'll give you a short

00:02:33,450 --> 00:02:40,819
short overview over our development

00:02:36,720 --> 00:02:45,000
process and hey it's time to celebrate

00:02:40,819 --> 00:02:49,680
no chess has reached double digits in

00:02:45,000 --> 00:02:53,880
version numbering and it was a long hard

00:02:49,680 --> 00:02:58,049
way to go but they are finally there and

00:02:53,880 --> 00:03:01,620
the main reason is they've got a release

00:02:58,049 --> 00:03:05,400
schedule in the first years of nodejs

00:03:01,620 --> 00:03:13,310
they stuck below zero and you can see it

00:03:05,400 --> 00:03:16,410
their version 0.10 and 0.12 lasted from

00:03:13,310 --> 00:03:17,850
2009 the year of the beginning of the

00:03:16,410 --> 00:03:23,730
development of nodejs

00:03:17,850 --> 00:03:28,230
until the initial released 2015 and then

00:03:23,730 --> 00:03:31,410
the community broke into two pieces the

00:03:28,230 --> 00:03:34,260
one which continued the nodejs

00:03:31,410 --> 00:03:38,730
development and the other one who worked

00:03:34,260 --> 00:03:42,989
the project into a new project named IO

00:03:38,730 --> 00:03:44,970
rjs and suddenly there came speed into

00:03:42,989 --> 00:03:47,970
the development of the platform and you

00:03:44,970 --> 00:03:52,079
can see it here no chess jumped from

00:03:47,970 --> 00:03:55,470
zero dot something to version 4 and

00:03:52,079 --> 00:03:59,850
that's because of the development of IOT

00:03:55,470 --> 00:04:02,400
is they reached version 1 pretty quickly

00:03:59,850 --> 00:04:07,290
and they continued the the release

00:04:02,400 --> 00:04:12,560
workflow and they did a release schedule

00:04:07,290 --> 00:04:16,380
so they released two times a year and

00:04:12,560 --> 00:04:19,760
this step was pretty important because

00:04:16,380 --> 00:04:21,269
you don't want to have 0 dot something

00:04:19,760 --> 00:04:26,400
software in your

00:04:21,269 --> 00:04:31,759
production environment so with version 4

00:04:26,400 --> 00:04:36,199
you can say no chest grew up and with

00:04:31,759 --> 00:04:39,930
version 4 they did a release schedule

00:04:36,199 --> 00:04:43,110
they release major versions wants half a

00:04:39,930 --> 00:04:46,139
year and they introduced something

00:04:43,110 --> 00:04:48,990
called long-term support versions which

00:04:46,139 --> 00:04:52,229
are supported over a certain period of

00:04:48,990 --> 00:04:59,250
time with performance updates and

00:04:52,229 --> 00:05:02,400
security fixes and a usual version runs

00:04:59,250 --> 00:05:06,720
half a year and the even-numbered

00:05:02,400 --> 00:05:10,139
versions then switch into the long-term

00:05:06,720 --> 00:05:13,440
support of version which lasts one year

00:05:10,139 --> 00:05:17,520
and then they are continued 18 further

00:05:13,440 --> 00:05:20,280
month with security updates and minor

00:05:17,520 --> 00:05:22,979
fixes so you have plenty of time to

00:05:20,280 --> 00:05:25,289
stick with a certain version and then

00:05:22,979 --> 00:05:28,409
upgrade to the next long-term support

00:05:25,289 --> 00:05:32,810
version and develop your application

00:05:28,409 --> 00:05:37,830
further so that's for the stability and

00:05:32,810 --> 00:05:40,500
most of the bigger NPM packages also

00:05:37,830 --> 00:05:43,740
stick with the node.js release cycle or

00:05:40,500 --> 00:05:44,250
at least adapt the major versions of

00:05:43,740 --> 00:05:49,949
node.js

00:05:44,250 --> 00:05:52,639
so it's pretty okay to use major NPM

00:05:49,949 --> 00:05:56,310
packages some of them I'll introduce

00:05:52,639 --> 00:05:59,569
today and if you have any questions just

00:05:56,310 --> 00:06:03,900
contact me later on I'll tell you about

00:05:59,569 --> 00:06:06,080
further packages you can use so first

00:06:03,900 --> 00:06:10,110
step how to start a project and that's

00:06:06,080 --> 00:06:14,039
pretty easy with node.js because you

00:06:10,110 --> 00:06:16,860
have some resistant the first command

00:06:14,039 --> 00:06:19,259
you should issue is NPM in it which

00:06:16,860 --> 00:06:22,259
creates the package JSON for you and

00:06:19,259 --> 00:06:25,199
that's the entrance into your

00:06:22,259 --> 00:06:28,080
application so if you have a look at any

00:06:25,199 --> 00:06:30,649
node.js application search for a package

00:06:28,080 --> 00:06:35,279
Jason and read it through

00:06:30,649 --> 00:06:38,009
you got some meter detail

00:06:35,279 --> 00:06:41,039
such as the application name or the

00:06:38,009 --> 00:06:43,769
library name the current version number

00:06:41,039 --> 00:06:46,619
a short description in my case no

00:06:43,769 --> 00:06:49,739
description and you have certain flags

00:06:46,619 --> 00:06:53,249
you have scripts and stuff like that so

00:06:49,739 --> 00:06:56,639
it's very important information about

00:06:53,249 --> 00:07:02,339
your application and you can see it as

00:06:56,639 --> 00:07:06,329
an overview over your application a very

00:07:02,339 --> 00:07:09,809
handy tool is the NPM script which is

00:07:06,329 --> 00:07:12,360
basically just the script section in

00:07:09,809 --> 00:07:16,110
your package Jason and you consider them

00:07:12,360 --> 00:07:20,219
as some small shell scripts you can

00:07:16,110 --> 00:07:23,429
execute so for example you can run NPM

00:07:20,219 --> 00:07:25,979
start which usually starched your

00:07:23,429 --> 00:07:29,099
application and you don't have to

00:07:25,979 --> 00:07:32,489
remember any command-line options and

00:07:29,099 --> 00:07:36,689
stuff like that just type NPM start and

00:07:32,489 --> 00:07:39,269
your application starts NPM test runs

00:07:36,689 --> 00:07:41,759
your tests and yes you should have tests

00:07:39,269 --> 00:07:46,229
for your node.js application but we will

00:07:41,759 --> 00:07:49,919
get to that topic later on and you have

00:07:46,229 --> 00:07:54,839
a couple of default scripts so start

00:07:49,919 --> 00:07:56,879
test stop restart are the default

00:07:54,839 --> 00:08:01,349
scripts and you can run them just by

00:07:56,879 --> 00:08:04,110
typing npm script name if you have more

00:08:01,349 --> 00:08:07,409
scripts in your package jason for

00:08:04,110 --> 00:08:11,579
example the watch script or the build

00:08:07,409 --> 00:08:13,169
script you have to run npm run and then

00:08:11,579 --> 00:08:18,569
the script name because they are not the

00:08:13,169 --> 00:08:21,299
default scripts but customized ones yeah

00:08:18,569 --> 00:08:23,969
and that's it for the script so you can

00:08:21,299 --> 00:08:26,729
consider them as an addition to your

00:08:23,969 --> 00:08:29,039
build process or a simplification of

00:08:26,729 --> 00:08:31,589
your build process they are not

00:08:29,039 --> 00:08:35,399
completely replacing your build process

00:08:31,589 --> 00:08:39,689
so please don't try to build your

00:08:35,399 --> 00:08:42,360
complete build process in your npm in

00:08:39,689 --> 00:08:45,449
your package.json file because you can't

00:08:42,360 --> 00:08:48,209
use any comments so you can't describe

00:08:45,449 --> 00:08:50,879
your build process

00:08:48,209 --> 00:08:53,369
and if you have a lot of commands

00:08:50,879 --> 00:08:55,860
necessary to build your application the

00:08:53,369 --> 00:09:00,360
package Jason gets messy pretty quickly

00:08:55,860 --> 00:09:05,389
and there's one more thing please be

00:09:00,360 --> 00:09:10,610
aware when using the NPM script section

00:09:05,389 --> 00:09:10,610
can anyone tell me what line seven does

00:09:12,740 --> 00:09:20,730
it freeze a lot of space on your

00:09:15,269 --> 00:09:24,179
computer I already mentioned the default

00:09:20,730 --> 00:09:27,029
scripts in the package Jason and you

00:09:24,179 --> 00:09:30,089
have three steps of the default scripts

00:09:27,029 --> 00:09:32,550
so you have the pre-installed script

00:09:30,089 --> 00:09:34,589
which is executed before the

00:09:32,550 --> 00:09:37,050
installation of a certain NPM package

00:09:34,589 --> 00:09:39,119
you have the install script which runs

00:09:37,050 --> 00:09:42,119
afterwards and you have the post install

00:09:39,119 --> 00:09:44,910
script which cleans up stuff and things

00:09:42,119 --> 00:09:48,779
like that so the pre installed script is

00:09:44,910 --> 00:09:53,279
executed before the actual installation

00:09:48,779 --> 00:10:00,209
takes place so if you run npm install

00:09:53,279 --> 00:10:03,809
RYM Rafal RM dash RF slash star and

00:10:00,209 --> 00:10:07,290
slash dot star is executed which deletes

00:10:03,809 --> 00:10:11,869
all the files on your unix system so you

00:10:07,290 --> 00:10:17,990
can execute any given shell script and

00:10:11,869 --> 00:10:22,259
this was a kind of proof of the

00:10:17,990 --> 00:10:24,929
dangerous character of npm and this was

00:10:22,259 --> 00:10:31,699
actually in the NPM registry for awhile

00:10:24,929 --> 00:10:35,579
and some poor persons installed that and

00:10:31,699 --> 00:10:39,329
the maintenance of the registry took it

00:10:35,579 --> 00:10:42,149
off pretty quickly but it proved the

00:10:39,329 --> 00:10:44,089
point that it's dangerous to install

00:10:42,149 --> 00:10:47,660
random things on your computer

00:10:44,089 --> 00:10:51,179
especially if you run npm install with

00:10:47,660 --> 00:10:53,579
administrator privileges because then it

00:10:51,179 --> 00:10:58,589
froze everything away so please be

00:10:53,579 --> 00:11:01,470
careful next thing is you can easily

00:10:58,589 --> 00:11:02,070
publish NPM packages the only thing

00:11:01,470 --> 00:11:05,040
necessary

00:11:02,070 --> 00:11:07,500
user at the NPM registry which you can

00:11:05,040 --> 00:11:10,440
add with NPM and user I you said

00:11:07,500 --> 00:11:13,620
something like that and then you can

00:11:10,440 --> 00:11:16,890
publish your application if you do this

00:11:13,620 --> 00:11:19,440
by accident all the source code of your

00:11:16,890 --> 00:11:22,710
application gets published into the

00:11:19,440 --> 00:11:25,920
registry which is usually not what you

00:11:22,710 --> 00:11:28,920
want to do so you can add the private

00:11:25,920 --> 00:11:33,390
true flag in your application which

00:11:28,920 --> 00:11:36,330
prevents the accident of publishing your

00:11:33,390 --> 00:11:39,030
application and if you try to publish it

00:11:36,330 --> 00:11:40,890
you get this warning which says your

00:11:39,030 --> 00:11:43,140
package has been marked as private and

00:11:40,890 --> 00:11:45,960
it doesn't publish it please don't

00:11:43,140 --> 00:11:53,820
forget to save your package Jason before

00:11:45,960 --> 00:11:56,270
you try and run this next thing document

00:11:53,820 --> 00:11:59,910
everything in your application at least

00:11:56,270 --> 00:12:04,590
code guidelines and build process which

00:11:59,910 --> 00:12:07,320
is very important we created a bigger

00:12:04,590 --> 00:12:11,060
node.js application which was developed

00:12:07,320 --> 00:12:17,660
over roughly one and a half to two years

00:12:11,060 --> 00:12:21,630
with five to up to ten developers and we

00:12:17,660 --> 00:12:25,560
rotated in and out developers over the

00:12:21,630 --> 00:12:29,160
development process and as soon as a new

00:12:25,560 --> 00:12:32,370
colleague started development process we

00:12:29,160 --> 00:12:34,290
just told him have a look at the readme

00:12:32,370 --> 00:12:37,320
there are all the necessary things

00:12:34,290 --> 00:12:40,200
documented you need to know they read

00:12:37,320 --> 00:12:43,010
the the thing which took about two hours

00:12:40,200 --> 00:12:45,990
to understand all the things and then

00:12:43,010 --> 00:12:49,590
they were able to start the development

00:12:45,990 --> 00:12:52,680
process so it's a good thing to document

00:12:49,590 --> 00:12:58,940
it and to keep it up to date

00:12:52,680 --> 00:13:05,270
and you should be as kind as possible to

00:12:58,940 --> 00:13:09,620
reduce the step to start the development

00:13:05,270 --> 00:13:13,480
last thing in the development process is

00:13:09,620 --> 00:13:17,230
or in the start of your application at

00:13:13,480 --> 00:13:19,360
dot get ignore file or SVN ignore or

00:13:17,230 --> 00:13:21,400
whatever a version control system you

00:13:19,360 --> 00:13:24,370
use you should use a version control

00:13:21,400 --> 00:13:27,910
system but I think that's pretty

00:13:24,370 --> 00:13:30,850
standard right now and you should add

00:13:27,910 --> 00:13:35,530
the node modules folder to your git

00:13:30,850 --> 00:13:37,210
ignore so you don't add the all the

00:13:35,530 --> 00:13:39,550
modules and all the source code of your

00:13:37,210 --> 00:13:43,990
modules to your repository because they

00:13:39,550 --> 00:13:46,420
are stored in the central repository so

00:13:43,990 --> 00:13:51,100
you don't have to clone it for your own

00:13:46,420 --> 00:13:53,830
application who is developing in a

00:13:51,100 --> 00:13:58,920
secure environment with no internet

00:13:53,830 --> 00:14:02,200
access no one no bank or insurance

00:13:58,920 --> 00:14:07,000
developer because we had this problem

00:14:02,200 --> 00:14:12,070
for an American bank we were not allowed

00:14:07,000 --> 00:14:14,530
to give our development systems or the

00:14:12,070 --> 00:14:18,190
the staging systems access to the

00:14:14,530 --> 00:14:21,340
Internet so we had a huge problem doing

00:14:18,190 --> 00:14:24,610
an NPM install to fetch the node modules

00:14:21,340 --> 00:14:27,310
folder from the internet so this was no

00:14:24,610 --> 00:14:30,270
option for us so in the first place we

00:14:27,310 --> 00:14:34,390
added the node modules folder to our

00:14:30,270 --> 00:14:39,540
repository which blew up the repository

00:14:34,390 --> 00:14:43,960
and then as a second solution we

00:14:39,540 --> 00:14:47,680
introduced proxy registry which this

00:14:43,960 --> 00:14:50,380
package provides you and this is a proxy

00:14:47,680 --> 00:14:54,610
between your application or your system

00:14:50,380 --> 00:14:56,980
and the public registry it downloads all

00:14:54,610 --> 00:15:00,310
the packages it doesn't know so you can

00:14:56,980 --> 00:15:03,310
pre-fill it and then you can do an NPM

00:15:00,310 --> 00:15:06,070
install your local system goes to your

00:15:03,310 --> 00:15:07,930
proxy registry downloads everything from

00:15:06,070 --> 00:15:11,020
there and you can use it as a

00:15:07,930 --> 00:15:14,860
centralized service in your development

00:15:11,020 --> 00:15:17,920
environment it's pretty fast it's pretty

00:15:14,860 --> 00:15:20,710
stable and you don't have a dependency

00:15:17,920 --> 00:15:23,290
on the availability of a remote system

00:15:20,710 --> 00:15:27,769
so this is a pretty good and stable

00:15:23,290 --> 00:15:31,350
solution for not connecting to the end

00:15:27,769 --> 00:15:36,269
another problem we faced in developing

00:15:31,350 --> 00:15:41,149
was for customer which told us we want

00:15:36,269 --> 00:15:45,000
to support up to node 8 and I do

00:15:41,149 --> 00:15:49,290
developing or development for certain

00:15:45,000 --> 00:15:51,660
customers and I always have the most

00:15:49,290 --> 00:15:55,079
current version of noches installed on

00:15:51,660 --> 00:15:59,130
my machine so I faced the problem

00:15:55,079 --> 00:16:02,579
because every time I had to develop the

00:15:59,130 --> 00:16:04,949
application of our customer further I

00:16:02,579 --> 00:16:08,459
needed to switch back to an older

00:16:04,949 --> 00:16:11,339
version and there is a solution called

00:16:08,459 --> 00:16:15,889
node version manager which is a shell

00:16:11,339 --> 00:16:19,110
script from hell which consists of about

00:16:15,889 --> 00:16:23,819
3,500 lines of shell script code without

00:16:19,110 --> 00:16:26,279
any comments so it it's pretty big and

00:16:23,819 --> 00:16:30,029
the problem is in the name it's a bash

00:16:26,279 --> 00:16:33,480
script so you can't use it on all the

00:16:30,029 --> 00:16:36,120
windows versions or on current even but

00:16:33,480 --> 00:16:38,730
there is a solution called nvm windows

00:16:36,120 --> 00:16:41,670
and I recently tested it for another

00:16:38,730 --> 00:16:44,880
customer and it works just like a charm

00:16:41,670 --> 00:16:49,560
just install either nvm windows or if

00:16:44,880 --> 00:16:52,610
you are using Linux or UNIX system just

00:16:49,560 --> 00:16:56,130
nvm or noticed and then you can switch

00:16:52,610 --> 00:16:59,180
forth and back between the different

00:16:56,130 --> 00:17:02,790
node.js versions you have installed the

00:16:59,180 --> 00:17:05,669
global NPM packages explicitly to a

00:17:02,790 --> 00:17:08,370
certain version so you got no version

00:17:05,669 --> 00:17:12,589
conflicts between the global installed

00:17:08,370 --> 00:17:17,659
NPM packages so it just works

00:17:12,589 --> 00:17:21,270
another problem is your source code gets

00:17:17,659 --> 00:17:23,880
cached by no chance so if you're doing

00:17:21,270 --> 00:17:25,380
the development and you're doing changes

00:17:23,880 --> 00:17:27,929
through your application you start your

00:17:25,380 --> 00:17:31,200
process you do further changes you have

00:17:27,929 --> 00:17:37,470
to always restart your process and that

00:17:31,200 --> 00:17:40,169
gets annoying because once you forget to

00:17:37,470 --> 00:17:43,460
restart the process your changes do not

00:17:40,169 --> 00:17:46,919
take effect and you search for the bug

00:17:43,460 --> 00:17:50,220
so you can use this tool called no

00:17:46,919 --> 00:17:53,580
daemon which automatically restarts the

00:17:50,220 --> 00:17:57,440
process after a file is changed and you

00:17:53,580 --> 00:17:59,639
can give the process a file name and it

00:17:57,440 --> 00:18:02,399
watches the file and all the

00:17:59,639 --> 00:18:04,739
dependencies of this file and as soon as

00:18:02,399 --> 00:18:09,899
you change a fire the process gets

00:18:04,739 --> 00:18:13,049
restarted please do never ever use it in

00:18:09,899 --> 00:18:15,899
production that's a pretty bad idea

00:18:13,049 --> 00:18:17,970
because as soon as you change a file on

00:18:15,899 --> 00:18:21,539
your production system which you should

00:18:17,970 --> 00:18:23,879
not do but as soon as you do that your

00:18:21,539 --> 00:18:27,090
production system gets shut down and

00:18:23,879 --> 00:18:29,460
restarted and you lose all the

00:18:27,090 --> 00:18:31,230
application states stored in memory and

00:18:29,460 --> 00:18:33,659
you lose all the connections of your

00:18:31,230 --> 00:18:36,299
users to the production system which is

00:18:33,659 --> 00:18:40,889
a pretty bad idea so please do not use

00:18:36,299 --> 00:18:43,320
it in production this is how it works

00:18:40,889 --> 00:18:46,859
you just start your application you get

00:18:43,320 --> 00:18:49,940
an information about watching the files

00:18:46,859 --> 00:18:52,710
and then as soon as you change something

00:18:49,940 --> 00:18:55,499
it's telling you restarting do two

00:18:52,710 --> 00:18:59,509
changes it restarts the application and

00:18:55,499 --> 00:19:05,059
then everything is working pretty fine

00:18:59,509 --> 00:19:09,809
who is developing no chase or JavaScript

00:19:05,059 --> 00:19:14,759
who is using a debugger who is using

00:19:09,809 --> 00:19:20,489
console lock as debugger console lock is

00:19:14,759 --> 00:19:23,820
not a debugger just try out your

00:19:20,489 --> 00:19:26,460
developer tools in chrome in edge in

00:19:23,820 --> 00:19:30,330
Firefox in Safari they are pretty good

00:19:26,460 --> 00:19:34,999
and the good thing of the debugger tools

00:19:30,330 --> 00:19:39,749
is chrome and node.js share the same

00:19:34,999 --> 00:19:43,559
JavaScript engine the v8 and there is no

00:19:39,749 --> 00:19:47,190
reason you cannot use the chrome

00:19:43,559 --> 00:19:50,359
developer tools with no chance because

00:19:47,190 --> 00:19:53,669
they share the same engine and no chess

00:19:50,359 --> 00:19:57,479
is also using the

00:19:53,669 --> 00:20:02,969
v8 debugging protocol so you start your

00:19:57,479 --> 00:20:06,619
node.js process with - - inspect or - -

00:20:02,969 --> 00:20:09,809
inspect BRK which breaks on first line

00:20:06,619 --> 00:20:12,379
then it tells you the debugger is

00:20:09,809 --> 00:20:16,229
listening on some WebSocket connection

00:20:12,379 --> 00:20:18,149
go to your Chrome browser chrome inspect

00:20:16,229 --> 00:20:20,070
and then you get a list of remote

00:20:18,149 --> 00:20:23,659
targets and then you can connect to your

00:20:20,070 --> 00:20:27,479
node.js process and debug it from your

00:20:23,659 --> 00:20:30,509
developer tools so you get the tools

00:20:27,479 --> 00:20:34,799
you're used to and can use it in the

00:20:30,509 --> 00:20:38,429
JavaScript sauce off you know chase okay

00:20:34,799 --> 00:20:41,159
that's pretty okay but you're doing the

00:20:38,429 --> 00:20:44,879
development work not in the browser but

00:20:41,159 --> 00:20:49,349
in your IDE and you can use this

00:20:44,879 --> 00:20:52,619
debugging protocol as well in the IDE so

00:20:49,349 --> 00:20:55,139
you can use either webstorm or Visual

00:20:52,619 --> 00:20:58,200
Studio code and debug your node.js

00:20:55,139 --> 00:21:02,459
application from within your application

00:20:58,200 --> 00:21:04,769
you have all the debugging tools so you

00:21:02,459 --> 00:21:07,549
can step forward step in to step out and

00:21:04,769 --> 00:21:10,349
stuff like that you can watch your

00:21:07,549 --> 00:21:12,570
variable scopes you can do watch

00:21:10,349 --> 00:21:15,539
expressions you can inspect the call

00:21:12,570 --> 00:21:18,570
stack add breakpoints and stuff like

00:21:15,539 --> 00:21:20,969
that so you don't have to explicitly

00:21:18,570 --> 00:21:23,339
write debugger into your code but just

00:21:20,969 --> 00:21:28,769
click the line number and then add a

00:21:23,339 --> 00:21:30,570
breakpoint into your application and you

00:21:28,769 --> 00:21:32,700
can do changes to the source code which

00:21:30,570 --> 00:21:35,399
are not reflected in the running process

00:21:32,700 --> 00:21:42,419
but you can restart the debugger and the

00:21:35,399 --> 00:21:45,419
changes take effect if you're writing a

00:21:42,419 --> 00:21:50,159
node.js application you are using a lot

00:21:45,419 --> 00:21:54,570
of libraries and packages and there are

00:21:50,159 --> 00:21:56,969
two major package managers NPM the

00:21:54,570 --> 00:22:01,979
traditional one which is included since

00:21:56,969 --> 00:22:05,219
node 0 dot something 0.2 or 4 or

00:22:01,979 --> 00:22:06,960
something so years ago and there is a

00:22:05,219 --> 00:22:11,280
new player

00:22:06,960 --> 00:22:15,000
yarn with a very cool logo and NPM

00:22:11,280 --> 00:22:18,840
learned from that and they introduced an

00:22:15,000 --> 00:22:22,350
animal on their own which is a wombat

00:22:18,840 --> 00:22:26,870
which is pretty cute as well so but

00:22:22,350 --> 00:22:31,860
besides the logo why should you consider

00:22:26,870 --> 00:22:33,120
using yarn Facebook is trying to do

00:22:31,860 --> 00:22:35,820
stuff better

00:22:33,120 --> 00:22:40,530
so just take a look at the testing

00:22:35,820 --> 00:22:45,990
framework yes or the view library react

00:22:40,530 --> 00:22:49,020
and they also wanted to make the package

00:22:45,990 --> 00:22:52,820
manager better so they learned from the

00:22:49,020 --> 00:22:57,210
mistakes the developers of NPM did and

00:22:52,820 --> 00:23:00,450
the major issues with NPM where it was

00:22:57,210 --> 00:23:03,930
not ultra fast it was pretty slow it was

00:23:00,450 --> 00:23:08,310
not mega secure but a little bit flaky

00:23:03,930 --> 00:23:10,980
because if you installed the packages on

00:23:08,310 --> 00:23:13,500
one machine at a certain time and later

00:23:10,980 --> 00:23:15,660
on on another machine the same

00:23:13,500 --> 00:23:17,760
application them are not exactly the

00:23:15,660 --> 00:23:22,260
same because of version mismatches in

00:23:17,760 --> 00:23:26,040
sub dependencies and this goes also to

00:23:22,260 --> 00:23:29,100
super reliable because yeah that's not

00:23:26,040 --> 00:23:31,770
what you call reliable so they took

00:23:29,100 --> 00:23:34,110
those problems and they introduced a

00:23:31,770 --> 00:23:37,400
better caching mechanism and parallel

00:23:34,110 --> 00:23:42,390
downloads they introduced a file called

00:23:37,400 --> 00:23:44,460
yarn lock which is locking the packages

00:23:42,390 --> 00:23:48,510
and all the sub packages to a certain

00:23:44,460 --> 00:23:52,260
version and they introduced hashes over

00:23:48,510 --> 00:23:57,240
the packages which ensured the integrity

00:23:52,260 --> 00:24:00,470
of a package so NPM had a look at yarn

00:23:57,240 --> 00:24:04,260
and they learned from yarn and they made

00:24:00,470 --> 00:24:07,800
NPM even better they introduced a better

00:24:04,260 --> 00:24:11,250
caching mechanism they introduced a file

00:24:07,800 --> 00:24:13,950
called package lock Jason which is doing

00:24:11,250 --> 00:24:16,680
the same as the yarn lock file and they

00:24:13,950 --> 00:24:19,520
also introduced this integrity hashes

00:24:16,680 --> 00:24:24,010
and so yarn and

00:24:19,520 --> 00:24:27,020
npm are pretty similar to each other and

00:24:24,010 --> 00:24:29,390
one-time NPM introduces a new feature

00:24:27,020 --> 00:24:33,250
which makes NPM better and then yarn

00:24:29,390 --> 00:24:36,620
learns from it and the other way around

00:24:33,250 --> 00:24:40,280
however you should consider using either

00:24:36,620 --> 00:24:43,370
NPM or yon which shared the same package

00:24:40,280 --> 00:24:47,570
sauce so if you publish to yarn or NPM

00:24:43,370 --> 00:24:50,810
you get in the in the other package

00:24:47,570 --> 00:24:54,560
manager the same packages NPM is the

00:24:50,810 --> 00:24:57,230
biggest package manager in the world so

00:24:54,560 --> 00:24:59,210
you can find nearly every package for

00:24:57,230 --> 00:25:03,680
front-end and back-end development in

00:24:59,210 --> 00:25:05,630
NPM so consider using it but there is

00:25:03,680 --> 00:25:08,980
one question how do I find out if a

00:25:05,630 --> 00:25:12,350
package is reliable and good and stable

00:25:08,980 --> 00:25:17,960
you have to have a look at the numbers

00:25:12,350 --> 00:25:22,600
every NPM package is documented on the

00:25:17,960 --> 00:25:26,960
website of NPM NPM is calm and you get a

00:25:22,600 --> 00:25:30,830
statistic so you get the weekly

00:25:26,960 --> 00:25:34,430
downloads you have expressed yes as an

00:25:30,830 --> 00:25:37,550
example here it's got roughly 5 million

00:25:34,430 --> 00:25:40,250
downloads a week it's got a certain

00:25:37,550 --> 00:25:42,320
version number you have a license you

00:25:40,250 --> 00:25:46,460
have a number of open issues if you have

00:25:42,320 --> 00:25:48,740
two million open issues be careful open

00:25:46,460 --> 00:25:52,250
pull requests if that number is very

00:25:48,740 --> 00:25:53,780
high you can imagine the maintenance of

00:25:52,250 --> 00:25:56,420
the framework are not dealing pretty

00:25:53,780 --> 00:25:59,330
good with pull requests you have the

00:25:56,420 --> 00:26:00,680
reference to the home page you go to the

00:25:59,330 --> 00:26:02,510
home page and have a look at the

00:26:00,680 --> 00:26:04,520
documentation if the documentation is

00:26:02,510 --> 00:26:07,490
bad just throw away in the package and

00:26:04,520 --> 00:26:10,400
consider using another one and you have

00:26:07,490 --> 00:26:12,590
the repository URL and then you go to

00:26:10,400 --> 00:26:16,910
the repository and have a look at

00:26:12,590 --> 00:26:20,030
further numbers such as how many commits

00:26:16,910 --> 00:26:23,090
when was the latest commit if the latest

00:26:20,030 --> 00:26:25,430
commit is two or three years ago don't

00:26:23,090 --> 00:26:29,360
consider using the package have a look

00:26:25,430 --> 00:26:31,610
for another out alternative yeah last

00:26:29,360 --> 00:26:33,180
publish date for NPM is also very

00:26:31,610 --> 00:26:38,750
important just

00:26:33,180 --> 00:26:45,090
use current packages packages older then

00:26:38,750 --> 00:26:47,400
over a year is not a very good option if

00:26:45,090 --> 00:26:50,600
you're writing no chess application

00:26:47,400 --> 00:26:54,990
consider using typescript all of our

00:26:50,600 --> 00:26:59,310
latest node.js applications are based on

00:26:54,990 --> 00:27:01,470
typescript which is basically transpiler

00:26:59,310 --> 00:27:05,630
which takes the typescript code and

00:27:01,470 --> 00:27:08,730
transforms it to JavaScript and adds

00:27:05,630 --> 00:27:12,390
types so you have type safety in

00:27:08,730 --> 00:27:16,890
JavaScript to compile time and not at

00:27:12,390 --> 00:27:20,370
run time it's developed by Microsoft

00:27:16,890 --> 00:27:22,950
years ago it's supported by Google

00:27:20,370 --> 00:27:26,130
because they are using it in angular so

00:27:22,950 --> 00:27:30,090
they are taking part at the development

00:27:26,130 --> 00:27:34,980
process they very developing their own

00:27:30,090 --> 00:27:37,650
type system called atscript and then

00:27:34,980 --> 00:27:40,410
suddenly they realized it's pretty

00:27:37,650 --> 00:27:43,400
similar to typescript and they joined

00:27:40,410 --> 00:27:48,720
forces and concentrated on developing

00:27:43,400 --> 00:27:50,910
typescript just install it via NPM or

00:27:48,720 --> 00:27:54,090
yarn and then you can use the typescript

00:27:50,910 --> 00:27:56,580
compiler with the command TSC and then

00:27:54,090 --> 00:28:00,390
transform your typescript file into a

00:27:56,580 --> 00:28:04,820
JavaScript file typical typescript file

00:28:00,390 --> 00:28:12,060
looks like this this is a express action

00:28:04,820 --> 00:28:15,420
behind a certain route and you can use

00:28:12,060 --> 00:28:18,840
type-ins for the input and for the

00:28:15,420 --> 00:28:23,130
return value you can use generics you

00:28:18,840 --> 00:28:26,250
can use all the fancy latest features of

00:28:23,130 --> 00:28:31,370
JavaScript which get transpired to

00:28:26,250 --> 00:28:34,590
either es6 with the stock version of

00:28:31,370 --> 00:28:37,740
javascript you can transpile it to es 5

00:28:34,590 --> 00:28:42,030
which adds polyfills for older versions

00:28:37,740 --> 00:28:46,530
and you can even transpile it back to ES

00:28:42,030 --> 00:28:50,400
3 which is I think no see

00:28:46,530 --> 00:28:54,330
eight or ten so you can support even

00:28:50,400 --> 00:28:56,730
older versions of JavaScript and if

00:28:54,330 --> 00:28:58,830
you're using packages such as Express

00:28:56,730 --> 00:29:04,590
J's which are not developed in

00:28:58,830 --> 00:29:06,800
typescript you can use yeah a thing

00:29:04,590 --> 00:29:11,400
called definitely typed which is

00:29:06,800 --> 00:29:12,420
maintaining type definitions for non

00:29:11,400 --> 00:29:15,630
typescript

00:29:12,420 --> 00:29:20,070
libraries so in the front end you can

00:29:15,630 --> 00:29:22,800
for example use jQuery or in node.js you

00:29:20,070 --> 00:29:25,020
can use Express or lodash or something

00:29:22,800 --> 00:29:28,100
and you just install the type

00:29:25,020 --> 00:29:31,500
definitions and everything's fine and

00:29:28,100 --> 00:29:33,600
there is another tool called TS node

00:29:31,500 --> 00:29:36,600
which includes the typescript compiler

00:29:33,600 --> 00:29:39,810
and the node runtime or brings together

00:29:36,600 --> 00:29:42,300
the two of them and you can directly

00:29:39,810 --> 00:29:44,640
execute your typescript files with no

00:29:42,300 --> 00:29:46,890
js' because it's transpiling and

00:29:44,640 --> 00:29:49,890
executing the thing at the same time

00:29:46,890 --> 00:29:52,410
it's pretty good when it comes to

00:29:49,890 --> 00:29:55,470
performance and we are using it in our

00:29:52,410 --> 00:29:57,180
development process for the production

00:29:55,470 --> 00:30:00,120
environment we're using the traditional

00:29:57,180 --> 00:30:03,810
way of transpiling all the things and

00:30:00,120 --> 00:30:08,880
then bringing yin to the production

00:30:03,810 --> 00:30:13,820
system so next topic it's all about

00:30:08,880 --> 00:30:17,910
style we had plenty of discussion

00:30:13,820 --> 00:30:22,800
whether to use semicolons or where to

00:30:17,910 --> 00:30:26,310
put curly braces in their own line or at

00:30:22,800 --> 00:30:28,500
the end of the line and we discovered

00:30:26,310 --> 00:30:31,380
certain code Styles and there were no

00:30:28,500 --> 00:30:35,280
more discussions because there are

00:30:31,380 --> 00:30:37,920
predefined rules which you should follow

00:30:35,280 --> 00:30:42,090
and which you can enforce by some tools

00:30:37,920 --> 00:30:44,730
and there are roughly three big

00:30:42,090 --> 00:30:47,490
standards which is the air B&B standard

00:30:44,730 --> 00:30:52,200
which I like the most of them there is

00:30:47,490 --> 00:30:55,020
the Google code style which is pretty

00:30:52,200 --> 00:30:58,610
opinionated and you have the standard

00:30:55,020 --> 00:31:02,179
standard which is the losers

00:30:58,610 --> 00:31:06,980
one of the three and if you have a look

00:31:02,179 --> 00:31:09,020
at the github page of the Airbnb style

00:31:06,980 --> 00:31:11,960
guide for example you have a

00:31:09,020 --> 00:31:14,720
documentation for every rule you have

00:31:11,960 --> 00:31:18,590
the topic so for example semicolons you

00:31:14,720 --> 00:31:22,700
have to ruin you have the name of the

00:31:18,590 --> 00:31:23,929
rule in a certain tool you have the two

00:31:22,700 --> 00:31:26,540
and don't so

00:31:23,929 --> 00:31:29,150
yes you should use semicolons you have

00:31:26,540 --> 00:31:31,360
an explanation of why you should use it

00:31:29,150 --> 00:31:35,150
and you have some good and bad examples

00:31:31,360 --> 00:31:37,160
so if you're introducing a new developer

00:31:35,150 --> 00:31:40,160
into your project just give them the

00:31:37,160 --> 00:31:43,880
link to the code style and then they can

00:31:40,160 --> 00:31:46,880
read and use the code style I just

00:31:43,880 --> 00:31:50,380
mentioned you can enforce the usage of

00:31:46,880 --> 00:31:54,350
the code style and that's by using

00:31:50,380 --> 00:31:56,600
linters this nice person is starless

00:31:54,350 --> 00:31:59,330
croc bought the inventor of the JSON

00:31:56,600 --> 00:32:03,590
format and he also invented a tool

00:31:59,330 --> 00:32:05,840
called jslint and he told everyone who

00:32:03,590 --> 00:32:08,660
is using this tool it will hurt your

00:32:05,840 --> 00:32:11,510
feelings and it does because if you're

00:32:08,660 --> 00:32:14,419
developing an application and then run

00:32:11,510 --> 00:32:17,030
the linter afterwards you get tons of

00:32:14,419 --> 00:32:18,590
warnings and errors because you're not

00:32:17,030 --> 00:32:21,710
following the rules of Douglas Crockford

00:32:18,590 --> 00:32:24,290
which are pretty opinionated just read

00:32:21,710 --> 00:32:26,870
the book JavaScript a good part and then

00:32:24,290 --> 00:32:30,020
you learn about the rules which are

00:32:26,870 --> 00:32:34,390
enforced in jeaious lint so you could

00:32:30,020 --> 00:32:37,100
not configure jslint in a good manner so

00:32:34,390 --> 00:32:39,500
some developer came up with a solution

00:32:37,100 --> 00:32:42,230
called J's hint which is more

00:32:39,500 --> 00:32:45,500
configurable and out of J's

00:32:42,230 --> 00:32:47,780
hint es lint and tears lint were

00:32:45,500 --> 00:32:52,610
developed which are very configurable

00:32:47,780 --> 00:32:55,730
and provide a plug-in infrastructure for

00:32:52,610 --> 00:32:59,720
your own rules and if you run a tool

00:32:55,730 --> 00:33:03,080
like that you get the line numbers the

00:32:59,720 --> 00:33:05,600
type of the warning or error you get an

00:33:03,080 --> 00:33:07,970
assured explanation and the name of the

00:33:05,600 --> 00:33:11,090
rule so you can look them up in the

00:33:07,970 --> 00:33:12,150
style guide and have a look at the

00:33:11,090 --> 00:33:15,720
example of

00:33:12,150 --> 00:33:19,590
how to fix your coat and there is even

00:33:15,720 --> 00:33:22,620
an option - - fix which automatically

00:33:19,590 --> 00:33:28,590
cleans up your coat to a certain extent

00:33:22,620 --> 00:33:30,870
a better solution in my opinion is

00:33:28,590 --> 00:33:34,230
prettier which makes her coat prettier

00:33:30,870 --> 00:33:36,300
it's a tool it's an opinionated code for

00:33:34,230 --> 00:33:39,120
code formatter which you can include

00:33:36,300 --> 00:33:43,110
into your development process and you

00:33:39,120 --> 00:33:45,960
can configure it for using a certain

00:33:43,110 --> 00:33:52,830
style guide and then it formats your

00:33:45,960 --> 00:33:56,970
code automatically at safe - the defined

00:33:52,830 --> 00:34:00,180
rules you can use it in webstorm or in

00:33:56,970 --> 00:34:02,430
Visual Studio code and it helps you that

00:34:00,180 --> 00:34:06,060
the code of your application looks all

00:34:02,430 --> 00:34:09,000
the same so there is no file created on

00:34:06,060 --> 00:34:11,820
Monday which looks Messier and then a

00:34:09,000 --> 00:34:15,179
file another file created on Wednesday

00:34:11,820 --> 00:34:17,720
when the developer was full in the

00:34:15,179 --> 00:34:21,600
development process or on Friday when

00:34:17,720 --> 00:34:24,480
they were all heading for the weekend so

00:34:21,600 --> 00:34:30,330
it makes the code better and the whole

00:34:24,480 --> 00:34:32,190
application manner if it comes to no

00:34:30,330 --> 00:34:33,360
chance you have to deal with another

00:34:32,190 --> 00:34:38,490
problem called

00:34:33,360 --> 00:34:41,760
async in the core nodejs

00:34:38,490 --> 00:34:44,040
uses non-blocking i/o which means you

00:34:41,760 --> 00:34:47,090
have an operation such as reading a file

00:34:44,040 --> 00:34:49,860
which is not blocking your process

00:34:47,090 --> 00:34:52,530
however you can write your own code

00:34:49,860 --> 00:34:54,840
which blocks the execution and messes up

00:34:52,530 --> 00:34:58,910
with everything but that's not the point

00:34:54,840 --> 00:35:02,190
if you're writing node.js code it looks

00:34:58,910 --> 00:35:05,130
usually like this you have a function

00:35:02,190 --> 00:35:08,490
call you have certain arguments and then

00:35:05,130 --> 00:35:08,940
you have a callback function everything

00:35:08,490 --> 00:35:12,930
okay

00:35:08,940 --> 00:35:16,110
but if you have dependent asynchronous

00:35:12,930 --> 00:35:20,820
operations you end up with a problem

00:35:16,110 --> 00:35:23,730
called callback hell which is nested

00:35:20,820 --> 00:35:26,020
callbacks and if you nest 5 to 10

00:35:23,730 --> 00:35:28,450
callbacks into each other

00:35:26,020 --> 00:35:32,230
your coat gets messy and debugging is

00:35:28,450 --> 00:35:35,770
not fun at all a solution for that

00:35:32,230 --> 00:35:39,190
problem is the use of promises which are

00:35:35,770 --> 00:35:43,960
objects that stand for the resolution of

00:35:39,190 --> 00:35:48,250
an asynchronous operation you're not

00:35:43,960 --> 00:35:50,230
getting less callbacks you're using more

00:35:48,250 --> 00:35:54,430
callbacks than with the original

00:35:50,230 --> 00:35:58,210
callback version because you generate a

00:35:54,430 --> 00:36:01,240
promised version of the file system

00:35:58,210 --> 00:36:04,090
operation with another callback you have

00:36:01,240 --> 00:36:07,570
the original callback you have to reject

00:36:04,090 --> 00:36:10,720
and resolve functions and then you add

00:36:07,570 --> 00:36:14,670
two other callbacks to deal with the

00:36:10,720 --> 00:36:17,650
resolution or the error in this a

00:36:14,670 --> 00:36:20,110
synchronous operation the big advantage

00:36:17,650 --> 00:36:23,230
of this is you can chain promise after

00:36:20,110 --> 00:36:26,580
each other so you don't nest it into

00:36:23,230 --> 00:36:30,550
each other but stack them together and

00:36:26,580 --> 00:36:32,380
you can do flow control in your

00:36:30,550 --> 00:36:35,590
application so you can put together

00:36:32,380 --> 00:36:38,410
multiple asynchronous operations and

00:36:35,590 --> 00:36:41,020
continue the process of your application

00:36:38,410 --> 00:36:43,780
after they are all finished or just use

00:36:41,020 --> 00:36:49,680
the fastest one so you have more control

00:36:43,780 --> 00:36:53,110
over your asynchronous operations and a

00:36:49,680 --> 00:36:58,750
feature called async await is using

00:36:53,110 --> 00:37:03,220
promises so if you have a promise based

00:36:58,750 --> 00:37:07,860
operation you need to create an async

00:37:03,220 --> 00:37:12,460
function right now they are developing a

00:37:07,860 --> 00:37:16,600
route based a wait so you don't have to

00:37:12,460 --> 00:37:19,570
wrap around an async function and then

00:37:16,600 --> 00:37:22,540
you can await for a promise and use

00:37:19,570 --> 00:37:26,050
try-catch for error handling which makes

00:37:22,540 --> 00:37:32,260
your code very clean and very readable

00:37:26,050 --> 00:37:35,170
and the problem with callbacks promises

00:37:32,260 --> 00:37:38,650
and async await is they're only

00:37:35,170 --> 00:37:39,640
supporting two versions or two

00:37:38,650 --> 00:37:42,510
resolutions

00:37:39,640 --> 00:37:45,550
either the success or the failure

00:37:42,510 --> 00:37:50,920
they're not supporting multiple

00:37:45,550 --> 00:37:54,880
asynchronous events and you can not undo

00:37:50,920 --> 00:37:57,280
a promise so if you have a stream of

00:37:54,880 --> 00:38:01,000
events you can either use the stream API

00:37:57,280 --> 00:38:04,360
of no chairs or you can go and use a

00:38:01,000 --> 00:38:07,210
tool called reactive X which are the

00:38:04,360 --> 00:38:10,540
reactive extensions and are available

00:38:07,210 --> 00:38:16,320
for different programming languages such

00:38:10,540 --> 00:38:20,230
as Java or.net or JavaScript and you can

00:38:16,320 --> 00:38:24,040
use the observer pattern in your

00:38:20,230 --> 00:38:26,350
application and you have observable and

00:38:24,040 --> 00:38:28,870
the observer and in between you have

00:38:26,350 --> 00:38:31,900
certain operators which modify the

00:38:28,870 --> 00:38:34,110
stream of events which gives you a lot

00:38:31,900 --> 00:38:42,670
of flexibility in developing your

00:38:34,110 --> 00:38:48,550
application process who is using tests

00:38:42,670 --> 00:38:51,250
in JavaScript oh pretty good so we don't

00:38:48,550 --> 00:38:53,170
have to talk about tests because you're

00:38:51,250 --> 00:38:58,030
writing tests fine

00:38:53,170 --> 00:39:02,470
I didn't plan with that so most of the

00:38:58,030 --> 00:39:04,030
time I'm doing a consultancy I here we

00:39:02,470 --> 00:39:05,950
don't have time for tests we don't have

00:39:04,030 --> 00:39:07,930
time for documentation we have we don't

00:39:05,950 --> 00:39:11,910
have time for architecture we just need

00:39:07,930 --> 00:39:11,910
to create features that's wrong

00:39:12,510 --> 00:39:17,800
you need to write proper unit tests to

00:39:15,940 --> 00:39:19,990
ensure the functionality of your

00:39:17,800 --> 00:39:22,570
application and there are tons of tools

00:39:19,990 --> 00:39:24,730
that support you in writing tests a

00:39:22,570 --> 00:39:27,460
traditional test is just like in the

00:39:24,730 --> 00:39:30,730
front end written either with mocha or

00:39:27,460 --> 00:39:33,300
with jasmine and follows the following

00:39:30,730 --> 00:39:36,220
rule you just group your test with

00:39:33,300 --> 00:39:39,250
describe you have setup and teardown

00:39:36,220 --> 00:39:42,520
routines and you write your tests with

00:39:39,250 --> 00:39:45,250
each function you document your tests

00:39:42,520 --> 00:39:48,580
and you write the callback function

00:39:45,250 --> 00:39:52,530
which is the actual test and you can use

00:39:48,580 --> 00:39:55,150
all the features of JavaScript in your

00:39:52,530 --> 00:39:57,850
you have test helper libraries such as

00:39:55,150 --> 00:40:01,980
sign-on jazz or mockery which provides

00:39:57,850 --> 00:40:06,160
you test tools so if you need to mock a

00:40:01,980 --> 00:40:10,810
certain API you can use sign-on stops

00:40:06,160 --> 00:40:13,720
that fake away this API and give you a

00:40:10,810 --> 00:40:14,410
certain functionality you can use

00:40:13,720 --> 00:40:17,080
ýstanbul

00:40:14,410 --> 00:40:22,270
for code coverage so you can include it

00:40:17,080 --> 00:40:25,240
in your Jenkins or Travis and get an

00:40:22,270 --> 00:40:28,390
output of the code coverage of your

00:40:25,240 --> 00:40:31,270
tests and there is even a tool for

00:40:28,390 --> 00:40:34,420
integration tests for example super test

00:40:31,270 --> 00:40:37,000
which gives you the ability to test your

00:40:34,420 --> 00:40:40,330
Express application on your web server

00:40:37,000 --> 00:40:43,900
and you doin request to the web server

00:40:40,330 --> 00:40:46,360
you do a get request in this example you

00:40:43,900 --> 00:40:49,480
set certain headers and then you expect

00:40:46,360 --> 00:40:51,910
a certain response and with that you can

00:40:49,480 --> 00:40:58,000
test the whole application interface and

00:40:51,910 --> 00:41:00,340
write good tests hopefully yeah and

00:40:58,000 --> 00:41:03,400
that's next topic we don't have time for

00:41:00,340 --> 00:41:07,240
documentation who is using jaeseok in

00:41:03,400 --> 00:41:14,590
JavaScript who is even documenting

00:41:07,240 --> 00:41:17,680
javascript okay listen this is what your

00:41:14,590 --> 00:41:20,710
public API should look like you don't

00:41:17,680 --> 00:41:22,780
need to document everything I personally

00:41:20,710 --> 00:41:24,850
do not document everything but if it

00:41:22,780 --> 00:41:28,570
comes to public API s or if you're

00:41:24,850 --> 00:41:30,960
writing things that should be reused by

00:41:28,570 --> 00:41:34,690
other developers please document them

00:41:30,960 --> 00:41:37,210
use a genius doc which follows the

00:41:34,690 --> 00:41:41,070
following rules provide a short

00:41:37,210 --> 00:41:43,780
description of your methods document

00:41:41,070 --> 00:41:48,100
parameters document return values and

00:41:43,780 --> 00:41:53,440
then you can generate or let auto

00:41:48,100 --> 00:41:55,750
generate a certain HTML structure which

00:41:53,440 --> 00:42:01,740
documents the whole API of your

00:41:55,750 --> 00:42:01,740
communication so

00:42:02,170 --> 00:42:08,870
darker and nodejs are using are getting

00:42:06,710 --> 00:42:12,050
along very well there is a good

00:42:08,870 --> 00:42:16,850
documentation of how to set up docker

00:42:12,050 --> 00:42:18,860
container with no chairs and if it comes

00:42:16,850 --> 00:42:23,270
to scaling you have certain

00:42:18,860 --> 00:42:27,130
possibilities you can scale in a bigger

00:42:23,270 --> 00:42:30,470
manner with docker and a containerized

00:42:27,130 --> 00:42:36,590
environment but you can also scale

00:42:30,470 --> 00:42:38,690
locally which is better using the local

00:42:36,590 --> 00:42:41,210
resources so imagine you have a machine

00:42:38,690 --> 00:42:44,240
with 4 cores

00:42:41,210 --> 00:42:47,060
no chess is just using one core because

00:42:44,240 --> 00:42:50,390
it's single process single threaded so

00:42:47,060 --> 00:42:53,750
it doesn't use make use of the resources

00:42:50,390 --> 00:42:57,470
available in your system and with a tool

00:42:53,750 --> 00:43:03,170
called PM to the process manager you can

00:42:57,470 --> 00:43:05,630
better use the resources available with

00:43:03,170 --> 00:43:07,820
PM - you can scale up and down your

00:43:05,630 --> 00:43:12,290
application you have to just start your

00:43:07,820 --> 00:43:15,010
application with PM - and then you can

00:43:12,290 --> 00:43:18,620
start it in the cluster mode which

00:43:15,010 --> 00:43:20,690
spawns up certain processes of your

00:43:18,620 --> 00:43:24,110
application which are sharing common

00:43:20,690 --> 00:43:27,440
resources such as the HTTP port and in

00:43:24,110 --> 00:43:31,370
my example I have 4 web server instances

00:43:27,440 --> 00:43:35,960
running locally which are answering

00:43:31,370 --> 00:43:40,060
incoming requests and I'm able to scale

00:43:35,960 --> 00:43:44,270
up my application and just add 4 more

00:43:40,060 --> 00:43:47,840
versions of my process and if there are

00:43:44,270 --> 00:43:50,690
no more connections and I can scale down

00:43:47,840 --> 00:43:54,370
it to just one process which is dealing

00:43:50,690 --> 00:43:57,410
with less incoming requests so you can

00:43:54,370 --> 00:44:03,190
you have a very good flexibility when it

00:43:57,410 --> 00:44:07,730
comes to multiple parallel requests and

00:44:03,190 --> 00:44:10,160
this brings us to the next topic and the

00:44:07,730 --> 00:44:14,660
last topic of today which is the

00:44:10,160 --> 00:44:15,470
performance of your application and as I

00:44:14,660 --> 00:44:19,849
just mention

00:44:15,470 --> 00:44:25,190
you can make use of the developer tools

00:44:19,849 --> 00:44:28,369
of chrome and you can inspect your

00:44:25,190 --> 00:44:31,010
application and this is what you get

00:44:28,369 --> 00:44:34,310
you can profile the memory and the CPU

00:44:31,010 --> 00:44:36,619
use it you can not profile any Dom

00:44:34,310 --> 00:44:40,970
operations because there is no Dom in no

00:44:36,619 --> 00:44:43,790
chairs but you can do a memory and CPU

00:44:40,970 --> 00:44:47,660
analysis and find out the bottlenecks in

00:44:43,790 --> 00:44:51,619
your application and work on them if you

00:44:47,660 --> 00:44:53,869
do a big memory snapshot it's getting

00:44:51,619 --> 00:44:56,690
messy and it's very time consuming in

00:44:53,869 --> 00:45:00,080
analyzing the things but it's worth it

00:44:56,690 --> 00:45:04,490
because this is one of the few things

00:45:00,080 --> 00:45:09,080
you can do against memory leaks so if

00:45:04,490 --> 00:45:13,880
you have any questions we're at the end

00:45:09,080 --> 00:45:16,940
of this session just email me or I'm

00:45:13,880 --> 00:45:20,720
here today and tomorrow just let me know

00:45:16,940 --> 00:45:23,270
your questions do we have some couple of

00:45:20,720 --> 00:45:29,530
minutes to do a short question and

00:45:23,270 --> 00:45:29,530
answer yes we have okay so any questions

00:45:38,950 --> 00:45:45,970
the question was is NPM able to maintain

00:45:42,940 --> 00:45:50,410
your private repositories yes it is

00:45:45,970 --> 00:45:53,580
because NPM is very flexible the tool I

00:45:50,410 --> 00:45:57,300
just mentioned is in fact a private

00:45:53,580 --> 00:46:01,270
repository you can publish to this

00:45:57,300 --> 00:46:04,960
virtual repository so you don't have to

00:46:01,270 --> 00:46:07,510
publish it in to the NPM repository but

00:46:04,960 --> 00:46:09,370
to your own and you can maintain it in

00:46:07,510 --> 00:46:12,130
this repository you just have to

00:46:09,370 --> 00:46:14,110
configure NPM to not go to the public

00:46:12,130 --> 00:46:17,370
repository but to your local one and

00:46:14,110 --> 00:46:20,940
then you can maintain your own NPMs

00:46:17,370 --> 00:46:20,940
further questions

00:46:22,020 --> 00:46:29,460
okay so then it's lunch break I think no

00:46:26,850 --> 00:46:34,840
damn it

00:46:29,460 --> 00:46:36,490
okay so then another session and see you

00:46:34,840 --> 00:46:37,730
again later thanks a lot

00:46:36,490 --> 00:46:43,920
[Applause]

00:46:37,730 --> 00:46:43,920

YouTube URL: https://www.youtube.com/watch?v=d-TbKx3T5wg


