Title: Git: Undoing Things and recovering from Mistakes | Tobias Günther | IPC Spring 2018
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2018
Description: 
	Tobias günther (fournova Software GmbH): We cannot avoid mistakes. But with the right tools, we can make sure they don’t hurt too much. Git offers many ways to undo, revert, recover and fix. We’ll look at the bad things that can happen to you – and how Git can save your neck. In this hands-on session, we’ll have a look at Git’s various "undo" features. My intention is to give developers more confidence in their day-to-day operations when working with code: "mistakes can be undone" is an something I’d like the audience to keep in mind. In the session, I will both talk about the theory and show the corresponding commands/tools in practice. I’ll be using both Git on the command line and the popular GUI "Tower" to show how to deal with mistakes in real-world scenarios.
Captions: 
	00:00:05,600 --> 00:00:11,550
first of all thank you for showing up at

00:00:08,220 --> 00:00:14,280
9:30 I know it's the first spot in the

00:00:11,550 --> 00:00:18,480
schedule but it means you're motivated

00:00:14,280 --> 00:00:21,680
that's good to see this talk will be

00:00:18,480 --> 00:00:25,140
about get and in particularly about

00:00:21,680 --> 00:00:28,980
surviving with git so I'm doing and

00:00:25,140 --> 00:00:32,430
recovering from mistakes and I feel I

00:00:28,980 --> 00:00:34,950
have to answer two questions first the

00:00:32,430 --> 00:00:38,640
first one is why the hell am i talking

00:00:34,950 --> 00:00:41,129
about get this is the the easy answer

00:00:38,640 --> 00:00:44,270
for me because I am the CEO and founder

00:00:41,129 --> 00:00:48,930
of tower tower is a git desktop client

00:00:44,270 --> 00:00:52,530
for the Mac end for Windows and we're

00:00:48,930 --> 00:00:56,870
we've been on the market for almost

00:00:52,530 --> 00:00:59,730
eight years and have worked with some

00:00:56,870 --> 00:01:04,350
good customers over the time over

00:00:59,730 --> 00:01:06,720
100,000 by now but the good news is this

00:01:04,350 --> 00:01:09,240
is not gonna be a talk about tower you

00:01:06,720 --> 00:01:12,479
will see tower in one or two occasions

00:01:09,240 --> 00:01:14,549
but it's a talk about git and I will do

00:01:12,479 --> 00:01:17,790
a lot of things on the command line for

00:01:14,549 --> 00:01:22,080
you so you will see me typing a lot the

00:01:17,790 --> 00:01:26,750
other question is why about undoing

00:01:22,080 --> 00:01:30,810
things with git in talking with our

00:01:26,750 --> 00:01:33,930
users and everybody who is using git we

00:01:30,810 --> 00:01:36,869
often hear that undoing things breaking

00:01:33,930 --> 00:01:39,450
things and recovering from from mistakes

00:01:36,869 --> 00:01:46,680
is of course a big topic for everybody

00:01:39,450 --> 00:01:51,060
and it helped me a lot to know what I

00:01:46,680 --> 00:01:54,119
can do to undo things mistakes it's you

00:01:51,060 --> 00:01:57,420
have a safety net with kit in your hands

00:01:54,119 --> 00:01:59,880
and I think it's great to know how to

00:01:57,420 --> 00:02:06,210
use it I mean that's the reason why kit

00:01:59,880 --> 00:02:08,910
is there actually okay and it's

00:02:06,210 --> 00:02:12,810
interesting to see I'm doing these get

00:02:08,910 --> 00:02:13,620
talks since quite a while now and I've

00:02:12,810 --> 00:02:16,620
talked

00:02:13,620 --> 00:02:18,180
to people in the audience 100 people in

00:02:16,620 --> 00:02:22,400
the audience so get seems to be a very

00:02:18,180 --> 00:02:22,400
volatile topic that's interesting to see

00:02:23,450 --> 00:02:29,700
good let's start with the first scenario

00:02:26,909 --> 00:02:32,280
or the first type of things that can go

00:02:29,700 --> 00:02:34,799
wrong and that is undoing local changes

00:02:32,280 --> 00:02:43,769
so changes that haven't been committed

00:02:34,799 --> 00:02:45,890
to the repository yet okay let's go so

00:02:43,769 --> 00:02:49,140
let's pretend this would be a very easy

00:02:45,890 --> 00:02:52,530
web project and we have a couple of

00:02:49,140 --> 00:02:56,099
changed files here two modifications for

00:02:52,530 --> 00:03:03,659
modifications and two deletions so let's

00:02:56,099 --> 00:03:06,540
look at one file in particular and see

00:03:03,659 --> 00:03:10,500
yes this looks like a stupid change so I

00:03:06,540 --> 00:03:12,269
want to undo this and undoing something

00:03:10,500 --> 00:03:15,629
like that is pretty easy you can use

00:03:12,269 --> 00:03:20,040
I'll go at the top you can use the git

00:03:15,629 --> 00:03:22,919
checkout command for this and tell it to

00:03:20,040 --> 00:03:24,630
which repository which revision you want

00:03:22,919 --> 00:03:29,510
to return it's a head revision in our

00:03:24,630 --> 00:03:31,859
case and on which file you want to work

00:03:29,510 --> 00:03:34,769
so you know get checkout from switching

00:03:31,859 --> 00:03:38,549
branches this is a quite a versatile

00:03:34,769 --> 00:03:41,849
command and in this case it undoes your

00:03:38,549 --> 00:03:46,139
local changes in that file and to prove

00:03:41,849 --> 00:03:48,530
that we can again get diff about HTML

00:03:46,139 --> 00:03:53,940
there's nothing there we can get status

00:03:48,530 --> 00:03:56,250
and we'll see it's not amongst the

00:03:53,940 --> 00:04:01,230
change files anymore so this is the

00:03:56,250 --> 00:04:04,349
first and probably easiest case and the

00:04:01,230 --> 00:04:09,169
good thing about get check out is it

00:04:04,349 --> 00:04:12,810
also works with deleted files so we have

00:04:09,169 --> 00:04:15,480
deleted error HTML in this case and if I

00:04:12,810 --> 00:04:19,620
want to restore it I can just use git

00:04:15,480 --> 00:04:22,620
checkout and it's not amongst the

00:04:19,620 --> 00:04:27,540
changed files anymore and it will appear

00:04:22,620 --> 00:04:29,970
here in our working copy again

00:04:27,540 --> 00:04:32,730
so this works for local changes no

00:04:29,970 --> 00:04:38,640
matter what you did if you change

00:04:32,730 --> 00:04:46,220
something or even deleted a file next

00:04:38,640 --> 00:04:50,880
level of granularity let's say and

00:04:46,220 --> 00:04:52,200
indeed I need a graphical user interface

00:04:50,880 --> 00:04:54,560
because I don't know the commands for

00:04:52,200 --> 00:04:59,100
that excuse me

00:04:54,560 --> 00:05:02,100
probably hard to see from the back as I

00:04:59,100 --> 00:05:06,150
said let's go one level more granular in

00:05:02,100 --> 00:05:08,340
this case so this is changes in a file

00:05:06,150 --> 00:05:11,790
in index.html we have two chunks two

00:05:08,340 --> 00:05:15,950
areas we've modified and in git we can

00:05:11,790 --> 00:05:20,960
also say just discard this whole chunk

00:05:15,950 --> 00:05:25,800
so undo the changes in this chunk voila

00:05:20,960 --> 00:05:27,660
as as we as we started out and we can

00:05:25,800 --> 00:05:31,350
even go and I find that really really

00:05:27,660 --> 00:05:34,740
helpful I can even say discard the

00:05:31,350 --> 00:05:37,290
changes in those two lines so this is

00:05:34,740 --> 00:05:39,240
really if you have a long file and have

00:05:37,290 --> 00:05:41,670
worked on it for a couple of days and a

00:05:39,240 --> 00:05:44,490
lot of modifications and you say well I

00:05:41,670 --> 00:05:49,890
want to return these parts of the file

00:05:44,490 --> 00:05:54,840
to its original state you can just do

00:05:49,890 --> 00:05:57,870
that too so everything is possible when

00:05:54,840 --> 00:05:59,790
it comes to undoing things undoing the

00:05:57,870 --> 00:06:03,440
whole changes in the complete file

00:05:59,790 --> 00:06:11,580
undoing a deletion or even undoing

00:06:03,440 --> 00:06:14,160
individual lines in a file and stepping

00:06:11,580 --> 00:06:18,390
all the way back in granularity if you

00:06:14,160 --> 00:06:20,370
want to undo everything you did since

00:06:18,390 --> 00:06:25,320
you last committed this is the git reset

00:06:20,370 --> 00:06:26,910
command with the hard option and again -

00:06:25,320 --> 00:06:28,500
which revision do you want to return to

00:06:26,910 --> 00:06:32,670
the head revision to the last committed

00:06:28,500 --> 00:06:36,210
revision and this well this is the big

00:06:32,670 --> 00:06:40,100
gun you just erased everything that you

00:06:36,210 --> 00:06:40,100
did that was not committed

00:06:40,440 --> 00:06:49,060
so a little wrap-up for this first part

00:06:46,300 --> 00:06:51,340
for undoing local changes you use get

00:06:49,060 --> 00:06:54,870
check out the revision and the filename

00:06:51,340 --> 00:06:58,270
to undo things in individual files and

00:06:54,870 --> 00:07:03,120
you use get reset hard to undo

00:06:58,270 --> 00:07:05,440
everything a little warning message here

00:07:03,120 --> 00:07:08,800
discarding uncommitted local changes

00:07:05,440 --> 00:07:11,170
cannot be undone this is the one thing I

00:07:08,800 --> 00:07:13,060
would say you cannot undo in get you

00:07:11,170 --> 00:07:15,730
can't undo and doing local changes

00:07:13,060 --> 00:07:17,830
because they have never been committed

00:07:15,730 --> 00:07:20,440
to the repository they've never been in

00:07:17,830 --> 00:07:23,620
gates database let's say like that so

00:07:20,440 --> 00:07:29,470
you can't undo that so be sure when you

00:07:23,620 --> 00:07:31,870
do that and that's everything okay so

00:07:29,470 --> 00:07:35,230
scenario number one undoing local

00:07:31,870 --> 00:07:37,480
changes scenario number two undoing

00:07:35,230 --> 00:07:43,360
committed changes so when you have

00:07:37,480 --> 00:07:46,210
committed bad stuff one very very easy

00:07:43,360 --> 00:07:48,160
case is you had a typo in your last

00:07:46,210 --> 00:07:52,480
commit message or forgot to add a file

00:07:48,160 --> 00:07:54,910
so this is this is one a one very common

00:07:52,480 --> 00:07:57,280
case it's easy to miss type a commit

00:07:54,910 --> 00:08:03,960
message or to forget something to

00:07:57,280 --> 00:08:03,960
include again work for me

00:08:10,270 --> 00:08:22,289
okay so mm I'll show you where we are I

00:08:17,680 --> 00:08:25,389
show you the history here so I have this

00:08:22,289 --> 00:08:29,560
terribly mistyped commit message right

00:08:25,389 --> 00:08:31,270
there and I want to correct it I'm lucky

00:08:29,560 --> 00:08:34,240
because it's the very last commit so I

00:08:31,270 --> 00:08:40,270
can very easily change that and this

00:08:34,240 --> 00:08:43,690
would be just like a normal commit but

00:08:40,270 --> 00:08:48,250
with the amend flag amend tells get to

00:08:43,690 --> 00:08:52,660
modify to actually replace the very last

00:08:48,250 --> 00:08:57,180
commit and I can finally correct

00:08:52,660 --> 00:09:02,620
my bad typo typos are indeed

00:08:57,180 --> 00:09:04,360
embarrassing it's very embarrassing if

00:09:02,620 --> 00:09:12,510
you mistype embarrassing though that's

00:09:04,360 --> 00:09:12,510
right and you will see if I go back here

00:09:21,450 --> 00:09:24,050
yeah

00:09:24,720 --> 00:09:27,980
do we have a real

00:09:42,230 --> 00:09:50,090
okay so it looks like nothing has

00:09:47,060 --> 00:09:53,030
happened it looks like I have never did

00:09:50,090 --> 00:09:55,490
that terrible typing mistake and because

00:09:53,030 --> 00:10:03,080
get replaced that very last commit with

00:09:55,490 --> 00:10:08,300
the amend flag and the next problem I

00:10:03,080 --> 00:10:10,940
could fix is what get status I it seems

00:10:08,300 --> 00:10:13,850
like I forgot to add this modification

00:10:10,940 --> 00:10:17,060
here in index.html I forgot to add it to

00:10:13,850 --> 00:10:20,450
that commit and I can easily just get

00:10:17,060 --> 00:10:23,960
add like I would with a normal commit

00:10:20,450 --> 00:10:26,320
let's say and then again use the commit

00:10:23,960 --> 00:10:29,320
command do you see that in the back no

00:10:26,320 --> 00:10:29,320
sorry

00:10:29,590 --> 00:10:38,450
the get commit command again with amend

00:10:33,650 --> 00:10:39,920
and in my case I even say no edit know

00:10:38,450 --> 00:10:42,230
what it means I don't want to change the

00:10:39,920 --> 00:10:45,140
commit message this time so I just want

00:10:42,230 --> 00:10:48,820
to add what I just added with a get add

00:10:45,140 --> 00:10:56,930
command and that's it anda menses please

00:10:48,820 --> 00:10:59,740
correct my last commit so I just added

00:10:56,930 --> 00:10:59,740
index

00:11:04,610 --> 00:11:07,329
get

00:11:18,510 --> 00:11:25,110
okay here it is I just had a look at the

00:11:22,620 --> 00:11:29,300
get log and see that index is now

00:11:25,110 --> 00:11:31,829
included in this very last commit so

00:11:29,300 --> 00:11:38,839
fixing the very last commit is easy with

00:11:31,829 --> 00:11:42,600
the amend flag with git commit good I

00:11:38,839 --> 00:11:44,579
should actually that's what you get when

00:11:42,600 --> 00:11:46,079
you work with development versions of

00:11:44,579 --> 00:11:48,740
your own software because I want to see

00:11:46,079 --> 00:11:48,740
that in Tower 2

00:11:48,980 --> 00:11:56,040
okay here we go so the index change that

00:11:53,550 --> 00:12:00,149
we just added after the fact let's say

00:11:56,040 --> 00:12:02,130
is now also part of this very commit and

00:12:00,149 --> 00:12:06,240
if I say this very commit I'm wrong

00:12:02,130 --> 00:12:08,339
because get really replaced that last

00:12:06,240 --> 00:12:11,790
commit this is not the same commit

00:12:08,339 --> 00:12:15,589
object as it was before I try to deal

00:12:11,790 --> 00:12:15,589
with it with get amend yeah

00:12:25,529 --> 00:12:31,319
you should be able to I don't know if

00:12:27,689 --> 00:12:34,499
it's if it does with gets commit amend

00:12:31,319 --> 00:12:36,629
this is the easiest tool that's why I'm

00:12:34,499 --> 00:12:39,329
showing you it because it works on the

00:12:36,629 --> 00:12:41,939
last commit but actually you're

00:12:39,329 --> 00:12:43,889
replacing the commit so I think you

00:12:41,939 --> 00:12:48,420
should also be able to correct the

00:12:43,889 --> 00:12:51,290
author the commit has changed and that's

00:12:48,420 --> 00:12:54,240
the important thing to keep in mind even

00:12:51,290 --> 00:12:57,180
twice actually because I I used the men

00:12:54,240 --> 00:13:00,329
two times one when I corrected the

00:12:57,180 --> 00:13:03,149
commit message and two when I added a

00:13:00,329 --> 00:13:05,939
file so we have a brand new commit

00:13:03,149 --> 00:13:08,339
object here so the one thing to keep in

00:13:05,939 --> 00:13:10,199
mind when you're using amend is don't

00:13:08,339 --> 00:13:12,120
use it on things you've already pushed

00:13:10,199 --> 00:13:14,819
because your colleagues will hate you

00:13:12,120 --> 00:13:18,449
because they have already that data and

00:13:14,819 --> 00:13:21,839
you're pushing the same the same commit

00:13:18,449 --> 00:13:25,199
again so use that on your local commits

00:13:21,839 --> 00:13:27,620
to clean up and this is this is I think

00:13:25,199 --> 00:13:30,569
you won't fall into this trap because

00:13:27,620 --> 00:13:32,699
the the use case for this is oh my god I

00:13:30,569 --> 00:13:35,279
just made a terrible typing mistake or I

00:13:32,699 --> 00:13:37,740
forgot that one file it's rare that

00:13:35,279 --> 00:13:39,750
someone missed types forgets to add

00:13:37,740 --> 00:13:42,029
something and immediately pushes it to

00:13:39,750 --> 00:13:44,519
the to the remote repository but keep in

00:13:42,029 --> 00:13:46,050
mind don't do this on commits that have

00:13:44,519 --> 00:13:49,970
been shared already that's the one

00:13:46,050 --> 00:13:49,970
reason or the one rule to keep in mind

00:13:50,149 --> 00:14:01,589
okay amend another scenario a different

00:13:57,899 --> 00:14:06,959
type of problem reverting a commit so

00:14:01,589 --> 00:14:09,329
the the scenario here is this commit was

00:14:06,959 --> 00:14:09,809
bad we want to undo this commit here in

00:14:09,329 --> 00:14:12,300
the middle

00:14:09,809 --> 00:14:14,759
everything that came afterwards c3 is

00:14:12,300 --> 00:14:16,319
perfectly fine we just have a problem

00:14:14,759 --> 00:14:18,420
somewhere in our commit history

00:14:16,319 --> 00:14:22,350
somewhere in the middle and this is a

00:14:18,420 --> 00:14:26,069
case for get revert and the great thing

00:14:22,350 --> 00:14:29,579
about get revert is git does it all for

00:14:26,069 --> 00:14:32,009
us it's totally automatic so when I say

00:14:29,579 --> 00:14:34,769
I'll do that in practice right now when

00:14:32,009 --> 00:14:37,410
I say revert this commit here please get

00:14:34,769 --> 00:14:39,279
automatically adds a new commit this is

00:14:37,410 --> 00:14:43,779
the the correcting commit lat

00:14:39,279 --> 00:14:47,079
say with changes that well revert the

00:14:43,779 --> 00:14:49,749
effects so if I change this line from

00:14:47,079 --> 00:14:52,779
this to this get is clever enough to

00:14:49,749 --> 00:14:57,660
change it backwards on its own in a new

00:14:52,779 --> 00:15:00,550
commit so actually and this is also a

00:14:57,660 --> 00:15:04,589
quite a good rule to keep in mind get

00:15:00,550 --> 00:15:08,860
rarely delete stuff so it doesn't go and

00:15:04,589 --> 00:15:11,529
delete c2 and add something new it

00:15:08,860 --> 00:15:14,439
almost always adds data and that's good

00:15:11,529 --> 00:15:16,720
to know so again it's very hard to break

00:15:14,439 --> 00:15:18,879
things with git it's always there

00:15:16,720 --> 00:15:24,339
somewhere you have to know where to look

00:15:18,879 --> 00:15:35,680
or which tool to use so I said this is

00:15:24,339 --> 00:15:38,290
quite easy let's let's pick this one and

00:15:35,680 --> 00:15:41,230
you'll see in this commit I changed

00:15:38,290 --> 00:15:43,240
about into about this project that's

00:15:41,230 --> 00:15:50,949
that's the whole change and let's say I

00:15:43,240 --> 00:15:53,860
want to undo this and I can just say git

00:15:50,949 --> 00:15:57,370
revert and the commit hash that I want

00:15:53,860 --> 00:15:59,980
to revert and that's actually it I'm

00:15:57,370 --> 00:16:02,379
asked to enter a commit message I'll go

00:15:59,980 --> 00:16:07,750
with the standard one that get proposes

00:16:02,379 --> 00:16:10,839
and that's it and here we go we have as

00:16:07,750 --> 00:16:13,990
promised a new commit in the history so

00:16:10,839 --> 00:16:18,100
nothing nothing deleted nothing removed

00:16:13,990 --> 00:16:20,889
and if we look here it automatically

00:16:18,100 --> 00:16:23,279
changed about this project back into

00:16:20,889 --> 00:16:26,819
about so this is all automatic

00:16:23,279 --> 00:16:26,819
automatically done for us

00:16:31,230 --> 00:16:44,920
you'll know it will show you people let

00:16:35,830 --> 00:16:46,930
you know yes you will have local changes

00:16:44,920 --> 00:16:48,940
and it will tell you a there is

00:16:46,930 --> 00:16:51,310
something you have to care for you have

00:16:48,940 --> 00:16:55,230
to look at and then you can probably

00:16:51,310 --> 00:16:55,230
commit after solving that

00:17:02,860 --> 00:17:11,400
no but that the question was if you can

00:17:07,720 --> 00:17:14,800
revert parts of a commit well yes and no

00:17:11,400 --> 00:17:16,240
you can add a flag when reverting that

00:17:14,800 --> 00:17:21,580
you don't want it automatically

00:17:16,240 --> 00:17:23,410
committed so get will just create local

00:17:21,580 --> 00:17:25,870
changes for you in your working copy and

00:17:23,410 --> 00:17:28,360
you can decide well I want to undo this

00:17:25,870 --> 00:17:32,280
and that and revert that and discard

00:17:28,360 --> 00:17:35,280
that so you're quite flexible with that

00:17:32,280 --> 00:17:35,280
yes

00:17:44,250 --> 00:17:48,750
that's a different part that's it's good

00:17:46,860 --> 00:17:51,270
that you asked that's a different

00:17:48,750 --> 00:17:53,850
scenario and a different command which

00:17:51,270 --> 00:17:56,610
we will show now but reverting is really

00:17:53,850 --> 00:17:59,100
only picking one bad guy or two bad guys

00:17:56,610 --> 00:18:01,049
in the middle you leave the rest of the

00:17:59,100 --> 00:18:02,760
history untouched and you don't want to

00:18:01,049 --> 00:18:06,000
change anything because everything that

00:18:02,760 --> 00:18:08,760
came afterwards is fine in this case if

00:18:06,000 --> 00:18:12,270
we're talking about that case you see

00:18:08,760 --> 00:18:14,780
well you had a bad day and produced well

00:18:12,270 --> 00:18:18,419
not optimal changes after see to

00:18:14,780 --> 00:18:20,520
probably had too many coffee and you

00:18:18,419 --> 00:18:22,500
want to return to c2 and forget

00:18:20,520 --> 00:18:25,409
everything that came afterwards that's

00:18:22,500 --> 00:18:27,270
the other case so and that's a different

00:18:25,409 --> 00:18:30,030
tool a different command that is what

00:18:27,270 --> 00:18:32,520
get reset is for so you really have to

00:18:30,030 --> 00:18:36,169
that the difficult part in undoing

00:18:32,520 --> 00:18:37,770
things in gatoring in in any system is

00:18:36,169 --> 00:18:39,480
understanding your scenario

00:18:37,770 --> 00:18:41,460
understanding the problem what's what's

00:18:39,480 --> 00:18:42,870
the problem and finding the right tool

00:18:41,460 --> 00:18:45,240
are picking the right tool that's

00:18:42,870 --> 00:18:46,950
actually the the job to do because what

00:18:45,240 --> 00:18:48,870
I show you is not difficult you just

00:18:46,950 --> 00:18:52,080
have to know and remember and and

00:18:48,870 --> 00:18:56,360
understand what scenario you're in so

00:18:52,080 --> 00:18:59,760
this here is really rolling back is a

00:18:56,360 --> 00:19:04,080
synonym for forget reset so you roll

00:18:59,760 --> 00:19:06,750
back your complete history to one point

00:19:04,080 --> 00:19:17,000
in time and forget about everything that

00:19:06,750 --> 00:19:17,000
came afterwards well that is yeah

00:19:20,730 --> 00:19:28,929
yeah that is actually the revert case so

00:19:25,380 --> 00:19:31,840
there's also in you know in in both both

00:19:28,929 --> 00:19:35,350
cases for commits in in the example so

00:19:31,840 --> 00:19:37,929
if you have that if c1 is bad or c2 is

00:19:35,350 --> 00:19:40,179
bad but everything else is okay you go

00:19:37,929 --> 00:19:42,820
with git revert but if you really want

00:19:40,179 --> 00:19:44,410
to return to some point in time and

00:19:42,820 --> 00:19:46,900
forget everything afterwards that is

00:19:44,410 --> 00:19:52,840
reset so you can do both but you have to

00:19:46,900 --> 00:19:58,470
decide do I want to reset or revert good

00:19:52,840 --> 00:20:04,420
so let's do that and let's return to

00:19:58,470 --> 00:20:07,780
this beautiful fella so I want to return

00:20:04,420 --> 00:20:10,330
to add simple robot 60 and forget

00:20:07,780 --> 00:20:12,730
everything that came afterwards and as

00:20:10,330 --> 00:20:16,720
promised that's not rocket science

00:20:12,730 --> 00:20:19,630
kid we said hard and the commit hash I

00:20:16,720 --> 00:20:20,230
want to return to and let's see what

00:20:19,630 --> 00:20:27,340
happened

00:20:20,230 --> 00:20:31,360
yep so I have to be careful how I say it

00:20:27,340 --> 00:20:34,600
it appears that the commit afterwards

00:20:31,360 --> 00:20:37,450
are deleted they're not there anymore

00:20:34,600 --> 00:20:40,809
let's say like that so we got what we

00:20:37,450 --> 00:20:45,750
wanted we returned to a previous point

00:20:40,809 --> 00:20:45,750
in time let's say with the reset command

00:20:51,470 --> 00:21:00,070
so as a little summary for the second

00:20:56,720 --> 00:21:04,549
type of mistakes for committed things

00:21:00,070 --> 00:21:08,899
you have three big tools I would say the

00:21:04,549 --> 00:21:12,710
command commit amend command which is

00:21:08,899 --> 00:21:15,379
only useful for the very last commit and

00:21:12,710 --> 00:21:19,100
only if it's not pushed yet that's that

00:21:15,379 --> 00:21:21,139
the thing in parentheses get revert if

00:21:19,100 --> 00:21:22,909
you have one or two commits in the

00:21:21,139 --> 00:21:24,860
middle that you wanna undo but leave the

00:21:22,909 --> 00:21:28,159
rest that came afterwards untouched and

00:21:24,860 --> 00:21:29,870
get reset hard to really go back in time

00:21:28,159 --> 00:21:36,009
and to rollback the complete project

00:21:29,870 --> 00:21:36,009
back yes please

00:21:42,029 --> 00:21:46,700
if you haven't pushed yeah

00:21:55,590 --> 00:22:00,780
use get amend delete the remote branch

00:21:58,920 --> 00:22:02,550
that nobody uses except for you and

00:22:00,780 --> 00:22:03,150
recreate the remote branch that's

00:22:02,550 --> 00:22:08,280
perfect

00:22:03,150 --> 00:22:09,030
it's yeah yeah absolutely yes yes

00:22:08,280 --> 00:22:11,400
exactly

00:22:09,030 --> 00:22:14,130
because you have you would have the same

00:22:11,400 --> 00:22:16,350
the same commit twice or three times in

00:22:14,130 --> 00:22:21,120
that case oh yeah but locally that's

00:22:16,350 --> 00:22:24,140
that's really a tool to to to clean up

00:22:21,120 --> 00:22:24,140
locally actually

00:22:33,420 --> 00:22:40,270
well not really so you'd at least have

00:22:38,170 --> 00:22:42,880
to to consult your colleagues if they

00:22:40,270 --> 00:22:45,670
base their work on you just took away

00:22:42,880 --> 00:22:47,560
some commits from them right so if they

00:22:45,670 --> 00:22:49,380
based their work on these new commits

00:22:47,560 --> 00:22:58,450
you'll have to talk a little bit and

00:22:49,380 --> 00:23:00,640
find a solution okay so next type of

00:22:58,450 --> 00:23:03,730
problem which is directly related to

00:23:00,640 --> 00:23:06,190
what we just did you think you want to

00:23:03,730 --> 00:23:08,850
reset and roll back in time you do that

00:23:06,190 --> 00:23:15,060
reset and you notice it was a bad idea

00:23:08,850 --> 00:23:19,240
so step four you panic yet and as I said

00:23:15,060 --> 00:23:21,640
it's you can really undo the undoing of

00:23:19,240 --> 00:23:24,880
undoing things in get you can undo

00:23:21,640 --> 00:23:26,890
everything and even that so when I when

00:23:24,880 --> 00:23:29,980
I showed you reset I I was careful to

00:23:26,890 --> 00:23:32,050
say it appears that these commits are

00:23:29,980 --> 00:23:33,700
deleted they are not to leave it rest

00:23:32,050 --> 00:23:35,530
assured everything is still there

00:23:33,700 --> 00:23:37,860
garbage collection and get kicks in

00:23:35,530 --> 00:23:39,880
after 30 days I think if nothing is

00:23:37,860 --> 00:23:42,610
referencing a commit so you have plenty

00:23:39,880 --> 00:23:45,940
of time to fix up even your bad fix ups

00:23:42,610 --> 00:23:52,030
so no problem so let's say let's look at

00:23:45,940 --> 00:23:55,390
this scenario here and the the tool in

00:23:52,030 --> 00:23:59,230
in in our tool set is good ref log so

00:23:55,390 --> 00:24:02,260
the ref log is a think of it as a

00:23:59,230 --> 00:24:06,220
journal a journal where get protocols

00:24:02,260 --> 00:24:07,720
all the important stuff the important

00:24:06,220 --> 00:24:10,300
stuff is the things that happened with

00:24:07,720 --> 00:24:15,940
the head pointer and get self-checkouts

00:24:10,300 --> 00:24:18,280
branch switches merges rebase --is all

00:24:15,940 --> 00:24:22,120
of the important things our protocol

00:24:18,280 --> 00:24:25,870
tourjournal here so everything is there

00:24:22,120 --> 00:24:34,480
for us if we have a problem and we seem

00:24:25,870 --> 00:24:36,700
to do yeah let's let's see how we can

00:24:34,480 --> 00:24:39,880
undo what we just did

00:24:36,700 --> 00:24:43,179
so our scenario is this at the moment we

00:24:39,880 --> 00:24:45,130
reset it to a couple of commits before

00:24:43,179 --> 00:24:47,020
and let's say we want to undo that

00:24:45,130 --> 00:24:51,580
because we noticed it was

00:24:47,020 --> 00:24:56,110
idea get Ref luck is the command that

00:24:51,580 --> 00:24:57,730
shows us what has been going on and you

00:24:56,110 --> 00:25:01,210
can read it from the top so the newest

00:24:57,730 --> 00:25:04,630
items are on the top and we see oh yeah

00:25:01,210 --> 00:25:08,020
there was a reset we moved to double

00:25:04,630 --> 00:25:11,170
zero to three C D D D and that was the

00:25:08,020 --> 00:25:15,220
bad thing so let's return to one step

00:25:11,170 --> 00:25:21,130
before and that's easy because you know

00:25:15,220 --> 00:25:27,820
the commands already it is again kid

00:25:21,130 --> 00:25:30,910
reset and voila we're back in the game

00:25:27,820 --> 00:25:35,500
nobody noticed that we broke everything

00:25:30,910 --> 00:25:37,570
and we are where we left off before so

00:25:35,500 --> 00:25:40,620
the ref log is really it's a really

00:25:37,570 --> 00:25:43,330
really powerful tool because it

00:25:40,620 --> 00:25:48,160
protocols these very important points in

00:25:43,330 --> 00:25:50,470
time and but there's everything there so

00:25:48,160 --> 00:25:55,750
this is your last insurance everything

00:25:50,470 --> 00:25:59,290
is still there new version of tower also

00:25:55,750 --> 00:26:01,720
supports the ref lock but it's too easy

00:25:59,290 --> 00:26:09,040
in the command line so if you know go

00:26:01,720 --> 00:26:13,180
ahead good well just to just to say that

00:26:09,040 --> 00:26:18,160
once to show you an alternative I'll

00:26:13,180 --> 00:26:24,000
reset here just as an alternative to do

00:26:18,160 --> 00:26:29,650
that you could also go and get branch

00:26:24,000 --> 00:26:32,710
happy ending so what I'm doing here is I

00:26:29,650 --> 00:26:35,110
create a new branch based on that all

00:26:32,710 --> 00:26:39,100
will commit that I just deleted with the

00:26:35,110 --> 00:26:42,790
reset this leaves you just a little more

00:26:39,100 --> 00:26:44,940
options so I guess you had a reason why

00:26:42,790 --> 00:26:47,050
you did that get reset on master I

00:26:44,940 --> 00:26:49,600
suppose so

00:26:47,050 --> 00:26:51,640
it's probably that you want to look

00:26:49,600 --> 00:26:55,060
something up you deleted something that

00:26:51,640 --> 00:26:58,360
you want to have a second look at and by

00:26:55,060 --> 00:27:00,500
creating a a temporary branch you can do

00:26:58,360 --> 00:27:02,510
just that so you have you have

00:27:00,500 --> 00:27:05,180
a lot of options how to restore things

00:27:02,510 --> 00:27:07,250
you don't have to reset on master you

00:27:05,180 --> 00:27:10,370
can create a new branch have a look and

00:27:07,250 --> 00:27:12,290
delete that branch again just to show

00:27:10,370 --> 00:27:22,330
you another option how to to deal with

00:27:12,290 --> 00:27:22,330
that and delete that yes merged

00:27:26,909 --> 00:27:41,350
good okay we are not running out of

00:27:39,370 --> 00:27:44,500
things that can go wrong this is the

00:27:41,350 --> 00:27:46,510
next type of thing that can go wrong you

00:27:44,500 --> 00:27:51,549
commit on the wrong branch that is very

00:27:46,510 --> 00:27:53,110
very very very very popular so you

00:27:51,549 --> 00:27:55,630
should have created a new branch

00:27:53,110 --> 00:27:57,730
actually but hey did commit is very

00:27:55,630 --> 00:28:01,470
quick so you committed on master

00:27:57,730 --> 00:28:03,880
probably which many teams don't like and

00:28:01,470 --> 00:28:05,950
you actually should have done that

00:28:03,880 --> 00:28:08,230
so you started developing a new feature

00:28:05,950 --> 00:28:11,760
let's say the login feature and this

00:28:08,230 --> 00:28:15,780
should be on a separate new branch

00:28:11,760 --> 00:28:15,780
so let's correct that

00:28:25,350 --> 00:28:31,559
okay yeah so we have the problem

00:28:28,350 --> 00:28:33,809
scenario already at hand you see a start

00:28:31,559 --> 00:28:37,250
new login feature commit right at the

00:28:33,809 --> 00:28:39,720
top and it's on master this smells so

00:28:37,250 --> 00:28:47,940
let's correct that and let's get a new

00:28:39,720 --> 00:28:51,380
branch a separate branch for that so the

00:28:47,940 --> 00:28:54,269
way to do that is to create a new branch

00:28:51,380 --> 00:28:59,759
let's say what was it feature login I

00:28:54,269 --> 00:29:02,730
guess yeah and this new branch is where

00:28:59,759 --> 00:29:05,610
we left off so this looks right start

00:29:02,730 --> 00:29:10,529
new login feature on the feature log in

00:29:05,610 --> 00:29:12,629
branch that looks looks good and it's

00:29:10,529 --> 00:29:15,840
the same tools you already know we just

00:29:12,629 --> 00:29:20,250
reset we just reset the master branch to

00:29:15,840 --> 00:29:22,909
that one commit before to that one

00:29:20,250 --> 00:29:22,909
commit before

00:29:33,560 --> 00:29:42,080
yeah and have what we wanted to have a

00:29:37,940 --> 00:29:48,890
clean new feature branch and most

00:29:42,080 --> 00:29:55,670
importantly a clean master branch so yep

00:29:48,890 --> 00:29:59,710
please mm-hmm

00:29:55,670 --> 00:30:03,700
let's look at that in a minute yeah

00:29:59,710 --> 00:30:08,180
because this is as if you knew my slides

00:30:03,700 --> 00:30:09,740
the next problem we're facing so when it

00:30:08,180 --> 00:30:11,690
should have been on a different branch a

00:30:09,740 --> 00:30:14,450
different branch that already existed so

00:30:11,690 --> 00:30:16,700
the log and branch is already there so

00:30:14,450 --> 00:30:19,250
why do we have that thing on master

00:30:16,700 --> 00:30:22,810
that's a slightly different problem and

00:30:19,250 --> 00:30:31,810
requires a slightly different angle so

00:30:22,810 --> 00:30:40,430
this is what we want to have actually so

00:30:31,810 --> 00:30:45,430
let's produce some changes sign up at

00:30:40,430 --> 00:30:45,430
that and commit it

00:30:57,240 --> 00:31:08,580
sign up for a newsletter ah well we'd

00:31:06,360 --> 00:31:16,770
have to simply rename it and commit it

00:31:08,580 --> 00:31:20,130
again so is that okay for everybody okay

00:31:16,770 --> 00:31:21,779
so we have this commit and master and it

00:31:20,130 --> 00:31:23,520
shouldn't have been on a new branch it

00:31:21,779 --> 00:31:26,190
should have been on an existing branch

00:31:23,520 --> 00:31:29,700
sign up for newsletter sounds like the

00:31:26,190 --> 00:31:38,010
newsletter branch and what we can do is

00:31:29,700 --> 00:31:43,649
simply cherry-pick cherry-pick is you

00:31:38,010 --> 00:31:46,320
can pick in the end any particular

00:31:43,649 --> 00:31:49,830
commit and put it on another branch

00:31:46,320 --> 00:31:53,240
let's say like that and the command for

00:31:49,830 --> 00:31:57,240
that so we now have that commit on the

00:31:53,240 --> 00:31:58,350
newsletter branch that's what we want on

00:31:57,240 --> 00:32:04,350
the command line it's git cherry-pick

00:31:58,350 --> 00:32:06,240
and and the commit hash and again what

00:32:04,350 --> 00:32:13,909
we have to do is clean up the master

00:32:06,240 --> 00:32:19,770
branch again with the git reset and and

00:32:13,909 --> 00:32:22,740
always be careful to to take care that

00:32:19,770 --> 00:32:24,450
the right branch is checked out that

00:32:22,740 --> 00:32:26,610
you're working on the right head branch

00:32:24,450 --> 00:32:29,190
that's the only thing to to look for in

00:32:26,610 --> 00:32:31,200
these situations but again we have a

00:32:29,190 --> 00:32:33,990
clean situation the master branch

00:32:31,200 --> 00:32:36,029
doesn't have that unwanted commit

00:32:33,990 --> 00:32:43,169
anymore and it's where it belongs it in

00:32:36,029 --> 00:32:47,820
the feature newsletter branch creating

00:32:43,169 --> 00:32:50,090
new branches get cherry-pick get reset

00:32:47,820 --> 00:32:53,659
these were the the commands for these

00:32:50,090 --> 00:32:53,659
types of problems

00:32:55,370 --> 00:33:04,919
good this is not a real problem but it's

00:32:59,909 --> 00:33:07,760
a question that often comes up or yeah

00:33:04,919 --> 00:33:07,760
question and

00:33:09,299 --> 00:33:13,960
so the question in detail is I have

00:33:11,830 --> 00:33:17,140
produced a couple of changes maybe

00:33:13,960 --> 00:33:20,440
merged local stuff and I'm wondering

00:33:17,140 --> 00:33:22,030
what exactly am I going to push right

00:33:20,440 --> 00:33:25,110
now because I've worked for a couple of

00:33:22,030 --> 00:33:29,110
days and and done crazy crazy things and

00:33:25,110 --> 00:33:31,419
this is where the git log command the

00:33:29,110 --> 00:33:34,330
git log command is incredibly versatile

00:33:31,419 --> 00:33:36,070
so there are parameters and flags all

00:33:34,330 --> 00:33:39,669
over the place you just have to know the

00:33:36,070 --> 00:33:43,240
ones you you need and the not flag is

00:33:39,669 --> 00:33:51,850
quite helpful in this case so let's look

00:33:43,240 --> 00:33:54,250
at that let's look at the general

00:33:51,850 --> 00:33:57,220
situation here so with the git branch

00:33:54,250 --> 00:33:59,080
command I I get an overview of what

00:33:57,220 --> 00:34:01,600
branches I have and currently have the

00:33:59,080 --> 00:34:04,059
master branch and I already get a basic

00:34:01,600 --> 00:34:07,299
information about what will happen if I

00:34:04,059 --> 00:34:09,639
push now because the branch command

00:34:07,299 --> 00:34:12,550
tells me the local master branch is

00:34:09,639 --> 00:34:14,649
connected is trekking the remote origin

00:34:12,550 --> 00:34:17,649
master branch and we're ahead

00:34:14,649 --> 00:34:20,679
- so ahead to means we have two local

00:34:17,649 --> 00:34:23,530
branches that are not on the remote yet

00:34:20,679 --> 00:34:25,810
so that's that's our first information

00:34:23,530 --> 00:34:28,570
we know we would push two commits but

00:34:25,810 --> 00:34:31,419
what exactly would be pushing and this

00:34:28,570 --> 00:34:36,550
is where a little bit more information

00:34:31,419 --> 00:34:40,030
is nice and let's use this not flag for

00:34:36,550 --> 00:34:42,700
lock and if say ah okay so these two

00:34:40,030 --> 00:34:44,800
commits are on master on the local

00:34:42,700 --> 00:34:48,220
master branch but not on the remote one

00:34:44,800 --> 00:34:53,790
so this is exactly what I would be

00:34:48,220 --> 00:34:53,790
pushing could be helpful in some cases

00:34:54,000 --> 00:34:59,080
[Music]

00:34:56,070 --> 00:35:01,510
in graphical user interfaces like tower

00:34:59,080 --> 00:35:04,630
you have the same information mostly

00:35:01,510 --> 00:35:08,050
next to a branch so this is the the

00:35:04,630 --> 00:35:11,410
equivalent of git branch - VV so you

00:35:08,050 --> 00:35:13,450
know two commits are local and not

00:35:11,410 --> 00:35:16,359
remote yet and you see those little

00:35:13,450 --> 00:35:18,520
arrow icons here and know exactly these

00:35:16,359 --> 00:35:22,119
two commits will be pushed on the next

00:35:18,520 --> 00:35:22,870
push and the same on the command line

00:35:22,119 --> 00:35:25,480
and in

00:35:22,870 --> 00:35:28,060
tower reverse if something hasn't been

00:35:25,480 --> 00:35:30,610
pulled yet so if you don't have data

00:35:28,060 --> 00:35:34,810
that is already on the remote the arrow

00:35:30,610 --> 00:35:37,420
points downwards or you are behind on

00:35:34,810 --> 00:35:38,740
the command line ahead means you have

00:35:37,420 --> 00:35:46,510
local commits that haven't been pushed

00:35:38,740 --> 00:35:51,460
behind means the other way around okay

00:35:46,510 --> 00:35:54,010
and one last half problem nothing broken

00:35:51,460 --> 00:35:58,440
but still something that is is rather

00:35:54,010 --> 00:36:02,980
ins interesting the get large file

00:35:58,440 --> 00:36:04,660
storage system well it's relatively new

00:36:02,980 --> 00:36:07,330
I would say one and a half years I think

00:36:04,660 --> 00:36:15,070
in in broader public

00:36:07,330 --> 00:36:18,310
the problem with versioning binary files

00:36:15,070 --> 00:36:20,140
big binary files is a natural one your

00:36:18,310 --> 00:36:22,450
local repository your repository in

00:36:20,140 --> 00:36:24,880
general will grow grow grow and grow

00:36:22,450 --> 00:36:27,820
incredibly grow so if your designer

00:36:24,880 --> 00:36:31,000
chooses to to check in Photoshop files

00:36:27,820 --> 00:36:32,590
or movie files which is totally ok so if

00:36:31,000 --> 00:36:34,750
you're working in a mixed team or if you

00:36:32,590 --> 00:36:36,340
have an acid repository or something

00:36:34,750 --> 00:36:37,930
like that that's that's good

00:36:36,340 --> 00:36:39,580
put binary files in version control

00:36:37,930 --> 00:36:42,250
because they want to be version

00:36:39,580 --> 00:36:45,040
controlled but what is not good is if he

00:36:42,250 --> 00:36:49,600
changes a pixel in that 100 megabyte

00:36:45,040 --> 00:36:51,280
Photoshop file it's another 100 megabyte

00:36:49,600 --> 00:36:54,940
Photoshop file that has to be versioned

00:36:51,280 --> 00:36:57,820
so you quickly get quite big

00:36:54,940 --> 00:37:01,570
repositories without get LFS and that's

00:36:57,820 --> 00:37:03,880
not not a good thing especially for

00:37:01,570 --> 00:37:05,710
people that want to start with that

00:37:03,880 --> 00:37:09,490
project and have to clone it because

00:37:05,710 --> 00:37:12,160
they have to wait for ages and a lot of

00:37:09,490 --> 00:37:15,910
crap on their hard drive so let's look

00:37:12,160 --> 00:37:19,510
for a different type to do this so what

00:37:15,910 --> 00:37:22,390
LFS does LFS is an extension that you

00:37:19,510 --> 00:37:26,290
can install and get a git LFS introduces

00:37:22,390 --> 00:37:27,910
two new things one an NFS cache on your

00:37:26,290 --> 00:37:31,660
local machine or in your local git

00:37:27,910 --> 00:37:34,410
repository and an LFS store on the

00:37:31,660 --> 00:37:36,730
remote end so your remote hosting

00:37:34,410 --> 00:37:39,670
provider has to support that

00:37:36,730 --> 00:37:42,340
I don't think anybody doesn't so github

00:37:39,670 --> 00:37:46,810
does it get lapped as it bitbucket does

00:37:42,340 --> 00:37:52,750
it instruct us so git LFS is quite well

00:37:46,810 --> 00:37:57,790
supported these days and the thing is do

00:37:52,750 --> 00:37:59,920
I have that here no the thing is the

00:37:57,790 --> 00:38:03,070
great thing is you only have the data

00:37:59,920 --> 00:38:06,100
that you need locally that's the big

00:38:03,070 --> 00:38:08,860
change you don't have all of the data

00:38:06,100 --> 00:38:11,890
that has been produced over time so if

00:38:08,860 --> 00:38:15,580
if you have ten versions of that huge

00:38:11,890 --> 00:38:18,880
movie audio Photoshop file and then you

00:38:15,580 --> 00:38:23,470
will only have the version you need need

00:38:18,880 --> 00:38:26,380
is a little bit flexible said but get

00:38:23,470 --> 00:38:29,670
LFS knows what revisions you need and

00:38:26,380 --> 00:38:33,550
checks them out for you so by default

00:38:29,670 --> 00:38:37,060
locally you only have tiny tiny pointers

00:38:33,550 --> 00:38:38,530
to those huge files and when you need

00:38:37,060 --> 00:38:40,570
those files when you really need them

00:38:38,530 --> 00:38:44,200
when you check out a revision with that

00:38:40,570 --> 00:38:46,930
huge file get LFS notices and gets you

00:38:44,200 --> 00:38:51,040
the data you need on demand and that's

00:38:46,930 --> 00:38:53,710
the big change so of course your remote

00:38:51,040 --> 00:38:57,400
repository and the LFS store remotely

00:38:53,710 --> 00:38:59,710
will grow with growing data that's

00:38:57,400 --> 00:39:03,280
that's okay you can't avoid that but

00:38:59,710 --> 00:39:04,990
your local repository is lean and only

00:39:03,280 --> 00:39:09,460
contains the stuff you need that's the

00:39:04,990 --> 00:39:13,240
big change good so pointers instead of

00:39:09,460 --> 00:39:15,790
real data is the solution here and it's

00:39:13,240 --> 00:39:18,520
it's too easy to actually show install

00:39:15,790 --> 00:39:22,570
it and then you can tell git LFS to

00:39:18,520 --> 00:39:26,110
track certain files or certain types of

00:39:22,570 --> 00:39:36,120
files so please watch all movie files

00:39:26,110 --> 00:39:41,380
and take care of them with LFS good so

00:39:36,120 --> 00:39:43,660
two dilemma announcements one is if you

00:39:41,380 --> 00:39:47,380
want to learn more about get not only

00:39:43,660 --> 00:39:49,240
tower mostly about really get then go to

00:39:47,380 --> 00:39:50,110
our learn page guitar that come slash

00:39:49,240 --> 00:39:53,620
learn

00:39:50,110 --> 00:39:56,440
there's free ebooks the video course

00:39:53,620 --> 00:39:58,360
teaches everything and as I said most

00:39:56,440 --> 00:40:03,010
stuff is really forget and not only for

00:39:58,360 --> 00:40:05,620
tower so enjoy and lastly if you want to

00:40:03,010 --> 00:40:07,120
try a tower for Mac or Windows this is a

00:40:05,620 --> 00:40:09,580
good point in time because we have a

00:40:07,120 --> 00:40:12,550
public beta for a new version and it's

00:40:09,580 --> 00:40:15,520
free at the moment so if you want to try

00:40:12,550 --> 00:40:17,320
it out go to Qatar or Google tower beta

00:40:15,520 --> 00:40:19,980
that's better because the the URL is a

00:40:17,320 --> 00:40:23,200
different one and try it for free that's

00:40:19,980 --> 00:40:27,670
the only advertisement I I dare to to

00:40:23,200 --> 00:40:33,750
bring here good that's it from from my

00:40:27,670 --> 00:40:33,750
side questions remarks anything

00:40:51,980 --> 00:40:58,230
not really I would say there is sub-tree

00:40:54,930 --> 00:41:00,330
and it's it's a religious fight between

00:40:58,230 --> 00:41:03,360
those who like subtrees and those who

00:41:00,330 --> 00:41:05,820
likes sub-modules but i would i would

00:41:03,360 --> 00:41:08,400
say that sub-modules have won that

00:41:05,820 --> 00:41:13,170
religious war somehow they are more

00:41:08,400 --> 00:41:14,520
popular and more widely used and i just

00:41:13,170 --> 00:41:18,080
have to say yes they're a pain in the

00:41:14,520 --> 00:41:21,810
ass to to to manage and honestly i

00:41:18,080 --> 00:41:23,640
couldn't do it without tower because the

00:41:21,810 --> 00:41:26,100
configuration is spread over three

00:41:23,640 --> 00:41:28,320
different files it's indeed modules and

00:41:26,100 --> 00:41:30,120
gate / modules it's in the guid modules

00:41:28,320 --> 00:41:32,370
file it's somewhere else it's it's

00:41:30,120 --> 00:41:35,190
really a pain so I wouldn't touch it

00:41:32,370 --> 00:41:39,830
without a graphical user interface

00:41:35,190 --> 00:41:44,280
that's the I'm sorry just not easier

00:41:39,830 --> 00:41:47,310
yeah there's this those little things I

00:41:44,280 --> 00:41:49,320
mean you when you when you check out a

00:41:47,310 --> 00:41:53,190
different branch and you have different

00:41:49,320 --> 00:41:55,650
sub modules or different revisions in in

00:41:53,190 --> 00:41:58,230
in these branches of a sub module get by

00:41:55,650 --> 00:41:59,970
default doesn't fix that for you so you

00:41:58,230 --> 00:42:01,860
have to remind yourself oh I just

00:41:59,970 --> 00:42:02,670
switched the branch and I have to update

00:42:01,860 --> 00:42:10,680
the sub module

00:42:02,670 --> 00:42:12,830
come on that's not good no well yes it

00:42:10,680 --> 00:42:12,830
does

00:42:17,490 --> 00:42:23,180
good thank you very much for your

00:42:20,190 --> 00:42:27,110
attention and have a great conference

00:42:23,180 --> 00:42:32,040
[Applause]

00:42:27,110 --> 00:42:32,040

YouTube URL: https://www.youtube.com/watch?v=FsSTd4Vcm90


