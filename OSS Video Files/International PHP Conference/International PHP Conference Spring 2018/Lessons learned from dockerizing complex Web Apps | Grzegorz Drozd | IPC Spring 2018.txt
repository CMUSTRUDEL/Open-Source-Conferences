Title: Lessons learned from dockerizing complex Web Apps | Grzegorz Drozd | IPC Spring 2018
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2018
Description: 
	Grzegorz Drozd (Duze O): This session deals with what we learned from putting Perl, PHP, MySQL, Solr, Redis, Queues, Cassandra, AWS Services, web applications, API endpoints and off-line scripts processing into Docker containers. It fits great.
Captions: 
	00:00:05,420 --> 00:00:12,269
so hello I'm Greg I work as a software

00:00:09,540 --> 00:00:15,450
architect slash senior developer for a

00:00:12,269 --> 00:00:17,900
company in the UK that is dealing with

00:00:15,450 --> 00:00:21,390
reservoirs processing the resumes and

00:00:17,900 --> 00:00:23,670
certain candidates I also do a freelance

00:00:21,390 --> 00:00:25,529
stuff so if any of you need some help

00:00:23,670 --> 00:00:29,699
with putting the applications into

00:00:25,529 --> 00:00:32,219
docker containers you can contact me so

00:00:29,699 --> 00:00:34,829
first of all they're complicated

00:00:32,219 --> 00:00:37,680
it's like a big word it can mean

00:00:34,829 --> 00:00:40,440
multiple things I will explain to you

00:00:37,680 --> 00:00:43,260
what we thought it was a complicated

00:00:40,440 --> 00:00:48,030
application and how it got even more

00:00:43,260 --> 00:00:50,610
complex so we started with PHP and perl

00:00:48,030 --> 00:00:53,480
application some of the work was done in

00:00:50,610 --> 00:00:57,420
PHP some of the work was done in in perl

00:00:53,480 --> 00:01:00,390
behind nginx there was a web and back

00:00:57,420 --> 00:01:03,449
office we use all my sequel s3 and Redis

00:01:00,390 --> 00:01:06,390
so pretty pretty standard except for the

00:01:03,449 --> 00:01:08,850
PHP and perl so the half of the

00:01:06,390 --> 00:01:12,390
application was in PHP half was in Perl

00:01:08,850 --> 00:01:18,000
with some custom extensions for both PHP

00:01:12,390 --> 00:01:20,610
and perl for sole for example so new

00:01:18,000 --> 00:01:24,119
developer that started with starting

00:01:20,610 --> 00:01:26,430
working had to spend whole day preparing

00:01:24,119 --> 00:01:29,280
the environment downloading all the all

00:01:26,430 --> 00:01:32,100
the stuff and you know there's one

00:01:29,280 --> 00:01:34,740
walkthrough for debian second one for

00:01:32,100 --> 00:01:39,020
Ubuntu second one for the Red Hat for

00:01:34,740 --> 00:01:42,630
for for other systems Windows is

00:01:39,020 --> 00:01:45,930
separate thing because web developers

00:01:42,630 --> 00:01:50,180
use photoshop and windows for for

00:01:45,930 --> 00:01:53,130
accessing the web applications so it was

00:01:50,180 --> 00:01:55,110
complex in terms of many multiple

00:01:53,130 --> 00:01:58,290
elements but the application itself

00:01:55,110 --> 00:02:00,840
wasn't compact that complex but in time

00:01:58,290 --> 00:02:03,869
there was there was more we ditched perl

00:02:00,840 --> 00:02:05,700
switch entirely to PHP but there was a

00:02:03,869 --> 00:02:08,250
partner API there was a background

00:02:05,700 --> 00:02:10,530
processing we created our own internal

00:02:08,250 --> 00:02:12,959
API that was using soul and

00:02:10,530 --> 00:02:13,800
elasticsearch we used Kisan we were

00:02:12,959 --> 00:02:17,640
using Cassandra

00:02:13,800 --> 00:02:22,830
my sequel SQS s-300s so the number of

00:02:17,640 --> 00:02:26,240
elements is growing and preparing

00:02:22,830 --> 00:02:30,330
everything for deployment either on

00:02:26,240 --> 00:02:34,520
staging server or developer machine it

00:02:30,330 --> 00:02:40,620
was taking more and more time that's why

00:02:34,520 --> 00:02:45,060
we developed a plan to solve that issue

00:02:40,620 --> 00:02:48,510
and we we need we were requiring speed

00:02:45,060 --> 00:02:50,480
of deployment ease of use ability to

00:02:48,510 --> 00:02:53,460
repeat the environment multiple times

00:02:50,480 --> 00:02:56,970
ability to move everything the version

00:02:53,460 --> 00:02:58,800
stuff so environment is matching the

00:02:56,970 --> 00:03:01,620
application version if we develop

00:02:58,800 --> 00:03:03,390
something new and environment changes it

00:03:01,620 --> 00:03:05,810
also matches the application version and

00:03:03,390 --> 00:03:09,740
we can switch back and forth and

00:03:05,810 --> 00:03:13,170
security so enter toker

00:03:09,740 --> 00:03:17,160
show of hands who's using docker in any

00:03:13,170 --> 00:03:22,230
capacity so probably already know of

00:03:17,160 --> 00:03:25,980
that docker is a response for the

00:03:22,230 --> 00:03:31,380
standard question that it works it just

00:03:25,980 --> 00:03:34,350
works but docker has a lot of features

00:03:31,380 --> 00:03:38,700
and we as a company we are using only

00:03:34,350 --> 00:03:42,480
the this part of it so it's not all it's

00:03:38,700 --> 00:03:44,190
not meant to be a guide for answer for

00:03:42,480 --> 00:03:48,450
every question this is only our

00:03:44,190 --> 00:03:51,300
perspective besides docker we are using

00:03:48,450 --> 00:03:54,209
vagrant and think for the whole

00:03:51,300 --> 00:03:56,489
environment and if you are interested I

00:03:54,209 --> 00:04:00,989
have a second presentation tomorrow more

00:03:56,489 --> 00:04:05,120
about vagrant and Fink and docker in the

00:04:00,989 --> 00:04:08,760
bigger room with more people no pressure

00:04:05,120 --> 00:04:12,650
I heard this question a lot why do we

00:04:08,760 --> 00:04:15,930
use vagrant instead of docker compose

00:04:12,650 --> 00:04:19,410
because when we started the vagrant was

00:04:15,930 --> 00:04:21,690
more popular so we start using it it's

00:04:19,410 --> 00:04:24,419
scripted this is very important because

00:04:21,690 --> 00:04:27,520
docker compose is just a file you cannot

00:04:24,419 --> 00:04:29,919
do anything it it just lists you stuff

00:04:27,520 --> 00:04:31,599
to process it or prepare it you would

00:04:29,919 --> 00:04:36,069
have to write something from from

00:04:31,599 --> 00:04:40,690
scratch and vacuum file is a ruby ruby

00:04:36,069 --> 00:04:43,419
script so you can code in it and it's

00:04:40,690 --> 00:04:46,919
better windows because in manages the

00:04:43,419 --> 00:04:49,330
vid 12 box vm and this is important for

00:04:46,919 --> 00:04:55,030
for the front and stuff for the people

00:04:49,330 --> 00:05:00,430
that working on windows and photoshop so

00:04:55,030 --> 00:05:03,099
how do we work to start environment it's

00:05:00,430 --> 00:05:05,430
only one command before that it was the

00:05:03,099 --> 00:05:08,560
whole day shafting multiple commands

00:05:05,430 --> 00:05:12,490
downloading multiple packages it was a

00:05:08,560 --> 00:05:14,620
mess so this is quite an improvement we

00:05:12,490 --> 00:05:20,979
have a docker file for every project and

00:05:14,620 --> 00:05:22,900
that extends the base image we run all

00:05:20,979 --> 00:05:25,569
those all those images on the developer

00:05:22,900 --> 00:05:28,300
machine we mount the code from the host

00:05:25,569 --> 00:05:33,789
system so developer is working on a code

00:05:28,300 --> 00:05:35,500
and a5 and he sees the the change in

00:05:33,789 --> 00:05:39,219
front of it there is one container with

00:05:35,500 --> 00:05:41,530
nginx and developer when there is a

00:05:39,219 --> 00:05:43,120
change in the environment he pushes the

00:05:41,530 --> 00:05:46,090
code the docker file only or the

00:05:43,120 --> 00:05:48,460
background file or the nginx config or

00:05:46,090 --> 00:05:51,120
whatever only this for to the repository

00:05:48,460 --> 00:05:53,710
so the docker image is not committed

00:05:51,120 --> 00:05:57,550
there is a extra box extension there

00:05:53,710 --> 00:05:59,560
there's xhf probe there and some other

00:05:57,550 --> 00:06:01,509
tools so this is like the only

00:05:59,560 --> 00:06:04,029
difference is we mount an additional

00:06:01,509 --> 00:06:09,180
catalog and we include one additional

00:06:04,029 --> 00:06:12,669
config file too on the developer machine

00:06:09,180 --> 00:06:14,409
then Jenkins orchestrates our

00:06:12,669 --> 00:06:17,349
deployments on the staging and testing

00:06:14,409 --> 00:06:20,949
service so it gets the request using the

00:06:17,349 --> 00:06:23,409
web hooks he downloads the code from the

00:06:20,949 --> 00:06:25,990
gate with the docker file image is

00:06:23,409 --> 00:06:27,490
created container is launched and the

00:06:25,990 --> 00:06:29,949
Nexxus we started from the on the

00:06:27,490 --> 00:06:32,469
staging server the unit tests are

00:06:29,949 --> 00:06:34,389
running inside the container with the

00:06:32,469 --> 00:06:37,649
same version of PHP and all the

00:06:34,389 --> 00:06:39,820
extensions that we use on production

00:06:37,649 --> 00:06:41,169
integration tests functional functional

00:06:39,820 --> 00:06:42,520
tests except

00:06:41,169 --> 00:06:44,919
everything is running on this one

00:06:42,520 --> 00:06:47,229
container and the container is mounted

00:06:44,919 --> 00:06:49,389
and visible and running on the internal

00:06:47,229 --> 00:06:51,699
network under the name like branch

00:06:49,389 --> 00:06:54,129
something something so if we need to

00:06:51,699 --> 00:06:56,289
show the code to someone we just deploy

00:06:54,129 --> 00:06:58,719
to staging send the link to the for

00:06:56,289 --> 00:07:02,560
example the business or to the front-end

00:06:58,719 --> 00:07:06,729
to show the error or something so it's

00:07:02,560 --> 00:07:11,229
running on staging server then for the

00:07:06,729 --> 00:07:13,240
master there is a additional step when

00:07:11,229 --> 00:07:15,909
we start to integrate for the next

00:07:13,240 --> 00:07:18,759
version we take the container with the

00:07:15,909 --> 00:07:21,819
master branch exactly the same as before

00:07:18,759 --> 00:07:25,270
the the one before and we push it to the

00:07:21,819 --> 00:07:27,129
repository we use the other Amazon

00:07:25,270 --> 00:07:31,270
repository for the elastic container

00:07:27,129 --> 00:07:33,819
service and after this point the image

00:07:31,270 --> 00:07:37,750
itself is not changed in any way so it's

00:07:33,819 --> 00:07:41,080
running one more on one more service the

00:07:37,750 --> 00:07:43,210
on one more layer the accepted test

00:07:41,080 --> 00:07:46,029
before the new version is released and

00:07:43,210 --> 00:07:50,860
the same image is now is then pushed or

00:07:46,029 --> 00:07:53,740
pulled on the production so on every

00:07:50,860 --> 00:07:55,810
server we do pull of the image we remove

00:07:53,740 --> 00:07:58,419
the server from load balancer we run the

00:07:55,810 --> 00:07:59,919
new version and we add server to the to

00:07:58,419 --> 00:08:03,310
the load balancer pretty pretty simple

00:07:59,919 --> 00:08:05,500
stuff the background processing we do

00:08:03,310 --> 00:08:08,849
have a lot of scripts that are running

00:08:05,500 --> 00:08:12,069
using either Chrome or it cron or

00:08:08,849 --> 00:08:15,069
supervise it but the code is prepared to

00:08:12,069 --> 00:08:17,169
run on small chunks of data so it

00:08:15,069 --> 00:08:19,990
fetches something from sqs or database

00:08:17,169 --> 00:08:23,020
or some event from cassandra he process

00:08:19,990 --> 00:08:25,779
it and then dies that's why when we

00:08:23,020 --> 00:08:28,360
replace the image on the local when we

00:08:25,779 --> 00:08:30,370
do good poke with dr. pol and the new

00:08:28,360 --> 00:08:32,800
image is downloaded the next iteration

00:08:30,370 --> 00:08:36,810
of the cron jobs or supervisor or

00:08:32,800 --> 00:08:36,810
whatever it will run on the new code

00:08:38,640 --> 00:08:50,709
docker is not only for Linux we can use

00:08:45,579 --> 00:08:54,990
it for both on Windows for both native

00:08:50,709 --> 00:09:00,779
applications so exactly the same as

00:08:54,990 --> 00:09:03,600
Linux we just deployed and in the recent

00:09:00,779 --> 00:09:05,850
versions I haven't tested it myself

00:09:03,600 --> 00:09:09,810
and we didn't make migrated yet from

00:09:05,850 --> 00:09:12,089
vagrant with the we lived with Linux so

00:09:09,810 --> 00:09:14,730
you can use something that's called

00:09:12,089 --> 00:09:17,360
liner so if there's a typo there Linux

00:09:14,730 --> 00:09:21,899
container or Windows it's like a

00:09:17,360 --> 00:09:26,310
microkernel with with one process

00:09:21,899 --> 00:09:29,610
running so it's more like like a running

00:09:26,310 --> 00:09:34,140
of the on Linux binary on the windows

00:09:29,610 --> 00:09:37,830
host and you can run on the same doctor

00:09:34,140 --> 00:09:41,480
damn demon you can run both lining Linux

00:09:37,830 --> 00:09:45,510
binaries and Windows but it's not

00:09:41,480 --> 00:09:48,990
production ready yet so it requires

00:09:45,510 --> 00:09:51,570
you're running hyper-v so only Windows

00:09:48,990 --> 00:09:54,750
Professional and Windows Server the home

00:09:51,570 --> 00:09:57,899
version is not included there and when

00:09:54,750 --> 00:10:00,149
the hyper-v is enabled it will disable

00:09:57,899 --> 00:10:05,040
the VirtualBox so it cannot run at the

00:10:00,149 --> 00:10:09,870
same time I haven't tested it but you

00:10:05,040 --> 00:10:13,850
can run Apache on the same binary as on

00:10:09,870 --> 00:10:17,640
Linux on Windows machine and it works

00:10:13,850 --> 00:10:19,350
supposedly the things that are not

00:10:17,640 --> 00:10:21,690
working the docker swarm is not

00:10:19,350 --> 00:10:25,050
supported at all the networking is not

00:10:21,690 --> 00:10:27,480
as good as some Linux so for example the

00:10:25,050 --> 00:10:29,970
the ports are not shared on the

00:10:27,480 --> 00:10:34,200
localhost Aaliyah's you need to have a

00:10:29,970 --> 00:10:36,149
container IP to get it you need to run

00:10:34,200 --> 00:10:41,520
something like that does something like

00:10:36,149 --> 00:10:45,540
this get IP and then use it on the in

00:10:41,520 --> 00:10:49,760
the URL on the browser and I am notify

00:10:45,540 --> 00:10:55,410
does not work so no js' will not work on

00:10:49,760 --> 00:10:58,560
on the container on the on windows so

00:10:55,410 --> 00:11:02,459
that was the short information about

00:10:58,560 --> 00:11:04,529
what we how we do it and what we do now

00:11:02,459 --> 00:11:08,860
the stuff that we learned in the the

00:11:04,529 --> 00:11:12,340
hard way so we don't use the

00:11:08,860 --> 00:11:14,230
for everything we do have databases we

00:11:12,340 --> 00:11:17,920
do we do have soul we do have

00:11:14,230 --> 00:11:20,920
elasticsearch sqs s3 and everything we

00:11:17,920 --> 00:11:27,370
tried to run it self-contained on a

00:11:20,920 --> 00:11:30,730
laptop but our database is 100 gigabytes

00:11:27,370 --> 00:11:33,960
so every time importing that stuff from

00:11:30,730 --> 00:11:37,150
from somewhere we defy the purpose of

00:11:33,960 --> 00:11:41,080
easily switchable versions of the of the

00:11:37,150 --> 00:11:43,630
code so if your application is small

00:11:41,080 --> 00:11:46,900
enough like one gigabyte 10 gigabytes

00:11:43,630 --> 00:11:49,750
and the import can take five minutes you

00:11:46,900 --> 00:11:53,200
can live with that but out in our case

00:11:49,750 --> 00:11:56,380
we just have on a staging server we have

00:11:53,200 --> 00:11:59,560
a developer database if there are some

00:11:56,380 --> 00:12:02,920
new columns or some new tables we try to

00:11:59,560 --> 00:12:04,810
make it backward compatible if not there

00:12:02,920 --> 00:12:07,480
is a second instance created and then

00:12:04,810 --> 00:12:10,180
developer works on this copying data

00:12:07,480 --> 00:12:13,750
races in IDs on Amazon is pretty quick

00:12:10,180 --> 00:12:18,640
so you can just move it and create your

00:12:13,750 --> 00:12:21,460
stuff there in case you you try to run

00:12:18,640 --> 00:12:23,770
it in the docker container on the local

00:12:21,460 --> 00:12:26,380
machine on on developer workstation

00:12:23,770 --> 00:12:30,610
there's an issue B with synchronization

00:12:26,380 --> 00:12:33,280
of the changes so you you have to either

00:12:30,610 --> 00:12:36,280
run it every time from the scratch like

00:12:33,280 --> 00:12:37,870
get the structure SQL file from the

00:12:36,280 --> 00:12:40,270
repository and create it from the

00:12:37,870 --> 00:12:43,140
scratch every time or you would have to

00:12:40,270 --> 00:12:46,960
or you have you will have an issue with

00:12:43,140 --> 00:12:48,880
structure changes new columns someone

00:12:46,960 --> 00:12:50,890
goes away on a vacation for two weeks

00:12:48,880 --> 00:12:52,930
then he comes back and the application

00:12:50,890 --> 00:12:56,440
doesn't work because someone removed

00:12:52,930 --> 00:13:01,000
some column and so we decided that for

00:12:56,440 --> 00:13:04,090
data storage so my sequel saw an elastic

00:13:01,000 --> 00:13:06,850
search those are the services that we

00:13:04,090 --> 00:13:10,720
use for the common one so we have it on

00:13:06,850 --> 00:13:13,420
the on the staging server because the

00:13:10,720 --> 00:13:16,000
for the for the neo sequel databases or

00:13:13,420 --> 00:13:19,060
storage document storage services the

00:13:16,000 --> 00:13:23,310
issue is the same importing would have

00:13:19,060 --> 00:13:23,310
to be from the scratch every time

00:13:25,860 --> 00:13:32,889
how do we link how do we maintain this

00:13:30,309 --> 00:13:35,739
the multiple containers between each

00:13:32,889 --> 00:13:39,699
other so docker has a great great thing

00:13:35,739 --> 00:13:44,829
that it's called link and you can

00:13:39,699 --> 00:13:48,600
connect docker container for example

00:13:44,829 --> 00:13:51,610
database instance that's exposing port

00:13:48,600 --> 00:13:53,619
and when you run it it will create

00:13:51,610 --> 00:13:56,350
environment variable that is available

00:13:53,619 --> 00:13:59,049
on other containers and in this variable

00:13:56,350 --> 00:14:04,379
you will have a string that is like

00:13:59,049 --> 00:14:07,029
tcp/ip TCP colon slash slash IP and port

00:14:04,379 --> 00:14:08,860
different than this than this one but

00:14:07,029 --> 00:14:11,559
this this would be a port that you can

00:14:08,860 --> 00:14:15,600
connect my sequel from other container

00:14:11,559 --> 00:14:18,819
and the great part of it is it that

00:14:15,600 --> 00:14:21,939
environment variable you can reuse and

00:14:18,819 --> 00:14:25,269
just set it to disrupt the same value

00:14:21,939 --> 00:14:28,360
for example on production so in our

00:14:25,269 --> 00:14:33,429
config files we use only this kind of

00:14:28,360 --> 00:14:35,559
string to to store the values so on the

00:14:33,429 --> 00:14:38,949
developer workstation the link command

00:14:35,559 --> 00:14:42,730
will do everything for us on staging

00:14:38,949 --> 00:14:45,879
when we have my sequel database also in

00:14:42,730 --> 00:14:47,769
the container it will do it or if we

00:14:45,879 --> 00:14:50,860
have a separate instance on production

00:14:47,769 --> 00:14:53,619
or on staging we can just provide

00:14:50,860 --> 00:14:57,369
environment variable with the value that

00:14:53,619 --> 00:14:59,110
we want to use so it's the you don't you

00:14:57,369 --> 00:15:01,809
don't have to have a separate

00:14:59,110 --> 00:15:03,429
environment for developer second

00:15:01,809 --> 00:15:06,069
separate separate environment for

00:15:03,429 --> 00:15:09,749
production you just use the environment

00:15:06,069 --> 00:15:09,749
variables and it just works

00:15:11,429 --> 00:15:16,329
if you have multiple Dockers like

00:15:14,439 --> 00:15:18,970
multiple staging servers and you want to

00:15:16,329 --> 00:15:22,299
do some operation on all of them like a

00:15:18,970 --> 00:15:25,929
cleaning removing of the old images you

00:15:22,299 --> 00:15:29,499
can connect to docker using socket so

00:15:25,929 --> 00:15:32,769
SSH create a socket in this directory

00:15:29,499 --> 00:15:36,250
that will point to this file on the

00:15:32,769 --> 00:15:37,780
remote machine use the credentials

00:15:36,250 --> 00:15:40,180
and in the second term you know because

00:15:37,780 --> 00:15:42,270
this will have to stay connected on the

00:15:40,180 --> 00:15:45,400
second terminal you expose this

00:15:42,270 --> 00:15:49,150
environment variable with the same file

00:15:45,400 --> 00:15:52,360
and every operation on this machine seen

00:15:49,150 --> 00:15:55,390
on this terminal is done on a remote

00:15:52,360 --> 00:15:59,670
server so in our case we have a multiple

00:15:55,390 --> 00:16:03,880
staging servers and once a week we just

00:15:59,670 --> 00:16:08,280
iterate over them connect to every one

00:16:03,880 --> 00:16:08,280
and remove for example old images I

00:16:13,950 --> 00:16:19,930
think this is the key lesson that we

00:16:17,320 --> 00:16:22,690
learned better the docker files less

00:16:19,930 --> 00:16:28,360
problems there is with the environment

00:16:22,690 --> 00:16:30,370
and what I mean by that is more commands

00:16:28,360 --> 00:16:33,790
you have in the docker file the bigger

00:16:30,370 --> 00:16:36,280
the images because every ever line in

00:16:33,790 --> 00:16:40,300
the docker file will create a new layer

00:16:36,280 --> 00:16:43,089
or in the repository with diff from the

00:16:40,300 --> 00:16:49,000
set from the previous one so it's like a

00:16:43,089 --> 00:16:51,370
stack so you need to send all of them to

00:16:49,000 --> 00:16:54,130
the repository and you need to pull all

00:16:51,370 --> 00:16:57,670
of them from the repository and the pro

00:16:54,130 --> 00:17:00,010
tip if you use the ID of the layer you

00:16:57,670 --> 00:17:01,990
can connect you can instant you can

00:17:00,010 --> 00:17:05,079
create an instance of the container on

00:17:01,990 --> 00:17:08,260
this point of the docker file so it's

00:17:05,079 --> 00:17:10,180
super easy to debug problems with like

00:17:08,260 --> 00:17:12,910
compilation or something you have a lot

00:17:10,180 --> 00:17:16,300
of stuff though that's is happening and

00:17:12,910 --> 00:17:20,430
you can create a container exactly in

00:17:16,300 --> 00:17:24,180
the point of the doctor file so example

00:17:20,430 --> 00:17:29,020
we have a simple docker file from Debian

00:17:24,180 --> 00:17:32,320
we run apt-get update and this creates

00:17:29,020 --> 00:17:39,460
second layer and we install curl and

00:17:32,320 --> 00:17:43,240
this creates third layer the the issue

00:17:39,460 --> 00:17:46,360
is that when we pull the stuff from the

00:17:43,240 --> 00:17:47,490
repository it doesn't refresh it it just

00:17:46,360 --> 00:17:49,870
gets the

00:17:47,490 --> 00:17:52,930
the state of the

00:17:49,870 --> 00:17:57,940
of the push so they are not refreshed in

00:17:52,930 --> 00:18:00,550
this case when layer 1 and layer two are

00:17:57,940 --> 00:18:03,940
not refreshed so when we add engine eeks

00:18:00,550 --> 00:18:07,270
to the third layer it will use the

00:18:03,940 --> 00:18:10,590
engine explosion that apt has cached

00:18:07,270 --> 00:18:15,510
from the time that the image is created

00:18:10,590 --> 00:18:18,880
this can be Monday or six months ago so

00:18:15,510 --> 00:18:22,720
how to solve this issue you need to

00:18:18,880 --> 00:18:26,800
compact your docker files into as less

00:18:22,720 --> 00:18:30,130
as possible as small as possible number

00:18:26,800 --> 00:18:33,429
of lines by line of course we need we

00:18:30,130 --> 00:18:35,530
mean the the keyword and the other on

00:18:33,429 --> 00:18:39,880
the beginning of the line so because

00:18:35,530 --> 00:18:43,510
this is still one line we run apt-get

00:18:39,880 --> 00:18:47,230
update and if this is successful we run

00:18:43,510 --> 00:18:47,800
install go to the next line curl and

00:18:47,230 --> 00:18:50,770
nginx

00:18:47,800 --> 00:18:54,040
then every time we add something some

00:18:50,770 --> 00:18:57,040
new package to the to this line like PHP

00:18:54,040 --> 00:19:00,309
or some extension it will have to it

00:18:57,040 --> 00:19:03,130
will get the bare Jessie image and then

00:19:00,309 --> 00:19:08,980
it will rerun the update every time so

00:19:03,130 --> 00:19:15,190
this is super useful and this is this

00:19:08,980 --> 00:19:17,110
will make your life much easier another

00:19:15,190 --> 00:19:20,050
lesson lesson that we learned is we

00:19:17,110 --> 00:19:23,620
shouldn't do everything ourselves so

00:19:20,050 --> 00:19:26,740
there is a hub dot docker calm this is

00:19:23,620 --> 00:19:30,220
like a republic repository that toker

00:19:26,740 --> 00:19:33,160
maintains that stores a lot of ready to

00:19:30,220 --> 00:19:35,770
use containers for example my sequel is

00:19:33,160 --> 00:19:39,429
stored there and it has some neat

00:19:35,770 --> 00:19:42,220
features for example you can mount host

00:19:39,429 --> 00:19:45,970
directory to use as a data directory in

00:19:42,220 --> 00:19:47,440
my sequel so you can move the data you

00:19:45,970 --> 00:19:51,730
can switch the database instance and

00:19:47,440 --> 00:19:57,040
leave the files you can add custom

00:19:51,730 --> 00:20:01,480
config files so - v is a mount mount

00:19:57,040 --> 00:20:03,549
this direct this file to ask this file

00:20:01,480 --> 00:20:06,820
inside the container

00:20:03,549 --> 00:20:09,730
you can specify as environment variable

00:20:06,820 --> 00:20:12,580
my sequel root password user user

00:20:09,730 --> 00:20:15,760
password you can automatically import

00:20:12,580 --> 00:20:20,320
database if you if you have an output

00:20:15,760 --> 00:20:24,520
from my sequel dam for example and if

00:20:20,320 --> 00:20:27,700
you put if you mount this directory with

00:20:24,520 --> 00:20:30,279
that with the my sequel dump as this

00:20:27,700 --> 00:20:32,080
directory inside the container the init

00:20:30,279 --> 00:20:33,640
script from my sequel will take this

00:20:32,080 --> 00:20:36,760
file and run it

00:20:33,640 --> 00:20:41,830
after the database is created so you can

00:20:36,760 --> 00:20:47,850
automatically import stuff there like

00:20:41,830 --> 00:20:50,860
this so this is solar you can also put

00:20:47,850 --> 00:20:54,909
scripts there and it will list them

00:20:50,860 --> 00:20:58,480
alphabetically alphabetically so ABCD

00:20:54,909 --> 00:21:01,270
efg and it will it can be dot c sequel

00:20:58,480 --> 00:21:04,570
or dot as age and all of those scripts

00:21:01,270 --> 00:21:07,990
will be run will run on the container in

00:21:04,570 --> 00:21:11,559
during the container initialization part

00:21:07,990 --> 00:21:14,020
so this is super useful for automatic

00:21:11,559 --> 00:21:19,270
database creation the same goes for

00:21:14,020 --> 00:21:26,100
solar anyone using so yeah so you can

00:21:19,270 --> 00:21:34,510
you can mount the data dear the same way

00:21:26,100 --> 00:21:37,630
you can run in it and yeah this this is

00:21:34,510 --> 00:21:41,020
the same way so if you mount scripts all

00:21:37,630 --> 00:21:43,690
as this directory it will also do the

00:21:41,020 --> 00:21:46,360
same thing as in in case of the database

00:21:43,690 --> 00:21:48,700
with the exception of the SQL file so if

00:21:46,360 --> 00:21:52,080
you have dot H file star it will list

00:21:48,700 --> 00:21:56,320
them in alphabetical order and it will

00:21:52,080 --> 00:22:01,960
execute them before the sole core before

00:21:56,320 --> 00:22:04,120
the before I think it's just after the

00:22:01,960 --> 00:22:12,460
initialization but before the core is

00:22:04,120 --> 00:22:17,130
ready I have a same goes for PHP so you

00:22:12,460 --> 00:22:20,429
can source the image your docker file on

00:22:17,130 --> 00:22:22,860
official PHP docker image file and you

00:22:20,429 --> 00:22:26,190
can they are they prepared some

00:22:22,860 --> 00:22:29,580
shortcuts short read script so if we

00:22:26,190 --> 00:22:32,610
require this extension we just need to

00:22:29,580 --> 00:22:36,990
make sure that all the dependencies are

00:22:32,610 --> 00:22:39,270
installed before and then this script

00:22:36,990 --> 00:22:42,870
will install the extension will create a

00:22:39,270 --> 00:22:45,780
any file will put it in the specific

00:22:42,870 --> 00:22:49,860
directory same goes for extension that

00:22:45,780 --> 00:22:52,200
need its compiled compilation like Gd it

00:22:49,860 --> 00:22:56,520
will you will have to prepare the

00:22:52,200 --> 00:22:59,070
environment with with this directory

00:22:56,520 --> 00:23:03,059
there but then the same way you can

00:22:59,070 --> 00:23:05,850
install the GD extension for example so

00:23:03,059 --> 00:23:12,059
this is super useful because you don't

00:23:05,850 --> 00:23:14,039
have to work on the base image and reuse

00:23:12,059 --> 00:23:17,520
the existing one they have a lot of

00:23:14,039 --> 00:23:22,200
images or a lot of versions with fpm

00:23:17,520 --> 00:23:26,730
with without fpm with with alpine linux

00:23:22,200 --> 00:23:29,159
with for apache a lot of versions and we

00:23:26,730 --> 00:23:34,350
use that as a as a base image for for

00:23:29,159 --> 00:23:38,250
our code you can also add custom

00:23:34,350 --> 00:23:41,429
configuration for a PHP so as before

00:23:38,250 --> 00:23:46,350
just mount this file into this directory

00:23:41,429 --> 00:23:50,340
and it will it will just include it for

00:23:46,350 --> 00:23:53,669
the logging if you specify this as an

00:23:50,340 --> 00:23:59,520
output for the logs then running this

00:23:53,669 --> 00:24:03,500
command optionally with - f4 just like

00:23:59,520 --> 00:24:11,940
tail will display all the error logs

00:24:03,500 --> 00:24:15,299
from the from the application you can do

00:24:11,940 --> 00:24:19,980
the same for for example for access logs

00:24:15,299 --> 00:24:22,710
or for fpm error log just use this or

00:24:19,980 --> 00:24:29,159
this test descriptor or another one the

00:24:22,710 --> 00:24:31,140
next one now background as I mentioned a

00:24:29,159 --> 00:24:35,270
vagrant file is a

00:24:31,140 --> 00:24:38,310
Ruby script I'm not a big fan of Robbie

00:24:35,270 --> 00:24:41,550
but it's useful for example if you want

00:24:38,310 --> 00:24:43,530
to detect host IP you know you know

00:24:41,550 --> 00:24:47,370
every time we run it on different

00:24:43,530 --> 00:24:51,690
machines the IP can change just run this

00:24:47,370 --> 00:24:53,790
and you will have it as a variable this

00:24:51,690 --> 00:24:57,020
is super useful if there is no directory

00:24:53,790 --> 00:25:00,900
admin just clone it from from repository

00:24:57,020 --> 00:25:03,660
so even the first time the developer

00:25:00,900 --> 00:25:06,030
need reruns the code it's only vagrant

00:25:03,660 --> 00:25:08,730
up we automatically clone everything

00:25:06,030 --> 00:25:13,740
from from the repositories using this

00:25:08,730 --> 00:25:18,120
this check same goes for the composer

00:25:13,740 --> 00:25:23,760
install if there is no file just install

00:25:18,120 --> 00:25:25,920
it after the code is there scripting

00:25:23,760 --> 00:25:28,980
means that we can use some advanced

00:25:25,920 --> 00:25:31,860
constructs like loops so if we have

00:25:28,980 --> 00:25:35,640
three containers that are basically the

00:25:31,860 --> 00:25:40,650
same we can in we can define them as a

00:25:35,640 --> 00:25:44,130
loop and just use the the variable in

00:25:40,650 --> 00:25:47,280
any way we want we want we can link

00:25:44,130 --> 00:25:50,970
multiple containers so we have a nginx

00:25:47,280 --> 00:25:56,010
and we want to link link the containers

00:25:50,970 --> 00:25:58,860
with it so define them each link add

00:25:56,010 --> 00:26:01,500
volume because we all know that nginx

00:25:58,860 --> 00:26:04,320
needs to see the file before like a

00:26:01,500 --> 00:26:07,800
static file so if our application have

00:26:04,320 --> 00:26:10,800
some J's CSS or anything we need to have

00:26:07,800 --> 00:26:14,600
it in inside the nginx container because

00:26:10,800 --> 00:26:14,600
to serve it and UNIX needs to see it

00:26:14,900 --> 00:26:19,260
what about the Alpine Nana Linux so

00:26:17,580 --> 00:26:22,110
there are some containers that are

00:26:19,260 --> 00:26:26,970
prepared with with this version of Linux

00:26:22,110 --> 00:26:30,570
this is a special version only for made

00:26:26,970 --> 00:26:33,030
people made for the containers and it's

00:26:30,570 --> 00:26:35,730
like stripped down its few megabytes

00:26:33,030 --> 00:26:38,070
versus few hundred megabytes but there

00:26:35,730 --> 00:26:41,610
are some issues with it so in our case

00:26:38,070 --> 00:26:44,460
we do use solar and Cassandra and those

00:26:41,610 --> 00:26:45,090
two extensions don't compile on Alpine

00:26:44,460 --> 00:26:48,960
Linux

00:26:45,090 --> 00:26:51,809
because it's used muscle instead of GDP

00:26:48,960 --> 00:26:54,330
see so if your application is simpler

00:26:51,809 --> 00:26:57,690
and you want to decrease the image size

00:26:54,330 --> 00:27:00,659
you can use that but for custom code

00:26:57,690 --> 00:27:04,549
like custom see that relies on some

00:27:00,659 --> 00:27:13,110
other libraries that it might not work

00:27:04,549 --> 00:27:17,490
so we do we we do have some issues with

00:27:13,110 --> 00:27:22,070
docker it's not like everything is super

00:27:17,490 --> 00:27:26,549
and we all live happily and ever after

00:27:22,070 --> 00:27:28,470
so the doctor is quite a new tool the

00:27:26,549 --> 00:27:32,399
first public release was just a few

00:27:28,470 --> 00:27:36,539
years ago and since that date there was

00:27:32,399 --> 00:27:40,309
a four river rewriting from scratch that

00:27:36,539 --> 00:27:50,190
up with file system drivers for docker

00:27:40,309 --> 00:27:54,600
for we all love this kind of box after

00:27:50,190 --> 00:27:56,249
five months so they moving fast and they

00:27:54,600 --> 00:27:58,559
are breaking breaking stuff so you need

00:27:56,249 --> 00:28:00,570
to be prepared that after you update the

00:27:58,559 --> 00:28:02,639
version of docker on your staging

00:28:00,570 --> 00:28:06,360
machines everything will stop working

00:28:02,639 --> 00:28:06,869
for three days so do that with coach do

00:28:06,360 --> 00:28:10,730
that

00:28:06,869 --> 00:28:13,679
be prepared to before you do that

00:28:10,730 --> 00:28:17,070
another thing the links the link between

00:28:13,679 --> 00:28:21,029
containers it's now deprecated so it

00:28:17,070 --> 00:28:24,090
will be removed in future versions our

00:28:21,029 --> 00:28:28,139
environment is not yet ready we didn't

00:28:24,090 --> 00:28:30,809
replace it with with networking they

00:28:28,139 --> 00:28:35,100
marked it as deprecated half a year ago

00:28:30,809 --> 00:28:38,369
so probably soon it will be removed

00:28:35,100 --> 00:28:40,740
it's supposed to be simpler because you

00:28:38,369 --> 00:28:44,100
create a network and you share the

00:28:40,740 --> 00:28:45,600
network between the containers and it

00:28:44,100 --> 00:28:49,049
provides a better isolation isolation

00:28:45,600 --> 00:28:51,480
between them but it it has some issues

00:28:49,049 --> 00:28:53,759
for example it will not set the

00:28:51,480 --> 00:28:58,559
environment variables so we rely on them

00:28:53,759 --> 00:28:59,669
and we will have to change our config

00:28:58,559 --> 00:29:04,019
style

00:28:59,669 --> 00:29:08,029
it-it-it ads you'd the automatic name

00:29:04,019 --> 00:29:12,059
resolution so you can use just a name as

00:29:08,029 --> 00:29:15,299
a name of this of the of the another

00:29:12,059 --> 00:29:21,119
machine but we didn't migrate our code

00:29:15,299 --> 00:29:23,369
yet there is another issue of

00:29:21,119 --> 00:29:28,830
maintaining the number of what networks

00:29:23,369 --> 00:29:31,590
I read on on the github for docker that

00:29:28,830 --> 00:29:34,259
after a thousand networks on a single

00:29:31,590 --> 00:29:38,279
day daemon there are some issues with

00:29:34,259 --> 00:29:41,190
performance so you have to clean up the

00:29:38,279 --> 00:29:43,889
old networks for example if you create a

00:29:41,190 --> 00:29:46,559
network for specific branch then you

00:29:43,889 --> 00:29:49,049
will have to remove it after that so

00:29:46,559 --> 00:29:52,980
it's another layer of things that you

00:29:49,049 --> 00:29:58,289
need to remember to do and by default

00:29:52,980 --> 00:30:00,239
the network sorry the last sentence by

00:29:58,289 --> 00:30:02,519
default the network traffic is not

00:30:00,239 --> 00:30:05,580
forwarded from inside the container

00:30:02,519 --> 00:30:09,029
outside you will have to adjust the host

00:30:05,580 --> 00:30:12,830
settings for for the kernel the link is

00:30:09,029 --> 00:30:12,830
there but it's also in the documentation

00:30:13,159 --> 00:30:16,159
questions

00:30:30,570 --> 00:30:37,540
yes potentially you can do that if you

00:30:33,730 --> 00:30:40,510
have for example Amazon and the elastic

00:30:37,540 --> 00:30:43,540
container service if they detect push of

00:30:40,510 --> 00:30:46,360
the image they can restart all the image

00:30:43,540 --> 00:30:49,150
all the instances for you so if you

00:30:46,360 --> 00:30:50,950
prepare the image and do push in the

00:30:49,150 --> 00:30:53,980
next few minutes they can restart or

00:30:50,950 --> 00:30:57,010
everything for you but it's a paid

00:30:53,980 --> 00:31:01,270
service it's not like default feature of

00:30:57,010 --> 00:31:04,560
docker so potentially yeah you you you

00:31:01,270 --> 00:31:04,560
can use only that

00:31:19,340 --> 00:31:25,430
yes oh I don't use it so I and I'm not

00:31:22,940 --> 00:31:27,290
that familiar you will have to consult

00:31:25,430 --> 00:31:44,390
the manual Oh

00:31:27,290 --> 00:31:47,600
or this guy yeah no so when there is a

00:31:44,390 --> 00:31:50,510
new feature that requires change the

00:31:47,600 --> 00:31:54,380
developer just includes this change into

00:31:50,510 --> 00:31:57,050
the feature branch and on staging when

00:31:54,380 --> 00:31:59,470
we do deploy to staging it will fetch

00:31:57,050 --> 00:32:02,690
the dockerfile from the feature branch

00:31:59,470 --> 00:32:04,370
prepare the image and it will run with

00:32:02,690 --> 00:32:06,680
the for example changed version of PHP

00:32:04,370 --> 00:32:13,700
or some new extension or different

00:32:06,680 --> 00:32:16,660
version of extension yet on the local

00:32:13,700 --> 00:32:19,670
machines there is a docker there so

00:32:16,660 --> 00:32:24,620
doctored itself detects the change so if

00:32:19,670 --> 00:32:29,360
you do docker docker run run it will

00:32:24,620 --> 00:32:31,790
detect the change no the doctor file we

00:32:29,360 --> 00:32:33,950
do have a script for that so they

00:32:31,790 --> 00:32:35,570
running the if if they if there is a

00:32:33,950 --> 00:32:37,340
change at the docker file and they need

00:32:35,570 --> 00:32:45,380
to see it they run the build script and

00:32:37,340 --> 00:32:47,840
it will create an image so the doc the

00:32:45,380 --> 00:32:50,810
code is mounted from the host system so

00:32:47,840 --> 00:32:53,000
the we point phpstorm for example into

00:32:50,810 --> 00:32:55,250
the directory and it's mounted in the

00:32:53,000 --> 00:33:00,080
inside the container so you work on the

00:32:55,250 --> 00:33:02,650
code press f5 and it's there yeah it's

00:33:00,080 --> 00:33:02,650
right volume

00:33:06,170 --> 00:33:22,560
any other questions yeah okay can you

00:33:14,610 --> 00:33:25,590
repeat these so I often see that people

00:33:22,560 --> 00:33:27,810
ask about it but either our workstations

00:33:25,590 --> 00:33:31,770
are our new enough or something because

00:33:27,810 --> 00:33:33,450
we don't we don't see that so we our web

00:33:31,770 --> 00:33:36,360
developers even have additional layer

00:33:33,450 --> 00:33:40,410
because they run VirtualBox with mounted

00:33:36,360 --> 00:33:42,030
folder from V from Windows then in Linux

00:33:40,410 --> 00:33:45,630
and then they mount it inside the

00:33:42,030 --> 00:33:49,320
container and f5 and it works

00:33:45,630 --> 00:33:52,710
so the phpstorm is running on the on the

00:33:49,320 --> 00:33:55,800
host on on Windows so it has the the

00:33:52,710 --> 00:33:58,620
fastest way access to the files so this

00:33:55,800 --> 00:34:02,250
is cool this is okay and then it just

00:33:58,620 --> 00:34:04,650
works in in PHP so I'm not sure what we

00:34:02,250 --> 00:34:06,870
do with what we are doing okay or what

00:34:04,650 --> 00:34:10,740
everyone else is doing wrong but we

00:34:06,870 --> 00:34:19,310
didn't had an issue we do have SSDs for

00:34:10,740 --> 00:34:19,310
everyone so this might be the latest one

00:34:20,000 --> 00:34:31,890
527 5 147 I don't remember we use pretty

00:34:25,020 --> 00:34:34,650
pretty recent ones okay no one reported

00:34:31,890 --> 00:34:37,950
it for me and even I use it on Windows

00:34:34,650 --> 00:34:39,960
from time to time to check if they if

00:34:37,950 --> 00:34:43,200
they have could potentially have an

00:34:39,960 --> 00:34:47,540
issue with something so I didn't notice

00:34:43,200 --> 00:34:47,540
it yes

00:34:56,790 --> 00:35:05,760
with what so we started with vagrant

00:35:03,000 --> 00:35:09,090
because it was before or just after

00:35:05,760 --> 00:35:12,240
release of dr. Campos and we didn't had

00:35:09,090 --> 00:35:16,700
time to my credit and the stuff that are

00:35:12,240 --> 00:35:20,609
rou be specific are loops and variables

00:35:16,700 --> 00:35:22,619
I'm from from what a guy from what I saw

00:35:20,609 --> 00:35:25,619
the docker the docker compose file is

00:35:22,619 --> 00:35:29,730
just a manifest file there it's not

00:35:25,619 --> 00:35:31,850
interpreted in any way yeah but you

00:35:29,730 --> 00:35:35,100
would have to write it

00:35:31,850 --> 00:35:41,880
yeah and virtual bah-bah current also

00:35:35,100 --> 00:35:45,900
manages VirtualBox for for Windows and

00:35:41,880 --> 00:35:48,900
no we using the visual box approach yeah

00:35:45,900 --> 00:35:52,530
we haven't migrated yet for for the

00:35:48,900 --> 00:35:56,430
containers because the preferred way

00:35:52,530 --> 00:35:57,990
from windows created update from that

00:35:56,430 --> 00:36:01,260
that was on the slide is to use the

00:35:57,990 --> 00:36:02,760
Linux containers on Windows but we

00:36:01,260 --> 00:36:05,280
didn't had time to migrate it yet

00:36:02,760 --> 00:36:11,330
because it's requires time and this

00:36:05,280 --> 00:36:13,950
works well not ever because probably

00:36:11,330 --> 00:36:17,640
sometime in the future it will be broken

00:36:13,950 --> 00:36:23,630
by some vendor like Microsoft or someone

00:36:17,640 --> 00:36:23,630
else not to name anyone just an example

00:36:25,010 --> 00:36:30,740
ok so thank you very much I will have a

00:36:29,040 --> 00:36:35,340
second presentation about the tools

00:36:30,740 --> 00:36:37,890
vagrant and think tomorrow just before

00:36:35,340 --> 00:36:40,700
lunch on the big big in the big room so

00:36:37,890 --> 00:36:43,680
if you want please join me there

00:36:40,700 --> 00:36:48,640
[Applause]

00:36:43,680 --> 00:36:48,640

YouTube URL: https://www.youtube.com/watch?v=ylBI_F_UNU4


