Title: Server-side Rendering of JavaScript in PHP | Ignacio Martín | IPC Spring 2018
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2018
Description: 
	Ignacio Martín (Limenius): With the explosion of front-end libraries like React and Vue.js, there is the advantage of being able to render JavaScript applications directly from the server instead of waiting for the browser to render them. This is beneficial for SEO and means a faster presentation of the content to the user. There is much information about how to do this in Node.js, but can we render a React or Vue.js application from a PHP server? What techniques do we have available? What are the benefits and trade-offs of each one? We will present the work that we have been doing in the past few years in libraries like ReactRenderer, ReactBundle and phpexecjs, and will see points to take care about when doing a deep integration between PHP and modern frameworks.
Captions: 
	00:00:05,750 --> 00:00:09,750
so welcome to his talk in the morning

00:00:08,490 --> 00:00:13,380
about server-side rendering of

00:00:09,750 --> 00:00:16,740
JavaScript in PHP so my name is nacho

00:00:13,380 --> 00:00:19,470
martine or nacio I'm Spanish they live

00:00:16,740 --> 00:00:22,020
in Munich working a company called a

00:00:19,470 --> 00:00:25,439
menus and we make project for customers

00:00:22,020 --> 00:00:28,769
whatever they require help with and we

00:00:25,439 --> 00:00:31,769
are very happy users of last year's

00:00:28,769 --> 00:00:33,960
react and seemed funny and we have been

00:00:31,769 --> 00:00:37,670
looking for ways to tighten the

00:00:33,960 --> 00:00:40,680
integration between PHP and JavaScript

00:00:37,670 --> 00:00:45,000
better and we have as a result published

00:00:40,680 --> 00:00:47,820
some libraries so as I said our work has

00:00:45,000 --> 00:00:50,039
been done mostly in reactive and sinfoni

00:00:47,820 --> 00:00:52,649
so the libraries are written for

00:00:50,039 --> 00:00:55,230
symphony and react but as we will

00:00:52,649 --> 00:00:57,360
present the basical also basically like

00:00:55,230 --> 00:00:59,460
building blocks of how this works so

00:00:57,360 --> 00:01:01,859
maybe if you are using exactly this

00:00:59,460 --> 00:01:03,629
stack you may use the libraries or if

00:01:01,859 --> 00:01:06,600
you are using for instance view or

00:01:03,629 --> 00:01:08,670
laravel other stuff you may maybe take

00:01:06,600 --> 00:01:11,400
the ideas or maybe build your own

00:01:08,670 --> 00:01:16,200
libraries or something like that but we

00:01:11,400 --> 00:01:18,509
will present how this works so let's

00:01:16,200 --> 00:01:21,210
start nice and what's the problem that

00:01:18,509 --> 00:01:23,580
server-side rendering addresses because

00:01:21,210 --> 00:01:26,340
it's not something that any project in

00:01:23,580 --> 00:01:27,750
the world needs but I think it's a it's

00:01:26,340 --> 00:01:30,630
important for some projects and also

00:01:27,750 --> 00:01:32,549
it's a nice tool to have in mind if you

00:01:30,630 --> 00:01:34,619
may require it because some people I

00:01:32,549 --> 00:01:36,869
feel like they discard architectures

00:01:34,619 --> 00:01:39,840
just because of this and for me is not

00:01:36,869 --> 00:01:43,880
doesn't make so much sense to throw away

00:01:39,840 --> 00:01:46,500
many resources just because of this so

00:01:43,880 --> 00:01:49,259
the problems we are solving now are

00:01:46,500 --> 00:01:51,840
always because the way problems were

00:01:49,259 --> 00:01:53,970
solved in the past so solutions in the

00:01:51,840 --> 00:01:56,820
past create problems for the future so

00:01:53,970 --> 00:02:01,079
let's started see how were things and

00:01:56,820 --> 00:02:04,290
where why did we arrive to this point so

00:02:01,079 --> 00:02:06,030
this is like the first web page and from

00:02:04,290 --> 00:02:08,580
the first web page you see something

00:02:06,030 --> 00:02:11,730
that is important the goal of the web

00:02:08,580 --> 00:02:13,890
was not to have everything that we have

00:02:11,730 --> 00:02:18,200
now but to provide access to

00:02:13,890 --> 00:02:20,250
so it was document oriented so people

00:02:18,200 --> 00:02:23,459
access documents they were looking for

00:02:20,250 --> 00:02:27,240
and that was the main goal and was done

00:02:23,459 --> 00:02:31,280
perfect perfectly for this goal so as

00:02:27,240 --> 00:02:34,050
you know this is the basic setup for a

00:02:31,280 --> 00:02:36,600
server serving an HTML file and the

00:02:34,050 --> 00:02:40,160
client takes this HTML file and presents

00:02:36,600 --> 00:02:44,700
the user interface to the user but then

00:02:40,160 --> 00:02:48,630
this this this model like one to every

00:02:44,700 --> 00:02:50,610
other competitor and but and it was

00:02:48,630 --> 00:02:53,040
perfect and it scalable but we have

00:02:50,610 --> 00:02:55,680
problems as as the first time we want to

00:02:53,040 --> 00:02:58,290
extend it like things like this we have

00:02:55,680 --> 00:03:01,620
a form and sometimes we want to have the

00:02:58,290 --> 00:03:03,780
information to provide an interaction to

00:03:01,620 --> 00:03:06,720
the user so if the user makes something

00:03:03,780 --> 00:03:09,720
does something we can react to what they

00:03:06,720 --> 00:03:11,340
do like for instance if they write only

00:03:09,720 --> 00:03:13,709
four characters we can say okay your

00:03:11,340 --> 00:03:16,590
partyís password is not it's not long

00:03:13,709 --> 00:03:20,790
enough so in order to do this we started

00:03:16,590 --> 00:03:22,530
to in haste they web experience by

00:03:20,790 --> 00:03:24,510
serving as well some JavaScript some

00:03:22,530 --> 00:03:26,940
code that based on the information that

00:03:24,510 --> 00:03:31,440
you have in the first load you can still

00:03:26,940 --> 00:03:33,959
react somehow to the user then how we

00:03:31,440 --> 00:03:37,079
were used to this at the beginning or

00:03:33,959 --> 00:03:39,570
even some years ago lastly with jQuery I

00:03:37,079 --> 00:03:42,269
think jQuery it's one known for everyone

00:03:39,570 --> 00:03:44,010
so typically what we do is document

00:03:42,269 --> 00:03:46,350
object model manipulation like in this

00:03:44,010 --> 00:03:50,489
case to add a class to go to a compact

00:03:46,350 --> 00:03:52,890
to an element in the page so now we can

00:03:50,489 --> 00:03:56,010
somehow interact do something change

00:03:52,890 --> 00:03:58,410
that how the page looks but what about

00:03:56,010 --> 00:04:01,260
no link new content we don't know in the

00:03:58,410 --> 00:04:03,450
first request maybe want to want to load

00:04:01,260 --> 00:04:05,480
new content from a server and use it to

00:04:03,450 --> 00:04:07,470
change the contents in the page then

00:04:05,480 --> 00:04:09,390
like for instance this is typical

00:04:07,470 --> 00:04:12,510
example of we have a paginating list

00:04:09,390 --> 00:04:15,959
maybe you are selling houses and then

00:04:12,510 --> 00:04:18,479
you want to go to the second page then

00:04:15,959 --> 00:04:20,280
you want to reload the page or maybe not

00:04:18,479 --> 00:04:24,539
maybe you can yes grab the data and

00:04:20,280 --> 00:04:27,000
display it so for this we can we know we

00:04:24,539 --> 00:04:27,690
can put an API as well and then grab the

00:04:27,000 --> 00:04:30,570
data

00:04:27,690 --> 00:04:33,330
like in JSON or XML and the client knows

00:04:30,570 --> 00:04:36,230
how to change manipulate the document

00:04:33,330 --> 00:04:39,540
object model to showcase these changes

00:04:36,230 --> 00:04:43,250
so this works typically in jQuery for

00:04:39,540 --> 00:04:46,140
instance with load or get from a URL and

00:04:43,250 --> 00:04:48,810
graph a function here render page that

00:04:46,140 --> 00:04:51,060
takes this datum and modifies the

00:04:48,810 --> 00:04:52,830
document object model somehow okay so

00:04:51,060 --> 00:04:56,250
the document object model is something

00:04:52,830 --> 00:04:58,500
that is you know that HTML goes to the

00:04:56,250 --> 00:05:01,530
client and the client builds this tree

00:04:58,500 --> 00:05:03,030
of components these three is expensive

00:05:01,530 --> 00:05:04,710
to build it's something that typically

00:05:03,030 --> 00:05:08,520
we don't want to build in the server

00:05:04,710 --> 00:05:10,050
side so what browsers are very good at

00:05:08,520 --> 00:05:14,070
do at this particularly some browsers

00:05:10,050 --> 00:05:17,130
and so in the first load we get the HTML

00:05:14,070 --> 00:05:19,410
and the browser yes represents this

00:05:17,130 --> 00:05:22,410
build this tree has history and that

00:05:19,410 --> 00:05:25,650
this is what is presented to visually to

00:05:22,410 --> 00:05:28,380
the user then it will make an API call

00:05:25,650 --> 00:05:31,940
we typically what we say is just take

00:05:28,380 --> 00:05:34,440
this element read a way I picked out

00:05:31,940 --> 00:05:34,950
present probably hello there or

00:05:34,440 --> 00:05:36,540
something

00:05:34,950 --> 00:05:38,250
the user may be waiting for the second

00:05:36,540 --> 00:05:40,590
page and then we have this function

00:05:38,250 --> 00:05:42,720
rendered page that will say okay I have

00:05:40,590 --> 00:05:45,780
this data and I put it here I build this

00:05:42,720 --> 00:05:49,140
these three I changed its industry and

00:05:45,780 --> 00:05:52,140
that was a nice days of the complete

00:05:49,140 --> 00:05:54,210
model manipulation the problem is that

00:05:52,140 --> 00:05:56,550
if you want to provide information in a

00:05:54,210 --> 00:05:59,460
first load you have some templating

00:05:56,550 --> 00:06:02,820
mechanism or PHP in a server-side to

00:05:59,460 --> 00:06:06,710
build this HTML and to and that's what

00:06:02,820 --> 00:06:11,790
the browser will use and then we have

00:06:06,710 --> 00:06:14,100
the same same process same mechanism but

00:06:11,790 --> 00:06:18,450
different written in JavaScript to

00:06:14,100 --> 00:06:20,370
create these these three so as soon as

00:06:18,450 --> 00:06:23,340
your application is complex enough and

00:06:20,370 --> 00:06:25,380
this rendering is not so easy you will

00:06:23,340 --> 00:06:28,110
have to do they work twice and this is

00:06:25,380 --> 00:06:32,640
for most projects unfeasible and very

00:06:28,110 --> 00:06:34,800
annoying and but problem so the solution

00:06:32,640 --> 00:06:37,190
that in some applications were well

00:06:34,800 --> 00:06:39,900
supplied is to just not render the

00:06:37,190 --> 00:06:41,190
content in the first page load and just

00:06:39,900 --> 00:06:43,440
present a loader

00:06:41,190 --> 00:06:46,290
since gmail has been doing that forever

00:06:43,440 --> 00:06:49,890
you yes see loading Gmail or many

00:06:46,290 --> 00:06:52,490
applications to that and then when the

00:06:49,890 --> 00:06:55,440
API call the first API call is its then

00:06:52,490 --> 00:06:57,170
we just render this elements and we

00:06:55,440 --> 00:07:00,810
present finally the data to the user

00:06:57,170 --> 00:07:03,000
this is working and you can take profit

00:07:00,810 --> 00:07:05,700
of every JavaScript library in the world

00:07:03,000 --> 00:07:08,430
a more advanced or whatever but of

00:07:05,700 --> 00:07:10,920
course the first thing the user sees is

00:07:08,430 --> 00:07:12,540
it's a spinner hello there I know so

00:07:10,920 --> 00:07:13,860
this is a problem for search engine

00:07:12,540 --> 00:07:16,200
optimization because also cloud let's

00:07:13,860 --> 00:07:18,540
see these also Facebook sees this if you

00:07:16,200 --> 00:07:21,840
want to the meta tags and so on to share

00:07:18,540 --> 00:07:25,470
the content so this is problematic but

00:07:21,840 --> 00:07:27,630
for some uses is okay also for mobile

00:07:25,470 --> 00:07:29,400
users this is a study from Google from

00:07:27,630 --> 00:07:32,550
one a year when you don't half ago but I

00:07:29,400 --> 00:07:35,010
guess it's a still relevant for not so

00:07:32,550 --> 00:07:38,430
fast connections I realized the average

00:07:35,010 --> 00:07:41,460
load time for 3G is 19 seconds this is a

00:07:38,430 --> 00:07:44,880
study made for for the other bit for the

00:07:41,460 --> 00:07:48,600
advertising double-click brand so it's

00:07:44,880 --> 00:07:50,790
more more adapted to people who are

00:07:48,600 --> 00:07:51,810
making money with advertising with word

00:07:50,790 --> 00:07:55,290
this is a big problem

00:07:51,810 --> 00:07:57,600
so if a page takes longer than three

00:07:55,290 --> 00:08:00,240
seconds 50 53 percent of them are

00:07:57,600 --> 00:08:03,000
abandoned which is a lot and if you can

00:08:00,240 --> 00:08:05,610
manage to go from the first render of

00:08:03,000 --> 00:08:09,660
content from 19 seconds to 5 seconds

00:08:05,610 --> 00:08:12,480
means well like 25% more impression of

00:08:09,660 --> 00:08:13,290
ads 70% logins longer sessions like big

00:08:12,480 --> 00:08:16,620
numbers

00:08:13,290 --> 00:08:18,900
34 35 % lower bounds right and then

00:08:16,620 --> 00:08:22,560
double the money which is well it's a

00:08:18,900 --> 00:08:26,610
big number but still so we saw a before

00:08:22,560 --> 00:08:28,140
dafuk asian of the web some cases you

00:08:26,610 --> 00:08:29,250
can consider I have an app I have an

00:08:28,140 --> 00:08:31,710
application for instance we have a

00:08:29,250 --> 00:08:33,330
customer who has a medical application

00:08:31,710 --> 00:08:34,680
and in this case you can just present

00:08:33,330 --> 00:08:36,630
all all there is not a problem because

00:08:34,680 --> 00:08:38,550
they are doctors and they will spend the

00:08:36,630 --> 00:08:40,620
whole day with this application they

00:08:38,550 --> 00:08:42,450
don't care if the application takes some

00:08:40,620 --> 00:08:44,460
seconds to present the first render

00:08:42,450 --> 00:08:46,710
that's that's perfectly okay so in this

00:08:44,460 --> 00:08:48,300
case we we don't care at all about this

00:08:46,710 --> 00:08:50,670
or Gmail for instance it doesn't care

00:08:48,300 --> 00:08:53,310
about this even when Google is pushing

00:08:50,670 --> 00:08:55,080
for this but then we have the other side

00:08:53,310 --> 00:08:57,120
of the wall which is content pages

00:08:55,080 --> 00:09:00,300
what they with the web was design for

00:08:57,120 --> 00:09:02,280
where probably this is unfeasible so you

00:09:00,300 --> 00:09:05,340
have these duplication of worlds where

00:09:02,280 --> 00:09:07,380
one some of them have a loader and they

00:09:05,340 --> 00:09:10,170
are using the best technologies in

00:09:07,380 --> 00:09:13,230
JavaScript and some of them yes say I

00:09:10,170 --> 00:09:14,910
like we cannot do that and we just stick

00:09:13,230 --> 00:09:17,550
with what we have and try to make it

00:09:14,910 --> 00:09:21,660
better but yeah speed is important for

00:09:17,550 --> 00:09:23,430
us so this was the problem and let's

00:09:21,660 --> 00:09:24,990
take this like this was a problem that

00:09:23,430 --> 00:09:27,720
was like we have to live with this

00:09:24,990 --> 00:09:29,220
problem and we will see how this problem

00:09:27,720 --> 00:09:32,580
was solved because this problem was

00:09:29,220 --> 00:09:34,770
solved know by directly going against

00:09:32,580 --> 00:09:36,330
this problem but as a side effect side

00:09:34,770 --> 00:09:38,580
effect of the new generation of

00:09:36,330 --> 00:09:40,370
libraries so this is a problem because

00:09:38,580 --> 00:09:43,950
we are doing document object model

00:09:40,370 --> 00:09:46,110
manipulation and the new generation of

00:09:43,950 --> 00:09:48,360
libraries like react or view are more

00:09:46,110 --> 00:09:51,210
based in state base they are state base

00:09:48,360 --> 00:09:53,790
so you work with the state and the

00:09:51,210 --> 00:09:54,090
library renders it for you what does it

00:09:53,790 --> 00:09:57,080
mean

00:09:54,090 --> 00:09:59,340
and so we see also bit of this libraries

00:09:57,080 --> 00:10:02,490
imagine the simplest case we want to

00:09:59,340 --> 00:10:05,220
build a typical tutorial of these

00:10:02,490 --> 00:10:07,590
libraries we want to build a to-do list

00:10:05,220 --> 00:10:09,840
and typically in these in these projects

00:10:07,590 --> 00:10:14,670
we you want as a feature that the user

00:10:09,840 --> 00:10:16,110
can insert an item in the middle so when

00:10:14,670 --> 00:10:19,350
you insert the third item the fourth

00:10:16,110 --> 00:10:22,440
will go down and only two items are

00:10:19,350 --> 00:10:23,910
affected by the we have 1000 of them you

00:10:22,440 --> 00:10:26,700
have to care which ones are affected or

00:10:23,910 --> 00:10:30,690
not so in order to do this we have two

00:10:26,700 --> 00:10:33,030
options first is I focused in my state I

00:10:30,690 --> 00:10:35,310
have an array of elements a list of

00:10:33,030 --> 00:10:37,650
elements and I will take care of based

00:10:35,310 --> 00:10:40,350
on the user interactions to - it's a

00:10:37,650 --> 00:10:42,000
state which is done with this method you

00:10:40,350 --> 00:10:44,850
need a stable it's a very nice problem

00:10:42,000 --> 00:10:47,610
to work with it's simple it's it's a

00:10:44,850 --> 00:10:49,080
nice environment and then what I do is

00:10:47,610 --> 00:10:53,580
to clean everything to clean the list

00:10:49,080 --> 00:10:54,900
and yes pre-paint it's not rerender so

00:10:53,580 --> 00:10:56,160
this is not efficient so at the end we

00:10:54,900 --> 00:10:58,890
cannot do it because the user is the

00:10:56,160 --> 00:11:02,280
king and even if we like our work if

00:10:58,890 --> 00:11:04,260
it's yes flickering it's isn't it's not

00:11:02,280 --> 00:11:06,150
something we can do so we have the

00:11:04,260 --> 00:11:08,100
second option that was what we had to do

00:11:06,150 --> 00:11:09,720
which is then

00:11:08,100 --> 00:11:11,250
we have our state fine in the document

00:11:09,720 --> 00:11:13,259
object model which elements are affected

00:11:11,250 --> 00:11:15,209
and then move them manipulate them

00:11:13,259 --> 00:11:17,910
change glasses and so on like we were

00:11:15,209 --> 00:11:20,100
winning backbone for instance or jQuery

00:11:17,910 --> 00:11:22,949
T because of which equity work this is

00:11:20,100 --> 00:11:25,920
complex to work with it's a row prone

00:11:22,949 --> 00:11:29,459
it's annoying to assist but at the end

00:11:25,920 --> 00:11:32,009
it's efficient so we have to do it so

00:11:29,459 --> 00:11:35,069
these new libraries like react what they

00:11:32,009 --> 00:11:37,560
give to us is that they allow us to

00:11:35,069 --> 00:11:41,069
focus on the state focusing them in the

00:11:37,560 --> 00:11:42,480
business and they do the second point

00:11:41,069 --> 00:11:44,220
behind the scenes they will do the

00:11:42,480 --> 00:11:44,699
document object manipulation in an

00:11:44,220 --> 00:11:47,579
efficient way

00:11:44,699 --> 00:11:50,459
without us caring about exactly having a

00:11:47,579 --> 00:11:51,839
dog document object model so the

00:11:50,459 --> 00:11:54,000
fundamental premise of this divert is

00:11:51,839 --> 00:11:58,290
especially react is give me an estate

00:11:54,000 --> 00:12:01,019
and a render function that you know that

00:11:58,290 --> 00:12:03,810
can represent every possible combination

00:12:01,019 --> 00:12:06,089
of state that depends on it and I will

00:12:03,810 --> 00:12:07,889
call it for you when I feel like I need

00:12:06,089 --> 00:12:09,139
to rerender I will do it and I will do

00:12:07,889 --> 00:12:12,480
it efficiently

00:12:09,139 --> 00:12:14,040
so let's just see for sake of C very

00:12:12,480 --> 00:12:18,029
very short introduction of how the code

00:12:14,040 --> 00:12:19,680
looks in this case let's write this

00:12:18,029 --> 00:12:22,290
component so we have a counter when the

00:12:19,680 --> 00:12:25,079
user clicks in in a button we see the

00:12:22,290 --> 00:12:30,779
counter increasing so the full code in

00:12:25,079 --> 00:12:33,899
react that does this is is this code we

00:12:30,779 --> 00:12:35,850
have something to to point out so this

00:12:33,899 --> 00:12:38,519
is how you build in initial state which

00:12:35,850 --> 00:12:40,199
is the king of this component is just a

00:12:38,519 --> 00:12:42,959
JavaScript object and then you provide

00:12:40,199 --> 00:12:44,819
some functions to change these states

00:12:42,959 --> 00:12:46,649
who provide new versions of the state

00:12:44,819 --> 00:12:48,750
know directly modify but providing new

00:12:46,649 --> 00:12:50,459
versions of the state and then we

00:12:48,750 --> 00:12:53,220
provide a render function that if you

00:12:50,459 --> 00:12:56,009
look at it we never call it directly its

00:12:53,220 --> 00:12:57,870
react will the one who will call it when

00:12:56,009 --> 00:12:59,910
we don't know even why a when will

00:12:57,870 --> 00:13:01,980
happen how often we don't know anything

00:12:59,910 --> 00:13:04,079
about this but we provide a way to

00:13:01,980 --> 00:13:05,399
represent this state and then it's

00:13:04,079 --> 00:13:07,759
called the function when the user

00:13:05,399 --> 00:13:10,920
presses the button and this works so

00:13:07,759 --> 00:13:13,380
state and ran there are important here

00:13:10,920 --> 00:13:16,350
so working with the state means having

00:13:13,380 --> 00:13:18,600
an initial state and also assigning

00:13:16,350 --> 00:13:20,190
making new version of the state if you

00:13:18,600 --> 00:13:24,360
take care of this

00:13:20,190 --> 00:13:26,370
you have your 50% done and then if you

00:13:24,360 --> 00:13:29,040
provide our render function and you have

00:13:26,370 --> 00:13:31,529
quite a lot of work done this is like

00:13:29,040 --> 00:13:33,959
kind of a templating language is es6 is

00:13:31,529 --> 00:13:36,660
not HTML directly so we are not directly

00:13:33,959 --> 00:13:38,910
taking this HTML I'm inserting into the

00:13:36,660 --> 00:13:40,829
page but react we do some transformation

00:13:38,910 --> 00:13:43,410
of it into JavaScript and then we'll be

00:13:40,829 --> 00:13:47,100
smart about how to change the elements

00:13:43,410 --> 00:13:50,459
in there there is a lot of things here

00:13:47,100 --> 00:13:52,740
with pink and so on so the good practice

00:13:50,459 --> 00:13:54,269
here about the render function that I

00:13:52,740 --> 00:13:56,519
see also when people try with

00:13:54,269 --> 00:13:59,699
server-side rendering is to make render

00:13:56,519 --> 00:14:02,069
as clean as possible so only do these so

00:13:59,699 --> 00:14:05,970
it means with a modify the state in

00:14:02,069 --> 00:14:11,670
render or we don't make API calls which

00:14:05,970 --> 00:14:12,959
is maybe abuse but when you are starting

00:14:11,670 --> 00:14:14,399
you don't know where to put the code and

00:14:12,959 --> 00:14:16,079
you see a function in there and I see

00:14:14,399 --> 00:14:18,180
people trying to put I don't know where

00:14:16,079 --> 00:14:19,649
it goes so I must go in to render well

00:14:18,180 --> 00:14:21,930
if you don't know where it goes it never

00:14:19,649 --> 00:14:25,199
goes in to render on render its kind of

00:14:21,930 --> 00:14:27,630
a pure function but yes displays a

00:14:25,199 --> 00:14:32,189
templating or we don't make crazy things

00:14:27,630 --> 00:14:35,250
like this as any males here so and also

00:14:32,189 --> 00:14:37,709
we can have view or in react components

00:14:35,250 --> 00:14:39,810
hierarchy this is like the we're doing

00:14:37,709 --> 00:14:41,670
I'm sure interaction of this and with

00:14:39,810 --> 00:14:44,009
this I think you have quite a lot of

00:14:41,670 --> 00:14:46,350
react so you have this component we

00:14:44,009 --> 00:14:47,970
split it in sub components and how they

00:14:46,350 --> 00:14:51,389
communicate with with each other so they

00:14:47,970 --> 00:14:53,670
communicate also with passing state so

00:14:51,389 --> 00:14:56,160
this is like the para comprar will have

00:14:53,670 --> 00:14:57,839
two counters now and it will pass a name

00:14:56,160 --> 00:15:03,740
because now the country has a greeting

00:14:57,839 --> 00:15:06,059
like hi mmm amigo so the counter can

00:15:03,740 --> 00:15:08,850
access these variables that we pass to

00:15:06,059 --> 00:15:11,850
them so name will be accessed like this

00:15:08,850 --> 00:15:14,399
props props so or we will see in this

00:15:11,850 --> 00:15:16,559
presentation a lot is state that comes

00:15:14,399 --> 00:15:19,620
from the parent will modify it but we

00:15:16,559 --> 00:15:22,309
have access to it and that's it more or

00:15:19,620 --> 00:15:24,870
less how react works is the main idea

00:15:22,309 --> 00:15:27,540
but the important thing is that as

00:15:24,870 --> 00:15:29,250
everything depends on the state we can

00:15:27,540 --> 00:15:32,160
reproduce the stage we can time travel

00:15:29,250 --> 00:15:34,140
we can do a lot of nice things with it

00:15:32,160 --> 00:15:36,180
or Rob changes

00:15:34,140 --> 00:15:38,310
and there's a bigger consequence for us

00:15:36,180 --> 00:15:40,740
which solves the problem that we were

00:15:38,310 --> 00:15:43,290
talking about as we are not touching the

00:15:40,740 --> 00:15:44,910
document object model we can yes they

00:15:43,290 --> 00:15:47,190
react instead of touching the document

00:15:44,910 --> 00:15:50,550
object model yes give me an HTML string

00:15:47,190 --> 00:15:52,260
that represents the component in with

00:15:50,550 --> 00:15:55,080
this state that I pasted I pass to you

00:15:52,260 --> 00:15:57,000
that so that's why these libraries work

00:15:55,080 --> 00:16:01,140
this way and some others libraries can

00:15:57,000 --> 00:16:02,850
cannot do it so this this is what means

00:16:01,140 --> 00:16:04,560
server-side rendering we can exploit

00:16:02,850 --> 00:16:07,740
this feature to make the initial page

00:16:04,560 --> 00:16:11,970
load so in the first page load we pass

00:16:07,740 --> 00:16:13,950
XML with the string embedded in it the

00:16:11,970 --> 00:16:16,110
JavaScript that we set the render to

00:16:13,950 --> 00:16:18,180
this comparing to a string and then in

00:16:16,110 --> 00:16:21,330
subsequent calls by using the same

00:16:18,180 --> 00:16:23,550
JavaScript code we can make calls to the

00:16:21,330 --> 00:16:28,050
API and update the state but only with

00:16:23,550 --> 00:16:30,090
the same code base so in react this

00:16:28,050 --> 00:16:32,070
means we have this function render to

00:16:30,090 --> 00:16:36,270
string an element so give me this

00:16:32,070 --> 00:16:38,990
element as a string and then in the

00:16:36,270 --> 00:16:41,370
client-side so what the JavaScript side

00:16:38,990 --> 00:16:43,590
JavaScript loads in the browser you will

00:16:41,370 --> 00:16:46,560
see that the component is is already

00:16:43,590 --> 00:16:48,930
there we can say don't render it but

00:16:46,560 --> 00:16:50,880
hydrated so means that make the events

00:16:48,930 --> 00:16:55,340
work so take control over this piece of

00:16:50,880 --> 00:16:59,190
HTML code so render to string makes up

00:16:55,340 --> 00:17:02,370
its the middle can be bigger or whatever

00:16:59,190 --> 00:17:04,320
but it's an HTML string and then we can

00:17:02,370 --> 00:17:06,709
insert it in our template that we build

00:17:04,320 --> 00:17:09,449
with tweak or whatever we insert it and

00:17:06,709 --> 00:17:12,660
then we have to tell react ok

00:17:09,449 --> 00:17:14,670
this element Groot is the same component

00:17:12,660 --> 00:17:19,949
that you want to render now so just take

00:17:14,670 --> 00:17:21,750
control over it so in view is similar we

00:17:19,949 --> 00:17:23,670
have same kind of functions and there to

00:17:21,750 --> 00:17:26,040
string in this case and interesting is

00:17:23,670 --> 00:17:29,640
returning a call back but works mostly

00:17:26,040 --> 00:17:31,470
the same way and this view component

00:17:29,640 --> 00:17:33,600
except this it's different but I mean

00:17:31,470 --> 00:17:35,490
the ideas are what are important here

00:17:33,600 --> 00:17:37,380
you have a state when you have a kind of

00:17:35,490 --> 00:17:41,400
our inner function of or away so there

00:17:37,380 --> 00:17:44,190
library knows what to render so this is

00:17:41,400 --> 00:17:45,840
the main point so for instance angular

00:17:44,190 --> 00:17:48,090
angular has angular universal if you

00:17:45,840 --> 00:17:49,679
look at the for server-side rendering if

00:17:48,090 --> 00:17:53,159
look at the documentation for angular

00:17:49,679 --> 00:17:55,799
for not angular 1 they always would say

00:17:53,159 --> 00:17:59,789
as long as you don't do document object

00:17:55,799 --> 00:18:02,669
manipulation you will be okay so if a

00:17:59,789 --> 00:18:04,559
new library appears next week if it's

00:18:02,669 --> 00:18:06,659
depending on the state and it's kind of

00:18:04,559 --> 00:18:08,429
managing the rendering itself that'll be

00:18:06,659 --> 00:18:10,980
probably okay for doing server-side

00:18:08,429 --> 00:18:12,390
rendering if depends on manipulating the

00:18:10,980 --> 00:18:14,940
document object model it will probably

00:18:12,390 --> 00:18:16,350
break in several side rendering this is

00:18:14,940 --> 00:18:18,840
also important for instance when we have

00:18:16,350 --> 00:18:20,730
a page and then we are starting with

00:18:18,840 --> 00:18:22,830
react and then we have my react

00:18:20,730 --> 00:18:27,059
component and someone decides that we

00:18:22,830 --> 00:18:28,890
want for instance insert d3 or a text

00:18:27,059 --> 00:18:30,450
editor in there which we see that is a

00:18:28,890 --> 00:18:32,730
package called react for instance

00:18:30,450 --> 00:18:35,640
ckeditor which is kind of a bridge

00:18:32,730 --> 00:18:37,830
between a older library or library that

00:18:35,640 --> 00:18:39,510
is manipulating the Dom but as we see

00:18:37,830 --> 00:18:42,059
that these are react library because it

00:18:39,510 --> 00:18:43,740
can be using react then we try to put in

00:18:42,059 --> 00:18:45,029
there and it will break service rendered

00:18:43,740 --> 00:18:47,610
because at some point it will try to

00:18:45,029 --> 00:18:49,380
manipulate the document object model and

00:18:47,610 --> 00:18:51,679
it won't work so it's always the

00:18:49,380 --> 00:18:54,690
fundamental premise which works here

00:18:51,679 --> 00:18:56,610
work and then let's see how to do this

00:18:54,690 --> 00:18:59,880
in PHP in an efficient way we have

00:18:56,610 --> 00:19:01,049
several options well first is why should

00:18:59,880 --> 00:19:03,360
I do this because if you look at

00:19:01,049 --> 00:19:07,529
tutorials of server-side rendering they

00:19:03,360 --> 00:19:10,710
are almost every time in server-side

00:19:07,529 --> 00:19:13,380
rendering in OGS ok because they are

00:19:10,710 --> 00:19:15,539
tutorials so in a tutorial the easiest

00:19:13,380 --> 00:19:17,490
way or the to showcase this concept is

00:19:15,539 --> 00:19:20,640
just to pop the same language and no

00:19:17,490 --> 00:19:23,279
genius is me more natural but we have

00:19:20,640 --> 00:19:25,590
been pushing this like this library for

00:19:23,279 --> 00:19:27,630
some years and you find when you talk to

00:19:25,590 --> 00:19:30,720
people why are you using this they

00:19:27,630 --> 00:19:32,909
always have cases that are not typical

00:19:30,720 --> 00:19:35,100
cases of tutorials like for instance a

00:19:32,909 --> 00:19:37,200
typical case that the project already

00:19:35,100 --> 00:19:39,210
exists and someone spend money on it

00:19:37,200 --> 00:19:41,429
which is typical in the real world and

00:19:39,210 --> 00:19:43,770
then you find all sorts of situations

00:19:41,429 --> 00:19:45,990
that maybe didn't want to they want to

00:19:43,770 --> 00:19:47,669
do a/b testing and see if they want to

00:19:45,990 --> 00:19:49,620
vote for reality and they want to do it

00:19:47,669 --> 00:19:51,570
with one component for instance and for

00:19:49,620 --> 00:19:53,429
this a/b testing they don't want to

00:19:51,570 --> 00:19:56,659
change all their architecture to do this

00:19:53,429 --> 00:19:59,280
or sometimes you find that they want

00:19:56,659 --> 00:20:01,890
this component react but they have

00:19:59,280 --> 00:20:03,210
invested like lots of money in this

00:20:01,890 --> 00:20:05,130
other form that is also in the page

00:20:03,210 --> 00:20:08,340
which is where the money goes like

00:20:05,130 --> 00:20:11,550
selling form and they have written like

00:20:08,340 --> 00:20:14,340
100 100 I think was 200 templates in

00:20:11,550 --> 00:20:15,750
tweak complex template templating for

00:20:14,340 --> 00:20:19,020
dealing with all the cases roughly same

00:20:15,750 --> 00:20:21,270
for instance and you cannot just take

00:20:19,020 --> 00:20:22,680
this and put into no J's it's like we

00:20:21,270 --> 00:20:24,630
spend so much resources and this is

00:20:22,680 --> 00:20:26,490
working well why should do this yes

00:20:24,630 --> 00:20:28,830
because of server-side rendering hi or

00:20:26,490 --> 00:20:32,100
maybe we can combine these yeah tweak

00:20:28,830 --> 00:20:33,270
components with there are many cases

00:20:32,100 --> 00:20:35,910
depending on the project will be

00:20:33,270 --> 00:20:37,290
something some or another or you just

00:20:35,910 --> 00:20:41,460
want to maintain the same architecture

00:20:37,290 --> 00:20:43,860
or your people is expert in PHP but not

00:20:41,460 --> 00:20:45,560
so comfortable with node no J yes and

00:20:43,860 --> 00:20:48,060
you don't want to make this big change

00:20:45,560 --> 00:20:49,650
and all these cases have in common that

00:20:48,060 --> 00:20:51,150
they are from the real world so in the

00:20:49,650 --> 00:20:56,160
real world things are more complex and

00:20:51,150 --> 00:20:59,670
tutorials and we need sometimes stuff

00:20:56,160 --> 00:21:01,500
that is not simplest stuff although the

00:20:59,670 --> 00:21:04,020
solution is not so complicated but at

00:21:01,500 --> 00:21:06,000
least involves you to know to have PHP

00:21:04,020 --> 00:21:09,120
in the server and us keeping the in the

00:21:06,000 --> 00:21:11,880
roster spot of course so what we need to

00:21:09,120 --> 00:21:14,970
do this first we need typically we had

00:21:11,880 --> 00:21:17,640
JavaScript like in several files and we

00:21:14,970 --> 00:21:19,830
load them in the page we will need to

00:21:17,640 --> 00:21:22,530
build a bundle with all the JavaScript

00:21:19,830 --> 00:21:23,910
files or all the assets typically we do

00:21:22,530 --> 00:21:26,850
this with web pack there are other tools

00:21:23,910 --> 00:21:30,210
like roll up something that web pack is

00:21:26,850 --> 00:21:34,440
like the standard now so with web pack

00:21:30,210 --> 00:21:36,960
we combine our assets into a big should

00:21:34,440 --> 00:21:40,710
be small but topical this big javascript

00:21:36,960 --> 00:21:42,510
file and then we typically in the in

00:21:40,710 --> 00:21:44,490
server-side rendering we need another

00:21:42,510 --> 00:21:46,170
configuration that produces a slide

00:21:44,490 --> 00:21:47,880
nicely like this smaller we can use the

00:21:46,170 --> 00:21:50,570
same one but typically you won't want to

00:21:47,880 --> 00:21:53,430
have a different configuration to have a

00:21:50,570 --> 00:21:55,680
server-side JavaScript application and

00:21:53,430 --> 00:21:57,890
then with this you have always to when

00:21:55,680 --> 00:22:00,660
you whisper the options to have in mind

00:21:57,890 --> 00:22:03,360
that what we are going to do every

00:22:00,660 --> 00:22:05,280
request is we have our library which is

00:22:03,360 --> 00:22:09,120
like some hundreds of kilobytes

00:22:05,280 --> 00:22:13,210
typically that one change from request

00:22:09,120 --> 00:22:15,519
to request and having these

00:22:13,210 --> 00:22:18,309
being interpreted by the JavaScript

00:22:15,519 --> 00:22:21,429
compiler we will say for every request

00:22:18,309 --> 00:22:23,679
now we want to render this this

00:22:21,429 --> 00:22:25,119
component with this state like I want

00:22:23,679 --> 00:22:27,429
the first page of results with these

00:22:25,119 --> 00:22:30,219
filtering and so on in this typically

00:22:27,429 --> 00:22:34,089
just a few by few bytes so ideally we

00:22:30,219 --> 00:22:37,169
should only make you skip compile or

00:22:34,089 --> 00:22:40,570
make the interpretation of this pink

00:22:37,169 --> 00:22:44,919
pink component pink block which is only

00:22:40,570 --> 00:22:48,070
a few bytes so options let's first see

00:22:44,919 --> 00:22:51,639
how this is typical presented when we

00:22:48,070 --> 00:22:53,649
are not doing it in PHP when we are

00:22:51,639 --> 00:22:55,389
using PHP yes and as an API and we put

00:22:53,649 --> 00:22:57,729
no G's in the front this is like a

00:22:55,389 --> 00:23:02,440
typical example in tutorials we have no

00:22:57,729 --> 00:23:05,979
J's front and we relegate our PHP to an

00:23:02,440 --> 00:23:09,609
API which will just produce data in JSON

00:23:05,979 --> 00:23:11,469
or XML so this will have the server-side

00:23:09,609 --> 00:23:14,200
JavaScript application the component and

00:23:11,469 --> 00:23:16,210
an estate and we'll call PHP for the

00:23:14,200 --> 00:23:18,429
data and we this can produce the first

00:23:16,210 --> 00:23:22,029
rendering and then for subsequent

00:23:18,429 --> 00:23:24,969
renderings we call the API and since

00:23:22,029 --> 00:23:28,419
this javascript application in the

00:23:24,969 --> 00:23:33,609
clients at site has the same code it

00:23:28,419 --> 00:23:35,919
will do it then in PHP things we can do

00:23:33,609 --> 00:23:40,479
so then most simple way the most naive

00:23:35,919 --> 00:23:43,539
way which is slow advanced to you is to

00:23:40,479 --> 00:23:47,649
just fire up nodejs like we will do in a

00:23:43,539 --> 00:23:49,479
terminal just a fork and pipe our full

00:23:47,649 --> 00:23:51,909
application and the company we want to

00:23:49,479 --> 00:23:54,489
render to no J yes this is nice for

00:23:51,909 --> 00:23:56,789
probably for development and it's very

00:23:54,489 --> 00:24:01,359
simple if you have no J yes it will work

00:23:56,789 --> 00:24:03,789
problem with this is this is low so like

00:24:01,359 --> 00:24:05,649
we have will see here links through

00:24:03,789 --> 00:24:07,960
libraries we have been reading writing

00:24:05,649 --> 00:24:10,210
so this library will deal with the

00:24:07,960 --> 00:24:12,629
forking and so on of the process and and

00:24:10,210 --> 00:24:15,399
how it works and managing the JavaScript

00:24:12,629 --> 00:24:19,809
there was people trying bundle sorry

00:24:15,399 --> 00:24:21,579
bundle but so if you try and say oh this

00:24:19,809 --> 00:24:24,039
is slow of course it is low because we

00:24:21,579 --> 00:24:26,679
are doing the work too much work every

00:24:24,039 --> 00:24:27,010
request there is a second option there

00:24:26,679 --> 00:24:31,690
is

00:24:27,010 --> 00:24:34,900
PHP extension called v8j yes that embeds

00:24:31,690 --> 00:24:37,240
the v8 JavaScript engine engine which is

00:24:34,900 --> 00:24:40,270
the same JavaScript engine return

00:24:37,240 --> 00:24:43,000
machine that works in Chrome or in

00:24:40,270 --> 00:24:44,890
node.js yes and this is very nice work

00:24:43,000 --> 00:24:49,030
he saw his extension that you can call

00:24:44,890 --> 00:24:52,660
you can say in side of PHP yes give me

00:24:49,030 --> 00:24:55,600
the result of this javascript code this

00:24:52,660 --> 00:24:57,790
if in the first version versions of if

00:24:55,600 --> 00:24:59,380
you don't go very deep into the

00:24:57,790 --> 00:25:01,419
documentation will have also the same

00:24:59,380 --> 00:25:03,360
problem that you will pass server-side

00:25:01,419 --> 00:25:07,510
and the company will want to render to

00:25:03,360 --> 00:25:09,700
every request but still is a small

00:25:07,510 --> 00:25:11,980
improvement but the nice thing that it

00:25:09,700 --> 00:25:14,740
has I think one year when you don't have

00:25:11,980 --> 00:25:16,780
this extension is that we can also take

00:25:14,740 --> 00:25:19,630
snapshots so we can say are you going to

00:25:16,780 --> 00:25:23,350
freeze the state of this virtual machine

00:25:19,630 --> 00:25:25,870
so I will send I will just preserve it

00:25:23,350 --> 00:25:29,679
from requests with a kocchi kocchi we

00:25:25,870 --> 00:25:31,929
can mechanism we and then I will use it

00:25:29,679 --> 00:25:34,809
for next week and the next request fro a

00:25:31,929 --> 00:25:37,540
script server application we take a

00:25:34,809 --> 00:25:39,280
photo here and in the next request we

00:25:37,540 --> 00:25:41,290
just send the component on a state and

00:25:39,280 --> 00:25:43,000
this is quite fast because we are

00:25:41,290 --> 00:25:45,040
caching the server-side JavaScript

00:25:43,000 --> 00:25:47,860
application which doesn't change between

00:25:45,040 --> 00:25:50,470
requests so this is fast the problem

00:25:47,860 --> 00:25:52,840
that has this approach as much as I like

00:25:50,470 --> 00:25:54,790
this project is that is hard to

00:25:52,840 --> 00:25:56,500
sometimes to find packages for it so

00:25:54,790 --> 00:25:59,710
there are you want two packages but they

00:25:56,500 --> 00:26:01,059
were Mac packages but they somehow they

00:25:59,710 --> 00:26:02,770
are not in there anymore I don't know if

00:26:01,059 --> 00:26:06,610
they are discontinued or what happens

00:26:02,770 --> 00:26:08,500
doc very much is mmm are hard to build

00:26:06,610 --> 00:26:10,770
because you have to build like a v8 and

00:26:08,500 --> 00:26:13,570
you have them to build the extension and

00:26:10,770 --> 00:26:16,720
for me it's like I don't particularly

00:26:13,570 --> 00:26:19,260
enjoy doing this work and I find myself

00:26:16,720 --> 00:26:21,640
liking when I try this this approach

00:26:19,260 --> 00:26:23,679
spending so much time in into this so if

00:26:21,640 --> 00:26:25,450
you really like for instance dhoka dhoka

00:26:23,679 --> 00:26:27,490
setups and so on this will be a perfect

00:26:25,450 --> 00:26:30,669
option but you have to have in mind that

00:26:27,490 --> 00:26:32,950
you have to spend some time working with

00:26:30,669 --> 00:26:34,770
this but if you can just publish for the

00:26:32,950 --> 00:26:37,720
world that will be awesome

00:26:34,770 --> 00:26:38,830
then I don't care so much because there

00:26:37,720 --> 00:26:40,539
is a third option that works very well

00:26:38,830 --> 00:26:43,269
as well which

00:26:40,539 --> 00:26:45,489
to embed their roles of PHP and

00:26:43,269 --> 00:26:48,429
JavaScript so instead of having PHP as

00:26:45,489 --> 00:26:49,690
an API we have it in the front and we

00:26:48,429 --> 00:26:52,179
have a dummy server that kind of a

00:26:49,690 --> 00:26:54,309
worker that has nothing to do with our

00:26:52,179 --> 00:26:56,320
business it doesn't doesn't mean that

00:26:54,309 --> 00:26:58,659
you have to call your domain or your

00:26:56,320 --> 00:27:00,129
model in JavaScript but is yes a dummy

00:26:58,659 --> 00:27:02,589
server that is in charge of rendering

00:27:00,129 --> 00:27:05,979
components so you have this listening to

00:27:02,589 --> 00:27:09,009
UNIX socket and it has the server-side

00:27:05,979 --> 00:27:11,139
JavaScript application loaded and then

00:27:09,009 --> 00:27:14,440
you send every time the component is an

00:27:11,139 --> 00:27:16,539
estate and this is also works pretty

00:27:14,440 --> 00:27:18,489
fast and pretty well this is also used

00:27:16,539 --> 00:27:20,229
not in Kittery but in Ruby the same

00:27:18,489 --> 00:27:22,709
setup for egghead for instance the

00:27:20,229 --> 00:27:26,619
tutorial platform

00:27:22,709 --> 00:27:29,649
so this Stromlo server which is like and

00:27:26,619 --> 00:27:31,719
of 100 lines of code not very smart

00:27:29,649 --> 00:27:34,569
did you can of course put layers of

00:27:31,719 --> 00:27:36,579
caching and so on but it's something you

00:27:34,569 --> 00:27:40,479
can reuse between projects and yes works

00:27:36,579 --> 00:27:42,369
pretty well then about the libraries if

00:27:40,479 --> 00:27:44,079
you want to have a look or you want to

00:27:42,369 --> 00:27:46,029
see how to maybe structure if you want

00:27:44,079 --> 00:27:50,409
to win your own libraries or different

00:27:46,029 --> 00:27:52,929
setups and so on so we built some

00:27:50,409 --> 00:27:55,749
libraries PHP exactly yes is a library

00:27:52,929 --> 00:27:57,369
that allows you outside of the context

00:27:55,749 --> 00:27:59,199
of server-side rendering to execute

00:27:57,369 --> 00:28:01,299
arbitrary code in JavaScript maybe it's

00:27:59,199 --> 00:28:03,669
just a function you want to add up to

00:28:01,299 --> 00:28:06,369
numbers in ask you for some reason it

00:28:03,669 --> 00:28:09,159
will select the best runner you have so

00:28:06,369 --> 00:28:11,379
select node is yes if it's available but

00:28:09,159 --> 00:28:13,539
it would prefer if you have extension BH

00:28:11,379 --> 00:28:16,059
yes and it will take use of this

00:28:13,539 --> 00:28:18,999
snapshot mechanism is built for you so

00:28:16,059 --> 00:28:20,799
you have to do it again or you can

00:28:18,999 --> 00:28:22,569
provide your own runners if you want to

00:28:20,799 --> 00:28:23,829
compute it more or you want because they

00:28:22,569 --> 00:28:25,599
are more runners in JavaScript that we

00:28:23,829 --> 00:28:30,940
don't use but they're in there so you

00:28:25,599 --> 00:28:33,219
can do it if now in the context of react

00:28:30,940 --> 00:28:37,239
rendering that can also be applied to be

00:28:33,219 --> 00:28:39,549
rendering react render has the ability

00:28:37,239 --> 00:28:42,969
to use PHP exactly yes or to use this

00:28:39,549 --> 00:28:44,949
set up with external external render so

00:28:42,969 --> 00:28:47,349
to write to unique sockets and

00:28:44,949 --> 00:28:49,719
communicate with these nodes Express

00:28:47,349 --> 00:28:51,849
server that is saying I have these

00:28:49,719 --> 00:28:53,529
JavaScript application and I want the

00:28:51,849 --> 00:28:54,340
representation if the HTML of this

00:28:53,529 --> 00:28:56,290
component

00:28:54,340 --> 00:28:58,030
and then we have a bundle which is the

00:28:56,290 --> 00:29:00,940
integration with Symphony which is not

00:28:58,030 --> 00:29:02,830
very big yes because in symphony CC when

00:29:00,940 --> 00:29:04,930
you have a bundle - yes configuring

00:29:02,830 --> 00:29:06,880
everything with it why am L is think

00:29:04,930 --> 00:29:09,220
that is the way registering services and

00:29:06,880 --> 00:29:11,050
wiring things and so you write the

00:29:09,220 --> 00:29:15,520
minimum they're not very important but

00:29:11,050 --> 00:29:19,090
useful so the usage is easy well there

00:29:15,520 --> 00:29:21,670
are two extensions calendar is a two

00:29:19,090 --> 00:29:23,230
extension so we just say which renderer

00:29:21,670 --> 00:29:25,030
we want to use in this case for instance

00:29:23,230 --> 00:29:28,660
PHP exactly yes for options one and two

00:29:25,030 --> 00:29:30,100
and we configure this tension and we add

00:29:28,660 --> 00:29:33,190
this tension to tweak and now we can use

00:29:30,100 --> 00:29:35,920
this extension or option three is same

00:29:33,190 --> 00:29:37,600
but instead of saying where is in the

00:29:35,920 --> 00:29:40,090
previous case was where is my server

00:29:37,600 --> 00:29:41,920
bundle JavaScript we say where is the

00:29:40,090 --> 00:29:44,470
socket where we want to communicate with

00:29:41,920 --> 00:29:48,220
that is only matter of how to build the

00:29:44,470 --> 00:29:50,260
object and then there is a JavaScript

00:29:48,220 --> 00:29:52,720
part which will communicate with these

00:29:50,260 --> 00:29:54,790
other parts to expose the components so

00:29:52,720 --> 00:29:56,890
the nice thing about this is that we

00:29:54,790 --> 00:29:58,300
share this problem with all the other

00:29:56,890 --> 00:29:59,770
languages of the web that are not

00:29:58,300 --> 00:30:02,860
JavaScript they have the same problems

00:29:59,770 --> 00:30:05,080
and so there is a very nice solution

00:30:02,860 --> 00:30:07,900
from the world of Ruby on Rails and they

00:30:05,080 --> 00:30:09,220
JavaScript side of the code doesn't

00:30:07,900 --> 00:30:12,670
depend on Peruvian phrases in JavaScript

00:30:09,220 --> 00:30:14,830
it's still called reactant rails because

00:30:12,670 --> 00:30:17,410
the name they have made we can use it in

00:30:14,830 --> 00:30:19,330
PHP and it's very very nice work so this

00:30:17,410 --> 00:30:22,120
is like for instance used many projects

00:30:19,330 --> 00:30:23,860
is like something that is will by this

00:30:22,120 --> 00:30:26,620
person which is from Hawaii as you see I

00:30:23,860 --> 00:30:30,940
kind of feel like he's from Hawaii from

00:30:26,620 --> 00:30:35,370
the photo and with this although the

00:30:30,940 --> 00:30:38,290
libraries would work inside the usage is

00:30:35,370 --> 00:30:40,810
simple it's very easy to use we just say

00:30:38,290 --> 00:30:43,030
I want to use I want register this

00:30:40,810 --> 00:30:46,080
component this is my component and in

00:30:43,030 --> 00:30:48,820
tweak we can after this we can just say

00:30:46,080 --> 00:30:50,590
now render this component with this

00:30:48,820 --> 00:30:53,830
initial state and this will provide

00:30:50,590 --> 00:30:55,390
there this will use private templating

00:30:53,830 --> 00:30:57,790
so they provide a standard

00:30:55,390 --> 00:31:00,430
representation and also it will take

00:30:57,790 --> 00:31:02,620
care of hydrating when we are back in

00:31:00,430 --> 00:31:04,210
the browser loads the JavaScript code so

00:31:02,620 --> 00:31:06,940
it's dynamic not only server-side

00:31:04,210 --> 00:31:08,639
rendering but also dynamic after after

00:31:06,940 --> 00:31:10,750
the page load

00:31:08,639 --> 00:31:12,419
there is one thing also that this is

00:31:10,750 --> 00:31:15,070
nice that supports the understand

00:31:12,419 --> 00:31:18,940
libraries and also react on race that is

00:31:15,070 --> 00:31:22,750
you if you are using relax relax is some

00:31:18,940 --> 00:31:26,019
state manager so typically as we we so

00:31:22,750 --> 00:31:28,990
the components have its own state but we

00:31:26,019 --> 00:31:30,880
can also use or in combination store

00:31:28,990 --> 00:31:33,519
which is kind of a global state manager

00:31:30,880 --> 00:31:35,620
which it's wonderful maybe is a very

00:31:33,519 --> 00:31:38,380
nice piece of code and then components

00:31:35,620 --> 00:31:42,309
take pieces of this this state and can

00:31:38,380 --> 00:31:43,539
use it can use it so it simplifies our

00:31:42,309 --> 00:31:45,700
life and when working with server-side

00:31:43,539 --> 00:31:47,139
rendering because we can just say store

00:31:45,700 --> 00:31:48,970
with this initial state and all the

00:31:47,139 --> 00:31:53,380
components will take the state and use

00:31:48,970 --> 00:31:56,139
it so in Ruby on Rails in react on rails

00:31:53,380 --> 00:31:57,700
we use JavaScript we say register the

00:31:56,139 --> 00:31:59,049
store and register the component and if

00:31:57,700 --> 00:32:02,049
the component uses internally the store

00:31:59,049 --> 00:32:04,840
it will be available and will work and

00:32:02,049 --> 00:32:07,299
then in tweak is also simple us say I

00:32:04,840 --> 00:32:10,360
want this store with this global state

00:32:07,299 --> 00:32:13,570
and then I have a component that will

00:32:10,360 --> 00:32:16,059
use this state and that's it

00:32:13,570 --> 00:32:19,480
so it will render some HTML here or some

00:32:16,059 --> 00:32:22,029
script tags and it will work this opens

00:32:19,480 --> 00:32:24,909
also a door to something that we can do

00:32:22,029 --> 00:32:28,000
only when we are we are not in in

00:32:24,909 --> 00:32:30,730
JavaScript which is maybe we have a page

00:32:28,000 --> 00:32:32,679
that we have components that are written

00:32:30,730 --> 00:32:34,029
in tweak for instance or in PHP or

00:32:32,679 --> 00:32:35,529
whatever or whatever templating

00:32:34,029 --> 00:32:38,200
mechanism and then we have other

00:32:35,529 --> 00:32:40,029
components in react and since they share

00:32:38,200 --> 00:32:42,760
the state see they share this store they

00:32:40,029 --> 00:32:45,309
can be communicating with each other so

00:32:42,760 --> 00:32:48,700
they can for instance if you user logs

00:32:45,309 --> 00:32:50,380
in you can say hi John and then modify

00:32:48,700 --> 00:32:53,559
probably the page the main component for

00:32:50,380 --> 00:32:56,049
John because they are communicated even

00:32:53,559 --> 00:32:58,960
if they are in different parts isolated

00:32:56,049 --> 00:33:00,220
parts of the HTML which is something

00:32:58,960 --> 00:33:06,159
nice if you are for instance doing a

00:33:00,220 --> 00:33:09,070
transition from PHP to tweak react or

00:33:06,159 --> 00:33:11,950
things like that then as we have been

00:33:09,070 --> 00:33:14,049
seeing how people use this and inserting

00:33:11,950 --> 00:33:17,220
issues for some time there are things

00:33:14,049 --> 00:33:20,980
that to consider things that come

00:33:17,220 --> 00:33:22,179
frequently that you may want or need the

00:33:20,980 --> 00:33:24,580
first one is

00:33:22,179 --> 00:33:25,990
it's very nice to provide the survey

00:33:24,580 --> 00:33:28,390
provides apart from the initial state

00:33:25,990 --> 00:33:29,529
some kind of context about the page so

00:33:28,390 --> 00:33:31,510
about the state of the server

00:33:29,529 --> 00:33:34,270
particularly they wrote that we are

00:33:31,510 --> 00:33:36,460
browsing so react on Rails allows this

00:33:34,270 --> 00:33:38,020
and also libraries and if you write your

00:33:36,460 --> 00:33:40,809
own library on it's very nice to have

00:33:38,020 --> 00:33:42,880
this in mind to provide basically this

00:33:40,809 --> 00:33:45,250
context will be something like this so

00:33:42,880 --> 00:33:47,650
say are we in server-side context or not

00:33:45,250 --> 00:33:50,320
so the JavaScript part knows it maybe

00:33:47,650 --> 00:33:53,770
wants to do some modifications or in

00:33:50,320 --> 00:33:55,779
which route host everything are we so we

00:33:53,770 --> 00:33:57,730
can build the roads having this

00:33:55,779 --> 00:34:00,190
information otherwise is a bit annoying

00:33:57,730 --> 00:34:03,309
to find out where are we or how to be in

00:34:00,190 --> 00:34:06,880
the roads then for instance we can use

00:34:03,309 --> 00:34:10,389
this in react we we have two different

00:34:06,880 --> 00:34:12,879
routers there are many routers but the

00:34:10,389 --> 00:34:14,889
main road which is recruited as two

00:34:12,879 --> 00:34:17,859
different mechanism to at the end two

00:34:14,889 --> 00:34:19,119
components to build roads and one is for

00:34:17,859 --> 00:34:21,220
server-side rendering and the other one

00:34:19,119 --> 00:34:23,530
is based on browser so it accesses the

00:34:21,220 --> 00:34:26,580
history and so on of the browser the

00:34:23,530 --> 00:34:29,139
other one yes is no yes is going to

00:34:26,580 --> 00:34:31,599
render on HTML and it's the location

00:34:29,139 --> 00:34:33,220
where we are but you have to pass it and

00:34:31,599 --> 00:34:35,950
you have to say I'm going to use this

00:34:33,220 --> 00:34:38,669
static router or this browser router so

00:34:35,950 --> 00:34:40,419
it's a way to use this context to

00:34:38,669 --> 00:34:42,609
simplify your life because otherwise

00:34:40,419 --> 00:34:44,820
it's a bit oh I have these two routers

00:34:42,609 --> 00:34:47,859
and what should I do

00:34:44,820 --> 00:34:51,010
then another thing that comes up every

00:34:47,859 --> 00:34:53,530
time is the how to build the header tags

00:34:51,010 --> 00:34:56,800
like titles or their Facebook sharing

00:34:53,530 --> 00:34:59,589
tags like og og type so I publish my

00:34:56,800 --> 00:35:00,849
react library or view library and then

00:34:59,589 --> 00:35:02,920
people cannot share my content in

00:35:00,849 --> 00:35:06,160
Facebook because the cobbler yes arrives

00:35:02,920 --> 00:35:08,260
there and sees nothing because the title

00:35:06,160 --> 00:35:10,240
is not changed or they made an image of

00:35:08,260 --> 00:35:12,849
yeah I think that the one they want to

00:35:10,240 --> 00:35:15,220
share is not updated because they are

00:35:12,849 --> 00:35:16,450
not executing JavaScript at all so this

00:35:15,220 --> 00:35:17,920
is typically something you try at the

00:35:16,450 --> 00:35:20,589
end of the project and then you find out

00:35:17,920 --> 00:35:24,130
that you have a problem here because you

00:35:20,589 --> 00:35:26,440
depend on Facebook but the solution is

00:35:24,130 --> 00:35:29,140
quite quite simple so there is this

00:35:26,440 --> 00:35:32,470
library or react helmet or in view

00:35:29,140 --> 00:35:34,270
it's butyl MIT done by the NFL the

00:35:32,470 --> 00:35:35,260
football American football association I

00:35:34,270 --> 00:35:39,609
like this

00:35:35,260 --> 00:35:41,859
and you have this component helmet that

00:35:39,609 --> 00:35:46,210
you can specify when when you're in the

00:35:41,859 --> 00:35:48,369
component the title or the meta meta

00:35:46,210 --> 00:35:51,550
tags so a charge set or whatever the

00:35:48,369 --> 00:35:54,460
Facebook a lot of staffing here and if

00:35:51,550 --> 00:35:57,400
you use this in try inside it will just

00:35:54,460 --> 00:35:59,109
update the meta tags for you so to use

00:35:57,400 --> 00:36:05,200
this in server-side rendering helmet

00:35:59,109 --> 00:36:08,349
works very well with this we have we

00:36:05,200 --> 00:36:11,200
have a function in a possibility in

00:36:08,349 --> 00:36:13,810
reactant raised to use this so instead

00:36:11,200 --> 00:36:16,720
of rendering a component we can have a

00:36:13,810 --> 00:36:20,800
function that based on this initial

00:36:16,720 --> 00:36:23,920
state and the context we saw we can say

00:36:20,800 --> 00:36:26,380
I give you an arai with the component in

00:36:23,920 --> 00:36:28,619
HTML and whatever other stuff you may

00:36:26,380 --> 00:36:31,140
want so for instance the title and

00:36:28,619 --> 00:36:33,910
helmet is a library that you can say

00:36:31,140 --> 00:36:35,829
after you render the page please please

00:36:33,910 --> 00:36:40,450
give me the resulting title that you

00:36:35,829 --> 00:36:42,310
found out that it was applied so this is

00:36:40,450 --> 00:36:44,859
something that I've saw people solving

00:36:42,310 --> 00:36:46,510
like doing their own logic in JavaScript

00:36:44,859 --> 00:36:48,460
to determine for instance descriptions

00:36:46,510 --> 00:36:50,859
and for search engine optimization

00:36:48,460 --> 00:36:52,359
sometimes descriptions are quite a

00:36:50,859 --> 00:36:55,089
bigger law reasons one and they try to

00:36:52,359 --> 00:36:56,619
do it as well in PHP and then you have

00:36:55,089 --> 00:36:59,440
to placated code but with this you can

00:36:56,619 --> 00:37:02,099
just take the same and simplify your

00:36:59,440 --> 00:37:04,780
life then you have titles and so on and

00:37:02,099 --> 00:37:07,690
in tweak you can just say render

00:37:04,780 --> 00:37:10,420
component awry so not a component so we

00:37:07,690 --> 00:37:12,910
will receive the array and not only the

00:37:10,420 --> 00:37:17,500
component then you can use the title

00:37:12,910 --> 00:37:23,890
property to find the title and HTML we

00:37:17,500 --> 00:37:25,150
can yes displayed then also using a

00:37:23,890 --> 00:37:28,180
store and so on Commission with all the

00:37:25,150 --> 00:37:31,720
other stuff and then we are ending their

00:37:28,180 --> 00:37:35,910
final advices to make reality checks

00:37:31,720 --> 00:37:35,910
because when people are trying

00:37:39,210 --> 00:37:45,210
okay another reality check so when

00:37:43,530 --> 00:37:46,740
people try these they are typically

00:37:45,210 --> 00:37:48,599
learning the team is typically learning

00:37:46,740 --> 00:37:51,329
how to use react and although typically

00:37:48,599 --> 00:37:53,369
every application will work very well in

00:37:51,329 --> 00:37:55,890
server-side rendering as you are kind of

00:37:53,369 --> 00:37:59,550
finding your way into these new state

00:37:55,890 --> 00:38:02,339
management state manage the library so

00:37:59,550 --> 00:38:03,630
the state is the king of the of the

00:38:02,339 --> 00:38:07,920
process and not the document object

00:38:03,630 --> 00:38:11,010
model you find that people try to do

00:38:07,920 --> 00:38:12,660
things as they were used to and they

00:38:11,010 --> 00:38:14,520
will work in the client-side like you

00:38:12,660 --> 00:38:17,329
but you can combine in the client-side

00:38:14,520 --> 00:38:20,160
react with jQuery and it will work

00:38:17,329 --> 00:38:22,290
although is not the cleanest way to do

00:38:20,160 --> 00:38:29,790
this but then they try at the end they

00:38:22,290 --> 00:38:36,859
say are you mad I know I can it's only

00:38:29,790 --> 00:38:36,859
like that sorry

00:38:38,700 --> 00:38:51,720
well I can say by word but yeah well

00:38:48,890 --> 00:38:56,550
it's only two slide so I can yes a

00:38:51,720 --> 00:38:59,670
basically there are some some stuff what

00:38:56,550 --> 00:39:01,890
do we kind of can access in the in the

00:38:59,670 --> 00:39:04,680
client-side but we in server-side weak

00:39:01,890 --> 00:39:08,010
we cannot for instance I see people

00:39:04,680 --> 00:39:10,940
trying to do it's handy but to do use it

00:39:08,010 --> 00:39:14,250
use timers so set interval set timeout

00:39:10,940 --> 00:39:16,170
this won't work in server-side because

00:39:14,250 --> 00:39:18,120
also it's very bad practice to make it

00:39:16,170 --> 00:39:19,530
server wide or have intervals in there

00:39:18,120 --> 00:39:21,060
and you have a script code it's

00:39:19,530 --> 00:39:23,670
something that has to happen in

00:39:21,060 --> 00:39:27,420
milliseconds then also call that access

00:39:23,670 --> 00:39:30,630
the window document or the window object

00:39:27,420 --> 00:39:32,310
or document object or a one day window I

00:39:30,630 --> 00:39:33,690
don't know location something like that

00:39:32,310 --> 00:39:35,430
or the kind of location that's that

00:39:33,690 --> 00:39:37,770
doesn't work you have other ways to do

00:39:35,430 --> 00:39:43,080
this access to document object

00:39:37,770 --> 00:39:44,880
manipulation so no no and then do also a

00:39:43,080 --> 00:39:47,040
first rendering that depends on for

00:39:44,880 --> 00:39:48,810
instance put some wild stuff in there in

00:39:47,040 --> 00:39:50,820
the render method that for instance

00:39:48,810 --> 00:39:53,040
makes API calls so if you find that your

00:39:50,820 --> 00:39:55,590
server side rendering code is doing API

00:39:53,040 --> 00:39:58,890
calls itself that's obviously a smell

00:39:55,590 --> 00:40:01,170
but people as they try to find a way

00:39:58,890 --> 00:40:02,550
they fight versions is not the cleanest

00:40:01,170 --> 00:40:04,170
person as possible possible and then

00:40:02,550 --> 00:40:05,430
they find out that they want to do

00:40:04,170 --> 00:40:08,700
server-side rendering date application

00:40:05,430 --> 00:40:09,930
is working probably because of lag but

00:40:08,700 --> 00:40:11,880
then in server-side rendering it won't

00:40:09,930 --> 00:40:13,980
work so the advice is don't wait until

00:40:11,880 --> 00:40:15,540
the last moment to check if it's working

00:40:13,980 --> 00:40:17,940
so try it at the beginning because

00:40:15,540 --> 00:40:19,740
otherwise you will find it's a kind of a

00:40:17,940 --> 00:40:22,440
reality check to see I'm doing things

00:40:19,740 --> 00:40:24,720
the client the clean way or I'm kind of

00:40:22,440 --> 00:40:28,110
putting what I know into what I should

00:40:24,720 --> 00:40:31,380
know so don't don't wait until the last

00:40:28,110 --> 00:40:33,600
moment and yeah that's it so this summer

00:40:31,380 --> 00:40:36,270
is we saw what is server-side rendering

00:40:33,600 --> 00:40:39,270
what is it for some ways to do it in PHP

00:40:36,270 --> 00:40:41,250
the pros and the cons of everyone some

00:40:39,270 --> 00:40:43,410
libraries if you want to I will publish

00:40:41,250 --> 00:40:46,350
this right and if you want to try them

00:40:43,410 --> 00:40:48,930
or you want to apply these concepts to

00:40:46,350 --> 00:40:51,390
different technologies like bu laravel

00:40:48,930 --> 00:40:52,590
or if you want to came up with a better

00:40:51,390 --> 00:40:55,470
library that's also very

00:40:52,590 --> 00:40:58,140
come and see nice addition as well and

00:40:55,470 --> 00:41:02,490
tips and advices for typical promise you

00:40:58,140 --> 00:41:04,680
my fine they're annoying but can be

00:41:02,490 --> 00:41:07,110
solved very easily but I see sometimes

00:41:04,680 --> 00:41:09,450
people saying oh I try this and then I

00:41:07,110 --> 00:41:11,010
wanted to put a title tag and it was not

00:41:09,450 --> 00:41:12,540
working so I have to throw my coat away

00:41:11,010 --> 00:41:14,280
this well this is not the case but

00:41:12,540 --> 00:41:16,140
people get frustrated because things

00:41:14,280 --> 00:41:18,870
like that and then it's they have easy

00:41:16,140 --> 00:41:24,210
solutions and that's it that so this is

00:41:18,870 --> 00:41:26,900
a thank you thank you slide and if you

00:41:24,210 --> 00:41:26,900
have questions or

00:41:28,620 --> 00:41:36,760
[Applause]

00:41:30,590 --> 00:41:36,760

YouTube URL: https://www.youtube.com/watch?v=FioQK-L2wC4


