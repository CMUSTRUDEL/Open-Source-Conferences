Title: Tools of the Trade | Sebastian Bergmann
Publication date: 2019-09-30
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Sebastian Bergmann (thePHP.cc) | https://phpconference.com/speaker/sebastian-bergmann/

Developers need tools to be productive. In this session, Sebastian Bergmann presents an overview of the tools every PHP developer needs to know. For instance, we will have a look at dephpend, php-cs-fixer, phpstan, phan, and PHPUnit. Tools are not an end unto themselves, though. Therefore we will also discuss how these tools fit into your development process.


🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,030 --> 00:00:11,880
I randomly selected this one from my

00:00:07,370 --> 00:00:14,429
selection of talks because it's I think

00:00:11,880 --> 00:00:16,250
it's somehow Fitz has nothing to do with

00:00:14,429 --> 00:00:19,380
user groups sorry

00:00:16,250 --> 00:00:21,000
so case you don't know me I'm Sebastian

00:00:19,380 --> 00:00:25,170
I've been doing things with PHP and two

00:00:21,000 --> 00:00:27,840
PHP for over 20 years now I help teams

00:00:25,170 --> 00:00:30,689
build better software using PHP and

00:00:27,840 --> 00:00:33,809
related open-source projects do a lot of

00:00:30,689 --> 00:00:36,170
open-source work work on PHP and peach

00:00:33,809 --> 00:00:39,590
the unit and other tools that hopefully

00:00:36,170 --> 00:00:43,140
help developers build better software

00:00:39,590 --> 00:00:46,469
I'm a company that has this year its

00:00:43,140 --> 00:00:47,940
10th anniversary together with Anna and

00:00:46,469 --> 00:00:52,129
Stefan who are also presenting at this

00:00:47,940 --> 00:00:57,149
conference I help teams do things better

00:00:52,129 --> 00:00:59,070
the final advertisement thingy and sorry

00:00:57,149 --> 00:01:02,250
this is in German because it's for a

00:00:59,070 --> 00:01:03,719
German on nonprofit for the German PHP

00:01:02,250 --> 00:01:08,490
community that was founded a while ago

00:01:03,719 --> 00:01:11,070
and it's now slowly overcoming the

00:01:08,490 --> 00:01:14,010
encumbrance of German bureaucracy and is

00:01:11,070 --> 00:01:17,189
allowed to do things so we are starting

00:01:14,010 --> 00:01:19,110
to do things for instance come to frost

00:01:17,189 --> 00:01:22,619
con later this year which is a great

00:01:19,110 --> 00:01:24,299
event and then Augustine which is a nice

00:01:22,619 --> 00:01:30,900
nice conference for open-source stuff

00:01:24,299 --> 00:01:32,250
anyway that was my first IDE all this

00:01:30,900 --> 00:01:36,299
person was my first development

00:01:32,250 --> 00:01:39,960
environment Christmas 1990 I got an

00:01:36,299 --> 00:01:41,430
Amiga 500 because I wanted one I've been

00:01:39,960 --> 00:01:42,780
begging my parents for a really long

00:01:41,430 --> 00:01:45,060
time like I want that thing at some

00:01:42,780 --> 00:01:48,810
people other like other people in the

00:01:45,060 --> 00:01:51,780
class have at school and I already had

00:01:48,810 --> 00:01:53,250
lots of books from the library and since

00:01:51,780 --> 00:01:55,590
I didn't have a computer at the time was

00:01:53,250 --> 00:01:57,869
writing simple basic programs on paper

00:01:55,590 --> 00:01:59,280
and figured out would be really nice to

00:01:57,869 --> 00:02:02,850
actually have a computer that can run

00:01:59,280 --> 00:02:05,479
this for me and because programming on

00:02:02,850 --> 00:02:05,479
paper is stupid

00:02:06,930 --> 00:02:13,700
turns out that the programming language

00:02:10,860 --> 00:02:17,730
that came with the Amiga was not that

00:02:13,700 --> 00:02:19,670
good was kept me entertained for like

00:02:17,730 --> 00:02:22,830
one or two days until I realized that

00:02:19,670 --> 00:02:26,459
using basic to draw things on the screen

00:02:22,830 --> 00:02:29,819
that move it's rather tedious and leads

00:02:26,459 --> 00:02:31,440
to rather slow graphics so I try to

00:02:29,819 --> 00:02:34,860
figure out how to make it faster and

00:02:31,440 --> 00:02:38,060
along the way I learned Motorola 68 km

00:02:34,860 --> 00:02:41,519
Blee learned how to program the amigas

00:02:38,060 --> 00:02:45,709
custom chips to make sound and graphics

00:02:41,519 --> 00:02:48,299
in 2d 3d graphics effects in real time

00:02:45,709 --> 00:02:51,690
when it comes to programming I grew up

00:02:48,299 --> 00:02:56,400
in in the amiga demo scene real-time

00:02:51,690 --> 00:02:58,799
stuff sometimes nowadays I expect a

00:02:56,400 --> 00:03:01,370
little bit more from my development

00:02:58,799 --> 00:03:05,220
environment and the stuff from back then

00:03:01,370 --> 00:03:07,650
which is a rather painful realization

00:03:05,220 --> 00:03:12,600
every time that's like couple of weeks

00:03:07,650 --> 00:03:14,370
and a year I still go to my Amiga on the

00:03:12,600 --> 00:03:16,590
original hardware and not an emulator a

00:03:14,370 --> 00:03:19,440
real hardware is the real tool from back

00:03:16,590 --> 00:03:21,480
then and try to relearn the things that

00:03:19,440 --> 00:03:24,690
I knew when I was like 12 13 years old

00:03:21,480 --> 00:03:26,310
and back then I didn't know any better

00:03:24,690 --> 00:03:28,019
and back then I didn't have any better

00:03:26,310 --> 00:03:30,390
tools so it's really always a hurtful

00:03:28,019 --> 00:03:33,959
experience working with those tools from

00:03:30,390 --> 00:03:34,620
back then nowadays I want something like

00:03:33,959 --> 00:03:37,739
phpstorm

00:03:34,620 --> 00:03:42,630
or if I do PHP but I want phpstorm

00:03:37,739 --> 00:03:44,010
because see a little bit about that

00:03:42,630 --> 00:03:48,329
you're not going to get any more

00:03:44,010 --> 00:03:52,079
advertisements today this is considered

00:03:48,329 --> 00:03:54,870
by some to be an advertisement but it's

00:03:52,079 --> 00:03:56,790
my honest opinion it's the only thing

00:03:54,870 --> 00:04:00,690
that did it deserves to be called a PHP

00:03:56,790 --> 00:04:04,350
IDE if you're not using PHP storm for

00:04:00,690 --> 00:04:06,150
doing PHP work in my opinion you are in

00:04:04,350 --> 00:04:08,130
the world of pain and you should try to

00:04:06,150 --> 00:04:10,799
get out of that and at least give it a

00:04:08,130 --> 00:04:13,849
try everything else in my experience

00:04:10,799 --> 00:04:15,870
only gets in my way

00:04:13,849 --> 00:04:18,330
don't get me started on that

00:04:15,870 --> 00:04:19,639
I'm not going to repeat what was said

00:04:18,330 --> 00:04:22,249
here because I'm being

00:04:19,639 --> 00:04:24,800
Quartet I tried to be a nice person but

00:04:22,249 --> 00:04:27,699
the IDE that was just mentioned is one

00:04:24,800 --> 00:04:30,199
that regularly comes up in emails tweets

00:04:27,699 --> 00:04:33,590
tickets on github like page opinion does

00:04:30,199 --> 00:04:37,249
not work with that IDE and they expect

00:04:33,590 --> 00:04:39,050
me to fix that I'm not going to fix IDE

00:04:37,249 --> 00:04:44,389
integration for you not even for

00:04:39,050 --> 00:04:46,729
phpstorm but yeah so that is that not

00:04:44,389 --> 00:04:48,979
paid to say that but on the other hand

00:04:46,729 --> 00:04:51,439
I'm also not allowed to pay for phpstorm

00:04:48,979 --> 00:04:53,779
they just don't want my money just give

00:04:51,439 --> 00:04:57,979
me a game just gave me a free license

00:04:53,779 --> 00:05:02,060
for everything a long time ago yeah

00:04:57,979 --> 00:05:04,990
anyway if you already use phpstorm

00:05:02,060 --> 00:05:04,990
that's great

00:05:05,180 --> 00:05:11,810
phpstorm already has some really great

00:05:09,099 --> 00:05:14,210
static analysis code inspections built

00:05:11,810 --> 00:05:17,180
in but that does not mean that you

00:05:14,210 --> 00:05:19,999
cannot do more with regards to static

00:05:17,180 --> 00:05:21,770
inspections or getting yelled at about

00:05:19,999 --> 00:05:24,650
doing things wrong in your code while

00:05:21,770 --> 00:05:27,550
you're writing that code that's my PHP

00:05:24,650 --> 00:05:30,620
PHP inspections ei extended exists

00:05:27,550 --> 00:05:34,789
please do me a favor do not ask me about

00:05:30,620 --> 00:05:37,610
the why this plug-in for PHP storm is

00:05:34,789 --> 00:05:40,069
named that way I always find that if I

00:05:37,610 --> 00:05:42,830
find in naming really confusing ask that

00:05:40,069 --> 00:05:47,029
nice guy who develops a thing ei

00:05:42,830 --> 00:05:51,949
extended is the free version of that EA

00:05:47,029 --> 00:05:53,719
ultimate is the paid version of that I'm

00:05:51,949 --> 00:05:55,879
not advertising the ultimate version to

00:05:53,719 --> 00:05:58,879
thing that I use again because I got it

00:05:55,879 --> 00:06:01,240
from him for free and I cannot work

00:05:58,879 --> 00:06:04,430
without it anymore because it really

00:06:01,240 --> 00:06:07,550
keeps slapping me on on the wrists on

00:06:04,430 --> 00:06:11,419
the fingers when I do something stupid

00:06:07,550 --> 00:06:14,719
that I should think about other good so

00:06:11,419 --> 00:06:16,610
besides the IDE there are a couple of

00:06:14,719 --> 00:06:18,620
tools that I think every piece we

00:06:16,610 --> 00:06:21,649
develop our arm should should know about

00:06:18,620 --> 00:06:23,210
at least and the first category of tools

00:06:21,649 --> 00:06:26,319
that I would like to look at is tools

00:06:23,210 --> 00:06:26,319
for dependency management

00:06:26,830 --> 00:06:31,460
there are two types of dependencies

00:06:29,000 --> 00:06:33,950
dependencies that your software needs to

00:06:31,460 --> 00:06:38,060
do its work that those are runtime

00:06:33,950 --> 00:06:40,910
dependencies and in the PHP world the

00:06:38,060 --> 00:06:44,120
standard for that these days is composer

00:06:40,910 --> 00:06:45,770
and I'm really grateful for for this

00:06:44,120 --> 00:06:47,450
great tool because it solved a lot of

00:06:45,770 --> 00:06:51,320
problems that we had in the PHP world

00:06:47,450 --> 00:06:53,630
for a long time and I would like to take

00:06:51,320 --> 00:06:57,170
this opportunity for took for it a

00:06:53,630 --> 00:06:59,990
couple of seconds talk about some of the

00:06:57,170 --> 00:07:01,760
I know I'm being recorded but some of

00:06:59,990 --> 00:07:04,460
the that we as open-source

00:07:01,760 --> 00:07:04,880
maintainer x' have to deal with every

00:07:04,460 --> 00:07:08,720
day

00:07:04,880 --> 00:07:10,480
and I'm really lucky that I have not yet

00:07:08,720 --> 00:07:13,370
been threatened with physical violence

00:07:10,480 --> 00:07:16,520
that so far nobody has started the

00:07:13,370 --> 00:07:19,070
crowdfunding in this thing called the

00:07:16,520 --> 00:07:20,960
dark net to get me killed and I'm not

00:07:19,070 --> 00:07:24,500
joking those things have happened to

00:07:20,960 --> 00:07:26,900
other open-source people like if you do

00:07:24,500 --> 00:07:28,730
not accept my pull request I know you

00:07:26,900 --> 00:07:30,290
will be at this conference next week and

00:07:28,730 --> 00:07:33,140
I'm going to beat you up until you

00:07:30,290 --> 00:07:37,130
accept my pull request stuff like that

00:07:33,140 --> 00:07:41,030
that is not cool this is not as Extreme

00:07:37,130 --> 00:07:44,060
as that but it's a time waste for

00:07:41,030 --> 00:07:48,050
everybody involved like opening a ticket

00:07:44,060 --> 00:07:50,240
for composer your logo is wrong this is

00:07:48,050 --> 00:07:53,360
clearly a conductor and not a composer

00:07:50,240 --> 00:07:57,530
this wastes everybody's time if you want

00:07:53,360 --> 00:07:59,150
to hear more about that there's a

00:07:57,530 --> 00:08:02,030
presentation that you can find on the

00:07:59,150 --> 00:08:04,310
YouTube by jordi the maintainer of

00:08:02,030 --> 00:08:06,040
composer very talks about things like

00:08:04,310 --> 00:08:09,610
that

00:08:06,040 --> 00:08:12,169
it's really scary and frustrating but

00:08:09,610 --> 00:08:14,180
something that we need to talk about so

00:08:12,169 --> 00:08:16,070
what does composer do composer enables

00:08:14,180 --> 00:08:18,410
you to declare the libraries you depend

00:08:16,070 --> 00:08:20,330
on and find out which versions of which

00:08:18,410 --> 00:08:23,210
packages can and need to be installed

00:08:20,330 --> 00:08:25,640
and then installs them meaning it

00:08:23,210 --> 00:08:27,320
downloads them into your project and it

00:08:25,640 --> 00:08:28,910
also generates an autoloader so that you

00:08:27,320 --> 00:08:33,169
can use the classes you have just

00:08:28,910 --> 00:08:36,860
installed the install composer like this

00:08:33,169 --> 00:08:38,450
last time I checked this was the

00:08:36,860 --> 00:08:39,800
suggested way for installing composer

00:08:38,450 --> 00:08:43,010
which I really hate

00:08:39,800 --> 00:08:46,820
because you should not curl and pipe -

00:08:43,010 --> 00:08:49,670
if you do that you are basically asking

00:08:46,820 --> 00:08:51,890
for pain and security breaches and

00:08:49,670 --> 00:08:53,959
whatever don't do that there is no

00:08:51,890 --> 00:08:56,450
verification of authenticity and

00:08:53,959 --> 00:08:58,390
integrity involved here you basically

00:08:56,450 --> 00:09:01,959
download something and run it

00:08:58,390 --> 00:09:04,040
some people even do that as root

00:09:01,959 --> 00:09:05,959
congratulations you may or may not have

00:09:04,040 --> 00:09:07,700
just rooted your system and somebody

00:09:05,959 --> 00:09:12,740
else can do whatever they want with your

00:09:07,700 --> 00:09:17,089
machine don't do that and something like

00:09:12,740 --> 00:09:20,420
that happened earlier this year I really

00:09:17,089 --> 00:09:23,600
did not think that in 2019 I would have

00:09:20,420 --> 00:09:26,300
to talk about pear or write an article

00:09:23,600 --> 00:09:29,779
like that about pear what happened to

00:09:26,300 --> 00:09:31,579
pear ice I knew that it was still being

00:09:29,779 --> 00:09:34,010
used by some people however I was really

00:09:31,579 --> 00:09:36,350
hoping that it would be dead but I was

00:09:34,010 --> 00:09:38,269
also hoping for when this happened that

00:09:36,350 --> 00:09:41,690
it would not come back up online and

00:09:38,269 --> 00:09:42,470
would just stay dead but it came back

00:09:41,690 --> 00:09:46,070
from the dead

00:09:42,470 --> 00:09:48,920
it's like PHP slide walker or zombie or

00:09:46,070 --> 00:09:54,620
whatever it just doesn't die somebody

00:09:48,920 --> 00:09:56,839
needs yeah so somebody's making a joke

00:09:54,620 --> 00:10:03,200
in the front row about the pear channels

00:09:56,839 --> 00:10:04,430
for phpunit every single minute even in

00:10:03,200 --> 00:10:07,700
00:10:04,430 --> 00:10:11,480
I get dozens of requests to pair the PHP

00:10:07,700 --> 00:10:13,250
unit dot EE from which you would are not

00:10:11,480 --> 00:10:16,579
able to download peach payment for the

00:10:13,250 --> 00:10:18,649
last five years that's more zombies out

00:10:16,579 --> 00:10:22,160
there machines that were set up at some

00:10:18,649 --> 00:10:25,310
point and continuously whenever they

00:10:22,160 --> 00:10:31,460
make a build install try to install PHP

00:10:25,310 --> 00:10:33,620
unit buy a pair and fail yeah

00:10:31,460 --> 00:10:37,399
yes Oh life is too short to talk about

00:10:33,620 --> 00:10:39,860
that technology so we'll skip that if

00:10:37,399 --> 00:10:41,480
you want to use composure on your

00:10:39,860 --> 00:10:44,899
project you basically have to have your

00:10:41,480 --> 00:10:49,310
project you composer require vendor /

00:10:44,899 --> 00:10:54,050
package name to get the package into

00:10:49,310 --> 00:10:55,640
your project you get two files created

00:10:54,050 --> 00:10:57,350
for that composer jason and composer

00:10:55,640 --> 00:10:59,330
lock and you have a Devender directory

00:10:57,350 --> 00:11:02,060
where the downloaded code is of your

00:10:59,330 --> 00:11:07,730
dependencies this is what's convert

00:11:02,060 --> 00:11:11,779
composer Jason looks like as a required

00:11:07,730 --> 00:11:14,930
section rend or package name please use

00:11:11,779 --> 00:11:18,560
a version constraint the star is not a

00:11:14,930 --> 00:11:22,130
version constraint greater than or equal

00:11:18,560 --> 00:11:26,060
of 5.6 is not a version constraint those

00:11:22,130 --> 00:11:28,810
are death star version constraints they

00:11:26,060 --> 00:11:32,630
lead to pain and suffering and other

00:11:28,810 --> 00:11:35,360
negative things what the composer does

00:11:32,630 --> 00:11:36,890
is it reads the composer Jason resolves

00:11:35,360 --> 00:11:39,560
the dependencies and generates a

00:11:36,890 --> 00:11:41,600
composer log file it then reads the

00:11:39,560 --> 00:11:45,020
composer Locke downloads the

00:11:41,600 --> 00:11:48,410
dependencies installs them generates the

00:11:45,020 --> 00:11:51,020
autoloader and you're done and there are

00:11:48,410 --> 00:11:54,020
various ways of our various degrees of

00:11:51,020 --> 00:11:56,209
how you interact obviously this composer

00:11:54,020 --> 00:11:58,790
Jake composer files with regard to

00:11:56,209 --> 00:12:00,560
version control composer Jason

00:11:58,790 --> 00:12:02,420
definitely belongs in version control

00:12:00,560 --> 00:12:05,200
because everybody in the project should

00:12:02,420 --> 00:12:07,160
know what dependencies you're using

00:12:05,200 --> 00:12:11,089
unless you want to surprise your

00:12:07,160 --> 00:12:16,760
colleagues and you make and you may

00:12:11,089 --> 00:12:18,230
laugh but I've actually seen that so in

00:12:16,760 --> 00:12:20,420
a lot of project it makes a lot of sense

00:12:18,230 --> 00:12:22,010
to check composer lock into version

00:12:20,420 --> 00:12:24,550
control to make sure that everybody on

00:12:22,010 --> 00:12:28,310
the team is working with the same

00:12:24,550 --> 00:12:31,640
versions so you can put composer locked

00:12:28,310 --> 00:12:34,279
in the version control in quite a few

00:12:31,640 --> 00:12:36,800
situations especially in an enterprise

00:12:34,279 --> 00:12:38,600
setting or closed source software inside

00:12:36,800 --> 00:12:41,480
a company it makes a lot of sense at

00:12:38,600 --> 00:12:43,970
least in my opinion to also check in the

00:12:41,480 --> 00:12:45,290
vendor directory in version control that

00:12:43,970 --> 00:12:47,990
gives you the possibility

00:12:45,290 --> 00:12:50,690
like a year from now some auditor comes

00:12:47,990 --> 00:12:54,620
along and says okay you had this

00:12:50,690 --> 00:12:59,600
business transaction a year ago based on

00:12:54,620 --> 00:13:01,579
this data please proof using your

00:12:59,600 --> 00:13:04,160
software that your software as it was

00:13:01,579 --> 00:13:06,529
deployed at that point in time how it

00:13:04,160 --> 00:13:08,779
made this decision did it actually make

00:13:06,529 --> 00:13:10,790
its institution or was there some

00:13:08,779 --> 00:13:15,380
employee involved that overrode

00:13:10,790 --> 00:13:18,050
something somewhere whatever for that to

00:13:15,380 --> 00:13:22,190
work you need to be able to go back in

00:13:18,050 --> 00:13:24,500
time and actually have a working set of

00:13:22,190 --> 00:13:25,910
the software your code plus the actual

00:13:24,500 --> 00:13:28,430
dependencies that you had in production

00:13:25,910 --> 00:13:31,730
at that time just having composer lock

00:13:28,430 --> 00:13:34,250
in version control is not enough because

00:13:31,730 --> 00:13:35,720
the version of a library that you used

00:13:34,250 --> 00:13:40,310
at that point in time could have been

00:13:35,720 --> 00:13:41,810
unpublished by now yeah or github could

00:13:40,310 --> 00:13:44,269
be down and you cannot get it or

00:13:41,810 --> 00:13:47,779
packages is down and you cannot get it

00:13:44,269 --> 00:13:49,940
or somebody pulled version 1.2.3 and

00:13:47,779 --> 00:13:50,870
replaced it with one or two or three

00:13:49,940 --> 00:13:54,220
something something that you should

00:13:50,870 --> 00:13:59,360
never do but people some people do that

00:13:54,220 --> 00:14:03,170
and if you really need a reliable and

00:13:59,360 --> 00:14:04,639
robust way of reprobated use the state

00:14:03,170 --> 00:14:06,050
of the software that you had deployed at

00:14:04,639 --> 00:14:10,269
some point in the past that's the only

00:14:06,050 --> 00:14:10,269
way to achieve that

00:14:11,649 --> 00:14:17,269
so composer is really great for runtime

00:14:14,209 --> 00:14:18,920
dependencies some people also manage

00:14:17,269 --> 00:14:21,410
their development time dependencies

00:14:18,920 --> 00:14:23,660
these composers and development time

00:14:21,410 --> 00:14:26,990
dependencies are things like tools such

00:14:23,660 --> 00:14:31,760
as PHP unit or fan preach beast and

00:14:26,990 --> 00:14:35,149
Epsom and so on for those kind of tools

00:14:31,760 --> 00:14:37,130
I prefer to use it we called five five

00:14:35,149 --> 00:14:38,959
is the far installation verification

00:14:37,130 --> 00:14:41,990
environment it downloads the FAR's of

00:14:38,959 --> 00:14:46,399
tools for instance PHP unit and puts

00:14:41,990 --> 00:14:48,019
them into your into your project that's

00:14:46,399 --> 00:14:51,800
basically we're just chat with the

00:14:48,019 --> 00:14:53,750
important thing here is that you that

00:14:51,800 --> 00:14:55,639
five automatically verifies the

00:14:53,750 --> 00:14:57,470
authenticity and the integrity of the

00:14:55,639 --> 00:14:58,760
thing that you just downloaded that's

00:14:57,470 --> 00:14:59,030
important because that is something that

00:14:58,760 --> 00:15:01,070
you

00:14:59,030 --> 00:15:02,660
run potentially as root on your

00:15:01,070 --> 00:15:07,250
continuous integration docker container

00:15:02,660 --> 00:15:10,670
whatever thingy that allows you to make

00:15:07,250 --> 00:15:14,540
sure that you use a PHP unit binary that

00:15:10,670 --> 00:15:16,790
was signed by me now whether or not you

00:15:14,540 --> 00:15:19,640
trust me is something completely

00:15:16,790 --> 00:15:22,520
different but this makes sure that you

00:15:19,640 --> 00:15:24,980
can trust that I created at release the

00:15:22,520 --> 00:15:28,190
same for all these other tools all the

00:15:24,980 --> 00:15:30,470
other tools that are that can be managed

00:15:28,190 --> 00:15:32,720
through five they need to have

00:15:30,470 --> 00:15:34,900
signatures that verify authenticity and

00:15:32,720 --> 00:15:38,180
integrity that you that they come from

00:15:34,900 --> 00:15:42,820
the known authority to make releases for

00:15:38,180 --> 00:15:45,710
PHP unit for PHP a B for some whatever

00:15:42,820 --> 00:15:47,720
and I'm the one thing that I'm really

00:15:45,710 --> 00:15:50,180
hoping for to see at some point in the

00:15:47,720 --> 00:15:52,210
near future in composer is also a

00:15:50,180 --> 00:15:54,350
cryptographic integrity and authenticity

00:15:52,210 --> 00:15:57,410
check so that we cannot run into a

00:15:54,350 --> 00:15:59,930
situation like the JavaScript community

00:15:57,410 --> 00:16:02,330
had a while back when somebody D

00:15:59,930 --> 00:16:03,950
published an NPM package and somebody

00:16:02,330 --> 00:16:07,010
else replace it with something that had

00:16:03,950 --> 00:16:09,830
the same name luckily at the time it did

00:16:07,010 --> 00:16:10,910
exactly the same thing but somebody

00:16:09,830 --> 00:16:13,850
could have replaced it with something

00:16:10,910 --> 00:16:16,490
completely different and thereby owning

00:16:13,850 --> 00:16:20,080
a lot of machines because there's no

00:16:16,490 --> 00:16:20,080
true web of trust built into that

00:16:20,530 --> 00:16:27,620
installing five is installing five

00:16:23,810 --> 00:16:29,180
itself is a bit you're not really

00:16:27,620 --> 00:16:30,590
tedious but it requires a couple of

00:16:29,180 --> 00:16:32,780
steps because you need to make sure that

00:16:30,590 --> 00:16:35,290
you get a version of five that you trust

00:16:32,780 --> 00:16:37,910
once you have the version that you trust

00:16:35,290 --> 00:16:40,070
for that you need to verify that the

00:16:37,910 --> 00:16:43,160
signature yourself if you're paranoid

00:16:40,070 --> 00:16:46,010
enough to actually do that after that it

00:16:43,160 --> 00:16:48,760
does that for you and then you can just

00:16:46,010 --> 00:16:50,770
do five install PHP units it will

00:16:48,760 --> 00:16:55,760
symlink

00:16:50,770 --> 00:16:57,320
PHP unit far from a cache download

00:16:55,760 --> 00:17:02,240
whatever directory in your home

00:16:57,320 --> 00:17:06,380
directory by default what I usually do

00:17:02,240 --> 00:17:08,540
is I use five installed I just copy to

00:17:06,380 --> 00:17:10,280
get not assembling but the actual file

00:17:08,540 --> 00:17:12,650
and I check those files into version

00:17:10,280 --> 00:17:12,890
control because for my projects I want

00:17:12,650 --> 00:17:15,650
to

00:17:12,890 --> 00:17:17,480
able to just get clone my repo and

00:17:15,650 --> 00:17:20,689
immediately have all the tools that I

00:17:17,480 --> 00:17:23,390
need to work on that again to a lesser

00:17:20,689 --> 00:17:26,059
extent that also allows me to work on a

00:17:23,390 --> 00:17:27,740
revision of phpunit for instance from a

00:17:26,059 --> 00:17:31,309
year ago with the version of the tool

00:17:27,740 --> 00:17:35,110
that I was using a year ago but I'm

00:17:31,309 --> 00:17:39,830
paranoid your level of paranoia I may

00:17:35,110 --> 00:17:42,580
may vary so what composure Jason is for

00:17:39,830 --> 00:17:46,040
composed of five what XML is for five

00:17:42,580 --> 00:17:47,690
same semantic versioning constraints

00:17:46,040 --> 00:17:53,450
please use constraints the star is not a

00:17:47,690 --> 00:17:54,770
constraint and so on and by default you

00:17:53,450 --> 00:17:59,179
do not have tools on the version control

00:17:54,770 --> 00:18:01,040
but like I said I do that now you may be

00:17:59,179 --> 00:18:06,350
wondering should you install tools using

00:18:01,040 --> 00:18:08,510
composer or far that would be the topic

00:18:06,350 --> 00:18:10,790
for and or that could be a topic for an

00:18:08,510 --> 00:18:11,929
entire one-hour session of a

00:18:10,790 --> 00:18:14,150
presentation we don't have that much

00:18:11,929 --> 00:18:16,190
time so I just refer you to it for this

00:18:14,150 --> 00:18:21,980
right that I had at some point you can

00:18:16,190 --> 00:18:27,169
read that over there this is probably

00:18:21,980 --> 00:18:29,809
the most important tool that you never

00:18:27,169 --> 00:18:31,610
heard about and that you hopefully never

00:18:29,809 --> 00:18:35,450
have to use yourself not because it's

00:18:31,610 --> 00:18:38,059
bad but hopefully because it's built

00:18:35,450 --> 00:18:40,340
into things like v and composer at some

00:18:38,059 --> 00:18:45,410
point so that you do not need to worry

00:18:40,340 --> 00:18:47,809
about it the PHP scoper takes or looks

00:18:45,410 --> 00:18:49,850
at a directory on one or more

00:18:47,809 --> 00:18:52,990
directories of PHP source code and

00:18:49,850 --> 00:18:55,850
rewrites that source code so that

00:18:52,990 --> 00:19:00,110
everything is in randomized namespaces

00:18:55,850 --> 00:19:02,690
but still works you may be wondering why

00:19:00,110 --> 00:19:05,750
that is but why that would be a

00:19:02,690 --> 00:19:07,160
desirable thing consider the fact you

00:19:05,750 --> 00:19:09,710
have a project and in your project to

00:19:07,160 --> 00:19:12,530
depend on library a and you depend on

00:19:09,710 --> 00:19:15,370
library B and both a and B depend on

00:19:12,530 --> 00:19:17,299
library C but in different versions

00:19:15,370 --> 00:19:19,040
currently that does not work because

00:19:17,299 --> 00:19:23,480
that is a version conflict that composer

00:19:19,040 --> 00:19:26,720
cannot resolve consider the fact that

00:19:23,480 --> 00:19:28,309
PHP unit for instance or for people

00:19:26,720 --> 00:19:30,650
for instance I would really like to use

00:19:28,309 --> 00:19:33,620
some symfony components currently I

00:19:30,650 --> 00:19:35,990
don't do that because that would

00:19:33,620 --> 00:19:38,929
conflict with the symphony components -

00:19:35,990 --> 00:19:43,280
Symphony project tests there symfony

00:19:38,929 --> 00:19:44,600
components with speech per unit that the

00:19:43,280 --> 00:19:48,950
Younger package for instance in the past

00:19:44,600 --> 00:19:51,770
that that was really bad

00:19:48,950 --> 00:19:53,419
I have preview releases of current

00:19:51,770 --> 00:19:55,340
versions of PHP unit available where

00:19:53,419 --> 00:19:58,250
everything that belongs to PHP unit and

00:19:55,340 --> 00:20:01,580
penis dependencies is in randomized

00:19:58,250 --> 00:20:04,480
namespaces and it works for most of the

00:20:01,580 --> 00:20:07,490
cases there's a lot of work being done

00:20:04,480 --> 00:20:10,340
right now in PHP scope are in better

00:20:07,490 --> 00:20:12,770
reflection which is a dependency of PHP

00:20:10,340 --> 00:20:14,780
scoper that makes this more robust and

00:20:12,770 --> 00:20:18,830
more reliable and I really hope that by

00:20:14,780 --> 00:20:20,570
the end of this year the default for PHP

00:20:18,830 --> 00:20:22,340
unit as afar will be in randomized

00:20:20,570 --> 00:20:26,510
namespaces so all these conflicts are

00:20:22,340 --> 00:20:28,690
are gone which is cool if you're

00:20:26,510 --> 00:20:32,380
interested in that as a ticket for that

00:20:28,690 --> 00:20:35,380
there are a lot of discussion happens

00:20:32,380 --> 00:20:35,380
yeah

00:20:36,910 --> 00:20:44,300
different kind of tools enforcing coding

00:20:40,250 --> 00:20:47,330
guidelines not going to talk about PHP

00:20:44,300 --> 00:20:51,740
code sniffer because I stopped using

00:20:47,330 --> 00:20:55,490
that a while ago I'm using PHP CS fixer

00:20:51,740 --> 00:21:02,809
and a lot of other people are using PCs

00:20:55,490 --> 00:21:05,210
fixer that started as a tool that only

00:21:02,809 --> 00:21:07,400
did what the name says that it does it

00:21:05,210 --> 00:21:09,350
fixes your code cleans it up so that it

00:21:07,400 --> 00:21:12,770
conforms to your configuration of coding

00:21:09,350 --> 00:21:14,809
style at some point they implemented the

00:21:12,770 --> 00:21:16,490
dry run feature which now allows it to

00:21:14,809 --> 00:21:17,570
be used in continuous integration for

00:21:16,490 --> 00:21:21,290
instance when you send the pull request

00:21:17,570 --> 00:21:23,360
to PHP unit on github on Travis I run to

00:21:21,290 --> 00:21:27,020
each pcs fixer to check whether or not

00:21:23,360 --> 00:21:29,240
the code that was changed conforms to my

00:21:27,020 --> 00:21:31,760
coding standards and if it does not

00:21:29,240 --> 00:21:33,200
teach pcs tricks or comments on on the

00:21:31,760 --> 00:21:36,540
pull request and says hey please fix

00:21:33,200 --> 00:21:39,490
this otherwise Sebastian cannot read it

00:21:36,540 --> 00:21:43,460
[Music]

00:21:39,490 --> 00:21:46,250
yeah but it can fix so many things and

00:21:43,460 --> 00:21:48,770
it cannot just fix things that are easy

00:21:46,250 --> 00:21:50,990
to fix like taps versus spaces or what

00:21:48,770 --> 00:21:54,559
where do the curly braces go and so on

00:21:50,990 --> 00:21:57,500
but for instance it can also reorder the

00:21:54,559 --> 00:22:00,800
methods in the class personally I prefer

00:21:57,500 --> 00:22:02,510
to have at the first methods in the

00:22:00,800 --> 00:22:06,950
class the public static methods followed

00:22:02,510 --> 00:22:09,770
by the Interceptor methods constructor

00:22:06,950 --> 00:22:11,150
the constructor and so on followed by

00:22:09,770 --> 00:22:12,620
the public methods that are not static

00:22:11,150 --> 00:22:15,410
for it by the protective method followed

00:22:12,620 --> 00:22:17,660
by the private method and so on and it

00:22:15,410 --> 00:22:20,630
can do that automatically for me it can

00:22:17,660 --> 00:22:23,840
migrate code to use newer language

00:22:20,630 --> 00:22:27,380
features of the PHP language simple

00:22:23,840 --> 00:22:30,650
stuff like replacing arrow array braces

00:22:27,380 --> 00:22:33,770
with just the brackets that's easy but

00:22:30,650 --> 00:22:36,410
it can also detect it's in certain if

00:22:33,770 --> 00:22:38,280
statements that the new ternary operator

00:22:36,410 --> 00:22:41,860
or the

00:22:38,280 --> 00:22:43,780
the space ship operator or another coil

00:22:41,860 --> 00:22:47,020
as operator can be used and it can do

00:22:43,780 --> 00:22:49,540
that for you that's really nice

00:22:47,020 --> 00:22:53,650
so I like the tool a lot and I cannot

00:22:49,540 --> 00:22:55,360
work without it anymore because I find

00:22:53,650 --> 00:22:57,820
it that for for some of the rules that I

00:22:55,360 --> 00:23:02,460
have in my coding standards I cannot

00:22:57,820 --> 00:23:06,940
follow them some not not always at least

00:23:02,460 --> 00:23:10,090
so the tool helps me not just people

00:23:06,940 --> 00:23:12,730
that want to contribute so configuration

00:23:10,090 --> 00:23:17,740
file for that is P dot PHP CS dist it's

00:23:12,730 --> 00:23:19,660
a PHP code in there and you basically

00:23:17,740 --> 00:23:21,070
tell on which directories to run and

00:23:19,660 --> 00:23:23,500
what rules do you want and some of those

00:23:21,070 --> 00:23:26,350
rules can be configured and then you can

00:23:23,500 --> 00:23:28,720
run it using the dry run for instance

00:23:26,350 --> 00:23:31,120
and this is rather boring because all

00:23:28,720 --> 00:23:33,910
files conform to the coding standard if

00:23:31,120 --> 00:23:37,059
you break something now know we'd be

00:23:33,910 --> 00:23:39,010
sorry breaking is the next slide if we

00:23:37,059 --> 00:23:43,179
run it again it's really quick because

00:23:39,010 --> 00:23:44,650
it caches so it only looks at code that

00:23:43,179 --> 00:23:49,179
has changed into the last time it was

00:23:44,650 --> 00:23:53,140
run if we break something it shows you a

00:23:49,179 --> 00:23:55,059
div and the diff is what it would change

00:23:53,140 --> 00:23:58,540
how it would change the code if we were

00:23:55,059 --> 00:24:01,000
not in dry run mode so you get a chance

00:23:58,540 --> 00:24:07,000
to review before it actually does

00:24:01,000 --> 00:24:09,190
something right yeah and if you want to

00:24:07,000 --> 00:24:11,500
use it in continuous integration just

00:24:09,190 --> 00:24:14,530
use it with dry run and set the output

00:24:11,500 --> 00:24:19,390
mode to check style and then it checks

00:24:14,530 --> 00:24:20,770
our XML and all the common continuous

00:24:19,390 --> 00:24:22,030
integration solutions they know what to

00:24:20,770 --> 00:24:23,410
do is check Styles they don't care about

00:24:22,030 --> 00:24:26,040
that it doesn't come from page because

00:24:23,410 --> 00:24:26,040
never anymore

00:24:28,059 --> 00:24:41,229
right finding problems in the past like

00:24:35,109 --> 00:24:43,690
in the distant past before PHP 7 no the

00:24:41,229 --> 00:24:45,129
dark ages were when I started doing

00:24:43,690 --> 00:24:47,320
things with PHP that was like the late

00:24:45,129 --> 00:24:53,950
days of PHP - in the early days of PHP 3

00:24:47,320 --> 00:24:56,679
those were the dark ages we had like two

00:24:53,950 --> 00:25:01,979
really popular tools for looking at code

00:24:56,679 --> 00:25:04,659
to find things points in the codes

00:25:01,979 --> 00:25:06,609
locations in the code that are worth

00:25:04,659 --> 00:25:07,479
looking at because there may be

00:25:06,609 --> 00:25:09,309
problematic

00:25:07,479 --> 00:25:12,729
those were tools like PHP dependent

00:25:09,309 --> 00:25:14,649
people mess detector these tools do not

00:25:12,729 --> 00:25:18,429
work with current hp7 code and the

00:25:14,649 --> 00:25:21,489
projects are at least dormant is not

00:25:18,429 --> 00:25:23,739
dead but that's ok because we have

00:25:21,489 --> 00:25:26,349
better tools now and we have these

00:25:23,739 --> 00:25:29,499
better tools because a lot change in the

00:25:26,349 --> 00:25:33,580
PHP ecosystem one thing that changed

00:25:29,499 --> 00:25:35,979
since PHP 7 ph PS compiler uses an

00:25:33,580 --> 00:25:38,200
abstract syntax tree and there is an

00:25:35,979 --> 00:25:41,259
extension that it exposes the abstract

00:25:38,200 --> 00:25:44,200
syntax tree from PHP own compiler to

00:25:41,259 --> 00:25:47,409
userland PHP so you can do static

00:25:44,200 --> 00:25:49,749
analysis on that this is extremely fast

00:25:47,409 --> 00:25:52,509
and it's always accurate and in sync

00:25:49,749 --> 00:25:56,289
with the language because it is coming

00:25:52,509 --> 00:25:58,389
from the languages official compiler the

00:25:56,289 --> 00:26:01,149
other thing that's changed is that we

00:25:58,389 --> 00:26:03,489
now have libraries such as PHP parser

00:26:01,149 --> 00:26:05,409
that are actively maintained by the

00:26:03,489 --> 00:26:08,710
people who also work on the PHP compiler

00:26:05,409 --> 00:26:11,229
itself and that's written in PHP as a

00:26:08,710 --> 00:26:14,830
part and gives you a parser for PHP

00:26:11,229 --> 00:26:17,379
that's really easy to use provides a

00:26:14,830 --> 00:26:21,070
good API to implement static analysis

00:26:17,379 --> 00:26:23,320
tools so that's kind of nice and this is

00:26:21,070 --> 00:26:27,940
just a nonsense

00:26:23,320 --> 00:26:31,659
script that has some issues so we have

00:26:27,940 --> 00:26:35,619
some code with issues to test our static

00:26:31,659 --> 00:26:38,739
analysis tools with I'm not going I'm

00:26:35,619 --> 00:26:40,480
not going into detail into most of these

00:26:38,739 --> 00:26:44,500
so there's a tool called fan

00:26:40,480 --> 00:26:46,570
which uses the PHP seven extension for

00:26:44,500 --> 00:26:50,530
the abstract syntax tree fan is

00:26:46,570 --> 00:26:52,150
developed at Etsy and they use it to do

00:26:50,530 --> 00:26:53,590
setec analysis on their codebase they

00:26:52,150 --> 00:26:58,660
open sourced it a couple of people are

00:26:53,590 --> 00:27:03,220
using it that has some some interesting

00:26:58,660 --> 00:27:04,720
features called fan in it to set up the

00:27:03,220 --> 00:27:06,520
configuration for your project and you

00:27:04,720 --> 00:27:13,030
can just run fan and it tells you where

00:27:06,520 --> 00:27:15,220
where something is wrong and for a while

00:27:13,030 --> 00:27:17,260
I was really happy with fan and was

00:27:15,220 --> 00:27:18,490
using it for statically analyzing my PHP

00:27:17,260 --> 00:27:22,000
seven code and looking for problems

00:27:18,490 --> 00:27:23,590
until I came across some and in my

00:27:22,000 --> 00:27:28,030
opinion some is currently the best

00:27:23,590 --> 00:27:32,880
static analysis tool for PHP because it

00:27:28,030 --> 00:27:36,580
not just analyzes your code to find

00:27:32,880 --> 00:27:38,710
problems like fan can find and PHP Stan

00:27:36,580 --> 00:27:41,350
can find and things like problems like

00:27:38,710 --> 00:27:44,410
PHP mess detector on PHP depend could

00:27:41,350 --> 00:27:47,890
find back in the PHP 5 days but because

00:27:44,410 --> 00:27:49,720
it augments the PHP language through new

00:27:47,890 --> 00:27:54,490
annotations that you can put in your PHP

00:27:49,720 --> 00:27:56,980
code to get the benefit of additional

00:27:54,490 --> 00:28:01,450
typing features that we do not have yet

00:27:56,980 --> 00:28:03,400
in PHP itself yet so you can do things

00:28:01,450 --> 00:28:05,440
like Union types and intersection types

00:28:03,400 --> 00:28:09,510
and templates and generics and and

00:28:05,440 --> 00:28:09,510
things like that and can express

00:28:10,230 --> 00:28:15,250
constraints on your variables in

00:28:13,090 --> 00:28:17,650
comments that song interprets and

00:28:15,250 --> 00:28:20,500
phpstorm is starting to pick up on that

00:28:17,650 --> 00:28:22,630
syntax and interpret it at runtime while

00:28:20,500 --> 00:28:25,150
you're developing in your code and

00:28:22,630 --> 00:28:30,040
there's a pull request pending for PHP

00:28:25,150 --> 00:28:33,370
unit by by Marco that adds template

00:28:30,040 --> 00:28:36,370
annotations from sound to PHP units code

00:28:33,370 --> 00:28:39,370
base and when you have that version of

00:28:36,370 --> 00:28:44,740
PHP unit if you have in your tests

00:28:39,370 --> 00:28:50,110
things like dollar foo equals this

00:28:44,740 --> 00:28:52,270
creates mark foo the type inference

00:28:50,110 --> 00:28:54,340
makes it possible that it without you

00:28:52,270 --> 00:28:56,590
adding additional information yet

00:28:54,340 --> 00:28:59,380
- your test code at phpstorm and some

00:28:56,590 --> 00:29:02,740
know that that variable contains

00:28:59,380 --> 00:29:05,590
something that fulfills the API of PHP

00:29:02,740 --> 00:29:09,130
and smoke object API so you have methods

00:29:05,590 --> 00:29:14,170
like expects and so on on it but also it

00:29:09,130 --> 00:29:15,790
knows that it is of the same type as the

00:29:14,170 --> 00:29:17,530
original type that you're studying or

00:29:15,790 --> 00:29:21,280
mocking but that's a union type and

00:29:17,530 --> 00:29:23,830
that's that will just work and as soon

00:29:21,280 --> 00:29:26,530
as some bugs in Sam has been fixed which

00:29:23,830 --> 00:29:28,660
I think we were fixed last night and as

00:29:26,530 --> 00:29:31,210
soon as mark yet has a lot of movement

00:29:28,660 --> 00:29:33,580
currently going on lots of people are

00:29:31,210 --> 00:29:35,590
discovering some and start using it it's

00:29:33,580 --> 00:29:38,020
most importantly Marco who has some of

00:29:35,590 --> 00:29:41,320
the weirdest code in his project in in

00:29:38,020 --> 00:29:45,370
the PHP world and if it works for him it

00:29:41,320 --> 00:29:47,920
will very certainly work for you or for

00:29:45,370 --> 00:29:49,150
everybody else so and he's working on

00:29:47,920 --> 00:29:51,550
the pull request and as soon as that's

00:29:49,150 --> 00:29:53,380
merged and a lot of things will be more

00:29:51,550 --> 00:29:57,820
type safe and writing tests which is

00:29:53,380 --> 00:29:59,470
awesome it was a compliment somebody

00:29:57,820 --> 00:30:01,000
Shambala somebody has said he doesn't

00:29:59,470 --> 00:30:03,160
know if that was a compliment but it was

00:30:01,000 --> 00:30:05,200
a compliment Marco is doing amazing work

00:30:03,160 --> 00:30:07,420
these days he has been doing amazing

00:30:05,200 --> 00:30:08,980
work on his projects and in the

00:30:07,420 --> 00:30:10,660
ecosystem for a long time but he's doing

00:30:08,980 --> 00:30:13,660
a lot of stuff recently on better

00:30:10,660 --> 00:30:16,720
reflection and I'm Sam and Matt Brown

00:30:13,660 --> 00:30:19,450
over at Vimeo where son comes from does

00:30:16,720 --> 00:30:22,480
amazing work with some so it's kind of

00:30:19,450 --> 00:30:25,210
nice so life is kept complicated PHP as

00:30:22,480 --> 00:30:28,710
you all probably know as PHP developers

00:30:25,210 --> 00:30:31,180
can be complicated at some point and

00:30:28,710 --> 00:30:34,420
some is a tool that helps deal with that

00:30:31,180 --> 00:30:36,670
and this is some of the things that you

00:30:34,420 --> 00:30:38,200
can get with that what I do not have in

00:30:36,670 --> 00:30:39,640
these slides because these slides are

00:30:38,200 --> 00:30:42,190
from a presentation that I gave a couple

00:30:39,640 --> 00:30:44,470
of months ago back then some didn't have

00:30:42,190 --> 00:30:47,320
this feature yet now it has it it's

00:30:44,470 --> 00:30:51,300
called type coverage think of it like

00:30:47,320 --> 00:30:53,560
code coverage but for the type inference

00:30:51,300 --> 00:30:56,040
if you have a hundred percent type

00:30:53,560 --> 00:31:01,030
coverage then for each and every

00:30:56,040 --> 00:31:05,470
variable parameter and return value song

00:31:01,030 --> 00:31:06,970
was able to infer the type and if that

00:31:05,470 --> 00:31:09,729
is the case it can

00:31:06,970 --> 00:31:11,320
do a lot more reasoning about your code

00:31:09,729 --> 00:31:13,659
and understand your code and tell you

00:31:11,320 --> 00:31:18,580
where you may or may not have problems

00:31:13,659 --> 00:31:21,549
which is kind of cold and there's no no

00:31:18,580 --> 00:31:23,649
valid reason to not strive for 100% type

00:31:21,549 --> 00:31:26,799
coverage in new code there's some

00:31:23,649 --> 00:31:32,309
exceptions those exceptions are when

00:31:26,799 --> 00:31:36,460
your code calls some weird / bizarre

00:31:32,309 --> 00:31:38,649
functions provided by PHP PHP still has

00:31:36,460 --> 00:31:41,409
some functions in it that have AZ return

00:31:38,649 --> 00:31:44,710
value either a bull or a null or a

00:31:41,409 --> 00:31:47,049
string and then the type inference of

00:31:44,710 --> 00:31:48,460
some can only say okay I know at that

00:31:47,049 --> 00:31:51,159
point in time and that function is

00:31:48,460 --> 00:31:54,159
called the return value is either a bull

00:31:51,159 --> 00:31:55,210
or a null or a string but it doesn't

00:31:54,159 --> 00:31:57,789
know what it actually is

00:31:55,210 --> 00:32:00,309
so you need to help it and it will

00:31:57,789 --> 00:32:02,710
suggest that you add an assert statement

00:32:00,309 --> 00:32:05,080
in there that your code assumes going

00:32:02,710 --> 00:32:08,289
forward after this function call this is

00:32:05,080 --> 00:32:10,299
a string and if it's not a string at

00:32:08,289 --> 00:32:11,700
runtime you get an error which is good

00:32:10,299 --> 00:32:14,320
that is something that you can handle

00:32:11,700 --> 00:32:16,599
probably you've been hiding all these

00:32:14,320 --> 00:32:19,119
years a bug situation that if you just

00:32:16,599 --> 00:32:21,220
continue and it's a false or a no and

00:32:19,119 --> 00:32:25,629
you just assume that is a string and

00:32:21,220 --> 00:32:27,909
some just point it at this you need to

00:32:25,629 --> 00:32:29,349
think about this and once you've thought

00:32:27,909 --> 00:32:31,960
about it one moment one once you thought

00:32:29,349 --> 00:32:36,159
about it you make explicit through

00:32:31,960 --> 00:32:39,369
either additional code like if not is

00:32:36,159 --> 00:32:41,919
string throw new exception or have an

00:32:39,369 --> 00:32:44,320
assert statement in the code you make it

00:32:41,919 --> 00:32:46,210
explicit yes I have thought about this I

00:32:44,320 --> 00:32:48,820
am aware that this function returns one

00:32:46,210 --> 00:32:50,529
of these three types and I assume for

00:32:48,820 --> 00:32:52,359
the following lines that it is of this

00:32:50,529 --> 00:32:55,859
type and if it's not that type then I

00:32:52,359 --> 00:33:04,659
bail out and then sound knows how to

00:32:55,859 --> 00:33:07,239
infer that going forward there was a so

00:33:04,659 --> 00:33:09,909
the question was does some use the

00:33:07,239 --> 00:33:15,460
phpdoc annotations syntax or does it

00:33:09,909 --> 00:33:17,049
have its own it builds on the phpdoc

00:33:15,460 --> 00:33:19,960
annotation that you already know and it

00:33:17,049 --> 00:33:20,950
adds its own syntax on top of that for

00:33:19,960 --> 00:33:23,350
things like interest

00:33:20,950 --> 00:33:29,519
action type Union types templates and so

00:33:23,350 --> 00:33:29,519
on yes yes

00:33:29,549 --> 00:33:35,289
there's PHP Stan which is a weird hybrid

00:33:32,320 --> 00:33:37,600
between dynamic inspections and Static

00:33:35,289 --> 00:33:39,279
the dynamic analysis and static analysis

00:33:37,600 --> 00:33:42,190
because it's too far to some degree

00:33:39,279 --> 00:33:44,200
relies on PHP reflection API which means

00:33:42,190 --> 00:33:46,720
the code must be loaded and depending on

00:33:44,200 --> 00:33:51,720
the code whether or not loading it has

00:33:46,720 --> 00:33:55,960
side effects or not can be weird but

00:33:51,720 --> 00:34:04,659
skip over that I think because I don't

00:33:55,960 --> 00:34:09,609
know how much time I have okay so that's

00:34:04,659 --> 00:34:12,490
a tool that I've wrote around a snippet

00:34:09,609 --> 00:34:15,010
of code that I think it was you want it

00:34:12,490 --> 00:34:17,470
an admin sent me like fifteen years ago

00:34:15,010 --> 00:34:19,089
he said hey Sebastian look at this I

00:34:17,470 --> 00:34:23,200
hacked together an algorithm that I

00:34:19,089 --> 00:34:24,879
found for code to placate detection it's

00:34:23,200 --> 00:34:26,260
good enough for experimenting with it

00:34:24,879 --> 00:34:28,929
but somebody should build a tool out of

00:34:26,260 --> 00:34:31,359
that so I build a tool out of that and

00:34:28,929 --> 00:34:36,550
that became PHP CPD HP copy/paste

00:34:31,359 --> 00:34:41,079
detector and I have seen some amazing

00:34:36,550 --> 00:34:44,829
things amazing in the negative thing in

00:34:41,079 --> 00:34:46,750
the negative meaning over the years high

00:34:44,829 --> 00:34:48,940
score I've seen was like somewhere

00:34:46,750 --> 00:34:50,800
between 40 and 50 percent of duplicated

00:34:48,940 --> 00:34:55,149
code in the product that had several

00:34:50,800 --> 00:34:57,730
million lines of code if you have that

00:34:55,149 --> 00:34:59,950
in my experience that is a symptom that

00:34:57,730 --> 00:35:06,250
something in that company is going

00:34:59,950 --> 00:35:09,210
horribly wrong in that case it was like

00:35:06,250 --> 00:35:11,980
I was on site with a customer for a week

00:35:09,210 --> 00:35:14,829
working with the entire development team

00:35:11,980 --> 00:35:16,660
and then at some point I learned that I

00:35:14,829 --> 00:35:19,000
was not working with the entire team one

00:35:16,660 --> 00:35:22,150
developer was missing the cost of one

00:35:19,000 --> 00:35:23,710
developer that does not need to learn

00:35:22,150 --> 00:35:25,960
new things because he already knows

00:35:23,710 --> 00:35:28,089
everything that's the developer who does

00:35:25,960 --> 00:35:29,349
not use version control because version

00:35:28,089 --> 00:35:31,630
control is something that you do not

00:35:29,349 --> 00:35:34,030
need that the developer who didn't write

00:35:31,630 --> 00:35:34,760
tests because he's flawless and doesn't

00:35:34,030 --> 00:35:39,230
make mistakes

00:35:34,760 --> 00:35:42,950
doesn't need tests and the other members

00:35:39,230 --> 00:35:45,320
of the team would have really liked to

00:35:42,950 --> 00:35:47,090
reuse his code but they did not

00:35:45,320 --> 00:35:49,610
understand his code or they could have

00:35:47,090 --> 00:35:51,740
reused it if it was slightly changed for

00:35:49,610 --> 00:35:54,710
in for instance maybe a parameter there

00:35:51,740 --> 00:35:56,570
or like take that big blob of code in

00:35:54,710 --> 00:35:58,670
that method and put it into a separate

00:35:56,570 --> 00:36:01,760
method so that we can reuse it but she

00:35:58,670 --> 00:36:04,460
always said no so they reused his code

00:36:01,760 --> 00:36:06,530
by copy and paste and ten years later

00:36:04,460 --> 00:36:09,080
you have five million lines of code and

00:36:06,530 --> 00:36:12,890
50% coat application that is not a

00:36:09,080 --> 00:36:15,200
situation where you want to be in to

00:36:12,890 --> 00:36:19,520
make that visible that's the only thing

00:36:15,200 --> 00:36:21,500
that peach PCPD does you just pointed at

00:36:19,520 --> 00:36:25,190
a directory or one or more directories

00:36:21,500 --> 00:36:29,690
and it analyzes the code and if you say

00:36:25,190 --> 00:36:33,620
no by default it now nowadays says shows

00:36:29,690 --> 00:36:36,080
you the duplicated code yeah yeah it

00:36:33,620 --> 00:36:37,670
also has a fuzzy mode where it replaces

00:36:36,080 --> 00:36:39,350
all variable names with the same

00:36:37,670 --> 00:36:40,790
variable names with it so you can see as

00:36:39,350 --> 00:36:42,440
a duplicate like if you have the same

00:36:40,790 --> 00:36:44,780
code over here but the variable name is

00:36:42,440 --> 00:36:46,130
dollar I if the same code over there and

00:36:44,780 --> 00:36:48,440
the very name is so large a it still

00:36:46,130 --> 00:36:55,510
finds that it just takes a little bit

00:36:48,440 --> 00:37:00,760
longer and it finds more than yeah okay

00:36:55,510 --> 00:37:00,760
this is a cool tool that was written by

00:37:00,880 --> 00:37:07,340
McKee Rosenman as a master thesis at the

00:37:05,240 --> 00:37:10,790
university of Rosenheim a couple of

00:37:07,340 --> 00:37:13,880
years ago and that analyzes dependencies

00:37:10,790 --> 00:37:18,410
in your project between various parts of

00:37:13,880 --> 00:37:24,680
your project it basically makes

00:37:18,410 --> 00:37:29,330
dependency head visible right so it has

00:37:24,680 --> 00:37:32,690
all the metrics that PHP depend had like

00:37:29,330 --> 00:37:35,510
things like efferent coupling different

00:37:32,690 --> 00:37:37,130
coupling like which is the object in my

00:37:35,510 --> 00:37:39,290
or which is the class in my project that

00:37:37,130 --> 00:37:42,080
most other classes depend upon or the

00:37:39,290 --> 00:37:44,750
other way around to find classes that

00:37:42,080 --> 00:37:47,330
you want to focus on in testing like if

00:37:44,750 --> 00:37:48,140
the thing that is used the most is well

00:37:47,330 --> 00:37:49,640
tested by

00:37:48,140 --> 00:37:52,790
ripple effect a lot of other problems

00:37:49,640 --> 00:37:55,100
already are prevented so that's a good

00:37:52,790 --> 00:37:56,390
starting point to figure out where you

00:37:55,100 --> 00:37:59,660
want to start testing in an existing

00:37:56,390 --> 00:38:02,480
system can also show you who depends on

00:37:59,660 --> 00:38:05,390
whom if you're interested in that this

00:38:02,480 --> 00:38:07,880
is a different visualization of that

00:38:05,390 --> 00:38:09,440
that I cannot read like I know how to

00:38:07,880 --> 00:38:11,570
read it but I cannot read it for any

00:38:09,440 --> 00:38:15,050
decent real-world project because it

00:38:11,570 --> 00:38:20,030
doesn't fit on the screen you can also

00:38:15,050 --> 00:38:23,060
visualize it as a graph so this is the

00:38:20,030 --> 00:38:24,760
source code for for Neos 404 small but

00:38:23,060 --> 00:38:28,790
in the room robot is not in the room

00:38:24,760 --> 00:38:30,590
okay if I wanted I could but it's

00:38:28,790 --> 00:38:32,600
recorded even if I wanted I wouldn't do

00:38:30,590 --> 00:38:34,010
it I wouldn't say anything bad about

00:38:32,600 --> 00:38:37,730
Neos but there's nothing bad to say

00:38:34,010 --> 00:38:39,110
about Neos other than that this is what

00:38:37,730 --> 00:38:40,730
it looks like with regard to its

00:38:39,110 --> 00:38:47,410
dependencies on the higher level but you

00:38:40,730 --> 00:38:49,730
can filter that I still cannot read it

00:38:47,410 --> 00:38:51,800
you can filter it a little bit more and

00:38:49,730 --> 00:38:53,390
then you see things like okay Neos uses

00:38:51,800 --> 00:38:54,860
something that is called behead it's

00:38:53,390 --> 00:38:56,570
using something that's called doctrine

00:38:54,860 --> 00:39:00,010
it's using something that is called

00:38:56,570 --> 00:39:02,810
react and and Preta sand and so on

00:39:00,010 --> 00:39:06,950
so you can zoom out and zoom in and see

00:39:02,810 --> 00:39:09,080
what is being used here you can also do

00:39:06,950 --> 00:39:12,140
that over time and this is sometimes

00:39:09,080 --> 00:39:14,480
really insightful so you point it as a

00:39:12,140 --> 00:39:18,890
git repository and for each revision it

00:39:14,480 --> 00:39:21,710
draws a graph like that don't do that on

00:39:18,890 --> 00:39:23,980
the entire repo focus on one directory

00:39:21,710 --> 00:39:25,820
or module that you're interested in

00:39:23,980 --> 00:39:27,380
otherwise it doesn't fit on the screen

00:39:25,820 --> 00:39:29,990
and takes a really long time to render

00:39:27,380 --> 00:39:31,580
but that way you can visualize for

00:39:29,990 --> 00:39:35,230
instance what the refactoring was about

00:39:31,580 --> 00:39:40,490
in case you need to show something yeah

00:39:35,230 --> 00:39:42,260
last sprint we didn't do we did one

00:39:40,490 --> 00:39:44,270
feature less than we used to but we

00:39:42,260 --> 00:39:45,770
cleaned up which it is refactoring this

00:39:44,270 --> 00:39:47,840
is what this looks like the code looked

00:39:45,770 --> 00:39:50,660
like this before now it looks like that

00:39:47,840 --> 00:39:52,940
this is better and here you can see the

00:39:50,660 --> 00:39:55,940
individual steps in case we need to

00:39:52,940 --> 00:39:58,730
realize something like that you can also

00:39:55,940 --> 00:40:01,520
use defense to express architecture

00:39:58,730 --> 00:40:05,210
constraints saying things like okay

00:40:01,520 --> 00:40:08,240
this code is presentation code calling

00:40:05,210 --> 00:40:10,820
into my repositories or calling tool

00:40:08,240 --> 00:40:14,050
directly to doctrine or certain PHP

00:40:10,820 --> 00:40:17,060
functions from that code not allowed

00:40:14,050 --> 00:40:20,270
yell at me if somebody in a template

00:40:17,060 --> 00:40:23,300
called doctrine or my repositories for

00:40:20,270 --> 00:40:25,940
for for mine for my entities or

00:40:23,300 --> 00:40:29,530
something like that that's kind of neat

00:40:25,940 --> 00:40:34,700
testing I'm running out of time sorry

00:40:29,530 --> 00:40:37,310
they are testing tools that's it I don't

00:40:34,700 --> 00:40:38,720
have enough time anyway to talk to give

00:40:37,310 --> 00:40:40,370
an introduction to testing if you have

00:40:38,720 --> 00:40:43,640
never seen how the PHP unit is used

00:40:40,370 --> 00:40:45,710
there's plenty of presentations on that

00:40:43,640 --> 00:40:50,450
including videos on talks of the PHP dot

00:40:45,710 --> 00:40:53,590
CC via via it's testing though I would

00:40:50,450 --> 00:40:57,980
like to talk briefly about infection

00:40:53,590 --> 00:41:00,020
code coverage is nice but it can only

00:40:57,980 --> 00:41:01,250
show you where tests are missing just

00:41:00,020 --> 00:41:02,750
because you have another person code

00:41:01,250 --> 00:41:07,460
coverage doesn't mean that everything is

00:41:02,750 --> 00:41:10,130
tested if you have 100% code coverage

00:41:07,460 --> 00:41:14,210
that just means now come the interesting

00:41:10,130 --> 00:41:16,130
things right so how do you find the

00:41:14,210 --> 00:41:18,410
interesting things you use the mutation

00:41:16,130 --> 00:41:21,020
testing tool like infection mutation

00:41:18,410 --> 00:41:23,420
testing tool means you run your test

00:41:21,020 --> 00:41:27,680
once get the code coverage report so you

00:41:23,420 --> 00:41:29,480
so the tool knows for each test that is

00:41:27,680 --> 00:41:32,290
being run which lines of code are being

00:41:29,480 --> 00:41:35,320
executed by that particular test and

00:41:32,290 --> 00:41:38,270
then you look at a tested code and

00:41:35,320 --> 00:41:41,720
figure out how to break it in an

00:41:38,270 --> 00:41:43,640
automated way you mutate it for every

00:41:41,720 --> 00:41:47,090
location in the code that can be mutated

00:41:43,640 --> 00:41:49,010
a mutation is applied for each mutation

00:41:47,090 --> 00:41:51,830
that is applied the tests are run again

00:41:49,010 --> 00:41:55,220
and the worst thing that can happen is

00:41:51,830 --> 00:41:57,980
that the tests still works because if

00:41:55,220 --> 00:42:03,110
you replace a true with a false or a

00:41:57,980 --> 00:42:04,400
greater than zero with a less than one

00:42:03,110 --> 00:42:07,880
or something like that

00:42:04,400 --> 00:42:10,010
and the test still works your tests are

00:42:07,880 --> 00:42:12,390
not good enough your tests are not

00:42:10,010 --> 00:42:15,900
testing the actual thing

00:42:12,390 --> 00:42:19,499
what you want is with each mutation that

00:42:15,900 --> 00:42:22,019
a test as at least one test fails and in

00:42:19,499 --> 00:42:26,009
the lingo of mutation testing means that

00:42:22,019 --> 00:42:28,559
means the mutant is killed you do not

00:42:26,009 --> 00:42:33,210
want escaped mutants every escaped

00:42:28,559 --> 00:42:36,960
mutant is a problem excluding false

00:42:33,210 --> 00:42:39,450
positives right so that is another tool

00:42:36,960 --> 00:42:40,470
that you install as afar it wraps around

00:42:39,450 --> 00:42:44,430
phpunit

00:42:40,470 --> 00:42:47,460
you run it and then it tells you yeah I

00:42:44,430 --> 00:42:50,369
generated 71 mutations 48 mutants were

00:42:47,460 --> 00:42:51,299
killed zero mutants were not covered by

00:42:50,369 --> 00:42:54,299
tests that's good

00:42:51,299 --> 00:42:57,329
9 covered mutants were not detected

00:42:54,299 --> 00:43:00,749
that's not good what is good though is

00:42:57,329 --> 00:43:05,299
that 14 errors were encountered so the

00:43:00,749 --> 00:43:07,589
mutation was so bad that PHP crashed or

00:43:05,299 --> 00:43:09,269
ran into a timeout which is which can

00:43:07,589 --> 00:43:12,089
happen in a loop if your motive if you

00:43:09,269 --> 00:43:13,529
mutate the break condition of a loop or

00:43:12,089 --> 00:43:17,759
the termination condition of a loop it

00:43:13,529 --> 00:43:21,180
can Rupe infinitely and it aborts that

00:43:17,759 --> 00:43:24,029
test after a while that's kind of nice

00:43:21,180 --> 00:43:26,400
and if a mutant escapes it shows you

00:43:24,029 --> 00:43:30,450
what it mutated and then it's up to you

00:43:26,400 --> 00:43:36,410
to decide whether or not that's that's

00:43:30,450 --> 00:43:40,230
ok or not usually it's not ok finally

00:43:36,410 --> 00:43:42,329
some things for runtime aspects so far

00:43:40,230 --> 00:43:45,210
we only looked at development time

00:43:42,329 --> 00:43:47,549
however first thing is not not it's also

00:43:45,210 --> 00:43:50,970
development time thing so while ago I

00:43:47,549 --> 00:43:55,499
had had this problem that I was working

00:43:50,970 --> 00:43:56,759
with a team we had a really nice piece

00:43:55,499 --> 00:43:58,259
of software that was developed using

00:43:56,759 --> 00:43:59,730
test-driven development and domain

00:43:58,259 --> 00:44:02,640
driven design and we had really nice

00:43:59,730 --> 00:44:05,160
value objects and object graphs that had

00:44:02,640 --> 00:44:07,230
contained meaningful objects and then

00:44:05,160 --> 00:44:11,640
some new developer came into the project

00:44:07,230 --> 00:44:13,950
and we wanted to teach him what the

00:44:11,640 --> 00:44:17,099
object structure looks like for a

00:44:13,950 --> 00:44:18,749
certain thing that he was for a certain

00:44:17,099 --> 00:44:22,380
business problem that he was supposed to

00:44:18,749 --> 00:44:26,160
work on and at that point I realized

00:44:22,380 --> 00:44:29,220
that no tool exists that nicely visual

00:44:26,160 --> 00:44:35,400
is a PHP object graph for me so

00:44:29,220 --> 00:44:36,750
obviously I built one so imagine your

00:44:35,400 --> 00:44:38,310
code like that so when you have a

00:44:36,750 --> 00:44:40,380
shopping cart you have some items in the

00:44:38,310 --> 00:44:43,350
shopping cart those items have a price

00:44:40,380 --> 00:44:47,190
and the price is comprised of a currency

00:44:43,350 --> 00:44:51,210
and so on and then now you want to

00:44:47,190 --> 00:44:55,620
visualize that so to install the object

00:44:51,210 --> 00:44:57,630
graph library and import the function

00:44:55,620 --> 00:45:01,410
and then you can just say object graph

00:44:57,630 --> 00:45:03,750
dump give a file name depending on the

00:45:01,410 --> 00:45:07,430
suffix you use here it generates an SVG

00:45:03,750 --> 00:45:10,740
or a PNG or a PDF whatever you want and

00:45:07,430 --> 00:45:12,900
then a pass in the variable that you

00:45:10,740 --> 00:45:23,160
want to visualize and well that's code

00:45:12,900 --> 00:45:25,290
we get this and writing that gave me a

00:45:23,160 --> 00:45:29,370
lot of headaches because I learned a lot

00:45:25,290 --> 00:45:33,540
of about PHP s internals that I never

00:45:29,370 --> 00:45:36,690
wanted to learn because just because PHP

00:45:33,540 --> 00:45:39,960
is compiler does not allow you to have

00:45:36,690 --> 00:45:41,780
an attribute in an object where the name

00:45:39,960 --> 00:45:44,520
of that attribute begins with a number

00:45:41,780 --> 00:45:46,940
does not mean that you cannot have an

00:45:44,520 --> 00:45:49,560
object with an attribute like that

00:45:46,940 --> 00:45:53,460
because in the constructor you can say

00:45:49,560 --> 00:45:56,010
something like dollar name equals one

00:45:53,460 --> 00:45:59,520
two three four dollar this dollar name

00:45:56,010 --> 00:46:02,910
equals foo bar path and suddenly you

00:45:59,520 --> 00:46:05,820
have an attribute defined at runtime

00:46:02,910 --> 00:46:11,430
that has a name that is not valid in the

00:46:05,820 --> 00:46:13,560
PHP syntax and of course I need to take

00:46:11,430 --> 00:46:16,800
care of that if you're interested in

00:46:13,560 --> 00:46:18,860
performance aspects the best free tool

00:46:16,800 --> 00:46:21,900
that I've found so far is tight ways

00:46:18,860 --> 00:46:23,700
it's basically two things on the one

00:46:21,900 --> 00:46:27,480
hand it's an open source extension that

00:46:23,700 --> 00:46:30,950
you can load into your PHP for profiling

00:46:27,480 --> 00:46:34,800
requests of profiling PHP code execution

00:46:30,950 --> 00:46:36,330
it's also a commercial offering as with

00:46:34,800 --> 00:46:38,400
a software-as-a-service where you can

00:46:36,330 --> 00:46:39,720
upload basically or stream from

00:46:38,400 --> 00:46:42,630
production or from your test

00:46:39,720 --> 00:46:44,400
environment these traces to that server

00:46:42,630 --> 00:46:46,109
to have them analyze and think if you're

00:46:44,400 --> 00:46:49,140
nice visualization show you bottlenecks

00:46:46,109 --> 00:46:51,630
in your code they know about most of

00:46:49,140 --> 00:46:54,240
about the most commonly used framework

00:46:51,630 --> 00:46:55,619
so they can filter out noise in your

00:46:54,240 --> 00:46:57,810
code that comes on your frame of our

00:46:55,619 --> 00:46:59,340
shows you a we have this bottleneck when

00:46:57,810 --> 00:47:00,990
it comes for these actions or for these

00:46:59,340 --> 00:47:07,099
types of requests or whatever it knows

00:47:00,990 --> 00:47:09,119
what's going on that's kind of nice

00:47:07,099 --> 00:47:13,050
that's the extension if you're just

00:47:09,119 --> 00:47:15,690
interested in getting an extension and

00:47:13,050 --> 00:47:18,060
getting the raw data about profile

00:47:15,690 --> 00:47:22,170
traces and then build your own tool on

00:47:18,060 --> 00:47:25,920
top of that some people do that I would

00:47:22,170 --> 00:47:28,400
rather give some money to too tight ways

00:47:25,920 --> 00:47:31,109
and have them analyze that for you

00:47:28,400 --> 00:47:32,940
there's a there's an open source command

00:47:31,109 --> 00:47:34,770
line tool that can analyze these traces

00:47:32,940 --> 00:47:36,090
and give you some insight when you're

00:47:34,770 --> 00:47:41,880
debugging your performance issue that's

00:47:36,090 --> 00:47:44,339
mostly good enough and and at some point

00:47:41,880 --> 00:47:47,310
I was bored on the train and I'm gonna

00:47:44,339 --> 00:47:50,880
when I'm bored on a train I usually come

00:47:47,310 --> 00:47:54,060
code weird ideas and I had this idea for

00:47:50,880 --> 00:47:55,650
for a plugin for PHP unit it starts the

00:47:54,060 --> 00:47:57,420
tight race profiling when the test

00:47:55,650 --> 00:48:00,000
starts and stops it when the tests ends

00:47:57,420 --> 00:48:03,839
and saves all of that to somewhere and

00:48:00,000 --> 00:48:05,640
then in theory if you compare those

00:48:03,839 --> 00:48:07,349
traces allows you to find performance

00:48:05,640 --> 00:48:11,849
regressions while running your unit

00:48:07,349 --> 00:48:13,140
tests final tool that I'm going to

00:48:11,849 --> 00:48:14,970
mention is sixty bucks a Swiss Army

00:48:13,140 --> 00:48:17,339
knife of PHP development if you've never

00:48:14,970 --> 00:48:19,080
heard of extreme parkour never used XD

00:48:17,339 --> 00:48:21,570
but you are not really probably if

00:48:19,080 --> 00:48:25,380
you're a developer I don't know it's

00:48:21,570 --> 00:48:27,630
been around for a really long time it

00:48:25,380 --> 00:48:29,520
does everything from giving you nice

00:48:27,630 --> 00:48:32,940
exception traces when something goes

00:48:29,520 --> 00:48:35,280
wrong better implementation of war dump

00:48:32,940 --> 00:48:37,349
when you're doing something in your

00:48:35,280 --> 00:48:43,260
browser and get some nice action a lot

00:48:37,349 --> 00:48:47,839
of that step debugging profiling tracing

00:48:43,260 --> 00:48:50,010
code coverage basically everything

00:48:47,839 --> 00:48:53,280
probably too much I've been telling that

00:48:50,010 --> 00:48:56,100
to Derek for quite quite a long time

00:48:53,280 --> 00:48:58,380
and I think he's he's going to see he's

00:48:56,100 --> 00:49:00,840
seeing that and it has some ideas for

00:48:58,380 --> 00:49:05,280
for exceed Mach 3 to break it down into

00:49:00,840 --> 00:49:07,380
smaller things maybe yeah but that's

00:49:05,280 --> 00:49:09,660
that once I've published the slides at

00:49:07,380 --> 00:49:14,100
the end you'll get a list of links to

00:49:09,660 --> 00:49:18,780
all these tools that I mentioned and is

00:49:14,100 --> 00:49:20,280
that I thank you for listening to me

00:49:18,780 --> 00:49:22,710
instead of the person who wasn't here

00:49:20,280 --> 00:49:26,750
sorry I didn't talk about PHP user

00:49:22,710 --> 00:49:30,570
groups around the globe thank you

00:49:26,750 --> 00:49:44,310
[Applause]

00:49:30,570 --> 00:49:47,690
[Music]

00:49:44,310 --> 00:49:47,690

YouTube URL: https://www.youtube.com/watch?v=tFZaan9HjVo


