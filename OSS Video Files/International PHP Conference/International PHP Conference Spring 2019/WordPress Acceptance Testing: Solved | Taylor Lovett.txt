Title: WordPress Acceptance Testing: Solved | Taylor Lovett
Publication date: 2019-10-10
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Taylor Lovett (10up) | https://phpconference.com/speaker/taylor-lovett/

Automated testing is an important part of every web application. When building WordPress plugins, themes, and websites, there are a plethora of different frameworks for unit testing, integration testing, and acceptance testing. While many of these frameworks are useful, most of them are hard to use, ineffective at stopping regressions, not scalable to a team of developers, or not easily integrated with CI pipelines. WP Acceptance, is a toolkit that empowers developers and CI pipelines to test codebases using version controlled acceptance tests and sharable environments. This talk will explain the motivation behind WP Acceptance, how to use it, and why it’s the most effective way to test your WordPress applications.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,300 --> 00:00:07,859
[Music]

00:00:05,270 --> 00:00:11,130
thank you everybody for coming this is

00:00:07,859 --> 00:00:14,580
the wordpress acceptance testing salt

00:00:11,130 --> 00:00:15,480
talk before I get started my name is

00:00:14,580 --> 00:00:17,190
Taylor Lovett

00:00:15,480 --> 00:00:20,070
I am the VP of engineering for

00:00:17,190 --> 00:00:22,350
commenting called 10 up we're one of the

00:00:20,070 --> 00:00:25,039
biggest WordPress focus agencies in the

00:00:22,350 --> 00:00:30,150
world we build WordPress websites for

00:00:25,039 --> 00:00:32,610
major brands like ESPN and Google and

00:00:30,150 --> 00:00:34,410
Facebook and we get to do a lot of

00:00:32,610 --> 00:00:36,630
really cool things with WordPress solve

00:00:34,410 --> 00:00:40,590
a lot of really large problems

00:00:36,630 --> 00:00:42,000
I am pretty involved in the WordPress

00:00:40,590 --> 00:00:44,489
open-source community I'm a core

00:00:42,000 --> 00:00:48,450
contributor I've built a couple popular

00:00:44,489 --> 00:00:51,690
plugins so that's a little bit of

00:00:48,450 --> 00:00:57,379
background information about me so let's

00:00:51,690 --> 00:00:57,379
jump into WordPress acceptance testing

00:00:58,760 --> 00:01:04,409
so what is the purpose of automated

00:01:02,100 --> 00:01:07,770
testing to make sure I don't block the

00:01:04,409 --> 00:01:09,720
slides so testing in general it helps us

00:01:07,770 --> 00:01:12,869
reduce bugs helps us to reduce

00:01:09,720 --> 00:01:14,760
regressions generally the purpose is we

00:01:12,869 --> 00:01:18,650
want our application to meet a set of

00:01:14,760 --> 00:01:23,009
requirements manual testing is very

00:01:18,650 --> 00:01:26,220
important but it is also slow it's

00:01:23,009 --> 00:01:28,799
expensive it's prone to human error not

00:01:26,220 --> 00:01:32,189
to say it's still an important part of

00:01:28,799 --> 00:01:36,030
any application release process but that

00:01:32,189 --> 00:01:38,520
is true automated testing it can be

00:01:36,030 --> 00:01:41,220
integrated with like a CI pipeline a

00:01:38,520 --> 00:01:44,040
delivery pipeline so it can obviously be

00:01:41,220 --> 00:01:48,680
run automated as a part of your

00:01:44,040 --> 00:01:48,680
development and deployment process

00:01:49,000 --> 00:01:54,700
so let's talks talk about the different

00:01:52,240 --> 00:01:57,370
types of automated testing and this is

00:01:54,700 --> 00:01:59,560
just a name a couple I mean there's unit

00:01:57,370 --> 00:02:03,370
testing there's functional testing and a

00:01:59,560 --> 00:02:04,960
Gration testing acceptance / end-to-end

00:02:03,370 --> 00:02:07,000
testing which I think are pretty much

00:02:04,960 --> 00:02:09,520
the same thing there's visual regression

00:02:07,000 --> 00:02:11,050
testing there's so many different types

00:02:09,520 --> 00:02:14,590
of testing when you're getting into it

00:02:11,050 --> 00:02:16,690
it can be confusing as to what what what

00:02:14,590 --> 00:02:18,190
is what and what I actually need to do

00:02:16,690 --> 00:02:20,340
what's what's going to have value for

00:02:18,190 --> 00:02:23,920
the application that I'm building

00:02:20,340 --> 00:02:26,620
WordPress core so the core software it

00:02:23,920 --> 00:02:28,390
bundles integration tests which they

00:02:26,620 --> 00:02:30,970
call unit test for actually integration

00:02:28,390 --> 00:02:33,580
tests and it also bundles end-to-end

00:02:30,970 --> 00:02:36,550
testing for certain features the

00:02:33,580 --> 00:02:39,580
guttenberg projects which is just

00:02:36,550 --> 00:02:45,010
released is bundled with end-to-end

00:02:39,580 --> 00:02:47,350
testing so what what is the existing

00:02:45,010 --> 00:02:50,050
tooling landscape for WordPress look

00:02:47,350 --> 00:02:51,940
like well the WordPress PHP unit test

00:02:50,050 --> 00:02:56,590
suite which is again used for running

00:02:51,940 --> 00:03:00,220
integration tests it is built off of PHP

00:02:56,590 --> 00:03:02,860
unit you can also use the WordPress PHP

00:03:00,220 --> 00:03:05,140
unit test suite in your own plugins and

00:03:02,860 --> 00:03:07,390
themes to create integration test which

00:03:05,140 --> 00:03:10,420
is which is very useful

00:03:07,390 --> 00:03:15,640
there's the WP mock project that's a

00:03:10,420 --> 00:03:19,049
project started by 10 up my company WP

00:03:15,640 --> 00:03:22,600
Mach lets you mock WordPress functions

00:03:19,049 --> 00:03:24,459
classes methods actions hooks all that

00:03:22,600 --> 00:03:26,410
stuff so you can actually do true unit

00:03:24,459 --> 00:03:28,830
testing in WordPress if that is

00:03:26,410 --> 00:03:31,810
something that you're looking to do

00:03:28,830 --> 00:03:34,840
there are a number of acceptance testing

00:03:31,810 --> 00:03:36,549
frameworks code ception I'm going to

00:03:34,840 --> 00:03:39,580
talk about a little bit that's like a

00:03:36,549 --> 00:03:42,610
popular popular PHP acceptance testing

00:03:39,580 --> 00:03:46,989
framework there's a lot of custom ones

00:03:42,610 --> 00:03:48,610
Gutenberg's and then test suite is

00:03:46,989 --> 00:03:50,950
really just a custom thing built off of

00:03:48,610 --> 00:03:52,600
puppeteer and then there's like a

00:03:50,950 --> 00:03:54,580
million different JavaScript testing

00:03:52,600 --> 00:03:56,850
frameworks which I'm not gonna really

00:03:54,580 --> 00:03:56,850
talk about

00:03:58,510 --> 00:04:03,200
so what is acceptance testing so my

00:04:01,580 --> 00:04:05,690
definition of acceptance testing is

00:04:03,200 --> 00:04:07,670
testing that an application behaves as

00:04:05,690 --> 00:04:10,720
expected and I'm going to modify the

00:04:07,670 --> 00:04:14,600
that behaves is expected to the end user

00:04:10,720 --> 00:04:18,380
in the web application world this really

00:04:14,600 --> 00:04:21,530
means a user is interacting with a

00:04:18,380 --> 00:04:24,200
browser interacting with your

00:04:21,530 --> 00:04:26,450
application via browser and it is doing

00:04:24,200 --> 00:04:28,510
what the user expects what it is

00:04:26,450 --> 00:04:31,370
supposed to do

00:04:28,510 --> 00:04:33,470
so where is unit integration testing

00:04:31,370 --> 00:04:36,380
we're testing a specific piece of code

00:04:33,470 --> 00:04:38,270
in the application acceptance testing

00:04:36,380 --> 00:04:48,050
we're actually testing what the user

00:04:38,270 --> 00:04:51,650
sees okay so this presentation is about

00:04:48,050 --> 00:04:53,419
open source free acceptance testing

00:04:51,650 --> 00:04:55,490
framework I'm just going to show you a

00:04:53,419 --> 00:04:58,610
little bit of a video of how that

00:04:55,490 --> 00:05:02,030
acceptance testing framework works let's

00:04:58,610 --> 00:05:04,160
see if I can get this to run okay so the

00:05:02,030 --> 00:05:07,220
acceptance testing WP acceptance it's

00:05:04,160 --> 00:05:11,140
run in the command line I don't know if

00:05:07,220 --> 00:05:11,140
that's super legit legible I think it is

00:05:12,070 --> 00:05:18,310
so we're starting the command the first

00:05:16,160 --> 00:05:20,720
thing WP acceptance does is it spins up

00:05:18,310 --> 00:05:23,320
it's all docker base it spins up like

00:05:20,720 --> 00:05:29,270
some docker containers to run the actual

00:05:23,320 --> 00:05:32,630
acceptance tests so then it creates your

00:05:29,270 --> 00:05:36,620
WordPress environment so it can run

00:05:32,630 --> 00:05:40,000
those tests on your environment this

00:05:36,620 --> 00:05:40,000
will be relatively quick

00:05:40,400 --> 00:05:48,169
I think this this video is can be slow

00:05:45,979 --> 00:05:52,970
but it's better than a live demo if it

00:05:48,169 --> 00:05:55,070
breaks ok so the testing is started for

00:05:52,970 --> 00:05:59,300
each test it actually spins up a browser

00:05:55,070 --> 00:06:00,919
and you can watch as the test interacts

00:05:59,300 --> 00:06:04,850
with your application so the test is

00:06:00,919 --> 00:06:07,490
actually logging into your website that

00:06:04,850 --> 00:06:09,830
first test was just can a user log in

00:06:07,490 --> 00:06:14,510
properly to your website that was

00:06:09,830 --> 00:06:17,419
successful so the second test it's

00:06:14,510 --> 00:06:25,039
logging into the website it's now

00:06:17,419 --> 00:06:27,850
looking at the plugins page this

00:06:25,039 --> 00:06:32,389
particular test suite is is testing a

00:06:27,850 --> 00:06:35,389
tenant plug-in which we add like

00:06:32,389 --> 00:06:38,150
suggested plugins to the plugins tab so

00:06:35,389 --> 00:06:42,039
it's it's making sure that text exists

00:06:38,150 --> 00:06:42,039
in the user is seeing that in the admin

00:06:42,490 --> 00:06:46,120
so oops

00:07:19,250 --> 00:07:27,030
so as the tests go along you can see in

00:07:23,220 --> 00:07:29,040
the console sort of the the test as they

00:07:27,030 --> 00:07:30,810
happen that the first one it's a menu

00:07:29,040 --> 00:07:33,090
test I can see the tent up logo in the

00:07:30,810 --> 00:07:35,010
admin bar the second one is the plugins

00:07:33,090 --> 00:07:37,680
test I can see the tenant suggested

00:07:35,010 --> 00:07:39,780
plugins so each test is actually opening

00:07:37,680 --> 00:07:42,930
up a real live Chrome browser and

00:07:39,780 --> 00:07:45,660
interacting in that browser with your

00:07:42,930 --> 00:07:47,970
web application and showing you as each

00:07:45,660 --> 00:07:54,870
test goes what was successful in all

00:07:47,970 --> 00:07:59,430
wasn't okay so what is the problem that

00:07:54,870 --> 00:08:01,350
WP acceptance is solving acceptance

00:07:59,430 --> 00:08:04,410
challenge acceptance testing is it can

00:08:01,350 --> 00:08:07,380
be very challenging because everyone and

00:08:04,410 --> 00:08:09,780
every system like every CI pipeline

00:08:07,380 --> 00:08:12,120
running the tests must be running the

00:08:09,780 --> 00:08:15,410
same database on the same environment

00:08:12,120 --> 00:08:18,420
with the same code if Kyle if I'm if my

00:08:15,410 --> 00:08:19,950
colleague and I are running have

00:08:18,420 --> 00:08:22,230
different databases that were running

00:08:19,950 --> 00:08:24,990
the acceptance tests against we could

00:08:22,230 --> 00:08:27,210
very much get different results the test

00:08:24,990 --> 00:08:29,040
might work for me and not work for him

00:08:27,210 --> 00:08:30,600
because he has a different database so

00:08:29,040 --> 00:08:34,620
how do you solve that problem or maybe

00:08:30,600 --> 00:08:37,440
my colleague has you know is running

00:08:34,620 --> 00:08:39,510
different version of PHP in a different

00:08:37,440 --> 00:08:40,710
I don't know operating system or

00:08:39,510 --> 00:08:42,300
something like that so now we have

00:08:40,710 --> 00:08:47,160
there's differences between our

00:08:42,300 --> 00:08:50,310
environments how do we solve for that so

00:08:47,160 --> 00:08:52,290
code ception it's a an inch before it's

00:08:50,310 --> 00:08:55,470
a popular PHP framework for writing

00:08:52,290 --> 00:08:58,590
accepting tests works very well for what

00:08:55,470 --> 00:09:02,160
it does the framework is totally

00:08:58,590 --> 00:09:04,860
environment and database agnostic it

00:09:02,160 --> 00:09:09,260
doesn't bundle any functionality around

00:09:04,860 --> 00:09:11,420
database or environments so again like

00:09:09,260 --> 00:09:13,610
I can write these really amazing code

00:09:11,420 --> 00:09:17,090
ception acceptance tests for my

00:09:13,610 --> 00:09:19,700
application but it makes no assumptions

00:09:17,090 --> 00:09:22,850
about the database or the environment so

00:09:19,700 --> 00:09:24,830
I have to beat now we in the situation

00:09:22,850 --> 00:09:27,110
where we have this like database dump

00:09:24,830 --> 00:09:29,390
for the acceptance test that we now have

00:09:27,110 --> 00:09:30,650
to pass around to our different

00:09:29,390 --> 00:09:31,820
colleagues and make sure everybody oh

00:09:30,650 --> 00:09:36,050
are you running the acceptance test

00:09:31,820 --> 00:09:37,820
against the correct database and again

00:09:36,050 --> 00:09:39,110
you you run in that environment problem

00:09:37,820 --> 00:09:41,840
where it's okay now we have to make sure

00:09:39,110 --> 00:09:43,550
are you is your local environment set up

00:09:41,840 --> 00:09:44,990
like my local environment because your

00:09:43,550 --> 00:09:48,860
tests are coming up with different

00:09:44,990 --> 00:09:51,530
results that that is really work it's to

00:09:48,860 --> 00:09:53,810
be difficult and then for your CI

00:09:51,530 --> 00:09:56,030
pipeline it's like okay well now I want

00:09:53,810 --> 00:09:59,630
my CI pipeline to run these acceptance

00:09:56,030 --> 00:10:01,280
tests but like how am I gonna have a web

00:09:59,630 --> 00:10:04,220
environment that my CI pipeline is

00:10:01,280 --> 00:10:05,990
testing against how do i how do we make

00:10:04,220 --> 00:10:08,750
sure the CI pipeline has the same

00:10:05,990 --> 00:10:12,220
database that all the engineers have and

00:10:08,750 --> 00:10:15,230
and those are like the problems that I

00:10:12,220 --> 00:10:17,450
we've run into that we didn't really

00:10:15,230 --> 00:10:23,990
weren't able to find a solution to with

00:10:17,450 --> 00:10:26,540
code ception so WP acceptance its

00:10:23,990 --> 00:10:29,690
toolkit and empowers developers NCI

00:10:26,540 --> 00:10:32,210
pipelines to test code bases where the

00:10:29,690 --> 00:10:33,260
version control the version I'm sorry

00:10:32,210 --> 00:10:34,790
the acceptance tests are version

00:10:33,260 --> 00:10:38,420
controlled and the environments are

00:10:34,790 --> 00:10:40,700
shareable and I have a github link of

00:10:38,420 --> 00:10:43,180
course slides will be shared and

00:10:40,700 --> 00:10:43,180
everything like that

00:10:46,329 --> 00:10:52,370
so what makes acceptance testing

00:10:49,490 --> 00:10:55,730
powerful I'm sorry what makes WP

00:10:52,370 --> 00:10:57,410
sentence past powerful it lets you W

00:10:55,730 --> 00:10:59,240
acceptance lets you create environment

00:10:57,410 --> 00:11:03,889
instructions that you can version

00:10:59,240 --> 00:11:06,470
control with your code base so every

00:11:03,889 --> 00:11:09,920
time you or your team member or your CI

00:11:06,470 --> 00:11:12,139
pipeline run those tests an environment

00:11:09,920 --> 00:11:15,050
can be automatically generated based on

00:11:12,139 --> 00:11:16,519
that set of instructions so since

00:11:15,050 --> 00:11:18,620
everybody has the same set of

00:11:16,519 --> 00:11:22,459
instructions everybody has the exact

00:11:18,620 --> 00:11:27,680
same environment and then WP acceptance

00:11:22,459 --> 00:11:29,149
also runs all this in a standard

00:11:27,680 --> 00:11:31,639
development environment so whether you

00:11:29,149 --> 00:11:35,480
run it locally whether you run it in a

00:11:31,639 --> 00:11:39,100
CI pipeline WP acceptance is always

00:11:35,480 --> 00:11:39,100
running the same environment

00:11:42,309 --> 00:11:47,839
so here is what those environment

00:11:45,559 --> 00:11:52,610
instructions look like this is just an

00:11:47,839 --> 00:11:55,579
example so the instructions are intended

00:11:52,610 --> 00:11:58,759
to be sort of like human readable lines

00:11:55,579 --> 00:12:02,029
so the first one install WordPress where

00:11:58,759 --> 00:12:06,769
the version is is latest and URL is your

00:12:02,029 --> 00:12:09,649
all dot test activate plug-in where name

00:12:06,769 --> 00:12:14,000
is safe redirect manager install theme

00:12:09,649 --> 00:12:15,889
where name is 2019 create a posts etc

00:12:14,000 --> 00:12:18,170
cetera you can kind of understand like

00:12:15,889 --> 00:12:22,579
the theme of how these environment

00:12:18,170 --> 00:12:26,240
interactions work at the bottom I have a

00:12:22,579 --> 00:12:27,889
link to the github that shows you all

00:12:26,240 --> 00:12:34,129
the supported instructions that you can

00:12:27,889 --> 00:12:35,660
use for this so this works very well as

00:12:34,129 --> 00:12:39,079
long as your environments not too

00:12:35,660 --> 00:12:42,370
complicated if your environment is I

00:12:39,079 --> 00:12:44,350
have a couple plugins a theme

00:12:42,370 --> 00:12:46,959
using environment instructions is is

00:12:44,350 --> 00:12:48,370
great for more complex solutions I'm

00:12:46,959 --> 00:12:50,790
going to talk about that in a few

00:12:48,370 --> 00:12:54,490
minutes how you handle that

00:12:50,790 --> 00:12:56,079
so again WP acceptance every time you

00:12:54,490 --> 00:12:58,779
run your test suite it's going to run

00:12:56,079 --> 00:13:03,999
through these instructions and create an

00:12:58,779 --> 00:13:14,579
environment predictably using everything

00:13:03,999 --> 00:13:18,459
here okay so WP acceptance not JSON

00:13:14,579 --> 00:13:21,189
every project that uses WP acceptance

00:13:18,459 --> 00:13:25,389
you have to have a WP acceptance that

00:13:21,189 --> 00:13:28,059
JSON typically you'll put that in the

00:13:25,389 --> 00:13:33,389
root of your project wherever that might

00:13:28,059 --> 00:13:36,939
be so here's an example of that file

00:13:33,389 --> 00:13:38,529
first thing it does is it gives a name

00:13:36,939 --> 00:13:40,420
for your project this is 10 up

00:13:38,529 --> 00:13:42,819
experience again that's a plug-in that

00:13:40,420 --> 00:13:45,120
we have that just makes a couple

00:13:42,819 --> 00:13:47,559
modifications to your website to make it

00:13:45,120 --> 00:13:49,629
sort of in line with a couple of our

00:13:47,559 --> 00:13:54,610
best practices and gives you a couple

00:13:49,629 --> 00:13:57,730
useful things there's that this exclude

00:13:54,610 --> 00:13:59,019
property so when you're create when

00:13:57,730 --> 00:14:00,519
you're running WP acceptance is

00:13:59,019 --> 00:14:03,990
basically taking your entire code base

00:14:00,519 --> 00:14:06,339
and putting it into a docker container

00:14:03,990 --> 00:14:08,470
don't want it to bring like your node

00:14:06,339 --> 00:14:11,529
modules you might not want it to bring

00:14:08,470 --> 00:14:13,480
your your vendor directories that's just

00:14:11,529 --> 00:14:15,490
gonna make everything slow so you can

00:14:13,480 --> 00:14:18,929
exclude certain files and directories

00:14:15,490 --> 00:14:23,379
that you don't want to come with it the

00:14:18,929 --> 00:14:28,600
test property this tells WP settings

00:14:23,379 --> 00:14:32,199
where your tests are so in this case we

00:14:28,600 --> 00:14:36,040
have this test WP a directory and then

00:14:32,199 --> 00:14:38,350
star dot PHP is just run run anything

00:14:36,040 --> 00:14:40,439
with a dot PHP extension that's where my

00:14:38,350 --> 00:14:44,670
tests live

00:14:40,439 --> 00:14:47,439
the next property enforce clean database

00:14:44,670 --> 00:14:51,970
so when you're running acceptance tests

00:14:47,439 --> 00:14:53,769
with the framework you can tell it that

00:14:51,970 --> 00:14:55,030
after each test you want a clean

00:14:53,769 --> 00:14:58,960
database

00:14:55,030 --> 00:15:00,760
so this is obvious you SFIL for many

00:14:58,960 --> 00:15:02,400
reasons because if you don't have a

00:15:00,760 --> 00:15:05,650
clean database then each tests is

00:15:02,400 --> 00:15:07,630
potentially modifying your database as

00:15:05,650 --> 00:15:10,240
it interacts with your your web

00:15:07,630 --> 00:15:15,450
application creating content doing

00:15:10,240 --> 00:15:17,890
whatever the disadvantage to having

00:15:15,450 --> 00:15:20,200
enforcing a clean database is it is

00:15:17,890 --> 00:15:22,390
going to make your your test slower to

00:15:20,200 --> 00:15:25,990
run because after each tests it then has

00:15:22,390 --> 00:15:30,910
to like re import' all this sequel and

00:15:25,990 --> 00:15:34,270
it just takes longer project path that

00:15:30,910 --> 00:15:36,610
tells WP acceptance where your project

00:15:34,270 --> 00:15:39,850
should essentially be mounted inside of

00:15:36,610 --> 00:15:42,520
the doc into an ER that it's executing

00:15:39,850 --> 00:15:44,470
inside of and then environment

00:15:42,520 --> 00:15:47,620
instructions this is what I showed you

00:15:44,470 --> 00:15:52,540
before so you can basically provide it

00:15:47,620 --> 00:15:54,700
an array of instructions WP acceptance

00:15:52,540 --> 00:15:57,640
not JSON it will be version control just

00:15:54,700 --> 00:16:01,089
like your composer dot JSON or package a

00:15:57,640 --> 00:16:03,910
JSON or whatever so as your colleagues

00:16:01,089 --> 00:16:07,710
add and remove instructions everybody

00:16:03,910 --> 00:16:07,710
will have that same set of instructions

00:16:10,980 --> 00:16:17,980
all right so snapshots I alluded to this

00:16:15,310 --> 00:16:19,180
a little bit before environment

00:16:17,980 --> 00:16:21,990
instructions are great they're very

00:16:19,180 --> 00:16:25,570
simple but what if your environment is

00:16:21,990 --> 00:16:29,650
complicated what if there's a huge

00:16:25,570 --> 00:16:32,530
database of sort of legacy data there's

00:16:29,650 --> 00:16:37,540
tons of options set there is menus

00:16:32,530 --> 00:16:40,540
there's 30 different plugins thousands

00:16:37,540 --> 00:16:44,500
of pieces of content how do you handle

00:16:40,540 --> 00:16:48,010
that sort of environment for this we

00:16:44,500 --> 00:16:50,170
have what we call snapshot support and

00:16:48,010 --> 00:16:54,160
this is based off of the WP snapshots

00:16:50,170 --> 00:16:58,270
project which is another Atena project

00:16:54,160 --> 00:17:01,510
so I have a link at the bottom snapshots

00:16:58,270 --> 00:17:03,490
are great for client work so typically

00:17:01,510 --> 00:17:05,920
our open source projects when we're

00:17:03,490 --> 00:17:07,870
acceptance testing knows we're going to

00:17:05,920 --> 00:17:09,250
use environment structions because

00:17:07,870 --> 00:17:13,059
the environments very simple setup

00:17:09,250 --> 00:17:15,160
WordPress install the plug-in activate a

00:17:13,059 --> 00:17:18,970
theme that's about all you need maybe

00:17:15,160 --> 00:17:21,280
create a few posts or something but for

00:17:18,970 --> 00:17:25,569
our clients I mean they might have like

00:17:21,280 --> 00:17:27,730
a two gigabyte database of random stuff

00:17:25,569 --> 00:17:30,690
and we want to make sure we're running

00:17:27,730 --> 00:17:32,950
our acceptance test suite against

00:17:30,690 --> 00:17:36,820
something as close to production as

00:17:32,950 --> 00:17:38,050
possible so that you know we know when

00:17:36,820 --> 00:17:47,500
we're going to break production before

00:17:38,050 --> 00:17:52,690
we actually break production so the

00:17:47,500 --> 00:17:54,880
snapshot workflow WP acceptance is going

00:17:52,690 --> 00:17:57,220
to test it's going to run your tests

00:17:54,880 --> 00:17:59,980
against a what we call a primary

00:17:57,220 --> 00:18:02,140
snapshot the entire development team

00:17:59,980 --> 00:18:07,030
will be running against that primary

00:18:02,140 --> 00:18:09,490
snapshot each snapshot has an ID that is

00:18:07,030 --> 00:18:12,780
stored in your WP acceptance that JSON

00:18:09,490 --> 00:18:12,780
I'm gonna show you that in a minute

00:18:13,200 --> 00:18:18,280
every time you're running WP acceptance

00:18:15,970 --> 00:18:22,750
you can run it against your local

00:18:18,280 --> 00:18:24,490
environments and then essentially create

00:18:22,750 --> 00:18:26,770
a snapshot from your local environment

00:18:24,490 --> 00:18:29,440
so after a snapshot is created from your

00:18:26,770 --> 00:18:31,870
local environment your team members can

00:18:29,440 --> 00:18:35,410
then run the same test suite against

00:18:31,870 --> 00:18:39,429
that snapshot so that's a handy way for

00:18:35,410 --> 00:18:41,710
you to create a snapshot when you save a

00:18:39,429 --> 00:18:45,010
snapshot it will update your WP accept

00:18:41,710 --> 00:18:46,750
on acceptance that JSON and then you can

00:18:45,010 --> 00:18:49,420
you know commit that to your repository

00:18:46,750 --> 00:18:51,040
push that upstream and then your do your

00:18:49,420 --> 00:18:52,420
development team will then see okay we

00:18:51,040 --> 00:18:58,660
have a new snapshot that we're now

00:18:52,420 --> 00:19:02,950
testing off of typically we will create

00:18:58,660 --> 00:19:04,090
a new snapshot when a new content type

00:19:02,950 --> 00:19:06,280
or something is added to the website

00:19:04,090 --> 00:19:09,250
major changes are made to the website

00:19:06,280 --> 00:19:12,420
that is typically when it we think it's

00:19:09,250 --> 00:19:12,420
appropriate to add a new snapshot

00:19:12,889 --> 00:19:20,219
so before I could continue though so the

00:19:16,349 --> 00:19:23,369
way snapshots works is it can be it can

00:19:20,219 --> 00:19:28,619
be a little tricky but the snapshots

00:19:23,369 --> 00:19:31,320
project is based off of AWS s3 so you

00:19:28,619 --> 00:19:33,809
install the snapshot software and it

00:19:31,320 --> 00:19:36,869
basically every time you create a

00:19:33,809 --> 00:19:41,099
snapshot it pushes it upstream to s3 and

00:19:36,869 --> 00:19:43,649
saves files or files and your database

00:19:41,099 --> 00:19:46,769
on s3 and associates that with a

00:19:43,649 --> 00:19:48,690
snapshot ID so then your team members it

00:19:46,769 --> 00:19:50,700
can search through that library of

00:19:48,690 --> 00:19:52,609
snapshots and pull down snapshots into

00:19:50,700 --> 00:19:55,339
their environment as they see fit

00:19:52,609 --> 00:19:58,830
w7w acceptance does this automatically

00:19:55,339 --> 00:19:59,849
but in order for the snapshots that

00:19:58,830 --> 00:20:02,399
workflow to work

00:19:59,849 --> 00:20:06,599
you do have to have like you have to

00:20:02,399 --> 00:20:10,379
pass it AWS credentials you have to

00:20:06,599 --> 00:20:12,690
store those obviously on AWS your team

00:20:10,379 --> 00:20:14,940
members have to have AWS credentials and

00:20:12,690 --> 00:20:16,169
you have to of course setup like some

00:20:14,940 --> 00:20:18,019
sort of permissioning because you

00:20:16,169 --> 00:20:21,719
probably don't want the snapshots to be

00:20:18,019 --> 00:20:23,759
publicly viewable on so there is a

00:20:21,719 --> 00:20:25,289
little bit of setup involved but it pays

00:20:23,759 --> 00:20:32,639
off in dividends when you're working

00:20:25,289 --> 00:20:37,499
with a team of developers so this is

00:20:32,639 --> 00:20:41,039
what you're your WP acceptance at JSON

00:20:37,499 --> 00:20:44,429
file would look like with snapshots so

00:20:41,039 --> 00:20:48,239
most everything is the same but now we

00:20:44,429 --> 00:20:51,239
have this snapshots property there's one

00:20:48,239 --> 00:20:54,059
snapshot in it there's an there's a name

00:20:51,239 --> 00:21:01,200
for the snapshot an ID that ID again

00:20:54,059 --> 00:21:02,450
references the snapshot in s3 at the

00:21:01,200 --> 00:21:06,239
bottom we have this repository

00:21:02,450 --> 00:21:09,179
properties so that tells snapshots this

00:21:06,239 --> 00:21:11,719
is the ten up AWS repository that's

00:21:09,179 --> 00:21:11,719
important

00:21:12,140 --> 00:21:17,210
for snapshots you can provide it

00:21:14,770 --> 00:21:18,679
multiple snapshots so maybe you want to

00:21:17,210 --> 00:21:20,059
run your tests against multiple

00:21:18,679 --> 00:21:24,140
snapshots each has like a different

00:21:20,059 --> 00:21:26,240
version of WordPress different I don't

00:21:24,140 --> 00:21:31,670
know plugins or something that is

00:21:26,240 --> 00:21:33,650
entirely possible also something of note

00:21:31,670 --> 00:21:37,940
in this example file we have this

00:21:33,650 --> 00:21:41,120
bootstrap property so you can have like

00:21:37,940 --> 00:21:42,860
a bootstrap file similar to like a PHP

00:21:41,120 --> 00:21:47,179
unit type of thing that it has run at

00:21:42,860 --> 00:21:51,290
the start of your test suite this is for

00:21:47,179 --> 00:21:59,720
our open source plugin distributor where

00:21:51,290 --> 00:22:02,900
we use WP acceptance so installation and

00:21:59,720 --> 00:22:05,870
usage WP acceptance it can be added to

00:22:02,900 --> 00:22:07,580
your project via composer you can use it

00:22:05,870 --> 00:22:10,669
on a theme you can use it on a plugin

00:22:07,580 --> 00:22:13,340
you can use it on an entire WordPress

00:22:10,669 --> 00:22:17,620
installation pretty much however you see

00:22:13,340 --> 00:22:23,240
fit we're typically version controlling

00:22:17,620 --> 00:22:26,120
the roots of WP content and then adding

00:22:23,240 --> 00:22:30,410
WP acceptance adjacent to the WP content

00:22:26,120 --> 00:22:33,679
directory that workflow is typically

00:22:30,410 --> 00:22:36,080
what we're doing but depends on the

00:22:33,679 --> 00:22:37,309
situation depends on the client if it's

00:22:36,080 --> 00:22:40,040
an open source plug-in we're obviously

00:22:37,309 --> 00:22:42,860
adding WP acceptance a JSON to the root

00:22:40,040 --> 00:22:45,640
of the plug-in directory so it just

00:22:42,860 --> 00:22:49,280
depends on what works for you

00:22:45,640 --> 00:22:53,630
WP acceptance again it's run via the

00:22:49,280 --> 00:22:57,260
command line it has this init command so

00:22:53,630 --> 00:23:00,080
you can run WP acceptance in it which is

00:22:57,260 --> 00:23:05,000
similar to like a composer I think

00:23:00,080 --> 00:23:07,190
composer Dodd and composer in it or NPM

00:23:05,000 --> 00:23:09,559
in it or something that will take you

00:23:07,190 --> 00:23:11,540
through a step-by-step process of

00:23:09,559 --> 00:23:15,650
creating that you can except it's not

00:23:11,540 --> 00:23:19,179
JSON and then when you run WV acceptance

00:23:15,650 --> 00:23:21,530
it's simply just that WP acceptance run

00:23:19,179 --> 00:23:26,530
obviously there's a ton of flags but

00:23:21,530 --> 00:23:26,530
that that is the basic usage

00:23:28,820 --> 00:23:39,020
so here's a simple test first thing

00:23:35,850 --> 00:23:43,500
we're doing or we have this I variable

00:23:39,020 --> 00:23:47,030
and it opens a browser page so you can

00:23:43,500 --> 00:23:50,310
sort of pretend I as like a user then I

00:23:47,030 --> 00:23:54,060
calls this move to method and it moves

00:23:50,310 --> 00:23:57,240
to the root of your web application then

00:23:54,060 --> 00:24:00,660
I is clicking on a dot modal link just a

00:23:57,240 --> 00:24:05,610
standard CSS selector so it's clicking

00:24:00,660 --> 00:24:07,470
on some modal link and then I is calling

00:24:05,610 --> 00:24:11,310
the C text method which is really just

00:24:07,470 --> 00:24:13,410
an assertion and it is asserting that it

00:24:11,310 --> 00:24:15,390
sees the text the text is actually

00:24:13,410 --> 00:24:19,440
visible in the browser or Moodle title

00:24:15,390 --> 00:24:21,960
so if Moodle title is not visible after

00:24:19,440 --> 00:24:28,100
clicking that link that the test would

00:24:21,960 --> 00:24:31,530
fail WP acceptance on the testing side

00:24:28,100 --> 00:24:33,390
extends phpunit so it is behind the

00:24:31,530 --> 00:24:36,330
scenes using just like your standard PHP

00:24:33,390 --> 00:24:38,190
unit assertions that you can you could

00:24:36,330 --> 00:24:41,400
also use those as well if you want to do

00:24:38,190 --> 00:24:45,410
assert things that that's kind of like

00:24:41,400 --> 00:24:45,410
the basics of how your tests look

00:24:48,980 --> 00:24:55,220
so here's another test this time we're

00:24:52,130 --> 00:24:57,980
testing in the WordPress admin so again

00:24:55,220 --> 00:25:00,890
we have this I variable the first thing

00:24:57,980 --> 00:25:05,960
it's doing is opening a browser page and

00:25:00,890 --> 00:25:06,560
then we're calling I login so pretty

00:25:05,960 --> 00:25:09,670
self-explanatory

00:25:06,560 --> 00:25:12,610
this is logging into the WordPress admin

00:25:09,670 --> 00:25:15,620
notice we're not providing like any

00:25:12,610 --> 00:25:18,410
admin username or password you could

00:25:15,620 --> 00:25:19,850
that method does take those as optional

00:25:18,410 --> 00:25:22,030
parameters you don't need to provide

00:25:19,850 --> 00:25:26,390
them because it automatically knows an

00:25:22,030 --> 00:25:28,130
admin user and password to login to so

00:25:26,390 --> 00:25:33,770
that that's convenient

00:25:28,130 --> 00:25:36,400
after we log in we're moving to WP admin

00:25:33,770 --> 00:25:38,720
slash profile dot PHP so that's like the

00:25:36,400 --> 00:25:43,820
view that lets users manage their

00:25:38,720 --> 00:25:45,710
profile after we moved to a page we

00:25:43,820 --> 00:25:47,960
typically call some sort of a weight

00:25:45,710 --> 00:25:51,290
function if anybody's ever done anything

00:25:47,960 --> 00:25:54,530
with like puppeteer or code ception or

00:25:51,290 --> 00:25:57,230
anything after you tip typically after

00:25:54,530 --> 00:25:58,700
you do something you you need to wait to

00:25:57,230 --> 00:26:01,550
make sure that the browser is finished

00:25:58,700 --> 00:26:03,230
loading or finished doing whatever so

00:26:01,550 --> 00:26:08,740
we're waiting until an element is

00:26:03,230 --> 00:26:13,400
visible and that's the Refresh admin bar

00:26:08,740 --> 00:26:17,690
CSS selector next is calling fill field

00:26:13,400 --> 00:26:19,460
so we're filling an input field the

00:26:17,690 --> 00:26:23,060
first name field and we're putting in a

00:26:19,460 --> 00:26:25,910
test name then we are clicking submit

00:26:23,060 --> 00:26:27,530
so that is saving clicking the Save

00:26:25,910 --> 00:26:30,170
button on the profile and it's saving

00:26:27,530 --> 00:26:32,360
the information that we've put in again

00:26:30,170 --> 00:26:34,070
we're calling this weight function we

00:26:32,360 --> 00:26:37,400
need to wait until the browser finishes

00:26:34,070 --> 00:26:38,990
loading and then once the browser

00:26:37,400 --> 00:26:41,420
finishes loading after we've clicked the

00:26:38,990 --> 00:26:44,540
Save button we're now asserting making

00:26:41,420 --> 00:26:47,450
an assertion PHP unit style essentially

00:26:44,540 --> 00:26:50,920
that we see a value in the attribute of

00:26:47,450 --> 00:26:50,920
that first name field

00:26:51,279 --> 00:27:00,559
pretty simple test pretty useful to test

00:26:57,409 --> 00:27:06,259
that the profile has been saved

00:27:00,559 --> 00:27:08,629
I mentioned code ception to puppeteer

00:27:06,259 --> 00:27:12,049
WPA settings in the background does work

00:27:08,629 --> 00:27:16,749
off of puppeteer so these methods are

00:27:12,049 --> 00:27:16,749
essentially routing calls to puppeteer

00:27:17,619 --> 00:27:25,489
so here's another example and this one

00:27:20,169 --> 00:27:27,769
we are saving a post so again we are

00:27:25,489 --> 00:27:32,629
opening a browser page we're logging in

00:27:27,769 --> 00:27:37,399
is the user admin I'm navigating to WP

00:27:32,629 --> 00:27:40,879
admin to this post new dot PHP page

00:27:37,399 --> 00:27:43,879
essentially or this is a custom post

00:27:40,879 --> 00:27:46,309
type redirect rule and we're navigating

00:27:43,879 --> 00:27:50,889
to the Creator for that custom post type

00:27:46,309 --> 00:27:50,889
so so we can create a new redirect rule

00:27:50,950 --> 00:27:59,090
we are calling fill field and we're

00:27:54,950 --> 00:28:01,669
filling a couple inputs with slash test

00:27:59,090 --> 00:28:03,529
slash test - there's like this notes

00:28:01,669 --> 00:28:06,049
field and this custom post type so we're

00:28:03,529 --> 00:28:09,679
filling that with that notes text and

00:28:06,049 --> 00:28:12,019
then we are clicking the publish button

00:28:09,679 --> 00:28:14,269
at the end after we click the publish

00:28:12,019 --> 00:28:19,220
button we need to wait until the browser

00:28:14,269 --> 00:28:23,119
reloads and we're waiting for this

00:28:19,220 --> 00:28:26,179
updated CSS selector after that happens

00:28:23,119 --> 00:28:28,070
we're asserting through the C value and

00:28:26,179 --> 00:28:31,190
property method that each of these

00:28:28,070 --> 00:28:34,970
fields we've changed contains the value

00:28:31,190 --> 00:28:37,039
that we have inputted so this is

00:28:34,970 --> 00:28:38,840
essentially testing for this is from our

00:28:37,039 --> 00:28:42,499
plugin safe redirect manager or which

00:28:38,840 --> 00:28:45,139
lets you create redirects that when we

00:28:42,499 --> 00:28:47,989
actually make changes to a redirect and

00:28:45,139 --> 00:28:50,419
fill in the values that when the user

00:28:47,989 --> 00:28:52,849
click Save those values are reflected

00:28:50,419 --> 00:28:55,750
and are actually saved in the database

00:28:52,849 --> 00:29:00,190
and displaying properly on page reload

00:28:55,750 --> 00:29:02,320
so extremely important again the stuff

00:29:00,190 --> 00:29:04,360
like this this is run as part of a CI

00:29:02,320 --> 00:29:06,490
pipeline so every time it did all /

00:29:04,360 --> 00:29:10,419
creates a pull request or something like

00:29:06,490 --> 00:29:12,070
that these tests are run to make sure

00:29:10,419 --> 00:29:14,710
that like the basic application

00:29:12,070 --> 00:29:16,419
functionality is still working that

00:29:14,710 --> 00:29:23,770
users can actually create redirects

00:29:16,419 --> 00:29:25,539
which is fundamental to the plug-in so

00:29:23,770 --> 00:29:28,000
WP acceptance has something called the

00:29:25,539 --> 00:29:30,730
standard test suite which i think is

00:29:28,000 --> 00:29:33,250
really cool this is basically just like

00:29:30,730 --> 00:29:37,600
standard tests that you can include in

00:29:33,250 --> 00:29:43,030
your application mostly associated with

00:29:37,600 --> 00:29:45,340
WordPress so as we build plug-ins and

00:29:43,030 --> 00:29:47,289
themes we want to make sure that our

00:29:45,340 --> 00:29:49,330
plugins slash themes aren't breaking

00:29:47,289 --> 00:29:51,309
core WordPress functionality and if

00:29:49,330 --> 00:29:53,850
you've built a lot of WordPress plugins

00:29:51,309 --> 00:29:55,990
you're interacting a lot with hooks and

00:29:53,850 --> 00:29:58,630
different WordPress internals it's easy

00:29:55,990 --> 00:30:00,580
to do something wrong and actually

00:29:58,630 --> 00:30:03,039
actually accidentally break like a

00:30:00,580 --> 00:30:04,870
section of WordPress or maybe break the

00:30:03,039 --> 00:30:07,600
admin or something like that even maybe

00:30:04,870 --> 00:30:09,419
you white screened WordPress so the

00:30:07,600 --> 00:30:12,220
standard test suite lets you assert that

00:30:09,419 --> 00:30:18,520
there was WordPress core internals are

00:30:12,220 --> 00:30:20,620
still working with your plugin so here's

00:30:18,520 --> 00:30:22,750
just some examples of what you can do

00:30:20,620 --> 00:30:24,130
with this standard test suite I can test

00:30:22,750 --> 00:30:26,559
and make sure that the front-end is

00:30:24,130 --> 00:30:28,330
loading properly I can test and make

00:30:26,559 --> 00:30:31,030
sure an admin can create a post

00:30:28,330 --> 00:30:34,090
successfully testing the admin bar

00:30:31,030 --> 00:30:35,770
showing one of the tests I showed you

00:30:34,090 --> 00:30:37,390
before I can test that a user can

00:30:35,770 --> 00:30:40,900
actually update their profile and that

00:30:37,390 --> 00:30:44,350
that update works I can test that user

00:30:40,900 --> 00:30:47,020
can update general settings etc there's

00:30:44,350 --> 00:30:49,030
some more standard tests again just

00:30:47,020 --> 00:30:51,240
things that you want to make sure work

00:30:49,030 --> 00:30:54,840
and are still compatible with your

00:30:51,240 --> 00:30:54,840
plugin or application

00:30:55,179 --> 00:31:02,090
so in order to use the standard test you

00:30:58,580 --> 00:31:06,010
would simply write a WP acceptance test

00:31:02,090 --> 00:31:09,710
suite create a method in your test class

00:31:06,010 --> 00:31:11,720
that calls one of the standard tests so

00:31:09,710 --> 00:31:15,860
this one tests to make sure logging in

00:31:11,720 --> 00:31:18,980
works so all we have to do in our tests

00:31:15,860 --> 00:31:21,740
is just call that parent underscore test

00:31:18,980 --> 00:31:24,350
login function and it'll run the test so

00:31:21,740 --> 00:31:25,730
this the standard test suite it gives

00:31:24,350 --> 00:31:27,200
you a lot of things that you can just

00:31:25,730 --> 00:31:28,490
add to your application out of the box

00:31:27,200 --> 00:31:31,250
that you don't actually have to write

00:31:28,490 --> 00:31:35,330
any tests that are going to have some

00:31:31,250 --> 00:31:42,110
value and make your your application a

00:31:35,330 --> 00:31:43,760
little more stable as I've said WP

00:31:42,110 --> 00:31:47,540
settings works great with continuous

00:31:43,760 --> 00:31:49,730
integration we use it with Travis we use

00:31:47,540 --> 00:31:52,929
it with git lab a lot there's actually

00:31:49,730 --> 00:31:55,340
some internal internals inside of the

00:31:52,929 --> 00:31:57,740
inside of the code of WV sentence that

00:31:55,340 --> 00:32:03,320
makes it works well work well with git

00:31:57,740 --> 00:32:05,660
lab here's an example Travis CI file so

00:32:03,320 --> 00:32:08,660
very simple or just running composer

00:32:05,660 --> 00:32:11,420
install we're making sure that docker is

00:32:08,660 --> 00:32:15,230
running because WWV seven's runs on

00:32:11,420 --> 00:32:20,080
docker and then we're calling W

00:32:15,230 --> 00:32:20,080
acceptance run Travis so very simple

00:32:23,750 --> 00:32:28,520
the beauty settings that comes with a

00:32:25,580 --> 00:32:30,410
ton of tools for debugging this is super

00:32:28,520 --> 00:32:33,110
important because if you've ever written

00:32:30,410 --> 00:32:37,700
any acceptance test with like puppeteer

00:32:33,110 --> 00:32:39,170
or selenium or no exception when your

00:32:37,700 --> 00:32:43,280
test has a problem it can be hard to

00:32:39,170 --> 00:32:45,380
debug so w acceptance gives you a couple

00:32:43,280 --> 00:32:47,000
tools one there's like a verbose flag

00:32:45,380 --> 00:32:49,040
that you can add so it'll show you a lot

00:32:47,000 --> 00:32:53,090
of debug information as it runs through

00:32:49,040 --> 00:32:56,000
your tests probably the most important

00:32:53,090 --> 00:32:59,990
thing is this show a browser flag so

00:32:56,000 --> 00:33:02,000
when I pass that show browser parameter

00:32:59,990 --> 00:33:04,520
to the command it's going to pop up the

00:33:02,000 --> 00:33:09,560
browser and show it as it interacts and

00:33:04,520 --> 00:33:12,230
runs your your code this is that was

00:33:09,560 --> 00:33:14,570
like the video I showed you you can also

00:33:12,230 --> 00:33:16,370
tell WP Seton's to slow down so if

00:33:14,570 --> 00:33:18,260
things are happening too fast you can

00:33:16,370 --> 00:33:24,530
tell it to slow down and kind of watch

00:33:18,260 --> 00:33:26,960
as it interacts with your application so

00:33:24,530 --> 00:33:30,230
I we have a ton of examples if you want

00:33:26,960 --> 00:33:31,400
to see w s-- happens in action or you

00:33:30,230 --> 00:33:33,760
know you can pull code from these

00:33:31,400 --> 00:33:38,660
projects and kind of add it to your own

00:33:33,760 --> 00:33:44,870
applications some github links again

00:33:38,660 --> 00:33:48,200
slides will be available there is a ton

00:33:44,870 --> 00:33:50,780
of documentation on WP septons as well

00:33:48,200 --> 00:33:56,440
as like some cookbook code that you can

00:33:50,780 --> 00:33:56,440
pull into your projects link is there

00:33:56,770 --> 00:34:06,170
and that is it my contact information is

00:34:01,040 --> 00:34:07,940
there yeah if anybody has any questions

00:34:06,170 --> 00:34:10,820
or wants to contribute the project feel

00:34:07,940 --> 00:34:13,460
free to contact me also our kind of e10

00:34:10,820 --> 00:34:15,200
up this shameless plug we are we are

00:34:13,460 --> 00:34:19,460
iring we're a distributed company we

00:34:15,200 --> 00:34:22,150
have some german presence that's all

00:34:19,460 --> 00:34:22,150
thank you

00:34:22,210 --> 00:34:25,510
[Applause]

00:34:25,850 --> 00:34:42,969
[Music]

00:34:39,620 --> 00:34:42,969

YouTube URL: https://www.youtube.com/watch?v=S6Z5oPPGaZs


