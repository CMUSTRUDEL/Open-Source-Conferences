Title: Getting started with ReactPHP – Pushing Real-Time Data to the Browser | Christian Lück
Publication date: 2019-12-06
Playlist: International PHP Conference Spring 2019
Description: 
	Think about PHP for a few seconds… What came to mind? It’s very likely you thought about your average product catalog, a blogging platform, or how the platform is inferior to things like Node.js. But wait, it’s 2019! What if I told you PHP’s huge ecosystem has way more to offer and PHP is not inferior at all to its evil cousin Node.js?

In this talk you will learn about the core concepts of async PHP and why you too should care about ReactPHP being a real thing. The talk has a strong focus on sparking the idea that PHP can be way faster and more versatile than you probably thought. Bring along an open mind, and through lots of interesting examples and live demos learn why what sounds crazy at first might soon be a valuable addition in your toolbox.

You’re already familiar with PHP and want to learn what ReactPHP is all about? Then this talk is for you! We will start from scratch and see what it takes to build an application that pushes data from your command line to your browser in real-time. You’re invited to join the interactive demos or lean back and learn more about why an event-driven approach might be the next big thing in making your application faster and more responsive.

Speaker: Christian Lück (clue·engineering) | https://phpconference.com/speaker/christian-luck/

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:01,550 --> 00:00:06,870
[Music]

00:00:04,250 --> 00:00:09,929
yeah welcome to my today's talk

00:00:06,870 --> 00:00:12,030
getting started with react PHP and in

00:00:09,929 --> 00:00:14,910
particular we're trying to push real

00:00:12,030 --> 00:00:17,940
time data here as part of what can be

00:00:14,910 --> 00:00:20,699
done with react PHP so let's see what

00:00:17,940 --> 00:00:21,840
you guys can expect today I will start

00:00:20,699 --> 00:00:25,760
with a quick introduction about what

00:00:21,840 --> 00:00:29,699
react PHP is sorry we'll start with

00:00:25,760 --> 00:00:31,320
looking into the core components which

00:00:29,699 --> 00:00:37,520
is the event loop the streaming data

00:00:31,320 --> 00:00:40,770
sockets yeah seem to have some issues

00:00:37,520 --> 00:00:43,079
promises real-time data streaming HB

00:00:40,770 --> 00:00:45,660
chat bots interactive desktop GUI and

00:00:43,079 --> 00:00:47,640
conclusions so this is what we need to

00:00:45,660 --> 00:00:50,129
learn in order to understand what react

00:00:47,640 --> 00:00:52,550
PHP is really about and to be honest of

00:00:50,129 --> 00:00:56,699
course that's not going to work out in

00:00:52,550 --> 00:01:00,469
yeah 55 45 minutes so what we are going

00:00:56,699 --> 00:01:02,699
to do today well it's so big gets better

00:01:00,469 --> 00:01:04,589
and what we are going to do is we're

00:01:02,699 --> 00:01:06,689
just going to give you all the

00:01:04,589 --> 00:01:09,030
information you need to get you need to

00:01:06,689 --> 00:01:11,189
get started so with this information you

00:01:09,030 --> 00:01:14,220
can then use Google and and see what

00:01:11,189 --> 00:01:15,720
you're interested in so what we're

00:01:14,220 --> 00:01:17,159
trying to do is we're pushing real time

00:01:15,720 --> 00:01:19,619
data to the browser so this is what we

00:01:17,159 --> 00:01:21,960
are after here and I encourage feedback

00:01:19,619 --> 00:01:24,810
I also hope that we still have some time

00:01:21,960 --> 00:01:27,900
for Q at the very end and now let's see

00:01:24,810 --> 00:01:30,329
so this is the actual agenda we'll try

00:01:27,900 --> 00:01:32,189
to give a short introduction then look

00:01:30,329 --> 00:01:34,229
just at the core components of reg PHP

00:01:32,189 --> 00:01:36,210
and really the main part of this talk is

00:01:34,229 --> 00:01:38,400
really about examples and Ino time so

00:01:36,210 --> 00:01:41,310
this means two things a lot of this talk

00:01:38,400 --> 00:01:43,320
is about examples and examples and live

00:01:41,310 --> 00:01:44,790
demos tend to go wrong so please bear

00:01:43,320 --> 00:01:47,430
with me in case anything goes wrong and

00:01:44,790 --> 00:01:49,860
B this means if you have a laptop or a

00:01:47,430 --> 00:01:51,689
smartphone in range you're invited to

00:01:49,860 --> 00:01:53,939
join the demos and use my live chat

00:01:51,689 --> 00:01:57,060
examples and hopefully don't mess with

00:01:53,939 --> 00:02:01,710
it okay so let's start with a quick

00:01:57,060 --> 00:02:05,689
hello yeah you can just see every second

00:02:01,710 --> 00:02:08,689
slide apparently but you get the idea

00:02:05,689 --> 00:02:08,689
yeah

00:02:08,800 --> 00:02:20,740
I mean maybe it works if I use but don't

00:02:13,990 --> 00:02:22,810
touch the device at all let's see so Who

00:02:20,740 --> 00:02:24,880
am I my name is Christian Luke and

00:02:22,810 --> 00:02:26,680
there's this strange character in my

00:02:24,880 --> 00:02:29,350
name and that's why I usually end up

00:02:26,680 --> 00:02:31,390
like this even today in 2019 so I

00:02:29,350 --> 00:02:32,770
usually go with a Yui in my last name

00:02:31,390 --> 00:02:35,410
and if you look really close at my name

00:02:32,770 --> 00:02:37,900
you'll see that my initials are not

00:02:35,410 --> 00:02:40,210
touching the device that my initials

00:02:37,900 --> 00:02:41,980
make up for the word clue which is my

00:02:40,210 --> 00:02:43,810
github panel so if you want to see any

00:02:41,980 --> 00:02:45,490
of the examples life and download the

00:02:43,810 --> 00:02:47,440
source code this is how you can reach me

00:02:45,490 --> 00:02:49,360
also if you want to tweet about this

00:02:47,440 --> 00:02:52,000
talk or want to reach out to me later on

00:02:49,360 --> 00:02:53,980
I didn't have as much luck on Twitter so

00:02:52,000 --> 00:02:56,710
my handle is another clue on Twitter

00:02:53,980 --> 00:02:58,060
just in case you want to reach out okay

00:02:56,710 --> 00:03:00,790
so what I want you to know about me is

00:02:58,060 --> 00:03:03,370
I'm passionate about what I'm doing I'm

00:03:00,790 --> 00:03:05,650
standing here because I think react HP

00:03:03,370 --> 00:03:08,620
is an important thing to be aware of and

00:03:05,650 --> 00:03:10,810
in fact this actually means that two

00:03:08,620 --> 00:03:12,340
years ago I quit my regular job in order

00:03:10,810 --> 00:03:14,430
to become a freelance software engineer

00:03:12,340 --> 00:03:16,900
so this is now what I do for a living

00:03:14,430 --> 00:03:18,970
teaching people how to use certain

00:03:16,900 --> 00:03:23,080
software architecture tools such as reg

00:03:18,970 --> 00:03:25,530
Petri okay so so much about me now who

00:03:23,080 --> 00:03:28,420
are you

00:03:25,530 --> 00:03:30,310
who here considers themself a PHP

00:03:28,420 --> 00:03:31,630
developer Software Architect just raise

00:03:30,310 --> 00:03:33,190
your hands just so I get an

00:03:31,630 --> 00:03:34,600
understanding okay pretty much everybody

00:03:33,190 --> 00:03:37,690
which is a good thing because this is

00:03:34,600 --> 00:03:39,120
the IPC after all the international PHP

00:03:37,690 --> 00:03:43,480
conference so I guess that makes sense

00:03:39,120 --> 00:03:45,940
so who here has heard about react the

00:03:43,480 --> 00:03:47,980
one with this logo pretty much everybody

00:03:45,940 --> 00:03:49,150
so which is interesting because you're

00:03:47,980 --> 00:03:51,310
going to learn something new today

00:03:49,150 --> 00:03:54,220
because this talk is not about this

00:03:51,310 --> 00:03:56,560
react and we'll see in a moment so but

00:03:54,220 --> 00:03:58,030
first let's talk about how PHP is

00:03:56,560 --> 00:04:00,820
traditionally used and when we talk

00:03:58,030 --> 00:04:02,470
about PHP it's pretty much still the

00:04:00,820 --> 00:04:06,760
same thing like it was invented in the

00:04:02,470 --> 00:04:08,760
90s so and this means this is still what

00:04:06,760 --> 00:04:11,440
most people think of when we talk about

00:04:08,760 --> 00:04:13,750
PHP you have your client accessing your

00:04:11,440 --> 00:04:14,920
PHP through and web server talking to

00:04:13,750 --> 00:04:17,320
some database and of course you have

00:04:14,920 --> 00:04:18,880
some frameworks etc but that's still the

00:04:17,320 --> 00:04:21,549
basic idea and it means you're still

00:04:18,880 --> 00:04:22,570
bound in this pretty much traditional

00:04:21,549 --> 00:04:24,280
lamb stack

00:04:22,570 --> 00:04:25,810
and you always have this

00:04:24,280 --> 00:04:27,190
request/response lag which means a

00:04:25,810 --> 00:04:28,720
client is going to send a reakless which

00:04:27,190 --> 00:04:30,580
is going to traverse over this

00:04:28,720 --> 00:04:31,990
architecture eventually end up in your

00:04:30,580 --> 00:04:34,720
database you get the right data and send

00:04:31,990 --> 00:04:37,300
it back to your client and of course one

00:04:34,720 --> 00:04:40,330
of the common criticisms PHP receives is

00:04:37,300 --> 00:04:41,800
that it's too slow but of course if we

00:04:40,330 --> 00:04:43,570
take a look at this very traditional set

00:04:41,800 --> 00:04:46,480
up of course we can't improve this so as

00:04:43,570 --> 00:04:48,550
an example in order in instead of using

00:04:46,480 --> 00:04:53,860
just a single PHP process we can use PHP

00:04:48,550 --> 00:04:55,930
fpm yeah there we go in order to spawn

00:04:53,860 --> 00:04:58,930
multiple PHP processes for example we

00:04:55,930 --> 00:05:00,430
can use nginx instead of Apache and for

00:04:58,930 --> 00:05:01,810
example we can use a caching daemon to

00:05:00,430 --> 00:05:03,760
offload work from the database to make

00:05:01,810 --> 00:05:07,360
our site faster and what this really

00:05:03,760 --> 00:05:09,610
means is I mean let's be honest PHP may

00:05:07,360 --> 00:05:11,920
not be pretty but somehow it still gets

00:05:09,610 --> 00:05:14,380
the job done and this is why we are all

00:05:11,920 --> 00:05:19,330
using PHP so something can't be that

00:05:14,380 --> 00:05:21,070
wrong about PHP and we'll see but

00:05:19,330 --> 00:05:23,560
nowadays knock knock who's there now we

00:05:21,070 --> 00:05:26,170
have here 2019 and that means we now

00:05:23,560 --> 00:05:27,250
have entirely different requirements so

00:05:26,170 --> 00:05:28,600
for example we have separation of

00:05:27,250 --> 00:05:30,130
concerns we have dedicate front and

00:05:28,600 --> 00:05:32,470
dedicated back and with communication

00:05:30,130 --> 00:05:34,890
going on in between we use HTTP API is

00:05:32,470 --> 00:05:38,110
restful graph QL you name it and we

00:05:34,890 --> 00:05:39,640
talked a lot of third-party applications

00:05:38,110 --> 00:05:41,650
so a lot of communication is going on

00:05:39,640 --> 00:05:44,290
nowadays it's not just the single server

00:05:41,650 --> 00:05:45,880
hosting your home application and also

00:05:44,290 --> 00:05:47,530
you have you might have some live data

00:05:45,880 --> 00:05:50,320
you might have CLI tools such as

00:05:47,530 --> 00:05:51,820
composer or PHP unit this wasn't really

00:05:50,320 --> 00:05:54,790
a thing in the nineties but nowadays

00:05:51,820 --> 00:05:58,180
it's pretty much everywhere and this

00:05:54,790 --> 00:06:00,220
talk I want to focus on these life data

00:05:58,180 --> 00:06:03,250
examples how can we use it

00:06:00,220 --> 00:06:03,850
and one common idea is let's just use

00:06:03,250 --> 00:06:08,800
nodejs

00:06:03,850 --> 00:06:10,600
and this is a PHP conference but let's

00:06:08,800 --> 00:06:12,520
be honest it's a good fit you can use

00:06:10,600 --> 00:06:15,040
nodejs if you are happy with nodejs

00:06:12,520 --> 00:06:17,320
go with it I don't mind it's good it's a

00:06:15,040 --> 00:06:19,660
nice project it has very interesting

00:06:17,320 --> 00:06:22,630
concepts it has a huge ecosystem of

00:06:19,660 --> 00:06:24,310
third power libraries so you can pretty

00:06:22,630 --> 00:06:29,230
much build everything you don't have to

00:06:24,310 --> 00:06:31,600
build anything from scratch and but then

00:06:29,230 --> 00:06:34,419
again there's this thing called NPM

00:06:31,600 --> 00:06:36,550
install and I mean I don't really want

00:06:34,419 --> 00:06:39,789
to go into the details but we all know

00:06:36,550 --> 00:06:41,710
keeping an NPM installation or project

00:06:39,789 --> 00:06:43,720
stable over a longer period of time can

00:06:41,710 --> 00:06:47,020
be tricky I'm not saying it's impossible

00:06:43,720 --> 00:06:49,120
or well but it's a different ecosystem

00:06:47,020 --> 00:06:51,069
than PHP it has many problems that PHP

00:06:49,120 --> 00:06:52,690
doesn't have in its ecosystem it's a

00:06:51,069 --> 00:06:58,840
very huge ecosystem it's all it's also

00:06:52,690 --> 00:07:01,449
very fragile so if you guys use node.js

00:06:58,840 --> 00:07:02,620
what I always try to get across here is

00:07:01,449 --> 00:07:03,840
if you just take a look at the word

00:07:02,620 --> 00:07:06,610
nodejs

00:07:03,840 --> 00:07:08,319
it's okay to use Noches but also if you

00:07:06,610 --> 00:07:09,819
look really close at the name what i

00:07:08,319 --> 00:07:12,310
always wonder and I'm really sorry if

00:07:09,819 --> 00:07:15,810
you guys like nodejs or I'll off with it

00:07:12,310 --> 00:07:19,330
but the name literally says no js' and

00:07:15,810 --> 00:07:21,880
this is what I suggest today let's see

00:07:19,330 --> 00:07:24,210
if we can avoid using javascript and do

00:07:21,880 --> 00:07:26,440
the same thing in a different language

00:07:24,210 --> 00:07:27,969
and of course which language would we

00:07:26,440 --> 00:07:29,949
use of course we would use everybody's

00:07:27,969 --> 00:07:31,509
favorite language and this joke is

00:07:29,949 --> 00:07:33,819
really hard to tell on a non PHP

00:07:31,509 --> 00:07:35,949
conference but I think nobody even laugh

00:07:33,819 --> 00:07:38,050
about it on a PHP conference so let's

00:07:35,949 --> 00:07:40,930
use everybody's favorite language PHP

00:07:38,050 --> 00:07:43,150
because honestly it gets the job done

00:07:40,930 --> 00:07:45,880
we've seen this we all use PHP and ever

00:07:43,150 --> 00:07:47,409
in our everyday work it has very

00:07:45,880 --> 00:07:50,259
widespread usage so it's pretty much

00:07:47,409 --> 00:07:52,900
everywhere and also to be honest if PHP

00:07:50,259 --> 00:07:55,750
can do it every other language should be

00:07:52,900 --> 00:07:57,490
able to do it so what I want to get

00:07:55,750 --> 00:07:59,139
across here it's it's not really about

00:07:57,490 --> 00:08:00,880
the language it's more about what you

00:07:59,139 --> 00:08:05,520
can do with it and how you use it

00:08:00,880 --> 00:08:05,520
so let's interact

00:08:08,409 --> 00:08:14,709
okay so we've briefly mentioned react

00:08:12,580 --> 00:08:18,219
before but in this talk what I want to

00:08:14,709 --> 00:08:20,319
talk about is really beating and when

00:08:18,219 --> 00:08:23,319
people who are react and react with me I

00:08:20,319 --> 00:08:24,909
want to make sure that you understand

00:08:23,319 --> 00:08:26,739
this is not the other react as some

00:08:24,909 --> 00:08:29,919
people might call it but to me it's

00:08:26,739 --> 00:08:32,379
actually the real react because honestly

00:08:29,919 --> 00:08:34,329
honestly we had the name first a few

00:08:32,379 --> 00:08:36,490
years before Facebook came but well

00:08:34,329 --> 00:08:39,029
Facebook has slightly bigger marketing

00:08:36,490 --> 00:08:41,649
budget than our open source project so

00:08:39,029 --> 00:08:44,680
yeah time will tell if people start

00:08:41,649 --> 00:08:46,899
calling this the real react so you

00:08:44,680 --> 00:08:48,339
should keep this in mind okay if you

00:08:46,899 --> 00:08:49,540
want to learn all about the details of

00:08:48,339 --> 00:08:51,129
our wreckage but you can always check

00:08:49,540 --> 00:08:52,779
out the home page and today I'm just

00:08:51,129 --> 00:08:55,810
going to focus on on some particular

00:08:52,779 --> 00:08:58,120
examples so a quick introduction what is

00:08:55,810 --> 00:09:00,519
react in short words read PHP is

00:08:58,120 --> 00:09:02,500
non-blocking i/o it's event-driven and

00:09:00,519 --> 00:09:04,300
it's asynchronous so these are all the

00:09:02,500 --> 00:09:07,410
bus words that you have to care about

00:09:04,300 --> 00:09:10,300
and in other words it's 100% pure PHP

00:09:07,410 --> 00:09:12,430
and isin it requires no extension so you

00:09:10,300 --> 00:09:14,560
can use it on any installation and also

00:09:12,430 --> 00:09:16,750
it's no magic which means you might have

00:09:14,560 --> 00:09:19,750
to do something slightly different in

00:09:16,750 --> 00:09:22,120
order to take advantage of it so what

00:09:19,750 --> 00:09:23,649
does that mean let's take a look the

00:09:22,120 --> 00:09:26,350
idea behind reg feature is actually

00:09:23,649 --> 00:09:28,509
quite simple so it's really simple the

00:09:26,350 --> 00:09:31,170
idea is calculations are very fast so

00:09:28,509 --> 00:09:33,250
your CPU is very fast but in comparison

00:09:31,170 --> 00:09:35,230
whenever you're doing an input up in

00:09:33,250 --> 00:09:38,649
operation it's very slow in comparison

00:09:35,230 --> 00:09:41,649
and the problem really is input/output

00:09:38,649 --> 00:09:42,939
is everywhere so for example it's kind

00:09:41,649 --> 00:09:44,560
of obvious nowadays we have these

00:09:42,939 --> 00:09:47,439
requires when we talk to a different

00:09:44,560 --> 00:09:49,389
third party API whatever protocol we use

00:09:47,439 --> 00:09:51,009
but it's still sending something across

00:09:49,389 --> 00:09:53,319
the network and we know this takes some

00:09:51,009 --> 00:09:55,569
time for example also when we talk to

00:09:53,319 --> 00:09:58,029
our local database if it's in a remote

00:09:55,569 --> 00:09:59,709
data center or our own host it's still

00:09:58,029 --> 00:10:01,149
communication with this database so we

00:09:59,709 --> 00:10:02,649
have to wait for this and we know the

00:10:01,149 --> 00:10:04,569
database might be slow depending on how

00:10:02,649 --> 00:10:07,750
much data and what kind of queries sent

00:10:04,569 --> 00:10:09,100
and also when we talk to the file system

00:10:07,750 --> 00:10:11,709
and we might not might not even notice

00:10:09,100 --> 00:10:13,540
for example we use section files PHP is

00:10:11,709 --> 00:10:14,920
default handling it will store files on

00:10:13,540 --> 00:10:17,589
file system it's still input/output

00:10:14,920 --> 00:10:19,870
operations and even if we try to avoid

00:10:17,589 --> 00:10:21,820
many of these things by using a caching

00:10:19,870 --> 00:10:23,770
deeming such as reddit or memcache

00:10:21,820 --> 00:10:25,780
it's still input-output to the caching

00:10:23,770 --> 00:10:27,610
daemon I mean the caching daemon might

00:10:25,780 --> 00:10:30,850
be fast but it's still input/output

00:10:27,610 --> 00:10:32,770
operations and just so you can get an

00:10:30,850 --> 00:10:34,930
understanding don't worry you have don't

00:10:32,770 --> 00:10:36,550
have to see every single number but the

00:10:34,930 --> 00:10:38,170
basic idea is well you can see at the

00:10:36,550 --> 00:10:40,330
top this is what happens inside your

00:10:38,170 --> 00:10:42,760
CPUs so this is really fast its measured

00:10:40,330 --> 00:10:45,220
in sub nanoseconds and when you send

00:10:42,760 --> 00:10:47,500
something across the ocean this is a

00:10:45,220 --> 00:10:50,350
whole different magnitude right it's

00:10:47,500 --> 00:10:53,710
it's taking way longer millions of times

00:10:50,350 --> 00:10:55,390
longer and this is why input/output

00:10:53,710 --> 00:10:57,370
operations are so slow and it's really

00:10:55,390 --> 00:10:58,750
it's not going to not going to change

00:10:57,370 --> 00:11:01,300
anytime soon because this is really

00:10:58,750 --> 00:11:03,220
bound by the speed of light and it's

00:11:01,300 --> 00:11:06,310
unlikely this is going to change anytime

00:11:03,220 --> 00:11:08,800
soon so there's no way to make your data

00:11:06,310 --> 00:11:12,790
travel any faster if it needs the long

00:11:08,800 --> 00:11:15,250
distance and the conclusion here is

00:11:12,790 --> 00:11:17,580
infinite but is slow it's not going to

00:11:15,250 --> 00:11:21,880
change we just have to face this fact

00:11:17,580 --> 00:11:24,070
but why wait I mean we can work with

00:11:21,880 --> 00:11:26,050
this idea and just say okay we accept

00:11:24,070 --> 00:11:28,720
the fact that it is slow but let's just

00:11:26,050 --> 00:11:32,140
do something else instead of waiting and

00:11:28,720 --> 00:11:33,490
this is react in other words you can use

00:11:32,140 --> 00:11:35,890
react page for you to start multiple

00:11:33,490 --> 00:11:37,900
input/output operations such as a file

00:11:35,890 --> 00:11:39,220
download and then you can get

00:11:37,900 --> 00:11:41,020
notification when something interesting

00:11:39,220 --> 00:11:41,680
happens so for example some new data

00:11:41,020 --> 00:11:44,200
arrived

00:11:41,680 --> 00:11:46,120
part of your file arrived and this means

00:11:44,200 --> 00:11:47,740
you don't have to waste any time waiting

00:11:46,120 --> 00:11:51,640
unless of course you want to wait for

00:11:47,740 --> 00:11:53,770
something so this is what react is and

00:11:51,640 --> 00:11:55,570
what react is not it's not black magic

00:11:53,770 --> 00:11:57,460
it's not voodoo so it's not just

00:11:55,570 --> 00:11:58,900
something you magically install and

00:11:57,460 --> 00:11:59,980
everything suddenly becomes 10 times

00:11:58,900 --> 00:12:02,710
faster that's not how it works

00:11:59,980 --> 00:12:06,100
unfortunately and also it's not a new

00:12:02,710 --> 00:12:07,870
framework which means this is not just

00:12:06,100 --> 00:12:09,520
something you installed like like

00:12:07,870 --> 00:12:11,740
symphony as part of your stack and you

00:12:09,520 --> 00:12:14,230
just use it it's something that involves

00:12:11,740 --> 00:12:16,720
a whole you per dig in how you use our

00:12:14,230 --> 00:12:18,250
PHP and your existing application and

00:12:16,720 --> 00:12:20,440
also it's not the new bus so this is not

00:12:18,250 --> 00:12:22,330
something I invented last weekend this

00:12:20,440 --> 00:12:24,160
is actually that's in production for now

00:12:22,330 --> 00:12:25,810
more than six years and it has millions

00:12:24,160 --> 00:12:28,090
of installations so I think it's

00:12:25,810 --> 00:12:29,350
important for you to know about it and

00:12:28,090 --> 00:12:32,530
see if it makes sense for in the use

00:12:29,350 --> 00:12:34,540
case ok so much for the quick

00:12:32,530 --> 00:12:35,700
introduction now comes the interesting

00:12:34,540 --> 00:12:38,280
part

00:12:35,700 --> 00:12:41,340
how does it look in code what what do

00:12:38,280 --> 00:12:42,900
the core components do so one of the

00:12:41,340 --> 00:12:45,840
first component we have to learn is the

00:12:42,900 --> 00:12:47,430
event loop and as a consumer when you

00:12:45,840 --> 00:12:48,750
first work with the event but first the

00:12:47,430 --> 00:12:50,820
only three pretty much the only thing

00:12:48,750 --> 00:12:53,280
you have to know about it is it's just

00:12:50,820 --> 00:12:54,630
the the core of your application it's

00:12:53,280 --> 00:12:57,000
just there you don't have to care about

00:12:54,630 --> 00:12:58,650
it it's pretty much everywhere other

00:12:57,000 --> 00:13:00,240
means you just create an instant

00:12:58,650 --> 00:13:01,590
instance once you just pass it around

00:13:00,240 --> 00:13:02,820
through your whole application at the

00:13:01,590 --> 00:13:05,580
very end of if you have vacation you

00:13:02,820 --> 00:13:07,800
just run it and in code this might look

00:13:05,580 --> 00:13:09,390
like this just as a quick example so you

00:13:07,800 --> 00:13:10,680
use a factories you created to do

00:13:09,390 --> 00:13:12,330
something in the middle this is the

00:13:10,680 --> 00:13:14,100
interesting part that we're going to

00:13:12,330 --> 00:13:17,280
look at and then you run your

00:13:14,100 --> 00:13:19,320
application what the loop can do from an

00:13:17,280 --> 00:13:20,760
implementer side it has the name for a

00:13:19,320 --> 00:13:22,050
reason because it implements a reactor

00:13:20,760 --> 00:13:25,140
pattern which is also where we got the

00:13:22,050 --> 00:13:27,900
name from and it can you can use it to

00:13:25,140 --> 00:13:31,500
start timers so encode this could look

00:13:27,900 --> 00:13:33,180
like this and this example is it's kind

00:13:31,500 --> 00:13:35,160
of obvious what this would do but still

00:13:33,180 --> 00:13:39,450
let's see if we can run this on the

00:13:35,160 --> 00:13:41,070
command line so we can run this same

00:13:39,450 --> 00:13:42,750
thing we can run it on the command line

00:13:41,070 --> 00:13:46,020
we see hello world which isn't too

00:13:42,750 --> 00:13:48,780
surprising to be honest but what we can

00:13:46,020 --> 00:13:51,630
see is we actually started the word

00:13:48,780 --> 00:13:53,640
world first and then the hello and then

00:13:51,630 --> 00:13:55,650
we can see it actually schedules it in

00:13:53,640 --> 00:13:57,300
the right or because we had this time of

00:13:55,650 --> 00:13:59,940
arrival which is pretty similar to what

00:13:57,300 --> 00:14:04,560
we use in no json or javascript when we

00:13:59,940 --> 00:14:09,960
start an interval so and of course we

00:14:04,560 --> 00:14:13,110
can also start periodic timers so for

00:14:09,960 --> 00:14:15,900
example we can run it like this this is

00:14:13,110 --> 00:14:17,730
going to print a number of outputs and

00:14:15,900 --> 00:14:19,530
eventually it stops because this is what

00:14:17,730 --> 00:14:22,590
I might what my program is supposed to

00:14:19,530 --> 00:14:24,060
do and interestingly we take a look at

00:14:22,590 --> 00:14:24,270
this example we can also see how long is

00:14:24,060 --> 00:14:27,420
it

00:14:24,270 --> 00:14:31,380
is this program going to run we can see

00:14:27,420 --> 00:14:33,450
it the first time awaits for 0.3 seconds

00:14:31,380 --> 00:14:35,700
on the other 1.5 seconds so we can see

00:14:33,450 --> 00:14:37,710
it's not supposed to run for 0.8 seconds

00:14:35,700 --> 00:14:40,050
but it actually only runs for point 0.5

00:14:37,710 --> 00:14:42,300
seconds because this is the maximum time

00:14:40,050 --> 00:14:44,760
interval and once it's ready just exit

00:14:42,300 --> 00:14:45,900
it just stops executing and this is all

00:14:44,760 --> 00:14:48,930
taken care of

00:14:45,900 --> 00:14:52,620
I can also use the event loop to work

00:14:48,930 --> 00:14:54,000
with underlying really little I readable

00:14:52,620 --> 00:14:56,160
and writeable streams which is pretty

00:14:54,000 --> 00:14:58,260
low level so will not get get into this

00:14:56,160 --> 00:15:01,020
because as an alternative we can also

00:14:58,260 --> 00:15:04,649
use a high level IPA API for streaming

00:15:01,020 --> 00:15:06,600
data when we talk about streams if you

00:15:04,649 --> 00:15:08,130
have ever worked with nodejs dreams it's

00:15:06,600 --> 00:15:09,540
pretty much the same idea if we talk

00:15:08,130 --> 00:15:11,040
about a stream it's an abstraction for

00:15:09,540 --> 00:15:12,870
something that is too large to fit into

00:15:11,040 --> 00:15:16,020
memory so for example think about

00:15:12,870 --> 00:15:17,580
downloading a large file if it's just an

00:15:16,020 --> 00:15:20,160
HTML file it probably makes sense to

00:15:17,580 --> 00:15:21,870
store it in memory but if it's a Linux

00:15:20,160 --> 00:15:24,810
image file maybe it doesn't make sense

00:15:21,870 --> 00:15:27,360
to store a gigabyte in memory so usually

00:15:24,810 --> 00:15:29,190
you just put it fraction it into small

00:15:27,360 --> 00:15:31,560
chunks and you just process one chunk at

00:15:29,190 --> 00:15:33,209
a time and this means when we talk about

00:15:31,560 --> 00:15:35,160
streams you can either read from a

00:15:33,209 --> 00:15:36,630
stream such as a download you can write

00:15:35,160 --> 00:15:39,720
two streams such as an upload for

00:15:36,630 --> 00:15:41,310
example or they can be tap like streams

00:15:39,720 --> 00:15:42,600
which means they are both readable and

00:15:41,310 --> 00:15:46,709
writeable such as a network connection

00:15:42,600 --> 00:15:49,620
and if this means this package provides

00:15:46,709 --> 00:15:51,330
a number of interfaces and events and

00:15:49,620 --> 00:15:53,940
for example it could look like this

00:15:51,330 --> 00:15:55,709
which is a pretty simple example is it's

00:15:53,940 --> 00:15:58,230
still doing pretty much the same thing

00:15:55,709 --> 00:16:02,130
that we saw earlier and in this example

00:15:58,230 --> 00:16:03,660
we can see how it reads it reacts to a

00:16:02,130 --> 00:16:06,120
data event on the input stream which is

00:16:03,660 --> 00:16:08,370
what I type on the console and then when

00:16:06,120 --> 00:16:10,920
data arrives it does something and we

00:16:08,370 --> 00:16:13,830
just forward it is to the output stream

00:16:10,920 --> 00:16:21,029
which is our console so again we can

00:16:13,830 --> 00:16:22,589
execute this and now if I type hi I can

00:16:21,029 --> 00:16:24,240
see an uppercase version of the same

00:16:22,589 --> 00:16:26,430
word because this is what my program

00:16:24,240 --> 00:16:28,230
does right now so we can see how we can

00:16:26,430 --> 00:16:30,270
use this to build interactive programs

00:16:28,230 --> 00:16:32,790
for example I could now use some if-else

00:16:30,270 --> 00:16:38,190
statements to maybe run some interactive

00:16:32,790 --> 00:16:40,050
chat BOTS like application and of course

00:16:38,190 --> 00:16:41,880
one of the really powerful things about

00:16:40,050 --> 00:16:43,589
this is this is an abstraction that is

00:16:41,880 --> 00:16:46,260
used throughout reactive HP's whole

00:16:43,589 --> 00:16:47,610
ecosystems so just as an example we

00:16:46,260 --> 00:16:49,649
don't have to get into what every single

00:16:47,610 --> 00:16:51,390
thing here means but you still get the

00:16:49,649 --> 00:16:53,100
idea I think you can read from some

00:16:51,390 --> 00:16:55,800
source dream you pipe it into something

00:16:53,100 --> 00:16:57,600
like unzipping it pipe it into something

00:16:55,800 --> 00:16:59,040
like filtering some bad words from it

00:16:57,600 --> 00:17:00,660
and then forwarding it to a destination

00:16:59,040 --> 00:17:02,850
and this makes it a really powerful

00:17:00,660 --> 00:17:06,799
feature because this is used throughout

00:17:02,850 --> 00:17:06,799
whole ecosystem of create PHP components

00:17:06,890 --> 00:17:11,039
yes so much for streams and one of the

00:17:09,870 --> 00:17:13,289
things that makes dreams more

00:17:11,039 --> 00:17:15,329
interesting is you know to actually talk

00:17:13,289 --> 00:17:17,250
to it so we can also talk over the

00:17:15,329 --> 00:17:24,600
network which means let's look into

00:17:17,250 --> 00:17:27,240
sockets so sockets if you've never

00:17:24,600 --> 00:17:28,620
worked with with sockets the basic thing

00:17:27,240 --> 00:17:29,490
you have to understand it's pretty much

00:17:28,620 --> 00:17:32,010
just dreams

00:17:29,490 --> 00:17:34,740
but over the network that's it so that

00:17:32,010 --> 00:17:36,390
means you can use it in order to create

00:17:34,740 --> 00:17:39,059
a server that listens for connection to

00:17:36,390 --> 00:17:40,500
receive data or you can create a client

00:17:39,059 --> 00:17:42,360
that connects to remote sites such as

00:17:40,500 --> 00:17:45,090
HTTP send a request to Google for

00:17:42,360 --> 00:17:47,070
example and in this talk I'm going to

00:17:45,090 --> 00:17:48,750
focus just on TCP but rektage fee also

00:17:47,070 --> 00:17:50,190
provides UDP and other low-level

00:17:48,750 --> 00:17:53,820
networking protocols if you really care

00:17:50,190 --> 00:17:56,220
about it and as a quick example this is

00:17:53,820 --> 00:17:58,710
what it could look like this is a sample

00:17:56,220 --> 00:18:01,309
server application written in pure PHP

00:17:58,710 --> 00:18:03,630
with no insulation no external

00:18:01,309 --> 00:18:04,980
extensions and installation required so

00:18:03,630 --> 00:18:07,169
in this example even if you've never

00:18:04,980 --> 00:18:08,640
worked with it you still think you can

00:18:07,169 --> 00:18:10,559
get the idea it's pretty similar to the

00:18:08,640 --> 00:18:12,240
previous example whenever you get a new

00:18:10,559 --> 00:18:14,039
connection you get this connection

00:18:12,240 --> 00:18:15,809
object and on this connection object you

00:18:14,039 --> 00:18:17,700
get a data event so every time somebody

00:18:15,809 --> 00:18:20,250
sends data your way you can react to it

00:18:17,700 --> 00:18:22,320
and in this example I'm just going to

00:18:20,250 --> 00:18:25,380
write the data to my output stream which

00:18:22,320 --> 00:18:27,870
is my console and just to make this

00:18:25,380 --> 00:18:29,700
slightly more interesting the next thing

00:18:27,870 --> 00:18:31,710
we can do this will only send the data

00:18:29,700 --> 00:18:33,690
to the console so nobody is able to see

00:18:31,710 --> 00:18:37,830
it we can of course also receive the

00:18:33,690 --> 00:18:39,210
data and then just iterate over all open

00:18:37,830 --> 00:18:41,370
connection and send it back to every

00:18:39,210 --> 00:18:43,890
connection which means this is pretty

00:18:41,370 --> 00:18:47,400
much all we need for a chat application

00:18:43,890 --> 00:18:51,809
and I want to show you this in the

00:18:47,400 --> 00:18:54,000
command line so again let's just run the

00:18:51,809 --> 00:18:56,400
socket server so now if you have a

00:18:54,000 --> 00:18:59,370
laptop in range you can use telnet to

00:18:56,400 --> 00:19:04,309
connect to this example just use this

00:18:59,370 --> 00:19:04,309
hostname and port 8000 and

00:19:05,350 --> 00:19:09,830
I'm going to connect twice so you can

00:19:07,910 --> 00:19:12,100
actually see how it appears on multiple

00:19:09,830 --> 00:19:12,100
screens

00:19:13,540 --> 00:19:17,540
does anybody have a laptop in range and

00:19:15,800 --> 00:19:20,840
wants to connect or I'm just going to

00:19:17,540 --> 00:19:22,700
chat with myself I'm ok with this and

00:19:20,840 --> 00:19:25,670
there we go see somebody actually sent a

00:19:22,700 --> 00:19:30,200
message and this is gonna be recorded so

00:19:25,670 --> 00:19:35,300
please watch your words and of course I

00:19:30,200 --> 00:19:36,770
can also say something hi I PC I can see

00:19:35,300 --> 00:19:38,179
how it appears on every single window

00:19:36,770 --> 00:19:39,260
and you should also see this on your

00:19:38,179 --> 00:19:41,660
screen if you're connected to this

00:19:39,260 --> 00:19:43,400
application and this is really just a

00:19:41,660 --> 00:19:44,780
few lines of PHP code which is why I

00:19:43,400 --> 00:19:52,010
think this is interesting it's really

00:19:44,780 --> 00:19:53,150
just 5% guys like 10 lines of p3 code ok

00:19:52,010 --> 00:19:54,380
I'll just keep this running in the

00:19:53,150 --> 00:19:57,850
background and we'll see what happens to

00:19:54,380 --> 00:20:02,150
the chat example in the meantime yeah

00:19:57,850 --> 00:20:03,470
enjoy so I'll just open a new tab in the

00:20:02,150 --> 00:20:11,030
meantime but we'll get back to this

00:20:03,470 --> 00:20:12,770
later on ok so much for sockets what

00:20:11,030 --> 00:20:14,240
this means is this is now how we can

00:20:12,770 --> 00:20:16,940
create a server side of course we can

00:20:14,240 --> 00:20:18,650
also connect to an existing server so

00:20:16,940 --> 00:20:21,380
for example we can send an outgoing edge

00:20:18,650 --> 00:20:23,510
to be request like this so we can use

00:20:21,380 --> 00:20:26,000
connector component to connect to Google

00:20:23,510 --> 00:20:28,040
on port 80 which is the HTTP port we

00:20:26,000 --> 00:20:30,530
write something which is an HTTP request

00:20:28,040 --> 00:20:32,660
and whenever we get some data we write

00:20:30,530 --> 00:20:35,960
it somewhere in this example it's just

00:20:32,660 --> 00:20:40,100
going to print the results of HTTP

00:20:35,960 --> 00:20:44,660
response to my console so let's take a

00:20:40,100 --> 00:20:46,250
look and in fact when I execute this I

00:20:44,660 --> 00:20:48,980
just get an uppercase version of

00:20:46,250 --> 00:20:54,220
Google's HTML code which isn't a very

00:20:48,980 --> 00:20:54,220
interesting but what is interesting is

00:20:54,640 --> 00:20:58,730
this is actually pretty low level so

00:20:57,230 --> 00:21:00,980
let's talk about how we use this in

00:20:58,730 --> 00:21:03,860
practice right you don't really want to

00:21:00,980 --> 00:21:05,330
talk plaintext HTTP over socket

00:21:03,860 --> 00:21:08,470
connection this is not how you use your

00:21:05,330 --> 00:21:11,780
existing ecosystem of of libraries

00:21:08,470 --> 00:21:13,520
instead socket are really just an

00:21:11,780 --> 00:21:15,530
implementation detail it's not something

00:21:13,520 --> 00:21:17,300
you have to care about that much really

00:21:15,530 --> 00:21:18,200
most of the time you use higher level

00:21:17,300 --> 00:21:20,720
protocols such as a

00:21:18,200 --> 00:21:22,999
to pee are you talk to your your

00:21:20,720 --> 00:21:25,399
databases which is a binary protocol but

00:21:22,999 --> 00:21:27,619
it's all just a high-level protocols

00:21:25,399 --> 00:21:28,850
building on top of sockets also on top

00:21:27,619 --> 00:21:30,830
of these high-level protocols you

00:21:28,850 --> 00:21:34,309
usually use some high-level parody game

00:21:30,830 --> 00:21:35,779
like restful or are some RPC like things

00:21:34,309 --> 00:21:37,190
so this is what you usually care about

00:21:35,779 --> 00:21:38,960
and it's all obstructed away in

00:21:37,190 --> 00:21:41,389
higher-level applications which you can

00:21:38,960 --> 00:21:44,210
use of course and also this is always or

00:21:41,389 --> 00:21:46,009
often abstracted away in in pre-existing

00:21:44,210 --> 00:21:48,080
software development kids providing you

00:21:46,009 --> 00:21:49,759
api's which just means you get a library

00:21:48,080 --> 00:21:50,929
you just call a function you don't

00:21:49,759 --> 00:21:54,409
really care about what's going on

00:21:50,929 --> 00:21:56,450
underneath now this is how you actually

00:21:54,409 --> 00:21:58,820
use it which means the concepts still

00:21:56,450 --> 00:22:01,090
apply but honestly all the details are

00:21:58,820 --> 00:22:04,279
really hidden from a normal application

00:22:01,090 --> 00:22:08,629
ok so much for sockets now let's get

00:22:04,279 --> 00:22:09,980
into promises what is it promise yeah

00:22:08,629 --> 00:22:14,509
who here's work with promises before

00:22:09,980 --> 00:22:18,139
just raise your hands ok ok round the

00:22:14,509 --> 00:22:19,580
third so quick introductions promise

00:22:18,139 --> 00:22:21,259
when you've never worked with a promise

00:22:19,580 --> 00:22:22,879
we actually use it in one of the

00:22:21,259 --> 00:22:25,489
previous examples and we'll get into it

00:22:22,879 --> 00:22:28,369
why this is so important a promise is a

00:22:25,489 --> 00:22:30,950
placeholder for a result and this means

00:22:28,369 --> 00:22:32,960
whenever you execute an egg and an

00:22:30,950 --> 00:22:34,549
operation instead of waiting for the

00:22:32,960 --> 00:22:36,470
result you just get a placeholder and

00:22:34,549 --> 00:22:38,330
this you can use this placeholder in

00:22:36,470 --> 00:22:40,100
order to be notified when the result is

00:22:38,330 --> 00:22:42,619
ready which means this placeholder can

00:22:40,100 --> 00:22:45,049
be in three different states essentially

00:22:42,619 --> 00:22:46,549
which is just a short version here which

00:22:45,049 --> 00:22:48,590
means it can either be still pending

00:22:46,549 --> 00:22:50,749
when it's not ready eventually we'll get

00:22:48,590 --> 00:22:52,220
full filled with a successful result or

00:22:50,749 --> 00:22:54,950
it might be rejected in case an

00:22:52,220 --> 00:22:56,450
exception of course and this is really

00:22:54,950 --> 00:23:00,590
all you have to care about when you're

00:22:56,450 --> 00:23:01,940
dealing with promises promises api's can

00:23:00,590 --> 00:23:03,649
look like this if you've ever worked

00:23:01,940 --> 00:23:05,779
with promises in JavaScript or pretty

00:23:03,649 --> 00:23:08,090
much any other language you will feel

00:23:05,779 --> 00:23:11,090
immediately familiar with it because you

00:23:08,090 --> 00:23:14,539
just use the then function to register

00:23:11,090 --> 00:23:16,820
to it so this means it's you no longer

00:23:14,539 --> 00:23:19,460
tell but ask for something you say when

00:23:16,820 --> 00:23:21,049
this is ready then call my process

00:23:19,460 --> 00:23:22,730
function in this example which would be

00:23:21,049 --> 00:23:26,239
just a function you can also hook in a

00:23:22,730 --> 00:23:28,399
callback function or class method if you

00:23:26,239 --> 00:23:29,749
want and you can either say the first

00:23:28,399 --> 00:23:31,039
argument is what happens when it's

00:23:29,749 --> 00:23:31,820
successful in the second argument you

00:23:31,039 --> 00:23:34,059
can use when

00:23:31,820 --> 00:23:36,470
unsuccessful so in this case when it's

00:23:34,059 --> 00:23:38,239
successfully done you process the result

00:23:36,470 --> 00:23:41,389
when it fails you just bar down the

00:23:38,239 --> 00:23:42,470
exception trace or something and again

00:23:41,389 --> 00:23:44,450
this is just the introduction for

00:23:42,470 --> 00:23:47,090
promise API so let's see how we can

00:23:44,450 --> 00:23:48,649
actually use it when we use this in an

00:23:47,090 --> 00:23:51,289
actual application we can use it like

00:23:48,649 --> 00:23:52,940
this we've seen how we can use low-level

00:23:51,289 --> 00:23:55,879
circuit components to send an HTTP

00:23:52,940 --> 00:23:58,070
request but of course there's also an

00:23:55,879 --> 00:23:59,600
HTTP request so this is a pretty common

00:23:58,070 --> 00:24:02,419
requirement so of course there's an

00:23:59,600 --> 00:24:03,950
existing application and this is what it

00:24:02,419 --> 00:24:06,409
looks like if you've ever worked with

00:24:03,950 --> 00:24:08,299
ghazal or bus it's it's pretty much the

00:24:06,409 --> 00:24:10,970
same thing you have get method which

00:24:08,299 --> 00:24:13,159
means you send a get HTTP request you

00:24:10,970 --> 00:24:14,690
pass it in your I and going to send a

00:24:13,159 --> 00:24:17,809
request and eventually you get back a

00:24:14,690 --> 00:24:19,729
response and in this example I say when

00:24:17,809 --> 00:24:23,739
this response is ready then use this

00:24:19,729 --> 00:24:26,059
body and write it to the output and of

00:24:23,739 --> 00:24:32,989
course we can execute this this is just

00:24:26,059 --> 00:24:34,820
a few lines of code it's and of course

00:24:32,989 --> 00:24:38,210
again it's just going to print the same

00:24:34,820 --> 00:24:40,340
thing so it's not it's a high level of

00:24:38,210 --> 00:24:42,679
abstraction so we don't have to care

00:24:40,340 --> 00:24:44,720
about all the underlying details I can

00:24:42,679 --> 00:24:50,690
also measure how long it takes so in

00:24:44,720 --> 00:24:54,169
this example it takes around yeah point

00:24:50,690 --> 00:24:56,690
1 3 seconds so I can execute around 8

00:24:54,169 --> 00:24:59,389
requests per seconds here on this Wi-Fi

00:24:56,690 --> 00:25:01,669
connection and really when you only use

00:24:59,389 --> 00:25:03,289
a single application it's not really

00:25:01,669 --> 00:25:05,450
interesting to use a promise but of

00:25:03,289 --> 00:25:07,549
course if we can't execute this

00:25:05,450 --> 00:25:09,559
operation once we can of course also put

00:25:07,549 --> 00:25:12,409
this into loops so just as an example we

00:25:09,559 --> 00:25:13,820
can just wrap this in a for loop and in

00:25:12,409 --> 00:25:16,309
this example I'm just going to send 3

00:25:13,820 --> 00:25:17,899
requests and I think there are many

00:25:16,309 --> 00:25:21,139
application where it makes sense to do

00:25:17,899 --> 00:25:24,759
some things multiple times and now we

00:25:21,139 --> 00:25:27,649
can run the same thing again no it's

00:25:24,759 --> 00:25:28,789
this one now if you look real close at

00:25:27,649 --> 00:25:31,909
the output you'll see that it actually

00:25:28,789 --> 00:25:34,249
is the body three times and what's

00:25:31,909 --> 00:25:37,729
really interesting now is if we measure

00:25:34,249 --> 00:25:40,879
how long this takes we can see that it's

00:25:37,729 --> 00:25:42,980
pretty much the same time so we kind of

00:25:40,879 --> 00:25:44,869
expect this to take three times as long

00:25:42,980 --> 00:25:45,799
but it's really one of the powerful

00:25:44,869 --> 00:25:47,570
features here is this

00:25:45,799 --> 00:25:48,889
is all asynchronous non-blocking and

00:25:47,570 --> 00:25:50,450
input/output operation this is really

00:25:48,889 --> 00:25:52,610
what reactive HP is good about this is

00:25:50,450 --> 00:25:54,679
one of the core features of reg feature

00:25:52,610 --> 00:25:56,480
you can pretty much do any number of

00:25:54,679 --> 00:25:58,759
things at the same time as long as

00:25:56,480 --> 00:26:00,200
input/output operations and I think this

00:25:58,759 --> 00:26:02,739
is a really powerful feature because

00:26:00,200 --> 00:26:06,499
this is again used through old reg PDP's

00:26:02,739 --> 00:26:08,960
whole ecosystem and you can use this to

00:26:06,499 --> 00:26:10,340
send a get request or you can send HTTP

00:26:08,960 --> 00:26:11,899
requests you can't talk to your database

00:26:10,340 --> 00:26:13,100
we have adapters from any existing

00:26:11,899 --> 00:26:15,200
database you can talk to your file

00:26:13,100 --> 00:26:16,639
system pretty much any anything and you

00:26:15,200 --> 00:26:19,519
can do this at the same time without

00:26:16,639 --> 00:26:21,919
having to wait for it and this example I

00:26:19,519 --> 00:26:24,169
just have to wait for the later or for

00:26:21,919 --> 00:26:29,179
the slowest response and this when my

00:26:24,169 --> 00:26:31,100
program exits so this can be huge a

00:26:29,179 --> 00:26:33,529
difference in performance depending on

00:26:31,100 --> 00:26:37,369
how much remote parties a third party to

00:26:33,529 --> 00:26:40,580
talk to and again promises in practice

00:26:37,369 --> 00:26:42,710
means promises are everywhere so just as

00:26:40,580 --> 00:26:44,690
an example we've actually seen how it's

00:26:42,710 --> 00:26:45,830
used in socket it's used in the HTTP

00:26:44,690 --> 00:26:48,259
client we can use it for higher-level

00:26:45,830 --> 00:26:50,090
applications such as using a pectus api

00:26:48,259 --> 00:26:52,340
just as an example we can also talk to

00:26:50,090 --> 00:26:54,769
Redis for example we can talk to our

00:26:52,340 --> 00:26:58,850
database it's pretty much everywhere so

00:26:54,769 --> 00:27:01,309
this list goes on and on so so much for

00:26:58,850 --> 00:27:03,409
promises we've we've now seen how we can

00:27:01,309 --> 00:27:05,929
do multiple things at the same time now

00:27:03,409 --> 00:27:07,669
let's see how we can use this in our

00:27:05,929 --> 00:27:15,049
HTTP setup because we want to build a

00:27:07,669 --> 00:27:17,330
real-time system after all so one of the

00:27:15,049 --> 00:27:19,070
first thing before we get into HD

00:27:17,330 --> 00:27:21,169
streaming is I think we have to get a

00:27:19,070 --> 00:27:23,029
short introduction into HTTP we've seen

00:27:21,169 --> 00:27:25,039
this before in the socket level but

00:27:23,029 --> 00:27:26,389
essentially HTTP just means you create a

00:27:25,039 --> 00:27:28,549
connection to your remote site so you

00:27:26,389 --> 00:27:31,340
connect to Google and you pretty much

00:27:28,549 --> 00:27:34,249
just send get slash which is your

00:27:31,340 --> 00:27:37,489
resource and this is HTTP 1.1 it's a

00:27:34,249 --> 00:27:39,619
plain text protocol for HTTP 1hp to uses

00:27:37,489 --> 00:27:41,450
slightly more complicated binary

00:27:39,619 --> 00:27:42,799
protocol but the same ideas still apply

00:27:41,450 --> 00:27:46,129
it's just a different way to send these

00:27:42,799 --> 00:27:48,019
messages so you send your request and in

00:27:46,129 --> 00:27:50,239
response you get like something that

00:27:48,019 --> 00:27:52,220
looks like this I have an example I

00:27:50,239 --> 00:27:53,899
stripped off all the headers just to

00:27:52,220 --> 00:27:55,039
focus on the interesting details here so

00:27:53,899 --> 00:27:56,749
for example it could just tell us

00:27:55,039 --> 00:27:59,179
there's a plain response and here's the

00:27:56,749 --> 00:27:59,720
body hello world of course that's not

00:27:59,179 --> 00:28:01,280
what

00:27:59,720 --> 00:28:03,530
will is going to return but it works for

00:28:01,280 --> 00:28:07,880
examples because it fits on a single

00:28:03,530 --> 00:28:09,799
slide okay and of course we also have an

00:28:07,880 --> 00:28:12,559
existing components so we can use react

00:28:09,799 --> 00:28:19,610
PHP to create an HTTP server and let's

00:28:12,559 --> 00:28:21,289
see so we can now execute this and of

00:28:19,610 --> 00:28:23,600
course this is now running an actual

00:28:21,289 --> 00:28:25,580
HTTP server which means how long is the

00:28:23,600 --> 00:28:27,350
HTTP server going to run of course it's

00:28:25,580 --> 00:28:28,730
not supposed to quit which is why this

00:28:27,350 --> 00:28:30,260
program just keeps running in the

00:28:28,730 --> 00:28:33,260
background so you can now use your

00:28:30,260 --> 00:28:36,070
browser to actually access this site so

00:28:33,260 --> 00:28:40,130
if you want to you can use your favorite

00:28:36,070 --> 00:28:47,270
Chrome version to access this site it's

00:28:40,130 --> 00:28:50,659
running on works base again on port 8080

00:28:47,270 --> 00:28:52,909
now this example I'm just going to use

00:28:50,659 --> 00:28:56,570
curl and I get back the expected result

00:28:52,909 --> 00:28:59,510
hello world so this means this is now a

00:28:56,570 --> 00:29:02,210
fully functional h-2b so written in pure

00:28:59,510 --> 00:29:05,330
PHP so I don't have a petty nginx

00:29:02,210 --> 00:29:07,010
installed nothing it's just PHP and I

00:29:05,330 --> 00:29:08,330
think this is really powerful because it

00:29:07,010 --> 00:29:10,309
means we don't have to care about the

00:29:08,330 --> 00:29:13,400
whole ecosystem and this is actually

00:29:10,309 --> 00:29:15,380
surprisingly performant but this is not

00:29:13,400 --> 00:29:17,510
the topic of this talk but I really

00:29:15,380 --> 00:29:19,580
invite you to check out the the

00:29:17,510 --> 00:29:21,440
benchmarks because this is going to be

00:29:19,580 --> 00:29:24,169
much faster than your existing nginx

00:29:21,440 --> 00:29:26,510
application using fpm etc effectively

00:29:24,169 --> 00:29:29,390
run some benchmarks a few years ago

00:29:26,510 --> 00:29:31,340
which means that my single laptop was

00:29:29,390 --> 00:29:37,280
able to outperform the Google Cloud in

00:29:31,340 --> 00:29:39,470
printing hello world yeah which is not

00:29:37,280 --> 00:29:41,419
to say that cloud systems don't make

00:29:39,470 --> 00:29:44,000
sense but maybe you don't have a

00:29:41,419 --> 00:29:48,080
requirement to use such sophisticated

00:29:44,000 --> 00:29:50,299
applications after all so this is what

00:29:48,080 --> 00:29:52,610
HTTP looks like when we talk about HTTP

00:29:50,299 --> 00:29:54,620
streaming it's still pretty much the

00:29:52,610 --> 00:29:57,169
same thing so it means when we talk

00:29:54,620 --> 00:29:59,630
about streaming things it's still HTTP

00:29:57,169 --> 00:30:01,520
right so the same semantics still apply

00:29:59,630 --> 00:30:04,220
we still send a request we still get a

00:30:01,520 --> 00:30:05,980
big get a response so what a streaming

00:30:04,220 --> 00:30:08,570
really mean it means different things

00:30:05,980 --> 00:30:10,909
depending on who you talk to so as an

00:30:08,570 --> 00:30:13,580
example it could mean you stream a

00:30:10,909 --> 00:30:15,769
download right if you download this very

00:30:13,580 --> 00:30:17,269
image file maybe doesn't make sense to

00:30:15,769 --> 00:30:19,039
wait for the whole thing to be ready but

00:30:17,269 --> 00:30:21,019
you you just wait for each chunk to

00:30:19,039 --> 00:30:22,789
arrive and likewise you can also stream

00:30:21,019 --> 00:30:25,519
upload so if you dump if you're

00:30:22,789 --> 00:30:27,049
uploading a very large file maybe it

00:30:25,519 --> 00:30:29,090
makes sense to not store this file in

00:30:27,049 --> 00:30:30,769
memory and just use it as a streaming

00:30:29,090 --> 00:30:32,779
way and we've seen how we can use

00:30:30,769 --> 00:30:34,789
streams on the commitment on the console

00:30:32,779 --> 00:30:37,610
and pretty much any other a high-level

00:30:34,789 --> 00:30:41,210
component and this means this is still

00:30:37,610 --> 00:30:43,580
request response so this is what it

00:30:41,210 --> 00:30:45,169
could look like in in red PHP we've seen

00:30:43,580 --> 00:30:47,359
how we can use the HTTP so and this

00:30:45,169 --> 00:30:49,909
example I'm still going to use the HTTP

00:30:47,359 --> 00:30:51,799
server and if I hit a certain path so

00:30:49,909 --> 00:30:54,619
the root path is this example I'm just

00:30:51,799 --> 00:30:55,549
going to return the same response there

00:30:54,619 --> 00:31:00,379
now itself

00:30:55,549 --> 00:31:02,450
I'm actually using a string value I now

00:31:00,379 --> 00:31:03,739
use a stream and this stream is just a

00:31:02,450 --> 00:31:06,200
through stream and you can see how we

00:31:03,739 --> 00:31:07,879
use a periodic timer so this like the

00:31:06,200 --> 00:31:09,679
combination of the previous examples I

00:31:07,879 --> 00:31:11,720
just use a periodic timer to send

00:31:09,679 --> 00:31:14,210
something to the stream every once in a

00:31:11,720 --> 00:31:15,649
while and after a certain time I want to

00:31:14,210 --> 00:31:16,909
cancel this because I don't want the

00:31:15,649 --> 00:31:21,019
stream to go on forever

00:31:16,909 --> 00:31:23,210
and now what's interesting here is this

00:31:21,019 --> 00:31:24,619
is really just a plain text example so

00:31:23,210 --> 00:31:26,389
of course this is just going to print

00:31:24,619 --> 00:31:28,609
hello hello hello hello hello

00:31:26,389 --> 00:31:31,159
which is not that interesting but let's

00:31:28,609 --> 00:31:36,830
let's see why I think this can be a very

00:31:31,159 --> 00:31:39,200
powerful feature so now instead of on

00:31:36,830 --> 00:31:42,230
the same example now you just use curl

00:31:39,200 --> 00:31:44,359
and I can see how it prints out hello in

00:31:42,230 --> 00:31:47,090
the given interval and you can of course

00:31:44,359 --> 00:31:48,590
use an actual actual web browser if you

00:31:47,090 --> 00:31:50,989
want you're going to see white page with

00:31:48,590 --> 00:31:52,580
some black font on it and this is just

00:31:50,989 --> 00:31:56,149
everything you need in order to stream

00:31:52,580 --> 00:31:57,980
and what this means is of course in this

00:31:56,149 --> 00:32:00,499
example it's a plain text stream right

00:31:57,980 --> 00:32:02,299
is it's just going to use this through

00:32:00,499 --> 00:32:04,220
stream to send some actual data but

00:32:02,299 --> 00:32:06,070
because dreams are everywhere it also

00:32:04,220 --> 00:32:10,159
means you can talk to pretty much

00:32:06,070 --> 00:32:12,350
anything so instead of using this single

00:32:10,159 --> 00:32:13,639
stream which you have control over this

00:32:12,350 --> 00:32:15,919
could also be something that's coming

00:32:13,639 --> 00:32:18,710
from a remote system so for example you

00:32:15,919 --> 00:32:20,149
could have stream giving you all the

00:32:18,710 --> 00:32:22,279
details that happen on reddit so for

00:32:20,149 --> 00:32:24,379
example you've read as pub/sub channels

00:32:22,279 --> 00:32:26,179
or if you use an event-driven system

00:32:24,379 --> 00:32:27,350
like WebSocket connection or something

00:32:26,179 --> 00:32:29,179
you can use a

00:32:27,350 --> 00:32:31,130
assisting stream and you process this

00:32:29,179 --> 00:32:33,710
data as soon as it arrives and you can

00:32:31,130 --> 00:32:36,110
send this off over HTTP with just the

00:32:33,710 --> 00:32:39,020
plain text components so you don't have

00:32:36,110 --> 00:32:43,520
to set up any any fancy measures to

00:32:39,020 --> 00:32:45,169
access this data so and of course when

00:32:43,520 --> 00:32:47,030
we talk about HTTP streaming there are

00:32:45,169 --> 00:32:50,900
ways to work around it so long polling

00:32:47,030 --> 00:32:52,580
or comet might be away which is

00:32:50,900 --> 00:32:54,860
something you probably shouldn't be

00:32:52,580 --> 00:32:59,510
using nowadays anymore but that's how

00:32:54,860 --> 00:33:01,039
you can use HTTP spring so this was the

00:32:59,510 --> 00:33:02,900
introduction to HB screaming so let's

00:33:01,039 --> 00:33:04,640
see how we can actually use this in our

00:33:02,900 --> 00:33:07,220
browser because I don't want to see a

00:33:04,640 --> 00:33:09,980
white page with some black text

00:33:07,220 --> 00:33:12,169
appearing on it I want to actually work

00:33:09,980 --> 00:33:16,370
with the data and react to it on my

00:33:12,169 --> 00:33:20,809
front end okay so who has worked with

00:33:16,370 --> 00:33:27,230
event source before hands up know has

00:33:20,809 --> 00:33:29,120
interesting not a single one so what I

00:33:27,230 --> 00:33:31,850
find interesting is when we talk about

00:33:29,120 --> 00:33:35,150
event source the alternative name is

00:33:31,850 --> 00:33:39,370
server sent events anybody yeah single

00:33:35,150 --> 00:33:41,630
hand finally ok so what's interesting is

00:33:39,370 --> 00:33:43,159
this is something that's built into your

00:33:41,630 --> 00:33:44,630
browser runs the same thing that that

00:33:43,159 --> 00:33:46,280
web socket was invented and pretty much

00:33:44,630 --> 00:33:48,200
everybody's use web sockets but for some

00:33:46,280 --> 00:33:50,120
reason nobody's using event source so

00:33:48,200 --> 00:33:52,429
the idea behind events was is really

00:33:50,120 --> 00:33:54,740
simple it's still normal HTTP so you

00:33:52,429 --> 00:33:57,530
have a normal request response cycle but

00:33:54,740 --> 00:33:59,690
you have a client API on your browser so

00:33:57,530 --> 00:34:01,909
every recent browser which means every

00:33:59,690 --> 00:34:05,990
single vendor except everything that

00:34:01,909 --> 00:34:08,210
comes from redmond supports it in case

00:34:05,990 --> 00:34:11,440
you want to use Microsoft Internet

00:34:08,210 --> 00:34:13,429
Explorer etch you can use a polyfill and

00:34:11,440 --> 00:34:14,840
this means this is built into your

00:34:13,429 --> 00:34:17,060
browser and this is what it looks like

00:34:14,840 --> 00:34:18,800
essentially it's normal HTTP so you send

00:34:17,060 --> 00:34:20,659
a request and what you get back it's

00:34:18,800 --> 00:34:23,090
just a normal HTTP response we've seen

00:34:20,659 --> 00:34:25,340
this before it's 200 ok it has a special

00:34:23,090 --> 00:34:28,460
content type and now you get something

00:34:25,340 --> 00:34:30,790
that just says in plain text data Colin

00:34:28,460 --> 00:34:33,080
and then there's your data so it means

00:34:30,790 --> 00:34:35,030
this is how you can get some data and

00:34:33,080 --> 00:34:36,560
the interesting thing is this connection

00:34:35,030 --> 00:34:38,179
actually keeps open so it means at a

00:34:36,560 --> 00:34:40,220
later point in time or the same

00:34:38,179 --> 00:34:41,010
connection you might get another data

00:34:40,220 --> 00:34:42,480
event

00:34:41,010 --> 00:34:44,940
and I think this is where it gets

00:34:42,480 --> 00:34:46,590
interesting because this means you know

00:34:44,940 --> 00:34:48,330
how have a persistent connection to your

00:34:46,590 --> 00:34:50,700
remote server and can use this

00:34:48,330 --> 00:34:52,590
connection to send any kind of data and

00:34:50,700 --> 00:34:54,690
what I also find interesting from a

00:34:52,590 --> 00:34:56,490
networking perspective here is this is

00:34:54,690 --> 00:34:58,080
normal HTTP right you don't have to

00:34:56,490 --> 00:35:00,030
learn a different protocol it's it's not

00:34:58,080 --> 00:35:02,910
binary format like WebSockets you don't

00:35:00,030 --> 00:35:05,760
have to read 20 page RFC it's really

00:35:02,910 --> 00:35:08,010
just prepending data : in front of it so

00:35:05,760 --> 00:35:10,320
this shouldn't be too hard and of course

00:35:08,010 --> 00:35:12,930
it's not we can use this to police our

00:35:10,320 --> 00:35:14,790
own example so we've seen how we can use

00:35:12,930 --> 00:35:18,119
streaming data to just send something to

00:35:14,790 --> 00:35:20,010
curl or a plain text HTTP connection and

00:35:18,119 --> 00:35:21,930
of course we can just wrap this in a

00:35:20,010 --> 00:35:24,300
through stream in this example it just

00:35:21,930 --> 00:35:26,520
means this through stream has a filter

00:35:24,300 --> 00:35:28,260
function so it modifies the data while

00:35:26,520 --> 00:35:30,750
it flows through it and just prefixes

00:35:28,260 --> 00:35:32,550
your data with this data Colin thing so

00:35:30,750 --> 00:35:34,560
it means every time you write something

00:35:32,550 --> 00:35:36,630
something to the body it actually prints

00:35:34,560 --> 00:35:44,790
it as data Colin and then your actual

00:35:36,630 --> 00:35:46,080
data I'm not listening mine so this is

00:35:44,790 --> 00:35:51,770
what it could look like and we can

00:35:46,080 --> 00:35:57,080
execute this on the command line and

00:35:51,770 --> 00:35:57,080
there we go which means we can now use

00:35:57,200 --> 00:36:02,240
our web browser to actually access this

00:35:59,970 --> 00:36:02,240
site

00:36:09,210 --> 00:36:16,390
on port 8080 which means you can also

00:36:13,360 --> 00:36:18,850
use your favorite web browser to access

00:36:16,390 --> 00:36:23,200
this site you can also check out the

00:36:18,850 --> 00:36:26,470
source code which is really just a very

00:36:23,200 --> 00:36:28,030
simple file so by no means I don't

00:36:26,470 --> 00:36:29,350
consider myself a JavaScript expert but

00:36:28,030 --> 00:36:32,050
I think this is how you use JavaScript

00:36:29,350 --> 00:36:33,760
nowadays you don't have any external

00:36:32,050 --> 00:36:35,170
dependencies nothing you just use this

00:36:33,760 --> 00:36:37,420
event source object you just pass in a

00:36:35,170 --> 00:36:39,100
URL which is your your side that streams

00:36:37,420 --> 00:36:40,690
the data and whenever it reports a

00:36:39,100 --> 00:36:42,880
message you do something with this and

00:36:40,690 --> 00:36:45,130
this example I'm just going to append it

00:36:42,880 --> 00:36:48,130
to the body so it means if you have this

00:36:45,130 --> 00:36:50,170
open you're going to see every single

00:36:48,130 --> 00:36:52,570
message that this server emits but how

00:36:50,170 --> 00:36:54,820
do you emit stuff to the server in this

00:36:52,570 --> 00:36:56,260
example my server is using the existing

00:36:54,820 --> 00:36:57,400
chat application that is still running

00:36:56,260 --> 00:36:59,800
in the background which means if you

00:36:57,400 --> 00:37:02,590
send something to the chat example it

00:36:59,800 --> 00:37:08,260
should appear in this window and we can

00:37:02,590 --> 00:37:20,710
just try this so it means if I use

00:37:08,260 --> 00:37:22,060
telnet on port 8000 and just type hi now

00:37:20,710 --> 00:37:23,740
you can see how it appears in the

00:37:22,060 --> 00:37:26,080
background and this is pretty much

00:37:23,740 --> 00:37:28,780
immediately because this is all reactive

00:37:26,080 --> 00:37:30,460
and this is just a single PHP file which

00:37:28,780 --> 00:37:32,860
is why I think this is a really powerful

00:37:30,460 --> 00:37:34,360
feature so you don't have any external

00:37:32,860 --> 00:37:36,250
things and yeah this is still a live

00:37:34,360 --> 00:37:40,060
demo so you can mess with this if you

00:37:36,250 --> 00:37:41,500
want to ok so again I'll just keep this

00:37:40,060 --> 00:37:43,240
running now you can use this as a chat

00:37:41,500 --> 00:37:45,490
example and this example what I wanted

00:37:43,240 --> 00:37:47,860
to focus on it's just the bare bare

00:37:45,490 --> 00:37:51,250
basics here of course this is not how

00:37:47,860 --> 00:37:52,510
you would use it in a more more useful

00:37:51,250 --> 00:37:54,850
application you of course you wouldn't

00:37:52,510 --> 00:37:56,350
use a chat exam or just printing

00:37:54,850 --> 00:37:58,420
something to a white page with some

00:37:56,350 --> 00:37:59,950
black font of course you would use some

00:37:58,420 --> 00:38:01,360
JavaScript front-end process your

00:37:59,950 --> 00:38:03,340
messages right we've seen how we can use

00:38:01,360 --> 00:38:06,790
this message event on on the JavaScript

00:38:03,340 --> 00:38:09,340
side and of course don't just think of

00:38:06,790 --> 00:38:11,590
it as a chat I think of it as a way to

00:38:09,340 --> 00:38:13,450
transport structured data so instead of

00:38:11,590 --> 00:38:16,030
sending plain text data you could as

00:38:13,450 --> 00:38:17,620
well just send JSON messages and I think

00:38:16,030 --> 00:38:19,120
this can be a really powerful feature if

00:38:17,620 --> 00:38:20,710
you talk about many different

00:38:19,120 --> 00:38:22,630
applications such as

00:38:20,710 --> 00:38:24,579
not defying your users something

00:38:22,630 --> 00:38:28,240
happened on your site a new blog post

00:38:24,579 --> 00:38:30,400
appeared maybe or if you have ecommerce

00:38:28,240 --> 00:38:32,650
system maybe your availability of some

00:38:30,400 --> 00:38:34,569
things change so now you have only two

00:38:32,650 --> 00:38:36,130
items in your stock you can use this as

00:38:34,569 --> 00:38:39,450
a way to transport any kind of

00:38:36,130 --> 00:38:41,349
structured data in a really simple way

00:38:39,450 --> 00:38:52,329
and let's keep this running in the

00:38:41,349 --> 00:38:55,059
background so get back to the slides so

00:38:52,329 --> 00:38:58,510
this is a fully functional HTTP server

00:38:55,059 --> 00:39:00,460
in a single PHP file and of course what

00:38:58,510 --> 00:39:02,170
this means this is just a very quick

00:39:00,460 --> 00:39:03,849
introduction to there are many many

00:39:02,170 --> 00:39:05,710
third-party projects you can use with

00:39:03,849 --> 00:39:08,589
refugee I encourage you to check out the

00:39:05,710 --> 00:39:10,329
existing wiki which we use to list some

00:39:08,589 --> 00:39:13,270
of the application it currently has I

00:39:10,329 --> 00:39:16,000
think 150 projects listed on this page

00:39:13,270 --> 00:39:17,740
and on packages we have more than 300

00:39:16,000 --> 00:39:19,990
projects building on recreative e which

00:39:17,740 --> 00:39:22,030
i think is really really interesting so

00:39:19,990 --> 00:39:24,520
just check it out if you want to see how

00:39:22,030 --> 00:39:26,710
you can talk to your remote systems if

00:39:24,520 --> 00:39:27,849
you don't want to use plain text chat

00:39:26,710 --> 00:39:32,770
maybe can use one of the existing

00:39:27,849 --> 00:39:35,380
components okay and of course it means I

00:39:32,770 --> 00:39:36,730
would I would love to introduce so many

00:39:35,380 --> 00:39:38,530
more different application that I can

00:39:36,730 --> 00:39:40,059
use and I always use this screenshot

00:39:38,530 --> 00:39:41,890
because this is what you can actually do

00:39:40,059 --> 00:39:43,690
with PHP you can also build graphical

00:39:41,890 --> 00:39:46,000
user interface application with just

00:39:43,690 --> 00:39:48,309
plain PHP if you want to and I really

00:39:46,000 --> 00:39:50,140
think is this how you want to proceed I

00:39:48,309 --> 00:39:52,180
think this is really representative of

00:39:50,140 --> 00:39:54,730
how you can use it there are so many

00:39:52,180 --> 00:39:56,559
ways how we can talk to third but yeah

00:39:54,730 --> 00:39:58,480
any any kind of application if you think

00:39:56,559 --> 00:40:00,280
about it it's really oftentimes just

00:39:58,480 --> 00:40:04,329
sending something to it and receiving

00:40:00,280 --> 00:40:05,770
something from it so let's get to the

00:40:04,329 --> 00:40:08,589
conclusions because we're running out of

00:40:05,770 --> 00:40:11,680
time what I want you to take away from

00:40:08,589 --> 00:40:13,839
it is now can I use react PDP to make my

00:40:11,680 --> 00:40:15,790
website ten tighter a thousand a

00:40:13,839 --> 00:40:17,589
thousand times faster this is a question

00:40:15,790 --> 00:40:19,750
rereceive as the red PHP quite

00:40:17,589 --> 00:40:23,829
frequently and I think this is an

00:40:19,750 --> 00:40:25,450
interesting question and let's just

00:40:23,829 --> 00:40:27,760
think about it for a moment we've seen

00:40:25,450 --> 00:40:30,430
how we can use this to stream on to the

00:40:27,760 --> 00:40:32,650
things at the same time so my answer to

00:40:30,430 --> 00:40:34,510
this question is of course yes you can

00:40:32,650 --> 00:40:38,170
use this if you want to make your

00:40:34,510 --> 00:40:39,550
five thousand times faster but I think

00:40:38,170 --> 00:40:41,740
you're really missing the point

00:40:39,550 --> 00:40:44,950
this is not what we act PHP is about it

00:40:41,740 --> 00:40:46,720
is about doing multiple input/output

00:40:44,950 --> 00:40:49,000
operations at the same time and you have

00:40:46,720 --> 00:40:50,890
if you have an application where you do

00:40:49,000 --> 00:40:52,810
this a lot then it makes a whole lot of

00:40:50,890 --> 00:40:54,280
sense you use direct PHP if you only

00:40:52,810 --> 00:40:55,750
want to use your existing application

00:40:54,280 --> 00:40:56,710
just want to make it faster and you

00:40:55,750 --> 00:41:01,180
don't want to touch any of these

00:40:56,710 --> 00:41:03,610
existing code I don't use really so

00:41:01,180 --> 00:41:06,610
let's recap here what I want you to take

00:41:03,610 --> 00:41:08,320
away way PHP is way faster than you

00:41:06,610 --> 00:41:09,880
probably thought so I encourage you to

00:41:08,320 --> 00:41:12,000
check out the benchmarks it's probably

00:41:09,880 --> 00:41:14,410
going to outperform any of the existing

00:41:12,000 --> 00:41:16,900
architectures this is not how people

00:41:14,410 --> 00:41:18,940
expect PHP to behave so I think this is

00:41:16,900 --> 00:41:21,580
really interesting also far more

00:41:18,940 --> 00:41:23,110
versatile you can use this not just to

00:41:21,580 --> 00:41:24,640
build your next web application but you

00:41:23,110 --> 00:41:26,140
can actually use this to build a command

00:41:24,640 --> 00:41:28,660
line application you can build this to

00:41:26,140 --> 00:41:30,400
run a daemon you can do this you can use

00:41:28,660 --> 00:41:32,320
this to build a database if you want and

00:41:30,400 --> 00:41:35,350
people actually do this this is not just

00:41:32,320 --> 00:41:37,810
something I came up in a in a fever

00:41:35,350 --> 00:41:39,370
dream or something this is how people

00:41:37,810 --> 00:41:42,970
actually use it and it's really powerful

00:41:39,370 --> 00:41:45,100
and it works in production and when we

00:41:42,970 --> 00:41:47,140
talk about react PHP in particular I

00:41:45,100 --> 00:41:49,920
wanted I want you to take away this is a

00:41:47,140 --> 00:41:53,380
real deal it's here to stay it's not

00:41:49,920 --> 00:41:54,760
it's a stable thing you can use it it's

00:41:53,380 --> 00:41:57,820
production-ready people have been using

00:41:54,760 --> 00:41:59,500
this in production for years and if I

00:41:57,820 --> 00:42:01,960
might say this as maintainer of this

00:41:59,500 --> 00:42:04,720
project I think it's awesome and I

00:42:01,960 --> 00:42:07,210
really think it is so I encourage you

00:42:04,720 --> 00:42:08,950
just give it a try try it out and I

00:42:07,210 --> 00:42:11,260
think you should try it out whenever you

00:42:08,950 --> 00:42:12,970
have an application that has to wait for

00:42:11,260 --> 00:42:15,160
something and in particular this means

00:42:12,970 --> 00:42:17,020
whenever you access the network and I

00:42:15,160 --> 00:42:18,940
think many of the existing application

00:42:17,020 --> 00:42:23,560
success in ED work in a way your

00:42:18,940 --> 00:42:25,660
database HTTP you name it so if you need

00:42:23,560 --> 00:42:28,410
any help with this you can check out the

00:42:25,660 --> 00:42:30,850
Yellowbird documentation on our web page

00:42:28,410 --> 00:42:33,100
as an alternative you can also reach out

00:42:30,850 --> 00:42:36,580
to our team on on react PHP you can use

00:42:33,100 --> 00:42:38,890
the red PHP hash or handle and of course

00:42:36,580 --> 00:42:40,210
you can talk to me because did I mention

00:42:38,890 --> 00:42:43,000
on the software engineer and this is

00:42:40,210 --> 00:42:44,530
what I do for a living I'm available so

00:42:43,000 --> 00:42:47,380
if you want to talk about this just

00:42:44,530 --> 00:42:48,190
reach out so thank you for your

00:42:47,380 --> 00:42:49,620
attention and

00:42:48,190 --> 00:42:52,810
that's it

00:42:49,620 --> 00:42:52,810
[Applause]

00:42:53,910 --> 00:43:10,909
[Music]

00:43:07,510 --> 00:43:10,909

YouTube URL: https://www.youtube.com/watch?v=XoDBtz5P8q8


