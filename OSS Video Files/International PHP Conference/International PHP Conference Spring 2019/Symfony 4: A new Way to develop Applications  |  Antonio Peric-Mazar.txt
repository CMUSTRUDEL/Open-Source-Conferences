Title: Symfony 4: A new Way to develop Applications  |  Antonio Peric-Mazar
Publication date: 2019-07-30
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Antonio Peric-Mazar (Locastic) | https://phpconference.com/speaker/antonio-peric-mazar/

Symfony 4 is here and it is better than ever. With Flex, it can be a micro framework and an amazing beast with any feature you want. What changed from version 3, what new best practices are and why Symfony is moving the PHP world forward once again, you can find in this talk.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/

👍 Like us on Facebook | https://www.facebook.com/ipc.germany/

👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:00,250 --> 00:00:07,919
[Music]

00:00:04,279 --> 00:00:11,130
thank you for joining the stock I will

00:00:07,919 --> 00:00:13,259
talk today about sin 24 thanks organizer

00:00:11,130 --> 00:00:15,690
for organizers for inviting me to speak

00:00:13,259 --> 00:00:17,330
here this is my first time at this

00:00:15,690 --> 00:00:19,710
conference but first time as a speaker

00:00:17,330 --> 00:00:22,980
and so I can of course thanks to all

00:00:19,710 --> 00:00:25,650
sponsors for making so much effort for

00:00:22,980 --> 00:00:27,599
making this event happen so few words

00:00:25,650 --> 00:00:29,400
about me my name is Antonio parish

00:00:27,599 --> 00:00:32,610
mother and I'm from Croatia split I'm

00:00:29,400 --> 00:00:35,100
the CEO of la kostik and I'm also quite

00:00:32,610 --> 00:00:37,920
involved in community in my in my home

00:00:35,100 --> 00:00:41,309
town so basically the two second things

00:00:37,920 --> 00:00:43,920
analysts are Tino meetup and NGO bloc

00:00:41,309 --> 00:00:45,690
odda which is to inquire during some

00:00:43,920 --> 00:00:48,480
events organizing conferences and

00:00:45,690 --> 00:00:50,149
monthly event in in our hometown for the

00:00:48,480 --> 00:00:52,860
last ten years I'm doing web development

00:00:50,149 --> 00:00:56,629
so I worked with all kind of the clients

00:00:52,860 --> 00:01:00,090
from all parts of the world and from

00:00:56,629 --> 00:01:04,439
2012 I am using Symphony as my primary

00:01:00,090 --> 00:01:06,750
tool for back-end development about my

00:01:04,439 --> 00:01:08,610
company has already told we are based in

00:01:06,750 --> 00:01:10,770
split in Croatia we are doing web and

00:01:08,610 --> 00:01:12,960
mobile development for our clients this

00:01:10,770 --> 00:01:14,850
is some of our works that we did and

00:01:12,960 --> 00:01:16,860
also we are doing a lot of user

00:01:14,850 --> 00:01:19,950
experience and user interface design and

00:01:16,860 --> 00:01:22,350
consulting for clients so that's

00:01:19,950 --> 00:01:25,409
basically about me and my company before

00:01:22,350 --> 00:01:27,930
I start talking I want to get I want to

00:01:25,409 --> 00:01:30,540
know much better so who is using

00:01:27,930 --> 00:01:36,479
symphonious as a framework and raised

00:01:30,540 --> 00:01:38,640
hands and seen 24 ok usually what

00:01:36,479 --> 00:01:40,590
happens at the conference is that still

00:01:38,640 --> 00:01:43,829
a lot of people is not using symphony

00:01:40,590 --> 00:01:45,570
for and probably I assume the reason for

00:01:43,829 --> 00:01:48,930
that is that a long term support

00:01:45,570 --> 00:01:51,689
addition is not he's not released yet so

00:01:48,930 --> 00:01:53,130
how I started to work as PHP developer

00:01:51,689 --> 00:01:55,710
and how I moved to the symphony

00:01:53,130 --> 00:01:57,420
I started during my college to do some

00:01:55,710 --> 00:01:59,850
freelancing projects basically at the

00:01:57,420 --> 00:02:01,680
beginning it was some small scripts then

00:01:59,850 --> 00:02:03,240
I set up some kind of the framework

00:02:01,680 --> 00:02:05,850
because I want to speed up development

00:02:03,240 --> 00:02:07,829
and I want to make my life easier so I

00:02:05,850 --> 00:02:09,509
have like bunch of classes some kind of

00:02:07,829 --> 00:02:10,789
the routine some kind of the database

00:02:09,509 --> 00:02:13,099
manager and things like

00:02:10,789 --> 00:02:15,560
and that work well it back in that time

00:02:13,099 --> 00:02:17,989
but as I grow up as developer I wanted

00:02:15,560 --> 00:02:19,580
to use something more advanced so I did

00:02:17,989 --> 00:02:21,920
the research and I decided I want to

00:02:19,580 --> 00:02:24,590
move to the symphony and at that time

00:02:21,920 --> 00:02:28,090
symphony was like symphony to was in

00:02:24,590 --> 00:02:31,700
development phase and symphony 1.4 was

00:02:28,090 --> 00:02:33,709
like in long term support so I decided

00:02:31,700 --> 00:02:36,980
before starting with symphony 2 to took

00:02:33,709 --> 00:02:39,230
one project that with Symphony 1.4 and

00:02:36,980 --> 00:02:42,560
basically that's how my career it

00:02:39,230 --> 00:02:46,069
sinfoni started so back there the web

00:02:42,560 --> 00:02:48,290
was totally different we had like simple

00:02:46,069 --> 00:02:50,870
web simple front-end applications but

00:02:48,290 --> 00:02:52,519
that were that were supported with huge

00:02:50,870 --> 00:02:54,349
back-end solution and we needed some

00:02:52,519 --> 00:02:56,870
kind of full stack framework to develop

00:02:54,349 --> 00:02:59,269
that kind of application symphony 1.4

00:02:56,870 --> 00:03:01,519
was exactly that kind of the framework

00:02:59,269 --> 00:03:03,470
so we didn't have even the templating

00:03:01,519 --> 00:03:05,510
system so basically on front-end we'll

00:03:03,470 --> 00:03:08,690
have some templating with PHP and HTML

00:03:05,510 --> 00:03:11,989
and then we look how like really fat

00:03:08,690 --> 00:03:13,760
back-end solution for providing that for

00:03:11,989 --> 00:03:16,549
rendering that kind of the websites in

00:03:13,760 --> 00:03:18,470
symphony 1.4 we had some kind of the

00:03:16,549 --> 00:03:20,900
plugins but that was downloading with

00:03:18,470 --> 00:03:22,849
this downloaded zip file adding to your

00:03:20,900 --> 00:03:26,359
project configuring and then using it

00:03:22,849 --> 00:03:28,940
was really like not not easy yesterday

00:03:26,359 --> 00:03:32,720
because not not even composer existed

00:03:28,940 --> 00:03:35,419
back in that time so Symphony 1.4 was in

00:03:32,720 --> 00:03:41,030
that time good fit I will save for mid

00:03:35,419 --> 00:03:42,620
and and larger applications what had it

00:03:41,030 --> 00:03:43,760
was clear separation inside the

00:03:42,620 --> 00:03:44,930
framework so you have front-end

00:03:43,760 --> 00:03:46,609
application you have back-end

00:03:44,930 --> 00:03:49,190
application they shared the model and

00:03:46,609 --> 00:03:51,769
you had in in the distribution you have

00:03:49,190 --> 00:03:54,169
also admin generator and most of the

00:03:51,769 --> 00:03:57,919
backends were generated by that admin

00:03:54,169 --> 00:04:00,139
from console in 2009 Symphony waktu was

00:03:57,919 --> 00:04:02,349
released still we didn't have composer

00:04:00,139 --> 00:04:05,120
at the beginning and we didn't have

00:04:02,349 --> 00:04:07,849
namespaces at the beginning of symphony

00:04:05,120 --> 00:04:09,980
- but as we got the composer as we got

00:04:07,849 --> 00:04:12,109
the namespaces the framework got better

00:04:09,980 --> 00:04:14,209
and of chorale our life as seen for the

00:04:12,109 --> 00:04:17,299
developers or PHP developers improved a

00:04:14,209 --> 00:04:20,269
lot what was the biggest improvement of

00:04:17,299 --> 00:04:22,460
Symphony - was idea to build build a

00:04:20,269 --> 00:04:23,560
framework around standalone separated

00:04:22,460 --> 00:04:25,750
components

00:04:23,560 --> 00:04:27,910
so that gives flexibility to the

00:04:25,750 --> 00:04:30,639
developers to build their own framework

00:04:27,910 --> 00:04:32,620
and to use it in each way they want so

00:04:30,639 --> 00:04:35,530
that was a good idea but actually didn't

00:04:32,620 --> 00:04:37,780
work very well in a practice because we

00:04:35,530 --> 00:04:39,610
end up what usually we end up with using

00:04:37,780 --> 00:04:43,600
standard edition I'll talk a little bit

00:04:39,610 --> 00:04:45,280
later about that some developers took

00:04:43,600 --> 00:04:48,100
components and build their own framework

00:04:45,280 --> 00:04:50,620
but in 99% of the cases they will end up

00:04:48,100 --> 00:04:52,750
using the symphony again so that was a

00:04:50,620 --> 00:04:55,810
little bit like the idea was good and

00:04:52,750 --> 00:04:57,610
some developers managed to build their

00:04:55,810 --> 00:05:01,210
own stack on us based on symfony

00:04:57,610 --> 00:05:04,030
components but it was not like as we

00:05:01,210 --> 00:05:06,580
expected what Symphony 2 introduced also

00:05:04,030 --> 00:05:08,590
Valera bundles so bundles are the idea

00:05:06,580 --> 00:05:11,140
of bundles was to separate the code in

00:05:08,590 --> 00:05:13,150
like one part for example if you are

00:05:11,140 --> 00:05:14,800
building blog or contact page or

00:05:13,150 --> 00:05:16,930
something like that you will group that

00:05:14,800 --> 00:05:18,940
part of the code inside the bundles so

00:05:16,930 --> 00:05:20,500
it was quite a different idea from

00:05:18,940 --> 00:05:23,740
separating front-end and back-end

00:05:20,500 --> 00:05:26,290
application in symphony 1.4 to separate

00:05:23,740 --> 00:05:28,660
that in a bundles and ideal bundles was

00:05:26,290 --> 00:05:30,850
to be reused in next projects that you

00:05:28,660 --> 00:05:33,820
are working but usually I don't think

00:05:30,850 --> 00:05:35,440
that anyone is reusing the code in that

00:05:33,820 --> 00:05:38,650
way so if you are using something you

00:05:35,440 --> 00:05:41,229
will build some bundle you will separate

00:05:38,650 --> 00:05:43,500
that as a third party library and then

00:05:41,229 --> 00:05:47,770
you will use it in that way Symphony

00:05:43,500 --> 00:05:51,400
Symphony free in 2015 actually Symphony

00:05:47,770 --> 00:05:53,260
had ten years celebration so that's like

00:05:51,400 --> 00:05:54,960
quite a good song for us because that

00:05:53,260 --> 00:05:58,479
framework exists for 10 years now

00:05:54,960 --> 00:06:00,460
actually more and sinfoni free was very

00:05:58,479 --> 00:06:02,440
boring Edition because in front of free

00:06:00,460 --> 00:06:05,770
didn't have anything new it was just

00:06:02,440 --> 00:06:09,180
transition phase from Symphony 2 to

00:06:05,770 --> 00:06:12,419
scene 24 so it was like maybe the worst

00:06:09,180 --> 00:06:16,180
release ever and it was the slowest one

00:06:12,419 --> 00:06:19,210
in 2017 on the last day of November

00:06:16,180 --> 00:06:21,220
scene 24 was released and symphony for

00:06:19,210 --> 00:06:23,320
change and tire concepts how we are

00:06:21,220 --> 00:06:24,700
building the application so basically

00:06:23,320 --> 00:06:26,950
what we have now we are actually

00:06:24,700 --> 00:06:29,350
starting with micro framework so we can

00:06:26,950 --> 00:06:31,840
set up our own stack and use it in any

00:06:29,350 --> 00:06:33,789
way that we want so if we compare

00:06:31,840 --> 00:06:37,210
compare this edition you can see that

00:06:33,789 --> 00:06:40,680
Symphony 3 is just in from the 2.8

00:06:37,210 --> 00:06:45,820
for - deprecated features then sinfoni

00:06:40,680 --> 00:06:47,620
4.0 was sinfoni 3.3 3.4 deprecated

00:06:45,820 --> 00:06:49,840
features plus new way of developing

00:06:47,620 --> 00:06:51,850
application and that's actually the

00:06:49,840 --> 00:06:56,560
thing that i want to talk today like

00:06:51,850 --> 00:06:59,919
what's changed from symphony to 3024 so

00:06:56,560 --> 00:07:01,930
what we could do better is was mostly

00:06:59,919 --> 00:07:04,479
managing the dependencies inside our

00:07:01,930 --> 00:07:06,910
project so if you wanted to add some

00:07:04,479 --> 00:07:08,860
bundle to your application usually you

00:07:06,910 --> 00:07:10,449
download it with composer then you need

00:07:08,860 --> 00:07:12,490
to configure everything then you need to

00:07:10,449 --> 00:07:14,410
test it sometimes you don't want to use

00:07:12,490 --> 00:07:16,570
that and then you need to remove that

00:07:14,410 --> 00:07:18,970
everything manually so that was

00:07:16,570 --> 00:07:22,180
something that can be automated but we

00:07:18,970 --> 00:07:23,800
didn't have a way for doing that the

00:07:22,180 --> 00:07:27,970
standard edition as I mentioned already

00:07:23,800 --> 00:07:29,710
was not a good one so basically a lot of

00:07:27,970 --> 00:07:31,599
project started just downloading the

00:07:29,710 --> 00:07:33,310
standard edition and then start writing

00:07:31,599 --> 00:07:35,080
the code so but if you need to build

00:07:33,310 --> 00:07:37,180
some small web services or if you need

00:07:35,080 --> 00:07:39,400
to build some console application you

00:07:37,180 --> 00:07:41,650
will usually do the same thing and then

00:07:39,400 --> 00:07:43,360
you have like 72 packages and most of

00:07:41,650 --> 00:07:46,000
the code that you are not using so you

00:07:43,360 --> 00:07:48,159
have a feeling that there is a lot of

00:07:46,000 --> 00:07:50,260
things inside your code base that you

00:07:48,159 --> 00:07:52,810
actually don't need so I don't know how

00:07:50,260 --> 00:07:55,449
many of you try for example remove the

00:07:52,810 --> 00:07:58,240
form component from symphony to standard

00:07:55,449 --> 00:08:00,010
edition that was very painful because

00:07:58,240 --> 00:08:02,260
there was a lot of dependencies on the

00:08:00,010 --> 00:08:04,720
other things and for example in scene 24

00:08:02,260 --> 00:08:06,820
we don't even have worms in skeleton in

00:08:04,720 --> 00:08:09,580
basic Edition so this is the philosophy

00:08:06,820 --> 00:08:12,400
behind the symphony for as fabian

00:08:09,580 --> 00:08:14,380
pâtissière stated on his blog that we

00:08:12,400 --> 00:08:16,720
want a framework which starts a small

00:08:14,380 --> 00:08:19,270
one and then we want to add things and

00:08:16,720 --> 00:08:22,780
improve it as we needed so my first

00:08:19,270 --> 00:08:25,090
project on scene 24 was small small well

00:08:22,780 --> 00:08:27,460
actually it end up as a big one web

00:08:25,090 --> 00:08:29,620
scraper for one website so what I needed

00:08:27,460 --> 00:08:32,169
is only console and I needed to parse

00:08:29,620 --> 00:08:34,810
data from some websites later I need the

00:08:32,169 --> 00:08:36,880
database side edge doctrine then I need

00:08:34,810 --> 00:08:39,550
some other things like admin and and and

00:08:36,880 --> 00:08:41,620
I just keep up adding things but I

00:08:39,550 --> 00:08:45,670
started small I didn't use things that I

00:08:41,620 --> 00:08:47,980
don't need so this is the if you take

00:08:45,670 --> 00:08:50,650
this statement this is the like key

00:08:47,980 --> 00:08:53,050
words start small be able to grow

00:08:50,650 --> 00:08:55,060
your choice and framework should not get

00:08:53,050 --> 00:08:56,860
in your way and that's what we have

00:08:55,060 --> 00:09:00,520
today with symphony

00:08:56,860 --> 00:09:02,620
scene 24 so basically we are no longer

00:09:00,520 --> 00:09:05,470
using inheritance like downloading

00:09:02,620 --> 00:09:07,000
standard edition and then inherit all

00:09:05,470 --> 00:09:09,460
the things from there we are basically

00:09:07,000 --> 00:09:11,950
composing our application by ourselves

00:09:09,460 --> 00:09:14,170
so we are choosing what we will have

00:09:11,950 --> 00:09:16,660
inside the stack we are choosing how we

00:09:14,170 --> 00:09:19,480
will use that and we can affect much

00:09:16,660 --> 00:09:26,200
more in how how our application is

00:09:19,480 --> 00:09:28,870
performing actually so the idea behind

00:09:26,200 --> 00:09:31,630
scene 24 is as I mentioned already start

00:09:28,870 --> 00:09:33,490
as a micro framework then compose your

00:09:31,630 --> 00:09:37,120
application use the things you know you

00:09:33,490 --> 00:09:38,650
need and then build anything you want

00:09:37,120 --> 00:09:40,990
like do you want to build console

00:09:38,650 --> 00:09:43,240
application like really small one do you

00:09:40,990 --> 00:09:45,790
want to build traditional website or

00:09:43,240 --> 00:09:47,680
just some kind of the web services of

00:09:45,790 --> 00:09:50,320
course all good things comes with the

00:09:47,680 --> 00:09:52,750
color penalties so we are no longer have

00:09:50,320 --> 00:09:54,970
support for the Silex because ilex is

00:09:52,750 --> 00:09:57,220
that we don't need the Silex because

00:09:54,970 --> 00:09:59,470
symphony can do the same things else

00:09:57,220 --> 00:10:03,490
Alex was doing you all know what is what

00:09:59,470 --> 00:10:05,440
was Silex anybody that doesn't know okay

00:10:03,490 --> 00:10:07,090
it was micro framework based on

00:10:05,440 --> 00:10:09,550
symphonic components so if you have like

00:10:07,090 --> 00:10:12,820
really small API projects it was good

00:10:09,550 --> 00:10:15,760
way to use Silex so some fun facts about

00:10:12,820 --> 00:10:19,690
composer the idea behind the composer

00:10:15,760 --> 00:10:21,550
was to have plugin like system for

00:10:19,690 --> 00:10:24,640
managing dependencies inside symphony

00:10:21,550 --> 00:10:27,250
and phb be but it end up like nobody

00:10:24,640 --> 00:10:28,750
used that in that way why because as I

00:10:27,250 --> 00:10:31,240
mentioned we need to download something

00:10:28,750 --> 00:10:33,280
we need to configure that and then we

00:10:31,240 --> 00:10:36,940
need to use that or remove that so that

00:10:33,280 --> 00:10:40,840
was like not not very good way of using

00:10:36,940 --> 00:10:43,750
that so we got the flex flex is new

00:10:40,840 --> 00:10:46,300
thing related to sim 24 so it's

00:10:43,750 --> 00:10:49,270
basically composer plugin that do some

00:10:46,300 --> 00:10:51,310
additional things for us so one it hooks

00:10:49,270 --> 00:10:54,310
to require remove an update from

00:10:51,310 --> 00:10:56,650
functions of composer and do some

00:10:54,310 --> 00:10:59,140
additional things how it works it works

00:10:56,650 --> 00:11:02,710
in very easy way we have we have some

00:10:59,140 --> 00:11:05,170
sinfully flex server which has some

00:11:02,710 --> 00:11:06,940
six and then once we require something

00:11:05,170 --> 00:11:09,370
in composure for example composure

00:11:06,940 --> 00:11:11,830
required male he asked the server

00:11:09,370 --> 00:11:13,900
do you have received for this if server

00:11:11,830 --> 00:11:16,000
says I don't have received nothing

00:11:13,900 --> 00:11:19,420
happens so we need still to do manually

00:11:16,000 --> 00:11:21,970
all the things but if server says yes I

00:11:19,420 --> 00:11:23,890
have receive then he decides which

00:11:21,970 --> 00:11:24,640
packages to install and how to configure

00:11:23,890 --> 00:11:27,400
them

00:11:24,640 --> 00:11:30,400
so basically entire configuration which

00:11:27,400 --> 00:11:32,740
we were doing manually is now done

00:11:30,400 --> 00:11:35,590
automatically for us so receive looks

00:11:32,740 --> 00:11:38,980
like this so basically it's just simple

00:11:35,590 --> 00:11:41,230
JSON file called manifest dot JSON and

00:11:38,980 --> 00:11:43,720
it says at the beginning okay two

00:11:41,230 --> 00:11:45,790
bundles enable this bundle with this

00:11:43,720 --> 00:11:47,980
namespace for all that means for all

00:11:45,790 --> 00:11:50,560
environment that we have inside the

00:11:47,980 --> 00:11:53,830
project copy from the receive that means

00:11:50,560 --> 00:11:57,190
copy folder from configuration file on

00:11:53,830 --> 00:11:59,920
on repository to our project so

00:11:57,190 --> 00:12:02,440
basically what we were doing manually to

00:11:59,920 --> 00:12:04,870
the environment variables add these free

00:12:02,440 --> 00:12:07,030
variables and this Alliance means that

00:12:04,870 --> 00:12:10,060
we can use composer require male or male

00:12:07,030 --> 00:12:14,530
or full pads in Fernie slash mailer we

00:12:10,060 --> 00:12:17,260
will get the same thing there two

00:12:14,530 --> 00:12:20,440
repositories related for Symphony flags

00:12:17,260 --> 00:12:22,450
one is the symphony receives which is

00:12:20,440 --> 00:12:25,300
maintained by symphony core team and

00:12:22,450 --> 00:12:28,570
only receives that there provide that

00:12:25,300 --> 00:12:30,580
are provided like high quality that are

00:12:28,570 --> 00:12:32,710
opinion by core team can go inside that

00:12:30,580 --> 00:12:34,360
repository so you cannot like contribute

00:12:32,710 --> 00:12:36,550
you can contribute there but of course

00:12:34,360 --> 00:12:39,100
you need to get approved your pull

00:12:36,550 --> 00:12:40,450
request and that repository is the only

00:12:39,100 --> 00:12:42,700
difference between first one and the

00:12:40,450 --> 00:12:45,040
second one is that they can use elias's

00:12:42,700 --> 00:12:47,890
so in the first one you can use this

00:12:45,040 --> 00:12:51,100
lysis here but in second country

00:12:47,890 --> 00:12:52,810
repository you can contribute whatever

00:12:51,100 --> 00:12:54,460
you want you can put any recipie you

00:12:52,810 --> 00:12:57,460
want but the difference is that you

00:12:54,460 --> 00:13:00,010
cannot use elias's also there is flags

00:12:57,460 --> 00:13:04,140
dot symphonic on website where you can

00:13:00,010 --> 00:13:06,670
go and see which receives we have today

00:13:04,140 --> 00:13:09,040
at the beginning like when was in twenty

00:13:06,670 --> 00:13:11,620
four point four was released we didn't

00:13:09,040 --> 00:13:14,080
have so big support for all the packages

00:13:11,620 --> 00:13:15,390
that are listed now here but as as time

00:13:14,080 --> 00:13:17,220
goes we have

00:13:15,390 --> 00:13:19,020
more and received so you can check

00:13:17,220 --> 00:13:21,660
what's inside you can go to the github

00:13:19,020 --> 00:13:24,510
you can see what's happening inside

00:13:21,660 --> 00:13:27,690
configuration and then you can use it or

00:13:24,510 --> 00:13:32,280
you can build your own received for your

00:13:27,690 --> 00:13:35,270
own package as you can see we can we

00:13:32,280 --> 00:13:38,780
have two colors one is orange which is

00:13:35,270 --> 00:13:43,070
contributing one which is official

00:13:38,780 --> 00:13:45,570
receive so installing the symphony for I

00:13:43,070 --> 00:13:47,120
mentioned seeing 21.4 I mentioned

00:13:45,570 --> 00:13:51,240
Symphony too so we started from

00:13:47,120 --> 00:13:53,640
downloading zip file to downloading some

00:13:51,240 --> 00:13:56,510
Symphony application to install this

00:13:53,640 --> 00:13:59,850
Symphony itself then we move to composer

00:13:56,510 --> 00:14:04,320
then we stayed there for a while and

00:13:59,850 --> 00:14:06,420
today we still can use composer for

00:14:04,320 --> 00:14:08,070
starting the new project but there is

00:14:06,420 --> 00:14:09,540
actually better way this is the free

00:14:08,070 --> 00:14:11,580
ways of starting the project you can

00:14:09,540 --> 00:14:13,950
start with Symphony skeleton package

00:14:11,580 --> 00:14:16,890
which is bear nothing just bass

00:14:13,950 --> 00:14:19,110
dependency on framework and Symphony

00:14:16,890 --> 00:14:21,780
website skeleton which is actually same

00:14:19,110 --> 00:14:24,060
as traditional distribution of symphonic

00:14:21,780 --> 00:14:26,340
symphony standardization or you can

00:14:24,060 --> 00:14:27,780
start learning and playing with Symphony

00:14:26,340 --> 00:14:29,910
that Symphony / demo

00:14:27,780 --> 00:14:31,590
but there is better way from my

00:14:29,910 --> 00:14:33,810
perspective maybe someone will not agree

00:14:31,590 --> 00:14:36,090
with me you can use Symphony client

00:14:33,810 --> 00:14:38,370
actually again and Symphony client has a

00:14:36,090 --> 00:14:41,130
lot of hidden features inside yourself

00:14:38,370 --> 00:14:43,890
inside self so basically it contains PHP

00:14:41,130 --> 00:14:46,320
server so you can type symphony server

00:14:43,890 --> 00:14:48,180
and you will get your application up and

00:14:46,320 --> 00:14:49,830
running but this is some of the features

00:14:48,180 --> 00:14:52,800
that are actually supported inside

00:14:49,830 --> 00:14:54,450
sinfoni client so you you can have you

00:14:52,800 --> 00:14:56,850
can start new project we will see that

00:14:54,450 --> 00:15:00,180
later that supports different versions

00:14:56,850 --> 00:15:02,520
of PHP support it work on HTTP - server

00:15:00,180 --> 00:15:05,880
generates TLS certificates check your

00:15:02,520 --> 00:15:07,470
security issues and seamlessly integrate

00:15:05,880 --> 00:15:09,450
if you are using Symphony cloud it's

00:15:07,470 --> 00:15:12,210
very easy to deploy to the symphony

00:15:09,450 --> 00:15:17,010
cloud and it works on windows also

00:15:12,210 --> 00:15:19,170
that's like a cool feature starting a

00:15:17,010 --> 00:15:21,620
new project with Symphony client is very

00:15:19,170 --> 00:15:25,260
easy Symphony new name of the project or

00:15:21,620 --> 00:15:28,080
Symphony full name of the project if you

00:15:25,260 --> 00:15:30,900
want to the

00:15:28,080 --> 00:15:33,180
the entire website skeleton so how it

00:15:30,900 --> 00:15:35,820
works it works very easy I hope you can

00:15:33,180 --> 00:15:37,830
see it in last rows so simple a new

00:15:35,820 --> 00:15:46,320
project it will be it will download the

00:15:37,830 --> 00:15:51,750
bear skeleton of the project and then

00:15:46,320 --> 00:15:54,540
just Symphony sir as you cannot decide

00:15:51,750 --> 00:15:59,910
on how I didn't write it on t I didn't

00:15:54,540 --> 00:16:01,500
generate HTTP so it's a like warning I

00:15:59,910 --> 00:16:03,180
can do that or run it without and that's

00:16:01,500 --> 00:16:05,160
it my project is up and running and I

00:16:03,180 --> 00:16:07,440
can't start working this is the first

00:16:05,160 --> 00:16:10,340
page that you will see if you don't have

00:16:07,440 --> 00:16:13,410
any controller inside your application

00:16:10,340 --> 00:16:15,810
okay what about code structure code

00:16:13,410 --> 00:16:17,970
structure in symphony for is way more

00:16:15,810 --> 00:16:18,990
natural than in symphony two three and

00:16:17,970 --> 00:16:21,330
one

00:16:18,990 --> 00:16:23,520
it doesn't even convince not even

00:16:21,330 --> 00:16:27,570
comparable to this so basically what we

00:16:23,520 --> 00:16:30,210
have we have been config as our seve our

00:16:27,570 --> 00:16:31,440
vendor folders and inside conflict

00:16:30,210 --> 00:16:34,380
that's the place for entire

00:16:31,440 --> 00:16:36,420
configuration usually in previous

00:16:34,380 --> 00:16:38,460
version of symphony we had configuration

00:16:36,420 --> 00:16:40,710
to the bundles for our application or in

00:16:38,460 --> 00:16:43,220
a way how we separated now we are

00:16:40,710 --> 00:16:45,750
keeping entire configuration there and

00:16:43,220 --> 00:16:48,270
99% of your receives will just copy

00:16:45,750 --> 00:16:50,220
pasted files there in your configuration

00:16:48,270 --> 00:16:52,200
file of course you need to commit to

00:16:50,220 --> 00:16:55,280
that files and deploy it to your

00:16:52,200 --> 00:16:58,650
production and put it in your repository

00:16:55,280 --> 00:17:01,140
second one is that public we don't also

00:16:58,650 --> 00:17:03,420
have that folder for our public folder

00:17:01,140 --> 00:17:05,330
public is way more natural on web

00:17:03,420 --> 00:17:07,830
servers and we don't have different

00:17:05,330 --> 00:17:10,620
controllers for different environments

00:17:07,830 --> 00:17:12,630
we have only index.php that depends on

00:17:10,620 --> 00:17:14,790
environment variable and configuration

00:17:12,630 --> 00:17:15,480
inside environment variable I will show

00:17:14,790 --> 00:17:19,500
that later

00:17:15,480 --> 00:17:22,800
so it's just one controller now your

00:17:19,500 --> 00:17:26,240
entire code goes to SRC folder as always

00:17:22,800 --> 00:17:30,120
but it's not such separated two bundles

00:17:26,240 --> 00:17:33,150
caps lock folder it's inside the I our

00:17:30,120 --> 00:17:35,520
folder and then we have understand we

00:17:33,150 --> 00:17:37,980
have environment variables here I will

00:17:35,520 --> 00:17:40,800
talk about them on the next slide before

00:17:37,980 --> 00:17:42,360
that we have something new which is here

00:17:40,800 --> 00:17:45,450
it's called symphony

00:17:42,360 --> 00:17:48,179
the same phony lock is used for Symphony

00:17:45,450 --> 00:17:51,210
flags to track which receives are

00:17:48,179 --> 00:17:53,460
installed in the project so if you

00:17:51,210 --> 00:17:55,500
install something and you want to remove

00:17:53,460 --> 00:17:58,440
something flags can check that here what

00:17:55,500 --> 00:18:01,620
he did what it did and it can remove it

00:17:58,440 --> 00:18:04,740
from your project environment variables

00:18:01,620 --> 00:18:07,140
so we replace the parameters llamo with

00:18:04,740 --> 00:18:09,600
environment variables which are more

00:18:07,140 --> 00:18:11,370
flexible but they are not secures or how

00:18:09,600 --> 00:18:13,409
that in mind don't put secrets and

00:18:11,370 --> 00:18:15,510
commit that to your repositories or

00:18:13,409 --> 00:18:16,799
things like that and this is how what we

00:18:15,510 --> 00:18:19,740
are committing and what we are actually

00:18:16,799 --> 00:18:22,260
using locally so we have dot env file

00:18:19,740 --> 00:18:24,030
which commits an all defaults variable

00:18:22,260 --> 00:18:26,460
that you need for your application up

00:18:24,030 --> 00:18:29,130
and running goes there this is the end

00:18:26,460 --> 00:18:31,890
dot local which which doesn't go to

00:18:29,130 --> 00:18:34,500
repository and you use that for setup

00:18:31,890 --> 00:18:37,500
your local environment it's the same for

00:18:34,500 --> 00:18:39,780
that test and test local so this will be

00:18:37,500 --> 00:18:41,880
defaults and things used for continuous

00:18:39,780 --> 00:18:44,130
integration continuous deliberating and

00:18:41,880 --> 00:18:46,440
then this is the local that you will use

00:18:44,130 --> 00:18:50,880
locally for your configuration for test

00:18:46,440 --> 00:18:53,669
and once again just don't put secrets in

00:18:50,880 --> 00:18:56,130
this file because usually when sin 24

00:18:53,669 --> 00:18:58,020
was released like people will Google for

00:18:56,130 --> 00:18:59,730
this file then it will see ok this is

00:18:58,020 --> 00:19:01,559
the same phony application then usually

00:18:59,730 --> 00:19:03,270
there is inside username and password

00:19:01,559 --> 00:19:06,900
for your database so that's not

00:19:03,270 --> 00:19:10,080
something very clever to do ok bandulus

00:19:06,900 --> 00:19:14,190
application who is using bundles who

00:19:10,080 --> 00:19:17,039
used bundles ok a lot of us so when I

00:19:14,190 --> 00:19:18,990
move the same 22 bundles were like what

00:19:17,039 --> 00:19:21,570
what is this like I don't like this

00:19:18,990 --> 00:19:23,220
thing then actually entire my code went

00:19:21,570 --> 00:19:25,919
to the bundles because it was nice to

00:19:23,220 --> 00:19:28,169
separate that but in the end we don't

00:19:25,919 --> 00:19:31,080
need it if you are working on some

00:19:28,169 --> 00:19:32,880
custom projects we will build some code

00:19:31,080 --> 00:19:35,130
for that project we usually want to

00:19:32,880 --> 00:19:38,130
reuse that for another so we are adding

00:19:35,130 --> 00:19:40,530
one aspect of complexity to our project

00:19:38,130 --> 00:19:42,990
and we can organize code in better way

00:19:40,530 --> 00:19:44,730
we can organize everything inside SRC

00:19:42,990 --> 00:19:46,830
folder with the folders and everything

00:19:44,730 --> 00:19:49,320
so we don't need bundles bundle still

00:19:46,830 --> 00:19:51,059
exists but only for third party

00:19:49,320 --> 00:19:54,299
libraries like you want to put something

00:19:51,059 --> 00:19:56,580
in in community some cool library that

00:19:54,299 --> 00:19:59,760
you have you will still create a bundle

00:19:56,580 --> 00:20:02,429
there is nice tutorial for that on a

00:19:59,760 --> 00:20:06,090
symphony documentation page but we don't

00:20:02,429 --> 00:20:09,020
need that inside our application what's

00:20:06,090 --> 00:20:11,580
the good thing here is that reduce the

00:20:09,020 --> 00:20:13,919
perceived complexity of our project but

00:20:11,580 --> 00:20:18,510
I will say this is even more important

00:20:13,919 --> 00:20:20,669
thing same 24 is a lot about making some

00:20:18,510 --> 00:20:23,159
things standardized moving to

00:20:20,669 --> 00:20:24,929
standardization so basically half of you

00:20:23,159 --> 00:20:27,240
raise the hand that is using bundles

00:20:24,929 --> 00:20:29,789
half of you raise that you are not using

00:20:27,240 --> 00:20:31,830
the bundles now nobody of us will use

00:20:29,789 --> 00:20:34,830
the butter so we have like one step move

00:20:31,830 --> 00:20:37,770
or forward to standardization of our

00:20:34,830 --> 00:20:40,020
symphony application also all the

00:20:37,770 --> 00:20:42,539
concept of the Harrod inheritance for

00:20:40,020 --> 00:20:45,809
the bundles that we used in symphony 2

00:20:42,539 --> 00:20:48,480
and part of the same 24 where deprecated

00:20:45,809 --> 00:20:50,250
in 3.4 so if you start using from the

00:20:48,480 --> 00:20:54,860
application you cannot overwrite

00:20:50,250 --> 00:20:54,860
things like you did in previous versions

00:20:55,190 --> 00:21:01,100
ok outer wiring who is familiar with the

00:20:58,620 --> 00:21:06,179
concept

00:21:01,100 --> 00:21:09,630
ok cool so it's not new thing because it

00:21:06,179 --> 00:21:12,030
was introduced in symphony 3 our wiring

00:21:09,630 --> 00:21:14,010
actually saves a lot of time for us and

00:21:12,030 --> 00:21:17,190
again automates the thing that we did

00:21:14,010 --> 00:21:19,350
manually the problem with outer wiring a

00:21:17,190 --> 00:21:22,200
lot of developers consider that as a

00:21:19,350 --> 00:21:24,120
magic like I created some class and I

00:21:22,200 --> 00:21:25,620
inject that class to another class and

00:21:24,120 --> 00:21:29,549
that works Wow boom

00:21:25,620 --> 00:21:32,100
but actually like all good tricks that

00:21:29,549 --> 00:21:34,500
magicians do its things is very simple

00:21:32,100 --> 00:21:36,630
so what was what we did in past we

00:21:34,500 --> 00:21:39,059
created some class ok then we go to

00:21:36,630 --> 00:21:41,309
services dot xml or services but Yama

00:21:39,059 --> 00:21:44,820
file depends what you use and then we

00:21:41,309 --> 00:21:46,860
say ok ID for this service is hiding one

00:21:44,820 --> 00:21:49,230
or something like that the class that is

00:21:46,860 --> 00:21:51,059
used is this one and then the arguments

00:21:49,230 --> 00:21:53,789
that we are injecting are that and that

00:21:51,059 --> 00:21:58,080
and symfony nouns do that automatically

00:21:53,789 --> 00:22:01,559
for us how the we are using full

00:21:58,080 --> 00:22:04,320
qualified class names as our ID and then

00:22:01,559 --> 00:22:04,960
sinfoni can screen to your code and just

00:22:04,320 --> 00:22:06,850
create the

00:22:04,960 --> 00:22:09,970
services which are using full qualified

00:22:06,850 --> 00:22:12,279
class names as your ID and then when you

00:22:09,970 --> 00:22:15,460
type in something inside the constructor

00:22:12,279 --> 00:22:18,700
of another service he can find using the

00:22:15,460 --> 00:22:20,590
full qualified class name and know what

00:22:18,700 --> 00:22:23,679
to inject so everything happens as

00:22:20,590 --> 00:22:26,590
before just this step of creating and

00:22:23,679 --> 00:22:29,649
setting up the configuration of your

00:22:26,590 --> 00:22:31,149
service is removed so it will save a lot

00:22:29,649 --> 00:22:33,789
of time when you are developing of

00:22:31,149 --> 00:22:35,710
course if you are doing some open source

00:22:33,789 --> 00:22:38,049
thing and you have a bunch of services

00:22:35,710 --> 00:22:40,270
my suggestion is not to use outer wire

00:22:38,049 --> 00:22:44,399
you can just turn it off outer are false

00:22:40,270 --> 00:22:46,929
and you can do it in traditional way

00:22:44,399 --> 00:22:48,549
yeah this is important thing it is

00:22:46,929 --> 00:22:51,309
designed to be predictable

00:22:48,549 --> 00:22:54,370
so if same only cannot outer wire the

00:22:51,309 --> 00:22:56,500
thing you will get like red exception

00:22:54,370 --> 00:22:58,990
which will say like for example your

00:22:56,500 --> 00:23:00,909
service is twittered or something it

00:22:58,990 --> 00:23:03,299
doesn't exist we cannot wire we cannot

00:23:00,909 --> 00:23:06,610
find it this is the default

00:23:03,299 --> 00:23:08,620
configuration from sin 24 so if you

00:23:06,610 --> 00:23:10,779
download the new application and if you

00:23:08,620 --> 00:23:13,899
install it you will see that out the

00:23:10,779 --> 00:23:16,480
wire is enabled by default the second

00:23:13,899 --> 00:23:19,210
very important thing here is that we

00:23:16,480 --> 00:23:22,320
excluded some files from outer wiring

00:23:19,210 --> 00:23:25,779
and we have to configure some folders as

00:23:22,320 --> 00:23:28,240
some services here controllers but

00:23:25,779 --> 00:23:29,890
what's very important here that in

00:23:28,240 --> 00:23:32,169
previous version of thing for me it was

00:23:29,890 --> 00:23:35,020
stated but now it's removed because it's

00:23:32,169 --> 00:23:38,080
default by default all services are now

00:23:35,020 --> 00:23:41,230
private so usual previously all services

00:23:38,080 --> 00:23:43,179
were public this has impact a little bit

00:23:41,230 --> 00:23:45,340
on performance not the huge impact but a

00:23:43,179 --> 00:23:48,490
little bit but what's important that you

00:23:45,340 --> 00:23:51,250
cannot use this and in previous symphony

00:23:48,490 --> 00:23:53,740
versions you extended base controller

00:23:51,250 --> 00:23:56,289
from controller now you have abstract

00:23:53,740 --> 00:23:58,809
controller which access to some services

00:23:56,289 --> 00:24:01,779
in different in different way of course

00:23:58,809 --> 00:24:03,610
you can inject services to any method in

00:24:01,779 --> 00:24:04,990
if you have for example want to eject

00:24:03,610 --> 00:24:07,450
something inside your controller you can

00:24:04,990 --> 00:24:10,480
inject it in constructor or any other

00:24:07,450 --> 00:24:13,210
method how it how it works this is some

00:24:10,480 --> 00:24:17,139
Twitter client which is our service so

00:24:13,210 --> 00:24:18,279
his eye it's ID is app service Twitter

00:24:17,139 --> 00:24:21,039
clients of

00:24:18,279 --> 00:24:24,969
qualified classmate and I wanted to

00:24:21,039 --> 00:24:27,489
inject this route 14 transformer to my

00:24:24,969 --> 00:24:30,700
service so I just type hinted in

00:24:27,489 --> 00:24:33,190
constructor and up I use full full name

00:24:30,700 --> 00:24:35,799
to that to define what I'm using so it's

00:24:33,190 --> 00:24:37,779
namespace and that's it I don't need to

00:24:35,799 --> 00:24:41,950
configure these two services this works

00:24:37,779 --> 00:24:44,529
out of the box inside same 24 if you

00:24:41,950 --> 00:24:46,719
want to see which services you have

00:24:44,529 --> 00:24:49,090
inside your application this being

00:24:46,719 --> 00:24:51,009
consoled debug out of wiring you can

00:24:49,090 --> 00:24:53,649
also you will get the list of all

00:24:51,009 --> 00:24:55,269
services that are out of wired here also

00:24:53,649 --> 00:24:58,629
the good thing is just if you are

00:24:55,269 --> 00:25:00,609
switching to same 24 it's to see which

00:24:58,629 --> 00:25:01,839
services do you have inside your stack

00:25:00,609 --> 00:25:04,629
what I'm saying it's a good thing

00:25:01,839 --> 00:25:06,820
because the list you will get is much

00:25:04,629 --> 00:25:09,190
smaller than you then you will get in

00:25:06,820 --> 00:25:11,919
symphony free and sinfoni 2 so that's

00:25:09,190 --> 00:25:15,099
like again huge step forward the code

00:25:11,919 --> 00:25:19,479
base of same 24 is 70% reduced compared

00:25:15,099 --> 00:25:25,629
it to Symphony free ok some front ending

00:25:19,479 --> 00:25:27,789
schools and core few people so and core

00:25:25,629 --> 00:25:30,009
web back and core like in the past

00:25:27,789 --> 00:25:33,039
probably you use the static bundle I

00:25:30,009 --> 00:25:35,950
assume that was not good solution right

00:25:33,039 --> 00:25:38,019
it was real if we compare the fronton

00:25:35,950 --> 00:25:40,719
technology that was like really slow in

00:25:38,019 --> 00:25:42,999
developing it was like you never knew

00:25:40,719 --> 00:25:45,639
what you will get as how its put how to

00:25:42,999 --> 00:25:48,009
set up and everything else so what they

00:25:45,639 --> 00:25:50,259
decide to do is to build web and core

00:25:48,009 --> 00:25:53,349
and it's very simple way to integrate

00:25:50,259 --> 00:25:56,139
the web pack inside your application it

00:25:53,349 --> 00:25:58,690
wraps web pack giving you the simple API

00:25:56,139 --> 00:26:02,950
and powerful API for JavaScript models

00:25:58,690 --> 00:26:05,820
it is inspired by web Packer and mix but

00:26:02,950 --> 00:26:08,109
it stay in spirit of half of a pack so

00:26:05,820 --> 00:26:10,839
basically what you need if you want to

00:26:08,109 --> 00:26:13,539
use it you just need to do composer

00:26:10,839 --> 00:26:16,210
require web pack and core and it can

00:26:13,539 --> 00:26:19,479
work outside of symphony also once you

00:26:16,210 --> 00:26:22,149
run that in composer you will get this

00:26:19,479 --> 00:26:25,419
configuration file but you will also get

00:26:22,149 --> 00:26:28,330
some new folders you see go and the

00:26:25,419 --> 00:26:30,700
opposite sets CSS CSS and J's folder

00:26:28,330 --> 00:26:31,840
that's the folder where your working

00:26:30,700 --> 00:26:33,850
files goes

00:26:31,840 --> 00:26:36,130
and we have some simple configuration

00:26:33,850 --> 00:26:38,170
with everything is explained of course

00:26:36,130 --> 00:26:41,410
it can do more things than it's just in

00:26:38,170 --> 00:26:43,840
default and after you configure it once

00:26:41,410 --> 00:26:45,700
you will be I'll say very comfortable

00:26:43,840 --> 00:26:48,940
for using this even your front-end team

00:26:45,700 --> 00:26:50,860
will be very very comfortable with using

00:26:48,940 --> 00:26:52,750
this because they will have the place

00:26:50,860 --> 00:26:55,060
where they are writing CSS where they

00:26:52,750 --> 00:26:57,340
are writing J's they will have templates

00:26:55,060 --> 00:26:59,440
for the ones you require tweak where all

00:26:57,340 --> 00:27:01,330
templates go so it's much easier to

00:26:59,440 --> 00:27:03,370
navigate it's much easier to separate

00:27:01,330 --> 00:27:05,830
back-end and front-end and this will

00:27:03,370 --> 00:27:08,530
compile and build all the files

00:27:05,830 --> 00:27:13,050
automatically for for you for them for

00:27:08,530 --> 00:27:16,180
your team ok regarding performance

00:27:13,050 --> 00:27:19,090
Fabian run one test and then he stated

00:27:16,180 --> 00:27:23,230
that sinfoni four is almost three times

00:27:19,090 --> 00:27:25,750
faster than laravel 5.5 which is true if

00:27:23,230 --> 00:27:27,640
you run hello test hello world test but

00:27:25,750 --> 00:27:30,130
the reason is that because in funny

00:27:27,640 --> 00:27:32,680
doesn't have dependencies so this is

00:27:30,130 --> 00:27:33,250
like good marketing trinket weak I'll

00:27:32,680 --> 00:27:36,100
say

00:27:33,250 --> 00:27:38,380
but in real if he set up the exact same

00:27:36,100 --> 00:27:41,530
stacks Symphony is still faster than

00:27:38,380 --> 00:27:43,450
lalala not for three times but slightly

00:27:41,530 --> 00:27:46,360
faster regarding the performance

00:27:43,450 --> 00:27:49,090
comparing to previous versions Symphony

00:27:46,360 --> 00:27:52,990
2 was the fastest release released

00:27:49,090 --> 00:27:55,210
before sin 24 and 3.4 so the last

00:27:52,990 --> 00:27:57,550
long-term support version was the

00:27:55,210 --> 00:27:59,890
slowest one probably the reason was

00:27:57,550 --> 00:28:02,740
because there is a lot of deprecated

00:27:59,890 --> 00:28:05,230
features inside it so now once they are

00:28:02,740 --> 00:28:08,980
removed we got a really fast Symphony

00:28:05,230 --> 00:28:12,310
which is very good thing for us another

00:28:08,980 --> 00:28:14,800
very very good thing about Symphony is

00:28:12,310 --> 00:28:17,680
planning of releases so basically we

00:28:14,800 --> 00:28:19,840
have stability and predictability so you

00:28:17,680 --> 00:28:21,940
can know for each version when it will

00:28:19,840 --> 00:28:25,390
be released how long it will be

00:28:21,940 --> 00:28:28,030
supported and basically on top of that

00:28:25,390 --> 00:28:30,280
of that you can decide what to use as

00:28:28,030 --> 00:28:33,610
you can notice here we still don't have

00:28:30,280 --> 00:28:36,100
long-term support for sin 24 and I think

00:28:33,610 --> 00:28:38,380
that's one of the main reason why more

00:28:36,100 --> 00:28:40,600
developers are not using the Symphony at

00:28:38,380 --> 00:28:42,790
the moment but still if you are starting

00:28:40,600 --> 00:28:44,830
the new project I will suggest you to

00:28:42,790 --> 00:28:47,550
try symphony

00:28:44,830 --> 00:28:51,730
okay updating the existing projects

00:28:47,550 --> 00:28:53,950
sorry to same 24 it's possible of course

00:28:51,730 --> 00:28:55,900
it will take some time for you because

00:28:53,950 --> 00:28:58,930
especially if you are working on lower

00:28:55,900 --> 00:29:01,630
version than 3.4 so my advice is to

00:28:58,930 --> 00:29:06,220
upgrade first the same pointee 3.4 and

00:29:01,630 --> 00:29:08,740
then move to same 24 and up why because

00:29:06,220 --> 00:29:12,700
there is a same list of the features is

00:29:08,740 --> 00:29:17,010
included in symphony 3.4 and sim 24 just

00:29:12,700 --> 00:29:20,200
there is a lot of deprecated code I

00:29:17,010 --> 00:29:21,550
think it works updating I just don't

00:29:20,200 --> 00:29:23,290
think that you if you have like huge

00:29:21,550 --> 00:29:26,950
project this won't be like today's

00:29:23,290 --> 00:29:28,810
upgrade it will take a lot of time so

00:29:26,950 --> 00:29:33,070
the latest version of symphony was

00:29:28,810 --> 00:29:36,070
released a few days ago it's same 24.3

00:29:33,070 --> 00:29:40,720
it's really it was released on the last

00:29:36,070 --> 00:29:43,860
day of May and it has a huge list of the

00:29:40,720 --> 00:29:46,840
upgrades so basically I didn't have that

00:29:43,860 --> 00:29:48,460
much space on a slice to list all the

00:29:46,840 --> 00:29:51,430
things that were updated but you have

00:29:48,460 --> 00:29:55,300
nice blog posts where the entire list is

00:29:51,430 --> 00:29:57,760
updated here one of them my favorite

00:29:55,300 --> 00:30:00,010
thing from symphony for is a messenger

00:29:57,760 --> 00:30:02,800
component I saw on a list there is a

00:30:00,010 --> 00:30:05,440
talk about that so I advise you to go

00:30:02,800 --> 00:30:07,620
there and listen it's very it's very

00:30:05,440 --> 00:30:10,720
useful component if you are using

00:30:07,620 --> 00:30:13,270
message cues like RabbitMQ or something

00:30:10,720 --> 00:30:18,130
else it's very easy to set up very easy

00:30:13,270 --> 00:30:20,530
to use and it's quite quite powerful ok

00:30:18,130 --> 00:30:23,110
regarding the philosophy behind the

00:30:20,530 --> 00:30:27,340
symphony and why they all changed

00:30:23,110 --> 00:30:30,280
everything is that then there the spirit

00:30:27,340 --> 00:30:32,560
is keep coding your features don't

00:30:30,280 --> 00:30:34,090
bother it like removing forms from

00:30:32,560 --> 00:30:36,850
symphony stack or something like that

00:30:34,090 --> 00:30:39,430
just do what you need if you need to

00:30:36,850 --> 00:30:42,460
have really simple web crawler you will

00:30:39,430 --> 00:30:44,950
do that very easy with console and bit

00:30:42,460 --> 00:30:46,930
console component if you need some

00:30:44,950 --> 00:30:49,480
powerful back-end system for your

00:30:46,930 --> 00:30:51,490
website you can use Symphony API

00:30:49,480 --> 00:30:54,940
platform we just type in composer

00:30:51,490 --> 00:30:57,610
require API inside your terminal so

00:30:54,940 --> 00:31:00,670
basically this allows you to fork

00:30:57,610 --> 00:31:03,700
on your logic on your business logic on

00:31:00,670 --> 00:31:06,910
your project and not focusing on frame

00:31:03,700 --> 00:31:09,460
work of course it will be nice to see

00:31:06,910 --> 00:31:11,110
what is inside the components maybe you

00:31:09,460 --> 00:31:13,690
don't need the entire component maybe

00:31:11,110 --> 00:31:15,550
you just need a small part of it so you

00:31:13,690 --> 00:31:18,490
can remove the component and use some

00:31:15,550 --> 00:31:21,430
other than your custom code but that

00:31:18,490 --> 00:31:24,220
depends on you just get the idea what's

00:31:21,430 --> 00:31:25,660
happening inside frame work and take

00:31:24,220 --> 00:31:28,990
care about performance of your

00:31:25,660 --> 00:31:31,120
application so a year later this is not

00:31:28,990 --> 00:31:34,000
a year later from the release this is a

00:31:31,120 --> 00:31:36,820
year later that we started to use in 24

00:31:34,000 --> 00:31:40,210
and the feeling the working with sinfoni

00:31:36,820 --> 00:31:43,600
for it it seems like to be much nicer

00:31:40,210 --> 00:31:44,830
much easier you feel you have the

00:31:43,600 --> 00:31:46,720
feeling all the time that you are

00:31:44,830 --> 00:31:48,610
controlling everything that you are

00:31:46,720 --> 00:31:51,760
building your stack and basically that's

00:31:48,610 --> 00:31:53,590
the true and prototyping if you are

00:31:51,760 --> 00:31:56,830
building a new project it's way way

00:31:53,590 --> 00:31:58,870
faster in scene 24 so you don't need to

00:31:56,830 --> 00:32:01,750
spend time on configuring the outer wire

00:31:58,870 --> 00:32:04,600
again other - configuring the services

00:32:01,750 --> 00:32:07,360
and other things but you can focus on

00:32:04,600 --> 00:32:09,490
building your application I mentioned

00:32:07,360 --> 00:32:12,400
that already but I love to repeat that

00:32:09,490 --> 00:32:13,870
that flex is amazing thing and this is

00:32:12,400 --> 00:32:18,240
way more important the better

00:32:13,870 --> 00:32:22,900
standardization of symfony applications

00:32:18,240 --> 00:32:25,840
what I can see as a potential problem is

00:32:22,900 --> 00:32:27,730
that people will forget what's actually

00:32:25,840 --> 00:32:29,670
dependency injection is and how to

00:32:27,730 --> 00:32:32,920
configure that I'm not talking about

00:32:29,670 --> 00:32:35,560
like sinfoni developers with 2-3 years

00:32:32,920 --> 00:32:38,230
of experience but for the new developers

00:32:35,560 --> 00:32:40,000
because now that logic is hidden like

00:32:38,230 --> 00:32:42,580
let's call it with some magic you and

00:32:40,000 --> 00:32:44,230
that it's not magic so basically with

00:32:42,580 --> 00:32:46,150
good documentation and if they have

00:32:44,230 --> 00:32:48,250
someone to mentor them or if they dig a

00:32:46,150 --> 00:32:50,350
little bit they could understand what's

00:32:48,250 --> 00:32:53,910
happening inside it but that could be a

00:32:50,350 --> 00:32:58,300
problem because now we have like some

00:32:53,910 --> 00:33:00,610
interface be happy between developer and

00:32:58,300 --> 00:33:06,220
symfony framework which hides some

00:33:00,610 --> 00:33:07,990
complexity in behind see phone is also

00:33:06,220 --> 00:33:10,210
great as a macro framework I mention

00:33:07,990 --> 00:33:10,850
that already and I think now we really

00:33:10,210 --> 00:33:13,759
file

00:33:10,850 --> 00:33:17,630
framework that is not limitation for any

00:33:13,759 --> 00:33:20,570
application and for the end of my talks

00:33:17,630 --> 00:33:23,419
this is the current status as an image

00:33:20,570 --> 00:33:26,360
so development of Symphony file has

00:33:23,419 --> 00:33:30,289
already started so that's the reason why

00:33:26,360 --> 00:33:32,720
I put the boot analyst the schedule with

00:33:30,289 --> 00:33:34,610
releases because if it is promised that

00:33:32,720 --> 00:33:37,309
it will it will be released I don't know

00:33:34,610 --> 00:33:39,649
on November last day of November 2017

00:33:37,309 --> 00:33:42,440
you can count on that that will happen

00:33:39,649 --> 00:33:44,779
and this is amazing part of symphony

00:33:42,440 --> 00:33:46,970
community which which find which found

00:33:44,779 --> 00:33:49,970
the way how to deliver everything on

00:33:46,970 --> 00:33:52,100
time and there are a lot of smart people

00:33:49,970 --> 00:33:54,500
who are doing amazing work inside

00:33:52,100 --> 00:33:57,320
community so that's again one of the

00:33:54,500 --> 00:33:58,080
strengths points of framework okay thank

00:33:57,320 --> 00:34:18,790
you

00:33:58,080 --> 00:34:18,790

YouTube URL: https://www.youtube.com/watch?v=8Hv65sWYIxk


