Title: Migrating to PHP 7 | Stefan Priebsch
Publication date: 2019-10-10
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Stefan Priebsch (thePHP.cc) | https://phpconference.com/speaker/stefan-priebsch/

You are still on PHP 5? If not, this talk is not for you. What exactly keeps you from deploying PHP 7 to production? If you already know, this talk will provide you with proven tactics to get your application ready for PHP 7 and migrate successfully. If you are not sure, what the shopstopper really is, you will learn how to analyze the status quo, develop a plan on how to migrate and sell the whole project to your boss or customer.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:01,550 --> 00:00:06,899
[Music]

00:00:04,400 --> 00:00:10,380
good morning I don't know if that's

00:00:06,899 --> 00:00:13,490
still valid but in Bavaria its mild side

00:00:10,380 --> 00:00:16,260
starting at 11 but it's not yet 11 so

00:00:13,490 --> 00:00:20,250
thanks for showing up in such great

00:00:16,260 --> 00:00:24,269
numbers I have to admit that I was

00:00:20,250 --> 00:00:26,490
curious as to whether that's a topic

00:00:24,269 --> 00:00:28,890
that's still relevant for them for a big

00:00:26,490 --> 00:00:33,090
majority at the conference or if every

00:00:28,890 --> 00:00:35,340
says well that's boring and and if you

00:00:33,090 --> 00:00:37,140
read the description in the program

00:00:35,340 --> 00:00:38,969
which I did this morning just to make

00:00:37,140 --> 00:00:42,239
sure that I'm actually going to deliver

00:00:38,969 --> 00:00:43,980
what I've promised it's completely

00:00:42,239 --> 00:00:47,879
screwed up and doesn't make any sense

00:00:43,980 --> 00:00:49,920
and I'm sure that I may have handed in

00:00:47,879 --> 00:00:52,890
something that was screwed up but not in

00:00:49,920 --> 00:00:54,059
that way so some editorial process

00:00:52,890 --> 00:00:56,460
screwed that up

00:00:54,059 --> 00:00:58,710
so actually you should not be here

00:00:56,460 --> 00:01:00,989
unless you have not read the program

00:00:58,710 --> 00:01:03,359
description which probably means that

00:01:00,989 --> 00:01:07,409
you're either here to be entertained by

00:01:03,359 --> 00:01:10,229
my jokes which never work or you are

00:01:07,409 --> 00:01:11,820
already you're in fact not running PHP

00:01:10,229 --> 00:01:14,340
seven because if you are you will

00:01:11,820 --> 00:01:17,700
probably not enjoy that presentation a

00:01:14,340 --> 00:01:19,950
lot and this is definitely as the title

00:01:17,700 --> 00:01:22,710
promises if you're not yet running on

00:01:19,950 --> 00:01:25,170
PHP seven then I'm gonna talk a little

00:01:22,710 --> 00:01:27,860
bit about some experiences that we made

00:01:25,170 --> 00:01:32,100
and give you some tips and tricks on

00:01:27,860 --> 00:01:35,040
where to put the focus so to be very

00:01:32,100 --> 00:01:38,070
honest with you that's a it's it's a

00:01:35,040 --> 00:01:40,950
weird topic we worked with a large

00:01:38,070 --> 00:01:42,600
company I'm starting last year a big

00:01:40,950 --> 00:01:45,630
migration project where they did some

00:01:42,600 --> 00:01:48,060
really nifty things in PHP like

00:01:45,630 --> 00:01:50,130
including long-running processes and

00:01:48,060 --> 00:01:52,350
Damons written in PHP and signal

00:01:50,130 --> 00:01:54,360
handling and everything and we actually

00:01:52,350 --> 00:01:57,149
helped them to complete that pretty

00:01:54,360 --> 00:02:00,079
successfully of course I have to say

00:01:57,149 --> 00:02:02,969
that here but it was in fact successful

00:02:00,079 --> 00:02:05,310
and and at the time I thought well this

00:02:02,969 --> 00:02:07,200
is cool I have some new insights and I

00:02:05,310 --> 00:02:10,410
want to create a presentation to share

00:02:07,200 --> 00:02:13,200
them then when the time comes to prepare

00:02:10,410 --> 00:02:13,959
that thing the big problem is you always

00:02:13,200 --> 00:02:18,219
have to

00:02:13,959 --> 00:02:20,500
down into the old deep dark ages of PHP

00:02:18,219 --> 00:02:22,359
kind of and and deal with things and

00:02:20,500 --> 00:02:25,510
then all those memories come up and it's

00:02:22,359 --> 00:02:28,239
it's always emotionally very challenging

00:02:25,510 --> 00:02:30,129
to me so I'll probably get pretty

00:02:28,239 --> 00:02:32,260
emotionally here and there but and then

00:02:30,129 --> 00:02:34,750
again I'm known to be an emotional guy

00:02:32,260 --> 00:02:37,389
anyway so don't worry I'm one of three

00:02:34,750 --> 00:02:41,379
cofounders of the PHP consulting company

00:02:37,389 --> 00:02:44,260
and I'm gonna spare you the the bragging

00:02:41,379 --> 00:02:48,700
and just give you the commercial and we

00:02:44,260 --> 00:02:52,030
turn ten this year and we are disclosing

00:02:48,700 --> 00:02:54,849
a treat on every tenth of a month and

00:02:52,030 --> 00:02:56,650
this is what we did to this date and

00:02:54,849 --> 00:02:59,889
we're gonna continue doing similar

00:02:56,650 --> 00:03:01,750
things until December so you just want

00:02:59,889 --> 00:03:05,079
to might you just might want to follow

00:03:01,750 --> 00:03:07,269
us on Twitter to get notified when the

00:03:05,079 --> 00:03:10,230
next cool thing turns up and maybe there

00:03:07,269 --> 00:03:12,340
is something in it for you

00:03:10,230 --> 00:03:14,290
that's all the advertisement you're

00:03:12,340 --> 00:03:18,359
gonna get for today and the rest you can

00:03:14,290 --> 00:03:21,220
find on Google let's talk about

00:03:18,359 --> 00:03:24,579
migrating to PHP seven and let's start

00:03:21,220 --> 00:03:27,909
with selling that I know that frequently

00:03:24,579 --> 00:03:31,780
people say you know we would love to do

00:03:27,909 --> 00:03:33,519
all that and do a lot of things but we

00:03:31,780 --> 00:03:35,650
don't get to do it because our boss

00:03:33,519 --> 00:03:39,449
doesn't think it's valuable or our

00:03:35,650 --> 00:03:42,729
client isn't willing to pay any money so

00:03:39,449 --> 00:03:45,549
how do we sell that internally or

00:03:42,729 --> 00:03:48,310
externally and yes of course that is

00:03:45,549 --> 00:03:51,729
challenging because it's always kind of

00:03:48,310 --> 00:03:54,099
yeah you're not really getting a lot as

00:03:51,729 --> 00:03:56,739
in new features I mean the language has

00:03:54,099 --> 00:03:58,569
cool new features but just because the

00:03:56,739 --> 00:04:00,579
code runs on the new language doesn't

00:03:58,569 --> 00:04:03,579
mean that it makes use of any of that so

00:04:00,579 --> 00:04:05,829
there is no real perceived benefit now

00:04:03,579 --> 00:04:08,650
the cool thing about PHP 7 is it's

00:04:05,829 --> 00:04:11,229
really fast so that's actually a selling

00:04:08,650 --> 00:04:16,359
point you can say you know we kind of

00:04:11,229 --> 00:04:18,609
get like 100% speed up we just have to

00:04:16,359 --> 00:04:20,500
put in some engineering effort to get

00:04:18,609 --> 00:04:22,270
there and and there's probably going to

00:04:20,500 --> 00:04:25,440
be more speed up coming along the line

00:04:22,270 --> 00:04:25,440
with future versions of PHP

00:04:25,570 --> 00:04:29,760
that may or may not help if it's more

00:04:28,720 --> 00:04:33,750
about the numbers

00:04:29,760 --> 00:04:37,120
well you could try gdpr and say you know

00:04:33,750 --> 00:04:39,400
we are running on outdated unsupported

00:04:37,120 --> 00:04:42,070
versions there is that page on php.net

00:04:39,400 --> 00:04:45,370
which shows the version support and

00:04:42,070 --> 00:04:46,510
there is no PHP 5 version that's that's

00:04:45,370 --> 00:04:49,030
support it anymore

00:04:46,510 --> 00:04:51,160
I think what's the best in you know

00:04:49,030 --> 00:04:54,720
better which PHP versions which seven

00:04:51,160 --> 00:04:58,390
versions are still officially supported

00:04:54,720 --> 00:05:00,580
yeah so we are quite far end and there

00:04:58,390 --> 00:05:03,250
is a stable release cycle and this is

00:05:00,580 --> 00:05:04,600
going to continue so basically every

00:05:03,250 --> 00:05:06,520
year there's going to be a new minor

00:05:04,600 --> 00:05:09,190
version and then an older version is

00:05:06,520 --> 00:05:11,320
going to go out of support in former

00:05:09,190 --> 00:05:13,990
times that was different we're gonna go

00:05:11,320 --> 00:05:16,290
in greater depth into that later so you

00:05:13,990 --> 00:05:19,000
can actually go ahead and say you know

00:05:16,290 --> 00:05:23,710
we are running on unsupported software

00:05:19,000 --> 00:05:25,540
so if there is a data breach then

00:05:23,710 --> 00:05:27,880
somebody's gonna come and look at our

00:05:25,540 --> 00:05:29,860
systems and they're gonna say well you

00:05:27,880 --> 00:05:33,010
were running outdated software that was

00:05:29,860 --> 00:05:34,870
unsupported so you could not apply any

00:05:33,010 --> 00:05:38,380
security fixes because they were none

00:05:34,870 --> 00:05:40,150
and now you got hacked so yeah well they

00:05:38,380 --> 00:05:42,130
probably somebody's gonna sue you and

00:05:40,150 --> 00:05:44,380
here's the bad news your insurance is

00:05:42,130 --> 00:05:47,200
not gonna pay you because you didn't

00:05:44,380 --> 00:05:51,550
upgrade and that's a serious legal risk

00:05:47,200 --> 00:05:52,840
so I may not like the fact that the

00:05:51,550 --> 00:05:56,170
world is that way but you could actually

00:05:52,840 --> 00:05:58,570
try to make that a selling point and it

00:05:56,170 --> 00:06:00,420
has worked pretty well last year I can

00:05:58,570 --> 00:06:03,910
assure you of that

00:06:00,420 --> 00:06:06,370
another thing incremental maintenance

00:06:03,910 --> 00:06:10,270
cost I mean we all know that it gets

00:06:06,370 --> 00:06:12,600
more expensive to maintain stuff over

00:06:10,270 --> 00:06:16,210
time that's a no-brainer

00:06:12,600 --> 00:06:20,230
but why do we never make that explicit

00:06:16,210 --> 00:06:21,880
it's like it gets more more tedious to

00:06:20,230 --> 00:06:24,040
maintain things so it gets more and more

00:06:21,880 --> 00:06:26,500
expensive it takes longer to deliver

00:06:24,040 --> 00:06:29,380
things the risk gets higher we have more

00:06:26,500 --> 00:06:31,360
regressions and suddenly then the client

00:06:29,380 --> 00:06:33,250
complains B internally or externally

00:06:31,360 --> 00:06:36,010
whoever is using the system is gonna

00:06:33,250 --> 00:06:38,650
complain and say you know you have

00:06:36,010 --> 00:06:39,409
become quite expensive in delivering new

00:06:38,650 --> 00:06:40,759
features because

00:06:39,409 --> 00:06:42,919
every new feature now is like a

00:06:40,759 --> 00:06:47,449
gazillion bucks and it used to be a

00:06:42,919 --> 00:06:50,330
couple of hundred or thousand maybe so

00:06:47,449 --> 00:06:54,830
why not make that explicit upfront the

00:06:50,330 --> 00:06:58,249
next time you draw draft an SLA or a

00:06:54,830 --> 00:07:01,839
contract and you say okay so dear

00:06:58,249 --> 00:07:04,999
customer you have two choices we can

00:07:01,839 --> 00:07:07,339
deploy that software and then keep

00:07:04,999 --> 00:07:10,429
maintaining it just doing the bare

00:07:07,339 --> 00:07:13,099
minimum maintenance cost is gonna go up

00:07:10,429 --> 00:07:15,469
every year because it's gonna be more

00:07:13,099 --> 00:07:18,829
effort for us every year so we are gonna

00:07:15,469 --> 00:07:21,379
to tell you now that each coming year

00:07:18,829 --> 00:07:25,039
maintenance costs by definition will go

00:07:21,379 --> 00:07:26,899
up and you can cut it down by at any

00:07:25,039 --> 00:07:30,219
given point in time saying okay I want

00:07:26,899 --> 00:07:33,559
to migrate to you know up-to-date

00:07:30,219 --> 00:07:36,199
technology that cuts the maintenance

00:07:33,559 --> 00:07:37,579
cost again or we can draw up a contract

00:07:36,199 --> 00:07:39,529
where we say you know we're gonna do

00:07:37,579 --> 00:07:44,419
that continuously and keep up to date

00:07:39,529 --> 00:07:47,209
and then we can keep the cost at a

00:07:44,419 --> 00:07:50,089
steady level and of course the cost then

00:07:47,209 --> 00:07:53,149
factors in the migration work that you

00:07:50,089 --> 00:07:55,999
need to do that may not help you a lot

00:07:53,149 --> 00:07:58,610
for existing contracts or situations but

00:07:55,999 --> 00:08:01,369
the argument that maintenance gets more

00:07:58,610 --> 00:08:05,779
and more expensive is valid because a

00:08:01,369 --> 00:08:08,419
lot of major PHP projects our PHP 7 only

00:08:05,779 --> 00:08:11,449
these days so if you want to get

00:08:08,419 --> 00:08:13,519
something cool and decent on PHP 5 you

00:08:11,449 --> 00:08:15,739
either have to write at your own or you

00:08:13,519 --> 00:08:17,539
have to back pour the PHP 7 version and

00:08:15,739 --> 00:08:21,739
I can assure you both of them are not

00:08:17,539 --> 00:08:25,099
fun and then probably the question is

00:08:21,739 --> 00:08:26,089
gonna raise well should we rewrite maybe

00:08:25,099 --> 00:08:29,539
nodejs

00:08:26,089 --> 00:08:35,569
or or golang or Erlang or something cool

00:08:29,539 --> 00:08:37,699
rather than that crappy old PHP and you

00:08:35,569 --> 00:08:39,589
kind of will have to counter that if it

00:08:37,699 --> 00:08:41,180
if it's about moving to another language

00:08:39,589 --> 00:08:46,459
because of course you want to stick with

00:08:41,180 --> 00:08:49,130
PHP I'm just assuming that I would so

00:08:46,459 --> 00:08:51,020
you're saying well we can rewrite we

00:08:49,130 --> 00:08:52,910
could rewrite but

00:08:51,020 --> 00:08:57,890
do we actually know what the system does

00:08:52,910 --> 00:08:59,780
I mean if we create a new system what's

00:08:57,890 --> 00:09:01,490
it's supposed to do we don't even know

00:08:59,780 --> 00:09:05,420
what the existing software does I mean

00:09:01,490 --> 00:09:07,520
of course we know in the general for the

00:09:05,420 --> 00:09:10,100
general business cases but what about

00:09:07,520 --> 00:09:12,140
all those edge cases which edge cases

00:09:10,100 --> 00:09:16,070
does our system support in the first

00:09:12,140 --> 00:09:20,390
place we don't know and probably we have

00:09:16,070 --> 00:09:22,250
no big suite of automated tests so we

00:09:20,390 --> 00:09:26,030
really have no means and you know

00:09:22,250 --> 00:09:29,210
finding out or proving the point so if

00:09:26,030 --> 00:09:32,120
we were to rewrite the software which of

00:09:29,210 --> 00:09:34,340
the features could we drop which of the

00:09:32,120 --> 00:09:36,170
features were we supposed to recreate in

00:09:34,340 --> 00:09:38,330
the way they are even though we don't

00:09:36,170 --> 00:09:40,280
know what they exactly are and which of

00:09:38,330 --> 00:09:43,010
the features should we question and

00:09:40,280 --> 00:09:44,630
recreate in a different way and suddenly

00:09:43,010 --> 00:09:46,810
there's gonna be a lot of discussion

00:09:44,630 --> 00:09:54,290
it's basically usually ends up with

00:09:46,810 --> 00:09:59,450
where maybe we should not rewrite ok so

00:09:54,290 --> 00:10:03,110
hopefully some of these ideas give you

00:09:59,450 --> 00:10:05,230
pointers as to trying to sell an upgrade

00:10:03,110 --> 00:10:07,970
I know it's hard I know it's tough but

00:10:05,230 --> 00:10:13,400
trust me the GDP are a thing usually is

00:10:07,970 --> 00:10:17,980
a pretty good bit so assuming you have

00:10:13,400 --> 00:10:21,650
its old preparations we need some

00:10:17,980 --> 00:10:24,980
getting ready for that migration thingy

00:10:21,650 --> 00:10:28,850
whatever that exactly may be so first of

00:10:24,980 --> 00:10:30,770
all you will need PHP 7 um and and

00:10:28,850 --> 00:10:33,020
you're gonna look at that and if I were

00:10:30,770 --> 00:10:34,730
sitting in the crowd like five years ago

00:10:33,020 --> 00:10:37,580
looking at that slide I was saying you

00:10:34,730 --> 00:10:39,770
know that's the type of slide that you

00:10:37,580 --> 00:10:41,360
put up there if you really have no clue

00:10:39,770 --> 00:10:45,020
how to fill the time cuz that's an

00:10:41,360 --> 00:10:48,530
absolute no-brainer yeah that would have

00:10:45,020 --> 00:10:50,810
been five years ago in the last five or

00:10:48,530 --> 00:10:52,880
even 10 years I've seen many many

00:10:50,810 --> 00:10:56,390
projects and many many companies and I

00:10:52,880 --> 00:11:00,650
can assure you for some companies it's

00:10:56,390 --> 00:11:04,730
really hard to get PHP seven running on

00:11:00,650 --> 00:11:07,310
a system for a lot of developers it is

00:11:04,730 --> 00:11:10,040
hard to get PHP seven or any other

00:11:07,310 --> 00:11:14,660
version of PHP running locally on their

00:11:10,040 --> 00:11:16,940
box I'm old and I still understand still

00:11:14,660 --> 00:11:19,490
don't understand how as a developer you

00:11:16,940 --> 00:11:22,329
could potentially do work without having

00:11:19,490 --> 00:11:26,000
the language that you program in as

00:11:22,329 --> 00:11:29,120
software on your computer but I'm seeing

00:11:26,000 --> 00:11:31,699
it every month somewhere so there are a

00:11:29,120 --> 00:11:35,630
lot of companies out there who have a

00:11:31,699 --> 00:11:38,120
hard time getting code executed on some

00:11:35,630 --> 00:11:40,670
box be that a live server or some

00:11:38,120 --> 00:11:42,980
staging server def box or a local

00:11:40,670 --> 00:11:45,079
machine and my recommendation to

00:11:42,980 --> 00:11:48,199
everybody would be well the first thing

00:11:45,079 --> 00:11:51,889
that you really need to do is install

00:11:48,199 --> 00:11:54,860
PHP seven latest version preferably

00:11:51,889 --> 00:11:57,110
locally maybe have some fun and play

00:11:54,860 --> 00:12:00,040
with it try to run your code they see

00:11:57,110 --> 00:12:02,389
what happens it's very educational so

00:12:00,040 --> 00:12:04,970
assuming that most of you probably are

00:12:02,389 --> 00:12:07,310
able to do that and probably maybe even

00:12:04,970 --> 00:12:09,709
have done it that's in fact a no-brainer

00:12:07,310 --> 00:12:13,699
but I know out there there are so many

00:12:09,709 --> 00:12:16,069
instances where actually the weirdest

00:12:13,699 --> 00:12:18,260
one I encountered was where we did a

00:12:16,069 --> 00:12:20,360
code review and I asked so what's what

00:12:18,260 --> 00:12:23,329
can you show me that class there there

00:12:20,360 --> 00:12:24,620
was a class referenced and I said can we

00:12:23,329 --> 00:12:28,130
have a look at that class and the

00:12:24,620 --> 00:12:30,500
different they've said no hey what yeah

00:12:28,130 --> 00:12:35,060
no I I don't have the source code on my

00:12:30,500 --> 00:12:37,430
box so don't ask me how they did it but

00:12:35,060 --> 00:12:39,500
they actually managed to develop without

00:12:37,430 --> 00:12:43,550
running PHP locally and even without

00:12:39,500 --> 00:12:46,399
having source code locally that's kind

00:12:43,550 --> 00:12:48,589
of weird I mean there there are many

00:12:46,399 --> 00:12:50,769
things that you can't do that way and we

00:12:48,589 --> 00:12:54,889
really don't want to go any deeper but

00:12:50,769 --> 00:12:57,199
yes I've seen bad things so you're gonna

00:12:54,889 --> 00:12:59,529
need a bunch of tools and my first

00:12:57,199 --> 00:13:02,959
recommendation with regards to tools is

00:12:59,529 --> 00:13:06,230
since you now have a current version of

00:13:02,959 --> 00:13:08,540
PHP installed you should always run

00:13:06,230 --> 00:13:10,730
those tools on this current version of

00:13:08,540 --> 00:13:13,730
PHP it doesn't absolutely make no sense

00:13:10,730 --> 00:13:15,470
to try to run existing current tools on

00:13:13,730 --> 00:13:17,910
PHP 5 it's not going to work out

00:13:15,470 --> 00:13:22,080
so you need a current version of

00:13:17,910 --> 00:13:24,060
HP on some box if it's if you have and

00:13:22,080 --> 00:13:26,670
setup where your def box does not allow

00:13:24,060 --> 00:13:29,220
you to install PHP seven easily then you

00:13:26,670 --> 00:13:32,220
know setup a different box install PHP

00:13:29,220 --> 00:13:36,090
seven latest and then go and have fun

00:13:32,220 --> 00:13:38,280
with some tools the simplest tool in

00:13:36,090 --> 00:13:41,610
fact is the linty which is built into

00:13:38,280 --> 00:13:43,860
PHP you can invoke it by calling PHP - L

00:13:41,610 --> 00:13:45,690
at the command line and essentially

00:13:43,860 --> 00:13:46,260
that's going to run a syntax check on

00:13:45,690 --> 00:13:48,300
your file

00:13:46,260 --> 00:13:49,980
technically it's compiling the file and

00:13:48,300 --> 00:13:53,070
if there are any errors it's going to

00:13:49,980 --> 00:13:55,890
tell you and in fact a lot of the easy

00:13:53,070 --> 00:13:58,860
low hanging fruit migration problems are

00:13:55,890 --> 00:14:00,660
due to oh you have a function or class

00:13:58,860 --> 00:14:04,230
name that's a reserved name now you

00:14:00,660 --> 00:14:07,620
can't use that you can't use object as a

00:14:04,230 --> 00:14:10,710
name in PHP seven I think and you could

00:14:07,620 --> 00:14:12,690
before so you have a class named object

00:14:10,710 --> 00:14:14,460
and that's not possible in PHP seven so

00:14:12,690 --> 00:14:16,770
it's technically a fatal error on

00:14:14,460 --> 00:14:19,110
compilation and the linter is going to

00:14:16,770 --> 00:14:22,080
show you that so the first thing you do

00:14:19,110 --> 00:14:24,300
is you run the linty whether you run the

00:14:22,080 --> 00:14:29,070
linty at the command line or you rely on

00:14:24,300 --> 00:14:31,680
your IDE to do that it's up to you the

00:14:29,070 --> 00:14:35,040
important thing is that you need files

00:14:31,680 --> 00:14:37,440
that are syntactically correct on that

00:14:35,040 --> 00:14:40,200
current version of PHP otherwise all the

00:14:37,440 --> 00:14:41,700
analysis tools are just gonna fail but

00:14:40,200 --> 00:14:44,550
they will not tell you that they fail

00:14:41,700 --> 00:14:47,030
they will just produce crap output that

00:14:44,550 --> 00:14:55,610
gives you a false sense of understanding

00:14:47,030 --> 00:15:00,480
so a good IDE has code inspections and

00:14:55,610 --> 00:15:04,020
turn all of them on and start listening

00:15:00,480 --> 00:15:05,760
to them they usually give you a point at

00:15:04,020 --> 00:15:07,890
to you know that's a problem there or

00:15:05,760 --> 00:15:09,900
that doesn't work in PHP seven sometimes

00:15:07,890 --> 00:15:12,810
they tell you outright you know that's

00:15:09,900 --> 00:15:15,660
that doesn't work or there is warnings

00:15:12,810 --> 00:15:19,320
and stuff so you get a feeling for how

00:15:15,660 --> 00:15:21,360
bad it is of course it's not enjoyable

00:15:19,320 --> 00:15:23,490
to like go through the whole code base

00:15:21,360 --> 00:15:25,910
and try to do that so I'm not suggesting

00:15:23,490 --> 00:15:28,830
to do this but what I'm suggesting is

00:15:25,910 --> 00:15:31,920
start to make that a habit to trust your

00:15:28,830 --> 00:15:34,079
IDE so if you know which ID

00:15:31,920 --> 00:15:35,699
to use and just because I'm on camera

00:15:34,079 --> 00:15:38,790
I'm not gonna say the name because

00:15:35,699 --> 00:15:40,709
otherwise SNS is gonna get sued because

00:15:38,790 --> 00:15:45,089
it's a paid commercial or what it's not

00:15:40,709 --> 00:15:51,540
pay whatever don't know you say the name

00:15:45,089 --> 00:15:53,519
your settlement okay so I use phpstorm

00:15:51,540 --> 00:15:56,579
and I really like it and they are not

00:15:53,519 --> 00:15:58,319
paying me to say that so it's a free

00:15:56,579 --> 00:16:01,019
will decision and I think it's a really

00:15:58,319 --> 00:16:03,230
good IDE and there is even that there is

00:16:01,019 --> 00:16:05,999
even add-on with additional inspections

00:16:03,230 --> 00:16:08,730
some of them as a paid version and they

00:16:05,999 --> 00:16:11,189
are also really really good and they

00:16:08,730 --> 00:16:13,559
will just discover problems or point you

00:16:11,189 --> 00:16:15,389
at potential problems much earlier

00:16:13,559 --> 00:16:16,980
before you even get to write tests or

00:16:15,389 --> 00:16:18,949
before you even get to execute the code

00:16:16,980 --> 00:16:21,720
so that does pay off

00:16:18,949 --> 00:16:26,339
it's really worth to invest some money

00:16:21,720 --> 00:16:28,529
in that and then there is that tool the

00:16:26,339 --> 00:16:30,749
PHP 7 compatibility checker it's

00:16:28,529 --> 00:16:33,059
available on github and the first thing

00:16:30,749 --> 00:16:36,029
is going to tell you is this project is

00:16:33,059 --> 00:16:38,939
not supported anymore yes that's because

00:16:36,029 --> 00:16:41,759
it's a tool that's assessing you have

00:16:38,939 --> 00:16:44,189
PHP 5 code and what are the problems

00:16:41,759 --> 00:16:48,239
when you try to run that on PHP 7 and

00:16:44,189 --> 00:16:50,639
PHP 7 is kind of it's there so there is

00:16:48,239 --> 00:16:53,489
nothing changing if it's running on PHP

00:16:50,639 --> 00:16:54,809
7 we're good if it's it doesn't really

00:16:53,489 --> 00:16:57,989
care whether it runs on subsequent

00:16:54,809 --> 00:16:59,369
versions of PHP 7 too much so even

00:16:57,989 --> 00:17:02,220
though the project is not maintained

00:16:59,369 --> 00:17:05,069
anymore I like to use that tool because

00:17:02,220 --> 00:17:07,949
it gives you a list of sting of things

00:17:05,069 --> 00:17:11,189
to look at again it cannot possibly

00:17:07,949 --> 00:17:15,179
discover all the small and weird

00:17:11,189 --> 00:17:16,110
intricacies intricacies so don't if the

00:17:15,179 --> 00:17:18,360
list is short

00:17:16,110 --> 00:17:19,860
don't be mistaking and believing that oh

00:17:18,360 --> 00:17:22,980
everything is going to be smooth right

00:17:19,860 --> 00:17:25,169
and there's a lot of things that the

00:17:22,980 --> 00:17:27,240
tool cannot detect but some of the

00:17:25,169 --> 00:17:30,269
things it can and they are usually

00:17:27,240 --> 00:17:32,639
pretty easy to fix sometimes it's just

00:17:30,269 --> 00:17:35,850
making the distinction between is it a

00:17:32,639 --> 00:17:39,090
false positive or not so in PHP 7 there

00:17:35,850 --> 00:17:41,700
is some changes in behavior with regards

00:17:39,090 --> 00:17:44,039
to like for each loops if you work in

00:17:41,700 --> 00:17:45,280
combination with references and to weird

00:17:44,039 --> 00:17:48,160
things to the internal

00:17:45,280 --> 00:17:51,190
ray pointer peach p7 behaves differently

00:17:48,160 --> 00:17:52,990
than previous versions so whenever you

00:17:51,190 --> 00:17:54,610
do something like that the tool is gonna

00:17:52,990 --> 00:17:56,740
warn you and say oh there might be an

00:17:54,610 --> 00:17:58,300
instance where you have a problem and if

00:17:56,740 --> 00:17:59,680
you look at the code most of the time

00:17:58,300 --> 00:18:02,310
you realize now there is no problem

00:17:59,680 --> 00:18:04,720
sometimes you just have to sort of

00:18:02,310 --> 00:18:08,440
rewrite the code a little or maybe add a

00:18:04,720 --> 00:18:11,410
guard clause to to try to not do some

00:18:08,440 --> 00:18:14,440
stupid things and there's other tools

00:18:11,410 --> 00:18:18,490
and Peach P stand for example or I

00:18:14,440 --> 00:18:20,410
always forget the other one and that

00:18:18,490 --> 00:18:23,280
website actually suggests that you

00:18:20,410 --> 00:18:27,580
should look into those tools they are

00:18:23,280 --> 00:18:29,460
good tools and they produce again just

00:18:27,580 --> 00:18:32,800
like the inspections in your IDE

00:18:29,460 --> 00:18:34,810
valuable output but less valuable for

00:18:32,800 --> 00:18:37,270
the peach p7 migration it's more about

00:18:34,810 --> 00:18:39,790
strictness and typing and stuff and and

00:18:37,270 --> 00:18:43,030
there's usually a lot to complain about

00:18:39,790 --> 00:18:45,600
in legacy code but that really has

00:18:43,030 --> 00:18:50,740
nothing to do with the migration itself

00:18:45,600 --> 00:18:52,570
so it's probably not it has probably not

00:18:50,740 --> 00:18:54,610
makes too much sense to look into those

00:18:52,570 --> 00:18:57,580
tools for the purpose of getting ready

00:18:54,610 --> 00:18:59,890
to migrate still on the long run

00:18:57,580 --> 00:19:04,060
with PHP 7 static code analysis will be

00:18:59,890 --> 00:19:07,060
more and more important ok so one thing

00:19:04,060 --> 00:19:09,100
and again you may think well that's a

00:19:07,060 --> 00:19:12,850
no-brainer unfortunately it's not

00:19:09,100 --> 00:19:15,040
basically every pretty much every large

00:19:12,850 --> 00:19:18,220
legacy code base that I get to see has

00:19:15,040 --> 00:19:20,230
some non unique class names they don't

00:19:18,220 --> 00:19:23,430
use auto loading they use a lot of

00:19:20,230 --> 00:19:26,200
conditional requiring and stuff and

00:19:23,430 --> 00:19:28,960
technically non unique class names are

00:19:26,200 --> 00:19:31,000
used to either use this implementation

00:19:28,960 --> 00:19:32,920
or that implementation for example I've

00:19:31,000 --> 00:19:34,780
seen that for if we're talking to a

00:19:32,920 --> 00:19:37,030
MySQL database we're gonna use that

00:19:34,780 --> 00:19:38,710
implementation of our database class if

00:19:37,030 --> 00:19:41,440
we're talking to Postgres it's going to

00:19:38,710 --> 00:19:44,560
be that one but the name is the same so

00:19:41,440 --> 00:19:46,390
the problem with non unique names is you

00:19:44,560 --> 00:19:49,990
really can't do all two loading in a

00:19:46,390 --> 00:19:52,750
decent fashion plus all the tools are

00:19:49,990 --> 00:19:54,970
going to stumble because they sort of

00:19:52,750 --> 00:19:56,620
assume that names are unique because

00:19:54,970 --> 00:19:59,260
they tell you hey you have a problem in

00:19:56,620 --> 00:20:01,510
that class but wait in which implement

00:19:59,260 --> 00:20:03,970
of that class they are not really up to

00:20:01,510 --> 00:20:06,850
telling you that so all the results that

00:20:03,970 --> 00:20:09,010
you get may be very confusing but nobody

00:20:06,850 --> 00:20:11,860
will ever explicitly put their like oh

00:20:09,010 --> 00:20:13,390
you know basically I'm gonna give you

00:20:11,860 --> 00:20:16,840
crappy results because you have known

00:20:13,390 --> 00:20:18,850
unique class names so it's just it's a

00:20:16,840 --> 00:20:20,710
and it's an assumption that is so

00:20:18,850 --> 00:20:24,340
fundamentally built into the tools that

00:20:20,710 --> 00:20:27,070
they don't even care to check it it

00:20:24,340 --> 00:20:30,790
seems so please do that first it's

00:20:27,070 --> 00:20:33,160
actually very simple to do right so you

00:20:30,790 --> 00:20:35,140
have in the example you have two

00:20:33,160 --> 00:20:37,300
instances of a database class well then

00:20:35,140 --> 00:20:39,070
rename one to MySQL database and the

00:20:37,300 --> 00:20:40,780
other one to Postgres your database and

00:20:39,070 --> 00:20:42,670
then you just have to adjust your

00:20:40,780 --> 00:20:45,490
conditional loading and that's all you

00:20:42,670 --> 00:20:49,150
need to do so make sure you have unique

00:20:45,490 --> 00:20:52,570
class names now this is where the fun

00:20:49,150 --> 00:21:01,150
starts who regularly checks their error

00:20:52,570 --> 00:21:05,560
logs okay it's like a major election you

00:21:01,150 --> 00:21:07,030
always get kind of 50/50 and and I don't

00:21:05,560 --> 00:21:09,880
want to come up with any conspiracy

00:21:07,030 --> 00:21:12,790
theories but seriously why minus one

00:21:09,880 --> 00:21:14,830
because minus one is a bit field and it

00:21:12,790 --> 00:21:17,100
turns every bit to one and internally

00:21:14,830 --> 00:21:20,230
error reporting is a bit field and

00:21:17,100 --> 00:21:23,140
especially in the 5-series new error

00:21:20,230 --> 00:21:26,320
classes have been added and if you at

00:21:23,140 --> 00:21:29,080
some point went into PHP I and I and put

00:21:26,320 --> 00:21:31,270
a value there turns out that if you

00:21:29,080 --> 00:21:33,100
upgrade PHP to a later version there is

00:21:31,270 --> 00:21:36,640
new errors that are not showing up and

00:21:33,100 --> 00:21:39,850
you want to see all errors ever so set

00:21:36,640 --> 00:21:42,790
it to minus one that's binary all ones

00:21:39,850 --> 00:21:47,320
and you are going to see all errors of

00:21:42,790 --> 00:21:50,670
course that might lead to a flooded

00:21:47,320 --> 00:21:54,070
error log well that's exactly the point

00:21:50,670 --> 00:21:56,140
that's exactly what you want to see now

00:21:54,070 --> 00:21:59,440
you need to get into some kind of log

00:21:56,140 --> 00:22:01,810
file analysis right so getting all those

00:21:59,440 --> 00:22:04,390
arrows assuming that you have more than

00:22:01,810 --> 00:22:06,220
one production server you want to

00:22:04,390 --> 00:22:08,140
aggregate those log files there are

00:22:06,220 --> 00:22:11,710
different products that can help you do

00:22:08,140 --> 00:22:12,970
that I do not like some of them for the

00:22:11,710 --> 00:22:15,070
pure fact that

00:22:12,970 --> 00:22:18,840
they are hosted products and you're

00:22:15,070 --> 00:22:20,919
basically uploading your logs to

00:22:18,840 --> 00:22:23,169
somewhere and somewhere is not

00:22:20,919 --> 00:22:25,120
necessarily inside the European Union

00:22:23,169 --> 00:22:28,809
don't get me wrong but from a GDP our

00:22:25,120 --> 00:22:30,669
perspective that's challenging so I will

00:22:28,809 --> 00:22:33,400
not give any recommendation about what

00:22:30,669 --> 00:22:37,659
tools to use or not use that's that's

00:22:33,400 --> 00:22:40,450
your personal pick you should at any

00:22:37,659 --> 00:22:42,580
rate aggregate the logs right it does

00:22:40,450 --> 00:22:43,419
make sense to Co twenty thousand log

00:22:42,580 --> 00:22:46,450
entries today

00:22:43,419 --> 00:22:47,980
how many duplicates don't know so that's

00:22:46,450 --> 00:22:50,320
why you need to aggregate right you want

00:22:47,980 --> 00:22:53,409
to see hey you have fifteen thousand

00:22:50,320 --> 00:22:55,240
instances of that and if fifteen

00:22:53,409 --> 00:22:57,700
thousand instances of that is it's a

00:22:55,240 --> 00:23:00,039
notice because I'm accessing a

00:22:57,700 --> 00:23:02,590
non-existing array key or something like

00:23:00,039 --> 00:23:04,330
that it's really simple just to put a

00:23:02,590 --> 00:23:06,700
guard close in front and say you know

00:23:04,330 --> 00:23:09,429
let's do an is set and if it's not set

00:23:06,700 --> 00:23:11,559
then just do not try to access it and it

00:23:09,429 --> 00:23:14,710
doesn't change the behavior but the

00:23:11,559 --> 00:23:17,950
notice is gone so that's an easy fix and

00:23:14,710 --> 00:23:20,020
it's also a great sort of selling point

00:23:17,950 --> 00:23:22,720
for progress say hey we started off the

00:23:20,020 --> 00:23:26,200
whole migration thing we had like twenty

00:23:22,720 --> 00:23:28,049
thousand log entries a day and that's a

00:23:26,200 --> 00:23:31,240
realistic number by the way

00:23:28,049 --> 00:23:33,669
unfortunately and now we invested some

00:23:31,240 --> 00:23:35,890
time and we are down to say five

00:23:33,669 --> 00:23:38,380
thousand I actually know if a company

00:23:35,890 --> 00:23:40,330
they did it's a kind of buck hunt where

00:23:38,380 --> 00:23:42,940
they said okay we have twenty thousand

00:23:40,330 --> 00:23:45,669
daily log messages beer and pizza for

00:23:42,940 --> 00:23:48,190
everybody like for the whole weekend and

00:23:45,669 --> 00:23:50,350
they did a hackathon type of thing and

00:23:48,190 --> 00:23:52,659
then they were down to a few hundred a

00:23:50,350 --> 00:23:56,679
day and it was just a fun weekend

00:23:52,659 --> 00:23:59,200
basically so it's doable and you should

00:23:56,679 --> 00:24:00,789
consider doing that the ideal goal of

00:23:59,200 --> 00:24:04,270
having an application that does not

00:24:00,789 --> 00:24:06,370
output any warning message whatever yeah

00:24:04,270 --> 00:24:08,830
it's in practice it's kind of hard to

00:24:06,370 --> 00:24:10,690
reach on legacy code for new code you

00:24:08,830 --> 00:24:13,510
should definitely plan and design that

00:24:10,690 --> 00:24:16,659
way for legacy code I'm fully aware that

00:24:13,510 --> 00:24:18,130
it's not really feasible so in some way

00:24:16,659 --> 00:24:20,830
you have to get rid of the noise you can

00:24:18,130 --> 00:24:23,679
either do that by fixing stuff or by

00:24:20,830 --> 00:24:26,230
filtering right and then you have to

00:24:23,679 --> 00:24:27,010
make sure that you are able to find out

00:24:26,230 --> 00:24:29,290
what

00:24:27,010 --> 00:24:31,240
our the error messages that are new

00:24:29,290 --> 00:24:32,590
since we are running on PHP seven

00:24:31,240 --> 00:24:35,470
because essentially that's what you want

00:24:32,590 --> 00:24:37,660
to be able to do compare what errors

00:24:35,470 --> 00:24:40,780
warnings notices and whatnot does my

00:24:37,660 --> 00:24:43,840
application produce on PHP 5 versus PHP

00:24:40,780 --> 00:24:46,960
7 of course in an ideal world where on

00:24:43,840 --> 00:24:49,809
PHP 5 the error log is clean any new

00:24:46,960 --> 00:24:53,290
error has to be attributed to PHP 7 so

00:24:49,809 --> 00:24:55,270
that's easy in reality world isn't that

00:24:53,290 --> 00:24:58,059
beautiful so you will have to do some

00:24:55,270 --> 00:25:00,490
filtering magic whatever maybe you look

00:24:58,059 --> 00:25:03,250
at time stamps whatever you come up with

00:25:00,490 --> 00:25:05,230
um you need to be able to see okay those

00:25:03,250 --> 00:25:07,990
are things that are just showing up on

00:25:05,230 --> 00:25:11,140
PHP 7 so we need to look into them

00:25:07,990 --> 00:25:13,840
because that's a warning then usually is

00:25:11,140 --> 00:25:15,610
a problem and the nasty thing is that

00:25:13,840 --> 00:25:18,220
the problem doesn't necessarily show up

00:25:15,610 --> 00:25:19,690
where the warning shows up but you know

00:25:18,220 --> 00:25:23,919
somewhere else spooky action at a

00:25:19,690 --> 00:25:28,750
distance and you want to avoid that ok

00:25:23,919 --> 00:25:31,559
third party code actually looking back

00:25:28,750 --> 00:25:36,220
at a few migration projects that we have

00:25:31,559 --> 00:25:38,919
supported third-party code is tend to be

00:25:36,220 --> 00:25:41,860
one of the bigger issues and that is

00:25:38,919 --> 00:25:44,890
because at some point in time somebody

00:25:41,860 --> 00:25:47,950
picked a library which was available at

00:25:44,890 --> 00:25:50,500
the time from wherever and basically

00:25:47,950 --> 00:25:53,080
dropped it in the code because a few

00:25:50,500 --> 00:25:55,240
years ago before composer we kind of

00:25:53,080 --> 00:25:57,340
didn't have the clear structure of this

00:25:55,240 --> 00:25:59,980
is where third party goes maybe you have

00:25:57,340 --> 00:26:02,910
a Lib directory maybe not some teams

00:25:59,980 --> 00:26:04,990
have just inline third-party code so

00:26:02,910 --> 00:26:07,090
third-party code and their own code is

00:26:04,990 --> 00:26:09,700
kind of mixed up in the SRC folder and

00:26:07,090 --> 00:26:12,970
the problem with that is that most

00:26:09,700 --> 00:26:15,130
ancient third-party libraries are just

00:26:12,970 --> 00:26:17,620
not supported anymore the more esoteric

00:26:15,130 --> 00:26:20,799
they become they are not supported

00:26:17,620 --> 00:26:23,770
anymore today so you will not be able to

00:26:20,799 --> 00:26:26,919
run them on PHP seven because nobody has

00:26:23,770 --> 00:26:29,410
tailed it has taken the effort to make

00:26:26,919 --> 00:26:31,990
them compatible with PHP seven now you

00:26:29,410 --> 00:26:33,850
have two choices you can make them

00:26:31,990 --> 00:26:36,309
compatible to PHP seven now you have

00:26:33,850 --> 00:26:38,710
inherited code it's now your code you

00:26:36,309 --> 00:26:40,700
have to maintain it or you take a step

00:26:38,710 --> 00:26:42,230
back and say okay maybe we can

00:26:40,700 --> 00:26:45,710
that library and maybe if you're lucky

00:26:42,230 --> 00:26:47,720
there is a PHP seven compliant or PHP

00:26:45,710 --> 00:26:49,640
seven ready version of the library so

00:26:47,720 --> 00:26:51,290
you really have to look into that the

00:26:49,640 --> 00:26:53,120
first thing to do is create an inventory

00:26:51,290 --> 00:26:55,880
and find out what actually what

00:26:53,120 --> 00:26:57,740
third-party code are we using nowadays

00:26:55,880 --> 00:27:01,790
it tends to be simple you just look at

00:26:57,740 --> 00:27:03,830
composer JSON and there it is in code

00:27:01,790 --> 00:27:05,750
that dates back to before composer times

00:27:03,830 --> 00:27:08,570
we have at least in part there is

00:27:05,750 --> 00:27:11,660
dependencies that are not clearly made

00:27:08,570 --> 00:27:13,910
explicit somewhere and there is also a

00:27:11,660 --> 00:27:17,510
license problem potentially I have seen

00:27:13,910 --> 00:27:20,300
people copying and pasting GPL code into

00:27:17,510 --> 00:27:23,270
their application which technically or

00:27:20,300 --> 00:27:25,730
legally would make your application GPL

00:27:23,270 --> 00:27:28,160
due to infectious nature of GPL so

00:27:25,730 --> 00:27:30,170
Stallman hello is gonna hate me but I

00:27:28,160 --> 00:27:33,260
think the GPL is less free than other

00:27:30,170 --> 00:27:35,420
licenses because it forces you to put

00:27:33,260 --> 00:27:38,600
your software under GPL license as well

00:27:35,420 --> 00:27:41,120
and while that technically usually is

00:27:38,600 --> 00:27:44,420
just you know nobody might care from a

00:27:41,120 --> 00:27:46,970
legal perspective it is important and we

00:27:44,420 --> 00:27:49,160
have customers that have run out its and

00:27:46,970 --> 00:27:52,430
bring in external companies to kind of

00:27:49,160 --> 00:27:54,260
find unlicensed software and that's also

00:27:52,430 --> 00:27:56,750
an issue that you have to keep in mind

00:27:54,260 --> 00:27:59,290
which may also be a good selling point

00:27:56,750 --> 00:28:02,990
with regard to legal risks and issues

00:27:59,290 --> 00:28:05,930
especially pre-ipo companies are really

00:28:02,990 --> 00:28:08,270
keen on getting everything clean and we

00:28:05,930 --> 00:28:10,100
have seen outrageous budgets being spent

00:28:08,270 --> 00:28:12,410
on hey we kind of want to get ready for

00:28:10,100 --> 00:28:14,600
an IPO we are not telling you but that's

00:28:12,410 --> 00:28:15,920
sort of the plan and we really make too

00:28:14,600 --> 00:28:18,430
sure may have need to make sure that

00:28:15,920 --> 00:28:21,710
there are no legal risks because pre-ipo

00:28:18,430 --> 00:28:24,430
somebody Sue's us that's a bad thing so

00:28:21,710 --> 00:28:28,190
of course everybody waits sues anyway

00:28:24,430 --> 00:28:29,600
maybe that's some maybe that happens

00:28:28,190 --> 00:28:31,910
more in the United States then it

00:28:29,600 --> 00:28:34,730
happens in Europe but it's for some

00:28:31,910 --> 00:28:36,770
companies it's it's an issue okay so

00:28:34,730 --> 00:28:41,350
check for updated versions or consider

00:28:36,770 --> 00:28:43,790
replacements um and while you're at that

00:28:41,350 --> 00:28:46,310
you should consider moving to composure

00:28:43,790 --> 00:28:48,560
to make all those dependencies explicit

00:28:46,310 --> 00:28:50,360
because with the newer versions of those

00:28:48,560 --> 00:28:52,400
components you want to be able to

00:28:50,360 --> 00:28:54,320
install them by composer there is really

00:28:52,400 --> 00:28:58,870
no point in trying to

00:28:54,320 --> 00:29:01,940
I don't know and I think it's peach p53

00:28:58,870 --> 00:29:05,090
- that's the minimum requirement for

00:29:01,940 --> 00:29:08,090
composure so if you're before peach p53

00:29:05,090 --> 00:29:10,940
we're gonna touch on that a little later

00:29:08,090 --> 00:29:13,940
you have a bigger problem than others

00:29:10,940 --> 00:29:16,340
anyway so maybe you need to get to a

00:29:13,940 --> 00:29:17,840
state where you can run composer but

00:29:16,340 --> 00:29:21,080
then on the other hand I would assume

00:29:17,840 --> 00:29:23,390
that most of you are already in a

00:29:21,080 --> 00:29:27,950
running composer anyway so maybe that's

00:29:23,390 --> 00:29:29,200
less of an issue test automation yes who

00:29:27,950 --> 00:29:32,770
has it

00:29:29,200 --> 00:29:36,950
yeah somehow Sebastian has it great

00:29:32,770 --> 00:29:39,800
of course now this is the day where you

00:29:36,950 --> 00:29:42,770
realize now I understand why we should

00:29:39,800 --> 00:29:46,250
have invested in test automation because

00:29:42,770 --> 00:29:49,280
then we could run our code on PHP 7 or

00:29:46,250 --> 00:29:50,720
run the tests and if the tests fail well

00:29:49,280 --> 00:29:53,060
obviously there's a problem and we don't

00:29:50,720 --> 00:29:56,690
have to find out at in production or

00:29:53,060 --> 00:29:58,850
through a system test but since you have

00:29:56,690 --> 00:30:00,980
not invested enough in test one

00:29:58,850 --> 00:30:03,440
potentially not invested enough and test

00:30:00,980 --> 00:30:06,800
automation in the past you have to pay

00:30:03,440 --> 00:30:09,080
now now I'm not suggesting to say well

00:30:06,800 --> 00:30:11,270
just write unit tests for everything

00:30:09,080 --> 00:30:14,300
because you can refactor that's not

00:30:11,270 --> 00:30:17,030
gonna work usually you cannot write unit

00:30:14,300 --> 00:30:19,880
tests for legacy code that's kind of a

00:30:17,030 --> 00:30:22,400
black-and-white binary statement so it's

00:30:19,880 --> 00:30:24,620
not a hundred percent like that but it's

00:30:22,400 --> 00:30:26,930
more like that then oh it's a breeze to

00:30:24,620 --> 00:30:29,690
write unit tests for legacy code so

00:30:26,930 --> 00:30:33,290
let's just assume it's hard you can't do

00:30:29,690 --> 00:30:35,210
that easily so it's not an option but

00:30:33,290 --> 00:30:37,010
you should look into characterization

00:30:35,210 --> 00:30:38,930
tests and you can run them at different

00:30:37,010 --> 00:30:41,150
level use different technologies to run

00:30:38,930 --> 00:30:45,050
essentially what a characterization test

00:30:41,150 --> 00:30:47,420
is you're running a test and it produces

00:30:45,050 --> 00:30:49,670
your code produces some output maybe an

00:30:47,420 --> 00:30:51,920
HTML page maybe the result of a function

00:30:49,670 --> 00:30:55,870
maybe an object maybe your JSON document

00:30:51,920 --> 00:30:59,900
whatever and you capture that result and

00:30:55,870 --> 00:31:03,230
then you run the test again or modified

00:30:59,900 --> 00:31:07,850
code or in our case on code running on

00:31:03,230 --> 00:31:08,570
PHP seven and you capture the result now

00:31:07,850 --> 00:31:11,360
you compare

00:31:08,570 --> 00:31:14,299
result with the original one they should

00:31:11,360 --> 00:31:15,950
be the same well there are cases where

00:31:14,299 --> 00:31:17,960
they are because of randomness time

00:31:15,950 --> 00:31:21,169
stems and stuff I'm aware of that that's

00:31:17,960 --> 00:31:23,090
a special case but in general you will

00:31:21,169 --> 00:31:25,130
be able to find places where the output

00:31:23,090 --> 00:31:27,769
needs to be the same and if the output

00:31:25,130 --> 00:31:29,149
is not the same hmm there is a problem

00:31:27,769 --> 00:31:32,600
we need to address that

00:31:29,149 --> 00:31:34,840
so characterization tests do not tell

00:31:32,600 --> 00:31:37,519
you yeah everything is right and working

00:31:34,840 --> 00:31:39,200
but they're just gonna say hey the

00:31:37,519 --> 00:31:41,179
result is different you might want to

00:31:39,200 --> 00:31:43,940
look into that and it's up to you to

00:31:41,179 --> 00:31:45,799
decide whether that's a problem or it's

00:31:43,940 --> 00:31:48,529
okay maybe you'll just have to upgrade

00:31:45,799 --> 00:31:50,000
your expectation characterization tests

00:31:48,529 --> 00:31:51,379
don't really work well on the long run

00:31:50,000 --> 00:31:54,320
because on the long run your

00:31:51,379 --> 00:31:55,970
expectations always change but on the

00:31:54,320 --> 00:31:57,590
short run for the purposes of a

00:31:55,970 --> 00:32:01,700
migration it's a great way of getting

00:31:57,590 --> 00:32:03,559
more security or more less risk M or

00:32:01,700 --> 00:32:06,769
more gain more confidence that was what

00:32:03,559 --> 00:32:09,049
I'm trying to say because you kind of

00:32:06,769 --> 00:32:12,620
have proved that well this crucial piece

00:32:09,049 --> 00:32:16,940
of code behaves the same on PHP 7 then

00:32:12,620 --> 00:32:19,460
it used to do in PHP 5 maybe so where

00:32:16,940 --> 00:32:22,669
are you coming from when it comes to

00:32:19,460 --> 00:32:27,529
migrating I'm kind of silently assuming

00:32:22,669 --> 00:32:28,940
that everybody is coming from PHP 5 and

00:32:27,529 --> 00:32:35,179
the question is where are you going -

00:32:28,940 --> 00:32:37,789
well actually still seeing 32-bits

00:32:35,179 --> 00:32:40,340
systems or operating systems still

00:32:37,789 --> 00:32:42,289
running and being upgraded to 64-bit in

00:32:40,340 --> 00:32:43,070
that direction is usually not a big

00:32:42,289 --> 00:32:45,529
problem

00:32:43,070 --> 00:32:47,779
but there are some issues around that if

00:32:45,529 --> 00:32:50,210
you run a 32-bit operating systems you

00:32:47,779 --> 00:32:52,879
have some other problems going the other

00:32:50,210 --> 00:32:55,129
way is kind of a really bad idea which

00:32:52,879 --> 00:32:57,529
you probably don't want to do we have

00:32:55,129 --> 00:33:00,230
some windows versus Linux versus Mac

00:32:57,529 --> 00:33:01,700
issues especially with capitalization

00:33:00,230 --> 00:33:06,529
file system on Windows is not

00:33:01,700 --> 00:33:09,470
case-sensitive Linux is so stuff that

00:33:06,529 --> 00:33:11,539
works on Linux might not work on Windows

00:33:09,470 --> 00:33:14,299
so it's a really stupid idea to develop

00:33:11,539 --> 00:33:17,480
on Linux and deploy in Windows the other

00:33:14,299 --> 00:33:19,399
way around is less of a problem but you

00:33:17,480 --> 00:33:20,790
actually want to stay pretty consistent

00:33:19,399 --> 00:33:22,860
if you can and

00:33:20,790 --> 00:33:26,610
I would like to raise the question

00:33:22,860 --> 00:33:27,960
whether upgrading to PHP 7 and changing

00:33:26,610 --> 00:33:31,620
the operating system should be done at

00:33:27,960 --> 00:33:38,850
the same time probably not preached

00:33:31,620 --> 00:33:41,010
before remnants there is some things

00:33:38,850 --> 00:33:44,010
that were in peach before that kind of

00:33:41,010 --> 00:33:46,200
still made it into PHP 5 code and they

00:33:44,010 --> 00:33:49,470
were deprecated but they still existed

00:33:46,200 --> 00:33:51,480
and there is some nastiness we're gonna

00:33:49,470 --> 00:33:52,980
go into some details I'm not suggesting

00:33:51,480 --> 00:33:55,440
that you're still running peach before

00:33:52,980 --> 00:33:58,070
even though I know that some companies

00:33:55,440 --> 00:34:00,630
are but that's a whole different beast

00:33:58,070 --> 00:34:02,220
so some of the nasty old stuff is

00:34:00,630 --> 00:34:05,010
registered Global's which probably

00:34:02,220 --> 00:34:08,310
everybody has gotten rid of magic quotes

00:34:05,010 --> 00:34:12,120
is more of a problem it it was taken out

00:34:08,310 --> 00:34:15,480
in PHP 5 but in PHP 7 it actually got

00:34:12,120 --> 00:34:17,429
removed so in PHP 5 the behavior was

00:34:15,480 --> 00:34:20,310
gone but you could still have the calls

00:34:17,429 --> 00:34:22,649
and now those calls don't work anymore

00:34:20,310 --> 00:34:25,590
in PHP 7 they are fatal errors so you

00:34:22,649 --> 00:34:27,899
really have to unfortunately look into

00:34:25,590 --> 00:34:31,470
that again to make sure that whatever

00:34:27,899 --> 00:34:34,020
state is if something does stuff with

00:34:31,470 --> 00:34:37,050
magic quotes you want to make sure that

00:34:34,020 --> 00:34:40,110
on PHP 7 things work fine because that's

00:34:37,050 --> 00:34:43,790
security relevant and if you ever find a

00:34:40,110 --> 00:34:47,179
PHP ini file with the Zent Engine 1

00:34:43,790 --> 00:34:51,450
compatibility mode setting to true

00:34:47,179 --> 00:34:54,960
change your job reassigned this is

00:34:51,450 --> 00:34:58,230
something like a small weirdness that in

00:34:54,960 --> 00:35:00,780
in PHP 5 I believe you could use this as

00:34:58,230 --> 00:35:03,420
a variable name and in PHP 7 you can't

00:35:00,780 --> 00:35:06,150
those are kind of easy fixes and just

00:35:03,420 --> 00:35:07,800
for the fun of it in PHP 5 in some

00:35:06,150 --> 00:35:10,140
versions you were able to define

00:35:07,800 --> 00:35:12,510
abstract private methods which makes

00:35:10,140 --> 00:35:14,040
perfectly no sense because abstract says

00:35:12,510 --> 00:35:17,010
well it has to be implemented in the

00:35:14,040 --> 00:35:18,600
base in in this subclass and private

00:35:17,010 --> 00:35:23,910
says it's not it's not visible in the

00:35:18,600 --> 00:35:26,100
subclass so yeah and I'm not assuming

00:35:23,910 --> 00:35:27,900
that you have something like that in

00:35:26,100 --> 00:35:31,650
your code base if you have it's an easy

00:35:27,900 --> 00:35:33,210
fix just for the fun of that so I think

00:35:31,650 --> 00:35:34,620
your goal is going to be to have the

00:35:33,210 --> 00:35:38,010
same PHP version from

00:35:34,620 --> 00:35:40,620
deaf to production and some people think

00:35:38,010 --> 00:35:45,240
well yes that's what containers are for

00:35:40,620 --> 00:35:48,150
right yeah probably

00:35:45,240 --> 00:35:52,410
maybe so yes if you feel like containers

00:35:48,150 --> 00:35:54,930
are gonna help you in some cases it is a

00:35:52,410 --> 00:35:57,090
problem because like existing servers

00:35:54,930 --> 00:35:59,730
have an operating system where it's hard

00:35:57,090 --> 00:36:01,980
to get PHP seven running all the admins

00:35:59,730 --> 00:36:03,960
say no no you can't install PHP seven

00:36:01,980 --> 00:36:06,570
from that software source because we

00:36:03,960 --> 00:36:08,400
don't trust that source so what you're

00:36:06,570 --> 00:36:10,290
gonna do you're gonna do exactly that

00:36:08,400 --> 00:36:12,000
and block it away in a container and

00:36:10,290 --> 00:36:13,490
deploy the container and live system and

00:36:12,000 --> 00:36:16,830
you claimed to have solved the problem

00:36:13,490 --> 00:36:19,050
which I'm not sure you really have so in

00:36:16,830 --> 00:36:21,840
some instances containers can be useful

00:36:19,050 --> 00:36:25,140
but please be aware that they come with

00:36:21,840 --> 00:36:28,230
an additional set of problems so I would

00:36:25,140 --> 00:36:31,470
not automatically assume that you need

00:36:28,230 --> 00:36:35,700
any containerization to migrate to PHP

00:36:31,470 --> 00:36:38,100
seven if you want to go into the

00:36:35,700 --> 00:36:39,380
container direction you should try to

00:36:38,100 --> 00:36:41,880
make that a separate project

00:36:39,380 --> 00:36:43,620
containerize your application first and

00:36:41,880 --> 00:36:45,720
then make the migration a separate

00:36:43,620 --> 00:36:49,470
project otherwise you're kind of mixing

00:36:45,720 --> 00:36:51,480
the risks and honestly I would I would

00:36:49,470 --> 00:36:53,910
prefer you guys to say to your boss you

00:36:51,480 --> 00:36:56,070
know we screwed up the containerization

00:36:53,910 --> 00:36:58,560
project rather than we screwed up the

00:36:56,070 --> 00:37:02,880
migration project so I want the risk on

00:36:58,560 --> 00:37:05,910
the other side but that's just me ah

00:37:02,880 --> 00:37:07,070
utf-8 that's that's one of those nasty

00:37:05,910 --> 00:37:10,320
things

00:37:07,070 --> 00:37:13,200
nobody tends to think about so if

00:37:10,320 --> 00:37:19,410
everything is utf-8 we have absolutely

00:37:13,200 --> 00:37:21,210
no problem in reality it's not and if

00:37:19,410 --> 00:37:24,050
you take your application out of an

00:37:21,210 --> 00:37:27,060
existing environment chances are that

00:37:24,050 --> 00:37:29,790
some encoding stuff is going to be

00:37:27,060 --> 00:37:32,580
different or maybe now it's all utf-8

00:37:29,790 --> 00:37:34,890
and in the past it was not be aware

00:37:32,580 --> 00:37:37,140
there is a plethora of problems that you

00:37:34,890 --> 00:37:38,250
can run into right you need to set the

00:37:37,140 --> 00:37:40,200
encoding in the browser

00:37:38,250 --> 00:37:42,630
what's the encoding the source code is

00:37:40,200 --> 00:37:44,400
in what's the data I work with what's

00:37:42,630 --> 00:37:46,260
the the encoding of the database

00:37:44,400 --> 00:37:48,450
connection so there is different spots

00:37:46,260 --> 00:37:50,220
where you can influence that

00:37:48,450 --> 00:37:52,290
and first of all it's a performance

00:37:50,220 --> 00:37:54,960
thing that son suddenly you have to

00:37:52,290 --> 00:37:56,940
convert back and forth and and on the

00:37:54,960 --> 00:38:00,150
other hand you can run into all those

00:37:56,940 --> 00:38:01,890
weird display problems Japanese even

00:38:00,150 --> 00:38:05,280
have a term for that is called mo jibun

00:38:01,890 --> 00:38:06,840
mo mo G baka I think I don't think I

00:38:05,280 --> 00:38:11,300
have to slide with the image so you know

00:38:06,840 --> 00:38:16,650
when all the weird characters and and

00:38:11,300 --> 00:38:19,380
yeah so I have seen instances where that

00:38:16,650 --> 00:38:21,000
was absolutely not a problem I have seen

00:38:19,380 --> 00:38:24,510
instances where it was a major problem

00:38:21,000 --> 00:38:27,810
because people had non utf8 data in the

00:38:24,510 --> 00:38:31,380
database and one of the worst things to

00:38:27,810 --> 00:38:33,360
do is having to guess encoding out of

00:38:31,380 --> 00:38:35,310
data because you can just guess the best

00:38:33,360 --> 00:38:36,990
thing you can do is basically look at

00:38:35,310 --> 00:38:39,150
something and say oh it has a byte

00:38:36,990 --> 00:38:42,740
sequence in it that doesn't exist in

00:38:39,150 --> 00:38:44,760
utf-8 so that can't possibly be utf-8

00:38:42,740 --> 00:38:45,690
but that really doesn't help you in

00:38:44,760 --> 00:38:48,000
finding out what it is

00:38:45,690 --> 00:38:51,090
there is libraries out there that do

00:38:48,000 --> 00:38:54,870
guessing but they are more or less good

00:38:51,090 --> 00:38:57,120
depending on house how how big of a data

00:38:54,870 --> 00:38:59,970
set you have and how crappy your data is

00:38:57,120 --> 00:39:02,400
so that's really a difficult issue and

00:38:59,970 --> 00:39:04,230
it's in fact a data quality issue that

00:39:02,400 --> 00:39:07,590
technically has nothing to do with the

00:39:04,230 --> 00:39:10,380
PHP 7 migration but usually turns up as

00:39:07,590 --> 00:39:12,390
part of the migration so make sure that

00:39:10,380 --> 00:39:14,580
you are clean on that side if you are

00:39:12,390 --> 00:39:16,350
not you will have to invest pretty

00:39:14,580 --> 00:39:20,430
heavily on the business side in getting

00:39:16,350 --> 00:39:22,980
the content right because trying to use

00:39:20,430 --> 00:39:26,400
technology to fix broken content and

00:39:22,980 --> 00:39:30,750
broken coatings I have never seen that

00:39:26,400 --> 00:39:32,640
work it's just a pretty bad workaround

00:39:30,750 --> 00:39:37,080
that makes people very unhappy

00:39:32,640 --> 00:39:38,640
so my skill versus my sqli we're a

00:39:37,080 --> 00:39:41,580
little short on time so I'm not going to

00:39:38,640 --> 00:39:44,040
go into details and MySQL is

00:39:41,580 --> 00:39:48,060
traditionally the way to speak to the

00:39:44,040 --> 00:39:50,730
database and then my skill I was a new

00:39:48,060 --> 00:39:53,970
way that came up in fact it was created

00:39:50,730 --> 00:39:57,360
because of GPL versus non GPL code

00:39:53,970 --> 00:40:00,660
licensing issues and MySQL AI is a lot

00:39:57,360 --> 00:40:02,220
better and MySQL has been deprecated for

00:40:00,660 --> 00:40:05,099
ages but of course in

00:40:02,220 --> 00:40:09,150
legacy code nobody has touched that so

00:40:05,099 --> 00:40:11,130
um if if that's a problem of yours and I

00:40:09,150 --> 00:40:14,010
would suggest to use the shim that Davi

00:40:11,130 --> 00:40:17,760
Shafiq has created Davi is an overall

00:40:14,010 --> 00:40:19,410
nice guy he's British bad luck but I

00:40:17,760 --> 00:40:22,290
think he lives in the United States so

00:40:19,410 --> 00:40:24,810
he's probably safe from brexit Davi is

00:40:22,290 --> 00:40:27,030
the guy who has created the original

00:40:24,810 --> 00:40:29,130
concept behind the far archives so he's

00:40:27,030 --> 00:40:31,020
pretty well known in the PHP community

00:40:29,130 --> 00:40:34,470
and I really like that piece of software

00:40:31,020 --> 00:40:37,920
it's basically you just drop it in and

00:40:34,470 --> 00:40:40,950
then it internally maps your MySQL calls

00:40:37,920 --> 00:40:43,230
to MySQL I some people are going to tell

00:40:40,950 --> 00:40:46,950
you well is just adding the I that's not

00:40:43,230 --> 00:40:49,050
true because MySQL by default if you

00:40:46,950 --> 00:40:51,840
didn't pass a database connection to a

00:40:49,050 --> 00:40:53,670
function it would kind of magically get

00:40:51,840 --> 00:40:55,920
the database connection from global

00:40:53,670 --> 00:40:59,040
scope in my school I doesn't do that

00:40:55,920 --> 00:41:00,900
anymore so without explicitly passing a

00:40:59,040 --> 00:41:03,900
database connection you're not gonna

00:41:00,900 --> 00:41:05,490
have a lot of fun with MySQL I and so

00:41:03,900 --> 00:41:07,619
now you have a dependency problem

00:41:05,490 --> 00:41:12,030
because you have to pass around that and

00:41:07,619 --> 00:41:14,760
since legacy applications tend to be not

00:41:12,030 --> 00:41:18,119
that well versed for dependency

00:41:14,760 --> 00:41:20,670
injection that can get a pretty can get

00:41:18,119 --> 00:41:23,670
pretty nasty and and that library solves

00:41:20,670 --> 00:41:25,859
that problem pretty nicely then people

00:41:23,670 --> 00:41:30,990
are gonna say well we need prepared

00:41:25,859 --> 00:41:33,839
statements or should we move to PDO just

00:41:30,990 --> 00:41:37,470
in in briefness no you should not move

00:41:33,839 --> 00:41:40,230
to PDO please move to MySQL ip0 is a

00:41:37,470 --> 00:41:44,190
very problematic extension that's not

00:41:40,230 --> 00:41:47,970
well maintained and we have a shitload

00:41:44,190 --> 00:41:49,800
of licensing issues preventing us or

00:41:47,970 --> 00:41:52,710
legal issues preventing us from getting

00:41:49,800 --> 00:41:55,560
a better PDO because P do in fact is a

00:41:52,710 --> 00:41:58,200
piece of code that contains code from

00:41:55,560 --> 00:42:00,270
Microsoft and Oracle and whatnot and now

00:41:58,200 --> 00:42:02,369
guess they have lawyers so forget about

00:42:00,270 --> 00:42:05,270
all that right that's essentially the

00:42:02,369 --> 00:42:09,599
problem with PDO so I would

00:42:05,270 --> 00:42:12,780
strategically not try to use PDO but

00:42:09,599 --> 00:42:15,180
rather use my scale and then prepared

00:42:12,780 --> 00:42:16,020
statements again that's nothing that's

00:42:15,180 --> 00:42:18,270
really part of

00:42:16,020 --> 00:42:20,130
hp7 migration so people are gonna say ah

00:42:18,270 --> 00:42:23,550
let's use prepared statements let's

00:42:20,130 --> 00:42:27,750
rewrite all the code no don't don't do

00:42:23,550 --> 00:42:30,450
it now there is some prepared statements

00:42:27,750 --> 00:42:32,490
do make some sense but maybe not in the

00:42:30,450 --> 00:42:35,610
way you thought and I've linked to blog

00:42:32,490 --> 00:42:37,670
posts but with vendor who works used to

00:42:35,610 --> 00:42:40,170
work for MySQL now works for Oracle and

00:42:37,670 --> 00:42:41,910
he's kind of responsible for a lot of

00:42:40,170 --> 00:42:43,770
that integration stuff so he knows what

00:42:41,910 --> 00:42:46,369
he's talking about MP basically explains

00:42:43,770 --> 00:42:49,350
what prepared statements really are and

00:42:46,369 --> 00:42:52,010
what they are not and they are a little

00:42:49,350 --> 00:42:57,900
different in PHP then you made a thought

00:42:52,010 --> 00:43:00,720
so and here's my pro tip when it comes

00:42:57,900 --> 00:43:05,100
to migrating to PHP 7 just make it work

00:43:00,720 --> 00:43:07,440
on PHP 7 in fact one of the the main

00:43:05,100 --> 00:43:10,920
jobs we have if we are coaching a team

00:43:07,440 --> 00:43:12,660
that does a migration is preventing the

00:43:10,920 --> 00:43:15,119
developers from changing everything

00:43:12,660 --> 00:43:16,830
because oh that's ugly we need to you

00:43:15,119 --> 00:43:18,480
know make that more pretty and that

00:43:16,830 --> 00:43:20,400
needs to be more up-to-date and let's

00:43:18,480 --> 00:43:21,060
touch this and let's change that while

00:43:20,400 --> 00:43:24,090
we're at it

00:43:21,060 --> 00:43:28,020
no because technically that's not

00:43:24,090 --> 00:43:30,240
related to your PHP 7 migration it's

00:43:28,020 --> 00:43:33,570
gonna make your project explode more

00:43:30,240 --> 00:43:35,580
expensive and more risky a PHP 7

00:43:33,570 --> 00:43:38,850
migration is not there to make your code

00:43:35,580 --> 00:43:41,070
pretty all the ugliness that may have

00:43:38,850 --> 00:43:43,740
been there before will still be in the

00:43:41,070 --> 00:43:46,290
code after that you just have to fix the

00:43:43,740 --> 00:43:48,600
immediate problems if you do that and I

00:43:46,290 --> 00:43:51,119
know it's hard but if you do that your

00:43:48,600 --> 00:43:53,640
PHP 7 migration project will be a lot

00:43:51,119 --> 00:43:55,200
smaller then you have thought I'm not

00:43:53,640 --> 00:43:57,210
saying that there's a lot of nifty

00:43:55,200 --> 00:43:58,740
things that you may run into or a lot of

00:43:57,210 --> 00:44:02,640
problems that you may or may not have

00:43:58,740 --> 00:44:05,340
but if you really stick to let's just do

00:44:02,640 --> 00:44:07,650
what it takes to get it run on PHP 7 now

00:44:05,340 --> 00:44:09,780
and we can have you know we can create a

00:44:07,650 --> 00:44:11,460
refactoring ticket for later it's never

00:44:09,780 --> 00:44:15,359
gonna get prioritized but we can create

00:44:11,460 --> 00:44:18,390
a ticket ok you cannot make everything

00:44:15,359 --> 00:44:23,609
work at the same time please please keep

00:44:18,390 --> 00:44:26,490
that in mind um and then if you run on

00:44:23,609 --> 00:44:29,369
PHP 7 there's gonna be a lot of

00:44:26,490 --> 00:44:31,529
deprecation warnings which you will

00:44:29,369 --> 00:44:33,359
see because now you have error reporting

00:44:31,529 --> 00:44:36,479
set to minus one and you're actually

00:44:33,359 --> 00:44:37,979
looking at the aggregated logs and it's

00:44:36,479 --> 00:44:40,979
gonna say Oh everything is deprecated

00:44:37,979 --> 00:44:43,349
yeah that's bad but that just means that

00:44:40,979 --> 00:44:44,099
it is not going to work on PHP eight

00:44:43,349 --> 00:44:47,219
anymore

00:44:44,099 --> 00:44:51,119
and that tells you you should address

00:44:47,219 --> 00:44:53,940
this you should address this now and not

00:44:51,119 --> 00:44:56,130
when you actually want to roll out PHP

00:44:53,940 --> 00:44:58,200
eight because it just tells you well you

00:44:56,130 --> 00:45:01,170
did it that way and PHP eight is not

00:44:58,200 --> 00:45:03,690
gonna support that way be welcome to do

00:45:01,170 --> 00:45:06,719
it a different way and it's gonna work

00:45:03,690 --> 00:45:10,529
on PHP seven so it's not gonna be a

00:45:06,719 --> 00:45:13,170
migration issue which ultimately leads

00:45:10,529 --> 00:45:15,839
us to reach the goal that I would like

00:45:13,170 --> 00:45:19,229
to reach for everybody to reach that's

00:45:15,839 --> 00:45:21,920
what I call agile migration I don't want

00:45:19,229 --> 00:45:25,229
migration to be a big project I want

00:45:21,920 --> 00:45:28,890
migration to happen a little every year

00:45:25,229 --> 00:45:31,440
or maybe every month so why not migrate

00:45:28,890 --> 00:45:34,650
in smaller incremental steps there is a

00:45:31,440 --> 00:45:36,930
certain date maybe every quarter where

00:45:34,650 --> 00:45:39,150
you update all your dependencies right

00:45:36,930 --> 00:45:41,279
you shouldn't like magically do that and

00:45:39,150 --> 00:45:42,809
then complain that something broke but

00:45:41,279 --> 00:45:45,180
maybe you want to keep them as they are

00:45:42,809 --> 00:45:46,859
so you have a stable set of software and

00:45:45,180 --> 00:45:49,079
then I'm gonna give you point in time

00:45:46,859 --> 00:45:51,630
you'll take a few days upgrade all the

00:45:49,079 --> 00:45:54,690
dependencies do some testing hopefully

00:45:51,630 --> 00:45:57,029
not manually and see whether things work

00:45:54,690 --> 00:45:59,009
out or where it breaks and that's a

00:45:57,029 --> 00:46:01,680
little migration that you've done it's

00:45:59,009 --> 00:46:05,849
off the list for the big migration to

00:46:01,680 --> 00:46:09,859
the next major version of PHP I would

00:46:05,849 --> 00:46:12,839
suggest to upgrade PHP in a yearly cycle

00:46:09,859 --> 00:46:15,150
PHP does have a stable release cycle

00:46:12,839 --> 00:46:18,059
these days we get a new minor version

00:46:15,150 --> 00:46:21,359
every year usually November December and

00:46:18,059 --> 00:46:23,579
I would suggest to kind of wait a little

00:46:21,359 --> 00:46:27,150
until the first two or three patch

00:46:23,579 --> 00:46:29,130
releases so around summer it should be

00:46:27,150 --> 00:46:30,809
pretty safe to upgrade to the PHP

00:46:29,130 --> 00:46:33,869
version that got released the previous

00:46:30,809 --> 00:46:37,140
year right and when you do that then you

00:46:33,869 --> 00:46:39,630
have smaller incremental step sounds

00:46:37,140 --> 00:46:45,440
just like agile right and it's gonna be

00:46:39,630 --> 00:46:45,440
less of a project but more of a process

00:46:45,480 --> 00:46:51,550
Thanks

00:46:47,730 --> 00:46:51,550
[Applause]

00:46:51,610 --> 00:47:08,550
[Music]

00:47:05,150 --> 00:47:08,550

YouTube URL: https://www.youtube.com/watch?v=z8apxx_OMSM


