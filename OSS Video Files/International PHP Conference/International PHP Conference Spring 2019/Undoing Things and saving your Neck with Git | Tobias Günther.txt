Title: Undoing Things and saving your Neck with Git | Tobias Günther
Publication date: 2019-10-15
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Tobias Günther (Tower) | https://phpconference.com/speaker/tobias-gunther/

We cannot avoid mistakes. But with the right tools, we can make sure they don’t hurt too much. Git offers many ways to undo, revert, recover and fix. We’ll look at the bad things that can happen to you – and how Git can save your neck. In this hands-on session, we’ll have a look at Git’s various undo features. My intention is to give developers more confidence in their day-to-day operations when working with code: "mistakes can be undone" is something I’d like the audience to keep in mind. In the session, I will both talk about the theory and show the corresponding commands/tools in practice. I’ll be using both Git on the command line and the popular GUI Tower to show how to deal with mistakes in real-world scenarios.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:01,550 --> 00:00:07,490
[Music]

00:00:04,549 --> 00:00:10,380
hello everybody sorry for the delay I

00:00:07,490 --> 00:00:12,509
learned that different adapters have

00:00:10,380 --> 00:00:14,670
different qualities and transport the

00:00:12,509 --> 00:00:17,070
image to that machine here or they don't

00:00:14,670 --> 00:00:19,380
so we know that we'll be talking about

00:00:17,070 --> 00:00:21,750
surviving with good today so about all

00:00:19,380 --> 00:00:24,570
the ways to shoot yourself in the foot

00:00:21,750 --> 00:00:27,420
and to undo that of course this is

00:00:24,570 --> 00:00:29,880
actually a one-hour workshop so I could

00:00:27,420 --> 00:00:31,800
either talk really really fast or I'll

00:00:29,880 --> 00:00:34,230
skip a couple of cases and I think the

00:00:31,800 --> 00:00:35,910
latter is the better approach so we'll

00:00:34,230 --> 00:00:40,530
concentrate on a couple of different

00:00:35,910 --> 00:00:44,460
cases I feel I have to say why I'm

00:00:40,530 --> 00:00:46,200
talking about this specific topic so one

00:00:44,460 --> 00:00:48,510
reason is obvious I am part of the team

00:00:46,200 --> 00:00:51,090
behind Tower which is a good client for

00:00:48,510 --> 00:00:54,660
mac and Windows and we've been on the

00:00:51,090 --> 00:00:56,730
market for 8 9 years and have helped

00:00:54,660 --> 00:00:59,969
around 100,000 people all over the world

00:00:56,730 --> 00:01:01,620
well work more easily with get let's say

00:00:59,969 --> 00:01:04,530
like that so take the headache out of

00:01:01,620 --> 00:01:07,650
kit and the other reason why this

00:01:04,530 --> 00:01:10,560
specific topic undoing things with git

00:01:07,650 --> 00:01:12,090
is that at least I feel sometimes like

00:01:10,560 --> 00:01:13,979
the man in the middle here in a complex

00:01:12,090 --> 00:01:16,369
software project there's a lot to do

00:01:13,979 --> 00:01:19,290
wrong and there's a lot to go wrong and

00:01:16,369 --> 00:01:21,840
git is actually your safety net right

00:01:19,290 --> 00:01:24,030
that's why we're using it and my job

00:01:21,840 --> 00:01:26,729
today is to help you understand what

00:01:24,030 --> 00:01:29,369
options what possibilities you have to

00:01:26,729 --> 00:01:33,210
use that safety net so all of the things

00:01:29,369 --> 00:01:37,020
you can use to undo the dirty stuff that

00:01:33,210 --> 00:01:38,790
happens in a developer stay alright as I

00:01:37,020 --> 00:01:42,030
said we'll skip a couple of cases so the

00:01:38,790 --> 00:01:44,939
first four cases would have been about

00:01:42,030 --> 00:01:46,560
discarding unlock local uncommitted

00:01:44,939 --> 00:01:48,000
changes so things that we haven't

00:01:46,560 --> 00:01:51,200
committed yet we'll skip that that's

00:01:48,000 --> 00:01:53,729
easy stuff and we'll dive right into

00:01:51,200 --> 00:01:57,030
manipulating git history actually so

00:01:53,729 --> 00:01:59,280
we'll have I think 12 or 13 cases where

00:01:57,030 --> 00:02:01,979
we talk about how to manipulate git

00:01:59,280 --> 00:02:05,130
history the typing is on me you can

00:02:01,979 --> 00:02:07,530
relax and it gets a little bit more

00:02:05,130 --> 00:02:09,989
complex towards the end so depending on

00:02:07,530 --> 00:02:11,670
your own level of knowledge and get you

00:02:09,989 --> 00:02:13,410
might want to sleep in on the first half

00:02:11,670 --> 00:02:16,320
and then wake up for the second one or

00:02:13,410 --> 00:02:21,120
other way around no snoring then you're

00:02:16,320 --> 00:02:23,520
fine good easy thing to start with

00:02:21,120 --> 00:02:27,030
fixing the very last committing get so

00:02:23,520 --> 00:02:29,760
this is a quite a common case and to

00:02:27,030 --> 00:02:32,460
classic because we might either make a

00:02:29,760 --> 00:02:34,260
typo in a commit message or forget to

00:02:32,460 --> 00:02:36,690
add a change that should have been part

00:02:34,260 --> 00:02:38,790
of that commit that's very popular both

00:02:36,690 --> 00:02:42,570
things happen really really quickly and

00:02:38,790 --> 00:02:47,730
that's pretty easy to correct in git so

00:02:42,570 --> 00:02:50,690
let's look at that and see what we have

00:02:47,730 --> 00:02:53,550
this so the scenario is this one and

00:02:50,690 --> 00:02:55,800
this really looks bad so we should

00:02:53,550 --> 00:02:59,430
correct this commit message urgently and

00:02:55,800 --> 00:03:02,270
as I said as long as the last commit

00:02:59,430 --> 00:03:08,880
it's pretty easy so on the command line

00:03:02,270 --> 00:03:11,220
this is just a normal get commit amend -

00:03:08,880 --> 00:03:14,400
- amend allows you to manipulate the

00:03:11,220 --> 00:03:15,990
very last commit to fix that and I can

00:03:14,400 --> 00:03:21,180
now provide a better commit message

00:03:15,990 --> 00:03:22,620
typos are indeed very embarrassing

00:03:21,180 --> 00:03:28,380
embarrassing if you miss type

00:03:22,620 --> 00:03:30,900
embarrassing no that's good all right so

00:03:28,380 --> 00:03:33,780
let's see what we changed and you might

00:03:30,900 --> 00:03:36,000
have seen it flicker and we now have a

00:03:33,780 --> 00:03:39,600
correct commit message for that very

00:03:36,000 --> 00:03:43,260
last commit the other thing that I said

00:03:39,600 --> 00:03:46,290
you can do with amend is add another

00:03:43,260 --> 00:03:50,400
change to that very last commit so at

00:03:46,290 --> 00:03:53,010
the moment we don't have index.html

00:03:50,400 --> 00:03:56,250
amongst the changes here so currently

00:03:53,010 --> 00:03:57,930
not part of the change set here and if

00:03:56,250 --> 00:04:00,450
we want to add that to the very last

00:03:57,930 --> 00:04:02,610
commit we can do that using amend - so

00:04:00,450 --> 00:04:04,440
on the command line it's a git add to

00:04:02,610 --> 00:04:07,910
stage that to add that to the staging

00:04:04,440 --> 00:04:11,420
area and then just the same command

00:04:07,910 --> 00:04:15,840
using a mint git commit dash - amend and

00:04:11,420 --> 00:04:17,700
add that to the very last commit voila

00:04:15,840 --> 00:04:19,950
index.html is now also part of that

00:04:17,700 --> 00:04:22,800
change set so we can we have quite a few

00:04:19,950 --> 00:04:25,919
possibilities to amend to fix to correct

00:04:22,800 --> 00:04:30,639
the very very last community

00:04:25,919 --> 00:04:32,379
now first case and the first time you

00:04:30,639 --> 00:04:33,879
see those yellow warning messages I'm

00:04:32,379 --> 00:04:36,779
sorry that's reality so there's

00:04:33,879 --> 00:04:39,610
something to look out for in these cases

00:04:36,779 --> 00:04:42,310
amend is one of those commands where we

00:04:39,610 --> 00:04:45,159
rewrite history we manipulate get

00:04:42,310 --> 00:04:47,680
history and there is one big rule to

00:04:45,159 --> 00:04:50,349
live by to preserve your friendships and

00:04:47,680 --> 00:04:52,749
to not get killed in your team and that

00:04:50,349 --> 00:04:54,430
is don't manipulate commit history that

00:04:52,749 --> 00:04:55,960
you have already shared with your

00:04:54,430 --> 00:04:57,159
colleagues that you have pushed on a

00:04:55,960 --> 00:04:59,919
remote that is shared with your

00:04:57,159 --> 00:05:03,000
colleagues use the tools that we're

00:04:59,919 --> 00:05:05,319
going to talk about today a lot for

00:05:03,000 --> 00:05:07,029
cleaning up your local history let's say

00:05:05,319 --> 00:05:09,310
like that so you have a feature branch

00:05:07,029 --> 00:05:11,229
have worked on that for a couple of days

00:05:09,310 --> 00:05:13,990
or weeks and before you integrate that

00:05:11,229 --> 00:05:16,270
back into a team branch you can clean up

00:05:13,990 --> 00:05:17,889
with the tools I'm showing you don't do

00:05:16,270 --> 00:05:20,409
it to things you've shared already

00:05:17,889 --> 00:05:24,249
that's the one rule and then you can

00:05:20,409 --> 00:05:28,689
step on the gas all right so first case

00:05:24,249 --> 00:05:34,240
git commit dash dash amend to change or

00:05:28,689 --> 00:05:37,419
fix the very last committed number six

00:05:34,240 --> 00:05:41,529
so here the good news is not everything

00:05:37,419 --> 00:05:43,270
is bad right only c2 is the bad guy in

00:05:41,529 --> 00:05:45,219
this example everything that came before

00:05:43,270 --> 00:05:47,379
or after is fine so we don't want to

00:05:45,219 --> 00:05:50,229
erase everything we just want to undo

00:05:47,379 --> 00:05:53,500
this one here and as a very simple

00:05:50,229 --> 00:05:56,349
example let's say we changed about this

00:05:53,500 --> 00:05:58,270
project into about and the way revert

00:05:56,349 --> 00:06:01,689
that's a tool we're going to use the way

00:05:58,270 --> 00:06:05,349
we revert works is it creates new data a

00:06:01,689 --> 00:06:09,930
new commit that introduces the opposite

00:06:05,349 --> 00:06:13,779
effects to undo that commit revert is

00:06:09,930 --> 00:06:16,689
quite a non-destructive way to correct a

00:06:13,779 --> 00:06:19,360
mistake right because we don't go and

00:06:16,689 --> 00:06:21,789
rip out c2 and throw it away but instead

00:06:19,360 --> 00:06:23,800
there's going to be a new commit that

00:06:21,789 --> 00:06:27,240
corrects the effects of that old commit

00:06:23,800 --> 00:06:31,110
very non-destructive worried easy to use

00:06:27,240 --> 00:06:31,110
all right so let's do that

00:06:32,240 --> 00:06:41,249
and let's look at the problem so let's

00:06:39,210 --> 00:06:43,529
say we want to revert this one here

00:06:41,249 --> 00:06:46,309
right change headlines for about imprint

00:06:43,529 --> 00:06:49,379
was a problem and at the moment we have

00:06:46,309 --> 00:06:51,629
this change here so we changed about

00:06:49,379 --> 00:06:54,050
into about this project let's see what

00:06:51,629 --> 00:06:56,729
happens when we use revert on that guy

00:06:54,050 --> 00:07:00,569
and to do that I have to remember the

00:06:56,729 --> 00:07:02,729
commit hash so I'll copy that and on the

00:07:00,569 --> 00:07:07,830
command line it's just a simple get

00:07:02,729 --> 00:07:12,599
revert and the commit hash of the

00:07:07,830 --> 00:07:14,249
revision I want to undo I now get a

00:07:12,599 --> 00:07:16,710
window where I can provide a commit

00:07:14,249 --> 00:07:18,599
message why because I am going to create

00:07:16,710 --> 00:07:20,939
a new commit that corrects that old

00:07:18,599 --> 00:07:23,430
stuff right so don't get distracted

00:07:20,939 --> 00:07:25,080
about that I'll stay with the standard

00:07:23,430 --> 00:07:27,240
message that get proposes because it's

00:07:25,080 --> 00:07:29,580
quite sensible it says revert this and

00:07:27,240 --> 00:07:34,289
that commit with this and that commit

00:07:29,580 --> 00:07:37,969
hash so just save and close and voila

00:07:34,289 --> 00:07:41,270
there is a new commit as promised

00:07:37,969 --> 00:07:44,939
automatically created by get with the

00:07:41,270 --> 00:07:47,550
opposite changes here so git is clever

00:07:44,939 --> 00:07:49,499
enough to figure out ok he or she did

00:07:47,550 --> 00:08:00,360
that wrong so I'll just turn that around

00:07:49,499 --> 00:08:03,569
and everything's fine again git revert

00:08:00,360 --> 00:08:06,479
number seven here the case is a little

00:08:03,569 --> 00:08:08,699
bit worse let's say so everything that

00:08:06,479 --> 00:08:11,129
came after situ is actually bad we had a

00:08:08,699 --> 00:08:13,439
couple of bad commits so let's return to

00:08:11,129 --> 00:08:15,150
that point in time and forget everything

00:08:13,439 --> 00:08:19,050
that came afterwards right so we want to

00:08:15,150 --> 00:08:22,199
go back to situ and air-quote delete

00:08:19,050 --> 00:08:30,710
everything that came afterwards and this

00:08:22,199 --> 00:08:37,349
is a case for reset nope not this reset

00:08:30,710 --> 00:08:39,690
this one alright so let's look at the

00:08:37,349 --> 00:08:42,180
scenario and say we want to return to

00:08:39,690 --> 00:08:44,430
this one here right so this is the state

00:08:42,180 --> 00:08:46,980
we want to have back and we want to

00:08:44,430 --> 00:08:48,660
forget everything that came afterwards

00:08:46,980 --> 00:08:51,930
we want to undo everything that came

00:08:48,660 --> 00:08:57,630
afterwards again let's remember the

00:08:51,930 --> 00:08:58,230
commit hash of that revision and on the

00:08:57,630 --> 00:09:03,990
command line

00:08:58,230 --> 00:09:09,510
it's get reset - - hard and the commit

00:09:03,990 --> 00:09:11,459
hash if I do that well I you saw it

00:09:09,510 --> 00:09:13,320
flicker so the newer commits just

00:09:11,459 --> 00:09:18,029
disappeared and I'm back on that old

00:09:13,320 --> 00:09:19,740
revision so you saw - - hard that means

00:09:18,029 --> 00:09:21,899
there must be something else right so

00:09:19,740 --> 00:09:23,880
there is - - Hart there is - mix there

00:09:21,899 --> 00:09:25,529
is soft and there's key I can never

00:09:23,880 --> 00:09:27,930
remember what soft and keep our so let's

00:09:25,529 --> 00:09:30,329
forget those we can live with hard and

00:09:27,930 --> 00:09:33,209
with mixed mixed as the default so you

00:09:30,329 --> 00:09:37,670
wouldn't have to specify that but I

00:09:33,209 --> 00:09:37,670
prefer to do that what does mixed do

00:09:37,910 --> 00:09:44,310
let's try that out so in this case here

00:09:41,040 --> 00:09:45,449
we are - going to going to go back to

00:09:44,310 --> 00:09:49,440
that revision here

00:09:45,449 --> 00:09:53,130
but using mixed this time and mixed

00:09:49,440 --> 00:09:55,920
preserves the contents of the commits

00:09:53,130 --> 00:09:57,990
you are going to undo so wrote about to

00:09:55,920 --> 00:10:00,839
lose two commits right these two here

00:09:57,990 --> 00:10:04,769
but these have changed sets right here

00:10:00,839 --> 00:10:07,170
and here and using mixed I keep those

00:10:04,769 --> 00:10:11,670
changes as local changes you'll see what

00:10:07,170 --> 00:10:13,800
I mean so let's do that reset in tower

00:10:11,670 --> 00:10:13,980
we call this keep changes on the command

00:10:13,800 --> 00:10:18,480
line

00:10:13,980 --> 00:10:20,250
we - - mixed same thing and voila first

00:10:18,480 --> 00:10:24,720
half is the same we return to that

00:10:20,250 --> 00:10:27,660
revision but we kept the changes in

00:10:24,720 --> 00:10:30,090
those commits as local changes and that

00:10:27,660 --> 00:10:31,680
can come in handy if you want to change

00:10:30,090 --> 00:10:33,330
them make some more changes you can hop

00:10:31,680 --> 00:10:34,770
into the editor or you can say well I

00:10:33,330 --> 00:10:36,720
don't need that

00:10:34,770 --> 00:10:40,350
so let's discard that and get rid of it

00:10:36,720 --> 00:10:48,330
and commit a new you're quite flexible

00:10:40,350 --> 00:10:53,820
with that approach right git reset - -

00:10:48,330 --> 00:10:56,610
hard and - - mixed number eight so far

00:10:53,820 --> 00:10:58,710
we've worked on the whole project but

00:10:56,610 --> 00:11:01,170
what if you want to turn back time just

00:10:58,710 --> 00:11:03,420
on a specific file not for the whole

00:11:01,170 --> 00:11:05,580
project but you know that index.html was

00:11:03,420 --> 00:11:07,920
good at some point and you want to get

00:11:05,580 --> 00:11:20,760
that revision back but only for that

00:11:07,920 --> 00:11:25,950
file you can do that - and get so let's

00:11:20,760 --> 00:11:28,130
have a look all right so let's have a

00:11:25,950 --> 00:11:32,790
look at the file history of just that

00:11:28,130 --> 00:11:35,280
index.html file here and I can now see

00:11:32,790 --> 00:11:37,950
only the history of that specific file

00:11:35,280 --> 00:11:39,810
so I know in the course of the project

00:11:37,950 --> 00:11:42,000
to change three times there were three

00:11:39,810 --> 00:11:45,240
revisions of that file and let's say we

00:11:42,000 --> 00:11:48,180
want to return to that revision here for

00:11:45,240 --> 00:11:50,960
that file for index.html not for the

00:11:48,180 --> 00:11:55,770
whole project just for that file again

00:11:50,960 --> 00:11:59,460
remembering the commit hash and then on

00:11:55,770 --> 00:12:02,370
the command line it's yet check out then

00:11:59,460 --> 00:12:04,560
the revision hash double dashes I'll

00:12:02,370 --> 00:12:07,830
explain that in a second and the file we

00:12:04,560 --> 00:12:09,960
want to apply that to let's execute that

00:12:07,830 --> 00:12:15,709
and then explain why the hell double

00:12:09,960 --> 00:12:19,769
dashes let's see

00:12:15,709 --> 00:12:21,719
all right we now have changes applied as

00:12:19,769 --> 00:12:24,199
local changes that bring back that old

00:12:21,719 --> 00:12:28,829
revision or that version of that file

00:12:24,199 --> 00:12:32,879
for us in the working copy why double

00:12:28,829 --> 00:12:35,429
dashes well hmm git checkout is quite

00:12:32,879 --> 00:12:38,369
let's say a versatile commit in a

00:12:35,429 --> 00:12:41,159
command and get I you could also call it

00:12:38,369 --> 00:12:42,899
bad naming choice on its part but that's

00:12:41,159 --> 00:12:45,539
the way it is so you use it to undo

00:12:42,899 --> 00:12:47,489
local changes you use it to return to

00:12:45,539 --> 00:12:49,829
specific revisions for a for files and

00:12:47,489 --> 00:12:51,239
of course you use it all the time to

00:12:49,829 --> 00:12:54,149
switch branches right that's the main

00:12:51,239 --> 00:12:56,489
use of get check out so the double

00:12:54,149 --> 00:12:59,039
dashes are here to make clear we're not

00:12:56,489 --> 00:13:02,129
talking about a branch to make that

00:12:59,039 --> 00:13:03,419
command unambiguous no misunderstanding

00:13:02,129 --> 00:13:07,549
we're not talking about a branch we're

00:13:03,419 --> 00:13:07,549
talking about a file that's the reason

00:13:13,520 --> 00:13:21,950
get check out the revision hash double

00:13:16,970 --> 00:13:24,680
dashes and a filename for the next two

00:13:21,950 --> 00:13:27,500
cases we're going to use a special get

00:13:24,680 --> 00:13:29,899
tool called the ref log the ref long you

00:13:27,500 --> 00:13:33,020
can think of it as gets diary I would

00:13:29,899 --> 00:13:35,540
say so get protocols and journals every

00:13:33,020 --> 00:13:37,820
movement of the head pointer in that ref

00:13:35,540 --> 00:13:40,250
log diary so what's the movement of the

00:13:37,820 --> 00:13:43,310
head pointer that's a commit emerge a

00:13:40,250 --> 00:13:45,709
cherry-pick a reset so actually all of

00:13:43,310 --> 00:13:47,810
the more interesting stuff is protocol

00:13:45,709 --> 00:13:50,270
there and of course that makes it ideal

00:13:47,810 --> 00:13:52,690
for cases when you've shut yourself in

00:13:50,270 --> 00:13:55,220
the foot everything is documented here

00:13:52,690 --> 00:13:59,209
and what can you do with ref lock for

00:13:55,220 --> 00:14:01,520
example this year you might remember a

00:13:59,209 --> 00:14:05,029
case number seven I think where we used

00:14:01,520 --> 00:14:08,570
reset so you know steps one and step two

00:14:05,029 --> 00:14:10,760
and you might notice that it was a bad

00:14:08,570 --> 00:14:13,220
idea that's step three and you might see

00:14:10,760 --> 00:14:17,750
the panic emoticon if you notice wow

00:14:13,220 --> 00:14:21,050
I just lost commits right and that's a

00:14:17,750 --> 00:14:24,190
good use case for ref log and let's see

00:14:21,050 --> 00:14:24,190
if we can bring that back

00:14:31,460 --> 00:14:39,000
but first let's destroy something well I

00:14:37,020 --> 00:14:41,400
would say again let's return to this

00:14:39,000 --> 00:14:43,020
revision here and undo and air-quote

00:14:41,400 --> 00:14:45,390
delete everything that came afterwards

00:14:43,020 --> 00:14:47,550
so we are about to to lose these two

00:14:45,390 --> 00:14:51,330
commits in a second so let's do that

00:14:47,550 --> 00:14:53,570
let's use reset we don't need the

00:14:51,330 --> 00:14:56,520
changes and voila

00:14:53,570 --> 00:14:59,370
that is when slowly number 3 kicks in

00:14:56,520 --> 00:15:01,760
and you realize oh damn I should have

00:14:59,370 --> 00:15:04,890
kept those commits I need those back

00:15:01,760 --> 00:15:09,180
panic emoticon and let's see if we can

00:15:04,890 --> 00:15:12,060
get those back on the command line it's

00:15:09,180 --> 00:15:16,650
a simple get ref lock to open that

00:15:12,060 --> 00:15:19,620
journal and this is the journal that I

00:15:16,650 --> 00:15:21,660
was talking about so entries are ordered

00:15:19,620 --> 00:15:23,700
chronologically so the most recent items

00:15:21,660 --> 00:15:27,210
are at the top and if you look closely

00:15:23,700 --> 00:15:29,550
you see that the topmost item says reset

00:15:27,210 --> 00:15:31,950
well okay we know the journal works

00:15:29,550 --> 00:15:35,640
because we just did a reset 20 seconds

00:15:31,950 --> 00:15:37,890
ago okay if we want to undo that let's

00:15:35,640 --> 00:15:42,060
just return to the state before and the

00:15:37,890 --> 00:15:47,460
state before is this revision hash so

00:15:42,060 --> 00:15:49,350
copy that and you could totally use get

00:15:47,460 --> 00:15:51,300
reset to go back to that revision no

00:15:49,350 --> 00:15:55,380
problem you could do that I prefer to

00:15:51,300 --> 00:15:56,820
use or to create a new branch let's call

00:15:55,380 --> 00:16:02,070
that happy ending because everything

00:15:56,820 --> 00:16:05,160
works and voila so we have a branch and

00:16:02,070 --> 00:16:07,490
we have those seemingly lost commits

00:16:05,160 --> 00:16:07,490
back

00:16:15,790 --> 00:16:21,829
get Ref log and creating a new branch

00:16:19,209 --> 00:16:23,149
there's another case that is perfect for

00:16:21,829 --> 00:16:28,399
a ref log and that is when you

00:16:23,149 --> 00:16:29,990
inadvertently deleted a branch so case

00:16:28,399 --> 00:16:31,910
here maybe you've worked hard on a

00:16:29,990 --> 00:16:34,100
feature branch and your team lead calls

00:16:31,910 --> 00:16:35,690
you and says we don't need that customer

00:16:34,100 --> 00:16:38,779
doesn't want it you can safely delete it

00:16:35,690 --> 00:16:40,579
and well as it happens he calls again

00:16:38,779 --> 00:16:41,810
five minutes later and says well you

00:16:40,579 --> 00:16:46,310
know what funny story

00:16:41,810 --> 00:16:48,560
we need that back number three number

00:16:46,310 --> 00:16:50,860
four panic emoji con let's see what we

00:16:48,560 --> 00:16:50,860
can do

00:16:58,080 --> 00:17:07,439
all right so let's look at the scenario

00:17:00,830 --> 00:17:09,179
and yeah so we have this beautiful

00:17:07,439 --> 00:17:11,760
feature branch here feature log in and

00:17:09,179 --> 00:17:14,490
we indeed have a commit that is only

00:17:11,760 --> 00:17:16,770
present here so if I am going to delete

00:17:14,490 --> 00:17:20,250
that we are going to delete data

00:17:16,770 --> 00:17:20,550
we are losing data serious okay let's do

00:17:20,250 --> 00:17:22,260
that

00:17:20,550 --> 00:17:23,939
but first before I can delete that

00:17:22,260 --> 00:17:25,410
branch I need to step away from it

00:17:23,939 --> 00:17:26,880
that's the current head branch I can't

00:17:25,410 --> 00:17:32,550
delete the head branch right so I need

00:17:26,880 --> 00:17:35,100
to check out master now I can indeed

00:17:32,550 --> 00:17:39,270
right-click and delete I need to first

00:17:35,100 --> 00:17:44,850
delete because I'm destroying data and

00:17:39,270 --> 00:17:54,030
voila catastrophe let's look at get ref

00:17:44,850 --> 00:17:56,400
lock alright so it seems today is our

00:17:54,030 --> 00:17:59,580
lucky day because before we deleted that

00:17:56,400 --> 00:18:02,070
branch we had to step away from it right

00:17:59,580 --> 00:18:04,050
we had to check out master that was a

00:18:02,070 --> 00:18:06,809
head pointer movement and we protocol

00:18:04,050 --> 00:18:12,780
that here I can again return to the

00:18:06,809 --> 00:18:15,059
state before let's copy that and in this

00:18:12,780 --> 00:18:17,460
case of course it makes sense to create

00:18:15,059 --> 00:18:19,830
a new branch or to recreate actually

00:18:17,460 --> 00:18:24,140
that lost branch feature logging I think

00:18:19,830 --> 00:18:28,290
it was called and that commit hash and

00:18:24,140 --> 00:18:34,970
let's see what that leaves us with okay

00:18:28,290 --> 00:18:34,970
branches back including the last commit

00:18:40,019 --> 00:18:50,710
goodra floette says you might have known

00:18:46,870 --> 00:18:54,460
that my slides always contain a couple

00:18:50,710 --> 00:18:57,399
of emojis up there right so I brought a

00:18:54,460 --> 00:18:59,409
poster as a present but in return I

00:18:57,399 --> 00:19:01,799
would like to see some emojis here in

00:18:59,409 --> 00:19:05,919
the in the audience right so whoever

00:19:01,799 --> 00:19:07,690
impersonates one of the next emojis five

00:19:05,919 --> 00:19:11,559
or six cases so don't keep it in let it

00:19:07,690 --> 00:19:14,860
all out right wins a poster I want to

00:19:11,559 --> 00:19:18,820
have some fun too right for example

00:19:14,860 --> 00:19:21,250
number eleven okay keeping slow no

00:19:18,820 --> 00:19:24,850
problem moving a commit to a new branch

00:19:21,250 --> 00:19:27,070
so in most teams or in many teams

00:19:24,850 --> 00:19:28,690
there's a convention that says don't

00:19:27,070 --> 00:19:30,399
commit directly on the master branch

00:19:28,690 --> 00:19:32,919
don't know how it is in your teams but

00:19:30,399 --> 00:19:35,769
that's pretty common and still we do

00:19:32,919 --> 00:19:37,570
because we forget and our job is to

00:19:35,769 --> 00:19:38,500
clean up because in that case let's say

00:19:37,570 --> 00:19:40,480
number eleven

00:19:38,500 --> 00:19:43,059
we should have created a separate new

00:19:40,480 --> 00:19:44,500
feature branch that's a classic you

00:19:43,059 --> 00:19:47,049
should have created a new feature branch

00:19:44,500 --> 00:19:48,610
and still committed on the old branch so

00:19:47,049 --> 00:19:54,429
let's do that let's create that feature

00:19:48,610 --> 00:19:57,059
branch and move that commit over number

00:19:54,429 --> 00:19:57,059
eleven

00:20:00,290 --> 00:20:06,020
all right let's see what we have so a

00:20:03,830 --> 00:20:09,020
master is currently checked out in the

00:20:06,020 --> 00:20:11,450
very latest commit on master reads start

00:20:09,020 --> 00:20:13,370
new login feature that smells right that

00:20:11,450 --> 00:20:18,290
smells like it should have been a new

00:20:13,370 --> 00:20:20,210
feature branch on its own alright so the

00:20:18,290 --> 00:20:21,770
good thing is that master has the

00:20:20,210 --> 00:20:23,870
correct state that should have been the

00:20:21,770 --> 00:20:26,330
state for our feature branch so let's

00:20:23,870 --> 00:20:32,830
just take that as a base for a new

00:20:26,330 --> 00:20:32,830
branch and let's call that feature login

00:20:34,300 --> 00:20:38,570
alright so that looks good we now have

00:20:36,860 --> 00:20:41,270
feature log in with the correct state

00:20:38,570 --> 00:20:46,160
now the only thing to do is clean up

00:20:41,270 --> 00:20:50,390
master so nobody ever finds out right so

00:20:46,160 --> 00:20:54,080
go back to master and use reset to undo

00:20:50,390 --> 00:20:58,880
that commit on the branch just a normal

00:20:54,080 --> 00:21:03,430
reset get reset - hard and voila master

00:20:58,880 --> 00:21:06,950
is clean your reputation is flawless and

00:21:03,430 --> 00:21:09,910
feature log in contains that feature

00:21:06,950 --> 00:21:09,910
commit

00:21:13,940 --> 00:21:18,980
on the command line just create that

00:21:16,880 --> 00:21:21,770
branch using the branch command and then

00:21:18,980 --> 00:21:31,670
use reset to clean up head till the one

00:21:21,770 --> 00:21:33,560
means one behind the head yes please hmm

00:21:31,670 --> 00:21:40,610
I think then you wouldn't have that

00:21:33,560 --> 00:21:43,640
problem right yeah and no problem no

00:21:40,610 --> 00:21:49,670
well keep asking I I don't judge no

00:21:43,640 --> 00:22:01,510
problem so number twelve is a new emoji

00:21:49,670 --> 00:22:01,510
oh yeah the young woman in yellow please

00:22:02,500 --> 00:22:11,090
a similar case but different in that the

00:22:08,390 --> 00:22:13,370
feature branch already existed right so

00:22:11,090 --> 00:22:15,020
we don't have to create that but the

00:22:13,370 --> 00:22:16,700
problem still is the same we committed

00:22:15,020 --> 00:22:19,460
to the wrong branch and we need to clean

00:22:16,700 --> 00:22:21,440
that up actually this case looks easier

00:22:19,460 --> 00:22:23,980
but it's a little bit more work to do so

00:22:21,440 --> 00:22:31,340
the branch is already there but let's

00:22:23,980 --> 00:22:36,590
let's do that and again let's look at

00:22:31,340 --> 00:22:38,300
the mess so all right master is checked

00:22:36,590 --> 00:22:41,000
out and the latest commits says

00:22:38,300 --> 00:22:43,120
newsletter signup page while we are

00:22:41,000 --> 00:22:46,070
having a feature newsletter branch

00:22:43,120 --> 00:22:49,700
probably not probably the wrong branch

00:22:46,070 --> 00:22:53,000
so the way to correct that is to cherry

00:22:49,700 --> 00:22:56,570
pick that one over so let's move to that

00:22:53,000 --> 00:23:00,530
feature branch and then use cherry pick

00:22:56,570 --> 00:23:03,320
to integrate just that commit to the

00:23:00,530 --> 00:23:05,030
correct branch alright so here it is

00:23:03,320 --> 00:23:07,760
wonderful that's the way it should have

00:23:05,030 --> 00:23:10,430
looked in the first place and the second

00:23:07,760 --> 00:23:18,140
step is the same one go back to master

00:23:10,430 --> 00:23:21,950
and clean up using reset master is clean

00:23:18,140 --> 00:23:23,420
and feature newsletter now contains the

00:23:21,950 --> 00:23:24,230
commits that it should have contained in

00:23:23,420 --> 00:23:27,250
the first place

00:23:24,230 --> 00:23:29,320
on the command line

00:23:27,250 --> 00:23:31,210
a little bit more work switch to the

00:23:29,320 --> 00:23:34,270
future branch then cherry pick that

00:23:31,210 --> 00:23:41,530
commit over go back to master and clean

00:23:34,270 --> 00:23:45,880
up the miss there all right so for the

00:23:41,530 --> 00:23:48,820
last five cases or something like that

00:23:45,880 --> 00:23:50,800
we're going to use interactive rebase by

00:23:48,820 --> 00:23:52,690
some called the Swiss Army knife of good

00:23:50,800 --> 00:23:55,060
tools which I find quite fitting

00:23:52,690 --> 00:23:57,880
actually because a Swiss Army knife has

00:23:55,060 --> 00:24:00,760
lots of tools so very versatile but it's

00:23:57,880 --> 00:24:02,770
still a knife so you can cut yourself a

00:24:00,760 --> 00:24:05,140
little bit but if you stick to that

00:24:02,770 --> 00:24:06,790
Golden Rule from the beginning to not

00:24:05,140 --> 00:24:08,200
manipulate history that is shared with

00:24:06,790 --> 00:24:09,700
their colleagues everything will be fine

00:24:08,200 --> 00:24:14,470
and you're only cutting yourself that's

00:24:09,700 --> 00:24:17,080
that's okay at heals so what can you do

00:24:14,470 --> 00:24:19,600
with interactive rebase for example edit

00:24:17,080 --> 00:24:21,400
an old commit message and you might say

00:24:19,600 --> 00:24:25,450
whoa wait a minute we did that in case

00:24:21,400 --> 00:24:27,670
number five that's true but we edit that

00:24:25,450 --> 00:24:28,210
the very last commits message that's

00:24:27,670 --> 00:24:30,910
easy

00:24:28,210 --> 00:24:35,230
get commit amend but as soon as you go

00:24:30,910 --> 00:24:37,180
back further in history this one here is

00:24:35,230 --> 00:24:39,250
good commit amend but as soon as you go

00:24:37,180 --> 00:24:42,400
further back in history you can't use

00:24:39,250 --> 00:24:46,630
amend and you have to use interactive

00:24:42,400 --> 00:24:48,910
rebase for that and actually that is a

00:24:46,630 --> 00:24:51,130
quite a simple case so it's a good case

00:24:48,910 --> 00:24:53,860
to explain how interactive rebase works

00:24:51,130 --> 00:24:55,930
in general so we always have around

00:24:53,860 --> 00:24:58,120
three steps with interactive rebase no

00:24:55,930 --> 00:25:01,000
matter what we do so the first one is

00:24:58,120 --> 00:25:03,340
asking yourselves how far back do I need

00:25:01,000 --> 00:25:05,440
to go in history to manipulate that part

00:25:03,340 --> 00:25:07,030
of history so how far back do I need to

00:25:05,440 --> 00:25:09,550
go we'll see that in practice in a

00:25:07,030 --> 00:25:11,620
second the second step is to actually

00:25:09,550 --> 00:25:14,500
start the interactive rebase session

00:25:11,620 --> 00:25:16,480
with that command and the third one is

00:25:14,500 --> 00:25:18,580
you're going to get an editor window

00:25:16,480 --> 00:25:22,600
with that part of history that you

00:25:18,580 --> 00:25:25,090
selected you'll see that and the the

00:25:22,600 --> 00:25:28,090
important thing here is to not make the

00:25:25,090 --> 00:25:29,920
changes in that step already you'll see

00:25:28,090 --> 00:25:34,410
what I mean in a second that's something

00:25:29,920 --> 00:25:34,410
to remember let's do this in practice

00:25:35,520 --> 00:25:48,920
and that was case 13 all right so let's

00:25:46,370 --> 00:25:52,830
change the commit message of that

00:25:48,920 --> 00:25:55,470
revision here so it's an interactive

00:25:52,830 --> 00:25:57,570
freebase first step how far back do I

00:25:55,470 --> 00:26:00,750
need to go back in history to manipulate

00:25:57,570 --> 00:26:03,809
that part of history always at least the

00:26:00,750 --> 00:26:06,600
parent commit so at least here I need to

00:26:03,809 --> 00:26:08,400
go back I can remember the commit hash

00:26:06,600 --> 00:26:11,100
here that's one possibility or I can

00:26:08,400 --> 00:26:14,100
just count and I'll prefer to do a

00:26:11,100 --> 00:26:17,340
little counting down so ahead - one two

00:26:14,100 --> 00:26:21,720
three all right

00:26:17,340 --> 00:26:24,540
so git rebase - interactive head

00:26:21,720 --> 00:26:29,429
that's a Tilly I say - don't get

00:26:24,540 --> 00:26:31,380
distracted that's a Tilly three all

00:26:29,429 --> 00:26:35,520
right that's the promised editor window

00:26:31,380 --> 00:26:39,030
and to make that clear once more we do

00:26:35,520 --> 00:26:44,220
not go ahead and do that just to make

00:26:39,030 --> 00:26:47,820
that clear this window is just to mark

00:26:44,220 --> 00:26:50,970
up what you want to do so I just marked

00:26:47,820 --> 00:26:55,260
up line number one that I'm going to

00:26:50,970 --> 00:26:58,050
reword which is get --is-- for changing

00:26:55,260 --> 00:27:01,410
the commit message all the action

00:26:58,050 --> 00:27:04,470
keywords are documented here so nothing

00:27:01,410 --> 00:27:08,070
to remember the other thing to remember

00:27:04,470 --> 00:27:10,920
in this window is the order of the

00:27:08,070 --> 00:27:13,140
commits is reversed right so improve

00:27:10,920 --> 00:27:16,380
headline for imprint that third one here

00:27:13,140 --> 00:27:18,900
is actually the newest one from gits

00:27:16,380 --> 00:27:21,780
perspective this one is correct because

00:27:18,900 --> 00:27:24,620
it goes and applies reapplies every

00:27:21,780 --> 00:27:29,040
commit in turn just don't get confused

00:27:24,620 --> 00:27:31,020
order is reversed nothing broken so

00:27:29,040 --> 00:27:33,210
that's actually all I have to do in that

00:27:31,020 --> 00:27:38,340
step markup what I want to do I mark

00:27:33,210 --> 00:27:41,820
that reword save and close and now now I

00:27:38,340 --> 00:27:43,919
finally get my chance to actually do

00:27:41,820 --> 00:27:45,750
what I want to do to change the commit

00:27:43,919 --> 00:27:48,430
message that's the old commit message

00:27:45,750 --> 00:27:52,570
opened up for editing again let's

00:27:48,430 --> 00:27:58,390
through a very important change of the

00:27:52,570 --> 00:27:59,350
markup structure save and close and

00:27:58,390 --> 00:28:03,180
voila

00:27:59,350 --> 00:28:12,730
here we go we just manipulated history

00:28:03,180 --> 00:28:16,480
get history but history what else can

00:28:12,730 --> 00:28:17,020
you do with interactive rebase glad you

00:28:16,480 --> 00:28:19,450
asked

00:28:17,020 --> 00:28:22,840
delete commits for example so we can

00:28:19,450 --> 00:28:32,830
really go ahead and rip out the commits

00:28:22,840 --> 00:28:38,260
and delete them let's do that and then

00:28:32,830 --> 00:28:41,140
let's find something to delete let's

00:28:38,260 --> 00:28:44,290
throw out this one here so interactive

00:28:41,140 --> 00:28:47,410
rebase step one how far back do I need

00:28:44,290 --> 00:28:49,780
to go in history parent commit so and

00:28:47,410 --> 00:28:57,370
either copy that commit hash or remember

00:28:49,780 --> 00:28:58,809
that or head - 1 - 2 git rebase -

00:28:57,370 --> 00:29:02,530
interactive head

00:28:58,809 --> 00:29:04,059
Tildy - and again I'm left with that

00:29:02,530 --> 00:29:06,910
editor window and you remember that

00:29:04,059 --> 00:29:09,400
grand rule are just introduced to not

00:29:06,910 --> 00:29:12,610
make changes in that window well there

00:29:09,400 --> 00:29:14,860
is an exception and that's this whatever

00:29:12,610 --> 00:29:17,170
line doesn't make it when I save and

00:29:14,860 --> 00:29:19,809
close is deleted so that's an

00:29:17,170 --> 00:29:20,830
alternative way to delete commits but

00:29:19,809 --> 00:29:23,290
I'm a gentleman

00:29:20,830 --> 00:29:26,380
so I will write drop we're not savages

00:29:23,290 --> 00:29:30,820
right that's the official action keyword

00:29:26,380 --> 00:29:34,809
drop by marking that line with drop I'll

00:29:30,820 --> 00:29:42,460
tell git I want to delete that save and

00:29:34,809 --> 00:29:45,059
close and voila it flickered and that

00:29:42,460 --> 00:29:45,059
one is gone

00:29:51,580 --> 00:29:57,160
number 15 that's when the emoji con

00:29:54,240 --> 00:30:02,440
contest gets really really hard I think

00:29:57,160 --> 00:30:08,260
I have another poster does anybody want

00:30:02,440 --> 00:30:11,590
to try the cow oh damn no there's two

00:30:08,260 --> 00:30:13,480
more cases so you can also squash

00:30:11,590 --> 00:30:15,010
commits using interactive freebase and

00:30:13,480 --> 00:30:17,980
squashing means combining multiple

00:30:15,010 --> 00:30:20,500
commits into one so there's this general

00:30:17,980 --> 00:30:22,750
rule to rather keep commit smaller than

00:30:20,500 --> 00:30:25,270
bigger so you won't use that too often

00:30:22,750 --> 00:30:28,150
but you can indeed squash and combine

00:30:25,270 --> 00:30:41,490
multiple commits into one and let's do

00:30:28,150 --> 00:30:45,400
that and let's say let's combine these

00:30:41,490 --> 00:30:48,130
two beauties here it's an interactive

00:30:45,400 --> 00:30:50,440
rebase so first step is doing the

00:30:48,130 --> 00:30:54,040
counting dance we need to go back to the

00:30:50,440 --> 00:31:00,340
parent commit so ahead where's 1 2 3

00:30:54,040 --> 00:31:07,000
this one git rebase - interactive head

00:31:00,340 --> 00:31:10,230
till e3 and we're going to use a new

00:31:07,000 --> 00:31:13,000
action keyword of course and that is

00:31:10,230 --> 00:31:16,240
squash now the one thing you have to

00:31:13,000 --> 00:31:19,420
know about squash is that it combines

00:31:16,240 --> 00:31:21,670
the line you mark up so I marked up line

00:31:19,420 --> 00:31:24,220
number two with the one above with the

00:31:21,670 --> 00:31:27,040
one before so by marking up line number

00:31:24,220 --> 00:31:29,320
two I tailgate please combine number two

00:31:27,040 --> 00:31:36,370
with the one before I want to melt

00:31:29,320 --> 00:31:38,650
together these two lines right that's

00:31:36,370 --> 00:31:42,340
all I do in this step I'll save and

00:31:38,650 --> 00:31:45,250
close and another editor window pops up

00:31:42,340 --> 00:31:47,260
because I am about to create a new

00:31:45,250 --> 00:31:49,930
commit that melting commit write that

00:31:47,260 --> 00:31:52,890
combining commit so I have the chance to

00:31:49,930 --> 00:32:00,520
provide a commit message for that one

00:31:52,890 --> 00:32:04,260
combine two into one I'm well known for

00:32:00,520 --> 00:32:04,260
providing excellent commit messages

00:32:04,270 --> 00:32:10,640
and voila we just combined two commits

00:32:07,670 --> 00:32:14,240
into one so we combined the change set

00:32:10,640 --> 00:32:20,480
and you saw that I left the old commit

00:32:14,240 --> 00:32:23,030
messages in there - I am contractually

00:32:20,480 --> 00:32:25,130
obliged to show you how easy that is in

00:32:23,030 --> 00:32:27,710
tower I'm very sorry so you can just

00:32:25,130 --> 00:32:34,550
drag and drop it here and that's a

00:32:27,710 --> 00:32:44,510
squashing so well

00:32:34,550 --> 00:32:48,080
number 16 wonderful I'm out of posters

00:32:44,510 --> 00:32:51,890
so chill that's actually my favorite

00:32:48,080 --> 00:32:53,900
here that is fix up it's my favorite

00:32:51,890 --> 00:32:56,900
because it's very very real life where

00:32:53,900 --> 00:32:59,330
we're practical because number one is we

00:32:56,900 --> 00:33:01,460
made a mistake right doesn't matter what

00:32:59,330 --> 00:33:03,530
it is we forgot to add something we

00:33:01,460 --> 00:33:05,540
should have deleted something there's a

00:33:03,530 --> 00:33:08,960
wrong line and the code doesn't matter

00:33:05,540 --> 00:33:11,090
any mmm any mistake and the natural

00:33:08,960 --> 00:33:13,310
instinct is to just make a new commit

00:33:11,090 --> 00:33:16,310
that corrects the problem in the old

00:33:13,310 --> 00:33:18,800
commit right that's okay but not very

00:33:16,310 --> 00:33:20,630
beautiful because we have original

00:33:18,800 --> 00:33:22,790
commit and let's call that a bandaid

00:33:20,630 --> 00:33:24,170
commit so original commit band-aid

00:33:22,790 --> 00:33:25,940
commit and if you do that for a couple

00:33:24,170 --> 00:33:28,010
of weeks original band-aid original

00:33:25,940 --> 00:33:31,010
band-aid nobody will be able to read

00:33:28,010 --> 00:33:35,750
that commit history right it's dirty as

00:33:31,010 --> 00:33:38,660
hell so the thing that fix-up does is it

00:33:35,750 --> 00:33:41,240
takes that band-aid commit that has no

00:33:38,660 --> 00:33:43,370
semantic meaning right applies it's

00:33:41,240 --> 00:33:47,900
changes to the original one and throws

00:33:43,370 --> 00:33:49,130
it away so you have what you want it to

00:33:47,900 --> 00:33:56,440
have in the first place

00:33:49,130 --> 00:33:56,440
fix something so let's fix something

00:34:01,499 --> 00:34:12,220
all right so let's pretend that this one

00:34:09,040 --> 00:34:15,399
here is incorrect or incomplete and we

00:34:12,220 --> 00:34:17,619
already prepared the changes that make

00:34:15,399 --> 00:34:21,099
it complete right so these changes here

00:34:17,619 --> 00:34:25,089
in our HTML make this one here complete

00:34:21,099 --> 00:34:31,000
currently doesn't contain our HTML right

00:34:25,089 --> 00:34:32,530
so first step is to actually just commit

00:34:31,000 --> 00:34:38,260
those changes so that's the normal

00:34:32,530 --> 00:34:41,460
staging and get commit but of course not

00:34:38,260 --> 00:34:44,319
a simple commit but a fix up commit and

00:34:41,460 --> 00:34:48,700
here I'm going to tell what commit I

00:34:44,319 --> 00:34:50,619
want to fix up with that commit so this

00:34:48,700 --> 00:34:53,260
is the one I want to correct right this

00:34:50,619 --> 00:34:57,490
here so let's copy the commit hash here

00:34:53,260 --> 00:35:00,400
and tell git with that new commit and

00:34:57,490 --> 00:35:05,740
that little change here I want to fix

00:35:00,400 --> 00:35:08,799
that commit right you probably expect

00:35:05,740 --> 00:35:10,049
fireworks to happen now I'm sorry not

00:35:08,799 --> 00:35:13,270
gonna happen

00:35:10,049 --> 00:35:16,210
we just have a new commit that band-aid

00:35:13,270 --> 00:35:18,849
commits with with those changes but you

00:35:16,210 --> 00:35:21,849
see there is something going on fix up

00:35:18,849 --> 00:35:25,960
exclamation mark what something is about

00:35:21,849 --> 00:35:28,420
to happen it's still an interactive

00:35:25,960 --> 00:35:31,930
rebase so let's do the little counting

00:35:28,420 --> 00:35:36,280
dance we want to fix this one so let's

00:35:31,930 --> 00:35:41,650
go at least to the parent one head - one

00:35:36,280 --> 00:35:46,500
two three four this time kid rebase

00:35:41,650 --> 00:35:49,240
interactive ahead till the four and

00:35:46,500 --> 00:35:51,910
second part of the secret sauce Auto

00:35:49,240 --> 00:35:54,160
squash so this is a two part solution

00:35:51,910 --> 00:35:57,190
actually the first part is to mark up

00:35:54,160 --> 00:35:59,319
that band-aid commit using fix up that's

00:35:57,190 --> 00:36:02,260
the first part and the second part is to

00:35:59,319 --> 00:36:04,930
use auto squash when you initiate that

00:36:02,260 --> 00:36:09,250
interactive freebase two steps and the

00:36:04,930 --> 00:36:10,670
good news is that's it in this window I

00:36:09,250 --> 00:36:14,480
do not have to do

00:36:10,670 --> 00:36:17,210
because it did two things for me first

00:36:14,480 --> 00:36:19,519
it automatically marked that commit as a

00:36:17,210 --> 00:36:24,349
fix-up I didn't do that right so line

00:36:19,519 --> 00:36:27,079
number two is marked as fixed up and it

00:36:24,349 --> 00:36:30,470
did another thing for me it rearranged

00:36:27,079 --> 00:36:32,900
it reordered the commits so that fix up

00:36:30,470 --> 00:36:34,309
was actually a newest commit right so it

00:36:32,900 --> 00:36:37,970
should have been at the at the bottom

00:36:34,309 --> 00:36:40,609
but fix up is a special form of squash

00:36:37,970 --> 00:36:44,359
and you remember that squash rule squash

00:36:40,609 --> 00:36:45,519
combines with the line before in order

00:36:44,359 --> 00:36:48,380
for that to work

00:36:45,519 --> 00:36:52,430
it automatically rearranged that for us

00:36:48,380 --> 00:36:54,500
so it it put line it in line number two

00:36:52,430 --> 00:36:59,480
and it combines with line number one the

00:36:54,500 --> 00:37:01,760
one we won to fix to make a long

00:36:59,480 --> 00:37:05,089
sentence short we don't have to worry in

00:37:01,760 --> 00:37:11,210
that dialogue I do not do anything I

00:37:05,089 --> 00:37:14,299
just save and close and voila

00:37:11,210 --> 00:37:16,730
two things happened the changes of that

00:37:14,299 --> 00:37:19,250
band-aid commit were applied in that

00:37:16,730 --> 00:37:21,079
original commit and it's been thrown

00:37:19,250 --> 00:37:22,609
away because it has no semantic meaning

00:37:21,079 --> 00:37:25,009
we don't want to have that in the commit

00:37:22,609 --> 00:37:28,660
history and your colleagues are still

00:37:25,009 --> 00:37:28,660
impressed because you make no mistakes

00:37:28,990 --> 00:37:36,529
crazy again let's just mention how to do

00:37:34,490 --> 00:37:41,450
that in Tower you can just hold down

00:37:36,529 --> 00:37:47,750
option key and that's a fix up just

00:37:41,450 --> 00:37:50,240
saying all right last case two parts

00:37:47,750 --> 00:37:52,400
solution fix up when you commit an auto

00:37:50,240 --> 00:37:57,440
squash when you initiate the interactive

00:37:52,400 --> 00:37:59,690
rebase last one and this is actually

00:37:57,440 --> 00:38:01,880
just to brag a little bit about what

00:37:59,690 --> 00:38:05,450
interactive rebase can do short answer

00:38:01,880 --> 00:38:08,150
anything actually and in this case here

00:38:05,450 --> 00:38:10,309
we are going to split or to edit an old

00:38:08,150 --> 00:38:13,849
commit which means we're going to open

00:38:10,309 --> 00:38:15,349
it up again for editing so we can hop

00:38:13,849 --> 00:38:17,660
into the editor and make more changes

00:38:15,349 --> 00:38:20,329
and do a couple of changes add files

00:38:17,660 --> 00:38:22,819
delete files and then decide to commit

00:38:20,329 --> 00:38:23,440
those changes as one new commit and the

00:38:22,819 --> 00:38:25,150
other change

00:38:23,440 --> 00:38:26,829
second you commit so you're totally

00:38:25,150 --> 00:38:35,859
flexible we were opening up an old

00:38:26,829 --> 00:38:39,880
commit for editing now here's the

00:38:35,859 --> 00:38:41,890
problem you know I'm a bad type around I

00:38:39,880 --> 00:38:43,420
refuse to get that on command lines I'll

00:38:41,890 --> 00:38:46,390
show you how to do it in tower and you

00:38:43,420 --> 00:38:51,599
know it is possible I'll leave it for

00:38:46,390 --> 00:38:53,950
you to figure out all right so let's

00:38:51,599 --> 00:38:57,960
split something we need a couple of

00:38:53,950 --> 00:39:02,680
changes let's take this one all right so

00:38:57,960 --> 00:39:04,270
right click and edit and we're now in

00:39:02,680 --> 00:39:06,160
the middle of an interactive rebase

00:39:04,270 --> 00:39:08,470
session here so that old commit is

00:39:06,160 --> 00:39:10,750
broken up again and we have the change

00:39:08,470 --> 00:39:12,730
set as local changes in a working copy

00:39:10,750 --> 00:39:15,789
you can hop into your editor and make

00:39:12,730 --> 00:39:18,160
more changes and say well this doesn't

00:39:15,789 --> 00:39:20,369
make sense the second paragraph here the

00:39:18,160 --> 00:39:23,230
second chunk so let's discard that and

00:39:20,369 --> 00:39:25,809
then while semantically it would have

00:39:23,230 --> 00:39:31,180
made sense to commit these two changes

00:39:25,809 --> 00:39:33,520
as one commit commit number one and the

00:39:31,180 --> 00:39:39,099
other changes as a separate commit

00:39:33,520 --> 00:39:40,960
commit numbered two and continue marks

00:39:39,099 --> 00:39:44,880
that interactive rebase session as

00:39:40,960 --> 00:39:49,539
finished and let's see what we have

00:39:44,880 --> 00:39:52,839
wonderful we just split up that old

00:39:49,539 --> 00:39:55,049
commit into multiple new ones very very

00:39:52,839 --> 00:39:55,049
flexible

00:39:57,869 --> 00:40:03,059
all right I've said it a bazillion times

00:40:00,119 --> 00:40:04,950
let's say one more time do not rewrite

00:40:03,059 --> 00:40:06,900
commit history that has been shared with

00:40:04,950 --> 00:40:09,569
your colleagues because you will make no

00:40:06,900 --> 00:40:11,969
friends and that is of course the case

00:40:09,569 --> 00:40:14,150
when you use git commit amend any time

00:40:11,969 --> 00:40:16,650
you use interactive freebase any time

00:40:14,150 --> 00:40:20,660
sometimes when you use rebase or reset

00:40:16,650 --> 00:40:23,849
so be a little bit careful with those I

00:40:20,660 --> 00:40:26,279
presume that those twelve cases are now

00:40:23,849 --> 00:40:30,660
burned into your brains but maybe you

00:40:26,279 --> 00:40:32,190
have a gap at case 11 let's say this is

00:40:30,660 --> 00:40:35,640
a good slide to photograph because

00:40:32,190 --> 00:40:37,349
actually we have made those cases and

00:40:35,640 --> 00:40:40,349
the ones I have left out because I had

00:40:37,349 --> 00:40:43,410
no time as little videos so two to three

00:40:40,349 --> 00:40:48,869
minute videos and you can catch up on

00:40:43,410 --> 00:40:54,450
number seven or number one to 14 don't

00:40:48,869 --> 00:40:58,319
know all right I'm a good guest because

00:40:54,450 --> 00:41:06,059
I brought gifts I know that not everyone

00:40:58,319 --> 00:41:10,380
had the talent to participate in that

00:41:06,059 --> 00:41:13,229
you know emoticon thing so I brought the

00:41:10,380 --> 00:41:14,789
same poster shrinked it's crazy you can

00:41:13,229 --> 00:41:18,329
shrink it as many times as you want

00:41:14,789 --> 00:41:20,670
we're experimenting with that size so it

00:41:18,329 --> 00:41:23,579
is a postcard so you can send it to

00:41:20,670 --> 00:41:25,619
someone which is actually quite cool

00:41:23,579 --> 00:41:28,319
because they only receive invoices per

00:41:25,619 --> 00:41:30,089
mail so you can try that or you can be

00:41:28,319 --> 00:41:31,829
selfish and put it on your desk because

00:41:30,089 --> 00:41:35,099
it contains quite some practical advice

00:41:31,829 --> 00:41:38,489
right drink good coffee it's always good

00:41:35,099 --> 00:41:40,680
to remember or stay dry be pragmatic and

00:41:38,489 --> 00:41:41,579
on the back if you want to try a tower

00:41:40,680 --> 00:41:45,390
you can do that

00:41:41,579 --> 00:41:48,450
there is a coupon code in the back if

00:41:45,390 --> 00:41:51,749
you want to try tower make your life a

00:41:48,450 --> 00:41:56,339
little bit easier with git and again the

00:41:51,749 --> 00:41:58,609
URL to that video series enough force

00:41:56,339 --> 00:41:58,609
cards

00:41:59,410 --> 00:42:05,270
that's it from my side I am done

00:42:02,260 --> 00:42:07,280
energetically and from my knowledge to

00:42:05,270 --> 00:42:09,650
that is by the way a real email address

00:42:07,280 --> 00:42:09,980
so if you have questions shoot me an

00:42:09,650 --> 00:42:13,370
email

00:42:09,980 --> 00:42:15,290
yeah you have to say that I think in

00:42:13,370 --> 00:42:16,970
talks if I know the answer I will

00:42:15,290 --> 00:42:18,320
respond if I don't know the answer I

00:42:16,970 --> 00:42:21,680
will respond to and tell you I don't

00:42:18,320 --> 00:42:24,530
know the answer and they're stickers

00:42:21,680 --> 00:42:26,680
here if somebody stickers thank you very

00:42:24,530 --> 00:42:30,130
much for your time have fun

00:42:26,680 --> 00:42:30,130
[Applause]

00:42:30,270 --> 00:42:47,230
[Music]

00:42:43,830 --> 00:42:47,230

YouTube URL: https://www.youtube.com/watch?v=7A6hFIZflUw


