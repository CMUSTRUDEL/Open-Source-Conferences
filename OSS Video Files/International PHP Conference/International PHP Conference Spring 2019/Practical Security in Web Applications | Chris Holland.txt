Title: Practical Security in Web Applications | Chris Holland
Publication date: 2019-08-09
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Chris Holland (TriNet) | https://phpconference.com/speaker/chris-holland/

Explore effective methods to identify & avoid the most common and devastating security pitfalls in Web Applications.

When it comes to an enterprise’s exposure to security vulnerabilities, one could easily argue that its web presence is by far its greatest threat. There are many ways to build vulnerable applications and a few effective ways to "build them right". We’ll instrument you to stay on right side of this equation.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/

👍 Like us on Facebook | https://www.facebook.com/ipc.germany/

👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:01,550 --> 00:00:04,799
[Music]

00:00:04,850 --> 00:00:14,099
all right so here are the slides okay so

00:00:13,110 --> 00:00:16,560
now let's look a little bit at the

00:00:14,099 --> 00:00:18,630
impact of security on software because

00:00:16,560 --> 00:00:20,939
software is definitely everywhere right

00:00:18,630 --> 00:00:23,189
if you think of an aspect of your life

00:00:20,939 --> 00:00:26,910
that is not driven by your by a software

00:00:23,189 --> 00:00:28,859
it becomes very hard to do you know

00:00:26,910 --> 00:00:31,489
banking healthcare and finance has all

00:00:28,859 --> 00:00:34,260
the software travel entertainment

00:00:31,489 --> 00:00:36,989
communications so this is where it gets

00:00:34,260 --> 00:00:38,969
creepy right automation home automation

00:00:36,989 --> 00:00:44,280
alarm systems fire detection

00:00:38,969 --> 00:00:46,530
surveillance military also you see all

00:00:44,280 --> 00:00:48,420
the software in cars these days right

00:00:46,530 --> 00:00:51,300
Tesla is doing some really cool things

00:00:48,420 --> 00:00:53,309
with self-driving cars of course you

00:00:51,300 --> 00:00:56,210
might ask yourself what could possibly

00:00:53,309 --> 00:01:00,809
go wrong you know this could happen

00:00:56,210 --> 00:01:04,290
that's never a good time but you know if

00:01:00,809 --> 00:01:06,330
you remember a few years back you know a

00:01:04,290 --> 00:01:08,070
Def Con some researchers show how they

00:01:06,330 --> 00:01:09,000
could brick a Jeep a jeep you know

00:01:08,070 --> 00:01:10,170
you're driving on the freeway and

00:01:09,000 --> 00:01:12,869
somebody's driving your Jeep for you

00:01:10,170 --> 00:01:16,970
right a lot of things can go wrong there

00:01:12,869 --> 00:01:21,659
and then they did it the next year again

00:01:16,970 --> 00:01:23,430
so you know let's look a little bit of

00:01:21,659 --> 00:01:27,600
your exposure right you have a business

00:01:23,430 --> 00:01:30,920
and your business has data presumably if

00:01:27,600 --> 00:01:37,290
you're done if you've done things right

00:01:30,920 --> 00:01:38,880
it's protected by your cloud and inside

00:01:37,290 --> 00:01:40,799
your cloud you may have an internal app

00:01:38,880 --> 00:01:43,380
internal application to manage your

00:01:40,799 --> 00:01:46,140
inventory you could have a customer

00:01:43,380 --> 00:01:48,869
relationship management application so

00:01:46,140 --> 00:01:50,820
your staff is going to go in through VPN

00:01:48,869 --> 00:01:53,100
right here and they're going to use your

00:01:50,820 --> 00:01:55,140
internal applications right those are

00:01:53,100 --> 00:01:58,079
not exposed to the world and that's a

00:01:55,140 --> 00:02:02,520
good thing so now if attackers who want

00:01:58,079 --> 00:02:06,149
to crack your business they're going to

00:02:02,520 --> 00:02:09,000
go through one of your exposed ports

00:02:06,149 --> 00:02:11,239
which will be port 80 and port 443 for

00:02:09,000 --> 00:02:13,660
your customer facing web applications

00:02:11,239 --> 00:02:14,950
and then they're also going to go after

00:02:13,660 --> 00:02:17,380
Chloe's right they're gonna send

00:02:14,950 --> 00:02:20,110
phishing emails and click here or to

00:02:17,380 --> 00:02:22,240
change your password right and then

00:02:20,110 --> 00:02:24,190
they're gonna go here so today we're

00:02:22,240 --> 00:02:26,440
just going to look at web application

00:02:24,190 --> 00:02:28,270
security all right InfoSec is a vast

00:02:26,440 --> 00:02:33,970
field we're just gonna focus on web

00:02:28,270 --> 00:02:36,280
applications so you can imagine what

00:02:33,970 --> 00:02:37,840
happens when somebody cracks your web

00:02:36,280 --> 00:02:41,380
web application right

00:02:37,840 --> 00:02:44,200
exfiltration oops

00:02:41,380 --> 00:02:46,770
you have you know customer data you got

00:02:44,200 --> 00:02:49,510
intellectual property that leaks out

00:02:46,770 --> 00:02:53,580
people are transferring money to their

00:02:49,510 --> 00:02:55,690
account you know financial crime

00:02:53,580 --> 00:02:59,710
business disruption it's also a big

00:02:55,690 --> 00:03:01,990
thing and advanced persistent persistent

00:02:59,710 --> 00:03:04,810
threat so they hack your web server and

00:03:01,990 --> 00:03:06,850
they just kind of hang out there to

00:03:04,810 --> 00:03:11,020
gather more data or to do more in

00:03:06,850 --> 00:03:13,030
Affairs things so there are a lot there

00:03:11,020 --> 00:03:15,910
have been a lot of high profile security

00:03:13,030 --> 00:03:18,790
breaches I have a bunch of links to two

00:03:15,910 --> 00:03:21,730
articles talking about those so I'm not

00:03:18,790 --> 00:03:25,240
gonna depress you with those you know

00:03:21,730 --> 00:03:27,130
Yahoo in the you know in the United

00:03:25,240 --> 00:03:29,080
States the Office of Personnel

00:03:27,130 --> 00:03:30,060
Management how to really high profile

00:03:29,080 --> 00:03:33,550
leak

00:03:30,060 --> 00:03:35,850
Equifax it's a credit agency it was just

00:03:33,550 --> 00:03:38,770
terrible and that was a straight-up

00:03:35,850 --> 00:03:40,270
insecure component unpatch insecure

00:03:38,770 --> 00:03:44,170
component

00:03:40,270 --> 00:03:46,780
it was awful anyway so looking at web

00:03:44,170 --> 00:03:50,500
applications what makes them really easy

00:03:46,780 --> 00:03:55,150
an easy target well you have millions of

00:03:50,500 --> 00:03:57,400
them and the scanning these applications

00:03:55,150 --> 00:04:01,570
are always on right so they are easily

00:03:57,400 --> 00:04:05,910
scanned they do have sensitive

00:04:01,570 --> 00:04:08,380
information behind them and it's also a

00:04:05,910 --> 00:04:10,630
big attack surface if you look at your

00:04:08,380 --> 00:04:12,940
web application there's code that you

00:04:10,630 --> 00:04:15,940
write there are frameworks that you use

00:04:12,940 --> 00:04:18,540
there's the underlying HTTP daemon right

00:04:15,940 --> 00:04:20,590
it's a pretty massive attack surface

00:04:18,540 --> 00:04:22,330
there's also this whole thing called

00:04:20,590 --> 00:04:23,680
denial of service attacks have a

00:04:22,330 --> 00:04:26,310
separate talk on that it's pretty fun

00:04:23,680 --> 00:04:31,450
I'm not going to touch on that here

00:04:26,310 --> 00:04:37,690
so we're gonna look at strategies to not

00:04:31,450 --> 00:04:39,010
get owned sorry my okay here we go so

00:04:37,690 --> 00:04:41,560
the first thing we want to do is educate

00:04:39,010 --> 00:04:43,210
humans okay that is the very first thing

00:04:41,560 --> 00:04:46,920
that we need to do we need to not add

00:04:43,210 --> 00:04:51,370
vulnerabilities to our applications okay

00:04:46,920 --> 00:04:53,890
so the next thing that we're going to do

00:04:51,370 --> 00:04:55,660
is have code reviews right and we're

00:04:53,890 --> 00:04:59,890
gonna try to catch vulnerabilities and

00:04:55,660 --> 00:05:02,440
each other's code one layer below that

00:04:59,890 --> 00:05:05,020
if the two layers above its fail we hope

00:05:02,440 --> 00:05:06,460
that we'll have some automated code

00:05:05,020 --> 00:05:09,490
scanning that will catch the

00:05:06,460 --> 00:05:11,740
vulnerabilities vulnerabilities and our

00:05:09,490 --> 00:05:14,800
code in the code that we write but there

00:05:11,740 --> 00:05:16,990
are also vulnerabilities in dependencies

00:05:14,800 --> 00:05:22,660
so we also have we're going to look at

00:05:16,990 --> 00:05:25,210
tooling in continuous integration to

00:05:22,660 --> 00:05:26,830
check for dependencies right so beyond

00:05:25,210 --> 00:05:28,750
the software that you write there's also

00:05:26,830 --> 00:05:32,290
the the frameworks that you use and

00:05:28,750 --> 00:05:36,150
those are vulnerable as well okay so

00:05:32,290 --> 00:05:38,980
then if you don't catch gulnur abilities

00:05:36,150 --> 00:05:41,470
above you hope that your automated

00:05:38,980 --> 00:05:44,020
penetration tests are going to catch on

00:05:41,470 --> 00:05:45,970
the abilities and if that fails you hope

00:05:44,020 --> 00:05:49,419
that your web application firewall is

00:05:45,970 --> 00:05:51,040
gonna catch them and if all else fails

00:05:49,419 --> 00:05:52,540
you hope that you have some logging in

00:05:51,040 --> 00:05:55,570
there so you can figure out what

00:05:52,540 --> 00:05:58,870
happened all right so if you look at

00:05:55,570 --> 00:06:01,720
this stack you want to catch room

00:05:58,870 --> 00:06:03,970
abilities you know up here right the

00:06:01,720 --> 00:06:06,220
further down below you go down the stack

00:06:03,970 --> 00:06:09,210
you know the bigger the failure the

00:06:06,220 --> 00:06:13,680
bigger the cost of those from abilities

00:06:09,210 --> 00:06:16,120
so and I like to kind of draw a red line

00:06:13,680 --> 00:06:20,230
you know right here the continuous

00:06:16,120 --> 00:06:23,560
integration because the failure failing

00:06:20,230 --> 00:06:27,100
below the red line is even more painful

00:06:23,560 --> 00:06:30,490
okay so we want to avoid that so we're

00:06:27,100 --> 00:06:31,840
gonna look at all of these we're gonna

00:06:30,490 --> 00:06:35,169
look at a bunch of tools for these

00:06:31,840 --> 00:06:37,210
categories but first let's look at

00:06:35,169 --> 00:06:40,169
educating humans is anybody here

00:06:37,210 --> 00:06:40,169
familiar with a wasp

00:06:40,170 --> 00:06:45,100
okay hopefully soon and there will be a

00:06:43,000 --> 00:06:48,070
lot more hands raised I definitely do

00:06:45,100 --> 00:06:50,590
spend a lot of time on OS org it's

00:06:48,070 --> 00:06:54,310
absolutely phenomenal site with all

00:06:50,590 --> 00:06:56,380
really good resources and here's what

00:06:54,310 --> 00:06:59,170
they say we advocate approaching

00:06:56,380 --> 00:07:03,250
application security as a people process

00:06:59,170 --> 00:07:06,280
and technology problem okay I think it's

00:07:03,250 --> 00:07:08,440
a good way to look at it so they've been

00:07:06,280 --> 00:07:09,900
around for a while please do spend a

00:07:08,440 --> 00:07:13,320
good amount of time on their site so

00:07:09,900 --> 00:07:17,470
every couple years sometimes every year

00:07:13,320 --> 00:07:20,170
they'll publish the OWASP top 10 it's a

00:07:17,470 --> 00:07:22,650
list of the top ten vulnerabilities out

00:07:20,170 --> 00:07:24,330
there in the wild that get people

00:07:22,650 --> 00:07:28,240
compromised

00:07:24,330 --> 00:07:30,880
here's the URL to it so definitely look

00:07:28,240 --> 00:07:35,140
at it alright so now we're going to get

00:07:30,880 --> 00:07:36,990
back down to tooling okay so the first

00:07:35,140 --> 00:07:39,490
thing we're going to look at is

00:07:36,990 --> 00:07:41,530
automated code scanning there are a lot

00:07:39,490 --> 00:07:42,820
of tools that you can integrate as part

00:07:41,530 --> 00:07:44,860
of your continuous continuous

00:07:42,820 --> 00:07:51,880
integration to do automated code

00:07:44,860 --> 00:07:54,010
scanning so here on the a wasp site they

00:07:51,880 --> 00:07:56,020
list a bunch of those tools they list

00:07:54,010 --> 00:07:57,940
open source tools as well as commercial

00:07:56,020 --> 00:07:59,860
tools so you can go there and reference

00:07:57,940 --> 00:08:03,730
that but we're going to look at a few

00:07:59,860 --> 00:08:06,400
here so sonarqube

00:08:03,730 --> 00:08:08,830
is great because they have it's a

00:08:06,400 --> 00:08:10,630
pluggable architecture and you can make

00:08:08,830 --> 00:08:15,340
it work with just about all programming

00:08:10,630 --> 00:08:18,160
languages indefinitely PHP so c-sharp

00:08:15,340 --> 00:08:21,010
dotnet has some tools I'm gonna skip

00:08:18,160 --> 00:08:24,880
Java so in PHP there are really good

00:08:21,010 --> 00:08:28,510
tools you get prog pilot you got PHP CS

00:08:24,880 --> 00:08:31,660
security audit you got a sonar PHP which

00:08:28,510 --> 00:08:35,710
is a plug-in for sonar cube and all

00:08:31,660 --> 00:08:36,910
wasps actually made something called a

00:08:35,710 --> 00:08:39,490
wasp

00:08:36,910 --> 00:08:43,120
web web application protection and

00:08:39,490 --> 00:08:45,700
that's a platform dedicated to scanning

00:08:43,120 --> 00:08:48,640
source code in PHP right so you could

00:08:45,700 --> 00:08:51,460
use any or all or all of those tools in

00:08:48,640 --> 00:08:52,480
your continuous integration for your PHP

00:08:51,460 --> 00:08:57,490
project and

00:08:52,480 --> 00:09:02,350
and it should improve your security by a

00:08:57,490 --> 00:09:04,240
lot right so I got tools in Ruby I got

00:09:02,350 --> 00:09:10,240
tools in Python JavaScript

00:09:04,240 --> 00:09:12,520
okay so beyond that now so the automated

00:09:10,240 --> 00:09:14,470
code scanning that was to scan the code

00:09:12,520 --> 00:09:17,140
that you write right so now we're gonna

00:09:14,470 --> 00:09:19,660
look at dependencies vulnerabilities

00:09:17,140 --> 00:09:23,170
checks so if you look at composer does

00:09:19,660 --> 00:09:26,290
anybody here use composer okay yeah all

00:09:23,170 --> 00:09:28,150
right so if you look at all the packages

00:09:26,290 --> 00:09:31,660
that you include in your composer that

00:09:28,150 --> 00:09:34,090
JSON files any number of those could be

00:09:31,660 --> 00:09:35,740
vulnerable right and you want to know

00:09:34,090 --> 00:09:38,680
about it and you want to maybe upgrade

00:09:35,740 --> 00:09:41,500
them and so there are a lot of good

00:09:38,680 --> 00:09:44,230
tools that allow you to do that so Oh

00:09:41,500 --> 00:09:48,690
wasp has a cross language tool which

00:09:44,230 --> 00:09:53,380
works with all these languages and PHP

00:09:48,690 --> 00:09:55,840
the Grove makes a package called

00:09:53,380 --> 00:09:59,110
security advisories which works for new

00:09:55,840 --> 00:10:02,020
packages and then Friends of PHP has

00:09:59,110 --> 00:10:04,090
security advisory which is a little bit

00:10:02,020 --> 00:10:06,310
slower to run because it looks at all

00:10:04,090 --> 00:10:08,890
your existing packages right so you

00:10:06,310 --> 00:10:11,410
might do an initial scan with the

00:10:08,890 --> 00:10:14,040
friends of PHP tool and then going

00:10:11,410 --> 00:10:16,870
forward you might just use Rove's

00:10:14,040 --> 00:10:18,430
security advisories package to scan all

00:10:16,870 --> 00:10:23,560
new packages that you include in your

00:10:18,430 --> 00:10:26,500
composer JSON okay so that is for

00:10:23,560 --> 00:10:31,300
checking vulnerabilities and other

00:10:26,500 --> 00:10:35,620
people's software okay I'm gonna skip

00:10:31,300 --> 00:10:37,570
these guys all right so now we go below

00:10:35,620 --> 00:10:40,840
the red line right this is gonna where

00:10:37,570 --> 00:10:44,580
the cost of finding bugs gonna get a

00:10:40,840 --> 00:10:49,240
little bit higher so automated

00:10:44,580 --> 00:10:51,430
penetration tests simply means that you

00:10:49,240 --> 00:10:53,140
run a script against your web

00:10:51,430 --> 00:10:55,350
application that could be running in

00:10:53,140 --> 00:10:59,590
your development environment or staging

00:10:55,350 --> 00:11:01,570
to try to do outside penetrations which

00:10:59,590 --> 00:11:03,850
is the same thing that hackers do right

00:11:01,570 --> 00:11:06,160
so the tools that you might use to find

00:11:03,850 --> 00:11:08,560
vulnerabilities and your own

00:11:06,160 --> 00:11:10,600
applications hackers are doing it you

00:11:08,560 --> 00:11:12,850
know 24/7 in production right if you

00:11:10,600 --> 00:11:14,410
tell your logs in production you will

00:11:12,850 --> 00:11:16,389
probably see a lot of those attacks

00:11:14,410 --> 00:11:20,860
right so they're super considerate they

00:11:16,389 --> 00:11:24,790
do it for you right you know I like to

00:11:20,860 --> 00:11:26,860
put a little motd message on my on my

00:11:24,790 --> 00:11:28,449
web server I says hey while you're here

00:11:26,860 --> 00:11:34,750
can you upgrade my PHP seven you know

00:11:28,449 --> 00:11:38,410
that'd be nice so all right penetration

00:11:34,750 --> 00:11:42,370
testing so a wasp made a tool cut called

00:11:38,410 --> 00:11:43,870
Oh WTF it does not stand for what you

00:11:42,370 --> 00:11:46,829
might think it stands for

00:11:43,870 --> 00:11:48,220
it means offensive web testing framework

00:11:46,829 --> 00:11:51,759
all right

00:11:48,220 --> 00:11:54,310
so open source tool you can use they've

00:11:51,759 --> 00:11:58,930
also got a project called the Z attack

00:11:54,310 --> 00:12:01,079
proxy so this one is you cannot use it

00:11:58,930 --> 00:12:04,480
as part of your development process

00:12:01,079 --> 00:12:07,589
anyway you can use both of those for

00:12:04,480 --> 00:12:09,730
penetration testing there's also

00:12:07,589 --> 00:12:11,130
Metasploit which has been around for a

00:12:09,730 --> 00:12:13,839
long time

00:12:11,130 --> 00:12:16,689
security researchers and hackers use

00:12:13,839 --> 00:12:19,300
Metasploit a lot Metasploit can do a lot

00:12:16,689 --> 00:12:21,939
more than web application penetration

00:12:19,300 --> 00:12:25,810
testing it will they will do a lot of

00:12:21,939 --> 00:12:28,720
things right but it does do some

00:12:25,810 --> 00:12:32,380
penetration tests for web applications

00:12:28,720 --> 00:12:36,670
as well okay so all of these are free

00:12:32,380 --> 00:12:38,620
open source tools that you can use okay

00:12:36,670 --> 00:12:40,060
so that was for pension penetration

00:12:38,620 --> 00:12:45,149
tests so now we're going to go one layer

00:12:40,060 --> 00:12:50,500
down to your web application firewall or

00:12:45,149 --> 00:12:54,689
a wife a wife sits in front of your web

00:12:50,500 --> 00:13:02,230
application and it tries to intercept

00:12:54,689 --> 00:13:08,170
hacking attempts and block them they're

00:13:02,230 --> 00:13:10,649
kind of a pain to work with because you

00:13:08,170 --> 00:13:13,720
do get a lot of false positives

00:13:10,649 --> 00:13:17,680
especially if your site is like a forum

00:13:13,720 --> 00:13:19,720
or there's a lot of comments if somebody

00:13:17,680 --> 00:13:20,920
puts one equals one in a comment

00:13:19,720 --> 00:13:22,150
you know they might get blocked by the

00:13:20,920 --> 00:13:27,730
firewall because it thinks you're trying

00:13:22,150 --> 00:13:29,260
to do it SQL injection right so when you

00:13:27,730 --> 00:13:31,060
work with the Web Application Firewall

00:13:29,260 --> 00:13:35,980
make sure you spend a lot of time

00:13:31,060 --> 00:13:39,730
testing it and customizing it and to

00:13:35,980 --> 00:13:40,600
look for false positives but there are a

00:13:39,730 --> 00:13:43,750
few of them out there

00:13:40,600 --> 00:13:48,580
you got MOT secure org you get a couple

00:13:43,750 --> 00:13:51,460
of nginx plugins here you got shadow D

00:13:48,580 --> 00:13:53,820
as well so you know you can explore

00:13:51,460 --> 00:13:56,560
those I personally try to stay away from

00:13:53,820 --> 00:13:58,480
web app like you can firewalls but

00:13:56,560 --> 00:14:01,740
they're out there you can always look at

00:13:58,480 --> 00:14:07,240
them right just know to customize them

00:14:01,740 --> 00:14:10,120
okay all right so we just looked at

00:14:07,240 --> 00:14:12,940
tooling right at least even if you don't

00:14:10,120 --> 00:14:15,400
know all the vulnerabilities that are

00:14:12,940 --> 00:14:17,440
out there the tools at least we'll know

00:14:15,400 --> 00:14:20,110
a bunch of them and it should help

00:14:17,440 --> 00:14:22,420
improve your security posture right

00:14:20,110 --> 00:14:24,430
remember do whatever you can to educate

00:14:22,420 --> 00:14:29,740
yourself sorry that's what matters the

00:14:24,430 --> 00:14:32,140
most but all these tools will also help

00:14:29,740 --> 00:14:39,490
you out to to get a better security

00:14:32,140 --> 00:14:42,760
posture all right so now let's go back

00:14:39,490 --> 00:14:44,590
to educating humans and trying to

00:14:42,760 --> 00:14:46,060
understand vulnerabilities so we're

00:14:44,590 --> 00:14:48,340
going to look at low level vulnerability

00:14:46,060 --> 00:14:51,040
owner abilities and then application

00:14:48,340 --> 00:14:52,690
vulnerabilities in low level

00:14:51,040 --> 00:14:54,660
vulnerabilities we're going to look at a

00:14:52,690 --> 00:14:59,160
few things we're gonna look at injection

00:14:54,660 --> 00:15:05,050
vulnerabilities like SQL and NoSQL

00:14:59,160 --> 00:15:10,720
injections cross-site scripting and CSRF

00:15:05,050 --> 00:15:12,190
is anybody here familiar with CSRF okay

00:15:10,720 --> 00:15:14,050
I'm probably gonna skip over that

00:15:12,190 --> 00:15:17,020
section so that I can have more time

00:15:14,050 --> 00:15:19,080
toward the end but you know I have a

00:15:17,020 --> 00:15:23,230
bunch of slides you can look at as well

00:15:19,080 --> 00:15:25,780
and then cross-site scripting is anybody

00:15:23,230 --> 00:15:27,970
familiar with that as well okay yeah

00:15:25,780 --> 00:15:29,410
most people are okay good all right

00:15:27,970 --> 00:15:31,920
we're gonna focus on injection

00:15:29,410 --> 00:15:31,920
vulnerabilities

00:15:33,270 --> 00:15:39,279
you ever seen this cartoon right

00:15:36,180 --> 00:15:39,779
old-school rights been around for a

00:15:39,279 --> 00:15:46,209
while

00:15:39,779 --> 00:15:48,670
good old Bobby tables okay so obviously

00:15:46,209 --> 00:15:51,820
the impact of an injection you can leak

00:15:48,670 --> 00:15:54,250
destroy data SQL user privilege and the

00:15:51,820 --> 00:15:57,700
vector is to basically insert a variable

00:15:54,250 --> 00:15:58,959
into some kind of SQL straight and

00:15:57,700 --> 00:16:01,990
that's kind of what it would look like

00:15:58,959 --> 00:16:05,230
in PHP right where ID equals and then

00:16:01,990 --> 00:16:06,700
you put the user ID here and then you

00:16:05,230 --> 00:16:09,160
know an attacker can put whatever they

00:16:06,700 --> 00:16:14,709
want user ID and then completely subvert

00:16:09,160 --> 00:16:19,320
your SQL query okay you know people say

00:16:14,709 --> 00:16:22,360
oh you should sanitize inputs no

00:16:19,320 --> 00:16:26,589
sanitizing inputs is far from enough

00:16:22,360 --> 00:16:30,040
it's it's not reliable because you can't

00:16:26,589 --> 00:16:31,779
always do it especially if you run user

00:16:30,040 --> 00:16:34,860
generated content there's very limited

00:16:31,779 --> 00:16:36,940
sanitation that you can do there and

00:16:34,860 --> 00:16:39,339
also there's a much better way to do it

00:16:36,940 --> 00:16:41,800
which is called prepared statements with

00:16:39,339 --> 00:16:44,760
named parameter binding right select

00:16:41,800 --> 00:16:46,899
star from users or ID equals colon ID or

00:16:44,760 --> 00:16:51,399
question marks as well right

00:16:46,899 --> 00:16:56,320
prepared statements is the only reliable

00:16:51,399 --> 00:16:58,510
way to avoid SQL injection attacks if

00:16:56,320 --> 00:17:02,170
you still want to sanitize inputs that's

00:16:58,510 --> 00:17:05,260
fine but make sure you use prepared

00:17:02,170 --> 00:17:07,660
segments so if you use PDO for example

00:17:05,260 --> 00:17:11,199
that's kind of baked into that we're

00:17:07,660 --> 00:17:12,970
gonna look at our ends as well but so

00:17:11,199 --> 00:17:15,850
here I have a link to a cheat sheet on

00:17:12,970 --> 00:17:17,620
how to use prepared segments so like I

00:17:15,850 --> 00:17:24,100
said inputs annotation is okay but it's

00:17:17,620 --> 00:17:25,300
brittle and not sufficient so your

00:17:24,100 --> 00:17:27,069
prepared statements is going to look

00:17:25,300 --> 00:17:29,920
like this you're gonna go select and

00:17:27,069 --> 00:17:32,470
then put colon ID and then you're going

00:17:29,920 --> 00:17:35,170
to call bind parameter ID two then the

00:17:32,470 --> 00:17:40,870
variable and then it will make your

00:17:35,170 --> 00:17:42,520
system safe yeah so I have a link to how

00:17:40,870 --> 00:17:44,670
to do it in PHP with prepared segments

00:17:42,520 --> 00:17:47,320
and video

00:17:44,670 --> 00:17:49,540
all right now let's look at RMS because

00:17:47,320 --> 00:17:54,550
just because we use ORM so we may think

00:17:49,540 --> 00:17:57,340
that we're safe and often we're not so

00:17:54,550 --> 00:17:59,950
we just got to be careful so a while

00:17:57,340 --> 00:18:02,380
back on on the matter to our site there

00:17:59,950 --> 00:18:09,700
was a vulnerability that came up with

00:18:02,380 --> 00:18:11,500
the hibernate query language so is

00:18:09,700 --> 00:18:18,010
anybody here familiar with the doctrine

00:18:11,500 --> 00:18:20,500
ORM okay all right so doctrine the dql

00:18:18,010 --> 00:18:22,660
doctrine query language is almost the

00:18:20,500 --> 00:18:24,400
exact same as the hibernate query

00:18:22,660 --> 00:18:28,720
language right they're both data mapper

00:18:24,400 --> 00:18:33,730
RMS and so some availability that is

00:18:28,720 --> 00:18:37,180
found in hibernate should apply also to

00:18:33,730 --> 00:18:41,440
doctrine so here I have a link to

00:18:37,180 --> 00:18:43,450
testing for ORM injections so there are

00:18:41,440 --> 00:18:48,130
two prevalent types of Oren's

00:18:43,450 --> 00:18:49,870
you have active record ORM like eloquent

00:18:48,130 --> 00:18:53,110
has anybody used eloquent in laravel

00:18:49,870 --> 00:18:55,930
yeah there you go so and then you have

00:18:53,110 --> 00:18:58,180
data mapper ORM s like hibernate

00:18:55,930 --> 00:19:04,270
doctrine entity framework in net as well

00:18:58,180 --> 00:19:07,090
and so in in data mapper a way to get

00:19:04,270 --> 00:19:09,310
owned is by doing something like this

00:19:07,090 --> 00:19:12,040
where you have a string where you're

00:19:09,310 --> 00:19:16,180
referencing your domain objects but then

00:19:12,040 --> 00:19:17,590
you want to compare the ID of the

00:19:16,180 --> 00:19:21,310
destination object and then you

00:19:17,590 --> 00:19:23,410
concatenate a string right after it this

00:19:21,310 --> 00:19:24,340
is Java syntax not PHP but you get you

00:19:23,410 --> 00:19:26,200
get the idea right

00:19:24,340 --> 00:19:28,300
you if you're doing that you're kind of

00:19:26,200 --> 00:19:31,780
defeating your point or views in your o

00:19:28,300 --> 00:19:34,360
RM right you know how the way you would

00:19:31,780 --> 00:19:37,780
do it is you do not need to compare the

00:19:34,360 --> 00:19:39,550
ID properly you can just compare the

00:19:37,780 --> 00:19:43,780
object and behind this in it and then

00:19:39,550 --> 00:19:48,030
you bind the destination object in your

00:19:43,780 --> 00:19:48,030
query all right

00:19:50,379 --> 00:19:56,539
so an active record the thing to be

00:19:54,049 --> 00:19:58,220
careful with our kind those raw methods

00:19:56,539 --> 00:20:02,509
inactive record

00:19:58,220 --> 00:20:04,779
so in eloquent there's things like that

00:20:02,509 --> 00:20:07,999
you can do users equals user where raw

00:20:04,779 --> 00:20:09,529
right and then you can you inject the

00:20:07,999 --> 00:20:12,559
variable in the middle of your query

00:20:09,529 --> 00:20:15,799
right again you're kind of defeating the

00:20:12,559 --> 00:20:18,769
point or using your ORM alright so just

00:20:15,799 --> 00:20:21,799
be careful the good way to do it and you

00:20:18,769 --> 00:20:24,830
can do you know you stick to the

00:20:21,799 --> 00:20:30,289
semantics of the or and without resort

00:20:24,830 --> 00:20:32,299
resorting to their raw syntax ok if

00:20:30,289 --> 00:20:35,090
you're in rails there's a whole site

00:20:32,299 --> 00:20:40,190
dedicated to testing sequel injections

00:20:35,090 --> 00:20:42,679
in rails alright so basically Oren's

00:20:40,190 --> 00:20:44,629
give you an expressive vocabulary they

00:20:42,679 --> 00:20:47,479
make the safe way convenient however you

00:20:44,629 --> 00:20:49,519
will get owned if you don't use them as

00:20:47,479 --> 00:20:52,369
intended right that happens with a lot

00:20:49,519 --> 00:20:56,149
of tools so I just kind of want to call

00:20:52,369 --> 00:21:02,269
that out does anybody use any kind of no

00:20:56,149 --> 00:21:04,009
SQL database alright cool so those can

00:21:02,269 --> 00:21:07,159
get injected as well and so I'll have a

00:21:04,009 --> 00:21:12,970
link here to test and mitigate you can

00:21:07,159 --> 00:21:18,349
always review that so here's an example

00:21:12,970 --> 00:21:22,899
this is a query that you might run but

00:21:18,349 --> 00:21:25,309
instead of less than 0 you're gonna say

00:21:22,899 --> 00:21:27,649
less than and then you put a user and

00:21:25,309 --> 00:21:29,479
put in there all right well if you do

00:21:27,649 --> 00:21:33,619
that somebody can make that user input

00:21:29,479 --> 00:21:36,830
be this old thing here right and if you

00:21:33,619 --> 00:21:38,779
do that then it's actually a denial

00:21:36,830 --> 00:21:41,179
service attack it will cause a 100% CPU

00:21:38,779 --> 00:21:42,799
use age and then you're nice no sequel

00:21:41,179 --> 00:21:51,529
store is just gonna go up in flames

00:21:42,799 --> 00:21:53,149
so and it will bring Amazon down so what

00:21:51,529 --> 00:21:55,279
people seem to recommend is that you

00:21:53,149 --> 00:21:57,109
just kind of cast arguments to string so

00:21:55,279 --> 00:21:59,480
that article does gives an example to

00:21:57,109 --> 00:22:01,369
cast the username to a string cast a

00:21:59,480 --> 00:22:03,409
password to a string but then it seems

00:22:01,369 --> 00:22:04,010
to assume that they're querying by

00:22:03,409 --> 00:22:07,670
password

00:22:04,010 --> 00:22:09,740
that made me shivers do not store the

00:22:07,670 --> 00:22:11,270
password in plain text please we're

00:22:09,740 --> 00:22:13,820
going to touch on that extensively at

00:22:11,270 --> 00:22:18,170
the end alright so cross-site scripting

00:22:13,820 --> 00:22:21,470
I'm gonna skip that but I have a lot of

00:22:18,170 --> 00:22:32,900
information on there how you can

00:22:21,470 --> 00:22:34,760
mitigate the internet that boom yeah

00:22:32,900 --> 00:22:37,190
biggest thing is and sinfoni and laravel

00:22:34,760 --> 00:22:46,210
if you just can't do this your you

00:22:37,190 --> 00:22:46,210
should be okay so do this alright

00:22:46,220 --> 00:22:51,610
if you save that out try to you know

00:22:49,190 --> 00:22:53,690
strip the things that you don't need

00:22:51,610 --> 00:22:58,270
okay and then kind of normalize your

00:22:53,690 --> 00:23:01,220
data use the correct data types

00:22:58,270 --> 00:23:06,550
all right and then I'm gonna skip CSRF

00:23:01,220 --> 00:23:06,550
as well but I have examples here so

00:23:06,640 --> 00:23:15,650
again your framework should handle CSRF

00:23:11,830 --> 00:23:18,680
so here's the documentation on CSRF for

00:23:15,650 --> 00:23:21,650
Symphony and here's the documentation

00:23:18,680 --> 00:23:24,650
for the for laravel okay basically

00:23:21,650 --> 00:23:32,750
anytime you have a form make sure that

00:23:24,650 --> 00:23:34,090
it is protected by CSRF okay all right

00:23:32,750 --> 00:23:37,670
now let's look at application

00:23:34,090 --> 00:23:38,780
vulnerabilities so we're gonna look at

00:23:37,670 --> 00:23:43,100
user authentication

00:23:38,780 --> 00:23:46,130
ooofff security and then access control

00:23:43,100 --> 00:23:48,140
and multi-tenancy so user authentication

00:23:46,130 --> 00:23:51,320
for the most part kind of password

00:23:48,140 --> 00:23:54,590
handling so here's a cheat sheet on a

00:23:51,320 --> 00:23:55,610
wasp but we're gonna look at a few

00:23:54,590 --> 00:23:58,900
things we're going to look at failure

00:23:55,610 --> 00:24:01,970
failure messaging fail you're handling

00:23:58,900 --> 00:24:04,280
multi-factor authentication account

00:24:01,970 --> 00:24:06,560
recovery password policies password

00:24:04,280 --> 00:24:09,320
hashing pass our transport session

00:24:06,560 --> 00:24:10,970
duration and reallocation and what

00:24:09,320 --> 00:24:12,460
happened if your account does get

00:24:10,970 --> 00:24:14,690
compromised

00:24:12,460 --> 00:24:16,340
alright so failure messaging

00:24:14,690 --> 00:24:17,350
basically you don't want to be too

00:24:16,340 --> 00:24:19,000
helpful to a hacker

00:24:17,350 --> 00:24:21,520
right you don't want to tell them hey

00:24:19,000 --> 00:24:23,410
you entered the correct username the

00:24:21,520 --> 00:24:25,480
password is not quite right okay can you

00:24:23,410 --> 00:24:27,970
try again right you do not want to give

00:24:25,480 --> 00:24:30,580
them intelligence right so you want to

00:24:27,970 --> 00:24:34,000
keep the error messaging for all failure

00:24:30,580 --> 00:24:36,549
modes as vague as possible you want to

00:24:34,000 --> 00:24:39,160
avoid saying things like wrong password

00:24:36,549 --> 00:24:42,340
right because wrong password means good

00:24:39,160 --> 00:24:44,380
username you don't want to say wrong is

00:24:42,340 --> 00:24:46,120
wrong user ID because now you're saying

00:24:44,380 --> 00:24:48,220
oh this user ID does not exist on this

00:24:46,120 --> 00:24:51,210
system so don't bother doing a

00:24:48,220 --> 00:24:53,650
brute-force attack against it right

00:24:51,210 --> 00:24:57,669
account disabled users are not active

00:24:53,650 --> 00:25:07,179
these are generally bad and what you

00:24:57,669 --> 00:25:10,650
want to do is keep it generic login

00:25:07,179 --> 00:25:13,840
failed and valid user ID or password

00:25:10,650 --> 00:25:19,210
okay so now the attacker does not know

00:25:13,840 --> 00:25:23,470
exactly what went wrong alright so now

00:25:19,210 --> 00:25:28,179
we're going to look at failure handling

00:25:23,470 --> 00:25:30,309
so you want to try to mitigate

00:25:28,179 --> 00:25:34,150
brute-force Longet attempts so you can

00:25:30,309 --> 00:25:36,760
try to limit failures by IP address that

00:25:34,150 --> 00:25:37,750
can be bad because if you have a bunch

00:25:36,760 --> 00:25:42,460
of people who come from the same

00:25:37,750 --> 00:25:46,720
conference yeah that could you know be

00:25:42,460 --> 00:25:48,909
bad so you could try to use CAPTCHA on

00:25:46,720 --> 00:25:54,610
your login forms but that's a good way

00:25:48,909 --> 00:25:57,039
to get people to hate you a lot so if

00:25:54,610 --> 00:25:59,250
anything you definitely want to log all

00:25:57,039 --> 00:26:03,150
failures right so you know what happened

00:25:59,250 --> 00:26:06,720
attempted user ID timestamp IP address

00:26:03,150 --> 00:26:11,490
but then also remember the gdpr

00:26:06,720 --> 00:26:14,740
right if you log something yeah it's

00:26:11,490 --> 00:26:16,690
like do you really want to protect the

00:26:14,740 --> 00:26:21,309
privacy privacy of people who try to

00:26:16,690 --> 00:26:27,150
hack you right it's it's a big nightmare

00:26:21,309 --> 00:26:30,010
alright so multi-factor authentication

00:26:27,150 --> 00:26:30,610
means you can try to log in with more

00:26:30,010 --> 00:26:33,010
than just you

00:26:30,610 --> 00:26:35,260
and password it could be an

00:26:33,010 --> 00:26:39,070
authentication app on your phone it

00:26:35,260 --> 00:26:42,160
could be text like a SMS message so the

00:26:39,070 --> 00:26:44,350
thing is beware of SMS phone based

00:26:42,160 --> 00:26:48,390
verification it's super convenient but

00:26:44,350 --> 00:26:48,390
obviously phones do get lost or stolen

00:26:49,290 --> 00:26:57,160
sim cloning is also a thing right you

00:26:55,120 --> 00:26:58,960
know you could go to a t-mobile store if

00:26:57,160 --> 00:27:01,270
you know if you bribe somebody you might

00:26:58,960 --> 00:27:02,799
be able to get them to you know cloning

00:27:01,270 --> 00:27:03,549
same for you you know they've cracked

00:27:02,799 --> 00:27:05,290
down on that

00:27:03,549 --> 00:27:09,850
so hopefully you don't do it anymore but

00:27:05,290 --> 00:27:11,740
it's it's always a worry in your SMS

00:27:09,850 --> 00:27:15,400
verification message try to not say

00:27:11,740 --> 00:27:18,010
here's your verification pin for your

00:27:15,400 --> 00:27:20,140
site comm because if somebody steals

00:27:18,010 --> 00:27:22,660
that phone then you know now they know

00:27:20,140 --> 00:27:25,540
that hey you know they get that on there

00:27:22,660 --> 00:27:33,130
so you don't want to give the finder of

00:27:25,540 --> 00:27:37,600
the phone any idea okay account recovery

00:27:33,130 --> 00:27:45,040
so security questions are kind of a

00:27:37,600 --> 00:27:48,100
nightmare right I suspect that most

00:27:45,040 --> 00:27:51,520
sites store security questions in plain

00:27:48,100 --> 00:27:53,290
text which kind of keeps me up at night

00:27:51,520 --> 00:27:59,950
you really should be treating those

00:27:53,290 --> 00:28:02,230
answers as passwords so I have a link

00:27:59,950 --> 00:28:03,700
here to kind of best practices for

00:28:02,230 --> 00:28:06,070
security questions but this article

00:28:03,700 --> 00:28:08,650
really says security questions are a

00:28:06,070 --> 00:28:09,790
nightmare or hey they just don't like

00:28:08,650 --> 00:28:12,220
him

00:28:09,790 --> 00:28:15,340
but a more common way to recover an

00:28:12,220 --> 00:28:20,590
account is to do an email with a reset

00:28:15,340 --> 00:28:23,290
token so in the email that you send with

00:28:20,590 --> 00:28:26,169
the reset password link try to not let

00:28:23,290 --> 00:28:31,809
the token linger in the URL kind of

00:28:26,169 --> 00:28:37,660
redirect redirect it away it disappears

00:28:31,809 --> 00:28:40,300
from the URL because it could you know

00:28:37,660 --> 00:28:43,740
it could appear as the refer if they

00:28:40,300 --> 00:28:45,510
click to some other site so

00:28:43,740 --> 00:28:48,600
try to make the token disappear as fast

00:28:45,510 --> 00:28:51,540
as possible and try to expire it as

00:28:48,600 --> 00:28:53,070
quickly as possible as well and also do

00:28:51,540 --> 00:28:54,270
remember that email accounts do get

00:28:53,070 --> 00:29:01,530
compromised

00:28:54,270 --> 00:29:05,550
you know SMS is also one one way to do

00:29:01,530 --> 00:29:08,600
it but again phones do get hacked in

00:29:05,550 --> 00:29:10,860
either case if you if a user does

00:29:08,600 --> 00:29:13,380
initiate a password recovery

00:29:10,860 --> 00:29:18,300
you should invalidate all existing

00:29:13,380 --> 00:29:21,620
sessions for that user all right so now

00:29:18,300 --> 00:29:24,750
let's look at password policies so if

00:29:21,620 --> 00:29:27,240
you want to try to forbid from known

00:29:24,750 --> 00:29:29,700
passwords so the cool thing is there are

00:29:27,240 --> 00:29:31,710
folks who make lists of known passwords

00:29:29,700 --> 00:29:33,750
right so every time some some sites get

00:29:31,710 --> 00:29:35,460
hacked and the passwords get discovered

00:29:33,750 --> 00:29:37,470
people capture a lot of those passwords

00:29:35,460 --> 00:29:42,210
in list and you get smallest big lists

00:29:37,470 --> 00:29:44,970
by Daniel Miller so definitely look at

00:29:42,210 --> 00:29:48,800
those and you should try to avoid people

00:29:44,970 --> 00:29:52,650
from putting those passwords and then

00:29:48,800 --> 00:29:55,860
definitely try to forbid users from

00:29:52,650 --> 00:30:00,180
reusing the one of their last five

00:29:55,860 --> 00:30:02,130
passwords as well these days the

00:30:00,180 --> 00:30:04,850
password length should be ten characters

00:30:02,130 --> 00:30:08,820
or more obviously the more the merrier I

00:30:04,850 --> 00:30:10,740
have run into sites where I would put

00:30:08,820 --> 00:30:13,800
like you know a twenty character

00:30:10,740 --> 00:30:15,390
password and they're like your password

00:30:13,800 --> 00:30:19,740
has too many characters and I'm like

00:30:15,390 --> 00:30:21,600
what now not good okay password should

00:30:19,740 --> 00:30:24,950
be long the longer the better all right

00:30:21,600 --> 00:30:27,510
let people put in really long passwords

00:30:24,950 --> 00:30:31,500
your password should not contain a user

00:30:27,510 --> 00:30:33,930
name for some reason people do that and

00:30:31,500 --> 00:30:37,970
you should try to use at least three of

00:30:33,930 --> 00:30:37,970
the four available character types

00:30:39,470 --> 00:30:45,120
lowercase uppercase numbers and symbol

00:30:41,910 --> 00:30:49,620
so try to use at least three of the four

00:30:45,120 --> 00:30:51,600
those and then try to consider making

00:30:49,620 --> 00:30:52,910
users change passwords if you know every

00:30:51,600 --> 00:30:55,070
three months

00:30:52,910 --> 00:30:58,210
although

00:30:55,070 --> 00:31:00,800
you know we try to avoid that because

00:30:58,210 --> 00:31:02,480
you know you don't want to you want

00:31:00,800 --> 00:31:06,170
people to engage with your site so it's

00:31:02,480 --> 00:31:07,910
a bit of a trade-off there obviously ok

00:31:06,170 --> 00:31:12,200
password hashing is anybody here

00:31:07,910 --> 00:31:16,100
familiar with password hashing okay all

00:31:12,200 --> 00:31:18,080
right so the the good thing about

00:31:16,100 --> 00:31:19,970
password hashing is you can assume that

00:31:18,080 --> 00:31:21,440
your database has been stolen and then

00:31:19,970 --> 00:31:22,970
your users passwords cannot be

00:31:21,440 --> 00:31:25,760
compromised

00:31:22,970 --> 00:31:27,440
so you know don't use any of the one

00:31:25,760 --> 00:31:29,870
pass hashing algorithms

00:31:27,440 --> 00:31:32,540
you know like md5 oh yeah not not md5

00:31:29,870 --> 00:31:34,370
you know or just sha right you want to

00:31:32,540 --> 00:31:38,390
use an industry-standard hashing

00:31:34,370 --> 00:31:41,390
framework which will do multi paths

00:31:38,390 --> 00:31:45,380
which will put constraints on the CPU

00:31:41,390 --> 00:31:49,250
and also constraints on the memory and

00:31:45,380 --> 00:31:50,000
we're gonna look at that because and

00:31:49,250 --> 00:31:52,100
then the other thing that these

00:31:50,000 --> 00:31:55,760
frameworks will do is create a unique

00:31:52,100 --> 00:32:00,440
salt as part of the hash for every user

00:31:55,760 --> 00:32:01,880
right so they do that work for you so I

00:32:00,440 --> 00:32:05,750
have been using bcrypt

00:32:01,880 --> 00:32:07,310
for like ever and it's still ok but the

00:32:05,750 --> 00:32:10,670
thing is some researchers have found

00:32:07,310 --> 00:32:15,470
that with bcrypt you know because of all

00:32:10,670 --> 00:32:17,980
those GPU processors now you can still

00:32:15,470 --> 00:32:21,190
crack a lot of passwords pretty fast

00:32:17,980 --> 00:32:25,760
with some of the more powerful GPUs and

00:32:21,190 --> 00:32:27,890
so researchers identified the need to

00:32:25,760 --> 00:32:30,110
put some memory constraints so bcrypt

00:32:27,890 --> 00:32:34,790
did multi pass and they put constraints

00:32:30,110 --> 00:32:36,640
on the CPU but now to counter GPUs they

00:32:34,790 --> 00:32:41,840
want to put constraints on the memory

00:32:36,640 --> 00:32:46,610
and this is where the argon 2 algorithm

00:32:41,840 --> 00:32:48,950
came out a few years ago so it was the

00:32:46,610 --> 00:32:51,640
winner of a password hashing competition

00:32:48,950 --> 00:32:53,930
and PHP is one of the few languages

00:32:51,640 --> 00:32:57,140
which has been supporting it for a while

00:32:53,930 --> 00:33:01,220
now so it was baked in PHP 7 so if you

00:32:57,140 --> 00:33:05,900
look at password hash in PHP you'll see

00:33:01,220 --> 00:33:08,420
argon 2 as one of the algorithms ok

00:33:05,900 --> 00:33:11,390
so I'm still using bcrypt on top of my

00:33:08,420 --> 00:33:14,690
sites I need to switch to argon and have

00:33:11,390 --> 00:33:18,500
gotten around to do it so hopefully I

00:33:14,690 --> 00:33:20,180
don't get cracked but so there's I have

00:33:18,500 --> 00:33:22,880
an article by David Whitlock that

00:33:20,180 --> 00:33:24,950
compares the the benefits of argon to

00:33:22,880 --> 00:33:27,070
over bcrypt so it's definitely worth a

00:33:24,950 --> 00:33:27,070
read

00:33:29,380 --> 00:33:39,320
yeah so transport obviously any time you

00:33:36,980 --> 00:33:43,820
have sensitive information transiting

00:33:39,320 --> 00:33:46,670
you want to use TLS so has anybody here

00:33:43,820 --> 00:33:47,360
use let's encrypt org yeah it's pretty

00:33:46,670 --> 00:33:52,970
cool right

00:33:47,360 --> 00:33:54,559
free TLS certificates love it so

00:33:52,970 --> 00:33:56,270
definitely try to use TLS for everything

00:33:54,559 --> 00:33:57,770
but definitely profusely for login and

00:33:56,270 --> 00:34:03,410
registration and password recovery right

00:33:57,770 --> 00:34:05,630
now does anybody remember kind of the

00:34:03,410 --> 00:34:08,179
open SSL vulnerabilities in the last few

00:34:05,630 --> 00:34:12,080
years like heartbleed anybody remembers

00:34:08,179 --> 00:34:17,510
heartbleed right okay well sometimes TLS

00:34:12,080 --> 00:34:20,929
can fail us right so I've started

00:34:17,510 --> 00:34:25,520
working a little bit with a JavaScript

00:34:20,929 --> 00:34:30,310
library called JSON crypt and so it

00:34:25,520 --> 00:34:32,870
supports public private key encryption

00:34:30,310 --> 00:34:35,899
similar to what you would do with with

00:34:32,870 --> 00:34:38,899
TLS but what you can do with this setup

00:34:35,899 --> 00:34:42,290
is you could use this client-side

00:34:38,899 --> 00:34:45,649
JavaScript library to encrypt the user's

00:34:42,290 --> 00:34:48,139
password on the HTML page before it gets

00:34:45,649 --> 00:34:51,470
sent you can encrypt it with the public

00:34:48,139 --> 00:34:53,690
key and when it gets to the server where

00:34:51,470 --> 00:34:56,179
you have the private key you can decrypt

00:34:53,690 --> 00:34:59,030
it right you're still going to use TLS

00:34:56,179 --> 00:35:01,340
to submit the form make sure that you

00:34:59,030 --> 00:35:03,560
know the network layer is still TLS but

00:35:01,340 --> 00:35:05,120
on top of that you've got your own layer

00:35:03,560 --> 00:35:07,370
of encryption you know on top of that

00:35:05,120 --> 00:35:10,850
right so if somebody finds their own to

00:35:07,370 --> 00:35:12,110
be a vulnerability and open SSL and they

00:35:10,850 --> 00:35:13,100
look at your traffic they're still gonna

00:35:12,110 --> 00:35:14,720
see junk because you've already

00:35:13,100 --> 00:35:17,510
encrypted that right so it's kind of

00:35:14,720 --> 00:35:18,710
like super paranoid you know two layers

00:35:17,510 --> 00:35:22,250
of security

00:35:18,710 --> 00:35:27,830
I don't like you trust people so there

00:35:22,250 --> 00:35:29,630
you go alright so session length and rhe

00:35:27,830 --> 00:35:36,410
off try to keep your sessions as short

00:35:29,630 --> 00:35:39,560
as tolerable so for example does anybody

00:35:36,410 --> 00:35:42,349
here go on amazon.com or Amazon Jodi

00:35:39,560 --> 00:35:45,890
right okay so on Amazon you're always

00:35:42,349 --> 00:35:47,300
logged in right it always remembers who

00:35:45,890 --> 00:35:49,280
you are it's always doing

00:35:47,300 --> 00:35:52,099
recommendations for you but when you

00:35:49,280 --> 00:35:53,990
check out right before you check out at

00:35:52,099 --> 00:35:56,510
the very end that's where you have to

00:35:53,990 --> 00:35:58,849
reenter your password right so it's it's

00:35:56,510 --> 00:36:01,839
a really good practice you know you can

00:35:58,849 --> 00:36:04,280
keep users logged in for non-sensitive

00:36:01,839 --> 00:36:06,740
interactions before what's transactional

00:36:04,280 --> 00:36:08,210
and sensitive then yeah try to force a

00:36:06,740 --> 00:36:14,530
really different kind of a different

00:36:08,210 --> 00:36:21,530
shorter live session so that's that

00:36:14,530 --> 00:36:29,089
compromise account so try to have an

00:36:21,530 --> 00:36:31,430
event log to log things so it should be

00:36:29,089 --> 00:36:33,410
a data store that's separate for your

00:36:31,430 --> 00:36:36,080
main applications data store it could be

00:36:33,410 --> 00:36:37,400
a no sequel store so it'll be a bit

00:36:36,080 --> 00:36:42,140
easier to scale because you're gonna get

00:36:37,400 --> 00:36:44,150
a lot of those events possibly and

00:36:42,140 --> 00:36:47,450
definitely have separate credentials

00:36:44,150 --> 00:36:49,160
from your main application you can scale

00:36:47,450 --> 00:36:52,580
it independently and and the key is to

00:36:49,160 --> 00:36:53,810
gather forensic forensic evidence when

00:36:52,580 --> 00:36:56,960
people interact with your applications

00:36:53,810 --> 00:37:01,400
when people log in whether there's

00:36:56,960 --> 00:37:06,200
successful or not you know because if an

00:37:01,400 --> 00:37:07,520
account got compromised you want to see

00:37:06,200 --> 00:37:10,160
what they're doing in their account

00:37:07,520 --> 00:37:12,710
right so in the event log can help out

00:37:10,160 --> 00:37:17,210
with that but obviously again you have

00:37:12,710 --> 00:37:18,710
to look for gdpr compliance you know

00:37:17,210 --> 00:37:20,480
people you still want to allow people to

00:37:18,710 --> 00:37:22,250
be forgotten and I just don't know how

00:37:20,480 --> 00:37:28,280
to handle this within an info SEC

00:37:22,250 --> 00:37:31,060
context so alright that was a lot here's

00:37:28,280 --> 00:37:33,040
a puppy that's my dog Archer

00:37:31,060 --> 00:37:37,840
all right so now let's look at Roth

00:37:33,040 --> 00:37:40,090
security so there are two concepts

00:37:37,840 --> 00:37:43,360
there's authentication which means Who

00:37:40,090 --> 00:37:46,930
am I and then there's authorization what

00:37:43,360 --> 00:37:50,160
am I allowed to do when off to first

00:37:46,930 --> 00:37:54,520
came out it only cared about

00:37:50,160 --> 00:37:56,470
authorization okay and it left and it

00:37:54,520 --> 00:37:59,740
left authentication as an implementation

00:37:56,470 --> 00:38:01,930
detail that it did not care about

00:37:59,740 --> 00:38:05,500
so this is where open-air eConnect came

00:38:01,930 --> 00:38:08,320
out shortly after and open and connect

00:38:05,500 --> 00:38:11,230
is technically a specialization of two

00:38:08,320 --> 00:38:12,970
and it defines standards for the things

00:38:11,230 --> 00:38:16,060
that it kind of left up to the

00:38:12,970 --> 00:38:19,570
implementer so it adds authentication

00:38:16,060 --> 00:38:21,580
and a lot more and it's a YDC is what we

00:38:19,570 --> 00:38:25,090
use by social media sites and many web

00:38:21,580 --> 00:38:28,630
applications phone apps as well for

00:38:25,090 --> 00:38:31,540
authentication and authorization so or

00:38:28,630 --> 00:38:33,850
IDC supports for grant types of code

00:38:31,540 --> 00:38:36,460
implicit resource owner password client

00:38:33,850 --> 00:38:39,640
credential it's important to study those

00:38:36,460 --> 00:38:42,790
grant types I have an article here by

00:38:39,640 --> 00:38:43,990
Keith Casey he kind of describes all of

00:38:42,790 --> 00:38:47,800
them and kind of work with the better

00:38:43,990 --> 00:38:51,070
use cases input the implicit grant type

00:38:47,800 --> 00:38:55,270
gets used quite a bit for single page

00:38:51,070 --> 00:38:57,250
applications some some phone apps and

00:38:55,270 --> 00:39:01,720
the idea is the user login and password

00:38:57,250 --> 00:39:04,660
is not persisted on on your single page

00:39:01,720 --> 00:39:06,910
application or your phone app the flow

00:39:04,660 --> 00:39:09,610
kind of looks like this the user opens

00:39:06,910 --> 00:39:11,170
the application the applications like I

00:39:09,610 --> 00:39:14,290
don't know if you are so it redirects

00:39:11,170 --> 00:39:17,380
the user to an OID C provider where the

00:39:14,290 --> 00:39:19,990
user is prompted with their username and

00:39:17,380 --> 00:39:25,270
password and also do you want to allow

00:39:19,990 --> 00:39:27,970
this site to get your information if the

00:39:25,270 --> 00:39:30,550
user passes all that then the provider

00:39:27,970 --> 00:39:34,030
sends a token back to the user back to

00:39:30,550 --> 00:39:36,940
the app which can then and then the app

00:39:34,030 --> 00:39:40,870
can send that token to your API which

00:39:36,940 --> 00:39:44,859
will validate the token using some

00:39:40,870 --> 00:39:47,709
shared secrets that it has with the Oh

00:39:44,859 --> 00:39:51,009
see provider so the key here is that the

00:39:47,709 --> 00:39:54,729
areas in pink are your code and this

00:39:51,009 --> 00:40:02,019
blue box is most often some other

00:39:54,729 --> 00:40:03,249
framework or a third party provider so

00:40:02,019 --> 00:40:07,319
what you want to make sure is that

00:40:03,249 --> 00:40:07,319
you're using TLS for all communications

00:40:08,009 --> 00:40:15,190
there's a redirection that happens here

00:40:12,239 --> 00:40:16,779
you need to prevent arbitrary reduction

00:40:15,190 --> 00:40:19,839
redirection to happen you need to make

00:40:16,779 --> 00:40:24,789
sure that the destination URLs for

00:40:19,839 --> 00:40:26,799
redirection is white listed so this is

00:40:24,789 --> 00:40:32,049
what it means well you see must register

00:40:26,799 --> 00:40:34,539
validate the valid redirect URLs you

00:40:32,049 --> 00:40:37,059
want to have proper token validation if

00:40:34,539 --> 00:40:38,950
you're using Java tokens try to not have

00:40:37,059 --> 00:40:42,279
any sensitive information in them you

00:40:38,950 --> 00:40:44,559
really should not need need that and

00:40:42,279 --> 00:40:47,160
then try to store your ja tokens as HTTP

00:40:44,559 --> 00:40:49,719
only such that if your application gets

00:40:47,160 --> 00:40:54,119
compromised at the JavaScript layer the

00:40:49,719 --> 00:40:57,039
N JavaScript cannot read the JA token

00:40:54,119 --> 00:40:58,749
try to use well-tested client libraries

00:40:57,039 --> 00:41:01,900
and well-tested

00:40:58,749 --> 00:41:04,359
Oh IDC servers try to not roll out your

00:41:01,900 --> 00:41:05,619
own it's a pretty terrible idea there's

00:41:04,359 --> 00:41:10,420
a lot of really good open source

00:41:05,619 --> 00:41:13,989
alternatives including identity server

00:41:10,420 --> 00:41:17,380
for that's a framework implemented in

00:41:13,989 --> 00:41:19,479
c-sharp net but in PHP you have a auth

00:41:17,380 --> 00:41:22,329
to by the PHP League so you can use that

00:41:19,479 --> 00:41:25,059
as a foundation I've used also friends

00:41:22,329 --> 00:41:29,559
with Symphony the foster off server

00:41:25,059 --> 00:41:33,190
bundle and then for client Miller where

00:41:29,559 --> 00:41:36,390
you've got passport GS and there's also

00:41:33,190 --> 00:41:39,880
a YDC client GS so there are a lot of

00:41:36,390 --> 00:41:41,440
open source alternatives this slide

00:41:39,880 --> 00:41:43,269
that's the one slide that I don't have

00:41:41,440 --> 00:41:45,569
in the PDF yet because I just kind of

00:41:43,269 --> 00:41:49,170
added it today and I try to upload it

00:41:45,569 --> 00:41:49,170
hopefully I will have it tonight

00:41:50,380 --> 00:41:59,890
okay so now let's look at resource

00:41:52,690 --> 00:42:01,570
access and multi-tenancy so I have a

00:41:59,890 --> 00:42:04,000
link to the OWASP site that kind of

00:42:01,570 --> 00:42:07,480
describes that but basically in your

00:42:04,000 --> 00:42:09,610
application if you have a user report

00:42:07,480 --> 00:42:13,840
you know by an ID right and that's my

00:42:09,610 --> 00:42:15,970
report well what happens if I change

00:42:13,840 --> 00:42:18,100
your number right if I add one to the

00:42:15,970 --> 00:42:20,980
number am I going to see somebody else

00:42:18,100 --> 00:42:24,070
as a report right you got to make sure

00:42:20,980 --> 00:42:27,580
that whenever you access a resource by

00:42:24,070 --> 00:42:28,930
an identifier that you enforce the

00:42:27,580 --> 00:42:33,090
business rules to make sure that

00:42:28,930 --> 00:42:36,490
whomever is logged in actually has

00:42:33,090 --> 00:42:40,270
legitimate access to this resource okay

00:42:36,490 --> 00:42:43,210
that's I find this mistake in a lot of

00:42:40,270 --> 00:42:47,580
applications it tends to be kind of an

00:42:43,210 --> 00:42:50,230
afterthought so be very careful right

00:42:47,580 --> 00:42:52,870
some people say oh but we should just be

00:42:50,230 --> 00:42:56,170
using you you IDs because you you IDs

00:42:52,870 --> 00:42:57,370
cannot be incremented or guests here's

00:42:56,170 --> 00:43:00,340
the thing though there's this little

00:42:57,370 --> 00:43:02,020
thing called HTTP referer header it is

00:43:00,340 --> 00:43:04,450
possible for somebody to be viewing a

00:43:02,020 --> 00:43:06,700
resource with the UUID in the URL then

00:43:04,450 --> 00:43:09,310
you're linking to some other site from

00:43:06,700 --> 00:43:14,110
the footer somebody clicks on the footer

00:43:09,310 --> 00:43:18,610
and that UUID URL shows up and the refer

00:43:14,110 --> 00:43:20,620
and the next site ok so you you IDs are

00:43:18,610 --> 00:43:22,360
security through obscurity you know you

00:43:20,620 --> 00:43:24,580
do not want to use your you IDs for

00:43:22,360 --> 00:43:32,800
security it's not what they're meant for

00:43:24,580 --> 00:43:35,650
ok yeah so multi-tenancy is a thing

00:43:32,800 --> 00:43:38,710
right so if you're building a SAS

00:43:35,650 --> 00:43:41,500
product no not not only are you going to

00:43:38,710 --> 00:43:44,350
have multiple users in your application

00:43:41,500 --> 00:43:46,390
so you don't want one user to see

00:43:44,350 --> 00:43:49,150
information from another user you don't

00:43:46,390 --> 00:43:51,390
want that but it's even worse if you

00:43:49,150 --> 00:43:54,160
have multiple companies and you have an

00:43:51,390 --> 00:43:55,990
employee from one company seeing data

00:43:54,160 --> 00:43:58,840
that belongs to another employee from

00:43:55,990 --> 00:44:00,760
another company right that's even worse

00:43:58,840 --> 00:44:02,200
so you don't want that again you want to

00:44:00,760 --> 00:44:04,410
make sure you enforce your business

00:44:02,200 --> 00:44:04,410
rules

00:44:06,180 --> 00:44:13,000
all right so now as we get close to the

00:44:11,650 --> 00:44:15,670
end I want to get into some

00:44:13,000 --> 00:44:19,960
architectural considerations securing

00:44:15,670 --> 00:44:22,810
your data stores whether it's SQL or new

00:44:19,960 --> 00:44:25,300
SQL do not put your data store on the

00:44:22,810 --> 00:44:28,480
Internet okay there is no valid reason

00:44:25,300 --> 00:44:32,370
for your MySQL database or your MongoDB

00:44:28,480 --> 00:44:34,120
database to have a public IP that is

00:44:32,370 --> 00:44:35,710
exposed to the Internet

00:44:34,120 --> 00:44:40,420
right that does not have some stringent

00:44:35,710 --> 00:44:45,010
firewall rules you want to put your data

00:44:40,420 --> 00:44:47,770
store the private network with the web

00:44:45,010 --> 00:44:49,120
server and really the only thing that

00:44:47,770 --> 00:44:52,570
should be able to connect your data

00:44:49,120 --> 00:44:55,240
store should be your web server make

00:44:52,570 --> 00:44:58,450
sure you set passwords on your data

00:44:55,240 --> 00:45:01,660
stores turns out that a lot of people

00:44:58,450 --> 00:45:04,540
put MongoDB database is out there

00:45:01,660 --> 00:45:06,640
without passwords like they literally do

00:45:04,540 --> 00:45:09,280
that and you've got thousands of them

00:45:06,640 --> 00:45:13,090
that got compromised what's even worse

00:45:09,280 --> 00:45:16,060
is people build applications with a

00:45:13,090 --> 00:45:19,390
 database on a public network with

00:45:16,060 --> 00:45:23,890
no password and then they have a phone

00:45:19,390 --> 00:45:25,750
app that talks directly to it okay it is

00:45:23,890 --> 00:45:27,820
scary and there are a lot of those out

00:45:25,750 --> 00:45:30,060
there and they get compromised a lot so

00:45:27,820 --> 00:45:34,720
please don't do that

00:45:30,060 --> 00:45:37,300
and so when you're working with a data

00:45:34,720 --> 00:45:42,010
store try to apply the least privileged

00:45:37,300 --> 00:45:45,550
principle so if you look at MySQL for

00:45:42,010 --> 00:45:47,350
example you can create a root user that

00:45:45,550 --> 00:45:50,290
can do anything drop tables create

00:45:47,350 --> 00:45:51,940
tables alter tables write your dinner

00:45:50,290 --> 00:45:55,660
the application should not need to do

00:45:51,940 --> 00:45:57,220
that right the user that runs your web

00:45:55,660 --> 00:46:01,390
application should only be able to do

00:45:57,220 --> 00:46:03,880
select insert and update of records you

00:46:01,390 --> 00:46:07,150
might allow it to do delete but ask

00:46:03,880 --> 00:46:09,220
yourself do we actually want to delete

00:46:07,150 --> 00:46:11,830
records or sometimes we just do soft

00:46:09,220 --> 00:46:14,050
deletes of records where we update you

00:46:11,830 --> 00:46:16,950
know a deleted field on a record for

00:46:14,050 --> 00:46:16,950
example right so

00:46:16,980 --> 00:46:25,390
also it's a good idea does anybody here

00:46:20,380 --> 00:46:28,000
do master-slave replication yeah so it's

00:46:25,390 --> 00:46:30,070
free typical to create a read to have

00:46:28,000 --> 00:46:31,960
like a read database with the read

00:46:30,070 --> 00:46:34,390
credentials and then the right

00:46:31,960 --> 00:46:38,320
credentials right and if you do that

00:46:34,390 --> 00:46:40,840
it's a good idea to only allow your read

00:46:38,320 --> 00:46:43,000
user to do selects and then only allow

00:46:40,840 --> 00:46:45,070
your write user to do insert and updates

00:46:43,000 --> 00:46:47,760
so if your application gets cracked

00:46:45,070 --> 00:46:50,650
through the right user they can't really

00:46:47,760 --> 00:46:53,740
select data and if it gets cracked

00:46:50,650 --> 00:46:55,780
through the select user then they can't

00:46:53,740 --> 00:47:00,280
modify data right at least you mitigate

00:46:55,780 --> 00:47:02,320
the impact of things all right so now

00:47:00,280 --> 00:47:05,620
let's look at the network design a

00:47:02,320 --> 00:47:07,900
little bit anytime you put a machine on

00:47:05,620 --> 00:47:08,470
the Internet you get your operating

00:47:07,900 --> 00:47:10,150
system

00:47:08,470 --> 00:47:11,950
you've got the daemons that run on top

00:47:10,150 --> 00:47:14,290
of the operating system then you have

00:47:11,950 --> 00:47:16,600
your application frameworks that run on

00:47:14,290 --> 00:47:19,270
top of the daemons then you may have

00:47:16,600 --> 00:47:22,750
some framework plugins then you're gonna

00:47:19,270 --> 00:47:24,760
have your code right so anytime you put

00:47:22,750 --> 00:47:25,870
a machine on the internet that's kind of

00:47:24,760 --> 00:47:28,500
the vulnerability stack you have to

00:47:25,870 --> 00:47:30,370
worry about and so the first thing that

00:47:28,500 --> 00:47:32,470
attackers are going to do is they're

00:47:30,370 --> 00:47:35,170
going to do brute-force attacks with

00:47:32,470 --> 00:47:37,180
like low-level like buffer overflows

00:47:35,170 --> 00:47:40,210
against your demons and then brute force

00:47:37,180 --> 00:47:42,730
credentials right once they do that once

00:47:40,210 --> 00:47:44,800
they get in then they can compromise the

00:47:42,730 --> 00:47:48,250
operating system which means it can

00:47:44,800 --> 00:47:51,880
compromise your entire application okay

00:47:48,250 --> 00:47:53,920
and then conversely attackers can go in

00:47:51,880 --> 00:47:55,390
through your all wasp based

00:47:53,920 --> 00:47:57,280
vulnerabilities right your web

00:47:55,390 --> 00:47:58,900
application web application

00:47:57,280 --> 00:48:01,840
vulnerabilities and if they're

00:47:58,900 --> 00:48:03,460
successful in many cases then it allows

00:48:01,840 --> 00:48:09,930
them to compromise the rest of your

00:48:03,460 --> 00:48:14,140
operating system okay so whenever you

00:48:09,930 --> 00:48:18,930
design your network just try to be very

00:48:14,140 --> 00:48:21,670
careful with to isolate everything so

00:48:18,930 --> 00:48:24,010
the let me show you a wily and secure

00:48:21,670 --> 00:48:26,140
setup okay you have your data store on

00:48:24,010 --> 00:48:28,000
the open Internet

00:48:26,140 --> 00:48:30,040
you have your web servers on the open

00:48:28,000 --> 00:48:30,580
Internet and then you know your load

00:48:30,040 --> 00:48:32,260
balancer

00:48:30,580 --> 00:48:33,360
and then you have another data store

00:48:32,260 --> 00:48:36,460
with a bunch of web servers and

00:48:33,360 --> 00:48:40,630
everything is on the open Internet okay

00:48:36,460 --> 00:48:43,690
so you may have a load balancer here but

00:48:40,630 --> 00:48:45,940
attackers are gonna say cool load

00:48:43,690 --> 00:48:47,530
balancer bro and they're just gonna go

00:48:45,940 --> 00:48:49,090
around it and they're gonna attack your

00:48:47,530 --> 00:48:50,890
web servers and your databases and

00:48:49,090 --> 00:48:53,080
they're gonna do low-level hacks high

00:48:50,890 --> 00:48:53,710
level hacks you're right you're gonna

00:48:53,080 --> 00:48:55,420
get owned

00:48:53,710 --> 00:48:59,200
right you do not want to put all these

00:48:55,420 --> 00:49:01,570
things on an open network a more secure

00:48:59,200 --> 00:49:04,090
approach might look like this you have

00:49:01,570 --> 00:49:05,830
your private cloud inside of which you

00:49:04,090 --> 00:49:08,440
could have another private network for

00:49:05,830 --> 00:49:09,730
your first application and then another

00:49:08,440 --> 00:49:13,000
private network for your second

00:49:09,730 --> 00:49:14,820
application and then you will have a

00:49:13,000 --> 00:49:17,080
data store with a couple web server

00:49:14,820 --> 00:49:19,570
inside those private networks same thing

00:49:17,080 --> 00:49:21,520
for the second application then you're

00:49:19,570 --> 00:49:26,530
going to put your load balancer in front

00:49:21,520 --> 00:49:28,210
of your cloud network and then you're

00:49:26,530 --> 00:49:30,130
gonna have firewalls in between your

00:49:28,210 --> 00:49:31,630
data store in your web servers and then

00:49:30,130 --> 00:49:34,420
your firewall between your load balancer

00:49:31,630 --> 00:49:36,160
and your internal network so basically

00:49:34,420 --> 00:49:38,890
and then you're going to you know you

00:49:36,160 --> 00:49:41,050
might have a VPN one and VPN to

00:49:38,890 --> 00:49:44,110
associate dev ops can go in and

00:49:41,050 --> 00:49:47,140
administer these systems okay but now

00:49:44,110 --> 00:49:49,450
technically the only way attackers can

00:49:47,140 --> 00:49:52,060
get into your network is through your

00:49:49,450 --> 00:49:53,650
little bouncer that's it right the only

00:49:52,060 --> 00:49:57,370
way they can attack you is through ports

00:49:53,650 --> 00:50:01,350
80 and 443 that's it right they can't

00:49:57,370 --> 00:50:04,660
try to go around to all these machines

00:50:01,350 --> 00:50:08,020
so you know the benefits are obvious and

00:50:04,660 --> 00:50:10,240
just kind of did it here another big

00:50:08,020 --> 00:50:13,330
thing is securing credentials okay

00:50:10,240 --> 00:50:15,340
whether do not put your credentials into

00:50:13,330 --> 00:50:18,220
your git repo please

00:50:15,340 --> 00:50:21,070
okay it happens a lot more than you

00:50:18,220 --> 00:50:23,290
think you know whether it's your data

00:50:21,070 --> 00:50:24,960
store your mysql password credentials

00:50:23,290 --> 00:50:27,340
you didn't want to put that and your get

00:50:24,960 --> 00:50:30,490
you didn't want you do not want to put

00:50:27,340 --> 00:50:35,560
your Amazon AWS keys do not want to do

00:50:30,490 --> 00:50:38,620
that your any kind of third party API

00:50:35,560 --> 00:50:40,210
credentials you don't want to do that is

00:50:38,620 --> 00:50:43,240
anybody here familiar with the data and

00:50:40,210 --> 00:50:44,290
files yeah they're good thing to look at

00:50:43,240 --> 00:50:47,140
the work

00:50:44,290 --> 00:50:48,870
Ross platform it's a good idea has

00:50:47,140 --> 00:50:51,640
anybody here play with a sable vault

00:50:48,870 --> 00:50:53,740
yeah it's another pretty you know cool

00:50:51,640 --> 00:50:54,160
thing to work with so look at these

00:50:53,740 --> 00:50:59,050
things

00:50:54,160 --> 00:51:01,630
to secure your credentials okay so in

00:50:59,050 --> 00:51:04,660
the end InfoSec is a mindset when

00:51:01,630 --> 00:51:07,120
somebody gets owned do not laugh at them

00:51:04,660 --> 00:51:08,800
it's our collective responsibility from

00:51:07,120 --> 00:51:12,130
executives to measure software engineers

00:51:08,800 --> 00:51:13,990
DevOps engineers we all own security

00:51:12,130 --> 00:51:18,690
right it's not a DevOps thing it's not a

00:51:13,990 --> 00:51:20,950
developer thing right we all own it I

00:51:18,690 --> 00:51:23,410
recommend subscribing to InfoSec mailing

00:51:20,950 --> 00:51:25,990
lists here are the few - a few of them -

00:51:23,410 --> 00:51:26,680
which I subscribe InfoSec news full

00:51:25,990 --> 00:51:31,570
disclosure

00:51:26,680 --> 00:51:34,060
bug track sir gov well that's for us but

00:51:31,570 --> 00:51:36,820
yeah so like I said what someone gets

00:51:34,060 --> 00:51:39,760
owned read their case studies and find

00:51:36,820 --> 00:51:41,620
what's applicable to us you know don't

00:51:39,760 --> 00:51:45,400
laugh at them because yeah it could be

00:51:41,620 --> 00:51:48,949
us tomorrow okay thank you that's it

00:51:45,400 --> 00:51:48,949
[Applause]

00:51:49,650 --> 00:52:06,770
[Music]

00:52:03,390 --> 00:52:06,770

YouTube URL: https://www.youtube.com/watch?v=VvamAVI83m4


