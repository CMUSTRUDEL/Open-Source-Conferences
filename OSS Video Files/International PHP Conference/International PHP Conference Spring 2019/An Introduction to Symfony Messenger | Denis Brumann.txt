Title: An Introduction to Symfony Messenger | Denis Brumann
Publication date: 2019-11-13
Playlist: International PHP Conference Spring 2019
Description: 
	Speaker: Denis Brumann (SensioLabs) | https://phpconference.com/speaker/denis-brumann/

Symfony 4 and the introduction of Flex put a focus on enabling developers to create microservice-style applications with Symfony. In a microservice architecture, delegating tasks to other services or distributing data between these services is a challenge most monolith applications do not have to deal with. The introduction of the Messenger component in Symfony 4.1 is aimed at this problem by allowing applications to send and receive messages to/from other applications or via message queues. In my talk, I want to give you an introduction to the Messenger component by showing how it can be introduced in an existing application and what concepts and principles it is built on. In a realistic scenario we will introduce a message based architecture, look at some of the challenges that arise and how to handle them and finally take a look at what other problems can be solved using a message bus.

🤗 Come, join us at the next International PHP Conference | https://phpconference.com/
👍 Like us on Facebook | https://www.facebook.com/ipc.germany/
👉 Follow us on Twitter | https://twitter.com/phpconference
Captions: 
	00:00:01,540 --> 00:00:08,309
[Music]

00:00:05,819 --> 00:00:12,719
all right I just got a signal so we can

00:00:08,309 --> 00:00:14,730
start hello everyone welcome to my talk

00:00:12,719 --> 00:00:17,130
and introduction to Symphony messenger

00:00:14,730 --> 00:00:19,650
here at the IPC it's my first time at

00:00:17,130 --> 00:00:21,779
the IPC so really excited to finally be

00:00:19,650 --> 00:00:23,330
here even though I live in Berlin and I

00:00:21,779 --> 00:00:28,590
could basically come here every year I

00:00:23,330 --> 00:00:31,920
got around to it so what will you get is

00:00:28,590 --> 00:00:34,469
a talk that I gave before I think

00:00:31,920 --> 00:00:38,059
roughly a year ago but you will get this

00:00:34,469 --> 00:00:40,800
nice new version Symphony 4.3 ready

00:00:38,059 --> 00:00:42,450
which doesn't sound like a lot but the

00:00:40,800 --> 00:00:45,420
symphony messenger component when was

00:00:42,450 --> 00:00:48,030
first introduced in symphony 4.1 it

00:00:45,420 --> 00:00:51,660
actually changed quite a lot and yes

00:00:48,030 --> 00:00:53,910
Symphony 4.3 came out last Friday so

00:00:51,660 --> 00:00:56,370
this is brand new it's when you want to

00:00:53,910 --> 00:00:58,379
start this is how you want to do it and

00:00:56,370 --> 00:01:00,690
if you already started an old project

00:00:58,379 --> 00:01:02,699
with Symphony messenger you will

00:01:00,690 --> 00:01:05,280
probably already see a few things that

00:01:02,699 --> 00:01:08,970
look a little bit different or

00:01:05,280 --> 00:01:11,549
completely different even so let's dive

00:01:08,970 --> 00:01:14,700
in first a little bit about me my name

00:01:11,549 --> 00:01:18,360
is Dennis as I said I live here Berlin I

00:01:14,700 --> 00:01:22,140
work at censor left Germany we also have

00:01:18,360 --> 00:01:24,540
offices in Cologne in Hamburg and what

00:01:22,140 --> 00:01:27,360
we do is basically we go to client

00:01:24,540 --> 00:01:31,409
projects and we have them migrate to

00:01:27,360 --> 00:01:33,210
symphony or use symfony components and

00:01:31,409 --> 00:01:35,640
sometimes not even do symphony at all

00:01:33,210 --> 00:01:37,920
just PHP projects where we have our

00:01:35,640 --> 00:01:40,320
expertise with good architecture and

00:01:37,920 --> 00:01:42,320
stuff like that and we also do workshops

00:01:40,320 --> 00:01:45,570
and tutorials and this kind of stuff so

00:01:42,320 --> 00:01:46,799
if you have something difficult with PHP

00:01:45,570 --> 00:01:49,049
where you kind of want to have

00:01:46,799 --> 00:01:53,009
additional input then you can just call

00:01:49,049 --> 00:01:54,899
us and we will look into that all right

00:01:53,009 --> 00:01:56,579
before I want to start because I don't

00:01:54,899 --> 00:01:58,649
know how familiar everyone is with

00:01:56,579 --> 00:02:02,790
symphony a figure and just give a very

00:01:58,649 --> 00:02:05,640
very short introduction of symphony as a

00:02:02,790 --> 00:02:09,030
full-stack framework we got this is

00:02:05,640 --> 00:02:11,430
probably what everyone knows if you

00:02:09,030 --> 00:02:13,599
write symphony you will probably know

00:02:11,430 --> 00:02:15,450
like that

00:02:13,599 --> 00:02:17,799
you get it something like this

00:02:15,450 --> 00:02:21,639
controller that basically takes a

00:02:17,799 --> 00:02:25,480
request and then you will make this

00:02:21,639 --> 00:02:27,280
request do you extract the data and we

00:02:25,480 --> 00:02:30,310
will call some services in this case

00:02:27,280 --> 00:02:32,859
it's a doctrine repository for example

00:02:30,310 --> 00:02:35,379
to get some data and then you pass this

00:02:32,859 --> 00:02:37,510
data into a template you make nice HTML

00:02:35,379 --> 00:02:42,099
or whatever and then you send out a

00:02:37,510 --> 00:02:44,109
response so this is basically every

00:02:42,099 --> 00:02:47,230
other framework for PHP out there and

00:02:44,109 --> 00:02:49,209
and that is for people associate with

00:02:47,230 --> 00:02:51,790
Symphony like I have this framework I

00:02:49,209 --> 00:02:54,389
can do this kind of stuff but actually

00:02:51,790 --> 00:02:58,000
Symphony is a lot more you also have

00:02:54,389 --> 00:03:00,069
separate components also not that new of

00:02:58,000 --> 00:03:03,939
a concept like Zen framework at this as

00:03:00,069 --> 00:03:07,209
well as well but the nice thing about

00:03:03,939 --> 00:03:10,060
that is that you basically can pull out

00:03:07,209 --> 00:03:12,189
most symphony components and use them in

00:03:10,060 --> 00:03:14,139
your project no matter if you already

00:03:12,189 --> 00:03:18,220
use Symphony or not and the symphony

00:03:14,139 --> 00:03:20,019
messenger's is no exception basically if

00:03:18,220 --> 00:03:23,620
you have a Zen framework one project

00:03:20,019 --> 00:03:25,090
that is basically way old you can still

00:03:23,620 --> 00:03:26,829
decide yeah I want to have this

00:03:25,090 --> 00:03:28,959
messenger because we already use PHP

00:03:26,829 --> 00:03:30,669
seven and I like it and I want to use it

00:03:28,959 --> 00:03:34,290
and you can just do it by basically

00:03:30,669 --> 00:03:37,900
doing this composer require messenger

00:03:34,290 --> 00:03:40,389
the talk focuses on how to use it in a

00:03:37,900 --> 00:03:42,939
symphony project naturally because

00:03:40,389 --> 00:03:45,819
that's where things are easier because

00:03:42,939 --> 00:03:48,129
all the configuration is provided but

00:03:45,819 --> 00:03:49,720
but essentially what you see here is the

00:03:48,129 --> 00:03:51,909
same thing when you use it standalone

00:03:49,720 --> 00:03:55,180
all you have to do is most of the

00:03:51,909 --> 00:03:57,699
configuration in a little bit different

00:03:55,180 --> 00:03:59,979
way by basically just writing it

00:03:57,699 --> 00:04:04,780
yourself as PHP code instead of having

00:03:59,979 --> 00:04:06,729
this nice configuration layer so even in

00:04:04,780 --> 00:04:08,829
this modern symphony project you will

00:04:06,729 --> 00:04:13,150
probably use this command as well

00:04:08,829 --> 00:04:16,120
because symphony for try to basically

00:04:13,150 --> 00:04:19,209
have a very small initial footprint and

00:04:16,120 --> 00:04:22,840
then you add all those components that

00:04:19,209 --> 00:04:24,880
you need when you need them so basically

00:04:22,840 --> 00:04:25,520
you get a very very small project at

00:04:24,880 --> 00:04:27,430
first

00:04:25,520 --> 00:04:29,660
then when you decide I want for example

00:04:27,430 --> 00:04:31,460
templating because I want to write a

00:04:29,660 --> 00:04:33,860
traditional website where I have HTML

00:04:31,460 --> 00:04:35,750
then I just get the templating engine in

00:04:33,860 --> 00:04:37,669
and use that and if I want to just have

00:04:35,750 --> 00:04:40,190
an API where don't need any templating

00:04:37,669 --> 00:04:43,250
that then it won't even be there at all

00:04:40,190 --> 00:04:45,289
and and it won't bother me which is a

00:04:43,250 --> 00:04:47,210
neat concept if you have like all these

00:04:45,289 --> 00:04:49,490
ideas of micro-services for example

00:04:47,210 --> 00:04:52,400
where you want very small contained

00:04:49,490 --> 00:04:55,520
applications you can basically achieve

00:04:52,400 --> 00:04:57,259
that so yeah and a new symphony project

00:04:55,520 --> 00:04:59,440
you will probably install the messenger

00:04:57,259 --> 00:05:01,759
with composer require you will get this

00:04:59,440 --> 00:05:03,770
the thing that will be different in your

00:05:01,759 --> 00:05:06,349
standalone project is you won't see that

00:05:03,770 --> 00:05:10,099
bit at the bottom the configuration for

00:05:06,349 --> 00:05:13,159
those he'll this is the Flex plugin from

00:05:10,099 --> 00:05:15,620
symphony 4 it's a composer plugin that

00:05:13,159 --> 00:05:18,139
recognizes whenever you install a

00:05:15,620 --> 00:05:21,050
symphony package that has a so-called

00:05:18,139 --> 00:05:23,389
recipe and a recipe is basically just

00:05:21,050 --> 00:05:25,280
telling you like oh yeah there's certain

00:05:23,389 --> 00:05:27,770
configuration that has to be applied and

00:05:25,280 --> 00:05:30,860
it will do it automatically for you so

00:05:27,770 --> 00:05:32,120
basically what this does is write all

00:05:30,860 --> 00:05:35,509
the configuration that you would have

00:05:32,120 --> 00:05:37,490
manually write yourself and and register

00:05:35,509 --> 00:05:41,599
the bundle and will do all the stuff for

00:05:37,490 --> 00:05:44,569
you then that's it and then what it also

00:05:41,599 --> 00:05:46,039
writes right after that is what's next

00:05:44,569 --> 00:05:48,349
thing which is really nice because it

00:05:46,039 --> 00:05:50,449
already gives you an idea of yeah what

00:05:48,349 --> 00:05:52,610
do I do with this messenger thing and

00:05:50,449 --> 00:05:55,039
you can see a few things that we will

00:05:52,610 --> 00:05:56,599
talk about the the message bus for

00:05:55,039 --> 00:05:59,569
example is highlighted in green this is

00:05:56,599 --> 00:06:01,669
the service ID that we will use whenever

00:05:59,569 --> 00:06:04,039
we want to send a message you have some

00:06:01,669 --> 00:06:06,110
transport thingy here we will get to

00:06:04,039 --> 00:06:08,900
that and you also get the info for the

00:06:06,110 --> 00:06:11,960
documentation which is pretty good if

00:06:08,900 --> 00:06:15,039
you just want to see some code snippets

00:06:11,960 --> 00:06:17,930
how to actually use stuff like that and

00:06:15,039 --> 00:06:20,900
before we dive in finally one last

00:06:17,930 --> 00:06:24,469
disclaimer that the component is marked

00:06:20,900 --> 00:06:26,990
as experimental right now as I said was

00:06:24,469 --> 00:06:31,370
introduced in symphony 4.1 we now have

00:06:26,990 --> 00:06:34,009
4.3 the experimental doesn't mean that

00:06:31,370 --> 00:06:36,560
it's very brittle and I shouldn't use it

00:06:34,009 --> 00:06:39,620
in production all the experimental flag

00:06:36,560 --> 00:06:42,080
tells you is between minor versions we

00:06:39,620 --> 00:06:44,240
might change things that break the

00:06:42,080 --> 00:06:46,190
backwards compatibility symphony is

00:06:44,240 --> 00:06:48,909
usually very very strict about backwards

00:06:46,190 --> 00:06:51,289
compatibility inside minor versions

00:06:48,909 --> 00:06:53,360
because we basically want to make sure

00:06:51,289 --> 00:06:55,669
that people can update without breaking

00:06:53,360 --> 00:06:59,089
their code as long as it's not a major

00:06:55,669 --> 00:07:01,159
version jump but with those experimental

00:06:59,089 --> 00:07:03,680
components we basically allow ourselves

00:07:01,159 --> 00:07:06,889
to have this component in there very

00:07:03,680 --> 00:07:09,649
early on and you can already use it but

00:07:06,889 --> 00:07:11,960
we might make changes so when you use

00:07:09,649 --> 00:07:13,729
this experimental component you move

00:07:11,960 --> 00:07:16,039
your next minor update you might have to

00:07:13,729 --> 00:07:20,449
do adjustments and the messenger

00:07:16,039 --> 00:07:23,029
component uses a lot so it's still quite

00:07:20,449 --> 00:07:25,699
gentle so there when you have a very

00:07:23,029 --> 00:07:27,500
basic use case for this you might not

00:07:25,699 --> 00:07:28,729
even notice but especially under the

00:07:27,500 --> 00:07:30,979
hood that there are a lot of changes

00:07:28,729 --> 00:07:34,070
that happen throughout the development

00:07:30,979 --> 00:07:35,690
and for those of you who still think

00:07:34,070 --> 00:07:38,839
that experimental sounds a little bit

00:07:35,690 --> 00:07:40,940
too risky I'm not saying that it's

00:07:38,839 --> 00:07:43,729
guaranteed that symphony 4.4 will make

00:07:40,940 --> 00:07:47,750
it stable but it's very very likely

00:07:43,729 --> 00:07:50,210
because symphony 4.4 will also be the

00:07:47,750 --> 00:07:52,669
same thing that Symphony 5 will be

00:07:50,210 --> 00:07:58,659
because we have a time-based release so

00:07:52,669 --> 00:08:01,009
the 4.4 and 5.0 of basically features

00:07:58,659 --> 00:08:03,560
like less the same feature set but

00:08:01,009 --> 00:08:06,110
Symphony 5 will fraud all the

00:08:03,560 --> 00:08:08,089
duplications so it will float all the

00:08:06,110 --> 00:08:10,190
old stuff and we can start from a fresh

00:08:08,089 --> 00:08:11,870
new slate from all the new things we

00:08:10,190 --> 00:08:13,969
introduced and that's why it should be

00:08:11,870 --> 00:08:17,029
stable because then we can't really make

00:08:13,969 --> 00:08:20,750
any changes to it or at least it will be

00:08:17,029 --> 00:08:22,729
a lot more difficult alright let's start

00:08:20,750 --> 00:08:24,889
with the whole thing when we have a

00:08:22,729 --> 00:08:27,169
messenger what's the first thing that we

00:08:24,889 --> 00:08:30,949
will need it's obviously a message to

00:08:27,169 --> 00:08:33,289
pass around so this is basically the the

00:08:30,949 --> 00:08:36,260
very basic construct that we have and

00:08:33,289 --> 00:08:40,310
this is just one example how a message

00:08:36,260 --> 00:08:42,890
can look what what's interesting to know

00:08:40,310 --> 00:08:45,920
is first of all that this is just how I

00:08:42,890 --> 00:08:48,500
wrote this message you can also use just

00:08:45,920 --> 00:08:50,569
a class that has public properties you

00:08:48,500 --> 00:08:51,620
can use getters and setters for example

00:08:50,569 --> 00:08:54,560
if you lie

00:08:51,620 --> 00:08:57,230
as long as it's basically an object that

00:08:54,560 --> 00:08:59,810
contains some data that is basically

00:08:57,230 --> 00:09:01,460
what you want to send around the the

00:08:59,810 --> 00:09:05,570
information that something needs to act

00:09:01,460 --> 00:09:07,730
upon then it's fine and you can also see

00:09:05,570 --> 00:09:10,000
that this is just in class but with no

00:09:07,730 --> 00:09:12,260
hook into the framework itself it's

00:09:10,000 --> 00:09:15,500
independent from a framework this is

00:09:12,260 --> 00:09:17,240
your message I will draw a lot of

00:09:15,500 --> 00:09:20,240
comparisons to the symphony event

00:09:17,240 --> 00:09:22,460
dispatcher component if you think of a

00:09:20,240 --> 00:09:26,630
symphony event for example which is also

00:09:22,460 --> 00:09:28,760
a kind of message this has to extend the

00:09:26,630 --> 00:09:30,890
abstract event object because there are

00:09:28,760 --> 00:09:32,660
some things in there that the symphony

00:09:30,890 --> 00:09:35,030
event dispatcher needs to act on and

00:09:32,660 --> 00:09:37,670
with the messenger you don't get this

00:09:35,030 --> 00:09:39,290
this is your object and yours only so

00:09:37,670 --> 00:09:42,740
you could basically move it around to

00:09:39,290 --> 00:09:45,440
different frameworks very easily okay

00:09:42,740 --> 00:09:46,700
just this message is probably not

00:09:45,440 --> 00:09:48,740
helping very much we want to do

00:09:46,700 --> 00:09:50,570
something with it and the first thing

00:09:48,740 --> 00:09:53,990
that is basically already hinted at

00:09:50,570 --> 00:09:56,630
what's next thing is our message bus

00:09:53,990 --> 00:09:59,330
basically the thing that we send the

00:09:56,630 --> 00:10:01,640
message over to something else the this

00:09:59,330 --> 00:10:05,570
is doesn't really do anything with the

00:10:01,640 --> 00:10:07,790
message itself it just figures out where

00:10:05,570 --> 00:10:11,180
to send this message so something else

00:10:07,790 --> 00:10:15,200
can act upon it this is the interface

00:10:11,180 --> 00:10:17,930
word this is a framework class so the

00:10:15,200 --> 00:10:20,480
message bus is basically symphony if you

00:10:17,930 --> 00:10:23,780
ain't fool this is where you hook into

00:10:20,480 --> 00:10:26,600
the framework and so the interface

00:10:23,780 --> 00:10:28,370
itself is provided by Symphony component

00:10:26,600 --> 00:10:30,260
and the class itself is provided by the

00:10:28,370 --> 00:10:32,510
components so you won't will not change

00:10:30,260 --> 00:10:34,580
the actual message bus implementation

00:10:32,510 --> 00:10:36,380
and you don't have to because it takes a

00:10:34,580 --> 00:10:38,660
message we are the dispatch method and

00:10:36,380 --> 00:10:42,040
then it just sends it to something else

00:10:38,660 --> 00:10:44,360
later on and then you get things back

00:10:42,040 --> 00:10:47,240
this is also where you can already see

00:10:44,360 --> 00:10:49,040
some of the changes that happened with

00:10:47,240 --> 00:10:51,290
this interface for example through the

00:10:49,040 --> 00:10:55,140
versions the stamps and the envelope is

00:10:51,290 --> 00:10:58,860
something that previously did not exist

00:10:55,140 --> 00:11:00,690
but we can look at that later another

00:10:58,860 --> 00:11:04,370
thing because I already mentioned the

00:11:00,690 --> 00:11:06,529
event dispatcher this is basically how

00:11:04,370 --> 00:11:08,880
inventor Speicher will now look like

00:11:06,529 --> 00:11:12,330
previously it had a little different

00:11:08,880 --> 00:11:15,240
look like he's just named them the event

00:11:12,330 --> 00:11:18,390
itself and the string and then past the

00:11:15,240 --> 00:11:20,880
event object now if Pierce are 14 and

00:11:18,390 --> 00:11:24,450
symphony 4.3 they changed the event

00:11:20,880 --> 00:11:26,399
dispatcher to be PSR 14 compliant it has

00:11:24,450 --> 00:11:29,040
the same look without the stamps and

00:11:26,399 --> 00:11:32,000
envelopes stuff so we're still very

00:11:29,040 --> 00:11:34,560
closely to event dispatching stuff here

00:11:32,000 --> 00:11:37,589
this is then what it looks like when you

00:11:34,560 --> 00:11:39,600
use the message bus in a service you

00:11:37,589 --> 00:11:41,490
pass in the the interface and to

00:11:39,600 --> 00:11:43,380
constructors symphony will figure out

00:11:41,490 --> 00:11:45,750
that okay I have to pass in a message

00:11:43,380 --> 00:11:47,880
bus instance here and then you can just

00:11:45,750 --> 00:11:50,220
use it in your method by calling the

00:11:47,880 --> 00:11:54,720
dispatch and for example here just

00:11:50,220 --> 00:11:57,420
create my message object and and it will

00:11:54,720 --> 00:12:00,000
be dispatched pretty familiar

00:11:57,420 --> 00:12:01,860
just like the event dispatcher the nice

00:12:00,000 --> 00:12:03,600
thing is because most of the times you

00:12:01,860 --> 00:12:05,940
will do this in your controller you can

00:12:03,600 --> 00:12:08,190
when you extend to symphonies abstract

00:12:05,940 --> 00:12:10,230
controller it provides a nice little

00:12:08,190 --> 00:12:12,330
helper method but you don't even have to

00:12:10,230 --> 00:12:14,459
worry about getting the message bus or

00:12:12,330 --> 00:12:16,680
anything you can just call this helper

00:12:14,459 --> 00:12:19,380
method dispatch message and then a

00:12:16,680 --> 00:12:21,480
controller behind the scenes will

00:12:19,380 --> 00:12:24,600
basically fetch the service for you so a

00:12:21,480 --> 00:12:27,390
nice little convenience thing when we do

00:12:24,600 --> 00:12:30,330
that things won't work we will actually

00:12:27,390 --> 00:12:33,450
get an exception and this is basically

00:12:30,330 --> 00:12:35,459
the first thing where we split paths

00:12:33,450 --> 00:12:38,010
with the event dispatcher component

00:12:35,459 --> 00:12:40,260
because an event dispatcher if nothing

00:12:38,010 --> 00:12:42,630
handles the event it just won't care

00:12:40,260 --> 00:12:44,610
because why would it it's just an event

00:12:42,630 --> 00:12:47,940
and if no one wants to act on it it's

00:12:44,610 --> 00:12:50,339
fine with a message that the idea is

00:12:47,940 --> 00:12:53,370
that actually yes this message needs to

00:12:50,339 --> 00:12:55,589
be handled by something so it will

00:12:53,370 --> 00:12:58,589
actually throw an error you can

00:12:55,589 --> 00:13:00,270
obviously have a message bus that is

00:12:58,589 --> 00:13:02,190
also an event dispatcher where you don't

00:13:00,270 --> 00:13:04,170
want a handler and you can just pass in

00:13:02,190 --> 00:13:06,000
a configuration flag and say this is a

00:13:04,170 --> 00:13:08,790
message bus that I want to use as an

00:13:06,000 --> 00:13:10,650
event bus and and just say please please

00:13:08,790 --> 00:13:13,050
allow that no handlers called and then

00:13:10,650 --> 00:13:14,730
this will work but out of the box it

00:13:13,050 --> 00:13:17,400
will assume that actually you want to

00:13:14,730 --> 00:13:19,380
handle all your events and so what we

00:13:17,400 --> 00:13:22,860
need is something to tracked on our

00:13:19,380 --> 00:13:26,160
events which is aptly called the message

00:13:22,860 --> 00:13:30,000
M long before I actually look at the

00:13:26,160 --> 00:13:31,949
message handler I want to take a very

00:13:30,000 --> 00:13:33,900
short detour because I'm not sure if

00:13:31,949 --> 00:13:37,980
everyone knows this concept of in

00:13:33,900 --> 00:13:39,329
vocables in PHP it's not that new I

00:13:37,980 --> 00:13:42,000
should have looked it up

00:13:39,329 --> 00:13:43,920
PHP five five five six or something I'm

00:13:42,000 --> 00:13:48,240
not exactly sure but but it's still PHP

00:13:43,920 --> 00:13:51,990
five thing so any PHP class can have

00:13:48,240 --> 00:13:55,050
this magic method invoke and that makes

00:13:51,990 --> 00:13:56,610
a class in vocable this class can still

00:13:55,050 --> 00:13:59,520
have a regular constructor where you

00:13:56,610 --> 00:14:01,709
pass in for example services you can

00:13:59,520 --> 00:14:03,120
also have arguments in the invoke method

00:14:01,709 --> 00:14:06,120
just like it would have of any other

00:14:03,120 --> 00:14:09,329
method the only thing it does is when

00:14:06,120 --> 00:14:11,820
you basically have a variable that is an

00:14:09,329 --> 00:14:13,740
instance of your class you can just put

00:14:11,820 --> 00:14:16,920
those braces around it and basically

00:14:13,740 --> 00:14:18,690
that invoke method is called and if it's

00:14:16,920 --> 00:14:20,100
an echo you will see the echo for

00:14:18,690 --> 00:14:22,100
example or if it returns something you

00:14:20,100 --> 00:14:25,589
can pass it on to something else as well

00:14:22,100 --> 00:14:27,959
so that's all it is it's just an a PHP

00:14:25,589 --> 00:14:29,640
feature and you could even if you like

00:14:27,959 --> 00:14:31,650
lots of prices you could do fancy stuff

00:14:29,640 --> 00:14:35,610
like this with just calling it right

00:14:31,650 --> 00:14:37,500
after and Senshi ating it and what why

00:14:35,610 --> 00:14:42,150
do I tell you this obviously the message

00:14:37,500 --> 00:14:44,630
handler uses invoke so this is the

00:14:42,150 --> 00:14:46,980
default way of writing a message handler

00:14:44,630 --> 00:14:49,350
first things first we can already see

00:14:46,980 --> 00:14:51,690
that there's again no framework related

00:14:49,350 --> 00:14:53,610
code in there this is our own class just

00:14:51,690 --> 00:14:56,790
like with the message so it's framework

00:14:53,610 --> 00:15:00,270
independent so if you basically want to

00:14:56,790 --> 00:15:02,130
write code that is like DDD style fancy

00:15:00,270 --> 00:15:04,230
thing where you decouple from the

00:15:02,130 --> 00:15:05,550
framework the message come s enger'

00:15:04,230 --> 00:15:07,589
component is actually really nice for

00:15:05,550 --> 00:15:09,720
that because both the message itself and

00:15:07,589 --> 00:15:11,760
the handler that that process is the

00:15:09,720 --> 00:15:12,990
message is it's not really coupled to

00:15:11,760 --> 00:15:17,640
the framework you can use it anywhere

00:15:12,990 --> 00:15:20,310
else and basically what will happen is

00:15:17,640 --> 00:15:24,360
that Symphony's container will collect

00:15:20,310 --> 00:15:27,300
all these message handlers either by

00:15:24,360 --> 00:15:29,880
configuration when you define attack or

00:15:27,300 --> 00:15:31,920
if you don't want to do that there's a

00:15:29,880 --> 00:15:34,380
marker interface called message handler

00:15:31,920 --> 00:15:37,080
interface if your class implements that

00:15:34,380 --> 00:15:39,290
then all those classes implementing the

00:15:37,080 --> 00:15:41,910
interface will be collected by the

00:15:39,290 --> 00:15:44,280
container and then passed into the

00:15:41,910 --> 00:15:46,770
message bus like those are handlers they

00:15:44,280 --> 00:15:49,560
react on a message once you get a

00:15:46,770 --> 00:15:51,150
message this is for example the class to

00:15:49,560 --> 00:15:54,810
call when take screenshot message

00:15:51,150 --> 00:15:58,680
happens so basically by saying which

00:15:54,810 --> 00:16:01,500
message the which message the invoke

00:15:58,680 --> 00:16:03,540
method takes we basically define the

00:16:01,500 --> 00:16:07,020
routing of which handler should react to

00:16:03,540 --> 00:16:09,240
which message and then you can as I said

00:16:07,020 --> 00:16:12,090
you can have a constructor of services

00:16:09,240 --> 00:16:13,950
for example you can even pass in a

00:16:12,090 --> 00:16:16,470
message bus into the Sendler and then

00:16:13,950 --> 00:16:18,120
send another message right from where

00:16:16,470 --> 00:16:20,570
you handle this message and have these

00:16:18,120 --> 00:16:24,180
chains of messages being passed around

00:16:20,570 --> 00:16:26,370
which is really nice and if you want to

00:16:24,180 --> 00:16:27,840
have different kind of message handlers

00:16:26,370 --> 00:16:29,610
for example if you don't mind

00:16:27,840 --> 00:16:31,770
hooking a little bit more into the

00:16:29,610 --> 00:16:34,680
framework you can also implement the

00:16:31,770 --> 00:16:36,630
message subscriber interface which only

00:16:34,680 --> 00:16:38,700
requires you to implement this public

00:16:36,630 --> 00:16:41,400
static function get handled messages and

00:16:38,700 --> 00:16:43,380
they're in an array or I do it with a

00:16:41,400 --> 00:16:46,050
yield statement you basically say

00:16:43,380 --> 00:16:48,300
whenever this message is received

00:16:46,050 --> 00:16:50,640
I want this method to take it over and

00:16:48,300 --> 00:16:53,490
then you for example don't have to use

00:16:50,640 --> 00:16:55,440
the invoke you can use this with message

00:16:53,490 --> 00:16:58,260
handler interface as well but even

00:16:55,440 --> 00:17:00,510
without using the interface basically

00:16:58,260 --> 00:17:02,790
when you define your service and you

00:17:00,510 --> 00:17:04,740
apply the tag this is a message handler

00:17:02,790 --> 00:17:05,930
you can pass in the information which

00:17:04,740 --> 00:17:08,400
method should be called

00:17:05,930 --> 00:17:10,650
you give it a you can give it a priority

00:17:08,400 --> 00:17:13,980
if you like just like with the event

00:17:10,650 --> 00:17:16,010
dispatcher it's kind of iffy to have

00:17:13,980 --> 00:17:19,170
like like correct order of handlers

00:17:16,010 --> 00:17:22,410
being in the configuration sum or just

00:17:19,170 --> 00:17:24,420
half automaton in handlers but it

00:17:22,410 --> 00:17:26,459
happens that's why the event dispatcher

00:17:24,420 --> 00:17:28,440
has it it's just something that you

00:17:26,459 --> 00:17:31,160
might need even if purists would say

00:17:28,440 --> 00:17:33,679
that this is not according to the

00:17:31,160 --> 00:17:36,559
original pattern or something it's fine

00:17:33,679 --> 00:17:38,360
and you can even apply additional

00:17:36,559 --> 00:17:40,549
configuration on these handlers for

00:17:38,360 --> 00:17:42,470
example you can say I only want this

00:17:40,549 --> 00:17:44,510
handler to apply on a certain message

00:17:42,470 --> 00:17:46,549
bus because can have multiple message

00:17:44,510 --> 00:17:47,450
buses while that make sense I will

00:17:46,549 --> 00:17:52,700
explain later

00:17:47,450 --> 00:17:54,590
and yes so basically this is a code that

00:17:52,700 --> 00:17:55,850
takes a message you have the message

00:17:54,590 --> 00:17:57,950
itself and you have something that

00:17:55,850 --> 00:18:00,140
passes the message around so we're

00:17:57,950 --> 00:18:02,900
actually done we have a nice thing but

00:18:00,140 --> 00:18:04,909
all this happens synchronously inside

00:18:02,900 --> 00:18:06,260
your PHP process just like with the

00:18:04,909 --> 00:18:09,260
event dispatcher you never leave this

00:18:06,260 --> 00:18:11,600
PHP process which is kind of a limiting

00:18:09,260 --> 00:18:14,419
factor and if you want to have a message

00:18:11,600 --> 00:18:18,440
bus you probably want to send those

00:18:14,419 --> 00:18:21,799
messages to an external system for

00:18:18,440 --> 00:18:23,960
example a different application or the

00:18:21,799 --> 00:18:27,440
same application but but in a like

00:18:23,960 --> 00:18:31,490
command line thing and for that we have

00:18:27,440 --> 00:18:34,340
the so-called transports they basically

00:18:31,490 --> 00:18:36,350
are the replacement for their handlers

00:18:34,340 --> 00:18:39,169
so either you want to handle your

00:18:36,350 --> 00:18:40,610
message right away or you want to send

00:18:39,169 --> 00:18:43,070
it away we are transport

00:18:40,610 --> 00:18:45,130
it's basically what I'm saying and the

00:18:43,070 --> 00:18:48,169
transport is made up of two things

00:18:45,130 --> 00:18:49,700
sender and receiver quite obvious why

00:18:48,169 --> 00:18:52,789
because you want to send those messages

00:18:49,700 --> 00:18:56,870
away and also you want to receive those

00:18:52,789 --> 00:18:58,370
messages from this transport so you

00:18:56,870 --> 00:19:00,260
don't have to write this yourself

00:18:58,370 --> 00:19:02,210
symphonie provides transport it will

00:19:00,260 --> 00:19:04,789
provide the senders and receivers but

00:19:02,210 --> 00:19:07,039
you can write your own the documentation

00:19:04,789 --> 00:19:09,409
you serve an example like I want to have

00:19:07,039 --> 00:19:11,960
a sender that writes something into CSV

00:19:09,409 --> 00:19:14,240
file I like a new row and then I have a

00:19:11,960 --> 00:19:16,820
receiver that just reads the CSV file

00:19:14,240 --> 00:19:18,350
and it's not really a song Kronus you

00:19:16,820 --> 00:19:21,169
probably also don't want multiple

00:19:18,350 --> 00:19:23,260
services to write into the V file but

00:19:21,169 --> 00:19:26,750
yeah you could come up with different

00:19:23,260 --> 00:19:29,630
transports then symphony provides but

00:19:26,750 --> 00:19:32,539
for the most parts in the symphony 4.3

00:19:29,630 --> 00:19:34,940
you you get most of the common ones that

00:19:32,539 --> 00:19:38,450
you want to use so initially we only had

00:19:34,940 --> 00:19:40,880
the mqp transport and QP is a messaging

00:19:38,450 --> 00:19:44,240
protocol that is most famously used by

00:19:40,880 --> 00:19:46,640
rabbitmq this is the

00:19:44,240 --> 00:19:48,050
min UI that basically when you send a

00:19:46,640 --> 00:19:50,120
message you see in the graph like oh

00:19:48,050 --> 00:19:52,370
yeah I have a message that's ready and

00:19:50,120 --> 00:19:54,320
when someone consumes that you get the

00:19:52,370 --> 00:19:56,450
blue graph which tells you like oh yes

00:19:54,320 --> 00:19:58,460
someone took it but it they didn't

00:19:56,450 --> 00:20:01,309
acknowledge that they actually processed

00:19:58,460 --> 00:20:02,750
the message so it's kind of in limbo and

00:20:01,309 --> 00:20:04,820
once they acknowledge like yeah actually

00:20:02,750 --> 00:20:06,830
processed this then the message is

00:20:04,820 --> 00:20:10,910
completely gone and no one else will

00:20:06,830 --> 00:20:14,000
handle it so this is really nice because

00:20:10,910 --> 00:20:16,040
now you send the message away to to this

00:20:14,000 --> 00:20:18,380
message queue and you can collect it

00:20:16,040 --> 00:20:21,710
whenever you want and and in whatever

00:20:18,380 --> 00:20:23,870
fashion you want another way to to have

00:20:21,710 --> 00:20:27,770
a synchronous transport is using the

00:20:23,870 --> 00:20:30,050
Redis transport and yeah it's basically

00:20:27,770 --> 00:20:33,800
what you would expect it will just write

00:20:30,050 --> 00:20:35,570
this message into some ready storage and

00:20:33,800 --> 00:20:37,700
you can just receive it from there as

00:20:35,570 --> 00:20:39,740
well what you can already see is

00:20:37,700 --> 00:20:43,220
something that will point out later on

00:20:39,740 --> 00:20:47,030
that message is basically a PHP object

00:20:43,220 --> 00:20:49,280
that serialize and you get a timestamp

00:20:47,030 --> 00:20:51,380
and stuff like that and the third one

00:20:49,280 --> 00:20:54,610
which is really handy is the the

00:20:51,380 --> 00:20:57,140
doctrine transport which doctrine said

00:20:54,610 --> 00:20:59,960
database abstraction in PHP that

00:20:57,140 --> 00:21:03,410
basically everyone needs everyone uses

00:20:59,960 --> 00:21:05,540
and yeah it would basically create a

00:21:03,410 --> 00:21:08,390
table for you where all the messages are

00:21:05,540 --> 00:21:10,130
stored this is what it looks like in an

00:21:08,390 --> 00:21:11,900
entity relationship diagram kind of

00:21:10,130 --> 00:21:15,980
thing this is what it would look like in

00:21:11,900 --> 00:21:18,050
more of a table fashion advise the body

00:21:15,980 --> 00:21:20,630
which is basically your message object

00:21:18,050 --> 00:21:22,820
then she realized some some headers with

00:21:20,630 --> 00:21:25,250
additional information you can specify

00:21:22,820 --> 00:21:27,110
multiple queues in case you only want to

00:21:25,250 --> 00:21:31,070
collect messages from a certain queue

00:21:27,110 --> 00:21:32,929
and sometimes MP stuff as well and yes

00:21:31,070 --> 00:21:34,910
so basically this allows you to send

00:21:32,929 --> 00:21:37,340
your messages away and handle them at

00:21:34,910 --> 00:21:39,050
some later point by just reading one of

00:21:37,340 --> 00:21:42,200
those transport wherever the message is

00:21:39,050 --> 00:21:44,600
sought the only downside is you can see

00:21:42,200 --> 00:21:46,850
this with doctrine right away if

00:21:44,600 --> 00:21:48,830
doctrine wants right into that table it

00:21:46,850 --> 00:21:51,410
probably needs that table in the first

00:21:48,830 --> 00:21:54,350
place and how does it know where to to

00:21:51,410 --> 00:21:57,090
get this there there's a command-line

00:21:54,350 --> 00:21:59,009
tool that symfony provides and

00:21:57,090 --> 00:22:01,230
the commands provided from the messenger

00:21:59,009 --> 00:22:04,049
component with symphony for point freeze

00:22:01,230 --> 00:22:05,789
setup transports it basically goes

00:22:04,049 --> 00:22:08,610
through your configuration sees which

00:22:05,789 --> 00:22:10,620
transpose you use and will set things up

00:22:08,610 --> 00:22:12,570
for you with doctrine it's obvious that

00:22:10,620 --> 00:22:14,519
you will need it because if those if

00:22:12,570 --> 00:22:16,379
this table is not there then things will

00:22:14,519 --> 00:22:19,409
not have work and you will get like

00:22:16,379 --> 00:22:21,509
connection errors with rabid mq for

00:22:19,409 --> 00:22:23,940
example it's not as obvious because

00:22:21,509 --> 00:22:25,289
usually when you write something and the

00:22:23,940 --> 00:22:26,850
cue is not there a fair bit I'm cute

00:22:25,289 --> 00:22:29,249
we'll just create it for you just just

00:22:26,850 --> 00:22:30,720
on the fly but if you read before you

00:22:29,249 --> 00:22:32,340
create something then that he is not

00:22:30,720 --> 00:22:34,799
then then you can run into problems so

00:22:32,340 --> 00:22:36,690
even with mqp and Redis it will create

00:22:34,799 --> 00:22:38,610
all the stuff for you and and it's there

00:22:36,690 --> 00:22:40,519
for whenever you want to consume or

00:22:38,610 --> 00:22:43,919
write into it

00:22:40,519 --> 00:22:45,990
consuming is the right word like now we

00:22:43,919 --> 00:22:48,929
send a message away what what do we do

00:22:45,990 --> 00:22:51,299
it later on and we want to handle it if

00:22:48,929 --> 00:22:53,340
your symphony application either the

00:22:51,299 --> 00:22:56,340
same one that sends a message away or a

00:22:53,340 --> 00:22:58,289
different one wants to read this message

00:22:56,340 --> 00:23:01,230
it has to configure the transport again

00:22:58,289 --> 00:23:03,240
the the receiver will take the message

00:23:01,230 --> 00:23:06,299
out and and the messenger consume

00:23:03,240 --> 00:23:07,799
command is responsible for this this is

00:23:06,299 --> 00:23:09,299
basically something that you have

00:23:07,799 --> 00:23:12,330
running in the background either on a

00:23:09,299 --> 00:23:14,700
separate note on the same server it's

00:23:12,330 --> 00:23:17,220
just a command line process you can

00:23:14,700 --> 00:23:20,669
limit the number of messages it should

00:23:17,220 --> 00:23:24,299
receive the memory limit used the time

00:23:20,669 --> 00:23:26,730
limit basically this is for PHP because

00:23:24,299 --> 00:23:30,269
it still produces memory leaks sometimes

00:23:26,730 --> 00:23:32,100
either by itself or by your code so if

00:23:30,269 --> 00:23:34,320
you have this thing running all the time

00:23:32,100 --> 00:23:36,480
it will probably get slower it will get

00:23:34,320 --> 00:23:39,809
faulty and and so you should actually

00:23:36,480 --> 00:23:41,820
just let this thing run for a short

00:23:39,809 --> 00:23:43,499
amount of time and then have it spawn

00:23:41,820 --> 00:23:46,289
again so for example you would use

00:23:43,499 --> 00:23:48,690
supervisor to make sure that you have

00:23:46,289 --> 00:23:51,690
always some worker running at some point

00:23:48,690 --> 00:23:55,169
that consumes these messages for you

00:23:51,690 --> 00:23:56,879
and yeah so basically this thing will go

00:23:55,169 --> 00:23:59,899
through the same cycle it will read the

00:23:56,879 --> 00:24:03,600
message will get the message back from

00:23:59,899 --> 00:24:05,730
from the transport posit into PHP or B

00:24:03,600 --> 00:24:07,619
act again and then it will send it to

00:24:05,730 --> 00:24:09,389
the message bus for you and then it

00:24:07,619 --> 00:24:10,110
would go through the message bus but

00:24:09,389 --> 00:24:12,120
this time it

00:24:10,110 --> 00:24:15,150
not be sent to a transport this time it

00:24:12,120 --> 00:24:17,640
will be handled again and yes I already

00:24:15,150 --> 00:24:20,190
mentioned that basically you have a

00:24:17,640 --> 00:24:22,410
message leaving a PHP system and then

00:24:20,190 --> 00:24:26,580
re-entering maybe a different PHP

00:24:22,410 --> 00:24:28,230
process so you can't just have these PHP

00:24:26,580 --> 00:24:31,710
classes running around all the time

00:24:28,230 --> 00:24:34,890
you have to serialize them somehow

00:24:31,710 --> 00:24:37,290
by default the the PHP civilization

00:24:34,890 --> 00:24:40,470
process is used if you want to send it

00:24:37,290 --> 00:24:43,380
to something that's not a PHP command

00:24:40,470 --> 00:24:45,870
but something else then you might want

00:24:43,380 --> 00:24:49,080
to have a format that is more palatable

00:24:45,870 --> 00:24:51,390
for other languages for example so you

00:24:49,080 --> 00:24:53,520
can use the symphony serialize or to

00:24:51,390 --> 00:24:56,700
basically create a JSON representation

00:24:53,520 --> 00:25:00,140
of the message this is what used to be

00:24:56,700 --> 00:25:03,780
the default up until Symphony 4.3

00:25:00,140 --> 00:25:05,580
alright so now we have this basically

00:25:03,780 --> 00:25:07,919
complete picture that you have a message

00:25:05,580 --> 00:25:10,350
you dispatch it we have the bus and the

00:25:07,919 --> 00:25:12,540
bus decides should I send it to

00:25:10,350 --> 00:25:14,400
transport or should I send to a message

00:25:12,540 --> 00:25:17,549
an alert to process it right away

00:25:14,400 --> 00:25:20,429
the question is how how does the the

00:25:17,549 --> 00:25:23,490
message bus decide which what to do with

00:25:20,429 --> 00:25:26,309
the message and basically now we have to

00:25:23,490 --> 00:25:29,970
look at the configuration and it will

00:25:26,309 --> 00:25:32,700
hopefully become obvious you basically

00:25:29,970 --> 00:25:36,150
define a set of transports that your

00:25:32,700 --> 00:25:39,030
application knows and users sync is just

00:25:36,150 --> 00:25:41,340
the synchronous transport that basically

00:25:39,030 --> 00:25:43,559
means I call the handler right away and

00:25:41,340 --> 00:25:45,330
then I have some a string transport

00:25:43,559 --> 00:25:46,799
those aren't just names by the way you

00:25:45,330 --> 00:25:49,820
can give them whatever names you like

00:25:46,799 --> 00:25:53,700
you can use the same for example

00:25:49,820 --> 00:25:55,919
RabbitMQ DSN and just name different

00:25:53,700 --> 00:25:58,770
cues on the same connection or you can

00:25:55,919 --> 00:26:01,620
have multiple connections for example if

00:25:58,770 --> 00:26:04,950
you want to send a message both to an

00:26:01,620 --> 00:26:07,340
asynchronous process that is to a

00:26:04,950 --> 00:26:09,900
message broker that your worker reads

00:26:07,340 --> 00:26:11,910
and additionally to something else just

00:26:09,900 --> 00:26:15,000
for kind of logging purposes for example

00:26:11,910 --> 00:26:16,830
or for a different tool to also act on

00:26:15,000 --> 00:26:19,440
this message then you can basically send

00:26:16,830 --> 00:26:21,929
the same message to multiple buses or to

00:26:19,440 --> 00:26:23,100
multiple queues and you can send it to

00:26:21,929 --> 00:26:25,200
Revit mq and doctrine

00:26:23,100 --> 00:26:27,120
at the same time if you want so instead

00:26:25,200 --> 00:26:29,640
of just this one string you basically

00:26:27,120 --> 00:26:31,410
can also present an array of all the

00:26:29,640 --> 00:26:33,720
places where you want to send this

00:26:31,410 --> 00:26:36,090
message to and then you can just define

00:26:33,720 --> 00:26:38,910
whatever message should go through which

00:26:36,090 --> 00:26:41,039
transport so it's not the bus that

00:26:38,910 --> 00:26:44,070
decides what where to send things to

00:26:41,039 --> 00:26:46,020
it's actually you decided based on a

00:26:44,070 --> 00:26:48,210
message which makes sense like no matter

00:26:46,020 --> 00:26:51,480
what bus I sent this message over I

00:26:48,210 --> 00:26:54,150
usually want to send to transport not

00:26:51,480 --> 00:26:56,309
always in those cases I can again limit

00:26:54,150 --> 00:26:58,049
basically which bus does which and which

00:26:56,309 --> 00:27:00,240
message is handled by it by which bus

00:26:58,049 --> 00:27:02,159
and from which transporter handler is

00:27:00,240 --> 00:27:04,080
called so you can also configure this

00:27:02,159 --> 00:27:06,120
stuff but by default this is basically

00:27:04,080 --> 00:27:07,890
how it goes whenever a message is sent

00:27:06,120 --> 00:27:11,370
to a bus you want to send it to some

00:27:07,890 --> 00:27:13,530
transport and the obvious thing that

00:27:11,370 --> 00:27:16,110
will happen is things will fail like we

00:27:13,530 --> 00:27:18,030
at the beginning we saw that if we don't

00:27:16,110 --> 00:27:20,490
have a handler provided in our

00:27:18,030 --> 00:27:22,710
application then basically we fail right

00:27:20,490 --> 00:27:24,870
away and if our consuming application

00:27:22,710 --> 00:27:28,440
also don't have has a handler then it

00:27:24,870 --> 00:27:30,780
will fail also and the nice thing that

00:27:28,440 --> 00:27:33,090
symphony 4.3 brings of the messenger

00:27:30,780 --> 00:27:36,179
component is so-called retry strategies

00:27:33,090 --> 00:27:39,690
so on each transport you can define what

00:27:36,179 --> 00:27:42,419
the retry strategy is those are the

00:27:39,690 --> 00:27:44,760
default settings you have three three

00:27:42,419 --> 00:27:47,130
tries the first retry happens after one

00:27:44,760 --> 00:27:49,020
second and then it multiplies so next

00:27:47,130 --> 00:27:51,690
time it's two seconds then four seconds

00:27:49,020 --> 00:27:54,870
to basically give the message queues and

00:27:51,690 --> 00:27:56,309
some time to to relax a little bit and

00:27:54,870 --> 00:27:57,929
just not hammer out the message three

00:27:56,309 --> 00:28:01,860
times in a row and it doesn't work just

00:27:57,929 --> 00:28:05,370
just go away so yeah basically you can

00:28:01,860 --> 00:28:07,610
retry a few times and basically

00:28:05,370 --> 00:28:11,309
sometimes you don't even want to do that

00:28:07,610 --> 00:28:13,169
because you already know like if I

00:28:11,309 --> 00:28:15,030
handle this message at a later point it

00:28:13,169 --> 00:28:17,309
will just fail again I just know it

00:28:15,030 --> 00:28:19,530
because it's it's broken or it's no

00:28:17,309 --> 00:28:21,750
longer valid then I can basically in my

00:28:19,530 --> 00:28:23,669
application throw this exception or

00:28:21,750 --> 00:28:25,559
extend from the exception for different

00:28:23,669 --> 00:28:27,750
one and then the messenger knows like

00:28:25,559 --> 00:28:30,960
and no no need and we trying I would

00:28:27,750 --> 00:28:32,400
just give up right away and another

00:28:30,960 --> 00:28:34,860
thing which is actually really handy

00:28:32,400 --> 00:28:36,080
because after those free we tries it

00:28:34,860 --> 00:28:38,600
will actually discard them

00:28:36,080 --> 00:28:40,700
and it's gone which can be kind of

00:28:38,600 --> 00:28:42,440
annoying if you actually know like this

00:28:40,700 --> 00:28:44,810
is an important event one I wanted to

00:28:42,440 --> 00:28:46,850
send out an email to a client and now

00:28:44,810 --> 00:28:49,670
that I don't even know what message that

00:28:46,850 --> 00:28:52,460
was so you probably want to store those

00:28:49,670 --> 00:28:54,920
Fayette messages somehow and what you do

00:28:52,460 --> 00:28:58,310
is you specify is failure transport that

00:28:54,920 --> 00:29:00,560
just defines a transport that you

00:28:58,310 --> 00:29:02,660
defined in this case it's just using

00:29:00,560 --> 00:29:04,640
doctrine with the default connection and

00:29:02,660 --> 00:29:07,930
the queue name fault but it could be

00:29:04,640 --> 00:29:11,120
anything else and then it basically

00:29:07,930 --> 00:29:13,640
automatically will put things into this

00:29:11,120 --> 00:29:15,590
fare queue and will not do anything when

00:29:13,640 --> 00:29:17,930
those free trials free wheat rice

00:29:15,590 --> 00:29:20,090
basically failed and then you can

00:29:17,930 --> 00:29:22,370
inspect this failed queue later on by

00:29:20,090 --> 00:29:26,750
using these commands like show and retry

00:29:22,370 --> 00:29:29,780
and remove all right I'm almost done so

00:29:26,750 --> 00:29:32,180
we basically learn how to send messages

00:29:29,780 --> 00:29:35,480
out receive messages what to do when

00:29:32,180 --> 00:29:38,150
things go wrong we still don't really

00:29:35,480 --> 00:29:40,820
know why we would need multiple message

00:29:38,150 --> 00:29:44,030
buses and this is where middlewares come

00:29:40,820 --> 00:29:46,520
in middleware sorry there's no plural as

00:29:44,030 --> 00:29:46,960
English people always like to point that

00:29:46,520 --> 00:29:49,310
out

00:29:46,960 --> 00:29:50,660
so it's middlewares all right in the

00:29:49,310 --> 00:29:53,600
pool

00:29:50,660 --> 00:29:55,850
by default the symphony messenger will

00:29:53,600 --> 00:29:57,590
have these middleware if you're already

00:29:55,850 --> 00:30:00,410
familiar with the component we will see

00:29:57,590 --> 00:30:03,710
that up until 4.3 it looked completely

00:30:00,410 --> 00:30:05,570
different this is one of the bigger

00:30:03,710 --> 00:30:07,430
changes that happened under the hood so

00:30:05,570 --> 00:30:09,290
if you don't have your own middleware

00:30:07,430 --> 00:30:11,330
you don't probably care even if you have

00:30:09,290 --> 00:30:13,100
your own middleware then likely it will

00:30:11,330 --> 00:30:16,610
not affect things much because the

00:30:13,100 --> 00:30:18,860
orders roughly still the same one thing

00:30:16,610 --> 00:30:21,920
that's missing is the logging middleware

00:30:18,860 --> 00:30:23,570
that that basically now happens inside

00:30:21,920 --> 00:30:26,210
of the middleware see pass in a log and

00:30:23,570 --> 00:30:29,210
that will do it for you so it doesn't

00:30:26,210 --> 00:30:30,920
need to be different middleware and the

00:30:29,210 --> 00:30:33,650
things in the beginning are a little bit

00:30:30,920 --> 00:30:36,260
different so just you have an idea what

00:30:33,650 --> 00:30:39,260
do those mill ways do the ad pass name

00:30:36,260 --> 00:30:41,840
stamp is basically just giving you an

00:30:39,260 --> 00:30:44,360
idea of which bus handled this message

00:30:41,840 --> 00:30:46,670
so that's just this information in there

00:30:44,360 --> 00:30:47,410
it doesn't really actively do anything

00:30:46,670 --> 00:30:49,720
on your mess

00:30:47,410 --> 00:30:52,360
the dispatch after current bus is kind

00:30:49,720 --> 00:30:56,080
of interesting it basically helps you

00:30:52,360 --> 00:30:58,180
with transactional stuff so if you send

00:30:56,080 --> 00:31:01,060
out a message and then some later

00:30:58,180 --> 00:31:03,910
handlers for example do something and

00:31:01,060 --> 00:31:06,220
and you have an error you basically send

00:31:03,910 --> 00:31:08,470
out a message that might not be valid

00:31:06,220 --> 00:31:11,380
anymore for example you said yeah I want

00:31:08,470 --> 00:31:13,420
to send out the message when I created a

00:31:11,380 --> 00:31:15,850
new user and then I store the user

00:31:13,420 --> 00:31:18,070
database later on oh it failed and I'll

00:31:15,850 --> 00:31:19,810
send out this message that I should send

00:31:18,070 --> 00:31:21,820
out an email but the user doesn't exist

00:31:19,810 --> 00:31:24,490
and I have this weird state of things

00:31:21,820 --> 00:31:26,080
break and so basically what you can do

00:31:24,490 --> 00:31:28,000
with the dispatch of the current

00:31:26,080 --> 00:31:29,680
possible whereas you say like actually

00:31:28,000 --> 00:31:31,390
only send out the message after

00:31:29,680 --> 00:31:33,550
everything and the bus happens so I make

00:31:31,390 --> 00:31:37,450
sure that actually there was no error

00:31:33,550 --> 00:31:39,400
after sending the fing way message

00:31:37,450 --> 00:31:42,070
processing will was just what happens

00:31:39,400 --> 00:31:43,930
when something failed sent message is I

00:31:42,070 --> 00:31:46,300
already have the icons up there it's

00:31:43,930 --> 00:31:48,610
just what you would expect this middle

00:31:46,300 --> 00:31:51,000
way is actually checking like should I

00:31:48,610 --> 00:31:53,410
send this middleware out via transport

00:31:51,000 --> 00:31:54,940
again it checks in the configuration for

00:31:53,410 --> 00:31:58,300
from the message bus like yeah is this

00:31:54,940 --> 00:32:01,600
message for this transport oh yes so I

00:31:58,300 --> 00:32:04,390
send it away and it also checks oh did I

00:32:01,600 --> 00:32:08,020
receive this message for example by

00:32:04,390 --> 00:32:10,240
consuming from RabbitMQ it will already

00:32:08,020 --> 00:32:12,400
have a received stamp so the sent

00:32:10,240 --> 00:32:14,620
message says actually I received this

00:32:12,400 --> 00:32:16,420
from from a queue probably you want this

00:32:14,620 --> 00:32:18,760
to go to the hand that not just send it

00:32:16,420 --> 00:32:20,080
in loop all the time to the RabbitMQ so

00:32:18,760 --> 00:32:22,180
you don't have to do anything for that

00:32:20,080 --> 00:32:25,300
to work it just recognizes it for you

00:32:22,180 --> 00:32:28,120
and had a message is basically the same

00:32:25,300 --> 00:32:29,620
if the message wasn't handed it goes

00:32:28,120 --> 00:32:31,840
into this middleware and says ok I

00:32:29,620 --> 00:32:33,970
should handle this and this is also

00:32:31,840 --> 00:32:35,980
where your configuration applies that if

00:32:33,970 --> 00:32:38,230
I don't want to have a handler you can

00:32:35,980 --> 00:32:41,350
just in this middleware person a flag

00:32:38,230 --> 00:32:43,780
doing construction say yeah I allow no

00:32:41,350 --> 00:32:45,490
handlers and then it would just ignore

00:32:43,780 --> 00:32:45,880
it and we'll go foo and everything is

00:32:45,490 --> 00:32:47,740
fine

00:32:45,880 --> 00:32:50,800
so yeah those are the default

00:32:47,740 --> 00:32:54,060
middlewares what you can already grasp

00:32:50,800 --> 00:32:56,380
from that image is that let me go back

00:32:54,060 --> 00:33:00,160
obviously the order of this middleware

00:32:56,380 --> 00:33:00,700
stack matters because if I add pass name

00:33:00,160 --> 00:33:03,130
and

00:33:00,700 --> 00:33:04,660
to stuff after I send a message then

00:33:03,130 --> 00:33:06,190
it's probably too late or if I handle

00:33:04,660 --> 00:33:08,200
the message right here and then I find

00:33:06,190 --> 00:33:10,210
out later on I want to send this then

00:33:08,200 --> 00:33:12,850
yeah I already process the message I

00:33:10,210 --> 00:33:14,950
don't need to send it away so this is an

00:33:12,850 --> 00:33:17,410
ordered stack of middleware so you have

00:33:14,950 --> 00:33:19,210
to make sure that whatever own

00:33:17,410 --> 00:33:21,340
middleware you write or whatever other

00:33:19,210 --> 00:33:25,240
middleware you add that it is at the

00:33:21,340 --> 00:33:26,770
right place inside the stack but we'll

00:33:25,240 --> 00:33:28,840
get to that a little bit later so I

00:33:26,770 --> 00:33:32,920
already mentioned stems for example that

00:33:28,840 --> 00:33:35,620
bus named stem thing so let's dive into

00:33:32,920 --> 00:33:38,290
that for a little bit when you dispatch

00:33:35,620 --> 00:33:40,900
a message we are the bus it will

00:33:38,290 --> 00:33:42,670
automatically be packed into an envelope

00:33:40,900 --> 00:33:47,410
for you an envelope is just a wrapper

00:33:42,670 --> 00:33:49,900
class in in PHP that basically contains

00:33:47,410 --> 00:33:52,870
your message and also some stems which

00:33:49,900 --> 00:33:56,530
are just contexts basically context

00:33:52,870 --> 00:33:59,620
objects just like the message it has

00:33:56,530 --> 00:34:01,180
some additional info of like what's the

00:33:59,620 --> 00:34:07,330
swing received or handled or anything

00:34:01,180 --> 00:34:10,540
it's metadata specific to handler or to

00:34:07,330 --> 00:34:12,400
a middleware mostly and yeah so once

00:34:10,540 --> 00:34:13,750
it's in an envelope and you can do that

00:34:12,400 --> 00:34:16,020
yourself you don't have to wait for the

00:34:13,750 --> 00:34:18,130
message pass to do that you can just

00:34:16,020 --> 00:34:20,890
basically wrap it in an envelope and

00:34:18,130 --> 00:34:23,050
send it away if you want to for example

00:34:20,890 --> 00:34:25,390
if you want to apply own stamp and then

00:34:23,050 --> 00:34:27,640
let on each middleware either check the

00:34:25,390 --> 00:34:31,270
stamp or apply system which you can

00:34:27,640 --> 00:34:32,500
later use to get things from and that's

00:34:31,270 --> 00:34:34,270
why I put the last one in that the

00:34:32,500 --> 00:34:38,380
handle stamp is the best example for

00:34:34,270 --> 00:34:41,200
this if you basically have a handler

00:34:38,380 --> 00:34:44,140
that has a return value this return

00:34:41,200 --> 00:34:48,040
value is lost can't can you still okay

00:34:44,140 --> 00:34:50,590
so sorry so yeah basically if you handle

00:34:48,040 --> 00:34:53,050
the message in your handler and the

00:34:50,590 --> 00:34:55,570
handler returns for example a token then

00:34:53,050 --> 00:34:57,490
how do you get this token value that we

00:34:55,570 --> 00:35:00,520
turned you always get an envelope egg or

00:34:57,490 --> 00:35:01,780
any things so you also don't want all

00:35:00,520 --> 00:35:04,180
the other motor ways to interrupt

00:35:01,780 --> 00:35:06,760
instead what happens is this return

00:35:04,180 --> 00:35:09,880
value is stored in this handle stamp and

00:35:06,760 --> 00:35:12,490
once the message bus ran you basically

00:35:09,880 --> 00:35:13,310
extract the the stamp and then get

00:35:12,490 --> 00:35:15,290
return value

00:35:13,310 --> 00:35:18,650
from that and this is what it looks like

00:35:15,290 --> 00:35:20,480
so if you dispatch the message you get

00:35:18,650 --> 00:35:22,670
the envelope back this is what we saw on

00:35:20,480 --> 00:35:25,190
the message bus interface before then we

00:35:22,670 --> 00:35:27,590
just checked for the last handle stamp

00:35:25,190 --> 00:35:29,300
that the envelope had which is usually

00:35:27,590 --> 00:35:31,250
just one because you usually have only

00:35:29,300 --> 00:35:33,050
one handler or maybe you want to check

00:35:31,250 --> 00:35:35,540
for a specific one if you want to but

00:35:33,050 --> 00:35:37,670
this is the most generic case and then

00:35:35,540 --> 00:35:39,710
you just get the result from this handle

00:35:37,670 --> 00:35:41,810
stem basically the return value from

00:35:39,710 --> 00:35:44,150
your handler class and you can just use

00:35:41,810 --> 00:35:46,820
it in this case the token so those

00:35:44,150 --> 00:35:49,760
stamps are basically a neat way to both

00:35:46,820 --> 00:35:52,700
them the middleware can get some meta

00:35:49,760 --> 00:35:55,850
information and send it back to you and

00:35:52,700 --> 00:35:57,200
also you can some context information to

00:35:55,850 --> 00:35:59,420
the middleware for example if you use

00:35:57,200 --> 00:36:00,950
the validation middleware you might want

00:35:59,420 --> 00:36:03,230
to use validation groups you can just

00:36:00,950 --> 00:36:05,540
basically create an envelope put on the

00:36:03,230 --> 00:36:08,240
validation stem and say I only want to

00:36:05,540 --> 00:36:10,130
validate all the the things that are

00:36:08,240 --> 00:36:13,040
part of the registration for example and

00:36:10,130 --> 00:36:15,230
not all the other ones so instead of

00:36:13,040 --> 00:36:17,270
just having one huge global thing where

00:36:15,230 --> 00:36:19,340
you put all the metadata in or passing

00:36:17,270 --> 00:36:22,430
around huge context array you basically

00:36:19,340 --> 00:36:24,920
have very contextually applied stamps

00:36:22,430 --> 00:36:27,670
which is really neat and also it factors

00:36:24,920 --> 00:36:30,020
in nicely with the whole message sending

00:36:27,670 --> 00:36:32,870
like metaphor having stamps and

00:36:30,020 --> 00:36:35,960
envelopes so it also kind of feels right

00:36:32,870 --> 00:36:37,960
to have this kind of syntax so I already

00:36:35,960 --> 00:36:41,270
mentioned the the middlewares is

00:36:37,960 --> 00:36:43,370
important where you apply it by default

00:36:41,270 --> 00:36:45,560
your middleware is always applied in the

00:36:43,370 --> 00:36:48,410
middle between all of these when you

00:36:45,560 --> 00:36:50,300
configure them what you can do is you

00:36:48,410 --> 00:36:52,250
can basically tell the messenger like I

00:36:50,300 --> 00:36:53,900
don't want to use the default middleware

00:36:52,250 --> 00:36:55,970
just throw them out and then you can

00:36:53,900 --> 00:36:58,070
build your own stack and this is

00:36:55,970 --> 00:36:59,630
basically what you want to get if if you

00:36:58,070 --> 00:37:02,210
oh this is what you need when you want

00:36:59,630 --> 00:37:05,480
to have message buses in in your system

00:37:02,210 --> 00:37:08,510
that have specific functionality so if

00:37:05,480 --> 00:37:10,340
you're an avid fan of like CQRS for

00:37:08,510 --> 00:37:12,680
example with a command pass and a query

00:37:10,340 --> 00:37:15,680
bus and an event bus the event bus

00:37:12,680 --> 00:37:18,170
should basically allow that no handlers

00:37:15,680 --> 00:37:20,810
applied so for your event bus you will

00:37:18,170 --> 00:37:22,610
basically set the flag Elano handler but

00:37:20,810 --> 00:37:25,130
your commands increase they should still

00:37:22,610 --> 00:37:27,140
have this in place that they check for a

00:37:25,130 --> 00:37:29,450
handler so obviously you need

00:37:27,140 --> 00:37:30,980
at least one separate bus and then you

00:37:29,450 --> 00:37:33,710
might want to make sure that your crew

00:37:30,980 --> 00:37:36,440
bus only sends stuff food transport like

00:37:33,710 --> 00:37:39,050
like sync synchronously so you can get a

00:37:36,440 --> 00:37:41,030
result back right away so basically you

00:37:39,050 --> 00:37:43,460
can have different flavors of message

00:37:41,030 --> 00:37:45,320
buses that slightly do things

00:37:43,460 --> 00:37:48,980
differently and and this is why we want

00:37:45,320 --> 00:37:51,350
to have this middleware stack and yeah

00:37:48,980 --> 00:37:55,450
so just as a final rundown because I

00:37:51,350 --> 00:37:55,450
think time is already running short I

00:37:55,540 --> 00:37:59,840
not show you too much code and and

00:37:58,160 --> 00:38:01,910
basically just give you the the rough

00:37:59,840 --> 00:38:05,270
concept of what this message bus does

00:38:01,910 --> 00:38:07,010
and was in there so that you can decide

00:38:05,270 --> 00:38:08,600
for yourself do I have a problem where

00:38:07,010 --> 00:38:12,020
this kind of looks like it would make

00:38:08,600 --> 00:38:14,600
sense and this is just a big overview

00:38:12,020 --> 00:38:16,690
again of like okay what does all this

00:38:14,600 --> 00:38:19,130
message bus and handling stuff mean

00:38:16,690 --> 00:38:22,070
basically you have a data class that you

00:38:19,130 --> 00:38:23,990
create first you just send it via this

00:38:22,070 --> 00:38:27,470
component to something else like a

00:38:23,990 --> 00:38:30,290
transport for example and then this is

00:38:27,470 --> 00:38:32,510
basically inside your one application

00:38:30,290 --> 00:38:34,760
and then this message leaves the

00:38:32,510 --> 00:38:37,460
application into a message broker into a

00:38:34,760 --> 00:38:40,250
database in Redis and is kept there for

00:38:37,460 --> 00:38:42,020
however long you want and then at some

00:38:40,250 --> 00:38:44,300
point you subscribe to the queue for

00:38:42,020 --> 00:38:47,090
example you you call the message consume

00:38:44,300 --> 00:38:49,160
command you get this message back and

00:38:47,090 --> 00:38:51,020
then you can resume you can it is

00:38:49,160 --> 00:38:53,480
automatically sent to the message bus

00:38:51,020 --> 00:38:55,460
now the message bus figures I received

00:38:53,480 --> 00:38:58,370
this I will actually find a handler that

00:38:55,460 --> 00:39:00,170
should work on this and this can be your

00:38:58,370 --> 00:39:02,690
same application it can be a different

00:39:00,170 --> 00:39:04,970
application technically it could be

00:39:02,690 --> 00:39:06,590
anything else but a PHP application

00:39:04,970 --> 00:39:08,330
anything that can read from the message

00:39:06,590 --> 00:39:11,990
program can read your message can now

00:39:08,330 --> 00:39:13,820
process this and this gives you a lot of

00:39:11,990 --> 00:39:15,470
flexibility especially if you want to do

00:39:13,820 --> 00:39:17,300
like my school service stuff where you

00:39:15,470 --> 00:39:19,790
have asynchronous stuff and you don't

00:39:17,300 --> 00:39:21,920
want to send everything over HTTP you

00:39:19,790 --> 00:39:23,840
can now basically have multiple workers

00:39:21,920 --> 00:39:26,540
that read this message queuing and

00:39:23,840 --> 00:39:28,310
process all these messages you can have

00:39:26,540 --> 00:39:29,840
different applications reading it so

00:39:28,310 --> 00:39:31,970
basically you can have different

00:39:29,840 --> 00:39:34,160
services reading the messages from other

00:39:31,970 --> 00:39:35,700
services when they don't need to act

00:39:34,160 --> 00:39:37,800
upon right away and send a

00:39:35,700 --> 00:39:40,619
something back you can basically have

00:39:37,800 --> 00:39:42,960
for example different service that once

00:39:40,619 --> 00:39:45,900
in the background and just processes all

00:39:42,960 --> 00:39:47,730
the the orders that come in and sends

00:39:45,900 --> 00:39:48,329
them to your CRM for example or

00:39:47,730 --> 00:39:51,570
somewhere else

00:39:48,329 --> 00:39:54,150
so it gives you a lot of flexibility if

00:39:51,570 --> 00:39:55,770
you basically want to get your data out

00:39:54,150 --> 00:39:57,900
of your application into somewhere else

00:39:55,770 --> 00:40:00,839
or if you just want to process data

00:39:57,900 --> 00:40:03,780
outside of a current PHP process outside

00:40:00,839 --> 00:40:05,460
of a current request response cycle the

00:40:03,780 --> 00:40:07,260
take screenshot message is a nice

00:40:05,460 --> 00:40:09,540
example if you actually run your Chrome

00:40:07,260 --> 00:40:10,980
browser on the background to fetch the

00:40:09,540 --> 00:40:13,170
screenshot it would probably take a few

00:40:10,980 --> 00:40:15,329
seconds and you don't want to wait this

00:40:13,170 --> 00:40:17,640
long with processing requests so you

00:40:15,329 --> 00:40:20,040
just send it out as increments Li as say

00:40:17,640 --> 00:40:21,570
yes I received a request you will see

00:40:20,040 --> 00:40:24,300
the screenshot as soon as we're done

00:40:21,570 --> 00:40:25,589
processing it and then at some point the

00:40:24,300 --> 00:40:27,630
message is being processed

00:40:25,589 --> 00:40:29,940
you can send even a message back saying

00:40:27,630 --> 00:40:32,070
yeah I'm done the image is now here so

00:40:29,940 --> 00:40:34,230
if you want to show this image or send a

00:40:32,070 --> 00:40:36,060
customer an email like yeah we were done

00:40:34,230 --> 00:40:37,740
doing the screenshot now you get the

00:40:36,060 --> 00:40:42,060
information so it gives you a nice way

00:40:37,740 --> 00:40:44,310
to process data in an asynchronous way

00:40:42,060 --> 00:40:47,640
which is basically already what I've

00:40:44,310 --> 00:40:50,940
wanted to do here in some way so yeah

00:40:47,640 --> 00:40:53,310
this is just the example of how you

00:40:50,940 --> 00:40:55,619
could do it in a symphony application in

00:40:53,310 --> 00:40:57,660
your own application it would roughly

00:40:55,619 --> 00:41:00,390
look the same the only downside is all

00:40:57,660 --> 00:41:03,119
the stuff that you configure your

00:41:00,390 --> 00:41:05,280
message bus with you have to do manually

00:41:03,119 --> 00:41:07,680
but by actually doing like the the

00:41:05,280 --> 00:41:09,630
register transports and and all the

00:41:07,680 --> 00:41:11,760
handlers and stuff like that which is

00:41:09,630 --> 00:41:13,349
fine just a little bit more legwork then

00:41:11,760 --> 00:41:18,150
we have to do Symphony but you can do it

00:41:13,349 --> 00:41:21,270
outside of Symphony 4 and yes a nice way

00:41:18,150 --> 00:41:23,280
to basically rethink how you handle data

00:41:21,270 --> 00:41:26,010
in your application and it should

00:41:23,280 --> 00:41:28,380
actually happen synchronously and the

00:41:26,010 --> 00:41:30,900
nicest thing is that it hooks into us

00:41:28,380 --> 00:41:32,880
the the whole symphony lifecycle thing

00:41:30,900 --> 00:41:35,490
where you have the profile of a I can

00:41:32,880 --> 00:41:38,609
always look which message was sent

00:41:35,490 --> 00:41:40,650
around which handler reacted to it what

00:41:38,609 --> 00:41:43,380
kind of data was in that message so you

00:41:40,650 --> 00:41:44,940
get a nice feedback because it's very

00:41:43,380 --> 00:41:47,460
nicely integrated and to see your

00:41:44,940 --> 00:41:49,500
symphony application and there's also a

00:41:47,460 --> 00:41:51,300
nice debug command which basically tells

00:41:49,500 --> 00:41:53,310
you you have all these buses with all

00:41:51,300 --> 00:41:55,140
these handlers that handle all these

00:41:53,310 --> 00:41:58,290
messages so it gives you a nice feedback

00:41:55,140 --> 00:42:00,270
net otherwise when you using third-party

00:41:58,290 --> 00:42:03,450
tools you might not have which is really

00:42:00,270 --> 00:42:05,130
nice thing to have and yeah so that's it

00:42:03,450 --> 00:42:07,829
basically I want to give you the idea of

00:42:05,130 --> 00:42:10,500
what can you do over there well does it

00:42:07,829 --> 00:42:12,690
make sense for us you can even use it

00:42:10,500 --> 00:42:14,940
outside of your request response stuff

00:42:12,690 --> 00:42:18,210
for example I used it in an example

00:42:14,940 --> 00:42:20,190
where we process in the background lots

00:42:18,210 --> 00:42:22,500
of monthly orders subscription orders

00:42:20,190 --> 00:42:23,010
that we had we basically instead of just

00:42:22,500 --> 00:42:24,630
having one

00:42:23,010 --> 00:42:27,720
CLI drop that ran everything

00:42:24,630 --> 00:42:29,609
synchronously we send out batches of

00:42:27,720 --> 00:42:31,200
messages like this is the first part of

00:42:29,609 --> 00:42:33,089
all of us that someone should handle and

00:42:31,200 --> 00:42:35,220
this is the next one and then we could

00:42:33,089 --> 00:42:37,980
basically fan out all these processes

00:42:35,220 --> 00:42:39,630
and make things way faster and also way

00:42:37,980 --> 00:42:42,119
easier to read because now I have very

00:42:39,630 --> 00:42:44,609
compact code like I just want to look at

00:42:42,119 --> 00:42:47,400
one or instead of just okay I have this

00:42:44,609 --> 00:42:48,869
orders catalog thing and all the clients

00:42:47,400 --> 00:42:50,970
and I have to fetch all the other data

00:42:48,869 --> 00:42:52,500
and you end up with this huge object

00:42:50,970 --> 00:42:54,119
graph of all the stuff that you need and

00:42:52,500 --> 00:42:55,619
then you don't know what what are they

00:42:54,119 --> 00:42:57,900
actually doing there so it's it's really

00:42:55,619 --> 00:43:00,990
nice thing to encapsulate smaller

00:42:57,900 --> 00:43:02,910
processes for you and and even get kind

00:43:00,990 --> 00:43:04,950
of implicit workflows going if you want

00:43:02,910 --> 00:43:06,290
which is really nice so I encourage you

00:43:04,950 --> 00:43:09,089
all to check it out

00:43:06,290 --> 00:43:11,369
all right with that thank you all for

00:43:09,089 --> 00:43:13,700
attention and if you have any questions

00:43:11,369 --> 00:43:13,700
feel

00:43:13,760 --> 00:43:18,119
[Applause]

00:43:20,780 --> 00:43:35,409
[Music]

00:43:32,030 --> 00:43:35,409

YouTube URL: https://www.youtube.com/watch?v=qlKTnbQ7R-E


