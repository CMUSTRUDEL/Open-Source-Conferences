Title: The Road to Continuous Deployment: a Case Study | Michiel Rook | IPC Spring 2017
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2017
Description: 
	Michiel Rook (make.io): It’s a situation many of us are familiar with: a large legacy, monolithic application, limited or no tests, slow and manual release process, low velocity, no confidence… A lot of refactoring is required, but management keeps pushing for new features. How to proceed? Using examples and lessons learned from a real-world case, I’ll show you how to replace a legacy application with a modern service-oriented architecture and build a continuous integration and deployment pipeline to deliver value from the first sprint. On the way, we’ll take a look at the process, automated testing, monitoring, master/trunk based development and various tips and best practices.
Captions: 
	00:00:05,899 --> 00:00:12,690
all right let's get going

00:00:10,019 --> 00:00:17,010
for those that weren't in my earlier

00:00:12,690 --> 00:00:18,869
talk today I am mikheil hello I'm a

00:00:17,010 --> 00:00:21,359
developer consultant a trainer and

00:00:18,869 --> 00:00:23,130
obviously a speaker my Twitter handle

00:00:21,359 --> 00:00:27,660
right there if you want to reach out to

00:00:23,130 --> 00:00:30,179
me complain about the talk or view the

00:00:27,660 --> 00:00:32,940
slides I'll post the slides online after

00:00:30,179 --> 00:00:35,370
the talk I work for a company called for

00:00:32,940 --> 00:00:37,140
Scouts we do a lot of consulting on

00:00:35,370 --> 00:00:39,149
continuous delivery and continuous

00:00:37,140 --> 00:00:42,210
deployment so if you have questions if

00:00:39,149 --> 00:00:44,420
we can help you please come see me after

00:00:42,210 --> 00:00:47,670
the talk and we'll exchange details

00:00:44,420 --> 00:00:49,260
alright let's get going as I said this

00:00:47,670 --> 00:00:52,590
is a project that took about a year and

00:00:49,260 --> 00:00:55,410
a half this project happened in

00:00:52,590 --> 00:00:59,520
Amsterdam along a beautiful river called

00:00:55,410 --> 00:01:00,870
di River the company dis occurred at is

00:00:59,520 --> 00:01:02,940
called the best group employment

00:01:00,870 --> 00:01:05,820
solutions which is part of the periscope

00:01:02,940 --> 00:01:07,740
which is a large newspaper company in

00:01:05,820 --> 00:01:11,420
developed in Belgium and the Netherlands

00:01:07,740 --> 00:01:14,970
they owned a number of large newspapers

00:01:11,420 --> 00:01:18,000
but also a bunch of online companies

00:01:14,970 --> 00:01:21,450
such as this one

00:01:18,000 --> 00:01:26,790
they have three online job boards three

00:01:21,450 --> 00:01:30,960
Dutch online job boards an IT job board

00:01:26,790 --> 00:01:33,869
and two other job boards this company

00:01:30,960 --> 00:01:36,439
was dealing they existed for a bunch of

00:01:33,869 --> 00:01:40,430
years and they were dealing with

00:01:36,439 --> 00:01:44,360
essentially an aging system and aging

00:01:40,430 --> 00:01:46,860
application a large and aging monolith

00:01:44,360 --> 00:01:50,520
which happened to generate a bunch of

00:01:46,860 --> 00:01:52,649
income serious money every year but it

00:01:50,520 --> 00:01:57,630
was also dreadfully slow and very

00:01:52,649 --> 00:02:00,149
complex dreadfully slow page load times

00:01:57,630 --> 00:02:04,140
of five to six seconds or worse were not

00:02:00,149 --> 00:02:09,080
uncommon technical debt was also a

00:02:04,140 --> 00:02:11,550
serious issue in this project and this

00:02:09,080 --> 00:02:13,530
when we look at the architecture of this

00:02:11,550 --> 00:02:15,689
large aging monolith

00:02:13,530 --> 00:02:18,480
there are a few things that that that

00:02:15,689 --> 00:02:20,939
pop up on the top we have three job

00:02:18,480 --> 00:02:23,519
sites that I told you about the traffic

00:02:20,939 --> 00:02:25,530
from the Internet to one of these three

00:02:23,519 --> 00:02:28,230
job sites essentially came in comes in

00:02:25,530 --> 00:02:31,890
to the same set of load balancers and

00:02:28,230 --> 00:02:34,109
varnish caches that traffic then gets

00:02:31,890 --> 00:02:37,230
distributed across a bunch of front end

00:02:34,109 --> 00:02:39,359
servers which handle the load they talk

00:02:37,230 --> 00:02:41,790
to a bunch of back-end service so far so

00:02:39,359 --> 00:02:44,069
good right problem being there that some

00:02:41,790 --> 00:02:46,439
front end servers talk to other front

00:02:44,069 --> 00:02:49,409
end servers and some back-end servers

00:02:46,439 --> 00:02:52,349
talk to other back-end service by about

00:02:49,409 --> 00:02:56,669
three different ways RPC direct database

00:02:52,349 --> 00:02:59,040
access and rest api s-- plus the only

00:02:56,669 --> 00:03:01,109
way to distinguish a front-end server

00:02:59,040 --> 00:03:03,419
from a back-end server is a simple flag

00:03:01,109 --> 00:03:05,730
they run the exact same code or the

00:03:03,419 --> 00:03:07,530
exact same code is on that machine the

00:03:05,730 --> 00:03:11,189
only way to distinguish is a boolean

00:03:07,530 --> 00:03:13,260
essentially and so in in the bottom of

00:03:11,189 --> 00:03:15,870
the picture they connect to a bunch of

00:03:13,260 --> 00:03:18,479
external services and so Lauren what

00:03:15,870 --> 00:03:22,440
have you my sequel so this is the

00:03:18,479 --> 00:03:24,419
picture as we found it essentially as a

00:03:22,440 --> 00:03:27,479
number of external consultants of which

00:03:24,419 --> 00:03:30,060
I was one and we were asked to help the

00:03:27,479 --> 00:03:33,359
existing team about sixteen people and

00:03:30,060 --> 00:03:37,169
that existing team were dealing with

00:03:33,359 --> 00:03:39,299
this monolith by manual releases every

00:03:37,169 --> 00:03:41,879
four to five weeks usually on the

00:03:39,299 --> 00:03:44,370
weekend and the problem with a job site

00:03:41,879 --> 00:03:46,949
is that it has two groups of consumers

00:03:44,370 --> 00:03:49,379
two groups of customers essentially one

00:03:46,949 --> 00:03:53,459
group is the group of recruiters and

00:03:49,379 --> 00:03:55,889
employers that post jobs on a job site

00:03:53,459 --> 00:03:59,729
they tend to do that on weekdays from 9

00:03:55,889 --> 00:04:01,949
to 5 and the under group those are the

00:03:59,729 --> 00:04:03,810
actual consumers if you will they're

00:04:01,949 --> 00:04:06,209
looking for a job or maybe for a better

00:04:03,810 --> 00:04:09,329
job and they tend to do that at night on

00:04:06,209 --> 00:04:10,709
weekdays or in the weekend so you can

00:04:09,329 --> 00:04:13,109
imagine that if you take the site down

00:04:10,709 --> 00:04:17,070
for a manual release every weekend or

00:04:13,109 --> 00:04:18,989
every four to five weeks a weekend that

00:04:17,070 --> 00:04:21,510
hurts the people that use the site to

00:04:18,989 --> 00:04:23,490
find a job of course it doesn't hurt the

00:04:21,510 --> 00:04:26,039
people paying the bills but it does hurt

00:04:23,490 --> 00:04:26,560
the people that make your site popular

00:04:26,039 --> 00:04:29,260
or

00:04:26,560 --> 00:04:31,270
unpopular so anyway manual releases

00:04:29,260 --> 00:04:33,040
every four to five weeks usually a lot

00:04:31,270 --> 00:04:37,330
of firefighting in the week after the

00:04:33,040 --> 00:04:40,270
release fragile tests tests that would

00:04:37,330 --> 00:04:41,889
randomly fall over would randomly fail

00:04:40,270 --> 00:04:45,730
and then the next test run would work

00:04:41,889 --> 00:04:47,320
again only to have another test fail so

00:04:45,730 --> 00:04:49,900
something that you can't really trust

00:04:47,320 --> 00:04:53,590
and they ran for about two or three

00:04:49,900 --> 00:04:55,630
hours in some cases like I said frequent

00:04:53,590 --> 00:04:58,300
fire fighting after releases but in

00:04:55,630 --> 00:05:01,060
general between releases as well a lot

00:04:58,300 --> 00:05:04,660
of issues that took valuable development

00:05:01,060 --> 00:05:07,120
time from the team and the team was

00:05:04,660 --> 00:05:10,030
getting pretty frustrated and all this

00:05:07,120 --> 00:05:11,919
had had a sick result in a significantly

00:05:10,030 --> 00:05:15,910
lower velocity than you would expect

00:05:11,919 --> 00:05:19,990
with such a team now there are a few

00:05:15,910 --> 00:05:21,460
things that you can ask well when all

00:05:19,990 --> 00:05:24,190
this is happening and of course

00:05:21,460 --> 00:05:26,889
management was asking a few things as

00:05:24,190 --> 00:05:30,610
well and they said a few goals down to

00:05:26,889 --> 00:05:32,289
to improve this one of the goals to

00:05:30,610 --> 00:05:35,110
obviously reduce the number of issues

00:05:32,289 --> 00:05:36,789
that this team was dealing with because

00:05:35,110 --> 00:05:40,479
again that takes away valuable

00:05:36,789 --> 00:05:42,850
development time the other goal the next

00:05:40,479 --> 00:05:44,950
goal is to reduce the lead time and Bily

00:05:42,850 --> 00:05:46,720
time I mean the time it takes for an

00:05:44,950 --> 00:05:52,210
idea to make it all the way into

00:05:46,720 --> 00:05:54,100
production usable by consumer before we

00:05:52,210 --> 00:05:56,139
started with this transition the lead

00:05:54,100 --> 00:05:59,440
time was measured in number of months

00:05:56,139 --> 00:06:01,750
three to four months easily which in a

00:05:59,440 --> 00:06:04,450
highly competitive market such as the

00:06:01,750 --> 00:06:05,979
online job boards at this point is

00:06:04,450 --> 00:06:08,370
simply not acceptable anymore so that

00:06:05,979 --> 00:06:11,680
needs to be reduced by a fair amount

00:06:08,370 --> 00:06:13,570
third increase the productivity of the

00:06:11,680 --> 00:06:15,850
team goes hand in hand with goal number

00:06:13,570 --> 00:06:17,380
one if we reduce the number of issues

00:06:15,850 --> 00:06:19,210
that the team needs to work on then

00:06:17,380 --> 00:06:23,289
obviously they can spend their time on

00:06:19,210 --> 00:06:25,750
doing more useful things fourth increase

00:06:23,289 --> 00:06:28,270
the motivation this may even be one of

00:06:25,750 --> 00:06:30,490
the most important goals because if you

00:06:28,270 --> 00:06:33,850
have a team that is frustrated that is

00:06:30,490 --> 00:06:36,940
not performing to the level what they

00:06:33,850 --> 00:06:39,280
think then at some point they may go

00:06:36,940 --> 00:06:42,520
away to another company

00:06:39,280 --> 00:06:45,670
and you want to make sure that developer

00:06:42,520 --> 00:06:47,620
attention is actually a thing not only

00:06:45,670 --> 00:06:49,510
developers but also testers and

00:06:47,620 --> 00:06:52,540
everybody pretty much involved with the

00:06:49,510 --> 00:06:55,720
development of this application so they

00:06:52,540 --> 00:06:58,450
need to become more motivated to handle

00:06:55,720 --> 00:07:00,160
this and to keep them essentially or to

00:06:58,450 --> 00:07:03,880
increase the chances of keeping them at

00:07:00,160 --> 00:07:07,360
the company now I stipulated these four

00:07:03,880 --> 00:07:12,130
goals and these goals lead to a very

00:07:07,360 --> 00:07:14,950
simple question how now how translates

00:07:12,130 --> 00:07:15,750
into should we refactor or should we

00:07:14,950 --> 00:07:18,790
rebuild

00:07:15,750 --> 00:07:22,390
let me explain those two things refactor

00:07:18,790 --> 00:07:25,240
means that we iteratively start

00:07:22,390 --> 00:07:27,790
improving small parts of the code and

00:07:25,240 --> 00:07:30,370
then if we do that long enough then

00:07:27,790 --> 00:07:32,880
small parts become large parts and we

00:07:30,370 --> 00:07:35,650
have the application under control again

00:07:32,880 --> 00:07:38,110
they started enthusiastically with that

00:07:35,650 --> 00:07:40,740
after three four months we have about

00:07:38,110 --> 00:07:44,200
two and a half percent code coverage

00:07:40,740 --> 00:07:46,090
which is not a lot but in absolute term

00:07:44,200 --> 00:07:49,540
or actually in relative terms it's an

00:07:46,090 --> 00:07:51,930
insane jump from it was about 0.5 but

00:07:49,540 --> 00:07:56,110
still that's not going to cut it a

00:07:51,930 --> 00:07:58,300
rebuild by a rebuild I consider a

00:07:56,110 --> 00:08:00,760
something called a cut over rewrite and

00:07:58,300 --> 00:08:04,300
a cut over rewrite this essentially we

00:08:00,760 --> 00:08:07,810
build we have system a on the at first

00:08:04,300 --> 00:08:10,360
and we build system B next to it up to

00:08:07,810 --> 00:08:12,640
the same feature level essentially a

00:08:10,360 --> 00:08:14,350
system a and at some point where we're

00:08:12,640 --> 00:08:16,660
done we have reached the exact same

00:08:14,350 --> 00:08:19,630
functionality as system a and then we

00:08:16,660 --> 00:08:21,160
switch over now de blitt a big flipping

00:08:19,630 --> 00:08:26,860
switch or flipping the big switch that

00:08:21,160 --> 00:08:28,510
has never gone wrong right plus if you

00:08:26,860 --> 00:08:30,760
do something like that you tend to

00:08:28,510 --> 00:08:32,289
rebuild all of the problems or rewrite

00:08:30,760 --> 00:08:35,260
all of the problems that are in the

00:08:32,289 --> 00:08:37,539
original system this system has been

00:08:35,260 --> 00:08:40,719
developed over the course of 10 to 15

00:08:37,539 --> 00:08:42,820
years most if not all of the decisions

00:08:40,719 --> 00:08:45,580
that have been made in the 10 to 15

00:08:42,820 --> 00:08:47,500
years are gone or at least the Y is gone

00:08:45,580 --> 00:08:49,240
the persons behind those decisions have

00:08:47,500 --> 00:08:52,089
long left the company things were not

00:08:49,240 --> 00:08:53,680
documented bugs have actually become

00:08:52,089 --> 00:08:56,890
features

00:08:53,680 --> 00:08:59,829
we don't know why certain things were

00:08:56,890 --> 00:09:02,260
put in there that the original client or

00:08:59,829 --> 00:09:05,589
customer that stipulated that feature

00:09:02,260 --> 00:09:07,060
has already gone so you end up

00:09:05,589 --> 00:09:10,839
rebuilding a lot of cruft

00:09:07,060 --> 00:09:12,700
that you may not even need so rebuilding

00:09:10,839 --> 00:09:14,260
is out of the question briefly a

00:09:12,700 --> 00:09:17,260
commercial off-the-shelf system was

00:09:14,260 --> 00:09:19,480
considered there are a few vendors where

00:09:17,260 --> 00:09:21,820
you can buy a job board essentially and

00:09:19,480 --> 00:09:23,769
we can change a logo and the font and

00:09:21,820 --> 00:09:26,860
stuff like that

00:09:23,769 --> 00:09:29,140
problem is this is a company which is a

00:09:26,860 --> 00:09:30,670
online job board 3 actually so if they

00:09:29,140 --> 00:09:32,260
buy a commercial off-the-shelf product

00:09:30,670 --> 00:09:34,959
they lose their ability to innovate and

00:09:32,260 --> 00:09:37,870
essentially stop being a company so that

00:09:34,959 --> 00:09:39,339
was very briefly considered now if all

00:09:37,870 --> 00:09:41,709
those things the answer to all these

00:09:39,339 --> 00:09:45,610
questions is no then what is the actual

00:09:41,709 --> 00:09:48,910
answer well one of the answers is we

00:09:45,610 --> 00:09:51,550
need to start looking at our api's as if

00:09:48,910 --> 00:09:54,300
they are the most important thing eat

00:09:51,550 --> 00:09:58,449
your own dog food and some people say

00:09:54,300 --> 00:10:01,120
the api's we use in this system are used

00:09:58,449 --> 00:10:04,990
by external suppliers such as employers

00:10:01,120 --> 00:10:07,510
or recruiters to inject jobs into the

00:10:04,990 --> 00:10:10,029
system and also to search for jobs or

00:10:07,510 --> 00:10:14,290
for candidates if we don't consider

00:10:10,029 --> 00:10:16,630
those api's to be any important read we

00:10:14,290 --> 00:10:19,660
need to use the same api's internally

00:10:16,630 --> 00:10:21,310
that we publish externally then they're

00:10:19,660 --> 00:10:24,790
never going to be up to the quality that

00:10:21,310 --> 00:10:26,740
we should want we also said we're going

00:10:24,790 --> 00:10:29,829
to a service oriented architecture and

00:10:26,740 --> 00:10:32,230
we're going to introduce services per

00:10:29,829 --> 00:10:36,180
domain object which roughly translates

00:10:32,230 --> 00:10:39,640
to jobs job seekers may be companies

00:10:36,180 --> 00:10:41,890
terms like that and we also said that

00:10:39,640 --> 00:10:44,290
this being a website we can migrate

00:10:41,890 --> 00:10:46,660
individual pages individual web pages

00:10:44,290 --> 00:10:50,380
from site a to site B or application to

00:10:46,660 --> 00:10:52,720
application B and this is some of the

00:10:50,380 --> 00:10:53,470
technology we used as part of it inhale

00:10:52,720 --> 00:10:55,600
new stack

00:10:53,470 --> 00:10:57,339
now when I say migrating individual

00:10:55,600 --> 00:10:58,810
pages what do I actually mean well I

00:10:57,339 --> 00:11:01,649
mean something called the strangler

00:10:58,810 --> 00:11:05,230
pattern or the strangler application

00:11:01,649 --> 00:11:06,730
this was coined a few years ago a bunch

00:11:05,230 --> 00:11:09,760
of years ago by a guy

00:11:06,730 --> 00:11:13,209
Martin Fowler and he said there's a

00:11:09,760 --> 00:11:16,420
there's a sorta tree or more trees but

00:11:13,209 --> 00:11:19,029
in plants that grow on other trees or

00:11:16,420 --> 00:11:22,389
other plants on the outside and they

00:11:19,029 --> 00:11:26,769
essentially live off or grow off of the

00:11:22,389 --> 00:11:28,810
energy of that plant the host and they

00:11:26,769 --> 00:11:31,810
grow and grow until they envelop the

00:11:28,810 --> 00:11:34,620
host plant at which point it withers and

00:11:31,810 --> 00:11:37,630
dies it's a little bit morbid but

00:11:34,620 --> 00:11:39,610
translated to our system are a large

00:11:37,630 --> 00:11:42,550
aging monolith we can do pretty much the

00:11:39,610 --> 00:11:44,440
same right now in the picture we have a

00:11:42,550 --> 00:11:46,839
simple monolithic application connecting

00:11:44,440 --> 00:11:49,769
it to database and serving traffic to

00:11:46,839 --> 00:11:52,389
and from the Internet so far so good

00:11:49,769 --> 00:11:55,000
we then add a proxy in between the

00:11:52,389 --> 00:11:57,070
Internet and the application initially

00:11:55,000 --> 00:12:00,459
the proxy doesn't do anything it just

00:11:57,070 --> 00:12:02,260
passes it traffic to but then we start

00:12:00,459 --> 00:12:03,850
adding a service small service with a

00:12:02,260 --> 00:12:06,240
little bit of functionality maybe it has

00:12:03,850 --> 00:12:08,740
it on its own database maybe not and

00:12:06,240 --> 00:12:10,810
that functionality is then implemented

00:12:08,740 --> 00:12:15,220
in a service and we can add a rule to

00:12:10,810 --> 00:12:17,740
the proxy saying that if a user comes to

00:12:15,220 --> 00:12:20,110
this page serve it off of the service

00:12:17,740 --> 00:12:23,620
the new service not the old application

00:12:20,110 --> 00:12:25,569
and we can do that for people on our own

00:12:23,620 --> 00:12:27,459
network for example so the people in the

00:12:25,569 --> 00:12:31,750
company get to see that new page first

00:12:27,459 --> 00:12:33,389
and then we open up to about 10% of life

00:12:31,750 --> 00:12:36,670
traffic and then 50 and then a hundred

00:12:33,389 --> 00:12:38,560
right and then we start adding more

00:12:36,670 --> 00:12:40,930
services and more services with their

00:12:38,560 --> 00:12:43,540
own databases and on storage and and

00:12:40,930 --> 00:12:45,760
whatnot we add more rules to the proxy

00:12:43,540 --> 00:12:48,010
we had more functionality in those

00:12:45,760 --> 00:12:49,959
services until at some point we're at a

00:12:48,010 --> 00:12:52,329
level where we say ok

00:12:49,959 --> 00:12:54,430
this is good enough we've reached what

00:12:52,329 --> 00:12:56,589
we want to reach in terms of features in

00:12:54,430 --> 00:12:58,569
terms of functionality and the original

00:12:56,589 --> 00:13:01,029
monolithic application is not doing

00:12:58,569 --> 00:13:04,800
anything useful anymore at which point

00:13:01,029 --> 00:13:08,860
it can be switched off and thrown away

00:13:04,800 --> 00:13:10,630
Strangler pattern that leads to the

00:13:08,860 --> 00:13:13,569
following architecture all our front

00:13:10,630 --> 00:13:15,399
ends our services as well there are no

00:13:13,569 --> 00:13:17,470
better or no worse than other services

00:13:15,399 --> 00:13:19,930
they are treated the same way also means

00:13:17,470 --> 00:13:20,200
that we now this company remember had

00:13:19,930 --> 00:13:22,660
three

00:13:20,200 --> 00:13:24,580
different sites three labels we are now

00:13:22,660 --> 00:13:27,610
have three front end services which we

00:13:24,580 --> 00:13:29,740
can innovate individually we can do more

00:13:27,610 --> 00:13:31,630
in terms of the brand we don't have to

00:13:29,740 --> 00:13:34,030
make sure that that code is compatible

00:13:31,630 --> 00:13:35,380
we can do things for one front end that

00:13:34,030 --> 00:13:39,310
we don't want to do for another front

00:13:35,380 --> 00:13:41,290
end next all surfaces are behind load

00:13:39,310 --> 00:13:43,360
balancers that means that we can scale

00:13:41,290 --> 00:13:45,700
up and scale down depending on traffic

00:13:43,360 --> 00:13:47,740
load depending on the time of day it

00:13:45,700 --> 00:13:49,870
also means that we can replace services

00:13:47,740 --> 00:13:52,060
or replicas of services behind the load

00:13:49,870 --> 00:13:54,400
balancer by a new version without users

00:13:52,060 --> 00:13:57,640
noticing it zero downtime deployments

00:13:54,400 --> 00:14:00,430
very important third we need to access

00:13:57,640 --> 00:14:02,830
legacy databases in some cases if only

00:14:00,430 --> 00:14:07,420
to fix the broken data model clean it up

00:14:02,830 --> 00:14:09,250
and last but not least we said that

00:14:07,420 --> 00:14:12,700
every single service has its own

00:14:09,250 --> 00:14:15,510
container docker container when we

00:14:12,700 --> 00:14:19,870
started this this was September 2014

00:14:15,510 --> 00:14:23,140
docker was I think at point six zero

00:14:19,870 --> 00:14:28,230
point six but we did started using it in

00:14:23,140 --> 00:14:31,030
production so surfaces in containers now

00:14:28,230 --> 00:14:33,400
after this architecture and a way of

00:14:31,030 --> 00:14:34,960
applying the Strangler pattern and and

00:14:33,400 --> 00:14:38,380
those things let's take a look at some

00:14:34,960 --> 00:14:40,810
of the process changes we agreed on as a

00:14:38,380 --> 00:14:43,960
group of external consultants with the

00:14:40,810 --> 00:14:46,380
team so we didn't decide for the team we

00:14:43,960 --> 00:14:50,260
decided with the team very important key

00:14:46,380 --> 00:14:53,080
thing one of those decision is that

00:14:50,260 --> 00:14:55,770
everything happens continuously from now

00:14:53,080 --> 00:14:59,110
on that means there are no longer

00:14:55,770 --> 00:15:01,330
projects don't exist anymore a project

00:14:59,110 --> 00:15:05,100
has a start date and hopefully an end

00:15:01,330 --> 00:15:07,510
date when you do continuous lifecycle

00:15:05,100 --> 00:15:11,050
management continuous product management

00:15:07,510 --> 00:15:12,970
there really is no end until a product

00:15:11,050 --> 00:15:14,620
is no longer useful on the market and

00:15:12,970 --> 00:15:16,960
the product is taken out of the market

00:15:14,620 --> 00:15:20,230
but there are no projects anymore there

00:15:16,960 --> 00:15:22,630
is a say an iteration on a daily basis

00:15:20,230 --> 00:15:25,870
to improve a product and improve a team

00:15:22,630 --> 00:15:27,520
improve a company right so everything

00:15:25,870 --> 00:15:29,920
happens on a continuous basis and

00:15:27,520 --> 00:15:32,710
continuous is going to come back during

00:15:29,920 --> 00:15:34,100
this talk for a few times one of them is

00:15:32,710 --> 00:15:36,980
continuous deploy

00:15:34,100 --> 00:15:40,130
name of the stock what is CD though

00:15:36,980 --> 00:15:43,490
there are a few different engines or

00:15:40,130 --> 00:15:45,920
different statements on what CD is and

00:15:43,490 --> 00:15:46,460
I'll show you or I'll tell you what I

00:15:45,920 --> 00:15:49,130
think

00:15:46,460 --> 00:15:51,650
CD should be it all starts with

00:15:49,130 --> 00:15:54,170
continuous integration now continuous

00:15:51,650 --> 00:15:56,270
integration is an older term and

00:15:54,170 --> 00:15:58,460
continuous integration basically says we

00:15:56,270 --> 00:16:01,340
have a developer on a machine and they

00:15:58,460 --> 00:16:04,070
check in some code at some point to get

00:16:01,340 --> 00:16:06,710
up or whatever and when that when that

00:16:04,070 --> 00:16:08,570
check-in occurs a process on some other

00:16:06,710 --> 00:16:11,930
server a build server starts running

00:16:08,570 --> 00:16:14,330
checks out the code and starts building

00:16:11,930 --> 00:16:16,490
and testing it now building that depends

00:16:14,330 --> 00:16:19,150
on the language you're in with PHP you

00:16:16,490 --> 00:16:21,190
don't we don't have a compiler obviously

00:16:19,150 --> 00:16:24,680
but you can do other things like

00:16:21,190 --> 00:16:27,710
packaging CSS and j/s and files together

00:16:24,680 --> 00:16:29,770
what have you running tests very

00:16:27,710 --> 00:16:33,530
important part of this process so

00:16:29,770 --> 00:16:36,320
essentially all these steps are to

00:16:33,530 --> 00:16:41,240
verify that the commit you just made is

00:16:36,320 --> 00:16:43,250
okay once that's all done ci says that

00:16:41,240 --> 00:16:46,700
you should have a single uniquely

00:16:43,250 --> 00:16:50,930
identifying artifact and that's it and

00:16:46,700 --> 00:16:53,990
that artifact can be tardo gzip file it

00:16:50,930 --> 00:16:56,600
can be a docker image it can be anything

00:16:53,990 --> 00:16:59,810
really as long as it's a single thing

00:16:56,600 --> 00:17:03,170
which is a uniquely identifiable and

00:16:59,810 --> 00:17:04,520
uniquely tied to that single commit but

00:17:03,170 --> 00:17:06,170
that's why it stops continuous

00:17:04,520 --> 00:17:08,600
integration doesn't do anything beyond

00:17:06,170 --> 00:17:12,610
that point it verifies the build and it

00:17:08,600 --> 00:17:15,350
notifies you whether it's okay or not

00:17:12,610 --> 00:17:16,910
continuous delivery however takes that

00:17:15,350 --> 00:17:18,350
artifact that we just built in the

00:17:16,910 --> 00:17:20,270
continuous integration step and

00:17:18,350 --> 00:17:22,520
automatically deploys it to an

00:17:20,270 --> 00:17:24,500
acceptance environment and the

00:17:22,520 --> 00:17:26,660
acceptance environment is where we have

00:17:24,500 --> 00:17:29,360
our testers and product owners and they

00:17:26,660 --> 00:17:31,130
can actually look at the thing click

00:17:29,360 --> 00:17:34,640
through our application and verify that

00:17:31,130 --> 00:17:36,380
the change that was made is OK the

00:17:34,640 --> 00:17:38,060
deployment to acceptance should be

00:17:36,380 --> 00:17:41,420
completely automated there should be no

00:17:38,060 --> 00:17:43,940
human involvement there notice the red

00:17:41,420 --> 00:17:46,760
arrow however the red arrow says that if

00:17:43,940 --> 00:17:47,930
we want to deploy to production that is

00:17:46,760 --> 00:17:50,060
a human trigger

00:17:47,930 --> 00:17:53,480
so somebody's actually going to press a

00:17:50,060 --> 00:17:55,490
button somewhere right the only thing is

00:17:53,480 --> 00:17:57,860
that the deploy to production should be

00:17:55,490 --> 00:17:59,900
automated like the deploy to acceptance

00:17:57,860 --> 00:18:02,540
the only thing is that the human is

00:17:59,900 --> 00:18:04,460
going to trigger it now if we've done

00:18:02,540 --> 00:18:08,150
that couple of hundred couple thousands

00:18:04,460 --> 00:18:09,980
of times there really is no point and

00:18:08,150 --> 00:18:11,780
for having a human involvement any more

00:18:09,980 --> 00:18:13,910
at which point we start calling it

00:18:11,780 --> 00:18:17,570
continuous deployment the red arrow

00:18:13,910 --> 00:18:20,330
turns green indicating that we have an

00:18:17,570 --> 00:18:22,160
automated process that that does this so

00:18:20,330 --> 00:18:24,260
we still deploy to acceptance even

00:18:22,160 --> 00:18:25,820
though I tend to call it staging or

00:18:24,260 --> 00:18:29,090
pre-production at this point because

00:18:25,820 --> 00:18:31,730
well other than automated checks there

00:18:29,090 --> 00:18:36,050
is no human doing as accepting any more

00:18:31,730 --> 00:18:38,210
there's no UAT stage if you will so if

00:18:36,050 --> 00:18:40,940
the deployment to staging or acceptance

00:18:38,210 --> 00:18:43,190
works for deploy successfully and it

00:18:40,940 --> 00:18:45,650
checks out then we immediately in a

00:18:43,190 --> 00:18:50,720
wrecker replica Blee deploy to

00:18:45,650 --> 00:18:54,260
production in my view something like

00:18:50,720 --> 00:18:59,060
this we call a pipeline should finish in

00:18:54,260 --> 00:19:02,590
maybe 15 minutes from the very commit to

00:18:59,060 --> 00:19:06,200
get up to the last deploy to production

00:19:02,590 --> 00:19:08,480
why would we want to have something so

00:19:06,200 --> 00:19:11,600
speedy in order to be able to trust it

00:19:08,480 --> 00:19:14,750
if you have a pipeline which takes 3

00:19:11,600 --> 00:19:18,260
hours to deploy to production or 3 hours

00:19:14,750 --> 00:19:21,680
to run the tests even worse if you've if

00:19:18,260 --> 00:19:23,690
test fails you see that maybe in three

00:19:21,680 --> 00:19:26,590
hours time at which point you have

00:19:23,690 --> 00:19:30,080
already done so much work which probably

00:19:26,590 --> 00:19:32,270
which may even have fixed the test or

00:19:30,080 --> 00:19:40,120
broken another test you need very fast

00:19:32,270 --> 00:19:41,870
feedback now continuous deployment is

00:19:40,120 --> 00:19:44,450
something that essentially

00:19:41,870 --> 00:19:47,480
gets the human out of the equation it

00:19:44,450 --> 00:19:49,400
means or at least out of the pipeline it

00:19:47,480 --> 00:19:52,190
means that every commit goes into

00:19:49,400 --> 00:19:55,880
production if we do it well every single

00:19:52,190 --> 00:19:58,820
commit goes into production why would we

00:19:55,880 --> 00:20:01,549
do this well some some of the wise once

00:19:58,820 --> 00:20:04,580
said if it hurt to do it more often

00:20:01,549 --> 00:20:05,860
and then it hurts a lot less because you

00:20:04,580 --> 00:20:08,739
learned to deal with it

00:20:05,860 --> 00:20:11,440
translating that to deployments

00:20:08,739 --> 00:20:14,720
companies that are risk-averse

00:20:11,440 --> 00:20:17,720
paradoxically choose to deploy very

00:20:14,720 --> 00:20:20,809
infrequently and thereby only increasing

00:20:17,720 --> 00:20:23,570
the risk so risk-averse companies state

00:20:20,809 --> 00:20:26,210
that we deploy once or twice per year at

00:20:23,570 --> 00:20:28,399
which point I can guarantee you that

00:20:26,210 --> 00:20:30,499
that once or twice a year deployment

00:20:28,399 --> 00:20:32,629
will fail because there's so much work

00:20:30,499 --> 00:20:34,909
in there there's so much pressure to

00:20:32,629 --> 00:20:36,499
have it work that you're twice

00:20:34,909 --> 00:20:38,480
deployment per year is going to turn

00:20:36,499 --> 00:20:43,009
into three or four deploys per year and

00:20:38,480 --> 00:20:45,080
you have to hotfix deployments after the

00:20:43,009 --> 00:20:47,619
actual scheduled deployment so if it

00:20:45,080 --> 00:20:50,389
hurts do it more often make it small

00:20:47,619 --> 00:20:53,509
make small steps small steps means

00:20:50,389 --> 00:20:55,730
there's less that can go wrong a lot of

00:20:53,509 --> 00:20:58,129
small steps small steps lead to early

00:20:55,730 --> 00:21:00,859
feedback if your pipeline is fast if

00:20:58,129 --> 00:21:01,399
your pipeline gives you results in 15

00:21:00,859 --> 00:21:03,619
minutes

00:21:01,399 --> 00:21:05,690
your commit is deployed into production

00:21:03,619 --> 00:21:07,970
in 15 minutes you have very early

00:21:05,690 --> 00:21:09,950
feedback very fast feedback of whether

00:21:07,970 --> 00:21:12,139
you're commit change something for the

00:21:09,950 --> 00:21:14,059
worse or for the better did my metrics

00:21:12,139 --> 00:21:16,279
go up or down is my conversion rate

00:21:14,059 --> 00:21:18,769
going up or down you know that very

00:21:16,279 --> 00:21:21,200
quickly rather than packaging all these

00:21:18,769 --> 00:21:23,179
commits in one single deploy every four

00:21:21,200 --> 00:21:26,679
or five weeks and you don't know which

00:21:23,179 --> 00:21:30,109
commit was responsible for what anymore

00:21:26,679 --> 00:21:32,480
third small steps allow you to reduce

00:21:30,109 --> 00:21:35,659
the time to recover significantly if

00:21:32,480 --> 00:21:38,539
only if your last commit breaks the

00:21:35,659 --> 00:21:42,080
production or maybe the pipeline then a

00:21:38,539 --> 00:21:44,989
simple get revert hat commit ten minutes

00:21:42,080 --> 00:21:48,320
later you're golden again it drastically

00:21:44,989 --> 00:21:50,330
reduces the time to recover plus if you

00:21:48,320 --> 00:21:53,600
don't have if you release every four to

00:21:50,330 --> 00:21:55,600
five weeks then those hundreds of

00:21:53,600 --> 00:21:59,179
commits they all could have led to that

00:21:55,600 --> 00:22:01,639
broken state right if you have small

00:21:59,179 --> 00:22:03,649
steps it's only the last maybe the last

00:22:01,639 --> 00:22:07,119
two commits that it could have caused it

00:22:03,649 --> 00:22:08,960
so the amount of buck hunting or

00:22:07,119 --> 00:22:12,049
firefighting that you have to do

00:22:08,960 --> 00:22:14,559
drastically reduces and by drastically I

00:22:12,049 --> 00:22:19,940
mean over two thousand times

00:22:14,559 --> 00:22:22,279
and experiments experiments is a very

00:22:19,940 --> 00:22:24,349
overlooked but very key ingredient of

00:22:22,279 --> 00:22:26,749
continuous deployment if you have a fast

00:22:24,349 --> 00:22:29,839
pipeline and you have early feedback it

00:22:26,749 --> 00:22:32,089
allows you to do small and simple

00:22:29,839 --> 00:22:35,659
experiments on your product take Netflix

00:22:32,089 --> 00:22:38,149
for example Netflix can change the color

00:22:35,659 --> 00:22:40,309
of the background of each movie that you

00:22:38,149 --> 00:22:43,219
see just to see whether you are more

00:22:40,309 --> 00:22:44,899
prone to click it right and they have

00:22:43,219 --> 00:22:47,539
that stuff in production in a few

00:22:44,899 --> 00:22:49,839
minutes and then an hour later they know

00:22:47,539 --> 00:22:52,699
whether that premise that hype

00:22:49,839 --> 00:22:55,789
hypothesis that theory that they thought

00:22:52,699 --> 00:22:58,909
up actually works if it doesn't we pull

00:22:55,789 --> 00:23:02,029
it right back so we can experiment on on

00:22:58,909 --> 00:23:03,679
a grand scale and sure most of us don't

00:23:02,029 --> 00:23:05,119
have the traffic levels that Netflix

00:23:03,679 --> 00:23:08,569
does so maybe we need to keep it in

00:23:05,119 --> 00:23:12,759
production for a day or a week but the

00:23:08,569 --> 00:23:15,199
same principle applies experimentation

00:23:12,759 --> 00:23:17,719
experimentation small steps reducing

00:23:15,199 --> 00:23:19,849
time to recover continuous integration

00:23:17,719 --> 00:23:21,859
all mean one thing to me and that is

00:23:19,849 --> 00:23:23,869
that we can only commit to master or

00:23:21,859 --> 00:23:26,449
trunk whatever you call it in your

00:23:23,869 --> 00:23:33,139
versioning system and yes that does mean

00:23:26,449 --> 00:23:35,239
no branches ever pitchforks this is

00:23:33,139 --> 00:23:37,069
generally what happens when I I talk

00:23:35,239 --> 00:23:39,859
about branches and I feel very strongly

00:23:37,069 --> 00:23:46,489
about them as you mmm good good good

00:23:39,859 --> 00:23:52,629
judge um one of them is this has anybody

00:23:46,489 --> 00:23:52,629
ever had merged hell no sure you didn't

00:23:54,729 --> 00:24:00,949
and branches are cheap yeah back in the

00:23:59,389 --> 00:24:04,869
subversion or maybe even seize

00:24:00,949 --> 00:24:06,889
yesterday's branches were insane

00:24:04,869 --> 00:24:09,769
especially in early subversion days

00:24:06,889 --> 00:24:11,779
emerge would would kill you right there

00:24:09,769 --> 00:24:13,399
was no merch info everything would break

00:24:11,779 --> 00:24:15,289
your complete repository would be

00:24:13,399 --> 00:24:18,649
bonkers so nobody was trying to do

00:24:15,289 --> 00:24:20,229
branches and now in the get days and

00:24:18,649 --> 00:24:24,019
mercurial and all those other tools

00:24:20,229 --> 00:24:27,720
branches are cheap it's easy plus they

00:24:24,019 --> 00:24:30,210
even advocated but to me

00:24:27,720 --> 00:24:32,580
branches have one when we use them in

00:24:30,210 --> 00:24:35,759
the context of feature branches have one

00:24:32,580 --> 00:24:37,799
distinct flaw we are abusing our version

00:24:35,759 --> 00:24:39,950
control system for functional separation

00:24:37,799 --> 00:24:43,169
and let me explain what I mean with that

00:24:39,950 --> 00:24:49,200
functional separation a deployment is a

00:24:43,169 --> 00:24:50,940
technical exercise releasing isn't what

00:24:49,200 --> 00:24:53,970
feature branches we tend to combine it

00:24:50,940 --> 00:24:56,429
to which means that we cannot actually

00:24:53,970 --> 00:24:58,139
deploy until that feature branch is

00:24:56,429 --> 00:25:00,029
merged or until the feature is done

00:24:58,139 --> 00:25:03,389
which means we're blocking other

00:25:00,029 --> 00:25:05,700
people's work which means we're not

00:25:03,389 --> 00:25:09,049
moving as fast as we can or maybe as we

00:25:05,700 --> 00:25:11,759
should our quality is low

00:25:09,049 --> 00:25:14,850
delaying integration is a very big thing

00:25:11,759 --> 00:25:17,039
I talked about CI CI only works if you

00:25:14,850 --> 00:25:18,950
do it regularly and yes you can Apple

00:25:17,039 --> 00:25:21,090
you can run your tests on your branch

00:25:18,950 --> 00:25:23,190
but that's not continuous integration

00:25:21,090 --> 00:25:24,929
you're not integrating with anybody

00:25:23,190 --> 00:25:27,360
you're on in your own little isolated

00:25:24,929 --> 00:25:30,149
world and you're not actually testing

00:25:27,360 --> 00:25:32,629
whether your changes coexist peacefully

00:25:30,149 --> 00:25:35,129
with the changes of your team members

00:25:32,629 --> 00:25:37,230
maybe you can get around merge conflict

00:25:35,129 --> 00:25:40,019
by continuously merging master up into

00:25:37,230 --> 00:25:41,490
your branch oh and you probably also

00:25:40,019 --> 00:25:43,230
want to merge all the other feature

00:25:41,490 --> 00:25:45,149
branches that are alive into your branch

00:25:43,230 --> 00:25:47,429
just to see whether that would still

00:25:45,149 --> 00:25:51,570
work and on a team of sixteen people

00:25:47,429 --> 00:25:53,009
that starts a not scale but then you

00:25:51,570 --> 00:25:54,269
have fixed your merge conflict but have

00:25:53,009 --> 00:25:56,700
you actually checked whether the

00:25:54,269 --> 00:25:59,519
functionality merges whether you're the

00:25:56,700 --> 00:26:01,379
two features that people build on two

00:25:59,519 --> 00:26:07,529
branches actually coexist on a

00:26:01,379 --> 00:26:10,950
functional level conflicts merge

00:26:07,529 --> 00:26:14,159
conflicts feature conflicts something I

00:26:10,950 --> 00:26:17,549
would definitely recommend against now

00:26:14,159 --> 00:26:19,289
if I if you hear me say okay functional

00:26:17,549 --> 00:26:21,029
separation deployment is a technical

00:26:19,289 --> 00:26:23,129
exercise all well and good but what if

00:26:21,029 --> 00:26:25,139
we don't what we can't use feature

00:26:23,129 --> 00:26:29,460
branches and what can we use me few

00:26:25,139 --> 00:26:32,629
feature toggles feature toggles are what

00:26:29,460 --> 00:26:35,159
you are allow what allow you to deploy

00:26:32,629 --> 00:26:37,350
even though you are still not ready with

00:26:35,159 --> 00:26:39,570
a feature a feature toggle is

00:26:37,350 --> 00:26:41,159
essentially an if statement glorified if

00:26:39,570 --> 00:26:44,279
statement if you will

00:26:41,159 --> 00:26:47,849
feature toggle decouples the deployment

00:26:44,279 --> 00:26:49,889
from other release and it does that by

00:26:47,849 --> 00:26:51,479
on the left hand side we have a search

00:26:49,889 --> 00:26:53,429
screen and on the right hand side we

00:26:51,479 --> 00:26:56,450
have another search screen one on the

00:26:53,429 --> 00:26:58,739
left is old the one on the right is new

00:26:56,450 --> 00:27:02,929
let me tell you this search screen took

00:26:58,739 --> 00:27:05,580
more than a couple days to build and

00:27:02,929 --> 00:27:07,379
while we are we're building it we're not

00:27:05,580 --> 00:27:08,789
going to hold back with deploying other

00:27:07,379 --> 00:27:11,129
stuff because there are other people

00:27:08,789 --> 00:27:12,539
working on other features no not the

00:27:11,129 --> 00:27:15,840
whole team is working on that single

00:27:12,539 --> 00:27:17,820
search page that one scale so we need

00:27:15,840 --> 00:27:20,279
some way of hiding this functionality

00:27:17,820 --> 00:27:22,220
from the outside world and the feature

00:27:20,279 --> 00:27:24,809
toggles where it comes in feature toggle

00:27:22,220 --> 00:27:27,570
usually only on the UI side of things

00:27:24,809 --> 00:27:30,090
because if you add a new API endpoint

00:27:27,570 --> 00:27:32,639
that nobody's gonna call then why hide

00:27:30,090 --> 00:27:34,320
it beyond the future toggle not people

00:27:32,639 --> 00:27:37,080
not calling it is its own future toggle

00:27:34,320 --> 00:27:39,599
but then the UI UI side we did this the

00:27:37,080 --> 00:27:45,989
feature toggle is essentially an a/b

00:27:39,599 --> 00:27:48,749
test for for gratis it basically says

00:27:45,989 --> 00:27:51,509
that when the feature toggle is on we

00:27:48,749 --> 00:27:54,539
showed a new version if it's off we show

00:27:51,509 --> 00:27:56,789
the old version and the on part we can

00:27:54,539 --> 00:27:59,820
just we can decide based on IP address

00:27:56,789 --> 00:28:01,710
people can set a cookie to invoke the to

00:27:59,820 --> 00:28:07,229
enable the feature toggle all those

00:28:01,710 --> 00:28:10,769
things feature toggle debt is a real

00:28:07,229 --> 00:28:14,429
thing though if feature toggles stay

00:28:10,769 --> 00:28:16,669
around for too long and you cannot

00:28:14,429 --> 00:28:20,729
convince the product owner that the

00:28:16,669 --> 00:28:22,409
feature should be put live and you end

00:28:20,729 --> 00:28:23,879
up building more and more feature

00:28:22,409 --> 00:28:27,859
toggles then you have a combinatorial

00:28:23,879 --> 00:28:30,869
explosion on your hands potentially so

00:28:27,859 --> 00:28:33,239
during this project we not always

00:28:30,869 --> 00:28:35,879
successfully but we try to keep a tab a

00:28:33,239 --> 00:28:39,299
lid on the number of feature toggles by

00:28:35,879 --> 00:28:42,509
either forcing coercing the product

00:28:39,299 --> 00:28:44,429
owner to go live with a feature or pull

00:28:42,509 --> 00:28:46,229
everything back I mean if we're not

00:28:44,429 --> 00:28:48,809
going to put it live in two months and

00:28:46,229 --> 00:28:51,299
it's obviously ready then there's

00:28:48,809 --> 00:28:53,339
something else going on and this is debt

00:28:51,299 --> 00:28:54,990
that we then need to take back so we'll

00:28:53,339 --> 00:28:58,260
remove the feature talk line to call

00:28:54,990 --> 00:29:00,899
behind it well it's something that you

00:28:58,260 --> 00:29:02,370
need to be aware of now I've been

00:29:00,899 --> 00:29:06,240
talking about future branches and

00:29:02,370 --> 00:29:10,740
branches in general who here does code

00:29:06,240 --> 00:29:12,450
reviews using full requests yeah that's

00:29:10,740 --> 00:29:15,090
about what I would expect more than half

00:29:12,450 --> 00:29:19,320
of the audience now poor requests are

00:29:15,090 --> 00:29:22,470
are fine in principle if and to me only

00:29:19,320 --> 00:29:26,010
if the pull request is reviewed in time

00:29:22,470 --> 00:29:28,080
and what does enzyme mean within the

00:29:26,010 --> 00:29:31,799
same day as it is delivered essentially

00:29:28,080 --> 00:29:34,770
within a few hours max why because if

00:29:31,799 --> 00:29:37,080
you wait longer then it tends to turn

00:29:34,770 --> 00:29:38,340
into a long lived feature branch on its

00:29:37,080 --> 00:29:40,590
own and we're back to where we started

00:29:38,340 --> 00:29:43,620
we're back to square one we get merge

00:29:40,590 --> 00:29:45,799
conflicts again we get other things full

00:29:43,620 --> 00:29:48,720
requests on their own are fine

00:29:45,799 --> 00:29:50,580
again if you deal with it fast enough

00:29:48,720 --> 00:29:54,090
the problem with a pull request is that

00:29:50,580 --> 00:29:55,850
by their very nature you could end up

00:29:54,090 --> 00:29:58,380
pulling someone out of their flow

00:29:55,850 --> 00:30:00,510
they're working hard and pull request is

00:29:58,380 --> 00:30:02,730
made and then somebody needs to be

00:30:00,510 --> 00:30:03,929
reviewing that pull request even though

00:30:02,730 --> 00:30:05,610
they may have been doing something very

00:30:03,929 --> 00:30:07,679
important very critical at that point

00:30:05,610 --> 00:30:10,409
now there are a few ways around that but

00:30:07,679 --> 00:30:15,659
in general I think there are better ways

00:30:10,409 --> 00:30:19,500
and this is the better way ok maybe not

00:30:15,659 --> 00:30:22,049
like this maybe not like this but pair

00:30:19,500 --> 00:30:24,419
programming is essential pair

00:30:22,049 --> 00:30:24,890
programming leads to continuous there it

00:30:24,419 --> 00:30:28,380
is again

00:30:24,890 --> 00:30:31,140
inline code review rather than having

00:30:28,380 --> 00:30:33,570
someone develop and then someone at a

00:30:31,140 --> 00:30:37,200
later point in time review it we put two

00:30:33,570 --> 00:30:39,539
two people together and let them work on

00:30:37,200 --> 00:30:40,799
the feature together that way you get an

00:30:39,539 --> 00:30:42,690
immediate transfer of knowledge

00:30:40,799 --> 00:30:45,510
especially if you mix people with more

00:30:42,690 --> 00:30:47,669
experience and less experience or if you

00:30:45,510 --> 00:30:49,559
mix people that have didn't have

00:30:47,669 --> 00:30:52,649
knowledge of a certain system with

00:30:49,559 --> 00:30:55,380
people that don't yet ops people with

00:30:52,649 --> 00:30:57,539
deaf people very you get very

00:30:55,380 --> 00:31:00,029
interesting results and you can have

00:30:57,539 --> 00:31:02,340
autom automatic for high principle for

00:31:00,029 --> 00:31:04,889
those that are concerned with that it

00:31:02,340 --> 00:31:08,560
leads to significantly higher quality

00:31:04,889 --> 00:31:11,530
code it's not failsafe not

00:31:08,560 --> 00:31:13,750
but it definitely is better than putting

00:31:11,530 --> 00:31:17,590
people solo behind their monitor and

00:31:13,750 --> 00:31:19,330
then having to review after another

00:31:17,590 --> 00:31:23,380
thing the Boy Scout rule who is not

00:31:19,330 --> 00:31:26,070
familiar with the Boy Scout rule good

00:31:23,380 --> 00:31:29,590
the Boy Scout rule basically says if you

00:31:26,070 --> 00:31:31,410
get to a campsite leave the campsite in

00:31:29,590 --> 00:31:34,570
a better State and you found it

00:31:31,410 --> 00:31:36,820
translating to that to code if we see

00:31:34,570 --> 00:31:39,490
something that's small enough and easy

00:31:36,820 --> 00:31:41,830
enough to fix and by small enough I mean

00:31:39,490 --> 00:31:43,390
in the next 30 minutes or 60 minutes

00:31:41,830 --> 00:31:45,010
then do it

00:31:43,390 --> 00:31:47,110
there's no need to ask for permission

00:31:45,010 --> 00:31:49,570
there's no need to create a story or a

00:31:47,110 --> 00:31:52,480
ticket it's just part of your daily work

00:31:49,570 --> 00:31:54,970
if you don't you could end up with the

00:31:52,480 --> 00:31:57,070
broken window syndrome one window broken

00:31:54,970 --> 00:31:58,300
that is an attendant leads to another

00:31:57,070 --> 00:32:02,430
leads to another

00:31:58,300 --> 00:32:05,790
at which point people stop stop giving

00:32:02,430 --> 00:32:09,070
and you have the broken windows in them

00:32:05,790 --> 00:32:10,630
this leads to messy code leads to an

00:32:09,070 --> 00:32:13,240
application that nobody really cares

00:32:10,630 --> 00:32:15,820
about anymore Boy Scout rule Boy Scout

00:32:13,240 --> 00:32:18,970
rule leads to quality gates quality

00:32:15,820 --> 00:32:21,100
gates that are soft meaning they don't

00:32:18,970 --> 00:32:23,830
kill the build or fill the build if we

00:32:21,100 --> 00:32:26,050
exceed them and hard gates soft gates

00:32:23,830 --> 00:32:28,810
you can think of technical debt

00:32:26,050 --> 00:32:31,300
indicators duplication indicators think

00:32:28,810 --> 00:32:34,150
other metrics that a tool such as sonar

00:32:31,300 --> 00:32:36,040
would generate for example where you are

00:32:34,150 --> 00:32:38,110
mostly interested in the trend

00:32:36,040 --> 00:32:39,280
are we getting worse or better but

00:32:38,110 --> 00:32:42,490
you're not interested in the actual

00:32:39,280 --> 00:32:45,610
heart value one of them what we are

00:32:42,490 --> 00:32:54,520
interested in is I did I made the same

00:32:45,610 --> 00:32:57,580
type of oops 100% code coverage 100%

00:32:54,520 --> 00:33:02,680
code coverage is contentious hence the

00:32:57,580 --> 00:33:04,170
asterisk contentious because 100% code

00:33:02,680 --> 00:33:07,390
coverage on its own doesn't say anything

00:33:04,170 --> 00:33:10,420
what it does trigger a team whenever

00:33:07,390 --> 00:33:13,210
they go to 99.9 is have a discussion

00:33:10,420 --> 00:33:15,790
about whether they should or could

00:33:13,210 --> 00:33:18,610
ignore some trivial stub code or test

00:33:15,790 --> 00:33:22,390
code from the code coverage report in

00:33:18,610 --> 00:33:25,660
order to get to 100% if you have 80% as

00:33:22,390 --> 00:33:29,380
threshold as long as you're at 80 you're

00:33:25,660 --> 00:33:31,710
fine 100% at least allows you to have

00:33:29,380 --> 00:33:36,370
that discussion every time you bump into

00:33:31,710 --> 00:33:38,140
99.9 when it comes to compiled language

00:33:36,370 --> 00:33:40,390
I might be a little bit more flexible

00:33:38,140 --> 00:33:44,260
because there you have a compiler that

00:33:40,390 --> 00:33:47,230
helps you as an additional safety net if

00:33:44,260 --> 00:33:49,060
you remove a method generally a compiled

00:33:47,230 --> 00:33:52,570
language you will get a complaint from

00:33:49,060 --> 00:33:55,420
the compiler with interpreted languages

00:33:52,570 --> 00:33:57,940
such as PHP you probably generally need

00:33:55,420 --> 00:34:04,030
a test suite strong enough to catch that

00:33:57,940 --> 00:34:07,150
for you or the user will another

00:34:04,030 --> 00:34:08,890
contentious topic DevOps we tried to

00:34:07,150 --> 00:34:10,990
apply DevOps principles from the very

00:34:08,890 --> 00:34:13,240
early start and then it was still called

00:34:10,990 --> 00:34:15,070
what wasn't even called DevOps yet at

00:34:13,240 --> 00:34:19,060
this point we're starting to add words

00:34:15,070 --> 00:34:21,390
to it just because and we want to cram

00:34:19,060 --> 00:34:23,980
all those people into a single team I

00:34:21,390 --> 00:34:25,720
think this is the most important part

00:34:23,980 --> 00:34:28,149
sure other people can fit into the team

00:34:25,720 --> 00:34:31,419
as well well we'll accept them and not

00:34:28,149 --> 00:34:33,669
kick them out um but at least dev and

00:34:31,419 --> 00:34:38,260
ops need to be together in the same team

00:34:33,669 --> 00:34:40,840
why a team built something and building

00:34:38,260 --> 00:34:42,370
is easy building is easy running it

00:34:40,840 --> 00:34:45,550
that's where it starts to become

00:34:42,370 --> 00:34:48,149
challenging improving it oh my that's

00:34:45,550 --> 00:34:50,380
why it becomes even more interesting and

00:34:48,149 --> 00:34:52,149
essentially the team is responsible for

00:34:50,380 --> 00:34:54,520
all these things and you can only be

00:34:52,149 --> 00:34:56,350
responsible if you're empowered and you

00:34:54,520 --> 00:35:00,190
can only be empowered if you have all

00:34:56,350 --> 00:35:02,020
the ingredients on your team that means

00:35:00,190 --> 00:35:05,350
that developers yes they get called at

00:35:02,020 --> 00:35:06,910
night or could just as operational

00:35:05,350 --> 00:35:09,130
people right it's the team that gets

00:35:06,910 --> 00:35:11,200
paid it's a team that's responsible to

00:35:09,130 --> 00:35:13,540
keeping an app in production so the team

00:35:11,200 --> 00:35:16,000
gets paced when it fails we don't we

00:35:13,540 --> 00:35:17,590
don't at least not in my world we don't

00:35:16,000 --> 00:35:20,020
throw things over the wall anymore

00:35:17,590 --> 00:35:23,140
because if you throw things over the

00:35:20,020 --> 00:35:24,940
wall it never hurts all right the pain

00:35:23,140 --> 00:35:26,860
is it this is what the other people is

00:35:24,940 --> 00:35:28,300
with the other guys we don't feel the

00:35:26,860 --> 00:35:31,050
pain and if we don't feel the pain

00:35:28,300 --> 00:35:33,910
actors when we're not going to improve

00:35:31,050 --> 00:35:35,710
we're not feeling the pain and the only

00:35:33,910 --> 00:35:36,160
thing that will create and what it has

00:35:35,710 --> 00:35:38,920
create

00:35:36,160 --> 00:35:41,530
over the past decades is a giant rift

00:35:38,920 --> 00:35:44,069
between the people maintaining stuff and

00:35:41,530 --> 00:35:48,910
the people cranking cold out like it's

00:35:44,069 --> 00:35:52,119
like it's on sale and keeping those

00:35:48,910 --> 00:35:55,150
people together to me that is the

00:35:52,119 --> 00:35:57,039
absolute most important key thing to

00:35:55,150 --> 00:35:58,869
keeping a team responsible and to

00:35:57,039 --> 00:36:02,799
keeping stuff in production and running

00:35:58,869 --> 00:36:04,059
successfully right moving on to build

00:36:02,799 --> 00:36:06,609
pipelines I talked a little bit about

00:36:04,059 --> 00:36:09,130
pipelines in the context of what does CD

00:36:06,609 --> 00:36:10,960
now and what does CD mean exactly now

00:36:09,130 --> 00:36:13,089
let's put it all together

00:36:10,960 --> 00:36:15,520
a pipeline should automate everything

00:36:13,089 --> 00:36:18,490
that's repeatable because if you don't

00:36:15,520 --> 00:36:21,010
air start to occur give 10 people 10

00:36:18,490 --> 00:36:22,990
tasks and give the same 10 people the

00:36:21,010 --> 00:36:26,170
next day the same tank tasks you already

00:36:22,990 --> 00:36:27,579
see variations scripted tasks don't do

00:36:26,170 --> 00:36:30,250
that they do the same thing every time

00:36:27,579 --> 00:36:32,049
as long as there's power automate the

00:36:30,250 --> 00:36:34,720
repeatable things less mistakes

00:36:32,049 --> 00:36:37,869
Automation is key to CD and to DevOps by

00:36:34,720 --> 00:36:42,430
the way continuous there it is again

00:36:37,869 --> 00:36:43,779
testing very important continuous

00:36:42,430 --> 00:36:46,720
testing builds confidence build

00:36:43,779 --> 00:36:49,569
confidence that we what we put in

00:36:46,720 --> 00:36:52,390
production is going to sort of work

00:36:49,569 --> 00:36:54,549
usually is going to with a fair amount

00:36:52,390 --> 00:36:57,309
of confidence with a fair degree of

00:36:54,549 --> 00:37:00,910
confidence we can say okay what what we

00:36:57,309 --> 00:37:05,230
do now is going to be tested well enough

00:37:00,910 --> 00:37:11,260
that we can rely on it I like to think

00:37:05,230 --> 00:37:13,779
of testing to be in depth and some may

00:37:11,260 --> 00:37:17,020
disagree with that but hear me out

00:37:13,779 --> 00:37:19,450
unit tests is where we start our layers

00:37:17,020 --> 00:37:22,089
of defense unit tests where we test

00:37:19,450 --> 00:37:24,279
simple classes and we mock using

00:37:22,089 --> 00:37:26,529
prophecy or mockery or something like

00:37:24,279 --> 00:37:28,960
that to to mock out the entire world

00:37:26,529 --> 00:37:30,490
around the class to be very controlled

00:37:28,960 --> 00:37:34,660
about what it sees and what it doesn't

00:37:30,490 --> 00:37:36,339
and our tests are very fast then we bump

00:37:34,660 --> 00:37:38,380
up to integration tests where we

00:37:36,339 --> 00:37:40,029
actually test components rather than

00:37:38,380 --> 00:37:43,510
individual classes we may even use

00:37:40,029 --> 00:37:45,880
concrete data storage concrete databases

00:37:43,510 --> 00:37:47,799
with fixture data in there so then we

00:37:45,880 --> 00:37:49,380
know what to expect we have control over

00:37:47,799 --> 00:37:52,080
that data

00:37:49,380 --> 00:37:56,550
third step acceptance tests is where we

00:37:52,080 --> 00:37:59,430
actually have plain English stories we

00:37:56,550 --> 00:38:02,610
have acceptance criteria examples edge

00:37:59,430 --> 00:38:05,610
cases written well as plain English and

00:38:02,610 --> 00:38:07,920
we can convert those using behalf for

00:38:05,610 --> 00:38:10,470
example into actual runnable code that

00:38:07,920 --> 00:38:13,620
verifies our system continuously and we

00:38:10,470 --> 00:38:17,330
can talk about the functionality without

00:38:13,620 --> 00:38:21,000
going into implementation details last

00:38:17,330 --> 00:38:24,630
selenium Cyprus all the tools that you

00:38:21,000 --> 00:38:26,640
use to actually do UI tests yes they can

00:38:24,630 --> 00:38:28,620
be slow they can be quirky and somewhat

00:38:26,640 --> 00:38:31,920
fragile so we probably want to keep a

00:38:28,620 --> 00:38:34,050
limited set of those but maybe you flew

00:38:31,920 --> 00:38:36,660
a few paths through the code maybe a few

00:38:34,050 --> 00:38:39,660
a few critical flows we want to test

00:38:36,660 --> 00:38:41,490
using something like selenium that could

00:38:39,660 --> 00:38:43,410
lead to something called the testing

00:38:41,490 --> 00:38:45,900
pyramid this is just one configuration

00:38:43,410 --> 00:38:47,490
of the testing pyramid and at the bottom

00:38:45,900 --> 00:38:49,290
we have the unit test we have a lot of

00:38:47,490 --> 00:38:51,720
them because they are cheap and fast or

00:38:49,290 --> 00:38:54,450
they should be integration tests are

00:38:51,720 --> 00:38:56,940
slower and more expensive in general as

00:38:54,450 --> 00:38:59,480
we go up the pyramid our tests become

00:38:56,940 --> 00:39:02,070
more costly more expensive and slower

00:38:59,480 --> 00:39:04,380
note the two little clouds there

00:39:02,070 --> 00:39:06,980
exploratory testing and monitoring

00:39:04,380 --> 00:39:11,580
exploratory testing is something the QA

00:39:06,980 --> 00:39:14,520
people on our team do on their own they

00:39:11,580 --> 00:39:16,560
use production to verify that the most

00:39:14,520 --> 00:39:18,950
critical parts of our application are

00:39:16,560 --> 00:39:22,110
still working as they should

00:39:18,950 --> 00:39:24,030
QA people have have a knack for finding

00:39:22,110 --> 00:39:26,760
out edge cases and finding out weird

00:39:24,030 --> 00:39:28,080
parts of the system and so they are in a

00:39:26,760 --> 00:39:30,090
very good position to do that

00:39:28,080 --> 00:39:33,170
exploratory testing and that can lead to

00:39:30,090 --> 00:39:36,690
other tests or changing existing tests

00:39:33,170 --> 00:39:38,660
monitoring an oft overlooked but key key

00:39:36,690 --> 00:39:41,070
key part of continuous deployment and

00:39:38,660 --> 00:39:43,590
continuous testing because not

00:39:41,070 --> 00:39:46,710
everything can be caught during a

00:39:43,590 --> 00:39:49,050
testing run some errors only occur after

00:39:46,710 --> 00:39:51,390
a few hours or under extreme load or at

00:39:49,050 --> 00:39:53,070
certain parts of the day and arch

00:39:51,390 --> 00:39:56,340
monitoring should be able to catch that

00:39:53,070 --> 00:39:58,530
should catch that our testing may not so

00:39:56,340 --> 00:40:01,180
monitoring is the last step essentially

00:39:58,530 --> 00:40:03,849
in the testing framework

00:40:01,180 --> 00:40:08,829
now when it comes to testing good enough

00:40:03,849 --> 00:40:10,799
is good enough and with good enough I

00:40:08,829 --> 00:40:12,940
mean we deploy to production

00:40:10,799 --> 00:40:17,200
continuously so there needs to be some

00:40:12,940 --> 00:40:18,579
degree of confidence in what we do but

00:40:17,200 --> 00:40:22,720
it doesn't have to be perfect nothing

00:40:18,579 --> 00:40:25,180
ever is and we rely on other tools maybe

00:40:22,720 --> 00:40:28,000
even better testing programs or feedback

00:40:25,180 --> 00:40:30,369
forms on the site to inform us when

00:40:28,000 --> 00:40:33,160
certain parts are not working as well as

00:40:30,369 --> 00:40:35,349
they should good enough also means that

00:40:33,160 --> 00:40:37,450
we keep the pipeline speed under control

00:40:35,349 --> 00:40:39,010
if you keep adding tests and adding

00:40:37,450 --> 00:40:40,900
tests pretty soon you're at a pipeline

00:40:39,010 --> 00:40:43,210
that runs three hours and at which point

00:40:40,900 --> 00:40:45,010
you can no longer trust it anymore so

00:40:43,210 --> 00:40:47,230
there needs to be a balance a trade-off

00:40:45,010 --> 00:40:51,539
between the amount of tests and the time

00:40:47,230 --> 00:40:54,400
that they take running all that together

00:40:51,539 --> 00:40:57,700
we can come up with something like this

00:40:54,400 --> 00:40:59,890
this is called pipeline is code this is

00:40:57,700 --> 00:41:02,589
a thing you can do in recent Jenkins

00:40:59,890 --> 00:41:04,539
installations and what we say here is

00:41:02,589 --> 00:41:06,670
that we have four stages we run our

00:41:04,539 --> 00:41:08,230
tests build the docker image deployed up

00:41:06,670 --> 00:41:11,079
image to acceptance and then to

00:41:08,230 --> 00:41:13,000
production the stages are linear or

00:41:11,079 --> 00:41:15,430
sequential if one of them were to fail

00:41:13,000 --> 00:41:17,140
all the subsequent stages don't execute

00:41:15,430 --> 00:41:21,760
any more the build has failed right the

00:41:17,140 --> 00:41:25,569
build is red this is ansible code inside

00:41:21,760 --> 00:41:27,520
Jenkins code and well the deployment

00:41:25,569 --> 00:41:29,319
then could look something like this this

00:41:27,520 --> 00:41:31,569
is only one way of deploying things this

00:41:29,319 --> 00:41:35,200
is what they call a rolling update there

00:41:31,569 --> 00:41:38,079
are other ways of deploying you have

00:41:35,200 --> 00:41:39,849
canary releases Bluegreen deployments

00:41:38,079 --> 00:41:42,309
stuff like that if you want to talk

00:41:39,849 --> 00:41:44,410
about that come see me after but this is

00:41:42,309 --> 00:41:46,690
only one example this is a rolling

00:41:44,410 --> 00:41:49,450
update a rolling update in our context

00:41:46,690 --> 00:41:51,130
means on a machine we do a docker pool

00:41:49,450 --> 00:41:53,950
first to get the new docker image that

00:41:51,130 --> 00:41:55,900
we just created in the pipeline we then

00:41:53,950 --> 00:41:59,380
start a new container using that image

00:41:55,900 --> 00:42:01,809
and we then wait for it to come up

00:41:59,380 --> 00:42:03,849
remember everything is a service in in

00:42:01,809 --> 00:42:06,309
our architecture so it every service

00:42:03,849 --> 00:42:09,490
exposes a port and we wait for that port

00:42:06,309 --> 00:42:10,990
to come up when the port comes up we run

00:42:09,490 --> 00:42:13,359
something called the smoke test or the

00:42:10,990 --> 00:42:14,700
health check we verify that what we just

00:42:13,359 --> 00:42:17,760
deployed

00:42:14,700 --> 00:42:20,070
works that it responds to our queries in

00:42:17,760 --> 00:42:22,290
the way that we expect it to here we

00:42:20,070 --> 00:42:25,980
just invoke a health endpoint and we

00:42:22,290 --> 00:42:28,170
expect it to return the 200 if it does

00:42:25,980 --> 00:42:30,710
we add that container to our load

00:42:28,170 --> 00:42:33,390
balancer which in this case is H a proxy

00:42:30,710 --> 00:42:36,210
we add that container to the load

00:42:33,390 --> 00:42:38,100
balancer it starts to receive traffic we

00:42:36,210 --> 00:42:39,720
then remove one of the old containers

00:42:38,100 --> 00:42:41,430
from the load balancer by all the mean

00:42:39,720 --> 00:42:45,090
from the previous build the previous

00:42:41,430 --> 00:42:47,370
generation we stop that and we removed

00:42:45,090 --> 00:42:50,820
on now generally if something were to

00:42:47,370 --> 00:42:53,250
fail here it would fail here typically

00:42:50,820 --> 00:42:55,020
on the first container the smoke test

00:42:53,250 --> 00:42:57,780
would fail because the surface crashed

00:42:55,020 --> 00:43:01,640
or it's not booting correctly whatever

00:42:57,780 --> 00:43:05,250
so the smoke test fails gives a 500 and

00:43:01,640 --> 00:43:07,170
essentially our pipeline stops there's

00:43:05,250 --> 00:43:09,780
not that no harm done because we still

00:43:07,170 --> 00:43:11,790
have a full amount of replicas from the

00:43:09,780 --> 00:43:14,190
old build running so we can still handle

00:43:11,790 --> 00:43:15,960
all the traffic that we want yes there's

00:43:14,190 --> 00:43:18,300
one caveat if the second deployment

00:43:15,960 --> 00:43:20,580
fails then yes we have replaced one

00:43:18,300 --> 00:43:22,470
already but generally we saw this when

00:43:20,580 --> 00:43:27,060
we saw this go wrong it was on the first

00:43:22,470 --> 00:43:29,430
deployment of the series now if it all

00:43:27,060 --> 00:43:32,760
fails then we want feedback immediate

00:43:29,430 --> 00:43:35,400
feedback feedback in the form of a build

00:43:32,760 --> 00:43:37,920
display such as this where we can see

00:43:35,400 --> 00:43:39,780
how long the individual stages take and

00:43:37,920 --> 00:43:43,500
whether one of the builds is red or

00:43:39,780 --> 00:43:45,600
green this is from Jenkins as well if

00:43:43,500 --> 00:43:46,050
the build is red we want to know about

00:43:45,600 --> 00:43:50,460
it

00:43:46,050 --> 00:43:52,170
the siren of shame which is an LED lamp

00:43:50,460 --> 00:43:54,660
and a speaker attached to it and

00:43:52,170 --> 00:43:57,230
basically the thing starts flashing and

00:43:54,660 --> 00:44:00,930
making noise whenever it built brakes

00:43:57,230 --> 00:44:02,970
this is not to annoy people or blame

00:44:00,930 --> 00:44:04,620
people this is to trigger a team to

00:44:02,970 --> 00:44:07,550
respect their pipeline respect they're

00:44:04,620 --> 00:44:10,260
built because in continuous deployment

00:44:07,550 --> 00:44:12,420
we have a pipeline and that's our

00:44:10,260 --> 00:44:14,130
lifeline essentially that's what we use

00:44:12,420 --> 00:44:16,170
to deploy stuff to production we don't

00:44:14,130 --> 00:44:17,850
do manual deploys anymore so if the

00:44:16,170 --> 00:44:20,820
pipeline breaks that's an immediate

00:44:17,850 --> 00:44:23,370
priority thing to work on you can also

00:44:20,820 --> 00:44:26,280
notify slack or HipChat or other tools

00:44:23,370 --> 00:44:28,480
that you have maybe even text your phone

00:44:26,280 --> 00:44:32,700
whatever as long as people are know

00:44:28,480 --> 00:44:32,700
fight that the bill broke very important

00:44:33,840 --> 00:44:42,790
last but not least results initially the

00:44:40,030 --> 00:44:45,520
team some of the people on the team had

00:44:42,790 --> 00:44:47,050
a little bit of trouble accepting this

00:44:45,520 --> 00:44:48,670
whole new wave working which is not

00:44:47,050 --> 00:44:52,810
completely unexpected they've been doing

00:44:48,670 --> 00:44:54,580
this for quite a long while and income a

00:44:52,810 --> 00:44:55,930
few consultants saying that they can do

00:44:54,580 --> 00:44:58,990
better

00:44:55,930 --> 00:45:01,750
luckily they found out after well not

00:44:58,990 --> 00:45:04,750
that long amount of time that this was

00:45:01,750 --> 00:45:06,790
empowering them to do more and it was

00:45:04,750 --> 00:45:09,010
empowering to do so much more that they

00:45:06,790 --> 00:45:11,650
started repairing the rift between them

00:45:09,010 --> 00:45:15,490
and the business which is valuable which

00:45:11,650 --> 00:45:18,700
is great that means that you that no

00:45:15,490 --> 00:45:20,170
longer it is a business people and the

00:45:18,700 --> 00:45:21,970
business would be an develop the people

00:45:20,170 --> 00:45:25,780
we can never ever get anything delivered

00:45:21,970 --> 00:45:30,490
it's never on time never works well it's

00:45:25,780 --> 00:45:34,330
always and this helps new technology was

00:45:30,490 --> 00:45:36,490
a theme we introduced elasticsearch and

00:45:34,330 --> 00:45:38,470
and other tools that not everybody had

00:45:36,490 --> 00:45:42,190
as much experience with luckily pair

00:45:38,470 --> 00:45:44,310
programming helped us a lot to transfer

00:45:42,190 --> 00:45:47,710
that knowledge from person to person I

00:45:44,310 --> 00:45:50,470
said that we got into production on

00:45:47,710 --> 00:45:53,350
docker 0.6 so we had a few stability

00:45:50,470 --> 00:45:55,300
issues here and there we were kind of

00:45:53,350 --> 00:45:57,670
banking on the speed of docker

00:45:55,300 --> 00:45:59,230
development and luckily we were proven

00:45:57,670 --> 00:46:03,040
right otherwise it would have told a

00:45:59,230 --> 00:46:04,600
very different story today but we had a

00:46:03,040 --> 00:46:06,790
few issues but in general they were

00:46:04,600 --> 00:46:09,640
fixed relatively quickly pipeline

00:46:06,790 --> 00:46:13,630
stability another thing we had issues

00:46:09,640 --> 00:46:16,420
with NPM who hasn't we had issues with

00:46:13,630 --> 00:46:19,210
all sorts of other tools network links

00:46:16,420 --> 00:46:21,970
breaking stuff like that that can get

00:46:19,210 --> 00:46:24,130
annoying sometimes if you awesome NPM

00:46:21,970 --> 00:46:26,800
breaking is something you don't always

00:46:24,130 --> 00:46:28,900
have complete control over feature

00:46:26,800 --> 00:46:30,700
toggle cap I told you about the feature

00:46:28,900 --> 00:46:33,730
toggle debt that you need to be aware of

00:46:30,700 --> 00:46:37,540
we weren't always completely on the ball

00:46:33,730 --> 00:46:40,150
their business alignment if you start

00:46:37,540 --> 00:46:42,339
moving this fast then the business needs

00:46:40,150 --> 00:46:44,680
to think of things in this way as

00:46:42,339 --> 00:46:46,630
it's not going to take three months for

00:46:44,680 --> 00:46:49,420
a feature to be delivered anymore so if

00:46:46,630 --> 00:46:52,089
they rely on marketing materials to be

00:46:49,420 --> 00:46:54,729
ordered for example posters or contracts

00:46:52,089 --> 00:46:58,930
with other suppliers they need to be far

00:46:54,729 --> 00:47:01,719
more just in time they don't have three

00:46:58,930 --> 00:47:04,359
months to get that done if they enjoy a

00:47:01,719 --> 00:47:06,189
feature into the backlog then basically

00:47:04,359 --> 00:47:08,619
half a week or two weeks later it was

00:47:06,189 --> 00:47:10,390
done something like that triggers the

00:47:08,619 --> 00:47:13,180
business to think about things in a

00:47:10,390 --> 00:47:15,459
little bit different way last but not

00:47:13,180 --> 00:47:16,509
least and when it comes to things that

00:47:15,459 --> 00:47:18,009
didn't go so well

00:47:16,509 --> 00:47:20,410
the legacy application is still in

00:47:18,009 --> 00:47:23,380
production at this point for about 20%

00:47:20,410 --> 00:47:25,209
but even then what when Wright built

00:47:23,380 --> 00:47:27,420
time for service under ten minutes from

00:47:25,209 --> 00:47:31,329
the very check-in to the last deployed

00:47:27,420 --> 00:47:33,630
50-plus deployments per day reduced the

00:47:31,329 --> 00:47:35,859
number of issues significantly and

00:47:33,630 --> 00:47:38,499
improved the page load times by a factor

00:47:35,859 --> 00:47:40,930
of 10 or better so our page loads all of

00:47:38,499 --> 00:47:44,439
a second sudden we're under 1/2 a second

00:47:40,930 --> 00:47:46,390
rather than above 5 improved metrics and

00:47:44,439 --> 00:47:49,509
audience statistics probably because of

00:47:46,390 --> 00:47:51,609
that as well learning new technology

00:47:49,509 --> 00:47:53,650
very important part when it comes to

00:47:51,609 --> 00:47:57,489
motivation but also marketability of

00:47:53,650 --> 00:47:59,799
developers usefulness and at the end

00:47:57,489 --> 00:48:01,660
everybody had a lot more confidence in

00:47:59,799 --> 00:48:03,309
what they were doing which showed in the

00:48:01,660 --> 00:48:05,859
velocity that the team had but in

00:48:03,309 --> 00:48:07,539
general most important the fun that they

00:48:05,859 --> 00:48:09,189
had all right

00:48:07,539 --> 00:48:12,189
leaving you with some literature that

00:48:09,189 --> 00:48:14,739
you might want to read on continuous

00:48:12,189 --> 00:48:16,779
delivery the Bible by Jess Farley Dave

00:48:14,739 --> 00:48:19,689
Farley and Jess humble building

00:48:16,779 --> 00:48:22,059
microservices by Sam Newman also

00:48:19,689 --> 00:48:25,299
includes chapter on why when not to

00:48:22,059 --> 00:48:27,459
build microservices built quality in is

00:48:25,299 --> 00:48:29,079
a very interesting book by Steve Smith

00:48:27,459 --> 00:48:31,809
and Matt Skelton where they detail about

00:48:29,079 --> 00:48:35,349
20 projects where they implemented C D

00:48:31,809 --> 00:48:39,309
and DevOps alright I think it's time for

00:48:35,349 --> 00:48:42,959
questions is if anybody has one I'm sure

00:48:39,309 --> 00:48:42,959
there are a few yes sir

00:48:44,210 --> 00:48:49,400
I was hoping somebody would ask that

00:48:47,510 --> 00:48:51,410
database changes in continuous

00:48:49,400 --> 00:48:53,810
deployment they don't actually have much

00:48:51,410 --> 00:48:57,740
to do with continuous deployment but

00:48:53,810 --> 00:49:00,380
rather zero downtime deployment the way

00:48:57,740 --> 00:49:02,660
I would do that is apply the expand

00:49:00,380 --> 00:49:04,849
contract pattern and what that means is

00:49:02,660 --> 00:49:06,589
that if you want to rename a column for

00:49:04,849 --> 00:49:08,420
example in your database table then

00:49:06,589 --> 00:49:09,680
rather than renaming the column we add

00:49:08,420 --> 00:49:12,500
one with the new name

00:49:09,680 --> 00:49:15,200
that's our expand we then write some

00:49:12,500 --> 00:49:17,390
code that starts filling that column and

00:49:15,200 --> 00:49:19,760
then write code that starts reading the

00:49:17,390 --> 00:49:22,580
column at which point we can safely

00:49:19,760 --> 00:49:24,589
delete the outcome so database changes

00:49:22,580 --> 00:49:26,480
when you don't want to incur downtime

00:49:24,589 --> 00:49:29,240
you can only do backwards-compatible

00:49:26,480 --> 00:49:31,160
changes so only adding stuff not

00:49:29,240 --> 00:49:34,099
deleting or renaming well renaming is a

00:49:31,160 --> 00:49:35,930
delete essentially right so that's the

00:49:34,099 --> 00:49:37,700
only way in my book that that can go do

00:49:35,930 --> 00:49:40,849
you expand and then contract so you

00:49:37,700 --> 00:49:42,740
expand your data and then you use that

00:49:40,849 --> 00:49:44,480
new data at which point the old data

00:49:42,740 --> 00:49:46,609
becomes obsolete and then you can

00:49:44,480 --> 00:49:49,849
contract again you can remove the old

00:49:46,609 --> 00:49:50,510
code and the old data does that answer

00:49:49,849 --> 00:49:53,300
your question

00:49:50,510 --> 00:49:57,619
awesome I saw one here I think same

00:49:53,300 --> 00:49:59,920
question good any other questions in the

00:49:57,619 --> 00:49:59,920
back there

00:50:10,950 --> 00:50:16,600
good question so the question is if you

00:50:13,390 --> 00:50:19,180
add a new service and the service reads

00:50:16,600 --> 00:50:20,770
or writes from existing data and also

00:50:19,180 --> 00:50:22,060
writes from new data how do you keep the

00:50:20,770 --> 00:50:25,270
stuff in sync that's pretty much what

00:50:22,060 --> 00:50:27,370
you ask right yeah well at some point

00:50:25,270 --> 00:50:30,880
you have to going to decide who owns the

00:50:27,370 --> 00:50:34,530
data so we had a transitional period

00:50:30,880 --> 00:50:37,360
where for example job seeker profiles to

00:50:34,530 --> 00:50:40,180
code for that writing that that database

00:50:37,360 --> 00:50:42,970
was still in the old application and we

00:50:40,180 --> 00:50:45,610
read from that through through a pipe

00:50:42,970 --> 00:50:47,470
essentially and at some point so that

00:50:45,610 --> 00:50:49,090
means that the control over the data was

00:50:47,470 --> 00:50:51,120
still in the old application and we were

00:50:49,090 --> 00:50:53,440
only reading from it not writing and

00:50:51,120 --> 00:50:56,410
then at some point you reverse that

00:50:53,440 --> 00:50:57,040
control and the old application turns to

00:50:56,410 --> 00:51:00,250
read-only

00:50:57,040 --> 00:51:01,500
it can never be right and right on both

00:51:00,250 --> 00:51:06,550
sides because that would lead to

00:51:01,500 --> 00:51:11,020
nightmares all across so it means that

00:51:06,550 --> 00:51:13,150
you need a little bit more of a little

00:51:11,020 --> 00:51:15,970
bit more of design probably or strategy

00:51:13,150 --> 00:51:19,600
or thinking about it maybe a few extra

00:51:15,970 --> 00:51:22,060
steps but it can never occurred at

00:51:19,600 --> 00:51:23,380
service and an old application right to

00:51:22,060 --> 00:51:25,210
the same database at the same time

00:51:23,380 --> 00:51:27,760
because then you're going to I can

00:51:25,210 --> 00:51:38,280
guarantee you inconsistencies does that

00:51:27,760 --> 00:51:38,280
answer the question yeah yeah

00:51:46,060 --> 00:51:50,260
yep pretty much so the new database is

00:51:48,310 --> 00:51:52,900
essentially a projection of the old

00:51:50,260 --> 00:51:55,590
database right so it's a copy and a

00:51:52,900 --> 00:51:59,650
mapping together of the existing data

00:51:55,590 --> 00:52:02,020
but it's not the master data so if we

00:51:59,650 --> 00:52:03,370
cannot change that projection what we

00:52:02,020 --> 00:52:05,050
could but that would make it

00:52:03,370 --> 00:52:08,170
inconsistent and it would not change the

00:52:05,050 --> 00:52:10,690
original data so it's only it's it's it

00:52:08,170 --> 00:52:12,670
could be a few or you know that that

00:52:10,690 --> 00:52:16,230
would translate roughly to what it what

00:52:12,670 --> 00:52:18,520
it could be but you don't want to

00:52:16,230 --> 00:52:23,310
directly change the master data in that

00:52:18,520 --> 00:52:25,840
case all right any other questions okay

00:52:23,310 --> 00:52:28,480
if you do think of another question

00:52:25,840 --> 00:52:32,530
later on I'll be here the rest of the

00:52:28,480 --> 00:52:35,290
day so please come and see me or hit me

00:52:32,530 --> 00:52:37,450
up on Twitter or on me my email my blog

00:52:35,290 --> 00:52:39,160
is there as well I blog about this thing

00:52:37,450 --> 00:52:41,080
and about event sourcing and other

00:52:39,160 --> 00:52:42,650
topics as well thank you so much for

00:52:41,080 --> 00:52:44,740
attention you have a nice day

00:52:42,650 --> 00:52:49,699
[Applause]

00:52:44,740 --> 00:52:49,699

YouTube URL: https://www.youtube.com/watch?v=W5KX99sOrXE


