Title: Understanding the Container Revolution | Robert Lemke | IPC Spring 2017
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2017
Description: 
	Robert Lemke (Flownative GmbH): Everyone is talking about containers; or more specifically: Docker. But even though Docker has much credit in bringing containers to our attention and shaping the ecosystem to use them, container technology has been there for decades. So, what’s the deal with containers? Should I even care? And what’s beyond Docker and containers?
Captions: 
	00:00:03,180 --> 00:00:09,300
[Music]

00:00:05,750 --> 00:00:12,300
yes thanks for staying here my

00:00:09,300 --> 00:00:16,440
hand-picked audience this late evening

00:00:12,300 --> 00:00:19,590
so I called this talk understanding the

00:00:16,440 --> 00:00:20,900
container revolution and obviously it

00:00:19,590 --> 00:00:24,060
didn't scare you off completely

00:00:20,900 --> 00:00:25,230
originally probably the the better title

00:00:24,060 --> 00:00:28,230
would have been getting a rough idea

00:00:25,230 --> 00:00:31,080
about understanding what the container

00:00:28,230 --> 00:00:32,790
revolution could mean for you you your

00:00:31,080 --> 00:00:37,649
colleagues and your projects but that

00:00:32,790 --> 00:00:43,140
was a bit too badly for the call for

00:00:37,649 --> 00:00:46,590
papers too so yeah I am Robert by the

00:00:43,140 --> 00:00:49,649
way Robert Lemke from a flow native and

00:00:46,590 --> 00:00:52,949
we are little company doing consultancy

00:00:49,649 --> 00:00:56,250
for some open source content management

00:00:52,949 --> 00:01:01,590
system called Nia's just out of interest

00:00:56,250 --> 00:01:03,270
who knows Neos yeah so you you are here

00:01:01,590 --> 00:01:08,220
at the conference more frequently that's

00:01:03,270 --> 00:01:11,549
very nice but how does that make me some

00:01:08,220 --> 00:01:13,760
kind of cloud expert well during the

00:01:11,549 --> 00:01:16,560
last two and a half years I've been

00:01:13,760 --> 00:01:19,229
working on a platform as a service for

00:01:16,560 --> 00:01:23,100
Neos which is not launched yet so this

00:01:19,229 --> 00:01:25,740
is kind of secret but still if you're

00:01:23,100 --> 00:01:29,640
interested you can ask me all about it

00:01:25,740 --> 00:01:31,740
but that's the reason why I dealt a lot

00:01:29,640 --> 00:01:33,600
with containers and what you need to do

00:01:31,740 --> 00:01:38,189
with containers to get everything nicely

00:01:33,600 --> 00:01:39,659
running so I am not affiliated with any

00:01:38,189 --> 00:01:42,570
of the companies I'm going to mention

00:01:39,659 --> 00:01:45,390
all the projects or whatever I'm just a

00:01:42,570 --> 00:01:49,049
container user but I'm so passionate

00:01:45,390 --> 00:01:52,229
about this topic and about the impact I

00:01:49,049 --> 00:01:55,829
think it will have that I decide to give

00:01:52,229 --> 00:02:01,140
this talk to you all right so before I

00:01:55,829 --> 00:02:03,930
start I'd like to ask you just very few

00:02:01,140 --> 00:02:06,899
questions and some non artificial

00:02:03,930 --> 00:02:09,509
intelligence will form through some non

00:02:06,899 --> 00:02:13,380
automatic process some modification of

00:02:09,509 --> 00:02:16,080
my talk to tailor it directly to you so

00:02:13,380 --> 00:02:20,730
who's using docker already for

00:02:16,080 --> 00:02:22,560
development kind of okay and in

00:02:20,730 --> 00:02:25,740
production so running your application

00:02:22,560 --> 00:02:29,340
of web server service oh wow awesome and

00:02:25,740 --> 00:02:33,090
I won't ask about the the FTP question

00:02:29,340 --> 00:02:35,690
but yeah we'll get into that let's start

00:02:33,090 --> 00:02:40,380
with a very brief history about

00:02:35,690 --> 00:02:41,850
containerization not just because you

00:02:40,380 --> 00:02:43,800
know when you talk about containers you

00:02:41,850 --> 00:02:47,640
look it up and then talk about the

00:02:43,800 --> 00:02:50,280
history but because there is really some

00:02:47,640 --> 00:02:54,270
parallel to what is currently happening

00:02:50,280 --> 00:02:56,880
with containers in software so while we

00:02:54,270 --> 00:03:00,600
look at it try to keep in mind like or

00:02:56,880 --> 00:03:03,120
try to imagine how the parallel could be

00:03:00,600 --> 00:03:08,400
to software so in your company in your

00:03:03,120 --> 00:03:13,740
project is there any parallel so it all

00:03:08,400 --> 00:03:17,250
started like before during World War two

00:03:13,740 --> 00:03:20,700
people were still shipping goods with

00:03:17,250 --> 00:03:23,730
something called breakbulk shipping so

00:03:20,700 --> 00:03:26,280
they were have all kinds of mixed cargo

00:03:23,730 --> 00:03:29,780
they had to load and unload to ships and

00:03:26,280 --> 00:03:32,370
of course that took quite some time to

00:03:29,780 --> 00:03:35,010
prepare and they needed warehouses and

00:03:32,370 --> 00:03:38,400
everything so they were always looking

00:03:35,010 --> 00:03:41,250
for some more efficient way to load

00:03:38,400 --> 00:03:45,170
their cargo but also to transport it to

00:03:41,250 --> 00:03:49,230
the ships and from the ships and then in

00:03:45,170 --> 00:03:52,410
around the 1930s the first containers

00:03:49,230 --> 00:03:55,920
came up which were basically boxes or

00:03:52,410 --> 00:03:59,190
even steel boxes of some sort but there

00:03:55,920 --> 00:04:01,650
were no real standards so imagine you're

00:03:59,190 --> 00:04:04,140
a big company need to transport stuff

00:04:01,650 --> 00:04:06,150
then your company would build these

00:04:04,140 --> 00:04:10,740
containers and make sure that they can

00:04:06,150 --> 00:04:15,570
be loaded on on your train vehicles and

00:04:10,740 --> 00:04:18,989
so on so but the important bit was the

00:04:15,570 --> 00:04:22,650
standardization of containers and that

00:04:18,989 --> 00:04:25,050
happened in 1968 when there was the

00:04:22,650 --> 00:04:26,500
first ISO standard for which describe

00:04:25,050 --> 00:04:29,430
the dimensions

00:04:26,500 --> 00:04:34,090
and the weight class is for containers

00:04:29,430 --> 00:04:37,990
so this is a 20 foot equivalent unit

00:04:34,090 --> 00:04:41,800
container and that is also how cargo is

00:04:37,990 --> 00:04:44,740
measured and that made a huge impact

00:04:41,800 --> 00:04:47,260
because when you standardize how

00:04:44,740 --> 00:04:49,870
containers look like and where holes are

00:04:47,260 --> 00:04:53,710
and how it is fixed and everything you

00:04:49,870 --> 00:04:56,380
can create specific vehicles and

00:04:53,710 --> 00:04:59,500
purpose-built skips ships and other

00:04:56,380 --> 00:05:01,480
infrastructure for these containers so

00:04:59,500 --> 00:05:04,690
you can imagine that for a company

00:05:01,480 --> 00:05:06,460
shipping goods that means that you don't

00:05:04,690 --> 00:05:09,340
have to take care about the whole

00:05:06,460 --> 00:05:11,110
shipping like from end to end but you

00:05:09,340 --> 00:05:13,030
can work with different companies and

00:05:11,110 --> 00:05:18,820
it's much more easy to transport your

00:05:13,030 --> 00:05:22,450
goods anyway it also had some some

00:05:18,820 --> 00:05:24,820
unexpected benefits for example the

00:05:22,450 --> 00:05:25,900
reliability of shipping goods was much

00:05:24,820 --> 00:05:29,560
better than before

00:05:25,900 --> 00:05:31,540
so manufacturing could actually do

00:05:29,560 --> 00:05:33,729
just-in-time manufacturing they could

00:05:31,540 --> 00:05:36,160
count on certain Goods to arrive at a

00:05:33,729 --> 00:05:39,280
certain point because everything was

00:05:36,160 --> 00:05:43,410
much more streamlined and also the

00:05:39,280 --> 00:05:46,300
losses of goods due to theft and so on

00:05:43,410 --> 00:05:48,790
declined a lot because goods were not

00:05:46,300 --> 00:05:53,410
visible from outside anymore so for

00:05:48,790 --> 00:05:54,729
whoever was shipping containers they

00:05:53,410 --> 00:05:56,800
didn't know if that was something

00:05:54,729 --> 00:06:00,550
valuable or not inside these containers

00:05:56,800 --> 00:06:03,400
I don't know if you found a few

00:06:00,550 --> 00:06:06,990
parallels already like this could be

00:06:03,400 --> 00:06:11,410
about security in software containers

00:06:06,990 --> 00:06:14,350
but also around the actual shipping some

00:06:11,410 --> 00:06:16,020
some further industries evolved for

00:06:14,350 --> 00:06:20,250
example there's a whole industry about

00:06:16,020 --> 00:06:23,830
repositioning empty containers because

00:06:20,250 --> 00:06:26,860
we're full containers are unloaded then

00:06:23,830 --> 00:06:31,690
they usually don't need empty containers

00:06:26,860 --> 00:06:33,640
in the same amount and certainly also

00:06:31,690 --> 00:06:36,610
for the people working in the whole

00:06:33,640 --> 00:06:39,460
industry shipping industry this changed

00:06:36,610 --> 00:06:42,300
dramatically over only very few years

00:06:39,460 --> 00:06:43,810
so 19 out of 20 longshoremen were

00:06:42,300 --> 00:06:49,210
unnecessary

00:06:43,810 --> 00:06:52,660
when Contin containerization got got its

00:06:49,210 --> 00:06:55,900
impact it also had some some quite some

00:06:52,660 --> 00:06:59,800
impact on semi skilled or skilled people

00:06:55,900 --> 00:07:03,400
labor craft who only was specialized on

00:06:59,800 --> 00:07:09,759
very specific things very specific tasks

00:07:03,400 --> 00:07:13,570
and during shipment ok now finally about

00:07:09,759 --> 00:07:15,520
containers in software so the original

00:07:13,570 --> 00:07:21,310
motivation probably for containers and

00:07:15,520 --> 00:07:26,770
software is to find a light way weight

00:07:21,310 --> 00:07:29,740
way to run software isolate multiple

00:07:26,770 --> 00:07:33,639
applications and resources on the same

00:07:29,740 --> 00:07:37,900
machine so that is something you could

00:07:33,639 --> 00:07:40,090
probably if you probably already know so

00:07:37,900 --> 00:07:43,650
but containers don't try to simulate a

00:07:40,090 --> 00:07:47,710
whole computer when you compare it with

00:07:43,650 --> 00:07:52,650
whole system virtualizes they try to

00:07:47,710 --> 00:07:55,349
really simulate a graphics card and

00:07:52,650 --> 00:07:58,060
sound device and network and all that

00:07:55,349 --> 00:08:03,159
and containers don't try to do that they

00:07:58,060 --> 00:08:07,240
just sit separate and isolate processes

00:08:03,159 --> 00:08:11,110
and resources so you know that

00:08:07,240 --> 00:08:13,240
applications are running as a process or

00:08:11,110 --> 00:08:16,080
certain several processes and there's

00:08:13,240 --> 00:08:19,570
some CPU and kernel who takes care of

00:08:16,080 --> 00:08:22,570
these processes and containers are just

00:08:19,570 --> 00:08:28,840
a way that these processes can see each

00:08:22,570 --> 00:08:32,890
other so the the basic infrastructure

00:08:28,840 --> 00:08:37,089
and basic system is the same of course

00:08:32,890 --> 00:08:41,560
for virtualized machines and containers

00:08:37,089 --> 00:08:43,750
but on top of that when when you use

00:08:41,560 --> 00:08:45,700
docker for example you have your

00:08:43,750 --> 00:08:48,850
containers and not your virtual machines

00:08:45,700 --> 00:08:52,779
and they live side-by-side and share the

00:08:48,850 --> 00:08:55,300
same host OS so actually they are really

00:08:52,779 --> 00:08:58,379
assessing the same kernel in the same

00:08:55,300 --> 00:09:03,610
machine they just don't see each other

00:08:58,379 --> 00:09:05,790
so the first container rich technology

00:09:03,610 --> 00:09:08,550
probably was the change fruit

00:09:05,790 --> 00:09:11,709
environment and later on the jail

00:09:08,550 --> 00:09:16,449
environment by the way that's where then

00:09:11,709 --> 00:09:21,180
the name jailbreak comes from and change

00:09:16,449 --> 00:09:27,220
fruit was I think developed in 1990s 79

00:09:21,180 --> 00:09:30,100
already so it's quite old and I think

00:09:27,220 --> 00:09:35,709
FreeBSD and introduced jail like in the

00:09:30,100 --> 00:09:38,410
year 2000 or so but the capabilities of

00:09:35,709 --> 00:09:40,749
that in technology was not comparable to

00:09:38,410 --> 00:09:44,050
what you currently have with containers

00:09:40,749 --> 00:09:46,860
and the important bit really was the

00:09:44,050 --> 00:09:50,199
introduction of Linux namespaces

00:09:46,860 --> 00:09:55,499
namespaces in Linux are basically

00:09:50,199 --> 00:09:58,209
exactly doing what I just said that they

00:09:55,499 --> 00:10:01,269
isolate these processes and don't let

00:09:58,209 --> 00:10:05,050
you see the other processes the most

00:10:01,269 --> 00:10:07,240
important bit of it is called user

00:10:05,050 --> 00:10:10,379
namespace so you don't see the other

00:10:07,240 --> 00:10:13,559
processes the other user processes and

00:10:10,379 --> 00:10:19,930
another one is called the control group

00:10:13,559 --> 00:10:22,540
which allows you to limit and and deal

00:10:19,930 --> 00:10:25,000
with the resources one container needs

00:10:22,540 --> 00:10:27,360
so for example how much CPU memory and

00:10:25,000 --> 00:10:31,509
so on

00:10:27,360 --> 00:10:34,809
Aleksey Linux containers was initially

00:10:31,509 --> 00:10:38,800
released in 2008 was taking advantage of

00:10:34,809 --> 00:10:44,050
these namespaces but was not so popular

00:10:38,800 --> 00:10:45,040
as as docker today and there's a big

00:10:44,050 --> 00:10:48,550
reason for that

00:10:45,040 --> 00:10:51,910
so docker is of course the container

00:10:48,550 --> 00:10:56,559
technology like alexey and actually you

00:10:51,910 --> 00:11:01,569
can even use Alex Linux containers below

00:10:56,559 --> 00:11:04,209
docker as some some engine but docker

00:11:01,569 --> 00:11:06,260
was so successful because it provided

00:11:04,209 --> 00:11:10,970
some abstraction on a higher layer

00:11:06,260 --> 00:11:14,780
it defined additional tooling an image

00:11:10,970 --> 00:11:19,700
format actually how you can basically

00:11:14,780 --> 00:11:22,490
package your your application and upload

00:11:19,700 --> 00:11:25,820
it to some registry downloaded from some

00:11:22,490 --> 00:11:28,340
registry and it also provided some

00:11:25,820 --> 00:11:31,840
domain-specific language to build these

00:11:28,340 --> 00:11:36,520
images and lots of many things more and

00:11:31,840 --> 00:11:36,520
that made it so successful because

00:11:36,670 --> 00:11:44,830
because of this image format and and

00:11:39,620 --> 00:11:47,870
different tooling which was involved so

00:11:44,830 --> 00:11:51,980
docker is much more than just starting

00:11:47,870 --> 00:11:55,280
or stopping a container but I think most

00:11:51,980 --> 00:12:00,380
of us or many people are using docker as

00:11:55,280 --> 00:12:02,270
a better virtual machine because I mean

00:12:00,380 --> 00:12:04,790
a virtual machine has some drawbacks as

00:12:02,270 --> 00:12:08,450
you can imagine when you use it for

00:12:04,790 --> 00:12:11,210
development you might have some some

00:12:08,450 --> 00:12:13,850
virtual p.m. where of VirtualBox running

00:12:11,210 --> 00:12:17,810
on your development machine have some

00:12:13,850 --> 00:12:20,060
base image using vagrant and so on and

00:12:17,810 --> 00:12:22,370
whenever that changes or if you ever

00:12:20,060 --> 00:12:25,670
have to switch between projects with

00:12:22,370 --> 00:12:29,630
different environments that is quite

00:12:25,670 --> 00:12:32,020
bulky so docker does have some advantage

00:12:29,630 --> 00:12:35,920
there because it's much more lightweight

00:12:32,020 --> 00:12:40,700
but still that is not the revolutionary

00:12:35,920 --> 00:12:44,120
part and also it has been quite hard so

00:12:40,700 --> 00:12:50,330
who started using docker but doesn't use

00:12:44,120 --> 00:12:53,210
docker anymore and yeah I met quite a

00:12:50,330 --> 00:12:57,850
few actually who-who started introducing

00:12:53,210 --> 00:13:00,350
docker and awesome container

00:12:57,850 --> 00:13:04,400
virtualization and and then were

00:13:00,350 --> 00:13:07,070
completely disappointed the problem in

00:13:04,400 --> 00:13:11,390
the the first like in the last two years

00:13:07,070 --> 00:13:15,860
was that everything was developing so

00:13:11,390 --> 00:13:17,780
fast and you could upgrade to a new

00:13:15,860 --> 00:13:19,310
docker version and everything was broken

00:13:17,780 --> 00:13:21,440
and you had to be very

00:13:19,310 --> 00:13:25,250
very careful to have certain Linux

00:13:21,440 --> 00:13:30,260
kernel patches applied and and also the

00:13:25,250 --> 00:13:32,480
whole tool set for for providing or

00:13:30,260 --> 00:13:37,040
deploying docker containers in

00:13:32,480 --> 00:13:38,960
production was just missing so sorry for

00:13:37,040 --> 00:13:42,380
that I asked you so many questions but

00:13:38,960 --> 00:13:44,810
that keeps your arms moving those of you

00:13:42,380 --> 00:13:47,690
who use docker and production who

00:13:44,810 --> 00:13:48,740
created his own scripts or way of

00:13:47,690 --> 00:13:55,160
deployment

00:13:48,740 --> 00:13:58,010
oh that's very much fewer than I thought

00:13:55,160 --> 00:14:00,529
like like only four or five or so and

00:13:58,010 --> 00:14:04,370
two years ago that wouldn't have been

00:14:00,529 --> 00:14:07,160
another way to do it right the only way

00:14:04,370 --> 00:14:09,890
to get some Dhaka and container running

00:14:07,160 --> 00:14:13,610
and production is to either log into the

00:14:09,890 --> 00:14:17,410
Machine and type docker run or do some

00:14:13,610 --> 00:14:21,620
scripting and also the docker company

00:14:17,410 --> 00:14:24,110
had a lot of issues it wasn't clear

00:14:21,620 --> 00:14:26,600
really what is the business model behind

00:14:24,110 --> 00:14:29,990
that company what what do they want to

00:14:26,600 --> 00:14:32,680
earn their money with is it the true

00:14:29,990 --> 00:14:37,550
open source project where everyone can

00:14:32,680 --> 00:14:40,670
can join and contribute and that was

00:14:37,550 --> 00:14:43,460
quite a difficult situation and face and

00:14:40,670 --> 00:14:45,410
when you rely on on something like

00:14:43,460 --> 00:14:47,180
docker which is so prominent you really

00:14:45,410 --> 00:14:51,290
want to be sure that it also exists in

00:14:47,180 --> 00:14:53,720
five or ten or fifteen years so in the

00:14:51,290 --> 00:14:56,839
meantime there have been something

00:14:53,720 --> 00:14:58,870
called container wars even I would call

00:14:56,839 --> 00:15:03,490
it like that but that was really the

00:14:58,870 --> 00:15:07,790
term and one result of it was that

00:15:03,490 --> 00:15:10,310
eventually docker released parts of the

00:15:07,790 --> 00:15:13,089
darker technology as standalone open

00:15:10,310 --> 00:15:18,010
source projects for example container D

00:15:13,089 --> 00:15:21,140
was recently released and that allows

00:15:18,010 --> 00:15:24,200
others who want to develop container

00:15:21,140 --> 00:15:28,100
solutions similar to docker like with

00:15:24,200 --> 00:15:31,250
some API on top and so on to use the

00:15:28,100 --> 00:15:32,840
same low-level container technology

00:15:31,250 --> 00:15:35,690
below

00:15:32,840 --> 00:15:40,360
and that's a very good step but it came

00:15:35,690 --> 00:15:43,400
very very late and almost too late so I

00:15:40,360 --> 00:15:44,810
that means docker I'm mentioning docker

00:15:43,400 --> 00:15:48,890
all the time but there are of course

00:15:44,810 --> 00:15:50,660
other container solutions like rocket

00:15:48,890 --> 00:15:53,779
from Korres for example at the moment

00:15:50,660 --> 00:15:56,420
and I'm not sure if in 5 or 10 years

00:15:53,779 --> 00:16:00,260
from now docker will be still the most

00:15:56,420 --> 00:16:02,810
used container engine or not but I think

00:16:00,260 --> 00:16:07,339
it's not really important because that

00:16:02,810 --> 00:16:10,250
still isn't the revolutionary part so if

00:16:07,339 --> 00:16:12,529
you have a container stack that's all

00:16:10,250 --> 00:16:17,779
cool but after all it's just a stack of

00:16:12,529 --> 00:16:20,360
containers and like I said you still

00:16:17,779 --> 00:16:23,180
have the challenge how do you deploy

00:16:20,360 --> 00:16:24,950
application how do you manage it in

00:16:23,180 --> 00:16:28,520
production and that's still not very

00:16:24,950 --> 00:16:31,610
easy you can do lots of nice things with

00:16:28,520 --> 00:16:35,330
container stacks but it doesn't solve

00:16:31,610 --> 00:16:37,550
your original problem and funnily

00:16:35,330 --> 00:16:44,900
developers often forget about the

00:16:37,550 --> 00:16:46,820
original problem like earning money so

00:16:44,900 --> 00:16:51,320
but basically it's about delivering

00:16:46,820 --> 00:16:53,510
software and in these times you can't

00:16:51,320 --> 00:16:56,480
afford to say ok we release a new

00:16:53,510 --> 00:16:59,990
software every year you know we send out

00:16:56,480 --> 00:17:02,750
CD ROMs by snail mail with our latest

00:16:59,990 --> 00:17:06,500
software version of course you have to

00:17:02,750 --> 00:17:09,470
release much more often and that could

00:17:06,500 --> 00:17:12,550
mean several times a day because your

00:17:09,470 --> 00:17:16,520
competition competition also does that

00:17:12,550 --> 00:17:18,829
if they are clever enough and found out

00:17:16,520 --> 00:17:20,720
for that you need low-risk releases you

00:17:18,829 --> 00:17:25,130
need to really be confident about your

00:17:20,720 --> 00:17:29,450
release pipeline and you want to provide

00:17:25,130 --> 00:17:33,650
still the same high quality and not have

00:17:29,450 --> 00:17:39,230
lots of new QA people and and this

00:17:33,650 --> 00:17:43,190
admins to do all the releases a day so

00:17:39,230 --> 00:17:46,809
remember these times launching a website

00:17:43,190 --> 00:17:49,669
mint go buy a server

00:17:46,809 --> 00:17:50,659
install the operating system go to the

00:17:49,669 --> 00:17:57,529
data center

00:17:50,659 --> 00:18:00,130
who did that yes and actually it was

00:17:57,529 --> 00:18:04,039
quite fun I think you know sometimes

00:18:00,130 --> 00:18:08,210
when you do it once or twice but hundred

00:18:04,039 --> 00:18:12,110
times well and and of course deployments

00:18:08,210 --> 00:18:14,090
he still can deploy with FTP and just

00:18:12,110 --> 00:18:16,039
test it on your production server other

00:18:14,090 --> 00:18:20,299
companies are doing that obviously as

00:18:16,039 --> 00:18:22,580
well but still it's a lot of work

00:18:20,299 --> 00:18:26,330
it doesn't really scale because if you

00:18:22,580 --> 00:18:29,899
have a sysadmin he can probably take

00:18:26,330 --> 00:18:35,029
care of five servers or 10 or 15 but not

00:18:29,899 --> 00:18:38,690
about 5,000 or so and it's it's of

00:18:35,029 --> 00:18:42,409
course error-prone you don't really want

00:18:38,690 --> 00:18:45,730
to do that that's probably all no big

00:18:42,409 --> 00:18:48,830
news but because you know the history

00:18:45,730 --> 00:18:50,840
which which came out of that that is we

00:18:48,830 --> 00:18:54,950
try to normalize things so we try to

00:18:50,840 --> 00:18:57,549
introduce conventions processes base

00:18:54,950 --> 00:19:01,429
images for virtual machines and

00:18:57,549 --> 00:19:06,919
eventually configuration management like

00:19:01,429 --> 00:19:09,440
puppet chef ansible or may I ask you

00:19:06,919 --> 00:19:13,010
again who's using any of puppet chef

00:19:09,440 --> 00:19:20,419
ansible some configuration management ok

00:19:13,010 --> 00:19:22,190
I also did and when you have that I mean

00:19:20,419 --> 00:19:23,929
what you try to do is normalize your

00:19:22,190 --> 00:19:29,659
environment you create some ansible

00:19:23,929 --> 00:19:32,210
script or some chef file to to make sure

00:19:29,659 --> 00:19:34,640
that you can reproduce servers you have

00:19:32,210 --> 00:19:38,029
the same environment all the time and

00:19:34,640 --> 00:19:40,730
then you automate it you create some

00:19:38,029 --> 00:19:45,080
Jenkins job awesome get labs your job

00:19:40,730 --> 00:19:49,720
which can provision a new server which

00:19:45,080 --> 00:19:53,149
can deploy something because ultimately

00:19:49,720 --> 00:19:57,950
your goal is to to do continuous

00:19:53,149 --> 00:20:00,950
delivery so when you want to see have an

00:19:57,950 --> 00:20:04,100
idea about a new feature or product

00:20:00,950 --> 00:20:10,340
then you want to ship updates as soon as

00:20:04,100 --> 00:20:13,240
possible so who is doing scrum or any

00:20:10,340 --> 00:20:16,340
other agile development in this company

00:20:13,240 --> 00:20:20,900
Wow very nice

00:20:16,340 --> 00:20:22,910
who does continuous delivery and that

00:20:20,900 --> 00:20:26,870
should actually be exactly the same but

00:20:22,910 --> 00:20:28,520
it's not so what what do you do with the

00:20:26,870 --> 00:20:34,540
product after its sprint

00:20:28,520 --> 00:20:34,540
if you don't continuously deliver right

00:20:34,810 --> 00:20:41,120
anyway it should be should be the case

00:20:38,270 --> 00:20:44,420
so how do containers come into play

00:20:41,120 --> 00:20:46,220
there so one thing is hands off your

00:20:44,420 --> 00:20:49,160
servers if you need to log into your

00:20:46,220 --> 00:20:50,570
server in order to scale or deploy or

00:20:49,160 --> 00:20:56,960
whatever something is wrong with your

00:20:50,570 --> 00:21:00,010
automation and one puzzle in that game

00:20:56,960 --> 00:21:02,780
was the idea of infrastructure as code

00:21:00,010 --> 00:21:05,240
so saying okay

00:21:02,780 --> 00:21:07,160
your infrastructure like servers and

00:21:05,240 --> 00:21:09,170
network and file a firewall and

00:21:07,160 --> 00:21:10,850
everything I describe that with

00:21:09,170 --> 00:21:14,150
configuration management or some other

00:21:10,850 --> 00:21:17,570
tools and I can put it into gear and

00:21:14,150 --> 00:21:22,330
have my software best practices to run

00:21:17,570 --> 00:21:24,650
that still it might be a good idea but

00:21:22,330 --> 00:21:27,020
what sucks about configuration

00:21:24,650 --> 00:21:30,140
management is more the organizational

00:21:27,020 --> 00:21:31,820
problem like if you have a company with

00:21:30,140 --> 00:21:35,030
different departments product

00:21:31,820 --> 00:21:38,000
development of operations who owns these

00:21:35,030 --> 00:21:41,630
configuration management scripts neither

00:21:38,000 --> 00:21:45,050
case is a good solution and that is

00:21:41,630 --> 00:21:51,230
probably how DevOps evolved which is bit

00:21:45,050 --> 00:21:57,410
of a big compromise and still not the

00:21:51,230 --> 00:21:59,780
solution and the server which you

00:21:57,410 --> 00:22:03,770
brought to your data center and gave it

00:21:59,780 --> 00:22:07,070
names and you know Kara shhhht

00:22:03,770 --> 00:22:10,100
and you wondered how it how it feels if

00:22:07,070 --> 00:22:12,140
it's healthy and so on that also doesn't

00:22:10,100 --> 00:22:13,100
work in the long run so vana Fogel said

00:22:12,140 --> 00:22:14,720
I've hacked serve

00:22:13,100 --> 00:22:21,080
enough in my life and they do not hug

00:22:14,720 --> 00:22:22,390
you back they hate you but did you

00:22:21,080 --> 00:22:24,230
notice that this is all about

00:22:22,390 --> 00:22:26,840
infrastructure and not about your

00:22:24,230 --> 00:22:30,770
application which was the original goal

00:22:26,840 --> 00:22:34,039
right shipping your application you only

00:22:30,770 --> 00:22:37,700
dealt with infrastructure and certainly

00:22:34,039 --> 00:22:39,650
it helped a bit so again a container

00:22:37,700 --> 00:22:43,130
stack by itself is just a stack of

00:22:39,650 --> 00:22:47,030
containers and if you want to look at

00:22:43,130 --> 00:22:50,510
how containers could work like at scale

00:22:47,030 --> 00:22:52,429
or even not at scale then certainly you

00:22:50,510 --> 00:22:54,919
need to look at Google because they are

00:22:52,429 --> 00:22:56,120
doing that for 17 years now with the

00:22:54,919 --> 00:23:00,650
software called BARC

00:22:56,120 --> 00:23:05,179
and that is the missing piece in the

00:23:00,650 --> 00:23:06,980
puzzle really because they created an

00:23:05,179 --> 00:23:10,970
API which is centered around the

00:23:06,980 --> 00:23:11,750
application not the infrastructure so

00:23:10,970 --> 00:23:14,000
you don't say

00:23:11,750 --> 00:23:18,049
I run a new server or I create a new

00:23:14,000 --> 00:23:21,080
network interface or whatever this is

00:23:18,049 --> 00:23:25,400
all about around the containers and and

00:23:21,080 --> 00:23:27,799
the actual application so logs are

00:23:25,400 --> 00:23:30,140
grouped by applications not machines

00:23:27,799 --> 00:23:32,750
they have load balancing which load

00:23:30,140 --> 00:23:37,460
balanced traffic for instances of your

00:23:32,750 --> 00:23:40,490
application not servers and you might

00:23:37,460 --> 00:23:42,080
think like okay yeah so is that such a

00:23:40,490 --> 00:23:48,409
big difference but it's a whole

00:23:42,080 --> 00:23:51,740
different mindset and also it means

00:23:48,409 --> 00:23:54,049
something for the developers out of park

00:23:51,740 --> 00:23:58,789
actually evolved some open source

00:23:54,049 --> 00:24:01,400
project called kubernetes and honestly

00:23:58,789 --> 00:24:04,760
that contains the wisdom of these 17

00:24:01,400 --> 00:24:06,789
years put into a fresh open source

00:24:04,760 --> 00:24:10,340
project even though it's really young

00:24:06,789 --> 00:24:14,270
there are there's so much experience in

00:24:10,340 --> 00:24:17,720
it and it can do all kinds of amazing

00:24:14,270 --> 00:24:19,880
things so for example it schedules your

00:24:17,720 --> 00:24:23,270
containers so let's say you have 20

00:24:19,880 --> 00:24:25,520
machines to start with and kubernetes

00:24:23,270 --> 00:24:26,930
will figure out depending on the

00:24:25,520 --> 00:24:29,120
resources you need for that

00:24:26,930 --> 00:24:31,820
little application where should I put it

00:24:29,120 --> 00:24:33,770
and if some machine dies it will

00:24:31,820 --> 00:24:36,620
relocate your container and make sure

00:24:33,770 --> 00:24:38,840
that the traffic is relocated it will

00:24:36,620 --> 00:24:42,140
make sure that there's a hard disk which

00:24:38,840 --> 00:24:44,300
can be mounted to your container it can

00:24:42,140 --> 00:24:47,320
horizontally scale your containers

00:24:44,300 --> 00:24:50,720
depending on metrics you provide and

00:24:47,320 --> 00:24:53,570
actually there is there is a whole

00:24:50,720 --> 00:24:56,500
conversation between this Orchestrator

00:24:53,570 --> 00:25:01,610
and your container it's not a one-way

00:24:56,500 --> 00:25:03,500
automation so I think really and not

00:25:01,610 --> 00:25:05,990
because I think it'd be many people

00:25:03,500 --> 00:25:08,210
think that kubernetes will become for

00:25:05,990 --> 00:25:11,630
cloud hosting what Linux is for service

00:25:08,210 --> 00:25:14,480
right now and there are many reasons to

00:25:11,630 --> 00:25:18,140
to think that also because it's a it's

00:25:14,480 --> 00:25:21,500
the most active open-source project on

00:25:18,140 --> 00:25:23,720
github by the way and it's a beautiful

00:25:21,500 --> 00:25:26,380
piece of software so we know that break

00:25:23,720 --> 00:25:29,900
box shipping didn't scale so I think

00:25:26,380 --> 00:25:36,460
also in in a way it doesn't scale for

00:25:29,900 --> 00:25:40,190
for our software and yeah I don't know I

00:25:36,460 --> 00:25:43,640
think that our our jobs not only our

00:25:40,190 --> 00:25:46,450
jobs as developers or as product teams

00:25:43,640 --> 00:25:51,830
but also for everyone in this business

00:25:46,450 --> 00:25:54,620
can change a lot if you think about you

00:25:51,830 --> 00:25:56,210
have I mean for example at Google they

00:25:54,620 --> 00:26:00,260
don't have a department called

00:25:56,210 --> 00:26:01,670
operations anymore they they approach it

00:26:00,260 --> 00:26:05,330
completely different they don't have

00:26:01,670 --> 00:26:08,950
people system administrators watching

00:26:05,330 --> 00:26:11,090
the service and how they deal like and

00:26:08,950 --> 00:26:12,830
product development teams on the other

00:26:11,090 --> 00:26:15,800
hand because they have completely

00:26:12,830 --> 00:26:18,500
conflicting on interests right the

00:26:15,800 --> 00:26:21,230
sucess means try to keep everything as

00:26:18,500 --> 00:26:23,120
it is as stable as it can and the

00:26:21,230 --> 00:26:25,010
product development team try to change

00:26:23,120 --> 00:26:27,620
everything as fast as possible

00:26:25,010 --> 00:26:30,530
so how can they ever be happy together I

00:26:27,620 --> 00:26:33,050
mean DevOps was just a compromise so

00:26:30,530 --> 00:26:35,600
what they call it is service site

00:26:33,050 --> 00:26:38,030
reliability engineers and they're

00:26:35,600 --> 00:26:40,220
actually look at the infrastructure from

00:26:38,030 --> 00:26:40,519
the point of view of a developer they

00:26:40,220 --> 00:26:43,940
try

00:26:40,519 --> 00:26:46,070
to automate everything there's a really

00:26:43,940 --> 00:26:50,089
cool book from O'Reilly about it

00:26:46,070 --> 00:26:52,399
I can recommend so I think that

00:26:50,089 --> 00:26:54,169
containers can make the process of

00:26:52,399 --> 00:26:57,320
delivering software more efficient I

00:26:54,169 --> 00:27:00,200
mean the time is not enough for this

00:26:57,320 --> 00:27:03,200
talk to to really convince you I guess

00:27:00,200 --> 00:27:05,899
so I need to do that more of them but

00:27:03,200 --> 00:27:09,709
also containers and orchestration only

00:27:05,899 --> 00:27:11,479
makes sense at a certain scale so I mean

00:27:09,709 --> 00:27:13,999
I know developers who want to go from

00:27:11,479 --> 00:27:16,070
here to van they think like that's a

00:27:13,999 --> 00:27:20,059
long way to work I first build a train

00:27:16,070 --> 00:27:21,679
station and then let's see but if you

00:27:20,059 --> 00:27:23,869
only have one machine or two it doesn't

00:27:21,679 --> 00:27:27,249
make sense but it starts at three three

00:27:23,869 --> 00:27:29,419
ticks and you refactor right and

00:27:27,249 --> 00:27:31,609
remember that without orchestration

00:27:29,419 --> 00:27:34,249
containers just a box it's it's a nice

00:27:31,609 --> 00:27:36,649
way to virtualize things but the real

00:27:34,249 --> 00:27:41,149
interesting magic happens when you try

00:27:36,649 --> 00:27:43,369
to orchestrate it it will take quite

00:27:41,149 --> 00:27:45,829
some years to get into it also because

00:27:43,369 --> 00:27:49,099
of the cultural shift departments don't

00:27:45,829 --> 00:27:51,739
match anymore teams are I mean people

00:27:49,099 --> 00:27:54,769
won't like it really most people in an

00:27:51,739 --> 00:27:56,690
organization won't like it but after all

00:27:54,769 --> 00:28:00,559
and you have a lot of time so I guess in

00:27:56,690 --> 00:28:05,869
100 years still will deploy websites and

00:28:00,559 --> 00:28:07,820
applications with FTP so finally I think

00:28:05,869 --> 00:28:09,440
container orchestration will change the

00:28:07,820 --> 00:28:12,339
way you think about software

00:28:09,440 --> 00:28:16,549
architecture microservices event-driven

00:28:12,339 --> 00:28:19,369
think all that operations deployment

00:28:16,549 --> 00:28:21,829
monitoring debugging this all is

00:28:19,369 --> 00:28:25,070
completely different but it's very very

00:28:21,829 --> 00:28:27,950
exciting and self-healing clusters are

00:28:25,070 --> 00:28:30,769
just the best gifts you have when you're

00:28:27,950 --> 00:28:33,589
on call and need to check something's

00:28:30,769 --> 00:28:35,599
going wrong because that is then

00:28:33,589 --> 00:28:37,459
something you do at nine o'clock in the

00:28:35,599 --> 00:28:38,469
morning over a coffee and see what

00:28:37,459 --> 00:28:42,080
happened last night

00:28:38,469 --> 00:28:44,670
so thanks

00:28:42,080 --> 00:28:47,309
[Applause]

00:28:44,670 --> 00:28:49,370
[Music]

00:28:47,309 --> 00:28:49,370

YouTube URL: https://www.youtube.com/watch?v=8M05sipFJq8


