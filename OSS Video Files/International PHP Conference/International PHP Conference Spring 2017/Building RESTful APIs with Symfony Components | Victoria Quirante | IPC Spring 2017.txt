Title: Building RESTful APIs with Symfony Components | Victoria Quirante | IPC Spring 2017
Publication date: 2019-01-23
Playlist: International PHP Conference Spring 2017
Description: 
	Victoria Quirante (Limenius): Built around the HTTP specification, Symfony components provide a rock solid foundation for building RESTful APIs, whether we are using the full framework or not. In this session we will dig into those components, showing how to successfully deal with problems such as adapting our models to the desired representations back and forth, how to validate the incoming data, or how to implement our authentication strategies. Furthermore, we will see which additional tools do we have when using the full framework, as well as some tips and tricks to effectively test our APIs. All of it from a practical approach based upon real use cases.
Captions: 
	00:00:05,660 --> 00:00:12,300
good afternoon and welcome to this talk

00:00:08,780 --> 00:00:14,849
building restful api s-- with symphony

00:00:12,300 --> 00:00:19,140
components can you hear me properly yeah

00:00:14,849 --> 00:00:21,750
okay so some of you already know me from

00:00:19,140 --> 00:00:24,990
this morning but my name is Victoria I

00:00:21,750 --> 00:00:28,439
work at the menus there we will tailor

00:00:24,990 --> 00:00:30,210
made projects for plugins in most of the

00:00:28,439 --> 00:00:32,880
projects that we build there is a need

00:00:30,210 --> 00:00:36,420
for an API usually because you want to

00:00:32,880 --> 00:00:39,480
serve the data to your front-end or your

00:00:36,420 --> 00:00:42,660
mobile apps we have been using symphony

00:00:39,480 --> 00:00:45,270
for a long time to build our API and in

00:00:42,660 --> 00:00:48,239
this talk I'm going to show you how a

00:00:45,270 --> 00:00:51,360
few symfony components will provide you

00:00:48,239 --> 00:00:55,410
with a lot of help for building this API

00:00:51,360 --> 00:00:57,390
and also how if you decide to use the

00:00:55,410 --> 00:00:59,699
whole framework you will have some

00:00:57,390 --> 00:01:03,390
additional tools that will provide also

00:00:59,699 --> 00:01:06,210
quite a bit of help okay so I'm gonna

00:01:03,390 --> 00:01:07,979
start with an introduction that we're

00:01:06,210 --> 00:01:10,740
mainly I want to answer a few questions

00:01:07,979 --> 00:01:14,490
that may arise from the title of the

00:01:10,740 --> 00:01:17,189
talk the first of them is why would I

00:01:14,490 --> 00:01:19,530
want my API to be restful maybe for some

00:01:17,189 --> 00:01:23,640
of you the answer is clear but perhaps

00:01:19,530 --> 00:01:27,450
for some others is not maybe some of

00:01:23,640 --> 00:01:29,670
some of you can think well I've been

00:01:27,450 --> 00:01:32,520
reading about dressed and I think I can

00:01:29,670 --> 00:01:35,520
think of a better way of structuring my

00:01:32,520 --> 00:01:39,450
API this is a third thought you can

00:01:35,520 --> 00:01:41,960
think that also you can think I've been

00:01:39,450 --> 00:01:44,939
reading about a lot rest and I've been

00:01:41,960 --> 00:01:47,460
seeing that people fight about a few

00:01:44,939 --> 00:01:49,950
controversial points quite a lot so what

00:01:47,460 --> 00:01:52,470
does it mean it's restful that good if

00:01:49,950 --> 00:01:55,200
people have to discuss these things so

00:01:52,470 --> 00:01:57,210
often I think those are yeah first

00:01:55,200 --> 00:02:00,630
thoughts but on the other hand we have

00:01:57,210 --> 00:02:04,500
two very powerful reasons for deciding

00:02:00,630 --> 00:02:07,290
to build our API rest the first of them

00:02:04,500 --> 00:02:09,660
is that dress makes the most of HTTP

00:02:07,290 --> 00:02:13,240
which means that makes the most of the

00:02:09,660 --> 00:02:15,990
best features of HTTP

00:02:13,240 --> 00:02:20,170
the second of which verbs status codes

00:02:15,990 --> 00:02:22,900
headers okay second of them is that

00:02:20,170 --> 00:02:25,900
going with this in this direction means

00:02:22,900 --> 00:02:27,790
means following a common language having

00:02:25,900 --> 00:02:30,100
a common language with your colleagues

00:02:27,790 --> 00:02:32,200
with the consumers of your API and in

00:02:30,100 --> 00:02:34,570
the long run having a common language is

00:02:32,200 --> 00:02:36,810
something that always saves you time and

00:02:34,570 --> 00:02:43,420
a lot of trouble okay

00:02:36,810 --> 00:02:45,460
but even so you may think okay but it's

00:02:43,420 --> 00:02:48,070
worth it really this travel of the three

00:02:45,460 --> 00:02:51,640
levels and so on well I think that there

00:02:48,070 --> 00:02:54,310
is a sane way to approach rest at least

00:02:51,640 --> 00:02:56,950
is the way I followed you can of course

00:02:54,310 --> 00:02:57,730
do it whatever you want but this is what

00:02:56,950 --> 00:03:00,670
what I do

00:02:57,730 --> 00:03:03,880
it has also three levels the first of

00:03:00,670 --> 00:03:07,090
them is learn the stuff that is commonly

00:03:03,880 --> 00:03:10,060
accepted which is most of it I mean most

00:03:07,090 --> 00:03:11,890
of the theory everybody agrees on it you

00:03:10,060 --> 00:03:15,490
just need to learn what is it and do it

00:03:11,890 --> 00:03:19,390
like use nouns for the resources use

00:03:15,490 --> 00:03:22,600
HTTP verbs return meaningful status

00:03:19,390 --> 00:03:26,350
codes and so on so this is the biggest

00:03:22,600 --> 00:03:28,690
part second you should be aware that

00:03:26,350 --> 00:03:31,570
there are a few controversial areas I

00:03:28,690 --> 00:03:33,840
mean things that you can read a lot

00:03:31,570 --> 00:03:36,550
about it but you will find experts

00:03:33,840 --> 00:03:37,990
fighting with each other saying opposite

00:03:36,550 --> 00:03:40,240
things and it's quite difficult to

00:03:37,990 --> 00:03:42,220
decide which one is best for example

00:03:40,240 --> 00:03:45,900
things like do you have to return they

00:03:42,220 --> 00:03:49,210
created or updated resource kinda have

00:03:45,900 --> 00:03:51,940
different you you are eyes for different

00:03:49,210 --> 00:03:55,600
representations for example this second

00:03:51,940 --> 00:03:58,480
one if you look out there you will find

00:03:55,600 --> 00:04:01,450
Lucas a Smith which is the author of was

00:03:58,480 --> 00:04:03,670
grass bundle saying that you shouldn't

00:04:01,450 --> 00:04:06,610
because this goes against the concept

00:04:03,670 --> 00:04:09,370
concept of rest okay but if you keep

00:04:06,610 --> 00:04:12,160
looking you will find a guy who is the

00:04:09,370 --> 00:04:15,250
author of the concept and he says what I

00:04:12,160 --> 00:04:17,739
never said that you should use content

00:04:15,250 --> 00:04:19,930
negotiation all the time and in on his

00:04:17,739 --> 00:04:21,850
website he is actually using two

00:04:19,930 --> 00:04:26,350
different URLs for two different

00:04:21,850 --> 00:04:27,139
representations so what to do so then we

00:04:26,350 --> 00:04:30,560
arrive to the

00:04:27,139 --> 00:04:32,509
11 or the third step in these cases you

00:04:30,560 --> 00:04:34,999
need need to choose a side I mean

00:04:32,509 --> 00:04:37,310
whatever makes more sense for you for

00:04:34,999 --> 00:04:40,639
your colleague or however you prefer to

00:04:37,310 --> 00:04:42,800
this side deciding is not the most

00:04:40,639 --> 00:04:45,319
important part part the important part

00:04:42,800 --> 00:04:48,289
is once you have decided about this you

00:04:45,319 --> 00:04:50,120
need to stick to that I mean you need to

00:04:48,289 --> 00:04:53,479
be very consistent when building your

00:04:50,120 --> 00:04:56,449
API following this these decisions okay

00:04:53,479 --> 00:04:58,729
so to summarize summarize all this

00:04:56,449 --> 00:05:01,789
building ApS has a lot to do groups

00:04:58,729 --> 00:05:04,879
being civilized and consistent okay

00:05:01,789 --> 00:05:06,710
it's not so much becoming something like

00:05:04,879 --> 00:05:09,939
this it's more like being calm and

00:05:06,710 --> 00:05:12,800
consisting with your decisions right

00:05:09,939 --> 00:05:14,750
second question why is Symphony unrest

00:05:12,800 --> 00:05:19,129
why are we putting these two words

00:05:14,750 --> 00:05:21,560
together there is a reason behind rest

00:05:19,129 --> 00:05:24,789
as we as we have said it's a very strict

00:05:21,560 --> 00:05:27,560
definition is sometimes a battlefield

00:05:24,789 --> 00:05:30,830
but it's a way to do to make the most of

00:05:27,560 --> 00:05:34,009
HTTP on the other hand Symphony was also

00:05:30,830 --> 00:05:37,339
created thinking a lot of making the

00:05:34,009 --> 00:05:39,979
most of HTTP around the HTTP protocol

00:05:37,339 --> 00:05:43,189
okay so in other words we can say that

00:05:39,979 --> 00:05:47,029
rest loves HTTP and symphony as well

00:05:43,189 --> 00:05:48,830
that's why they fit well together our

00:05:47,029 --> 00:05:52,930
third question is why symfony components

00:05:48,830 --> 00:05:56,060
why not just Symphony like components as

00:05:52,930 --> 00:05:58,009
some of you may know Symphony is two

00:05:56,060 --> 00:06:01,479
things a fully-stocked framework

00:05:58,009 --> 00:06:03,020
framework and also a set of independent

00:06:01,479 --> 00:06:06,560
components okay

00:06:03,020 --> 00:06:08,870
those components are simply decoupled

00:06:06,560 --> 00:06:11,180
reusable libraries that you can use

00:06:08,870 --> 00:06:14,469
somewhere else in your code wherever

00:06:11,180 --> 00:06:17,599
without the framework actually many

00:06:14,469 --> 00:06:20,149
popular PHP projects have been using

00:06:17,599 --> 00:06:23,569
symphony forum components in the last

00:06:20,149 --> 00:06:26,689
year's these are some these are some of

00:06:23,569 --> 00:06:28,610
the components and for example we have

00:06:26,689 --> 00:06:32,110
doctrine that uses console and young

00:06:28,610 --> 00:06:35,599
propel which also also using classloader

00:06:32,110 --> 00:06:37,849
Silex that uses a lot of them Drupal

00:06:35,599 --> 00:06:41,090
that since version eight I think is

00:06:37,849 --> 00:06:44,030
using some of them as well Lara well

00:06:41,090 --> 00:06:45,740
so this component has has have been

00:06:44,030 --> 00:06:49,310
helping in the last years to bring some

00:06:45,740 --> 00:06:52,130
asunder ization to the PHP community in

00:06:49,310 --> 00:06:55,220
this talk we are going to see in detail

00:06:52,130 --> 00:06:58,280
five components these five HTTP

00:06:55,220 --> 00:07:00,470
foundation serializer validator form and

00:06:58,280 --> 00:07:02,450
guard why these five because are the

00:07:00,470 --> 00:07:08,840
five that are going to help you building

00:07:02,450 --> 00:07:11,120
your API so the knowledge that you are

00:07:08,840 --> 00:07:13,790
gonna get from these components you can

00:07:11,120 --> 00:07:16,430
apply it later when working with the

00:07:13,790 --> 00:07:18,290
whole framework when working with these

00:07:16,430 --> 00:07:21,080
components in a different framework or

00:07:18,290 --> 00:07:24,229
even when using them in your in your own

00:07:21,080 --> 00:07:28,130
code even you could try to create your

00:07:24,229 --> 00:07:30,320
own a small framework if you want using

00:07:28,130 --> 00:07:31,970
those components actually that's a

00:07:30,320 --> 00:07:34,340
pretty cool exercise if you haven't done

00:07:31,970 --> 00:07:36,889
it I tried it and it's really

00:07:34,340 --> 00:07:38,900
interesting in this link you can follow

00:07:36,889 --> 00:07:41,090
and see how to do this and you learn

00:07:38,900 --> 00:07:44,210
about a lot about how a framework is

00:07:41,090 --> 00:07:46,460
built and what things do you need in

00:07:44,210 --> 00:07:48,800
this repository what I did was to put

00:07:46,460 --> 00:07:52,580
the five components that we are going to

00:07:48,800 --> 00:07:54,620
see together okay there you have the

00:07:52,580 --> 00:07:56,510
full code of the examples that I'm going

00:07:54,620 --> 00:07:58,550
to show you because of course I'm only

00:07:56,510 --> 00:08:00,919
going to point out the main things but

00:07:58,550 --> 00:08:04,520
if you want to really see the whole

00:08:00,919 --> 00:08:08,150
thing is there is there okay let's see

00:08:04,520 --> 00:08:09,860
those components starting with the HTTP

00:08:08,150 --> 00:08:13,100
foundation that is going to be the

00:08:09,860 --> 00:08:16,760
foundation of our API this component is

00:08:13,100 --> 00:08:21,919
going to provide us with object oriented

00:08:16,760 --> 00:08:22,669
layer for the HTTP specification okay

00:08:21,919 --> 00:08:26,300
how does it work

00:08:22,669 --> 00:08:29,210
as you know in PHP the request is

00:08:26,300 --> 00:08:31,430
represented by some global variables and

00:08:29,210 --> 00:08:33,830
the response is generated by some

00:08:31,430 --> 00:08:37,190
functions okay so this component is

00:08:33,830 --> 00:08:40,459
going to replace those global variables

00:08:37,190 --> 00:08:45,850
and functions by two very nice objects

00:08:40,459 --> 00:08:48,920
request and response okay how do this if

00:08:45,850 --> 00:08:52,339
we want to create a request we will use

00:08:48,920 --> 00:08:54,900
this create from Global's method that

00:08:52,339 --> 00:08:57,060
simply is going to create it

00:08:54,900 --> 00:09:01,860
from those global variables from PHP

00:08:57,060 --> 00:09:04,980
this is the same as this okay that's all

00:09:01,860 --> 00:09:08,550
with that we have fabric request of tech

00:09:04,980 --> 00:09:10,710
object what about the response for

00:09:08,550 --> 00:09:13,860
creating the response we will pass three

00:09:10,710 --> 00:09:16,530
arguments the content the status code

00:09:13,860 --> 00:09:19,290
and some headers that's that's all we

00:09:16,530 --> 00:09:22,190
need to do so let's see how to create a

00:09:19,290 --> 00:09:25,830
first endpoint with what we already know

00:09:22,190 --> 00:09:30,600
the requirement is very simple we just

00:09:25,830 --> 00:09:31,770
want to receive 201 status code when we

00:09:30,600 --> 00:09:36,210
call in there

00:09:31,770 --> 00:09:39,240
all right we create our request decode

00:09:36,210 --> 00:09:41,190
the content we do whatever we want to do

00:09:39,240 --> 00:09:43,800
with the data in the middle and then we

00:09:41,190 --> 00:09:47,250
are going to create our response okay

00:09:43,800 --> 00:09:50,010
put in some content in there our status

00:09:47,250 --> 00:09:52,440
code and two headers in this case it's

00:09:50,010 --> 00:09:56,150
the content type and the location with

00:09:52,440 --> 00:09:59,190
that we already have an endpoint working

00:09:56,150 --> 00:10:01,770
if you want you can use a shortcut

00:09:59,190 --> 00:10:05,070
instead of response you can use JSON

00:10:01,770 --> 00:10:06,870
response that basically is setting the

00:10:05,070 --> 00:10:08,970
content type header so you don't have to

00:10:06,870 --> 00:10:13,110
write that line it's a small shortcut

00:10:08,970 --> 00:10:17,250
and also in calls to Jason okay what

00:10:13,110 --> 00:10:19,470
about PS are 7 PS are 7 is a standard

00:10:17,250 --> 00:10:23,940
that was released I think a year ago

00:10:19,470 --> 00:10:26,820
that is very related to this as we have

00:10:23,940 --> 00:10:29,250
said the HTTP foundation component has

00:10:26,820 --> 00:10:31,470
brought some personalization to the

00:10:29,250 --> 00:10:34,410
community but this standard is a step

00:10:31,470 --> 00:10:36,720
further in that direction okay so I

00:10:34,410 --> 00:10:39,450
guess although I cannot know yet that

00:10:36,720 --> 00:10:44,070
symphony for will embrace this standard

00:10:39,450 --> 00:10:47,270
but until then until then you can use

00:10:44,070 --> 00:10:49,860
the symphony bridge to make your objects

00:10:47,270 --> 00:10:52,650
compatible with this stander okay it's

00:10:49,860 --> 00:10:55,110
very simple you use this bridge and then

00:10:52,650 --> 00:10:57,450
you can make your request and your

00:10:55,110 --> 00:11:01,730
response compatible with this standard

00:10:57,450 --> 00:11:05,460
okay if following standards is not

00:11:01,730 --> 00:11:07,260
recent a good enough reason for you for

00:11:05,460 --> 00:11:09,059
example you may want to do this because

00:11:07,260 --> 00:11:10,919
you may want to

00:11:09,059 --> 00:11:13,399
use some middle words there are a lot of

00:11:10,919 --> 00:11:16,169
middle words out there implementing

00:11:13,399 --> 00:11:18,329
several functionalities that you would

00:11:16,169 --> 00:11:21,569
be able to use if you are following this

00:11:18,329 --> 00:11:23,969
a standard okay I just wanted to point

00:11:21,569 --> 00:11:29,009
this out because this is of course newer

00:11:23,969 --> 00:11:31,769
than the HTTP foundation component let's

00:11:29,009 --> 00:11:33,419
go with the second this realizer this

00:11:31,769 --> 00:11:36,029
realizer is going to be one of our best

00:11:33,419 --> 00:11:39,179
friends because it deals with something

00:11:36,029 --> 00:11:41,399
really important it allows us helps us

00:11:39,179 --> 00:11:43,739
to create representations from our

00:11:41,399 --> 00:11:47,519
objects and the other way around which

00:11:43,739 --> 00:11:52,289
is something really really important

00:11:47,519 --> 00:11:55,709
when building your api's okay so imagine

00:11:52,289 --> 00:11:57,899
that you want to do this manually okay

00:11:55,709 --> 00:11:59,939
if you want to do this serialization and

00:11:57,899 --> 00:12:02,009
deserialization manually you could write

00:11:59,939 --> 00:12:05,879
something like this one line for each

00:12:02,009 --> 00:12:09,179
property to turn your request the

00:12:05,879 --> 00:12:11,669
request into our object okay and the

00:12:09,179 --> 00:12:15,629
other way around one line per property

00:12:11,669 --> 00:12:18,269
to create a response from our object

00:12:15,629 --> 00:12:20,969
this looks quite boring and tedious

00:12:18,269 --> 00:12:24,149
right and it is and imagine if you have

00:12:20,969 --> 00:12:27,119
50 properties instead of three so this

00:12:24,149 --> 00:12:33,149
realizers is going to save a lot of work

00:12:27,119 --> 00:12:36,059
here let's see if you want to convert

00:12:33,149 --> 00:12:38,699
our object into a JSON response instead

00:12:36,059 --> 00:12:43,139
of this you only need to say hey is

00:12:38,699 --> 00:12:43,559
realizer just serialize my object into a

00:12:43,139 --> 00:12:46,889
JSON

00:12:43,559 --> 00:12:49,259
that's all it's only one line okay and

00:12:46,889 --> 00:12:52,319
indeed the other direction very similar

00:12:49,259 --> 00:12:55,439
you want to convert your JSON content

00:12:52,319 --> 00:12:58,619
into an object and then you just say I

00:12:55,439 --> 00:13:01,229
realize or please this realize this this

00:12:58,619 --> 00:13:03,749
content and content put it in our recipe

00:13:01,229 --> 00:13:08,189
recipe object it will come in a JSON

00:13:03,749 --> 00:13:10,679
from okay only one line this is how the

00:13:08,189 --> 00:13:13,379
schema of the serializer component looks

00:13:10,679 --> 00:13:16,849
it looks a bit complicated maybe at the

00:13:13,379 --> 00:13:20,369
beginning but it's not it's simply

00:13:16,849 --> 00:13:21,539
transforming objects into J's ohms you

00:13:20,369 --> 00:13:22,830
see that there is something in the

00:13:21,539 --> 00:13:26,370
middle this is because

00:13:22,830 --> 00:13:28,020
they split the process into one part

00:13:26,370 --> 00:13:31,500
that deals with the transformations

00:13:28,020 --> 00:13:34,500
between rice and json for example those

00:13:31,500 --> 00:13:36,930
are the encoders and decoders and the

00:13:34,500 --> 00:13:39,480
other part that deals with transfer

00:13:36,930 --> 00:13:41,270
transformations between rice and objects

00:13:39,480 --> 00:13:44,190
those are the normalizer

00:13:41,270 --> 00:13:44,970
usually the heavy work is done here by

00:13:44,190 --> 00:13:50,940
the normalizer

00:13:44,970 --> 00:13:54,260
okay in before using this you will have

00:13:50,940 --> 00:13:56,490
to do some setup in order to tell which

00:13:54,260 --> 00:13:58,680
encoders are you going to use and which

00:13:56,490 --> 00:14:01,830
normalize errs here for example we are

00:13:58,680 --> 00:14:04,800
saying we are using the XML encoder and

00:14:01,830 --> 00:14:06,020
JSON encoder and we are using the object

00:14:04,800 --> 00:14:08,940
normalizer

00:14:06,020 --> 00:14:10,410
the object normalizer is like the most

00:14:08,940 --> 00:14:12,450
powerful one but you have other

00:14:10,410 --> 00:14:16,140
normalize Earth's out there you can

00:14:12,450 --> 00:14:18,540
check that in this link so instead of

00:14:16,140 --> 00:14:20,790
going further with things that you can

00:14:18,540 --> 00:14:23,820
check there what I really want to point

00:14:20,790 --> 00:14:26,340
out is why is this so helpful the

00:14:23,820 --> 00:14:30,780
steriliser is so helpful because when

00:14:26,340 --> 00:14:32,430
building an API you really realize that

00:14:30,780 --> 00:14:34,200
the representations that you want to

00:14:32,430 --> 00:14:36,780
show are not the same thing that you

00:14:34,200 --> 00:14:38,940
have in your database of course for

00:14:36,780 --> 00:14:41,250
example they are usually quite different

00:14:38,940 --> 00:14:44,670
imagine that you have this user in your

00:14:41,250 --> 00:14:47,460
database okay if you want to create a

00:14:44,670 --> 00:14:49,710
representation from it you may want to

00:14:47,460 --> 00:14:51,480
for example change the name of this

00:14:49,710 --> 00:14:53,340
property instead of calling it named you

00:14:51,480 --> 00:14:57,330
may want to call it user name for

00:14:53,340 --> 00:14:59,970
example perhaps or very likely you won't

00:14:57,330 --> 00:15:02,550
want to show the password even if it's

00:14:59,970 --> 00:15:05,580
encrypted maybe you want to show some

00:15:02,550 --> 00:15:07,470
properties when they are asking for only

00:15:05,580 --> 00:15:10,740
one user but not when they are asking

00:15:07,470 --> 00:15:12,840
for a list perhaps you want to prepend

00:15:10,740 --> 00:15:15,390
some prefix to some some of these

00:15:12,840 --> 00:15:17,280
properties or to show some of them in

00:15:15,390 --> 00:15:19,470
one version of the API and not in

00:15:17,280 --> 00:15:22,020
another version or maybe you have some

00:15:19,470 --> 00:15:24,890
things like this like nested and you

00:15:22,020 --> 00:15:27,660
want to turn them into regular

00:15:24,890 --> 00:15:30,390
properties so all these things these

00:15:27,660 --> 00:15:33,030
real arthur eliezer is going to help

00:15:30,390 --> 00:15:35,610
with that okay to really make easy to

00:15:33,030 --> 00:15:37,399
create the exact representation that you

00:15:35,610 --> 00:15:40,800
need

00:15:37,399 --> 00:15:42,990
for example with things like this it

00:15:40,800 --> 00:15:46,679
comes with two annotations one of them

00:15:42,990 --> 00:15:50,970
is max depth max depth is saying okay

00:15:46,679 --> 00:15:52,110
when you when you serialize just a stop

00:15:50,970 --> 00:15:53,490
at the second level

00:15:52,110 --> 00:15:55,949
what doesn't mean imagine that you have

00:15:53,490 --> 00:15:57,779
an object another object related to it

00:15:55,949 --> 00:16:00,209
another related to it another related to

00:15:57,779 --> 00:16:02,009
it and you don't want us realize all of

00:16:00,209 --> 00:16:03,959
it you just want to stop I don't know at

00:16:02,009 --> 00:16:07,589
second level third level level so you

00:16:03,959 --> 00:16:09,749
can do that with this this is very very

00:16:07,589 --> 00:16:12,269
useful when you are working with big

00:16:09,749 --> 00:16:14,730
trees or when you have circular

00:16:12,269 --> 00:16:17,369
references another annotation are the

00:16:14,730 --> 00:16:19,860
groups the groups are going to allow you

00:16:17,369 --> 00:16:21,959
to serialize different sets of

00:16:19,860 --> 00:16:23,269
properties okay let's see this with an

00:16:21,959 --> 00:16:25,290
example

00:16:23,269 --> 00:16:28,740
imagine that we want to create an

00:16:25,290 --> 00:16:31,649
endpoint I get that returns the recipes

00:16:28,740 --> 00:16:34,800
but before but only with these two

00:16:31,649 --> 00:16:37,319
properties name and servings okay name

00:16:34,800 --> 00:16:40,679
and servings for doing that we are going

00:16:37,319 --> 00:16:42,569
to use this groups annotation and all

00:16:40,679 --> 00:16:45,540
the properties are going to have the

00:16:42,569 --> 00:16:48,809
group detail but only the ones that we

00:16:45,540 --> 00:16:51,959
want half the group overview so simply

00:16:48,809 --> 00:16:54,420
like this when we say realize when we

00:16:51,959 --> 00:16:56,369
call this realizer we are gonna tell him

00:16:54,420 --> 00:16:59,369
which group did you want to serialize

00:16:56,369 --> 00:17:03,059
okay in this case we only want the

00:16:59,369 --> 00:17:05,850
overview group and like that we will be

00:17:03,059 --> 00:17:07,799
meeting our requirements okay we will it

00:17:05,850 --> 00:17:11,549
will be serializing only those

00:17:07,799 --> 00:17:13,740
properties another thing that you will

00:17:11,549 --> 00:17:17,159
have to do quite often is to create your

00:17:13,740 --> 00:17:18,839
custom normal answers okay then remember

00:17:17,159 --> 00:17:23,399
this the part that deals between the

00:17:18,839 --> 00:17:26,970
object and the arrives for example let's

00:17:23,399 --> 00:17:29,399
see this imagine that you want to add a

00:17:26,970 --> 00:17:30,990
prefix to some property in that case you

00:17:29,399 --> 00:17:33,570
will have to write something similar to

00:17:30,990 --> 00:17:36,720
this this name converter interface that

00:17:33,570 --> 00:17:39,659
has normalized methods and denormalize

00:17:36,720 --> 00:17:41,880
method okay in the normalized method in

00:17:39,659 --> 00:17:43,950
the direction of serializing you will be

00:17:41,880 --> 00:17:46,590
adding these prefix and in the opposite

00:17:43,950 --> 00:17:48,240
direction you will be removing it so

00:17:46,590 --> 00:17:50,010
this is very simple but as you can

00:17:48,240 --> 00:17:54,870
imagine with this you can do

00:17:50,010 --> 00:17:57,059
much more complex things okay okay that

00:17:54,870 --> 00:18:00,600
was the sterilizer let's move on the

00:17:57,059 --> 00:18:03,720
validate the validator is going to

00:18:00,600 --> 00:18:06,150
enforce sanity what does it mean of

00:18:03,720 --> 00:18:08,669
course we don't want that any kind of

00:18:06,150 --> 00:18:10,559
data arrives to our database we want

00:18:08,669 --> 00:18:12,480
this to be validated we cannot leave

00:18:10,559 --> 00:18:15,630
that work to the database it should be

00:18:12,480 --> 00:18:17,400
done before that so that's that is going

00:18:15,630 --> 00:18:23,220
to be the work of the job of the

00:18:17,400 --> 00:18:25,559
validator let's see how it works this is

00:18:23,220 --> 00:18:27,750
a very simple example in which we we are

00:18:25,559 --> 00:18:29,850
going to validate a string just a string

00:18:27,750 --> 00:18:32,370
but is to show you the parts that you

00:18:29,850 --> 00:18:34,890
have here you have two parts one are the

00:18:32,370 --> 00:18:37,770
constraints which are basically the role

00:18:34,890 --> 00:18:40,470
formulations and the other one are the

00:18:37,770 --> 00:18:41,970
validators that is where the logic is so

00:18:40,470 --> 00:18:44,669
if at some point you need to write your

00:18:41,970 --> 00:18:46,260
custom cost constraints and validators

00:18:44,669 --> 00:18:50,520
the logic is going to be there the

00:18:46,260 --> 00:18:52,260
validator okay this is very simple it's

00:18:50,520 --> 00:18:54,540
only a string but what happens if we

00:18:52,260 --> 00:18:57,570
want to validate an object so something

00:18:54,540 --> 00:19:00,080
more complex then the validator needs to

00:18:57,570 --> 00:19:02,970
know which constraints apply to each

00:19:00,080 --> 00:19:05,160
property all right and you can do that

00:19:02,970 --> 00:19:08,429
for example with annotations as well

00:19:05,160 --> 00:19:12,299
here we have two greater than or equal

00:19:08,429 --> 00:19:15,870
and not blank you can write this with

00:19:12,299 --> 00:19:19,799
notations but also with PI ml XML and so

00:19:15,870 --> 00:19:22,080
on the validator comes with 50

00:19:19,799 --> 00:19:24,090
constraints or more or less already

00:19:22,080 --> 00:19:30,090
there and of course you can write your

00:19:24,090 --> 00:19:32,460
own okay apart from validating they all

00:19:30,090 --> 00:19:34,230
they're very important thing to do once

00:19:32,460 --> 00:19:36,990
you have validated is to return

00:19:34,230 --> 00:19:38,340
meaningful errors in an API this is

00:19:36,990 --> 00:19:42,419
extremely important because otherwise

00:19:38,340 --> 00:19:45,090
they consumers of your API maybe not

00:19:42,419 --> 00:19:48,450
very happy so you really need to take

00:19:45,090 --> 00:19:49,799
care of that part that part good could

00:19:48,450 --> 00:19:52,530
be used for a little different talk

00:19:49,799 --> 00:19:54,270
because it's quite extent but if you are

00:19:52,530 --> 00:19:56,910
interested in knowing more about this I

00:19:54,270 --> 00:19:59,880
recommend this resource this is one of

00:19:56,910 --> 00:20:03,260
those K and P courses that are very good

00:19:59,880 --> 00:20:05,420
they have several about building trust

00:20:03,260 --> 00:20:08,780
was symphony so the and the second of

00:20:05,420 --> 00:20:13,610
them is only about errors so it's worth

00:20:08,780 --> 00:20:16,070
a look our fourth component form now you

00:20:13,610 --> 00:20:18,590
may wonder why are we talking about the

00:20:16,070 --> 00:20:21,050
forms here if there are no forms in an

00:20:18,590 --> 00:20:23,720
API the reason well there are two

00:20:21,050 --> 00:20:25,610
reasons first of all that dealing with

00:20:23,720 --> 00:20:28,220
the data that comes from your to your

00:20:25,610 --> 00:20:30,890
API is similar to dealing with the data

00:20:28,220 --> 00:20:33,170
that comes through a form okay there is

00:20:30,890 --> 00:20:35,210
some similarity there and also that if

00:20:33,170 --> 00:20:37,550
you are in a project that where you have

00:20:35,210 --> 00:20:40,400
an API and also forms somewhere else

00:20:37,550 --> 00:20:43,820
you will be able to reduce some of that

00:20:40,400 --> 00:20:45,830
code so it's it's usually a good idea to

00:20:43,820 --> 00:20:48,890
use this component as well this

00:20:45,830 --> 00:20:52,490
component is going to provide a dis

00:20:48,890 --> 00:20:54,610
réaliser and validation okay power for

00:20:52,490 --> 00:20:57,560
the steriliser actually and validation

00:20:54,610 --> 00:21:01,580
so that's why we normally use it when

00:20:57,560 --> 00:21:03,830
building ApS as well to see let's build

00:21:01,580 --> 00:21:05,930
a put end point okay

00:21:03,830 --> 00:21:09,500
this pull the end point needs to return

00:21:05,930 --> 00:21:14,930
200 status code and let's see how it

00:21:09,500 --> 00:21:17,450
looks we have our data the call it from

00:21:14,930 --> 00:21:20,870
the content of request and then we will

00:21:17,450 --> 00:21:23,870
build our form and we will build our

00:21:20,870 --> 00:21:25,670
form and being bind the data to it okay

00:21:23,870 --> 00:21:27,820
with that you already have it

00:21:25,670 --> 00:21:31,180
and you can check if the form is valid

00:21:27,820 --> 00:21:35,330
okay this is really straightforward

00:21:31,180 --> 00:21:37,580
of course after that as we mentioned you

00:21:35,330 --> 00:21:40,190
should be returning some errors if the

00:21:37,580 --> 00:21:42,950
form is not validating and so on these

00:21:40,190 --> 00:21:44,330
things you can see them because you can

00:21:42,950 --> 00:21:46,490
see them this is not so straightforward

00:21:44,330 --> 00:21:48,310
in the repository that I mentioned at

00:21:46,490 --> 00:21:50,210
the beginning okay because for example

00:21:48,310 --> 00:21:55,220
serializing the errors that come from

00:21:50,210 --> 00:21:59,000
the form needs a bit of work okay all

00:21:55,220 --> 00:22:00,800
right now is a good time to ask a couple

00:21:59,000 --> 00:22:03,380
of questions because I didn't want to go

00:22:00,800 --> 00:22:05,990
into the detail of all the rest theories

00:22:03,380 --> 00:22:08,120
since I'm sure that most of you already

00:22:05,990 --> 00:22:09,980
know it but from time to time there are

00:22:08,120 --> 00:22:12,770
a couple of questions that is worth to

00:22:09,980 --> 00:22:16,010
review this one is is post to create a

00:22:12,770 --> 00:22:17,070
code to update okay that's that we can

00:22:16,010 --> 00:22:20,279
say that this they come

00:22:17,070 --> 00:22:22,740
knowledge but it's not true although if

00:22:20,279 --> 00:22:25,830
you follow that rule you will be kind of

00:22:22,740 --> 00:22:28,380
 more or less okay but the whole

00:22:25,830 --> 00:22:31,529
truth is this the whole truth is that

00:22:28,380 --> 00:22:33,570
you have to use put if the operation is

00:22:31,529 --> 00:22:36,179
it important which means that if you

00:22:33,570 --> 00:22:38,580
perform perform it several times it will

00:22:36,179 --> 00:22:41,429
have the same result that doesn't

00:22:38,580 --> 00:22:44,399
perform in it only one time and second

00:22:41,429 --> 00:22:46,440
the URI needs to be the address of the

00:22:44,399 --> 00:22:48,870
resource if those two things are true

00:22:46,440 --> 00:22:50,250
then you support otherwise it's a

00:22:48,870 --> 00:22:52,529
positive that's it

00:22:50,250 --> 00:22:55,440
this is not a controversial point this

00:22:52,529 --> 00:22:59,100
is like like this but somehow it's a bit

00:22:55,440 --> 00:23:01,769
difficult to to remember another

00:22:59,100 --> 00:23:05,519
question that we can have is do I have

00:23:01,769 --> 00:23:07,309
to return the resource when we update or

00:23:05,519 --> 00:23:11,039
create one

00:23:07,309 --> 00:23:13,350
well many say that we don't have to but

00:23:11,039 --> 00:23:17,220
some clients will expect we will expect

00:23:13,350 --> 00:23:20,340
it so again this thing is up to you it

00:23:17,220 --> 00:23:23,669
depends on who are you developing your

00:23:20,340 --> 00:23:27,960
API for and this kind of things you have

00:23:23,669 --> 00:23:30,840
to choose here all right our last

00:23:27,960 --> 00:23:34,110
component is guard guard is going to

00:23:30,840 --> 00:23:36,080
help us with authentication in symphony

00:23:34,110 --> 00:23:39,419
we have a bigger and more complex

00:23:36,080 --> 00:23:42,629
component basis that is security ok

00:23:39,419 --> 00:23:44,610
security is very powerful but is also a

00:23:42,629 --> 00:23:48,059
bit complex and they wanted to make

00:23:44,610 --> 00:23:50,340
something simpler for simple cases so

00:23:48,059 --> 00:23:52,620
they came up with this guard this guard

00:23:50,340 --> 00:23:54,210
this guard component is something so

00:23:52,620 --> 00:23:58,980
simple that the only thing you need to

00:23:54,210 --> 00:24:01,649
do is to implement one interface guard

00:23:58,980 --> 00:24:04,919
authentication interface which consists

00:24:01,649 --> 00:24:07,940
in these seven methods that are very

00:24:04,919 --> 00:24:10,860
three methods very understandable

00:24:07,940 --> 00:24:14,309
implementing this you already we'll be

00:24:10,860 --> 00:24:18,350
taking profit of guard okay this is not

00:24:14,309 --> 00:24:22,679
saving you from implementing later

00:24:18,350 --> 00:24:25,110
authentication strategy like JSON tokens

00:24:22,679 --> 00:24:28,649
or oath or whatever this is only like

00:24:25,110 --> 00:24:31,610
preparing you for that okay the other

00:24:28,649 --> 00:24:34,799
work needs to be done as well

00:24:31,610 --> 00:24:36,830
okay at this point when I put my five

00:24:34,799 --> 00:24:40,080
components together you have already

00:24:36,830 --> 00:24:42,900
felt that you need things that you

00:24:40,080 --> 00:24:45,690
usually have in a framework routine even

00:24:42,900 --> 00:24:49,440
dispatcher kernel and so on

00:24:45,690 --> 00:24:52,080
so at this point is worth to ask

00:24:49,440 --> 00:24:53,880
yourself and what do we have if I use

00:24:52,080 --> 00:24:55,830
the whole framework and that's what we

00:24:53,880 --> 00:24:57,630
are going to see now which additional

00:24:55,830 --> 00:25:02,419
things do we have with the whole

00:24:57,630 --> 00:25:05,130
framework okay using the whole framework

00:25:02,419 --> 00:25:09,270
the whole framework uses all these

00:25:05,130 --> 00:25:12,510
components and some others a component

00:25:09,270 --> 00:25:14,490
as you know is a library that can be

00:25:12,510 --> 00:25:17,640
used somewhere else but we also have in

00:25:14,490 --> 00:25:19,860
simple funny bundles bundles are tied to

00:25:17,640 --> 00:25:21,960
the framework okay and usually it's very

00:25:19,860 --> 00:25:24,270
common to have a library which is the

00:25:21,960 --> 00:25:27,270
one that has the functionality and the

00:25:24,270 --> 00:25:29,880
bundle which is configuring it

00:25:27,270 --> 00:25:32,280
integrating into it with with the

00:25:29,880 --> 00:25:35,460
framework so what we are going to see

00:25:32,280 --> 00:25:38,610
are a few of these bundles of course

00:25:35,460 --> 00:25:41,520
useful for building ideas all right the

00:25:38,610 --> 00:25:43,559
first of them is this JMS réaliser

00:25:41,520 --> 00:25:45,750
bundle this is an alternative to the

00:25:43,559 --> 00:25:48,540
serialize that we have already seen I

00:25:45,750 --> 00:25:50,760
cannot tell you which one is better

00:25:48,540 --> 00:25:53,580
because both of them are very good tools

00:25:50,760 --> 00:25:56,880
but they are a slightly different for

00:25:53,580 --> 00:26:00,270
example this one has lots of annotations

00:25:56,880 --> 00:26:02,490
that make that make very straightforward

00:26:00,270 --> 00:26:05,940
to do a lot of different common things

00:26:02,490 --> 00:26:08,490
maybe it's easier to set up and start

00:26:05,940 --> 00:26:11,130
working with it while the sariyer

00:26:08,490 --> 00:26:13,380
component is more about writing your own

00:26:11,130 --> 00:26:16,530
normalize errs which is something very

00:26:13,380 --> 00:26:18,840
it's a bit complex but it's also very

00:26:16,530 --> 00:26:21,510
flexible so it depends on what you have

00:26:18,840 --> 00:26:23,970
to do but both of them worth a try ok

00:26:21,510 --> 00:26:26,970
some cool things that this one has are

00:26:23,970 --> 00:26:29,040
for example these three exclusion

00:26:26,970 --> 00:26:30,750
strategies apart from the groups that we

00:26:29,040 --> 00:26:32,730
already know what's about we have this

00:26:30,750 --> 00:26:35,070
exclude annotation that allows you to

00:26:32,730 --> 00:26:38,309
exclude the properties that you don't

00:26:35,070 --> 00:26:40,500
want to get serialized versions to say

00:26:38,309 --> 00:26:43,620
which properties go in one version or

00:26:40,500 --> 00:26:44,130
another version of the API which are pro

00:26:43,620 --> 00:26:49,710
it has

00:26:44,130 --> 00:26:52,260
beautiful probes it has and events that

00:26:49,710 --> 00:26:54,240
gives you extra flexibility and so on so

00:26:52,260 --> 00:26:56,940
it is really worth a try

00:26:54,240 --> 00:26:59,640
the next bundle is the first responder

00:26:56,940 --> 00:27:02,010
the phosphorous bundle is not one tool

00:26:59,640 --> 00:27:05,400
is like a tool box like a set of tools

00:27:02,010 --> 00:27:09,210
okay that all of them or most of them

00:27:05,400 --> 00:27:11,090
are very helpful I all I wrote here a

00:27:09,210 --> 00:27:13,980
few of them but there are many others

00:27:11,090 --> 00:27:16,350
generally speaking it will be quite

00:27:13,980 --> 00:27:18,420
useful when you have different report

00:27:16,350 --> 00:27:22,170
one to have different representations of

00:27:18,420 --> 00:27:24,030
your inter API of your resources okay

00:27:22,170 --> 00:27:26,400
that's how when you have something like

00:27:24,030 --> 00:27:29,280
that it's a good idea to try this it has

00:27:26,400 --> 00:27:32,010
many thing like a body requested decoder

00:27:29,280 --> 00:27:34,710
a parameter validator and converter it

00:27:32,010 --> 00:27:37,500
has a listener that performs content

00:27:34,710 --> 00:27:40,200
negotiation deciding which format is the

00:27:37,500 --> 00:27:42,450
adequate and so on so it's it's a set of

00:27:40,200 --> 00:27:44,280
tools that if you have never seen it

00:27:42,450 --> 00:27:46,950
maybe you don't miss it but once you

00:27:44,280 --> 00:27:50,780
know it is quite I mean you get quite

00:27:46,950 --> 00:27:55,520
attached to those things okay

00:27:50,780 --> 00:28:01,500
next bundle this bundle is going to

00:27:55,520 --> 00:28:04,950
allow us to have Jason token JSON web

00:28:01,500 --> 00:28:06,720
token authentication okay Jason we have

00:28:04,950 --> 00:28:10,830
talked about this de bundle is based on

00:28:06,720 --> 00:28:12,720
these two libraries one the second one

00:28:10,830 --> 00:28:14,610
of them I think we have the author right

00:28:12,720 --> 00:28:18,120
here and he says speaking tomorrow so

00:28:14,610 --> 00:28:18,870
don't miss that and if you don't know

00:28:18,120 --> 00:28:22,530
what this is about

00:28:18,870 --> 00:28:25,170
the concept is it's kind of easy it's a

00:28:22,530 --> 00:28:27,410
simple way for seven ticketing you will

00:28:25,170 --> 00:28:29,970
be sending your credentials to an

00:28:27,410 --> 00:28:33,270
endpoint that you have configured in

00:28:29,970 --> 00:28:35,610
your in your configuration okay and with

00:28:33,270 --> 00:28:37,560
that you will receive a token okay

00:28:35,610 --> 00:28:40,530
something like that and from that point

00:28:37,560 --> 00:28:43,560
with that token you will be able to make

00:28:40,530 --> 00:28:46,470
your requests being authenticated so

00:28:43,560 --> 00:28:50,340
that that's it okay so it provides a

00:28:46,470 --> 00:28:53,460
simple way of authentication there are

00:28:50,340 --> 00:28:56,370
other ways of course like allows for

00:28:53,460 --> 00:28:57,900
example but in my experience for using

00:28:56,370 --> 00:28:59,340
off you

00:28:57,900 --> 00:29:01,350
really need to have a good reason

00:28:59,340 --> 00:29:04,110
because it's much more complex plot

00:29:01,350 --> 00:29:09,360
complex and many times with this is more

00:29:04,110 --> 00:29:13,860
than enough okay next bundle is going to

00:29:09,360 --> 00:29:16,010
allow us to reach level 3 with what is

00:29:13,860 --> 00:29:18,990
level 3 about level 3 is about returning

00:29:16,010 --> 00:29:23,040
links that allow the consumer of your

00:29:18,990 --> 00:29:26,730
API to discover other things from your

00:29:23,040 --> 00:29:29,160
API ok so it would be something like

00:29:26,730 --> 00:29:31,800
this instead of returning only the

00:29:29,160 --> 00:29:36,000
recipe we will return as well this link

00:29:31,800 --> 00:29:40,620
that's level 3 ok simplifying a bit but

00:29:36,000 --> 00:29:43,860
there how is that we will have an

00:29:40,620 --> 00:29:47,250
annotation that is going to generate the

00:29:43,860 --> 00:29:50,970
routes for us which is very helpful ok

00:29:47,250 --> 00:29:53,520
and just with that you have level 3 so

00:29:50,970 --> 00:29:56,970
now is the question do we have to reach

00:29:53,520 --> 00:30:02,670
level 3 theoretically if you don't do it

00:29:56,970 --> 00:30:06,240
your API is not restful in reality many

00:30:02,670 --> 00:30:08,340
ApS out there don't do it so again this

00:30:06,240 --> 00:30:11,040
is something that depends on you oh who

00:30:08,340 --> 00:30:13,860
are you developing the API for and so on

00:30:11,040 --> 00:30:18,690
so if you want to do it with this bundle

00:30:13,860 --> 00:30:20,820
is I mean this is here and the last

00:30:18,690 --> 00:30:24,960
bundle I want to mention is name your

00:30:20,820 --> 00:30:27,210
API bundle for documentation ok it's

00:30:24,960 --> 00:30:30,180
going to help you keeping your

00:30:27,210 --> 00:30:32,400
documentation updated ok while you are

00:30:30,180 --> 00:30:35,550
coding you will be writing some

00:30:32,400 --> 00:30:37,650
annotations and then from from them is

00:30:35,550 --> 00:30:39,420
going to be generated the documentation

00:30:37,650 --> 00:30:41,100
ok so it's good to read the

00:30:39,420 --> 00:30:44,100
documentation as you know what you are

00:30:41,100 --> 00:30:45,750
coding because otherwise later is much

00:30:44,100 --> 00:30:49,530
more tiring and sometimes you don't do

00:30:45,750 --> 00:30:51,950
it so it's easy to keep the

00:30:49,530 --> 00:30:54,570
documentation updated with this it looks

00:30:51,950 --> 00:30:56,730
the annotations look like this there you

00:30:54,570 --> 00:30:59,010
write all the documentation that you

00:30:56,730 --> 00:31:02,460
need and then it generates something

00:30:59,010 --> 00:31:06,000
like this ok this is the documentation

00:31:02,460 --> 00:31:08,910
this comes from this is Gotham this is

00:31:06,000 --> 00:31:11,830
got by instruct instruct by compaction

00:31:08,910 --> 00:31:14,380
from the code ok and that

00:31:11,830 --> 00:31:18,039
so all these tools have been there

00:31:14,380 --> 00:31:19,750
already for some time what I want to

00:31:18,039 --> 00:31:22,270
show you now are a couple of things that

00:31:19,750 --> 00:31:26,080
are quite new because of course new

00:31:22,270 --> 00:31:30,700
things appear and it's good to know them

00:31:26,080 --> 00:31:33,100
this project API platform is becoming

00:31:30,700 --> 00:31:36,159
quite popular it's built on top of the

00:31:33,100 --> 00:31:39,340
full symphony framework and with it you

00:31:36,159 --> 00:31:40,330
can build an API in 40 seconds I will

00:31:39,340 --> 00:31:45,340
try to show you later

00:31:40,330 --> 00:31:48,130
if it works it has a lot of cool tools

00:31:45,340 --> 00:31:51,940
like I don't know docker integration and

00:31:48,130 --> 00:31:55,690
you can use it with first user JSON web

00:31:51,940 --> 00:31:59,169
tokens bahut PHP you need with postman I

00:31:55,690 --> 00:32:03,340
mean it's really very complete and it's

00:31:59,169 --> 00:32:05,590
worth a try I have tried and you only

00:32:03,340 --> 00:32:08,559
need to type a few comments to have

00:32:05,590 --> 00:32:11,710
actually you're an API working with

00:32:08,559 --> 00:32:14,440
swagger interface included I don't know

00:32:11,710 --> 00:32:17,440
if you have seen it but I'm going to try

00:32:14,440 --> 00:32:22,780
to show you this if it doesn't work well

00:32:17,440 --> 00:32:27,789
I have a video as well but let me see I

00:32:22,780 --> 00:32:32,880
think we have to do just okay we start

00:32:27,789 --> 00:32:36,610
in salad with composer waiting for the

00:32:32,880 --> 00:33:00,250
internet this doesn't count in the 40

00:32:36,610 --> 00:33:06,510
seconds of course I have to enter here

00:33:00,250 --> 00:33:10,200
of course database on the schema

00:33:06,510 --> 00:33:13,200
let's see if we did well this worked

00:33:10,200 --> 00:33:13,200
mm-hmm

00:33:13,809 --> 00:33:16,650
why

00:33:27,990 --> 00:33:32,769
very true

00:33:30,990 --> 00:33:36,340
okay here we go

00:33:32,769 --> 00:33:38,140
this is this sweater in user interface

00:33:36,340 --> 00:33:41,799
that is very cool is going to allow us

00:33:38,140 --> 00:33:45,159
all ready to test our end points so here

00:33:41,799 --> 00:33:47,289
we have the get for example if we try we

00:33:45,159 --> 00:33:50,049
won't receive anything of course because

00:33:47,289 --> 00:33:54,370
we don't have anything only a 200

00:33:50,049 --> 00:33:58,000
response okay that's it if we want to

00:33:54,370 --> 00:34:07,059
post something we have this as an

00:33:58,000 --> 00:34:09,460
example we put here hey okay probably if

00:34:07,059 --> 00:34:13,679
we now get what we have it will be there

00:34:09,460 --> 00:34:17,409
yeah here it is so this is quite

00:34:13,679 --> 00:34:19,060
complete for the time that it took of

00:34:17,409 --> 00:34:22,089
course it has it has been done with a

00:34:19,060 --> 00:34:26,429
default entity but you can do something

00:34:22,089 --> 00:34:35,020
similar very quick alright

00:34:26,429 --> 00:34:37,530
okay so that was API platform so what

00:34:35,020 --> 00:34:37,530
else do we have

00:34:38,110 --> 00:34:46,840
my head is too small for this and next

00:34:43,780 --> 00:34:52,450
November is going to be released soon 24

00:34:46,840 --> 00:34:54,070
and same 24 well if you have been in my

00:34:52,450 --> 00:34:56,740
previous talk you already know but it's

00:34:54,070 --> 00:34:59,800
moving towards making configuration much

00:34:56,740 --> 00:35:01,980
more faster to allow you to spend very

00:34:59,800 --> 00:35:08,140
little time in configuring things okay

00:35:01,980 --> 00:35:10,480
so it's also moving towards the idea

00:35:08,140 --> 00:35:14,080
behind is to allow you to make for you

00:35:10,480 --> 00:35:16,450
very simple to have a project with few

00:35:14,080 --> 00:35:18,760
dependencies and also simple to have a

00:35:16,450 --> 00:35:20,770
project with lots of dependencies what

00:35:18,760 --> 00:35:22,690
because they want to make very easy to

00:35:20,770 --> 00:35:26,140
install and install configure and

00:35:22,690 --> 00:35:28,570
configure so it should be and it will be

00:35:26,140 --> 00:35:30,760
very easy to have an API project that

00:35:28,570 --> 00:35:33,400
only has the things that you need for an

00:35:30,760 --> 00:35:34,870
API and not all the other stuff that you

00:35:33,400 --> 00:35:37,510
don't need so this is the idea of

00:35:34,870 --> 00:35:39,520
symphonia form to really let you have

00:35:37,510 --> 00:35:42,580
the dependencies that you need exactly

00:35:39,520 --> 00:35:44,980
and not anything else so far the

00:35:42,580 --> 00:35:47,820
importance here like I think it was two

00:35:44,980 --> 00:35:51,730
weeks ago he posted a screencast

00:35:47,820 --> 00:35:54,760
creating with symphony flex an API

00:35:51,730 --> 00:35:56,500
platform an API project so you will have

00:35:54,760 --> 00:35:58,450
a symphony project with the API platform

00:35:56,500 --> 00:36:00,700
plus whatever else you want to have

00:35:58,450 --> 00:36:02,740
there and it took for him yeah only a

00:36:00,700 --> 00:36:04,030
couple a couple of minutes to have it so

00:36:02,740 --> 00:36:07,620
if you have not watch it

00:36:04,030 --> 00:36:10,660
have a look because it's actually quite

00:36:07,620 --> 00:36:12,160
exciting we are waiting to see how it

00:36:10,660 --> 00:36:16,450
actually works

00:36:12,160 --> 00:36:18,610
okay so that was it let's try to us to

00:36:16,450 --> 00:36:21,490
remark a few things that is important to

00:36:18,610 --> 00:36:24,670
remember from this talk the first of

00:36:21,490 --> 00:36:26,950
them is whatever choices you make while

00:36:24,670 --> 00:36:29,440
building your API do you really need to

00:36:26,950 --> 00:36:31,750
be consistent with them and you should

00:36:29,440 --> 00:36:34,450
be taking profit of using a common

00:36:31,750 --> 00:36:37,390
language okay rest on the symphony

00:36:34,450 --> 00:36:39,550
components will make that easy okay they

00:36:37,390 --> 00:36:41,710
fit very well together a few components

00:36:39,550 --> 00:36:43,930
provide a lot and if you want more help

00:36:41,710 --> 00:36:47,530
you have the option of using the whole

00:36:43,930 --> 00:36:50,380
framework and finally Symphony choir

00:36:47,530 --> 00:36:52,030
signals in 24 and symphony flex are

00:36:50,380 --> 00:36:54,790
moving towards making

00:36:52,030 --> 00:36:56,920
all these very quick to configure and it

00:36:54,790 --> 00:36:58,780
will be very straightforward to have a

00:36:56,920 --> 00:37:01,300
project with your API plus whatever

00:36:58,780 --> 00:37:02,800
whatever else you want what however this

00:37:01,300 --> 00:37:05,620
does not mean that we don't need to

00:37:02,800 --> 00:37:08,980
understand all that is below that of

00:37:05,620 --> 00:37:11,350
course we have to and simply remember

00:37:08,980 --> 00:37:13,660
that building ApS is more about being

00:37:11,350 --> 00:37:14,890
cool calm and really really consistent

00:37:13,660 --> 00:37:16,330
that's it

00:37:14,890 --> 00:37:24,349
thank you

00:37:16,330 --> 00:37:39,029
[Applause]

00:37:24,349 --> 00:37:42,839
questions yep if you need the others you

00:37:39,029 --> 00:37:45,239
should use them but I normally but you

00:37:42,839 --> 00:37:48,089
will need it at some point but normally

00:37:45,239 --> 00:38:07,670
with the basic ones that you know is is

00:37:48,089 --> 00:38:13,259
enough yeah something else okay we use

00:38:07,670 --> 00:38:17,009
gasoline PHP unit which is yep very yeah

00:38:13,259 --> 00:38:33,029
simple but it works and yeah enough more

00:38:17,009 --> 00:38:35,699
than enough something else yep no magic

00:38:33,029 --> 00:38:37,979
applies there sorry I mean it depends on

00:38:35,699 --> 00:38:40,249
the concrete problem I cannot tell you

00:38:37,979 --> 00:38:46,570
yeah

00:38:40,249 --> 00:38:47,990
something else thank you then thanks

00:38:46,570 --> 00:38:52,949
[Applause]

00:38:47,990 --> 00:38:52,949

YouTube URL: https://www.youtube.com/watch?v=9252m9sdRTQ


