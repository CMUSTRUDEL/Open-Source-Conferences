Title: Squash Bugs with Static Analysis | Dave Liddament | IPC 2018
Publication date: 2019-01-23
Playlist: International PHP Conference 2018
Description: 
	Dave Liddament (Lamp Bristol): All developers know that bugs are bad and finding them can be difficult. The good news is that tools to help us find and prevent them are becoming more powerful. Modern static analysis tools (like Psalm, Phan and PHPStan) are far more advanced than their predecessors. They can find a whole range of bugs whilst keeping the false positive rate low. This talk introduces more advanced static analysis. It will show the kinds of bugs that the more advanced static analysis tools can find. We’ll then look at how they can be added to your current development work flow. Finally, we’ll look at how we can write our code in a way to get the most out of static analysis.
Captions: 
	00:00:00,160 --> 00:00:04,209
[Music]

00:00:06,069 --> 00:00:13,849
okay thanks very much for coming along

00:00:09,260 --> 00:00:16,369
and hopefully we'll hear for squash bugs

00:00:13,849 --> 00:00:19,250
for the static analysis my name's Dave

00:00:16,369 --> 00:00:21,320
ligaments and what I want to convince

00:00:19,250 --> 00:00:23,000
you by the end of this talk if you're

00:00:21,320 --> 00:00:24,380
not already convinced is that

00:00:23,000 --> 00:00:26,480
appropriate application of static

00:00:24,380 --> 00:00:29,529
analysis I will juice the overall cost

00:00:26,480 --> 00:00:31,849
of our software development and the way

00:00:29,529 --> 00:00:35,510
static analysis can help reduce the cost

00:00:31,849 --> 00:00:38,629
of overall software development is if we

00:00:35,510 --> 00:00:40,129
imagine how much a bug costs generally

00:00:38,629 --> 00:00:41,840
the later we find it we probably seen

00:00:40,129 --> 00:00:44,390
graphs like that the longer bug Fester's

00:00:41,840 --> 00:00:46,190
and in the system or the later it is we

00:00:44,390 --> 00:00:49,010
find it generally the higher the cost of

00:00:46,190 --> 00:00:50,570
fixing and rectifying that bug is so

00:00:49,010 --> 00:00:54,140
what we really wants to do is take

00:00:50,570 --> 00:00:55,460
expensive bugs and a main Sandoval and

00:00:54,140 --> 00:00:58,249
push them all the way down there and

00:00:55,460 --> 00:00:59,839
potentially not even introduce them into

00:00:58,249 --> 00:01:00,289
our code base in the first in the first

00:00:59,839 --> 00:01:02,480
place

00:01:00,289 --> 00:01:03,829
so if we can do that then we reduce cost

00:01:02,480 --> 00:01:07,610
and we're gonna see how static analysis

00:01:03,829 --> 00:01:08,960
can help to do that and there's lots of

00:01:07,610 --> 00:01:10,490
great talks going on right now so to

00:01:08,960 --> 00:01:13,610
make sure you're all in the right room

00:01:10,490 --> 00:01:15,350
and if you don't use that any static

00:01:13,610 --> 00:01:17,299
analysis or any basic static analysis

00:01:15,350 --> 00:01:19,610
and you want to find out more about the

00:01:17,299 --> 00:01:21,500
advanced tools this this hopefully it's

00:01:19,610 --> 00:01:23,240
a place for you and but if you're

00:01:21,500 --> 00:01:25,240
already using powerful ideas and you've

00:01:23,240 --> 00:01:29,240
always already got things like some and

00:01:25,240 --> 00:01:31,640
PHP stand in ECI then maybe you want to

00:01:29,240 --> 00:01:34,549
try try somewhere else I shall be

00:01:31,640 --> 00:01:35,930
offended okay so our agenda it's

00:01:34,549 --> 00:01:37,640
basically my story I'm gonna go from

00:01:35,930 --> 00:01:39,770
where I was doing no static analysis at

00:01:37,640 --> 00:01:41,810
all - recently advanced static analysis

00:01:39,770 --> 00:01:43,159
I'd kind of take you on the journey and

00:01:41,810 --> 00:01:45,380
hopefully wherever you are on that

00:01:43,159 --> 00:01:47,270
journey and you can move along to there

00:01:45,380 --> 00:01:49,130
to the next step of your of your static

00:01:47,270 --> 00:01:50,539
analysis journey and but before we start

00:01:49,130 --> 00:01:52,579
we'll have a quick discussion of a

00:01:50,539 --> 00:01:55,909
static analysis and how it differs and

00:01:52,579 --> 00:01:58,460
from testing and who is is telling this

00:01:55,909 --> 00:02:01,429
story at me my name's Dave ligament and

00:01:58,460 --> 00:02:03,859
I work for small software consultancy

00:02:01,429 --> 00:02:05,479
called lamp Bristol in the UK helped

00:02:03,859 --> 00:02:09,860
organized a couple of meetups over there

00:02:05,479 --> 00:02:12,050
and when I'm not doing coding related

00:02:09,860 --> 00:02:13,790
stuff you might find me running or scuba

00:02:12,050 --> 00:02:15,380
diving and that's that's me in the in

00:02:13,790 --> 00:02:17,540
the silly Owens

00:02:15,380 --> 00:02:20,510
but enough of that we're here to learn

00:02:17,540 --> 00:02:23,450
about static analysis so static analysis

00:02:20,510 --> 00:02:25,100
is looking at the code and reasoning as

00:02:23,450 --> 00:02:26,630
to whether it is correct or whether

00:02:25,100 --> 00:02:29,630
actually whether is potentially an issue

00:02:26,630 --> 00:02:33,650
with it um so we're gonna do some static

00:02:29,630 --> 00:02:37,400
analysis now is this code correct with

00:02:33,650 --> 00:02:39,680
all the available information we have so

00:02:37,400 --> 00:02:43,400
let's have a look at it we're assigning

00:02:39,680 --> 00:02:46,910
a an integer value 1 we're then calling

00:02:43,400 --> 00:02:49,700
process passing a which is intuitive al

00:02:46,910 --> 00:02:54,530
u 1 to the to the function process and

00:02:49,700 --> 00:02:58,850
we can see the process takes process

00:02:54,530 --> 00:03:02,030
takes something called user but we now

00:02:58,850 --> 00:03:03,320
have no more information about that so

00:03:02,030 --> 00:03:05,990
as far as we can see with all the

00:03:03,320 --> 00:03:08,060
relevant in from the implement with all

00:03:05,990 --> 00:03:10,070
the available information we have here

00:03:08,060 --> 00:03:11,120
this is probably valid we'd have to go

00:03:10,070 --> 00:03:13,160
and look at what's going on inside

00:03:11,120 --> 00:03:19,400
process to decide if that was not the

00:03:13,160 --> 00:03:21,020
case however how about this code here

00:03:19,400 --> 00:03:23,000
was throwing off the same we're giving a

00:03:21,020 --> 00:03:26,300
and interest of value 1 with then

00:03:23,000 --> 00:03:28,190
calling process passing a to it and we

00:03:26,300 --> 00:03:30,260
can see here that process is expecting a

00:03:28,190 --> 00:03:31,910
user object so the fact we're passing an

00:03:30,260 --> 00:03:34,400
integer means that if we round this code

00:03:31,910 --> 00:03:36,620
for real we would get a type error

00:03:34,400 --> 00:03:39,380
saying I'm expecting user I've been

00:03:36,620 --> 00:03:41,000
given int so if we ran this code this

00:03:39,380 --> 00:03:43,520
would definitely fail and this is what

00:03:41,000 --> 00:03:45,650
static analysis does it tells us that

00:03:43,520 --> 00:03:47,570
our code is incorrect no amount of

00:03:45,650 --> 00:03:49,580
static analysis can tell us that our

00:03:47,570 --> 00:03:51,590
code you know is functioning correctly

00:03:49,580 --> 00:03:53,900
and doing what it's designed to do it

00:03:51,590 --> 00:03:56,990
just nags us and tells us things are

00:03:53,900 --> 00:03:59,120
wrong Werth's tests a kind of the

00:03:56,990 --> 00:04:01,459
opposite really imagine we've got some

00:03:59,120 --> 00:04:03,260
really simple code I make no apology I

00:04:01,459 --> 00:04:04,880
just want the code to be simple so it's

00:04:03,260 --> 00:04:06,680
already four o'clock and I think too

00:04:04,880 --> 00:04:08,720
much about it and hopefully the people

00:04:06,680 --> 00:04:10,970
at the back can read it as well and it's

00:04:08,720 --> 00:04:12,790
a pretty simple method it's get price we

00:04:10,970 --> 00:04:17,299
give it a type it returns an integer and

00:04:12,790 --> 00:04:19,160
if type is child we set price to 10 if

00:04:17,299 --> 00:04:23,000
type is a null we said it's 20 and

00:04:19,160 --> 00:04:24,410
finally we return price so if I wanted

00:04:23,000 --> 00:04:27,720
to test that we've got some really

00:04:24,410 --> 00:04:29,490
simple test cases we do test case 1

00:04:27,720 --> 00:04:31,860
we input child we expect the output to

00:04:29,490 --> 00:04:34,800
be turn test case to win per adult we

00:04:31,860 --> 00:04:37,020
expect the output to be twenty and no

00:04:34,800 --> 00:04:40,200
great surprise there and if we run those

00:04:37,020 --> 00:04:43,890
tests on this on this code here all our

00:04:40,200 --> 00:04:46,320
tests would pass and interestingly if we

00:04:43,890 --> 00:04:49,250
round the code we ran our test on the

00:04:46,320 --> 00:04:51,810
code as it is written here we also have

00:04:49,250 --> 00:04:54,090
100% code coverage every line would have

00:04:51,810 --> 00:04:55,470
been executed and also every branch

00:04:54,090 --> 00:04:56,790
every if statement will have taken both

00:04:55,470 --> 00:05:01,230
the true and the false

00:04:56,790 --> 00:05:03,330
branches of it so tests tell us for the

00:05:01,230 --> 00:05:05,160
particular scenario we're testing that

00:05:03,330 --> 00:05:07,710
everything's working correctly assuming

00:05:05,160 --> 00:05:09,120
of course the test passes so what we do

00:05:07,710 --> 00:05:11,430
when we're writing test Suites is we

00:05:09,120 --> 00:05:13,110
hopefully do relatively sensible testing

00:05:11,430 --> 00:05:15,450
well you think about the happy path we

00:05:13,110 --> 00:05:17,400
think about the edge cases and then with

00:05:15,450 --> 00:05:18,750
all these tests in combination we say

00:05:17,400 --> 00:05:21,000
what we're pretty confident that

00:05:18,750 --> 00:05:23,190
everything's working correctly but we've

00:05:21,000 --> 00:05:26,190
only tested the scenarios in those test

00:05:23,190 --> 00:05:28,290
cases nothing else so if we gave the

00:05:26,190 --> 00:05:33,240
same code to static analysis

00:05:28,290 --> 00:05:36,180
it might wind about it it might say well

00:05:33,240 --> 00:05:37,950
there's a chance that price is undefined

00:05:36,180 --> 00:05:39,810
we've got a possibly undefined variable

00:05:37,950 --> 00:05:42,120
because if we pass in something that

00:05:39,810 --> 00:05:43,650
isn't child or isn't adults then we get

00:05:42,120 --> 00:05:45,120
to the return statement and price hasn't

00:05:43,650 --> 00:05:48,330
been sets the price will be null and

00:05:45,120 --> 00:05:50,940
then when we try and return something

00:05:48,330 --> 00:05:52,950
our contract with whoever is calling get

00:05:50,940 --> 00:05:56,100
prices will return in integer we're

00:05:52,950 --> 00:05:59,430
trying to return null and so we'll get

00:05:56,100 --> 00:06:01,979
an issue there so essentially static

00:05:59,430 --> 00:06:03,510
analysis tells us we made mistakes tests

00:06:01,979 --> 00:06:07,680
colors for the scenario we've tested

00:06:03,510 --> 00:06:10,530
everything is working correctly so

00:06:07,680 --> 00:06:13,560
that's our Prolog now now we're ready

00:06:10,530 --> 00:06:16,380
for my story and a bit of confession

00:06:13,560 --> 00:06:18,960
time the first PHP code looked very

00:06:16,380 --> 00:06:21,419
similar to this and which is pretty

00:06:18,960 --> 00:06:24,120
pretty awful code really it was it was a

00:06:21,419 --> 00:06:26,370
long time ago it was 2005 and not only

00:06:24,120 --> 00:06:28,919
was my code only 2005 Ajax had only just

00:06:26,370 --> 00:06:31,650
been invented you know it's a long time

00:06:28,919 --> 00:06:34,860
ago that's that's my excuse anyway and

00:06:31,650 --> 00:06:36,450
not only that um I didn't have any tests

00:06:34,860 --> 00:06:38,700
where my testing was basically hitting

00:06:36,450 --> 00:06:40,080
f5 on the browser and hoping everything

00:06:38,700 --> 00:06:42,060
still worked

00:06:40,080 --> 00:06:44,460
and then the tool I was using to write

00:06:42,060 --> 00:06:46,110
my PHP code it didn't have any syntax

00:06:44,460 --> 00:06:47,129
highlighting it wouldn't tell me of any

00:06:46,110 --> 00:06:50,069
mistakes I've made

00:06:47,129 --> 00:06:52,050
and so that was bubbles and great and

00:06:50,069 --> 00:06:53,849
also I didn't have any automated linting

00:06:52,050 --> 00:06:56,280
any basic static analysis to tell me

00:06:53,849 --> 00:06:57,990
I've made mistakes and essentially these

00:06:56,280 --> 00:06:59,610
last two points we're checking the same

00:06:57,990 --> 00:07:03,780
thing you notice the code is the code

00:06:59,610 --> 00:07:05,669
correct and the first one I've got a

00:07:03,780 --> 00:07:07,169
called real-time static analysis if I've

00:07:05,669 --> 00:07:09,060
got a code editor and it's telling me

00:07:07,169 --> 00:07:11,069
I'm making mistakes as I make them

00:07:09,060 --> 00:07:13,409
that's kind of real-time static analysis

00:07:11,069 --> 00:07:15,919
and they'll help me fix or even prevent

00:07:13,409 --> 00:07:18,300
pin bugs in in the first place and then

00:07:15,919 --> 00:07:21,090
the automated testing is something I'd

00:07:18,300 --> 00:07:24,900
do as part of CI so if we think about

00:07:21,090 --> 00:07:26,610
our cost of a bug you know see how I can

00:07:24,900 --> 00:07:28,590
help us potentially take bugs from this

00:07:26,610 --> 00:07:32,270
expensive maintenance phrase and do it

00:07:28,590 --> 00:07:35,069
whenever we run our CI and and then

00:07:32,270 --> 00:07:38,129
real-time static analysis can take any

00:07:35,069 --> 00:07:39,689
bugs and potentially make them obvious

00:07:38,129 --> 00:07:42,599
to us as we write in the code and

00:07:39,689 --> 00:07:45,750
potentially even before then so our

00:07:42,599 --> 00:07:47,580
first takeaway I think is if whatever

00:07:45,750 --> 00:07:49,680
editor you're using throughout your PHP

00:07:47,580 --> 00:07:51,930
code today if it can't point out these

00:07:49,680 --> 00:07:54,539
kind of basic mistakes like I'm missing

00:07:51,930 --> 00:07:56,969
a dollar on price or I'm missing a

00:07:54,539 --> 00:07:58,800
semicolon here I've misspelled pattern

00:07:56,969 --> 00:08:00,659
and it'd be nice if you could also tell

00:07:58,800 --> 00:08:03,419
you we've got typos as well and we'll

00:08:00,659 --> 00:08:05,729
see why that's important later if you

00:08:03,419 --> 00:08:08,099
all tool that you're using to write code

00:08:05,729 --> 00:08:09,779
cannot do these kind of checks then next

00:08:08,099 --> 00:08:11,339
time you're the next time you're writing

00:08:09,779 --> 00:08:14,180
some PHP think about getting another

00:08:11,339 --> 00:08:16,319
tool and we'll talk about one later and

00:08:14,180 --> 00:08:19,199
the second thing is you really want some

00:08:16,319 --> 00:08:20,719
automated and linting at the very least

00:08:19,199 --> 00:08:24,289
as part of your continuous integration

00:08:20,719 --> 00:08:27,120
so these days I use parallel lint and

00:08:24,289 --> 00:08:28,919
that's how you install it and then you

00:08:27,120 --> 00:08:31,669
just run it just point it out the

00:08:28,919 --> 00:08:35,519
directory you want to do your linting on

00:08:31,669 --> 00:08:36,659
and while we're on the subject of the CI

00:08:35,519 --> 00:08:38,279
it's all set these are the kind of

00:08:36,659 --> 00:08:41,430
things that I drop into my continuous

00:08:38,279 --> 00:08:42,719
integration and Anthony in the last year

00:08:41,430 --> 00:08:44,519
I've done compose validate which is

00:08:42,719 --> 00:08:46,440
quite good it checks that your and

00:08:44,519 --> 00:08:49,350
composer JSON is valid and it also

00:08:46,440 --> 00:08:51,029
checks the composer Jason and the

00:08:49,350 --> 00:08:53,040
composers door lock file are in step

00:08:51,029 --> 00:08:53,980
with each other so I definitely add that

00:08:53,040 --> 00:08:57,459
into you

00:08:53,980 --> 00:09:00,430
di parent we've talked about and some

00:08:57,459 --> 00:09:02,529
kind of some kind of tool that checks

00:09:00,430 --> 00:09:05,860
that your coding standards are being a

00:09:02,529 --> 00:09:08,350
dear to so I use pH pcs fixer there's

00:09:05,860 --> 00:09:11,139
also pH PCs doesn't matter which one you

00:09:08,350 --> 00:09:15,459
use but definitely add that in and to

00:09:11,139 --> 00:09:17,889
your to your CI because I can be a bit

00:09:15,459 --> 00:09:20,079
lazy sometimes I do my debugging by

00:09:17,889 --> 00:09:20,380
putting var dumps into my code sorry

00:09:20,079 --> 00:09:22,630
about that

00:09:20,380 --> 00:09:24,339
and var dump chequered then goes through

00:09:22,630 --> 00:09:26,589
your code to check you haven't left any

00:09:24,339 --> 00:09:28,510
of those in your code so again it's a

00:09:26,589 --> 00:09:31,839
nice little chapter to add into your CI

00:09:28,510 --> 00:09:33,940
it's a pretty quick thing to do the

00:09:31,839 --> 00:09:35,440
center lab security checker that's quite

00:09:33,940 --> 00:09:37,660
a neat tool as well it looks at your

00:09:35,440 --> 00:09:39,639
composer files it works out what

00:09:37,660 --> 00:09:43,630
packages you've got installed and then

00:09:39,639 --> 00:09:46,660
it references a library of all the

00:09:43,630 --> 00:09:48,430
reported security vulnerabilities and

00:09:46,660 --> 00:09:49,870
then it will let you know if you're

00:09:48,430 --> 00:09:51,880
using packages that have any of those

00:09:49,870 --> 00:09:54,250
and in fact probably what the best

00:09:51,880 --> 00:09:56,529
resource for PHP static analysis on the

00:09:54,250 --> 00:09:58,240
Internet just Google PHP static analysis

00:09:56,529 --> 00:10:00,790
tools I bet this will take you to that

00:09:58,240 --> 00:10:03,069
the first link and that page has got

00:10:00,790 --> 00:10:05,199
like fifty or so different static

00:10:03,069 --> 00:10:09,120
analysis tools have a look at them and

00:10:05,199 --> 00:10:13,000
start adding them into your CI process a

00:10:09,120 --> 00:10:15,550
few more I do these definitely in

00:10:13,000 --> 00:10:17,079
Symphony 302 symphony for yet but in a

00:10:15,550 --> 00:10:18,850
few more linting things you know check

00:10:17,079 --> 00:10:20,529
your Yama's okay check it tweaks okay

00:10:18,850 --> 00:10:22,630
check your doctrine schemas alright

00:10:20,529 --> 00:10:26,050
really quick checks just add them in and

00:10:22,630 --> 00:10:28,120
you've got those checks forever so

00:10:26,050 --> 00:10:29,980
hopefully you're in agreement even if

00:10:28,120 --> 00:10:32,800
you just do those basic two checks and

00:10:29,980 --> 00:10:38,529
we add them in as part of our CI and we

00:10:32,800 --> 00:10:40,420
get a PHP editor which does real-time

00:10:38,529 --> 00:10:42,639
static analysis if we just start doing

00:10:40,420 --> 00:10:44,380
that we will catch bugs sooner and we

00:10:42,639 --> 00:10:45,670
will reduce the overall cost and all the

00:10:44,380 --> 00:10:47,319
stuff I've talked about so far you

00:10:45,670 --> 00:10:48,940
almost get for free just set it up once

00:10:47,319 --> 00:10:51,270
and it's there forever and you can reuse

00:10:48,940 --> 00:10:53,640
it on all your projects

00:10:51,270 --> 00:10:55,140
so that was kind of where warrants start

00:10:53,640 --> 00:10:57,720
from nothing to some kind of relatively

00:10:55,140 --> 00:10:59,940
basic static analysis and then I went

00:10:57,720 --> 00:11:02,310
off and did something quite different an

00:10:59,940 --> 00:11:06,000
opportunity came up as well as PHP I was

00:11:02,310 --> 00:11:09,000
working with Java and C and C++ at time

00:11:06,000 --> 00:11:10,649
and I went off to do a job and it's

00:11:09,000 --> 00:11:12,089
about a decade ago now and it's quite a

00:11:10,649 --> 00:11:15,480
powerful tool at a time but it was a

00:11:12,089 --> 00:11:18,810
static analysis tool for Java and C and

00:11:15,480 --> 00:11:21,839
C++ and my job was to golfed customer

00:11:18,810 --> 00:11:23,010
sites install that that all run it

00:11:21,839 --> 00:11:25,170
through on their code base and we'd have

00:11:23,010 --> 00:11:27,120
a long discussion as to what it was

00:11:25,170 --> 00:11:29,250
found and whether they could live with

00:11:27,120 --> 00:11:32,610
without this amazing tool we were trying

00:11:29,250 --> 00:11:35,160
to sell them um and a great deal of time

00:11:32,610 --> 00:11:37,970
was spent discussing and what is a bug

00:11:35,160 --> 00:11:39,959
and our bugs really bugs so

00:11:37,970 --> 00:11:41,130
unfortunately a long time afterwards I

00:11:39,959 --> 00:11:42,540
kind of thought there's really four

00:11:41,130 --> 00:11:44,490
kinds of bugs you get from static

00:11:42,540 --> 00:11:46,709
analysis tools there's there's genuine

00:11:44,490 --> 00:11:48,600
bugs as things if you ran it everything

00:11:46,709 --> 00:11:51,450
would go wrong then we've got three more

00:11:48,600 --> 00:11:53,459
those deferred bugs evolvability defects

00:11:51,450 --> 00:11:55,020
and false positives

00:11:53,459 --> 00:11:58,529
you always get some kind of false

00:11:55,020 --> 00:12:00,570
positives and static analysis tools so

00:11:58,529 --> 00:12:01,860
this is the real bug that we saw earlier

00:12:00,570 --> 00:12:04,050
we're basically trying to pass an

00:12:01,860 --> 00:12:06,570
integer into something that only accepts

00:12:04,050 --> 00:12:09,420
and something type user that's a real

00:12:06,570 --> 00:12:12,060
bug if we ran that code it would fail I

00:12:09,420 --> 00:12:15,570
don't think anyone's going to debate

00:12:12,060 --> 00:12:17,720
that one and this is an interesting bug

00:12:15,570 --> 00:12:20,640
I need to give you the context actually

00:12:17,720 --> 00:12:27,209
mmm can we see where the bug might be

00:12:20,640 --> 00:12:30,209
here okay we've misspelled person we've

00:12:27,209 --> 00:12:31,770
inconsistently spelled person and the

00:12:30,209 --> 00:12:34,200
interesting thing about this bug was

00:12:31,770 --> 00:12:37,200
this is responsible it was a bug like

00:12:34,200 --> 00:12:39,000
this which inspired Matt Brown from

00:12:37,200 --> 00:12:41,610
Vimeo to write Psalm which is one of the

00:12:39,000 --> 00:12:45,720
first what I think is quite advanced PHP

00:12:41,610 --> 00:12:47,430
and static analysis tools and if you

00:12:45,720 --> 00:12:49,740
just google finding code that ain't

00:12:47,430 --> 00:12:51,420
broke by Matt Brown it will take it to

00:12:49,740 --> 00:12:53,970
the link really interesting read he

00:12:51,420 --> 00:12:55,470
talks about some terrible release where

00:12:53,970 --> 00:12:57,390
everything went wrong and then they

00:12:55,470 --> 00:12:59,220
basically had a look at it what went

00:12:57,390 --> 00:13:01,170
wrong and it was because something had

00:12:59,220 --> 00:13:03,180
been missed named and he thought this is

00:13:01,170 --> 00:13:06,189
the kind of thing we really should be

00:13:03,180 --> 00:13:09,170
able to catch with static analysis

00:13:06,189 --> 00:13:11,930
so that's real real bugs if you found

00:13:09,170 --> 00:13:14,209
the code it would crash then we've got

00:13:11,930 --> 00:13:16,850
like this example earlier I'm gonna call

00:13:14,209 --> 00:13:21,319
these deferred bugs so this code works

00:13:16,850 --> 00:13:25,459
as long as and will always give child or

00:13:21,319 --> 00:13:26,749
adults as a type and the problem is

00:13:25,459 --> 00:13:27,889
obviously forgive anything else than

00:13:26,749 --> 00:13:30,259
child about alt then then we're gonna

00:13:27,889 --> 00:13:31,519
get in run into trouble and and lots of

00:13:30,259 --> 00:13:33,050
the discussions I had when I was trying

00:13:31,519 --> 00:13:34,279
to sell this tool to people as you say

00:13:33,050 --> 00:13:36,439
well these things these things aren't

00:13:34,279 --> 00:13:38,899
really bugs are they and what would

00:13:36,439 --> 00:13:40,490
often happen is we'd have a discussion

00:13:38,899 --> 00:13:41,569
they would they would go away and have a

00:13:40,490 --> 00:13:43,730
look at the code and they'd say look

00:13:41,569 --> 00:13:46,389
I've looked at three times we've called

00:13:43,730 --> 00:13:49,249
get price and we always use child or

00:13:46,389 --> 00:13:50,990
adult and that's fine and it took them

00:13:49,249 --> 00:13:53,449
half an hour to work that out and then

00:13:50,990 --> 00:13:55,939
I'll say well okay that's fine and but

00:13:53,449 --> 00:13:58,220
do we know from now till the end of this

00:13:55,939 --> 00:14:00,259
project that will always call get price

00:13:58,220 --> 00:14:04,100
for just those two values and you just

00:14:00,259 --> 00:14:09,529
don't know so often it's quicker to fix

00:14:04,100 --> 00:14:11,749
these bugs than to risk them I think so

00:14:09,529 --> 00:14:14,809
the third caller bugs their evolvability

00:14:11,749 --> 00:14:16,519
defects and an evolvability defect are

00:14:14,809 --> 00:14:18,649
we the south's code that makes the code

00:14:16,519 --> 00:14:20,749
base less compliant with standards more

00:14:18,649 --> 00:14:23,809
error-prone or more difficult to modify

00:14:20,749 --> 00:14:26,600
extend or understand so it's a posh word

00:14:23,809 --> 00:14:31,220
for technical debt and and people have

00:14:26,600 --> 00:14:32,749
studied evolvability defects they cost a

00:14:31,220 --> 00:14:35,600
lot of money there's there's some links

00:14:32,749 --> 00:14:36,829
to some articles that if you get slides

00:14:35,600 --> 00:14:39,139
at the end there's this slide at the end

00:14:36,829 --> 00:14:40,370
which shows all the references so if you

00:14:39,139 --> 00:14:41,720
are having arguments of people about

00:14:40,370 --> 00:14:43,970
technical debt and whether it should be

00:14:41,720 --> 00:14:45,110
addressed here are some studies where

00:14:43,970 --> 00:14:47,480
they've actually kind of put figures on

00:14:45,110 --> 00:14:49,730
these things so like 30 28 % longer to

00:14:47,480 --> 00:14:52,939
develop new features on code that's no

00:14:49,730 --> 00:14:55,309
evolvability and fixing bugs takes 30

00:14:52,939 --> 00:14:57,649
percent 36 percent longer now as

00:14:55,309 --> 00:14:59,179
developers you will know this and but

00:14:57,649 --> 00:15:01,040
sometimes you need to back that up with

00:14:59,179 --> 00:15:03,470
like real facts of stuff when you when

00:15:01,040 --> 00:15:05,059
you go off to management so I'm have a

00:15:03,470 --> 00:15:07,600
look at the slides at the end and and

00:15:05,059 --> 00:15:10,210
have a look at those articles

00:15:07,600 --> 00:15:12,880
so I kind of really simple evolvability

00:15:10,210 --> 00:15:14,290
defect here we send the dot block we're

00:15:12,880 --> 00:15:15,700
returning an inch but actually if we

00:15:14,290 --> 00:15:16,870
look inside it doesn't look like an inn

00:15:15,700 --> 00:15:19,000
to me we're returning it looks like a

00:15:16,870 --> 00:15:20,530
string now probably this code is

00:15:19,000 --> 00:15:23,140
functioning absolute functioning

00:15:20,530 --> 00:15:24,790
absolutely fine but at some time in the

00:15:23,140 --> 00:15:27,400
future when we want to make a small

00:15:24,790 --> 00:15:29,500
change this is misleading that dot block

00:15:27,400 --> 00:15:32,020
is misleading and we don't have any

00:15:29,500 --> 00:15:33,460
return type on the function it will

00:15:32,020 --> 00:15:35,650
cause trouble people will be a little

00:15:33,460 --> 00:15:37,180
unexpected if they read this and to see

00:15:35,650 --> 00:15:39,840
that essentially returning a string

00:15:37,180 --> 00:15:39,840
instead of an INT

00:15:45,070 --> 00:15:50,870
so and there's also false positives and

00:15:48,620 --> 00:15:52,070
which aren't really bugs but everyone

00:15:50,870 --> 00:15:53,930
kind of agreed that the first set of

00:15:52,070 --> 00:15:55,580
bugs were bugs and then I'm gonna say

00:15:53,930 --> 00:15:57,260
let the next three sets probably are

00:15:55,580 --> 00:16:00,430
bugs really there are going to be some

00:15:57,260 --> 00:16:02,660
costs there and even the false positives

00:16:00,430 --> 00:16:04,790
often once you get to understand your

00:16:02,660 --> 00:16:06,710
static analysis tools you can do you can

00:16:04,790 --> 00:16:08,090
do your static analysis in it you can

00:16:06,710 --> 00:16:09,470
write your code in a different way which

00:16:08,090 --> 00:16:11,300
won't trigger the static analysis

00:16:09,470 --> 00:16:13,430
warnings and often that's the clearer

00:16:11,300 --> 00:16:14,810
way of doing it anyway so I could be all

00:16:13,430 --> 00:16:18,170
of these are bugs but definitely I think

00:16:14,810 --> 00:16:21,260
that the top three are that said and

00:16:18,170 --> 00:16:22,850
you'll go through annual fix all the

00:16:21,260 --> 00:16:25,220
really critical bugs all the thing in

00:16:22,850 --> 00:16:26,600
you know the first set and you still

00:16:25,220 --> 00:16:28,520
might have hundreds of bugs left or

00:16:26,600 --> 00:16:30,080
thousands of bugs left and when I'm

00:16:28,520 --> 00:16:31,520
there I am trying to sell this talk to

00:16:30,080 --> 00:16:33,830
someone somebody says to me well you

00:16:31,520 --> 00:16:35,630
didn't really expect me to fix 3,000

00:16:33,830 --> 00:16:38,660
bugs before we develop any new features

00:16:35,630 --> 00:16:40,640
and of course we don't expect them to do

00:16:38,660 --> 00:16:42,170
that but this tool had this great thing

00:16:40,640 --> 00:16:43,580
which you could essentially base learn

00:16:42,170 --> 00:16:45,830
all your bugs you say what I've seen it

00:16:43,580 --> 00:16:48,650
all now and I only want you to show me

00:16:45,830 --> 00:16:52,670
as the code progresses any new defects

00:16:48,650 --> 00:16:54,440
that have been introduced so anyway I

00:16:52,670 --> 00:16:56,000
did that kind of job for about yeah and

00:16:54,440 --> 00:16:57,200
it wasn't really me I've much preferred

00:16:56,000 --> 00:16:59,210
programming so I went back to

00:16:57,200 --> 00:17:02,750
programming and these are the three main

00:16:59,210 --> 00:17:04,280
languages I was using at the time and I

00:17:02,750 --> 00:17:06,170
did quite a lot of Java developments and

00:17:04,280 --> 00:17:08,120
that really influenced how I did my PHP

00:17:06,170 --> 00:17:10,010
developments mainly in the fact I just

00:17:08,120 --> 00:17:14,660
type in turd everything even in the days

00:17:10,010 --> 00:17:17,330
of PHP 5.4 5.5 I put all the slight

00:17:14,660 --> 00:17:20,000
prints in in the doc blocks and my IDE

00:17:17,330 --> 00:17:21,650
could understand them and it kind of did

00:17:20,000 --> 00:17:23,840
the stuff you get now with seven but it

00:17:21,650 --> 00:17:28,130
you could do it all back in the days of

00:17:23,840 --> 00:17:29,480
five as well and currently my idea of

00:17:28,130 --> 00:17:32,150
choice is phpstorm

00:17:29,480 --> 00:17:33,800
and it can just look at the code this is

00:17:32,150 --> 00:17:35,480
that this is a the the first problem we

00:17:33,800 --> 00:17:37,220
had and it's highlighting the error

00:17:35,480 --> 00:17:39,910
there and it's even telling me what I've

00:17:37,220 --> 00:17:42,110
what I've made what mistake I've made

00:17:39,910 --> 00:17:44,860
but of course it's unlikely I'd ever

00:17:42,110 --> 00:17:47,750
even get into that situation because um

00:17:44,860 --> 00:17:49,310
as I'm writing code it even tells me

00:17:47,750 --> 00:17:51,800
that the thing I'm supposed to be

00:17:49,310 --> 00:17:53,070
passing to process is an object of type

00:17:51,800 --> 00:17:55,200
user

00:17:53,070 --> 00:17:58,380
and also when I'm when I'm writing code

00:17:55,200 --> 00:18:00,750
away because of all the because of all

00:17:58,380 --> 00:18:02,580
the type hints pitch P understands the

00:18:00,750 --> 00:18:05,280
code quite well and it can just suggest

00:18:02,580 --> 00:18:08,040
here all the possible options that you

00:18:05,280 --> 00:18:10,200
can give here so if we think about our

00:18:08,040 --> 00:18:11,880
cost of fixing the bug we're basically

00:18:10,200 --> 00:18:13,140
taking some bugs and we're not even

00:18:11,880 --> 00:18:17,580
going to introduce them in the first

00:18:13,140 --> 00:18:20,330
place so and that's just by doing type

00:18:17,580 --> 00:18:24,540
hinting and using a good idea

00:18:20,330 --> 00:18:26,640
so here list of requirements I think are

00:18:24,540 --> 00:18:28,980
required for you know a real-time static

00:18:26,640 --> 00:18:30,900
analysis tool an IDE it's got a fully

00:18:28,980 --> 00:18:33,480
understand the code base you're working

00:18:30,900 --> 00:18:35,430
on it's got a report errors in real time

00:18:33,480 --> 00:18:37,260
and it needs to suggest and also

00:18:35,430 --> 00:18:38,880
complete based on the context and

00:18:37,260 --> 00:18:40,980
something we haven't discussed at all

00:18:38,880 --> 00:18:42,540
but it'd be good if we can help help you

00:18:40,980 --> 00:18:44,250
out with refactoring as well because we

00:18:42,540 --> 00:18:46,740
know names difficult we're going to want

00:18:44,250 --> 00:18:48,300
to rename things if your ID understands

00:18:46,740 --> 00:18:50,220
the entire code base then you can do

00:18:48,300 --> 00:18:52,020
things like refactor a function name and

00:18:50,220 --> 00:18:54,740
it finds that all the places that used

00:18:52,020 --> 00:18:58,590
and it just changes the names everywhere

00:18:54,740 --> 00:19:00,690
so hopefully we can see that doing

00:18:58,590 --> 00:19:05,460
things like basic staff analysis in our

00:19:00,690 --> 00:19:07,500
CI use tools use a good IDE which does

00:19:05,460 --> 00:19:09,630
real-time static analysis and type in

00:19:07,500 --> 00:19:11,490
seing everything massively helps us it

00:19:09,630 --> 00:19:15,320
massively helps us find bugs early and

00:19:11,490 --> 00:19:18,900
therefore reduces the overall cost so I

00:19:15,320 --> 00:19:20,760
was in a pretty happy place and as using

00:19:18,900 --> 00:19:22,650
phpstorm I don't have any association

00:19:20,760 --> 00:19:25,800
with all of these tools apart in fact I

00:19:22,650 --> 00:19:27,600
use them by using phpstorm and if you

00:19:25,800 --> 00:19:30,720
feel the IDE isn't good enough then just

00:19:27,600 --> 00:19:34,890
give that a go and I was using circle CI

00:19:30,720 --> 00:19:37,350
to run all of the all of the CI

00:19:34,890 --> 00:19:39,840
processes and again if you're not doing

00:19:37,350 --> 00:19:42,710
CI have a look at something like circle

00:19:39,840 --> 00:19:45,920
CI it gives you some like one and a half

00:19:42,710 --> 00:19:48,540
1500 build minutes free per month on

00:19:45,920 --> 00:19:50,970
clothes on them private and private

00:19:48,540 --> 00:19:53,130
repositories so if your codes in github

00:19:50,970 --> 00:19:55,110
or bitbucket in a private repository and

00:19:53,130 --> 00:19:56,930
you don't have any CI then you can

00:19:55,110 --> 00:19:59,790
essentially try this out for free and

00:19:56,930 --> 00:20:01,140
there's a link to a skeleton CI project

00:19:59,790 --> 00:20:03,750
which just shows you how to set this up

00:20:01,140 --> 00:20:05,340
like just the very basics and so if you

00:20:03,750 --> 00:20:06,169
don't have CI I reckon you can get it

00:20:05,340 --> 00:20:10,860
going

00:20:06,169 --> 00:20:13,080
half-day and I think it's worth it but

00:20:10,860 --> 00:20:15,240
there was still this nagging problem my

00:20:13,080 --> 00:20:17,390
real-time static analysis tool was doing

00:20:15,240 --> 00:20:19,890
really good amazing checks for me and

00:20:17,390 --> 00:20:23,279
those things were not getting replicated

00:20:19,890 --> 00:20:25,110
in the CI my CI was relatively basic and

00:20:23,279 --> 00:20:27,299
I can't feel we just I'm not really

00:20:25,110 --> 00:20:29,429
happy about this and if everyone on

00:20:27,299 --> 00:20:31,110
project all uses real-time static

00:20:29,429 --> 00:20:32,940
analysis tools like phpstorm

00:20:31,110 --> 00:20:34,559
and they check before they commit their

00:20:32,940 --> 00:20:37,200
code that there are no bugs or anything

00:20:34,559 --> 00:20:39,630
like that then that's fine but everyone

00:20:37,200 --> 00:20:41,970
will make a mistake and often in code

00:20:39,630 --> 00:20:43,559
you're changing some code here and you

00:20:41,970 --> 00:20:45,419
think you've altered everything you need

00:20:43,559 --> 00:20:48,299
to for that change to work and you've

00:20:45,419 --> 00:20:49,649
missed something over there and and then

00:20:48,299 --> 00:20:51,390
that might not become apparent until the

00:20:49,649 --> 00:20:53,610
test one or even worse until it comes

00:20:51,390 --> 00:20:56,490
out in you know people are using it for

00:20:53,610 --> 00:20:59,520
what for real so I wanted to replicate

00:20:56,490 --> 00:21:04,200
those quite advanced and checks that my

00:20:59,520 --> 00:21:06,710
IDE was doing in CI and then about 18

00:21:04,200 --> 00:21:09,149
months ago I was at a conference and

00:21:06,710 --> 00:21:11,730
Rasmus was was talking and he mentioned

00:21:09,149 --> 00:21:13,289
this and tool called fan and I have a

00:21:11,730 --> 00:21:14,730
look at it I thought that's exactly what

00:21:13,289 --> 00:21:17,539
it is that's doing all the great checks

00:21:14,730 --> 00:21:20,640
that and phpstorm are doing for me and

00:21:17,539 --> 00:21:22,919
it's a tool I can run as part of my CI

00:21:20,640 --> 00:21:24,480
process so I went and had a look at the

00:21:22,919 --> 00:21:26,490
minute I discovered this actually three

00:21:24,480 --> 00:21:28,710
as probably more but the three I've kind

00:21:26,490 --> 00:21:32,399
of had a look at are some fan and PHP

00:21:28,710 --> 00:21:35,909
stand these sense you do the same thing

00:21:32,399 --> 00:21:37,200
and they are all fantastic tools and I

00:21:35,909 --> 00:21:39,090
definitely recommend you to have a look

00:21:37,200 --> 00:21:41,399
at anything and from now I'm mainly

00:21:39,090 --> 00:21:43,770
going to talk about Psalm but what I say

00:21:41,399 --> 00:21:48,270
about Psalm is kind of applicable to all

00:21:43,770 --> 00:21:49,980
of them so the first thing you can do if

00:21:48,270 --> 00:21:53,070
you want to is go to the get Psalm the

00:21:49,980 --> 00:21:55,320
org homepage and they have on there an

00:21:53,070 --> 00:21:57,000
editor and you can type in the code and

00:21:55,320 --> 00:21:59,640
it shows you pretty much in real time

00:21:57,000 --> 00:22:01,049
what errors some would have found so if

00:21:59,640 --> 00:22:03,090
you want to have a practice and see what

00:22:01,049 --> 00:22:04,710
it does and and and you've put some like

00:22:03,090 --> 00:22:06,649
snippets of code in it tells you exactly

00:22:04,710 --> 00:22:09,059
the kind of problems it would have found

00:22:06,649 --> 00:22:12,029
so I definitely recommend you to go have

00:22:09,059 --> 00:22:14,070
a look at that it's it's great to see

00:22:12,029 --> 00:22:15,929
the power of these things and PHP Stan

00:22:14,070 --> 00:22:16,990
as a similar thing on its home page as

00:22:15,929 --> 00:22:19,880
well

00:22:16,990 --> 00:22:22,610
so this some common concepts that all of

00:22:19,880 --> 00:22:24,950
these tools have the first is they all

00:22:22,610 --> 00:22:27,470
have a concept of level and this is how

00:22:24,950 --> 00:22:30,980
strict they are in their analysis of the

00:22:27,470 --> 00:22:34,850
code so they all have a very low level

00:22:30,980 --> 00:22:36,350
of strictness and then as the strictness

00:22:34,850 --> 00:22:39,050
levels increase basically you're adding

00:22:36,350 --> 00:22:40,160
in more and more checks and the reason

00:22:39,050 --> 00:22:42,470
for this is say they say if you've got

00:22:40,160 --> 00:22:44,750
some terrible legacy code base you put

00:22:42,470 --> 00:22:46,490
it on it's least strict level first you

00:22:44,750 --> 00:22:48,980
clear up all those bugs and then and

00:22:46,490 --> 00:22:51,230
then you can slowly right raise the

00:22:48,980 --> 00:22:56,780
level as your as your code quality goes

00:22:51,230 --> 00:22:58,850
up another condom concept and they all

00:22:56,780 --> 00:23:01,490
deal with is something called generics

00:22:58,850 --> 00:23:04,550
and generics is is essentially the bit

00:23:01,490 --> 00:23:07,670
that's missing from the PHP 7s type

00:23:04,550 --> 00:23:10,220
system so if we look at this code and

00:23:07,670 --> 00:23:12,500
right down the bottom we are calling

00:23:10,220 --> 00:23:13,940
business get employees and we're looping

00:23:12,500 --> 00:23:16,310
through each each thing in the array

00:23:13,940 --> 00:23:18,140
that it returns and we can see we have

00:23:16,310 --> 00:23:20,480
done a type in here we have said that

00:23:18,140 --> 00:23:22,460
get employees does return something of a

00:23:20,480 --> 00:23:24,920
raise so we know we can iterate through

00:23:22,460 --> 00:23:26,690
it so we know that bits varied but we

00:23:24,920 --> 00:23:31,160
don't know from the code on the screen

00:23:26,690 --> 00:23:33,320
what we are iterating through so we

00:23:31,160 --> 00:23:36,320
don't know the type of employee we're

00:23:33,320 --> 00:23:39,710
then calling promote employee and we can

00:23:36,320 --> 00:23:41,750
see that promote is expecting and the

00:23:39,710 --> 00:23:43,040
parameter to be of type employee but

00:23:41,750 --> 00:23:44,150
given that information is on the screen

00:23:43,040 --> 00:23:49,540
we don't know if that's actually

00:23:44,150 --> 00:23:53,720
happening so we can get around this and

00:23:49,540 --> 00:23:56,570
we can add a dot block to get employees

00:23:53,720 --> 00:23:58,850
and we set out returned employee open

00:23:56,570 --> 00:24:00,320
closed bracket so that means we are

00:23:58,850 --> 00:24:02,750
returning the thing that we're iterating

00:24:00,320 --> 00:24:06,200
over the values of them are all of type

00:24:02,750 --> 00:24:07,700
employee and actually our static

00:24:06,200 --> 00:24:09,440
analysis tools will look at that and in

00:24:07,700 --> 00:24:11,150
there look inside get employees and if

00:24:09,440 --> 00:24:12,680
they ever see anything being added to an

00:24:11,150 --> 00:24:14,720
array that gets returned there isn't of

00:24:12,680 --> 00:24:18,170
type employee it will complain about

00:24:14,720 --> 00:24:20,690
that so it means that we now know

00:24:18,170 --> 00:24:24,260
employee down here is of type employee

00:24:20,690 --> 00:24:26,630
and when we call promote we know we are

00:24:24,260 --> 00:24:28,860
passing an employee object promotes so

00:24:26,630 --> 00:24:31,559
we know that that is all fine

00:24:28,860 --> 00:24:38,190
so that essentially is quite basic

00:24:31,559 --> 00:24:39,630
generics and even though ideas

00:24:38,190 --> 00:24:40,769
understand this so this is a screenshot

00:24:39,630 --> 00:24:42,570
from phpstorm

00:24:40,769 --> 00:24:45,269
you see there I've highlighted a bit of

00:24:42,570 --> 00:24:48,539
codes where we're saying the employees

00:24:45,269 --> 00:24:50,730
array you know employee is the value in

00:24:48,539 --> 00:24:53,220
it's the type of things of value in the

00:24:50,730 --> 00:24:54,539
array and we can see down there

00:24:53,220 --> 00:24:56,909
basically if we hover over employee

00:24:54,539 --> 00:25:02,610
phpstorm will tell us that employee is

00:24:56,909 --> 00:25:05,010
of type employee so that's good but what

00:25:02,610 --> 00:25:07,470
about slightly more advanced case here

00:25:05,010 --> 00:25:09,059
so now we're iterating through our

00:25:07,470 --> 00:25:13,769
employees and we're interested in the

00:25:09,059 --> 00:25:16,200
key and the value so the keys name in

00:25:13,769 --> 00:25:18,659
this case and we're passing name to a

00:25:16,200 --> 00:25:21,690
welcomed function and we can see that

00:25:18,659 --> 00:25:25,200
the Welcome function is expecting name

00:25:21,690 --> 00:25:28,320
to be of type string so if we took that

00:25:25,200 --> 00:25:30,840
code as it stood and put it into the

00:25:28,320 --> 00:25:32,130
pitch be something on the home page it

00:25:30,840 --> 00:25:33,960
would look a bit like this and it's it's

00:25:32,130 --> 00:25:35,519
highlighting that when we're calling

00:25:33,960 --> 00:25:37,799
name there when we're calling welcome

00:25:35,519 --> 00:25:40,980
with dollar name is saying argument one

00:25:37,799 --> 00:25:44,370
of welcome cannot be mixed is expecting

00:25:40,980 --> 00:25:45,720
it to be string so psalm basically when

00:25:44,370 --> 00:25:47,070
it doesn't know the type of something it

00:25:45,720 --> 00:25:49,409
says well it's mixed mix could be

00:25:47,070 --> 00:25:53,130
anything could be any object or any

00:25:49,409 --> 00:25:54,480
scalar type so psalm is saying there's a

00:25:53,130 --> 00:25:56,279
chance what you're passing to welcome

00:25:54,480 --> 00:25:59,190
isn't a string i don't know if i can't

00:25:56,279 --> 00:26:01,019
work it out its type mixed so if we go

00:25:59,190 --> 00:26:02,760
back to our code what we can do is we

00:26:01,019 --> 00:26:04,950
can do an alternative way of specifying

00:26:02,760 --> 00:26:07,080
what we're returning from get employees

00:26:04,950 --> 00:26:09,210
so we're doing out return and we're

00:26:07,080 --> 00:26:13,620
saying array open angle brackets string

00:26:09,210 --> 00:26:15,809
comma employee close angle bracket and

00:26:13,620 --> 00:26:17,880
what that means is the key in the thing

00:26:15,809 --> 00:26:22,080
we iterating through is of type string

00:26:17,880 --> 00:26:24,029
and the value is of type employee so

00:26:22,080 --> 00:26:26,549
that means we know that name is of type

00:26:24,029 --> 00:26:28,950
string and that means we're passing a

00:26:26,549 --> 00:26:31,350
string to the welcome methods and that's

00:26:28,950 --> 00:26:33,510
what the welcome method is expecting so

00:26:31,350 --> 00:26:36,929
that's all great but the problem is

00:26:33,510 --> 00:26:38,520
currently phpstorm doesn't understand

00:26:36,929 --> 00:26:39,659
this although i think that is going to

00:26:38,520 --> 00:26:40,810
change soon because they've recently

00:26:39,659 --> 00:26:42,520
released something

00:26:40,810 --> 00:26:45,130
which hopefully will understand this

00:26:42,520 --> 00:26:46,570
kind of thing and the problem is that

00:26:45,130 --> 00:26:48,550
that means when I'm looking at a

00:26:46,570 --> 00:26:49,890
employee it's it's now telling me it's

00:26:48,550 --> 00:26:53,170
mixed it's saying I don't know that's

00:26:49,890 --> 00:26:55,120
that's an employee so I've lost a lot

00:26:53,170 --> 00:26:57,130
bit of functionality here and in my

00:26:55,120 --> 00:26:59,170
real-time IDE which is a bit of a shame

00:26:57,130 --> 00:27:01,570
because it means I'm going to find bugs

00:26:59,170 --> 00:27:03,970
later I want to see problems as as I

00:27:01,570 --> 00:27:05,950
introduce them so there's a way around

00:27:03,970 --> 00:27:07,990
this which is common to some of these

00:27:05,950 --> 00:27:10,480
tools I've talked about you can as

00:27:07,990 --> 00:27:13,090
before specify the return type employee

00:27:10,480 --> 00:27:15,250
in the old way and that means the static

00:27:13,090 --> 00:27:18,580
analysis schools like phpstorm know that

00:27:15,250 --> 00:27:21,040
the values are of type employee and then

00:27:18,580 --> 00:27:22,840
we can do psalm return and this is a

00:27:21,040 --> 00:27:24,220
message only the psalm that says let

00:27:22,840 --> 00:27:26,410
ignore whatever else you've been told

00:27:24,220 --> 00:27:30,490
about the return type this return type

00:27:26,410 --> 00:27:32,380
is an array where the keys of type

00:27:30,490 --> 00:27:36,400
string and the values of aden type

00:27:32,380 --> 00:27:37,720
employee now it would be a bit of a pain

00:27:36,400 --> 00:27:40,360
if you have to do this everywhere but in

00:27:37,720 --> 00:27:43,240
most cases we don't really care about

00:27:40,360 --> 00:27:46,210
the type of the key and the thing with

00:27:43,240 --> 00:27:49,090
iterating through in most cases in other

00:27:46,210 --> 00:27:51,490
good news PS r5 and has kind of been

00:27:49,090 --> 00:27:54,190
resurrected and they are also advocating

00:27:51,490 --> 00:27:55,780
and this form for generics as well or as

00:27:54,190 --> 00:27:57,850
one of the one of the forms for generics

00:27:55,780 --> 00:27:59,830
so when that gets accepted if they gets

00:27:57,850 --> 00:28:01,360
upset it when it gets accepted all the

00:27:59,830 --> 00:28:07,120
school vendors will hopefully come on

00:28:01,360 --> 00:28:09,580
board and understand that - so yep you

00:28:07,120 --> 00:28:11,290
can have farm from and return and

00:28:09,580 --> 00:28:16,200
there's salmon there's and fan

00:28:11,290 --> 00:28:18,220
variations of that as well other

00:28:16,200 --> 00:28:20,980
concepts is we've got quite a lot of

00:28:18,220 --> 00:28:23,320
control about what it looks for what it

00:28:20,980 --> 00:28:24,700
finds so you can set levels and

00:28:23,320 --> 00:28:26,620
obviously as you increase the severity

00:28:24,700 --> 00:28:28,390
levels there'll be more more checks but

00:28:26,620 --> 00:28:31,030
you can on all of them say look at nor

00:28:28,390 --> 00:28:32,980
this kind of check and you can do things

00:28:31,030 --> 00:28:35,260
in the config like say ignore certain

00:28:32,980 --> 00:28:37,180
directories or or turn off all of those

00:28:35,260 --> 00:28:39,550
type of errors and you can annotate the

00:28:37,180 --> 00:28:42,300
code as well so and you can say suppress

00:28:39,550 --> 00:28:42,300
this particular issue

00:28:43,169 --> 00:28:48,190
so hopefully y'all kind of inspired now

00:28:45,970 --> 00:28:50,590
I want to try out some is it easy to do

00:28:48,190 --> 00:28:54,640
it's really easy we've just installed it

00:28:50,590 --> 00:28:56,620
like this and and then all of these

00:28:54,640 --> 00:28:58,059
things have basically a config file

00:28:56,620 --> 00:29:00,039
which tell them what to do and if you

00:28:58,059 --> 00:29:01,840
run some in it it will generate to the

00:29:00,039 --> 00:29:03,909
config file for you you tell it the

00:29:01,840 --> 00:29:05,799
directory of the code you would like to

00:29:03,909 --> 00:29:08,020
analyze and the level you would like to

00:29:05,799 --> 00:29:10,630
analyze it out and then you just run

00:29:08,020 --> 00:29:12,610
Psalm again and it does all its analysis

00:29:10,630 --> 00:29:16,539
and then you're probably going to cry at

00:29:12,610 --> 00:29:19,529
the results as as I did so I'm I had

00:29:16,539 --> 00:29:21,909
some code I've been working on at work

00:29:19,529 --> 00:29:25,090
being a couple of us working on it and

00:29:21,909 --> 00:29:27,159
it was reasonably well tested it was

00:29:25,090 --> 00:29:28,539
developed using phpstorm and we were

00:29:27,159 --> 00:29:30,220
pretty good at it you know checking we

00:29:28,539 --> 00:29:35,409
hadn't left any any problems in there

00:29:30,220 --> 00:29:37,419
and we did code with you as well say it

00:29:35,409 --> 00:29:39,700
was I thought reasonably high level I

00:29:37,419 --> 00:29:41,679
thought they won't find much and and

00:29:39,700 --> 00:29:43,960
this is what some found that each of the

00:29:41,679 --> 00:29:46,929
levels so at level AIDS its least strict

00:29:43,960 --> 00:29:48,820
level it still found 30 issues going all

00:29:46,929 --> 00:29:51,520
the way up to one and a half thousand at

00:29:48,820 --> 00:29:55,929
its most strict level so that was an

00:29:51,520 --> 00:29:58,149
upsetting game but I looked and they did

00:29:55,929 --> 00:30:00,070
find some really useful bugs and so this

00:29:58,149 --> 00:30:02,980
is an example of a real genuine bug it

00:30:00,070 --> 00:30:05,830
found part of a system we have some far

00:30:02,980 --> 00:30:07,419
of some data stored in Jason we convert

00:30:05,830 --> 00:30:09,130
it into a PHP array and then we loop

00:30:07,419 --> 00:30:11,559
through it and pull out bits of it and

00:30:09,130 --> 00:30:13,720
one of the bits we pull out is an email

00:30:11,559 --> 00:30:15,760
address and get your mail addresses

00:30:13,720 --> 00:30:17,350
expecting a return type of string so

00:30:15,760 --> 00:30:19,690
kind of like this work it back we're

00:30:17,350 --> 00:30:21,159
returning dollar email and we see that

00:30:19,690 --> 00:30:23,500
we're getting dollar email by pulling

00:30:21,159 --> 00:30:26,260
something out of the array and we do

00:30:23,500 --> 00:30:28,840
have a check of sorts in there we check

00:30:26,260 --> 00:30:31,000
that what we're getting back isn't empty

00:30:28,840 --> 00:30:34,450
and if it is it throws an import and

00:30:31,000 --> 00:30:36,549
import and entry exception and that was

00:30:34,450 --> 00:30:38,080
caught later up and and the higher our

00:30:36,549 --> 00:30:40,029
in knew roughly how far the JSON

00:30:38,080 --> 00:30:41,200
document we were so give a sensible

00:30:40,029 --> 00:30:43,210
error message you know say we've got a

00:30:41,200 --> 00:30:46,500
problem with you know this entry of the

00:30:43,210 --> 00:30:48,730
JSON document but the problem is wife

00:30:46,500 --> 00:30:50,140
instead of a string for the email

00:30:48,730 --> 00:30:52,120
address summed up at seven in or

00:30:50,140 --> 00:30:54,340
something like that or true or false

00:30:52,120 --> 00:30:56,080
something that wasn't a string what

00:30:54,340 --> 00:30:59,919
would happen here is we get a type error

00:30:56,080 --> 00:31:01,360
because email would say be an INT and

00:30:59,919 --> 00:31:03,850
we're trying to return an interim rat

00:31:01,360 --> 00:31:05,110
she said will return a string and a typo

00:31:03,850 --> 00:31:07,929
wouldn't be a great exception because it

00:31:05,110 --> 00:31:10,269
would just say something like expected

00:31:07,929 --> 00:31:12,130
string got int how does that help us

00:31:10,269 --> 00:31:16,950
find out what's wrong with this with

00:31:12,130 --> 00:31:20,409
this document with trying to parse as

00:31:16,950 --> 00:31:22,539
also quite a few deferred bugs we found

00:31:20,409 --> 00:31:23,890
and so here we're try and say we're

00:31:22,539 --> 00:31:26,110
calling something called create search

00:31:23,890 --> 00:31:28,840
term we're passing to it and a postcode

00:31:26,110 --> 00:31:30,940
and and a slug by the looks of it and we

00:31:28,840 --> 00:31:33,279
look at the method signature for create

00:31:30,940 --> 00:31:36,370
search term it's expecting a postcode

00:31:33,279 --> 00:31:40,389
and a string so if you look at the

00:31:36,370 --> 00:31:42,309
second parameter we are passing location

00:31:40,389 --> 00:31:44,889
get slug and if we look a location get

00:31:42,309 --> 00:31:48,220
slug we're saying we return a string or

00:31:44,889 --> 00:31:50,169
null so we're returning something that's

00:31:48,220 --> 00:31:54,149
a string or null something which only

00:31:50,169 --> 00:31:56,110
accept string so there was a chance

00:31:54,149 --> 00:31:59,019
maybe we can get into a state where

00:31:56,110 --> 00:32:00,250
location doesn't have a slug set I don't

00:31:59,019 --> 00:32:03,340
know I'd have to go and investigate that

00:32:00,250 --> 00:32:05,049
and I mean it appears to be working it's

00:32:03,340 --> 00:32:06,549
been working for the last year we do

00:32:05,049 --> 00:32:09,580
check the logs we haven't had any issue

00:32:06,549 --> 00:32:11,169
like this pop up however if we go on to

00:32:09,580 --> 00:32:13,149
extend the code when the Commission to

00:32:11,169 --> 00:32:14,559
do the next bit of work on this we want

00:32:13,149 --> 00:32:15,700
to start looking at these deferred bugs

00:32:14,559 --> 00:32:19,510
because these are the kind of things

00:32:15,700 --> 00:32:21,159
that might catch us out and if we have

00:32:19,510 --> 00:32:22,450
no idea how slug even gets into the

00:32:21,159 --> 00:32:24,490
system well there's lots of ways slug

00:32:22,450 --> 00:32:26,740
gets into the system we don't know that

00:32:24,490 --> 00:32:30,429
in every time but we're non non value

00:32:26,740 --> 00:32:33,610
there and I also learnt something doing

00:32:30,429 --> 00:32:35,799
the review of the errors this is an

00:32:33,610 --> 00:32:38,169
evolved ability defect can you actually

00:32:35,799 --> 00:32:40,539
read that on the back and hopefully and

00:32:38,169 --> 00:32:43,990
there's an issue here can even see what

00:32:40,539 --> 00:32:47,860
potentially the issue is so in terms of

00:32:43,990 --> 00:32:49,750
aiding understanding we've missed a

00:32:47,860 --> 00:32:51,840
return type

00:32:49,750 --> 00:32:54,040
I did well I didn't think about it I've

00:32:51,840 --> 00:32:55,780
enormous functions I've never given a

00:32:54,040 --> 00:32:57,340
return type on an anonymous function but

00:32:55,780 --> 00:33:00,510
then I saw this I thought oh yeah you

00:32:57,340 --> 00:33:02,500
can do it so I learned something new and

00:33:00,510 --> 00:33:05,200
however there was still one and a half

00:33:02,500 --> 00:33:07,510
thousand bugs and I'm not really going

00:33:05,200 --> 00:33:10,000
to go around and fix all these bugs

00:33:07,510 --> 00:33:11,770
before we do any more developments so

00:33:10,000 --> 00:33:13,360
here are some tips to kind of focus our

00:33:11,770 --> 00:33:15,240
static analysis on what's what's

00:33:13,360 --> 00:33:18,310
important

00:33:15,240 --> 00:33:19,840
the first is basically target our

00:33:18,310 --> 00:33:21,610
business logic have people heard about

00:33:19,840 --> 00:33:24,490
things like hexagonal architecture and

00:33:21,610 --> 00:33:26,080
layered architecture okay so we layered

00:33:24,490 --> 00:33:28,480
architecture what what we're talking

00:33:26,080 --> 00:33:30,430
about is the inner layers know nothing

00:33:28,480 --> 00:33:32,200
of the outer layer so the business logic

00:33:30,430 --> 00:33:34,060
which is all our core business logic all

00:33:32,200 --> 00:33:35,820
the clever stuff that makes us money or

00:33:34,060 --> 00:33:38,680
makes our tools productive and useful

00:33:35,820 --> 00:33:40,300
that ideally we'll know nothing about

00:33:38,680 --> 00:33:42,070
the world that sits in it don't it

00:33:40,300 --> 00:33:44,110
shouldn't know what framework it's in

00:33:42,070 --> 00:33:46,000
whether it's symphony or laravel or

00:33:44,110 --> 00:33:47,770
whether it's serving us or whatever it

00:33:46,000 --> 00:33:49,750
shouldn't care it knows nothing of the

00:33:47,770 --> 00:33:50,890
outer world and equally our framework

00:33:49,750 --> 00:33:53,260
knows nothing about the world

00:33:50,890 --> 00:33:55,480
it sits in - there's a real use of

00:33:53,260 --> 00:33:57,880
talking to it as some test thing talking

00:33:55,480 --> 00:34:02,230
to it shouldn't care but we want to

00:33:57,880 --> 00:34:03,790
focus all of our strict static analysis

00:34:02,230 --> 00:34:05,890
just on the business logic you know

00:34:03,790 --> 00:34:08,080
certain if we're using frameworks that

00:34:05,890 --> 00:34:10,389
everyone's using a lot of those issues

00:34:08,080 --> 00:34:11,919
will have being picked up and fixed so

00:34:10,389 --> 00:34:14,200
we can kind of trust the frameworks are

00:34:11,919 --> 00:34:16,149
reasonably good and and then we can

00:34:14,200 --> 00:34:18,820
apply like a less strict or maybe not

00:34:16,149 --> 00:34:20,169
even bother and looking at the

00:34:18,820 --> 00:34:23,980
interaction between the framework and

00:34:20,169 --> 00:34:26,710
our business logic so yeah focus it on

00:34:23,980 --> 00:34:32,830
on where all our high-value business

00:34:26,710 --> 00:34:35,230
code is and another problem we had was

00:34:32,830 --> 00:34:38,800
with certain third parties we were using

00:34:35,230 --> 00:34:42,340
so we were using this tool that created

00:34:38,800 --> 00:34:44,379
like hashes like five six digit hashes

00:34:42,340 --> 00:34:46,659
of whatever you gave it to it and the

00:34:44,379 --> 00:34:48,460
how we were using it we were calling in

00:34:46,659 --> 00:34:50,800
code and we're passing it the ID of the

00:34:48,460 --> 00:34:52,510
entity so our URLs instead of being

00:34:50,800 --> 00:34:54,340
slash in their persons fashion than a

00:34:52,510 --> 00:34:56,649
number we person slash and then like a

00:34:54,340 --> 00:34:58,720
five or six digit hash it's harder for

00:34:56,649 --> 00:35:01,220
people to kind of guess what the next

00:34:58,720 --> 00:35:04,290
you know the next number in the see

00:35:01,220 --> 00:35:07,800
so we always called in code and passing

00:35:04,290 --> 00:35:10,350
an integer but if you look at the method

00:35:07,800 --> 00:35:11,310
signature for the encoding it almost

00:35:10,350 --> 00:35:14,070
looks like it doesn't take any

00:35:11,310 --> 00:35:15,540
parameters at all so the static analysis

00:35:14,070 --> 00:35:18,060
tool said well as something doesn't look

00:35:15,540 --> 00:35:21,240
right here and in reality you can pass

00:35:18,060 --> 00:35:24,360
any number of parameters to encode and

00:35:21,240 --> 00:35:26,130
it just it just encodes more but and we

00:35:24,360 --> 00:35:29,070
were using this quite a lot so instead

00:35:26,130 --> 00:35:30,900
what we did is we created a wrapper so

00:35:29,070 --> 00:35:33,390
called clean hasher and it just wraps

00:35:30,900 --> 00:35:38,640
the actual hash function which will

00:35:33,390 --> 00:35:40,470
inject save I the I and and then this is

00:35:38,640 --> 00:35:42,630
the only point in the entire code base

00:35:40,470 --> 00:35:46,050
where we get the violation saying and

00:35:42,630 --> 00:35:47,840
you know you're trying to pass in an ID

00:35:46,050 --> 00:35:50,040
to something that doesn't accept an ID

00:35:47,840 --> 00:35:52,020
and then we can either just annotate

00:35:50,040 --> 00:35:53,760
that to ignore it or just exclude all of

00:35:52,020 --> 00:35:57,450
these kind of adapters from our static

00:35:53,760 --> 00:36:00,000
analysis anyway so then when we actually

00:35:57,450 --> 00:36:02,840
call it in our code our static analysis

00:36:00,000 --> 00:36:02,840
tool is happy with that

00:36:04,430 --> 00:36:12,270
okay so further static analysis tips

00:36:08,450 --> 00:36:13,710
imagine we have a class foo unimaginably

00:36:12,270 --> 00:36:15,120
named all we just need to remember is as

00:36:13,710 --> 00:36:18,150
a class call foo and it's got a single

00:36:15,120 --> 00:36:20,490
method called to say hello we've got our

00:36:18,150 --> 00:36:22,080
di container so what we're doing with

00:36:20,490 --> 00:36:23,910
our ID our containers the saying build

00:36:22,080 --> 00:36:27,030
me something of this and all we can

00:36:23,910 --> 00:36:29,310
really do is pass in a string that

00:36:27,030 --> 00:36:32,310
represents what the the class that we

00:36:29,310 --> 00:36:33,720
were the object we want to build and for

00:36:32,310 --> 00:36:35,160
the return type we can't really be that

00:36:33,720 --> 00:36:38,850
specific about that because it can build

00:36:35,160 --> 00:36:42,000
almost anything and so the problem is

00:36:38,850 --> 00:36:45,600
when we then use this we're saying make

00:36:42,000 --> 00:36:48,180
me a foo are di contain and we'll go and

00:36:45,600 --> 00:36:49,680
make as an object of type foo and we

00:36:48,180 --> 00:36:51,660
know we can read this code and we can

00:36:49,680 --> 00:36:54,240
say well I know that the variable foo is

00:36:51,660 --> 00:36:55,740
of type foo so I know that this is valid

00:36:54,240 --> 00:36:59,390
I'm calling the you know say hello

00:36:55,740 --> 00:37:02,580
method on foo

00:36:59,390 --> 00:37:05,520
but our static analysis tools aren't

00:37:02,580 --> 00:37:07,170
quite that clever yet so there's a few

00:37:05,520 --> 00:37:08,640
ways we can help them out first thing we

00:37:07,170 --> 00:37:11,849
can do is we can actually just put like

00:37:08,640 --> 00:37:13,859
a and out of our you know type foo for

00:37:11,849 --> 00:37:15,990
dollar foo and then our static analysis

00:37:13,859 --> 00:37:17,880
tools knows that dollar foo is actually

00:37:15,990 --> 00:37:19,740
an object of type food so we can start

00:37:17,880 --> 00:37:21,810
doing this and this is quite helpful and

00:37:19,740 --> 00:37:23,070
if you're using phpstorm or equivalent

00:37:21,810 --> 00:37:26,640
tools you're probably doing this quite a

00:37:23,070 --> 00:37:27,900
lot anyway for the places where and you

00:37:26,640 --> 00:37:31,740
know it's not obvious what the return

00:37:27,900 --> 00:37:35,520
type is but there are problems with this

00:37:31,740 --> 00:37:37,380
and so when we're calling our di

00:37:35,520 --> 00:37:39,060
container we could either do something

00:37:37,380 --> 00:37:42,599
like foo colon colon class which would

00:37:39,060 --> 00:37:45,420
be my recommended way of asking a di

00:37:42,599 --> 00:37:46,859
containers build an object or you could

00:37:45,420 --> 00:37:48,180
just give it a string representation of

00:37:46,859 --> 00:37:49,950
that but the palm of the string

00:37:48,180 --> 00:37:51,990
representation is you might get it wrong

00:37:49,950 --> 00:37:56,640
so let's say actually foo doesn't live

00:37:51,990 --> 00:37:59,430
in the namespace my app and and again in

00:37:56,640 --> 00:38:01,590
in Psalm and others will have different

00:37:59,430 --> 00:38:04,830
ways of approaching this what you can do

00:38:01,590 --> 00:38:06,780
is you can do this app from Psalm thing

00:38:04,830 --> 00:38:09,060
and have this thing called class -

00:38:06,780 --> 00:38:11,970
string so it's saying I'm expecting a

00:38:09,060 --> 00:38:15,270
string to be passed in but that string

00:38:11,970 --> 00:38:19,080
must map to what would be what there's a

00:38:15,270 --> 00:38:21,270
valid name of a class so what happens

00:38:19,080 --> 00:38:24,570
then is when Sam does analysis it looks

00:38:21,270 --> 00:38:27,330
at it and goes and actually that string

00:38:24,570 --> 00:38:31,170
does represent a class so that's kind of

00:38:27,330 --> 00:38:34,099
a nice thing to do and what is our

00:38:31,170 --> 00:38:34,099
problem here

00:38:37,680 --> 00:38:44,670
okay so what which one do we try to

00:38:40,050 --> 00:38:47,580
build a bar except we have annotated our

00:38:44,670 --> 00:38:50,540
code rather confusingly saying it's

00:38:47,580 --> 00:38:53,190
actually foo is actually of type foo

00:38:50,540 --> 00:38:54,510
so it's probably some kind of cut and

00:38:53,190 --> 00:38:57,030
pasting but the problem here is our

00:38:54,510 --> 00:38:59,670
static analysis is going off thinking

00:38:57,030 --> 00:39:01,980
that dollar foo is actually an object of

00:38:59,670 --> 00:39:04,440
type foo but when we run the code for

00:39:01,980 --> 00:39:08,850
real and we'll actually it will actually

00:39:04,440 --> 00:39:11,130
be a type bar so again static analysis

00:39:08,850 --> 00:39:13,470
can leak while some can leap parts loop

00:39:11,130 --> 00:39:16,620
to our help here and this is kind of a

00:39:13,470 --> 00:39:18,450
more advanced kind of generics so what

00:39:16,620 --> 00:39:20,340
we do is we say we've got this template

00:39:18,450 --> 00:39:22,410
and we're going to call it t it's just

00:39:20,340 --> 00:39:24,990
kind of convention that templates are T

00:39:22,410 --> 00:39:26,820
so at the time of writing we don't know

00:39:24,990 --> 00:39:30,540
what T represents we're just saying it

00:39:26,820 --> 00:39:34,350
represents something and and then we're

00:39:30,540 --> 00:39:36,510
saying we're at the stage we know this T

00:39:34,350 --> 00:39:38,490
will be whatever class name is so if

00:39:36,510 --> 00:39:42,960
class name represents an object foo then

00:39:38,490 --> 00:39:45,840
T is food if if class name represents

00:39:42,960 --> 00:39:49,620
bar then T will be bar and then we can

00:39:45,840 --> 00:39:51,600
do some return type T so that means at

00:39:49,620 --> 00:39:53,430
the time we've written this code and we

00:39:51,600 --> 00:39:56,010
could be asking our di to build any

00:39:53,430 --> 00:39:58,290
object but when Psalm locks it it goes

00:39:56,010 --> 00:39:59,010
right you're asked me to build an object

00:39:58,290 --> 00:40:00,960
bar

00:39:59,010 --> 00:40:02,730
therefore I'm returning an object bar

00:40:00,960 --> 00:40:07,710
and therefore it will complain about

00:40:02,730 --> 00:40:08,910
that code at the top there and the other

00:40:07,710 --> 00:40:15,260
tools they'll be able to do similar

00:40:08,910 --> 00:40:15,260
things to this as well yeah

00:40:22,979 --> 00:40:30,719
oops the bit where you've got the app

00:40:27,089 --> 00:40:33,329
some returned and yeah so out returned

00:40:30,719 --> 00:40:35,909
mixed would be what everything else sees

00:40:33,329 --> 00:40:37,939
now that Psalm return Psalm will go I'm

00:40:35,909 --> 00:40:40,199
going to take that and I'm gonna

00:40:37,939 --> 00:40:41,849
basically if Psalm sees something that's

00:40:40,199 --> 00:40:43,709
on the turn it will basically it will

00:40:41,849 --> 00:40:45,479
understand that and it will ignore

00:40:43,709 --> 00:40:49,609
anything else the same if you've got out

00:40:45,479 --> 00:40:49,609
Psalm pram or anything else like that

00:40:50,929 --> 00:40:53,929
yeah

00:40:56,040 --> 00:41:01,800
I've liked this one here yeah what it

00:40:58,770 --> 00:41:04,350
would do then is it would complain by

00:41:01,800 --> 00:41:06,090
saying it would actually is a good

00:41:04,350 --> 00:41:07,740
question I think I'd have to

00:41:06,090 --> 00:41:09,780
double-check but I'm pretty sure it

00:41:07,740 --> 00:41:12,750
would complain here and saying that foo

00:41:09,780 --> 00:41:14,730
and you've said it's of type food but

00:41:12,750 --> 00:41:17,970
we're returning we're trying to assign

00:41:14,730 --> 00:41:20,730
bar to it and but that is the kind of

00:41:17,970 --> 00:41:22,680
thing I go to the salm website and type

00:41:20,730 --> 00:41:24,090
it in and check what it does but I'm

00:41:22,680 --> 00:41:26,220
pretty sure that's what it will do but

00:41:24,090 --> 00:41:32,580
not sure enough that I bet you a point

00:41:26,220 --> 00:41:36,600
on it safe um right but I generally it's

00:41:32,580 --> 00:41:38,700
quite good at those kind of things okay

00:41:36,600 --> 00:41:41,940
so another kind of thing let's let's

00:41:38,700 --> 00:41:43,740
imagine we've got a login commands it's

00:41:41,940 --> 00:41:45,030
kind of following a command pattern we

00:41:43,740 --> 00:41:47,820
construct it with whatever information

00:41:45,030 --> 00:41:49,530
we want to login to we would then

00:41:47,820 --> 00:41:51,720
dispatch it off something would execute

00:41:49,530 --> 00:41:53,850
this command and then assuming executors

00:41:51,720 --> 00:41:55,830
success successfully we're going to call

00:41:53,850 --> 00:41:57,180
the get access token to get whatever

00:41:55,830 --> 00:42:00,660
their token is for the thing we've

00:41:57,180 --> 00:42:03,300
logged into and and I'm going to assume

00:42:00,660 --> 00:42:06,420
that the access token is only set up or

00:42:03,300 --> 00:42:08,220
is only yes only set up doing it during

00:42:06,420 --> 00:42:11,490
the execute phase and nothing in the

00:42:08,220 --> 00:42:12,990
construction phase so the problem is if

00:42:11,490 --> 00:42:14,610
we do something like this

00:42:12,990 --> 00:42:19,020
like we create the command and then we

00:42:14,610 --> 00:42:21,030
immediately call and get access token on

00:42:19,020 --> 00:42:21,870
it and we look what's kind of going on

00:42:21,030 --> 00:42:27,000
behind the scenes

00:42:21,870 --> 00:42:28,650
probably access token isn't set up but

00:42:27,000 --> 00:42:32,280
actually before we get to that stage

00:42:28,650 --> 00:42:34,680
Psalm will actually win about up here if

00:42:32,280 --> 00:42:39,660
we're basically saying access token is a

00:42:34,680 --> 00:42:42,000
type string so unless we set access

00:42:39,660 --> 00:42:45,450
token it says something or string during

00:42:42,000 --> 00:42:46,980
the construction phase there's a chance

00:42:45,450 --> 00:42:48,750
while they if we don't set up in a

00:42:46,980 --> 00:42:50,730
constructor than access token will be

00:42:48,750 --> 00:42:52,110
null so the first thing Psalm which is

00:42:50,730 --> 00:42:55,440
about as this saying well this this is

00:42:52,110 --> 00:42:56,880
potentially on the initialize so the way

00:42:55,440 --> 00:42:59,310
you get around that is you say well it's

00:42:56,880 --> 00:43:00,980
either a string or it's null because

00:42:59,310 --> 00:43:04,890
actually you could have a constructed

00:43:00,980 --> 00:43:07,910
object where access token is null so we

00:43:04,890 --> 00:43:07,910
have to put that there

00:43:08,340 --> 00:43:12,820
but then we do this and we're saying

00:43:10,720 --> 00:43:14,800
well we're returning access token which

00:43:12,820 --> 00:43:17,140
is of type string

00:43:14,800 --> 00:43:20,560
but the problem is access token could be

00:43:17,140 --> 00:43:24,570
string or null so the code as it stands

00:43:20,560 --> 00:43:27,010
there could be some kind of potential

00:43:24,570 --> 00:43:31,960
type error because we're returning null

00:43:27,010 --> 00:43:33,430
and it should be a string so we can get

00:43:31,960 --> 00:43:36,550
round this by adding some more code in

00:43:33,430 --> 00:43:38,350
here and because essentially we

00:43:36,550 --> 00:43:39,970
shouldn't be calling access token until

00:43:38,350 --> 00:43:43,510
after the commands are successfully

00:43:39,970 --> 00:43:45,910
executed and succour get access token if

00:43:43,510 --> 00:43:48,390
the command has not been excessively has

00:43:45,910 --> 00:43:50,950
not been successfully executed is

00:43:48,390 --> 00:43:52,869
essentially a logic exception it should

00:43:50,950 --> 00:43:54,609
never happen so that's what logic

00:43:52,869 --> 00:43:59,440
exception means there's a coding error

00:43:54,609 --> 00:44:00,609
in your code unfortunately Psalm is

00:43:59,440 --> 00:44:03,460
clever enough to look at this and go

00:44:00,609 --> 00:44:05,950
okay that's fine I know there is no way

00:44:03,460 --> 00:44:09,310
that get access token can return

00:44:05,950 --> 00:44:11,140
anything other than string so because we

00:44:09,310 --> 00:44:16,960
put this in some look sitting goes yeah

00:44:11,140 --> 00:44:18,730
that's cool we have no problems here and

00:44:16,960 --> 00:44:20,380
maybe we do this quite a lot and I go

00:44:18,730 --> 00:44:21,940
we've got quite a lot of very similar

00:44:20,380 --> 00:44:25,570
checks so actually why don't I replace

00:44:21,940 --> 00:44:28,210
them with like an assert not null and if

00:44:25,570 --> 00:44:29,619
our assertion method so this is

00:44:28,210 --> 00:44:31,480
basically doing the same thing it's

00:44:29,619 --> 00:44:33,340
saying I want to make sure that access

00:44:31,480 --> 00:44:34,840
token is not null and if it is no I'll

00:44:33,340 --> 00:44:39,850
have some error saying you probably

00:44:34,840 --> 00:44:41,770
should have executed this command so

00:44:39,850 --> 00:44:43,570
let's say assertion method looks

00:44:41,770 --> 00:44:45,609
something like this pretty simple really

00:44:43,570 --> 00:44:47,350
we're passing in an expression and if

00:44:45,609 --> 00:44:48,670
the expression equals null then

00:44:47,350 --> 00:44:53,380
obviously something's gone wrong sort of

00:44:48,670 --> 00:44:54,460
thrown exception yep and then we go well

00:44:53,380 --> 00:44:55,750
we're not just gonna have a not an all

00:44:54,460 --> 00:44:59,020
exception we gonna have loads of

00:44:55,750 --> 00:45:02,470
exceptions and so why don't we change

00:44:59,020 --> 00:45:05,890
our code slightly so just to make it a

00:45:02,470 --> 00:45:06,250
bit easier and a not null will now look

00:45:05,890 --> 00:45:07,660
like this

00:45:06,250 --> 00:45:09,250
so we're basically asserting that is

00:45:07,660 --> 00:45:11,980
true that expression is not null and

00:45:09,250 --> 00:45:14,020
then we've just got this one place where

00:45:11,980 --> 00:45:15,940
we basically say okay if this isn't true

00:45:14,020 --> 00:45:17,799
then I'm going to throw an exception

00:45:15,940 --> 00:45:19,150
because if we've got lots of exceptions

00:45:17,799 --> 00:45:20,650
that's quite a streamlined way of doing

00:45:19,150 --> 00:45:23,710
it you know just each exceptions

00:45:20,650 --> 00:45:25,569
essentially a one-liner then but the

00:45:23,710 --> 00:45:27,849
problem with doing this is this this at

00:45:25,569 --> 00:45:30,069
the stage where it's probably getting a

00:45:27,849 --> 00:45:31,299
bit too much for some as it stands to

00:45:30,069 --> 00:45:33,819
commonly understand you and I think all

00:45:31,299 --> 00:45:37,569
the others as well because Psalm looks

00:45:33,819 --> 00:45:38,859
at this and because it doesn't go in and

00:45:37,569 --> 00:45:40,869
then go and work out what happens in the

00:45:38,859 --> 00:45:43,119
thing that it gets called it just goes

00:45:40,869 --> 00:45:45,490
well as far as I can see this doesn't do

00:45:43,119 --> 00:45:48,180
anything you know this you know affects

00:45:45,490 --> 00:45:50,470
if expression is null well well so what

00:45:48,180 --> 00:45:53,380
so actually Psalm will then complain

00:45:50,470 --> 00:45:55,299
about this but you can tell it a bit

00:45:53,380 --> 00:45:58,119
more about the behavior you can do this

00:45:55,299 --> 00:46:02,950
Psalm assert thing and what this means

00:45:58,119 --> 00:46:06,970
is you're telling Psalm that this method

00:46:02,950 --> 00:46:10,059
here this method here and asserts that

00:46:06,970 --> 00:46:11,260
expression is not null and you can do it

00:46:10,059 --> 00:46:12,700
for anything you can say I can assert

00:46:11,260 --> 00:46:15,359
that it isn't all I can sit there this a

00:46:12,700 --> 00:46:17,950
string I can assert that as a type food

00:46:15,359 --> 00:46:19,329
so just by adding this it's just an

00:46:17,950 --> 00:46:21,190
extra bit of information that

00:46:19,329 --> 00:46:22,510
unfortunately we as humans we can look

00:46:21,190 --> 00:46:24,460
at it and we can understand what's going

00:46:22,510 --> 00:46:28,660
on but actually you need to help out

00:46:24,460 --> 00:46:31,390
these static analysis tools so you might

00:46:28,660 --> 00:46:33,460
say well that is all very well but I

00:46:31,390 --> 00:46:37,210
don't why my own assertion libraries I

00:46:33,460 --> 00:46:39,400
don't why my own di containers we can't

00:46:37,210 --> 00:46:41,349
realistically expect all of these third

00:46:39,400 --> 00:46:44,559
parties to go round and litter their

00:46:41,349 --> 00:46:49,450
code with like assertions just help

00:46:44,559 --> 00:46:50,920
Psalm out can we um and again and each

00:46:49,450 --> 00:46:53,440
of us tools handle this in a different

00:46:50,920 --> 00:46:56,650
way some of them you write plug-ins some

00:46:53,440 --> 00:46:59,079
you can do this thing with stumps so we

00:46:56,650 --> 00:47:03,549
create a file and called stub slash

00:46:59,079 --> 00:47:04,869
asserts dot PHP and in it and so let's

00:47:03,549 --> 00:47:07,750
say I'm trying to give more information

00:47:04,869 --> 00:47:09,309
about web mozart's assertion library so

00:47:07,750 --> 00:47:11,470
I copy the namespace exactly as it

00:47:09,309 --> 00:47:14,109
appears in web mozart's

00:47:11,470 --> 00:47:16,210
assertion library I copy the class and

00:47:14,109 --> 00:47:19,089
then I copy the method signature and

00:47:16,210 --> 00:47:20,890
it's just empty body and then I give

00:47:19,089 --> 00:47:23,170
that information to say that by the way

00:47:20,890 --> 00:47:25,620
Psalm like this is asserting that that

00:47:23,170 --> 00:47:27,720
value that value is not null

00:47:25,620 --> 00:47:29,550
and I can do this for any number of

00:47:27,720 --> 00:47:32,430
these things I can I can add in all of

00:47:29,550 --> 00:47:33,990
all of assertions and I can add in my di

00:47:32,430 --> 00:47:36,480
containers I can do all these things but

00:47:33,990 --> 00:47:40,890
have many stubs as I want and I just put

00:47:36,480 --> 00:47:43,890
them in to the config and then Sam

00:47:40,890 --> 00:47:45,390
understands it and then it now

00:47:43,890 --> 00:47:48,510
understands what some of these third

00:47:45,390 --> 00:47:52,370
parties are doing and as I say the other

00:47:48,510 --> 00:47:55,290
tools handle this in a in a similar way

00:47:52,370 --> 00:47:57,300
so basically you run through your code

00:47:55,290 --> 00:48:00,840
and you look at the you look at the

00:47:57,300 --> 00:48:02,220
outputs and the first time you run it

00:48:00,840 --> 00:48:03,900
you'll see loads of things to get right

00:48:02,220 --> 00:48:06,090
now I understand what's going on maybe

00:48:03,900 --> 00:48:08,460
have been a bit sloppy there yes in

00:48:06,090 --> 00:48:10,680
future I'll sort that out and I'll sort

00:48:08,460 --> 00:48:12,750
out all the critical bugs but basically

00:48:10,680 --> 00:48:14,640
look at what it's telling you learn from

00:48:12,750 --> 00:48:17,070
mistakes so things like I learnt that

00:48:14,640 --> 00:48:18,900
you could put return types and anonymous

00:48:17,070 --> 00:48:22,290
functions she'll do that for evermore

00:48:18,900 --> 00:48:24,390
and remember to type into everything and

00:48:22,290 --> 00:48:26,370
at the place this way you need to help

00:48:24,390 --> 00:48:28,530
out these tools are the use plugins or

00:48:26,370 --> 00:48:30,090
you stubs or just to give the static

00:48:28,530 --> 00:48:32,130
tools a little bit of information that

00:48:30,090 --> 00:48:33,960
we clever people can understand but the

00:48:32,130 --> 00:48:35,030
static analysis tools aren't quite there

00:48:33,960 --> 00:48:37,620
yet

00:48:35,030 --> 00:48:40,490
that is all great that's all amazing

00:48:37,620 --> 00:48:44,070
ideal all that stuff but I still have

00:48:40,490 --> 00:48:45,570
lots and lots of these errors and a lot

00:48:44,070 --> 00:48:48,090
of them aren't really issues I need to

00:48:45,570 --> 00:48:49,590
worry about and maybe the integrations

00:48:48,090 --> 00:48:51,210
with third-party libraries or something

00:48:49,590 --> 00:48:53,220
like that and maybe it's too much effort

00:48:51,210 --> 00:48:54,600
to separate out my code neatly so all my

00:48:53,220 --> 00:48:55,830
business logics in one place and

00:48:54,600 --> 00:48:58,170
everything that connects with it is

00:48:55,830 --> 00:49:00,510
elsewhere but I know what I'm doing now

00:48:58,170 --> 00:49:03,720
and from this day onwards I don't want

00:49:00,510 --> 00:49:05,400
to make any more mistakes like that and

00:49:03,720 --> 00:49:07,200
what I really wanted was I just wants

00:49:05,400 --> 00:49:09,330
the ability to baseline my staffing

00:49:07,200 --> 00:49:12,060
analysis tools of my static analysis

00:49:09,330 --> 00:49:14,820
results just like that tool that I used

00:49:12,060 --> 00:49:16,290
to sell could do and I couldn't find

00:49:14,820 --> 00:49:18,540
anything that really did this for me so

00:49:16,290 --> 00:49:23,400
in the end I kind of had a go at writing

00:49:18,540 --> 00:49:26,280
something but what happens is we have a

00:49:23,400 --> 00:49:29,070
point in time where we have all of our

00:49:26,280 --> 00:49:30,780
all of the issues that it's found it so

00:49:29,070 --> 00:49:32,670
here all the problems and ago that's

00:49:30,780 --> 00:49:34,350
great I've looked at them I've solved

00:49:32,670 --> 00:49:36,520
all the ones I'm gonna solve for now I'd

00:49:34,350 --> 00:49:40,330
still want to see them in the future

00:49:36,520 --> 00:49:42,190
and then we go on in time we write some

00:49:40,330 --> 00:49:44,080
more codes we've got a whole load of

00:49:42,190 --> 00:49:46,660
more problems some of them were the

00:49:44,080 --> 00:49:48,940
previous ones some of them we fixed but

00:49:46,660 --> 00:49:52,630
we've introduced a new one and I just

00:49:48,940 --> 00:49:54,520
want to see what that new one is so and

00:49:52,630 --> 00:49:57,220
it's not quite ready to open source just

00:49:54,520 --> 00:49:58,990
yet but it will be soon it's on video so

00:49:57,220 --> 00:50:00,730
I have to have - it will be there in the

00:49:58,990 --> 00:50:02,110
next couple of weeks a promise and I'm

00:50:00,730 --> 00:50:04,119
on video saying that so I'll have to do

00:50:02,110 --> 00:50:05,290
it now and if you look at github or

00:50:04,119 --> 00:50:07,240
follow me on twitter i'll tweet when

00:50:05,290 --> 00:50:09,220
it's out and but basically it'll

00:50:07,240 --> 00:50:10,990
supports and some of these some of these

00:50:09,220 --> 00:50:12,520
tools we've talked about and you can

00:50:10,990 --> 00:50:14,110
actually go and write in it no it

00:50:12,520 --> 00:50:16,570
doesn't even need to be for PHP can be

00:50:14,110 --> 00:50:18,070
any any kind of any kind of static

00:50:16,570 --> 00:50:21,540
analysis tool you can just write your

00:50:18,070 --> 00:50:24,730
own kind of analysis thing for it and

00:50:21,540 --> 00:50:27,670
and how it works is we would take our

00:50:24,730 --> 00:50:29,320
code we run say psalm on it we'd get the

00:50:27,670 --> 00:50:31,300
results and then we call sob crepe

00:50:29,320 --> 00:50:32,710
baseline and we'd say look here's where

00:50:31,300 --> 00:50:34,840
the current results are this is where I

00:50:32,710 --> 00:50:36,520
want you to save the baseline I don't

00:50:34,840 --> 00:50:41,800
say we've created a baseline with

00:50:36,520 --> 00:50:44,380
friends and 28 problems say we then go

00:50:41,800 --> 00:50:46,330
on do some more coding we get the latest

00:50:44,380 --> 00:50:49,720
set of results which probably have even

00:50:46,330 --> 00:50:52,300
more issues in them and so we run psalm

00:50:49,720 --> 00:50:54,550
to get the latest set of results and

00:50:52,300 --> 00:50:56,080
then we run sob saying remove the

00:50:54,550 --> 00:50:58,060
baseline results we go and we tell it

00:50:56,080 --> 00:51:00,040
where everything is and it says right

00:50:58,060 --> 00:51:04,630
you just supply move of the file that

00:51:00,040 --> 00:51:07,090
had 334 problems and the baseline had

00:51:04,630 --> 00:51:09,040
friends in 28 and by the way 15 of these

00:51:07,090 --> 00:51:10,740
friends and faithful problems are new

00:51:09,040 --> 00:51:13,440
since the baseline and you go right

00:51:10,740 --> 00:51:15,340
those are the 15 I'm going to focus on

00:51:13,440 --> 00:51:17,530
because then we're just keeping quality

00:51:15,340 --> 00:51:21,820
where we were when we took the baseline

00:51:17,530 --> 00:51:23,290
and if you're interested and kind of how

00:51:21,820 --> 00:51:25,990
it works is behind the scenes we've got

00:51:23,290 --> 00:51:27,700
a baseline and it just remembers and the

00:51:25,990 --> 00:51:30,670
tool used to create the baseline so in

00:51:27,700 --> 00:51:33,250
this case Psalm and the history marker

00:51:30,670 --> 00:51:34,869
which is in this case get get so be the

00:51:33,250 --> 00:51:37,300
get shot of where we were where that

00:51:34,869 --> 00:51:39,190
baseline was and it goes right here all

00:51:37,300 --> 00:51:43,330
the types this is the file and this is

00:51:39,190 --> 00:51:46,390
where we found them so imagine when we

00:51:43,330 --> 00:51:50,080
created our baseline we've got a file

00:51:46,390 --> 00:51:50,400
called person dot PHP and at line 93

00:51:50,080 --> 00:51:54,000
we've

00:51:50,400 --> 00:51:56,480
got this invalid nullable return type so

00:51:54,000 --> 00:51:59,910
we then go on we do some more work and

00:51:56,480 --> 00:52:03,150
we rename person to employee and move

00:51:59,910 --> 00:52:05,970
move the file and we remove 20 lines of

00:52:03,150 --> 00:52:09,480
code but we leave in that original issue

00:52:05,970 --> 00:52:11,490
but that issue used to be aligned 93 but

00:52:09,480 --> 00:52:19,650
because we've moved 20 lines it's now at

00:52:11,490 --> 00:52:21,210
line 73 so then we rerun it and we say

00:52:19,650 --> 00:52:22,500
okay so I'll remove the base line from

00:52:21,210 --> 00:52:23,940
the results and what it does is it goes

00:52:22,500 --> 00:52:26,309
through everything that's been found in

00:52:23,940 --> 00:52:28,589
the latest analysis results and it says

00:52:26,309 --> 00:52:32,490
we've got this problem we've got invalid

00:52:28,589 --> 00:52:36,329
nullable return type at line 73 in class

00:52:32,490 --> 00:52:38,940
of employee because what was the

00:52:36,329 --> 00:52:42,180
location of line 73 employee in the base

00:52:38,940 --> 00:52:44,549
line and the history analyzer mainly

00:52:42,180 --> 00:52:47,069
uses their magic of gifts and gaze at

00:52:44,549 --> 00:52:51,089
the base line this was lying 93 of

00:52:47,069 --> 00:52:51,690
person and then it goes okay do we have

00:52:51,089 --> 00:52:54,630
a problem

00:52:51,690 --> 00:52:56,940
invalid nillable return type at line 93

00:52:54,630 --> 00:52:59,609
a person in the base line and we look at

00:52:56,940 --> 00:53:03,299
the base line and go yes we do so we

00:52:59,609 --> 00:53:05,309
know that this isn't a new issue it was

00:53:03,299 --> 00:53:07,950
in the base line and of course if any of

00:53:05,309 --> 00:53:10,020
those steps were false then we got okay

00:53:07,950 --> 00:53:13,920
this is a new issue we need to report

00:53:10,020 --> 00:53:17,279
that to someone so basically static

00:53:13,920 --> 00:53:20,490
analysis with saab is we run our

00:53:17,279 --> 00:53:22,890
analysis tool we decide what we're going

00:53:20,490 --> 00:53:25,559
to fix and go off and fix it we then run

00:53:22,890 --> 00:53:28,500
the tool again to create our baseline

00:53:25,559 --> 00:53:32,549
and then we kind of repeat forevermore

00:53:28,500 --> 00:53:34,319
we write code we run the analysis we

00:53:32,549 --> 00:53:36,029
remove the baseline from the results and

00:53:34,319 --> 00:53:37,529
we just fix the things have been

00:53:36,029 --> 00:53:42,510
introduced the bugs have been introduced

00:53:37,529 --> 00:53:45,270
and then hopefully we're happy so what

00:53:42,510 --> 00:53:46,770
an adventure it has been hopefully by

00:53:45,270 --> 00:53:50,339
the end we can see appropriate use of

00:53:46,770 --> 00:53:52,079
static analysis can reduce and the

00:53:50,339 --> 00:53:53,789
overall cost of software development and

00:53:52,079 --> 00:53:56,160
if we use it sensibly hopefully we can

00:53:53,789 --> 00:53:58,030
see how we can start reducing cost by

00:53:56,160 --> 00:54:01,540
using these tools

00:53:58,030 --> 00:54:03,640
as a reminder and static analysis only

00:54:01,540 --> 00:54:05,530
tells us that our code is incorrect it

00:54:03,640 --> 00:54:07,870
is tests that tell us our code is

00:54:05,530 --> 00:54:13,420
functioning correctly as per like the

00:54:07,870 --> 00:54:15,850
requirements later we leave a bug the

00:54:13,420 --> 00:54:18,250
more expensive it is so good real-time

00:54:15,850 --> 00:54:20,200
static analysis can potentially stop us

00:54:18,250 --> 00:54:22,270
from even introducing bugs in the first

00:54:20,200 --> 00:54:24,460
place and then we have the backup of

00:54:22,270 --> 00:54:24,940
continuous integration for anything we

00:54:24,460 --> 00:54:29,680
missed

00:54:24,940 --> 00:54:31,330
as we were coding this is my CIA toolset

00:54:29,680 --> 00:54:33,130
I think they're all great tools and

00:54:31,330 --> 00:54:36,250
there's a load more here to have a look

00:54:33,130 --> 00:54:38,020
at if you're not using C I just start

00:54:36,250 --> 00:54:41,290
stop start using it and this would be a

00:54:38,020 --> 00:54:44,590
great starting point remember it's

00:54:41,290 --> 00:54:46,570
really important to have a good and real

00:54:44,590 --> 00:54:49,450
time static analysis tool an IDE

00:54:46,570 --> 00:54:52,000
I think phpstorm is great so if you're

00:54:49,450 --> 00:54:55,000
not using anything that advanced give it

00:54:52,000 --> 00:54:58,180
a go and once all that's in place then

00:54:55,000 --> 00:54:59,770
think about adding more advanced static

00:54:58,180 --> 00:55:03,400
analysis tools to your continuous

00:54:59,770 --> 00:55:04,750
integration so that's my story

00:55:03,400 --> 00:55:06,120
I've been David one thank you for

00:55:04,750 --> 00:55:08,450
listening

00:55:06,120 --> 00:55:15,850
[Applause]

00:55:08,450 --> 00:55:15,850

YouTube URL: https://www.youtube.com/watch?v=7VmaFP_f8bI


