Title: A Happy End for the Docker-for-Development Drama | Robert Lemke | IPC 2018
Publication date: 2019-01-23
Playlist: International PHP Conference 2018
Description: 
	When Docker hit the scene, many developers started using containers as a lightweight alternative to virtual machines. It was promising to use Docker as a local environment for development which would closely match the software running on the production servers. But the cake was a lie, all sorts of practical issues spoiled the fun.â€‹

In this session Robert Lemke (Flownative GmbH) shares what he learned throughout the last four years of using Docker as a development (and production) environment and how you can create your own set-up taking full advantage of the benefits containers provide.
Captions: 
	00:00:00,000 --> 00:00:13,200
I really tried to make a drama out of

00:00:08,610 --> 00:00:15,480
this and my hdmi adapter didn't work

00:00:13,200 --> 00:00:21,779
anymore and so I already thought was

00:00:15,480 --> 00:00:24,439
looking for a flipchart okay so but the

00:00:21,779 --> 00:00:28,500
room is full and that means either

00:00:24,439 --> 00:00:31,260
people are interested in starting with

00:00:28,500 --> 00:00:35,280
docker for development or they made some

00:00:31,260 --> 00:00:39,360
rough experiences in doing so so who

00:00:35,280 --> 00:00:43,190
already did work or try to work with

00:00:39,360 --> 00:00:48,899
docker and development and I knew it

00:00:43,190 --> 00:00:52,020
so okay what you can expect from this

00:00:48,899 --> 00:00:55,170
talk because you now still have the

00:00:52,020 --> 00:00:58,949
chance to leave okay or any time I'm not

00:00:55,170 --> 00:01:01,350
I don't take it personal so I'll tell

00:00:58,949 --> 00:01:03,809
you about the experiences I made during

00:01:01,350 --> 00:01:06,240
the last couple of years using docker in

00:01:03,809 --> 00:01:09,180
development but also in production the

00:01:06,240 --> 00:01:11,610
problems I faced things like slow file

00:01:09,180 --> 00:01:15,299
synchronization and all kinds of other

00:01:11,610 --> 00:01:17,340
things I will show you some some

00:01:15,299 --> 00:01:21,270
different possible solutions for that

00:01:17,340 --> 00:01:22,290
and then in the end I'll show you a

00:01:21,270 --> 00:01:24,630
little

00:01:22,290 --> 00:01:27,330
I'd say tool set or development

00:01:24,630 --> 00:01:29,720
environment we currently use for working

00:01:27,330 --> 00:01:33,150
with our content management system and

00:01:29,720 --> 00:01:34,680
that is unfortunately not the tool you

00:01:33,150 --> 00:01:38,610
can use for anything else

00:01:34,680 --> 00:01:40,770
but you're absolutely invited to look

00:01:38,610 --> 00:01:44,970
into the scripts we have I also put them

00:01:40,770 --> 00:01:47,250
into the slides so that the the

00:01:44,970 --> 00:01:49,350
solutions we found for our specific

00:01:47,250 --> 00:01:51,299
problems or for more general problems

00:01:49,350 --> 00:01:54,960
that you can at least adapt them for

00:01:51,299 --> 00:01:57,869
your own projects or maybe at the end

00:01:54,960 --> 00:02:02,369
you decide to not go for docker at all

00:01:57,869 --> 00:02:04,649
so that could also be the case yeah so

00:02:02,369 --> 00:02:09,179
my name is Robert my background is

00:02:04,649 --> 00:02:13,350
basically I'm working in oh yea working

00:02:09,179 --> 00:02:14,910
you it's a hobby but I do that full-time

00:02:13,350 --> 00:02:16,710
in an open-source project doing a

00:02:14,910 --> 00:02:21,600
content management system that is called

00:02:16,710 --> 00:02:23,940
Neos and like to earn some money I try

00:02:21,600 --> 00:02:26,990
to consult people and help them with

00:02:23,940 --> 00:02:32,090
that and also with kubernetes and docker

00:02:26,990 --> 00:02:35,880
so docker is anyone using anything any

00:02:32,090 --> 00:02:42,030
other container solution than docker or

00:02:35,880 --> 00:02:46,860
has been using like aleksey or vagrant

00:02:42,030 --> 00:02:51,990
yes well ok let's talk about maker

00:02:46,860 --> 00:02:54,720
intent because I mean you probably

00:02:51,990 --> 00:02:57,000
started with just native development

00:02:54,720 --> 00:02:59,520
environment on your computer and then

00:02:57,000 --> 00:03:03,480
virtual machines came up and then

00:02:59,520 --> 00:03:06,180
something like wake vagrant came up but

00:03:03,480 --> 00:03:08,430
just to make the case like where is

00:03:06,180 --> 00:03:10,440
really the line between something like

00:03:08,430 --> 00:03:12,540
docker container technology and

00:03:10,440 --> 00:03:14,870
something like vagrant it's really

00:03:12,540 --> 00:03:18,000
important to remember that docker is not

00:03:14,870 --> 00:03:20,450
some kind of virtual machine so it's

00:03:18,000 --> 00:03:23,250
really just a clever way to isolate

00:03:20,450 --> 00:03:27,390
processes of you on your computer and

00:03:23,250 --> 00:03:29,400
that means usually it's very fast so but

00:03:27,390 --> 00:03:32,420
as most of you have worked with docker

00:03:29,400 --> 00:03:35,550
I don't I'm not telling you anything new

00:03:32,420 --> 00:03:37,410
so before I show you the problems in

00:03:35,550 --> 00:03:39,360
solutions you need to know what were my

00:03:37,410 --> 00:03:41,430
goals for development environment and

00:03:39,360 --> 00:03:43,950
I'd really love to know what your goals

00:03:41,430 --> 00:03:48,330
were so I'll ask you and maybe you

00:03:43,950 --> 00:03:50,430
already make up your mind so when I have

00:03:48,330 --> 00:03:52,950
a development environment I don't want

00:03:50,430 --> 00:03:56,550
to take compromises on the tooling set I

00:03:52,950 --> 00:04:00,660
can use so for example if if I have

00:03:56,550 --> 00:04:04,800
something in it I cannot use my favorite

00:04:00,660 --> 00:04:09,030
IDE or I have to like set up some weird

00:04:04,800 --> 00:04:11,640
in intermediates scripts to do so or I

00:04:09,030 --> 00:04:13,850
cannot use something like X debug or

00:04:11,640 --> 00:04:16,890
some other profiling or whatever I

00:04:13,850 --> 00:04:21,120
really just want to work as if I'm

00:04:16,890 --> 00:04:23,850
working natively and of course I also

00:04:21,120 --> 00:04:24,389
don't want to lose any code or so so I'm

00:04:23,850 --> 00:04:27,240
I don't

00:04:24,389 --> 00:04:29,639
want to program in some container which

00:04:27,240 --> 00:04:33,060
disappears and then all my code is gone

00:04:29,639 --> 00:04:37,680
and so on that was one of my goals then

00:04:33,060 --> 00:04:40,050
it should be fast because if usually in

00:04:37,680 --> 00:04:43,469
a development context my application

00:04:40,050 --> 00:04:46,409
would respond like in 400 milliseconds

00:04:43,469 --> 00:04:48,990
or so that's completely fine for me

00:04:46,409 --> 00:04:51,060
during development but it takes five

00:04:48,990 --> 00:04:53,870
seconds for a request that makes me

00:04:51,060 --> 00:04:58,979
angry and also very inefficient because

00:04:53,870 --> 00:05:00,330
like with any website visitor you start

00:04:58,979 --> 00:05:03,029
thinking about something completely

00:05:00,330 --> 00:05:05,099
different and then finally drift off so

00:05:03,029 --> 00:05:06,590
that's not acceptable for a development

00:05:05,099 --> 00:05:12,180
environment I think that it makes

00:05:06,590 --> 00:05:13,680
everything really flow and I don't know

00:05:12,180 --> 00:05:16,770
who is working with lots of different

00:05:13,680 --> 00:05:20,900
projects like web agencies and so on

00:05:16,770 --> 00:05:20,900
like you have new projects all the time

00:05:20,990 --> 00:05:26,999
okay like a third maybe and so I guess

00:05:24,960 --> 00:05:29,400
the rest of you is mostly working on one

00:05:26,999 --> 00:05:33,629
application or one solution in your

00:05:29,400 --> 00:05:35,849
company so for me it's the case then

00:05:33,629 --> 00:05:39,360
that I have lots of different projects

00:05:35,849 --> 00:05:43,129
with which I have a different age also

00:05:39,360 --> 00:05:46,439
like different PHP versions based on

00:05:43,129 --> 00:05:49,020
sometimes some old inactive project

00:05:46,439 --> 00:05:52,919
could become active again but only for a

00:05:49,020 --> 00:05:55,349
day so I really wanted to be able to

00:05:52,919 --> 00:05:57,870
switch very easily between these

00:05:55,349 --> 00:06:00,539
projects and also to start a new project

00:05:57,870 --> 00:06:03,330
and when I want to try out something or

00:06:00,539 --> 00:06:03,960
for example I want to give a demo with

00:06:03,330 --> 00:06:07,080
Neos

00:06:03,960 --> 00:06:09,930
the CMS I want to be able to just start

00:06:07,080 --> 00:06:15,270
a new thing very easily and not spend

00:06:09,930 --> 00:06:18,180
like 15 minutes doing and then probably

00:06:15,270 --> 00:06:21,960
what hope hopefully is this like your

00:06:18,180 --> 00:06:25,439
main motivation to to use something like

00:06:21,960 --> 00:06:28,620
daca is you want to try to match the

00:06:25,439 --> 00:06:34,469
development software with what you have

00:06:28,620 --> 00:06:36,120
in production so sorry for asking all

00:06:34,469 --> 00:06:37,039
the time but it's really I really want

00:06:36,120 --> 00:06:39,680
to know

00:06:37,039 --> 00:06:42,349
and so when you use darker for

00:06:39,680 --> 00:06:47,300
development who also uses exactly the

00:06:42,349 --> 00:06:50,930
same images in production that is very

00:06:47,300 --> 00:06:55,279
few and that is usually the case because

00:06:50,930 --> 00:06:58,180
it's not so easy to do first of all it's

00:06:55,279 --> 00:07:00,529
it's an organizational problem because

00:06:58,180 --> 00:07:02,240
developers are usually caring for their

00:07:00,529 --> 00:07:03,919
development environment and some other

00:07:02,240 --> 00:07:06,409
administrators are caring for the

00:07:03,919 --> 00:07:09,740
production environment so there's not

00:07:06,409 --> 00:07:13,580
like you as a developer have a lot of

00:07:09,740 --> 00:07:15,289
say in to how the production images will

00:07:13,580 --> 00:07:20,749
look like and that's that's the problem

00:07:15,289 --> 00:07:23,839
often all right and then I always have

00:07:20,749 --> 00:07:26,419
some additional software and that is

00:07:23,839 --> 00:07:28,219
actually not really a big problem but

00:07:26,419 --> 00:07:31,580
it's actually one of the beauties I

00:07:28,219 --> 00:07:35,270
think of darker that I don't have to

00:07:31,580 --> 00:07:39,499
really install elasticsearch or any

00:07:35,270 --> 00:07:42,740
other solution I can just spin up a

00:07:39,499 --> 00:07:44,479
docker container for trying it and it

00:07:42,740 --> 00:07:46,309
doesn't really sometimes it doesn't

00:07:44,479 --> 00:07:48,529
really have to be something like in

00:07:46,309 --> 00:07:51,110
production it's good enough to have some

00:07:48,529 --> 00:07:55,189
elasticsearch or some solar or whatever

00:07:51,110 --> 00:07:59,599
running and that should be easy to do so

00:07:55,189 --> 00:08:03,949
it shouldn't be like a rigid concept for

00:07:59,599 --> 00:08:09,259
my development environment what do you

00:08:03,949 --> 00:08:12,289
do with composer you know when do you

00:08:09,259 --> 00:08:15,879
have you do you use the PHP on your

00:08:12,289 --> 00:08:19,669
machine for running composer update

00:08:15,879 --> 00:08:23,389
mm-hmm and the problem with that is it

00:08:19,669 --> 00:08:26,479
will use the dependencies of your PHP

00:08:23,389 --> 00:08:29,689
and put that into the composer lock file

00:08:26,479 --> 00:08:32,149
so for example if your your Mac for

00:08:29,689 --> 00:08:34,519
example is running PHP 72 but in

00:08:32,149 --> 00:08:36,289
production you have seven one and you do

00:08:34,519 --> 00:08:39,579
a composer update and check in the

00:08:36,289 --> 00:08:42,139
composer lock file you might have

00:08:39,579 --> 00:08:46,850
incompatible code there and that

00:08:42,139 --> 00:08:48,560
happened all the time so okay before we

00:08:46,850 --> 00:08:50,720
look at the problems and solutions let's

00:08:48,560 --> 00:08:56,779
see what could you actually do with

00:08:50,720 --> 00:08:59,180
darker because honestly as much as I

00:08:56,779 --> 00:09:03,379
like all this container stuff sometimes

00:08:59,180 --> 00:09:05,480
I wonder why are we using it for this

00:09:03,379 --> 00:09:08,089
and that just because it's so fancy

00:09:05,480 --> 00:09:09,639
there I mean there's another talk by

00:09:08,089 --> 00:09:15,740
Sebastian called

00:09:09,639 --> 00:09:21,379
an ode to boring technology and I know

00:09:15,740 --> 00:09:25,910
nobody some other Sebastian no and I can

00:09:21,379 --> 00:09:28,699
only second that don't don't forget

00:09:25,910 --> 00:09:30,589
about the boring technology it really

00:09:28,699 --> 00:09:32,540
makes sense sometimes yeah and so

00:09:30,589 --> 00:09:35,120
they're easy solutions of course it's

00:09:32,540 --> 00:09:38,899
not a problem to install multiple PHP

00:09:35,120 --> 00:09:40,939
versions that is not really a problem it

00:09:38,899 --> 00:09:46,850
has been like I don't know 10 years ago

00:09:40,939 --> 00:09:49,670
so and you can come come up with clever

00:09:46,850 --> 00:09:51,500
ways like different ports for PHP fpm

00:09:49,670 --> 00:09:53,899
and so on but the problem of course is

00:09:51,500 --> 00:09:57,019
if you really want to match production

00:09:53,899 --> 00:09:59,240
then you also need the correct web

00:09:57,019 --> 00:10:01,100
server so I've seen lots of projects

00:09:59,240 --> 00:10:03,649
where for development they were using

00:10:01,100 --> 00:10:07,670
nginx and then in production they using

00:10:03,649 --> 00:10:14,750
Apache and well surprise there were some

00:10:07,670 --> 00:10:18,110
differences and about the quick setup of

00:10:14,750 --> 00:10:21,800
new projects I mean you want to type in

00:10:18,110 --> 00:10:24,500
some I don't know like a subdomain of

00:10:21,800 --> 00:10:26,629
local host or subdomain of test or

00:10:24,500 --> 00:10:28,100
whatever into your browser so you can

00:10:26,629 --> 00:10:30,199
reach your different projects and

00:10:28,100 --> 00:10:33,319
there's some clever ways to do so so you

00:10:30,199 --> 00:10:35,720
could set up a little DNS server like

00:10:33,319 --> 00:10:38,480
DNS mask on your computer which uses

00:10:35,720 --> 00:10:44,180
virtual host based on directory names

00:10:38,480 --> 00:10:47,199
and things like that and I guess yeah

00:10:44,180 --> 00:10:51,860
so there are lots of ways to do that and

00:10:47,199 --> 00:10:54,649
if it's not so important to match what

00:10:51,860 --> 00:10:56,449
you have in production then this might

00:10:54,649 --> 00:11:02,839
still be a way because it's way less

00:10:56,449 --> 00:11:05,080
complex so I asked you basically what

00:11:02,839 --> 00:11:07,660
what you did but

00:11:05,080 --> 00:11:14,260
what kind of darker setup are you using

00:11:07,660 --> 00:11:17,680
yet currently so argue first of all

00:11:14,260 --> 00:11:19,870
where is the code yeah you're working

00:11:17,680 --> 00:11:22,690
with as so when when you have your IDE

00:11:19,870 --> 00:11:25,630
and press a where does it save to your

00:11:22,690 --> 00:11:26,500
local disk of your computer or inside

00:11:25,630 --> 00:11:29,160
the container

00:11:26,500 --> 00:11:35,290
so who's working on the local disk and

00:11:29,160 --> 00:11:38,380
mounts that somewhere so ok about the

00:11:35,290 --> 00:11:42,820
half so the alternative is you could for

00:11:38,380 --> 00:11:45,610
example in phpstorm say every time I

00:11:42,820 --> 00:11:47,950
press save it will upload the file

00:11:45,610 --> 00:11:49,930
through as a sage or some other way

00:11:47,950 --> 00:11:52,149
directly into the container and then the

00:11:49,930 --> 00:11:54,250
master is there but that also means that

00:11:52,149 --> 00:11:56,380
any good operation or composite

00:11:54,250 --> 00:12:00,850
operation must be done in the container

00:11:56,380 --> 00:12:04,990
and well when when you remove that

00:12:00,850 --> 00:12:08,670
container a volume then it's gone so

00:12:04,990 --> 00:12:12,990
let's see darker compose is probably the

00:12:08,670 --> 00:12:17,350
yeah the only real solution to work with

00:12:12,990 --> 00:12:20,950
this the stalker setup locally and what

00:12:17,350 --> 00:12:22,990
what you could do is and usually you

00:12:20,950 --> 00:12:25,270
will have something like a web server

00:12:22,990 --> 00:12:30,720
PHP fpm and a database

00:12:25,270 --> 00:12:30,720
plus what you need in your project right

00:12:32,220 --> 00:12:42,220
so let's see how the setup looks like it

00:12:38,260 --> 00:12:44,890
depends of course what's necessary for

00:12:42,220 --> 00:12:47,680
your specific setup so probably you need

00:12:44,890 --> 00:12:50,290
to create a docker compose yamo and then

00:12:47,680 --> 00:12:51,250
add the specific versions to it and so

00:12:50,290 --> 00:12:54,820
on

00:12:51,250 --> 00:12:56,790
so I'll show you quickly now we are

00:12:54,820 --> 00:12:59,200
facing a few problems I'll show you

00:12:56,790 --> 00:13:01,180
basically in theory what the solution is

00:12:59,200 --> 00:13:03,010
and later on practically how it really

00:13:01,180 --> 00:13:06,100
looks like so if it's not so much detail

00:13:03,010 --> 00:13:08,350
don't be worried there will be more

00:13:06,100 --> 00:13:13,209
details right so what you can do is

00:13:08,350 --> 00:13:16,270
create templates for that so you say I

00:13:13,209 --> 00:13:18,970
create a new nails project I have darker

00:13:16,270 --> 00:13:25,890
composed yeah more template for these

00:13:18,970 --> 00:13:28,630
kinds of projects and when you have that

00:13:25,890 --> 00:13:31,779
standardized composer yeah Mille you use

00:13:28,630 --> 00:13:33,459
scripts to initialize a whole new

00:13:31,779 --> 00:13:36,040
project so you go into your project

00:13:33,459 --> 00:13:38,620
directory and type something like my dev

00:13:36,040 --> 00:13:40,570
environment in it and it will create

00:13:38,620 --> 00:13:42,610
these files and maybe some other files

00:13:40,570 --> 00:13:44,440
as well maybe some database settings

00:13:42,610 --> 00:13:47,050
into settings piano

00:13:44,440 --> 00:13:51,180
things like that so just create a little

00:13:47,050 --> 00:13:53,350
script which we are using for

00:13:51,180 --> 00:13:56,550
initializing your projects and even

00:13:53,350 --> 00:13:56,550
upgrading your project

00:13:57,310 --> 00:14:04,900
I'll show you how in a docker compose

00:14:01,630 --> 00:14:07,449
you can take advantage of default values

00:14:04,900 --> 00:14:10,180
and environment variables that's very

00:14:07,449 --> 00:14:12,370
important because if you have a template

00:14:10,180 --> 00:14:14,560
you don't want to change the file

00:14:12,370 --> 00:14:18,220
actually because what is if the template

00:14:14,560 --> 00:14:20,560
improves then you have you know you

00:14:18,220 --> 00:14:23,980
can't really upgrade your docker compose

00:14:20,560 --> 00:14:25,690
llamÃ³ and environment variables are

00:14:23,980 --> 00:14:27,820
specifically important because that is

00:14:25,690 --> 00:14:31,810
the concept you can use in development

00:14:27,820 --> 00:14:33,870
but also in production so if you design

00:14:31,810 --> 00:14:36,370
your application that it can handle

00:14:33,870 --> 00:14:39,130
environment variables for example for

00:14:36,370 --> 00:14:43,029
database credentials for certain

00:14:39,130 --> 00:14:45,670
settings and so on you don't have to

00:14:43,029 --> 00:14:48,520
change your code at all and you can use

00:14:45,670 --> 00:14:50,650
exactly the same docker images but use

00:14:48,520 --> 00:14:54,610
different values for your environment

00:14:50,650 --> 00:14:57,640
variables locally docker compose

00:14:54,610 --> 00:15:00,880
natively supports dot n files so that

00:14:57,640 --> 00:15:03,279
means if for example in your project

00:15:00,880 --> 00:15:04,260
directory you have file called end and

00:15:03,279 --> 00:15:07,829
there are

00:15:04,260 --> 00:15:12,180
environment variables defined they are

00:15:07,829 --> 00:15:12,180
available in your docker compose llamÃ³

00:15:12,360 --> 00:15:18,459
you can even do a little cascade of that

00:15:15,490 --> 00:15:20,339
but that needs additional scripting and

00:15:18,459 --> 00:15:24,480
I'll show you that as well

00:15:20,339 --> 00:15:28,030
another problem is part management so

00:15:24,480 --> 00:15:29,800
you want to access your project for

00:15:28,030 --> 00:15:32,740
example in a browser but also

00:15:29,800 --> 00:15:36,250
maybe through some other ports and if

00:15:32,740 --> 00:15:38,740
you have multiple projects running then

00:15:36,250 --> 00:15:40,510
you could go for random ports but you

00:15:38,740 --> 00:15:42,519
always have to look them up and every

00:15:40,510 --> 00:15:46,470
time you start your project again you

00:15:42,519 --> 00:15:49,810
have to look them up again or you define

00:15:46,470 --> 00:15:52,990
you have a certain scheme or list or an

00:15:49,810 --> 00:15:58,360
excel sheet or whatnot which says on my

00:15:52,990 --> 00:16:00,940
computer port 80237 is specifically for

00:15:58,360 --> 00:16:02,220
that project and you put it into a

00:16:00,940 --> 00:16:06,870
docker compose demo

00:16:02,220 --> 00:16:09,160
well that's it's really cumbersome and

00:16:06,870 --> 00:16:11,860
especially you cannot share that with

00:16:09,160 --> 00:16:13,660
other developers because what kind of

00:16:11,860 --> 00:16:18,430
projects do they have on their machine

00:16:13,660 --> 00:16:20,200
and then they have conflicting ports so

00:16:18,430 --> 00:16:22,870
what you really want to do is try to

00:16:20,200 --> 00:16:25,839
autumn automate that with something like

00:16:22,870 --> 00:16:28,839
service discovery on your machine so

00:16:25,839 --> 00:16:33,970
that this happens automatically I'll

00:16:28,839 --> 00:16:37,480
show you how to do that so who is

00:16:33,970 --> 00:16:40,180
completely happy with how speed is for

00:16:37,480 --> 00:16:42,130
example on a Mac or Windows with using

00:16:40,180 --> 00:16:49,540
docker for development who's happy with

00:16:42,130 --> 00:16:55,060
that me okay so it really depends on

00:16:49,540 --> 00:16:57,339
your project but unfortunately that is

00:16:55,060 --> 00:16:59,410
unless you're using Linux because there

00:16:57,339 --> 00:17:04,089
everything is natively it's very very

00:16:59,410 --> 00:17:06,189
slow and I really try to to memorize

00:17:04,089 --> 00:17:07,839
what I'm going to tell you now but I had

00:17:06,189 --> 00:17:10,770
to write it down because it's so complex

00:17:07,839 --> 00:17:16,120
I want to tell you what happens actually

00:17:10,770 --> 00:17:19,689
when a file changes and finally it ends

00:17:16,120 --> 00:17:24,010
up in the container okay so because you

00:17:19,689 --> 00:17:25,689
know that for example on a Mac docker is

00:17:24,010 --> 00:17:28,660
not running natively as a Mac

00:17:25,689 --> 00:17:33,460
application so there's a little virtual

00:17:28,660 --> 00:17:37,840
machine using hyper kit so somehow you

00:17:33,460 --> 00:17:39,610
have to get synchronized the file from a

00:17:37,840 --> 00:17:41,840
directory into the container and that

00:17:39,610 --> 00:17:47,610
goes through the virtual machine

00:17:41,840 --> 00:17:51,570
then through some driver for the the OS

00:17:47,610 --> 00:17:58,139
10 virtual file system and then what

00:17:51,570 --> 00:18:01,019
happens is it's transfused okay so the

00:17:58,139 --> 00:18:03,779
the file is turned into a fuse measured

00:18:01,019 --> 00:18:06,539
message into the Linux virtual file

00:18:03,779 --> 00:18:09,120
system then it's proxied over a word I

00:18:06,539 --> 00:18:10,919
also killed by transfuse there's another

00:18:09,120 --> 00:18:13,200
software running there then it's

00:18:10,919 --> 00:18:14,010
forwarded on to a UNIX domain socket by

00:18:13,200 --> 00:18:16,529
hyper kid

00:18:14,010 --> 00:18:19,590
then it's deserialize dispatched and

00:18:16,529 --> 00:18:23,669
executed as a macro system call by OS 10

00:18:19,590 --> 00:18:26,970
FS and that was just like the first 10%

00:18:23,669 --> 00:18:29,700
of what's happening so every time you

00:18:26,970 --> 00:18:34,700
change a file all that happens and it

00:18:29,700 --> 00:18:38,519
takes about 100 microseconds per file

00:18:34,700 --> 00:18:41,760
now you would say yeah but during

00:18:38,519 --> 00:18:44,909
development I don't write have so many

00:18:41,760 --> 00:18:47,940
write processes right the problem is

00:18:44,909 --> 00:18:50,279
that in order to guarantee the

00:18:47,940 --> 00:18:54,139
consistency between the file system in

00:18:50,279 --> 00:18:57,179
the container and and your host system

00:18:54,139 --> 00:19:02,370
read access is also very expensive and

00:18:57,179 --> 00:19:04,710
takes a long time and that is why if you

00:19:02,370 --> 00:19:07,559
have a lot of free to access in your

00:19:04,710 --> 00:19:10,409
application and for example in Neos

00:19:07,559 --> 00:19:13,919
we have the whole directory with

00:19:10,409 --> 00:19:17,340
generated proxy files code actually

00:19:13,919 --> 00:19:21,330
compiled code if you want and compiled

00:19:17,340 --> 00:19:24,960
templates and things like that and that

00:19:21,330 --> 00:19:27,480
all has to be read and it doesn't really

00:19:24,960 --> 00:19:31,970
even up cache won't help you with that

00:19:27,480 --> 00:19:35,519
because there will be a read access

00:19:31,970 --> 00:19:38,039
asking did that file change and that

00:19:35,519 --> 00:19:44,250
takes quite some time already so that is

00:19:38,039 --> 00:19:46,980
why it's so slow so what can you do as I

00:19:44,250 --> 00:19:49,710
said you could decide to not mount your

00:19:46,980 --> 00:19:53,669
local directory into the container but

00:19:49,710 --> 00:19:55,530
work within the container I wouldn't do

00:19:53,669 --> 00:19:58,430
that I tried that for some time

00:19:55,530 --> 00:20:02,070
and lost quite some code and as I said

00:19:58,430 --> 00:20:05,550
when the container is if you if you do a

00:20:02,070 --> 00:20:07,140
docker compose down and decide to delete

00:20:05,550 --> 00:20:09,380
the volume as well then everything is

00:20:07,140 --> 00:20:09,380
gone

00:20:09,570 --> 00:20:15,330
that's way too risky so what you could

00:20:12,510 --> 00:20:17,700
do is they improved the file

00:20:15,330 --> 00:20:20,790
synchronization a lot recently like I

00:20:17,700 --> 00:20:24,590
don't know a year ago so for daca for

00:20:20,790 --> 00:20:29,580
Mac and introduce new caching options I

00:20:24,590 --> 00:20:32,070
think I even have a diagram next so

00:20:29,580 --> 00:20:34,110
they're different options you can set

00:20:32,070 --> 00:20:37,380
for volume mounds which are called a

00:20:34,110 --> 00:20:40,800
consistent which is the default cached

00:20:37,380 --> 00:20:48,000
and delegated and the difference between

00:20:40,800 --> 00:20:51,510
them is the guarantee and how fast some

00:20:48,000 --> 00:20:55,440
changes are ending up in the container

00:20:51,510 --> 00:20:58,040
are on the host so usually when you

00:20:55,440 --> 00:21:03,440
develop something you want that the host

00:20:58,040 --> 00:21:05,970
is responsible as authoritative and

00:21:03,440 --> 00:21:08,040
every change ends up in the container

00:21:05,970 --> 00:21:12,660
you don't want that to contain a wins in

00:21:08,040 --> 00:21:14,630
doubt right and so it might take like a

00:21:12,660 --> 00:21:16,530
few milliseconds until everything is

00:21:14,630 --> 00:21:18,630
consistent in the container and that's

00:21:16,530 --> 00:21:20,520
just fine so theoretically something

00:21:18,630 --> 00:21:23,550
like delegate it should be completely

00:21:20,520 --> 00:21:27,090
fine for our case this is an example of

00:21:23,550 --> 00:21:31,770
is Symphony demo app running with a

00:21:27,090 --> 00:21:35,580
consistent cash back in non cash back

00:21:31,770 --> 00:21:38,550
and then cached but without any cache

00:21:35,580 --> 00:21:41,550
entry and then the warmed up cache and

00:21:38,550 --> 00:21:43,650
all you need to know is ok it's faster

00:21:41,550 --> 00:21:48,330
yeah so that's what these diagrams are

00:21:43,650 --> 00:21:52,800
for sometimes you want to have

00:21:48,330 --> 00:21:54,870
consistent so especially if when you're

00:21:52,800 --> 00:21:57,630
using docker in production you

00:21:54,870 --> 00:22:00,000
definitely want that for example in

00:21:57,630 --> 00:22:02,460
invoice generated in the container that

00:22:00,000 --> 00:22:07,710
is really written to the data volume you

00:22:02,460 --> 00:22:08,850
really want that with cached it's a bit

00:22:07,710 --> 00:22:10,800
faster

00:22:08,850 --> 00:22:13,340
so right performed by the container

00:22:10,800 --> 00:22:17,460
immediately available in the house so

00:22:13,340 --> 00:22:20,400
but that is usually not so interesting

00:22:17,460 --> 00:22:24,600
and development and delegated is the

00:22:20,400 --> 00:22:28,170
past this object still it's not really

00:22:24,600 --> 00:22:31,020
fast enough for me so for example as I

00:22:28,170 --> 00:22:34,350
said like 400 milliseconds without

00:22:31,020 --> 00:22:37,830
docker and then about three seconds with

00:22:34,350 --> 00:22:43,700
delegated for my application that is too

00:22:37,830 --> 00:22:48,450
slow for me and I showed you a solution

00:22:43,700 --> 00:22:49,800
later on so and yeah exactly this

00:22:48,450 --> 00:22:52,350
solution here because you could

00:22:49,800 --> 00:22:55,380
depending on your application decide to

00:22:52,350 --> 00:22:59,190
mount mount certain directories and

00:22:55,380 --> 00:23:06,360
others synchronize with something like

00:22:59,190 --> 00:23:08,970
FS event and arcing that is definitely

00:23:06,360 --> 00:23:14,000
the best optimization optimization for

00:23:08,970 --> 00:23:16,140
speed it sounds a bit weird and

00:23:14,000 --> 00:23:18,300
depending on the solution might even

00:23:16,140 --> 00:23:22,110
have some hiccups but that's what I made

00:23:18,300 --> 00:23:27,300
the best experience with it so far I'll

00:23:22,110 --> 00:23:29,250
show you script for that so problems SSH

00:23:27,300 --> 00:23:31,770
access really I mean we're using docker

00:23:29,250 --> 00:23:34,350
why would you have want to have SSH

00:23:31,770 --> 00:23:37,170
access to your container

00:23:34,350 --> 00:23:41,990
who's running some SSH daemon in a

00:23:37,170 --> 00:23:45,450
container don't be ashamed it's okay

00:23:41,990 --> 00:23:48,030
unless you do that in production without

00:23:45,450 --> 00:23:51,330
very good reasons but for development

00:23:48,030 --> 00:23:54,540
that's completely fine because you're

00:23:51,330 --> 00:23:56,250
developing on your host machine but your

00:23:54,540 --> 00:23:58,320
application is running in the container

00:23:56,250 --> 00:24:00,480
and your application might also have

00:23:58,320 --> 00:24:03,600
some comment line options with some

00:24:00,480 --> 00:24:05,460
commands you can execute there the needs

00:24:03,600 --> 00:24:08,250
for example that it there's a command

00:24:05,460 --> 00:24:11,660
for importing the website or for

00:24:08,250 --> 00:24:15,060
clearing the family occasion and so on I

00:24:11,660 --> 00:24:17,100
don't really need PHP on my host machine

00:24:15,060 --> 00:24:20,670
I don't even have PHP admission on my

00:24:17,100 --> 00:24:22,440
host machine I log in to the container

00:24:20,670 --> 00:24:25,080
during development and

00:24:22,440 --> 00:24:27,029
run my commands there with exactly the

00:24:25,080 --> 00:24:29,610
same PHP version which runs on my

00:24:27,029 --> 00:24:31,519
production machine so that is important

00:24:29,610 --> 00:24:34,830
for me

00:24:31,519 --> 00:24:38,340
but getting that right is also a bit

00:24:34,830 --> 00:24:42,779
difficult because SSH needs to know

00:24:38,340 --> 00:24:45,750
which keys are allowed to log in then

00:24:42,779 --> 00:24:48,509
you want to have stable host keys for

00:24:45,750 --> 00:24:50,879
your SSH service so not every time you

00:24:48,509 --> 00:24:55,429
run your project again you don't want to

00:24:50,879 --> 00:24:55,429
get that warning that someone tries to

00:24:56,450 --> 00:25:02,879
do a man-in-the-middle attack and the

00:25:01,019 --> 00:25:06,179
host key change and things like that you

00:25:02,879 --> 00:25:08,730
want that to be stable and also ports

00:25:06,179 --> 00:25:13,830
are again the problem if everything is

00:25:08,730 --> 00:25:18,840
running on port 22 then it doesn't work

00:25:13,830 --> 00:25:21,570
with multiple projects lots of problems

00:25:18,840 --> 00:25:24,539
right ok it's that we are almost through

00:25:21,570 --> 00:25:26,250
with the problems and so that that's

00:25:24,539 --> 00:25:29,700
kind of a Bono's problem is a luxury

00:25:26,250 --> 00:25:32,129
problem I really want to have an easy

00:25:29,700 --> 00:25:35,250
way to synchronize with a production

00:25:32,129 --> 00:25:37,950
data so so for example when I'm

00:25:35,250 --> 00:25:41,129
developing a website locally I want to

00:25:37,950 --> 00:25:44,940
be able to get the images the assets of

00:25:41,129 --> 00:25:46,799
the live website in an easy way so that

00:25:44,940 --> 00:25:50,730
of course depends a lot on your

00:25:46,799 --> 00:25:52,620
application so if I was developing

00:25:50,730 --> 00:25:54,120
something like stripe I don't want to

00:25:52,620 --> 00:25:55,980
download the production data on my

00:25:54,120 --> 00:26:01,620
machine and have the credit card numbers

00:25:55,980 --> 00:26:03,830
for testing but still I think it's

00:26:01,620 --> 00:26:07,379
always worth looking into that topic

00:26:03,830 --> 00:26:10,440
that you have a very easy way to get a

00:26:07,379 --> 00:26:11,720
realistic amount of realistic data for

00:26:10,440 --> 00:26:15,149
development

00:26:11,720 --> 00:26:18,480
really I usually when I get get into

00:26:15,149 --> 00:26:21,000
some project as a consultant the first

00:26:18,480 --> 00:26:23,669
thing I try to do is getting a realistic

00:26:21,000 --> 00:26:25,259
amount of data because they say yeah

00:26:23,669 --> 00:26:27,899
we're developing with this product

00:26:25,259 --> 00:26:32,009
system and so on and we have these ten

00:26:27,899 --> 00:26:34,619
products for testing and then yeah but

00:26:32,009 --> 00:26:35,740
in reality we have about 400,000

00:26:34,619 --> 00:26:37,570
products but that

00:26:35,740 --> 00:26:38,980
doesn't matter I mean the production

00:26:37,570 --> 00:26:42,880
machines are bigger than your computer

00:26:38,980 --> 00:26:44,950
and so okay you see the problem really

00:26:42,880 --> 00:26:49,780
try to develop with realistic amounts of

00:26:44,950 --> 00:26:50,440
data and then I talked about that

00:26:49,780 --> 00:26:55,059
already

00:26:50,440 --> 00:26:57,070
the problem with composer that one is a

00:26:55,059 --> 00:27:00,640
bit tricky and I don't have a ready-made

00:26:57,070 --> 00:27:03,960
solution for yet for you today but I can

00:27:00,640 --> 00:27:07,840
tell you which approach you could take

00:27:03,960 --> 00:27:10,450
so of course you need to run composer in

00:27:07,840 --> 00:27:16,179
the container somehow that it's using

00:27:10,450 --> 00:27:19,420
the right the right p2p version but

00:27:16,179 --> 00:27:22,090
please don't put composer into your

00:27:19,420 --> 00:27:24,910
docker image which later on runs in

00:27:22,090 --> 00:27:28,480
production don't do that

00:27:24,910 --> 00:27:30,100
there is a clever way in architecture

00:27:28,480 --> 00:27:33,160
patent pattern you probably know which

00:27:30,100 --> 00:27:35,710
is called citecar pattern so that you

00:27:33,160 --> 00:27:37,929
have another container running in

00:27:35,710 --> 00:27:40,330
parallel to your existing container and

00:27:37,929 --> 00:27:41,890
they can share a volume and so on so you

00:27:40,330 --> 00:27:44,860
can perfectly create a darker image

00:27:41,890 --> 00:27:48,270
routes which only contains the composer

00:27:44,860 --> 00:27:52,330
file file and mount that into your

00:27:48,270 --> 00:27:56,380
application image and then have composer

00:27:52,330 --> 00:27:58,210
available during development the tricky

00:27:56,380 --> 00:27:59,860
part I mean I could show you that that's

00:27:58,210 --> 00:28:03,460
very easy but the tricky part is to

00:27:59,860 --> 00:28:06,670
actually get the your SSH key through

00:28:03,460 --> 00:28:10,090
SSH agent forwarding and so on into the

00:28:06,670 --> 00:28:12,450
container because you might have private

00:28:10,090 --> 00:28:18,540
composer and composer repositories and

00:28:12,450 --> 00:28:18,540
that takes a little bit of fiddling ok

00:28:19,260 --> 00:28:25,000
so that's so much for the problems any

00:28:22,120 --> 00:28:28,870
any other problem I should try to find a

00:28:25,000 --> 00:28:33,420
solution for you have in mind before I

00:28:28,870 --> 00:28:33,420
start with some demo

00:28:33,880 --> 00:28:51,750
I would say almost all of them but but

00:28:46,780 --> 00:28:54,430
yeah there's absolutely absolutely so

00:28:51,750 --> 00:28:57,250
these are problems you stumble over

00:28:54,430 --> 00:28:59,800
which is like it sounds too promising

00:28:57,250 --> 00:29:04,990
but then you stumble over these problems

00:28:59,800 --> 00:29:07,150
exactly that's the point still the

00:29:04,990 --> 00:29:09,640
question is and that depends on your

00:29:07,150 --> 00:29:11,470
case what you have to do you just have

00:29:09,640 --> 00:29:13,120
to be aware of your problems and the

00:29:11,470 --> 00:29:15,160
benefits of your current solution before

00:29:13,120 --> 00:29:17,530
you take a decision and for me usually

00:29:15,160 --> 00:29:19,240
it was like it's much more important

00:29:17,530 --> 00:29:22,870
that I have the same software running

00:29:19,240 --> 00:29:24,820
development and production then then not

00:29:22,870 --> 00:29:26,290
dealing with these problems ok and

00:29:24,820 --> 00:29:28,720
everything which can be solved by

00:29:26,290 --> 00:29:31,540
development is fine because then it's

00:29:28,720 --> 00:29:32,440
solved once for all and it's not a

00:29:31,540 --> 00:29:37,900
problem anymore

00:29:32,440 --> 00:29:40,030
so let me show you something and yeah

00:29:37,900 --> 00:29:42,190
that is what I'm going to show you is

00:29:40,030 --> 00:29:45,700
our development environment it's called

00:29:42,190 --> 00:29:49,630
local beach and if you're curious you

00:29:45,700 --> 00:29:51,520
can actually follow that link and and

00:29:49,630 --> 00:29:53,580
look it to the instructions how to use

00:29:51,520 --> 00:29:57,340
it look into the darker files and so on

00:29:53,580 --> 00:30:00,760
now that is a specific thing for Nia's

00:29:57,340 --> 00:30:04,060
content management projects or flow

00:30:00,760 --> 00:30:06,580
applications so as I said not a

00:30:04,060 --> 00:30:09,790
universal solution but everything I'll

00:30:06,580 --> 00:30:11,980
show you find that and also what I'm

00:30:09,790 --> 00:30:13,420
going to demo also appears in the slide

00:30:11,980 --> 00:30:15,250
so if you download the slides you'll

00:30:13,420 --> 00:30:18,280
also see the scripts in there so don't

00:30:15,250 --> 00:30:25,690
don't try to write down physics or

00:30:18,280 --> 00:30:29,110
something ok so first of all that is a

00:30:25,690 --> 00:30:34,470
blue screen with a very weird font which

00:30:29,110 --> 00:30:38,070
you cannot read next slide is no let's

00:30:34,470 --> 00:30:38,070
let me switch

00:30:40,780 --> 00:30:49,660
yeah that's a desert and by the way my

00:30:46,910 --> 00:30:52,700
control key is not working because

00:30:49,660 --> 00:30:55,670
MacBook Pro keyboard so I had to remap

00:30:52,700 --> 00:30:58,070
control and don't I mean just if you

00:30:55,670 --> 00:31:00,980
wonder sometimes when I type something

00:30:58,070 --> 00:31:10,600
ugly that's because my fingers didn't

00:31:00,980 --> 00:31:10,600
learn that yet I didn't hear that

00:31:13,030 --> 00:31:31,490
yesterday it was working yes tell me

00:31:23,570 --> 00:31:33,800
more but ah why it's not working anymore

00:31:31,490 --> 00:31:36,950
the presentation mode had a such a nice

00:31:33,800 --> 00:31:41,320
profile with so big font oh geez

00:31:36,950 --> 00:31:41,320
that doesn't matter so you can read that

00:31:42,400 --> 00:31:53,720
okay there's an idea okay

00:31:47,540 --> 00:31:57,230
I really thought like I I do a full life

00:31:53,720 --> 00:32:00,320
demo just for the for the fun of it and

00:31:57,230 --> 00:32:02,150
also because it's a call the drama we

00:32:00,320 --> 00:32:07,220
have all the chances to get real drama

00:32:02,150 --> 00:32:09,170
here so what I'm now doing is I have an

00:32:07,220 --> 00:32:12,920
empty write directory and start a

00:32:09,170 --> 00:32:14,660
completely new nails project by doing a

00:32:12,920 --> 00:32:17,750
composer create project and it's

00:32:14,660 --> 00:32:20,360
downloading fortunately from cache all

00:32:17,750 --> 00:32:23,330
the composer repositories you need for

00:32:20,360 --> 00:32:25,850
that and because I did that in a

00:32:23,330 --> 00:32:28,880
subdirectory which is very stupid okay

00:32:25,850 --> 00:32:33,640
so here we have it can you read that and

00:32:28,880 --> 00:32:37,840
the very bag or should I yeah I should

00:32:33,640 --> 00:32:37,840
thanks for your answers

00:32:39,230 --> 00:32:43,950
isn't that fine for you yes isn't that

00:32:43,379 --> 00:32:46,799
nice

00:32:43,950 --> 00:32:48,450
so what you have to know about this

00:32:46,799 --> 00:32:52,850
nails project is there are different

00:32:48,450 --> 00:32:58,679
directories with different purposes and

00:32:52,850 --> 00:33:01,409
one is called data it contains data not

00:32:58,679 --> 00:33:04,139
code right

00:33:01,409 --> 00:33:07,289
and another it's called packages that

00:33:04,139 --> 00:33:10,200
contains the packages that is the code

00:33:07,289 --> 00:33:14,580
so I want to have different strategies

00:33:10,200 --> 00:33:18,629
for that for these two directories

00:33:14,580 --> 00:33:21,419
because the code should be synchronized

00:33:18,629 --> 00:33:24,409
into the container and what's in data

00:33:21,419 --> 00:33:27,480
for example images I upload and so on

00:33:24,409 --> 00:33:30,330
could probably be mounted right away

00:33:27,480 --> 00:33:32,610
because their speed is not so important

00:33:30,330 --> 00:33:35,129
the synchronization speed and so on and

00:33:32,610 --> 00:33:37,799
I don't want to lose all the images I

00:33:35,129 --> 00:33:40,830
uploaded when I do a darker compose down

00:33:37,799 --> 00:33:44,220
or something okay so I have these two

00:33:40,830 --> 00:33:47,700
different strategies for packages I want

00:33:44,220 --> 00:33:51,149
to use my fancy synchronization and for

00:33:47,700 --> 00:33:57,690
data I do a real file mount volume

00:33:51,149 --> 00:34:01,559
amount now I mentioned that we created a

00:33:57,690 --> 00:34:04,220
script for that let's install that let's

00:34:01,559 --> 00:34:07,019
see if that works

00:34:04,220 --> 00:34:10,079
blue installed peach tli and that's

00:34:07,019 --> 00:34:12,569
something for example if in our company

00:34:10,079 --> 00:34:15,389
everyone's using a Mac or something like

00:34:12,569 --> 00:34:18,690
that just put your script into some kind

00:34:15,389 --> 00:34:20,909
of package like in homebrew or so and

00:34:18,690 --> 00:34:23,760
then everyone can just install it with

00:34:20,909 --> 00:34:27,149
all that looks interesting yeah with for

00:34:23,760 --> 00:34:28,919
example home proof and now let's see

00:34:27,149 --> 00:34:36,800
peach there it goes

00:34:28,919 --> 00:34:41,730
so I can now do a beach local in it and

00:34:36,800 --> 00:34:45,690
I could say oh no let's let's start with

00:34:41,730 --> 00:34:48,220
another concept um I said I have the

00:34:45,690 --> 00:34:50,319
problem with the ports when

00:34:48,220 --> 00:34:52,899
if I have ten projects and ten

00:34:50,319 --> 00:34:54,909
webservice I want to have one domain and

00:34:52,899 --> 00:34:57,520
not care about the ports and I want to

00:34:54,909 --> 00:35:01,380
have service discovery so what I have

00:34:57,520 --> 00:35:04,690
for that is one central docker compose

00:35:01,380 --> 00:35:09,460
application running which runs an engine

00:35:04,690 --> 00:35:12,069
X proxy reverse proxy and a MySQL

00:35:09,460 --> 00:35:14,740
database so I use that for all the

00:35:12,069 --> 00:35:21,730
projects then on my Rio DP so I can just

00:35:14,740 --> 00:35:24,069
start that local page up and this script

00:35:21,730 --> 00:35:26,170
now doesn't really do magic it's it's

00:35:24,069 --> 00:35:30,609
just a nicer wrapper around docker

00:35:26,170 --> 00:35:32,859
compose okay so it's not so fancy and

00:35:30,609 --> 00:35:38,369
you can look into the code it's not so

00:35:32,859 --> 00:35:42,970
much but now it started a reverse proxy

00:35:38,369 --> 00:35:49,990
and then what we did is we registered a

00:35:42,970 --> 00:35:53,109
domain called local beach net and that

00:35:49,990 --> 00:35:55,690
points and don't be scared when you type

00:35:53,109 --> 00:35:58,690
it into a browser it points to localhost

00:35:55,690 --> 00:36:01,569
so if you don't don't tell us yeah you

00:35:58,690 --> 00:36:03,460
you copied all my data to your servers

00:36:01,569 --> 00:36:07,119
and so I don't know it's actually your

00:36:03,460 --> 00:36:09,339
server okay you can do that with any

00:36:07,119 --> 00:36:12,700
other domain and we have wild card

00:36:09,339 --> 00:36:15,490
domain so I know it's a bit small up

00:36:12,700 --> 00:36:17,710
there but you could write something like

00:36:15,490 --> 00:36:22,690
demo dot local beach and it will still

00:36:17,710 --> 00:36:28,290
be your localhost okay that was part one

00:36:22,690 --> 00:36:35,730
and now I do a beach local in it I say

00:36:28,290 --> 00:36:39,040
please also create a database and that

00:36:35,730 --> 00:36:43,109
was it so what it now created was a

00:36:39,040 --> 00:36:48,099
docker compose DML for this project and

00:36:43,109 --> 00:36:54,190
to one environment variable file one dot

00:36:48,099 --> 00:36:59,760
n file let's take a look at that how is

00:36:54,190 --> 00:36:59,760
it called local beach darker

00:37:00,559 --> 00:37:10,579
docker compose llamo so yes I'll make it

00:37:06,690 --> 00:37:10,579
bigger don't say anything

00:37:11,359 --> 00:37:21,180
so ok hmm so I told you try to come up

00:37:19,589 --> 00:37:23,369
with templates this is basically

00:37:21,180 --> 00:37:25,980
basically a template so I won't change

00:37:23,369 --> 00:37:28,829
this template or this file for this

00:37:25,980 --> 00:37:33,510
project even if I have different needs

00:37:28,829 --> 00:37:36,540
ok so I try to not touch it and that is

00:37:33,510 --> 00:37:39,089
possible because I use a lot of defaults

00:37:36,540 --> 00:37:43,410
and environment variables for all kinds

00:37:39,089 --> 00:37:46,200
of things so you see first of all I'm

00:37:43,410 --> 00:37:48,240
using a common network for all my

00:37:46,200 --> 00:37:51,960
projects which is called local beach up

00:37:48,240 --> 00:37:55,049
there so that the reverse proxy can

00:37:51,960 --> 00:37:59,220
communicate with this container for

00:37:55,049 --> 00:38:02,730
example then you see for example the

00:37:59,220 --> 00:38:05,040
image for the web server I don't know if

00:38:02,730 --> 00:38:08,220
you know that syntax but is that's

00:38:05,040 --> 00:38:12,839
basically bash of shells syntax so you

00:38:08,220 --> 00:38:15,599
can use something like here an image

00:38:12,839 --> 00:38:18,450
that should basically be what is in

00:38:15,599 --> 00:38:22,290
beach web server image and if that is

00:38:18,450 --> 00:38:25,829
empty then use what's after the dash

00:38:22,290 --> 00:38:28,200
flow native beach engine eggs okay so

00:38:25,829 --> 00:38:30,059
that means without modifications you can

00:38:28,200 --> 00:38:32,190
just use this but if you want to

00:38:30,059 --> 00:38:39,329
override the image name you can specify

00:38:32,190 --> 00:38:40,799
an environment variable okay and that's

00:38:39,329 --> 00:38:43,530
important that you make that

00:38:40,799 --> 00:38:46,290
configurable especially of course by the

00:38:43,530 --> 00:38:49,670
PHP for the PHP container down there

00:38:46,290 --> 00:38:54,059
where you see container image name is

00:38:49,670 --> 00:38:57,750
Beach PHP fpm and the image version is

00:38:54,059 --> 00:39:00,480
latest which you should not do unless

00:38:57,750 --> 00:39:03,480
you just want to try out something

00:39:00,480 --> 00:39:09,180
always try to pin it directly to version

00:39:03,480 --> 00:39:11,400
like 7 to 10 or what we have and make

00:39:09,180 --> 00:39:18,700
sure that you synchronize where we

00:39:11,400 --> 00:39:23,770
production okay and yeah and the rest

00:39:18,700 --> 00:39:26,260
are just virtual environment variables

00:39:23,770 --> 00:39:28,540
here you see that for the web server I'm

00:39:26,260 --> 00:39:31,150
using a volume amount called Delic with

00:39:28,540 --> 00:39:34,630
delegated because their speed is not so

00:39:31,150 --> 00:39:39,010
important mostly the static files there

00:39:34,630 --> 00:39:41,980
I'm fine with that and I mount my

00:39:39,010 --> 00:39:43,300
current development directory into a

00:39:41,980 --> 00:39:50,770
directory called

00:39:43,300 --> 00:39:55,660
application in the container okay for

00:39:50,770 --> 00:40:01,960
PHP I do something really different do

00:39:55,660 --> 00:40:05,380
you see these volume mounts so as I said

00:40:01,960 --> 00:40:07,360
data could be for example uploaded

00:40:05,380 --> 00:40:12,850
images and that is stored in data

00:40:07,360 --> 00:40:14,890
persistent in my Neos application I

00:40:12,850 --> 00:40:16,990
mount that to application data

00:40:14,890 --> 00:40:19,390
persistent and make it delegate it so

00:40:16,990 --> 00:40:21,910
that is mounted like right away and I

00:40:19,390 --> 00:40:25,030
don't need to synchronize anything the

00:40:21,910 --> 00:40:28,270
logs as well doctrine migrations things

00:40:25,030 --> 00:40:31,920
like that but now you see there's

00:40:28,270 --> 00:40:35,590
something called application on host and

00:40:31,920 --> 00:40:39,160
that's a weird trick I use them so what

00:40:35,590 --> 00:40:43,030
I actually do is I mount my local

00:40:39,160 --> 00:40:46,260
development directory into the container

00:40:43,030 --> 00:40:50,590
into that directory application on host

00:40:46,260 --> 00:40:53,260
and probably Stefan now talk to your

00:40:50,590 --> 00:40:58,390
ears don't don't listen to that because

00:40:53,260 --> 00:41:00,250
so ugly and then it startup script in

00:40:58,390 --> 00:41:02,950
the container will detect that this

00:41:00,250 --> 00:41:06,010
directory exists and copy everything to

00:41:02,950 --> 00:41:07,390
slash application so that is kind of

00:41:06,010 --> 00:41:11,440
when you start the project the first

00:41:07,390 --> 00:41:14,770
time everything is copied again and from

00:41:11,440 --> 00:41:17,860
then on we detect any file changes and

00:41:14,770 --> 00:41:24,060
synchronize between application on host

00:41:17,860 --> 00:41:24,060
and application using FS event

00:41:25,349 --> 00:41:33,880
okay so that sounds really stupid too to

00:41:31,210 --> 00:41:35,950
copy a whole project again to a volume

00:41:33,880 --> 00:41:39,099
but that is also what you would do for

00:41:35,950 --> 00:41:42,880
example in kubernetes because you cannot

00:41:39,099 --> 00:41:46,509
create an image in kubernetes put that

00:41:42,880 --> 00:41:50,170
it as a container into a pot and not run

00:41:46,509 --> 00:41:54,069
it so in darker composed you can do that

00:41:50,170 --> 00:41:55,839
you have a data only image which only

00:41:54,069 --> 00:41:57,940
provides the data but it is not running

00:41:55,839 --> 00:42:00,430
a process but that's not possible in

00:41:57,940 --> 00:42:02,499
kubernetes and what you do that for

00:42:00,430 --> 00:42:06,069
example is running an init container

00:42:02,499 --> 00:42:07,989
which only is started once your whole

00:42:06,069 --> 00:42:12,539
application comes up and that could for

00:42:07,989 --> 00:42:12,539
example copy stuff to the shared volume

00:42:13,559 --> 00:42:24,880
do you have a question about that fancy

00:42:16,950 --> 00:42:33,369
weird constructor shocked everyone is

00:42:24,880 --> 00:42:36,249
completely shocked okay by the way now I

00:42:33,369 --> 00:42:39,720
see here for example health check and so

00:42:36,249 --> 00:42:42,430
on that's just another recommendation

00:42:39,720 --> 00:42:46,029
docker compose also allows you to

00:42:42,430 --> 00:42:48,279
specify resource limits so for example

00:42:46,029 --> 00:42:52,289
that a container can only have sown so

00:42:48,279 --> 00:42:54,519
much memory or only run so use that yes

00:42:52,289 --> 00:42:57,700
because that makes it even more

00:42:54,519 --> 00:42:59,519
realistic try to set the same limits

00:42:57,700 --> 00:43:02,349
which you also will have in production

00:42:59,519 --> 00:43:04,359
because it doesn't really make sense if

00:43:02,349 --> 00:43:08,369
on your local machine you have a queue

00:43:04,359 --> 00:43:08,369
bytes of RAM but in production you don't

00:43:09,930 --> 00:43:18,400
ok so that was the local Beach docker

00:43:15,369 --> 00:43:23,619
compose llamo and then I have a file

00:43:18,400 --> 00:43:28,119
called local beach dist

00:43:23,619 --> 00:43:31,499
dot end and that is the environment

00:43:28,119 --> 00:43:35,950
variables which I'll actually check into

00:43:31,499 --> 00:43:38,529
to the project where I could set some

00:43:35,950 --> 00:43:40,329
project specific and variant environment

00:43:38,529 --> 00:43:43,630
variables which I want to share with my

00:43:40,329 --> 00:43:46,539
whole team so if a new developer checks

00:43:43,630 --> 00:43:50,349
out the project they already have stuff

00:43:46,539 --> 00:43:53,739
and if I have very personal specific

00:43:50,349 --> 00:43:56,229
things like API test keys or things like

00:43:53,739 --> 00:44:01,059
that I would put that into a dot end

00:43:56,229 --> 00:44:12,690
file and let that get ignore that file

00:44:01,059 --> 00:44:12,690
ok so that's basically my Cascade ok

00:44:22,300 --> 00:44:28,460
let's see if that actually will work so

00:44:25,390 --> 00:44:29,840
so it now started this it's basically a

00:44:28,460 --> 00:44:35,030
docker compose up

00:44:29,840 --> 00:44:36,740
which it did and now it says when files

00:44:35,030 --> 00:44:40,460
have been tuned you can access this

00:44:36,740 --> 00:44:42,800
instance at this URL as I said when it

00:44:40,460 --> 00:44:45,740
comes up the first time it will copy all

00:44:42,800 --> 00:44:53,800
the files to that volume you could

00:44:45,740 --> 00:44:53,800
follow the progress also local logs oops

00:44:54,100 --> 00:44:57,380
so and what you see what it's doing

00:44:56,870 --> 00:45:00,980
there

00:44:57,380 --> 00:45:04,040
it came up for the first time and now it

00:45:00,980 --> 00:45:06,170
also creates an SSH access to that

00:45:04,040 --> 00:45:10,070
container so for that it needs

00:45:06,170 --> 00:45:15,890
SSH host keys and these are generated

00:45:10,070 --> 00:45:21,620
automatically but they are not located

00:45:15,890 --> 00:45:29,470
in the container oops

00:45:21,620 --> 00:45:29,470
no not event sourced demo demo is good

00:45:31,279 --> 00:45:39,279
so you see there there's a directory at

00:45:34,519 --> 00:45:44,529
the very top dot local beach and that is

00:45:39,279 --> 00:45:51,049
not checked in to get of course oops and

00:45:44,529 --> 00:45:54,409
let me open that yeah and there are have

00:45:51,049 --> 00:45:57,439
two directories secrets and home and

00:45:54,409 --> 00:46:00,409
here for example in secrets you see the

00:45:57,439 --> 00:46:02,569
SSH host keys the container just created

00:46:00,409 --> 00:46:04,400
so I mount the Seoul local beach

00:46:02,569 --> 00:46:08,109
directory into the container and then

00:46:04,400 --> 00:46:12,049
store data which I want to survive

00:46:08,109 --> 00:46:14,449
restart of the containers and why do I

00:46:12,049 --> 00:46:19,339
have a whole directory there's actually

00:46:14,449 --> 00:46:22,309
my shell history in there so I I mounted

00:46:19,339 --> 00:46:24,499
also the whole directory of the SSH user

00:46:22,309 --> 00:46:28,339
in the container to my local directory

00:46:24,499 --> 00:46:30,769
directory so I don't use lose my shell

00:46:28,339 --> 00:46:32,329
history every time I we rebuild my

00:46:30,769 --> 00:46:37,459
containers because that is really

00:46:32,329 --> 00:46:39,380
annoying if I would ever ever lose my

00:46:37,459 --> 00:46:43,699
shell history I'm not a developer

00:46:39,380 --> 00:46:46,130
anymore because I'm mostly at least in

00:46:43,699 --> 00:46:50,509
the comment line I'm working with

00:46:46,130 --> 00:46:55,249
searching in my 40 years shell history I

00:46:50,509 --> 00:46:57,609
have everything and I don't know how how

00:46:55,249 --> 00:47:03,019
that is about you

00:46:57,609 --> 00:47:11,209
so yeah this this thing worked here it

00:47:03,019 --> 00:47:14,499
says warmed up caches and so on and it

00:47:11,209 --> 00:47:20,349
should be Neos demo local beach not

00:47:14,499 --> 00:47:20,349
theoretically oh no what did it say

00:47:48,859 --> 00:47:51,579
hmm

00:48:01,810 --> 00:48:07,460
should be nails demo but I think I

00:48:05,330 --> 00:48:15,790
confused it with a sub-directory ah

00:48:07,460 --> 00:48:15,790
that's stupid hmm let's see

00:48:38,690 --> 00:48:48,829
how about typing it right yeah okay so I

00:48:45,390 --> 00:48:52,890
I wrote nails with a P instead of an O

00:48:48,829 --> 00:48:55,380
that doesn't work so what's up there in

00:48:52,890 --> 00:48:58,440
the address line is nails demoed local

00:48:55,380 --> 00:49:01,140
beach net that ends up in the reverse

00:48:58,440 --> 00:49:06,300
proxy I started at the very beginning

00:49:01,140 --> 00:49:10,440
the nginx and for some reason that nginx

00:49:06,300 --> 00:49:13,440
proxy knows which random port my project

00:49:10,440 --> 00:49:20,520
is using for the webserver and uses that

00:49:13,440 --> 00:49:22,859
as an upstream and I can show you that

00:49:20,520 --> 00:49:26,910
later if you like but there's a little

00:49:22,859 --> 00:49:29,190
script which watches the docker events

00:49:26,910 --> 00:49:33,180
and every time a docker container is

00:49:29,190 --> 00:49:44,640
started it will look for an environment

00:49:33,180 --> 00:49:51,569
variable which is called virtual host do

00:49:44,640 --> 00:49:53,369
you see that here so that is kind of

00:49:51,569 --> 00:49:56,490
service discovery from my local

00:49:53,369 --> 00:49:58,619
development environment every time the

00:49:56,490 --> 00:50:00,180
docker container started some event will

00:49:58,619 --> 00:50:03,420
happen and you can listen to these

00:50:00,180 --> 00:50:07,589
events with script no problem and then

00:50:03,420 --> 00:50:10,290
you can analyze is there an environment

00:50:07,589 --> 00:50:14,270
variable called virtual host oh yes then

00:50:10,290 --> 00:50:17,310
use that and rewrite the nginx server

00:50:14,270 --> 00:50:22,770
configuration to listen to that virtual

00:50:17,310 --> 00:50:26,190
host and then use the color port used

00:50:22,770 --> 00:50:30,050
for this web server for example so that

00:50:26,190 --> 00:50:34,170
makes it very easy to use that here and

00:50:30,050 --> 00:50:36,619
now I also want to show you SSH let me

00:50:34,170 --> 00:50:36,619
go back

00:50:39,600 --> 00:50:49,710
so there you have it because I tried it

00:50:47,500 --> 00:50:49,710
yesterday

00:50:56,490 --> 00:51:00,679
ah

00:50:57,610 --> 00:51:00,679
[Music]

00:51:07,130 --> 00:51:14,000
blind 442 no 24

00:51:17,480 --> 00:51:36,950
okay right so now I'm locked into my

00:51:28,060 --> 00:51:40,849
container have all the files in there

00:51:36,950 --> 00:51:43,250
and you can basically walk work like

00:51:40,849 --> 00:51:45,890
normal so you just open phpstorm

00:51:43,250 --> 00:51:50,290
or your favorite IDE just saved locally

00:51:45,890 --> 00:51:53,089
and it will appear in the container with

00:51:50,290 --> 00:52:01,839
usually instantly but maybe up to a

00:51:53,089 --> 00:52:07,730
second of delay for example I could

00:52:01,839 --> 00:52:11,359
import the nearest demo side now so it

00:52:07,730 --> 00:52:19,780
did that and when I reload here

00:52:11,359 --> 00:52:19,780
I now have the newest demo side okay so

00:52:24,220 --> 00:52:27,290
[Music]

00:52:27,819 --> 00:52:32,119
yeah

00:52:29,329 --> 00:52:34,670
as I said you don't have to really write

00:52:32,119 --> 00:52:38,119
it down or understand what's up there

00:52:34,670 --> 00:52:42,980
now but this is a script running inside

00:52:38,119 --> 00:52:47,000
the container which watches file system

00:52:42,980 --> 00:52:51,790
events it's not so difficult really so

00:52:47,000 --> 00:52:55,599
it's just a bash file in this case and

00:52:51,790 --> 00:52:58,910
so you just run that so you create your

00:52:55,599 --> 00:53:01,099
docker image a bit differently for I

00:52:58,910 --> 00:53:03,440
have a flag or something so that it

00:53:01,099 --> 00:53:05,750
works a bit differently in development

00:53:03,440 --> 00:53:08,480
and in production and then activate this

00:53:05,750 --> 00:53:11,829
watcher here and then for example if

00:53:08,480 --> 00:53:14,930
there's a deletes events then you just

00:53:11,829 --> 00:53:16,849
delete the file so you just say like if

00:53:14,930 --> 00:53:24,609
that event is coming in then I do copy

00:53:16,849 --> 00:53:28,190
or delete or whatever just like that and

00:53:24,609 --> 00:53:29,610
the actual script used for watching the

00:53:28,190 --> 00:53:32,600
file events

00:53:29,610 --> 00:53:35,730
we found something there and guitar

00:53:32,600 --> 00:53:38,490
modified that a bit you can also find

00:53:35,730 --> 00:53:40,740
that and modify it a bit it just does

00:53:38,490 --> 00:53:42,390
the translation so every time an event

00:53:40,740 --> 00:53:45,200
happens your script is caught with a

00:53:42,390 --> 00:53:49,260
certain argument and that's about it

00:53:45,200 --> 00:53:53,100
so it's a bit stupid that that you have

00:53:49,260 --> 00:53:55,650
to do that of we chose to do that so I

00:53:53,100 --> 00:53:58,410
think theoretically docker should do

00:53:55,650 --> 00:54:04,140
that right away that way or in a fast

00:53:58,410 --> 00:54:06,930
way or in a clever way but after four

00:54:04,140 --> 00:54:10,070
years of trying developing within docker

00:54:06,930 --> 00:54:14,730
now the first time it really feels like

00:54:10,070 --> 00:54:18,360
yes it's nicer and faster than I did

00:54:14,730 --> 00:54:20,670
before or natively so before that before

00:54:18,360 --> 00:54:23,100
I used this kind of solution it was only

00:54:20,670 --> 00:54:27,840
yeah I really want to try it with docker

00:54:23,100 --> 00:54:30,990
and also the benefits of having the same

00:54:27,840 --> 00:54:33,800
versions and so on prevailed but I was

00:54:30,990 --> 00:54:36,390
not really happy I still had my secret

00:54:33,800 --> 00:54:36,840
native set up there I don't have that

00:54:36,390 --> 00:54:42,990
anymore

00:54:36,840 --> 00:54:46,290
no docker in production I only want to

00:54:42,990 --> 00:54:49,760
mention that quickly there are different

00:54:46,290 --> 00:54:53,100
ways of running stuff in production and

00:54:49,760 --> 00:54:55,770
so you could theoretically use docker

00:54:53,100 --> 00:54:58,440
compose to run your images and so on it

00:54:55,770 --> 00:55:01,050
really depends on your website if how

00:54:58,440 --> 00:55:04,170
create business-critical that is how

00:55:01,050 --> 00:55:06,600
much you want to learn and so on if you

00:55:04,170 --> 00:55:09,630
just want to replace a traditional set

00:55:06,600 --> 00:55:11,640
up on a server with the darker set up on

00:55:09,630 --> 00:55:14,280
a specific server and you maintain that

00:55:11,640 --> 00:55:16,680
server manually or with instable or

00:55:14,280 --> 00:55:20,460
whatever then you might even use

00:55:16,680 --> 00:55:22,650
something like docker compose and if it

00:55:20,460 --> 00:55:25,140
should be a bit more clever like if the

00:55:22,650 --> 00:55:28,620
server dies it should come up elsewhere

00:55:25,140 --> 00:55:29,820
and so on use kubernetes and of course

00:55:28,620 --> 00:55:31,560
there are all kinds of different

00:55:29,820 --> 00:55:38,880
solutions but they're just just to make

00:55:31,560 --> 00:55:41,670
the choice easy for you alright so what

00:55:38,880 --> 00:55:42,420
do you see after this do you think that

00:55:41,670 --> 00:55:44,099
could solve

00:55:42,420 --> 00:55:46,260
problem for you or do you have other

00:55:44,099 --> 00:55:48,240
problems left or will someone go back

00:55:46,260 --> 00:55:54,030
and not use docker anymore after seeing

00:55:48,240 --> 00:56:17,040
these problems what do you think that

00:55:54,030 --> 00:56:18,440
was a very big open question yes yeah I

00:56:17,040 --> 00:56:23,849
see what you mean

00:56:18,440 --> 00:56:26,579
so the thing was there's basically a

00:56:23,849 --> 00:56:29,940
different way not using SSH but just

00:56:26,579 --> 00:56:36,180
going directly into the container so let

00:56:29,940 --> 00:56:40,200
me just find the container I had nice

00:56:36,180 --> 00:56:47,549
names for it right for example yeah so I

00:56:40,200 --> 00:56:56,160
could do something like Dhaka exag oops

00:56:47,549 --> 00:56:59,599
oops nails demo PHP and then one bash

00:56:56,160 --> 00:57:05,910
there oops that's with the - I guess

00:56:59,599 --> 00:57:11,990
yeah so basically the same right well

00:57:05,910 --> 00:57:11,990
basically the same now I am root and

00:57:12,470 --> 00:57:19,559
when I have that deployed on my

00:57:15,240 --> 00:57:22,319
production server I am NOT Lee so I have

00:57:19,559 --> 00:57:25,470
a specific user which has certain

00:57:22,319 --> 00:57:28,829
environments variables preset and so on

00:57:25,470 --> 00:57:30,599
actually I want to have and actually in

00:57:28,829 --> 00:57:36,059
my production server I will log in

00:57:30,599 --> 00:57:37,589
through SSH because regular users will

00:57:36,059 --> 00:57:40,589
do that and not kubernetes

00:57:37,589 --> 00:57:44,220
administrators who have access to raw

00:57:40,589 --> 00:57:48,960
containers so I think it's completely

00:57:44,220 --> 00:57:50,849
fine to use darker exag when you only

00:57:48,960 --> 00:57:54,089
use it for development in my specific

00:57:50,849 --> 00:57:55,830
case it's so that we also need to login

00:57:54,089 --> 00:57:57,960
into the production

00:57:55,830 --> 00:58:00,540
in order to run the site import or

00:57:57,960 --> 00:58:03,060
something like that and therefore I

00:58:00,540 --> 00:58:06,480
chose to use SSH here as well

00:58:03,060 --> 00:58:08,730
so it matches production again but

00:58:06,480 --> 00:58:10,740
you're completely right just you save

00:58:08,730 --> 00:58:13,320
yourself a lot of hassle if you're not

00:58:10,740 --> 00:58:43,410
using SSH and just I find with docker

00:58:13,320 --> 00:58:45,030
exact it's true yes yes and so the thing

00:58:43,410 --> 00:58:49,410
was to run everything as root in

00:58:45,030 --> 00:58:51,570
containers I agree mostly because your

00:58:49,410 --> 00:58:55,590
containers should basically only run one

00:58:51,570 --> 00:58:59,190
process or some helper processes and so

00:58:55,590 --> 00:59:01,050
there's nothing else in there usually so

00:58:59,190 --> 00:59:03,360
that usually runs this route so if you

00:59:01,050 --> 00:59:07,680
have an engine X there that ones is root

00:59:03,360 --> 00:59:11,550
and no problem with that again in our

00:59:07,680 --> 00:59:14,400
case when the user site administrator

00:59:11,550 --> 00:59:17,100
for example SSH is into that container I

00:59:14,400 --> 00:59:20,880
don't want them to be rude obviously so

00:59:17,100 --> 00:59:24,180
I can just have an additional layer so

00:59:20,880 --> 00:59:27,360
security is always a matter of layers

00:59:24,180 --> 00:59:29,760
it's not like allowing someone to be

00:59:27,360 --> 00:59:31,440
root will destroy everything but not

00:59:29,760 --> 00:59:34,730
allowing them to be rude adds an

00:59:31,440 --> 00:59:37,380
additional layer and sometimes even

00:59:34,730 --> 00:59:39,960
filtering an IP address that's not

00:59:37,380 --> 00:59:42,300
really like the ultimate security but it

00:59:39,960 --> 00:59:47,400
adds in the different adds another layer

00:59:42,300 --> 00:59:50,550
which makes it more difficult right so

00:59:47,400 --> 00:59:52,740
yeah but using Linux for development the

00:59:50,550 --> 00:59:54,450
problem for me personally it was I

00:59:52,740 --> 00:59:56,220
needed to focus on my work and there are

00:59:54,450 --> 00:59:58,620
so many exciting things in the next that

00:59:56,220 --> 01:00:01,130
I stopped working and only dealt with my

00:59:58,620 --> 01:00:01,130
Linux yeah

01:00:03,500 --> 01:00:08,789
that's a pretty good idea

01:00:05,549 --> 01:00:20,280
now you motivated me yes I will okay

01:00:08,789 --> 01:00:21,270
I'll do that okay yeah that's that's so

01:00:20,280 --> 01:00:24,900
kind of you

01:00:21,270 --> 01:00:29,369
so then be sure to to note on my my

01:00:24,900 --> 01:00:31,920
Twitter thing here I will tweet when I

01:00:29,369 --> 01:00:33,150
wrote that blog post and I'll tweet

01:00:31,920 --> 01:00:35,579
immediately where you get these slides

01:00:33,150 --> 01:00:37,820
and I thank you very much for attending

01:00:35,579 --> 01:00:44,729
my session and have a good day

01:00:37,820 --> 01:00:44,729

YouTube URL: https://www.youtube.com/watch?v=dxvSCAgnsKc


