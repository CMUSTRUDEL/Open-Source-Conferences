Title: BKK19-401 - Common Accelerator Framework Warpdrive update
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
WarpDrive is a general accelerator framework for the user application to access the hardware without going through the kernel in data path.
Huawei and Linaro are co-working together to develop warpdriver framework, which will be used in Hisilicon server chip Kunpeng 920.
Will update latest status.

Zhangfei Gao / Hisilicon landing team engineer Linaro
Linaro Hisiilicon landing team eng
Captions: 
	00:00:05,540 --> 00:00:11,330
from denaro high silicon 19 team today

00:00:08,929 --> 00:00:17,420
we discussing about a common accelerator

00:00:11,330 --> 00:00:19,070
framework of driver first the agenda

00:00:17,420 --> 00:00:25,610
first let's talking about some

00:00:19,070 --> 00:00:28,640
background then provides our target how

00:00:25,610 --> 00:00:31,699
what we want to do and then let's do

00:00:28,640 --> 00:00:34,820
some investigation finally we provide

00:00:31,699 --> 00:00:39,140
our solution web drive and give some

00:00:34,820 --> 00:00:41,989
performance data the background country

00:00:39,140 --> 00:00:44,120
more and more hardware accelerator

00:00:41,989 --> 00:00:46,039
appeared in the market like the

00:00:44,120 --> 00:00:49,670
compressor compressor and the in

00:00:46,039 --> 00:00:51,499
critical reader appears on the market so

00:00:49,670 --> 00:00:54,889
the accelerator of you more and more

00:00:51,499 --> 00:00:58,219
popular also AI is very hot we all know

00:00:54,889 --> 00:00:59,329
a I need some matrix computation so even

00:00:58,219 --> 00:01:02,719
in a long time

00:00:59,329 --> 00:01:04,400
if we can use a hardware accelerator it

00:01:02,719 --> 00:01:08,330
will give a better performance

00:01:04,400 --> 00:01:11,470
so we want to butter your order to get a

00:01:08,330 --> 00:01:14,150
better performance most of them use one

00:01:11,470 --> 00:01:17,360
to be used in the user space just like a

00:01:14,150 --> 00:01:19,070
TV DK and we need a software

00:01:17,360 --> 00:01:22,430
infrastructure to support this

00:01:19,070 --> 00:01:27,020
application this is especially important

00:01:22,430 --> 00:01:29,540
here because um can be customized here

00:01:27,020 --> 00:01:33,230
is a general platform we can see under

00:01:29,540 --> 00:01:35,780
the hood complex there is some our mm

00:01:33,230 --> 00:01:40,010
user is maybe a three types of four

00:01:35,780 --> 00:01:42,890
devices for some legacy spice devices it

00:01:40,010 --> 00:01:45,770
cannot just support us via feature about

00:01:42,890 --> 00:01:49,730
SVA the shared of virtual address we

00:01:45,770 --> 00:01:53,300
what if Cassie in the in a later also

00:01:49,730 --> 00:01:56,330
some discrete devices is attached by the

00:01:53,300 --> 00:02:03,080
PGI year and some integrated devices

00:01:56,330 --> 00:02:06,770
like graphics and accelerator this is a

00:02:03,080 --> 00:02:09,800
realization in component 20 in our

00:02:06,770 --> 00:02:13,639
realization we just did integrated

00:02:09,800 --> 00:02:16,689
devices it appears a PCIe but in fact it

00:02:13,639 --> 00:02:19,190
is our amber bus we can see in a later

00:02:16,689 --> 00:02:21,830
it is just use

00:02:19,190 --> 00:02:24,260
deep and cheap as example about this

00:02:21,830 --> 00:02:28,670
accelerator there is a queue management

00:02:24,260 --> 00:02:30,910
it can provide 1024 cures each queue can

00:02:28,670 --> 00:02:35,090
support a one process it means it can

00:02:30,910 --> 00:02:35,900
vary 1,024 processes can write in the

00:02:35,090 --> 00:02:39,800
same time

00:02:35,900 --> 00:02:44,240
so only one accelerator can support so

00:02:39,800 --> 00:02:47,570
1,024 process running together so what

00:02:44,240 --> 00:02:50,630
what we want to do well first it is

00:02:47,570 --> 00:02:53,060
using we want to use a user application

00:02:50,630 --> 00:02:54,890
to directly call this accelerator to get

00:02:53,060 --> 00:02:55,550
up of perform pay the performance like

00:02:54,890 --> 00:02:58,280
db/decade

00:02:55,550 --> 00:03:01,790
and then we want to support a multi

00:02:58,280 --> 00:03:05,030
process since it is support 1,024 queues

00:03:01,790 --> 00:03:05,860
they can the 1,024 process can run

00:03:05,030 --> 00:03:08,330
together

00:03:05,860 --> 00:03:12,140
now also virtualization is very

00:03:08,330 --> 00:03:17,120
important country we use as IO V in

00:03:12,140 --> 00:03:21,140
component e we support a 1 PF + 63 VF

00:03:17,120 --> 00:03:26,209
they can adjust sheer sheer these 1024

00:03:21,140 --> 00:03:29,570
cures we support not only deep and a

00:03:26,209 --> 00:03:34,040
gzip we also support paper s emissary

00:03:29,570 --> 00:03:37,820
for PE SEC this accelerator

00:03:34,040 --> 00:03:42,380
so it's include a lot we see what we

00:03:37,820 --> 00:03:45,650
want to do then let's investigate how to

00:03:42,380 --> 00:03:48,590
do this first is in some cases either

00:03:45,650 --> 00:03:50,239
the our ulema musn't already so first

00:03:48,590 --> 00:03:53,989
case is a no alarm you

00:03:50,239 --> 00:03:57,769
you know IMM you it is very simple the

00:03:53,989 --> 00:04:00,620
device have to a lock physically

00:03:57,769 --> 00:04:04,040
continuous memory by the DMA a local

00:04:00,620 --> 00:04:07,190
coherent yeah we a map to the user space

00:04:04,040 --> 00:04:10,580
for since we focus on user space

00:04:07,190 --> 00:04:15,500
application by the DMA and map coherence

00:04:10,580 --> 00:04:16,489
but the limitation is very - limitation

00:04:15,500 --> 00:04:20,600
first we need

00:04:16,489 --> 00:04:23,480
physically continuous memory second we

00:04:20,600 --> 00:04:29,660
may reserve some memory using CMA

00:04:23,480 --> 00:04:31,610
Lockhart second we use our MMU our mom

00:04:29,660 --> 00:04:33,439
is very good it can provide some

00:04:31,610 --> 00:04:38,659
protection since

00:04:33,439 --> 00:04:40,909
to some isolate isolation using our

00:04:38,659 --> 00:04:43,069
memory we do not need neither physically

00:04:40,909 --> 00:04:46,969
continuous memories since our memory can

00:04:43,069 --> 00:04:50,239
translate the lva to the PA so no need a

00:04:46,969 --> 00:04:53,059
physical a continuous memory but there

00:04:50,239 --> 00:04:55,009
is one of still one imitation country in

00:04:53,059 --> 00:04:58,069
so the area the virtualization is very

00:04:55,009 --> 00:05:01,099
popular with just the common common

00:04:58,069 --> 00:05:04,489
feature we use a VA FIO feature two

00:05:01,099 --> 00:05:07,249
supporters of virtualization you know in

00:05:04,489 --> 00:05:12,289
a virtual machine the they also want to

00:05:07,249 --> 00:05:15,289
access the device there has lva if

00:05:12,289 --> 00:05:16,729
there's a this lv a is in user space so

00:05:15,289 --> 00:05:18,860
it is a given virtual machine for the it

00:05:16,729 --> 00:05:21,589
is in user space but countries alveolar

00:05:18,860 --> 00:05:24,229
Ãºnico no space they may have conflict in

00:05:21,589 --> 00:05:26,949
female the same ova but in a different

00:05:24,229 --> 00:05:29,959
area now how to solve this problem

00:05:26,949 --> 00:05:32,869
currently we just using the ow

00:05:29,959 --> 00:05:35,959
mm you to make on manager it just look a

00:05:32,869 --> 00:05:40,179
new to make a new page table to be

00:05:35,959 --> 00:05:40,179
specifically used by the virtual machine

00:05:40,209 --> 00:05:47,179
but if we use this method the DMA API

00:05:44,329 --> 00:05:49,939
cannot be used since the DMA API is used

00:05:47,179 --> 00:05:52,099
by the kernel so when we sweet so we

00:05:49,939 --> 00:05:57,159
want to switch back on the switch back

00:05:52,099 --> 00:05:59,539
we just use you that you watch out mean

00:05:57,159 --> 00:06:03,800
this is outta me

00:05:59,539 --> 00:06:06,529
I remember you feature then next is a sv

00:06:03,800 --> 00:06:10,069
a feature every feature is is a new

00:06:06,529 --> 00:06:12,860
feature SVA means the sheared of virtual

00:06:10,069 --> 00:06:15,829
address somebody some some iommu a

00:06:12,860 --> 00:06:18,050
picture just call this a sugar SVM

00:06:15,829 --> 00:06:21,050
shared a virtual memory let's say

00:06:18,050 --> 00:06:23,899
meaning the svl feature is very cool

00:06:21,050 --> 00:06:28,189
it's just a copy the page table from the

00:06:23,899 --> 00:06:31,279
seat from the Mme you so our M mu and

00:06:28,189 --> 00:06:33,619
I'm Emily I share the same page table so

00:06:31,279 --> 00:06:35,509
they can't recognize each other also

00:06:33,619 --> 00:06:37,699
what's more the more important is

00:06:35,509 --> 00:06:40,009
supporter the device fetch poor

00:06:37,699 --> 00:06:42,259
page fault so user can't give actually

00:06:40,009 --> 00:06:45,050
malach a buffer and then do to reduce

00:06:42,259 --> 00:06:47,330
this buffer to the device the device if

00:06:45,050 --> 00:06:51,740
the device found the other page for it

00:06:47,330 --> 00:06:55,310
and yeah the trigger trick interrupts to

00:06:51,740 --> 00:06:58,699
access to Malacca memory so this is very

00:06:55,310 --> 00:07:03,470
cool since the whole system enjoy the

00:06:58,699 --> 00:07:05,449
unified our page table also we can

00:07:03,470 --> 00:07:08,030
support now we can support multi process

00:07:05,449 --> 00:07:10,490
so it just meet our requirement seeing

00:07:08,030 --> 00:07:13,069
each process each process can be

00:07:10,490 --> 00:07:18,440
distinguished by the PSID just a process

00:07:13,069 --> 00:07:21,860
ID and now Cano Cano DMA API can be can

00:07:18,440 --> 00:07:24,860
be used in a meantime these with a user

00:07:21,860 --> 00:07:28,120
space API since today which are for the

00:07:24,860 --> 00:07:32,080
corner which has to use integral zero

00:07:28,120 --> 00:07:36,319
hey example here you'll ensure the

00:07:32,080 --> 00:07:37,819
explanation for the the city tables you

00:07:36,319 --> 00:07:40,580
can see the city table zero is

00:07:37,819 --> 00:07:44,690
specifically used by the kernel and as

00:07:40,580 --> 00:07:46,909
user space use spaces use use other page

00:07:44,690 --> 00:07:49,430
table that in text views a different

00:07:46,909 --> 00:07:54,889
SSID I say that he means the sub stream

00:07:49,430 --> 00:07:57,680
ID just psig in a PCIe space the we can

00:07:54,889 --> 00:08:00,620
see the SSV SLV in a signal well as the

00:07:57,680 --> 00:08:03,199
V is zero it's this path table is used

00:08:00,620 --> 00:08:05,930
by Colonel well as a V equals one it is

00:08:03,199 --> 00:08:08,150
used by the user space usually the SLV

00:08:05,930 --> 00:08:11,150
is controlled by the silicon or hardware

00:08:08,150 --> 00:08:14,000
so they can't run it together for

00:08:11,150 --> 00:08:18,050
example if you're further we have some

00:08:14,000 --> 00:08:20,150
DMA for the control yeah with you it is

00:08:18,050 --> 00:08:23,419
it handle in the kernel now using the

00:08:20,150 --> 00:08:26,270
cannot DMA so at that time SS V is equal

00:08:23,419 --> 00:08:29,389
zero in the meantime there is a severe

00:08:26,270 --> 00:08:32,719
as if a equals equals one we can do in

00:08:29,389 --> 00:08:37,839
the user space DMA so they can walk in

00:08:32,719 --> 00:08:43,520
together no conflict it is and here is a

00:08:37,839 --> 00:08:45,920
non path first SIDS ID is a sub using

00:08:43,520 --> 00:08:48,140
stream ID it can identify different

00:08:45,920 --> 00:08:49,970
different devices for example we have

00:08:48,140 --> 00:08:53,329
five accelerator each other several

00:08:49,970 --> 00:08:56,900
generator has different society we can

00:08:53,329 --> 00:09:00,949
using s ID to identify device using ace

00:08:56,900 --> 00:09:01,760
ID we find the entry in a stream table

00:09:00,949 --> 00:09:04,970
then

00:09:01,760 --> 00:09:07,790
different process one only the one pro

00:09:04,970 --> 00:09:10,250
accelerator using in a different process

00:09:07,790 --> 00:09:13,820
how to distinguish them there we use the

00:09:10,250 --> 00:09:16,760
SSID SSID is a sub stream idea just in

00:09:13,820 --> 00:09:21,560
the PCIe because this is a piece piers

00:09:16,760 --> 00:09:25,700
idea but the purpose is to identify the

00:09:21,560 --> 00:09:28,610
different process now using with the

00:09:25,700 --> 00:09:33,110
help of s idea we just we can translate

00:09:28,610 --> 00:09:36,500
lva to the IPA this is the native

00:09:33,110 --> 00:09:41,000
labeling arm is now working by the gene

00:09:36,500 --> 00:09:44,540
from who either with from um this table

00:09:41,000 --> 00:09:46,910
if just stage one currently is stage two

00:09:44,540 --> 00:09:50,720
unicorns do not support either so Jeff

00:09:46,910 --> 00:09:52,760
here just to give some example now

00:09:50,720 --> 00:09:57,610
currently we give out web Java

00:09:52,760 --> 00:10:00,740
it's our solution of jive webdriver is a

00:09:57,610 --> 00:10:03,590
accelerate the framework is especially

00:10:00,740 --> 00:10:08,230
focused on user space it is proposed by

00:10:03,590 --> 00:10:11,180
Kenny's from high silicon it includes

00:10:08,230 --> 00:10:14,600
incredible kernel space and Judah space

00:10:11,180 --> 00:10:18,410
in kernel space which is a u.s. ECE

00:10:14,600 --> 00:10:21,440
you see it's a framework like the mini

00:10:18,410 --> 00:10:25,580
is a user space accelerator framework

00:10:21,440 --> 00:10:28,640
and also there is some user space

00:10:25,580 --> 00:10:30,830
facility like web Java library and it

00:10:28,640 --> 00:10:33,650
based on the totally based on the our

00:10:30,830 --> 00:10:35,780
MMU feature since our mu is very very

00:10:33,650 --> 00:10:39,770
safe you can do some protection since

00:10:35,780 --> 00:10:42,980
there is some isolation based on our

00:10:39,770 --> 00:10:44,300
investigation we think our mu as VA

00:10:42,980 --> 00:10:47,840
feature is very cool

00:10:44,300 --> 00:10:50,980
so we especially do this our menu is VA

00:10:47,840 --> 00:10:54,020
feature it can maintain e as unified

00:10:50,980 --> 00:10:57,410
address space between process and the

00:10:54,020 --> 00:11:00,830
device and the hardware context of

00:10:57,410 --> 00:11:05,330
course magic cure an emoji multi process

00:11:00,830 --> 00:11:08,390
should be supported them for some for

00:11:05,330 --> 00:11:11,180
some platforms our M mu is not ready you

00:11:08,390 --> 00:11:13,100
still still working as very feature you

00:11:11,180 --> 00:11:15,260
still working now so we give some

00:11:13,100 --> 00:11:18,170
compatibility we

00:11:15,260 --> 00:11:21,410
we support no alamin you we support our

00:11:18,170 --> 00:11:23,900
immune as no SVA feature will my to our

00:11:21,410 --> 00:11:26,440
final target is approach SVA because

00:11:23,900 --> 00:11:26,440
it's very beautiful

00:11:26,510 --> 00:11:33,110
I vote auditioning is it also supported

00:11:29,960 --> 00:11:37,340
a widget country with use I saw our V

00:11:33,110 --> 00:11:41,870
feature we're using VF our PCI to

00:11:37,340 --> 00:11:46,400
support a virtual machine he's a big map

00:11:41,870 --> 00:11:49,340
of webdriver we can see in a layer there

00:11:46,400 --> 00:11:52,400
is many many application we support many

00:11:49,340 --> 00:11:55,580
application even for the one accelerator

00:11:52,400 --> 00:11:58,010
they can run in together each each

00:11:55,580 --> 00:12:00,310
application adjuster care request the

00:11:58,010 --> 00:12:02,840
cure just take a cue from this library

00:12:00,310 --> 00:12:03,560
under the library there is a USD year

00:12:02,840 --> 00:12:06,230
from work

00:12:03,560 --> 00:12:08,840
the usually for American worker register

00:12:06,230 --> 00:12:12,080
to the system by the chid the interface

00:12:08,840 --> 00:12:15,890
also it camp it's using this interface

00:12:12,080 --> 00:12:18,890
to provide some information like what it

00:12:15,890 --> 00:12:22,850
is how many kills still exist in the

00:12:18,890 --> 00:12:26,120
system and other other feature like

00:12:22,850 --> 00:12:31,880
later it is queue queue management queue

00:12:26,120 --> 00:12:35,780
management it is a helper we support in

00:12:31,880 --> 00:12:39,110
open and we support zip cheap paper sm-3

00:12:35,780 --> 00:12:44,330
for se CPU year this accelerator is all

00:12:39,110 --> 00:12:46,490
in our plan this path is specifically

00:12:44,330 --> 00:12:48,620
the web driver in the meantime it can be

00:12:46,490 --> 00:12:50,480
registered to the crypto crypto is the

00:12:48,620 --> 00:12:52,880
kernel already there is a crypto

00:12:50,480 --> 00:12:56,900
framework they can walk in together no

00:12:52,880 --> 00:13:00,710
conflicts so the existing application is

00:12:56,900 --> 00:13:02,660
tokens using crypto but our our web

00:13:00,710 --> 00:13:04,190
child framework is specifically focused

00:13:02,660 --> 00:13:10,580
on the user space to get our better

00:13:04,190 --> 00:13:13,370
performance web shop kernel country can

00:13:10,580 --> 00:13:16,960
either send our version 3 enough to

00:13:13,370 --> 00:13:21,530
November to care some care summary

00:13:16,960 --> 00:13:25,400
comments in the meantime we do some

00:13:21,530 --> 00:13:28,840
development for our internal products we

00:13:25,400 --> 00:13:31,840
support no mmm you

00:13:28,840 --> 00:13:35,920
now SVA advocate oh it can't be all

00:13:31,840 --> 00:13:39,220
supported Ching cheese also yeah she's

00:13:35,920 --> 00:13:42,850
also working on the SVA feature his main

00:13:39,220 --> 00:13:46,780
target is doing upstream

00:13:42,850 --> 00:13:49,270
they also coworker his intern and jeans

00:13:46,780 --> 00:13:52,080
pair Jean we are working closely with

00:13:49,270 --> 00:13:55,300
Jean he'll patch have been verified our

00:13:52,080 --> 00:13:58,290
framework and we also feel some give

00:13:55,300 --> 00:14:00,820
some kill him some feedback

00:13:58,290 --> 00:14:05,410
currently we support the zip gzip and

00:14:00,820 --> 00:14:08,110
hyper accelerator in our plan our

00:14:05,410 --> 00:14:10,870
colleague earth is now supporting a CPU

00:14:08,110 --> 00:14:15,610
ESM a 3 and a 4 it is may be released

00:14:10,870 --> 00:14:17,650
later several months later the user

00:14:15,610 --> 00:14:20,320
space us-based country mark you is

00:14:17,650 --> 00:14:23,650
supported and also it is spot a sinking

00:14:20,320 --> 00:14:26,020
mode see you can batch processing patch

00:14:23,650 --> 00:14:27,850
Pro you can send the server command and

00:14:26,020 --> 00:14:30,480
the trigger to run together to get a

00:14:27,850 --> 00:14:34,030
better performance but for the use phase

00:14:30,480 --> 00:14:36,130
we our two main target the first main

00:14:34,030 --> 00:14:38,740
target it so we want to support open SSL

00:14:36,130 --> 00:14:42,580
open SSL is very important because many

00:14:38,740 --> 00:14:45,460
accelerator now when using the open SSL

00:14:42,580 --> 00:14:49,060
interface so it's our first priority we

00:14:45,460 --> 00:14:53,700
want second either way we also adapt to

00:14:49,060 --> 00:14:56,530
the dilib we will provide some patched

00:14:53,700 --> 00:14:58,240
well the system finds there is a

00:14:56,530 --> 00:15:01,720
hardware accelerator we can switch to

00:14:58,240 --> 00:15:03,490
our our solution if there isn't no

00:15:01,720 --> 00:15:07,750
hardware acceleration it just switches

00:15:03,490 --> 00:15:09,400
to the default the label countries

00:15:07,750 --> 00:15:12,550
there's some challenges but the most

00:15:09,400 --> 00:15:15,130
challenge is gene patch in patches in

00:15:12,550 --> 00:15:20,130
fact it's a process a long time some

00:15:15,130 --> 00:15:20,130
discussion it's not a easy task

00:15:20,550 --> 00:15:29,020
he's doing now and English some have

00:15:26,670 --> 00:15:31,390
under also the SVA

00:15:29,020 --> 00:15:35,760
they're only sharing the stage one and

00:15:31,390 --> 00:15:39,130
it honors supported she stayed to Nam

00:15:35,760 --> 00:15:42,529
also the Fe Fe Chara I just defined this

00:15:39,130 --> 00:15:45,049
port of EF and written also consider VF

00:15:42,529 --> 00:15:50,479
but only genes disconnect so we find

00:15:45,049 --> 00:15:53,149
some news Eric from from inter and a

00:15:50,479 --> 00:15:54,979
Chuck beef from the other farmer redhead

00:15:53,149 --> 00:15:57,109
they have some pancetta to support it

00:15:54,979 --> 00:16:00,919
over tradition I'm just verifying this

00:15:57,109 --> 00:16:03,079
feature so a and a B is both a and B is

00:16:00,919 --> 00:16:04,549
positive organization if the official

00:16:03,079 --> 00:16:07,339
said patty said is supporting

00:16:04,549 --> 00:16:11,239
organization the ANP engine is

00:16:07,339 --> 00:16:16,069
disappearing now later our accelerator

00:16:11,239 --> 00:16:18,949
is not a not a real PCI device it is

00:16:16,069 --> 00:16:22,279
fake it is it appears like a PCIe but in

00:16:18,949 --> 00:16:25,489
fact it is a member bus so we knew some

00:16:22,279 --> 00:16:27,739
Cox country we have seen some senators

00:16:25,489 --> 00:16:33,589
on pasture to the colonel to some the

00:16:27,739 --> 00:16:37,129
Cox approach which what do we use is

00:16:33,589 --> 00:16:40,369
using the SMU store feature but the SM

00:16:37,129 --> 00:16:42,199
use back this allows the PCI device to

00:16:40,369 --> 00:16:45,919
use this to feature since the PCR year

00:16:42,199 --> 00:16:48,679
it can support that divide such efforts

00:16:45,919 --> 00:16:51,229
if for the pizza a year using the SMU

00:16:48,679 --> 00:16:54,169
store feature there be conflict so so

00:16:51,229 --> 00:16:58,939
that's better disallow the PCI device to

00:16:54,169 --> 00:17:01,459
use isto feature but all of the our our

00:16:58,939 --> 00:17:03,139
accelerator is the integrated device it

00:17:01,459 --> 00:17:05,089
is a fake pizza here so we knew some

00:17:03,139 --> 00:17:08,990
cocoa we have a certain some potential

00:17:05,089 --> 00:17:11,329
to the kernel and then the performance I

00:17:08,990 --> 00:17:16,069
simply do some performance we can see

00:17:11,329 --> 00:17:19,549
the first layer is CPU behavior and the

00:17:16,069 --> 00:17:24,159
right side is three types and oh I'm um

00:17:19,549 --> 00:17:29,889
you know at VA and our mus VA we can see

00:17:24,159 --> 00:17:35,259
the hardware accelerator can get 100 or

00:17:29,889 --> 00:17:35,259
200 times compared with the CPU speed

00:17:36,490 --> 00:17:42,710
and this is the performance from the

00:17:39,080 --> 00:17:46,549
high silicon product team in support

00:17:42,710 --> 00:17:48,440
calm since it is in a product team they

00:17:46,549 --> 00:17:51,019
want to be stable countries as their

00:17:48,440 --> 00:17:53,389
features do not be as extremes

00:17:51,019 --> 00:17:56,370
so in the these performance tests we

00:17:53,389 --> 00:18:01,409
using the no no

00:17:56,370 --> 00:18:07,140
your feature left is I say algorithm

00:18:01,409 --> 00:18:09,870
right is T th algorithm we can see the a

00:18:07,140 --> 00:18:13,549
player is only software the lower layer

00:18:09,870 --> 00:18:18,419
is using hardware accelerator using open

00:18:13,549 --> 00:18:22,169
interface and paper paper yeah

00:18:18,419 --> 00:18:25,860
accelerator we can see when we when we

00:18:22,169 --> 00:18:29,279
use software methods the CPU usage is

00:18:25,860 --> 00:18:32,610
always 100% and when we use a hardware

00:18:29,279 --> 00:18:35,929
accelerator the CPU in the concrete a

00:18:32,610 --> 00:18:40,770
lot only you can see only one point and

00:18:35,929 --> 00:18:56,640
the CPU usage improved a lot and the

00:18:40,770 --> 00:19:00,929
speed is comparable this is this

00:18:56,640 --> 00:19:06,659
deformed sis from our product team they

00:19:00,929 --> 00:19:10,169
can be accessed we have we have put our

00:19:06,659 --> 00:19:13,080
culture post kernel code and the new

00:19:10,169 --> 00:19:16,580
space code whose to github everybody can

00:19:13,080 --> 00:19:19,409
can't get access and we very welcome

00:19:16,580 --> 00:19:21,720
many company to join together as care to

00:19:19,409 --> 00:19:25,770
this accelerator framework to be mature

00:19:21,720 --> 00:19:29,700
and is used by a time but by many many

00:19:25,770 --> 00:19:32,450
companies if their time we to a simply

00:19:29,700 --> 00:19:32,450
seem hot demo

00:19:46,830 --> 00:19:51,870
we have up Jim the coach he even you

00:19:49,560 --> 00:19:56,570
have know how we'll have a meal we

00:19:51,870 --> 00:19:56,570
provide some more cute to assimilate

00:19:58,670 --> 00:20:07,520
then which is Rima Q if you will no more

00:20:03,330 --> 00:20:07,520
hardware we can be also attached

00:20:11,920 --> 00:20:17,600
okay

00:20:14,360 --> 00:20:17,600
[Music]

00:20:19,290 --> 00:20:24,110
hey this is the cumin cumin

00:20:33,230 --> 00:20:39,680
yeah no hardware

00:20:35,400 --> 00:20:42,810
look you may if you have countries this

00:20:39,680 --> 00:20:44,850
we're using the TV area five audio zero

00:20:42,810 --> 00:20:46,530
six but if you have no hardware

00:20:44,850 --> 00:20:48,630
you can't you think EMU everybody can't

00:20:46,530 --> 00:20:50,370
download it it coder have a run it's

00:20:48,630 --> 00:20:54,090
very simple you kill me everybody can

00:20:50,370 --> 00:20:56,130
you do it you can verify the the

00:20:54,090 --> 00:21:00,560
framework if you have some feature or

00:20:56,130 --> 00:21:00,560
user space usually Auto can be verified

00:21:18,860 --> 00:21:26,040
this is our this is a real hardware

00:21:21,990 --> 00:21:28,170
either I just connected to the to the

00:21:26,040 --> 00:21:30,740
hardware lab I'm to see let's just test

00:21:28,170 --> 00:21:30,740
overnight

00:21:36,009 --> 00:21:42,320
first is the CPU CPU can see as a Tommy

00:21:39,229 --> 00:21:48,549
is cost you the almost to two seconds I

00:21:42,320 --> 00:21:51,229
rent and time eras are we just using our

00:21:48,549 --> 00:22:18,769
this is using a hardware you can see

00:21:51,229 --> 00:22:21,739
it's just one hand this is first we mean

00:22:18,769 --> 00:22:29,320
the software software gzip it costs 2

00:22:21,739 --> 00:22:37,970
second this is a hardware accelerator

00:22:29,320 --> 00:22:42,070
100 right 100 times faster so I'm doing

00:22:37,970 --> 00:22:42,070
the also you can you can running

00:22:49,610 --> 00:22:56,060
okay so I mean sure against automatic

00:22:52,100 --> 00:22:59,900
you and it can support a sink mode so I

00:22:56,060 --> 00:23:02,000
said any any proper we we we really want

00:22:59,900 --> 00:23:05,320
to welcome other company to join

00:23:02,000 --> 00:23:13,060
together to make this framework mature

00:23:05,320 --> 00:23:13,060
and any if you have any question is

00:23:20,920 --> 00:23:27,310
being said it's a it's a general

00:23:23,930 --> 00:23:30,880
framework for hardware acceleration but

00:23:27,310 --> 00:23:36,550
it seems like you only covers

00:23:30,880 --> 00:23:41,450
application like compression and crypto

00:23:36,550 --> 00:23:46,750
I'm not sure how how to you know it will

00:23:41,450 --> 00:23:50,840
be to cover more sub system or just the

00:23:46,750 --> 00:23:53,260
application like compressing and the

00:23:50,840 --> 00:23:53,260
crypto

00:23:58,940 --> 00:24:09,979
okay okay so even even for for some

00:24:06,549 --> 00:24:13,299
outstanding subsystem daikon networking

00:24:09,979 --> 00:24:18,349
because so right now Linux kernel have a

00:24:13,299 --> 00:24:20,720
heavy network stack which introduce

00:24:18,349 --> 00:24:22,899
enter into sati BDK and or something

00:24:20,720 --> 00:24:22,899
like that

00:24:23,859 --> 00:24:29,659
LNG

00:24:25,129 --> 00:24:32,989
in you know finally OTP progr is not

00:24:29,659 --> 00:24:35,659
proceed so it's not there but actually

00:24:32,989 --> 00:24:39,379
from the beginning that the requirement

00:24:35,659 --> 00:24:42,499
is considered okay so the year sounds

00:24:39,379 --> 00:24:46,580
like is the direction to cover more and

00:24:42,499 --> 00:24:49,129
more substituent - yeah the basic idea

00:24:46,580 --> 00:24:51,349
is if you want to export the hardware to

00:24:49,129 --> 00:24:55,369
the user space you have to protect the

00:24:51,349 --> 00:24:58,309
kernel from maybe go around the hardware

00:24:55,369 --> 00:25:01,399
and attack the memory inside con so you

00:24:58,309 --> 00:25:03,739
need protection between the canosa and

00:25:01,399 --> 00:25:07,629
the user space side so as SB is

00:25:03,739 --> 00:25:11,720
necessary okay so it sounds like SV only

00:25:07,629 --> 00:25:15,700
he knows I I guess it only handles the

00:25:11,720 --> 00:25:19,399
memory memory aspect

00:25:15,700 --> 00:25:23,269
what about interrupts I think for how do

00:25:19,399 --> 00:25:26,559
I acceleration post memory and memory

00:25:23,269 --> 00:25:29,960
access a and interrupt handling will be

00:25:26,559 --> 00:25:32,830
most cases you veneer puddings dial

00:25:29,960 --> 00:25:35,210
interface right you say a lot of

00:25:32,830 --> 00:25:39,470
requester to the hardware and then you

00:25:35,210 --> 00:25:41,029
may wait him on some file we keep a

00:25:39,470 --> 00:25:44,119
pulling in the face there

00:25:41,029 --> 00:25:45,979
and then if we the hard way finish some

00:25:44,119 --> 00:25:50,029
some loop and then he give a signal in

00:25:45,979 --> 00:25:54,229
the kernel and then you can t rekha free

00:25:50,029 --> 00:25:56,779
that that surrett and continue the many

00:25:54,229 --> 00:26:00,529
many many manipulator to the theta theta

00:25:56,779 --> 00:26:03,019
package is that's probably something we

00:26:00,529 --> 00:26:07,729
can do around that there are ways to

00:26:03,019 --> 00:26:10,460
route well to proxy into apps user space

00:26:07,729 --> 00:26:12,260
so that you don't have to to pull on the

00:26:10,460 --> 00:26:15,770
on some cues that would say

00:26:12,260 --> 00:26:19,930
self Palin instead of just boring on

00:26:15,770 --> 00:26:19,930
your cue to wait for the full of data to

00:26:22,930 --> 00:26:29,740
answer already like for example socket

00:26:25,700 --> 00:26:32,350
based interfaces that handle this 2d

00:26:29,740 --> 00:26:36,080
yeah if you want to go through the whole

00:26:32,350 --> 00:26:39,490
network layer or use that link sockets I

00:26:36,080 --> 00:26:41,930
mean that there's a wide range of of

00:26:39,490 --> 00:26:46,130
interfaces that the current level that

00:26:41,930 --> 00:26:47,930
we can use for that but we like it like

00:26:46,130 --> 00:26:50,600
evident if these are cuties that are

00:26:47,930 --> 00:26:53,390
designed for that because the issue that

00:26:50,600 --> 00:26:55,400
I see there is that any such accelerator

00:26:53,390 --> 00:26:58,160
framework as only as good as it gets

00:26:55,400 --> 00:27:00,200
used by actual applications and the more

00:26:58,160 --> 00:27:02,450
generic and standard that interface is

00:27:00,200 --> 00:27:05,420
the easier it is going to beat you you

00:27:02,450 --> 00:27:06,740
know enable tools such as gzip that will

00:27:05,420 --> 00:27:08,570
actually get ripped by the Linux

00:27:06,740 --> 00:27:09,650
distributions to enable such features

00:27:08,570 --> 00:27:11,990
when they can actually be used

00:27:09,650 --> 00:27:15,950
everywhere so that that's indeed one of

00:27:11,990 --> 00:27:19,010
my worries is that we that effectively

00:27:15,950 --> 00:27:22,730
creates user space ABI whether you want

00:27:19,010 --> 00:27:24,920
it or not so by giving direct access to

00:27:22,730 --> 00:27:28,100
an accelerator indeed you get a lot of

00:27:24,920 --> 00:27:30,290
performance the drawback is everybody

00:27:28,100 --> 00:27:31,540
will have a slightly different gzip

00:27:30,290 --> 00:27:34,730
engine with a slightly different

00:27:31,540 --> 00:27:37,070
interface if you want these to be

00:27:34,730 --> 00:27:39,700
successful it needs to be universally

00:27:37,070 --> 00:27:43,660
adopted as the only possible

00:27:39,700 --> 00:27:48,010
implementation ever of an accelerator

00:27:43,660 --> 00:27:48,010
that's going to be difficult to ensure

00:27:52,210 --> 00:27:59,060
we can find now maybe we have several

00:27:55,580 --> 00:28:01,670
company have a small loop first and then

00:27:59,060 --> 00:28:06,650
certainly people add to date and then if

00:28:01,670 --> 00:28:09,370
you become a general framework I think

00:28:06,650 --> 00:28:14,180
one of the effort that needs to be

00:28:09,370 --> 00:28:18,170
engaged is standardization this can only

00:28:14,180 --> 00:28:22,550
be successful if it's standardized and

00:28:18,170 --> 00:28:24,650
everybody agrees that this is the the

00:28:22,550 --> 00:28:25,640
recognized standard because it

00:28:24,650 --> 00:28:28,820
effectively

00:28:25,640 --> 00:28:30,410
TVI user space has to know about you

00:28:28,820 --> 00:28:30,980
know the cue format and how things that

00:28:30,410 --> 00:28:34,400
get delivered

00:28:30,980 --> 00:28:36,500
so either we we use the our usual

00:28:34,400 --> 00:28:38,570
mechanism which is to use the kernel to

00:28:36,500 --> 00:28:40,670
abstract the weather hardware works but

00:28:38,570 --> 00:28:44,570
we lose performance or we go for maximum

00:28:40,670 --> 00:28:47,720
performance but we absolutely need this

00:28:44,570 --> 00:28:49,970
to be completely standardized without

00:28:47,720 --> 00:28:55,670
any quirk it needs to be absolutely

00:28:49,970 --> 00:28:57,530
perfect challenging anyway the

00:28:55,670 --> 00:29:00,799
requirement is always there like yo 80

00:28:57,530 --> 00:29:01,690
today even for several years they still

00:29:00,799 --> 00:29:05,660
run out of

00:29:01,690 --> 00:29:09,860
Bellanca no that's because there's no

00:29:05,660 --> 00:29:13,220
way to prove it's safe and these they

00:29:09,860 --> 00:29:17,350
still use and no I am your mode but it's

00:29:13,220 --> 00:29:20,830
necessary because it's very very fast

00:29:17,350 --> 00:29:24,320
people still use QT framework we Dowe

00:29:20,830 --> 00:29:27,559
MMU protection so I think the

00:29:24,320 --> 00:29:30,610
requirement is there so I think it will

00:29:27,559 --> 00:29:30,610
be pushed forward

00:29:36,539 --> 00:29:42,899
yeah FIO should dedicate the whole

00:29:38,889 --> 00:29:45,789
device' to the to the application

00:29:42,899 --> 00:29:47,860
normally as accelerator you you hope a

00:29:45,789 --> 00:29:51,039
Desiree that can support them many

00:29:47,860 --> 00:29:53,320
process at the same time that's why if I

00:29:51,039 --> 00:29:55,779
was not suitable for this purpose but

00:29:53,320 --> 00:29:58,120
why not you is appended via file

00:29:55,779 --> 00:29:59,740
framework we try from the very beginning

00:29:58,120 --> 00:30:04,779
but we have I already have a lot of

00:29:59,740 --> 00:30:10,240
burden to do so first obviously for Bob

00:30:04,779 --> 00:30:21,490
do I beat we on on top of EFI Oh finally

00:30:10,240 --> 00:30:25,690
the committee to know accept it ok I'm

00:30:21,490 --> 00:30:30,399
not sure I'm not sure right now if the

00:30:25,690 --> 00:30:33,580
Linux kernel the subsystem like crypto

00:30:30,399 --> 00:30:37,409
and compression support how to

00:30:33,580 --> 00:30:40,419
acceleration with some existing user

00:30:37,409 --> 00:30:43,570
interface or framework no you're the

00:30:40,419 --> 00:30:45,730
space there's the crypto in Jessica no

00:30:43,570 --> 00:30:49,779
Justine cannot know you actually they

00:30:45,730 --> 00:30:52,809
they do have using space in the face

00:30:49,779 --> 00:30:55,690
yeah I mean right now without this

00:30:52,809 --> 00:30:58,690
general framework applicants do needs to

00:30:55,690 --> 00:31:03,669
do some compression the compression or

00:30:58,690 --> 00:31:06,490
crypto stuff yeah but nobody use it ok

00:31:03,669 --> 00:31:09,389
it's very slow because you you need to

00:31:06,490 --> 00:31:12,279
go through a system control for every

00:31:09,389 --> 00:31:17,889
sinkhole for any requests

00:31:12,279 --> 00:31:19,480
I'm just curious a how slow it is last

00:31:17,889 --> 00:31:21,249
year you have data

00:31:19,480 --> 00:31:23,950
you make maybe you can chapter on then

00:31:21,249 --> 00:31:27,009
never come we have a tie for last year

00:31:23,950 --> 00:31:28,450
we compare the user interface that quick

00:31:27,009 --> 00:31:31,539
toe you see in the face and our

00:31:28,450 --> 00:31:36,639
interface I think more than 10 times

00:31:31,539 --> 00:31:38,019
okay yeah but for example crypto has in

00:31:36,639 --> 00:31:39,879
the past been more widely adopted

00:31:38,019 --> 00:31:42,070
because it's possible to you know to

00:31:39,879 --> 00:31:43,680
have like modules plug into an

00:31:42,070 --> 00:31:46,440
application such as openness

00:31:43,680 --> 00:31:49,020
well Brazil abhash been very much

00:31:46,440 --> 00:31:51,180
resistant to accelerate us at this time

00:31:49,020 --> 00:31:53,040
except for some folks by by Google and

00:31:51,180 --> 00:31:54,420
some other folks so it is not really

00:31:53,040 --> 00:31:55,950
about like the kernel user space

00:31:54,420 --> 00:31:57,930
interface that is the main thing that is

00:31:55,950 --> 00:32:01,950
blocking there but rather the adoption

00:31:57,930 --> 00:32:07,500
by the user space applications it's

00:32:01,950 --> 00:32:08,880
always a problem many customers do not

00:32:07,500 --> 00:32:13,980
care about it because they need

00:32:08,880 --> 00:32:16,800
performance it's it's still a lot

00:32:13,980 --> 00:32:20,340
community need needed people do not like

00:32:16,800 --> 00:32:22,650
it in general because it's not a general

00:32:20,340 --> 00:32:25,100
solution but they always need

00:32:22,650 --> 00:32:25,100

YouTube URL: https://www.youtube.com/watch?v=cHk81mqGlrQ


