Title: BKK19-315 - Securing your next 96Boards design using Xilinx Zynq MPSoC
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
Learn how to take advantage of the built-in security features of the Xilinx Zynq MPSoC to prevent your IP from being compromised. Extend your platform using industry standard techniques to provide attestation of all firmware components running on your system.

Kevin Keryk / Engineer Avnet
Over 20 years of embedded systems designs many of which are using Linux, FPGAs, and ARM processors.
Captions: 
	00:00:24,040 --> 00:00:27,270
okay great thank you

00:00:28,150 --> 00:00:32,590
you heard me okay okay great that's

00:00:30,070 --> 00:00:34,030
really loud okay well thanks for

00:00:32,590 --> 00:00:36,340
attending everybody my name is Kevin

00:00:34,030 --> 00:00:39,970
Carrick I'm with Abnett we're a partner

00:00:36,340 --> 00:00:43,660
with Xilinx and the alternative six

00:00:39,970 --> 00:00:45,129
board that you see here it's my first

00:00:43,660 --> 00:00:46,660
time presenting it Lennar I'll connect

00:00:45,129 --> 00:00:48,460
so thank you for inviting me

00:00:46,660 --> 00:00:51,040
and I had lots of interesting

00:00:48,460 --> 00:00:52,930
discussions so far about the things that

00:00:51,040 --> 00:00:54,940
we do in conjunction with Xilinx were

00:00:52,930 --> 00:00:57,070
the global exclusive distributor with

00:00:54,940 --> 00:00:59,530
Xilinx so that's how we got partnered in

00:00:57,070 --> 00:01:00,880
with ultra ninety six board we put

00:00:59,530 --> 00:01:03,760
together a lot of the reference designs

00:01:00,880 --> 00:01:08,320
that you see up on our element14 website

00:01:03,760 --> 00:01:09,580
and our alter 96 Network website I'm

00:01:08,320 --> 00:01:11,500
here to talk to you a little bit about

00:01:09,580 --> 00:01:12,790
security and some of the special

00:01:11,500 --> 00:01:14,759
security features that you'll find

00:01:12,790 --> 00:01:16,660
inside as Inc called your scale Plus and

00:01:14,759 --> 00:01:18,670
hopefully you know started the

00:01:16,660 --> 00:01:21,550
discussion with some folks around how we

00:01:18,670 --> 00:01:24,130
can improve our engagement with the

00:01:21,550 --> 00:01:25,750
open-source community so I'm sure all of

00:01:24,130 --> 00:01:27,130
you have heard the story about security

00:01:25,750 --> 00:01:29,890
it's a curious important forever

00:01:27,130 --> 00:01:33,220
everybody and I'd like to help

00:01:29,890 --> 00:01:35,380
understand how we can participate better

00:01:33,220 --> 00:01:37,479
in what is going on inside of the

00:01:35,380 --> 00:01:43,000
Lonardo community so that we can get

00:01:37,479 --> 00:01:44,349
better security on ultra 96 designs so I

00:01:43,000 --> 00:01:47,830
want to start out by just talking a

00:01:44,349 --> 00:01:49,840
little bit about the history of admin

00:01:47,830 --> 00:01:52,690
its engagement with Xilinx around our

00:01:49,840 --> 00:01:55,840
design so back in 2011

00:01:52,690 --> 00:01:57,369
silence introducing 7000 we were

00:01:55,840 --> 00:02:00,009
partnered with Xilinx on creating the

00:01:57,369 --> 00:02:01,690
zet board design they came out with a

00:02:00,009 --> 00:02:03,580
reference design that showed how to do

00:02:01,690 --> 00:02:05,289
secure boot and they showed that off at

00:02:03,580 --> 00:02:08,440
the Xilinx security working group in the

00:02:05,289 --> 00:02:11,890
fall of 2012 there was an apt note that

00:02:08,440 --> 00:02:13,840
was released called X app 1175 and that

00:02:11,890 --> 00:02:16,599
showed how to do secure boot on zinc

00:02:13,840 --> 00:02:19,270
7000 and based upon the feedback that

00:02:16,599 --> 00:02:20,890
silence got for the security on zinc

00:02:19,270 --> 00:02:23,770
7000 family they've made some

00:02:20,890 --> 00:02:26,200
significant improvements to zinc ultra

00:02:23,770 --> 00:02:29,380
scale and PSoC family so that was

00:02:26,200 --> 00:02:32,380
released in 2015 and shortly after that

00:02:29,380 --> 00:02:35,200
release silence engaged with Abnett and

00:02:32,380 --> 00:02:38,049
infinii on as a partner and we worked

00:02:35,200 --> 00:02:39,939
together on creating a new measured boot

00:02:38,049 --> 00:02:40,690
app note that took it a little bit

00:02:39,939 --> 00:02:45,280
further than what the

00:02:40,690 --> 00:02:47,980
that note did for zinc 7000 and since

00:02:45,280 --> 00:02:52,080
then they've released yet another app

00:02:47,980 --> 00:02:54,250
note called X app 1323 that shows how to

00:02:52,080 --> 00:02:56,880
the steps that you need to take in order

00:02:54,250 --> 00:03:02,410
to create tamper resistant designs and

00:02:56,880 --> 00:03:05,320
this all steps towards this IEC 62 443

00:03:02,410 --> 00:03:10,710
compliance that everybody is looking for

00:03:05,320 --> 00:03:13,480
in the industry so IEC 62 443 is a

00:03:10,710 --> 00:03:16,480
standardization so involves several

00:03:13,480 --> 00:03:19,360
different layers mostly we're focused on

00:03:16,480 --> 00:03:21,460
the system level layers here at Abnett

00:03:19,360 --> 00:03:24,280
since we're we fit more into like a

00:03:21,460 --> 00:03:25,840
value-added reseller step that least

00:03:24,280 --> 00:03:28,390
would fit more into the lower-level

00:03:25,840 --> 00:03:30,310
layer with the component in making sure

00:03:28,390 --> 00:03:32,530
that they deliver features on their chip

00:03:30,310 --> 00:03:36,100
that would enable those types of

00:03:32,530 --> 00:03:39,040
requirements to fit the standard so just

00:03:36,100 --> 00:03:41,740
kind of elaborate a little bit on the X

00:03:39,040 --> 00:03:43,420
app that we've released we did create a

00:03:41,740 --> 00:03:46,390
cybersecurity concept design in

00:03:43,420 --> 00:03:48,459
conjunction with abdun well abner in

00:03:46,390 --> 00:03:49,900
conjunction with our suppliers Infineon

00:03:48,459 --> 00:03:52,060
and xylene so they show up down here at

00:03:49,900 --> 00:03:54,160
the bottom so that links they bring to

00:03:52,060 --> 00:03:56,310
the table the zinc ultra scale and PSoC

00:03:54,160 --> 00:04:00,430
the same chip that's found on Ultra 96

00:03:56,310 --> 00:04:02,050
Infineon they have an optical TPM I'll

00:04:00,430 --> 00:04:04,090
show a few of the different ways that

00:04:02,050 --> 00:04:08,290
you can get the optic of TPM

00:04:04,090 --> 00:04:10,000
on your 96 board's hardware by Avenue

00:04:08,290 --> 00:04:12,610
we're not just a distributor we also

00:04:10,000 --> 00:04:14,050
help bring a few of these different

00:04:12,610 --> 00:04:16,120
pieces together as part of a system

00:04:14,050 --> 00:04:17,320
solution at the time we were working

00:04:16,120 --> 00:04:19,750
with a partner named O'Connor

00:04:17,320 --> 00:04:22,960
that was one of Infineon sparked neurs

00:04:19,750 --> 00:04:26,400
undoing the security and we created an

00:04:22,960 --> 00:04:29,410
industrial-grade IEC 62 443 compliance

00:04:26,400 --> 00:04:31,690
concept design that shows how you can

00:04:29,410 --> 00:04:33,520
securely boot a system you can provide

00:04:31,690 --> 00:04:35,440
measured boot on a system and then we

00:04:33,520 --> 00:04:38,970
showed how to run add your cloud

00:04:35,440 --> 00:04:41,169
services on top of that in containers so

00:04:38,970 --> 00:04:45,480
in order to do this we needed some

00:04:41,169 --> 00:04:48,820
hardware at the time the the

00:04:45,480 --> 00:04:50,440
traditionally the the module format

00:04:48,820 --> 00:04:51,970
that's worked really well with Xilinx

00:04:50,440 --> 00:04:52,889
development boards is a format called

00:04:51,970 --> 00:04:55,349
p-nut

00:04:52,889 --> 00:04:57,780
that's a format that was spearheaded by

00:04:55,349 --> 00:04:59,550
digital n't and so here you see it a P

00:04:57,780 --> 00:05:04,590
mod that we work with Infineon on

00:04:59,550 --> 00:05:07,530
creating it has the SLV 96 70 G p.m. 2.0

00:05:04,590 --> 00:05:10,020
device on it it's available today from

00:05:07,530 --> 00:05:12,780
the Abnett website I have one here I

00:05:10,020 --> 00:05:14,400
have one that hooked up to my altar 96

00:05:12,780 --> 00:05:15,930
board in my lab so I didn't want to

00:05:14,400 --> 00:05:18,180
disturb that but I have one of the early

00:05:15,930 --> 00:05:20,729
prototype versions that has the TPM to

00:05:18,180 --> 00:05:22,379
that old firmware it loaded on it but

00:05:20,729 --> 00:05:24,419
what I did is I was able to find these

00:05:22,379 --> 00:05:27,870
little headers that plug into the 96

00:05:24,419 --> 00:05:29,759
board low speed expansion port and then

00:05:27,870 --> 00:05:31,919
I was just able to solder these wires on

00:05:29,759 --> 00:05:34,199
to it and get that up and running on my

00:05:31,919 --> 00:05:36,629
ultra 96 board but it's something that

00:05:34,199 --> 00:05:40,529
we have available Abnett i did a little

00:05:36,629 --> 00:05:43,409
bit of research there was a presentation

00:05:40,529 --> 00:05:44,879
that was done by Yocum beck at the SFO

00:05:43,409 --> 00:05:48,210
17 111

00:05:44,879 --> 00:05:49,379
secure 96 session and I put the YouTube

00:05:48,210 --> 00:05:51,240
video up there if you want to take a

00:05:49,379 --> 00:05:52,650
look at his session but we're not the

00:05:51,240 --> 00:05:54,240
only ones who're focused on security

00:05:52,650 --> 00:05:56,699
there's been other people that are

00:05:54,240 --> 00:06:00,839
looking into this specifically from LNR

00:05:56,699 --> 00:06:03,900
perspective this one has a few more

00:06:00,839 --> 00:06:05,580
features than just SOP 96 70 there was a

00:06:03,900 --> 00:06:07,500
few at metal devices that were on there

00:06:05,580 --> 00:06:09,719
interestingly enough I went to go

00:06:07,500 --> 00:06:11,279
purchase this board to bring one for

00:06:09,719 --> 00:06:13,620
show-and-tell at this conference but I

00:06:11,279 --> 00:06:15,270
can't find them stocked anywhere amazon

00:06:13,620 --> 00:06:16,889
says that they're all out of stock and

00:06:15,270 --> 00:06:19,080
you can get on a waiting list to get

00:06:16,889 --> 00:06:21,419
some more and then i did a little bit

00:06:19,080 --> 00:06:23,639
more research and I found this board

00:06:21,419 --> 00:06:25,379
from our competitors at arrow so they

00:06:23,639 --> 00:06:27,719
have this showing at the Aero table it

00:06:25,379 --> 00:06:29,939
has the same parts on it

00:06:27,719 --> 00:06:31,650
it's called traits or it's a little bit

00:06:29,939 --> 00:06:33,990
more expensive than the other options

00:06:31,650 --> 00:06:35,610
that are out there but it does have

00:06:33,990 --> 00:06:37,770
those security devices so if you're

00:06:35,610 --> 00:06:39,300
interested in doing security stuff you

00:06:37,770 --> 00:06:43,169
can find the hardware in a number of

00:06:39,300 --> 00:06:45,060
different formats so today I'd like to

00:06:43,169 --> 00:06:46,860
shift gears a little bit and talk about

00:06:45,060 --> 00:06:48,930
how we can establish a hardware root of

00:06:46,860 --> 00:06:50,789
trust using Xing culture scale and PSoC

00:06:48,930 --> 00:06:52,889
features that they have inside of the

00:06:50,789 --> 00:06:54,300
processing system one of the unique

00:06:52,889 --> 00:06:55,620
things that the Xing culture scale

00:06:54,300 --> 00:06:58,439
brings to the table is it has this

00:06:55,620 --> 00:07:02,190
programmable logic piece but since it's

00:06:58,439 --> 00:07:03,719
a processor first solution you can't get

00:07:02,190 --> 00:07:04,969
the programmable logic up and running

00:07:03,719 --> 00:07:06,889
until you get the process

00:07:04,969 --> 00:07:09,349
and so that's what I like to talk a

00:07:06,889 --> 00:07:13,939
little bit about today and focus on

00:07:09,349 --> 00:07:17,749
security measured boot so here's the

00:07:13,939 --> 00:07:20,599
Zink ultra scale MP SOC block diagram

00:07:17,749 --> 00:07:24,319
it's got quad a53 processors it's got

00:07:20,599 --> 00:07:26,509
dual cortex r5 processors but it has in

00:07:24,319 --> 00:07:28,549
the middle here these two special pieces

00:07:26,509 --> 00:07:30,229
one is a platform management unit that

00:07:28,549 --> 00:07:32,360
can help you with system management and

00:07:30,229 --> 00:07:34,879
doing power management and another one

00:07:32,360 --> 00:07:37,509
is a thing called the CSU and that's the

00:07:34,879 --> 00:07:40,489
configuration security unit and it has

00:07:37,509 --> 00:07:42,559
the trust zone access inside of it it

00:07:40,489 --> 00:07:45,289
has voltage and temperature monitoring

00:07:42,559 --> 00:07:47,209
so you can do tamper monitoring on your

00:07:45,289 --> 00:07:49,699
device and you can take countermeasures

00:07:47,209 --> 00:07:51,349
to basically disable your system so that

00:07:49,699 --> 00:07:55,639
nobody can get your secret keys out of

00:07:51,349 --> 00:07:57,529
it but this the CSU is an important part

00:07:55,639 --> 00:08:03,079
of getting the system up and running and

00:07:57,529 --> 00:08:05,779
booted securely so everything covered so

00:08:03,079 --> 00:08:08,169
one of the few of the features inside of

00:08:05,779 --> 00:08:11,419
the CSU that are important it has RSA

00:08:08,169 --> 00:08:13,789
4096 asymmetric algorithm built into it

00:08:11,419 --> 00:08:17,179
and there's an API that allows you to

00:08:13,789 --> 00:08:19,309
access that from software that's running

00:08:17,179 --> 00:08:20,839
on the other processors it has a

00:08:19,309 --> 00:08:24,889
hardware accelerated sha-3

00:08:20,839 --> 00:08:27,159
384 engine and there's also you also

00:08:24,889 --> 00:08:30,709
have the ability to implement a shot to

00:08:27,159 --> 00:08:33,769
256 software implementation on there to

00:08:30,709 --> 00:08:34,789
help provide security on your other

00:08:33,769 --> 00:08:37,180
piece of the system

00:08:34,789 --> 00:08:44,629
and the confidentiality on the system is

00:08:37,180 --> 00:08:46,009
provided with a 256 AES GCM engine so

00:08:44,629 --> 00:08:48,980
I'd like to take a little bit of time

00:08:46,009 --> 00:08:50,449
now to focus on this diagram this is a

00:08:48,980 --> 00:08:53,870
diagram that you can actually find

00:08:50,449 --> 00:08:57,230
inside of the source document user guide

00:08:53,870 --> 00:08:59,959
1085 that Silex publishes but it shows

00:08:57,230 --> 00:09:01,970
you a high-level overview of how you can

00:08:59,959 --> 00:09:03,769
boot a system securely and establish a

00:09:01,970 --> 00:09:07,269
hardware route of trust on your Zen

00:09:03,769 --> 00:09:10,279
culture scale system so on this system

00:09:07,269 --> 00:09:12,050
basically on the left side we have these

00:09:10,279 --> 00:09:16,279
processing units over here so we have a

00:09:12,050 --> 00:09:18,740
PM you the CSU the APU rpu and the PLO

00:09:16,279 --> 00:09:20,720
PM you that's the power management unit

00:09:18,740 --> 00:09:24,710
it's a triple redundant micro blaze

00:09:20,720 --> 00:09:25,850
processor that's hardened inside of the

00:09:24,710 --> 00:09:30,140
die

00:09:25,850 --> 00:09:31,760
CSU's same thing but it is booted from a

00:09:30,140 --> 00:09:35,330
metal rom so you can't change the

00:09:31,760 --> 00:09:38,450
firmware for the CSU the AAP use those

00:09:35,330 --> 00:09:41,240
are the quad a53 processors the RP use

00:09:38,450 --> 00:09:43,550
are those are the cortex r5 processors

00:09:41,240 --> 00:09:44,930
and then there's programmable logic

00:09:43,550 --> 00:09:47,450
which you don't find on some of the

00:09:44,930 --> 00:09:48,680
other a SSPs that are out there and I

00:09:47,450 --> 00:09:49,910
have another course later today it's

00:09:48,680 --> 00:09:51,470
gonna talk a little bit more about how

00:09:49,910 --> 00:09:53,960
you can create custom accelerators to go

00:09:51,470 --> 00:09:56,750
into the peel but I want to highlight

00:09:53,960 --> 00:10:00,380
this this piece here right here is that

00:09:56,750 --> 00:10:02,510
that peel is where your IP is gonna go

00:10:00,380 --> 00:10:04,400
that that's where your company's

00:10:02,510 --> 00:10:06,680
intellectual property is and you don't

00:10:04,400 --> 00:10:07,940
want people going in and in reverse

00:10:06,680 --> 00:10:09,260
engineering your product and

00:10:07,940 --> 00:10:11,120
understanding what it is that you could

00:10:09,260 --> 00:10:13,610
do because then they can clone that and

00:10:11,120 --> 00:10:15,170
copy that on to other system so a key

00:10:13,610 --> 00:10:17,360
part of booting a security system is

00:10:15,170 --> 00:10:19,160
being able to authenticate and decrypt

00:10:17,360 --> 00:10:22,340
the programmable logic bit stream that

00:10:19,160 --> 00:10:24,230
goes inside of the configuration Ram so

00:10:22,340 --> 00:10:26,120
now we mentioned configuration Ram let

00:10:24,230 --> 00:10:27,530
me cover what's on the left side of this

00:10:26,120 --> 00:10:29,630
diagram so on the left side of this

00:10:27,530 --> 00:10:31,970
diagram we all all the different

00:10:29,630 --> 00:10:33,830
memories that are available to the

00:10:31,970 --> 00:10:36,980
processing system starting at the top we

00:10:33,830 --> 00:10:39,110
have a separate P mu Ram space there's a

00:10:36,980 --> 00:10:42,650
configuration security unit Ram space

00:10:39,110 --> 00:10:45,500
and there's OC m which is on chip memory

00:10:42,650 --> 00:10:47,390
it's a piece of fast Ram and then

00:10:45,500 --> 00:10:49,010
there's configuration RAM down here at

00:10:47,390 --> 00:10:51,320
the bottom and these are all in gray

00:10:49,010 --> 00:10:53,900
because these are all mostly secure

00:10:51,320 --> 00:10:56,510
pieces of RAM because they're all on the

00:10:53,900 --> 00:10:58,520
same silicon as a processing unit so in

00:10:56,510 --> 00:11:01,010
order to get access to them basically I

00:10:58,520 --> 00:11:02,720
have to strip the chip down and probe on

00:11:01,010 --> 00:11:06,590
the die and order to get access to that

00:11:02,720 --> 00:11:08,870
ramp the DDR is off chip so that one's a

00:11:06,590 --> 00:11:11,030
little bit more unsecure because you can

00:11:08,870 --> 00:11:12,590
have your easier access to probe that

00:11:11,030 --> 00:11:15,230
with a logic analyzer you can kind of

00:11:12,590 --> 00:11:16,280
see what's going on on DDR so when

00:11:15,230 --> 00:11:18,740
you're booting your system you want to

00:11:16,280 --> 00:11:20,600
keep in mind there if there are some

00:11:18,740 --> 00:11:22,250
things that you don't want exposed to

00:11:20,600 --> 00:11:23,660
the outside world make sure that you're

00:11:22,250 --> 00:11:25,730
loading it onto one of the on chip

00:11:23,660 --> 00:11:27,990
pieces in memory rather than the

00:11:25,730 --> 00:11:30,940
external DDR

00:11:27,990 --> 00:11:32,860
so if I start following this flow

00:11:30,940 --> 00:11:35,770
diagram you basically after power on

00:11:32,860 --> 00:11:37,300
reset the processing up in the upper

00:11:35,770 --> 00:11:39,130
left hand corner the power management

00:11:37,300 --> 00:11:41,770
unit boots from its ROM and that's a

00:11:39,130 --> 00:11:43,540
bare metal rom and one of the first

00:11:41,770 --> 00:11:45,460
things it does is it releases the

00:11:43,540 --> 00:11:49,090
configuration and security unit from

00:11:45,460 --> 00:11:52,120
reset and that allows that CSU processor

00:11:49,090 --> 00:11:56,170
to begin executing from its hardened

00:11:52,120 --> 00:11:59,020
metal ROM and its job is to first load

00:11:56,170 --> 00:12:02,770
the first-stage bootloader the FSB L so

00:11:59,020 --> 00:12:05,140
the FSB L that's a piece that has

00:12:02,770 --> 00:12:08,290
traditionally been sonics provided

00:12:05,140 --> 00:12:10,120
proprietary piece of code

00:12:08,290 --> 00:12:12,580
there's they've gotten a lot of feedback

00:12:10,120 --> 00:12:13,720
over the years from folks that are you

00:12:12,580 --> 00:12:15,880
know won't touch anything that's not

00:12:13,720 --> 00:12:17,890
open-source software and so they have

00:12:15,880 --> 00:12:20,980
released a version of that first staged

00:12:17,890 --> 00:12:24,430
bootloader code that is I believe it's

00:12:20,980 --> 00:12:25,330
under the GPL and so first thing you

00:12:24,430 --> 00:12:26,920
want to do is you want to load the

00:12:25,330 --> 00:12:28,720
first-stage bootloader the first-stage

00:12:26,920 --> 00:12:30,580
bootloader knows how to load the other

00:12:28,720 --> 00:12:32,260
pieces of memory and it knows how to

00:12:30,580 --> 00:12:34,270
load them securely so it can

00:12:32,260 --> 00:12:37,680
authenticate and decrypt some of the

00:12:34,270 --> 00:12:40,960
other pieces so one of the things that

00:12:37,680 --> 00:12:43,930
it's gonna do next you have the option

00:12:40,960 --> 00:12:45,790
of loading pmu the processing power

00:12:43,930 --> 00:12:48,670
management unit with a piece of PM you

00:12:45,790 --> 00:12:50,860
firmware so that's up at the top and if

00:12:48,670 --> 00:12:52,810
you lo when that's loaded it gives you

00:12:50,860 --> 00:12:54,550
access to some libraries that I'll talk

00:12:52,810 --> 00:12:57,550
about at the end but basically it gives

00:12:54,550 --> 00:13:00,280
you a Zilla fpga library that allows you

00:12:57,550 --> 00:13:01,900
to configure securely the programmable

00:13:00,280 --> 00:13:03,880
logic bits dream it gives you the Zil

00:13:01,900 --> 00:13:05,920
secure library that gives you access to

00:13:03,880 --> 00:13:09,550
the hardware accelerated crypto engines

00:13:05,920 --> 00:13:10,960
and it also provides for doing power

00:13:09,550 --> 00:13:12,820
management framework so you can power up

00:13:10,960 --> 00:13:15,370
and down different power domains for

00:13:12,820 --> 00:13:16,680
doing power savings you do warm resets

00:13:15,370 --> 00:13:19,570
and things like that

00:13:16,680 --> 00:13:22,000
but all that firmware gets authenticated

00:13:19,570 --> 00:13:23,260
by the CSU the other job of the

00:13:22,000 --> 00:13:25,480
first-stage bootloader is to begin

00:13:23,260 --> 00:13:27,970
booting the rest of the system including

00:13:25,480 --> 00:13:29,800
the application processor so in order to

00:13:27,970 --> 00:13:33,610
do that once that first stage bootloader

00:13:29,800 --> 00:13:36,040
gets loaded it can load the arm trusted

00:13:33,610 --> 00:13:38,990
firmware it can load you boot and then

00:13:36,040 --> 00:13:40,730
it can also load the bitstreams as well

00:13:38,990 --> 00:13:42,500
and the first-stage bootloader attack

00:13:40,730 --> 00:13:44,330
skates out of an on-chip memory for

00:13:42,500 --> 00:13:47,000
security reasons because it's providing

00:13:44,330 --> 00:13:51,350
authentication and decryption of those

00:13:47,000 --> 00:13:53,210
other pieces of code so arm trusted

00:13:51,350 --> 00:13:55,040
firmware that's also gonna execute out

00:13:53,210 --> 00:13:58,190
of on-chip memory as well so that's this

00:13:55,040 --> 00:14:00,500
atf block right here that one is

00:13:58,190 --> 00:14:04,730
responsible for setting up your trust

00:14:00,500 --> 00:14:08,210
own and the other pieces of arm IP

00:14:04,730 --> 00:14:10,340
that's on this chip once you get you

00:14:08,210 --> 00:14:12,710
boot up and running I'm sorry let me

00:14:10,340 --> 00:14:14,390
skip the u-boot portion and because the

00:14:12,710 --> 00:14:16,160
bitstream usually gets loaded next so

00:14:14,390 --> 00:14:17,690
the next step of the first-stage

00:14:16,160 --> 00:14:19,970
bootloader is to load the bitstream

00:14:17,690 --> 00:14:22,250
and you can do that by authenticating or

00:14:19,970 --> 00:14:24,800
DIC decrypting that bitstream inside of

00:14:22,250 --> 00:14:27,200
external memory or if you want to be

00:14:24,800 --> 00:14:29,720
really secure you can load it out of ocm

00:14:27,200 --> 00:14:31,270
it does take a little bit longer to do

00:14:29,720 --> 00:14:33,410
that if you have a large piece of

00:14:31,270 --> 00:14:37,550
programmable logic because you have to

00:14:33,410 --> 00:14:40,310
decrypt it a block at a time and instead

00:14:37,550 --> 00:14:41,810
of doing it all at once once you get the

00:14:40,310 --> 00:14:43,700
programmable logic bit stream up and

00:14:41,810 --> 00:14:46,430
running then you can then load you boot

00:14:43,700 --> 00:14:48,500
in the system and then you can continue

00:14:46,430 --> 00:14:51,650
booting up Linux like a normal embedded

00:14:48,500 --> 00:14:53,420
Linux system it can also load ARP you

00:14:51,650 --> 00:14:56,270
software inside of the real time cores

00:14:53,420 --> 00:14:57,740
so if you have like a real-time

00:14:56,270 --> 00:14:59,720
operating system or something that's

00:14:57,740 --> 00:15:06,320
part of your system you can load that

00:14:59,720 --> 00:15:09,590
into the RP use at that stage as well so

00:15:06,320 --> 00:15:11,840
here's some more resources on this these

00:15:09,590 --> 00:15:14,960
are the three key libraries that I had

00:15:11,840 --> 00:15:18,860
mentioned before so there's library

00:15:14,960 --> 00:15:20,840
documentation it's under this link right

00:15:18,860 --> 00:15:23,300
here or you can go to find out more

00:15:20,840 --> 00:15:25,910
information so the three ones that you

00:15:23,300 --> 00:15:28,010
want to keep in mind are Zilla FPGA so

00:15:25,910 --> 00:15:29,540
that allows you to do the secure loading

00:15:28,010 --> 00:15:31,280
of the programmable logic bit streams

00:15:29,540 --> 00:15:33,590
and so there's certain steps that you

00:15:31,280 --> 00:15:35,720
can take in order to perform that still

00:15:33,590 --> 00:15:36,950
secure that one provides for secure

00:15:35,720 --> 00:15:39,920
loading of software and crypto

00:15:36,950 --> 00:15:42,440
accelerators and there's a whole entire

00:15:39,920 --> 00:15:45,320
reference on that there's a Zil s key

00:15:42,440 --> 00:15:47,690
library and this allows you to from the

00:15:45,320 --> 00:15:50,120
processing units program the battery

00:15:47,690 --> 00:15:52,190
back Ram so you can load your security

00:15:50,120 --> 00:15:52,730
keys inside of there or you can also

00:15:52,190 --> 00:15:54,800
load

00:15:52,730 --> 00:15:56,540
security key is inside of efuses and

00:15:54,800 --> 00:15:58,850
that provides an API interface for

00:15:56,540 --> 00:16:02,180
programming that from the application

00:15:58,850 --> 00:16:04,459
processors another place where you can

00:16:02,180 --> 00:16:06,470
find more information is the Xing

00:16:04,459 --> 00:16:09,529
culture scale MP SOC technical reference

00:16:06,470 --> 00:16:11,570
manual and that's user guide 1085 that's

00:16:09,529 --> 00:16:13,399
where I was able to find the

00:16:11,570 --> 00:16:15,920
documentation for the doing the secure

00:16:13,399 --> 00:16:18,350
boot and then there's also a newer

00:16:15,920 --> 00:16:20,839
document it's not a document but it's a

00:16:18,350 --> 00:16:22,820
website that lists all the various

00:16:20,839 --> 00:16:24,529
documents that you might need to

00:16:22,820 --> 00:16:26,480
reference in order to securely boot your

00:16:24,529 --> 00:16:29,300
system and that's this design security

00:16:26,480 --> 00:16:34,760
hub and that's available on the Xilinx

00:16:29,300 --> 00:16:37,459
website as well so that brings me to the

00:16:34,760 --> 00:16:39,649
end of my presentation so I just want to

00:16:37,459 --> 00:16:40,850
thank the following people for their

00:16:39,649 --> 00:16:42,949
wisdom and encouragement to put together

00:16:40,850 --> 00:16:44,930
this presentation I get a lot of

00:16:42,949 --> 00:16:46,250
questions about doing security stuff and

00:16:44,930 --> 00:16:48,320
there's not a whole lot of information

00:16:46,250 --> 00:16:50,630
out there and I tried to condense this

00:16:48,320 --> 00:16:53,240
down into a quick reference for people

00:16:50,630 --> 00:16:54,769
to look at and evaluate how they can get

00:16:53,240 --> 00:16:57,529
the security that they need on their

00:16:54,769 --> 00:16:59,899
ultra ninety-six board so first of all

00:16:57,529 --> 00:17:01,310
Fred Kellerman he works in my group he's

00:16:59,899 --> 00:17:03,019
given me a lot of inspiration to go

00:17:01,310 --> 00:17:05,299
ahead and and put this course together

00:17:03,019 --> 00:17:07,400
Jason Moritz eiling's he gave me a lot

00:17:05,299 --> 00:17:09,110
of information where to go to find this

00:17:07,400 --> 00:17:12,230
information distill it down into a

00:17:09,110 --> 00:17:14,209
single presentation and Bruce Schneier

00:17:12,230 --> 00:17:16,819
I've been reading his book for quite a

00:17:14,209 --> 00:17:18,500
while in trying to understand all the

00:17:16,819 --> 00:17:20,209
different vocabulary that's used in the

00:17:18,500 --> 00:17:23,390
security world to try to decipher a lot

00:17:20,209 --> 00:17:25,189
of this stuff so I thank everybody for

00:17:23,390 --> 00:17:27,410
attending my presentation looks like we

00:17:25,189 --> 00:17:30,020
ended a little bit early so if you guys

00:17:27,410 --> 00:17:32,350
have any questions I'd be happy to

00:17:30,020 --> 00:17:32,350
answer them

00:17:42,590 --> 00:17:49,370
you mentioned several steps when were

00:17:45,140 --> 00:17:53,690
you load the firmware these first-stage

00:17:49,370 --> 00:17:55,010
bootloader and then the AP firmware but

00:17:53,690 --> 00:18:00,140
you didn't mention where where it's

00:17:55,010 --> 00:18:03,200
stored and so do you have any protection

00:18:00,140 --> 00:18:07,910
on each stage they have different

00:18:03,200 --> 00:18:11,450
location for first stage bootloader and

00:18:07,910 --> 00:18:14,960
somewhere and for application core

00:18:11,450 --> 00:18:17,240
firmware or they store together and can

00:18:14,960 --> 00:18:18,710
you explain how you how this form are

00:18:17,240 --> 00:18:20,330
stored yeah

00:18:18,710 --> 00:18:24,890
so the if I understand the question

00:18:20,330 --> 00:18:26,480
correctly you're asking I showed where

00:18:24,890 --> 00:18:28,190
they get loaded to you're asking where

00:18:26,480 --> 00:18:28,910
do they get loaded from when the system

00:18:28,190 --> 00:18:31,040
is booting up

00:18:28,910 --> 00:18:34,940
all right you explain how it loaded but

00:18:31,040 --> 00:18:37,250
the another security saying it's work

00:18:34,940 --> 00:18:42,580
stored and how we protect the actual

00:18:37,250 --> 00:18:47,120
images and verify what those images are

00:18:42,580 --> 00:18:49,130
correct and the and can can being can be

00:18:47,120 --> 00:18:49,880
executed on the system yeah no that's a

00:18:49,130 --> 00:18:53,000
really good question

00:18:49,880 --> 00:18:54,470
so for zing culture Skelly of it you

00:18:53,000 --> 00:18:57,679
have a number of different boot memory

00:18:54,470 --> 00:19:01,460
options for non-volatile memory you can

00:18:57,679 --> 00:19:04,730
boot from q spy memory so external cute

00:19:01,460 --> 00:19:06,620
spy memory you can boot from MMC is

00:19:04,730 --> 00:19:09,980
another option we have a lot of folks

00:19:06,620 --> 00:19:12,530
that are booting ultra 96 from a SD card

00:19:09,980 --> 00:19:14,480
which is not particularly secure because

00:19:12,530 --> 00:19:16,309
somebody can walk up and swap out the SD

00:19:14,480 --> 00:19:19,940
card with something that has something

00:19:16,309 --> 00:19:21,470
malicious loaded to it so those those

00:19:19,940 --> 00:19:23,030
images I mean there's very little that

00:19:21,470 --> 00:19:25,040
you can do to protect that information

00:19:23,030 --> 00:19:26,660
on those ramps because anybody can walk

00:19:25,040 --> 00:19:28,580
up and just read the information off of

00:19:26,660 --> 00:19:31,190
the memory and see what's on the memory

00:19:28,580 --> 00:19:34,190
so that's why it's important to encrypt

00:19:31,190 --> 00:19:36,169
those and sign those images before they

00:19:34,190 --> 00:19:38,179
get loaded onto those memories that way

00:19:36,169 --> 00:19:39,440
if you're reading it off you're reading

00:19:38,179 --> 00:19:41,120
off a bunch of information it doesn't

00:19:39,440 --> 00:19:43,190
really make any sense in terms of

00:19:41,120 --> 00:19:48,830
execution instructions until it gets

00:19:43,190 --> 00:19:52,140
decrypted into those memories like a

00:19:48,830 --> 00:19:55,320
platform would have trust like

00:19:52,140 --> 00:19:58,920
of trust like I don't store the key

00:19:55,320 --> 00:20:01,860
somewhere yeah so the keys if I back up

00:19:58,920 --> 00:20:04,230
here a little bit the key is actually

00:20:01,860 --> 00:20:06,570
gets stored inside of the Xing culture

00:20:04,230 --> 00:20:09,840
scale device itself so they're stored

00:20:06,570 --> 00:20:15,179
inside a subsystem underneath that only

00:20:09,840 --> 00:20:18,270
the CSU has access to and those those

00:20:15,179 --> 00:20:20,520
you can store them inside of two options

00:20:18,270 --> 00:20:23,190
on this device you can store them either

00:20:20,520 --> 00:20:26,280
inside of an e fuse inside the device by

00:20:23,190 --> 00:20:28,500
blowing hard refuses and you can program

00:20:26,280 --> 00:20:31,380
your secure keys into there there's also

00:20:28,500 --> 00:20:33,270
a battery back Ram that you can store

00:20:31,380 --> 00:20:35,610
your keys into as well and then you can

00:20:33,270 --> 00:20:37,290
also use I mean if you're really really

00:20:35,610 --> 00:20:39,210
really concerned about somebody trying

00:20:37,290 --> 00:20:40,950
to get your keys out by doing like

00:20:39,210 --> 00:20:43,919
differential power analysis or something

00:20:40,950 --> 00:20:45,150
like that you can use the voltage and

00:20:43,919 --> 00:20:48,390
the temperature monitor around the

00:20:45,150 --> 00:20:49,380
device in order to monitor whether or

00:20:48,390 --> 00:20:51,090
not somebody is tampering with the

00:20:49,380 --> 00:20:52,740
device and then go back and wipe out

00:20:51,090 --> 00:20:54,240
that memory and then you're basically

00:20:52,740 --> 00:20:56,010
breaking your system but then you

00:20:54,240 --> 00:20:57,630
protect your system from from being

00:20:56,010 --> 00:21:04,679
compromised by somebody figuring out

00:20:57,630 --> 00:21:07,620
what the keys are do you have a feeling

00:21:04,679 --> 00:21:09,600
for what the boot speed is there any

00:21:07,620 --> 00:21:11,790
significant effect on adding the cripton

00:21:09,600 --> 00:21:15,090
it definitely does affect the boot seed

00:21:11,790 --> 00:21:17,910
speed when I was doing some research I

00:21:15,090 --> 00:21:19,679
had the same question and myself so

00:21:17,910 --> 00:21:21,600
that's why I put this thing up here if

00:21:19,679 --> 00:21:23,820
you go on to the design security hub

00:21:21,600 --> 00:21:25,799
they have a whole entire document it's

00:21:23,820 --> 00:21:27,480
basically like an Excel spreadsheet that

00:21:25,799 --> 00:21:30,090
says like if you have this option

00:21:27,480 --> 00:21:32,790
enabled and you know you're using this

00:21:30,090 --> 00:21:34,559
particular boot methodology you know it

00:21:32,790 --> 00:21:36,990
will take you about this long so it

00:21:34,559 --> 00:21:38,580
definitely takes longer it's something

00:21:36,990 --> 00:21:40,130
that you can roughly calculate based

00:21:38,580 --> 00:21:43,350
upon the size of the image that you're

00:21:40,130 --> 00:21:45,120
decrypting and they do have some

00:21:43,350 --> 00:21:46,890
documentation on that that is

00:21:45,120 --> 00:21:48,840
significantly better than what what they

00:21:46,890 --> 00:21:51,440
had for the Zink 7000 family but it's

00:21:48,840 --> 00:21:51,440
all up on their website

00:21:53,270 --> 00:22:01,960
okay great any other questions yep so

00:21:58,970 --> 00:22:01,960
the real time

00:22:13,169 --> 00:22:24,880
only the PL is protected yeah so the

00:22:22,419 --> 00:22:47,649
question is for the RP use the real-time

00:22:24,880 --> 00:22:50,799
processing yeah so the question is that

00:22:47,649 --> 00:22:52,750
if your if your secret sauce is in the

00:22:50,799 --> 00:22:54,880
code that's running on the RP you for

00:22:52,750 --> 00:22:57,730
doing the real time stuff is there a way

00:22:54,880 --> 00:22:59,289
that you can protect that so there there

00:22:57,730 --> 00:23:02,049
are some things that you can take you're

00:22:59,289 --> 00:23:04,720
kind of limited in what you can do you

00:23:02,049 --> 00:23:05,140
can if there is secure like execution

00:23:04,720 --> 00:23:07,210
code

00:23:05,140 --> 00:23:08,860
I believe you can store that secure

00:23:07,210 --> 00:23:11,770
execution code inside the on-chip memory

00:23:08,860 --> 00:23:13,120
there's not an unlimited amount of

00:23:11,770 --> 00:23:15,909
on-chip memory so you kind of have to

00:23:13,120 --> 00:23:17,559
partition that and you know evaluate

00:23:15,909 --> 00:23:20,409
which code pieces you want to load in on

00:23:17,559 --> 00:23:22,270
chip memory versus DDR but I don't know

00:23:20,409 --> 00:23:24,250
of any way of encrypting what's inside

00:23:22,270 --> 00:23:26,409
of the DDR I haven't seen anything like

00:23:24,250 --> 00:23:28,809
that inside of the architecture so if

00:23:26,409 --> 00:23:31,090
that's something that is important to

00:23:28,809 --> 00:23:32,770
you then I think the recommendation

00:23:31,090 --> 00:23:33,880
would be to execute on chip memory

00:23:32,770 --> 00:23:35,919
because then it makes it a little bit

00:23:33,880 --> 00:23:39,419
more harder to figure out what's going

00:23:35,919 --> 00:23:39,419
on in terms of execution code

00:23:52,870 --> 00:24:10,279
accessing the secure so it's really

00:23:58,250 --> 00:24:13,669
close yeah yeah so what you're saying is

00:24:10,279 --> 00:24:14,960
that if somebody is somebody were able

00:24:13,669 --> 00:24:17,179
to compromise one of the other

00:24:14,960 --> 00:24:19,279
application processors and run their own

00:24:17,179 --> 00:24:22,250
broke code out on that then they could

00:24:19,279 --> 00:24:24,830
theoretically go and then copy your

00:24:22,250 --> 00:24:27,830
application code it's running on the RP

00:24:24,830 --> 00:24:29,419
you into DDR memory and then inspect

00:24:27,830 --> 00:24:32,870
what's going on inside the code that way

00:24:29,419 --> 00:24:36,049
I think that that that is an attack

00:24:32,870 --> 00:24:38,470
vector I think one of the one of maybe

00:24:36,049 --> 00:24:41,899
the countermeasure that we have

00:24:38,470 --> 00:24:45,049
evaluated is to enforce that you're

00:24:41,899 --> 00:24:47,029
running measured boot code on the other

00:24:45,049 --> 00:24:48,980
application processors so that that way

00:24:47,029 --> 00:24:50,450
you know you're running your own

00:24:48,980 --> 00:24:52,129
software and not somebody else's

00:24:50,450 --> 00:24:53,929
malicious software on those so I think

00:24:52,129 --> 00:25:00,529
that's one countermeasure that you can

00:24:53,929 --> 00:25:02,259
take against that ok great no these are

00:25:00,529 --> 00:25:06,350
all really great questions to ask

00:25:02,259 --> 00:25:07,490
anybody else ok great

00:25:06,350 --> 00:25:09,440
all right well thank you very much for

00:25:07,490 --> 00:25:12,700
attending our session and enjoy the rest

00:25:09,440 --> 00:25:12,700
of your time here at Lenoir connect

00:25:12,730 --> 00:25:15,940

YouTube URL: https://www.youtube.com/watch?v=2KBMiCme71E


