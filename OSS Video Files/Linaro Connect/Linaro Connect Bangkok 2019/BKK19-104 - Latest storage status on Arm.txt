Title: BKK19-104 - Latest storage status on Arm
Publication date: 2019-04-02
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
Introduce the latest status of storage related open source projects on aarch64 platform. 
Supports Ceph enabling SPDK on aarch64 with 4KB and 64KB kernel page size, patches are accepted on Ceph, SPDK and DPDK upstream. 
Extends ISA-L library to supports aarch64 platform and offer the unique common library for storage related projects and boost the performance in aarch64 ecosystem. It includes the optimization on compression, hash, crypto, data integrity, data protection and so on.

Jun He / Sr. SW Engineering Manager Arm
Captions: 
	00:00:05,479 --> 00:00:11,940
okay thank you for coming to this

00:00:08,069 --> 00:00:14,580
session in in this session I would like

00:00:11,940 --> 00:00:18,539
to give some latest stories leaders

00:00:14,580 --> 00:00:21,210
armed platforms and discuss about the

00:00:18,539 --> 00:00:26,600
new technologies and how I'm can feed

00:00:21,210 --> 00:00:26,600
choosy storage enterprise storage change

00:00:27,289 --> 00:00:35,520
okay so here's a topic I'll work hard

00:00:31,949 --> 00:00:37,980
for this session first is an overview of

00:00:35,520 --> 00:00:41,550
storage categories and solutions for

00:00:37,980 --> 00:00:44,430
enterprise workloads and then what arm

00:00:41,550 --> 00:00:47,000
has done and to match these different

00:00:44,430 --> 00:00:50,640
requirements for various use cases and

00:00:47,000 --> 00:00:54,480
the in the later talk we'll talk about

00:00:50,640 --> 00:00:55,910
the safe and the SPD ganda some kind of

00:00:54,480 --> 00:01:01,230
other acceleration libraries

00:00:55,910 --> 00:01:05,969
specifically so for enterprise toys

00:01:01,230 --> 00:01:09,600
overview usually a storage future a

00:01:05,969 --> 00:01:13,950
storage system can be valued by three

00:01:09,600 --> 00:01:16,229
factors latency RPS and throughput to

00:01:13,950 --> 00:01:19,200
increase the service levels to creative

00:01:16,229 --> 00:01:22,920
applications and data set by reducing

00:01:19,200 --> 00:01:27,390
overall cost of data storage storage is

00:01:22,920 --> 00:01:31,619
always tired to different tires a third

00:01:27,390 --> 00:01:33,479
storage architecture paste the data in a

00:01:31,619 --> 00:01:36,960
hierarchy according to its business

00:01:33,479 --> 00:01:39,960
value tars are determined by performance

00:01:36,960 --> 00:01:43,280
and the cost of media and date is ranked

00:01:39,960 --> 00:01:46,590
by the health and youth access it

00:01:43,280 --> 00:01:49,259
generally the most important data is

00:01:46,590 --> 00:01:53,490
served from the fastest straight media

00:01:49,259 --> 00:01:56,189
like Quran or under nvme SSDs which

00:01:53,490 --> 00:02:00,210
typically is the most expensive of

00:01:56,189 --> 00:02:05,399
system and slower and less expensive

00:02:00,210 --> 00:02:08,579
devices are for other workloads so while

00:02:05,399 --> 00:02:11,459
storage is categorized to different

00:02:08,579 --> 00:02:13,919
tires according to the diverse were

00:02:11,459 --> 00:02:15,959
close but there are still some common

00:02:13,919 --> 00:02:17,260
underline things to support these

00:02:15,959 --> 00:02:20,170
different users

00:02:17,260 --> 00:02:23,409
errors from core technologies to faceted

00:02:20,170 --> 00:02:25,450
to file systems and also there are

00:02:23,409 --> 00:02:29,980
different high level solutions to match

00:02:25,450 --> 00:02:33,909
these barriers the requirements so local

00:02:29,980 --> 00:02:36,340
technology stays that heart of a storage

00:02:33,909 --> 00:02:39,010
solution to achieve the requirements in

00:02:36,340 --> 00:02:43,319
terms of performance or capacity or

00:02:39,010 --> 00:02:46,150
other user desired specifications and to

00:02:43,319 --> 00:02:49,569
parts like heroes here

00:02:46,150 --> 00:02:53,470
the first is algorithm and the other is

00:02:49,569 --> 00:02:57,190
the way to access resources to maintain

00:02:53,470 --> 00:03:00,329
the data integrity on the media the

00:02:57,190 --> 00:03:05,170
checksum is needed and CRC and a hash

00:03:00,329 --> 00:03:08,349
like sha all our things are common use

00:03:05,170 --> 00:03:10,930
and read and if their coding provide

00:03:08,349 --> 00:03:14,349
redundancy to protect your data and may

00:03:10,930 --> 00:03:17,139
make your data more reliable and to

00:03:14,349 --> 00:03:18,310
protect to protect your data encryption

00:03:17,139 --> 00:03:22,530
to also need it

00:03:18,310 --> 00:03:25,840
and to save save the space and bandwidth

00:03:22,530 --> 00:03:28,959
compression like gzip or are things as

00:03:25,840 --> 00:03:31,780
if you are used and brown filters help

00:03:28,959 --> 00:03:35,260
to remove the duplications which across

00:03:31,780 --> 00:03:38,079
the data blocks for resource access

00:03:35,260 --> 00:03:41,319
there are some known as something

00:03:38,079 --> 00:03:44,290
receiving one more attention so only me

00:03:41,319 --> 00:03:48,760
which use PCI Express to transfer data

00:03:44,290 --> 00:03:52,599
between the master flash storage and CPU

00:03:48,760 --> 00:03:55,299
it greatly reduces latency removing

00:03:52,599 --> 00:03:58,299
communication between the computer

00:03:55,299 --> 00:04:02,169
energy fast SSD storage as bottleneck

00:03:58,299 --> 00:04:06,310
and not result in a significant increase

00:04:02,169 --> 00:04:09,129
in IOPS per channel which provides

00:04:06,310 --> 00:04:11,919
high-speed data transfer and ardingly

00:04:09,129 --> 00:04:15,459
allows applications to bypass a software

00:04:11,919 --> 00:04:19,470
stack for that for network traffic

00:04:15,459 --> 00:04:22,060
processing and there are many kind

00:04:19,470 --> 00:04:25,570
different kinds of file system each one

00:04:22,060 --> 00:04:28,440
of them has their different structure

00:04:25,570 --> 00:04:30,820
and logic and properties of speech

00:04:28,440 --> 00:04:33,250
flexibility security

00:04:30,820 --> 00:04:36,130
and more they have been designed to be

00:04:33,250 --> 00:04:39,970
used for specific applications among

00:04:36,130 --> 00:04:44,140
them xt 4 xf s the other and the better

00:04:39,970 --> 00:04:48,310
FS are what they are used and along with

00:04:44,140 --> 00:04:51,670
the emerging acceleration technologies -

00:04:48,310 --> 00:04:56,310
like the aluminum Amy and are doing May

00:04:51,670 --> 00:04:58,870
there are also new actual acceleration

00:04:56,310 --> 00:05:01,480
technologies like SPD K and db/decade

00:04:58,870 --> 00:05:04,510
this technology pipe has the kernel

00:05:01,480 --> 00:05:07,150
processing instead using the polling in

00:05:04,510 --> 00:05:11,920
user mode to achieve high performance

00:05:07,150 --> 00:05:15,100
and about all these things to bring all

00:05:11,920 --> 00:05:18,430
this in together with God solutions to

00:05:15,100 --> 00:05:22,780
target for different target markets like

00:05:18,430 --> 00:05:25,570
last row and and HDFS for data

00:05:22,780 --> 00:05:28,290
processing and menial and the Duke for

00:05:25,570 --> 00:05:35,470
the virtualization and other things like

00:05:28,290 --> 00:05:38,050
single swept for OpenStack so talk about

00:05:35,470 --> 00:05:40,660
trains what would happen for future as

00:05:38,050 --> 00:05:43,180
flash technologies or the much faster

00:05:40,660 --> 00:05:46,210
and less power-hungry their hard drives

00:05:43,180 --> 00:05:49,540
well witness a stunning transformation

00:05:46,210 --> 00:05:52,660
in data storage as flash memory takes

00:05:49,540 --> 00:05:55,990
over an increasing percentage of tailors

00:05:52,660 --> 00:05:59,050
in the workloads and with its unique

00:05:55,990 --> 00:06:02,050
feature like high-performance and loaded

00:05:59,050 --> 00:06:05,350
load low latency Allah me is getting one

00:06:02,050 --> 00:06:08,860
more popular and cloud storage providers

00:06:05,350 --> 00:06:13,900
are now loading out only me based server

00:06:08,860 --> 00:06:16,390
designs of course their data centers and

00:06:13,900 --> 00:06:19,180
computer resources are separate from

00:06:16,390 --> 00:06:23,140
storage resources to get right sizing

00:06:19,180 --> 00:06:25,800
and independent scaling laser separation

00:06:23,140 --> 00:06:29,910
has been enabled data and Allen and

00:06:25,800 --> 00:06:33,160
analytical leaders to overcome many

00:06:29,910 --> 00:06:37,720
problems from the sky ability and the

00:06:33,160 --> 00:06:41,400
pre the flexibility problems increasing

00:06:37,720 --> 00:06:43,900
truly teach build cloud architectures

00:06:41,400 --> 00:06:47,770
software-defined the store

00:06:43,900 --> 00:06:50,230
this country listed separately storage

00:06:47,770 --> 00:06:54,370
hardware from the software that manages

00:06:50,230 --> 00:06:57,220
it it grants great with capability

00:06:54,370 --> 00:07:00,750
flexibility and speed of configuration -

00:06:57,220 --> 00:07:04,480
for the system development deployment

00:07:00,750 --> 00:07:08,440
and this can be easily skilled - sounds

00:07:04,480 --> 00:07:11,860
of not this technology has enabled Z and

00:07:08,440 --> 00:07:14,530
users to at last the stability

00:07:11,860 --> 00:07:18,400
performance in a similar fashion to the

00:07:14,530 --> 00:07:21,130
capacity which is a truly big

00:07:18,400 --> 00:07:28,690
breakthrough for that especially useful

00:07:21,130 --> 00:07:31,390
for the database and back hub so with

00:07:28,690 --> 00:07:39,280
all this technology unchanged so how

00:07:31,390 --> 00:07:44,290
could wait for that um-um had provides

00:07:39,280 --> 00:07:47,200
server technology like sa SMD like neo

00:07:44,290 --> 00:07:51,100
and as ve and specifically extensions

00:07:47,200 --> 00:07:55,300
like CRC AES and and more to organize

00:07:51,100 --> 00:07:57,970
these these critical block blocks which

00:07:55,300 --> 00:08:02,140
have significantly impact to the storage

00:07:57,970 --> 00:08:05,730
performance the effort for South Asia

00:08:02,140 --> 00:08:08,410
and AES has been done and upstream -

00:08:05,730 --> 00:08:12,850
popular virus program open source

00:08:08,410 --> 00:08:14,550
projects and the example is that we have

00:08:12,850 --> 00:08:17,320
done

00:08:14,550 --> 00:08:20,800
CRC optimization in safe and later we

00:08:17,320 --> 00:08:23,320
put this implementation to the other

00:08:20,800 --> 00:08:27,940
projects like SPD and the karate beyond

00:08:23,320 --> 00:08:31,030
etc and at meantime we also see there

00:08:27,940 --> 00:08:33,370
are a lot of open source projects which

00:08:31,030 --> 00:08:36,310
have similar requirements causes core

00:08:33,370 --> 00:08:38,760
technologies so we think it would be

00:08:36,310 --> 00:08:41,740
better if we can put all these

00:08:38,760 --> 00:08:45,010
optimizations into some kind of central

00:08:41,740 --> 00:08:48,520
ripple that people can use them either

00:08:45,010 --> 00:08:50,410
directly or using as a reference so

00:08:48,520 --> 00:08:53,680
that's the reason we are now

00:08:50,410 --> 00:08:56,249
contributing all our efforts to a

00:08:53,680 --> 00:08:58,589
recorder ICL

00:08:56,249 --> 00:09:01,680
now well are contributing our complete

00:08:58,589 --> 00:09:04,939
reference implementation sets today's

00:09:01,680 --> 00:09:09,720
option today's open source projects and

00:09:04,939 --> 00:09:12,329
first aiders read has been done and Rita

00:09:09,720 --> 00:09:16,170
has been done with Nia and merged career

00:09:12,329 --> 00:09:19,589
murdered by upstream NCRC and multi

00:09:16,170 --> 00:09:24,869
powers hash in progress and after that

00:09:19,589 --> 00:09:28,259
AES will be our next target regardless

00:09:24,869 --> 00:09:32,339
or access those only me and our team a

00:09:28,259 --> 00:09:35,040
helping evaluator and am servers cutter

00:09:32,339 --> 00:09:39,389
fuel a memory SSDs from different

00:09:35,040 --> 00:09:42,569
vendors have been valid armed and full

00:09:39,389 --> 00:09:46,589
our DMA we have tested many logs connect

00:09:42,569 --> 00:09:50,220
accessorize test ways both for kilobytes

00:09:46,589 --> 00:09:57,179
kernel page size and 64 kilobytes a kind

00:09:50,220 --> 00:09:59,569
of a star settings so here is a simple

00:09:57,179 --> 00:10:04,920
micro benchmark support CRC read and

00:09:59,569 --> 00:10:08,100
share on our servers so for CRC we have

00:10:04,920 --> 00:10:10,949
three implementations and for the one

00:10:08,100 --> 00:10:14,189
lookup table for look our table and P

00:10:10,949 --> 00:10:18,620
more based implementations and for these

00:10:14,189 --> 00:10:22,850
two columns there are implementations

00:10:18,620 --> 00:10:26,819
using space figures crc32 instructions

00:10:22,850 --> 00:10:29,879
so we can see that the Primo

00:10:26,819 --> 00:10:32,519
implementation can achieve about nine

00:10:29,879 --> 00:10:35,569
times comparing to the generic four

00:10:32,519 --> 00:10:39,089
types of implementation and the specific

00:10:35,569 --> 00:10:43,620
CRC instructions cannot you even 15

00:10:39,089 --> 00:10:46,199
times faster full reads we have run two

00:10:43,620 --> 00:10:49,649
kinds of tests the tool kit is benchmark

00:10:46,199 --> 00:10:52,230
that benchmark data the warm test and

00:10:49,649 --> 00:10:55,799
code test the one test used is kilobytes

00:10:52,230 --> 00:10:59,369
data peroxide and runs for communion

00:10:55,799 --> 00:11:02,499
loops and for the code test we use 32

00:10:59,369 --> 00:11:08,069
megabytes theta blog site and

00:11:02,499 --> 00:11:10,899
for ten thousand loops and as arm has

00:11:08,069 --> 00:11:15,069
hardware instructions for the Shah and

00:11:10,899 --> 00:11:18,939
the shark 256 so we can see that we got

00:11:15,069 --> 00:11:30,609
pretty high throughput our children are

00:11:18,939 --> 00:11:33,639
comparing to the Shah 384 and sha-512 so

00:11:30,609 --> 00:11:37,179
for the first system the system we have

00:11:33,639 --> 00:11:40,449
mentioned about x4 x FS and the FS and

00:11:37,179 --> 00:11:44,009
better a person possible for all of them

00:11:40,449 --> 00:11:48,819
we have tested our servers and for the

00:11:44,009 --> 00:11:51,669
accelerations SP DK has been enabled and

00:11:48,819 --> 00:11:57,369
the test their arm things are single

00:11:51,669 --> 00:12:02,409
late 2017 with contributions from the

00:11:57,369 --> 00:12:06,279
partners like on the pathways like

00:12:02,409 --> 00:12:09,220
memory barrier virtual address space and

00:12:06,279 --> 00:12:13,329
4 kilobytes and 64 kilobytes kernel page

00:12:09,220 --> 00:12:15,939
size support as police now we can see

00:12:13,329 --> 00:12:20,229
that almost fully working on our servers

00:12:15,939 --> 00:12:25,299
and also we fix the several huge unit

00:12:20,229 --> 00:12:30,249
test failures and optimize crc32 and 32

00:12:25,299 --> 00:12:35,289
c computation in in SPD k and this we

00:12:30,249 --> 00:12:37,329
can from a pattern that significant

00:12:35,289 --> 00:12:41,339
performance improvement has been

00:12:37,329 --> 00:12:44,649
observed in the mme or fabric workloads

00:12:41,339 --> 00:12:47,049
and for DBT game

00:12:44,649 --> 00:12:49,509
we also add the sector for corporate

00:12:47,049 --> 00:12:51,970
side support to the PCI where our

00:12:49,509 --> 00:12:55,889
support drivers and also update the

00:12:51,970 --> 00:13:00,959
iommu configuration setup for ansara

00:12:55,889 --> 00:13:04,239
and for ulema here we have learned that

00:13:00,959 --> 00:13:07,839
quite a few partners have tested with

00:13:04,239 --> 00:13:11,489
our servers so that's also functional I

00:13:07,839 --> 00:13:11,489
think there are function working

00:13:11,750 --> 00:13:17,120
so let's take a closer look at the SPD

00:13:14,540 --> 00:13:20,180
came so SPD clay means storage

00:13:17,120 --> 00:13:22,399
performance development kit it's a set

00:13:20,180 --> 00:13:25,009
of tools and libraries to create a

00:13:22,399 --> 00:13:28,939
high-performance scalable user motor

00:13:25,009 --> 00:13:32,149
storage applications SPT Kalima device

00:13:28,939 --> 00:13:34,639
driver operates within user space uses

00:13:32,149 --> 00:13:35,480
three techniques to minimize software

00:13:34,639 --> 00:13:39,740
overheads

00:13:35,480 --> 00:13:43,399
it used address the issue of interrupt

00:13:39,740 --> 00:13:46,639
latency by instead pouring the storage

00:13:43,399 --> 00:13:49,310
device and it pipe has the user kernel

00:13:46,639 --> 00:13:51,920
context switch to furthermore minimize

00:13:49,310 --> 00:13:55,639
the processing latency and its use

00:13:51,920 --> 00:13:58,069
localized design to avoid the use of CPU

00:13:55,639 --> 00:14:02,060
cycles to surprising data between the

00:13:58,069 --> 00:14:05,720
threat so from the architecture diagram

00:14:02,060 --> 00:14:09,290
we can see that at the top at the bottom

00:14:05,720 --> 00:14:12,019
you state the different kinds of a

00:14:09,290 --> 00:14:14,000
storage device drivers and above these

00:14:12,019 --> 00:14:18,019
drivers as medicaid he finds a block

00:14:14,000 --> 00:14:21,620
layer give to export and often with

00:14:18,019 --> 00:14:23,899
different types of block storages and on

00:14:21,620 --> 00:14:31,100
the top there are storage protocols

00:14:23,899 --> 00:14:35,059
support by SP TP so here is a Mac

00:14:31,100 --> 00:14:39,019
benchmark oh we've made for SP thing the

00:14:35,059 --> 00:14:42,500
tester system use a 2.5 gigahertz arm

00:14:39,019 --> 00:14:46,610
server which 19 6 gigabytes of RAM and

00:14:42,500 --> 00:14:50,750
one only a mid disk and F file is used

00:14:46,610 --> 00:14:53,149
for the benchmark here we run we have

00:14:50,750 --> 00:14:55,100
drawn a straight test mode here read and

00:14:53,149 --> 00:14:58,220
read random writes in the random read

00:14:55,100 --> 00:15:00,559
right now come freely the configuration

00:14:58,220 --> 00:15:05,149
is listed at the bottom that is pictured

00:15:00,559 --> 00:15:10,459
this right and from the result we can

00:15:05,149 --> 00:15:14,720
find that SP DK care but you up to 37

00:15:10,459 --> 00:15:15,290
times our first our peers and the band

00:15:14,720 --> 00:15:19,990
wise

00:15:15,290 --> 00:15:19,990
compared to the kernel only any drivers

00:15:21,940 --> 00:15:31,100
so move to solutions sippy is a very

00:15:27,200 --> 00:15:38,089
very important one that we need to talk

00:15:31,100 --> 00:15:41,720
about there so Seth this is software

00:15:38,089 --> 00:15:44,720
distributed storage solutions which

00:15:41,720 --> 00:15:48,470
implements object storage on a single

00:15:44,720 --> 00:15:52,100
distributed computers clusters and it

00:15:48,470 --> 00:15:55,310
provides three kinds of services they

00:15:52,100 --> 00:15:59,890
are object storage block storage and

00:15:55,310 --> 00:16:03,230
file system it's highly durable and

00:15:59,890 --> 00:16:03,700
available and kigelia scale from few

00:16:03,230 --> 00:16:08,300
nodes

00:16:03,700 --> 00:16:12,680
mm Oh from 10 nodes maybe to ten sound

00:16:08,300 --> 00:16:15,470
nodes without a single point failure so

00:16:12,680 --> 00:16:18,800
let's take a look at the software

00:16:15,470 --> 00:16:22,220
architecture I would say it has two

00:16:18,800 --> 00:16:26,080
Perkins at at the bottom we are first oh

00:16:22,220 --> 00:16:30,350
and blue store on the first row is a

00:16:26,080 --> 00:16:33,470
legacy approach to stop objects in safe

00:16:30,350 --> 00:16:38,270
and blue store is a new one to turn for

00:16:33,470 --> 00:16:41,600
better performance above them that says

00:16:38,270 --> 00:16:44,930
widows widows is a core service to

00:16:41,600 --> 00:16:47,150
manage yourself clusters a high level

00:16:44,930 --> 00:16:51,050
application can access the safe storage

00:16:47,150 --> 00:16:55,250
either by using direct access through

00:16:51,050 --> 00:17:02,890
libidos or through services export by

00:16:55,250 --> 00:17:02,890
self like Rados gateway RB d and c FS

00:17:05,920 --> 00:17:12,610
so for safe it has been well supported

00:17:08,110 --> 00:17:16,750
our so for all men debt rose they

00:17:12,610 --> 00:17:19,420
provide am sexual packages for we serve

00:17:16,750 --> 00:17:22,179
to help user to easily set up a safe

00:17:19,420 --> 00:17:25,809
cluster and it's also officially

00:17:22,179 --> 00:17:28,690
supported in a container world civ has

00:17:25,809 --> 00:17:33,280
provides a arm six for talker image and

00:17:28,690 --> 00:17:35,500
on top and the user can use group to

00:17:33,280 --> 00:17:38,140
simplify and automate many set up and

00:17:35,500 --> 00:17:40,840
maintain jobs for safe by taking

00:17:38,140 --> 00:17:44,980
advantage of kubernetes at distributed

00:17:40,840 --> 00:17:49,590
platform and I'm Cisco is also supported

00:17:44,980 --> 00:17:52,990
by root we have done some bug fix

00:17:49,590 --> 00:17:56,020
features and improvements in safe like

00:17:52,990 --> 00:18:00,340
CRC optimizations based on certain

00:17:56,020 --> 00:18:02,950
extensions and 64 kilobytes kernel page

00:18:00,340 --> 00:18:08,590
size support and also fix some bugs in

00:18:02,950 --> 00:18:13,480
Mme device related modules and we have

00:18:08,590 --> 00:18:20,380
tested self with SP decay and our DMA

00:18:13,480 --> 00:18:23,559
accelerations are armed servers also for

00:18:20,380 --> 00:18:26,799
the argument the full coverage e Tesla

00:18:23,559 --> 00:18:30,100
is still in progress but it works with

00:18:26,799 --> 00:18:36,220
both for kilobytes and 60 and 64

00:18:30,100 --> 00:18:41,320
kilobytes or krampus ratings so here

00:18:36,220 --> 00:18:43,870
apparently set benchmark with impact on

00:18:41,320 --> 00:18:46,030
self using different accelerations the

00:18:43,870 --> 00:18:47,010
first is the power safer ways as

00:18:46,030 --> 00:18:53,850
physically

00:18:47,010 --> 00:18:57,250
accelerators we can see that all these

00:18:53,850 --> 00:18:59,919
benchmark scales very well while the

00:18:57,250 --> 00:19:03,600
course where the code numbers increases

00:18:59,919 --> 00:19:06,669
and the we can also observe that

00:19:03,600 --> 00:19:10,000
compared to the full kilobytes or an

00:19:06,669 --> 00:19:14,320
open site settings we can get more

00:19:10,000 --> 00:19:16,790
improvements to use of 64 terabytes page

00:19:14,320 --> 00:19:27,560
sizes and the difference may rain

00:19:16,790 --> 00:19:31,310
from 5% to more than 10% and look into a

00:19:27,560 --> 00:19:31,730
future several ideas for self are listed

00:19:31,310 --> 00:19:33,890
here

00:19:31,730 --> 00:19:36,100
although our DMA acceleration have been

00:19:33,890 --> 00:19:39,980
added and they validate with self

00:19:36,100 --> 00:19:42,710
servers but we still need some further

00:19:39,980 --> 00:19:45,560
investigation to identify bottlenecks

00:19:42,710 --> 00:19:48,140
and the possible optimizations

00:19:45,560 --> 00:19:51,170
the second is to accelerate safe with

00:19:48,140 --> 00:19:54,710
only me or fabric the target is to use

00:19:51,170 --> 00:19:57,950
our DMA for underlying network traffic

00:19:54,710 --> 00:20:00,110
and enable and tested them with volcano

00:19:57,950 --> 00:20:02,480
pipes and 64 kilobyte scanner page size

00:20:00,110 --> 00:20:07,070
and do you see preferring to identify

00:20:02,480 --> 00:20:08,540
possible organizations and for the safe

00:20:07,070 --> 00:20:12,940
community they are trying to migrate

00:20:08,540 --> 00:20:16,580
safe OST - sista based to adopt choosing

00:20:12,940 --> 00:20:20,840
incoming for a flash-based storage error

00:20:16,580 --> 00:20:24,350
so for the sista it's a high-performance

00:20:20,840 --> 00:20:27,770
event-driven framework it's a

00:20:24,350 --> 00:20:31,610
performance choose good scaling ways the

00:20:27,770 --> 00:20:33,620
cause while the close increases so in

00:20:31,610 --> 00:20:39,050
such case one can be a very good fit for

00:20:33,620 --> 00:20:41,960
that and staff has been donating in

00:20:39,050 --> 00:20:44,300
OpenStack storage backends I mean I'm

00:20:41,960 --> 00:20:48,650
still there are to beckon to kind of

00:20:44,300 --> 00:20:52,820
Baggins rock storage and object storage

00:20:48,650 --> 00:20:54,950
and for the OpenStack we have achieved

00:20:52,820 --> 00:20:58,430
the 100 pass rate to the

00:20:54,950 --> 00:21:01,640
interoperability test and as a container

00:20:58,430 --> 00:21:05,720
is and the whole world is moving to

00:21:01,640 --> 00:21:07,940
container so Colin is introducing to

00:21:05,720 --> 00:21:10,250
provide production ready containers and

00:21:07,940 --> 00:21:14,210
the development tools for operating

00:21:10,250 --> 00:21:18,980
OpenStack cloud and we have introduced

00:21:14,210 --> 00:21:22,490
the self restore OSD in color and the

00:21:18,980 --> 00:21:26,300
with a blueprint

00:21:22,490 --> 00:21:28,909
improvement server improvements and the

00:21:26,300 --> 00:21:32,979
sir jobs and all these things have been

00:21:28,909 --> 00:21:36,109
than the first verified our own servers

00:21:32,979 --> 00:21:38,539
so here are some other solutions for

00:21:36,109 --> 00:21:44,059
popular storage solutions which have

00:21:38,539 --> 00:21:46,369
been buried our arm so we can see last

00:21:44,059 --> 00:21:50,179
room for last row we have better with

00:21:46,369 --> 00:21:54,139
DFS and our disk FS parent Luke last row

00:21:50,179 --> 00:21:56,389
we have built and run unit tests HDFS

00:21:54,139 --> 00:21:59,570
well with the Big Data software stack

00:21:56,389 --> 00:22:02,599
and for other things were also failed

00:21:59,570 --> 00:22:12,139
and identified possible automation in

00:22:02,599 --> 00:22:14,960
the future so this summarize looked at

00:22:12,139 --> 00:22:17,720
the underlying technologies and the or

00:22:14,960 --> 00:22:19,669
the new x-ray actually Realtors and the

00:22:17,720 --> 00:22:22,899
emerging solutions we have talked about

00:22:19,669 --> 00:22:26,029
we can find that arm support has been

00:22:22,899 --> 00:22:29,509
widely adopted in virus prospective

00:22:26,029 --> 00:22:31,909
storage tires rooted options include not

00:22:29,509 --> 00:22:34,519
only basic function for T but also

00:22:31,909 --> 00:22:36,979
specific optimizations by using arm

00:22:34,519 --> 00:22:39,349
unique features like stars interventions

00:22:36,979 --> 00:22:43,399
or other or other specific extensions

00:22:39,349 --> 00:22:46,369
and these optimizations in core

00:22:43,399 --> 00:22:49,129
technology especially for the algorithm

00:22:46,369 --> 00:22:51,409
are extremely important for storage

00:22:49,129 --> 00:22:55,099
workloads as it can improve the whole

00:22:51,409 --> 00:22:57,859
performance quite a lot an example where

00:22:55,099 --> 00:23:00,519
I have talked about that the CRC history

00:22:57,859 --> 00:23:05,169
to organizations in SP Decatur

00:23:00,519 --> 00:23:07,999
with that organization we can achieve

00:23:05,169 --> 00:23:10,669
significant performance improvements in

00:23:07,999 --> 00:23:14,239
the enemy or fabric over fabrica

00:23:10,669 --> 00:23:16,940
workloads and the new technologies

00:23:14,239 --> 00:23:20,539
brings in Russia in both software and

00:23:16,940 --> 00:23:23,779
hardware and virus user cases or right

00:23:20,539 --> 00:23:26,869
for data center to home users so all

00:23:23,779 --> 00:23:29,710
these things bring the divergent

00:23:26,869 --> 00:23:34,489
requirements for storage for closed and

00:23:29,710 --> 00:23:37,070
in such were closed arms feet unique

00:23:34,489 --> 00:23:39,499
feature like flexibility density and

00:23:37,070 --> 00:23:41,639
power efficiency and a scalable

00:23:39,499 --> 00:23:45,529
performance mix of

00:23:41,639 --> 00:23:51,379
good fit for this quick changing world

00:23:45,529 --> 00:23:51,379
so that will do all for my part

00:23:52,009 --> 00:23:55,129
thank you

00:23:55,249 --> 00:24:06,450
the questions okay thank you all for

00:24:04,859 --> 00:24:10,459
coming to this session

00:24:06,450 --> 00:24:10,459

YouTube URL: https://www.youtube.com/watch?v=RZl8rp9lyx4


