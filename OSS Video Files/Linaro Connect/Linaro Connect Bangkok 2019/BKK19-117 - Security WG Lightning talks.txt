Title: BKK19-117 - Security WG Lightning talks
Publication date: 2019-04-03
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
This is a general talk covering various topics and features that Security Working Group has been working with since the previous Connect. I.e., expect to hear more about the current status and what the future plan is for various topics.

Jens Wiklander / Senior Software Engineer Linaro
Senior Software Engineer in Linaro Security Working Group

Jerome Forissier / Open Source Software Architect Huawei
.

Joakim Bech / Principal Engineer Linaro
Joakim has been a Linux user for about 15 years where he spent most of the time in his professional career working with security for embedded devices. The last five years he has been heading Security Working Group in Linaro who are working with various upstream projects related to Security where OP-TEE is one of the key projects for that group.
Captions: 
	00:00:05,490 --> 00:00:12,269
all right hello everyone welcome to this

00:00:09,930 --> 00:00:13,830
short presentation about what we have

00:00:12,269 --> 00:00:17,039
been doing in security working groups is

00:00:13,830 --> 00:00:18,449
last time we will cover a couple of

00:00:17,039 --> 00:00:19,949
different topics here and it will be

00:00:18,449 --> 00:00:22,740
done by a couple of different people

00:00:19,949 --> 00:00:25,170
some of them are not here so we will see

00:00:22,740 --> 00:00:31,110
yeah there's one more just one missing

00:00:25,170 --> 00:00:32,699
for a moment so the first thing this

00:00:31,110 --> 00:00:34,590
might not seem super interesting in

00:00:32,699 --> 00:00:37,289
terms of technical things and so on but

00:00:34,590 --> 00:00:39,630
for a usability and being able to find

00:00:37,289 --> 00:00:42,329
where things are we think this is pretty

00:00:39,630 --> 00:00:44,640
important so we had a hacking session at

00:00:42,329 --> 00:00:46,980
last connect where we decided that we

00:00:44,640 --> 00:00:48,540
need to get our act together and put

00:00:46,980 --> 00:00:52,410
together all the documentation that we

00:00:48,540 --> 00:00:53,850
have and we've done that now so instead

00:00:52,410 --> 00:00:56,130
of having to go to a lot of different

00:00:53,850 --> 00:00:58,230
gates now and even Google Documents and

00:00:56,130 --> 00:01:00,180
octagon org and so on you could just go

00:00:58,230 --> 00:01:03,870
to single location now you have

00:01:00,180 --> 00:01:05,100
everything there and this using this you

00:01:03,870 --> 00:01:09,200
can actually even search the

00:01:05,100 --> 00:01:09,200
documentation which is a good thing

00:01:10,310 --> 00:01:17,040
what's left yeah you can see we have

00:01:13,650 --> 00:01:19,409
some documents I mean I don't think that

00:01:17,040 --> 00:01:21,470
general user will really need these

00:01:19,409 --> 00:01:28,640
documents but it is a fee that we will

00:01:21,470 --> 00:01:28,640
put there also as time goes by all right

00:01:28,939 --> 00:01:34,710
next thing this is something that we

00:01:31,350 --> 00:01:39,240
work on from time to time and last year

00:01:34,710 --> 00:01:42,150
we get notification from riskier they

00:01:39,240 --> 00:01:45,000
had done an audit of opti and found a

00:01:42,150 --> 00:01:47,460
couple of security issues and this

00:01:45,000 --> 00:01:50,130
basically ended up in a patch serious

00:01:47,460 --> 00:01:52,470
you have the links here with a bunch of

00:01:50,130 --> 00:01:55,020
different commits and we're trying to

00:01:52,470 --> 00:01:59,310
following a disclosure policy in this

00:01:55,020 --> 00:02:03,030
case so you have that by the way on that

00:01:59,310 --> 00:02:06,420
link also so but in principle we have a

00:02:03,030 --> 00:02:08,840
set of first word with stakeholders who

00:02:06,420 --> 00:02:12,689
are getting notified about this and

00:02:08,840 --> 00:02:14,639
depending on where we are in time we

00:02:12,689 --> 00:02:16,590
have different operations I mean we

00:02:14,639 --> 00:02:17,909
notify people we create mitigation

00:02:16,590 --> 00:02:20,250
patches send them out to these

00:02:17,909 --> 00:02:22,740
stakeholders and so on

00:02:20,250 --> 00:02:32,310
but this this is done it's completed now

00:02:22,740 --> 00:02:35,520
horrific so handing over to Jerome thank

00:02:32,310 --> 00:02:38,930
you you came so a few words on new

00:02:35,520 --> 00:02:43,770
features that we have had it recently ta

00:02:38,930 --> 00:02:46,350
SLR so as you probably are aware address

00:02:43,770 --> 00:02:49,110
space layout randomization is a security

00:02:46,350 --> 00:02:52,650
technique to prevent exploitation of

00:02:49,110 --> 00:02:56,700
memory corruptions and vulnerabilities

00:02:52,650 --> 00:02:58,590
so when this feature is enabled the

00:02:56,700 --> 00:03:01,470
trusted applications are simply mapped

00:02:58,590 --> 00:03:03,840
into user space with a random offset so

00:03:01,470 --> 00:03:06,180
the net effect is that the virtual

00:03:03,840 --> 00:03:11,250
addresses are actually modified and

00:03:06,180 --> 00:03:14,100
changed so this will be in up to 3.5 you

00:03:11,250 --> 00:03:16,590
will have a new configs flag just set it

00:03:14,100 --> 00:03:20,690
to yes and then it will enable the this

00:03:16,590 --> 00:03:23,670
feature it's disabled by default because

00:03:20,690 --> 00:03:25,680
it increases the memory memory usage

00:03:23,670 --> 00:03:29,269
because we sometimes need more page

00:03:25,680 --> 00:03:32,130
table memory for for doing this trick so

00:03:29,269 --> 00:03:35,370
it's actually enabled only for high ki

00:03:32,130 --> 00:03:38,640
960 and the qmu built so that we can

00:03:35,370 --> 00:03:41,549
test this on a regular basis and then

00:03:38,640 --> 00:03:43,610
any platform can enable it and tune it

00:03:41,549 --> 00:03:47,010
accordingly

00:03:43,610 --> 00:03:48,860
next thing shared based libraries for

00:03:47,010 --> 00:03:51,660
TSO

00:03:48,860 --> 00:03:54,570
shared libraries are normally not used

00:03:51,660 --> 00:03:57,299
by a trusted application the regular way

00:03:54,570 --> 00:04:03,600
of linking TAS is to use static

00:03:57,299 --> 00:04:05,820
libraries with archive files but so the

00:04:03,600 --> 00:04:07,380
files that are used by trusted

00:04:05,820 --> 00:04:10,290
applications typically they are only

00:04:07,380 --> 00:04:12,450
Beauty the global platform API leap

00:04:10,290 --> 00:04:16,019
utils which is a minimal implementation

00:04:12,450 --> 00:04:19,380
of the C library and Lib MPA or embed

00:04:16,019 --> 00:04:23,490
TLS which are library that provide big

00:04:19,380 --> 00:04:25,260
number and some crypto support so as I

00:04:23,490 --> 00:04:27,960
said normally there are static archives

00:04:25,260 --> 00:04:31,830
but in 3.5 dot 0 we have introduced a

00:04:27,960 --> 00:04:34,530
flag to also produce shared objects

00:04:31,830 --> 00:04:39,150
so you will get Li Beauty dot SOE beauty

00:04:34,530 --> 00:04:41,700
less o Alabam pa dot s o etc and these

00:04:39,150 --> 00:04:45,810
files can be used at linked time to link

00:04:41,700 --> 00:04:49,260
the ta against shared objects and at

00:04:45,810 --> 00:04:50,460
runtime some signed versions of the

00:04:49,260 --> 00:04:55,020
libraries will be loaded

00:04:50,460 --> 00:04:57,360
that's the dots ta files so actually the

00:04:55,020 --> 00:05:00,840
using shared library instead of static

00:04:57,360 --> 00:05:04,010
ones has an obvious advantages that it

00:05:00,840 --> 00:05:05,940
reduces the amount of space used in the

00:05:04,010 --> 00:05:08,480
persistent storage because you don't

00:05:05,940 --> 00:05:11,520
have to duplicate the the library code

00:05:08,480 --> 00:05:13,620
but they will mostly make sense with the

00:05:11,520 --> 00:05:15,330
introduction of code page sharing

00:05:13,620 --> 00:05:17,790
because for the moment trusted

00:05:15,330 --> 00:05:20,040
application do not share read only page

00:05:17,790 --> 00:05:21,570
and they do not share code pages so if

00:05:20,040 --> 00:05:23,580
you run two instances of trusted

00:05:21,570 --> 00:05:25,320
application even though they are using

00:05:23,580 --> 00:05:27,720
the same libraries you will still

00:05:25,320 --> 00:05:31,530
duplicate some memory and there will be

00:05:27,720 --> 00:05:33,870
an interesting session on first day I

00:05:31,530 --> 00:05:36,560
think about code sharing which is a

00:05:33,870 --> 00:05:40,500
feature that we will introduce later and

00:05:36,560 --> 00:05:47,430
at this point it will make most sense to

00:05:40,500 --> 00:05:51,060
enable share libraries normal world

00:05:47,430 --> 00:05:55,170
virtualization so we have received some

00:05:51,060 --> 00:05:56,760
contribution from external developers an

00:05:55,170 --> 00:06:00,210
external developer someone who's not

00:05:56,760 --> 00:06:03,990
involved in Lin ro scheduled activity

00:06:00,210 --> 00:06:06,170
but who's working with opti the guy has

00:06:03,990 --> 00:06:09,650
proposed some patches on github for

00:06:06,170 --> 00:06:12,810
enabling normal world virtualization so

00:06:09,650 --> 00:06:15,300
these patches have been merged already

00:06:12,810 --> 00:06:19,490
so they will be available in up to 3.5

00:06:15,300 --> 00:06:23,250
they are enabled with CFG virtualization

00:06:19,490 --> 00:06:26,130
equals yes so this is still experimental

00:06:23,250 --> 00:06:28,710
because you need some patches on the

00:06:26,130 --> 00:06:32,460
normal world side and the guy is using

00:06:28,710 --> 00:06:34,260
Zen for virtualization so the Zen

00:06:32,460 --> 00:06:38,040
patches are currently under discussion

00:06:34,260 --> 00:06:39,840
and the fact that the object support has

00:06:38,040 --> 00:06:42,240
been merged upstream already it will

00:06:39,840 --> 00:06:44,460
probably help integration of the exam

00:06:42,240 --> 00:06:45,800
stuff but this I cannot really comment

00:06:44,460 --> 00:06:48,990
on this is ongoing

00:06:45,800 --> 00:06:54,510
so you can also get some documentation

00:06:48,990 --> 00:06:57,390
about this virtualization support yep

00:06:54,510 --> 00:07:00,050
that's it for me I think Victoria is

00:06:57,390 --> 00:07:00,050
next

00:07:11,900 --> 00:07:21,259
hi so I'm just some updates on the USB

00:07:16,590 --> 00:07:24,409
and keymaster so we introduced the

00:07:21,259 --> 00:07:28,770
implementation of a key base key master

00:07:24,409 --> 00:07:34,919
at the last connect so now this is part

00:07:28,770 --> 00:07:36,810
of our u.s. PPO by default so if you if

00:07:34,919 --> 00:07:38,849
you go go to the github and download and

00:07:36,810 --> 00:07:44,400
build the stuff it will include the Tiki

00:07:38,849 --> 00:07:46,710
master module by default we had Wow we

00:07:44,400 --> 00:07:51,030
do have we still have plans to obscene

00:07:46,710 --> 00:07:54,719
the the CA the normal world code to us

00:07:51,030 --> 00:07:58,949
upstream USB but this is taking a long

00:07:54,719 --> 00:08:00,779
time since it's slow by nature trying to

00:07:58,949 --> 00:08:09,000
add something new especially a new

00:08:00,779 --> 00:08:10,169
report repository to to the two USB and

00:08:09,000 --> 00:08:16,979
also because the current implementation

00:08:10,169 --> 00:08:20,340
depends on on a PTA so it's not not as

00:08:16,979 --> 00:08:22,199
flexible since it depends on building up

00:08:20,340 --> 00:08:24,900
TOS as well so we're trying to refactor

00:08:22,199 --> 00:08:28,500
it we factor that to to a regular

00:08:24,900 --> 00:08:32,909
dynamic ta this work is I guess it's

00:08:28,500 --> 00:08:37,079
ongoing and then we had a member company

00:08:32,909 --> 00:08:42,360
recently trying this and we ran into

00:08:37,079 --> 00:08:44,339
some compatibility issues when for this

00:08:42,360 --> 00:08:50,760
encryption is this enabled so we're

00:08:44,339 --> 00:08:52,709
trying to as well and then with the

00:08:50,760 --> 00:08:57,120
second main thing is with establish a

00:08:52,709 --> 00:09:00,149
quarterly release process for for us

00:08:57,120 --> 00:09:02,880
people this will be in sync with our

00:09:00,149 --> 00:09:04,649
regular quarterly releases so the two

00:09:02,880 --> 00:09:09,120
we've done so far is the three trio and

00:09:04,649 --> 00:09:14,250
three 400 which are linked here so with

00:09:09,120 --> 00:09:18,700
that we will only support the the

00:09:14,250 --> 00:09:21,340
current latest version of USB

00:09:18,700 --> 00:09:25,590
and the current latest version of opti

00:09:21,340 --> 00:09:28,090
so for now this is PI plus 3.4 that all

00:09:25,590 --> 00:09:30,940
so when the next

00:09:28,090 --> 00:09:33,790
opti release comes around if if Q is not

00:09:30,940 --> 00:09:39,280
now it will be pi plus 3 for 500 if Q is

00:09:33,790 --> 00:09:43,270
out there will be Q plus treat or $6 the

00:09:39,280 --> 00:09:46,570
that's not based on the upstream it was

00:09:43,270 --> 00:09:51,930
really it would be based on the LCR USB

00:09:46,570 --> 00:09:56,760
released and the previously we had some

00:09:51,930 --> 00:09:56,760
kind of support for older versions like

00:09:57,060 --> 00:10:05,110
Oh Oreo and and also the master bill but

00:10:02,080 --> 00:10:08,140
this will now be for internal

00:10:05,110 --> 00:10:09,550
development only otherwise the the

00:10:08,140 --> 00:10:12,130
maintenance cost is kind of too high to

00:10:09,550 --> 00:10:18,370
sort of maintain all possible

00:10:12,130 --> 00:10:20,020
combinations in the in the matrix third

00:10:18,370 --> 00:10:23,590
thing is with we now have a weekly CI

00:10:20,020 --> 00:10:28,390
built to detect any built and run errors

00:10:23,590 --> 00:10:33,430
we for the Heike bill we we test X tests

00:10:28,390 --> 00:10:37,980
on these bills and also the the G test

00:10:33,430 --> 00:10:41,440
unit for four key master and gatekeeper

00:10:37,980 --> 00:10:45,670
so the bills are publisher on on

00:10:41,440 --> 00:10:48,340
snapshots you can try them off human but

00:10:45,670 --> 00:10:48,970
these are heavily experiment also use at

00:10:48,340 --> 00:10:55,570
your own risk

00:10:48,970 --> 00:11:00,310
oops sorry fourth thing we've added

00:10:55,570 --> 00:11:03,910
support for a high key 960 bill but it's

00:11:00,310 --> 00:11:05,710
not very stable at this point the ADP

00:11:03,910 --> 00:11:08,920
doesn't work so you have to work around

00:11:05,710 --> 00:11:11,140
it by using ADP over TCP their Wi-Fi

00:11:08,920 --> 00:11:14,590
errors and then couple of users on on

00:11:11,140 --> 00:11:17,280
online community users reporting monitor

00:11:14,590 --> 00:11:17,280
issues so

00:11:19,750 --> 00:11:26,060
we're thinking of you know maybe we just

00:11:22,670 --> 00:11:29,780
take it down as part of off the official

00:11:26,060 --> 00:11:31,490
release though but I guess this may be

00:11:29,780 --> 00:11:38,210
my own thinking for now but it requires

00:11:31,490 --> 00:11:40,850
more more discussion so just one thing

00:11:38,210 --> 00:11:44,210
if you do try this and you find that the

00:11:40,850 --> 00:11:46,400
monitor you don't see the UI on the

00:11:44,210 --> 00:11:51,320
monitor one one good tip is to set the

00:11:46,400 --> 00:11:52,820
resolution to 1280 by 720 so that for

00:11:51,320 --> 00:11:57,040
some reason on the high keyboard that

00:11:52,820 --> 00:12:02,960
seems to be the resolution that is

00:11:57,040 --> 00:12:08,380
supported the easiest and then finally

00:12:02,960 --> 00:12:11,060
with up to yvr 18 we still have to use

00:12:08,380 --> 00:12:13,130
permission to run access we've now

00:12:11,060 --> 00:12:17,680
gotten in our way so we don't have to we

00:12:13,130 --> 00:12:17,680
don't have any dependency on su or sudo

00:12:23,840 --> 00:12:35,200
okay that's all for me thanks thank you

00:12:35,740 --> 00:12:44,839
isolation isolation in secure while

00:12:39,560 --> 00:12:49,990
using vitalization is introduced in the

00:12:44,839 --> 00:12:52,520
arm v 8.4 structure and thus to

00:12:49,990 --> 00:12:56,390
specifications currently under

00:12:52,520 --> 00:13:01,130
development to tell how this will work

00:12:56,390 --> 00:13:03,339
and that's SP CI secure petition client

00:13:01,130 --> 00:13:06,610
interface interface specification and

00:13:03,339 --> 00:13:12,230
secure partition runtime specification

00:13:06,610 --> 00:13:15,980
the you but s PCIe specification is the

00:13:12,230 --> 00:13:20,900
one that's we are currently trying out

00:13:15,980 --> 00:13:24,589
on opti using different prototypes I I

00:13:20,900 --> 00:13:27,650
did one just before Christmas and shin

00:13:24,589 --> 00:13:32,089
has been doing one right now that we are

00:13:27,650 --> 00:13:36,920
trying out see that the specification

00:13:32,089 --> 00:13:40,010
house and yeah at the point with the

00:13:36,920 --> 00:13:43,100
fertilization is humorless to be able to

00:13:40,010 --> 00:13:48,070
sandbox the different trustee reverses

00:13:43,100 --> 00:13:48,070
and perhaps different services and so on

00:13:49,060 --> 00:13:52,660
yeah that's it

00:14:02,370 --> 00:14:05,940
whose is that

00:14:11,430 --> 00:14:19,300
okay hello sue good microphone a few

00:14:16,990 --> 00:14:23,370
changes in opti regarding the device

00:14:19,300 --> 00:14:26,470
three historically opti allowed one to

00:14:23,370 --> 00:14:28,630
use the diversity to share configuration

00:14:26,470 --> 00:14:33,250
data with the non secure world at boot

00:14:28,630 --> 00:14:37,899
time and there were few changes to to

00:14:33,250 --> 00:14:42,790
use some fragment overlays of the

00:14:37,899 --> 00:14:44,920
fragments format to share this computer

00:14:42,790 --> 00:14:47,529
configuration data between secure world

00:14:44,920 --> 00:14:50,790
and and the normal world there will be a

00:14:47,529 --> 00:14:54,760
presentation on that Thursday morning at

00:14:50,790 --> 00:14:56,889
8:30 and another thing that was changed

00:14:54,760 --> 00:15:00,190
for the device tree is an introduction

00:14:56,889 --> 00:15:03,459
of platforms that build that compels the

00:15:00,190 --> 00:15:06,790
device tree entry device resource files

00:15:03,459 --> 00:15:09,130
to define the object configuration from

00:15:06,790 --> 00:15:15,279
the device tree rather than using the

00:15:09,130 --> 00:15:17,500
legacy configuration directives so I'll

00:15:15,279 --> 00:15:22,120
try to be quick so if you have question

00:15:17,500 --> 00:15:25,060
later on another thing that was maybe in

00:15:22,120 --> 00:15:27,160
the opti is the support for building the

00:15:25,060 --> 00:15:31,060
optic packages from the bureau root

00:15:27,160 --> 00:15:33,160
build environment so that is to have

00:15:31,060 --> 00:15:36,699
some recipes in the bill route to build

00:15:33,160 --> 00:15:40,149
the Optio as the optic client package

00:15:36,699 --> 00:15:42,790
and the opti regression test and a few

00:15:40,149 --> 00:15:46,329
other fuses there's only one other with

00:15:42,790 --> 00:15:49,389
physio key example packages so one can

00:15:46,329 --> 00:15:52,480
just use Bill root runnable the several

00:15:49,389 --> 00:15:55,690
packages configuration and get an opt-in

00:15:52,480 --> 00:15:58,449
inside there they are platform so this

00:15:55,690 --> 00:16:00,399
is quite new and I guess it needs to be

00:15:58,449 --> 00:16:02,319
made sure that at least things were

00:16:00,399 --> 00:16:07,050
merged and thanks a lot to the Bureau

00:16:02,319 --> 00:16:07,050
team that helped a lot in that

00:16:08,860 --> 00:16:16,980
and my last point is about pkcs 11 so

00:16:13,720 --> 00:16:20,440
pkcs 11 supporting the opti was

00:16:16,980 --> 00:16:25,240
presented one year ago as an initiative

00:16:20,440 --> 00:16:31,180
so one year later where we are well I've

00:16:25,240 --> 00:16:34,870
been told because yes involve a use a

00:16:31,180 --> 00:16:38,310
non secure client library and the

00:16:34,870 --> 00:16:44,050
trusted application to exercise the

00:16:38,310 --> 00:16:46,330
secure cryptography thing and also in

00:16:44,050 --> 00:16:48,700
the opt-in on regression opt in

00:16:46,330 --> 00:16:54,010
regression test sorry there were some

00:16:48,700 --> 00:16:57,550
tests to check that the pkcs 11 trusted

00:16:54,010 --> 00:17:00,550
application conforms with pkcs things

00:16:57,550 --> 00:17:03,070
and crypto so this is still an ongoing

00:17:00,550 --> 00:17:06,160
work since it's not merged in the

00:17:03,070 --> 00:17:09,220
mainline dabkey it's still on private

00:17:06,160 --> 00:17:14,740
branch and there are pool requests open

00:17:09,220 --> 00:17:17,230
for that so we happily welcome reviewers

00:17:14,740 --> 00:17:20,860
that are interested in this feature to

00:17:17,230 --> 00:17:28,840
help reviewing and merging the client

00:17:20,860 --> 00:17:38,140
and trusted application part next one

00:17:28,840 --> 00:17:40,210
that gives you back the microphone this

00:17:38,140 --> 00:17:42,220
was everything we have so this is just a

00:17:40,210 --> 00:17:44,260
reminder of our things that we're doing

00:17:42,220 --> 00:17:46,540
this week so tomorrow morning I will

00:17:44,260 --> 00:17:50,290
have a little talk about running TP ins

00:17:46,540 --> 00:17:51,700
in a tea and a science or Jerome

00:17:50,290 --> 00:17:53,440
actually I mentioned about Ian's

00:17:51,700 --> 00:17:56,980
presentation about sharing code pages

00:17:53,440 --> 00:17:59,380
later this week the keymaster internals

00:17:56,980 --> 00:18:00,910
that was cancelled so the engineer that

00:17:59,380 --> 00:18:06,850
used to work with it he's no longer with

00:18:00,910 --> 00:18:11,170
us and debugging for opti is something

00:18:06,850 --> 00:18:12,760
submit will do is there so and there are

00:18:11,170 --> 00:18:15,670
actually a few more talks I've seen in

00:18:12,760 --> 00:18:17,560
the in the schedule also touching opti

00:18:15,670 --> 00:18:20,500
in our area so have a look at the

00:18:17,560 --> 00:18:22,450
security track so I guess we're open for

00:18:20,500 --> 00:18:34,059
questions if you have any

00:18:22,450 --> 00:18:36,580
ah true yeah we noticed this at this

00:18:34,059 --> 00:18:39,720
session time for the TPMT that's

00:18:36,580 --> 00:18:42,669
actually wrong here but people who have

00:18:39,720 --> 00:18:44,590
checked it in your app should have

00:18:42,669 --> 00:18:46,929
gotten notification today saying that

00:18:44,590 --> 00:18:50,049
the presentation is 8:30 tomorrow

00:18:46,929 --> 00:19:05,799
morning so that's the wrong time correct

00:18:50,049 --> 00:19:12,399
time is 8:30 tomorrow morning I can just

00:19:05,799 --> 00:19:14,859
clarify the pkcs situation so that you

00:19:12,399 --> 00:19:17,799
say you might end up adding more support

00:19:14,859 --> 00:19:25,179
to things like certificates and if

00:19:17,799 --> 00:19:26,950
helman etc yeah alright yeah ok so pkcs

00:19:25,179 --> 00:19:28,480
11 as it says there's a lot of things to

00:19:26,950 --> 00:19:30,940
have a trip to a lot of supports in the

00:19:28,480 --> 00:19:33,009
pkcs 11 in the specification I mean yeah

00:19:30,940 --> 00:19:35,169
but it's just finalized so you get the

00:19:33,009 --> 00:19:37,059
question it's these things

00:19:35,169 --> 00:19:39,249
all right kind of supported if we use

00:19:37,059 --> 00:19:40,690
the ember TLS right so what's the

00:19:39,249 --> 00:19:44,529
difference here what they were going to

00:19:40,690 --> 00:19:48,549
add the extra okay if you use ember TLS

00:19:44,529 --> 00:19:51,700
maybe you can have you can make a pkcs

00:19:48,549 --> 00:19:55,480
11 application but here the aim is to

00:19:51,700 --> 00:19:56,919
have the Pegasus 11 the crypto part

00:19:55,480 --> 00:20:01,299
being done in the secure world

00:19:56,919 --> 00:20:04,239
well the pkcs 11 interface is in a non

00:20:01,299 --> 00:20:06,460
secure world so the work is is to have a

00:20:04,239 --> 00:20:10,299
library in the Linux non secure user

00:20:06,460 --> 00:20:12,489
land right to be able to invoke a

00:20:10,299 --> 00:20:14,679
trusted application in the opti that

00:20:12,489 --> 00:20:17,529
will do the crypto part perfectly and

00:20:14,679 --> 00:20:19,359
the user shall be pkcs 11 so trusted the

00:20:17,529 --> 00:20:21,129
application interface can be whatever

00:20:19,359 --> 00:20:23,200
and this is a proposal of an

00:20:21,129 --> 00:20:25,960
implementation alright thank you and

00:20:23,200 --> 00:20:26,919
currently it's supports only like as

00:20:25,960 --> 00:20:31,029
it's written

00:20:26,919 --> 00:20:33,660
AES flavours some eros a fewh Mac and a

00:20:31,029 --> 00:20:36,570
lot of things missings of course

00:20:33,660 --> 00:20:40,460
mainly elliptic curve support which

00:20:36,570 --> 00:20:42,780
should be developed soon hopefully and

00:20:40,460 --> 00:20:45,120
certificates also and thanks to the

00:20:42,780 --> 00:20:48,140
embed that empathy Ellis libraries that

00:20:45,120 --> 00:20:51,150
is that work that was merged in the opti

00:20:48,140 --> 00:20:53,809
trust application level then all those

00:20:51,150 --> 00:20:56,280
should be under through the amber TLS

00:20:53,809 --> 00:21:10,230
library inside the trusted application

00:20:56,280 --> 00:21:13,950
alright thank you thank you I want to

00:21:10,230 --> 00:21:17,880
ask two questions simply the first lines

00:21:13,950 --> 00:21:22,320
that I show you that you have folks on

00:21:17,880 --> 00:21:25,549
the cell membrane with between Matt EDTA

00:21:22,320 --> 00:21:28,620
but I want to know if you have some

00:21:25,549 --> 00:21:32,730
skills some schedules some thinking

00:21:28,620 --> 00:21:36,240
about the share memory the security of

00:21:32,730 --> 00:21:40,890
the share memory changes opt years

00:21:36,240 --> 00:21:43,440
between the OPDs and LAN securities such

00:21:40,890 --> 00:21:47,340
as candor that is that the first one is

00:21:43,440 --> 00:21:52,770
that the second one is the second

00:21:47,340 --> 00:21:56,940
question is I have last show the

00:21:52,770 --> 00:22:01,470
application about the new up such as the

00:21:56,940 --> 00:22:04,919
strongbox in the Android kill the Google

00:22:01,470 --> 00:22:07,770
houses that maybe he wants you there

00:22:04,919 --> 00:22:10,309
some om twist reports from box but I

00:22:07,770 --> 00:22:12,740
have not seen your schedule or something

00:22:10,309 --> 00:22:17,880
notice about the strongbox an

00:22:12,740 --> 00:22:19,710
application is a Google okay so the

00:22:17,880 --> 00:22:22,340
first question was about shared memory

00:22:19,710 --> 00:22:25,860
between security and the land security

00:22:22,340 --> 00:22:29,700
yeah what's really the question if it's

00:22:25,860 --> 00:22:33,150
if you if you have some some thinking

00:22:29,700 --> 00:22:35,669
about that or some something to how to

00:22:33,150 --> 00:22:38,940
make the security eldership your memory

00:22:35,669 --> 00:22:41,429
well it's not secured by the site I mean

00:22:38,940 --> 00:22:43,860
it's the specification also so you can

00:22:41,429 --> 00:22:46,250
use the shared memory to send

00:22:43,860 --> 00:22:48,710
information to secure site but that

00:22:46,250 --> 00:22:50,600
that part of the memory isn't secure so

00:22:48,710 --> 00:22:52,190
if you need to use secure memory then

00:22:50,600 --> 00:22:55,310
you need to allocate memory on the T

00:22:52,190 --> 00:22:59,630
itself and use that but because in a

00:22:55,310 --> 00:23:04,400
zero in the TOC OTP attack situation

00:22:59,630 --> 00:23:05,900
thus your memory may be a if you copy

00:23:04,400 --> 00:23:10,700
the data in the show memory in the LAN

00:23:05,900 --> 00:23:16,360
security and then use it in the security

00:23:10,700 --> 00:23:19,760
mode this is a simple V but in the

00:23:16,360 --> 00:23:22,730
complicated complicated situation this

00:23:19,760 --> 00:23:25,480
we have bit such situation it's very

00:23:22,730 --> 00:23:31,940
complicated and I can't fix this

00:23:25,480 --> 00:23:33,410
the security I mean basically if you're

00:23:31,940 --> 00:23:34,820
writing into an application and you're

00:23:33,410 --> 00:23:36,290
working with memory you need to be

00:23:34,820 --> 00:23:38,030
careful whether you use in the shared

00:23:36,290 --> 00:23:40,460
memory that is coming from normal world

00:23:38,030 --> 00:23:42,110
or if you need to allocate something

00:23:40,460 --> 00:23:44,030
else so you can't just blindly use the

00:23:42,110 --> 00:23:45,620
shared memory and think everything

00:23:44,030 --> 00:23:48,110
magically becomes secure when you run

00:23:45,620 --> 00:23:49,460
into ta that it's not still I mean as

00:23:48,110 --> 00:23:51,980
you're saying you can still touch that

00:23:49,460 --> 00:23:53,270
memory so you need to copy it before

00:23:51,980 --> 00:23:59,380
actually working with it's a secure

00:23:53,270 --> 00:24:03,640
memory in that case I saw the specific

00:23:59,380 --> 00:24:06,740
speaking like that how to in our

00:24:03,640 --> 00:24:10,640
situation you're in our case we just

00:24:06,740 --> 00:24:13,010
meet associate memory about dynamic

00:24:10,640 --> 00:24:16,190
allocation is this situation it's really

00:24:13,010 --> 00:24:20,510
complicated dynamic allocation because

00:24:16,190 --> 00:24:25,460
sometimes maybe were we need maybe more

00:24:20,510 --> 00:24:28,000
than 100 unbid in the security but I

00:24:25,460 --> 00:24:31,640
can't reserve so much

00:24:28,000 --> 00:24:35,270
so much memory is a security mode so out

00:24:31,640 --> 00:24:38,840
you Telemachus allocated it in this case

00:24:35,270 --> 00:24:40,910
it's worth complicated yes I can see the

00:24:38,840 --> 00:24:42,500
counter is counting down here so what

00:24:40,910 --> 00:24:45,850
was the second question second question

00:24:42,500 --> 00:24:49,310
is that how you do you have any plan to

00:24:45,850 --> 00:24:53,920
support the strongbox in the octi or

00:24:49,310 --> 00:24:56,420
some application in enjoy in until q

00:24:53,920 --> 00:24:58,100
moment answer is no but that doesn't

00:24:56,420 --> 00:24:59,720
mean it's a definite no it's just that

00:24:58,100 --> 00:24:59,870
we haven't really looked into it and we

00:24:59,720 --> 00:25:01,490
have

00:24:59,870 --> 00:25:03,590
had any members who has been asking for

00:25:01,490 --> 00:25:04,910
it so I mean if we have the memory

00:25:03,590 --> 00:25:07,010
saying that this is something that is

00:25:04,910 --> 00:25:08,720
important for us and we will try to look

00:25:07,010 --> 00:25:10,970
into it to see if we can do it and if

00:25:08,720 --> 00:25:12,470
it's a if it's over that we can do well

00:25:10,970 --> 00:25:16,040
then it will become part of the plan I

00:25:12,470 --> 00:25:18,590
guess that's more kind of planning work

00:25:16,040 --> 00:25:21,440
I would say right now thank you

00:25:18,590 --> 00:25:24,740
so we're out of time now I can see so

00:25:21,440 --> 00:25:27,370
thanks everyone for joining and yeah ask

00:25:24,740 --> 00:25:34,330
us questions you know the guys yen's

00:25:27,370 --> 00:25:39,410
Jerome V and Etienne just okay thanks

00:25:34,330 --> 00:25:39,410

YouTube URL: https://www.youtube.com/watch?v=k6bmQrBe7sc


