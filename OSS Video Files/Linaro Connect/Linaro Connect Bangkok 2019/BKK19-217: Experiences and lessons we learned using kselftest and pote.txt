Title: BKK19-217: Experiences and lessons we learned using kselftest and pote
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Over the past years, we ran the kernel selftests as part of the LTS release testing. During that time, we learned things, fixed things and created a wish list of work we want to tackle. This session is about what we learned and where we are heading.
Captions: 
	00:00:06,270 --> 00:00:18,430
welcome and I think I have to apologize

00:00:11,580 --> 00:00:23,410
I didn't write those slides of the title

00:00:18,430 --> 00:00:24,130
of this presentation so yeah we'll see

00:00:23,410 --> 00:00:28,119
how it goes

00:00:24,130 --> 00:00:33,690
I got sidetracked I've been but to

00:00:28,119 --> 00:00:37,300
entice you to say louder yes

00:00:33,690 --> 00:00:40,870
so enticed to entice you to stay I can

00:00:37,300 --> 00:00:45,969
mention that this presentation was

00:00:40,870 --> 00:00:52,720
partly done by the shine neighbor when

00:00:45,969 --> 00:00:55,870
he's my son so

00:00:52,720 --> 00:01:02,739
this is me and that's me according to my

00:00:55,870 --> 00:01:11,050
son I'm from Sweden been involved with K

00:01:02,739 --> 00:01:13,210
self-test for roughly a year so why are

00:01:11,050 --> 00:01:21,580
we here

00:01:13,210 --> 00:01:29,860
I think I got site ok but that well

00:01:21,580 --> 00:01:37,770
today trying to explain what what K

00:01:29,860 --> 00:01:37,770
surfaces and how we left Iran k subtests

00:01:37,860 --> 00:01:50,500
what will contribute and what we plan to

00:01:41,759 --> 00:02:02,590
do in the future so what is a self test

00:01:50,500 --> 00:02:05,679
that's several tests set of unit tests

00:02:02,590 --> 00:02:08,280
and regression test that is in the

00:02:05,679 --> 00:02:08,280
kernel tree

00:02:11,590 --> 00:02:18,850
it's probably used it's permitted for

00:02:15,510 --> 00:02:23,950
developers but testers testers and the

00:02:18,850 --> 00:02:33,660
uses cables wrong it it's there to find

00:02:23,950 --> 00:02:41,530
regression stone that's really good I'm

00:02:33,660 --> 00:02:48,459
gonna try so when do we run K self-test

00:02:41,530 --> 00:02:53,250
we when there's a new commit to any

00:02:48,459 --> 00:02:57,489
color that we track we run a CL system

00:02:53,250 --> 00:03:01,930
or we build a local embedded image that

00:02:57,489 --> 00:03:09,510
contains some kernel repo system and K

00:03:01,930 --> 00:03:09,510
sub tests and we run it on real hardware

00:03:12,510 --> 00:03:25,590
and how do you know which version of K

00:03:19,840 --> 00:03:30,459
surface to be use for our fore and aft

00:03:25,590 --> 00:03:35,190
we are trying to test long-term support

00:03:30,459 --> 00:03:39,030
kernels and we run that with the latest

00:03:35,190 --> 00:03:44,620
released chompers

00:03:39,030 --> 00:03:49,359
so today it's the latest release is

00:03:44,620 --> 00:03:53,220
peridot so we're on test set of tests

00:03:49,359 --> 00:03:55,450
from parallel with against all the

00:03:53,220 --> 00:04:00,220
healthiest versions to the result and

00:03:55,450 --> 00:04:06,400
it's today it's four four four nine four

00:04:00,220 --> 00:04:11,340
fourteen and 494 mainline the next were

00:04:06,400 --> 00:04:11,340
wrong whatever it is entry

00:04:15,910 --> 00:04:24,190
we'll have little contributed to a

00:04:19,430 --> 00:04:30,700
self-test for our own case and first I

00:04:24,190 --> 00:04:30,700
will say even reporting dashboard

00:04:31,720 --> 00:04:46,490
conflict fragments and point fixes well

00:04:40,870 --> 00:04:50,350
these are some icons that I will use

00:04:46,490 --> 00:04:53,120
throughout the presentation and that

00:04:50,350 --> 00:05:04,460
apparently a rocket and a football and

00:04:53,120 --> 00:05:11,389
the pirate so this is the template we'll

00:05:04,460 --> 00:05:18,470
use when we send out email reports on

00:05:11,389 --> 00:05:22,370
all the person next kernels we don't do

00:05:18,470 --> 00:05:28,850
that for mainline yeah not sure if we're

00:05:22,370 --> 00:05:33,979
gonna do that so you could see somewhere

00:05:28,850 --> 00:05:39,039
with conversions where we download it

00:05:33,979 --> 00:05:44,120
from which branch so so forth and then

00:05:39,039 --> 00:05:47,539
what I cut out was the regression if

00:05:44,120 --> 00:05:52,490
there are regressions and failures and

00:05:47,539 --> 00:05:54,620
fixes and as well I should have left

00:05:52,490 --> 00:06:00,710
that

00:05:54,620 --> 00:06:06,770
and if you don't think that email is

00:06:00,710 --> 00:06:10,400
enough you can go to QA - reports that

00:06:06,770 --> 00:06:16,070
you know at all and see and drill down

00:06:10,400 --> 00:06:19,790
to say self test and the specific test

00:06:16,070 --> 00:06:26,270
that is wrong and you can compare

00:06:19,790 --> 00:06:30,470
against different kernels and different

00:06:26,270 --> 00:06:32,750
boards which is good behind it but

00:06:30,470 --> 00:06:35,410
that's something that the email report

00:06:32,750 --> 00:06:35,410
doesn't lead

00:06:39,840 --> 00:06:53,000
so framework changes before was quite

00:06:46,680 --> 00:06:53,000
hard to figure out what kernel fragments

00:06:53,810 --> 00:07:02,690
you needed to enable a warrior on

00:06:56,990 --> 00:07:08,100
certain tests and now there is a file in

00:07:02,690 --> 00:07:11,700
case afters in every subject that he

00:07:08,100 --> 00:07:17,820
could show you know what fragments you

00:07:11,700 --> 00:07:20,940
need to enable and there's the top made

00:07:17,820 --> 00:07:26,220
from you can do K self-esteem ownership

00:07:20,940 --> 00:07:37,100
and that will merging all triangles that

00:07:26,220 --> 00:07:40,100
you need to own confessed we also

00:07:37,100 --> 00:07:40,100
improved

00:07:46,349 --> 00:07:54,899
so basically you need to run headers in

00:07:49,289 --> 00:07:58,740
stone before you build castle test and

00:07:54,899 --> 00:08:02,569
before you have to build that separately

00:07:58,740 --> 00:08:02,569
but now it's integrated as well

00:08:10,180 --> 00:08:13,259
[Music]

00:08:13,820 --> 00:08:23,240
we try to debug fixes as well in lbft

00:08:17,450 --> 00:08:27,530
and all we report the bumps only and the

00:08:23,240 --> 00:08:35,630
to title bars it is a it is a kernel by

00:08:27,530 --> 00:08:41,569
going to test fun and it's

00:08:35,630 --> 00:08:47,350
we do try ocean to try to figure out if

00:08:41,569 --> 00:08:53,779
it's a if it is a caramel bug or bug in

00:08:47,350 --> 00:08:57,259
case L fest and then we try to correct

00:08:53,779 --> 00:08:59,290
it and fix it to yesterday four years or

00:08:57,259 --> 00:08:59,290
so

00:09:02,860 --> 00:09:07,380
so future plans

00:09:14,339 --> 00:09:22,139
would like to try to get case of the

00:09:19,300 --> 00:09:26,380
test to be built with a relative path

00:09:22,139 --> 00:09:30,490
actually not sure if it works with an

00:09:26,380 --> 00:09:36,009
absolute even now since I think I broke

00:09:30,490 --> 00:09:39,370
that when I did the fix for Henderson

00:09:36,009 --> 00:09:41,579
stone that's something I need to fix as

00:09:39,370 --> 00:09:41,579
well

00:09:49,279 --> 00:10:00,620
it would be nice to have to be able to

00:09:52,850 --> 00:10:03,680
shake if a person asks if you can run do

00:10:00,620 --> 00:10:09,079
a wrong turn check to see if her

00:10:03,680 --> 00:10:11,470
features and maybe want instead of just

00:10:09,079 --> 00:10:11,470
failing

00:10:16,030 --> 00:10:21,270
I think the alchemy just added

00:10:23,970 --> 00:10:27,559
yep agree

00:10:31,430 --> 00:10:49,160
well yeah and then if instead of using

00:10:44,750 --> 00:10:55,400
the config fragments it should be doable

00:10:49,160 --> 00:11:00,980
to use an almost config kernel and did

00:10:55,400 --> 00:11:05,860
everything as modules if but today it

00:11:00,980 --> 00:11:05,860
doesn't even boot that's something

00:11:14,200 --> 00:11:18,480
right

00:11:15,160 --> 00:11:18,480
[Music]

00:11:20,520 --> 00:11:30,660
today there is in cube files that is

00:11:26,700 --> 00:11:33,510
sculpted from Henderson stone into the

00:11:30,660 --> 00:11:38,940
tools directory and we need mix and

00:11:33,510 --> 00:11:43,680
match that in case a yesterday and we

00:11:38,940 --> 00:11:46,980
need to sort out somehow either use the

00:11:43,680 --> 00:11:50,990
tools director saddles or heavy reasons

00:11:46,980 --> 00:11:50,990
though we shouldn't mix them

00:11:57,760 --> 00:12:08,460
and we should enable gay self-esteem

00:12:01,540 --> 00:12:08,460
conocÃ­a as well that would be

00:12:11,940 --> 00:12:14,600
quit

00:12:16,220 --> 00:12:48,300
questions let me rephrase it for the

00:12:44,390 --> 00:12:49,860
recording so on the email reporting did

00:12:48,300 --> 00:12:54,030
you guys write that yourself like is it

00:12:49,860 --> 00:12:56,340
an L TFT tools or is that existing tool

00:12:54,030 --> 00:12:58,740
you're using for email for any okay so

00:12:56,340 --> 00:13:06,660
that's all open source already oh great

00:12:58,740 --> 00:13:08,880
thank you this is a command-line wrapper

00:13:06,660 --> 00:13:11,430
that just calls squad to generate the

00:13:08,880 --> 00:13:14,460
report so squad has email template in

00:13:11,430 --> 00:13:17,550
support and so we have different

00:13:14,460 --> 00:13:19,110
templates for different reports and this

00:13:17,550 --> 00:13:22,550
tool just wraps that to get like the

00:13:19,110 --> 00:13:22,550
latest report for a given branch

00:13:28,360 --> 00:13:31,290
Eddie go ships

00:13:38,980 --> 00:13:44,350
so one issue I ran into recently trying

00:13:41,320 --> 00:13:46,570
to get tip K self-test working on an

00:13:44,350 --> 00:13:49,540
older released kernel is that there was

00:13:46,570 --> 00:13:50,889
a bug fix that tip case self-test relied

00:13:49,540 --> 00:13:52,810
on it was basically testing that that

00:13:50,889 --> 00:13:55,720
bug fix was present and so it would fail

00:13:52,810 --> 00:13:58,300
on older kernels so I think somewhere in

00:13:55,720 --> 00:13:59,860
there you had a slide on on making that

00:13:58,300 --> 00:14:02,320
combination work and it was focused on

00:13:59,860 --> 00:14:04,029
adding tests for features so that you

00:14:02,320 --> 00:14:05,440
could you know basically skip a test if

00:14:04,029 --> 00:14:09,670
it depended on a feature that was not

00:14:05,440 --> 00:14:11,350
present yeah that one so I guess if to

00:14:09,670 --> 00:14:14,110
me it sounds like that's a goal we have

00:14:11,350 --> 00:14:15,910
to make tip K self-test work on older

00:14:14,110 --> 00:14:17,500
kernels so I guess I'm just wondering if

00:14:15,910 --> 00:14:18,820
you guys have had discussions about how

00:14:17,500 --> 00:14:22,630
you'll work I'm gonna guess the upstream

00:14:18,820 --> 00:14:25,089
answer so I submitted a patch naively to

00:14:22,630 --> 00:14:26,709
have a particular test in case self test

00:14:25,089 --> 00:14:28,810
she's to check the kernel version and

00:14:26,709 --> 00:14:30,100
you know skip a test if it you know for

00:14:28,810 --> 00:14:32,410
this bug fix and of course I got told

00:14:30,100 --> 00:14:34,269
you know you know you need to back work

00:14:32,410 --> 00:14:36,430
the fix and that's the right way to do

00:14:34,269 --> 00:14:38,410
it which is fine but I mean that means

00:14:36,430 --> 00:14:39,940
now that everybody who has those older

00:14:38,410 --> 00:14:41,589
kernels product kernels would ever need

00:14:39,940 --> 00:14:43,240
to back port that fix so is this

00:14:41,589 --> 00:14:45,190
something that's on your guys's radar

00:14:43,240 --> 00:14:46,690
and is your answer to that just to try

00:14:45,190 --> 00:14:48,310
and get the word out and for Lonardo

00:14:46,690 --> 00:14:50,290
kernels you know we just need to be more

00:14:48,310 --> 00:15:02,740
diligent about backporting fixes like

00:14:50,290 --> 00:15:04,720
that so one of the this is this is an

00:15:02,740 --> 00:15:08,470
issue that we've run into a lot with LTP

00:15:04,720 --> 00:15:11,050
is LTP has several tests that will hang

00:15:08,470 --> 00:15:13,740
a kernel an old kernel and you don't

00:15:11,050 --> 00:15:16,149
want to disable the test because it's

00:15:13,740 --> 00:15:17,890
because it's you still have the bug in

00:15:16,149 --> 00:15:20,260
the kernel right and so you have this

00:15:17,890 --> 00:15:21,640
kind of you have a bug that you you

00:15:20,260 --> 00:15:24,130
don't you don't want to just add it to

00:15:21,640 --> 00:15:26,140
the Skip list and you and it's

00:15:24,130 --> 00:15:28,209
infeasible to back for it but you have

00:15:26,140 --> 00:15:30,819
to some kinda have it kind of keep it

00:15:28,209 --> 00:15:31,430
annotated that it's still there

00:15:30,819 --> 00:15:32,990
and

00:15:31,430 --> 00:15:34,310
that your management knows hey we're

00:15:32,990 --> 00:15:37,279
shipping this colonel it's got this bug

00:15:34,310 --> 00:15:38,990
in it but a lot of QA departments have

00:15:37,279 --> 00:15:41,000
this really weird notion that everything

00:15:38,990 --> 00:15:42,860
that all the lights have to be Green

00:15:41,000 --> 00:15:44,810
across the board before the ship which

00:15:42,860 --> 00:15:46,760
is completely unrealistic right there

00:15:44,810 --> 00:15:49,910
are known there are known bugs and you

00:15:46,760 --> 00:15:53,060
have to allow bugs to go into a won't

00:15:49,910 --> 00:15:55,070
fix state right an own won't fix state

00:15:53,060 --> 00:15:56,570
or you know but you have to keep testing

00:15:55,070 --> 00:15:59,660
them because you don't want it to anyway

00:15:56,570 --> 00:16:01,010
so I don't know if that answer your

00:15:59,660 --> 00:16:03,920
question but I think that a part of the

00:16:01,010 --> 00:16:07,070
solution is allowing as an industry we

00:16:03,920 --> 00:16:08,870
have to to allow tests that fail to

00:16:07,070 --> 00:16:10,760
still run on kernels that they fail on

00:16:08,870 --> 00:16:14,270
but you might want to be able to

00:16:10,760 --> 00:16:16,610
categorize them so that you know that's

00:16:14,270 --> 00:16:19,610
a known failure it's expected don't

00:16:16,610 --> 00:16:21,700
freak out you know whatever the

00:16:19,610 --> 00:16:28,100
appropriate response is for your QA

00:16:21,700 --> 00:16:30,290
policy yeah adding to the team if you

00:16:28,100 --> 00:16:33,080
look at LT being the case of test tip is

00:16:30,290 --> 00:16:36,350
pretty mature in terms of runtime test

00:16:33,080 --> 00:16:37,990
so you could have a kernel version check

00:16:36,350 --> 00:16:40,580
so it will find the current version and

00:16:37,990 --> 00:16:43,130
agree to take addition like to the run

00:16:40,580 --> 00:16:45,110
or skip and LTP do have a skip list

00:16:43,130 --> 00:16:46,970
where you can specify the test case name

00:16:45,110 --> 00:16:50,420
according to the test case name it could

00:16:46,970 --> 00:16:52,640
skip there are two ways to skip the

00:16:50,420 --> 00:16:55,310
things like one is at runtime one is

00:16:52,640 --> 00:16:56,720
like static wave if you look at the case

00:16:55,310 --> 00:16:58,550
of test it's not that much you read

00:16:56,720 --> 00:17:02,300
enough to do all this kind of a

00:16:58,550 --> 00:17:05,900
framework and do any runtime checks so

00:17:02,300 --> 00:17:07,400
if we get to that point probably that

00:17:05,900 --> 00:17:09,890
could be great as you know like we

00:17:07,400 --> 00:17:11,480
cannot book back put everything so if

00:17:09,890 --> 00:17:14,390
you look at the VP of three currently

00:17:11,480 --> 00:17:16,400
need VP of VP opening so there are test

00:17:14,390 --> 00:17:18,890
cases which I just generated are just

00:17:16,400 --> 00:17:20,870
created and they are tend to work on the

00:17:18,890 --> 00:17:22,880
tip of the kernel so if you just go to

00:17:20,870 --> 00:17:26,060
one

00:17:22,880 --> 00:17:27,890
like stable asses like this won't work

00:17:26,060 --> 00:17:31,880
on the old car that's a known thing if

00:17:27,890 --> 00:17:33,710
we have conducted multiple maintenance

00:17:31,880 --> 00:17:35,900
to back put those things but they say

00:17:33,710 --> 00:17:37,790
like it's a low priority for us so till

00:17:35,900 --> 00:17:40,130
they fix it then till they back put

00:17:37,790 --> 00:17:42,830
those things in that time it will be

00:17:40,130 --> 00:17:45,260
like a won't fix our in that state only

00:17:42,830 --> 00:17:46,850
so we cannot do much regarding the

00:17:45,260 --> 00:17:48,860
fixing it so currently we are just

00:17:46,850 --> 00:17:52,250
reporting the things we are not really

00:17:48,860 --> 00:17:54,910
spending concentrating on the back

00:17:52,250 --> 00:17:54,910
putting the things

00:17:59,850 --> 00:18:08,769
Sumire my understanding that are all the

00:18:04,389 --> 00:18:11,320
case had not was a I think that a case

00:18:08,769 --> 00:18:17,710
of just whining on there any plan Ares

00:18:11,320 --> 00:18:21,309
it to was a dangerous but they're the

00:18:17,710 --> 00:18:24,159
latest stable kana all the latest circle

00:18:21,309 --> 00:18:30,179
panels should be should pastor K self

00:18:24,159 --> 00:18:30,179
test because that older you know the

00:18:32,490 --> 00:18:39,940
yeah and also a crushing Connell test is

00:18:37,029 --> 00:18:43,899
was a that the different story

00:18:39,940 --> 00:18:46,360
I think yeah because that the data is

00:18:43,899 --> 00:18:49,990
there that test case was a test

00:18:46,360 --> 00:18:59,830
framework cannot treat Crabtree as a

00:18:49,990 --> 00:19:02,740
condom crashing but we are still we are

00:18:59,830 --> 00:19:04,450
not running if trace and after is just

00:19:02,740 --> 00:19:06,970
kiss that you have been maintaining on

00:19:04,450 --> 00:19:25,980
how 64 for some reason because it's been

00:19:06,970 --> 00:19:25,980
hanging and the maintainer doing

00:19:41,880 --> 00:19:47,970
[Music]

00:19:44,630 --> 00:19:51,690
if they're if you or that case have

00:19:47,970 --> 00:19:55,260
tests found bad and the depo to the

00:19:51,690 --> 00:19:58,670
maintainer fixing that apart in even in

00:19:55,260 --> 00:20:01,860
their older Connor F order stable canal

00:19:58,670 --> 00:20:07,620
was a doctor responsibility for the

00:20:01,860 --> 00:20:11,400
maintenance of the test case you know

00:20:07,620 --> 00:20:14,250
this framework this is a case of just

00:20:11,400 --> 00:20:16,260
problem and it's even new features that

00:20:14,250 --> 00:20:18,420
are in the kernel those tests that test

00:20:16,260 --> 00:20:21,120
those new features those tests fail and

00:20:18,420 --> 00:20:22,380
older kernels often instead of like they

00:20:21,120 --> 00:20:23,910
should automatically they should check

00:20:22,380 --> 00:20:25,500
to see if the feature if the kernel

00:20:23,910 --> 00:20:28,050
supports that feature and skip rather

00:20:25,500 --> 00:20:36,630
than just failing which is what actually

00:20:28,050 --> 00:20:39,510
happens in some cases I mean if there's

00:20:36,630 --> 00:20:41,160
a new feature you don't want the top

00:20:39,510 --> 00:20:42,510
layers of your software stack to depend

00:20:41,160 --> 00:20:44,730
on that feature and so if you actually

00:20:42,510 --> 00:20:47,910
create a dependency on some new feature

00:20:44,730 --> 00:20:51,420
like say the 64-bit time things now

00:20:47,910 --> 00:20:53,340
right you want to know one of the things

00:20:51,420 --> 00:20:54,930
that we want to use testing for is to

00:20:53,340 --> 00:20:57,780
kick our management into upgrading the

00:20:54,930 --> 00:20:59,700
kernels and so we don't you don't want

00:20:57,780 --> 00:21:01,320
to just not run the test because then

00:20:59,700 --> 00:21:03,420
they don't then it's like oh

00:21:01,320 --> 00:21:04,680
everything's green you know pad ship it

00:21:03,420 --> 00:21:07,920
it's like well no no no it's like you

00:21:04,680 --> 00:21:10,560
know we skipped all these tests that you

00:21:07,920 --> 00:21:11,820
know twenty year 2038 tests because we

00:21:10,560 --> 00:21:13,440
knew there they didn't even apply to

00:21:11,820 --> 00:21:16,620
this kernel but you still have the bugs

00:21:13,440 --> 00:21:21,030
so or missing features or however you

00:21:16,620 --> 00:21:23,910
want to do you think if you have in sub

00:21:21,030 --> 00:21:27,390
bugs which have been reported Kissel

00:21:23,910 --> 00:21:29,850
test mailing list and open mailing list

00:21:27,390 --> 00:21:31,950
so we have got really good replace from

00:21:29,850 --> 00:21:32,630
them saying that they are able to find

00:21:31,950 --> 00:21:34,549
out

00:21:32,630 --> 00:21:37,000
root cause of the problem it's a real

00:21:34,549 --> 00:21:39,529
candle crash and they are able to fix in

00:21:37,000 --> 00:22:52,610
according to them so it's really helpful

00:21:39,529 --> 00:22:55,759
and recently there is update we know it

00:22:52,610 --> 00:23:05,650
doesn't it goes to a cell first and not

00:22:55,759 --> 00:23:10,619
to lineage next yes thank you

00:23:05,650 --> 00:23:10,619

YouTube URL: https://www.youtube.com/watch?v=CHzFN1yh3Tk


