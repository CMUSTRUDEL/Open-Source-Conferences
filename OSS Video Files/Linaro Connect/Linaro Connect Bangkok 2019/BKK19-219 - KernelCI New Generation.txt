Title: BKK19-219 - KernelCI New Generation
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
KernelCI generates daily an average of two thousand Linux Kernel builds, submitted to several labs across planet to mainly check if system booting works correctly. Therefore tons of data are created and displayed on a frontend interface for further use. Current KernelCI requires significant technical effort changing visualizations, including builds and jobs listings. The KernelCI New Generation seeks to apply state-of-the-art data collection and data visualization tools as an alternative frontend to KernelCI. Our focus is on an instance of ElasticSearch, Logstash, and Kibana collecting and displaying live KernelCI data. All the tooling used to this project will be available.

Charles Daniel De Oliveira / Software Engineer Linaro
Software Engineer at Linaro, having several years in web world in Java, Python and PHP. Involved in open source development since 2014. Worked at NIST as software security researcher, specifically in static code analysis
Captions: 
	00:00:05,790 --> 00:00:13,020
hello can you guys hear okay I'm Charles

00:00:10,950 --> 00:00:15,840
I'm Charles we're here to present the

00:00:13,020 --> 00:00:17,100
the Curtis shinier generation and for

00:00:15,840 --> 00:00:18,900
those who thought that was like a whole

00:00:17,100 --> 00:00:21,449
brand new currency I it's not it it's

00:00:18,900 --> 00:00:25,830
just the front end hope not to force

00:00:21,449 --> 00:00:27,750
anyone with that and so you're just

00:00:25,830 --> 00:00:30,740
gonna go through a quick overview of

00:00:27,750 --> 00:00:34,230
what Curtis I'd this so Curtis I'd this

00:00:30,740 --> 00:00:36,960
watch some selected trees like the

00:00:34,230 --> 00:00:39,960
stable Linux 5-0 or some some of the

00:00:36,960 --> 00:00:42,390
trees that people usually request for

00:00:39,960 --> 00:00:44,699
the current set community and every two

00:00:42,390 --> 00:00:46,170
hours it the the current site box just

00:00:44,699 --> 00:00:48,510
go there try to see if there's anything

00:00:46,170 --> 00:00:50,489
new and if there are some new updates

00:00:48,510 --> 00:00:52,579
it's just gonna be like look through the

00:00:50,489 --> 00:00:56,789
build matrix like building the kernel

00:00:52,579 --> 00:00:57,809
sharing I mean I'm using different

00:00:56,789 --> 00:00:59,100
defconn fixes in different

00:00:57,809 --> 00:01:01,559
configurations and different

00:00:59,100 --> 00:01:03,870
architectures and compilers because a

00:01:01,559 --> 00:01:07,050
current site now does clang and GCC both

00:01:03,870 --> 00:01:09,150
this is seven or eight and once cursor

00:01:07,050 --> 00:01:10,140
has all the data in it's just gonna try

00:01:09,150 --> 00:01:12,240
to boot

00:01:10,140 --> 00:01:15,390
whatever was built in two different

00:01:12,240 --> 00:01:17,850
Korean labs and once we've got those

00:01:15,390 --> 00:01:19,830
boot results Curtis I sent out emails

00:01:17,850 --> 00:01:23,010
about reports that things that haven't

00:01:19,830 --> 00:01:24,540
broken down and it does also by sections

00:01:23,010 --> 00:01:27,630
and tests they're coming to be new stuff

00:01:24,540 --> 00:01:28,920
and but the front end front ends

00:01:27,630 --> 00:01:30,510
actually issue of the kind of shy and

00:01:28,920 --> 00:01:33,480
I'm gonna go through it in a minute

00:01:30,510 --> 00:01:39,300
and the few numbers here courtesy I

00:01:33,480 --> 00:01:42,120
every two weeks some hours there's about

00:01:39,300 --> 00:01:44,400
four hundred forty thousand builds every

00:01:42,120 --> 00:01:46,200
two weeks so it's like some insane

00:01:44,400 --> 00:01:48,420
amount of builds that happened like

00:01:46,200 --> 00:01:50,610
between the builders and currency I and

00:01:48,420 --> 00:01:53,100
but none of the builds I actually boot

00:01:50,610 --> 00:01:54,960
it so it's just like because I don't

00:01:53,100 --> 00:01:57,270
think there's enough power to actually

00:01:54,960 --> 00:02:01,350
do it all the builds or maybe not a lot

00:01:57,270 --> 00:02:03,300
of range of architectures and the focus

00:02:01,350 --> 00:02:05,430
of this project is actually trick the

00:02:03,300 --> 00:02:08,069
the front end because I've done myself

00:02:05,430 --> 00:02:08,580
some some work with the current site

00:02:08,069 --> 00:02:11,160
front end

00:02:08,580 --> 00:02:12,080
adding some some features in the build

00:02:11,160 --> 00:02:16,200
and the boots

00:02:12,080 --> 00:02:17,609
table I thought it was a little bit

00:02:16,200 --> 00:02:18,850
complicated because of the amount of

00:02:17,609 --> 00:02:21,370
JavaScript to

00:02:18,850 --> 00:02:22,810
as their so if someone wants to build

00:02:21,370 --> 00:02:25,660
different visualizations or different

00:02:22,810 --> 00:02:27,790
charts there was going to be a very

00:02:25,660 --> 00:02:29,560
challenging task and I say if you wanna

00:02:27,790 --> 00:02:31,420
add some quick things to visualize some

00:02:29,560 --> 00:02:33,730
data I'm gonna have to go through like

00:02:31,420 --> 00:02:35,170
maybe weeks of work and then maybe

00:02:33,730 --> 00:02:36,460
that's not what you wanted to see and

00:02:35,170 --> 00:02:37,660
maybe there's someone wants to see

00:02:36,460 --> 00:02:41,890
something else and that

00:02:37,660 --> 00:02:44,020
individualization will be tricky so we

00:02:41,890 --> 00:02:46,510
came up with the new research project

00:02:44,020 --> 00:02:49,750
and we wanted to show currency data

00:02:46,510 --> 00:02:52,570
which is very valuable and we came up

00:02:49,750 --> 00:02:55,870
with current dialog aggregators and data

00:02:52,570 --> 00:02:57,460
visualizations and the the main tool

00:02:55,870 --> 00:02:59,770
that we came up with was ELQ

00:02:57,460 --> 00:03:03,520
just like this little item of there and

00:02:59,770 --> 00:03:06,070
he looks a little lost just like I am so

00:03:03,520 --> 00:03:09,130
ELQ is based off the elastic search log

00:03:06,070 --> 00:03:11,050
stash and key Bonham and log stash

00:03:09,130 --> 00:03:13,090
actually collects all the logs are out

00:03:11,050 --> 00:03:15,640
there basically of everything that comes

00:03:13,090 --> 00:03:18,340
from currency builders and currency labs

00:03:15,640 --> 00:03:21,010
and elasticsearch is what is being used

00:03:18,340 --> 00:03:23,200
to actually store the data the elastic

00:03:21,010 --> 00:03:26,020
search is not a sauna is a no SQL

00:03:23,200 --> 00:03:28,090
database so basically storage JSON

00:03:26,020 --> 00:03:29,560
objects and ikebana is actually what you

00:03:28,090 --> 00:03:33,640
see is why all the dashboards and the

00:03:29,560 --> 00:03:35,680
visualization that you see and just

00:03:33,640 --> 00:03:38,050
going back a little bit this is the how

00:03:35,680 --> 00:03:39,880
currency works this is the the current

00:03:38,050 --> 00:03:44,350
workflow so we have the Builder two

00:03:39,880 --> 00:03:45,670
bidders on the the left side here what's

00:03:44,350 --> 00:03:47,530
these beauties they're done with the

00:03:45,670 --> 00:03:48,940
build like they build the stuff and they

00:03:47,530 --> 00:03:52,060
get the current time in which the the

00:03:48,940 --> 00:03:55,240
modules the GTB and they send these data

00:03:52,060 --> 00:03:58,180
to currency a currency wants with the

00:03:55,240 --> 00:04:00,990
beaut data on it starts sending out lava

00:03:58,180 --> 00:04:03,160
jobs I mean not lava jobs good jobs and

00:04:00,990 --> 00:04:06,730
with the boot jobs you can also send

00:04:03,160 --> 00:04:08,710
some test jobs to all the lava to all

00:04:06,730 --> 00:04:10,090
the current shell labs and once the

00:04:08,710 --> 00:04:11,740
current site labs they were done with

00:04:10,090 --> 00:04:13,870
the results it sends back to currency I

00:04:11,740 --> 00:04:17,109
and currency I displays that in the in

00:04:13,870 --> 00:04:20,410
the front end so what we want to add

00:04:17,109 --> 00:04:22,660
here is it's an extra step because we

00:04:20,410 --> 00:04:24,100
don't want to replace a currency at all

00:04:22,660 --> 00:04:26,440
we just want to add another an

00:04:24,100 --> 00:04:30,220
alternative way to visualize the data

00:04:26,440 --> 00:04:32,320
using alex tack and basically here we

00:04:30,220 --> 00:04:34,180
are now going to change anything that

00:04:32,320 --> 00:04:36,790
happens today in currency I we're just

00:04:34,180 --> 00:04:38,800
going to duplicate the data so instead

00:04:36,790 --> 00:04:40,900
of having only the the builder Jason

00:04:38,800 --> 00:04:43,390
sent to Colonel sky if you're short

00:04:40,900 --> 00:04:45,580
you're gonna have a actually fork send

00:04:43,390 --> 00:04:48,310
it to our our infrastructure and also

00:04:45,580 --> 00:04:50,590
that we're gonna have the lava and the

00:04:48,310 --> 00:04:52,600
Buddha JSON files because current site

00:04:50,590 --> 00:04:55,030
has many labs most of the labs are lava

00:04:52,600 --> 00:04:56,620
labs so when a lava I've finished the

00:04:55,030 --> 00:04:59,410
results lavas just gonna call the

00:04:56,620 --> 00:05:02,110
callback URL passing all the lava all

00:04:59,410 --> 00:05:03,490
the lava data but there are some lava

00:05:02,110 --> 00:05:05,380
lone lava labs

00:05:03,490 --> 00:05:07,720
I think it's basically Bailey Bruce

00:05:05,380 --> 00:05:12,520
shadow where I think it's Calvin's

00:05:07,720 --> 00:05:15,780
running some some other boards there so

00:05:12,520 --> 00:05:19,690
yeah our perch was basically using

00:05:15,780 --> 00:05:21,100
things that I've said already so we have

00:05:19,690 --> 00:05:23,620
the log stash which is the data

00:05:21,100 --> 00:05:25,690
collector and with log stash we had to

00:05:23,620 --> 00:05:27,850
work to work it through because I wasn't

00:05:25,690 --> 00:05:31,660
new to so we have to figure out why

00:05:27,850 --> 00:05:35,110
plants work and I lost a lot of time

00:05:31,660 --> 00:05:37,210
with that because log stash is a it's a

00:05:35,110 --> 00:05:39,640
Java program so Java program needs to

00:05:37,210 --> 00:05:42,940
restart the JVM all the time that's

00:05:39,640 --> 00:05:45,220
painful Tao and the elasticsearch

00:05:42,940 --> 00:05:46,960
approach we didn't know how

00:05:45,220 --> 00:05:48,460
elasticsearch used to work properly and

00:05:46,960 --> 00:05:50,830
we thought it was just gonna be just

00:05:48,460 --> 00:05:53,590
like regular database but it turned out

00:05:50,830 --> 00:05:56,710
that like a regular database and also it

00:05:53,590 --> 00:06:00,400
does it doesn't do data in the way we

00:05:56,710 --> 00:06:03,700
thought I did and Cubana is like a great

00:06:00,400 --> 00:06:06,790
tool and it does like to do charts and

00:06:03,700 --> 00:06:09,250
dashboards as with this wise wig tech I

00:06:06,790 --> 00:06:10,720
mean type of philosophy so basically

00:06:09,250 --> 00:06:13,270
build the dashboards right off the bat

00:06:10,720 --> 00:06:15,550
so he can build pie charts can build bar

00:06:13,270 --> 00:06:19,570
charts we can build heat maps you can do

00:06:15,550 --> 00:06:21,430
anything one and it's very easy to do

00:06:19,570 --> 00:06:22,900
it's straight out of the box it's just

00:06:21,430 --> 00:06:24,280
downloaded and you're running just point

00:06:22,900 --> 00:06:26,860
to the last search it says that you have

00:06:24,280 --> 00:06:29,140
yes to the last search instance and

00:06:26,860 --> 00:06:31,330
there's a lot of plugins there too so

00:06:29,140 --> 00:06:31,840
it's easy to if you want to write up

00:06:31,330 --> 00:06:36,130
another

00:06:31,840 --> 00:06:38,110
visualizations quite easy to do this is

00:06:36,130 --> 00:06:40,540
how we got blocks - working for our

00:06:38,110 --> 00:06:42,550
instance basically there are three main

00:06:40,540 --> 00:06:44,410
documents going back and forth in the

00:06:42,550 --> 00:06:46,240
last in the current site infrastructure

00:06:44,410 --> 00:06:48,610
there is a bill JSON file

00:06:46,240 --> 00:06:50,530
which is created when the buter actually

00:06:48,610 --> 00:06:52,210
just completed a compilation of a

00:06:50,530 --> 00:06:54,370
colonel and that one is actually

00:06:52,210 --> 00:06:56,830
translated straight into another in the

00:06:54,370 --> 00:06:58,630
last search index but then we have the

00:06:56,830 --> 00:07:02,199
boot JSON which is a file that's

00:06:58,630 --> 00:07:05,199
generated by the by the novel Labs in

00:07:02,199 --> 00:07:08,560
Curtis I which is basically a liability

00:07:05,199 --> 00:07:10,509
Otto but for the rest of the end of the

00:07:08,560 --> 00:07:13,900
data that's coming from Curtis I they

00:07:10,509 --> 00:07:15,849
come from and the format lab of a lava

00:07:13,900 --> 00:07:19,630
file and there's a lot of file contains

00:07:15,849 --> 00:07:22,860
all the test results that a lava job

00:07:19,630 --> 00:07:25,240
actually ran all the log lines and

00:07:22,860 --> 00:07:26,830
without that information can we are able

00:07:25,240 --> 00:07:30,009
to build up three different indexes

00:07:26,830 --> 00:07:32,860
which is a boot index the test index and

00:07:30,009 --> 00:07:34,810
the log so the log I mean stories all

00:07:32,860 --> 00:07:37,930
every single log line has a separate

00:07:34,810 --> 00:07:40,479
object and the test stores every single

00:07:37,930 --> 00:07:45,130
test test that was running to the lava

00:07:40,479 --> 00:07:46,659
job into a separate document - so this

00:07:45,130 --> 00:07:48,099
is the pipeline means if you guys are

00:07:46,659 --> 00:07:51,509
interesting to see the pipeline you just

00:07:48,099 --> 00:07:55,389
ask me later it's not very fun to see

00:07:51,509 --> 00:07:56,710
yes so that last search approach we took

00:07:55,389 --> 00:07:58,780
a lot of time to figure out how to

00:07:56,710 --> 00:08:00,430
properly index the data so we went back

00:07:58,780 --> 00:08:02,710
and forth we thought at first was a

00:08:00,430 --> 00:08:04,330
database so we just say hey let's just

00:08:02,710 --> 00:08:06,340
store everything there and you're just

00:08:04,330 --> 00:08:07,870
gonna make queries after that and then

00:08:06,340 --> 00:08:09,400
we look it up at the community and the

00:08:07,870 --> 00:08:11,320
community said oh that's not good

00:08:09,400 --> 00:08:13,000
you should not like think of it as a

00:08:11,320 --> 00:08:15,340
date as a regular database so you should

00:08:13,000 --> 00:08:16,960
normalize the data and it should

00:08:15,340 --> 00:08:18,880
duplicate as much as you can to make

00:08:16,960 --> 00:08:21,789
things fast because log session of like

00:08:18,880 --> 00:08:23,409
it's not good in aggregating multiple

00:08:21,789 --> 00:08:28,750
documents it's good to in fighting every

00:08:23,409 --> 00:08:31,330
separate document on itself and for the

00:08:28,750 --> 00:08:33,610
logs to be searchable we needed to

00:08:31,330 --> 00:08:36,820
separate each slugline of the lavalla of

00:08:33,610 --> 00:08:40,149
a lava job into a separate document into

00:08:36,820 --> 00:08:43,630
the elasticsearch and that made data

00:08:40,149 --> 00:08:46,420
explain like 10 times because before we

00:08:43,630 --> 00:08:48,490
used to have every single level file

00:08:46,420 --> 00:08:51,130
which was like I don't know 1 megabyte

00:08:48,490 --> 00:08:54,400
wide and this lava file got actually

00:08:51,130 --> 00:08:55,570
like up to 100 megabytes only 1 because

00:08:54,400 --> 00:08:59,230
the logs fire they need to be duplicated

00:08:55,570 --> 00:09:01,840
a lot and also we everyday the law

00:08:59,230 --> 00:09:04,360
- runs collecting the data we're gonna

00:09:01,840 --> 00:09:06,370
create a one daily index for all the

00:09:04,360 --> 00:09:08,650
indexes are out there because it makes

00:09:06,370 --> 00:09:10,630
easy for daily deletion data and data

00:09:08,650 --> 00:09:12,760
retention because just like current side

00:09:10,630 --> 00:09:14,470
does or stores the data every 14 days we

00:09:12,760 --> 00:09:17,530
tend to keep the data only for 14 days

00:09:14,470 --> 00:09:21,070
as well and that also makes things

00:09:17,530 --> 00:09:23,260
easier to be searchable this is it this

00:09:21,070 --> 00:09:25,060
is how elasticsearch output looks like

00:09:23,260 --> 00:09:26,680
this is the basic thing like we have the

00:09:25,060 --> 00:09:30,490
boot index and the boot is made of the

00:09:26,680 --> 00:09:34,360
deer Mountain day and then on the most

00:09:30,490 --> 00:09:36,370
right side is actually size of the the

00:09:34,360 --> 00:09:38,980
index so you can see that the logs and

00:09:36,370 --> 00:09:42,990
the tasks are the larger index and the

00:09:38,980 --> 00:09:47,410
builds and the boots are very very tiny

00:09:42,990 --> 00:09:49,060
yes Gabanna the Cabana was also tricky

00:09:47,410 --> 00:09:52,000
to do because we didn't know at all

00:09:49,060 --> 00:09:54,820
about Cabana and you should actually try

00:09:52,000 --> 00:09:55,840
to go on Stack Overflow you're gonna see

00:09:54,820 --> 00:09:57,760
there's not gonna be a lot of

00:09:55,840 --> 00:09:59,740
information there so you have to go

00:09:57,760 --> 00:10:01,300
actually into the elastic forums and

00:09:59,740 --> 00:10:04,090
then you have to ask the community how

00:10:01,300 --> 00:10:06,250
to build up stuff and one thing that we

00:10:04,090 --> 00:10:08,350
notice is Cabana is a perfect mirror

00:10:06,250 --> 00:10:09,970
with the elastic search so if you can do

00:10:08,350 --> 00:10:11,620
something like search you probably can

00:10:09,970 --> 00:10:12,880
do this in Cabana so if there's

00:10:11,620 --> 00:10:14,830
something you cannot do you're not

00:10:12,880 --> 00:10:18,190
search you can't just do it I think you

00:10:14,830 --> 00:10:20,620
might as well like we try to to use

00:10:18,190 --> 00:10:22,480
cross-referencing let's say you have

00:10:20,620 --> 00:10:25,600
these many log lines and you have these

00:10:22,480 --> 00:10:28,750
builds this boot so you can just like

00:10:25,600 --> 00:10:30,910
store the logs and have an ID points

00:10:28,750 --> 00:10:32,890
into the bill to the boot so you have to

00:10:30,910 --> 00:10:35,200
basically copy everything of the common

00:10:32,890 --> 00:10:37,120
data of the the boot just like the tree

00:10:35,200 --> 00:10:39,490
the the gear describe the gift version

00:10:37,120 --> 00:10:41,710
and then have to duplicate out this data

00:10:39,490 --> 00:10:46,420
into elasticsearch in order to make this

00:10:41,710 --> 00:10:48,910
visualizable in qivana and also Cubana

00:10:46,420 --> 00:10:52,090
as other data visualization tools like

00:10:48,910 --> 00:10:53,950
core fauna and some other ones that i've

00:10:52,090 --> 00:10:55,900
just forgot the name they are very good

00:10:53,950 --> 00:10:59,080
to show the static data so they are not

00:10:55,900 --> 00:11:01,710
very good to show and create dynamic

00:10:59,080 --> 00:11:04,570
dashboards but Cabana has a really good

00:11:01,710 --> 00:11:06,250
really cool resource that's called

00:11:04,570 --> 00:11:09,130
descriptive field that you can actually

00:11:06,250 --> 00:11:11,620
build dynamic links and with these

00:11:09,130 --> 00:11:12,540
dynamic links we can change the URL and

00:11:11,620 --> 00:11:15,150
point to another -

00:11:12,540 --> 00:11:20,040
passing like pewters using the URL just

00:11:15,150 --> 00:11:22,350
kind of cool to demo time so I was

00:11:20,040 --> 00:11:24,570
supposed to show the devil actually my

00:11:22,350 --> 00:11:27,270
laptop but it turns out my HDMI port is

00:11:24,570 --> 00:11:31,370
not working so likely I thought of this

00:11:27,270 --> 00:11:33,990
ahead and I took some screenshots yeah

00:11:31,370 --> 00:11:36,900
this is how it looks like this is the

00:11:33,990 --> 00:11:38,820
first the home folder the home - world I

00:11:36,900 --> 00:11:41,970
say so you're gonna see a very high

00:11:38,820 --> 00:11:42,420
level there which have like the number

00:11:41,970 --> 00:11:44,700
of boots

00:11:42,420 --> 00:11:47,430
and this data is being collected on the

00:11:44,700 --> 00:11:51,540
past seven days of of course right there

00:11:47,430 --> 00:11:55,470
and you can see there's about 18,000

00:11:51,540 --> 00:11:57,510
boots for top forty thousand thirty

00:11:55,470 --> 00:11:59,070
thousand builds two hundred something

00:11:57,510 --> 00:12:01,020
thousand thirteen million lines of

00:11:59,070 --> 00:12:02,580
blocks you can see that the the lines of

00:12:01,020 --> 00:12:05,750
logs are expressive because if you can

00:12:02,580 --> 00:12:08,580
imagine like every single log line in

00:12:05,750 --> 00:12:10,740
every single lava job is being indexed

00:12:08,580 --> 00:12:12,840
so that allows you to go there and

00:12:10,740 --> 00:12:16,440
search just like you do a regular Google

00:12:12,840 --> 00:12:19,200
search but the way we've done you can

00:12:16,440 --> 00:12:20,940
actually search for any for every single

00:12:19,200 --> 00:12:23,790
log line and you can actually be to

00:12:20,940 --> 00:12:25,380
retrieve the bill and the boot and all

00:12:23,790 --> 00:12:27,980
the tests are actually generated that

00:12:25,380 --> 00:12:30,600
one which is which which was pretty cool

00:12:27,980 --> 00:12:33,210
down here we have some charts those are

00:12:30,600 --> 00:12:35,250
very overview charts I don't know if you

00:12:33,210 --> 00:12:38,250
guys can read but this shows the number

00:12:35,250 --> 00:12:40,560
of builds per tree so I mean this table

00:12:38,250 --> 00:12:42,240
RC is the one that with the most builds

00:12:40,560 --> 00:12:44,670
and then you have Android and in the

00:12:42,240 --> 00:12:47,250
next and then that next and you're on

00:12:44,670 --> 00:12:49,290
the right you can see that the number of

00:12:47,250 --> 00:12:51,870
boots per lab so lab believe real lab

00:12:49,290 --> 00:12:54,030
collaborative like leading the all the

00:12:51,870 --> 00:12:55,530
boots so this is kind of cool you can

00:12:54,030 --> 00:12:57,630
have this I can retrieve this type of

00:12:55,530 --> 00:12:59,280
information for pairs yeah but having

00:12:57,630 --> 00:13:02,760
these dashboards like straight off the

00:12:59,280 --> 00:13:05,550
bat it's kind of cool down you can see

00:13:02,760 --> 00:13:07,920
the the average build results so most

00:13:05,550 --> 00:13:10,770
likely of I mean it's a good thing that

00:13:07,920 --> 00:13:15,570
most builds pass but only 3% of the

00:13:10,770 --> 00:13:17,550
builds of the 18 40,000 builds they they

00:13:15,570 --> 00:13:19,470
fail so that's a cool information to

00:13:17,550 --> 00:13:21,350
have right in there and then there's a

00:13:19,470 --> 00:13:23,730
boot results

00:13:21,350 --> 00:13:25,620
so the boot result is interesting

00:13:23,730 --> 00:13:26,220
because you can see that most of it

00:13:25,620 --> 00:13:28,350
passed

00:13:26,220 --> 00:13:30,690
some of them fail and a little bit of

00:13:28,350 --> 00:13:33,780
them they were offline it's offline feud

00:13:30,690 --> 00:13:35,880
it's actually based off believers shadow

00:13:33,780 --> 00:13:38,100
sometimes they're the board's are

00:13:35,880 --> 00:13:39,600
they're offline and when you try to run

00:13:38,100 --> 00:13:41,610
the boot in this on the board that's

00:13:39,600 --> 00:13:42,960
offline they just retrieve the I mean it

00:13:41,610 --> 00:13:49,320
doesn't fail it just the poor ones

00:13:42,960 --> 00:13:50,850
offline ok so this is initial dashboard

00:13:49,320 --> 00:13:54,060
when you see when you're actually trying

00:13:50,850 --> 00:13:56,400
to visualize the the boots they happen

00:13:54,060 --> 00:13:59,010
the current sky so here we have the

00:13:56,400 --> 00:14:01,380
futures I mean if if I had my computer

00:13:59,010 --> 00:14:03,000
on it could just click on the tree field

00:14:01,380 --> 00:14:06,240
there right there and you can type the

00:14:03,000 --> 00:14:07,500
tree that you want to search so the the

00:14:06,240 --> 00:14:10,170
advantage of having this visualization

00:14:07,500 --> 00:14:11,880
that you can have many trees if you want

00:14:10,170 --> 00:14:13,790
a search you're gonna compare the main

00:14:11,880 --> 00:14:16,740
line against the stable or see or maybe

00:14:13,790 --> 00:14:19,380
stable SPI if stable sound you can just

00:14:16,740 --> 00:14:22,050
go there and type it there and this

00:14:19,380 --> 00:14:24,420
works just basically as futures so just

00:14:22,050 --> 00:14:27,210
go there type in the kernel h1 the

00:14:24,420 --> 00:14:28,890
architecture and there we have it then

00:14:27,210 --> 00:14:29,250
the table below is just going to get

00:14:28,890 --> 00:14:31,020
fitter

00:14:29,250 --> 00:14:33,810
if you run out so you can just see stuff

00:14:31,020 --> 00:14:36,420
like in real time or you can just click

00:14:33,810 --> 00:14:38,490
this pie chart because now I cannot

00:14:36,420 --> 00:14:41,280
click but if you just click like the

00:14:38,490 --> 00:14:42,900
fail portion of the of the chart you are

00:14:41,280 --> 00:14:45,090
only going to see the failed boots and

00:14:42,900 --> 00:14:47,210
once you got a fail boot you're gonna

00:14:45,090 --> 00:14:50,850
see there's a the compare column here

00:14:47,210 --> 00:14:52,170
yeah I think it's here yeah so you can

00:14:50,850 --> 00:14:54,270
click there and then you're going to be

00:14:52,170 --> 00:14:57,690
redirected to the other boards with the

00:14:54,270 --> 00:14:59,580
same boot that had similar result so in

00:14:57,690 --> 00:15:03,540
that case I have no idea which one I

00:14:59,580 --> 00:15:05,730
clicked but you can see that once you

00:15:03,540 --> 00:15:07,620
have the boot you can click the the

00:15:05,730 --> 00:15:11,790
column right there and you can see the

00:15:07,620 --> 00:15:14,610
they actually build that was responsible

00:15:11,790 --> 00:15:17,760
for that built for the boot so boot and

00:15:14,610 --> 00:15:20,310
build comes outside and then for that

00:15:17,760 --> 00:15:22,350
build you can see how many times the

00:15:20,310 --> 00:15:25,560
bill was actually building so we see

00:15:22,350 --> 00:15:27,390
that liability shadow did a good job

00:15:25,560 --> 00:15:29,760
in the part of pine and then in the bone

00:15:27,390 --> 00:15:31,560
dark and then our matter and then the

00:15:29,760 --> 00:15:33,600
lab collaborate did also in this many

00:15:31,560 --> 00:15:36,750
boards and then you can see the results

00:15:33,600 --> 00:15:37,529
and I finally I personally find this

00:15:36,750 --> 00:15:40,920
very useful

00:15:37,529 --> 00:15:42,749
because you can no I mean all in how the

00:15:40,920 --> 00:15:45,360
build performed across all the boards

00:15:42,749 --> 00:15:48,600
and which is kind of cool and if you

00:15:45,360 --> 00:15:50,310
click the log lines here I'm sorry I

00:15:48,600 --> 00:15:52,769
wish I really you think I've had this

00:15:50,310 --> 00:15:55,139
online so when you click the log line

00:15:52,769 --> 00:15:57,899
you actually you're redirected to the

00:15:55,139 --> 00:16:00,420
lab to the lava link where the lava job

00:15:57,899 --> 00:16:03,600
was actually executed so lab believer

00:16:00,420 --> 00:16:05,309
CRO is a he's on no lava lab so that

00:16:03,600 --> 00:16:07,920
link just not gonna work

00:16:05,309 --> 00:16:08,699
but if you click this one here like this

00:16:07,920 --> 00:16:11,189
one collaborate

00:16:08,699 --> 00:16:13,740
just gonna be redirected to the lava job

00:16:11,189 --> 00:16:20,610
they deliberated that the boot and then

00:16:13,740 --> 00:16:22,709
you can see all the logs there okay so I

00:16:20,610 --> 00:16:25,259
show you the showed you this this is the

00:16:22,709 --> 00:16:27,360
boot visualization and this is the boot

00:16:25,259 --> 00:16:30,779
comparison and this is the test

00:16:27,360 --> 00:16:33,149
visualization again you can see that in

00:16:30,779 --> 00:16:35,189
the boot visualization I put the tree

00:16:33,149 --> 00:16:36,569
the branch the kernel the Deaf config

00:16:35,189 --> 00:16:38,610
and all there are the variants of that

00:16:36,569 --> 00:16:40,019
boot but I didn't want to do the same

00:16:38,610 --> 00:16:44,069
dissing the test because there was going

00:16:40,019 --> 00:16:45,959
to be like a lot of information and you

00:16:44,069 --> 00:16:47,730
can filter that information using the

00:16:45,959 --> 00:16:50,339
filters here on the left so you can

00:16:47,730 --> 00:16:52,319
select the tree your branch your kernel

00:16:50,339 --> 00:16:54,870
your def config and you can pick as many

00:16:52,319 --> 00:16:56,819
as you want so every after you picked

00:16:54,870 --> 00:16:58,949
your filters the tables just gonna show

00:16:56,819 --> 00:17:01,649
everything that you want and the number

00:16:58,949 --> 00:17:04,020
on the top right side just gonna also

00:17:01,649 --> 00:17:07,319
show all the number of tests according

00:17:04,020 --> 00:17:09,240
to your future and differently from the

00:17:07,319 --> 00:17:11,970
boot you also have the tests we did in

00:17:09,240 --> 00:17:14,159
the testing so if you're only interested

00:17:11,970 --> 00:17:16,439
in having no lava the test you can just

00:17:14,159 --> 00:17:18,419
go there and select they're the only

00:17:16,439 --> 00:17:20,610
interests in this specific task name you

00:17:18,419 --> 00:17:23,850
can just go ahead and click there which

00:17:20,610 --> 00:17:25,589
is kind of cool and here just basically

00:17:23,850 --> 00:17:27,780
have a listing of all the tests that

00:17:25,589 --> 00:17:30,480
were executing in every single lab for

00:17:27,780 --> 00:17:33,090
all the boots so if you want to see all

00:17:30,480 --> 00:17:36,870
the logs for this specific test let's

00:17:33,090 --> 00:17:39,419
say the the first one here which which

00:17:36,870 --> 00:17:41,549
was executing lab collabora that past

00:17:39,419 --> 00:17:43,260
you can just click the view log so

00:17:41,549 --> 00:17:45,750
you're gonna be again redirected to the

00:17:43,260 --> 00:17:47,220
lab collaborator website where there's a

00:17:45,750 --> 00:17:51,210
lava job there it can just view the

00:17:47,220 --> 00:17:54,210
whole log or you can click other boards

00:17:51,210 --> 00:17:55,590
we're oh no that didn't work yeah so you

00:17:54,210 --> 00:17:57,600
can click other boards where you can

00:17:55,590 --> 00:18:00,030
just get the same visualization here so

00:17:57,600 --> 00:18:02,310
you can see the same test being run in

00:18:00,030 --> 00:18:04,710
other boards so you kind of make a

00:18:02,310 --> 00:18:09,060
comparison if that test has passed or

00:18:04,710 --> 00:18:12,600
fail in other different boards and here

00:18:09,060 --> 00:18:13,770
the best for the end this one as I said

00:18:12,600 --> 00:18:16,640
in the in the beginning of the

00:18:13,770 --> 00:18:19,860
presentation it's a way that you can get

00:18:16,640 --> 00:18:22,950
logs searchable just like a Google

00:18:19,860 --> 00:18:24,540
regular Google search so you can see on

00:18:22,950 --> 00:18:28,110
the top of the screen that you there's

00:18:24,540 --> 00:18:30,810
the futures box over there and that's as

00:18:28,110 --> 00:18:34,140
well as a very simplest simplistic

00:18:30,810 --> 00:18:36,480
syntax where can type in your string the

00:18:34,140 --> 00:18:38,280
string search and Cubana is just gonna

00:18:36,480 --> 00:18:39,690
go ahead and search in the last search

00:18:38,280 --> 00:18:41,250
and just gonna bring the results to you

00:18:39,690 --> 00:18:43,860
highlight it with the string that you're

00:18:41,250 --> 00:18:45,240
searching so that makes that makes it

00:18:43,860 --> 00:18:47,220
kind of easy for you to search anything

00:18:45,240 --> 00:18:49,980
that you want and everything any

00:18:47,220 --> 00:18:51,750
specific or making or maybe like a

00:18:49,980 --> 00:18:53,820
specific log line they only you know and

00:18:51,750 --> 00:18:55,590
you're trying to find like where it

00:18:53,820 --> 00:18:57,210
booted and if you didn't in different

00:18:55,590 --> 00:19:00,180
labs you can just go here and type it

00:18:57,210 --> 00:19:02,550
and when you get a result you can click

00:19:00,180 --> 00:19:04,890
the view boot where you can just go here

00:19:02,550 --> 00:19:08,490
and get like a similar screen like this

00:19:04,890 --> 00:19:11,220
one so I found it useful too because you

00:19:08,490 --> 00:19:13,050
can search and like get the link and

00:19:11,220 --> 00:19:14,640
once you get the link of the boot you

00:19:13,050 --> 00:19:16,200
can get the list of all the tests and

00:19:14,640 --> 00:19:19,290
once you get a list of all the tests I

00:19:16,200 --> 00:19:22,320
mean feel free to do it and also I mean

00:19:19,290 --> 00:19:23,820
we because I'm not a kernel developer so

00:19:22,320 --> 00:19:26,160
I don't know which other visualizations

00:19:23,820 --> 00:19:28,470
are very good for developers so if you

00:19:26,160 --> 00:19:30,870
guys are can think of something else

00:19:28,470 --> 00:19:33,900
just let me know and we can work out

00:19:30,870 --> 00:19:35,700
some more ok yeah

00:19:33,900 --> 00:19:38,130
so all these screens here that were very

00:19:35,700 --> 00:19:40,800
I mean at least for me they look pretty

00:19:38,130 --> 00:19:43,440
but it took some time for us to get to

00:19:40,800 --> 00:19:46,950
that result and one of the main things

00:19:43,440 --> 00:19:49,560
that kept us for a while was the do -

00:19:46,950 --> 00:19:50,880
locks - locks - was taking over like 10

00:19:49,560 --> 00:19:53,250
gigabytes of RAM just for like one

00:19:50,880 --> 00:19:55,110
single document and we took some time to

00:19:53,250 --> 00:19:57,870
understand that and it turns out that

00:19:55,110 --> 00:20:00,780
locks - does some the pipeline of locks

00:19:57,870 --> 00:20:02,780
- is kind of complex so if I mean the

00:20:00,780 --> 00:20:04,559
documents that you actually dealing with

00:20:02,780 --> 00:20:06,389
depending on the operation of

00:20:04,559 --> 00:20:08,519
they get multiplied thousands of times

00:20:06,389 --> 00:20:10,649
and that was taking a lot of memory so

00:20:08,519 --> 00:20:12,749
it was like impossible for one document

00:20:10,649 --> 00:20:15,090
locks are taking over ten gigabytes of

00:20:12,749 --> 00:20:17,460
RAM that wasn't scalable at all so we've

00:20:15,090 --> 00:20:18,840
changed that and also log stash is very

00:20:17,460 --> 00:20:21,389
good too by the section time of

00:20:18,840 --> 00:20:23,399
restarting so because there's no hot how

00:20:21,389 --> 00:20:24,990
to reload so every time we change the

00:20:23,399 --> 00:20:26,940
pipeline and have to restart a log stash

00:20:24,990 --> 00:20:30,179
and because log stash is a Java so you

00:20:26,940 --> 00:20:32,340
have to start JVM anyway and the syntax

00:20:30,179 --> 00:20:34,350
is it's it has its own syntax so it's

00:20:32,340 --> 00:20:36,059
not something there's none for loops

00:20:34,350 --> 00:20:38,879
there's no else there's no switch it's

00:20:36,059 --> 00:20:41,460
just like these basic syntax so but you

00:20:38,879 --> 00:20:43,470
can work around it and the lesson sure

00:20:41,460 --> 00:20:45,899
lesyk search for item mentioned the race

00:20:43,470 --> 00:20:47,970
are not the way we thought of them and

00:20:45,899 --> 00:20:50,399
also it's not a relational database so

00:20:47,970 --> 00:20:53,399
we cannot think of it think of elastic

00:20:50,399 --> 00:20:55,080
search as a database in cabana at the

00:20:53,399 --> 00:20:58,139
full behavior just to display static

00:20:55,080 --> 00:20:59,700
data but I figure a way around I mean

00:20:58,139 --> 00:21:01,830
when you see these dashboards here that

00:20:59,700 --> 00:21:03,480
you have the links that's not the

00:21:01,830 --> 00:21:06,090
default behavior in Cabana so you have

00:21:03,480 --> 00:21:08,159
to go through and dig deep to actually

00:21:06,090 --> 00:21:09,749
find a way to go and navigate like

00:21:08,159 --> 00:21:12,059
create these navigation things that I

00:21:09,749 --> 00:21:16,580
created it's not very pretty but it does

00:21:12,059 --> 00:21:20,970
the job and keep on evolves fast like

00:21:16,580 --> 00:21:23,610
cabanas I think middle I think July last

00:21:20,970 --> 00:21:26,730
year was 6.3 and then the same room was

00:21:23,610 --> 00:21:28,049
6.6 and I've been using 7.0 so like

00:21:26,730 --> 00:21:28,919
every six months it just keeps changing

00:21:28,049 --> 00:21:33,269
all the time

00:21:28,919 --> 00:21:35,159
and next steps we need to I mean maybe

00:21:33,269 --> 00:21:38,309
need help for the community to think

00:21:35,159 --> 00:21:40,440
about more new dashboards to to create I

00:21:38,309 --> 00:21:42,929
mean once we have the data and have the

00:21:40,440 --> 00:21:46,049
tool just need the idea to come up with

00:21:42,929 --> 00:21:48,149
more dashboards I don't know I just

00:21:46,049 --> 00:21:50,369
thought about the top 20 most failing

00:21:48,149 --> 00:21:52,769
tasks so maybe have a dashboard like hey

00:21:50,369 --> 00:21:54,600
these guys had failed you know 10 boards

00:21:52,769 --> 00:21:56,639
so that might require some attention of

00:21:54,600 --> 00:21:58,230
the community and also there is this

00:21:56,639 --> 00:22:01,679
very cool plugin for elastic search

00:21:58,230 --> 00:22:03,360
that's called a less alert that I keeps

00:22:01,679 --> 00:22:05,999
analyzing the data so let's say a board

00:22:03,360 --> 00:22:07,919
that that they feel like 10 times so

00:22:05,999 --> 00:22:10,919
that might raise like an alert for us

00:22:07,919 --> 00:22:12,389
say hey I don't know collabora LK of T

00:22:10,919 --> 00:22:12,899
there's this bar here and it seems

00:22:12,389 --> 00:22:14,730
offline

00:22:12,899 --> 00:22:17,420
of course I'll I'm just gonna know right

00:22:14,730 --> 00:22:25,280
but it's good to know

00:22:17,420 --> 00:22:33,080
any question yes who apparently have

00:22:25,280 --> 00:22:35,750
like one minute you mentioned that you

00:22:33,080 --> 00:22:38,920
for every line you are creating a new

00:22:35,750 --> 00:22:42,230
record when you save the data in

00:22:38,920 --> 00:22:44,270
elasticsearch yes so when you boot the

00:22:42,230 --> 00:22:48,290
kernel every single line is a different

00:22:44,270 --> 00:22:50,840
record yeah why is that so we thought of

00:22:48,290 --> 00:22:53,540
this we thought of like having one boot

00:22:50,840 --> 00:22:56,210
and then the log lines be an array of

00:22:53,540 --> 00:22:58,700
the boot but the thing is log stash

00:22:56,210 --> 00:23:01,160
elasticsearch doesn't work well with the

00:22:58,700 --> 00:23:03,350
race so if you have an array with this

00:23:01,160 --> 00:23:05,090
string game a string B and the string a

00:23:03,350 --> 00:23:07,700
is in the position is 0 and this string

00:23:05,090 --> 00:23:09,290
B is in position 1 elastic so it's just

00:23:07,700 --> 00:23:11,470
going to forget the positions and just

00:23:09,290 --> 00:23:14,840
going to tokenize the string a and

00:23:11,470 --> 00:23:16,730
associate it to the to that document so

00:23:14,840 --> 00:23:20,980
we just lost the reference of the line

00:23:16,730 --> 00:23:23,690
numbers but it does allow you to do

00:23:20,980 --> 00:23:25,310
match pattern that will take into

00:23:23,690 --> 00:23:27,140
account I mean it's right that it will

00:23:25,310 --> 00:23:29,800
tokenize but it will adults who know of

00:23:27,140 --> 00:23:32,150
the order of the token yes so you can do

00:23:29,800 --> 00:23:39,380
you know kind of regular expression

00:23:32,150 --> 00:23:41,450
across lines but because it doesn't give

00:23:39,380 --> 00:23:44,510
you the single log line he was gonna

00:23:41,450 --> 00:23:45,890
give you the whole document so if you

00:23:44,510 --> 00:23:48,530
want to search for like a single log

00:23:45,890 --> 00:23:53,390
lines that doesn't work at all yeah so

00:23:48,530 --> 00:23:55,130
so that means that for every record you

00:23:53,390 --> 00:23:57,020
are putting the kernel version

00:23:55,130 --> 00:24:03,590
associated with it but you are

00:23:57,020 --> 00:24:05,300
duplicating a lot of data there yes so

00:24:03,590 --> 00:24:08,060
basically one of the required features

00:24:05,300 --> 00:24:10,070
when Charles started working this is to

00:24:08,060 --> 00:24:12,500
enable any kernel developer who was

00:24:10,070 --> 00:24:14,690
interested when he sees a failure to

00:24:12,500 --> 00:24:17,690
find to grab that specific line of the

00:24:14,690 --> 00:24:19,340
log we wanted to have that index and the

00:24:17,690 --> 00:24:21,560
only way to retrieve that line is to

00:24:19,340 --> 00:24:24,890
have it a flat a flat tire are key when

00:24:21,560 --> 00:24:27,060
it's indexed yeah I know what you're

00:24:24,890 --> 00:24:30,360
talking about I read

00:24:27,060 --> 00:24:43,400
yeah so if you're using grokken and we

00:24:30,360 --> 00:24:43,400
didn't use brach there so there

00:24:46,920 --> 00:24:57,370
um so this looks like it's really useful

00:24:52,360 --> 00:24:59,770
if you've got if you're going to be user

00:24:57,370 --> 00:25:01,030
interface with a specific with a

00:24:59,770 --> 00:25:02,650
detailed query you want to do you know

00:25:01,030 --> 00:25:07,120
if you already know there's a problem

00:25:02,650 --> 00:25:09,400
you're investigating him which is a

00:25:07,120 --> 00:25:12,850
great compliment kernel see I already

00:25:09,400 --> 00:25:15,490
has which is lazy it's kind of hard to

00:25:12,850 --> 00:25:18,850
maintain but it is very very heavily

00:25:15,490 --> 00:25:20,170
curated to be really useful for the

00:25:18,850 --> 00:25:23,290
particular things that it does handle

00:25:20,170 --> 00:25:25,900
well so you've got things like the the

00:25:23,290 --> 00:25:27,490
list the list of jobs which gives you a

00:25:25,900 --> 00:25:30,040
really quick overview you know you can

00:25:27,490 --> 00:25:33,040
just one click and you can see which

00:25:30,040 --> 00:25:35,620
tree to have problems and you've got the

00:25:33,040 --> 00:25:40,870
you've also got the per boot results

00:25:35,620 --> 00:25:43,600
which are one age which just has very

00:25:40,870 --> 00:25:45,100
heavily created lists of bits of

00:25:43,600 --> 00:25:46,660
information so you've you've basically

00:25:45,100 --> 00:25:51,700
got a bug report there with just a

00:25:46,660 --> 00:25:53,320
single link they have some information

00:25:51,700 --> 00:25:53,770
there but I just thought I could make

00:25:53,320 --> 00:25:58,150
this better

00:25:53,770 --> 00:26:00,640
yeah yes well so but one community is

00:25:58,150 --> 00:26:02,350
like they seem like two complementary

00:26:00,640 --> 00:26:04,570
approaches you've got the existing stuff

00:26:02,350 --> 00:26:06,730
which is very heavily curated you've got

00:26:04,570 --> 00:26:10,900
this which is extremely flexible so you

00:26:06,730 --> 00:26:13,570
have a plan for trying to join those two

00:26:10,900 --> 00:26:17,320
approaches up or for you know providing

00:26:13,570 --> 00:26:20,380
some sort of curated thing pretty for in

00:26:17,320 --> 00:26:21,460
this because the minute yeah jump plan

00:26:20,380 --> 00:26:26,200
for joining these two approaches up

00:26:21,460 --> 00:26:28,990
basically this is actually one of the

00:26:26,200 --> 00:26:30,520
next substitute because we plan to have

00:26:28,990 --> 00:26:32,950
this available to everyone

00:26:30,520 --> 00:26:35,020
yeah but so far I think we can have this

00:26:32,950 --> 00:26:37,540
as an attorney for the current shiny

00:26:35,020 --> 00:26:40,990
front-end yeah so yeah once we have this

00:26:37,540 --> 00:26:43,540
available just send out the Lincoln sure

00:26:40,990 --> 00:26:45,760
yeah yeah no I mean I I I was warming

00:26:43,540 --> 00:26:47,590
ladies is there any plan to not just

00:26:45,760 --> 00:26:51,750
have them running in parallel but try to

00:26:47,590 --> 00:26:51,750
try to make connections between the two

00:26:53,010 --> 00:27:06,900
the link here for example I think is out

00:26:56,850 --> 00:27:08,970
here yeah oh you see this bill here the

00:27:06,900 --> 00:27:11,100
building the top if you see that this vo

00:27:08,970 --> 00:27:13,380
log here just gonna redirect it to the

00:27:11,100 --> 00:27:14,040
storage currency I exactly to the build

00:27:13,380 --> 00:27:18,330
log

00:27:14,040 --> 00:27:19,980
I mean it's a way to create like cross

00:27:18,330 --> 00:27:23,040
reference to the criticize I mean you

00:27:19,980 --> 00:27:24,870
see the the bill would you just lucky to

00:27:23,040 --> 00:27:26,960
the log here yeah so you're just gonna

00:27:24,870 --> 00:27:29,340
go straight to the log of the bill and

00:27:26,960 --> 00:27:32,309
right into into for the boots you would

00:27:29,340 --> 00:27:42,510
link to the boot result pages for

00:27:32,309 --> 00:27:44,580
example yeah I think I have one one link

00:27:42,510 --> 00:27:48,510
that then sends you to the current

00:27:44,580 --> 00:27:50,220
Colonel CIA it's unfortunate that demo

00:27:48,510 --> 00:27:52,590
doesn't know but I think answering to

00:27:50,220 --> 00:27:55,470
the original question well yeah we can

00:27:52,590 --> 00:27:58,770
do we can replace the current UI with

00:27:55,470 --> 00:28:00,809
this but not sure if this is a good idea

00:27:58,770 --> 00:28:06,030
so this is something that himself to

00:28:00,809 --> 00:28:13,590
evolve right is so that's we already

00:28:06,030 --> 00:28:15,240
have one there's one example yes maybe

00:28:13,590 --> 00:28:19,650
also in the other direction as well so

00:28:15,240 --> 00:28:22,020
you so when you would you for example

00:28:19,650 --> 00:28:24,419
when you're looking at the the the boot

00:28:22,020 --> 00:28:30,570
result you could maybe it could maybe go

00:28:24,419 --> 00:28:35,130
to was some dashboard in or dashboards

00:28:30,570 --> 00:28:36,720
in here that might be useful like every

00:28:35,130 --> 00:28:39,179
single screen that you see here is

00:28:36,720 --> 00:28:41,179
actually URL generated so it could just

00:28:39,179 --> 00:28:44,040
face the URL whatever in the cursor

00:28:41,179 --> 00:28:47,600
front end so just gonna come and take

00:28:44,040 --> 00:28:47,600
the user to these screens you

00:28:55,909 --> 00:29:07,080
one swing search the kernel panic when

00:28:59,220 --> 00:29:10,340
you search it yeah so thinking of adding

00:29:07,080 --> 00:29:13,139
this to the squad so the possibilities

00:29:10,340 --> 00:29:18,119
the same functionality I need it for our

00:29:13,139 --> 00:29:21,619
QA reports and squads as you see yeah

00:29:18,119 --> 00:29:21,619
this is a fantastic way thank you

00:29:23,310 --> 00:29:26,380
[Music]

00:29:30,620 --> 00:29:34,350

YouTube URL: https://www.youtube.com/watch?v=_aAvJktRifw


