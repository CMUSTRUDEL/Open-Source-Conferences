Title: BKK19-325: Design your own custom co-processors and acceleration hardw
Publication date: 2019-04-05
Playlist: Linaro Connect Bangkok 2019
Description: 
	Are you a software engineer and have always wanted to do any of the following, but not sure where to start?- Accelerate your software by 30x-40x using hardware- Differentiate your product by using custom hardware- Define the exact hardware peripheral set you need for your end application&nbsp;This course offer a survey of the free-to-download resources available to help you get started down the path toward creating your own custom hardware on an Ultra96 board.
Captions: 
	00:00:05,470 --> 00:00:10,480
okay great well I'll go ahead and get

00:00:07,960 --> 00:00:11,410
started thank you all for coming I hope

00:00:10,480 --> 00:00:13,450
you guys are having a great

00:00:11,410 --> 00:00:17,290
Lenora connect so far this is my first

00:00:13,450 --> 00:00:18,849
Lennar connect but I've been asked by my

00:00:17,290 --> 00:00:21,490
colleagues to come here and present a

00:00:18,849 --> 00:00:23,859
little bit on the things that we're

00:00:21,490 --> 00:00:26,529
doing with ultra 96 and where people can

00:00:23,859 --> 00:00:29,769
get more resources on doing things with

00:00:26,529 --> 00:00:31,420
Ultra 96 and so we came up with the idea

00:00:29,769 --> 00:00:33,250
for doing designing your own custom

00:00:31,420 --> 00:00:35,199
coprocessors and the acceleration

00:00:33,250 --> 00:00:36,940
hardware with ultra natÃ© 6 so if I

00:00:35,199 --> 00:00:38,829
haven't sets already my name is Kevin

00:00:36,940 --> 00:00:42,520
caracal in that net we worked with

00:00:38,829 --> 00:00:45,489
Xilinx on alter 96 I have a little bit

00:00:42,520 --> 00:00:48,219
of reverberation on Ultra 96 v2 which we

00:00:45,489 --> 00:00:51,100
launched last week so that's a little

00:00:48,219 --> 00:00:54,610
bit of something new that's new this

00:00:51,100 --> 00:00:56,170
year for llanera Connect but my

00:00:54,610 --> 00:00:58,329
colleagues they asked me to put together

00:00:56,170 --> 00:01:01,030
something and we worked really hard on

00:00:58,329 --> 00:01:02,949
coming up with something so first of all

00:01:01,030 --> 00:01:04,050
let me ask the room is there any arm

00:01:02,949 --> 00:01:06,369
folks in here

00:01:04,050 --> 00:01:08,560
ok you guys might want to close your

00:01:06,369 --> 00:01:11,920
eyes and cover your ears for this next

00:01:08,560 --> 00:01:14,259
part because first of all I want to kind

00:01:11,920 --> 00:01:16,000
of cover some history on accelerators

00:01:14,259 --> 00:01:17,500
and coprocessors just so we can kind of

00:01:16,000 --> 00:01:20,250
understand where we've been in the past

00:01:17,500 --> 00:01:22,390
so we can understand where we want to go

00:01:20,250 --> 00:01:29,220
so can anybody tell me what this thing

00:01:22,390 --> 00:01:32,740
is here that's right Intel 386 processor

00:01:29,220 --> 00:01:40,649
ancient technology but state-of-the-art

00:01:32,740 --> 00:01:44,050
for its day yeah so how about this one

00:01:40,649 --> 00:01:48,399
that's right that's a coprocessor give

00:01:44,050 --> 00:01:50,800
you a kit for that one so why would

00:01:48,399 --> 00:01:55,200
anybody want to buy a coprocessor what

00:01:50,800 --> 00:01:55,200
what good was it why is this extra part

00:01:58,120 --> 00:02:03,590
it's a great answer so does floating

00:02:01,130 --> 00:02:06,320
point way faster than the main processor

00:02:03,590 --> 00:02:07,760
did and so what you'd have to do is

00:02:06,320 --> 00:02:10,009
you'd have to get a motherboard that

00:02:07,760 --> 00:02:12,050
looked a little bit like this so you'd

00:02:10,009 --> 00:02:15,500
have to have a bigger board more power

00:02:12,050 --> 00:02:17,600
but for those who had it back in the day

00:02:15,500 --> 00:02:20,270
and you needed to do the floating-point

00:02:17,600 --> 00:02:22,490
operations and you had programs that

00:02:20,270 --> 00:02:24,350
were compiled with the compiler flag

00:02:22,490 --> 00:02:26,540
turned on to include that instruction

00:02:24,350 --> 00:02:28,990
set you're getting much better execution

00:02:26,540 --> 00:02:31,640
than those who didn't have that so

00:02:28,990 --> 00:02:33,740
luckily for me I didn't have one of

00:02:31,640 --> 00:02:35,209
these when they came out but my dad

00:02:33,740 --> 00:02:36,830
helped me find one out of the dumpster

00:02:35,209 --> 00:02:39,350
so it was a really great option for me

00:02:36,830 --> 00:02:42,320
when my sisters were playing on the 46

00:02:39,350 --> 00:02:45,170
DX I had a little machine on the side

00:02:42,320 --> 00:02:48,950
that I could play with and do some code

00:02:45,170 --> 00:02:52,190
development so next slide right here

00:02:48,950 --> 00:02:55,130
this one's also a little bit NSFW for

00:02:52,190 --> 00:02:58,250
the arm folks so check out those

00:02:55,130 --> 00:03:00,110
circuits right there so if you imagine a

00:02:58,250 --> 00:03:01,910
lot of this stuff you know they had some

00:03:00,110 --> 00:03:03,320
automation tools for doing this back

00:03:01,910 --> 00:03:04,880
then but if you were gonna do this by

00:03:03,320 --> 00:03:06,230
hand nowadays it probably takes you a

00:03:04,880 --> 00:03:10,040
long time if you're gonna do your own

00:03:06,230 --> 00:03:11,870
accelerator for a chip and so the things

00:03:10,040 --> 00:03:13,160
I'm going to talk about in this course

00:03:11,870 --> 00:03:15,769
are gonna show you some of the resources

00:03:13,160 --> 00:03:17,959
that you can go to and look at help you

00:03:15,769 --> 00:03:21,320
speed your own accelerator design but

00:03:17,959 --> 00:03:22,850
the idea here is that when Intel did

00:03:21,320 --> 00:03:25,160
their own acceleration chip back then

00:03:22,850 --> 00:03:27,860
and gave them a really good head start

00:03:25,160 --> 00:03:29,030
against the competition just now you

00:03:27,860 --> 00:03:32,720
know people are starting to catch up

00:03:29,030 --> 00:03:34,910
thirty years later and something that I

00:03:32,720 --> 00:03:36,620
can relate to maybe some some folks in

00:03:34,910 --> 00:03:38,930
the room can also relate to that as well

00:03:36,620 --> 00:03:42,350
so some of the other coprocessors that

00:03:38,930 --> 00:03:43,910
you see nowadays you see GPUs Craig

00:03:42,350 --> 00:03:46,400
actually covered some of this stuff in

00:03:43,910 --> 00:03:49,280
the in the last course you have DSPs

00:03:46,400 --> 00:03:51,560
that do signal processing calculations a

00:03:49,280 --> 00:03:53,540
lot faster and then now we're all sort

00:03:51,560 --> 00:03:56,030
of starting to see the emergence of very

00:03:53,540 --> 00:03:58,340
specialized processing units so this is

00:03:56,030 --> 00:04:00,860
a zombie CPU that's implemented inside

00:03:58,340 --> 00:04:03,340
the programmable logic the bit main guys

00:04:00,860 --> 00:04:05,990
a while ago they provided of course

00:04:03,340 --> 00:04:08,959
covered some of the TPU accelerator that

00:04:05,990 --> 00:04:09,720
they have so lots of acceleration going

00:04:08,959 --> 00:04:11,280
on

00:04:09,720 --> 00:04:13,530
this is where people can add their value

00:04:11,280 --> 00:04:17,670
add their custom IP and get ahead of

00:04:13,530 --> 00:04:19,260
their competition if you want to find

00:04:17,670 --> 00:04:20,700
out more about what Craig covered in his

00:04:19,260 --> 00:04:22,140
course that put the course number up

00:04:20,700 --> 00:04:24,750
here so that you can check that one out

00:04:22,140 --> 00:04:26,940
as well so custom coprocessors an

00:04:24,750 --> 00:04:29,880
acceleration hardware where is the

00:04:26,940 --> 00:04:32,610
advantages of using any ASSP

00:04:29,880 --> 00:04:33,930
where's the advantage of using a two

00:04:32,610 --> 00:04:36,390
chip solution where's the advantage

00:04:33,930 --> 00:04:38,490
using ASIC where's the advantages of

00:04:36,390 --> 00:04:42,630
using as in culture scale plus so you

00:04:38,490 --> 00:04:44,940
can see there are a lot of advantages

00:04:42,630 --> 00:04:47,400
viewing it using a SSP the big

00:04:44,940 --> 00:04:49,650
disadvantage is flexibility

00:04:47,400 --> 00:04:53,160
if you don't have the peripheral set

00:04:49,650 --> 00:04:55,290
that you need on that a SSP it's too bad

00:04:53,160 --> 00:04:57,600
maybe if you show up with a suitcase of

00:04:55,290 --> 00:05:00,270
money that chip manufacturer will make

00:04:57,600 --> 00:05:01,680
you the peripheral site you need but if

00:05:00,270 --> 00:05:05,550
they if you don't have the suitcase of

00:05:01,680 --> 00:05:06,780
money good luck - chip solution yeah you

00:05:05,550 --> 00:05:08,490
can add another chip on there to get

00:05:06,780 --> 00:05:09,690
that functionality that you need but

00:05:08,490 --> 00:05:11,700
you're gonna pay for it in terms of

00:05:09,690 --> 00:05:13,919
power so you got an extra chip that you

00:05:11,700 --> 00:05:16,650
got to feed power and then your unit

00:05:13,919 --> 00:05:18,810
cost for your end end product that's

00:05:16,650 --> 00:05:20,790
gonna be increased because now you have

00:05:18,810 --> 00:05:24,240
two chips going inside of it instead of

00:05:20,790 --> 00:05:26,850
one if you're doing an ASIC like the bit

00:05:24,240 --> 00:05:29,130
mean guys you know that's definitely an

00:05:26,850 --> 00:05:30,210
option but lots of negatives it's lots

00:05:29,130 --> 00:05:31,530
of risk if you don't know what you're

00:05:30,210 --> 00:05:35,070
doing you're gonna pay a lot of money

00:05:31,530 --> 00:05:36,930
for nothing and the time to market those

00:05:35,070 --> 00:05:38,430
guys probably spent quite a bit of time

00:05:36,930 --> 00:05:39,810
trying to figure out exactly what they

00:05:38,430 --> 00:05:41,840
wanted to put inside their chip before

00:05:39,810 --> 00:05:45,360
they put down the money to spin a chip

00:05:41,840 --> 00:05:47,370
in terms of flexibility once you commit

00:05:45,360 --> 00:05:49,860
to doing that silicon there's very

00:05:47,370 --> 00:05:52,169
little things that you can do in order

00:05:49,860 --> 00:05:53,580
to change things the way it performs

00:05:52,169 --> 00:05:56,790
you're stuck with a hard piece of

00:05:53,580 --> 00:06:00,900
silicon and then scalability is kind of

00:05:56,790 --> 00:06:04,140
a - because yep it's really expensive to

00:06:00,900 --> 00:06:05,790
build a bigger chips on the various

00:06:04,140 --> 00:06:07,710
processes that you have so that takes me

00:06:05,790 --> 00:06:09,900
into the zinc culture scale plus it

00:06:07,710 --> 00:06:11,760
solves a lot of these problems it adds a

00:06:09,900 --> 00:06:13,710
lot of flexibility if you get something

00:06:11,760 --> 00:06:15,180
wrong inside your design you just go

00:06:13,710 --> 00:06:17,190
back you rebuilt the bitstream

00:06:15,180 --> 00:06:18,479
you load a new bit stream in fact you

00:06:17,190 --> 00:06:22,340
can load it over-the-air if you have a

00:06:18,479 --> 00:06:25,370
network connection to your end

00:06:22,340 --> 00:06:27,560
the only you know neutral area here is

00:06:25,370 --> 00:06:30,140
unit cost correct definitely covered

00:06:27,560 --> 00:06:32,570
this a little bit it's not cheap and I

00:06:30,140 --> 00:06:34,640
just cheap as the ESS piece but in terms

00:06:32,570 --> 00:06:36,620
of value you're getting a lot more value

00:06:34,640 --> 00:06:38,600
out of a chip that you can just provide

00:06:36,620 --> 00:06:41,750
an over-the-air update to in order to

00:06:38,600 --> 00:06:44,180
change the functionality so programmable

00:06:41,750 --> 00:06:47,060
logic just kind of give you a background

00:06:44,180 --> 00:06:49,130
my I have a software background I went

00:06:47,060 --> 00:06:51,350
back to school I took a few graduate

00:06:49,130 --> 00:06:54,650
classes on FPGAs that's how I landed my

00:06:51,350 --> 00:06:56,780
job at AB net they asked me oh you know

00:06:54,650 --> 00:06:59,510
something about FPGAs and I said well I

00:06:56,780 --> 00:07:00,710
took a class on it and they said well

00:06:59,510 --> 00:07:04,430
kampol can you write a bunch of test

00:07:00,710 --> 00:07:06,950
software to test out these FPGAs and so

00:07:04,430 --> 00:07:08,510
that's how I got into this business but

00:07:06,950 --> 00:07:11,990
get a lot of questions on what's

00:07:08,510 --> 00:07:15,830
programmable logic so your basic unit

00:07:11,990 --> 00:07:18,050
inside of an FPGA is a logic block so

00:07:15,830 --> 00:07:19,880
inside of the logic block we basically

00:07:18,050 --> 00:07:22,480
have these three onus we got a lookup

00:07:19,880 --> 00:07:25,790
table which is a combinatorial logic

00:07:22,480 --> 00:07:30,200
piece that you can build and that

00:07:25,790 --> 00:07:31,880
functions as a read-only memory through

00:07:30,200 --> 00:07:34,490
that lookup table you get a constant

00:07:31,880 --> 00:07:35,840
electrical delay and you're really only

00:07:34,490 --> 00:07:37,580
limited by the number of inputs and

00:07:35,840 --> 00:07:38,900
outputs not the complexity of logic

00:07:37,580 --> 00:07:41,540
function that you stick inside that

00:07:38,900 --> 00:07:45,460
table the output of that goes up to a

00:07:41,540 --> 00:07:47,780
carry chain and then the result is also

00:07:45,460 --> 00:07:51,250
stored in some sort of latching device

00:07:47,780 --> 00:07:54,200
so it's usually some sort of flip-flop

00:07:51,250 --> 00:07:57,080
but basically the overall picture is

00:07:54,200 --> 00:07:59,180
that given a set of inputs you're going

00:07:57,080 --> 00:08:01,910
to get a deterministic output and you're

00:07:59,180 --> 00:08:05,360
getting a give it within a very finite

00:08:01,910 --> 00:08:08,420
amount of time so if you zoom back out

00:08:05,360 --> 00:08:10,520
of the FPGA fabric a little bit here you

00:08:08,420 --> 00:08:12,560
see we have our little logic block right

00:08:10,520 --> 00:08:13,360
here that's one of those little tiny red

00:08:12,560 --> 00:08:16,580
squares

00:08:13,360 --> 00:08:19,100
you also have routing resources so in

00:08:16,580 --> 00:08:22,100
between the little red squares you got

00:08:19,100 --> 00:08:25,040
these wires so basically moving from

00:08:22,100 --> 00:08:27,050
left to right you can configure any of

00:08:25,040 --> 00:08:31,190
these logic block resources to connect

00:08:27,050 --> 00:08:33,290
any of these other logic elements on the

00:08:31,190 --> 00:08:34,450
board using these high speed routing

00:08:33,290 --> 00:08:35,889
resources so

00:08:34,450 --> 00:08:38,680
the green paths those are all

00:08:35,889 --> 00:08:40,899
input/output box so you can use those as

00:08:38,680 --> 00:08:42,550
electrical inputs you can use some of

00:08:40,899 --> 00:08:45,190
them as electrical outputs they're

00:08:42,550 --> 00:08:47,019
configurable CL B's are a lot

00:08:45,190 --> 00:08:49,149
configurable logic block resources

00:08:47,019 --> 00:08:51,040
embedded memory is the purple guy right

00:08:49,149 --> 00:08:53,139
here so you can store your result inside

00:08:51,040 --> 00:08:55,660
of memory and do more advanced

00:08:53,139 --> 00:08:58,029
computations and then they also have DSP

00:08:55,660 --> 00:09:00,519
blocks that'll do multiply accumulate as

00:08:58,029 --> 00:09:02,769
well so we're slowly building our way

00:09:00,519 --> 00:09:04,510
back out to kind of understand what are

00:09:02,769 --> 00:09:08,430
we talking about when we say FPGA or

00:09:04,510 --> 00:09:11,380
programmable logic so if you look at the

00:09:08,430 --> 00:09:16,500
device here on the left this is the

00:09:11,380 --> 00:09:21,190
smallest burton 3 a device mask showing

00:09:16,500 --> 00:09:23,199
1584 logic cells and 108 io pins so this

00:09:21,190 --> 00:09:25,570
would be about the time when I got in

00:09:23,199 --> 00:09:29,050
FPGA s this was like state-of-the-art

00:09:25,570 --> 00:09:31,690
technology back then and then today on

00:09:29,050 --> 00:09:34,660
altar 96 it's this little board right

00:09:31,690 --> 00:09:36,010
here ultra 96 comes with a zu3 device

00:09:34,660 --> 00:09:38,920
and that gives you a hundred and

00:09:36,010 --> 00:09:41,380
forty-five thousand logic cells and a

00:09:38,920 --> 00:09:43,570
two i/o pin so we're constrained on the

00:09:41,380 --> 00:09:46,449
i/o pins because we have to fit into the

00:09:43,570 --> 00:09:48,610
ultra 96 format there are larger patch

00:09:46,449 --> 00:09:51,370
package options which will give us more

00:09:48,610 --> 00:09:54,990
options but in terms of logic resources

00:09:51,370 --> 00:09:56,800
you can say you can see we're almost

00:09:54,990 --> 00:09:59,290
let's see if that's about a hundred

00:09:56,800 --> 00:10:03,970
times larger than the device that we had

00:09:59,290 --> 00:10:05,680
15 years ago ok so what can you do with

00:10:03,970 --> 00:10:08,800
programmable logic that's the next thing

00:10:05,680 --> 00:10:11,170
so this is taken from Dan Rosewood's

00:10:08,800 --> 00:10:13,600
Lennar Oh Connect presentation last fall

00:10:11,170 --> 00:10:16,329
in Vancouver where he talked about

00:10:13,600 --> 00:10:18,640
managing custom FPGA accelerators with a

00:10:16,329 --> 00:10:20,860
tool called SD SOC so that he goes into

00:10:18,640 --> 00:10:21,699
this a little bit more detail but I'm

00:10:20,860 --> 00:10:24,190
going to give you the high-level

00:10:21,699 --> 00:10:26,890
overview where basically we have matrix

00:10:24,190 --> 00:10:28,240
multiply and we have a golden function

00:10:26,890 --> 00:10:30,190
that's written in C code so you can take

00:10:28,240 --> 00:10:32,440
this seat application you're running

00:10:30,190 --> 00:10:34,959
through your GCC compiler and you can

00:10:32,440 --> 00:10:37,540
run it on the processor you could also

00:10:34,959 --> 00:10:39,630
take that same function kind of go

00:10:37,540 --> 00:10:42,550
through and analyze ok which pieces are

00:10:39,630 --> 00:10:44,800
B which pieces can be done in parallel

00:10:42,550 --> 00:10:47,860
and you can break up that function and

00:10:44,800 --> 00:10:50,980
you can wrap some pragmas around it

00:10:47,860 --> 00:10:52,510
we have this pragma hls pipeline that

00:10:50,980 --> 00:10:55,330
we've wrapped around that and you're

00:10:52,510 --> 00:10:57,310
basically telling SDS OC that you it can

00:10:55,330 --> 00:10:58,570
take the liberty of pipelining that

00:10:57,310 --> 00:11:00,790
function out and you're basically

00:10:58,570 --> 00:11:03,460
unrolling that loop into something that

00:11:00,790 --> 00:11:06,820
can be converted in the HDL language and

00:11:03,460 --> 00:11:08,680
then implemented inside of the pro the

00:11:06,820 --> 00:11:12,400
programmable logic so this is basically

00:11:08,680 --> 00:11:14,260
a CD Gates type application so when you

00:11:12,400 --> 00:11:16,330
run it through the tool what you get is

00:11:14,260 --> 00:11:19,210
you get this bottle block diagram so

00:11:16,330 --> 00:11:23,770
lavato is the the primary Xilinx design

00:11:19,210 --> 00:11:25,660
tool so here we can see the processing

00:11:23,770 --> 00:11:27,790
system of the Zen culture skills hidden

00:11:25,660 --> 00:11:30,100
behind the sink culture scale logic

00:11:27,790 --> 00:11:32,920
block and through high-speed AXI

00:11:30,100 --> 00:11:35,500
interconnects and some other glue logic

00:11:32,920 --> 00:11:37,450
that the SDS se tool sets up for you

00:11:35,500 --> 00:11:39,460
automatically you know it's kind of a

00:11:37,450 --> 00:11:41,470
complex design but it's wrapping a lot

00:11:39,460 --> 00:11:43,360
of this complexity up for you it creates

00:11:41,470 --> 00:11:45,010
this little accelerator block that gets

00:11:43,360 --> 00:11:47,920
dropped into that block diagram for you

00:11:45,010 --> 00:11:51,250
based upon that C code that I showed on

00:11:47,920 --> 00:11:53,230
the previous slide so it does a lot of

00:11:51,250 --> 00:11:54,910
this work for you so from a software

00:11:53,230 --> 00:11:56,380
developer's perspective this saves you a

00:11:54,910 --> 00:11:59,110
lot of time you don't have to sit down

00:11:56,380 --> 00:12:00,940
connect up a lot of these little you

00:11:59,110 --> 00:12:03,250
know from one point to the next point

00:12:00,940 --> 00:12:04,510
connect the dots type of thing the tool

00:12:03,250 --> 00:12:06,850
is automatically doing a lot of this

00:12:04,510 --> 00:12:10,570
stuff for you and it implements these

00:12:06,850 --> 00:12:13,750
accelerators on the system and it saves

00:12:10,570 --> 00:12:15,220
you a lot of time so I don't know if the

00:12:13,750 --> 00:12:16,870
person I'm in the middle of a discussion

00:12:15,220 --> 00:12:18,220
with somebody on discord has asked me

00:12:16,870 --> 00:12:19,570
some details on how some of this stuff

00:12:18,220 --> 00:12:22,420
works I don't know if they're in the

00:12:19,570 --> 00:12:25,180
room but I did get gathered some

00:12:22,420 --> 00:12:28,690
information on this so basically what

00:12:25,180 --> 00:12:30,130
Dan did when he tried to show some real

00:12:28,690 --> 00:12:31,690
measurements of what does this

00:12:30,130 --> 00:12:34,540
acceleration actually mean can you

00:12:31,690 --> 00:12:37,750
really get 3x performance

00:12:34,540 --> 00:12:40,180
he took apples to apples comparison of

00:12:37,750 --> 00:12:43,090
that code so his functional accelerator

00:12:40,180 --> 00:12:45,430
designs he tested one and running at a

00:12:43,090 --> 00:12:47,500
fabric clock of 100 megahertz and then

00:12:45,430 --> 00:12:48,790
he tested it again running at 300

00:12:47,500 --> 00:12:51,820
megahertz and this is what he found

00:12:48,790 --> 00:12:54,340
so not chinjung anything else inside the

00:12:51,820 --> 00:12:57,190
system at 100 megahertz he gets a speed

00:12:54,340 --> 00:12:59,560
up of about 24x and so he does that

00:12:57,190 --> 00:13:01,120
comparison by measuring the number of

00:12:59,560 --> 00:13:03,610
CPU cycles he's

00:13:01,120 --> 00:13:06,370
inside of the matrix multiply function

00:13:03,610 --> 00:13:07,930
in software on the CPU then it reruns it

00:13:06,370 --> 00:13:11,880
again using the hardware accelerated

00:13:07,930 --> 00:13:14,290
version of it that gets executed

00:13:11,880 --> 00:13:15,730
launched from the processor but the

00:13:14,290 --> 00:13:17,290
calculations done inside the

00:13:15,730 --> 00:13:19,240
programmable logic inside the hardware

00:13:17,290 --> 00:13:20,589
and he has a little timer he just counts

00:13:19,240 --> 00:13:22,480
the number of ticks that happen on the

00:13:20,589 --> 00:13:23,800
timer and so based upon those number of

00:13:22,480 --> 00:13:26,440
ticks that's where you get the speed-up

00:13:23,800 --> 00:13:29,080
factor so running at 100 megahertz he

00:13:26,440 --> 00:13:31,150
gets about 24x improvement here II ran

00:13:29,080 --> 00:13:33,930
the same thing changing only the fabric

00:13:31,150 --> 00:13:36,400
clock to speed up the matrix multiply

00:13:33,930 --> 00:13:43,600
calculation and he gets a speed-up of

00:13:36,400 --> 00:13:45,970
about 38 X so if you look at that you

00:13:43,600 --> 00:13:49,660
may look at that and you'd say well if I

00:13:45,970 --> 00:13:53,440
go from 100 to 300 that's about 3 X how

00:13:49,660 --> 00:13:56,410
can I go from 24 X to something that's 3

00:13:53,440 --> 00:13:58,450
times 24 how come it's only going now 39

00:13:56,410 --> 00:14:02,529
X and so what you're looking at is only

00:13:58,450 --> 00:14:04,270
about a 1.6 / X increase and I'll have

00:14:02,529 --> 00:14:06,040
an answer for that in just a second but

00:14:04,270 --> 00:14:07,270
I have to cover something in the

00:14:06,040 --> 00:14:09,670
meantime in order for this to be

00:14:07,270 --> 00:14:11,560
understandable so when the programmable

00:14:09,670 --> 00:14:14,110
logic has that three times faster clock

00:14:11,560 --> 00:14:16,690
why didn't you have that 3x improvement

00:14:14,110 --> 00:14:18,490
and to answer that you have to remember

00:14:16,690 --> 00:14:21,580
that the data is moving into the

00:14:18,490 --> 00:14:23,320
programmable logic and it moves back out

00:14:21,580 --> 00:14:26,620
of the programmable logic to the

00:14:23,320 --> 00:14:27,910
processor memory space and so when

00:14:26,620 --> 00:14:28,900
you're moving that it has to go all

00:14:27,910 --> 00:14:31,209
across the high-speed actually

00:14:28,900 --> 00:14:33,459
interconnect and if you don't change the

00:14:31,209 --> 00:14:35,080
clock frequency of that high-speed X the

00:14:33,459 --> 00:14:36,850
interconnect that becomes your

00:14:35,080 --> 00:14:38,260
bottleneck of your system so even though

00:14:36,850 --> 00:14:39,790
you're running the fabric faster the

00:14:38,260 --> 00:14:41,770
actual calculation itself is running

00:14:39,790 --> 00:14:43,420
faster you're not able to move that data

00:14:41,770 --> 00:14:52,300
back because you're not changing the

00:14:43,420 --> 00:14:56,589
data motion network got question yeah so

00:14:52,300 --> 00:14:58,540
when when you move data from yeah from

00:14:56,589 --> 00:15:00,040
your program over to the hardware logic

00:14:58,540 --> 00:15:02,230
how does that happen in practice is it

00:15:00,040 --> 00:15:04,110
memory mapped i/o and just some magical

00:15:02,230 --> 00:15:06,940
register writes appear in your code and

00:15:04,110 --> 00:15:09,820
trick something with a flier baton and

00:15:06,940 --> 00:15:11,320
it waits for post at to go to come out

00:15:09,820 --> 00:15:13,690
of the logic something like this or an

00:15:11,320 --> 00:15:14,950
interrupt or how does it happen yeah no

00:15:13,690 --> 00:15:16,030
that's a really good question so pay

00:15:14,950 --> 00:15:17,710
you're standing question is basically

00:15:16,030 --> 00:15:19,480
asking what does that look like from a

00:15:17,710 --> 00:15:20,920
software perspective yeah if you would

00:15:19,480 --> 00:15:22,630
disassemble the result what would it

00:15:20,920 --> 00:15:25,500
look yeah so from from a high level

00:15:22,630 --> 00:15:27,580
perspective the very simplest

00:15:25,500 --> 00:15:30,580
programmable logic accelerator looks

00:15:27,580 --> 00:15:32,350
like a piece of memory map registers so

00:15:30,580 --> 00:15:34,150
you write something into it hit like a

00:15:32,350 --> 00:15:36,190
go button and it would go off and do its

00:15:34,150 --> 00:15:37,890
calculation and they need to wait for

00:15:36,190 --> 00:15:41,800
like an interrupt to come back from that

00:15:37,890 --> 00:15:43,660
there's more advanced models like this

00:15:41,800 --> 00:15:45,520
one in I think that we're showing here

00:15:43,660 --> 00:15:48,490
this one is like a DMA model or

00:15:45,520 --> 00:15:50,950
basically it has a wrap a DMA wrapper

00:15:48,490 --> 00:15:53,080
around it that there's some higher-level

00:15:50,950 --> 00:15:54,850
calls that you can make from see that

00:15:53,080 --> 00:15:57,820
automatically sets all that up for you

00:15:54,850 --> 00:15:59,950
and then the dma engine handles moving

00:15:57,820 --> 00:16:02,440
the data from the processor into the

00:15:59,950 --> 00:16:04,960
programmable logic space for you there's

00:16:02,440 --> 00:16:06,730
some other models that they had I've

00:16:04,960 --> 00:16:08,890
seen one where the reason like this new

00:16:06,730 --> 00:16:10,630
controller unit to move the data between

00:16:08,890 --> 00:16:12,070
the processing system and the

00:16:10,630 --> 00:16:14,380
programmable logic so basically the

00:16:12,070 --> 00:16:16,330
parabola watch it can see the same

00:16:14,380 --> 00:16:19,840
memory space that the processor sees so

00:16:16,330 --> 00:16:21,550
there's a few different ways of doing

00:16:19,840 --> 00:16:24,640
the same exact thing even though you're

00:16:21,550 --> 00:16:26,410
using different data models and there's

00:16:24,640 --> 00:16:29,290
a few of those that are supported by SD

00:16:26,410 --> 00:16:31,330
SOC so so a few years back and I think

00:16:29,290 --> 00:16:33,460
also risk 5 does this is like insert

00:16:31,330 --> 00:16:37,090
bogus instructions that will trigger

00:16:33,460 --> 00:16:38,470
something you don't do that that's a

00:16:37,090 --> 00:16:40,420
good question so you're basically and

00:16:38,470 --> 00:16:42,670
saying I if I understand the question

00:16:40,420 --> 00:16:44,140
saying are you saying like you have to

00:16:42,670 --> 00:16:45,850
insert a bunch of no option wait for the

00:16:44,140 --> 00:16:47,830
hardware accelerated no what they're

00:16:45,850 --> 00:16:49,600
doing is come up with new custom

00:16:47,830 --> 00:16:51,460
instruction in this the I saw they

00:16:49,600 --> 00:16:53,260
extend the ISO with some magical new

00:16:51,460 --> 00:16:58,000
instructions you're not doing that no

00:16:53,260 --> 00:16:59,830
not that I've seen yeah ok thanks yep ok

00:16:58,000 --> 00:17:01,900
so then is there a limit to where we're

00:16:59,830 --> 00:17:03,670
going with all this so there's a law out

00:17:01,900 --> 00:17:05,290
there that's called abdel's law this is

00:17:03,670 --> 00:17:07,720
something that anvil observe quite a

00:17:05,290 --> 00:17:09,970
while ago and it's basically the law of

00:17:07,720 --> 00:17:12,550
diminishing returns and due to losses in

00:17:09,970 --> 00:17:14,980
efficiency of parallelism you can throw

00:17:12,550 --> 00:17:16,900
more and more hardware problem and you

00:17:14,980 --> 00:17:18,490
will get an increase in performance but

00:17:16,900 --> 00:17:22,270
it's a diminishing increase in

00:17:18,490 --> 00:17:24,490
performance and so you buy out more

00:17:22,270 --> 00:17:27,760
information on it but basically you know

00:17:24,490 --> 00:17:28,569
you could throw some parallelism at it

00:17:27,760 --> 00:17:30,340
and you can get

00:17:28,569 --> 00:17:32,169
and then the more and more parallelism

00:17:30,340 --> 00:17:35,649
you throw at it the more you're gonna

00:17:32,169 --> 00:17:38,350
pay in terms of power but then the the

00:17:35,649 --> 00:17:40,149
worst return on investment you're gonna

00:17:38,350 --> 00:17:42,669
get in the long run so you and I have to

00:17:40,149 --> 00:17:44,169
find this balance between the amount of

00:17:42,669 --> 00:17:46,690
accelerators that you're going to throw

00:17:44,169 --> 00:17:48,330
it a problem and the amount of speed-up

00:17:46,690 --> 00:17:50,740
that you're gonna get as a result of it

00:17:48,330 --> 00:17:53,980
but the high-level summary is that

00:17:50,740 --> 00:17:55,419
programmable logic really shines so if

00:17:53,980 --> 00:17:56,889
you break the computation problem up

00:17:55,419 --> 00:17:59,500
into smaller pieces and create a

00:17:56,889 --> 00:18:01,450
customized and dedicated accelerator you

00:17:59,500 --> 00:18:03,309
can provide resources specifically to

00:18:01,450 --> 00:18:05,470
handle a particular problem that you're

00:18:03,309 --> 00:18:07,750
trying to solve and in the SD SOC

00:18:05,470 --> 00:18:11,019
created programmable logic su solution

00:18:07,750 --> 00:18:13,629
for matrix multiply when we evaluate the

00:18:11,019 --> 00:18:16,269
resources that we had at hand on ultra

00:18:13,629 --> 00:18:18,460
96 board and you probably provide enough

00:18:16,269 --> 00:18:21,460
resources you can get down to about 40

00:18:18,460 --> 00:18:24,909
to 64 processor clocks for each matrix

00:18:21,460 --> 00:18:26,409
multiply operation so programmable logic

00:18:24,909 --> 00:18:29,320
implementation compared to processor

00:18:26,409 --> 00:18:33,129
only implementation processor on average

00:18:29,320 --> 00:18:35,649
takes about 1540 to processor clocks per

00:18:33,129 --> 00:18:38,440
matrix multiply for that given size of

00:18:35,649 --> 00:18:40,059
matrix and the hardware acceleration

00:18:38,440 --> 00:18:41,590
does require additional resources

00:18:40,059 --> 00:18:43,899
including the power to power the

00:18:41,590 --> 00:18:46,240
programmable logic but the performance

00:18:43,899 --> 00:18:48,940
per watt for some of those math

00:18:46,240 --> 00:18:51,659
intensive calculations is better than

00:18:48,940 --> 00:18:53,919
when you get with a standalone processor

00:18:51,659 --> 00:18:57,940
yeah we got a question let me get you

00:18:53,919 --> 00:19:00,490
the microphone well the other thing is

00:18:57,940 --> 00:19:02,529
it is a completely separate processor so

00:19:00,490 --> 00:19:03,940
you could have the main CPU going off

00:19:02,529 --> 00:19:06,460
and doing other work in the meantime

00:19:03,940 --> 00:19:08,200
while this is doing the acceleration

00:19:06,460 --> 00:19:09,789
yeah you actually get you know quite a

00:19:08,200 --> 00:19:12,460
bit of performance out of it yeah that's

00:19:09,789 --> 00:19:14,710
a good observation so the the thing that

00:19:12,460 --> 00:19:17,139
you're elaborating on since it's a

00:19:14,710 --> 00:19:19,899
separate process separate Hardware you

00:19:17,139 --> 00:19:22,450
could set up an elaborate scheme to well

00:19:19,899 --> 00:19:23,860
you allowed that one to go off and maybe

00:19:22,450 --> 00:19:25,840
he generates an interrupt when he's done

00:19:23,860 --> 00:19:27,460
but in the meantime the processor can go

00:19:25,840 --> 00:19:28,750
off and perform some other work it could

00:19:27,460 --> 00:19:33,669
be running your web server that's not

00:19:28,750 --> 00:19:37,389
really you know real time sensitive no

00:19:33,669 --> 00:19:38,559
that's a good observation okay so now

00:19:37,389 --> 00:19:41,289
that I've got you all excited about

00:19:38,559 --> 00:19:42,190
generating your own accelerator where do

00:19:41,289 --> 00:19:43,870
you go from here so we

00:19:42,190 --> 00:19:45,879
lots of questions on like well where do

00:19:43,870 --> 00:19:48,429
I start sounds really great I want to

00:19:45,879 --> 00:19:51,039
use the FPGA stuff I haven't really used

00:19:48,429 --> 00:19:52,929
it before we're gonna get started so I'm

00:19:51,039 --> 00:19:56,110
gonna share with you my top five ultra

00:19:52,929 --> 00:19:56,950
96 developer resources number one this

00:19:56,110 --> 00:19:58,509
is something we're gonna announce

00:19:56,950 --> 00:19:59,769
officially at the end of the month where

00:19:58,509 --> 00:20:01,509
I'm kind of giving a little bit of a

00:19:59,769 --> 00:20:03,490
sneak preview here at Leonora connect

00:20:01,509 --> 00:20:05,019
we're coming out with a set of Abnett

00:20:03,490 --> 00:20:06,759
technical training courses that cover

00:20:05,019 --> 00:20:09,399
the hardware development software

00:20:06,759 --> 00:20:11,259
development getting the assignments

00:20:09,399 --> 00:20:14,409
pedal Linux tools up running it'll give

00:20:11,259 --> 00:20:15,940
a walkthrough of using SD SOC there'll

00:20:14,409 --> 00:20:17,620
be some more advanced courses that come

00:20:15,940 --> 00:20:19,059
out later on I don't know if those will

00:20:17,620 --> 00:20:21,340
be announced by the end of the month but

00:20:19,059 --> 00:20:24,909
I'm gonna walk through some of the the

00:20:21,340 --> 00:20:27,220
ones that we show here another big very

00:20:24,909 --> 00:20:30,009
very excellent resource is the Adam

00:20:27,220 --> 00:20:32,230
Taylor blogs and projects and so Adam

00:20:30,009 --> 00:20:35,320
Taylor actually gave a presentation last

00:20:32,230 --> 00:20:37,720
fall at the Vancouver event he's been

00:20:35,320 --> 00:20:38,200
working with Xilinx for a really long

00:20:37,720 --> 00:20:42,490
time

00:20:38,200 --> 00:20:43,840
and Silex actually gave him a this is

00:20:42,490 --> 00:20:47,620
probably about like six or seven years

00:20:43,840 --> 00:20:49,450
ago they gave him a micro set kit Adam

00:20:47,620 --> 00:20:51,940
Taylor edition and ever since he got

00:20:49,450 --> 00:20:53,789
that he's been blogging he has over 300

00:20:51,940 --> 00:20:56,289
different blogs that he's created

00:20:53,789 --> 00:20:58,149
starting with his ink 7000 family he's

00:20:56,289 --> 00:21:00,480
doing the Zink ultra scale plus stuff

00:20:58,149 --> 00:21:02,980
now and so I'll show some of that stuff

00:21:00,480 --> 00:21:04,690
there's also documentation reference

00:21:02,980 --> 00:21:06,549
designs available on the element14

00:21:04,690 --> 00:21:08,440
website I'll talk a little bit more

00:21:06,549 --> 00:21:10,750
about what that is we also have support

00:21:08,440 --> 00:21:13,360
forums and there's a community portal

00:21:10,750 --> 00:21:15,309
that I want to point out so ultra 96

00:21:13,360 --> 00:21:16,480
training classes this is the best place

00:21:15,309 --> 00:21:18,789
to start because it's gonna give you a

00:21:16,480 --> 00:21:20,529
baseline amount of information about

00:21:18,789 --> 00:21:23,860
each of the design tools that you can

00:21:20,529 --> 00:21:27,159
use to test out new hardware design new

00:21:23,860 --> 00:21:29,860
hardware implement stuff on a zinc ultra

00:21:27,159 --> 00:21:32,649
scale plus so each of the courses are

00:21:29,860 --> 00:21:34,269
targeted about one day each worth of

00:21:32,649 --> 00:21:36,490
material it's about six and a half to

00:21:34,269 --> 00:21:39,370
seven hours worth of lecture material

00:21:36,490 --> 00:21:41,379
and hands-on labs and the key part is

00:21:39,370 --> 00:21:43,570
the hands-on labs because it'll show

00:21:41,379 --> 00:21:46,000
that you can actually walk through the

00:21:43,570 --> 00:21:47,259
tools accomplish something and then it's

00:21:46,000 --> 00:21:51,460
something you can go home and you can

00:21:47,259 --> 00:21:53,080
recreate on your own and then we're also

00:21:51,460 --> 00:21:55,330
gonna have a set of advanced courses

00:21:53,080 --> 00:21:56,260
that come out later on one's around SD

00:21:55,330 --> 00:21:57,910
SOC

00:21:56,260 --> 00:21:59,530
we have another one that's around pink

00:21:57,910 --> 00:22:02,800
and for those of you who haven't heard

00:21:59,530 --> 00:22:04,360
about pink you can stop by the table

00:22:02,800 --> 00:22:05,680
upstairs and I'll actually show you four

00:22:04,360 --> 00:22:06,910
separate demos that were running and

00:22:05,680 --> 00:22:09,490
they're all based upon the pink

00:22:06,910 --> 00:22:11,710
framework but basically it's a library

00:22:09,490 --> 00:22:13,690
that Xilinx created that allows

00:22:11,710 --> 00:22:16,270
interaction between the software world

00:22:13,690 --> 00:22:18,460
and hardware accelerators by marshaling

00:22:16,270 --> 00:22:21,160
data across that interface it actually

00:22:18,460 --> 00:22:25,600
enables you to call programmable logic

00:22:21,160 --> 00:22:27,220
accelerators from Python we also have a

00:22:25,600 --> 00:22:28,840
one on deep learning and all these

00:22:27,220 --> 00:22:32,110
courses are going to be based on twenty

00:22:28,840 --> 00:22:34,110
18.3 tools which I believe were the

00:22:32,110 --> 00:22:38,320
latest design ice tools that they have

00:22:34,110 --> 00:22:40,630
and you can find out more information on

00:22:38,320 --> 00:22:43,510
it but we're also gonna have an online

00:22:40,630 --> 00:22:45,220
version in these tools available on the

00:22:43,510 --> 00:22:47,560
hacks trio if you live in a major city

00:22:45,220 --> 00:22:50,920
and you know you're silent you're Abnett

00:22:47,560 --> 00:22:52,450
f AE feel free to contact them and see

00:22:50,920 --> 00:22:54,280
if you can get something scheduled in

00:22:52,450 --> 00:22:59,950
terms of a live event that's taught by

00:22:54,280 --> 00:23:05,500
your locals I like Sophie sorry exactly

00:22:59,950 --> 00:23:09,160
it's dedicated Abnett f AE all right so

00:23:05,500 --> 00:23:11,440
next just kind of cover what is covered

00:23:09,160 --> 00:23:14,080
by these courses it's gonna be

00:23:11,440 --> 00:23:18,210
compatible on all altar 96 and altar 96

00:23:14,080 --> 00:23:21,790
v2 hardware every single kit this kit

00:23:18,210 --> 00:23:25,750
alternate 96 comes with a 16 gigabyte SD

00:23:21,790 --> 00:23:27,280
card there's a separate jtech UART pot

00:23:25,750 --> 00:23:29,380
that's purchased for that in order to

00:23:27,280 --> 00:23:31,390
get the to the low level debugging on

00:23:29,380 --> 00:23:34,390
those but that's available on Abnett

00:23:31,390 --> 00:23:36,190
website there's also a 2 ampere forum

00:23:34,390 --> 00:23:37,990
power supply that's needed that does not

00:23:36,190 --> 00:23:41,410
ship with altar 96 that's sold

00:23:37,990 --> 00:23:43,330
separately the intro courses daily will

00:23:41,410 --> 00:23:44,950
cover the use of this mickr electronica

00:23:43,330 --> 00:23:47,620
click-click mezzanine that we announced

00:23:44,950 --> 00:23:49,930
last fall and you also use a motion

00:23:47,620 --> 00:23:51,790
sensor click board from microelectronic

00:23:49,930 --> 00:23:53,470
oh so the pink course we're still

00:23:51,790 --> 00:23:54,970
working out the final details on the

00:23:53,470 --> 00:23:56,650
hardware but if you're interested in

00:23:54,970 --> 00:23:58,570
taking the deep learning course we're

00:23:56,650 --> 00:24:02,710
also going to be using a USB webcam for

00:23:58,570 --> 00:24:04,270
doing the image capture recognition so

00:24:02,710 --> 00:24:06,340
sometime we're gonna have an

00:24:04,270 --> 00:24:08,110
announcement in April you will need an

00:24:06,340 --> 00:24:09,490
alternating 6 V 2 word and I'll talk a

00:24:08,110 --> 00:24:13,000
little bit about what a V 2

00:24:09,490 --> 00:24:15,010
where it is if you have an alternating

00:24:13,000 --> 00:24:20,200
6v one port you can use that too but not

00:24:15,010 --> 00:24:22,059
everybody has one of those okay so let

00:24:20,200 --> 00:24:25,000
me talk about Adam Taylor's blog some

00:24:22,059 --> 00:24:27,429
projects so Adam is a chartered and

00:24:25,000 --> 00:24:29,470
fellow engineer in the Institute of

00:24:27,429 --> 00:24:31,540
Engineering and Technology

00:24:29,470 --> 00:24:33,520
he started the markers at chronicles

00:24:31,540 --> 00:24:35,679
he's been doing it since 2013

00:24:33,520 --> 00:24:38,200
- today he keeps on churning out new and

00:24:35,679 --> 00:24:40,090
new new material he's actually published

00:24:38,200 --> 00:24:42,429
those articles into two separate books

00:24:40,090 --> 00:24:44,050
that are available on Amazon in eBook

00:24:42,429 --> 00:24:47,650
format and I believe they're also

00:24:44,050 --> 00:24:50,530
printed as well he has all of his latest

00:24:47,650 --> 00:24:54,610
material on altered 96 being posted up

00:24:50,530 --> 00:24:56,500
to the hex Trejo community website and I

00:24:54,610 --> 00:24:58,480
put up a little URL right here that you

00:24:56,500 --> 00:25:01,360
can go to in order to get to that and

00:24:58,480 --> 00:25:04,300
check out his work but to kind of give

00:25:01,360 --> 00:25:05,920
you an overview what he's done these are

00:25:04,300 --> 00:25:08,530
some of the community projects that he

00:25:05,920 --> 00:25:09,970
has you can see here the latest one that

00:25:08,530 --> 00:25:12,520
he had when I was putting these slides

00:25:09,970 --> 00:25:14,830
together he integrates Alexa an altar 96

00:25:12,520 --> 00:25:16,360
they're basically really quick tutorials

00:25:14,830 --> 00:25:19,390
that you can run through in a few hours

00:25:16,360 --> 00:25:21,550
in order to do something incredibly

00:25:19,390 --> 00:25:23,860
amazing with your altar 96 hardware and

00:25:21,550 --> 00:25:27,370
he usually throws in some additional

00:25:23,860 --> 00:25:28,570
hardware peripherals too but all the

00:25:27,370 --> 00:25:31,330
projects that are listed up on the

00:25:28,570 --> 00:25:32,590
hackster I don't know if you know how

00:25:31,330 --> 00:25:33,690
aster works but I'll give a brief

00:25:32,590 --> 00:25:36,490
explanation

00:25:33,690 --> 00:25:38,200
hackster gives you the ability to create

00:25:36,490 --> 00:25:39,429
a sort of shopping list of hardware so

00:25:38,200 --> 00:25:41,110
you can see all the hardware that

00:25:39,429 --> 00:25:43,480
somebody used in order to create a

00:25:41,110 --> 00:25:45,580
project and you can recreate that on

00:25:43,480 --> 00:25:47,470
your own if it's something that you're

00:25:45,580 --> 00:25:49,360
interested in doing see it's currently

00:25:47,470 --> 00:25:51,940
over 20 different projects with easy to

00:25:49,360 --> 00:25:54,040
follow instructions the best part is

00:25:51,940 --> 00:25:56,920
Adam makes all of his project source

00:25:54,040 --> 00:25:59,530
code available and publicly on github so

00:25:56,920 --> 00:26:04,990
that you can take what he's done you can

00:25:59,530 --> 00:26:09,880
extend it modify it and expand it on

00:26:04,990 --> 00:26:11,740
your own ok so then the next thing I

00:26:09,880 --> 00:26:14,559
want to cover is documentation and

00:26:11,740 --> 00:26:17,440
reference designs in element14 so also

00:26:14,559 --> 00:26:20,350
get questions on what is element 14 the

00:26:17,440 --> 00:26:22,170
14th element is silicon but helmet 14 is

00:26:20,350 --> 00:26:26,580
the world's largest on

00:26:22,170 --> 00:26:28,440
engineering community so Abnett acquired

00:26:26,580 --> 00:26:31,050
a company named premier for an L and

00:26:28,440 --> 00:26:34,710
element14 was part of that acquisition

00:26:31,050 --> 00:26:37,290
and it was about two years ago we are

00:26:34,710 --> 00:26:38,610
now proud my group is now proud to be

00:26:37,290 --> 00:26:41,190
part of this community we've actually

00:26:38,610 --> 00:26:43,020
migrated from or in the process of

00:26:41,190 --> 00:26:45,210
migrating from a dot work site that we

00:26:43,020 --> 00:26:47,160
were running on Drupal or this much

00:26:45,210 --> 00:26:50,670
better content management system that we

00:26:47,160 --> 00:26:53,310
have on home at 14 but basically on this

00:26:50,670 --> 00:26:55,770
website you'll find these they're called

00:26:53,310 --> 00:26:57,390
places but they're basically landing

00:26:55,770 --> 00:27:00,090
sites that give you all the information

00:26:57,390 --> 00:27:02,010
about a board and if you scroll down at

00:27:00,090 --> 00:27:04,530
the bottom of this website it has all

00:27:02,010 --> 00:27:06,330
the documentation for this board it has

00:27:04,530 --> 00:27:08,940
all the reference designs listed for

00:27:06,330 --> 00:27:11,370
this board as well so here's what the

00:27:08,940 --> 00:27:13,050
documentation section looks like you can

00:27:11,370 --> 00:27:16,080
find all of your hard work all of our

00:27:13,050 --> 00:27:17,430
hardware user guides all of different

00:27:16,080 --> 00:27:18,870
versions of schematics for all the

00:27:17,430 --> 00:27:20,430
different versions of boards that are

00:27:18,870 --> 00:27:21,810
out there there will be the Bill of

00:27:20,430 --> 00:27:24,420
Materials so if you're looking to find

00:27:21,810 --> 00:27:26,940
out what exact part wasn't listed on

00:27:24,420 --> 00:27:29,820
that board built you can find that

00:27:26,940 --> 00:27:32,340
inside of this documentation section I

00:27:29,820 --> 00:27:34,440
also have the layout file so you have a

00:27:32,340 --> 00:27:36,570
PDF version of layout so if you're

00:27:34,440 --> 00:27:37,830
looking at race down a particular trace

00:27:36,570 --> 00:27:39,860
and you need to figure out where it's

00:27:37,830 --> 00:27:42,870
routed on the board that can be helpful

00:27:39,860 --> 00:27:44,370
there's a net length report so for some

00:27:42,870 --> 00:27:46,530
people that are doing high-speed i/o

00:27:44,370 --> 00:27:48,780
design the net length report is

00:27:46,530 --> 00:27:51,150
incredibly important for calculating the

00:27:48,780 --> 00:27:52,650
propagation delay on the board and

00:27:51,150 --> 00:27:54,180
making sure that you're within the

00:27:52,650 --> 00:27:55,890
timing of the the peripherals that

00:27:54,180 --> 00:27:57,860
you're plugging in and so that's where

00:27:55,890 --> 00:28:01,740
that net length report comes in handy

00:27:57,860 --> 00:28:03,120
the getting started guide probably

00:28:01,740 --> 00:28:05,130
should be at the top of the list but the

00:28:03,120 --> 00:28:06,840
getting started guide gives you all the

00:28:05,130 --> 00:28:09,150
instructions on downloading any sort of

00:28:06,840 --> 00:28:10,290
SD card images and getting your board up

00:28:09,150 --> 00:28:12,720
and running and how to plug in the power

00:28:10,290 --> 00:28:14,250
supply and if there's any of those pesky

00:28:12,720 --> 00:28:15,750
little switches on there that need to be

00:28:14,250 --> 00:28:17,430
in the right place and we're to boot

00:28:15,750 --> 00:28:20,460
your board from the SD card all that's

00:28:17,430 --> 00:28:23,070
covered inside of that document there's

00:28:20,460 --> 00:28:26,640
an assembly diagram as well that's

00:28:23,070 --> 00:28:28,080
really more talking about where the

00:28:26,640 --> 00:28:30,630
different components are placed on the

00:28:28,080 --> 00:28:33,120
board in terms of capacitors and

00:28:30,630 --> 00:28:34,190
resistors and things like that so if

00:28:33,120 --> 00:28:35,510
you're looking for a particular

00:28:34,190 --> 00:28:37,280
component

00:28:35,510 --> 00:28:39,110
and you can't quite find that reference

00:28:37,280 --> 00:28:41,570
designator inside the silk screen that

00:28:39,110 --> 00:28:44,420
can be useful for that there is

00:28:41,570 --> 00:28:46,430
mechanical and drill drawing data we got

00:28:44,420 --> 00:28:47,330
lots of questions for 3d models for

00:28:46,430 --> 00:28:49,190
those that are printing their own

00:28:47,330 --> 00:28:53,060
enclosures you can find a steppe model

00:28:49,190 --> 00:28:54,440
up there as well and for when we design

00:28:53,060 --> 00:28:56,900
our board we have to come up with a

00:28:54,440 --> 00:28:59,420
power solution so our power expert Chris

00:28:56,900 --> 00:29:01,130
Hammond he does a lot of work on doing a

00:28:59,420 --> 00:29:02,900
power analysis there's actually a

00:29:01,130 --> 00:29:04,040
worksheet that you can get from Xilinx

00:29:02,900 --> 00:29:07,070
that walks you through doing the

00:29:04,040 --> 00:29:09,020
analysis you tell it how much logic

00:29:07,070 --> 00:29:11,120
resources you're using on the device and

00:29:09,020 --> 00:29:14,030
which peripherals and it'll give you a

00:29:11,120 --> 00:29:16,390
rough answer within 10 or 20 percent of

00:29:14,030 --> 00:29:18,830
how much power the device is going to

00:29:16,390 --> 00:29:21,170
consume so Chris does this for each of

00:29:18,830 --> 00:29:23,810
our boards and we publish that example

00:29:21,170 --> 00:29:28,070
file so as a starting point for you to

00:29:23,810 --> 00:29:29,900
use on alter 96 we also have these

00:29:28,070 --> 00:29:31,760
things called board definition files and

00:29:29,900 --> 00:29:34,610
board definition files are incredibly

00:29:31,760 --> 00:29:37,610
useful for starting a new design inside

00:29:34,610 --> 00:29:40,190
of avato and getting all the predefined

00:29:37,610 --> 00:29:41,630
things that you need for that particular

00:29:40,190 --> 00:29:44,510
design and those predefined things

00:29:41,630 --> 00:29:46,430
include memory parameters for any of the

00:29:44,510 --> 00:29:48,410
memory that's on the board for setting

00:29:46,430 --> 00:29:50,510
up the DDR memory controller we also

00:29:48,410 --> 00:29:52,100
have all the i/os that are specific to

00:29:50,510 --> 00:29:54,290
that board mapped out inside there and

00:29:52,100 --> 00:29:57,620
there's even pin constraints that are

00:29:54,290 --> 00:29:59,330
mapped in behind that so if you're

00:29:57,620 --> 00:30:01,610
starting a new project the best place to

00:29:59,330 --> 00:30:03,950
start is a board definition file if you

00:30:01,610 --> 00:30:06,310
kind of want to go on your own we also

00:30:03,950 --> 00:30:09,530
have the traditional XTC constraints

00:30:06,310 --> 00:30:10,790
provided as a separate file as well so

00:30:09,530 --> 00:30:12,890
you can download that and you can see

00:30:10,790 --> 00:30:17,240
where all the different pins are mapped

00:30:12,890 --> 00:30:19,910
out to and there's a corresponding PCB

00:30:17,240 --> 00:30:21,680
net name that associates with that pin

00:30:19,910 --> 00:30:23,200
and it's all contained inside the

00:30:21,680 --> 00:30:26,150
constraints file that you can download

00:30:23,200 --> 00:30:27,680
so there's a separate section that's for

00:30:26,150 --> 00:30:29,950
reference designs and so reference

00:30:27,680 --> 00:30:34,520
designs are an excellent place to start

00:30:29,950 --> 00:30:37,100
for a new design and it provides a sort

00:30:34,520 --> 00:30:38,960
of hand-holding tutorial in walking

00:30:37,100 --> 00:30:40,490
through recreating in design but we have

00:30:38,960 --> 00:30:45,200
several designs that are available now

00:30:40,490 --> 00:30:46,880
for ultra 96 we have the factory store

00:30:45,200 --> 00:30:48,650
image so if you did something bad to

00:30:46,880 --> 00:30:49,250
your SD card you need to restore it you

00:30:48,650 --> 00:30:52,159
can download

00:30:49,250 --> 00:30:53,870
from here we also have that SD SOC bare

00:30:52,159 --> 00:30:56,510
metal platform this is the same platform

00:30:53,870 --> 00:30:59,270
that Dan used to do that analysis for

00:30:56,510 --> 00:31:01,760
the matrix multiply speed up he did in

00:30:59,270 --> 00:31:03,110
2018 dot - there's now a 2018 dot 3

00:31:01,760 --> 00:31:05,360
version up there which is the latest

00:31:03,110 --> 00:31:07,850
version of to design life's tools we

00:31:05,360 --> 00:31:13,039
also have a base TRD that you can

00:31:07,850 --> 00:31:14,090
download the pink framework for ultra 96

00:31:13,039 --> 00:31:16,220
this is when I want to spend a little

00:31:14,090 --> 00:31:18,350
bit of time talking about so pink is the

00:31:16,220 --> 00:31:20,179
framework that I described earlier it

00:31:18,350 --> 00:31:23,990
has I always provided open-source

00:31:20,179 --> 00:31:26,990
libraries for accessing the programmable

00:31:23,990 --> 00:31:29,090
logic space from the software world and

00:31:26,990 --> 00:31:31,760
it does that they provide a Python

00:31:29,090 --> 00:31:34,340
library that enables you to reload the

00:31:31,760 --> 00:31:37,820
bitstream inside the programmable logic

00:31:34,340 --> 00:31:40,400
and then also to access the memory space

00:31:37,820 --> 00:31:42,890
of that from a Python application so we

00:31:40,400 --> 00:31:44,299
got four different demos upstairs so if

00:31:42,890 --> 00:31:46,909
you're interested in seeing like how you

00:31:44,299 --> 00:31:48,770
might be able to use that and/or a rapid

00:31:46,909 --> 00:31:50,150
prototype your application I'd be happy

00:31:48,770 --> 00:31:55,750
to talk to you more about it at the

00:31:50,150 --> 00:31:59,000
table upstairs and show you it in action

00:31:55,750 --> 00:32:03,049
yeah we got a question go ahead how long

00:31:59,000 --> 00:32:06,080
does it take to reload the FPGA you know

00:32:03,049 --> 00:32:09,429
from one designed to another is it ten

00:32:06,080 --> 00:32:11,330
tens of seconds or milliseconds or

00:32:09,429 --> 00:32:12,860
that's a really good question so the

00:32:11,330 --> 00:32:15,710
question is how long does it take to

00:32:12,860 --> 00:32:17,900
reload the FPGA so when I say reload the

00:32:15,710 --> 00:32:19,580
FPGA what I'm talking about is you you

00:32:17,900 --> 00:32:22,700
load this bit stream file that contains

00:32:19,580 --> 00:32:24,350
the bit pattern to configure basically

00:32:22,700 --> 00:32:25,760
assign us a configuration memory and

00:32:24,350 --> 00:32:27,860
sets up all the different gates that are

00:32:25,760 --> 00:32:30,049
inside the device it is completely

00:32:27,860 --> 00:32:32,480
dependent upon the density of the device

00:32:30,049 --> 00:32:33,620
so if you have a larger device it's

00:32:32,480 --> 00:32:35,480
going to take longer because there's

00:32:33,620 --> 00:32:39,140
more programmable logic for you to

00:32:35,480 --> 00:32:41,809
program I believe for the ziyu device

00:32:39,140 --> 00:32:43,460
it's less than a second that you're it

00:32:41,809 --> 00:32:45,620
takes to configure it you can actually

00:32:43,460 --> 00:32:47,059
dynamically reconfigure that so once you

00:32:45,620 --> 00:32:50,419
have the system up and running Linux

00:32:47,059 --> 00:32:52,640
there's actually a device that's exposed

00:32:50,419 --> 00:32:54,650
to Linux that you can just pipe a new

00:32:52,640 --> 00:32:56,740
bit stream into and you can reconfigure

00:32:54,650 --> 00:32:59,149
that bit stream on-the-fly from Linux

00:32:56,740 --> 00:33:00,919
and there's there anywhere factor in

00:32:59,149 --> 00:33:01,990
this I mean you know like a flash it

00:33:00,919 --> 00:33:03,220
gets weird if you like

00:33:01,990 --> 00:33:04,840
to a time and time again is there any

00:33:03,220 --> 00:33:07,929
rear factor no that's a really good

00:33:04,840 --> 00:33:09,309
question so the question is there any

00:33:07,929 --> 00:33:13,030
limit to the number of times you can

00:33:09,309 --> 00:33:15,730
reconfigure an FPGA it may be different

00:33:13,030 --> 00:33:17,679
for other FPGAs but for zomick's s fpga

00:33:15,730 --> 00:33:19,690
is it's all SRAM base so you can reload

00:33:17,679 --> 00:33:26,170
it until the cows come home you'll

00:33:19,690 --> 00:33:27,610
you'll never wear the thing out so going

00:33:26,170 --> 00:33:30,490
back to the tutorial so these are very

00:33:27,610 --> 00:33:32,140
basic tutorials so if you don't have

00:33:30,490 --> 00:33:35,710
enough time to go and take a technical

00:33:32,140 --> 00:33:36,820
training course these tutorials are very

00:33:35,710 --> 00:33:39,070
similar they'll walk you through

00:33:36,820 --> 00:33:41,020
creating a very basic hardware platform

00:33:39,070 --> 00:33:44,020
and then exporting that hardware

00:33:41,020 --> 00:33:47,470
platform into the Xilinx SDK creating a

00:33:44,020 --> 00:33:48,970
first stage boot let's see first thing

00:33:47,470 --> 00:33:50,440
you got to do is you got to run hello

00:33:48,970 --> 00:33:52,809
world just to make sure you have your

00:33:50,440 --> 00:33:54,820
you are it setup right and then there's

00:33:52,809 --> 00:33:56,770
some test applications that that are on

00:33:54,820 --> 00:33:58,750
there that'll help you verify that

00:33:56,770 --> 00:34:01,030
you've set up your hardware platform

00:33:58,750 --> 00:34:02,080
correctly tutorial for watched you

00:34:01,030 --> 00:34:04,210
through creating the first stage

00:34:02,080 --> 00:34:06,160
bootloader and it washed you through

00:34:04,210 --> 00:34:08,200
booting your system from the micro SD

00:34:06,160 --> 00:34:11,320
card instead of launching things over J

00:34:08,200 --> 00:34:12,850
tag we also have an example up there and

00:34:11,320 --> 00:34:15,369
how do you do accelerated image

00:34:12,850 --> 00:34:18,340
classification be a binary neural

00:34:15,369 --> 00:34:19,750
network so Craig talked a little bit

00:34:18,340 --> 00:34:22,359
about this in his course but there's

00:34:19,750 --> 00:34:24,129
this movement towards moving towards

00:34:22,359 --> 00:34:26,619
smaller integer types in order to get

00:34:24,129 --> 00:34:29,619
better better efficiency out of your

00:34:26,619 --> 00:34:33,070
neural networks without sacrificing a

00:34:29,619 --> 00:34:34,389
whole lot of accuracy that one's

00:34:33,070 --> 00:34:36,970
downloadable and something you can run

00:34:34,389 --> 00:34:40,210
and then there's also the matrix

00:34:36,970 --> 00:34:43,690
multiply example that Dan showed last

00:34:40,210 --> 00:34:46,629
fall in Vancouver and lots more stuff

00:34:43,690 --> 00:34:47,889
come in it we've been working really

00:34:46,629 --> 00:34:50,530
hard to get the technical training

00:34:47,889 --> 00:34:53,350
courses out but we work on reference

00:34:50,530 --> 00:34:54,730
designs all the time so you can expect

00:34:53,350 --> 00:34:57,820
to see more stuff going up there pretty

00:34:54,730 --> 00:34:59,230
soon it looks like I got about ten

00:34:57,820 --> 00:35:01,050
minutes left so I'm gonna try to go

00:34:59,230 --> 00:35:04,540
through this stuff as best I can

00:35:01,050 --> 00:35:06,700
Ultra 96 support forum so if you got

00:35:04,540 --> 00:35:09,820
into element 14 and you search up to

00:35:06,700 --> 00:35:11,500
Ultra 96 support forums you'll find this

00:35:09,820 --> 00:35:13,060
thing right here you can actually get to

00:35:11,500 --> 00:35:14,770
it from this short URL that I set up

00:35:13,060 --> 00:35:15,559
right here but basically all the folks

00:35:14,770 --> 00:35:17,989
in my group

00:35:15,559 --> 00:35:20,299
at work on altar 96 we're all tasked

00:35:17,989 --> 00:35:21,979
with monitoring this community so if you

00:35:20,299 --> 00:35:24,529
ask a question here you're gonna get an

00:35:21,979 --> 00:35:26,809
answer from us if you ask a question and

00:35:24,529 --> 00:35:28,579
discord there's only a few subset of us

00:35:26,809 --> 00:35:30,890
that are monitoring discord but all of

00:35:28,579 --> 00:35:32,630
us are responding to questions that go

00:35:30,890 --> 00:35:34,640
up on the forum and I want to highlight

00:35:32,630 --> 00:35:36,739
on the forum there is a real good

00:35:34,640 --> 00:35:38,749
benefit for us directing everybody to

00:35:36,739 --> 00:35:42,619
the forum's is that the forums have a

00:35:38,749 --> 00:35:44,839
pretty long life cycle and so you be

00:35:42,619 --> 00:35:47,239
sure if somebody's asking a question you

00:35:44,839 --> 00:35:48,499
know though there's probably about 20

00:35:47,239 --> 00:35:50,859
other people that maybe have the same

00:35:48,499 --> 00:35:52,880
question but don't know how to ask it or

00:35:50,859 --> 00:35:55,339
don't know where to ask that question

00:35:52,880 --> 00:35:58,579
and I found answers to all sorts of

00:35:55,339 --> 00:36:00,410
questions you know years after the

00:35:58,579 --> 00:36:02,539
answer has been posted and others have

00:36:00,410 --> 00:36:04,880
kind of blazed the trail for me so in

00:36:02,539 --> 00:36:07,430
terms of helping other people with their

00:36:04,880 --> 00:36:11,869
design the best place is the is the

00:36:07,430 --> 00:36:13,789
forums that's the other resource that I

00:36:11,869 --> 00:36:16,609
wanted to point out as well so Xilinx

00:36:13,789 --> 00:36:17,749
has launched a community portal and the

00:36:16,609 --> 00:36:21,380
thing that's really interesting about

00:36:17,749 --> 00:36:23,029
the community portal is that any

00:36:21,380 --> 00:36:26,929
projects that are going on out there in

00:36:23,029 --> 00:36:28,729
the world that are Xilinx related Silas

00:36:26,929 --> 00:36:32,079
has those customers posting those

00:36:28,729 --> 00:36:34,489
projects up here and they get a lot of

00:36:32,079 --> 00:36:37,219
projects from hackster IO feeding

00:36:34,489 --> 00:36:39,170
through to this site there's a whole

00:36:37,219 --> 00:36:42,410
entire section that's dedicated to open

00:36:39,170 --> 00:36:44,449
source there's a set of forums that

00:36:42,410 --> 00:36:48,019
Xilinx runs as well that are specific to

00:36:44,449 --> 00:36:50,749
like Silas tools and silence technology

00:36:48,019 --> 00:36:53,199
inside there FPGAs they have all that

00:36:50,749 --> 00:36:56,630
accessible from this community portal

00:36:53,199 --> 00:36:59,390
there's a Xilinx wiki that has a ton of

00:36:56,630 --> 00:37:02,089
information in fact I did a I did a

00:36:59,390 --> 00:37:03,769
presentation this morning on doing

00:37:02,089 --> 00:37:06,229
secure boot and in telling the

00:37:03,769 --> 00:37:09,619
information that I have for secure boot

00:37:06,229 --> 00:37:12,259
is publicly available on a wiki site

00:37:09,619 --> 00:37:13,789
that I posted on their course they also

00:37:12,259 --> 00:37:15,229
have a link to the zionists github where

00:37:13,789 --> 00:37:17,630
you can find all the open source stuff

00:37:15,229 --> 00:37:20,719
that silence is posted there's a section

00:37:17,630 --> 00:37:22,849
that's dedicated to xu p XP p is the

00:37:20,719 --> 00:37:24,380
sonics university program for so for

00:37:22,849 --> 00:37:27,109
those of you who are involved in the

00:37:24,380 --> 00:37:27,589
academic space that may be something

00:37:27,109 --> 00:37:29,809
that you

00:37:27,589 --> 00:37:31,729
interested in checking out there's a

00:37:29,809 --> 00:37:34,999
another section it's dedicated to cloud

00:37:31,729 --> 00:37:38,599
so silences preferred cloud providers

00:37:34,999 --> 00:37:40,160
AWS they do not only stuff for IOT up in

00:37:38,599 --> 00:37:44,210
the cloud but they do a ton of machine

00:37:40,160 --> 00:37:45,469
learning stuff and then they also they

00:37:44,210 --> 00:37:47,089
do a lot of stuff in terms of

00:37:45,469 --> 00:37:50,089
virtualizing their tools up inside the

00:37:47,089 --> 00:37:51,739
cloud as well there's videos to have a

00:37:50,089 --> 00:37:53,960
bunch of different tutorials on what you

00:37:51,739 --> 00:37:55,460
can do with science technology and then

00:37:53,960 --> 00:37:57,380
any events that zionists is

00:37:55,460 --> 00:37:59,599
participating in they have those listed

00:37:57,380 --> 00:38:01,009
up there as well so i'd encourage you to

00:37:59,599 --> 00:38:03,499
check out the zionist community portal

00:38:01,009 --> 00:38:04,999
it's a great resource especially for

00:38:03,499 --> 00:38:06,619
those that are looking for the open

00:38:04,999 --> 00:38:10,729
source initiatives that science is

00:38:06,619 --> 00:38:13,039
pioneering alter 96b too so i gotten a

00:38:10,729 --> 00:38:15,200
lot of questions about ultra 96 v2 so

00:38:13,039 --> 00:38:17,299
I'm really excited about getting this

00:38:15,200 --> 00:38:19,339
video posted out so I can kind of spread

00:38:17,299 --> 00:38:21,529
the word on it so what is ultra 96 be -

00:38:19,339 --> 00:38:23,539
I got a question earlier this week from

00:38:21,529 --> 00:38:26,420
somebody and they said well why is it

00:38:23,539 --> 00:38:28,249
100 euros more there was a discrepancy

00:38:26,420 --> 00:38:30,349
on the website we're working on getting

00:38:28,249 --> 00:38:32,989
that cleared up that was an erroneous

00:38:30,349 --> 00:38:34,999
price that was listed there's no change

00:38:32,989 --> 00:38:36,769
in the price for alternating 6b -

00:38:34,999 --> 00:38:39,710
compared to the v1 board it's still

00:38:36,769 --> 00:38:41,660
giving me $249 which I don't know

00:38:39,710 --> 00:38:44,569
exactly what it translates in euro but

00:38:41,660 --> 00:38:48,229
should we should be exactly what the v1

00:38:44,569 --> 00:38:50,900
board was sold for so it's gonna replace

00:38:48,229 --> 00:38:52,460
alter 96 I got a board up here if in

00:38:50,900 --> 00:38:54,799
case you want to take a look closer look

00:38:52,460 --> 00:38:59,479
at it but it's based upon the consumer

00:38:54,799 --> 00:39:01,400
edition of 96 boards form-factor state

00:38:59,479 --> 00:39:03,589
still targeted to the same applications

00:39:01,400 --> 00:39:06,920
artificial intelligence machine learning

00:39:03,589 --> 00:39:08,569
and better processing and robotics so

00:39:06,920 --> 00:39:11,269
what's included with that same thing

00:39:08,569 --> 00:39:13,009
that the b1 board was including inside

00:39:11,269 --> 00:39:15,920
of its kit comes with a 16 gigabyte

00:39:13,009 --> 00:39:17,539
micro SD card which you can either run

00:39:15,920 --> 00:39:20,749
the out of box image or you can load

00:39:17,539 --> 00:39:24,499
pink image you can load a binary

00:39:20,749 --> 00:39:26,299
quantized neural network demo on it one

00:39:24,499 --> 00:39:28,309
thing that is really key about this

00:39:26,299 --> 00:39:30,440
though is it comes with an SD SOC

00:39:28,309 --> 00:39:34,279
license and I I believe the value of

00:39:30,440 --> 00:39:35,900
that SD SOC license is actually way more

00:39:34,279 --> 00:39:37,640
than the Bordas so this is a really good

00:39:35,900 --> 00:39:40,789
place for people to get started with st

00:39:37,640 --> 00:39:41,540
SOC I included the part number in case

00:39:40,789 --> 00:39:42,890
you want to search

00:39:41,540 --> 00:39:45,320
that part number if you're looking to

00:39:42,890 --> 00:39:47,540
order it the order entry is if it is

00:39:45,320 --> 00:39:48,260
open now so you can place your order for

00:39:47,540 --> 00:39:50,330
it

00:39:48,260 --> 00:39:52,400
the we're not expecting the board's to

00:39:50,330 --> 00:39:56,210
ship until sometime towards the end of

00:39:52,400 --> 00:39:57,590
April though excuse me

00:39:56,210 --> 00:39:59,720
and then um you can find more

00:39:57,590 --> 00:40:03,290
information on alter ninety-six org or

00:39:59,720 --> 00:40:05,570
on the ninety-six boards website so

00:40:03,290 --> 00:40:08,450
here's the black diagram very similar to

00:40:05,570 --> 00:40:12,590
what you saw for ultra 96b one you get

00:40:08,450 --> 00:40:15,350
two gigs of LPG DRAM with it we are

00:40:12,590 --> 00:40:17,600
changing the micron device that was on

00:40:15,350 --> 00:40:19,550
the v1 that one went into life on us so

00:40:17,600 --> 00:40:31,010
we're putting on another device on there

00:40:19,550 --> 00:40:32,750
that has a longer road map one of the

00:40:31,010 --> 00:40:35,450
other things that's changing we have a

00:40:32,750 --> 00:40:39,500
Wi-Fi Bluetooth combo device that's

00:40:35,450 --> 00:40:43,610
slightly different on the b2 board we're

00:40:39,500 --> 00:40:47,390
actually using a microchip it's a wait

00:40:43,610 --> 00:40:49,790
actually it Atmel what Wilke 3000 device

00:40:47,390 --> 00:40:51,980
and so this device actually has better

00:40:49,790 --> 00:40:55,330
country certification and i'll talk

00:40:51,980 --> 00:40:56,630
about that in a little bit more detail

00:40:55,330 --> 00:40:58,160
excuse me

00:40:56,630 --> 00:40:59,570
the other thing that's different about

00:40:58,160 --> 00:41:01,850
this device we have a different power

00:40:59,570 --> 00:41:04,660
management IC so the new power

00:41:01,850 --> 00:41:10,600
management IC that we have on this board

00:41:04,660 --> 00:41:15,710
it's actually a Infineon part so that

00:41:10,600 --> 00:41:17,600
particular part it has sm bus so you can

00:41:15,710 --> 00:41:20,090
monitor like two voltage rails and stuff

00:41:17,600 --> 00:41:25,610
like that on the board and monitor your

00:41:20,090 --> 00:41:27,980
power consumption so these are other

00:41:25,610 --> 00:41:31,010
things that changing we had a TI power

00:41:27,980 --> 00:41:32,150
solution on there that was mmm not not

00:41:31,010 --> 00:41:34,340
all that great it worked

00:41:32,150 --> 00:41:36,950
for v1 but this one from Infineon is

00:41:34,340 --> 00:41:39,200
better also the microchip Wi-Fi

00:41:36,950 --> 00:41:41,300
bluetooth that one's also not TI that

00:41:39,200 --> 00:41:42,500
you found on the v1 this one's better

00:41:41,300 --> 00:41:45,170
and I'll show you why

00:41:42,500 --> 00:41:50,510
we upgraded the memory we also have an

00:41:45,170 --> 00:41:54,150
IDT clock that's better we have an epoch

00:41:50,510 --> 00:41:56,910
on crystal that is easier to get

00:41:54,150 --> 00:41:59,220
than the old one they also have a

00:41:56,910 --> 00:42:01,920
dialogue on off controller and not the

00:41:59,220 --> 00:42:05,339
ADI one which was also hard to get we

00:42:01,920 --> 00:42:09,690
have a TI SD card controller to help

00:42:05,339 --> 00:42:12,390
save costs on there we have te a molex

00:42:09,690 --> 00:42:14,420
connectors not the other more difficult

00:42:12,390 --> 00:42:16,470
to find Worth and helps connectors and

00:42:14,420 --> 00:42:17,999
we have gone through and we've stripped

00:42:16,470 --> 00:42:19,999
all the components on the board to make

00:42:17,999 --> 00:42:23,099
sure that there's industrial-grade

00:42:19,999 --> 00:42:25,769
component options with the exception of

00:42:23,099 --> 00:42:28,619
SD card cage and barrel jack those are

00:42:25,769 --> 00:42:30,710
impossible to find parts that are

00:42:28,619 --> 00:42:33,749
industrial rated but everything else

00:42:30,710 --> 00:42:36,450
electrical is industrial rated so for

00:42:33,749 --> 00:42:40,680
those of you they're just dying to run

00:42:36,450 --> 00:42:42,660
your ultra 96 at minus 42 + 85 you're

00:42:40,680 --> 00:42:45,390
gonna have an option for you and you

00:42:42,660 --> 00:42:47,789
didn't have that option would be one so

00:42:45,390 --> 00:42:50,130
here's the microchip combo the Wi-Fi

00:42:47,789 --> 00:42:51,630
Bluetooth combo these are all the pre

00:42:50,130 --> 00:42:54,450
certified countries that you have

00:42:51,630 --> 00:42:57,660
available with this chipset so you can

00:42:54,450 --> 00:42:59,220
see there there's Thailand's down there

00:42:57,660 --> 00:43:02,970
so that's really good news so we can

00:42:59,220 --> 00:43:04,559
ship the boards in to Bangkok there was

00:43:02,970 --> 00:43:07,349
another one I think China was the other

00:43:04,559 --> 00:43:10,970
big one on here to that we were looking

00:43:07,349 --> 00:43:13,079
to get on the list but the good news is

00:43:10,970 --> 00:43:15,059
market chips done a lot of work for the

00:43:13,079 --> 00:43:17,759
certification and if you do a derivative

00:43:15,059 --> 00:43:19,049
work based upon the ultra 96 design then

00:43:17,759 --> 00:43:20,700
you don't have to redo that

00:43:19,049 --> 00:43:23,369
certification work you can leverage

00:43:20,700 --> 00:43:26,700
their certifications to get your product

00:43:23,369 --> 00:43:28,470
out into the rest of the world ok so

00:43:26,700 --> 00:43:29,970
we're almost there there's a few things

00:43:28,470 --> 00:43:32,430
that I added in here that I wanted to

00:43:29,970 --> 00:43:35,670
cover so the programmable logic

00:43:32,430 --> 00:43:37,739
advantage total cost of ownership can be

00:43:35,670 --> 00:43:39,299
way lower even though you may get a

00:43:37,739 --> 00:43:41,819
little bit of a sticker shock when you

00:43:39,299 --> 00:43:43,019
find out how much fpga devices are we

00:43:41,819 --> 00:43:44,910
talked a little bit about this in the

00:43:43,019 --> 00:43:47,069
previous course it actually can be lower

00:43:44,910 --> 00:43:50,039
cost in the run in the long run since

00:43:47,069 --> 00:43:53,819
you're getting higher performance per

00:43:50,039 --> 00:43:56,430
watt of energy I mean Thomas mention

00:43:53,819 --> 00:43:58,650
this it's like you can save money in the

00:43:56,430 --> 00:44:00,930
long run by spending less power over the

00:43:58,650 --> 00:44:05,579
life of your product if you're putting

00:44:00,930 --> 00:44:06,780
something into the data center since you

00:44:05,579 --> 00:44:09,630
can per

00:44:06,780 --> 00:44:11,640
a hardware update to the programmable

00:44:09,630 --> 00:44:13,860
logic by downloading this new bit stream

00:44:11,640 --> 00:44:15,240
file over-the-air that can help you

00:44:13,860 --> 00:44:18,030
reduce your maintenance cost by

00:44:15,240 --> 00:44:20,940
eliminating the need to roll a truck and

00:44:18,030 --> 00:44:22,770
send out repair technicians it's the

00:44:20,940 --> 00:44:24,720
lowest cost custom hardware option for

00:44:22,770 --> 00:44:26,430
low to medium volume production so

00:44:24,720 --> 00:44:27,990
unless you got a suitcase of money and

00:44:26,430 --> 00:44:30,630
you're building like a bunch of Asics

00:44:27,990 --> 00:44:34,230
this is gonna be your best bang for your

00:44:30,630 --> 00:44:36,300
buck Silas has an extensive IP library

00:44:34,230 --> 00:44:37,710
that they provide and a majority of

00:44:36,300 --> 00:44:41,090
those IP cores that are included with

00:44:37,710 --> 00:44:43,020
Vivaro those are provided for free and

00:44:41,090 --> 00:44:44,940
Thomas has the best tools to quickly

00:44:43,020 --> 00:44:47,160
develop and protect your own custom

00:44:44,940 --> 00:44:48,540
programmable logic IP and so inside

00:44:47,160 --> 00:44:50,220
those technical training courses we

00:44:48,540 --> 00:44:52,620
actually walk you through the steps to

00:44:50,220 --> 00:44:54,690
create your own IP block so if you're

00:44:52,620 --> 00:44:57,270
really interested in in creating your

00:44:54,690 --> 00:44:59,850
own IP block that standardized it based

00:44:57,270 --> 00:45:01,590
upon AXI which is an arm open Amba

00:44:59,850 --> 00:45:03,990
standard those technical training

00:45:01,590 --> 00:45:08,070
courses are really to your advantage to

00:45:03,990 --> 00:45:10,800
go through and learn how to do that so

00:45:08,070 --> 00:45:13,290
based on arm standards we have writing

00:45:10,800 --> 00:45:14,760
you use segment solutions that help you

00:45:13,290 --> 00:45:16,710
differentiate your product faster

00:45:14,760 --> 00:45:19,140
there's tons of examples out there that

00:45:16,710 --> 00:45:21,440
both aDNA and Xilinx provide around

00:45:19,140 --> 00:45:25,350
automotive aerospace and defense

00:45:21,440 --> 00:45:27,270
broadcast and professional audio video

00:45:25,350 --> 00:45:29,220
consumer electronics data center

00:45:27,270 --> 00:45:31,830
emulation prototyping high performance

00:45:29,220 --> 00:45:32,850
computing industrial medical test and

00:45:31,830 --> 00:45:36,710
measurement wired and wireless

00:45:32,850 --> 00:45:40,020
communications and now AI stuff as well

00:45:36,710 --> 00:45:41,760
so in summary there's still some hurdles

00:45:40,020 --> 00:45:45,540
along the way you make your own IP

00:45:41,760 --> 00:45:48,300
source open open source but the Xilinx

00:45:45,540 --> 00:45:50,100
tools are not open source so there's

00:45:48,300 --> 00:45:51,810
there's some criticisms going around

00:45:50,100 --> 00:45:53,880
going on around that we heard a lot of

00:45:51,810 --> 00:45:57,060
them here it's probably not too

00:45:53,880 --> 00:45:59,670
surprising but they have the best tools

00:45:57,060 --> 00:46:00,600
that are out there if somebody can do it

00:45:59,670 --> 00:46:05,460
better in open source

00:46:00,600 --> 00:46:07,830
I'm sure nice to be open to listening

00:46:05,460 --> 00:46:09,870
about that the coprocessor and the

00:46:07,830 --> 00:46:13,130
hardware accelerator design that you do

00:46:09,870 --> 00:46:16,350
requires both hardware and software

00:46:13,130 --> 00:46:18,690
skills to achieve exceptional results so

00:46:16,350 --> 00:46:20,650
I'm sure you've been in those positions

00:46:18,690 --> 00:46:23,770
in the past where you're the software

00:46:20,650 --> 00:46:25,180
guy arguing with the hardware guy and

00:46:23,770 --> 00:46:26,559
you're at each other's throats maybe

00:46:25,180 --> 00:46:30,309
you're pointing screwdrivers at each

00:46:26,559 --> 00:46:32,289
other about to get messy you really have

00:46:30,309 --> 00:46:33,910
to take the system design approach when

00:46:32,289 --> 00:46:35,170
it comes to doing stuff with the FPGA

00:46:33,910 --> 00:46:37,210
there's some stuff that you can do

00:46:35,170 --> 00:46:38,829
better in the software world there's

00:46:37,210 --> 00:46:40,329
some stuff that you can do better inside

00:46:38,829 --> 00:46:43,690
the hardware world and partitioning up

00:46:40,329 --> 00:46:45,730
your system properly is an engineering

00:46:43,690 --> 00:46:49,480
work yeah that's the art of engineering

00:46:45,730 --> 00:46:52,420
in in balancing those trade-offs but in

00:46:49,480 --> 00:46:54,309
the end it's worth the effort because at

00:46:52,420 --> 00:46:56,140
the end you have something custom that

00:46:54,309 --> 00:46:57,730
differentiates you from all your

00:46:56,140 --> 00:46:59,619
competitors and it's hard for them to

00:46:57,730 --> 00:47:01,510
catch up with you so we have some

00:46:59,619 --> 00:47:04,180
examples of this going on upstairs like

00:47:01,510 --> 00:47:05,680
those guys at Rockchip and those guys at

00:47:04,180 --> 00:47:07,450
bit me they created their own custom

00:47:05,680 --> 00:47:08,890
accelerator that's their IP they own

00:47:07,450 --> 00:47:11,049
that and it's gonna be really hard for

00:47:08,890 --> 00:47:13,450
somebody else to copy that

00:47:11,049 --> 00:47:15,250
one folks they came by and they said we

00:47:13,450 --> 00:47:16,960
prototyped it in on the science platform

00:47:15,250 --> 00:47:19,930
so the science platforms are great for

00:47:16,960 --> 00:47:22,240
doing ASIC emulation so in the end you

00:47:19,930 --> 00:47:25,809
know Xilinx is a great company to work

00:47:22,240 --> 00:47:27,700
with and Abnett we help designers put

00:47:25,809 --> 00:47:29,740
together example designs to get that in

00:47:27,700 --> 00:47:32,260
your hands the other benefit is you get

00:47:29,740 --> 00:47:34,270
the exact hardware peripheral set that

00:47:32,260 --> 00:47:36,369
you need for your arm based application

00:47:34,270 --> 00:47:38,980
so since everything based on axion er

00:47:36,369 --> 00:47:44,170
connects you get a exact peripheral set

00:47:38,980 --> 00:47:46,569
you need 50 i2c peripherals I 50 i2c

00:47:44,170 --> 00:47:47,829
Master peripherals on there you just got

00:47:46,569 --> 00:47:51,220
to get a part that's big enough to drop

00:47:47,829 --> 00:47:54,880
50 different ITC AXI course inside the

00:47:51,220 --> 00:47:57,549
programmable logic you can secure your

00:47:54,880 --> 00:47:59,410
smart hardware and your own intellectual

00:47:57,549 --> 00:48:01,329
property deep within the fabric of your

00:47:59,410 --> 00:48:02,740
design I had a course that talked a

00:48:01,329 --> 00:48:04,599
little bit more about security you can

00:48:02,740 --> 00:48:06,369
actually cryptographically sign and

00:48:04,599 --> 00:48:07,480
encrypt your bit stream file so that

00:48:06,369 --> 00:48:10,230
nobody can go in there and

00:48:07,480 --> 00:48:12,819
reverse-engineer it and create a set of

00:48:10,230 --> 00:48:14,380
products set up your products that

00:48:12,819 --> 00:48:16,539
they're selling out on the gray market

00:48:14,380 --> 00:48:18,430
you can also future-proof your designed

00:48:16,539 --> 00:48:19,869
by enabling you to do some update of

00:48:18,430 --> 00:48:22,839
that hardware through just the

00:48:19,869 --> 00:48:24,849
downloadable update so imagine that you

00:48:22,839 --> 00:48:29,470
could do a hardware update by just

00:48:24,849 --> 00:48:32,049
downloading the latest software update

00:48:29,470 --> 00:48:33,680
to your product and inside of that you

00:48:32,049 --> 00:48:37,369
have packed a bit stream file

00:48:33,680 --> 00:48:38,839
it's the programmable logic one more

00:48:37,369 --> 00:48:41,150
thing I want to mention I still got a

00:48:38,839 --> 00:48:43,339
few minutes here left this is a really

00:48:41,150 --> 00:48:44,900
cool program that I actually just found

00:48:43,339 --> 00:48:46,640
out about but it's been going on for

00:48:44,900 --> 00:48:49,279
over a year there is a path to

00:48:46,640 --> 00:48:52,640
programmable program it's been run by

00:48:49,279 --> 00:48:54,380
element14 our colleague Jason my old

00:48:52,640 --> 00:48:56,839
colleague Jason Mathurin Craig is

00:48:54,380 --> 00:48:58,940
current colleague Jason through him he's

00:48:56,839 --> 00:49:01,130
been working on this with a helmet 14

00:48:58,940 --> 00:49:03,890
folks and it's around the minis at

00:49:01,130 --> 00:49:07,250
hardware these guys started back in July

00:49:03,890 --> 00:49:08,990
we took a set of folks and we set them

00:49:07,250 --> 00:49:11,839
down a training path to train them up on

00:49:08,990 --> 00:49:13,940
how to use the Sonics tools they were

00:49:11,839 --> 00:49:15,740
required as part of this program to

00:49:13,940 --> 00:49:20,630
start a new project and blog on their

00:49:15,740 --> 00:49:22,490
work up on element 14 but what they got

00:49:20,630 --> 00:49:24,740
out of it is some really cool stuff so

00:49:22,490 --> 00:49:27,890
they got a book on how to design with a

00:49:24,740 --> 00:49:30,559
nice FPGAs they got this really super

00:49:27,890 --> 00:49:32,420
fancy flute Kinect multimeter and then

00:49:30,559 --> 00:49:34,160
they also got a pro's kit electronic

00:49:32,420 --> 00:49:35,960
tool kit so that way if they did some

00:49:34,160 --> 00:49:38,960
hardware customization they have the

00:49:35,960 --> 00:49:39,890
tools to do that so talking with some of

00:49:38,960 --> 00:49:42,289
the folks we're gonna start a new

00:49:39,890 --> 00:49:43,970
program it looks like so if you know

00:49:42,289 --> 00:49:46,400
anybody or if you yourself are is

00:49:43,970 --> 00:49:48,770
interested in enrolling please stop by

00:49:46,400 --> 00:49:50,779
and talk to me and we can capture your

00:49:48,770 --> 00:49:53,720
details and make sure you get on the

00:49:50,779 --> 00:49:55,069
list so out of time here so I just want

00:49:53,720 --> 00:49:56,480
to thank the following people

00:49:55,069 --> 00:49:58,880
Thomas Carrick he's a retired

00:49:56,480 --> 00:50:00,500
electronics engineer that's my dad he's

00:49:58,880 --> 00:50:02,420
the one who helped me don't dive inside

00:50:00,500 --> 00:50:04,309
the dumpster and fish out that x86

00:50:02,420 --> 00:50:06,890
machine that I was sewing on the first

00:50:04,309 --> 00:50:08,930
slide Ron right he is actually my

00:50:06,890 --> 00:50:10,849
predecessor so he's a retired software

00:50:08,930 --> 00:50:14,390
engineer he used to work for Abnett I

00:50:10,849 --> 00:50:16,190
based a lot of the information and some

00:50:14,390 --> 00:50:17,690
presentations that he put together quite

00:50:16,190 --> 00:50:20,539
a while ago around the micro blaze

00:50:17,690 --> 00:50:23,630
processor that's running on the Abnett

00:50:20,539 --> 00:50:25,279
stuff so I had a lot of want to pass on

00:50:23,630 --> 00:50:27,109
some kudos to him because I wouldn't be

00:50:25,279 --> 00:50:29,809
in the place where I am today without

00:50:27,109 --> 00:50:31,940
Ron's help also Adam Taylor

00:50:29,809 --> 00:50:33,740
he's also an electronics engineer he's

00:50:31,940 --> 00:50:36,829
done a ton of work that we've been able

00:50:33,740 --> 00:50:38,809
to capitalize on and have not also Dan

00:50:36,829 --> 00:50:42,109
rosewood for putting up the training and

00:50:38,809 --> 00:50:44,049
shown at Vancouver last fall it's a

00:50:42,109 --> 00:50:46,400
terrific engineer to work with and

00:50:44,049 --> 00:50:48,289
really really smart and when it comes to

00:50:46,400 --> 00:50:50,480
the SD SOC tool he knows that tool

00:50:48,289 --> 00:50:53,180
inside now then I also want to thank

00:50:50,480 --> 00:50:54,289
Brian Fletcher he's my old boss he

00:50:53,180 --> 00:50:56,630
actually encouraged me to put together

00:50:54,289 --> 00:50:58,400
this presentation because we get tons

00:50:56,630 --> 00:51:01,880
and tons of questions from folks on

00:50:58,400 --> 00:51:04,520
where to get started with using FPGAs so

00:51:01,880 --> 00:51:06,049
I thank you all for attending and if you

00:51:04,520 --> 00:51:07,490
guys have any questions I think we have

00:51:06,049 --> 00:51:10,130
maybe like a few more minutes before we

00:51:07,490 --> 00:51:13,580
get kicked out but thank you all I

00:51:10,130 --> 00:51:16,719
appreciate it thanks for having me

00:51:13,580 --> 00:51:16,719

YouTube URL: https://www.youtube.com/watch?v=TOuP8xaNonU


