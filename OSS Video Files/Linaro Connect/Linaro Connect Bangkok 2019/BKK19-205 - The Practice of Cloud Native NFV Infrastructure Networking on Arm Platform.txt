Title: BKK19-205 - The Practice of Cloud Native NFV Infrastructure Networking on Arm Platform
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
Cloud Native is an approach to building and running applications that exploit the advantages of the cloud computing delivery model. It typically means to use containerized open source software stack, dynamically orchestrated and managed to optimize resource utilization.
To build cloud native NFV infrastructure, in addition to containerized NFV orchestration engine, such as Kubernetes, we need high performance, scalable and micro-service oriented networking solutions to enable the seamless connection of cloud native applications.
In this presentation, we would like to show cloud native NFV infrastructure networking solutions on Arm platforms. It will cover the following on Arm:
1. The building of Cloud Native NFV infrastructure with high performance networking support on arm platform; 
2. Contiv/VPP based Kubernetes container networking solutions on arm and its performance evaluation;
3. Service Function Chain (SFC) and Network Service Mesh(NSM) enhancement for cloud native applications based on Contiv/VPP;
4. Cloud native applications fast deployment and service management;
5. Other cloud native networking solutions available on arm.

Trevor Tao / Staff Software Engineer Arm Ltd
Zijin Tao is a Ph.D in Computer Networking, who has worked in this area for more than 15 years. He has worked as a network engineer in research institute of university for more than 10 years. Then he worked in IBM for almost 5 years for SDN and Cloud Networking. 
Now he is working in Arm as an Staff Software Engineer, mainly on networking infrastructure open source projects.
Zijin Tao has filed more than 10 patents and papers in Computer Networking.
Captions: 
	00:00:06,540 --> 00:00:14,559
grrr moaning I will give my presentation

00:00:10,269 --> 00:00:20,169
about the practice of canal native every

00:00:14,559 --> 00:00:23,830
infrastructure networking arm what our

00:00:20,169 --> 00:00:28,269
gender is the stories worries cloud

00:00:23,830 --> 00:00:30,400
native and for the canal native

00:00:28,269 --> 00:00:32,830
networking I will give out a

00:00:30,400 --> 00:00:35,860
containerized enough infrastructure

00:00:32,830 --> 00:00:39,010
networking arm in the container

00:00:35,860 --> 00:00:42,040
networking solutions comparison arm and

00:00:39,010 --> 00:00:47,129
cloud native nano micro services and our

00:00:42,040 --> 00:00:50,590
next steps so what is canal native

00:00:47,129 --> 00:00:53,739
ground native is an approach to building

00:00:50,590 --> 00:00:55,809
and running applications that exploit

00:00:53,739 --> 00:01:01,210
advantages of our cloud computing

00:00:55,809 --> 00:01:04,899
delivery model and there is a community

00:01:01,210 --> 00:01:09,910
named cloud native compute computing

00:01:04,899 --> 00:01:13,929
foundation CN CF CF CF definition of CN

00:01:09,910 --> 00:01:16,840
CF is that for cloud native we used

00:01:13,929 --> 00:01:19,599
typically use open source software else

00:01:16,840 --> 00:01:22,780
there to be continued eyes where each

00:01:19,599 --> 00:01:25,330
part of app application is packaged in

00:01:22,780 --> 00:01:28,450
its own content in some container and

00:01:25,330 --> 00:01:31,630
the dynamically orchestrated so each

00:01:28,450 --> 00:01:33,910
part is active risk share scheduled and

00:01:31,630 --> 00:01:37,440
they managed to optimize resource

00:01:33,910 --> 00:01:42,039
routine and Isaac Newton ization and

00:01:37,440 --> 00:01:47,110
canal for Kannada native we are used

00:01:42,039 --> 00:01:48,670
micro service-oriented to increase the

00:01:47,110 --> 00:01:51,780
overall opportunity and the

00:01:48,670 --> 00:01:55,420
maintainability of applications and

00:01:51,780 --> 00:01:57,789
nowadays kubernetes is a popular

00:01:55,420 --> 00:02:01,060
container oxidation platform and the

00:01:57,789 --> 00:02:06,690
first CN CF

00:02:01,060 --> 00:02:10,239
authorized projects and c SEF

00:02:06,690 --> 00:02:12,900
authenticated project communities helps

00:02:10,239 --> 00:02:16,990
user beauty scale and manages their

00:02:12,900 --> 00:02:19,280
applications in a dynamic in a in a

00:02:16,990 --> 00:02:23,810
dynamic way and for their whole

00:02:19,280 --> 00:02:27,130
life cycles so high-performance

00:02:23,810 --> 00:02:30,290
networking is the key of containerized

00:02:27,130 --> 00:02:34,640
Canal native infrastructure for micro

00:02:30,290 --> 00:02:37,400
service architecture so we've talked

00:02:34,640 --> 00:02:43,880
about the containerized NFV

00:02:37,400 --> 00:02:47,180
infrastructure networking on arm for the

00:02:43,880 --> 00:02:50,090
kubernetes networking model we have

00:02:47,180 --> 00:02:52,430
three requirements the first one is that

00:02:50,090 --> 00:02:56,600
our pod can communicate with each other

00:02:52,430 --> 00:02:59,989
with our pods without using network

00:02:56,600 --> 00:03:02,840
address translation which means we reuse

00:02:59,989 --> 00:03:06,440
the same flat networking with that

00:03:02,840 --> 00:03:09,010
working address space and all nodes can

00:03:06,440 --> 00:03:15,170
communicate the vista or post without

00:03:09,010 --> 00:03:18,920
unity and IP data policies itself is the

00:03:15,170 --> 00:03:23,030
same IP that other seats see it so all

00:03:18,920 --> 00:03:28,489
the networking name address space is

00:03:23,030 --> 00:03:30,440
flat the networking objects in the

00:03:28,489 --> 00:03:32,570
kubernetes are the container to

00:03:30,440 --> 00:03:34,670
container networking protocol networking

00:03:32,570 --> 00:03:37,000
and the portal service networking and

00:03:34,670 --> 00:03:41,090
the internet to service are now working

00:03:37,000 --> 00:03:44,180
which is almost the same for the cloud

00:03:41,090 --> 00:03:47,060
native canal for the canal native

00:03:44,180 --> 00:03:51,320
environment contained networking

00:03:47,060 --> 00:03:55,340
solutions like nano calico we've used a

00:03:51,320 --> 00:03:58,970
ve th with a bridge a router and some

00:03:55,340 --> 00:04:05,860
overlay routing manipulations to choose

00:03:58,970 --> 00:04:08,299
a networking and here is a list of the

00:04:05,860 --> 00:04:11,660
kubernetes supported container

00:04:08,299 --> 00:04:15,680
networking solutions such as flannel

00:04:11,660 --> 00:04:18,560
calico and can't Eve Syrian and a mud

00:04:15,680 --> 00:04:22,280
house and host the network and all all

00:04:18,560 --> 00:04:26,450
things like that here the martha's is

00:04:22,280 --> 00:04:30,080
not truly really a container networking

00:04:26,450 --> 00:04:33,270
solution but a solution for the in to

00:04:30,080 --> 00:04:35,220
integrate multiple to integrate

00:04:33,270 --> 00:04:38,880
people continue having solutions to

00:04:35,220 --> 00:04:43,759
support multiple interfaces to provide

00:04:38,880 --> 00:04:46,919
multiple interfaces to a single pod and

00:04:43,759 --> 00:04:48,990
in this presentation I would like to

00:04:46,919 --> 00:04:51,990
give a little introduction to continue

00:04:48,990 --> 00:04:54,030
EVP which is a VPP based the container

00:04:51,990 --> 00:04:57,389
networking solutions and a project

00:04:54,030 --> 00:05:02,039
calico which is widely used these days

00:04:57,389 --> 00:05:06,210
and which is high performance and very

00:05:02,039 --> 00:05:08,550
easy to prom deployment and Obiang

00:05:06,210 --> 00:05:11,419
kubernetes open kubernetes is a

00:05:08,550 --> 00:05:14,069
container networking solution which uses

00:05:11,419 --> 00:05:16,949
obvious to to the container networking

00:05:14,069 --> 00:05:19,130
and uses Obion controller to do the

00:05:16,949 --> 00:05:19,130
deployment

00:05:19,789 --> 00:05:25,289
the first one is Kentucky which is a

00:05:23,340 --> 00:05:28,530
high-performance containing are working

00:05:25,289 --> 00:05:30,210
based around a fat ovp we know that fat

00:05:28,530 --> 00:05:32,550
will be peers I worked a packet of

00:05:30,210 --> 00:05:35,849
processing to provide a lead vocal

00:05:32,550 --> 00:05:40,919
activity between the parts in a

00:05:35,849 --> 00:05:43,590
kubernetes cluster and it deploys itself

00:05:40,919 --> 00:05:46,680
as a set of pots in the Cooby system

00:05:43,590 --> 00:05:50,159
namespace and the some of the components

00:05:46,680 --> 00:05:53,250
are continuous arc until edct on the

00:05:50,159 --> 00:05:58,409
master node continue case is used to

00:05:53,250 --> 00:06:01,229
monitor the kubernetes behavior due to

00:05:58,409 --> 00:06:05,240
the deployment you can t be and the edct

00:06:01,229 --> 00:06:09,659
can dvd/cd to store all the needed

00:06:05,240 --> 00:06:12,120
configuration for itself and it's all

00:06:09,659 --> 00:06:14,599
for the data plane we have the

00:06:12,120 --> 00:06:18,990
continuous which continuous which

00:06:14,599 --> 00:06:21,569
contains the VPP we switch in a single

00:06:18,990 --> 00:06:25,969
unit in the container in a container and

00:06:21,569 --> 00:06:29,069
there has a continually agent to do the

00:06:25,969 --> 00:06:32,419
deployment to do the configuration for

00:06:29,069 --> 00:06:36,270
the VPP and gated configuration from the

00:06:32,419 --> 00:06:40,050
continue seeing eye and a continuance in

00:06:36,270 --> 00:06:44,370
eyes used to create configuration

00:06:40,050 --> 00:06:46,880
information from the from the from the

00:06:44,370 --> 00:06:50,730
kubernetes

00:06:46,880 --> 00:06:56,100
for continued PP which as uses can

00:06:50,730 --> 00:06:58,770
support and network policy using the VP

00:06:56,100 --> 00:07:04,980
piece internal traffic mechanism such as

00:06:58,770 --> 00:07:08,790
a CL load balancing and net 44 and a

00:07:04,980 --> 00:07:10,980
 TV uses that DB TK as the main

00:07:08,790 --> 00:07:18,750
networking devices to communicate odds

00:07:10,980 --> 00:07:22,410
airports across hosts across hosts this

00:07:18,750 --> 00:07:26,160
graph gives a typical deployment for

00:07:22,410 --> 00:07:29,730
that on the arms over and we have kuba

00:07:26,160 --> 00:07:33,270
not to do the Celtic configuration and

00:07:29,730 --> 00:07:37,020
to communicate with continue seeing I

00:07:33,270 --> 00:07:39,180
and there will be B agent is used to get

00:07:37,020 --> 00:07:42,050
it to configuration and to do the

00:07:39,180 --> 00:07:45,750
configuration to we really plugins and

00:07:42,050 --> 00:07:49,580
the refer the data plan on the data

00:07:45,750 --> 00:07:54,530
pliant VPP we switch to the actual

00:07:49,580 --> 00:07:54,530
packet switching between the containers

00:07:56,600 --> 00:08:01,650
and we have done some things on the

00:08:00,150 --> 00:08:04,950
conceivably we are armed

00:08:01,650 --> 00:08:08,430
we have enabled I come to be on our

00:08:04,950 --> 00:08:11,160
platform and added m60 for building and

00:08:08,430 --> 00:08:14,460
utility scripts for conceivably we talk

00:08:11,160 --> 00:08:16,740
images building and management and we

00:08:14,460 --> 00:08:20,130
added corresponding kubernetes set up

00:08:16,740 --> 00:08:22,820
template file regions to make file to

00:08:20,130 --> 00:08:25,890
enable configure file generation for arm

00:08:22,820 --> 00:08:29,370
and it is a manual installation guide

00:08:25,890 --> 00:08:31,560
for arm and we have done the container

00:08:29,370 --> 00:08:39,500
networking verification is continually

00:08:31,560 --> 00:08:43,020
on our servers this is a simple test

00:08:39,500 --> 00:08:46,500
simple test for a ping at round-trip

00:08:43,020 --> 00:08:52,350
time which you use the appearing of the

00:08:46,500 --> 00:08:56,390
elastic and on the this is for the ping

00:08:52,350 --> 00:08:59,910
Artie T for the to hop between two hosts

00:08:56,390 --> 00:09:04,560
for the upper library uses open a No

00:08:59,910 --> 00:09:08,700
we uses Fernando Fernando is a very

00:09:04,560 --> 00:09:11,160
popular container no good solutions

00:09:08,700 --> 00:09:15,540
butter is an overlay solution pitting

00:09:11,160 --> 00:09:20,310
hosts so it has very large delay very

00:09:15,540 --> 00:09:23,940
large ping RTT time which is in seconds

00:09:20,310 --> 00:09:27,180
level in the second level butter

00:09:23,940 --> 00:09:33,420
TVP the intercommunication between pours

00:09:27,180 --> 00:09:36,690
into into hosts is by is weird a DP DK

00:09:33,420 --> 00:09:43,110
and so the ping ITT time is correctly

00:09:36,690 --> 00:09:44,760
shorted in microseconds level and for

00:09:43,110 --> 00:09:48,270
Fernando which is a native overlay

00:09:44,760 --> 00:09:53,690
solution but for conceivably B's

00:09:48,270 --> 00:09:53,690
I direct TBD clay-based the solutions

00:09:53,750 --> 00:10:00,570
are now available Network container aqua

00:09:57,810 --> 00:10:02,730
solution is to project calico

00:10:00,570 --> 00:10:06,860
calico actually cargo is very widely

00:10:02,730 --> 00:10:11,280
used to today's which has many many

00:10:06,860 --> 00:10:13,890
desired features such as it is it's a

00:10:11,280 --> 00:10:16,680
non voglio solution which uses root ball

00:10:13,890 --> 00:10:21,000
IP addresses for containers to the rest

00:10:16,680 --> 00:10:23,670
of the world and hence parts I think

00:10:21,000 --> 00:10:28,020
currently exposed to the outside world

00:10:23,670 --> 00:10:31,260
no encapsulation needed so it's a direct

00:10:28,020 --> 00:10:36,600
has a direct route a Boeing every hosts

00:10:31,260 --> 00:10:42,270
to direct the packet routing for the

00:10:36,600 --> 00:10:44,340
containers and contact calico can

00:10:42,270 --> 00:10:47,180
support kubernetes inaudible policy very

00:10:44,340 --> 00:10:54,810
well with the IP tables supported

00:10:47,180 --> 00:10:57,440
inherently so we have were verified the

00:10:54,810 --> 00:11:00,720
caracal project calico on arm and

00:10:57,440 --> 00:11:06,240
actually these days we have deployed

00:11:00,720 --> 00:11:08,460
category in our song of our edge

00:11:06,240 --> 00:11:10,580
computing and cloud computing projects

00:11:08,460 --> 00:11:13,880
such as IEC in a crane Oh

00:11:10,580 --> 00:11:13,880
with our

00:11:16,820 --> 00:11:25,500
this is a deployment file for the

00:11:21,770 --> 00:11:29,910
kubernetes which is you think to be very

00:11:25,500 --> 00:11:32,820
easy and simple and direct and the

00:11:29,910 --> 00:11:38,750
richest deployment is the same as that

00:11:32,820 --> 00:11:41,850
in x86 and it was just three many three

00:11:38,750 --> 00:11:49,950
many three parts in the Kobe cistern in

00:11:41,850 --> 00:11:53,940
space from the versions rethought to the

00:11:49,950 --> 00:11:56,430
m64 platform has been supported we have

00:11:53,940 --> 00:12:01,130
put some patches to the catechol

00:11:56,430 --> 00:12:05,490
community to in to add support for arm

00:12:01,130 --> 00:12:09,740
and most of the scenarios have been

00:12:05,490 --> 00:12:11,910
verified on our 64 such as port to port

00:12:09,740 --> 00:12:15,300
communication node to poor communication

00:12:11,910 --> 00:12:19,170
kubernetes in arabic policy layer 3

00:12:15,300 --> 00:12:21,750
network in policy and IP IP tunnel all

00:12:19,170 --> 00:12:24,750
the main components such as calico note

00:12:21,750 --> 00:12:27,740
calico can sure calico seeing-eye and

00:12:24,750 --> 00:12:33,990
kuba kuba controllers and the typer

00:12:27,740 --> 00:12:38,550
verified on platform another very

00:12:33,990 --> 00:12:41,820
important very important the container

00:12:38,550 --> 00:12:44,310
of solution is ovn kubernetes we know

00:12:41,820 --> 00:12:45,810
that we employ a wide open virtual

00:12:44,310 --> 00:12:49,140
networking provides network

00:12:45,810 --> 00:12:51,690
virtualization two containers and the

00:12:49,140 --> 00:12:53,880
Obion can create a logical network

00:12:51,690 --> 00:12:58,830
amounts the containers running on

00:12:53,880 --> 00:13:01,170
multiple hosts it's composed of two

00:12:58,830 --> 00:13:03,570
databases such as the lost pond the

00:13:01,170 --> 00:13:05,850
database in a southbound database for

00:13:03,570 --> 00:13:09,210
kubernetes om provides the following

00:13:05,850 --> 00:13:12,480
scenes first the Y's provide a logical

00:13:09,210 --> 00:13:14,730
switch created per kubernetes node and

00:13:12,480 --> 00:13:16,860
they then inter collect all these

00:13:14,730 --> 00:13:20,520
logical switches with a single logical

00:13:16,860 --> 00:13:22,490
router and any current container scale

00:13:20,520 --> 00:13:26,220
connected to a logical switch as a

00:13:22,490 --> 00:13:28,410
logical pot and it adds a

00:13:26,220 --> 00:13:31,860
technological port for kubernetes health

00:13:28,410 --> 00:13:34,080
checking and it uses Obion gateway in

00:13:31,860 --> 00:13:37,440
the nose to reach kubernetes sensual

00:13:34,080 --> 00:13:41,070
demons with an 80 the Obiang

00:13:37,440 --> 00:13:42,660
architecture is very direct which is

00:13:41,070 --> 00:13:46,680
composed of the northbound and

00:13:42,660 --> 00:13:49,350
southbound databases to storge needed a

00:13:46,680 --> 00:13:51,570
logical switch and a physical employment

00:13:49,350 --> 00:13:59,660
of physical implementation or the

00:13:51,570 --> 00:14:03,300
switches and the right hand they write a

00:13:59,660 --> 00:14:06,210
down part of the graph is for the Cobian

00:14:03,300 --> 00:14:11,130
kubernetes networking up abstraction for

00:14:06,210 --> 00:14:14,240
the collecting all the containers for we

00:14:11,130 --> 00:14:17,820
incur penalties the manure installation

00:14:14,240 --> 00:14:20,730
of manure installation has been verified

00:14:17,820 --> 00:14:22,800
on arm so we have deployed Obion

00:14:20,730 --> 00:14:26,670
kubernetes successfully with Moneo

00:14:22,800 --> 00:14:32,130
installation and we saw the ssl

00:14:26,670 --> 00:14:34,110
certificates enabled but obvious DB

00:14:32,130 --> 00:14:41,070
decaying oven kubernetes is to be

00:14:34,110 --> 00:14:44,280
verified and we have done some initial

00:14:41,070 --> 00:14:47,490
tests performance tasks for between the

00:14:44,280 --> 00:14:50,640
catechol in Obion kubernetes for this

00:14:47,490 --> 00:14:52,890
graph it refused the product apart - pod

00:14:50,640 --> 00:14:56,540
communication in the same note it is

00:14:52,890 --> 00:15:00,480
tested by i proof 3 and we see that

00:14:56,540 --> 00:15:02,640
Caraco achieves a little bit higher

00:15:00,480 --> 00:15:06,080
performance than the Obion kubernetes

00:15:02,640 --> 00:15:11,730
but the difference is very small

00:15:06,080 --> 00:15:14,460
difference very small and there is a

00:15:11,730 --> 00:15:17,760
reason is that oven

00:15:14,460 --> 00:15:20,790
kubernetes is based on a kernel data

00:15:17,760 --> 00:15:23,070
path module to do the forwarding and the

00:15:20,790 --> 00:15:25,530
for calico it is directed by the kernel

00:15:23,070 --> 00:15:30,750
not a parotid did eatery

00:15:25,530 --> 00:15:34,050
not by the kernel module and there sotae

00:15:30,750 --> 00:15:37,050
another performance factories is I think

00:15:34,050 --> 00:15:39,450
a very ETH power performance which is a

00:15:37,050 --> 00:15:40,440
little bit higher and the OS

00:15:39,450 --> 00:15:51,060
obvious

00:15:40,440 --> 00:15:56,130
part so we have sing some sing something

00:15:51,060 --> 00:15:59,820
about we which is which is I worry is a

00:15:56,130 --> 00:16:02,700
good container networking solution so we

00:15:59,820 --> 00:16:05,010
think that easy installation maturity

00:16:02,700 --> 00:16:09,030
and the feature-rich and the scalability

00:16:05,010 --> 00:16:12,330
to be very important and the report a on

00:16:09,030 --> 00:16:17,820
the low end on the low level you think

00:16:12,330 --> 00:16:21,480
it is for the loads of networking

00:16:17,820 --> 00:16:23,430
support such as we've given networking

00:16:21,480 --> 00:16:29,520
via the pure kernel or overlay

00:16:23,430 --> 00:16:31,650
incorporated or typical enabled and for

00:16:29,520 --> 00:16:34,230
the easy installation we think

00:16:31,650 --> 00:16:36,810
kubernetes teaming said with the average

00:16:34,230 --> 00:16:38,760
donation is very simple and the easy

00:16:36,810 --> 00:16:42,330
configuration management and a

00:16:38,760 --> 00:16:45,870
multi-platform support and there's four

00:16:42,330 --> 00:16:48,480
features I think a lot of balancing

00:16:45,870 --> 00:16:50,870
another work service and a local policy

00:16:48,480 --> 00:16:56,610
and a local security are all supported

00:16:50,870 --> 00:17:00,810
are very important and for scalability

00:16:56,610 --> 00:17:03,120
and I think it should support a large

00:17:00,810 --> 00:17:09,290
number of communities nodes and a

00:17:03,120 --> 00:17:13,500
commonality support this table gives a

00:17:09,290 --> 00:17:16,140
initial comparison for the features all

00:17:13,500 --> 00:17:21,420
the solutions I think all the solutions

00:17:16,140 --> 00:17:24,800
are supported are armed nowadays so we

00:17:21,420 --> 00:17:29,670
can use all the solutions in our

00:17:24,800 --> 00:17:33,180
community so networking oh but if you

00:17:29,670 --> 00:17:36,780
want to choose a desired feature a

00:17:33,180 --> 00:17:42,240
special feature you you want to use you

00:17:36,780 --> 00:17:46,650
can only be very selective on these

00:17:42,240 --> 00:17:50,630
solutions because if we want to easy

00:17:46,650 --> 00:17:54,330
installation I suggest that you use

00:17:50,630 --> 00:17:57,539
Fernando or catechol but if we want to

00:17:54,330 --> 00:18:00,210
use very high performance you can use

00:17:57,539 --> 00:18:02,010
continued BP all these solutions highs

00:18:00,210 --> 00:18:04,640
these are limitations and the

00:18:02,010 --> 00:18:04,640
restrictions

00:18:05,929 --> 00:18:12,210
so after luck to talk something about

00:18:08,850 --> 00:18:15,750
the cloud native an Acura micro services

00:18:12,210 --> 00:18:20,880
the first micro service we have enabled

00:18:15,750 --> 00:18:25,220
arm is the Lakatos SFC controller for

00:18:20,880 --> 00:18:29,870
the Rakata SFC conjurer's we know that

00:18:25,220 --> 00:18:32,460
when we have deployed several pods and

00:18:29,870 --> 00:18:35,039
there are several ports we need to

00:18:32,460 --> 00:18:38,220
deploy a service function champion this

00:18:35,039 --> 00:18:41,970
is ports which means that they or the

00:18:38,220 --> 00:18:44,909
traffic between the spot and should be

00:18:41,970 --> 00:18:49,200
directed to another port in a service

00:18:44,909 --> 00:18:51,929
function chain and in this graph is as

00:18:49,200 --> 00:18:56,309
it's a sample use cases in whisk until

00:18:51,929 --> 00:18:58,769
you EVP and we deployed the surface

00:18:56,309 --> 00:19:04,019
function is memory if interfaces with

00:18:58,769 --> 00:19:07,950
VPP and the collector tay to for the in

00:19:04,019 --> 00:19:10,889
this graph being f VN f1 and the

00:19:07,950 --> 00:19:13,320
collective is collected with be enough

00:19:10,889 --> 00:19:17,700
to in a single service function chain

00:19:13,320 --> 00:19:19,529
and there is a VN f3 whiskey on f4 in

00:19:17,700 --> 00:19:22,769
another service commission chair and

00:19:19,529 --> 00:19:26,399
then the service long change down vo is

00:19:22,769 --> 00:19:30,059
down fears of being a overlay tunnel

00:19:26,399 --> 00:19:35,490
which is by a VX line we react Celentano

00:19:30,059 --> 00:19:37,470
and the deployment is a buyer Yama file

00:19:35,490 --> 00:19:40,019
and the surface function chain

00:19:37,470 --> 00:19:47,480
controller is used that you do the

00:19:40,019 --> 00:19:52,769
actual deployment a sec Cloud Data

00:19:47,480 --> 00:19:55,169
micro-services my my proxy result we

00:19:52,769 --> 00:19:59,490
know that envoy is do down the tape line

00:19:55,169 --> 00:20:02,250
proxy on the micro services and during a

00:19:59,490 --> 00:20:05,220
single in this single sample in the

00:20:02,250 --> 00:20:07,550
simple samples we use ng acts as a

00:20:05,220 --> 00:20:10,670
back-end web server

00:20:07,550 --> 00:20:15,440
and from the front end he is envoy tutus

00:20:10,670 --> 00:20:18,850
a proxy and there and my he works in a

00:20:15,440 --> 00:20:24,770
sidecar a model in a sidecar model and

00:20:18,850 --> 00:20:29,000
so on the control plane there has three

00:20:24,770 --> 00:20:34,460
components is sto manager mixer I saw us

00:20:29,000 --> 00:20:38,240
and on Y uses I typical and the standard

00:20:34,460 --> 00:20:40,010
rather standard protocol like standard

00:20:38,240 --> 00:20:42,710
the proko code up to do the

00:20:40,010 --> 00:20:45,350
communication between j controlling and

00:20:42,710 --> 00:20:49,000
it's a data plan so for the Envoy it is

00:20:45,350 --> 00:20:51,830
substandard standard implementation and

00:20:49,000 --> 00:20:56,900
there's a photon worried can do some

00:20:51,830 --> 00:20:59,900
other enhancement for the native web

00:20:56,900 --> 00:21:01,850
server commit to the native web server

00:20:59,900 --> 00:21:04,010
such as rate limiting and the

00:21:01,850 --> 00:21:07,300
authorization and the dude's a

00:21:04,010 --> 00:21:13,070
certification and all things like that

00:21:07,300 --> 00:21:20,690
so it is a this boy in example had been

00:21:13,070 --> 00:21:22,700
enabled on arm the certain micro Sol is

00:21:20,690 --> 00:21:26,540
example it's for the network service

00:21:22,700 --> 00:21:28,760
mesh for the native of super smash we

00:21:26,540 --> 00:21:30,590
had at the following we added we added

00:21:28,760 --> 00:21:34,330
the following properties to network in

00:21:30,590 --> 00:21:37,400
Canaries and first of is heterogeneous

00:21:34,330 --> 00:21:40,490
arabic solution configurations protocol

00:21:37,400 --> 00:21:42,290
and on-demand dynamic negotiated

00:21:40,490 --> 00:21:44,570
collections and the tunneling as a

00:21:42,290 --> 00:21:47,450
first-class citizen and the networking

00:21:44,570 --> 00:21:50,320
context as a first-class citizen and a

00:21:47,450 --> 00:21:53,810
policy driven service function chain and

00:21:50,320 --> 00:21:56,170
the icing network service mash is a

00:21:53,810 --> 00:21:58,970
novel approach it solving complicated

00:21:56,170 --> 00:22:01,820
layer 2 and layer 3 use cases and

00:21:58,970 --> 00:22:03,530
kubernetes which Maps the concept of a

00:22:01,820 --> 00:22:07,670
service match to layer 2 and there's

00:22:03,530 --> 00:22:10,430
three payloads and as we know if we have

00:22:07,670 --> 00:22:12,920
deployed a ComNet spot we want to add

00:22:10,430 --> 00:22:14,120
some interfaces to this pause after we

00:22:12,920 --> 00:22:16,940
have spawned

00:22:14,120 --> 00:22:19,940
after we have spawned these pots and to

00:22:16,940 --> 00:22:21,470
add some extra collections to these pots

00:22:19,940 --> 00:22:24,110
such as we

00:22:21,470 --> 00:22:26,179
to enable extra collection between these

00:22:24,110 --> 00:22:29,389
pods for the lair to allow three such as

00:22:26,179 --> 00:22:32,600
a audibly land to the killer to a single

00:22:29,389 --> 00:22:35,840
port to two pots and another wheel and

00:22:32,600 --> 00:22:39,259
to another two pots this can be done in

00:22:35,840 --> 00:22:44,779
kubernetes be of biosis nanniversary

00:22:39,259 --> 00:22:47,330
smash so it's a very great great

00:22:44,779 --> 00:22:49,970
enhancement to the original kubernetes

00:22:47,330 --> 00:22:52,279
in there working for these services

00:22:49,970 --> 00:22:55,000
originally we have the marker seeing

00:22:52,279 --> 00:22:58,759
attitude but matt has a sigma is very

00:22:55,000 --> 00:23:00,620
static and a lot so scalable so for the

00:22:58,759 --> 00:23:09,019
native of service mesh we can down it

00:23:00,620 --> 00:23:11,200
dynamically for next steps we are

00:23:09,019 --> 00:23:14,480
thinking about high performance

00:23:11,200 --> 00:23:15,649
continuing solution verification for the

00:23:14,480 --> 00:23:18,679
far edge devices

00:23:15,649 --> 00:23:21,799
hmm axel ping and the Sun web the small

00:23:18,679 --> 00:23:23,929
port and there in the future we would

00:23:21,799 --> 00:23:26,929
like to enable sunlight so that could be

00:23:23,929 --> 00:23:29,120
edge and or something like that and for

00:23:26,929 --> 00:23:33,620
vehicle analysis and the demon set

00:23:29,120 --> 00:23:34,850
installation is not in is not okay um

00:23:33,620 --> 00:23:36,919
these days

00:23:34,850 --> 00:23:39,769
so we would like to in neighbor Obion

00:23:36,919 --> 00:23:43,990
Tennessee demon said installation which

00:23:39,769 --> 00:23:46,039
is easy installation for that arm and

00:23:43,990 --> 00:23:48,769
Obion kubernetes to performance

00:23:46,039 --> 00:23:53,870
evaluation with obvious tip DK enabled

00:23:48,769 --> 00:23:57,200
arm and with fewer cache pieces and TLB

00:23:53,870 --> 00:24:01,009
misses and contact switches and the

00:23:57,200 --> 00:24:02,600
networks we smash for the network

00:24:01,009 --> 00:24:05,259
service match we would do some

00:24:02,600 --> 00:24:08,509
enablement of is continually on arm and

00:24:05,259 --> 00:24:11,480
that container acting for edge computing

00:24:08,509 --> 00:24:15,220
projects we have in such as ocarina

00:24:11,480 --> 00:24:18,440
we have proposed a project named IEC and

00:24:15,220 --> 00:24:21,129
for IEC we uses the caracal as their

00:24:18,440 --> 00:24:24,200
main solutions but we will do some

00:24:21,129 --> 00:24:27,379
modification and do some adaption to

00:24:24,200 --> 00:24:31,629
these solutions to provide the

00:24:27,379 --> 00:24:35,060
lightweight networking solutions in the

00:24:31,629 --> 00:24:37,360
comprehensive we actually

00:24:35,060 --> 00:24:40,070
comprehensive container a green solution

00:24:37,360 --> 00:24:47,900
selection mechanism based on the

00:24:40,070 --> 00:24:50,690
different use cases of on arm so this is

00:24:47,900 --> 00:24:54,640
all my presentations today thank you all

00:24:50,690 --> 00:24:54,640
do you have any questions

00:25:01,290 --> 00:25:10,390
yeah so if you were trying to select a

00:25:06,670 --> 00:25:13,470
solution for small nerves which and

00:25:10,390 --> 00:25:13,470
their working solution

00:25:13,639 --> 00:25:22,809
yes for small notes such as a visa

00:25:17,870 --> 00:25:26,809
states we are considering is that if we

00:25:22,809 --> 00:25:29,629
someone else also some others we do have

00:25:26,809 --> 00:25:32,299
little a very small number of CP o costs

00:25:29,629 --> 00:25:35,389
if you do have very small numbers if you

00:25:32,299 --> 00:25:38,809
cause if you use continued PP even it's

00:25:35,389 --> 00:25:41,570
deep decay and for Fernando ET use

00:25:38,809 --> 00:25:43,850
overlay solution so if we want to use

00:25:41,570 --> 00:25:46,789
tip the creativity carrier occupies a

00:25:43,850 --> 00:25:50,269
number of a CP or costs so for the

00:25:46,789 --> 00:25:52,700
performance consideration and I continue

00:25:50,269 --> 00:25:55,600
bps are not a very desired because we

00:25:52,700 --> 00:25:58,789
have very limited a number of CP o costs

00:25:55,600 --> 00:26:01,129
for to narrow it use overlay solution

00:25:58,789 --> 00:26:03,649
and the performance of this small know

00:26:01,129 --> 00:26:07,429
that is very is very performance and

00:26:03,649 --> 00:26:12,320
limited inherently so for Nano is also

00:26:07,429 --> 00:26:15,590
not not this out so after this all this

00:26:12,320 --> 00:26:18,139
consideration so we choose caracal which

00:26:15,590 --> 00:26:21,529
calculates based directly on the kernel

00:26:18,139 --> 00:26:25,340
and there is easy installation easy

00:26:21,529 --> 00:26:27,289
colonel adaption so for technical trance

00:26:25,340 --> 00:26:30,340
pollination we still have to do some

00:26:27,289 --> 00:26:33,850
modification to the kernel configuration

00:26:30,340 --> 00:26:36,830
to enable the catechol desire the

00:26:33,850 --> 00:26:38,389
required requirements such as we have to

00:26:36,830 --> 00:26:40,879
enable netfilter

00:26:38,389 --> 00:26:44,679
and all things like that in a sumo Kuno

00:26:40,879 --> 00:26:50,139
we have to do the kernel adaption so

00:26:44,679 --> 00:26:52,809
this is this is a very autotext

00:26:50,139 --> 00:26:55,639
consideration when we choose I and

00:26:52,809 --> 00:26:58,210
proper made me choose a proper solution

00:26:55,639 --> 00:27:01,429
for container networking longest Monod

00:26:58,210 --> 00:27:03,950
yes for the CPU core so the memory and

00:27:01,429 --> 00:27:06,289
for the performance can performance

00:27:03,950 --> 00:27:09,860
restrictions such as overlay solutions

00:27:06,289 --> 00:27:15,710
so and another important Asst

00:27:09,860 --> 00:27:18,110
selection criteria is for the easy

00:27:15,710 --> 00:27:21,470
installation for calico

00:27:18,110 --> 00:27:25,680
such as calico we used Yama file to do

00:27:21,470 --> 00:27:28,770
the simple Yama fire to do the you

00:27:25,680 --> 00:27:31,970
deployment and the winning a new note is

00:27:28,770 --> 00:27:37,280
added when a new note is added all the

00:27:31,970 --> 00:27:38,610
needed installation pods are added

00:27:37,280 --> 00:27:42,270
automatically

00:27:38,610 --> 00:27:47,640
not by manure not not manually so all

00:27:42,270 --> 00:27:51,170
this criteria should be considered when

00:27:47,640 --> 00:28:05,170
we when you choose a proper solution on

00:27:51,170 --> 00:28:10,229
these nodes okay thank you

00:28:05,170 --> 00:28:10,229

YouTube URL: https://www.youtube.com/watch?v=FEPRUnrT6d8


