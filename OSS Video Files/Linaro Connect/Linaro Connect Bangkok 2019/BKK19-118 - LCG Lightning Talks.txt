Title: BKK19-118 - LCG Lightning Talks
Publication date: 2019-04-03
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
A medley of short talks about stuff that LCG has worked on since the past Connect.

John Stultz / Android and Kernel Developer Linaro Consumer Group
AOSP devboard and Kernel developer

Sumit Semwal / Team Lead, LCG Kernel Linaro Ltd
Sumit manages the team of engineers who work on everything Linux kernel related to LCG.

Sam Protsenko / Software Engineer TexasInstruments
Kernel developer, working in LCG group as an assignee from TexasInstruments. Main areas of expertise are: kernel, U-Boot, AOSP (low-level), bare-metal firmwares, Debian. Last few years working mostly with upstream.

Show Liu / LCG Engineer working on AOSP TV

Yongqin Liu / LCG engineer
Captions: 
	00:00:05,630 --> 00:00:11,730
okayhow hi everyone welcome I'm so met I

00:00:09,750 --> 00:00:17,670
lead a small team of Konnor engineers in

00:00:11,730 --> 00:00:19,290
the LCG LCG segment group we are just

00:00:17,670 --> 00:00:22,230
going to talk about a few things that

00:00:19,290 --> 00:00:26,250
we've been working on through past six

00:00:22,230 --> 00:00:29,430
months so the agenda would be John would

00:00:26,250 --> 00:00:31,619
talk about IND staging DMA heaps and he

00:00:29,430 --> 00:00:33,930
will also talk about high key 960

00:00:31,619 --> 00:00:35,640
updates then I'm it is going to talk

00:00:33,930 --> 00:00:37,649
about the progress that we made on

00:00:35,640 --> 00:00:42,510
trying to run a mainline kernel on pixel

00:00:37,649 --> 00:00:45,809
3 device young condition at us while

00:00:42,510 --> 00:00:50,399
shall you will give us a status on ASP

00:00:45,809 --> 00:00:52,289
TVs TV orson couldn't be here for Kinect

00:00:50,399 --> 00:00:54,359
so I'm gonna stand in for him and talk

00:00:52,289 --> 00:00:57,649
about LTP DDT and high key for a little

00:00:54,359 --> 00:00:57,649
bit so over to John

00:00:58,489 --> 00:01:02,909
hey so I'm John Stoll to me I've talked

00:01:00,929 --> 00:01:05,250
about ion D staging work that we're

00:01:02,909 --> 00:01:09,480
going on and the Heike 960 updates

00:01:05,250 --> 00:01:14,310
so first the on D staging so this is I

00:01:09,480 --> 00:01:17,220
guess ion went into staging in 2011 so

00:01:14,310 --> 00:01:18,510
it's been there for a while and while

00:01:17,220 --> 00:01:21,360
there's been some small changes it

00:01:18,510 --> 00:01:25,770
hasn't seen a lot of progress in getting

00:01:21,360 --> 00:01:27,450
upstream at least properly and so part

00:01:25,770 --> 00:01:29,460
of the problem is that ion is this big

00:01:27,450 --> 00:01:33,180
kind of hairy solution to a bunch of

00:01:29,460 --> 00:01:35,550
problems and so trying to you know

00:01:33,180 --> 00:01:37,680
despite a lot of number of hurts you

00:01:35,550 --> 00:01:40,320
know cement and Benjamin is both taking

00:01:37,680 --> 00:01:42,900
good swings at trying to get some

00:01:40,320 --> 00:01:44,220
functionality upstream this attempt is

00:01:42,900 --> 00:01:46,260
trying to just kind of cut off a very

00:01:44,220 --> 00:01:48,120
small portion of it just the allocation

00:01:46,260 --> 00:01:50,700
API trying to clean up some of the

00:01:48,120 --> 00:01:54,240
suggestions that we've gotten to the ion

00:01:50,700 --> 00:01:56,790
code over the years and basically the

00:01:54,240 --> 00:02:00,000
idea is instead of having a big

00:01:56,790 --> 00:02:01,890
multiplexer in the ion interface where

00:02:00,000 --> 00:02:03,270
you had to specify you know query for

00:02:01,890 --> 00:02:05,100
the heaps and then pick which ones you

00:02:03,270 --> 00:02:07,290
wanted to use in order to get just to

00:02:05,100 --> 00:02:09,720
the allocation point we're basically

00:02:07,290 --> 00:02:11,670
breaking it up so that we have per heap

00:02:09,720 --> 00:02:13,499
device notes and so this means that

00:02:11,670 --> 00:02:17,280
you'll have something like a dev DMA

00:02:13,499 --> 00:02:19,860
heap system and FDMA heap CMA and

00:02:17,280 --> 00:02:21,650
whatever custom peope you might want in

00:02:19,860 --> 00:02:25,170
a lot of ways this simplifies the API

00:02:21,650 --> 00:02:27,000
but it also gives a lot more flexibility

00:02:25,170 --> 00:02:31,140
to the heap implementation because they

00:02:27,000 --> 00:02:33,600
get to implement the DMA buff ops since

00:02:31,140 --> 00:02:36,450
the API is a lot simpler at least in the

00:02:33,600 --> 00:02:39,270
current RFC's there is some concern

00:02:36,450 --> 00:02:41,459
particularly around secure heaps whether

00:02:39,270 --> 00:02:43,560
or not we've oversimplified it to make

00:02:41,459 --> 00:02:45,810
it difficult to actually handle some of

00:02:43,560 --> 00:02:48,720
the needs of secure heaps but at the

00:02:45,810 --> 00:02:49,950
same time to I'm because I feel like

00:02:48,720 --> 00:02:52,800
part of the problem with getting ion

00:02:49,950 --> 00:02:54,560
upstream is we keep on getting tangled

00:02:52,800 --> 00:02:58,590
into trying to solve all the problems

00:02:54,560 --> 00:03:00,570
very quickly I'm gonna maybe even see

00:02:58,590 --> 00:03:02,430
that you know if if the DMA heaps can't

00:03:00,570 --> 00:03:04,410
work for all secure heaps maybe secure

00:03:02,430 --> 00:03:07,590
heaps need us their own interface too so

00:03:04,410 --> 00:03:11,459
it's one of those things where I'm not

00:03:07,590 --> 00:03:13,739
sure if we have to solve it all but RFC

00:03:11,459 --> 00:03:16,350
sent out last week at the URL their

00:03:13,739 --> 00:03:18,630
feedback would be lovely we'd like to

00:03:16,350 --> 00:03:21,350
get as much input as we can on this to

00:03:18,630 --> 00:03:24,209
make sure we're not missing anything and

00:03:21,350 --> 00:03:26,100
also because you know we can't push

00:03:24,209 --> 00:03:27,959
anything unrelated without getting

00:03:26,100 --> 00:03:30,720
tangled into all of the problems there's

00:03:27,959 --> 00:03:35,450
also discussion going on between folks

00:03:30,720 --> 00:03:39,660
at Google and Qualcomm and arm and CI

00:03:35,450 --> 00:03:41,910
trying to figure out how we can handle

00:03:39,660 --> 00:03:44,310
some of the cache operation overhead

00:03:41,910 --> 00:03:46,829
that the DMA buffs currently have this

00:03:44,310 --> 00:03:48,930
is something that we've seen with the

00:03:46,829 --> 00:03:51,980
ion code recently where some of the

00:03:48,930 --> 00:03:55,260
cleanups that Lara but has done

00:03:51,980 --> 00:03:57,390
basically in order to kind of provide

00:03:55,260 --> 00:03:59,280
the correctness that upstream wants had

00:03:57,390 --> 00:04:01,680
performance consequences and so trying

00:03:59,280 --> 00:04:03,780
to find out a way to either change how

00:04:01,680 --> 00:04:06,060
androids using the DMA buffs or change

00:04:03,780 --> 00:04:10,590
some of the demon by API is in order to

00:04:06,060 --> 00:04:11,910
allow you know us to avoid this cache

00:04:10,590 --> 00:04:13,829
overhead is something we're gonna be

00:04:11,910 --> 00:04:16,590
doing I'm working on trying to document

00:04:13,829 --> 00:04:18,600
this and so I'm not sure exactly what

00:04:16,590 --> 00:04:21,630
the format of that conversation will

00:04:18,600 --> 00:04:24,600
kind of be what would product will come

00:04:21,630 --> 00:04:26,220
out of that but it might be an lwn

00:04:24,600 --> 00:04:28,520
article or something but please come in

00:04:26,220 --> 00:04:33,199
contact me if you

00:04:28,520 --> 00:04:37,370
any interest in that area next is the

00:04:33,199 --> 00:04:39,259
Heike 960 upstreaming so ufs has landed

00:04:37,370 --> 00:04:42,259
their supports landed in 419 so right

00:04:39,259 --> 00:04:44,360
now you can boot device off storage with

00:04:42,259 --> 00:04:47,780
mainline kernel dma engine support that

00:04:44,360 --> 00:04:50,210
landed just recently in 5:1 the USB

00:04:47,780 --> 00:04:52,400
supports being very actively pushed I

00:04:50,210 --> 00:04:54,289
guess right before this conference the

00:04:52,400 --> 00:04:56,449
v5 was sent out so I'm hopeful that

00:04:54,289 --> 00:04:59,210
we'll see that land in the five to merge

00:04:56,449 --> 00:05:02,599
window I to us and core site support

00:04:59,210 --> 00:05:05,180
also being pushed and then the drm

00:05:02,599 --> 00:05:07,759
driver is being currently reworked so

00:05:05,180 --> 00:05:10,580
that it's able to basically extend the

00:05:07,759 --> 00:05:12,830
already upstream curing of drm driver

00:05:10,580 --> 00:05:14,840
that we use on high key and so that's

00:05:12,830 --> 00:05:17,990
kind of taking some more work but I

00:05:14,840 --> 00:05:19,460
think it'll be a better patch set I did

00:05:17,990 --> 00:05:22,250
want to say thanks to dr. sue and the

00:05:19,460 --> 00:05:23,930
high silicon team basically for them you

00:05:22,250 --> 00:05:25,460
know they'd come back to do a lot of

00:05:23,930 --> 00:05:28,430
this heavy lifting on the up streaming

00:05:25,460 --> 00:05:31,280
and it's it's very much appreciated as

00:05:28,430 --> 00:05:33,590
far as our to dues on high key 960 want

00:05:31,280 --> 00:05:35,300
to finish the up streaming also want to

00:05:33,590 --> 00:05:38,060
see about trying to get some pan frost

00:05:35,300 --> 00:05:40,219
support working on it that just would be

00:05:38,060 --> 00:05:42,710
great to have the device be fully uh

00:05:40,219 --> 00:05:45,919
kind of working in a just only upstream

00:05:42,710 --> 00:05:47,990
support streaming framework the

00:05:45,919 --> 00:05:50,690
transition to the UEFI boot loader by

00:05:47,990 --> 00:05:52,280
default has been kind of a constant

00:05:50,690 --> 00:05:55,159
problem we've run into all these kind of

00:05:52,280 --> 00:05:57,500
mysterious problems with some users and

00:05:55,159 --> 00:06:01,370
that's recently been diagnosed down to a

00:05:57,500 --> 00:06:03,020
problem with specific ufs chips that

00:06:01,370 --> 00:06:05,539
have problems with the ufi code at the

00:06:03,020 --> 00:06:07,069
moment so that's been narrowed and

00:06:05,539 --> 00:06:09,469
hopefully we'll have resolution there

00:06:07,069 --> 00:06:12,349
soon and then we have you know lots of

00:06:09,469 --> 00:06:13,759
bugs of course it's the Heike 960 is

00:06:12,349 --> 00:06:16,819
still been really really valuable for

00:06:13,759 --> 00:06:18,860
ASP development it is basically kind of

00:06:16,819 --> 00:06:20,120
the test harness for the DRAM hardware

00:06:18,860 --> 00:06:22,009
composer you know it's not the most

00:06:20,120 --> 00:06:23,659
interesting use for the DMR hardware

00:06:22,009 --> 00:06:26,000
composer but it is kind of the one

00:06:23,659 --> 00:06:28,430
device that we have upstream running and

00:06:26,000 --> 00:06:30,380
we can use it for validating that makes

00:06:28,430 --> 00:06:33,469
sure no regressions sneak into the DMR

00:06:30,380 --> 00:06:35,240
to run composer code again been useful

00:06:33,469 --> 00:06:37,159
for things like the DMA heaps I undo

00:06:35,240 --> 00:06:39,080
staging work mentioned earlier it's been

00:06:37,159 --> 00:06:40,789
able to validate that all of that's

00:06:39,080 --> 00:06:41,780
working and we can compare it with ion

00:06:40,789 --> 00:06:44,920
so it gives us real

00:06:41,780 --> 00:06:46,580
a baseline for doing all that testing

00:06:44,920 --> 00:06:49,880
also folks at Google

00:06:46,580 --> 00:06:53,300
Callister using it for things like

00:06:49,880 --> 00:06:54,919
dynamic partitions and the recovery work

00:06:53,300 --> 00:06:57,770
that's going on in AOSP

00:06:54,919 --> 00:06:59,330
and so it's I'm sure other things that

00:06:57,770 --> 00:07:00,200
start with D have been supported here

00:06:59,330 --> 00:07:02,900
too

00:07:00,200 --> 00:07:04,760
but it's one of those things where it

00:07:02,900 --> 00:07:06,470
just really has been super useful so

00:07:04,760 --> 00:07:09,950
it's I'm gonna hope hopefully be able to

00:07:06,470 --> 00:07:13,250
keep it supported as long as we can and

00:07:09,950 --> 00:07:21,050
I think that's it for me I don't know

00:07:13,250 --> 00:07:23,060
unless saying quick questions Heike 960

00:07:21,050 --> 00:07:26,600
deferred from the original high key in

00:07:23,060 --> 00:07:29,150
that the tool for doing the recovery

00:07:26,600 --> 00:07:31,280
mode is only available as an x86 binary

00:07:29,150 --> 00:07:33,830
is there any work ongoing on that either

00:07:31,280 --> 00:07:36,260
to make binaries available for um 64 or

00:07:33,830 --> 00:07:38,390
to open source that yes so that has been

00:07:36,260 --> 00:07:39,860
a sticking point for recovery we've

00:07:38,390 --> 00:07:41,180
we've tried as hard as we can to just

00:07:39,860 --> 00:07:43,370
make it so you didn't have to do

00:07:41,180 --> 00:07:46,580
recovery at least in the OSP side of

00:07:43,370 --> 00:07:49,669
things but yes no that that is a known

00:07:46,580 --> 00:07:51,590
pain point there's some issues with the

00:07:49,669 --> 00:07:57,860
I think the RAM initialization that's

00:07:51,590 --> 00:08:02,810
just proprietary so we can't all right

00:07:57,860 --> 00:08:04,789
oh sorry I just when I when I looked at

00:08:02,810 --> 00:08:06,289
the DRM driver or at least on the

00:08:04,789 --> 00:08:09,350
original high key and you supported one

00:08:06,289 --> 00:08:13,310
plane so I just just didn't seem like a

00:08:09,350 --> 00:08:17,000
very good correct driver it is it is

00:08:13,310 --> 00:08:18,110
very limited as far as kind of the

00:08:17,000 --> 00:08:19,880
interesting aspects of the dr i'm

00:08:18,110 --> 00:08:21,320
hardware composer but we are able to

00:08:19,880 --> 00:08:24,979
exercise at least enough of the paths

00:08:21,320 --> 00:08:26,870
that it's caught a lot of troubles so

00:08:24,979 --> 00:08:28,729
far and so and we don't really have any

00:08:26,870 --> 00:08:30,830
other platform you know there's some of

00:08:28,729 --> 00:08:35,060
the dragon boards we've used to do some

00:08:30,830 --> 00:08:36,620
TV for tennessee yeah that's a low

00:08:35,060 --> 00:08:45,560
memory system so it's hard to get it all

00:08:36,620 --> 00:08:47,240
the way but yeah it's it's because we

00:08:45,560 --> 00:08:49,610
have apart from that we really have no

00:08:47,240 --> 00:08:51,380
example code in it right p and so folks

00:08:49,610 --> 00:08:53,420
that are bringing up boards and you know

00:08:51,380 --> 00:08:54,830
as Google's now pushing for DRM KMS

00:08:53,420 --> 00:08:55,250
drivers from vendors it's good to have

00:08:54,830 --> 00:08:58,280
something

00:08:55,250 --> 00:09:00,200
nao SP even if it is just very basic and

00:08:58,280 --> 00:09:01,520
so high key is the only way right now

00:09:00,200 --> 00:09:02,900
that we keep that working because it's

00:09:01,520 --> 00:09:04,160
the only target that's actually using D

00:09:02,900 --> 00:09:08,480
ramappa composure so we're hoping to add

00:09:04,160 --> 00:09:09,800
another one but yeah there's more than

00:09:08,480 --> 00:09:13,010
just having exciting Leon Camus

00:09:09,800 --> 00:09:14,450
functionality just having it there also

00:09:13,010 --> 00:09:17,270
I wanted someone to gather things you

00:09:14,450 --> 00:09:19,640
mentioned with your DM a buff heaps will

00:09:17,270 --> 00:09:22,880
rework it strikes me that this the

00:09:19,640 --> 00:09:24,230
caching situation is no worse with that

00:09:22,880 --> 00:09:26,360
than it was that is what the current

00:09:24,230 --> 00:09:27,950
iron upstream right that is correct it

00:09:26,360 --> 00:09:29,300
was Maya from that functionality may

00:09:27,950 --> 00:09:30,800
have been removed over time upstream

00:09:29,300 --> 00:09:33,470
that the current upstream code is base

00:09:30,800 --> 00:09:35,450
so it the DMA buff implementation has

00:09:33,470 --> 00:09:37,520
the same performance characteristics as

00:09:35,450 --> 00:09:39,170
the upstream ion we are trying to

00:09:37,520 --> 00:09:40,550
address that separately I'm trying to

00:09:39,170 --> 00:09:42,560
keep that as a separate problem as much

00:09:40,550 --> 00:09:45,080
as I can but it's one of those things

00:09:42,560 --> 00:09:46,520
that we definitely don't want to run

00:09:45,080 --> 00:09:48,140
into a situation where we upstream an

00:09:46,520 --> 00:09:49,940
interface and then realize oh this isn't

00:09:48,140 --> 00:09:50,990
going to work for you know that so we

00:09:49,940 --> 00:09:53,930
kind of want to have a little bit of a

00:09:50,990 --> 00:10:01,310
holistic picture there but that I

00:09:53,930 --> 00:10:04,610
probably should let my time move on hi

00:10:01,310 --> 00:10:06,470
my name is Amit so I'll be talking about

00:10:04,610 --> 00:10:08,660
running main line kind of on pixel three

00:10:06,470 --> 00:10:10,010
so this work largely stands on the

00:10:08,660 --> 00:10:12,830
shoulders of Qualcomm lending team

00:10:10,010 --> 00:10:14,030
because they have I mean I think almost

00:10:12,830 --> 00:10:17,060
all the platform bits are already

00:10:14,030 --> 00:10:20,930
upstream for SDM 8:45 if you have been

00:10:17,060 --> 00:10:23,420
following ldml closely so a big shout

00:10:20,930 --> 00:10:24,710
out to Qualcomm lending team and Beyond

00:10:23,420 --> 00:10:25,700
in particular because he has been

00:10:24,710 --> 00:10:28,520
helping me a lot

00:10:25,700 --> 00:10:32,480
getting pixel three so he main line

00:10:28,520 --> 00:10:34,220
cutter booting on pixel three so yeah as

00:10:32,480 --> 00:10:36,920
I was talking about most of the work

00:10:34,220 --> 00:10:40,100
which I have done is by leveraging the

00:10:36,920 --> 00:10:43,520
call commanding teams work and Beyond

00:10:40,100 --> 00:10:47,120
has a so I think couple of weeks are

00:10:43,520 --> 00:10:50,060
gold tender comms released a developer

00:10:47,120 --> 00:10:54,920
platform called DB 845 C so it said

00:10:50,060 --> 00:10:57,500
dragon board next revision so beyond has

00:10:54,920 --> 00:10:59,120
a head of working tree and with most of

00:10:57,500 --> 00:11:01,070
the things working and so the starting

00:10:59,120 --> 00:11:04,459
point for this work is history I took

00:11:01,070 --> 00:11:07,760
history and it was not booting initially

00:11:04,459 --> 00:11:09,050
and then just did a quick diff on the

00:11:07,760 --> 00:11:10,899
stock kernel and

00:11:09,050 --> 00:11:13,519
realized that there are a couple of

00:11:10,899 --> 00:11:16,160
compatible strengths which were missing

00:11:13,519 --> 00:11:18,019
from the main line three so I picked

00:11:16,160 --> 00:11:20,720
those board IDs and MSM IDs from the

00:11:18,019 --> 00:11:26,860
stock kernel just replaced I just added

00:11:20,720 --> 00:11:32,089
those in the mainline DB 845 C DT s3 and

00:11:26,860 --> 00:11:35,570
things started moving right so this

00:11:32,089 --> 00:11:38,959
slide is a bit old so right now we have

00:11:35,570 --> 00:11:40,610
our c2 booting with ufs working and the

00:11:38,959 --> 00:11:42,140
good thing is that even though ADB right

00:11:40,610 --> 00:11:45,680
all the platform stops are already

00:11:42,140 --> 00:11:46,910
upstream so ADB just world straight away

00:11:45,680 --> 00:11:50,269
I did not have to do anything

00:11:46,910 --> 00:11:52,399
there was one upstream function FS bug

00:11:50,269 --> 00:11:54,440
which John pointed out that maybe this

00:11:52,399 --> 00:11:56,390
is something which is biting you and as

00:11:54,440 --> 00:11:59,390
long I mean as soon as I had that

00:11:56,390 --> 00:12:01,760
particular fix in place adb started

00:11:59,390 --> 00:12:03,890
working again the same thing with

00:12:01,760 --> 00:12:05,750
Bluetooth all the zombies are already in

00:12:03,890 --> 00:12:07,220
the Linux firmware directory I should

00:12:05,750 --> 00:12:12,589
have possibly I should have probably

00:12:07,220 --> 00:12:14,510
added the URLs there so Bluetooth is

00:12:12,589 --> 00:12:16,459
working from the command line as long as

00:12:14,510 --> 00:12:20,510
I can see that the scan and it should

00:12:16,459 --> 00:12:27,320
probably scan pixel three ships with two

00:12:20,510 --> 00:12:30,980
u FS u 2 u FS 1 is based on SK Hynix and

00:12:27,320 --> 00:12:35,029
other one is micron so the phones which

00:12:30,980 --> 00:12:37,670
have SK Hynix u FS live deep work the

00:12:35,029 --> 00:12:39,670
vans which which have micron they don't

00:12:37,670 --> 00:12:41,690
boot so there is a some kind of

00:12:39,670 --> 00:12:43,149
incompatibility there's we are still

00:12:41,690 --> 00:12:45,920
figuring out what is going wrong there

00:12:43,149 --> 00:12:51,110
so that's in my to-do list

00:12:45,920 --> 00:12:54,110
all right now EFS works mounting works

00:12:51,110 --> 00:12:56,029
ADB Bluetooth just study behind you FS

00:12:54,110 --> 00:12:58,420
is that they use the same driver which

00:12:56,029 --> 00:13:01,459
they use and stock kernel so for me I

00:12:58,420 --> 00:13:02,959
just copy pasted the same Esteban tree

00:13:01,459 --> 00:13:05,540
or there's no the pretty much the same

00:13:02,959 --> 00:13:08,480
f7 tree and it started booting again it

00:13:05,540 --> 00:13:12,410
started booting so so that's how that

00:13:08,480 --> 00:13:14,360
mounting worked issues to do things

00:13:12,410 --> 00:13:16,339
which we have right now as as I

00:13:14,360 --> 00:13:18,649
mentioned that pixel three phones which

00:13:16,339 --> 00:13:22,490
ship with us a micron ufs they don't

00:13:18,649 --> 00:13:22,880
boot display is currently not in a good

00:13:22,490 --> 00:13:25,190
State

00:13:22,880 --> 00:13:27,950
it that something which we are working

00:13:25,190 --> 00:13:29,960
on right now there are some

00:13:27,950 --> 00:13:31,130
incompatibilities in between iommu and

00:13:29,960 --> 00:13:34,150
boot rotor splash screen

00:13:31,130 --> 00:13:36,500
so when you actually go and try to boot

00:13:34,150 --> 00:13:38,360
mainline kernel on pixel 3 without

00:13:36,500 --> 00:13:41,210
actually disabling the boot splash

00:13:38,360 --> 00:13:43,970
screen it doesn't boot so you have to

00:13:41,210 --> 00:13:46,760
disable the panel driver in the

00:13:43,970 --> 00:13:49,340
bootloader as well

00:13:46,760 --> 00:13:51,500
reboot reason support is something it's

00:13:49,340 --> 00:13:52,850
a very low priority thing but something

00:13:51,500 --> 00:13:55,310
which is good to have instead of just

00:13:52,850 --> 00:13:59,960
keep pressing those key combinations to

00:13:55,310 --> 00:14:02,060
go into reboot sorry bootloader mode I

00:13:59,960 --> 00:14:04,750
can do a quick demo if you guys are

00:14:02,060 --> 00:14:04,750
interested in that

00:14:35,670 --> 00:14:39,019
you know your name

00:15:01,800 --> 00:15:06,339
forget it booting up to a completing

00:15:04,389 --> 00:15:08,620
stage is that I'm using Swift cheetah

00:15:06,339 --> 00:15:10,509
right now so my initial plan was to use

00:15:08,620 --> 00:15:13,569
virtual frame buffer and to get some

00:15:10,509 --> 00:15:16,560
kind of because that's what we've been

00:15:13,569 --> 00:15:19,629
using in the past based on the default

00:15:16,560 --> 00:15:21,850
implementation but default grr grr lock

00:15:19,629 --> 00:15:25,689
implementation doesn't support OpenGL ES

00:15:21,850 --> 00:15:27,910
2.0 and plus versions so John pointed me

00:15:25,689 --> 00:15:30,550
out to try out switch here so I tried

00:15:27,910 --> 00:15:35,019
search here and at least I got OpenGL

00:15:30,550 --> 00:15:39,300
use version but the the glue that right

00:15:35,019 --> 00:15:43,720
which the driver the display part where

00:15:39,300 --> 00:15:47,079
or should I say write the equivalent of

00:15:43,720 --> 00:15:48,370
virtual frame buffer in DRM case setting

00:15:47,079 --> 00:15:52,209
is something which is still missing and

00:15:48,370 --> 00:15:53,709
silk shader crashes in between so the

00:15:52,209 --> 00:15:55,029
hook which I came up with here is that

00:15:53,709 --> 00:15:56,860
in the egl layer

00:15:55,029 --> 00:15:58,779
I don't shut the buffers I don't pass

00:15:56,860 --> 00:16:00,790
the buffer to driver I just say that

00:15:58,779 --> 00:16:03,069
okay have passed something so once I do

00:16:00,790 --> 00:16:04,990
that I mean Android system thinks that I

00:16:03,069 --> 00:16:07,660
have booted to UI and it just keeps

00:16:04,990 --> 00:16:19,269
going on so that's why you see you hear

00:16:07,660 --> 00:16:22,350
that the it has to completion I'm not

00:16:19,269 --> 00:16:22,350
sure if it is very interesting

00:16:22,930 --> 00:16:27,080
[Applause]

00:16:32,050 --> 00:16:37,689
put the yeah I guess

00:16:36,069 --> 00:16:40,529
plans for documentation we probably

00:16:37,689 --> 00:16:42,670
should talk about what we're gonna share

00:16:40,529 --> 00:17:01,920
yes hopefully soon we'll have something

00:16:42,670 --> 00:17:01,920
to share publicly so yankin about

00:17:05,339 --> 00:17:14,230
we have a therapist based on different

00:17:08,860 --> 00:17:20,260
Android versions the abuse that based on

00:17:14,230 --> 00:17:26,980
master we used utt to track put build

00:17:20,260 --> 00:17:33,730
broken problems and put problems for the

00:17:26,980 --> 00:17:38,320
build there are four the Builder broken

00:17:33,730 --> 00:17:41,110
problems may most the reason has been

00:17:38,320 --> 00:17:47,830
rewriting in the build system change for

00:17:41,110 --> 00:17:50,830
Android or MK regiment so that's mainly

00:17:47,830 --> 00:17:53,950
chain called by the and rebuilding

00:17:50,830 --> 00:17:56,799
system change the in the USB master so

00:17:53,950 --> 00:18:01,889
if you have some build broken problems

00:17:56,799 --> 00:18:06,429
with matter you can track that document

00:18:01,889 --> 00:18:10,960
the purpose is to build yes what we are

00:18:06,429 --> 00:18:16,240
working on we are working on now the

00:18:10,960 --> 00:18:22,590
hockey hockey build already released we

00:18:16,240 --> 00:18:30,850
are working on here I here as 15 and am

00:18:22,590 --> 00:18:33,690
6 12 X platforms for the release so our

00:18:30,850 --> 00:18:33,690
hope is to be used

00:18:34,440 --> 00:18:41,519
we have no development on it and it will

00:18:38,950 --> 00:18:45,580
be disabled later

00:18:41,519 --> 00:18:49,059
there are also 70 reviews like the opt

00:18:45,580 --> 00:18:53,889
abuse and he way of the abuse you can

00:18:49,059 --> 00:18:56,610
connect to the maintenance if you are

00:18:53,889 --> 00:18:56,610
interested in

00:19:00,850 --> 00:19:10,730
besides the work and wearables we also

00:19:06,610 --> 00:19:12,620
developed a system for test without

00:19:10,730 --> 00:19:16,790
measurement

00:19:12,620 --> 00:19:20,660
now we how we could show to an the

00:19:16,790 --> 00:19:25,430
transfer fee city has all wittiest

00:19:20,660 --> 00:19:28,870
failures we also integrated with the

00:19:25,430 --> 00:19:35,540
Allen and OPIC dealer to report bugs and

00:19:28,870 --> 00:19:39,230
least the parts from the bacteria we

00:19:35,540 --> 00:19:43,310
also add one page page to show the

00:19:39,230 --> 00:19:49,090
failures for VDS and the CTS tests there

00:19:43,310 --> 00:19:54,070
we show like a defeat the failure is

00:19:49,090 --> 00:20:01,580
happened before only 64-bit platform or

00:19:54,070 --> 00:20:07,280
fixed for both both 32 and 64 platforms

00:20:01,580 --> 00:20:10,280
or we can shoot failure if it only

00:20:07,280 --> 00:20:17,120
happened before as we've hacky but not

00:20:10,280 --> 00:20:20,390
for as we've seen so we also want to add

00:20:17,120 --> 00:20:23,660
some features to make the back of the

00:20:20,390 --> 00:20:32,450
package investigation or failure check

00:20:23,660 --> 00:20:37,460
et in the future also need some change

00:20:32,450 --> 00:20:40,190
under on the system itself like make

00:20:37,460 --> 00:20:41,980
Aditya could be exhausted we are the

00:20:40,190 --> 00:20:46,460
normal

00:20:41,980 --> 00:20:55,360
1880 pot are accessed we are HTTP

00:20:46,460 --> 00:20:55,360
protocol something any questions

00:20:57,500 --> 00:21:17,670
okay so next is shall you I'm sure this

00:21:14,310 --> 00:21:23,330
is very short update for SP TV status

00:21:17,670 --> 00:21:27,020
then currently I'm in assigning from

00:21:23,330 --> 00:21:32,730
function X and an in charge of the asp

00:21:27,020 --> 00:21:40,010
TV related related tasks and also many

00:21:32,730 --> 00:21:49,730
work on drm we sink with mwg and and

00:21:40,010 --> 00:21:55,850
establishing and for for the end and and

00:21:49,730 --> 00:22:00,510
i'm trying to have to have a priority

00:21:55,850 --> 00:22:04,290
securing time support on as android OS p

00:22:00,510 --> 00:22:09,420
TV and wassup t so currently I already

00:22:04,290 --> 00:22:13,380
have I will able to have some school

00:22:09,420 --> 00:22:16,620
time support in permission more with

00:22:13,380 --> 00:22:21,020
some additional manually step for

00:22:16,620 --> 00:22:27,980
example I need to have some have some

00:22:21,020 --> 00:22:31,680
initial time in o'clock in the east side

00:22:27,980 --> 00:22:38,940
for high key because there is no no no

00:22:31,680 --> 00:22:42,900
mechanism to listed to make the tank

00:22:38,940 --> 00:22:46,500
rock and Counting on the inside and also

00:22:42,900 --> 00:22:51,060
I want to we also have planned to have

00:22:46,500 --> 00:22:55,260
some CI loop to make sure every

00:22:51,060 --> 00:22:59,640
component work fine if some some

00:22:55,260 --> 00:23:04,020
component upgrade so for the future

00:22:59,640 --> 00:23:06,010
planned and actually they will already

00:23:04,020 --> 00:23:10,710
have some very camp

00:23:06,010 --> 00:23:15,280
plan philippa TV and I just separate to

00:23:10,710 --> 00:23:18,400
short-term and long-term for certain

00:23:15,280 --> 00:23:23,050
plan we will have some pretty more data

00:23:18,400 --> 00:23:28,030
report support for SB TV like arid

00:23:23,050 --> 00:23:33,510
eternity and and I'm as a of course more

00:23:28,030 --> 00:23:39,990
ears work and also set up some some

00:23:33,510 --> 00:23:43,480
certain maintain a SP must best on SP

00:23:39,990 --> 00:23:45,910
built-in TV calculation just like hockey

00:23:43,480 --> 00:23:48,730
maybe we were more like hello she are

00:23:45,910 --> 00:23:52,030
released and for a long time we want to

00:23:48,730 --> 00:23:56,950
add we have some additional input source

00:23:52,030 --> 00:24:02,890
for SB TV and also print some prei our

00:23:56,950 --> 00:24:06,640
support and more like hdmi cec Spolin

00:24:02,890 --> 00:24:07,000
kernel in house and that's it for my

00:24:06,640 --> 00:24:09,600
part

00:24:07,000 --> 00:24:09,600
thank you

00:24:13,860 --> 00:24:19,930
thank you shall you so arson couldn't be

00:24:18,220 --> 00:24:22,210
heard had disconnects I'm just gonna

00:24:19,930 --> 00:24:24,910
fill in for him and talk a little bit

00:24:22,210 --> 00:24:30,370
about what he's done on LTP DDT and the

00:24:24,910 --> 00:24:33,520
Heike very short set of what I'm going

00:24:30,370 --> 00:24:37,000
to talk about I'll just give a quick

00:24:33,520 --> 00:24:39,370
intro on what is LTP Didit II why do we

00:24:37,000 --> 00:24:41,980
need it or use it how does it work and

00:24:39,370 --> 00:24:47,470
what was the exact quantum of work that

00:24:41,980 --> 00:24:50,290
was undertaken under this a question on

00:24:47,470 --> 00:24:51,700
whether it is possible or I mean we are

00:24:50,290 --> 00:24:54,610
looking at the possibility whether it

00:24:51,700 --> 00:24:58,390
should be merged into LTP itself can it

00:24:54,610 --> 00:25:01,030
run in containers so so what is Delta PD

00:24:58,390 --> 00:25:04,330
duty it is basically a fork of LTP

00:25:01,030 --> 00:25:07,710
codebase which tests about it added

00:25:04,330 --> 00:25:12,010
about a thousand new test cases for

00:25:07,710 --> 00:25:15,370
which are compliant to the LTP way of

00:25:12,010 --> 00:25:19,870
writing test cases it was developed by

00:25:15,370 --> 00:25:22,600
Texas Instruments and it is for there it

00:25:19,870 --> 00:25:25,810
was meant for their specific devices so

00:25:22,600 --> 00:25:28,720
DDT is basically device driver tests it

00:25:25,810 --> 00:25:31,360
covers about 40 subsystems of drivers

00:25:28,720 --> 00:25:34,540
directory under the drivers directory of

00:25:31,360 --> 00:25:38,470
the Linux kernel so the official URL is

00:25:34,540 --> 00:25:42,040
is right here you can look at it why

00:25:38,470 --> 00:25:45,160
would we use Alta Badia T so it's quite

00:25:42,040 --> 00:25:48,220
helpful to check device drivers it's

00:25:45,160 --> 00:25:50,860
basically one of the single largest

00:25:48,220 --> 00:25:55,000
repository that we could find for unit

00:25:50,860 --> 00:26:00,130
tests that examine in exercise testing

00:25:55,000 --> 00:26:02,860
of device drivers for arm devices it use

00:26:00,130 --> 00:26:04,930
you can use specific platforms to select

00:26:02,860 --> 00:26:07,450
different test suit configurations for

00:26:04,930 --> 00:26:12,250
different boards so we added support for

00:26:07,450 --> 00:26:16,410
high key 6 2 to 0 a lot of test cases

00:26:12,250 --> 00:26:19,450
are only cared of or I mean they're

00:26:16,410 --> 00:26:24,850
important or useful for embedded devices

00:26:19,450 --> 00:26:25,960
like UART SPI a score C maybe MMC the

00:26:24,850 --> 00:26:29,110
limitations that

00:26:25,960 --> 00:26:31,720
as of today LTP DDT has is basically

00:26:29,110 --> 00:26:33,789
many tests are designed for Ti device

00:26:31,720 --> 00:26:37,870
drivers only so that's a big chunk of

00:26:33,789 --> 00:26:40,179
what we've been trying to do there is an

00:26:37,870 --> 00:26:44,080
absence of auto detection mechanism to

00:26:40,179 --> 00:26:45,460
skip unnecessary tests maybe the authors

00:26:44,080 --> 00:26:47,649
thought that this should be deselected

00:26:45,460 --> 00:26:49,720
by the platform selection that you do so

00:26:47,649 --> 00:26:52,240
that's something we'd like to need to

00:26:49,720 --> 00:26:55,529
discuss when we try and upstream it to

00:26:52,240 --> 00:26:59,020
the LTP community there are some unusual

00:26:55,529 --> 00:27:01,299
commands that the tests depend on but

00:26:59,020 --> 00:27:03,460
they're not included in the LTP reality

00:27:01,299 --> 00:27:05,380
themselves so we found that the hard way

00:27:03,460 --> 00:27:10,600
we're certainly a few tests failed

00:27:05,380 --> 00:27:14,320
because we used a different route FS how

00:27:10,600 --> 00:27:17,020
does it work it's a very short I mean

00:27:14,320 --> 00:27:19,960
it's fairly self-explanatory you clone

00:27:17,020 --> 00:27:23,110
it from the LTP d/dt gate you just run

00:27:19,960 --> 00:27:26,049
like LTP run LTP - P is the platform

00:27:23,110 --> 00:27:28,480
that you want to run for and - F is the

00:27:26,049 --> 00:27:31,750
test that you want to run and then you

00:27:28,480 --> 00:27:35,710
can check the logs of how the tests have

00:27:31,750 --> 00:27:39,159
failed the main changes to original LTP

00:27:35,710 --> 00:27:41,440
have been in the platform directory then

00:27:39,159 --> 00:27:46,029
some test cases DDT directory and run

00:27:41,440 --> 00:27:48,399
test slash DDT what did we do so we

00:27:46,029 --> 00:27:50,380
added platforms for adding high key

00:27:48,399 --> 00:27:53,370
upstream so there were patches that got

00:27:50,380 --> 00:27:56,110
sent to D DT and D is DDT repository now

00:27:53,370 --> 00:27:59,020
you can download from there and run it

00:27:56,110 --> 00:28:03,909
for high key there were 47 test suites

00:27:59,020 --> 00:28:06,610
that we selected and this was about a

00:28:03,909 --> 00:28:08,649
few hundreds of test cases that we ran

00:28:06,610 --> 00:28:12,130
for high key there's a list there's a

00:28:08,649 --> 00:28:14,830
link so you can have a look at the list

00:28:12,130 --> 00:28:16,659
that we selected we ran it on high key

00:28:14,830 --> 00:28:18,539
and naturally we got hundreds of

00:28:16,659 --> 00:28:23,409
failures so we started clearing those up

00:28:18,539 --> 00:28:28,120
and we managed to clear out a few things

00:28:23,409 --> 00:28:31,210
so like arm V arm V star tests we

00:28:28,120 --> 00:28:34,360
they're all they are all passing now

00:28:31,210 --> 00:28:37,000
with four fixes that were submitted

00:28:34,360 --> 00:28:39,330
upstream here upstream is the LTP DDT

00:28:37,000 --> 00:28:44,310
get that di maintains

00:28:39,330 --> 00:28:48,900
ltb watchdog tests got all passed with

00:28:44,310 --> 00:28:51,960
one bug-fix UART all passes with the two

00:28:48,900 --> 00:28:53,640
patches GPIO is passing partly but

00:28:51,960 --> 00:28:56,310
there's some test logic that needs some

00:28:53,640 --> 00:28:59,700
redesign mmm see it's mostly passing

00:28:56,310 --> 00:29:02,580
there are there is one patch can we

00:28:59,700 --> 00:29:08,460
merge it back to LTP so these are arson

00:29:02,580 --> 00:29:10,620
slides it is derived from LTP LTP DDT is

00:29:08,460 --> 00:29:12,150
derived from LTP so it the code

00:29:10,620 --> 00:29:15,680
structure has not changed drastically

00:29:12,150 --> 00:29:19,890
it's not something totally new so it's

00:29:15,680 --> 00:29:23,850
probably I mean it should be easy to do

00:29:19,890 --> 00:29:27,120
that also the LTP DDT is rebased on

00:29:23,850 --> 00:29:29,130
latest LTP tree but it I think hasn't

00:29:27,120 --> 00:29:33,480
been done in some time probably that's

00:29:29,130 --> 00:29:37,200
what he means there I don't know as a

00:29:33,480 --> 00:29:40,470
few cons that might we might face while

00:29:37,200 --> 00:29:42,570
we try to abstain it we are not sure

00:29:40,470 --> 00:29:44,700
that LTP will accept platform-based

00:29:42,570 --> 00:29:47,370
selection because the impression that

00:29:44,700 --> 00:29:50,190
LTP gives is that it focuses on general

00:29:47,370 --> 00:29:52,290
Linux interfaces not caring about

00:29:50,190 --> 00:29:53,720
architecture or boards and so on so

00:29:52,290 --> 00:29:56,820
that's probably something we'll need to

00:29:53,720 --> 00:29:59,760
talk about with the LTP upstream in

00:29:56,820 --> 00:30:02,610
tenors and the community and there are

00:29:59,760 --> 00:30:04,830
certain cases where some kernel modules

00:30:02,610 --> 00:30:06,480
needed to be inserted there are tests

00:30:04,830 --> 00:30:09,510
written which check for kernel modules

00:30:06,480 --> 00:30:14,760
to be inserted so I don't think LTP has

00:30:09,510 --> 00:30:16,170
that support but I could be wrong can we

00:30:14,760 --> 00:30:18,300
run these in containers so the

00:30:16,170 --> 00:30:20,370
motivation there is that it often

00:30:18,300 --> 00:30:21,630
depends on a lot of external tools and

00:30:20,370 --> 00:30:23,250
there is no way to check and install

00:30:21,630 --> 00:30:27,650
those tools right now so can we continue

00:30:23,250 --> 00:30:31,200
eyes the run of LTP DDD so you can just

00:30:27,650 --> 00:30:34,290
have one virtual container that can do

00:30:31,200 --> 00:30:36,360
it I think the challenge there was that

00:30:34,290 --> 00:30:39,420
there should be a possibility to have

00:30:36,360 --> 00:30:41,910
the containers to be able to access

00:30:39,420 --> 00:30:45,300
Devon sis devices I'm not sure if that

00:30:41,910 --> 00:30:47,310
is I'm not a big container person so I'm

00:30:45,300 --> 00:30:49,200
not sure if that is possible and then

00:30:47,310 --> 00:30:53,370
can modules naturally dependent kernel

00:30:49,200 --> 00:31:01,379
versions so that's another challenge

00:30:53,370 --> 00:31:02,700
I think that's all that he had i don't

00:31:01,379 --> 00:31:06,450
guarantee that I'll be able to answer

00:31:02,700 --> 00:31:08,909
your questions well I'll try can you say

00:31:06,450 --> 00:31:10,919
a few words more about what those tests

00:31:08,909 --> 00:31:13,649
are actually doing like how they work

00:31:10,919 --> 00:31:16,080
and are they sharing any code with the

00:31:13,649 --> 00:31:18,419
existing LTP test or is it just like the

00:31:16,080 --> 00:31:21,210
test harness that is being reused from

00:31:18,419 --> 00:31:22,799
LTP I think it's the test harness that

00:31:21,210 --> 00:31:25,320
is being reused because most of the

00:31:22,799 --> 00:31:27,659
tests are specific device driver tests

00:31:25,320 --> 00:31:30,389
like for an I square C specific chip

00:31:27,659 --> 00:31:34,590
that they're testing using the LTP

00:31:30,389 --> 00:31:37,230
harness so I don't think there's going

00:31:34,590 --> 00:31:39,119
to be a lot of existing code that is

00:31:37,230 --> 00:31:42,090
going to be common between these this is

00:31:39,119 --> 00:31:44,549
more towards a specific device driver

00:31:42,090 --> 00:31:47,460
kind of test whereas as I understand LTP

00:31:44,549 --> 00:31:57,149
tries to focus more on framework level

00:31:47,460 --> 00:31:59,369
testing I could be wrong you know

00:31:57,149 --> 00:32:01,200
separate from LTP if they don't want to

00:31:59,369 --> 00:32:04,619
accept the DDP instead of keeping it as

00:32:01,200 --> 00:32:06,570
a fork of it possibly I will have to see

00:32:04,619 --> 00:32:09,499
but if you have any ideas around if you

00:32:06,570 --> 00:32:17,220
know of any other frameworks that would

00:32:09,499 --> 00:32:18,929
okay thanks so Cyril the maintainer or

00:32:17,220 --> 00:32:21,659
else if you don't have any sort of

00:32:18,929 --> 00:32:23,279
initial feeling for mr. whether we

00:32:21,659 --> 00:32:25,289
haven't done that yet because we want

00:32:23,279 --> 00:32:27,119
you to see how easy it was or difficult

00:32:25,289 --> 00:32:30,570
it was to try and add another platform

00:32:27,119 --> 00:32:33,240
so this exercise going on for I think

00:32:30,570 --> 00:32:36,149
about a couple of months now so we'll

00:32:33,240 --> 00:32:38,610
have we intend to start that very soon

00:32:36,149 --> 00:32:40,529
okay and then do you know I know that

00:32:38,610 --> 00:32:42,179
there is a new test library that was

00:32:40,529 --> 00:32:44,909
added to LTP at some point I don't know

00:32:42,179 --> 00:32:46,950
how recent that was so in our work in

00:32:44,909 --> 00:32:48,570
AOSP you know we've recently been trying

00:32:46,950 --> 00:32:50,879
to expand the SIS call coverage the

00:32:48,570 --> 00:32:52,980
testing coverage to cover all this is

00:32:50,879 --> 00:32:54,690
calls we depend on in AOSP one thing

00:32:52,980 --> 00:32:56,700
that we commonly run into is that some

00:32:54,690 --> 00:32:58,110
of the the older tests for sis calls are

00:32:56,700 --> 00:33:00,480
based on the old version of the test

00:32:58,110 --> 00:33:02,460
library and LTP I have a feeling that if

00:33:00,480 --> 00:33:03,809
the DDD tests are dependent on the old

00:33:02,460 --> 00:33:04,670
test library that's going to be one of

00:33:03,809 --> 00:33:07,010
the

00:33:04,670 --> 00:33:09,680
you know barriers to sucking those in

00:33:07,010 --> 00:33:11,390
yeah so that's something we that's

00:33:09,680 --> 00:33:13,430
probably one of them immediately next

00:33:11,390 --> 00:33:16,250
items after connect I will try and see

00:33:13,430 --> 00:33:18,280
if we can merge it with Delta P or you

00:33:16,250 --> 00:33:24,260
know do a rebase over LTP and see how

00:33:18,280 --> 00:33:27,050
good or bad it fares okay so if there

00:33:24,260 --> 00:33:30,520
are no more questions at the end of

00:33:27,050 --> 00:33:30,520
slides thank you all for joining us

00:33:30,620 --> 00:33:33,770

YouTube URL: https://www.youtube.com/watch?v=E8B0jeXE7_I


