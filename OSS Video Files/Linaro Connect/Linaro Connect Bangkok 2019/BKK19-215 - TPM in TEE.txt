Title: BKK19-215 - TPM in TEE
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
In this talk we are going to look into what it means to run a TEE in a TPM and answer questions like, what are the benefits and what the trade-offs when you are running a software based TPM in a TEE as a firmware TPM. For the second part of the talk we intend to have a more open discussion with the audience, where we want to discuss use cases and what kind changes that are necessary in boot components to be able talk to software based TPM instead of a real TPM.

Joakim Bech / Principal Engineer Linaro
Joakim has been a Linux user for about 15 years where he spent most of the time in his professional career working with security for embedded devices. The last five years he has been heading Security Working Group in Linaro who are working with various upstream projects related to Security where OP-TEE is one of the key projects for that group.
Captions: 
	00:00:05,470 --> 00:00:12,190
hi everyone welcome to this combined

00:00:10,299 --> 00:00:18,730
presentation and I would say buff

00:00:12,190 --> 00:00:20,560
session about TPM in T so I am going to

00:00:18,730 --> 00:00:23,830
start with a little bit like an overview

00:00:20,560 --> 00:00:25,599
of what a TPM is just to get people

00:00:23,830 --> 00:00:26,769
little bit started and talk a little bit

00:00:25,599 --> 00:00:30,310
about the different features that you

00:00:26,769 --> 00:00:31,840
usually use in the TPM and then I'm

00:00:30,310 --> 00:00:34,239
going to discuss a little bit about the

00:00:31,840 --> 00:00:36,910
firmware TPM itself and something that

00:00:34,239 --> 00:00:39,309
we have tried out and so on and then

00:00:36,910 --> 00:00:40,690
there are second half of this I would

00:00:39,309 --> 00:00:42,730
like to have some kind of open

00:00:40,690 --> 00:00:45,550
discussion we have some questions about

00:00:42,730 --> 00:00:47,700
use cases and where why do we need to do

00:00:45,550 --> 00:00:51,039
this and so on

00:00:47,700 --> 00:00:53,910
so the motivation for the talk people

00:00:51,039 --> 00:00:59,829
I can't see the guy who was kind of

00:00:53,910 --> 00:01:01,660
Francois the ledge team they they were

00:00:59,829 --> 00:01:05,680
the one who was kind of driving this and

00:01:01,660 --> 00:01:08,800
asked about can we run a TPM in a tea

00:01:05,680 --> 00:01:10,660
environment so personally I've known

00:01:08,800 --> 00:01:12,160
about TPM quite a while but I've never

00:01:10,660 --> 00:01:14,110
really used them so I had to do my

00:01:12,160 --> 00:01:15,789
homework also to actually read up and

00:01:14,110 --> 00:01:19,920
understand a little bit more about it

00:01:15,789 --> 00:01:22,179
and then also had to explore existing

00:01:19,920 --> 00:01:23,619
implementations out there and see have

00:01:22,179 --> 00:01:27,759
anyone already done something that we

00:01:23,619 --> 00:01:29,050
can use and so on and of course as you

00:01:27,759 --> 00:01:30,759
can imagine now since we're running

00:01:29,050 --> 00:01:33,759
something in software based environment

00:01:30,759 --> 00:01:38,319
instead of a chip you have trade-offs

00:01:33,759 --> 00:01:40,119
and so on and as I said use case study

00:01:38,319 --> 00:01:43,330
who should use this and where and why

00:01:40,119 --> 00:01:44,739
and so on and if we get some consensus

00:01:43,330 --> 00:01:47,140
here saying that this is something that

00:01:44,739 --> 00:01:49,030
seems to be good to have then it might

00:01:47,140 --> 00:01:51,550
be that we actually proposed this in the

00:01:49,030 --> 00:01:57,700
future for TAC and try to do something

00:01:51,550 --> 00:01:59,590
in our way bit so TPM how many we have

00:01:57,700 --> 00:02:02,319
built here is an expert on TPM I know

00:01:59,590 --> 00:02:05,470
that's but if there's anyone else here

00:02:02,319 --> 00:02:08,470
Stuart if I'm saying something totally

00:02:05,470 --> 00:02:10,479
wrong please just shout out and also by

00:02:08,470 --> 00:02:12,370
the way we have microphones feel free to

00:02:10,479 --> 00:02:13,440
interrupt and ask questions while I'm

00:02:12,370 --> 00:02:16,510
talking

00:02:13,440 --> 00:02:18,350
so TPM I mean you have probably seen it

00:02:16,510 --> 00:02:20,660
if you have a motherboard

00:02:18,350 --> 00:02:22,580
usually see something if it's not sold

00:02:20,660 --> 00:02:25,820
wrong you have it like your slot where

00:02:22,580 --> 00:02:28,280
you can put the standalone TPM or as we

00:02:25,820 --> 00:02:30,590
did this 96 Moore's a couple of years

00:02:28,280 --> 00:02:34,220
ago we put the TPM here or you have its

00:02:30,590 --> 00:02:36,770
old world directly on the PCB the TPM

00:02:34,220 --> 00:02:38,960
itself is a passive device you you it's

00:02:36,770 --> 00:02:41,210
not really that the TPM can can force

00:02:38,960 --> 00:02:42,740
you to stop booting or something if you

00:02:41,210 --> 00:02:44,960
don't have the correct signatures and so

00:02:42,740 --> 00:02:46,820
on so there's always someone calling the

00:02:44,960 --> 00:02:51,800
TPM and making the decision based on

00:02:46,820 --> 00:02:54,650
reply I've listed a couple of use cases

00:02:51,800 --> 00:02:58,130
here I will go through some of them a

00:02:54,650 --> 00:03:00,530
little bit more in detail so actually

00:02:58,130 --> 00:03:03,980
maybe mention some which I don't go to

00:03:00,530 --> 00:03:05,900
talk about audit of log trail I know

00:03:03,980 --> 00:03:08,660
that is one of the things that the ledge

00:03:05,900 --> 00:03:10,610
deem are interested in how can you

00:03:08,660 --> 00:03:13,310
prevent that someone is tampering we

00:03:10,610 --> 00:03:15,200
have a log fight for example the

00:03:13,310 --> 00:03:17,780
rollback is another really interesting

00:03:15,200 --> 00:03:19,520
use case rollback protection because at

00:03:17,780 --> 00:03:21,410
some point you want to get to a firmware

00:03:19,520 --> 00:03:23,840
version that you can't allow users to

00:03:21,410 --> 00:03:27,290
downgrade to potentially buggy or

00:03:23,840 --> 00:03:30,710
unsecured firmware revisions exactly and

00:03:27,290 --> 00:03:32,120
I mean regardless what kind of hardware

00:03:30,710 --> 00:03:33,920
you'll be working with in the past when

00:03:32,120 --> 00:03:35,510
it comes to security you can see a lot

00:03:33,920 --> 00:03:39,080
of these things are overlapping you can

00:03:35,510 --> 00:03:43,010
see things here from T environment HSMs

00:03:39,080 --> 00:03:45,260
and whatever DAA

00:03:43,010 --> 00:03:47,120
that's a big complicated beast and if

00:03:45,260 --> 00:03:49,930
someone knows how that works please tell

00:03:47,120 --> 00:03:57,440
me because I don't that's a a lot of

00:03:49,930 --> 00:03:59,630
complicated maps and so on so TPM has

00:03:57,440 --> 00:04:03,340
been around for quite a while so most

00:03:59,630 --> 00:04:06,530
laptops I guess even today have a TPM

00:04:03,340 --> 00:04:10,640
1.2 but we are starting to see more and

00:04:06,530 --> 00:04:12,080
more 2.0 devices and 1.2 had it was a

00:04:10,640 --> 00:04:16,540
little bit limited I mean you could only

00:04:12,080 --> 00:04:18,890
use RSA 2048 keys and it was using sha-1

00:04:16,540 --> 00:04:22,430
you couldn't really change anything else

00:04:18,890 --> 00:04:24,680
and since it's based on sha-1 it's been

00:04:22,430 --> 00:04:26,570
said that you can't really I mean it's

00:04:24,680 --> 00:04:29,360
not considered secure anymore so you

00:04:26,570 --> 00:04:30,510
shouldn't use it so that's why I put

00:04:29,360 --> 00:04:33,780
here

00:04:30,510 --> 00:04:37,290
it's of course not unusable but you will

00:04:33,780 --> 00:04:44,130
not really put a TPM one or two device

00:04:37,290 --> 00:04:47,160
in new hardware today a difference

00:04:44,130 --> 00:04:49,260
otherwise with key handling is that on

00:04:47,160 --> 00:04:52,140
one or two you generate like an

00:04:49,260 --> 00:04:55,560
endorsement key storage root key and so

00:04:52,140 --> 00:04:57,900
on while you in TPM 2.0 instead use a

00:04:55,560 --> 00:05:00,210
random seed and you have some templates

00:04:57,900 --> 00:05:03,120
where you can generate different keys

00:05:00,210 --> 00:05:06,000
and so on so the root of trust is not

00:05:03,120 --> 00:05:12,300
really a key in TPM 2.0 the root of

00:05:06,000 --> 00:05:16,560
Christ is a random seed TPM to us here

00:05:12,300 --> 00:05:18,870
also enables many more alternatives when

00:05:16,560 --> 00:05:21,320
it comes to cryptographic operations so

00:05:18,870 --> 00:05:29,430
you have all their I mean short 256 and

00:05:21,320 --> 00:05:31,320
elliptic curves and so on also so when

00:05:29,430 --> 00:05:33,870
it comes to the key generation as I said

00:05:31,320 --> 00:05:38,400
you're using this seed so this is the

00:05:33,870 --> 00:05:40,260
TPM itself on the different hierarchies

00:05:38,400 --> 00:05:43,020
there are four different hierarchies

00:05:40,260 --> 00:05:45,470
that you can use depending on if you're

00:05:43,020 --> 00:05:48,270
a user or a platform lender and so on

00:05:45,470 --> 00:05:50,490
but you take the seed and you take the

00:05:48,270 --> 00:05:52,800
template and you Ronnie run it through a

00:05:50,490 --> 00:05:55,500
key derivation function and you get a

00:05:52,800 --> 00:05:58,500
primary key and we've got primary key

00:05:55,500 --> 00:06:00,630
you can then create kind of tree

00:05:58,500 --> 00:06:03,810
structure of keys which you can export

00:06:00,630 --> 00:06:05,490
since they will be the private key on

00:06:03,810 --> 00:06:11,610
the exported keys will basically be

00:06:05,490 --> 00:06:15,030
wrapped by the public key so as we will

00:06:11,610 --> 00:06:17,700
see later also this is kind of good in

00:06:15,030 --> 00:06:25,140
that sense that there's limited storage

00:06:17,700 --> 00:06:27,540
in the TPM device and I think most

00:06:25,140 --> 00:06:29,700
people who have read about TPM have

00:06:27,540 --> 00:06:33,150
heard about these PCRs platform

00:06:29,700 --> 00:06:35,910
configuration registers there is a set

00:06:33,150 --> 00:06:37,950
of them and different regions are

00:06:35,910 --> 00:06:40,790
supposed to be used by different use

00:06:37,950 --> 00:06:44,580
cases so maybe PCR 0 to 5 is used by

00:06:40,790 --> 00:06:47,610
firmware and 20 to 24 could be used by

00:06:44,580 --> 00:06:51,090
the operating system and so on but what

00:06:47,610 --> 00:06:55,920
it is is basically ready start holding a

00:06:51,090 --> 00:06:59,040
hash value so when you boot up we will

00:06:55,920 --> 00:07:01,580
see that in this coming slide here you

00:06:59,040 --> 00:07:05,160
basically make a hash calculation and

00:07:01,580 --> 00:07:07,110
then you give that to the TPM and a TPM

00:07:05,160 --> 00:07:09,780
just stores it and then you can use it

00:07:07,110 --> 00:07:12,150
later on when you want to verify the

00:07:09,780 --> 00:07:15,030
state of a system and so on I will come

00:07:12,150 --> 00:07:17,520
to that in some slides so but it's just

00:07:15,030 --> 00:07:20,670
a running hash basically so if you see

00:07:17,520 --> 00:07:22,440
normally how we do for example in crypto

00:07:20,670 --> 00:07:24,900
implementation you have hash unit update

00:07:22,440 --> 00:07:28,310
and final you can see this as the update

00:07:24,900 --> 00:07:28,310
function update update update

00:07:29,849 --> 00:07:35,699
and the way to read how to piece your

00:07:32,159 --> 00:07:39,719
values that's with something that they

00:07:35,699 --> 00:07:45,199
call quote in the TCG specification so

00:07:39,719 --> 00:07:48,949
you basically sign the piece your values

00:07:45,199 --> 00:07:51,509
may be a little bit too small but this

00:07:48,949 --> 00:07:55,529
this is a picture showing what is called

00:07:51,509 --> 00:07:57,719
a measured boot it's not really this I

00:07:55,529 --> 00:07:59,669
mean the normal secure boot that we're

00:07:57,719 --> 00:08:02,669
doing but it kind of reminds of it

00:07:59,669 --> 00:08:05,069
so here I've put together example where

00:08:02,669 --> 00:08:07,589
for example have the wrong code who

00:08:05,069 --> 00:08:10,019
verifies the first bootloader

00:08:07,589 --> 00:08:12,629
normal verification we've signatures or

00:08:10,019 --> 00:08:15,089
whatever then the former can measure

00:08:12,629 --> 00:08:18,509
itself and send a piece or value to the

00:08:15,089 --> 00:08:23,249
TPM so it could be like I said have PC R

00:08:18,509 --> 00:08:26,399
0 and then the firmware measured the or

00:08:23,249 --> 00:08:28,709
take the hash of the next bootloader

00:08:26,399 --> 00:08:31,409
that it's going to load and send that PC

00:08:28,709 --> 00:08:39,949
R value to the TPM and that's how it

00:08:31,409 --> 00:08:42,599
goes on for each in every boot stage so

00:08:39,949 --> 00:08:45,300
when you've done that then you can start

00:08:42,599 --> 00:08:50,339
doing this remote attestation feature

00:08:45,300 --> 00:08:52,800
here so you use that when you are you

00:08:50,339 --> 00:08:54,870
have a need to verify the state of a

00:08:52,800 --> 00:08:58,410
system that you are talking to remotely

00:08:54,870 --> 00:09:00,720
so how can you ensure that a device

00:08:58,410 --> 00:09:04,069
hasn't been tampered it's it should have

00:09:00,720 --> 00:09:06,660
been booted up in a certain state and

00:09:04,069 --> 00:09:09,209
the way that it works is based on these

00:09:06,660 --> 00:09:12,149
--piece your since the hash computation

00:09:09,209 --> 00:09:13,800
is you can't really change it so if you

00:09:12,149 --> 00:09:16,319
change the order of boot binary so on

00:09:13,800 --> 00:09:20,069
you will get a different hash value so

00:09:16,319 --> 00:09:22,319
you know that if the signature of the

00:09:20,069 --> 00:09:23,910
quote is correct and the hash value is

00:09:22,319 --> 00:09:25,529
what you expect then you can know that

00:09:23,910 --> 00:09:28,160
the system is in the state that you

00:09:25,529 --> 00:09:28,160
expect

00:09:30,279 --> 00:09:36,310
and yeah as a written you can you can it

00:09:34,509 --> 00:09:38,949
one time I mean and you can do it in

00:09:36,310 --> 00:09:42,060
time based if there is some need to to

00:09:38,949 --> 00:09:42,060
check it all the time and so on

00:09:44,579 --> 00:09:50,910
sealed keys this is a pretty cool

00:09:47,199 --> 00:09:53,259
feature and quite powerful also I mean

00:09:50,910 --> 00:09:55,990
we've sealed keys and data you can use

00:09:53,259 --> 00:09:59,319
the TPM to lock down things that is only

00:09:55,990 --> 00:10:01,269
possible to use when the system in in

00:09:59,319 --> 00:10:06,759
certain state so you can think for

00:10:01,269 --> 00:10:08,259
example in they say in you boot we want

00:10:06,759 --> 00:10:11,110
to unlock a certain key or something

00:10:08,259 --> 00:10:13,930
then you could use based on the PCR so

00:10:11,110 --> 00:10:17,319
you can boot up and when the PC arts

00:10:13,930 --> 00:10:20,379
have a certain value then it will unlock

00:10:17,319 --> 00:10:21,879
a key you can use that and then if you

00:10:20,379 --> 00:10:23,290
continue building you will get another

00:10:21,879 --> 00:10:31,240
piece of value and it will be locked

00:10:23,290 --> 00:10:36,490
again and in TPM 1.2 this was hard to

00:10:31,240 --> 00:10:38,860
use since there was no really easy way

00:10:36,490 --> 00:10:41,259
to upgrade things and so on when you did

00:10:38,860 --> 00:10:44,019
like this and that was one of the things

00:10:41,259 --> 00:10:46,269
that they addressed in TPM 2.0 so now

00:10:44,019 --> 00:10:49,990
there is a way to eat more easy

00:10:46,269 --> 00:10:52,680
I mean unseal and sign another value

00:10:49,990 --> 00:10:55,120
that will be expected in the future also

00:10:52,680 --> 00:10:57,069
but there are some things that I still

00:10:55,120 --> 00:10:59,589
haven't really figured out how how to

00:10:57,069 --> 00:11:01,750
deal with like I said here what if the

00:10:59,589 --> 00:11:03,100
hard drive gets under couple bits I'm

00:11:01,750 --> 00:11:05,980
not sure if and one of you have more

00:11:03,100 --> 00:11:08,019
insights into it but I guess there must

00:11:05,980 --> 00:11:12,069
be some way to take things like that

00:11:08,019 --> 00:11:13,449
into account also and yeah Microsoft

00:11:12,069 --> 00:11:15,129
they are using this so if you have

00:11:13,449 --> 00:11:18,399
BitLocker enable on the Windows Device

00:11:15,129 --> 00:11:21,069
this is how it works they seal the full

00:11:18,399 --> 00:11:23,699
disk encryption key and unlock it at a

00:11:21,069 --> 00:11:23,699
certain States

00:11:31,490 --> 00:11:34,980
when you communicate with the TPM you of

00:11:33,960 --> 00:11:37,950
course also need to authenticate

00:11:34,980 --> 00:11:39,300
yourself in some way I've listed a

00:11:37,950 --> 00:11:42,800
couple of things here so you can use

00:11:39,300 --> 00:11:46,830
normal passwords things right with that

00:11:42,800 --> 00:11:49,380
you can use H max so you have a some

00:11:46,830 --> 00:11:51,990
kind of shared key between the caller

00:11:49,380 --> 00:11:53,910
and the TPM itself

00:11:51,990 --> 00:11:56,280
I guess that's considered as a little

00:11:53,910 --> 00:11:58,260
bit more secure otherwise you can use

00:11:56,280 --> 00:12:00,360
what is called policies and I've listed

00:11:58,260 --> 00:12:04,230
a couple of example of policies here I

00:12:00,360 --> 00:12:06,540
mean you can say that you can only use

00:12:04,230 --> 00:12:08,460
some feature or unlock some key or do

00:12:06,540 --> 00:12:11,430
something if you have certain values in

00:12:08,460 --> 00:12:15,110
piece your password a sequence of TPM

00:12:11,430 --> 00:12:17,490
commands and so on and it's not that you

00:12:15,110 --> 00:12:19,410
that you can only use one of them you

00:12:17,490 --> 00:12:23,100
can combine them mix them together in

00:12:19,410 --> 00:12:26,850
different ways so this can become pretty

00:12:23,100 --> 00:12:28,440
complex I would say and the tray one I

00:12:26,850 --> 00:12:29,820
listed here is that that is something

00:12:28,440 --> 00:12:34,830
that you use when you are kind of

00:12:29,820 --> 00:12:38,640
generating this new pcr values if you do

00:12:34,830 --> 00:12:40,170
have some update or something now when

00:12:38,640 --> 00:12:42,830
he dropped it so far so Provost said

00:12:40,170 --> 00:12:42,830
something correct

00:12:43,260 --> 00:12:50,670
resource manager so a TPM is a bit

00:12:47,430 --> 00:12:53,670
limited I mean only one entity can talk

00:12:50,670 --> 00:12:55,230
to it at a time that means that there

00:12:53,670 --> 00:13:02,370
needs to be something sitting in between

00:12:55,230 --> 00:13:04,890
who communicate with the T and yeah so

00:13:02,370 --> 00:13:06,450
you have some kind of control who's who

00:13:04,890 --> 00:13:09,750
is handling all the communication and so

00:13:06,450 --> 00:13:12,300
on I need a TCG specification this is

00:13:09,750 --> 00:13:14,610
called resource manager it used to be a

00:13:12,300 --> 00:13:18,870
user space component in Linux

00:13:14,610 --> 00:13:22,110
but in current 412 it's being merged so

00:13:18,870 --> 00:13:24,930
it's officially in Linux but this is

00:13:22,110 --> 00:13:27,270
important to know I mean you have a

00:13:24,930 --> 00:13:29,210
limited amount of users that can use it

00:13:27,270 --> 00:13:31,800
which also makes this a little bit

00:13:29,210 --> 00:13:34,310
complicated later on I mean if you if

00:13:31,800 --> 00:13:37,350
you have the full system up and running

00:13:34,310 --> 00:13:39,510
you we have the same issues in opti

00:13:37,350 --> 00:13:39,779
today for example that someone owns the

00:13:39,510 --> 00:13:42,209
device

00:13:39,779 --> 00:13:44,249
if we're using EMC for example we we

00:13:42,209 --> 00:13:45,930
have to rely on Linux kernel Selina's

00:13:44,249 --> 00:13:52,860
Carl is the one who goes device it's the

00:13:45,930 --> 00:13:58,680
same here basically this is the picture

00:13:52,860 --> 00:13:59,910
of the tea suji's of our stack most of

00:13:58,680 --> 00:14:03,209
the things here is actually running in

00:13:59,910 --> 00:14:06,449
user space in linux and there's a lot of

00:14:03,209 --> 00:14:09,930
layers depending on on what you are

00:14:06,449 --> 00:14:11,970
intending to do you use the different

00:14:09,930 --> 00:14:13,709
layers I mean if you if your embedded

00:14:11,970 --> 00:14:16,050
device low level you might go on the

00:14:13,709 --> 00:14:18,749
lower level layers instead but then you

00:14:16,050 --> 00:14:23,009
lose some of the features that can help

00:14:18,749 --> 00:14:25,110
you like like I said session handling or

00:14:23,009 --> 00:14:26,639
some crypt operations and so on so you

00:14:25,110 --> 00:14:28,980
get more and more features to higher up

00:14:26,639 --> 00:14:30,720
you go in the stack so it should be in

00:14:28,980 --> 00:14:33,839
theory it should be easier to use it

00:14:30,720 --> 00:14:36,629
from from the top so to say but this is

00:14:33,839 --> 00:14:41,449
quite big thing and pretty complicated

00:14:36,629 --> 00:14:48,360
also I would say so and it seems to grow

00:14:41,449 --> 00:14:51,860
for each release so that's the primer

00:14:48,360 --> 00:14:51,860
any questions so far

00:14:52,639 --> 00:14:59,430
crystal clear so let's jump into the

00:14:55,980 --> 00:15:03,000
firmware TPM so my definition here is

00:14:59,430 --> 00:15:04,769
that a firm OTP I'm if this when you

00:15:03,000 --> 00:15:08,610
have something running in a secure

00:15:04,769 --> 00:15:10,350
environment that acts like a TPM it

00:15:08,610 --> 00:15:13,290
should work with the existing tools like

00:15:10,350 --> 00:15:14,399
the TCG stack from user space point of

00:15:13,290 --> 00:15:17,160
view you shouldn't really see any

00:15:14,399 --> 00:15:22,350
difference and the Chilean general be as

00:15:17,160 --> 00:15:26,189
compatible as possible so Microsoft have

00:15:22,350 --> 00:15:31,829
done from a TPM implementation it's

00:15:26,189 --> 00:15:35,550
based on 2.0 TCG specification the

00:15:31,829 --> 00:15:37,589
specification is written today as is

00:15:35,550 --> 00:15:39,990
both text and you also have source code

00:15:37,589 --> 00:15:43,589
so you can actually compile it if you

00:15:39,990 --> 00:15:45,089
just copy/paste enough with stuff but

00:15:43,589 --> 00:15:48,179
the good thing is that this is some

00:15:45,089 --> 00:15:50,220
github and everything so for me it was

00:15:48,179 --> 00:15:52,529
pretty easy I mean you can basically ask

00:15:50,220 --> 00:15:53,339
you to Microsoft page and follow the

00:15:52,529 --> 00:15:56,399
instruction and

00:15:53,339 --> 00:16:00,269
it will compile this for you the thing

00:15:56,399 --> 00:16:04,350
is that they've done this for both Intel

00:16:00,269 --> 00:16:06,329
and arm so you have a little bit of mix

00:16:04,350 --> 00:16:09,509
with files and so on and I have some

00:16:06,329 --> 00:16:17,399
issues since they have copied files but

00:16:09,509 --> 00:16:19,079
yeah I figure that out so the funny

00:16:17,399 --> 00:16:21,540
thing here we were the good thing here

00:16:19,079 --> 00:16:23,490
is that according to Microsoft they're

00:16:21,540 --> 00:16:29,399
actually shipping this in lots of

00:16:23,490 --> 00:16:31,470
devices today and there was a talk at

00:16:29,399 --> 00:16:34,559
usenix a couple of years ago who goes a

00:16:31,470 --> 00:16:37,529
little bit more into the details but in

00:16:34,559 --> 00:16:40,259
general it's a implementation supporting

00:16:37,529 --> 00:16:48,809
x86 supporting arm and forearm they used

00:16:40,259 --> 00:16:50,639
opti and last week first day evening

00:16:48,809 --> 00:16:55,499
something I managed to get a working set

00:16:50,639 --> 00:16:58,110
up I've done things a little bit

00:16:55,499 --> 00:16:59,519
different compared to the Microsoft

00:16:58,110 --> 00:17:01,470
instructions they don't really tell how

00:16:59,519 --> 00:17:05,610
to deploy things and so on and since I'm

00:17:01,470 --> 00:17:07,380
used working with or opti full developer

00:17:05,610 --> 00:17:12,329
setups I wanted to do it more or less

00:17:07,380 --> 00:17:14,309
the same so people who are who are aware

00:17:12,329 --> 00:17:16,289
of how we are using our developers setup

00:17:14,309 --> 00:17:19,890
will feel that this is pretty easy so

00:17:16,289 --> 00:17:23,789
you basically set up the prerequisites

00:17:19,890 --> 00:17:24,209
that we have you repo clone tree and so

00:17:23,789 --> 00:17:26,250
on

00:17:24,209 --> 00:17:28,830
get the tool chains and build everything

00:17:26,250 --> 00:17:31,159
and when you have that and we boot up

00:17:28,830 --> 00:17:34,289
qmu you get two consoles and in the

00:17:31,159 --> 00:17:37,830
console acting as normal world Linux you

00:17:34,289 --> 00:17:39,360
can run these commands now it's you have

00:17:37,830 --> 00:17:42,990
the instructions there if you want to

00:17:39,360 --> 00:17:45,960
try it out I haven't had time to really

00:17:42,990 --> 00:17:48,059
dig into the details I mean to see where

00:17:45,960 --> 00:17:50,549
the bottlenecks are and what's actually

00:17:48,059 --> 00:17:52,950
going on under hood and so on but it

00:17:50,549 --> 00:17:54,240
seems to work it's a little bit slow in

00:17:52,950 --> 00:17:58,500
some cases I've noticed when you're

00:17:54,240 --> 00:18:01,980
loading the driver and so on and one

00:17:58,500 --> 00:18:05,460
thing that they are using is wolf SSL

00:18:01,980 --> 00:18:06,150
here and that's a gplv2

00:18:05,460 --> 00:18:08,600
crypt

00:18:06,150 --> 00:18:10,710
library so if we would like to use its

00:18:08,600 --> 00:18:12,690
officially in octave for example we

00:18:10,710 --> 00:18:20,130
would need to replace that with

00:18:12,690 --> 00:18:23,640
something else so when I looked into

00:18:20,130 --> 00:18:27,120
this I stumbled upon a couple of

00:18:23,640 --> 00:18:28,740
different things I mean pros and cons so

00:18:27,120 --> 00:18:32,490
when it comes to the Crypt operations

00:18:28,740 --> 00:18:35,540
the TPM it's like the Tuck touch and the

00:18:32,490 --> 00:18:39,930
T it's like the Ferrari in this case so

00:18:35,540 --> 00:18:41,370
it's it's slow so I think that's one of

00:18:39,930 --> 00:18:45,420
the good things will run eating the T

00:18:41,370 --> 00:18:47,070
for example if you do or C or s a key

00:18:45,420 --> 00:18:51,120
generation verification on something

00:18:47,070 --> 00:18:53,400
it's pretty fast so in general a TPM is

00:18:51,120 --> 00:18:56,420
slow so that's one thing that should be

00:18:53,400 --> 00:19:01,970
considered but then we also have like

00:18:56,420 --> 00:19:06,450
orange A's TPM uses an internal trng

00:19:01,970 --> 00:19:09,660
which I was a bit surprised apparently

00:19:06,450 --> 00:19:11,220
there is no real Phipps requirement or

00:19:09,660 --> 00:19:13,800
something on it on the trng

00:19:11,220 --> 00:19:18,600
TPM it's a little bit up to the TPM in

00:19:13,800 --> 00:19:21,630
order to come up with a good TRND in a

00:19:18,600 --> 00:19:23,400
tea we can use that also but I mean we

00:19:21,630 --> 00:19:25,260
in our implementations today we're

00:19:23,400 --> 00:19:29,010
basically using software implementations

00:19:25,260 --> 00:19:34,380
but the one who deploy a tea environment

00:19:29,010 --> 00:19:38,640
they should have a trng then we have the

00:19:34,380 --> 00:19:42,240
storage as I said the TPM has I think

00:19:38,640 --> 00:19:46,530
it's like 64 128 K or something that you

00:19:42,240 --> 00:19:49,860
can use for storage it's a bit limited

00:19:46,530 --> 00:19:51,660
compare that to tea where we can we have

00:19:49,860 --> 00:19:55,100
a couple of different alternatives we

00:19:51,660 --> 00:19:58,890
can use regular flash or PMB and so on

00:19:55,100 --> 00:20:02,070
but you also have to pay attention here

00:19:58,890 --> 00:20:04,650
about security for example I mean you

00:20:02,070 --> 00:20:06,300
can't really argue saying that storing

00:20:04,650 --> 00:20:08,880
something in a regular flash is secured

00:20:06,300 --> 00:20:12,900
as storing it directly in the TPM itself

00:20:08,880 --> 00:20:17,370
I mean anyone can be sold on the flash

00:20:12,900 --> 00:20:21,029
or corrupt it or whatever so that's

00:20:17,370 --> 00:20:22,770
something you also need to consider

00:20:21,029 --> 00:20:24,840
secur clock is another thing

00:20:22,770 --> 00:20:29,789
I mean TPM has their own internal

00:20:24,840 --> 00:20:33,470
counters in T we have different ways we

00:20:29,789 --> 00:20:36,360
can use I mean we can use the clock from

00:20:33,470 --> 00:20:38,279
non-secure side but for secure

00:20:36,360 --> 00:20:44,669
operations you should use the secure

00:20:38,279 --> 00:20:47,909
clock is that when it comes to the seeds

00:20:44,669 --> 00:20:49,679
yeah ss I don't think I said that but

00:20:47,909 --> 00:20:53,549
the disease when you generate the seeds

00:20:49,679 --> 00:20:55,559
initially they will be they will never

00:20:53,549 --> 00:20:57,990
leave the TPM you can't get them out of

00:20:55,559 --> 00:21:02,220
the TPM so they're only used as I said

00:20:57,990 --> 00:21:04,230
for the key generation and so on if

00:21:02,220 --> 00:21:06,539
you're going to use seeds in a trust

00:21:04,230 --> 00:21:08,010
execution environment well there are a

00:21:06,539 --> 00:21:11,549
couple of different ways you can do it

00:21:08,010 --> 00:21:13,770
if you lose if you read and listen to

00:21:11,549 --> 00:21:17,429
this you sneak stock from Microsoft they

00:21:13,770 --> 00:21:19,770
use the fuses but there are some

00:21:17,429 --> 00:21:21,929
challenges also if the seed for some

00:21:19,770 --> 00:21:25,710
reason she leaked out well then you're

00:21:21,929 --> 00:21:29,190
basically done you can change it it's

00:21:25,710 --> 00:21:31,980
burnt fuses flash you can't use it as I

00:21:29,190 --> 00:21:33,659
said I mean you can store something that

00:21:31,980 --> 00:21:37,529
should you shouldn't be able to tamper

00:21:33,659 --> 00:21:41,010
with it or PMB might be something that

00:21:37,529 --> 00:21:42,539
you could use but it depends on yeah now

00:21:41,010 --> 00:21:44,100
we're getting a little bit into

00:21:42,539 --> 00:21:46,620
implementation details I mean we can

00:21:44,100 --> 00:21:48,149
today we can use rpm be from you boots

00:21:46,620 --> 00:21:49,529
and we can of course use it when the

00:21:48,149 --> 00:21:53,580
system is fully up and running but

00:21:49,529 --> 00:21:55,080
before that it's a little bit tricky and

00:21:53,580 --> 00:21:57,600
the final thing I was thinking about

00:21:55,080 --> 00:21:59,669
what side channel attacks I mean I I

00:21:57,600 --> 00:22:02,220
suppose that the TPMS are quite well

00:21:59,669 --> 00:22:05,580
tested I mean they probably have this as

00:22:02,220 --> 00:22:07,710
different laboratories and they have

00:22:05,580 --> 00:22:09,899
been trying it out and so on and with a

00:22:07,710 --> 00:22:13,289
team plummeting we have the full arm

00:22:09,899 --> 00:22:15,149
system we've well who knows where you

00:22:13,289 --> 00:22:17,100
can attack I mean there's all sorts of

00:22:15,149 --> 00:22:19,340
ways there you can do side channel

00:22:17,100 --> 00:22:19,340
attacks

00:22:21,730 --> 00:22:27,980
so my takeaway here is that I mean you

00:22:26,360 --> 00:22:30,440
you can you can get the same kind of

00:22:27,980 --> 00:22:33,710
behavior when it comes to features as a

00:22:30,440 --> 00:22:35,450
regular TPM as a user in userspace doing

00:22:33,710 --> 00:22:37,070
the commands you will get the same kind

00:22:35,450 --> 00:22:39,250
of replies as you would get from a real

00:22:37,070 --> 00:22:42,500
TPM so that's a good thing

00:22:39,250 --> 00:22:45,049
security there are differences and I

00:22:42,500 --> 00:22:47,600
think it's important to to let people

00:22:45,049 --> 00:22:51,590
who want to use furmity VM to know about

00:22:47,600 --> 00:22:53,179
the trade-offs because it could be that

00:22:51,590 --> 00:22:56,809
there are use cases where this is

00:22:53,179 --> 00:22:58,490
actually not secure enough and as I said

00:22:56,809 --> 00:23:01,820
performance wise there is also

00:22:58,490 --> 00:23:05,240
difference I'm not sure if it's that's

00:23:01,820 --> 00:23:08,270
super important I mean it's it's I don't

00:23:05,240 --> 00:23:09,860
think that you use a TPM very frequently

00:23:08,270 --> 00:23:18,590
usually but there could be use cases

00:23:09,860 --> 00:23:23,299
where it's important so that's the firm

00:23:18,590 --> 00:23:25,630
OTP impart any questions I'll give you a

00:23:23,299 --> 00:23:25,630
second

00:23:28,070 --> 00:23:33,559
I guess you say it about like what's

00:23:29,989 --> 00:23:45,470
motivating the interest in PM's from

00:23:33,559 --> 00:23:53,989
like whatever yeah what was motivating

00:23:45,470 --> 00:23:56,539
the interest right Amelia some part of

00:23:53,989 --> 00:23:59,149
leads its Linares at the fog networking

00:23:56,539 --> 00:24:02,210
department so we we do have an interest

00:23:59,149 --> 00:24:04,700
on securing hardware devices from

00:24:02,210 --> 00:24:06,619
physical attacks so for example the

00:24:04,700 --> 00:24:08,269
remote boot at the station that the I

00:24:06,619 --> 00:24:10,759
keep mentioned this is really important

00:24:08,269 --> 00:24:12,499
to make sure that the the remote device

00:24:10,759 --> 00:24:14,599
that you don't have access to hasn't

00:24:12,499 --> 00:24:16,429
been tampered with one of those use

00:24:14,599 --> 00:24:19,970
cases is this the second use case is

00:24:16,429 --> 00:24:23,149
that we can use the TPM for anti rod bug

00:24:19,970 --> 00:24:24,619
protection and since we're trying to do

00:24:23,149 --> 00:24:28,159
a reference platform to figure out that

00:24:24,619 --> 00:24:30,739
to have a huge case that this is doable

00:24:28,159 --> 00:24:32,690
having a software TPM is really easy for

00:24:30,739 --> 00:24:34,879
us so we can use the software TPM as

00:24:32,690 --> 00:24:37,099
part of the reference platform we can

00:24:34,879 --> 00:24:38,629
show that this is doable we can pack it

00:24:37,099 --> 00:24:41,269
as a distribution and if the distribute

00:24:38,629 --> 00:24:42,679
the hardware has a hardware TPM you may

00:24:41,269 --> 00:24:48,349
as well use that because it's probably

00:24:42,679 --> 00:24:52,210
going to be more secure yes we're kind

00:24:48,349 --> 00:24:52,210
of touching this already why we want to

00:24:55,899 --> 00:25:06,919
someone trying to roll back the firmware

00:24:58,220 --> 00:25:08,269
of the device might not work they're all

00:25:06,919 --> 00:25:10,399
about to happen because it's your first

00:25:08,269 --> 00:25:12,109
if your device the second use case is

00:25:10,399 --> 00:25:15,109
that you might have a device that you've

00:25:12,109 --> 00:25:18,249
actually found a software bug that

00:25:15,109 --> 00:25:18,249
causes a remote

00:25:18,880 --> 00:25:22,930
allows remote attack attacks or anything

00:25:21,220 --> 00:25:24,490
like that so you want to prevent the

00:25:22,930 --> 00:25:33,460
users from actually being able to

00:25:24,490 --> 00:25:37,660
downgrade to a vulnerable version so

00:25:33,460 --> 00:25:39,100
yeah so I I don't know I mean I'm happy

00:25:37,660 --> 00:25:41,920
to hear what you are saying here I mean

00:25:39,100 --> 00:25:43,180
I've just after chatting to people and

00:25:41,920 --> 00:25:44,410
looking into things I've listed some

00:25:43,180 --> 00:25:46,450
things here I mean I guess some people

00:25:44,410 --> 00:25:49,330
are interested in saving I mean they

00:25:46,450 --> 00:25:52,480
don't want to put a TPM on the device to

00:25:49,330 --> 00:25:53,860
save I think it's a dollar per TPM or

00:25:52,480 --> 00:25:56,350
something

00:25:53,860 --> 00:25:58,690
you also have I mean PCB era could be

00:25:56,350 --> 00:26:00,610
quite valuable also in some cases so you

00:25:58,690 --> 00:26:12,880
could just save a few millimeters I

00:26:00,610 --> 00:26:14,890
guess and I could also think about I

00:26:12,880 --> 00:26:17,890
mean we're using existing a price if you

00:26:14,890 --> 00:26:20,110
have had a device who used TPM and then

00:26:17,890 --> 00:26:21,280
you've changed the design or Hardware in

00:26:20,110 --> 00:26:23,200
some way and you don't have it anymore

00:26:21,280 --> 00:26:24,490
but you still want to use the same kind

00:26:23,200 --> 00:26:26,050
of user space stack that you've been

00:26:24,490 --> 00:26:26,710
using that I guess that's one of the use

00:26:26,050 --> 00:26:29,980
cases also

00:26:26,710 --> 00:26:32,650
and typically mobile devices they

00:26:29,980 --> 00:26:34,240
usually don't have any TPM so in case

00:26:32,650 --> 00:26:38,590
someone wants to do something like this

00:26:34,240 --> 00:26:43,060
well then this might be something but I

00:26:38,590 --> 00:26:44,620
also want to emphasize that I don't

00:26:43,060 --> 00:26:47,380
think people binary should just look at

00:26:44,620 --> 00:26:49,270
this I know we need to use a TPM to be

00:26:47,380 --> 00:26:51,400
able to do remote authorization you

00:26:49,270 --> 00:26:53,620
could as well do the same things in just

00:26:51,400 --> 00:26:56,530
using T interfaces and even like I

00:26:53,620 --> 00:27:01,120
mentioned he wrote ERP they have touched

00:26:56,530 --> 00:27:02,830
remote attestation also so I I mean I

00:27:01,120 --> 00:27:05,140
really would like to see that there is a

00:27:02,830 --> 00:27:07,570
good solid use case where you actually

00:27:05,140 --> 00:27:10,480
need is otherwise you can probably strip

00:27:07,570 --> 00:27:12,220
away quite a bit of code the t's tss

00:27:10,480 --> 00:27:15,550
stack and so on and just use the T

00:27:12,220 --> 00:27:17,970
itself I don't know what you're saying

00:27:15,550 --> 00:27:17,970
about it

00:27:21,340 --> 00:27:28,910
is the F ppm implemented as a trusted

00:27:24,710 --> 00:27:30,620
application in opti or yes yes so the F

00:27:28,910 --> 00:27:32,930
TPM implementation from Microsoft that

00:27:30,620 --> 00:27:34,970
they have it's a normal trust

00:27:32,930 --> 00:27:42,280
application as we are usually running in

00:27:34,970 --> 00:27:45,110
the opti so if you want to get the pcr

00:27:42,280 --> 00:27:55,640
values of boot loader stages which are

00:27:45,110 --> 00:27:57,890
running prior to opti that's one of the

00:27:55,640 --> 00:27:59,840
challenges that we have of course I mean

00:27:57,890 --> 00:28:02,150
what we're trying to do here now is

00:27:59,840 --> 00:28:04,610
something Ronnie and Beall free to opt e

00:28:02,150 --> 00:28:07,910
in this case so like you said what

00:28:04,610 --> 00:28:10,520
should we do before that should we kind

00:28:07,910 --> 00:28:12,800
of cache the PCR values in some way or

00:28:10,520 --> 00:28:15,080
that's an unsolved problem I mean we

00:28:12,800 --> 00:28:19,970
need to figure out that you want to do

00:28:15,080 --> 00:28:25,670
it I mean after that I guess it's easier

00:28:19,970 --> 00:28:27,410
but still there needs to be some kind of

00:28:25,670 --> 00:28:30,710
interfaces implemented here to be able

00:28:27,410 --> 00:28:34,460
to support it from different places in

00:28:30,710 --> 00:28:36,890
forever and so on having that said I

00:28:34,460 --> 00:28:39,170
mean even if you would have a well if

00:28:36,890 --> 00:28:40,730
you would have a real TPM it's there but

00:28:39,170 --> 00:28:42,260
you would still need to implement it are

00:28:40,730 --> 00:28:44,210
we we don't have anything in trusted

00:28:42,260 --> 00:28:52,610
firmware today for example that supports

00:28:44,210 --> 00:28:55,550
this one other comment on the use cases

00:28:52,610 --> 00:28:58,060
I guess one other similar scenario is

00:28:55,550 --> 00:29:00,830
there's virtual teams like if you have a

00:28:58,060 --> 00:29:02,990
system with virtual machines and the

00:29:00,830 --> 00:29:05,030
virtual machines are running TSS stack

00:29:02,990 --> 00:29:08,120
and need a virtual TPM and the way I

00:29:05,030 --> 00:29:10,880
guess the way you can do it like say

00:29:08,120 --> 00:29:13,040
with KVM is there's a user space process

00:29:10,880 --> 00:29:16,070
that can have the TPM functionality in

00:29:13,040 --> 00:29:18,110
it there's a project called SWT p.m. but

00:29:16,070 --> 00:29:19,370
one more secure way of doing it I mean

00:29:18,110 --> 00:29:21,800
that's just running in user space you

00:29:19,370 --> 00:29:23,180
could have a user space FTP m and you

00:29:21,800 --> 00:29:25,960
could also run this in trust zone so

00:29:23,180 --> 00:29:28,190
another case for running a TPM and a te

00:29:25,960 --> 00:29:30,130
would be instead of and that wouldn't be

00:29:28,190 --> 00:29:32,550
the system TPM but it would be you know

00:29:30,130 --> 00:29:35,130
supporting a virtual machine

00:29:32,550 --> 00:29:37,620
needs that you know talk to one yeah

00:29:35,130 --> 00:29:39,240
yeah you're right I mean that's if

00:29:37,620 --> 00:29:40,560
people have seen about this VT p.m.

00:29:39,240 --> 00:29:42,470
implementation that's basic what you're

00:29:40,560 --> 00:29:45,480
saying is you art I mean they have

00:29:42,470 --> 00:29:47,190
different virtual machines one of them

00:29:45,480 --> 00:29:49,350
is acting like a Dom's here and you can

00:29:47,190 --> 00:29:51,060
say who is kind of the one who owns the

00:29:49,350 --> 00:29:53,370
device itself in the other virtual

00:29:51,060 --> 00:29:56,430
machines communicate with this first

00:29:53,370 --> 00:30:04,910
virtual machine so and that's of course

00:29:56,430 --> 00:30:09,120
one thing you can do also oh I I hope

00:30:04,910 --> 00:30:13,320
you said there's a lot on speak in for

00:30:09,120 --> 00:30:15,930
TE of course but Allah I didn't see the

00:30:13,320 --> 00:30:19,680
spec for the TPM for my questions is

00:30:15,930 --> 00:30:22,950
that sometimes I don't know what which

00:30:19,680 --> 00:30:27,650
use case should located in the T what

00:30:22,950 --> 00:30:27,650
TPM do you have some guides for that

00:30:31,460 --> 00:30:40,710
concerned thinking about our to design

00:30:35,250 --> 00:30:42,900
the TPM part I have this problem yeah I

00:30:40,710 --> 00:30:44,370
mean if you just have a look at these

00:30:42,900 --> 00:30:48,000
huge cases here I mean measured boot

00:30:44,370 --> 00:30:49,230
that's typically a TPM thing but I would

00:30:48,000 --> 00:30:50,880
say that there's nothing preventing you

00:30:49,230 --> 00:30:52,710
from doing the same unity I mean it's

00:30:50,880 --> 00:30:56,010
just storing a hash and update it and so

00:30:52,710 --> 00:30:57,570
on and that's not a big deal as such key

00:30:56,010 --> 00:30:59,430
generation keystore seen at your

00:30:57,570 --> 00:31:01,350
generation that's normal crypto stuff

00:30:59,430 --> 00:31:06,870
you do in any solution it's not only a

00:31:01,350 --> 00:31:08,490
TPM so HSM whatever same we promote at

00:31:06,870 --> 00:31:12,030
station I mean if you have measured boot

00:31:08,490 --> 00:31:17,240
and you can remove that station also so

00:31:12,030 --> 00:31:19,380
I actually think that everything here is

00:31:17,240 --> 00:31:22,350
something that you should just as well

00:31:19,380 --> 00:31:26,220
be able to do in a trust execution

00:31:22,350 --> 00:31:28,430
environment directly we are thinking

00:31:26,220 --> 00:31:32,400
buttons that let the last one that ties

00:31:28,430 --> 00:31:35,130
identification device yeah but that's

00:31:32,400 --> 00:31:38,190
based on the I mean basically on the

00:31:35,130 --> 00:31:40,260
seed that you're using yes so on that is

00:31:38,190 --> 00:31:42,330
knows you can use that as an identifier

00:31:40,260 --> 00:31:44,560
for that device yes

00:31:42,330 --> 00:31:50,950
yeah that's critical yeah

00:31:44,560 --> 00:31:54,510
anarchist mmm you have incision you just

00:31:50,950 --> 00:31:59,260
talked about the formula I was TPM right

00:31:54,510 --> 00:32:04,710
I just wanna lean that if we if you we

00:31:59,260 --> 00:32:08,550
have isolated hardware our processor to

00:32:04,710 --> 00:32:12,580
unfold for the TPM your formula is a

00:32:08,550 --> 00:32:15,480
this is compared folder or I want to

00:32:12,580 --> 00:32:22,420
know if the TPM from your car wrong as

00:32:15,480 --> 00:32:27,310
isolated processor we we are thinking

00:32:22,420 --> 00:32:36,220
about to design as a process or two for

00:32:27,310 --> 00:32:40,420
the TPM so separate yes yeah well I

00:32:36,220 --> 00:32:42,280
think that's you can probably add an

00:32:40,420 --> 00:32:44,020
affirmative am there also it's just a

00:32:42,280 --> 00:32:48,160
figuring out how the communication

00:32:44,020 --> 00:32:50,110
protocol should be I mean it's the same

00:32:48,160 --> 00:32:51,850
now when we're running here unity I mean

00:32:50,110 --> 00:32:53,590
you need to you need to pass the

00:32:51,850 --> 00:32:55,060
information from user space known to

00:32:53,590 --> 00:32:57,480
whatever device you're using in some way

00:32:55,060 --> 00:33:01,150
so in our case it's the normal way with

00:32:57,480 --> 00:33:06,850
SMC's and so on do you have an iteration

00:33:01,150 --> 00:33:10,060
for was delicious solution for the TPM I

00:33:06,850 --> 00:33:15,270
just want to know if you as well as you

00:33:10,060 --> 00:33:19,150
know in the Google 603 they have

00:33:15,270 --> 00:33:23,140
isolated the Titan processor

00:33:19,150 --> 00:33:27,760
you know we Harlan that just for the

00:33:23,140 --> 00:33:30,550
device identification is running in the

00:33:27,760 --> 00:33:35,020
Titan processor so I I don't know if you

00:33:30,550 --> 00:33:40,840
you're from yours just designed about

00:33:35,020 --> 00:33:42,520
Sachi concern reaching yeah it's hard

00:33:40,840 --> 00:33:45,160
for me to say about how that works but I

00:33:42,520 --> 00:33:46,720
mean I think I can't really see why I

00:33:45,160 --> 00:33:48,160
shouldn't be able to use it in another

00:33:46,720 --> 00:33:50,650
device as long as you have a way to

00:33:48,160 --> 00:33:52,870
communicate with the device you have to

00:33:50,650 --> 00:33:54,610
sterilize the the commands coming from

00:33:52,870 --> 00:33:55,990
user space in some way and then you need

00:33:54,610 --> 00:33:59,080
to parse it on the other end

00:33:55,990 --> 00:34:01,350
so how you do that well I guess that's

00:33:59,080 --> 00:34:01,350
doable

00:34:06,210 --> 00:34:14,550
Femi lesson 32 as a processor and there

00:34:12,599 --> 00:34:16,919
with some examples and you can connect

00:34:14,550 --> 00:34:19,310
over SBIR Oscars and it's the same

00:34:16,919 --> 00:34:19,310
project

00:34:33,630 --> 00:34:40,760
I didn't see your slide in a website

00:34:37,850 --> 00:34:44,660
where you where you put the upload the

00:34:40,760 --> 00:34:49,230
PPT to the website or learn in our own

00:34:44,660 --> 00:34:51,510
okay this one all the slides yeah yeah

00:34:49,230 --> 00:34:53,750
yeah you will be able to connect totally

00:34:51,510 --> 00:34:55,560
in order to work and then the links I

00:34:53,750 --> 00:35:07,170
think they should already be there

00:34:55,560 --> 00:35:09,060
actually so we've already touched this I

00:35:07,170 --> 00:35:10,620
mean we know that the ledge team they're

00:35:09,060 --> 00:35:14,430
interested in this I'm not sure about

00:35:10,620 --> 00:35:17,880
our people here I mean I'm not looking

00:35:14,430 --> 00:35:19,890
for a company name I'm I mean of course

00:35:17,880 --> 00:35:21,780
that's also welcome but I mean if you

00:35:19,890 --> 00:35:24,960
know about use cases where this could be

00:35:21,780 --> 00:35:27,150
useful or there are six that's have a

00:35:24,960 --> 00:35:28,500
need for something like this then I

00:35:27,150 --> 00:35:30,780
would be interested in knowing about it

00:35:28,500 --> 00:35:34,110
because we we are at the verge right now

00:35:30,780 --> 00:35:35,430
where we are going to basically need to

00:35:34,110 --> 00:35:40,590
make a decision whether we should do

00:35:35,430 --> 00:35:44,600
this now later or just drop it so that's

00:35:40,590 --> 00:35:44,600
why I'm looking for feedback in general

00:35:48,210 --> 00:35:57,190
yeah yeah I know you are definitely

00:35:51,430 --> 00:36:00,810
person so on yeah and I know some more

00:35:57,190 --> 00:36:00,810
who are probably interested in this

00:36:06,829 --> 00:36:11,229
we're talking projects

00:36:19,020 --> 00:36:27,270
yeah so I mean if we find out all the

00:36:25,500 --> 00:36:30,350
use cases so on the next step I would

00:36:27,270 --> 00:36:32,910
say it's actually go into the different

00:36:30,350 --> 00:36:34,590
components that are where we want to use

00:36:32,910 --> 00:36:36,570
this light eventually trust the firmware

00:36:34,590 --> 00:36:38,580
and figure out how to deal with things

00:36:36,570 --> 00:36:41,430
that's like we said before the t's

00:36:38,580 --> 00:36:44,510
loaded and so on there could be other

00:36:41,430 --> 00:36:49,440
components also I mean you'd be Fi and

00:36:44,510 --> 00:36:52,260
other things that were using and I also

00:36:49,440 --> 00:36:55,740
think that even though Microsoft say

00:36:52,260 --> 00:36:58,230
they're using this I think at least we

00:36:55,740 --> 00:37:00,990
would need to look into it how to

00:36:58,230 --> 00:37:03,600
optimize it for our setup so to say and

00:37:00,990 --> 00:37:05,490
as I said replace Wolf's SSL and a few

00:37:03,600 --> 00:37:08,010
hour of phase and I also think like the

00:37:05,490 --> 00:37:10,140
kernel driver that I tried that probably

00:37:08,010 --> 00:37:13,380
need to be reworked a little bit also I

00:37:10,140 --> 00:37:21,710
I had some issues when I was trying to

00:37:13,380 --> 00:37:21,710
use it the first time yeah

00:37:28,839 --> 00:37:37,180
in the I don't which slide that you said

00:37:32,049 --> 00:37:43,980
the the TPM only include the sri sri sri

00:37:37,180 --> 00:37:48,609
situation was three cases today

00:37:43,980 --> 00:37:51,760
wait why do you what do you design more

00:37:48,609 --> 00:38:02,619
than three the case is so strong

00:37:51,760 --> 00:38:09,369
what okay so you mean here no situation

00:38:02,619 --> 00:38:18,730
that means something like that versus

00:38:09,369 --> 00:38:21,730
managers that's a limitation of the TPM

00:38:18,730 --> 00:38:23,470
itself i mean it's just a limitation of

00:38:21,730 --> 00:38:35,769
the hardware it's a limitation real

00:38:23,470 --> 00:38:37,960
physical i I want know if it is it is

00:38:35,769 --> 00:38:40,809
for the security of the TPM in my

00:38:37,960 --> 00:38:43,509
consideration if there's a lot how you

00:38:40,809 --> 00:38:48,309
specify a lot how since put in the TPM

00:38:43,509 --> 00:38:51,400
maybe the TPM contains too many too many

00:38:48,309 --> 00:38:54,609
sense I don't know if you maybe it's

00:38:51,400 --> 00:39:00,849
more it's easy to to attack it's not

00:38:54,609 --> 00:39:03,880
security yeah I mean I would say that

00:39:00,849 --> 00:39:06,099
TPM suffer from the same things that TMR

00:39:03,880 --> 00:39:08,460
suffer from that issue did you're doing

00:39:06,099 --> 00:39:13,900
secure operation from a non secure

00:39:08,460 --> 00:39:15,819
location so I mean one thing is of

00:39:13,900 --> 00:39:18,789
course as usual a denial of service

00:39:15,819 --> 00:39:21,039
that's something that there's no real

00:39:18,789 --> 00:39:23,289
good solution for that and you also need

00:39:21,039 --> 00:39:26,190
to ensure that the information that

00:39:23,289 --> 00:39:29,680
you're sending to the TPM and get back

00:39:26,190 --> 00:39:31,210
you need to have ways to trust that even

00:39:29,680 --> 00:39:34,019
though you're running in an untrusted

00:39:31,210 --> 00:39:34,019
environments

00:39:37,400 --> 00:39:46,240
just wanted to clarify in the GPM in the

00:39:42,710 --> 00:39:48,890
Microsoft firmware TPM a solution

00:39:46,240 --> 00:39:51,020
regarding the Linux kernel which part

00:39:48,890 --> 00:39:52,490
have been up streamed and which are

00:39:51,020 --> 00:39:55,010
still private

00:39:52,490 --> 00:40:01,520
there is nothing upstream it's an out of

00:39:55,010 --> 00:40:05,960
tree driver you still it still relies on

00:40:01,520 --> 00:40:08,150
the TPM drivers there are tipping

00:40:05,960 --> 00:40:10,070
drivers in the Linux you know true true

00:40:08,150 --> 00:40:13,030
but I mean it's it's using the TPM

00:40:10,070 --> 00:40:16,070
drivers also but that's more or less the

00:40:13,030 --> 00:40:19,190
bookkeeping for the TPM device itself in

00:40:16,070 --> 00:40:24,410
the kernel the the kernel driver itself

00:40:19,190 --> 00:40:27,470
as today the FTP M is not that big it's

00:40:24,410 --> 00:40:30,050
basically just leveraging opti in this

00:40:27,470 --> 00:40:32,810
case the internal API open a session and

00:40:30,050 --> 00:40:35,650
under the invoking of commands okay so

00:40:32,810 --> 00:40:38,180
if it's quite small it should be easily

00:40:35,650 --> 00:40:41,930
reviewable yeah yeah definitely

00:40:38,180 --> 00:40:45,500
definitely I think it's 400 lines maybe

00:40:41,930 --> 00:40:47,450
500 or something so we had to be

00:40:45,500 --> 00:40:50,600
upstream maybe the bigger part would be

00:40:47,450 --> 00:40:53,330
the trusted application yeah the TA is

00:40:50,600 --> 00:40:58,160
quite big I mean as you can imagine the

00:40:53,330 --> 00:41:00,440
the TI itself is built from the TCG

00:40:58,160 --> 00:41:03,580
reference implementation so all the

00:41:00,440 --> 00:41:07,040
source code see it's the entire TPM so

00:41:03,580 --> 00:41:09,860
did today is also as I said includes

00:41:07,040 --> 00:41:12,790
wolf SSL so in it's a human ta we were

00:41:09,860 --> 00:41:12,790
talking about in this case

00:41:16,060 --> 00:41:22,900
and what's been done I mean as I said

00:41:20,320 --> 00:41:26,680
the the implementation runs both on x86

00:41:22,900 --> 00:41:29,400
and on arm so the differences are in the

00:41:26,680 --> 00:41:32,800
communication path and how actually

00:41:29,400 --> 00:41:34,810
receive the commands on secure side so

00:41:32,800 --> 00:41:36,850
in our case we've opti we have the

00:41:34,810 --> 00:41:38,650
global platform way of doing things we

00:41:36,850 --> 00:41:40,690
know with the open session and remote

00:41:38,650 --> 00:41:45,730
commands and so on so they basically

00:41:40,690 --> 00:41:48,580
serialize the TPM packet if I can say so

00:41:45,730 --> 00:41:52,060
these services are on the secure side

00:41:48,580 --> 00:41:56,410
when we receive it and then call the TSS

00:41:52,060 --> 00:41:59,950
reference implementation so the port's

00:41:56,410 --> 00:42:02,920
that is kind of touching arm isn't that

00:41:59,950 --> 00:42:05,380
big eater on secure side but the whole

00:42:02,920 --> 00:42:08,440
implementation is quite big but the

00:42:05,380 --> 00:42:11,980
changes you will see is like when you

00:42:08,440 --> 00:42:15,940
need to use the env index in the TPM you

00:42:11,980 --> 00:42:18,010
you basically use secure storage in T so

00:42:15,940 --> 00:42:21,880
that's where you can see some changes in

00:42:18,010 --> 00:42:32,440
files in the TCG specification or the

00:42:21,880 --> 00:42:36,130
implementation I'll say do you know if

00:42:32,440 --> 00:42:39,430
Microsoft has any interest in supporting

00:42:36,130 --> 00:42:42,340
and/or getting their stuff into up T in

00:42:39,430 --> 00:42:44,380
any way I don't know I mean I plan to

00:42:42,340 --> 00:42:45,940
reach out to the people I mean if we

00:42:44,380 --> 00:42:49,150
intend to actually work with it

00:42:45,940 --> 00:42:51,250
I go to ask them and I say that we plan

00:42:49,150 --> 00:42:52,960
to do something here we plan to upstream

00:42:51,250 --> 00:42:55,240
a driver do you want to be the one who

00:42:52,960 --> 00:42:58,180
is driving that or should we do it and

00:42:55,240 --> 00:43:00,610
so on but in general it seems like they

00:42:58,180 --> 00:43:02,860
have been I mean we have seen on github

00:43:00,610 --> 00:43:09,780
on opti they have been quite active for

00:43:02,860 --> 00:43:09,780
microsoft's so the linux guys

00:43:11,290 --> 00:43:18,340
I'm quick question is the three by arthi

00:43:14,980 --> 00:43:21,220
three client or what do we want to call

00:43:18,340 --> 00:43:23,620
it limitation is that a typically a

00:43:21,220 --> 00:43:25,720
bottleneck I mean does that presumably

00:43:23,620 --> 00:43:28,090
if you try to go over three you end up

00:43:25,720 --> 00:43:30,160
suspending threads and still losing

00:43:28,090 --> 00:43:32,850
slowing things down and also is that a

00:43:30,160 --> 00:43:36,070
reason potentially to go to a firm where

00:43:32,850 --> 00:43:39,850
TPMS instead of a hardware

00:43:36,070 --> 00:43:41,680
implementation to be honest I don't

00:43:39,850 --> 00:43:44,200
really know if that's considered as a

00:43:41,680 --> 00:43:48,280
limitation stearic might have a comment

00:43:44,200 --> 00:43:50,350
he's I guess my understanding is that

00:43:48,280 --> 00:43:52,180
you know they it's a very small number

00:43:50,350 --> 00:43:53,770
because you know through if you're going

00:43:52,180 --> 00:43:55,060
to go bigger than that you have to pick

00:43:53,770 --> 00:43:56,860
some threshold you can't have an

00:43:55,060 --> 00:43:59,350
infinite number of keys and so on in the

00:43:56,860 --> 00:44:02,650
TPM so they what they decided to do was

00:43:59,350 --> 00:44:04,810
have a minute very small storage and all

00:44:02,650 --> 00:44:07,120
the objects are typically just kept

00:44:04,810 --> 00:44:09,580
outside the TPM encrypted as encrypted

00:44:07,120 --> 00:44:12,280
blobs and so when you when I say an

00:44:09,580 --> 00:44:15,820
application wants to use a key step one

00:44:12,280 --> 00:44:17,980
is it loads the key into the TPM does

00:44:15,820 --> 00:44:19,990
its operations unloads the key and so

00:44:17,980 --> 00:44:21,940
there's this kind of action of loading

00:44:19,990 --> 00:44:24,370
the object using the object unloading it

00:44:21,940 --> 00:44:26,050
and then the resource manager if say do

00:44:24,370 --> 00:44:29,260
you have twenty applications at the same

00:44:26,050 --> 00:44:30,820
time doing this it handles the swapping

00:44:29,260 --> 00:44:33,790
in and out for you the applications

00:44:30,820 --> 00:44:35,440
don't care or know that their keys are

00:44:33,790 --> 00:44:36,820
being swapped in and out of the TPM

00:44:35,440 --> 00:44:39,070
behind the scenes by this resource

00:44:36,820 --> 00:44:41,860
manager so it's just kind of a that's

00:44:39,070 --> 00:44:43,680
their paradigm basically as they're you

00:44:41,860 --> 00:44:46,210
know very small number of objects

00:44:43,680 --> 00:44:48,070
resource manager handles swapping kind

00:44:46,210 --> 00:44:54,010
of like almost like virtual memory in a

00:44:48,070 --> 00:44:55,990
sense I don't have any information you

00:44:54,010 --> 00:44:58,170
that actually is a bottleneck it might

00:44:55,990 --> 00:44:58,170
be

00:45:05,670 --> 00:45:10,150
right but that totally depends on the

00:45:08,019 --> 00:45:11,950
use case also I mean if you just do it

00:45:10,150 --> 00:45:15,069
once in a boot or measure boot and sign

00:45:11,950 --> 00:45:19,029
a quotes from time to time well then you

00:45:15,069 --> 00:45:21,880
won't really see anything so I guess

00:45:19,029 --> 00:45:25,170
since hardware TPM is I square see this

00:45:21,880 --> 00:45:25,170
is the list of your bottlenecks

00:45:35,589 --> 00:45:42,130
all right I think actually that was the

00:45:38,829 --> 00:45:44,859
last thing I had but I mean if you are

00:45:42,130 --> 00:45:46,869
interested in this just reach out to me

00:45:44,859 --> 00:45:48,579
I mean we are heavily interested in know

00:45:46,869 --> 00:45:51,130
you who would like to see something like

00:45:48,579 --> 00:45:54,459
this being used in a tea and as I said

00:45:51,130 --> 00:45:57,489
it might be but we eat a drop it or

00:45:54,459 --> 00:46:07,650
actually put this on on our roadmap in

00:45:57,489 --> 00:46:07,650
the future we have four more minutes

00:46:11,589 --> 00:46:20,019
alright see it's like we're done thanks

00:46:15,280 --> 00:46:20,019

YouTube URL: https://www.youtube.com/watch?v=-uR_oUp0wPE


