Title: BKK19-413 - AOSP Device Upstreaming and Development with X15
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Abstract
This session goes thru collaboration between TI, Linaro, Google and open source community in upstreaming and development of AOSP with TI Beagleboard X15 platform .

We cover the various development phases including hardware and software requirements for a platform to be AOSP dev platform and review pros and challenges of X15 . 
Will also review the status of features upstreamed and on going development towards future bootloader , kernel , pastry and associated external opensource projects.
Notes and commentsAOSP Development Boards are intended for both Android userspace and kernel development, as well and upstreaming patches

This proposal goes thru the path of exploring TI X15 as a AOSP reference platform and why the platform stands out from a plethora of available dev boards -- Pre development of baseline thru LCR/LKFT on stable tags -- Review SW/HW requirements and anticipate tactical/strategical challenges -- Submit to AOSP gerrit and address review comments -- Platform/manifest ready ? with expected functionality? -- Ensure no regression thru triage support for expected project duration. -- Future plan/ Have plan for pastry,kernel migrations and collaborate across board on common feature development.

Praneeth Bajjuri / Android Software Developer TI
Automotive Infotainment, System Software, OMAP Platform Android Kernel Maintainer.

Mykhailo Sopiha / Android OS Engineer Texas Instruments
Captions: 
	00:00:06,110 --> 00:00:12,389
okay good morning everyone we have a

00:00:09,059 --> 00:00:15,000
smaller audience but go through details

00:00:12,389 --> 00:00:17,100
basically what we've been doing in a OSP

00:00:15,000 --> 00:00:20,070
up streaming with x-15 as the reference

00:00:17,100 --> 00:00:22,710
platform and what has been the upstream

00:00:20,070 --> 00:00:28,470
progress so far and what is n here in

00:00:22,710 --> 00:00:30,210
the near future work so the session will

00:00:28,470 --> 00:00:32,669
be split into three main parts one is

00:00:30,210 --> 00:00:35,520
the problem statement what we are trying

00:00:32,669 --> 00:00:37,800
to do with respect to internal product

00:00:35,520 --> 00:00:39,900
development and use the community as a

00:00:37,800 --> 00:00:43,080
reference with the reference platform

00:00:39,900 --> 00:00:47,280
and how do we reduce the development

00:00:43,080 --> 00:00:50,940
effort with pastry migrations and test

00:00:47,280 --> 00:00:53,150
cycle and all of those and why basically

00:00:50,940 --> 00:00:55,440
x-15 is a good candidate compared to a

00:00:53,150 --> 00:00:59,760
bunch of reference platforms which are

00:00:55,440 --> 00:01:02,990
already available and the status of a

00:00:59,760 --> 00:01:05,100
OSP reference part from guidelines and

00:01:02,990 --> 00:01:07,500
basically going through the hardware and

00:01:05,100 --> 00:01:10,950
software requirements and reviewing why

00:01:07,500 --> 00:01:15,120
our platform is most most right in the

00:01:10,950 --> 00:01:16,650
ready category and covering through some

00:01:15,120 --> 00:01:19,590
of the key features what are important

00:01:16,650 --> 00:01:21,300
for Android and what is upstream status

00:01:19,590 --> 00:01:29,640
so far and what we'll be working towards

00:01:21,300 --> 00:01:34,050
in the next few months okay basically

00:01:29,640 --> 00:01:36,659
since past many years I mean this is one

00:01:34,050 --> 00:01:40,140
example of TI development but I'm sure

00:01:36,659 --> 00:01:44,159
most of the companies does in the same

00:01:40,140 --> 00:01:47,220
way basically we fork platform manifest

00:01:44,159 --> 00:01:48,330
from Android in a mirror in some

00:01:47,220 --> 00:01:51,510
internal or publicly available

00:01:48,330 --> 00:01:54,799
repository and at bunch of platform

00:01:51,510 --> 00:01:57,030
specific fixes and hals and features

00:01:54,799 --> 00:02:00,690
reviews are done mostly in the internal

00:01:57,030 --> 00:02:03,180
fashion we're like wider audience is not

00:02:00,690 --> 00:02:06,810
available so the quality of the fixes

00:02:03,180 --> 00:02:10,920
and features is not in the highest

00:02:06,810 --> 00:02:12,420
standard possible and the testing with

00:02:10,920 --> 00:02:16,340
limited use cases on the limited

00:02:12,420 --> 00:02:19,160
platforms is what many

00:02:16,340 --> 00:02:22,880
will do and then release SDK based on a

00:02:19,160 --> 00:02:26,920
given ps3 and restart the cycle on NS

00:02:22,880 --> 00:02:32,380
pastry so what's the problem with this

00:02:26,920 --> 00:02:36,610
larger pastry migration cycle I mean I I

00:02:32,380 --> 00:02:40,580
clearly seen people spend many months to

00:02:36,610 --> 00:02:44,989
even sometimes more than six months in

00:02:40,580 --> 00:02:46,310
just doing a pastry migration and large

00:02:44,989 --> 00:02:47,989
effort when we have two new introduced

00:02:46,310 --> 00:02:50,480
new platforms even though they are the

00:02:47,989 --> 00:02:53,150
same platform variant or introduced new

00:02:50,480 --> 00:02:55,280
platforms which are completely new even

00:02:53,150 --> 00:02:57,230
though there is code reuse because the

00:02:55,280 --> 00:03:01,190
code has not been done in a nicely

00:02:57,230 --> 00:03:02,959
weighted fashion for upstreaming there's

00:03:01,190 --> 00:03:05,840
a bunch of free work that has to be done

00:03:02,959 --> 00:03:07,610
on the new platform - and given the

00:03:05,840 --> 00:03:10,310
testing has been fairly limited in a

00:03:07,610 --> 00:03:16,090
more manual way the limit testing is

00:03:10,310 --> 00:03:19,880
very limited and it basically we are

00:03:16,090 --> 00:03:23,329
spending a lot of time in all this work

00:03:19,880 --> 00:03:27,170
which is supposed to be boring so where

00:03:23,329 --> 00:03:29,120
we want to go with example of x-15 is

00:03:27,170 --> 00:03:33,290
one of the reference platform which is

00:03:29,120 --> 00:03:35,510
upstream and then have the platform

00:03:33,290 --> 00:03:37,549
available in such a way that we just

00:03:35,510 --> 00:03:40,070
download the point it of android google

00:03:37,549 --> 00:03:43,670
source platform manifest and build with

00:03:40,070 --> 00:03:47,329
lunch target and the images should go to

00:03:43,670 --> 00:03:48,980
a minimal bootable quality with basic

00:03:47,329 --> 00:03:52,250
Android functionality ready so that we

00:03:48,980 --> 00:03:57,290
can do the full compliance and testing

00:03:52,250 --> 00:04:01,120
and run some benchmarks of Android we

00:03:57,290 --> 00:04:05,840
will still end up forking pastry because

00:04:01,120 --> 00:04:07,940
Android keeps moving on a on master so

00:04:05,840 --> 00:04:10,820
on a given pastry tag if you want to

00:04:07,940 --> 00:04:13,489
validate we might have to back port the

00:04:10,820 --> 00:04:16,370
fixes from master so the forking is

00:04:13,489 --> 00:04:17,780
still needed but given that a primary

00:04:16,370 --> 00:04:20,600
difference platform is mainlined

00:04:17,780 --> 00:04:24,650
the amount of fixes which might be

00:04:20,600 --> 00:04:28,710
carried is done in a weighted way so

00:04:24,650 --> 00:04:34,200
that we also review in the fashion of

00:04:28,710 --> 00:04:38,690
and getting it upstream immediately yeah

00:04:34,200 --> 00:04:41,160
we do have to review patches based on

00:04:38,690 --> 00:04:44,130
the reviews that's happening in garrett

00:04:41,160 --> 00:04:46,640
google source for master and also

00:04:44,130 --> 00:04:49,230
cherry-pick them one I given pastry tag

00:04:46,640 --> 00:04:54,030
more test automation will help in

00:04:49,230 --> 00:04:55,620
increasing the test effort for the X 15

00:04:54,030 --> 00:04:59,820
platform and also scaled to more new

00:04:55,620 --> 00:05:02,160
platforms this model even though we'll

00:04:59,820 --> 00:05:03,900
start on the new pastry tag we can given

00:05:02,160 --> 00:05:06,180
that most of the basic functionalities

00:05:03,900 --> 00:05:10,310
there and the platform's are tested in

00:05:06,180 --> 00:05:14,060
most automated way the the level of

00:05:10,310 --> 00:05:19,350
pastry migration cycle is much reduced

00:05:14,060 --> 00:05:21,600
so why it's 15 there are already like

00:05:19,350 --> 00:05:24,060
many 64-bit platforms already available

00:05:21,600 --> 00:05:28,350
as a dev platform for AOSP

00:05:24,060 --> 00:05:33,000
pixel is one example Dragonball Nexus

00:05:28,350 --> 00:05:35,910
devices and Heike platform it's been

00:05:33,000 --> 00:05:38,760
it's 15 characters to a unique platform

00:05:35,910 --> 00:05:40,710
and basically it's also one widely

00:05:38,760 --> 00:05:42,900
available open platform basically trm

00:05:40,710 --> 00:05:45,030
schematics and documentation is widely

00:05:42,900 --> 00:05:48,720
available and it's well supported by

00:05:45,030 --> 00:05:51,390
community and it is a one of the only on

00:05:48,720 --> 00:05:53,130
32-bit platform which is currently

00:05:51,390 --> 00:05:58,170
actively doing pastry migrations and

00:05:53,130 --> 00:06:00,260
based on LTS cycle and all of the other

00:05:58,170 --> 00:06:04,620
reference platform based on arm 64 are

00:06:00,260 --> 00:06:06,990
based on like mobile defense platform so

00:06:04,620 --> 00:06:08,700
this characters to a unique area where

00:06:06,990 --> 00:06:10,320
embedded automotive and industrial

00:06:08,700 --> 00:06:12,720
segments that's where we've been

00:06:10,320 --> 00:06:16,350
actively using where the requirements

00:06:12,720 --> 00:06:20,880
are little bit different from what

00:06:16,350 --> 00:06:22,830
mobile requirements are so the

00:06:20,880 --> 00:06:24,840
documentation is available publicly and

00:06:22,830 --> 00:06:27,530
we've been actively updating that that's

00:06:24,840 --> 00:06:30,240
a URL there

00:06:27,530 --> 00:06:32,010
so before Google considers some platform

00:06:30,240 --> 00:06:34,020
as a reference platform they do provide

00:06:32,010 --> 00:06:35,360
some guidelines on what the hardware

00:06:34,020 --> 00:06:37,099
requirements are

00:06:35,360 --> 00:06:38,120
and how it should be and also what

00:06:37,099 --> 00:06:41,599
should be the minimum software

00:06:38,120 --> 00:06:43,759
requirements and these are some of the

00:06:41,599 --> 00:06:47,090
summary of key requirements what they

00:06:43,759 --> 00:06:50,240
request it and this is just a good

00:06:47,090 --> 00:06:52,039
example if some other company wants to

00:06:50,240 --> 00:06:54,080
have their platform as a USB reference

00:06:52,039 --> 00:06:55,699
platform they they can refer the same

00:06:54,080 --> 00:06:58,909
and see if their platform is ready

00:06:55,699 --> 00:07:00,680
within the context of these to get their

00:06:58,909 --> 00:07:05,509
platform as a reference platform for

00:07:00,680 --> 00:07:09,830
AOSP development as I said earlier the

00:07:05,509 --> 00:07:12,409
the s15 is widely open available in

00:07:09,830 --> 00:07:15,409
market for you even for Google or anyone

00:07:12,409 --> 00:07:19,370
in community to get the board the

00:07:15,409 --> 00:07:21,979
documentation is a well publicized has

00:07:19,370 --> 00:07:24,979
to be decent and for its 15 it is 2gb

00:07:21,979 --> 00:07:27,770
and it has good internal MMC space

00:07:24,979 --> 00:07:31,240
barely enough to do the Android current

00:07:27,770 --> 00:07:34,159
use cases but this is good enough for

00:07:31,240 --> 00:07:38,150
the existing features and also the Nets

00:07:34,159 --> 00:07:40,729
pastry requirements there's five USB

00:07:38,150 --> 00:07:43,370
ports needed for various Android use

00:07:40,729 --> 00:07:49,159
cases like ADB MTP ptb Mass Storage kind

00:07:43,370 --> 00:07:53,300
of use cases networking Ethernet is

00:07:49,159 --> 00:07:55,310
supported but even Wi-Fi with a Wi-Fi

00:07:53,300 --> 00:07:56,990
module can be connected as add-on card

00:07:55,310 --> 00:08:00,529
that capability is available on the

00:07:56,990 --> 00:08:03,349
hardware and on software some of the

00:08:00,529 --> 00:08:05,599
requirements are asus but it has to be

00:08:03,349 --> 00:08:09,560
supported for two years at least once a

00:08:05,599 --> 00:08:11,900
platform is upstream and we are doing

00:08:09,560 --> 00:08:15,259
that with that sample of the neuro

00:08:11,900 --> 00:08:16,969
triage team and since the past many

00:08:15,259 --> 00:08:20,839
years with the LCR releases and lkp

00:08:16,969 --> 00:08:24,710
releases so the history of the platform

00:08:20,839 --> 00:08:26,659
with community support is known so the

00:08:24,710 --> 00:08:29,060
next two years support is not a huge

00:08:26,659 --> 00:08:31,159
risk and it should have open boot

00:08:29,060 --> 00:08:33,560
loaders which we've been doing actively

00:08:31,159 --> 00:08:36,050
and also a LTS kernel supporter the

00:08:33,560 --> 00:08:38,599
platform is mostly upstream so all these

00:08:36,050 --> 00:08:40,190
are already available some of the key

00:08:38,599 --> 00:08:42,620
functionality is needed for Android is

00:08:40,190 --> 00:08:45,230
USB for ADB kind of use case where we

00:08:42,620 --> 00:08:47,130
can have to test the compliance so that

00:08:45,230 --> 00:08:50,670
is also upstream

00:08:47,130 --> 00:08:53,730
and we should use the Android common

00:08:50,670 --> 00:08:55,500
kernel so given that LTS pace Android

00:08:53,730 --> 00:08:58,410
common canary is available fairly sooner

00:08:55,500 --> 00:09:02,220
so we do integrate that actively with

00:08:58,410 --> 00:09:03,660
our auto integration cycle and one

00:09:02,220 --> 00:09:06,600
requirement is no neverending crash

00:09:03,660 --> 00:09:08,459
loops basically what it means is Android

00:09:06,600 --> 00:09:11,759
package manager or service manager or

00:09:08,459 --> 00:09:14,399
graphics should not crash and that we

00:09:11,759 --> 00:09:16,680
fairly keep it active and ensure that

00:09:14,399 --> 00:09:19,290
those are not broken and we do test

00:09:16,680 --> 00:09:24,060
review the LG FD test results and

00:09:19,290 --> 00:09:26,339
getting it fixed the nest multimedia is

00:09:24,060 --> 00:09:28,620
one of good to have requirement but we

00:09:26,339 --> 00:09:31,579
do have x-15 mostly ready with software

00:09:28,620 --> 00:09:34,949
video and audio decode features already

00:09:31,579 --> 00:09:39,360
supported in mainline

00:09:34,949 --> 00:09:41,759
GPU driver the kernel module is a GPL

00:09:39,360 --> 00:09:43,860
license and it is out of kernel tree

00:09:41,759 --> 00:09:45,449
integration we do but that is available

00:09:43,860 --> 00:09:48,509
in public it's not like a internal

00:09:45,449 --> 00:09:50,819
kernel module and the user space module

00:09:48,509 --> 00:09:54,839
is firmware and that's also available in

00:09:50,819 --> 00:09:57,180
public one of the requirement is yes all

00:09:54,839 --> 00:09:59,939
this is done in the context of tribal

00:09:57,180 --> 00:10:02,310
development and how we develop Android

00:09:59,939 --> 00:10:05,100
across various platforms and ensure the

00:10:02,310 --> 00:10:07,589
the update ability is faster so the

00:10:05,100 --> 00:10:09,300
tribal is important for Google and this

00:10:07,589 --> 00:10:11,639
platform we've been developing triple

00:10:09,300 --> 00:10:16,860
since many years and so it's not a

00:10:11,639 --> 00:10:18,389
completely unknown area so this is

00:10:16,860 --> 00:10:22,589
little bit busy slide basically what I'm

00:10:18,389 --> 00:10:26,060
trying to show is as a OSP master

00:10:22,589 --> 00:10:30,509
development is happening in parallel a

00:10:26,060 --> 00:10:33,560
pixel-based development happens and the

00:10:30,509 --> 00:10:36,660
fixes are carried from the master or

00:10:33,560 --> 00:10:38,310
when a given tag is announced with that

00:10:36,660 --> 00:10:40,560
sample of four or fourteen LDS and

00:10:38,310 --> 00:10:42,449
Android PI tag a few months before

00:10:40,560 --> 00:10:44,910
itself the pit cells baseline

00:10:42,449 --> 00:10:48,180
development happens and when the PI tag

00:10:44,910 --> 00:10:52,980
is announced pixel device is ready in

00:10:48,180 --> 00:10:55,439
the market any given tag is released

00:10:52,980 --> 00:10:57,480
that's where Leonardo starts looking at

00:10:55,439 --> 00:11:00,170
the baseline and starts making LCR

00:10:57,480 --> 00:11:00,170
basically this

00:11:00,380 --> 00:11:04,860
adding additional platform support in

00:11:02,910 --> 00:11:09,270
this case high key and we've been adding

00:11:04,860 --> 00:11:12,060
x-15 in this category so basically as

00:11:09,270 --> 00:11:14,640
you can see one set.i given tag is

00:11:12,060 --> 00:11:17,850
unknown so on a given google experience

00:11:14,640 --> 00:11:21,360
device there are at least two platforms

00:11:17,850 --> 00:11:23,670
available in LCR who are testing and

00:11:21,360 --> 00:11:25,830
ensuring the Android is not broken with

00:11:23,670 --> 00:11:30,089
the basic compliance on at least two

00:11:25,830 --> 00:11:32,550
platforms our baseline whatever we do

00:11:30,089 --> 00:11:35,850
the as a device support baseline for

00:11:32,550 --> 00:11:38,640
kernel u-boat and Android pastry is same

00:11:35,850 --> 00:11:41,399
between LCR and also for internal

00:11:38,640 --> 00:11:43,830
development so it's the same kit

00:11:41,399 --> 00:11:45,300
repository so but we do test on

00:11:43,830 --> 00:11:47,339
additional platforms which are also

00:11:45,300 --> 00:11:49,800
available in public and internal

00:11:47,339 --> 00:11:52,770
platforms too so whenever we do the

00:11:49,800 --> 00:11:55,830
platform support across various areas in

00:11:52,770 --> 00:11:59,750
u-boat various domain trees and also

00:11:55,830 --> 00:12:02,550
device and hal while we test first on

00:11:59,750 --> 00:12:08,160
LCR slash the internal development

00:12:02,550 --> 00:12:11,459
baseline whatever makes makes sense we

00:12:08,160 --> 00:12:14,940
do get it into master at the same time

00:12:11,459 --> 00:12:17,430
getting it reviewed and once the nits

00:12:14,940 --> 00:12:20,070
based attack is announced the the fixes

00:12:17,430 --> 00:12:22,860
are already available and then we have

00:12:20,070 --> 00:12:26,339
to look at a smaller set of patch set

00:12:22,860 --> 00:12:28,020
ideally we want to go to zero for the

00:12:26,339 --> 00:12:29,640
common frameworks but they will always

00:12:28,020 --> 00:12:34,649
be needed some fixes which we have to

00:12:29,640 --> 00:12:36,420
carry in an immediate pastry release so

00:12:34,649 --> 00:12:38,820
as you can see from this basically

00:12:36,420 --> 00:12:40,680
upstream and downstream development is

00:12:38,820 --> 00:12:46,829
happening in a proactive way then

00:12:40,680 --> 00:12:49,709
reactively looking at issues later this

00:12:46,829 --> 00:12:51,470
is basically summary of water all that

00:12:49,709 --> 00:12:55,140
features what we've been developing

00:12:51,470 --> 00:12:57,360
across you boot kernel and Android OS

00:12:55,140 --> 00:12:59,579
these are the three main areas where

00:12:57,360 --> 00:13:02,310
we've been up streaming features and

00:12:59,579 --> 00:13:05,910
thanks to help from Google they have

00:13:02,310 --> 00:13:09,240
been fairly helpful in reviewing our

00:13:05,910 --> 00:13:11,040
code and getting the right review

00:13:09,240 --> 00:13:14,250
comments so that we can getting it fixed

00:13:11,040 --> 00:13:17,850
getting it upstream to master so this is

00:13:14,250 --> 00:13:21,540
the status as of now initially AOSP you

00:13:17,850 --> 00:13:24,810
boot tag was much older like 20 18 or 20

00:13:21,540 --> 00:13:28,529
1705 based and we have to get it updated

00:13:24,810 --> 00:13:30,680
to the main like at least to 20 1901 new

00:13:28,529 --> 00:13:35,569
boot tag where our platform is already

00:13:30,680 --> 00:13:38,399
there in the mainland you put and then

00:13:35,569 --> 00:13:41,670
the basic platform enablement and for

00:13:38,399 --> 00:13:43,680
Android used is emmc is already part of

00:13:41,670 --> 00:13:48,720
that you boot tags so those are those

00:13:43,680 --> 00:13:50,790
came in directly in that we are doing

00:13:48,720 --> 00:13:53,759
with EMC has some primary boot media but

00:13:50,790 --> 00:13:56,459
even we can switch to like a spy base

00:13:53,759 --> 00:13:58,319
boot media there are some fixes needed

00:13:56,459 --> 00:14:00,649
for fast boot to enable this part and

00:13:58,319 --> 00:14:03,930
that is the development is in progress

00:14:00,649 --> 00:14:07,800
spy Jess basically gives better and

00:14:03,930 --> 00:14:09,899
faster boot support device partitioning

00:14:07,800 --> 00:14:11,699
is today static and that part is already

00:14:09,899 --> 00:14:14,190
main line based on the current you put

00:14:11,699 --> 00:14:16,620
tag and there is dynamic kernel

00:14:14,190 --> 00:14:19,980
partitioning that is coming next needed

00:14:16,620 --> 00:14:22,110
for Android and that along with that and

00:14:19,980 --> 00:14:28,670
the reboot reason basically rebooting to

00:14:22,110 --> 00:14:32,399
and stopping in boot order to flash the

00:14:28,670 --> 00:14:34,260
new super partition and that requirement

00:14:32,399 --> 00:14:36,180
is going to become mandatory and we are

00:14:34,260 --> 00:14:39,300
working actively to get that enabled in

00:14:36,180 --> 00:14:43,319
the near future hopefully by Android cue

00:14:39,300 --> 00:14:45,959
timeframe Android verified boot to dot o

00:14:43,319 --> 00:14:50,819
and also system a and B both go hand in

00:14:45,959 --> 00:14:52,350
hand and those XS are almost ready to be

00:14:50,819 --> 00:14:54,779
integrated in main line but once they

00:14:52,350 --> 00:14:58,920
are there I will just have to request

00:14:54,779 --> 00:15:00,990
Google to update the u-boot tag there is

00:14:58,920 --> 00:15:03,089
no work that has been started with clang

00:15:00,990 --> 00:15:05,819
yet it Lang is one of the requirement

00:15:03,089 --> 00:15:09,060
from Google long term with respect to

00:15:05,819 --> 00:15:12,660
having an all Android projects move from

00:15:09,060 --> 00:15:16,709
GCC true to clang the primary focus has

00:15:12,660 --> 00:15:19,620
been kernel but this is some like one of

00:15:16,709 --> 00:15:24,060
the low hanging in radar to have

00:15:19,620 --> 00:15:27,180
put support rank based belt system more

00:15:24,060 --> 00:15:30,390
details are there in the URL shown here

00:15:27,180 --> 00:15:32,340
and whatever are the new group

00:15:30,390 --> 00:15:35,010
bootloader requirements those will be

00:15:32,340 --> 00:15:36,600
actively updated here and as a supported

00:15:35,010 --> 00:15:38,760
platform any company has to actually

00:15:36,600 --> 00:15:44,160
view what at ease and accordingly enable

00:15:38,760 --> 00:15:45,900
them on a given platform in kernel the

00:15:44,160 --> 00:15:47,610
basic platform support as I said it's in

00:15:45,900 --> 00:15:51,450
mainline so even if someone wants to

00:15:47,610 --> 00:15:55,430
take Phi dot o kernel x-15 itself boots

00:15:51,450 --> 00:15:58,140
to kernel common kernel command-line

00:15:55,430 --> 00:16:00,390
we've been using device free and overlay

00:15:58,140 --> 00:16:03,030
with fit model and that is also

00:16:00,390 --> 00:16:04,740
available and in our integrated kernel

00:16:03,030 --> 00:16:07,050
and we have been actively using an

00:16:04,740 --> 00:16:09,720
integrate Android common kernel and

00:16:07,050 --> 00:16:12,150
Android config project of a given LTS so

00:16:09,720 --> 00:16:15,330
these are all already done on our

00:16:12,150 --> 00:16:18,600
integrated baseline clang build works so

00:16:15,330 --> 00:16:20,820
on kernel but some more testing is

00:16:18,600 --> 00:16:23,610
spending so eventually we have to switch

00:16:20,820 --> 00:16:28,020
to client base build in our production

00:16:23,610 --> 00:16:30,000
based testing emmc and ADB is already

00:16:28,020 --> 00:16:32,610
mainline so this there is no pending

00:16:30,000 --> 00:16:35,640
work there at the kernel drivers for

00:16:32,610 --> 00:16:39,720
also map DRM please display is already

00:16:35,640 --> 00:16:44,580
mainline so those are those work out of

00:16:39,720 --> 00:16:47,610
the box buffer allocation there has been

00:16:44,580 --> 00:16:53,010
active what that's happening and we do

00:16:47,610 --> 00:16:55,140
want to switch to ion it's it will

00:16:53,010 --> 00:16:57,720
eventually be called some other name but

00:16:55,140 --> 00:17:00,900
there is good effort happening between

00:16:57,720 --> 00:17:03,540
Thiele neuro and other members to having

00:17:00,900 --> 00:17:06,990
ad staged for Android and on Android use

00:17:03,540 --> 00:17:08,730
cases and it might be called DM above

00:17:06,990 --> 00:17:11,190
him heaps at least the allocation part

00:17:08,730 --> 00:17:12,570
but this is something which we are

00:17:11,190 --> 00:17:16,440
actively helping with respect to op

00:17:12,570 --> 00:17:19,890
streaming PVR kernel is one part which

00:17:16,440 --> 00:17:22,860
is not mainline above but we have the

00:17:19,890 --> 00:17:26,079
sources available and we do integrate it

00:17:22,860 --> 00:17:30,610
as out of tree model

00:17:26,079 --> 00:17:32,320
on the AOSP side basically when we

00:17:30,610 --> 00:17:34,600
introduce the platform google has to

00:17:32,320 --> 00:17:38,009
create all these projects the device

00:17:34,600 --> 00:17:40,629
project and hardware dia sock project

00:17:38,009 --> 00:17:42,730
and then accordingly once those projects

00:17:40,629 --> 00:17:45,669
are created we added the basic platform

00:17:42,730 --> 00:17:50,860
support ensure the lunch and command to

00:17:45,669 --> 00:17:54,759
boot til command line it it is ready and

00:17:50,860 --> 00:17:57,039
then we added the tribal support and a

00:17:54,759 --> 00:17:59,769
silly next policy fixes to ensure the

00:17:57,039 --> 00:18:02,889
enforcing mode is functional adb

00:17:59,769 --> 00:18:06,460
supported and also PBR firmware is added

00:18:02,889 --> 00:18:08,440
inside the device project device bigger

00:18:06,460 --> 00:18:10,710
less 15 kernel project is basically the

00:18:08,440 --> 00:18:14,889
reference image which is needed for

00:18:10,710 --> 00:18:17,710
ensuring the image is built from the

00:18:14,889 --> 00:18:21,399
google build system and it is needed for

00:18:17,710 --> 00:18:22,809
the CI loop and a better update ability

00:18:21,399 --> 00:18:26,470
and this is one of the requirement and

00:18:22,809 --> 00:18:32,139
that project is also actually tested

00:18:26,470 --> 00:18:35,409
with a CI loop and also elke ft hardware

00:18:32,139 --> 00:18:37,359
TI sock is basically where we all enable

00:18:35,409 --> 00:18:39,249
all the device specific hands and today

00:18:37,359 --> 00:18:43,359
we enable the hardware Composer 1 dot o

00:18:39,249 --> 00:18:45,789
and there is a work happening to migrate

00:18:43,359 --> 00:18:50,470
to hardware Composer 2.1 and switching

00:18:45,789 --> 00:18:53,739
to the up the external DRAM hardware

00:18:50,470 --> 00:18:56,909
composer project instead of the fork

00:18:53,739 --> 00:18:59,379
what we did for our sock specific one

00:18:56,909 --> 00:19:01,899
hopefully that will be ready by the new

00:18:59,379 --> 00:19:03,940
space free boot control Hal this is

00:19:01,899 --> 00:19:07,690
needed for Android verified boot and

00:19:03,940 --> 00:19:11,139
also a be kind of functionality and it

00:19:07,690 --> 00:19:13,450
is there in a OSP master but since given

00:19:11,139 --> 00:19:16,600
that a b and AV b is not yet in you boot

00:19:13,450 --> 00:19:19,299
the development we cannot consider it as

00:19:16,600 --> 00:19:22,450
completely done so when the u-boot

00:19:19,299 --> 00:19:24,669
changes are integrated we do have to do

00:19:22,450 --> 00:19:27,759
some more production testing and close

00:19:24,669 --> 00:19:29,769
this part the nest effort is audio

00:19:27,759 --> 00:19:33,340
higher integration and we have to move

00:19:29,769 --> 00:19:35,440
to a gen record you Hal very soon then

00:19:33,340 --> 00:19:37,090
we had to make some additional fixes in

00:19:35,440 --> 00:19:40,240
a channel ibrahim

00:19:37,090 --> 00:19:41,890
no map device and dynamic kernel module

00:19:40,240 --> 00:19:44,830
loading for kernel module loading

00:19:41,890 --> 00:19:50,650
support and a bunch of compliance Fitz's

00:19:44,830 --> 00:19:53,200
across USB on projects and once all this

00:19:50,650 --> 00:19:58,180
is done manifest with the device project

00:19:53,200 --> 00:20:00,430
is added yeah that's basically summary I

00:19:58,180 --> 00:20:02,860
mean there are so many features that I

00:20:00,430 --> 00:20:07,180
mean this time is short that we cannot

00:20:02,860 --> 00:20:08,770
cover in detail but the net steps is

00:20:07,180 --> 00:20:11,100
given that the platform is already in

00:20:08,770 --> 00:20:13,570
mainland now we do have to update the

00:20:11,100 --> 00:20:15,670
source.android.com and having the

00:20:13,570 --> 00:20:20,410
documentation available so that anyone

00:20:15,670 --> 00:20:23,410
can build and put and use ik and CI loop

00:20:20,410 --> 00:20:25,240
of X 15 is not there yet so that's the

00:20:23,410 --> 00:20:28,300
next step we are working with Google to

00:20:25,240 --> 00:20:32,170
enable it this is for the basic build

00:20:28,300 --> 00:20:33,730
and boot test across Google's apart from

00:20:32,170 --> 00:20:36,460
our arms at YouTube platform cool test

00:20:33,730 --> 00:20:38,640
all its 86 and their emulator simulator

00:20:36,460 --> 00:20:42,190
platforms and all other arm 64 platforms

00:20:38,640 --> 00:20:44,260
and the current baseline is 4 or 14

00:20:42,190 --> 00:20:46,720
based we've been actively testing 4.19

00:20:44,260 --> 00:20:50,340
internally so that equivalent of a USB

00:20:46,720 --> 00:20:50,340
update will happen in the next few weeks

00:20:50,490 --> 00:20:57,160
and Android Pi which is a current base

00:20:54,790 --> 00:20:59,170
fee is tested actually on LTS minus one

00:20:57,160 --> 00:21:02,080
so we do have to test more on

00:20:59,170 --> 00:21:04,620
LTS baseline and start fixing the compa

00:21:02,080 --> 00:21:08,050
compatibility and compliance issues and

00:21:04,620 --> 00:21:10,300
have a better baseline ready and as

00:21:08,050 --> 00:21:11,950
mentioned in the previous slide the main

00:21:10,300 --> 00:21:13,690
two areas where that to development is

00:21:11,950 --> 00:21:17,710
happening is bootloader and enabling the

00:21:13,690 --> 00:21:19,510
hands and anything new that is going to

00:21:17,710 --> 00:21:21,730
come in android q and android for

00:21:19,510 --> 00:21:27,880
automotive is what we are focused in the

00:21:21,730 --> 00:21:29,980
near future to enable ok that's that's

00:21:27,880 --> 00:21:32,130
mostly what i have anyone have any

00:21:29,980 --> 00:21:32,130
questions

00:21:46,659 --> 00:21:54,260
so what will it take to add support for

00:21:51,289 --> 00:21:58,130
x-15 and mine line for Android auto is

00:21:54,260 --> 00:22:02,480
this like a great chunk of work or it's

00:21:58,130 --> 00:22:06,230
like we'll work out of the box we did

00:22:02,480 --> 00:22:08,450
some experimentation on Android audio so

00:22:06,230 --> 00:22:10,429
it's not a huge unknown so basically we

00:22:08,450 --> 00:22:13,010
have to enable a new lunch target

00:22:10,429 --> 00:22:16,490
enabling the automotive specific product

00:22:13,010 --> 00:22:18,590
packages and the HMI interface will look

00:22:16,490 --> 00:22:22,909
different so we had to readjust the

00:22:18,590 --> 00:22:25,700
display resolution and also the Android

00:22:22,909 --> 00:22:27,889
test compliance for automotive is a

00:22:25,700 --> 00:22:31,789
different project so all those have to

00:22:27,889 --> 00:22:34,690
be tested so we did test a variant of

00:22:31,789 --> 00:22:36,710
x-15 platform with that so it's it's

00:22:34,690 --> 00:22:38,919
something that can be done fairly

00:22:36,710 --> 00:22:38,919
quickly

00:22:43,310 --> 00:22:46,180
anyone else

00:22:49,740 --> 00:22:53,190
okay thank you

00:22:53,280 --> 00:22:57,180

YouTube URL: https://www.youtube.com/watch?v=cB7oA50CI30


