Title: BKK19-303: SynQuacer use case update
Publication date: 2019-04-11
Playlist: Linaro Connect Bangkok 2019
Description: 
	Introduction of latest SynQuacer use case.
Captions: 
	00:00:05,689 --> 00:00:09,680
uh-oh everybody

00:00:09,810 --> 00:00:16,170
uh still busy on getting free t-shirts

00:00:12,360 --> 00:00:22,140
but we have time limitations I have 15

00:00:16,170 --> 00:00:25,529
minutes so or start over since July last

00:00:22,140 --> 00:00:30,960
year we that's the timing we finished

00:00:25,529 --> 00:00:34,440
the validation test on sink racer since

00:00:30,960 --> 00:00:37,890
that we started distribution to

00:00:34,440 --> 00:00:41,520
potential customers and partners for the

00:00:37,890 --> 00:00:45,000
real machine variations and we actually

00:00:41,520 --> 00:00:50,340
start having a very good feedback from

00:00:45,000 --> 00:00:54,360
all those partners and most of them are

00:00:50,340 --> 00:01:00,900
actually very unique and they used

00:00:54,360 --> 00:01:04,460
something unexpected use cases but I I

00:01:00,900 --> 00:01:06,049
pick up the some of the typical cases

00:01:04,460 --> 00:01:15,479
today

00:01:06,049 --> 00:01:20,450
okay so first - new DDT feature this is

00:01:15,479 --> 00:01:24,179
for easy bi-metal provisioning so DDT we

00:01:20,450 --> 00:01:26,539
originally considered to use that

00:01:24,179 --> 00:01:32,210
function for only for the internal

00:01:26,539 --> 00:01:35,579
networking so to place the the big data

00:01:32,210 --> 00:01:38,579
dispirited inside the sava and running

00:01:35,579 --> 00:01:45,479
all the the cpu cores together so that

00:01:38,579 --> 00:01:48,539
was the original use case but because of

00:01:45,479 --> 00:01:52,020
that reason we made an internal

00:01:48,539 --> 00:01:56,310
connection available but all the other

00:01:52,020 --> 00:01:59,189
things like external connection we

00:01:56,310 --> 00:02:05,909
expected people used the LAN cable for

00:01:59,189 --> 00:02:09,660
each collecting - each CPU card but some

00:02:05,909 --> 00:02:14,640
of the potential customers they really

00:02:09,660 --> 00:02:17,459
do not like many cables in front of the

00:02:14,640 --> 00:02:21,540
panel so like like picture on the left

00:02:17,459 --> 00:02:23,010
side so only one server in the lock

00:02:21,540 --> 00:02:25,739
properly its

00:02:23,010 --> 00:02:29,220
still acceptable but think about 20 of

00:02:25,739 --> 00:02:35,250
them and all cabling it's it's it's not

00:02:29,220 --> 00:02:37,730
like well some some of the partner said

00:02:35,250 --> 00:02:37,730
that's it

00:02:38,060 --> 00:02:56,700
cables cabling study so we set up the

00:02:47,220 --> 00:03:00,480
driver and for the network card now only

00:02:56,700 --> 00:03:05,340
one connection using the sfp+ form

00:03:00,480 --> 00:03:08,280
factor then the date the external

00:03:05,340 --> 00:03:12,900
connection can equally distribute to the

00:03:08,280 --> 00:03:17,400
internal CPU card so it's up and also

00:03:12,900 --> 00:03:21,690
because we did something in addition on

00:03:17,400 --> 00:03:26,760
that driver we are now able to network

00:03:21,690 --> 00:03:30,810
booting it says coming soon but last

00:03:26,760 --> 00:03:32,669
Friday we distribute the the first draft

00:03:30,810 --> 00:03:34,799
version to the to the potential

00:03:32,669 --> 00:03:39,680
customers I think they already started

00:03:34,799 --> 00:03:41,489
variation so this is the network called

00:03:39,680 --> 00:03:50,900
how we connect

00:03:41,489 --> 00:03:54,329
so we before we design

00:03:50,900 --> 00:03:58,889
why were you designing the motherboard

00:03:54,329 --> 00:04:03,500
of course we expected such a use case so

00:03:58,889 --> 00:04:07,230
we intentionally placed the external

00:04:03,500 --> 00:04:11,849
accessory port for connecting to the

00:04:07,230 --> 00:04:14,190
Ethernet not not Ethernet to Ethernet

00:04:11,849 --> 00:04:19,680
connecting to the PCI Express and that

00:04:14,190 --> 00:04:23,520
PCI Express is the physical connection

00:04:19,680 --> 00:04:28,199
to the DD T so this is how it connects

00:04:23,520 --> 00:04:31,320
so one CPU card we call that peg which

00:04:28,199 --> 00:04:34,300
stands for processor element called the

00:04:31,320 --> 00:04:40,560
Parekh connect to the

00:04:34,300 --> 00:04:44,069
the PCI Express to network card that CPU

00:04:40,560 --> 00:04:47,050
work as a network call host and

00:04:44,069 --> 00:04:50,580
connecting to the all other pegs

00:04:47,050 --> 00:04:54,900
internally so the other connection

00:04:50,580 --> 00:04:54,900
external Ethernet connection to that

00:04:55,560 --> 00:05:03,970
hospitable to the other pegs inside the

00:04:59,169 --> 00:05:10,360
server so that means we have 32 CPU card

00:05:03,970 --> 00:05:17,650
inside so 31 for real functions and one

00:05:10,360 --> 00:05:24,479
for dedicated for the network card so in

00:05:17,650 --> 00:05:32,409
addition we set up the network boot so

00:05:24,479 --> 00:05:38,500
to deployed the bare metal provision in

00:05:32,409 --> 00:05:43,090
our original DD T we make we made a

00:05:38,500 --> 00:05:46,919
program on operation systems OS so that

00:05:43,090 --> 00:05:52,150
means when we turn out the there server

00:05:46,919 --> 00:05:57,610
until OS is OS starts running D DT will

00:05:52,150 --> 00:05:58,719
not walk so in that setting beta

00:05:57,610 --> 00:06:02,199
parameter profit

00:05:58,719 --> 00:06:05,409
provisioning will not walk because all

00:06:02,199 --> 00:06:12,580
the end users they need to choose the

00:06:05,409 --> 00:06:15,729
the OS image from from the disk and we

00:06:12,580 --> 00:06:17,409
need that in always image to distribute

00:06:15,729 --> 00:06:23,530
by DDT

00:06:17,409 --> 00:06:28,530
so that means DDT must be long before OS

00:06:23,530 --> 00:06:35,380
so for that purpose we implemented that

00:06:28,530 --> 00:06:39,219
DDT program into UEFI so now DDT wakes

00:06:35,380 --> 00:06:43,659
up when you UEFI all the drivers don't

00:06:39,219 --> 00:06:48,180
start running then Network bootstrap

00:06:43,659 --> 00:06:54,240
program selected the OS image from the

00:06:48,180 --> 00:06:58,729
always storage through the pixie Sava so

00:06:54,240 --> 00:07:06,090
that's how the network boot pixie boot

00:06:58,729 --> 00:07:10,259
set it up so it's almost ready and not

00:07:06,090 --> 00:07:13,590
many players doing the diameter or

00:07:10,259 --> 00:07:17,729
service using arm so you can imagine who

00:07:13,590 --> 00:07:23,930
she's doing this so but a good thing is

00:07:17,729 --> 00:07:30,810
having this the the existing bare metal

00:07:23,930 --> 00:07:33,479
service providers is Dhiru who has been

00:07:30,810 --> 00:07:40,949
little bit hesitate to jumping into arm

00:07:33,479 --> 00:07:48,509
now they can start doing the test using

00:07:40,949 --> 00:07:52,830
our sink razor so other use case y

00:07:48,509 --> 00:08:01,740
example is the database system so this

00:07:52,830 --> 00:08:08,009
is the we got the access from Oracle

00:08:01,740 --> 00:08:10,849
Japan MySQL team and they said our arm

00:08:08,009 --> 00:08:13,650
concept um a little co multi core

00:08:10,849 --> 00:08:18,090
concept will be beneficial for the

00:08:13,650 --> 00:08:24,150
database system especially on the MySQL

00:08:18,090 --> 00:08:27,840
cluster so we consider the the benefit

00:08:24,150 --> 00:08:32,039
during this MySQL cluster they have

00:08:27,840 --> 00:08:36,570
management node and SQL node SQL node is

00:08:32,039 --> 00:08:39,180
the database server and that database

00:08:36,570 --> 00:08:43,680
server connect to the data node which is

00:08:39,180 --> 00:08:47,570
the storage and they take connect they

00:08:43,680 --> 00:08:50,550
they both scalable SQL and data nodes

00:08:47,570 --> 00:08:53,880
but the problem is that the connection

00:08:50,550 --> 00:08:55,740
between them and most of the case people

00:08:53,880 --> 00:09:00,509
are using our DMA

00:08:55,740 --> 00:09:05,670
in a rocky or Infini band but as you

00:09:00,509 --> 00:09:08,999
know they are expensive and then we

00:09:05,670 --> 00:09:11,700
consider putting everything inside our

00:09:08,999 --> 00:09:22,190
server system

00:09:11,700 --> 00:09:26,160
we have 32 inside one unit so we can

00:09:22,190 --> 00:09:28,970
connect so we can scale both SQL and

00:09:26,160 --> 00:09:35,910
data node we can assign by ourselves

00:09:28,970 --> 00:09:40,339
and inside the SQL node once we assign

00:09:35,910 --> 00:09:44,610
the mic SQL crust automatically

00:09:40,339 --> 00:09:49,649
distribute the tasks for the to the

00:09:44,610 --> 00:09:53,820
database node and we can select the

00:09:49,649 --> 00:09:55,829
number of replication if we pick two the

00:09:53,820 --> 00:10:00,269
data replication will be located

00:09:55,829 --> 00:10:05,160
automatically and then we can also scale

00:10:00,269 --> 00:10:07,829
the data node so having sync Risa we can

00:10:05,160 --> 00:10:10,230
achieve the high density high

00:10:07,829 --> 00:10:15,540
availability low latency low cost

00:10:10,230 --> 00:10:17,339
solutions so original idea of this MySQL

00:10:15,540 --> 00:10:22,740
cluster is for the high availability

00:10:17,339 --> 00:10:28,070
they they claims 99.999%

00:10:22,740 --> 00:10:31,019
availabilities and we can also make

00:10:28,070 --> 00:10:36,120
replication connecting through the the

00:10:31,019 --> 00:10:43,410
the optical cable on the back so it will

00:10:36,120 --> 00:10:46,380
be even higher availability system okay

00:10:43,410 --> 00:10:48,029
this is the benchmark result of the sis

00:10:46,380 --> 00:10:54,359
bench

00:10:48,029 --> 00:10:56,399
oil TPP sound so the two parameters we

00:10:54,359 --> 00:10:58,649
need to consider one is the the

00:10:56,399 --> 00:11:00,839
transaction per second on the left side

00:10:58,649 --> 00:11:06,599
and right side is a response time for

00:11:00,839 --> 00:11:12,179
each transactions so actually increasing

00:11:06,599 --> 00:11:15,419
the data node increasing the the number

00:11:12,179 --> 00:11:18,929
of threads in a case we never reach the

00:11:15,419 --> 00:11:24,149
the bottleneck for anything so CPU

00:11:18,929 --> 00:11:26,579
performance networking and iOS we we

00:11:24,149 --> 00:11:33,569
don't know how to reach the bottleneck

00:11:26,579 --> 00:11:39,599
yet so what happens as so if we set up

00:11:33,569 --> 00:11:41,849
the we started from the 1ql node 1 data

00:11:39,599 --> 00:11:46,919
node this is the original start point

00:11:41,849 --> 00:11:51,689
and on the SQL node we also install the

00:11:46,919 --> 00:11:56,159
suspense and because we have 24 cords in

00:11:51,689 --> 00:12:01,169
one CPU so we set up the the thread

00:11:56,159 --> 00:12:05,599
number of suspense thread 24 but having

00:12:01,169 --> 00:12:11,789
this and increasing the the SQL node

00:12:05,599 --> 00:12:16,199
then second and sad SQL or are not

00:12:11,789 --> 00:12:23,189
functioning at higher usage so they are

00:12:16,199 --> 00:12:27,509
they're like 10% 15% CPU performance so

00:12:23,189 --> 00:12:29,789
we thought probably this part increasing

00:12:27,509 --> 00:12:32,459
dispatcher will make that performance

00:12:29,789 --> 00:12:43,649
better so we increase the suspense

00:12:32,459 --> 00:12:48,830
thread to 48 72 and 96 then SQL know

00:12:43,649 --> 00:12:51,900
starts working but we have some

00:12:48,830 --> 00:12:54,450
disadvantage increasing the number of

00:12:51,900 --> 00:12:58,280
suspense threads because increasing

00:12:54,450 --> 00:13:02,280
stress that decreased the the worse

00:12:58,280 --> 00:13:05,780
response time so we need to balance the

00:13:02,280 --> 00:13:11,160
best better response time and maximum

00:13:05,780 --> 00:13:16,020
sis bench thread so we as you can see

00:13:11,160 --> 00:13:18,360
the response time here so it says one by

00:13:16,020 --> 00:13:22,290
one which means this bench one and data

00:13:18,360 --> 00:13:29,760
on one so we increase this bench and the

00:13:22,290 --> 00:13:34,170
thread number number says 48 1 1 2 1 2 2

00:13:29,760 --> 00:13:38,030
so that means we increase both SQL node

00:13:34,170 --> 00:13:43,020
and data node and as you can see

00:13:38,030 --> 00:13:47,940
increasing the number of rows doesn't

00:13:43,020 --> 00:13:51,300
change actually higher number of nodal

00:13:47,940 --> 00:13:53,700
higher number of nodes we decrease the

00:13:51,300 --> 00:13:57,270
response time so that means we didn't

00:13:53,700 --> 00:14:01,290
reach the network bottleneck yet

00:13:57,270 --> 00:14:06,540
in fact we measure the I path between

00:14:01,290 --> 00:14:11,000
the knows it's over 9 give bps because

00:14:06,540 --> 00:14:16,710
dtt but when we run the the suspense

00:14:11,000 --> 00:14:20,790
it's much lower because each packet not

00:14:16,710 --> 00:14:26,760
free occupied so only the only this

00:14:20,790 --> 00:14:31,110
thousand byte inside one packet so it's

00:14:26,760 --> 00:14:36,210
not effectively loaded on the network

00:14:31,110 --> 00:14:41,340
side but we can try to increase the

00:14:36,210 --> 00:14:47,910
nodes more then you see will be the

00:14:41,340 --> 00:14:54,740
bottleneck of this entire system yes

00:14:47,910 --> 00:14:54,740
ah excuse me

00:14:59,360 --> 00:15:07,670
this is number inside one by one means

00:15:15,110 --> 00:15:26,540
vodka is response time Oh

00:15:17,580 --> 00:15:26,540
real real numbers it's still official

00:15:27,500 --> 00:15:42,450
okay same on the PPS okay so the other

00:15:37,590 --> 00:15:50,280
thing is do application running on sink

00:15:42,450 --> 00:15:52,770
Risa so this is somehow VMs video

00:15:50,280 --> 00:15:55,470
management management system three

00:15:52,770 --> 00:16:01,010
vendors already combated their

00:15:55,470 --> 00:16:03,840
application to sync Risa and actually

00:16:01,010 --> 00:16:09,330
eagle-eye bides erotica that was the

00:16:03,840 --> 00:16:12,990
first trial we've had found that the

00:16:09,330 --> 00:16:17,040
balance of the cpu performance cpu core

00:16:12,990 --> 00:16:22,260
and the memory bandwidth is very good

00:16:17,040 --> 00:16:24,630
fit on the such applications and we got

00:16:22,260 --> 00:16:28,880
approached from Network optics and

00:16:24,630 --> 00:16:34,920
action soft and they're all running okay

00:16:28,880 --> 00:16:38,970
they all have different expertise on the

00:16:34,920 --> 00:16:42,750
software side for example network optics

00:16:38,970 --> 00:16:47,310
dear software is very flexible and there

00:16:42,750 --> 00:16:52,080
are so many other capabilities so we can

00:16:47,310 --> 00:16:56,040
put AI functions onto the brilliant

00:16:52,080 --> 00:16:58,620
software so EDI software and Raj cards

00:16:56,040 --> 00:17:00,190
it's it's designed for very low latency

00:16:58,620 --> 00:17:02,920
and the

00:17:00,190 --> 00:17:11,620
image on that screen is actually iPhones

00:17:02,920 --> 00:17:18,660
a shot image shot so it's the server is

00:17:11,620 --> 00:17:21,400
located in Hokkaido Island using one

00:17:18,660 --> 00:17:26,410
developer keep the connecting motor

00:17:21,400 --> 00:17:30,570
Camilla and then we can see by the the

00:17:26,410 --> 00:17:33,730
iPhone so that's at very low latency and

00:17:30,570 --> 00:17:36,970
third one is the the axons of day they

00:17:33,730 --> 00:17:40,690
connect 300 cameras into one developer

00:17:36,970 --> 00:17:49,120
kit and it's running so this is they are

00:17:40,690 --> 00:17:57,780
all unique okay so for friday demo

00:17:49,120 --> 00:18:02,440
friday we will present network optics so

00:17:57,780 --> 00:18:07,420
we have ai Praveen and will demonstrate

00:18:02,440 --> 00:18:12,870
using developer kit with AI module which

00:18:07,420 --> 00:18:15,940
we use the chip from gyrfalcon is

00:18:12,870 --> 00:18:19,600
representative from Jericho he we will

00:18:15,940 --> 00:18:22,960
have another session afternoon so I hope

00:18:19,600 --> 00:18:27,090
you join there as well so please come to

00:18:22,960 --> 00:18:27,090
our booth on Friday thank you very much

00:18:27,850 --> 00:18:32,790

YouTube URL: https://www.youtube.com/watch?v=lksT-k2AlXk


