Title: YVR18-102:LCG: Lightning Talks
Publication date: 2019-05-09
Playlist: Linaro Connect Vancouver 2018
Description: 
	Linaro Consumer Group (erstwhile Linaro Mobile Group) presents Lightning talks - these are a collection of short talks around what the LCG has been upto, and areas that are interesting to us and members.
Captions: 
	00:00:02,070 --> 00:00:07,080
[Music]

00:00:08,710 --> 00:00:14,990
something over T is TCP and well there

00:00:11,660 --> 00:00:18,529
you go that generated about just north

00:00:14,990 --> 00:00:21,199
275 failures in the case of ASP master

00:00:18,529 --> 00:00:25,730
tracking what we see is more a

00:00:21,199 --> 00:00:26,449
reflection of code they landing in en

00:00:25,730 --> 00:00:29,839
AOSP

00:00:26,449 --> 00:00:31,579
so you know something ultimately gets

00:00:29,839 --> 00:00:35,989
broken but then it gets fixed and you

00:00:31,579 --> 00:00:37,430
know things kind of go back down okay um

00:00:35,989 --> 00:00:39,469
so what makes up some of these failures

00:00:37,430 --> 00:00:40,850
so I guess I was kind of covering some

00:00:39,469 --> 00:00:42,379
of this already but again you know we

00:00:40,850 --> 00:00:43,820
have our little set of savants

00:00:42,379 --> 00:00:45,829
infrastructure things that crop up from

00:00:43,820 --> 00:00:48,710
time to time we see flaky test cases

00:00:45,829 --> 00:00:50,300
that we've been going and fixing as we

00:00:48,710 --> 00:00:50,660
run into them and as we have time to do

00:00:50,300 --> 00:00:52,940
that

00:00:50,660 --> 00:00:55,579
so there's little simple things like the

00:00:52,940 --> 00:00:58,399
latest greatest one was this cutie a GU

00:00:55,579 --> 00:00:59,989
ID kind of category test so there's a

00:00:58,399 --> 00:01:02,390
bunch of there was a config that got

00:00:59,989 --> 00:01:03,589
turned off and you know there's just a

00:01:02,390 --> 00:01:06,410
bunch of test cases they don't know how

00:01:03,589 --> 00:01:09,230
to deal with that particular kernel can

00:01:06,410 --> 00:01:11,660
play config flag when it's on ok so they

00:01:09,230 --> 00:01:13,880
fail but there's also real regressions

00:01:11,660 --> 00:01:15,440
that happen to so I've got a couple of

00:01:13,880 --> 00:01:17,150
links to some of those so like you know

00:01:15,440 --> 00:01:19,520
digging back in time there was a case

00:01:17,150 --> 00:01:21,110
self-test regression iris it should say

00:01:19,520 --> 00:01:23,060
there was a regression that we found as

00:01:21,110 --> 00:01:25,690
a result of the case elf test failure

00:01:23,060 --> 00:01:27,700
from the kernel

00:01:25,690 --> 00:01:29,110
and then there was you know like one

00:01:27,700 --> 00:01:32,080
point there's a there's a trade Fred

00:01:29,110 --> 00:01:34,540
change it that goddess so you know it's

00:01:32,080 --> 00:01:36,790
it's interesting across the range of

00:01:34,540 --> 00:01:39,940
things where I think it's safe to say

00:01:36,790 --> 00:01:41,670
that an honest gosh real kernel

00:01:39,940 --> 00:01:44,170
regression that's a pretty rare event

00:01:41,670 --> 00:01:45,790
whereas on the opposite end of the

00:01:44,170 --> 00:01:47,710
spectrum as in things that are the kind

00:01:45,790 --> 00:01:49,450
of chaos stuff when it happens you know

00:01:47,710 --> 00:01:50,740
and you see a lot of failures it's

00:01:49,450 --> 00:01:52,810
probably more likely an infrastructure

00:01:50,740 --> 00:01:54,190
failure or you have a lot of new code

00:01:52,810 --> 00:01:58,630
that got introduced and things just need

00:01:54,190 --> 00:02:00,820
to settle down a little bit so thoughts

00:01:58,630 --> 00:02:02,770
when it comes to you know this whole

00:02:00,820 --> 00:02:03,730
experience of project sharp and you know

00:02:02,770 --> 00:02:05,410
house we're going through and doing

00:02:03,730 --> 00:02:07,240
validation you know the cool thing about

00:02:05,410 --> 00:02:09,880
all this is all related is public you

00:02:07,240 --> 00:02:11,890
know you can sign up and get the same

00:02:09,880 --> 00:02:13,300
emails that we're looking at from week

00:02:11,890 --> 00:02:16,240
to week and day to day when we do all of

00:02:13,300 --> 00:02:18,550
our triage we you know those little

00:02:16,240 --> 00:02:20,980
email reports cause our triage team to

00:02:18,550 --> 00:02:23,650
kick in but then generate bugs which

00:02:20,980 --> 00:02:25,210
then generate fixes you know that's just

00:02:23,650 --> 00:02:27,130
kind of a whole regression is you know

00:02:25,210 --> 00:02:30,730
the whole system to this that you know

00:02:27,130 --> 00:02:35,200
anybody can get involved with the more

00:02:30,730 --> 00:02:38,140
the merrier so my little plug there we

00:02:35,200 --> 00:02:39,820
find that we fixed it test cases at this

00:02:38,140 --> 00:02:41,890
point in the project more than what

00:02:39,820 --> 00:02:44,950
we're finding with kernel regressions

00:02:41,890 --> 00:02:46,150
and you know I think that's a good thing

00:02:44,950 --> 00:02:47,920
because that means over time that our

00:02:46,150 --> 00:02:49,180
ability to find regressions is going to

00:02:47,920 --> 00:02:51,090
be all the more better because their

00:02:49,180 --> 00:02:54,010
testicles wheats are getting better

00:02:51,090 --> 00:02:54,430
again you know master tracking it's

00:02:54,010 --> 00:02:56,110
chaotic

00:02:54,430 --> 00:03:00,700
okay but that's fine that's that's the

00:02:56,110 --> 00:03:05,170
way that that is QA reports so that's

00:03:00,700 --> 00:03:07,350
pretty good for finding comparisons and

00:03:05,170 --> 00:03:09,250
being able to track trends over history

00:03:07,350 --> 00:03:11,560
but one of the things that's kind of

00:03:09,250 --> 00:03:14,209
painful to us is we really want to see

00:03:11,560 --> 00:03:16,189
trade fed output too

00:03:14,209 --> 00:03:17,480
and that's kind of where to a reports

00:03:16,189 --> 00:03:19,010
you know could be a little bit better

00:03:17,480 --> 00:03:22,129
and you know certainly lower what the

00:03:19,010 --> 00:03:23,569
squad team on that so you know that's uh

00:03:22,129 --> 00:03:25,549
that's just something that'll happen you

00:03:23,569 --> 00:03:26,780
know continuous improvement so that's it

00:03:25,549 --> 00:03:29,510
that's all I had so unless there's

00:03:26,780 --> 00:03:34,900
questions I'll hand it over to John we

00:03:29,510 --> 00:03:37,730
once going twice okay hey John Stoltz

00:03:34,900 --> 00:03:41,450
I'm gonna talk a little bit about ASP

00:03:37,730 --> 00:03:43,219
and external upstream projects so I've

00:03:41,450 --> 00:03:46,159
done a fair amount of work in the past

00:03:43,219 --> 00:03:49,760
working on top string kernel work would

00:03:46,159 --> 00:03:51,500
make success but there's a lot of good

00:03:49,760 --> 00:03:53,389
work going on the Android teams been

00:03:51,500 --> 00:03:55,459
kind of had a renewed focus on actually

00:03:53,389 --> 00:03:57,739
upstream in criminal work so I'm seeing

00:03:55,459 --> 00:04:01,700
lots of kind of real positive changes

00:03:57,739 --> 00:04:03,769
there also some work that Lamar has been

00:04:01,700 --> 00:04:05,810
doing recently along with some Android

00:04:03,769 --> 00:04:08,750
developers is trying to keep the AOSP

00:04:05,810 --> 00:04:10,760
masters branch branches synched with

00:04:08,750 --> 00:04:12,409
external freedesktop.org work projects

00:04:10,760 --> 00:04:16,459
so those particular the DRM hardware

00:04:12,409 --> 00:04:19,880
composer lib dieren and mesa and so this

00:04:16,459 --> 00:04:20,989
has been going fairly well but in doing

00:04:19,880 --> 00:04:23,690
this we're also finding some new

00:04:20,989 --> 00:04:25,220
friction points and so some of those

00:04:23,690 --> 00:04:28,310
friction points in working with those

00:04:25,220 --> 00:04:30,770
upstream projects is that AOSP

00:04:28,310 --> 00:04:32,930
it doesn't really I guess pay too much

00:04:30,770 --> 00:04:36,949
concern about compatibility with older

00:04:32,930 --> 00:04:38,300
versions of Android the older versions

00:04:36,949 --> 00:04:40,460
are in a branch you know they kind of

00:04:38,300 --> 00:04:42,590
are stopped and maintained in those

00:04:40,460 --> 00:04:44,300
separate branches but these external up

00:04:42,590 --> 00:04:46,610
streams actually want their latest

00:04:44,300 --> 00:04:49,729
releases to work with all the active

00:04:46,610 --> 00:04:51,380
Android releases and in fact their sense

00:04:49,729 --> 00:04:52,789
of active is somewhat out of date

00:04:51,380 --> 00:04:55,759
because they care about lollipop on and

00:04:52,789 --> 00:05:01,159
lollipop isn't even a stable maintained

00:04:55,759 --> 00:05:03,979
it must be released anymore and they

00:05:01,159 --> 00:05:05,960
kind of care you care about this to the

00:05:03,979 --> 00:05:08,449
extent that I they prefer those older

00:05:05,960 --> 00:05:10,979
releases working over even aost master

00:05:08,449 --> 00:05:13,020
and so this could be kind of a bit of a

00:05:10,979 --> 00:05:14,819
tense friction point because we aren't

00:05:13,020 --> 00:05:17,789
able to sometimes get a wispy master to

00:05:14,819 --> 00:05:21,710
work with the latest branches because we

00:05:17,789 --> 00:05:24,719
can't break those super old branches

00:05:21,710 --> 00:05:26,069
additionally AOSP is kind of the the

00:05:24,719 --> 00:05:28,080
build system has an increasing

00:05:26,069 --> 00:05:30,210
requirement for using blueprints instead

00:05:28,080 --> 00:05:31,949
of make files there's things that you

00:05:30,210 --> 00:05:33,629
need for trouble but sometimes you can't

00:05:31,949 --> 00:05:37,289
do with make files that you need

00:05:33,629 --> 00:05:39,330
blueprints for but the subtlety there is

00:05:37,289 --> 00:05:41,550
I guess the other problem is that we

00:05:39,330 --> 00:05:43,500
can't usually mix the two there's no way

00:05:41,550 --> 00:05:45,779
to have or at least I haven't found one

00:05:43,500 --> 00:05:47,189
there maybe be possible but a way to

00:05:45,779 --> 00:05:49,349
have both the make file and the

00:05:47,189 --> 00:05:50,639
blueprints coexist in the same project

00:05:49,349 --> 00:05:52,469
which would be needed in order to have

00:05:50,639 --> 00:05:55,370
that support for those super old builds

00:05:52,469 --> 00:05:57,810
as well as the new ones but even within

00:05:55,370 --> 00:06:00,659
just using blueprints the blueprints

00:05:57,810 --> 00:06:02,189
syntax isn't necessarily locked and

00:06:00,659 --> 00:06:03,569
backwards compatible so there's

00:06:02,189 --> 00:06:05,969
sometimes new things that are added that

00:06:03,569 --> 00:06:11,490
might not work with older revisions and

00:06:05,969 --> 00:06:17,219
so that's an area just concerned further

00:06:11,490 --> 00:06:19,529
as some it's found with the trouble

00:06:17,219 --> 00:06:21,150
requirements it's creating lots of

00:06:19,529 --> 00:06:25,159
strict rules about you know what what

00:06:21,150 --> 00:06:27,899
code can do what it can access and

00:06:25,159 --> 00:06:31,050
trying to put these restrictions on

00:06:27,899 --> 00:06:32,789
external projects is difficult in some

00:06:31,050 --> 00:06:34,080
case we you know been pushed say well if

00:06:32,789 --> 00:06:36,779
you can kind of compile this stuff out

00:06:34,080 --> 00:06:39,479
then it can work with trouble but the

00:06:36,779 --> 00:06:41,490
upstream projects don't necessarily I

00:06:39,479 --> 00:06:43,349
guess they're not as concerned about

00:06:41,490 --> 00:06:45,419
this because this is a problem for their

00:06:43,349 --> 00:06:47,819
you know standard linux desktops

00:06:45,419 --> 00:06:51,569
environments and so we need to find a

00:06:47,819 --> 00:06:54,319
way to kind of make this maybe more

00:06:51,569 --> 00:06:54,319
interesting to them

00:06:55,310 --> 00:06:59,250
overall kind of you know basically the

00:06:58,080 --> 00:07:01,289
thing I'm concerned about is that these

00:06:59,250 --> 00:07:05,190
are slowly getting to kind of

00:07:01,289 --> 00:07:07,530
head-butting points and I just have from

00:07:05,190 --> 00:07:09,600
the past seeing in the kernel community

00:07:07,530 --> 00:07:12,860
when kind of this friction in tension

00:07:09,600 --> 00:07:15,360
sort of grow it got to the kind of

00:07:12,860 --> 00:07:18,870
difficult barrier to kind of

00:07:15,360 --> 00:07:20,430
collaboration so I think kind of Linares

00:07:18,870 --> 00:07:22,320
job here needs to be to try to find a

00:07:20,430 --> 00:07:24,120
way to foster the communication and kind

00:07:22,320 --> 00:07:25,380
of improve the interaction between the

00:07:24,120 --> 00:07:27,000
Android kernels about the Android

00:07:25,380 --> 00:07:28,530
developers and the upstream developers

00:07:27,000 --> 00:07:30,180
and so it's sort of a similar effort to

00:07:28,530 --> 00:07:31,440
what we've been doing with the kernel

00:07:30,180 --> 00:07:34,289
community but with these free desktop

00:07:31,440 --> 00:07:36,389
projects as well we really need to find

00:07:34,289 --> 00:07:38,190
a way to kind of get people to share

00:07:36,389 --> 00:07:39,889
their needs as well as kind of

00:07:38,190 --> 00:07:43,770
understanding of the other sides needs

00:07:39,889 --> 00:07:45,060
and concerns and you know this aspect of

00:07:43,770 --> 00:07:47,220
emphasizing the benefits of working

00:07:45,060 --> 00:07:49,680
together well you know for a lot of the

00:07:47,220 --> 00:07:51,780
free desktop folks they might not care

00:07:49,680 --> 00:07:54,990
too much about the specifics of Android

00:07:51,780 --> 00:07:57,300
use cases there is the benefit that you

00:07:54,990 --> 00:07:59,400
know Google's been very good about you

00:07:57,300 --> 00:08:01,169
know doing very thorough security audits

00:07:59,400 --> 00:08:03,180
on projects that do get included in

00:08:01,169 --> 00:08:05,610
Android and so this could be a real big

00:08:03,180 --> 00:08:10,080
benefit for you know those free just

00:08:05,610 --> 00:08:11,760
projects just overall I kind of want to

00:08:10,080 --> 00:08:14,880
get to a point where the easiest answer

00:08:11,760 --> 00:08:16,949
isn't just a fork because you know when

00:08:14,880 --> 00:08:20,039
push comes to shove that tends to be the

00:08:16,949 --> 00:08:22,740
solution and I think it would be a lot

00:08:20,039 --> 00:08:24,240
better if we were able to find a way to

00:08:22,740 --> 00:08:26,400
collaborate so this is just kind of an

00:08:24,240 --> 00:08:29,310
area I feel like we need to be aware of

00:08:26,400 --> 00:08:29,789
and working better on so I think that's

00:08:29,310 --> 00:08:33,919
it

00:08:29,789 --> 00:08:33,919
any other questions or comments

00:08:34,759 --> 00:08:40,740
um currently the forked versions are

00:08:38,099 --> 00:08:43,050
fairly small but I think as this kind of

00:08:40,740 --> 00:08:44,670
tension grows if we don't address this

00:08:43,050 --> 00:08:47,370
there's going to be a higher pressure

00:08:44,670 --> 00:08:49,050
where you know even if the Android

00:08:47,370 --> 00:08:51,389
developers did submit stuff the upstream

00:08:49,050 --> 00:08:53,309
folks just source and say no and then

00:08:51,389 --> 00:08:54,839
androids got to have a solution so

00:08:53,309 --> 00:08:56,639
they're gonna do their own thing and at

00:08:54,839 --> 00:08:58,800
some point then is that way they've been

00:08:56,639 --> 00:09:00,629
worth collaborating on a GL solution and

00:08:58,800 --> 00:09:02,240
so maybe Mesa doesn't become that common

00:09:00,629 --> 00:09:04,230
and I just think that would be a bad

00:09:02,240 --> 00:09:06,720
solution I think like we should find a

00:09:04,230 --> 00:09:08,870
way to work together let me get you a

00:09:06,720 --> 00:09:08,870
mic

00:09:11,310 --> 00:09:17,370
is it only free desktop / DRM projects

00:09:14,970 --> 00:09:21,660
or do you see friction on some other

00:09:17,370 --> 00:09:23,279
external projects um the moment the free

00:09:21,660 --> 00:09:25,649
desktop ones are the ones that I guess

00:09:23,279 --> 00:09:28,050
I've been trying to focus on so I've

00:09:25,649 --> 00:09:30,509
seen it most there I'm sure we could see

00:09:28,050 --> 00:09:33,000
this with other ones I think it's kind

00:09:30,509 --> 00:09:35,939
of community by community you know who's

00:09:33,000 --> 00:09:40,339
been interacting with Android or not it

00:09:35,939 --> 00:09:41,850
feels like maybe depending on past

00:09:40,339 --> 00:09:43,980
communications and things like that

00:09:41,850 --> 00:09:46,680
what's happened in the past often you

00:09:43,980 --> 00:09:47,790
know people can feel Android didn't do

00:09:46,680 --> 00:09:49,709
something right in the past and so

00:09:47,790 --> 00:09:51,209
they're not gonna pay attention now or

00:09:49,709 --> 00:09:56,639
something like that so we just need to

00:09:51,209 --> 00:09:57,930
find ways to kind of know I've been

00:09:56,639 --> 00:09:59,759
looking at a couple of the other

00:09:57,930 --> 00:10:03,449
projects that you haven't mentioned like

00:09:59,759 --> 00:10:05,879
lippy Angie's at live and half us and

00:10:03,449 --> 00:10:07,560
the likes and the situation is pretty

00:10:05,879 --> 00:10:10,079
much the same in all those projects as

00:10:07,560 --> 00:10:12,120
well like set up is not really looking

00:10:10,079 --> 00:10:16,649
at contributions from Android because of

00:10:12,120 --> 00:10:21,120
past problems so Android is trying to

00:10:16,649 --> 00:10:23,460
contribute at least are they

00:10:21,120 --> 00:10:26,670
or the old like our bunch of these

00:10:23,460 --> 00:10:30,000
libraries is way out of date so at least

00:10:26,670 --> 00:10:32,400
for the free disciplines it's all pretty

00:10:30,000 --> 00:10:34,140
current it's just that the changes that

00:10:32,400 --> 00:10:35,730
are in the Android trees we're having a

00:10:34,140 --> 00:10:38,279
real difficult time getting upstream and

00:10:35,730 --> 00:10:40,860
that's because of a lot of like build

00:10:38,279 --> 00:10:42,720
infrastructure differences and so we're

00:10:40,860 --> 00:10:44,040
so the Android team isn't trying to

00:10:42,720 --> 00:10:45,510
upstream it so much you guys are trying

00:10:44,040 --> 00:10:47,700
to upstream well there's been some work

00:10:45,510 --> 00:10:49,200
that's been done before but it's one of

00:10:47,700 --> 00:10:51,029
those things where you know I don't

00:10:49,200 --> 00:10:52,980
think that I think that there's interest

00:10:51,029 --> 00:10:55,410
in trying to do it but now it's kind of

00:10:52,980 --> 00:10:58,170
the others to some extent what I've seen

00:10:55,410 --> 00:10:59,820
is it seems like the free desktops and

00:10:58,170 --> 00:11:02,550
other developers are kind of just a

00:10:59,820 --> 00:11:04,410
little grumpy and trying to hesitant to

00:11:02,550 --> 00:11:06,240
not as open to ideas at least for this

00:11:04,410 --> 00:11:08,250
moment and that's you know just we need

00:11:06,240 --> 00:11:10,440
to find a ways to kind of put the sides

00:11:08,250 --> 00:11:12,210
together itself and it varies greatly

00:11:10,440 --> 00:11:14,610
between some projects for example

00:11:12,210 --> 00:11:17,100
freetype and Android has fallen quite a

00:11:14,610 --> 00:11:20,310
bit behind we have a huge patch to bring

00:11:17,100 --> 00:11:22,529
it up to date but it doesn't look like

00:11:20,310 --> 00:11:29,660
anything is really moving on either side

00:11:22,529 --> 00:11:29,660
of the fence path on the barrel

00:11:32,530 --> 00:11:38,300
so I'm going to give a quick update on

00:11:35,300 --> 00:11:40,400
our clan master bills so what we are

00:11:38,300 --> 00:11:43,940
currently doing is on Sea Isle in our

00:11:40,400 --> 00:11:46,430
oke via health nitrus snapshots of LLVM

00:11:43,940 --> 00:11:49,610
and clang and pali an open MP and

00:11:46,430 --> 00:11:53,450
compiler RT and also playing compare

00:11:49,610 --> 00:11:55,430
towards extra building then when I build

00:11:53,450 --> 00:11:57,890
succeeds we automatically try to build a

00:11:55,430 --> 00:12:00,500
OSP with it at the moment we need I

00:11:57,890 --> 00:12:04,040
think five patches or so to make that

00:12:00,500 --> 00:12:06,890
work and then via fix and submit any

00:12:04,040 --> 00:12:10,340
bugs and AOSP we are detecting and when

00:12:06,890 --> 00:12:12,050
we are detecting a buck in clang we at

00:12:10,340 --> 00:12:14,360
the moment only who reported back

00:12:12,050 --> 00:12:16,370
upstream because we currently don't have

00:12:14,360 --> 00:12:22,100
any resources allocated to fix in clan

00:12:16,370 --> 00:12:24,470
itself so new sands last connect orders

00:12:22,100 --> 00:12:26,180
as we are now using a variant of the

00:12:24,470 --> 00:12:29,420
tool chain build scripts that are an AO

00:12:26,180 --> 00:12:31,070
SP that makes it easier for us to keep

00:12:29,420 --> 00:12:34,940
in sync with what's happening upstream

00:12:31,070 --> 00:12:37,040
and it also eliminates all the tricks we

00:12:34,940 --> 00:12:40,130
used to do to get non-standard files

00:12:37,040 --> 00:12:43,250
like symbol maps and everything that the

00:12:40,130 --> 00:12:45,950
AOS people system relies on but at the

00:12:43,250 --> 00:12:48,770
upstream build system doesn't generate

00:12:45,950 --> 00:12:51,050
and of course that will also make it

00:12:48,770 --> 00:12:56,390
possible to build indicate or chance at

00:12:51,050 --> 00:12:59,180
some point if we decide to now there's a

00:12:56,390 --> 00:13:02,240
couple of future projects that we could

00:12:59,180 --> 00:13:05,480
do to make this even more interesting

00:13:02,240 --> 00:13:07,580
I'm not promising that will actually

00:13:05,480 --> 00:13:09,740
happen that depends mostly on member

00:13:07,580 --> 00:13:12,830
input and approval of resources to work

00:13:09,740 --> 00:13:15,290
on it when it's more testing on clang

00:13:12,830 --> 00:13:18,200
release branches right now we are only

00:13:15,290 --> 00:13:20,600
doing the master branch and we are

00:13:18,200 --> 00:13:24,290
testing release branches manually

00:13:20,600 --> 00:13:26,269
never as in our c release also next

00:13:24,290 --> 00:13:30,350
project idea would be building an NDK

00:13:26,269 --> 00:13:32,690
and combined with that maybe the next

00:13:30,350 --> 00:13:35,180
step of enabling some extra languages

00:13:32,690 --> 00:13:37,519
and they're like having swift available

00:13:35,180 --> 00:13:39,529
in NDK build might be interesting for

00:13:37,519 --> 00:13:42,350
app developers trying to put something

00:13:39,529 --> 00:13:43,670
from that other mobile iOS another

00:13:42,350 --> 00:13:46,850
interesting thing would be building

00:13:43,670 --> 00:13:50,949
native apps it's before compilers so we

00:13:46,850 --> 00:13:50,949
don't need x86 boxes to build on anymore

00:13:51,430 --> 00:13:56,600
then another idea would be adding

00:13:54,500 --> 00:13:59,060
binutils and to the mix right now we are

00:13:56,600 --> 00:14:02,540
using the pre-built by Norris from AOSP

00:13:59,060 --> 00:14:05,480
but it might be nice to also test if you

00:14:02,540 --> 00:14:07,579
up in utils upstream like truth 31 but

00:14:05,480 --> 00:14:11,800
one or even nightly snapshots going

00:14:07,579 --> 00:14:13,970
along with the clang version would work

00:14:11,800 --> 00:14:17,060
another interesting thing would be

00:14:13,970 --> 00:14:21,980
obviously to automatically get basic

00:14:17,060 --> 00:14:24,290
stuff when there's a new failure so

00:14:21,980 --> 00:14:27,250
unless there's questions I'm going to

00:14:24,290 --> 00:14:27,250
pass on to some it

00:14:31,860 --> 00:14:40,350
when you say clang on airspeeds all on

00:14:35,610 --> 00:14:46,190
32 64 and x86 targets or experimentation

00:14:40,350 --> 00:14:48,750
for master is validated on only armed 64

00:14:46,190 --> 00:14:50,880
so we are building all of them including

00:14:48,750 --> 00:14:55,770
even the windows cross compilers that I

00:14:50,880 --> 00:14:58,020
built for her by the AOSP script but we

00:14:55,770 --> 00:15:01,140
are only testing into unaired 64 for now

00:14:58,020 --> 00:15:03,420
so I think another built for X 15 or so

00:15:01,140 --> 00:15:06,780
might be another interesting project to

00:15:03,420 --> 00:15:09,810
build on top of it and second question

00:15:06,780 --> 00:15:14,040
is this effort doesn't include the

00:15:09,810 --> 00:15:16,560
bootloader part it's only at the moment

00:15:14,040 --> 00:15:19,230
it's only a OSP user space not even

00:15:16,560 --> 00:15:20,790
including the kernel that it will

00:15:19,230 --> 00:15:24,480
definitely include to counter at some

00:15:20,790 --> 00:15:28,680
point also looking into building kernels

00:15:24,480 --> 00:15:30,780
with clang and at some point when are in

00:15:28,680 --> 00:15:36,300
shape for it we also try to act boot

00:15:30,780 --> 00:15:38,430
loaders into it okay thanks yeah and

00:15:36,300 --> 00:15:41,010
just be clear from lkt testing

00:15:38,430 --> 00:15:42,930
perspective we do build kernels today

00:15:41,010 --> 00:15:44,850
with clang as part of our testing effort

00:15:42,930 --> 00:15:49,560
but we're not using this particular tool

00:15:44,850 --> 00:15:51,210
chain we're using the Google one hi

00:15:49,560 --> 00:15:56,100
everyone I think I have a few minutes

00:15:51,210 --> 00:15:57,810
second dick time this is I'm not going

00:15:56,100 --> 00:16:00,420
to talk about anything Android in this

00:15:57,810 --> 00:16:02,090
particular thing it was just sort of

00:16:00,420 --> 00:16:04,760
small side project I was trying to do

00:16:02,090 --> 00:16:09,840
while helping out with the elk ft

00:16:04,760 --> 00:16:13,470
testing so I saw chases she's not here

00:16:09,840 --> 00:16:16,740
but he's of chases there it is such as

00:16:13,470 --> 00:16:19,650
did an excellent thing I'll just talk

00:16:16,740 --> 00:16:22,410
about that what is the remote aircraft

00:16:19,650 --> 00:16:25,170
in lab it's basically using lavas

00:16:22,410 --> 00:16:27,960
distributed instant setup and it allows

00:16:25,170 --> 00:16:29,910
us to run our own devices run tests on

00:16:27,960 --> 00:16:33,120
our own devices and then report them to

00:16:29,910 --> 00:16:35,370
aircraft if we want to so changed it the

00:16:33,120 --> 00:16:38,460
amazing work of creating and documenting

00:16:35,370 --> 00:16:41,280
all of this and it the link is there you

00:16:38,460 --> 00:16:44,430
can just look up for lkp remote lab and

00:16:41,280 --> 00:16:45,020
you'll be able to find it right now it

00:16:44,430 --> 00:16:47,480
uses

00:16:45,020 --> 00:16:49,610
so an Intel laptop as a dispatcher and

00:16:47,480 --> 00:16:51,860
an RPI three-plus relays for power in

00:16:49,610 --> 00:16:53,870
notes you control so what was my

00:16:51,860 --> 00:16:57,110
motivation I just wanted to see if I can

00:16:53,870 --> 00:17:01,370
do it on arm homonym we heard this theme

00:16:57,110 --> 00:17:03,650
this morning but so I wanted to use only

00:17:01,370 --> 00:17:06,589
arm devices so I'm as a dispatcher ROM

00:17:03,650 --> 00:17:08,570
is a PD you control so I was using I'm

00:17:06,589 --> 00:17:13,040
using set of relays controlled by a GPIO

00:17:08,570 --> 00:17:15,440
as Chase had recommended and he'd done

00:17:13,040 --> 00:17:19,250
already and of course I'm device for

00:17:15,440 --> 00:17:21,140
test first idea was to try you know why

00:17:19,250 --> 00:17:23,209
do I need the laptop why can't I just do

00:17:21,140 --> 00:17:26,380
everything on the RPI three and it

00:17:23,209 --> 00:17:30,230
started off okay but it had a few things

00:17:26,380 --> 00:17:32,480
like it required a 64-bit OS setup the

00:17:30,230 --> 00:17:36,530
Lama installation where as the default

00:17:32,480 --> 00:17:39,140
RPI three is only 32-bit user space so I

00:17:36,530 --> 00:17:41,900
figured out a mechanism to do it is not

00:17:39,140 --> 00:17:44,480
straight forward from the RPI three set

00:17:41,900 --> 00:17:47,870
of tools but it was manageable to do but

00:17:44,480 --> 00:17:50,240
for me for some reason the USB

00:17:47,870 --> 00:17:54,200
connections used to get reset whenever I

00:17:50,240 --> 00:17:56,270
would do a toggle of GPIO s and it was I

00:17:54,200 --> 00:17:58,280
didn't spend a whole lot of time on

00:17:56,270 --> 00:17:59,780
trying to root cause it because I had

00:17:58,280 --> 00:18:03,440
already another thing that I wanted to

00:17:59,780 --> 00:18:07,550
try out so I had dragon good for 24 10

00:18:03,440 --> 00:18:09,020
and it the good things were that it

00:18:07,550 --> 00:18:11,570
already had excellent

00:18:09,020 --> 00:18:14,150
Debian support our dispatchers setup was

00:18:11,570 --> 00:18:16,370
really straightforward but where I ran

00:18:14,150 --> 00:18:19,220
into issues there was that the GPI is

00:18:16,370 --> 00:18:21,880
Drive at 1.8 volts and the relays that I

00:18:19,220 --> 00:18:24,620
was using were either 5 volts or 2.3 so

00:18:21,880 --> 00:18:26,420
at that time I didn't think or know

00:18:24,620 --> 00:18:28,010
about the level shifters that were

00:18:26,420 --> 00:18:29,570
already available in the audio mezzanine

00:18:28,010 --> 00:18:34,400
I got to know about that this morning

00:18:29,570 --> 00:18:39,200
but another solution that then happened

00:18:34,400 --> 00:18:41,660
was trying to use 96 ports Carbon to do

00:18:39,200 --> 00:18:43,130
the relay control and that's where money

00:18:41,660 --> 00:18:45,450
gave me the suggestion but I used

00:18:43,130 --> 00:18:47,580
Daniels excellent small tool

00:18:45,450 --> 00:18:49,799
to use that as they used to be relay

00:18:47,580 --> 00:18:53,190
setup and I should have actually put a

00:18:49,799 --> 00:18:56,429
link here the added bonus with that is

00:18:53,190 --> 00:19:00,330
is that it's a 96 ports complete

00:18:56,429 --> 00:19:03,299
solution to try and do do it it works

00:19:00,330 --> 00:19:05,190
but it's slow so it's ok if you have one

00:19:03,299 --> 00:19:09,899
device under test but if you have more

00:19:05,190 --> 00:19:13,289
probably it'll struggle a little bit so

00:19:09,899 --> 00:19:15,570
I got approval from a cat open which is

00:19:13,289 --> 00:19:18,720
like good decently powerful a 72

00:19:15,570 --> 00:19:21,659
quad-core 4gb ram has an excellent main

00:19:18,720 --> 00:19:24,029
line double story there were some set of

00:19:21,659 --> 00:19:26,760
quotes but it was not terribly bad it

00:19:24,029 --> 00:19:29,549
was manageable so ufi it comes by

00:19:26,760 --> 00:19:31,200
default with you good but you fi as

00:19:29,549 --> 00:19:35,220
needed if you want to do Debian and all

00:19:31,200 --> 00:19:38,070
all of that so it it's been quite ok so

00:19:35,220 --> 00:19:40,590
far there were a few other miscellaneous

00:19:38,070 --> 00:19:43,740
issues which I mean it took me some time

00:19:40,590 --> 00:19:47,010
to figure out my the relay board that I

00:19:43,740 --> 00:19:49,799
had bought had inverted highs and lows

00:19:47,010 --> 00:19:51,389
and the script that used to that was

00:19:49,799 --> 00:19:53,850
used to toggle them had an option of

00:19:51,389 --> 00:19:56,639
inverting so it was easier this bit was

00:19:53,850 --> 00:20:00,149
easier to manage so I just did an invert

00:19:56,639 --> 00:20:03,179
of inverted but there's a pulse command

00:20:00,149 --> 00:20:06,210
in the ocm tree that daniels setup uses

00:20:03,179 --> 00:20:08,399
and that didn't work very well with

00:20:06,210 --> 00:20:11,130
whatever I was trying to do so I again

00:20:08,399 --> 00:20:13,200
hacked around and didn't do and often

00:20:11,130 --> 00:20:16,710
pulse but just didn't know on and off

00:20:13,200 --> 00:20:20,100
for for a reboot and right now it's

00:20:16,710 --> 00:20:23,880
working I am not yet connected it to the

00:20:20,100 --> 00:20:26,370
main lava lbft instance but that's on my

00:20:23,880 --> 00:20:28,470
to do so my idea was to try and figure

00:20:26,370 --> 00:20:30,960
out if I can use this setup and you know

00:20:28,470 --> 00:20:32,639
have these distributed sets available

00:20:30,960 --> 00:20:36,779
because right now the problem that we

00:20:32,639 --> 00:20:38,669
had with currently 50 setup is that

00:20:36,779 --> 00:20:41,309
there are there is a finite number of

00:20:38,669 --> 00:20:43,350
boards and there are a lot of jobs that

00:20:41,309 --> 00:20:46,110
we run on them so there were times where

00:20:43,350 --> 00:20:48,000
you could probably because your personal

00:20:46,110 --> 00:20:49,910
job would be a lower medium priority it

00:20:48,000 --> 00:20:52,550
would run maybe two days later

00:20:49,910 --> 00:20:54,740
I mean and I know I'm exaggerating a

00:20:52,550 --> 00:20:56,960
little bit but it was slow to get

00:20:54,740 --> 00:20:59,690
results back so I thought why not when I

00:20:56,960 --> 00:21:02,090
saw chases ID I thought why not try and

00:20:59,690 --> 00:21:03,770
have one set up ready which uses my

00:21:02,090 --> 00:21:07,520
boards which I may or may not be using

00:21:03,770 --> 00:21:10,280
at the time to provide extra slaves to

00:21:07,520 --> 00:21:12,830
run these tests and maybe help make it

00:21:10,280 --> 00:21:15,020
faster I promise there will be a blog

00:21:12,830 --> 00:21:20,840
post soon about it I have not written it

00:21:15,020 --> 00:21:24,650
yet but it's going to be there soon just

00:21:20,840 --> 00:21:26,900
two minutes short of time is actually

00:21:24,650 --> 00:21:28,220
cheeky advert which is that one of my

00:21:26,900 --> 00:21:30,140
team is doing a similar presentation

00:21:28,220 --> 00:21:34,190
tomorrow afternoon

00:21:30,140 --> 00:21:36,530
based on DBA 20c as the associate law of

00:21:34,190 --> 00:21:40,330
a master as well as it's like that it's

00:21:36,530 --> 00:21:40,330
just sorry about that

00:21:42,070 --> 00:21:45,580
any questions

00:21:48,480 --> 00:21:56,400
can you please go back to this slide

00:21:50,760 --> 00:22:00,210
with level shifters yeah so just random

00:21:56,400 --> 00:22:04,140
idea so probably you can use external

00:22:00,210 --> 00:22:07,290
plot and use GTA your line like emulate

00:22:04,140 --> 00:22:12,150
an open drain behavior just switch knit

00:22:07,290 --> 00:22:14,400
into input mode when you want to to

00:22:12,150 --> 00:22:18,210
provide high level with the external

00:22:14,400 --> 00:22:20,850
pull up to five volts right and when you

00:22:18,210 --> 00:22:24,230
want to just provide low level you can

00:22:20,850 --> 00:22:28,710
just switch it to output mode and just

00:22:24,230 --> 00:22:33,900
set set it to zero so just just a random

00:22:28,710 --> 00:22:36,480
idea that's what the carbon is that

00:22:33,900 --> 00:22:38,220
you're doing because carbon is a 3.3

00:22:36,480 --> 00:22:43,020
volt device and that carbon fiber will

00:22:38,220 --> 00:22:49,040
either I just took the the easiest path

00:22:43,020 --> 00:22:49,040
out so but thanks I will try that out

00:22:50,030 --> 00:22:58,460
quick question what is ocm tree okay

00:22:58,640 --> 00:23:06,470
so thank you it's just out of time we'll

00:23:01,289 --> 00:23:06,470
move on to the next one which is um it's

00:23:06,919 --> 00:23:17,810
yeah end of this session the next one is

00:23:10,230 --> 00:23:21,510
from thanks very much

00:23:17,810 --> 00:23:26,519
[Applause]

00:23:21,510 --> 00:23:26,519

YouTube URL: https://www.youtube.com/watch?v=d22b-Eb2UNs


