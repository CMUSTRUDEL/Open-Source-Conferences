Title: YVR18- 414: Keymaster and Gatekeeper
Publication date: 2018-10-04
Playlist: Linaro Connect Vancouver 2018
Description: 
	Keymaster and Gatekeeper implements a set of security features in AOSP that leverages hardware-backed security like TrustZone. In this presentation we are going to give an overview of the concepts and talk about how this will work together with OP-TEE.
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:08,070 --> 00:00:14,559
so hi and welcome to this presentation

00:00:10,690 --> 00:00:17,080
my name is Uwe kimbuck and we will give

00:00:14,559 --> 00:00:20,320
an introduction to you about key master

00:00:17,080 --> 00:00:22,359
and gatekeeper also have Victor Cheung

00:00:20,320 --> 00:00:25,089
here he will take the second part of the

00:00:22,359 --> 00:00:31,839
presentation more how you actually

00:00:25,089 --> 00:00:35,969
working with key master so what is key

00:00:31,839 --> 00:00:40,750
master so that's the way where you can

00:00:35,969 --> 00:00:45,309
use harbor backed security for storing

00:00:40,750 --> 00:00:48,129
keys and I ADIZ like I my serial numbers

00:00:45,309 --> 00:00:49,750
and such so it consists of a couple of

00:00:48,129 --> 00:00:51,969
components the features that we can see

00:00:49,750 --> 00:00:54,160
here so you have the access control of

00:00:51,969 --> 00:00:56,019
the keys that is something that you

00:00:54,160 --> 00:00:58,989
specify when you generate the key so you

00:00:56,019 --> 00:01:00,840
tell who can access it for how long is

00:00:58,989 --> 00:01:03,429
it valid and so on

00:01:00,840 --> 00:01:05,350
you have diversion binding which is

00:01:03,429 --> 00:01:08,320
basically roll back protections so if

00:01:05,350 --> 00:01:09,670
you find some old software that could

00:01:08,320 --> 00:01:12,759
have a flaw you should not be able to

00:01:09,670 --> 00:01:16,000
just reload the old software and this is

00:01:12,759 --> 00:01:20,710
tied to the patch level on the operating

00:01:16,000 --> 00:01:22,990
system so yeah I also think that in the

00:01:20,710 --> 00:01:24,579
later versions they have speed up to

00:01:22,990 --> 00:01:28,030
complete binary so now it's patched

00:01:24,579 --> 00:01:32,520
levels for system image and our images

00:01:28,030 --> 00:01:35,500
also client binding is when you have

00:01:32,520 --> 00:01:39,399
certain keys that should be associated

00:01:35,500 --> 00:01:41,259
with a client application so a normal

00:01:39,399 --> 00:01:45,000
Android app should be able to have its

00:01:41,259 --> 00:01:47,979
own unique key that is defined here

00:01:45,000 --> 00:01:53,290
expiration well it's what it says how

00:01:47,979 --> 00:01:56,289
long should this be valid velocity is

00:01:53,290 --> 00:01:59,380
basically that you delayed the time

00:01:56,289 --> 00:02:01,479
between each and every try you do so you

00:01:59,380 --> 00:02:04,329
should you should not just be able to do

00:02:01,479 --> 00:02:05,770
it force it since you will get you have

00:02:04,329 --> 00:02:07,920
to have more and more time which we need

00:02:05,770 --> 00:02:10,950
to try in this case

00:02:07,920 --> 00:02:13,230
then we have the root of trust binding

00:02:10,950 --> 00:02:15,930
so every single key that you generate

00:02:13,230 --> 00:02:23,280
should be tied to the root key in some

00:02:15,930 --> 00:02:25,110
way at the station so this I would say

00:02:23,280 --> 00:02:28,290
it's probably a big figment keymaster

00:02:25,110 --> 00:02:29,610
you need to have a way to ensure that

00:02:28,290 --> 00:02:32,430
the keys that you're use is actually

00:02:29,610 --> 00:02:34,739
stored in hardware so by using

00:02:32,430 --> 00:02:37,590
certificates with how all the

00:02:34,739 --> 00:02:39,300
information you can verify that the key

00:02:37,590 --> 00:02:41,870
that is going to be used is actually

00:02:39,300 --> 00:02:45,540
stored in the holder back environment

00:02:41,870 --> 00:02:47,069
and all this is based with what is

00:02:45,540 --> 00:02:48,750
called authorization tags so that's

00:02:47,069 --> 00:02:51,600
basically a set of structures and so on

00:02:48,750 --> 00:02:55,230
that is tied together here to make it

00:02:51,600 --> 00:02:59,850
work and starting from Android oh this

00:02:55,230 --> 00:03:01,380
is something that's mandatory gatekeeper

00:02:59,850 --> 00:03:03,380
on the other hand I have some more

00:03:01,380 --> 00:03:08,819
slides later on showing how it looks in

00:03:03,380 --> 00:03:11,959
architectural view gatekeeper is the one

00:03:08,819 --> 00:03:14,609
that is responsible of enrolling

00:03:11,959 --> 00:03:16,769
basically registering passwords and

00:03:14,609 --> 00:03:18,239
verifying passwords so when you're

00:03:16,769 --> 00:03:20,910
entering the pin code for example on

00:03:18,239 --> 00:03:24,890
your phone or dragging the finger you

00:03:20,910 --> 00:03:24,890
have the gatekeeper in all the nuts so

00:03:25,340 --> 00:03:31,739
if we look at the architectural overview

00:03:28,430 --> 00:03:33,630
you can see that if we take gatekeeper

00:03:31,739 --> 00:03:37,260
in this case for example you enter your

00:03:33,630 --> 00:03:38,940
password the demon in a normal world use

00:03:37,260 --> 00:03:40,799
of space will take care of it and send

00:03:38,940 --> 00:03:45,870
it down to the gatekeeper tier in this

00:03:40,799 --> 00:03:48,840
case the gatekeeper ta will sign a

00:03:45,870 --> 00:03:51,150
message and send it back to you normal

00:03:48,840 --> 00:03:52,890
world a user space which then will talk

00:03:51,150 --> 00:03:55,680
to the key master and the key master

00:03:52,890 --> 00:03:59,310
will verify that it was okay and then

00:03:55,680 --> 00:04:01,579
opens whatever feature you were trying

00:03:59,310 --> 00:04:01,579
to access

00:04:02,790 --> 00:04:07,510
fingerprint we haven't really touched

00:04:05,500 --> 00:04:09,879
that so I will not really say anything

00:04:07,510 --> 00:04:11,290
about it but it could be in the future

00:04:09,879 --> 00:04:18,489
that we will also start looking into the

00:04:11,290 --> 00:04:21,010
fingerprint reader and this is the view

00:04:18,489 --> 00:04:22,300
how things are looking from opti point

00:04:21,010 --> 00:04:24,850
of view where we're doing the work right

00:04:22,300 --> 00:04:26,650
now so on the left side you have the re

00:04:24,850 --> 00:04:29,050
as usual on the right side we have to

00:04:26,650 --> 00:04:31,270
trust the side and you can see on the

00:04:29,050 --> 00:04:34,750
top in the user space we have the key

00:04:31,270 --> 00:04:36,370
master and gatekeeper blob and that's

00:04:34,750 --> 00:04:43,600
basically the things that are running in

00:04:36,370 --> 00:04:46,780
ASP so they will be in in our ASP forest

00:04:43,600 --> 00:04:52,060
in this case on the right side you have

00:04:46,780 --> 00:04:54,970
key master as a trusted application we

00:04:52,060 --> 00:04:57,840
have as it looks today in implementation

00:04:54,970 --> 00:05:01,510
we actually have some parts in

00:04:57,840 --> 00:05:03,639
privileged mode also that are used with

00:05:01,510 --> 00:05:05,229
they came out at EA and what that is

00:05:03,639 --> 00:05:07,389
something that we're going to refactor a

00:05:05,229 --> 00:05:15,940
little bit and move it up to the key

00:05:07,389 --> 00:05:19,750
master ta only and from a recipe point

00:05:15,940 --> 00:05:21,610
of view this is how it looks like so all

00:05:19,750 --> 00:05:26,229
the messages I mean lock settings for

00:05:21,610 --> 00:05:27,760
some in this case from the pin when you

00:05:26,229 --> 00:05:31,360
enter the pin it goes down through the

00:05:27,760 --> 00:05:35,440
hell and we starting to execute our code

00:05:31,360 --> 00:05:38,650
in the first blue blue rectangle here so

00:05:35,440 --> 00:05:40,449
that's the gatekeeper hal and then just

00:05:38,650 --> 00:05:45,000
at the two previous slides you go down

00:05:40,449 --> 00:05:45,000
to the t itself and execute the code

00:05:47,030 --> 00:05:56,310
so when we were going to start from this

00:05:52,740 --> 00:06:00,350
we we had it on a road map but we have

00:05:56,310 --> 00:06:03,360
started to work with pkcs 11 related

00:06:00,350 --> 00:06:04,919
functionality also initially we were

00:06:03,360 --> 00:06:08,250
believing that we should be able to

00:06:04,919 --> 00:06:10,020
maybe combine these two but when we when

00:06:08,250 --> 00:06:12,630
we had to start to look into it we

00:06:10,020 --> 00:06:17,100
realized that they are two separates so

00:06:12,630 --> 00:06:20,610
let's do it on one by one instead we had

00:06:17,100 --> 00:06:23,430
well it took press on the PK 11 work was

00:06:20,610 --> 00:06:26,039
the one that we spent most of our

00:06:23,430 --> 00:06:28,110
engineering time on so we got a little

00:06:26,039 --> 00:06:29,820
bit delayed by that and we also have

00:06:28,110 --> 00:06:31,199
some spectra and melt on stuff so we

00:06:29,820 --> 00:06:33,000
were kind of little bit short on

00:06:31,199 --> 00:06:36,990
manpower basically to start working with

00:06:33,000 --> 00:06:39,000
this not until May last year we started

00:06:36,990 --> 00:06:40,889
to ramp up in full speed we were a

00:06:39,000 --> 00:06:43,830
couple of three four engineers working

00:06:40,889 --> 00:06:47,160
with it almost full-time I would say but

00:06:43,830 --> 00:06:52,320
we started from scratch and we had quite

00:06:47,160 --> 00:06:55,530
a few open questions and in June there

00:06:52,320 --> 00:06:57,599
were one company reaching out to us and

00:06:55,530 --> 00:07:01,200
saying we have a solution working that

00:06:57,599 --> 00:07:03,900
we can give to you so we start to think

00:07:01,200 --> 00:07:05,580
what should we do now should we try to

00:07:03,900 --> 00:07:07,979
merge what we have done so far together

00:07:05,580 --> 00:07:10,500
or should we throw it away oh yeah

00:07:07,979 --> 00:07:12,660
what should we do so we decided to try

00:07:10,500 --> 00:07:14,580
it out I mean have a look at the code do

00:07:12,660 --> 00:07:16,620
some sanity testing and so on and it's

00:07:14,580 --> 00:07:19,020
it seems to be pretty good so we decided

00:07:16,620 --> 00:07:21,210
to go with the code that we get donated

00:07:19,020 --> 00:07:22,979
to us so we just throwed away everything

00:07:21,210 --> 00:07:25,620
we've done and installed over in this

00:07:22,979 --> 00:07:27,680
space instead and that is the code base

00:07:25,620 --> 00:07:30,360
that we have been working with now since

00:07:27,680 --> 00:07:33,919
since the summer and trying to integrate

00:07:30,360 --> 00:07:38,160
it in a high key device on a TI device

00:07:33,919 --> 00:07:40,169
and so on and trying to fix a couple of

00:07:38,160 --> 00:07:45,180
pending issues that we have seen also

00:07:40,169 --> 00:07:47,690
with BTS test cases and we have started

00:07:45,180 --> 00:07:50,340
to do some refactoring already also and

00:07:47,690 --> 00:07:52,560
cleaning up for up-stream since we would

00:07:50,340 --> 00:07:57,289
like to submit this to the AOSP forest

00:07:52,560 --> 00:07:57,289
and get it much properly so to say

00:07:59,910 --> 00:08:06,190
all the test cases were passing the

00:08:03,789 --> 00:08:08,430
recent star there when we upgraded to a

00:08:06,190 --> 00:08:10,270
newer version we got two regressions and

00:08:08,430 --> 00:08:12,100
there were sort of ones that we were

00:08:10,270 --> 00:08:14,680
fighting me right now but I think we

00:08:12,100 --> 00:08:18,729
know what the issue is we have also

00:08:14,680 --> 00:08:21,460
started to create a stable manifest so

00:08:18,729 --> 00:08:24,490
our people can try our things out it

00:08:21,460 --> 00:08:26,229
will need to be based on forks since we

00:08:24,490 --> 00:08:28,660
we haven't been able to upstream

00:08:26,229 --> 00:08:30,430
everything and we also need to have the

00:08:28,660 --> 00:08:34,450
support from Google in this case so they

00:08:30,430 --> 00:08:35,969
accept the code from us and what I

00:08:34,450 --> 00:08:38,289
mentioned already is about this

00:08:35,969 --> 00:08:42,550
refactoring of the code it's removing

00:08:38,289 --> 00:08:45,790
the as I said on the right side here I

00:08:42,550 --> 00:08:47,980
mean on the privileged mode we are going

00:08:45,790 --> 00:08:51,959
to remove the sudo ta that we have there

00:08:47,980 --> 00:08:51,959
and move it up to the keymaster instead

00:08:54,960 --> 00:09:02,970
yeah I think that's my part so now I

00:08:58,590 --> 00:09:06,710
hand over to victory instead to a little

00:09:02,970 --> 00:09:06,710
bit more hands on how you can use it so

00:09:11,030 --> 00:09:17,850
if you wish to try this out the way to

00:09:14,130 --> 00:09:19,830
build this is just clone this github

00:09:17,850 --> 00:09:23,480
repository that we have created for you

00:09:19,830 --> 00:09:27,360
with just checking out the ybr 18 branch

00:09:23,480 --> 00:09:28,980
CD today the opti androidmanifest

00:09:27,360 --> 00:09:31,770
directory and then you can just run the

00:09:28,980 --> 00:09:33,600
sing scrape and a build script so

00:09:31,770 --> 00:09:35,730
previously we had to build everything

00:09:33,600 --> 00:09:38,100
manually but we've created the

00:09:35,730 --> 00:09:45,030
scriptures to simplify the building for

00:09:38,100 --> 00:09:47,550
you so once you're done with the bill

00:09:45,030 --> 00:09:50,810
just this is the standard procedure for

00:09:47,550 --> 00:09:54,270
flashing the images to the Heike with

00:09:50,810 --> 00:09:56,910
the OSP build as a flash all script and

00:09:54,270 --> 00:09:58,260
the device lien are high key so if you

00:09:56,910 --> 00:10:01,530
want to use that you can otherwise you

00:09:58,260 --> 00:10:04,370
can just flash use just flash using

00:10:01,530 --> 00:10:04,370
passbook manually

00:10:05,670 --> 00:10:14,910
okay so to test this you just execute a

00:10:09,540 --> 00:10:17,040
DB root and then I run the pickiest test

00:10:14,910 --> 00:10:19,520
suite we're not running it through DVTs

00:10:17,040 --> 00:10:22,950
interface so just running as they as the

00:10:19,520 --> 00:10:26,040
Cheetahs standalone unit we just with

00:10:22,950 --> 00:10:29,750
path to the executable it's just that

00:10:26,040 --> 00:10:37,590
our native test 64 VT s healthy muscle

00:10:29,750 --> 00:10:43,880
so just run it a the test takes quite

00:10:37,590 --> 00:10:48,120
long to run maybe about an hour so if

00:10:43,880 --> 00:10:50,070
it's a test fit consisting of about 160

00:10:48,120 --> 00:10:52,500
tests so if you want you can filter it

00:10:50,070 --> 00:10:54,360
out and just run you know individual

00:10:52,500 --> 00:10:58,980
test set of tests you know it can do

00:10:54,360 --> 00:11:01,650
wildcards just with the dash dash hope

00:10:58,980 --> 00:11:05,210
that you can see the list of options

00:11:01,650 --> 00:11:09,260
that you can use for filtering or no

00:11:05,210 --> 00:11:09,260
positive or negative matches

00:11:10,210 --> 00:11:15,580
and just a note that this is this is a

00:11:13,200 --> 00:11:17,529
because since who are still working on

00:11:15,580 --> 00:11:23,500
development this is sort of a debug bill

00:11:17,529 --> 00:11:26,620
so they'll be very verbose printout so

00:11:23,500 --> 00:11:31,020
just you know fYI in case you don't like

00:11:26,620 --> 00:11:31,020
things screwing up your screen too much

00:11:31,170 --> 00:11:37,089
okay and with this build this there was

00:11:34,360 --> 00:11:38,649
an issue with the composer's our

00:11:37,089 --> 00:11:40,680
composer Service scaling the stars so

00:11:38,649 --> 00:11:44,440
that sort of clatters to the console

00:11:40,680 --> 00:11:47,940
just not really a opti issue so we have

00:11:44,440 --> 00:11:51,279
a workaround for this basically we just

00:11:47,940 --> 00:11:54,220
delete the service file for the composer

00:11:51,279 --> 00:11:58,899
and then it stops it from starting but I

00:11:54,220 --> 00:12:02,529
think that's fixed by the Android team

00:11:58,899 --> 00:12:04,360
now so if you need to just let us know

00:12:02,529 --> 00:12:06,570
we can give you the the patches for a

00:12:04,360 --> 00:12:06,570
fix

00:12:07,950 --> 00:12:11,940
and then if you don't like building we

00:12:10,500 --> 00:12:13,260
have pre-built binaries as well so you

00:12:11,940 --> 00:12:14,850
can just go ahead and download these

00:12:13,260 --> 00:12:20,730
flashy to your bore and just run it

00:12:14,850 --> 00:12:23,240
tested see how it works and I if you are

00:12:20,730 --> 00:12:26,130
just working on the keymaster

00:12:23,240 --> 00:12:27,510
quick keeper application alone this

00:12:26,130 --> 00:12:31,230
might be easier because you don't have

00:12:27,510 --> 00:12:36,209
to build the full no for AOSP bill you

00:12:31,230 --> 00:12:38,399
can just build your bill your executable

00:12:36,209 --> 00:12:41,300
build trust applications and just adb

00:12:38,399 --> 00:12:43,680
push it to replace whatever is in here

00:12:41,300 --> 00:12:48,630
then make things a lot easier say for

00:12:43,680 --> 00:12:52,889
you a lot of time so this is the sample

00:12:48,630 --> 00:12:54,720
test output so once you from from

00:12:52,889 --> 00:12:56,459
running this adb shell command you will

00:12:54,720 --> 00:12:58,980
just go through all the tests in the

00:12:56,459 --> 00:13:02,160
test suite then you should see this it

00:12:58,980 --> 00:13:05,310
says you know 106 tests from tough test

00:13:02,160 --> 00:13:08,220
cases and gives you a total time havin

00:13:05,310 --> 00:13:10,050
actually calculated then but it should

00:13:08,220 --> 00:13:16,260
be about an hour so it shows this shows

00:13:10,050 --> 00:13:18,240
that all the tests passing so that's all

00:13:16,260 --> 00:13:23,640
we have for now the next steps would be

00:13:18,240 --> 00:13:26,550
just to which one of our engines working

00:13:23,640 --> 00:13:28,529
is to refactor the pseudo ta into

00:13:26,550 --> 00:13:29,910
dynamic trust application so that you

00:13:28,529 --> 00:13:33,120
know we can just have everything

00:13:29,910 --> 00:13:35,820
contained within TAS improving a/c

00:13:33,120 --> 00:13:37,500
policies because at this point we have

00:13:35,820 --> 00:13:39,300
to run everything assured so we like to

00:13:37,500 --> 00:13:43,019
be able to run it as a non real user as

00:13:39,300 --> 00:13:47,579
well and then up streaming we're in

00:13:43,019 --> 00:13:51,420
contact with the usb people to see you

00:13:47,579 --> 00:13:53,190
know what is the best suit the best

00:13:51,420 --> 00:13:57,720
approach or strategies for getting all

00:13:53,190 --> 00:14:01,170
this upstream and key master version 4

00:13:57,720 --> 00:14:03,329
was released not too long ago maybe

00:14:01,170 --> 00:14:05,040
several weeks ago so there's another

00:14:03,329 --> 00:14:09,000
thing on the list too to watch out for

00:14:05,040 --> 00:14:10,830
to see if we can you know upgrade

00:14:09,000 --> 00:14:12,780
the current version tree from three to

00:14:10,830 --> 00:14:15,300
four and then lastly is the fingerprint

00:14:12,780 --> 00:14:20,520
demon might be something to look at as

00:14:15,300 --> 00:14:23,240
well I think that's it

00:14:20,520 --> 00:14:23,240
any questions

00:14:34,760 --> 00:14:41,570
I'm wondering what is required to

00:14:37,550 --> 00:14:45,649
support this on the new platform this

00:14:41,570 --> 00:14:48,500
the code is platform dependent so you

00:14:45,649 --> 00:14:52,120
can just take it just print up the phone

00:14:48,500 --> 00:14:55,310
and build it because this yeah I mean

00:14:52,120 --> 00:14:58,250
independence means mainly depends on

00:14:55,310 --> 00:15:01,250
opti like the are layer only depends on

00:14:58,250 --> 00:15:02,959
opti specific implementation yes so you

00:15:01,250 --> 00:15:10,040
already have opti on your platform I

00:15:02,959 --> 00:15:11,990
believe so yeah just take the this if

00:15:10,040 --> 00:15:14,540
you take the manifest you can see what's

00:15:11,990 --> 00:15:19,220
needed and you can just take it in but

00:15:14,540 --> 00:15:25,209
basically it's just there are some

00:15:19,220 --> 00:15:28,610
patches on opti OS that you need but

00:15:25,209 --> 00:15:31,339
other than that the the the Android user

00:15:28,610 --> 00:15:33,199
line stuff is in a separate repository I

00:15:31,339 --> 00:15:34,670
can give it a link later you can just

00:15:33,199 --> 00:15:37,029
take it and compile it and just try to

00:15:34,670 --> 00:15:37,029
run it

00:15:41,270 --> 00:15:47,010
that the only dependency I think I can

00:15:44,399 --> 00:15:48,750
see is that will you have to tie things

00:15:47,010 --> 00:15:51,600
to the hardware unique key so depending

00:15:48,750 --> 00:15:53,880
on your hardware you need to figure out

00:15:51,600 --> 00:15:56,220
how you are using the hardware unique in

00:15:53,880 --> 00:15:58,709
your hardware otherwise I think it's

00:15:56,220 --> 00:16:02,240
like trees are pretty device independent

00:15:58,709 --> 00:16:02,240
it's just a software running

00:16:08,600 --> 00:16:14,060
as joking you should in the earliest

00:16:11,930 --> 00:16:16,670
lights that you are trying to link that

00:16:14,060 --> 00:16:20,810
passcode storage with this

00:16:16,670 --> 00:16:23,780
so is that linked with this applications

00:16:20,810 --> 00:16:25,940
is there any demo application where you

00:16:23,780 --> 00:16:28,910
enter your PIN and that get stored in

00:16:25,940 --> 00:16:30,800
the secure storage provided by optic no

00:16:28,910 --> 00:16:32,270
there is no damn application yet I don't

00:16:30,800 --> 00:16:34,670
think you see any graphical when you're

00:16:32,270 --> 00:16:39,740
on TV - yes and such is just console

00:16:34,670 --> 00:16:42,470
based everything yeah the thing that I

00:16:39,740 --> 00:16:46,010
guess we and probably most people go by

00:16:42,470 --> 00:16:49,750
the VT SS we could test for you know

00:16:46,010 --> 00:16:53,600
everything that implemented so there is

00:16:49,750 --> 00:16:57,160
a GUI interface to VT s but we've never

00:16:53,600 --> 00:17:00,890
used it seems like it's I think that I

00:16:57,160 --> 00:17:02,840
mean in theory if you if it works in the

00:17:00,890 --> 00:17:05,500
BTS test and you would apply it on

00:17:02,840 --> 00:17:08,810
Android device and you have the login

00:17:05,500 --> 00:17:11,050
dialog then it in theory it should work

00:17:08,810 --> 00:17:11,050
okay

00:17:20,260 --> 00:17:27,910
I have pretty much two questions first

00:17:23,640 --> 00:17:29,920
how is this ta signed I know that ta

00:17:27,910 --> 00:17:32,740
should be signed and its signature

00:17:29,920 --> 00:17:35,860
integrated into your script and what is

00:17:32,740 --> 00:17:38,560
just like you know everyone can download

00:17:35,860 --> 00:17:42,400
your repository and build it and sign

00:17:38,560 --> 00:17:44,740
any should work yeah so since this is a

00:17:42,400 --> 00:17:46,870
public tree that we have hosted on

00:17:44,740 --> 00:17:48,430
github you can of course not have all

00:17:46,870 --> 00:17:51,400
the keys and such so what we have there

00:17:48,430 --> 00:17:53,890
is today is a development key private

00:17:51,400 --> 00:17:55,840
key is there so but of course you SSS

00:17:53,890 --> 00:17:57,880
even are supposed to replace that with

00:17:55,840 --> 00:18:00,220
your own key and when you've done that

00:17:57,880 --> 00:18:02,920
and you have compiled your TAS

00:18:00,220 --> 00:18:04,930
they if you use the same way of building

00:18:02,920 --> 00:18:07,300
as we are it will be signed for you

00:18:04,930 --> 00:18:10,120
automatically and when you're loading

00:18:07,300 --> 00:18:13,000
the tea a tea quarry will verify the

00:18:10,120 --> 00:18:17,020
signature before loading running the tea

00:18:13,000 --> 00:18:19,750
itself thanks and the second one have

00:18:17,020 --> 00:18:22,390
you considered the situation when you

00:18:19,750 --> 00:18:25,740
have gatekeeper and key master in a

00:18:22,390 --> 00:18:25,740
single trusted application

00:18:26,809 --> 00:18:35,730
we talked about 20 minutes ago really

00:18:29,879 --> 00:18:39,570
well no but I mean I guess I guess it's

00:18:35,730 --> 00:18:42,749
possible but I mean it would help I

00:18:39,570 --> 00:18:44,610
guess in in the case where you know

00:18:42,749 --> 00:18:47,159
because we have to share the auth token

00:18:44,610 --> 00:18:49,889
each Maki so right now we're just using

00:18:47,159 --> 00:18:52,470
tota communication but if it is combined

00:18:49,889 --> 00:18:55,830
then we don't have to to do that extra

00:18:52,470 --> 00:18:58,289
but I mean they are sort of different

00:18:55,830 --> 00:19:01,759
features different functionality so it

00:18:58,289 --> 00:19:01,759
makes sense to just keep them separate

00:19:07,300 --> 00:19:14,559
what the profit well mmm

00:19:11,250 --> 00:19:17,890
the first thing you as well that's as

00:19:14,559 --> 00:19:21,429
for me you're not gonna to upstream to

00:19:17,890 --> 00:19:22,960
trance identification and justifications

00:19:21,429 --> 00:19:25,300
and we you will have in one repository

00:19:22,960 --> 00:19:32,010
called the code is the first and the

00:19:25,300 --> 00:19:36,640
second one this thing with H Maki and

00:19:32,010 --> 00:19:41,230
I'm pretty sure that you might have used

00:19:36,640 --> 00:19:43,480
some source code which is common for key

00:19:41,230 --> 00:19:46,030
master and gatekeeper Sam's like some

00:19:43,480 --> 00:19:48,820
functionality and I just was wondering

00:19:46,030 --> 00:19:51,580
if that if have you have you consider

00:19:48,820 --> 00:19:53,559
this option and maybe you just no

00:19:51,580 --> 00:19:55,059
thought about it and decided it not not

00:19:53,559 --> 00:19:57,790
not not Howard case

00:19:55,059 --> 00:19:59,500
yeah now will be the realest we haven't

00:19:57,790 --> 00:20:01,150
discussed it but I mean of course it's

00:19:59,500 --> 00:20:03,670
possible to do it and if you find that

00:20:01,150 --> 00:20:05,650
there are bigger pieces of the code that

00:20:03,670 --> 00:20:07,179
can be shared and well it might be

00:20:05,650 --> 00:20:12,240
something that we could look into and

00:20:07,179 --> 00:20:12,240
consider but so far not thank you

00:20:12,350 --> 00:20:15,640
[Music]

00:20:19,330 --> 00:20:25,020
okay out of questions

00:20:22,500 --> 00:20:26,120
no we're good okay thanks for coming

00:20:25,020 --> 00:20:30,480
here enjoy a day

00:20:26,120 --> 00:20:35,480
[Applause]

00:20:30,480 --> 00:20:35,480

YouTube URL: https://www.youtube.com/watch?v=UR3io1uCkdo


