Title: YVR18-503:Diary of a Drive by Coder: Tips and Tricks for Working with Upstream
Publication date: 2018-10-22
Playlist: Linaro Connect Vancouver 2018
Description: 
	Most of the community talks emphasize how to join the community and become an ongoing part of it, but what if you simply want to get a feature upstream and then move on to the next task? This behavior is called "Drive by Coding" and can be seriously frowned on by some communities who value ongoing community participation, but at the same time, it's the essence of the open source "scratch your own itch" principle.

This talk will showcase the experiences of an experienced kernel developer trying to do ecosystem enabling for kernel features via what is effectively driven by coding in the projects that should consume the feature. We will start off by talking about our first Drive By coding experience: trying to get support in PulseAudio for using the UE Boom 2 Stick as a highly efficient conference phone and move on to our later work on TPM enabling the cryptography and key handling (ssh and gnupg) infrastructure in Linux. This talk will show a range of community behaviors varying from hostile to extremely welcoming, and detail the successes and sometimes spectacular failures. We'll derive lessons learned including how to smooth the path, how to get upstream to like you but also how to recognize when community hostility is intractable and what to do in this case.
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:08,769 --> 00:00:17,240
well hi everybody need to start the

00:00:12,320 --> 00:00:19,939
countdown timer as well my name is James

00:00:17,240 --> 00:00:22,789
Bottomly and I'm actually talking to you

00:00:19,939 --> 00:00:25,609
today about the diary of a drive-by

00:00:22,789 --> 00:00:28,640
coder and what I mean by a drive-by

00:00:25,609 --> 00:00:30,830
coder is someone who's not a specific

00:00:28,640 --> 00:00:32,750
core member of a project and yet is

00:00:30,830 --> 00:00:36,020
trying to get patches upstream into that

00:00:32,750 --> 00:00:38,230
project one of the reasons I got leaned

00:00:36,020 --> 00:00:42,080
on heavily to give this talk here is

00:00:38,230 --> 00:00:44,150
because although I can outline some of

00:00:42,080 --> 00:00:46,370
the strategies that I use to try and get

00:00:44,150 --> 00:00:49,250
patches upstream successfully there is

00:00:46,370 --> 00:00:52,070
no one successful strategy and there are

00:00:49,250 --> 00:00:54,020
definitely communities that are highly

00:00:52,070 --> 00:00:57,050
resistant to accepting patches from

00:00:54,020 --> 00:00:58,490
outsiders and actually for me there's an

00:00:57,050 --> 00:01:01,130
added difficulty in that there are a lot

00:00:58,490 --> 00:01:03,410
of communities interested in proving

00:01:01,130 --> 00:01:04,820
that they are better than the kernel and

00:01:03,410 --> 00:01:06,620
so when you come to them as a kernel

00:01:04,820 --> 00:01:09,260
developer you have to work twice as hard

00:01:06,620 --> 00:01:12,710
to get your patches upstream but the

00:01:09,260 --> 00:01:14,510
point is that everybody who comes to

00:01:12,710 --> 00:01:17,090
Lonardo is an engineer is actually

00:01:14,510 --> 00:01:19,940
trying to in some sense get patches into

00:01:17,090 --> 00:01:22,220
open source projects and all of us

00:01:19,940 --> 00:01:25,040
experience failures along the way and

00:01:22,220 --> 00:01:27,650
hopefully by telling you some of my

00:01:25,040 --> 00:01:31,220
failures as a nearly 30-year kernel

00:01:27,650 --> 00:01:32,960
developer guy who's actually talk

00:01:31,220 --> 00:01:35,420
advocated for upstream at other

00:01:32,960 --> 00:01:37,370
companies set the upstream strategy been

00:01:35,420 --> 00:01:40,460
the one person pushing all the engineers

00:01:37,370 --> 00:01:42,590
to do it it's still sometimes impossible

00:01:40,460 --> 00:01:47,320
for me to get my patches upstream so

00:01:42,590 --> 00:01:47,320
this is a demonstration of some of the

00:01:47,380 --> 00:01:54,530
failures as well as some of the

00:01:49,610 --> 00:01:56,720
successes I've actually had so a bit

00:01:54,530 --> 00:01:59,150
more about me apart from sort of doing

00:01:56,720 --> 00:02:01,430
open source at companies for a long time

00:01:59,150 --> 00:02:04,549
and that really means acting more like a

00:02:01,430 --> 00:02:07,010
community officer or trying to enable

00:02:04,549 --> 00:02:08,119
other engineers to do open source rather

00:02:07,010 --> 00:02:10,700
than actually pushing all the patches

00:02:08,119 --> 00:02:12,140
myself I've been a kernel developer for

00:02:10,700 --> 00:02:13,190
enormous time I've been the scuzzy

00:02:12,140 --> 00:02:16,550
subsystem maintained

00:02:13,190 --> 00:02:18,230
since 2002 and the pa-risc

00:02:16,550 --> 00:02:21,170
architecture maintainer for almost as

00:02:18,230 --> 00:02:23,420
long and in 2011 I was one of the people

00:02:21,170 --> 00:02:25,910
instrumental in getting the container

00:02:23,420 --> 00:02:29,620
agreement at the kernel summit so I am

00:02:25,910 --> 00:02:29,620
deeply embedded in the Linux community

00:02:30,130 --> 00:02:34,010
the drive by coding I've done has

00:02:32,420 --> 00:02:36,530
actually been interesting the one that

00:02:34,010 --> 00:02:39,050
you probably know about is the Android

00:02:36,530 --> 00:02:40,610
Santa Jan mod right back in the early

00:02:39,050 --> 00:02:43,340
days of Android and we're talking about

00:02:40,610 --> 00:02:46,220
2.3 here which dates me in order to

00:02:43,340 --> 00:02:48,080
prove that I still have my 2.3 based

00:02:46,220 --> 00:02:51,320
phone this is an Android Nexus one that

00:02:48,080 --> 00:02:53,390
I still use and my contribution mainly

00:02:51,320 --> 00:02:55,340
to CyanogenMod because it was very

00:02:53,390 --> 00:02:58,250
difficult to get patches up into the

00:02:55,340 --> 00:03:00,830
Google AOSP project at that time is open

00:02:58,250 --> 00:03:02,930
VPN and the reason I needed open VPN is

00:03:00,830 --> 00:03:04,820
because I had to get email from a

00:03:02,930 --> 00:03:09,560
corporate server that was behind a VPN

00:03:04,820 --> 00:03:12,170
based firewall and this was the very

00:03:09,560 --> 00:03:13,700
early days of Android now you'll

00:03:12,170 --> 00:03:16,670
probably have heard a lot in the media

00:03:13,700 --> 00:03:19,790
about communities being wild west in the

00:03:16,670 --> 00:03:21,590
early days but to me when I look at what

00:03:19,790 --> 00:03:23,690
Wild West means it actually just meant

00:03:21,590 --> 00:03:25,820
that we were so hungry for patches that

00:03:23,690 --> 00:03:27,680
we'd accept them for almost anywhere so

00:03:25,820 --> 00:03:31,070
I won't be talking about what I did for

00:03:27,680 --> 00:03:32,930
Android because it's actually somewhat

00:03:31,070 --> 00:03:34,550
embarrassing compared to the process you

00:03:32,930 --> 00:03:37,040
go through nowadays presumably all of

00:03:34,550 --> 00:03:38,660
you know about Garrett and the dedicated

00:03:37,040 --> 00:03:40,910
reviews and everything I got these

00:03:38,660 --> 00:03:42,860
patches up into CyanogenMod by opening a

00:03:40,910 --> 00:03:44,300
Bugzilla and attaching the patches as

00:03:42,860 --> 00:03:46,610
attachments and saying this will make

00:03:44,300 --> 00:03:48,950
OpenVPN work and in those days they

00:03:46,610 --> 00:03:53,830
accepted them I am fairly sure in these

00:03:48,950 --> 00:03:56,030
days they would not the second piece of

00:03:53,830 --> 00:03:59,810
patching I did for the Android ecosystem

00:03:56,030 --> 00:04:01,580
was actually in Java so now you can say

00:03:59,810 --> 00:04:03,170
that you have at least met one kernel

00:04:01,580 --> 00:04:06,580
developer who knows how to program in

00:04:03,170 --> 00:04:10,790
Java and will admit to it in public and

00:04:06,580 --> 00:04:12,140
what I did was I needed a sip client for

00:04:10,790 --> 00:04:14,209
Android that would actually plug

00:04:12,140 --> 00:04:16,940
straight into my asterisk system at home

00:04:14,209 --> 00:04:19,040
and the in those days to sit there the

00:04:16,940 --> 00:04:20,480
SIP client for Android that was open

00:04:19,040 --> 00:04:23,630
source was something called sit roid

00:04:20,480 --> 00:04:25,280
it's now been rebranded as liminal but

00:04:23,630 --> 00:04:26,570
it's still actually available in the

00:04:25,280 --> 00:04:29,030
Android store

00:04:26,570 --> 00:04:30,770
and the additions I did for it is still

00:04:29,030 --> 00:04:32,650
actually available as well I must

00:04:30,770 --> 00:04:35,750
confess I have two patches for subgrade

00:04:32,650 --> 00:04:38,150
one makes the codec support pluggable

00:04:35,750 --> 00:04:40,010
and I needed this because in a lot of

00:04:38,150 --> 00:04:42,410
situations where I wander around the

00:04:40,010 --> 00:04:44,270
world you get two hotels some of which

00:04:42,410 --> 00:04:46,760
have really unfortunately crappy

00:04:44,270 --> 00:04:48,890
networks you don't experience that here

00:04:46,760 --> 00:04:51,320
but in a lot of the hotels I've stayed

00:04:48,890 --> 00:04:54,730
in it's true and there are certain voice

00:04:51,320 --> 00:04:57,110
codecs like opus that are actually very

00:04:54,730 --> 00:04:59,510
accommodating to horrible networks and

00:04:57,110 --> 00:05:03,230
so what I actually wanted was to program

00:04:59,510 --> 00:05:05,720
my asterisk server and the phone to

00:05:03,230 --> 00:05:07,130
actually agree a set of codecs that I

00:05:05,720 --> 00:05:10,130
thought would work with the hotel's

00:05:07,130 --> 00:05:11,720
Wi-Fi and so the pluggable codecs

00:05:10,130 --> 00:05:15,830
support if you look at it is primarily

00:05:11,720 --> 00:05:17,930
spy X and opus which is its replacement

00:05:15,830 --> 00:05:19,820
now it's got a few of the other high

00:05:17,930 --> 00:05:21,920
definition audio codecs and then it just

00:05:19,820 --> 00:05:24,080
has the usual you'll or a law stuff and

00:05:21,920 --> 00:05:25,400
it allows you to reorder the codecs and

00:05:24,080 --> 00:05:27,260
the order you want them and to turn them

00:05:25,400 --> 00:05:29,510
on and off which means that you can

00:05:27,260 --> 00:05:31,940
actually set the preferential order that

00:05:29,510 --> 00:05:33,650
the support client will offer to the end

00:05:31,940 --> 00:05:36,020
device for the codecs at once and that

00:05:33,650 --> 00:05:38,680
means you can pretty much control what

00:05:36,020 --> 00:05:42,200
codec you're actually going to be using

00:05:38,680 --> 00:05:44,600
I've also done labelled timezone fixes

00:05:42,200 --> 00:05:46,550
this is because I had to use I've worked

00:05:44,600 --> 00:05:47,540
at a lot of companies where exchange is

00:05:46,550 --> 00:05:50,150
the standard calendaring system

00:05:47,540 --> 00:05:53,510
evolution connects to exchange but it

00:05:50,150 --> 00:05:55,790
had certain times Onis use time zone

00:05:53,510 --> 00:05:57,710
issues are interesting when the actual

00:05:55,790 --> 00:06:00,050
country you are working for real

00:05:57,710 --> 00:06:01,520
legislative time zone so this happened

00:06:00,050 --> 00:06:04,280
to me when I was working for parallels

00:06:01,520 --> 00:06:06,770
and Moscow Russia has changed its time

00:06:04,280 --> 00:06:08,600
zone three times in the time I've

00:06:06,770 --> 00:06:11,530
actually worked at parallels the first

00:06:08,600 --> 00:06:14,090
time it officially abolished summer time

00:06:11,530 --> 00:06:16,190
the next time it officially switched to

00:06:14,090 --> 00:06:17,600
summer time and then it decided that

00:06:16,190 --> 00:06:19,550
there was too much it was too dark in

00:06:17,600 --> 00:06:21,200
the morning so it officially switched an

00:06:19,550 --> 00:06:22,880
hour earlier than the summer time so it

00:06:21,200 --> 00:06:25,100
would be lighter in the morning and each

00:06:22,880 --> 00:06:26,480
of those times evolution really really

00:06:25,100 --> 00:06:28,490
did not cope very well with what was

00:06:26,480 --> 00:06:29,870
going on because the fundamental time

00:06:28,490 --> 00:06:31,700
zone files were actually changing

00:06:29,870 --> 00:06:34,550
underneath it and this annoyed me so I

00:06:31,700 --> 00:06:38,480
had to fix it I've also done a lot of

00:06:34,550 --> 00:06:39,040
other evolution fixes like everybody in

00:06:38,480 --> 00:06:41,680
Co

00:06:39,040 --> 00:06:43,870
for drive-by coding I'm interested I'm

00:06:41,680 --> 00:06:45,520
actually mostly just a user of the

00:06:43,870 --> 00:06:47,470
platform so I'm a user of Android I

00:06:45,520 --> 00:06:49,150
don't really code for it I'm a user of

00:06:47,470 --> 00:06:51,100
evolution I don't really code for it but

00:06:49,150 --> 00:06:52,930
if something goes wrong I'm also a

00:06:51,100 --> 00:06:54,940
programmer and that means that if it

00:06:52,930 --> 00:06:57,510
goes wrong and the rough edges annoy me

00:06:54,940 --> 00:06:59,680
enough eventually I will actually

00:06:57,510 --> 00:07:03,430
download the source code pull it apart

00:06:59,680 --> 00:07:05,350
see what's wrong and fix it now for me

00:07:03,430 --> 00:07:07,540
there is a wonderful system called the

00:07:05,350 --> 00:07:11,530
open SUSE build service and I run SUSE

00:07:07,540 --> 00:07:13,360
so all I really do is I add my fixes as

00:07:11,530 --> 00:07:15,490
patches to the RPM and put it upstream

00:07:13,360 --> 00:07:17,260
into the open SUSE build service and it

00:07:15,490 --> 00:07:19,480
will just keep building as I keep

00:07:17,260 --> 00:07:21,460
updating and if eventually my patches

00:07:19,480 --> 00:07:23,260
don't apply it will tell me so this

00:07:21,460 --> 00:07:26,740
means that it actually provides me with

00:07:23,260 --> 00:07:28,840
a fairly low friction way of getting my

00:07:26,740 --> 00:07:31,180
getting my fixes to work for me alone

00:07:28,840 --> 00:07:33,220
but obviously as a community person I do

00:07:31,180 --> 00:07:35,290
see it as my duty also to try and get

00:07:33,220 --> 00:07:37,660
these things upstream and actually of

00:07:35,290 --> 00:07:40,450
all of the patches that I'm listing here

00:07:37,660 --> 00:07:42,460
apart from the TPM enabling ones they're

00:07:40,450 --> 00:07:46,450
all pretty much upstream I do have a

00:07:42,460 --> 00:07:48,670
dirty secret and sip droid the as well

00:07:46,450 --> 00:07:51,130
as codec support I actually also got

00:07:48,670 --> 00:07:52,810
Bluetooth working for sip droid because

00:07:51,130 --> 00:07:54,370
I like using Bluetooth speakers and

00:07:52,810 --> 00:07:56,800
headsets as we'll get on to and I must

00:07:54,370 --> 00:07:58,450
confess I haven't actually even posted

00:07:56,800 --> 00:08:02,680
that patch upstream yet so I'll make a

00:07:58,450 --> 00:08:03,850
note to actually get on and do it so let

00:08:02,680 --> 00:08:06,190
me give you a bit about what this talk

00:08:03,850 --> 00:08:08,710
is not about because I'm talking about

00:08:06,190 --> 00:08:10,420
drive-by coding most of what you hear

00:08:08,710 --> 00:08:12,370
from your community managers is how to

00:08:10,420 --> 00:08:15,070
build long term relationships and with

00:08:12,370 --> 00:08:17,830
communities and the reason they do this

00:08:15,070 --> 00:08:19,990
to you is because it is the best way of

00:08:17,830 --> 00:08:21,940
getting your patches upstream if you're

00:08:19,990 --> 00:08:23,350
a member of the community they are much

00:08:21,940 --> 00:08:25,900
more willing to listen to you than if

00:08:23,350 --> 00:08:27,820
you're not so if you have the time and

00:08:25,900 --> 00:08:30,370
the effort and you're going to be making

00:08:27,820 --> 00:08:32,919
long-term ongoing contributions to the

00:08:30,370 --> 00:08:36,130
subsystem you need to build long-term

00:08:32,919 --> 00:08:37,870
community relations now I say that as

00:08:36,130 --> 00:08:39,460
that should be your number one thing to

00:08:37,870 --> 00:08:41,050
do for most companies because most

00:08:39,460 --> 00:08:43,030
companies are not really doing drive by

00:08:41,050 --> 00:08:45,380
coding usually they actually want to be

00:08:43,030 --> 00:08:47,420
involved in the ecosystem

00:08:45,380 --> 00:08:51,190
but this is a tangent for me because I

00:08:47,420 --> 00:08:54,680
am talking to you about drive-by coding

00:08:51,190 --> 00:08:56,060
so this is actually about finding

00:08:54,680 --> 00:08:58,250
something that's wrong in a specific

00:08:56,060 --> 00:09:00,890
project and fixing or enhancing that one

00:08:58,250 --> 00:09:03,170
thing and although most corporations

00:09:00,890 --> 00:09:04,520
that you work for in the long term do

00:09:03,170 --> 00:09:06,830
want to be members of communities

00:09:04,520 --> 00:09:08,630
there's always that thing on the side

00:09:06,830 --> 00:09:10,760
that you need to work for your release

00:09:08,630 --> 00:09:13,070
that doesn't quite work that you have to

00:09:10,760 --> 00:09:15,350
fix you find that it's a bug in whatever

00:09:13,070 --> 00:09:17,030
it is you fix it and then you need to

00:09:15,350 --> 00:09:19,460
get that fix upstream that makes you a

00:09:17,030 --> 00:09:21,260
drive-by coder it won't be a big part of

00:09:19,460 --> 00:09:24,950
your job but it will be some part of

00:09:21,260 --> 00:09:28,490
your job and I'm actually thinking the

00:09:24,950 --> 00:09:31,340
term drive-by given what's going on in

00:09:28,490 --> 00:09:34,910
the United States is somewhat of a

00:09:31,340 --> 00:09:36,440
loaded term now and possibly I could

00:09:34,910 --> 00:09:38,090
probably get away with it here but I can

00:09:36,440 --> 00:09:40,790
see a time when it would be outlawed by

00:09:38,090 --> 00:09:42,740
the code of conduct so I'm thinking of

00:09:40,790 --> 00:09:47,600
altering this to single-issue committer

00:09:42,740 --> 00:09:49,070
instead of drive-by coder so how I got

00:09:47,600 --> 00:09:52,580
into all of this

00:09:49,070 --> 00:09:55,310
I can't remember I put my bag now so all

00:09:52,580 --> 00:09:57,230
I have is the actual picture of what it

00:09:55,310 --> 00:10:01,310
was I actually have one of these in my

00:09:57,230 --> 00:10:04,790
bag as well that is a ue boom to speaker

00:10:01,310 --> 00:10:06,110
system they're one of the best stereo

00:10:04,790 --> 00:10:08,660
speaker systems that operate over

00:10:06,110 --> 00:10:10,790
bluetooth so the design of this thing is

00:10:08,660 --> 00:10:14,510
that you just attach it by bluetooth to

00:10:10,790 --> 00:10:16,550
your computer it uses a TDP to actually

00:10:14,510 --> 00:10:19,670
do two stereo audio channels with the

00:10:16,550 --> 00:10:21,500
SBC codec and it produces really really

00:10:19,670 --> 00:10:24,170
excellent sound quality it's actually

00:10:21,500 --> 00:10:26,000
brilliant for listening to stuff pretty

00:10:24,170 --> 00:10:27,650
much I only use it for listening to

00:10:26,000 --> 00:10:29,450
stuff where I'm sitting in the bath this

00:10:27,650 --> 00:10:32,600
is waterproof and watching films on

00:10:29,450 --> 00:10:36,080
Netflix most of the time this thing is

00:10:32,600 --> 00:10:37,850
also a headset as well it acts like a it

00:10:36,080 --> 00:10:39,680
actually acts like a hands-free headset

00:10:37,850 --> 00:10:43,520
and so it will actually do a very

00:10:39,680 --> 00:10:46,040
high-quality surround sound speaker and

00:10:43,520 --> 00:10:47,690
microphone for a conference system so

00:10:46,040 --> 00:10:49,430
this thing is actually so powerful that

00:10:47,690 --> 00:10:51,320
I can take a roomful of people who

00:10:49,430 --> 00:10:52,670
basically have never been able to get

00:10:51,320 --> 00:10:54,800
the video conference system and the

00:10:52,670 --> 00:10:56,390
conference room working plug my laptop

00:10:54,800 --> 00:10:58,480
in of the front turn its camera on

00:10:56,390 --> 00:10:59,589
project the screen and then

00:10:58,480 --> 00:11:01,870
this thing in the middle of the table

00:10:59,589 --> 00:11:03,190
and at least 10 to 15 people can just

00:11:01,870 --> 00:11:04,899
sit round this and still have a

00:11:03,190 --> 00:11:07,240
reasonable conference call conversation

00:11:04,899 --> 00:11:08,920
it's actually a very good piece of

00:11:07,240 --> 00:11:10,630
technology for someone who's always on

00:11:08,920 --> 00:11:13,389
the move and who always has technology

00:11:10,630 --> 00:11:18,250
difficulties but there's a dirty secret

00:11:13,389 --> 00:11:20,260
to this thing the speakerphone doesn't

00:11:18,250 --> 00:11:23,260
work with Linux and there's a very

00:11:20,260 --> 00:11:25,329
interesting reason for that the problem

00:11:23,260 --> 00:11:27,339
is that if you look at our current

00:11:25,329 --> 00:11:30,579
Bluetooth system and Linux coupled to

00:11:27,339 --> 00:11:32,230
pulseaudio what we expect is that all

00:11:30,579 --> 00:11:34,480
headsets which are things with a

00:11:32,230 --> 00:11:38,250
microphone and a speaker speak what is

00:11:34,480 --> 00:11:38,250
called the Bluetooth headset protocol

00:11:38,790 --> 00:11:42,940
unfortunately this thing is one of the

00:11:41,380 --> 00:11:46,209
few speakers in the world that doesn't

00:11:42,940 --> 00:11:48,279
do that it actually doesn't have the

00:11:46,209 --> 00:11:50,139
identification end point for the headset

00:11:48,279 --> 00:11:52,089
protocol all it has is the

00:11:50,139 --> 00:11:54,730
identification headset for what's called

00:11:52,089 --> 00:11:56,470
a hands-free protocol now this is not

00:11:54,730 --> 00:11:59,980
uncommon if you go to the automobile

00:11:56,470 --> 00:12:02,500
space all of your cars only have the hfp

00:11:59,980 --> 00:12:04,360
protocol none of them have the HSP

00:12:02,500 --> 00:12:06,279
protocol and the reason for this is

00:12:04,360 --> 00:12:08,769
because the hands-free protocol is

00:12:06,279 --> 00:12:10,329
designed not only to be an audio channel

00:12:08,769 --> 00:12:11,709
but it's also designed for all those

00:12:10,329 --> 00:12:13,540
little buttons you have on your steering

00:12:11,709 --> 00:12:16,709
wheel it's designed for incoming call

00:12:13,540 --> 00:12:19,269
notifications it actually makes your

00:12:16,709 --> 00:12:20,980
Bluetooth headset much more

00:12:19,269 --> 00:12:23,380
sophisticated and actually one of the

00:12:20,980 --> 00:12:25,630
things I use this UE boom - for as well

00:12:23,380 --> 00:12:27,339
since I travel around the world an awful

00:12:25,630 --> 00:12:29,260
lot is that every time you get into a

00:12:27,339 --> 00:12:30,910
rental car you usually spend 10 minutes

00:12:29,260 --> 00:12:33,220
mucking about with the Bluetooth system

00:12:30,910 --> 00:12:35,410
just to plug your damn phone in for me

00:12:33,220 --> 00:12:37,420
what I do is my phone is paired with

00:12:35,410 --> 00:12:39,339
this thing so I just put it in the cup

00:12:37,420 --> 00:12:40,990
holder and turn it on and it will play

00:12:39,339 --> 00:12:42,490
to me my podcasts and if I get an

00:12:40,990 --> 00:12:43,720
incoming call I've actually got a button

00:12:42,490 --> 00:12:45,430
on the top of the phone that I can just

00:12:43,720 --> 00:12:47,079
press and answer it because it's

00:12:45,430 --> 00:12:49,029
surround sound is so good I can actually

00:12:47,079 --> 00:12:50,709
talk in a car environment as well and

00:12:49,029 --> 00:12:53,050
amazingly enough people can actually

00:12:50,709 --> 00:12:54,819
hear me very well so now I've got out of

00:12:53,050 --> 00:12:57,779
all of the plugging my phone into

00:12:54,819 --> 00:13:02,470
strange cars at airports problem as well

00:12:57,779 --> 00:13:04,480
but the issue in Linux is that we just

00:13:02,470 --> 00:13:06,250
don't have a connector and pulseaudio

00:13:04,480 --> 00:13:07,779
for the hands-free protocol the only

00:13:06,250 --> 00:13:08,960
connector we have is actually for the

00:13:07,779 --> 00:13:11,390
headset protocol

00:13:08,960 --> 00:13:13,790
and so what I did a long time ago is

00:13:11,390 --> 00:13:15,860
analyze what the problem was and just

00:13:13,790 --> 00:13:17,630
made it all work inside pulseaudio

00:13:15,860 --> 00:13:21,200
it sounds to be a fairly simple thing

00:13:17,630 --> 00:13:23,300
it's actually not one of the differences

00:13:21,200 --> 00:13:25,339
between the headset protocol and the

00:13:23,300 --> 00:13:27,920
hands-free protocol is the headset

00:13:25,339 --> 00:13:29,690
protocol is just a configuration free

00:13:27,920 --> 00:13:32,270
plug and go protocol that's why we use

00:13:29,690 --> 00:13:34,490
it the headset protocol the hands-free

00:13:32,270 --> 00:13:36,230
protocol is actually a protocol you have

00:13:34,490 --> 00:13:38,540
to configure over what's called the RF

00:13:36,230 --> 00:13:40,640
comm channel the RF comm channel is a

00:13:38,540 --> 00:13:42,290
little modem channel that sits off the

00:13:40,640 --> 00:13:44,600
side on Bluetooth and accepts 80

00:13:42,290 --> 00:13:46,580
commands and you have to send a sequence

00:13:44,600 --> 00:13:49,040
of 80 commands to this thing before it

00:13:46,580 --> 00:13:50,360
will actually start to understand what

00:13:49,040 --> 00:13:53,149
you want to do with it and connect

00:13:50,360 --> 00:13:55,220
correctly to your audio system on the

00:13:53,149 --> 00:13:57,800
other side so one of the things I had to

00:13:55,220 --> 00:14:01,490
do when I actually made this work was to

00:13:57,800 --> 00:14:05,660
put a small RF composite into pulseaudio

00:14:01,490 --> 00:14:07,970
to actually do the negotiation which is

00:14:05,660 --> 00:14:09,890
a somewhat complex negotiation so the

00:14:07,970 --> 00:14:12,350
code is it's about a hundred lines long

00:14:09,890 --> 00:14:14,390
but it is it has bits where you know you

00:14:12,350 --> 00:14:15,950
might be at this version of hfp so I

00:14:14,390 --> 00:14:19,010
have to do this but in this version of

00:14:15,950 --> 00:14:21,620
hfp I have to do that and so on but I

00:14:19,010 --> 00:14:23,600
have it done and it by and large all

00:14:21,620 --> 00:14:26,810
works now in pulseaudio which is why I

00:14:23,600 --> 00:14:28,880
can use my UE boom speakerphone connect

00:14:26,810 --> 00:14:32,209
to my Linux machine as a conference

00:14:28,880 --> 00:14:35,420
system but this isn't what you want to

00:14:32,209 --> 00:14:37,279
know you want to know how I managed to

00:14:35,420 --> 00:14:39,020
get the patches for this thing upstream

00:14:37,279 --> 00:14:42,800
which is what I'll actually talk to you

00:14:39,020 --> 00:14:44,720
about first of all you need to

00:14:42,800 --> 00:14:46,520
understand that when you talk to

00:14:44,720 --> 00:14:49,100
communities not all communities are

00:14:46,520 --> 00:14:51,470
equal in fact they have many different

00:14:49,100 --> 00:14:53,300
traits and characteristics and quirks it

00:14:51,470 --> 00:14:55,279
doesn't just go to whether you'll get

00:14:53,300 --> 00:14:57,260
hub based or whether you like Garrett or

00:14:55,279 --> 00:14:59,329
whether you prefer gitlab or whether

00:14:57,260 --> 00:15:01,550
your mailing list based there's a

00:14:59,329 --> 00:15:03,350
fundamental philosophical difference

00:15:01,550 --> 00:15:05,750
that divides two communities and it's

00:15:03,350 --> 00:15:08,930
called the our code versus your code

00:15:05,750 --> 00:15:12,740
difference and what actually happens is

00:15:08,930 --> 00:15:15,440
that in your code communities the code

00:15:12,740 --> 00:15:18,110
is thought of as belonging to you right

00:15:15,440 --> 00:15:20,460
if you put it up into the project it's

00:15:18,110 --> 00:15:23,820
still thought of as being your code

00:15:20,460 --> 00:15:26,100
and the question your code community

00:15:23,820 --> 00:15:28,290
usually asks is when you give us this

00:15:26,100 --> 00:15:29,520
code are you going to disappear which is

00:15:28,290 --> 00:15:31,590
very difficult one to answer for a

00:15:29,520 --> 00:15:32,850
drive-by coder because the answer is of

00:15:31,590 --> 00:15:34,530
course I'm going to disappear as soon as

00:15:32,850 --> 00:15:38,730
I've got this upstream I'm off on to my

00:15:34,530 --> 00:15:39,840
next project and that answer is somewhat

00:15:38,730 --> 00:15:41,550
of a blocker so the next question

00:15:39,840 --> 00:15:44,190
they're going to ask is can we maintain

00:15:41,550 --> 00:15:46,020
your code is it well written and if they

00:15:44,190 --> 00:15:48,870
can answer that affirmatively your code

00:15:46,020 --> 00:15:50,430
communities are by and large often happy

00:15:48,870 --> 00:15:52,950
to actually just take your code that's

00:15:50,430 --> 00:15:54,960
what happened with the Android code for

00:15:52,950 --> 00:15:56,640
OpenVPN the SIP droid code and

00:15:54,960 --> 00:15:58,740
everything if the code is good enough

00:15:56,640 --> 00:16:00,630
and clean enough and it looks simple

00:15:58,740 --> 00:16:02,250
enough usually they'll just take it even

00:16:00,630 --> 00:16:04,140
if you can't give them a guarantee that

00:16:02,250 --> 00:16:06,330
you will hang around and order to

00:16:04,140 --> 00:16:08,160
maintain it and you can always say

00:16:06,330 --> 00:16:09,450
things like well I won't be working on

00:16:08,160 --> 00:16:10,950
your project but if you have a bug

00:16:09,450 --> 00:16:12,900
report I'll be happy to handle it there

00:16:10,950 --> 00:16:15,480
are mitigation strategies for this

00:16:12,900 --> 00:16:17,520
problem but any your code community it's

00:16:15,480 --> 00:16:20,160
convincing the community that this code

00:16:17,520 --> 00:16:23,160
is not just going to explode bit rot and

00:16:20,160 --> 00:16:25,200
cause damage to the project the other

00:16:23,160 --> 00:16:27,320
type of community is what's called an

00:16:25,200 --> 00:16:30,600
hour code community this community

00:16:27,320 --> 00:16:34,020
thinks of the core product as belonging

00:16:30,600 --> 00:16:35,520
to them and then can either be the

00:16:34,020 --> 00:16:37,140
entire community of which you're not a

00:16:35,520 --> 00:16:39,630
member if you're doing drive-by coding

00:16:37,140 --> 00:16:41,940
that's a fairly nice way to look at an

00:16:39,630 --> 00:16:43,530
hour code community excellent example of

00:16:41,940 --> 00:16:46,320
this would be something like OpenStack

00:16:43,530 --> 00:16:47,910
but then there are also communities that

00:16:46,320 --> 00:16:50,790
maintain sort of technical oversight

00:16:47,910 --> 00:16:52,830
boards or cabal's or you know tiny

00:16:50,790 --> 00:16:55,320
coteries of people sitting in the center

00:16:52,830 --> 00:16:59,040
of this community who also think this is

00:16:55,320 --> 00:17:01,320
our code we are the Guardians and for

00:16:59,040 --> 00:17:03,210
that type of community the main problem

00:17:01,320 --> 00:17:05,010
is proving that you are actually worthy

00:17:03,210 --> 00:17:07,290
in the first place to submit this code

00:17:05,010 --> 00:17:10,050
because they have a sort of mentality

00:17:07,290 --> 00:17:12,270
that you know our project represents the

00:17:10,050 --> 00:17:14,040
pinnacle of perfection any code we

00:17:12,270 --> 00:17:16,560
accept from the outside from someone who

00:17:14,040 --> 00:17:18,600
is not part of our community is if so

00:17:16,560 --> 00:17:21,060
facto bad code and you have a really

00:17:18,600 --> 00:17:24,830
high burden to prove to us that you are

00:17:21,060 --> 00:17:24,830
actually worthy to submit this code

00:17:25,060 --> 00:17:29,770
the best example of an hour code

00:17:27,520 --> 00:17:32,890
community that I've had deal with would

00:17:29,770 --> 00:17:34,840
be something like open SSL it's a CII

00:17:32,890 --> 00:17:38,040
project now but it has a core set of

00:17:34,840 --> 00:17:40,360
committers who spend all of their time

00:17:38,040 --> 00:17:42,760
reviewing other people's patches it's

00:17:40,360 --> 00:17:45,220
certainly not impossible to get your

00:17:42,760 --> 00:17:46,930
code upstream into this community but it

00:17:45,220 --> 00:17:49,900
did they do certainly make it very

00:17:46,930 --> 00:17:51,970
difficult my difficulty was somewhat

00:17:49,900 --> 00:17:55,750
more related to other issues that I'll

00:17:51,970 --> 00:17:57,580
get onto but the basic problem is that

00:17:55,750 --> 00:17:59,770
our code communities are almost always

00:17:57,580 --> 00:18:02,230
unwelcoming to drive-by coders which is

00:17:59,770 --> 00:18:05,320
a pity because most of your bug fixes

00:18:02,230 --> 00:18:08,140
and people who spot issues in code tend

00:18:05,320 --> 00:18:09,970
to be drive-by coders so in theory if

00:18:08,140 --> 00:18:11,920
you're unwelcoming to drive-by coders

00:18:09,970 --> 00:18:13,570
you're inviting more bugs into your

00:18:11,920 --> 00:18:15,070
project because you don't actually let

00:18:13,570 --> 00:18:19,750
people who have an interest in fixing

00:18:15,070 --> 00:18:21,970
them fix the bugs but like I said just

00:18:19,750 --> 00:18:23,770
because you found an hour code community

00:18:21,970 --> 00:18:25,900
doesn't mean it's a lot easier they'll

00:18:23,770 --> 00:18:27,580
still be asking awkward questions like

00:18:25,900 --> 00:18:29,410
their suspicion of where will a

00:18:27,580 --> 00:18:30,910
maintenance burden of this code be so

00:18:29,410 --> 00:18:33,400
you still have to convince them that

00:18:30,910 --> 00:18:35,380
your code can be maintained by the

00:18:33,400 --> 00:18:41,830
people who actually run the project the

00:18:35,380 --> 00:18:44,290
problems are not entirely dissimilar so

00:18:41,830 --> 00:18:47,170
a problem ignored is a problem solved

00:18:44,290 --> 00:18:48,850
though the first pulseaudio patch set do

00:18:47,170 --> 00:18:51,640
this Bluetooth speaker thing was

00:18:48,850 --> 00:18:55,360
published in August 2016 that's over two

00:18:51,640 --> 00:18:58,150
years ago now it's a good mailing list

00:18:55,360 --> 00:19:00,940
so he had a good discussion I did code

00:18:58,150 --> 00:19:02,860
changes based on the discussion and but

00:19:00,940 --> 00:19:04,660
eventually just the thread fizzled out

00:19:02,860 --> 00:19:07,210
the interest got lost

00:19:04,660 --> 00:19:09,070
everybody ran out of steam and nobody

00:19:07,210 --> 00:19:12,190
responded to the last post idea and you

00:19:09,070 --> 00:19:14,380
think okay what do I do now and I would

00:19:12,190 --> 00:19:15,940
imagine almost everybody has been in

00:19:14,380 --> 00:19:18,280
this situation even when you're trying

00:19:15,940 --> 00:19:21,070
to become a member of a community this

00:19:18,280 --> 00:19:26,290
is by and large the response to the

00:19:21,070 --> 00:19:28,360
first patch you ever submit and so what

00:19:26,290 --> 00:19:29,800
actually happened is I I disappear I

00:19:28,360 --> 00:19:33,460
sort of thought okay I'll wait and see

00:19:29,800 --> 00:19:34,810
what happens and what actually happened

00:19:33,460 --> 00:19:36,820
is I got a mention in the pulseaudio

00:19:34,810 --> 00:19:38,290
wiki you can actually see it there where

00:19:36,820 --> 00:19:38,710
they say they'd really love to be able

00:19:38,290 --> 00:19:41,289
to do

00:19:38,710 --> 00:19:44,919
use this h hf p stuff without a phono so

00:19:41,289 --> 00:19:49,270
a phoner is a it's actually a modem

00:19:44,919 --> 00:19:51,760
emulator for a bluetooth system and

00:19:49,270 --> 00:19:53,799
there is an incredibly complex and

00:19:51,760 --> 00:19:56,169
difficult way of attaching pulseaudio to

00:19:53,799 --> 00:19:59,350
o phone oh and such that it will

00:19:56,169 --> 00:20:01,059
actually plug into an hf p headset as

00:19:59,350 --> 00:20:02,679
far as i can tell only one person in the

00:20:01,059 --> 00:20:04,750
world has actually ever got it working

00:20:02,679 --> 00:20:06,010
and demonstrated it and it's definitely

00:20:04,750 --> 00:20:08,409
not something where you fire up

00:20:06,010 --> 00:20:09,120
bluetooth turn on your headset and away

00:20:08,409 --> 00:20:12,039
you go

00:20:09,120 --> 00:20:13,539
but what they said was getting it to

00:20:12,039 --> 00:20:15,700
work without a phoner would be nice I've

00:20:13,539 --> 00:20:17,890
submitted patches for that the patches

00:20:15,700 --> 00:20:19,330
need some work help with finishing them

00:20:17,890 --> 00:20:21,760
would be appreciated and I looked at

00:20:19,330 --> 00:20:23,470
this and thought but I interacted with

00:20:21,760 --> 00:20:26,049
the mailing list I addressed all of your

00:20:23,470 --> 00:20:29,620
points what is it that you want me to do

00:20:26,049 --> 00:20:30,940
that would finish these patches and so

00:20:29,620 --> 00:20:33,279
this is where we get into a situation

00:20:30,940 --> 00:20:35,529
where there's a mismatch in

00:20:33,279 --> 00:20:37,390
communication somehow and it's a mailing

00:20:35,529 --> 00:20:39,010
list I go back over the archives I

00:20:37,390 --> 00:20:40,480
couldn't really find the mismatch but

00:20:39,010 --> 00:20:43,480
there is definitely a mismatch there

00:20:40,480 --> 00:20:45,909
between their expectations and what I've

00:20:43,480 --> 00:20:47,919
done and trying to bridge the gap

00:20:45,909 --> 00:20:51,610
involves actually trying to establish

00:20:47,919 --> 00:20:54,309
what this mismatch is now mmm as far as

00:20:51,610 --> 00:20:56,380
I can tell the mismatch is not entirely

00:20:54,309 --> 00:20:59,140
technical it's also to do with the fact

00:20:56,380 --> 00:21:01,450
that somebody in the community is very

00:20:59,140 --> 00:21:04,059
wedded to the way a phono does it so

00:21:01,450 --> 00:21:07,120
they're reluctant to actually accept a

00:21:04,059 --> 00:21:09,370
patch which would basically kick o phono

00:21:07,120 --> 00:21:11,260
out of pulseaudio and it wouldn't do it

00:21:09,370 --> 00:21:13,120
immediately so I was very careful to be

00:21:11,260 --> 00:21:17,080
you know nice and listening to their

00:21:13,120 --> 00:21:18,909
community so the patch itself coexists

00:21:17,080 --> 00:21:19,480
with all of the FO no code that sits in

00:21:18,909 --> 00:21:21,370
pulseaudio

00:21:19,480 --> 00:21:25,419
and I gave them a nice switch and switch

00:21:21,370 --> 00:21:27,610
can be done at pulseaudio startup time

00:21:25,419 --> 00:21:30,370
or it can be switched dynamically in PA

00:21:27,610 --> 00:21:32,830
vu control but there was an argument

00:21:30,370 --> 00:21:35,140
over what the default should be should

00:21:32,830 --> 00:21:37,270
the default be the easy code or the hard

00:21:35,140 --> 00:21:39,100
code and you can guess I wanted the easy

00:21:37,270 --> 00:21:41,289
code and some other people wanted the

00:21:39,100 --> 00:21:43,779
hard code I think the default is

00:21:41,289 --> 00:21:47,380
basically the point at which this is

00:21:43,779 --> 00:21:48,850
what needs to be finished ok so a year

00:21:47,380 --> 00:21:50,710
later a year in a bit later

00:21:48,850 --> 00:21:52,450
I did another repost on 20th September

00:21:50,710 --> 00:21:54,640
00:21:52,450 --> 00:21:56,590
the reason I did this repost is not

00:21:54,640 --> 00:21:59,560
because I'm such a wonderful community

00:21:56,590 --> 00:22:01,630
person it's because as I told you I used

00:21:59,560 --> 00:22:03,190
the open SUSE build service so it just

00:22:01,630 --> 00:22:05,020
goes along and pulls down the latest

00:22:03,190 --> 00:22:06,940
pulseaudio applies my patches and

00:22:05,020 --> 00:22:09,730
rebuilt it for me and there was a point

00:22:06,940 --> 00:22:11,350
in August where this broke something had

00:22:09,730 --> 00:22:13,330
changed in the pulseaudio code base that

00:22:11,350 --> 00:22:15,250
was conflicting with my patches so I

00:22:13,330 --> 00:22:17,740
actually had to go back pull down the

00:22:15,250 --> 00:22:19,450
code base and rebase my patches to work

00:22:17,740 --> 00:22:22,180
for this work out what the changes were

00:22:19,450 --> 00:22:23,950
and they were actually some it wasn't it

00:22:22,180 --> 00:22:26,170
wasn't a simple rebase it was actually

00:22:23,950 --> 00:22:28,150
something that actually I had to redo

00:22:26,170 --> 00:22:29,830
coding for and in the course of redoing

00:22:28,150 --> 00:22:31,600
the coding I realized I had a couple of

00:22:29,830 --> 00:22:33,520
mistakes in my patches they hadn't even

00:22:31,600 --> 00:22:35,440
spotted so I fixed that the mistakes

00:22:33,520 --> 00:22:37,540
were actually in the RF comm negotiation

00:22:35,440 --> 00:22:39,640
so presumably no one had really tried

00:22:37,540 --> 00:22:41,770
this it turned out that the negotiation

00:22:39,640 --> 00:22:44,890
was very highly tuned to my UE boom

00:22:41,770 --> 00:22:46,390
device and in 2017 Ike acquired a second

00:22:44,890 --> 00:22:48,820
Bluetooth device didn't work with these

00:22:46,390 --> 00:22:50,410
patches and investigating why not

00:22:48,820 --> 00:22:52,300
allowed me to work out what was wrong

00:22:50,410 --> 00:22:54,880
with the negotiation so I actually fixed

00:22:52,300 --> 00:22:56,650
the negotiation as I did the repost but

00:22:54,880 --> 00:22:58,300
the repost was basically because my

00:22:56,650 --> 00:23:00,460
build service broke and I had to fix it

00:22:58,300 --> 00:23:03,640
so I fixed it and then reposted the

00:23:00,460 --> 00:23:05,500
patches upstream like I said I fixed up

00:23:03,640 --> 00:23:06,660
the code polished up the code fix bugs

00:23:05,500 --> 00:23:09,250
in the original protocol negotiation

00:23:06,660 --> 00:23:10,930
told them all about it and the objection

00:23:09,250 --> 00:23:13,270
is still the ofoh know people don't like

00:23:10,930 --> 00:23:15,160
it this time we actually did have an

00:23:13,270 --> 00:23:18,850
explicit argument about what the default

00:23:15,160 --> 00:23:22,390
switch should be and again everything

00:23:18,850 --> 00:23:26,020
fizzled out because the leader of the

00:23:22,390 --> 00:23:28,570
community I think understands that to be

00:23:26,020 --> 00:23:30,550
useful it would be useful to have this

00:23:28,570 --> 00:23:32,200
code as the default but the possibility

00:23:30,550 --> 00:23:33,910
the the ofoh know people really don't

00:23:32,200 --> 00:23:35,740
want that but if we put it as their

00:23:33,910 --> 00:23:37,630
default then it becomes a configuration

00:23:35,740 --> 00:23:40,300
burden on the distributions to get

00:23:37,630 --> 00:23:42,880
everything working again and there's

00:23:40,300 --> 00:23:45,700
another underlying issue which is that

00:23:42,880 --> 00:23:48,430
if everything works simply with my

00:23:45,700 --> 00:23:50,290
patches why would anyone ever need Ophir

00:23:48,430 --> 00:23:52,690
new so if you're a member of the

00:23:50,290 --> 00:23:55,450
community the like xofo know you can see

00:23:52,690 --> 00:23:57,610
a straight line path from accepting

00:23:55,450 --> 00:23:59,830
these patches to your cherished

00:23:57,610 --> 00:24:02,500
subsystem being declared obsolete by the

00:23:59,830 --> 00:24:04,970
maintainer of pulseaudio this isn't the

00:24:02,500 --> 00:24:07,220
technical problem this is really

00:24:04,970 --> 00:24:09,080
a deep-seated community personality

00:24:07,220 --> 00:24:13,220
problem these are the most difficult

00:24:09,080 --> 00:24:17,450
problems to overcome but of course the

00:24:13,220 --> 00:24:19,789
result is deadlock I the way I would

00:24:17,450 --> 00:24:21,710
have broken this deadlock if I could was

00:24:19,789 --> 00:24:23,150
if we actually had a significant

00:24:21,710 --> 00:24:26,000
community of people who had the same

00:24:23,150 --> 00:24:28,640
problem as I did the issue is that

00:24:26,000 --> 00:24:30,620
almost every Bluetooth device even the

00:24:28,640 --> 00:24:34,070
Bluetooth four and five devices that are

00:24:30,620 --> 00:24:36,919
delivered today have both the headset

00:24:34,070 --> 00:24:39,470
protocol and the hands-free protocol so

00:24:36,919 --> 00:24:43,669
almost every Bluetooth device delivered

00:24:39,470 --> 00:24:45,909
today bar my one speaker phone works out

00:24:43,669 --> 00:24:48,230
of the box with Linux so there is no

00:24:45,909 --> 00:24:51,650
significant community pressure to solve

00:24:48,230 --> 00:24:53,360
this problem and perhaps one day the hfp

00:24:51,650 --> 00:24:55,580
protocol will take over and there will

00:24:53,360 --> 00:24:57,919
be significant community pressure but

00:24:55,580 --> 00:24:59,630
without a community to back me and say

00:24:57,919 --> 00:25:01,190
you know I've got a device and I have

00:24:59,630 --> 00:25:03,559
this problem and I have a device and I

00:25:01,190 --> 00:25:05,539
have this problem we're stuck in the in

00:25:03,559 --> 00:25:08,000
the rut that it's basically only me with

00:25:05,539 --> 00:25:09,770
the problem and by and large I use my

00:25:08,000 --> 00:25:11,419
build service so it's solved for me so I

00:25:09,770 --> 00:25:14,750
have some pressure to push but not a

00:25:11,419 --> 00:25:17,030
huge amount the converse of this is that

00:25:14,750 --> 00:25:19,669
if you are trying to get patches

00:25:17,030 --> 00:25:21,919
upstream and you're trying to do it as a

00:25:19,669 --> 00:25:24,049
drive-by coder one of the best ways of

00:25:21,919 --> 00:25:26,539
doing it is actually to find other

00:25:24,049 --> 00:25:28,669
people who have the same or a similar to

00:25:26,539 --> 00:25:30,110
problem with you form a community with

00:25:28,669 --> 00:25:32,000
them and get them to support your

00:25:30,110 --> 00:25:34,669
patches on the way up it's actually a

00:25:32,000 --> 00:25:36,590
wonderful way of convincing the

00:25:34,669 --> 00:25:38,090
community that it's more than just one

00:25:36,590 --> 00:25:40,730
annoying individual who wants these

00:25:38,090 --> 00:25:42,890
patches to be placed upstream and to be

00:25:40,730 --> 00:25:44,840
honest when I work to parallels this was

00:25:42,890 --> 00:25:47,059
largely the way that we got most of our

00:25:44,840 --> 00:25:48,830
patches upstream even in Linux I can't

00:25:47,059 --> 00:25:50,360
just say I'm a Linux maintainer take my

00:25:48,830 --> 00:25:52,700
patches we have to make a technical

00:25:50,360 --> 00:25:55,400
argument for it so all of the container

00:25:52,700 --> 00:25:56,780
patches that parallels did we part of

00:25:55,400 --> 00:25:58,159
the reason for the agreement at the

00:25:56,780 --> 00:26:00,140
kernel summit there'll be a single

00:25:58,159 --> 00:26:02,120
container system is that now we have a

00:26:00,140 --> 00:26:04,490
ready-made audience of several big

00:26:02,120 --> 00:26:06,770
companies like Google Facebook and so on

00:26:04,490 --> 00:26:08,900
who are very interested also in helping

00:26:06,770 --> 00:26:10,400
get container patches upstream so if we

00:26:08,900 --> 00:26:12,679
have difficulty on the mailing list or

00:26:10,400 --> 00:26:14,120
we get non-technical objections we can

00:26:12,679 --> 00:26:16,190
rely of the community to actually

00:26:14,120 --> 00:26:17,200
support these patches and that often

00:26:16,190 --> 00:26:20,950
helps and actually get

00:26:17,200 --> 00:26:23,260
webstream but the result in the

00:26:20,950 --> 00:26:26,350
pulseaudio case was deadlock and I

00:26:23,260 --> 00:26:28,419
suspect there's actually it looks like

00:26:26,350 --> 00:26:29,950
they don't like the code but I suspect

00:26:28,419 --> 00:26:31,690
there is a really deep sea to this you

00:26:29,950 --> 00:26:35,649
hear that I just don't have the tools to

00:26:31,690 --> 00:26:38,200
solve okay let's move on to a different

00:26:35,649 --> 00:26:41,230
type of community OpenSSL oh by the way

00:26:38,200 --> 00:26:43,330
parcel do is very much your code type of

00:26:41,230 --> 00:26:44,769
community so it's one of the easy done

00:26:43,330 --> 00:26:48,039
one of the easier communities to get

00:26:44,769 --> 00:26:50,380
stuff up in but I did the pulseaudio

00:26:48,039 --> 00:26:52,809
example just to show that even your code

00:26:50,380 --> 00:26:56,139
communities are not perfect for actually

00:26:52,809 --> 00:26:58,450
getting stuff upstream in so this is my

00:26:56,139 --> 00:27:00,220
one my failure pulseaudio x' patches are

00:26:58,450 --> 00:27:03,460
still out of tree even if I do have a

00:27:00,220 --> 00:27:05,559
bug Ziller a wiki mansion on them next

00:27:03,460 --> 00:27:09,010
community is open ssl which is very much

00:27:05,559 --> 00:27:11,620
an hour code community the initial

00:27:09,010 --> 00:27:14,380
problem as i saw it with open ssl is

00:27:11,620 --> 00:27:17,409
they have an api bug so what i'm trying

00:27:14,380 --> 00:27:20,470
to do an open ssl is to enable what are

00:27:17,409 --> 00:27:22,539
call to TPM key files so if you've ever

00:27:20,470 --> 00:27:24,639
used open ssl for creating x.509

00:27:22,539 --> 00:27:26,409
certificates you know that when you

00:27:24,639 --> 00:27:29,139
create a certificate in the key you get

00:27:26,409 --> 00:27:32,590
two files back there usually PEM encoded

00:27:29,139 --> 00:27:34,029
which is type of base64 encoding of sn1

00:27:32,590 --> 00:27:35,769
you don't need to know any of these

00:27:34,029 --> 00:27:37,870
technical terms all you know is need to

00:27:35,769 --> 00:27:39,580
know is you get two files one represents

00:27:37,870 --> 00:27:41,409
your certificate the other represents

00:27:39,580 --> 00:27:43,510
the private key for your certificate the

00:27:41,409 --> 00:27:46,149
private key is often password protected

00:27:43,510 --> 00:27:48,039
but once you type in the password its

00:27:46,149 --> 00:27:50,409
decrypted the private key is out in the

00:27:48,039 --> 00:27:52,330
open there is a way of using the TPM

00:27:50,409 --> 00:27:55,870
that sits on all of your laptops to

00:27:52,330 --> 00:27:58,539
actually transform from a raw private

00:27:55,870 --> 00:28:00,880
key to a TPM form of a private key that

00:27:58,539 --> 00:28:03,070
then cannot be abstracted from your

00:28:00,880 --> 00:28:05,679
system the TPM form can only be

00:28:03,070 --> 00:28:07,600
understood by the TPM itself all crypto

00:28:05,679 --> 00:28:09,519
operations now go through the TPM you

00:28:07,600 --> 00:28:11,620
just feed the private key into the TPM

00:28:09,519 --> 00:28:12,909
and tell it I'm this person make me a

00:28:11,620 --> 00:28:14,950
signature and it will make you a

00:28:12,909 --> 00:28:16,690
signature and the reason this is useful

00:28:14,950 --> 00:28:19,389
is because once the key has been

00:28:16,690 --> 00:28:21,610
transformed into the private form of a

00:28:19,389 --> 00:28:23,649
TPM on your laptop it is useless to

00:28:21,610 --> 00:28:26,110
anybody else in the world unless they

00:28:23,649 --> 00:28:28,330
possess your specific TPM they cannot

00:28:26,110 --> 00:28:30,499
use it so it's a very good mechanism for

00:28:28,330 --> 00:28:32,999
actually making your

00:28:30,499 --> 00:28:34,979
unique to you the only way that somebody

00:28:32,999 --> 00:28:36,690
can actually have impersonate your

00:28:34,979 --> 00:28:40,049
identity is by logging onto your machine

00:28:36,690 --> 00:28:41,729
using your TPM and using the key file in

00:28:40,049 --> 00:28:43,049
your authorization which just like the

00:28:41,729 --> 00:28:45,539
passphrase you used to have for

00:28:43,049 --> 00:28:47,669
decrypting files so it's actually almost

00:28:45,539 --> 00:28:49,649
equivalent to a two-factor security

00:28:47,669 --> 00:28:53,700
measure for your keys which is why I use

00:28:49,649 --> 00:28:55,529
it the mission I was on for open SSL was

00:28:53,700 --> 00:28:57,359
actually just to try on TPM enable it

00:28:55,529 --> 00:28:59,639
the way you TPM enable it is through

00:28:57,359 --> 00:29:02,369
what's called engine code engine code is

00:28:59,639 --> 00:29:05,429
really what open SSL calls plugins so

00:29:02,369 --> 00:29:09,119
it's I just wrote the plug-in but there

00:29:05,429 --> 00:29:12,559
is a problem in the open SSL API in that

00:29:09,119 --> 00:29:15,389
the API you used to load the key file is

00:29:12,559 --> 00:29:18,059
specific to the key file so there is an

00:29:15,389 --> 00:29:20,369
API for loading a PEM key there is an

00:29:18,059 --> 00:29:22,969
API for loading a der key and there is a

00:29:20,369 --> 00:29:26,129
separate API for loading an engine key

00:29:22,969 --> 00:29:29,009
sounds very well but when you write code

00:29:26,129 --> 00:29:31,649
using open SSL you often forget there

00:29:29,009 --> 00:29:33,929
are two different types of keys even der

00:29:31,649 --> 00:29:36,719
and Pam usually you've only used one of

00:29:33,929 --> 00:29:38,519
these API s this is why if you create a

00:29:36,719 --> 00:29:41,009
dirt key and try and feed it into Open

00:29:38,519 --> 00:29:42,779
VPN it will error out you have to have a

00:29:41,009 --> 00:29:45,749
PEM key because they only used one of

00:29:42,779 --> 00:29:48,719
those those api's in the Open VPN code

00:29:45,749 --> 00:29:50,339
so I looked at this and I said but we

00:29:48,719 --> 00:29:52,709
can always tell based on the file

00:29:50,339 --> 00:29:54,570
headers what is actually going on why

00:29:52,709 --> 00:29:56,989
don't we just round robin through each

00:29:54,570 --> 00:29:59,969
of these api's and just have a single

00:29:56,989 --> 00:30:02,070
load file API that tries each one

00:29:59,969 --> 00:30:04,379
sequentially and if one succeeds we call

00:30:02,070 --> 00:30:07,169
it this success I thought you know this

00:30:04,379 --> 00:30:09,029
this is actually a nice you know simple

00:30:07,169 --> 00:30:13,019
solution that will fix the world for

00:30:09,029 --> 00:30:21,119
open SSL it's going to be brilliant well

00:30:13,019 --> 00:30:25,079
so I took this proposal for the open SSL

00:30:21,119 --> 00:30:27,599
list and basically this is an our code

00:30:25,079 --> 00:30:30,719
community that is very proud of their

00:30:27,599 --> 00:30:33,209
code at the time I took it to them they

00:30:30,719 --> 00:30:35,309
were basically just coming back out from

00:30:33,209 --> 00:30:38,519
being beaten up by the CII for having

00:30:35,309 --> 00:30:40,349
almost no testing and exposing the world

00:30:38,519 --> 00:30:41,130
infrastructure to a lot of bugs because

00:30:40,349 --> 00:30:43,620
they were problem

00:30:41,130 --> 00:30:47,100
with OpenSSL so they were very defensive

00:30:43,620 --> 00:30:48,990
about their code and defensive people do

00:30:47,100 --> 00:30:49,350
not take kindly to you telling them that

00:30:48,990 --> 00:30:51,270
their eye

00:30:49,350 --> 00:30:55,590
API has been wrong from the get-go and

00:30:51,270 --> 00:30:58,980
it should be fixed like this so the

00:30:55,590 --> 00:31:02,070
problem I had is that I can't get this

00:30:58,980 --> 00:31:03,660
API change up to upstream without

00:31:02,070 --> 00:31:06,180
upstream admitting that there was a

00:31:03,660 --> 00:31:08,760
mistake to commit my change would be to

00:31:06,180 --> 00:31:11,820
admit that the mistake existed so we're

00:31:08,760 --> 00:31:13,440
all backed into a corner where they for

00:31:11,820 --> 00:31:16,110
just for the sake of their coding honor

00:31:13,440 --> 00:31:17,670
cannot commit my change and there's

00:31:16,110 --> 00:31:20,190
nothing I can do to get it upstream

00:31:17,670 --> 00:31:21,780
although we went round around for a

00:31:20,190 --> 00:31:23,250
while with the arguments getting more

00:31:21,780 --> 00:31:25,290
and more acrimonious until you get the

00:31:23,250 --> 00:31:27,030
ultimate debt death knell which is you

00:31:25,290 --> 00:31:29,670
know one of our trusted committees has a

00:31:27,030 --> 00:31:31,200
speculative API but isn't upstream yet

00:31:29,670 --> 00:31:34,050
but which you could use this is the

00:31:31,200 --> 00:31:35,790
invitation to take somebody's weird

00:31:34,050 --> 00:31:38,010
design document that's written on the

00:31:35,790 --> 00:31:40,170
back of a napkin and if you implement

00:31:38,010 --> 00:31:41,940
all of this you will be worthy to get

00:31:40,170 --> 00:31:44,340
your code up stream into our community

00:31:41,940 --> 00:31:46,680
and all of this for me was actually a

00:31:44,340 --> 00:31:48,870
huge thing it's like it's now in open

00:31:46,680 --> 00:31:50,310
SSL as the store API but if you look at

00:31:48,870 --> 00:31:54,120
how big that is this would have been a

00:31:50,310 --> 00:31:55,950
massive amount of code so it's I have a

00:31:54,120 --> 00:31:57,840
fairly I have a simple fix for what I

00:31:55,950 --> 00:31:59,550
think is a simple problem and now they

00:31:57,840 --> 00:32:01,440
offer back to me is basically devoted

00:31:59,550 --> 00:32:03,720
we're of your life to working on our

00:32:01,440 --> 00:32:05,070
code and then the problem will be solved

00:32:03,720 --> 00:32:07,920
and everybody will be happy and it's

00:32:05,070 --> 00:32:15,420
sort of like well ok thanks guys but no

00:32:07,920 --> 00:32:17,670
thanks so basically open SSL is still a

00:32:15,420 --> 00:32:20,730
problem what I actually did was I looked

00:32:17,670 --> 00:32:22,650
at from that point I know that I'm never

00:32:20,730 --> 00:32:25,110
going to get anything useful out of the

00:32:22,650 --> 00:32:27,900
open SSL community so what I did is

00:32:25,110 --> 00:32:30,240
actually just move one level down if all

00:32:27,900 --> 00:32:32,910
of the code that's using open SSL is

00:32:30,240 --> 00:32:34,620
usually using only one of these api's go

00:32:32,910 --> 00:32:38,730
to the projects I'm interested in which

00:32:34,620 --> 00:32:41,670
for me was Open VPN an open SSH because

00:32:38,730 --> 00:32:44,820
I wanted my VPN keys and my SSH keys to

00:32:41,670 --> 00:32:46,740
be a TPM resident and just persuade both

00:32:44,820 --> 00:32:49,050
of those communities to use all of the

00:32:46,740 --> 00:32:51,120
api's so that any key form works for

00:32:49,050 --> 00:32:52,950
them so that's the actual route that I'm

00:32:51,120 --> 00:32:54,380
currently embarking on for a crypto sub

00:32:52,950 --> 00:32:57,690
system enabling

00:32:54,380 --> 00:32:59,040
however there's another more wonderful

00:32:57,690 --> 00:33:02,040
thing that can happen to you as a

00:32:59,040 --> 00:33:03,570
drive-by coder which is when an adjacent

00:33:02,040 --> 00:33:05,880
community looks at what you're doing and

00:33:03,570 --> 00:33:08,070
drive-by and comes to you and says could

00:33:05,880 --> 00:33:10,770
you do this for us so it happened that

00:33:08,070 --> 00:33:13,230
Colonel recipes last year when a

00:33:10,770 --> 00:33:16,230
asked me how we could actually use the

00:33:13,230 --> 00:33:18,060
TPM for enabling GPG and I'd actually

00:33:16,230 --> 00:33:20,150
thought about as a problem but hadn't

00:33:18,060 --> 00:33:23,190
really done anything about it because

00:33:20,150 --> 00:33:25,140
TPM code has to be crafted specially for

00:33:23,190 --> 00:33:27,360
the crypto system you use and I looked

00:33:25,140 --> 00:33:29,370
at open SSL and figured that most crypto

00:33:27,360 --> 00:33:32,820
systems in the world do tend to use open

00:33:29,370 --> 00:33:34,320
SSL a few years ago new TLS GPG is the

00:33:32,820 --> 00:33:36,870
one exception because it has its own

00:33:34,320 --> 00:33:39,150
crypto system called Lib G crypt which

00:33:36,870 --> 00:33:41,160
pretty much isn't used by anybody else

00:33:39,150 --> 00:33:42,990
and I hadn't even got around to looking

00:33:41,160 --> 00:33:45,480
and seeing what it would take to a TPM

00:33:42,990 --> 00:33:47,910
enable Lib G grip but Werner asked me to

00:33:45,480 --> 00:33:50,130
do this at the conference and the result

00:33:47,910 --> 00:33:54,660
was actually an agreement to code a TPM

00:33:50,130 --> 00:33:57,540
module for GP g2 I showed this prototype

00:33:54,660 --> 00:33:59,910
in person that FOSDEM this year so we've

00:33:57,540 --> 00:34:02,580
gone from the time line for versus

00:33:59,910 --> 00:34:05,160
kernel recipes is in September it will

00:34:02,580 --> 00:34:08,880
actually be next week in Paris so that's

00:34:05,160 --> 00:34:11,280
just one year later so we got the

00:34:08,880 --> 00:34:13,679
agreement in September I was only

00:34:11,280 --> 00:34:16,110
showing the prototype in for stem which

00:34:13,679 --> 00:34:21,090
is in February which is really about

00:34:16,110 --> 00:34:22,980
five months from doing it coding the

00:34:21,090 --> 00:34:24,450
result of verses that were not actually

00:34:22,980 --> 00:34:27,060
rather like the prototype and how it had

00:34:24,450 --> 00:34:30,060
been shown so I actually have a TPM work

00:34:27,060 --> 00:34:31,980
branch in his tree that I can send

00:34:30,060 --> 00:34:33,480
patches for although right at the moment

00:34:31,980 --> 00:34:35,970
he hasn't been terribly responsive to

00:34:33,480 --> 00:34:39,000
the patches but I he's a very overloaded

00:34:35,970 --> 00:34:40,919
type of guy it's not upstream yet but

00:34:39,000 --> 00:34:45,470
having a branch in somebody else's tree

00:34:40,919 --> 00:34:50,580
is a definite promise of upstream soon

00:34:45,470 --> 00:34:52,710
so this is one of the results that is a

00:34:50,580 --> 00:34:55,830
strategy for getting your stuff upstream

00:34:52,710 --> 00:34:58,200
so if you can convince the community

00:34:55,830 --> 00:35:00,420
that they really like what you're doing

00:34:58,200 --> 00:35:02,760
and it will really be a feature that

00:35:00,420 --> 00:35:05,310
actually enhances their code they can

00:35:02,760 --> 00:35:06,840
actually get on board with having you do

00:35:05,310 --> 00:35:08,940
whatever you want to try and enable them

00:35:06,840 --> 00:35:11,340
to do this that's what happened in GPG

00:35:08,940 --> 00:35:13,500
they had also thought in their own way

00:35:11,340 --> 00:35:16,140
that it's really stupid that we have a

00:35:13,500 --> 00:35:18,900
key handling system and every laptop on

00:35:16,140 --> 00:35:22,380
earth oil bar Mac Apple Mac laptops has

00:35:18,900 --> 00:35:24,510
a TPM that can actually afford us a vast

00:35:22,380 --> 00:35:26,670
increase in terms of key security and we

00:35:24,510 --> 00:35:28,890
just can't use it so when this weird guy

00:35:26,670 --> 00:35:31,110
comes along with this TPM enabling quest

00:35:28,890 --> 00:35:33,630
you look at it and go well could you do

00:35:31,110 --> 00:35:35,910
that for us and the result is that I

00:35:33,630 --> 00:35:37,440
mean in fact they had to ask me I see

00:35:35,910 --> 00:35:39,180
him if I had gone to them they'd have

00:35:37,440 --> 00:35:40,620
pretty much bitten my hand off but they

00:35:39,180 --> 00:35:43,500
had to come to me and ask me to do it

00:35:40,620 --> 00:35:45,750
but once they did I was happy they were

00:35:43,500 --> 00:35:48,450
happy we actually have an agreement that

00:35:45,750 --> 00:35:50,580
actually allows rapid and useful forward

00:35:48,450 --> 00:35:52,680
progress and doing all of this this is

00:35:50,580 --> 00:35:54,030
one of the best ways of actually getting

00:35:52,680 --> 00:35:55,680
your code upstream convincing the

00:35:54,030 --> 00:35:58,110
community that they really really need

00:35:55,680 --> 00:36:00,120
it you can't do it all the time but it's

00:35:58,110 --> 00:36:05,340
actually a very good strategy to employ

00:36:00,120 --> 00:36:07,770
if you can do it of course there are my

00:36:05,340 --> 00:36:09,750
kinds of communities I've done quite a

00:36:07,770 --> 00:36:11,940
lot of drive-by coding for the Linux

00:36:09,750 --> 00:36:13,410
kernel when I say drive-by coding the

00:36:11,940 --> 00:36:16,020
kernel is not a single monolithic

00:36:13,410 --> 00:36:18,780
project it's effectively a vulcanized

00:36:16,020 --> 00:36:20,640
set of maintained and driven projects

00:36:18,780 --> 00:36:23,010
each of which has its own separate rules

00:36:20,640 --> 00:36:25,200
so just because I know how scuzzy

00:36:23,010 --> 00:36:26,820
patches go upstream because I'm the

00:36:25,200 --> 00:36:28,470
gatekeeper for them doesn't mean that

00:36:26,820 --> 00:36:30,690
exactly the same process is applied by

00:36:28,470 --> 00:36:32,490
any other subsystem because it's not so

00:36:30,690 --> 00:36:34,020
in order to apply patches for another

00:36:32,490 --> 00:36:36,810
subsystem I still have to learn a

00:36:34,020 --> 00:36:38,490
different set of coding rules so in the

00:36:36,810 --> 00:36:41,850
kernel I've actually done an awful lot

00:36:38,490 --> 00:36:43,560
of TPM work including a chunk of the in

00:36:41,850 --> 00:36:45,690
kernel resource manager which is a very

00:36:43,560 --> 00:36:48,630
important component in the kernel for

00:36:45,690 --> 00:36:50,580
actually adopting TPM 2.0 which is just

00:36:48,630 --> 00:36:53,520
percolating through our ecosystem now

00:36:50,580 --> 00:36:54,690
and this for me was definitely not plain

00:36:53,520 --> 00:36:58,050
sailing

00:36:54,690 --> 00:37:01,020
the TPM subsystem has what I would think

00:36:58,050 --> 00:37:02,850
of as incredibly weird rules like one

00:37:01,020 --> 00:37:04,410
variable declaration per line

00:37:02,850 --> 00:37:06,150
well I'd sort of it's annoying to get

00:37:04,410 --> 00:37:08,580
your patches kickback going you do not

00:37:06,150 --> 00:37:11,310
do end a comma B comma C you have to do

00:37:08,580 --> 00:37:14,190
in a semicolon int B semicolon NC

00:37:11,310 --> 00:37:16,440
semicolon all it is is just it's one

00:37:14,190 --> 00:37:16,940
maintainer sort of foible about how they

00:37:16,440 --> 00:37:21,980
want the

00:37:16,940 --> 00:37:24,890
- look this is a very controversial

00:37:21,980 --> 00:37:26,420
topic and I bring it up just because I

00:37:24,890 --> 00:37:28,550
can give you something titter about this

00:37:26,420 --> 00:37:30,319
actually is not a fault at the TPM

00:37:28,550 --> 00:37:32,900
subsystem so don't lay this at the door

00:37:30,319 --> 00:37:35,030
of the TPM maintainer but it is a fault

00:37:32,900 --> 00:37:37,970
of the network subsystem if you want to

00:37:35,030 --> 00:37:40,069
get a code a piece of a patch up into

00:37:37,970 --> 00:37:41,630
the networking subsystem you have to

00:37:40,069 --> 00:37:44,240
understand what reverse christmas-tree

00:37:41,630 --> 00:37:46,310
is what reverse christmas-tree means is

00:37:44,240 --> 00:37:48,829
that all of your include files have to

00:37:46,310 --> 00:37:50,359
be ordered in Reverse by the length with

00:37:48,829 --> 00:37:52,130
the longest one at the top and the

00:37:50,359 --> 00:37:54,829
shortest one at the bottom so it looks

00:37:52,130 --> 00:37:57,470
like an upside-down Christmas tree when

00:37:54,829 --> 00:37:59,300
I first saw this coding recommendation I

00:37:57,470 --> 00:38:01,400
actually thought it was a joke I did

00:37:59,300 --> 00:38:03,380
check to see if it was April the 1st but

00:38:01,400 --> 00:38:05,300
apparently it's a real foible of the

00:38:03,380 --> 00:38:07,490
maintainer you want to get your code

00:38:05,300 --> 00:38:09,859
upstream in the network subsystem you

00:38:07,490 --> 00:38:11,569
have to order the includes in reverse

00:38:09,859 --> 00:38:13,099
Christmas tree order there isn't no way

00:38:11,569 --> 00:38:14,420
around this if you don't do it you're

00:38:13,099 --> 00:38:19,700
gonna get your patch kickback with a

00:38:14,420 --> 00:38:22,130
note telling you to do it for me and the

00:38:19,700 --> 00:38:24,079
colonel prior reputation helps an awful

00:38:22,130 --> 00:38:26,630
lot because I'm a colonel maintainer I

00:38:24,079 --> 00:38:28,940
it is easier for me to go to other

00:38:26,630 --> 00:38:31,310
colonel communities and say please will

00:38:28,940 --> 00:38:34,130
you get this code upstream I believe I

00:38:31,310 --> 00:38:36,380
actually do have one patch in the

00:38:34,130 --> 00:38:38,030
network subsystem that violates reverse

00:38:36,380 --> 00:38:39,619
Christmas tree and I think Dave Miller

00:38:38,030 --> 00:38:42,200
reminds me of this every time I see him

00:38:39,619 --> 00:38:43,550
for a beer and the only reason he did

00:38:42,200 --> 00:38:46,609
that is because he likes me

00:38:43,550 --> 00:38:48,500
so prior reputation can help a lot but

00:38:46,609 --> 00:38:50,660
if you don't have a prior reputation you

00:38:48,500 --> 00:38:55,700
do have to respect the norms of each of

00:38:50,660 --> 00:38:58,250
these communities prior reputation only

00:38:55,700 --> 00:38:59,720
matters if the community respects it so

00:38:58,250 --> 00:39:02,599
you also have to be slightly careful

00:38:59,720 --> 00:39:04,160
which communities you join in the early

00:39:02,599 --> 00:39:05,990
days of OpenStack I had a lot of

00:39:04,160 --> 00:39:09,440
difficulty with the OpenStack community

00:39:05,990 --> 00:39:11,869
because a CTO of parallels my job in

00:39:09,440 --> 00:39:13,400
those days was to actually get us gold

00:39:11,869 --> 00:39:15,800
membership in OpenStack which means

00:39:13,400 --> 00:39:18,319
being nice to OpenStack and OpenStack

00:39:15,800 --> 00:39:20,119
was on a bender from several of its

00:39:18,319 --> 00:39:21,980
members to prove that it was a better

00:39:20,119 --> 00:39:25,069
community in the kernel and the way I

00:39:21,980 --> 00:39:27,640
wanted to prove this was by evolving

00:39:25,069 --> 00:39:29,050
coding mechanisms that

00:39:27,640 --> 00:39:31,120
he looked at the kernel and thought we

00:39:29,050 --> 00:39:33,670
can do better so they were all slightly

00:39:31,120 --> 00:39:36,010
different so I had this suspicion of

00:39:33,670 --> 00:39:37,930
well you know we don't really like the

00:39:36,010 --> 00:39:39,610
kernel community should we be accepting

00:39:37,930 --> 00:39:41,530
a code from a kernel community or should

00:39:39,610 --> 00:39:44,560
we even have a kernel community guy

00:39:41,530 --> 00:39:46,450
actually coming to us and helping us

00:39:44,560 --> 00:39:47,980
with advice because it was basically we

00:39:46,450 --> 00:39:50,560
were looking for a gold membership and a

00:39:47,980 --> 00:39:52,420
board seat and so I wouldn't even be

00:39:50,560 --> 00:39:54,540
contributing and technical capacity I'd

00:39:52,420 --> 00:39:56,740
be contributing an advisory capacity

00:39:54,540 --> 00:39:58,750
fortunately for me it turned out there

00:39:56,740 --> 00:40:01,990
was an su that I could align OpenStack

00:39:58,750 --> 00:40:05,230
up on a line with OpenStack and that was

00:40:01,990 --> 00:40:07,060
this thing called the DCO the developer

00:40:05,230 --> 00:40:09,520
certificate of origin which OpenStack

00:40:07,060 --> 00:40:11,290
that there was a definite movement and

00:40:09,520 --> 00:40:13,030
OpenStack to try and get rid of what's

00:40:11,290 --> 00:40:15,100
called the ICL a the individual

00:40:13,030 --> 00:40:16,690
contributor License Agreement because it

00:40:15,100 --> 00:40:18,880
was seen as a huge barrier to

00:40:16,690 --> 00:40:20,770
contribution particularly drive-by

00:40:18,880 --> 00:40:22,870
contribution so OpenStack was trying to

00:40:20,770 --> 00:40:25,000
make itself or more welcoming community

00:40:22,870 --> 00:40:27,370
to derive by contributors and so the way

00:40:25,000 --> 00:40:29,440
I actually got into OpenStack was by

00:40:27,370 --> 00:40:31,570
saying well the kernel originated the

00:40:29,440 --> 00:40:33,340
DCO but it wasn't all smooth sailing for

00:40:31,570 --> 00:40:35,800
us let me have lots of meetings with you

00:40:33,340 --> 00:40:37,570
about how we did it and I can give you

00:40:35,800 --> 00:40:40,180
our experiences and you can craft your

00:40:37,570 --> 00:40:41,950
own mechanism for OpenStack which will

00:40:40,180 --> 00:40:44,830
allow you to adopt the DCO and the

00:40:41,950 --> 00:40:48,220
result is that actually OpenStack now is

00:40:44,830 --> 00:40:51,040
a DCO community and there was a lot more

00:40:48,220 --> 00:40:53,140
help that I could give to OpenStack

00:40:51,040 --> 00:40:54,610
behind the scenes that isn't actually

00:40:53,140 --> 00:40:57,580
public so one of the problems that

00:40:54,610 --> 00:40:59,170
OpenStack had I'm sure I'm allowed to

00:40:57,580 --> 00:41:01,720
say I believe it's it's actually in the

00:40:59,170 --> 00:41:04,600
public record is that the council who

00:41:01,720 --> 00:41:07,120
acted for the OpenStack board also acted

00:41:04,600 --> 00:41:09,250
for Apache and it was his legal opinion

00:41:07,120 --> 00:41:11,830
that the DCO was not a valid

00:41:09,250 --> 00:41:14,500
contribution agreement under the apache

00:41:11,830 --> 00:41:16,000
license so the board of OpenStack was

00:41:14,500 --> 00:41:18,670
getting legal advice that said they

00:41:16,000 --> 00:41:21,070
could not use the DCO and somehow we had

00:41:18,670 --> 00:41:23,110
to come and counteract that and one of

00:41:21,070 --> 00:41:24,790
the things that I picked up in Linux as

00:41:23,110 --> 00:41:27,010
I was actually chair of the technical

00:41:24,790 --> 00:41:29,350
advisory board for a long time it gave

00:41:27,010 --> 00:41:31,720
me a huge scope to interact with lawyers

00:41:29,350 --> 00:41:33,580
every year I still go to one legal

00:41:31,720 --> 00:41:35,500
conference to discuss some of the open

00:41:33,580 --> 00:41:37,570
source legal problems but it meant that

00:41:35,500 --> 00:41:38,990
my legal experience was actually very

00:41:37,570 --> 00:41:41,390
helpful

00:41:38,990 --> 00:41:43,670
it's not just my legal experience it's

00:41:41,390 --> 00:41:45,110
also my experience of how do you get a

00:41:43,670 --> 00:41:47,030
lawyer to do something when they

00:41:45,110 --> 00:41:48,860
definitely don't want to do it it's not

00:41:47,030 --> 00:41:50,420
like a dog you can't just put a put a

00:41:48,860 --> 00:41:52,040
lead on them and drag them across the

00:41:50,420 --> 00:41:54,680
threshold you actually have to

00:41:52,040 --> 00:41:57,380
manipulate them into either wanting to

00:41:54,680 --> 00:41:59,750
do what you want or you have to line

00:41:57,380 --> 00:42:01,310
everybody else up against them and move

00:41:59,750 --> 00:42:03,170
the discussion on to being a business

00:42:01,310 --> 00:42:05,570
discussion where everybody looks and

00:42:03,170 --> 00:42:07,910
says this is not an absolute there is

00:42:05,570 --> 00:42:09,650
risk on one side and there is reward on

00:42:07,910 --> 00:42:11,600
the other prove to us that the risk

00:42:09,650 --> 00:42:14,000
outraised the reward that was actually

00:42:11,600 --> 00:42:15,830
how we did it an openstack although it

00:42:14,000 --> 00:42:18,410
was my grad cliff's legal opinion

00:42:15,830 --> 00:42:20,540
ultimately he didn't prevail over the

00:42:18,410 --> 00:42:22,400
community argument this is significant

00:42:20,540 --> 00:42:24,830
barrier to contribution so instead of

00:42:22,400 --> 00:42:27,800
phrasing it as a legal issue yes or no

00:42:24,830 --> 00:42:30,050
we phrased it as a legal risk versus

00:42:27,800 --> 00:42:32,090
reward and the risk looks fairly minimal

00:42:30,050 --> 00:42:33,950
since there by the time it was adopted

00:42:32,090 --> 00:42:36,230
by OpenStack there are a large number of

00:42:33,950 --> 00:42:38,960
patchy communities also adopting the DCO

00:42:36,230 --> 00:42:40,610
so Marc's legal opinion looked like it

00:42:38,960 --> 00:42:43,369
was being ignored by more than just the

00:42:40,610 --> 00:42:44,690
OpenStack people and that helped tip the

00:42:43,369 --> 00:42:47,830
balance at the board level and

00:42:44,690 --> 00:42:50,720
eventually OpenStack did adopt the DCO

00:42:47,830 --> 00:42:54,619
so if I leave ten minutes for questions

00:42:50,720 --> 00:42:56,990
we can get on to the conclusions there's

00:42:54,619 --> 00:42:58,580
a definite reason why community managers

00:42:56,990 --> 00:43:00,380
want you to join communities even though

00:42:58,580 --> 00:43:02,510
I haven't talked about it at all in this

00:43:00,380 --> 00:43:05,690
talk because it would have been twice as

00:43:02,510 --> 00:43:07,910
long it is the best and the easiest way

00:43:05,690 --> 00:43:09,770
of getting code upstream if you want

00:43:07,910 --> 00:43:11,600
need a long-term relationship with the

00:43:09,770 --> 00:43:13,609
community you think you will have a long

00:43:11,600 --> 00:43:15,950
series of patches and long can only be

00:43:13,609 --> 00:43:18,320
sort of long in terms of life cycle for

00:43:15,950 --> 00:43:20,840
a lot of your short lived devices that

00:43:18,320 --> 00:43:22,640
can be six months to a year then you

00:43:20,840 --> 00:43:25,250
should invest the time in joining the

00:43:22,640 --> 00:43:26,930
community that is the surest way of

00:43:25,250 --> 00:43:29,150
actually getting your code upstream

00:43:26,930 --> 00:43:31,010
whether it's an hour code community or

00:43:29,150 --> 00:43:33,290
your code community if you're a part of

00:43:31,010 --> 00:43:34,640
it they both like you for the one it

00:43:33,290 --> 00:43:36,859
will assure them that you're going to be

00:43:34,640 --> 00:43:38,480
around to help maintain the code and for

00:43:36,859 --> 00:43:39,650
the other you're one of them and so

00:43:38,480 --> 00:43:41,170
you're part of the trusted commit a

00:43:39,650 --> 00:43:43,280
circle

00:43:41,170 --> 00:43:46,940
definitely makes you much more likely to

00:43:43,280 --> 00:43:49,550
get your code upstream and if like I do

00:43:46,940 --> 00:43:52,130
you do drive-by coding you do have to be

00:43:49,550 --> 00:43:54,050
prepared for failures remember it's not

00:43:52,130 --> 00:43:55,910
a sure thing if I can't do it

00:43:54,050 --> 00:43:57,620
there's lots of other people who should

00:43:55,910 --> 00:44:00,620
have no shame and not being able to do

00:43:57,620 --> 00:44:03,590
it it is very very difficult there are a

00:44:00,620 --> 00:44:06,680
few strategies as have I said that you

00:44:03,590 --> 00:44:07,970
can use to do it like have a body of

00:44:06,680 --> 00:44:10,130
people who are willing to support your

00:44:07,970 --> 00:44:12,110
code if there's a need for it convince

00:44:10,130 --> 00:44:14,120
the maintainer or the community that

00:44:12,110 --> 00:44:15,500
actually your code will enhance their

00:44:14,120 --> 00:44:17,690
code base if you get them to like your

00:44:15,500 --> 00:44:19,880
code it's even better so there are many

00:44:17,690 --> 00:44:22,400
many ways of actually doing this the

00:44:19,880 --> 00:44:24,830
number one way the gold way is actually

00:44:22,400 --> 00:44:26,810
personal interaction if you can actually

00:44:24,830 --> 00:44:29,030
meet this community face-to-face and

00:44:26,810 --> 00:44:31,610
talk to them they will regard you much

00:44:29,030 --> 00:44:33,800
better as a person with whom they've

00:44:31,610 --> 00:44:35,960
actually had social contact than an

00:44:33,800 --> 00:44:37,880
endpoint on email address who could

00:44:35,960 --> 00:44:40,460
possibly be a dog in disguise try and

00:44:37,880 --> 00:44:42,440
control us so personal interaction as a

00:44:40,460 --> 00:44:46,220
drive-by coder is actually incredibly

00:44:42,440 --> 00:44:48,110
important as witness to that the good

00:44:46,220 --> 00:44:49,700
interactions that GPG did not really

00:44:48,110 --> 00:44:52,280
start happening for me until I actually

00:44:49,700 --> 00:44:54,800
met Verna at Cornel recipes and

00:44:52,280 --> 00:44:56,510
talk to him face to face so we've had a

00:44:54,800 --> 00:44:58,490
couple of more personal interactions

00:44:56,510 --> 00:45:00,380
since then but the personal interaction

00:44:58,490 --> 00:45:04,970
is really what sealed the deal for him

00:45:00,380 --> 00:45:07,010
and for me in that and also the hardest

00:45:04,970 --> 00:45:08,420
thing can be working out why they

00:45:07,010 --> 00:45:11,630
weren't apply your code so this is the

00:45:08,420 --> 00:45:15,050
pulseaudio case you if there is a

00:45:11,630 --> 00:45:17,300
deep-seated sort of fear of your code

00:45:15,050 --> 00:45:19,160
somewhere they can always throw up

00:45:17,300 --> 00:45:20,870
arbitrary technical issues arbitrary

00:45:19,160 --> 00:45:22,910
technical issues for engineers are very

00:45:20,870 --> 00:45:24,740
very easy to manufacture you can get a

00:45:22,910 --> 00:45:26,120
whole sequence of these that just come

00:45:24,740 --> 00:45:28,100
along one after the other and you can

00:45:26,120 --> 00:45:30,650
address them and okay so they'll find

00:45:28,100 --> 00:45:32,330
another one but the problem is not all

00:45:30,650 --> 00:45:34,220
of these issues that are coming back to

00:45:32,330 --> 00:45:36,140
you the problem is the deep-seated

00:45:34,220 --> 00:45:37,790
problem that's sitting way way beneath

00:45:36,140 --> 00:45:39,980
all of this that's generating all these

00:45:37,790 --> 00:45:41,660
issues and the hardest thing can

00:45:39,980 --> 00:45:44,330
actually be working out politically what

00:45:41,660 --> 00:45:47,300
this problem is and like I said although

00:45:44,330 --> 00:45:49,940
I think I know what it is in a phono I

00:45:47,300 --> 00:45:51,440
don't know how to allay it so even once

00:45:49,940 --> 00:45:52,610
you've worked out what the problem is

00:45:51,440 --> 00:45:54,710
that doesn't mean it's

00:45:52,610 --> 00:45:56,510
mountable sometimes these problems

00:45:54,710 --> 00:45:58,940
definitely can be insurmountable

00:45:56,510 --> 00:46:00,500
if accepting your code means that a

00:45:58,940 --> 00:46:02,420
significant chunk of the community is

00:46:00,500 --> 00:46:04,130
going to lose their code it really is a

00:46:02,420 --> 00:46:06,170
difficult thing to do the only way I'm

00:46:04,130 --> 00:46:08,120
going to be able to surmount this is if

00:46:06,170 --> 00:46:10,340
I can persuade the Bluetooth consortium

00:46:08,120 --> 00:46:12,800
to deprecate HSP and we have to move to

00:46:10,340 --> 00:46:14,930
hfp that very quickly would probably

00:46:12,800 --> 00:46:18,320
give me the leverage I needed but absent

00:46:14,930 --> 00:46:20,570
that it's just not going to happen so

00:46:18,320 --> 00:46:22,610
with that I think we have nine minutes

00:46:20,570 --> 00:46:26,660
left if you like this presentation it's

00:46:22,610 --> 00:46:29,030
all done in JavaScript html5 and css3

00:46:26,660 --> 00:46:31,400
which of course unfortunately makes me a

00:46:29,030 --> 00:46:33,680
web developer so in addition to publicly

00:46:31,400 --> 00:46:35,120
confessing to be a Java programmer I now

00:46:33,680 --> 00:46:36,980
publicly confess to being a web

00:46:35,120 --> 00:46:38,870
developer and also a kernel developer

00:46:36,980 --> 00:46:43,670
and with that I'll say thank you and

00:46:38,870 --> 00:46:47,030
call for questions if there are any yep

00:46:43,670 --> 00:46:49,840
I can repeat the question back if we

00:46:47,030 --> 00:46:49,840
don't have a microphone

00:46:57,200 --> 00:47:01,740
so the question is if you're an upstream

00:46:59,820 --> 00:47:03,660
community is there stuff you can do to

00:47:01,740 --> 00:47:05,520
make life easier for drive by commute

00:47:03,660 --> 00:47:07,890
committers that don't actually cost you

00:47:05,520 --> 00:47:09,870
a lot and the answer is yes the first

00:47:07,890 --> 00:47:12,180
thing you can do is actually just be

00:47:09,870 --> 00:47:14,150
welcoming right this is what all of this

00:47:12,180 --> 00:47:16,500
code of conduct debate is actually about

00:47:14,150 --> 00:47:18,270
rejecting somebody's code is actually a

00:47:16,500 --> 00:47:20,790
personal rejection for an engineer so

00:47:18,270 --> 00:47:24,140
you try not to do that you should look

00:47:20,790 --> 00:47:26,670
at every patch from the point of view of

00:47:24,140 --> 00:47:28,140
ideally the patch always comes with a

00:47:26,670 --> 00:47:29,850
cast-iron justification of why the

00:47:28,140 --> 00:47:31,320
committer wants to do it and so you

00:47:29,850 --> 00:47:33,180
should be able to evaluate this

00:47:31,320 --> 00:47:34,470
justification in terms of your project

00:47:33,180 --> 00:47:36,420
and if there's a mismatch and

00:47:34,470 --> 00:47:38,250
justifications you that's where you

00:47:36,420 --> 00:47:40,500
start having the discussion over you

00:47:38,250 --> 00:47:42,300
know can we firm it up can we make it do

00:47:40,500 --> 00:47:44,340
more stuff could we make it more useful

00:47:42,300 --> 00:47:47,130
to the community if you like the

00:47:44,340 --> 00:47:48,870
justification the next step is it's just

00:47:47,130 --> 00:47:50,760
about do you like the code or not have

00:47:48,870 --> 00:47:53,250
they conform to your coding style and

00:47:50,760 --> 00:47:55,140
once you've got past the we've got the

00:47:53,250 --> 00:47:57,810
justification and there should be no

00:47:55,140 --> 00:47:59,880
blocker other than coding problems for

00:47:57,810 --> 00:48:01,800
the patch going upstream and you should

00:47:59,880 --> 00:48:04,020
actually communicate that to the person

00:48:01,800 --> 00:48:05,550
who contributed it hey yeah thanks for

00:48:04,020 --> 00:48:07,530
the patch we think this is a valid

00:48:05,550 --> 00:48:10,380
problem the solution will actually help

00:48:07,530 --> 00:48:11,730
us here are several problems that the

00:48:10,380 --> 00:48:13,170
static code checker threw up in your

00:48:11,730 --> 00:48:17,820
code do you think you might be able to

00:48:13,170 --> 00:48:20,910
address something like that now it

00:48:17,820 --> 00:48:22,020
doesn't always work like that that could

00:48:20,910 --> 00:48:24,270
have happened in the pulseaudio

00:48:22,020 --> 00:48:26,220
community but there was that there's a

00:48:24,270 --> 00:48:28,080
community of people there that see that

00:48:26,220 --> 00:48:31,290
accepting this code means that their

00:48:28,080 --> 00:48:33,810
code will disappear so some sometimes

00:48:31,290 --> 00:48:35,940
there can be fundamental balance issues

00:48:33,810 --> 00:48:39,060
that the project itself has to sort out

00:48:35,940 --> 00:48:42,510
and this is where you need a good strong

00:48:39,060 --> 00:48:45,540
maintainer to step in and say okay so I

00:48:42,510 --> 00:48:47,430
think this is the issue I do believe

00:48:45,540 --> 00:48:49,230
that if we accepted this code at some

00:48:47,430 --> 00:48:51,840
point this this other piece of code

00:48:49,230 --> 00:48:53,400
would become obsolete is everybody happy

00:48:51,840 --> 00:48:55,350
with that get the issue out onto the

00:48:53,400 --> 00:48:58,440
table and actually have a full and frank

00:48:55,350 --> 00:49:00,120
discussion of it avoiding the issue is a

00:48:58,440 --> 00:49:02,010
characteristic of a lot of maintainer

00:49:00,120 --> 00:49:03,360
zhh because it avoids argument so this

00:49:02,010 --> 00:49:04,420
is probably why the pulseaudio

00:49:03,360 --> 00:49:06,190
maintainer is doing

00:49:04,420 --> 00:49:08,410
this he doesn't want to Massa fight in

00:49:06,190 --> 00:49:09,940
his community over whether we should

00:49:08,410 --> 00:49:11,410
support it this way or the other way

00:49:09,940 --> 00:49:14,110
he'd ideally like to support it both

00:49:11,410 --> 00:49:15,580
ways but the guys who want to support it

00:49:14,110 --> 00:49:16,990
the other way see that supporting it

00:49:15,580 --> 00:49:19,240
both ways eventually won't work

00:49:16,990 --> 00:49:21,700
eventually the code that is very complex

00:49:19,240 --> 00:49:24,520
will die and so they're unwilling to do

00:49:21,700 --> 00:49:27,700
that so another thing that you as a

00:49:24,520 --> 00:49:29,050
maintainer of or if you're a group

00:49:27,700 --> 00:49:31,030
maintainer ship then the group of

00:49:29,050 --> 00:49:33,700
maintainer x' have to do is look for

00:49:31,030 --> 00:49:36,280
these issues in your codebase try to see

00:49:33,700 --> 00:49:38,020
if certain of the generated arguments

00:49:36,280 --> 00:49:40,090
are not arguments about the code at all

00:49:38,020 --> 00:49:42,070
their arguments about fundamental

00:49:40,090 --> 00:49:46,840
directions of where the project is going

00:49:42,070 --> 00:49:49,090
and a lot of times if an outside

00:49:46,840 --> 00:49:51,400
contributor comes with a piece of code

00:49:49,090 --> 00:49:52,960
that will actually alter the direction

00:49:51,400 --> 00:49:55,660
of your project they can get attacked

00:49:52,960 --> 00:49:57,370
from all sides because most people are

00:49:55,660 --> 00:49:58,900
conservative at heart they really don't

00:49:57,370 --> 00:50:00,460
like going in a different direction they

00:49:58,900 --> 00:50:02,680
don't like the uncertainty this will

00:50:00,460 --> 00:50:04,600
bring and that will generate an awful

00:50:02,680 --> 00:50:06,700
lot of pseudo rejections for you know

00:50:04,600 --> 00:50:08,590
this semicolons in the wrong place this

00:50:06,700 --> 00:50:10,540
whitespace is wrong I don't like the

00:50:08,590 --> 00:50:13,630
name of that variable and so on but

00:50:10,540 --> 00:50:15,100
they're all substitutes for the real

00:50:13,630 --> 00:50:16,660
issue which is the direction of the

00:50:15,100 --> 00:50:18,760
project would be changed by this patch

00:50:16,660 --> 00:50:20,890
so as maintain as you have to look out

00:50:18,760 --> 00:50:22,930
for that and see if you can actually do

00:50:20,890 --> 00:50:25,120
a better job of recognizing it and

00:50:22,930 --> 00:50:27,430
having the honest debate of does this

00:50:25,120 --> 00:50:29,250
project would it benefit this project to

00:50:27,430 --> 00:50:31,630
change course on this term this way

00:50:29,250 --> 00:50:33,640
does that help it's not a complete

00:50:31,630 --> 00:50:40,930
answer but it's sort of the best I can

00:50:33,640 --> 00:50:42,670
come up with okay any other questions no

00:50:40,930 --> 00:50:44,650
if not then I'll say thank you very much

00:50:42,670 --> 00:50:48,210
and it was a pleasure talking to you

00:50:44,650 --> 00:50:48,520
[Applause]

00:50:48,210 --> 00:50:53,530
you

00:50:48,520 --> 00:50:53,530

YouTube URL: https://www.youtube.com/watch?v=ee3OIm6cQrU


