Title: YVR18-114:Auto-deployment of Ceph cluster with Rook on top of Kubernetes
Publication date: 2019-05-09
Playlist: Linaro Connect Vancouver 2018
Description: 
	Rook is an open source project hosted by CNCF to orchestrate the distributed storage system such as Ceph with cloud native primitives. In this presentation, Dennis will first introduce the overall design idea of the Rook and how it works, after that he will talk about how to deploy a Ceph cluster automatically with help of Rook and take use of it, including the volume provisioning and attachment, against a real workload on AArch64 server. At last, some new features(eg. CSI support), challenges and issues of this project will also be discussed.
Captions: 
	00:00:02,070 --> 00:00:07,080
[Music]

00:00:08,099 --> 00:00:16,540
hello without good afternoon my name is

00:00:13,000 --> 00:00:21,630
Dennis and I work for and the folks on

00:00:16,540 --> 00:00:26,770
the enterprise system software ecosystem

00:00:21,630 --> 00:00:31,349
this is my trace topic of development of

00:00:26,770 --> 00:00:35,770
self class with rock on top of cognates

00:00:31,349 --> 00:00:40,750
maybe you know the rookies open source

00:00:35,770 --> 00:00:43,829
projects hosted by seeing CF to Oak

00:00:40,750 --> 00:00:51,190
Street the distributed storage system

00:00:43,829 --> 00:00:53,730
with cognates primitives so in this

00:00:51,190 --> 00:00:57,670
present teaching I will give our

00:00:53,730 --> 00:01:07,060
instruction of the root projects and how

00:00:57,670 --> 00:01:10,810
to deploy the self cast with the rook so

00:01:07,060 --> 00:01:14,260
this is at least agenda firstly we will

00:01:10,810 --> 00:01:19,000
give overview of design of the root

00:01:14,260 --> 00:01:21,540
projects and how it works and what the

00:01:19,000 --> 00:01:21,540
joke is

00:01:21,630 --> 00:01:28,659
after that we will talk about the three

00:01:24,820 --> 00:01:35,220
key elements of the root projects namely

00:01:28,659 --> 00:01:39,450
the operate agent and its color pods

00:01:35,220 --> 00:01:44,619
after that we will talk about how to use

00:01:39,450 --> 00:01:51,670
work to deploy self caster on top of

00:01:44,619 --> 00:01:56,049
cognates automatically additionally when

00:01:51,670 --> 00:02:01,780
we deploy self cluster with the rook and

00:01:56,049 --> 00:02:05,290
we will give a introduction of the Flex

00:02:01,780 --> 00:02:08,019
volume driver because if we have a basic

00:02:05,290 --> 00:02:11,340
understanding of the Flex volume driver

00:02:08,019 --> 00:02:14,040
where we are how we all have

00:02:11,340 --> 00:02:17,250
better understanding of the the

00:02:14,040 --> 00:02:22,640
following content for example the volume

00:02:17,250 --> 00:02:28,890
of preachings such as storage storage

00:02:22,640 --> 00:02:31,830
provisioning and consuming at last I

00:02:28,890 --> 00:02:36,630
will give us the series update of the

00:02:31,830 --> 00:02:40,640
root projects on our platform so this is

00:02:36,630 --> 00:02:44,850
the overview of the design of project

00:02:40,640 --> 00:02:49,170
you know the group project is top of the

00:02:44,850 --> 00:02:54,500
Copeland's cost so first we need to set

00:02:49,170 --> 00:02:59,000
up our coolant cluster and you know in

00:02:54,500 --> 00:03:02,340
in this diagram we can see that our set

00:02:59,000 --> 00:03:10,820
contains Kosta is a composed component

00:03:02,340 --> 00:03:10,820
of several notes notes zero notes 1.2

00:03:14,840 --> 00:03:24,930
for the z naught 0 it it has no any

00:03:22,080 --> 00:03:29,580
difference with other notes from a

00:03:24,930 --> 00:03:33,000
perspective of qubits so we are assuming

00:03:29,580 --> 00:03:37,170
to this note to see what's the magic of

00:03:33,000 --> 00:03:41,400
the root projects in we inside the node

00:03:37,170 --> 00:03:46,980
0 we can see that there are corporate

00:03:41,400 --> 00:03:51,180
look operate and look agent port

00:03:46,980 --> 00:03:54,780
actually there is a root discover pause

00:03:51,180 --> 00:03:57,560
by the way didn't we - shoo shoo in this

00:03:54,780 --> 00:04:01,950
note but you can see that this color

00:03:57,560 --> 00:04:08,459
parts in other a nose for example and

00:04:01,950 --> 00:04:11,340
not not one Q or other no notes the

00:04:08,459 --> 00:04:18,410
leuco operator is a creature by the

00:04:11,340 --> 00:04:22,749
companies usually it's not it's a

00:04:18,410 --> 00:04:27,219
mechanism of cognates north of the

00:04:22,749 --> 00:04:32,469
and the the responsibility of the rook

00:04:27,219 --> 00:04:38,879
operator to spawn the other Luke

00:04:32,469 --> 00:04:38,879
pause such as agent and discover ports

00:04:45,180 --> 00:04:56,190
for the if we zoom into the not zero we

00:04:51,120 --> 00:05:03,210
can see that the rogue agent look agent

00:04:56,190 --> 00:05:08,400
and the Luca and couplets there is a

00:05:03,210 --> 00:05:15,570
flex volume plugging in flex in the

00:05:08,400 --> 00:05:21,180
Cobras also we have a Luke flex volume

00:05:15,570 --> 00:05:27,690
driver from the rook wronging in the in

00:05:21,180 --> 00:05:30,600
the rook agent ports so this is a out of

00:05:27,690 --> 00:05:33,780
tree facts volume magnesium out of tree

00:05:30,600 --> 00:05:37,800
mean that the subpart a star Evander

00:05:33,780 --> 00:05:42,630
candy Webber they are own plugging and

00:05:37,800 --> 00:05:51,240
don't depend on the communists code base

00:05:42,630 --> 00:05:56,340
so the the fraks volume driver connected

00:05:51,240 --> 00:06:00,690
with flexball employee of the Cooper's

00:05:56,340 --> 00:06:10,560
through the UDS es means UNIX domain

00:06:00,690 --> 00:06:12,810
socket so Juke naruki is based on the

00:06:10,560 --> 00:06:16,980
fraks volume it

00:06:12,810 --> 00:06:21,650
it's a colonist father say assad yet

00:06:16,980 --> 00:06:21,650
CSI the cantina our story the interface

00:06:22,910 --> 00:06:30,840
for the safecast the ruggedness Yorktown

00:06:27,720 --> 00:06:33,900
Virginia the data plane of the self

00:06:30,840 --> 00:06:40,200
caster it's just a change the control

00:06:33,900 --> 00:06:44,670
playing of the staff so this is a this

00:06:40,200 --> 00:06:47,660
is a operate operator parts operated

00:06:44,670 --> 00:06:52,800
part is as simple a simple container

00:06:47,660 --> 00:06:55,740
functioning as cast the level the

00:06:52,800 --> 00:06:56,810
responsibility of the Opera operated

00:06:55,740 --> 00:07:00,040
pause it

00:06:56,810 --> 00:07:03,610
put bootstrap and modular storage acosta

00:07:00,040 --> 00:07:09,740
bootstrap means it either were spawned

00:07:03,610 --> 00:07:14,620
agent and discover part monitor mean

00:07:09,740 --> 00:07:24,380
that it will monitor watching the

00:07:14,620 --> 00:07:28,010
results change in the cluster we can use

00:07:24,380 --> 00:07:33,140
the command line such as the cubic inch

00:07:28,010 --> 00:07:38,570
or create operator to create the rook up

00:07:33,140 --> 00:07:43,750
repute part so that means the local

00:07:38,570 --> 00:07:46,340
opera pewdie is created by the by the

00:07:43,750 --> 00:07:51,860
kumys kumys Magneto

00:07:46,340 --> 00:07:54,770
it's not the Lucas and Luca operate

00:07:51,860 --> 00:07:58,910
pewdie is creditors will through the

00:07:54,770 --> 00:08:03,490
cookies deployment deployment object

00:07:58,910 --> 00:08:08,630
with a rabbit replica set the the

00:08:03,490 --> 00:08:10,640
replica said to one that means now he is

00:08:08,630 --> 00:08:15,080
the only one

00:08:10,640 --> 00:08:21,979
Luke operate parts running in in the

00:08:15,080 --> 00:08:28,660
cluster the argument was to set set up

00:08:21,979 --> 00:08:33,400
the Opera UD container is safe operate

00:08:28,660 --> 00:08:36,800
which you check the the slash use local

00:08:33,400 --> 00:08:39,050
being slash Brooke serve operated

00:08:36,800 --> 00:08:43,480
command line inside of the container

00:08:39,050 --> 00:08:50,110
this is a mag Needham of SPF 30 cobra

00:08:43,480 --> 00:08:53,530
projects so the start operator will be

00:08:50,110 --> 00:08:59,089
invoked to put a strap the agent and

00:08:53,530 --> 00:09:04,130
discover pod in form of the demon state

00:08:59,089 --> 00:09:07,680
demon said I mean that the rook agent

00:09:04,130 --> 00:09:11,189
under discover pause were wrong

00:09:07,680 --> 00:09:19,529
in wronging in ivory nodes in the

00:09:11,189 --> 00:09:22,100
cluster so this is a operator part this

00:09:19,529 --> 00:09:28,230
side we eschew the workflow of the

00:09:22,100 --> 00:09:28,679
operator part we can see that from the

00:09:28,230 --> 00:09:33,029
start

00:09:28,679 --> 00:09:39,569
operate start operating it in a well

00:09:33,029 --> 00:09:43,319
create created the agent demon set so

00:09:39,569 --> 00:09:46,470
for the average every node in the

00:09:43,319 --> 00:09:53,610
cluster the creator agent demon said

00:09:46,470 --> 00:09:59,459
will spawn the agent the agent pause in

00:09:53,610 --> 00:10:04,189
every notes just like this and the main

00:09:59,459 --> 00:10:09,119
workflow of the operator continued

00:10:04,189 --> 00:10:14,550
continued to fought like this now it it

00:10:09,119 --> 00:10:19,589
creates the discover a demon set just

00:10:14,550 --> 00:10:23,389
like the agent in the world create his

00:10:19,589 --> 00:10:30,050
cover pause in every nodes in a cluster

00:10:23,389 --> 00:10:34,139
like this so it's a parallel process

00:10:30,050 --> 00:10:38,220
that means the the workflow of the

00:10:34,139 --> 00:10:42,749
operator will be continued and when

00:10:38,220 --> 00:10:48,149
agent pod is that it will execute ad

00:10:42,749 --> 00:10:52,110
axial other tasks at the same time so

00:10:48,149 --> 00:10:55,679
for the operator work flow in the nozzle

00:10:52,110 --> 00:11:00,629
step is to create the provisioning

00:10:55,679 --> 00:11:03,860
control and the cluster control these

00:11:00,629 --> 00:11:07,920
two controls is very important for the

00:11:03,860 --> 00:11:11,129
workers group projects because the way

00:11:07,920 --> 00:11:13,619
we are talked about it

00:11:11,129 --> 00:11:16,920
in the following slides you will see

00:11:13,619 --> 00:11:20,490
that the the provisioning control and

00:11:16,920 --> 00:11:21,819
the cost control is a very player very

00:11:20,490 --> 00:11:27,560
important

00:11:21,819 --> 00:11:31,310
to bootstrap bootstrap the Juke and the

00:11:27,560 --> 00:11:36,410
staff castor and providing control we're

00:11:31,310 --> 00:11:43,610
watch the storage resource change such

00:11:36,410 --> 00:11:47,569
as add delete or update so the the two

00:11:43,610 --> 00:11:49,939
controls created by the operate parts

00:11:47,569 --> 00:11:54,730
we're watching the results changes in

00:11:49,939 --> 00:12:01,759
the cluster such as add delete or update

00:11:54,730 --> 00:12:06,500
resource so we need to need to remember

00:12:01,759 --> 00:12:09,250
that one of the most important thing in

00:12:06,500 --> 00:12:13,029
this slide is that the operate include

00:12:09,250 --> 00:12:15,790
provisioning control preventing control

00:12:13,029 --> 00:12:18,889
preventing control will watch the

00:12:15,790 --> 00:12:24,139
storage resource change in the in the

00:12:18,889 --> 00:12:28,459
staff cluster for example it will take

00:12:24,139 --> 00:12:32,149
the responsibility to do the storage

00:12:28,459 --> 00:12:34,189
provisioning we will have more details

00:12:32,149 --> 00:12:39,199
about this process in the following

00:12:34,189 --> 00:12:43,339
slides so now we talk about the aging

00:12:39,199 --> 00:12:47,630
and discover parts of the rook this

00:12:43,339 --> 00:12:52,089
cover is a usually two tits detected the

00:12:47,630 --> 00:12:55,339
available devices in the know in in not

00:12:52,089 --> 00:12:56,259
periodically it's it's not very

00:12:55,339 --> 00:13:01,550
important

00:12:56,259 --> 00:13:06,110
so in today's presentation we are we

00:13:01,550 --> 00:13:08,540
were not talking more about it so the

00:13:06,110 --> 00:13:12,860
all the raster content in these slides

00:13:08,540 --> 00:13:17,089
is about the agent so agent here's our

00:13:12,860 --> 00:13:20,600
you can regard the regard agent part as

00:13:17,089 --> 00:13:25,220
a mini operating that functions as an

00:13:20,600 --> 00:13:25,880
know level that just a dimension that's

00:13:25,220 --> 00:13:27,190
the

00:13:25,880 --> 00:13:32,170
[Music]

00:13:27,190 --> 00:13:36,450
agent part is created in form of demon

00:13:32,170 --> 00:13:41,050
set that means every node we are wrong

00:13:36,450 --> 00:13:46,149
agent wrong agent part in the past at

00:13:41,050 --> 00:13:52,290
hub with the arguments is self agent

00:13:46,149 --> 00:13:57,300
so just as we mentioned that with the

00:13:52,290 --> 00:14:03,520
individual project as peace king cobra

00:13:57,300 --> 00:14:08,170
projects we can we are call the start

00:14:03,520 --> 00:14:09,790
agent in when we running the part when

00:14:08,170 --> 00:14:15,390
we run in the eighth in the pod inside

00:14:09,790 --> 00:14:20,170
the node so the responsibility of the

00:14:15,390 --> 00:14:25,500
look agent part is is to install the

00:14:20,170 --> 00:14:29,560
rook flags forum driver to the volume

00:14:25,500 --> 00:14:32,740
plug-in directory they see this

00:14:29,560 --> 00:14:38,310
directory is specified by the fresh

00:14:32,740 --> 00:14:43,890
volume spec also of course it can be

00:14:38,310 --> 00:14:49,779
concealed configured by the ANA Yuda

00:14:43,890 --> 00:14:53,350
another another thing of the agent party

00:14:49,779 --> 00:14:56,830
to perform the storage operations on

00:14:53,350 --> 00:15:01,450
behalf of the flag forum driver such as

00:14:56,830 --> 00:15:11,350
attach attach detach mount amount via

00:15:01,450 --> 00:15:14,890
the UNIX UNIX domain socket let's take a

00:15:11,350 --> 00:15:20,020
look at the diagram in this slide we can

00:15:14,890 --> 00:15:23,020
see that there is a coop cooperate

00:15:20,020 --> 00:15:27,010
cooperate is belong to the Kunitz

00:15:23,020 --> 00:15:31,260
code we can see that there is a flex

00:15:27,010 --> 00:15:34,270
volume plugin it's a it's a from the

00:15:31,260 --> 00:15:40,270
it's belong to the code base of the coop

00:15:34,270 --> 00:15:43,390
cognates not rooks and the for the agent

00:15:40,270 --> 00:15:49,350
pod we have a flex volume driver

00:15:43,390 --> 00:15:54,040
this is belong to the road projects and

00:15:49,350 --> 00:16:02,980
also we have a look of Luke flex volume

00:15:54,040 --> 00:16:07,600
driver the one a workload pot scheduled

00:16:02,980 --> 00:16:12,880
on specific specific note the copies we

00:16:07,600 --> 00:16:18,060
are called wealth fire look up the the

00:16:12,880 --> 00:16:21,790
Flex varmint driver and then called the

00:16:18,060 --> 00:16:22,300
fracture volume driver flexible volume

00:16:21,790 --> 00:16:27,990
driver

00:16:22,300 --> 00:16:33,339
we are interact with the fracture volume

00:16:27,990 --> 00:16:36,060
server in the aging aging pods through

00:16:33,339 --> 00:16:36,060
the UDS

00:16:40,230 --> 00:16:48,320
Stav classic department with rock

00:16:44,760 --> 00:16:53,670
we just have mentioned that rock has a

00:16:48,320 --> 00:16:55,910
classic insure that is used to watch the

00:16:53,670 --> 00:17:00,690
results channel we're seeing the cluster

00:16:55,910 --> 00:17:06,210
so when we use inputs the Koopa control

00:17:00,690 --> 00:17:08,880
creature cluster Yama command line in

00:17:06,210 --> 00:17:12,090
the terminal this will trigger the self

00:17:08,880 --> 00:17:16,190
caster put a strap workflow that means

00:17:12,090 --> 00:17:20,340
because the we we mentioned in previous

00:17:16,190 --> 00:17:24,420
slides that the operator has has created

00:17:20,340 --> 00:17:28,470
a cast the control which is watching the

00:17:24,420 --> 00:17:34,640
resource changing in the cluster so if

00:17:28,470 --> 00:17:37,740
we if we create the caster cubic-inch or

00:17:34,640 --> 00:17:42,150
user Cooper control to created a car's

00:17:37,740 --> 00:17:45,680
caster and it will trigger the results

00:17:42,150 --> 00:17:51,600
change in the caster so the Rucker

00:17:45,680 --> 00:17:56,010
operate will configure the pods back of

00:17:51,600 --> 00:18:00,230
the monitor and launch the pod with make

00:17:56,010 --> 00:18:08,570
deployment that means the operator is

00:18:00,230 --> 00:18:08,570
responsible for running the safe demons

00:18:09,140 --> 00:18:17,220
inside the cluster also it will launch

00:18:14,010 --> 00:18:21,990
the staff manager and the monitor demon

00:18:17,220 --> 00:18:25,670
set with the similar similar methods

00:18:21,990 --> 00:18:31,050
so finally we will get the staff cluster

00:18:25,670 --> 00:18:34,350
like this this is an - newscaster you

00:18:31,050 --> 00:18:38,220
you can see that we have a manager part

00:18:34,350 --> 00:18:46,790
and also we have us three monitors parts

00:18:38,220 --> 00:18:50,700
and the two OSD pots so

00:18:46,790 --> 00:18:57,570
after that we have a a self caster

00:18:50,700 --> 00:19:01,110
available with about now the self

00:18:57,570 --> 00:19:02,310
Cassidy is not deployed deployed by the

00:19:01,110 --> 00:19:06,230
by manually

00:19:02,310 --> 00:19:12,450
it's totally by the route called route

00:19:06,230 --> 00:19:15,750
South code so this site we were

00:19:12,450 --> 00:19:21,270
described the the Flex volume driver the

00:19:15,750 --> 00:19:25,680
route tracks look tracks existing from

00:19:21,270 --> 00:19:29,430
in form of binary binary file and has

00:19:25,680 --> 00:19:34,320
been deployed by the agent into the

00:19:29,430 --> 00:19:38,880
volume plug-in we have mentioned that in

00:19:34,320 --> 00:19:42,420
previous slides deployed deployed into

00:19:38,880 --> 00:19:47,600
the volume plug-in is very simple it's

00:19:42,420 --> 00:19:54,690
just copy the route Flex volume driver

00:19:47,600 --> 00:19:59,210
into the specific directory in in hoster

00:19:54,690 --> 00:20:07,170
that the volume plug-in directory is

00:19:59,210 --> 00:20:12,950
specified by the Flex volumes back jog

00:20:07,170 --> 00:20:15,750
flux implement the mount and unmount

00:20:12,950 --> 00:20:19,800
master requested by the flexible miss

00:20:15,750 --> 00:20:24,300
back actually there are two options for

00:20:19,800 --> 00:20:29,130
the implementation of the Flex volume

00:20:24,300 --> 00:20:33,360
driver but the Juke user option two that

00:20:29,130 --> 00:20:40,580
means it just implement the mount and

00:20:33,360 --> 00:20:45,840
amount master the last item listed the

00:20:40,580 --> 00:20:49,740
story is religion Yama file storage

00:20:45,840 --> 00:20:54,790
ready to the part of the in the Yama

00:20:49,740 --> 00:20:58,150
Yama file we can see that it

00:20:54,790 --> 00:21:00,820
has two parts one part of the story

00:20:58,150 --> 00:21:04,080
provisioning and another part here the

00:21:00,820 --> 00:21:09,970
story consuming the two parts is

00:21:04,080 --> 00:21:14,500
independent we can write the the two

00:21:09,970 --> 00:21:20,380
part in a to give separate Yama file but

00:21:14,500 --> 00:21:24,070
in reality we combine the two parts into

00:21:20,380 --> 00:21:29,640
one Yama Yama file of the workloads on

00:21:24,070 --> 00:21:33,360
sabbatical workloads for the storage

00:21:29,640 --> 00:21:39,160
provision part we can see that we use a

00:21:33,360 --> 00:21:43,690
PVC that that means a certain volume

00:21:39,160 --> 00:21:49,960
claim and either will point storage cost

00:21:43,690 --> 00:21:53,740
and the story consuming is for the

00:21:49,960 --> 00:21:57,130
specific workloads significant the

00:21:53,740 --> 00:22:02,290
workloads we are consuming the storage

00:21:57,130 --> 00:22:06,160
so it will mount the it is required it

00:22:02,290 --> 00:22:10,810
the workload we will require to mount

00:22:06,160 --> 00:22:15,130
the volume the story volume provided by

00:22:10,810 --> 00:22:19,300
the story provision in part two the

00:22:15,130 --> 00:22:23,020
workloads for example mounted the prog

00:22:19,300 --> 00:22:33,610
device into the pods to a specific

00:22:23,020 --> 00:22:36,910
directory such as / w w w / h ki HTML we

00:22:33,610 --> 00:22:40,960
were given more details how this happens

00:22:36,910 --> 00:22:45,630
in the following slides for the story

00:22:40,960 --> 00:22:45,630
the provisioning and the story consuming

00:22:48,210 --> 00:22:55,200
so this size we are given more details

00:22:51,840 --> 00:22:59,029
about the Flex volume driver for Luke

00:22:55,200 --> 00:23:07,619
it's a roof racks roof racks is a binary

00:22:59,029 --> 00:23:10,200
fire and won we won we when the cook

00:23:07,619 --> 00:23:14,999
days want to schedule are a specific

00:23:10,200 --> 00:23:18,830
workload to a note if the workload want

00:23:14,999 --> 00:23:23,330
to consuming consume storage it will

00:23:18,830 --> 00:23:26,269
specify the storage in the Yama file

00:23:23,330 --> 00:23:29,490
just though we wish we see in the

00:23:26,269 --> 00:23:35,869
previous slide that in the storage

00:23:29,490 --> 00:23:44,539
consuming part it there is a volume

00:23:35,869 --> 00:23:47,159
volume and mount fields in the Yama file

00:23:44,539 --> 00:23:49,919
some some workloads

00:23:47,159 --> 00:23:54,299
doesn't consume consumer storage so

00:23:49,919 --> 00:24:01,919
maybe the this workload doesn't need to

00:23:54,299 --> 00:24:05,220
the such kind of Yama file so let's see

00:24:01,919 --> 00:24:09,899
one the coolest one cure schedule our

00:24:05,220 --> 00:24:14,220
workload to our to a note how the the

00:24:09,899 --> 00:24:21,659
couplets interact with the Flex volume

00:24:14,220 --> 00:24:26,450
driver the the process is like this just

00:24:21,659 --> 00:24:29,070
the we mention in the previous size that

00:24:26,450 --> 00:24:33,149
this workloads we are assuming the

00:24:29,070 --> 00:24:37,049
storage and it will specify the storage

00:24:33,149 --> 00:24:40,499
in the Yama file so when the public when

00:24:37,049 --> 00:24:43,590
the couplets want to running the the

00:24:40,499 --> 00:24:47,789
workload part they will find that there

00:24:43,590 --> 00:24:51,149
is a storage consuming requirements so

00:24:47,789 --> 00:24:56,820
it will look up the right flex volume

00:24:51,149 --> 00:24:58,309
driver first this lookup process can be

00:24:56,820 --> 00:25:02,120
found in

00:24:58,309 --> 00:25:06,110
the lookup process is implemented by the

00:25:02,120 --> 00:25:08,179
company's flex the volume plug-in so

00:25:06,110 --> 00:25:14,120
that means the code belong to the

00:25:08,179 --> 00:25:17,030
couplets not rooks so finally the

00:25:14,120 --> 00:25:21,250
couplets will find the right tracks of

00:25:17,030 --> 00:25:25,390
our driver and we are called a monk

00:25:21,250 --> 00:25:30,049
master of the fractional volume driver

00:25:25,390 --> 00:25:33,260
Chancellor Chester had the called Juke

00:25:30,049 --> 00:25:39,130
flex mount because youth fracture is our

00:25:33,260 --> 00:25:42,289
primary just a normal execution fire

00:25:39,130 --> 00:25:45,289
so the about amount we are called a

00:25:42,289 --> 00:25:52,210
crisp only function in luke agent via a

00:25:45,289 --> 00:25:56,090
UDS we will have a detailed diagram to

00:25:52,210 --> 00:26:00,020
demonstrate the process in the following

00:25:56,090 --> 00:26:04,070
sites and the local route agent we

00:26:00,020 --> 00:26:08,600
attach the volume into the the note

00:26:04,070 --> 00:26:11,630
because when the operate create a volume

00:26:08,600 --> 00:26:14,900
in the cluster the volume doesn't belong

00:26:11,630 --> 00:26:18,289
to any specific notes but the workload

00:26:14,900 --> 00:26:22,490
is a schedule two maybe two are

00:26:18,289 --> 00:26:26,900
different note than the operate than the

00:26:22,490 --> 00:26:30,500
note that operated running so let's see

00:26:26,900 --> 00:26:37,580
this these slides we are expect

00:26:30,500 --> 00:26:41,659
explaining the how the the volume up has

00:26:37,580 --> 00:26:47,750
been provided and how the workloads

00:26:41,659 --> 00:26:54,010
consuming the these volumes first we

00:26:47,750 --> 00:26:57,230
will create a persistent volume crane

00:26:54,010 --> 00:27:00,500
this is a command line the command line

00:26:57,230 --> 00:27:05,059
we are check the truth we are rude to

00:27:00,500 --> 00:27:08,000
the the operate because just we imagine

00:27:05,059 --> 00:27:09,120
in the previous slide that the operator

00:27:08,000 --> 00:27:12,179
has

00:27:09,120 --> 00:27:15,389
provisioning provisioning control it

00:27:12,179 --> 00:27:18,840
watched the resource changes in the surf

00:27:15,389 --> 00:27:24,210
cluster so when we create a one we want

00:27:18,840 --> 00:27:27,389
to create PVC that will mean that that

00:27:24,210 --> 00:27:30,809
means that there is a resource changer

00:27:27,389 --> 00:27:35,220
in the cluster and will be captured by

00:27:30,809 --> 00:27:42,360
the provisioning control of the operate

00:27:35,220 --> 00:27:46,169
so the operate we are do is to to create

00:27:42,360 --> 00:27:51,950
a volume in the class self cluster and

00:27:46,169 --> 00:27:55,950
the binded to the PV object but now the

00:27:51,950 --> 00:28:01,470
volume doesn't belong to any specific

00:27:55,950 --> 00:28:04,350
nodes so the next step is next part is

00:28:01,470 --> 00:28:11,009
the workload want to consuming the the

00:28:04,350 --> 00:28:13,200
volume so we use this command line to to

00:28:11,009 --> 00:28:18,629
schedule the work workload to us knows

00:28:13,200 --> 00:28:23,399
the snows maybe not wrong snow that

00:28:18,629 --> 00:28:27,269
maybe not in the same note as the

00:28:23,399 --> 00:28:31,519
operators running so the cuprates we are

00:28:27,269 --> 00:28:37,409
called the luke flex volume driver and

00:28:31,519 --> 00:28:40,279
the luke flex volume driver called the

00:28:37,409 --> 00:28:46,830
Flex volume server in the agent and the

00:28:40,279 --> 00:28:51,090
agent we are gathered a PV from the the

00:28:46,830 --> 00:28:55,049
self cluster and after that it will

00:28:51,090 --> 00:28:58,500
attach the volume to the node the

00:28:55,049 --> 00:29:01,850
workload is running so attach means that

00:28:58,500 --> 00:29:07,220
it will create a proc device like this

00:29:01,850 --> 00:29:10,620
the proctors generated after the product

00:29:07,220 --> 00:29:12,929
property was generated and it will mount

00:29:10,620 --> 00:29:16,769
user the workloads

00:29:12,929 --> 00:29:21,179
it's a belong to the the mobi or

00:29:16,769 --> 00:29:23,470
container technology so we are

00:29:21,179 --> 00:29:24,619
don't have more details about this and

00:29:23,470 --> 00:29:30,089
[Music]

00:29:24,619 --> 00:29:33,839
okay so there are two parts one part is

00:29:30,089 --> 00:29:39,409
a provision in part another is a catch

00:29:33,839 --> 00:29:39,409
and amount proc volume to the workloads

00:29:39,830 --> 00:29:48,479
so as the lastly is this update on

00:29:44,429 --> 00:29:52,739
platform and we take part in the the

00:29:48,479 --> 00:29:56,639
drug community activity and now so far

00:29:52,739 --> 00:30:00,989
we we have 14 pages have been merged

00:29:56,639 --> 00:30:03,419
into the upstream mainline code and now

00:30:00,989 --> 00:30:09,119
route can be built and run smoothly and

00:30:03,419 --> 00:30:11,820
on platforms and we we have also drug to

00:30:09,119 --> 00:30:15,960
route related submission accepted by

00:30:11,820 --> 00:30:20,729
upcoming the all open source summit you

00:30:15,960 --> 00:30:23,639
and Kovac own held in Shanghai November

00:30:20,729 --> 00:30:27,979
and also in in the future we have

00:30:23,639 --> 00:30:31,109
planned to support the CSI so this is a

00:30:27,979 --> 00:30:34,700
present presentation thank you for your

00:30:31,109 --> 00:30:34,700
time thanks

00:30:36,320 --> 00:30:41,329

YouTube URL: https://www.youtube.com/watch?v=SFG_MYFv6C4


