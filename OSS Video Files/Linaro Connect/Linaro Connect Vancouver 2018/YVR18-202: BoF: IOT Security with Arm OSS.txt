Title: YVR18-202: BoF: IOT Security with Arm OSS
Publication date: 2019-05-09
Playlist: Linaro Connect Vancouver 2018
Description: 
	This is an open forum to discuss various aspects of connected deviceâ€™s security. There are various PSA specifications addressing different aspects of security lifecycle, this session aims to provide a holistic view of connected device security and how different specifications come together to support that.

Note: a refined version of the abstract shall be provided in next few weeks.
Captions: 
	00:00:00,130 --> 00:00:13,990
I guess we'll get started and I'll open

00:00:11,620 --> 00:00:17,050
it up but we have three different

00:00:13,990 --> 00:00:21,039
speakers for the slot and we're kind of

00:00:17,050 --> 00:00:29,580
the overall theme is the IOT security in

00:00:21,039 --> 00:00:31,840
the arm open source area so the agenda

00:00:29,580 --> 00:00:35,230
like the title says you know it's just

00:00:31,840 --> 00:00:38,589
IOT security I'm gonna speak to some of

00:00:35,230 --> 00:00:42,640
the arm vm topics and how that impacts a

00:00:38,589 --> 00:00:44,469
zephyr and we're also gonna have a

00:00:42,640 --> 00:00:47,679
presentation or a little bit of a chat

00:00:44,469 --> 00:00:50,319
about the auditing of the secure open

00:00:47,679 --> 00:00:52,030
source software so these are kind of out

00:00:50,319 --> 00:00:56,319
order something to skip to the arm be a

00:00:52,030 --> 00:00:59,729
demand zephyr so this talk is meant more

00:00:56,319 --> 00:01:01,389
as a discussion so it's not gonna be

00:00:59,729 --> 00:01:02,799
we're not gonna dump a bunch of

00:01:01,389 --> 00:01:03,850
information on you we're gonna go

00:01:02,799 --> 00:01:05,590
through some of these things but we'd

00:01:03,850 --> 00:01:07,899
really like to have kind of a back and

00:01:05,590 --> 00:01:09,759
forth so if you have any questions

00:01:07,899 --> 00:01:11,439
please raise your hand at any time and

00:01:09,759 --> 00:01:19,149
we'll stop and we'll we'll have a

00:01:11,439 --> 00:01:21,969
discussion so today in in Zephyr we have

00:01:19,149 --> 00:01:24,240
some support or we have support for the

00:01:21,969 --> 00:01:28,270
arm be 8m and what that means is is that

00:01:24,240 --> 00:01:29,350
the arm baam supports two execution

00:01:28,270 --> 00:01:30,460
environments there's a secure

00:01:29,350 --> 00:01:34,000
environment there's a non secure

00:01:30,460 --> 00:01:37,240
environment nordic added a bunch of

00:01:34,000 --> 00:01:39,460
support for the secure environment such

00:01:37,240 --> 00:01:41,710
that you can actually build an arm v8 on

00:01:39,460 --> 00:01:44,380
target right now run it in a secure

00:01:41,710 --> 00:01:46,450
environment and that also means that you

00:01:44,380 --> 00:01:48,520
can handle the security faults that

00:01:46,450 --> 00:01:52,210
happen and also they added support for

00:01:48,520 --> 00:01:52,829
the the MTU that changed actually

00:01:52,210 --> 00:01:55,829
between

00:01:52,829 --> 00:01:57,240
the arm ba-dum and the earlier ones one

00:01:55,829 --> 00:02:02,429
of the nice things about that is the the

00:01:57,240 --> 00:02:04,229
new MP you actually supports start and

00:02:02,429 --> 00:02:06,299
end addresses whereas the earlier ones

00:02:04,229 --> 00:02:08,819
were power of two type of things so when

00:02:06,299 --> 00:02:10,530
you're setting up regions it was kind of

00:02:08,819 --> 00:02:11,940
difficult because when you are doing

00:02:10,530 --> 00:02:14,250
linking you're having to do power of two

00:02:11,940 --> 00:02:16,530
and it's a real pain so that was quite

00:02:14,250 --> 00:02:19,530
nice when they change the hardware on

00:02:16,530 --> 00:02:21,209
that as far as board support there's

00:02:19,530 --> 00:02:23,569
only a handful of wards out right now

00:02:21,209 --> 00:02:26,660
that's that support the arm BM there's a

00:02:23,569 --> 00:02:31,530
new Vuitton has one microchip has one

00:02:26,660 --> 00:02:34,380
that there's of course the arm n ps2 and

00:02:31,530 --> 00:02:37,200
also the arm Musco board which has an M

00:02:34,380 --> 00:02:41,069
33 on it the musca board is kind of a

00:02:37,200 --> 00:02:44,549
limited access board you can request a

00:02:41,069 --> 00:02:48,090
board from arm and they may or may not

00:02:44,549 --> 00:02:49,110
provide it to you but that's really all

00:02:48,090 --> 00:02:51,810
the board's that are out there right now

00:02:49,110 --> 00:02:54,510
as far as the the current support ends

00:02:51,810 --> 00:02:57,030
upper we have some PRS out there for the

00:02:54,510 --> 00:02:59,010
MPS too and the musca those are in

00:02:57,030 --> 00:03:01,500
review and they should actually land

00:02:59,010 --> 00:03:03,510
sometime this week so if you have one of

00:03:01,500 --> 00:03:10,410
the boards like an MDS Q or Musco you

00:03:03,510 --> 00:03:12,000
can then try it out as far as Zephyr is

00:03:10,410 --> 00:03:14,010
concerned there's really only one

00:03:12,000 --> 00:03:15,630
scheduler in the system at this time so

00:03:14,010 --> 00:03:17,819
when you're talking about secure and

00:03:15,630 --> 00:03:20,160
non-secure environments even though you

00:03:17,819 --> 00:03:22,650
may have a secure environment it's you

00:03:20,160 --> 00:03:23,910
only have one scheduler so when you go

00:03:22,650 --> 00:03:25,380
and you do a secure call and you

00:03:23,910 --> 00:03:28,319
transition over to the secure

00:03:25,380 --> 00:03:30,000
environment it's a blocking synchronous

00:03:28,319 --> 00:03:33,329
thing once it's done it comes back and

00:03:30,000 --> 00:03:35,760
you continue on with your scheduling in

00:03:33,329 --> 00:03:37,590
the future however that may change that

00:03:35,760 --> 00:03:39,620
however that gets very complex so if you

00:03:37,590 --> 00:03:41,970
start to think about okay well I have

00:03:39,620 --> 00:03:43,590
two images running on the system one

00:03:41,970 --> 00:03:46,079
secure ones non-secure someone may have

00:03:43,590 --> 00:03:48,480
made a secure call I'm still getting

00:03:46,079 --> 00:03:49,950
interrupts those interrupts may be from

00:03:48,480 --> 00:03:51,630
a secure interrupt it may be a non

00:03:49,950 --> 00:03:53,609
secure interrupt when you take those

00:03:51,630 --> 00:03:55,019
interrupts you may cause you to do some

00:03:53,609 --> 00:03:55,530
scheduling changes well how do you deal

00:03:55,019 --> 00:03:57,630
with that

00:03:55,530 --> 00:03:59,490
and if you're only having one secure

00:03:57,630 --> 00:04:01,080
context if you're needing to have

00:03:59,490 --> 00:04:02,400
another one how do you transition that

00:04:01,080 --> 00:04:04,410
how do you get back to the original

00:04:02,400 --> 00:04:06,780
context that you've had so there's a lot

00:04:04,410 --> 00:04:08,610
of complexity there and in the in the

00:04:06,780 --> 00:04:12,150
beginning right now it's very simple

00:04:08,610 --> 00:04:13,620
it's synchronous blocking and you come

00:04:12,150 --> 00:04:16,709
back and then you start to do whatever

00:04:13,620 --> 00:04:18,829
you're doing before so that's how it

00:04:16,709 --> 00:04:18,829
works

00:04:19,459 --> 00:04:25,280
so as I alluded to earlier in the army

00:04:24,020 --> 00:04:26,449
item is a little bit different instead

00:04:25,280 --> 00:04:29,030
of having privileged and unprivileged

00:04:26,449 --> 00:04:30,770
you also have secure and non-secure and

00:04:29,030 --> 00:04:32,479
there's also a new region type so when

00:04:30,770 --> 00:04:34,100
you actually build this you actually

00:04:32,479 --> 00:04:37,009
need to use one of the newer compilers

00:04:34,100 --> 00:04:42,110
which I believe is the you can use one

00:04:37,009 --> 00:04:43,460
of the 2017 q4 or 2018 q1 compiler it's

00:04:42,110 --> 00:04:46,160
new enough to have the security

00:04:43,460 --> 00:04:47,840
extensions what that allows you to do is

00:04:46,160 --> 00:04:49,430
there's a new region type called the

00:04:47,840 --> 00:04:51,530
secure non secure callable and what that

00:04:49,430 --> 00:04:54,889
is is is that if you have a secure and a

00:04:51,530 --> 00:04:56,780
non secure environment you still want to

00:04:54,889 --> 00:04:58,160
call from the non security security well

00:04:56,780 --> 00:05:00,080
how do you do that well there's some

00:04:58,160 --> 00:05:01,430
secure functions you need to call but

00:05:00,080 --> 00:05:03,260
you actually have to make the transition

00:05:01,430 --> 00:05:05,750
so what we have here is you actually

00:05:03,260 --> 00:05:08,870
have some veneers where you make a call

00:05:05,750 --> 00:05:10,940
into code that resides within the secure

00:05:08,870 --> 00:05:12,919
non secure callable and in that region

00:05:10,940 --> 00:05:14,840
then you can actually make the

00:05:12,919 --> 00:05:18,860
transition to secure so that's how it's

00:05:14,840 --> 00:05:20,330
done when you create these veneers you

00:05:18,860 --> 00:05:25,250
have to use an extra compiler option

00:05:20,330 --> 00:05:27,020
which is the - MCM se and that's just if

00:05:25,250 --> 00:05:30,680
you don't do that it won't actually do

00:05:27,020 --> 00:05:32,240
the right thing with the region and this

00:05:30,680 --> 00:05:33,770
is a lot of infrastructure stuff that

00:05:32,240 --> 00:05:35,539
you know if you're writing an

00:05:33,770 --> 00:05:37,460
application in Suffern and you're you're

00:05:35,539 --> 00:05:38,870
doing that you don't it's its way down

00:05:37,460 --> 00:05:40,909
and in the system you don't really need

00:05:38,870 --> 00:05:43,570
to know about it but but this is what's

00:05:40,909 --> 00:05:43,570
happening underneath

00:05:45,340 --> 00:05:50,350
so I'll pause real quick there's any

00:05:47,360 --> 00:05:50,350
questions on

00:05:54,360 --> 00:06:00,330
hopefully that's on high and just just

00:05:58,169 --> 00:06:02,789
regarding the scheduling question I

00:06:00,330 --> 00:06:05,099
guess just some knowledge from there

00:06:02,789 --> 00:06:06,719
from the a profile space where you know

00:06:05,099 --> 00:06:09,270
you do have secure interrupts and

00:06:06,719 --> 00:06:12,120
non-secure interim sir typically we

00:06:09,270 --> 00:06:13,770
expect the secure well to be cooperative

00:06:12,120 --> 00:06:16,590
and yield back to the normal world so

00:06:13,770 --> 00:06:18,599
the null world can then give the secure

00:06:16,590 --> 00:06:20,969
Wilson time to do is asynchronous

00:06:18,599 --> 00:06:23,159
processing so not non secure Will's

00:06:20,969 --> 00:06:25,229
always in charge in terms of scheduling

00:06:23,159 --> 00:06:27,330
and I would suggest that's probably a

00:06:25,229 --> 00:06:29,280
good approach and in this space as well

00:06:27,330 --> 00:06:31,379
but yeah we hope to keep it that way

00:06:29,280 --> 00:06:32,879
okay yeah so if you're independent

00:06:31,379 --> 00:06:36,060
scheduling decisions going on crazy

00:06:32,879 --> 00:06:37,379
things happen and right yeah but one

00:06:36,060 --> 00:06:39,870
thing to keep in mind is I mean we're

00:06:37,379 --> 00:06:41,580
talking about an hour talks right so

00:06:39,870 --> 00:06:42,990
when you make a synchronous call on to

00:06:41,580 --> 00:06:44,550
the security you don't know how long

00:06:42,990 --> 00:06:47,460
it's gonna take so that kind of really

00:06:44,550 --> 00:06:49,440
screws up your Layton sees sure yeah

00:06:47,460 --> 00:06:50,789
normally expect it's just you know and

00:06:49,440 --> 00:06:52,110
into a service routine to schedule

00:06:50,789 --> 00:06:54,870
someone and immediately go back to the

00:06:52,110 --> 00:06:56,990
on secure world yep that's what I would

00:06:54,870 --> 00:06:56,990
expect

00:06:58,199 --> 00:07:02,780
I guess you can hold on to it or just

00:07:00,509 --> 00:07:02,780
set it

00:07:03,020 --> 00:07:10,340
so so how does this work from a use case

00:07:07,100 --> 00:07:11,840
standpoint so there's kind of well

00:07:10,340 --> 00:07:14,000
there's three scenarios and there might

00:07:11,840 --> 00:07:16,730
be more but really what it comes down to

00:07:14,000 --> 00:07:18,050
is you you have Zephyr and you have the

00:07:16,730 --> 00:07:21,380
trusted firmware for cortex-m

00:07:18,050 --> 00:07:24,170
and you have some combination of these

00:07:21,380 --> 00:07:26,180
running on the system so if you're

00:07:24,170 --> 00:07:27,620
running in a single environment you want

00:07:26,180 --> 00:07:29,840
to just want to run Zephyr as secure you

00:07:27,620 --> 00:07:32,510
can do that by default the system will

00:07:29,840 --> 00:07:33,650
run in a secure environment the fault

00:07:32,510 --> 00:07:36,860
handlers and all that are in place so

00:07:33,650 --> 00:07:39,080
that works fine if you want to actually

00:07:36,860 --> 00:07:41,480
have a non secure environment yet you

00:07:39,080 --> 00:07:43,010
kind of have two choices you can run TFM

00:07:41,480 --> 00:07:45,890
is your secure environment you can run

00:07:43,010 --> 00:07:52,250
Zephyr in the non secure or you can even

00:07:45,890 --> 00:07:53,900
run Zephyr in both and so in the end if

00:07:52,250 --> 00:07:54,770
you're running both secure and

00:07:53,900 --> 00:07:57,830
non-secure you still have to have

00:07:54,770 --> 00:08:00,320
multiple images and whether or not you

00:07:57,830 --> 00:08:03,080
use a bootloader is really irrespective

00:08:00,320 --> 00:08:04,970
but you have to keep in mind that when

00:08:03,080 --> 00:08:06,710
you're building both of them you have to

00:08:04,970 --> 00:08:08,750
take into account the security

00:08:06,710 --> 00:08:11,120
configuration because if you have any

00:08:08,750 --> 00:08:13,100
mismatch a peripheral or address space

00:08:11,120 --> 00:08:15,710
you will get a secure fault and you will

00:08:13,100 --> 00:08:17,920
be done so you have to be very careful

00:08:15,710 --> 00:08:17,920
about that

00:08:23,590 --> 00:08:28,730
just a quick thing the Zephyr can be

00:08:26,180 --> 00:08:30,230
built without a scheduler for the you

00:08:28,730 --> 00:08:31,790
know the concerns about the secure side

00:08:30,230 --> 00:08:34,310
and scheduling you don't have to build

00:08:31,790 --> 00:08:38,180
it with multiple schedulers and the

00:08:34,310 --> 00:08:39,320
nightmare that causes right and we

00:08:38,180 --> 00:08:43,180
already have a target where we do that

00:08:39,320 --> 00:08:43,180
so that kind of leads into

00:08:48,550 --> 00:08:54,060
is that the only one you lost

00:08:55,780 --> 00:08:59,430
okay I'll have to do it manually

00:09:03,670 --> 00:09:08,070
okay

00:09:06,270 --> 00:09:12,690
I guess that's the last one so that's

00:09:08,070 --> 00:09:14,970
why I think she Tosh has his own

00:09:12,690 --> 00:09:17,640
presentation but one thing I wanted to

00:09:14,970 --> 00:09:22,410
add was that's funny one thing I wanted

00:09:17,640 --> 00:09:24,120
to add was that you know trusted the TFM

00:09:22,410 --> 00:09:27,470
has a bunch of different components to

00:09:24,120 --> 00:09:30,870
it there's the actual secure functions

00:09:27,470 --> 00:09:32,490
there's the security initialization

00:09:30,870 --> 00:09:35,370
stuff that does that happens when you

00:09:32,490 --> 00:09:36,750
boot the system from beginning to end

00:09:35,370 --> 00:09:38,640
you know whether or not you have a

00:09:36,750 --> 00:09:40,110
bootloader if you're running a secure

00:09:38,640 --> 00:09:42,270
image it has to configure the security

00:09:40,110 --> 00:09:44,640
in the system and at some point then it

00:09:42,270 --> 00:09:45,900
has to jump to the non secure side so

00:09:44,640 --> 00:09:48,030
there's a certain number of things that

00:09:45,900 --> 00:09:50,750
whatever secure image you're running has

00:09:48,030 --> 00:09:53,910
to do it just has those responsibilities

00:09:50,750 --> 00:09:55,230
and whether or not you're running TFM or

00:09:53,910 --> 00:09:56,730
you're running Zephyr they they still

00:09:55,230 --> 00:09:59,940
have to do these they have these

00:09:56,730 --> 00:10:01,410
responsibilities so hopefully in the

00:09:59,940 --> 00:10:03,300
future you know we don't necessarily

00:10:01,410 --> 00:10:05,850
want to have two different environments

00:10:03,300 --> 00:10:07,740
two different secure environments out

00:10:05,850 --> 00:10:09,390
there that we're trying to support we'd

00:10:07,740 --> 00:10:11,700
really rather it like to fold it down

00:10:09,390 --> 00:10:14,580
into one and whether or not

00:10:11,700 --> 00:10:16,350
Zephyr is running as a very thin piece

00:10:14,580 --> 00:10:17,760
that actually pulls in some of the TFM

00:10:16,350 --> 00:10:21,420
components and builds the image that's

00:10:17,760 --> 00:10:25,020
that's fine by us or if it's actually

00:10:21,420 --> 00:10:26,850
the whole TFM package from our

00:10:25,020 --> 00:10:28,950
perspective we don't really care which

00:10:26,850 --> 00:10:31,770
it is but we definitely want to leverage

00:10:28,950 --> 00:10:34,380
the pieces of TFM that we want to use

00:10:31,770 --> 00:10:37,960
whether it's in its entirety or in

00:10:34,380 --> 00:10:39,860
pieces so

00:10:37,960 --> 00:10:42,560
that's kind of where I want to leave off

00:10:39,860 --> 00:10:43,730
and probably kick it off to you are

00:10:42,560 --> 00:10:46,180
there any other questions before we

00:10:43,730 --> 00:10:46,180
transition

00:10:48,280 --> 00:10:53,640
No okay

00:10:50,490 --> 00:10:53,640
thanks Annie

00:11:24,190 --> 00:11:27,750
I can't see my slides here

00:11:29,350 --> 00:11:35,790
okay there it is

00:11:32,320 --> 00:11:35,790
no this is one one

00:11:38,980 --> 00:11:43,200
- yeah you see it

00:11:52,810 --> 00:11:55,980
give me one point

00:11:56,930 --> 00:12:01,460
it's fine I can open the the ESS lies

00:11:59,660 --> 00:12:04,400
and just I don't have a lot of

00:12:01,460 --> 00:12:07,610
presentation in science anyway so idea

00:12:04,400 --> 00:12:09,110
is that we go through some of the common

00:12:07,610 --> 00:12:11,540
questions which are asked by many people

00:12:09,110 --> 00:12:14,230
and then go straight our development

00:12:11,540 --> 00:12:14,230
organization

00:12:27,130 --> 00:12:32,490
how do they make it full speed sorry I

00:12:29,230 --> 00:12:32,490
need you help handy

00:12:34,370 --> 00:12:37,630
do need to download it

00:13:06,750 --> 00:13:10,730
yes yeah

00:13:26,459 --> 00:13:30,959
hi Masha Tosh there's again continuation

00:13:29,639 --> 00:13:35,249
of the discussion that we started

00:13:30,959 --> 00:13:37,620
yesterday I'm not going to repeat what I

00:13:35,249 --> 00:13:41,040
presented Esther I think we covered a

00:13:37,620 --> 00:13:42,480
lot of technical topics yesterday what

00:13:41,040 --> 00:13:44,850
are the common questions which are asked

00:13:42,480 --> 00:13:47,910
by many people is what are we

00:13:44,850 --> 00:13:51,709
implementing in DSM and and what is left

00:13:47,910 --> 00:13:55,139
for our partners and vendors to Clemente

00:13:51,709 --> 00:13:56,730
so if you look at this diagram almost

00:13:55,139 --> 00:13:58,980
everything on this side on the right

00:13:56,730 --> 00:14:02,249
hand side is what the FM is it's

00:13:58,980 --> 00:14:05,819
basically on the services the partition

00:14:02,249 --> 00:14:10,050
manager the bootloader and the jalapeÃ±o

00:14:05,819 --> 00:14:12,329
well API we limit ourselves to defining

00:14:10,050 --> 00:14:14,129
the API we don't really we cannot really

00:14:12,329 --> 00:14:17,309
implement for every single platform and

00:14:14,129 --> 00:14:20,309
this is what a partner may need to

00:14:17,309 --> 00:14:22,490
implement so in the ideal scenario when

00:14:20,309 --> 00:14:27,019
we have all the software sorted out and

00:14:22,490 --> 00:14:30,269
developed and software is mature enough

00:14:27,019 --> 00:14:32,939
for putting the DFM in on a new platform

00:14:30,269 --> 00:14:34,800
would probably require this rewriting

00:14:32,939 --> 00:14:36,959
some of the Holly peers and that should

00:14:34,800 --> 00:14:41,149
that is that is where most of the

00:14:36,959 --> 00:14:41,149
contribution should come from from a

00:14:42,350 --> 00:14:48,679
having said that there will be at least

00:14:46,920 --> 00:14:51,149
in the beginning there will be some

00:14:48,679 --> 00:14:53,459
uniqueness in every single platform when

00:14:51,149 --> 00:14:56,249
it comes to the actual hardware

00:14:53,459 --> 00:14:59,370
implementation so that will lead to the

00:14:56,249 --> 00:15:01,740
evolution of the hal a pier itself where

00:14:59,370 --> 00:15:05,300
today we are going to define on the

00:15:01,740 --> 00:15:07,980
basis of what we think is the best api

00:15:05,300 --> 00:15:10,319
but with more more platforms coming and

00:15:07,980 --> 00:15:11,399
more contributions coming in this is

00:15:10,319 --> 00:15:14,550
going to do all this is going to change

00:15:11,399 --> 00:15:16,999
so and this is where I expect a lot of

00:15:14,550 --> 00:15:16,999
feedback from

00:15:19,300 --> 00:15:24,399
any questions suggestions yep

00:15:25,270 --> 00:15:30,920
does arm provide standard drivers in TFM

00:15:29,120 --> 00:15:33,140
for all of the standard IP blocks that

00:15:30,920 --> 00:15:35,540
you might include in a cortex and

00:15:33,140 --> 00:15:37,970
processors things like crypto cell you

00:15:35,540 --> 00:15:39,230
are counters that kind of thing or is

00:15:37,970 --> 00:15:41,240
that something you come back to cook

00:15:39,230 --> 00:15:43,610
pasilla the second part the first that

00:15:41,240 --> 00:15:46,690
is the genic a generic question about

00:15:43,610 --> 00:15:50,779
the auto drivers and on the IPS that

00:15:46,690 --> 00:15:52,760
produces purely from different

00:15:50,779 --> 00:15:55,220
perspective yes whatever TFM requires

00:15:52,760 --> 00:15:57,050
will provide the we do provide and we

00:15:55,220 --> 00:16:02,540
will continue providing support for the

00:15:57,050 --> 00:16:06,140
newer IPS for the most of the IPS crypto

00:16:02,540 --> 00:16:08,060
cell today is not open source so we

00:16:06,140 --> 00:16:13,940
cannot really actually the driver as it

00:16:08,060 --> 00:16:16,390
is yeah so that's why we send you

00:16:13,940 --> 00:16:16,390
something

00:16:20,760 --> 00:16:27,690
yes I think this question was more of

00:16:23,100 --> 00:16:31,950
about Mahi's itself and it was largely

00:16:27,690 --> 00:16:35,700
about when you hand out TFM to partners

00:16:31,950 --> 00:16:38,340
do you is there a good selection of our

00:16:35,700 --> 00:16:41,610
maipi already supported in TFM so that

00:16:38,340 --> 00:16:45,000
if I create a cortex-m sock but I don't

00:16:41,610 --> 00:16:46,290
have to go reimplemented the same

00:16:45,000 --> 00:16:46,620
problem we have with Linux in you boot

00:16:46,290 --> 00:16:48,090
right

00:16:46,620 --> 00:16:49,560
yeah every single driver from the latest

00:16:48,090 --> 00:16:51,240
kernel eventually gets pulled into you

00:16:49,560 --> 00:16:54,900
but to the point where you go why don't

00:16:51,240 --> 00:16:56,670
I just run works yeah so if you are

00:16:54,900 --> 00:16:59,310
comparing with a Linux kernel it is not

00:16:56,670 --> 00:17:06,930
at that maturity level it has taken many

00:16:59,310 --> 00:17:09,199
years to develop and in multiple

00:17:06,930 --> 00:17:12,390
instances of multiple variants of the

00:17:09,199 --> 00:17:15,180
similar right piece we are not there yet

00:17:12,390 --> 00:17:16,920
that's the ultimate goal yes we do

00:17:15,180 --> 00:17:19,199
provide a reference implementation for

00:17:16,920 --> 00:17:21,630
the IPS which are in the reference

00:17:19,199 --> 00:17:25,940
platforms will Courtney writing support

00:17:21,630 --> 00:17:29,340
for more IPS and that's where we are

00:17:25,940 --> 00:17:30,960
just going to sell a she first tier 5

00:17:29,340 --> 00:17:34,400
projects at least even though the

00:17:30,960 --> 00:17:36,960
crystal driver itself is proprietary the

00:17:34,400 --> 00:17:38,130
interface is up streamed and that

00:17:36,960 --> 00:17:44,420
there's a kind of a glue layer between

00:17:38,130 --> 00:17:48,050
their project yeah and that's where in

00:17:44,420 --> 00:17:48,050
one of the slides here

00:17:52,820 --> 00:17:59,030
so this is the second from yesterday

00:18:03,909 --> 00:18:11,619
it's a one of the ideas behind this blue

00:18:07,389 --> 00:18:14,709
box is to standardize the integration of

00:18:11,619 --> 00:18:17,499
crypto accelerators so you might have a

00:18:14,709 --> 00:18:18,909
different hardware down that down there

00:18:17,499 --> 00:18:21,309
but that shouldn't affect the

00:18:18,909 --> 00:18:23,379
implementation of the rest of the system

00:18:21,309 --> 00:18:26,019
software so this is what we are trying

00:18:23,379 --> 00:18:29,440
to abstract mostly here mostly in the

00:18:26,019 --> 00:18:31,239
hull API but sometimes the quirkiness of

00:18:29,440 --> 00:18:32,409
different Hardware may require taking

00:18:31,239 --> 00:18:35,609
some of the understanding of the

00:18:32,409 --> 00:18:40,449
hardware into this box itself itself and

00:18:35,609 --> 00:18:48,669
the effort is to contain the uniqueness

00:18:40,449 --> 00:18:52,959
of every hardware only in this box are

00:18:48,669 --> 00:18:56,079
you how are you addressing Simpsons are

00:18:52,959 --> 00:18:59,859
you actually is the PAL API Simpsons

00:18:56,079 --> 00:19:04,079
based yes most of the interfaces that we

00:18:59,859 --> 00:19:04,079
have today is interface

00:19:07,530 --> 00:19:13,660
this is TBS am Holly api's so it's not

00:19:11,620 --> 00:19:16,240
generate device drivers for every are my

00:19:13,660 --> 00:19:18,430
penis produced TBS they require certain

00:19:16,240 --> 00:19:21,040
components to be part of the platform

00:19:18,430 --> 00:19:24,460
that platform app may have many other

00:19:21,040 --> 00:19:26,770
components we don't need those for

00:19:24,460 --> 00:19:28,810
simple debugging there might be few IP

00:19:26,770 --> 00:19:30,490
is buried but the trusted site won't

00:19:28,810 --> 00:19:33,910
start implementing also so traverse

00:19:30,490 --> 00:19:36,520
which is I think some something what you

00:19:33,910 --> 00:19:38,650
were referring to diamond it's not gonna

00:19:36,520 --> 00:19:40,690
take all of the embed drivers or all of

00:19:38,650 --> 00:19:43,540
those effort Ivers need them here as

00:19:40,690 --> 00:19:45,520
well there are specific components in

00:19:43,540 --> 00:19:47,470
TBS mmm and there will be supported here

00:19:45,520 --> 00:19:49,470
plus some additional things I think

00:19:47,470 --> 00:19:53,950
that's that's what is worth clarifying

00:19:49,470 --> 00:19:57,490
thanks objective is going to do it only

00:19:53,950 --> 00:19:59,890
what is required by DSM it will not be a

00:19:57,490 --> 00:20:04,470
repository repository for general

00:19:59,890 --> 00:20:04,470
purpose 14 on secure side

00:20:07,030 --> 00:20:09,900
with Mike

00:20:16,360 --> 00:20:22,360
so since you said a question was what

00:20:20,289 --> 00:20:24,490
what are you doing in TFM I mean is

00:20:22,360 --> 00:20:26,890
there in the roadmap that is publicly

00:20:24,490 --> 00:20:29,740
available for people to see well I think

00:20:26,890 --> 00:20:33,700
she was going to go in one of his talks

00:20:29,740 --> 00:20:36,340
about that okay so and about are you

00:20:33,700 --> 00:20:38,370
from arm the only one doing the work so

00:20:36,340 --> 00:20:38,370
far

00:20:38,549 --> 00:20:44,230
do you have external contributors to the

00:20:41,679 --> 00:20:49,929
product or is it mainly on human our

00:20:44,230 --> 00:20:53,440
first external contribute okay we are

00:20:49,929 --> 00:21:01,090
starting to engage but so far it has

00:20:53,440 --> 00:21:04,600
been mainly a so on the roadmap it's

00:21:01,090 --> 00:21:07,029
publicly available now in th dot org so

00:21:04,600 --> 00:21:08,649
that is a dashboard where what are going

00:21:07,029 --> 00:21:10,809
to come in the future quarters are all

00:21:08,649 --> 00:21:12,850
captured so it's publicly available and

00:21:10,809 --> 00:21:16,380
it'll be sort of covered in the high

00:21:12,850 --> 00:21:16,380
level and today afternoon's presentation

00:21:37,900 --> 00:21:45,190
right so coming back to the big picture

00:21:40,410 --> 00:21:47,890
as I said the the ultimate goal is to

00:21:45,190 --> 00:21:50,530
abstract the software in a way that it

00:21:47,890 --> 00:21:52,450
requires minimal level of change or when

00:21:50,530 --> 00:21:54,460
you want to put this in the whole TFM on

00:21:52,450 --> 00:21:57,010
the new platform it will take some time

00:21:54,460 --> 00:21:59,410
to get there but when we start getting

00:21:57,010 --> 00:22:01,059
more platform contributions this will

00:21:59,410 --> 00:22:04,830
start getting more mature right now yes

00:22:01,059 --> 00:22:04,830
support for mostly our platforms and

00:22:05,250 --> 00:22:11,410
when we start seeing the variations and

00:22:07,960 --> 00:22:13,660
we start seeing more more colorful

00:22:11,410 --> 00:22:17,200
hardware come and coming in the play as

00:22:13,660 --> 00:22:20,280
well it'll start getting more mature any

00:22:17,200 --> 00:22:20,280
more questions on this

00:22:22,010 --> 00:22:31,400
okay the other general question that I

00:22:27,679 --> 00:22:33,200
wanted to talk about was interpreting

00:22:31,400 --> 00:22:37,820
this has been talked about quite a few

00:22:33,200 --> 00:22:39,470
times already the two aspects said the

00:22:37,820 --> 00:22:43,309
non-secure interrupt handling and the

00:22:39,470 --> 00:22:45,559
secure side inter handling the effort is

00:22:43,309 --> 00:22:48,620
to make sure that whatever we do in the

00:22:45,559 --> 00:22:50,179
secure side shouldn't have any impact on

00:22:48,620 --> 00:22:51,919
the real-time list of the non secure

00:22:50,179 --> 00:22:54,770
side the correct implementation

00:22:51,919 --> 00:22:56,510
basically it blocks everything in the

00:22:54,770 --> 00:22:59,299
non secure world once you have made a

00:22:56,510 --> 00:23:01,460
call to the secure world it will not

00:22:59,299 --> 00:23:03,080
return it will not yield before it

00:23:01,460 --> 00:23:05,720
finishes who finishes what it is

00:23:03,080 --> 00:23:09,230
supposed to do but that is just interim

00:23:05,720 --> 00:23:13,220
solution to to know to allow us to make

00:23:09,230 --> 00:23:16,429
more development and allow us to start

00:23:13,220 --> 00:23:19,190
developing our software ultimate goal is

00:23:16,429 --> 00:23:22,820
to allow preemption of the secure side

00:23:19,190 --> 00:23:25,210
execution and so if you're running a

00:23:22,820 --> 00:23:27,410
service on the secure side and a

00:23:25,210 --> 00:23:30,140
interrupt comes on the non secure side

00:23:27,410 --> 00:23:34,730
it will be able to preempt the secure

00:23:30,140 --> 00:23:35,990
side execution that is so then you're

00:23:34,730 --> 00:23:38,750
talking about the a-class world where

00:23:35,990 --> 00:23:40,460
you know they don't secure site

00:23:38,750 --> 00:23:42,110
interrupt is always handled

00:23:40,460 --> 00:23:44,630
doesn't matter where the execution is

00:23:42,110 --> 00:23:46,190
there's a subtle difference here in the

00:23:44,630 --> 00:23:49,040
a cross between the a-class world and

00:23:46,190 --> 00:23:50,900
the N cross world in the a class

00:23:49,040 --> 00:23:52,850
implementation most of the time the

00:23:50,900 --> 00:23:55,820
interpreter outed through the secure

00:23:52,850 --> 00:23:57,440
role itself usually you and you will get

00:23:55,820 --> 00:23:59,419
the non secure interrupt in the even one

00:23:57,440 --> 00:24:01,340
then probably it will go to your three

00:23:59,419 --> 00:24:05,510
and that and it will come back to non

00:24:01,340 --> 00:24:11,179
secure year one in

00:24:05,510 --> 00:24:13,240
DFM we are trying to not involve secure

00:24:11,179 --> 00:24:15,590
site for handling non secure in terms

00:24:13,240 --> 00:24:16,340
because there are a lot of real-time

00:24:15,590 --> 00:24:20,299
concerns

00:24:16,340 --> 00:24:22,309
that there a lot of routing has a cost

00:24:20,299 --> 00:24:24,620
if you want to handle only interrupts in

00:24:22,309 --> 00:24:27,110
the secure world first and then decide

00:24:24,620 --> 00:24:31,940
to route it back to the non secure world

00:24:27,110 --> 00:24:35,150
it has a cost so our current designs are

00:24:31,940 --> 00:24:37,640
geared towards no matter what's

00:24:35,150 --> 00:24:40,429
happening in the secure side if a non

00:24:37,640 --> 00:24:42,260
secure interrupt comes in and if it has

00:24:40,429 --> 00:24:44,360
sufficient priority

00:24:42,260 --> 00:24:49,190
it will tree on the secure side

00:24:44,360 --> 00:24:51,470
execution and it will handle the little

00:24:49,190 --> 00:24:54,080
handles non secure interrupt now the

00:24:51,470 --> 00:24:58,909
onus is on non secure side software to

00:24:54,080 --> 00:25:01,340
restore the preempted context so if

00:24:58,909 --> 00:25:04,279
secure side is executing something and

00:25:01,340 --> 00:25:06,740
he non secure interrupt comes in the

00:25:04,279 --> 00:25:10,520
secure side context would have been

00:25:06,740 --> 00:25:14,299
preempted but once the non secure side

00:25:10,520 --> 00:25:16,220
takes the control of the execution by

00:25:14,299 --> 00:25:19,700
the fact of handling the non secure

00:25:16,220 --> 00:25:22,789
interrupt that time it is in full in

00:25:19,700 --> 00:25:24,950
full charge full it is in charge of the

00:25:22,789 --> 00:25:27,200
whole execution it can decide never to

00:25:24,950 --> 00:25:29,450
go back into the secure world it can say

00:25:27,200 --> 00:25:32,029
fine I have got the control I'm going to

00:25:29,450 --> 00:25:34,820
show you every single non secure old

00:25:32,029 --> 00:25:38,210
thing that is there on the plate and not

00:25:34,820 --> 00:25:40,549
yield back at all to the secure world so

00:25:38,210 --> 00:25:43,669
there is a denial of service aspect to

00:25:40,549 --> 00:25:45,620
it there are ways to mitigate it and

00:25:43,669 --> 00:25:47,600
there are ways so and the mitigation

00:25:45,620 --> 00:25:49,670
could be very use cases that we can't

00:25:47,600 --> 00:25:53,750
get into that maybe

00:25:49,670 --> 00:25:56,360
in a minute but the first point I was

00:25:53,750 --> 00:26:00,880
trying to make non-secured execution and

00:25:56,360 --> 00:26:02,600
non-secure side software should be the

00:26:00,880 --> 00:26:05,150
design principle that we're trying

00:26:02,600 --> 00:26:07,700
follow is to minimize the impact on the

00:26:05,150 --> 00:26:13,580
non secure side software and it's real

00:26:07,700 --> 00:26:15,740
timeless that means there is onus on non

00:26:13,580 --> 00:26:18,560
secure soft software to return the

00:26:15,740 --> 00:26:20,090
context back to the secure side once it

00:26:18,560 --> 00:26:22,450
has done the critical part of the intro

00:26:20,090 --> 00:26:22,450
paneling

00:26:31,630 --> 00:26:36,320
yeah I mean you're right when you say

00:26:34,370 --> 00:26:38,000
the difference between TFA and TFM is

00:26:36,320 --> 00:26:39,860
that though you know there has to be a

00:26:38,000 --> 00:26:42,620
secure entity entity whether it's seal

00:26:39,860 --> 00:26:45,950
three or securio want to handle that

00:26:42,620 --> 00:26:47,750
transition and so but one of the other

00:26:45,950 --> 00:26:49,880
reasons that things get a handle on

00:26:47,750 --> 00:26:53,360
secure so first is that you know the

00:26:49,880 --> 00:26:54,950
secure OS vendors like liked her the you

00:26:53,360 --> 00:26:56,510
know if you're gonna go do things like

00:26:54,950 --> 00:26:58,789
certify ability you know you need to

00:26:56,510 --> 00:27:00,380
defend things like preemption and there

00:26:58,789 --> 00:27:01,669
has to be some sort of controlled exit

00:27:00,380 --> 00:27:04,250
from the secure worlds that skill what

00:27:01,669 --> 00:27:05,720
has time to solve do some bookkeeping or

00:27:04,250 --> 00:27:07,490
whatever else before going back to the

00:27:05,720 --> 00:27:08,740
non secure world man I think you're

00:27:07,490 --> 00:27:11,570
right this is probably different

00:27:08,740 --> 00:27:12,890
environment and in your design probably

00:27:11,570 --> 00:27:14,059
makes sense but it's something worth

00:27:12,890 --> 00:27:15,950
thinking about if you if you want to

00:27:14,059 --> 00:27:17,179
solve certify the whole whether you're

00:27:15,950 --> 00:27:18,590
looking it says find the whole system

00:27:17,179 --> 00:27:23,270
all parts of the system and things like

00:27:18,590 --> 00:27:26,000
that yeah that makes perfect sense when

00:27:23,270 --> 00:27:29,470
I started to think about the design for

00:27:26,000 --> 00:27:31,700
the Seekers I should order for the DFM I

00:27:29,470 --> 00:27:33,380
looked at these not the existing

00:27:31,700 --> 00:27:35,240
implementation and I looked at the

00:27:33,380 --> 00:27:36,470
opt-in Yoakam you're probably like I'm

00:27:35,240 --> 00:27:38,960
going to contradict what I'm going to

00:27:36,470 --> 00:27:43,970
say but I'll say it anyway when I looked

00:27:38,960 --> 00:27:45,710
at the optimization it helps a lot if

00:27:43,970 --> 00:27:47,870
you do the routing from the secure world

00:27:45,710 --> 00:27:49,909
because then you can have a sane exit

00:27:47,870 --> 00:27:51,890
from the secure world you sure you know

00:27:49,909 --> 00:27:54,380
the sickest eye shadow that is in sync

00:27:51,890 --> 00:27:56,720
with whatever is happening on CPU so it

00:27:54,380 --> 00:27:59,600
makes no sense to do that kind of

00:27:56,720 --> 00:28:01,130
routing from the secure side software

00:27:59,600 --> 00:28:03,890
point of view it makes the scheduler

00:28:01,130 --> 00:28:05,270
implementation a little little easy

00:28:03,890 --> 00:28:08,090
not a lot but it because you have a

00:28:05,270 --> 00:28:09,080
control exit and control entry you don't

00:28:08,090 --> 00:28:11,000
have to worry about too many

00:28:09,080 --> 00:28:14,350
asynchronous events happening in the

00:28:11,000 --> 00:28:14,350
secure side either

00:28:15,280 --> 00:28:21,010
the other aspect is having a control

00:28:18,200 --> 00:28:29,360
about the secure side execution and

00:28:21,010 --> 00:28:32,120
secure side be in charge of what CPU the

00:28:29,360 --> 00:28:33,890
current thinking is if there is a time

00:28:32,120 --> 00:28:35,929
critical event on the secure side that

00:28:33,890 --> 00:28:37,820
need to be handled that should be based

00:28:35,929 --> 00:28:40,000
on some sort of trigger some sort of

00:28:37,820 --> 00:28:41,840
interrupts and sort of watchdog or

00:28:40,000 --> 00:28:46,039
something

00:28:41,840 --> 00:28:47,779
some some way something which will

00:28:46,039 --> 00:28:50,000
asynchronously take the control back

00:28:47,779 --> 00:28:53,330
into the secure world so if he has some

00:28:50,000 --> 00:28:55,520
sort of tamper resistance mechanism that

00:28:53,330 --> 00:28:57,590
should had the internet for tamper

00:28:55,520 --> 00:29:00,860
resistance mechanism

00:28:57,590 --> 00:29:03,490
high enough priority to preempt the

00:29:00,860 --> 00:29:05,720
non-essential things on our less

00:29:03,490 --> 00:29:06,919
security critical things on the non

00:29:05,720 --> 00:29:11,539
secure side and take the control back

00:29:06,919 --> 00:29:12,820
into the secure world so that makes

00:29:11,539 --> 00:29:15,940
sense I guess you just got some

00:29:12,820 --> 00:29:18,230
complexity around you know yeah things

00:29:15,940 --> 00:29:19,490
kill world in a world prims that meant

00:29:18,230 --> 00:29:23,929
something high priority in the skill

00:29:19,490 --> 00:29:25,820
were preempts that and Goldie's didies

00:29:23,929 --> 00:29:33,230
didies there's quite a bit of complexity

00:29:25,820 --> 00:29:35,539
that I mean I think one thing to point

00:29:33,230 --> 00:29:37,490
out the you mentioned the denial of

00:29:35,539 --> 00:29:41,299
service from the non secure to the

00:29:37,490 --> 00:29:42,620
secure side and I think it's easy to see

00:29:41,299 --> 00:29:44,809
those where they're actually not really

00:29:42,620 --> 00:29:47,539
significant because there's so many

00:29:44,809 --> 00:29:49,100
other ways that you could deny things

00:29:47,539 --> 00:29:50,990
from the non secure side I mean for the

00:29:49,100 --> 00:29:52,669
most part on these platforms things like

00:29:50,990 --> 00:29:55,070
Network communications are happening

00:29:52,669 --> 00:29:56,840
from the non secure side and if you've

00:29:55,070 --> 00:29:58,760
compromised the non secure side you can

00:29:56,840 --> 00:30:00,830
prevent that from happening to and it

00:29:58,760 --> 00:30:02,670
wouldn't matter if you stopped a key

00:30:00,830 --> 00:30:04,980
signing from happening

00:30:02,670 --> 00:30:07,500
hand the data across anyway yeah

00:30:04,980 --> 00:30:09,750
absolutely and so do not have service

00:30:07,500 --> 00:30:13,230
for the use case is very difficult to

00:30:09,750 --> 00:30:15,720
mitigate however the denial of service

00:30:13,230 --> 00:30:18,420
for the security use cases for the

00:30:15,720 --> 00:30:20,670
device itself so if some tampering is

00:30:18,420 --> 00:30:22,860
going on for the device those are things

00:30:20,670 --> 00:30:25,260
which are a bit even more serious then

00:30:22,860 --> 00:30:27,360
the use case level around service so if

00:30:25,260 --> 00:30:28,730
some tampering is going on you would

00:30:27,360 --> 00:30:31,470
want to be able to handle that

00:30:28,730 --> 00:30:33,540
irrespective of what non-secure is

00:30:31,470 --> 00:30:36,110
trying to do so those are things that

00:30:33,540 --> 00:30:42,480
need to be handled asynchronously on the

00:30:36,110 --> 00:30:44,790
secure site software policy based so

00:30:42,480 --> 00:30:46,970
that you you might only interrupt if

00:30:44,790 --> 00:30:49,680
it's a higher the critical high

00:30:46,970 --> 00:30:53,220
criticality interrupt and not if it's a

00:30:49,680 --> 00:30:57,210
low so the VA term architecture allows

00:30:53,220 --> 00:30:58,710
you to set a policy that you can

00:30:57,210 --> 00:31:01,380
prioritize all of the secure side

00:30:58,710 --> 00:31:03,930
interrupts with with offset what that

00:31:01,380 --> 00:31:05,730
means is every intercom secure side will

00:31:03,930 --> 00:31:13,020
have higher priority than every nosy

00:31:05,730 --> 00:31:14,370
kevinturtle but yeah so every secure

00:31:13,020 --> 00:31:15,780
sighs interpret can be programmed to

00:31:14,370 --> 00:31:17,550
have higher priority than the non secure

00:31:15,780 --> 00:31:20,180
side interrupt but that's policy

00:31:17,550 --> 00:31:24,300
decision that's a policy decision for

00:31:20,180 --> 00:31:27,900
diversity use case at the architecture

00:31:24,300 --> 00:31:30,360
level we are not going to limit that our

00:31:27,900 --> 00:31:32,390
we will brought an option to do that but

00:31:30,360 --> 00:31:38,610
you're not going to limit that as a

00:31:32,390 --> 00:31:42,300
overarching solution when you're saying

00:31:38,610 --> 00:31:43,620
that the the you know the non secure

00:31:42,300 --> 00:31:45,420
site could get an interrupt that

00:31:43,620 --> 00:31:47,010
interrupts the secure site and so

00:31:45,420 --> 00:31:50,920
there's a responsibility for the non

00:31:47,010 --> 00:31:54,410
secure site to not block for so long but

00:31:50,920 --> 00:31:56,240
how's the context on the on the secure

00:31:54,410 --> 00:31:57,530
side restored then I mean where's that

00:31:56,240 --> 00:31:58,640
occurring or how's that happening

00:31:57,530 --> 00:31:59,690
because it seems like that that's an

00:31:58,640 --> 00:32:01,730
attack factor that

00:31:59,690 --> 00:32:04,060
yeah because we've taken advantage of

00:32:01,730 --> 00:32:08,450
from particularly he got networks

00:32:04,060 --> 00:32:10,130
traffic streamed in yeah so a lot of

00:32:08,450 --> 00:32:12,980
this is handled in the hardware itself

00:32:10,130 --> 00:32:15,560
the secure the non secure sorry doesn't

00:32:12,980 --> 00:32:17,120
get to see the context itself so it

00:32:15,560 --> 00:32:19,550
knows that it has preempted the secure

00:32:17,120 --> 00:32:22,820
sorry but it doesn't know what context

00:32:19,550 --> 00:32:24,320
it what was the action context frame or

00:32:22,820 --> 00:32:28,250
what was the execution happening on the

00:32:24,320 --> 00:32:30,500
other side so the ideal implementation

00:32:28,250 --> 00:32:32,780
would be that non secure side takes in

00:32:30,500 --> 00:32:35,780
trap Aaron says inter interrupt service

00:32:32,780 --> 00:32:37,670
routine at the end of the inter service

00:32:35,780 --> 00:32:40,190
routine it has to realize that it had

00:32:37,670 --> 00:32:42,680
preempted secure side execution so

00:32:40,190 --> 00:32:45,170
instead of doing it's returning to its

00:32:42,680 --> 00:32:50,600
own thread context its own schedule of

00:32:45,170 --> 00:32:54,440
context it has to do return to secure so

00:32:50,600 --> 00:32:56,420
the LR really the best value there is a

00:32:54,440 --> 00:32:58,940
magic number that you need to use when

00:32:56,420 --> 00:33:01,610
you do a return and that magic number is

00:32:58,940 --> 00:33:05,720
coded to there is a coding for that that

00:33:01,610 --> 00:33:08,720
L our value if that is specific L our

00:33:05,720 --> 00:33:12,230
values used the hardware knows that it

00:33:08,720 --> 00:33:16,160
is a return from secure non secure side

00:33:12,230 --> 00:33:20,200
execution to the secure side preempted

00:33:16,160 --> 00:33:23,770
context the hardware itself does the

00:33:20,200 --> 00:33:23,770
registration of the context

00:33:26,720 --> 00:33:32,700
is there a request to the architecture

00:33:29,940 --> 00:33:36,090
team to fix this so that the hardware

00:33:32,700 --> 00:33:38,250
would just know that when the non-secure

00:33:36,090 --> 00:33:41,460
side returned that it had preempted

00:33:38,250 --> 00:33:43,200
security would just go back there right

00:33:41,460 --> 00:33:45,950
that the it's transparent to the

00:33:43,200 --> 00:33:45,950
non-secure side

00:33:46,010 --> 00:33:53,279
so is the question that we need to have

00:33:50,820 --> 00:33:57,179
a harder learning solution to not allow

00:33:53,279 --> 00:33:58,740
non-secured well I'm saying that I mean

00:33:57,179 --> 00:34:00,570
there's still a denial of service if the

00:33:58,740 --> 00:34:03,270
non secure side doesn't ever decide to

00:34:00,570 --> 00:34:05,279
return from its interrupt but what it

00:34:03,270 --> 00:34:07,890
does do the return from interrupt that

00:34:05,279 --> 00:34:10,710
should just go back to the secure side

00:34:07,890 --> 00:34:13,200
without any knowledge that that's where

00:34:10,710 --> 00:34:20,280
we preempted all right yeah is that how

00:34:13,200 --> 00:34:27,000
it works there's no fix up of software

00:34:20,280 --> 00:34:28,889
anything that okay and even there is

00:34:27,000 --> 00:34:31,200
protection against malicious return as

00:34:28,889 --> 00:34:33,030
well so what you could do is even if

00:34:31,200 --> 00:34:35,399
there was no preemption you could just

00:34:33,030 --> 00:34:38,220
say return from the non secure world to

00:34:35,399 --> 00:34:41,149
the secure world and that if that is not

00:34:38,220 --> 00:34:43,200
mitigated that can allow preemption

00:34:41,149 --> 00:34:47,580
restoration of the context which was

00:34:43,200 --> 00:34:51,210
never there is there is there from a

00:34:47,580 --> 00:34:54,240
software side of the secure if you re

00:34:51,210 --> 00:34:57,210
entered through a different path so

00:34:54,240 --> 00:34:58,890
let's say I get an interrupt I go back

00:34:57,210 --> 00:35:00,900
to non secure non stay here for whatever

00:34:58,890 --> 00:35:03,570
reason doesn't actually return yeah and

00:35:00,900 --> 00:35:05,700
then I make another transition through

00:35:03,570 --> 00:35:07,020
another call so now what you know the

00:35:05,700 --> 00:35:09,270
non secure is in this kind of odd

00:35:07,020 --> 00:35:14,070
software State is that something we're

00:35:09,270 --> 00:35:16,619
dealing with yes so the non secure side

00:35:14,070 --> 00:35:19,680
can decide at the end of inter-service

00:35:16,619 --> 00:35:22,260
real routine they can decide to share in

00:35:19,680 --> 00:35:24,210
another non secure task and that can

00:35:22,260 --> 00:35:25,830
create another entry into the secure

00:35:24,210 --> 00:35:26,270
road I guess that's it now you are

00:35:25,830 --> 00:35:28,460
trying to

00:35:26,270 --> 00:35:30,260
I just think it was more directly from

00:35:28,460 --> 00:35:32,119
an interrupt handler if she took an

00:35:30,260 --> 00:35:34,010
interrupt and you interrupted the secure

00:35:32,119 --> 00:35:36,320
world secure interrupt handler or

00:35:34,010 --> 00:35:40,369
whatever and then the interrupt handler

00:35:36,320 --> 00:35:44,240
made a secure call in I mean do we

00:35:40,369 --> 00:35:48,290
handle that I guess the question the

00:35:44,240 --> 00:35:50,630
idea is to not allow call into the

00:35:48,290 --> 00:35:54,650
secure world in any of the privilege

00:35:50,630 --> 00:35:56,660
states so I'm not sure if yesterday's

00:35:54,650 --> 00:35:58,970
call but recently we did we made a

00:35:56,660 --> 00:36:01,040
change that transition from the non

00:35:58,970 --> 00:36:03,470
secure go to the secure world can only

00:36:01,040 --> 00:36:06,170
happen in the thread mode on the non

00:36:03,470 --> 00:36:08,810
secure side so if you make a call from

00:36:06,170 --> 00:36:12,020
the interrupt context that just gets

00:36:08,810 --> 00:36:16,790
rejected by the hardware itself so

00:36:12,020 --> 00:36:18,470
having said that having said that the

00:36:16,790 --> 00:36:21,320
non secure side can still decide to

00:36:18,470 --> 00:36:23,869
share another task on the non secure

00:36:21,320 --> 00:36:25,520
side and that task

00:36:23,869 --> 00:36:28,100
the second task can decide to make

00:36:25,520 --> 00:36:29,630
another call into the secure which is a

00:36:28,100 --> 00:36:33,920
perfectly valid scenario because that's

00:36:29,630 --> 00:36:36,050
how your preemption works you are out of

00:36:33,920 --> 00:36:38,090
the interpolator and then the the

00:36:36,050 --> 00:36:40,580
scheduled task can make another call

00:36:38,090 --> 00:36:44,060
into the secure world and this is a

00:36:40,580 --> 00:36:45,920
scenario that will be handled so that

00:36:44,060 --> 00:36:46,880
has to be handled on the secure side in

00:36:45,920 --> 00:36:49,280
software though

00:36:46,880 --> 00:36:51,800
didya sort of the notion of use context

00:36:49,280 --> 00:36:54,490
there is a lot of software that need to

00:36:51,800 --> 00:36:57,350
go to handle that kind of scenario and

00:36:54,490 --> 00:37:00,320
it is quite complex as you can imagine

00:36:57,350 --> 00:37:02,540
but to clarify one thing when the non

00:37:00,320 --> 00:37:04,460
secure interrupt handler occurs it

00:37:02,540 --> 00:37:07,310
actually needs to check to see if it

00:37:04,460 --> 00:37:09,020
interrupted a secure handler so I could

00:37:07,310 --> 00:37:12,200
do the special code back versus a

00:37:09,020 --> 00:37:14,300
regular return so when you look at the

00:37:12,200 --> 00:37:16,700
cellular essentially it's the scheduler

00:37:14,300 --> 00:37:18,640
that does return back to the any any

00:37:16,700 --> 00:37:20,420
context any context restoration or

00:37:18,640 --> 00:37:23,480
preemption is handled by the scheduler

00:37:20,420 --> 00:37:26,270
code and when you look at this any other

00:37:23,480 --> 00:37:28,310
scenario record what it will do is it

00:37:26,270 --> 00:37:30,619
will not look at the content of the LR

00:37:28,310 --> 00:37:33,080
it will just try to restore what was

00:37:30,619 --> 00:37:36,320
there was there in LR and the hardware

00:37:33,080 --> 00:37:37,110
makes sure that the LR value when the PM

00:37:36,320 --> 00:37:41,850
shall happen

00:37:37,110 --> 00:37:44,820
l r-value is the return to secure magic

00:37:41,850 --> 00:37:47,730
number so when the shadownet decides to

00:37:44,820 --> 00:37:50,670
go back to the secure world the denote

00:37:47,730 --> 00:37:52,680
security alert when it decides to come

00:37:50,670 --> 00:37:54,930
back to the old context so from the you

00:37:52,680 --> 00:37:56,700
know suggested earlier point of view it

00:37:54,930 --> 00:37:58,770
doesn't really need to know if it was a

00:37:56,700 --> 00:38:00,900
secure side execution that got preempted

00:37:58,770 --> 00:38:04,200
for all it knows it was just a

00:38:00,900 --> 00:38:08,130
non-secure task which got preempted by

00:38:04,200 --> 00:38:09,810
another context so the non secure

00:38:08,130 --> 00:38:12,420
schedule the point of view it it just

00:38:09,810 --> 00:38:16,680
preempted its own task and that task

00:38:12,420 --> 00:38:19,350
would have been saved by saving the LR

00:38:16,680 --> 00:38:21,390
value and when she really decide to go

00:38:19,350 --> 00:38:23,460
back to the implementer task it will

00:38:21,390 --> 00:38:26,520
just use that lr value which was there

00:38:23,460 --> 00:38:28,260
in the TCB and that will magically take

00:38:26,520 --> 00:38:30,480
the control back into the second so

00:38:28,260 --> 00:38:32,460
would it a simple answer to that

00:38:30,480 --> 00:38:36,360
question be there are no changes needed

00:38:32,460 --> 00:38:38,460
to the non secure side yes okay it is

00:38:36,360 --> 00:38:39,810
just going to say if you use TF m you

00:38:38,460 --> 00:38:43,580
don't have to change your scheduler on

00:38:39,810 --> 00:38:43,580
you non secure artists yeah

00:38:51,090 --> 00:38:57,930
yeah so that's what we are trying to do

00:38:54,570 --> 00:39:00,060
in all the other decent design decisions

00:38:57,930 --> 00:39:01,590
that we are trying to make is minimize

00:39:00,060 --> 00:39:07,410
the impact on the non-secure size

00:39:01,590 --> 00:39:09,660
software there is a subtle impact there

00:39:07,410 --> 00:39:11,840
I'll talk about that if you get some

00:39:09,660 --> 00:39:11,840
time

00:39:23,250 --> 00:39:28,410
so this is probably a dumb question but

00:39:26,580 --> 00:39:29,609
I'm gonna ask it anyway because I'm

00:39:28,410 --> 00:39:32,400
clearly not clever enough to filter

00:39:29,609 --> 00:39:35,160
myself but we have opti guys in the room

00:39:32,400 --> 00:39:37,290
and TFA guys in the room TFM guys in the

00:39:35,160 --> 00:39:39,840
room zephyr guys in the room I've worked

00:39:37,290 --> 00:39:43,290
on opti I've worked on TFA worked on

00:39:39,840 --> 00:39:46,740
I am worked on TFM but what strikes me

00:39:43,290 --> 00:39:49,020
is that we could probably do with like

00:39:46,740 --> 00:39:50,430
some unified view of what the driver

00:39:49,020 --> 00:39:52,950
model should be because I have a feeling

00:39:50,430 --> 00:39:54,480
that there's gonna be like 613 different

00:39:52,950 --> 00:39:57,570
New York drivers over their individual

00:39:54,480 --> 00:39:59,490
bugs in each of these projects and it

00:39:57,570 --> 00:40:01,080
would probably be good if there could be

00:39:59,490 --> 00:40:02,580
even if you don't have a unified driver

00:40:01,080 --> 00:40:03,690
model some agreement on how you interact

00:40:02,580 --> 00:40:06,720
with the drivers you can easily write

00:40:03,690 --> 00:40:08,340
glue code so that public drivers can

00:40:06,720 --> 00:40:10,140
have unified bug fixes to them for

00:40:08,340 --> 00:40:11,310
behavior and the IP is that probably

00:40:10,140 --> 00:40:13,770
gonna be talking to the same hardware

00:40:11,310 --> 00:40:15,810
most of the time anyway right I think

00:40:13,770 --> 00:40:20,220
it's a very valid problem to attack

00:40:15,810 --> 00:40:22,740
however is slightly beyond the scope of

00:40:20,220 --> 00:40:25,440
TSM because TFM is going to talk about

00:40:22,740 --> 00:40:27,230
very niche drivers which are very which

00:40:25,440 --> 00:40:29,580
are always going to be used by the DFM

00:40:27,230 --> 00:40:32,839
so maybe there is a value in

00:40:29,580 --> 00:40:36,119
standardization there I don't know today

00:40:32,839 --> 00:40:39,050
there is definitely value in learning

00:40:36,119 --> 00:40:41,070
from other people's worth how much

00:40:39,050 --> 00:40:46,369
standardization we can do for things

00:40:41,070 --> 00:40:46,369
like sow or things like PPC and PC

00:40:46,670 --> 00:40:55,920
yeah and and it's a system that eyes

00:40:50,280 --> 00:40:57,960
everybody senses but yeah I guess it's

00:40:55,920 --> 00:40:59,130
as more because you never know what

00:40:57,960 --> 00:41:00,360
things gonna get pulled into the secure

00:40:59,130 --> 00:41:02,100
world sometimes people might want to go

00:41:00,360 --> 00:41:03,330
actually I won't secure world to be in

00:41:02,100 --> 00:41:04,500
charge of all the networking I don't

00:41:03,330 --> 00:41:06,060
want a normal world to be and we're

00:41:04,500 --> 00:41:07,260
gonna have an API for doing that and

00:41:06,060 --> 00:41:09,780
suddenly you're gonna have to pull in

00:41:07,260 --> 00:41:11,640
networking drivers perhaps right yeah

00:41:09,780 --> 00:41:13,290
and at that point do you want to rewrite

00:41:11,640 --> 00:41:16,350
your you know Jonah rewrite from scratch

00:41:13,290 --> 00:41:18,150
network drivers for TFM or do you want

00:41:16,350 --> 00:41:19,140
to be able to leverage something that's

00:41:18,150 --> 00:41:21,000
been done elsewhere cuz I know that

00:41:19,140 --> 00:41:23,430
maybe you might have a network driver or

00:41:21,000 --> 00:41:24,720
you know TFA might end up with a network

00:41:23,430 --> 00:41:27,060
driver and at that point you want to be

00:41:24,720 --> 00:41:29,400
able to go okay but well I don't want to

00:41:27,060 --> 00:41:32,310
adulterate the logic that deals of the

00:41:29,400 --> 00:41:33,570
IP I'm happy to glue it in but and I

00:41:32,310 --> 00:41:35,490
know AB restricts as they obviously have

00:41:33,570 --> 00:41:38,910
to CMS's interface but really it's the

00:41:35,490 --> 00:41:41,490
fact that bug fixes across like the deal

00:41:38,910 --> 00:41:42,450
with the IP would it would be nice to be

00:41:41,490 --> 00:41:43,830
able to aggregate those across the

00:41:42,450 --> 00:41:46,790
projects in the same way rather than

00:41:43,830 --> 00:41:49,290
having to do a specific bug fix for each

00:41:46,790 --> 00:41:51,450
project given that you're gonna be

00:41:49,290 --> 00:41:54,590
dealing with the same IP yeah that makes

00:41:51,450 --> 00:41:54,590
perfect sense to me

00:41:56,640 --> 00:42:02,760
and a lot of drivers that we use in the

00:42:00,270 --> 00:42:05,780
software world anyway is usually

00:42:02,760 --> 00:42:09,570
borrowed from some standard code base so

00:42:05,780 --> 00:42:11,370
in a way it is kind of taken care of but

00:42:09,570 --> 00:42:14,580
not really not to the extent that you're

00:42:11,370 --> 00:42:18,320
proposing and I see that there is value

00:42:14,580 --> 00:42:38,850
in keeping everything to align and

00:42:18,320 --> 00:42:40,470
making use of the common knowledge on

00:42:38,850 --> 00:42:46,110
the current implementation what is

00:42:40,470 --> 00:42:49,110
exactly supported functions yes you're

00:42:46,110 --> 00:42:54,000
part of the crypto service you have

00:42:49,110 --> 00:42:56,520
quite good secure storage right now the

00:42:54,000 --> 00:42:58,950
split between so you don't have any of

00:42:56,520 --> 00:43:00,690
the blue boxes today some of this is

00:42:58,950 --> 00:43:04,590
going to be split and blue box when you

00:43:00,690 --> 00:43:07,350
start appearing we have the SPM we had

00:43:04,590 --> 00:43:08,730
the boot order and they will they will

00:43:07,350 --> 00:43:10,200
all save all the time and they'll also

00:43:08,730 --> 00:43:12,210
have new features things like things

00:43:10,200 --> 00:43:14,160
like scheduler things like in Trapani

00:43:12,210 --> 00:43:16,580
will keep coming but at the block level

00:43:14,160 --> 00:43:21,960
this block is there this block is there

00:43:16,580 --> 00:43:25,400
this order log block is there secure

00:43:21,960 --> 00:43:28,440
storage is there part of crypto is there

00:43:25,400 --> 00:43:30,300
this will appear soon you just you will

00:43:28,440 --> 00:43:35,160
see some things appearing in the next

00:43:30,300 --> 00:43:37,280
quarter and of course the users facing

00:43:35,160 --> 00:43:37,280
API

00:43:39,310 --> 00:43:44,060
yeah that's it from my side thank you

00:43:43,670 --> 00:43:47,240
everyone

00:43:44,060 --> 00:43:49,790
I'll hand or the control to you okay all

00:43:47,240 --> 00:44:00,020
right so we're gonna switch gear a

00:43:49,790 --> 00:44:02,210
little bit to something different so

00:44:00,020 --> 00:44:03,619
this is a question that will come up

00:44:02,210 --> 00:44:05,480
sooner or later no matter what you

00:44:03,619 --> 00:44:07,069
worked with so I usually talk about a

00:44:05,480 --> 00:44:08,839
certain project but this could be

00:44:07,069 --> 00:44:13,329
something for any project that deals

00:44:08,839 --> 00:44:15,589
with some kind of secure software so

00:44:13,329 --> 00:44:17,060
even though it's open source I mean as

00:44:15,589 --> 00:44:19,400
soon as something has been reviewed and

00:44:17,060 --> 00:44:21,349
it's being merged usually it takes quite

00:44:19,400 --> 00:44:24,500
a while until someone actually paid more

00:44:21,349 --> 00:44:26,210
attention to the code and that's the why

00:44:24,500 --> 00:44:28,420
we need to have some kind of audit or

00:44:26,210 --> 00:44:31,819
yeah some kind of review of the code and

00:44:28,420 --> 00:44:34,280
I will not give you any answers here I

00:44:31,819 --> 00:44:37,190
want you to give me the answers so I'm

00:44:34,280 --> 00:44:38,859
just presenting the problems so how can

00:44:37,190 --> 00:44:42,710
you do that for an open source project

00:44:38,859 --> 00:44:44,780
if we compared to our bigger SSE vendors

00:44:42,710 --> 00:44:45,260
OMS and so on they are doing this on

00:44:44,780 --> 00:44:48,980
their own

00:44:45,260 --> 00:44:51,980
and in this case for example for opti we

00:44:48,980 --> 00:44:55,339
have seen that some of the vendors they

00:44:51,980 --> 00:44:57,050
have done or it's but we don't really

00:44:55,339 --> 00:44:59,420
see the results on orders going back

00:44:57,050 --> 00:45:03,410
upstream so that's one of the problems

00:44:59,420 --> 00:45:04,970
that we have here so you can also you

00:45:03,410 --> 00:45:06,770
can try to raise some kind of funding

00:45:04,970 --> 00:45:09,800
for it so you can go away for example a

00:45:06,770 --> 00:45:11,660
hacker one if people are familiar with

00:45:09,800 --> 00:45:13,869
that so you can get a bunch of different

00:45:11,660 --> 00:45:16,520
skill the hackers in a certain area

00:45:13,869 --> 00:45:20,359
starting to pound on your software and

00:45:16,520 --> 00:45:23,270
trying to break it basically we have a

00:45:20,359 --> 00:45:27,290
CII initiative from Linux Foundation

00:45:23,270 --> 00:45:28,700
also that is something that you can you

00:45:27,290 --> 00:45:30,020
don't really need to raise any funds in

00:45:28,700 --> 00:45:32,180
that case but then you need to convince

00:45:30,020 --> 00:45:35,050
Linux Foundation instead that this is

00:45:32,180 --> 00:45:35,050
something useful to do

00:45:37,119 --> 00:45:42,170
we have never usual problems that show

00:45:40,219 --> 00:45:44,329
up when you start to discuss this when

00:45:42,170 --> 00:45:47,929
you do this kind of audit what kind of

00:45:44,329 --> 00:45:50,449
hardware should use if you ask a guy

00:45:47,929 --> 00:45:53,569
from Ti for example they would say use

00:45:50,449 --> 00:45:55,699
our Hardware hi silicon I use our

00:45:53,569 --> 00:45:57,439
hardware so that's that's also

00:45:55,699 --> 00:46:00,499
challenged here because you need to find

00:45:57,439 --> 00:46:03,410
some kind of suitable hardware and a

00:46:00,499 --> 00:46:05,539
follow-up to that is finding a suitable

00:46:03,410 --> 00:46:07,219
release and commit where you should do

00:46:05,539 --> 00:46:09,049
it and the most obvious thing is

00:46:07,219 --> 00:46:11,660
probably to just take some kind of

00:46:09,049 --> 00:46:13,939
stable release and make it on that but

00:46:11,660 --> 00:46:16,969
open source software as you all know

00:46:13,939 --> 00:46:19,609
it's quite rapid development so you have

00:46:16,969 --> 00:46:22,249
a some kind of certified or audited

00:46:19,609 --> 00:46:24,289
codebase and just two weeks later it

00:46:22,249 --> 00:46:30,619
could be kind of not really valid

00:46:24,289 --> 00:46:32,449
anymore the final thing that is shell

00:46:30,619 --> 00:46:34,249
result was yeah the first thing I said

00:46:32,449 --> 00:46:36,199
basic that we have seen that some

00:46:34,249 --> 00:46:39,199
companies are doing it internally but it

00:46:36,199 --> 00:46:44,839
doesn't really reach upstream but you

00:46:39,199 --> 00:46:47,059
can people companies like risk you're a

00:46:44,839 --> 00:46:50,059
plus they're well known in this area or

00:46:47,059 --> 00:46:53,509
for doing audits reviews and such but

00:46:50,059 --> 00:46:55,789
it's not for free if we say so which

00:46:53,509 --> 00:46:58,519
leads to the raise funding but I don't

00:46:55,789 --> 00:47:00,410
know so I asked you for ideas here what

00:46:58,519 --> 00:47:01,969
what do you think one should do we need

00:47:00,410 --> 00:47:05,119
an open source project when it comes to

00:47:01,969 --> 00:47:07,320
audits and is it needed I guess that's a

00:47:05,119 --> 00:47:10,800
yes I guess for everyone

00:47:07,320 --> 00:47:10,800
any comments

00:47:15,550 --> 00:47:19,419
[Music]

00:47:19,540 --> 00:47:24,290
yeah so with our open source software we

00:47:22,370 --> 00:47:25,580
have a small hypervisor system we

00:47:24,290 --> 00:47:28,310
usually do this as part of customer

00:47:25,580 --> 00:47:30,560
projects and typically we do that when

00:47:28,310 --> 00:47:33,770
the customer builds this into some kind

00:47:30,560 --> 00:47:36,530
of application that needs certification

00:47:33,770 --> 00:47:38,900
so it's it gets certified as part of a

00:47:36,530 --> 00:47:42,560
bigger project and if we want to get it

00:47:38,900 --> 00:47:45,290
certified in isolation then the way we

00:47:42,560 --> 00:47:47,420
do this is typically - yeah to invite

00:47:45,290 --> 00:47:49,880
customers to co-invest into this with us

00:47:47,420 --> 00:47:53,510
and then in exchange they get some extra

00:47:49,880 --> 00:47:55,880
from from us as a company such as a

00:47:53,510 --> 00:47:57,080
conversion license or some extra service

00:47:55,880 --> 00:47:59,480
or something like that so usually we

00:47:57,080 --> 00:48:01,700
invite investment in order to get our

00:47:59,480 --> 00:48:04,120
code certified and looked at after it

00:48:01,700 --> 00:48:04,120
has been written

00:48:12,210 --> 00:48:14,900
it's too

00:48:16,660 --> 00:48:22,360
I mean it seems like you know the

00:48:20,050 --> 00:48:24,640
raising the funding would be to get like

00:48:22,360 --> 00:48:27,940
a bug bounty or something like hacker

00:48:24,640 --> 00:48:29,740
one to have people you know try to break

00:48:27,940 --> 00:48:32,620
the code I mean it seems like well an

00:48:29,740 --> 00:48:34,270
arrow is in that position we have with

00:48:32,620 --> 00:48:38,250
the member companies - maybe on a note

00:48:34,270 --> 00:48:40,660
and I have them all to have a specific

00:48:38,250 --> 00:48:43,150
maybe fund or something for a specific

00:48:40,660 --> 00:48:45,670
project you say hey everybody if we if

00:48:43,150 --> 00:48:48,400
we all contribute X amount you know here

00:48:45,670 --> 00:48:49,450
here is the benefit from it and because

00:48:48,400 --> 00:48:52,840
I'm sure that groups don't currently

00:48:49,450 --> 00:48:54,160
have the funds you know they don't have

00:48:52,840 --> 00:48:57,040
thousands of dollars that put for bug

00:48:54,160 --> 00:48:59,080
bounties but it maybe there's some way

00:48:57,040 --> 00:49:00,310
when Eric and coordinate that because it

00:48:59,080 --> 00:49:04,300
seems like the company is it's not going

00:49:00,310 --> 00:49:06,750
to happen without some central entity

00:49:04,300 --> 00:49:09,790
trying to encourage you know

00:49:06,750 --> 00:49:10,960
participation it's probably only a

00:49:09,790 --> 00:49:12,820
handful of companies that are gonna I

00:49:10,960 --> 00:49:18,070
mean maybe arm should do it - maybe arm

00:49:12,820 --> 00:49:22,180
should try to encourage bug bounties in

00:49:18,070 --> 00:49:24,490
we actually we roughly a year ago we had

00:49:22,180 --> 00:49:26,920
a discussion about this so we kind of

00:49:24,490 --> 00:49:29,080
asked our members we had a ticket

00:49:26,920 --> 00:49:31,480
engineer all about hacker on and asked

00:49:29,080 --> 00:49:34,360
who are interested in this and there

00:49:31,480 --> 00:49:36,370
were interests but again I guess it

00:49:34,360 --> 00:49:39,970
failed on the things I mentioned here

00:49:36,370 --> 00:49:41,620
finding suitable hardware some reported

00:49:39,970 --> 00:49:44,050
back saying that we have already done it

00:49:41,620 --> 00:49:46,150
we don't want to do it again and so on

00:49:44,050 --> 00:49:47,860
but on the other hand this is something

00:49:46,150 --> 00:49:51,460
that you need to do over and over again

00:49:47,860 --> 00:49:53,380
you can't just do it once so but it's a

00:49:51,460 --> 00:49:57,330
it's a good idea and something we've

00:49:53,380 --> 00:49:57,330
already been touching a bit

00:50:01,760 --> 00:50:06,260
oh yeah I think I think that some

00:50:04,250 --> 00:50:08,030
ongoing activities like you said like

00:50:06,260 --> 00:50:09,740
you know obviously have to keep auditing

00:50:08,030 --> 00:50:11,300
but there's probably some upfront stuff

00:50:09,740 --> 00:50:14,150
as well that needs to be done just once

00:50:11,300 --> 00:50:16,250
and that's probably one of the first

00:50:14,150 --> 00:50:18,950
things like threat modeling coding

00:50:16,250 --> 00:50:21,619
standards training for the team all

00:50:18,950 --> 00:50:24,170
these things and that's probably easier

00:50:21,619 --> 00:50:28,430
to tackle in you know a one-off sort of

00:50:24,170 --> 00:50:30,080
funding round for the project and then I

00:50:28,430 --> 00:50:33,260
agree with you know Michael that the

00:50:30,080 --> 00:50:35,830
ongoing auditing and hardening of that

00:50:33,260 --> 00:50:37,940
is probably something that will cause a

00:50:35,830 --> 00:50:39,470
separate commercial agreement and maybe

00:50:37,940 --> 00:50:43,510
you know he's not actually part of the

00:50:39,470 --> 00:50:43,510
open-source offering itself

00:50:44,250 --> 00:50:51,510
okay now some of you maybe remember

00:50:48,010 --> 00:50:54,100
TrueCrypt they did I think it was a

00:50:51,510 --> 00:50:57,930
Kickstarter or IndieGoGo something so

00:50:54,100 --> 00:51:00,570
they raised some money to get some

00:50:57,930 --> 00:51:02,620
people to look at the code basically

00:51:00,570 --> 00:51:04,830
that's also something you can do but

00:51:02,620 --> 00:51:07,360
then you need to have a project that is

00:51:04,830 --> 00:51:09,580
well TrueCrypt everyone in the world

00:51:07,360 --> 00:51:11,950
what do you see that's that's quite easy

00:51:09,580 --> 00:51:13,510
to say that this is something that we

00:51:11,950 --> 00:51:15,820
should do but for smaller projects that

00:51:13,510 --> 00:51:18,030
still would need a lot of eyes I think

00:51:15,820 --> 00:51:23,590
that could be a little bit harder to do

00:51:18,030 --> 00:51:26,230
so yes they come back to your point

00:51:23,590 --> 00:51:29,020
about TrueCrypt everyone was using it

00:51:26,230 --> 00:51:30,220
and that's kind of my point is that it's

00:51:29,020 --> 00:51:34,090
hard to crowdsource

00:51:30,220 --> 00:51:36,100
security researchers given that if you

00:51:34,090 --> 00:51:37,270
haven't got something that's in the

00:51:36,100 --> 00:51:38,890
hands of everyone or if you haven't got

00:51:37,270 --> 00:51:39,790
something with wide distribution because

00:51:38,890 --> 00:51:41,590
that's part of the allure all right

00:51:39,790 --> 00:51:43,930
either you put really high bug bounties

00:51:41,590 --> 00:51:45,850
and then people aren't like oh I won't

00:51:43,930 --> 00:51:47,620
get that much cred for it but I'll get

00:51:45,850 --> 00:51:50,080
$10,000 so I probably still do it right

00:51:47,620 --> 00:51:52,780
or you go everyone has a samsung galaxy

00:51:50,080 --> 00:51:54,460
s6 if I break you know voice biometrics

00:51:52,780 --> 00:51:56,890
on this then I'll have loads of street

00:51:54,460 --> 00:51:58,450
cred so I'll probably do it anyway but

00:51:56,890 --> 00:51:59,890
if you're in the Middle where you need

00:51:58,450 --> 00:52:02,170
little eyeballs but you haven't got a

00:51:59,890 --> 00:52:04,390
product out there that I don't know

00:52:02,170 --> 00:52:05,470
well I feels like like that and said it

00:52:04,390 --> 00:52:08,280
feels like you kind of need to go back

00:52:05,470 --> 00:52:08,280
to basics before then

00:52:14,700 --> 00:52:17,450
once

00:52:21,609 --> 00:52:25,900
I wanted to comment on the challenge

00:52:24,160 --> 00:52:28,059
that you want to maintain the audit

00:52:25,900 --> 00:52:30,150
state so we found this especially hard

00:52:28,059 --> 00:52:32,440
to do with open source software and

00:52:30,150 --> 00:52:35,200
while it's possible to maintain a

00:52:32,440 --> 00:52:37,420
certified state I don't think it's

00:52:35,200 --> 00:52:39,190
possible to maintain an audit state and

00:52:37,420 --> 00:52:41,650
in both cases already you need a lot of

00:52:39,190 --> 00:52:45,150
organizational investment like you need

00:52:41,650 --> 00:52:47,440
to implement processes and stuff and

00:52:45,150 --> 00:52:50,170
that's really hard to do even for us as

00:52:47,440 --> 00:52:53,259
a company it's harder for a crass

00:52:50,170 --> 00:52:55,779
company or an open-source project I

00:52:53,259 --> 00:52:57,900
think I think it's possible to maintain

00:52:55,779 --> 00:53:00,009
a certified state because they come with

00:52:57,900 --> 00:53:01,299
change management procedures that you

00:53:00,009 --> 00:53:03,549
can implement even as an open source

00:53:01,299 --> 00:53:05,170
project but maintaining the order status

00:53:03,549 --> 00:53:10,029
I think impossible for an open source

00:53:05,170 --> 00:53:12,279
project you believe you believe that

00:53:10,029 --> 00:53:14,410
that's more like a snapshot you do one

00:53:12,279 --> 00:53:16,890
time and find all the most critical bugs

00:53:14,410 --> 00:53:16,890
and so on

00:53:20,109 --> 00:53:25,209
okay any more questions

00:53:25,349 --> 00:53:33,560
okay that's it Thanks

00:53:29,430 --> 00:53:38,570
[Applause]

00:53:33,560 --> 00:53:38,570

YouTube URL: https://www.youtube.com/watch?v=VsZUhY0n8yU


