Title: YVR18-218:Trusted Firmware M: Current Topics
Publication date: 2018-09-28
Playlist: Linaro Connect Vancouver 2018
Description: 
	This round table session is to focus on current topics of discussion for the Trusted Firmware-M project.  The session will be broken up into short presentations to introduce the background on topics and than discussion around the questions, issues, direction that the presentation raises.

An initial set of topics (subject to change):
* CI / testing
* Modularization of TFM
* Secure Services
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:08,190 --> 00:00:13,780
so some of the things I'm gonna talk

00:00:12,310 --> 00:00:16,090
about are going to touch on some of the

00:00:13,780 --> 00:00:18,880
topics that we've really already talked

00:00:16,090 --> 00:00:23,590
about to some extent again this is more

00:00:18,880 --> 00:00:28,300
of a discussion type of format and in

00:00:23,590 --> 00:00:32,259
some cases some of these will be covered

00:00:28,300 --> 00:00:35,620
more in depth in either previous talks

00:00:32,259 --> 00:00:37,719
or in later talks so for the for the

00:00:35,620 --> 00:00:39,039
overview of topics I wanted to talk a

00:00:37,719 --> 00:00:42,399
little bit more about the build

00:00:39,039 --> 00:00:44,589
strategies and how the images have to be

00:00:42,399 --> 00:00:47,019
created and packaged together this is

00:00:44,589 --> 00:00:48,399
kind of a complex thing when you're

00:00:47,019 --> 00:00:50,920
dealing with secure and non-secure

00:00:48,399 --> 00:00:54,899
images we're gonna talk a little bit

00:00:50,920 --> 00:00:57,789
briefly on the bootloader support and

00:00:54,899 --> 00:00:59,799
the device tree support bullet on here

00:00:57,789 --> 00:01:01,690
is really a kind of a I'll do a little

00:00:59,799 --> 00:01:06,340
bit of a summation of the session that

00:01:01,690 --> 00:01:07,840
we had yesterday concerning this and I'd

00:01:06,340 --> 00:01:09,759
like to say for the bootloader support

00:01:07,840 --> 00:01:12,670
David here is gonna have a nice

00:01:09,759 --> 00:01:16,060
presentation is it tomorrow or Thursday

00:01:12,670 --> 00:01:17,799
Thursday about the MCU booth and things

00:01:16,060 --> 00:01:23,710
that need to be added to really support

00:01:17,799 --> 00:01:27,189
the multiple image support so build

00:01:23,710 --> 00:01:29,619
strategy so if any how many of you have

00:01:27,189 --> 00:01:32,140
had experience building TFM and

00:01:29,619 --> 00:01:37,299
integrating it with Zephyr so so you've

00:01:32,140 --> 00:01:41,079
done it non armed people yeah so two or

00:01:37,299 --> 00:01:43,350
three people so how did you find that

00:01:41,079 --> 00:01:43,350
experience

00:01:52,579 --> 00:01:59,969
okay so you can go out and you can

00:01:57,570 --> 00:02:01,920
actually check out the the TFM

00:01:59,969 --> 00:02:05,250
repository today you can do a build and

00:02:01,920 --> 00:02:08,220
and it produces some some images that

00:02:05,250 --> 00:02:10,619
you can use you can do the same thing

00:02:08,220 --> 00:02:12,360
with Zephyr the issue is is that when

00:02:10,619 --> 00:02:15,000
you start trying to mix together the

00:02:12,360 --> 00:02:16,590
secure and non-secure you have to take a

00:02:15,000 --> 00:02:19,110
couple of things into consideration I

00:02:16,590 --> 00:02:20,940
mentioned this earlier you have to deal

00:02:19,110 --> 00:02:22,319
with the fact that your address space

00:02:20,940 --> 00:02:23,400
has been partitioned you have to deal

00:02:22,319 --> 00:02:26,489
with the fact that the peripherals have

00:02:23,400 --> 00:02:29,099
been partitioned as well so when you go

00:02:26,489 --> 00:02:32,579
and you link let's say Zephyr or another

00:02:29,099 --> 00:02:34,620
artists you have to understand that even

00:02:32,579 --> 00:02:37,170
though you may have an SRAM or a flash

00:02:34,620 --> 00:02:39,329
area of some size you actually only have

00:02:37,170 --> 00:02:42,329
access to a portion of it and it's also

00:02:39,329 --> 00:02:45,690
offset somewhere into that so when you

00:02:42,329 --> 00:02:49,319
create your your linking you have to do

00:02:45,690 --> 00:02:51,090
the right thing that doesn't even get

00:02:49,319 --> 00:02:54,000
you to the point of creating the final

00:02:51,090 --> 00:02:55,950
image so now you've got let's say you

00:02:54,000 --> 00:02:58,950
build TFM and you build Zephyr so now

00:02:55,950 --> 00:03:01,769
you have two binaries well how do you

00:02:58,950 --> 00:03:05,850
package these things together well one

00:03:01,769 --> 00:03:07,680
of them has to be put starting in an

00:03:05,850 --> 00:03:09,359
image format at one point and then the

00:03:07,680 --> 00:03:12,329
other has to be tacked on

00:03:09,359 --> 00:03:17,940
there's today there's a script that we

00:03:12,329 --> 00:03:20,100
use that kind of it's it's usable but

00:03:17,940 --> 00:03:22,470
it's not a great solution really what we

00:03:20,100 --> 00:03:23,760
would like to have happen is we would

00:03:22,470 --> 00:03:27,180
like to have one place where you say

00:03:23,760 --> 00:03:29,069
okay go build TFM go build Zephyr now

00:03:27,180 --> 00:03:31,530
package the thing because it will know

00:03:29,069 --> 00:03:33,870
where the locations of all the output

00:03:31,530 --> 00:03:35,370
objects are and then we would rather

00:03:33,870 --> 00:03:36,750
like to have one place where it

00:03:35,370 --> 00:03:39,660
understands how to how to stitch

00:03:36,750 --> 00:03:43,109
everything together today you have to do

00:03:39,660 --> 00:03:46,980
it manually so a combined solution like

00:03:43,109 --> 00:03:49,639
I said working in Zephyr my view of it

00:03:46,980 --> 00:03:52,860
is is that I would rather have a Zephyr

00:03:49,639 --> 00:03:53,310
target where I say go build TFM and it

00:03:52,860 --> 00:03:55,379
goes

00:03:53,310 --> 00:03:57,840
and since TFM uses CMake and we you see

00:03:55,379 --> 00:03:58,200
make it's just it jumps to a directory

00:03:57,840 --> 00:04:00,239
doesn't

00:03:58,200 --> 00:04:03,060
make and it knows where the images are

00:04:00,239 --> 00:04:05,489
okay and then you do a build with Zephyr

00:04:03,060 --> 00:04:09,720
and then you do a build with though I

00:04:05,489 --> 00:04:12,060
don't know like make make final image or

00:04:09,720 --> 00:04:13,470
something well some target and then it

00:04:12,060 --> 00:04:14,819
would actually stitch it together and do

00:04:13,470 --> 00:04:17,220
the proper thing now that doesn't save

00:04:14,819 --> 00:04:18,750
you from miss configuration of your

00:04:17,220 --> 00:04:20,700
security addresses and all that stuff

00:04:18,750 --> 00:04:27,960
but it does at least get you an image

00:04:20,700 --> 00:04:30,260
that let's put together properly out of

00:04:27,960 --> 00:04:32,100
curiosity I mean from a TFM perspective

00:04:30,260 --> 00:04:42,570
what what have you guys thought about

00:04:32,100 --> 00:04:50,280
how these things are packaged evolving

00:04:42,570 --> 00:04:52,770
topic for now the the problem of

00:04:50,280 --> 00:04:55,710
building the non secure side image and

00:04:52,770 --> 00:04:57,050
its handling those quotes if you're not

00:04:55,710 --> 00:04:59,970
getting a lot of thought about that

00:04:57,050 --> 00:05:02,820
currently at the current we are thinking

00:04:59,970 --> 00:05:05,700
is that you build your non secure image

00:05:02,820 --> 00:05:08,610
separately and the the secure side

00:05:05,700 --> 00:05:10,380
separately there is a script that

00:05:08,610 --> 00:05:12,000
combined combines the secure side

00:05:10,380 --> 00:05:15,810
boundary and unsecured to side boundary

00:05:12,000 --> 00:05:18,660
and science it together so and you can

00:05:15,810 --> 00:05:20,490
pass on the boundaries it already knows

00:05:18,660 --> 00:05:22,080
where is the secure side boundary you

00:05:20,490 --> 00:05:23,580
just need to provide the non secure side

00:05:22,080 --> 00:05:27,660
boundary and it knows how to combine it

00:05:23,580 --> 00:05:31,410
all together so that's where we are

00:05:27,660 --> 00:05:33,270
today I think a feedback would be very

00:05:31,410 --> 00:05:36,750
much appreciated about what direction it

00:05:33,270 --> 00:05:38,870
should take yeah so that that's what it

00:05:36,750 --> 00:05:38,870
is

00:05:39,420 --> 00:05:47,640
I guess the one thing I want to point

00:05:44,400 --> 00:05:49,080
out is also when there's one thing that

00:05:47,640 --> 00:05:50,460
we want to do when doing development

00:05:49,080 --> 00:05:53,670
usually we want to load all of the

00:05:50,460 --> 00:05:55,950
images in when you're building a final

00:05:53,670 --> 00:05:57,720
product it's usually very different

00:05:55,950 --> 00:06:02,390
generally the images will be updated

00:05:57,720 --> 00:06:05,310
independently that kind of thing so I

00:06:02,390 --> 00:06:07,110
don't know how to take that into play I

00:06:05,310 --> 00:06:08,580
mean from our perspective of course we

00:06:07,110 --> 00:06:11,790
want what's most convenient where we can

00:06:08,580 --> 00:06:13,320
type make at the top but we may need

00:06:11,790 --> 00:06:14,970
that case now it may just be that you

00:06:13,320 --> 00:06:17,670
build both images in them don't use the

00:06:14,970 --> 00:06:20,690
one if you're not updating it yeah for

00:06:17,670 --> 00:06:20,690
your update process

00:06:27,610 --> 00:06:32,180
just at firmware for a has a tool

00:06:29,960 --> 00:06:35,180
already called fit which does exactly

00:06:32,180 --> 00:06:37,699
that you can package the the different

00:06:35,180 --> 00:06:40,430
stage bootloader is the secure Wes and

00:06:37,699 --> 00:06:42,199
add certificates and it just generates a

00:06:40,430 --> 00:06:44,419
binary blob of wherever you say so you

00:06:42,199 --> 00:06:45,979
give it on the command line this image

00:06:44,419 --> 00:06:47,449
the certificate this image took this

00:06:45,979 --> 00:06:50,330
certificate and I think right now it's

00:06:47,449 --> 00:06:52,789
very TFA specific but there's no reason

00:06:50,330 --> 00:06:55,370
it needs to be TFA specific right and

00:06:52,789 --> 00:06:59,889
there's a twist just a directory and a

00:06:55,370 --> 00:07:02,690
list of certain certs and blobs

00:06:59,889 --> 00:07:04,789
aggregates together okay yeah we need to

00:07:02,690 --> 00:07:07,639
look into that MCU boot has pretty much

00:07:04,789 --> 00:07:09,259
the same kind of tool that almost does

00:07:07,639 --> 00:07:12,050
everything we need just not the second

00:07:09,259 --> 00:07:14,750
image so maybe the solution is to

00:07:12,050 --> 00:07:22,250
enhance that tool or something like that

00:07:14,750 --> 00:07:23,690
yeah thank you but there there might be

00:07:22,250 --> 00:07:26,360
more differences in the new thing that

00:07:23,690 --> 00:07:30,110
100 kilobytes of RAM versus you know

00:07:26,360 --> 00:07:31,580
three gigabytes is a lot different no I

00:07:30,110 --> 00:07:33,560
get that but I mean I'm just saying that

00:07:31,580 --> 00:07:35,599
if the tool is just stitching images

00:07:33,560 --> 00:07:36,830
together so it just seems like and it's

00:07:35,599 --> 00:07:38,750
taking certs and all that kind of stuff

00:07:36,830 --> 00:07:40,729
so it seems like there's some benefit to

00:07:38,750 --> 00:07:46,270
just leverage a common tool across all

00:07:40,729 --> 00:07:46,270
of this if possible okay

00:07:50,340 --> 00:08:00,040
yeah I agree please contribute there is

00:07:58,360 --> 00:08:01,450
another aspect to this there's a supply

00:08:00,040 --> 00:08:03,700
chain issue when you talk to him talking

00:08:01,450 --> 00:08:06,070
about the multi vendor scenarios where

00:08:03,700 --> 00:08:09,820
the secure side software could be

00:08:06,070 --> 00:08:14,320
developed by a security vendor secure

00:08:09,820 --> 00:08:16,630
software vendor and it is then when you

00:08:14,320 --> 00:08:17,950
are talking about multi vendor scenarios

00:08:16,630 --> 00:08:21,790
there is a security aspect of the

00:08:17,950 --> 00:08:24,130
firmware as well where you don't want

00:08:21,790 --> 00:08:27,610
the nonce you don't want the secure side

00:08:24,130 --> 00:08:30,520
image to be temporal by the people lower

00:08:27,610 --> 00:08:34,900
in the death supply chain so there's

00:08:30,520 --> 00:08:36,400
that aspect and today it is just third

00:08:34,900 --> 00:08:37,840
processing but we are very far from

00:08:36,400 --> 00:08:43,630
getting to a stage where we can secure

00:08:37,840 --> 00:08:46,330
the supply chain part of it but this is

00:08:43,630 --> 00:08:49,780
where I think the community can help and

00:08:46,330 --> 00:08:52,120
propose ideas and and basically comment

00:08:49,780 --> 00:08:55,420
ask questions in the unattested from a

00:08:52,120 --> 00:08:59,200
rod or project submit RFC submit

00:08:55,420 --> 00:09:01,150
proposals and and and if there is a

00:08:59,200 --> 00:09:05,620
contribution coming in coming in I don't

00:09:01,150 --> 00:09:07,810
think we'll ever as long as it makes us

00:09:05,620 --> 00:09:12,610
of course and and any contribution will

00:09:07,810 --> 00:09:16,420
be taken on board so today I mean we are

00:09:12,610 --> 00:09:18,250
focusing on providing a good programming

00:09:16,420 --> 00:09:21,220
model in the DFM because of the limited

00:09:18,250 --> 00:09:24,810
available capacity in the team so the

00:09:21,220 --> 00:09:28,210
focus is not too much on sorting out the

00:09:24,810 --> 00:09:30,450
nicer to have things so for me today

00:09:28,210 --> 00:09:33,940
from if I look at the today's priorities

00:09:30,450 --> 00:09:35,380
I'm having a very clear separation of or

00:09:33,940 --> 00:09:38,230
having a very abstracted way of

00:09:35,380 --> 00:09:41,350
combining images is something nice to

00:09:38,230 --> 00:09:44,830
have as long as we are providing a way

00:09:41,350 --> 00:09:47,110
of doing things and once you solve the

00:09:44,830 --> 00:09:49,570
the initial problem of having a full

00:09:47,110 --> 00:09:51,070
programming model for the TFM then we

00:09:49,570 --> 00:09:52,880
can come back and solve these problems

00:09:51,070 --> 00:09:55,970
but

00:09:52,880 --> 00:10:01,880
if there is a contribution useful is

00:09:55,970 --> 00:10:04,009
going to help and that kind of leads

00:10:01,880 --> 00:10:05,300
into the bootloader support because when

00:10:04,009 --> 00:10:07,339
you start talking about multiple images

00:10:05,300 --> 00:10:09,139
and updating specific pieces like you're

00:10:07,339 --> 00:10:13,009
saying I mean you may have multiple

00:10:09,139 --> 00:10:14,750
signed pieces some are provided by one

00:10:13,009 --> 00:10:17,420
group of people and then the others by

00:10:14,750 --> 00:10:19,130
the OEMs so and you want to be able to

00:10:17,420 --> 00:10:21,829
maybe update these independently of each

00:10:19,130 --> 00:10:23,449
other and that goes to David's comment

00:10:21,829 --> 00:10:25,040
about well you know how do you deal with

00:10:23,449 --> 00:10:27,380
these things you deal with it all in one

00:10:25,040 --> 00:10:31,699
piece or do you deal with it one at a

00:10:27,380 --> 00:10:34,100
time the general conclusion we've come

00:10:31,699 --> 00:10:36,709
to on that is that you have to handle

00:10:34,100 --> 00:10:38,420
but all of those that there will be a

00:10:36,709 --> 00:10:43,459
scenario that wants each of the things

00:10:38,420 --> 00:10:45,949
you can think of yeah so with respect to

00:10:43,459 --> 00:10:49,069
the bootloader today TFM uses a snapshot

00:10:45,949 --> 00:10:51,440
of MCU but-- I don't know what version

00:10:49,069 --> 00:10:55,490
it was but with some changes I think on

00:10:51,440 --> 00:10:59,329
top maybe it's not yeah roughly nine

00:10:55,490 --> 00:11:03,110
months old we do need some additional

00:10:59,329 --> 00:11:06,050
things added to the MCU but-- and i

00:11:03,110 --> 00:11:08,839
think the real answer to all this is

00:11:06,050 --> 00:11:10,670
instead of forking it we really need to

00:11:08,839 --> 00:11:13,100
be using the tip of MCU but-- and adding

00:11:10,670 --> 00:11:15,769
what we need to MCU but-- and carrying

00:11:13,100 --> 00:11:18,470
it forward and then consuming it back

00:11:15,769 --> 00:11:20,959
into the project I think that makes more

00:11:18,470 --> 00:11:23,029
sense and David's gonna have a

00:11:20,959 --> 00:11:25,160
presentation on Thursday about a lot of

00:11:23,029 --> 00:11:26,959
these things so please do go to that

00:11:25,160 --> 00:11:30,610
because it will be a very much deeper

00:11:26,959 --> 00:11:30,610
discussion about the bootloader

00:11:33,540 --> 00:11:36,870
so one of the interesting things we did

00:11:35,430 --> 00:11:39,480
running across when we were messing

00:11:36,870 --> 00:11:42,420
around with the musca is the fact that

00:11:39,480 --> 00:11:44,040
on that chip it doesn't have onboard

00:11:42,420 --> 00:11:46,830
flash it has an external flash which is

00:11:44,040 --> 00:11:49,290
super slow so when we do booting we

00:11:46,830 --> 00:11:52,290
actually want to copy it to a faster

00:11:49,290 --> 00:11:54,470
location so we can actually execute it

00:11:52,290 --> 00:11:57,480
doesn't take 70 cycles per instruction

00:11:54,470 --> 00:11:59,280
so so we put that on the end I mean

00:11:57,480 --> 00:12:01,680
there may be people that want that type

00:11:59,280 --> 00:12:11,100
of thing but there are definitely other

00:12:01,680 --> 00:12:14,550
features that we need to add running

00:12:11,100 --> 00:12:16,320
sick with water classic award is put

00:12:14,550 --> 00:12:18,900
another round in sequel what are not

00:12:16,320 --> 00:12:23,730
secure wad secure secure one it has to

00:12:18,900 --> 00:12:26,670
help to and ideally you you you don't

00:12:23,730 --> 00:12:29,240
ever want to update that piece you want

00:12:26,670 --> 00:12:32,310
it to be something that never changes so

00:12:29,240 --> 00:12:35,480
anything any of the other images perhaps

00:12:32,310 --> 00:12:39,480
you can upgrade upgrade but not that so

00:12:35,480 --> 00:12:42,870
that means the MCU after m0 set all the

00:12:39,480 --> 00:12:45,950
script response codes secure what happen

00:12:42,870 --> 00:12:49,050
a border right the hardware security

00:12:45,950 --> 00:12:52,530
feature that resume is enabled after

00:12:49,050 --> 00:12:54,870
hardware is yet yeah so we would not a

00:12:52,530 --> 00:12:57,060
switch you to a secret word in the put

00:12:54,870 --> 00:12:59,160
alone and put code well it starts secure

00:12:57,060 --> 00:13:01,410
it's time for me okay you you actually

00:12:59,160 --> 00:13:04,190
do demote at some point when you jump to

00:13:01,410 --> 00:13:04,190
the non secure image

00:13:08,500 --> 00:13:12,680
so any other questions on the bootloader

00:13:10,970 --> 00:13:15,970
before I touch a little bit on the

00:13:12,680 --> 00:13:15,970
discussions that we've had on the DT

00:13:18,459 --> 00:13:22,760
yeah

00:13:20,300 --> 00:13:26,589
the question was are we following the

00:13:22,760 --> 00:13:30,019
suit discussions and the answer is yes

00:13:26,589 --> 00:13:32,680
yeah David will update on that but he's

00:13:30,019 --> 00:13:38,680
been participating in those meetings

00:13:32,680 --> 00:13:41,329
suit is the ietf group that discusses

00:13:38,680 --> 00:13:50,420
bootloader support signing of images and

00:13:41,329 --> 00:13:51,950
all that stuff yeah it's a much better

00:13:50,420 --> 00:13:57,200
name than the previous one what was it

00:13:51,950 --> 00:14:00,350
Fudd yeah yeah another question on the

00:13:57,200 --> 00:14:01,940
bootloader MTU booty said that's not

00:14:00,350 --> 00:14:03,500
what date will like all the other film

00:14:01,940 --> 00:14:05,570
out firmware I guess that's on the

00:14:03,500 --> 00:14:08,089
assumption that that's that is the root

00:14:05,570 --> 00:14:09,980
trust in the system is there a

00:14:08,089 --> 00:14:19,029
consideration of moving to a rom based

00:14:09,980 --> 00:14:22,100
boot flowing in IOT devices I mean yes

00:14:19,029 --> 00:14:24,260
it kind of has to be for it to really be

00:14:22,100 --> 00:14:26,180
a root of trust you can you can fake it

00:14:24,260 --> 00:14:27,950
with some of these things where you're

00:14:26,180 --> 00:14:31,459
expecting the full MCU dude to be a

00:14:27,950 --> 00:14:32,899
neuron not some kind of you either I

00:14:31,459 --> 00:14:34,850
mean what ends up happening is you have

00:14:32,899 --> 00:14:37,070
a root of trust you need and it needs

00:14:34,850 --> 00:14:39,290
certain capabilities and that's

00:14:37,070 --> 00:14:41,810
basically what all MTD that's all that

00:14:39,290 --> 00:14:44,000
MTU boot has in it is the minimum things

00:14:41,810 --> 00:14:46,100
that you need for a root of trust

00:14:44,000 --> 00:14:47,360
bootloader so you could write another

00:14:46,100 --> 00:14:54,890
one but it would have to do everything

00:14:47,360 --> 00:14:57,140
that MCU boot does so well you know TFI

00:14:54,890 --> 00:15:00,350
angle but you know you could there could

00:14:57,140 --> 00:15:03,829
be a super minimal ROM which just what's

00:15:00,350 --> 00:15:05,240
the next still has to authenticate the

00:15:03,829 --> 00:15:06,949
next stage but only has to authenticate

00:15:05,240 --> 00:15:09,050
one thing if she's talking about

00:15:06,949 --> 00:15:11,540
authenticating a chain of trust with

00:15:09,050 --> 00:15:13,160
multiple images then that complexity

00:15:11,540 --> 00:15:15,140
could then be in a second state yeah you

00:15:13,160 --> 00:15:15,830
could do another stage there but you end

00:15:15,140 --> 00:15:18,560
up with a

00:15:15,830 --> 00:15:21,500
a 16 K bootloader that loads at 20 KB

00:15:18,560 --> 00:15:23,180
yeah yeah if this if it's that kind of

00:15:21,500 --> 00:15:27,640
size and it's not worth it yeah on a

00:15:23,180 --> 00:15:27,640
device that doesn't have that much

00:15:36,480 --> 00:15:43,180
she'll I'll just repeat your question I

00:15:40,110 --> 00:15:44,559
guess I'll try to understand you know

00:15:43,180 --> 00:15:46,870
because there are some vendors that have

00:15:44,559 --> 00:15:49,240
done this or there are broad-based

00:15:46,870 --> 00:15:53,949
secure loaders and you know that they

00:15:49,240 --> 00:15:56,740
they provide before you know with keys

00:15:53,949 --> 00:15:58,029
and and so forth in hardware so but in

00:15:56,740 --> 00:16:02,259
these systems that I just don't know

00:15:58,029 --> 00:16:05,410
we're in imagining a lot of the cortex a

00:16:02,259 --> 00:16:07,329
level systems your memories Rob's all

00:16:05,410 --> 00:16:09,220
that's or not Robyn's but you know the

00:16:07,329 --> 00:16:10,509
flashes these are so far off chip so

00:16:09,220 --> 00:16:12,610
they're accessible we're on these

00:16:10,509 --> 00:16:15,339
systems typically and the vast majority

00:16:12,610 --> 00:16:17,680
of them they're on there in the SOC so

00:16:15,339 --> 00:16:19,899
they're not typically you don't have

00:16:17,680 --> 00:16:22,689
that security problem potentially of

00:16:19,899 --> 00:16:24,309
someone having physical access to scan

00:16:22,689 --> 00:16:27,610
out or is that I'm not worried about the

00:16:24,309 --> 00:16:28,990
security problem on a GFI the the early

00:16:27,610 --> 00:16:31,360
firmware all the skill foam I was

00:16:28,990 --> 00:16:33,490
running on chip anyway usually depends

00:16:31,360 --> 00:16:35,230
on the design I'm more thinking from a

00:16:33,490 --> 00:16:37,269
robustness point keeping the ROM as

00:16:35,230 --> 00:16:41,709
small and simple as possible see not

00:16:37,269 --> 00:16:43,779
sure it's not broken harder so your

00:16:41,709 --> 00:16:46,120
absolute rule of trust you cannot have

00:16:43,779 --> 00:16:48,429
these same storage properties as the

00:16:46,120 --> 00:16:49,720
updatable root of trust because the

00:16:48,429 --> 00:16:53,319
whole point behind updatable root of

00:16:49,720 --> 00:16:55,179
trust and whole idea behind image

00:16:53,319 --> 00:16:59,290
authentication is that you're trusting

00:16:55,179 --> 00:17:00,730
the previous stage to do and you're

00:16:59,290 --> 00:17:03,670
believing that the first stage boot

00:17:00,730 --> 00:17:06,189
order cannot be tampered with so if the

00:17:03,670 --> 00:17:08,949
tampering proper trampling properties of

00:17:06,189 --> 00:17:10,779
the storage of the first boot order of

00:17:08,949 --> 00:17:17,470
trust is same as the update updatable

00:17:10,779 --> 00:17:20,130
from where then kind the point of doing

00:17:17,470 --> 00:17:22,179
the image check is kind of lost there

00:17:20,130 --> 00:17:25,559
because you can as well modify the

00:17:22,179 --> 00:17:29,890
bootloader which is doing the

00:17:25,559 --> 00:17:33,549
verification and then your whole stack

00:17:29,890 --> 00:17:35,470
so there is a need to have a non mutable

00:17:33,549 --> 00:17:39,640
root of trust which will do the initial

00:17:35,470 --> 00:17:41,230
which can do and and by the by the fact

00:17:39,640 --> 00:17:44,200
of being non mutable

00:17:41,230 --> 00:17:46,600
that need to be more trusted not not

00:17:44,200 --> 00:17:51,429
motor said but that need to be the

00:17:46,600 --> 00:17:55,179
absolutely love trust having said that

00:17:51,429 --> 00:17:57,070
if BL to the MC boot is going to be

00:17:55,179 --> 00:17:59,440
treated as the absolute of root of trust

00:17:57,070 --> 00:18:03,360
it cannot sit at the same flesh

00:17:59,440 --> 00:18:03,360
hierarchy as the runtime come where

00:18:08,760 --> 00:18:16,920
and the other

00:18:10,980 --> 00:18:20,400
okay so if I'm sure some of you attended

00:18:16,920 --> 00:18:24,330
the device tree support thing that we

00:18:20,400 --> 00:18:25,830
had yesterday but this is kind of gonna

00:18:24,330 --> 00:18:29,120
be a little distillation of the

00:18:25,830 --> 00:18:32,130
discussion that we had but but basically

00:18:29,120 --> 00:18:36,840
we currently already leverage DTS and

00:18:32,130 --> 00:18:39,660
zephyr we use that to describe mostly

00:18:36,840 --> 00:18:41,280
just the hardware and maybe some Zephyr

00:18:39,660 --> 00:18:44,610
specific things with the console you

00:18:41,280 --> 00:18:46,590
know something that chosen stuff but

00:18:44,610 --> 00:18:48,960
we've also had to kind of adapt that to

00:18:46,590 --> 00:18:53,790
deal with the secure and non-secure

00:18:48,960 --> 00:18:55,740
views of the system you basically we

00:18:53,790 --> 00:18:58,530
have systems where you have peripherals

00:18:55,740 --> 00:19:01,200
and memories that are addressable

00:18:58,530 --> 00:19:02,730
they're the same thing that's being

00:19:01,200 --> 00:19:05,280
accessed it's just that their access to

00:19:02,730 --> 00:19:08,250
different aliases and depending on what

00:19:05,280 --> 00:19:11,070
that alias is it it's a secure it's a

00:19:08,250 --> 00:19:12,900
non secure access there's an address bit

00:19:11,070 --> 00:19:16,410
that's being used at least on the Musco

00:19:12,900 --> 00:19:19,320
to determine that and for peripherals

00:19:16,410 --> 00:19:20,610
there's a PPC bid I think that's used to

00:19:19,320 --> 00:19:23,340
determine whether or not a peripheral is

00:19:20,610 --> 00:19:25,740
accessible via secure and on security

00:19:23,340 --> 00:19:27,930
but when we describe these things I mean

00:19:25,740 --> 00:19:30,630
from a DT standpoint the hardware is the

00:19:27,930 --> 00:19:34,290
hardware whether or not you're you're

00:19:30,630 --> 00:19:36,120
talking to a secure the non secure alias

00:19:34,290 --> 00:19:38,100
of the the thing it really doesn't

00:19:36,120 --> 00:19:40,050
matter but you do have to use the

00:19:38,100 --> 00:19:41,610
correct addressing so what we were

00:19:40,050 --> 00:19:43,350
talking about in the in the in the

00:19:41,610 --> 00:19:46,560
meeting yesterday was is that we wanted

00:19:43,350 --> 00:19:49,200
to leverage the use of ranges which is

00:19:46,560 --> 00:19:50,660
one of the device tree things that in

00:19:49,200 --> 00:19:54,570
the past has been used to deal with

00:19:50,660 --> 00:19:57,060
mappings of address spaces like PCI

00:19:54,570 --> 00:19:58,800
address space is a good example but in

00:19:57,060 --> 00:20:01,140
our case what we want to have happen is

00:19:58,800 --> 00:20:03,120
is that you're gonna have more than one

00:20:01,140 --> 00:20:04,380
way to address a peripheral but in the

00:20:03,120 --> 00:20:05,940
end when you decide whether or not

00:20:04,380 --> 00:20:09,450
you're secure non secure it needs to be

00:20:05,940 --> 00:20:10,620
able to delve out the correct view so

00:20:09,450 --> 00:20:12,800
that's really where I think we're gonna

00:20:10,620 --> 00:20:16,220
go with this if you look at the current

00:20:12,800 --> 00:20:19,200
pull request and I think it's 94 53

00:20:16,220 --> 00:20:21,030
you'll see that we basically split the

00:20:19,200 --> 00:20:22,020
device tree into two separate files one

00:20:21,030 --> 00:20:23,910
secure in one's now

00:20:22,020 --> 00:20:26,550
secured and based off of a cait config

00:20:23,910 --> 00:20:28,350
option we include one DTS I versus

00:20:26,550 --> 00:20:31,110
another and what that really means is is

00:20:28,350 --> 00:20:33,780
that where we're picking one view of the

00:20:31,110 --> 00:20:35,490
system versus another that's not gonna

00:20:33,780 --> 00:20:37,140
be how we really want this we really I

00:20:35,490 --> 00:20:39,090
think want to use ranges to do this

00:20:37,140 --> 00:20:40,710
where we have one file that has all the

00:20:39,090 --> 00:20:44,310
information and we don't steer it that

00:20:40,710 --> 00:20:48,150
way but where this comes down to is that

00:20:44,310 --> 00:20:50,340
NT FM we would really like to add the

00:20:48,150 --> 00:20:52,500
capability in t FM itself to also

00:20:50,340 --> 00:20:54,590
describe the system in a device tree

00:20:52,500 --> 00:20:56,730
standpoint so that we can actually

00:20:54,590 --> 00:20:59,070
validate the security settings across

00:20:56,730 --> 00:21:00,810
both images because that is one of the

00:20:59,070 --> 00:21:02,700
problems that we have is you can build

00:21:00,810 --> 00:21:05,040
one image one way build the other image

00:21:02,700 --> 00:21:07,350
they can completely conflict on some of

00:21:05,040 --> 00:21:08,730
these address space overlaps and when

00:21:07,350 --> 00:21:12,390
that happens you'll get a security fault

00:21:08,730 --> 00:21:15,000
and bad things happen at best you'll see

00:21:12,390 --> 00:21:16,220
an error at worst it just will not do

00:21:15,000 --> 00:21:19,890
anything anymore

00:21:16,220 --> 00:21:22,170
so so that's I think the way forward

00:21:19,890 --> 00:21:24,750
that we're gonna start I'm gonna start

00:21:22,170 --> 00:21:26,610
experimenting with is the DMA not the

00:21:24,750 --> 00:21:31,290
DMA ranges but the ranges property and

00:21:26,610 --> 00:21:34,740
try to pull all the DTS information back

00:21:31,290 --> 00:21:36,780
into a single file and I think that

00:21:34,740 --> 00:21:38,880
might be the last slide yeah it is so

00:21:36,780 --> 00:21:41,130
would it be possible I can hook up my

00:21:38,880 --> 00:21:42,720
laptop and actually show the two DTS is

00:21:41,130 --> 00:21:46,320
side-by-side so you can actually see

00:21:42,720 --> 00:21:48,560
what's going on let me do that real

00:21:46,320 --> 00:21:48,560
quick

00:21:52,840 --> 00:21:57,190
that's a big boy

00:22:27,130 --> 00:22:30,549
okay quick question just for the armed

00:22:29,679 --> 00:22:33,610
guys one of the things I've noticed

00:22:30,549 --> 00:22:37,330
about the the address bit that does the

00:22:33,610 --> 00:22:40,480
secure non secure it seems like in like

00:22:37,330 --> 00:22:43,270
90% of the cases I don't need to

00:22:40,480 --> 00:22:45,549
actually set that bit from the secure

00:22:43,270 --> 00:22:49,799
site I can access things as non secure

00:22:45,549 --> 00:22:52,960
addresses the few cases I've found are

00:22:49,799 --> 00:22:54,610
like non secure callable you have to

00:22:52,960 --> 00:22:56,799
have the bit set and to distinguish

00:22:54,610 --> 00:22:57,460
whether I our queues are secure and

00:22:56,799 --> 00:23:00,669
non-secure

00:22:57,460 --> 00:23:03,280
is there any problem if we were to just

00:23:00,669 --> 00:23:06,159
map most things as mom's secure and just

00:23:03,280 --> 00:23:08,530
use them that way because I mean it has

00:23:06,159 --> 00:23:12,159
to go to the MTA the essay anyway to

00:23:08,530 --> 00:23:13,630
find out the permissions so I mean we

00:23:12,159 --> 00:23:20,789
don't need that the conversation here

00:23:13,630 --> 00:23:20,789
I'm just kind of everything else

00:23:26,620 --> 00:23:32,780
if you're talking about this our

00:23:28,460 --> 00:23:35,990
Confederations they're not mandated so

00:23:32,780 --> 00:23:38,929
if you say that I'm going to let the PBC

00:23:35,990 --> 00:23:39,919
to do the arbitration sorry I'm going to

00:23:38,929 --> 00:23:41,720
be in PBC I'm going to configure

00:23:39,919 --> 00:23:45,169
everything has non-secure and let's our

00:23:41,720 --> 00:23:47,230
decide what to do then we are kind of

00:23:45,169 --> 00:23:50,620
creating a whole where if a

00:23:47,230 --> 00:23:53,660
implementation doesn't implement so and

00:23:50,620 --> 00:23:56,120
it relies on the restoration work to do

00:23:53,660 --> 00:23:59,890
the security then it makes a bit more

00:23:56,120 --> 00:23:59,890
complex to figure those things out

00:24:16,430 --> 00:24:20,420
because you you're running by default

00:24:18,720 --> 00:24:22,670
secure and secure can access either

00:24:20,420 --> 00:24:26,310
that's the only reason why it would work

00:24:22,670 --> 00:24:27,900
okay so the so many some talk was here

00:24:26,310 --> 00:24:29,550
that there are two modes there right the

00:24:27,900 --> 00:24:32,430
secure privileged and secured

00:24:29,550 --> 00:24:33,900
non-privileged secured privilege of

00:24:32,430 --> 00:24:36,840
course has access to the whole system

00:24:33,900 --> 00:24:40,470
including non secure world but when

00:24:36,840 --> 00:24:42,540
you're running services non privileged

00:24:40,470 --> 00:24:44,670
mode that's where the level two and

00:24:42,540 --> 00:24:47,280
level three come in the picture in which

00:24:44,670 --> 00:24:50,640
case your services do not have access to

00:24:47,280 --> 00:24:52,860
the yeah so I think I now understand

00:24:50,640 --> 00:24:55,470
your question that will probably not

00:24:52,860 --> 00:24:57,540
work it will work for the privileged

00:24:55,470 --> 00:24:59,430
part of this software because it can

00:24:57,540 --> 00:25:03,570
access anything it likes in the whole

00:24:59,430 --> 00:25:05,370
system not so much for the services so

00:25:03,570 --> 00:25:07,380
and in most of the cases the ownership

00:25:05,370 --> 00:25:09,180
of the the peripheral is going to be

00:25:07,380 --> 00:25:11,600
with the periphery over the service

00:25:09,180 --> 00:25:11,600
anyway

00:25:20,360 --> 00:25:27,720
it probably comes from the you know a

00:25:24,390 --> 00:25:30,480
telex actually you've got holes or more

00:25:27,720 --> 00:25:31,320
complex memory subsystem which has to

00:25:30,480 --> 00:25:34,110
travel through the memory subsystem

00:25:31,320 --> 00:25:36,960
through the caches and there it's very

00:25:34,110 --> 00:25:39,300
important not to have say the non secure

00:25:36,960 --> 00:25:41,040
accessing why non secure transactions

00:25:39,300 --> 00:25:43,260
and the skills are accessing by secure

00:25:41,040 --> 00:25:45,120
transactions you can get memory aliasing

00:25:43,260 --> 00:25:46,800
problems in the cache and things like

00:25:45,120 --> 00:25:49,830
that but probably don't apply to these

00:25:46,800 --> 00:25:51,630
systems but making assumptions about the

00:25:49,830 --> 00:25:55,770
memory subsystem is probably not a good

00:25:51,630 --> 00:25:57,510
thing yeah although cache is becoming a

00:25:55,770 --> 00:26:00,480
concern since they're starting to get

00:25:57,510 --> 00:26:03,180
added in but like David was saying I

00:26:00,480 --> 00:26:04,650
mean you can see the secure view is on

00:26:03,180 --> 00:26:07,800
the left the non secure view is on the

00:26:04,650 --> 00:26:09,540
right and you can see that the only

00:26:07,800 --> 00:26:12,030
reason why the flash is different is the

00:26:09,540 --> 00:26:14,610
offset because it has to be offset but

00:26:12,030 --> 00:26:16,470
basically there's a there's a bit a high

00:26:14,610 --> 00:26:18,660
bit that's used to discern whether or

00:26:16,470 --> 00:26:21,030
not you're secure and non-secure and

00:26:18,660 --> 00:26:24,000
it's a cheap way of doing it it's that's

00:26:21,030 --> 00:26:25,860
really I think what it comes down to but

00:26:24,000 --> 00:26:27,570
right now we're maintaining these two

00:26:25,860 --> 00:26:31,500
files separately and it would really be

00:26:27,570 --> 00:26:33,750
best if they were folded all into one so

00:26:31,500 --> 00:26:36,630
that we don't have to because really the

00:26:33,750 --> 00:26:39,840
SystemVue is is it doesn't matter from a

00:26:36,630 --> 00:26:45,150
system perspective there's an address

00:26:39,840 --> 00:26:46,350
space that backs these aliases so but at

00:26:45,150 --> 00:26:48,060
least now you can see what we're talking

00:26:46,350 --> 00:26:50,520
about when we talk about the fact that

00:26:48,060 --> 00:26:53,510
it's the same peripherals but it's a

00:26:50,520 --> 00:26:56,340
slightly it's a different address alias

00:26:53,510 --> 00:26:58,350
so and as David said you know if you're

00:26:56,340 --> 00:26:59,820
running privilege secure it doesn't

00:26:58,350 --> 00:27:02,070
matter which address space you're using

00:26:59,820 --> 00:27:05,070
it'll work but the moment that you go

00:27:02,070 --> 00:27:07,110
unprivileged all you know it's it's all

00:27:05,070 --> 00:27:08,730
off because you it depends then on the

00:27:07,110 --> 00:27:12,030
security settings and what what the

00:27:08,730 --> 00:27:14,800
essay is doing so

00:27:12,030 --> 00:27:23,250
so I think we're right up to the end or

00:27:14,800 --> 00:27:26,280
me yeah okay so any quick questions okay

00:27:23,250 --> 00:27:26,280
thank you

00:27:30,480 --> 00:27:35,489

YouTube URL: https://www.youtube.com/watch?v=cDXd99j0i7s


