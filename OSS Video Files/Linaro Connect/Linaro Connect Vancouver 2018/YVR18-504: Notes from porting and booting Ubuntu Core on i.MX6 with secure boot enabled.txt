Title: YVR18-504: Notes from porting and booting Ubuntu Core on i.MX6 with secure boot enabled
Publication date: 2018-10-22
Playlist: Linaro Connect Vancouver 2018
Description: 
	The presentation is sharing the observations and notes from porting and booting Ubuntu Core with secure boot enabled on NXP's i.MX6 SoC. Ubuntu Core is one of the OSes for gateways thus I find it very valuable to share the experience and discuss challenges such as enabling secure boot and dealing with out-of-tree kernel drivers. The main objective is to show the effort required to enable ARM hardware with Ubuntu Core.
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:07,889 --> 00:00:13,839
so never I have imagined that year after

00:00:11,429 --> 00:00:17,260
finishing assignment at the light group

00:00:13,839 --> 00:00:19,630
I will be back here but here I am and

00:00:17,260 --> 00:00:22,570
basically I will tell you our lesson

00:00:19,630 --> 00:00:26,740
learned on how did we enable the Ubuntu

00:00:22,570 --> 00:00:29,050
core and imx6 but before we start first

00:00:26,740 --> 00:00:31,539
things first I'm speaking here but the

00:00:29,050 --> 00:00:34,450
whole team has been working on this and

00:00:31,539 --> 00:00:36,430
if any of you will find this information

00:00:34,450 --> 00:00:37,030
valuable and would like to buy me a beer

00:00:36,430 --> 00:00:40,329
or something

00:00:37,030 --> 00:00:41,980
those guys should get it first and they

00:00:40,329 --> 00:00:44,829
are just nicely spread that around the

00:00:41,980 --> 00:00:46,719
world for your convenience so whichever

00:00:44,829 --> 00:00:50,320
timezone you are in you probably will

00:00:46,719 --> 00:00:52,719
meet at least one of them so the whole

00:00:50,320 --> 00:00:56,829
team engineer that and that was a great

00:00:52,719 --> 00:01:00,489
work and what actually I've been are we

00:00:56,829 --> 00:01:04,540
talking to today so we have this iMac

00:01:00,489 --> 00:01:07,000
six URL and I will actually not pretend

00:01:04,540 --> 00:01:08,890
on this conference in this group of

00:01:07,000 --> 00:01:11,979
people that I actually understand what

00:01:08,890 --> 00:01:14,229
the colors here mean I just put it for a

00:01:11,979 --> 00:01:18,939
moment this slide but the important part

00:01:14,229 --> 00:01:20,020
is that is cortex and that's usually

00:01:18,939 --> 00:01:22,770
solves all the problems

00:01:20,020 --> 00:01:25,840
oh it's cortex 10 we are good to go and

00:01:22,770 --> 00:01:27,850
it has high assurance boot which was

00:01:25,840 --> 00:01:32,680
important in this case for secure boot

00:01:27,850 --> 00:01:36,729
and it has these fuses as well so we are

00:01:32,680 --> 00:01:39,520
kind of a good to go but that was a by

00:01:36,729 --> 00:01:45,009
the way custom hardware based on given

00:01:39,520 --> 00:01:48,250
to six URL just paid for built for the

00:01:45,009 --> 00:01:50,380
purpose so we're kind of like okay it's

00:01:48,250 --> 00:01:52,540
cortex so if that's good it has high

00:01:50,380 --> 00:01:57,460
assurance boot that's good it has fuses

00:01:52,540 --> 00:02:01,119
it's even better and well but can we

00:01:57,460 --> 00:02:03,969
even run something on it so pretty much

00:02:01,119 --> 00:02:08,100
like first look like is it upstream

00:02:03,969 --> 00:02:12,250
supported somehow cortex obviously and

00:02:08,100 --> 00:02:13,060
the FSL OTP driver is in the kernel tree

00:02:12,250 --> 00:02:16,960
so

00:02:13,060 --> 00:02:20,140
we are good there Hirsch runs boot is

00:02:16,960 --> 00:02:24,580
supported by your boot like I think 2014

00:02:20,140 --> 00:02:28,000
more since 2014 maybe so we are 2018 so

00:02:24,580 --> 00:02:30,640
that's good as well and what we had to

00:02:28,000 --> 00:02:32,380
based on as a reference was the existing

00:02:30,640 --> 00:02:34,030
key octa based image that run on this

00:02:32,380 --> 00:02:36,340
board so we knew that

00:02:34,030 --> 00:02:38,680
well it didn't has the secure boot dough

00:02:36,340 --> 00:02:40,120
but like we knew that it's just the

00:02:38,680 --> 00:02:42,520
engineering that's needed to get it

00:02:40,120 --> 00:02:45,300
there and like the board will just

00:02:42,520 --> 00:02:48,970
operate just fine all we had to do

00:02:45,300 --> 00:02:53,980
actually is to make some kernel and the

00:02:48,970 --> 00:02:57,520
you boot considerations so like Yocto

00:02:53,980 --> 00:03:00,880
based BSP was centered around the when I

00:02:57,520 --> 00:03:03,760
guess that thing launched which is kind

00:03:00,880 --> 00:03:05,470
of an old compared to today although if

00:03:03,760 --> 00:03:07,000
you think about many devices and

00:03:05,470 --> 00:03:09,070
especially about what was set at a

00:03:07,000 --> 00:03:10,810
keynote in the Monday about like the

00:03:09,070 --> 00:03:13,150
head you need for a car running like

00:03:10,810 --> 00:03:16,320
Colonel three point something it was

00:03:13,150 --> 00:03:18,580
fairly new but still we had a colonel

00:03:16,320 --> 00:03:25,330
four point one and he had a you boot

00:03:18,580 --> 00:03:27,549
from around 2015 there and that was that

00:03:25,330 --> 00:03:31,030
would be fine I guess just to move it

00:03:27,549 --> 00:03:34,989
along but we had some constraints which

00:03:31,030 --> 00:03:40,180
are like Ubuntu core specific so wonder

00:03:34,989 --> 00:03:44,410
core 16 is based on 1604 LTS release and

00:03:40,180 --> 00:03:48,549
that means that it requires 4.4 kernel

00:03:44,410 --> 00:03:49,950
because that's the base there so that's

00:03:48,549 --> 00:03:53,890
the first things that we need to

00:03:49,950 --> 00:03:56,440
remember about and then also a quick

00:03:53,890 --> 00:03:58,390
research show that you just want to use

00:03:56,440 --> 00:04:00,730
a newer version of your boot because of

00:03:58,390 --> 00:04:03,400
the development time that happened since

00:04:00,730 --> 00:04:07,810
2015 it just it is just better with high

00:04:03,400 --> 00:04:10,360
assurance boot and I haven't told you

00:04:07,810 --> 00:04:11,950
that before but there was like it

00:04:10,360 --> 00:04:14,620
doesn't matter for the whole secure boot

00:04:11,950 --> 00:04:17,290
thing in here but there was also a quad

00:04:14,620 --> 00:04:19,660
core module that required you qualcomm

00:04:17,290 --> 00:04:23,410
Wi-Fi bluetooth module that required a

00:04:19,660 --> 00:04:26,229
torii driver for the specifics of the

00:04:23,410 --> 00:04:26,710
Wi-Fi that were supposed to be supported

00:04:26,229 --> 00:04:28,330
and either

00:04:26,710 --> 00:04:30,310
to be supported and just upstream driver

00:04:28,330 --> 00:04:33,759
couldn't do that modes and and all that

00:04:30,310 --> 00:04:36,789
stuff so that has to be included in the

00:04:33,759 --> 00:04:39,520
kernel but it's just irrelevant we could

00:04:36,789 --> 00:04:43,509
just run just fine without it just Wi-Fi

00:04:39,520 --> 00:04:46,000
wouldn't work okay so we basic in you

00:04:43,509 --> 00:04:48,099
I want to for that for one to Coronel

00:04:46,000 --> 00:04:50,289
for that for that we need to use as a

00:04:48,099 --> 00:04:55,750
base and we should use a newer version

00:04:50,289 --> 00:04:57,970
of you boot and so we settled we settled

00:04:55,750 --> 00:05:00,340
that the kind of for the for the you

00:04:57,970 --> 00:05:03,880
would was from 2017 that was that branch

00:05:00,340 --> 00:05:06,759
which was used and like the whole effort

00:05:03,880 --> 00:05:07,330
of actually forward porting the for that

00:05:06,759 --> 00:05:09,789
one

00:05:07,330 --> 00:05:13,330
Freescale kernel frisky bales kernel to

00:05:09,789 --> 00:05:16,300
the 4.4 Ubuntu kernel was basically just

00:05:13,330 --> 00:05:18,159
the effort required we perfectly knew

00:05:16,300 --> 00:05:20,680
what's gonna be an outcome of that kind

00:05:18,159 --> 00:05:22,419
of forward porting tasks the patches

00:05:20,680 --> 00:05:25,060
will either apply or not and that's it

00:05:22,419 --> 00:05:27,699
and then it will just require some

00:05:25,060 --> 00:05:30,340
finite amount of shuffling C code to get

00:05:27,699 --> 00:05:33,400
them working if they did not so the

00:05:30,340 --> 00:05:35,650
outcome is it's known it's low

00:05:33,400 --> 00:05:37,750
uncertainty all you need to do is to put

00:05:35,650 --> 00:05:39,550
some effort and and basically spend some

00:05:37,750 --> 00:05:43,330
lovely time on just applying the patches

00:05:39,550 --> 00:05:46,150
and and seeing if it works validating if

00:05:43,330 --> 00:05:47,469
all the features are actually working as

00:05:46,150 --> 00:05:50,139
as ordered

00:05:47,469 --> 00:05:53,979
basically so kind of a baked it to order

00:05:50,139 --> 00:05:56,650
and when I run it if on the kernel of

00:05:53,979 --> 00:06:01,270
how much patches we added so it was

00:05:56,650 --> 00:06:06,280
about 180 patches on top of the Ubuntu

00:06:01,270 --> 00:06:08,680
4.4 kernel and what is important in here

00:06:06,280 --> 00:06:10,690
that a boon to core due to the

00:06:08,680 --> 00:06:13,599
confinement that it offers which is

00:06:10,690 --> 00:06:16,599
based primarily on the apparmor requires

00:06:13,599 --> 00:06:19,599
certain former convicts to be enabled

00:06:16,599 --> 00:06:21,400
and also a polymer patches to be applied

00:06:19,599 --> 00:06:22,930
on top of the kernel that you would Cal

00:06:21,400 --> 00:06:25,719
you would get from the kernel org

00:06:22,930 --> 00:06:28,570
basically so what's beneficial to base

00:06:25,719 --> 00:06:30,789
it on the Ubuntu based kernels from the

00:06:28,570 --> 00:06:34,110
one to Colonel site because those

00:06:30,789 --> 00:06:37,029
basically have all of those that bits in

00:06:34,110 --> 00:06:38,979
and the herbal was even simpler it was

00:06:37,029 --> 00:06:40,490
like 30 patches and most of them were

00:06:38,979 --> 00:06:42,710
actually the

00:06:40,490 --> 00:06:45,080
specifics like configuration options and

00:06:42,710 --> 00:06:47,180
such not much actually

00:06:45,080 --> 00:06:50,240
shuffling C code there which was good

00:06:47,180 --> 00:06:56,419
was just pretty much clean Gita Yemen

00:06:50,240 --> 00:06:59,900
which worked so we got the we got the

00:06:56,419 --> 00:07:02,120
colonel after some weeks of shuffling C

00:06:59,900 --> 00:07:05,419
code we got a new book compiled and

00:07:02,120 --> 00:07:07,849
billed for that board and not the fun

00:07:05,419 --> 00:07:09,860
part begins because how do we go from

00:07:07,849 --> 00:07:13,069
the colonel and from the u-boat to

00:07:09,860 --> 00:07:14,810
actually do pond to car what do we do

00:07:13,069 --> 00:07:17,539
there especially because we just wanted

00:07:14,810 --> 00:07:19,970
to enable a secure boot for like very

00:07:17,539 --> 00:07:23,659
first time for us and we've been pretty

00:07:19,970 --> 00:07:28,120
much unsure of how will how is going to

00:07:23,659 --> 00:07:30,770
be engineered and the problem there or

00:07:28,120 --> 00:07:34,280
it's not a problem per se but just the

00:07:30,770 --> 00:07:35,900
complexity in here was kind of a coming

00:07:34,280 --> 00:07:38,330
from how the Ubuntu core is structured

00:07:35,900 --> 00:07:40,400
which is by the way perfectly fine for

00:07:38,330 --> 00:07:43,930
the security that it offers and for the

00:07:40,400 --> 00:07:46,400
IOT devices so compared to the like

00:07:43,930 --> 00:07:50,360
classical line of system the one toe

00:07:46,400 --> 00:07:51,919
core is a whole new world like the

00:07:50,360 --> 00:07:54,469
classic Linux system is basically

00:07:51,919 --> 00:07:57,259
everything is in the one bag libraries

00:07:54,469 --> 00:07:59,599
kernel root filesystem and everything

00:07:57,259 --> 00:08:01,969
just leaves in one space and a bundle

00:07:59,599 --> 00:08:05,210
core provides you a separation of the

00:08:01,969 --> 00:08:07,639
layers so that the kernel is separated

00:08:05,210 --> 00:08:09,199
the the hardware definitions are

00:08:07,639 --> 00:08:13,219
separated the operating system is

00:08:09,199 --> 00:08:15,650
separated and applications run obviously

00:08:13,219 --> 00:08:18,020
in a confinement so that they don't see

00:08:15,650 --> 00:08:21,500
each other and there are three

00:08:18,020 --> 00:08:24,469
components that shape this there's the

00:08:21,500 --> 00:08:27,039
kernel snap applications are delivered

00:08:24,469 --> 00:08:29,419
as a snaps the snaps is a format of

00:08:27,039 --> 00:08:31,539
sharing applications in Ubuntu core so

00:08:29,419 --> 00:08:34,159
the kernel is delivered as a kernel snap

00:08:31,539 --> 00:08:38,659
then the hardware definitions such as

00:08:34,159 --> 00:08:41,000
the new boot for example or the exposed

00:08:38,659 --> 00:08:43,610
serial ports and all the stuff comes as

00:08:41,000 --> 00:08:46,089
a gadget snap and then there's course

00:08:43,610 --> 00:08:51,020
snap and application snaps on top of it

00:08:46,089 --> 00:08:53,420
and as a consequence the snaps provide

00:08:51,020 --> 00:08:55,790
separations you build a parent snap

00:08:53,420 --> 00:08:57,829
lately and you'll be build the gadgets

00:08:55,790 --> 00:08:59,959
not with you but separately so if you

00:08:57,829 --> 00:09:03,800
have to create a fit image and just have

00:08:59,959 --> 00:09:05,149
things be like shared between them you

00:09:03,800 --> 00:09:08,180
just cannot do that because they come

00:09:05,149 --> 00:09:11,180
from different code bases or like from

00:09:08,180 --> 00:09:13,790
different git repositories so that was a

00:09:11,180 --> 00:09:16,070
challenge on how to actually okay

00:09:13,790 --> 00:09:19,519
how do we just do this chain of trust so

00:09:16,070 --> 00:09:21,230
that we have this huge validating the

00:09:19,519 --> 00:09:23,329
kernel and and all that stuff and that

00:09:21,230 --> 00:09:25,209
they all see each other even though we

00:09:23,329 --> 00:09:28,040
just kind of a build them separately and

00:09:25,209 --> 00:09:30,529
from the application point of view like

00:09:28,040 --> 00:09:32,740
they are installed from the from the

00:09:30,529 --> 00:09:35,480
Windows Store where all the snaps leaves

00:09:32,740 --> 00:09:37,339
they are just separate entities we can

00:09:35,480 --> 00:09:42,079
just delete one and still have a second

00:09:37,339 --> 00:09:44,540
one and the thing was like how do we

00:09:42,079 --> 00:09:46,610
even sign stuff but that was like the

00:09:44,540 --> 00:09:48,310
internal considerations how do we

00:09:46,610 --> 00:09:51,500
engineer our infrastructure within

00:09:48,310 --> 00:09:53,029
within a large button that we sign the

00:09:51,500 --> 00:09:55,070
gadget that we sign the kernel with

00:09:53,029 --> 00:09:57,230
proper keys so that this can be

00:09:55,070 --> 00:09:59,959
validated and not to mention that those

00:09:57,230 --> 00:10:03,190
keys has to be baked into the hardware

00:09:59,959 --> 00:10:05,149
to basically offer the runtime

00:10:03,190 --> 00:10:10,310
validation that this is a trusted

00:10:05,149 --> 00:10:14,300
software so the gadget snap the gadget

00:10:10,310 --> 00:10:16,670
snap contains the u-boot and in just

00:10:14,300 --> 00:10:22,060
looking at the secure boot and the it

00:10:16,670 --> 00:10:24,500
would is obviously signed there so the

00:10:22,060 --> 00:10:27,199
the application the snaps are built

00:10:24,500 --> 00:10:28,970
using the snap craft tool and like

00:10:27,199 --> 00:10:33,170
there's a snap craft llamo with a llamo

00:10:28,970 --> 00:10:36,019
format that defines how it looks like so

00:10:33,170 --> 00:10:38,120
it looks like a make file basically kind

00:10:36,019 --> 00:10:40,279
of it's just a llamo so you have like

00:10:38,120 --> 00:10:44,300
targets and then steps that are executed

00:10:40,279 --> 00:10:45,470
and so here we build a new boot we have

00:10:44,300 --> 00:10:49,760
a build step and we have it installed

00:10:45,470 --> 00:10:52,040
stick install step so we basically find

00:10:49,760 --> 00:10:53,769
out since we haven't had that within the

00:10:52,040 --> 00:10:57,170
infrastructure that was doing that

00:10:53,769 --> 00:10:59,510
automatically at that time yet but we

00:10:57,170 --> 00:11:03,230
just kind of an will override the steps

00:10:59,510 --> 00:11:04,610
of build and then install and first we

00:11:03,230 --> 00:11:06,050
will just put the builds instructions in

00:11:04,610 --> 00:11:08,749
here which is kind of

00:11:06,050 --> 00:11:10,399
obvious but for the install step will

00:11:08,749 --> 00:11:14,470
provide a separate script and that

00:11:10,399 --> 00:11:17,059
script would actually take the keys will

00:11:14,470 --> 00:11:19,670
embed them will sign the u-boot will

00:11:17,059 --> 00:11:22,040
embed them in it and basically will

00:11:19,670 --> 00:11:24,290
prepare all this signed you much you

00:11:22,040 --> 00:11:27,019
will image so it's kind of an abusing

00:11:24,290 --> 00:11:29,629
the steps are like creative usage of

00:11:27,019 --> 00:11:32,329
them but will happen that at the end we

00:11:29,629 --> 00:11:35,720
just had a sign you boot and all we had

00:11:32,329 --> 00:11:37,819
to do is this install you boot script is

00:11:35,720 --> 00:11:40,459
to make sure that we pull the case from

00:11:37,819 --> 00:11:43,160
some location it could be local on the

00:11:40,459 --> 00:11:45,499
hard drive or the one who builds it they

00:11:43,160 --> 00:11:47,689
could be stored on the in the tree

00:11:45,499 --> 00:11:49,999
basically but that's bad to push them on

00:11:47,689 --> 00:11:53,239
a repository they could be just pulled

00:11:49,999 --> 00:11:55,879
from a from a from a third-party storage

00:11:53,239 --> 00:11:57,439
they could be they could lift on the USB

00:11:55,879 --> 00:11:59,089
that you plug into your box when you do

00:11:57,439 --> 00:12:03,470
the build so that they are securely

00:11:59,089 --> 00:12:06,619
stored outside of that box so it almost

00:12:03,470 --> 00:12:09,499
actually working at the end we got a

00:12:06,619 --> 00:12:12,799
signed hubert image I will just omit the

00:12:09,499 --> 00:12:15,559
steps of signing because he the steps to

00:12:12,799 --> 00:12:17,089
do it are available on the on the IMX

00:12:15,559 --> 00:12:21,949
website basically is just executing

00:12:17,089 --> 00:12:24,589
certain tools and that's it and then

00:12:21,949 --> 00:12:26,990
looking at the kernel and snap it was a

00:12:24,589 --> 00:12:29,980
fit image it obviously contains the

00:12:26,990 --> 00:12:34,569
kernel and it contains the public key

00:12:29,980 --> 00:12:34,569
and he was a challenge

00:12:34,869 --> 00:12:40,490
we need a boo-boo you would bits in here

00:12:37,540 --> 00:12:42,139
in a you boot tools but we don't have a

00:12:40,490 --> 00:12:46,549
u-boat in here because it just lives in

00:12:42,139 --> 00:12:49,249
a gadget snap so it was like well how do

00:12:46,549 --> 00:12:51,350
we do that now actually we had to move

00:12:49,249 --> 00:12:56,240
the whole energy here from the gadget

00:12:51,350 --> 00:12:58,639
that what they initially and then we

00:12:56,240 --> 00:13:03,259
just created a target you would you

00:12:58,639 --> 00:13:04,879
would feed actually and you just

00:13:03,259 --> 00:13:06,559
override a build and we just told it to

00:13:04,879 --> 00:13:08,110
build just the tools and dtb because

00:13:06,559 --> 00:13:10,339
that's what's essentially was needed so

00:13:08,110 --> 00:13:11,959
if you look at the project we've been

00:13:10,339 --> 00:13:15,049
like twice built we've been building

00:13:11,959 --> 00:13:16,279
keyboard twice but with this approach

00:13:15,049 --> 00:13:17,540
with this architecture that was

00:13:16,279 --> 00:13:20,600
inevitable

00:13:17,540 --> 00:13:23,959
and then use the same step the override

00:13:20,600 --> 00:13:26,959
build compared to the build keyword it's

00:13:23,959 --> 00:13:28,130
just a newer syntax if you if you build

00:13:26,959 --> 00:13:36,889
with the build you will get the warning

00:13:28,130 --> 00:13:39,529
that's it changed and all this you would

00:13:36,889 --> 00:13:43,510
build steps when here and the feed

00:13:39,529 --> 00:13:47,000
creation or the image also one here so

00:13:43,510 --> 00:13:49,610
after typing snap craft executed those

00:13:47,000 --> 00:13:51,620
steps what is important is to use the

00:13:49,610 --> 00:13:53,930
plug-in new so that it doesn't try to

00:13:51,620 --> 00:13:56,540
build it in any way you just override

00:13:53,930 --> 00:13:58,639
the build instructions from here so the

00:13:56,540 --> 00:14:01,490
snap ref will not assume what it is and

00:13:58,639 --> 00:14:04,820
try to build it in any way it knows it

00:14:01,490 --> 00:14:11,139
will just leave it for you and then it

00:14:04,820 --> 00:14:16,699
was perfectly compiled kernel and signed

00:14:11,139 --> 00:14:19,850
so at the end what when we look at it it

00:14:16,699 --> 00:14:22,310
was pretty like significant secure boot

00:14:19,850 --> 00:14:24,319
we've never done that before we burned

00:14:22,310 --> 00:14:25,329
some times trying to find out the best

00:14:24,319 --> 00:14:28,339
way to do it

00:14:25,329 --> 00:14:29,899
experimenting with the with other boot

00:14:28,339 --> 00:14:33,290
loaders than the new boot just to try to

00:14:29,899 --> 00:14:34,699
chain them together but at the end when

00:14:33,290 --> 00:14:36,410
you just look at the snap craft and the

00:14:34,699 --> 00:14:38,350
little tooling that we have around the

00:14:36,410 --> 00:14:43,519
bun to car it was just kind of a like

00:14:38,350 --> 00:14:46,069
simple with a small abuse or creative

00:14:43,519 --> 00:14:50,420
use of all the features we've been able

00:14:46,069 --> 00:14:54,260
to engineer it and then what was also an

00:14:50,420 --> 00:14:55,850
unknown of but we have assigned kernel

00:14:54,260 --> 00:14:56,959
we have assigned gadget but how do we

00:14:55,850 --> 00:14:59,269
provision the keys

00:14:56,959 --> 00:15:02,839
on the device we have to burn them into

00:14:59,269 --> 00:15:04,550
diffusers how do we do that and that

00:15:02,839 --> 00:15:07,970
actually can be done in many ways we

00:15:04,550 --> 00:15:11,240
could just either you use the iMacs

00:15:07,970 --> 00:15:15,769
tools that you use to flash the board to

00:15:11,240 --> 00:15:18,380
do that we could use the octo image that

00:15:15,769 --> 00:15:20,839
you know that runs just to bake them

00:15:18,380 --> 00:15:24,560
into the internal hardware but that

00:15:20,839 --> 00:15:26,870
wasn't really scaling because for the

00:15:24,560 --> 00:15:29,990
particular use cases we had to be able

00:15:26,870 --> 00:15:32,390
to have sort of like

00:15:29,990 --> 00:15:34,520
zero manual intervention deployment that

00:15:32,390 --> 00:15:36,200
you just plug the unit and it just is in

00:15:34,520 --> 00:15:38,540
a factory sits in the factory line and

00:15:36,200 --> 00:15:40,880
it just update interest provisions

00:15:38,540 --> 00:15:43,790
itself and just blinks LED when it's

00:15:40,880 --> 00:15:47,420
ready so that it just moves smoothly

00:15:43,790 --> 00:15:49,730
through the pipeline so that was in the

00:15:47,420 --> 00:15:53,810
case we could not just ask somebody to

00:15:49,730 --> 00:15:55,430
burn those keys using the IM axles so we

00:15:53,810 --> 00:15:57,110
just implemented that it in the in it

00:15:55,430 --> 00:15:58,880
early phase there was a small

00:15:57,110 --> 00:16:02,260
provisioning part that run only on the

00:15:58,880 --> 00:16:04,850
first put and we've been sitting this

00:16:02,260 --> 00:16:07,760
information about the s are key keys and

00:16:04,850 --> 00:16:11,600
other additional data on the special

00:16:07,760 --> 00:16:13,370
partition on the first put there were a

00:16:11,600 --> 00:16:16,040
real they were read they've been burned

00:16:13,370 --> 00:16:17,750
into the fuses where they need to leave

00:16:16,040 --> 00:16:18,980
and then wiped out from the system so

00:16:17,750 --> 00:16:20,270
that like they never existed there

00:16:18,980 --> 00:16:23,600
before but they've been written in the

00:16:20,270 --> 00:16:26,810
hardware and that was actually it it

00:16:23,600 --> 00:16:31,280
proved itself being pretty pretty

00:16:26,810 --> 00:16:33,410
reliable actually and we've made it but

00:16:31,280 --> 00:16:35,120
it was kind of like research and

00:16:33,410 --> 00:16:38,710
development Calvin can we pull it off

00:16:35,120 --> 00:16:41,570
given the time that we have for that and

00:16:38,710 --> 00:16:44,350
amount of people and basically our

00:16:41,570 --> 00:16:47,480
experience with a secure boot previously

00:16:44,350 --> 00:16:50,000
we made it but now we need to take a

00:16:47,480 --> 00:16:52,070
step two steps more and currently we're

00:16:50,000 --> 00:16:54,260
working on integrating that with the

00:16:52,070 --> 00:16:57,220
with a proper infrastructure and

00:16:54,260 --> 00:16:59,450
actually what we have found out that

00:16:57,220 --> 00:17:02,390
talking to other people and considering

00:16:59,450 --> 00:17:06,280
how how can we now improve this is that

00:17:02,390 --> 00:17:09,350
we should not be able to build a kernel

00:17:06,280 --> 00:17:11,720
from the get tree we should try to use

00:17:09,350 --> 00:17:14,870
the existing tagging kernels and build a

00:17:11,720 --> 00:17:17,089
kernel out of Debian package and when

00:17:14,870 --> 00:17:19,550
that's done you will just basically get

00:17:17,089 --> 00:17:22,550
all the signing with it coming with it

00:17:19,550 --> 00:17:23,990
and it's gonna be much more simpler what

00:17:22,550 --> 00:17:25,459
we need to extend a little bit our

00:17:23,990 --> 00:17:29,510
instruction to support it

00:17:25,459 --> 00:17:32,480
but that's the next step and that's

00:17:29,510 --> 00:17:36,140
basically it at the end what was looking

00:17:32,480 --> 00:17:38,750
kind of a complicated it turned out to

00:17:36,140 --> 00:17:40,940
be very simple if you know where to look

00:17:38,750 --> 00:17:42,650
at so there was a time needed to get

00:17:40,940 --> 00:17:45,140
there but once we get there like

00:17:42,650 --> 00:17:47,840
came back from now it's actually wasn't

00:17:45,140 --> 00:17:50,690
that complicated complicated just low

00:17:47,840 --> 00:17:52,490
that was high uncertainty then but the

00:17:50,690 --> 00:17:55,760
effort it was just medium effort at the

00:17:52,490 --> 00:17:57,640
end also thanks to that right people

00:17:55,760 --> 00:17:59,870
that were working on this but in general

00:17:57,640 --> 00:18:03,140
enabling like secure boot with a 1/2

00:17:59,870 --> 00:18:06,140
quart proved itself to be fairly easy if

00:18:03,140 --> 00:18:12,350
you know they won't occur world so

00:18:06,140 --> 00:18:17,960
that's it what I had I guess I'll just

00:18:12,350 --> 00:18:20,960
hand it over this for you sorry I came

00:18:17,960 --> 00:18:24,440
later so I may miss some slice so I just

00:18:20,960 --> 00:18:29,540
want to make sure so for the security

00:18:24,440 --> 00:18:33,560
put a feature so did you read it the OTP

00:18:29,540 --> 00:18:39,350
various file the u+ Rodney or you also

00:18:33,560 --> 00:18:41,690
used just for male we well the keys has

00:18:39,350 --> 00:18:45,170
to be saved in the fuses yeah which is

00:18:41,690 --> 00:18:47,840
all DP so we had to burn them into the

00:18:45,170 --> 00:18:50,750
fuses and then they were read by so you

00:18:47,840 --> 00:18:55,250
thought OTP values are read apart you

00:18:50,750 --> 00:18:59,800
put two battling yes okay so did you use

00:18:55,250 --> 00:19:03,860
the the I'm just so for your CPU core

00:18:59,800 --> 00:19:07,970
HIV before high assurance boot okay so

00:19:03,860 --> 00:19:11,570
you you Putin is running in the Sakura

00:19:07,970 --> 00:19:13,930
sila excuse me your you put you block

00:19:11,570 --> 00:19:16,600
all is running in the chakra style or

00:19:13,930 --> 00:19:18,490
lansac resign

00:19:16,600 --> 00:19:21,100
thinking it was running not in secure

00:19:18,490 --> 00:19:23,980
zone you know okay so what was the set

00:19:21,100 --> 00:19:26,019
aside right so either directly bypass

00:19:23,980 --> 00:19:33,600
that the contour to the nearest corner

00:19:26,019 --> 00:19:36,309
well you would read the Reds the keys

00:19:33,600 --> 00:19:39,490
validates everything and it just done

00:19:36,309 --> 00:19:42,100
automatically when we selected the when

00:19:39,490 --> 00:19:43,720
we we started with the u-boot of 2015

00:19:42,100 --> 00:19:46,179
but then we realized that it's better to

00:19:43,720 --> 00:19:48,940
use the 2017 version because it just

00:19:46,179 --> 00:19:51,309
offers better experience about what

00:19:48,940 --> 00:19:54,039
you're asking for and it was pretty much

00:19:51,309 --> 00:19:57,610
working actually surprisingly out of the

00:19:54,039 --> 00:19:59,799
box all the patches were in and if you

00:19:57,610 --> 00:20:04,870
just knew where to put the keys it was

00:19:59,799 --> 00:20:09,179
just beautifully working no HIV events

00:20:04,870 --> 00:20:09,179
found okay okay thank you

00:20:14,830 --> 00:20:18,360
okay thank you everybody

00:20:20,530 --> 00:20:25,710

YouTube URL: https://www.youtube.com/watch?v=ddGHwG2Rqds


