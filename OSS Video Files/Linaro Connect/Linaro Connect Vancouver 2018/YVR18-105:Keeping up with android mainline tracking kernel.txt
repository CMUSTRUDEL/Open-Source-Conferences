Title: YVR18-105:Keeping up with android mainline tracking kernel
Publication date: 2019-05-09
Playlist: Linaro Connect Vancouver 2018
Description: 
	android-mainline-tracking kernel is an effort to provide a reference or experimental Android preview tree to member partners for their upcoming SoCs. It also help find/report/fix Android regressions or ABI breakages in upstream kernel.

This short presentation will cover the recent changes in Android patchset as we move closer to the next LTS release. For example: eBPF replacing netfilter qtaguid, clang LTO and CFI support, dropped FIQ debugger and other legacy patches/workarounds, experimental/eas-dev tracking tree, Google's upstream first approach et al.
Captions: 
	00:00:02,070 --> 00:00:07,080
[Music]

00:00:08,370 --> 00:00:12,790
hi my name is Amit I will be talking

00:00:10,870 --> 00:00:15,519
about Android mainland main line

00:00:12,790 --> 00:00:18,460
tracking kernel people who don't know

00:00:15,519 --> 00:00:21,550
what this kernel is we rebase android

00:00:18,460 --> 00:00:25,570
pad set latest Android LTS pet said to a

00:00:21,550 --> 00:00:28,600
stream kernel now this talk in this talk

00:00:25,570 --> 00:00:30,840
so this talk is as dream down version of

00:00:28,600 --> 00:00:33,130
the talks which I have done earlier

00:00:30,840 --> 00:00:35,140
where I have talked about Android out of

00:00:33,130 --> 00:00:37,990
three pets it and I briefly cover

00:00:35,140 --> 00:00:40,560
Android mainland tracking 3 as well so I

00:00:37,990 --> 00:00:43,180
won't be covering the complete patch set

00:00:40,560 --> 00:00:46,030
so I have put down a link here where you

00:00:43,180 --> 00:00:48,790
can find my last set of slides which I

00:00:46,030 --> 00:00:50,170
have done on this topic similarly I will

00:00:48,790 --> 00:00:53,350
not be talking about Android common

00:00:50,170 --> 00:00:56,230
kernel Android source.android.com has

00:00:53,350 --> 00:00:58,960
this detailed description of Android

00:00:56,230 --> 00:01:03,460
common kernels how it is being derived

00:00:58,960 --> 00:01:06,460
form LTS trees and Android LTS kernels

00:01:03,460 --> 00:01:08,770
and Android to desert kernels and why

00:01:06,460 --> 00:01:11,290
you should use Android

00:01:08,770 --> 00:01:20,020
LTS versions instead of Android release

00:01:11,290 --> 00:01:23,380
versions desert release versions I won't

00:01:20,020 --> 00:01:28,479
be talking about yes tree as well there

00:01:23,380 --> 00:01:30,100
is a talk on Thursday where yes

00:01:28,479 --> 00:01:32,590
developers will be giving update on

00:01:30,100 --> 00:01:37,500
current set of yes patch set and right

00:01:32,590 --> 00:01:41,619
patch set and their mainland status

00:01:37,500 --> 00:01:43,060
right so I'll just start with the main

00:01:41,619 --> 00:01:46,210
topic of the day and write me and I'm

00:01:43,060 --> 00:01:49,270
tracking kernel now why do we need this

00:01:46,210 --> 00:01:51,070
kernel or what exactly is Android main

00:01:49,270 --> 00:01:53,020
line cutting tracking kernel as I

00:01:51,070 --> 00:01:56,409
mentioned this is and this is Android

00:01:53,020 --> 00:01:59,409
LTS patsak free base to upstream kernel

00:01:56,409 --> 00:02:04,780
for example the current snapshot which

00:01:59,409 --> 00:02:07,060
we have is based on 4.19 rc2 which is

00:02:04,780 --> 00:02:11,290
Android 4 or 14 patch set rebase to

00:02:07,060 --> 00:02:13,300
Android 4.1 teen all these versions they

00:02:11,290 --> 00:02:18,100
get tagged as Android

00:02:13,300 --> 00:02:20,380
LTS release for example when we did 4.13

00:02:18,100 --> 00:02:22,810
based trees so the next LTS which was

00:02:20,380 --> 00:02:24,880
4.14 we tagged this we tagged that thing

00:02:22,810 --> 00:02:26,440
as and right for that 14 similarly

00:02:24,880 --> 00:02:31,000
hopefully the next one will be Android

00:02:26,440 --> 00:02:36,670
4.4 4.19 non-lds kernel versions they

00:02:31,000 --> 00:02:39,370
get relatively feature testing on DB

00:02:36,670 --> 00:02:46,710
Fortin see locally and then we tag it as

00:02:39,370 --> 00:02:49,300
experimental Android tags 4.17 4.18 etc

00:02:46,710 --> 00:02:51,910
right so why do we need Android mainland

00:02:49,300 --> 00:02:55,720
tracking so the main purpose of coming

00:02:51,910 --> 00:02:57,940
up with a tree like this was to find

00:02:55,720 --> 00:03:01,180
upstream regressions to see if the

00:02:57,940 --> 00:03:03,790
Android patch said when you reverse it

00:03:01,180 --> 00:03:06,970
to newer kernels which our members used

00:03:03,790 --> 00:03:08,890
to do earlier on their own right so

00:03:06,970 --> 00:03:10,960
those these upstream iterations were not

00:03:08,890 --> 00:03:13,360
reported to upstream at that time so we

00:03:10,960 --> 00:03:17,980
used to report these regressions in the

00:03:13,360 --> 00:03:20,530
right in the next LTS versions so by

00:03:17,980 --> 00:03:23,530
doing this three but by testing this

00:03:20,530 --> 00:03:26,110
environment backtracking kernel we find

00:03:23,530 --> 00:03:28,870
and report regressions within a week and

00:03:26,110 --> 00:03:30,750
they get fixed in the same released

00:03:28,870 --> 00:03:34,840
version instead of waiting for the next

00:03:30,750 --> 00:03:40,870
next cycle or next to next cycle this

00:03:34,840 --> 00:03:42,310
three is used as test three for few

00:03:40,870 --> 00:03:43,980
patches which have been currently under

00:03:42,310 --> 00:03:49,420
development and that and are not

00:03:43,980 --> 00:03:51,370
actually submitted upstream then these

00:03:49,420 --> 00:03:52,810
threes are used as experimental or

00:03:51,370 --> 00:03:55,870
reference kernel streets for our member

00:03:52,810 --> 00:03:57,610
partners this is the most important

00:03:55,870 --> 00:04:01,600
thing which I wanted to cover that you

00:03:57,610 --> 00:04:04,570
know before this there was no easier way

00:04:01,600 --> 00:04:06,190
to do that right now we have a reference

00:04:04,570 --> 00:04:08,410
of experimental preview tree which our

00:04:06,190 --> 00:04:13,020
members can quickly download and get

00:04:08,410 --> 00:04:13,020
started for their upcoming association

00:04:13,290 --> 00:04:21,729
so this is the de stacked on 4.19 and

00:04:17,470 --> 00:04:24,100
the current mainline tracking tree if

00:04:21,729 --> 00:04:26,110
you compare it with the earlier versions

00:04:24,100 --> 00:04:26,419
it so you can see a big difference of

00:04:26,110 --> 00:04:29,960
that

00:04:26,419 --> 00:04:32,900
which I will come in which I'll talk

00:04:29,960 --> 00:04:34,999
about the next slides so just a brief

00:04:32,900 --> 00:04:36,499
description here SD card FSS now the

00:04:34,999 --> 00:04:39,020
biggest chunk of code which we are

00:04:36,499 --> 00:04:41,090
carrying a lot has been dropped from

00:04:39,020 --> 00:04:44,060
that netfilter but it is still one of

00:04:41,090 --> 00:04:47,270
the bigger chunks now the usual suspects

00:04:44,060 --> 00:04:53,029
USB gadgets and input drivers and other

00:04:47,270 --> 00:04:54,979
things right so I have compiled down a

00:04:53,029 --> 00:04:58,789
list of four or five features which have

00:04:54,979 --> 00:05:01,099
been recently added compared to 4.14

00:04:58,789 --> 00:05:03,319
orbit 4.9 or something which has been

00:05:01,099 --> 00:05:08,479
recently added like two or three months

00:05:03,319 --> 00:05:11,719
ago so we'll start with PPP these two

00:05:08,479 --> 00:05:13,430
Android used to have a legacy o P n SN o

00:05:11,719 --> 00:05:16,669
LED drivers which were completely out of

00:05:13,430 --> 00:05:21,439
mainline these patches got robbed in

00:05:16,669 --> 00:05:23,659
4.14 right but this they got dropped in

00:05:21,439 --> 00:05:25,339
favor of upstream kernels or upstream

00:05:23,659 --> 00:05:28,219
dry off so you have stream drivers in

00:05:25,339 --> 00:05:31,879
the country and Sam has done a lot of

00:05:28,219 --> 00:05:36,409
work to make sure that upstream drivers

00:05:31,879 --> 00:05:38,270
can work as efficiently as the legacy

00:05:36,409 --> 00:05:41,870
and buy drivers which were not there in

00:05:38,270 --> 00:05:44,449
photo 14 now recently all those changes

00:05:41,870 --> 00:05:46,699
which was paid across and TPD PPE and

00:05:44,449 --> 00:05:50,659
other projects they got merged into a

00:05:46,699 --> 00:05:56,689
OSP so now a OSP can use these upstream

00:05:50,659 --> 00:05:59,919
drivers PPTP NL to TP I think they still

00:05:56,689 --> 00:06:02,330
coexist with the with the older legacy

00:05:59,919 --> 00:06:06,110
implementations there's a check

00:06:02,330 --> 00:06:09,680
somewhere there if if you want to use

00:06:06,110 --> 00:06:11,870
the legacy drivers on 4.9 or 4.4 kernel

00:06:09,680 --> 00:06:15,699
you can still do that but unfolded 14

00:06:11,870 --> 00:06:18,050
onwards you have to use upstream drivers

00:06:15,699 --> 00:06:20,479
stamina is giving a talk on this on

00:06:18,050 --> 00:06:24,139
Friday Friday afternoon so if you want

00:06:20,479 --> 00:06:27,680
to learn more about how to use these

00:06:24,139 --> 00:06:30,020
upstream drivers and what all changes he

00:06:27,680 --> 00:06:31,729
has done to make sure that the USB uses

00:06:30,020 --> 00:06:34,060
those upstream drivers you can attend

00:06:31,729 --> 00:06:34,060
the stock

00:06:34,330 --> 00:06:38,979
so the second feature which got added

00:06:37,000 --> 00:06:42,490
recently was clang a control flow

00:06:38,979 --> 00:06:44,199
integrity support if you check the gedit

00:06:42,490 --> 00:06:46,360
review you'll find that it got added

00:06:44,199 --> 00:06:49,060
with LTO which is a link time

00:06:46,360 --> 00:06:55,389
optimization support I'll do got dropped

00:06:49,060 --> 00:06:56,740
and I mean LT was not really I mean

00:06:55,389 --> 00:06:58,389
there were a lot of noise conflicts

00:06:56,740 --> 00:07:01,569
because there are a lot of changes which

00:06:58,389 --> 00:07:03,520
went into LTO in the upstream driver and

00:07:01,569 --> 00:07:06,879
later we found out that we don't need

00:07:03,520 --> 00:07:08,800
clang LTO support anymore so I have not

00:07:06,879 --> 00:07:10,900
listed down down I have not listed down

00:07:08,800 --> 00:07:12,460
those patch set here so this is a new

00:07:10,900 --> 00:07:16,810
thing control flow integrity support

00:07:12,460 --> 00:07:18,699
which kind of provides restriction of

00:07:16,810 --> 00:07:21,310
which enforces certain restrictions on a

00:07:18,699 --> 00:07:23,860
control flow of an application so that

00:07:21,310 --> 00:07:26,500
is your application goes through a valid

00:07:23,860 --> 00:07:29,050
execution path instead of just you know

00:07:26,500 --> 00:07:33,879
leave something which can be later

00:07:29,050 --> 00:07:38,169
exploited by by you know by something

00:07:33,879 --> 00:07:41,050
else have put on the link of Gerrit

00:07:38,169 --> 00:07:43,960
topic which lists on all the patch set

00:07:41,050 --> 00:07:47,759
which goes into this particular set of

00:07:43,960 --> 00:07:47,759
patches so you can find it here

00:07:49,020 --> 00:07:55,840
right so the next thing is queue tag ID

00:07:52,319 --> 00:07:57,729
q' tag idea is again a big set of chunk

00:07:55,840 --> 00:08:02,139
of code which is currently sitting in

00:07:57,729 --> 00:08:04,860
android android kernels the plan for

00:08:02,139 --> 00:08:08,379
this the so the Q take I D is used for

00:08:04,860 --> 00:08:12,610
data accounting and to and you know sort

00:08:08,379 --> 00:08:18,940
of data limiting it tracks the socket

00:08:12,610 --> 00:08:22,000
usage and data usage alright so in last

00:08:18,940 --> 00:08:24,940
LPC's there was a talk on how you can

00:08:22,000 --> 00:08:28,930
use queue tag ID with eb PF c group

00:08:24,940 --> 00:08:34,620
filters have lists down a link here from

00:08:28,930 --> 00:08:37,890
last talk from the talk from last LPC

00:08:34,620 --> 00:08:40,659
this patch is this patch it is still in

00:08:37,890 --> 00:08:43,300
android common Android mainland tracking

00:08:40,659 --> 00:08:45,910
3 because there are couple of user space

00:08:43,300 --> 00:08:47,230
dependencies which are still using Q

00:08:45,910 --> 00:08:49,960
Tiwari

00:08:47,230 --> 00:08:52,990
so we are hopeful that maybe by the time

00:08:49,960 --> 00:08:55,270
4.19 gets released you should be able to

00:08:52,990 --> 00:09:01,060
you know get rid of cuter guide Apache

00:08:55,270 --> 00:09:03,700
said right so these are the patches

00:09:01,060 --> 00:09:05,590
which I recently got added or something

00:09:03,700 --> 00:09:07,600
which are going to be replaced by

00:09:05,590 --> 00:09:08,950
something else now these are the best

00:09:07,600 --> 00:09:11,170
set of which I'm going to talk about are

00:09:08,950 --> 00:09:14,950
the patches which are no longer required

00:09:11,170 --> 00:09:18,070
in AOSP so they've dropped it from 4.18

00:09:14,950 --> 00:09:20,860
or we might drop it in 4.19 as such

00:09:18,070 --> 00:09:22,450
first one is f IQ debug where it's a big

00:09:20,860 --> 00:09:24,670
chunk of code which finally is going

00:09:22,450 --> 00:09:29,650
away because there are no users no

00:09:24,670 --> 00:09:31,960
vendor users or no local no just no

00:09:29,650 --> 00:09:36,600
users for if I could be better driver

00:09:31,960 --> 00:09:39,430
anymore second set was goldfish drivers

00:09:36,600 --> 00:09:41,440
most of the development of goldfish have

00:09:39,430 --> 00:09:43,840
moved to upstream so there was no point

00:09:41,440 --> 00:09:45,880
on keeping hacks in the unread common

00:09:43,840 --> 00:09:49,420
kernel as such so we dropped goldfish

00:09:45,880 --> 00:09:52,720
driver as well Kiko driver input

00:09:49,420 --> 00:09:55,660
keyboard input driver it got replaced by

00:09:52,720 --> 00:09:57,340
user space demon so in kernel driver is

00:09:55,660 --> 00:10:00,460
again something which is no longer

00:09:57,340 --> 00:10:04,660
required and we can just delete that

00:10:00,460 --> 00:10:06,850
actually we did deleted that I have put

00:10:04,660 --> 00:10:08,830
on a link of the user space

00:10:06,850 --> 00:10:12,780
functionality which replaces this kernel

00:10:08,830 --> 00:10:15,400
driver for reference then there were few

00:10:12,780 --> 00:10:18,280
tracing out of three patches which most

00:10:15,400 --> 00:10:19,230
of them got up streamed and whatever is

00:10:18,280 --> 00:10:23,520
left behind

00:10:19,230 --> 00:10:25,660
I'll in the process of getting upstream

00:10:23,520 --> 00:10:28,060
again there are there were few patches

00:10:25,660 --> 00:10:30,250
which were no longer required there were

00:10:28,060 --> 00:10:32,560
few GPU tracing patches and there was

00:10:30,250 --> 00:10:35,410
one more patch that I'm not functional

00:10:32,560 --> 00:10:38,050
graph something was there which is no

00:10:35,410 --> 00:10:42,160
longer required so we dropped those

00:10:38,050 --> 00:10:45,480
patches as well then there were few MMC

00:10:42,160 --> 00:10:52,150
hacks and hooks few hacks which will

00:10:45,480 --> 00:10:54,250
retry the MMSE detection and MMC SDIO

00:10:52,150 --> 00:10:58,120
support was there which no one else is

00:10:54,250 --> 00:11:00,670
using nowadays so since there were no

00:10:58,120 --> 00:11:03,510
users for these patches that I'm MCS bi

00:11:00,670 --> 00:11:06,730
River we removed this MMC hex as well

00:11:03,510 --> 00:11:09,520
usb-otg wakelock is again something

00:11:06,730 --> 00:11:12,580
which we rely on upstream drivers now

00:11:09,520 --> 00:11:16,300
same thing with dwell dole Sisyphus

00:11:12,580 --> 00:11:17,920
interface so these patches got removed

00:11:16,300 --> 00:11:19,300
from the mainland tracking tree because

00:11:17,920 --> 00:11:22,390
they are now being superseded by

00:11:19,300 --> 00:11:25,450
upstream implementations then there were

00:11:22,390 --> 00:11:27,700
of small small hacks and workarounds

00:11:25,450 --> 00:11:31,050
most of them were dual change specific

00:11:27,700 --> 00:11:34,840
over crowns and device specific acts

00:11:31,050 --> 00:11:40,240
which were no longer needed with 4.9 4

00:11:34,840 --> 00:11:42,700
out 18 and newer candle versions then

00:11:40,240 --> 00:11:45,820
there were few debug hooks few patches

00:11:42,700 --> 00:11:48,910
which will dump the memory registers for

00:11:45,820 --> 00:11:50,740
debug purpose there were few on v6

00:11:48,910 --> 00:11:51,310
specific debug hacks which are no longer

00:11:50,740 --> 00:11:54,430
needed

00:11:51,310 --> 00:11:59,470
so algo stretches are no longer part of

00:11:54,430 --> 00:12:03,220
and I mean ang aking tree now right so

00:11:59,470 --> 00:12:06,760
last but not the least is the renewed of

00:12:03,220 --> 00:12:10,900
streaming effort which we see on iOS

00:12:06,760 --> 00:12:13,960
peek at it nowadays alright so if you

00:12:10,900 --> 00:12:16,770
follow Android get it as much as you

00:12:13,960 --> 00:12:19,510
know if you do you will find out that

00:12:16,770 --> 00:12:21,790
the kernel team is taking more upstream

00:12:19,510 --> 00:12:24,940
friendly approach when it comes to

00:12:21,790 --> 00:12:26,260
Android common kernel development I have

00:12:24,940 --> 00:12:28,780
missed out the hefty part because that

00:12:26,260 --> 00:12:32,020
is something which should be a part of

00:12:28,780 --> 00:12:34,420
this as well so as I was talking about

00:12:32,020 --> 00:12:36,280
the character II right if you see that

00:12:34,420 --> 00:12:37,780
Garrett reviews and you see that there's

00:12:36,280 --> 00:12:40,600
a new patch set which is being added

00:12:37,780 --> 00:12:42,310
there for review so you'll find that

00:12:40,600 --> 00:12:43,720
greg will automatically apply on that

00:12:42,310 --> 00:12:46,390
that okay so they should not be here

00:12:43,720 --> 00:12:48,190
submitted here it should go to relevant

00:12:46,390 --> 00:12:52,860
upstream mailing list for review first

00:12:48,190 --> 00:12:56,110
instead of no being there on get it only

00:12:52,860 --> 00:12:57,880
same thing with the stable kernels as

00:12:56,110 --> 00:13:01,510
well if you try to push a patch upstream

00:12:57,880 --> 00:13:03,370
patch to older stable kernels then again

00:13:01,510 --> 00:13:06,640
you will get the same warning from greg

00:13:03,370 --> 00:13:11,830
that the correct thing to do is to do it

00:13:06,640 --> 00:13:14,080
through stable mailing list the second

00:13:11,830 --> 00:13:14,590
thing is that Android bad sectors again

00:13:14,080 --> 00:13:15,850
as I

00:13:14,590 --> 00:13:20,530
mentioned that although scratches which

00:13:15,850 --> 00:13:22,540
got dropped recently and submitted

00:13:20,530 --> 00:13:25,450
upstream so that's a part of this whole

00:13:22,540 --> 00:13:28,960
I think all this and I'd better clean up

00:13:25,450 --> 00:13:30,190
which might be going on internally all

00:13:28,960 --> 00:13:32,740
the patches are being reverb been

00:13:30,190 --> 00:13:34,180
submitted upstream so all this I have

00:13:32,740 --> 00:13:36,760
covered ride all the device specific

00:13:34,180 --> 00:13:40,990
hacks and all these workarounds are

00:13:36,760 --> 00:13:42,280
again being dropped and non upstream

00:13:40,990 --> 00:13:44,470
mobile features have been worked up on

00:13:42,280 --> 00:13:46,750
to move to user space as we have seen in

00:13:44,470 --> 00:13:48,340
the case of key core driver you can take

00:13:46,750 --> 00:13:51,460
an example of MTP and Peabody

00:13:48,340 --> 00:13:54,490
sorry MTP and Pt B which was there for a

00:13:51,460 --> 00:13:56,050
long time and upstream did not like the

00:13:54,490 --> 00:13:58,150
implementation they said so they were

00:13:56,050 --> 00:14:02,280
kind of hoping that it should move to

00:13:58,150 --> 00:14:04,480
user space and eventually it did so

00:14:02,280 --> 00:14:07,360
alright so I think that's a whole part

00:14:04,480 --> 00:14:12,550
of this renewed of streaming policy

00:14:07,360 --> 00:14:15,820
which is currently being going on that's

00:14:12,550 --> 00:14:17,970
pretty much it for my side we have any

00:14:15,820 --> 00:14:17,970
questions

00:14:19,730 --> 00:14:22,730
fifteen

00:14:35,240 --> 00:14:41,880
so bathe them expect these different

00:14:39,300 --> 00:14:44,130
things when do you think that will we

00:14:41,880 --> 00:14:46,830
will be able to run a mainline camera we

00:14:44,130 --> 00:14:49,830
don't read when we will that will be at

00:14:46,830 --> 00:14:54,120
the same level so we can mainly just use

00:14:49,830 --> 00:14:57,450
the main line canal map that it is I

00:14:54,120 --> 00:15:02,910
thought you can put to you way that most

00:14:57,450 --> 00:15:05,490
of the things working so as you said you

00:15:02,910 --> 00:15:07,920
can boot - you are with main line yeah

00:15:05,490 --> 00:15:09,840
but it's kind of crashing and hacky and

00:15:07,920 --> 00:15:12,960
this is going to be a focus of next year

00:15:09,840 --> 00:15:15,470
is to try to get foot width so so we

00:15:12,960 --> 00:15:19,140
kind of consider most of what's left as

00:15:15,470 --> 00:15:22,110
technical debt and the prioritization of

00:15:19,140 --> 00:15:26,460
the technical debt will be to get solid

00:15:22,110 --> 00:15:28,380
UI boot with mainline kernel so that's

00:15:26,460 --> 00:15:32,330
what we want to get to sometime over the

00:15:28,380 --> 00:15:32,330
next year correct

00:15:48,280 --> 00:15:52,450
okay if there are no more questions then

00:15:50,110 --> 00:15:55,140
you can just travel thank you

00:15:52,450 --> 00:15:55,140
all right thank you

00:15:58,760 --> 00:16:03,769

YouTube URL: https://www.youtube.com/watch?v=pxWONpgncHk


