Title: YVR18-201:Introducing the OpenDataPlane SIG
Publication date: 2019-05-09
Playlist: Linaro Connect Vancouver 2018
Description: 
	The OpenDataPlane project provides technology that enables portable and scalable network applications that transparently use whatever hardware acceleration technology is available wherever they run. This Connect the ODP project is celebrating its fifth anniversary and has now “graduated” to being its own Special Interest Group (SIG) within Linaro. This talk provides a brief review of where the project has been and where it’s going. Come join us for the celebration. Birthday hats optional.
Captions: 
	00:00:02,150 --> 00:00:07,160
[Music]

00:00:09,679 --> 00:00:18,350
we have a large room and a small group

00:00:12,289 --> 00:00:19,910
feel free to move forward so welcome

00:00:18,350 --> 00:00:22,040
we're here today to talk about

00:00:19,910 --> 00:00:24,890
introducing the open data play and sig

00:00:22,040 --> 00:00:29,390
and what I really like to do is talk

00:00:24,890 --> 00:00:31,850
about sort of a whole recap of what oh D

00:00:29,390 --> 00:00:37,660
P has been all about where we've come

00:00:31,850 --> 00:00:42,440
from where we're going and some QA so

00:00:37,660 --> 00:00:49,040
since this is a fairly small group feel

00:00:42,440 --> 00:00:52,820
free to ask questions at any time so the

00:00:49,040 --> 00:00:57,170
main motivation behind open data plane

00:00:52,820 --> 00:01:00,230
is to satisfy the diverse needs of two

00:00:57,170 --> 00:01:02,719
separate communities ok community one is

00:01:00,230 --> 00:01:05,900
the community of application developers

00:01:02,719 --> 00:01:09,710
and community two is the platform

00:01:05,900 --> 00:01:11,240
vendors and while these two obviously

00:01:09,710 --> 00:01:14,020
work together they also have very

00:01:11,240 --> 00:01:16,880
competing needs and interests and

00:01:14,020 --> 00:01:20,360
application developers primary interest

00:01:16,880 --> 00:01:24,380
is in deploying their application as

00:01:20,360 --> 00:01:25,909
widely and as easily as possible and to

00:01:24,380 --> 00:01:29,360
do that they would like to be able to

00:01:25,909 --> 00:01:32,600
write their application once and be able

00:01:29,360 --> 00:01:35,869
to have it not just run anywhere but be

00:01:32,600 --> 00:01:38,290
able to accelerate anywhere they'd like

00:01:35,869 --> 00:01:41,060
to be able to take full advantage of

00:01:38,290 --> 00:01:43,880
whatever hardware acceleration is

00:01:41,060 --> 00:01:47,390
available on any given platform without

00:01:43,880 --> 00:01:50,299
any great effort and that would allow

00:01:47,390 --> 00:01:52,759
them to focus on the application rather

00:01:50,299 --> 00:01:54,560
than the platform because the platform

00:01:52,759 --> 00:01:58,360
for the application developer is simply

00:01:54,560 --> 00:02:01,250
a means for delivering that application

00:01:58,360 --> 00:02:03,170
platform vendors by contrast have a very

00:02:01,250 --> 00:02:06,770
different motivation they're trying to

00:02:03,170 --> 00:02:08,750
sell platforms in the marketplace and in

00:02:06,770 --> 00:02:12,349
order to do that they want to be able to

00:02:08,750 --> 00:02:13,850
support applications obviously but also

00:02:12,349 --> 00:02:18,620
they'd like to be able to

00:02:13,850 --> 00:02:20,900
you demonstrate their added value by

00:02:18,620 --> 00:02:22,820
allowing these applications to fully

00:02:20,900 --> 00:02:26,570
exploit their intellectual property

00:02:22,820 --> 00:02:31,220
without requiring application changes a

00:02:26,570 --> 00:02:33,230
sure way to kill any sale is I've got

00:02:31,220 --> 00:02:35,720
this great platform now if you just

00:02:33,230 --> 00:02:38,120
rewrite your application then this is

00:02:35,720 --> 00:02:40,910
the benefits you'll get that that that

00:02:38,120 --> 00:02:44,060
doesn't get very far when talking to

00:02:40,910 --> 00:02:45,320
application writers and customers so ODP

00:02:44,060 --> 00:02:50,720
is really trying to strike a balance

00:02:45,320 --> 00:02:52,430
between these two diverse communities if

00:02:50,720 --> 00:02:55,580
we look at the history we actually

00:02:52,430 --> 00:02:58,030
started in 2013 with the founding of

00:02:55,580 --> 00:03:01,370
what was then dealin ro networking group

00:02:58,030 --> 00:03:04,250
so if he was the foundation project for

00:03:01,370 --> 00:03:09,890
that group we then went through a number

00:03:04,250 --> 00:03:12,850
of releases pre-releases releases and as

00:03:09,890 --> 00:03:15,980
of this year we've have our second

00:03:12,850 --> 00:03:18,530
long-term stable release which we

00:03:15,980 --> 00:03:21,950
codenamed ODP tiger moth we also

00:03:18,530 --> 00:03:24,560
transitioned from a group to a cig

00:03:21,950 --> 00:03:27,140
structure and we're celebrating the

00:03:24,560 --> 00:03:30,200
ODB's fifth anniversary at disconnect

00:03:27,140 --> 00:03:32,900
since it was five years ago at the santa

00:03:30,200 --> 00:03:36,410
clara connect that the project was first

00:03:32,900 --> 00:03:39,800
announced so at lunch today feel free to

00:03:36,410 --> 00:03:42,430
have a slice of cake and think of the

00:03:39,800 --> 00:03:42,430
anniversary

00:03:42,580 --> 00:03:49,400
ODP has been actually deployed in many

00:03:44,900 --> 00:03:51,950
different application areas so in things

00:03:49,400 --> 00:03:54,680
like telecommunications for Evolved

00:03:51,950 --> 00:04:00,590
Packet core network space stations pico

00:03:54,680 --> 00:04:03,440
de macro backing station backhaul a base

00:04:00,590 --> 00:04:07,400
station backhaul with dealing with fat

00:04:03,440 --> 00:04:11,330
encrypted pipes other other environments

00:04:07,400 --> 00:04:14,300
in that area enterprise and cloud is

00:04:11,330 --> 00:04:18,470
another with various firewall

00:04:14,300 --> 00:04:23,270
applications security and VPN gateways

00:04:18,470 --> 00:04:25,430
etc and increasingly you know because

00:04:23,270 --> 00:04:26,240
ODP can be deployed in things that don't

00:04:25,430 --> 00:04:29,419
look

00:04:26,240 --> 00:04:34,449
like traditional servers it's also been

00:04:29,419 --> 00:04:38,330
deployed in smart Nicks and edge devices

00:04:34,449 --> 00:04:40,910
the platforms of interest that ODP is is

00:04:38,330 --> 00:04:44,210
really focused on or two one is what I

00:04:40,910 --> 00:04:47,419
call general server platforms these tend

00:04:44,210 --> 00:04:50,360
to be software centric in which cores

00:04:47,419 --> 00:04:52,910
touch every plac packet they tend to

00:04:50,360 --> 00:04:55,160
have standardized acceleration which

00:04:52,910 --> 00:04:57,470
means we either have special CPU

00:04:55,160 --> 00:05:00,800
instructions so for instance an Aes

00:04:57,470 --> 00:05:03,650
instruction to accelerate that operation

00:05:00,800 --> 00:05:06,740
or they have plug-in cards with

00:05:03,650 --> 00:05:10,789
associated PCIe Layton sees where I have

00:05:06,740 --> 00:05:13,699
an attached accelerator they come in

00:05:10,789 --> 00:05:16,819
standard form factors which is mainly

00:05:13,699 --> 00:05:21,789
raakchass ease and they're leading

00:05:16,819 --> 00:05:24,710
architectures 10 to the x86 and a art 64

00:05:21,789 --> 00:05:29,000
these are deployed mainly in cloud type

00:05:24,710 --> 00:05:35,889
environments and it's an important class

00:05:29,000 --> 00:05:39,139
of a platform and obviously other

00:05:35,889 --> 00:05:40,940
products like DP DK clearly you know

00:05:39,139 --> 00:05:44,570
come from this heritage as their main

00:05:40,940 --> 00:05:47,419
focus the other type of platform that

00:05:44,570 --> 00:05:49,669
ODP is specifically interested in is

00:05:47,419 --> 00:05:52,280
what we'd call Network SOC based

00:05:49,669 --> 00:05:54,590
platforms and these tend to be more

00:05:52,280 --> 00:05:56,509
Hardware centric in that packets may

00:05:54,590 --> 00:05:59,840
bypass cores either partially or

00:05:56,509 --> 00:06:01,969
completely they tend to have innovative

00:05:59,840 --> 00:06:03,349
and non-standard approaches to

00:06:01,969 --> 00:06:05,599
acceleration and this actually

00:06:03,349 --> 00:06:10,250
constitutes the value added IP that that

00:06:05,599 --> 00:06:13,099
vendor is providing ok and the challenge

00:06:10,250 --> 00:06:17,020
is to allow applications to exploit that

00:06:13,099 --> 00:06:19,819
IP without requiring application changes

00:06:17,020 --> 00:06:21,500
they tend to have varying i/o for

00:06:19,819 --> 00:06:25,250
instance integrated i/o that doesn't

00:06:21,500 --> 00:06:28,099
involve PCI adaptors they have varying

00:06:25,250 --> 00:06:32,259
form factors so they could be packaged

00:06:28,099 --> 00:06:34,550
as a smart NIC or other embedded device

00:06:32,259 --> 00:06:36,409
and the interesting thing about these

00:06:34,550 --> 00:06:39,540
platforms is their leading architectures

00:06:36,409 --> 00:06:41,580
tend to be armed as well as custom

00:06:39,540 --> 00:06:43,680
okay there's this various proprietary

00:06:41,580 --> 00:06:46,740
architectures that go into this and

00:06:43,680 --> 00:06:50,430
being essentially architecture agnostic

00:06:46,740 --> 00:06:51,810
ODP supports them the mall so these are

00:06:50,430 --> 00:06:58,350
mainly for edge and embedded

00:06:51,810 --> 00:07:02,190
environments so one of the ways we've

00:06:58,350 --> 00:07:04,170
characterized this difference is to talk

00:07:02,190 --> 00:07:09,180
about software implemented versus

00:07:04,170 --> 00:07:14,010
Software Defined Networking so in a

00:07:09,180 --> 00:07:17,040
software implemented data plane such as

00:07:14,010 --> 00:07:20,730
provided by DB DK that map or packet

00:07:17,040 --> 00:07:23,730
direct if we look at say for instance an

00:07:20,730 --> 00:07:28,980
IPSec application that's that's doing a

00:07:23,730 --> 00:07:30,720
lot of heavy lifting the application has

00:07:28,980 --> 00:07:33,630
to adapt to the various types of

00:07:30,720 --> 00:07:34,830
accelerators okay there may be none in

00:07:33,630 --> 00:07:35,490
which case things have to be done in

00:07:34,830 --> 00:07:39,000
software

00:07:35,490 --> 00:07:42,240
there may be a crypto offload engine or

00:07:39,000 --> 00:07:45,450
an IV second crypto device different

00:07:42,240 --> 00:07:48,180
types of approaches to this which is

00:07:45,450 --> 00:07:50,790
really has to all be done in software

00:07:48,180 --> 00:07:53,250
and largely in you know with application

00:07:50,790 --> 00:07:56,990
awareness in software at

00:07:53,250 --> 00:07:59,100
software-defined approach instead the

00:07:56,990 --> 00:08:02,910
application is really focused with

00:07:59,100 --> 00:08:05,340
configuring and overseeing a packet flow

00:08:02,910 --> 00:08:08,970
pipeline if you will from input to

00:08:05,340 --> 00:08:11,850
output and whether or not packets have

00:08:08,970 --> 00:08:16,020
to go through the particular cores or

00:08:11,850 --> 00:08:18,540
application logic is really a function

00:08:16,020 --> 00:08:25,020
of how that's configured so for instance

00:08:18,540 --> 00:08:27,450
in a IPC lookaside mode packets may go

00:08:25,020 --> 00:08:29,910
to the core but in an inline mode they

00:08:27,450 --> 00:08:33,599
may be automatically decrypted on in on

00:08:29,910 --> 00:08:36,000
receive and re-encrypted on on exit

00:08:33,599 --> 00:08:39,140
without without applix specific

00:08:36,000 --> 00:08:39,140
application involvement

00:08:39,570 --> 00:08:44,550
so what this is really doing is

00:08:41,669 --> 00:08:47,550
illustrating ot his role as what we call

00:08:44,550 --> 00:08:50,399
an innovation boundary for applications

00:08:47,550 --> 00:08:52,529
this means that functions they can

00:08:50,399 --> 00:08:56,550
define functional needs without concern

00:08:52,529 --> 00:08:59,399
for how they're met and application

00:08:56,550 --> 00:09:01,769
writers are not really required to be

00:08:59,399 --> 00:09:03,930
platform architecture or hardware

00:09:01,769 --> 00:09:05,699
internal experts in order to be able to

00:09:03,930 --> 00:09:07,829
get the best value out of a particular

00:09:05,699 --> 00:09:11,819
platform that they happen to be running

00:09:07,829 --> 00:09:14,160
on so this permits portability across

00:09:11,819 --> 00:09:16,800
all conforming implementations with it

00:09:14,160 --> 00:09:18,440
most to recompile and that's really the

00:09:16,800 --> 00:09:21,569
the main goal here

00:09:18,440 --> 00:09:23,970
moreover we define an ABI or an

00:09:21,569 --> 00:09:26,639
application binary interface that

00:09:23,970 --> 00:09:29,100
permits application binary portability

00:09:26,639 --> 00:09:32,670
within an instruction set architecture

00:09:29,100 --> 00:09:36,899
so if I have different platforms based

00:09:32,670 --> 00:09:39,540
on AR 64 a single binary can run

00:09:36,899 --> 00:09:41,459
compatibly across all of them and yet

00:09:39,540 --> 00:09:44,130
exploit the unique acceleration

00:09:41,459 --> 00:09:47,339
capability is transparently that each of

00:09:44,130 --> 00:09:50,220
those platforms offers so this really

00:09:47,339 --> 00:09:52,139
avoids vendor lock-in without the

00:09:50,220 --> 00:09:54,269
downside of least common denominator

00:09:52,139 --> 00:09:57,380
limited functionality which is often the

00:09:54,269 --> 00:10:01,250
case when I'm adopting a

00:09:57,380 --> 00:10:06,000
one-size-fits-all type approach to

00:10:01,250 --> 00:10:07,980
acceleration by contrast for SOC vendors

00:10:06,000 --> 00:10:10,290
the advantages are that the

00:10:07,980 --> 00:10:13,649
implementation internals are not exposed

00:10:10,290 --> 00:10:16,740
across an API boundary in many cases if

00:10:13,649 --> 00:10:20,279
you have a set of API is that basically

00:10:16,740 --> 00:10:22,980
define how functions are implemented it

00:10:20,279 --> 00:10:24,899
really constrains the platform vendor as

00:10:22,980 --> 00:10:27,300
to how they can do it it's like well I

00:10:24,899 --> 00:10:29,399
really have no choice the API specifies

00:10:27,300 --> 00:10:32,279
I must do it this way even though I know

00:10:29,399 --> 00:10:34,260
I could do it much faster and provide

00:10:32,279 --> 00:10:38,250
the same function to the application

00:10:34,260 --> 00:10:40,290
without this constraint so this allows

00:10:38,250 --> 00:10:42,750
api's to be realized in hardware

00:10:40,290 --> 00:10:45,509
software or any combination without

00:10:42,750 --> 00:10:49,800
impacting applications which is really

00:10:45,509 --> 00:10:52,019
an important point because vendors are

00:10:49,800 --> 00:10:53,160
not constrained by a fixed software

00:10:52,019 --> 00:10:56,579
centric implementation

00:10:53,160 --> 00:10:58,819
model this permits their unique platform

00:10:56,579 --> 00:11:00,990
value to be exposed without requiring

00:10:58,819 --> 00:11:05,180
application changes which is really the

00:11:00,990 --> 00:11:08,940
killer of you no dilemma that that any

00:11:05,180 --> 00:11:11,009
IP innovator has it's that hey I know a

00:11:08,940 --> 00:11:13,170
new way of doing something that is 10

00:11:11,009 --> 00:11:14,250
times faster but I can't deploy it

00:11:13,170 --> 00:11:17,389
because it requires all these

00:11:14,250 --> 00:11:20,550
application software to be rewritten

00:11:17,389 --> 00:11:23,430
more importantly from an internal

00:11:20,550 --> 00:11:27,000
standpoint I mean every new platform

00:11:23,430 --> 00:11:29,189
typically has an Associated SDK and if I

00:11:27,000 --> 00:11:32,699
have multiple generations of products

00:11:29,189 --> 00:11:34,769
with multiple SDKs these tend to be a

00:11:32,699 --> 00:11:38,610
huge support burden internal to the

00:11:34,769 --> 00:11:41,149
company and ODP you could essentially

00:11:38,610 --> 00:11:43,850
conserve the role as a universal SDK

00:11:41,149 --> 00:11:46,759
which avoids internal fragmentation

00:11:43,850 --> 00:11:52,470
which is another important benefit for

00:11:46,759 --> 00:11:54,660
SOC vendors so the way that that ODP is

00:11:52,470 --> 00:11:58,680
achieving this is buyed intentionally

00:11:54,660 --> 00:12:02,970
having using abstract api's so the api's

00:11:58,680 --> 00:12:05,189
are allow the application to focus on

00:12:02,970 --> 00:12:08,910
the watt while the implementation

00:12:05,189 --> 00:12:11,069
focuses on the how so applications deal

00:12:08,910 --> 00:12:13,350
with functional needs not implementation

00:12:11,069 --> 00:12:17,009
details for instance packet operations

00:12:13,350 --> 00:12:20,220
are performed on OTP packet T objects

00:12:17,009 --> 00:12:22,319
and what is an OTP packet T the answer

00:12:20,220 --> 00:12:24,810
is the application doesn't know or care

00:12:22,319 --> 00:12:29,399
that's an implementation decision as to

00:12:24,810 --> 00:12:30,870
how that concept is realized so the if

00:12:29,399 --> 00:12:34,230
we look at this illustration this is

00:12:30,870 --> 00:12:36,329
just showing sort of a brief overview of

00:12:34,230 --> 00:12:39,329
some of the API is that he provides for

00:12:36,329 --> 00:12:42,180
packet manipulation where an OTP packet

00:12:39,329 --> 00:12:45,569
T object is passed as an argument to

00:12:42,180 --> 00:12:47,579
these api's to address packets to

00:12:45,569 --> 00:12:50,360
manipulate them to provide various

00:12:47,579 --> 00:12:54,029
transforms on them and ultimately to

00:12:50,360 --> 00:12:56,639
send them on their way and all this is

00:12:54,029 --> 00:12:58,680
all done without the application being

00:12:56,639 --> 00:13:02,880
explicitly aware of how these

00:12:58,680 --> 00:13:04,649
transformations are occurring so again

00:13:02,880 --> 00:13:06,520
the saw implementations not being

00:13:04,649 --> 00:13:09,400
constrained by this

00:13:06,520 --> 00:13:11,380
can easily support hardware pack packet

00:13:09,400 --> 00:13:13,630
and buffer managers queues schedulers

00:13:11,380 --> 00:13:16,030
etc and this is really the key to

00:13:13,630 --> 00:13:19,270
providing differentiated differentiated

00:13:16,030 --> 00:13:22,810
value without requiring application

00:13:19,270 --> 00:13:24,460
changes which of course is exactly the

00:13:22,810 --> 00:13:28,900
domain in which Lennar o has always

00:13:24,460 --> 00:13:30,550
operated is that by providing a open

00:13:28,900 --> 00:13:33,660
source implementations for non

00:13:30,550 --> 00:13:36,160
differentiating value it gives the

00:13:33,660 --> 00:13:37,840
application writer and the SOC vendored

00:13:36,160 --> 00:13:40,420
the freedom to really focus on their

00:13:37,840 --> 00:13:42,430
differentiating value which is really

00:13:40,420 --> 00:13:46,810
what makes them stand out from everyone

00:13:42,430 --> 00:13:49,960
else so if we look at the structure and

00:13:46,810 --> 00:13:51,670
scope of ODP there are really a number

00:13:49,960 --> 00:13:54,400
of different components that are

00:13:51,670 --> 00:13:58,360
associated with this the objects in

00:13:54,400 --> 00:14:00,790
green here are really the work product

00:13:58,360 --> 00:14:04,750
of the ODP project itself

00:14:00,790 --> 00:14:08,940
so this concludes the API specification

00:14:04,750 --> 00:14:12,550
which is the innovation boundary and

00:14:08,940 --> 00:14:15,370
reference implementations which are pure

00:14:12,550 --> 00:14:19,120
software reference implementations of

00:14:15,370 --> 00:14:21,970
ODP that are used to allow for its serve

00:14:19,120 --> 00:14:24,220
two purposes one is they give a concrete

00:14:21,970 --> 00:14:27,240
example of how these api's can be

00:14:24,220 --> 00:14:30,580
implemented and secondly they provide a

00:14:27,240 --> 00:14:32,200
platform neutral starting point for

00:14:30,580 --> 00:14:33,940
anyone who wants to do a customized

00:14:32,200 --> 00:14:36,760
accelerated implementation of these

00:14:33,940 --> 00:14:40,450
api's so typically since these are

00:14:36,760 --> 00:14:42,760
written just to you know run on Linux if

00:14:40,450 --> 00:14:44,680
you have a Linux kernel on your SOC you

00:14:42,760 --> 00:14:46,330
can be up in an afternoon with you know

00:14:44,680 --> 00:14:47,710
this running on your thing even if it's

00:14:46,330 --> 00:14:50,850
a completely different architecture or

00:14:47,710 --> 00:14:54,220
has something very different and then

00:14:50,850 --> 00:14:56,530
going from there you'll replace various

00:14:54,220 --> 00:14:57,910
pieces with customized things which

00:14:56,530 --> 00:15:00,490
accelerate so maybe for instance you

00:14:57,910 --> 00:15:02,080
have a hardware buffer manager ok so

00:15:00,490 --> 00:15:03,760
rather than using the software buffer

00:15:02,080 --> 00:15:06,040
manager that is included in the

00:15:03,760 --> 00:15:07,480
reference implementation you'll you'll

00:15:06,040 --> 00:15:10,120
replace that with your hardware buffer

00:15:07,480 --> 00:15:13,250
manager etc

00:15:10,120 --> 00:15:15,230
so we actually have two implementations

00:15:13,250 --> 00:15:16,850
that we do this one is is a pure

00:15:15,230 --> 00:15:18,769
software implementation that runs Linux

00:15:16,850 --> 00:15:22,370
and the other is what we call a no DP

00:15:18,769 --> 00:15:26,029
faceplate on top of DP DK many platforms

00:15:22,370 --> 00:15:28,339
are software centric and already have a

00:15:26,029 --> 00:15:31,010
DP DK implementation running on them if

00:15:28,339 --> 00:15:33,410
you have a DP TK inflamation running on

00:15:31,010 --> 00:15:35,810
them this reference implementation

00:15:33,410 --> 00:15:38,240
essentially just Maps the ODP API

00:15:35,810 --> 00:15:40,430
directly onto the DP DK API so that

00:15:38,240 --> 00:15:43,070
applications written to the OD PAP is

00:15:40,430 --> 00:15:45,320
can run and get the same benefits as if

00:15:43,070 --> 00:15:49,730
they had been written as native DP DK

00:15:45,320 --> 00:15:51,320
applications the blue items here are you

00:15:49,730 --> 00:15:53,870
know the the the sort of the secret

00:15:51,320 --> 00:15:56,209
sauce that that platform vendors provide

00:15:53,870 --> 00:15:59,329
which is native implementations of ODP

00:15:56,209 --> 00:16:04,820
that offer that that really that real

00:15:59,329 --> 00:16:06,829
acceleration capability and then the the

00:16:04,820 --> 00:16:09,500
final green piece on top is the

00:16:06,829 --> 00:16:11,990
validation test suite so it's great to

00:16:09,500 --> 00:16:13,459
have all these different implementations

00:16:11,990 --> 00:16:14,990
of the API but the question is how do

00:16:13,459 --> 00:16:17,480
you know that they all are correctly

00:16:14,990 --> 00:16:20,420
implementing it well we provide a open

00:16:17,480 --> 00:16:24,560
source reference a validation suite

00:16:20,420 --> 00:16:26,209
which can be used by both vendors and

00:16:24,560 --> 00:16:28,870
implementation writers as well as

00:16:26,209 --> 00:16:31,610
application developers to verify that

00:16:28,870 --> 00:16:38,329
implementation X actually conforms to

00:16:31,610 --> 00:16:40,399
the API so the way this works in

00:16:38,329 --> 00:16:44,110
practice from across platform support is

00:16:40,399 --> 00:16:47,959
shown here if I have a no DP application

00:16:44,110 --> 00:16:51,020
written to the API then if I'm running

00:16:47,959 --> 00:16:56,930
for instance on a software centric arm

00:16:51,020 --> 00:16:59,870
or x86 based platform that has DP DK it

00:16:56,930 --> 00:17:02,420
will use the ODP faceplate to map the

00:16:59,870 --> 00:17:05,780
OTP api's onto DP DK and get good

00:17:02,420 --> 00:17:08,169
performance ok on that platform at you

00:17:05,780 --> 00:17:11,319
know basically no cost to the

00:17:08,169 --> 00:17:14,319
application developer or the or the

00:17:11,319 --> 00:17:19,100
platform provider if on the other hand

00:17:14,319 --> 00:17:21,429
the platform has a native ODP

00:17:19,100 --> 00:17:22,550
implementation that's going to exploit

00:17:21,429 --> 00:17:24,770
whatever

00:17:22,550 --> 00:17:27,370
unique IP is available on that platform

00:17:24,770 --> 00:17:30,740
and these are typically ARM based SOC s

00:17:27,370 --> 00:17:32,750
then the same application possibly even

00:17:30,740 --> 00:17:35,500
the same binary application if you're

00:17:32,750 --> 00:17:39,340
talking about a are 64 across the board

00:17:35,500 --> 00:17:41,930
will get optimal performance because

00:17:39,340 --> 00:17:49,430
it's transparently accessing those

00:17:41,930 --> 00:17:51,950
native acceleration features so the the

00:17:49,430 --> 00:17:54,260
question is you know how to structure

00:17:51,950 --> 00:17:57,980
this the you know what Leonora did was

00:17:54,260 --> 00:18:00,200
they transitioned ODP into a sig a

00:17:57,980 --> 00:18:02,450
special interest group basically to

00:18:00,200 --> 00:18:05,750
recognize the project maturity provide

00:18:02,450 --> 00:18:09,200
autonomy and provide more flexible

00:18:05,750 --> 00:18:11,930
membership options reduced cost resource

00:18:09,200 --> 00:18:14,690
commitments ideally for smaller

00:18:11,930 --> 00:18:18,110
companies universities etc and the goal

00:18:14,690 --> 00:18:19,880
was to enable more responsive and

00:18:18,110 --> 00:18:25,370
focused attention to member and

00:18:19,880 --> 00:18:27,970
community needs this is all in support

00:18:25,370 --> 00:18:31,760
of the work flow that we've been

00:18:27,970 --> 00:18:35,120
adopting for the past several years

00:18:31,760 --> 00:18:37,400
which is an iteration between

00:18:35,120 --> 00:18:39,320
architecture API definitions that

00:18:37,400 --> 00:18:42,470
support that and implementations that

00:18:39,320 --> 00:18:46,910
realize those across multiple platforms

00:18:42,470 --> 00:18:48,710
on a positive feedback loop to result in

00:18:46,910 --> 00:18:50,570
AP is that are both portable and

00:18:48,710 --> 00:18:55,360
efficiently implementable across

00:18:50,570 --> 00:18:59,270
multiple platforms where we're going

00:18:55,360 --> 00:19:02,780
right now we've been looking at several

00:18:59,270 --> 00:19:05,690
new areas of api's adding support for

00:19:02,780 --> 00:19:07,310
compression for additional crypto

00:19:05,690 --> 00:19:10,700
algorithms that are particularly

00:19:07,310 --> 00:19:15,290
suitable for 3gpp mobile communications

00:19:10,700 --> 00:19:16,640
the snow and kasumi algorithms some

00:19:15,290 --> 00:19:19,160
lightweight flows which is an

00:19:16,640 --> 00:19:21,980
enhancement to the ODB scheduling model

00:19:19,160 --> 00:19:25,030
and will actually be covering that later

00:19:21,980 --> 00:19:28,940
this afternoon 12:30 right here in

00:19:25,030 --> 00:19:29,490
session YVR 18 to 17 so I invite you to

00:19:28,940 --> 00:19:33,000
come

00:19:29,490 --> 00:19:36,030
to learn more about that and tunneling

00:19:33,000 --> 00:19:39,990
one of the one of the issues that you

00:19:36,030 --> 00:19:43,100
have increasingly is applications

00:19:39,990 --> 00:19:46,350
packets are tunneled in other other

00:19:43,100 --> 00:19:49,559
protocols and so providing generic

00:19:46,350 --> 00:19:52,830
decapsulation encapsulation protocols is

00:19:49,559 --> 00:19:54,320
something of interest one of the other

00:19:52,830 --> 00:19:57,750
things we've really been focusing on

00:19:54,320 --> 00:19:59,460
this year has been scale of improving

00:19:57,750 --> 00:20:03,090
the scalability and performance

00:19:59,460 --> 00:20:06,720
so we've now thanks to the availability

00:20:03,090 --> 00:20:08,940
of platforms like thunder x2 we've been

00:20:06,720 --> 00:20:12,890
able to do testing on large core count

00:20:08,940 --> 00:20:16,559
systems greater than 200 cores and

00:20:12,890 --> 00:20:20,160
continued streamlining of the software

00:20:16,559 --> 00:20:22,110
scheduler that ODP includes which is now

00:20:20,160 --> 00:20:25,200
showing performance within 10 percent of

00:20:22,110 --> 00:20:27,690
pole node operation which basically is a

00:20:25,200 --> 00:20:30,870
good way of providing proof of the

00:20:27,690 --> 00:20:35,040
scalable model the other thing we're

00:20:30,870 --> 00:20:38,790
doing which is joint with the newland

00:20:35,040 --> 00:20:43,350
our own networking and telecom sig is

00:20:38,790 --> 00:20:45,480
looking at additional bug fixes and

00:20:43,350 --> 00:20:48,240
enhancements for tuning and performance

00:20:45,480 --> 00:20:50,640
scaling on ARM based platforms since

00:20:48,240 --> 00:20:52,740
that group is is chartered with working

00:20:50,640 --> 00:20:57,780
directly with the DP DK upstream and

00:20:52,740 --> 00:20:59,309
we're working in working with DP DK for

00:20:57,780 --> 00:21:02,550
this faceplate we've discovered that

00:20:59,309 --> 00:21:04,350
there are a number of limitations in DP

00:21:02,550 --> 00:21:06,870
DK today which really prevent it from

00:21:04,350 --> 00:21:08,880
scaling as efficiently as we'd like and

00:21:06,870 --> 00:21:11,520
there's also been some interest

00:21:08,880 --> 00:21:13,620
expressed in more high efficiency

00:21:11,520 --> 00:21:14,940
east-west message passing for

00:21:13,620 --> 00:21:16,820
virtualized and containerized

00:21:14,940 --> 00:21:19,820
applications so that's another area

00:21:16,820 --> 00:21:19,820
which

00:21:20,310 --> 00:21:27,950
other of interest so any questions

00:21:34,059 --> 00:21:36,719
yes

00:21:39,010 --> 00:21:45,490
so the question was who are the vendors

00:21:41,830 --> 00:21:47,440
currently using ODP we've I mean I think

00:21:45,490 --> 00:21:53,020
they're they're the the announced ones

00:21:47,440 --> 00:21:56,020
are caveum Marvel and we know there are

00:21:53,020 --> 00:21:59,640
a number of others I don't know how well

00:21:56,020 --> 00:21:59,640
they want to publicize themselves

00:22:04,160 --> 00:22:15,170
any other questions object could we get

00:22:13,460 --> 00:22:17,710
a microphone unfortunate it's a very

00:22:15,170 --> 00:22:17,710
large room

00:22:31,780 --> 00:22:37,610
real-world products have been shipped

00:22:34,780 --> 00:22:39,320
yeah yeah so the question was was you

00:22:37,610 --> 00:22:41,540
know how how how many real-world

00:22:39,320 --> 00:22:43,100
products have been shipped with this and

00:22:41,540 --> 00:22:46,460
the answer is there there have been

00:22:43,100 --> 00:22:49,130
real-world product shipped unfortunately

00:22:46,460 --> 00:22:51,830
a lot of the vendors who've done so have

00:22:49,130 --> 00:22:54,320
not chosen to publicize that so this is

00:22:51,830 --> 00:22:57,200
really viewed as as plumbing you know I

00:22:54,320 --> 00:22:59,300
mean when when I'm selling a when I'm

00:22:57,200 --> 00:23:01,910
selling a vehicle you know most people

00:22:59,300 --> 00:23:05,360
don't advertise and it has an engine you

00:23:01,910 --> 00:23:06,740
know or it has a steering wheel so so

00:23:05,360 --> 00:23:08,810
that's that's one of the problems with

00:23:06,740 --> 00:23:12,200
being working in deep infrastructure is

00:23:08,810 --> 00:23:13,850
that it it's plumbing it's it's useful

00:23:12,200 --> 00:23:20,710
but but it tends not to get the

00:23:13,850 --> 00:23:20,710
headlines anything else yes

00:23:25,060 --> 00:23:31,300
I'm sorry here I think we got a mic

00:23:27,100 --> 00:23:33,370
coming here sorry so question is what

00:23:31,300 --> 00:23:35,950
you think about what would be the most

00:23:33,370 --> 00:23:40,200
important thing right now for the OTP to

00:23:35,950 --> 00:23:45,370
be more brought used more you know

00:23:40,200 --> 00:23:48,700
publicly recognized and and chosen as

00:23:45,370 --> 00:23:54,160
the main development platform by the

00:23:48,700 --> 00:23:57,090
developers that's a good question

00:23:54,160 --> 00:23:59,380
I I think the the the answer would be

00:23:57,090 --> 00:24:01,660
probably if if there were more

00:23:59,380 --> 00:24:03,010
high-profile applications that basically

00:24:01,660 --> 00:24:06,910
came out and said hey and we're doing

00:24:03,010 --> 00:24:10,420
all this with ODP but but that's

00:24:06,910 --> 00:24:13,720
unfortunately not under our control so

00:24:10,420 --> 00:24:21,220
we we tended to extend it to be more

00:24:13,720 --> 00:24:24,780
word-of-mouth in that regard any final

00:24:21,220 --> 00:24:24,780
questions we have a few seconds

00:24:29,120 --> 00:24:36,200
okay well thank you very much

00:24:32,350 --> 00:24:41,200
[Applause]

00:24:36,200 --> 00:24:41,200

YouTube URL: https://www.youtube.com/watch?v=6QYF0Moht_4


