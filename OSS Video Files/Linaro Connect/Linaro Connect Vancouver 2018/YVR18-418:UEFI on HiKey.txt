Title: YVR18-418:UEFI on HiKey
Publication date: 2018-10-04
Playlist: Linaro Connect Vancouver 2018
Description: 
	Introduce the latest progress on HiKey UEFI. Some new changes in upstream.
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:08,190 --> 00:00:17,260
hello how how tantrum and from hi second

00:00:13,360 --> 00:00:20,020
a new team and today I will share

00:00:17,260 --> 00:00:28,180
something about the UEFI are high key

00:00:20,020 --> 00:00:36,609
and the high teen than sixty so for this

00:00:28,180 --> 00:00:43,440
presentation I I do not in introduce you

00:00:36,609 --> 00:00:50,199
you if I hike high hockey with all more

00:00:43,440 --> 00:00:53,409
modules because the firmware is already

00:00:50,199 --> 00:00:57,749
enabled for for a long time and least I

00:00:53,409 --> 00:01:03,309
think he has already have a lot of

00:00:57,749 --> 00:01:08,200
presentation you see so end up being the

00:01:03,309 --> 00:01:13,210
presentation I only focus on the change

00:01:08,200 --> 00:01:21,880
between our grease and what what we will

00:01:13,210 --> 00:01:28,469
do for the streaming as we know that the

00:01:21,880 --> 00:01:32,530
educators is implementation of UEFI and

00:01:28,469 --> 00:01:37,840
and the fourth well the second item is

00:01:32,530 --> 00:01:40,899
our briefs in this release we we have a

00:01:37,840 --> 00:01:43,030
true git repository one is for the edk

00:01:40,899 --> 00:01:46,359
two under the the other one is a

00:01:43,030 --> 00:01:50,770
platform package but the open person

00:01:46,359 --> 00:01:55,270
packages is in a lot of the ones that

00:01:50,770 --> 00:01:58,659
are accepted by the dedicated we have

00:01:55,270 --> 00:02:01,450
three kata repository the second one is

00:01:58,659 --> 00:02:07,030
for the perform drivers and the third

00:02:01,450 --> 00:02:09,460
one is those binaries and for the high

00:02:07,030 --> 00:02:12,569
key and the hÃ¤kkinen sexy we are still

00:02:09,460 --> 00:02:23,379
in the process of

00:02:12,569 --> 00:02:26,280
upstreaming now we supported - true - to

00:02:23,379 --> 00:02:31,090
chain when it thought the GCC but

00:02:26,280 --> 00:02:38,379
because of some backs backs in the GCC

00:02:31,090 --> 00:02:43,209
the virgin should be the 7.1 and we also

00:02:38,379 --> 00:02:47,140
supported the error VM we should specify

00:02:43,209 --> 00:02:51,610
the trans at least of all the street or

00:02:47,140 --> 00:02:53,829
nine if people wants to build it from

00:02:51,610 --> 00:03:03,840
whereby he by himself or we also have

00:02:53,829 --> 00:03:08,410
sample scripts to handle it in the

00:03:03,840 --> 00:03:12,250
implementation we used the the device

00:03:08,410 --> 00:03:15,129
tree actually for the edk - we can

00:03:12,250 --> 00:03:21,010
select either the either - supported a

00:03:15,129 --> 00:03:25,150
CPI and the device tree but but I as we

00:03:21,010 --> 00:03:30,489
know in embedded result we don't have

00:03:25,150 --> 00:03:34,030
the PCI bus and a CPI so we will choose

00:03:30,489 --> 00:03:37,630
to use the device tree and under the

00:03:34,030 --> 00:03:43,209
deferred trees can describe the hardware

00:03:37,630 --> 00:03:45,819
capabilities and the it should be

00:03:43,209 --> 00:03:50,889
transferred to the Linux kernel by at

00:03:45,819 --> 00:03:54,669
some point in our high key

00:03:50,889 --> 00:03:55,180
implementation in initial we store the

00:03:54,669 --> 00:03:58,299
TTB

00:03:55,180 --> 00:04:01,690
at at the end of the kernel image I

00:03:58,299 --> 00:04:06,299
think it's a you use the wired wired

00:04:01,690 --> 00:04:10,299
commonly and in and we also support to

00:04:06,299 --> 00:04:15,160
store the TTB in the boot or root

00:04:10,299 --> 00:04:18,789
affairs partition our rhesus I think

00:04:15,160 --> 00:04:22,360
it's only for the early stage now for

00:04:18,789 --> 00:04:23,830
the streaming we change the policy the

00:04:22,360 --> 00:04:26,919
TTB

00:04:23,830 --> 00:04:31,569
it could be could be builded into the

00:04:26,919 --> 00:04:38,889
film where it is filled in the section

00:04:31,569 --> 00:04:42,039
raw we just needed to write write this

00:04:38,889 --> 00:04:47,199
kind of information in the highly

00:04:42,039 --> 00:04:52,719
thought SDF file and we ride on the TT

00:04:47,199 --> 00:04:55,210
platform driver and in this

00:04:52,719 --> 00:05:05,740
implementation we only support one TTB

00:04:55,210 --> 00:05:14,800
so so we always put the TTP file from

00:05:05,740 --> 00:05:23,080
the latest kernel and start into its

00:05:14,800 --> 00:05:30,789
repository when and in the in the you

00:05:23,080 --> 00:05:35,520
see we we we have the prompt of the EF

00:05:30,789 --> 00:05:38,469
EFI system table the system table

00:05:35,520 --> 00:05:41,860
contains a pointer to the runtime and

00:05:38,469 --> 00:05:45,789
the port time safe stable and TTP is

00:05:41,860 --> 00:05:48,909
also a part of the EFI cons EFI system

00:05:45,789 --> 00:05:52,539
table so we could have use the

00:05:48,909 --> 00:05:56,159
reflection of the install controller

00:05:52,539 --> 00:06:03,460
tables that belongs to the group of

00:05:56,159 --> 00:06:09,339
branches food service and from the view

00:06:03,460 --> 00:06:13,029
of the edk to the kernel is just a EFI

00:06:09,339 --> 00:06:17,550
application so you think would put of

00:06:13,029 --> 00:06:20,710
the keynote directory for example we

00:06:17,550 --> 00:06:23,680
implemented this behavior when we try to

00:06:20,710 --> 00:06:27,300
put as Android kernel and the kernel

00:06:23,680 --> 00:06:31,840
could also be loaded by the bootloader

00:06:27,300 --> 00:06:36,669
so we use this way we just grab to load

00:06:31,840 --> 00:06:46,150
okay now for example if we want to boot

00:06:36,669 --> 00:06:49,660
the system for tip-in so this is the

00:06:46,150 --> 00:06:54,360
code in the kernel so when when we

00:06:49,660 --> 00:06:58,090
enable the config li-fi this entry is

00:06:54,360 --> 00:07:02,220
first entry of the car now we can we can

00:06:58,090 --> 00:07:02,220
find the call the

00:07:02,370 --> 00:07:10,000
this is the parameter of the system

00:07:04,630 --> 00:07:16,960
table that is specified the PI's you

00:07:10,000 --> 00:07:19,870
fail and in the in the real

00:07:16,960 --> 00:07:25,060
implementation of the efi entry we can

00:07:19,870 --> 00:07:28,600
find that it were phrase phase the

00:07:25,060 --> 00:07:31,479
parameter of the TTP point from the EFI

00:07:28,600 --> 00:07:33,910
system table and then can locate the DB

00:07:31,479 --> 00:07:41,770
and it will get more information about

00:07:33,910 --> 00:07:49,050
the hardware and for this one because we

00:07:41,770 --> 00:07:53,470
want to support multiple driver in

00:07:49,050 --> 00:07:57,700
supposable multiple device in the best

00:07:53,470 --> 00:08:03,430
instance for the same driver the reason

00:07:57,700 --> 00:08:08,110
is for the for the embedded system we

00:08:03,430 --> 00:08:11,889
always specify the red the red space by

00:08:08,110 --> 00:08:16,240
the PCD value but for example if we want

00:08:11,889 --> 00:08:19,030
to support for example in the real

00:08:16,240 --> 00:08:24,190
circle we may have the MCM you may have

00:08:19,030 --> 00:08:30,389
the SD they are using the same IP but we

00:08:24,190 --> 00:08:35,729
don't want to use use multiple drivers

00:08:30,389 --> 00:08:40,930
so oh sorry sorry sorry

00:08:35,729 --> 00:08:42,479
we we don't want to use the multiple

00:08:40,930 --> 00:08:51,630
drivers

00:08:42,479 --> 00:08:55,320
so we wish the we so we try to add a new

00:08:51,630 --> 00:09:00,899
device driver that is and Nan discover a

00:08:55,320 --> 00:09:05,899
device driver this driver actually is is

00:09:00,899 --> 00:09:16,139
divided it's derived from the non

00:09:05,899 --> 00:09:19,170
discovery PC iOS driver and but the but

00:09:16,139 --> 00:09:22,740
the this driver is only focused on to

00:09:19,170 --> 00:09:26,190
simulate the piece I pass because in the

00:09:22,740 --> 00:09:31,850
high key we don't have the PCI bus we so

00:09:26,190 --> 00:09:37,920
we use this one to claim the different

00:09:31,850 --> 00:09:48,269
register base of the EMC and an SD

00:09:37,920 --> 00:09:54,240
driver so it's here is here is - it's a

00:09:48,269 --> 00:10:01,350
mouse for the SD driver the first one is

00:09:54,240 --> 00:10:14,240
about an x86 here is the framework of

00:10:01,350 --> 00:10:18,899
the st driver and we we and this is

00:10:14,240 --> 00:10:22,230
pretty high we sell travel and but you

00:10:18,899 --> 00:10:25,139
know implementation we we have the two

00:10:22,230 --> 00:10:35,040
different driver to implement a similar

00:10:25,139 --> 00:10:41,399
feature of this one and and we because

00:10:35,040 --> 00:10:47,150
we only in previous rise we we say that

00:10:41,399 --> 00:10:52,490
we were building a 1 TB entry into the

00:10:47,150 --> 00:10:55,990
you face it only means that we have to

00:10:52,490 --> 00:11:01,430
use the one TTP to support multiple

00:10:55,990 --> 00:11:05,839
versions of the hardware for example for

00:11:01,430 --> 00:11:12,140
the high teen 960 the hardware is a bit

00:11:05,839 --> 00:11:14,060
different so there's the Jumeirah pings

00:11:12,140 --> 00:11:15,860
through the LED are different and the

00:11:14,060 --> 00:11:18,710
cheaper things through the USB hub are

00:11:15,860 --> 00:11:22,850
also different because we want to

00:11:18,710 --> 00:11:27,500
distinguish two different hardware's the

00:11:22,850 --> 00:11:32,110
ADC converter is added we can read and

00:11:27,500 --> 00:11:36,650
edit comment link to the version

00:11:32,110 --> 00:11:39,020
resistor we can read the value and

00:11:36,650 --> 00:11:48,920
identify which are everything we are

00:11:39,020 --> 00:11:53,450
using so then we could replace replace

00:11:48,920 --> 00:11:57,980
the different different property node

00:11:53,450 --> 00:12:00,260
into the TP according to the hardware

00:11:57,980 --> 00:12:14,060
version and all this operation is based

00:12:00,260 --> 00:12:20,920
on the SDK level and for for the and we

00:12:14,060 --> 00:12:24,910
also did some enhancement in the manager

00:12:20,920 --> 00:12:30,020
as we know that in your face that is

00:12:24,910 --> 00:12:32,620
designed for the server first so every

00:12:30,020 --> 00:12:42,350
put every put options could be selected

00:12:32,620 --> 00:12:52,160
by the console but for the and this also

00:12:42,350 --> 00:12:54,290
have requirement this also has this also

00:12:52,160 --> 00:12:58,940
means that

00:12:54,290 --> 00:13:01,910
when user installer OS that were created

00:12:58,940 --> 00:13:05,480
that put options but for the embedded

00:13:01,910 --> 00:13:09,440
system we we hopes that all put options

00:13:05,480 --> 00:13:13,660
should be created before you that you

00:13:09,440 --> 00:13:20,000
use since there is no OS in Storer

00:13:13,660 --> 00:13:22,970
so we we add a so we add a new protocol

00:13:20,000 --> 00:13:30,910
the preform put municipal code into the

00:13:22,970 --> 00:13:36,230
phone put mental label and as we know

00:13:30,910 --> 00:13:45,590
the main difference between the educator

00:13:36,230 --> 00:13:50,140
and the you you boot is based on the

00:13:45,590 --> 00:13:56,360
models they all UEFI driver appeared as

00:13:50,140 --> 00:13:58,970
modules so if we want to we want to

00:13:56,360 --> 00:14:02,690
communicate with our platform driver and

00:13:58,970 --> 00:14:06,800
the educate to the common code we need a

00:14:02,690 --> 00:14:08,690
base on the interface we needed to

00:14:06,800 --> 00:14:13,330
install the perform tool manager

00:14:08,690 --> 00:14:17,420
protocol in choose prop on driver and in

00:14:13,330 --> 00:14:20,980
program put manager labor we could get

00:14:17,420 --> 00:14:25,100
as a it as a function call from the

00:14:20,980 --> 00:14:30,950
interface and we can get as a detail of

00:14:25,100 --> 00:14:40,570
the blue menu and or keys and read

00:14:30,950 --> 00:14:47,410
registered into the put manager from

00:14:40,570 --> 00:14:51,980
from this so this is in implementation

00:14:47,410 --> 00:14:54,650
in the performer manager lab we can find

00:14:51,980 --> 00:14:57,170
in the functional they were tried to

00:14:54,650 --> 00:15:03,410
load as put options from the variable

00:14:57,170 --> 00:15:05,160
storage but in high key we in the latest

00:15:03,410 --> 00:15:09,720
high key we didn't in

00:15:05,160 --> 00:15:13,830
the variable storage so we were trying

00:15:09,720 --> 00:15:20,760
to load a predefined predefined the

00:15:13,830 --> 00:15:25,860
Buddha without put options so as we know

00:15:20,760 --> 00:15:29,640
that is a variable storage is is you is

00:15:25,860 --> 00:15:36,660
used to store some variables when the

00:15:29,640 --> 00:15:37,590
always in in Storer try to install the

00:15:36,660 --> 00:15:40,620
whole arrays

00:15:37,590 --> 00:15:42,740
it will create the project when it's

00:15:40,620 --> 00:15:46,320
finished

00:15:42,740 --> 00:15:50,010
and when the output of shims

00:15:46,320 --> 00:15:58,620
load a load we will call this function

00:15:50,010 --> 00:16:02,550
to register into the put manager for

00:15:58,620 --> 00:16:07,890
this driver is also appended because

00:16:02,550 --> 00:16:08,910
it's related to the Buddha manager for

00:16:07,890 --> 00:16:12,860
the server side

00:16:08,910 --> 00:16:17,910
people always selected the selected the

00:16:12,860 --> 00:16:24,930
put menu by the keyboard and and he were

00:16:17,910 --> 00:16:29,730
gated gated view from the console but I

00:16:24,930 --> 00:16:34,350
for the embedded system people actually

00:16:29,730 --> 00:16:38,700
people hope it got the boot as quick as

00:16:34,350 --> 00:16:44,160
possible so we we need a garrison ship

00:16:38,700 --> 00:16:49,830
some short circuits such as we use GPIO

00:16:44,160 --> 00:16:53,130
switch for example if we just switch on

00:16:49,830 --> 00:17:00,060
we can put to the fastboot mode or we

00:16:53,130 --> 00:17:03,300
can put to the normal mode and in the

00:17:00,060 --> 00:17:09,510
boot manager it were just a received key

00:17:03,300 --> 00:17:14,520
keyboard event so we added the virtual

00:17:09,510 --> 00:17:16,449
keyboard driver to simulator the the ggp

00:17:14,520 --> 00:17:22,329
are setting into the

00:17:16,449 --> 00:17:30,130
she keyboard value and the this is the

00:17:22,329 --> 00:17:35,919
interface of the protocol and for the

00:17:30,130 --> 00:17:40,139
enjoy amateur sport we in the late in

00:17:35,919 --> 00:17:43,269
the latest version we supported as a

00:17:40,139 --> 00:17:46,450
treatise of Colonel initial we just

00:17:43,269 --> 00:17:50,590
supported the raw rocker now now we

00:17:46,450 --> 00:17:55,750
added we enhanced with G sub Colonel we

00:17:50,590 --> 00:18:02,289
also add as a ram disk and now grant

00:17:55,750 --> 00:18:05,289
export so for this it means that you we

00:18:02,289 --> 00:18:08,740
can also attach the gtp still in the end

00:18:05,289 --> 00:18:13,289
of turn out to be compatible with our

00:18:08,740 --> 00:18:21,070
version high T we also could use

00:18:13,289 --> 00:18:24,309
separated TTP that a brings you see all

00:18:21,070 --> 00:18:29,309
all this implementation is contained in

00:18:24,309 --> 00:18:33,240
the a perimeter lately and this is about

00:18:29,309 --> 00:18:39,100
stream status we already upstream the

00:18:33,240 --> 00:18:43,870
pool manager virtually keyboard a boot

00:18:39,100 --> 00:18:47,620
image but we still left some components

00:18:43,870 --> 00:18:57,210
so especially positivist driver the SD

00:18:47,620 --> 00:18:57,210
USB and u FS in a question

00:18:58,809 --> 00:19:01,929
thank you

00:19:02,820 --> 00:19:10,869
[Applause]

00:19:05,860 --> 00:19:10,869

YouTube URL: https://www.youtube.com/watch?v=EEn6mvDH5eI


