Title: YVR18-117:SWG updates since HKG18
Publication date: 2018-09-28
Playlist: Linaro Connect Vancouver 2018
Description: 
	Security Working Group has been working with a couple of interesting features the last couple of months. In this presentation we would like to give a short introduction and updates to a couple of different topics, like Android Verified Boot 2.0, TEE support from U-Boot, dynamically linked TA support support in OP-TEE, Buildroot support and PKCS#11 OP-TEE library.
Captions: 
	00:00:02,110 --> 00:00:07,120
[Music]

00:00:08,559 --> 00:00:15,740
okay so hi and welcome to this session

00:00:12,049 --> 00:00:17,780
about updates that's we been doing

00:00:15,740 --> 00:00:19,310
working with since previous connect so

00:00:17,780 --> 00:00:20,660
these keep machines are some kind of

00:00:19,310 --> 00:00:22,640
lightning talks where we have small

00:00:20,660 --> 00:00:27,950
presentation by a couple of different

00:00:22,640 --> 00:00:31,550
people here so yeah we have Igor here

00:00:27,950 --> 00:00:33,860
who's been working with Levi VB and a

00:00:31,550 --> 00:00:36,560
little bit related to ubud and also some

00:00:33,860 --> 00:00:40,400
key master things we have Jen's has been

00:00:36,560 --> 00:00:43,550
working reverses ubud features with teas

00:00:40,400 --> 00:00:46,220
in this case Jerome will let you know a

00:00:43,550 --> 00:00:48,980
little bit more about a way that you can

00:00:46,220 --> 00:00:52,220
use dynamically linked libraries from

00:00:48,980 --> 00:00:54,230
secure side and Vee has been working

00:00:52,220 --> 00:00:56,930
with key master also and then I will

00:00:54,230 --> 00:00:59,090
kind of pick some more minor things also

00:00:56,930 --> 00:01:04,670
that we mentioned but we we start with

00:00:59,090 --> 00:01:07,790
you job thank you you okay so I have a

00:01:04,670 --> 00:01:09,440
couple of words to say about Thai tea a

00:01:07,790 --> 00:01:11,570
dynamic link so that's a new feature

00:01:09,440 --> 00:01:16,159
that was introducing the latest version

00:01:11,570 --> 00:01:18,170
of updates available in 3.2 so what it

00:01:16,159 --> 00:01:23,690
is basically nothing really surprising

00:01:18,170 --> 00:01:26,510
for any of you I suppose basically you

00:01:23,690 --> 00:01:30,350
can create and sign the shared library

00:01:26,510 --> 00:01:34,340
using the usual linking linker comma

00:01:30,350 --> 00:01:36,350
command so LD - and you provide an SSO

00:01:34,340 --> 00:01:38,450
name and then you produce a shared

00:01:36,350 --> 00:01:42,650
library instead of producing your static

00:01:38,450 --> 00:01:46,970
Lib and then we have our own as usual

00:01:42,650 --> 00:01:50,530
signing script that allows the binary to

00:01:46,970 --> 00:01:54,680
be signed for later being loaded by the

00:01:50,530 --> 00:01:57,740
Optio s core then the second step is

00:01:54,680 --> 00:01:59,810
obviously to use this library in a

00:01:57,740 --> 00:02:02,570
trusted application so you will also use

00:01:59,810 --> 00:02:06,890
the linker obviously provide

00:02:02,570 --> 00:02:10,820
some object files and then you specify

00:02:06,890 --> 00:02:12,860
the library as the link argument and

00:02:10,820 --> 00:02:15,470
then it will produce a nice elf file

00:02:12,860 --> 00:02:18,020
that you will then sign using the same

00:02:15,470 --> 00:02:21,980
script so basically instead of having

00:02:18,020 --> 00:02:23,630
only one binary which is the TA trusted

00:02:21,980 --> 00:02:26,270
application that you provide to the T

00:02:23,630 --> 00:02:27,920
you have a couple of them

00:02:26,270 --> 00:02:30,790
the main application and the share

00:02:27,920 --> 00:02:35,360
library exactly like in the normal world

00:02:30,790 --> 00:02:38,750
so to facilitate or I mean extend the

00:02:35,360 --> 00:02:41,210
way we are currently producing trusted

00:02:38,750 --> 00:02:46,370
application we have added a couple of

00:02:41,210 --> 00:02:50,450
outside a couple of macros in our make

00:02:46,370 --> 00:02:52,310
file rules so you just specify the name

00:02:50,450 --> 00:02:54,320
of your share library like this and you

00:02:52,310 --> 00:02:58,040
give a UID because everything is based

00:02:54,320 --> 00:02:59,990
on unique IDs in in the T and then you

00:02:58,040 --> 00:03:01,250
include the make file and it will do

00:02:59,990 --> 00:03:03,890
everything for you

00:03:01,250 --> 00:03:06,230
basically and this is the same the

00:03:03,890 --> 00:03:08,360
equivalent part in the ti make file you

00:03:06,230 --> 00:03:10,580
give the binary name and then you just

00:03:08,360 --> 00:03:13,700
specify that you need to link against

00:03:10,580 --> 00:03:18,110
the share library so you can see some

00:03:13,700 --> 00:03:21,200
example in our test test suite we have

00:03:18,110 --> 00:03:23,000
basically added one test that depends on

00:03:21,200 --> 00:03:25,730
a shared library and the secure site so

00:03:23,000 --> 00:03:29,930
that's a kind of a regression test for

00:03:25,730 --> 00:03:31,880
us just a few words about the actual

00:03:29,930 --> 00:03:33,980
implementation so that was really an

00:03:31,880 --> 00:03:37,610
extension of the current elf loader that

00:03:33,980 --> 00:03:39,590
we has in the opticore so what had to be

00:03:37,610 --> 00:03:41,500
done is to locate the PG dynamic entry

00:03:39,590 --> 00:03:44,720
in the program headers then passed the

00:03:41,500 --> 00:03:46,820
DT needed entries that's basically the

00:03:44,720 --> 00:03:51,160
list of the you IDs you need to run the

00:03:46,820 --> 00:03:53,690
TA then we load and verify each library

00:03:51,160 --> 00:03:55,550
you should know that we do not share

00:03:53,690 --> 00:03:57,739
memory pages for the moment so that's

00:03:55,550 --> 00:03:59,930
shared library that are really shared in

00:03:57,739 --> 00:04:02,540
the storage but not really in memory so

00:03:59,930 --> 00:04:06,800
no no gain in memory for the moment that

00:04:02,540 --> 00:04:10,000
could be modified later if needed then

00:04:06,800 --> 00:04:10,000
we have this real

00:05:07,300 --> 00:05:14,360
it is a panic dump I think so opti will

00:05:11,840 --> 00:05:18,650
show a lot of information what's new

00:05:14,360 --> 00:05:20,990
with the shared library stuff is that we

00:05:18,650 --> 00:05:23,090
just identified the libraries with the

00:05:20,990 --> 00:05:25,789
number so that's library in a binary

00:05:23,090 --> 00:05:27,380
number zero binary number one you see

00:05:25,789 --> 00:05:30,470
this zero is found here

00:05:27,380 --> 00:05:33,680
there's the UID and the load address and

00:05:30,470 --> 00:05:36,740
the one is also here with the its UID

00:05:33,680 --> 00:05:38,599
and load address so the first file is

00:05:36,740 --> 00:05:42,080
the main executable and the other ones

00:05:38,599 --> 00:05:48,800
are the share libraries so if you decode

00:05:42,080 --> 00:05:50,539
that yeah this output comes on the

00:05:48,800 --> 00:05:53,479
secure console when you're debugging

00:05:50,539 --> 00:05:55,250
your application so if you have built up

00:05:53,479 --> 00:06:01,060
to with the default Flags then you will

00:05:55,250 --> 00:06:01,060
have this this output and here is the

00:06:02,260 --> 00:06:08,539
out this text through the symbolised

00:06:05,750 --> 00:06:10,849
script then it will be able to decode

00:06:08,539 --> 00:06:12,830
the stack addresses give you function

00:06:10,849 --> 00:06:18,590
names and source code and here you can

00:06:12,830 --> 00:06:22,849
see that those two this dress falls into

00:06:18,590 --> 00:06:28,340
the library in a different path so yeah

00:06:22,849 --> 00:06:30,830
that's it any question or maybe we keep

00:06:28,340 --> 00:06:33,460
question for the end Nia no question

00:06:30,830 --> 00:06:33,460
yeah

00:06:35,240 --> 00:06:41,880
so the shared libraries I guess as you

00:06:38,850 --> 00:06:43,950
load ta at the same time you will kind

00:06:41,880 --> 00:06:46,950
of have some supplicant communication to

00:06:43,950 --> 00:06:49,560
load the shared libraries as well and

00:06:46,950 --> 00:06:51,870
then perform the linking before finally

00:06:49,560 --> 00:06:54,840
the tea is up and ready to start

00:06:51,870 --> 00:06:57,120
executing yes exactly

00:06:54,840 --> 00:06:59,940
shared libraries are exactly loaded the

00:06:57,120 --> 00:07:02,040
same as the binary for the main

00:06:59,940 --> 00:07:03,780
application so same process they can be

00:07:02,040 --> 00:07:06,780
stored at the same places in the file

00:07:03,780 --> 00:07:09,690
system or in the early ta space as we

00:07:06,780 --> 00:07:12,210
called it so that's why also we chose to

00:07:09,690 --> 00:07:14,070
identify the library it with UUID

00:07:12,210 --> 00:07:16,410
because it makes that compatible with

00:07:14,070 --> 00:07:25,350
the way we load to the binary in the

00:07:16,410 --> 00:07:28,620
regular way do you guys currently or in

00:07:25,350 --> 00:07:31,080
the future plan to support encryption of

00:07:28,620 --> 00:07:34,500
the object code or the some part of the

00:07:31,080 --> 00:07:37,350
elf file so that basically the attackers

00:07:34,500 --> 00:07:39,000
can't you know try to figure out where

00:07:37,350 --> 00:07:42,510
things are to attack for certain

00:07:39,000 --> 00:07:45,680
vulnerabilities yes

00:07:42,510 --> 00:07:49,230
currently the trusted applications are

00:07:45,680 --> 00:07:53,490
signed but they are not encrypted but we

00:07:49,230 --> 00:07:58,380
do have an interface so at the at the

00:07:53,490 --> 00:08:01,800
point the opticore will load the TA or

00:07:58,380 --> 00:08:04,110
any binary there is an interface and we

00:08:01,800 --> 00:08:07,170
currently have plugged only a signature

00:08:04,110 --> 00:08:09,690
algorithm but it's it's possibility you

00:08:07,170 --> 00:08:12,380
can change that code and possibly add

00:08:09,690 --> 00:08:16,630
some encryption to it

00:08:12,380 --> 00:08:19,090
actually we do support encrypted TS and

00:08:16,630 --> 00:08:21,760
shut libraries but you have to install

00:08:19,090 --> 00:08:27,790
it in a certain way but but the even and

00:08:21,760 --> 00:08:30,370
as carries today it's supported but I

00:08:27,790 --> 00:08:32,650
think what you're asking from the first

00:08:30,370 --> 00:08:34,450
time and when you run it if you support

00:08:32,650 --> 00:08:36,789
encrypted trust applications that yes

00:08:34,450 --> 00:08:38,229
and that's cases no for a moment.we it's

00:08:36,789 --> 00:08:40,090
been discussed a couple of times whether

00:08:38,229 --> 00:08:42,370
we should do or not but if you install

00:08:40,090 --> 00:08:44,110
it like you and said then you can run it

00:08:42,370 --> 00:08:48,270
from secure store directly so you don't

00:08:44,110 --> 00:08:48,270
really do it anymore visibly for hours

00:08:48,950 --> 00:09:01,060
[Music]

00:08:51,120 --> 00:09:06,550
any more question yes hello gents

00:09:01,060 --> 00:09:09,940
quickly under my name so I've been I've

00:09:06,550 --> 00:09:12,430
been working with the opti driver for

00:09:09,940 --> 00:09:15,610
you boot you know we have one for the

00:09:12,430 --> 00:09:24,400
Linux kernel which I also wrote some

00:09:15,610 --> 00:09:26,080
time ago and yeah it's has only been a

00:09:24,400 --> 00:09:32,290
matter of time before we have needed it

00:09:26,080 --> 00:09:35,920
in you but also as in leading in the

00:09:32,290 --> 00:09:40,180
Linux kernel the focuses on opti based

00:09:35,920 --> 00:09:44,590
on on trust oh I'm working on the off

00:09:40,180 --> 00:09:47,410
streaming right now I'm at v3 and it's

00:09:44,590 --> 00:09:50,080
progressing well I have good responses

00:09:47,410 --> 00:09:54,490
from Simon gloss helps a lot with the

00:09:50,080 --> 00:09:56,200
reviewing I expect that after connect I

00:09:54,490 --> 00:10:01,650
will send out the before which will be

00:09:56,200 --> 00:10:01,650
even closer to getting acceptance

00:10:03,540 --> 00:10:09,430
so if we look at the different parts of

00:10:06,910 --> 00:10:14,410
the driver it's similar to the kernel

00:10:09,430 --> 00:10:17,050
model but we can see that we have the

00:10:14,410 --> 00:10:20,980
normal world part that's a bit

00:10:17,050 --> 00:10:23,710
simplified if we compare to the kernel

00:10:20,980 --> 00:10:27,940
where we have you see we have a user

00:10:23,710 --> 00:10:28,450
space and a supplicant and all that

00:10:27,940 --> 00:10:33,010
stuff

00:10:28,450 --> 00:10:34,360
and here we it's much shorter flow but

00:10:33,010 --> 00:10:36,520
on the other hand it's a less

00:10:34,360 --> 00:10:39,600
complicated environment also we don't

00:10:36,520 --> 00:10:43,150
have used space secure world is the same

00:10:39,600 --> 00:10:51,670
we have the opti message protocol and we

00:10:43,150 --> 00:10:57,370
use SMC's as a way of communicating so

00:10:51,670 --> 00:11:01,480
the interface to opti it's a new you

00:10:57,370 --> 00:11:05,500
class that's how you attract devices in

00:11:01,480 --> 00:11:12,250
India boot and the new class is similar

00:11:05,500 --> 00:11:14,230
to the T subsystem in the kernel and in

00:11:12,250 --> 00:11:16,210
the class we register the different

00:11:14,230 --> 00:11:24,160
drivers in this case the object rival

00:11:16,210 --> 00:11:27,420
and yeah the trusted OS is of course

00:11:24,160 --> 00:11:27,420
running in secure world

00:11:30,230 --> 00:11:37,340
and here we can see how it's organized

00:11:33,860 --> 00:11:40,550
in the Linux kernel we have used space

00:11:37,340 --> 00:11:43,790
where the client is and here we have an

00:11:40,550 --> 00:11:47,270
additional interface which is the kernel

00:11:43,790 --> 00:11:50,450
interface and also we have the T

00:11:47,270 --> 00:11:53,420
supplicant which is a daemon running in

00:11:50,450 --> 00:11:59,720
user space in in Ubud it's integrated

00:11:53,420 --> 00:12:03,580
within the driver it makes both easier

00:11:59,720 --> 00:12:03,580
and harder in certain ways

00:12:12,620 --> 00:12:21,290
and then the actual lock key driver in

00:12:15,200 --> 00:12:24,680
in youbut you can see that we need to be

00:12:21,290 --> 00:12:27,350
able to serve you opti in the same way

00:12:24,680 --> 00:12:32,840
as in Linux we have to be able to handle

00:12:27,350 --> 00:12:38,900
our pcs here it's primarily to do file

00:12:32,840 --> 00:12:41,300
system access in our PMB since in you

00:12:38,900 --> 00:12:44,090
but it's a single-threaded environment

00:12:41,300 --> 00:12:46,100
so we don't have new Texas or anything

00:12:44,090 --> 00:12:52,130
like that that will require the

00:12:46,100 --> 00:12:57,980
assistant from normal world and in order

00:12:52,130 --> 00:13:01,220
to access our PMB we use the MMC driver

00:12:57,980 --> 00:13:04,760
in do boot instead in a similar similar

00:13:01,220 --> 00:13:08,660
way yes we do it in in linux this way we

00:13:04,760 --> 00:13:11,300
can avoid having an MMC driver in in

00:13:08,660 --> 00:13:13,220
opti and also we avoid the problem of

00:13:11,300 --> 00:13:20,240
synchronization between different

00:13:13,220 --> 00:13:24,710
drivers and this way of routing our PMB

00:13:20,240 --> 00:13:27,530
frames to the MMC driver it's quite

00:13:24,710 --> 00:13:31,760
straightforward it's only one new

00:13:27,530 --> 00:13:34,750
function that I was I had to add in the

00:13:31,760 --> 00:13:34,750
MS to Drago

00:13:38,710 --> 00:13:41,370
yeah

00:13:44,529 --> 00:13:53,410
and then we have the client interface

00:13:47,470 --> 00:14:01,839
which is basically the u+ interface in

00:13:53,410 --> 00:14:05,470
in you boot the it's as you can

00:14:01,839 --> 00:14:07,180
basically build the client API on top of

00:14:05,470 --> 00:14:10,660
this actually we have it for testing

00:14:07,180 --> 00:14:12,790
purposes but it's probably not going to

00:14:10,660 --> 00:14:16,300
be up streamed since it doesn't really

00:14:12,790 --> 00:14:18,220
make any sense to have there all the

00:14:16,300 --> 00:14:20,559
code that you have in new boot will

00:14:18,220 --> 00:14:25,749
probably be just for you but nothing

00:14:20,559 --> 00:14:28,720
else the most important functions are

00:14:25,749 --> 00:14:31,050
fine device in order to get a handle to

00:14:28,720 --> 00:14:34,870
communicate via and then we have the

00:14:31,050 --> 00:14:37,920
usual open session invoke function and

00:14:34,870 --> 00:14:37,920
closed session

00:14:43,700 --> 00:14:46,630
that's it

00:14:50,930 --> 00:14:53,649
true

00:15:01,089 --> 00:15:07,160
yeah yeah yeah that's right we don't

00:15:05,029 --> 00:15:10,670
have support for loading the TI's from

00:15:07,160 --> 00:15:12,380
file system since yeah then we would

00:15:10,670 --> 00:15:15,470
need support for that in you but also

00:15:12,380 --> 00:15:20,089
and it's unnecessarily complicated right

00:15:15,470 --> 00:15:23,690
now instead we have facility a facility

00:15:20,089 --> 00:15:29,230
called early ta in which the TA itself

00:15:23,690 --> 00:15:33,790
is compiled into opti and we'll load it

00:15:29,230 --> 00:15:33,790
so it's just a part of the octave binary

00:15:34,209 --> 00:15:40,279
exactly and that's also an advantage in

00:15:38,180 --> 00:15:42,560
other ways because yeah then you have

00:15:40,279 --> 00:15:51,410
early access without having a supplicant

00:15:42,560 --> 00:15:53,899
or anything so on yes you say anything

00:15:51,410 --> 00:15:56,450
about a review say leader about this our

00:15:53,899 --> 00:15:59,390
replay protection memory block frame

00:15:56,450 --> 00:16:01,610
things you talked about rpm or PBM

00:15:59,390 --> 00:16:03,740
frames what are actually are them how do

00:16:01,610 --> 00:16:08,690
you guys use them in your system what's

00:16:03,740 --> 00:16:11,360
the security issues there we use rpm be

00:16:08,690 --> 00:16:13,339
in the same way yes when Linux kernel is

00:16:11,360 --> 00:16:16,610
up and running it's secure well is

00:16:13,339 --> 00:16:21,470
responsible for creating the frames and

00:16:16,610 --> 00:16:27,920
the frames contains H Mac sum which and

00:16:21,470 --> 00:16:31,579
the yeah which is using a shared secret

00:16:27,920 --> 00:16:35,120
with the actual emmc and it has to match

00:16:31,579 --> 00:16:37,820
in order for the emmc to accept the

00:16:35,120 --> 00:16:39,890
frame and vice versa when you get the

00:16:37,820 --> 00:16:41,870
the response we check that the H Mac is

00:16:39,890 --> 00:16:44,720
correct but I'm more exactly what are

00:16:41,870 --> 00:16:45,980
you using the that region for would what

00:16:44,720 --> 00:16:47,089
kind of access it what are you putting

00:16:45,980 --> 00:16:49,220
into it you're not bringing a filesystem

00:16:47,089 --> 00:16:50,720
there so what kind of access is where

00:16:49,220 --> 00:16:52,680
the kind of storage you're using it for

00:16:50,720 --> 00:16:56,760
we stores

00:16:52,680 --> 00:17:00,060
secure storage objects its objects that

00:16:56,760 --> 00:17:03,240
the TA itself can create and the

00:17:00,060 --> 00:17:04,800
interface for these objects it's part of

00:17:03,240 --> 00:17:07,079
the internal API

00:17:04,800 --> 00:17:09,120
yeah the only thing is that reach is not

00:17:07,079 --> 00:17:11,670
that big so you can't create limited

00:17:09,120 --> 00:17:13,290
secure storage is a bit limited but on

00:17:11,670 --> 00:17:15,000
the other hand I mean what would you

00:17:13,290 --> 00:17:16,740
like to store in this stage it's

00:17:15,000 --> 00:17:18,449
probably and to roll back counters and

00:17:16,740 --> 00:17:22,980
stuff and that takes almost no but not

00:17:18,449 --> 00:17:24,059
like TLS server certificates or

00:17:22,980 --> 00:17:26,220
something like that I could you could

00:17:24,059 --> 00:17:28,860
have a certificate not like for a whole

00:17:26,220 --> 00:17:31,320
web big weird website with lots of no

00:17:28,860 --> 00:17:35,550
but on the other hand you don't need

00:17:31,320 --> 00:17:37,440
that during you but for instance the

00:17:35,550 --> 00:17:39,390
leading a used case for this particular

00:17:37,440 --> 00:17:41,970
work here in ubud was what eager is

00:17:39,390 --> 00:17:43,470
going to present now with Lee baby for

00:17:41,970 --> 00:17:45,960
example says you need to store some

00:17:43,470 --> 00:17:48,900
state variables and boot stages and so

00:17:45,960 --> 00:17:50,370
on so that's a very limited area of just

00:17:48,900 --> 00:17:52,460
total storage that we were using for

00:17:50,370 --> 00:17:52,460
that

00:18:00,300 --> 00:18:05,540
are any restrictions on how memory is

00:18:02,640 --> 00:18:09,540
shared between the between you would

00:18:05,540 --> 00:18:10,950
driver and opti at this stage or is it

00:18:09,540 --> 00:18:17,910
just like how it works

00:18:10,950 --> 00:18:19,740
during runtime it's running yeah right

00:18:17,910 --> 00:18:22,860
so you can have both registered memory

00:18:19,740 --> 00:18:26,840
as well as entry references actually we

00:18:22,860 --> 00:18:26,840
have simplified it a bit we have only

00:18:27,650 --> 00:18:33,600
memory that you register a new boot so

00:18:31,140 --> 00:18:36,390
we don't have use this pre-allocated

00:18:33,600 --> 00:18:41,390
pool right and that's just because it's

00:18:36,390 --> 00:18:41,390
we didn't need both okay thanks

00:18:47,419 --> 00:18:50,469
okay thank you

00:18:50,900 --> 00:18:54,640
and no further questions

00:18:59,300 --> 00:19:09,160
so I live over to ego experience so my

00:19:04,310 --> 00:19:11,930
name is Segura I've been working since

00:19:09,160 --> 00:19:14,420
connecting Hong Kong on Android purified

00:19:11,930 --> 00:19:22,040
boot support Russian to support in you

00:19:14,420 --> 00:19:26,480
boot so just a little introduction and

00:19:22,040 --> 00:19:29,570
summary what is going on so what is

00:19:26,480 --> 00:19:32,090
indirect verified boot so just in two

00:19:29,570 --> 00:19:34,930
words its establishes a chain of trust

00:19:32,090 --> 00:19:37,820
from the bootloader to system in image

00:19:34,930 --> 00:19:41,060
it kind of provides integrity checking

00:19:37,820 --> 00:19:45,440
of the boot image with Linux kernel and

00:19:41,060 --> 00:19:48,080
RAM disk and also integrity of system

00:19:45,440 --> 00:19:50,210
vendor partitions kind of it just

00:19:48,080 --> 00:19:55,610
verifies with hashes of DM variety

00:19:50,210 --> 00:19:59,120
Verity hash trees ABB to support was

00:19:55,610 --> 00:20:02,900
added and finally up streamed so it was

00:19:59,120 --> 00:20:07,690
included in you boot version twenty

00:20:02,900 --> 00:20:10,250
eighteen point seven release it was

00:20:07,690 --> 00:20:12,080
actually it was a mistake didn't include

00:20:10,250 --> 00:20:14,960
the full link but you can download this

00:20:12,080 --> 00:20:19,550
presentation just cleaning click on it

00:20:14,960 --> 00:20:23,870
and urine last connect there was a kind

00:20:19,550 --> 00:20:27,050
of big presentation about kind of

00:20:23,870 --> 00:20:29,580
overall of all components of Android

00:20:27,050 --> 00:20:32,279
verified boot

00:20:29,580 --> 00:20:38,659
and how to enable it on in particular

00:20:32,279 --> 00:20:47,539
board and about Android verified boot

00:20:38,659 --> 00:20:50,160
subset of Commons in you boot and so

00:20:47,539 --> 00:20:54,480
just

00:20:50,160 --> 00:20:57,770
three kind of major ke config symbol so

00:20:54,480 --> 00:21:02,190
basically we have introduced three

00:20:57,770 --> 00:21:06,930
chaotic symbols which enables subsets of

00:21:02,190 --> 00:21:11,340
comments for invoking this verification

00:21:06,930 --> 00:21:15,680
chain it's configs mdavey be also ABB

00:21:11,340 --> 00:21:19,110
verify its kind of components it's in

00:21:15,680 --> 00:21:22,020
common directory so there is a VB verify

00:21:19,110 --> 00:21:27,230
C file which provides implementation of

00:21:22,020 --> 00:21:35,010
a VB operation so it's kind of proxies

00:21:27,230 --> 00:21:38,340
to particular MMC MMC operations in MFC

00:21:35,010 --> 00:21:42,540
subsystem in Ubud and lip ABB so lip

00:21:38,340 --> 00:21:47,400
every beat it's kind of been a vanilla

00:21:42,540 --> 00:21:49,530
lip a VB snapshot from a USB so I've

00:21:47,400 --> 00:21:52,020
introduced a minimal amount of changes

00:21:49,530 --> 00:21:56,520
so we had a kind of a big discussion if

00:21:52,020 --> 00:21:59,190
we really need to follow the

00:21:56,520 --> 00:22:02,910
korean-style we should kind of change

00:21:59,190 --> 00:22:03,840
this library and to follow Colonel

00:22:02,910 --> 00:22:06,390
korean-style

00:22:03,840 --> 00:22:08,580
did just do it confirm to Kanako

00:22:06,390 --> 00:22:13,610
encoding style but final it was included

00:22:08,580 --> 00:22:20,000
as it is just to simplify the process of

00:22:13,610 --> 00:22:23,690
fetching updates from a USB project and

00:22:20,000 --> 00:22:27,300
currently this ABB verifications is

00:22:23,690 --> 00:22:31,110
invoked from you boots also you

00:22:27,300 --> 00:22:35,120
basically there is a sequence of

00:22:31,110 --> 00:22:35,120
commands here to boot - boot

00:22:38,929 --> 00:22:50,519
two boots for example two from NFC to

00:22:44,729 --> 00:22:53,159
ram Android good image and then then

00:22:50,519 --> 00:22:56,279
actually good em common for example

00:22:53,159 --> 00:23:01,019
consumes this Android boot image by and

00:22:56,279 --> 00:23:04,499
then it checks by magic symbols that

00:23:01,019 --> 00:23:08,159
it's android boot images that's why as

00:23:04,499 --> 00:23:10,200
there is no kind of stand-alone common

00:23:08,159 --> 00:23:13,649
to boot Android that's why we introduced

00:23:10,200 --> 00:23:15,869
a dedicated comment to provide this

00:23:13,649 --> 00:23:21,779
verification capabilities so you can

00:23:15,869 --> 00:23:25,019
just integrate it into your kind of view

00:23:21,779 --> 00:23:28,590
boot environment so all details are in

00:23:25,019 --> 00:23:31,019
this readme file how how it can be done

00:23:28,590 --> 00:23:34,169
and there is a particular example of how

00:23:31,019 --> 00:23:41,999
it's done on Texas Instruments am 57

00:23:34,169 --> 00:23:46,590
board also this is a example of the use

00:23:41,999 --> 00:23:50,129
case based on this optic lines that he

00:23:46,590 --> 00:23:55,109
has introduced in the u-boot so

00:23:50,129 --> 00:23:58,649
basically there is recommendation or

00:23:55,109 --> 00:24:04,529
maybe it could be mandatory in future

00:23:58,649 --> 00:24:07,999
but this a VB operations related to

00:24:04,529 --> 00:24:12,779
store in rollback indexes and device

00:24:07,999 --> 00:24:14,869
state and also maybe two months ago

00:24:12,779 --> 00:24:18,539
there were introduced two additional

00:24:14,869 --> 00:24:20,190
heavy bob's operations called write

00:24:18,539 --> 00:24:22,369
persistent value and read my sister

00:24:20,190 --> 00:24:25,229
value so the research conditions that

00:24:22,369 --> 00:24:30,779
temporary evidence storage should be

00:24:25,229 --> 00:24:34,049
used and we decided to leverage opti and

00:24:30,779 --> 00:24:40,470
secure storage API in up here and use

00:24:34,049 --> 00:24:42,710
our PD back-end so basically how it

00:24:40,470 --> 00:24:42,710
works

00:24:43,470 --> 00:24:52,600
icn's over the explains there is our PB

00:24:48,570 --> 00:24:55,690
file system components so it's it's a

00:24:52,600 --> 00:24:57,489
back-end for secure storage component

00:24:55,690 --> 00:25:00,210
component it generates our pin B frames

00:24:57,489 --> 00:25:04,119
and then all these are pin B frames are

00:25:00,210 --> 00:25:09,700
rotated back to normal world and it's

00:25:04,119 --> 00:25:12,580
consumed by SMC system our pin B key is

00:25:09,700 --> 00:25:14,350
obviously it's stored and it's not

00:25:12,580 --> 00:25:17,710
revealed to normal water stored in

00:25:14,350 --> 00:25:19,809
secure world and there is av be trusted

00:25:17,710 --> 00:25:26,369
application which is compiled as early

00:25:19,809 --> 00:25:31,090
TSO basically it's stored in additional

00:25:26,369 --> 00:25:35,369
section and elf elf binary of T this is

00:25:31,090 --> 00:25:35,369
it's kind of additional self section and

00:25:35,909 --> 00:25:44,739
each ABB operations up operation

00:25:41,580 --> 00:25:47,590
leverages T u class driver so we

00:25:44,739 --> 00:25:52,409
communicate with ABB trusted location

00:25:47,590 --> 00:25:56,950
and maybe Beatrice application uses

00:25:52,409 --> 00:26:08,039
secure storage API to store particular

00:25:56,950 --> 00:26:08,039
value and what next steps are planned

00:26:09,850 --> 00:26:19,070
currently when I'm doing just a bunch of

00:26:13,760 --> 00:26:21,500
refactoring because as it was initial

00:26:19,070 --> 00:26:23,779
implementation and it does have a lot of

00:26:21,500 --> 00:26:28,600
issues so we still need to implement

00:26:23,779 --> 00:26:31,880
some additional ATP herbs for example DB

00:26:28,600 --> 00:26:35,120
this public key which is used for

00:26:31,880 --> 00:26:39,049
verification of of will be meta image

00:26:35,120 --> 00:26:41,150
this initial image we're all kind of

00:26:39,049 --> 00:26:43,940
crypto details which are used for for

00:26:41,150 --> 00:26:45,830
verification of further partitions so it

00:26:43,940 --> 00:26:48,399
consists all these details we need also

00:26:45,830 --> 00:26:52,330
to unify this VD metal partition and

00:26:48,399 --> 00:26:57,649
currently the public years of the keys

00:26:52,330 --> 00:27:01,399
hard-coded so we should use also

00:26:57,649 --> 00:27:05,360
temper evidence storage in this case a

00:27:01,399 --> 00:27:08,149
DB T and there is no implementation for

00:27:05,360 --> 00:27:10,909
write persistent Valiant read persistent

00:27:08,149 --> 00:27:15,950
various sister functions were introduced

00:27:10,909 --> 00:27:22,399
just a couple of months ago also I've

00:27:15,950 --> 00:27:26,570
faced an issue on poplar board so it it

00:27:22,399 --> 00:27:29,330
relates to the probe order on you boot

00:27:26,570 --> 00:27:32,330
and Linux so basically we there is no

00:27:29,330 --> 00:27:37,250
synchronization some for example in

00:27:32,330 --> 00:27:42,620
Linux kernel offenses a faced an issue

00:27:37,250 --> 00:27:46,460
when is the controller was enumerated as

00:27:42,620 --> 00:27:51,049
zeros and MMC s one but in you boot its

00:27:46,460 --> 00:27:55,250
vice versa so basically in the problem

00:27:51,049 --> 00:27:58,190
is that the idea of MMC controller is

00:27:55,250 --> 00:28:01,370
currently hard-coded in OP tus course so

00:27:58,190 --> 00:28:07,470
we should let decide normal what part

00:28:01,370 --> 00:28:11,010
which I did to use also the reserved

00:28:07,470 --> 00:28:17,429
kind of the biggest major feature it's a

00:28:11,010 --> 00:28:22,440
be support it's how do we have our copy

00:28:17,429 --> 00:28:25,700
of all partitions and these features

00:28:22,440 --> 00:28:28,830
needed for seamless updates so we can

00:28:25,700 --> 00:28:32,130
kind of have two copies of partitions

00:28:28,830 --> 00:28:33,960
yeah and also fast built integrations I

00:28:32,130 --> 00:28:40,650
guess it's more for debugging purposes

00:28:33,960 --> 00:28:43,650
or and to provide the final user of

00:28:40,650 --> 00:28:45,929
ability to unlock his device so it's a

00:28:43,650 --> 00:28:58,770
kind of subset maybe you've seen already

00:28:45,929 --> 00:29:03,179
kind of a.m. lock and lock comments you

00:28:58,770 --> 00:29:06,419
know picture there with R P the RPO Mbit

00:29:03,179 --> 00:29:11,299
never gets an acronym you were it wasn't

00:29:06,419 --> 00:29:13,740
clear that one for the emmc controller

00:29:11,299 --> 00:29:15,470
it's gonna normally be run at runtime

00:29:13,740 --> 00:29:20,400
it's gonna be controlled by the Linux

00:29:15,470 --> 00:29:23,220
MMC driver so how is the u-boot going to

00:29:20,400 --> 00:29:26,730
access our p mb frames is it gonna send

00:29:23,220 --> 00:29:29,220
it through linux to the linux driver or

00:29:26,730 --> 00:29:31,080
how are you doing or is it that this

00:29:29,220 --> 00:29:33,390
this you boot access is only happening

00:29:31,080 --> 00:29:35,370
at boot time and and that's but then

00:29:33,390 --> 00:29:37,080
Wims if I want to do secure and want to

00:29:35,370 --> 00:29:40,620
add something as a secure storage at

00:29:37,080 --> 00:29:43,110
runtime after booting can i how does

00:29:40,620 --> 00:29:44,760
that work if I if I keep it for you boob

00:29:43,110 --> 00:29:46,700
because it's not going to be able to

00:29:44,760 --> 00:29:49,700
access the the NFC controller

00:29:46,700 --> 00:29:49,700
simultaneously

00:29:51,809 --> 00:30:00,389
the file system we have in our PMB it's

00:29:55,279 --> 00:30:04,110
only opti that user said so and it's

00:30:00,389 --> 00:30:07,049
like it's just blocks inside or PMB and

00:30:04,110 --> 00:30:09,840
it's the same if if we do it by you but

00:30:07,049 --> 00:30:11,519
or the Linux kernel yeah but I mean how

00:30:09,840 --> 00:30:13,860
do you synchronize the two people

00:30:11,519 --> 00:30:16,230
accessing because once linux starts

00:30:13,860 --> 00:30:18,750
accessing the MC controller if you try

00:30:16,230 --> 00:30:22,649
to do anything to that MMC you're gonna

00:30:18,750 --> 00:30:24,269
bump into its you know or can't really

00:30:22,649 --> 00:30:26,309
work with one person at a time

00:30:24,269 --> 00:30:28,529
yeah but what the kernel is up and

00:30:26,309 --> 00:30:29,610
running you but it's no more okay so

00:30:28,529 --> 00:30:31,559
yeah so you're basically saying that

00:30:29,610 --> 00:30:34,620
there is no case where you would never

00:30:31,559 --> 00:30:36,809
want do things once Linux is running so

00:30:34,620 --> 00:30:38,600
it's mutually exclusive that way there's

00:30:36,809 --> 00:30:41,250
no case where you would allow a u-boot

00:30:38,600 --> 00:30:42,990
variable to be set or secure storage set

00:30:41,250 --> 00:30:45,980
through the u-boot thing that's all

00:30:42,990 --> 00:30:50,120
gonna be done before the link starts up

00:30:45,980 --> 00:30:50,120
yeah right so yep

00:30:54,340 --> 00:30:57,730
other questions

00:31:03,230 --> 00:31:06,350
thank you

00:31:13,320 --> 00:31:15,350
I

00:31:16,460 --> 00:31:23,929
so sorry about the title there should be

00:31:19,570 --> 00:31:27,139
optionnal USB so we had a session

00:31:23,929 --> 00:31:29,929
previously about the Optio SP

00:31:27,139 --> 00:31:32,869
integration during a Hong Kong Connect

00:31:29,929 --> 00:31:36,320
about six months ago since then we've

00:31:32,869 --> 00:31:40,749
had some improvements we've set up a

00:31:36,320 --> 00:31:45,409
daily CI bill test for any bill errors

00:31:40,749 --> 00:31:49,340
I've upgraded our default bill to high

00:31:45,409 --> 00:31:52,119
and which is fully tribal ice and we've

00:31:49,340 --> 00:31:55,090
added some build scripts to simplify the

00:31:52,119 --> 00:31:59,470
process of repo syncing and building and

00:31:55,090 --> 00:32:04,309
with the scripts we get free upgrades

00:31:59,470 --> 00:32:10,549
because previously if we upgrade to a

00:32:04,309 --> 00:32:12,440
new release we have to we put in it

00:32:10,549 --> 00:32:16,700
again then the new manifest file but

00:32:12,440 --> 00:32:18,590
with this it actually reached manifest

00:32:16,700 --> 00:32:23,149
file that needs to be built from a from

00:32:18,590 --> 00:32:26,749
a Lenovo repository so you basically run

00:32:23,149 --> 00:32:29,929
the script and it will sync to the the

00:32:26,749 --> 00:32:36,519
latest manifest file for that for that

00:32:29,929 --> 00:32:36,519
version so to try it you just

00:32:41,660 --> 00:32:47,060
sorry so to try you just clone this

00:32:44,300 --> 00:32:49,730
repository opti androidmanifest using

00:32:47,060 --> 00:32:52,490
this branch and in this city into the

00:32:49,730 --> 00:32:56,630
directory and you just run this sing - p

00:32:52,490 --> 00:32:59,480
and build SP script this is a lot more

00:32:56,630 --> 00:33:02,210
simpler than the previous commands where

00:32:59,480 --> 00:33:07,250
you have to do repo in a triple sync run

00:33:02,210 --> 00:33:09,620
a bunch of script patch script files and

00:33:07,250 --> 00:33:12,800
then random a command this is all

00:33:09,620 --> 00:33:15,110
automated for you you have the option

00:33:12,800 --> 00:33:18,470
for to build a relatively stable build

00:33:15,110 --> 00:33:23,270
with pin manifest

00:33:18,470 --> 00:33:28,010
technically the you can this des V is

00:33:23,270 --> 00:33:31,190
for version you so technically oh and

00:33:28,010 --> 00:33:33,730
master bills are supported but since we

00:33:31,190 --> 00:33:37,250
mainly use P as the default right now oh

00:33:33,730 --> 00:33:38,990
and master my bit brought a little bit

00:33:37,250 --> 00:33:45,050
so I mean if you try and you get any

00:33:38,990 --> 00:33:48,920
errors please report back to us so here

00:33:45,050 --> 00:33:52,100
to show you that the this is the

00:33:48,920 --> 00:33:56,000
currently the list of Pittman FS that we

00:33:52,100 --> 00:34:01,100
have this is sort of random as as we are

00:33:56,000 --> 00:34:03,440
going to build daily and we've we have a

00:34:01,100 --> 00:34:06,580
stable bit we just upload a manifest

00:34:03,440 --> 00:34:09,350
file to test so that's not really a

00:34:06,580 --> 00:34:14,390
structure release procedure at this

00:34:09,350 --> 00:34:16,820
point and then once you're done building

00:34:14,390 --> 00:34:19,940
just just default steps you copy the

00:34:16,820 --> 00:34:21,890
binary the images to the installer

00:34:19,940 --> 00:34:26,179
folder run and then you run the flash

00:34:21,890 --> 00:34:29,120
off script sorry before that you have to

00:34:26,179 --> 00:34:35,200
put the ball into a recovery mode you

00:34:29,120 --> 00:34:37,790
can put it into UEFI fastboot mode but

00:34:35,200 --> 00:34:40,400
in a list in our experience is just

00:34:37,790 --> 00:34:42,980
easier most able to to flash everything

00:34:40,400 --> 00:34:46,730
in recovery mode then power off the boat

00:34:42,980 --> 00:34:50,650
I'm sorry the ball the board take it out

00:34:46,730 --> 00:34:50,650
of recovery more power it back on

00:34:51,240 --> 00:34:58,940
just lady be rude and run the excess

00:34:53,909 --> 00:34:58,940
command any questions

00:35:06,710 --> 00:35:14,580
so I'm not that young but he's not here

00:35:11,400 --> 00:35:18,780
this week so I'm trying to cover for him

00:35:14,580 --> 00:35:22,190
pkcs 11 work with opti so we started out

00:35:18,780 --> 00:35:24,870
thinking about this last year and

00:35:22,190 --> 00:35:26,880
etienne he have been doing quite a lot

00:35:24,870 --> 00:35:29,130
of work with it and he had a quite long

00:35:26,880 --> 00:35:31,170
session about it in Hong Kong so if you

00:35:29,130 --> 00:35:34,460
want to know more details please go back

00:35:31,170 --> 00:35:36,900
and look at that session we had to

00:35:34,460 --> 00:35:39,510
restructure the TA interface a little

00:35:36,900 --> 00:35:43,620
bit since well if you look at the

00:35:39,510 --> 00:35:46,160
license in PK say selva peak is 11

00:35:43,620 --> 00:35:48,840
interface you can see that it's GPL so

00:35:46,160 --> 00:35:50,130
we can't just use it right off we have

00:35:48,840 --> 00:35:54,030
to do something similar

00:35:50,130 --> 00:35:55,230
invented by ourselves so this is what we

00:35:54,030 --> 00:35:58,800
have been working we've also now with

00:35:55,230 --> 00:36:03,510
the refactoring here but what you can

00:35:58,800 --> 00:36:05,310
find in the in the current well you can

00:36:03,510 --> 00:36:08,070
see this there are links to open pull

00:36:05,310 --> 00:36:11,310
requests here also what you can find

00:36:08,070 --> 00:36:13,380
working there is a s operations so you

00:36:11,310 --> 00:36:16,830
can use the normal things like

00:36:13,380 --> 00:36:20,490
encryption with ECB CBC and CTR and so

00:36:16,830 --> 00:36:24,230
on there is also support for say

00:36:20,490 --> 00:36:27,990
generation verification we've keys

00:36:24,230 --> 00:36:33,390
similar with elliptic curves that's

00:36:27,990 --> 00:36:34,920
there I don't have that much more to say

00:36:33,390 --> 00:36:37,440
about this but the main development

00:36:34,920 --> 00:36:40,230
branch for this what we call psyche

00:36:37,440 --> 00:36:42,390
secure key services is what you can find

00:36:40,230 --> 00:36:44,700
on it yen's branch here but the pull

00:36:42,390 --> 00:36:47,610
request here are intended to be merged

00:36:44,700 --> 00:36:49,950
sooner I mean at some point in time so

00:36:47,610 --> 00:36:53,160
there could be seen as this is probably

00:36:49,950 --> 00:36:55,110
what it's going to look like but we have

00:36:53,160 --> 00:36:58,620
seen interest from other people also

00:36:55,110 --> 00:37:01,440
outside in oral there is one guy from I

00:36:58,620 --> 00:37:04,740
think it's University who are currently

00:37:01,440 --> 00:37:07,920
working with this so we have a couple of

00:37:04,740 --> 00:37:10,170
other people's who have been active on

00:37:07,920 --> 00:37:12,280
giving feedback in developing features

00:37:10,170 --> 00:37:18,510
here

00:37:12,280 --> 00:37:18,510
so any questions related to the cases 11

00:37:19,800 --> 00:37:28,660
all right this is the rest of the stuff

00:37:25,780 --> 00:37:30,430
a little bit scattered things we have

00:37:28,660 --> 00:37:32,110
been working with also so what you have

00:37:30,430 --> 00:37:33,940
heard about now are kind of the main

00:37:32,110 --> 00:37:35,830
features the bigger features that we

00:37:33,940 --> 00:37:37,060
have looked into but there are a few

00:37:35,830 --> 00:37:42,700
minor things that could be worth

00:37:37,060 --> 00:37:46,480
mentioning also recently we are starting

00:37:42,700 --> 00:37:50,320
to discuss pathology scan code tool and

00:37:46,480 --> 00:37:52,000
so on we started to tag all our source

00:37:50,320 --> 00:37:54,160
code files with SP DX

00:37:52,000 --> 00:37:56,830
half a year ago maybe a little bit more

00:37:54,160 --> 00:37:59,590
than that so we have had the kind of the

00:37:56,830 --> 00:38:02,290
groundwork done but now we also need to

00:37:59,590 --> 00:38:04,210
gather it in a more readable way that

00:38:02,290 --> 00:38:07,800
other people can use so that is where

00:38:04,210 --> 00:38:11,140
the facility and scan code comes to play

00:38:07,800 --> 00:38:13,830
we are still working with this I mean

00:38:11,140 --> 00:38:18,490
this is ongoing work all of the

00:38:13,830 --> 00:38:21,820
pathology we have a session tomorrow

00:38:18,490 --> 00:38:24,220
I think it's tomorrow about this where

00:38:21,820 --> 00:38:27,520
we are going to discuss what what what

00:38:24,220 --> 00:38:29,740
do vendors and AMS what do they actually

00:38:27,520 --> 00:38:31,600
want to have from this because we think

00:38:29,740 --> 00:38:33,310
we have all the tools that we know but

00:38:31,600 --> 00:38:35,470
now we need to get the requirements how

00:38:33,310 --> 00:38:40,930
are you using it I mean when you are

00:38:35,470 --> 00:38:43,570
reading the licenses and such build root

00:38:40,930 --> 00:38:45,280
property developer support so initially

00:38:43,570 --> 00:38:47,470
many of you know that we had a very

00:38:45,280 --> 00:38:49,390
stripped-down root file system just

00:38:47,470 --> 00:38:51,970
based on busybox

00:38:49,390 --> 00:38:54,970
kind of hard-coded where what kind of

00:38:51,970 --> 00:38:57,460
files we were using and so on and we

00:38:54,970 --> 00:38:59,740
decided to upgrade it a little bit now

00:38:57,460 --> 00:39:02,580
so we have been using build root now's

00:38:59,740 --> 00:39:05,110
see this a couple of months back and

00:39:02,580 --> 00:39:07,600
that is working for all our supported

00:39:05,110 --> 00:39:10,210
platforms and that made life is a little

00:39:07,600 --> 00:39:12,880
bit easier for us since we were we can

00:39:10,210 --> 00:39:15,550
easily enable developer tools valgrind s

00:39:12,880 --> 00:39:17,410
trace and in your case yes it was you

00:39:15,550 --> 00:39:20,470
start doing this because you needed open

00:39:17,410 --> 00:39:22,090
SSL for example so it it's made life a

00:39:20,470 --> 00:39:24,910
little bit easier for us we we had to

00:39:22,090 --> 00:39:25,690
pay a little bit in build time and

00:39:24,910 --> 00:39:29,460
downloads and

00:39:25,690 --> 00:39:29,460
but in the end we think it's worth it

00:39:29,520 --> 00:39:38,380
the third thing here embed TLS for TAS

00:39:33,130 --> 00:39:40,060
that initially came out of in the key

00:39:38,380 --> 00:39:43,210
master work we have been doing we were

00:39:40,060 --> 00:39:46,270
at some need to do x.509 certificate

00:39:43,210 --> 00:39:50,350
handling and we had option of doing it

00:39:46,270 --> 00:39:51,850
using a service in the core itself or we

00:39:50,350 --> 00:39:54,430
could do it in user space in the TA

00:39:51,850 --> 00:39:57,760
directly so we decided to do it in lab

00:39:54,430 --> 00:39:59,920
in user space here don't confuse this

00:39:57,760 --> 00:40:03,730
with ongoing work that we have with

00:39:59,920 --> 00:40:07,180
replacing lipped encrypt with Amber TLS

00:40:03,730 --> 00:40:09,490
that's a separate thing but this enables

00:40:07,180 --> 00:40:14,560
you to use Ember TLS from a trust

00:40:09,490 --> 00:40:18,580
application point of view spectral

00:40:14,560 --> 00:40:21,610
meltdown we beginning of the year when

00:40:18,580 --> 00:40:24,300
everything happened we've made most of

00:40:21,610 --> 00:40:27,580
the fixes but later on we got some

00:40:24,300 --> 00:40:29,470
pointers from arm saying that in some

00:40:27,580 --> 00:40:31,630
some of the cases it was not sufficient

00:40:29,470 --> 00:40:34,780
what we are done so we have fixed that

00:40:31,630 --> 00:40:41,830
for a or 64 here in this case it's about

00:40:34,780 --> 00:40:46,540
the Barons predictor advanced automatic

00:40:41,830 --> 00:40:48,430
testing this is my pet project so we

00:40:46,540 --> 00:40:51,940
have the ability now to test all the

00:40:48,430 --> 00:40:56,680
pull requests automatically on a high

00:40:51,940 --> 00:40:59,020
key device we have had a few ways of

00:40:56,680 --> 00:41:01,750
testing before we have leveraged Travis

00:40:59,020 --> 00:41:04,600
we have leveraged shippable and we still

00:41:01,750 --> 00:41:06,580
do I mean we have depend on what kind of

00:41:04,600 --> 00:41:10,200
test we're running and so on and so we

00:41:06,580 --> 00:41:13,420
run qmu using these automated services

00:41:10,200 --> 00:41:17,380
we run some shake patch and so on but I

00:41:13,420 --> 00:41:20,430
did this is well lava basically didn't

00:41:17,380 --> 00:41:22,750
fit for what we needed here we have some

00:41:20,430 --> 00:41:26,130
special use cases to do things but

00:41:22,750 --> 00:41:30,000
that's up and running though

00:41:26,130 --> 00:41:32,940
GCC were shown yeah we just stepped it

00:41:30,000 --> 00:41:34,860
up I mean we we we knew that version

00:41:32,940 --> 00:41:37,110
eight was coming but some people were

00:41:34,860 --> 00:41:38,760
ahead of us and started to report some

00:41:37,110 --> 00:41:42,000
problems when they were compiling it and

00:41:38,760 --> 00:41:45,480
running it so Jerome he fixed a couple

00:41:42,000 --> 00:41:48,960
of issues and we merged the patches last

00:41:45,480 --> 00:41:55,200
week I think it was so now it's working

00:41:48,960 --> 00:41:58,260
with GCC eight also eager you enable the

00:41:55,200 --> 00:42:00,630
poplar board using build up kits so for

00:41:58,260 --> 00:42:04,320
you who doesn't know build up kit is our

00:42:00,630 --> 00:42:07,530
way of making it easy for people to set

00:42:04,320 --> 00:42:16,830
up an optic environment on a certain

00:42:07,530 --> 00:42:19,140
device raspberry pi free we get quite a

00:42:16,830 --> 00:42:22,890
lot of questions related to raspberry pi

00:42:19,140 --> 00:42:25,650
free so we we use it from time to time

00:42:22,890 --> 00:42:28,500
in our team also but it's not a go-to

00:42:25,650 --> 00:42:31,020
device I would say but since there are

00:42:28,500 --> 00:42:33,090
questions out there and it seems to be

00:42:31,020 --> 00:42:35,550
for natural reasons quite easy to get

00:42:33,090 --> 00:42:38,720
access to a board we think it's worth

00:42:35,550 --> 00:42:41,580
trying to keep it up to date at least

00:42:38,720 --> 00:42:44,190
eager together with a engineer from arm

00:42:41,580 --> 00:42:46,350
they have recently changed old way of

00:42:44,190 --> 00:42:49,020
building to now do more proper boot

00:42:46,350 --> 00:42:50,700
setup where you have on trust a firm

00:42:49,020 --> 00:42:51,300
running first and then hand over to you

00:42:50,700 --> 00:42:54,150
boots

00:42:51,300 --> 00:42:56,850
kernel etc I mean the previous way we

00:42:54,150 --> 00:43:00,840
used to do is was a real nasty hack more

00:42:56,850 --> 00:43:03,260
or less so this is pretty good the only

00:43:00,840 --> 00:43:08,640
downside here is that we we can't really

00:43:03,260 --> 00:43:10,950
easily update or running tftpd for

00:43:08,640 --> 00:43:14,160
example to update v that we could do

00:43:10,950 --> 00:43:18,350
before this so but Indian this is better

00:43:14,160 --> 00:43:21,090
I would say and the final thing here

00:43:18,350 --> 00:43:23,640
answering questions at github and this

00:43:21,090 --> 00:43:25,920
is what kernel guys for example do talk

00:43:23,640 --> 00:43:27,960
using email that's the same thing we're

00:43:25,920 --> 00:43:32,460
doing here I mean we get questions and

00:43:27,960 --> 00:43:35,550
so on but it's I think it's fair to say

00:43:32,460 --> 00:43:36,530
that opti has started to become quite

00:43:35,550 --> 00:43:39,140
popular

00:43:36,530 --> 00:43:41,540
we have noticed that also in the amount

00:43:39,140 --> 00:43:44,420
of questions and people are asking and

00:43:41,540 --> 00:43:46,520
so on so we spend quite a bit amount of

00:43:44,420 --> 00:43:48,020
time on the last one here also so I

00:43:46,520 --> 00:43:54,580
think it's definitely worth to mention

00:43:48,020 --> 00:43:57,580
that here so that's it

00:43:54,580 --> 00:43:57,580
questions

00:44:01,410 --> 00:44:09,150
alright thanks for all of us

00:44:05,250 --> 00:44:14,150
[Applause]

00:44:09,150 --> 00:44:14,150

YouTube URL: https://www.youtube.com/watch?v=FN4J2gB2Kns


