Title: YVR18-PMW10 Adeb: A chroot-based adb shell for Android
Publication date: 2018-10-04
Playlist: Linaro Connect Vancouver 2018
Description: 
	Android systems and kernel developers need a more mainstream and a typical Linux userspace for development/debugging. Adeb (or androdeb) is a tool I wrote to make this possible. This talk describes the adeb design, initial motivation, usescases and shows a demo.

adeb can be downloaded from: http://tinyurl.com/androdeb
Captions: 
	00:00:02,120 --> 00:00:07,130
[Music]

00:00:08,360 --> 00:00:17,070
okay so I'm Joel Fernandez I work in the

00:00:13,550 --> 00:00:20,130
Android kernel team at Google this talk

00:00:17,070 --> 00:00:23,190
is about tool I wrote that happened to

00:00:20,130 --> 00:00:24,359
solve some problems for me so that's

00:00:23,190 --> 00:00:31,700
what I'm going to be talking about it's

00:00:24,359 --> 00:00:35,250
like a I call it the better adb shell so

00:00:31,700 --> 00:00:37,800
so so I'm I'm in the kernel team so one

00:00:35,250 --> 00:00:39,870
of the things that I've I've always

00:00:37,800 --> 00:00:41,420
tried to do and wanted to do was to run

00:00:39,870 --> 00:00:43,950
Android

00:00:41,420 --> 00:00:47,070
you know while Android is running do

00:00:43,950 --> 00:00:48,750
some kind of tracing run tools that can

00:00:47,070 --> 00:00:52,680
tell me what's happening in the kernel

00:00:48,750 --> 00:00:56,489
and the system and I you know I could

00:00:52,680 --> 00:00:59,699
never do this successfully to the extent

00:00:56,489 --> 00:01:02,969
that I would have liked to do so

00:00:59,699 --> 00:01:06,719
basically I wanted to run BCC which is

00:01:02,969 --> 00:01:09,749
the eb PF compiler collection trace

00:01:06,719 --> 00:01:12,439
command for f trace perf and there are

00:01:09,749 --> 00:01:14,850
different ways to to run these you know

00:01:12,439 --> 00:01:16,259
cross compile them and push static

00:01:14,850 --> 00:01:20,310
binaries and stuff like that but i

00:01:16,259 --> 00:01:22,939
wanted to wait to run them while android

00:01:20,310 --> 00:01:25,590
is running fully-featured

00:01:22,939 --> 00:01:30,869
i'm sure many of you have tried to do

00:01:25,590 --> 00:01:33,389
that as well so broadly speaking out

00:01:30,869 --> 00:01:37,289
broadly speaking I wanted to run any any

00:01:33,389 --> 00:01:39,479
open source package out there you know

00:01:37,289 --> 00:01:43,889
either from binary in binary form or in

00:01:39,479 --> 00:01:46,020
source form build it from source you

00:01:43,889 --> 00:01:51,329
know typical just like a typical Linux

00:01:46,020 --> 00:01:54,060
system be able to do that yeah and this

00:01:51,329 --> 00:01:57,090
kind of nicely fits in the whole theme

00:01:54,060 --> 00:01:59,279
of this set of this lunar connect which

00:01:57,090 --> 00:02:03,239
is running arm on our building

00:01:59,279 --> 00:02:05,969
developing arm own arm so you had this I

00:02:03,239 --> 00:02:09,319
pull the slide from charges plus I added

00:02:05,969 --> 00:02:09,319
a little Android sign there

00:02:10,900 --> 00:02:16,490
so typically what people do is they

00:02:13,420 --> 00:02:21,020
cross-compile and they push static

00:02:16,490 --> 00:02:23,530
binary you know of some package and this

00:02:21,020 --> 00:02:29,090
is a little bit of an error-prone

00:02:23,530 --> 00:02:30,830
process the you know typically the

00:02:29,090 --> 00:02:32,360
static binaries are stored in some

00:02:30,830 --> 00:02:35,330
repository and you really don't know

00:02:32,360 --> 00:02:38,390
what you're pushing you just hope that

00:02:35,330 --> 00:02:41,660
it has everything that we because we

00:02:38,390 --> 00:02:43,910
were this week we have mesh yep we have

00:02:41,660 --> 00:02:45,470
massive batch to clarify how to cross

00:02:43,910 --> 00:02:48,230
compile because it was really difficult

00:02:45,470 --> 00:02:52,910
to put paths and so on so clearly I

00:02:48,230 --> 00:02:55,850
agree on that yeah so that's a very

00:02:52,910 --> 00:02:57,800
error-prone process it's you know you

00:02:55,850 --> 00:03:00,230
have to often disable things and like

00:02:57,800 --> 00:03:02,930
cross compiling trace command there's a

00:03:00,230 --> 00:03:06,010
pain and you have to disable things in

00:03:02,930 --> 00:03:08,750
it just so that I wrote cross compile

00:03:06,010 --> 00:03:10,370
and there and some some things just

00:03:08,750 --> 00:03:14,360
cannot be cross compile so we need a

00:03:10,370 --> 00:03:21,560
better way so the Android user space is

00:03:14,360 --> 00:03:23,690
Austin for the android framework it's

00:03:21,560 --> 00:03:25,610
it's it's kind of written it was written

00:03:23,690 --> 00:03:27,860
in the early days when the systems were

00:03:25,610 --> 00:03:31,610
kind of small and the seed library was

00:03:27,860 --> 00:03:34,459
had a limited subset of offer typical C

00:03:31,610 --> 00:03:36,920
library many things are missing and

00:03:34,459 --> 00:03:39,739
that's still the case these days many

00:03:36,920 --> 00:03:42,410
things will not you'll not be able to

00:03:39,739 --> 00:03:45,980
compile and Link with with a bit Bionic

00:03:42,410 --> 00:03:48,290
and many libraries are missing in in the

00:03:45,980 --> 00:03:50,900
Android user space that are not needed

00:03:48,290 --> 00:03:52,519
many of them are not even compatible

00:03:50,900 --> 00:03:55,970
with the license so they cannot be

00:03:52,519 --> 00:03:58,400
included on the on the system and

00:03:55,970 --> 00:03:59,750
getting stuff without getting stuff

00:03:58,400 --> 00:04:02,800
working with the Android build system

00:03:59,750 --> 00:04:05,930
can be very painful even if you can

00:04:02,800 --> 00:04:07,780
cross compile things just getting the

00:04:05,930 --> 00:04:10,430
Android build system to be able to build

00:04:07,780 --> 00:04:13,510
an open-source package it's good it's

00:04:10,430 --> 00:04:16,030
getting easier these days but it's still

00:04:13,510 --> 00:04:17,930
somebody tried to get trace command

00:04:16,030 --> 00:04:22,660
building with the Android build system

00:04:17,930 --> 00:04:22,660
and it was just a mess

00:04:23,510 --> 00:04:28,850
and cross-compiling in general is not

00:04:25,910 --> 00:04:30,710
easy it can it can be a slow process you

00:04:28,850 --> 00:04:35,660
have to compile on a different machine

00:04:30,710 --> 00:04:37,730
push it you know so you you have all

00:04:35,660 --> 00:04:40,730
those kinds of issues things will not

00:04:37,730 --> 00:04:42,980
cross compile sometimes all that so the

00:04:40,730 --> 00:04:46,340
solution that worked really well for me

00:04:42,980 --> 00:04:49,490
that I came up with was to run QQ EMU

00:04:46,340 --> 00:04:52,190
debute strap to build a root FS push

00:04:49,490 --> 00:04:57,110
that to the data partition and then adb

00:04:52,190 --> 00:05:02,740
shell run chroot with adb shell on top

00:04:57,110 --> 00:05:06,050
of adb shell and you know it it gives it

00:05:02,740 --> 00:05:08,960
provides a different route environment

00:05:06,050 --> 00:05:11,840
where I can you know do whatever I want

00:05:08,960 --> 00:05:13,400
in reality there are several more things

00:05:11,840 --> 00:05:16,040
that happen to make sure things are

00:05:13,400 --> 00:05:19,520
working well like the mounts have to be

00:05:16,040 --> 00:05:23,060
set up correctly and many different

00:05:19,520 --> 00:05:24,830
issues are already taken care of so I

00:05:23,060 --> 00:05:26,990
you know that this technique is not

00:05:24,830 --> 00:05:28,970
something new it's like many people do

00:05:26,990 --> 00:05:32,780
it but everybody has their own way of

00:05:28,970 --> 00:05:36,110
doing it and so over time you know the I

00:05:32,780 --> 00:05:40,669
fix fix a lot of issues that have come

00:05:36,110 --> 00:05:44,030
up with you know the the quality of the

00:05:40,669 --> 00:05:46,010
experience of running adb shell with a

00:05:44,030 --> 00:05:48,110
chroot there are many there are many

00:05:46,010 --> 00:05:50,570
different issues that I haven't that I

00:05:48,110 --> 00:05:53,090
will not be talking about but you know

00:05:50,570 --> 00:05:55,430
my hope is that this project can be

00:05:53,090 --> 00:05:58,520
something that people you know a lot of

00:05:55,430 --> 00:06:06,169
people use and we can improve it and

00:05:58,520 --> 00:06:08,930
have a common solution so with that we

00:06:06,169 --> 00:06:12,740
can do some demos show you how it works

00:06:08,930 --> 00:06:15,169
stuff like that my first demo will be

00:06:12,740 --> 00:06:20,180
like just compiling some you know

00:06:15,169 --> 00:06:23,890
different different projects on a pixel

00:06:20,180 --> 00:06:23,890
to device I have here

00:06:29,740 --> 00:06:35,509
yeah so this was a pixel - without a

00:06:32,900 --> 00:06:40,340
clone sorry the RT app project that I

00:06:35,509 --> 00:06:42,229
cloned yesterday you know it this is

00:06:40,340 --> 00:06:50,599
running on the pixel - you know I can

00:06:42,229 --> 00:06:57,889
build it you know I can make changes to

00:06:50,599 --> 00:07:00,740
it so so I'm running VI right now on top

00:06:57,889 --> 00:07:04,430
of adb shell that you know inside the

00:07:00,740 --> 00:07:07,909
Chia true you know all the colors and

00:07:04,430 --> 00:07:13,599
everything is appearing really really

00:07:07,909 --> 00:07:18,190
well and you can make make changes like

00:07:13,599 --> 00:07:21,919
you know so I can change that and I can

00:07:18,190 --> 00:07:25,180
build it and you know the obviously the

00:07:21,919 --> 00:07:25,180
to change appears

00:07:30,310 --> 00:07:41,170
then said I'm I'm missing something so

00:07:39,010 --> 00:07:43,870
there so that you know so this is an

00:07:41,170 --> 00:07:48,100
example of building you know editing

00:07:43,870 --> 00:07:50,650
building and running on device I've done

00:07:48,100 --> 00:07:53,650
this to several different you know

00:07:50,650 --> 00:07:56,470
packages just a month ago I wanted to

00:07:53,650 --> 00:07:58,210
modify the perf tool in the next to do

00:07:56,470 --> 00:08:01,150
some things that I wanted it to do that

00:07:58,210 --> 00:08:03,730
it couldn't do and I did this exact same

00:08:01,150 --> 00:08:07,180
process of editing building and running

00:08:03,730 --> 00:08:11,340
and in ten minutes I was able to fix

00:08:07,180 --> 00:08:11,340
bugs and make changes stuff like that

00:08:14,160 --> 00:08:17,530
because it tears it down so I didn't

00:08:16,270 --> 00:08:20,860
want to show it first I'll show you the

00:08:17,530 --> 00:08:23,110
how to get into it it's basically one

00:08:20,860 --> 00:08:25,690
command but so there you you are also

00:08:23,110 --> 00:08:29,580
you know your route that you have

00:08:25,690 --> 00:08:29,580
installed get as well yeah

00:08:30,160 --> 00:08:40,570
cloned it from github so that's that's

00:08:36,640 --> 00:08:43,990
arty app and then I actually cloned the

00:08:40,570 --> 00:08:51,280
whole Linux kernel on device as well and

00:08:43,990 --> 00:08:54,250
I built it in 15 minutes 37 seconds but

00:08:51,280 --> 00:08:57,670
I can also just compile perf

00:08:54,250 --> 00:09:01,020
in the Linux kernel tree and show you

00:08:57,670 --> 00:09:01,020
that it will finish really fast

00:09:15,410 --> 00:09:19,250
yeah everything

00:09:20,930 --> 00:09:25,639
so it's it's actually using the its

00:09:22,879 --> 00:09:29,959
Debian it's a debian root filesystem as

00:09:25,639 --> 00:09:32,689
I was saying yeah so you have thousands

00:09:29,959 --> 00:09:37,160
of packages so you know while this is

00:09:32,689 --> 00:09:40,309
going on it can be as big as you want

00:09:37,160 --> 00:09:42,339
there are different route file systems

00:09:40,309 --> 00:09:44,990
that are already pre-built

00:09:42,339 --> 00:09:49,999
there's a minimal one there's a full one

00:09:44,990 --> 00:09:53,179
can range from 40 MB to 500 MB you have

00:09:49,999 --> 00:09:57,889
to pass different options too so yeah 38

00:09:53,179 --> 00:10:01,910
seconds to build perth which is kind of

00:09:57,889 --> 00:10:09,369
cool like you know for mobile device you

00:10:01,910 --> 00:10:13,040
know eight cores eight threads on for

00:10:09,369 --> 00:10:17,480
4.15 per frost taking like I think 31

00:10:13,040 --> 00:10:20,990
seconds so the time went up a little the

00:10:17,480 --> 00:10:23,119
interesting thing is on my x86 ThinkPad

00:10:20,990 --> 00:10:30,290
it was taking a little longer than like

00:10:23,119 --> 00:10:32,540
33 seconds or something at the time some

00:10:30,290 --> 00:10:37,809
people have been using it to run rust

00:10:32,540 --> 00:10:37,809
programs internally so I

00:10:49,880 --> 00:10:58,290
and then the other demo I wanted to show

00:10:53,339 --> 00:11:02,660
was you know it has the full binutils

00:10:58,290 --> 00:11:08,250
package so you can like do things like

00:11:02,660 --> 00:11:21,690
disassemble Android binaries something

00:11:08,250 --> 00:11:23,959
like many different things you can do

00:11:21,690 --> 00:11:23,959
with it

00:11:24,769 --> 00:11:29,820
so coming back to so I didn't show you

00:11:28,320 --> 00:11:32,459
how to set it up right so that's

00:11:29,820 --> 00:11:34,680
actually you just have to clone the the

00:11:32,459 --> 00:11:37,560
gate project ADA it's it's on github

00:11:34,680 --> 00:11:42,660
everything is on github nothing is

00:11:37,560 --> 00:11:45,779
internal so the the root filesystem the

00:11:42,660 --> 00:12:00,000
whole thing is is on github so you clone

00:11:45,779 --> 00:12:02,250
it and then you just say ADA prepare and

00:12:00,000 --> 00:12:04,500
it would download the root filesystem

00:12:02,250 --> 00:12:07,529
free for you you could also have it

00:12:04,500 --> 00:12:11,220
build it yourself so you can say ADA

00:12:07,529 --> 00:12:13,639
prepare build and it'll it'll build the

00:12:11,220 --> 00:12:17,220
root filesystem for you on your device

00:12:13,639 --> 00:12:20,910
on your system yeah so what have you

00:12:17,220 --> 00:12:23,569
installed by default yeah just a few

00:12:20,910 --> 00:12:26,519
things like so there's a minimal version

00:12:23,569 --> 00:12:27,990
initiated prepared just post the the

00:12:26,519 --> 00:12:31,350
minimal one and then when you say full

00:12:27,990 --> 00:12:34,399
read it it gets everything all the the

00:12:31,350 --> 00:12:34,399
compilers and all that

00:12:36,770 --> 00:12:42,470
so the minimal one just has apt-get and

00:12:40,130 --> 00:12:44,240
VI and a few things like that and then

00:12:42,470 --> 00:12:46,580
with app get you you know if once your

00:12:44,240 --> 00:12:49,520
device is on the internet you can just

00:12:46,580 --> 00:12:52,270
download whatever you want or that so

00:12:49,520 --> 00:12:58,430
you could customize it however you want

00:12:52,270 --> 00:13:01,160
so sorry yeah I think we were discussing

00:12:58,430 --> 00:13:03,649
that you'll you also have some the BCC

00:13:01,160 --> 00:13:06,770
compiler to make some EVPs race and as

00:13:03,649 --> 00:13:12,220
well yeah so I don't have a demo of that

00:13:06,770 --> 00:13:14,959
but so this is an example of a tool for

00:13:12,220 --> 00:13:18,500
looking at histograms of the run queue

00:13:14,959 --> 00:13:21,500
lengths on all the CPUs this can show

00:13:18,500 --> 00:13:23,839
you issues where too many tasks are

00:13:21,500 --> 00:13:26,600
running on CPU so maybe the load balance

00:13:23,839 --> 00:13:28,580
is not working or so there's some bug or

00:13:26,600 --> 00:13:31,040
there are just too many tasks so this

00:13:28,580 --> 00:13:33,860
can help you see that so in this example

00:13:31,040 --> 00:13:36,760
here I have a synthetic test I'm running

00:13:33,860 --> 00:13:43,520
hack bench and I've pinned it to CPU 6 I

00:13:36,760 --> 00:13:46,040
have 8 threads pinned to a single CPU so

00:13:43,520 --> 00:13:47,390
I'm actually inducing an issue it's not

00:13:46,040 --> 00:13:50,959
a bug or anything it's a user

00:13:47,390 --> 00:13:54,920
configuration thing and so you can see

00:13:50,959 --> 00:13:58,730
like a lot of times the histogram for

00:13:54,920 --> 00:14:02,540
CPU 6 you know typically you would

00:13:58,730 --> 00:14:06,050
expect most of the time that the load is

00:14:02,540 --> 00:14:09,620
spread across and the run queue length

00:14:06,050 --> 00:14:13,040
is zero because there's nothing in the

00:14:09,620 --> 00:14:16,360
run queue everything is running but on

00:14:13,040 --> 00:14:20,740
CPU 6 you see that the run queue length

00:14:16,360 --> 00:14:20,740
is greater than 0 many times

00:14:20,890 --> 00:14:26,000
interestingly it only goes up till 4 I

00:14:24,320 --> 00:14:28,070
think it doesn't go up more than that I

00:14:26,000 --> 00:14:33,529
think that's because the Hat bench

00:14:28,070 --> 00:14:36,170
threads are like in pairs yeah so bcc is

00:14:33,529 --> 00:14:37,760
you know you can this is just a small

00:14:36,170 --> 00:14:41,860
example of one of the tools there are

00:14:37,760 --> 00:14:44,930
150 tools that show you a lot of

00:14:41,860 --> 00:14:46,490
different things and different things

00:14:44,930 --> 00:14:48,870
happening in the kernel so in this

00:14:46,490 --> 00:14:52,110
example I have you know I have

00:14:48,870 --> 00:14:58,230
this is an example of the trace tool in

00:14:52,110 --> 00:15:01,740
BCC which is showing you the arguments

00:14:58,230 --> 00:15:03,570
that are positive a kernel function also

00:15:01,740 --> 00:15:07,830
doose's open it's a function that is

00:15:03,570 --> 00:15:14,610
called when the open syscall is is

00:15:07,830 --> 00:15:17,010
executed so yeah so all this these tools

00:15:14,610 --> 00:15:19,410
are all running on within that theater

00:15:17,010 --> 00:15:22,980
environment it's all tested for a few

00:15:19,410 --> 00:15:25,550
months now so this this tool can be

00:15:22,980 --> 00:15:28,440
useful for many different purposes

00:15:25,550 --> 00:15:30,180
people using it in automation for doing

00:15:28,440 --> 00:15:33,500
different things running different tools

00:15:30,180 --> 00:15:33,500
I guess

00:15:39,580 --> 00:15:45,040
so that's the that's the link you can go

00:15:43,390 --> 00:15:47,380
to that and you know there are

00:15:45,040 --> 00:15:50,529
instructions it takes five minutes

00:15:47,380 --> 00:15:53,860
the the root filesystem and everything

00:15:50,529 --> 00:15:57,339
is on the github releases directory so

00:15:53,860 --> 00:15:58,750
it comes from github servers we're

00:15:57,339 --> 00:16:03,370
thinking of moving that to Google

00:15:58,750 --> 00:16:05,950
storage so it's even faster but yeah

00:16:03,370 --> 00:16:09,310
everything is public so feel free to use

00:16:05,950 --> 00:16:12,640
it and you know contribute back to it

00:16:09,310 --> 00:16:22,839
you know that's looking really

00:16:12,640 --> 00:16:24,940
interesting I mean so yeah and you yeah

00:16:22,839 --> 00:16:28,000
it's so it's running in parallel three

00:16:24,940 --> 00:16:30,220
hundred a framework so you can zero in

00:16:28,000 --> 00:16:32,470
some use case and monitor that are you

00:16:30,220 --> 00:16:34,480
able to maybe you don't need because

00:16:32,470 --> 00:16:37,360
with the EDB you can do whatever you

00:16:34,480 --> 00:16:41,040
want you're using an ADB connection yeah

00:16:37,360 --> 00:16:44,380
it's all over a DB okay

00:16:41,040 --> 00:16:49,270
and there were several issues with BCC

00:16:44,380 --> 00:16:52,750
not able to are not able to look up user

00:16:49,270 --> 00:16:57,339
space symbols because Android the way it

00:16:52,750 --> 00:16:59,620
the way it it loads libraries into the

00:16:57,339 --> 00:17:02,170
memory is at an offset so all the

00:16:59,620 --> 00:17:08,970
symbols were off and all that has been

00:17:02,170 --> 00:17:12,280
fixed so so with this let's see have a

00:17:08,970 --> 00:17:12,880
like it's full image root of fist

00:17:12,280 --> 00:17:14,980
install

00:17:12,880 --> 00:17:17,589
have you tried running its assets and

00:17:14,980 --> 00:17:20,169
enter an SSH into it does it work well

00:17:17,589 --> 00:17:25,780
so thing is you can run ADB over Wi-Fi

00:17:20,169 --> 00:17:31,720
so I you know I never had I feel I guess

00:17:25,780 --> 00:17:34,240
there's just more liquidus than yeah you

00:17:31,720 --> 00:17:37,980
can that's fixed so you can have a

00:17:34,240 --> 00:17:37,980
number of windows in parallel

00:17:44,150 --> 00:17:50,880
yeah we're in a CIA test loop we are

00:17:47,820 --> 00:17:52,920
using popular automation with ADB so

00:17:50,880 --> 00:17:54,960
having that running in parallel and

00:17:52,920 --> 00:17:57,560
monitoring that can be interesting as

00:17:54,960 --> 00:17:57,560
well yeah

00:18:05,600 --> 00:18:12,960
so my use case for running Debian build

00:18:09,030 --> 00:18:14,580
is for example to enable a certain

00:18:12,960 --> 00:18:18,030
feature on a tugboat which is running

00:18:14,580 --> 00:18:19,980
USB for example let's say my landing

00:18:18,030 --> 00:18:22,050
team has given me a kernel and it says

00:18:19,980 --> 00:18:26,640
that GPS they are verified on a debian

00:18:22,050 --> 00:18:30,120
build so can I use chroot environment to

00:18:26,640 --> 00:18:37,860
verify all those tools which they have

00:18:30,120 --> 00:18:41,490
used on yeah you and you run it as root

00:18:37,860 --> 00:18:43,680
so everything you can interact with the

00:18:41,490 --> 00:18:49,860
kernel the same way you would in a non

00:18:43,680 --> 00:18:53,040
CH environment so those are all bind

00:18:49,860 --> 00:18:56,180
mounted when you when you run this tool

00:18:53,040 --> 00:18:58,820
at bind mounts five or six different

00:18:56,180 --> 00:19:02,100
directories including the Android

00:18:58,820 --> 00:19:07,760
directories like system so that we have

00:19:02,100 --> 00:19:10,860
access to the symbols from user space

00:19:07,760 --> 00:19:13,170
okay so you have yourself as proc access

00:19:10,860 --> 00:19:15,360
you know you can do anything so I can

00:19:13,170 --> 00:19:17,700
emulate all the testing which they have

00:19:15,360 --> 00:19:20,040
done to verify that okay this kernel has

00:19:17,700 --> 00:19:21,720
G our support so I can just verify it on

00:19:20,040 --> 00:19:25,650
yeah you should be able to run case of

00:19:21,720 --> 00:19:30,150
tests and all that should I don't see a

00:19:25,650 --> 00:19:33,510
reason why it wouldn't work yeah it's a

00:19:30,150 --> 00:19:35,490
it's it was initially a set of scripts

00:19:33,510 --> 00:19:37,410
that I was using and then it turned out

00:19:35,490 --> 00:19:39,990
to be useful so then I turned it into a

00:19:37,410 --> 00:19:45,600
project so that's kind of how it started

00:19:39,990 --> 00:19:47,880
I guess one of the things I was kind of

00:19:45,600 --> 00:19:49,680
curious is how much interaction with the

00:19:47,880 --> 00:19:51,480
android framework do you end up doing

00:19:49,680 --> 00:19:53,700
from this because i kind of being in

00:19:51,480 --> 00:19:56,700
your own sort of container and android

00:19:53,700 --> 00:19:58,320
having its own sort of it's not yeah

00:19:56,700 --> 00:20:01,260
it's not running in a container so it's

00:19:58,320 --> 00:20:03,360
shares the same PID space and all of

00:20:01,260 --> 00:20:07,290
that there haven't been any issues that

00:20:03,360 --> 00:20:08,880
i came across with android running but

00:20:07,290 --> 00:20:11,760
it doesn't it doesn't request for us

00:20:08,880 --> 00:20:14,070
service or interact with it yeah some

00:20:11,760 --> 00:20:15,400
people have asked for something like

00:20:14,070 --> 00:20:17,050
that as well but

00:20:15,400 --> 00:20:18,820
I was curious if you can you know can

00:20:17,050 --> 00:20:21,160
you do stop from it and does that do

00:20:18,820 --> 00:20:22,930
anything or is it yeah outside of the

00:20:21,160 --> 00:20:41,530
namespace I haven't tried those things

00:20:22,930 --> 00:20:44,940
but yeah yeah okay yeah part of the

00:20:41,530 --> 00:20:49,230
reason is that the seed library is not

00:20:44,940 --> 00:20:55,720
enjoy dB Ruth Harris from scratch is a

00:20:49,230 --> 00:21:00,040
your description oh the minimal

00:20:55,720 --> 00:21:01,930
packaging so it has both so the the full

00:21:00,040 --> 00:21:04,660
build will actually download packages

00:21:01,930 --> 00:21:08,350
from Debian and build a route FS for you

00:21:04,660 --> 00:21:11,920
the way you want to but that takes like

00:21:08,350 --> 00:21:14,320
30 minutes or so and then there are

00:21:11,920 --> 00:21:16,750
pre-built file systems that are

00:21:14,320 --> 00:21:18,640
downloaded by default but if all that's

00:21:16,750 --> 00:21:20,920
what happens it down it downloads the

00:21:18,640 --> 00:21:23,890
pre-built enroute file systems another

00:21:20,920 --> 00:21:28,480
original file system if I want to add

00:21:23,890 --> 00:21:31,510
some additional library then I you could

00:21:28,480 --> 00:21:34,480
get your beautiful on the file system

00:21:31,510 --> 00:21:36,850
and install yeah you just clone it and

00:21:34,480 --> 00:21:40,320
build it the way you want you can clone

00:21:36,850 --> 00:21:44,860
it or you can install packages from

00:21:40,320 --> 00:21:47,830
Debian selves yeah okay thank you yeah

00:21:44,860 --> 00:21:50,400
once you set it up on the device get

00:21:47,830 --> 00:21:50,400
into the device

00:21:53,690 --> 00:22:03,650
okay cool all right okay thanks thanks

00:21:59,850 --> 00:22:08,659
[Applause]

00:22:03,650 --> 00:22:08,659

YouTube URL: https://www.youtube.com/watch?v=67qXcMDFSAk


