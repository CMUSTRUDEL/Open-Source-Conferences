Title: Friday Keynotes at Linaro Connect Vancouver 2018 (YVR18)
Publication date: 2018-09-28
Playlist: Linaro Connect Vancouver 2018
Description: 
	Friday Keynotes at Linaro Connect Vancouver 2018 (YVR18)

YVR18- 500K1 Keynote: Thea Aldrich "Putting Principle into Practice: A case study on building a diverse open source technical community"
YVR18- 500K2 Keynote: Todd Kjos "Android kernels: How the sausage is made"
YVR18- 500K3 Keynote: Kato Shinpei
Captions: 
	00:00:00,000 --> 00:00:04,589
[Applause]

00:00:06,560 --> 00:00:14,219
hello thank you so much for for coming

00:00:11,370 --> 00:00:16,379
today my name is Thea Aldridge and I

00:00:14,219 --> 00:00:18,359
want to welcome you thank you for Thank

00:00:16,379 --> 00:00:20,820
You Toulon ro to all of the event

00:00:18,359 --> 00:00:21,930
organisers sponsors and all of you for

00:00:20,820 --> 00:00:24,660
coming this morning

00:00:21,930 --> 00:00:27,300
I'm so excited to talk to you today

00:00:24,660 --> 00:00:29,369
about developer relations that's

00:00:27,300 --> 00:00:30,300
something that I'm incredibly passionate

00:00:29,369 --> 00:00:33,540
about

00:00:30,300 --> 00:00:35,100
it's an incredible aspect of the open

00:00:33,540 --> 00:00:38,399
source community that really empowers

00:00:35,100 --> 00:00:42,469
developers and helps them build

00:00:38,399 --> 00:00:44,879
relationships to build better technology

00:00:42,469 --> 00:00:48,090
so it's no secret that open source is

00:00:44,879 --> 00:00:50,160
eating the world you know open source

00:00:48,090 --> 00:00:52,500
creates partnerships that push the

00:00:50,160 --> 00:00:54,329
limits of what's possible by expanding

00:00:52,500 --> 00:00:56,640
the number of voices at the table and

00:00:54,329 --> 00:01:00,750
sharing resources across a number of

00:00:56,640 --> 00:01:02,399
organizations and we also all know that

00:01:00,750 --> 00:01:04,949
things are changing within the embedded

00:01:02,399 --> 00:01:06,960
ecosystem the rise of better cheaper

00:01:04,949 --> 00:01:09,330
hardware and easier access to all the

00:01:06,960 --> 00:01:11,250
pieces of information that a developer

00:01:09,330 --> 00:01:16,680
would need to build a smart connected

00:01:11,250 --> 00:01:19,020
device are all readily available and so

00:01:16,680 --> 00:01:20,970
before I go any further I want to let

00:01:19,020 --> 00:01:24,689
you guys know that full disclosure I'm

00:01:20,970 --> 00:01:27,060
one of these new people you know I come

00:01:24,689 --> 00:01:30,509
to the Zephyr project which is part of

00:01:27,060 --> 00:01:32,460
the Linux Foundation from the open

00:01:30,509 --> 00:01:34,140
source geospatial ecosystem I've been

00:01:32,460 --> 00:01:37,500
with Zephyr for about three months now

00:01:34,140 --> 00:01:39,840
and really what happens with my

00:01:37,500 --> 00:01:42,030
experience and finding the Zephyr

00:01:39,840 --> 00:01:44,250
project and finding these resources and

00:01:42,030 --> 00:01:46,850
finding something what I what I thought

00:01:44,250 --> 00:01:50,880
was incredibly special and compelling

00:01:46,850 --> 00:01:52,560
led me to an entirely new career and so

00:01:50,880 --> 00:01:54,990
what I want to talk about to you today

00:01:52,560 --> 00:01:57,030
is the Zephyr project in the developer

00:01:54,990 --> 00:01:58,979
relations that we've in activities that

00:01:57,030 --> 00:02:01,530
we've got going on within the project

00:01:58,979 --> 00:02:04,350
but very much from the point of view of

00:02:01,530 --> 00:02:07,170
myself as I was coming into the project

00:02:04,350 --> 00:02:09,149
and as I was experiencing all of these

00:02:07,170 --> 00:02:10,920
different resources

00:02:09,149 --> 00:02:14,280
so like I said I started out an open

00:02:10,920 --> 00:02:18,269
source geospatial and I was fascinated

00:02:14,280 --> 00:02:21,930
by this idea that with volunteers and

00:02:18,269 --> 00:02:23,849
different data sources a real accurate

00:02:21,930 --> 00:02:26,280
map of the world could be made and

00:02:23,849 --> 00:02:27,780
something in a level of detail and

00:02:26,280 --> 00:02:31,470
richness that no one had ever seen

00:02:27,780 --> 00:02:32,909
before and over time I started hearing

00:02:31,470 --> 00:02:34,349
more and more about the Internet of

00:02:32,909 --> 00:02:36,900
Things and the way that the Internet of

00:02:34,349 --> 00:02:39,200
Things was providing incredibly rich

00:02:36,900 --> 00:02:41,910
latent data that was able to be

00:02:39,200 --> 00:02:44,959
incorporated into these maps to really

00:02:41,910 --> 00:02:48,660
give people some of the most detailed

00:02:44,959 --> 00:02:51,000
pictures of their environment and while

00:02:48,660 --> 00:02:54,030
I was doing that I started becoming I

00:02:51,000 --> 00:02:55,980
daresay jealous that I was seeing all of

00:02:54,030 --> 00:02:58,650
these technologies but I didn't know how

00:02:55,980 --> 00:03:01,260
to build them myself I didn't know how I

00:02:58,650 --> 00:03:03,329
could ever take these pieces and not

00:03:01,260 --> 00:03:06,239
only make a map but have information

00:03:03,329 --> 00:03:10,500
that I cared about flowing in and so

00:03:06,239 --> 00:03:13,500
these are my cows so what I ended up

00:03:10,500 --> 00:03:16,079
doing was I started trying to build and

00:03:13,500 --> 00:03:18,510
I started wanting to experiment with

00:03:16,079 --> 00:03:20,790
these devices and see if the barrier of

00:03:18,510 --> 00:03:26,150
entry was really low enough that I could

00:03:20,790 --> 00:03:28,260
actually do it and so what I did was

00:03:26,150 --> 00:03:31,079
discovered this ephra project

00:03:28,260 --> 00:03:32,970
and while I was working through creating

00:03:31,079 --> 00:03:35,069
what I lovingly referred to as my cow

00:03:32,970 --> 00:03:37,169
happiness detector it's it's really just

00:03:35,069 --> 00:03:39,510
a biometric feedback device that I was

00:03:37,169 --> 00:03:43,829
using to track the location and and

00:03:39,510 --> 00:03:45,419
general well-being of my pet cows but

00:03:43,829 --> 00:03:48,540
while I was going through this sort of

00:03:45,419 --> 00:03:50,669
hobby project something really

00:03:48,540 --> 00:03:52,560
incredible started happening during the

00:03:50,669 --> 00:03:55,530
day I was working in geospatial but at

00:03:52,560 --> 00:03:58,769
night my passion was embedded and we see

00:03:55,530 --> 00:04:01,709
that a lot within this ecosystem and

00:03:58,769 --> 00:04:03,870
everything was great until I tried to

00:04:01,709 --> 00:04:06,239
start putting things together and it

00:04:03,870 --> 00:04:08,970
turns out that's not quite that simple

00:04:06,239 --> 00:04:13,470
for someone coming in with very little

00:04:08,970 --> 00:04:15,150
experience in this community and one of

00:04:13,470 --> 00:04:17,549
the problems that I encountered was that

00:04:15,150 --> 00:04:19,319
I had to start making choices

00:04:17,549 --> 00:04:20,970
had to desert deciding what kind of

00:04:19,319 --> 00:04:22,710
hardware I was going to use what kind of

00:04:20,970 --> 00:04:25,710
communication protocols I was going to

00:04:22,710 --> 00:04:27,840
use and all of the different pieces how

00:04:25,710 --> 00:04:30,599
I was going to put them together what

00:04:27,840 --> 00:04:32,479
what I was going to put the device in to

00:04:30,599 --> 00:04:38,250
attach it to the cow

00:04:32,479 --> 00:04:40,830
everything was overwhelming so as a new

00:04:38,250 --> 00:04:43,879
developer trying to build something I

00:04:40,830 --> 00:04:46,020
encountered some really common problems

00:04:43,879 --> 00:04:50,250
fragmentation in the market there were a

00:04:46,020 --> 00:04:52,860
ton of vendor specific tools that either

00:04:50,250 --> 00:04:55,740
locked me in to a certain way of doing

00:04:52,860 --> 00:04:56,490
things or locked me in to a certain

00:04:55,740 --> 00:04:59,129
toolset

00:04:56,490 --> 00:05:01,469
there was an incredibly high barrier of

00:04:59,129 --> 00:05:03,539
entry and there were a lot of solutions

00:05:01,469 --> 00:05:05,310
that worked but they wouldn't clearly

00:05:03,539 --> 00:05:09,539
not built with somebody like me in mind

00:05:05,310 --> 00:05:11,190
and I knew I needed help and I knew that

00:05:09,539 --> 00:05:12,960
it was out there but I couldn't find it

00:05:11,190 --> 00:05:15,389
you know and I've been working as an

00:05:12,960 --> 00:05:17,460
open source developer advocate for over

00:05:15,389 --> 00:05:20,190
ten years so I knew that surely there

00:05:17,460 --> 00:05:22,229
had to be some ecosystem that I could

00:05:20,190 --> 00:05:24,120
plug in that I could actually start

00:05:22,229 --> 00:05:26,130
becoming empowered to build what I

00:05:24,120 --> 00:05:28,080
wanted to build to participate in the

00:05:26,130 --> 00:05:32,300
community the way that I wanted to

00:05:28,080 --> 00:05:37,560
participate so what I ended up finding

00:05:32,300 --> 00:05:39,569
was the Zephyr community the

00:05:37,560 --> 00:05:42,270
democratization of these technologies

00:05:39,569 --> 00:05:45,060
gave me a goal it gave me a destination

00:05:42,270 --> 00:05:47,639
but within the Zephyr project what I

00:05:45,060 --> 00:05:50,940
found and what the Zephyr community gave

00:05:47,639 --> 00:05:52,800
me was the rocket the fuel the map and

00:05:50,940 --> 00:05:55,590
the owner's manual to actually start

00:05:52,800 --> 00:05:59,669
putting those pieces together and start

00:05:55,590 --> 00:06:03,110
being able to realize that the products

00:05:59,669 --> 00:06:05,250
that I was trying to make as a hobbyist

00:06:03,110 --> 00:06:06,690
so before I go any further I want to

00:06:05,250 --> 00:06:08,669
talk a little bit about the Zephyr

00:06:06,690 --> 00:06:11,159
project to give a little bit of context

00:06:08,669 --> 00:06:13,289
we're a free and open-source real-time

00:06:11,159 --> 00:06:16,379
operating system hosted out of the Linux

00:06:13,289 --> 00:06:20,370
Foundation we boasted a number of

00:06:16,379 --> 00:06:24,360
members including Lennar oh we have a

00:06:20,370 --> 00:06:26,099
very vibrant community and Zephyr is

00:06:24,360 --> 00:06:28,409
built with safety and security in mind

00:06:26,099 --> 00:06:31,030
specifically for resource constrained

00:06:28,409 --> 00:06:32,950
environments which really fit into the

00:06:31,030 --> 00:06:35,350
type of device that I was trying to fit

00:06:32,950 --> 00:06:39,820
to build which was essentially precision

00:06:35,350 --> 00:06:42,460
agriculture and that brings me to the

00:06:39,820 --> 00:06:44,620
first best practice that I really want

00:06:42,460 --> 00:06:47,320
to talk about to you today when I

00:06:44,620 --> 00:06:50,230
encountered the Zephyr project it was

00:06:47,320 --> 00:06:52,900
intentional and as a professional with

00:06:50,230 --> 00:06:55,090
experience and open source it was clear

00:06:52,900 --> 00:06:57,430
to me from my first encounter with the

00:06:55,090 --> 00:07:00,960
project that things being done within

00:06:57,430 --> 00:07:00,960
the project were being done for a reason

00:07:01,260 --> 00:07:07,180
the reason was to address those problems

00:07:04,390 --> 00:07:10,720
that I was encountering now we're not

00:07:07,180 --> 00:07:13,210
all the way there yet but it was clear

00:07:10,720 --> 00:07:16,920
from just the very first cursory look

00:07:13,210 --> 00:07:19,720
that the fragmentation the modularity

00:07:16,920 --> 00:07:22,540
the licensing and the future richness

00:07:19,720 --> 00:07:25,990
was something that I could understand

00:07:22,540 --> 00:07:28,390
why it was being done and it was clearly

00:07:25,990 --> 00:07:30,310
being done for people like me and like

00:07:28,390 --> 00:07:36,760
you who are trying to do new and

00:07:30,310 --> 00:07:39,220
innovative things but again knowing a

00:07:36,760 --> 00:07:41,440
solution exists is fundamentally

00:07:39,220 --> 00:07:46,390
different from being able to implement

00:07:41,440 --> 00:07:48,550
that solution and that's the second bit

00:07:46,390 --> 00:07:50,800
I want to talk about that really made an

00:07:48,550 --> 00:07:54,520
impact to me within the Zephyr community

00:07:50,800 --> 00:07:56,020
as documentation opens doors I have to

00:07:54,520 --> 00:07:58,330
give a shout out to David kinder from

00:07:56,020 --> 00:08:01,480
Intel who's almost exclusively

00:07:58,330 --> 00:08:05,950
participated in the documentation of

00:08:01,480 --> 00:08:08,470
Zephyr this stuff was transformational

00:08:05,950 --> 00:08:10,240
for me so anybody who's building an

00:08:08,470 --> 00:08:12,760
open-source project and trying to

00:08:10,240 --> 00:08:14,920
support the community understand that

00:08:12,760 --> 00:08:16,930
the path that people like me are going

00:08:14,920 --> 00:08:20,580
to take as they come into this are

00:08:16,930 --> 00:08:23,290
through the resources you put out online

00:08:20,580 --> 00:08:26,440
so these are some of the resources that

00:08:23,290 --> 00:08:29,260
the Zephyr community had available for

00:08:26,440 --> 00:08:30,910
me when I came in and we're working very

00:08:29,260 --> 00:08:32,800
hard to build those but one of the

00:08:30,910 --> 00:08:35,290
things I want to take a moment to to

00:08:32,800 --> 00:08:38,640
shout out is the YouTube videos you know

00:08:35,290 --> 00:08:42,310
I I'm not only coming to the embedded

00:08:38,640 --> 00:08:43,790
ecosystem from geospatial but I came to

00:08:42,310 --> 00:08:47,180
geospatial from a non tech

00:08:43,790 --> 00:08:49,820
background so for me one of the most

00:08:47,180 --> 00:08:52,760
empowering things was that Zephyr had a

00:08:49,820 --> 00:08:55,790
YouTube channel and there were tons of

00:08:52,760 --> 00:08:57,950
videos online that I could watch people

00:08:55,790 --> 00:09:01,010
I could identify with I could see I

00:08:57,950 --> 00:09:02,990
could start understanding what kind of

00:09:01,010 --> 00:09:04,910
community this was what kind of people

00:09:02,990 --> 00:09:06,860
they were how they were talking to each

00:09:04,910 --> 00:09:09,380
other how they were interacting with the

00:09:06,860 --> 00:09:11,300
technology and the idea that I could

00:09:09,380 --> 00:09:14,300
just sit in my living room in my spare

00:09:11,300 --> 00:09:16,310
time and get an entire education on how

00:09:14,300 --> 00:09:19,340
to use this product was incredibly

00:09:16,310 --> 00:09:22,190
powerful I also want to take a second to

00:09:19,340 --> 00:09:23,990
to think Lennar Oh for videoing these

00:09:22,190 --> 00:09:26,270
presentations because many of the

00:09:23,990 --> 00:09:28,220
presentations I was watching and I was

00:09:26,270 --> 00:09:30,650
finding so useful were actually

00:09:28,220 --> 00:09:34,700
presentations that were at some of these

00:09:30,650 --> 00:09:36,680
events many years ago so thank you also

00:09:34,700 --> 00:09:39,710
to all of the presenters who do those

00:09:36,680 --> 00:09:41,120
because in a lot of ways half of the

00:09:39,710 --> 00:09:43,250
time with I walk up to you and I've got

00:09:41,120 --> 00:09:45,110
a big smile on my face it's because I

00:09:43,250 --> 00:09:48,410
think I know you because I've watched

00:09:45,110 --> 00:09:50,840
all of your stuff I've seen all your

00:09:48,410 --> 00:09:56,780
videos I read your tweets and I've seen

00:09:50,840 --> 00:10:00,620
your code open source is more than code

00:09:56,780 --> 00:10:03,760
and documentation though governance

00:10:00,620 --> 00:10:08,270
matters governance with an open source

00:10:03,760 --> 00:10:10,850
can be a make or break endeavor right

00:10:08,270 --> 00:10:13,070
because oftentimes open source

00:10:10,850 --> 00:10:15,080
communities are faced with a number of

00:10:13,070 --> 00:10:17,270
challenges that they have to balance

00:10:15,080 --> 00:10:20,240
there's competing interests there's

00:10:17,270 --> 00:10:22,160
priorities that need to to be ranked and

00:10:20,240 --> 00:10:24,770
people have different ideas and opinions

00:10:22,160 --> 00:10:26,960
about those now that variety is what

00:10:24,770 --> 00:10:29,690
makes open source so beautiful and

00:10:26,960 --> 00:10:32,270
powerful but it can also without proper

00:10:29,690 --> 00:10:34,310
governance derail or sidetrack

00:10:32,270 --> 00:10:37,070
discussions and make it really hard for

00:10:34,310 --> 00:10:39,860
things to go forward and so one of the

00:10:37,070 --> 00:10:42,680
things that was someone familiar with

00:10:39,860 --> 00:10:44,900
open source and who understood it when I

00:10:42,680 --> 00:10:48,350
encountered the Zephyr project it was

00:10:44,900 --> 00:10:51,200
incredibly refreshing to see clear

00:10:48,350 --> 00:10:52,580
governance documentation one of the

00:10:51,200 --> 00:10:54,260
things that I like to point out about

00:10:52,580 --> 00:10:57,279
this effort project that I think is

00:10:54,260 --> 00:10:59,810
where there's a lot of

00:10:57,279 --> 00:11:02,089
thought leadership provided by some of

00:10:59,810 --> 00:11:04,640
the folks that founded the project is

00:11:02,089 --> 00:11:06,560
the difference between decision-making

00:11:04,640 --> 00:11:09,440
in the technical steering committee and

00:11:06,560 --> 00:11:12,350
the governing board you know oftentimes

00:11:09,440 --> 00:11:14,510
there's it can be very difficult as a

00:11:12,350 --> 00:11:16,160
developer because you feel like there's

00:11:14,510 --> 00:11:18,500
competing business interests that might

00:11:16,160 --> 00:11:19,850
supersede the work that you're doing or

00:11:18,500 --> 00:11:21,110
that there's things happening in the

00:11:19,850 --> 00:11:23,720
background that you don't know about

00:11:21,110 --> 00:11:25,670
that you don't have a say in and one of

00:11:23,720 --> 00:11:27,410
the things that was so amazing and so

00:11:25,670 --> 00:11:29,660
refreshing about encountering this

00:11:27,410 --> 00:11:33,020
effort project was that you could see

00:11:29,660 --> 00:11:35,510
that everything had a process there was

00:11:33,020 --> 00:11:38,270
a channel to go through if you had an

00:11:35,510 --> 00:11:41,600
issue there were clear responsibilities

00:11:38,270 --> 00:11:44,180
and delegation of authority within the

00:11:41,600 --> 00:11:49,250
project so that resources time and

00:11:44,180 --> 00:11:50,779
energy is spread around but successful

00:11:49,250 --> 00:11:53,360
collaborations like this don't just

00:11:50,779 --> 00:11:57,260
happen on their own there's a lot that

00:11:53,360 --> 00:11:58,670
goes into it and that's the the fourth

00:11:57,260 --> 00:12:01,940
best practice that I want to encourage

00:11:58,670 --> 00:12:03,709
you all to really really focus on as

00:12:01,940 --> 00:12:06,529
you're moving forward in open source is

00:12:03,709 --> 00:12:09,470
that community needs cultivation these

00:12:06,529 --> 00:12:11,570
things didn't just happen right they

00:12:09,470 --> 00:12:15,770
were intentional they were built with a

00:12:11,570 --> 00:12:18,770
purpose they were explained to me and

00:12:15,770 --> 00:12:21,589
there were also resources and activities

00:12:18,770 --> 00:12:25,640
that I was able to use as a developer

00:12:21,589 --> 00:12:26,930
that made a massive difference to me now

00:12:25,640 --> 00:12:31,310
why would I put up a meeting information

00:12:26,930 --> 00:12:33,050
I I loved the first part of my week we

00:12:31,310 --> 00:12:34,579
have a lot of calls in the Zephyr

00:12:33,050 --> 00:12:36,890
community and verse one of the things

00:12:34,579 --> 00:12:38,570
that I really like and i lurk on almost

00:12:36,890 --> 00:12:41,149
every one of these with a big smile on

00:12:38,570 --> 00:12:43,870
my face because what I love so much

00:12:41,149 --> 00:12:46,130
about them is even when there are fierce

00:12:43,870 --> 00:12:49,310
disagreements about the best technical

00:12:46,130 --> 00:12:51,800
bath path forward the community is able

00:12:49,310 --> 00:12:54,589
to mean to maintain professional

00:12:51,800 --> 00:12:56,630
behavior they're friendly and at the end

00:12:54,589 --> 00:12:58,850
of the day everybody knows that we're

00:12:56,630 --> 00:13:02,120
working on a common goal for common

00:12:58,850 --> 00:13:04,190
purposes I want to invite everybody

00:13:02,120 --> 00:13:06,980
who's interested the Zephyr calls are a

00:13:04,190 --> 00:13:08,259
great way to get introduced to the

00:13:06,980 --> 00:13:10,119
community if you

00:13:08,259 --> 00:13:13,689
not comfortable posting on a mailing

00:13:10,119 --> 00:13:15,489
list or reaching out in other ways a lot

00:13:13,689 --> 00:13:18,899
of times mailing lists and other

00:13:15,489 --> 00:13:21,429
resources that are very public can feel

00:13:18,899 --> 00:13:23,979
like too much attention as a newcomer

00:13:21,429 --> 00:13:26,109
and so as a newcomer within the Zephyr

00:13:23,979 --> 00:13:28,419
project being able to just quietly

00:13:26,109 --> 00:13:30,549
listen in on a call and maybe

00:13:28,419 --> 00:13:33,399
participate if I wanted to or I had

00:13:30,549 --> 00:13:35,470
something to add was so refreshing and

00:13:33,399 --> 00:13:37,179
comforting that there were different

00:13:35,470 --> 00:13:39,789
channels and different mediums that I

00:13:37,179 --> 00:13:41,229
could actually plug into and participate

00:13:39,789 --> 00:13:46,149
in a way that I was familiar and

00:13:41,229 --> 00:13:48,009
comfortable with but wait there's more

00:13:46,149 --> 00:13:49,509
so within this effort project we're

00:13:48,009 --> 00:13:51,999
really trying over the next six months

00:13:49,509 --> 00:13:54,399
to a year to continue to build out these

00:13:51,999 --> 00:13:56,410
outreach activities you know as someone

00:13:54,399 --> 00:13:58,119
who benefited from them there one of the

00:13:56,410 --> 00:14:00,399
things that I'm the most excited about

00:13:58,119 --> 00:14:03,129
being able to contribute back to the

00:14:00,399 --> 00:14:05,350
community we're going to be doing a

00:14:03,129 --> 00:14:08,079
number of events over the next few

00:14:05,350 --> 00:14:10,600
months we're also starting to introduce

00:14:08,079 --> 00:14:12,459
language specific webinars because we

00:14:10,600 --> 00:14:14,109
realize that we've got community members

00:14:12,459 --> 00:14:15,549
all over the world that want to hear

00:14:14,109 --> 00:14:18,249
about zephyr that want to learn about

00:14:15,549 --> 00:14:20,199
zephyr and it's gonna be easier for them

00:14:18,249 --> 00:14:21,819
and better for them if we can

00:14:20,199 --> 00:14:24,639
communicate with people in their native

00:14:21,819 --> 00:14:26,499
tongue we're also creating a number of

00:14:24,639 --> 00:14:28,509
how-to guides I have to give a shout out

00:14:26,499 --> 00:14:30,970
to the the Bluetooth guys they have

00:14:28,509 --> 00:14:33,039
created a number of incredible resources

00:14:30,970 --> 00:14:34,449
that I love using that I want to

00:14:33,039 --> 00:14:36,759
encourage you all to use but we're

00:14:34,449 --> 00:14:38,619
seeing other organizations creating

00:14:36,759 --> 00:14:40,179
these and putting these out in and not

00:14:38,619 --> 00:14:43,029
just telling you about the technical

00:14:40,179 --> 00:14:45,809
documentation but showing you from end

00:14:43,029 --> 00:14:48,100
to end how you deploy this solution

00:14:45,809 --> 00:14:49,869
we're also going to be doing a series of

00:14:48,100 --> 00:14:51,879
product spotlight so I want to encourage

00:14:49,869 --> 00:14:54,249
any of you if you are building with

00:14:51,879 --> 00:14:56,139
Zephyr please reach out to us and let us

00:14:54,249 --> 00:14:59,529
know so that we can spotlight your

00:14:56,139 --> 00:15:02,499
product and show other developers what

00:14:59,529 --> 00:15:04,749
they can do you know for me the product

00:15:02,499 --> 00:15:07,989
spotlight of some of the products built

00:15:04,749 --> 00:15:10,659
with Zephyr helped me create new ideas

00:15:07,989 --> 00:15:11,769
that I could then go build and so even

00:15:10,659 --> 00:15:13,479
if you don't think that what you're

00:15:11,769 --> 00:15:15,459
working on is necessarily very

00:15:13,479 --> 00:15:18,129
interesting you don't know who in the

00:15:15,459 --> 00:15:20,409
community it might resonate with very

00:15:18,129 --> 00:15:21,109
powerfully and inspire them to go out

00:15:20,409 --> 00:15:24,559
and build

00:15:21,109 --> 00:15:26,849
and also conferences in social media um

00:15:24,559 --> 00:15:28,529
you know over the last few months I've

00:15:26,849 --> 00:15:33,089
gotten introduced to WeChat and a number

00:15:28,529 --> 00:15:36,269
of other social media channels and it's

00:15:33,089 --> 00:15:39,059
been incredibly fun to interact with the

00:15:36,269 --> 00:15:44,549
developers all over the world and we're

00:15:39,059 --> 00:15:46,589
excited to keep that going and then the

00:15:44,549 --> 00:15:47,909
fifth one that I want to took this best

00:15:46,589 --> 00:15:51,709
practice I want to talk to you a little

00:15:47,909 --> 00:15:54,769
about a bit about is diversity and

00:15:51,709 --> 00:15:57,599
encourage you not to limit or confine

00:15:54,769 --> 00:16:00,269
what you think about and what you define

00:15:57,599 --> 00:16:03,029
- first diversity as within your project

00:16:00,269 --> 00:16:04,919
or your organization because for me

00:16:03,029 --> 00:16:07,589
diversity was one of the things that

00:16:04,919 --> 00:16:09,089
attracted me to the Zephyr project but

00:16:07,589 --> 00:16:12,049
it wasn't diversity in the way that I

00:16:09,089 --> 00:16:14,699
think a lot of folks immediately assume

00:16:12,049 --> 00:16:17,369
so for me diversity in the Zephyr

00:16:14,699 --> 00:16:19,079
project had to deal with technology it

00:16:17,369 --> 00:16:21,809
had to deal with the number of supported

00:16:19,079 --> 00:16:24,239
boards that I didn't you know knowing

00:16:21,809 --> 00:16:25,979
nothing could go to Radio Shack buy a

00:16:24,239 --> 00:16:28,019
whole bunch of stuff as they were going

00:16:25,979 --> 00:16:29,999
out of business and have a reasonable

00:16:28,019 --> 00:16:32,219
expectation that there was at least some

00:16:29,999 --> 00:16:35,039
level of support within the Zephyr

00:16:32,219 --> 00:16:36,809
community for those boards the range of

00:16:35,039 --> 00:16:39,209
architectures that are supported the

00:16:36,809 --> 00:16:42,269
number of use cases the Zephyr is being

00:16:39,209 --> 00:16:43,529
deployed in the member companies we've

00:16:42,269 --> 00:16:46,259
got everything from billion-dollar

00:16:43,529 --> 00:16:48,329
companies to two-person startups that

00:16:46,259 --> 00:16:50,209
are able because of the governance to

00:16:48,329 --> 00:16:53,119
sit at the table and have an equal voice

00:16:50,209 --> 00:16:55,649
within the within some of their boards

00:16:53,119 --> 00:16:58,889
we also have diversity within our board

00:16:55,649 --> 00:17:00,629
members and diversity and the board is

00:16:58,889 --> 00:17:04,049
incredibly important when you're talking

00:17:00,629 --> 00:17:06,629
about top level decisions there's

00:17:04,049 --> 00:17:08,579
diversity and goals within this effort

00:17:06,629 --> 00:17:11,249
community you know myself is a hobbyist

00:17:08,579 --> 00:17:13,769
I have fundamentally different goals

00:17:11,249 --> 00:17:16,769
when I try to build something than a

00:17:13,769 --> 00:17:19,369
developer doing so in their day job but

00:17:16,769 --> 00:17:22,019
that doesn't mean that we both don't get

00:17:19,369 --> 00:17:23,459
wonderful resources and abilities from

00:17:22,019 --> 00:17:26,129
the Zephyr community in this effort

00:17:23,459 --> 00:17:29,490
project and it's the ability to have

00:17:26,129 --> 00:17:32,060
that many goals that many products that

00:17:29,490 --> 00:17:34,190
many use cases that many types

00:17:32,060 --> 00:17:36,470
technology coming in and all interacting

00:17:34,190 --> 00:17:38,740
together that you start seeing the full

00:17:36,470 --> 00:17:42,560
richness of the value chain that

00:17:38,740 --> 00:17:46,880
open-source offers and also the type of

00:17:42,560 --> 00:17:49,370
contributors yes it's important to have

00:17:46,880 --> 00:17:51,010
diversity but don't limit diversity

00:17:49,370 --> 00:17:54,200
because diversity is an outcome

00:17:51,010 --> 00:17:56,180
diversity is an outcome of all of the

00:17:54,200 --> 00:17:58,190
things that you do within your projects

00:17:56,180 --> 00:18:00,140
that's going to attract people that's

00:17:58,190 --> 00:18:03,080
going to keep them engaged and that's

00:18:00,140 --> 00:18:06,590
going to keep your project going strong

00:18:03,080 --> 00:18:08,660
moving forward so I want to encourage

00:18:06,590 --> 00:18:11,000
you all to join us

00:18:08,660 --> 00:18:13,970
that's our WeChat and our Twitter we are

00:18:11,000 --> 00:18:16,070
all over the place and like I said

00:18:13,970 --> 00:18:18,170
Suffern has been one of the most

00:18:16,070 --> 00:18:22,220
pleasant experiences that I've ever had

00:18:18,170 --> 00:18:23,810
an open source for these reasons and I

00:18:22,220 --> 00:18:25,700
can't thank you all enough and I want to

00:18:23,810 --> 00:18:28,040
encourage you to join us because there

00:18:25,700 --> 00:18:30,260
is something very special happening with

00:18:28,040 --> 00:18:33,110
this project and I would like to invite

00:18:30,260 --> 00:18:33,770
you all to participate and come along

00:18:33,110 --> 00:18:36,610
for the ride

00:18:33,770 --> 00:18:36,610
thank you

00:18:40,910 --> 00:18:49,650
thank you so much Thea that was terrific

00:18:43,410 --> 00:18:52,560
and now I would like to introduce kado

00:18:49,650 --> 00:18:54,030
son who's come here from Tokyo to talk

00:18:52,560 --> 00:18:57,570
with us about Auto where I think you're

00:18:54,030 --> 00:19:01,100
gonna find this fascinating he's also a

00:18:57,570 --> 00:19:01,100
professor at the University of Tokyo

00:19:10,480 --> 00:19:21,380
hi morning morning my name is shinpei

00:19:17,210 --> 00:19:23,900
cattle from inverse of Tokyo I also

00:19:21,380 --> 00:19:27,830
represent my startup which is called

00:19:23,900 --> 00:19:32,690
tier 4 so today I'm happy to be invited

00:19:27,830 --> 00:19:33,500
here to present out wear which is a 3

00:19:32,690 --> 00:19:37,039
years old

00:19:33,500 --> 00:19:41,690
open-source project so I'm going to

00:19:37,039 --> 00:19:44,419
introduce how we use open source

00:19:41,690 --> 00:19:45,559
software for self-driving so Auto way is

00:19:44,419 --> 00:19:50,529
the open source software for

00:19:45,559 --> 00:19:56,059
self-driving not only on your desk

00:19:50,529 --> 00:20:02,750
desktop but also in a real car using a

00:19:56,059 --> 00:20:05,510
automotive space wakeboard so we

00:20:02,750 --> 00:20:09,799
actually use this software by ourselves

00:20:05,510 --> 00:20:15,010
as well for a lot of you testing we

00:20:09,799 --> 00:20:18,470
equip you know facilities such as the

00:20:15,010 --> 00:20:22,520
small computers and work switches

00:20:18,470 --> 00:20:26,870
batteries etc and oat wear is installed

00:20:22,520 --> 00:20:30,770
and control the car in terms of so the

00:20:26,870 --> 00:20:33,590
car is modified to receive some commands

00:20:30,770 --> 00:20:35,450
from the computer then the Ottawa is

00:20:33,590 --> 00:20:39,110
kind of a brain for the self-driving

00:20:35,450 --> 00:20:45,799
technology so it sends a command how the

00:20:39,110 --> 00:20:48,470
car should move let me introduce cap Rob

00:20:45,799 --> 00:20:53,740
examples for use cases that we use auto

00:20:48,470 --> 00:20:57,649
air for so this field test exact is

00:20:53,740 --> 00:21:00,980
performed by our team in Japan so our

00:20:57,649 --> 00:21:06,740
team is qualified to operate treble s

00:21:00,980 --> 00:21:09,190
car on a public road so this is actual

00:21:06,740 --> 00:21:11,779
legally performed so we have a

00:21:09,190 --> 00:21:15,320
authorization from the police and the

00:21:11,779 --> 00:21:18,500
government to operate the cow is a

00:21:15,320 --> 00:21:20,860
drivers without violating at all it's

00:21:18,500 --> 00:21:20,860
kind of

00:21:20,910 --> 00:21:27,850
you know complicated mechanism you know

00:21:24,250 --> 00:21:30,370
how to make it happen because still a

00:21:27,850 --> 00:21:33,370
driver with the driver license must be

00:21:30,370 --> 00:21:35,770
ready for taking over the car in remote

00:21:33,370 --> 00:21:39,340
place so the remote place is always

00:21:35,770 --> 00:21:41,920
connected by a tee but once such

00:21:39,340 --> 00:21:44,559
mechanism is constructed and permitted

00:21:41,920 --> 00:21:50,770
then we can make a driverless car

00:21:44,559 --> 00:21:55,059
duration in Japan already but driverless

00:21:50,770 --> 00:21:59,860
car in service will still take some time

00:21:55,059 --> 00:22:02,679
to be deployed so today the most the

00:21:59,860 --> 00:22:06,340
most common example of video testing is

00:22:02,679 --> 00:22:10,290
we still have a safety driver sitting in

00:22:06,340 --> 00:22:12,850
a driver seat because if some accident

00:22:10,290 --> 00:22:15,870
happens then a driver can immediately

00:22:12,850 --> 00:22:19,900
take over the car control so in this

00:22:15,870 --> 00:22:23,320
view test the driver still sits in the

00:22:19,900 --> 00:22:28,570
car driver seat but everything is

00:22:23,320 --> 00:22:30,910
automated so from city to highway and

00:22:28,570 --> 00:22:34,809
heading for the airport so this scenario

00:22:30,910 --> 00:22:38,080
the this car is heading for the airport

00:22:34,809 --> 00:22:42,580
from the city through the highway and

00:22:38,080 --> 00:22:46,710
this is how the car understands the real

00:22:42,580 --> 00:22:50,470
world so in 3d structures and the green

00:22:46,710 --> 00:22:56,200
highlighted line shows in the past that

00:22:50,470 --> 00:22:59,820
car tries to go forward and some trucks

00:22:56,200 --> 00:23:05,110
or objects are kind of captured by a

00:22:59,820 --> 00:23:07,120
laser sensor then if you see some

00:23:05,110 --> 00:23:10,900
numbers on the line it is a plan

00:23:07,120 --> 00:23:16,050
velocity so the car always tries to

00:23:10,900 --> 00:23:16,050
follow the velocity plan on the line

00:23:16,290 --> 00:23:24,370
actually this type of view test I

00:23:19,720 --> 00:23:27,580
believe now it is happening in

00:23:24,370 --> 00:23:30,130
everywhere in the world in Japan yes

00:23:27,580 --> 00:23:32,770
maybe our team has the most experience

00:23:30,130 --> 00:23:34,829
but also other companies are now trying

00:23:32,770 --> 00:23:38,829
to

00:23:34,829 --> 00:23:41,700
do this type of demo and in Europe in

00:23:38,829 --> 00:23:45,700
the US in Asian countries I see a lot of

00:23:41,700 --> 00:23:48,579
self-driving fear testing using such a

00:23:45,700 --> 00:23:52,389
modified car but as I mentioned earlier

00:23:48,579 --> 00:23:55,179
I believe it still takes some time to be

00:23:52,389 --> 00:23:58,570
deployed perhaps the first commercially

00:23:55,179 --> 00:24:01,149
autonomous car will be showing very soon

00:23:58,570 --> 00:24:03,969
but it's just gonna be the first or

00:24:01,149 --> 00:24:08,950
first set of the cards it will still

00:24:03,969 --> 00:24:14,039
take some time to be deployed but yes in

00:24:08,950 --> 00:24:17,200
terms of technology if we try this say

00:24:14,039 --> 00:24:21,149
10 times then we could do this 9 out of

00:24:17,200 --> 00:24:25,179
10 but still the problem is that how to

00:24:21,149 --> 00:24:28,739
how to handle when the car fails so in

00:24:25,179 --> 00:24:28,739
order to deploy in the technology

00:24:33,230 --> 00:24:39,050
okay give me a moment okay

00:24:39,250 --> 00:24:49,480
so this is another example of field test

00:24:44,620 --> 00:24:52,350
but assuming some particular services so

00:24:49,480 --> 00:24:57,419
this is demo with Japan Post which is a

00:24:52,350 --> 00:25:00,940
kind of government supported posting

00:24:57,419 --> 00:25:05,679
services in Japan so we actually engaged

00:25:00,940 --> 00:25:10,270
with Japan Post teams and this car is

00:25:05,679 --> 00:25:13,169
actually supported by the Japan Post so

00:25:10,270 --> 00:25:21,730
it is now delivering some stamps as some

00:25:13,169 --> 00:25:25,799
postal boxes it is heading to some

00:25:21,730 --> 00:25:29,740
branch of Japan Post

00:25:25,799 --> 00:25:34,390
however stopping by several sub branches

00:25:29,740 --> 00:25:37,659
so now this car has two boxes it's just

00:25:34,390 --> 00:25:39,820
for demo and it's actually central Tokyo

00:25:37,659 --> 00:25:42,309
it's very crowded place but everything

00:25:39,820 --> 00:25:48,190
is automated again and it tries to stop

00:25:42,309 --> 00:25:51,730
by sub branch then it wants to get one

00:25:48,190 --> 00:25:56,289
more a box this operation could be done

00:25:51,730 --> 00:25:58,990
by human so a human is standing on the

00:25:56,289 --> 00:26:01,630
branch side then once autonomous car

00:25:58,990 --> 00:26:05,530
arrives then it delivers the wrong

00:26:01,630 --> 00:26:09,130
another box then the car just restarts

00:26:05,530 --> 00:26:14,020
the operation again to head for the next

00:26:09,130 --> 00:26:17,530
branches so as you can see there are

00:26:14,020 --> 00:26:21,130
actual real traffic's and multiple lanes

00:26:17,530 --> 00:26:23,919
and since this car has to go on right

00:26:21,130 --> 00:26:26,320
now in the next few moments now the car

00:26:23,919 --> 00:26:28,299
is trying to make a lane change to the

00:26:26,320 --> 00:26:31,090
right because in Japan you can't make a

00:26:28,299 --> 00:26:33,880
right turn from the centerline so it

00:26:31,090 --> 00:26:36,820
this includes lane change but now the

00:26:33,880 --> 00:26:39,340
car cannot find the opportunity to make

00:26:36,820 --> 00:26:44,020
a right now so it is waiting but finally

00:26:39,340 --> 00:26:46,960
perhaps what once the space is found

00:26:44,020 --> 00:26:50,740
then the car is going to be actually

00:26:46,960 --> 00:26:53,499
it's made a right hand so this operation

00:26:50,740 --> 00:26:56,980
is done at

00:26:53,499 --> 00:27:01,539
thirty forty miles power so perhaps this

00:26:56,980 --> 00:27:05,259
is kind of upper bound that we could

00:27:01,539 --> 00:27:07,899
provide kind of real services using open

00:27:05,259 --> 00:27:11,859
software so spending more time we could

00:27:07,899 --> 00:27:14,559
provide perhaps higher velocity services

00:27:11,859 --> 00:27:18,070
but today started 240 miles power would

00:27:14,559 --> 00:27:21,399
be some upper bound and we also do

00:27:18,070 --> 00:27:24,580
similar testing in US or in Europe so

00:27:21,399 --> 00:27:33,039
many other countries so that's also a

00:27:24,580 --> 00:27:35,019
very you know advantage of a software so

00:27:33,039 --> 00:27:37,629
our software is used in many countries

00:27:35,019 --> 00:27:40,960
not only in some particular company some

00:27:37,629 --> 00:27:47,619
kind of countries and the types of the

00:27:40,960 --> 00:27:50,440
cars we also don't stick so or one hand

00:27:47,619 --> 00:27:54,399
we could use OEM cards but on the other

00:27:50,440 --> 00:27:56,919
hand we could also use a small Evie so

00:27:54,399 --> 00:28:03,429
this is actually manufactured by our

00:27:56,919 --> 00:28:05,859
team as well because I believe that a

00:28:03,429 --> 00:28:09,460
deployment of autonomous cars could

00:28:05,859 --> 00:28:13,330
start with a small class and it is also

00:28:09,460 --> 00:28:18,009
interesting to see that in in cost

00:28:13,330 --> 00:28:22,179
services when you try our car you can

00:28:18,009 --> 00:28:23,980
also get into virtual world because we

00:28:22,179 --> 00:28:26,289
are now thinking about not only

00:28:23,980 --> 00:28:29,440
automation but also how to spend your

00:28:26,289 --> 00:28:33,879
time in a car so this is a virtualized

00:28:29,440 --> 00:28:36,190
world but the motion of your virtual

00:28:33,879 --> 00:28:39,249
world is aligned with the real commotion

00:28:36,190 --> 00:28:42,070
because our autonomous car understands

00:28:39,249 --> 00:28:45,159
the motion of the vehicle very precisely

00:28:42,070 --> 00:28:47,769
so it can be reflected to the motion in

00:28:45,159 --> 00:28:50,289
the virtual world this actually is a

00:28:47,769 --> 00:28:52,239
pretty important aspect because if your

00:28:50,289 --> 00:28:55,470
motion is not aligned in the virtual

00:28:52,239 --> 00:28:58,809
world you may feel sick so in order to

00:28:55,470 --> 00:29:01,239
avoid considering sick in kind of

00:28:58,809 --> 00:29:04,389
services it is actually important to

00:29:01,239 --> 00:29:05,860
align motions in real world in virtual

00:29:04,389 --> 00:29:09,460
world

00:29:05,860 --> 00:29:14,450
so and we can also switch between

00:29:09,460 --> 00:29:18,379
virtual and augmented reality so it's

00:29:14,450 --> 00:29:22,460
going to be one of one of the way that

00:29:18,379 --> 00:29:24,320
we how we can spend a time in autonomous

00:29:22,460 --> 00:29:27,289
car by the way this service is right now

00:29:24,320 --> 00:29:30,620
today is demonstrated in that total game

00:29:27,289 --> 00:29:37,519
show in Japan so and I think we're going

00:29:30,620 --> 00:29:41,720
to get a lot of attention now so yes and

00:29:37,519 --> 00:29:45,200
couple of other examples that we test

00:29:41,720 --> 00:29:48,889
our software so this car is actually 3d

00:29:45,200 --> 00:29:51,769
printed now the car can be 3d printed

00:29:48,889 --> 00:29:54,049
and on top of a golf cart so this is

00:29:51,769 --> 00:29:57,559
golf court but we remove the body from

00:29:54,049 --> 00:30:00,409
the golf cart but an instead put on to

00:29:57,559 --> 00:30:02,990
put a over kind of handmade 3d printed

00:30:00,409 --> 00:30:06,769
body on top of the car so that the car

00:30:02,990 --> 00:30:09,289
looks very different I believe that just

00:30:06,769 --> 00:30:11,980
using golf car may not give you user

00:30:09,289 --> 00:30:14,600
experience but changing the appearance

00:30:11,980 --> 00:30:21,409
actually effects a lot to the services

00:30:14,600 --> 00:30:24,409
so disappearance we I believe that in

00:30:21,409 --> 00:30:28,789
the future 3d printers or some some kind

00:30:24,409 --> 00:30:32,409
of handy pathologies to build the car

00:30:28,789 --> 00:30:32,409
could you be deployed very soon

00:30:35,530 --> 00:30:42,950
and yes so in any car you can fall into

00:30:40,670 --> 00:30:46,220
the virtual world and and change the

00:30:42,950 --> 00:30:52,070
contents however in this case you can

00:30:46,220 --> 00:30:59,630
again next to your place you can have a

00:30:52,070 --> 00:31:02,420
dating etc so virtual reality and

00:30:59,630 --> 00:31:06,080
autonomous cars I think search can a

00:31:02,420 --> 00:31:09,800
synergy you know technology because you

00:31:06,080 --> 00:31:11,960
can always change the space and time in

00:31:09,800 --> 00:31:14,990
autonomous car if you don't use virtual

00:31:11,960 --> 00:31:17,510
reality then you always stay with the

00:31:14,990 --> 00:31:19,460
real world which doesn't change but

00:31:17,510 --> 00:31:24,110
virtual world you can change depending

00:31:19,460 --> 00:31:25,910
on your demand and further smaller cars

00:31:24,110 --> 00:31:28,790
we also support so this is actually

00:31:25,910 --> 00:31:31,520
wheelchairs again we replace the body of

00:31:28,790 --> 00:31:35,200
the wheelchair with the 3d printed once

00:31:31,520 --> 00:31:36,980
then it looks like de Rivoli robot so

00:31:35,200 --> 00:31:39,800
wheelchair golf cart

00:31:36,980 --> 00:31:44,510
they already deployed EVs in the world

00:31:39,800 --> 00:31:48,590
we don't have to develop a new cards we

00:31:44,510 --> 00:31:51,830
can use existing platforms but using 3d

00:31:48,590 --> 00:31:56,060
printers for example then you can change

00:31:51,830 --> 00:32:00,560
how the services could be you know that

00:31:56,060 --> 00:32:05,840
could be accepted by the society and yes

00:32:00,560 --> 00:32:08,090
another virtual world so actually the

00:32:05,840 --> 00:32:13,220
appearance of the car can be changed by

00:32:08,090 --> 00:32:15,680
3d printers and the experience of the

00:32:13,220 --> 00:32:18,890
autonomous car can also be changed by

00:32:15,680 --> 00:32:21,530
virtual reality so to err is not the

00:32:18,890 --> 00:32:23,900
software that only supports autonomous

00:32:21,530 --> 00:32:27,230
driving function that can be connected

00:32:23,900 --> 00:32:33,050
to kind of virtual reality services or

00:32:27,230 --> 00:32:33,980
some other related technologies so it's

00:32:33,050 --> 00:32:38,720
open source

00:32:33,980 --> 00:32:43,880
if you go to websites also a lot a I

00:32:38,720 --> 00:32:45,470
it's kind of information website so you

00:32:43,880 --> 00:32:48,440
can also access

00:32:45,470 --> 00:32:51,880
a lot of tools which can support out

00:32:48,440 --> 00:32:56,330
where then there is a link to the github

00:32:51,880 --> 00:33:01,970
then you can finally download the source

00:32:56,330 --> 00:33:03,890
code so now we have close to 2300 starts

00:33:01,970 --> 00:33:05,240
since this project is still our three

00:33:03,890 --> 00:33:09,049
years old I think this is a good number

00:33:05,240 --> 00:33:11,240
and now it's increasing every day so I

00:33:09,049 --> 00:33:12,650
believe that Otway is going to be one of

00:33:11,240 --> 00:33:17,900
the standard software for our

00:33:12,650 --> 00:33:20,059
self-driving technology it's a bit

00:33:17,900 --> 00:33:23,030
difficult to explain what functions

00:33:20,059 --> 00:33:24,559
Ottway provide but i would say most of

00:33:23,030 --> 00:33:27,230
the old functions that are necessary for

00:33:24,559 --> 00:33:29,120
self-driving ultra support but some

00:33:27,230 --> 00:33:30,380
functions are very high quality but some

00:33:29,120 --> 00:33:37,130
other functions we still need

00:33:30,380 --> 00:33:39,140
improvements but once again since all

00:33:37,130 --> 00:33:44,020
the necessary functions for self-driving

00:33:39,140 --> 00:33:46,520
already covered so a lot of R&D purposes

00:33:44,020 --> 00:33:50,350
actually using OAuth where since you

00:33:46,520 --> 00:33:52,580
don't have to kind of prepare for

00:33:50,350 --> 00:33:54,770
individual functions once you download

00:33:52,580 --> 00:33:57,289
out where you have basically everything

00:33:54,770 --> 00:33:58,940
now it's up to you what functions do you

00:33:57,289 --> 00:34:01,429
like to improve or what functions you

00:33:58,940 --> 00:34:04,909
like to replace with your own algorithms

00:34:01,429 --> 00:34:08,560
so as a platform prospective Otway is

00:34:04,909 --> 00:34:15,409
actually very usable since everything is

00:34:08,560 --> 00:34:18,770
you know integrate in your package okay

00:34:15,409 --> 00:34:21,889
so let me introduce how actually

00:34:18,770 --> 00:34:26,720
technically Auto it works so before you

00:34:21,889 --> 00:34:28,490
run out we're bit in fact we need some

00:34:26,720 --> 00:34:34,580
particular data set which is called 3d

00:34:28,490 --> 00:34:38,570
map 3d map is you have to run a kind of

00:34:34,580 --> 00:34:42,460
special vehicle instrumentally with some

00:34:38,570 --> 00:34:46,220
expensive sensors but once you run that

00:34:42,460 --> 00:34:49,369
sensing cards then you get scanned data

00:34:46,220 --> 00:34:52,940
of the place where you want to provide

00:34:49,369 --> 00:34:59,390
our autonomous cost services this is not

00:34:52,940 --> 00:35:01,350
a movie this is 3d points

00:34:59,390 --> 00:35:03,840
correctional points which is often

00:35:01,350 --> 00:35:08,240
called point cloud so it's a collection

00:35:03,840 --> 00:35:12,720
of XYZ points with RGB information

00:35:08,240 --> 00:35:16,320
having this you could understand how the

00:35:12,720 --> 00:35:19,140
structure of the place where you operate

00:35:16,320 --> 00:35:21,780
you're a vehicle look like but we have

00:35:19,140 --> 00:35:24,210
to do some other post-processing which

00:35:21,780 --> 00:35:29,690
is to extract the information from that

00:35:24,210 --> 00:35:31,710
structure information because like

00:35:29,690 --> 00:35:33,150
intersection information who are laying

00:35:31,710 --> 00:35:36,480
information what traffic light

00:35:33,150 --> 00:35:39,060
information those information actually

00:35:36,480 --> 00:35:41,430
static it doesn't change for instance

00:35:39,060 --> 00:35:43,320
the place of the crosswalk doesn't

00:35:41,430 --> 00:35:44,820
change tomorrow so we like to extract

00:35:43,320 --> 00:35:47,460
the static information as much as

00:35:44,820 --> 00:35:51,260
possible before you operate autonomous

00:35:47,460 --> 00:35:56,790
car so that you can reduce a computation

00:35:51,260 --> 00:35:58,740
requirement in real-time so once you

00:35:56,790 --> 00:36:01,260
extract the information static

00:35:58,740 --> 00:36:06,630
information from the kind of 3d

00:36:01,260 --> 00:36:13,260
structure data finally you have a kind

00:36:06,630 --> 00:36:19,200
of high-definition 3d map which which

00:36:13,260 --> 00:36:22,260
includes structural data and semantics

00:36:19,200 --> 00:36:24,750
semantics means whereas the lane where

00:36:22,260 --> 00:36:28,650
is the crosswalk where is the how the

00:36:24,750 --> 00:36:32,240
intersection is constructed loader

00:36:28,650 --> 00:36:35,580
paints and buildings traffic light

00:36:32,240 --> 00:36:37,770
signals so those pieces of information

00:36:35,580 --> 00:36:42,000
all integrated with the 3d structure

00:36:37,770 --> 00:36:45,720
information so this we often call it

00:36:42,000 --> 00:36:50,400
high-definition 3d map Ottway doesn't

00:36:45,720 --> 00:36:53,130
actually walk without this 3d map data

00:36:50,400 --> 00:36:56,070
so having 3d map data is essential for

00:36:53,130 --> 00:36:59,100
out where but in other words if you have

00:36:56,070 --> 00:37:02,070
this 3d map information then what we can

00:36:59,100 --> 00:37:05,150
mostly in all places can provide the

00:37:02,070 --> 00:37:05,150
autonomous function

00:37:06,290 --> 00:37:14,610
so the first significant function that

00:37:11,490 --> 00:37:18,540
OTA provide is a localization so auto a

00:37:14,610 --> 00:37:23,330
a students that the car has a laser

00:37:18,540 --> 00:37:27,510
sensor in 3d capabilities

00:37:23,330 --> 00:37:30,950
so having 3d sensors and comparing the

00:37:27,510 --> 00:37:34,680
scan information with the 3d map data

00:37:30,950 --> 00:37:37,800
both datasets are represented by

00:37:34,680 --> 00:37:43,320
structural 3d structural information so

00:37:37,800 --> 00:37:46,470
we can actually make us matching if the

00:37:43,320 --> 00:37:50,700
car is in a place where the 3d map is

00:37:46,470 --> 00:37:54,450
provided there should be one unique

00:37:50,700 --> 00:38:00,770
place where the shape of the laser scan

00:37:54,450 --> 00:38:03,900
and the 3d map shape are much so we

00:38:00,770 --> 00:38:06,590
compute this process in real time every

00:38:03,900 --> 00:38:09,660
time the sensor information is updated

00:38:06,590 --> 00:38:13,410
so you can see that the red arrow

00:38:09,660 --> 00:38:16,070
represents the place or position of the

00:38:13,410 --> 00:38:20,250
car estimated which is not a lot

00:38:16,070 --> 00:38:22,530
estimated by computing functions this

00:38:20,250 --> 00:38:27,240
accuracy of positioning or localization

00:38:22,530 --> 00:38:32,400
is a few centimeters so this means that

00:38:27,240 --> 00:38:35,550
our autonomous car always understands

00:38:32,400 --> 00:38:38,130
the position of the car over the world

00:38:35,550 --> 00:38:42,630
by few centimeters accuracy that's why

00:38:38,130 --> 00:38:47,070
out ways now can expect acceptable for

00:38:42,630 --> 00:38:49,710
the city operation if the accuracy of

00:38:47,070 --> 00:38:52,260
localization is not few centimeters

00:38:49,710 --> 00:39:00,300
accuracy then autumn a striving a city

00:38:52,260 --> 00:39:02,960
would be difficult and kinda this is

00:39:00,300 --> 00:39:05,760
supporting function so if you know your

00:39:02,960 --> 00:39:07,740
position very accuracy they very

00:39:05,760 --> 00:39:12,960
actively today which means that you can

00:39:07,740 --> 00:39:14,910
also build a map so this is kind of

00:39:12,960 --> 00:39:17,440
complementary to each other if you have

00:39:14,910 --> 00:39:19,300
a map you can make a localization it

00:39:17,440 --> 00:39:26,319
you can make a localization you can make

00:39:19,300 --> 00:39:29,440
a map so this car ahead you don't have

00:39:26,319 --> 00:39:36,819
any map data but because the car now has

00:39:29,440 --> 00:39:40,030
a localization performed so it keeps

00:39:36,819 --> 00:39:43,270
saving the scan data so the kite still

00:39:40,030 --> 00:39:45,880
has a laser scan sensor so if the car

00:39:43,270 --> 00:39:49,060
goes to some place then the shape of

00:39:45,880 --> 00:39:53,200
this place can be saved so accumulating

00:39:49,060 --> 00:39:55,839
this scan then we can finally acquire

00:39:53,200 --> 00:39:59,560
the 3d map information so if you have a

00:39:55,839 --> 00:40:02,740
lot where you can also build a kind of

00:39:59,560 --> 00:40:05,790
laughs 3d map but as I mentioned earlier

00:40:02,740 --> 00:40:07,990
if you want to get very kind of precise

00:40:05,790 --> 00:40:10,240
high-definition map then you need the

00:40:07,990 --> 00:40:13,599
kind of special car which is equipped

00:40:10,240 --> 00:40:17,170
with some expensive sensors but Auto

00:40:13,599 --> 00:40:25,440
itself is also capable of constructing a

00:40:17,170 --> 00:40:29,079
3d map and perhaps this is most popular

00:40:25,440 --> 00:40:31,480
area of autonomous driving so computer

00:40:29,079 --> 00:40:33,400
vision every year new deep learning

00:40:31,480 --> 00:40:37,089
algorithms are presented in a conference

00:40:33,400 --> 00:40:40,540
so Ottawa always tries to update the

00:40:37,089 --> 00:40:42,640
algorithm like three years ago we had

00:40:40,540 --> 00:40:46,000
SSD but last year

00:40:42,640 --> 00:40:49,990
you ought to came up then this year euro

00:40:46,000 --> 00:40:53,470
three was presented so the community of

00:40:49,990 --> 00:40:56,770
out we're always right to implement a

00:40:53,470 --> 00:41:01,740
new algorithm so that R&D purposes you

00:40:56,770 --> 00:41:05,310
can also access the new algorithms in in

00:41:01,740 --> 00:41:05,310
the actual platform

00:41:07,370 --> 00:41:14,960
and subject detection also there are

00:41:10,940 --> 00:41:16,370
multiple ways like you can use cameras

00:41:14,960 --> 00:41:19,130
but the cameras doesn't tell you the

00:41:16,370 --> 00:41:22,190
distance information so now there is the

00:41:19,130 --> 00:41:24,320
sensor fusion you can tell what it is by

00:41:22,190 --> 00:41:26,810
camera but the distance information can

00:41:24,320 --> 00:41:29,000
be provided by a laser sensor which is

00:41:26,810 --> 00:41:32,360
called sensor fusion provide using

00:41:29,000 --> 00:41:37,390
different sensors then producing richer

00:41:32,360 --> 00:41:41,060
information past running so we have a

00:41:37,390 --> 00:41:44,620
Dykstra a star based once the object is

00:41:41,060 --> 00:41:49,700
detected you can calculate a kind of

00:41:44,620 --> 00:41:52,810
avoiding route in real time or another

00:41:49,700 --> 00:41:56,780
algorithm is that you already have

00:41:52,810 --> 00:41:59,090
predefined avoiding paths and you can

00:41:56,780 --> 00:42:02,720
just choose one in real time this is

00:41:59,090 --> 00:42:05,510
very different calculating the path in

00:42:02,720 --> 00:42:07,910
real time or pre calculated pass you

00:42:05,510 --> 00:42:11,060
just choose one in real time so there

00:42:07,910 --> 00:42:13,610
are many other algorithms for a kind of

00:42:11,060 --> 00:42:17,720
path planning but we try to support as

00:42:13,610 --> 00:42:22,340
many algorithms as possible so all those

00:42:17,720 --> 00:42:27,830
pieces of functions can be all performed

00:42:22,340 --> 00:42:30,380
in real time by using a one single

00:42:27,830 --> 00:42:32,950
computer we often use another computer

00:42:30,380 --> 00:42:35,950
for visualization but basically every

00:42:32,950 --> 00:42:40,460
function can be supported by a single

00:42:35,950 --> 00:42:44,720
computer unit this is a case of nvidia

00:42:40,460 --> 00:42:46,520
DRI PX so you just launch the system so

00:42:44,720 --> 00:42:53,330
everything is running on a single

00:42:46,520 --> 00:42:59,360
computer unit so we can install a 3d map

00:42:53,330 --> 00:43:02,360
data and make a localization and draw a

00:42:59,360 --> 00:43:06,020
path then intersection you detect

00:43:02,360 --> 00:43:09,070
objects and make a decision when a space

00:43:06,020 --> 00:43:13,430
is clear then you can resume your

00:43:09,070 --> 00:43:17,300
operation if something is ahead of your

00:43:13,430 --> 00:43:19,860
path then you can recalculate the route

00:43:17,300 --> 00:43:22,950
and try to avoid it

00:43:19,860 --> 00:43:25,620
so this basic function already provided

00:43:22,950 --> 00:43:29,070
so when you download oat where you can

00:43:25,620 --> 00:43:32,820
start here but this is control area

00:43:29,070 --> 00:43:35,040
driving school if you go for a public

00:43:32,820 --> 00:43:38,760
road then actually the scenes that were

00:43:35,040 --> 00:43:42,270
different so even though oat where could

00:43:38,760 --> 00:43:45,150
work as you expect in a control area but

00:43:42,270 --> 00:43:56,880
for public float services you need a lot

00:43:45,150 --> 00:44:01,830
of improvement so the current status of

00:43:56,880 --> 00:44:06,000
oat where is actually we don't guarantee

00:44:01,830 --> 00:44:09,690
any real-time performance though the

00:44:06,000 --> 00:44:13,080
whole pieces of demos that we do most I

00:44:09,690 --> 00:44:16,260
demonstrate today we tried it then we

00:44:13,080 --> 00:44:18,630
could make it but we didn't know if it

00:44:16,260 --> 00:44:22,320
could be made before we actually tried

00:44:18,630 --> 00:44:26,160
but in order to make a production you

00:44:22,320 --> 00:44:28,440
have to make service quality like

00:44:26,160 --> 00:44:32,670
especially we respect the real-time

00:44:28,440 --> 00:44:36,570
performance at least the system should

00:44:32,670 --> 00:44:40,530
be able to be analyzed statically so now

00:44:36,570 --> 00:44:43,590
what we doing right this moment in a

00:44:40,530 --> 00:44:46,830
research team is that we try to make

00:44:43,590 --> 00:44:52,560
system model representing the system by

00:44:46,830 --> 00:44:55,980
a graph because if you see left with the

00:44:52,560 --> 00:44:58,230
left bottom side the oat where is

00:44:55,980 --> 00:45:01,170
composed of more than 200 tasks and

00:44:58,230 --> 00:45:04,080
those 200 tasks have input and output

00:45:01,170 --> 00:45:06,870
then there are data dependencies each

00:45:04,080 --> 00:45:09,840
other so for instance object detection

00:45:06,870 --> 00:45:12,030
function can never start unless the

00:45:09,840 --> 00:45:14,130
sensor information right arrives so

00:45:12,030 --> 00:45:18,390
those data dependencies actually make

00:45:14,130 --> 00:45:22,950
difficult to analyze the system in

00:45:18,390 --> 00:45:26,400
real-time so we like to make a system

00:45:22,950 --> 00:45:29,100
model of the autonomous car which is

00:45:26,400 --> 00:45:31,830
auto wear so that we can make a

00:45:29,100 --> 00:45:32,770
real-time analysis so that like the

00:45:31,830 --> 00:45:36,360
timing timing

00:45:32,770 --> 00:45:39,550
a constraint could be guaranteed

00:45:36,360 --> 00:45:43,300
beforehand we actually operate the car

00:45:39,550 --> 00:45:45,220
so this is what are we trying to achieve

00:45:43,300 --> 00:45:48,700
in a research phase so like a scheduling

00:45:45,220 --> 00:45:51,550
problem is a kind of comic research area

00:45:48,700 --> 00:45:54,360
but we know that a lot of algorithms

00:45:51,550 --> 00:46:01,500
from academic research area to be useful

00:45:54,360 --> 00:46:05,410
to realize this kind of analysis okay so

00:46:01,500 --> 00:46:08,440
this was a kind of overview of what is

00:46:05,410 --> 00:46:11,050
auto where and what we are doing using

00:46:08,440 --> 00:46:14,290
out where and what we plan to do in a

00:46:11,050 --> 00:46:19,300
research area it was actually a lot of

00:46:14,290 --> 00:46:23,080
more that we are today doing or we plan

00:46:19,300 --> 00:46:26,890
to do but I appreciate we can maybe chat

00:46:23,080 --> 00:46:29,050
offline and make more deeper discussion

00:46:26,890 --> 00:46:36,010
and collaboration okay that's it thank

00:46:29,050 --> 00:46:37,540
you thank you so much cutter funny do we

00:46:36,010 --> 00:46:39,130
have maybe one or two questions anybody

00:46:37,540 --> 00:46:44,940
have a question I know I can think of a

00:46:39,130 --> 00:46:44,940
bunch of questions anybody question

00:46:49,150 --> 00:46:52,400
the macho that you have on top of the

00:46:51,860 --> 00:46:55,490
car

00:46:52,400 --> 00:46:58,220
does the open-source site also put

00:46:55,490 --> 00:47:02,780
together design for that yes okay and

00:46:58,220 --> 00:47:09,550
how much roughly does that cost so

00:47:02,780 --> 00:47:09,550
depends on sensor performance but from

00:47:11,110 --> 00:47:18,250
10k to but you can get up to 100 K if

00:47:15,350 --> 00:47:21,590
you choose a very expensive sin society

00:47:18,250 --> 00:47:25,850
but it's actually 10 K so from my

00:47:21,590 --> 00:47:28,250
experience 10k for our sin socket

00:47:25,850 --> 00:47:30,650
bottommost driving has made a

00:47:28,250 --> 00:47:32,660
significant leap as compared to a few

00:47:30,650 --> 00:47:36,950
years ago a few years ago there was no

00:47:32,660 --> 00:47:39,410
choice of 10k always 100k but today the

00:47:36,950 --> 00:47:41,660
cost of sensor is also very decreasing

00:47:39,410 --> 00:47:46,730
so I believe in the future it's going to

00:47:41,660 --> 00:47:48,560
be less than say 5k or a few thousand

00:47:46,730 --> 00:47:50,300
bob is that a leader the lidar sensor

00:47:48,560 --> 00:47:51,770
yeah I am talking about my design stuff

00:47:50,300 --> 00:47:57,590
but it's a whole thing sake to to also

00:47:51,770 --> 00:47:59,060
be gonna be very cheap reasonable if the

00:47:57,590 --> 00:48:03,440
auto wear is dependent on the point

00:47:59,060 --> 00:48:04,550
cloud 3d generation models I mean can't

00:48:03,440 --> 00:48:05,990
that be kind of calm can't that

00:48:04,550 --> 00:48:07,250
compromise security of the of the

00:48:05,990 --> 00:48:09,530
vehicles how often do you have to

00:48:07,250 --> 00:48:11,120
generate these images and I mean what if

00:48:09,530 --> 00:48:12,230
like a building goes up or goes down or

00:48:11,120 --> 00:48:15,380
streets are modified

00:48:12,230 --> 00:48:19,250
yes that should be also analyzed but

00:48:15,380 --> 00:48:21,410
from my experience you could just make

00:48:19,250 --> 00:48:24,080
an update every year you don't have to

00:48:21,410 --> 00:48:28,550
make update every day or every week but

00:48:24,080 --> 00:48:31,250
this means you know we shouldn't make an

00:48:28,550 --> 00:48:34,310
update every day so my personal

00:48:31,250 --> 00:48:37,490
perspective is that at least maybe we

00:48:34,310 --> 00:48:40,160
should be able to operate every month if

00:48:37,490 --> 00:48:41,870
not needed but every month update would

00:48:40,160 --> 00:48:43,880
be most reasonable because every day

00:48:41,870 --> 00:48:46,430
applet could be very kind of colourful

00:48:43,880 --> 00:48:49,130
expensive so every month but in reality

00:48:46,430 --> 00:48:53,690
from our experience the map can be used

00:48:49,130 --> 00:48:55,700
for maybe for one year because only a

00:48:53,690 --> 00:48:57,170
few buildings few buildings gone it

00:48:55,700 --> 00:49:00,320
doesn't really affect the performance of

00:48:57,170 --> 00:49:02,029
localization so basically one year or

00:49:00,320 --> 00:49:04,910
two years

00:49:02,029 --> 00:49:09,119
duration is acceptable but we aim for

00:49:04,910 --> 00:49:10,470
not populating every month so I have a

00:49:09,119 --> 00:49:12,210
quick question for you what about

00:49:10,470 --> 00:49:14,400
connectivity so the car operates

00:49:12,210 --> 00:49:15,809
independently by its own but is there

00:49:14,400 --> 00:49:18,509
connectivity to the cloud and in the sea

00:49:15,809 --> 00:49:21,630
- will there be benefits to having

00:49:18,509 --> 00:49:24,859
connectivity between autonomous cars so

00:49:21,630 --> 00:49:28,529
if you go to the website we also have a

00:49:24,859 --> 00:49:30,329
AMS which is also a management system so

00:49:28,529 --> 00:49:32,640
if you have ohed where and have a

00:49:30,329 --> 00:49:34,920
connectivity like LT Wi-Fi

00:49:32,640 --> 00:49:38,220
anything then you can watch the whole

00:49:34,920 --> 00:49:40,349
Auto way cards on the broader so the

00:49:38,220 --> 00:49:43,200
position or the state of the car can be

00:49:40,349 --> 00:49:46,890
yes managed by a cloud we also provide

00:49:43,200 --> 00:49:49,799
that - for free so what cars communicate

00:49:46,890 --> 00:49:52,170
with one another not direct but yes

00:49:49,799 --> 00:49:54,660
going through the cloud yes you can

00:49:52,170 --> 00:49:56,940
exchange the information so for instance

00:49:54,660 --> 00:49:59,130
the car behind the building which is not

00:49:56,940 --> 00:50:01,430
captured by the sensor you can also make

00:49:59,130 --> 00:50:03,900
it visible going through the network

00:50:01,430 --> 00:50:05,460
thank you so so much for coming every

00:50:03,900 --> 00:50:07,470
thousand ating really interesting we

00:50:05,460 --> 00:50:12,430
really appreciate you very much

00:50:07,470 --> 00:50:14,840
[Applause]

00:50:12,430 --> 00:50:16,640
okay one more great speaker this morning

00:50:14,840 --> 00:50:19,310
we're gonna talk about sausages and how

00:50:16,640 --> 00:50:21,140
they're made and that's google todd from

00:50:19,310 --> 00:50:32,420
google so please join me in welcoming

00:50:21,140 --> 00:50:35,060
Todd all right so Joe chickened out he

00:50:32,420 --> 00:50:39,260
asked me he asked me before we started

00:50:35,060 --> 00:50:41,960
how to pronounce my last name and and he

00:50:39,260 --> 00:50:44,270
just introduced me as Todd so toast is

00:50:41,960 --> 00:50:46,370
how we say it of course that's not how

00:50:44,270 --> 00:50:48,200
they say it in Norway and so I get

00:50:46,370 --> 00:50:51,230
roused by my cousins because I don't

00:50:48,200 --> 00:50:56,000
know how to say my own name so we're

00:50:51,230 --> 00:50:58,400
gonna talk so hard to follow a talk that

00:50:56,000 --> 00:51:01,820
has lots of virtual-reality and cool

00:50:58,400 --> 00:51:03,440
videos of visualization so this is maybe

00:51:01,820 --> 00:51:05,030
gonna feel a little bit like making

00:51:03,440 --> 00:51:07,790
sausage but we're not actually talking

00:51:05,030 --> 00:51:12,710
about sausage we're going to talk about

00:51:07,790 --> 00:51:14,780
the Android kernel or kernels and I'm

00:51:12,710 --> 00:51:17,960
gonna start it off about a year ago last

00:51:14,780 --> 00:51:21,290
November my manager at the time ROM

00:51:17,960 --> 00:51:23,930
Lamar Sean who is the the manager of the

00:51:21,290 --> 00:51:25,520
Android kernel team was brought to the

00:51:23,930 --> 00:51:28,160
maintainer summit

00:51:25,520 --> 00:51:32,900
Linda's asked him to come to talk about

00:51:28,160 --> 00:51:35,420
the Android problem and it's actually a

00:51:32,900 --> 00:51:37,490
set of problems and we're gonna actually

00:51:35,420 --> 00:51:39,500
go through a few of those problems and

00:51:37,490 --> 00:51:43,310
how they're either still a problem or

00:51:39,500 --> 00:51:44,990
how we're addressing them but

00:51:43,310 --> 00:51:46,280
fundamentally from the maintainer his

00:51:44,990 --> 00:51:49,340
point of view the Linux point of view

00:51:46,280 --> 00:51:52,460
the the big problem with Android kernels

00:51:49,340 --> 00:51:55,880
is that you can't run phones with main

00:51:52,460 --> 00:51:58,220
line because of a bunch of reasons that

00:51:55,880 --> 00:51:59,870
we're going to talk about and so we're

00:51:58,220 --> 00:52:02,750
going to kind of go through some of the

00:51:59,870 --> 00:52:07,120
things this is a lwn article if you want

00:52:02,750 --> 00:52:07,120
to read it later the URL is right there

00:52:07,960 --> 00:52:13,490
so the first one this is a quote from

00:52:10,160 --> 00:52:15,770
the article the SOC market cycle is such

00:52:13,490 --> 00:52:18,170
that these chips will always run a

00:52:15,770 --> 00:52:20,750
two-year-old kernel

00:52:18,170 --> 00:52:21,900
now I think always this may be too

00:52:20,750 --> 00:52:23,910
strong of a word

00:52:21,900 --> 00:52:25,980
but certainly there are reasons and if

00:52:23,910 --> 00:52:29,490
we look at what is actually out there

00:52:25,980 --> 00:52:31,289
running in industry these days you're

00:52:29,490 --> 00:52:34,440
gonna see that they are quite old now

00:52:31,289 --> 00:52:37,260
before we go into that a few background

00:52:34,440 --> 00:52:40,680
items first of all all the Android

00:52:37,260 --> 00:52:45,450
kernels that are running are based on a

00:52:40,680 --> 00:52:47,099
long term supported kernel from Linux

00:52:45,450 --> 00:52:48,599
Foundation and that what most of them

00:52:47,099 --> 00:52:50,279
these days the modern ones are

00:52:48,599 --> 00:52:55,680
maintained by a guy named Greg crow

00:52:50,279 --> 00:52:57,420
Hartmann or Greg KH and and so the long

00:52:55,680 --> 00:53:00,750
term supported kernels are based on Lin

00:52:57,420 --> 00:53:02,940
is's tree Linda's declares a release so

00:53:00,750 --> 00:53:05,279
say for nineteen you see up there he's

00:53:02,940 --> 00:53:06,839
gonna when when for nineteen is declared

00:53:05,279 --> 00:53:08,760
that's gonna become a long-term

00:53:06,839 --> 00:53:11,670
supported kernel and that for nineteen

00:53:08,760 --> 00:53:13,770
is taken and from then on critical bug

00:53:11,670 --> 00:53:15,809
fixes and so on are brought in and

00:53:13,770 --> 00:53:18,299
that's what support means is that

00:53:15,809 --> 00:53:23,130
they'll be ongoing support for a four

00:53:18,299 --> 00:53:26,369
nine base plus bug fixes security fixes

00:53:23,130 --> 00:53:28,829
and so on that are needed to provide

00:53:26,369 --> 00:53:31,079
stability and security on that base and

00:53:28,829 --> 00:53:33,720
so most products that are built on Linux

00:53:31,079 --> 00:53:38,849
are based on some one of the long-term

00:53:33,720 --> 00:53:42,059
supported kernels so I'm gonna refer to

00:53:38,849 --> 00:53:43,589
these as LTS long-term supported so

00:53:42,059 --> 00:53:46,980
we'll we're gonna come back to that a

00:53:43,589 --> 00:53:49,619
little bit and here is kind of a sad

00:53:46,980 --> 00:53:51,210
story of the phones that are deployed

00:53:49,619 --> 00:53:55,260
right now so what this graph is showing

00:53:51,210 --> 00:53:57,240
is it's it's the Android releases really

00:53:55,260 --> 00:53:59,520
so you can go to the URL there and what

00:53:57,240 --> 00:54:05,450
it's going to show you is in this case

00:53:59,520 --> 00:54:08,010
as of August 31st this was the

00:54:05,450 --> 00:54:11,579
distribution of the various Android

00:54:08,010 --> 00:54:13,470
releases and you know nougat from

00:54:11,579 --> 00:54:16,289
several years ago that's the biggest one

00:54:13,470 --> 00:54:19,650
these days close to marshmallow from the

00:54:16,289 --> 00:54:23,640
year before so you can see it takes a

00:54:19,650 --> 00:54:27,980
long time for things to update the new

00:54:23,640 --> 00:54:30,569
release pi isn't isn't on here at all

00:54:27,980 --> 00:54:31,140
and this is one of the things we had

00:54:30,569 --> 00:54:33,690
last year

00:54:31,140 --> 00:54:34,730
iliyan mulch EV came and gave a talk

00:54:33,690 --> 00:54:39,890
about

00:54:34,730 --> 00:54:42,200
and trouble is is about addressing what

00:54:39,890 --> 00:54:45,890
we see here where it's so hard to update

00:54:42,200 --> 00:54:47,900
and the new releases take so long to get

00:54:45,890 --> 00:54:51,589
out there and so my expectation is that

00:54:47,900 --> 00:54:52,970
Oreo is going to grow faster or that pie

00:54:51,589 --> 00:54:54,950
is gonna grow faster than its

00:54:52,970 --> 00:54:57,079
predecessors did as more and more people

00:54:54,950 --> 00:54:58,250
are participating in treble but what

00:54:57,079 --> 00:55:00,440
we're still seeing is sort of the

00:54:58,250 --> 00:55:02,480
backlog of marshmallow and nougat which

00:55:00,440 --> 00:55:05,930
didn't have all of the advantages of

00:55:02,480 --> 00:55:07,190
trouble for updating but also notice the

00:55:05,930 --> 00:55:08,630
kernels that are running there and this

00:55:07,190 --> 00:55:10,339
is actually kind of an optimistic view

00:55:08,630 --> 00:55:14,210
because the kernel numbers that I put

00:55:10,339 --> 00:55:16,700
there are the kernel version for the

00:55:14,210 --> 00:55:19,099
flagship that shipped for that release

00:55:16,700 --> 00:55:21,589
so it was the most common introduced

00:55:19,099 --> 00:55:23,180
kernel it doesn't include the update so

00:55:21,589 --> 00:55:24,710
if we really look at Oreo though we

00:55:23,180 --> 00:55:26,480
don't really have a way to track this

00:55:24,710 --> 00:55:30,829
right now but if you looked closely at

00:55:26,480 --> 00:55:33,050
Oreo it's probably mostly 4/4 but

00:55:30,829 --> 00:55:36,440
there's a bunch of 318 and 310 upgrades

00:55:33,050 --> 00:55:38,900
as well so it really skews even older

00:55:36,440 --> 00:55:43,970
kernels out in the field and what you

00:55:38,900 --> 00:55:47,119
see here and and in general devices are

00:55:43,970 --> 00:55:49,460
not updatable to to newer kernel

00:55:47,119 --> 00:55:51,710
revisions and that will probably remain

00:55:49,460 --> 00:55:55,089
the same so we're gonna look at one

00:55:51,710 --> 00:55:58,810
device in particular this is the Nexus 5

00:55:55,089 --> 00:56:03,589
and the way we used to manage kernels

00:55:58,810 --> 00:56:06,920
when Nexus 5 shipped on hit cat it was a

00:56:03,589 --> 00:56:10,040
three four zero kernel and if you look

00:56:06,920 --> 00:56:12,109
closely at that you'll see that it's

00:56:10,040 --> 00:56:15,859
always been three four zero it never

00:56:12,109 --> 00:56:18,980
updated at all and so if you in the in

00:56:15,859 --> 00:56:22,010
the right column how old is that kernel

00:56:18,980 --> 00:56:23,300
so the the thing that the maintainer for

00:56:22,010 --> 00:56:25,790
griping about is that these are two

00:56:23,300 --> 00:56:29,150
years old well the fact is it's even a

00:56:25,790 --> 00:56:31,540
little worse because it started off over

00:56:29,150 --> 00:56:34,730
to just less than two years old but

00:56:31,540 --> 00:56:37,790
rapidly just aged in age until by the

00:56:34,730 --> 00:56:40,400
time we were done with Nexus 5 it was

00:56:37,790 --> 00:56:43,460
you know over four years old even five

00:56:40,400 --> 00:56:47,000
years old kernels running now this

00:56:43,460 --> 00:56:48,440
doesn't mean that between those releases

00:56:47,000 --> 00:56:51,440
the kernels didn't change

00:56:48,440 --> 00:56:53,920
it wasn't the same binary image because

00:56:51,440 --> 00:56:58,220
one thing that we at least were doing

00:56:53,920 --> 00:57:02,060
was security patches and our security

00:56:58,220 --> 00:57:05,869
patch process which is that what you're

00:57:02,060 --> 00:57:09,470
looking at here is the monthly Android

00:57:05,869 --> 00:57:10,970
security bulletin and it's the the

00:57:09,470 --> 00:57:13,430
security bulletin contains you know

00:57:10,970 --> 00:57:15,740
security issues for all parts of Android

00:57:13,430 --> 00:57:17,720
but so what you see on the screen is is

00:57:15,740 --> 00:57:21,260
some of the kernel things that called

00:57:17,720 --> 00:57:24,050
out for that one and the way they the

00:57:21,260 --> 00:57:26,630
way they populate this monthly security

00:57:24,050 --> 00:57:28,130
bulletin is that what is there's a

00:57:26,630 --> 00:57:29,990
number of ways one of them is just bugs

00:57:28,130 --> 00:57:33,470
found by developers that partner

00:57:29,990 --> 00:57:35,300
companies are in Google another way we

00:57:33,470 --> 00:57:36,530
find them is that we pay researchers

00:57:35,300 --> 00:57:39,200
there's a bunch of researchers out there

00:57:36,530 --> 00:57:42,260
and they get a bounty if they find a

00:57:39,200 --> 00:57:46,670
security issue in Android and they can

00:57:42,260 --> 00:57:49,460
Co file that and and bugs are generated

00:57:46,670 --> 00:57:51,829
and if our security team agrees and

00:57:49,460 --> 00:57:55,430
believes that it's a actually is a

00:57:51,829 --> 00:57:58,369
serious issue then those researchers get

00:57:55,430 --> 00:58:02,869
paid so we're paying for for people to

00:57:58,369 --> 00:58:05,000
find stuff and in this case what's

00:58:02,869 --> 00:58:08,540
interesting here is this bulletin came

00:58:05,000 --> 00:58:10,190
out and you can see it already it says

00:58:08,540 --> 00:58:12,740
that the fix already exists in the

00:58:10,190 --> 00:58:13,970
upstream kernel and so one of the

00:58:12,740 --> 00:58:17,119
problems that we're having and we're

00:58:13,970 --> 00:58:21,230
still having and and that we're working

00:58:17,119 --> 00:58:23,030
very hard is that things a lot of the

00:58:21,230 --> 00:58:25,970
security bugs are not marked as security

00:58:23,030 --> 00:58:27,950
bugs in LT s kernels Greg cage you know

00:58:25,970 --> 00:58:29,540
says look we get these bugs and we don't

00:58:27,950 --> 00:58:32,180
know that they're ultimately going to be

00:58:29,540 --> 00:58:35,300
security problems we just know that lots

00:58:32,180 --> 00:58:38,210
of major things are being fixed in the

00:58:35,300 --> 00:58:41,060
LTS ha's and downstream on devices

00:58:38,210 --> 00:58:43,940
people aren't taking them and so device

00:58:41,060 --> 00:58:48,319
has become vulnerable and even now when

00:58:43,940 --> 00:58:50,390
we have a security release the security

00:58:48,319 --> 00:58:53,030
patches only the security releases only

00:58:50,390 --> 00:58:56,240
contain the patches that are cited in

00:58:53,030 --> 00:58:58,369
the security bulletins so if somebody

00:58:56,240 --> 00:59:00,950
actually found it then it might be fixed

00:58:58,369 --> 00:59:01,640
in Security Bulletin but sadly a lot of

00:59:00,950 --> 00:59:04,960
times the

00:59:01,640 --> 00:59:09,470
we learn about a security problem is

00:59:04,960 --> 00:59:11,420
like this where some nasty problem was

00:59:09,470 --> 00:59:14,720
found and it's in the press and exploit

00:59:11,420 --> 00:59:16,599
and so this is an exploit that or this

00:59:14,720 --> 00:59:19,279
is an issue that happened on Nexus 5

00:59:16,599 --> 00:59:22,430
three boards at three four zero through

00:59:19,279 --> 00:59:24,319
its whole lifetime but there were a

00:59:22,430 --> 00:59:26,660
number of times where problems that

00:59:24,319 --> 00:59:29,450
manifest in the field would have been

00:59:26,660 --> 00:59:32,450
fixed if only we'd been taking the LTS

00:59:29,450 --> 00:59:34,880
kernel merging it down and and patching

00:59:32,450 --> 00:59:42,589
the device regularly with it but we

00:59:34,880 --> 00:59:46,549
weren't doing that so a couple years ago

00:59:42,589 --> 00:59:49,940
as part of trouble we we revamped how we

00:59:46,549 --> 00:59:52,220
do android kernels and so we're gonna

00:59:49,940 --> 00:59:55,069
describe it on this slide so the the

00:59:52,220 --> 00:59:57,140
blue you see is the LTS kernel

00:59:55,069 --> 00:59:59,119
so that's maintained by a Greg KH for

00:59:57,140 --> 01:00:02,839
most of the ones we are maintaining

00:59:59,119 --> 01:00:06,410
today the yellow is the Android common

01:00:02,839 --> 01:00:08,180
kernel that's what my team maintains and

01:00:06,410 --> 01:00:12,829
so we have an Android common kernel for

01:00:08,180 --> 01:00:16,940
for LTS is for fourteen four nine four

01:00:12,829 --> 01:00:22,039
four three eighteen and Android kernel

01:00:16,940 --> 01:00:25,400
contains so it's the LTS plus a bunch of

01:00:22,039 --> 01:00:28,460
patches that are necessary to run

01:00:25,400 --> 01:00:32,569
Android now those that set of patches is

01:00:28,460 --> 01:00:34,880
a combination of technologies that we're

01:00:32,569 --> 01:00:37,849
working on and intending to bring up

01:00:34,880 --> 01:00:39,920
upstream so an example of that is EAS

01:00:37,849 --> 01:00:41,869
where where there was a fairly large

01:00:39,920 --> 01:00:44,509
patch set that we've been maintaining in

01:00:41,869 --> 01:00:47,390
common but meanwhile with the armed team

01:00:44,509 --> 01:00:50,329
and with with the Naro folks we've been

01:00:47,390 --> 01:00:52,309
bringing that up into upstream linux and

01:00:50,329 --> 01:00:55,279
so that PAP set is diminishing over time

01:00:52,309 --> 01:00:57,170
and will eventually disappear there's a

01:00:55,279 --> 01:00:59,809
bunch of other patches which we really

01:00:57,170 --> 01:01:01,430
don't have any good excuse for why

01:00:59,809 --> 01:01:04,750
they're sitting in common and our merged

01:01:01,430 --> 01:01:07,849
upstream so we also have accumulated

01:01:04,750 --> 01:01:10,220
some technical debt here so we add our

01:01:07,849 --> 01:01:11,840
technical debt at the a droid android

01:01:10,220 --> 01:01:13,400
common level

01:01:11,840 --> 01:01:14,960
we're actually getting a bunch of help

01:01:13,400 --> 01:01:17,390
from some of the Lyne our team on that

01:01:14,960 --> 01:01:20,150
as well of taking some of our debt

01:01:17,390 --> 01:01:25,990
merging it upstream or in some cases

01:01:20,150 --> 01:01:28,970
were were reimplemented as user space

01:01:25,990 --> 01:01:30,850
and features and so that we don't have

01:01:28,970 --> 01:01:34,460
to carry it in common

01:01:30,850 --> 01:01:36,140
so an Android kernel to function

01:01:34,460 --> 01:01:38,570
properly you need at least the stable

01:01:36,140 --> 01:01:40,340
plus the Android common and then you

01:01:38,570 --> 01:01:44,450
have something you could run say on a on

01:01:40,340 --> 01:01:46,790
a you know a emulator or something like

01:01:44,450 --> 01:01:49,460
that and then if we can actually run it

01:01:46,790 --> 01:01:52,070
on hardware we need some more and so if

01:01:49,460 --> 01:01:54,260
we go down one level we have the what we

01:01:52,070 --> 01:01:57,530
call the SOC kernel and so this would be

01:01:54,260 --> 01:02:00,350
you know say Qualcomm and and their

01:01:57,530 --> 01:02:01,820
flagship silicon for that year this is

01:02:00,350 --> 01:02:06,440
where they would add all the secret

01:02:01,820 --> 01:02:08,360
sauce to support that SOC and then

01:02:06,440 --> 01:02:11,060
finally the device kernel so that could

01:02:08,360 --> 01:02:13,850
be for example where things that are

01:02:11,060 --> 01:02:16,310
specific to a specific device so pixel

01:02:13,850 --> 01:02:18,770
device the device drivers for the touch

01:02:16,310 --> 01:02:21,920
panel and and that sort of thing are

01:02:18,770 --> 01:02:23,840
inserted at the device kernel and what's

01:02:21,920 --> 01:02:26,770
new from the way we used to do things is

01:02:23,840 --> 01:02:30,740
that we are now in a regular cadence of

01:02:26,770 --> 01:02:35,960
merging merging down where once a week

01:02:30,740 --> 01:02:41,450
or so when Greg KH releases a new LTS

01:02:35,960 --> 01:02:45,350
version so like 4.49 t6 that version is

01:02:41,450 --> 01:02:47,870
merged down into a droid common and we

01:02:45,350 --> 01:02:49,820
do a bunch of testing and and actually

01:02:47,870 --> 01:02:52,430
one of the reasons we joined Lonardo a

01:02:49,820 --> 01:02:55,550
few years ago was to take advantage of

01:02:52,430 --> 01:02:58,700
the expertise that exists in Lennar o to

01:02:55,550 --> 01:03:01,220
help us out with the testing and and

01:02:58,700 --> 01:03:04,520
some in the and some of these activities

01:03:01,220 --> 01:03:08,840
around getting this the the patches to

01:03:04,520 --> 01:03:12,260
flow down so lkf T has been critical to

01:03:08,840 --> 01:03:14,810
being able to give our our downstream

01:03:12,260 --> 01:03:16,820
partners SOC vendors confidence to take

01:03:14,810 --> 01:03:19,840
the common kernel merge it down because

01:03:16,820 --> 01:03:19,840
it's been tested

01:03:20,740 --> 01:03:26,050
the soc that the Android common is

01:03:24,160 --> 01:03:29,109
merged regularly down to the SOC

01:03:26,050 --> 01:03:30,700
Colonels that's done by the SOC vendors

01:03:29,109 --> 01:03:35,770
and that's also done on a fairly regular

01:03:30,700 --> 01:03:38,680
cadence and then eventually on some

01:03:35,770 --> 01:03:41,220
devices its merged all the way down to

01:03:38,680 --> 01:03:43,900
the device and you can actually see it

01:03:41,220 --> 01:03:46,810
that's and and that's part that we

01:03:43,900 --> 01:03:51,839
haven't completely worked out yet and

01:03:46,810 --> 01:03:51,839
are still working with vendors and OEMs

01:03:53,910 --> 01:03:58,690
so another part of the what the

01:03:56,980 --> 01:04:00,460
maintainer is complaining about and this

01:03:58,690 --> 01:04:05,560
is a big part of why we don't run main

01:04:00,460 --> 01:04:08,320
line is is that typically the kernels

01:04:05,560 --> 01:04:11,589
that ship have many lines of code I

01:04:08,320 --> 01:04:13,720
think Greg did the accounting on it once

01:04:11,589 --> 01:04:16,900
and found that slightly more than half

01:04:13,720 --> 01:04:19,180
of a binary running on a device is

01:04:16,900 --> 01:04:21,070
generated from out of kernel code out of

01:04:19,180 --> 01:04:22,960
tree code which you know means it comes

01:04:21,070 --> 01:04:26,290
from you know it's part of our technical

01:04:22,960 --> 01:04:28,660
debt or it comes from the SOC vendor

01:04:26,290 --> 01:04:32,020
enablement of the silicon or from the

01:04:28,660 --> 01:04:36,000
device and so he kind of refers to it at

01:04:32,020 --> 01:04:38,349
that point as Linux ish not truly Linux

01:04:36,000 --> 01:04:42,130
and so obviously what they'd like to see

01:04:38,349 --> 01:04:43,839
is is everything upstream so that so

01:04:42,130 --> 01:04:49,000
that you can actually run the kernels

01:04:43,839 --> 01:04:50,859
using mainline kernels now there's a

01:04:49,000 --> 01:04:54,119
bunch of reasons we that that doesn't

01:04:50,859 --> 01:04:56,830
happen business reasons cultural reasons

01:04:54,119 --> 01:04:59,020
you know some of these some of this

01:04:56,830 --> 01:05:01,839
hardware has pretty limited lifetimes

01:04:59,020 --> 01:05:02,950
and the teams are busy they get it done

01:05:01,839 --> 01:05:06,430
and then they move on to the next

01:05:02,950 --> 01:05:09,099
project and culturally if if you're not

01:05:06,430 --> 01:05:13,420
just working upstream it's really hard

01:05:09,099 --> 01:05:15,310
to retrofit it upstream and there's

01:05:13,420 --> 01:05:19,810
there's good reasons to work upstream as

01:05:15,310 --> 01:05:21,820
we in this room know and but there's

01:05:19,810 --> 01:05:23,980
also IP reasons and cultural reasons why

01:05:21,820 --> 01:05:27,550
it isn't happening yet but we do see a

01:05:23,980 --> 01:05:29,400
few cases where the code is getting

01:05:27,550 --> 01:05:33,060
upstream and notably right now we have

01:05:29,400 --> 01:05:35,910
the SEM 845 code from Qualcomm is is

01:05:33,060 --> 01:05:39,510
being merged upstream and that could

01:05:35,910 --> 01:05:42,450
enable there to be some phone form form

01:05:39,510 --> 01:05:44,430
factor devices that maintain errs

01:05:42,450 --> 01:05:47,580
upstream will eventually be able to use

01:05:44,430 --> 01:05:49,200
and I expect to get there is going to is

01:05:47,580 --> 01:05:52,110
going to be with the help of a bunch of

01:05:49,200 --> 01:05:56,270
people in this room to help support that

01:05:52,110 --> 01:05:59,190
and test it and help get the full set of

01:05:56,270 --> 01:06:03,210
features and drivers upstream where it

01:05:59,190 --> 01:06:04,860
can be used with upstream code so this

01:06:03,210 --> 01:06:08,220
is my except so I think that's sort of

01:06:04,860 --> 01:06:11,070
the the silver lining and the exception

01:06:08,220 --> 01:06:12,390
to the all the initial statement that

01:06:11,070 --> 01:06:14,550
all kernels are going to be at least two

01:06:12,390 --> 01:06:16,530
years old I think you know we have some

01:06:14,550 --> 01:06:19,440
of these cases where at least we could

01:06:16,530 --> 01:06:22,070
have a few devices and then maybe in the

01:06:19,440 --> 01:06:24,420
distant future we can get to where SOC

01:06:22,070 --> 01:06:26,940
development is being done upstream to

01:06:24,420 --> 01:06:28,820
but that's a long road and a difficult

01:06:26,940 --> 01:06:32,310
one

01:06:28,820 --> 01:06:34,830
going back to this picture one thing

01:06:32,310 --> 01:06:39,180
you'll notice is that the arrow for the

01:06:34,830 --> 01:06:41,460
LTS kernel ends very early so so that in

01:06:39,180 --> 01:06:43,740
you know recent pretty recently we were

01:06:41,460 --> 01:06:47,790
in a world where by the time we get

01:06:43,740 --> 01:06:50,880
around to shipping a device the kernel

01:06:47,790 --> 01:06:53,550
that it's based on has only a few months

01:06:50,880 --> 01:06:55,620
left of its support lifetime and so when

01:06:53,550 --> 01:06:57,600
that support lifetime ends then Gregg

01:06:55,620 --> 01:07:00,630
stops taking the critical fixes and

01:06:57,600 --> 01:07:03,630
bringing them in and and that flow of

01:07:00,630 --> 01:07:06,420
patches downstream to the device gets

01:07:03,630 --> 01:07:08,370
cut off and we recognize this was a big

01:07:06,420 --> 01:07:10,290
issue when we were changing to the to

01:07:08,370 --> 01:07:13,050
this new model and this was another

01:07:10,290 --> 01:07:15,210
thing that was a motivator for us to get

01:07:13,050 --> 01:07:17,450
involved with Lennar oh because we've

01:07:15,210 --> 01:07:20,880
gotten an enormous amount of help to

01:07:17,450 --> 01:07:25,200
make it possible to extend that LTS out

01:07:20,880 --> 01:07:29,550
to six years and so Greg K H agreed to

01:07:25,200 --> 01:07:32,070
do a six year of experimental LTS

01:07:29,550 --> 01:07:34,500
support for four four and iliyan

01:07:32,070 --> 01:07:38,010
announced that at his keynote last year

01:07:34,500 --> 01:07:40,380
and in general went really well it was

01:07:38,010 --> 01:07:42,150
experimental though and so we got it was

01:07:40,380 --> 01:07:42,850
kind of funny during during this last

01:07:42,150 --> 01:07:45,910
year

01:07:42,850 --> 01:07:48,790
we'd have a lot of SOC vendors coming to

01:07:45,910 --> 01:07:51,700
us and saying well okay for four of the

01:07:48,790 --> 01:07:53,950
six year lifetime but for nine is only a

01:07:51,700 --> 01:07:56,500
two-year lifetime so it looks like I get

01:07:53,950 --> 01:07:58,810
a better support if I if I shipped with

01:07:56,500 --> 01:08:02,680
four four instead of four nine let alone

01:07:58,810 --> 01:08:04,330
four 14 and so this is sort of getting

01:08:02,680 --> 01:08:06,130
us into we have this sort of difficult

01:08:04,330 --> 01:08:09,460
dance right now where Greg doesn't want

01:08:06,130 --> 01:08:11,410
to sign up for supporting six years for

01:08:09,460 --> 01:08:12,940
everything until he sees that it's

01:08:11,410 --> 01:08:16,000
actually working and people are actually

01:08:12,940 --> 01:08:17,650
using it and so he wants to see that

01:08:16,000 --> 01:08:20,260
when he picks up a four-four based

01:08:17,650 --> 01:08:28,180
device that it's running a recent four

01:08:20,260 --> 01:08:30,339
four not unrealistic cess that he

01:08:28,180 --> 01:08:35,140
recently announced okay four nine is now

01:08:30,339 --> 01:08:36,970
a six year LTS and if if it's a success

01:08:35,140 --> 01:08:39,339
he'll do the same with four fourteen and

01:08:36,970 --> 01:08:42,070
if it's enough of a success that's just

01:08:39,339 --> 01:08:43,660
going to become the model but until then

01:08:42,070 --> 01:08:45,190
we're gonna have Russell right now we

01:08:43,660 --> 01:08:47,230
have people coming to us and saying okay

01:08:45,190 --> 01:08:49,270
I don't want to use 414 it's only got a

01:08:47,230 --> 01:08:53,620
two year support I want to use four nine

01:08:49,270 --> 01:08:55,450
instead and and so if anyone is asking

01:08:53,620 --> 01:08:58,839
you that tell them they should use the

01:08:55,450 --> 01:09:00,700
latest one that they can and and it's

01:08:58,839 --> 01:09:02,770
going to get a six year lifetime

01:09:00,700 --> 01:09:04,930
assuming people are actually using these

01:09:02,770 --> 01:09:07,390
lifetimes and if they're not using it

01:09:04,930 --> 01:09:09,280
he's gonna stop so there was a while

01:09:07,390 --> 01:09:11,560
during the six year LTS where what we

01:09:09,280 --> 01:09:14,050
saw where the patches were merging down

01:09:11,560 --> 01:09:15,339
to that so see Colonel level but they

01:09:14,050 --> 01:09:18,010
were never going out the door on a

01:09:15,339 --> 01:09:22,630
device and so this was a little

01:09:18,010 --> 01:09:23,890
worrisome but things are getting of

01:09:22,630 --> 01:09:26,380
things are getting a little bit better

01:09:23,890 --> 01:09:29,890
so if we look at a recent device this is

01:09:26,380 --> 01:09:33,490
our pixel to it initial initially

01:09:29,890 --> 01:09:35,980
shipped on a four 456 base and each of

01:09:33,490 --> 01:09:40,600
the major releases that we've done the

01:09:35,980 --> 01:09:45,000
mr1 and the PI release it got an update

01:09:40,600 --> 01:09:47,920
of the LTSs so this this is Greg's I do

01:09:45,000 --> 01:09:49,240
working not quite as well as he liked

01:09:47,920 --> 01:09:51,570
because you can see there's a six-month

01:09:49,240 --> 01:09:53,680
lag there for the last one which was

01:09:51,570 --> 01:09:55,099
because we had some internal issues

01:09:53,680 --> 01:09:56,420
until they froze it a little early

01:09:55,099 --> 01:09:59,810
than we thought that they were going to

01:09:56,420 --> 01:10:04,040
for pixel but when when we have a

01:09:59,810 --> 01:10:05,540
another another release of Pi so we're

01:10:04,040 --> 01:10:07,400
gonna have these we're not going to have

01:10:05,540 --> 01:10:10,280
any major releases or em ours but we are

01:10:07,400 --> 01:10:11,869
gonna have some maintenance some some I

01:10:10,280 --> 01:10:13,280
don't even remember what they're calling

01:10:11,869 --> 01:10:20,659
but periodically it is going to get

01:10:13,280 --> 01:10:23,389
updated at the kernel level but this is

01:10:20,659 --> 01:10:25,820
this is greg noting in the the same

01:10:23,389 --> 01:10:28,579
article vendors are coming around to

01:10:25,820 --> 01:10:30,679
using the LTS updates but there's a new

01:10:28,579 --> 01:10:32,119
problem in the former carriers it isn't

01:10:30,679 --> 01:10:33,710
really a new problem but it's a new

01:10:32,119 --> 01:10:36,320
problem to us because we never were

01:10:33,710 --> 01:10:38,810
doing this merge down before a new

01:10:36,320 --> 01:10:40,400
problem in the form of carriers who are

01:10:38,810 --> 01:10:44,329
unwilling to ship those updates

01:10:40,400 --> 01:10:46,010
so the carrier's decide whether they're

01:10:44,329 --> 01:10:48,380
gonna support your device on their

01:10:46,010 --> 01:10:50,900
network stuff you know the different

01:10:48,380 --> 01:10:53,960
carriers behave differently but many of

01:10:50,900 --> 01:10:55,969
the carrier's look at our security bold

01:10:53,960 --> 01:10:57,889
monthly security bulletins and they say

01:10:55,969 --> 01:10:59,570
okay for security release where you're

01:10:57,889 --> 01:11:03,290
not gonna go through full qualification

01:10:59,570 --> 01:11:05,510
will let you ship those patches that are

01:11:03,290 --> 01:11:08,329
specifically cited in the security

01:11:05,510 --> 01:11:11,150
bulletin but that's all because more

01:11:08,329 --> 01:11:13,010
patches just means more bugs and and we

01:11:11,150 --> 01:11:15,770
don't want to take them and so we're

01:11:13,010 --> 01:11:17,869
still in a world where for the most part

01:11:15,770 --> 01:11:21,170
the security patches that go out monthly

01:11:17,869 --> 01:11:24,710
are just including those few patches

01:11:21,170 --> 01:11:27,889
that are cited in the android security

01:11:24,710 --> 01:11:30,349
bulletins and therefore don't contain a

01:11:27,889 --> 01:11:33,199
bunch of fixes that are real and in fact

01:11:30,349 --> 01:11:34,909
on just about a month ago there was

01:11:33,199 --> 01:11:39,139
another exploit that was observed in the

01:11:34,909 --> 01:11:41,540
field for for pixel they got lucky

01:11:39,139 --> 01:11:43,340
because we had just updated the kernel

01:11:41,540 --> 01:11:46,369
but for a bunch of other vendors who

01:11:43,340 --> 01:11:49,489
hadn't had that yet they got they were

01:11:46,369 --> 01:11:51,889
hit with this and if if the if the

01:11:49,489 --> 01:11:54,500
security if the security releases

01:11:51,889 --> 01:11:56,960
allowed us to actually ship the full LTS

01:11:54,500 --> 01:11:58,730
then a bunch of these exploits would

01:11:56,960 --> 01:12:01,940
just not have happened because as I said

01:11:58,730 --> 01:12:03,770
at you know the the maintenance at the

01:12:01,940 --> 01:12:05,599
LTS level they're getting a bunch of

01:12:03,770 --> 01:12:07,610
fixes a lot of them are fixes for

01:12:05,599 --> 01:12:08,550
serious security problems but they're

01:12:07,610 --> 01:12:10,139
not marked as

01:12:08,550 --> 01:12:12,389
purity patches so you can't go look at

01:12:10,139 --> 01:12:14,250
the log and say okay there's a security

01:12:12,389 --> 01:12:16,889
patch and there's a security patch you

01:12:14,250 --> 01:12:23,040
don't know until you get burned by not

01:12:16,889 --> 01:12:27,290
having it that it is and so we have this

01:12:23,040 --> 01:12:31,139
goal and we're working with carriers to

01:12:27,290 --> 01:12:33,000
to let the security updates include all

01:12:31,139 --> 01:12:35,670
the LTSs since then so that we can keep

01:12:33,000 --> 01:12:37,290
everybody up to date who's willing to do

01:12:35,670 --> 01:12:39,360
it it also takes a lot of effort on the

01:12:37,290 --> 01:12:41,250
part of the vendor and the OEM so it's

01:12:39,360 --> 01:12:44,639
it's not just us but we're trying to

01:12:41,250 --> 01:12:46,650
sort of smooth the road so that anyone

01:12:44,639 --> 01:12:50,219
who wants to update with everything

01:12:46,650 --> 01:12:51,900
that's really needed can we've been

01:12:50,219 --> 01:12:53,909
adding a lot of tests and again this is

01:12:51,900 --> 01:12:59,460
in collaboration with with Lennar Oh

01:12:53,909 --> 01:13:02,159
adding a bunch of tests we're testing in

01:12:59,460 --> 01:13:04,559
in Elk ft we're testing the upstream the

01:13:02,159 --> 01:13:07,610
LTS was release is the Android releases

01:13:04,559 --> 01:13:11,610
we're trying to test through the whole

01:13:07,610 --> 01:13:13,980
the whole sequence and the SOC vendors

01:13:11,610 --> 01:13:15,300
are also testing when they take Android

01:13:13,980 --> 01:13:17,670
releases so there's a lot of testing

01:13:15,300 --> 01:13:20,610
going on we're adding tests to ensure

01:13:17,670 --> 01:13:22,530
and give more confidence that nothing is

01:13:20,610 --> 01:13:24,480
it is breaking but the Linux community

01:13:22,530 --> 01:13:25,409
makes a pretty good guarantee that

01:13:24,480 --> 01:13:28,170
they're not gonna do anything that

01:13:25,409 --> 01:13:33,210
breaks ABI for user space for

01:13:28,170 --> 01:13:36,119
applications and so on and we do have

01:13:33,210 --> 01:13:37,710
some carriers where they're getting

01:13:36,119 --> 01:13:39,119
close I think we even have one case

01:13:37,710 --> 01:13:41,250
where they've they've kind of okayed

01:13:39,119 --> 01:13:44,659
yeah we could go for that and so we're

01:13:41,250 --> 01:13:44,659
we're making progress here

01:13:45,360 --> 01:13:49,949
okay so circling back to project treble

01:13:47,909 --> 01:13:53,849
this is a slide that iliyan showed last

01:13:49,949 --> 01:13:56,659
year where prior to Android Oreo we had

01:13:53,849 --> 01:14:02,369
this sort of messy relationship between

01:13:56,659 --> 01:14:04,800
house and extensions to ASP and and this

01:14:02,369 --> 01:14:08,489
made it very very difficult to update

01:14:04,800 --> 01:14:10,290
when we get a new release and he shows

01:14:08,489 --> 01:14:12,960
this beautiful picture on the lower

01:14:10,290 --> 01:14:14,610
right of how Oreo has cleaned all that

01:14:12,960 --> 01:14:16,230
up and

01:14:14,610 --> 01:14:19,020
and of course it's easy to draw straight

01:14:16,230 --> 01:14:20,490
lines and it's not always as neat as it

01:14:19,020 --> 01:14:23,760
seems but a lot of things are a lot

01:14:20,490 --> 01:14:26,310
cleaner so for example one thing that

01:14:23,760 --> 01:14:29,100
has changed on the kernel side is if you

01:14:26,310 --> 01:14:32,460
look at how in Oreo and later we have

01:14:29,100 --> 01:14:34,410
the kernel we have a kernel image and

01:14:32,460 --> 01:14:36,840
that is on one partition and we have

01:14:34,410 --> 01:14:39,420
kernel modules which are on a different

01:14:36,840 --> 01:14:41,520
partition and the idea and we're not

01:14:39,420 --> 01:14:43,140
doing this yet but the idea is that we

01:14:41,520 --> 01:14:46,200
can eventually get to a world where

01:14:43,140 --> 01:14:48,720
where the different owners of components

01:14:46,200 --> 01:14:51,690
can update their pieces separately so

01:14:48,720 --> 01:14:53,280
that when a new dessert release comes

01:14:51,690 --> 01:14:55,800
out the system partition can be updated

01:14:53,280 --> 01:14:57,420
when security when there's kernel

01:14:55,800 --> 01:14:59,550
security issues of the kernel can be

01:14:57,420 --> 01:15:02,370
updated but maybe with that with leaving

01:14:59,550 --> 01:15:03,660
the modules to be updated by the OEM if

01:15:02,370 --> 01:15:05,760
those need to be updated

01:15:03,660 --> 01:15:07,920
we are not at that point yet and in fact

01:15:05,760 --> 01:15:11,460
there's some more separation that has to

01:15:07,920 --> 01:15:14,730
be done to get there in particular the

01:15:11,460 --> 01:15:18,750
vendor partition has has like drivers

01:15:14,730 --> 01:15:20,280
OEM modules we envision eventually

01:15:18,750 --> 01:15:23,430
getting to and this may take a really

01:15:20,280 --> 01:15:25,950
long time and a lot of work getting to

01:15:23,430 --> 01:15:29,100
where we have kind of a generic kernel

01:15:25,950 --> 01:15:32,670
image and then SOC support as a separate

01:15:29,100 --> 01:15:36,120
thing where kernel modules that are for

01:15:32,670 --> 01:15:39,450
support in SOC are in one place

01:15:36,120 --> 01:15:40,910
updatable by that vendor and then kernel

01:15:39,450 --> 01:15:45,030
modules for the board or somewhere else

01:15:40,910 --> 01:15:47,070
updatable by that vendor and so we want

01:15:45,030 --> 01:15:48,960
to get to a world where where we've

01:15:47,070 --> 01:15:51,690
reduced the spaghetti 'no Sal ittle bit

01:15:48,960 --> 01:15:53,940
more and partitioned it into places

01:15:51,690 --> 01:15:57,060
where updates are much easier much more

01:15:53,940 --> 01:16:00,660
complex to develop and to deploy and to

01:15:57,060 --> 01:16:03,470
test but there are some other big issues

01:16:00,660 --> 01:16:05,220
that get in the way aside from just

01:16:03,470 --> 01:16:08,070
separating at the hard work of

01:16:05,220 --> 01:16:10,350
separating it and the hard work of

01:16:08,070 --> 01:16:12,870
figuring out what is really the generic

01:16:10,350 --> 01:16:16,770
kernel image I suspect we'll start out

01:16:12,870 --> 01:16:18,090
with kernel images that are per SOC

01:16:16,770 --> 01:16:19,800
family or something like that because

01:16:18,090 --> 01:16:22,650
right now a lot of that SOC enablement

01:16:19,800 --> 01:16:24,150
happens directly on the core pieces of

01:16:22,650 --> 01:16:26,310
the kernel

01:16:24,150 --> 01:16:27,930
we need to work out exactly how we get

01:16:26,310 --> 01:16:29,070
there and there's a long way to go but

01:16:27,930 --> 01:16:33,020
there's also some fundamental issues

01:16:29,070 --> 01:16:36,180
before we can update things separately

01:16:33,020 --> 01:16:38,550
not the least of which is the fact that

01:16:36,180 --> 01:16:42,240
the kernel doesn't really support any

01:16:38,550 --> 01:16:46,410
notion of in kernel ABI contestability

01:16:42,240 --> 01:16:48,210
so if if there's any update on a kernel

01:16:46,410 --> 01:16:52,650
they make no guarantees so this includes

01:16:48,210 --> 01:16:54,570
within an LTS so this is an article that

01:16:52,650 --> 01:16:58,260
Greg cage wrote on the right you can go

01:16:54,570 --> 01:17:00,390
read it but basically the name of the

01:16:58,260 --> 01:17:01,970
the name of the URL you can't read it

01:17:00,390 --> 01:17:05,880
there but it's called stable API

01:17:01,970 --> 01:17:08,820
nonsense and this is great case writing

01:17:05,880 --> 01:17:12,390
about why there is no internal stability

01:17:08,820 --> 01:17:14,520
if you take an LTS merge it's quite

01:17:12,390 --> 01:17:16,590
possible that your modules will all be

01:17:14,520 --> 01:17:19,260
in you know incompatible now things

01:17:16,590 --> 01:17:20,520
things can change now of course we've

01:17:19,260 --> 01:17:22,980
been talking to him and even in the

01:17:20,520 --> 01:17:25,830
article he points out that it could be

01:17:22,980 --> 01:17:28,050
managed under very narrow circumstances

01:17:25,830 --> 01:17:31,290
unfortunately those and fortunately

01:17:28,050 --> 01:17:34,410
those narrow circumstances do apply to

01:17:31,290 --> 01:17:37,790
our case where if it's the same

01:17:34,410 --> 01:17:41,340
architecture same toolchain same config

01:17:37,790 --> 01:17:43,710
then it could be managed in a way to

01:17:41,340 --> 01:17:45,540
provide ABI stability for drivers and if

01:17:43,710 --> 01:17:47,250
we're ever going to be able to update

01:17:45,540 --> 01:17:50,340
the kernel separately from the modules

01:17:47,250 --> 01:17:52,560
we have to be able to guarantee this

01:17:50,340 --> 01:17:54,030
somehow because the kernel can be

01:17:52,560 --> 01:17:56,520
updated the modules are still the old

01:17:54,030 --> 01:17:59,840
ones if there's some something that

01:17:56,520 --> 01:18:02,970
changes some structure the changes or an

01:17:59,840 --> 01:18:05,160
exported function that changes then that

01:18:02,970 --> 01:18:07,830
could be a problem for that module so

01:18:05,160 --> 01:18:10,470
one of the big areas that we're working

01:18:07,830 --> 01:18:13,850
on sort of going forward to prepare for

01:18:10,470 --> 01:18:17,640
this day that's a ways in the future is

01:18:13,850 --> 01:18:21,690
we're working with with Greg on process

01:18:17,640 --> 01:18:26,220
things and we're working on ABI tests to

01:18:21,690 --> 01:18:27,480
test whenever there's a LTS update what

01:18:26,220 --> 01:18:30,690
things have changed what things

01:18:27,480 --> 01:18:34,230
potentially have broken so for example

01:18:30,690 --> 01:18:36,210
here is the output of a test this is

01:18:34,230 --> 01:18:38,520
just one one part of that out

01:18:36,210 --> 01:18:41,280
but it's showing when we when we went

01:18:38,520 --> 01:18:44,430
from four four ninety four two four four

01:18:41,280 --> 01:18:47,070
ninety five somebody changed the

01:18:44,430 --> 01:18:49,140
definition of the key struck key and

01:18:47,070 --> 01:18:53,570
they added an element in the middle of

01:18:49,140 --> 01:18:55,830
it and and so the tool flagged this

01:18:53,570 --> 01:19:00,469
here's the here's the structure that

01:18:55,830 --> 01:19:03,719
changed and then it listed the 3410

01:19:00,469 --> 01:19:08,370
interfaces that would be a broken in the

01:19:03,719 --> 01:19:10,020
ABI because of that change and so what

01:19:08,370 --> 01:19:14,910
we're planning to sort of work out in

01:19:10,020 --> 01:19:18,060
this with with Greg's help is is that

01:19:14,910 --> 01:19:20,460
he'll run these tests on the when he's

01:19:18,060 --> 01:19:22,080
doing an update and if it's an easy fix

01:19:20,460 --> 01:19:24,360
if it's if if there's something he can

01:19:22,080 --> 01:19:26,310
fix very easily in this case it might be

01:19:24,360 --> 01:19:28,380
fixable we'd have to look at the details

01:19:26,310 --> 01:19:29,910
because it might not be but it might be

01:19:28,380 --> 01:19:33,210
fixable by just moving that new

01:19:29,910 --> 01:19:34,650
structure element to the end might I

01:19:33,210 --> 01:19:38,010
don't know for sure cuz I didn't look at

01:19:34,650 --> 01:19:39,960
this one and if that's true then he

01:19:38,010 --> 01:19:43,260
would he agreed that he would be willing

01:19:39,960 --> 01:19:47,580
to take in a fix for that at the LTS

01:19:43,260 --> 01:19:49,860
level another option then would be it

01:19:47,580 --> 01:19:52,500
flows into common and we could fix some

01:19:49,860 --> 01:19:54,570
of these ABI issues at common but

01:19:52,500 --> 01:19:56,430
there's also going to be some ABI issues

01:19:54,570 --> 01:19:59,310
that we can't fix so for example if we

01:19:56,430 --> 01:20:02,640
have another another event like meltdown

01:19:59,310 --> 01:20:04,530
or Spector there's no way that that can

01:20:02,640 --> 01:20:06,480
be fixed without breaking things and so

01:20:04,530 --> 01:20:08,790
we're always going to have some cases

01:20:06,480 --> 01:20:10,980
where it has to be a synchronous update

01:20:08,790 --> 01:20:15,180
of all the all the pieces of the kernel

01:20:10,980 --> 01:20:17,130
so we're just resigned to that but we're

01:20:15,180 --> 01:20:21,750
gonna try to get to where most of the

01:20:17,130 --> 01:20:23,070
time we don't have to another approach

01:20:21,750 --> 01:20:25,800
that we're taking and again this is a

01:20:23,070 --> 01:20:28,710
pretty long-term approach is right now

01:20:25,800 --> 01:20:32,640
there's there's over 30,000 exported

01:20:28,710 --> 01:20:34,170
interfaces so in if you write a module

01:20:32,640 --> 01:20:35,790
that's external the kernel you can only

01:20:34,170 --> 01:20:37,440
use the interfaces that have been

01:20:35,790 --> 01:20:38,940
exported so you can't just call any

01:20:37,440 --> 01:20:41,370
function in the kernel they have to be

01:20:38,940 --> 01:20:43,350
have to have been explicitly exported

01:20:41,370 --> 01:20:45,480
but there's a whole bunch of them that

01:20:43,350 --> 01:20:48,030
have been exported but they're really

01:20:45,480 --> 01:20:49,620
not for general use they're really for

01:20:48,030 --> 01:20:54,030
you maybe two modules who

01:20:49,620 --> 01:20:57,210
and on each other or or you know very

01:20:54,030 --> 01:20:59,160
specific uses within a subsystem but

01:20:57,210 --> 01:21:01,700
right now there's no namespace control

01:20:59,160 --> 01:21:04,800
so anybody with a module can basically

01:21:01,700 --> 01:21:09,540
call any of the exported functions and

01:21:04,800 --> 01:21:11,130
often they do and so we're trying to

01:21:09,540 --> 01:21:13,710
help the kernel community get a handle

01:21:11,130 --> 01:21:16,820
on that and and we submitted a patch

01:21:13,710 --> 01:21:19,740
that's actually gotten pretty good

01:21:16,820 --> 01:21:23,610
feedback so far which introduces a

01:21:19,740 --> 01:21:25,770
notion of of named spaces for exported

01:21:23,610 --> 01:21:29,750
functions so that you could for example

01:21:25,770 --> 01:21:33,570
within the USB framework tag it as USB

01:21:29,750 --> 01:21:36,480
exported and then in the module you

01:21:33,570 --> 01:21:39,210
would say import USB and you can so you

01:21:36,480 --> 01:21:40,830
can declare which which functions you're

01:21:39,210 --> 01:21:44,490
actually depending on and this would

01:21:40,830 --> 01:21:47,520
allow us an Android to you know

01:21:44,490 --> 01:21:49,500
basically disallow modules through VTS

01:21:47,520 --> 01:21:51,030
testing and so on that are depending on

01:21:49,500 --> 01:21:54,390
kernel things they shouldn't depend on

01:21:51,030 --> 01:21:58,920
and reduce the number of potential ABI

01:21:54,390 --> 01:22:01,710
breakages by by reducing the namespace

01:21:58,920 --> 01:22:03,120
of modules they're using so this is a

01:22:01,710 --> 01:22:04,380
very long-term thing this is something

01:22:03,120 --> 01:22:06,930
we're working with the kernel community

01:22:04,380 --> 01:22:10,740
with it's going to be a topic at Linux

01:22:06,930 --> 01:22:13,350
plumbers next month but this is sort of

01:22:10,740 --> 01:22:15,360
part of our plan to to sort of

01:22:13,350 --> 01:22:20,040
straighten out some of these kernel

01:22:15,360 --> 01:22:23,100
problems so for our team the things that

01:22:20,040 --> 01:22:26,280
we're focused on first of all we've

01:22:23,100 --> 01:22:29,010
changed our way of managing the the

01:22:26,280 --> 01:22:32,070
android common kernel we used to be

01:22:29,010 --> 01:22:33,660
pretty permissive on people submitting

01:22:32,070 --> 01:22:36,780
patches and just adding functionality

01:22:33,660 --> 01:22:38,430
and that has led to what I described

01:22:36,780 --> 01:22:40,500
earlier is our technical depth we've got

01:22:38,430 --> 01:22:42,120
just a bunch of patches that we have to

01:22:40,500 --> 01:22:44,730
support now because they're there and

01:22:42,120 --> 01:22:46,260
and people rely on them but maybe

01:22:44,730 --> 01:22:50,460
they're not appropriate to go upstream

01:22:46,260 --> 01:22:52,020
and so we're working on that we're also

01:22:50,460 --> 01:22:54,090
working on that technical debt by

01:22:52,020 --> 01:22:56,670
dropping the patches that really we

01:22:54,090 --> 01:22:58,920
don't need any more by reimplemented

01:22:56,670 --> 01:23:01,140
some of them in ways that are that can

01:22:58,920 --> 01:23:02,110
either be sent upstream or it can be

01:23:01,140 --> 01:23:06,760
re-implemented

01:23:02,110 --> 01:23:09,150
Android user space as I mentioned

01:23:06,760 --> 01:23:12,610
earlier we're working with vendors on

01:23:09,150 --> 01:23:14,200
accepting LTS a part of security patches

01:23:12,610 --> 01:23:16,120
so that we can keep everything up to

01:23:14,200 --> 01:23:19,810
date and more solid with regards to

01:23:16,120 --> 01:23:22,810
potential security exploits and we're

01:23:19,810 --> 01:23:26,500
improving our tests kind of all around

01:23:22,810 --> 01:23:29,050
improving our tests just for acceptance

01:23:26,500 --> 01:23:31,480
of LTSs and making sure that the kernels

01:23:29,050 --> 01:23:34,330
are solid but then we're also working

01:23:31,480 --> 01:23:36,220
towards that at that time where we can

01:23:34,330 --> 01:23:39,730
do separate updates so we're doing lots

01:23:36,220 --> 01:23:42,100
of ABI tests and and and then we're

01:23:39,730 --> 01:23:44,680
starting refer to at the very beginning

01:23:42,100 --> 01:23:47,980
talking to SOC vendors about this

01:23:44,680 --> 01:23:51,070
generic kernel interface concept and how

01:23:47,980 --> 01:23:53,290
we can so that's sort of a long-term

01:23:51,070 --> 01:24:03,790
thing that will probably be reporting on

01:23:53,290 --> 01:24:05,170
in a few years so that's it Todd thank

01:24:03,790 --> 01:24:06,850
you so much for coming Eric maybe we

01:24:05,170 --> 01:24:10,060
could take this one or two questions

01:24:06,850 --> 01:24:11,350
anybody have a question that was all

01:24:10,060 --> 01:24:20,290
straightforward forever all right okay

01:24:11,350 --> 01:24:22,780
mr. Gallow how can the operators be in

01:24:20,290 --> 01:24:25,870
the middle between the upgrades that my

01:24:22,780 --> 01:24:29,110
phone can download from the Google Play

01:24:25,870 --> 01:24:31,330
Store that was why it's a wire Harry

01:24:29,110 --> 01:24:32,890
why do we care about carriers yes not

01:24:31,330 --> 01:24:35,380
the question yes

01:24:32,890 --> 01:24:37,330
it's well in the u.s. it may not be true

01:24:35,380 --> 01:24:39,430
everywhere but in the u.s. they exerts a

01:24:37,330 --> 01:24:43,570
lot of control over who can be on their

01:24:39,430 --> 01:24:45,700
networks and in particular you know many

01:24:43,570 --> 01:24:48,730
of the device sales most of the pixel

01:24:45,700 --> 01:24:50,710
sales are through Verizon most of device

01:24:48,730 --> 01:24:54,310
sales in general Samsung and Apple are

01:24:50,710 --> 01:24:56,020
through the carriers and so it's true

01:24:54,310 --> 01:24:57,640
that if you have your own device and you

01:24:56,020 --> 01:24:59,590
want to put your own kernels I mean I my

01:24:57,640 --> 01:25:01,300
device has my own kernel on it so in

01:24:59,590 --> 01:25:02,620
that sense they can't enforce it they

01:25:01,300 --> 01:25:07,240
don't shut me down because I don't have

01:25:02,620 --> 01:25:09,220
it but since since they're in control of

01:25:07,240 --> 01:25:11,860
the devices they exert they basically

01:25:09,220 --> 01:25:13,780
say okay I can't sell these devices I'm

01:25:11,860 --> 01:25:16,000
not approving this device

01:25:13,780 --> 01:25:18,910
unless and they exert their control that

01:25:16,000 --> 01:25:21,060
way so where it's the main sales channel

01:25:18,910 --> 01:25:24,490
the main conduit between the Prada

01:25:21,060 --> 01:25:27,640
provider and the customer they they can

01:25:24,490 --> 01:25:28,840
say this needs more qualification I'm

01:25:27,640 --> 01:25:30,700
this needs to go through a full

01:25:28,840 --> 01:25:32,680
certification which is a big lengthy

01:25:30,700 --> 01:25:34,720
process that we can't do for monthly

01:25:32,680 --> 01:25:37,630
security patches we could consider for

01:25:34,720 --> 01:25:41,860
kind of a quarterly quarterly release

01:25:37,630 --> 01:25:44,240
but not monthly Todd thank you so much

01:25:41,860 --> 01:25:49,920
for really interesting stuff you bet

01:25:44,240 --> 01:25:52,600
[Applause]

01:25:49,920 --> 01:25:54,070
okay so demo fright is at noon it's on

01:25:52,600 --> 01:25:55,420
the second floor where lunch gets served

01:25:54,070 --> 01:25:57,820
it's only a couple of hours from now

01:25:55,420 --> 01:25:59,680
we're really happy that everyone's here

01:25:57,820 --> 01:26:01,090
this week we hope you had a really good

01:25:59,680 --> 01:26:03,100
week this week we'll close it out

01:26:01,090 --> 01:26:05,680
at the end of demo Friday we'll see you

01:26:03,100 --> 01:26:07,450
down there at noon oh one more footnote

01:26:05,680 --> 01:26:09,820
about auto air so Auto where's a new

01:26:07,450 --> 01:26:12,300
project inland ro and we're looking for

01:26:09,820 --> 01:26:14,530
member participation so if that if if

01:26:12,300 --> 01:26:16,270
Carlson's presentation looked

01:26:14,530 --> 01:26:17,710
interesting please come and talk to

01:26:16,270 --> 01:26:19,210
someone from Lennar oh if you think

01:26:17,710 --> 01:26:20,890
you'd be interesting and participating

01:26:19,210 --> 01:26:22,870
because we want to make sure auto where

01:26:20,890 --> 01:26:26,250
as an open-source project runs really

01:26:22,870 --> 01:26:26,250

YouTube URL: https://www.youtube.com/watch?v=zLvn8_P6JVk


