Title: LTD20-110 Enabling the Arm Morello Platform
Publication date: 2020-03-25
Playlist: Linaro Tech Days 2020
Description: 
	Description:
Arm has announced plans for a CHERI project to enable experimentation with a new Arm prototype security architecture. This presentation discusses how Arm will work with Linaro to provide software stacks to support planned development platforms. We provide a brief introduction to the scope and timelines for the work and discuss why the approach differs from the usual upstream mentality.

Session Speakers
Mark Nicholson - Senior Technology Manager : Arm OSS (Arm)


I'm the Technology Manager for Platforms Software in Armâ€™s Open Source engineering group. We assemble a range of open source software stacks, targeting virtual platforms and Arm test chips for different market segments and applications. These are designed to help enable customer projects and the software ecosystem. Previously I worked for many years in Arm's Application engineering group. 



You can find the presentation for this session on connect.linaro.org:
https://connect.linaro.org/resources/ltd20/ltd20-110/
Captions: 
	00:00:03,850 --> 00:00:13,000
so my name is mark Nicholson and I'm one

00:00:09,379 --> 00:00:15,920
of the technology managers in the arm

00:00:13,000 --> 00:00:20,779
central engineering open-source software

00:00:15,920 --> 00:00:27,590
team and we're going to talk about the

00:00:20,779 --> 00:00:32,480
arm morello platform so as per the title

00:00:27,590 --> 00:00:35,780
the primary intent of the talk is to

00:00:32,480 --> 00:00:37,940
cover what we're doing in terms of the

00:00:35,780 --> 00:00:42,649
provision of a platform and how we're

00:00:37,940 --> 00:00:45,050
going to support it with software it

00:00:42,649 --> 00:00:47,809
isn't a talk about the security

00:00:45,050 --> 00:00:51,489
architecture and the application of

00:00:47,809 --> 00:00:55,520
capabilities but hopefully there'll be

00:00:51,489 --> 00:00:59,000
future talks about about that so very

00:00:55,520 --> 00:01:04,759
briefly for people who don't already

00:00:59,000 --> 00:01:10,960
know Morello is a prototype architecture

00:01:04,759 --> 00:01:14,560
and it's designed to explore the idea of

00:01:10,960 --> 00:01:20,390
capabilities which are essentially

00:01:14,560 --> 00:01:24,530
pointers 128 bit pointers which have

00:01:20,390 --> 00:01:28,970
associated capabilities so the pointers

00:01:24,530 --> 00:01:31,640
can have combined with them restrictions

00:01:28,970 --> 00:01:34,990
on the allowable address range or the

00:01:31,640 --> 00:01:37,670
functionality and and and this

00:01:34,990 --> 00:01:40,549
restriction is supported by the hardware

00:01:37,670 --> 00:01:44,540
implementation and by the architecture

00:01:40,549 --> 00:01:48,470
and you can apply this in different ways

00:01:44,540 --> 00:01:52,880
across the software stack but one of the

00:01:48,470 --> 00:01:55,869
key ideas is that within a user space

00:01:52,880 --> 00:01:58,640
application you can implement

00:01:55,869 --> 00:02:02,509
fine-grained memory protection within a

00:01:58,640 --> 00:02:05,840
process using what we call the component

00:02:02,509 --> 00:02:09,290
and all this work it is based on

00:02:05,840 --> 00:02:12,340
research originally done at Cambridge

00:02:09,290 --> 00:02:14,209
University as part of the Cherry

00:02:12,340 --> 00:02:16,970
architecture

00:02:14,209 --> 00:02:20,599
so if you want to know more follow the

00:02:16,970 --> 00:02:23,420
link to the developer page so for the

00:02:20,599 --> 00:02:25,939
for the purpose of our talk important

00:02:23,420 --> 00:02:29,269
point Morello is a prototype

00:02:25,939 --> 00:02:32,629
architecture which means that you won't

00:02:29,269 --> 00:02:36,109
be able to license it in the normal way

00:02:32,629 --> 00:02:39,290
and build commercial product it's

00:02:36,109 --> 00:02:42,260
designed to inform the direction and the

00:02:39,290 --> 00:02:45,260
features of a future architecture and

00:02:42,260 --> 00:02:49,370
for software that means that we we won't

00:02:45,260 --> 00:02:53,090
be adopting our usual mindset of up

00:02:49,370 --> 00:02:55,909
streaming the support we provide that we

00:02:53,090 --> 00:02:57,650
will maintain the support that we're

00:02:55,909 --> 00:03:01,040
developing for the lifetime of the

00:02:57,650 --> 00:03:06,319
Morello project and there are two two

00:03:01,040 --> 00:03:08,329
platforms we're creating an F VP and a

00:03:06,319 --> 00:03:10,250
development board and we're going to

00:03:08,329 --> 00:03:12,590
talk about the work in the software

00:03:10,250 --> 00:03:16,220
stack we're doing to support that

00:03:12,590 --> 00:03:21,879
platform and all the work is government

00:03:16,220 --> 00:03:21,879
funded by the UK RI as part of a grant

00:03:22,419 --> 00:03:29,780
okay

00:03:24,669 --> 00:03:32,449
so here what I'm trying to do is is give

00:03:29,780 --> 00:03:35,780
a very high-level overview of the

00:03:32,449 --> 00:03:40,519
different work work streams we're

00:03:35,780 --> 00:03:43,989
looking at down the left-hand edge so in

00:03:40,519 --> 00:03:49,010
in terms of the the big platform

00:03:43,989 --> 00:03:53,239
milestones this year in October 2020 we

00:03:49,010 --> 00:03:57,139
have a our early initial release and

00:03:53,239 --> 00:04:00,040
that will target an F VP model and we'll

00:03:57,139 --> 00:04:07,750
talk about what an F VP model is later

00:04:00,040 --> 00:04:11,209
and in 2021 we should have some hardware

00:04:07,750 --> 00:04:13,879
so arm are developing a test ship and

00:04:11,209 --> 00:04:18,169
under development board implementing

00:04:13,879 --> 00:04:21,979
this prototype architecture so down the

00:04:18,169 --> 00:04:23,779
left-hand edge we have the general work

00:04:21,979 --> 00:04:26,840
streams that are going on so we have a

00:04:23,779 --> 00:04:30,380
general platform enable Minh

00:04:26,840 --> 00:04:33,860
work stream within arm so clearly for

00:04:30,380 --> 00:04:38,750
both platforms we need a a vanilla a

00:04:33,860 --> 00:04:42,410
arch 64 software stack port we need to

00:04:38,750 --> 00:04:45,669
be able to bring up an operating system

00:04:42,410 --> 00:04:49,550
and to have the relevant firmware ports

00:04:45,669 --> 00:04:52,220
to run on these two platforms and

00:04:49,550 --> 00:04:55,060
clearly as we get nearer to hardware

00:04:52,220 --> 00:05:01,070
there'll be a lot of work in the

00:04:55,060 --> 00:05:05,210
traditional fpga development flow and a

00:05:01,070 --> 00:05:08,210
lot of low-level bring up work so all

00:05:05,210 --> 00:05:10,820
that work really is not directly to do

00:05:08,210 --> 00:05:13,460
with the morello architecture and

00:05:10,820 --> 00:05:18,229
capabilities it's about bringing or per

00:05:13,460 --> 00:05:20,720
generic new platform the next work

00:05:18,229 --> 00:05:23,870
stream and and we'll talk about beads

00:05:20,720 --> 00:05:26,930
later on in more detail it is where we

00:05:23,870 --> 00:05:31,130
begin the morello architecture

00:05:26,930 --> 00:05:34,010
enablement work now arm are not

00:05:31,130 --> 00:05:37,250
intending to completely solve the

00:05:34,010 --> 00:05:39,580
problem or deliver a solution we're

00:05:37,250 --> 00:05:43,400
hoping to be part of a wider ecosystem

00:05:39,580 --> 00:05:46,940
effort here and the initial work we are

00:05:43,400 --> 00:05:50,450
doing is focused on on enabling people

00:05:46,940 --> 00:05:53,500
to to bootstrap their own research so

00:05:50,450 --> 00:05:57,470
we're looking at work on a tool chain

00:05:53,500 --> 00:06:02,000
libraries kernel development and some

00:05:57,470 --> 00:06:06,650
limited user space examples of the

00:06:02,000 --> 00:06:08,030
application of Lennar o of capabilities

00:06:06,650 --> 00:06:12,550
where did Lenore o come from

00:06:08,030 --> 00:06:14,990
so Lonardo comes now so want one of the

00:06:12,550 --> 00:06:16,700
important things is how we deliver the

00:06:14,990 --> 00:06:20,780
software and we're going to be working

00:06:16,700 --> 00:06:24,639
with Lennar o to work out an

00:06:20,780 --> 00:06:28,789
infrastructure to provision and maintain

00:06:24,639 --> 00:06:34,570
all these different aspects that were

00:06:28,789 --> 00:06:38,060
working on okay

00:06:34,570 --> 00:06:43,480
so let's talk in a little bit more

00:06:38,060 --> 00:06:48,800
detail about the morello platform fvp so

00:06:43,480 --> 00:06:53,060
fep is a fixed virtual platform and this

00:06:48,800 --> 00:06:57,380
is a model of a platform develop using a

00:06:53,060 --> 00:07:02,560
proprietary tor chain from arm called

00:06:57,380 --> 00:07:07,100
fast models and this will give you a

00:07:02,560 --> 00:07:12,500
relatively fast a simulation of the

00:07:07,100 --> 00:07:15,740
morello hardware and inside arm we very

00:07:12,500 --> 00:07:19,550
frequently begin software development

00:07:15,740 --> 00:07:21,470
work on fep as where we're often ahead

00:07:19,550 --> 00:07:24,940
of the curve in terms of silicon being

00:07:21,470 --> 00:07:28,460
available and hardware emulation

00:07:24,940 --> 00:07:32,030
platforms are are obviously very slow

00:07:28,460 --> 00:07:35,540
and expensive so we'll be working with

00:07:32,030 --> 00:07:37,550
an FTP and the idea is that the fvp will

00:07:35,540 --> 00:07:42,350
be made available in a similar way to

00:07:37,550 --> 00:07:46,630
the current architecture VA a base FTP

00:07:42,350 --> 00:07:50,180
in that it will be free to download and

00:07:46,630 --> 00:07:53,870
unlicensed so if we if we have a look at

00:07:50,180 --> 00:07:57,260
the the features in the table so the

00:07:53,870 --> 00:08:01,550
main point to highlight with the fep is

00:07:57,260 --> 00:08:03,620
that it will it will model a system that

00:08:01,550 --> 00:08:06,410
at a programmers level and at a

00:08:03,620 --> 00:08:09,320
functional level will look very similar

00:08:06,410 --> 00:08:12,770
to the hardware so unlike a more

00:08:09,320 --> 00:08:16,250
abstract architectural model you will

00:08:12,770 --> 00:08:19,070
have register modeling in the CPU and

00:08:16,250 --> 00:08:21,530
the interconnect that will reflect the

00:08:19,070 --> 00:08:23,840
real hardware and functional behavior

00:08:21,530 --> 00:08:27,110
that will reflect the real hardware and

00:08:23,840 --> 00:08:30,169
we hope that the software stacks we

00:08:27,110 --> 00:08:34,849
provide will be very very close for the

00:08:30,169 --> 00:08:37,250
fvp and the hardware platform the model

00:08:34,849 --> 00:08:41,780
is relatively quick so if you want to

00:08:37,250 --> 00:08:44,570
boot to a prompt a kernel prompt you're

00:08:41,780 --> 00:08:47,840
probably talking depending on your PC

00:08:44,570 --> 00:08:50,900
around a minute but if you want

00:08:47,840 --> 00:08:55,250
boo a big user space framework and a

00:08:50,900 --> 00:08:59,830
full Android that will be significantly

00:08:55,250 --> 00:09:02,780
longer you don't get a free lunch for a

00:08:59,830 --> 00:09:05,660
high-speed model and therefore what you

00:09:02,780 --> 00:09:10,040
don't get is any timing or cycle count

00:09:05,660 --> 00:09:13,430
information and we may have or we will

00:09:10,040 --> 00:09:18,100
have abstracted modeling of some

00:09:13,430 --> 00:09:18,100
peripheral components or third-party IP

00:09:21,520 --> 00:09:29,270
moving on to look at the vanilla

00:09:25,810 --> 00:09:32,390
software stack support so when we

00:09:29,270 --> 00:09:35,660
introduce morello capability support

00:09:32,390 --> 00:09:40,310
it'll be incremental so we'll be adding

00:09:35,660 --> 00:09:43,640
functionality to on top of a vanilla

00:09:40,310 --> 00:09:47,300
software stack there won't be a big bang

00:09:43,640 --> 00:09:51,230
appearance of an entirely capability

00:09:47,300 --> 00:09:54,740
aware Android or distro environment

00:09:51,230 --> 00:09:58,430
it'll be incremental functionality so

00:09:54,740 --> 00:10:02,990
the starting point is to provide a

00:09:58,430 --> 00:10:09,890
standard software stack for the platform

00:10:02,990 --> 00:10:13,610
and at a very high level the hardware

00:10:09,890 --> 00:10:17,600
compute subsystem IP looks a bit like

00:10:13,610 --> 00:10:21,350
the Box in the middle of the screen so

00:10:17,600 --> 00:10:25,420
on a lot of arm designs you will have

00:10:21,350 --> 00:10:30,650
two blocks of compute the main

00:10:25,420 --> 00:10:32,990
application processor compute and a

00:10:30,650 --> 00:10:36,530
little bit of Supervisory compute a

00:10:32,990 --> 00:10:39,730
cortex-m and then of course you have the

00:10:36,530 --> 00:10:44,680
system level IP the interconnect the gig

00:10:39,730 --> 00:10:48,890
media and peripherals and for morello

00:10:44,680 --> 00:10:53,890
both in the fep and the hardware both

00:10:48,890 --> 00:10:57,650
the interconnect and the CPUs will be in

00:10:53,890 --> 00:11:01,550
enhance to be implementations that

00:10:57,650 --> 00:11:05,060
implement the new capability

00:11:01,550 --> 00:11:10,149
functionality so the Supervisory

00:11:05,060 --> 00:11:12,830
firmware is open source firmware the SCP

00:11:10,149 --> 00:11:17,300
firmware project is available on on

00:11:12,830 --> 00:11:21,890
github and the SCP will be the first bit

00:11:17,300 --> 00:11:25,240
of compute to run out of reset and it

00:11:21,890 --> 00:11:27,589
deals for the whole load of low-level IP

00:11:25,240 --> 00:11:30,589
initialization so configuring the

00:11:27,589 --> 00:11:34,130
interconnect for the path to memory but

00:11:30,589 --> 00:11:38,899
also power control and the bring up of

00:11:34,130 --> 00:11:41,600
the application compute so over on the

00:11:38,899 --> 00:11:46,010
left hand side we've got a fairly

00:11:41,600 --> 00:11:49,940
traditional arm application software

00:11:46,010 --> 00:11:53,899
stack so we have the the trusted

00:11:49,940 --> 00:11:56,720
firmware project we're using a port of

00:11:53,899 --> 00:12:01,430
trusted firmware a at the bottom of the

00:11:56,720 --> 00:12:06,370
stack and trusted firmware will do a lot

00:12:01,430 --> 00:12:11,720
of the cortex a CPU initialization

00:12:06,370 --> 00:12:15,320
provide access to a secure runtime or

00:12:11,720 --> 00:12:19,430
service if you have one on top of that

00:12:15,320 --> 00:12:25,790
we have the traditional yubu Android

00:12:19,430 --> 00:12:28,670
flow or an e dk2 grub Linux distro now

00:12:25,790 --> 00:12:31,700
not all of this may be available at the

00:12:28,670 --> 00:12:35,740
first release but ultimately we're

00:12:31,700 --> 00:12:45,910
working towards enabling both these

00:12:35,740 --> 00:12:50,240
environments right so what are we doing

00:12:45,910 --> 00:12:55,779
to support Morello and the prototype

00:12:50,240 --> 00:13:00,019
security architecture in particular so

00:12:55,779 --> 00:13:05,779
here are the the three main streams of

00:13:00,019 --> 00:13:09,260
work so we have supporting the Linux

00:13:05,779 --> 00:13:11,959
kernel the C library and the Tor chain

00:13:09,260 --> 00:13:14,840
and all these will be maintained in

00:13:11,959 --> 00:13:18,740
Forks they will not be

00:13:14,840 --> 00:13:22,310
up streamed so the kernel support is all

00:13:18,740 --> 00:13:25,220
focused on the idea that if you have

00:13:22,310 --> 00:13:30,190
these new pointers then we need a

00:13:25,220 --> 00:13:35,120
reworking of the kernel ABI and Cisco

00:13:30,190 --> 00:13:39,340
interface and in early work so for the

00:13:35,120 --> 00:13:43,010
initial fvp release we will be supported

00:13:39,340 --> 00:13:47,060
by a lot of functionality implemented in

00:13:43,010 --> 00:13:50,450
the Bionic C library as a shim and if we

00:13:47,060 --> 00:13:55,130
as we move towards having the hardware

00:13:50,450 --> 00:13:58,190
what we should have a fuller kernel ABI

00:13:55,130 --> 00:14:02,750
and clearly this kernel work needs to

00:13:58,190 --> 00:14:06,200
occur in synchronization with work on

00:14:02,750 --> 00:14:09,370
the C library and therefore we have an

00:14:06,200 --> 00:14:15,080
initial work stream focused on Bionic

00:14:09,370 --> 00:14:18,890
and the provision of a capability aware

00:14:15,080 --> 00:14:23,060
Bionic will mean that you can link an

00:14:18,890 --> 00:14:24,980
android application against this morello

00:14:23,060 --> 00:14:28,250
aware Bionic rather than the standard

00:14:24,980 --> 00:14:32,980
Bionic and that will allow you to create

00:14:28,250 --> 00:14:39,200
a prototype capability aware

00:14:32,980 --> 00:14:44,110
applications as we move towards 2021 we

00:14:39,200 --> 00:14:46,820
should have work going on both on Bionic

00:14:44,110 --> 00:14:51,980
interfacing with the generic kernel ABI

00:14:46,820 --> 00:14:55,550
is but at G Lib C 2 and at the bottom we

00:14:51,980 --> 00:15:01,610
have the tool chain so the the early

00:14:55,550 --> 00:15:03,020
support will be LLVM focused as we move

00:15:01,610 --> 00:15:05,990
forward

00:15:03,020 --> 00:15:11,290
they'll be work to expand this to also

00:15:05,990 --> 00:15:11,290
include canoe GCC

00:15:17,930 --> 00:15:26,370
so bringing that all together here's

00:15:22,200 --> 00:15:29,330
what we're planning for 2020 and where

00:15:26,370 --> 00:15:36,210
we might get to in 2021

00:15:29,330 --> 00:15:39,870
so the October 2020 release is supported

00:15:36,210 --> 00:15:42,900
only by an Fe P model and the software

00:15:39,870 --> 00:15:46,680
stack is really a Minimum Viable Product

00:15:42,900 --> 00:15:50,910
an initial release it will be Android

00:15:46,680 --> 00:15:54,120
focused it will be supported by the LLVM

00:15:50,910 --> 00:15:57,300
tour chain and it will rely on the

00:15:54,120 --> 00:16:01,320
shimmed Bionic library that we've talked

00:15:57,300 --> 00:16:06,060
about with with support for static

00:16:01,320 --> 00:16:08,640
linkage we will provide a couple of

00:16:06,060 --> 00:16:12,660
example components that have been ported

00:16:08,640 --> 00:16:17,790
so we will rebuild lagdi maybe the

00:16:12,660 --> 00:16:19,980
service manager using the new morello

00:16:17,790 --> 00:16:22,770
aware compiler so these things will run

00:16:19,980 --> 00:16:25,830
with 128 bit pointers and they will be

00:16:22,770 --> 00:16:30,090
linked against the Bionic sea library

00:16:25,830 --> 00:16:33,660
and we will provide a basic compartment

00:16:30,090 --> 00:16:37,260
Manager example showing a dummy

00:16:33,660 --> 00:16:40,770
application that you can segregate into

00:16:37,260 --> 00:16:44,430
a manager and different compartments

00:16:40,770 --> 00:16:49,130
within that application giving an idea

00:16:44,430 --> 00:16:51,690
of a starting point for how to implement

00:16:49,130 --> 00:16:56,310
the support that the architecture

00:16:51,690 --> 00:16:58,620
provides the expectation is that most

00:16:56,310 --> 00:17:03,150
people will work on a config we call

00:16:58,620 --> 00:17:05,640
nano Android that's a stripped down a

00:17:03,150 --> 00:17:09,560
headless version of Android that will

00:17:05,640 --> 00:17:13,949
boot very quickly on the model in theory

00:17:09,560 --> 00:17:15,720
you can support a full Android GUI but

00:17:13,949 --> 00:17:19,970
that will be

00:17:15,720 --> 00:17:23,850
a more difficult framework to working as

00:17:19,970 --> 00:17:26,100
we move on to 2021

00:17:23,850 --> 00:17:29,970
hopefully the the support will get more

00:17:26,100 --> 00:17:32,520
mature so we have the evolution of the

00:17:29,970 --> 00:17:36,240
kernel the library and the tool chain

00:17:32,520 --> 00:17:40,830
we've been talking about but the idea is

00:17:36,240 --> 00:17:45,480
that we will be able to provide not not

00:17:40,830 --> 00:17:47,490
only Android but an initial distro with

00:17:45,480 --> 00:17:48,330
the same kind of basic platform

00:17:47,490 --> 00:17:51,650
enablement

00:17:48,330 --> 00:17:56,330
on top of which we have a number of

00:17:51,650 --> 00:18:01,190
starting features for capability aware

00:17:56,330 --> 00:18:05,940
development so a sea library and an

00:18:01,190 --> 00:18:09,570
examples graphics support is an

00:18:05,940 --> 00:18:14,669
interesting topic the board will have

00:18:09,570 --> 00:18:18,030
support both for PCIe so plugging cards

00:18:14,669 --> 00:18:21,870
and onboard graphics and we're looking

00:18:18,030 --> 00:18:25,760
at different options for graphical

00:18:21,870 --> 00:18:25,760
support at the moment

00:18:30,220 --> 00:18:33,420
[Music]

00:18:36,590 --> 00:18:43,419
so another part of the picture we want

00:18:40,279 --> 00:18:49,070
to talk about is how will provide

00:18:43,419 --> 00:18:51,799
murillo software to people so armor

00:18:49,070 --> 00:18:55,809
working with Leonor o to do this and the

00:18:51,799 --> 00:18:59,990
idea is that all the software will be

00:18:55,809 --> 00:19:05,770
available via open source projects and

00:18:59,990 --> 00:19:08,480
that will work with Lennar o to provide

00:19:05,770 --> 00:19:11,830
infrastructure to deliver and maintain

00:19:08,480 --> 00:19:15,440
the software for the life of the project

00:19:11,830 --> 00:19:18,289
so we'll need public code repositories

00:19:15,440 --> 00:19:22,159
for the components particularly the

00:19:18,289 --> 00:19:25,429
forked components the tour chains the

00:19:22,159 --> 00:19:28,640
kernel the the C library work we've been

00:19:25,429 --> 00:19:33,039
talking about and we'll need issue

00:19:28,640 --> 00:19:37,669
tracking and tools for managing

00:19:33,039 --> 00:19:39,950
submissions as I keep referring back to

00:19:37,669 --> 00:19:44,149
the intention is that ultimately it will

00:19:39,950 --> 00:19:47,000
be a collaborative engagement and of

00:19:44,149 --> 00:19:48,830
course if we are forking software

00:19:47,000 --> 00:19:59,029
projects then we will have to maintain

00:19:48,830 --> 00:20:05,149
them going forward so rather than having

00:19:59,029 --> 00:20:10,700
only ports in individual repos like SCP

00:20:05,149 --> 00:20:13,029
trusted firmware the kernel fork the

00:20:10,700 --> 00:20:16,940
idea is that we will also provide a

00:20:13,029 --> 00:20:20,210
tested platform repository where we

00:20:16,940 --> 00:20:21,980
bring all these components together and

00:20:20,210 --> 00:20:25,760
have a tagged

00:20:21,980 --> 00:20:27,950
integrated release so the idea is that

00:20:25,760 --> 00:20:29,679
we will maintain a manifest or a Yocto

00:20:27,950 --> 00:20:32,450
recipe for the different stack

00:20:29,679 --> 00:20:35,480
configurations and we will provide a a

00:20:32,450 --> 00:20:40,000
tagged release of all the components

00:20:35,480 --> 00:20:43,940
that are tested and integrated together

00:20:40,000 --> 00:20:47,600
as a complete stack and that will

00:20:43,940 --> 00:20:50,510
provide instructions on on how people

00:20:47,600 --> 00:20:54,280
can download and configure works

00:20:50,510 --> 00:20:57,620
they son get that stack booting quickly

00:20:54,280 --> 00:21:00,320
to enable them to to focus on the work

00:20:57,620 --> 00:21:13,970
that they're they're actually interested

00:21:00,320 --> 00:21:16,730
in doing so one other point to mention

00:21:13,970 --> 00:21:19,910
is the work that is going on in

00:21:16,730 --> 00:21:24,310
Cambridge University so I've been

00:21:19,910 --> 00:21:29,870
talking about the work that arm are

00:21:24,310 --> 00:21:32,540
focused on there is parallel work that

00:21:29,870 --> 00:21:34,790
has been going on for quite a while in

00:21:32,540 --> 00:21:39,280
Cambridge University around

00:21:34,790 --> 00:21:43,790
cherri generally and they have data

00:21:39,280 --> 00:21:51,260
funding for for their own work and they

00:21:43,790 --> 00:21:57,020
will be targeting a FreeBSD port at both

00:21:51,260 --> 00:21:59,870
the FE P and the hardware so this work

00:21:57,020 --> 00:22:03,380
is it's been managed directly by the

00:21:59,870 --> 00:22:07,280
University of Cambridge but it's

00:22:03,380 --> 00:22:10,570
definitely an alternative option for for

00:22:07,280 --> 00:22:17,650
people interested in the morello

00:22:10,570 --> 00:22:21,560
architecture I MUC this is just to say

00:22:17,650 --> 00:22:23,540
you've got about three more minutes okay

00:22:21,560 --> 00:22:30,680
so reminder and you've had a bunch of

00:22:23,540 --> 00:22:33,170
questions oh well that's good that's

00:22:30,680 --> 00:22:38,030
good because that was my final slide so

00:22:33,170 --> 00:22:41,270
if people do have questions I can I can

00:22:38,030 --> 00:22:44,060
try and help okay so let me read them

00:22:41,270 --> 00:22:50,030
out to you so the first one is why can't

00:22:44,060 --> 00:22:53,600
we use QEMU modeling morello so I think

00:22:50,030 --> 00:22:55,730
I don't think there's a complete answer

00:22:53,600 --> 00:22:58,100
to that question in terms of a

00:22:55,730 --> 00:23:00,050
definitive you can't but I I think

00:22:58,100 --> 00:23:02,000
partly it's to do with the level of

00:23:00,050 --> 00:23:03,530
abstraction that the technologies

00:23:02,000 --> 00:23:07,150
normally modeler

00:23:03,530 --> 00:23:12,280
so with the fep where we're targeting

00:23:07,150 --> 00:23:15,800
quite a low-level cpu implementation

00:23:12,280 --> 00:23:18,110
model and interconnect model and that

00:23:15,800 --> 00:23:21,410
work has to be done at a very early

00:23:18,110 --> 00:23:25,610
stage when aligned with the work that

00:23:21,410 --> 00:23:29,660
the hardware IP teams are doing so

00:23:25,610 --> 00:23:31,940
ultimately maybe you could initially to

00:23:29,660 --> 00:23:37,030
align with the early development work it

00:23:31,940 --> 00:23:37,030
will be the fvp okay

00:23:38,210 --> 00:23:44,570
will the fbp package be available with

00:23:41,330 --> 00:23:48,590
the GA bits design as well or will that

00:23:44,570 --> 00:23:50,840
be all soft TM you so I'm not I'm not

00:23:48,590 --> 00:23:52,760
can I can I see the question directly

00:23:50,840 --> 00:23:59,480
I'm not sure I even understand that what

00:23:52,760 --> 00:24:02,540
will the fvp be available with will the

00:23:59,480 --> 00:24:06,650
FPS so if you look at the chats you see

00:24:02,540 --> 00:24:10,850
it well the FTP package be available

00:24:06,650 --> 00:24:14,350
with FGA bit stream called slash design

00:24:10,850 --> 00:24:17,450
as well or will that be all soft you

00:24:14,350 --> 00:24:22,070
okay so okay so I think I get it now so

00:24:17,450 --> 00:24:25,220
the the there is no FPGA so there's an

00:24:22,070 --> 00:24:29,000
FTP and there's a test chip ultimately

00:24:25,220 --> 00:24:31,130
on a development board so the sides are

00:24:29,000 --> 00:24:36,020
a fixed Hardware implementation a dev

00:24:31,130 --> 00:24:40,490
board or an fvp which is a fixed binary

00:24:36,020 --> 00:24:47,000
that models the implementation that you

00:24:40,490 --> 00:24:50,240
can run okay see we've got another

00:24:47,000 --> 00:24:52,490
minute so so two more questions is

00:24:50,240 --> 00:24:54,800
Morello architecture targeting a

00:24:52,490 --> 00:24:58,250
specific class of application like

00:24:54,800 --> 00:25:03,680
mobile phone or is it generic and able

00:24:58,250 --> 00:25:09,470
to address industrial automotive so it's

00:25:03,680 --> 00:25:13,010
intended to be generic so it's actually

00:25:09,470 --> 00:25:15,810
based on the architecture of an existing

00:25:13,010 --> 00:25:18,890
platform platform which

00:25:15,810 --> 00:25:22,950
happens to be an infra infrastructure

00:25:18,890 --> 00:25:25,380
platform but but that's more that's more

00:25:22,950 --> 00:25:29,550
for practical reasons the ID the idea is

00:25:25,380 --> 00:25:31,800
that we have an application CPU and the

00:25:29,550 --> 00:25:36,060
idea that we have Android and distro is

00:25:31,800 --> 00:25:38,450
speaking to the idea that you could you

00:25:36,060 --> 00:25:44,370
could explore the security architecture

00:25:38,450 --> 00:25:49,740
for a number of different markets okay

00:25:44,370 --> 00:25:51,510
great and then one one more question so

00:25:49,740 --> 00:25:56,060
how different is the philosophy of

00:25:51,510 --> 00:25:56,060
compartments from arm trust zone oh

00:25:56,780 --> 00:26:02,460
that's a big question and there sounds

00:25:59,970 --> 00:26:04,860
like it's that's quite a big question

00:26:02,460 --> 00:26:08,160
it's a different kind of approach to

00:26:04,860 --> 00:26:09,990
security I think the best way to answer

00:26:08,160 --> 00:26:12,780
that question is to follow the link on

00:26:09,990 --> 00:26:17,970
developer and read and very quickly the

00:26:12,780 --> 00:26:20,070
final question is yes the FE peas are

00:26:17,970 --> 00:26:24,350
basically a system that we have built

00:26:20,070 --> 00:26:24,350

YouTube URL: https://www.youtube.com/watch?v=yRau0YEQKQk


