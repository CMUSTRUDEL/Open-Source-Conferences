Title: LTD20-306 Status of SoC support in the kernel
Publication date: 2020-04-01
Playlist: Linaro Tech Days 2020
Description: 
	Description: 
As the kernel keeps changing over the years, it's time to take a fresh look at what SoC support is present in the kernel for ARM and other architectures.

Interesting trends are how arm64 is slowly taking over from arm32, how both have taken over from almost all the other architectures over the years, and how new architectures are coming along.

Session Speakers
Arnd Bergmann
Kernel Maintainer, SoC support (Linaro Ltd)


Arnd Bergmann has been with Linaro since almost the beginning. He's worked on the kernel across many CPU architectures over his career is and currently co-maintaining the soc tree that is used for merging platform support into the kernel. 



You can view this sessions presentation here:
https://connect.linaro.org/resources/ltd20/ltd20-306/
Captions: 
	00:00:00,590 --> 00:00:06,130
welcome to my talk on SSE support in the

00:00:03,919 --> 00:00:10,209
current my name is Anne Beckman I'm

00:00:06,130 --> 00:00:13,610
maintainer of the sock support

00:00:10,209 --> 00:00:17,930
specifically the arm sock support and

00:00:13,610 --> 00:00:20,300
also I'm responsible for bringing in new

00:00:17,930 --> 00:00:21,050
architectures into the kernel so I'm

00:00:20,300 --> 00:00:25,670
also overall

00:00:21,050 --> 00:00:31,910
the architecture maintainer and they

00:00:25,670 --> 00:00:34,910
talk about soces overall first thing I

00:00:31,910 --> 00:00:37,550
want to make clear is what it means for

00:00:34,910 --> 00:00:41,359
an SOC to be part of the kernel there's

00:00:37,550 --> 00:00:43,300
like five distinct levels of upstream

00:00:41,359 --> 00:00:47,480
support that one can have in the kernel

00:00:43,300 --> 00:00:49,249
there's the ideally a platform would be

00:00:47,480 --> 00:00:51,199
fully upstream supported which means

00:00:49,249 --> 00:00:54,649
everything works out of the box you can

00:00:51,199 --> 00:00:57,140
install any distro and you expect all

00:00:54,649 --> 00:00:59,269
the drivers to work this is the default

00:00:57,140 --> 00:01:01,729
on most server platforms and don't fun

00:00:59,269 --> 00:01:04,010
things like pcs and embedded systems

00:01:01,729 --> 00:01:06,079
usually the best you can hope for is

00:01:04,010 --> 00:01:09,200
that there's a small number of patches

00:01:06,079 --> 00:01:10,729
that get shipped by vendor and with

00:01:09,200 --> 00:01:12,619
those pictures you can update them to

00:01:10,729 --> 00:01:14,570
the latest kernel something works and

00:01:12,619 --> 00:01:17,960
then begin all the way down at the

00:01:14,570 --> 00:01:19,759
bottom the red one that means there's a

00:01:17,960 --> 00:01:21,740
kernel running on the machine but

00:01:19,759 --> 00:01:26,689
there's no way anybody is going to touch

00:01:21,740 --> 00:01:29,390
it anymore there are no more updates so

00:01:26,689 --> 00:01:33,049
we're focusing on is the two green ones

00:01:29,390 --> 00:01:35,990
which means people are using current

00:01:33,049 --> 00:01:39,500
kernels or they will be upgrading to

00:01:35,990 --> 00:01:42,460
future kernels once they have become the

00:01:39,500 --> 00:01:42,460
long-term stable releases

00:01:44,060 --> 00:01:47,650
the process of

00:01:47,860 --> 00:01:54,100
supporting a platform upstream is what

00:01:50,920 --> 00:01:56,770
is usually called bring up and I think

00:01:54,100 --> 00:01:59,500
that Mitch is fine with the picture the

00:01:56,770 --> 00:02:02,140
further high the higher you get the

00:01:59,500 --> 00:02:05,650
better platform has been brought up so

00:02:02,140 --> 00:02:10,750
bring it up all the way means it can

00:02:05,650 --> 00:02:12,070
basically run forever on any uh on any

00:02:10,750 --> 00:02:14,800
new kernel because everything is

00:02:12,070 --> 00:02:17,709
supported and if you only need to bring

00:02:14,800 --> 00:02:20,650
up half the way you might get to one

00:02:17,709 --> 00:02:22,180
kernel version that you can support but

00:02:20,650 --> 00:02:23,500
then you would never have an update on

00:02:22,180 --> 00:02:26,350
it

00:02:23,500 --> 00:02:28,150
um so this is called bring up then

00:02:26,350 --> 00:02:31,780
there's obviously the opposite of that

00:02:28,150 --> 00:02:35,200
which I would call bring down the brig

00:02:31,780 --> 00:02:37,660
down happens over time at some point

00:02:35,200 --> 00:02:40,930
people stop running the latest Karma's

00:02:37,660 --> 00:02:44,430
there might still be the stable releases

00:02:40,930 --> 00:02:46,780
that somebody has and over time people

00:02:44,430 --> 00:02:51,340
stop moving to the next stable release

00:02:46,780 --> 00:02:53,020
they only get updates from a certain

00:02:51,340 --> 00:02:54,700
vendor if they get updates at all and

00:02:53,020 --> 00:02:56,650
there might only be bug fixes and at

00:02:54,700 --> 00:02:58,810
some point you might have hardware that

00:02:56,650 --> 00:03:01,260
still runs but it's not getting any

00:02:58,810 --> 00:03:03,489
changes at all because nobody is

00:03:01,260 --> 00:03:07,120
actively building kernels anymore for

00:03:03,489 --> 00:03:09,489
this platform because nobody cares so

00:03:07,120 --> 00:03:13,420
for the up streaming there's a couple of

00:03:09,489 --> 00:03:16,060
things that are that make make it hard

00:03:13,420 --> 00:03:18,310
for you to upstream of new platform but

00:03:16,060 --> 00:03:22,020
the most time that I've been working on

00:03:18,310 --> 00:03:24,430
this the main obstacle was GPU drivers

00:03:22,020 --> 00:03:26,170
if a platform doesn't have a GPU driver

00:03:24,430 --> 00:03:30,519
you're obviously not at the highest

00:03:26,170 --> 00:03:33,310
level you need driver from the vendor to

00:03:30,519 --> 00:03:35,049
make it work and that means you still

00:03:33,310 --> 00:03:36,580
have to have pictures now this has

00:03:35,049 --> 00:03:40,269
changed very substantially over the

00:03:36,580 --> 00:03:42,970
years and now for I'd say five out of

00:03:40,269 --> 00:03:45,880
the six most popular GPUs there are

00:03:42,970 --> 00:03:48,340
drivers in the kernel most of them we

00:03:45,880 --> 00:03:49,690
working fine in most cases some not

00:03:48,340 --> 00:03:51,820
working as well as the others and

00:03:49,690 --> 00:03:55,630
they're still one that doesn't have any

00:03:51,820 --> 00:03:57,820
drivers then there's the Android patch

00:03:55,630 --> 00:04:00,820
is a lot of platforms ship with an

00:03:57,820 --> 00:04:03,670
Android kernel and for a long time there

00:04:00,820 --> 00:04:06,519
was the huge set of patches maintained

00:04:03,670 --> 00:04:07,810
by Google specific to Android and you

00:04:06,519 --> 00:04:09,700
couldn't actually run an Android user

00:04:07,810 --> 00:04:13,709
space without this patches and that

00:04:09,700 --> 00:04:18,100
again has improved a lot over the years

00:04:13,709 --> 00:04:20,260
so now you can actually have a mainline

00:04:18,100 --> 00:04:21,700
kernel putted on an Android device and

00:04:20,260 --> 00:04:24,430
still run the all the Android user space

00:04:21,700 --> 00:04:26,860
but they're still patches that need to

00:04:24,430 --> 00:04:29,979
be upstream and this will also continue

00:04:26,860 --> 00:04:31,840
improving over time then a problem that

00:04:29,979 --> 00:04:33,880
will we won't be able to solve is the

00:04:31,840 --> 00:04:35,470
very short time to market especially in

00:04:33,880 --> 00:04:37,500
high-end devices which have a very short

00:04:35,470 --> 00:04:39,860
life

00:04:37,500 --> 00:04:43,020
just no time to upstream everything

00:04:39,860 --> 00:04:46,980
before Hardware hits the shelves in some

00:04:43,020 --> 00:04:50,790
cases patches are not upstream before

00:04:46,980 --> 00:04:52,350
the last device is sold and then you're

00:04:50,790 --> 00:04:56,010
still up streaming

00:04:52,350 --> 00:04:58,830
the patches after the device has been

00:04:56,010 --> 00:05:00,330
replaced by something else and this is

00:04:58,830 --> 00:05:03,050
less of a problem for the low-end

00:05:00,330 --> 00:05:03,050
devices

00:05:03,520 --> 00:05:09,280
which tend to have much longer life then

00:05:05,949 --> 00:05:10,870
there's the the short lifespan is

00:05:09,280 --> 00:05:13,240
staggeringly related to the short time

00:05:10,870 --> 00:05:15,610
to market of course and then there's

00:05:13,240 --> 00:05:18,940
unannounced products so some companies

00:05:15,610 --> 00:05:22,419
are very good at upstream all their

00:05:18,940 --> 00:05:23,889
platform pitches before the hardware is

00:05:22,419 --> 00:05:25,449
even out or had before it has been

00:05:23,889 --> 00:05:27,789
announced there are some sneaky ways you

00:05:25,449 --> 00:05:29,949
can get impetuous without saying what

00:05:27,789 --> 00:05:32,380
this product is you just say a future

00:05:29,949 --> 00:05:33,310
product will use this new driver you

00:05:32,380 --> 00:05:34,720
don't have to actually announce

00:05:33,310 --> 00:05:37,030
something but in other cases that just

00:05:34,720 --> 00:05:38,889
doesn't work because somebody like

00:05:37,030 --> 00:05:41,710
nobody might know that you're working on

00:05:38,889 --> 00:05:47,380
on a specific product line at all then

00:05:41,710 --> 00:05:51,490
you then you market and then in some

00:05:47,380 --> 00:05:54,639
cases SOC stew something new so there

00:05:51,490 --> 00:05:56,740
might be new subsystems that are needed

00:05:54,639 --> 00:05:59,740
and if there's no subsystem for it kind

00:05:56,740 --> 00:06:03,039
of can hack your way around it right a

00:05:59,740 --> 00:06:04,900
new driver but that won't make it into

00:06:03,039 --> 00:06:07,120
the kernel if there are lots of other

00:06:04,900 --> 00:06:09,190
companies that have the same need and

00:06:07,120 --> 00:06:11,800
then we have to agree on one subsystem

00:06:09,190 --> 00:06:15,159
first that completely abstracts the user

00:06:11,800 --> 00:06:17,650
interface so that every SOC can have a

00:06:15,159 --> 00:06:20,940
device driver for it what's even worse

00:06:17,650 --> 00:06:23,039
is if you have more than one subsystem

00:06:20,940 --> 00:06:25,990
abstracting the same functionality

00:06:23,039 --> 00:06:27,969
because then we have to decide which one

00:06:25,990 --> 00:06:34,270
to use and that can make take even

00:06:27,969 --> 00:06:37,180
longer time um now for a word map of the

00:06:34,270 --> 00:06:40,090
CPU architectures

00:06:37,180 --> 00:06:42,880
this is what I as a kernel developer

00:06:40,090 --> 00:06:47,530
imagined the world looked like in 2010

00:06:42,880 --> 00:06:50,169
this includes all the all the machines

00:06:47,530 --> 00:06:51,580
that were supported in Linux

00:06:50,169 --> 00:06:53,050
it doesn't actually include a lot of

00:06:51,580 --> 00:06:59,290
other things that did not do that run

00:06:53,050 --> 00:07:01,750
Linux um and there you can see what the

00:06:59,290 --> 00:07:04,180
world used to look like back ten years

00:07:01,750 --> 00:07:08,830
ago when De Niro was just being formed

00:07:04,180 --> 00:07:11,550
so you had a bunch of equally important

00:07:08,830 --> 00:07:11,550
architectures

00:07:11,570 --> 00:07:15,650
in all kinds of different markets from

00:07:14,090 --> 00:07:18,139
microcontrollers all the way up to the

00:07:15,650 --> 00:07:21,860
data center to things that you don't see

00:07:18,139 --> 00:07:26,419
on this map are 64-bit arm and risk 5

00:07:21,860 --> 00:07:27,889
which were both being worked on by a

00:07:26,419 --> 00:07:31,160
couple of people but they hadn't yet

00:07:27,889 --> 00:07:33,790
talked about it in public so these were

00:07:31,160 --> 00:07:37,669
clearly not there yet and in particular

00:07:33,790 --> 00:07:40,310
the middle of this picture shows the SOC

00:07:37,669 --> 00:07:42,320
s so the SOC is what I'm interested in

00:07:40,310 --> 00:07:47,030
at the moment on the top you have the

00:07:42,320 --> 00:07:50,120
data center chips which tend to be less

00:07:47,030 --> 00:07:53,090
interesting because they just work a lot

00:07:50,120 --> 00:07:55,639
of cases there's much less variety in

00:07:53,090 --> 00:07:59,960
the hardware and then on the bottom we

00:07:55,639 --> 00:08:03,260
have platforms that are for micro

00:07:59,960 --> 00:08:05,300
controllers for FPGAs and DSPs which are

00:08:03,260 --> 00:08:10,130
all quite different platforms but they

00:08:05,300 --> 00:08:12,680
all are usually not the ideal place for

00:08:10,130 --> 00:08:14,900
a Linux system for a general-purpose

00:08:12,680 --> 00:08:19,970
Linux system or even for most embedded

00:08:14,900 --> 00:08:23,330
systems inside of the SOC bubble back 10

00:08:19,970 --> 00:08:27,150
years ago we saw armed super H PowerPC

00:08:23,330 --> 00:08:30,270
and MIPS

00:08:27,150 --> 00:08:32,970
and what's interesting is that arm was

00:08:30,270 --> 00:08:34,800
basically the low end of this so I'm

00:08:32,970 --> 00:08:38,730
where the deeply embedded once the the

00:08:34,800 --> 00:08:41,880
two hundred megahertz arm nines they

00:08:38,730 --> 00:08:44,730
were single core single issue they had

00:08:41,880 --> 00:08:47,490
very little memory um whereas everybody

00:08:44,730 --> 00:08:52,640
else was going into out of order 64-bit

00:08:47,490 --> 00:08:52,640
big SMP systems much larger memory and

00:08:53,120 --> 00:08:58,920
also the other thing you see is that all

00:08:56,280 --> 00:09:01,310
the really nice ones back then were big

00:08:58,920 --> 00:09:01,310
onion

00:09:03,439 --> 00:09:12,769
then let's look at the generations I've

00:09:08,749 --> 00:09:16,259
tried to categorize all the Esso sees

00:09:12,769 --> 00:09:19,799
that we're dealing with into three

00:09:16,259 --> 00:09:23,069
distinct generations this is this is a

00:09:19,799 --> 00:09:26,309
chronological view so that on the first

00:09:23,069 --> 00:09:27,920
the the left side you see the things

00:09:26,309 --> 00:09:31,499
that started appearing in the early

00:09:27,920 --> 00:09:35,459
2000s where you had all those different

00:09:31,499 --> 00:09:37,949
architectures you had rb5 at some point

00:09:35,459 --> 00:09:41,009
you had MIPS PowerPC super age and lots

00:09:37,949 --> 00:09:43,290
of other small ones you had fairly low

00:09:41,009 --> 00:09:45,509
speed I owe you had fairly little memory

00:09:43,290 --> 00:09:48,869
and then at some point we started seeing

00:09:45,509 --> 00:09:54,449
um b7 um where everything got a little

00:09:48,869 --> 00:09:57,779
bigger and then of course um v8 with

00:09:54,449 --> 00:10:01,249
64-bit support and a lot of high-speed

00:09:57,779 --> 00:10:01,249
i/o and much larger memory

00:10:02,730 --> 00:10:09,840
the low-end parts however they tend to

00:10:06,819 --> 00:10:13,500
stay around for a while

00:10:09,840 --> 00:10:15,090
because they are still much cheaper but

00:10:13,500 --> 00:10:17,010
then again they're not the same they

00:10:15,090 --> 00:10:19,470
sometimes also evolve so you might have

00:10:17,010 --> 00:10:22,620
a different kind of low-end platform but

00:10:19,470 --> 00:10:26,220
they still fit nicely into these three

00:10:22,620 --> 00:10:29,400
categories I think and the most

00:10:26,220 --> 00:10:31,920
important distinction that I'm trying to

00:10:29,400 --> 00:10:34,980
make here is the amount of memory that

00:10:31,920 --> 00:10:36,720
you have so in the in the earlier

00:10:34,980 --> 00:10:38,400
generation you had something as little

00:10:36,720 --> 00:10:42,060
as two megabytes of RAM still running

00:10:38,400 --> 00:10:45,720
Linux and it didn't really go all that

00:10:42,060 --> 00:10:48,000
much beyond 228 megabytes and then the

00:10:45,720 --> 00:10:50,940
middle generation

00:10:48,000 --> 00:10:55,560
you have the the larger 32-bit systems

00:10:50,940 --> 00:10:58,410
for embedded 2056 megabytes was quite a

00:10:55,560 --> 00:11:00,480
lot while ago it's now the absolute

00:10:58,410 --> 00:11:02,520
minimum for a number seven system you

00:11:00,480 --> 00:11:06,720
have something up to two gigabytes

00:11:02,520 --> 00:11:08,850
typically and rb8 on a 64-bit system

00:11:06,720 --> 00:11:11,750
usually have a lot more memory so that's

00:11:08,850 --> 00:11:13,490
2 gigabytes or more

00:11:11,750 --> 00:11:16,940
and then I'll list all the different

00:11:13,490 --> 00:11:19,250
interfaces here but really a lot of the

00:11:16,940 --> 00:11:20,810
SLC s only have a small subset of those

00:11:19,250 --> 00:11:23,510
interfaces but if they have an interface

00:11:20,810 --> 00:11:26,110
it's probably in this SpeedGrade so if

00:11:23,510 --> 00:11:30,770
you have an army eight you would not see

00:11:26,110 --> 00:11:34,190
um 2g modem on it you would see a 4G LTE

00:11:30,770 --> 00:11:35,420
modem on it or a high-speed Ethernet you

00:11:34,190 --> 00:11:37,420
wouldn't see a 10 megabit or either

00:11:35,420 --> 00:11:43,480
megabit Ethernet

00:11:37,420 --> 00:11:46,120
let's look at the memory usage so this

00:11:43,480 --> 00:11:49,630
is a graph that shows all the different

00:11:46,120 --> 00:11:51,940
kinds of drm that I could find just by

00:11:49,630 --> 00:11:56,500
taking a snapshot of the product

00:11:51,940 --> 00:11:58,779
listings on Mauser comm and for every

00:11:56,500 --> 00:12:01,810
color corresponds to a specific

00:11:58,779 --> 00:12:03,700
generation of DRAM and you can see that

00:12:01,810 --> 00:12:08,110
most of these graphs have something like

00:12:03,700 --> 00:12:10,420
a D shaped curve so on the left you can

00:12:08,110 --> 00:12:13,839
see that with every doubling of the

00:12:10,420 --> 00:12:17,380
memory capacity the price per gigabyte

00:12:13,839 --> 00:12:20,800
or per megabyte goes down up to a point

00:12:17,380 --> 00:12:26,649
and then it goes up a lot again and this

00:12:20,800 --> 00:12:29,680
means for example on ddr3

00:12:26,649 --> 00:12:33,730
you couldn't spend another 20 cents to

00:12:29,680 --> 00:12:37,259
double the capacity between 128 megabit

00:12:33,730 --> 00:12:37,259
and two gigabit

00:12:38,819 --> 00:12:40,879
you

00:12:41,180 --> 00:12:46,100
but after a point it gets really

00:12:44,060 --> 00:12:49,520
expensive so there's a kind of optimum

00:12:46,100 --> 00:12:52,550
capacity for each memory device and you

00:12:49,520 --> 00:12:56,060
can see how that fits into the

00:12:52,550 --> 00:12:59,150
generations of soces so as any SOC that

00:12:56,060 --> 00:13:02,510
might only have DDR one memory the

00:12:59,150 --> 00:13:05,420
optimum point is having 64 megabyte

00:13:02,510 --> 00:13:07,610
capacity based on the fact that you

00:13:05,420 --> 00:13:09,020
might only have a single 512 mega bit

00:13:07,610 --> 00:13:10,640
chip you could have 2 of them then I

00:13:09,020 --> 00:13:12,230
have twice as much but you can't have

00:13:10,640 --> 00:13:15,500
you can't really have much more than

00:13:12,230 --> 00:13:19,640
that or gets really expensive and then

00:13:15,500 --> 00:13:23,960
with ddr2 you get twice as much with

00:13:19,640 --> 00:13:27,590
ddr3 you can actually get two times or

00:13:23,960 --> 00:13:29,150
four times as much as with ddr2 so the

00:13:27,590 --> 00:13:32,630
cheapest memory that you can get at the

00:13:29,150 --> 00:13:34,790
moment is a four gigabit chip in a

00:13:32,630 --> 00:13:37,610
typical system you would see one or two

00:13:34,790 --> 00:13:40,430
of them on a small embedded system which

00:13:37,610 --> 00:13:42,620
means you have either half a gigabyte or

00:13:40,430 --> 00:13:45,890
one gigabyte of RAM total on the system

00:13:42,620 --> 00:13:49,070
and this is the ideal operating point

00:13:45,890 --> 00:13:55,310
like the ideal marketing point for a

00:13:49,070 --> 00:13:59,930
32-bit system at this point it's also

00:13:55,310 --> 00:14:04,180
interesting that the 32-bit

00:13:59,930 --> 00:14:04,180
chips with

00:14:04,190 --> 00:14:07,340
without ddr3 they start disappearing

00:14:06,350 --> 00:14:09,260
along with most of the other

00:14:07,340 --> 00:14:12,430
architectures so if you don't have an

00:14:09,260 --> 00:14:15,230
arm v7 you probably don't have an have

00:14:12,430 --> 00:14:18,980
ddr3 and then you're already stuck in

00:14:15,230 --> 00:14:20,510
this lower capacity category which means

00:14:18,980 --> 00:14:23,270
it's much less useful because it's

00:14:20,510 --> 00:14:25,780
always easier to start out with more

00:14:23,270 --> 00:14:25,780
memory and

00:14:29,529 --> 00:14:35,249
then just be more wasteful to the memory

00:14:31,990 --> 00:14:35,249
and have it last longer

00:14:39,939 --> 00:14:50,139
and then for 64-bit systems you are

00:14:45,009 --> 00:14:53,919
immediately at the lpddr4 column so in a

00:14:50,139 --> 00:14:56,699
64-bit system having less than 2

00:14:53,919 --> 00:15:00,339
gigabytes of RAM is also not ideal

00:14:56,699 --> 00:15:03,309
because then the memory can become quite

00:15:00,339 --> 00:15:05,859
tight with 64-bit you need maybe 30%

00:15:03,309 --> 00:15:07,720
more RAM capacity for the same workload

00:15:05,859 --> 00:15:11,649
just because the pointers are larger and

00:15:07,720 --> 00:15:13,989
then the code may be a little larger and

00:15:11,649 --> 00:15:17,529
that gives a pretty good distinction

00:15:13,989 --> 00:15:22,259
between the 32-bit systems running ddr3

00:15:17,529 --> 00:15:22,259
and the 64-bit systems using lpddr4

00:15:24,570 --> 00:15:29,950
the other thing is I'm 32-bit you really

00:15:27,370 --> 00:15:32,529
don't want lpddr4 because once you grow

00:15:29,950 --> 00:15:35,980
beyond 2 gigabytes it gets really cards

00:15:32,529 --> 00:15:40,089
you need high mem the memory map gets

00:15:35,980 --> 00:15:42,690
crammed and it becomes much less like

00:15:40,089 --> 00:15:45,070
the the advantage of doubling the memory

00:15:42,690 --> 00:15:47,130
it's not really there but it costs a lot

00:15:45,070 --> 00:15:47,130
more

00:15:48,840 --> 00:15:54,150
so how does this correspond to the

00:15:50,940 --> 00:15:57,660
memory requirements of distros so when

00:15:54,150 --> 00:16:00,450
you look at Debian which is probably the

00:15:57,660 --> 00:16:04,140
most commonly used desktop distro on any

00:16:00,450 --> 00:16:06,510
of these as OCS the current requirement

00:16:04,140 --> 00:16:08,760
says 256 megabytes you can probably do

00:16:06,510 --> 00:16:11,820
with a little bit less but if you go be

00:16:08,760 --> 00:16:15,750
below 256 megabytes it can become

00:16:11,820 --> 00:16:20,130
painful really quickly and you have

00:16:15,750 --> 00:16:23,270
distros like open wrt which now say the

00:16:20,130 --> 00:16:25,230
absolute minimum is 64 megabytes but

00:16:23,270 --> 00:16:29,310
really you should have hundred twenty

00:16:25,230 --> 00:16:33,930
eight and this is distro that's highly

00:16:29,310 --> 00:16:36,240
optimized for memory usage you can see

00:16:33,930 --> 00:16:38,940
that this has grown from like sixteen

00:16:36,240 --> 00:16:40,910
megabytes ten years ago to 128 megabytes

00:16:38,940 --> 00:16:43,850
right now

00:16:40,910 --> 00:16:47,310
Elkind Linux is also desktop this true

00:16:43,850 --> 00:16:52,620
that's even more optimized for for

00:16:47,310 --> 00:16:54,450
memory usage than Debian and Daley's

00:16:52,620 --> 00:16:59,520
hundred megabytes as the absolute

00:16:54,450 --> 00:17:01,800
minimum an interesting one is the Sonos

00:16:59,520 --> 00:17:03,570
smart speakers which were on the news

00:17:01,800 --> 00:17:05,280
earlier this year because they have

00:17:03,570 --> 00:17:07,959
deprecated the usage of some of the

00:17:05,280 --> 00:17:14,309
older machine types

00:17:07,959 --> 00:17:19,329
and I had to look it up what they are so

00:17:14,309 --> 00:17:20,949
those came out around 2008 2010 and they

00:17:19,329 --> 00:17:23,439
were already using old technology back

00:17:20,949 --> 00:17:26,370
then and the smallest ones have 8

00:17:23,439 --> 00:17:29,830
megabytes of memory installed and those

00:17:26,370 --> 00:17:33,820
we were still supported up to now with

00:17:29,830 --> 00:17:35,620
running Linux 2.4 and now they still say

00:17:33,820 --> 00:17:38,350
they will get bug fixes but they do not

00:17:35,620 --> 00:17:40,830
get any any new features so they are in

00:17:38,350 --> 00:17:44,130
really tight spot there

00:17:40,830 --> 00:17:49,080
and the smallest that I could find is

00:17:44,130 --> 00:17:51,269
the Microsoft arduous fear which so far

00:17:49,080 --> 00:17:55,440
is running on one type of SOC that has

00:17:51,269 --> 00:17:57,059
four megabytes of integrated SRAM so

00:17:55,440 --> 00:18:00,390
that's the smallest that people are

00:17:57,059 --> 00:18:04,320
still working on and supporting as of

00:18:00,390 --> 00:18:06,900
today aware of

00:18:04,320 --> 00:18:12,680
so let's look back at these generations

00:18:06,900 --> 00:18:16,730
and where the East generations are now

00:18:12,680 --> 00:18:22,910
the oldest one would be the low-end

00:18:16,730 --> 00:18:25,800
category now this we still exist and

00:18:22,910 --> 00:18:29,990
when you look at what's out there these

00:18:25,800 --> 00:18:32,970
are really the absolute cheapest ones

00:18:29,990 --> 00:18:36,030
what's particularly interesting there is

00:18:32,970 --> 00:18:39,300
that these run all kinds of CPU

00:18:36,030 --> 00:18:42,840
architectures whereas the higher end

00:18:39,300 --> 00:18:46,830
ones they've all moved to arm the

00:18:42,840 --> 00:18:51,290
low-end ones run on all kinds of

00:18:46,830 --> 00:18:53,460
architectures including new chips and

00:18:51,290 --> 00:18:55,440
these are they're the ones that I listed

00:18:53,460 --> 00:18:57,450
they are all supported by Linux today or

00:18:55,440 --> 00:19:03,110
they have pet shirts that have been

00:18:57,450 --> 00:19:06,390
posted recently these trips usually cost

00:19:03,110 --> 00:19:08,970
under $5 you sometimes can get a whole

00:19:06,390 --> 00:19:11,130
board under $5 running Linux based on

00:19:08,970 --> 00:19:14,640
any of these chips but it's really the

00:19:11,130 --> 00:19:17,580
race to the bottom you have the absolute

00:19:14,640 --> 00:19:20,010
minimum that you can use and every cent

00:19:17,580 --> 00:19:22,200
counts so when you get to the point

00:19:20,010 --> 00:19:25,080
where adding another 20 cents to double

00:19:22,200 --> 00:19:29,240
the memory capacity breaks your budget

00:19:25,080 --> 00:19:29,240
then this is where you

00:19:31,120 --> 00:19:37,240
and these are usually the same kind of

00:19:34,510 --> 00:19:40,210
operating point where we used to see our

00:19:37,240 --> 00:19:41,530
nine dominate the world while the higher

00:19:40,210 --> 00:19:42,790
end ones were running on other

00:19:41,530 --> 00:19:45,450
architectures and it's completely

00:19:42,790 --> 00:19:45,450
reversed now

00:19:46,060 --> 00:19:53,230
and then we have what we currently see

00:19:49,570 --> 00:19:59,950
as most of the deployment still the

00:19:53,230 --> 00:20:03,070
32-bit arm v7 um used to have a lot of

00:19:59,950 --> 00:20:05,770
different systems initially starting

00:20:03,070 --> 00:20:09,340
like on the low end but then start

00:20:05,770 --> 00:20:12,880
starting with the cortex a8 and then all

00:20:09,340 --> 00:20:14,650
the other chips up to the a 17 what I

00:20:12,880 --> 00:20:17,680
find most interesting there is that it's

00:20:14,650 --> 00:20:19,720
consolidating on this one design point

00:20:17,680 --> 00:20:22,060
where most of the systems that are still

00:20:19,720 --> 00:20:24,130
being shipped and the new SSE is coming

00:20:22,060 --> 00:20:27,160
out they use something like 2 or 4

00:20:24,130 --> 00:20:29,110
cortex a7 s um they're almost all used

00:20:27,160 --> 00:20:35,440
half a gigabyte or one gigabyte of ddr3

00:20:29,110 --> 00:20:38,410
and kind of all end up in the same

00:20:35,440 --> 00:20:40,750
operating point the there used to be

00:20:38,410 --> 00:20:42,400
higher speed cores and higher speed

00:20:40,750 --> 00:20:46,210
interfaces but those are slowly getting

00:20:42,400 --> 00:20:49,630
away as people move to 64-bit and the

00:20:46,210 --> 00:20:52,720
lower end usually doesn't make sense

00:20:49,630 --> 00:20:54,130
once you get something for the same

00:20:52,720 --> 00:20:56,500
amount of money that's significantly

00:20:54,130 --> 00:21:01,030
better so if you used to have a cortex

00:20:56,500 --> 00:21:03,430
a8 based chip um you can now get a

00:21:01,030 --> 00:21:04,750
cortex a7 with 4 cores for the same

00:21:03,430 --> 00:21:07,500
amount of money so who's going to buy

00:21:04,750 --> 00:21:07,500
the cortex a8

00:21:10,800 --> 00:21:15,420
and then some of the other exceptions

00:21:12,420 --> 00:21:16,920
are interesting so the only chip that is

00:21:15,420 --> 00:21:22,520
still successful that I could find that

00:21:16,920 --> 00:21:25,650
it's not armed is the mediatek mt6752

00:21:22,520 --> 00:21:27,690
180 that's the MIPS chip that also has

00:21:25,650 --> 00:21:29,310
ddr3 it's one of the few ones that do

00:21:27,690 --> 00:21:32,090
and that's still being put in a lot of

00:21:29,310 --> 00:21:34,309
Wi-Fi routers

00:21:32,090 --> 00:21:37,549
and then the third category is 64-bit

00:21:34,309 --> 00:21:40,179
obviously is taking over everything in

00:21:37,549 --> 00:21:40,179
the long run

00:21:40,860 --> 00:21:46,400
but

00:21:42,830 --> 00:21:46,400
not quite there

00:21:47,440 --> 00:21:52,600
and it's competing with x86 at the

00:21:50,290 --> 00:21:55,720
moment so a lot of the embedded systems

00:21:52,600 --> 00:21:57,880
have an etiquette x86 SOC or regulates

00:21:55,720 --> 00:22:00,040
at the six CPU sometimes you get into

00:21:57,880 --> 00:22:03,310
the same price point with a higher-end

00:22:00,040 --> 00:22:06,480
arm SOC but actually most of the market

00:22:03,310 --> 00:22:06,480
is really x86

00:22:08,789 --> 00:22:15,059
so when you're looking at the supported

00:22:12,039 --> 00:22:21,250
machine types that we see in the kernel

00:22:15,059 --> 00:22:25,529
there are on 32-bit arm that's really

00:22:21,250 --> 00:22:25,529
the large majority of all of those

00:22:26,440 --> 00:22:34,489
we have way more 32-bit arm machines and

00:22:31,579 --> 00:22:38,179
everything else combined but then again

00:22:34,489 --> 00:22:41,989
most of these are also all the machines

00:22:38,179 --> 00:22:44,749
that are probably on their way out in

00:22:41,989 --> 00:22:46,999
the long run that have stopped getting

00:22:44,749 --> 00:22:48,469
updates infield people might still be

00:22:46,999 --> 00:22:51,169
using them they might be running their

00:22:48,469 --> 00:22:57,679
own code but the products are on the way

00:22:51,169 --> 00:23:00,919
of the bring down when we look at how

00:22:57,679 --> 00:23:03,829
this changed over time here we can we

00:23:00,919 --> 00:23:06,799
should look at the yellow and green

00:23:03,829 --> 00:23:08,690
lines can see the yellow line is

00:23:06,799 --> 00:23:11,719
starting to stagnate

00:23:08,690 --> 00:23:13,789
so 32-bit arm we're still growing and we

00:23:11,719 --> 00:23:18,339
had a much higher level but the growth

00:23:13,789 --> 00:23:20,329
is getting small our wares and 64-bit

00:23:18,339 --> 00:23:22,219
there are still the exponential growth

00:23:20,329 --> 00:23:25,279
that you expect to see from a new

00:23:22,219 --> 00:23:27,289
platform and I expect this to go on for

00:23:25,279 --> 00:23:30,440
another like five to ten years at which

00:23:27,289 --> 00:23:35,299
point we'll be removing more 32-bit

00:23:30,440 --> 00:23:37,789
architectures than adding so let's look

00:23:35,299 --> 00:23:39,950
back at the word map and how it's

00:23:37,789 --> 00:23:45,889
changed one of the things that happened

00:23:39,950 --> 00:23:47,629
few years ago in 2018 I removed eight or

00:23:45,889 --> 00:23:50,029
nine architectures from the kernel and

00:23:47,629 --> 00:23:53,509
these have all been on the bring down

00:23:50,029 --> 00:23:56,119
path there you can still buy some of

00:23:53,509 --> 00:23:58,190
these but none of them have seen kernel

00:23:56,119 --> 00:24:00,229
updates in a long time so nobody is

00:23:58,190 --> 00:24:02,209
working on upstreaming of any new

00:24:00,229 --> 00:24:05,419
patches because nobody's interested in

00:24:02,209 --> 00:24:08,179
these they would run some old 2.6 kernel

00:24:05,419 --> 00:24:10,979
and not get any updates and that point

00:24:08,179 --> 00:24:14,079
we just removed them all

00:24:10,979 --> 00:24:18,369
also a lot of those cars they still live

00:24:14,079 --> 00:24:20,169
on in microcontrollers because they are

00:24:18,369 --> 00:24:23,859
fairly power efficient and the companies

00:24:20,169 --> 00:24:25,809
that made them still own them and they

00:24:23,859 --> 00:24:27,190
might have already had microcontrollers

00:24:25,809 --> 00:24:32,409
who just don't run Linux on them anymore

00:24:27,190 --> 00:24:35,049
so all of these are consolidating

00:24:32,409 --> 00:24:40,570
two-armed actually none of those went

00:24:35,049 --> 00:24:41,859
anywhere else then another thing that

00:24:40,570 --> 00:24:45,579
happened is that a lot of CPU

00:24:41,859 --> 00:24:46,709
architectures just completely end at

00:24:45,579 --> 00:24:49,779
some point

00:24:46,709 --> 00:24:52,709
these are still all sold people are

00:24:49,779 --> 00:24:52,709
still working on them

00:24:54,260 --> 00:25:01,110
after having released new CPUs every one

00:24:57,270 --> 00:25:03,360
or two years all of these stopped

00:25:01,110 --> 00:25:06,060
getting updates and these are all the

00:25:03,360 --> 00:25:07,980
latest generation of a CPU core by one

00:25:06,060 --> 00:25:11,340
of their one of these companies and

00:25:07,980 --> 00:25:15,630
after 2017 they have not released a new

00:25:11,340 --> 00:25:18,720
one it may be that I got one of one or

00:25:15,630 --> 00:25:20,850
two of these wrong but most of them I

00:25:18,720 --> 00:25:23,910
don't expect to see any in the updated

00:25:20,850 --> 00:25:26,900
CPU cards but people are still putting

00:25:23,910 --> 00:25:26,900
those into products

00:25:27,210 --> 00:25:33,580
then we have seen a lot of migration of

00:25:30,280 --> 00:25:37,240
users away from the architectures that

00:25:33,580 --> 00:25:38,650
are kind of obsolete and also of the

00:25:37,240 --> 00:25:40,299
architectures that still have a big

00:25:38,650 --> 00:25:44,440
market share and are not obsolete yet

00:25:40,299 --> 00:25:46,600
and these are moving to either x86 or

00:25:44,440 --> 00:25:49,169
arm so those boxes are getting bigger on

00:25:46,600 --> 00:25:49,169
our world map

00:25:49,450 --> 00:25:57,580
and then we have architectures with new

00:25:53,500 --> 00:26:00,669
hardware and that obviously includes x86

00:25:57,580 --> 00:26:01,149
and arm but there were a few surprising

00:26:00,669 --> 00:26:02,769
ones

00:26:01,149 --> 00:26:04,779
so for RISC 5 I checked there were

00:26:02,769 --> 00:26:08,769
actually some like 50 new micro

00:26:04,779 --> 00:26:12,510
architectures done in the last year but

00:26:08,769 --> 00:26:12,510
not a single product based on them

00:26:13,019 --> 00:26:18,250
IBM still has two server architectures

00:26:15,700 --> 00:26:21,549
that are not SOC still make a lot of

00:26:18,250 --> 00:26:23,830
money out of those and then some of the

00:26:21,549 --> 00:26:27,279
other architectures people are either

00:26:23,830 --> 00:26:32,639
shrinking the existing designs or they

00:26:27,279 --> 00:26:35,800
are making new cars and hope to still

00:26:32,639 --> 00:26:38,380
have a business

00:26:35,800 --> 00:26:42,730
beside arm and risk five on the embedded

00:26:38,380 --> 00:26:44,710
space in the future one very interesting

00:26:42,730 --> 00:26:47,320
point that I found is that almost all

00:26:44,710 --> 00:26:48,970
the big endian ones are getting away so

00:26:47,320 --> 00:26:53,100
we have a couple of architectures that

00:26:48,970 --> 00:26:56,140
have gone away from big endian products

00:26:53,100 --> 00:26:58,450
from new big-endian products and just

00:26:56,140 --> 00:27:00,520
changed their designs to little endian

00:26:58,450 --> 00:27:02,460
or change the software if you can run

00:27:00,520 --> 00:27:06,780
both of them

00:27:02,460 --> 00:27:09,010
we had some companies that used to be

00:27:06,780 --> 00:27:11,620
used to have big and admits and they

00:27:09,010 --> 00:27:14,410
moved to a little endian arm we had

00:27:11,620 --> 00:27:18,100
those that are just not producing any

00:27:14,410 --> 00:27:20,500
new chips and we had those that moved to

00:27:18,100 --> 00:27:22,990
risk five instead of moving to arm and

00:27:20,500 --> 00:27:27,150
the only one that really remains is the

00:27:22,990 --> 00:27:27,150
IBM Z architecture

00:27:27,420 --> 00:27:36,270
so with that move the world looks like

00:27:32,310 --> 00:27:39,720
this and iBM is getting pretty alone in

00:27:36,270 --> 00:27:42,870
the upper right corner but we also had

00:27:39,720 --> 00:27:45,630
new architectures most importantly of

00:27:42,870 --> 00:27:48,420
course RISC 5 as I said there's very

00:27:45,630 --> 00:27:50,580
little in terms of architectures that we

00:27:48,420 --> 00:27:52,710
all read like SOC architectures we

00:27:50,580 --> 00:27:55,110
already support in the kernel but

00:27:52,710 --> 00:27:58,380
everybody thinks they will be big in the

00:27:55,110 --> 00:28:00,090
future and synopsis Ark is similar in a

00:27:58,380 --> 00:28:06,170
lot of ways but very different in other

00:28:00,090 --> 00:28:06,170
ways so

00:28:07,070 --> 00:28:11,990
oopss ark the ark has been around for 25

00:28:09,320 --> 00:28:13,880
years almost as long as arm maybe even I

00:28:11,990 --> 00:28:14,600
don't know it's been around for a long

00:28:13,880 --> 00:28:17,179
time

00:28:14,600 --> 00:28:20,840
um they have fairly active ecosystem

00:28:17,179 --> 00:28:23,990
they have had a number of as ICS running

00:28:20,840 --> 00:28:26,960
Linux but my impression is they also get

00:28:23,990 --> 00:28:29,049
more into the space that doesn't run

00:28:26,960 --> 00:28:31,250
Linux it's very hard to know because

00:28:29,049 --> 00:28:34,070
they don't seem to be as aggressive

00:28:31,250 --> 00:28:36,490
about upstreaming the platform support

00:28:34,070 --> 00:28:38,659
so either there are no platforms or

00:28:36,490 --> 00:28:42,429
there are a lot of platforms that are on

00:28:38,659 --> 00:28:42,429
it that they don't actually upstream

00:28:44,509 --> 00:28:51,360
and then there's couple more

00:28:48,360 --> 00:28:54,289
architectures basically most of these

00:28:51,360 --> 00:28:57,720
have already been obsoleted by risk five

00:28:54,289 --> 00:28:59,700
so some companies apparently move to

00:28:57,720 --> 00:29:02,340
risk decided on the move to risk five

00:28:59,700 --> 00:29:04,049
and then decided to upstream their

00:29:02,340 --> 00:29:06,299
existing platforms because they

00:29:04,049 --> 00:29:09,750
recognize that having open source

00:29:06,299 --> 00:29:11,519
support is nice and then you have some

00:29:09,750 --> 00:29:13,510
tsps that we merged a couple of years

00:29:11,519 --> 00:29:15,640
ago

00:29:13,510 --> 00:29:18,130
but these seem to never have caught on a

00:29:15,640 --> 00:29:20,559
big market running Linux so they're also

00:29:18,130 --> 00:29:22,860
running other things but these are still

00:29:20,559 --> 00:29:25,140
around

00:29:22,860 --> 00:29:29,490
so the new architects I put them there

00:29:25,140 --> 00:29:31,950
as I said Ark is huge they are probably

00:29:29,490 --> 00:29:34,620
the second most shipped architecture

00:29:31,950 --> 00:29:38,010
after arm but they're not very visible

00:29:34,620 --> 00:29:39,390
in Linux and risk five I put there

00:29:38,010 --> 00:29:41,309
because there's a lot of work going on

00:29:39,390 --> 00:29:47,370
even if there you can't really buy much

00:29:41,309 --> 00:29:51,110
hardware just to prove my point here I

00:29:47,370 --> 00:29:54,059
made a list of all the architectures and

00:29:51,110 --> 00:29:58,380
how the number of change sets in the

00:29:54,059 --> 00:30:01,169
Canada changes over time and you can see

00:29:58,380 --> 00:30:03,200
that 32-bit arm is already drinking to

00:30:01,169 --> 00:30:06,029
half of what it used to be

00:30:03,200 --> 00:30:09,059
64-bit arm keeps growing and currently

00:30:06,029 --> 00:30:12,090
they are roughly the same sort 32-bit

00:30:09,059 --> 00:30:14,039
arm 64-bit arm and 64-bit x86 they're

00:30:12,090 --> 00:30:17,010
about the same and they make up most of

00:30:14,039 --> 00:30:19,080
the changes overall hope you see had a

00:30:17,010 --> 00:30:23,070
pretty good run but they also seem to be

00:30:19,080 --> 00:30:25,260
declining and then you have MIPS and

00:30:23,070 --> 00:30:27,389
s/390 as something that you can still

00:30:25,260 --> 00:30:29,899
see but they're way at the bottom

00:30:27,389 --> 00:30:33,929
everything else is really in the noise

00:30:29,899 --> 00:30:36,330
this is the noise as you can see risk 5

00:30:33,929 --> 00:30:38,760
now sticks out a little bit at the at

00:30:36,330 --> 00:30:43,190
the end and then you had others like

00:30:38,760 --> 00:30:47,210
spark and arc that had times of activity

00:30:43,190 --> 00:30:47,210
but I'm not really there anymore

00:30:48,780 --> 00:30:54,660
so this is where we're at at the moment

00:30:50,820 --> 00:30:58,500
I get to my predictions for where we

00:30:54,660 --> 00:31:02,340
will be in the next 10 years I think

00:30:58,500 --> 00:31:06,330
that the three architectures x86 arm 64

00:31:02,340 --> 00:31:09,900
and risk 5 will basically be splitting

00:31:06,330 --> 00:31:13,050
the SOC market three ways very hard to

00:31:09,900 --> 00:31:17,220
tell which one will be bigger because we

00:31:13,050 --> 00:31:22,020
hope that it's arm up streaming will get

00:31:17,220 --> 00:31:24,120
better we will still see 32-bit chips

00:31:22,020 --> 00:31:27,390
get released for a long time but I think

00:31:24,120 --> 00:31:29,460
that in 2030 we will have seen the last

00:31:27,390 --> 00:31:31,500
one getting released and then probably

00:31:29,460 --> 00:31:34,080
another 10 years after the last release

00:31:31,500 --> 00:31:37,220
while people put that trip into new

00:31:34,080 --> 00:31:41,700
products and another 10 years of

00:31:37,220 --> 00:31:44,160
continued usage of these products so

00:31:41,700 --> 00:31:47,430
that's probably another 25 years maybe

00:31:44,160 --> 00:31:48,900
that people will use 32-bit chips which

00:31:47,430 --> 00:31:54,210
is very important to me because I just

00:31:48,900 --> 00:31:57,600
spent a long time on the 2038 problem

00:31:54,210 --> 00:32:02,389
and I don't think there will be any new

00:31:57,600 --> 00:32:06,269
icers I think that time has gone but

00:32:02,389 --> 00:32:08,369
128-bit computing either making pointers

00:32:06,269 --> 00:32:11,759
longer making physical address based

00:32:08,369 --> 00:32:16,080
longer or we got the talk on Murillo

00:32:11,759 --> 00:32:19,649
under the cherry architecture there was

00:32:16,080 --> 00:32:23,429
a talk last week that also has a pretty

00:32:19,649 --> 00:32:26,309
good chance of at least starting to

00:32:23,429 --> 00:32:28,950
become visible over the next 10 years in

00:32:26,309 --> 00:32:33,149
products and I don't think that any of

00:32:28,950 --> 00:32:35,940
the other ones will still make it ok

00:32:33,149 --> 00:32:37,590
that's it for my talk and now I shall

00:32:35,940 --> 00:32:41,720
have a look at some of the questions I

00:32:37,590 --> 00:32:41,720
saw so you guys typing away there

00:32:42,980 --> 00:32:47,330
so drew is asking did you discover mb7

00:32:45,320 --> 00:32:51,710
systems using more than two gigabyte in

00:32:47,330 --> 00:32:54,110
your research yes I did there are most

00:32:51,710 --> 00:32:55,610
importantly the TI Keystone two systems

00:32:54,110 --> 00:32:59,059
there are some that use up to eight

00:32:55,610 --> 00:33:01,760
gigabytes and they will still be around

00:32:59,059 --> 00:33:04,179
for a couple of years there's an

00:33:01,760 --> 00:33:06,500
interesting discussion going on about

00:33:04,179 --> 00:33:09,980
removing hi monster part which would

00:33:06,500 --> 00:33:11,840
limit the maximum usable size to some

00:33:09,980 --> 00:33:13,909
night two gigabyte for any 32-bit

00:33:11,840 --> 00:33:16,309
architecture and if we do some tricks in

00:33:13,909 --> 00:33:19,100
the kernel we may extend that to two to

00:33:16,309 --> 00:33:22,340
four gigabytes but eight gigabytes

00:33:19,100 --> 00:33:27,500
systems we basically have to wait until

00:33:22,340 --> 00:33:29,779
they are all in the the bring down phase

00:33:27,500 --> 00:33:32,090
and don't get updates to later Karnas

00:33:29,779 --> 00:33:35,450
anymore before we can actually remove

00:33:32,090 --> 00:33:38,000
the Hyneman support and then John asks

00:33:35,450 --> 00:33:41,029
are people migrating to armed and

00:33:38,000 --> 00:33:42,740
running big endian or actually switching

00:33:41,029 --> 00:33:45,740
to armed and little ending at the same

00:33:42,740 --> 00:33:48,710
time I'd say both happens but the latter

00:33:45,740 --> 00:33:52,460
is more common there are some large code

00:33:48,710 --> 00:33:54,830
bases where people rely on old code that

00:33:52,460 --> 00:33:59,149
is not little-endian safe and some of

00:33:54,830 --> 00:34:01,279
those run it on arm using big endian

00:33:59,149 --> 00:34:03,440
kernels but it is getting less and less

00:34:01,279 --> 00:34:05,500
common

00:34:03,440 --> 00:34:05,500
you

00:34:05,770 --> 00:34:11,980
and then there's a question in regards

00:34:09,730 --> 00:34:13,840
to smaller embedded systems what are the

00:34:11,980 --> 00:34:16,450
minimum requirements for running Linux

00:34:13,840 --> 00:34:19,240
besides size of memory I'm the filibus

00:34:16,450 --> 00:34:21,580
philosophical side could there be Linux

00:34:19,240 --> 00:34:25,600
without support for MMU yes there's

00:34:21,580 --> 00:34:37,810
actually a lot of that ahead on one of

00:34:25,600 --> 00:34:41,100
my earlier slides I showed there's

00:34:37,810 --> 00:34:45,700
actually our v7m would be an example

00:34:41,100 --> 00:34:47,500
without an MMU and we have lots of other

00:34:45,700 --> 00:34:48,909
systems without Mme you and those tend

00:34:47,500 --> 00:34:52,119
to be the smallest ones in particular

00:34:48,909 --> 00:34:58,030
because there is still a demand for very

00:34:52,119 --> 00:34:59,980
cheap systems with not a lot of CPU

00:34:58,030 --> 00:35:01,780
performs on a lot of memory and if you

00:34:59,980 --> 00:35:04,810
have an arm CPU that means you probably

00:35:01,780 --> 00:35:08,250
haven't cortex-m and they don't have an

00:35:04,810 --> 00:35:08,250
MMU but they do run Linux

00:35:09,690 --> 00:35:17,820
and that's it from me any other

00:35:15,310 --> 00:35:17,820
questions

00:35:20,869 --> 00:35:28,539
yes question from God can you provide

00:35:23,119 --> 00:35:28,539
some general info about the subtree

00:35:29,660 --> 00:35:35,240
for getting code included is their

00:35:31,730 --> 00:35:37,010
website mailing lists yes so this this

00:35:35,240 --> 00:35:40,369
is a topic for a whole new talk of

00:35:37,010 --> 00:35:43,490
course we have the socket kernel.org

00:35:40,369 --> 00:35:45,309
address where we take patches that are

00:35:43,490 --> 00:35:47,869
associate

00:35:45,309 --> 00:35:51,770
usually we take Petrus from maintain us

00:35:47,869 --> 00:35:54,619
that are already maintaining an SLC

00:35:51,770 --> 00:35:56,630
family but if you have a new SOC and you

00:35:54,619 --> 00:36:00,530
want to maintain it or there's already

00:35:56,630 --> 00:36:03,650
support and in the kernel but no

00:36:00,530 --> 00:36:06,380
maintainer left then sock at kernel.org

00:36:03,650 --> 00:36:08,990
would be the point of contact you just

00:36:06,380 --> 00:36:12,380
write to us if you have something about

00:36:08,990 --> 00:36:16,150
upstream generally we tend to be fairly

00:36:12,380 --> 00:36:19,599
liberal about adding you SOC support

00:36:16,150 --> 00:36:22,730
even if it's very rudimentary but then

00:36:19,599 --> 00:36:24,799
if very rudimentary port stays around

00:36:22,730 --> 00:36:27,289
for a couple of years we'd also throw it

00:36:24,799 --> 00:36:30,440
out very quickly because it's clear that

00:36:27,289 --> 00:36:34,940
once the bring up has stopped that can

00:36:30,440 --> 00:36:36,940
only go down from there and if it's not

00:36:34,940 --> 00:36:40,369
functional then we can throw it out

00:36:36,940 --> 00:36:42,500
Robin asks in your role as a sock sub

00:36:40,369 --> 00:36:45,049
maintainer are there any specific safety

00:36:42,500 --> 00:36:49,760
security hygiene aspects you care about

00:36:45,049 --> 00:36:51,140
um I don't think anything specific we

00:36:49,760 --> 00:36:54,950
tend to work the same as all the other

00:36:51,140 --> 00:36:58,849
maintain us I want to know who I get the

00:36:54,950 --> 00:37:03,660
pictures from I want signs its tags when

00:36:58,849 --> 00:37:10,410
when I get Petrus mo

00:37:03,660 --> 00:37:13,289
of the work we fan out to the next level

00:37:10,410 --> 00:37:15,930
down so we basically only take Petrus

00:37:13,289 --> 00:37:17,849
from the platform maintain us and we

00:37:15,930 --> 00:37:21,510
have to trust them to do the right thing

00:37:17,849 --> 00:37:23,819
so we the the main thing we do is we

00:37:21,510 --> 00:37:25,820
limit the number of people we pull from

00:37:23,819 --> 00:37:28,520
regularly

00:37:25,820 --> 00:37:31,610
and there's a question is there a

00:37:28,520 --> 00:37:33,620
specific are v7m soccer board that you

00:37:31,610 --> 00:37:37,430
can recommend for particular ease of

00:37:33,620 --> 00:37:40,400
getting started arm v7m I generally do

00:37:37,430 --> 00:37:42,290
not do not recommend doing any of it the

00:37:40,400 --> 00:37:47,960
best support it probably is still the

00:37:42,290 --> 00:37:51,740
stm32 evan that is the one that I

00:37:47,960 --> 00:37:54,020
remember last seen edges for theirs if

00:37:51,740 --> 00:37:58,790
you're interested more and know um you

00:37:54,020 --> 00:38:01,430
then arm v7m there's the latest one that

00:37:58,790 --> 00:38:03,140
was added as the 64-bit RISC five board

00:38:01,430 --> 00:38:05,330
that's actually the only is five bought

00:38:03,140 --> 00:38:08,000
that supported in the karna that might

00:38:05,330 --> 00:38:09,560
be interesting just for fun reasons I

00:38:08,000 --> 00:38:11,950
would not recommend any of that for a

00:38:09,560 --> 00:38:11,950
product

00:38:12,480 --> 00:38:14,540
you

00:38:14,650 --> 00:38:21,700
but generally having like the best the

00:38:18,759 --> 00:38:24,099
ethanol Sam 9 X 60 which does have an

00:38:21,700 --> 00:38:27,369
MMU but is in the same space so that's

00:38:24,099 --> 00:38:29,980
the arm 9 CPU that was recently added to

00:38:27,369 --> 00:38:33,249
the kernel and that is very well

00:38:29,980 --> 00:38:36,460
supported and would be in the similar

00:38:33,249 --> 00:38:39,059
price range as any of the cortex-m

00:38:36,460 --> 00:38:39,059

YouTube URL: https://www.youtube.com/watch?v=cAPbqmZG84Q


