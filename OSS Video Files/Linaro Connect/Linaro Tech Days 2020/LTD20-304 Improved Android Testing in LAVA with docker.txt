Title: LTD20-304 Improved Android Testing in LAVA with docker
Publication date: 2020-04-01
Playlist: Linaro Tech Days 2020
Description: 
	Description: 
In this talk we will review the newly added LAVA feature to use docker containers for host-side operations (such as calling adb and fastboot). We will cover the issues with the previous approach of using lxc containers, advantages of this new approach, and a howto on using the new docker support.

Session Speakers
Antonio Terceiro
Engineer (Linaro)


QA Engineer at Linaro; Debian Developer; Free Software developer & activist. Purple belt in Jiu-jitsu, and black belt (a.k.a PhD) in Computer Science. 



You can view this sessions presentation here:
https://connect.linaro.org/resources/ltd20/ltd20-304/
Captions: 
	00:00:00,610 --> 00:00:05,230
hello everyone good morning well it's

00:00:03,969 --> 00:00:06,509
good morning to me I don't know about

00:00:05,230 --> 00:00:09,999
you

00:00:06,509 --> 00:00:12,099
I'm going to present about this product

00:00:09,999 --> 00:00:16,920
that I'm working on for the last half

00:00:12,099 --> 00:00:20,590
year together with the lava TV when I

00:00:16,920 --> 00:00:23,380
started contributing back to the Ching I

00:00:20,590 --> 00:00:26,920
thought was just want me to improve

00:00:23,380 --> 00:00:30,190
Android testing but now I realize it not

00:00:26,920 --> 00:00:32,680
only improves Android but also all the

00:00:30,190 --> 00:00:34,780
areas of inner work that they're going

00:00:32,680 --> 00:00:37,600
to be tested lava are going to be

00:00:34,780 --> 00:00:42,160
impacted by this and that's why I'm

00:00:37,600 --> 00:00:45,160
planning to present today a little bit

00:00:42,160 --> 00:00:48,489
about myself I'm a soft engineer to

00:00:45,160 --> 00:00:50,140
narrow I used to work on squad now I'm

00:00:48,489 --> 00:00:54,220
working on the lava team

00:00:50,140 --> 00:00:58,719
I'm a long time free software developer

00:00:54,220 --> 00:01:00,520
a member of Debian and I also drive by

00:00:58,719 --> 00:01:05,320
page contributed to a lots of projects

00:01:00,520 --> 00:01:10,360
so lots of one-time contributors to

00:01:05,320 --> 00:01:13,299
several projects then our agenda today

00:01:10,360 --> 00:01:15,070
I'm going to do to give a very brief

00:01:13,299 --> 00:01:17,350
introduction to lava so that we

00:01:15,070 --> 00:01:20,950
understand the context in which this

00:01:17,350 --> 00:01:22,630
work is being done I'm present in the

00:01:20,950 --> 00:01:26,350
use cases for using doctor in Laughlin

00:01:22,630 --> 00:01:31,119
and giving an overview of the current

00:01:26,350 --> 00:01:34,210
solution where we are using LXE and the

00:01:31,119 --> 00:01:36,720
problems with it I'm giving an overview

00:01:34,210 --> 00:01:39,700
of the new solution based on docker and

00:01:36,720 --> 00:01:43,090
present the current status of it

00:01:39,700 --> 00:01:48,400
deployment in lava itself is an upstream

00:01:43,090 --> 00:01:52,299
project in the mineral labs so a brief

00:01:48,400 --> 00:01:53,860
introduction to lava lava stands for

00:01:52,299 --> 00:01:57,310
lean our automated validation

00:01:53,860 --> 00:02:00,310
architecture it's basically a tested

00:01:57,310 --> 00:02:03,549
visual system so it has the go of

00:02:00,310 --> 00:02:05,680
running testing software on real

00:02:03,549 --> 00:02:08,349
hardware so it includes

00:02:05,680 --> 00:02:09,069
deploying operating systems to the

00:02:08,349 --> 00:02:11,890
boards

00:02:09,069 --> 00:02:13,599
booting them and then running tests he

00:02:11,890 --> 00:02:16,780
has several uses

00:02:13,599 --> 00:02:21,310
it's used by canaussie - hisses - for

00:02:16,780 --> 00:02:23,530
doing good testing lk f G is that in our

00:02:21,310 --> 00:02:28,239
project it does sitting level testing so

00:02:23,530 --> 00:02:32,019
we test mainline kernels in LTS cannons

00:02:28,239 --> 00:02:34,870
against several news quizzes and report

00:02:32,019 --> 00:02:39,220
that back to the community and children

00:02:34,870 --> 00:02:42,220
are customers velu can use that dead

00:02:39,220 --> 00:02:43,510
project it can also do power consumption

00:02:42,220 --> 00:02:46,750
test benchmarks

00:02:43,510 --> 00:02:49,540
it also supports running motional test

00:02:46,750 --> 00:02:51,700
which is which are tests against

00:02:49,540 --> 00:02:56,970
multiple devices and s communication

00:02:51,700 --> 00:03:08,380
between them and other types of in turn

00:02:56,970 --> 00:03:11,079
device testing so Lara tries to automate

00:03:08,380 --> 00:03:13,420
testing the type of testing people

00:03:11,079 --> 00:03:16,209
usually do manually with development

00:03:13,420 --> 00:03:17,680
balls on their desk so when you are

00:03:16,209 --> 00:03:22,480
doing this type of development you have

00:03:17,680 --> 00:03:26,319
to the developer has to control power

00:03:22,480 --> 00:03:30,489
somehow so maybe people plug and plug in

00:03:26,319 --> 00:03:33,600
plug in bars but maybe they have a power

00:03:30,489 --> 00:03:36,700
relays that are controlled remotely then

00:03:33,600 --> 00:03:40,000
that's how they turn on/off the boards

00:03:36,700 --> 00:03:42,250
they have to have a way of getting to

00:03:40,000 --> 00:03:45,519
the serial console on the board so

00:03:42,250 --> 00:03:48,579
usually people use the relays or even

00:03:45,519 --> 00:03:51,430
direct serial connections then you have

00:03:48,579 --> 00:03:53,019
to control the board should download the

00:03:51,430 --> 00:03:55,450
kernel in the root filesystem from

00:03:53,019 --> 00:03:57,430
somewhere and then you run the board

00:03:55,450 --> 00:04:00,639
then you get a share on it and then you

00:03:57,430 --> 00:04:03,190
run your tests and then you power off

00:04:00,639 --> 00:04:06,549
the board and it starts starting all

00:04:03,190 --> 00:04:13,630
over again and the point of lava is

00:04:06,549 --> 00:04:16,900
automating this so you you submit a test

00:04:13,630 --> 00:04:19,780
job configuration which includes among

00:04:16,900 --> 00:04:22,150
other things the software you want to

00:04:19,780 --> 00:04:27,900
run at the board so it can be a kernel

00:04:22,150 --> 00:04:27,900
dtb a root of s and there is a

00:04:27,950 --> 00:04:33,720
there's a machine that controls each

00:04:30,780 --> 00:04:37,790
board which in lava terms you follow the

00:04:33,720 --> 00:04:41,430
dispatcher which will control power

00:04:37,790 --> 00:04:47,070
connect serial connections we control

00:04:41,430 --> 00:04:51,360
how how the software is provided to the

00:04:47,070 --> 00:04:54,600
board it can be very NFS or TFTP or any

00:04:51,360 --> 00:04:57,300
other method and that's going to

00:04:54,600 --> 00:05:01,740
automate the main overview we usually do

00:04:57,300 --> 00:05:04,110
with development boards so in level we

00:05:01,740 --> 00:05:08,010
have a server which is the component

00:05:04,110 --> 00:05:10,250
that receives the job definitions and we

00:05:08,010 --> 00:05:12,810
have one or more dispatchers which are

00:05:10,250 --> 00:05:15,030
the machines that are actually connected

00:05:12,810 --> 00:05:19,320
to the board that you have the power

00:05:15,030 --> 00:05:24,810
control the sea level a user files to

00:05:19,320 --> 00:05:27,950
the board and so on and the use case we

00:05:24,810 --> 00:05:32,190
want so here is running arbitrary code

00:05:27,950 --> 00:05:34,170
on the lab infrastructure so by

00:05:32,190 --> 00:05:36,380
definition you can now already run

00:05:34,170 --> 00:05:38,670
arbitrary code on the test boards

00:05:36,380 --> 00:05:42,990
because lava has the mechanisms to

00:05:38,670 --> 00:05:46,350
recover if your arbitrary code does

00:05:42,990 --> 00:05:47,760
something running so if if your tests

00:05:46,350 --> 00:05:51,000
which crashes the board

00:05:47,760 --> 00:05:53,850
klava is able to recover it if you flash

00:05:51,000 --> 00:05:58,200
bad kernel love is able to recover it

00:05:53,850 --> 00:06:01,140
but then if you do that on the lab

00:05:58,200 --> 00:06:04,110
machines the first lab people will not

00:06:01,140 --> 00:06:06,870
be happy to and then we have to manual

00:06:04,110 --> 00:06:10,470
work to recover the lab so that's not

00:06:06,870 --> 00:06:12,960
good so for some types of testing we

00:06:10,470 --> 00:06:16,530
want to allow users to run arbitrary

00:06:12,960 --> 00:06:18,690
code but we also don't want them to run

00:06:16,530 --> 00:06:21,030
arbitrary code on our infrastructure so

00:06:18,690 --> 00:06:26,490
there is going to be a middle ground

00:06:21,030 --> 00:06:29,280
there so today some some of the use

00:06:26,490 --> 00:06:32,820
cases that use this functionality is for

00:06:29,280 --> 00:06:35,280
instance Android testing so a lot of the

00:06:32,820 --> 00:06:38,790
Android testing with CTS and VTS

00:06:35,280 --> 00:06:40,180
involves running tests from a host

00:06:38,790 --> 00:06:42,580
machine

00:06:40,180 --> 00:06:44,830
that runs a dbfs would etcetera and

00:06:42,580 --> 00:06:48,130
connect to the to the device on the test

00:06:44,830 --> 00:06:53,289
and that's one of the other scales we

00:06:48,130 --> 00:06:56,830
want to support we want support people

00:06:53,289 --> 00:07:00,009
running their own ADP NFS binaries maybe

00:06:56,830 --> 00:07:02,080
they are testing the the latest Android

00:07:00,009 --> 00:07:04,030
development kit or maybe they need some

00:07:02,080 --> 00:07:07,030
feature that's not available yet in the

00:07:04,030 --> 00:07:10,000
de binary's we have in the lab so that's

00:07:07,030 --> 00:07:11,979
another use case another use case is

00:07:10,000 --> 00:07:16,590
manipulating downloaded images for

00:07:11,979 --> 00:07:19,539
instance you usually need to include

00:07:16,590 --> 00:07:23,770
kernel magic modules into the route FS

00:07:19,539 --> 00:07:27,270
your beauty so you don't want to review

00:07:23,770 --> 00:07:29,949
the new route FS with every kernel

00:07:27,270 --> 00:07:31,690
instead you want to just get the kind of

00:07:29,949 --> 00:07:34,180
models for that can we inject that in

00:07:31,690 --> 00:07:36,940
the root of s so that's something you

00:07:34,180 --> 00:07:38,860
can also do the issue are able to run

00:07:36,940 --> 00:07:41,650
arbitrary code in the loved

00:07:38,860 --> 00:07:44,830
infrastructure and also another use case

00:07:41,650 --> 00:07:48,070
we're starting to support now is running

00:07:44,830 --> 00:07:51,389
custom QA new binaries so it usually if

00:07:48,070 --> 00:07:54,159
you have the qmu binaries that are out

00:07:51,389 --> 00:07:58,750
available in the lab system but then

00:07:54,159 --> 00:08:00,909
also you are developing QQ itself or k

00:07:58,750 --> 00:08:04,270
vm for the kernel and you want to test

00:08:00,909 --> 00:08:06,430
that against the usual of infrastructure

00:08:04,270 --> 00:08:08,380
so then you need to be able to run

00:08:06,430 --> 00:08:11,919
arbitrary boundaries in the

00:08:08,380 --> 00:08:18,880
infrastructure so right now we support

00:08:11,919 --> 00:08:21,520
that using Alexi you you treat a taxi

00:08:18,880 --> 00:08:24,789
basically like a heck of a lava device

00:08:21,520 --> 00:08:28,539
you deploy some fire season to it you

00:08:24,789 --> 00:08:31,330
bullet and then you run tests urine the

00:08:28,539 --> 00:08:35,339
code that you both install in the

00:08:31,330 --> 00:08:39,039
penises you need and do the job you want

00:08:35,339 --> 00:08:40,779
and as I said the the test job needs to

00:08:39,039 --> 00:08:43,719
contain explicit instructions to install

00:08:40,779 --> 00:08:46,149
the needed software so you want to put a

00:08:43,719 --> 00:08:49,900
TV in fast food from somewhere you want

00:08:46,149 --> 00:08:53,800
to connect to the board and do your

00:08:49,900 --> 00:08:54,490
thing this makes the job definition on

00:08:53,800 --> 00:08:58,149
your long

00:08:54,490 --> 00:09:02,500
complex more than then is necessary and

00:08:58,149 --> 00:09:05,950
for instance today to run the Android

00:09:02,500 --> 00:09:07,690
test Suites against a device you need to

00:09:05,950 --> 00:09:10,870
first deploy Aleksey container so you

00:09:07,690 --> 00:09:17,080
have to declare I want a LXE container

00:09:10,870 --> 00:09:19,240
that has Jesus this base system then you

00:09:17,080 --> 00:09:22,089
have to tell lava to boot that

00:09:19,240 --> 00:09:25,240
containers as if it was a regular device

00:09:22,089 --> 00:09:27,250
then you need to have a test definition

00:09:25,240 --> 00:09:30,940
that install the necessary tools inside

00:09:27,250 --> 00:09:32,800
the like delicacy container then you get

00:09:30,940 --> 00:09:35,410
to the real world which is deployed the

00:09:32,800 --> 00:09:37,209
image to the device boot it and then run

00:09:35,410 --> 00:09:41,980
tests from the Aleksey container

00:09:37,209 --> 00:09:45,880
connecting to the device and then here

00:09:41,980 --> 00:09:46,600
we have a brief comparison of alekseeva

00:09:45,880 --> 00:09:49,890
stalker

00:09:46,600 --> 00:09:53,440
none of why I'm saying here is to

00:09:49,890 --> 00:09:56,410
bad-mouth alexey I happen to be one of

00:09:53,440 --> 00:09:58,360
the maintenance of alex in debian so i

00:09:56,410 --> 00:10:01,420
think i think it's a very nice system

00:09:58,360 --> 00:10:05,140
it's just not suited to what we are

00:10:01,420 --> 00:10:08,140
trying to do here so Alex C stands for

00:10:05,140 --> 00:10:11,920
Linux containers it just isn't to manage

00:10:08,140 --> 00:10:14,079
food system containers there is those

00:10:11,920 --> 00:10:16,300
containers the boots didn't have any

00:10:14,079 --> 00:10:20,110
neat system so you have feed one inside

00:10:16,300 --> 00:10:22,089
the container your hagler services start

00:10:20,110 --> 00:10:24,430
just normal so if you have a web server

00:10:22,089 --> 00:10:29,020
inside the container it will start

00:10:24,430 --> 00:10:31,180
normally and the whole point of Alexi is

00:10:29,020 --> 00:10:35,700
to make the continuous look look and

00:10:31,180 --> 00:10:39,370
like look and feel like v ends so it's

00:10:35,700 --> 00:10:42,579
you have less overhead things you have

00:10:39,370 --> 00:10:46,899
you don't have to emulate sittin so you

00:10:42,579 --> 00:10:48,160
have all your processes there and you

00:10:46,899 --> 00:10:51,010
don't have the overhead of running a

00:10:48,160 --> 00:10:54,430
second kernel on the other hand you have

00:10:51,010 --> 00:10:56,890
the the security problems of not running

00:10:54,430 --> 00:11:00,279
separate kernel so that that's a there's

00:10:56,890 --> 00:11:02,560
a trade-off there in one of the points

00:11:00,279 --> 00:11:04,639
of Alexei also is that usually you only

00:11:02,560 --> 00:11:07,829
have available vanilla away

00:11:04,639 --> 00:11:09,690
that is you have a clean driving style

00:11:07,829 --> 00:11:12,209
you have a clean fedora in style you

00:11:09,690 --> 00:11:14,100
have a clean Ubuntu installed and then

00:11:12,209 --> 00:11:17,060
you have to install your things on top

00:11:14,100 --> 00:11:21,870
of that to be able to use the container

00:11:17,060 --> 00:11:26,490
docker on the other hand is suited to

00:11:21,870 --> 00:11:29,730
application containers so it's only one

00:11:26,490 --> 00:11:32,850
application usually with very small sake

00:11:29,730 --> 00:11:35,430
in its system so you have usually you

00:11:32,850 --> 00:11:39,269
have a minimum bid one the container

00:11:35,430 --> 00:11:42,569
just to manage to control the actual

00:11:39,269 --> 00:11:44,550
application that's running there you

00:11:42,569 --> 00:11:49,500
don't have system services so if you

00:11:44,550 --> 00:11:51,629
have a a docker container that has a web

00:11:49,500 --> 00:11:53,129
server inside it won't start

00:11:51,629 --> 00:11:56,430
automatically you have to manually

00:11:53,129 --> 00:12:00,420
install it it is start the web server

00:11:56,430 --> 00:12:04,470
and you have images that are distributed

00:12:00,420 --> 00:12:06,209
applications pre-installed so you don't

00:12:04,470 --> 00:12:07,949
have the vanilla less images that you

00:12:06,209 --> 00:12:10,290
can based on to create your application

00:12:07,949 --> 00:12:12,149
hotels but you can distribute the

00:12:10,290 --> 00:12:15,149
content with everything that you need

00:12:12,149 --> 00:12:18,959
already installed let's make makes it

00:12:15,149 --> 00:12:20,250
easier to to deploy applications because

00:12:18,959 --> 00:12:22,829
you don't have to do anything we just

00:12:20,250 --> 00:12:24,329
grab the container that already has the

00:12:22,829 --> 00:12:28,880
application installed and then you just

00:12:24,329 --> 00:12:32,310
run it and as a curiosity the early days

00:12:28,880 --> 00:12:34,680
docker actually used Alexi as the

00:12:32,310 --> 00:12:38,699
container runtime under the hood these

00:12:34,680 --> 00:12:45,360
days it doesn't anymore but in the early

00:12:38,699 --> 00:12:50,120
days there was a nice nice relationship

00:12:45,360 --> 00:12:57,000
of mutualism between the big platforms

00:12:50,120 --> 00:13:02,519
so in now however we have docker support

00:12:57,000 --> 00:13:05,879
so the this brings us a little few

00:13:02,519 --> 00:13:08,610
advantages one is you can use any

00:13:05,879 --> 00:13:10,170
available pre-built image vision the

00:13:08,610 --> 00:13:13,290
penis is already installed so you don't

00:13:10,170 --> 00:13:16,079
have an again to start contain and then

00:13:13,290 --> 00:13:18,000
stuffing in it you just grab the image

00:13:16,079 --> 00:13:22,800
that that already

00:13:18,000 --> 00:13:26,730
has your finger meet installed and it

00:13:22,800 --> 00:13:31,170
also lets us have a lot shorter test

00:13:26,730 --> 00:13:32,910
definitions in love so the test

00:13:31,170 --> 00:13:34,830
definition to do the same thing using

00:13:32,910 --> 00:13:38,760
doctor is a lot shorter than they wanted

00:13:34,830 --> 00:13:46,350
the same thing on Alexi so we have

00:13:38,760 --> 00:13:48,810
examples ahead so we support those use

00:13:46,350 --> 00:13:50,910
cases that I mean that I mentioned in

00:13:48,810 --> 00:13:52,770
the beginning so you can run PD be in

00:13:50,910 --> 00:13:55,950
fest with inside locked inside docker

00:13:52,770 --> 00:13:57,540
for deploy boot in tests because you

00:13:55,950 --> 00:13:59,490
want to run custom ADB and fastboot

00:13:57,540 --> 00:14:01,970
binaries because you want to run the

00:13:59,490 --> 00:14:04,920
very latest Android development kit or

00:14:01,970 --> 00:14:10,020
for any other reason and that that's

00:14:04,920 --> 00:14:12,060
available since lava 2020 dot 0 2 which

00:14:10,020 --> 00:14:16,200
is the which was the latest release of

00:14:12,060 --> 00:14:19,920
lava you can manipulate images after

00:14:16,200 --> 00:14:23,100
download so which which is the what lkh

00:14:19,920 --> 00:14:23,850
it does today we have examples of Altan

00:14:23,100 --> 00:14:26,550
later

00:14:23,850 --> 00:14:28,350
so that's merged into the master branch

00:14:26,550 --> 00:14:31,650
and you will be available in the next

00:14:28,350 --> 00:14:36,150
release which we are working on it these

00:14:31,650 --> 00:14:38,330
days be available very soon and also the

00:14:36,150 --> 00:14:41,040
custom keep many wineries

00:14:38,330 --> 00:14:43,910
the support great sauce immersion will

00:14:41,040 --> 00:14:50,790
also be available in the next release

00:14:43,910 --> 00:14:53,910
later this week a king so now I have a

00:14:50,790 --> 00:14:57,480
few examples I didn't even bother to

00:14:53,910 --> 00:15:00,960
show the the old way of doing this with

00:14:57,480 --> 00:15:05,070
Alexi because we consider that

00:15:00,960 --> 00:15:09,830
deprecated and we want to move on to use

00:15:05,070 --> 00:15:13,260
daughter because it's simpler and faster

00:15:09,830 --> 00:15:17,280
so first first demo is running ADB and

00:15:13,260 --> 00:15:19,010
fastboot on daughter so you have regular

00:15:17,280 --> 00:15:22,200
deploy definition

00:15:19,010 --> 00:15:26,970
deploy action in your job definition the

00:15:22,200 --> 00:15:30,450
only difference is that now you specify

00:15:26,970 --> 00:15:31,699
the opera image that's all you specify

00:15:30,450 --> 00:15:35,629
the images that you

00:15:31,699 --> 00:15:38,660
before we URLs to the images in their

00:15:35,629 --> 00:15:41,239
names and then you just get a team in

00:15:38,660 --> 00:15:44,259
sets foot inside dr. so you have to

00:15:41,239 --> 00:15:46,129
provide your image in this case I'm the

00:15:44,259 --> 00:15:49,549
example uses the images

00:15:46,129 --> 00:15:53,619
that's called a DB - fat foot and it

00:15:49,549 --> 00:15:56,779
just works it will run fast boot inside

00:15:53,619 --> 00:16:01,639
docker container and we'll lava will

00:15:56,779 --> 00:16:05,660
share the device know with the container

00:16:01,639 --> 00:16:07,100
under the hood and it just works he fat

00:16:05,660 --> 00:16:10,040
food gets caught run fat the docker

00:16:07,100 --> 00:16:17,660
container and it does the deployment of

00:16:10,040 --> 00:16:19,549
the images then to put the device again

00:16:17,660 --> 00:16:22,639
same thing you just specify a docker

00:16:19,549 --> 00:16:26,029
image and then the first boot boot

00:16:22,639 --> 00:16:30,829
method for lava will just run fast food

00:16:26,029 --> 00:16:37,309
inside docker and it will just work and

00:16:30,829 --> 00:16:41,179
for testing also you just add docker

00:16:37,309 --> 00:16:47,089
images in declaration and then you have

00:16:41,179 --> 00:16:50,569
your usual test definition for other the

00:16:47,089 --> 00:16:52,399
only difference here is that this test

00:16:50,569 --> 00:16:55,129
definition will run inside the docker

00:16:52,399 --> 00:16:57,109
container and not inside the device on

00:16:55,129 --> 00:17:01,850
the test so for four people

00:16:57,109 --> 00:17:05,120
test the Android it's like before so the

00:17:01,850 --> 00:17:07,360
test officiers was run the LXE container

00:17:05,120 --> 00:17:10,159
now it runs in the docker container

00:17:07,360 --> 00:17:12,230
which which the defendant is faster in

00:17:10,159 --> 00:17:14,209
it's simpler because you can have your

00:17:12,230 --> 00:17:18,139
container everything you need already

00:17:14,209 --> 00:17:20,089
installed you can even have the big

00:17:18,139 --> 00:17:21,409
tests which themselves inside the

00:17:20,089 --> 00:17:25,189
container again already

00:17:21,409 --> 00:17:28,299
and then you just specify the definition

00:17:25,189 --> 00:17:35,690
that we run inside that container and

00:17:28,299 --> 00:17:38,090
we'll start a test for you a second

00:17:35,690 --> 00:17:42,230
example is manipulating downloaded

00:17:38,090 --> 00:17:45,460
images our kft uses yesterday with Alexi

00:17:42,230 --> 00:17:48,039
and the job definitions are

00:17:45,460 --> 00:17:51,390
more complicated than necessary and now

00:17:48,039 --> 00:17:57,779
we are able to migrate through this new

00:17:51,390 --> 00:18:02,190
way of doing things we have now a new

00:17:57,779 --> 00:18:06,100
down deployment method called downloads

00:18:02,190 --> 00:18:08,799
so if you specify the image do you want

00:18:06,100 --> 00:18:12,760
to download so in this case we have a

00:18:08,799 --> 00:18:15,039
care now we have a modules turbo which

00:18:12,760 --> 00:18:17,860
was built together at the kernel and we

00:18:15,039 --> 00:18:21,010
have a root of s in this case the root

00:18:17,860 --> 00:18:23,200
of s is some fixed with the fac-1 you

00:18:21,010 --> 00:18:24,580
want to use for all the jobs and the

00:18:23,200 --> 00:18:26,020
modules are the ones that were built

00:18:24,580 --> 00:18:30,700
together with the kernel you are using

00:18:26,020 --> 00:18:35,289
for this test then you have now a post

00:18:30,700 --> 00:18:38,559
process section for the deployment where

00:18:35,289 --> 00:18:41,770
you specify the docker image you want to

00:18:38,559 --> 00:18:44,830
use and what commands you want to run in

00:18:41,770 --> 00:18:47,880
the docker image in this case we are in

00:18:44,830 --> 00:18:51,820
this example we are using Q which is two

00:18:47,880 --> 00:18:54,130
developed by the AFT team which does

00:18:51,820 --> 00:18:58,240
this merging of images so you need to

00:18:54,130 --> 00:19:01,059
for instance take the root of s image

00:18:58,240 --> 00:19:03,880
and inject the kernel modules inside it

00:19:01,059 --> 00:19:06,760
and generate a new image of the root of

00:19:03,880 --> 00:19:10,690
s already pre-populated with the carer

00:19:06,760 --> 00:19:14,610
modules and then it modifies the files

00:19:10,690 --> 00:19:18,370
in place where they will download it and

00:19:14,610 --> 00:19:21,970
then you do a second apply to the device

00:19:18,370 --> 00:19:25,840
this time with two difference you

00:19:21,970 --> 00:19:31,419
specify you want to do the deployment

00:19:25,840 --> 00:19:34,899
from a docker image and you want to get

00:19:31,419 --> 00:19:39,190
the image strong downloads protocol

00:19:34,899 --> 00:19:41,590
which a fake protocol we have in lava

00:19:39,190 --> 00:19:44,649
now to access those files that were

00:19:41,590 --> 00:19:47,230
downloaded in the previous step so we

00:19:44,649 --> 00:19:49,419
downloads downloads you do some any

00:19:47,230 --> 00:19:52,029
post-processing you need with the images

00:19:49,419 --> 00:19:55,919
and then you can refer to them later in

00:19:52,029 --> 00:19:59,380
the test job by using the Downloads

00:19:55,919 --> 00:20:03,919
pseudo URL scheme

00:19:59,380 --> 00:20:07,160
then you can get your in this case you

00:20:03,919 --> 00:20:09,919
see here booted image and wrote a faster

00:20:07,160 --> 00:20:12,200
image were files that were created by

00:20:09,919 --> 00:20:17,450
the post-processing the ended freedom

00:20:12,200 --> 00:20:21,919
step in third example is running a

00:20:17,450 --> 00:20:26,330
course on key mu binary it's very simple

00:20:21,919 --> 00:20:31,700
as well you just use the hagar qim

00:20:26,330 --> 00:20:37,880
u-boot method and you specify docker

00:20:31,700 --> 00:20:40,970
image so if if the docker image runs the

00:20:37,880 --> 00:20:43,309
qme binary by default as the entry point

00:20:40,970 --> 00:20:46,370
then you don't have to specify a binary

00:20:43,309 --> 00:20:49,130
or if the image just has the binary and

00:20:46,370 --> 00:20:52,070
you need to call it by hand the new past

00:20:49,130 --> 00:20:56,270
path to the binary and then lava will

00:20:52,070 --> 00:20:58,130
start the VM with that creamy binary

00:20:56,270 --> 00:21:01,540
inside the docker image instead of

00:20:58,130 --> 00:21:12,320
whatever qme binary there is in the lava

00:21:01,540 --> 00:21:15,500
machine so a few closing remarks as a

00:21:12,320 --> 00:21:18,140
reminder we have the ADB fastboot

00:21:15,500 --> 00:21:19,850
support for docker in the first step

00:21:18,140 --> 00:21:23,540
already available the latest global

00:21:19,850 --> 00:21:29,150
release the other two will be available

00:21:23,540 --> 00:21:31,280
in the next release and future workers

00:21:29,150 --> 00:21:34,760
are doing the in the short-term we are

00:21:31,280 --> 00:21:37,130
going to a galaxy to dr. migration guide

00:21:34,760 --> 00:21:41,510
so help people migrate their jobs over

00:21:37,130 --> 00:21:44,570
to the new docker support and we are

00:21:41,510 --> 00:21:47,600
also now working on improvements to

00:21:44,570 --> 00:21:49,250
allow itself to to to be able to run the

00:21:47,600 --> 00:21:53,090
entire level dispatcher as a docker

00:21:49,250 --> 00:21:55,850
container that you unlock a few other

00:21:53,090 --> 00:22:00,320
new skills we have for instance you

00:21:55,850 --> 00:22:02,240
making the easier to deploy lava and

00:22:00,320 --> 00:22:04,490
that's all I had

00:22:02,240 --> 00:22:08,450
I will open the chat window now to see

00:22:04,490 --> 00:22:10,600
if we have questions but feel free to to

00:22:08,450 --> 00:22:10,600
ask

00:22:13,659 --> 00:22:20,899
okay Oh ask see all the stuff is

00:22:18,950 --> 00:22:26,049
described in the lava dots already so no

00:22:20,899 --> 00:22:29,779
we are currently reformulating the lava

00:22:26,049 --> 00:22:31,220
documentation and we need to do an

00:22:29,779 --> 00:22:33,730
effort to document things but they are

00:22:31,220 --> 00:22:37,549
documented in their release notes so

00:22:33,730 --> 00:22:43,429
every time it will release we we rewrite

00:22:37,549 --> 00:22:45,850
some documentation for Fault in their

00:22:43,429 --> 00:22:48,139
release note so if you want to use those

00:22:45,850 --> 00:22:50,899
those features you can check the release

00:22:48,139 --> 00:22:57,380
notes they are there and we are working

00:22:50,899 --> 00:23:00,380
on have having updated dogs Larry

00:22:57,380 --> 00:23:03,260
asks the first detection we install

00:23:00,380 --> 00:23:05,330
something the container how the second

00:23:03,260 --> 00:23:08,830
Test section can share the packages

00:23:05,330 --> 00:23:12,019
which was it all in this first section

00:23:08,830 --> 00:23:14,690
looks like no position talker container

00:23:12,019 --> 00:23:16,940
supported here yes so the point is you

00:23:14,690 --> 00:23:19,700
provide your container which with

00:23:16,940 --> 00:23:22,399
everything already inside so you don't

00:23:19,700 --> 00:23:29,120
you don't have to to install anything

00:23:22,399 --> 00:23:32,840
inside the container so when when I when

00:23:29,120 --> 00:23:34,490
we say here use this image then we

00:23:32,840 --> 00:23:37,370
assume that everything you need is

00:23:34,490 --> 00:23:39,350
already inside image so you don't need

00:23:37,370 --> 00:23:42,139
to you shouldn't need to install

00:23:39,350 --> 00:23:46,220
anything the container add the job

00:23:42,139 --> 00:23:48,559
definition stage the lava test job so

00:23:46,220 --> 00:23:53,120
you provide your continues everything

00:23:48,559 --> 00:23:57,620
you need already inside and that makes

00:23:53,120 --> 00:24:01,159
it easier because you can test your

00:23:57,620 --> 00:24:04,940
container locally after building it and

00:24:01,159 --> 00:24:08,840
after you you push that to some docker

00:24:04,940 --> 00:24:12,889
hub you know that exactly what you push

00:24:08,840 --> 00:24:14,630
is what going to run on lava so you

00:24:12,889 --> 00:24:15,919
don't need to test the installation

00:24:14,630 --> 00:24:18,590
process you do the installation process

00:24:15,919 --> 00:24:21,549
as a regular docker container Butte and

00:24:18,590 --> 00:24:21,549
then it's available

00:24:30,409 --> 00:24:34,519
we have one minute to go

00:24:35,330 --> 00:24:40,190
any more questions

00:24:37,020 --> 00:24:40,190
[Music]

00:24:40,340 --> 00:24:47,820
there's another one from Steven from

00:24:45,769 --> 00:24:50,220
Steven Alan sees no trail

00:24:47,820 --> 00:24:52,889
sometimes hosts false beard flashing is

00:24:50,220 --> 00:24:54,720
simplified into a script is it possible

00:24:52,889 --> 00:24:57,210
to use such a script in the news game

00:24:54,720 --> 00:25:08,340
perhaps via download manipulation

00:24:57,210 --> 00:25:10,860
thinking of deploy stage yes did they

00:25:08,340 --> 00:25:13,470
step to provide for the deployment or

00:25:10,860 --> 00:25:17,120
arbitrary show commands so whatever you

00:25:13,470 --> 00:25:23,610
do that will run inside the container

00:25:17,120 --> 00:25:26,340
you already have access to the to the

00:25:23,610 --> 00:25:28,259
device at that point so if you want to

00:25:26,340 --> 00:25:31,080
do deployment yourself

00:25:28,259 --> 00:25:37,320
call me DB by hand from the

00:25:31,080 --> 00:25:40,230
post-processing it's possible we didn't

00:25:37,320 --> 00:25:46,740
think of it yet and I never test but it

00:25:40,230 --> 00:25:49,470
should work and one last question

00:25:46,740 --> 00:25:58,649
drew asks can this be used for humans

00:25:49,470 --> 00:26:03,480
for u-boot yes so yeah another user ski

00:25:58,649 --> 00:26:07,049
that I didn't mention is if you want to

00:26:03,480 --> 00:26:09,899
run tests against you will show over

00:26:07,049 --> 00:26:11,759
Syria for instance you want to give no

00:26:09,899 --> 00:26:14,850
equals to your boot and then test that

00:26:11,759 --> 00:26:21,379
you boot does the right thing yes

00:26:14,850 --> 00:26:21,379
so yeah I forgot to to add these details

00:26:21,889 --> 00:26:30,120
you have the serial connection between

00:26:27,120 --> 00:26:35,090
the the lava dispatcher in the device is

00:26:30,120 --> 00:26:37,630
also shared with the with the container

00:26:35,090 --> 00:26:39,850
so you can

00:26:37,630 --> 00:26:43,150
from the container I connect via stereo

00:26:39,850 --> 00:26:46,080
to you boot them run whatever tests you

00:26:43,150 --> 00:26:46,080
want yes

00:26:46,650 --> 00:26:52,680

YouTube URL: https://www.youtube.com/watch?v=y-5DjzQztAk


