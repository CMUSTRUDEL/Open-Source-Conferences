Title: LTD20-108 Open up Arm toolchain release
Publication date: 2020-03-25
Playlist: Linaro Tech Days 2020
Description: 
	Description:
Arm has been releasing binary toolchains for Arm CPU processors based on GNU tools, which are used widely to develop for IoT, embedded and Linux. The releases happened a few times each year, following the annual tick of GCC. They were built from a set of scripts developed internally within Arm.

Such a release model works fine but has several problems. The most critical problem, raised by Linaro partners, is the cadence of release: there are too few releases for users to timely access new features and bug fixes in toolchain. As number of release will not increase without consuming more engineering resource in house, which is tight, users have to wait up to 6 months for a bug fix release. Also even when there is release to happen, lack of access to pre-view or alpha release, similarly due to resource constraint, prevents partners to integrate the toolchain in advance. Lastly but very importantly, when partners would like to contribute to build script to improve the release, they don't have a way to do so.

Our solution is to open up the build scripts in a GitHub project, together with supplement mechanism to prepare the build environment and pick-up the right revision of toolchain components. With this project, users can easily clone and build toolchain for Arm, with timely access to the latest features and bug fixes published by tools developers. It will also incorporate contribution from the community to enhance the toolchain for wider use cases.

This solution is under deployment stage and is expected to be ready before BUD20, which will be a good opportunity to improve awareness and encourage contribution. In this section, the presenter will introduce the structure and design principle of the GitHub project, and demonstrate how to use and contribute to it.

Session Speakers
Joey Ye - Director of Engineering (Arm)


15+ years experience on Compiler and Tools. Former GCC developer. Currently lead open source toolchain development in Arm. 



You can find the presentation for this session on connect.linaro.org:
https://connect.linaro.org/resources/ltd20/ltd20-108/
Captions: 
	00:00:00,030 --> 00:00:09,389
okay good morning everyone good morning

00:00:03,510 --> 00:00:13,370
afternoon so um my name is Joey home

00:00:09,389 --> 00:00:15,960
from all and engineer manager of the

00:00:13,370 --> 00:00:19,410
open source food chain group reading on

00:00:15,960 --> 00:00:22,980
so there's coming to talk about the open

00:00:19,410 --> 00:00:26,580
up the tools release from open source

00:00:22,980 --> 00:00:32,309
tools a bit of a background in the

00:00:26,580 --> 00:00:37,320
motivation that musician so arm has been

00:00:32,309 --> 00:00:41,579
releasing the new binary to chance from

00:00:37,320 --> 00:00:44,670
mostly narrow website and our website is

00:00:41,579 --> 00:00:47,250
being reasonably working well we've got

00:00:44,670 --> 00:00:50,579
the number large number for downloads

00:00:47,250 --> 00:00:53,579
and they got people feedback asking

00:00:50,579 --> 00:00:56,850
questions giving feedback it sums

00:00:53,579 --> 00:00:59,489
working well but there are problems in

00:00:56,850 --> 00:01:00,949
in the current way of releasing the

00:00:59,489 --> 00:01:05,760
binary

00:01:00,949 --> 00:01:08,750
the first problem that I got a lot of a

00:01:05,760 --> 00:01:12,799
feedback from feedback can ask from

00:01:08,750 --> 00:01:17,580
particularly in our own members are

00:01:12,799 --> 00:01:20,250
alternative mechanism to release like to

00:01:17,580 --> 00:01:25,590
have a frequent numb official releases

00:01:20,250 --> 00:01:28,520
like a far release bug fix release quick

00:01:25,590 --> 00:01:31,290
release or world for whatever reasons

00:01:28,520 --> 00:01:34,020
that's something that our current

00:01:31,290 --> 00:01:38,880
release medicine doesn't support we have

00:01:34,020 --> 00:01:42,049
like a two releases every year which for

00:01:38,880 --> 00:01:45,560
some of the partners and the users just

00:01:42,049 --> 00:01:49,470
the integrals are too long for them to

00:01:45,560 --> 00:01:55,320
adapt some quick changes so that's one

00:01:49,470 --> 00:01:58,560
other problem another is that the

00:01:55,320 --> 00:02:01,649
project is also fully developed and

00:01:58,560 --> 00:02:03,960
maintained by our mention year and there

00:02:01,649 --> 00:02:06,200
are some contributions of some people

00:02:03,960 --> 00:02:09,720
would like to contribute from from

00:02:06,200 --> 00:02:13,540
community but we don't have a mechanism

00:02:09,720 --> 00:02:17,200
enable them to contribute and we don't

00:02:13,540 --> 00:02:21,220
can we cannot leverage those as a

00:02:17,200 --> 00:02:25,870
contribution to us to reinforce our

00:02:21,220 --> 00:02:30,220
resources which is already not enough to

00:02:25,870 --> 00:02:33,130
fulfill all the feature requests so yeah

00:02:30,220 --> 00:02:36,069
that's the problem I hope that we can

00:02:33,130 --> 00:02:38,410
find a solution before we move to the

00:02:36,069 --> 00:02:41,650
solution to go through a bit of the

00:02:38,410 --> 00:02:45,459
background of how what is nee needs to

00:02:41,650 --> 00:02:52,630
build open-source tool chain basic and

00:02:45,459 --> 00:02:56,500
glue baste substitution so basic it

00:02:52,630 --> 00:03:02,069
needs source codes and the scripts and

00:02:56,500 --> 00:03:04,739
the build environment source code can

00:03:02,069 --> 00:03:08,290
categorize the source code into two

00:03:04,739 --> 00:03:11,410
different sections one is the tool chain

00:03:08,290 --> 00:03:16,750
component which includes the call to

00:03:11,410 --> 00:03:18,790
actions like GCC gdb newly they are the

00:03:16,750 --> 00:03:22,389
key component

00:03:18,790 --> 00:03:25,299
yeah the move the the codes that you

00:03:22,389 --> 00:03:28,269
know increment features and increment

00:03:25,299 --> 00:03:32,049
organizations they are on the active

00:03:28,269 --> 00:03:35,829
development so usually will follow the

00:03:32,049 --> 00:03:40,480
latest release branch and sometimes we

00:03:35,829 --> 00:03:44,019
even cherry-pick some bug fixes from

00:03:40,480 --> 00:03:47,049
chunk to into those a tool chain

00:03:44,019 --> 00:03:50,380
component so yep to chunk remote and

00:03:47,049 --> 00:03:52,780
components are the open source project

00:03:50,380 --> 00:03:57,810
that we call properly continuity and

00:03:52,780 --> 00:03:57,810
there are other supporting components

00:03:57,840 --> 00:04:05,290
whose source code is essential to builds

00:04:02,079 --> 00:04:09,819
the the binary fusion and we don't need

00:04:05,290 --> 00:04:14,049
opt any update then frequently examples

00:04:09,819 --> 00:04:17,019
include mpg and PFR and so it's actually

00:04:14,049 --> 00:04:25,180
they are necessary to be able to jam but

00:04:17,019 --> 00:04:27,380
they just usually we don't care they we

00:04:25,180 --> 00:04:30,080
don't care if they have

00:04:27,380 --> 00:04:32,990
light please diversion or not we just

00:04:30,080 --> 00:04:36,050
pick a version that can build the eating

00:04:32,990 --> 00:04:40,400
is delicately the GCC version then stay

00:04:36,050 --> 00:04:42,740
we said that's it so yeah because some

00:04:40,400 --> 00:04:45,980
the torch and component is supporting

00:04:42,740 --> 00:04:51,490
common component we would deal with then

00:04:45,980 --> 00:04:56,690
differently so we it seems important to

00:04:51,490 --> 00:05:00,350
introduce two concept and see how we do

00:04:56,690 --> 00:05:02,870
is then differently later in addition to

00:05:00,350 --> 00:05:06,380
that we will need some installer files

00:05:02,870 --> 00:05:08,270
for Windows installation package as part

00:05:06,380 --> 00:05:11,930
of the script also need the

00:05:08,270 --> 00:05:17,150
documentation and and example projects

00:05:11,930 --> 00:05:19,760
demo projects quickly start from from

00:05:17,150 --> 00:05:21,470
there and very importantly we need to

00:05:19,760 --> 00:05:24,020
build scripts to put everything together

00:05:21,470 --> 00:05:30,500
and the convert the source code into the

00:05:24,020 --> 00:05:34,760
binary package a last very important

00:05:30,500 --> 00:05:39,230
thing is the build environment it is the

00:05:34,760 --> 00:05:41,990
I we need a host OS and we need some

00:05:39,230 --> 00:05:46,060
build tools in in the build environment

00:05:41,990 --> 00:05:52,240
so that the boots crypts can run so that

00:05:46,060 --> 00:05:55,220
the other necessary tools like make like

00:05:52,240 --> 00:05:59,000
like a Python those the scripts can come

00:05:55,220 --> 00:06:05,210
on out there so so far we've been using

00:05:59,000 --> 00:06:08,540
Ubuntu to build the Google tools that's

00:06:05,210 --> 00:06:12,170
that's an important piece and that's

00:06:08,540 --> 00:06:16,940
them that's a piece that the community

00:06:12,170 --> 00:06:19,220
uses the mostly struggling ways because

00:06:16,940 --> 00:06:20,720
in the past we we did share the build

00:06:19,220 --> 00:06:25,820
scripts and the some of the source code

00:06:20,720 --> 00:06:28,700
but we didn't share the build

00:06:25,820 --> 00:06:31,280
environment so that people are

00:06:28,700 --> 00:06:32,930
struggling to reproduce the builds by

00:06:31,280 --> 00:06:39,680
themselves

00:06:32,930 --> 00:06:44,210
so those those two the two bullet points

00:06:39,680 --> 00:06:50,900
that I highlighted with red the most the

00:06:44,210 --> 00:06:53,110
problematic past that we had in the past

00:06:50,900 --> 00:06:55,520
one is the view environment to

00:06:53,110 --> 00:07:00,889
reproducing can be everything from

00:06:55,520 --> 00:07:04,100
identical environment second is the how

00:07:00,889 --> 00:07:07,610
to manage the active change in GCC being

00:07:04,100 --> 00:07:09,830
hotels gdb and in Europe and also gypsy

00:07:07,610 --> 00:07:14,630
and a Colonel Heather don't side of the

00:07:09,830 --> 00:07:18,410
problem those are the most of the

00:07:14,630 --> 00:07:23,020
compares come from in a regional way of

00:07:18,410 --> 00:07:29,539
releasing the binary and a source code

00:07:23,020 --> 00:07:31,669
so we still in understanding of them but

00:07:29,539 --> 00:07:34,280
how did you check our beaut

00:07:31,669 --> 00:07:36,889
then we're proposing a new solution

00:07:34,280 --> 00:07:41,479
which actually already deployed in this

00:07:36,889 --> 00:07:44,229
basic solution is to open up the open

00:07:41,479 --> 00:07:48,020
source tools in the github project and

00:07:44,229 --> 00:07:50,960
in in the github project which is open

00:07:48,020 --> 00:07:55,490
up the docker config file so that the

00:07:50,960 --> 00:08:00,080
built environment can be duplicated can

00:07:55,490 --> 00:08:03,080
be replicated in the systematic way also

00:08:00,080 --> 00:08:06,800
share the beer scripts installer config

00:08:03,080 --> 00:08:09,409
files the documentation and the sample

00:08:06,800 --> 00:08:13,520
projects there and very importantly

00:08:09,409 --> 00:08:18,710
share pointers to the component source

00:08:13,520 --> 00:08:21,409
code to the source code so that I will

00:08:18,710 --> 00:08:25,190
come to the detail later but basically

00:08:21,409 --> 00:08:28,729
we stay in a project everyone can build

00:08:25,190 --> 00:08:32,000
the tool chain from scratch without a

00:08:28,729 --> 00:08:36,919
very big minimum set up in the local

00:08:32,000 --> 00:08:41,329
machine and the non official light

00:08:36,919 --> 00:08:45,380
releases can be made very easy by just

00:08:41,329 --> 00:08:46,150
commit chance to build scripts or point

00:08:45,380 --> 00:08:50,470
the

00:08:46,150 --> 00:08:54,700
project into a updated sauce

00:08:50,470 --> 00:08:57,280
tree somewhere else for example there's

00:08:54,700 --> 00:09:01,420
a there's a new version of GCC we're

00:08:57,280 --> 00:09:04,690
fixing a critical bug fix what you need

00:09:01,420 --> 00:09:08,290
to do is just have a very quick checking

00:09:04,690 --> 00:09:11,170
into the github project asking it to

00:09:08,290 --> 00:09:14,860
point to a different version of GCC

00:09:11,170 --> 00:09:17,110
source code in a certain branch and then

00:09:14,860 --> 00:09:20,560
everyone else can just build from that

00:09:17,110 --> 00:09:23,430
point of course you can do this by

00:09:20,560 --> 00:09:27,340
tagging the github projects so that the

00:09:23,430 --> 00:09:35,130
people can exactly build from a specific

00:09:27,340 --> 00:09:39,040
pack so a pack o will always return the

00:09:35,130 --> 00:09:46,180
exactly same build result from Dina

00:09:39,040 --> 00:09:51,030
project um go deeper into how these some

00:09:46,180 --> 00:09:53,950
github project works here is the picture

00:09:51,030 --> 00:09:58,630
so at the center it is the keeper

00:09:53,950 --> 00:10:03,310
project we called imposes solution it

00:09:58,630 --> 00:10:06,310
shows up a different name in the show

00:10:03,310 --> 00:10:10,620
Atlanta but basically they skip her

00:10:06,310 --> 00:10:17,050
project connects everything together

00:10:10,620 --> 00:10:19,480
from on the left-hand side and they are

00:10:17,050 --> 00:10:21,970
all the necessary components at least

00:10:19,480 --> 00:10:25,770
the previously needed to build a binary

00:10:21,970 --> 00:10:30,280
chain start from the tools component

00:10:25,770 --> 00:10:35,590
it's actually the the Keita project

00:10:30,280 --> 00:10:40,690
actually has a pointer pointing to the

00:10:35,590 --> 00:10:44,410
actual GCC be hotels newly report so by

00:10:40,690 --> 00:10:49,380
checking house they by cloning I or

00:10:44,410 --> 00:10:52,720
checking out a specific version of fitna

00:10:49,380 --> 00:10:59,180
project this github project it will have

00:10:52,720 --> 00:11:02,300
a dedicated GCC being hotel hash pack

00:10:59,180 --> 00:11:05,240
then the scripts can download GCC

00:11:02,300 --> 00:11:08,120
versions resolution with that hashtag

00:11:05,240 --> 00:11:11,780
and then it can exactly build the you

00:11:08,120 --> 00:11:15,590
GCC version that we would like user to

00:11:11,780 --> 00:11:17,480
build similar approach a prior to the

00:11:15,590 --> 00:11:19,310
supporting components but the only

00:11:17,480 --> 00:11:22,150
difference that because the supporting

00:11:19,310 --> 00:11:25,730
component don't change often such as

00:11:22,150 --> 00:11:29,450
download I release package from their

00:11:25,730 --> 00:11:33,380
website and the Echidna project also

00:11:29,450 --> 00:11:39,580
have four pointer we said mr. Ryu Ryo 22

00:11:33,380 --> 00:11:43,070
the release package and inside the

00:11:39,580 --> 00:11:46,520
github project will have documentation a

00:11:43,070 --> 00:11:48,680
sample project there so all the document

00:11:46,520 --> 00:11:51,050
all the documents and the sample project

00:11:48,680 --> 00:11:54,650
can be developed the developer and

00:11:51,050 --> 00:12:02,090
shared in github which was previously

00:11:54,650 --> 00:12:04,490
only developing inside engine you also

00:12:02,090 --> 00:12:07,340
have the installer scripts and the build

00:12:04,490 --> 00:12:11,180
scripts the build scripts probably the

00:12:07,340 --> 00:12:16,490
most the bits that have the most of

00:12:11,180 --> 00:12:19,160
active change between releases need to

00:12:16,490 --> 00:12:23,090
fix problems and new features have new

00:12:19,160 --> 00:12:25,490
platforms all these end up in change in

00:12:23,090 --> 00:12:29,500
the build script and also in the past we

00:12:25,490 --> 00:12:31,850
see people suffer try to submit change

00:12:29,500 --> 00:12:37,940
proposed some change into the build

00:12:31,850 --> 00:12:41,930
script we didn't have way to do so now

00:12:37,940 --> 00:12:45,370
we might be possible to departments to

00:12:41,930 --> 00:12:51,080
contribute to the good script themselves

00:12:45,370 --> 00:12:54,550
then finally we these kick in hub

00:12:51,080 --> 00:12:56,900
project enables the built environment

00:12:54,550 --> 00:13:00,550
enabled users to set up build

00:12:56,900 --> 00:13:04,700
environment we stalk her config files

00:13:00,550 --> 00:13:08,930
then the user can just generate docker

00:13:04,700 --> 00:13:12,200
image by using the config file in the in

00:13:08,930 --> 00:13:15,590
the project so it doesn't

00:13:12,200 --> 00:13:18,170
try to build a docker image in the local

00:13:15,590 --> 00:13:21,770
library but it's just because that's

00:13:18,170 --> 00:13:26,300
that's probably too heavy weight which

00:13:21,770 --> 00:13:29,410
is published some very simple minimum

00:13:26,300 --> 00:13:32,750
docker config file with all the tools

00:13:29,410 --> 00:13:39,620
Linux cool steps needed to build the

00:13:32,750 --> 00:13:42,710
literature and users anyone who are

00:13:39,620 --> 00:13:46,310
capable of running docker command can

00:13:42,710 --> 00:13:48,590
just set up that Ubuntu token each and

00:13:46,310 --> 00:13:50,540
the build in the whole food chain with

00:13:48,590 --> 00:13:58,000
all the components we stopped the

00:13:50,540 --> 00:14:03,980
squeeze everything so yeah this is an

00:13:58,000 --> 00:14:09,740
example and I used this is how the GCC

00:14:03,980 --> 00:14:15,670
bare-metal to chain so operating and it

00:14:09,740 --> 00:14:20,020
is actually in the github website and

00:14:15,670 --> 00:14:24,770
it's been made a public record addict so

00:14:20,020 --> 00:14:29,060
here's the example you can see he's at

00:14:24,770 --> 00:14:32,090
my probably will not run a live demo as

00:14:29,060 --> 00:14:37,700
simple as what he's shown in the blue

00:14:32,090 --> 00:14:42,200
box just clone this project I believe

00:14:37,700 --> 00:14:45,770
it's has been made public if I can ask

00:14:42,200 --> 00:14:47,510
and we want to try it decide definitely

00:14:45,770 --> 00:14:52,520
I got a feedback from from normal

00:14:47,510 --> 00:14:55,100
ingenious oh yes it is it is public yet

00:14:52,520 --> 00:14:57,590
just simply a clone a tennis and the

00:14:55,100 --> 00:14:59,990
entered a directory and the run a simple

00:14:57,590 --> 00:15:06,620
Butte command and we will build a

00:14:59,990 --> 00:15:09,680
version of for in that it for you

00:15:06,620 --> 00:15:11,170
of course the things can be more can be

00:15:09,680 --> 00:15:16,460
customized

00:15:11,170 --> 00:15:19,100
you can pass command options into the

00:15:16,460 --> 00:15:26,209
build scripts into the these men viewed

00:15:19,100 --> 00:15:29,419
dot H to tell the descriptor to be

00:15:26,209 --> 00:15:33,429
13 revision example if you give feed

00:15:29,419 --> 00:15:38,209
attack then you will build from that tax

00:15:33,429 --> 00:15:41,779
we can also be asking to the beautiful

00:15:38,209 --> 00:15:47,480
windows or not there's a by default you

00:15:41,779 --> 00:15:51,949
wish you only built remix from windows

00:15:47,480 --> 00:16:00,230
binary from Lennox and they also came

00:15:51,949 --> 00:16:03,169
from can II grabbed both x86 and x64 if

00:16:00,230 --> 00:16:06,559
you got the arm box and run this build

00:16:03,169 --> 00:16:09,889
script it will build a new binary option

00:16:06,559 --> 00:16:20,869
that can run on a toxic leaf or that's

00:16:09,889 --> 00:16:24,319
quite handy the yeah so at the back of

00:16:20,869 --> 00:16:27,470
it actually the torch am project itself

00:16:24,319 --> 00:16:33,799
is a primary projected number for other

00:16:27,470 --> 00:16:37,549
projects the Sun as there's a separate

00:16:33,799 --> 00:16:43,549
project behind its called a GU to Qian

00:16:37,549 --> 00:16:49,009
GU permit oh it that projects peels that

00:16:43,549 --> 00:16:53,389
the neutral chair for a metal and as we

00:16:49,009 --> 00:16:59,839
as we gonna to he enable more projects

00:16:53,389 --> 00:17:02,899
like GCC for April fall and for a x64

00:16:59,839 --> 00:17:06,139
then we will keep adding new project and

00:17:02,899 --> 00:17:09,789
a new stock project but at the top level

00:17:06,139 --> 00:17:13,159
you can just build wherever you want by

00:17:09,789 --> 00:17:15,049
involved by cloning the is this

00:17:13,159 --> 00:17:18,529
top-level primary project recover to

00:17:15,049 --> 00:17:20,990
chain it will automatically clone the

00:17:18,529 --> 00:17:24,169
corresponding sub project and a beaut

00:17:20,990 --> 00:17:29,269
from there but that's that's the future

00:17:24,169 --> 00:17:31,490
work we're going to add the the Linux

00:17:29,269 --> 00:17:34,879
package it's now only beautiful bare

00:17:31,490 --> 00:17:37,279
metal package able to add the X 64

00:17:34,879 --> 00:17:39,440
package now they were only build for

00:17:37,279 --> 00:17:42,500
Erica 32 BAM

00:17:39,440 --> 00:17:45,980
so they will be end up in a different

00:17:42,500 --> 00:17:51,159
sub project and they will be invoked by

00:17:45,980 --> 00:17:54,259
the two chain scripts by different

00:17:51,159 --> 00:17:56,330
parameters see if you ask it to the

00:17:54,259 --> 00:17:58,340
build of a metal chain will build they

00:17:56,330 --> 00:18:00,409
ask you to do for Linux attack a

00:17:58,340 --> 00:18:05,019
dilution or I actually wrote each end

00:18:00,409 --> 00:18:09,679
and it will be different package and

00:18:05,019 --> 00:18:17,019
everything is sinking up should be up

00:18:09,679 --> 00:18:17,019

YouTube URL: https://www.youtube.com/watch?v=XV4X6hhMG2I


