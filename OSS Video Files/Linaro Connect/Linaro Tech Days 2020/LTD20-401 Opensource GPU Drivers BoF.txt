Title: LTD20-401 Opensource GPU Drivers BoF
Publication date: 2020-04-08
Playlist: Linaro Tech Days 2020
Description: 
	Description:

BoF to discuss current state of opensource GPU drivers on ARM and plans for the future. What has happened in 2019 and what is planned for 2020.

Session Speakers
Tomeu Vizoso

Principal Software Engineer (Collabora)


You can view this sessions presentation on the Linaro Connect website here:
https://connect.linaro.org/resources/ltd20/ltd20-401/
Captions: 
	00:00:00,890 --> 00:00:08,730
so hi I'm a junior organic all over

00:00:06,270 --> 00:00:10,349
around ethics having one habit

00:00:08,730 --> 00:00:15,030
everywhere from the kernel to

00:00:10,349 --> 00:00:18,119
applications passing through compositor

00:00:15,030 --> 00:00:22,350
sand GPU drivers and it is about GPU

00:00:18,119 --> 00:00:27,570
drivers and we have here they have

00:00:22,350 --> 00:00:30,590
members from almost all the drivers that

00:00:27,570 --> 00:00:30,590
we have him myself

00:00:30,599 --> 00:00:35,430
we don't have thing what we representing

00:00:32,309 --> 00:00:39,629
video or for on this Eric and whole one

00:00:35,430 --> 00:00:43,680
school and that's so for be 3d which

00:00:39,629 --> 00:00:47,070
targets then otherwise we'll be talking

00:00:43,680 --> 00:00:51,030
about food rental which targets Adreno G

00:00:47,070 --> 00:00:54,870
G used from welcome Pam first for ours

00:00:51,030 --> 00:00:57,690
Molly Lima for an older generation of

00:00:54,870 --> 00:00:59,579
those and then Aviv which targets

00:00:57,690 --> 00:01:04,049
several generations of what energy has

00:00:59,579 --> 00:01:06,810
been putting in several excuses so

00:01:04,049 --> 00:01:09,270
before we go to his driver and which

00:01:06,810 --> 00:01:11,460
each person who represents the driver

00:01:09,270 --> 00:01:13,260
we'll be talking a bit about what has

00:01:11,460 --> 00:01:14,390
been done in the last year and what will

00:01:13,260 --> 00:01:18,060
happen next

00:01:14,390 --> 00:01:21,590
we can also mention something for people

00:01:18,060 --> 00:01:25,380
who aren't familiar with home mister

00:01:21,590 --> 00:01:27,509
work happens we have quite a bit which

00:01:25,380 --> 00:01:29,520
helps all the drivers by being part of

00:01:27,509 --> 00:01:32,490
mister we have a continuous integration

00:01:29,520 --> 00:01:37,680
system which allows people to review and

00:01:32,490 --> 00:01:40,079
test on many our platforms there before

00:01:37,680 --> 00:01:44,520
it's integrated into them into the main

00:01:40,079 --> 00:01:46,680
ripple we have compiler for GLSL but we

00:01:44,520 --> 00:01:49,890
also have infrastructure at a lower

00:01:46,680 --> 00:01:53,159
level which allows us to leverage

00:01:49,890 --> 00:01:56,700
compilers for example in clang for this

00:01:53,159 --> 00:01:58,829
year and we offer an abstraction with an

00:01:56,700 --> 00:02:02,689
SL which is small is used by all drivers

00:01:58,829 --> 00:02:06,149
which is called valium and it basically

00:02:02,689 --> 00:02:07,770
has a lot of them coming work so that

00:02:06,149 --> 00:02:09,810
the drivers can focus on what is

00:02:07,770 --> 00:02:12,390
specific to our

00:02:09,810 --> 00:02:14,880
and of course in the camera we also have

00:02:12,390 --> 00:02:17,670
quite a bit of shake ot the DRM

00:02:14,880 --> 00:02:19,380
subsystem not as much as the mode

00:02:17,670 --> 00:02:21,000
setting drivers but there's more and

00:02:19,380 --> 00:02:24,780
more code which is being shared among a

00:02:21,000 --> 00:02:29,090
few riders and what we have our key to

00:02:24,780 --> 00:02:34,650
lobby stance with all these albums and

00:02:29,090 --> 00:02:38,010
is a rowing quite fast so if someone

00:02:34,650 --> 00:02:41,840
wants to talk about 300 oh yes sure

00:02:38,010 --> 00:02:45,060
can you hear me yeah okay

00:02:41,840 --> 00:02:48,180
so yeah in the last year most of the

00:02:45,060 --> 00:02:53,760
focus from our side has been on Audrina

00:02:48,180 --> 00:02:55,620
600 big thing in the last CI last year

00:02:53,760 --> 00:02:58,530
is getting CI up and running so now we

00:02:55,620 --> 00:03:05,340
have three generations of hardware and C

00:02:58,530 --> 00:03:09,110
I also made a lot of progress on the EQ

00:03:05,340 --> 00:03:14,519
P plus three and less three one and

00:03:09,110 --> 00:03:17,340
enabling of Gless three two features the

00:03:14,519 --> 00:03:23,250
core stuff for the last of the core

00:03:17,340 --> 00:03:26,160
stuff for FP 16 recently landed and I'm

00:03:23,250 --> 00:03:28,290
myself not doing too much on the Vulcan

00:03:26,160 --> 00:03:31,019
driver but there's a lot of other people

00:03:28,290 --> 00:03:35,519
who who are that's starting to come

00:03:31,019 --> 00:03:38,700
along and so yeah I guess you can move

00:03:35,519 --> 00:03:41,630
to the next slide so anyways a lot of

00:03:38,700 --> 00:03:45,030
what we're working on now is kind of

00:03:41,630 --> 00:03:48,630
performance and you know last mile

00:03:45,030 --> 00:03:50,130
things you know debugging any apps that

00:03:48,630 --> 00:03:53,459
have problems fixing the couple

00:03:50,130 --> 00:03:57,120
remaining dqp tests for compliance and

00:03:53,459 --> 00:03:59,670
so on yeah we have just been talking

00:03:57,120 --> 00:04:05,459
along with a lot of just functionality

00:03:59,670 --> 00:04:09,860
work for the most of last year the focus

00:04:05,459 --> 00:04:14,280
was on the mid chord chips so it's

00:04:09,860 --> 00:04:19,039
specifically 860 as our flagship but

00:04:14,280 --> 00:04:20,980
everything from teeth 720 up we've had

00:04:19,039 --> 00:04:24,310
consider we've

00:04:20,980 --> 00:04:31,720
put considerable effort into so our Jill

00:04:24,310 --> 00:04:37,720
yes to implementation is near nearly

00:04:31,720 --> 00:04:41,530
passing the DEP tests we have done some

00:04:37,720 --> 00:04:45,790
considerable work on Julius Torito and a

00:04:41,530 --> 00:04:48,100
little bit of compute for 3.1 but the

00:04:45,790 --> 00:04:50,560
focus has been there and more recently

00:04:48,100 --> 00:04:52,450
we've been chucking along on by for our

00:04:50,560 --> 00:04:55,510
support so you'll be hearing about that

00:04:52,450 --> 00:04:57,720
quite seven but I guess it's been an

00:04:55,510 --> 00:05:00,220
open secret if you felt make it love

00:04:57,720 --> 00:05:02,700
since what the police already say then

00:05:00,220 --> 00:05:06,730
we also invested quite a some time do

00:05:02,700 --> 00:05:08,590
from a customer on getting 3720 and

00:05:06,730 --> 00:05:12,040
there and that there was something else

00:05:08,590 --> 00:05:13,690
oh that is a hundred-twenty toward the

00:05:12,040 --> 00:05:16,540
anticipation that they are a smaller

00:05:13,690 --> 00:05:19,660
silicone and then we put all that

00:05:16,540 --> 00:05:24,520
together you know CRE with all the firm

00:05:19,660 --> 00:05:27,160
that we support on each commit and well

00:05:24,520 --> 00:05:30,040
we have this has been protein products

00:05:27,160 --> 00:05:32,740
so we know that our warbling fabric and

00:05:30,040 --> 00:05:34,660
performance has paid off and we have

00:05:32,740 --> 00:05:37,630
started getting at contributions in

00:05:34,660 --> 00:05:42,370
terms of cold from companies which is in

00:05:37,630 --> 00:05:45,780
their products and this was last year

00:05:42,370 --> 00:05:49,240
police have you have anything to add I

00:05:45,780 --> 00:05:51,760
don't think so I guess the biggest

00:05:49,240 --> 00:05:55,020
change last year and compiler side was

00:05:51,760 --> 00:05:58,750
some pretty dramatic rewrites of I'm

00:05:55,020 --> 00:06:02,050
scheduler was the register allocator was

00:05:58,750 --> 00:06:03,700
rewritten essentially from the top it's

00:06:02,050 --> 00:06:07,750
remains to be seen whether those four

00:06:03,700 --> 00:06:11,080
good decisions but the cook quality is

00:06:07,750 --> 00:06:13,330
much better now and more I can make

00:06:11,080 --> 00:06:14,950
sense now and it's not just hey look we

00:06:13,330 --> 00:06:18,250
can move this bit in this place and

00:06:14,950 --> 00:06:19,270
suddenly the we draw a triangle okay

00:06:18,250 --> 00:06:31,120
there might still be a little bit of

00:06:19,270 --> 00:06:33,350
that you know but seeing on the screen

00:06:31,120 --> 00:06:40,430
this next slide

00:06:33,350 --> 00:06:44,750
I am okay so if you want to go ahead so

00:06:40,430 --> 00:06:51,140
for next year which I guess just sir we

00:06:44,750 --> 00:06:53,030
er had the biggest and goal so far has

00:06:51,140 --> 00:06:57,860
been bringing up Bifrost as I mentioned

00:06:53,030 --> 00:07:01,550
this is still very early stages just

00:06:57,860 --> 00:07:04,070
just this week we have our first shaders

00:07:01,550 --> 00:07:09,020
running on by first device going through

00:07:04,070 --> 00:07:10,670
our compiler so there should be some you

00:07:09,020 --> 00:07:11,030
know spinning cubes in the very near

00:07:10,670 --> 00:07:14,480
future

00:07:11,030 --> 00:07:17,390
and some way up from there on the

00:07:14,480 --> 00:07:18,820
Midgard side we're hoping to flush out

00:07:17,390 --> 00:07:22,240
the GS

00:07:18,820 --> 00:07:25,060
three-two-three support as well as

00:07:22,240 --> 00:07:28,940
possibly some performance work we were

00:07:25,060 --> 00:07:32,650
midgard stands to benefit literally from

00:07:28,940 --> 00:07:35,840
the medium P work that for Greenough

00:07:32,650 --> 00:07:38,360
landed by for us benefits even more

00:07:35,840 --> 00:07:40,910
Stowe so now that the core pieces are

00:07:38,360 --> 00:07:46,670
there we're hoping to run through the

00:07:40,910 --> 00:07:48,650
Midgard compiler for a hopefully a

00:07:46,670 --> 00:07:51,020
considerable reduction and spelling in

00:07:48,650 --> 00:07:53,230
to end increase in thread count whether

00:07:51,020 --> 00:07:56,240
it actually happens remains to be seen

00:07:53,230 --> 00:07:59,210
last year was a big year for our lima

00:07:56,240 --> 00:08:01,060
there was like a lot of changes you know

00:07:59,210 --> 00:08:05,300
finally landed in both kernel and

00:08:01,060 --> 00:08:09,410
message drivers we had a lot of changes

00:08:05,300 --> 00:08:11,720
in both compilers and they were had lost

00:08:09,410 --> 00:08:16,250
enough to be able to compile most of the

00:08:11,720 --> 00:08:20,450
shaders that we didn't with we had our

00:08:16,250 --> 00:08:22,820
CI up thanks to collaborate by Libra and

00:08:20,450 --> 00:08:26,750
we well currently we have a pretty

00:08:22,820 --> 00:08:31,820
decent you can be passed rates some

00:08:26,750 --> 00:08:37,400
leisure less - but that's what GPU can

00:08:31,820 --> 00:08:39,800
do we cannot do any less 303 well our

00:08:37,400 --> 00:08:40,760
common stream analysis tool also

00:08:39,800 --> 00:08:43,720
improved a lot

00:08:40,760 --> 00:08:47,290
it's not dumped in raw binary sin amore

00:08:43,720 --> 00:08:50,690
it actually parses

00:08:47,290 --> 00:08:54,460
basically we get pretty nice printout

00:08:50,690 --> 00:08:57,200
and we can analyze it and grab it and

00:08:54,460 --> 00:08:59,450
also comments gene generation has

00:08:57,200 --> 00:09:02,770
improved now we have multiple pending

00:08:59,450 --> 00:09:05,810
jobs we have the dynamic a publication

00:09:02,770 --> 00:09:13,490
and some other stuff as well

00:09:05,810 --> 00:09:16,880
next slide please yes so as for this

00:09:13,490 --> 00:09:17,990
year I guess we still have a lot of work

00:09:16,880 --> 00:09:20,750
to do

00:09:17,990 --> 00:09:23,060
unfortunately that probably won't add

00:09:20,750 --> 00:09:26,120
any new functionality part it should

00:09:23,060 --> 00:09:28,490
improve performance and maybe improve

00:09:26,120 --> 00:09:32,120
compilers little bit to generate better

00:09:28,490 --> 00:09:37,610
codes and of course we still need to

00:09:32,120 --> 00:09:41,870
address remaining DQ filers 70 failures

00:09:37,610 --> 00:09:43,880
and fair number of skills they have been

00:09:41,870 --> 00:09:46,430
working doing the last year on OpenGL as

00:09:43,880 --> 00:09:52,490
a filter one other conformance and they

00:09:46,430 --> 00:09:54,410
got three shaders and and for the next

00:09:52,490 --> 00:09:57,980
year the one who can work on the OpenGL

00:09:54,410 --> 00:10:00,410
is driver and they are well there's this

00:09:57,980 --> 00:10:02,870
work plan to them on a new organ drive

00:10:00,410 --> 00:10:06,290
afraid there have been experiments

00:10:02,870 --> 00:10:09,110
before so there have been work on

00:10:06,290 --> 00:10:13,490
processed addresses basis of meu we

00:10:09,110 --> 00:10:16,250
chose so that each process that uses the

00:10:13,490 --> 00:10:19,900
GPU while it's using it gets its own

00:10:16,250 --> 00:10:22,250
address space so we can just access the

00:10:19,900 --> 00:10:24,650
buffer so for the processes which are

00:10:22,250 --> 00:10:28,270
just the same if you I guess this isn't

00:10:24,650 --> 00:10:32,170
supported in all forms that happen in my

00:10:28,270 --> 00:10:38,180
GP on them but if they're sound I mean

00:10:32,170 --> 00:10:41,320
they can and for the new mix aid as a

00:10:38,180 --> 00:10:45,310
version which has this is GC 7000 l and

00:10:41,320 --> 00:10:50,210
there has been a support for it and

00:10:45,310 --> 00:10:53,080
finally there's a new based a compiler

00:10:50,210 --> 00:10:56,020
that has been really mercy master and

00:10:53,080 --> 00:10:57,560
that we are going to use a lot of

00:10:56,020 --> 00:11:01,640
shakeout

00:10:57,560 --> 00:11:05,779
missa he knew himself and them OpenCL

00:11:01,640 --> 00:11:10,220
for example comes next year oh no I

00:11:05,779 --> 00:11:13,520
didn't as much but well we can see kind

00:11:10,220 --> 00:11:15,470
of a perfect trend I think most of the

00:11:13,520 --> 00:11:18,950
drivers have mentioned they want to keep

00:11:15,470 --> 00:11:21,710
working on conformance most of them I

00:11:18,950 --> 00:11:24,440
support 2-0 quite well

00:11:21,710 --> 00:11:27,500
c20 filled one and fitra knows what

00:11:24,440 --> 00:11:28,760
happens with philip ii and of course

00:11:27,500 --> 00:11:33,110
really wants to get the performance

00:11:28,760 --> 00:11:35,230
better and we have this all these test

00:11:33,110 --> 00:11:38,390
fields which are asked to check how

00:11:35,230 --> 00:11:40,550
conformities our driver and i'm going to

00:11:38,390 --> 00:11:42,650
office as many bags as possible they are

00:11:40,550 --> 00:11:44,529
found specially as we have them in sea

00:11:42,650 --> 00:11:47,420
ice is quite easy to check for

00:11:44,529 --> 00:11:49,850
progressions at least by what is covered

00:11:47,420 --> 00:11:55,370
and i see that they've done well you see

00:11:49,850 --> 00:12:00,260
400 I think it's quite simple or in the

00:11:55,370 --> 00:12:04,300
towards power applications it's quite

00:12:00,260 --> 00:12:07,640
interesting so adoption of your drivers

00:12:04,300 --> 00:12:10,030
who is it going who do you know is using

00:12:07,640 --> 00:12:12,710
it but what are the most important users

00:12:10,030 --> 00:12:18,350
what prevents others from you Seagate

00:12:12,710 --> 00:12:19,550
and what do you think will happen so who

00:12:18,350 --> 00:12:27,500
wants to go first

00:12:19,550 --> 00:12:34,880
I guess I guess I'll buy if you can hear

00:12:27,500 --> 00:12:38,540
me which as I see it there I guess three

00:12:34,880 --> 00:12:43,970
different sectors we see graphics driver

00:12:38,540 --> 00:12:46,420
adoption from one being within the free

00:12:43,970 --> 00:12:50,510
and open-source community in which case

00:12:46,420 --> 00:12:51,980
I'm all of our drivers are as far as I

00:12:50,510 --> 00:12:52,820
know I could and every major

00:12:51,980 --> 00:12:56,980
distribution

00:12:52,820 --> 00:13:00,380
I know if you download the default image

00:12:56,980 --> 00:13:02,089
of Debian incidence and third on any

00:13:00,380 --> 00:13:05,120
machine supported by one of her drivers

00:13:02,089 --> 00:13:09,050
it will be using our open source stack

00:13:05,120 --> 00:13:11,570
and so in that sense there's not a ton

00:13:09,050 --> 00:13:15,170
of reason for people and

00:13:11,570 --> 00:13:16,850
the Atlantic's community do have music

00:13:15,170 --> 00:13:18,260
right her drivers unless there are

00:13:16,850 --> 00:13:20,350
specific informants or performance

00:13:18,260 --> 00:13:25,760
issues which were of course working on

00:13:20,350 --> 00:13:30,440
second sector is this industrial as

00:13:25,760 --> 00:13:36,190
Tamara mentioned first the T step 24

00:13:30,440 --> 00:13:41,740
direct was that as mentioned you know

00:13:36,190 --> 00:13:45,250
I've all that and we've had similar

00:13:41,740 --> 00:13:47,270
projects like that but tight sure

00:13:45,250 --> 00:13:50,750
Christian could fill in more details

00:13:47,270 --> 00:13:53,030
there in this case I mean I can guess

00:13:50,750 --> 00:13:56,930
think we're seeing miss split the users

00:13:53,030 --> 00:14:00,020
the use of our drivers certainly swear

00:13:56,930 --> 00:14:01,820
by them and that's important source of

00:14:00,020 --> 00:14:02,120
income for people work in this March

00:14:01,820 --> 00:14:04,010
Philly

00:14:02,120 --> 00:14:07,580
it just helps the whole community when

00:14:04,010 --> 00:14:10,100
we have that sort of backing force but I

00:14:07,580 --> 00:14:14,180
realize it's still minority but we'll

00:14:10,100 --> 00:14:17,270
see what happens there but I guess the

00:14:14,180 --> 00:14:19,700
third category is just the everybody

00:14:17,270 --> 00:14:22,160
else because there's those two sectors

00:14:19,700 --> 00:14:26,360
makes up a very small fraction of

00:14:22,160 --> 00:14:28,550
drivers out there and the fact is most

00:14:26,360 --> 00:14:31,750
people don't you know what graphic

00:14:28,550 --> 00:14:35,890
drivers are let alone why they should be

00:14:31,750 --> 00:14:39,410
open or closed or whatever which means

00:14:35,890 --> 00:14:41,660
the adoption of our drivers is

00:14:39,410 --> 00:14:45,740
essentially linear to the adoption among

00:14:41,660 --> 00:14:48,920
distributions and among major rock

00:14:45,740 --> 00:14:49,550
systems and I guess we'll see what

00:14:48,920 --> 00:14:53,270
happens there

00:14:49,550 --> 00:14:56,600
I know you know is doing well in this

00:14:53,270 --> 00:15:01,400
respect in first hopefully we'll get

00:14:56,600 --> 00:15:18,160
there someday I don't know it's almost a

00:15:01,400 --> 00:15:20,390
problem for a pipe yeah I'd say one

00:15:18,160 --> 00:15:24,380
barrier I mean there's a lot of people

00:15:20,390 --> 00:15:25,080
out there with snapdragon phones you

00:15:24,380 --> 00:15:26,400
know there may be

00:15:25,080 --> 00:15:29,100
couple of years old they're no longer

00:15:26,400 --> 00:15:32,040
using them as their primary phone and

00:15:29,100 --> 00:15:35,790
they want to tinker around with them but

00:15:32,040 --> 00:15:37,610
the big effort there is often getting an

00:15:35,790 --> 00:15:41,310
upstream colonel working on the device

00:15:37,610 --> 00:15:42,930
which you know there's more people more

00:15:41,310 --> 00:15:45,510
hobbyists hacking on that sort of thing

00:15:42,930 --> 00:15:51,930
these days which is nice to see but it's

00:15:45,510 --> 00:15:54,000
a pretty major effort so Rob at least

00:15:51,930 --> 00:15:56,990
from the llanera site that John me and

00:15:54,000 --> 00:16:01,260
Tim we've been trying to work on having

00:15:56,990 --> 00:16:03,540
some of the devices continued to work

00:16:01,260 --> 00:16:06,720
with me line controls like for for

00:16:03,540 --> 00:16:10,800
example right now we have the pixel

00:16:06,720 --> 00:16:14,030
three bearing a display the the stream

00:16:10,800 --> 00:16:17,010
compression issue working booting to

00:16:14,030 --> 00:16:20,210
sort of Capaldi y but we have a poco f1

00:16:17,010 --> 00:16:25,320
phone which is also the STM 845 based

00:16:20,210 --> 00:16:27,510
which sort of boots to you I yeah yeah I

00:16:25,320 --> 00:16:30,150
mean that's that's good to see I mean

00:16:27,510 --> 00:16:34,250
one of the challenges is that Qualcomm

00:16:30,150 --> 00:16:37,610
has such a firehose of SS ease there's

00:16:34,250 --> 00:16:40,740
massive massive massive amounts of work

00:16:37,610 --> 00:16:47,280
like four times as many people working

00:16:40,740 --> 00:16:48,810
from the kernel yeah but but yeah I mean

00:16:47,280 --> 00:16:51,960
it's good to see that it's good to see

00:16:48,810 --> 00:16:57,120
that it's getting used in AOSP for

00:16:51,960 --> 00:17:03,090
example and right no do you have any

00:16:57,120 --> 00:17:06,660
ideas on the a 650 support I don't have

00:17:03,090 --> 00:17:09,600
one myself I know there are a couple

00:17:06,660 --> 00:17:11,940
folks who are working on the turnip the

00:17:09,600 --> 00:17:16,589
Vulcan side of things who have I believe

00:17:11,940 --> 00:17:18,300
the 650 okay generally there's from a

00:17:16,589 --> 00:17:21,900
user space to end point there's not

00:17:18,300 --> 00:17:26,699
massive differences between different

00:17:21,900 --> 00:17:29,790
GPUs within a given generation okay you

00:17:26,699 --> 00:17:32,880
know I mean when we enabled 618 for

00:17:29,790 --> 00:17:35,190
example though is I don't know handful

00:17:32,880 --> 00:17:41,200
of line patch in Mesa

00:17:35,190 --> 00:17:43,830
okay sorry but there tends to be a

00:17:41,200 --> 00:17:48,240
little bit more work on the colonel side

00:17:43,830 --> 00:17:51,010
because there's different like different

00:17:48,240 --> 00:17:52,390
configuration that like nicely the

00:17:51,010 --> 00:17:56,289
differences within it within a

00:17:52,390 --> 00:17:59,320
generation or on the colonel side okay

00:17:56,289 --> 00:18:06,909
that's that's what I just wanted to know

00:17:59,320 --> 00:18:09,279
thanks yeah yeah I think the general I

00:18:06,909 --> 00:18:12,700
think it has been three years since last

00:18:09,279 --> 00:18:15,220
time well when I was in a project in

00:18:12,700 --> 00:18:18,669
which a customer was using in Harris

00:18:15,220 --> 00:18:24,700
Canal and they chose to use ever comes

00:18:18,669 --> 00:18:27,190
PSP so that was quite cool and NFL so we

00:18:24,700 --> 00:18:34,960
see a lot of customers using it and they

00:18:27,190 --> 00:18:36,549
sometimes and and we are starting to see

00:18:34,960 --> 00:18:42,899
that we said one first

00:18:36,549 --> 00:18:45,039
maybe early narrow we also have that and

00:18:42,899 --> 00:18:47,350
what I'm wondering is about their

00:18:45,039 --> 00:18:56,559
barriers what do you think should change

00:18:47,350 --> 00:19:00,429
so we can see more adoption for me

00:18:56,559 --> 00:19:04,590
personally I'm really hoping to see more

00:19:00,429 --> 00:19:08,380
support for our driver projects from the

00:19:04,590 --> 00:19:11,950
manufacturers of or I guess the hardware

00:19:08,380 --> 00:19:19,000
designers whether that be a couple to

00:19:11,950 --> 00:19:21,029
the SOC or not it is obviously possible

00:19:19,000 --> 00:19:26,440
to write a driver by reverse engineering

00:19:21,029 --> 00:19:30,850
as everybody on this panel has some

00:19:26,440 --> 00:19:33,490
first-hand experience with but I'm and

00:19:30,850 --> 00:19:37,809
why not sure how sustainable that is for

00:19:33,490 --> 00:19:39,909
the long term I want to see I want to

00:19:37,809 --> 00:19:41,679
see arm contributing to I pan frost I

00:19:39,909 --> 00:19:45,149
want to see Qualcomm contributing to

00:19:41,679 --> 00:19:47,200
Freneau and so forth because that's when

00:19:45,149 --> 00:19:48,169
that's one we're past the tipping point

00:19:47,200 --> 00:19:52,220
and I do

00:19:48,169 --> 00:19:56,269
we're getting there I know but both Penn

00:19:52,220 --> 00:19:59,029
Forest and Fergie now are getting Carl

00:19:56,269 --> 00:20:05,989
contributions from the respective

00:19:59,029 --> 00:20:08,809
companies when next moves into proper

00:20:05,989 --> 00:20:13,759
documentation releases and even improper

00:20:08,809 --> 00:20:16,909
use offices and proper means into Mesa

00:20:13,759 --> 00:20:19,609
and not just slapping an MIT license and

00:20:16,909 --> 00:20:21,769
so on a brighter project and throwing it

00:20:19,609 --> 00:20:22,759
over throwing on github and trusting

00:20:21,769 --> 00:20:24,950
that it'll work out

00:20:22,759 --> 00:20:26,440
although that's even then it's better

00:20:24,950 --> 00:20:29,210
than nothing

00:20:26,440 --> 00:20:35,389
I'm hoping we see that going forward and

00:20:29,210 --> 00:20:37,669
not just under NDA either so I see with

00:20:35,389 --> 00:20:44,119
that step the vendors think that their

00:20:37,669 --> 00:20:45,499
job is much better pride right so for

00:20:44,119 --> 00:21:00,070
you got something that has to change we

00:20:45,499 --> 00:21:02,690
have to scale which is so different so

00:21:00,070 --> 00:21:09,889
they are quite isolated from the other

00:21:02,690 --> 00:21:11,960
between this the other so we have bad

00:21:09,889 --> 00:21:13,789
things but also the other side of that

00:21:11,960 --> 00:21:16,190
is because these companies are so B they

00:21:13,789 --> 00:21:18,950
have I also think that they're trying to

00:21:16,190 --> 00:21:20,960
put their own staffing the other product

00:21:18,950 --> 00:21:23,629
and there may be using an older version

00:21:20,960 --> 00:21:27,049
of it or something which is oriented

00:21:23,629 --> 00:21:29,480
towards specific needs and because the

00:21:27,049 --> 00:21:32,480
GPU team is so focused on their next one

00:21:29,480 --> 00:21:34,489
they maybe they they sometimes don't

00:21:32,480 --> 00:21:38,509
have time to support that of the

00:21:34,489 --> 00:21:40,519
timothean company and have interest for

00:21:38,509 --> 00:21:44,239
them you see the open source one because

00:21:40,519 --> 00:21:45,830
that's what they can use yeah I think

00:21:44,239 --> 00:21:49,340
that's that's a good point

00:21:45,830 --> 00:21:53,330
areas a need long life lifetimes and

00:21:49,340 --> 00:21:55,070
long support spans are areas where the

00:21:53,330 --> 00:21:58,720
open source drivers can address better

00:21:55,070 --> 00:21:58,720
than the closed source drivers

00:21:59,760 --> 00:22:10,170
I guess that's why we all can perform so

00:22:02,820 --> 00:22:11,820
much one area I guess from the Android

00:22:10,170 --> 00:22:13,410
side of things that I guess kind of has

00:22:11,820 --> 00:22:15,480
me I don't know I feel like it's a

00:22:13,410 --> 00:22:17,670
little bit of a cloud on the horizon is

00:22:15,480 --> 00:22:19,050
that there's very much a focus you know

00:22:17,670 --> 00:22:21,390
as all this amazing work that's been

00:22:19,050 --> 00:22:23,420
going on to get the GL kind of up and

00:22:21,390 --> 00:22:27,300
running on all these different devices

00:22:23,420 --> 00:22:29,070
has been great but for AOSP I think you

00:22:27,300 --> 00:22:31,740
know in the near term we're gonna see at

00:22:29,070 --> 00:22:33,240
some point the focus shift over to

00:22:31,740 --> 00:22:35,220
Vulcan and I think there's kind of a big

00:22:33,240 --> 00:22:37,590
gap across you know everything at this

00:22:35,220 --> 00:22:39,030
point and so that's one area that kind

00:22:37,590 --> 00:22:40,380
of adds me a little worried and some I

00:22:39,030 --> 00:22:45,990
don't know if anybody hasn't even

00:22:40,380 --> 00:22:47,670
thinking comments on I mean once you've

00:22:45,990 --> 00:22:49,350
figured out enough to write a gallium

00:22:47,670 --> 00:22:54,300
driver you've done a lot of the hard

00:22:49,350 --> 00:22:56,280
work so I mean for us for food Reno both

00:22:54,300 --> 00:22:58,980
the gallium driver and the Vulcan driver

00:22:56,280 --> 00:23:04,170
are sharing the same compiler so there's

00:22:58,980 --> 00:23:05,730
a lot of reuse there you know the and a

00:23:04,170 --> 00:23:07,680
lot of things once the features

00:23:05,730 --> 00:23:09,600
implemented on the gallium side it's not

00:23:07,680 --> 00:23:12,510
too hard to get up and running on Vulcan

00:23:09,600 --> 00:23:15,630
I mean Vulcan does have some things that

00:23:12,510 --> 00:23:19,380
are different from GL and there's there

00:23:15,630 --> 00:23:22,590
is some active reverse engineering going

00:23:19,380 --> 00:23:26,640
on about how Mindless resources work and

00:23:22,590 --> 00:23:28,770
that sort of thing but I wouldn't

00:23:26,640 --> 00:23:32,160
necessarily look at it as completely

00:23:28,770 --> 00:23:33,690
starting from scratch as far as you know

00:23:32,160 --> 00:23:37,320
you already know how the hardware works

00:23:33,690 --> 00:23:39,120
at least and there's a lot of a lot of

00:23:37,320 --> 00:23:48,150
the work is in the compiler which can be

00:23:39,120 --> 00:23:50,730
reused so so I mean it it it's kind of

00:23:48,150 --> 00:23:54,390
maybe not the most immediate priority

00:23:50,730 --> 00:23:56,430
for a lot of folks working on the driver

00:23:54,390 --> 00:23:58,380
who are just trying to get you know

00:23:56,430 --> 00:24:01,260
Desktop Linux for example up and running

00:23:58,380 --> 00:24:03,450
just because there's not a lot of Vulcan

00:24:01,260 --> 00:24:06,270
games and things that use Falken so it's

00:24:03,450 --> 00:24:10,640
a little bit of chicken-and-egg I

00:24:06,270 --> 00:24:10,640
suppose at this point but

00:24:11,039 --> 00:24:16,090
something I think that I've changed in

00:24:13,269 --> 00:24:18,010
the last couple of years is that even if

00:24:16,090 --> 00:24:20,159
some drivers have not the targeting Volk

00:24:18,010 --> 00:24:24,850
and yet they are doing things with that

00:24:20,159 --> 00:24:26,769
mind I saw that compiler of course is

00:24:24,850 --> 00:24:27,190
they become shared infrastructure long

00:24:26,769 --> 00:24:31,539
litany

00:24:27,190 --> 00:24:33,309
Cammisa makes that easier and then you

00:24:31,539 --> 00:24:35,710
have the command stream you will have to

00:24:33,309 --> 00:24:38,409
anyway omit that and you can put it in

00:24:35,710 --> 00:24:40,899
such a place so that when they become

00:24:38,409 --> 00:24:41,760
driver he can be used more easily than

00:24:40,899 --> 00:24:45,909
otherwise

00:24:41,760 --> 00:24:48,010
so yes also we can save some reference

00:24:45,909 --> 00:24:49,419
afterwards but yeah one of the most

00:24:48,010 --> 00:24:51,480
important things is that knowledge of

00:24:49,419 --> 00:24:54,549
the our work and not just that but

00:24:51,480 --> 00:24:56,980
there's also some kind of culture in a

00:24:54,549 --> 00:24:58,630
technical team which designs the GPUs

00:24:56,980 --> 00:25:00,490
and you can and you already know how

00:24:58,630 --> 00:25:02,320
they evolve and then you kind of

00:25:00,490 --> 00:25:06,820
anticipate and everything clicks

00:25:02,320 --> 00:25:09,549
together and as long as people don't let

00:25:06,820 --> 00:25:12,639
me save you from a budget because that's

00:25:09,549 --> 00:25:17,139
quite I have to document it no money see

00:25:12,639 --> 00:25:18,669
that to see that the domain texture is

00:25:17,139 --> 00:25:20,529
quite a bit is very hard at the start

00:25:18,669 --> 00:25:22,899
because we don't know where to grab it

00:25:20,529 --> 00:25:33,700
but once you're happy then they're doing

00:25:22,899 --> 00:25:36,149
another generation I think it's at least

00:25:33,700 --> 00:25:38,590
for Penn for us it just boils down to

00:25:36,149 --> 00:25:42,909
priorities and simple economics

00:25:38,590 --> 00:25:45,880
if if we had a custom or that said here

00:25:42,909 --> 00:25:49,870
we won't we want Volcom to run on this

00:25:45,880 --> 00:25:53,019
Molly device here's you know and

00:25:49,870 --> 00:25:56,289
thousand dollars it would get done it's

00:25:53,019 --> 00:25:57,850
not like there's some Vulcan magic

00:25:56,289 --> 00:26:00,909
that's more difficult than any other

00:25:57,850 --> 00:26:02,919
part of the driver and as Rob was

00:26:00,909 --> 00:26:06,789
mentioning once you've done the gallium

00:26:02,919 --> 00:26:11,139
kind of done the bigger the hard part in

00:26:06,789 --> 00:26:14,230
terms of all the big stuff is known but

00:26:11,139 --> 00:26:18,370
in the meantime until such a mythical

00:26:14,230 --> 00:26:19,710
customer shows up it just thinking for

00:26:18,370 --> 00:26:22,750
end-users

00:26:19,710 --> 00:26:24,130
it seems more productive to focus on the

00:26:22,750 --> 00:26:27,970
Geo it's actually in use

00:26:24,130 --> 00:26:31,480
at least on the Linux side there's I'm

00:26:27,970 --> 00:26:34,030
not aware of too many things that would

00:26:31,480 --> 00:26:38,500
benefit greatly from Vulcan that run on

00:26:34,030 --> 00:26:40,600
Linux and that would be have built for

00:26:38,500 --> 00:26:43,630
armed and will be fast enough to run on

00:26:40,600 --> 00:26:45,280
Mali Vulcan or not Vulcan so it's just

00:26:43,630 --> 00:26:47,920
like that's a huge amount of effort for

00:26:45,280 --> 00:26:49,750
what exactly it's not saying it's

00:26:47,920 --> 00:26:52,270
something that should be done and if I

00:26:49,750 --> 00:26:55,060
had an extra day that we intend that

00:26:52,270 --> 00:26:59,070
genetically wouldn't affect RSI and yes

00:26:55,060 --> 00:27:02,650
I'm sure that'd be what I'm doing but

00:26:59,070 --> 00:27:10,200
given very real time and financial

00:27:02,650 --> 00:27:12,760
constraints of any driver project where

00:27:10,200 --> 00:27:16,090
where do you put Vulcan relative to

00:27:12,760 --> 00:27:19,050
OpenGL and relative to seal and relative

00:27:16,090 --> 00:27:19,050
performance work right

00:27:19,380 --> 00:27:27,250
right up until I saw how they were right

00:27:21,960 --> 00:27:30,150
we see a lot of a machine learning of

00:27:27,250 --> 00:27:33,640
the frame was targeted OpenCL

00:27:30,150 --> 00:27:36,130
we don't have that Buddha story for that

00:27:33,640 --> 00:27:41,860
in Messiah but so progress is being made

00:27:36,130 --> 00:27:45,700
and personalized if you have already

00:27:41,860 --> 00:27:47,770
worked a lot on the obedient again we

00:27:45,700 --> 00:27:50,920
will assume that the knowledge even if

00:27:47,770 --> 00:27:52,720
not early for it even if it's wit of a

00:27:50,920 --> 00:27:57,270
program or a compiler right now we

00:27:52,720 --> 00:27:57,270
select things change going to be there

00:27:59,910 --> 00:28:05,710
so I don't know what well the hidden

00:28:02,620 --> 00:28:18,120
Aviv and Lamar people want to talk a bit

00:28:05,710 --> 00:28:24,040
about adoption okay my question

00:28:18,120 --> 00:28:28,000
wonderful so adoption I think the screen

00:28:24,040 --> 00:28:31,150
interesting topic as the most sports

00:28:28,000 --> 00:28:36,060
wear socks that uses the given teach

00:28:31,150 --> 00:28:40,180
abused I used for industrial use cases

00:28:36,060 --> 00:28:43,000
so a lot of companies want to design the

00:28:40,180 --> 00:28:48,370
hardware use it for at least 20 years

00:28:43,000 --> 00:28:51,820
and that is wonderful for me cuz there

00:28:48,370 --> 00:28:56,010
is a lot of interest in getting stable

00:28:51,820 --> 00:29:02,530
drivers try to static informants and

00:28:56,010 --> 00:29:04,690
data performance wise there I have to

00:29:02,530 --> 00:29:09,160
say performances of Mahindra blog

00:29:04,690 --> 00:29:14,890
Dreyfuss so I think that's a good sign

00:29:09,160 --> 00:29:19,150
here but the world I would love to get

00:29:14,890 --> 00:29:23,050
in touch with a hardware vendor to get

00:29:19,150 --> 00:29:26,290
some documentation as in the end I think

00:29:23,050 --> 00:29:29,160
that's what really matters to get

00:29:26,290 --> 00:29:29,160
support from the

00:29:32,450 --> 00:29:39,510
yeah some associates are not as oriented

00:29:38,280 --> 00:29:41,309
to look at what's industrial or

00:29:39,510 --> 00:29:44,640
automotive for example they also have

00:29:41,309 --> 00:29:46,830
this long support periods but for

00:29:44,640 --> 00:29:51,080
consumer rights it's kind of important

00:29:46,830 --> 00:29:56,700
as well because so of security right

00:29:51,080 --> 00:30:00,059
you're not full of bags and and some

00:29:56,700 --> 00:30:03,990
bags are not that easy to solve in a

00:30:00,059 --> 00:30:11,549
specific version working to be working

00:30:03,990 --> 00:30:14,700
and for several versions what about you

00:30:11,549 --> 00:30:16,320
Matt we have people using it I guess not

00:30:14,700 --> 00:30:18,780
just copies maybe

00:30:16,320 --> 00:30:20,250
companies are using it already well I'm

00:30:18,780 --> 00:30:24,510
not sure whether we have any companies

00:30:20,250 --> 00:30:28,500
that I use in Lima well basically it's

00:30:24,510 --> 00:30:30,539
pretty whole GPU is from 2008 but it's

00:30:28,500 --> 00:30:33,960
still quite popular in some of the

00:30:30,539 --> 00:30:37,230
single board computers and I guess the

00:30:33,960 --> 00:30:40,340
most stringent now is the iPhone that

00:30:37,230 --> 00:30:44,400
will be using Lima for sure

00:30:40,340 --> 00:30:50,880
yeah beside that I'm I'm not really sure

00:30:44,400 --> 00:30:53,340
I know that the coda guys usually build

00:30:50,880 --> 00:31:00,090
well they have some bills with Lima as

00:30:53,340 --> 00:31:02,340
well as Miss TV and beside that and I'm

00:31:00,090 --> 00:31:06,960
not really aware for else is using

00:31:02,340 --> 00:31:08,880
lingua yes that's what interesting

00:31:06,960 --> 00:31:14,730
there's some there's a lot of TV boxes

00:31:08,880 --> 00:31:17,240
with you and they are normally is

00:31:14,730 --> 00:31:20,159
tackling very very old I'm going to be

00:31:17,240 --> 00:31:22,289
Persians and I guess that maybe Swiss

00:31:20,159 --> 00:31:25,530
that if your driver just at the vendor

00:31:22,289 --> 00:31:27,960
didn't want to pay more money to come

00:31:25,530 --> 00:31:30,620
and their license expired and they just

00:31:27,960 --> 00:31:33,390
weren't able to get another video which

00:31:30,620 --> 00:31:36,649
with it with a few drivers we can change

00:31:33,390 --> 00:31:39,210
that same for for us we have several

00:31:36,649 --> 00:31:41,480
associates which are quite common in TV

00:31:39,210 --> 00:31:44,299
boxes which use Midgard and there's

00:31:41,480 --> 00:31:46,309
by first as well that's what we're

00:31:44,299 --> 00:31:47,929
trying to change habit but there's a bit

00:31:46,309 --> 00:31:50,080
of a problem with Android because why

00:31:47,929 --> 00:31:55,760
it's not that were our business by

00:31:50,080 --> 00:31:58,309
making Android images but I guess I

00:31:55,760 --> 00:31:59,900
guess we should make it easier for other

00:31:58,309 --> 00:32:03,919
people to do that for the people to do

00:31:59,900 --> 00:32:05,990
that and to and to see how it was even

00:32:03,919 --> 00:32:08,350
those which were style will be evolved

00:32:05,990 --> 00:32:11,110
Android for them curvy for the

00:32:08,350 --> 00:32:14,059
Association which we are still selling

00:32:11,110 --> 00:32:15,860
factory same free drivers as an

00:32:14,059 --> 00:32:26,929
important meeting to offer to their

00:32:15,860 --> 00:32:33,350
customers new around reversals okay

00:32:26,929 --> 00:32:39,020
anything else about Ellucian so maybe we

00:32:33,350 --> 00:32:40,970
can move to performance so how can we

00:32:39,020 --> 00:32:48,770
get at least as good as the proprietary

00:32:40,970 --> 00:32:51,020
counterparts and we performances is one

00:32:48,770 --> 00:32:56,120
of those topics where simple questions

00:32:51,020 --> 00:32:59,320
have complex answers I think there's you

00:32:56,120 --> 00:33:01,130
know as far as general usable

00:32:59,320 --> 00:33:04,970
performance you know having a nice

00:33:01,130 --> 00:33:10,100
smooth desktop good acceleration basic

00:33:04,970 --> 00:33:12,940
games is usually maybe not so hard when

00:33:10,100 --> 00:33:16,010
you start talking about different

00:33:12,940 --> 00:33:18,820
industry benchmarks that the close

00:33:16,010 --> 00:33:21,500
drivers spend a lot of time focusing on

00:33:18,820 --> 00:33:23,299
you know so they can have the highest

00:33:21,500 --> 00:33:26,600
score compared to the other Android

00:33:23,299 --> 00:33:30,980
phones then that that can be a lot of

00:33:26,600 --> 00:33:34,610
work and you know sometimes it's just a

00:33:30,980 --> 00:33:40,669
lot of work figuring out what things

00:33:34,610 --> 00:33:44,630
matter from a performance standpoint is

00:33:40,669 --> 00:33:48,470
this a trade offs as well always and we

00:33:44,630 --> 00:33:50,840
basically always I mean you know

00:33:48,470 --> 00:33:52,850
especially with the shader compiler but

00:33:50,840 --> 00:33:53,340
just really a lot with a lot of things

00:33:52,850 --> 00:33:55,260
and

00:33:53,340 --> 00:33:57,990
a graphics driver our balancing

00:33:55,260 --> 00:34:03,360
different trade-offs and knowing the

00:33:57,990 --> 00:34:05,450
right trade-off to make but I mean those

00:34:03,360 --> 00:34:08,760
are also things that are going to be

00:34:05,450 --> 00:34:16,050
unique to the different GPU you know

00:34:08,760 --> 00:34:17,790
different family of GPUs I find

00:34:16,050 --> 00:34:21,000
interesting that even if we normally are

00:34:17,790 --> 00:34:23,160
behind because we don't have access to

00:34:21,000 --> 00:34:24,930
as much information as there as the

00:34:23,160 --> 00:34:27,930
people working the proprietary drivers

00:34:24,930 --> 00:34:30,870
what we can do I have found advantage is

00:34:27,930 --> 00:34:34,230
that we can choose a different set of

00:34:30,870 --> 00:34:37,530
trade-offs for a specific use case so a

00:34:34,230 --> 00:34:41,430
customer targeting VR for example can

00:34:37,530 --> 00:34:43,980
focus on that in something else somebody

00:34:41,430 --> 00:34:46,260
else come focus on our we can make a

00:34:43,980 --> 00:34:50,510
possible and they think they would be

00:34:46,260 --> 00:34:50,510
having a really hard time taking that

00:34:53,030 --> 00:35:01,080
yeah well one thing is that it always

00:34:58,170 --> 00:35:02,790
helps if the proprietary driver you're

00:35:01,080 --> 00:35:07,500
competing against has poor performance

00:35:02,790 --> 00:35:12,240
to begin with so there's that but I

00:35:07,500 --> 00:35:15,240
think one of the big challenges I've

00:35:12,240 --> 00:35:17,340
seen with on the midgard site where

00:35:15,240 --> 00:35:21,780
we've done a fair bit of optimization

00:35:17,340 --> 00:35:24,180
work is that as long as you have our

00:35:21,780 --> 00:35:26,490
just how to use the hardware effectively

00:35:24,180 --> 00:35:28,200
how do you reduce CPU overhead right and

00:35:26,490 --> 00:35:30,060
the answer is make sure you're not

00:35:28,200 --> 00:35:32,820
making any mistakes in different places

00:35:30,060 --> 00:35:37,130
compared to the law you use a profile of

00:35:32,820 --> 00:35:40,590
really weird it's a lot more tricky and

00:35:37,130 --> 00:35:45,960
our two areas that I that I see one is

00:35:40,590 --> 00:35:47,900
in terms of common Mesa code I know for

00:35:45,960 --> 00:35:52,110
instance the medium P work which only

00:35:47,900 --> 00:35:54,030
landed last week I think it was that's

00:35:52,110 --> 00:35:58,410
something that I believe all of our

00:35:54,030 --> 00:36:00,840
drivers benefit from and I mean it's not

00:35:58,410 --> 00:36:03,240
a mystery why it didn't happen before

00:36:00,840 --> 00:36:06,259
this because nobody did the work it

00:36:03,240 --> 00:36:10,670
doesn't just grow on trees

00:36:06,259 --> 00:36:13,789
but that the drivers were competing

00:36:10,670 --> 00:36:18,619
against have all of those optimizations

00:36:13,789 --> 00:36:22,279
and more which it's not that it's

00:36:18,619 --> 00:36:23,960
there's any magic there it's just yeah

00:36:22,279 --> 00:36:29,749
when you have a lot more funding to

00:36:23,960 --> 00:36:33,440
throw around stuff gets done and that's

00:36:29,749 --> 00:36:38,479
almost easier half the harder section I

00:36:33,440 --> 00:36:41,150
think is when it's not even clear how to

00:36:38,479 --> 00:36:43,519
how you would make the trade-off at all

00:36:41,150 --> 00:36:48,079
even if you wanted to this is something

00:36:43,519 --> 00:36:52,670
I know first scheduling for a lot of

00:36:48,079 --> 00:36:54,920
these compilers these are just very

00:36:52,670 --> 00:36:57,380
difficult problems to do whatsoever even

00:36:54,920 --> 00:37:01,880
if I can give you a precise formulation

00:36:57,380 --> 00:37:04,999
of what the what you know how to model

00:37:01,880 --> 00:37:06,469
the performance of the program I okay

00:37:04,999 --> 00:37:08,299
fine you can treat that as a cost

00:37:06,469 --> 00:37:10,789
function how are we gonna optimize that

00:37:08,299 --> 00:37:13,999
okay now are you gonna optimize an eject

00:37:10,789 --> 00:37:21,680
compiler that's running on low power arm

00:37:13,999 --> 00:37:25,069
CP is and I don't I mean part of me

00:37:21,680 --> 00:37:27,529
wants to think okay what if we got ten

00:37:25,069 --> 00:37:31,309
times better at learning how to you know

00:37:27,529 --> 00:37:34,729
write faster algorithms and maybe that's

00:37:31,309 --> 00:37:38,029
part of it but the fact is that these

00:37:34,729 --> 00:37:40,249
sorts of issues are very much bound to

00:37:38,029 --> 00:37:42,739
the architecture not just in terms of

00:37:40,249 --> 00:37:44,719
the parts that are visible from the

00:37:42,739 --> 00:37:47,049
outside just from the compiler but also

00:37:44,719 --> 00:37:51,529
there are these are design decisions

00:37:47,049 --> 00:37:53,839
chances are whatever the algorithm is

00:37:51,529 --> 00:37:55,430
that the compiler is using was developed

00:37:53,839 --> 00:37:57,410
simultaneously with the hardware itself

00:37:55,430 --> 00:38:01,369
so it's not a it's not an accident that

00:37:57,410 --> 00:38:03,619
it worked out well or if it didn't work

00:38:01,369 --> 00:38:05,299
out well and they had to redesign coffee

00:38:03,619 --> 00:38:12,170
midgard to buy for us buy for us to go

00:38:05,299 --> 00:38:14,029
home but the fact is no amount of

00:38:12,170 --> 00:38:16,460
reverse engineering is going to get you

00:38:14,029 --> 00:38:17,839
into the brain of the hardware engineer

00:38:16,460 --> 00:38:19,710
that built the chip to begin with and

00:38:17,839 --> 00:38:21,660
without that access

00:38:19,710 --> 00:38:27,000
we were always at a distance some of the

00:38:21,660 --> 00:38:31,800
those hardest problems so that our

00:38:27,000 --> 00:38:34,770
performance manages to often be a parody

00:38:31,800 --> 00:38:37,859
and often beats a proprietary drivers in

00:38:34,770 --> 00:38:43,500
some cases for certain drivers that's

00:38:37,859 --> 00:38:45,960
really incredible to me yeah I'm not

00:38:43,500 --> 00:38:49,200
sure what the Molly's stuff has in the

00:38:45,960 --> 00:38:54,559
way of performance counters but those

00:38:49,200 --> 00:38:56,550
can be super useful in figuring out how

00:38:54,559 --> 00:39:04,710
different sequences of instructions

00:38:56,550 --> 00:39:07,020
perform for example now we have some

00:39:04,710 --> 00:39:10,650
support bottom tip unfroze to kernel

00:39:07,020 --> 00:39:13,650
driver already and and we have full

00:39:10,650 --> 00:39:17,700
catalog we're going on on how to utilize

00:39:13,650 --> 00:39:22,410
it first thing is that we're going on a

00:39:17,700 --> 00:39:24,089
mission yeah it's it's helpful if you

00:39:22,410 --> 00:39:28,280
can capture them from the command stream

00:39:24,089 --> 00:39:28,280
because then you can look at a per draw

00:39:28,460 --> 00:39:35,609
level I've been doing some of that when

00:39:31,730 --> 00:39:39,569
you know I had some scheduler changes

00:39:35,609 --> 00:39:42,089
that shader DB really loved but the

00:39:39,569 --> 00:39:44,640
hardware didn't so much and being able

00:39:42,089 --> 00:39:49,520
to compare performance counter drawers

00:39:44,640 --> 00:39:49,520
per dumps per draw has been super useful

00:39:50,119 --> 00:39:53,750
yeah I don't think they are

00:40:00,840 --> 00:40:08,560
on that note if you have any resources

00:40:06,130 --> 00:40:11,740
available that you know of about

00:40:08,560 --> 00:40:14,260
scheduler designed I would love to take

00:40:11,740 --> 00:40:15,940
a look I have looked at there is I found

00:40:14,260 --> 00:40:20,440
extensive research on register

00:40:15,940 --> 00:40:22,450
allocation scheduling is it just such a

00:40:20,440 --> 00:40:25,510
free-for-all in terms of every hard work

00:40:22,450 --> 00:40:28,090
paying there are requirements that must

00:40:25,510 --> 00:40:30,250
not even sure where it began and doing

00:40:28,090 --> 00:40:31,390
it efficiently one of the thing getting

00:40:30,250 --> 00:40:33,340
good quality out of it

00:40:31,390 --> 00:40:36,820
think optimal scheduling is the

00:40:33,340 --> 00:40:40,960
np-complete problem so really it comes

00:40:36,820 --> 00:40:43,150
down to heuristics and coming up with

00:40:40,960 --> 00:40:48,910
the right ones and yeah that's that's

00:40:43,150 --> 00:40:50,530
that's harder problem so thinking

00:40:48,910 --> 00:40:52,350
interested regarding a performance of

00:40:50,530 --> 00:40:55,950
course that compiler is vey important

00:40:52,350 --> 00:40:58,450
hardest part maybe but we can see that

00:40:55,950 --> 00:41:01,060
sometimes a proprietary drivers are it's

00:40:58,450 --> 00:41:04,240
lower because of integration with the

00:41:01,060 --> 00:41:06,310
rest of the system for example before

00:41:04,240 --> 00:41:08,050
the buffer gets that presented he has

00:41:06,310 --> 00:41:13,740
been combined a couple of times because

00:41:08,050 --> 00:41:16,090
the the Wendover that is the BSB

00:41:13,740 --> 00:41:17,770
didn't got all the support from them

00:41:16,090 --> 00:41:22,210
from the hardware vendor and and they

00:41:17,770 --> 00:41:24,370
don't work with the community and they

00:41:22,210 --> 00:41:27,510
don't know what are the needs of all of

00:41:24,370 --> 00:41:31,660
the customers maybe focus on one

00:41:27,510 --> 00:41:35,140
scenario and the others at left and and

00:41:31,660 --> 00:41:37,900
we see that that for some customers

00:41:35,140 --> 00:41:39,910
which who were using the protect drivers

00:41:37,900 --> 00:41:42,160
and getting better performance we saw

00:41:39,910 --> 00:41:44,080
that they were trying to represent to

00:41:42,160 --> 00:41:47,560
bigger screens and them and they were

00:41:44,080 --> 00:41:50,320
copies they and I was just because of

00:41:47,560 --> 00:41:52,270
that integration so so we were able to

00:41:50,320 --> 00:41:55,930
make changes to the kernel so that they

00:41:52,270 --> 00:41:58,450
they integrally in the form he was

00:41:55,930 --> 00:42:01,660
faster rendering into and we wouldn't be

00:41:58,450 --> 00:42:04,300
making any copies because we will be

00:42:01,660 --> 00:42:05,470
able to improve all the components

00:42:04,300 --> 00:42:09,000
around that

00:42:05,470 --> 00:42:11,530
information about fires and what exactly

00:42:09,000 --> 00:42:13,839
they have come a day my Fuhrer looks

00:42:11,530 --> 00:42:15,839
like so that they have a whole pipeline

00:42:13,839 --> 00:42:19,540
dimensions without you within their

00:42:15,839 --> 00:42:21,640
decoder so that's some other advantage

00:42:19,540 --> 00:42:23,890
that we can have on having so many times

00:42:21,640 --> 00:42:29,859
that I have seen that happen several

00:42:23,890 --> 00:42:32,530
times with a hobby got much much better

00:42:29,859 --> 00:42:35,980
especially because those I mix

00:42:32,530 --> 00:42:37,450
associates have very low bandwidth

00:42:35,980 --> 00:42:41,319
memory bandwidth compared with other

00:42:37,450 --> 00:42:43,720
associates so that made quite a bit of

00:42:41,319 --> 00:42:45,940
difference and also one provided I

00:42:43,720 --> 00:42:48,130
remember with Phaedra knows well it was

00:42:45,940 --> 00:42:49,930
quite nice to to be able to see movie

00:42:48,130 --> 00:42:51,880
files which at that point were quite new

00:42:49,930 --> 00:42:54,579
so it wasn't until upstream and we were

00:42:51,880 --> 00:43:12,460
able to to move that forward a bit with

00:42:54,579 --> 00:43:23,319
some nice anything else about

00:43:12,460 --> 00:43:27,760
performance so we benefit from a lot of

00:43:23,319 --> 00:43:29,500
shared infrastructure which proved Ivan

00:43:27,760 --> 00:43:31,510
knows don't because they have to the

00:43:29,500 --> 00:43:33,819
well they have filler being right they

00:43:31,510 --> 00:43:38,890
can copy hockey that is you keep it in

00:43:33,819 --> 00:43:43,000
an orbit that has as well as things like

00:43:38,890 --> 00:43:47,380
what can be seen people were using L at

00:43:43,000 --> 00:43:50,470
the end for OpenCL that the of them for

00:43:47,380 --> 00:43:54,640
King the owner hacked copy of VMs PV

00:43:50,470 --> 00:43:56,410
which also included LVN I happened when

00:43:54,640 --> 00:43:57,940
the other parts of their driver us we

00:43:56,410 --> 00:44:00,700
used to at the end that will improve

00:43:57,940 --> 00:44:06,280
their version I must have been

00:44:00,700 --> 00:44:09,790
interesting but but we can connect it a

00:44:06,280 --> 00:44:15,040
lot more and in the same way that it

00:44:09,790 --> 00:44:16,560
helps it has helped us in hoho could it

00:44:15,040 --> 00:44:19,020
have more with

00:44:16,560 --> 00:44:21,240
but what do you think that there are

00:44:19,020 --> 00:44:26,340
items that we could improve in msi

00:44:21,240 --> 00:44:29,250
itself the colonel or in a qiblah for

00:44:26,340 --> 00:44:31,470
example in free desktop or as well about

00:44:29,250 --> 00:44:35,310
this culture about the person joining

00:44:31,470 --> 00:44:37,470
GPUs and how different that projects to

00:44:35,310 --> 00:44:39,060
get which tools your behalf maybe they

00:44:37,470 --> 00:44:41,010
you start from view from the same one

00:44:39,060 --> 00:44:44,940
and even if they are not sharing any

00:44:41,010 --> 00:44:49,050
code or tools their methods you just

00:44:44,940 --> 00:44:51,030
know that you can you can you can move

00:44:49,050 --> 00:44:56,010
her faster if you start getting into

00:44:51,030 --> 00:44:58,610
some methodology so what needs to be

00:44:56,010 --> 00:44:58,610
improved most

00:45:04,830 --> 00:45:15,490
and I think for writing a gallium OpenGL

00:45:09,670 --> 00:45:18,520
driver or Julia's no that's about as

00:45:15,490 --> 00:45:20,500
perfect as you can get in terms of

00:45:18,520 --> 00:45:24,550
having all sorts of charity at the

00:45:20,500 --> 00:45:27,940
structure it's more when you venture out

00:45:24,550 --> 00:45:31,690
of that if you want to do OpenCL I know

00:45:27,940 --> 00:45:35,109
that's all can of worms for both the

00:45:31,690 --> 00:45:35,800
Kali event the inner side which is being

00:45:35,109 --> 00:45:41,130
worked on

00:45:35,800 --> 00:45:43,540
I know for Vulcan there is a lot of

00:45:41,130 --> 00:45:45,850
infrastructure that's built into gallium

00:45:43,540 --> 00:45:49,390
that just sort of disappears when you

00:45:45,850 --> 00:45:52,540
leave leave the gallium should shut nest

00:45:49,390 --> 00:45:56,560
I know the furry know if I would have

00:45:52,540 --> 00:45:57,850
been doing excellent work on trying to

00:45:56,560 --> 00:46:01,950
share that cut better

00:45:57,850 --> 00:46:04,450
I'm I got stuff for instance I think

00:46:01,950 --> 00:46:08,950
again these problem they're being worked

00:46:04,450 --> 00:46:13,150
on but the farther the farther you go

00:46:08,950 --> 00:46:16,980
from that you know local optimum some

00:46:13,150 --> 00:46:20,340
more becomes the Wild West GPU drivers

00:46:16,980 --> 00:46:22,960
yeah I mean I would say in general

00:46:20,340 --> 00:46:25,690
having a single you know having all the

00:46:22,960 --> 00:46:29,080
drivers their user space gel drivers in

00:46:25,690 --> 00:46:30,730
a single get tree you know it helps us

00:46:29,080 --> 00:46:35,680
realize when there are things that we

00:46:30,730 --> 00:46:39,220
can share you know for example you know

00:46:35,680 --> 00:46:41,320
sometimes some you know lowering past

00:46:39,220 --> 00:46:44,080
might start as a driver specific thing

00:46:41,320 --> 00:46:45,400
and then someone else realizes well hey

00:46:44,080 --> 00:46:47,410
that's actually kind of useful with

00:46:45,400 --> 00:46:53,800
these little tweaks for me too so it

00:46:47,410 --> 00:46:55,869
could move it to a shared location but I

00:46:53,800 --> 00:46:59,800
think that's something we do well rather

00:46:55,869 --> 00:47:03,340
than something that's that's as we can

00:46:59,800 --> 00:47:06,310
do better I think what needs to be

00:47:03,340 --> 00:47:09,480
improved the most is just having more

00:47:06,310 --> 00:47:09,480
people working on this

00:47:11,270 --> 00:47:23,010
yeah there's there's quite some some

00:47:14,610 --> 00:47:25,500
level of for this widow we continuously

00:47:23,010 --> 00:47:29,070
every day work with others we can see

00:47:25,500 --> 00:47:32,220
that in the DRC channel even if we are

00:47:29,070 --> 00:47:36,300
each of us working on our own driver but

00:47:32,220 --> 00:47:38,100
there's a lot of communication that we

00:47:36,300 --> 00:47:41,400
benefit from and if there were more

00:47:38,100 --> 00:47:45,030
people pretty sure that we would move

00:47:41,400 --> 00:47:47,040
faster and there's there's also the

00:47:45,030 --> 00:47:49,770
question of the money for infrastructure

00:47:47,040 --> 00:47:54,300
for example we are doing a lot of CI and

00:47:49,770 --> 00:47:56,460
we have study heating limits on that but

00:47:54,300 --> 00:47:58,500
ultimately message being using all the

00:47:56,460 --> 00:48:04,680
flu so it's not that hard to find people

00:47:58,500 --> 00:48:07,410
to fund that but it's our aspect in the

00:48:04,680 --> 00:48:10,770
terminal I see that it's a bit of a

00:48:07,410 --> 00:48:12,990
problem that sometimes we identify some

00:48:10,770 --> 00:48:15,360
area in which we can extract a common

00:48:12,990 --> 00:48:17,520
cold and some drivers use those but then

00:48:15,360 --> 00:48:20,670
some other drivers still keep using

00:48:17,520 --> 00:48:24,030
their own code which was which predicts

00:48:20,670 --> 00:48:26,850
that and there isn't a strong interest

00:48:24,030 --> 00:48:30,420
in the change in that gets yet I guess

00:48:26,850 --> 00:48:34,080
it's because of renovations as well but

00:48:30,420 --> 00:48:36,030
with Canarsie i we we have started the

00:48:34,080 --> 00:48:38,760
testing a banfora synchronously i just

00:48:36,030 --> 00:48:42,840
the kind of driver without using mesa

00:48:38,760 --> 00:48:45,780
just we just having the negative tools

00:48:42,840 --> 00:48:47,670
the the minimum of the command stream so

00:48:45,780 --> 00:48:51,570
we can exercise as much as possible of

00:48:47,670 --> 00:48:55,650
the colonel and as we have more more of

00:48:51,570 --> 00:48:58,320
that then I guess we can we can start

00:48:55,650 --> 00:49:00,060
the changing stuff more often refer to

00:48:58,320 --> 00:49:02,430
any measuring more code but

00:49:00,060 --> 00:49:04,680
unfortunately they do drivers in the

00:49:02,430 --> 00:49:07,190
canal by the small also the complicity

00:49:04,680 --> 00:49:08,720
is he uses space

00:49:07,190 --> 00:49:11,570
but I guess that's also important

00:49:08,720 --> 00:49:14,060
especially if you have a stable key item

00:49:11,570 --> 00:49:16,400
that you can get the customers to that

00:49:14,060 --> 00:49:19,460
to upgrade on you cannot so you don't

00:49:16,400 --> 00:49:21,860
have to work on for something expensive

00:49:19,460 --> 00:49:24,680
a at the end and then you can better

00:49:21,860 --> 00:49:30,620
support those customers which need terms

00:49:24,680 --> 00:49:34,220
for a raise

00:49:30,620 --> 00:49:37,280
good I think I GT is something that

00:49:34,220 --> 00:49:40,730
needs a lot of work every time I look at

00:49:37,280 --> 00:49:43,330
it it drives me crazy because for each

00:49:40,730 --> 00:49:48,710
GPU driver you have to go create your

00:49:43,330 --> 00:49:52,810
buffer object API and just to get any

00:49:48,710 --> 00:50:00,110
tests to run even though there's kind of

00:49:52,810 --> 00:50:02,470
generic prime tests for example so I

00:50:00,110 --> 00:50:06,920
think there needs to be some

00:50:02,470 --> 00:50:10,850
restructuring there so you can have some

00:50:06,920 --> 00:50:16,480
common pluggable API for creating buffer

00:50:10,850 --> 00:50:16,480
objects just like you do and in gallium

00:50:35,590 --> 00:50:42,500
in the the api's are mostly just

00:50:39,640 --> 00:50:47,750
evolutions of each other that was slight

00:50:42,500 --> 00:50:50,050
variations like for most of them it's

00:50:47,750 --> 00:50:53,420
created like creating a buffer object is

00:50:50,050 --> 00:50:55,900
how many bytes do you need and possibly

00:50:53,420 --> 00:50:55,900
some flags

00:50:57,150 --> 00:51:03,779
yeah for allocation good guess guess it

00:51:00,329 --> 00:51:10,220
it goes a bit with me Buffy thing that

00:51:03,779 --> 00:51:15,930
if we move closer I'll get Robin to

00:51:10,220 --> 00:51:20,730
solve is about the point yeah possibly

00:51:15,930 --> 00:51:24,480
I mean the other big question with IDT

00:51:20,730 --> 00:51:28,650
is how much I guess just scope creep I

00:51:24,480 --> 00:51:32,759
know for pen first the tests that we run

00:51:28,650 --> 00:51:35,130
very basic right now pretty much the

00:51:32,759 --> 00:51:38,519
hardest thing in there is can it still

00:51:35,130 --> 00:51:40,319
clear this right and that's just for the

00:51:38,519 --> 00:51:44,579
simple reason to do any interesting

00:51:40,319 --> 00:51:47,400
tests that requires either a huge amount

00:51:44,579 --> 00:51:51,499
of infrastructure that's just copy paste

00:51:47,400 --> 00:51:55,440
it out of the Mesa driver or hard-coding

00:51:51,499 --> 00:51:59,039
huge amounts of structures possibly even

00:51:55,440 --> 00:52:00,240
hard coding just the you know bets on

00:51:59,039 --> 00:52:03,450
the wire that you need in the command

00:52:00,240 --> 00:52:05,789
streams and the shapes that are it's

00:52:03,450 --> 00:52:08,069
precompiled which I guess is fine but

00:52:05,789 --> 00:52:11,430
that kind of raises questions about the

00:52:08,069 --> 00:52:16,410
integrity as a open source project and

00:52:11,430 --> 00:52:19,380
on the flip side we can be doing testing

00:52:16,410 --> 00:52:22,470
within Mesa I know is being done for

00:52:19,380 --> 00:52:23,519
unit tests for instance probably not the

00:52:22,470 --> 00:52:25,619
direction we want to go for caramel

00:52:23,519 --> 00:52:27,509
testing but it's just kind of hard to

00:52:25,619 --> 00:52:29,519
know what goes where and then there's

00:52:27,509 --> 00:52:32,309
the question of if you are going to

00:52:29,519 --> 00:52:34,890
generate command streams and igt chances

00:52:32,309 --> 00:52:36,390
are those commands dream definitions are

00:52:34,890 --> 00:52:39,890
going to go out of sync very quickly if

00:52:36,390 --> 00:52:42,059
they're just being updated in Mesa so

00:52:39,890 --> 00:52:44,880
yeah I think it's very important to know

00:52:42,059 --> 00:52:51,680
what kind of bugs do you want to be to

00:52:44,880 --> 00:52:53,819
be catch at the NCI and we clean em SSCI

00:52:51,680 --> 00:52:56,940
because what what happens with our

00:52:53,819 --> 00:52:59,309
kernel is that often someone submits a

00:52:56,940 --> 00:53:02,940
batch which affects the regulator

00:52:59,309 --> 00:53:06,630
subsystem and gradual GPU driver and and

00:53:02,940 --> 00:53:09,239
but breaks it only in a specific

00:53:06,630 --> 00:53:11,009
that's that's good to catch up that boy

00:53:09,239 --> 00:53:12,989
because otherwise there would be a

00:53:11,009 --> 00:53:16,470
release and someone will start using

00:53:12,989 --> 00:53:21,650
that new carom board and you don't have

00:53:16,470 --> 00:53:24,089
what you have in a box somewhere and

00:53:21,650 --> 00:53:26,549
that's that's something quite useful

00:53:24,089 --> 00:53:28,890
because it tells people to work on

00:53:26,549 --> 00:53:31,710
interesting things of handing that kind

00:53:28,890 --> 00:53:36,380
of facts and then something else that I

00:53:31,710 --> 00:53:40,710
think is very useful in OCI is for races

00:53:36,380 --> 00:53:45,059
it Mesa this pass right so you don't

00:53:40,710 --> 00:53:47,999
really really exercise the code paths

00:53:45,059 --> 00:53:50,460
but in real life sometimes stuff fails

00:53:47,999 --> 00:53:55,380
and and that's one thing that the

00:53:50,460 --> 00:53:57,749
drivers have a break and then the whole

00:53:55,380 --> 00:54:00,630
machine hang some people after report

00:53:57,749 --> 00:54:03,509
etc and that's quite bad for people

00:54:00,630 --> 00:54:05,430
putting your driver into a product for

00:54:03,509 --> 00:54:07,739
currency I that's quite good that's all

00:54:05,430 --> 00:54:11,579
because we just need a way simple set of

00:54:07,739 --> 00:54:14,940
jobs you can break one of those jobs on

00:54:11,579 --> 00:54:18,420
purpose and then see if every the GPUs

00:54:14,940 --> 00:54:25,410
capable of resetting for the bad one and

00:54:18,420 --> 00:54:27,869
then finishing the but but yeah I think

00:54:25,410 --> 00:54:31,700
it's that's very interesting testing the

00:54:27,869 --> 00:54:36,359
colonel with Messer what we can do is

00:54:31,700 --> 00:54:38,789
maybe automated maybe not just ran on

00:54:36,359 --> 00:54:44,249
good measure version which all master

00:54:38,789 --> 00:54:51,690
there should be and just changing the it

00:54:44,249 --> 00:54:55,190
could be part of the problem I see with

00:54:51,690 --> 00:54:59,519
maces a lot of the problems we've had

00:54:55,190 --> 00:55:04,049
fixing on pan frost is object lifetime

00:54:59,519 --> 00:55:09,180
stuff but for object lifetime and and

00:55:04,049 --> 00:55:13,140
file descriptor lifetime and you don't

00:55:09,180 --> 00:55:16,170
miss if you have a full desktop I guess

00:55:13,140 --> 00:55:17,640
you do test that somewhat but generally

00:55:16,170 --> 00:55:20,029
you're leaving the file descriptor open

00:55:17,640 --> 00:55:20,029
the whole time

00:55:21,350 --> 00:55:30,080
so you can with igt I think you can

00:55:24,500 --> 00:55:30,080
exercise that more and pound on it more

00:55:30,470 --> 00:55:37,440
yes I will be to write the water it's a

00:55:33,900 --> 00:55:39,840
moral compass once I think things are

00:55:37,440 --> 00:55:43,430
really now at least for unfroze we are

00:55:39,840 --> 00:55:46,830
running those in a few words you can sei

00:55:43,430 --> 00:55:49,970
there's not that we have her quite quite

00:55:46,830 --> 00:55:56,160
a simple summer even failing I haven't

00:55:49,970 --> 00:56:01,350
but if any regressors will find out will

00:55:56,160 --> 00:56:03,120
be automated by section but yeah I'm

00:56:01,350 --> 00:56:07,260
going to write more at Miletus and we'll

00:56:03,120 --> 00:56:09,420
be able to to address that complication

00:56:07,260 --> 00:56:11,970
that we have but it's a bit of a problem

00:56:09,420 --> 00:56:15,030
because if the other drivers are not

00:56:11,970 --> 00:56:17,730
being run on a CI and it's not that easy

00:56:15,030 --> 00:56:23,130
to see where the fails you on tests

00:56:17,730 --> 00:56:25,740
everything here locally so would be cool

00:56:23,130 --> 00:56:35,550
to see others also interesting a bit on

00:56:25,740 --> 00:56:37,440
running a GTE on so wouldn't um area I

00:56:35,550 --> 00:56:40,460
guess that's been difficult and trying

00:56:37,440 --> 00:56:43,200
to do CI with environments like Android

00:56:40,460 --> 00:56:46,170
has been you know kind of the tension

00:56:43,200 --> 00:56:47,930
between the different build systems and

00:56:46,170 --> 00:56:51,600
so we kind of have this issue where

00:56:47,930 --> 00:56:53,550
really need to get mess up into the AOSP

00:56:51,600 --> 00:56:55,980
build system they can sometimes take up

00:56:53,550 --> 00:56:57,840
to a week to kind of port it in effect

00:56:55,980 --> 00:57:00,840
and so it gets to be very difficult to

00:56:57,840 --> 00:57:02,340
do any sort of regular CI and so we had

00:57:00,840 --> 00:57:04,800
a little bit of time where we tried to

00:57:02,340 --> 00:57:06,360
get just some build testing using some

00:57:04,800 --> 00:57:07,770
hacks that tried to remove some of the

00:57:06,360 --> 00:57:10,410
constraints that the Android build

00:57:07,770 --> 00:57:13,260
environment has and that worked for a

00:57:10,410 --> 00:57:16,620
little while but then I fell over going

00:57:13,260 --> 00:57:18,720
again but it's one of those things that

00:57:16,620 --> 00:57:19,800
I'm you know hopefully at some point

00:57:18,720 --> 00:57:22,970
we'll be able to find some sort of

00:57:19,800 --> 00:57:25,860
resolution between that tension between

00:57:22,970 --> 00:57:27,180
Mason and the Android blueprint and

00:57:25,860 --> 00:57:30,090
trying to find some solution that makes

00:57:27,180 --> 00:57:32,130
it so we can test master a lot a lot

00:57:30,090 --> 00:57:34,200
more easily

00:57:32,130 --> 00:57:37,170
yeah I think I think we should be

00:57:34,200 --> 00:57:40,560
testing my son on Android special

00:57:37,170 --> 00:57:44,640
because there's a shield platform which

00:57:40,560 --> 00:57:46,920
breaks quite often as well but but yeah

00:57:44,640 --> 00:57:51,120
it's quite a bit of work but given the

00:57:46,920 --> 00:57:55,830
current current infrastructure msse III

00:57:51,120 --> 00:57:57,780
think it'll be that hard a lot of these

00:57:55,830 --> 00:58:01,170
issues have to come in to how Android

00:57:57,780 --> 00:58:02,820
does its build and it's the constraints

00:58:01,170 --> 00:58:05,490
in the environment so I can't use a lot

00:58:02,820 --> 00:58:07,050
of standard tooling that is expected to

00:58:05,490 --> 00:58:09,240
be there and it has its own separate

00:58:07,050 --> 00:58:11,820
build make infrastructure so it uses

00:58:09,240 --> 00:58:14,040
blueprint rather than the the maze on

00:58:11,820 --> 00:58:16,020
build and so that duplication is very

00:58:14,040 --> 00:58:18,750
frustrating and so often you know once

00:58:16,020 --> 00:58:20,850
you kind of just chase down the errors

00:58:18,750 --> 00:58:23,070
in the make file duplication the factly

00:58:20,850 --> 00:58:25,040
we have to have to make file systems you

00:58:23,070 --> 00:58:27,240
know usually there's bugs between them

00:58:25,040 --> 00:58:29,180
you can have to sit and solve all that

00:58:27,240 --> 00:58:31,920
and then once you get that done you

00:58:29,180 --> 00:58:33,600
still have to create all these free a

00:58:31,920 --> 00:58:36,060
lot of the source that's generated from

00:58:33,600 --> 00:58:37,590
Python scripts like that can't be run in

00:58:36,060 --> 00:58:39,060
the Android build system so you have to

00:58:37,590 --> 00:58:43,350
kind of go through and pre generate them

00:58:39,060 --> 00:58:47,010
and then so it's just it makes it lag a

00:58:43,350 --> 00:58:48,570
fair distance and so I don't know what a

00:58:47,010 --> 00:58:50,580
great solution is there I know there's

00:58:48,570 --> 00:58:53,910
been a couple proposals for you know

00:58:50,580 --> 00:58:55,890
either trying to you know using Mesa

00:58:53,910 --> 00:58:59,430
like a binary blob so we just build it

00:58:55,890 --> 00:59:04,020
out of tree and drop it in but that also

00:58:59,430 --> 00:59:08,150
you know I guess is not ideal to have

00:59:04,020 --> 00:59:08,150
the source tree separated as well

00:59:08,210 --> 00:59:15,180
doesn't really have a well-defined SDK

00:59:11,190 --> 00:59:18,330
for GPU drivers so you kind of need an

00:59:15,180 --> 00:59:20,580
Android build in order to build or you

00:59:18,330 --> 00:59:24,920
know a significant part of it in order

00:59:20,580 --> 00:59:27,990
to build the GPU driver for Android that

00:59:24,920 --> 00:59:33,090
that's been kind of one of the barriers

00:59:27,990 --> 00:59:39,510
for getting something going in CI well

00:59:33,090 --> 00:59:41,550
doesn't chromium container Android and

00:59:39,510 --> 00:59:45,930
the container stuff build using auto

00:59:41,550 --> 00:59:50,250
tools or actually we used Mesa

00:59:45,930 --> 00:59:53,460
these days like yeah it right but when I

00:59:50,250 --> 00:59:57,600
was added it was they added Android

00:59:53,460 --> 00:59:59,880
build support into the auto initially it

00:59:57,600 --> 01:00:04,440
was other tools yes those those before

00:59:59,880 --> 01:00:07,470
me son was a thing well yeah that that

01:00:04,440 --> 01:00:09,030
works by building it outside of the

01:00:07,470 --> 01:00:11,760
Android build and dropping it into

01:00:09,030 --> 01:00:16,680
Android kind of like a binary blob

01:00:11,760 --> 01:00:23,600
driver essentially but it kind of relies

01:00:16,680 --> 01:00:23,600
on a sort of hand curated Android STK

01:00:24,080 --> 01:00:28,290
you know which isn't really an official

01:00:26,550 --> 01:00:29,940
thing it's just taking parts of an

01:00:28,290 --> 01:00:36,900
Android build and putting them in the

01:00:29,940 --> 01:00:40,080
right place I might be it might be a

01:00:36,900 --> 01:00:41,970
little out of the loop but ball that

01:00:40,080 --> 01:00:44,490
does sound like a hack it sounds like

01:00:41,970 --> 01:00:46,110
less of a hack than maintaining two

01:00:44,490 --> 01:00:49,830
disjoint build systems one of which

01:00:46,110 --> 01:00:56,360
apparently doesn't even work as promised

01:00:49,830 --> 01:00:59,520
so yeah that's why we do it this way no

01:00:56,360 --> 01:01:03,360
there was not talking first channel

01:00:59,520 --> 01:01:05,880
about building hundred images in

01:01:03,360 --> 01:01:09,710
finished basically we have a series of

01:01:05,880 --> 01:01:13,860
components which can be used subtitles

01:01:09,710 --> 01:01:19,020
that target main line API is suppose up

01:01:13,860 --> 01:01:20,760
to what all the vendors do and well in

01:01:19,020 --> 01:01:23,220
the same way that we have the um however

01:01:20,760 --> 01:01:25,920
a composer will have the others ones and

01:01:23,220 --> 01:01:30,200
then we would be building a single image

01:01:25,920 --> 01:01:36,330
which targets any any any port which can

01:01:30,200 --> 01:01:38,670
you enough to refer those he eyes then

01:01:36,330 --> 01:01:42,690
of course at that point it would be a

01:01:38,670 --> 01:01:46,740
free desktop Android and then it could

01:01:42,690 --> 01:01:50,210
be easier to build that in msse I guess

01:01:46,740 --> 01:01:53,550
the some reveal will be not container

01:01:50,210 --> 01:01:57,440
base image that case gets reused across

01:01:53,550 --> 01:02:00,319
the wheels and you can do

01:01:57,440 --> 01:02:04,369
rebuild all of Android but then you have

01:02:00,319 --> 01:02:07,170
you have the previous build you need so

01:02:04,369 --> 01:02:08,640
will mean that that's slow and it would

01:02:07,170 --> 01:02:13,020
be quite a stable in the Roman because

01:02:08,640 --> 01:02:16,460
it's their whole Android and but but of

01:02:13,020 --> 01:02:19,740
course we need people to to work on that

01:02:16,460 --> 01:02:22,890
but it is that that's what I mean

01:02:19,740 --> 01:02:25,829
androids Android but that people use it

01:02:22,890 --> 01:02:28,349
right and there's a lot of wars which

01:02:25,829 --> 01:02:30,150
don't have the Nokia support people run

01:02:28,349 --> 01:02:32,940
Android mishap could be running there

01:02:30,150 --> 01:02:35,790
this had this in some cases there's a

01:02:32,940 --> 01:02:39,390
very very big need of someone other than

01:02:35,790 --> 01:02:41,790
the associate vendor or IP vendor to

01:02:39,390 --> 01:02:44,970
provide drivers or be as peace because

01:02:41,790 --> 01:02:48,230
they have already abandoned at a

01:02:44,970 --> 01:02:50,880
moonstone and we could fill that hole

01:02:48,230 --> 01:02:52,500
but of course is that close like what we

01:02:50,880 --> 01:02:54,510
have been doing with a panful job you

01:02:52,500 --> 01:02:57,780
have to show that something is how much

01:02:54,510 --> 01:03:02,520
those who you get people to pay or what

01:02:57,780 --> 01:03:05,790
what is next what is missing so and it

01:03:02,520 --> 01:03:09,170
takes time but it maybe we'll see that

01:03:05,790 --> 01:03:09,170
happening we can couple of years

01:03:16,970 --> 01:03:23,040
any other ideas would what could we

01:03:20,910 --> 01:03:26,490
change the shoot infrastructure so that

01:03:23,040 --> 01:03:28,740
the were drivers can move faster there

01:03:26,490 --> 01:03:35,089
is a question in chat which is probably

01:03:28,740 --> 01:03:35,089
worth bringing up yeah

01:03:41,869 --> 01:03:50,970
so I know in the frigerator site we

01:03:47,369 --> 01:03:54,479
should the number of flakes should have

01:03:50,970 --> 01:03:57,450
dropped pretty pretty drastically in the

01:03:54,479 --> 01:04:01,170
last couple of days we found one thing

01:03:57,450 --> 01:04:03,989
that was was the source of most of our

01:04:01,170 --> 01:04:08,249
Freight flakes but I mean at the same

01:04:03,989 --> 01:04:11,309
time we're adding a lot of other CI jobs

01:04:08,249 --> 01:04:14,789
you know like there's now a Visual

01:04:11,309 --> 01:04:20,339
Studio Mesa build ci job and people are

01:04:14,789 --> 01:04:22,829
adding more Hardware so it's you know

01:04:20,339 --> 01:04:25,259
when you have all of these different CI

01:04:22,829 --> 01:04:28,759
jobs so you're increasing the surface

01:04:25,259 --> 01:04:28,759
area for something to go wrong

01:04:30,529 --> 01:04:35,970
yeah I think we are we are seeing a lot

01:04:33,359 --> 01:04:39,089
of all honesty I am having a stuff which

01:04:35,970 --> 01:04:41,369
can break but that's really really like

01:04:39,089 --> 01:04:44,220
that I think everybody wants to to write

01:04:41,369 --> 01:04:46,950
code instead of I mean to me the CI

01:04:44,220 --> 01:04:49,920
right right I think I mean there's also

01:04:46,950 --> 01:04:52,499
been some recent changes there was also

01:04:49,920 --> 01:04:56,670
some recent changes to fine-tune when we

01:04:52,499 --> 01:04:59,489
run which CI jobs so that changes in rad

01:04:56,670 --> 01:05:06,269
V aren't gonna necessarily trigger pan

01:04:59,489 --> 01:05:08,569
Frost CI which should help what also

01:05:06,269 --> 01:05:11,549
working on fixing the the root causes

01:05:08,569 --> 01:05:14,819
because because say because everybody

01:05:11,549 --> 01:05:16,549
wants a stable CI as a system which says

01:05:14,819 --> 01:05:21,599
your own code is broken when it isn't

01:05:16,549 --> 01:05:23,819
isn't that useful scary but part of the

01:05:21,599 --> 01:05:28,920
cube in which we are treating out of

01:05:23,819 --> 01:05:31,979
problems because we're creating I will

01:05:28,920 --> 01:05:35,009
say it's compared to the pre CI days

01:05:31,979 --> 01:05:37,259
it's really nice not like okay I'm

01:05:35,009 --> 01:05:39,420
working on something on a branch for a a

01:05:37,259 --> 01:05:41,549
few weeks and then I'm ready to land it

01:05:39,420 --> 01:05:43,319
and I read a sand something completely

01:05:41,549 --> 01:05:46,529
unrelated that's broken that I need to

01:05:43,319 --> 01:05:50,249
fix first you know so that I can get at

01:05:46,529 --> 01:05:53,120
the a QP run it's really nice not to

01:05:50,249 --> 01:05:56,010
have those problems anymore

01:05:53,120 --> 01:05:58,800
yes especially a word about wasting a

01:05:56,010 --> 01:06:01,920
lot of time fixing other people's bags

01:05:58,800 --> 01:06:05,010
because they tested other called West

01:06:01,920 --> 01:06:06,210
Was had merged and and it was a

01:06:05,010 --> 01:06:09,000
frustrating as well knowing that

01:06:06,210 --> 01:06:10,890
somebody else also repeats their own on

01:06:09,000 --> 01:06:14,070
their own branch and with we're probably

01:06:10,890 --> 01:06:16,500
looking at the same bag maybe three or

01:06:14,070 --> 01:06:21,060
four people wasting time on that with

01:06:16,500 --> 01:06:23,280
that right now that code isn't burst and

01:06:21,060 --> 01:06:26,070
it person knows before merging that it

01:06:23,280 --> 01:06:29,490
could has a problem and we can fix it

01:06:26,070 --> 01:06:38,790
and we can write our new code instead of

01:06:29,490 --> 01:06:41,370
debugging other people's some some

01:06:38,790 --> 01:06:46,290
things that I can think about butters

01:06:41,370 --> 01:06:48,930
it's just even with the tuning on which

01:06:46,290 --> 01:06:51,270
job is run on which hardware based on

01:06:48,930 --> 01:06:53,610
source code changes I think we could

01:06:51,270 --> 01:06:58,530
still be doing a lot more aggressive on

01:06:53,610 --> 01:07:02,240
this for Pinterest for instance if if I

01:06:58,530 --> 01:07:06,270
change that only affects control files

01:07:02,240 --> 01:07:08,760
with our current CI it will only run on

01:07:06,270 --> 01:07:11,550
Panthers hardware but on a software side

01:07:08,760 --> 01:07:14,850
it will still do builds for exit these

01:07:11,550 --> 01:07:18,390
sticks and O's and who knows what else

01:07:14,850 --> 01:07:22,470
and that's I that's not a civility issue

01:07:18,390 --> 01:07:25,530
but that's um feels like a bit of a

01:07:22,470 --> 01:07:28,110
waste of resources given that Pam Frost

01:07:25,530 --> 01:07:31,770
as far as I know will never run an x86

01:07:28,110 --> 01:07:35,000
and probably never run a Windows and if

01:07:31,770 --> 01:07:41,100
it does we'll have bigger issues but

01:07:35,000 --> 01:07:43,620
conversely if there's a change to core

01:07:41,100 --> 01:07:46,440
code for instance to the stick tracker

01:07:43,620 --> 01:07:49,530
or tuner which we do depend on and which

01:07:46,440 --> 01:07:52,080
I run Hardware jobs I don't know if it's

01:07:49,530 --> 01:07:55,860
necessary to run that on every piece of

01:07:52,080 --> 01:07:59,670
pants hardware we have it might be

01:07:55,860 --> 01:08:01,860
better to have some just running on say

01:07:59,670 --> 01:08:05,370
the Flex of devices with the assumption

01:08:01,860 --> 01:08:06,700
that if it breaks though is they'll

01:08:05,370 --> 01:08:08,410
break everything

01:08:06,700 --> 01:08:14,740
something and those are less likely to

01:08:08,410 --> 01:08:18,370
flake which I don't know if that's that

01:08:14,740 --> 01:08:19,480
seems a little riskier but it would keep

01:08:18,370 --> 01:08:22,930
the number of jobs down and keep

01:08:19,480 --> 01:08:24,040
stability probably higher so I don't

01:08:22,930 --> 01:08:29,140
know the direction we want to think

01:08:24,040 --> 01:08:33,910
about but I think it's a big bad wolf

01:08:29,140 --> 01:08:36,670
you can have the root causes if he is

01:08:33,910 --> 01:08:39,670
this is low then it might be because we

01:08:36,670 --> 01:08:42,850
are doing things which are needed but if

01:08:39,670 --> 01:08:45,910
if we get an advantage out of that and

01:08:42,850 --> 01:08:51,100
maybe which we should look at why we

01:08:45,910 --> 01:08:52,690
cannot get more resources because we see

01:08:51,100 --> 01:08:56,620
that companies are investing a lot of

01:08:52,690 --> 01:08:59,799
money in the envelope per time and it

01:08:56,620 --> 01:09:02,170
would be bad to take on developer time

01:08:59,799 --> 01:09:04,900
in order to save much less money or

01:09:02,170 --> 01:09:06,400
resources but the poor is probably just

01:09:04,900 --> 01:09:09,100
that the companies having gotten

01:09:06,400 --> 01:09:10,750
together to talk and to solve that

01:09:09,100 --> 01:09:14,920
problem like for example getting a

01:09:10,750 --> 01:09:17,469
sysadmin so so right now because we

01:09:14,920 --> 01:09:20,290
don't have people with enough time to

01:09:17,469 --> 01:09:22,210
invest in picking the infrastructure we

01:09:20,290 --> 01:09:25,330
are maybe using more resources on

01:09:22,210 --> 01:09:26,770
suicide and I've never needed but maybe

01:09:25,330 --> 01:09:30,520
that's the smart thing to do right now

01:09:26,770 --> 01:09:37,180
but of course in the future we can look

01:09:30,520 --> 01:09:41,680
at that and but in principle I think it

01:09:37,180 --> 01:09:46,380
should be a last resort to to reduce the

01:09:41,680 --> 01:09:46,380
coverage just to make things faster

01:09:47,580 --> 01:09:56,590
further ok so it's we are taking

01:09:52,120 --> 01:10:00,670
questions now right yeah I machine as

01:09:56,590 --> 01:10:04,890
shown anybody knows about any current

01:10:00,670 --> 01:10:08,469
for to reverse engineer imagination I

01:10:04,890 --> 01:10:11,469
guess we were all hoping that they will

01:10:08,469 --> 01:10:14,110
just die nobody would care so we don't

01:10:11,469 --> 01:10:17,230
have to reverse engineer and or that

01:10:14,110 --> 01:10:19,840
driver for it but apparently people are

01:10:17,230 --> 01:10:27,660
putting in the Sosa's which are expected

01:10:19,840 --> 01:10:43,690
to be used in cars for 20 years no

01:10:27,660 --> 01:10:46,840
imagination was a time I was thinking of

01:10:43,690 --> 01:10:49,660
renessa as a thing they have so moto

01:10:46,840 --> 01:10:52,180
motive associate a recent one using a

01:10:49,660 --> 01:10:58,060
new over here thank you

01:10:52,180 --> 01:11:00,030
I think they were all this India Tech

01:10:58,060 --> 01:11:02,550
maybe

01:11:00,030 --> 01:11:05,930
on that note who's going to

01:11:02,550 --> 01:11:08,010
reverse-engineer the Apple GPUs now that

01:11:05,930 --> 01:11:20,160
presumably they'll be showing up in

01:11:08,010 --> 01:11:24,710
laptop soon oh yeah example after after

01:11:20,160 --> 01:11:27,930
Apple stopped using imagination for the

01:11:24,710 --> 01:11:32,190
iOS devices they did their own in-house

01:11:27,930 --> 01:11:33,740
GPU and it was I just saw the other day

01:11:32,190 --> 01:11:36,510
that's apparently there's gonna be arm

01:11:33,740 --> 01:11:40,140
MacBooks so I would assume that's gonna

01:11:36,510 --> 01:11:46,440
be with their GPU as well so that was

01:11:40,140 --> 01:11:48,360
just a joke people who will believe us

01:11:46,440 --> 01:11:53,040
on them and I'm gonna wonder why why'd

01:11:48,360 --> 01:11:54,660
you do something use yeah I think before

01:11:53,040 --> 01:11:56,400
you worry about the GPU you probably

01:11:54,660 --> 01:12:00,480
have to worry about bringing up a whole

01:11:56,400 --> 01:12:03,320
new SOC and Linux without even the

01:12:00,480 --> 01:12:10,670
benefit of a downstream Android kernel

01:12:03,320 --> 01:12:14,370
unfortunately so I would I would I think

01:12:10,670 --> 01:12:16,530
arm MacBooks are a good excuse fighter

01:12:14,370 --> 01:12:19,970
for us to finally just say no just we're

01:12:16,530 --> 01:12:19,970
not gonna support that go away

01:12:35,090 --> 01:12:41,340
hello I see the sort of conversation in

01:12:39,360 --> 01:12:43,730
the chat about the concealed on machine

01:12:41,340 --> 01:12:43,730
learning

01:12:48,280 --> 01:12:52,190
there's something interesting that I

01:12:50,180 --> 01:12:55,310
read happy is doing with the cycle and

01:12:52,190 --> 01:12:57,440
OpenCL for four servers they are looking

01:12:55,310 --> 01:12:58,940
at that but of course you have Agra for

01:12:57,440 --> 01:13:00,620
example and you can be used a lot of

01:12:58,940 --> 01:13:03,860
what they are doing in the world for

01:13:00,620 --> 01:13:07,900
that and of course you can also get the

01:13:03,860 --> 01:13:07,900
other drivers to enjoy use that

01:13:09,050 --> 01:13:13,670
[Music]

01:13:10,810 --> 01:13:30,200
Christian what's the prospect for OpenCL

01:13:13,670 --> 01:13:34,360
on there's to look into now you do you

01:13:30,200 --> 01:13:34,360
have a really swimmer computer support

01:13:47,170 --> 01:13:53,900
ok so if there's no further questions

01:13:50,390 --> 01:13:56,450
should we should we finish so thanks a

01:13:53,900 --> 01:14:00,890
lot to everybody for bein here and two

01:13:56,450 --> 01:14:04,910
in a row for hosting us and I'm looking

01:14:00,890 --> 01:14:06,500
for next year's edition tell me I think

01:14:04,910 --> 01:14:13,180
there's one last question about best

01:14:06,500 --> 01:14:13,180
phone support if anyone can answer that

01:14:13,990 --> 01:14:23,060
well I guess well open-source phones

01:14:18,800 --> 01:14:27,920
live in five and bind phone so you can

01:14:23,060 --> 01:14:30,620
choose either yeah and from Allen ro

01:14:27,920 --> 01:14:34,310
work perspective we have the poco that

01:14:30,620 --> 01:14:35,600
you saw drew already so um it has been a

01:14:34,310 --> 01:14:43,180
midnight we've been working on getting

01:14:35,600 --> 01:14:47,470
it usable somewhat we have a problem

01:14:43,180 --> 01:14:51,530
there's several XE notes from Samsung

01:14:47,470 --> 01:14:54,170
that were put into phones and and they

01:14:51,530 --> 01:14:58,220
are using hip used that Pam could

01:14:54,170 --> 01:14:59,700
support but because there was never a

01:14:58,220 --> 01:15:01,440
species or

01:14:59,700 --> 01:15:03,690
the form factor then there is no

01:15:01,440 --> 01:15:08,070
supporting mainline kernel or anything

01:15:03,690 --> 01:15:11,000
that we could get our hands on as a

01:15:08,070 --> 01:15:19,770
problem with that phone form factor that

01:15:11,000 --> 01:15:22,560
everything is okay

01:15:19,770 --> 01:15:25,080
thanks everyone Thank You Tommy you for

01:15:22,560 --> 01:15:27,890
spearheading this and have all the

01:15:25,080 --> 01:15:32,930
panelists for joining and chiming in

01:15:27,890 --> 01:15:32,930

YouTube URL: https://www.youtube.com/watch?v=9WRGbskNtWI


