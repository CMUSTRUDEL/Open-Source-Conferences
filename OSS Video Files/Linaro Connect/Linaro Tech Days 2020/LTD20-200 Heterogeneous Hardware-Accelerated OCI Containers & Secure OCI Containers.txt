Title: LTD20-200 Heterogeneous Hardware-Accelerated OCI Containers & Secure OCI Containers
Publication date: 2020-04-01
Playlist: Linaro Tech Days 2020
Description: 
	This session will present a proposed technical architecture for enabling the dynamic configuration of heterogeneous platforms. The proposal defines extensions to the software management and deployment framework defined by the Open Container Initiative (OCI). The proposed extensions enable a standards-based method for scalable configuration inclusive of acceleration elements (e.g. FPGA-based accelerators, vector processor array accelerators, and asymmetric processing accelerator/offload targets (DSP, RPU)). The proposed OCI extensions would also enable greater flexibility in runtime software deployment on target, including “secure containers” via Xen, allowing each container to run as an isolated virtual machine (VM).

This standardization of configuration information will enable OCI-compliant container daemons to have a scalable abstraction to:
(1) interpret hardware acceleration and VM components within an OCI package
(2) understand the runtime requirements
(3) configure a heterogeneous target as part of the application container deployment process

The session has two goals. The first is to provide an overview of current proposal and collaborations around creating the extensions to the OCI Image Specification. The second is to discuss progress on technical prototyping of the OCI extensions. Both the hardware accelerator aware container and Xen secure container support are under discussion as potential Linaro Big Idea (LBI) projects.

Session Speakers
Stefano Stabellini
Principal Engineer (Xilinx)


Stefano Stabellini serves as system software architect and virtualization lead at Xilinx, the world\'s largest supplier of FPGA solutions. Previously, at Aporeto, he created a virtualization-based security solution for containers and authored several security articles. As Senior Principal Software Engineer in Citrix, he led a small group of passionate engineers working on Open Source projects. Stefano has been involved in Xen development since 2007. He created libxenlight in November 2009 and started the Xen port to ARM with virtualization extensions in 2011. Today he is a Xen Project committer, and he maintains Xen on ARM and Xen support in Linux and QEMU.


Wesley Skeffington
Principal Engineer - Systems Engineering (Xilinx Inc.)


Wes is a Principal Engineer for Xilinx, focused on systems engineering of heterogeneous platform architectures, mixed criticality, and embedded design. He joined Xilinx in 2018 after 15+ years of product design leadership in hardware, FPGA, and mixed software environments of embedded systems. Application focus has been real-time control systems for a variety of products including magnetic resonance imaging (MRI), computed tomography (CT), subsea controllers, and industrial control systems.


You can view this sessions resources here:
https://connect.linaro.org/resources/ltd20/ltd20-200/
Captions: 
	00:00:03,720 --> 00:00:08,640
first off good morning and good

00:00:06,029 --> 00:00:10,050
afternoon welcome to lonardo tech day

00:00:08,640 --> 00:00:13,140
session on heterogenous

00:00:10,050 --> 00:00:16,740
hardware-accelerated OCI containers in

00:00:13,140 --> 00:00:18,720
secure Osei containers I am Wes

00:00:16,740 --> 00:00:22,529
Skeffington and my co-presenter nough

00:00:18,720 --> 00:00:24,210
Stefano Stephanie we both work within

00:00:22,529 --> 00:00:28,289
the systems engineering and systems

00:00:24,210 --> 00:00:31,640
software team Xilinx and what we're

00:00:28,289 --> 00:00:33,860
hoping to talk to you today about is

00:00:31,640 --> 00:00:35,790
briefly about a concept and

00:00:33,860 --> 00:00:38,100
collaboration opportunity that were

00:00:35,790 --> 00:00:41,280
seeking around extending the OCI

00:00:38,100 --> 00:00:45,360
framework to bring heterogeneous

00:00:41,280 --> 00:00:47,390
hardware and VM isolated containers as

00:00:45,360 --> 00:00:53,160
first-class citizens in the OCI

00:00:47,390 --> 00:00:55,440
ecosystem so in that life

00:00:53,160 --> 00:00:57,900
the high-level goal that were working

00:00:55,440 --> 00:00:59,880
towards and the reason we're wanting to

00:00:57,900 --> 00:01:03,630
work with this community lonardo in

00:00:59,880 --> 00:01:07,170
general and a broader set of software in

00:01:03,630 --> 00:01:10,620
silicon vendors is to work with the OCI

00:01:07,170 --> 00:01:13,409
committee in extending specifications to

00:01:10,620 --> 00:01:15,750
support the utilization are as a

00:01:13,409 --> 00:01:18,720
framework format or more heterogeneous

00:01:15,750 --> 00:01:20,670
hardware capabilities within the

00:01:18,720 --> 00:01:24,120
containers ecosystem and so what do we

00:01:20,670 --> 00:01:25,430
mean by heterogeneous Hardware first

00:01:24,120 --> 00:01:27,510
we're talking about things like

00:01:25,430 --> 00:01:31,620
accelerators that can be implemented in

00:01:27,510 --> 00:01:33,540
fda's you can use etc and not replacing

00:01:31,620 --> 00:01:36,479
them but really turning them into the

00:01:33,540 --> 00:01:40,070
OCI for deployment and then container

00:01:36,479 --> 00:01:43,110
access to those accelerator resources

00:01:40,070 --> 00:01:47,280
second is we want to create this call it

00:01:43,110 --> 00:01:50,070
a common dashboard or come plane of

00:01:47,280 --> 00:01:53,220
glass for managing these heterogeneous

00:01:50,070 --> 00:01:55,380
platforms and that includes things like

00:01:53,220 --> 00:01:58,020
the asymmetric multi-core processing

00:01:55,380 --> 00:02:01,080
that many of us implement in cortex are

00:01:58,020 --> 00:02:04,680
in cortex-m coprocessors that sit next

00:02:01,080 --> 00:02:06,869
to your application processors and then

00:02:04,680 --> 00:02:09,299
lastly you know overall kernel

00:02:06,869 --> 00:02:12,750
deployment we'll talk about this is a

00:02:09,299 --> 00:02:16,500
thing called run X where we're standing

00:02:12,750 --> 00:02:17,010
up containers as isolated using Xen

00:02:16,500 --> 00:02:19,230
hyper

00:02:17,010 --> 00:02:20,580
a reference implementation and of course

00:02:19,230 --> 00:02:23,549
that can be extended to two other

00:02:20,580 --> 00:02:26,610
hypervisors so what's the overall

00:02:23,549 --> 00:02:30,090
motivation here the real motivation here

00:02:26,610 --> 00:02:32,280
is that recognition that the OCI is

00:02:30,090 --> 00:02:35,280
quickly growing as an application

00:02:32,280 --> 00:02:37,110
packaging and deployment framework and

00:02:35,280 --> 00:02:39,659
it's not just happening in data centers

00:02:37,110 --> 00:02:41,629
it's also happening at edge targets

00:02:39,659 --> 00:02:44,970
whether your edge is an on-premise

00:02:41,629 --> 00:02:46,909
server or you're talking about the very

00:02:44,970 --> 00:02:50,609
edge where the digital physical boundary

00:02:46,909 --> 00:02:54,709
is bridged in you know microcontroller

00:02:50,609 --> 00:02:57,019
type devices simultaneously our

00:02:54,709 --> 00:02:59,489
application performance growth is really

00:02:57,019 --> 00:03:03,060
ever more dependent on heterogeneous

00:02:59,489 --> 00:03:04,739
platform targets whether those be things

00:03:03,060 --> 00:03:08,099
that we call a domain-specific hardware

00:03:04,739 --> 00:03:10,560
architectures etc but we have really a

00:03:08,099 --> 00:03:13,950
big motivation as a broader compute

00:03:10,560 --> 00:03:15,629
industry and software industry to really

00:03:13,950 --> 00:03:18,329
bridge this gap between the container

00:03:15,629 --> 00:03:20,449
software ecosystem in these increasingly

00:03:18,329 --> 00:03:22,919
domain-specific hardware architectures

00:03:20,449 --> 00:03:26,519
so that's really what we're trying to

00:03:22,919 --> 00:03:28,230
work towards so first we're going to

00:03:26,519 --> 00:03:31,349
talk about linking heterogeneous

00:03:28,230 --> 00:03:35,370
hardware accelerators and to native

00:03:31,349 --> 00:03:36,720
Runcie containers and again what we're

00:03:35,370 --> 00:03:39,090
trying to do is do this at a level

00:03:36,720 --> 00:03:41,519
within the OCI framework that is

00:03:39,090 --> 00:03:43,560
agnostic to the different orchestration

00:03:41,519 --> 00:03:46,620
frameworks and other technologies that

00:03:43,560 --> 00:03:49,019
people have built on top of containers

00:03:46,620 --> 00:03:52,410
in terms of container management and

00:03:49,019 --> 00:03:54,810
orchestration so one of the if we're

00:03:52,410 --> 00:03:57,690
looking at just a heterogeneous Hardware

00:03:54,810 --> 00:03:59,699
access at startup we're specifically

00:03:57,690 --> 00:04:01,620
talking first to is an image spec

00:03:59,699 --> 00:04:06,139
extension to be able to have this

00:04:01,620 --> 00:04:08,730
additional metadata key value pairs to

00:04:06,139 --> 00:04:12,299
identify that there's an incremental

00:04:08,730 --> 00:04:14,340
resource required for the container and

00:04:12,299 --> 00:04:16,919
then where and what is that device data

00:04:14,340 --> 00:04:22,079
associated with so in this example we've

00:04:16,919 --> 00:04:25,289
got an FPGA based accelerator we would

00:04:22,079 --> 00:04:29,760
represent that in the image manifest of

00:04:25,289 --> 00:04:30,400
the container with this device name and

00:04:29,760 --> 00:04:32,620
then

00:04:30,400 --> 00:04:36,100
pointing to the Associated FPGA

00:04:32,620 --> 00:04:39,880
bitstream will be programmed container D

00:04:36,100 --> 00:04:42,310
would then know how to unwrap that and

00:04:39,880 --> 00:04:44,140
work with the device specific

00:04:42,310 --> 00:04:47,290
configuration triggered based on that

00:04:44,140 --> 00:04:50,560
resource metadata hook the device

00:04:47,290 --> 00:04:53,170
configuration block would then take care

00:04:50,560 --> 00:04:56,020
of the device specific functionality to

00:04:53,170 --> 00:04:57,720
get that resource in bit string loaded

00:04:56,020 --> 00:05:00,370
into the system and then return that

00:04:57,720 --> 00:05:04,810
device name and any other associated

00:05:00,370 --> 00:05:08,380
information to this shim that can be

00:05:04,810 --> 00:05:11,680
used by run C to actually stand up the

00:05:08,380 --> 00:05:14,200
container and expose the Associated

00:05:11,680 --> 00:05:18,250
harder resources that that container is

00:05:14,200 --> 00:05:18,850
going to access in terms of how we go do

00:05:18,250 --> 00:05:21,160
that

00:05:18,850 --> 00:05:22,930
we are working or we've looked at and

00:05:21,160 --> 00:05:26,320
our existing prototypes just passing

00:05:22,930 --> 00:05:29,080
those as extra arguments and we call run

00:05:26,320 --> 00:05:32,140
C but a more scalable solution might be

00:05:29,080 --> 00:05:35,170
in terms of the dynamic definition that

00:05:32,140 --> 00:05:40,060
config that JSON file associated with

00:05:35,170 --> 00:05:42,880
that container so again it's not about

00:05:40,060 --> 00:05:44,770
replacing kubernetes or run c or

00:05:42,880 --> 00:05:47,320
container B in itself it's about being

00:05:44,770 --> 00:05:50,290
able to use those mechanisms as an

00:05:47,320 --> 00:05:54,490
orchestration framework for tunning into

00:05:50,290 --> 00:05:56,170
these heterogeneous platforms so then if

00:05:54,490 --> 00:05:58,450
we flip that and look at the other side

00:05:56,170 --> 00:05:59,260
of that as as you look at resource

00:05:58,450 --> 00:06:00,630
management

00:05:59,260 --> 00:06:04,240
obviously there's startup and shutdown

00:06:00,630 --> 00:06:07,870
piece of it kind of works in the

00:06:04,240 --> 00:06:10,080
opposite manner where when once we get

00:06:07,870 --> 00:06:13,360
the stop command for the associated

00:06:10,080 --> 00:06:17,320
container we can shut down and stop that

00:06:13,360 --> 00:06:19,090
container and then bring back that state

00:06:17,320 --> 00:06:21,700
information to the device configuration

00:06:19,090 --> 00:06:24,760
so in this case or this example of net

00:06:21,700 --> 00:06:27,430
hva based accelerator then we can tear

00:06:24,760 --> 00:06:29,650
down and free up that partial

00:06:27,430 --> 00:06:32,320
reconfiguration or you can say within

00:06:29,650 --> 00:06:35,410
the FPGA or what other device that

00:06:32,320 --> 00:06:38,620
you're talking to so that's sort of the

00:06:35,410 --> 00:06:42,640
example of using run C in combination

00:06:38,620 --> 00:06:44,110
with the heterogeneous accelerator

00:06:42,640 --> 00:06:46,970
orchestration framework

00:06:44,110 --> 00:06:50,180
so with that then we'll jump into

00:06:46,970 --> 00:06:51,980
talking about the concept around secure

00:06:50,180 --> 00:06:56,230
containers with the Zen looks like a

00:06:51,980 --> 00:06:59,410
Stefano you're online yeah I mean so

00:06:56,230 --> 00:07:02,450
alright I can take it from here on run X

00:06:59,410 --> 00:07:05,090
so let me add a few words on what run X

00:07:02,450 --> 00:07:08,810
is before we draw parallel to what just

00:07:05,090 --> 00:07:11,480
was described in this world so run X is

00:07:08,810 --> 00:07:15,740
a new CI compatible container runtime

00:07:11,480 --> 00:07:18,740
engine and is under lfh so the idea is

00:07:15,740 --> 00:07:21,530
that it can be used to start continue to

00:07:18,740 --> 00:07:24,920
run containers securely using Xen

00:07:21,530 --> 00:07:27,530
hypervisor technologies so it what it

00:07:24,920 --> 00:07:29,510
does is it create a very small built on

00:07:27,530 --> 00:07:33,140
machine as small as possible just enough

00:07:29,510 --> 00:07:35,630
to create an environment to run the

00:07:33,140 --> 00:07:37,850
container inside then the benefit is

00:07:35,630 --> 00:07:40,580
that it's just a very different runtime

00:07:37,850 --> 00:07:42,680
environment from a normal container

00:07:40,580 --> 00:07:46,460
runtime like run C so it has very

00:07:42,680 --> 00:07:48,200
different properties for instances much

00:07:46,460 --> 00:07:50,390
stronger real-time separation and

00:07:48,200 --> 00:07:54,230
isolation and stronger security

00:07:50,390 --> 00:07:56,480
guarantees yeah so this is the

00:07:54,230 --> 00:08:00,169
microbiome in the sense that kernel and

00:07:56,480 --> 00:08:02,120
Ram disk provided by run X to run the

00:08:00,169 --> 00:08:04,790
container inside and if you look at

00:08:02,120 --> 00:08:07,790
there is a color scheme darker blue is

00:08:04,790 --> 00:08:10,310
provided by run X while lighter blue is

00:08:07,790 --> 00:08:12,380
the container itself so is there going

00:08:10,310 --> 00:08:15,260
to be as small as possible just as small

00:08:12,380 --> 00:08:16,550
as possible environment to run the

00:08:15,260 --> 00:08:21,080
container

00:08:16,550 --> 00:08:23,240
yes it you can slide right but one of

00:08:21,080 --> 00:08:25,130
the first thing we want to do which i

00:08:23,240 --> 00:08:27,830
think is very interesting is to extend

00:08:25,130 --> 00:08:30,140
your CI image specification so that we

00:08:27,830 --> 00:08:32,210
can also describe kernels and Ram disks

00:08:30,140 --> 00:08:35,120
so the idea is that a kernel to the

00:08:32,210 --> 00:08:38,960
container today is basically a user

00:08:35,120 --> 00:08:41,539
space Linux or in general POSIX set of

00:08:38,960 --> 00:08:43,640
binaries but it could be it could be

00:08:41,539 --> 00:08:46,760
containing kernel space binaries too so

00:08:43,640 --> 00:08:48,500
for instance you can imagine a continue

00:08:46,760 --> 00:08:51,440
with the first coming with the kernel

00:08:48,500 --> 00:08:52,300
binary inside under slash boot or

00:08:51,440 --> 00:08:55,370
somewhere else

00:08:52,300 --> 00:08:57,589
be flagged as kernel so you should be a

00:08:55,370 --> 00:08:59,269
key value pair in the manifest

00:08:57,589 --> 00:09:03,139
look this container actually also

00:08:59,269 --> 00:09:05,810
contains a kernel and then run X we'll

00:09:03,139 --> 00:09:08,240
go look at his manifest find the value

00:09:05,810 --> 00:09:09,949
the key value pair and then it will

00:09:08,240 --> 00:09:13,550
actually use the kernel and RAM disk

00:09:09,949 --> 00:09:17,180
that come with the container to to start

00:09:13,550 --> 00:09:18,800
at the end so if you think of why would

00:09:17,180 --> 00:09:20,029
you want to do that that's right there

00:09:18,800 --> 00:09:26,990
is actually a very good use case for

00:09:20,029 --> 00:09:29,269
this next slide yeah an artist so you

00:09:26,990 --> 00:09:31,370
might wanna you might wanna run on our

00:09:29,269 --> 00:09:34,699
toes and deploying it dynamically using

00:09:31,370 --> 00:09:36,440
run X so a real-time OS like Zephyr you

00:09:34,699 --> 00:09:38,839
can imagine building your application

00:09:36,440 --> 00:09:42,529
using Zephyr or free artists one of

00:09:38,839 --> 00:09:45,589
those and you know because you have real

00:09:42,529 --> 00:09:49,279
time or determinism Q latency

00:09:45,589 --> 00:09:51,259
requirements and you still want to

00:09:49,279 --> 00:09:54,279
deploy dynamically right you you you

00:09:51,259 --> 00:09:57,709
might still want to benefit from the

00:09:54,279 --> 00:09:59,810
lifecycle management the OCI tools come

00:09:57,709 --> 00:10:02,389
with which is very powerful and and very

00:09:59,810 --> 00:10:05,600
convenient to use so what this allows

00:10:02,389 --> 00:10:08,510
you is to build your application as an

00:10:05,600 --> 00:10:11,480
artist as a proper in a kernel artists

00:10:08,510 --> 00:10:14,199
and then pushing into the docker hub and

00:10:11,480 --> 00:10:16,459
then dynamically deploying it using

00:10:14,199 --> 00:10:18,949
orchestration framework like kubernetes

00:10:16,459 --> 00:10:22,029
you know using container d using your

00:10:18,949 --> 00:10:24,769
all your regular OCI tools and

00:10:22,029 --> 00:10:28,880
transparently your art will get run

00:10:24,769 --> 00:10:30,620
inside the VM and it will also show up

00:10:28,880 --> 00:10:34,940
as one of the containers running in your

00:10:30,620 --> 00:10:37,040
system next time and this is now ties

00:10:34,940 --> 00:10:39,740
back exactly what was described in

00:10:37,040 --> 00:10:41,980
detail earlier which is you can still do

00:10:39,740 --> 00:10:44,870
the same thing with accelerators and

00:10:41,980 --> 00:10:46,880
harder assignment to container that'll

00:10:44,870 --> 00:10:49,760
run with run X containers that are

00:10:46,880 --> 00:10:51,949
random is run X it could be both of the

00:10:49,760 --> 00:10:54,139
kind that come with the kernel or all

00:10:51,949 --> 00:10:57,709
the kind that the kernel is provided by

00:10:54,139 --> 00:11:00,829
run X but either way these accelerator

00:10:57,709 --> 00:11:02,410
can be still configured correctly by the

00:11:00,829 --> 00:11:05,660
device the device configuration

00:11:02,410 --> 00:11:08,180
component and then the reharden

00:11:05,660 --> 00:11:10,080
resources just a minor region RQ and

00:11:08,180 --> 00:11:13,320
anything in related

00:11:10,080 --> 00:11:15,600
we'll be directly assigned to the VM so

00:11:13,320 --> 00:11:19,380
that the container can have direct

00:11:15,600 --> 00:11:22,410
access and like with that I give you the

00:11:19,380 --> 00:11:25,110
ball back to you all right thanks just a

00:11:22,410 --> 00:11:27,810
farm so again sticking in this framework

00:11:25,110 --> 00:11:30,200
of the OCI really being valuable in

00:11:27,810 --> 00:11:33,350
terms of a management and deployment

00:11:30,200 --> 00:11:37,170
common plane of glass for a

00:11:33,350 --> 00:11:39,990
heterogeneous set of platforms if we

00:11:37,170 --> 00:11:42,149
look at amp or asymmetric multi-core

00:11:39,990 --> 00:11:44,940
processing there's an existing solution

00:11:42,149 --> 00:11:47,970
and at least on target for that around

00:11:44,940 --> 00:11:49,740
open em that's a great framework that

00:11:47,970 --> 00:11:51,870
within Linux makes use of remote proc

00:11:49,740 --> 00:11:54,990
and so we thought a logical extension of

00:11:51,870 --> 00:11:56,839
that such that that same set of firmware

00:11:54,990 --> 00:12:00,560
resources could be managed through that

00:11:56,839 --> 00:12:03,450
common plain pane of glass for the

00:12:00,560 --> 00:12:06,029
overall system management was to extend

00:12:03,450 --> 00:12:09,510
the same idea of a resource and device

00:12:06,029 --> 00:12:13,470
data by telling that in now to say rpu

00:12:09,510 --> 00:12:16,170
or cortex-m firmware that can be managed

00:12:13,470 --> 00:12:18,870
through that same device configuration

00:12:16,170 --> 00:12:23,670
block so again what this would look like

00:12:18,870 --> 00:12:24,870
is from a would be a traditional Linux

00:12:23,670 --> 00:12:27,390
container but really is just the

00:12:24,870 --> 00:12:30,829
packaging that goes around it to enable

00:12:27,390 --> 00:12:33,300
that to be deployed and then with the

00:12:30,829 --> 00:12:35,160
target container deem container consume

00:12:33,300 --> 00:12:37,110
pass it information in the device

00:12:35,160 --> 00:12:40,470
configuration which then can interact

00:12:37,110 --> 00:12:43,320
with remote proc and the corresponding

00:12:40,470 --> 00:12:45,390
slave processor so again it's not about

00:12:43,320 --> 00:12:49,410
me placing open amp it's about adding a

00:12:45,390 --> 00:12:51,600
layer on top of open amp to be able to

00:12:49,410 --> 00:12:55,079
support those cortex are in cortex and

00:12:51,600 --> 00:13:00,540
firmwares in a common deployment

00:12:55,079 --> 00:13:02,699
infrastructure so just talk to what we

00:13:00,540 --> 00:13:05,250
are we looking for collaboration why we

00:13:02,699 --> 00:13:08,370
want to really engage with the broader

00:13:05,250 --> 00:13:09,690
audience here is that really in we've

00:13:08,370 --> 00:13:12,440
seen a lot of vendor specific

00:13:09,690 --> 00:13:14,730
implementations around enabling

00:13:12,440 --> 00:13:16,410
containers and contain your frustration

00:13:14,730 --> 00:13:19,320
for heterogeneous hardware's but they're

00:13:16,410 --> 00:13:22,140
just that vendor specific and so we want

00:13:19,320 --> 00:13:23,640
to take a crack at really working with

00:13:22,140 --> 00:13:26,520
the open container initiative

00:13:23,640 --> 00:13:28,110
committee such that we can get these

00:13:26,520 --> 00:13:29,810
changes associated with the image

00:13:28,110 --> 00:13:32,730
specification and the runtime

00:13:29,810 --> 00:13:36,180
specification up streamed in a manner

00:13:32,730 --> 00:13:39,440
that provides a common design pattern

00:13:36,180 --> 00:13:42,630
for folks to tie their heterogeneous

00:13:39,440 --> 00:13:45,090
platforms into the OCI deployment

00:13:42,630 --> 00:13:47,970
infrastructure so within the oceanic

00:13:45,090 --> 00:13:50,780
image specification three key things

00:13:47,970 --> 00:13:53,550
that we are working towards is really

00:13:50,780 --> 00:13:55,680
definition of the key value pairs for

00:13:53,550 --> 00:13:58,880
heterogeneous accelerators so we talked

00:13:55,680 --> 00:14:00,110
about the resource device data kernel

00:13:58,880 --> 00:14:04,320
ramdisk

00:14:00,110 --> 00:14:05,520
as just initial examples of what the key

00:14:04,320 --> 00:14:09,540
value pairs that we're trying to work

00:14:05,520 --> 00:14:11,460
towards also talking about where and

00:14:09,540 --> 00:14:13,950
does one locate the devices and

00:14:11,460 --> 00:14:16,350
configuration data packaging within the

00:14:13,950 --> 00:14:19,290
container image in our existing

00:14:16,350 --> 00:14:21,120
prototypes we are just we've picked a

00:14:19,290 --> 00:14:22,590
definition of this but where we need

00:14:21,120 --> 00:14:25,500
feedback and collaborations does that

00:14:22,590 --> 00:14:27,900
work for everybody on the runtime

00:14:25,500 --> 00:14:30,930
specification in our prototyping efforts

00:14:27,900 --> 00:14:33,360
we found that container D often does

00:14:30,930 --> 00:14:35,850
some filtering or removal of relevant

00:14:33,360 --> 00:14:38,310
image Specter data that we really think

00:14:35,850 --> 00:14:40,410
or is required for device configuration

00:14:38,310 --> 00:14:41,850
and so making sure that we get a

00:14:40,410 --> 00:14:43,890
standard definition in terms of how

00:14:41,850 --> 00:14:45,690
container D treats some of these

00:14:43,890 --> 00:14:49,170
additional key value pairs that we want

00:14:45,690 --> 00:14:51,000
the image spec um we also need to

00:14:49,170 --> 00:14:53,730
standardize the way of a container

00:14:51,000 --> 00:14:55,200
device configuration data is really

00:14:53,730 --> 00:14:57,420
passed between the container and the

00:14:55,200 --> 00:14:59,070
host I in our early prototypes from

00:14:57,420 --> 00:15:01,770
using so many environmental variables

00:14:59,070 --> 00:15:03,300
passing I think that's going to be a

00:15:01,770 --> 00:15:05,600
little bit brittle and this again where

00:15:03,300 --> 00:15:08,460
as we look to what's the right long-term

00:15:05,600 --> 00:15:12,570
solution so that we can do this in a

00:15:08,460 --> 00:15:14,520
standardized design pattern and lastly

00:15:12,570 --> 00:15:16,110
is being able to standardize the method

00:15:14,520 --> 00:15:20,250
by which we export those dynamic

00:15:16,110 --> 00:15:23,100
hardware devices to the actual container

00:15:20,250 --> 00:15:24,360
itself so these are sort of or six

00:15:23,100 --> 00:15:26,370
top-level things that we're really

00:15:24,360 --> 00:15:31,350
looking for collaboration with inland ro

00:15:26,370 --> 00:15:35,950
and other contributors to upstream

00:15:31,350 --> 00:15:40,210
within the OCI specifications

00:15:35,950 --> 00:15:42,100
so just in summary you know Xilinx right

00:15:40,210 --> 00:15:45,280
now really has a small development team

00:15:42,100 --> 00:15:46,390
that's working on prototyping this of

00:15:45,280 --> 00:15:47,760
course we're doing that within the

00:15:46,390 --> 00:15:53,200
context of fpga

00:15:47,760 --> 00:15:56,980
SOC s and we really are looking for

00:15:53,200 --> 00:16:03,370
additional inputs because so we don't

00:15:56,980 --> 00:16:06,190
have an overly vendor siloed view of

00:16:03,370 --> 00:16:07,840
what different platforms need from

00:16:06,190 --> 00:16:09,730
configuration data and the way that

00:16:07,840 --> 00:16:14,110
needs to be passed and then ultimately

00:16:09,730 --> 00:16:17,530
really looking for a multi customer

00:16:14,110 --> 00:16:20,920
multi vendor drive to getting the OCI

00:16:17,530 --> 00:16:23,890
committee to support the specification

00:16:20,920 --> 00:16:26,980
changes that we're advocating for is

00:16:23,890 --> 00:16:29,530
stefano mentioned we already have some

00:16:26,980 --> 00:16:31,830
collaborations underway with project Eve

00:16:29,530 --> 00:16:34,630
within the Linux Foundation at edge

00:16:31,830 --> 00:16:37,390
organization you can go to that way keen

00:16:34,630 --> 00:16:41,290
kind of see where things are in terms of

00:16:37,390 --> 00:16:44,200
that progress around the run X efforts

00:16:41,290 --> 00:16:46,960
and really our our key message here is

00:16:44,200 --> 00:16:50,220
this is an early proposal we're working

00:16:46,960 --> 00:16:52,330
in early prototypes within our team and

00:16:50,220 --> 00:16:55,450
really we're asking for as other

00:16:52,330 --> 00:16:58,390
contributors here that would see benefit

00:16:55,450 --> 00:17:01,060
or help here for managing these

00:16:58,390 --> 00:17:04,990
heterogeneous accelerators asymmetric

00:17:01,060 --> 00:17:07,380
multi-core systems etc and again the key

00:17:04,990 --> 00:17:09,310
value here is really about an integrated

00:17:07,380 --> 00:17:12,430
standards-based solution for the

00:17:09,310 --> 00:17:15,520
infrastructure that can be used in a way

00:17:12,430 --> 00:17:18,699
that is not vendor specific so if you're

00:17:15,520 --> 00:17:20,050
interested in participating giving some

00:17:18,699 --> 00:17:22,570
input and helping steer some of the

00:17:20,050 --> 00:17:25,209
early prototyping work that our team is

00:17:22,570 --> 00:17:28,960
doing please reach out to myself and

00:17:25,209 --> 00:17:31,170
Stefano and with that I think we wrapped

00:17:28,960 --> 00:17:31,170

YouTube URL: https://www.youtube.com/watch?v=Ct30RFwEm5M


