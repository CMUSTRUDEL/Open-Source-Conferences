Title: LTD20-400 Wayland and Weston: 8 years of production devices
Publication date: 2020-04-08
Playlist: Linaro Tech Days 2020
Description: 
	Description
Wayland and Weston have now been shipping in commercial devices for eight years, since the first set-top box shipped with Wayland and Weston's 0.85 release.

Considered a dramatic and difficult bet at the time, Wayland has in a short time become the de-facto choice across the industry. Not only is it seen everything from set-top boxes to smart TVs to smart watches, but its extensible and flexible nature means that it is even used to support Android applications within Google's ChromeOS, running as a component of the Chromium browser engine. More complex usecases such as remote-display sharing and even VR environments are using Wayland as a building block.

Many of these devices are using the Weston display server, developed alongside the original Wayland implementation. Weston performs a careful balancing act, delivering as much of the capability of the underlying hardware as possible, whilst being uncompromising on quality. Weston's efficient architecture and quality has seen it ship in many cases where reliability and responsiveness are non-negotiable. Thanks to its internal architecture making full use of the hardware's capability, Weston is often used as a vehicle for introducing new features to the upstream graphics stack, as it can be easily adapted to take full advantage of new and more efficient hardware offload functionality.

In this talk, Daniel, a core Wayland developer at Collabora, will share some of the lessons of the last eight years of helping partners and the community successfully ship devices fulfilling Wayland's original promise of 'every frame is perfect', including lessons from what Wayland did well, things that would be very different in Wayland 2.0, and a look to future usecases and challenges for the whole graphics stack. He will also run through some real-life practical examples of closing the gap between prototype and production, using powerful profiling and introspection tools provided in recent versions of Weston.

Session Speakers
Daniel Stone
Collabora Graphics Lead (Collabora)


Daniel is the graphics lead at Collabora, working with Wayland/Weston, Mesa (including EGL/OpenGL ES/Vulkan), the Linux kernel DRM/KMS display and modesetting, GStreamer, and more. We improve the upstream open-source graphics experience, and help our customers make the most of it. 



You can view this sessions presentation on the Linaro Connect website here:
https://connect.linaro.org/resources/ltd20/ltd20-400/
Captions: 
	00:00:00,780 --> 00:00:07,769
so yeah thanks for for joining the

00:00:03,979 --> 00:00:12,509
somewhat rearranged home Lenora connect

00:00:07,769 --> 00:00:15,299
session I'm here to talk today about the

00:00:12,509 --> 00:00:18,840
Wayland and Western projects which have

00:00:15,299 --> 00:00:22,590
been quite intertwined and what we've

00:00:18,840 --> 00:00:25,500
learned from the last eight or so years

00:00:22,590 --> 00:00:29,790
of actually having shipped these in

00:00:25,500 --> 00:00:32,669
production and hopefully some some

00:00:29,790 --> 00:00:36,210
takeaways for you for your own projects

00:00:32,669 --> 00:00:41,370
to see if there's anything you can learn

00:00:36,210 --> 00:00:42,329
from us so I'm the graphics lead at

00:00:41,370 --> 00:00:45,929
kelabra

00:00:42,329 --> 00:00:48,510
I've been at kelabra for about eleven

00:00:45,929 --> 00:00:52,229
years and for the last eight years or so

00:00:48,510 --> 00:00:54,510
have been actively working on Weiland

00:00:52,229 --> 00:00:57,059
together with them not just the

00:00:54,510 --> 00:01:02,879
community but a lot of the rest of our

00:00:57,059 --> 00:01:06,240
team collaborates both so yeah this um

00:01:02,879 --> 00:01:10,020
this talk it's not actually about the

00:01:06,240 --> 00:01:13,860
the technical details really of Waveland

00:01:10,020 --> 00:01:18,299
and Western it's about what's happened

00:01:13,860 --> 00:01:21,360
over the past twelve years and how

00:01:18,299 --> 00:01:27,590
Weiland as a project has been shaped

00:01:21,360 --> 00:01:33,320
since um since 2008 if you look at the

00:01:27,590 --> 00:01:36,770
ecosystem in 2008 it was the giant

00:01:33,320 --> 00:01:40,320
unchallengeable behemoth of X 11 and

00:01:36,770 --> 00:01:43,289
then a lot of fur embedded systems in

00:01:40,320 --> 00:01:46,829
particular and a lot of the systems that

00:01:43,289 --> 00:01:52,619
Lonardo members target we had things

00:01:46,829 --> 00:01:55,649
like direct FB cuties qws that was the

00:01:52,619 --> 00:01:58,590
the landscape really for other Windows

00:01:55,649 --> 00:02:02,520
systems which Weiland was effectively

00:01:58,590 --> 00:02:06,810
competing with um but now if you fast

00:02:02,520 --> 00:02:10,739
forward to 2020 things are completely

00:02:06,810 --> 00:02:13,650
different X 11 is obviously still around

00:02:10,739 --> 00:02:14,460
and to be honest I don't think it'll

00:02:13,650 --> 00:02:19,130
ever die

00:02:14,460 --> 00:02:22,910
for better or worse but apart from that

00:02:19,130 --> 00:02:25,610
especially in the arm and embedded world

00:02:22,910 --> 00:02:30,350
Weiland is the Windows system of choice

00:02:25,610 --> 00:02:33,630
it's now the default Windows system for

00:02:30,350 --> 00:02:37,950
desktop and mainline distributions as

00:02:33,630 --> 00:02:41,100
well generally and obviously to get to

00:02:37,950 --> 00:02:43,170
that position we've made a lot of good

00:02:41,100 --> 00:02:47,600
choices and and done a lot of good

00:02:43,170 --> 00:02:51,330
things along the way as a project and

00:02:47,600 --> 00:02:53,970
some which were not so great we've

00:02:51,330 --> 00:02:58,710
definitely made some mistakes along the

00:02:53,970 --> 00:03:00,750
way so we're just trying to run through

00:02:58,710 --> 00:03:03,270
some of this this history and some of

00:03:00,750 --> 00:03:06,150
the takeaways to see if your project

00:03:03,270 --> 00:03:12,230
could learn anything from the history

00:03:06,150 --> 00:03:15,200
and the evolution of Weiland and

00:03:12,230 --> 00:03:17,790
probably to understand a lot of the

00:03:15,200 --> 00:03:21,630
context I thought I'd run back through

00:03:17,790 --> 00:03:25,250
the overall history of Weiland as a

00:03:21,630 --> 00:03:28,440
project and the various stages of

00:03:25,250 --> 00:03:31,290
revolution it's been through to help

00:03:28,440 --> 00:03:35,750
understand the the context in which some

00:03:31,290 --> 00:03:39,900
of the choices and decisions were made

00:03:35,750 --> 00:03:46,880
so firstly if we look at this is a kind

00:03:39,900 --> 00:03:49,650
of pre historical age in late 2008

00:03:46,880 --> 00:03:53,970
Christian hoax burg otherwise known as

00:03:49,650 --> 00:03:58,110
krh made his first commit to the Weiland

00:03:53,970 --> 00:04:02,490
repository it described a nano display

00:03:58,110 --> 00:04:05,670
server and it did have the object model

00:04:02,490 --> 00:04:09,720
and that we know from Weiland itself and

00:04:05,670 --> 00:04:13,250
a lot of the same protocol but a lot of

00:04:09,720 --> 00:04:19,350
things were completely different

00:04:13,250 --> 00:04:22,109
throughout 2008 and 2009 continued as a

00:04:19,350 --> 00:04:27,190
very very small sort of one man's

00:04:22,109 --> 00:04:29,950
interest project the only real

00:04:27,190 --> 00:04:32,460
activity other than Christian is for

00:04:29,950 --> 00:04:36,160
onyx noticed the git repository in

00:04:32,460 --> 00:04:38,290
October and Rashida I did go back

00:04:36,160 --> 00:04:41,590
through and read some of the the

00:04:38,290 --> 00:04:44,590
comments on that article some of which

00:04:41,590 --> 00:04:49,900
were incredibly prescient and others of

00:04:44,590 --> 00:04:52,960
which were not so much but through 2008

00:04:49,900 --> 00:04:57,550
and 2009 it was really just Christians

00:04:52,960 --> 00:04:59,710
own personal interest hacking with race

00:04:57,550 --> 00:05:05,080
road being about the only other

00:04:59,710 --> 00:05:08,920
contributor of note and then it took

00:05:05,080 --> 00:05:12,460
until really about 2010 when he started

00:05:08,920 --> 00:05:15,640
to see Wayland as we know it begin to

00:05:12,460 --> 00:05:18,940
take shape so we had things like the

00:05:15,640 --> 00:05:21,790
protocol being generated from XML which

00:05:18,940 --> 00:05:25,540
is made of much easier the extension

00:05:21,790 --> 00:05:29,680
system that we have today and we also

00:05:25,540 --> 00:05:33,130
had a kind of the start of a desktop

00:05:29,680 --> 00:05:38,170
protocol and the buffer management by

00:05:33,130 --> 00:05:41,110
August 2010 so that is really the

00:05:38,170 --> 00:05:44,860
starting point of Weiland as we know it

00:05:41,110 --> 00:05:50,610
today would have begun just under ten

00:05:44,860 --> 00:05:52,840
years ago now then in October 2010

00:05:50,610 --> 00:05:56,530
unfortunately although history before

00:05:52,840 --> 00:06:00,940
then is is lost as it's in a now-deleted

00:05:56,530 --> 00:06:04,300
google group but this is the first still

00:06:00,940 --> 00:06:07,570
available public mailing list is when

00:06:04,300 --> 00:06:11,020
christian moved Weiland to free desktop

00:06:07,570 --> 00:06:13,120
dot org and there are positives and the

00:06:11,020 --> 00:06:15,400
lists were created and you could start

00:06:13,120 --> 00:06:22,840
to see a lot of public discussion and

00:06:15,400 --> 00:06:25,780
more contribution and then in the kind

00:06:22,840 --> 00:06:28,750
of the Stone Age I've put it as not

00:06:25,780 --> 00:06:32,860
about myself that just about a sort of

00:06:28,750 --> 00:06:39,250
very rudimentary beginning to to take

00:06:32,860 --> 00:06:40,360
shape so we see through 2011 that we

00:06:39,250 --> 00:06:44,500
have

00:06:40,360 --> 00:06:47,439
Western the compositor running on top of

00:06:44,500 --> 00:06:51,729
Weyland itself in the nested mode for

00:06:47,439 --> 00:06:53,949
the first time and then Western moving

00:06:51,729 --> 00:06:57,250
out to a separate repository from the

00:06:53,949 --> 00:06:59,710
Weyland core as well and now it was

00:06:57,250 --> 00:07:01,500
quite important because it acknowledged

00:06:59,710 --> 00:07:04,900
that there would be multiple

00:07:01,500 --> 00:07:06,909
implementations of Wayland and more

00:07:04,900 --> 00:07:10,319
importantly that Wayland itself was

00:07:06,909 --> 00:07:13,300
ready for though multiple

00:07:10,319 --> 00:07:16,090
implementations and for people to to

00:07:13,300 --> 00:07:20,379
take it outside of this sandbox and try

00:07:16,090 --> 00:07:23,770
it and really implement it and sure

00:07:20,379 --> 00:07:27,370
enough already by by March the free

00:07:23,770 --> 00:07:30,969
books shipped by a French internet and

00:07:27,370 --> 00:07:34,020
set-top box provider called free had

00:07:30,969 --> 00:07:37,240
already shipped out to millions of users

00:07:34,020 --> 00:07:42,610
based on essentially an unreleased

00:07:37,240 --> 00:07:47,500
version of Wayland and throughout 2011

00:07:42,610 --> 00:07:50,759
we continued to accumulate a lot of

00:07:47,500 --> 00:07:54,190
things taking shape like X Wayland for

00:07:50,759 --> 00:07:58,870
hosting x11 clients within a Wayland

00:07:54,190 --> 00:08:03,750
session and then by the end of this

00:07:58,870 --> 00:08:08,830
period in very early 2012 around FOSDEM

00:08:03,750 --> 00:08:13,330
we can see wave and really solidify into

00:08:08,830 --> 00:08:16,449
the roots of what we know now so there

00:08:13,330 --> 00:08:18,819
was a meeting of around 15 Weiland

00:08:16,449 --> 00:08:21,490
contributors happened just before Folsom

00:08:18,819 --> 00:08:27,009
that year and one of the outcomes is we

00:08:21,490 --> 00:08:31,000
had this 0.85 release which was the

00:08:27,009 --> 00:08:34,390
first real release of Weiland in 2012

00:08:31,000 --> 00:08:42,760
and now had almost all of the concepts

00:08:34,390 --> 00:08:45,040
that we know today and then yeah we move

00:08:42,760 --> 00:08:48,120
into to the bronze age where we're not

00:08:45,040 --> 00:08:51,160
so much just banging tools together but

00:08:48,120 --> 00:08:53,670
we're starting to see this really be

00:08:51,160 --> 00:08:56,700
pushed out and be used in anger

00:08:53,670 --> 00:09:00,420
at this stage there were a lot of Intel

00:08:56,700 --> 00:09:03,300
developers really pushing Weiland quite

00:09:00,420 --> 00:09:08,460
aggressively so by this stage they

00:09:03,300 --> 00:09:11,550
ported the Janome shell to Wayland later

00:09:08,460 --> 00:09:13,770
on in 2012 Geneva the automotive

00:09:11,550 --> 00:09:17,940
alliance decided that they should

00:09:13,770 --> 00:09:20,210
officially adopt Wayland as well there

00:09:17,940 --> 00:09:25,589
was a lot of work being put into

00:09:20,210 --> 00:09:28,920
documentation by 2013 we've hit 1.0 and

00:09:25,589 --> 00:09:32,370
declared that the clients ABI is stable

00:09:28,920 --> 00:09:37,020
and then we're sort of really validated

00:09:32,370 --> 00:09:41,000
by canonical and announcing Mia as a

00:09:37,020 --> 00:09:45,360
similar but sort of rival Window System

00:09:41,000 --> 00:09:47,610
and that's I think when we knew that

00:09:45,360 --> 00:09:52,100
Wayland was being taken very seriously

00:09:47,610 --> 00:09:54,240
because a lot of the reaction was that

00:09:52,100 --> 00:09:56,790
people felt that they should be using

00:09:54,240 --> 00:09:59,760
Wayland because by that stage had

00:09:56,790 --> 00:10:09,260
already had this position as kind of the

00:09:59,760 --> 00:10:13,860
default and the incumbent moving on

00:10:09,260 --> 00:10:16,529
through into 2013 so the project is now

00:10:13,860 --> 00:10:20,570
five years old at this stage we're

00:10:16,529 --> 00:10:24,660
starting to see phones ship with Wayland

00:10:20,570 --> 00:10:29,310
we have the xdg shell desktop protocol

00:10:24,660 --> 00:10:31,050
introduced given that the original WL

00:10:29,310 --> 00:10:35,940
shell was only ever meant to be a

00:10:31,050 --> 00:10:39,240
stopgap we had QT Wayland and the QTE

00:10:35,940 --> 00:10:44,450
client side lighthouse staff announced

00:10:39,240 --> 00:10:48,290
as general availability and being

00:10:44,450 --> 00:10:52,529
shipped out and used by real customers

00:10:48,290 --> 00:10:57,680
by 2015 genome supporting Wayland in

00:10:52,529 --> 00:11:01,709
mainline and at that stage Christian has

00:10:57,680 --> 00:11:04,410
quietly stepped away from his role as

00:11:01,709 --> 00:11:05,810
the found the primary developer the

00:11:04,410 --> 00:11:09,410
release manager

00:11:05,810 --> 00:11:12,080
and he's handed over to Packer one of

00:11:09,410 --> 00:11:16,340
the Calabria developers as the first

00:11:12,080 --> 00:11:20,420
release manager who wasn't Christian and

00:11:16,340 --> 00:11:23,029
one very small bit important point on

00:11:20,420 --> 00:11:27,910
the timeline is this Weiland protocols

00:11:23,029 --> 00:11:30,770
repository before their soul of the

00:11:27,910 --> 00:11:33,770
Weiland extension and protocol

00:11:30,770 --> 00:11:36,110
development was happening inside the

00:11:33,770 --> 00:11:38,960
Weiland called repository or it was

00:11:36,110 --> 00:11:41,000
happening inside Western in its role at

00:11:38,960 --> 00:11:44,210
the time as the official reference

00:11:41,000 --> 00:11:47,660
compositor was what we'd clustered us

00:11:44,210 --> 00:11:49,220
and myelin particles was an

00:11:47,660 --> 00:11:53,420
acknowledgment that the Weiland

00:11:49,220 --> 00:11:58,900
ecosystem was far larger than needs we

00:11:53,420 --> 00:12:03,200
had genome K de genève e enlightenment

00:11:58,900 --> 00:12:08,710
other much smaller window managers and

00:12:03,200 --> 00:12:12,140
desktop environments QT media players

00:12:08,710 --> 00:12:15,760
there was just so much going on that we

00:12:12,140 --> 00:12:19,540
brought out this Wayland repository

00:12:15,760 --> 00:12:22,820
Weiland protocols for posit Ori to allow

00:12:19,540 --> 00:12:26,890
everyone from all different parts of the

00:12:22,820 --> 00:12:31,520
ecosystem to work on common and shared

00:12:26,890 --> 00:12:34,880
protocol development and try to head off

00:12:31,520 --> 00:12:38,150
the fragmentation by having everyone who

00:12:34,880 --> 00:12:40,910
was working on similar use cases and

00:12:38,150 --> 00:12:44,240
similar protocols be able to to

00:12:40,910 --> 00:12:49,030
collaborate and work together which is a

00:12:44,240 --> 00:13:00,410
lot like the xdg and freedesktop.org

00:12:49,030 --> 00:13:03,080
standards for for x11 as well by 2016

00:13:00,410 --> 00:13:06,230
where we're arguably in this quite

00:13:03,080 --> 00:13:11,180
advanced stage where things are moving

00:13:06,230 --> 00:13:15,890
quite rapidly so Vulcan 1.0 launches and

00:13:11,180 --> 00:13:18,899
it's had Whalen support in everywhere

00:13:15,890 --> 00:13:23,220
always so the open stuff

00:13:18,899 --> 00:13:27,589
I believe even on video they they have

00:13:23,220 --> 00:13:27,589
support just out of the box no problem

00:13:27,860 --> 00:13:35,819
also we saw the first release of a

00:13:31,639 --> 00:13:39,319
tiling Windham manager called sway which

00:13:35,819 --> 00:13:42,709
sort of built the foundations for the

00:13:39,319 --> 00:13:47,629
compositor toolkit now known as WL roots

00:13:42,709 --> 00:13:51,300
and in a coincidence at similar timing

00:13:47,629 --> 00:13:55,040
Weston decided that it should be more

00:13:51,300 --> 00:13:59,369
than a plug-in system with a kind of

00:13:55,040 --> 00:14:02,369
small example desktop and that we needed

00:13:59,369 --> 00:14:08,639
to make it into this reusable library

00:14:02,369 --> 00:14:10,529
which others could take and adapt one of

00:14:08,639 --> 00:14:15,300
the the bigger and more interesting

00:14:10,529 --> 00:14:19,100
markers as well in 2016 is the Chrome OS

00:14:15,300 --> 00:14:22,259
chain came and announced publicly that

00:14:19,100 --> 00:14:24,959
chrome itself contained Wayland server

00:14:22,259 --> 00:14:28,559
named exosphere and this was how Chrome

00:14:24,959 --> 00:14:32,490
OS would host Android apps that Chrome

00:14:28,559 --> 00:14:35,610
OS would be Wayland server and that

00:14:32,490 --> 00:14:40,410
running inside the android client

00:14:35,610 --> 00:14:43,490
container would be a Wayland client that

00:14:40,410 --> 00:14:46,679
was the original use case but it's also

00:14:43,490 --> 00:14:49,439
being pushed out to support more use

00:14:46,679 --> 00:14:55,800
cases like running generic Linux in a

00:14:49,439 --> 00:15:02,009
chrome OS container by 2016

00:14:55,800 --> 00:15:04,230
sorry 2017 canonical announced that they

00:15:02,009 --> 00:15:06,660
would not be investing any more in Mir

00:15:04,230 --> 00:15:10,049
and that they saw the future of the

00:15:06,660 --> 00:15:13,730
Ubuntu desktop as a Waveland based

00:15:10,049 --> 00:15:19,459
genome system and around the same time

00:15:13,730 --> 00:15:23,249
we finally managed to get this stable

00:15:19,459 --> 00:15:26,610
desktop window management protocol this

00:15:23,249 --> 00:15:29,549
exterior shell staple release was the

00:15:26,610 --> 00:15:32,839
first time we had real desktop window

00:15:29,549 --> 00:15:32,839
management under Wayland

00:15:37,290 --> 00:15:43,650
and a lot of things that have happened

00:15:39,970 --> 00:15:47,890
since an have really happened outside of

00:15:43,650 --> 00:15:52,360
Wayland and Weston itself we had some

00:15:47,890 --> 00:15:55,390
good milestones like a landing atomic

00:15:52,360 --> 00:15:58,120
mode setting inside Western and using

00:15:55,390 --> 00:16:04,720
that push forward the development of

00:15:58,120 --> 00:16:07,600
kernel mode setting and that later is

00:16:04,720 --> 00:16:09,640
one of the things that every usable

00:16:07,600 --> 00:16:13,589
framework that I'll discuss a little

00:16:09,640 --> 00:16:18,220
later called lib liftoff picked up from

00:16:13,589 --> 00:16:20,200
but then a lot of the work throughout

00:16:18,220 --> 00:16:23,730
the past couple of years has really been

00:16:20,200 --> 00:16:27,960
along the margins you know they're not

00:16:23,730 --> 00:16:33,100
big new features or splashy developments

00:16:27,960 --> 00:16:36,670
it's things like working on how we deal

00:16:33,100 --> 00:16:40,709
with external contributors so moving to

00:16:36,670 --> 00:16:45,180
get web rather than a mailing list based

00:16:40,709 --> 00:16:49,900
patch contribution system and

00:16:45,180 --> 00:16:53,200
implementing a documented government's

00:16:49,900 --> 00:16:55,870
kind of committee for for how we accept

00:16:53,200 --> 00:16:58,540
things into Wayland protocols and decide

00:16:55,870 --> 00:17:03,480
on their status and effectively the

00:16:58,540 --> 00:17:06,520
level of advocacy and even build systems

00:17:03,480 --> 00:17:09,550
so if you're looking at this history

00:17:06,520 --> 00:17:13,179
diagram and it really does look like

00:17:09,550 --> 00:17:17,110
there was a huge period of initial

00:17:13,179 --> 00:17:20,520
excitement and development and then less

00:17:17,110 --> 00:17:23,500
development but more about adoption and

00:17:20,520 --> 00:17:26,530
now we're almost in this plateau where

00:17:23,500 --> 00:17:34,210
there's very little development actually

00:17:26,530 --> 00:17:37,660
happening on on Wayland itself so to

00:17:34,210 --> 00:17:42,520
illustrate that I spent some time with

00:17:37,660 --> 00:17:45,490
some some stats generators and a bunch

00:17:42,520 --> 00:17:50,640
of JavaScript graphing frameworks until

00:17:45,490 --> 00:17:50,640
I found the one I actually liked the

00:17:51,180 --> 00:18:00,630
first one if we if we look at how the

00:17:56,610 --> 00:18:04,000
how the commits have changed over time

00:18:00,630 --> 00:18:07,240
this is just the number of commits to to

00:18:04,000 --> 00:18:11,980
each repository and you can kind of see

00:18:07,240 --> 00:18:16,690
it follows this this trend that I just

00:18:11,980 --> 00:18:20,740
discussed so we see Wayland itself being

00:18:16,690 --> 00:18:24,640
quite rapidly developed and then Western

00:18:20,740 --> 00:18:26,710
the initial reference implementation

00:18:24,640 --> 00:18:29,890
with also some sample client

00:18:26,710 --> 00:18:33,850
implementations being extremely rapidly

00:18:29,890 --> 00:18:35,860
developed as we move away from protocol

00:18:33,850 --> 00:18:38,740
development as we feel the protocols

00:18:35,860 --> 00:18:42,400
largely good and we work to build out

00:18:38,740 --> 00:18:45,460
the implementation themselves and then

00:18:42,400 --> 00:18:51,100
we see Western kind of drop off a cliff

00:18:45,460 --> 00:18:54,340
really as its its contributor base

00:18:51,100 --> 00:18:58,290
really declines the number of changes

00:18:54,340 --> 00:19:01,350
being made to it massively declines and

00:18:58,290 --> 00:19:06,090
people kind of push out towards a

00:19:01,350 --> 00:19:06,090
towards working on different projects

00:19:06,750 --> 00:19:13,390
and that's something that Western itself

00:19:09,820 --> 00:19:17,290
has only recently recovered from and you

00:19:13,390 --> 00:19:20,620
can also see in in Wayland called

00:19:17,290 --> 00:19:22,900
repository that there's much much less

00:19:20,620 --> 00:19:26,020
development happening on it as it's

00:19:22,900 --> 00:19:31,090
entered this maturity and stabilization

00:19:26,020 --> 00:19:34,120
phase this is almost mirrored in many

00:19:31,090 --> 00:19:36,790
ways by the protocols where we had an

00:19:34,120 --> 00:19:40,740
initial burst of excitement and

00:19:36,790 --> 00:19:43,480
centralization where people started to

00:19:40,740 --> 00:19:46,390
contribute their their protocols and

00:19:43,480 --> 00:19:50,020
work together to come up with common

00:19:46,390 --> 00:19:53,970
sets of protocols and then again that

00:19:50,020 --> 00:19:53,970
also Peters out somewhat

00:19:57,570 --> 00:20:06,399
this guy's looking at the the changes in

00:20:03,340 --> 00:20:09,340
terms of lines of code as well and again

00:20:06,399 --> 00:20:13,029
you can see that apart from a couple of

00:20:09,340 --> 00:20:16,510
spikes the Wayland code repository

00:20:13,029 --> 00:20:21,820
itself in green is really just seen very

00:20:16,510 --> 00:20:25,380
very small numbers of changes and even

00:20:21,820 --> 00:20:31,149
though Western continues some quite

00:20:25,380 --> 00:20:34,750
peaky development the number of or the

00:20:31,149 --> 00:20:37,600
volume of change inside Wayland is very

00:20:34,750 --> 00:20:44,230
small indicating that it's really about

00:20:37,600 --> 00:20:45,700
just small bug fixes and so these are

00:20:44,230 --> 00:20:50,049
these are the same with some

00:20:45,700 --> 00:20:53,460
normalization these are normalized to it

00:20:50,049 --> 00:20:59,220
a percentage of the peak commit count so

00:20:53,460 --> 00:21:04,260
you can see Wayland rapidly declining

00:20:59,220 --> 00:21:07,450
and especially in this this graph of

00:21:04,260 --> 00:21:10,120
again this is a normalized graph but

00:21:07,450 --> 00:21:13,779
this time normalized to lines of code

00:21:10,120 --> 00:21:16,450
which have changed and you can see that

00:21:13,779 --> 00:21:19,419
the Waveland development in particular

00:21:16,450 --> 00:21:23,130
has really entered this this phase of

00:21:19,419 --> 00:21:25,480
just stabilization and even if we have a

00:21:23,130 --> 00:21:27,789
reasonable number of commits they're all

00:21:25,480 --> 00:21:32,470
changing a very small number of lines of

00:21:27,789 --> 00:21:42,190
code as we hit this primary bug fixing

00:21:32,470 --> 00:21:46,750
and maintenance phase so there's a recap

00:21:42,190 --> 00:21:49,960
of where we've got to I mean yeah we we

00:21:46,750 --> 00:21:53,700
sort of essentially one as as a window

00:21:49,960 --> 00:21:59,289
system you know Wayland is now taken as

00:21:53,700 --> 00:22:02,289
the standard for desktops it's still not

00:21:59,289 --> 00:22:05,889
fully to place displaced x11 but it's

00:22:02,289 --> 00:22:07,480
getting a but in particular for embedded

00:22:05,889 --> 00:22:09,600
projects it's

00:22:07,480 --> 00:22:12,070
our embedded products it's the only

00:22:09,600 --> 00:22:14,860
realistic choice if you want to do

00:22:12,070 --> 00:22:18,429
something like a digital signage product

00:22:14,860 --> 00:22:21,029
or a kiosk especially in the automotive

00:22:18,429 --> 00:22:23,980
an in-flight entertainment world's

00:22:21,029 --> 00:22:26,889
Nathan things like set-top boxes and

00:22:23,980 --> 00:22:30,730
digital TV where we've had not just the

00:22:26,889 --> 00:22:33,340
free box that also products like LG's

00:22:30,730 --> 00:22:37,720
webOS TVs shipping using Weiland for

00:22:33,340 --> 00:22:41,620
some time and it has it is now a very

00:22:37,720 --> 00:22:46,080
mature offering but as a community for

00:22:41,620 --> 00:22:48,429
us I think we found that transition to

00:22:46,080 --> 00:22:51,570
from the development phase to the

00:22:48,429 --> 00:22:55,480
maturity phase has been quite difficult

00:22:51,570 --> 00:22:58,450
so over the last year or so we've been

00:22:55,480 --> 00:23:03,880
trying to rebuild L our community along

00:22:58,450 --> 00:23:06,850
those lines and yeah this is largely

00:23:03,880 --> 00:23:10,600
those stages of development I discussed

00:23:06,850 --> 00:23:12,820
we're in the central components

00:23:10,600 --> 00:23:15,580
originally so Waveland and Western we

00:23:12,820 --> 00:23:19,450
had this really fast moving heavy

00:23:15,580 --> 00:23:22,059
development where there was constant and

00:23:19,450 --> 00:23:24,340
rapid change the changes being made were

00:23:22,059 --> 00:23:29,470
very large there were a lot of features

00:23:24,340 --> 00:23:33,190
to add there's a very fruitful time then

00:23:29,470 --> 00:23:36,460
we saw this real decline as people

00:23:33,190 --> 00:23:38,500
started to not need to work on the call

00:23:36,460 --> 00:23:41,289
and not need to work on the reference

00:23:38,500 --> 00:23:42,880
implementation that they could go away

00:23:41,289 --> 00:23:45,159
and they could implement it in their own

00:23:42,880 --> 00:23:51,730
projects they could implement it in

00:23:45,159 --> 00:23:54,490
gnome KDE QT gstreamer you name it and

00:23:51,730 --> 00:23:56,620
so it was still the same people but the

00:23:54,490 --> 00:23:59,019
development effort was massively

00:23:56,620 --> 00:24:04,029
dispersed across a huge number of

00:23:59,019 --> 00:24:07,809
components and after that we saw this

00:24:04,029 --> 00:24:10,929
regrouping where people came to to share

00:24:07,809 --> 00:24:13,510
what they've done so we had common

00:24:10,929 --> 00:24:17,799
protocol development we had bug fixes

00:24:13,510 --> 00:24:20,110
into the core we had Western picking up

00:24:17,799 --> 00:24:21,250
some of the features which had been

00:24:20,110 --> 00:24:23,410
developed in other and

00:24:21,250 --> 00:24:27,910
fermentation zazz kind of a reference

00:24:23,410 --> 00:24:30,430
for best practice and now that vase is

00:24:27,910 --> 00:24:33,600
largely finished and the developments

00:24:30,430 --> 00:24:37,570
gone away again back to the users as

00:24:33,600 --> 00:24:39,790
people go through and sort of all level

00:24:37,570 --> 00:24:41,950
up with each other where they're adding

00:24:39,790 --> 00:24:43,360
more features that the other ones have

00:24:41,950 --> 00:24:45,760
and they're working on their own

00:24:43,360 --> 00:24:48,850
stability and their own performance and

00:24:45,760 --> 00:24:53,230
it's kind of this almost second maturity

00:24:48,850 --> 00:24:55,750
phase in we're seeing that the core

00:24:53,230 --> 00:25:01,200
Weiland changes are very much just bug

00:24:55,750 --> 00:25:04,870
fixes but we're expecting as well to see

00:25:01,200 --> 00:25:09,130
relatively soon another small local peak

00:25:04,870 --> 00:25:11,470
of this free centralization where people

00:25:09,130 --> 00:25:15,690
are dealing with things like variable

00:25:11,470 --> 00:25:19,450
refresh rate displays complex

00:25:15,690 --> 00:25:22,720
presentation timing required by both

00:25:19,450 --> 00:25:27,280
media and some of the the game toolkits

00:25:22,720 --> 00:25:30,490
as well better and more complex text

00:25:27,280 --> 00:25:32,790
input is going to be another fruitful

00:25:30,490 --> 00:25:42,280
period of this kind of read

00:25:32,790 --> 00:25:45,880
centralization and coalescing so looking

00:25:42,280 --> 00:25:50,020
back at that these are just my own

00:25:45,880 --> 00:25:53,590
personal opinion takeaways on some of

00:25:50,020 --> 00:26:01,230
the things that Wayland as as a project

00:25:53,590 --> 00:26:03,790
as a concept even really did write and

00:26:01,230 --> 00:26:09,790
the things we did along the way which

00:26:03,790 --> 00:26:12,790
you can learn from and perhaps emulate

00:26:09,790 --> 00:26:20,050
even and hopefully these are these are

00:26:12,790 --> 00:26:22,870
good examples for for your project one

00:26:20,050 --> 00:26:26,770
of the things is that Whalen's always

00:26:22,870 --> 00:26:32,670
been a very tightly scoped and tightly

00:26:26,770 --> 00:26:35,080
defined project and it was always a very

00:26:32,670 --> 00:26:37,419
provided you were very minimal

00:26:35,080 --> 00:26:39,730
experience this was the reason for a lot

00:26:37,419 --> 00:26:42,580
of early push back to Wayland you know

00:26:39,730 --> 00:26:47,340
people would say Waylon can't do remote

00:26:42,580 --> 00:26:51,820
access the Kanto coordinates can't do

00:26:47,340 --> 00:26:54,720
external window management and all these

00:26:51,820 --> 00:26:58,840
things that that axel emmerman provided

00:26:54,720 --> 00:27:02,019
and now it was kind of true because the

00:26:58,840 --> 00:27:06,460
way Weiland was developed was with this

00:27:02,019 --> 00:27:10,299
real focus on just the bare minimum that

00:27:06,460 --> 00:27:13,330
we needed to get it right so originally

00:27:10,299 --> 00:27:17,679
it was very much usable for the embedded

00:27:13,330 --> 00:27:21,850
ivi and ify and those kind of single-use

00:27:17,679 --> 00:27:25,049
systems and and it wasn't developed with

00:27:21,850 --> 00:27:27,580
doing absolutely everything in mind a

00:27:25,049 --> 00:27:30,389
nested bear as well in terms of how

00:27:27,580 --> 00:27:33,669
sustainable it is because if you look at

00:27:30,389 --> 00:27:38,649
for instance the input subsystems

00:27:33,669 --> 00:27:42,490
between X 11 and Wayland X's is almost

00:27:38,649 --> 00:27:45,010
unusable it's incredibly complex it's

00:27:42,490 --> 00:27:47,620
the most abstract thing you could ever

00:27:45,010 --> 00:27:51,010
imagine which supports every future

00:27:47,620 --> 00:27:54,909
hypothetical way in which a user could

00:27:51,010 --> 00:27:58,240
provide input to a system purrs x11 at

00:27:54,909 --> 00:28:02,470
Weiland sorry is much more limited it

00:27:58,240 --> 00:28:06,610
handles keyboards pointers and touch

00:28:02,470 --> 00:28:11,350
devices and that's it there's there's no

00:28:06,610 --> 00:28:13,990
kind of there's no way for the Whalen

00:28:11,350 --> 00:28:16,090
core protocol to to deal with more

00:28:13,990 --> 00:28:18,639
complex things like six degree of

00:28:16,090 --> 00:28:27,519
freedom devices or joysticks or game

00:28:18,639 --> 00:28:29,380
pads or any of this but in doing that we

00:28:27,519 --> 00:28:33,130
were just very careful about where the

00:28:29,380 --> 00:28:35,139
complexity lay so rather than saying you

00:28:33,130 --> 00:28:38,860
can never do these things with Weiland

00:28:35,139 --> 00:28:40,929
we just wanted to make it clear that the

00:28:38,860 --> 00:28:45,039
place for that was somewhere else not

00:28:40,929 --> 00:28:47,020
inside the Weiland core so it is

00:28:45,039 --> 00:28:48,460
possible thanks to the extension

00:28:47,020 --> 00:28:51,630
mechanism too

00:28:48,460 --> 00:28:54,100
build out you know there are multiple

00:28:51,630 --> 00:28:58,150
solutions and have been for years of

00:28:54,100 --> 00:29:01,390
supporting remote remote applications on

00:28:58,150 --> 00:29:03,910
Wayland and remote desktops there are

00:29:01,390 --> 00:29:08,020
extensions for complex input devices

00:29:03,910 --> 00:29:11,410
like game pads and complex text input in

00:29:08,020 --> 00:29:14,080
things like these external window

00:29:11,410 --> 00:29:17,710
management is something that automotive

00:29:14,080 --> 00:29:20,830
built out into extensions to fit their

00:29:17,710 --> 00:29:24,220
model and it was possible for people to

00:29:20,830 --> 00:29:28,570
take the core of Wayland and build their

00:29:24,220 --> 00:29:31,480
specific use case on top of it and the

00:29:28,570 --> 00:29:34,270
idea was always that once that was

00:29:31,480 --> 00:29:36,370
shaken out and once it was proven if it

00:29:34,270 --> 00:29:39,570
was a good idea then something we could

00:29:36,370 --> 00:29:42,400
pull back in and so this is these

00:29:39,570 --> 00:29:46,750
repeating cycles we have of the very

00:29:42,400 --> 00:29:49,350
centralization where Wayland serves as a

00:29:46,750 --> 00:29:52,240
base for people to build on top of and

00:29:49,350 --> 00:29:53,950
experiment and work with themselves and

00:29:52,240 --> 00:29:58,440
then if it turns out to be good then

00:29:53,950 --> 00:29:58,440
that's great we can bring it in later

00:30:02,280 --> 00:30:08,920
yeah in terms of the world around you as

00:30:05,890 --> 00:30:13,240
well this kind of follows on you know

00:30:08,920 --> 00:30:16,810
our our ideal world with Wayland was

00:30:13,240 --> 00:30:20,770
always open drivers with kernel-mode

00:30:16,810 --> 00:30:24,310
setting ideally Mesa for GPU

00:30:20,770 --> 00:30:27,490
acceleration and it was really optimized

00:30:24,310 --> 00:30:31,840
for this you know it was designed to

00:30:27,490 --> 00:30:34,330
shine in that kind of system but we

00:30:31,840 --> 00:30:38,410
always were careful to make it possible

00:30:34,330 --> 00:30:41,950
for people to run on top of the legacy

00:30:38,410 --> 00:30:44,530
FB dev display stack to run with

00:30:41,950 --> 00:30:48,100
proprietary drivers which implemented

00:30:44,530 --> 00:30:51,580
things in a very different way and the

00:30:48,100 --> 00:30:55,750
trade-off was that we would show you the

00:30:51,580 --> 00:30:58,030
best of class best practice we would

00:30:55,750 --> 00:31:01,600
allow you to also run a kind of

00:30:58,030 --> 00:31:03,910
compromised version and use that as

00:31:01,600 --> 00:31:06,480
pressure for people to go and do the

00:31:03,910 --> 00:31:09,419
right things and to reemployment

00:31:06,480 --> 00:31:12,660
their stacks and their support to

00:31:09,419 --> 00:31:17,200
actually be best in class rather than

00:31:12,660 --> 00:31:21,370
compromising the call by just designing

00:31:17,200 --> 00:31:24,220
for the lowest common denominator and a

00:31:21,370 --> 00:31:27,940
lot of that was almost evangelism as

00:31:24,220 --> 00:31:31,090
well where if you look at the the early

00:31:27,940 --> 00:31:35,710
call Weyland developers their developers

00:31:31,090 --> 00:31:39,270
of client toolkits of media framework of

00:31:35,710 --> 00:31:43,360
GPU drivers of kernel display drivers

00:31:39,270 --> 00:31:45,730
and after they'd worked on the initial

00:31:43,360 --> 00:31:50,559
Wayland call they they pushed out into

00:31:45,730 --> 00:31:52,539
these communities and went and sort of

00:31:50,559 --> 00:31:54,549
argued for best practice within those

00:31:52,539 --> 00:31:58,299
communities and tried to make the best

00:31:54,549 --> 00:32:02,620
thing happen on which a little more

00:31:58,299 --> 00:32:05,500
later but this also made it usually

00:32:02,620 --> 00:32:08,770
quite easy for people to try out Wayland

00:32:05,500 --> 00:32:11,110
and see what it was because the the

00:32:08,770 --> 00:32:12,970
enablement was very pervasive as we

00:32:11,110 --> 00:32:23,320
pushed through out into those

00:32:12,970 --> 00:32:26,770
communities yeah if you are doing an

00:32:23,320 --> 00:32:30,280
extensible protocol one thing we found

00:32:26,770 --> 00:32:34,210
is it's really important just like a

00:32:30,280 --> 00:32:38,260
good API strategy anywhere it's really

00:32:34,210 --> 00:32:41,409
important to be clear very early on how

00:32:38,260 --> 00:32:44,020
you do versioning something that lets

00:32:41,409 --> 00:32:47,650
you iteration extend and at some point

00:32:44,020 --> 00:32:52,179
deprecated just applying enough pressure

00:32:47,650 --> 00:32:54,070
on people to keep the move in but not

00:32:52,179 --> 00:32:56,860
the kind of Cooper Nettie's model where

00:32:54,070 --> 00:33:04,539
everything changes and you have to go

00:32:56,860 --> 00:33:07,600
from scratch every three months yeah

00:33:04,539 --> 00:33:11,770
handling leadership transitions as well

00:33:07,600 --> 00:33:14,140
as always very difficult you know

00:33:11,770 --> 00:33:15,309
Christian stepped back relatively early

00:33:14,140 --> 00:33:17,769
into

00:33:15,309 --> 00:33:20,470
to the project when it was still very

00:33:17,769 --> 00:33:23,889
much in there some development and

00:33:20,470 --> 00:33:26,320
almost pre-adoption phase and but the

00:33:23,889 --> 00:33:28,899
way he stepped back was very very

00:33:26,320 --> 00:33:34,749
gradual and very gentle and it did let

00:33:28,899 --> 00:33:38,889
other people step up and adopt larger

00:33:34,749 --> 00:33:41,950
roles and pick things up and it was

00:33:38,889 --> 00:33:45,249
something that as the core contributors

00:33:41,950 --> 00:33:47,440
we definitely noticed a today but if you

00:33:45,249 --> 00:33:49,600
weren't actively involved in the project

00:33:47,440 --> 00:33:53,289
you wouldn't necessarily have noticed he

00:33:49,600 --> 00:33:59,049
would have stepped away so just working

00:33:53,289 --> 00:34:01,450
on on a slow and gentle transition phase

00:33:59,049 --> 00:34:08,109
that lets the project out their view is

00:34:01,450 --> 00:34:10,060
really important and for the project as

00:34:08,109 --> 00:34:14,829
a whole the project should ideally

00:34:10,060 --> 00:34:18,089
outlive your project when we started

00:34:14,829 --> 00:34:22,450
with Wayland it was really difficult to

00:34:18,089 --> 00:34:26,500
implement new Windows system x11 still

00:34:22,450 --> 00:34:30,750
had a lot of the the drivers specific

00:34:26,500 --> 00:34:34,389
logic for for display for GP rendering

00:34:30,750 --> 00:34:39,369
for input devices and everything all

00:34:34,389 --> 00:34:42,159
tied up inside x11 and if you look at

00:34:39,369 --> 00:34:45,210
the history of Wayland and arguably why

00:34:42,159 --> 00:34:48,250
Wayland took so long to come to fruition

00:34:45,210 --> 00:34:51,339
it's because Wayland wasn't just Wayland

00:34:48,250 --> 00:34:53,379
was developing the generic linux

00:34:51,339 --> 00:34:57,400
infrastructure that we all use now and

00:34:53,379 --> 00:35:00,210
take for granted things like DMA buff to

00:34:57,400 --> 00:35:04,359
exchange pixel buffers between process

00:35:00,210 --> 00:35:07,450
processes a lot of work on generic

00:35:04,359 --> 00:35:09,690
kernel mode setting and buffer

00:35:07,450 --> 00:35:12,640
management for that so we could have

00:35:09,690 --> 00:35:16,750
device agnostic clients just right into

00:35:12,640 --> 00:35:20,200
a generic display API and they've been

00:35:16,750 --> 00:35:24,369
put in Lib xkp common which gives us

00:35:20,200 --> 00:35:28,720
this common base for them handling quite

00:35:24,369 --> 00:35:31,810
complex input devices all of

00:35:28,720 --> 00:35:35,140
which were previously tied up in x11 and

00:35:31,810 --> 00:35:39,160
now live liftoff which is this layer on

00:35:35,140 --> 00:35:41,740
top of x11 at sorry this layer on top of

00:35:39,160 --> 00:35:46,540
kernel mode setting which allows people

00:35:41,740 --> 00:35:48,880
to more easily use kms and actually get

00:35:46,540 --> 00:35:52,050
the full benefit but without having to

00:35:48,880 --> 00:35:55,660
type out the entire thing themselves and

00:35:52,050 --> 00:35:58,540
the net effect is that even if Weiland

00:35:55,660 --> 00:36:00,300
died next we can have run moved to a new

00:35:58,540 --> 00:36:02,590
window system

00:36:00,300 --> 00:36:05,290
Whalen's influence will have still

00:36:02,590 --> 00:36:07,090
massively outlived the life of Weiland

00:36:05,290 --> 00:36:09,880
because all of this common

00:36:07,090 --> 00:36:13,240
infrastructure that we've created allows

00:36:09,880 --> 00:36:18,340
anyone to quite easily create a new

00:36:13,240 --> 00:36:20,800
window system even in toolkits you feel

00:36:18,340 --> 00:36:23,530
the effects where a lot of the work to

00:36:20,800 --> 00:36:26,830
enable Weiland was really a lot of the

00:36:23,530 --> 00:36:29,320
work to rewrite toolkits like gtk in QT

00:36:26,830 --> 00:36:33,700
so they could better work across

00:36:29,320 --> 00:36:36,550
multiple window systems and this is

00:36:33,700 --> 00:36:38,890
great because it keeps us honest it

00:36:36,550 --> 00:36:42,550
doesn't put Weiland in this privileged

00:36:38,890 --> 00:36:44,650
position where it would be another once

00:36:42,550 --> 00:36:47,099
in a generation transition to move away

00:36:44,650 --> 00:36:51,670
into a news new window system it's

00:36:47,099 --> 00:36:54,400
actually really easy you know anyone is

00:36:51,670 --> 00:36:57,750
free to go out and experiment and build

00:36:54,400 --> 00:37:02,260
on top of all this infrastructure and

00:36:57,750 --> 00:37:04,770
create a competitor to Wayland it's not

00:37:02,260 --> 00:37:08,650
a problem at all

00:37:04,770 --> 00:37:11,470
but doing this gives gives you a real

00:37:08,650 --> 00:37:14,500
fruitful place for for other people to

00:37:11,470 --> 00:37:18,220
experiment and to push you and challenge

00:37:14,500 --> 00:37:20,530
you and that's one thing we've always

00:37:18,220 --> 00:37:23,770
felt is really important is the ability

00:37:20,530 --> 00:37:26,920
to burn down your own castle and not

00:37:23,770 --> 00:37:30,010
just create the same thing we saw with

00:37:26,920 --> 00:37:32,290
x11 where everything was so tied up in

00:37:30,010 --> 00:37:35,410
your project that it's impossible to

00:37:32,290 --> 00:37:38,220
replace and it continues to exist only

00:37:35,410 --> 00:37:38,220
because of inertia

00:37:40,589 --> 00:37:48,250
that being said there's some things we

00:37:44,290 --> 00:37:51,190
didn't do do so well and if you're

00:37:48,250 --> 00:37:55,950
looking to us for examples you should

00:37:51,190 --> 00:37:58,420
probably try and do better and

00:37:55,950 --> 00:38:05,290
documentation has always been an issue

00:37:58,420 --> 00:38:10,500
with Weiland we really struggled in we

00:38:05,290 --> 00:38:13,810
do have very clearly and concisely and

00:38:10,500 --> 00:38:15,849
accurately documented protocols which

00:38:13,810 --> 00:38:18,820
will tell you for every single protocol

00:38:15,849 --> 00:38:21,580
call what the acceptable conditions are

00:38:18,820 --> 00:38:23,710
and how to use it but there's nothing

00:38:21,580 --> 00:38:27,119
that ties it together so we have the

00:38:23,710 --> 00:38:30,099
reference material but we even have

00:38:27,119 --> 00:38:32,320
quite a few examples for most of them

00:38:30,099 --> 00:38:36,580
there are some fairly clearly written

00:38:32,320 --> 00:38:38,920
examples in particular Western has this

00:38:36,580 --> 00:38:42,940
suite of example clients which shows you

00:38:38,920 --> 00:38:44,849
how to use Weiland but we really lack

00:38:42,940 --> 00:38:47,349
the kind of narrative style

00:38:44,849 --> 00:38:50,500
documentation which ties everything

00:38:47,349 --> 00:38:53,710
together and takes you through as

00:38:50,500 --> 00:38:55,900
someone who doesn't know Weiland the

00:38:53,710 --> 00:38:57,700
whole ecosystem and how everything

00:38:55,900 --> 00:39:03,160
should hang together and some of the

00:38:57,700 --> 00:39:08,020
overarching concepts and a lot of this

00:39:03,160 --> 00:39:12,369
has been because quite early on there

00:39:08,020 --> 00:39:15,369
was a pretty concerted effort to give us

00:39:12,369 --> 00:39:19,599
this documentation system which no one

00:39:15,369 --> 00:39:24,760
understands it's completely Byzantine

00:39:19,599 --> 00:39:27,099
and moving away from it has been really

00:39:24,760 --> 00:39:29,200
frightening you know almost as

00:39:27,099 --> 00:39:33,670
frightening and as trying to contribute

00:39:29,200 --> 00:39:36,609
anything into it so I think in

00:39:33,670 --> 00:39:39,730
particular for documentation systems

00:39:36,609 --> 00:39:44,740
just like build systems it's important

00:39:39,730 --> 00:39:47,200
to pick something which is easy to

00:39:44,740 --> 00:39:50,010
understand which is very trackable and

00:39:47,200 --> 00:39:53,530
quite common so you can get those

00:39:50,010 --> 00:39:56,790
contributors the

00:39:53,530 --> 00:39:59,320
we've been able to bridge this gap his

00:39:56,790 --> 00:40:03,510
presentations do turn out to be a really

00:39:59,320 --> 00:40:05,800
good way to to define your narrative but

00:40:03,510 --> 00:40:08,200
equally in the absence of anything

00:40:05,800 --> 00:40:11,410
written you'll be in this tension

00:40:08,200 --> 00:40:13,900
between the presentations defining a

00:40:11,410 --> 00:40:17,140
narrative but also comment sections

00:40:13,900 --> 00:40:20,260
defining the narrative you know if

00:40:17,140 --> 00:40:22,110
there's an absence of proper information

00:40:20,260 --> 00:40:26,350
and people are going to speculate and

00:40:22,110 --> 00:40:28,780
borderline just make things up so it's

00:40:26,350 --> 00:40:31,600
really important to look at those three

00:40:28,780 --> 00:40:35,580
styles of in classes of documentation

00:40:31,600 --> 00:40:35,580
and make sure that you cover them well

00:40:37,080 --> 00:40:44,740
toolkits beep new players is an example

00:40:40,870 --> 00:40:48,790
or a lesson that we we took from

00:40:44,740 --> 00:40:51,220
kernel-mode setting Daniel Vetter has

00:40:48,790 --> 00:40:54,580
some really good more technically

00:40:51,220 --> 00:40:57,490
focused talks on exactly what he means

00:40:54,580 --> 00:41:00,550
by the distinction between toolkits and

00:40:57,490 --> 00:41:04,740
mid layers I'd really recommend checking

00:41:00,550 --> 00:41:09,550
that out if the terms are not familiar

00:41:04,740 --> 00:41:15,190
but essentially the the difference is if

00:41:09,550 --> 00:41:18,550
you look at the two main non desktop

00:41:15,190 --> 00:41:22,630
compositor toolkits that exist today

00:41:18,550 --> 00:41:25,330
there's Lib Western and WL routes wo

00:41:22,630 --> 00:41:29,860
routes has this very piecemeal approach

00:41:25,330 --> 00:41:32,290
where they give you access to a bunch of

00:41:29,860 --> 00:41:34,810
functionality and a lot of helpers and

00:41:32,290 --> 00:41:40,750
it's up to you to piece those together

00:41:34,810 --> 00:41:44,410
and to pull it all in and sort of stitch

00:41:40,750 --> 00:41:47,910
things together themselves yourself Lib

00:41:44,410 --> 00:41:51,520
Western takes the opposite approach it

00:41:47,910 --> 00:41:55,030
originally only provided you a plug-in

00:41:51,520 --> 00:41:57,310
system where you could plug in and take

00:41:55,030 --> 00:42:02,020
some defined callbacks and listen to

00:41:57,310 --> 00:42:04,570
some signals but it was only ever you

00:42:02,020 --> 00:42:06,520
would get control when the call wanted

00:42:04,570 --> 00:42:08,440
to give you control

00:42:06,520 --> 00:42:11,800
and you could only control the things

00:42:08,440 --> 00:42:14,920
that the call let you was very much the

00:42:11,800 --> 00:42:16,480
core was in in control and sometimes

00:42:14,920 --> 00:42:19,890
dipping up to you

00:42:16,480 --> 00:42:23,320
whereas WL roots has this inverted

00:42:19,890 --> 00:42:25,870
toolkit approach where you're always in

00:42:23,320 --> 00:42:30,610
control and pushing down into the call

00:42:25,870 --> 00:42:33,420
when you think is a good idea and the

00:42:30,610 --> 00:42:38,260
toolkit approach is almost always better

00:42:33,420 --> 00:42:41,020
WL roots has a huge user base of people

00:42:38,260 --> 00:42:43,210
who originally tried lib Western and

00:42:41,020 --> 00:42:46,120
then just gave up because the mid layer

00:42:43,210 --> 00:42:49,990
approach just didn't work for them

00:42:46,120 --> 00:42:54,010
which is kind of sad to say but we're

00:42:49,990 --> 00:42:58,840
gradually rewriting Lib Western to be

00:42:54,010 --> 00:43:00,670
more of a toolkit centric API but once

00:42:58,840 --> 00:43:03,700
you've established yourself as a mid

00:43:00,670 --> 00:43:05,770
layer it's incredibly difficult to row

00:43:03,700 --> 00:43:08,740
back from there it's it's years and

00:43:05,770 --> 00:43:13,020
years of work and kernel mode settings

00:43:08,740 --> 00:43:13,020
been from through the same experience

00:43:13,080 --> 00:43:19,030
but if we look at the protocol it seems

00:43:17,560 --> 00:43:22,750
obvious that we should have been

00:43:19,030 --> 00:43:26,380
following this DIY toolkit type approach

00:43:22,750 --> 00:43:29,500
the entire time you know the the

00:43:26,380 --> 00:43:32,050
protocol is a bunch of tools that are

00:43:29,500 --> 00:43:34,420
available to you that you can take and

00:43:32,050 --> 00:43:39,360
stitch together to achieve what you want

00:43:34,420 --> 00:43:43,180
to do it's not this big overarching

00:43:39,360 --> 00:43:45,250
prescriptive framework so really in

00:43:43,180 --> 00:43:47,500
hindsight we should have looked at at

00:43:45,250 --> 00:43:50,140
the protocol and what made the the

00:43:47,500 --> 00:43:57,820
protocol successful which was this this

00:43:50,140 --> 00:44:00,120
toolkit approach and followed that it

00:43:57,820 --> 00:44:03,790
should hopefully be quite obvious that

00:44:00,120 --> 00:44:08,260
you've got to have an appropriate

00:44:03,790 --> 00:44:11,590
barrier to entry this is one of the the

00:44:08,260 --> 00:44:13,300
reasons we believe why we saw West and

00:44:11,590 --> 00:44:16,470
have such a large decline in

00:44:13,300 --> 00:44:20,040
contributors alongside Weiland

00:44:16,470 --> 00:44:22,050
Western shouldn't according to

00:44:20,040 --> 00:44:24,750
the cycles and the periods we went

00:44:22,050 --> 00:44:27,510
through have had to decline it should

00:44:24,750 --> 00:44:29,820
have had an increase or at least a

00:44:27,510 --> 00:44:35,550
stable number of contributions and

00:44:29,820 --> 00:44:40,080
contributors but we had this quite high

00:44:35,550 --> 00:44:44,370
barrier to entry it worked really well

00:44:40,080 --> 00:44:48,570
originally when Weiland was essentially

00:44:44,370 --> 00:44:53,070
been built by Clara Intel Red Hat

00:44:48,570 --> 00:44:56,670
we had a small number of people who all

00:44:53,070 --> 00:45:01,080
work together day to day and it was very

00:44:56,670 --> 00:45:03,480
easy for us to iterate rapidly but as we

00:45:01,080 --> 00:45:05,190
hit this adoption cycle where it was

00:45:03,480 --> 00:45:07,890
being picked up and worked on by a

00:45:05,190 --> 00:45:10,410
larger number of people we failed to

00:45:07,890 --> 00:45:13,830
realize at that point that we needed to

00:45:10,410 --> 00:45:18,270
reduce the barrier to entry and optimize

00:45:13,830 --> 00:45:20,850
it more for kind of one shot or drive-by

00:45:18,270 --> 00:45:25,170
contributors rather than a very small

00:45:20,850 --> 00:45:28,680
day-to-day focused dev team and this

00:45:25,170 --> 00:45:31,800
took us far too long to realise and an

00:45:28,680 --> 00:45:34,170
action so that made our transition to

00:45:31,800 --> 00:45:38,760
maturity really difficult because we

00:45:34,170 --> 00:45:40,620
were getting good bug fixes and we just

00:45:38,760 --> 00:45:45,060
dropped them on the floor because our

00:45:40,620 --> 00:45:47,580
contribution process was too painful and

00:45:45,060 --> 00:45:51,060
if you look at the the contribution

00:45:47,580 --> 00:45:54,030
graphs since we've transitioned both

00:45:51,060 --> 00:45:56,730
Weiland and Western to get web you can

00:45:54,030 --> 00:45:58,800
see there's this enormous uptick where

00:45:56,730 --> 00:46:01,610
where people have come back now that

00:45:58,800 --> 00:46:04,740
they don't have to use mailing lists and

00:46:01,610 --> 00:46:07,920
they can use a reasonable modern

00:46:04,740 --> 00:46:12,500
contribution approach with tracked

00:46:07,920 --> 00:46:16,080
change requests and CI and all of this

00:46:12,500 --> 00:46:18,120
so yeah it's really about making sure

00:46:16,080 --> 00:46:20,640
that the people are empowered and that

00:46:18,120 --> 00:46:24,390
they feel empowered to to contribute and

00:46:20,640 --> 00:46:27,240
that you're not scaring them off and you

00:46:24,390 --> 00:46:30,720
really think about what's appropriate

00:46:27,240 --> 00:46:33,800
for what stage of your project and who

00:46:30,720 --> 00:46:33,800
you're optimizing for

00:46:35,319 --> 00:46:46,490
yeah the the testing and validation

00:46:40,780 --> 00:46:51,170
largely suffered from the same era as

00:46:46,490 --> 00:46:53,480
our documentation we had some people who

00:46:51,170 --> 00:46:57,740
were very excited about writing test

00:46:53,480 --> 00:47:00,619
Suites so instead of using a common test

00:46:57,740 --> 00:47:04,220
framework we had this hand rolled

00:47:00,619 --> 00:47:06,410
completely unknowable custom-built

00:47:04,220 --> 00:47:09,380
framework which was completely

00:47:06,410 --> 00:47:12,349
unmaintained as soon as the person who

00:47:09,380 --> 00:47:17,119
had originally wrote it had moved on to

00:47:12,349 --> 00:47:20,480
doing something else and it never never

00:47:17,119 --> 00:47:22,790
fully got adopted so we again had this

00:47:20,480 --> 00:47:26,510
issue where it should have been as easy

00:47:22,790 --> 00:47:28,609
as possible to contribute tests but we

00:47:26,510 --> 00:47:31,609
didn't have a good base for tests we

00:47:28,609 --> 00:47:35,210
didn't have good examples and references

00:47:31,609 --> 00:47:38,480
to work from and it wasn't easy to build

00:47:35,210 --> 00:47:41,349
complex tests so this is something we've

00:47:38,480 --> 00:47:44,660
been dealing with the damage of and

00:47:41,349 --> 00:47:47,089
Packer spent several months going back

00:47:44,660 --> 00:47:49,000
through and redoing all of the test

00:47:47,089 --> 00:47:51,920
frameworks to make sure we've got this

00:47:49,000 --> 00:47:55,339
really solid base where it's very very

00:47:51,920 --> 00:47:58,280
easy for people to write their own tests

00:47:55,339 --> 00:48:02,119
and essentially that you have no excuse

00:47:58,280 --> 00:48:04,880
to to avoid testing previously it was

00:48:02,119 --> 00:48:07,670
really easy to not write tests because

00:48:04,880 --> 00:48:13,930
you could just say well it's too hard to

00:48:07,670 --> 00:48:17,569
do it so I'm not going to yeah I think

00:48:13,930 --> 00:48:22,450
the most salient lesson from all of that

00:48:17,569 --> 00:48:25,579
is you can I originally broke down

00:48:22,450 --> 00:48:30,470
Weiland into those kind of prehistory

00:48:25,579 --> 00:48:34,880
Stone Age Bronze Age stages as a bit of

00:48:30,470 --> 00:48:39,520
a joke and then because it seemed to

00:48:34,880 --> 00:48:42,520
surprisingly nicely fit into chunks of

00:48:39,520 --> 00:48:42,520
six

00:48:42,980 --> 00:48:48,560
six time points and then I realized as I

00:48:46,820 --> 00:48:51,500
was writing it that there was probably

00:48:48,560 --> 00:48:55,510
the most important thing that Wayland as

00:48:51,500 --> 00:48:59,210
a project has moved through a lot of

00:48:55,510 --> 00:49:01,580
different stages and at each stage we've

00:48:59,210 --> 00:49:04,100
had completely different audiences to

00:49:01,580 --> 00:49:08,840
address in terms of both users and

00:49:04,100 --> 00:49:11,480
developers and contributors as well and

00:49:08,840 --> 00:49:15,590
that's the thing I think is most

00:49:11,480 --> 00:49:19,310
important to be taken away is to

00:49:15,590 --> 00:49:22,640
periodically just sit back and reset and

00:49:19,310 --> 00:49:25,880
try with as few background assumptions

00:49:22,640 --> 00:49:28,460
as possible just look at the world

00:49:25,880 --> 00:49:32,150
around you and the context you exist in

00:49:28,460 --> 00:49:34,540
and try to make sure that everything

00:49:32,150 --> 00:49:37,420
you're doing is appropriate and

00:49:34,540 --> 00:49:41,630
optimized for that environment you're in

00:49:37,420 --> 00:49:44,240
you know we honestly did a fair bit of

00:49:41,630 --> 00:49:47,600
harm to Weyland by not having

00:49:44,240 --> 00:49:50,869
collectively as a community done that

00:49:47,600 --> 00:49:54,310
and it's it's a good community health

00:49:50,869 --> 00:49:57,770
exercise which you should be doing and

00:49:54,310 --> 00:50:01,070
just making sure that you're still doing

00:49:57,770 --> 00:50:04,640
the right thing rather than just limping

00:50:01,070 --> 00:50:06,950
on with something just by inertia even

00:50:04,640 --> 00:50:13,450
if it's completely inappropriate for

00:50:06,950 --> 00:50:19,190
what's now your new target audience and

00:50:13,450 --> 00:50:21,590
with that I out of material not sure if

00:50:19,190 --> 00:50:23,150
there are any questions or so the

00:50:21,590 --> 00:50:27,590
question is is there a simple way to

00:50:23,150 --> 00:50:35,210
know if a particular program is using

00:50:27,590 --> 00:50:38,240
valent and the easiest one probably is

00:50:35,210 --> 00:50:42,320
in the environments you can set the

00:50:38,240 --> 00:50:46,160
Weiland underscore debug variable set

00:50:42,320 --> 00:50:48,800
that to clients or 1 and if it is using

00:50:46,160 --> 00:50:51,740
Weiland then it will spit out a huge

00:50:48,800 --> 00:50:56,050
amount of debug to stand it out if it's

00:50:51,740 --> 00:50:59,400
not avoid okay thanks

00:50:56,050 --> 00:50:59,400

YouTube URL: https://www.youtube.com/watch?v=xQ0ItmvGOQ0


