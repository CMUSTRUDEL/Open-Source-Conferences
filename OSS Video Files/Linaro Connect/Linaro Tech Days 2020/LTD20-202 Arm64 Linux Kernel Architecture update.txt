Title: LTD20-202 Arm64 Linux Kernel Architecture update
Publication date: 2020-04-01
Playlist: Linaro Tech Days 2020
Description: 
	Description: 
The arm64 Linux Kernel is constantly tracking the evolution of the Arm architecture, adding new features year over year.

This session will provide an overview of the latest developments done by Arm and the ecosystem to support all architectural features from Armv8.0 up to the most recent Armv8.6 architecture.
It will also provide an overall status update and a future-looking view into the new investigation areas coming in the arm64 kernel-land.

Session Speakers
Matteo Carlini
Director, Software Technology Management (Arm)

Matteo is Director of Software Technology Management at Arm and serves as Chairman of the Board for Trusted Firmware.
He drives Arm's community effort into various open source projects, focusing on security architectures, firmware & kernel interfaces, platform security requirements and ecosystem enablement.
In a previous life, he spent many years managing and working on embedded software developments for networking and automotive devices across various companies, where firmware meant BSPs and lot of proprietary headache. 

You can view this sessions presentation here:


https://connect.linaro.org/resources/ltd20/ltd20-202/
Captions: 
	00:00:00,900 --> 00:00:05,370
thanks everyone for joining that's again

00:00:03,389 --> 00:00:07,440
mater Carlini director of software

00:00:05,370 --> 00:00:09,900
technology management at our in the open

00:00:07,440 --> 00:00:13,369
source software group so these talk is

00:00:09,900 --> 00:00:16,650
specifically on the arm 64 linux kernel

00:00:13,369 --> 00:00:19,170
architectural updates so the artistic

00:00:16,650 --> 00:00:21,359
power kernel team at arm does a lot of

00:00:19,170 --> 00:00:24,119
things so in this talk will not cover

00:00:21,359 --> 00:00:26,160
everything this is specifically on the

00:00:24,119 --> 00:00:28,169
architectural enablement that we do

00:00:26,160 --> 00:00:33,180
which is the majority of the work that

00:00:28,169 --> 00:00:35,640
we do as I'm 64 kernel maintenance so

00:00:33,180 --> 00:00:37,830
just let me start with a few pointers

00:00:35,640 --> 00:00:45,360
there is a public table available on

00:00:37,830 --> 00:00:48,270
developer.android.com the arm 8.1

00:00:45,360 --> 00:00:50,850
architecture up to a dot 6 and the

00:00:48,270 --> 00:00:53,640
specific kernel revision in which that

00:00:50,850 --> 00:00:56,130
feature got enabled for the first time

00:00:53,640 --> 00:00:59,310
and there are also some notes for the

00:00:56,130 --> 00:01:01,650
ongoing features of features that are at

00:00:59,310 --> 00:01:05,190
the moment cute or under development so

00:01:01,650 --> 00:01:09,840
go check it out because it's it has a

00:01:05,190 --> 00:01:11,850
lot of good information in it so the

00:01:09,840 --> 00:01:15,360
introductions I would like to make is a

00:01:11,850 --> 00:01:18,090
high-level view on the status of the

00:01:15,360 --> 00:01:21,480
architectural enablement that we do in

00:01:18,090 --> 00:01:25,680
the kernel against the ARM architecture

00:01:21,480 --> 00:01:27,750
from a 2-0 up to 8.6 and new features so

00:01:25,680 --> 00:01:30,479
these light is not intended to dig into

00:01:27,750 --> 00:01:32,850
each one of the specific architectural

00:01:30,479 --> 00:01:36,960
features you can go have a look at the

00:01:32,850 --> 00:01:40,260
table offline this is just to give you

00:01:36,960 --> 00:01:44,010
an overview on roughly where we are so

00:01:40,260 --> 00:01:46,170
you can see that a doto was the

00:01:44,010 --> 00:01:48,990
beginning of the arm 64 kernel so

00:01:46,170 --> 00:01:53,820
everything clear in there then going

00:01:48,990 --> 00:01:56,909
clockwise top left 8.1 again everything

00:01:53,820 --> 00:01:59,310
done nothing left to be done with a

00:01:56,909 --> 00:02:01,590
tattoo there are a bit bits and pieces

00:01:59,310 --> 00:02:04,320
left overs which I will cover in a

00:02:01,590 --> 00:02:06,270
minute but broadly the architecture is

00:02:04,320 --> 00:02:11,009
is completed and the support in the

00:02:06,270 --> 00:02:13,439
kernel is completed the big mixing item

00:02:11,009 --> 00:02:15,150
from the ADA tree and the other four

00:02:13,439 --> 00:02:17,760
architecture is probably

00:02:15,150 --> 00:02:20,730
the nested virtualization extension the

00:02:17,760 --> 00:02:23,700
NB which we will see in in light orange

00:02:20,730 --> 00:02:26,459
and it is under development I will

00:02:23,700 --> 00:02:29,220
explain the status later on but other

00:02:26,459 --> 00:02:31,680
than that a doe tree is practically

00:02:29,220 --> 00:02:33,720
complete I will share some updates on

00:02:31,680 --> 00:02:37,799
the pointer authentication feature and

00:02:33,720 --> 00:02:39,689
from the 8.4 we have been pan which

00:02:37,799 --> 00:02:42,209
actually is not listed here because it's

00:02:39,689 --> 00:02:44,599
a separate spec but I'll talk about amp

00:02:42,209 --> 00:02:49,200
and a bit and I'll talk about the

00:02:44,599 --> 00:02:53,730
remaining status of method Rises bottom

00:02:49,200 --> 00:02:58,680
left a dot 5 you can see we are halfway

00:02:53,730 --> 00:03:01,650
through the enablement the great focus

00:02:58,680 --> 00:03:04,680
is around completing the development of

00:03:01,650 --> 00:03:06,989
memory tagging and BGI branch target

00:03:04,680 --> 00:03:09,389
identification which are the main

00:03:06,989 --> 00:03:12,420
security features that got enabled with

00:03:09,389 --> 00:03:14,099
the aid of five extension few other

00:03:12,420 --> 00:03:17,519
features have been enabled already

00:03:14,099 --> 00:03:19,919
speculation barriers the random number

00:03:17,519 --> 00:03:24,440
generator and few other stuff which I

00:03:19,919 --> 00:03:27,660
will mention later on from the 8.6

00:03:24,440 --> 00:03:30,269
architecture we are at a at the

00:03:27,660 --> 00:03:33,180
beginning of the enablement 8.6 was

00:03:30,269 --> 00:03:35,669
announced last 10 bar six months ago

00:03:33,180 --> 00:03:39,359
so we enabled the bits and pieces

00:03:35,669 --> 00:03:42,000
through hard work at expose the user

00:03:39,359 --> 00:03:46,109
space and then we are working on the

00:03:42,000 --> 00:03:48,810
rest on the enablement in a priority

00:03:46,109 --> 00:03:51,599
order which I will talk about later new

00:03:48,810 --> 00:03:53,549
features so these are the so-called new

00:03:51,599 --> 00:03:57,169
york eat actual features which are

00:03:53,549 --> 00:03:59,819
currently not part of the traditional

00:03:57,169 --> 00:04:03,599
naming scheme of the ARM architecture

00:03:59,819 --> 00:04:05,010
so as we - transactional memory and then

00:04:03,599 --> 00:04:07,019
I'll talk just a little bit about

00:04:05,010 --> 00:04:10,409
morello there has been a talk yesterday

00:04:07,019 --> 00:04:12,090
from League of mine about Morello and I

00:04:10,409 --> 00:04:16,530
just grabbed some highlights on that

00:04:12,090 --> 00:04:20,130
talk to recap the current situation so

00:04:16,530 --> 00:04:22,820
moving on into the ADA - as I said

00:04:20,130 --> 00:04:26,010
almost completed there are few leftovers

00:04:22,820 --> 00:04:28,760
one is the statistical profiling

00:04:26,010 --> 00:04:31,400
extensions needs to be exposed

00:04:28,760 --> 00:04:33,890
to KVM guests there is a prototype code

00:04:31,400 --> 00:04:35,810
available on a developer's branch now

00:04:33,890 --> 00:04:38,810
the activity is going to be picked up by

00:04:35,810 --> 00:04:41,480
the KVM arm 64 community and should be

00:04:38,810 --> 00:04:46,610
reposted soon on list and that will

00:04:41,480 --> 00:04:48,800
complete the SP enablement other ban at

00:04:46,610 --> 00:04:51,650
the bottom the last bullet point other

00:04:48,800 --> 00:04:54,950
than some per tool improvements which

00:04:51,650 --> 00:04:58,460
again are being developed as we speak on

00:04:54,950 --> 00:05:01,100
the list and it is gonna add support for

00:04:58,460 --> 00:05:04,340
SPE band in curve so that from user

00:05:01,100 --> 00:05:07,580
space you can exercise and use the

00:05:04,340 --> 00:05:10,580
statistical counters and the second

00:05:07,580 --> 00:05:13,760
bullet point rust so we completed the

00:05:10,580 --> 00:05:18,680
support for the architectural a few more

00:05:13,760 --> 00:05:22,160
first rass approach since 416 actually a

00:05:18,680 --> 00:05:25,280
year ago roughly with few additions that

00:05:22,160 --> 00:05:30,380
got added into phi the toe like wiring

00:05:25,280 --> 00:05:33,530
of SDI into the api table what is left

00:05:30,380 --> 00:05:37,070
to be done is the so-called kernel first

00:05:33,530 --> 00:05:39,820
Raz approach which is ongoing by the

00:05:37,070 --> 00:05:42,200
community so arm is going to produce

00:05:39,820 --> 00:05:45,590
specification which defines the arm

00:05:42,200 --> 00:05:47,570
error so stable specification is in

00:05:45,590 --> 00:05:50,990
media at the moment available on

00:05:47,570 --> 00:05:55,670
developer and it's gonna be EAC pretty

00:05:50,990 --> 00:06:00,530
soon enable that completes the a door to

00:05:55,670 --> 00:06:03,170
enablement if we move forward so I spoke

00:06:00,530 --> 00:06:07,280
about pointer authentication it's an 803

00:06:03,170 --> 00:06:09,740
extinction with an additional bit of the

00:06:07,280 --> 00:06:12,140
architecture bits not not strictly

00:06:09,740 --> 00:06:15,170
speaking an additional feature of the

00:06:12,140 --> 00:06:17,930
architecture enabled six the 803

00:06:15,170 --> 00:06:20,030
extension is practically complete you

00:06:17,930 --> 00:06:23,240
will see the step by step enablement in

00:06:20,030 --> 00:06:26,840
the specific kernel versions listed here

00:06:23,240 --> 00:06:30,290
so in 5.0 we enable the user space

00:06:26,840 --> 00:06:33,470
support we are the Petri strikes ads for

00:06:30,290 --> 00:06:36,680
key management in 5.1 KVM support other

00:06:33,470 --> 00:06:38,920
than file2 and now pretty recently a few

00:06:36,680 --> 00:06:42,529
days ago the arm sista for maintainer

00:06:38,920 --> 00:06:45,109
huge the internal support for

00:06:42,529 --> 00:06:49,249
function return address protection now

00:06:45,109 --> 00:06:51,049
clearly disease upon any regression or

00:06:49,249 --> 00:06:53,479
any fix that we might encounter during

00:06:51,049 --> 00:06:56,539
the merge window which will open pretty

00:06:53,479 --> 00:07:00,139
soon as soon as Bible six is is tagged

00:06:56,539 --> 00:07:02,689
and released we're still working on a

00:07:00,139 --> 00:07:05,719
question to unity for crash lamp

00:07:02,689 --> 00:07:08,419
analysis which is ongoing and as I said

00:07:05,719 --> 00:07:10,909
the a dot six architecture also for

00:07:08,419 --> 00:07:13,009
seeds some improvement some enhancements

00:07:10,909 --> 00:07:15,589
on point authentication which are

00:07:13,009 --> 00:07:17,449
currently in discussion on list so it's

00:07:15,589 --> 00:07:20,439
mainly two topics some enhance that

00:07:17,449 --> 00:07:23,539
point or generation algorithm and then

00:07:20,439 --> 00:07:29,479
some polls that get generated when the

00:07:23,539 --> 00:07:34,969
authentication structions fails so next

00:07:29,479 --> 00:07:39,919
topic is around nested virtualization so

00:07:34,969 --> 00:07:42,859
nester butyl ization is a huge beast it

00:07:39,919 --> 00:07:45,889
comes together with both da da tree and

00:07:42,859 --> 00:07:48,409
da built for extensions so such as an

00:07:45,889 --> 00:07:51,439
unique touch set which enables the

00:07:48,409 --> 00:07:54,949
features all together it's huge

00:07:51,439 --> 00:07:58,639
there are around 100 patches little less

00:07:54,949 --> 00:08:00,979
than 100 patches on list to review the

00:07:58,639 --> 00:08:04,789
development is carried over by the kvam

00:08:00,979 --> 00:08:08,029
are 64 community the arm specific kernel

00:08:04,789 --> 00:08:10,909
team is reviewing as this testing all

00:08:08,029 --> 00:08:13,249
the features with the internal fpga that

00:08:10,909 --> 00:08:17,899
we have available which implements the

00:08:13,249 --> 00:08:20,359
stitches partners are very welcome to

00:08:17,899 --> 00:08:23,539
test the feature on their silicon to

00:08:20,359 --> 00:08:26,329
provide feedbacks to provide acts on the

00:08:23,539 --> 00:08:28,999
patch sets own list the current patch

00:08:26,329 --> 00:08:31,669
sets also include two features which

00:08:28,999 --> 00:08:33,399
comes from the 804 and 8.5 architecture

00:08:31,669 --> 00:08:36,199
you will see listed there the

00:08:33,399 --> 00:08:39,529
translation table level which reduce the

00:08:36,199 --> 00:08:43,519
cost of TLB invalidation and the GTG

00:08:39,529 --> 00:08:46,100
guests translation granel sites chances

00:08:43,519 --> 00:08:48,829
are that these two features will be d

00:08:46,100 --> 00:08:51,350
scoped from the huge patch set above so

00:08:48,829 --> 00:08:53,089
that they can progress quite quickly

00:08:51,350 --> 00:08:55,100
with respect to and that's the bear that

00:08:53,089 --> 00:08:56,240
will take some time it will take some

00:08:55,100 --> 00:08:58,610
iterations because

00:08:56,240 --> 00:09:04,149
before it settles down and before it's

00:08:58,610 --> 00:09:07,600
in a state it can be merged moving gun

00:09:04,149 --> 00:09:11,120
hempen so memory partitioning and

00:09:07,600 --> 00:09:14,209
monitoring so you might know but if you

00:09:11,120 --> 00:09:17,390
don't know we are working to extend an

00:09:14,209 --> 00:09:20,360
existing interface which is based on an

00:09:17,390 --> 00:09:24,130
Intel framework which is called resource

00:09:20,360 --> 00:09:28,250
control press control it's based on a

00:09:24,130 --> 00:09:32,899
intel r dt feature and this is for

00:09:28,250 --> 00:09:35,149
consistency because we want the arm

00:09:32,899 --> 00:09:37,430
feature to work seamlessly with our

00:09:35,149 --> 00:09:41,300
partners using the same user space

00:09:37,430 --> 00:09:43,580
interface but this also means that we

00:09:41,300 --> 00:09:45,620
have to put a lot of effort which we

00:09:43,580 --> 00:09:48,680
already did and we keep putting a lot of

00:09:45,620 --> 00:09:52,640
effort in reworking the interface which

00:09:48,680 --> 00:09:55,300
was not multi architecture ready so the

00:09:52,640 --> 00:09:58,370
first step that we are taking is

00:09:55,300 --> 00:10:01,160
reworking fixing extending that

00:09:58,370 --> 00:10:03,950
interface is to make it multi

00:10:01,160 --> 00:10:07,970
architecture and these are for resulted

00:10:03,950 --> 00:10:10,730
in another huge patch set more than 130

00:10:07,970 --> 00:10:13,760
patches just which are currently

00:10:10,730 --> 00:10:17,959
available developers branch again for

00:10:13,760 --> 00:10:22,730
for validation testing but bear in mind

00:10:17,959 --> 00:10:25,070
the rework just the rework of the rest

00:10:22,730 --> 00:10:28,000
control interface to make it multi

00:10:25,070 --> 00:10:31,700
architecture we progress throughout all

00:10:28,000 --> 00:10:34,310
2020 and in terms of the specific arm

00:10:31,700 --> 00:10:37,130
sistah for architectural bits

00:10:34,310 --> 00:10:40,910
architectural enablement of e of the

00:10:37,130 --> 00:10:44,660
feature we are really targeting now 2021

00:10:40,910 --> 00:10:48,670
because this needs to happen after we

00:10:44,660 --> 00:10:52,250
make the interface multi architecture

00:10:48,670 --> 00:10:55,220
the table below tries to summarize which

00:10:52,250 --> 00:10:57,490
are the impact controls and how do they

00:10:55,220 --> 00:11:00,050
matter with the rest control interface

00:10:57,490 --> 00:11:02,209
so you will see that there are two main

00:11:00,050 --> 00:11:05,510
categories of controls which can be

00:11:02,209 --> 00:11:07,850
driven by the rest control interface one

00:11:05,510 --> 00:11:09,920
is the cash portion bitmaps for level 2

00:11:07,850 --> 00:11:11,389
and level 3 caches and

00:11:09,920 --> 00:11:15,139
the other one is the memory bandwidth

00:11:11,389 --> 00:11:17,810
portion bitmap these can be and will be

00:11:15,139 --> 00:11:21,260
controlled by the existing versus

00:11:17,810 --> 00:11:24,730
control interface the other features

00:11:21,260 --> 00:11:29,660
which comes with the arm and pan

00:11:24,730 --> 00:11:31,100
architecture are not so easily driven by

00:11:29,660 --> 00:11:34,370
the rest control interface actually

00:11:31,100 --> 00:11:37,910
there is no way at the moment to to to

00:11:34,370 --> 00:11:40,190
drive those those controls so these has

00:11:37,910 --> 00:11:43,010
to be a separate conversation once we

00:11:40,190 --> 00:11:46,160
finalize the two running bolts for

00:11:43,010 --> 00:11:49,360
systems that have the need to drive

00:11:46,160 --> 00:11:49,360
those bound controls

00:11:51,310 --> 00:11:59,360
moving on again 8.5 branch target

00:11:56,120 --> 00:12:02,089
identification so if the pointer

00:11:59,360 --> 00:12:04,310
authentication feature protects against

00:12:02,089 --> 00:12:06,860
return-oriented programming branch

00:12:04,310 --> 00:12:09,440
target identification protects against

00:12:06,860 --> 00:12:11,779
jump oriented programming so there are

00:12:09,440 --> 00:12:14,660
two security features that comes very

00:12:11,779 --> 00:12:16,279
much well the idea is to deploy them

00:12:14,660 --> 00:12:19,490
very much together to protect against

00:12:16,279 --> 00:12:22,760
these sort of attacks what is the state

00:12:19,490 --> 00:12:25,519
of the enablement of BTI so the user

00:12:22,760 --> 00:12:28,190
space support has been queued just

00:12:25,519 --> 00:12:30,140
recently again few days ago it's ready

00:12:28,190 --> 00:12:33,380
for the merge window which will open in

00:12:30,140 --> 00:12:35,019
few days it's the internal supporting

00:12:33,380 --> 00:12:37,820
instead is still ongoing

00:12:35,019 --> 00:12:39,290
there has been some preliminary work to

00:12:37,820 --> 00:12:42,079
really work in the annotation of

00:12:39,290 --> 00:12:46,430
assembly functions in the kernel which

00:12:42,079 --> 00:12:49,279
again has been queued recently 45.7 and

00:12:46,430 --> 00:12:51,769
we're still working internally on the

00:12:49,279 --> 00:12:54,769
main features or set up set up gal pages

00:12:51,769 --> 00:12:56,959
which will see the light of list pretty

00:12:54,769 --> 00:12:59,060
soon and probably during the fight of

00:12:56,959 --> 00:13:03,260
seven iteration so after the merge

00:12:59,060 --> 00:13:05,630
window closes big thanks to our friends

00:13:03,260 --> 00:13:07,910
from the Gunawan at Albion toolchain

00:13:05,630 --> 00:13:10,880
because there was a problem which was

00:13:07,910 --> 00:13:13,459
preventing the internal BTI to progress

00:13:10,880 --> 00:13:16,250
in the past so there was a problem with

00:13:13,459 --> 00:13:19,160
the F patchable function entry support

00:13:16,250 --> 00:13:22,880
in compilers it has been fixed both in

00:13:19,160 --> 00:13:23,750
GCC ten and in LLVM upstream so now this

00:13:22,880 --> 00:13:25,579
is a good

00:13:23,750 --> 00:13:28,850
and the BTI enablement can progress

00:13:25,579 --> 00:13:32,420
smoothly we are really targeting for all

00:13:28,850 --> 00:13:33,019
these security features the last the

00:13:32,420 --> 00:13:35,899
next

00:13:33,019 --> 00:13:40,850
LTS version which will be the 2020

00:13:35,899 --> 00:13:45,680
kernel LTS this is the target for PGI

00:13:40,850 --> 00:13:48,110
and also for memory tagging specifically

00:13:45,680 --> 00:13:50,779
the user space in April so memory tag

00:13:48,110 --> 00:13:52,639
being the last one of the big set of

00:13:50,779 --> 00:13:55,610
security features that comes with the

00:13:52,639 --> 00:13:58,100
805 architecture also called memory

00:13:55,610 --> 00:14:00,949
coloring collaboration with Google the

00:13:58,100 --> 00:14:04,250
Android team to consolidate and define

00:14:00,949 --> 00:14:06,350
is this picture the user space

00:14:04,250 --> 00:14:11,810
enablement which allows Android to make

00:14:06,350 --> 00:14:14,389
use of it is ongoing we defined the API

00:14:11,810 --> 00:14:18,589
the API is described in the

00:14:14,389 --> 00:14:21,889
documentation since 504 it describes the

00:14:18,589 --> 00:14:26,329
relaxation on how past target pointers

00:14:21,889 --> 00:14:28,759
to the kernel Siskel's heap tagging

00:14:26,329 --> 00:14:31,189
support for memory tagging is ongoing on

00:14:28,759 --> 00:14:34,670
list and there is a developer's branch

00:14:31,189 --> 00:14:37,399
available again for for reviews and and

00:14:34,670 --> 00:14:41,149
initial testing and the work is very

00:14:37,399 --> 00:14:43,639
much undergoing in conjunction also with

00:14:41,149 --> 00:14:47,569
the glue to chain team because we really

00:14:43,639 --> 00:14:51,639
do want to test the kernel ABI against

00:14:47,569 --> 00:14:54,110
the property Lib C ABI as well before

00:14:51,639 --> 00:14:58,160
taking the patches of three and merging

00:14:54,110 --> 00:15:01,819
the patches the ongoing targeting again

00:14:58,160 --> 00:15:05,149
kernel 2020 LTS for use the space

00:15:01,819 --> 00:15:07,009
enablement the in kernel support the

00:15:05,149 --> 00:15:09,079
core changes for a name in the

00:15:07,009 --> 00:15:12,589
architecture for swap and page stable

00:15:09,079 --> 00:15:15,769
support our ongoing for hip tagging only

00:15:12,589 --> 00:15:17,569
again if we are talking about stack

00:15:15,769 --> 00:15:20,750
tagging stack tagging is a bit more

00:15:17,569 --> 00:15:23,959
tricky so fine-grained stack taggings on

00:15:20,750 --> 00:15:27,199
coloring each function is known to break

00:15:23,959 --> 00:15:29,629
kernel single image that will be really

00:15:27,199 --> 00:15:32,139
hard to accept we are looking into

00:15:29,629 --> 00:15:35,839
alternatives for more coarse-grained

00:15:32,139 --> 00:15:37,550
tagging but anyway the current thinking

00:15:35,839 --> 00:15:40,310
is that these

00:15:37,550 --> 00:15:43,010
probably gonna be a debug feature which

00:15:40,310 --> 00:15:45,920
is definitely pending compiler support

00:15:43,010 --> 00:15:48,100
for stack tag being which again we

00:15:45,920 --> 00:15:51,440
already know that will not come before

00:15:48,100 --> 00:15:59,240
2021 so stacked our game will be a topic

00:15:51,440 --> 00:16:03,410
probably a debug topic for 2021 moving

00:15:59,240 --> 00:16:07,700
ahead again new architectural features

00:16:03,410 --> 00:16:09,709
SB and transactional memory as be the

00:16:07,700 --> 00:16:12,350
first version devolution of neon the

00:16:09,709 --> 00:16:15,529
neon instructions has been enabled for

00:16:12,350 --> 00:16:20,140
quite long time now since 415 in the

00:16:15,529 --> 00:16:24,670
kernel and into kvn starting from 502 as

00:16:20,140 --> 00:16:27,500
we - that's the enhancement of as ve

00:16:24,670 --> 00:16:30,019
announced this more than a year ago I

00:16:27,500 --> 00:16:32,930
believe from the architecture has been

00:16:30,019 --> 00:16:36,350
exposed to user space to Hardware cap in

00:16:32,930 --> 00:16:39,500
5.2 not much more to done to be done in

00:16:36,350 --> 00:16:43,329
the kernel it's mostly an a user space

00:16:39,500 --> 00:16:47,089
work to make use of as the instructions

00:16:43,329 --> 00:16:49,279
transactional memory feature for lock

00:16:47,089 --> 00:16:54,290
intensive operations use cases like

00:16:49,279 --> 00:16:56,450
databases and so on and Jets there are

00:16:54,290 --> 00:16:58,040
some initial patches on list which are

00:16:56,450 --> 00:17:00,770
against an early version of the

00:16:58,040 --> 00:17:03,950
architecture those patches will need to

00:17:00,770 --> 00:17:06,110
be revived and reposted against the

00:17:03,950 --> 00:17:09,319
consolidated version of the architecture

00:17:06,110 --> 00:17:11,300
we haven't heard an immediate pool from

00:17:09,319 --> 00:17:15,050
partners or from the ecosystem around

00:17:11,300 --> 00:17:17,540
that so we are not planning to revive

00:17:15,050 --> 00:17:22,339
the transactional memory support in the

00:17:17,540 --> 00:17:24,230
kernel anytime soon unless we hear some

00:17:22,339 --> 00:17:31,150
strong requirements coming from partners

00:17:24,230 --> 00:17:34,300
and ecosystem so if

00:17:31,150 --> 00:17:38,380
take a broader look at what's coming in

00:17:34,300 --> 00:17:41,590
the next common versions 5.6 almost

00:17:38,380 --> 00:17:44,740
start and then 5.7 most of the features

00:17:41,590 --> 00:17:47,530
are already queued so in 5.6 there are a

00:17:44,740 --> 00:17:51,880
bunch of poor new architectural features

00:17:47,530 --> 00:17:54,940
that got enabled one is an 8.5 easier of

00:17:51,880 --> 00:17:57,430
PD so preventing yield 0 access to helps

00:17:54,940 --> 00:17:59,860
of address maps this has been enabled

00:17:57,430 --> 00:18:03,190
and as I said at the beginning the

00:17:59,860 --> 00:18:06,040
random number generator only the runtime

00:18:03,190 --> 00:18:07,930
support has been enabled in 5.6 but we

00:18:06,040 --> 00:18:11,320
already got patches for the boot time

00:18:07,930 --> 00:18:15,660
support for using our energy which are

00:18:11,320 --> 00:18:19,990
queued for 5.7 you can see them below

00:18:15,660 --> 00:18:22,930
from the 8.6 architecture we have as I

00:18:19,990 --> 00:18:24,550
said too little exposure to use a space

00:18:22,930 --> 00:18:27,400
be float16

00:18:24,550 --> 00:18:30,160
and integer eight matrix multiplication

00:18:27,400 --> 00:18:32,290
the kernel doesn't make specific use of

00:18:30,160 --> 00:18:35,710
this picture it's just an exposure to

00:18:32,290 --> 00:18:38,350
use the space 5.6 will also include

00:18:35,710 --> 00:18:43,360
support for the ARM system IP the new

00:18:38,350 --> 00:18:47,530
gig into our controller interface 4.1 in

00:18:43,360 --> 00:18:50,440
5.7 some of them I mentioned already so

00:18:47,530 --> 00:18:52,690
few things are already queued so in

00:18:50,440 --> 00:18:55,240
kernel finds authentication there are

00:18:52,690 --> 00:19:00,550
the Activity Monitor extensions which

00:18:55,240 --> 00:19:02,980
are queued for final seven pm you 64-bit

00:19:00,550 --> 00:19:04,510
enablement or 64-bit counters can in

00:19:02,980 --> 00:19:07,750
front gate a file architecture also

00:19:04,510 --> 00:19:10,210
included talk about bTW I talked about

00:19:07,750 --> 00:19:11,860
the RNG butyne support and the last one

00:19:10,210 --> 00:19:15,310
I would like to point out is the memory

00:19:11,860 --> 00:19:19,900
hot remove memory hot plug also has been

00:19:15,310 --> 00:19:22,450
enabled quite since few releases ago the

00:19:19,900 --> 00:19:24,640
only bit missing was hot remove and hot

00:19:22,450 --> 00:19:29,070
remove is now there and will be merged

00:19:24,640 --> 00:19:29,070
into the five-seven release cycle

00:19:31,470 --> 00:19:38,070
it's not over there are a lot of other

00:19:35,140 --> 00:19:40,420
enablement that we do related to arm

00:19:38,070 --> 00:19:44,290
specifications so let's have a quick

00:19:40,420 --> 00:19:47,560
look really into what are we enabling

00:19:44,290 --> 00:19:49,930
from an arm spec point of view the link

00:19:47,560 --> 00:19:51,520
here brings you to a collection of all

00:19:49,930 --> 00:19:54,610
the specs that our architects are

00:19:51,520 --> 00:19:57,460
producing on developer so the first one

00:19:54,610 --> 00:19:59,710
is the PSA a few more framework which I

00:19:57,460 --> 00:20:02,020
also spoke during the humour talk so

00:19:59,710 --> 00:20:04,960
this is about standardizing the way the

00:20:02,020 --> 00:20:07,540
normal word invoke secure services into

00:20:04,960 --> 00:20:10,660
the second world and it needs also a

00:20:07,540 --> 00:20:13,540
kernel driver for it the kernel driver

00:20:10,660 --> 00:20:16,510
is currently in development the spec is

00:20:13,540 --> 00:20:19,270
expected to reach EAC by mid-april and

00:20:16,510 --> 00:20:22,090
we will work very hard to stabilize the

00:20:19,270 --> 00:20:26,700
driver again on time for the kernel 2020

00:20:22,090 --> 00:20:29,350
LTS se mi power management interface

00:20:26,700 --> 00:20:31,180
which allows the kernel to talk to an

00:20:29,350 --> 00:20:34,330
external power management controller

00:20:31,180 --> 00:20:38,890
switch on the arm reference platform is

00:20:34,330 --> 00:20:40,720
the SCP SCP coprocessor firmware open

00:20:38,890 --> 00:20:43,530
source firmware there is a specification

00:20:40,720 --> 00:20:46,600
that defines the communication process

00:20:43,530 --> 00:20:47,950
and there are body step by step that are

00:20:46,600 --> 00:20:52,570
listed here I'm not going to go into

00:20:47,950 --> 00:20:54,910
details but have a look and the latest

00:20:52,570 --> 00:20:59,800
notification support is on list and is

00:20:54,910 --> 00:21:02,860
linked next one is the SMC : Convention

00:20:59,800 --> 00:21:06,220
1.2 there is a new specific SMC that

00:21:02,860 --> 00:21:08,920
have been explicitly asked by partners

00:21:06,220 --> 00:21:11,050
which is the Sauk ID again will be

00:21:08,920 --> 00:21:15,550
implemented very soon together with the

00:21:11,050 --> 00:21:18,310
publication of the spec the one before

00:21:15,550 --> 00:21:22,120
last is a news arm is also going to

00:21:18,310 --> 00:21:24,700
produce a spec around the trng just

00:21:22,120 --> 00:21:26,590
being requested by the ecosystem the

00:21:24,700 --> 00:21:29,380
spec will be released as beta beginning

00:21:26,590 --> 00:21:32,650
of April and it will define stand our

00:21:29,380 --> 00:21:36,910
kernel and fewer SMC interfaces for

00:21:32,650 --> 00:21:40,150
requests through our ng support and

00:21:36,910 --> 00:21:42,400
seeds for orangey generators this

00:21:40,150 --> 00:21:43,420
supporting kernel and firmware is still

00:21:42,400 --> 00:21:47,260
the

00:21:43,420 --> 00:21:50,710
because spec Mita we still review in the

00:21:47,260 --> 00:21:52,690
spec but the plan would be to the plan

00:21:50,710 --> 00:21:54,160
for the plan would be to address the

00:21:52,690 --> 00:21:57,570
speeches in kernel and firmware

00:21:54,160 --> 00:22:01,720
somewhere in the second half of 2020

00:21:57,570 --> 00:22:04,120
last one a CPI enablement it's an

00:22:01,720 --> 00:22:08,230
ongoing story the last one is regarding

00:22:04,120 --> 00:22:12,220
the CM n 600 TN news the spec is out in

00:22:08,230 --> 00:22:14,700
beta and again we reach exe an April and

00:22:12,220 --> 00:22:20,890
there is a developer branch ongoing

00:22:14,700 --> 00:22:23,350
which Maps the status of the spec so

00:22:20,890 --> 00:22:26,230
almost at the end that it's one last

00:22:23,350 --> 00:22:29,160
topic that we have to talk about which

00:22:26,230 --> 00:22:31,980
as I said is a highlight from

00:22:29,160 --> 00:22:35,440
presentation from yesterday regarding

00:22:31,980 --> 00:22:37,540
Morello the our Morello bolt the

00:22:35,440 --> 00:22:40,990
prototype architecture which are

00:22:37,540 --> 00:22:42,790
announced as an implementation of the

00:22:40,990 --> 00:22:45,670
Cherry Architecture from the University

00:22:42,790 --> 00:22:47,230
of Cambridge this is a wiki page and the

00:22:45,670 --> 00:22:49,840
University of Cambridge we describe the

00:22:47,230 --> 00:22:52,450
project but I would like to point you to

00:22:49,840 --> 00:22:54,730
the presentation from yesterday from my

00:22:52,450 --> 00:22:57,670
colleague mark Nicholson which is listed

00:22:54,730 --> 00:22:59,920
there he described all the step by step

00:22:57,670 --> 00:23:03,520
approach which are mistaking for the

00:22:59,920 --> 00:23:08,440
Morel architecture but focusing only on

00:23:03,520 --> 00:23:12,160
the kernel interesting bit so there is

00:23:08,440 --> 00:23:16,960
going to be two steps one is for October

00:23:12,160 --> 00:23:19,180
this year 2020 there is going to be an

00:23:16,960 --> 00:23:21,400
MVP a fast model release of the

00:23:19,180 --> 00:23:24,130
prototype architecture from a kernel

00:23:21,400 --> 00:23:29,730
point of view we don't plan any specific

00:23:24,130 --> 00:23:33,340
work on the extended ABI a 128-bit ABI

00:23:29,730 --> 00:23:36,310
we don't plan for it on time for the

00:23:33,340 --> 00:23:38,500
October released easier October release

00:23:36,310 --> 00:23:41,260
this year will be based on a bionic

00:23:38,500 --> 00:23:44,170
library shim which in which only expose

00:23:41,260 --> 00:23:48,480
some limited functionalities to to an

00:23:44,170 --> 00:23:50,950
android or nano droid stack for you know

00:23:48,480 --> 00:23:53,950
starting to enable some Android use

00:23:50,950 --> 00:23:56,800
cases the real development against an

00:23:53,950 --> 00:24:00,910
extended ABI we all command

00:23:56,800 --> 00:24:02,770
we start somewhere late this summer or

00:24:00,910 --> 00:24:05,020
this autumn timeframe we are still

00:24:02,770 --> 00:24:07,720
planning for it and it will be a

00:24:05,020 --> 00:24:10,630
combined development with toolchain

00:24:07,720 --> 00:24:13,630
friends above me the new tool chain and

00:24:10,630 --> 00:24:17,110
the LLVM tool chain the idea will be to

00:24:13,630 --> 00:24:19,600
agree on an ABI and arrive by the time

00:24:17,110 --> 00:24:23,140
the development board will be available

00:24:19,600 --> 00:24:25,240
in October 20 21 to arrive with a proper

00:24:23,140 --> 00:24:29,530
kernel definition and with some patches

00:24:25,240 --> 00:24:32,950
that will be hosted on some separate

00:24:29,530 --> 00:24:36,190
each repo this is not meant to be an

00:24:32,950 --> 00:24:38,950
activity to be merged upstream as we go

00:24:36,190 --> 00:24:41,590
all immediately this is a prototype

00:24:38,950 --> 00:24:45,100
architecture with prototype api's which

00:24:41,590 --> 00:24:47,350
will enable some exercise from the

00:24:45,100 --> 00:24:49,690
community really exercise the

00:24:47,350 --> 00:24:53,050
architecture and see which are the

00:24:49,690 --> 00:24:58,360
benefits and the end the cost of

00:24:53,050 --> 00:25:01,330
implementation I put some user for

00:24:58,360 --> 00:25:06,160
resources which we can go through

00:25:01,330 --> 00:25:10,300
offline and that was basically it unless

00:25:06,160 --> 00:25:13,500
there are any questions if you question

00:25:10,300 --> 00:25:15,850
on the NPA CPI spike update availability

00:25:13,500 --> 00:25:17,860
yes it is the most great question for

00:25:15,850 --> 00:25:20,590
our architects but I believe it we can

00:25:17,860 --> 00:25:25,630
somewhere our late 2020 probably in the

00:25:20,590 --> 00:25:27,280
second half of 2020 so I guess we can

00:25:25,630 --> 00:25:29,200
probably close it here and I can follow

00:25:27,280 --> 00:25:31,900
up offline to the guys that have more

00:25:29,200 --> 00:25:34,500
complex question then we can bring the

00:25:31,900 --> 00:25:34,500

YouTube URL: https://www.youtube.com/watch?v=x7abMR37J38


