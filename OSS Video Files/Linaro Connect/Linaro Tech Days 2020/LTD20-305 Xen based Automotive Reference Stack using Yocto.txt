Title: LTD20-305 Xen based Automotive Reference Stack using Yocto
Publication date: 2020-04-01
Playlist: Linaro Tech Days 2020
Description: 
	Description:

Virtualization is becoming one of the key technologies to improve the safety and reduce development costs on the automotive space as it allows for mixed criticality workloads and the consolidation of ECUs under a common system.
We will present the Automotive reference stack, a collection of Yocto layers to build a platform suitable for safety critical deployments. The presentation will focus on Xen on Arm, integration in Yocto and constraints specific to automotive. We will cover what is available in meta-arm today and show our vision of how the platform could evolve though collaboration with the Linaro members.

Session Speakers
Felipe Rinaldi
Principal Software Engineer (Arm)


Filipe Rinaldi is a principal software engineer at Arm with over 14 years of experience in embedded software development and had previously worked at Hewlett Packard. He is currently the tech lead of a group within Arm working on OSS projects in safety critical applications.


Bertrand Marquis
Principal Software Engineer (Arm Ltd)


I have been working for Arm as Principal Software Engineer since mid-2019 focusing on Safety systems (automotive and robotics) needs and working with Xen and Yocto.


In the past I worked mainly on developing a proprietary RTOS certified for avionic systems named PikeOS for Sysgo AG where I was responsible of the Arm and hardware virtualization support in PikeOS.


Jon Mason
Principal Yocto Developer (Arm)


Jon Mason is a Principal Yocto Developer at Arm. In addition to writing new recipes and bug fixes, he coordinates development inside and outside of Arm on OpenEmbedded and the Yocto Project. This includes development and maintenance of the meta-arm layer. Also, Jon sits on the board of OpenEmbedded. Outside of work, Jon maintains NTB and a few other drivers in Linux. 



You can view this sessions presentation here:
https://connect.linaro.org/resources/ltd20/ltd20-305/
Captions: 
	00:00:00,290 --> 00:00:07,730
okay so good morning everyone so today

00:00:04,140 --> 00:00:14,130
we will present you the exam based

00:00:07,730 --> 00:00:16,710
autonomy start using neutral my name is

00:00:14,130 --> 00:00:19,109
Becca Maki and I am a principal software

00:00:16,710 --> 00:00:22,590
engineer at arm in the open source

00:00:19,109 --> 00:00:24,810
software group I am working on the Yocto

00:00:22,590 --> 00:00:28,260
enemy autonomy reference tag that I will

00:00:24,810 --> 00:00:32,510
present today but I am also working on I

00:00:28,260 --> 00:00:36,680
will be presenting today with John Mason

00:00:32,510 --> 00:00:38,670
and I will let you introduce yourself

00:00:36,680 --> 00:00:42,019
you

00:00:38,670 --> 00:00:44,670
so I'm John Mason I also work at arm I

00:00:42,019 --> 00:00:48,539
guess and directly with Bertrand I'm

00:00:44,670 --> 00:00:50,460
kind of the principal Yocto developer at

00:00:48,539 --> 00:00:52,879
arm there are many other young to

00:00:50,460 --> 00:00:55,500
developers inside arm but I kind of

00:00:52,879 --> 00:00:57,570
helped corral them and focus them

00:00:55,500 --> 00:01:00,989
upstream I'm the principal maintainer of

00:00:57,570 --> 00:01:04,399
meta arm open bedded lair and I'm also

00:01:00,989 --> 00:01:04,399
an open embedded Board member

00:01:04,909 --> 00:01:10,830
so today we will start the presentation

00:01:07,920 --> 00:01:13,110
by explaining you why arm is creating

00:01:10,830 --> 00:01:13,950
the autonomy on start and what it is

00:01:13,110 --> 00:01:17,549
exactly

00:01:13,950 --> 00:01:20,070
we will then detail the work of arm on

00:01:17,549 --> 00:01:22,170
your toe with the meter arm layer and

00:01:20,070 --> 00:01:25,890
how this is used for the reference tack

00:01:22,170 --> 00:01:28,200
and finally we will give you a status

00:01:25,890 --> 00:01:33,090
update on the current implementation and

00:01:28,200 --> 00:01:37,740
what can be expected in the future so

00:01:33,090 --> 00:01:41,569
first why is on creating exam autonomy

00:01:37,740 --> 00:01:44,310
reference tack so autonomy system are

00:01:41,569 --> 00:01:47,000
very complex that system like

00:01:44,310 --> 00:01:50,429
self-driving cars but also of us

00:01:47,000 --> 00:01:54,000
surviving car include complex input

00:01:50,429 --> 00:01:56,340
processing like video or lighter number

00:01:54,000 --> 00:01:59,130
of computation going from artificial

00:01:56,340 --> 00:02:02,100
intelligence to voice recognition and

00:01:59,130 --> 00:02:03,720
several output only that managing the

00:02:02,100 --> 00:02:07,470
engine but that cannot so be playing

00:02:03,720 --> 00:02:09,660
music on and without an idea visor can

00:02:07,470 --> 00:02:12,450
make development easier by splitting the

00:02:09,660 --> 00:02:14,640
system in different components each one

00:02:12,450 --> 00:02:18,150
can be implemented by different groups

00:02:14,640 --> 00:02:20,099
or companies it can be used as a general

00:02:18,150 --> 00:02:22,739
platform to a functions develop

00:02:20,099 --> 00:02:25,680
independently of the hardware and reused

00:02:22,739 --> 00:02:28,830
on different system it can also make

00:02:25,680 --> 00:02:30,980
development easier by isolating critical

00:02:28,830 --> 00:02:34,200
from knowledge compact reducing

00:02:30,980 --> 00:02:36,840
certification cost even more control on

00:02:34,200 --> 00:02:41,180
the boot flow or allowing independent

00:02:36,840 --> 00:02:41,180
update management of different functions

00:02:41,540 --> 00:02:47,550
so why choosing them so first exam is a

00:02:44,670 --> 00:02:51,180
type 1 hypervisor means it does not need

00:02:47,550 --> 00:02:53,400
a rich OS as post this is rich using the

00:02:51,180 --> 00:02:55,290
amount of critical code and enable

00:02:53,400 --> 00:02:57,510
faster boot time to critical functions

00:02:55,290 --> 00:02:59,390
in comparison to what you could do with

00:02:57,510 --> 00:03:02,370
a type 2 hypervisor

00:02:59,390 --> 00:03:04,379
sizing exam is open source and as a wide

00:03:02,370 --> 00:03:06,780
community of users and developer

00:03:04,379 --> 00:03:09,420
it is used in number of servers and

00:03:06,780 --> 00:03:12,060
application and then community is

00:03:09,420 --> 00:03:13,620
pushing towards embedded system who the

00:03:12,060 --> 00:03:14,550
project is looking at the exam

00:03:13,620 --> 00:03:17,430
certification

00:03:14,550 --> 00:03:19,680
while several industry leaders like

00:03:17,430 --> 00:03:22,140
want to help then being more suitable

00:03:19,680 --> 00:03:24,480
for embedded system for example there is

00:03:22,140 --> 00:03:29,610
an automotive group that you can find on

00:03:24,480 --> 00:03:32,489
website with your telomere I found stack

00:03:29,610 --> 00:03:35,010
we want to create exam based stack

00:03:32,489 --> 00:03:37,290
suitable for autonomous systems the

00:03:35,010 --> 00:03:38,879
stack will focus on boot time and slip

00:03:37,290 --> 00:03:41,280
functionality to be suitable for

00:03:38,879 --> 00:03:43,080
embedded system the stack will provide

00:03:41,280 --> 00:03:45,810
the small and simple way to manage

00:03:43,080 --> 00:03:48,060
guests from how to start and stop them

00:03:45,810 --> 00:03:50,519
to a development a deployment system

00:03:48,060 --> 00:03:53,310
suitable for abilities on middle

00:03:50,519 --> 00:03:55,680
application the stack will include

00:03:53,310 --> 00:03:59,220
features focusing on safety and security

00:03:55,680 --> 00:04:02,069
like out integration secure boot or date

00:03:59,220 --> 00:04:03,540
problematic and finally the stack will

00:04:02,069 --> 00:04:05,700
provide on easy way to integrate

00:04:03,540 --> 00:04:10,890
different components and have guests

00:04:05,700 --> 00:04:13,590
usable on different systems this slide

00:04:10,890 --> 00:04:15,959
shows the blocks of a system based on

00:04:13,590 --> 00:04:19,049
the autonomy reference stack all

00:04:15,959 --> 00:04:21,780
components in light blue algae focus or

00:04:19,049 --> 00:04:24,060
will be the focus of the stack so first

00:04:21,780 --> 00:04:27,539
you are the film we are based on hostage

00:04:24,060 --> 00:04:30,600
from armed energy you have zigs an

00:04:27,539 --> 00:04:34,470
equalizer at Dominick's

00:04:30,600 --> 00:04:37,800
with tools to manage guests and guests

00:04:34,470 --> 00:04:41,580
based on Linux but those could be also

00:04:37,800 --> 00:04:43,620
based on others and those guests will

00:04:41,580 --> 00:04:54,270
contain the actual workloads of the

00:04:43,620 --> 00:04:56,760
system so I will John on the yoke so in

00:04:54,270 --> 00:04:58,770
the previous slide you saw talking about

00:04:56,760 --> 00:05:02,910
a reference stack but how do we build a

00:04:58,770 --> 00:05:06,030
custom referenced stack and the easiest

00:05:02,910 --> 00:05:08,130
way is with the octo so the octo project

00:05:06,030 --> 00:05:10,770
is a set of templates tools and methods

00:05:08,130 --> 00:05:14,099
that help you build custom based Linux

00:05:10,770 --> 00:05:15,810
systems so if you're looking over to the

00:05:14,099 --> 00:05:17,729
right you might see kind of a bit of an

00:05:15,810 --> 00:05:19,740
eye chart of different pieces

00:05:17,729 --> 00:05:23,340
interlocking together and it might be

00:05:19,740 --> 00:05:25,469
quite confusing confusing but the pieces

00:05:23,340 --> 00:05:28,469
that I want you to kind of focus on here

00:05:25,469 --> 00:05:30,780
are in the lower right hand corner

00:05:28,469 --> 00:05:33,900
you'll see images and essentially

00:05:30,780 --> 00:05:37,080
is the process of how images are are

00:05:33,900 --> 00:05:40,050
created and over to the left of the

00:05:37,080 --> 00:05:44,550
infographic is a I guess this is an

00:05:40,050 --> 00:05:49,290
infographic but a graphic is the layer

00:05:44,550 --> 00:05:53,400
of piece so what you'll see are how

00:05:49,290 --> 00:05:55,880
these pieces all pull together and and

00:05:53,400 --> 00:05:59,250
also kind of notice up in the upper

00:05:55,880 --> 00:06:00,450
portion of it the source code and the

00:05:59,250 --> 00:06:05,430
source mirrors and how it's being

00:06:00,450 --> 00:06:08,550
fetched down so this is I don't want to

00:06:05,430 --> 00:06:10,860
dig too deep into the details of Yocto

00:06:08,550 --> 00:06:12,690
and how it's how it's happening so

00:06:10,860 --> 00:06:17,120
hopefully everyone has at least a rough

00:06:12,690 --> 00:06:17,120
understanding of yocto

00:06:18,550 --> 00:06:32,719
and yeah so the arm layer so essentially

00:06:27,460 --> 00:06:37,669
um we've created a delayering aspect

00:06:32,719 --> 00:06:39,319
that from the previous page and this is

00:06:37,669 --> 00:06:41,509
kind of how it's made up so you have

00:06:39,319 --> 00:06:45,800
your own custom linear distribution to

00:06:41,509 --> 00:06:52,310
your to the right and the left and each

00:06:45,800 --> 00:06:54,590
of these is done by layers and the

00:06:52,310 --> 00:06:57,789
layers are made up of individual pieces

00:06:54,590 --> 00:07:02,330
it's meant to be highly highly modular

00:06:57,789 --> 00:07:05,960
modular so each of these layers is made

00:07:02,330 --> 00:07:09,469
up of recipes and if you look down at

00:07:05,960 --> 00:07:11,360
the pieces you'll notice that some of

00:07:09,469 --> 00:07:12,949
these are duplicated from the right in

00:07:11,360 --> 00:07:18,430
the left and what that's meant to show

00:07:12,949 --> 00:07:21,080
is kind of common dependencies so the

00:07:18,430 --> 00:07:23,960
dark blue on the Left you'll see metal

00:07:21,080 --> 00:07:26,180
arm BSP and in the right you'll see the

00:07:23,960 --> 00:07:28,219
red and metal arms eye links for example

00:07:26,180 --> 00:07:31,479
and what this is meant to show is that

00:07:28,219 --> 00:07:34,159
you can easily remove a piece and

00:07:31,479 --> 00:07:40,069
replace it with another that has the

00:07:34,159 --> 00:07:42,500
same dependencies and it it and that's

00:07:40,069 --> 00:07:49,190
the kind of modular modularity that that

00:07:42,500 --> 00:07:50,810
Yocto has and also you have the side by

00:07:49,190 --> 00:07:54,110
side pieces that make up your custom

00:07:50,810 --> 00:07:57,740
distribution so for example in it you're

00:07:54,110 --> 00:08:00,650
gonna need a kernel and the kernel will

00:07:57,740 --> 00:08:04,969
be made up of will come from the Medawar

00:08:00,650 --> 00:08:08,199
BSP and and that'll be applying patches

00:08:04,969 --> 00:08:14,839
on top of metal arm so that's what this

00:08:08,199 --> 00:08:16,960
graphic is meant to show so so why do we

00:08:14,839 --> 00:08:19,400
go through this effort of making a

00:08:16,960 --> 00:08:24,080
custom layer which we are calling it

00:08:19,400 --> 00:08:26,000
metal arm well unfortunately there are

00:08:24,080 --> 00:08:27,649
many arm well fortunately there are many

00:08:26,000 --> 00:08:31,550
arm vendors unfortunately they're kind

00:08:27,649 --> 00:08:33,980
of doing their own thing so we have each

00:08:31,550 --> 00:08:37,910
one doing their own unique jock to layer

00:08:33,980 --> 00:08:42,110
making divergent recipes for things like

00:08:37,910 --> 00:08:46,430
Colonel and u-boot and each one is a

00:08:42,110 --> 00:08:47,810
different version of octo and because

00:08:46,430 --> 00:08:51,410
everyone's doing their own thing there's

00:08:47,810 --> 00:08:54,020
no intrinsic need to upstream they're

00:08:51,410 --> 00:08:56,360
just pushing random or not not everyone

00:08:54,020 --> 00:08:58,580
but some are pushing random get trees to

00:08:56,360 --> 00:09:02,560
github for example with just their

00:08:58,580 --> 00:09:05,270
changes on top of a snapshotted tree and

00:09:02,560 --> 00:09:07,250
this creates a large problem because it

00:09:05,270 --> 00:09:09,080
makes it difficult to upgrade to new

00:09:07,250 --> 00:09:13,280
versions of Yocto and underlying

00:09:09,080 --> 00:09:15,110
software and by this I mean in later

00:09:13,280 --> 00:09:16,940
this month a new version of Yocto what

00:09:15,110 --> 00:09:20,480
will be coming out done Phil I believe

00:09:16,940 --> 00:09:23,060
it's named and if you were three

00:09:20,480 --> 00:09:26,240
versions behind snapshotted to all this

00:09:23,060 --> 00:09:28,190
stuff it's almost impossible to force an

00:09:26,240 --> 00:09:31,280
upgrade or it's not impossible it's

00:09:28,190 --> 00:09:37,360
extremely difficult a lot of hours to

00:09:31,280 --> 00:09:42,110
put in that's not necessary so and

00:09:37,360 --> 00:09:44,090
because of that there's no shared work

00:09:42,110 --> 00:09:46,340
because everyone's doing their own thing

00:09:44,090 --> 00:09:49,220
and because everyone's not doing their

00:09:46,340 --> 00:09:53,780
own thing you don't know how well each

00:09:49,220 --> 00:09:56,330
layer and each recipe is tested and the

00:09:53,780 --> 00:09:57,890
kind of final nail in the coffin is that

00:09:56,330 --> 00:09:59,810
they're often not following the arm

00:09:57,890 --> 00:10:02,870
recommended processes or implementations

00:09:59,810 --> 00:10:06,500
for example arm would really really love

00:10:02,870 --> 00:10:09,050
for everyone all the arm BSP to be

00:10:06,500 --> 00:10:10,580
running secure boot and opti so we can

00:10:09,050 --> 00:10:14,660
have the highest level of trust and

00:10:10,580 --> 00:10:17,060
security and because because there's no

00:10:14,660 --> 00:10:18,170
shared work a lot of these vendors will

00:10:17,060 --> 00:10:26,480
just get it working and throw it over

00:10:18,170 --> 00:10:29,920
the fence so metal arm is intended to be

00:10:26,480 --> 00:10:32,630
the one-stop shop for all of our we're

00:10:29,920 --> 00:10:37,120
kind of to answer all those those

00:10:32,630 --> 00:10:40,100
problems on the previous slide where

00:10:37,120 --> 00:10:42,230
we're making it we're pulling it all the

00:10:40,100 --> 00:10:44,270
arm specific software all the reference

00:10:42,230 --> 00:10:49,580
hardware and the BSP enablement the tool

00:10:44,270 --> 00:10:54,260
chains the autonomy and maybe even some

00:10:49,580 --> 00:10:56,270
distro reference reference distros also

00:10:54,260 --> 00:10:59,420
this is intended on being a place to

00:10:56,270 --> 00:11:02,300
collaborate so that our vendors can from

00:10:59,420 --> 00:11:03,830
the term two slides ago can take the

00:11:02,300 --> 00:11:07,070
pieces they care about from metal arm

00:11:03,830 --> 00:11:10,400
and use that in their own reference

00:11:07,070 --> 00:11:14,870
layers or um metal layers so for example

00:11:10,400 --> 00:11:17,810
meta Xilinx can take the the trusted

00:11:14,870 --> 00:11:19,850
firmware recipe and to supply their

00:11:17,810 --> 00:11:22,490
stuff on top and not need to maintain

00:11:19,850 --> 00:11:26,450
the core of it just their own unique

00:11:22,490 --> 00:11:30,890
piece of it and because of its all being

00:11:26,450 --> 00:11:33,020
a single place we can run CI continuous

00:11:30,890 --> 00:11:37,730
integration on it constantly so we have

00:11:33,020 --> 00:11:40,580
stability and equality in it and I think

00:11:37,730 --> 00:11:43,850
most importantly for me so we want arm

00:11:40,580 --> 00:11:47,060
to we want to model the behavior for all

00:11:43,850 --> 00:11:49,070
arm platforms and hopefully all vendors

00:11:47,060 --> 00:11:51,410
see it and see it as a good thing and

00:11:49,070 --> 00:11:53,510
just copy the relevant pieces so they

00:11:51,410 --> 00:11:55,640
don't need to do the work and and that's

00:11:53,510 --> 00:12:01,940
a that'll save a lot of effort on

00:11:55,640 --> 00:12:04,430
everyone's everyone's played there so

00:12:01,940 --> 00:12:06,890
meta arm is made up of a bunch of

00:12:04,430 --> 00:12:11,570
different pieces and most confusingly

00:12:06,890 --> 00:12:14,480
we have meta arm meta arm so the

00:12:11,570 --> 00:12:19,610
confusing part here is that metal arm is

00:12:14,480 --> 00:12:21,860
a collection of of layers and inside

00:12:19,610 --> 00:12:25,040
that we have the core pieces of layers

00:12:21,860 --> 00:12:26,810
which we are calling meta harm so these

00:12:25,040 --> 00:12:29,870
are kind of the generic recipes for

00:12:26,810 --> 00:12:32,930
example the trusted firmware a recipes

00:12:29,870 --> 00:12:34,089
the opti recipes and recently we pulled

00:12:32,930 --> 00:12:38,019
in something called open

00:12:34,089 --> 00:12:39,699
seedy of support so this is really just

00:12:38,019 --> 00:12:45,129
kind of the core pieces that other

00:12:39,699 --> 00:12:47,889
layers will want to reference and met

00:12:45,129 --> 00:12:50,769
rbsp so I'm sure many people out there

00:12:47,889 --> 00:12:54,939
have heard of the Juneau board this

00:12:50,769 --> 00:12:57,819
layer will provide basic support there's

00:12:54,939 --> 00:13:01,980
already support out there and the metal

00:12:57,819 --> 00:13:06,069
and aural layers but because this is arm

00:13:01,980 --> 00:13:09,490
reference Hardware we should be the best

00:13:06,069 --> 00:13:11,350
ones to support it and and so we've had

00:13:09,490 --> 00:13:14,980
many communications with the people

00:13:11,350 --> 00:13:18,129
working on my octodad Lennar oh and

00:13:14,980 --> 00:13:21,279
we're transitioning to that to metal arm

00:13:18,129 --> 00:13:24,120
in addition to that we have the software

00:13:21,279 --> 00:13:27,370
foundation models also known as FTP

00:13:24,120 --> 00:13:30,759
which enables you in software to model

00:13:27,370 --> 00:13:33,430
the the arm references are at the arm

00:13:30,759 --> 00:13:36,999
designs and enables you to test at 100%

00:13:33,430 --> 00:13:40,809
in software and we also have some

00:13:36,999 --> 00:13:45,939
hardware platforms and more will be

00:13:40,809 --> 00:13:49,709
added to that in the future and then we

00:13:45,939 --> 00:13:52,329
also have a meta arm tool chain so

00:13:49,709 --> 00:13:55,689
Lenora people will probably remember the

00:13:52,329 --> 00:13:57,519
arm or the lonardo binary tool chains

00:13:55,689 --> 00:13:59,199
and software tool chains that they've

00:13:57,519 --> 00:14:03,999
been developing for years and years and

00:13:59,199 --> 00:14:07,720
years in the past year or two that has

00:14:03,999 --> 00:14:09,670
been transitioned to internal or has

00:14:07,720 --> 00:14:13,749
been transitioned to be supported by arm

00:14:09,670 --> 00:14:17,679
and arm is every year I believe twice a

00:14:13,749 --> 00:14:20,649
year releasing software releases of GCC

00:14:17,679 --> 00:14:24,670
and minor versions of the same GCC

00:14:20,649 --> 00:14:28,749
toolchain they are currently a 28.3 in

00:14:24,670 --> 00:14:31,809
9.2 and in this layer you can easily add

00:14:28,749 --> 00:14:38,439
these to be used inside your active

00:14:31,809 --> 00:14:41,019
layers so the mid-arm autonomy is on is

00:14:38,439 --> 00:14:43,829
on those are sub layer present in metal

00:14:41,019 --> 00:14:46,569
arm and is on implementation of the

00:14:43,829 --> 00:14:48,070
reference that I presented earlier based

00:14:46,569 --> 00:14:49,840
on your toe so it can

00:14:48,070 --> 00:14:53,020
be used to build all component of the

00:14:49,840 --> 00:14:56,050
stock from the shear Moya exam and Anzio

00:14:53,020 --> 00:14:58,540
to guest this layer can be used with

00:14:56,050 --> 00:15:01,690
other layers to use external DSPs

00:14:58,540 --> 00:15:04,150
recipes or workloads like a gel or way

00:15:01,690 --> 00:15:06,100
learning guest it is designed to be easy

00:15:04,150 --> 00:15:10,210
to use unsuitable for fast prototyping

00:15:06,100 --> 00:15:12,790
and research the first part of the

00:15:10,210 --> 00:15:16,930
autonomy stack is building a system with

00:15:12,790 --> 00:15:19,390
a few Moya exam and the dom0 Linux so

00:15:16,930 --> 00:15:21,820
exam is built based on the emitter

00:15:19,390 --> 00:15:25,420
virtualization or ACP which are already

00:15:21,820 --> 00:15:28,350
existing the reader is also providing a

00:15:25,420 --> 00:15:31,390
way to build exam compatible device tree

00:15:28,350 --> 00:15:34,480
created from an existing ggb but adding

00:15:31,390 --> 00:15:38,320
the parts required boot exam and anzio

00:15:34,480 --> 00:15:40,600
linux on top of exam dong-hyun enix is

00:15:38,320 --> 00:15:42,820
built with exam back-end drivers and

00:15:40,600 --> 00:15:45,580
required tools in the root filesystem to

00:15:42,820 --> 00:15:47,680
manage a guest so this is implemented as

00:15:45,580 --> 00:15:50,860
a job to distribution feature name are

00:15:47,680 --> 00:15:53,500
monomials the layer also provide an

00:15:50,860 --> 00:15:56,320
image name a metonymy host image minima

00:15:53,500 --> 00:15:58,900
to create a minimal dom0 system will

00:15:56,320 --> 00:16:03,610
with all required tools and to manage

00:15:58,900 --> 00:16:06,640
exam cast the second part of the

00:16:03,610 --> 00:16:08,890
autonomy stack is building guest the

00:16:06,640 --> 00:16:12,400
rayul provide the Yocto distribution

00:16:08,890 --> 00:16:15,070
named our metonymy guest for that the

00:16:12,400 --> 00:16:17,310
future will add exam from ten drivers in

00:16:15,070 --> 00:16:19,330
linux kernel and some custom is

00:16:17,310 --> 00:16:22,180
customization to be able to run as

00:16:19,330 --> 00:16:25,510
guests for example adding the console on

00:16:22,180 --> 00:16:28,720
a decision there is no specific image

00:16:25,510 --> 00:16:31,780
provided for guest as the feature can be

00:16:28,720 --> 00:16:33,820
used with any existing Yocto image so it

00:16:31,780 --> 00:16:36,910
can be tried with the Yocto image

00:16:33,820 --> 00:16:39,640
minimum points under the raelia also

00:16:36,910 --> 00:16:42,610
provide a BSP name arm 60 for autonomy

00:16:39,640 --> 00:16:46,570
guest this BSP provide a minimal kernel

00:16:42,610 --> 00:16:48,750
configuration suitable one as exam guest

00:16:46,570 --> 00:16:51,310
it can be used to generate

00:16:48,750 --> 00:16:52,930
platform-independent guests only relying

00:16:51,310 --> 00:16:58,270
on exam front-end drivers for

00:16:52,930 --> 00:17:00,010
communication the meta arm autonomy

00:16:58,270 --> 00:17:01,660
layer is introducing the exam guest

00:17:00,010 --> 00:17:03,750
system this is a minimum

00:17:01,660 --> 00:17:06,160
and guest image and management system

00:17:03,750 --> 00:17:08,320
exam guest image will include all

00:17:06,160 --> 00:17:10,450
components required to build the exam

00:17:08,320 --> 00:17:12,630
guests so that's the kernel the device

00:17:10,450 --> 00:17:15,010
tree but also the configuration a

00:17:12,630 --> 00:17:17,260
definition of the disk and its content

00:17:15,010 --> 00:17:19,540
and some initialization script that will

00:17:17,260 --> 00:17:24,160
be run on the host when starting the

00:17:19,540 --> 00:17:26,740
guest the exam guest m'kay image tool is

00:17:24,160 --> 00:17:29,500
used to manipulate such images words

00:17:26,740 --> 00:17:31,450
creating or modifying them but also

00:17:29,500 --> 00:17:33,370
extracting them and the tool can be used

00:17:31,450 --> 00:17:37,240
on both your hosts development system

00:17:33,370 --> 00:17:38,980
and on the target the exam guest manager

00:17:37,240 --> 00:17:41,590
is a tool to be used in the Dom geo

00:17:38,980 --> 00:17:44,410
system to manage design guest based on

00:17:41,590 --> 00:17:47,110
jigs and guest images so the manager

00:17:44,410 --> 00:17:50,620
will start and stop your guests and it

00:17:47,110 --> 00:17:53,110
can also use LVM to create disk for the

00:17:50,620 --> 00:17:56,020
guest based on the configuration the

00:17:53,110 --> 00:17:57,910
included it also provide on in each pot

00:17:56,020 --> 00:18:03,850
so that your guests are starting to

00:17:57,910 --> 00:18:05,740
magically on boot so the exam gas system

00:18:03,850 --> 00:18:07,630
is integrated in Yocto with several

00:18:05,740 --> 00:18:09,790
components the first one is a file

00:18:07,630 --> 00:18:12,370
system type which is used to create a

00:18:09,790 --> 00:18:14,560
full design guest image when you build a

00:18:12,370 --> 00:18:16,450
Yocto image so that includes the full

00:18:14,560 --> 00:18:18,390
file system the whole file system and

00:18:16,450 --> 00:18:22,570
the kernel but also the exact

00:18:18,390 --> 00:18:24,550
configuration we provide the class names

00:18:22,570 --> 00:18:27,130
and guest image extras I can be used in

00:18:24,550 --> 00:18:29,440
recipes to extend this image for example

00:18:27,130 --> 00:18:32,950
providing on init script so that you can

00:18:29,440 --> 00:18:35,740
customize your guest when you start it

00:18:32,950 --> 00:18:38,200
the exam guest manager is included on

00:18:35,740 --> 00:18:41,680
the host image to manage guest created

00:18:38,200 --> 00:18:44,050
with this we also provide a network

00:18:41,680 --> 00:18:47,890
bridge system which will create a bridge

00:18:44,050 --> 00:18:50,050
on the dungeon to which guests can

00:18:47,890 --> 00:18:53,890
connect so that they have connectivity

00:18:50,050 --> 00:18:55,960
to the external world using network so

00:18:53,890 --> 00:18:57,850
the Linnaean will include lots of

00:18:55,960 --> 00:18:59,710
parameters so that each of those

00:18:57,850 --> 00:19:01,810
components can actually be customized

00:18:59,710 --> 00:19:04,240
from what amount of RAM you want to the

00:19:01,810 --> 00:19:10,210
guest to what this partition should be

00:19:04,240 --> 00:19:10,900
used to create a VM volumes so let's

00:19:10,210 --> 00:19:13,150
conclude

00:19:10,900 --> 00:19:15,970
presentation by giving you a status and

00:19:13,150 --> 00:19:19,360
what you can expect from it arm in the

00:19:15,970 --> 00:19:23,770
future so first meta arm was deployed in

00:19:19,360 --> 00:19:26,100
January 2020 in the octo project and the

00:19:23,770 --> 00:19:29,080
first feedback we had is very promising

00:19:26,100 --> 00:19:31,870
first beta of meta metonymy has been

00:19:29,080 --> 00:19:36,580
pushed to meet our meaning missed last

00:19:31,870 --> 00:19:39,130
week and should be merged Rakesh we will

00:19:36,580 --> 00:19:44,530
release our first stable version with

00:19:39,130 --> 00:19:47,530
dr. dan fell in a plane in the future we

00:19:44,530 --> 00:19:49,420
will add more BSP's to meet on vspeed so

00:19:47,530 --> 00:19:51,550
that's for example and one for cost one

00:19:49,420 --> 00:19:55,090
seven hundred or thousand yen one HDPE

00:19:51,550 --> 00:19:58,900
bar we will add more software support to

00:19:55,090 --> 00:20:01,600
meter arm so the plan for educate us

00:19:58,900 --> 00:20:03,570
appear on ACP reception and we will

00:20:01,600 --> 00:20:06,390
continue to enhance meter arm autonomy

00:20:03,570 --> 00:20:10,240
optimizing the boot time the size

00:20:06,390 --> 00:20:12,490
managing security including a key make

00:20:10,240 --> 00:20:14,800
development easier for everyone and add

00:20:12,490 --> 00:20:20,050
compatibility with other areas for

00:20:14,800 --> 00:20:22,270
example with Ag so for more information

00:20:20,050 --> 00:20:25,600
please go to the project documentation

00:20:22,270 --> 00:20:28,570
you can close and use clone and use our

00:20:25,600 --> 00:20:31,030
yeah and you can join our mailing list

00:20:28,570 --> 00:20:35,590
if you need help or if you want to

00:20:31,030 --> 00:20:41,850
contribute to metal 6 everyone's if you

00:20:35,590 --> 00:20:41,850
have questions we can answer them now

00:20:45,920 --> 00:20:57,810
okay so super all disturbed describe

00:20:54,020 --> 00:21:07,770
well that's a guessing for the previous

00:20:57,810 --> 00:21:09,810
presentation okay what is the difference

00:21:07,770 --> 00:21:12,600
between the new Honda mio was that a

00:21:09,810 --> 00:21:17,730
question from the roof well Don zero is

00:21:12,600 --> 00:21:24,120
the part in Zen creating guests the new

00:21:17,730 --> 00:21:26,760
is a guest which as in Zen Zen naming

00:21:24,120 --> 00:21:30,090
scheme that's just a guest which has no

00:21:26,760 --> 00:21:33,660
access to any other devices so it's only

00:21:30,090 --> 00:21:36,180
relying on exam drivers to have access

00:21:33,660 --> 00:21:40,410
to stuff like discs or itemid so it's

00:21:36,180 --> 00:21:46,170
only using the actual drivers so thanks

00:21:40,410 --> 00:21:48,630
questions how to secure boot form for

00:21:46,170 --> 00:21:51,690
Adomian so the idea is to wonder this

00:21:48,630 --> 00:21:54,720
part from the Dom yo so Dom zero will be

00:21:51,690 --> 00:21:57,000
secure boot and in the chain of trust

00:21:54,720 --> 00:21:58,920
Don zero will actually check the image

00:21:57,000 --> 00:22:02,070
including the challenge the file system

00:21:58,920 --> 00:22:04,170
and all components before starting a

00:22:02,070 --> 00:22:07,500
guest's so you build a chain of trust

00:22:04,170 --> 00:22:09,990
dong-hyun is trusted then as Don gos

00:22:07,500 --> 00:22:21,840
trusted it can check the guest before

00:22:09,990 --> 00:22:24,150
starting them okay question file system

00:22:21,840 --> 00:22:27,900
checking can be time-consuming yes it

00:22:24,150 --> 00:22:30,240
can that's why we have to do some

00:22:27,900 --> 00:22:33,180
research on this so the initial file

00:22:30,240 --> 00:22:35,100
system can be checked but then if you

00:22:33,180 --> 00:22:37,830
have check the initial file system and

00:22:35,100 --> 00:22:39,990
you let your guest run and you check

00:22:37,830 --> 00:22:42,390
only the part that you update you might

00:22:39,990 --> 00:22:44,580
be able to undern under some updates in

00:22:42,390 --> 00:22:47,160
a fast way but definitely yes I agree

00:22:44,580 --> 00:22:49,170
that that can be time-consuming but it

00:22:47,160 --> 00:22:52,190
will be application dependent may be you

00:22:49,170 --> 00:22:52,190
will not need to check it

00:22:57,000 --> 00:23:03,700
what platforms qualify for being in meta

00:23:00,430 --> 00:23:07,060
army instead of meter VanDyke meter FSL

00:23:03,700 --> 00:23:08,920
or meter GI I guess it's more question

00:23:07,060 --> 00:23:12,550
for John John do you want to answer this

00:23:08,920 --> 00:23:20,440
one sure so this is an intending on

00:23:12,550 --> 00:23:22,630
taking from so for example you talked

00:23:20,440 --> 00:23:26,410
about meta Ti so what we would like is

00:23:22,630 --> 00:23:29,440
for meta TI to be dependent in the in

00:23:26,410 --> 00:23:31,390
the parlance of of Yocto and

00:23:29,440 --> 00:23:34,510
openembedded we like it to be dependent

00:23:31,390 --> 00:23:37,450
so it would pull the recipe for trusted

00:23:34,510 --> 00:23:41,230
firmware from meta arm and then inside

00:23:37,450 --> 00:23:44,590
its BSP portion it would augment that

00:23:41,230 --> 00:23:46,960
recipe through a BB a pen and for

00:23:44,590 --> 00:23:49,870
example overwrite where the source is

00:23:46,960 --> 00:23:53,950
coming from and then use that BB a pen

00:23:49,870 --> 00:23:56,830
to build their specific TFA recipes on

00:23:53,950 --> 00:23:59,890
this question meta on VSP itself is

00:23:56,830 --> 00:24:03,720
supposed to be is a place to all PS PS

00:23:59,890 --> 00:24:08,440
for our produced system so that small

00:24:03,720 --> 00:24:10,810
emulators like a VP Juno bond as a

00:24:08,440 --> 00:24:14,710
different development mode that you can

00:24:10,810 --> 00:24:18,280
get from arm jerky it's not supposed to

00:24:14,710 --> 00:24:23,920
old any PSP from vendors like signings

00:24:18,280 --> 00:24:26,200
I need P Vanessa's for example those

00:24:23,920 --> 00:24:29,410
vendors will use meta arm to retrieve

00:24:26,200 --> 00:24:31,990
the pajama recipe but will not use meta

00:24:29,410 --> 00:24:34,450
arm to put their own DSPs that's not the

00:24:31,990 --> 00:24:36,550
aim of the year of the year yeah and

00:24:34,450 --> 00:24:38,500
hopefully very soon I've been in contact

00:24:36,550 --> 00:24:41,290
with some people at Xilinx and they're

00:24:38,500 --> 00:24:46,120
very interested in using our TF a recipe

00:24:41,290 --> 00:24:49,330
and they're in their lair so from

00:24:46,120 --> 00:24:51,670
YouTube Shaunie asked what percentage of

00:24:49,330 --> 00:24:53,500
the target system resources used needed

00:24:51,670 --> 00:24:58,480
for the grant exam framework

00:24:53,500 --> 00:25:00,760
infrastructure that's not something I

00:24:58,480 --> 00:25:03,760
cannot answer to that because it's it's

00:25:00,760 --> 00:25:05,950
a lot more complex than just giving a

00:25:03,760 --> 00:25:06,790
number depending on what you do it can

00:25:05,950 --> 00:25:10,410
be down to 0

00:25:06,790 --> 00:25:13,090
and if your guest does not require any

00:25:10,410 --> 00:25:14,980
communication with Adam zero and there

00:25:13,090 --> 00:25:16,420
will be almost no other ID apart from

00:25:14,980 --> 00:25:19,420
the override introduced by our

00:25:16,420 --> 00:25:21,810
virtualization like second level of of

00:25:19,420 --> 00:25:25,540
page tables is introducing on the world

00:25:21,810 --> 00:25:27,340
but there is no definitive answer to

00:25:25,540 --> 00:25:33,430
that it's not possible to give a

00:25:27,340 --> 00:25:36,640
percentage of avoid sorry any other

00:25:33,430 --> 00:25:41,310
question I think we're there

00:25:36,640 --> 00:25:41,310

YouTube URL: https://www.youtube.com/watch?v=boh4nqPAk50


