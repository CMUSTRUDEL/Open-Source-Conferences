Title: HKG18-201 - LKFT Remote Labs
Publication date: 2019-05-09
Playlist: Linaro Connect Hong Kong 2018
Description: 
	Session ID: HKG18-201
Session Name: HKG18-201 - LKFT Remote Labs
Speaker: Ryan Arnold
Track: Mobile


★ Session Summary ★
Linaro created the Linux Kernel Functional Test (LKFT) framework as a service capable of functional testing the Linux kernel under a full userspace image (e.g., OpenEmbedded and AOSP), on a variety of hardware and selectively reporting the results upstream (or to anyone who wants them) when regressions are detected. The purpose of this presentation is to describe Remote LKFT Labs which is a proposal to extend the reach of Linux kernel functional testing to Linaro member SoCs in a way that can accommodate privacy/confidentiality concerns of members as well as address device complexity concerns of Linaro engineers. This presentation will describe the proposed capabilities, deficiencies, and compelling arguments for adoption of remote LKFT labs by Linaro members.

---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/hkg18/hkg18-201/
Presentation: http://connect.linaro.org.s3.amazonaws.com/hkg18/presentations/hkg18-201.pdf
Video: http://connect.linaro.org.s3.amazonaws.com/hkg18/videos/hkg18-201.mp4
 ---------------------------------------------------
★ Event Details ★
Linaro Connect Hong Kong 2018 (HKG18)
19-23 March 2018 
Regal Airport Hotel Hong Kong

---------------------------------------------------
Keyword: Mobile
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:01,620 --> 00:00:06,580
[Music]

00:00:14,570 --> 00:00:19,740
well welcome everyone to a presentation

00:00:17,040 --> 00:00:21,780
on lkf T remote labs my name is Ryan

00:00:19,740 --> 00:00:24,150
Arnold and the director of core

00:00:21,780 --> 00:00:27,830
technology and tools at Lennar oh we're

00:00:24,150 --> 00:00:34,020
the team that does lava the lonardo lab

00:00:27,830 --> 00:00:36,600
QA systems tool chain and bills and

00:00:34,020 --> 00:00:38,340
baselines so we are the team that put

00:00:36,600 --> 00:00:40,520
together the Linux kernel functional

00:00:38,340 --> 00:00:42,630
test project in support of project sharp

00:00:40,520 --> 00:00:45,090
and I'm going to go through a

00:00:42,630 --> 00:00:47,190
presentation on a remote labs concept

00:00:45,090 --> 00:00:49,170
which will allow you to bring lkf T to

00:00:47,190 --> 00:00:52,500
your own to your own companies in your

00:00:49,170 --> 00:00:55,470
own sites and presenting with chase qi

00:00:52,500 --> 00:00:57,540
he is a QA and an automation test

00:00:55,470 --> 00:00:59,520
engineer at Lennar oh and he put

00:00:57,540 --> 00:01:02,100
together the actual remote labs

00:00:59,520 --> 00:01:03,830
prototype that we're going to show all

00:01:02,100 --> 00:01:06,869
right so first I want to go through

00:01:03,830 --> 00:01:09,060
Linares lkf T and just describe what it

00:01:06,869 --> 00:01:11,220
is for those of you who don't know so

00:01:09,060 --> 00:01:15,000
this is a project to bring Linux kernel

00:01:11,220 --> 00:01:19,320
functional test functional testing to

00:01:15,000 --> 00:01:22,890
arm hardware so we test under full user

00:01:19,320 --> 00:01:25,380
user space open embedded in a OSP user

00:01:22,890 --> 00:01:28,619
spaces this is differentiating from

00:01:25,380 --> 00:01:30,270
kernel CI where kernel CI uses does boot

00:01:28,619 --> 00:01:32,579
testing on minimal images so we're

00:01:30,270 --> 00:01:35,939
actually testing under real Linux and

00:01:32,579 --> 00:01:38,280
Android operating system user spaces we

00:01:35,939 --> 00:01:39,840
tested a variety of hardware and the

00:01:38,280 --> 00:01:41,609
purpose is to identify regressions

00:01:39,840 --> 00:01:45,389
against previous releases or baselines

00:01:41,609 --> 00:01:47,219
so just imagine Greg Koh pushing a

00:01:45,389 --> 00:01:48,420
release candidate we compare that

00:01:47,219 --> 00:01:50,670
release candidate to the previous

00:01:48,420 --> 00:01:52,340
release and that's how we that the

00:01:50,670 --> 00:01:55,469
baseline we use for regression testing

00:01:52,340 --> 00:01:58,950
we report these results upstream so we

00:01:55,469 --> 00:02:00,840
have reports that are curated and and go

00:01:58,950 --> 00:02:02,729
to the stable mailing list the Linux

00:02:00,840 --> 00:02:04,380
kernel stable mailing list and we also

00:02:02,729 --> 00:02:07,319
provide detail results via a dashboard

00:02:04,380 --> 00:02:10,200
which I'll get into in a little bit on

00:02:07,319 --> 00:02:12,810
further slides so the mission of lkf T

00:02:10,200 --> 00:02:15,030
was to identify kernel function test

00:02:12,810 --> 00:02:17,160
regressions this is the sort of the

00:02:15,030 --> 00:02:18,390
cornerstone of the whole project but

00:02:17,160 --> 00:02:20,790
there's a purpose to it and that's to

00:02:18,390 --> 00:02:24,750
shorten the derivative Linux kernel

00:02:20,790 --> 00:02:26,890
release intervals so when when back

00:02:24,750 --> 00:02:29,440
ports are pushed to LTS

00:02:26,890 --> 00:02:33,250
there's a there's time it takes to

00:02:29,440 --> 00:02:35,350
verify that their that that their non

00:02:33,250 --> 00:02:37,270
regression causing and those make their

00:02:35,350 --> 00:02:38,980
way to Android common kernel and then

00:02:37,270 --> 00:02:42,460
those need to make their way into the

00:02:38,980 --> 00:02:45,120
SOC trees and then further on down the

00:02:42,460 --> 00:02:49,750
chain through the carriers and whatnot

00:02:45,120 --> 00:02:52,570
the longer it takes to verify each of

00:02:49,750 --> 00:02:55,300
these stages the more likely it is that

00:02:52,570 --> 00:02:58,030
the that the process breaks down and

00:02:55,300 --> 00:03:01,300
then it's less desirable to take from to

00:02:58,030 --> 00:03:02,890
take back ports our purpose is to try to

00:03:01,300 --> 00:03:04,780
increase the confidence of the upstream

00:03:02,890 --> 00:03:07,989
Linux kernel engineers and the quality

00:03:04,780 --> 00:03:09,910
of their releases so Greg cage told us

00:03:07,989 --> 00:03:12,820
probably about two months ago that we've

00:03:09,910 --> 00:03:15,190
already shortened his LTS RC to release

00:03:12,820 --> 00:03:17,590
process by half a day so as far as he's

00:03:15,190 --> 00:03:20,709
concerned that's a that's a pretty

00:03:17,590 --> 00:03:22,270
monumental improvement already so we

00:03:20,709 --> 00:03:24,130
hope to increase the confidence of the

00:03:22,270 --> 00:03:27,880
downstream adopters so if the phone

00:03:24,130 --> 00:03:31,060
vendors for instance better that deploy

00:03:27,880 --> 00:03:33,100
updated kernels to their devices we want

00:03:31,060 --> 00:03:35,350
them to know that these changes will not

00:03:33,100 --> 00:03:38,260
regress the functionality or introduce

00:03:35,350 --> 00:03:40,930
security problems to their products so

00:03:38,260 --> 00:03:43,239
here's really the goal we're gonna go

00:03:40,930 --> 00:03:45,190
from bug fixes and security fixes those

00:03:43,239 --> 00:03:47,380
make their way to next into mainline

00:03:45,190 --> 00:03:49,660
they're merged into the long-term stable

00:03:47,380 --> 00:03:52,269
trees they those are then merged into

00:03:49,660 --> 00:03:54,070
Android common those are merged into SOC

00:03:52,269 --> 00:03:55,540
trees make their way to the carrier

00:03:54,070 --> 00:03:59,410
where they're downloaded onto the phone

00:03:55,540 --> 00:04:01,269
and we don't have an objective for how

00:03:59,410 --> 00:04:03,910
long that pipeline should take because

00:04:01,269 --> 00:04:08,730
this this process here is sort of a

00:04:03,910 --> 00:04:10,870
guess we can go from here through here

00:04:08,730 --> 00:04:13,090
we can go from here through here

00:04:10,870 --> 00:04:17,169
probably in about 48 hours to three days

00:04:13,090 --> 00:04:18,489
so that's that's that's pretty good so

00:04:17,169 --> 00:04:20,169
we're hoping that we can give downstream

00:04:18,489 --> 00:04:21,960
hardware vendors the confidence to more

00:04:20,169 --> 00:04:24,970
frequently update the Linux kernel and

00:04:21,960 --> 00:04:28,870
the idea is that consumers will benefit

00:04:24,970 --> 00:04:31,240
from bug and security updates so as far

00:04:28,870 --> 00:04:33,180
as the operational capacity of lkf t

00:04:31,240 --> 00:04:36,550
what we're doing today is we're doing

00:04:33,180 --> 00:04:39,310
project sharp execution which is linux

00:04:36,550 --> 00:04:40,090
LTS an android common kernel testing

00:04:39,310 --> 00:04:41,770
functional testing

00:04:40,090 --> 00:04:46,570
and that's in support of Google's

00:04:41,770 --> 00:04:48,160
project trouble we're also doing some

00:04:46,570 --> 00:04:50,919
Linux community upstream testing on

00:04:48,160 --> 00:04:53,919
mainline stable RC oh I have that twice

00:04:50,919 --> 00:04:56,260
but stable RC and stable and Linux next

00:04:53,919 --> 00:04:57,970
trees our capacity to do testing there

00:04:56,260 --> 00:04:59,800
is really limited so that's that's a

00:04:57,970 --> 00:05:01,449
place where we need more help

00:04:59,800 --> 00:05:04,540
basically as many bugs as we can find

00:05:01,449 --> 00:05:06,940
are available to discover there we're

00:05:04,540 --> 00:05:10,990
starting we're also doing some SOC

00:05:06,940 --> 00:05:14,460
testing for LTS LCR and RPK derive trees

00:05:10,990 --> 00:05:16,900
as well and we also have in development

00:05:14,460 --> 00:05:19,570
well one of our goals is to be able to

00:05:16,900 --> 00:05:21,930
use L kft for Linux kernel development

00:05:19,570 --> 00:05:26,190
testing inside of Lonardo so that a

00:05:21,930 --> 00:05:27,940
lonardo kernel engineer can get results

00:05:26,190 --> 00:05:30,160
functional test results for their

00:05:27,940 --> 00:05:33,639
patches that's a long-term goal it's not

00:05:30,160 --> 00:05:36,430
in the immediate horizon and also use LK

00:05:33,639 --> 00:05:39,030
of T for LS k and l sk RT derived trees

00:05:36,430 --> 00:05:41,979
and regression regression testing those

00:05:39,030 --> 00:05:43,750
so ok up T's an interesting concept I

00:05:41,979 --> 00:05:45,280
think most of you probably know about it

00:05:43,750 --> 00:05:47,830
we've had questions already about

00:05:45,280 --> 00:05:49,870
collaborations so how do members get

00:05:47,830 --> 00:05:51,520
involved so the community can be

00:05:49,870 --> 00:05:54,039
involved by consuming the results of

00:05:51,520 --> 00:05:55,840
regression testing and we want to

00:05:54,039 --> 00:05:58,840
improve reporting test coverage and the

00:05:55,840 --> 00:06:02,050
interface based on feedback now as far

00:05:58,840 --> 00:06:03,910
as non-members being involved in L kft I

00:06:02,050 --> 00:06:05,860
know there is some interest but right

00:06:03,910 --> 00:06:08,950
now L kft is implemented as a privilege

00:06:05,860 --> 00:06:11,289
of lonardo membership and any any

00:06:08,950 --> 00:06:13,900
hardware that we integrate into l KF T

00:06:11,289 --> 00:06:16,470
is at our own discretion now members

00:06:13,900 --> 00:06:19,150
members can become involved in l kft

00:06:16,470 --> 00:06:21,639
while we can administer some of your

00:06:19,150 --> 00:06:23,530
devices within our own labs we really

00:06:21,639 --> 00:06:25,930
reserve the right to choose which

00:06:23,530 --> 00:06:29,919
devices those are based upon our

00:06:25,930 --> 00:06:32,349
immediate goals we can also support

00:06:29,919 --> 00:06:35,020
member engineers helping with the vise

00:06:32,349 --> 00:06:36,430
specific triage so if some of our

00:06:35,020 --> 00:06:39,250
landings teams for instance have their

00:06:36,430 --> 00:06:41,740
devices in lk ft and that landing team

00:06:39,250 --> 00:06:43,960
will actually do the triage themselves

00:06:41,740 --> 00:06:45,760
so they'll be involved in the process

00:06:43,960 --> 00:06:47,740
and it's not just curation by leonora

00:06:45,760 --> 00:06:50,770
engineers its curation by member

00:06:47,740 --> 00:06:53,030
engineers but many member devices are a

00:06:50,770 --> 00:06:56,050
candidate for the remote labs concept

00:06:53,030 --> 00:06:58,850
this this remote labs concept pushes

00:06:56,050 --> 00:07:01,730
pushes the kernel maintenance pushes the

00:06:58,850 --> 00:07:03,770
triage and pushes the the hardware

00:07:01,730 --> 00:07:06,770
automation integration to the member

00:07:03,770 --> 00:07:09,500
company so that's what the elk aft

00:07:06,770 --> 00:07:11,630
remote labs concept is so this is a

00:07:09,500 --> 00:07:13,850
method to extend the reach of functional

00:07:11,630 --> 00:07:17,180
testing to the literal members and their

00:07:13,850 --> 00:07:19,040
SOC s and we can do it in a way that

00:07:17,180 --> 00:07:21,110
accommodates the privacy and

00:07:19,040 --> 00:07:22,850
confidentiality concerns that members

00:07:21,110 --> 00:07:24,200
have for their hardware because I know

00:07:22,850 --> 00:07:29,030
that when you guys come out with new

00:07:24,200 --> 00:07:31,580
hardware you want to you want to start

00:07:29,030 --> 00:07:33,140
testing that as soon as you can and you

00:07:31,580 --> 00:07:34,430
need to test that Hardware before it's

00:07:33,140 --> 00:07:37,130
publicly available and sometimes

00:07:34,430 --> 00:07:40,280
publicly announced elk aft remote labs

00:07:37,130 --> 00:07:41,900
also addresses the device complexity

00:07:40,280 --> 00:07:44,030
concerns that our engineers have with

00:07:41,900 --> 00:07:45,740
inland ro and it respects our staffs

00:07:44,030 --> 00:07:49,310
constraints so there are a number of

00:07:45,740 --> 00:07:51,860
decisions that hardware manufacturers

00:07:49,310 --> 00:07:54,410
make when they design a board and some

00:07:51,860 --> 00:07:57,050
of those decisions can directly impact

00:07:54,410 --> 00:07:58,550
very heavily directly impact the amount

00:07:57,050 --> 00:08:00,980
of time it takes to integrate the board

00:07:58,550 --> 00:08:02,600
into ELQ aft and execute the board and

00:08:00,980 --> 00:08:06,650
we have to be careful with inland ro

00:08:02,600 --> 00:08:09,650
that that we respect our staffs time and

00:08:06,650 --> 00:08:13,010
so this elk aft remote labs concept

00:08:09,650 --> 00:08:15,650
helps us bring remote bring elk aft to

00:08:13,010 --> 00:08:17,570
you while also allowing the Narwhal

00:08:15,650 --> 00:08:20,540
engineers to continue to focus on the

00:08:17,570 --> 00:08:21,440
primary mission of elk aft so we're

00:08:20,540 --> 00:08:23,480
going to go over the proposed

00:08:21,440 --> 00:08:25,310
capabilities deficiencies and come some

00:08:23,480 --> 00:08:29,030
compelling arguments for adoption of the

00:08:25,310 --> 00:08:33,350
remote labs by leonora members so here's

00:08:29,030 --> 00:08:35,360
an elk aft overview it's it seems pretty

00:08:33,350 --> 00:08:37,130
complex it

00:08:35,360 --> 00:08:40,100
it's a federation elk aft is a

00:08:37,130 --> 00:08:43,460
Federation of tools that are loosely

00:08:40,100 --> 00:08:46,700
coupled utilizing existing technologies

00:08:43,460 --> 00:08:49,190
like get Jenkins Lennar lava and our QA

00:08:46,700 --> 00:08:50,360
dashboard called squad so it's a

00:08:49,190 --> 00:08:51,800
Federation of tools and they're tight

00:08:50,360 --> 00:08:54,320
they're loosely coupled and we've

00:08:51,800 --> 00:08:57,040
coupled them together to come up with

00:08:54,320 --> 00:09:00,440
this system so very briefly we we pull

00:08:57,040 --> 00:09:01,580
we trigger on get commits our Jenkins

00:09:00,440 --> 00:09:04,940
server which is our continuous

00:09:01,580 --> 00:09:06,050
integration server it takes those get

00:09:04,940 --> 00:09:08,209
commits

00:09:06,050 --> 00:09:11,869
and it uses system image definitions and

00:09:08,209 --> 00:09:13,910
it creates file system images put some

00:09:11,869 --> 00:09:17,660
on our snapshot server then dispatches

00:09:13,910 --> 00:09:19,369
through the QA server the job tells QA

00:09:17,660 --> 00:09:21,679
the QA server that there's been a git

00:09:19,369 --> 00:09:24,529
commit we need to kick off a job that

00:09:21,679 --> 00:09:27,199
tells lava the lava system hey we've got

00:09:24,529 --> 00:09:29,509
a job for you here's the here's the test

00:09:27,199 --> 00:09:30,939
definition the lava surfer fetches the

00:09:29,509 --> 00:09:33,739
images for each of the hardware

00:09:30,939 --> 00:09:36,290
platforms so high key device here may be

00:09:33,739 --> 00:09:39,259
a phone here and then it tells the

00:09:36,290 --> 00:09:41,059
dispatcher execute these tests when the

00:09:39,259 --> 00:09:42,970
tests are completed the execution is

00:09:41,059 --> 00:09:46,339
completed the results go to the database

00:09:42,970 --> 00:09:48,910
the Lava dashboard stores the results of

00:09:46,339 --> 00:09:51,769
execution in the test results and

00:09:48,910 --> 00:09:53,929
lonardo squad pulls from the Lawton the

00:09:51,769 --> 00:09:56,989
lava database pulls the test results

00:09:53,929 --> 00:10:00,049
sends out an email report and post the

00:09:56,989 --> 00:10:05,959
results in our results UI so this whole

00:10:00,049 --> 00:10:07,790
pipeline are our goal that we have well

00:10:05,959 --> 00:10:10,519
the stated goal we have is 48 hours

00:10:07,790 --> 00:10:14,149
between the commits and the results and

00:10:10,519 --> 00:10:15,920
we've been hitting that goal for three

00:10:14,149 --> 00:10:17,420
months now I think so we've successfully

00:10:15,920 --> 00:10:20,720
been doing this about once a week now

00:10:17,420 --> 00:10:23,629
for the Linux kernel long-term stable

00:10:20,720 --> 00:10:27,649
project so that's a brief overview we'll

00:10:23,629 --> 00:10:29,720
go into the details in a little bit well

00:10:27,649 --> 00:10:32,449
we'll go into them right now so I want

00:10:29,720 --> 00:10:35,360
to briefly go through the each of these

00:10:32,449 --> 00:10:38,749
components some of these slides are a

00:10:35,360 --> 00:10:40,759
bit bit wordy but I won't go through

00:10:38,749 --> 00:10:42,319
them completely but here's here's how

00:10:40,759 --> 00:10:44,990
our Jenkins works like I said we take

00:10:42,319 --> 00:10:47,149
our AOSP image or openembedded image we

00:10:44,990 --> 00:10:50,629
add our Linux kernel get trees and we

00:10:47,149 --> 00:10:53,089
create these system images this is ready

00:10:50,629 --> 00:10:54,499
to be flashed to a device and we we

00:10:53,089 --> 00:10:58,160
build these images for each of the

00:10:54,499 --> 00:11:00,439
hardware platforms that we support job

00:10:58,160 --> 00:11:04,100
scheduling this is actually done when

00:11:00,439 --> 00:11:05,839
Jenkins detects a change and informs the

00:11:04,100 --> 00:11:08,749
squad instance that the new system image

00:11:05,839 --> 00:11:11,089
is available for testing so squads the

00:11:08,749 --> 00:11:12,649
test Authority or it's the if the

00:11:11,089 --> 00:11:14,839
authority that schedules test jobs

00:11:12,649 --> 00:11:16,669
so you'll see Jenkins creates the image

00:11:14,839 --> 00:11:19,110
sends it to squad squad sends the image

00:11:16,669 --> 00:11:21,570
to lava and the reason it's done

00:11:19,110 --> 00:11:23,220
that way is that squad is informed when

00:11:21,570 --> 00:11:25,440
there is a job and squads than the

00:11:23,220 --> 00:11:29,160
authority to dispatch it and to collect

00:11:25,440 --> 00:11:32,160
the results test execution as I said

00:11:29,160 --> 00:11:36,450
before text test execution lava polls

00:11:32,160 --> 00:11:38,790
the image from the server sends the

00:11:36,450 --> 00:11:40,680
image into the devices where the testing

00:11:38,790 --> 00:11:43,050
happens collects the data into the

00:11:40,680 --> 00:11:44,970
database and provides the output into

00:11:43,050 --> 00:11:47,130
the lava UI as well

00:11:44,970 --> 00:11:50,660
notice the lot of UI is secured so this

00:11:47,130 --> 00:11:53,730
will be important in a few minutes

00:11:50,660 --> 00:11:56,190
reporting reporting this squad is not

00:11:53,730 --> 00:11:59,250
only the authority that dispatches the

00:11:56,190 --> 00:12:01,769
jobs but squad is also the reporting

00:11:59,250 --> 00:12:03,839
mechanism that we use so it pulls that

00:12:01,769 --> 00:12:06,630
the information from the lava database

00:12:03,839 --> 00:12:10,110
generates the email reports which can be

00:12:06,630 --> 00:12:13,470
customized based upon each project type

00:12:10,110 --> 00:12:16,740
and also can store the results or dust

00:12:13,470 --> 00:12:19,230
or the results in our website this is

00:12:16,740 --> 00:12:22,279
also secure as well so we have we can

00:12:19,230 --> 00:12:25,350
have specific hidden projects based on

00:12:22,279 --> 00:12:28,470
certain privacy concerns so for instance

00:12:25,350 --> 00:12:30,510
if you've had a platform that you wanted

00:12:28,470 --> 00:12:32,699
to keep secure we could have a special

00:12:30,510 --> 00:12:34,260
project just for your platform and that

00:12:32,699 --> 00:12:37,829
could be kept secure under access

00:12:34,260 --> 00:12:39,779
control and finally we also have a way

00:12:37,829 --> 00:12:41,220
of telling our org this is for Colonel

00:12:39,779 --> 00:12:43,680
engineers business partners and managers

00:12:41,220 --> 00:12:46,140
this is a website this websites a work

00:12:43,680 --> 00:12:48,240
in progress I'm not going to show it

00:12:46,140 --> 00:12:51,779
here because I don't want to put any

00:12:48,240 --> 00:12:54,810
pressure on Dan but the purpose of this

00:12:51,779 --> 00:12:57,480
is to give information on the current

00:12:54,810 --> 00:13:00,089
executing builds based upon the latest

00:12:57,480 --> 00:13:01,589
commits to a certain number of trees so

00:13:00,089 --> 00:13:04,290
this should be fully operational I

00:13:01,589 --> 00:13:06,540
suppose within a few months and that's

00:13:04,290 --> 00:13:08,339
we collect the information from lonardo

00:13:06,540 --> 00:13:12,870
jenkins and from the lava database and

00:13:08,339 --> 00:13:14,880
represent it in that in that website and

00:13:12,870 --> 00:13:16,740
then finally a lot of the work that

00:13:14,880 --> 00:13:19,260
lonardo does is actually in the curation

00:13:16,740 --> 00:13:20,970
process triaging going through the

00:13:19,260 --> 00:13:24,540
results and trying to figure out okay

00:13:20,970 --> 00:13:26,610
what really happened was this regression

00:13:24,540 --> 00:13:28,600
caused by an infrastructure failure was

00:13:26,610 --> 00:13:32,800
it a colonel or test suite bug

00:13:28,600 --> 00:13:34,899
and where do we send the results so the

00:13:32,800 --> 00:13:38,019
default for the LTS project as we send

00:13:34,899 --> 00:13:40,300
the results to this stable mailing list

00:13:38,019 --> 00:13:42,220
for Android common kernel we send them

00:13:40,300 --> 00:13:44,529
to an internal mailing list where

00:13:42,220 --> 00:13:47,139
they're curated by the the folks at in L

00:13:44,529 --> 00:13:50,610
and G for some of our landing teams we

00:13:47,139 --> 00:13:50,610
send them to the landing teams directly

00:13:52,139 --> 00:13:56,889
so that the purpose of the curation like

00:13:54,490 --> 00:13:59,040
I said is to differentiate bugs identify

00:13:56,889 --> 00:14:03,339
kernel bugs identify test suite bugs and

00:13:59,040 --> 00:14:05,130
send out those reports so within Linares

00:14:03,339 --> 00:14:07,810
l kft lab we have a number of devices

00:14:05,130 --> 00:14:10,269
what we try to do is have a bit of

00:14:07,810 --> 00:14:13,630
redundancy so we're looking for some

00:14:10,269 --> 00:14:15,970
coverage as far as a or 64 we want to

00:14:13,630 --> 00:14:19,089
boards that are 64 bit we want to boards

00:14:15,970 --> 00:14:22,750
that are 32 bit and we want some backups

00:14:19,089 --> 00:14:24,370
we want QM you want x86 but we do have

00:14:22,750 --> 00:14:26,949
to be careful as far as what we bring

00:14:24,370 --> 00:14:28,209
into the lab so this is the I won't go

00:14:26,949 --> 00:14:30,910
through all these but this is the slide

00:14:28,209 --> 00:14:32,920
which identifies the selection criteria

00:14:30,910 --> 00:14:36,189
that we use within Lennar o to determine

00:14:32,920 --> 00:14:37,930
what goes into our lab some devices have

00:14:36,189 --> 00:14:40,810
been extremely expensive to integrate

00:14:37,930 --> 00:14:43,149
some devices have been relatively easy

00:14:40,810 --> 00:14:46,269
to integrate we learn - we learned a

00:14:43,149 --> 00:14:47,740
hard lesson with this so in the future

00:14:46,269 --> 00:14:49,839
these are the criteria we use to

00:14:47,740 --> 00:14:54,699
actually determine what goes into into

00:14:49,839 --> 00:14:57,730
our lab point worth noting not all the

00:14:54,699 --> 00:15:00,220
devices in our lab are actually actually

00:14:57,730 --> 00:15:02,019
satisfy these requirements because there

00:15:00,220 --> 00:15:03,490
are very few devices actually available

00:15:02,019 --> 00:15:06,910
that can satisfy all of these

00:15:03,490 --> 00:15:09,910
requirements so why is such strict

00:15:06,910 --> 00:15:12,370
selection criteria basically I'm not

00:15:09,910 --> 00:15:14,620
going to go through all of these but the

00:15:12,370 --> 00:15:17,259
real concern is that every one of these

00:15:14,620 --> 00:15:19,810
problems listed introduces significant

00:15:17,259 --> 00:15:22,060
amounts of engineering effort both in

00:15:19,810 --> 00:15:25,180
enablement and deployment as well as

00:15:22,060 --> 00:15:28,120
ongoing effort the more flaky the device

00:15:25,180 --> 00:15:31,089
is the more unique the device is if the

00:15:28,120 --> 00:15:32,949
device has problems with thermal control

00:15:31,089 --> 00:15:35,019
all of these increase our maintenance

00:15:32,949 --> 00:15:37,930
efforts we don't want to have to go into

00:15:35,019 --> 00:15:41,110
our lab pull devices out of racks reboot

00:15:37,930 --> 00:15:42,279
devices reflash devices so those those

00:15:41,110 --> 00:15:47,889
selection criteria

00:15:42,279 --> 00:15:49,839
that we use directly directly influence

00:15:47,889 --> 00:15:53,379
whether we spend a lot of time doing

00:15:49,839 --> 00:15:54,970
Hardware lab maintenance so I won't like

00:15:53,379 --> 00:15:56,170
I said I won't go through it but this is

00:15:54,970 --> 00:15:57,360
just here so you guys can review this

00:15:56,170 --> 00:16:03,550
later

00:15:57,360 --> 00:16:06,249
so not only are we controlling our

00:16:03,550 --> 00:16:09,550
engineering effort costs with the

00:16:06,249 --> 00:16:11,259
hardware we're also looking to expand

00:16:09,550 --> 00:16:14,230
out kft so that's another reason why we

00:16:11,259 --> 00:16:15,670
have to be careful we know that our LTS

00:16:14,230 --> 00:16:17,079
maintained errs and our in our business

00:16:15,670 --> 00:16:18,699
partners and members they won't increase

00:16:17,079 --> 00:16:20,589
test coverage they won't increase

00:16:18,699 --> 00:16:22,209
increase tree coverage additional

00:16:20,589 --> 00:16:24,939
hardware and improve tools and reporting

00:16:22,209 --> 00:16:27,879
so that's what Lonardo wants to focus on

00:16:24,939 --> 00:16:32,499
we can't just accept everyone's boards

00:16:27,879 --> 00:16:34,329
within lkf t so we need to protect this

00:16:32,499 --> 00:16:35,620
additional future investment and we need

00:16:34,329 --> 00:16:38,019
to be able to focus our staff on this

00:16:35,620 --> 00:16:39,279
future investment so that's what we're

00:16:38,019 --> 00:16:41,889
talking about here with the constraining

00:16:39,279 --> 00:16:43,329
engineering costs so when we look at

00:16:41,889 --> 00:16:45,009
adding a new board we have to decide

00:16:43,329 --> 00:16:48,100
whether this devices can have a positive

00:16:45,009 --> 00:16:51,699
impact that exceeds the expense of

00:16:48,100 --> 00:16:53,500
maintaining it in-house like I said some

00:16:51,699 --> 00:16:55,540
of these devices and kernel trees are

00:16:53,500 --> 00:16:57,550
easily implemented others are

00:16:55,540 --> 00:17:00,100
significantly more expensive so for

00:16:57,550 --> 00:17:03,160
instance if your hardware does not have

00:17:00,100 --> 00:17:06,459
upstream kernel support what's going to

00:17:03,160 --> 00:17:11,530
happen is when we talked about when we

00:17:06,459 --> 00:17:13,949
talked about this chain this chain this

00:17:11,530 --> 00:17:17,490
merge cost can be incredibly expensive

00:17:13,949 --> 00:17:20,350
so if these merge if every merge breaks

00:17:17,490 --> 00:17:26,620
that introduces the complexity and the

00:17:20,350 --> 00:17:28,360
cost of actually triaging that device so

00:17:26,620 --> 00:17:32,260
we we also recognize that there is value

00:17:28,360 --> 00:17:34,149
in this framework for members and so

00:17:32,260 --> 00:17:35,740
even if we can't execute it we know that

00:17:34,149 --> 00:17:38,140
this is very this will be very useful to

00:17:35,740 --> 00:17:39,490
you and we also realize that some

00:17:38,140 --> 00:17:41,760
hardware just isn't yet publicly

00:17:39,490 --> 00:17:44,620
available but early testing is desirable

00:17:41,760 --> 00:17:46,120
so this is a couple well more than a

00:17:44,620 --> 00:17:49,750
couple this was quite a few reasons why

00:17:46,120 --> 00:17:52,120
we believe that members can benefit from

00:17:49,750 --> 00:17:53,260
the remote labs so in particular some

00:17:52,120 --> 00:17:54,310
that I find interesting are the easy

00:17:53,260 --> 00:17:56,980
access and test file

00:17:54,310 --> 00:17:58,060
support for hard to rescue targets so we

00:17:56,980 --> 00:18:00,880
know that there are some targets

00:17:58,060 --> 00:18:03,100
especially the small form-factor IOT

00:18:00,880 --> 00:18:05,080
based devices that when they're bricked

00:18:03,100 --> 00:18:06,790
they're more difficult to rescue they

00:18:05,080 --> 00:18:10,330
might require a JTAG interface for

00:18:06,790 --> 00:18:12,220
flashing flashing image on them it's

00:18:10,330 --> 00:18:14,260
easier to maintain that device on a

00:18:12,220 --> 00:18:17,520
desktop at times than it is to maintain

00:18:14,260 --> 00:18:20,380
it in Iraq buried in a lab somewhere and

00:18:17,520 --> 00:18:27,100
lkt remote labs will actually allow you

00:18:20,380 --> 00:18:28,810
to run the full validation system fully

00:18:27,100 --> 00:18:30,910
automated against a device that's on

00:18:28,810 --> 00:18:32,380
your desktop

00:18:30,910 --> 00:18:33,940
this will allow faster bring up times

00:18:32,380 --> 00:18:35,530
and staging a new hardware you don't

00:18:33,940 --> 00:18:38,170
need to wait for Lennar all engineers to

00:18:35,530 --> 00:18:42,900
get your device into lava and get your

00:18:38,170 --> 00:18:45,640
device running in lkf t this also allows

00:18:42,900 --> 00:18:47,830
proprietary firmware it allows you to

00:18:45,640 --> 00:18:50,430
actually test it before you make your

00:18:47,830 --> 00:18:53,050
changes so what you can do is you can

00:18:50,430 --> 00:18:55,140
have your own lqf t remote lab do your

00:18:53,050 --> 00:18:57,280
firmware test verify that the latest of

00:18:55,140 --> 00:19:00,910
the latest colonel doesn't actually

00:18:57,280 --> 00:19:02,980
break with your your firmware the big

00:19:00,910 --> 00:19:05,530
one for me is this a lot of integration

00:19:02,980 --> 00:19:08,130
that can be done by a member by members

00:19:05,530 --> 00:19:10,300
by hardware experts within the company

00:19:08,130 --> 00:19:13,210
believe it or not it's actually easier

00:19:10,300 --> 00:19:14,530
it's actually less costly in the long

00:19:13,210 --> 00:19:16,390
run for you guys to have your own

00:19:14,530 --> 00:19:18,430
engineers do the lot of integration than

00:19:16,390 --> 00:19:21,390
for our engineers when we're looking at

00:19:18,430 --> 00:19:23,250
time to execute access to information

00:19:21,390 --> 00:19:25,660
particularly access to information

00:19:23,250 --> 00:19:32,680
access to secondary peripherals and

00:19:25,660 --> 00:19:34,870
secondary tooling and really this this

00:19:32,680 --> 00:19:38,980
pre-release is probably very beneficial

00:19:34,870 --> 00:19:40,780
to you guys as well so I'm pretty

00:19:38,980 --> 00:19:42,790
excited that you guys can actually do

00:19:40,780 --> 00:19:46,080
functional testing on pre-release

00:19:42,790 --> 00:19:48,550
hardware with this remote labs concept

00:19:46,080 --> 00:19:50,110
so with regard to remote labs there is

00:19:48,550 --> 00:19:54,310
this concern about safeguarding member

00:19:50,110 --> 00:19:56,860
privacy so as I talked about before we

00:19:54,310 --> 00:19:58,630
know that not all your hardware that you

00:19:56,860 --> 00:20:01,270
want to test can be publicly available

00:19:58,630 --> 00:20:03,250
or or have information about it

00:20:01,270 --> 00:20:05,950
available as early as you want to test

00:20:03,250 --> 00:20:07,780
it so as I talked about lkf T is a

00:20:05,950 --> 00:20:08,500
Federation of tools and all of these

00:20:07,780 --> 00:20:11,500
tools

00:20:08,500 --> 00:20:14,760
privacy in mind so with remote labs you

00:20:11,500 --> 00:20:17,980
can maintain get get trees in private

00:20:14,760 --> 00:20:20,890
all device availability and lava can be

00:20:17,980 --> 00:20:22,300
maintained under access control no one

00:20:20,890 --> 00:20:24,580
needs to know that you have devices

00:20:22,300 --> 00:20:27,370
available job dispatch and visibility

00:20:24,580 --> 00:20:29,230
can be under access control test results

00:20:27,370 --> 00:20:30,850
reporting or under ask to some access

00:20:29,230 --> 00:20:35,560
control and bugs are under access

00:20:30,850 --> 00:20:36,820
control so just briefly I wanted to just

00:20:35,560 --> 00:20:39,700
chat a little bit about the member

00:20:36,820 --> 00:20:41,110
kernel Linux kernel so2 sigue trees so

00:20:39,700 --> 00:20:42,790
what's interesting about this is when we

00:20:41,110 --> 00:20:45,340
talked about the merge from Android

00:20:42,790 --> 00:20:46,860
common kernel for instance to the SOC

00:20:45,340 --> 00:20:49,240
base tree

00:20:46,860 --> 00:20:51,160
you guys can easily maintain your own

00:20:49,240 --> 00:20:53,080
non upstream SOC patch sets and any

00:20:51,160 --> 00:20:54,850
binary blobs that's the part we haven't

00:20:53,080 --> 00:20:56,290
quite figured out yet like we haven't

00:20:54,850 --> 00:20:59,110
done any testing because we don't need

00:20:56,290 --> 00:21:01,200
to do any testing with that but I don't

00:20:59,110 --> 00:21:03,940
believe that that's too terribly complex

00:21:01,200 --> 00:21:05,560
alright so I want to talk about the

00:21:03,940 --> 00:21:08,350
different hosting methods for lkf t

00:21:05,560 --> 00:21:10,330
remote labs but before that I want to

00:21:08,350 --> 00:21:13,840
bring in chase to actually kick off a

00:21:10,330 --> 00:21:16,090
demo and this is important because it

00:21:13,840 --> 00:21:17,530
the demo takes a little bit of time so

00:21:16,090 --> 00:21:18,970
he's gonna kick off the demo and

00:21:17,530 --> 00:21:22,090
describe what the demo is gonna do I'm

00:21:18,970 --> 00:21:23,380
gonna go through the hosting the hosting

00:21:22,090 --> 00:21:24,940
options and then we'll come back to the

00:21:23,380 --> 00:21:49,740
demo later all right chase you wanna

00:21:24,940 --> 00:21:54,430
come up here cure yourself on the cloud

00:21:49,740 --> 00:21:57,130
genesis ruining this laptop I'm just

00:21:54,430 --> 00:21:59,020
going to trigger tests to escape the

00:21:57,130 --> 00:22:02,320
building part and to run testing

00:21:59,020 --> 00:22:06,190
directly because it's worth pointing out

00:22:02,320 --> 00:22:08,410
that this this Jenkins instance is not

00:22:06,190 --> 00:22:10,750
the Lennar LCI dot Lenoir Jenkins

00:22:08,410 --> 00:22:13,300
instance this lob instance is not the

00:22:10,750 --> 00:22:15,820
Gnarls lava instance and but the QA

00:22:13,300 --> 00:22:18,840
reports instance is when our O's QA

00:22:15,820 --> 00:22:18,840
reports yeah

00:22:19,160 --> 00:22:24,770
this new job normally it should be

00:22:21,410 --> 00:22:27,110
triggered automatically newcomb each and

00:22:24,770 --> 00:22:33,130
now with only running testing so I had

00:22:27,110 --> 00:22:33,130
triggered manually and yeah that's right

00:22:38,450 --> 00:22:46,760
I'm not going to show us this job this

00:22:43,430 --> 00:22:50,630
job running on this hike eighty minutes

00:22:46,760 --> 00:22:56,330
the llama face on the couch and llama

00:22:50,630 --> 00:22:59,060
slave is the laptop and so I'm going to

00:22:56,330 --> 00:23:04,330
show the step that said test you're

00:22:59,060 --> 00:23:04,330
going to run a test case to around the

00:23:05,830 --> 00:23:11,750
so we should see desam so within about

00:23:09,950 --> 00:23:17,180
six or seven minutes we should see some

00:23:11,750 --> 00:23:19,190
LEDs blinking okay everything is working

00:23:17,180 --> 00:23:23,360
we should see some LEDs this is just a

00:23:19,190 --> 00:23:25,520
demonstration of a job obviously Lynch

00:23:23,360 --> 00:23:28,070
Colonel functional test isn't blinking

00:23:25,520 --> 00:23:33,160
lights but in six or seven minutes then

00:23:28,070 --> 00:23:33,160
we should see the LEDs start to blink

00:23:35,380 --> 00:23:47,540
after the test job finished worse it

00:23:39,410 --> 00:23:51,140
there is out speed yep so we'll look

00:23:47,540 --> 00:23:53,000
back in a few minutes and once once the

00:23:51,140 --> 00:23:54,230
lights start to blink will will come

00:23:53,000 --> 00:23:56,950
back to this and actually look at the

00:23:54,230 --> 00:23:56,950
results okay

00:24:01,840 --> 00:24:08,020
all right so we have three hosting

00:24:03,880 --> 00:24:10,900
options for remote labs one is partially

00:24:08,020 --> 00:24:13,690
hosting a partial hosting once fully

00:24:10,900 --> 00:24:17,230
hosted and we have ultra-secure so I'll

00:24:13,690 --> 00:24:22,330
go through these each of these briefly

00:24:17,230 --> 00:24:26,200
so the partially hosted concept is based

00:24:22,330 --> 00:24:29,050
around the idea that one our Lonardo

00:24:26,200 --> 00:24:34,120
slava master manages The Dispatch

00:24:29,050 --> 00:24:36,880
devices within a remote lab so this

00:24:34,120 --> 00:24:40,150
means that Leonora lava is connected to

00:24:36,880 --> 00:24:44,050
a member lava dispatcher via a tunnel

00:24:40,150 --> 00:24:47,140
secure tunnel we we send images to the

00:24:44,050 --> 00:24:49,870
member lava dispatcher and that's sent

00:24:47,140 --> 00:24:51,520
to member hardware and then the results

00:24:49,870 --> 00:24:54,190
make their way back to lava master and

00:24:51,520 --> 00:24:56,970
those results then go to our QA reports

00:24:54,190 --> 00:25:00,790
obviously this will work for some

00:24:56,970 --> 00:25:03,460
membership membership hardware this

00:25:00,790 --> 00:25:06,400
might not work for others it might not

00:25:03,460 --> 00:25:09,900
work for systems that require strict

00:25:06,400 --> 00:25:13,270
network security or that have strict

00:25:09,900 --> 00:25:16,330
strict rules as far as what devices can

00:25:13,270 --> 00:25:19,360
access what systems outside of outside

00:25:16,330 --> 00:25:23,950
of their labs then we have the fully

00:25:19,360 --> 00:25:28,750
hosted option which is where the get

00:25:23,950 --> 00:25:30,670
tree is available to Lonardo the the

00:25:28,750 --> 00:25:32,770
lava master is actually maintained

00:25:30,670 --> 00:25:34,570
within the member company the

00:25:32,770 --> 00:25:39,040
dispatchers within the member company

00:25:34,570 --> 00:25:41,380
you have your own member URL where

00:25:39,040 --> 00:25:43,720
internal to your intranet where lavas

00:25:41,380 --> 00:25:46,540
reporting results the database resides

00:25:43,720 --> 00:25:50,230
within your company as well there is a

00:25:46,540 --> 00:25:52,960
tunnel or there is a tunnel between

00:25:50,230 --> 00:25:55,900
blown RL lava master and lonardo squad

00:25:52,960 --> 00:25:57,970
or QA reports but the primary difference

00:25:55,900 --> 00:26:02,650
here is that the master is within within

00:25:57,970 --> 00:26:06,310
your labs and then we have the ultra

00:26:02,650 --> 00:26:08,590
secure model this is where the member

00:26:06,310 --> 00:26:12,340
maintains the get tree behind the

00:26:08,590 --> 00:26:13,539
firewall if you have new hardware where

00:26:12,340 --> 00:26:15,789
you where you

00:26:13,539 --> 00:26:17,889
yet released the Linux kernel for this

00:26:15,789 --> 00:26:19,809
this is the model you'll need to use so

00:26:17,889 --> 00:26:23,139
the get tree is within your company you

00:26:19,809 --> 00:26:25,090
have your own build server you have your

00:26:23,139 --> 00:26:28,059
own dispatcher your own member master

00:26:25,090 --> 00:26:30,100
your own database everything that the

00:26:28,059 --> 00:26:34,539
only thing that you share with Lennar o

00:26:30,100 --> 00:26:37,479
is the results information that you push

00:26:34,539 --> 00:26:39,460
to squad and what that gets you is that

00:26:37,479 --> 00:26:42,519
gets you reporting email reporting back

00:26:39,460 --> 00:26:50,200
into your company and gets you a private

00:26:42,519 --> 00:26:53,590
secure dashboard of your results may

00:26:50,200 --> 00:26:56,139
interrupt you yeah actually before we

00:26:53,590 --> 00:26:58,779
asked me to kick the beard and I did I

00:26:56,139 --> 00:27:02,019
tricked a one beer two before that okay

00:26:58,779 --> 00:27:08,849
to save time the other thing is that mr.

00:27:02,019 --> 00:27:08,849
right and the next job is to waiting the

00:27:13,150 --> 00:27:22,300
so we we got two jobs oh it's our

00:27:18,760 --> 00:27:25,000
completing so sometime it's the one

00:27:22,300 --> 00:27:32,230
minute timeout so a minutes will see it

00:27:25,000 --> 00:27:34,120
to the mailbox and for the report so now

00:27:32,230 --> 00:27:36,960
we should see another job yeah I know

00:27:34,120 --> 00:27:39,550
this is the job this is the job okay

00:27:36,960 --> 00:27:40,750
okay so this should start up again and

00:27:39,550 --> 00:27:43,680
we should see the lights go again right

00:27:40,750 --> 00:27:43,680
okay two beers

00:27:48,720 --> 00:27:53,679
so this is this is actually the model

00:27:51,130 --> 00:27:56,070
that Chase is using for the demo like I

00:27:53,679 --> 00:27:58,600
said he has his own lava his own Jenkins

00:27:56,070 --> 00:28:00,130
I believe he's just pulling from a

00:27:58,600 --> 00:28:02,440
publicly accessible get tree but that's

00:28:00,130 --> 00:28:05,770
not that's not terribly terribly

00:28:02,440 --> 00:28:08,170
complicated and then he's reporting the

00:28:05,770 --> 00:28:11,710
information back to one ro squad

00:28:08,170 --> 00:28:13,480
instance so like I said he's running

00:28:11,710 --> 00:28:16,870
under the ultra secure model this is

00:28:13,480 --> 00:28:19,030
running on the high key 6220 he's got

00:28:16,870 --> 00:28:20,110
his ThinkPad is his love a mass there

00:28:19,030 --> 00:28:23,110
his lava dispatcher

00:28:20,110 --> 00:28:25,600
so his lava master is in the cloud his

00:28:23,110 --> 00:28:29,679
dispatcher is a laptop and he's

00:28:25,600 --> 00:28:33,309
connected to devices via USB directly to

00:28:29,679 --> 00:28:36,580
his desktop so we can have remote labs

00:28:33,309 --> 00:28:38,920
as desktop sets setups like this or we

00:28:36,580 --> 00:28:43,090
can have remote labs as ful fully

00:28:38,920 --> 00:28:46,840
rack-mounted lava setups within within

00:28:43,090 --> 00:28:49,630
your own company there is a little bit

00:28:46,840 --> 00:28:52,230
more complexity here because of the

00:28:49,630 --> 00:28:56,220
requirement of being able to power cycle

00:28:52,230 --> 00:28:58,960
we do have to have a power cycle relay

00:28:56,220 --> 00:29:01,480
we have to have a Smart Hub as well

00:28:58,960 --> 00:29:08,320
where we can control the hub it's a

00:29:01,480 --> 00:29:11,040
Smart Hub and both both the power and

00:29:08,320 --> 00:29:11,040
the recipe

00:29:12,530 --> 00:29:21,620
this is a meeting set up we also have

00:29:14,809 --> 00:29:24,170
the PDU and okay so yeah so we'll be

00:29:21,620 --> 00:29:27,260
doing this a demo Friday with a PD you

00:29:24,170 --> 00:29:32,210
set up as well so this is a powered USB

00:29:27,260 --> 00:29:35,630
hub and he's doing all the Power OTG

00:29:32,210 --> 00:29:39,980
on/off reboot control with the Raspberry

00:29:35,630 --> 00:29:41,750
Pi 3 relay module and like I said the

00:29:39,980 --> 00:29:46,730
lava master is running on the cloud and

00:29:41,750 --> 00:29:49,460
QA reports is in the is running from

00:29:46,730 --> 00:29:50,450
Linares QA reports so when you look at

00:29:49,460 --> 00:29:52,460
this later you can go ahead and hit

00:29:50,450 --> 00:29:53,630
these links and you can see the results

00:29:52,460 --> 00:29:58,940
of the demo that he's actually running

00:29:53,630 --> 00:30:00,500
right now so I'll skip this slide

00:29:58,940 --> 00:30:04,010
because we'll go over it once the demo

00:30:00,500 --> 00:30:05,929
is actually finished so not only as

00:30:04,010 --> 00:30:08,000
chase set this up but he's also provided

00:30:05,929 --> 00:30:09,770
the preliminary information you guys

00:30:08,000 --> 00:30:11,990
need to start doing this on your own

00:30:09,770 --> 00:30:14,120
site so you can go and github and you

00:30:11,990 --> 00:30:17,780
can pick up the l kft remote labs go to

00:30:14,120 --> 00:30:19,940
the l kft remote labs project at this

00:30:17,780 --> 00:30:22,460
site chase shows how to set up lava

00:30:19,940 --> 00:30:25,160
master in a dispatcher he shows up how

00:30:22,460 --> 00:30:27,460
to how to set up a docker base Jenkins

00:30:25,160 --> 00:30:29,480
with system image build scripts

00:30:27,460 --> 00:30:32,510
instructions for connecting to the

00:30:29,480 --> 00:30:33,620
Gnarls l kft reporting system the one

00:30:32,510 --> 00:30:35,450
thing we don't have is we don't have

00:30:33,620 --> 00:30:38,990
instructions on how you guys get the

00:30:35,450 --> 00:30:41,600
credentials that's when when you go when

00:30:38,990 --> 00:30:43,520
you talk to our developer services team

00:30:41,600 --> 00:30:44,960
and they talk they talk to us then we

00:30:43,520 --> 00:30:47,690
can negotiate how to get the credentials

00:30:44,960 --> 00:30:49,610
to us for actually accessing the

00:30:47,690 --> 00:30:51,260
reporting system and he also has

00:30:49,610 --> 00:30:56,750
instructions for setting up our relay

00:30:51,260 --> 00:30:58,880
module control by GPO GPIO so like I

00:30:56,750 --> 00:31:01,070
said before if if you're interested in L

00:30:58,880 --> 00:31:04,520
kft remote labs the right conduit is

00:31:01,070 --> 00:31:07,040
through lonardo developer services this

00:31:04,520 --> 00:31:09,880
isn't saying that all engagements in l

00:31:07,040 --> 00:31:13,130
kft remote labs are developer services

00:31:09,880 --> 00:31:15,350
but this is the best conduit so that

00:31:13,130 --> 00:31:19,280
they can best assess whether your needs

00:31:15,350 --> 00:31:21,860
are best met by education and tutorials

00:31:19,280 --> 00:31:24,100
or whether you you are interested in

00:31:21,860 --> 00:31:27,190
having Lennar oh ellan our landing

00:31:24,100 --> 00:31:29,110
work on remote labs or whether you're

00:31:27,190 --> 00:31:33,850
interested in having your hardware be

00:31:29,110 --> 00:31:35,650
the be our sort of model Hardware

00:31:33,850 --> 00:31:38,140
exemplary hardware or a reference

00:31:35,650 --> 00:31:40,450
platform for instance so services at

00:31:38,140 --> 00:31:43,600
Leonora org is a good starting point and

00:31:40,450 --> 00:31:46,059
they will contact me directly as as soon

00:31:43,600 --> 00:31:48,460
as they as they hear from any of you on

00:31:46,059 --> 00:31:50,080
your interests on the remote labs all

00:31:48,460 --> 00:31:52,480
right so what do we have what do we have

00:31:50,080 --> 00:32:02,350
on the demo chase is it executing now we

00:31:52,480 --> 00:32:05,799
have may take a while but the last job

00:32:02,350 --> 00:32:16,990
it is finished and we already can see

00:32:05,799 --> 00:32:18,150
the radar through last year you can see

00:32:16,990 --> 00:32:32,140
it on the dashpot

00:32:18,150 --> 00:32:35,620
and so these email reports these are

00:32:32,140 --> 00:32:39,789
template eyes'll we we can custom tailor

00:32:35,620 --> 00:32:42,039
these with and reason they can be sent

00:32:39,789 --> 00:32:45,039
to individuals based upon the project so

00:32:42,039 --> 00:32:48,309
for instance only only you would get the

00:32:45,039 --> 00:32:50,020
customized email for your project with

00:32:48,309 --> 00:32:52,090
the information that's necessary that's

00:32:50,020 --> 00:33:05,950
that's useful and relevant to your

00:32:52,090 --> 00:33:07,990
project so the test details so this one

00:33:05,950 --> 00:33:10,750
this brings us back to the QA reports

00:33:07,990 --> 00:33:15,760
dashboard where do we look at the actual

00:33:10,750 --> 00:33:17,260
test job the desk job is over here right

00:33:15,760 --> 00:33:23,730
test job bronze over there

00:33:17,260 --> 00:33:23,730
and some time to run and

00:33:24,470 --> 00:33:31,010
all the metadata include the attesa job

00:33:32,870 --> 00:33:38,040
yep so we can get access via that

00:33:36,300 --> 00:33:40,320
reporting dashboard to the Lava

00:33:38,040 --> 00:33:41,970
information we can get access to the

00:33:40,320 --> 00:33:43,500
build information so if there's a

00:33:41,970 --> 00:33:46,260
failure and you think it's build related

00:33:43,500 --> 00:33:47,490
we can get we can get there so it's all

00:33:46,260 --> 00:33:50,730
tightly coupled and it all comes through

00:33:47,490 --> 00:33:53,010
the the email interface and via the

00:33:50,730 --> 00:33:54,240
dashboard right all right and then

00:33:53,010 --> 00:34:00,090
within a few minutes we should probably

00:33:54,240 --> 00:34:01,470
see this starts yeah so it's just like

00:34:00,090 --> 00:34:02,850
what you saw before with the blinking

00:34:01,470 --> 00:34:11,550
lights that's verifying that the demo

00:34:02,850 --> 00:34:13,920
actually ran all right so there is some

00:34:11,550 --> 00:34:16,170
backup material that I'm not going to go

00:34:13,920 --> 00:34:19,740
into it just discusses kernel CI versus

00:34:16,170 --> 00:34:21,930
lkf t and also to Scott discusses the

00:34:19,740 --> 00:34:23,310
lkf t as a service rather than a

00:34:21,930 --> 00:34:26,970
community project and some of the

00:34:23,310 --> 00:34:28,230
barriers and concerns these are some

00:34:26,970 --> 00:34:29,640
things that we still have to answer but

00:34:28,230 --> 00:34:31,560
we'll answer these with you like I said

00:34:29,640 --> 00:34:33,570
binary blobs we think we can support

00:34:31,560 --> 00:34:36,780
them we just haven't had a use case for

00:34:33,570 --> 00:34:38,280
them internally yet how do we support

00:34:36,780 --> 00:34:39,930
custom flashing tools that are hard to

00:34:38,280 --> 00:34:42,900
integrate with lava that still needs to

00:34:39,930 --> 00:34:44,250
be solved we recommend that you use

00:34:42,900 --> 00:34:46,260
flashing tools that are easy to

00:34:44,250 --> 00:34:48,450
integrate with lava otherwise you have

00:34:46,260 --> 00:34:51,960
to solve that with us or rather solve

00:34:48,450 --> 00:34:54,240
that on your own how do you reproduce

00:34:51,960 --> 00:34:55,830
problems that lkf T finds that's

00:34:54,240 --> 00:34:58,320
something that we're I think we're

00:34:55,830 --> 00:35:00,420
actively looking at and there is

00:34:58,320 --> 00:35:02,550
complexity in setting up the lava master

00:35:00,420 --> 00:35:04,500
in this the dispatcher but hopefully

00:35:02,550 --> 00:35:08,390
with the education materials access to

00:35:04,500 --> 00:35:11,580
land ro engineers and chases project

00:35:08,390 --> 00:35:13,170
demo that he's set up on github it'll be

00:35:11,580 --> 00:35:16,980
a good starting point for you guys to

00:35:13,170 --> 00:35:18,630
take a look at this for yourselves all

00:35:16,980 --> 00:35:20,340
right well that's all I had as far as a

00:35:18,630 --> 00:35:22,530
presentation do you have any questions

00:35:20,340 --> 00:35:24,900
that come to mind right away that you

00:35:22,530 --> 00:35:27,840
would like answers on if so you can go

00:35:24,900 --> 00:35:29,670
ahead and ask them now or if not I am

00:35:27,840 --> 00:35:31,740
available for the next four days as well

00:35:29,670 --> 00:35:33,960
to answer them or I believe most you

00:35:31,740 --> 00:35:35,859
know how to get a hold of me directly or

00:35:33,960 --> 00:35:39,970
like I said you can go to service

00:35:35,859 --> 00:35:48,549
at the Vanara org as well all right any

00:35:39,970 --> 00:35:50,499
questions on ELQ aft remote labs nothing

00:35:48,549 --> 00:35:51,819
all right well thanks for attending the

00:35:50,499 --> 00:35:53,910
presentation like I said if you have any

00:35:51,819 --> 00:35:56,349
questions either come to me directly or

00:35:53,910 --> 00:35:58,960
if you know you're interested just go

00:35:56,349 --> 00:36:00,430
straight to services out Lennar argh all

00:35:58,960 --> 00:36:03,549
right thank you thank you chase for the

00:36:00,430 --> 00:36:07,150
demo and if you would like to look

00:36:03,549 --> 00:36:10,180
in-depth at this demo chase will be

00:36:07,150 --> 00:36:12,809
giving the demo on Friday as well so

00:36:10,180 --> 00:36:12,809
thank you very much

00:36:19,869 --> 00:36:21,930

YouTube URL: https://www.youtube.com/watch?v=FAuHKTeZhDk


