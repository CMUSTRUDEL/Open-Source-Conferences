Title: HKG18 Keynote: The Worlds First Arm Developer Box by Daniel Thompson
Publication date: 2019-05-09
Playlist: Linaro Connect Hong Kong 2018
Description: 
	HKG18 Keynote: The Worlds First Arm Developer Box by Daniel Thompson
Captions: 
	00:00:00,000 --> 00:00:04,440
at four it so since then Daniel Thompson

00:00:02,310 --> 00:00:06,000
has been using the developer box and I

00:00:04,440 --> 00:00:08,429
asked him to just come in briefly this

00:00:06,000 --> 00:00:12,990
morning and share with us his experience

00:00:08,429 --> 00:00:17,789
using the developer box but I'm Daniel

00:00:12,990 --> 00:00:18,990
Thompson I work for the nari and this I

00:00:17,789 --> 00:00:20,580
didn't write the title of this

00:00:18,990 --> 00:00:22,020
presentation this was given to me by

00:00:20,580 --> 00:00:23,400
somebody else and I thought I would

00:00:22,020 --> 00:00:25,730
really do my research make sure I got it

00:00:23,400 --> 00:00:28,670
absolutely right so the world's first

00:00:25,730 --> 00:00:33,300
developer box somebody beat us to it

00:00:28,670 --> 00:00:35,910
1987 the 18 Archimedes the most

00:00:33,300 --> 00:00:37,500
astonishing thing about this computer it

00:00:35,910 --> 00:00:39,030
was a great technical achievement if

00:00:37,500 --> 00:00:40,469
there's project managers in the room it

00:00:39,030 --> 00:00:42,750
was perhaps an even more outstanding

00:00:40,469 --> 00:00:44,640
project management achievement and so

00:00:42,750 --> 00:00:47,219
yeah it came with BBC basic and assemble

00:00:44,640 --> 00:00:50,250
it built in it ran a obscure OS named

00:00:47,219 --> 00:00:53,010
Arthur 8 megahertz 1 megabyte of RAM by

00:00:50,250 --> 00:00:54,750
default unfortunately that's just 31

00:00:53,010 --> 00:00:57,570
years ago we still got beat to the

00:00:54,750 --> 00:01:00,690
second one that was 1994 the icon risk

00:00:57,570 --> 00:01:03,470
PC still had BBC basic and assembler

00:01:00,690 --> 00:01:06,360
built into it it also ran an obscure OS

00:01:03,470 --> 00:01:08,189
slightly faster processor now it had a

00:01:06,360 --> 00:01:11,189
modern MMU in it this was the first arm

00:01:08,189 --> 00:01:14,970
to get a proper MMU it had 32 megabytes

00:01:11,189 --> 00:01:18,600
of RAM and was based on 4k pages then

00:01:14,970 --> 00:01:20,310
however there was a 24 year gap and I've

00:01:18,600 --> 00:01:21,450
challenged people and come and find me

00:01:20,310 --> 00:01:24,990
afterwards if you can fill in the gaps

00:01:21,450 --> 00:01:28,259
but I think the next PC form factor was

00:01:24,990 --> 00:01:31,560
the 20 1896 Paul's developed box firm

00:01:28,259 --> 00:01:33,900
with synchros on it and so this has efi

00:01:31,560 --> 00:01:37,259
shell builted which is arguably a

00:01:33,900 --> 00:01:39,119
regression compared to BBC basic he runs

00:01:37,259 --> 00:01:41,790
an obscure kernel main Linux it's got

00:01:39,119 --> 00:01:44,939
the sequencer 24 core 853 gigahertz

00:01:41,790 --> 00:01:47,159
processors processors in it that's four

00:01:44,939 --> 00:01:49,439
gigs of ram although it's in the kit is

00:01:47,159 --> 00:01:52,229
expandable to 64 gigs and so this is a

00:01:49,439 --> 00:01:54,329
hundred times the memory of the RISC PC

00:01:52,229 --> 00:01:55,979
and you still have to put it into 4k

00:01:54,329 --> 00:01:57,600
pages if you want 30 to you about I'm

00:01:55,979 --> 00:02:00,630
containers to work or you only and video

00:01:57,600 --> 00:02:03,450
nouveau driver to work the box itself

00:02:00,630 --> 00:02:04,979
could do 64 K pages no problem at all so

00:02:03,450 --> 00:02:06,810
but just thing about that hundred X

00:02:04,979 --> 00:02:11,069
increasing page search in memory size

00:02:06,810 --> 00:02:13,620
still using the same size pages if I

00:02:11,069 --> 00:02:16,230
shelf like I say BBC basic is not

00:02:13,620 --> 00:02:17,730
built into the developer box but I can

00:02:16,230 --> 00:02:21,209
offer you a simple workaround you can

00:02:17,730 --> 00:02:23,700
app get a brandy which is a BBC dialect

00:02:21,209 --> 00:02:25,110
basic interpreter it will give you 512 K

00:02:23,700 --> 00:02:30,269
of code space for you to store your

00:02:25,110 --> 00:02:32,579
basic programs but I'm gonna add that I

00:02:30,269 --> 00:02:35,010
can't consider the EFI shell to be a

00:02:32,579 --> 00:02:37,290
regression so please more all the mean

00:02:35,010 --> 00:02:39,510
things I've just said about it one of

00:02:37,290 --> 00:02:41,670
the key things about developer box is we

00:02:39,510 --> 00:02:43,560
were able to get best-in-class kind of

00:02:41,670 --> 00:02:46,079
EFI firmware running on this box so

00:02:43,560 --> 00:02:48,209
firmware done right edie k2 tailored

00:02:46,079 --> 00:02:50,910
specifically for the developer box by

00:02:48,209 --> 00:02:52,709
our enterprise group odds even

00:02:50,910 --> 00:02:54,959
negotiated with Richard Hughes and

00:02:52,709 --> 00:02:56,700
arranged for updates over the air while

00:02:54,959 --> 00:02:58,560
the Linux vendor firmware service so if

00:02:56,700 --> 00:03:01,890
you are running the update demon in your

00:02:58,560 --> 00:03:03,810
distro it will be capable of upgrading

00:03:01,890 --> 00:03:04,530
the firmware as it goes you don't have

00:03:03,810 --> 00:03:06,709
to worry about it

00:03:04,530 --> 00:03:10,190
it finally includes a binary translator

00:03:06,709 --> 00:03:12,390
because what we discovered is that the

00:03:10,190 --> 00:03:14,730
cards that we want to plug into see

00:03:12,390 --> 00:03:16,170
graphics have it's not called the video

00:03:14,730 --> 00:03:17,849
bios anymore but you know what I mean it

00:03:16,170 --> 00:03:19,769
has x86 code needed to initialize the

00:03:17,849 --> 00:03:22,109
clocks and allow us to put menus up from

00:03:19,769 --> 00:03:23,790
the firmware so we have a translator and

00:03:22,109 --> 00:03:26,220
there to do that and the result is you

00:03:23,790 --> 00:03:28,680
have a box that boots and looks and

00:03:26,220 --> 00:03:30,180
feels like a PC so it boots and it shows

00:03:28,680 --> 00:03:32,819
a cute splash screen and then it goes

00:03:30,180 --> 00:03:35,160
into grub and from Gerber you can run

00:03:32,819 --> 00:03:37,799
your eye so you can run regular distro

00:03:35,160 --> 00:03:40,549
installers and that is backed up by

00:03:37,799 --> 00:03:42,629
really strong district support so

00:03:40,549 --> 00:03:45,150
comprehensive kernel support kind of

00:03:42,629 --> 00:03:46,910
comes in in the 416 era so that's when

00:03:45,150 --> 00:03:49,169
we got the network drivers up streamed

00:03:46,910 --> 00:03:51,449
and so we can do a whole bunch of

00:03:49,169 --> 00:03:52,650
distress I've put the European gray for

00:03:51,449 --> 00:03:54,299
exactly the reasons that Kenneth was

00:03:52,650 --> 00:03:56,609
referring to it's not really a distro

00:03:54,299 --> 00:03:58,290
but it is a framework in which we could

00:03:56,609 --> 00:04:00,470
do a lot of testing so you will be able

00:03:58,290 --> 00:04:03,209
to install the ERP on the developer box

00:04:00,470 --> 00:04:04,859
well probably forever but we will stop

00:04:03,209 --> 00:04:06,209
promoting it after a few months when the

00:04:04,859 --> 00:04:08,519
distro start to take in the newer

00:04:06,209 --> 00:04:11,250
kernels and that should be coming really

00:04:08,519 --> 00:04:14,220
soon Fedora 28 is gonna be based on 4:16

00:04:11,250 --> 00:04:15,750
we sincerely hope that providing the

00:04:14,220 --> 00:04:18,120
kernel is configured with all DiMaggio's

00:04:15,750 --> 00:04:21,000
enabled it will work out the box it is

00:04:18,120 --> 00:04:24,570
configured with all module Abelson like

00:04:21,000 --> 00:04:27,090
quasi bun 218 4 uses 415 but they agreed

00:04:24,570 --> 00:04:27,600
to back build the network driver so that

00:04:27,090 --> 00:04:29,700
has been

00:04:27,600 --> 00:04:31,410
as well that's known to work and then

00:04:29,700 --> 00:04:33,390
the kind of that's the device three

00:04:31,410 --> 00:04:36,150
versions in a firmware switch you can

00:04:33,390 --> 00:04:37,650
flick over to a CPI mode and that brings

00:04:36,150 --> 00:04:40,770
alive what you might call the John

00:04:37,650 --> 00:04:43,680
masters dream but you can take the

00:04:40,770 --> 00:04:45,240
distros from last year WD stretch is not

00:04:43,680 --> 00:04:47,250
even last year based on a four nine

00:04:45,240 --> 00:04:49,560
colonel and it will boot the device box

00:04:47,250 --> 00:04:51,990
at the moment you will need some special

00:04:49,560 --> 00:04:53,670
command-line options and it turns out we

00:04:51,990 --> 00:04:55,200
were really chuffed by this it turns out

00:04:53,670 --> 00:04:57,390
those command-line options are working

00:04:55,200 --> 00:04:59,790
around bugs and because they're working

00:04:57,390 --> 00:05:01,410
around bugs we will get those bug fixes

00:04:59,790 --> 00:05:03,360
back into the light long term stable

00:05:01,410 --> 00:05:05,130
kernels and because it will get back

00:05:03,360 --> 00:05:07,170
ported that means when we see the Debian

00:05:05,130 --> 00:05:10,560
refresh things like Debian 9.5 come out

00:05:07,170 --> 00:05:14,100
that we'll have the newer LTS back port

00:05:10,560 --> 00:05:16,800
it's it's queued now for the next LTS so

00:05:14,100 --> 00:05:18,240
we'll see that come out sync CentOS is

00:05:16,800 --> 00:05:19,770
based on a slightly different kernel and

00:05:18,240 --> 00:05:20,760
it will require the same wear crayons

00:05:19,770 --> 00:05:22,410
it's Debian on at the moment

00:05:20,760 --> 00:05:24,570
and they've done what you might call the

00:05:22,410 --> 00:05:26,490
right thing they've got 64 K pages which

00:05:24,570 --> 00:05:27,990
is awesome and will get lovely wonderful

00:05:26,490 --> 00:05:29,460
performance but unfortunately means that

00:05:27,990 --> 00:05:31,640
you will have to also blacklist the new

00:05:29,460 --> 00:05:34,590
very driver if you want it to be was up

00:05:31,640 --> 00:05:36,450
this is my developer box it has been my

00:05:34,590 --> 00:05:39,300
privilege and joy and to take one of

00:05:36,450 --> 00:05:40,620
these home from the last connect I have

00:05:39,300 --> 00:05:42,750
to say Harry the hub this little robot

00:05:40,620 --> 00:05:44,190
it isn't there because he's cute he's

00:05:42,750 --> 00:05:46,320
working around some board design

00:05:44,190 --> 00:05:48,630
problems with the prototypes and my

00:05:46,320 --> 00:05:51,150
boards also had some mods and I had my

00:05:48,630 --> 00:05:52,650
friendly soldering bits on and off it so

00:05:51,150 --> 00:05:54,150
we could get it stabilized and I'm

00:05:52,650 --> 00:05:57,270
really looking forward is fairly soon

00:05:54,150 --> 00:05:58,890
now the production board will be posted

00:05:57,270 --> 00:06:00,570
to my house and I should dig it out and

00:05:58,890 --> 00:06:02,430
I should plug it all in I should also

00:06:00,570 --> 00:06:03,810
this is an O hugely oversized box or I

00:06:02,430 --> 00:06:05,400
can engineer it Lee actually doesn't fit

00:06:03,810 --> 00:06:07,050
very well on my desk so when I check the

00:06:05,400 --> 00:06:09,660
new case I wasn't quite pleased cuz I

00:06:07,050 --> 00:06:11,340
get my desk back so my box is currently

00:06:09,660 --> 00:06:14,910
upgraded to eight gigs of ram finaland

00:06:11,340 --> 00:06:17,070
12 k gig SSD and since early November it

00:06:14,910 --> 00:06:20,040
has been my main computer for all the

00:06:17,070 --> 00:06:22,040
work I do for Lennar II and the reason I

00:06:20,040 --> 00:06:25,650
did that was that I wanted to personally

00:06:22,040 --> 00:06:27,240
find out how we're doing in the

00:06:25,650 --> 00:06:29,610
ecosystem we say the software is nearly

00:06:27,240 --> 00:06:32,160
there but we've learned a lot because

00:06:29,610 --> 00:06:34,800
the software is there and that's been

00:06:32,160 --> 00:06:36,300
roughly speaking my experience so this

00:06:34,800 --> 00:06:37,560
is my huge success story this is

00:06:36,300 --> 00:06:38,520
something called new route which is a

00:06:37,560 --> 00:06:40,680
rather obscure

00:06:38,520 --> 00:06:41,340
root file system it's a busy box alike

00:06:40,680 --> 00:06:43,710
written

00:06:41,340 --> 00:06:45,930
and it has the really neat property

00:06:43,710 --> 00:06:48,510
that's source-based so what happens when

00:06:45,930 --> 00:06:50,400
you build a you root is it creates you a

00:06:48,510 --> 00:06:52,080
go compiler copies it into the root file

00:06:50,400 --> 00:06:55,530
system and then dumps all the source

00:06:52,080 --> 00:06:56,520
code into a source tree and has just

00:06:55,530 --> 00:06:58,889
enough hooks in it that it will

00:06:56,520 --> 00:07:01,020
dynamically compile that source code and

00:06:58,889 --> 00:07:03,660
then cache it when you run things and

00:07:01,020 --> 00:07:07,500
that's I was really excited to see

00:07:03,660 --> 00:07:10,560
source connected so directly like that

00:07:07,500 --> 00:07:11,850
and I fired it up and in the afternoon I

00:07:10,560 --> 00:07:13,710
was expecting to have a happy afternoon

00:07:11,850 --> 00:07:14,970
playing and fixing all the bugs kind of

00:07:13,710 --> 00:07:16,860
like getting X to work in the old days

00:07:14,970 --> 00:07:19,560
and I was actually really disappointed

00:07:16,860 --> 00:07:21,600
because it worked it just worked and so

00:07:19,560 --> 00:07:24,210
you can go get it you can burn it

00:07:21,600 --> 00:07:25,530
that will create you the in mmm FS and

00:07:24,210 --> 00:07:27,840
then you get smartest thing you can just

00:07:25,530 --> 00:07:29,160
type kernel boot VM learners from qmu

00:07:27,840 --> 00:07:31,290
and it will boot and that's what it's

00:07:29,160 --> 00:07:33,990
doing this video here so that types LS

00:07:31,290 --> 00:07:35,190
it is just dynamic being part LS we're

00:07:33,990 --> 00:07:36,419
now going to look to see if we can see

00:07:35,190 --> 00:07:37,860
the source the last thing you'll see is

00:07:36,419 --> 00:07:40,050
the source coming up on the screen that

00:07:37,860 --> 00:07:42,600
has just dynamically compiled I will

00:07:40,050 --> 00:07:43,889
concede but to get that to fit into the

00:07:42,600 --> 00:07:46,740
time I was just speaking I have

00:07:43,889 --> 00:07:48,390
accelerated things so for example it

00:07:46,740 --> 00:07:49,950
does take quite a few minutes to

00:07:48,390 --> 00:07:51,540
generate the EMFs which it was doing

00:07:49,950 --> 00:07:52,919
while I was speaking about me to go so

00:07:51,540 --> 00:07:55,080
don't take that as a performance

00:07:52,919 --> 00:07:57,330
reference but it is you know that was

00:07:55,080 --> 00:08:00,660
generally recorded on busy but on a

00:07:57,330 --> 00:08:03,390
developer box and you've just seen what

00:08:00,660 --> 00:08:05,460
he can do there was an epic fail I have

00:08:03,390 --> 00:08:08,820
to balance it up and it was also go

00:08:05,460 --> 00:08:13,860
related actually so go didn't add arch

00:08:08,820 --> 00:08:16,200
64 support until 1.1 by 1.5 and 1.5 was

00:08:13,860 --> 00:08:17,190
also the very first go compiler that was

00:08:16,200 --> 00:08:19,080
written in go

00:08:17,190 --> 00:08:20,430
and obviously self-hosting compile isn't

00:08:19,080 --> 00:08:20,880
much cooler than monitoring in C so that

00:08:20,430 --> 00:08:26,700
was awesome

00:08:20,880 --> 00:08:28,470
but openembedded doesn't want to depend

00:08:26,700 --> 00:08:29,900
on the host go compiler because lots of

00:08:28,470 --> 00:08:33,690
people haven't installed it yet

00:08:29,900 --> 00:08:36,599
so it works by using the host C compiler

00:08:33,690 --> 00:08:38,550
to build the C version of go and then

00:08:36,599 --> 00:08:40,140
change it on so I know how to fix that

00:08:38,550 --> 00:08:42,900
you just used the host go compiler and

00:08:40,140 --> 00:08:45,870
I'm 64 but while I say I know how to fix

00:08:42,900 --> 00:08:49,050
it I have not yet learnt how to express

00:08:45,870 --> 00:08:50,550
there and open embedded syntax and yeah

00:08:49,050 --> 00:08:51,810
if people have used open embedded will

00:08:50,550 --> 00:08:54,360
recognize what I haven't done that yet

00:08:51,810 --> 00:08:54,690
so I have the final kind of wrap up here

00:08:54,360 --> 00:08:56,430
which

00:08:54,690 --> 00:08:58,350
the kind of love I hate it and that the

00:08:56,430 --> 00:09:02,760
key thing for me was that almost

00:08:58,350 --> 00:09:04,350
everything just works you don't sit

00:09:02,760 --> 00:09:06,120
there day to day singing I wish I had my

00:09:04,350 --> 00:09:09,570
PC so I could run this tool or at least

00:09:06,120 --> 00:09:11,460
I didn't so that that was the main taker

00:09:09,570 --> 00:09:14,040
and I picked up ChromeOS working

00:09:11,460 --> 00:09:16,410
wonderfully it was a great joy not to

00:09:14,040 --> 00:09:19,500
cross compile all the time to have

00:09:16,410 --> 00:09:21,120
native KVM to have native arm can patina

00:09:19,500 --> 00:09:22,320
so I put a blog post there this morning

00:09:21,120 --> 00:09:24,660
from the work I did with the native arm

00:09:22,320 --> 00:09:26,730
containers parallel builds are fairly

00:09:24,660 --> 00:09:28,230
fast and this is a fest it's it's a

00:09:26,730 --> 00:09:30,660
performance per watt machine it's not

00:09:28,230 --> 00:09:32,040
huge single frame performance but

00:09:30,660 --> 00:09:36,120
parallel builds are pretty good they

00:09:32,040 --> 00:09:38,640
outpace my 2017 laptop I suspect to 2018

00:09:36,120 --> 00:09:42,210
lap so in my 2017 laptop I suspect it

00:09:38,640 --> 00:09:43,230
might not keep up with an 18 laptop so

00:09:42,210 --> 00:09:45,090
there's only a couple of things I can

00:09:43,230 --> 00:09:46,710
really say that I didn't enjoy about the

00:09:45,090 --> 00:09:48,960
experience and the first one really

00:09:46,710 --> 00:09:50,640
surprised me which is lit and you go

00:09:48,960 --> 00:09:52,740
through a website sniffs the browser

00:09:50,640 --> 00:09:55,650
string it's just our my CEO arm arm do

00:09:52,740 --> 00:09:57,720
mobile only and they show you the mobile

00:09:55,650 --> 00:09:59,100
version of the website which in the case

00:09:57,720 --> 00:10:03,450
of Google Calendar looks and rubbish

00:09:59,100 --> 00:10:05,220
full slice and so yes when the odd hacks

00:10:03,450 --> 00:10:06,720
is you have to install an x86 browser

00:10:05,220 --> 00:10:08,460
emulator as an extension into your

00:10:06,720 --> 00:10:10,200
browser otherwise you get stuck with

00:10:08,460 --> 00:10:11,340
mobile websites from time to time the

00:10:10,200 --> 00:10:12,540
other thing that was like I say this was

00:10:11,340 --> 00:10:15,390
designed to be a performance per watt

00:10:12,540 --> 00:10:17,880
machine it has so when you hit desktop

00:10:15,390 --> 00:10:19,890
applications particularly where they're

00:10:17,880 --> 00:10:22,830
single threaded and that will reveal the

00:10:19,890 --> 00:10:24,780
the limits of a one gigahertz a 53 I

00:10:22,830 --> 00:10:26,490
mean even that was a good thing because

00:10:24,780 --> 00:10:28,740
one of those single federal application

00:10:26,490 --> 00:10:29,910
was my mail user agent and they meant I

00:10:28,740 --> 00:10:33,540
could go back to month which has also

00:10:29,910 --> 00:10:36,150
been a regressive joy in many ways so

00:10:33,540 --> 00:10:38,280
that's about it I thank you all before I

00:10:36,150 --> 00:10:40,170
stop I have this Monty Python foot to

00:10:38,280 --> 00:10:42,270
remind me that I need people to get on

00:10:40,170 --> 00:10:44,130
their feet right now because I am in

00:10:42,270 --> 00:10:46,710
many ways a total fraud standing here

00:10:44,130 --> 00:10:48,600
you know i gatecrash the developer box

00:10:46,710 --> 00:10:50,160
party just before the last connect

00:10:48,600 --> 00:10:52,050
because i was so excited about the

00:10:50,160 --> 00:10:53,370
project i wanted to be part of it and I

00:10:52,050 --> 00:10:55,830
said we continually through this

00:10:53,370 --> 00:10:57,180
presentation and so I think we need to

00:10:55,830 --> 00:10:58,589
stand out which means all the guys at

00:10:57,180 --> 00:11:01,050
Lennar oh Enterprise group who've worked

00:10:58,589 --> 00:11:03,600
on this the so CNX development team the

00:11:01,050 --> 00:11:05,520
sochi next landing team so anybody

00:11:03,600 --> 00:11:06,900
both from sochi necks and Lennar oh and

00:11:05,520 --> 00:11:08,460
ninety six boards who's been working on

00:11:06,900 --> 00:11:09,930
is probably self-identify

00:11:08,460 --> 00:11:12,300
and stand up if I see people not

00:11:09,930 --> 00:11:14,370
standing up I will point you out so yeah

00:11:12,300 --> 00:11:16,260
get on your feet if you had impact on

00:11:14,370 --> 00:11:18,980
the developer box please stand out

00:11:16,260 --> 00:11:23,809
jazzy you have to stand up

00:11:18,980 --> 00:11:23,809
[Applause]

00:11:26,170 --> 00:11:31,450
and that's that's it for me thank you

00:11:28,670 --> 00:11:35,800
very very much for your attention

00:11:31,450 --> 00:11:40,660
[Applause]

00:11:35,800 --> 00:11:40,660

YouTube URL: https://www.youtube.com/watch?v=k-OvYxGlUmc


