Title: HKG18-510 - Zun - OpenStack Container Management Service
Publication date: 2019-05-09
Playlist: Linaro Connect Hong Kong 2018
Description: 
	"Session ID: HKG18-510
Session Name: HKG18-510 - Zun - OpenStack Container Management Service
Speaker: Kevin Zhao
Track: Enterprise


★ Session Summary ★
OpenStack is the number 1 private cloud Open Source project and Container technology is the heart of micro service. Zun is the Container Management service in OpenStack, supporting multi-arch including both AArch64 and X86, which provides the foundation of running container as a service in private cloud. We've introduced the Capsule (the cabins) as a container group that allows all the containers within the group to share the same resources, so that the capsule can be scheduled as a co-work unit, improving the flexibility of running container in cloud - flying cabins in the cloud. I will introduce the container capsule design, basic work process and why it is an important project for AArch64 in data center, I'll also make a comparison between Zun and other container technology. The take away for audience: they will understand some key cloud computing and container orchestration technologies and get a deep understanding about the micro service backend, cloud computing framework and prototype structure, and why they are critical for Arm in the cloud computing domain.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/hkg18/hkg18-510/
Presentation: http://connect.linaro.org.s3.amazonaws.com/hkg18/presentations/hkg18-510.pdf
Video: http://connect.linaro.org.s3.amazonaws.com/hkg18/videos/hkg18-510.mp4
 ---------------------------------------------------
★ Event Details ★
Linaro Connect Hong Kong 2018 (HKG18)
19-23 March 2018 
Regal Airport Hotel Hong Kong

---------------------------------------------------
Keyword: Enterprise
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:01,620 --> 00:00:06,580
[Music]

00:00:14,620 --> 00:00:22,520
okay good morning everyone thanks for

00:00:19,220 --> 00:00:26,060
joining this session because this is a

00:00:22,520 --> 00:00:28,270
last session ending our connect yeah so

00:00:26,060 --> 00:00:31,550
I want to introduce myself first I'm

00:00:28,270 --> 00:00:33,440
Kevin from arm and now I've served as

00:00:31,550 --> 00:00:36,020
the OpenStack to project the core

00:00:33,440 --> 00:00:38,960
reviewer so today we will talk about

00:00:36,020 --> 00:00:45,130
what is a the OpenStack container

00:00:38,960 --> 00:00:47,539
service so my session is a sweetheart

00:00:45,130 --> 00:00:51,019
firstly but is about container and

00:00:47,539 --> 00:00:53,239
OpenStack I will show some details about

00:00:51,019 --> 00:00:57,320
the container and OpenStack integration

00:00:53,239 --> 00:00:59,359
so then I will come to the overview we

00:00:57,320 --> 00:01:03,620
will give a detailed talk about the twin

00:00:59,359 --> 00:01:05,900
and the last part is about the demo so

00:01:03,620 --> 00:01:08,180
first it's about container and OpenStack

00:01:05,900 --> 00:01:12,040
so as we know the container and

00:01:08,180 --> 00:01:17,780
OpenStack are the famous at a famous

00:01:12,040 --> 00:01:22,460
topic in the cloud computing arere here

00:01:17,780 --> 00:01:24,140
is a period the OpenStack project map we

00:01:22,460 --> 00:01:29,570
could say there are several projects

00:01:24,140 --> 00:01:32,170
here and the mainframe the main point is

00:01:29,570 --> 00:01:36,980
about a three part about the compute

00:01:32,170 --> 00:01:40,340
networking and storage so as we see soon

00:01:36,980 --> 00:01:43,370
is a OpenStack container service that

00:01:40,340 --> 00:01:47,390
offer the OpenStack the ability to

00:01:43,370 --> 00:01:49,070
manage and create container besides we

00:01:47,390 --> 00:01:52,130
can see that there are several other

00:01:49,070 --> 00:01:54,740
projects these projects are related with

00:01:52,130 --> 00:01:57,200
container you can stack so there is a

00:01:54,740 --> 00:02:00,020
project called magnum yeah because the

00:01:57,200 --> 00:02:02,630
Menem is about a deploy the co e the

00:02:00,020 --> 00:02:03,610
container or situation engine on

00:02:02,630 --> 00:02:07,700
OpenStack

00:02:03,610 --> 00:02:10,340
so other we could say there is a color

00:02:07,700 --> 00:02:13,190
project Leonardo has engaged several

00:02:10,340 --> 00:02:17,019
people to color yeah so color is is

00:02:13,190 --> 00:02:20,390
packaging and the packaging and the

00:02:17,019 --> 00:02:22,970
deploy is the OpenStack service with a

00:02:20,390 --> 00:02:26,420
container image to make OpenStack it

00:02:22,970 --> 00:02:30,620
easy to deploy and run

00:02:26,420 --> 00:02:32,180
also there is the several plugin we

00:02:30,620 --> 00:02:35,150
could say they are accurate of Russia

00:02:32,180 --> 00:02:38,810
they will offer OpenStack Network and

00:02:35,150 --> 00:02:42,709
the volume supported for container so we

00:02:38,810 --> 00:02:44,690
can take a summary so there is a to mess

00:02:42,709 --> 00:02:49,550
there's two remastered about continent

00:02:44,690 --> 00:02:53,180
opens that integration so first it is

00:02:49,550 --> 00:02:56,450
about container on OpenStack it is

00:02:53,180 --> 00:03:00,290
represented by two projects about June

00:02:56,450 --> 00:03:03,140
and Magnum we could say possible soon

00:03:00,290 --> 00:03:06,260
and Magnum they have the they don't have

00:03:03,140 --> 00:03:08,269
the same realization and we could say

00:03:06,260 --> 00:03:12,680
from the logo their orientation is

00:03:08,269 --> 00:03:15,140
different yeah also there are other

00:03:12,680 --> 00:03:18,110
method for called open stifle container

00:03:15,140 --> 00:03:20,900
so cure is a measure so cure will offer

00:03:18,110 --> 00:03:24,140
the OpenStack new to network support for

00:03:20,900 --> 00:03:28,010
the full container and kala kala is

00:03:24,140 --> 00:03:30,010
OpenStack on container so okay this

00:03:28,010 --> 00:03:33,799
project will enable the container

00:03:30,010 --> 00:03:39,290
deployment for OpenStack so we can see

00:03:33,799 --> 00:03:41,450
that soon and magnum why they are well

00:03:39,290 --> 00:03:44,209
there are two different project about

00:03:41,450 --> 00:03:47,329
england-style for a container OpenStack

00:03:44,209 --> 00:03:49,510
so we could say in the next part about

00:03:47,329 --> 00:03:52,880
more details

00:03:49,510 --> 00:03:56,030
so maybe you can see this is a strange

00:03:52,880 --> 00:03:59,900
word called tuned it is not an English

00:03:56,030 --> 00:04:04,910
word and I believe that most of people

00:03:59,900 --> 00:04:07,610
here don't know about this so soon is a

00:04:04,910 --> 00:04:09,950
Chinese word and in his means there

00:04:07,610 --> 00:04:13,579
means the one container from ocean tent

00:04:09,950 --> 00:04:15,590
from Asia in China so we choose this as

00:04:13,579 --> 00:04:19,220
a project name as it is a container

00:04:15,590 --> 00:04:23,020
first and and also because that

00:04:19,220 --> 00:04:26,960
OpenStack listed their projects at the

00:04:23,020 --> 00:04:29,870
with the sort of alpha beta so it is

00:04:26,960 --> 00:04:32,150
very easy to see that it is also is

00:04:29,870 --> 00:04:35,169
always the first one from last so the

00:04:32,150 --> 00:04:37,130
user will be very easy to find a project

00:04:35,169 --> 00:04:40,230
in a real part

00:04:37,130 --> 00:04:43,980
it's a in the right part it's about

00:04:40,230 --> 00:04:47,370
the architecture we could say it's based

00:04:43,980 --> 00:04:50,280
on OpenStack cluster and it will also it

00:04:47,370 --> 00:04:52,830
will offer the virtual machine it will

00:04:50,280 --> 00:04:57,420
run container on top of virtual machine

00:04:52,830 --> 00:05:01,080
all the BM then we also also support the

00:04:57,420 --> 00:05:03,960
melted tea not so enormous lag we caught

00:05:01,080 --> 00:05:08,340
one Tina as a project so for for a

00:05:03,960 --> 00:05:12,450
different project their containers and

00:05:08,340 --> 00:05:15,870
the resources are isolated and the

00:05:12,450 --> 00:05:20,240
different projects the resources between

00:05:15,870 --> 00:05:20,240
the different project isolated also

00:05:22,790 --> 00:05:29,100
maybe we don't know about doing first

00:05:25,230 --> 00:05:31,110
but well we will know several other sim

00:05:29,100 --> 00:05:34,920
projects in the cloud in the public

00:05:31,110 --> 00:05:38,310
cloud arere so sue has a same project

00:05:34,920 --> 00:05:40,710
called zoo container instance it is the

00:05:38,310 --> 00:05:43,800
same realization within and also last

00:05:40,710 --> 00:05:46,470
year AWS published that there is a there

00:05:43,800 --> 00:05:49,620
another container instance called

00:05:46,470 --> 00:05:53,910
so the twin a CA and they are the

00:05:49,620 --> 00:05:58,470
same realizations 402 over users about

00:05:53,910 --> 00:06:00,570
the run container right way so user

00:05:58,470 --> 00:06:03,360
could focus on the application

00:06:00,570 --> 00:06:06,540
development they don't want they don't

00:06:03,360 --> 00:06:08,940
need to manage their clusters and also

00:06:06,540 --> 00:06:13,350
they don't need to manage their series

00:06:08,940 --> 00:06:15,630
so for user they just want to develop

00:06:13,350 --> 00:06:18,330
their application in a container and run

00:06:15,630 --> 00:06:23,400
container in a cloud so it is a good

00:06:18,330 --> 00:06:26,370
solution for this we could say why we

00:06:23,400 --> 00:06:30,720
use wind projects instead of Magnum yet

00:06:26,370 --> 00:06:34,830
because that Magnum is what born earlier

00:06:30,720 --> 00:06:38,010
than tween imagine AG in OpenStack so we

00:06:34,830 --> 00:06:40,950
could say if a content if a user want to

00:06:38,010 --> 00:06:43,530
use container open stack with Magnum

00:06:40,950 --> 00:06:47,220
worship will what could say to just

00:06:43,530 --> 00:06:51,600
first hen you to install install virtual

00:06:47,220 --> 00:06:54,060
machine use Magnum and on top of this

00:06:51,600 --> 00:06:55,620
virtual machine they need to

00:06:54,060 --> 00:06:58,680
deploy the container of the fascia

00:06:55,620 --> 00:07:01,500
engine we call Co e here and after that

00:06:58,680 --> 00:07:04,800
they should focus hastily pay attention

00:07:01,500 --> 00:07:07,950
that the co e network is different with

00:07:04,800 --> 00:07:10,139
OpenStack nutrient so we know for for

00:07:07,950 --> 00:07:13,590
example kubernetes communities has a

00:07:10,139 --> 00:07:17,430
network maybe we use calico flannel and

00:07:13,590 --> 00:07:20,610
weave so this this network is is

00:07:17,430 --> 00:07:26,330
couldn't connected with OpenStack Newton

00:07:20,610 --> 00:07:29,940
networker in the two way so we could see

00:07:26,330 --> 00:07:38,639
the advantage of this Magnum solution so

00:07:29,940 --> 00:07:41,370
after after try out sorry after setup of

00:07:38,639 --> 00:07:44,880
the network driver the user could use

00:07:41,370 --> 00:07:48,389
the kubernetes kubernetes client to run

00:07:44,880 --> 00:07:51,000
container so for for user we couldn't

00:07:48,389 --> 00:07:52,950
make a consequence a chance the need to

00:07:51,000 --> 00:07:56,040
first install the virtual machine and

00:07:52,950 --> 00:07:58,410
then install the OE and then set up the

00:07:56,040 --> 00:08:00,660
network driver and then run container

00:07:58,410 --> 00:08:06,780
with the co e so it is a little

00:08:00,660 --> 00:08:08,729
complicated for user to use it is a we

00:08:06,780 --> 00:08:12,210
could see the advantage of this

00:08:08,729 --> 00:08:14,760
so for Magnum solution the advantage is

00:08:12,210 --> 00:08:17,820
strong isolation because that each

00:08:14,760 --> 00:08:21,450
project has their own co-equal clusters

00:08:17,820 --> 00:08:25,200
and the there these are the this

00:08:21,450 --> 00:08:28,200
advantage it has mod T sub advantage of

00:08:25,200 --> 00:08:32,370
this so because that we need to set up a

00:08:28,200 --> 00:08:34,200
a hosiery cluster so there may be meet

00:08:32,370 --> 00:08:36,780
me to a problem a low resource

00:08:34,200 --> 00:08:38,969
utilization because for user they just

00:08:36,780 --> 00:08:42,599
want to deploy a container in a cloud

00:08:38,969 --> 00:08:46,890
but he knew to deploy Jose OE and a hope

00:08:42,599 --> 00:08:48,810
virtual machine cluster besides he'll

00:08:46,890 --> 00:08:52,110
meet several complicated environment

00:08:48,810 --> 00:08:57,450
because for Magnum is it very hard to

00:08:52,110 --> 00:08:59,850
use and it very hard to to to debug its

00:08:57,450 --> 00:09:02,319
problem

00:08:59,850 --> 00:09:05,230
so from this side we could say that

00:09:02,319 --> 00:09:07,569
Magnum is not a good cool solution for

00:09:05,230 --> 00:09:15,550
ranked contender right away so they are

00:09:07,569 --> 00:09:18,129
coming to win yeah we could see between

00:09:15,550 --> 00:09:20,980
the container service and either provide

00:09:18,129 --> 00:09:24,459
is a provided API for probation and

00:09:20,980 --> 00:09:28,110
managed containers without caring about

00:09:24,459 --> 00:09:30,549
the underlying infrastructure so we

00:09:28,110 --> 00:09:34,449
hopeful user they just want to use one

00:09:30,549 --> 00:09:39,610
command to run container and one command

00:09:34,449 --> 00:09:41,350
to manage container so after that they

00:09:39,610 --> 00:09:45,309
don't want to manage their clusters and

00:09:41,350 --> 00:09:47,439
it soon will enable this also soon

00:09:45,309 --> 00:09:50,110
suppose the container driver such as the

00:09:47,439 --> 00:09:51,879
cat a container and talker yeah we know

00:09:50,110 --> 00:09:55,480
that the color container is published by

00:09:51,879 --> 00:09:58,239
OpenStack Foundation also for user they

00:09:55,480 --> 00:10:01,499
could use a vehicle arbiter is a memory

00:09:58,239 --> 00:10:04,990
and the virtual CPU it is very easy for

00:10:01,499 --> 00:10:09,749
following to have a scheduler to enable

00:10:04,990 --> 00:10:13,779
user to have our container workload and

00:10:09,749 --> 00:10:17,290
in the rear the container has the

00:10:13,779 --> 00:10:21,129
first-class resources and soon the same

00:10:17,290 --> 00:10:23,049
as a virtual machine for one container

00:10:21,129 --> 00:10:24,790
they will have the individual

00:10:23,049 --> 00:10:27,249
independent IP address

00:10:24,790 --> 00:10:33,339
have the independent volume just the

00:10:27,249 --> 00:10:36,790
same ways BM here is an architecture we

00:10:33,339 --> 00:10:38,889
could say how we integrate with other

00:10:36,790 --> 00:10:43,360
OpenStack modules to enable the content

00:10:38,889 --> 00:10:46,059
of workload in the left part we could

00:10:43,360 --> 00:10:48,600
say there is a Keystone project Keystone

00:10:46,059 --> 00:10:52,089
is the OpenStack identity service it

00:10:48,600 --> 00:10:56,379
provided the service discovery client

00:10:52,089 --> 00:10:59,470
authentication and the multi Tina's

00:10:56,379 --> 00:11:02,619
support it will enable to enfold out

00:10:59,470 --> 00:11:05,049
sonication function and here as we know

00:11:02,619 --> 00:11:10,029
you use container we need a container

00:11:05,049 --> 00:11:13,120
container repository so clunks will use

00:11:10,029 --> 00:11:16,660
the two we will use the as the

00:11:13,120 --> 00:11:19,450
in a repository so other we could say

00:11:16,660 --> 00:11:22,930
that the natural problem we couldn't

00:11:19,450 --> 00:11:26,220
avoid we could use the OpenStack neutral

00:11:22,930 --> 00:11:28,420
Network for container he could he can

00:11:26,220 --> 00:11:30,339
connected with the OpenStack news

00:11:28,420 --> 00:11:32,380
network and the interactive with other

00:11:30,339 --> 00:11:36,490
OpenStack resources such as the other

00:11:32,380 --> 00:11:41,279
virtual machine or bare metal for cinder

00:11:36,490 --> 00:11:44,380
one container will needed a state for

00:11:41,279 --> 00:11:48,130
volume support so senior will enable

00:11:44,380 --> 00:11:51,250
this one and we will offer the APS APS

00:11:48,130 --> 00:11:56,350
support and management for the all over

00:11:51,250 --> 00:12:00,450
cluster so by integrating with this

00:11:56,350 --> 00:12:04,300
module to offer the OpenStack network

00:12:00,450 --> 00:12:06,370
image and storage network image of

00:12:04,300 --> 00:12:10,480
syndication support for the continent

00:12:06,370 --> 00:12:14,800
fleets it is will enable user for easily

00:12:10,480 --> 00:12:19,290
use and to satisfy the security and

00:12:14,800 --> 00:12:19,290
compliance workload and requirements

00:12:22,560 --> 00:12:30,010
besides we have introduced our new

00:12:25,870 --> 00:12:32,920
concept into that called capsule capsule

00:12:30,010 --> 00:12:37,360
we know that using one single container

00:12:32,920 --> 00:12:40,209
is not a good use and practice in macro

00:12:37,360 --> 00:12:42,520
service many people will use several

00:12:40,209 --> 00:12:46,779
container conversation in their macro

00:12:42,520 --> 00:12:49,870
service arere so we we have introduced a

00:12:46,779 --> 00:12:52,140
new concept called capsule so one

00:12:49,870 --> 00:12:55,630
capsule has several containers and

00:12:52,140 --> 00:12:59,350
several volumes you won't help you there

00:12:55,630 --> 00:13:03,160
has a sandbox container and several

00:12:59,350 --> 00:13:07,720
function containers also have several

00:13:03,160 --> 00:13:10,029
volumes the capsule content the sandbox

00:13:07,720 --> 00:13:12,880
container we could choose the cumin in

00:13:10,029 --> 00:13:17,470
his post it has been the container

00:13:12,880 --> 00:13:21,190
sandbox and it is used as it is used as

00:13:17,470 --> 00:13:23,640
the sandbox isolation for the total

00:13:21,190 --> 00:13:23,640
capsule

00:13:24,769 --> 00:13:31,199
for one capsule it is a basic unit for

00:13:28,829 --> 00:13:34,680
doing scheduler it couldn't be separated

00:13:31,199 --> 00:13:37,199
two different comp you note it is

00:13:34,680 --> 00:13:41,970
co-located and encode scheduler to the

00:13:37,199 --> 00:13:45,089
total a to the total the OpenStack

00:13:41,970 --> 00:13:47,279
scheduler and the container inside one

00:13:45,089 --> 00:13:49,980
helps you they are shared similar their

00:13:47,279 --> 00:13:53,490
share the same network name namespace so

00:13:49,980 --> 00:13:57,269
they will is post the same IP address to

00:13:53,490 --> 00:13:59,690
outside and the container inside one

00:13:57,269 --> 00:14:06,600
helps you will share the same warning

00:13:59,690 --> 00:14:09,540
here and maybe user want to set the

00:14:06,600 --> 00:14:12,480
resource limits here so the resource

00:14:09,540 --> 00:14:18,180
limits for example for one capsule has

00:14:12,480 --> 00:14:19,949
once the one CPU and one G memory so all

00:14:18,180 --> 00:14:24,810
the caps you can containers will share

00:14:19,949 --> 00:14:28,730
the one resource limits here so for

00:14:24,810 --> 00:14:32,370
capsule we could say how to create here

00:14:28,730 --> 00:14:34,410
we will simulate as a we closely

00:14:32,370 --> 00:14:37,199
simulated the progress about create apps

00:14:34,410 --> 00:14:40,560
you Falcon container command it is a

00:14:37,199 --> 00:14:42,300
very easy to understand so first we

00:14:40,560 --> 00:14:45,779
could create the volumes that needed a

00:14:42,300 --> 00:14:48,209
bad container perhaps you and then we

00:14:45,779 --> 00:14:51,029
could use a criminate his post image

00:14:48,209 --> 00:14:54,959
here this image is used at the sandbox

00:14:51,029 --> 00:14:57,600
and after that we could create create

00:14:54,959 --> 00:15:00,300
other containers maybe we could created

00:14:57,600 --> 00:15:02,870
engines and massacre containers so and

00:15:00,300 --> 00:15:06,810
then inside the night I PCM PID

00:15:02,870 --> 00:15:10,880
Tuesday's container sandbox that we have

00:15:06,810 --> 00:15:13,500
created before so after this container

00:15:10,880 --> 00:15:16,110
created they will have the same IP

00:15:13,500 --> 00:15:18,839
address and have the same ip a PID

00:15:16,110 --> 00:15:22,050
namespace with the center box container

00:15:18,839 --> 00:15:27,209
so they are the same realizations with

00:15:22,050 --> 00:15:29,610
kubernetes pod so for capsule after we

00:15:27,209 --> 00:15:31,560
enable helps you feature it is very easy

00:15:29,610 --> 00:15:33,959
for to into integration with cumin a

00:15:31,560 --> 00:15:35,790
days because that incriminated they have

00:15:33,959 --> 00:15:37,110
pod and we have the same realization

00:15:35,790 --> 00:15:40,140
human stack

00:15:37,110 --> 00:15:43,440
so we could use up we could make him

00:15:40,140 --> 00:15:47,250
join as a perpetually Trevor to

00:15:43,440 --> 00:15:54,870
OpenStack - to the communities

00:15:47,250 --> 00:15:58,110
realization and integration here here is

00:15:54,870 --> 00:16:00,450
a twin capsule how in turn helps to

00:15:58,110 --> 00:16:04,620
integrate with each other project we

00:16:00,450 --> 00:16:09,089
could take the meaning as as a real

00:16:04,620 --> 00:16:11,899
parent a representation about capsule so

00:16:09,089 --> 00:16:15,930
one may have several containers here and

00:16:11,899 --> 00:16:17,700
OpenStack Neutron and the cure cure a

00:16:15,930 --> 00:16:19,709
window a window before it is the

00:16:17,700 --> 00:16:22,950
container plug-in to offer the container

00:16:19,709 --> 00:16:24,630
network support so this cure will

00:16:22,950 --> 00:16:27,829
connect with the OpenStack new to

00:16:24,630 --> 00:16:30,750
network so for one capsule they have a

00:16:27,829 --> 00:16:33,180
independent IP address so this IP

00:16:30,750 --> 00:16:37,709
address will connect with the OpenStack

00:16:33,180 --> 00:16:41,220
VM and BM so they will have in the total

00:16:37,709 --> 00:16:44,490
a network cluster and also the clunks

00:16:41,220 --> 00:16:47,640
will offer the centric image repository

00:16:44,490 --> 00:16:50,149
for this container capsule and the

00:16:47,640 --> 00:16:53,730
stinger will offer the volume support

00:16:50,149 --> 00:16:56,610
also for user it is very friendly we

00:16:53,730 --> 00:17:03,089
could use a horizon UI or also we could

00:16:56,610 --> 00:17:09,120
use the OpenStack client here upstream

00:17:03,089 --> 00:17:11,309
stators about doing now let's turn in

00:17:09,120 --> 00:17:13,709
the last release of Queens that jewel

00:17:11,309 --> 00:17:16,500
has ranked either 15th all over

00:17:13,709 --> 00:17:18,569
OpenStack project and we know that there

00:17:16,500 --> 00:17:22,429
are several project called system config

00:17:18,569 --> 00:17:24,720
and other called maybe tempest and

00:17:22,429 --> 00:17:27,120
project config they are not the official

00:17:24,720 --> 00:17:30,860
project justice chests as a support

00:17:27,120 --> 00:17:33,960
project so after we don't consider the

00:17:30,860 --> 00:17:37,200
support project of OpenStack to rank the

00:17:33,960 --> 00:17:40,470
at attends a lower OpenStack of a facial

00:17:37,200 --> 00:17:47,910
OpenStack project and in a website we

00:17:40,470 --> 00:17:50,560
could say several of our cooperation

00:17:47,910 --> 00:17:53,200
company has also engaged the interim

00:17:50,560 --> 00:17:59,350
project so for examples of Huawei and

00:17:53,200 --> 00:18:02,620
the Fuji tone yeah here I will show us

00:17:59,350 --> 00:18:04,510
more example of renewing yeah it is very

00:18:02,620 --> 00:18:07,480
easy for one container just the one

00:18:04,510 --> 00:18:08,950
command the same as dog her client and

00:18:07,480 --> 00:18:10,990
the difference is you can run this

00:18:08,950 --> 00:18:15,070
continent in a cloud and in any

00:18:10,990 --> 00:18:17,590
community what it won't we could use the

00:18:15,070 --> 00:18:20,080
logs to see the container log and we

00:18:17,590 --> 00:18:26,620
could use the existed to to do the

00:18:20,080 --> 00:18:28,780
existing operation after that we could

00:18:26,620 --> 00:18:31,990
we could say what to do next

00:18:28,780 --> 00:18:33,850
in the dream project as we know before

00:18:31,990 --> 00:18:35,830
between is a good solution for the

00:18:33,850 --> 00:18:38,170
server days continent cloud you can

00:18:35,830 --> 00:18:39,850
stack so here server list is not

00:18:38,170 --> 00:18:42,190
different with the phone it's different

00:18:39,850 --> 00:18:45,040
with the function at the service it may

00:18:42,190 --> 00:18:47,170
be called surveys or cluster days for

00:18:45,040 --> 00:18:49,420
user they just need to run container and

00:18:47,170 --> 00:18:51,310
run their workload applications in

00:18:49,420 --> 00:18:54,160
container they don't care about any

00:18:51,310 --> 00:18:57,960
server and adding cluster so here we'll

00:18:54,160 --> 00:19:00,220
choose this name we will

00:18:57,960 --> 00:19:04,600
implementational kubernetes connector

00:19:00,220 --> 00:19:06,910
here in tune and it will by using our

00:19:04,600 --> 00:19:10,060
project called virtual kool-aid we will

00:19:06,910 --> 00:19:13,900
register this student project at the

00:19:10,060 --> 00:19:16,750
shop would like to cooperate to ever we

00:19:13,900 --> 00:19:19,930
will register special node but what aku

00:19:16,750 --> 00:19:22,930
blade in the kubernetes cluster and then

00:19:19,930 --> 00:19:25,950
for the port that is scheduling to this

00:19:22,930 --> 00:19:30,310
full pod that's scheduling here to this

00:19:25,950 --> 00:19:33,700
node will be provisioned by doing that

00:19:30,310 --> 00:19:36,280
is to say for full kubernetes user they

00:19:33,700 --> 00:19:38,980
could they could just use cumin in his

00:19:36,280 --> 00:19:42,210
apply kubernetes api to manage their

00:19:38,980 --> 00:19:45,100
containers but the difference is the

00:19:42,210 --> 00:19:47,530
realization is about june and for user

00:19:45,100 --> 00:19:50,170
so this has the one they just need to

00:19:47,530 --> 00:19:51,850
pay only the content or money they don't

00:19:50,170 --> 00:19:54,580
need to pay the kubernetes cluster money

00:19:51,850 --> 00:19:57,160
it is very easy for the kubernetes

00:19:54,580 --> 00:20:00,250
cluster and container communities user

00:19:57,160 --> 00:20:02,770
and continue to use this one

00:20:00,250 --> 00:20:05,470
and after that we will implementations

00:20:02,770 --> 00:20:11,800
is cinder melt attach support full

00:20:05,470 --> 00:20:14,700
container besides I have a demo to show

00:20:11,800 --> 00:20:18,100
how to create a capsule

00:20:14,700 --> 00:20:22,840
well sorry this is a little small

00:20:18,100 --> 00:20:26,470
I use a one command yet do not have to

00:20:22,840 --> 00:20:29,620
create and the way define a llamó file

00:20:26,470 --> 00:20:33,340
about the capsu we could say after

00:20:29,620 --> 00:20:35,950
create this this helps you has been

00:20:33,340 --> 00:20:39,310
created and we could check the details

00:20:35,950 --> 00:20:41,860
about all over the container this this

00:20:39,310 --> 00:20:45,250
capsule has three containers so one is

00:20:41,860 --> 00:20:49,000
of all engines here and ending Sporty's

00:20:45,250 --> 00:20:51,640
is 18 it is 8 a and the other container

00:20:49,000 --> 00:20:55,390
is Mexico and we have set the Mexico

00:20:51,640 --> 00:20:58,900
password and the database the last one

00:20:55,390 --> 00:21:01,510
is about her CentOS image we said that

00:20:58,900 --> 00:21:03,970
we will set it container to eco the

00:21:01,510 --> 00:21:06,100
hello world so we have three continent

00:21:03,970 --> 00:21:08,080
now and we could say we could use the

00:21:06,100 --> 00:21:10,390
twin lista to see all the container here

00:21:08,080 --> 00:21:12,370
we find that the areas of there are 4

00:21:10,390 --> 00:21:13,930
container because there is a standard

00:21:12,370 --> 00:21:17,320
box container called Cuban it his post

00:21:13,930 --> 00:21:22,120
and all the containers have the same IP

00:21:17,320 --> 00:21:24,700
address here we could say and then we

00:21:22,120 --> 00:21:27,790
will check the Mexico whether the metal

00:21:24,700 --> 00:21:29,950
container it work we were cited the

00:21:27,790 --> 00:21:32,740
Mexico user password and app here twice

00:21:29,950 --> 00:21:38,530
as in the port we could sell to each

00:21:32,740 --> 00:21:40,600
yeah it worked fine and we could say

00:21:38,530 --> 00:21:43,240
there is a endings there is a ending

00:21:40,600 --> 00:21:47,220
stated base that created and then we'll

00:21:43,240 --> 00:21:47,220
try engines to find whether it'll work

00:21:48,150 --> 00:21:54,370
yeah and endings also works well and

00:21:51,010 --> 00:21:57,610
last one is about the Santos Santos this

00:21:54,370 --> 00:22:00,580
CentOS container will will render hollow

00:21:57,610 --> 00:22:04,890
words so we will attach to this CentOS

00:22:00,580 --> 00:22:04,890
image and to final it is look fine

00:22:08,540 --> 00:22:14,240
because a hello world we always run yeah

00:22:19,540 --> 00:22:28,260
okay so after demo the message is is

00:22:24,250 --> 00:22:28,260
finished do you have any question

00:22:44,430 --> 00:22:49,790
so if or no question yes thank you very

00:22:46,320 --> 00:22:49,790
much okay thank you

00:22:57,309 --> 00:22:59,370

YouTube URL: https://www.youtube.com/watch?v=W4O13XWy4x0


