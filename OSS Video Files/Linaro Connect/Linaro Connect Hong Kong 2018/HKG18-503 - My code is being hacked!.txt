Title: HKG18-503 - My code is being hacked!
Publication date: 2019-05-09
Playlist: Linaro Connect Hong Kong 2018
Description: 
	"Session ID: HKG18-503
Session Name: HKG18-503 - My code is being hacked!
Speaker: Joakim Bech,Ard Biesheuvel
Track: Enterprise, Security


★ Session Summary ★
We often hear that you should not invent your own crypto. In this talk we are giving an overview of what lies behind that statement by looking at some examples well known by people working with software security. In 25 minutes we will give a brief introduction to why it is so hard to write software being robust against various software and hardware attacks.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/hkg18/hkg18-503/
Presentation: http://connect.linaro.org.s3.amazonaws.com/hkg18/presentations/hkg18-503.pdf
Video: http://connect.linaro.org.s3.amazonaws.com/hkg18/videos/hkg18-503.mp4
 ---------------------------------------------------
★ Event Details ★
Linaro Connect Hong Kong 2018 (HKG18)
19-23 March 2018 
Regal Airport Hotel Hong Kong

---------------------------------------------------
Keyword: Enterprise, Security
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:01,620 --> 00:00:06,580
[Music]

00:00:14,610 --> 00:00:21,250
okay hello everyone and stop by father

00:00:18,310 --> 00:00:22,570
Jesse they speak by title and but I had

00:00:21,250 --> 00:00:26,740
to say something to get people to the

00:00:22,570 --> 00:00:29,680
top so coming here all security I can

00:00:26,740 --> 00:00:31,930
see quite a few of you here we working

00:00:29,680 --> 00:00:37,530
with security so this is one for you so

00:00:31,930 --> 00:00:40,180
sorry this is a little bit about give an

00:00:37,530 --> 00:00:41,410
introduction of peace that could go

00:00:40,180 --> 00:00:43,930
wrong I mean you're quite often here

00:00:41,410 --> 00:00:45,610
that it's hard to make right secure

00:00:43,930 --> 00:00:47,650
software and so on so we just wanted to

00:00:45,610 --> 00:00:49,060
raise some some things that could be

00:00:47,650 --> 00:00:50,890
yeah good to know

00:00:49,060 --> 00:00:54,100
so I'm here I can make I'm the lead for

00:00:50,890 --> 00:00:55,870
security group I have art here also who

00:00:54,100 --> 00:00:58,620
will fill in a little bit he's my

00:00:55,870 --> 00:00:58,620
sidekick today

00:01:05,890 --> 00:01:13,030
so the agenda why are we having this

00:01:09,790 --> 00:01:15,160
talk some terminology a little bit about

00:01:13,030 --> 00:01:18,880
the attraction to encryption modes and

00:01:15,160 --> 00:01:21,460
IV and we have to be with random number

00:01:18,880 --> 00:01:27,700
generators also touch that and finally

00:01:21,460 --> 00:01:29,620
we have the side channel attacks and as

00:01:27,700 --> 00:01:31,690
I said we would like to have this as

00:01:29,620 --> 00:01:33,820
some kind of an open or for people who

00:01:31,690 --> 00:01:37,540
are not working with secure software

00:01:33,820 --> 00:01:40,060
daily basis so you kind of know what are

00:01:37,540 --> 00:01:41,590
the challenges and we also want to

00:01:40,060 --> 00:01:45,430
spread some knowledge about well-known

00:01:41,590 --> 00:01:47,320
pitfalls and as you know with spectrum

00:01:45,430 --> 00:01:50,560
as darkness like shadow effects has been

00:01:47,320 --> 00:01:53,800
quite a hot topic lately also and or do

00:01:50,560 --> 00:01:57,460
you have a kind of a view on how this

00:01:53,800 --> 00:02:00,520
could be done also yeah yeah so this is

00:01:57,460 --> 00:02:03,759
really what I like to call the circles

00:02:00,520 --> 00:02:07,479
of enlightenment or circles of hell

00:02:03,759 --> 00:02:11,380
perhaps so well we all started

00:02:07,479 --> 00:02:14,260
programming all sorts of what the first

00:02:11,380 --> 00:02:16,950
program at some point and we all started

00:02:14,260 --> 00:02:20,680
something what you call like happy flow

00:02:16,950 --> 00:02:24,190
you write your code you only consider

00:02:20,680 --> 00:02:27,340
what's good what's what's intended God's

00:02:24,190 --> 00:02:30,100
flow is you only consider what you want

00:02:27,340 --> 00:02:34,180
to be done and you have no consideration

00:02:30,100 --> 00:02:35,890
whatsoever what could go wrong you

00:02:34,180 --> 00:02:38,980
basically move the turtle around and

00:02:35,890 --> 00:02:41,040
yeah so then there's the first level

00:02:38,980 --> 00:02:43,690
where this really starts considering

00:02:41,040 --> 00:02:45,549
okay if I call this function this is

00:02:43,690 --> 00:02:47,470
what I hope it with arrangement it will

00:02:45,549 --> 00:02:51,070
return errors it could do other things

00:02:47,470 --> 00:02:55,720
that I don't fully expect which I call

00:02:51,070 --> 00:02:58,299
level one the next level is we're aware

00:02:55,720 --> 00:02:59,830
if you get more to secure program system

00:02:58,299 --> 00:03:03,519
for again that kind of stuff where you

00:02:59,830 --> 00:03:05,380
really should be very aware of okay if I

00:03:03,519 --> 00:03:07,660
write this in C and this ends up on the

00:03:05,380 --> 00:03:10,870
stack this is going to look like this in

00:03:07,660 --> 00:03:14,530
memory if I make it static or if I do

00:03:10,870 --> 00:03:16,030
make it ghost does it actually is it

00:03:14,530 --> 00:03:17,300
actually calls from a few of the

00:03:16,030 --> 00:03:19,790
compilers actually

00:03:17,300 --> 00:03:25,550
from the view of the linker so being

00:03:19,790 --> 00:03:32,690
aware of how your code is projected onto

00:03:25,550 --> 00:03:35,690
the machine basically so for the if you

00:03:32,690 --> 00:03:38,000
go more into topics that's yo Keem is

00:03:35,690 --> 00:03:40,820
going to read then there's an additional

00:03:38,000 --> 00:03:43,100
level where you should be really aware

00:03:40,820 --> 00:03:44,840
about that you're running an actual

00:03:43,100 --> 00:03:47,480
hardware you're running on something

00:03:44,840 --> 00:03:51,650
which is basically a be analog crystal

00:03:47,480 --> 00:03:54,530
with that has been extracted from into a

00:03:51,650 --> 00:03:57,050
logical digital model but there are

00:03:54,530 --> 00:04:00,410
other things like how long it takes to

00:03:57,050 --> 00:04:03,440
do a certain operation or whether

00:04:00,410 --> 00:04:07,820
someone's poking at the clock line and

00:04:03,440 --> 00:04:13,250
what that's what effect that has on the

00:04:07,820 --> 00:04:20,239
execution of your cards and yet last

00:04:13,250 --> 00:04:27,550
night so bad here attacks so you have to

00:04:20,239 --> 00:04:32,570
if you build like a secure system a

00:04:27,550 --> 00:04:36,370
hardened system temporal system you

00:04:32,570 --> 00:04:36,370
distinguish you distinguish between

00:04:39,400 --> 00:04:47,690
being resilient to Hardware hacks that

00:04:45,010 --> 00:04:52,040
make allow it to exploit that your own

00:04:47,690 --> 00:04:55,690
system and make it do things you don't

00:04:52,040 --> 00:04:58,840
want it to and in hero tech is where you

00:04:55,690 --> 00:05:01,130
hack a system learn something from it

00:04:58,840 --> 00:05:02,720
that you can apply to other systems

00:05:01,130 --> 00:05:05,830
without even having to make them and

00:05:02,720 --> 00:05:05,830
that's a very

00:05:09,780 --> 00:05:17,530
yes yes so typically if you need to

00:05:15,700 --> 00:05:20,380
shoulder wires to something open it up

00:05:17,530 --> 00:05:21,850
to hack it in the first place and you

00:05:20,380 --> 00:05:23,530
have to do it to every system to achieve

00:05:21,850 --> 00:05:26,830
that that's usually not such a big deal

00:05:23,530 --> 00:05:28,590
if you can have to hack your system only

00:05:26,830 --> 00:05:31,510
once and you can apply to every system

00:05:28,590 --> 00:05:37,300
fire Network attack that this is the a

00:05:31,510 --> 00:05:41,680
big deal so that's something where okay

00:05:37,300 --> 00:05:45,820
thanks so let's jump into the different

00:05:41,680 --> 00:05:47,350
modes we have so these terminology so

00:05:45,820 --> 00:05:48,940
you often see these four words whether

00:05:47,350 --> 00:05:50,710
you're reading about secure soft price

00:05:48,940 --> 00:05:54,270
we have authentication integrity and

00:05:50,710 --> 00:05:56,410
confidant II and non-repudiation so

00:05:54,270 --> 00:05:57,940
authentication authentication that's

00:05:56,410 --> 00:06:01,000
when you verify your identity so you

00:05:57,940 --> 00:06:03,370
tell someone who you are and we can do

00:06:01,000 --> 00:06:05,500
that in the physical world by showing

00:06:03,370 --> 00:06:07,030
your driving slices but in the computer

00:06:05,500 --> 00:06:10,230
world we usually do it by login

00:06:07,030 --> 00:06:12,880
credentials password speed codes etc

00:06:10,230 --> 00:06:14,860
integrity is that you want to share that

00:06:12,880 --> 00:06:17,340
someone hasn't tampered with your data

00:06:14,860 --> 00:06:21,250
so that's where we typically put

00:06:17,340 --> 00:06:25,930
signatures Mac backing and so on on a

00:06:21,250 --> 00:06:28,360
software confidentiality is what we

00:06:25,930 --> 00:06:29,890
refer to as encryption so you scramble

00:06:28,360 --> 00:06:33,310
the information so no one else can just

00:06:29,890 --> 00:06:36,370
read it as a plain text and finally

00:06:33,310 --> 00:06:37,870
non-repudiation that is that you are

00:06:36,370 --> 00:06:39,730
accountable of something you have done

00:06:37,870 --> 00:06:42,670
you can't really deny it but you have

00:06:39,730 --> 00:06:48,820
made a signature we've either digitally

00:06:42,670 --> 00:06:51,040
or just by signing with other then so

00:06:48,820 --> 00:06:53,410
this takes us to the different modes

00:06:51,040 --> 00:06:56,140
you're using when you're working with

00:06:53,410 --> 00:06:59,380
encryption an ECB is the most simple one

00:06:56,140 --> 00:07:01,330
and it's fairly ever used but I want to

00:06:59,380 --> 00:07:02,920
still check here because you hear quite

00:07:01,330 --> 00:07:04,620
often that you shouldn't use it it could

00:07:02,920 --> 00:07:07,540
be good to know why

00:07:04,620 --> 00:07:10,950
so it's malleable which means that you

00:07:07,540 --> 00:07:13,570
can influence it quite easily you can

00:07:10,950 --> 00:07:16,250
basically do whatever you like with the

00:07:13,570 --> 00:07:20,750
plaintext and the ciphertext when you

00:07:16,250 --> 00:07:23,510
in our direction so another property

00:07:20,750 --> 00:07:24,860
here is that each block is individually

00:07:23,510 --> 00:07:26,540
equipped to decrypt us you have no

00:07:24,860 --> 00:07:28,880
connection between the different blocks

00:07:26,540 --> 00:07:31,310
which you have a government that we will

00:07:28,880 --> 00:07:34,280
see so you will always get the same

00:07:31,310 --> 00:07:35,810
ciphertext with a given key and all of

00:07:34,280 --> 00:07:40,190
you have probably seen this image with

00:07:35,810 --> 00:07:42,400
the penguin which ya don't have to say

00:07:40,190 --> 00:07:42,400
more

00:07:42,550 --> 00:07:48,320
so what put in that tecar do in this

00:07:45,230 --> 00:07:50,750
case a man-in-the-middle so we have a

00:07:48,320 --> 00:07:53,270
simple bank transaction here and this

00:07:50,750 --> 00:07:56,890
could be the format of the packet we

00:07:53,270 --> 00:07:59,420
have a sender is here of an amount and

00:07:56,890 --> 00:08:00,770
if David would have been the man in the

00:07:59,420 --> 00:08:03,560
middle here for example we shouldn't

00:08:00,770 --> 00:08:05,930
trust him then he could for example

00:08:03,560 --> 00:08:07,480
randomly change time out by just X for a

00:08:05,930 --> 00:08:11,870
nude selfie and the encryption

00:08:07,480 --> 00:08:14,560
encrypting the data he could rip and

00:08:11,870 --> 00:08:17,240
replace Achatz so you would get to say

00:08:14,560 --> 00:08:20,390
information again he could even change

00:08:17,240 --> 00:08:21,860
to receiver receiver so David would end

00:08:20,390 --> 00:08:25,310
up getting all the money instead of

00:08:21,860 --> 00:08:29,300
forward and these types of attacks so

00:08:25,310 --> 00:08:31,160
this is what you need to be aware of so

00:08:29,300 --> 00:08:34,780
that takes us to the other modes and

00:08:31,160 --> 00:08:37,310
quite often you hear about CBC and CTR

00:08:34,780 --> 00:08:39,589
and these are the types of mode at you

00:08:37,310 --> 00:08:41,930
in almost all cases you'd use if you

00:08:39,589 --> 00:08:45,950
have some kind of safe data size greater

00:08:41,930 --> 00:08:50,320
than the block size so apparently don't

00:08:45,950 --> 00:08:50,320
think about easily forget about it

00:08:51,160 --> 00:08:59,600
CBC is mode that you can't run it in

00:08:58,040 --> 00:09:02,300
parallel when you're doing encryption

00:08:59,600 --> 00:09:05,000
but you can encrypt your but you can do

00:09:02,300 --> 00:09:07,760
it when you run the decryption but this

00:09:05,000 --> 00:09:11,120
mode also needs study so it's subject to

00:09:07,760 --> 00:09:14,650
something called padding Oracle and with

00:09:11,120 --> 00:09:17,210
that you can given the encryption face

00:09:14,650 --> 00:09:19,550
and I wanna have the encryption image

00:09:17,210 --> 00:09:23,150
here but it's the reversed way and you

00:09:19,550 --> 00:09:26,209
can basically modify the cypher text by

00:09:23,150 --> 00:09:28,310
X or any and information and when you do

00:09:26,209 --> 00:09:30,260
that you can find a good

00:09:28,310 --> 00:09:36,500
am i doing that you can figure out the

00:09:30,260 --> 00:09:39,860
plaintext if we go into CDR which

00:09:36,500 --> 00:09:41,540
behaves as the stream cipher then you're

00:09:39,860 --> 00:09:45,260
subject to something called a two-time

00:09:41,540 --> 00:09:47,330
pad which means that you can see on this

00:09:45,260 --> 00:09:49,580
image here you basically have a key and

00:09:47,330 --> 00:09:52,250
a plain text which is X sort so you get

00:09:49,580 --> 00:09:58,220
a cipher text so if you reuse the same

00:09:52,250 --> 00:09:59,930
key more than once then you can X or the

00:09:58,220 --> 00:10:02,240
two cipher texts together which

00:09:59,930 --> 00:10:04,130
basically cancel out the key so you will

00:10:02,240 --> 00:10:06,350
enough with a plaintext that's Phoenix

00:10:04,130 --> 00:10:08,779
or together and using something called

00:10:06,350 --> 00:10:13,250
creep drag you can figure out what the

00:10:08,779 --> 00:10:15,790
pay text was and even a key and if you

00:10:13,250 --> 00:10:15,790
would like that

00:10:16,410 --> 00:10:20,850
the last part was a little bit tricky

00:10:21,690 --> 00:10:34,180
began man calls come stream which one

00:10:29,250 --> 00:10:35,800
CTO so you can see here you have if you

00:10:34,180 --> 00:10:38,260
forget about this part because this is

00:10:35,800 --> 00:10:40,780
what best is secure also but we only

00:10:38,260 --> 00:10:42,730
look at the key here and you have the

00:10:40,780 --> 00:10:47,410
plaintext you have an XOR operation and

00:10:42,730 --> 00:10:51,310
you get the ciphertext so if you use the

00:10:47,410 --> 00:10:55,420
same key twice the XOR the ciphertext

00:10:51,310 --> 00:10:57,400
here is basically key X or plaintext so

00:10:55,420 --> 00:11:02,380
if you take that with another ciphertext

00:10:57,400 --> 00:11:28,050
you get M 1 M 2 T 1 T 2 XOR together

00:11:02,380 --> 00:11:31,180
so the key cancels out you're right so

00:11:28,050 --> 00:11:32,980
but in general I mean when you need

00:11:31,180 --> 00:11:38,190
authentication which where else comes

00:11:32,980 --> 00:11:40,510
later you use some other modes of it

00:11:38,190 --> 00:11:44,160
it's actually quite interesting because

00:11:40,510 --> 00:11:46,660
if quite recently at Google engineers

00:11:44,160 --> 00:11:49,450
were concerned about full disk

00:11:46,660 --> 00:11:52,300
encryption on the older Android systems

00:11:49,450 --> 00:11:58,810
that don't have the AES instruction they

00:11:52,300 --> 00:12:00,940
try to upstream an alternative version

00:11:58,810 --> 00:12:03,430
based on ChaCha 20 which is a stream

00:12:00,940 --> 00:12:05,680
cipher for doing block encryption and

00:12:03,430 --> 00:12:07,450
when you're doing block encryption the

00:12:05,680 --> 00:12:09,520
IV is basically derived from a sector

00:12:07,450 --> 00:12:13,060
and the sector never changes the sector

00:12:09,520 --> 00:12:16,090
numbers always to say and their argument

00:12:13,060 --> 00:12:17,800
was ok so your students we shouldn't

00:12:16,090 --> 00:12:20,290
actually be using stream cipher because

00:12:17,800 --> 00:12:22,320
you could explore different generations

00:12:20,290 --> 00:12:25,690
of those locks together and you could

00:12:22,320 --> 00:12:27,449
perform this attack but because their

00:12:25,690 --> 00:12:29,560
primary

00:12:27,449 --> 00:12:34,439
the primary attack they were defending

00:12:29,560 --> 00:12:37,209
against was having the device seized and

00:12:34,439 --> 00:12:39,790
having having forensics trying to

00:12:37,209 --> 00:12:42,009
reverse the information and decrypt the

00:12:39,790 --> 00:12:43,779
information and they said so usually you

00:12:42,009 --> 00:12:46,480
will only have one generation of the

00:12:43,779 --> 00:12:48,790
block of course it's not entirely true

00:12:46,480 --> 00:12:51,160
with flash file systems either in the in

00:12:48,790 --> 00:12:53,499
where 11 layers and in the software

00:12:51,160 --> 00:12:56,110
layers that you have there might

00:12:53,499 --> 00:12:58,839
actually be different generations of the

00:12:56,110 --> 00:13:02,290
same block accessible to whoever been

00:12:58,839 --> 00:13:05,829
performing the attack which is why they

00:13:02,290 --> 00:13:07,629
ended up dropping the batches

00:13:05,829 --> 00:13:09,759
withdrawing the batches because well

00:13:07,629 --> 00:13:14,439
it's it's not secure enough and doesn't

00:13:09,759 --> 00:13:16,569
it give an appearance of security but

00:13:14,439 --> 00:13:25,899
it's really full sense of security you

00:13:16,569 --> 00:13:29,410
know checking so something called IB so

00:13:25,899 --> 00:13:31,180
this was the first time I saw this it

00:13:29,410 --> 00:13:33,309
was really strange you have to have to

00:13:31,180 --> 00:13:35,529
have some kind of run value and you

00:13:33,309 --> 00:13:37,209
don't even have to protect it but the

00:13:35,529 --> 00:13:40,300
thing is that you need to have something

00:13:37,209 --> 00:13:43,720
that gets the encryption going and

00:13:40,300 --> 00:13:45,759
that's what it's used for and as I said

00:13:43,720 --> 00:13:48,250
it doesn't have to be secret it could be

00:13:45,759 --> 00:13:50,559
a timestamp it could be a random number

00:13:48,250 --> 00:13:53,230
and it could be a sequence of numbers

00:13:50,559 --> 00:13:55,629
and that could even be more secure but

00:13:53,230 --> 00:13:57,730
in that case you need to keep track so

00:13:55,629 --> 00:14:06,009
you don't reuse the same idea again so

00:13:57,730 --> 00:14:07,750
that's it's another challenge but the

00:14:06,009 --> 00:14:10,300
key message here is that you should not

00:14:07,750 --> 00:14:12,910
reduce the same IV for a given key and

00:14:10,300 --> 00:14:18,230
message because they're not subject to

00:14:12,910 --> 00:14:22,490
what we just talked about all right

00:14:18,230 --> 00:14:24,620
that leads us into the know we said that

00:14:22,490 --> 00:14:26,120
we we have the encryption and we have

00:14:24,620 --> 00:14:30,490
some better most are chained together

00:14:26,120 --> 00:14:33,050
then we need to also have the

00:14:30,490 --> 00:14:35,300
authentication integrity protection so

00:14:33,050 --> 00:14:37,550
which order should we do it should we do

00:14:35,300 --> 00:14:41,420
encrypt and Mac or Mac then decrypt

00:14:37,550 --> 00:14:46,340
encrypted Mac who thinks that's the

00:14:41,420 --> 00:14:48,950
correct one hand up one two so the rest

00:14:46,340 --> 00:14:57,710
of you think Mac then encrypt so on the

00:14:48,950 --> 00:15:00,080
two machine you you can take some candy

00:14:57,710 --> 00:15:03,140
because you were right so you should

00:15:00,080 --> 00:15:05,300
always encrypted much because it's the

00:15:03,140 --> 00:15:07,550
same otherwise you're kind of modifying

00:15:05,300 --> 00:15:21,140
information that they should be able to

00:15:07,550 --> 00:15:22,760
do random number generators so here

00:15:21,140 --> 00:15:25,790
we're talking about the string of

00:15:22,760 --> 00:15:27,260
numbers that should be random and you

00:15:25,790 --> 00:15:33,560
have three different variants here

00:15:27,260 --> 00:15:35,960
tearin' GPMG and CSP Randi trng is true

00:15:33,560 --> 00:15:39,530
anomaly when generator you can use it

00:15:35,960 --> 00:15:41,780
hardware to have noise lock-keeper

00:15:39,530 --> 00:15:44,900
I even have a random number generator

00:15:41,780 --> 00:15:50,750
here it's a coin it's perfect random

00:15:44,900 --> 00:15:53,870
generator pseudo-random number generator

00:15:50,750 --> 00:15:56,330
that's typically what you find in C and

00:15:53,870 --> 00:16:00,290
you should use that the main reason for

00:15:56,330 --> 00:16:03,200
that is you use the random sequence give

00:16:00,290 --> 00:16:04,670
a mind initial seed so if you use the

00:16:03,200 --> 00:16:06,680
same seed again you will get the same

00:16:04,670 --> 00:16:12,710
random sequence and that's not good for

00:16:06,680 --> 00:16:15,680
crypto so you need a CSP Rd the

00:16:12,710 --> 00:16:18,200
requirement for CSP RNG is that it

00:16:15,680 --> 00:16:21,620
should be unpredictable and there are

00:16:18,200 --> 00:16:27,200
ways to tweak the PRD so it's possible

00:16:21,620 --> 00:16:30,220
to get this property and without true

00:16:27,200 --> 00:16:37,660
randomness you can't really get

00:16:30,220 --> 00:16:42,270
a reliable security so I think the bolts

00:16:37,660 --> 00:16:47,010
and underline is missing where it says

00:16:42,270 --> 00:16:49,480
so the middle parts the rent in G that's

00:16:47,010 --> 00:16:51,780
should never consider using it for

00:16:49,480 --> 00:16:57,730
anything remotely related to security

00:16:51,780 --> 00:16:59,410
it's nice to for some numerical

00:16:57,730 --> 00:17:01,720
algorithms or other things where you

00:16:59,410 --> 00:17:08,920
need some kind of random inputs but for

00:17:01,720 --> 00:17:17,800
security it's completely so on the door

00:17:08,920 --> 00:17:19,900
upon candy time again so this silly

00:17:17,800 --> 00:17:22,540
trivial example here there are some

00:17:19,900 --> 00:17:28,300
things that could be improved so any

00:17:22,540 --> 00:17:34,470
obviously spot here as you name compare

00:17:28,300 --> 00:17:34,470
well that's one right someone else mark

00:17:34,560 --> 00:17:48,780
right timing attack someone else

00:17:40,350 --> 00:17:56,830
so everyone no see yes yes that's right

00:17:48,780 --> 00:18:07,690
something else I think this is nice no

00:17:56,830 --> 00:18:09,730
verification input parameter so you yeah

00:18:07,690 --> 00:18:11,860
you basic camera but we also have the

00:18:09,730 --> 00:18:18,160
glitching attack and I will mention that

00:18:11,860 --> 00:18:21,130
too so timing attack the idea here is

00:18:18,160 --> 00:18:25,240
that you measure the time it takes to do

00:18:21,130 --> 00:18:27,640
some kind of operation and for spectral

00:18:25,240 --> 00:18:31,630
meltdown you were measuring the time it

00:18:27,640 --> 00:18:35,200
took to access the cache that's how that

00:18:31,630 --> 00:18:37,060
was used man compared if you ever think

00:18:35,200 --> 00:18:40,090
about doing that for comparing passwords

00:18:37,060 --> 00:18:43,050
forget about it you should you should

00:18:40,090 --> 00:18:49,780
not use it not the style of em compare

00:18:43,050 --> 00:18:51,250
what's this the reason from for three

00:18:49,780 --> 00:18:52,480
straight men compared is that if you

00:18:51,250 --> 00:18:55,390
look at the implementation and it

00:18:52,480 --> 00:18:57,970
compares bite by bite if it's wrong it

00:18:55,390 --> 00:18:59,740
will return immediately if it's correct

00:18:57,970 --> 00:19:03,490
it will progress through all the bites

00:18:59,740 --> 00:19:04,720
so it will take more time verifying the

00:19:03,490 --> 00:19:08,860
correct password so it's easy to

00:19:04,720 --> 00:19:15,190
brute-force table-based a yes do you

00:19:08,860 --> 00:19:16,780
want to say something about it so

00:19:15,190 --> 00:19:18,580
problem with typos based in the years is

00:19:16,780 --> 00:19:20,590
that the tables are fairly large so you

00:19:18,580 --> 00:19:26,080
have typically like 16 K worth of

00:19:20,590 --> 00:19:29,470
look-up tables that are used to

00:19:26,080 --> 00:19:31,780
basically accelerate the algorithm when

00:19:29,470 --> 00:19:34,540
you have in the series implementation

00:19:31,780 --> 00:19:39,160
and because the size of the tables you

00:19:34,540 --> 00:19:45,010
can quite easy to to measure cache to

00:19:39,160 --> 00:19:47,140
like caching effect it has you should

00:19:45,010 --> 00:19:50,020
have a constant time implementation is

00:19:47,140 --> 00:19:52,860
that which may still be if the if the

00:19:50,020 --> 00:19:55,900
tables are much smaller you can mitigate

00:19:52,860 --> 00:19:59,980
ideally use instruction based or Cindy

00:19:55,900 --> 00:20:03,060
based algorithms that are not don't

00:19:59,980 --> 00:20:03,060
depend on tables at all

00:20:03,930 --> 00:20:11,560
and the final example here is something

00:20:07,390 --> 00:20:13,930
that actually wasn't see me in opti two

00:20:11,560 --> 00:20:16,060
years ago or something we use this

00:20:13,930 --> 00:20:19,360
left-to-right implementation when do the

00:20:16,060 --> 00:20:22,120
RSA operations and what you're doing is

00:20:19,360 --> 00:20:26,560
that are you working on the exponent of

00:20:22,120 --> 00:20:29,230
the key and the trick to speed things up

00:20:26,560 --> 00:20:32,530
with this easy implementation and to our

00:20:29,230 --> 00:20:35,500
left right is that you square when the

00:20:32,530 --> 00:20:38,740
debate is zero and it's where I multiply

00:20:35,500 --> 00:20:40,240
when it's one so if you can measure this

00:20:38,740 --> 00:20:42,720
time you can basically just read out the

00:20:40,240 --> 00:20:42,720
private key

00:20:45,110 --> 00:20:51,780
so here you should strive for having

00:20:49,650 --> 00:20:53,550
this kind of balanced operation so if

00:20:51,780 --> 00:20:56,730
you if you need to compare something

00:20:53,550 --> 00:20:58,170
that leaves security you should make

00:20:56,730 --> 00:21:00,330
sure that it takes the same amount of

00:20:58,170 --> 00:21:04,380
time regardless is the correct value

00:21:00,330 --> 00:21:08,220
very correct value but compilers can be

00:21:04,380 --> 00:21:09,870
an issue so there are two helpful to try

00:21:08,220 --> 00:21:12,360
to make the best out of this and speed

00:21:09,870 --> 00:21:14,610
it up and so on so it could be important

00:21:12,360 --> 00:21:19,800
to check they'll put from the compiler

00:21:14,610 --> 00:21:22,050
here also next thing

00:21:19,800 --> 00:21:26,490
next I'd shall attack is about measuring

00:21:22,050 --> 00:21:28,020
the power it's related so when when

00:21:26,490 --> 00:21:29,910
you're running something on on the

00:21:28,020 --> 00:21:33,210
device you will have some kind of

00:21:29,910 --> 00:21:35,990
distinct pattern from basically on

00:21:33,210 --> 00:21:39,630
during runtime if you could never

00:21:35,990 --> 00:21:40,800
different amount of power that then you

00:21:39,630 --> 00:21:43,080
can figure out the same kind of

00:21:40,800 --> 00:21:46,680
information as how your children in

00:21:43,080 --> 00:21:48,840
previous life so in the square multiply

00:21:46,680 --> 00:21:52,310
examples you could use that also as a

00:21:48,840 --> 00:21:55,440
timing attack to just visualize it you

00:21:52,310 --> 00:21:57,900
can also use it to find out intermediate

00:21:55,440 --> 00:22:00,510
states in a yes to recover the key and

00:21:57,900 --> 00:22:02,250
you can figure out simple things like

00:22:00,510 --> 00:22:05,540
where is the if else if you need to do

00:22:02,250 --> 00:22:09,630
glitching attack so this is quite

00:22:05,540 --> 00:22:11,790
powerful and especially the DP a can

00:22:09,630 --> 00:22:14,070
make fees that look quite complicated

00:22:11,790 --> 00:22:16,230
when just running it once it can

00:22:14,070 --> 00:22:23,690
basically cancel it out with some

00:22:16,230 --> 00:22:27,570
statistics involved so reaching attack

00:22:23,690 --> 00:22:29,970
two ways you can inject extra clock

00:22:27,570 --> 00:22:35,280
signals like in the normal flow you just

00:22:29,970 --> 00:22:37,620
brute force something else in and it

00:22:35,280 --> 00:22:40,260
will make the CPU misbehave and if you

00:22:37,620 --> 00:22:43,500
don't have an external clock you can

00:22:40,260 --> 00:22:47,040
ground VCC for a few nanoseconds and you

00:22:43,500 --> 00:22:50,130
would get same kind of behavior this is

00:22:47,040 --> 00:22:54,450
where we have the weight and the logic

00:22:50,130 --> 00:22:56,250
is very straight here but returns here

00:22:54,450 --> 00:22:57,280
means that is not granted and once miss

00:22:56,250 --> 00:23:00,310
granted

00:22:57,280 --> 00:23:04,000
so if men compare returns something not

00:23:00,310 --> 00:23:06,790
zero then we have granted access so if

00:23:04,000 --> 00:23:10,570
we ditch during men prepare it's like

00:23:06,790 --> 00:23:14,260
high likelihood that men compared will

00:23:10,570 --> 00:23:16,210
return something not zero so even though

00:23:14,260 --> 00:23:24,850
we had incorrect password it will still

00:23:16,210 --> 00:23:28,750
return true ok so the issue is basically

00:23:24,850 --> 00:23:32,980
how we encode value right so there's

00:23:28,750 --> 00:23:36,400
only one one of all the possible values

00:23:32,980 --> 00:23:38,440
of this variable that means X is denied

00:23:36,400 --> 00:23:40,720
and every other value means access

00:23:38,440 --> 00:23:43,090
granted so you have to encode your

00:23:40,720 --> 00:23:46,240
security states this ties into the level

00:23:43,090 --> 00:23:48,880
four I mentioned earlier where where you

00:23:46,240 --> 00:23:52,120
encode values in a way that that it's

00:23:48,880 --> 00:23:56,020
it's the likelihood that someone with

00:23:52,120 --> 00:23:59,320
some attack will result in X being

00:23:56,020 --> 00:24:02,950
denied it's sort of like you've decided

00:23:59,320 --> 00:24:07,980
to end up being denied rather than being

00:24:02,950 --> 00:24:10,930
granted on the disk rancher protects and

00:24:07,980 --> 00:24:12,970
the takeaway here is that with this kind

00:24:10,930 --> 00:24:15,370
of attacks bleaching attacks is that if

00:24:12,970 --> 00:24:17,710
you read the source code everything

00:24:15,370 --> 00:24:20,590
looked perfectly fine logically I mean

00:24:17,710 --> 00:24:22,270
every sequence looks good but if you

00:24:20,590 --> 00:24:24,430
inject a bleaching attack well they've

00:24:22,270 --> 00:24:28,540
case is just ignored you just end up it

00:24:24,430 --> 00:24:30,760
coded away society to nuts there's no

00:24:28,540 --> 00:24:32,290
real good software mediations against it

00:24:30,760 --> 00:24:35,280
there are some tricks you can play but

00:24:32,290 --> 00:24:35,280
this is

00:24:45,199 --> 00:24:51,709
and so for example if Nancy MP returns

00:24:48,879 --> 00:24:55,009
true but then the inserted power bleach

00:24:51,709 --> 00:24:57,259
during writing of these zero value to

00:24:55,009 --> 00:24:58,909
the register it can end up being not

00:24:57,259 --> 00:25:01,940
pleasing to the Federal Register photo

00:24:58,909 --> 00:25:03,619
memory location and then even at this

00:25:01,940 --> 00:25:08,359
point even if they won't pass but the

00:25:03,619 --> 00:25:12,619
login button is still one sorry and to

00:25:08,359 --> 00:25:13,999
point out the the previous flight the

00:25:12,619 --> 00:25:15,679
point made in the previous slide is you

00:25:13,999 --> 00:25:18,440
may say oh well let's fix the logic

00:25:15,679 --> 00:25:20,239
started out as zero put it not in front

00:25:18,440 --> 00:25:22,759
of the mem compared and set it to one

00:25:20,239 --> 00:25:25,519
and the compiler might not even generate

00:25:22,759 --> 00:25:27,019
different code when you do that because

00:25:25,519 --> 00:25:31,909
it's trying to be helpful

00:25:27,019 --> 00:25:39,079
exactly so should we consider to change

00:25:31,909 --> 00:25:43,609
yours has evil people so about to wrap

00:25:39,079 --> 00:25:45,289
this up now so this is what you can use

00:25:43,609 --> 00:25:47,029
like the instructions from the

00:25:45,289 --> 00:25:50,089
architecture some of these are the

00:25:47,029 --> 00:25:51,679
instructions to measure the time as you

00:25:50,089 --> 00:25:54,319
know we've JTAG you can do basically

00:25:51,679 --> 00:25:55,969
everything oscilloscope logical

00:25:54,319 --> 00:25:59,449
analyzers can be used to measure the

00:25:55,969 --> 00:26:02,239
time and current or you could use

00:25:59,449 --> 00:26:05,329
special tools dedicated for this so this

00:26:02,239 --> 00:26:07,359
is a pretty cheap side channel attack

00:26:05,329 --> 00:26:11,589
tool that you can use it costs around

00:26:07,359 --> 00:26:11,589
three hundred US dollars or something

00:26:15,279 --> 00:26:21,049
and this is the finest fight I have so

00:26:18,709 --> 00:26:23,779
we we've just scratched the surface here

00:26:21,049 --> 00:26:26,199
I mean there are many roars about this

00:26:23,779 --> 00:26:31,159
but these are two really good courses

00:26:26,199 --> 00:26:33,049
lectures serious so if you want to know

00:26:31,159 --> 00:26:34,759
more about things like this and you're

00:26:33,049 --> 00:26:37,339
working with secure software then I

00:26:34,759 --> 00:26:40,999
really encourage that you have a look at

00:26:37,339 --> 00:26:45,049
these two links and that was everything

00:26:40,999 --> 00:26:47,389
for me I think we're about to run out of

00:26:45,049 --> 00:26:48,579
time I guess so maybe one or two

00:26:47,389 --> 00:26:52,050
questions

00:26:48,579 --> 00:27:04,800
John okay we have two questions you next

00:26:52,050 --> 00:27:07,500
ah sure much the perennial problem with

00:27:04,800 --> 00:27:09,530
the to chain and kind of code it

00:27:07,500 --> 00:27:12,480
generates which tries to be very helpful

00:27:09,530 --> 00:27:14,370
is there some tooling which helps which

00:27:12,480 --> 00:27:17,040
can be used or some sort of scripting

00:27:14,370 --> 00:27:19,410
that can be used at least detect this

00:27:17,040 --> 00:27:22,650
kind of problems in the final Barney

00:27:19,410 --> 00:27:24,390
output and then do something about it

00:27:22,650 --> 00:27:26,640
later on so I think the first question

00:27:24,390 --> 00:27:29,820
would be is there something that allows

00:27:26,640 --> 00:27:33,300
us to do the detection and the same

00:27:29,820 --> 00:27:35,670
question is yeah I should probably not

00:27:33,300 --> 00:27:37,470
ask but I don't really know about us but

00:27:35,670 --> 00:27:41,610
I think you can use in some case you can

00:27:37,470 --> 00:27:47,820
use like volatile to make sure that the

00:27:41,610 --> 00:27:49,770
compiler doesn't do anything started or

00:27:47,820 --> 00:28:03,930
zero right sounds like a good idea yeah

00:27:49,770 --> 00:28:05,790
so yeah so um on that note rate what

00:28:03,930 --> 00:28:07,260
they do when they're manufacturing a lot

00:28:05,790 --> 00:28:09,450
of SBC's now is there are third-party

00:28:07,260 --> 00:28:11,220
consulting companies that will do

00:28:09,450 --> 00:28:13,080
differential power analysis attacks

00:28:11,220 --> 00:28:14,400
against it and they'll tell you you

00:28:13,080 --> 00:28:15,840
screwed up here you screwed up here you

00:28:14,400 --> 00:28:18,930
screwed up here so we can do that we can

00:28:15,840 --> 00:28:20,550
do constant time operations lots of

00:28:18,930 --> 00:28:22,290
changes we can make but fundamentally I

00:28:20,550 --> 00:28:23,780
think the point is to draw awareness and

00:28:22,290 --> 00:28:25,860
tell people as you're building chips

00:28:23,780 --> 00:28:27,960
there's a reader the reason you pay

00:28:25,860 --> 00:28:30,570
those consultants to tear it apart

00:28:27,960 --> 00:28:32,250
because you know you can change detect a

00:28:30,570 --> 00:28:34,650
memory bit flip in some code somewhere

00:28:32,250 --> 00:28:36,180
but it you know who knows it's not doing

00:28:34,650 --> 00:28:38,220
it flips in your cache or something else

00:28:36,180 --> 00:28:39,330
I mean this is one example but really

00:28:38,220 --> 00:28:44,580
you got to get people to tear it apart

00:28:39,330 --> 00:28:46,770
and actually find the problems no one

00:28:44,580 --> 00:28:49,420
else

00:28:46,770 --> 00:28:50,830
basically I would add another source to

00:28:49,420 --> 00:28:52,690
your last slide

00:28:50,830 --> 00:28:57,520
being the applied photography by Neil

00:28:52,690 --> 00:29:00,010
Ferguson and yeah sorry I would hope I

00:28:57,520 --> 00:29:02,590
would add another source to your last

00:29:00,010 --> 00:29:05,920
slide the applied photography by Neil

00:29:02,590 --> 00:29:08,280
Ferguson because well okay it's doing

00:29:05,920 --> 00:29:11,800
binding to me and they might because

00:29:08,280 --> 00:29:14,290
it's a really and a really good source

00:29:11,800 --> 00:29:15,700
for the recites what you should do what

00:29:14,290 --> 00:29:17,230
you should not do your from the

00:29:15,700 --> 00:29:19,990
theoretical perspective want to be like

00:29:17,230 --> 00:29:22,000
the cursor so of course but just from

00:29:19,990 --> 00:29:23,830
below sighs put the via just an engineer

00:29:22,000 --> 00:29:25,840
just do these things and these it is not

00:29:23,830 --> 00:29:29,980
up to date unfortunately parts it's

00:29:25,840 --> 00:29:31,630
still a good thing - okay well that's

00:29:29,980 --> 00:29:33,810
wraps it up so thanks everyone for

00:29:31,630 --> 00:29:33,810
attending

00:29:41,180 --> 00:29:43,240

YouTube URL: https://www.youtube.com/watch?v=5tkezPdQ1J0


