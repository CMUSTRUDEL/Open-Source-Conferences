Title: LVC20-219 Arm Virtualization fireside chat and project Stratos
Publication date: 2020-09-21
Playlist: Linaro Virtual Connect 2020
Description: 
	Chat with the speakers of LVC20-219 Arm Virtualization fireside chat and project Stratos by joining the slack channel here: https://linaroconnect.slack.com/archives/C01BFJJNUTB

Virtualization fireside chat moderated by Mike Holmes Director of Engineering Foundational Technologies at Linaro featuring guests: Azzedine Touzni Sr. Director of Engineering at Qualcomm, Alex BennÃ©e Sr. Software engineer at Linaro.

This fireside chat covers topics such as the current challenges in the virtualization domain, the state of virtualization on Arm, the end vision for Stratos, how to get involved, and more...
Captions: 
	00:00:01,920 --> 00:00:06,319
okay

00:00:03,280 --> 00:00:06,960
welcome everyone uh this is a fireside

00:00:06,319 --> 00:00:09,040
chat

00:00:06,960 --> 00:00:11,120
regarding lenaro's work surrounding

00:00:09,040 --> 00:00:13,920
virtualization on arm

00:00:11,120 --> 00:00:15,839
with me is alex bernay who's a senior

00:00:13,920 --> 00:00:17,359
engineer at the narrow and a queen view

00:00:15,839 --> 00:00:19,920
maintainer

00:00:17,359 --> 00:00:20,720
and azadeen who's a senior director of

00:00:19,920 --> 00:00:25,680
technology

00:00:20,720 --> 00:00:25,680
at hong kong hi max

00:00:28,080 --> 00:00:33,120
so i guess we should start um

00:00:31,119 --> 00:00:35,520
maybe alex what is the state of

00:00:33,120 --> 00:00:38,559
virtualization on arm

00:00:35,520 --> 00:00:39,600
um certainly for uh virtualization in

00:00:38,559 --> 00:00:41,760
the enterprise

00:00:39,600 --> 00:00:42,879
we're pretty fast approaching feature

00:00:41,760 --> 00:00:46,079
priority with

00:00:42,879 --> 00:00:47,920
x86 so virtualization on arm is

00:00:46,079 --> 00:00:49,520
already production ready it's available

00:00:47,920 --> 00:00:52,000
in all the major distributions

00:00:49,520 --> 00:00:52,879
and you can run your traditional cloud

00:00:52,000 --> 00:00:54,559
workloads

00:00:52,879 --> 00:00:56,160
and as well as some of the newer

00:00:54,559 --> 00:00:58,960
container isolation type

00:00:56,160 --> 00:01:00,879
workloads there's still a little bit of

00:00:58,960 --> 00:01:02,719
work on architectural features that are

00:01:00,879 --> 00:01:05,680
still coming through so things like

00:01:02,719 --> 00:01:08,560
nested virtualization uh in the sort of

00:01:05,680 --> 00:01:11,439
more advanced ticks of arm

00:01:08,560 --> 00:01:12,000
and there are some places where x86 has

00:01:11,439 --> 00:01:13,520
got got

00:01:12,000 --> 00:01:15,040
new stuff which we don't have an

00:01:13,520 --> 00:01:17,280
equivalent for yet

00:01:15,040 --> 00:01:19,600
so probably the biggest one is secure

00:01:17,280 --> 00:01:21,759
virtualization

00:01:19,600 --> 00:01:24,720
but uh on the embedded side i think

00:01:21,759 --> 00:01:24,720
things are a little different

00:01:24,880 --> 00:01:30,640
yeah i think that's right alex i mean um

00:01:28,240 --> 00:01:32,479
yeah i think virtualization is not new

00:01:30,640 --> 00:01:36,400
it's not a new concept

00:01:32,479 --> 00:01:37,840
there's been many dozens or many years

00:01:36,400 --> 00:01:40,560
have been put

00:01:37,840 --> 00:01:41,439
in virtualization by very brilliant and

00:01:40,560 --> 00:01:44,560
uh

00:01:41,439 --> 00:01:46,479
and smoker uh architects so but

00:01:44,560 --> 00:01:47,759
with respect to rom i think there's a

00:01:46,479 --> 00:01:51,280
few things that

00:01:47,759 --> 00:01:53,040
probably stand out so has as i agree

00:01:51,280 --> 00:01:55,600
with your rich

00:01:53,040 --> 00:01:57,920
priority on cpu definitely maybe even

00:01:55,600 --> 00:01:59,600
more than priority in some cases

00:01:57,920 --> 00:02:02,560
and they have also worked on a very

00:01:59,600 --> 00:02:04,640
fundamental building block and hardware

00:02:02,560 --> 00:02:05,680
like i see mmus like virtualization

00:02:04,640 --> 00:02:08,879
logic

00:02:05,680 --> 00:02:11,920
and those concepts and techniques and

00:02:08,879 --> 00:02:15,280
architecture in general has been

00:02:11,920 --> 00:02:18,239
there for more than 10 years now um

00:02:15,280 --> 00:02:18,640
but you're right i think in terms of um

00:02:18,239 --> 00:02:20,239
maybe

00:02:18,640 --> 00:02:22,879
still work in progress i would say i'm

00:02:20,239 --> 00:02:26,080
buried it's still something that

00:02:22,879 --> 00:02:27,440
very much concerns us and and perhaps

00:02:26,080 --> 00:02:31,440
more than i'm buried

00:02:27,440 --> 00:02:34,840
it's this notion of um i would say maybe

00:02:31,440 --> 00:02:36,160
an affliction point around a terrorist

00:02:34,840 --> 00:02:38,160
computer

00:02:36,160 --> 00:02:40,560
which is perhaps some more for better

00:02:38,160 --> 00:02:44,080
descriptions of where

00:02:40,560 --> 00:02:46,480
the needs are today and typically this

00:02:44,080 --> 00:02:48,080
gets characterized by very simple things

00:02:46,480 --> 00:02:50,640
that differentiate them from

00:02:48,080 --> 00:02:52,400
from futurization in the enterprise

00:02:50,640 --> 00:02:56,000
world and also

00:02:52,400 --> 00:02:58,560
really that more computer joints

00:02:56,000 --> 00:02:59,360
there is more ios there's some different

00:02:58,560 --> 00:03:02,319
differences

00:02:59,360 --> 00:03:03,280
as well in terms of topology you have

00:03:02,319 --> 00:03:06,400
for instance

00:03:03,280 --> 00:03:07,040
notions of master slave future measuring

00:03:06,400 --> 00:03:09,599
but

00:03:07,040 --> 00:03:11,840
maybe not as not are not as prevalent in

00:03:09,599 --> 00:03:14,640
the enterprise world

00:03:11,840 --> 00:03:16,239
and of course there's always embedded uh

00:03:14,640 --> 00:03:17,200
requirements that have to do usually

00:03:16,239 --> 00:03:20,879
with power

00:03:17,200 --> 00:03:20,879
and and cost

00:03:22,159 --> 00:03:25,840
this i think also something which is

00:03:24,080 --> 00:03:27,280
perhaps a little bit more different than

00:03:25,840 --> 00:03:28,959
enterprise

00:03:27,280 --> 00:03:31,120
and the context of the intelligence

00:03:28,959 --> 00:03:32,319
compute or method which has to do with

00:03:31,120 --> 00:03:35,360
the uh

00:03:32,319 --> 00:03:36,159
uh how do we um see ourselves engaging

00:03:35,360 --> 00:03:38,239
with the young

00:03:36,159 --> 00:03:39,599
user which in our case is not

00:03:38,239 --> 00:03:43,200
necessarily the consumer

00:03:39,599 --> 00:03:45,200
or or the the user as you can see it

00:03:43,200 --> 00:03:47,360
like on the enterprise work but it could

00:03:45,200 --> 00:03:49,680
be some

00:03:47,360 --> 00:03:51,440
you know entity that's in between that

00:03:49,680 --> 00:03:53,599
and in that value chain basically

00:03:51,440 --> 00:03:54,959
and so that has a different that i make

00:03:53,599 --> 00:03:58,319
in terms of how we want to

00:03:54,959 --> 00:03:58,319
address specific problems

00:03:58,400 --> 00:04:02,319
okay thanks says dean so if we had these

00:04:01,680 --> 00:04:05,680
two

00:04:02,319 --> 00:04:07,360
markets the server and um embedded

00:04:05,680 --> 00:04:09,360
does that account for the sort of the

00:04:07,360 --> 00:04:12,480
difference in popularity between type

00:04:09,360 --> 00:04:15,439
one and type two hypervisors

00:04:12,480 --> 00:04:16,799
yeah i mean very much so so because

00:04:15,439 --> 00:04:18,560
linux drives

00:04:16,799 --> 00:04:20,479
pretty much all of the of the enterprise

00:04:18,560 --> 00:04:23,919
usage certainly in the cloud

00:04:20,479 --> 00:04:26,479
um and the default hypervisor

00:04:23,919 --> 00:04:29,360
for linux is is kvm it's very much

00:04:26,479 --> 00:04:30,639
designed around a type 2 model

00:04:29,360 --> 00:04:33,120
so there have been architectural

00:04:30,639 --> 00:04:35,520
improvements to arm that narrows the gap

00:04:33,120 --> 00:04:38,160
so the virtualization host extensions

00:04:35,520 --> 00:04:39,199
um allow linux running in in this sort

00:04:38,160 --> 00:04:41,520
of type 2 mode to

00:04:39,199 --> 00:04:43,520
run a lot more closely to the way kvm is

00:04:41,520 --> 00:04:46,240
designed

00:04:43,520 --> 00:04:47,360
but the original architecture for arms

00:04:46,240 --> 00:04:50,720
virtualization was

00:04:47,360 --> 00:04:53,199
indeed based around a type 1 zen style

00:04:50,720 --> 00:04:53,759
hypervisor and there are good reasons

00:04:53,199 --> 00:04:56,240
for this

00:04:53,759 --> 00:04:57,680
i mean type 1 hypervisors tend to be a

00:04:56,240 --> 00:04:59,360
lot smaller so they're usually a

00:04:57,680 --> 00:05:02,000
lot less code which makes them better

00:04:59,360 --> 00:05:02,800
from a auditing and reasoning point of

00:05:02,000 --> 00:05:04,960
view

00:05:02,800 --> 00:05:06,400
and for this reason is they've tended to

00:05:04,960 --> 00:05:08,560
be favored for things like

00:05:06,400 --> 00:05:10,400
safety critical work or where you have

00:05:08,560 --> 00:05:11,759
you know very well defined systems very

00:05:10,400 --> 00:05:15,600
well bounded systems

00:05:11,759 --> 00:05:15,600
that you want to completely understand

00:05:16,400 --> 00:05:20,400
yeah i i tend to share that with you as

00:05:18,400 --> 00:05:22,560
well i think

00:05:20,400 --> 00:05:23,840
from my perspective is let me step back

00:05:22,560 --> 00:05:26,240
a little bit and try to define this

00:05:23,840 --> 00:05:30,800
notion of type one or type two

00:05:26,240 --> 00:05:34,160
um in some sense i view this as a

00:05:30,800 --> 00:05:36,080
sort of uh maybe an academic concept to

00:05:34,160 --> 00:05:38,320
artist

00:05:36,080 --> 00:05:39,360
it used to be very clear and now lines

00:05:38,320 --> 00:05:42,080
are getting a bit

00:05:39,360 --> 00:05:43,039
more blurry but really in another chair

00:05:42,080 --> 00:05:45,120
if we had to con

00:05:43,039 --> 00:05:46,800
conceptualize with type 1 and type 2 for

00:05:45,120 --> 00:05:47,759
those that are not necessarily familiar

00:05:46,800 --> 00:05:50,160
with naturalization

00:05:47,759 --> 00:05:51,120
the type 1 is essentially an

00:05:50,160 --> 00:05:54,800
infrastructure

00:05:51,120 --> 00:05:56,960
layer of logic software and hardware

00:05:54,800 --> 00:05:58,880
that filters the access to the hardware

00:05:56,960 --> 00:06:01,120
so it's a filter

00:05:58,880 --> 00:06:02,720
by a large extent so it could be viewed

00:06:01,120 --> 00:06:05,520
as an access control

00:06:02,720 --> 00:06:06,240
and an entity that manages access to the

00:06:05,520 --> 00:06:09,600
hardware

00:06:06,240 --> 00:06:12,000
and so on and so forth whether type 2 is

00:06:09,600 --> 00:06:14,560
very simple a conceptual term is maybe

00:06:12,000 --> 00:06:16,639
something involved in the

00:06:14,560 --> 00:06:19,120
a layer an abstraction arrow that

00:06:16,639 --> 00:06:21,440
emulates the hardware

00:06:19,120 --> 00:06:22,160
and and if you take those two concepts

00:06:21,440 --> 00:06:25,759
and you

00:06:22,160 --> 00:06:28,400
uh and you assimilate them then you can

00:06:25,759 --> 00:06:29,840
quickly see that there's uh really a

00:06:28,400 --> 00:06:31,680
continuum of options that

00:06:29,840 --> 00:06:33,360
can exist particularly between the type

00:06:31,680 --> 00:06:36,479
one and type two

00:06:33,360 --> 00:06:38,400
uh so um although

00:06:36,479 --> 00:06:40,240
people still refer to type one and type

00:06:38,400 --> 00:06:43,280
two in practice we see all sort of

00:06:40,240 --> 00:06:46,000
combinations and implementation that uh

00:06:43,280 --> 00:06:46,880
could have flavors of each one of us of

00:06:46,000 --> 00:06:50,240
those

00:06:46,880 --> 00:06:51,199
concepts now i totally agree with alex

00:06:50,240 --> 00:06:53,840
in the sense that

00:06:51,199 --> 00:06:55,280
type 1 is usually geared towards

00:06:53,840 --> 00:06:57,599
security

00:06:55,280 --> 00:06:59,039
and tends to be a little bit more

00:06:57,599 --> 00:07:02,080
intensity lighter

00:06:59,039 --> 00:07:04,080
and more well defined whereas type 2

00:07:02,080 --> 00:07:06,479
uh because of their interactions with

00:07:04,080 --> 00:07:07,280
their users and the ways directly has

00:07:06,479 --> 00:07:11,360
evolved

00:07:07,280 --> 00:07:11,360
tends to be more rich in teachers and

00:07:12,080 --> 00:07:17,440
more open in some sense but

00:07:15,120 --> 00:07:18,960
from a from our perspective and the

00:07:17,440 --> 00:07:21,360
qualcomm's perspective is

00:07:18,960 --> 00:07:23,120
i think we still do have a bias towards

00:07:21,360 --> 00:07:25,680
the typewriter professor

00:07:23,120 --> 00:07:26,560
mostly because most of our platform are

00:07:25,680 --> 00:07:29,759
focused on

00:07:26,560 --> 00:07:31,280
embedded or technology and that has

00:07:29,759 --> 00:07:32,720
usually requirements for high

00:07:31,280 --> 00:07:36,160
performance

00:07:32,720 --> 00:07:38,000
and i i would say closer control to

00:07:36,160 --> 00:07:39,280
how the software interacts with the

00:07:38,000 --> 00:07:42,639
hardware

00:07:39,280 --> 00:07:45,680
and so type one is usually the

00:07:42,639 --> 00:07:47,199
approach we would prefer uh now

00:07:45,680 --> 00:07:50,240
there's some southern keys as well in

00:07:47,199 --> 00:07:51,919
terms of type rhino type 2 that

00:07:50,240 --> 00:07:53,759
are not described in the context of what

00:07:51,919 --> 00:07:56,879
they're supposed to be doing but how

00:07:53,759 --> 00:07:58,000
they get used so the type 1 for instance

00:07:56,879 --> 00:07:59,840
is something that

00:07:58,000 --> 00:08:01,759
typically you will think of has been

00:07:59,840 --> 00:08:04,960
delivered by the src

00:08:01,759 --> 00:08:05,440
by the soc vendors therefore some sort

00:08:04,960 --> 00:08:08,160
of

00:08:05,440 --> 00:08:09,680
implicit scholarship or a sense of

00:08:08,160 --> 00:08:11,199
control around it

00:08:09,680 --> 00:08:13,280
and whereas attack too technically

00:08:11,199 --> 00:08:15,120
speaking and any user can download a

00:08:13,280 --> 00:08:17,199
hypervisor and and

00:08:15,120 --> 00:08:18,720
and make it work but that's those are

00:08:17,199 --> 00:08:20,400
the typical

00:08:18,720 --> 00:08:23,199
examples you'll see for instance on the

00:08:20,400 --> 00:08:25,759
computing pc and so on and so forth

00:08:23,199 --> 00:08:26,560
so yeah different approach some of our

00:08:25,759 --> 00:08:28,479
lap

00:08:26,560 --> 00:08:31,440
are definitely a bias on our side

00:08:28,479 --> 00:08:31,440
towards type one

00:08:31,520 --> 00:08:34,959
thanks i think excellent question

00:08:35,279 --> 00:08:39,519
so we have sort of talked a little bit

00:08:37,519 --> 00:08:40,080
about the different use cases server

00:08:39,519 --> 00:08:43,760
embedded

00:08:40,080 --> 00:08:47,360
and type one type two um so that that's

00:08:43,760 --> 00:08:49,040
quite a range of problems um what do we

00:08:47,360 --> 00:08:50,880
see as the split of who's

00:08:49,040 --> 00:08:54,720
who's working on these problems between

00:08:50,880 --> 00:08:57,920
arm the narrow the narrows members

00:08:54,720 --> 00:08:59,040
um well so obviously arm are responsible

00:08:57,920 --> 00:09:00,880
for the architecture

00:08:59,040 --> 00:09:03,120
themselves so they define the the key

00:09:00,880 --> 00:09:06,160
architectural behavior of the

00:09:03,120 --> 00:09:06,480
cpu the processor itself and a bunch of

00:09:06,160 --> 00:09:08,640
the

00:09:06,480 --> 00:09:10,240
associated devices so things like the

00:09:08,640 --> 00:09:13,519
virtual interrupt controller

00:09:10,240 --> 00:09:14,560
the iomu things like that

00:09:13,519 --> 00:09:17,440
and they do quite a lot of the

00:09:14,560 --> 00:09:20,320
foundational work uh in terms of

00:09:17,440 --> 00:09:22,560
supporting kvm in the kernel and zen

00:09:20,320 --> 00:09:25,680
that sort of thing uh

00:09:22,560 --> 00:09:26,640
lenaro uh tends to work more at the high

00:09:25,680 --> 00:09:29,760
level so we not

00:09:26,640 --> 00:09:32,080
we do do um work on kvm but we also work

00:09:29,760 --> 00:09:33,920
predominantly on kwemu which is a

00:09:32,080 --> 00:09:35,200
piece of software that's quite commonly

00:09:33,920 --> 00:09:37,760
used certainly in the

00:09:35,200 --> 00:09:39,839
in the type 2 setting that we're talking

00:09:37,760 --> 00:09:42,080
about for launching virtual machines

00:09:39,839 --> 00:09:43,600
and that's something that arm have

00:09:42,080 --> 00:09:44,800
chosen not to work on at all they could

00:09:43,600 --> 00:09:46,959
they don't really want to touch that

00:09:44,800 --> 00:09:48,320
code base so that's a place where linaro

00:09:46,959 --> 00:09:50,080
leads

00:09:48,320 --> 00:09:51,760
and then of course we've got work uh

00:09:50,080 --> 00:09:54,000
from all our members members uh

00:09:51,760 --> 00:09:55,920
contribute across the the entire stack

00:09:54,000 --> 00:09:58,480
so all the way down to the kernel

00:09:55,920 --> 00:09:59,360
uh including uh things like cremeuan and

00:09:58,480 --> 00:10:01,920
other tools

00:09:59,360 --> 00:10:04,079
uh quite often member work goes through

00:10:01,920 --> 00:10:07,519
um maintainer trees that uh

00:10:04,079 --> 00:10:10,079
are maintained by linaro uh and as

00:10:07,519 --> 00:10:11,279
a dean has mentioned uh also a lot of

00:10:10,079 --> 00:10:13,519
our members have their own

00:10:11,279 --> 00:10:17,040
uh hypervisors which they they maintain

00:10:13,519 --> 00:10:17,040
as proprietary offerings

00:10:17,279 --> 00:10:20,640
yeah i guess i have a slightly uh

00:10:19,200 --> 00:10:23,040
actually have a shape

00:10:20,640 --> 00:10:25,360
a lot of what alex uh you just said here

00:10:23,040 --> 00:10:26,720
but maybe if i can add to it i was going

00:10:25,360 --> 00:10:28,000
to say a slightly different view which

00:10:26,720 --> 00:10:31,040
is not sure but maybe

00:10:28,000 --> 00:10:32,720
a complementary view which is that arm

00:10:31,040 --> 00:10:34,640
has been of course historically

00:10:32,720 --> 00:10:36,720
uh driving the architecture and has been

00:10:34,640 --> 00:10:39,680
tremendously successful

00:10:36,720 --> 00:10:41,519
a lot of the success coming explicitly

00:10:39,680 --> 00:10:45,279
or implicitly through

00:10:41,519 --> 00:10:48,320
collaborations with you know his

00:10:45,279 --> 00:10:51,200
customers and the

00:10:48,320 --> 00:10:51,760
the uh the community by and large uh

00:10:51,200 --> 00:10:55,440
software

00:10:51,760 --> 00:10:58,480
hardware but there's some evolution so

00:10:55,440 --> 00:11:00,560
i was more recently been also

00:10:58,480 --> 00:11:02,160
providing what used to be some

00:11:00,560 --> 00:11:03,600
guidelines for

00:11:02,160 --> 00:11:06,720
how the hardware needs to be used and

00:11:03,600 --> 00:11:08,560
those have evolved in some cases into a

00:11:06,720 --> 00:11:10,480
specification called firmware

00:11:08,560 --> 00:11:12,800
specifications or middleware but the

00:11:10,480 --> 00:11:14,640
sort of form within that category

00:11:12,800 --> 00:11:15,920
that starts to define how the hardware

00:11:14,640 --> 00:11:18,320
should be used in java

00:11:15,920 --> 00:11:20,079
and it it has been a gap for that for a

00:11:18,320 --> 00:11:23,440
long time so that that

00:11:20,079 --> 00:11:25,600
that's a very welcome uh addition to the

00:11:23,440 --> 00:11:26,640
to the portfolio which of course fits

00:11:25,600 --> 00:11:28,720
very well and

00:11:26,640 --> 00:11:30,240
aligns very well with what you know is

00:11:28,720 --> 00:11:33,440
doing in terms of

00:11:30,240 --> 00:11:36,079
more abstract and uh usage

00:11:33,440 --> 00:11:36,880
um but i think from a risk from the

00:11:36,079 --> 00:11:39,040
perspective of

00:11:36,880 --> 00:11:40,720
members of our members in terms of how

00:11:39,040 --> 00:11:42,640
we can contribute and that's a question

00:11:40,720 --> 00:11:46,399
i ask myself always

00:11:42,640 --> 00:11:48,480
quite often uh there's probably a

00:11:46,399 --> 00:11:49,920
very obvious aspect to this which has to

00:11:48,480 --> 00:11:53,760
do with the

00:11:49,920 --> 00:11:56,800
um what are the use cases we're trying

00:11:53,760 --> 00:11:59,120
to solve that get expressed by our

00:11:56,800 --> 00:12:01,040
customers or the needs we see in the

00:11:59,120 --> 00:12:04,720
field through

00:12:01,040 --> 00:12:07,920
through the engagement we have

00:12:04,720 --> 00:12:09,200
our partners and so being able to bring

00:12:07,920 --> 00:12:12,160
the use case back to

00:12:09,200 --> 00:12:13,760
arm and narrow and work on the sort of

00:12:12,160 --> 00:12:15,200
common problems together

00:12:13,760 --> 00:12:17,519
i think it's probably one of the most

00:12:15,200 --> 00:12:20,800
critical aspects here so

00:12:17,519 --> 00:12:22,800
in general we tend to have similar ideas

00:12:20,800 --> 00:12:24,800
of similar problems to solve and serving

00:12:22,800 --> 00:12:26,480
them in one place is definitely

00:12:24,800 --> 00:12:28,160
the thing that makes sense for us at

00:12:26,480 --> 00:12:30,480
least um

00:12:28,160 --> 00:12:32,320
and again there's a large picture of in

00:12:30,480 --> 00:12:33,760
our members it's people focused on

00:12:32,320 --> 00:12:35,360
software

00:12:33,760 --> 00:12:37,920
for sounds like google i won't speak for

00:12:35,360 --> 00:12:38,560
them of course and ssc vendors which i'm

00:12:37,920 --> 00:12:42,160
a little more

00:12:38,560 --> 00:12:45,200
part of uh and we do have like concrete

00:12:42,160 --> 00:12:48,399
things we think we can bring in terms of

00:12:45,200 --> 00:12:51,600
interactions with the uh with the arm

00:12:48,399 --> 00:12:51,600
ecosystem and the narrow

00:12:51,680 --> 00:12:58,160
now i'll add one aspect here which is um

00:12:55,040 --> 00:13:00,800
uh i think of use but maybe uh worth

00:12:58,160 --> 00:13:02,240
uh mentioning uh which has to do with

00:13:00,800 --> 00:13:04,720
the fact that

00:13:02,240 --> 00:13:06,160
uh on the soc we developed nothing but

00:13:04,720 --> 00:13:07,760
the disarm unfortunately

00:13:06,160 --> 00:13:09,600
or fortunately depending on what the

00:13:07,760 --> 00:13:13,200
position you take

00:13:09,600 --> 00:13:15,920
and so well arm defines a lot

00:13:13,200 --> 00:13:18,560
of the cpu hardware architecture and

00:13:15,920 --> 00:13:20,079
alex also mentioned that a lot of

00:13:18,560 --> 00:13:22,000
infrastructure components hardware

00:13:20,079 --> 00:13:22,720
infrastructure compounds we still have

00:13:22,000 --> 00:13:26,160
ips

00:13:22,720 --> 00:13:28,079
like not i don't have arm architecture

00:13:26,160 --> 00:13:31,120
specification for stuff you know

00:13:28,079 --> 00:13:32,160
things like an mpu or gpu don't fully

00:13:31,120 --> 00:13:35,279
form

00:13:32,160 --> 00:13:36,399
strictly speaking in the context of an

00:13:35,279 --> 00:13:38,320
armed specification

00:13:36,399 --> 00:13:40,560
and breaking that glue logic and making

00:13:38,320 --> 00:13:44,000
all of those things work together

00:13:40,560 --> 00:13:45,600
uh i think that's uh that's

00:13:44,000 --> 00:13:48,000
that's essentially the key challenges we

00:13:45,600 --> 00:13:49,760
have but certainly from our perspective

00:13:48,000 --> 00:13:51,440
bringing the use cases and problems we

00:13:49,760 --> 00:13:53,519
have is sort of

00:13:51,440 --> 00:13:55,279
one of the most straightforward

00:13:53,519 --> 00:13:58,000
contributions we can bring i think we

00:13:55,279 --> 00:14:00,720
can make perhaps

00:13:58,000 --> 00:14:02,480
so so answering do you have a short

00:14:00,720 --> 00:14:06,000
summary of the challenges

00:14:02,480 --> 00:14:07,600
faced in the virtualization domain yeah

00:14:06,000 --> 00:14:10,639
i think it's yeah this is a very very

00:14:07,600 --> 00:14:10,639
good question so um

00:14:11,199 --> 00:14:14,839
i think i was saying abstract maybe

00:14:13,760 --> 00:14:17,600
precise

00:14:14,839 --> 00:14:19,839
terms um

00:14:17,600 --> 00:14:21,199
challenges really far in turn around its

00:14:19,839 --> 00:14:23,920
notions of

00:14:21,199 --> 00:14:24,880
having to manage a very fluid software

00:14:23,920 --> 00:14:27,199
while you have

00:14:24,880 --> 00:14:28,639
fluid boundaries on software to be more

00:14:27,199 --> 00:14:31,199
specific

00:14:28,639 --> 00:14:31,920
and i explain what that is uh as well as

00:14:31,199 --> 00:14:33,279
complexity

00:14:31,920 --> 00:14:35,279
it's tremendous complexity and

00:14:33,279 --> 00:14:38,880
virtualization which is

00:14:35,279 --> 00:14:40,800
uh again put ourselves on myself in the

00:14:38,880 --> 00:14:42,000
context of this heterogeneous walls we

00:14:40,800 --> 00:14:44,480
just talked about

00:14:42,000 --> 00:14:45,920
you can have to imagine like a system on

00:14:44,480 --> 00:14:49,199
ship with like 10

00:14:45,920 --> 00:14:50,000
to 20 hardware accelerators and hardware

00:14:49,199 --> 00:14:52,880
components

00:14:50,000 --> 00:14:54,880
a computer agent if you can if you will

00:14:52,880 --> 00:14:55,680
that have to interact between each other

00:14:54,880 --> 00:14:58,800
and

00:14:55,680 --> 00:15:01,120
think of it as a network a network of

00:14:58,800 --> 00:15:01,920
agents that have to talk to each other

00:15:01,120 --> 00:15:05,760
share that eye

00:15:01,920 --> 00:15:08,959
etc that complexity grows

00:15:05,760 --> 00:15:11,120
very quickly um like

00:15:08,959 --> 00:15:12,000
you know as a you know as a factor i was

00:15:11,120 --> 00:15:14,720
going to say exponential

00:15:12,000 --> 00:15:16,560
but it's more like a combinatorial uh

00:15:14,720 --> 00:15:18,079
growth

00:15:16,560 --> 00:15:19,600
so those are really the issues we have

00:15:18,079 --> 00:15:22,399
to face is take the

00:15:19,600 --> 00:15:24,399
virtualization on cpu and turn it into

00:15:22,399 --> 00:15:24,720
something that works not just for cpu

00:15:24,399 --> 00:15:28,800
but

00:15:24,720 --> 00:15:28,800
also of hardware agent

00:15:29,920 --> 00:15:35,600
so if we place ourselves on the end

00:15:34,240 --> 00:15:37,600
user's perspective which

00:15:35,600 --> 00:15:39,279
uh something we have to do at least like

00:15:37,600 --> 00:15:41,839
yes but literally a lot of us

00:15:39,279 --> 00:15:41,839
try to do that

00:15:42,800 --> 00:15:47,120
so what it means really is the at the

00:15:46,000 --> 00:15:49,680
end of the day

00:15:47,120 --> 00:15:50,639
right the user will request some

00:15:49,680 --> 00:15:52,320
flexibility

00:15:50,639 --> 00:15:53,759
and some ownership on how they want to

00:15:52,320 --> 00:15:57,279
exercise that hardware

00:15:53,759 --> 00:16:00,000
in a way that's more uh detailed like

00:15:57,279 --> 00:16:02,720
what we have today for instance and

00:16:00,000 --> 00:16:03,519
maybe in the traditional virtual world

00:16:02,720 --> 00:16:07,279
on

00:16:03,519 --> 00:16:10,480
the enterprise and so that needs

00:16:07,279 --> 00:16:13,040
that quickly brings

00:16:10,480 --> 00:16:13,839
uh requirements on how these components

00:16:13,040 --> 00:16:16,240
have to

00:16:13,839 --> 00:16:18,000
come communicate and work together and

00:16:16,240 --> 00:16:19,920
that's essentially

00:16:18,000 --> 00:16:21,600
uh gets expressed through a lack of

00:16:19,920 --> 00:16:23,759
standardization what we call the

00:16:21,600 --> 00:16:25,759
middleware but it could be it could be

00:16:23,759 --> 00:16:27,920
like a firmware framework or whatever

00:16:25,759 --> 00:16:30,079
you want to call it some sort of clue

00:16:27,920 --> 00:16:32,959
logic around the hardware

00:16:30,079 --> 00:16:33,759
minimal layer that interfaces through

00:16:32,959 --> 00:16:35,199
the hardware

00:16:33,759 --> 00:16:36,880
and exposes the value out of the

00:16:35,199 --> 00:16:38,240
hardware that's really as simple as that

00:16:36,880 --> 00:16:42,320
in the end

00:16:38,240 --> 00:16:45,360
and stratos project for instance is uh

00:16:42,320 --> 00:16:46,480
i think the entity or one of the entity

00:16:45,360 --> 00:16:48,839
that can very much

00:16:46,480 --> 00:16:50,079
help us enable this center of

00:16:48,839 --> 00:16:54,560
probability

00:16:50,079 --> 00:16:57,360
right okay so then i guess alex

00:16:54,560 --> 00:16:58,720
as the lead of stratos given the kind of

00:16:57,360 --> 00:17:02,000
problems we've been

00:16:58,720 --> 00:17:04,160
touching on um what is stratos and

00:17:02,000 --> 00:17:06,880
what's it focusing on

00:17:04,160 --> 00:17:07,439
um well so to start with it's very much

00:17:06,880 --> 00:17:09,520
not so

00:17:07,439 --> 00:17:11,039
um focusing on the the server and the

00:17:09,520 --> 00:17:12,319
enterprise space that's

00:17:11,039 --> 00:17:14,640
that's something that's a well

00:17:12,319 --> 00:17:15,439
understood and the works well in place

00:17:14,640 --> 00:17:17,679
for that

00:17:15,439 --> 00:17:18,799
so there are four sort of key areas that

00:17:17,679 --> 00:17:21,919
we're looking at

00:17:18,799 --> 00:17:23,839
um the first one is implementing uh

00:17:21,919 --> 00:17:25,360
additional vert i o devices and

00:17:23,839 --> 00:17:26,959
we're talking about the sort of devices

00:17:25,360 --> 00:17:28,400
that you don't see on traditional

00:17:26,959 --> 00:17:30,400
enterprise hardware

00:17:28,400 --> 00:17:32,160
uh talk about some of the things that as

00:17:30,400 --> 00:17:32,799
dean mentioned so for example being able

00:17:32,160 --> 00:17:35,120
to

00:17:32,799 --> 00:17:36,559
manage your power and clock distribution

00:17:35,120 --> 00:17:37,360
typically something enterprise software

00:17:36,559 --> 00:17:39,280
doesn't care about

00:17:37,360 --> 00:17:40,880
but very important when you're

00:17:39,280 --> 00:17:42,640
allocating resources on a phone for

00:17:40,880 --> 00:17:44,880
example

00:17:42,640 --> 00:17:47,120
and we also want to support these more

00:17:44,880 --> 00:17:49,120
complex uh topologies

00:17:47,120 --> 00:17:50,559
so for example instead of having a

00:17:49,120 --> 00:17:53,760
single master

00:17:50,559 --> 00:17:55,679
um don zero type operating system

00:17:53,760 --> 00:17:56,799
that does all the back ends for all of

00:17:55,679 --> 00:17:58,320
your devices

00:17:56,799 --> 00:18:00,480
we want to be able to split the back

00:17:58,320 --> 00:18:03,679
ends for these virtio devices

00:18:00,480 --> 00:18:05,039
across a number of different worker vms

00:18:03,679 --> 00:18:08,320
and that allows you to have

00:18:05,039 --> 00:18:09,760
uh better isolation of the components

00:18:08,320 --> 00:18:11,760
so that's the verteio bit so you'll be

00:18:09,760 --> 00:18:15,440
seeing a bunch of additional

00:18:11,760 --> 00:18:17,840
virtio devices coming out of this work

00:18:15,440 --> 00:18:20,160
another aspect is looking at performance

00:18:17,840 --> 00:18:22,480
so although vert io has always been

00:18:20,160 --> 00:18:24,320
aimed at being a performance solution

00:18:22,480 --> 00:18:26,000
for virtualization

00:18:24,320 --> 00:18:28,640
there are some very particular

00:18:26,000 --> 00:18:30,320
challenges with devices

00:18:28,640 --> 00:18:32,160
that are for example dealing with video

00:18:30,320 --> 00:18:34,240
and audio uh

00:18:32,160 --> 00:18:35,360
typically you've got very low latency

00:18:34,240 --> 00:18:37,679
requirements

00:18:35,360 --> 00:18:39,679
but you still want to have isolation so

00:18:37,679 --> 00:18:42,640
for example if you were doing

00:18:39,679 --> 00:18:43,679
the in-car audio you know playing music

00:18:42,640 --> 00:18:45,280
on your radio

00:18:43,679 --> 00:18:47,760
you don't want that to interfere with

00:18:45,280 --> 00:18:50,559
the navigation so you need to you know

00:18:47,760 --> 00:18:52,480
both be performant but at the same time

00:18:50,559 --> 00:18:53,840
provide that isolation that you can you

00:18:52,480 --> 00:18:56,400
know concentrate on the things that are

00:18:53,840 --> 00:18:58,799
the most important

00:18:56,400 --> 00:19:00,640
another area is is boot flow and

00:18:58,799 --> 00:19:03,440
orchestration so as asd mentioned these

00:19:00,640 --> 00:19:04,880
complex topologies in an enterprise

00:19:03,440 --> 00:19:06,960
deployment you usually have a very

00:19:04,880 --> 00:19:07,600
dynamic orchestration so you usually

00:19:06,960 --> 00:19:10,480
have

00:19:07,600 --> 00:19:10,480
these um

00:19:11,360 --> 00:19:15,440
all sorts of solutions that are working

00:19:13,679 --> 00:19:18,000
on cloud scale just to

00:19:15,440 --> 00:19:20,640
bring up um vms as and when you need

00:19:18,000 --> 00:19:23,520
across your entire fleet of servers

00:19:20,640 --> 00:19:24,000
whereas in an embedded situation you

00:19:23,520 --> 00:19:27,039
tend to have

00:19:24,000 --> 00:19:28,000
a more static fixed configuration but

00:19:27,039 --> 00:19:31,039
you are

00:19:28,000 --> 00:19:31,679
you are still favoring um having fast

00:19:31,039 --> 00:19:34,160
recovery

00:19:31,679 --> 00:19:35,679
and fast boot up so you want to you know

00:19:34,160 --> 00:19:37,919
be able to give a

00:19:35,679 --> 00:19:39,520
a machine definition to the boot code

00:19:37,919 --> 00:19:41,520
that says i want uh

00:19:39,520 --> 00:19:42,720
i want to have the primary vm i want to

00:19:41,520 --> 00:19:44,799
have this many

00:19:42,720 --> 00:19:46,320
support vms supporting these devices how

00:19:44,799 --> 00:19:46,799
they're wired up and that all that sort

00:19:46,320 --> 00:19:48,240
of

00:19:46,799 --> 00:19:50,240
orchestration we'd like to have in a

00:19:48,240 --> 00:19:52,880
sort of a standardized

00:19:50,240 --> 00:19:53,280
way of doing it and finally there's a

00:19:52,880 --> 00:19:56,160
sort of

00:19:53,280 --> 00:19:57,360
standardization piece that um sits over

00:19:56,160 --> 00:19:59,840
all of the work

00:19:57,360 --> 00:20:01,120
uh we've mentioned before that members

00:19:59,840 --> 00:20:03,200
tend to have their own

00:20:01,120 --> 00:20:05,200
proprietary type one hypervisors but

00:20:03,200 --> 00:20:06,400
what we don't want to do is end up in a

00:20:05,200 --> 00:20:09,440
situation

00:20:06,400 --> 00:20:10,159
that to run a particular workload on any

00:20:09,440 --> 00:20:12,960
given

00:20:10,159 --> 00:20:14,559
um provider's hardware that you have to

00:20:12,960 --> 00:20:16,320
spend a lot of time

00:20:14,559 --> 00:20:17,600
uh porting to go on that hardware

00:20:16,320 --> 00:20:19,200
because you destroy

00:20:17,600 --> 00:20:20,720
most the benefit of having a virtual

00:20:19,200 --> 00:20:23,200
platform at that point

00:20:20,720 --> 00:20:25,919
so what we're trying to come up with is

00:20:23,200 --> 00:20:27,280
a list of common hypervisor features and

00:20:25,919 --> 00:20:30,080
maybe

00:20:27,280 --> 00:20:31,679
a a standard set of features that

00:20:30,080 --> 00:20:33,200
hypervisors can provide

00:20:31,679 --> 00:20:35,039
so the higher levels for the virtual

00:20:33,200 --> 00:20:36,559
machine managers and the guests and

00:20:35,039 --> 00:20:37,360
whatever can take advantage of those

00:20:36,559 --> 00:20:40,320
features

00:20:37,360 --> 00:20:42,559
and connect all these complex devices up

00:20:40,320 --> 00:20:44,080
so the idea is that the guests

00:20:42,559 --> 00:20:45,679
you know for the particular workload

00:20:44,080 --> 00:20:48,640
that you want to carry

00:20:45,679 --> 00:20:49,120
shouldn't really care too much about

00:20:48,640 --> 00:20:50,720
what

00:20:49,120 --> 00:20:52,559
the underlying platform they're running

00:20:50,720 --> 00:20:55,039
on so that's sort of

00:20:52,559 --> 00:20:57,679
broadly the the four areas that stratos

00:20:55,039 --> 00:20:57,679
is looking at

00:20:57,919 --> 00:21:03,039
so um so as a dean maybe if if stratos

00:21:01,679 --> 00:21:04,960
is successful

00:21:03,039 --> 00:21:08,240
what do you think the end vision is what

00:21:04,960 --> 00:21:10,720
would qualcomm like to achieve

00:21:08,240 --> 00:21:12,159
yeah that's a good question i was going

00:21:10,720 --> 00:21:15,200
to say

00:21:12,159 --> 00:21:17,360
everything that alex just mentioned

00:21:15,200 --> 00:21:18,480
but i think for us we have uh what is

00:21:17,360 --> 00:21:22,480
for me maybe

00:21:18,480 --> 00:21:24,320
um i have a a little bit more narrow

00:21:22,480 --> 00:21:26,799
view in some sense

00:21:24,320 --> 00:21:29,679
um so this long-term goals our

00:21:26,799 --> 00:21:29,679
short-term goals

00:21:29,760 --> 00:21:36,720
in terms of um uh achievement and

00:21:33,280 --> 00:21:40,159
in a very precise terms for

00:21:36,720 --> 00:21:42,960
is what i've stated earlier which is

00:21:40,159 --> 00:21:44,880
defining the glue logic uh which very

00:21:42,960 --> 00:21:48,400
much connects a little too

00:21:44,880 --> 00:21:50,320
that runs around the hypervisor

00:21:48,400 --> 00:21:54,480
so again we can call that the middleware

00:21:50,320 --> 00:21:54,480
of a form of firmware framework

00:21:55,600 --> 00:22:02,080
so that's essentially

00:21:58,880 --> 00:22:02,480
what we would like to do so what does

00:22:02,080 --> 00:22:04,880
this

00:22:02,480 --> 00:22:05,840
translate to is a level of device

00:22:04,880 --> 00:22:08,159
abstraction

00:22:05,840 --> 00:22:10,159
communication between virtual machines

00:22:08,159 --> 00:22:12,159
and as alex mentioned like

00:22:10,159 --> 00:22:13,679
management of shared resources like very

00:22:12,159 --> 00:22:15,840
very complex problems and

00:22:13,679 --> 00:22:16,960
a critical problems we have and i'm

00:22:15,840 --> 00:22:19,200
better

00:22:16,960 --> 00:22:21,200
um i would say one more thing maybe

00:22:19,200 --> 00:22:24,480
there is that

00:22:21,200 --> 00:22:27,280
fundamentally i think any

00:22:24,480 --> 00:22:28,799
i would say any company but i'm probably

00:22:27,280 --> 00:22:30,880
there's many many teams in the world

00:22:28,799 --> 00:22:34,960
that could solve those problems

00:22:30,880 --> 00:22:38,080
uh question is not about necessarily

00:22:34,960 --> 00:22:38,080
solving the problem

00:22:38,960 --> 00:22:43,039
in one specific way but really fun

00:22:40,960 --> 00:22:45,440
funding the common denominators and

00:22:43,039 --> 00:22:46,559
and getting to a place where we have uh

00:22:45,440 --> 00:22:49,360
essentially uh

00:22:46,559 --> 00:22:51,120
i very much like that idea of a de facto

00:22:49,360 --> 00:22:53,600
standard or mod of operations

00:22:51,120 --> 00:22:55,520
example of how things should be working

00:22:53,600 --> 00:22:59,440
that gets

00:22:55,520 --> 00:23:01,919
documented and published and

00:22:59,440 --> 00:23:02,880
demonstrated by through instructors that

00:23:01,919 --> 00:23:05,120
will be essentially

00:23:02,880 --> 00:23:06,960
sitting the market and telling people

00:23:05,120 --> 00:23:08,960
how they could use the hardware

00:23:06,960 --> 00:23:10,240
so i think this is a very fundamental

00:23:08,960 --> 00:23:13,280
piece

00:23:10,240 --> 00:23:15,039
for us and i think that's probably one

00:23:13,280 --> 00:23:18,159
of the most pragmatic way of

00:23:15,039 --> 00:23:22,559
managing this complexity and

00:23:18,159 --> 00:23:25,679
usually it's it's very uh tangible

00:23:22,559 --> 00:23:27,440
uh and practical when you bring on

00:23:25,679 --> 00:23:28,960
experts from different areas that you

00:23:27,440 --> 00:23:32,640
know i've really focused on

00:23:28,960 --> 00:23:33,120
other sort of short-term real use cases

00:23:32,640 --> 00:23:36,000
and

00:23:33,120 --> 00:23:37,919
and deployment so yeah what we want to

00:23:36,000 --> 00:23:40,320
get out of this is essentially a lower

00:23:37,919 --> 00:23:41,679
level software infrastructure that would

00:23:40,320 --> 00:23:43,279
enable that uh

00:23:41,679 --> 00:23:45,200
abstractions that was mentioned like

00:23:43,279 --> 00:23:46,960
earlier

00:23:45,200 --> 00:23:48,799
and i think it's very much real well i

00:23:46,960 --> 00:23:50,240
think those things could be built around

00:23:48,799 --> 00:23:52,080
some of the

00:23:50,240 --> 00:23:53,360
specifications that arm has started

00:23:52,080 --> 00:23:56,880
already

00:23:53,360 --> 00:23:56,880
and there's a very natural

00:23:56,960 --> 00:24:01,840
also dependency or interdependency that

00:24:00,640 --> 00:24:04,240
can be put in place

00:24:01,840 --> 00:24:06,799
between another some of the concept that

00:24:04,240 --> 00:24:08,799
alex was mentioning in terms of virtual

00:24:06,799 --> 00:24:10,559
and spca or ffa some other

00:24:08,799 --> 00:24:12,320
specifications that arm has started with

00:24:10,559 --> 00:24:14,320
cmi for instance

00:24:12,320 --> 00:24:17,520
um which maybe we can talk more about

00:24:14,320 --> 00:24:17,520
later or not but uh

00:24:18,880 --> 00:24:23,200
we have these problems and what needs to

00:24:21,520 --> 00:24:24,880
be done early for the most benefit

00:24:23,200 --> 00:24:25,279
obviously there's probably a starting

00:24:24,880 --> 00:24:26,640
point

00:24:25,279 --> 00:24:28,880
do you have any thoughts what that might

00:24:26,640 --> 00:24:31,120
be yeah

00:24:28,880 --> 00:24:33,440
yeah i got another great question

00:24:31,120 --> 00:24:35,279
actually um

00:24:33,440 --> 00:24:36,960
uh yeah maybe i'll pick it up from what

00:24:35,279 --> 00:24:41,039
i just mentioned around

00:24:36,960 --> 00:24:44,640
a cmi on the ffa so so you see my which

00:24:41,039 --> 00:24:47,160
stands for um like secret control

00:24:44,640 --> 00:24:48,240
management interface

00:24:47,160 --> 00:24:49,930
[Music]

00:24:48,240 --> 00:24:53,009
spca service secure

00:24:49,930 --> 00:24:53,009
[Music]

00:24:53,760 --> 00:24:56,799
partition control interface for spca i

00:24:55,919 --> 00:24:58,880
believe

00:24:56,799 --> 00:25:00,400
and icmi system control management

00:24:58,880 --> 00:25:02,799
interface

00:25:00,400 --> 00:25:05,039
so i think recently this pci has been

00:25:02,799 --> 00:25:06,080
renamed ffa which stands for firmware

00:25:05,039 --> 00:25:08,559
framework was probably

00:25:06,080 --> 00:25:10,640
a better terminology so if you take

00:25:08,559 --> 00:25:12,640
those two specifications one focused on

00:25:10,640 --> 00:25:13,919
this pci focused on communication

00:25:12,640 --> 00:25:16,960
between

00:25:13,919 --> 00:25:19,120
virtual machine and cmi sort of focused

00:25:16,960 --> 00:25:22,159
on the

00:25:19,120 --> 00:25:25,279
power management in general

00:25:22,159 --> 00:25:27,039
they don't still have the motions of

00:25:25,279 --> 00:25:28,640
abstracted device that comes with a

00:25:27,039 --> 00:25:30,559
virtual

00:25:28,640 --> 00:25:32,799
concept which has been pretty successful

00:25:30,559 --> 00:25:35,200
and it's starting to be already

00:25:32,799 --> 00:25:36,480
dominating many markets and segment

00:25:35,200 --> 00:25:39,360
markets

00:25:36,480 --> 00:25:40,080
combining those two entities in a way

00:25:39,360 --> 00:25:43,279
that's sort of

00:25:40,080 --> 00:25:46,480
arm specific arm architecture specific

00:25:43,279 --> 00:25:49,200
um that would be a huge value add

00:25:46,480 --> 00:25:51,440
of course that comes with apis that get

00:25:49,200 --> 00:25:53,520
expressed under fine clearly

00:25:51,440 --> 00:25:55,200
and i'm some flexibility in the

00:25:53,520 --> 00:25:56,880
framework where we give example how

00:25:55,200 --> 00:26:00,320
things get implemented but

00:25:56,880 --> 00:26:03,600
yet there's an implicit

00:26:00,320 --> 00:26:05,600
options for cylinders or

00:26:03,600 --> 00:26:08,640
partners to differentiate in every other

00:26:05,600 --> 00:26:11,279
field they can differentiate

00:26:08,640 --> 00:26:13,120
so this this is a very concrete goal for

00:26:11,279 --> 00:26:15,919
which uh yeah i think there's

00:26:13,120 --> 00:26:16,880
we have a need at least uh right now and

00:26:15,919 --> 00:26:19,600
uh

00:26:16,880 --> 00:26:20,480
something that uh our mission is very

00:26:19,600 --> 00:26:22,840
much durable

00:26:20,480 --> 00:26:25,840
and achievable in the context of

00:26:22,840 --> 00:26:25,840
strategies

00:26:29,440 --> 00:26:32,960
so that makes sense alex yeah yeah

00:26:32,480 --> 00:26:36,080
that's

00:26:32,960 --> 00:26:37,919
um and i'll just echo so the

00:26:36,080 --> 00:26:39,679
the work that we're we're doing here

00:26:37,919 --> 00:26:42,640
we're very much aiming not to

00:26:39,679 --> 00:26:45,679
make it specific to uh a single

00:26:42,640 --> 00:26:48,720
hypervisor so we're aiming for

00:26:45,679 --> 00:26:50,240
um getting broad compatibility i think

00:26:48,720 --> 00:26:51,840
the work we're going to be doing is

00:26:50,240 --> 00:26:54,640
probably going to be

00:26:51,840 --> 00:26:55,520
more focused on the open hypervisors so

00:26:54,640 --> 00:26:58,080
we'll be doing

00:26:55,520 --> 00:26:59,120
stuff that will work between kvm and zen

00:26:58,080 --> 00:27:00,880
hafnium

00:26:59,120 --> 00:27:02,480
but we want that work to be applicable

00:27:00,880 --> 00:27:07,279
to all the the proprietary

00:27:02,480 --> 00:27:07,279
hypervisors as well thanks for

00:27:08,400 --> 00:27:12,000
we're working you know no not a single

00:27:11,039 --> 00:27:14,400
hypervisor

00:27:12,000 --> 00:27:16,080
probably the open ones but is stratus

00:27:14,400 --> 00:27:18,640
targeted to provide um

00:27:16,080 --> 00:27:21,279
a solution for a particular domain like

00:27:18,640 --> 00:27:23,279
say automotive industrial

00:27:21,279 --> 00:27:25,200
i i think the work on stratos is going

00:27:23,279 --> 00:27:27,520
to be applicable to

00:27:25,200 --> 00:27:28,399
a number of different domains um

00:27:27,520 --> 00:27:31,120
certainly the

00:27:28,399 --> 00:27:32,480
initial use cases we're looking at uh

00:27:31,120 --> 00:27:35,520
automotive

00:27:32,480 --> 00:27:36,480
um which is a a good case of you where

00:27:35,520 --> 00:27:39,039
you have multiple

00:27:36,480 --> 00:27:40,480
systems uh with you know different

00:27:39,039 --> 00:27:41,039
priorities that you want to assign to

00:27:40,480 --> 00:27:44,159
them

00:27:41,039 --> 00:27:46,240
um but also we're seeing uh interest in

00:27:44,159 --> 00:27:49,360
the mobile space

00:27:46,240 --> 00:27:51,360
especially for using virtualization to

00:27:49,360 --> 00:27:52,399
separate things like having secure

00:27:51,360 --> 00:27:54,640
components

00:27:52,399 --> 00:27:55,600
that might not be controlled by the the

00:27:54,640 --> 00:27:58,080
platform

00:27:55,600 --> 00:27:59,200
vendor but you want to isolate them in

00:27:58,080 --> 00:28:01,200
the secure world

00:27:59,200 --> 00:28:02,720
to provide a service to the main

00:28:01,200 --> 00:28:04,720
operating system so

00:28:02,720 --> 00:28:06,000
uh automotive for mobile are probably

00:28:04,720 --> 00:28:07,520
the first two but

00:28:06,000 --> 00:28:09,840
no doubt this will be applicable to a

00:28:07,520 --> 00:28:12,320
whole number of uh other areas i think

00:28:09,840 --> 00:28:13,679
uh iot control software as well will

00:28:12,320 --> 00:28:16,080
probably benefit from this

00:28:13,679 --> 00:28:17,039
yeah that's right i think from um i

00:28:16,080 --> 00:28:20,880
guess the user

00:28:17,039 --> 00:28:22,960
recently a vendor's perspective um

00:28:20,880 --> 00:28:24,240
yeah so so if you step back a little bit

00:28:22,960 --> 00:28:25,840
of course there's a different level of

00:28:24,240 --> 00:28:27,360
maturity and

00:28:25,840 --> 00:28:29,200
from the virtualization market some

00:28:27,360 --> 00:28:31,360
markets are really ahead and

00:28:29,200 --> 00:28:32,960
we talked about enterprise before

00:28:31,360 --> 00:28:35,919
suddenly automotive is

00:28:32,960 --> 00:28:36,399
uh the notions of fertilization has has

00:28:35,919 --> 00:28:38,480
been

00:28:36,399 --> 00:28:40,240
baked in and it's understood it's

00:28:38,480 --> 00:28:42,159
internalized and

00:28:40,240 --> 00:28:43,760
it's the reality in the ground and

00:28:42,159 --> 00:28:45,039
there's some other markets which are

00:28:43,760 --> 00:28:47,120
still in french or

00:28:45,039 --> 00:28:50,080
uh getting their computer to get idea or

00:28:47,120 --> 00:28:53,039
contributing i guess in our senses uh

00:28:50,080 --> 00:28:54,720
but um it's essentially anything that

00:28:53,039 --> 00:28:56,320
has to do with any computer agent with

00:28:54,720 --> 00:28:59,760
mobile being another

00:28:56,320 --> 00:29:01,760
very critical example but i think maybe

00:28:59,760 --> 00:29:04,240
they were

00:29:01,760 --> 00:29:05,520
appraised and i think maybe describing

00:29:04,240 --> 00:29:08,960
what we see

00:29:05,520 --> 00:29:11,200
on the ground is there is between those

00:29:08,960 --> 00:29:14,559
different markets irrespective of the

00:29:11,200 --> 00:29:16,720
evolution of the sophistication

00:29:14,559 --> 00:29:18,399
and the maturity of the market within

00:29:16,720 --> 00:29:19,679
each segment

00:29:18,399 --> 00:29:21,840
we definitely see some cross

00:29:19,679 --> 00:29:24,960
pollinations between dummies

00:29:21,840 --> 00:29:27,679
so in clear there's some good ideas that

00:29:24,960 --> 00:29:29,440
have been expressed let's say an

00:29:27,679 --> 00:29:32,640
automotive that maybe

00:29:29,440 --> 00:29:34,080
have uh magnified the notion of security

00:29:32,640 --> 00:29:35,600
and data protection which of course

00:29:34,080 --> 00:29:37,440
exists in other places but

00:29:35,600 --> 00:29:39,120
some specific solutions have been

00:29:37,440 --> 00:29:42,000
involved there

00:29:39,120 --> 00:29:43,760
those solutions we see some of these

00:29:42,000 --> 00:29:45,360
good ideas potentially migrating into

00:29:43,760 --> 00:29:46,559
another space could be mobile it could

00:29:45,360 --> 00:29:49,600
be something else

00:29:46,559 --> 00:29:52,720
and the other way around applies to so

00:29:49,600 --> 00:29:55,200
mobile have some specific constraints

00:29:52,720 --> 00:29:56,080
which makes the problem sometimes around

00:29:55,200 --> 00:29:58,159
power

00:29:56,080 --> 00:30:00,480
performance for instance and both

00:29:58,159 --> 00:30:03,360
notions of

00:30:00,480 --> 00:30:05,520
real-time constraints and you know and

00:30:03,360 --> 00:30:07,440
frequently of usage etc

00:30:05,520 --> 00:30:08,960
tend to migrate into other markets as

00:30:07,440 --> 00:30:11,600
well

00:30:08,960 --> 00:30:13,440
uh so what it means is in general all of

00:30:11,600 --> 00:30:15,919
this stands to

00:30:13,440 --> 00:30:17,440
cross-pollination stands to towards more

00:30:15,919 --> 00:30:18,640
sophistications and in terms of

00:30:17,440 --> 00:30:20,640
requirements

00:30:18,640 --> 00:30:22,799
and often those requirements tends also

00:30:20,640 --> 00:30:25,039
to be uh uh

00:30:22,799 --> 00:30:27,039
essentially expressed in some of uh

00:30:25,039 --> 00:30:30,320
supercell requirements

00:30:27,039 --> 00:30:32,240
uh and so that that's sort of very very

00:30:30,320 --> 00:30:35,200
fundamental so what it means also

00:30:32,240 --> 00:30:35,840
is if you take that thought process and

00:30:35,200 --> 00:30:37,440
expanded

00:30:35,840 --> 00:30:39,200
and projected in the future it means

00:30:37,440 --> 00:30:43,120
that this sort of

00:30:39,200 --> 00:30:46,240
an implicit requirements are coming from

00:30:43,120 --> 00:30:48,000
end users as well as in our case we are

00:30:46,240 --> 00:30:50,159
consumers which are many

00:30:48,000 --> 00:30:52,480
people winning that value valuation i

00:30:50,159 --> 00:30:55,520
don't even really wish they can consider

00:30:52,480 --> 00:30:57,279
but expect reuse reuse between automatic

00:30:55,520 --> 00:31:00,080
reduce between mobile

00:30:57,279 --> 00:31:01,120
and uh for very basic reasons could be

00:31:00,080 --> 00:31:03,039
as simple as

00:31:01,120 --> 00:31:05,039
other galaxys alluding to this earlier

00:31:03,039 --> 00:31:06,640
is

00:31:05,039 --> 00:31:08,640
improving productivity reducing

00:31:06,640 --> 00:31:11,200
structural cost

00:31:08,640 --> 00:31:14,159
and other i think more fundamental

00:31:11,200 --> 00:31:16,559
reasons which have to do with uh

00:31:14,159 --> 00:31:17,279
how this will benefit the young consumer

00:31:16,559 --> 00:31:19,919
right

00:31:17,279 --> 00:31:22,080
as a user i would want my virtual

00:31:19,919 --> 00:31:23,679
meshing and my tool to

00:31:22,080 --> 00:31:25,360
work seamlessly between perhaps

00:31:23,679 --> 00:31:27,679
automotive or

00:31:25,360 --> 00:31:30,000
my phone and so on and so forth so those

00:31:27,679 --> 00:31:30,640
things already exist we see this already

00:31:30,000 --> 00:31:33,679
happening

00:31:30,640 --> 00:31:36,880
and and all of this means

00:31:33,679 --> 00:31:39,600
eventually actually means clearly that

00:31:36,880 --> 00:31:40,399
designing a virtual solution on

00:31:39,600 --> 00:31:43,840
architecture

00:31:40,399 --> 00:31:47,120
focus number by only or iot only uh

00:31:43,840 --> 00:31:48,880
automotive only isn't is

00:31:47,120 --> 00:31:50,720
is going to probably have challenges

00:31:48,880 --> 00:31:51,039
very quickly so i think you might as

00:31:50,720 --> 00:31:53,679
well

00:31:51,039 --> 00:31:55,440
just acknowledge that reality and work

00:31:53,679 --> 00:31:57,840
on all those platforms from the get-go

00:31:55,440 --> 00:32:00,080
basically which is really very much but

00:31:57,840 --> 00:32:01,279
alex is telling and very much the uh the

00:32:00,080 --> 00:32:04,559
garage stratos from

00:32:01,279 --> 00:32:07,279
afghanistan yeah and this is from a

00:32:04,559 --> 00:32:07,279
motor actually

00:32:08,399 --> 00:32:12,840
so when are we going to actually deliver

00:32:11,279 --> 00:32:15,840
something some tangible

00:32:12,840 --> 00:32:15,840
output

00:32:15,919 --> 00:32:20,159
well uh hopefully in the in the next

00:32:18,799 --> 00:32:22,080
development cycle the

00:32:20,159 --> 00:32:23,600
first thing we're working on is a

00:32:22,080 --> 00:32:26,399
demonstrator

00:32:23,600 --> 00:32:28,240
of showing portability of a guest

00:32:26,399 --> 00:32:29,360
between two different hypervisors so we

00:32:28,240 --> 00:32:31,440
can you know prove this

00:32:29,360 --> 00:32:32,399
this idea that the guest doesn't need to

00:32:31,440 --> 00:32:34,960
be aware

00:32:32,399 --> 00:32:36,000
uh of the hypervisor that it's running

00:32:34,960 --> 00:32:37,200
on

00:32:36,000 --> 00:32:38,240
and we're hoping to get something

00:32:37,200 --> 00:32:41,200
together sort of around about the

00:32:38,240 --> 00:32:42,960
october time frame for that

00:32:41,200 --> 00:32:44,640
we're also starting work on some of

00:32:42,960 --> 00:32:46,240
these new devices so the i think the

00:32:44,640 --> 00:32:47,120
first device that we're aiming to get

00:32:46,240 --> 00:32:50,720
out is a

00:32:47,120 --> 00:32:53,200
vert io rpmb which is basically a

00:32:50,720 --> 00:32:54,559
type of flash device which is replay

00:32:53,200 --> 00:32:55,840
protected you don't again

00:32:54,559 --> 00:32:57,760
not something you see in the enterprise

00:32:55,840 --> 00:32:59,120
but something that's important in the

00:32:57,760 --> 00:33:00,559
mobile space

00:32:59,120 --> 00:33:02,799
because it's a place where you can

00:33:00,559 --> 00:33:04,960
securely store credentials

00:33:02,799 --> 00:33:07,120
and it is protected against replay

00:33:04,960 --> 00:33:09,919
attacks being his way of

00:33:07,120 --> 00:33:11,200
influencing that and then along with

00:33:09,919 --> 00:33:14,399
that we're doing a lot of the

00:33:11,200 --> 00:33:16,399
uh initial work at looking at how we can

00:33:14,399 --> 00:33:18,640
do these complex topologies how we can

00:33:16,399 --> 00:33:19,519
minimize the amount of copying that goes

00:33:18,640 --> 00:33:21,519
on between

00:33:19,519 --> 00:33:22,559
uh different uh domains and that sort of

00:33:21,519 --> 00:33:25,039
stuff so it's a lot of

00:33:22,559 --> 00:33:28,480
proprietary fundamental work into how

00:33:25,039 --> 00:33:28,480
these things are going together

00:33:28,960 --> 00:33:32,240
yeah i think um yeah i'm going to take

00:33:31,679 --> 00:33:34,000
him

00:33:32,240 --> 00:33:37,039
i think maybe stepping back a little bit

00:33:34,000 --> 00:33:40,240
i think what we see what i see here is

00:33:37,039 --> 00:33:41,679
and i hope this is getting uh reflected

00:33:40,240 --> 00:33:43,519
in the comments my comments and

00:33:41,679 --> 00:33:46,640
listeners uh there is

00:33:43,519 --> 00:33:48,640
nothing abstract about stratos and this

00:33:46,640 --> 00:33:50,399
is not a conceptual project this is not

00:33:48,640 --> 00:33:53,440
uh

00:33:50,399 --> 00:33:54,399
academic exercise we have needs right

00:33:53,440 --> 00:33:57,360
now

00:33:54,399 --> 00:33:58,720
uh you know i think everybody could

00:33:57,360 --> 00:33:59,919
potentially solve these problems

00:33:58,720 --> 00:34:02,480
individually

00:33:59,919 --> 00:34:03,919
uh we very much realized that uh it's

00:34:02,480 --> 00:34:06,880
not you know a long term

00:34:03,919 --> 00:34:08,480
best interest to do that and so what it

00:34:06,880 --> 00:34:09,919
means in terms of products is we are

00:34:08,480 --> 00:34:12,000
much better off

00:34:09,919 --> 00:34:14,240
interested in products with any

00:34:12,000 --> 00:34:14,960
development coming from stratos as soon

00:34:14,240 --> 00:34:18,320
as it comes

00:34:14,960 --> 00:34:20,879
and we see suddenly a lot of opportunity

00:34:18,320 --> 00:34:22,800
opportunities to get components uh

00:34:20,879 --> 00:34:23,919
anticipated within the next year or two

00:34:22,800 --> 00:34:27,440
years

00:34:23,919 --> 00:34:27,440
and i'm talking about real product

00:34:27,679 --> 00:34:32,800
those things will definitely add value

00:34:30,399 --> 00:34:35,280
for us

00:34:32,800 --> 00:34:37,040
in terms of and and these are going to

00:34:35,280 --> 00:34:39,119
aspect there's a framework which

00:34:37,040 --> 00:34:40,879
i think alex has talked about atlanta

00:34:39,119 --> 00:34:43,040
there's also standalone components which

00:34:40,879 --> 00:34:46,560
have to be also

00:34:43,040 --> 00:34:49,200
which are not although

00:34:46,560 --> 00:34:49,919
how small you want to define them a very

00:34:49,200 --> 00:34:52,159
concrete

00:34:49,919 --> 00:34:53,919
uh value right for march perspective so

00:34:52,159 --> 00:34:55,679
the example that uh

00:34:53,919 --> 00:34:58,240
alex was mentioning is a very critical

00:34:55,679 --> 00:35:02,000
one so i'm also very happy to see

00:34:58,240 --> 00:35:05,040
uh demo's demonstrations and the

00:35:02,000 --> 00:35:06,960
uh example been shown very early i think

00:35:05,040 --> 00:35:08,960
it could be as soon as maybe this month

00:35:06,960 --> 00:35:11,680
i believe there will be some demos

00:35:08,960 --> 00:35:13,440
um and so again that all of that goes

00:35:11,680 --> 00:35:15,359
back to this idea of

00:35:13,440 --> 00:35:17,599
defining something by example which is

00:35:15,359 --> 00:35:19,920
this notion de facto architecture

00:35:17,599 --> 00:35:22,000
so i'm personally we're pretty excited

00:35:19,920 --> 00:35:22,880
about uh stratos here i'm very bullish

00:35:22,000 --> 00:35:25,520
about this

00:35:22,880 --> 00:35:27,359
effort and i think it's gonna uh

00:35:25,520 --> 00:35:30,320
tremendous value very quickly

00:35:27,359 --> 00:35:31,359
uh because we see a real need for it on

00:35:30,320 --> 00:35:34,880
the ground

00:35:31,359 --> 00:35:38,640
and in terms of open communities and

00:35:34,880 --> 00:35:39,599
ensuring it is uh it's a problem we have

00:35:38,640 --> 00:35:44,000
to solve together

00:35:39,599 --> 00:35:45,760
yeah thank you um

00:35:44,000 --> 00:35:47,520
so that brings us to the end thank you

00:35:45,760 --> 00:35:50,880
alex thank you azadeen

00:35:47,520 --> 00:35:54,520
um if anybody wants to learn more um

00:35:50,880 --> 00:35:56,000
simplest thing to do is to go to

00:35:54,520 --> 00:35:58,160
www.linaro.org

00:35:56,000 --> 00:36:00,800
projects and you'll find the stratos

00:35:58,160 --> 00:36:00,800
project there

00:36:01,280 --> 00:36:04,640
thank you very much mike and alex was

00:36:02,880 --> 00:36:07,599
really a great opportunity

00:36:04,640 --> 00:36:09,839
and yeah pretty excited about his threat

00:36:07,599 --> 00:36:09,839
to us

00:36:10,880 --> 00:36:19,839

YouTube URL: https://www.youtube.com/watch?v=phwdfWVcQ7g


