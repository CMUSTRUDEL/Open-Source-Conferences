Title: LVC20 107 Towards Highly Specialized, POSIX compliant Software Stacks with Unikraft
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	POSIX compliant Software Stacks with Unikraft
Increasingly, embedded devices are being equipped with ARM processors. Because of ease-of-use and widespread support for drivers and applications, Linux is often used as the OS of choice even though it consumes a significant amount of the deviceâ€™s limited resources, and its large Trusted Compute Base (TCB) has resulted in a plethora of exploits. In this talk, we will present Unikraft, a fully micro-library operating system and build tool which allows for building specialized OSes and software stacks targeting one application, while removing unneeded functionality. As a proof of concept, we port Unikraft to the Raspberry Pi 3 B+ and to a Xilinx Ultra96-V2. On these boards, Unikraft is able to boot in 88-158 milliseconds, consume only hundreds of KBs of memory when running real-world applications such as NGINX and ML frameworks such as PyTorch, while providing visible reductions in power consumption compared to Linux distributions. Unikraft is a Linux Foundation open source project and can be found at www.unikraft.org.

Full the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-107-0.pdf
Captions: 
	00:00:00,240 --> 00:00:03,120
okay uh hello everybody i hope you can

00:00:02,639 --> 00:00:05,440
hear me

00:00:03,120 --> 00:00:07,040
i think by my watch it's uh time to

00:00:05,440 --> 00:00:09,679
start uh my name is

00:00:07,040 --> 00:00:10,160
felipe whissey i'm from nec laboratories

00:00:09,679 --> 00:00:13,040
europe

00:00:10,160 --> 00:00:14,480
in germany and today i'd like to tell

00:00:13,040 --> 00:00:14,799
you about a project we've been working

00:00:14,480 --> 00:00:16,560
on

00:00:14,799 --> 00:00:18,000
for a couple of years now called

00:00:16,560 --> 00:00:19,680
unicraft

00:00:18,000 --> 00:00:21,520
in which we're trying to build highly

00:00:19,680 --> 00:00:22,960
specialized posix compliant software

00:00:21,520 --> 00:00:26,400
stacks

00:00:22,960 --> 00:00:28,240
and make it easy to do so

00:00:26,400 --> 00:00:29,599
so if you're in the embedded world you

00:00:28,240 --> 00:00:31,439
have a choice between

00:00:29,599 --> 00:00:32,800
choosing a general purpose os or an

00:00:31,439 --> 00:00:35,120
embedded os

00:00:32,800 --> 00:00:36,399
and if you choose a general purpose os

00:00:35,120 --> 00:00:37,280
they obviously have lots of great

00:00:36,399 --> 00:00:38,960
advantages

00:00:37,280 --> 00:00:40,399
you can support lots of devices and

00:00:38,960 --> 00:00:42,480
applications

00:00:40,399 --> 00:00:44,000
you have a very familiar development

00:00:42,480 --> 00:00:47,200
environment and of course

00:00:44,000 --> 00:00:48,640
they're posix compliant on the downside

00:00:47,200 --> 00:00:50,000
they're kind of hard to customize if

00:00:48,640 --> 00:00:51,520
you're looking at linux or freebsd

00:00:50,000 --> 00:00:53,600
they're generally speaking monolithic

00:00:51,520 --> 00:00:54,960
kernels i know there's there's k config

00:00:53,600 --> 00:00:56,320
there's menus you can do a bit of

00:00:54,960 --> 00:00:58,719
tweaking

00:00:56,320 --> 00:00:59,760
but ultimately if you're really trying

00:00:58,719 --> 00:01:02,640
to specialize

00:00:59,760 --> 00:01:04,559
your your image or your os it might need

00:01:02,640 --> 00:01:05,600
lots of tricky engineering work which an

00:01:04,559 --> 00:01:07,280
application

00:01:05,600 --> 00:01:08,799
programmer might not be interested in

00:01:07,280 --> 00:01:10,960
doing

00:01:08,799 --> 00:01:12,400
it has lots of lines of code so there's

00:01:10,960 --> 00:01:13,920
a large attack surface

00:01:12,400 --> 00:01:16,640
you can have lots of exploits as a

00:01:13,920 --> 00:01:18,479
result and because it's not specialized

00:01:16,640 --> 00:01:20,720
maybe you have a large memory footprint

00:01:18,479 --> 00:01:22,799
image sizes memory consumption and so

00:01:20,720 --> 00:01:23,840
forth and of course if you're in safety

00:01:22,799 --> 00:01:27,360
critical domains

00:01:23,840 --> 00:01:30,720
uh certification might be a must and

00:01:27,360 --> 00:01:32,079
usually speaking the more lines of code

00:01:30,720 --> 00:01:33,920
that you have the more expensive it is

00:01:32,079 --> 00:01:34,320
to certify something and so these sort

00:01:33,920 --> 00:01:36,560
of

00:01:34,320 --> 00:01:38,960
general purpose oss are usually a

00:01:36,560 --> 00:01:41,040
difficult proposition

00:01:38,960 --> 00:01:42,479
embedded oss are sort of on the opposite

00:01:41,040 --> 00:01:43,920
side of the spectrum they're very

00:01:42,479 --> 00:01:45,600
resource efficient

00:01:43,920 --> 00:01:47,360
and they have a smaller attack surface

00:01:45,600 --> 00:01:48,960
they're cheaper to certify

00:01:47,360 --> 00:01:50,479
but they're for the most part known

00:01:48,960 --> 00:01:52,640
posix compliance so it

00:01:50,479 --> 00:01:54,640
takes at least a significant amount of

00:01:52,640 --> 00:01:56,000
effort to port applications

00:01:54,640 --> 00:01:58,240
and they can have an unfamiliar

00:01:56,000 --> 00:02:01,200
development environment so

00:01:58,240 --> 00:02:02,719
you have to kind of make a choice and

00:02:01,200 --> 00:02:05,119
the question is whether

00:02:02,719 --> 00:02:05,759
there couldn't be another alternative

00:02:05,119 --> 00:02:07,200
that

00:02:05,759 --> 00:02:10,399
sort of picks and chooses the best

00:02:07,200 --> 00:02:10,399
things from both sides

00:02:10,959 --> 00:02:15,040
so if we were to design a new sort of os

00:02:13,680 --> 00:02:15,920
what would it look like what would we

00:02:15,040 --> 00:02:17,440
need

00:02:15,920 --> 00:02:20,239
so we would like to have easy

00:02:17,440 --> 00:02:22,480
configuration and customization

00:02:20,239 --> 00:02:23,760
a minimal attack surface low

00:02:22,480 --> 00:02:26,640
certification

00:02:23,760 --> 00:02:28,000
costs uh easy to port and use existing

00:02:26,640 --> 00:02:29,599
applications

00:02:28,000 --> 00:02:31,599
and we would like it to also be

00:02:29,599 --> 00:02:33,760
efficient and hopefully performance

00:02:31,599 --> 00:02:35,519
and all of this seems to suggest that if

00:02:33,760 --> 00:02:37,280
we could somehow specialize

00:02:35,519 --> 00:02:39,360
ros to the needs of particular

00:02:37,280 --> 00:02:41,680
applications we could get most of these

00:02:39,360 --> 00:02:43,120
benefits

00:02:41,680 --> 00:02:45,519
and this is especially what we're trying

00:02:43,120 --> 00:02:47,599
to do here imagine that you're targeting

00:02:45,519 --> 00:02:49,440
a single application it could be an iot

00:02:47,599 --> 00:02:51,280
gateway it could be a web server in this

00:02:49,440 --> 00:02:52,720
example it's a web server

00:02:51,280 --> 00:02:54,720
you can imagine that you have the os

00:02:52,720 --> 00:02:55,599
kernel the libraries third-party

00:02:54,720 --> 00:02:57,280
libraries

00:02:55,599 --> 00:02:58,879
and to run the web server you only need

00:02:57,280 --> 00:03:00,480
the colored boxes you have in there but

00:02:58,879 --> 00:03:02,000
you have lots of libraries and other

00:03:00,480 --> 00:03:04,400
software that is running on your system

00:03:02,000 --> 00:03:06,560
that you don't really need

00:03:04,400 --> 00:03:09,599
so it would be great to try to eliminate

00:03:06,560 --> 00:03:12,400
that and somehow automatically create

00:03:09,599 --> 00:03:14,159
a software stack an os that just caters

00:03:12,400 --> 00:03:18,720
to the needs of that web server

00:03:14,159 --> 00:03:20,560
and that's what unicraft is trying to do

00:03:18,720 --> 00:03:23,120
so this is a sort of architecture

00:03:20,560 --> 00:03:26,080
diagram the premise is that everything

00:03:23,120 --> 00:03:27,200
in unicraft is a library even always

00:03:26,080 --> 00:03:29,280
primitive such as

00:03:27,200 --> 00:03:31,440
schedulers memory allocators network

00:03:29,280 --> 00:03:32,000
stacks and that gives the ability to

00:03:31,440 --> 00:03:34,959
sort of more

00:03:32,000 --> 00:03:35,920
easily pick and choose uh how you build

00:03:34,959 --> 00:03:37,280
your stack

00:03:35,920 --> 00:03:39,840
in terms of what the application

00:03:37,280 --> 00:03:41,519
actually needs even things like

00:03:39,840 --> 00:03:42,959
platforms what we call platforms which

00:03:41,519 --> 00:03:44,080
are things like whether you're running

00:03:42,959 --> 00:03:47,920
on a raspberry pi

00:03:44,080 --> 00:03:48,720
or a link's ultra 96 or kvm as a virtual

00:03:47,920 --> 00:03:51,280
machine

00:03:48,720 --> 00:03:52,640
those are also libraries and so are is

00:03:51,280 --> 00:03:55,599
architect for

00:03:52,640 --> 00:03:58,400
architectural code whether it's x8664

00:03:55,599 --> 00:03:58,400
arm64

00:03:58,560 --> 00:04:02,400
all of this is customizable by a k

00:04:00,640 --> 00:04:05,280
config type menu

00:04:02,400 --> 00:04:06,959
so you can more if if you want you can

00:04:05,280 --> 00:04:09,680
pick and choose easily which

00:04:06,959 --> 00:04:10,319
of these libraries you want or you need

00:04:09,680 --> 00:04:12,080
we've added

00:04:10,319 --> 00:04:13,760
a fair amount of different language

00:04:12,080 --> 00:04:17,519
support in order to be

00:04:13,760 --> 00:04:19,199
more attract attractive to people who

00:04:17,519 --> 00:04:21,199
might potentially use it so there's

00:04:19,199 --> 00:04:22,000
compiled languages such as cc plus plus

00:04:21,199 --> 00:04:24,080
and go

00:04:22,000 --> 00:04:26,880
and interpret languages such as python

00:04:24,080 --> 00:04:28,560
ruby or webassembly

00:04:26,880 --> 00:04:31,040
we're trying to be as much as possible

00:04:28,560 --> 00:04:33,680
posix compliance so that it makes it

00:04:31,040 --> 00:04:35,600
easy to use existing applications we

00:04:33,680 --> 00:04:38,320
have tools for easy porting

00:04:35,600 --> 00:04:41,040
and lots of documentation on how to have

00:04:38,320 --> 00:04:43,199
existing applications run on unicraft

00:04:41,040 --> 00:04:44,080
in addition we already have built in the

00:04:43,199 --> 00:04:45,759
ability to run

00:04:44,080 --> 00:04:49,280
certain standard applications such as

00:04:45,759 --> 00:04:50,880
nginx sqlite and redis

00:04:49,280 --> 00:04:53,600
and as i mentioned earlier we can

00:04:50,880 --> 00:04:55,440
support multiple what we call platforms

00:04:53,600 --> 00:04:57,680
in this talk it's mostly about bare

00:04:55,440 --> 00:04:59,520
metal and running on arm64 devices but

00:04:57,680 --> 00:05:00,960
we also support the ability to run on

00:04:59,520 --> 00:05:03,759
virtual machines on different different

00:05:00,960 --> 00:05:03,759
hypervisors

00:05:04,720 --> 00:05:08,800
okay in terms of security features uh i

00:05:07,440 --> 00:05:11,520
already mentioned that

00:05:08,800 --> 00:05:12,880
we have one of the targets is to have a

00:05:11,520 --> 00:05:14,400
small attack vector because we are

00:05:12,880 --> 00:05:17,759
specializing

00:05:14,400 --> 00:05:19,280
um but we also would like to prevent

00:05:17,759 --> 00:05:21,600
other common attacks

00:05:19,280 --> 00:05:23,600
because we're coming from what's called

00:05:21,600 --> 00:05:25,919
the unikernel world

00:05:23,600 --> 00:05:28,000
and there was a paper a few years back

00:05:25,919 --> 00:05:29,280
basically saying that yeah unicorns are

00:05:28,000 --> 00:05:30,720
great because they're specialized they

00:05:29,280 --> 00:05:32,000
have a small attack surface but they

00:05:30,720 --> 00:05:34,160
largely ignore

00:05:32,000 --> 00:05:35,360
standard protection mechanisms that

00:05:34,160 --> 00:05:37,919
general purpose os

00:05:35,360 --> 00:05:38,479
have so in unicraft we're in the purpose

00:05:37,919 --> 00:05:39,840
of

00:05:38,479 --> 00:05:41,680
in the process of adding things like

00:05:39,840 --> 00:05:44,000
aslr stack canaries

00:05:41,680 --> 00:05:46,320
page protection bits and heap integrity

00:05:44,000 --> 00:05:46,320
checks

00:05:46,639 --> 00:05:52,479
and we want to also

00:05:49,759 --> 00:05:55,039
make sure that we have features such as

00:05:52,479 --> 00:05:57,199
a secure memory allocator

00:05:55,039 --> 00:05:58,960
and in cases where it's needed we can

00:05:57,199 --> 00:05:59,840
because we're running at the os level of

00:05:58,960 --> 00:06:01,440
course we can

00:05:59,840 --> 00:06:05,199
run make use of direct privilege

00:06:01,440 --> 00:06:05,199
functionality at lower performance

00:06:05,360 --> 00:06:08,479
so just to give you a little taste of

00:06:06,960 --> 00:06:11,440
things so here's a quick demo of

00:06:08,479 --> 00:06:13,120
unicraft running on a raspberry pi 3.

00:06:11,440 --> 00:06:15,120
what we have is we have actually two of

00:06:13,120 --> 00:06:15,919
them with lcd screens in front of them

00:06:15,120 --> 00:06:18,000
at the top

00:06:15,919 --> 00:06:19,039
we've installed the raspbian

00:06:18,000 --> 00:06:21,280
distribution

00:06:19,039 --> 00:06:22,880
at the bottom unicraft we're gonna power

00:06:21,280 --> 00:06:24,880
both of them on it takes about three

00:06:22,880 --> 00:06:26,240
seconds to boot the gpu and then the cpu

00:06:24,880 --> 00:06:28,160
and os kicks in

00:06:26,240 --> 00:06:29,680
you can see unicraft is already booted

00:06:28,160 --> 00:06:31,360
and linux will take a while longer of

00:06:29,680 --> 00:06:32,720
course it takes a lot longer because

00:06:31,360 --> 00:06:34,800
it's doing a lot more things

00:06:32,720 --> 00:06:36,080
it's initializing devices and so forth

00:06:34,800 --> 00:06:37,919
but that's kind of the point

00:06:36,080 --> 00:06:39,600
the point is that perhaps you don't need

00:06:37,919 --> 00:06:43,120
all those services and devices

00:06:39,600 --> 00:06:43,120
for your particular needs

00:06:44,080 --> 00:06:47,360
to give you some performance numbers we

00:06:46,000 --> 00:06:50,560
did a bunch of tests

00:06:47,360 --> 00:06:52,319
instead of in terms of image size

00:06:50,560 --> 00:06:54,880
we've built a number of unique craft

00:06:52,319 --> 00:06:56,639
images to there's a hello world baseline

00:06:54,880 --> 00:06:59,039
one that you can see on there but

00:06:56,639 --> 00:07:00,160
also we have images that can run lua or

00:06:59,039 --> 00:07:01,840
nginx

00:07:00,160 --> 00:07:04,880
and then pack is a machine learning

00:07:01,840 --> 00:07:08,240
framework sqlite and webassembly

00:07:04,880 --> 00:07:10,400
and we've compared that to raspbian os

00:07:08,240 --> 00:07:12,639
another specialized raspbian os that we

00:07:10,400 --> 00:07:14,319
minimized and alpine linux

00:07:12,639 --> 00:07:16,000
and you can see we're talking roughly

00:07:14,319 --> 00:07:17,520
orders of magnitude difference

00:07:16,000 --> 00:07:19,120
just to give you a rough understanding

00:07:17,520 --> 00:07:20,720
of what sort of levels of

00:07:19,120 --> 00:07:24,000
image sizes you can expect that was

00:07:20,720 --> 00:07:24,000
something that is specialized

00:07:25,120 --> 00:07:28,560
in terms of power consumption we again

00:07:27,440 --> 00:07:30,639
did measurements

00:07:28,560 --> 00:07:32,319
between unigraphed all the way on the

00:07:30,639 --> 00:07:33,280
right so here we're just trying it dummy

00:07:32,319 --> 00:07:35,120
hello world

00:07:33,280 --> 00:07:36,880
just to see what the power consumption

00:07:35,120 --> 00:07:39,360
is when roughly idling

00:07:36,880 --> 00:07:40,400
versus the same thing on alpine linux

00:07:39,360 --> 00:07:43,680
raspbian and

00:07:40,400 --> 00:07:44,240
minimize raspbian as well and you can

00:07:43,680 --> 00:07:45,840
see

00:07:44,240 --> 00:07:48,240
on the bars whether you're measuring

00:07:45,840 --> 00:07:50,720
amps or watts we're getting

00:07:48,240 --> 00:07:53,840
sometimes up to 50 reduction so that's

00:07:50,720 --> 00:07:53,840
also a nice gain

00:07:54,319 --> 00:07:58,400
in terms of boot times okay you saw in

00:07:56,319 --> 00:07:59,120
the demo that unicraft boots fairly

00:07:58,400 --> 00:08:01,120
quickly

00:07:59,120 --> 00:08:03,520
here it is more in numbers you can

00:08:01,120 --> 00:08:05,440
imagine alpine linux in the range of a

00:08:03,520 --> 00:08:07,599
few seconds boot time

00:08:05,440 --> 00:08:10,400
versus different unicraft images whether

00:08:07,599 --> 00:08:12,639
it's running sqlite or nginx

00:08:10,400 --> 00:08:14,960
those boot times are in the order of

00:08:12,639 --> 00:08:17,599
tens of milliseconds or 100 up to 100

00:08:14,960 --> 00:08:17,599
milliseconds

00:08:19,759 --> 00:08:23,199
one more metric memory usage this is how

00:08:22,800 --> 00:08:26,080
much

00:08:23,199 --> 00:08:27,840
the actual os is using in terms of

00:08:26,080 --> 00:08:30,160
memory when it's running

00:08:27,840 --> 00:08:31,599
again we're comparing against raspbian

00:08:30,160 --> 00:08:33,519
and alpine linux

00:08:31,599 --> 00:08:34,800
and we're doing it against a bunch of

00:08:33,519 --> 00:08:36,000
different applications running on

00:08:34,800 --> 00:08:39,519
unicraft

00:08:36,000 --> 00:08:41,440
such as sqlite nginx and and you can see

00:08:39,519 --> 00:08:42,719
so the bars on the left for linux we

00:08:41,440 --> 00:08:44,240
don't have different applications

00:08:42,719 --> 00:08:46,000
because the application itself isn't

00:08:44,240 --> 00:08:47,600
consuming much memory so

00:08:46,000 --> 00:08:48,959
most of the memory the results are the

00:08:47,600 --> 00:08:49,920
same for the different applications

00:08:48,959 --> 00:08:51,519
anyways

00:08:49,920 --> 00:08:53,680
and you can see for linux we're in the

00:08:51,519 --> 00:08:57,360
order of 20 to 40 megs

00:08:53,680 --> 00:08:59,040
and for unicraft anywhere

00:08:57,360 --> 00:09:01,040
certainly under a mag and sometimes just

00:08:59,040 --> 00:09:04,800
hundreds of kilobytes

00:09:01,040 --> 00:09:07,440
of course this is idle as if you were to

00:09:04,800 --> 00:09:09,200
ramp up requests for nginx the memory

00:09:07,440 --> 00:09:11,600
consumption would go up

00:09:09,200 --> 00:09:12,880
for instance but all in all you can see

00:09:11,600 --> 00:09:15,120
that there are gains to be had

00:09:12,880 --> 00:09:18,560
if you can specialize to the needs of

00:09:15,120 --> 00:09:18,560
your particular application

00:09:19,760 --> 00:09:23,600
in terms of the tool and the ecosystem

00:09:21,440 --> 00:09:26,640
as i mentioned there's a menu

00:09:23,600 --> 00:09:27,839
all of unicraft is make based there's a

00:09:26,640 --> 00:09:29,680
lot of documentation

00:09:27,839 --> 00:09:31,519
on the website and i'll post some links

00:09:29,680 --> 00:09:33,760
later on

00:09:31,519 --> 00:09:35,440
and unicraft has a build system that

00:09:33,760 --> 00:09:36,800
builds each library individually and

00:09:35,440 --> 00:09:39,440
then links them together

00:09:36,800 --> 00:09:41,040
but you can also build an external

00:09:39,440 --> 00:09:44,080
library or application

00:09:41,040 --> 00:09:46,240
using their native build system and then

00:09:44,080 --> 00:09:49,279
bring in the resulting library into

00:09:46,240 --> 00:09:51,200
unicraft into a unicraft image

00:09:49,279 --> 00:09:52,720
the selection of which platforms you

00:09:51,200 --> 00:09:54,000
want to use architecture and which

00:09:52,720 --> 00:09:56,399
libraries is done by a k

00:09:54,000 --> 00:09:58,000
config menu if you've ever built a linux

00:09:56,399 --> 00:09:59,680
kernel you'd be familiar

00:09:58,000 --> 00:10:02,800
with this system and then you can

00:09:59,680 --> 00:10:02,800
obviously save and restore

00:10:02,839 --> 00:10:08,079
configurations

00:10:05,680 --> 00:10:09,680
um in addition to that uh we found that

00:10:08,079 --> 00:10:11,440
system while there's a menu

00:10:09,680 --> 00:10:13,200
we found k-config sometimes a little bit

00:10:11,440 --> 00:10:14,880
cumbersome for especially for people who

00:10:13,200 --> 00:10:17,200
just want to get started quickly

00:10:14,880 --> 00:10:18,000
so we added a tool called craft that is

00:10:17,200 --> 00:10:20,720
supposed to improve

00:10:18,000 --> 00:10:21,279
the user and developer experience which

00:10:20,720 --> 00:10:24,560
is also

00:10:21,279 --> 00:10:25,279
open source and there's a link to it on

00:10:24,560 --> 00:10:27,040
github

00:10:25,279 --> 00:10:29,760
and basically the way it works is in

00:10:27,040 --> 00:10:31,920
order to build your specialized image

00:10:29,760 --> 00:10:33,360
you start by just running a craft update

00:10:31,920 --> 00:10:34,880
so it's going to fetch

00:10:33,360 --> 00:10:36,399
all the information about what the

00:10:34,880 --> 00:10:36,880
libraries and applications that are

00:10:36,399 --> 00:10:39,600
available

00:10:36,880 --> 00:10:41,360
are you can then type craft list and

00:10:39,600 --> 00:10:43,120
it's going to show you what all of these

00:10:41,360 --> 00:10:45,360
possibilities are architectures

00:10:43,120 --> 00:10:47,360
platforms libraries and applications at

00:10:45,360 --> 00:10:48,560
the bottom

00:10:47,360 --> 00:10:50,480
and then you need to choose the

00:10:48,560 --> 00:10:51,519
application you you want to use you can

00:10:50,480 --> 00:10:54,959
choose your platform

00:10:51,519 --> 00:10:56,160
for instance bare metal arm 64 or x86

00:10:54,959 --> 00:10:59,120
kvm

00:10:56,160 --> 00:11:00,800
then you can ask it to build your image

00:10:59,120 --> 00:11:03,120
and then in the end you can

00:11:00,800 --> 00:11:04,000
tell it to run for a specific platform

00:11:03,120 --> 00:11:05,680
and then

00:11:04,000 --> 00:11:07,040
uh it'll actually run the application

00:11:05,680 --> 00:11:09,519
you want to run so

00:11:07,040 --> 00:11:10,959
this should make it easy to get started

00:11:09,519 --> 00:11:12,320
for those of you who know what uni

00:11:10,959 --> 00:11:15,200
kernels are

00:11:12,320 --> 00:11:16,320
normally this is a much much simpler

00:11:15,200 --> 00:11:18,160
process than

00:11:16,320 --> 00:11:22,399
the expert work that will be needed to

00:11:18,160 --> 00:11:22,399
run unicorn projects in the past

00:11:22,959 --> 00:11:26,399
so in terms of application and language

00:11:24,560 --> 00:11:28,079
support we have an initial set of

00:11:26,399 --> 00:11:30,079
reported applications in libraries

00:11:28,079 --> 00:11:31,680
things like web servers such as nginx

00:11:30,079 --> 00:11:34,560
and light dpd

00:11:31,680 --> 00:11:37,200
databases such as memcached is not quite

00:11:34,560 --> 00:11:38,640
ready but there's red is an sqlite

00:11:37,200 --> 00:11:41,760
there's machine learning frameworks such

00:11:38,640 --> 00:11:43,680
as pi torch and tensorflow lite

00:11:41,760 --> 00:11:45,120
this might be important because machine

00:11:43,680 --> 00:11:47,120
learning is increasingly used on

00:11:45,120 --> 00:11:48,560
embedded devices

00:11:47,120 --> 00:11:51,040
there's network processing frameworks

00:11:48,560 --> 00:11:52,959
such as dpdk and click

00:11:51,040 --> 00:11:55,120
and lots of languages as i already

00:11:52,959 --> 00:11:56,560
mentioned

00:11:55,120 --> 00:11:58,560
and this is just a screenshot to show

00:11:56,560 --> 00:12:00,399
you what it looks like this is sqlite

00:11:58,560 --> 00:12:01,279
running in this case as a zenverge

00:12:00,399 --> 00:12:03,600
machine

00:12:01,279 --> 00:12:04,720
uh in just hundreds of kilobytes and

00:12:03,600 --> 00:12:06,560
just running some

00:12:04,720 --> 00:12:10,160
some inserts some queries and then

00:12:06,560 --> 00:12:12,320
that's it

00:12:10,160 --> 00:12:13,519
in terms of future work and challenges

00:12:12,320 --> 00:12:16,240
one of the things

00:12:13,519 --> 00:12:18,000
if we're running bare metal is obviously

00:12:16,240 --> 00:12:20,480
driver support

00:12:18,000 --> 00:12:22,320
so what we're aiming to do is add some

00:12:20,480 --> 00:12:22,880
sort of compatibility layer so that we

00:12:22,320 --> 00:12:26,079
can

00:12:22,880 --> 00:12:27,519
reuse existing drivers from a common

00:12:26,079 --> 00:12:31,040
general purpose os

00:12:27,519 --> 00:12:33,360
this could be probably freebsd

00:12:31,040 --> 00:12:35,680
and also device support as i mentioned

00:12:33,360 --> 00:12:38,399
we can now run on the raspberry pi 3

00:12:35,680 --> 00:12:40,320
and also on this av net the xilinx ultra

00:12:38,399 --> 00:12:42,160
96v2

00:12:40,320 --> 00:12:43,360
and we're looking into some other boards

00:12:42,160 --> 00:12:45,440
like the pine64

00:12:43,360 --> 00:12:47,200
and a question to to the community might

00:12:45,440 --> 00:12:49,279
be where should we go

00:12:47,200 --> 00:12:53,839
should we keep adding support for 96

00:12:49,279 --> 00:12:53,839
ports what are things that are important

00:12:54,079 --> 00:12:57,279
unicraft is an open source linux

00:12:56,079 --> 00:12:59,200
foundation project

00:12:57,279 --> 00:13:00,560
it's got a bsd license so it should be

00:12:59,200 --> 00:13:02,079
fairly friendly to

00:13:00,560 --> 00:13:03,600
both to people who want to just do

00:13:02,079 --> 00:13:06,240
research or try it out

00:13:03,600 --> 00:13:07,680
or those who want to use it commercially

00:13:06,240 --> 00:13:08,880
there's lots of information at

00:13:07,680 --> 00:13:11,279
unicraft.org

00:13:08,880 --> 00:13:12,160
documentation on how to use it how to

00:13:11,279 --> 00:13:15,360
get started

00:13:12,160 --> 00:13:17,839
if you want to contribute to it all the

00:13:15,360 --> 00:13:18,880
sources are on github so you can go to

00:13:17,839 --> 00:13:21,680
github.com

00:13:18,880 --> 00:13:22,880
unicraft and you can get a lot of

00:13:21,680 --> 00:13:25,120
pointers on there

00:13:22,880 --> 00:13:27,120
the craft tool as i mentioned is already

00:13:25,120 --> 00:13:29,040
is also on github

00:13:27,120 --> 00:13:32,160
and there's also a main list in case you

00:13:29,040 --> 00:13:35,360
want to get in touch with us

00:13:32,160 --> 00:13:35,920
and and contribute and that's my last

00:13:35,360 --> 00:13:39,120
slide

00:13:35,920 --> 00:13:40,639
uh so thanks a lot for your time and i'm

00:13:39,120 --> 00:13:45,519
on the slack channel if you

00:13:40,639 --> 00:13:45,519

YouTube URL: https://www.youtube.com/watch?v=YLxFiDZQ6WA


