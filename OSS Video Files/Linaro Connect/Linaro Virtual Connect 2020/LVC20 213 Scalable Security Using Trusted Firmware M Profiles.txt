Title: LVC20 213 Scalable Security Using Trusted Firmware M Profiles
Publication date: 2020-10-08
Playlist: Linaro Virtual Connect 2020
Description: 
	Security is a major concern for IoT deployments. Platform Security Architecture (PSA) provides a framework for building secure IoT devices. Trusted Firmware-M is the PSA Open Source Reference Implementation aligning with PSA certified guidelines addressing common IoT threats. TF-M creates a Secure Processing Environment providing a set of Secure Services including Secure boot flow on Cortex-M CPUs that is widely used in IoT devices.

There is a dramatic variation in IoT usecases varying from smart home bulbs, thermostats, personal health monitors to sensors deployed in critical urban infrastructure and factories. These devices have different security requirements due to the difference in assets and trust associated with them. Deploying and Maintaining Security in these devices over its lifetime involves cost including memory and performance consumption of these devices. Therefore, it is important for TF-M to provide different configurations to satisfy security requirements of these different classes of IoT devices.

TF-M Profile provides Small, Medium and Large configurations with increasing level of Security functionality allowing device manufacturers to choose (and further customize if required) a profile based on Threat Model and Security Analysis of their usecase. Profile Small. Medium and Large configurations will be supported in TF-M Project and therefore deployable on a variety of Cortex-M based Silicon platforms.

The session will provide an overview of how Trusted Firmware-M makes it easier for IoT Application developers to enable Security on their devices. The session will cover the need for TF-M Profiles and features included in each Profile.

The session will demonstrate how Profile Small (aimed at memory and performance constrained devices) can be used to create a Secure device meeting the requirements for PSA Certified Level1 and connect securely with other devices.

https://connect.linaro.org/resources/lvc20/lvc20-213/
Captions: 
	00:00:00,080 --> 00:00:03,439
hello everyone uh today's presentation

00:00:02,879 --> 00:00:06,560
is

00:00:03,439 --> 00:00:08,160
on trusted firmware m uh some of the

00:00:06,560 --> 00:00:10,400
recent work we have been doing

00:00:08,160 --> 00:00:12,320
on profiles and we are going to finish

00:00:10,400 --> 00:00:15,759
off the presentation

00:00:12,320 --> 00:00:18,160
on a demo uh based on profile spawn

00:00:15,759 --> 00:00:19,760
myself shibu kriyakos i'm part of arms

00:00:18,160 --> 00:00:22,400
open source software group

00:00:19,760 --> 00:00:24,160
and product manager of cluster through m

00:00:22,400 --> 00:00:24,560
joining me in this presentation is david

00:00:24,160 --> 00:00:30,720
wang

00:00:24,560 --> 00:00:33,360
the tfm tech lead

00:00:30,720 --> 00:00:34,160
we all have been hearing for a few years

00:00:33,360 --> 00:00:36,399
now that are

00:00:34,160 --> 00:00:38,800
going to be a trillion connected devices

00:00:36,399 --> 00:00:40,960
by 2035

00:00:38,800 --> 00:00:42,800
and um all these connected devices are

00:00:40,960 --> 00:00:45,120
getting closer and closer to

00:00:42,800 --> 00:00:46,800
our daily lives whether it's in the form

00:00:45,120 --> 00:00:49,520
of baby monitors

00:00:46,800 --> 00:00:51,199
health wearables or cities trying to get

00:00:49,520 --> 00:00:53,920
smarter

00:00:51,199 --> 00:00:55,680
and the whole coronavare situation seems

00:00:53,920 --> 00:00:58,640
to have just accelerated

00:00:55,680 --> 00:01:00,960
the iot deployments whether it's in

00:00:58,640 --> 00:01:02,640
terms of remote health monitoring

00:01:00,960 --> 00:01:05,040
drones that are used to deliver

00:01:02,640 --> 00:01:07,920
medicines and to clean our streets

00:01:05,040 --> 00:01:09,439
or even to track the movement of

00:01:07,920 --> 00:01:12,799
important assets

00:01:09,439 --> 00:01:15,600
and people itself however

00:01:12,799 --> 00:01:16,320
one of the common themes that we hear

00:01:15,600 --> 00:01:19,200
with

00:01:16,320 --> 00:01:20,960
connected devices is are they all going

00:01:19,200 --> 00:01:24,080
to be secure

00:01:20,960 --> 00:01:25,439
just citing here one of the iut business

00:01:24,080 --> 00:01:28,400
index surveys that

00:01:25,439 --> 00:01:30,479
concluded earlier this year which cited

00:01:28,400 --> 00:01:31,759
45 percent of the respondents especially

00:01:30,479 --> 00:01:34,320
in the enterprise

00:01:31,759 --> 00:01:35,360
space still thought security concerns

00:01:34,320 --> 00:01:39,920
are still

00:01:35,360 --> 00:01:40,479
hampering the adoption of iot at scale

00:01:39,920 --> 00:01:42,479
so that

00:01:40,479 --> 00:01:43,840
just reiterates the fact that it's

00:01:42,479 --> 00:01:46,560
important to solve

00:01:43,840 --> 00:01:47,600
uh security in a scalable manner to

00:01:46,560 --> 00:01:49,520
achieve the dream of

00:01:47,600 --> 00:01:51,119
a trillion connected devices in a few

00:01:49,520 --> 00:01:53,680
years time

00:01:51,119 --> 00:01:55,520
this is where uh the platform security

00:01:53,680 --> 00:01:56,399
architecture program which offers a

00:01:55,520 --> 00:01:58,560
complete

00:01:56,399 --> 00:02:00,000
uh offering to build your secure

00:01:58,560 --> 00:02:02,880
connected devices

00:02:00,000 --> 00:02:03,439
becomes very crucial and as part of the

00:02:02,880 --> 00:02:05,520
program

00:02:03,439 --> 00:02:06,960
is the open source reference

00:02:05,520 --> 00:02:10,959
implementation trusted

00:02:06,960 --> 00:02:15,120
an end which allows devices to adopt

00:02:10,959 --> 00:02:19,360
the project and get themselves certified

00:02:15,120 --> 00:02:21,120
either as a silicon or as a end device

00:02:19,360 --> 00:02:22,480
so let's look at trusted firmware at a

00:02:21,120 --> 00:02:24,800
very high level

00:02:22,480 --> 00:02:26,480
uh trusted firmware m provides a secure

00:02:24,800 --> 00:02:29,120
processing environment for

00:02:26,480 --> 00:02:31,200
cortex-m devices especially the temp

00:02:29,120 --> 00:02:33,280
cross-zone enabled devices

00:02:31,200 --> 00:02:35,040
it provides that isolation between the

00:02:33,280 --> 00:02:37,120
secure and non-secure world

00:02:35,040 --> 00:02:38,319
by leveraging the trust zone that is

00:02:37,120 --> 00:02:41,519
available on

00:02:38,319 --> 00:02:44,160
the hardware it provides a secure boot

00:02:41,519 --> 00:02:45,920
that authenticates all the runtime

00:02:44,160 --> 00:02:49,360
images on the platform

00:02:45,920 --> 00:02:51,680
and it also supports a set of runtime

00:02:49,360 --> 00:02:55,120
secure services whether it's storage

00:02:51,680 --> 00:02:57,760
to confidentially store

00:02:55,120 --> 00:02:58,480
all the critical assets on your platform

00:02:57,760 --> 00:03:00,959
or to store

00:02:58,480 --> 00:03:02,800
things like keys and certificate away

00:03:00,959 --> 00:03:06,640
from the non-secure applications and

00:03:02,800 --> 00:03:08,560
operating system cryptoservice that

00:03:06,640 --> 00:03:10,959
makes itself available through these psa

00:03:08,560 --> 00:03:12,959
crypto apis for doing all sort of crypto

00:03:10,959 --> 00:03:16,159
operations whether it's signing

00:03:12,959 --> 00:03:16,800
signature validation or to do tls

00:03:16,159 --> 00:03:20,000
connection

00:03:16,800 --> 00:03:21,920
to other remote entities and an

00:03:20,000 --> 00:03:23,120
attestation service that can be used to

00:03:21,920 --> 00:03:25,360
prove the

00:03:23,120 --> 00:03:26,879
identity of the device to a relying

00:03:25,360 --> 00:03:30,480
party like a cloud

00:03:26,879 --> 00:03:32,879
service as tfm evolved

00:03:30,480 --> 00:03:33,599
we can see that there are a lot of

00:03:32,879 --> 00:03:36,319
devices

00:03:33,599 --> 00:03:36,879
now enabled with tfm as its root of

00:03:36,319 --> 00:03:38,959
trust

00:03:36,879 --> 00:03:40,080
i'm showing a few examples here whether

00:03:38,959 --> 00:03:45,120
it's the uh

00:03:40,080 --> 00:03:48,319
nxp lpc55 platform sds stm32l5

00:03:45,120 --> 00:03:49,360
or the cyprus b64 all these devices

00:03:48,319 --> 00:03:52,159
either

00:03:49,360 --> 00:03:53,680
through upstream tfm support or through

00:03:52,159 --> 00:03:57,760
sdk distributions

00:03:53,680 --> 00:04:00,000
use uh tfm as the root of trust and

00:03:57,760 --> 00:04:01,760
have got the relevant psa security

00:04:00,000 --> 00:04:03,760
certification as well

00:04:01,760 --> 00:04:05,840
at the same time tfm is now starting to

00:04:03,760 --> 00:04:09,040
get integrated on all the popular

00:04:05,840 --> 00:04:10,799
open source articles uh like embedded os

00:04:09,040 --> 00:04:14,400
free rpos at the

00:04:10,799 --> 00:04:14,879
kernel level and the amazon pro rpos

00:04:14,400 --> 00:04:18,720
level

00:04:14,879 --> 00:04:22,239
and with sapphire uh integrating tfm for

00:04:18,720 --> 00:04:22,239
many silicon platforms

00:04:22,320 --> 00:04:26,960
in addition to all the work we've been

00:04:24,880 --> 00:04:30,240
doing around these platforms

00:04:26,960 --> 00:04:30,720
enablement and art boosters tfm profiles

00:04:30,240 --> 00:04:32,639
is an

00:04:30,720 --> 00:04:34,240
area that we have been looking at very

00:04:32,639 --> 00:04:37,120
carefully for the last

00:04:34,240 --> 00:04:37,120
few months now

00:04:37,520 --> 00:04:43,440
if you take the overall iot device

00:04:40,840 --> 00:04:45,759
landscape

00:04:43,440 --> 00:04:47,199
which is where cortex m and therefore

00:04:45,759 --> 00:04:50,080
tfm is targeted

00:04:47,199 --> 00:04:51,759
at you can see there is a huge variation

00:04:50,080 --> 00:04:54,720
in the type of devices that

00:04:51,759 --> 00:04:55,600
you call iot connected devices it can

00:04:54,720 --> 00:04:58,880
vary from

00:04:55,600 --> 00:05:00,960
your home smart bulb or a thermometer

00:04:58,880 --> 00:05:02,320
or a slightly complex system like a

00:05:00,960 --> 00:05:05,280
asset tracker

00:05:02,320 --> 00:05:06,560
or a smart meter or even more complex

00:05:05,280 --> 00:05:10,160
systems like

00:05:06,560 --> 00:05:13,520
a drone or a small robot or a gateway

00:05:10,160 --> 00:05:16,560
although all these devices do use

00:05:13,520 --> 00:05:18,720
a cortex-m cpu all these devices

00:05:16,560 --> 00:05:20,639
have a very huge difference in the

00:05:18,720 --> 00:05:23,280
device capabilities

00:05:20,639 --> 00:05:24,560
so a low-end codex mcp you might have

00:05:23,280 --> 00:05:28,000
limited performance

00:05:24,560 --> 00:05:31,120
it might have only a few kb

00:05:28,000 --> 00:05:34,320
of ram and flash at its disposal whereas

00:05:31,120 --> 00:05:34,960
a high-end cortex-m device might have a

00:05:34,320 --> 00:05:37,520
high-end

00:05:34,960 --> 00:05:38,400
cortex-m cpu of course with higher

00:05:37,520 --> 00:05:41,120
performance

00:05:38,400 --> 00:05:42,320
and with a few mb of flash at its

00:05:41,120 --> 00:05:44,320
disposal

00:05:42,320 --> 00:05:45,600
so it's quite apparent that it's

00:05:44,320 --> 00:05:49,919
impossible to give

00:05:45,600 --> 00:05:52,960
a single configuration ready-made dfm

00:05:49,919 --> 00:05:53,600
root of trust firmware that satisfies

00:05:52,960 --> 00:05:57,440
the need of

00:05:53,600 --> 00:06:00,000
all these use cases its security

00:05:57,440 --> 00:06:00,639
and that can fit into these different

00:06:00,000 --> 00:06:03,520
device

00:06:00,639 --> 00:06:05,360
profiles so this is where we have tried

00:06:03,520 --> 00:06:08,400
to categorize

00:06:05,360 --> 00:06:09,759
the overall iot device landscape into

00:06:08,400 --> 00:06:13,600
three categories

00:06:09,759 --> 00:06:15,440
and try to define tfm profiles

00:06:13,600 --> 00:06:17,120
into these three categories namely

00:06:15,440 --> 00:06:20,160
profile small medium

00:06:17,120 --> 00:06:23,039
and large what this means

00:06:20,160 --> 00:06:24,160
is we are providing as part of the

00:06:23,039 --> 00:06:28,000
profiles

00:06:24,160 --> 00:06:31,759
a predefined list of tfm features

00:06:28,000 --> 00:06:34,080
that aligns with the typical use cases

00:06:31,759 --> 00:06:36,160
and understands the hardware constraints

00:06:34,080 --> 00:06:39,520
in each of these categories

00:06:36,160 --> 00:06:43,520
and these tfm profiles can be used as

00:06:39,520 --> 00:06:45,120
reference profiles for

00:06:43,520 --> 00:06:47,280
application developers when they're

00:06:45,120 --> 00:06:50,080
targeting each and every use case

00:06:47,280 --> 00:06:51,440
and they can add or remove features from

00:06:50,080 --> 00:06:53,759
these predefined

00:06:51,440 --> 00:06:54,960
list of features in each profile to

00:06:53,759 --> 00:06:56,639
match their exact

00:06:54,960 --> 00:07:03,759
security requirement for their

00:06:56,639 --> 00:07:06,319
particular use case

00:07:03,759 --> 00:07:08,319
let's briefly look at the various

00:07:06,319 --> 00:07:09,680
profiles that we've built over the last

00:07:08,319 --> 00:07:12,800
few months

00:07:09,680 --> 00:07:14,479
starting with profile small as the name

00:07:12,800 --> 00:07:17,919
suggests it is the lowest

00:07:14,479 --> 00:07:21,120
memory footprint tfm profile

00:07:17,919 --> 00:07:23,919
that we have created it is aimed at

00:07:21,120 --> 00:07:24,400
ultra constrained devices that runs very

00:07:23,919 --> 00:07:27,039
simple

00:07:24,400 --> 00:07:28,000
iot applications these are the sort of

00:07:27,039 --> 00:07:31,440
devices that

00:07:28,000 --> 00:07:33,360
put in connect directly

00:07:31,440 --> 00:07:35,360
to a cloud service it would normally

00:07:33,360 --> 00:07:37,919
connect to a local

00:07:35,360 --> 00:07:38,479
hub or a gateway and the gateway would

00:07:37,919 --> 00:07:40,800
then

00:07:38,479 --> 00:07:42,240
connect to the cloud we have a demo at

00:07:40,800 --> 00:07:44,639
the end as i said

00:07:42,240 --> 00:07:46,960
which shows profiles more actually in

00:07:44,639 --> 00:07:46,960
use

00:07:47,120 --> 00:07:52,960
and with profile small it's still not

00:07:50,240 --> 00:07:54,639
a bundle of security requirement these

00:07:52,960 --> 00:07:56,240
set of security features

00:07:54,639 --> 00:07:58,560
gives you enough functionality to meet

00:07:56,240 --> 00:07:59,919
the eps level 1 security certification

00:07:58,560 --> 00:08:04,319
requirements

00:07:59,919 --> 00:08:07,360
if you look at what profile small offers

00:08:04,319 --> 00:08:08,800
under the hood and compare that with the

00:08:07,360 --> 00:08:11,280
tfm

00:08:08,800 --> 00:08:12,400
diagram is showing a few slides back

00:08:11,280 --> 00:08:15,599
what it provides

00:08:12,400 --> 00:08:18,639
is a very simple tfm lightweight

00:08:15,599 --> 00:08:20,720
framework it only provides one level of

00:08:18,639 --> 00:08:22,560
isolation so it only separates the

00:08:20,720 --> 00:08:24,319
non-secure and the secure world

00:08:22,560 --> 00:08:27,039
it doesn't support the higher levels of

00:08:24,319 --> 00:08:29,680
isolation that psa defines

00:08:27,039 --> 00:08:31,759
it allows buffer sharing between the

00:08:29,680 --> 00:08:33,919
normal world and the secure world

00:08:31,759 --> 00:08:34,800
it only supports one secure context

00:08:33,919 --> 00:08:37,599
meaning that

00:08:34,800 --> 00:08:38,240
an application can have only a single

00:08:37,599 --> 00:08:40,240
call

00:08:38,240 --> 00:08:42,159
a second call to the secure wall will

00:08:40,240 --> 00:08:46,399
have to wait till the other

00:08:42,159 --> 00:08:48,720
secure service is serviced completely

00:08:46,399 --> 00:08:49,839
there is a secure boot but with very

00:08:48,720 --> 00:08:53,279
basic functionality

00:08:49,839 --> 00:08:55,440
it do have anti-roll back protection

00:08:53,279 --> 00:08:57,200
but in terms of firmware or software

00:08:55,440 --> 00:08:59,680
update it can only update

00:08:57,200 --> 00:09:00,480
the entire platform image in one shot

00:08:59,680 --> 00:09:02,720
rather than

00:09:00,480 --> 00:09:04,000
updating the secure and non-secure world

00:09:02,720 --> 00:09:06,560
separately

00:09:04,000 --> 00:09:08,399
in terms of runtime services it supports

00:09:06,560 --> 00:09:11,040
the internal trusted storage

00:09:08,399 --> 00:09:12,880
so it supports securely storing your

00:09:11,040 --> 00:09:15,760
keys and certificates on an

00:09:12,880 --> 00:09:16,240
on-chip storage which means the assets

00:09:15,760 --> 00:09:18,160
are not

00:09:16,240 --> 00:09:19,760
encrypted because the storage is part of

00:09:18,160 --> 00:09:21,600
the soak itself

00:09:19,760 --> 00:09:23,440
it doesn't offer any rollback protection

00:09:21,600 --> 00:09:25,839
again because it's backed by

00:09:23,440 --> 00:09:27,120
on-chip storage when it comes to the

00:09:25,839 --> 00:09:29,839
crypto service

00:09:27,120 --> 00:09:30,320
it just supports symmetric ciphers which

00:09:29,839 --> 00:09:33,600
is the

00:09:30,320 --> 00:09:35,519
uh typical cryptographic

00:09:33,600 --> 00:09:37,200
ciphers that you would need in such

00:09:35,519 --> 00:09:39,680
simpler applications

00:09:37,200 --> 00:09:41,519
so you would normally have something

00:09:39,680 --> 00:09:45,040
like an aes

00:09:41,519 --> 00:09:47,200
suit you'll have sha 256

00:09:45,040 --> 00:09:49,920
hmac those sort of ciphers you wouldn't

00:09:47,200 --> 00:09:51,440
have something like ecdsa or rsa

00:09:49,920 --> 00:09:53,839
supported as part of this

00:09:51,440 --> 00:09:55,760
cypher suit but you can still do a

00:09:53,839 --> 00:09:57,200
pre-shared gtls connection if you want

00:09:55,760 --> 00:10:00,480
to securely connect to

00:09:57,200 --> 00:10:01,760
your local gateways there's the

00:10:00,480 --> 00:10:04,880
attestation service

00:10:01,760 --> 00:10:05,760
again it is based on symmetrically key

00:10:04,880 --> 00:10:08,399
algorithm

00:10:05,760 --> 00:10:09,680
again it supports attestation which can

00:10:08,399 --> 00:10:11,760
be used to

00:10:09,680 --> 00:10:13,120
prove your identity but again it is

00:10:11,760 --> 00:10:15,200
limited in terms of

00:10:13,120 --> 00:10:17,440
just supporting symmetric key based

00:10:15,200 --> 00:10:19,040
attestation service

00:10:17,440 --> 00:10:21,279
you'll see more about it in the demo

00:10:19,040 --> 00:10:24,079
that david is going to show

00:10:21,279 --> 00:10:25,120
in a few minutes uh if you now move on

00:10:24,079 --> 00:10:28,079
to profile

00:10:25,120 --> 00:10:30,240
medium this is again aiming at

00:10:28,079 --> 00:10:30,880
constrained devices but slightly richer

00:10:30,240 --> 00:10:33,440
devices

00:10:30,880 --> 00:10:34,720
compared to what profile small is

00:10:33,440 --> 00:10:36,880
targeted at

00:10:34,720 --> 00:10:38,959
these sort of devices would typically

00:10:36,880 --> 00:10:42,079
try and connect to the cloud services

00:10:38,959 --> 00:10:45,040
directly rather than going via a

00:10:42,079 --> 00:10:45,760
gateway and this means that there should

00:10:45,040 --> 00:10:48,640
be more

00:10:45,760 --> 00:10:49,680
security in build in these devices

00:10:48,640 --> 00:10:53,440
compared to a

00:10:49,680 --> 00:10:57,040
device that is aiming at profile small

00:10:53,440 --> 00:11:00,079
still it provides enough functionality

00:10:57,040 --> 00:11:03,200
to meet the psa level 2 certification

00:11:00,079 --> 00:11:05,279
requirements and again just like profile

00:11:03,200 --> 00:11:07,920
small if you look at the features

00:11:05,279 --> 00:11:09,279
uh that is available under the hood it

00:11:07,920 --> 00:11:11,920
supports secure boot

00:11:09,279 --> 00:11:12,720
but again a bit more feature rich

00:11:11,920 --> 00:11:14,959
compared to what

00:11:12,720 --> 00:11:16,480
is supported in profile small so the

00:11:14,959 --> 00:11:18,399
secure boot here still supports

00:11:16,480 --> 00:11:19,519
anti-roll back protection but it also

00:11:18,399 --> 00:11:22,240
allows the

00:11:19,519 --> 00:11:23,040
images of the secure and the non-secure

00:11:22,240 --> 00:11:25,279
side to be

00:11:23,040 --> 00:11:26,959
updated separately which means these

00:11:25,279 --> 00:11:28,640
devices if they have

00:11:26,959 --> 00:11:30,320
different vendors providing the secure

00:11:28,640 --> 00:11:32,959
world and non-secure world

00:11:30,320 --> 00:11:34,720
firmware these can be updated separately

00:11:32,959 --> 00:11:36,000
without having a dependency on each

00:11:34,720 --> 00:11:39,760
other

00:11:36,000 --> 00:11:42,240
in terms of the framework if this

00:11:39,760 --> 00:11:43,360
not supporting the library model instead

00:11:42,240 --> 00:11:46,640
it supports the

00:11:43,360 --> 00:11:48,640
psa firmware framework ipc model which

00:11:46,640 --> 00:11:51,040
offers the level 1 and level 2

00:11:48,640 --> 00:11:52,079
isolation so it's the ipc framework that

00:11:51,040 --> 00:11:53,760
is used for

00:11:52,079 --> 00:11:55,440
inter-partition communication and for

00:11:53,760 --> 00:11:56,000
communication between the non-secure and

00:11:55,440 --> 00:11:58,639
the secure

00:11:56,000 --> 00:12:00,240
side in terms of services it supports

00:11:58,639 --> 00:12:03,440
the internal trusted tool

00:12:00,240 --> 00:12:05,279
or storing keys

00:12:03,440 --> 00:12:06,480
uh it can also support the protected

00:12:05,279 --> 00:12:08,959
storage where you can

00:12:06,480 --> 00:12:10,720
encrypt the assets and store things in

00:12:08,959 --> 00:12:13,200
an external flash

00:12:10,720 --> 00:12:14,639
the crypto service it's a bit more rich

00:12:13,200 --> 00:12:16,639
so here it supports

00:12:14,639 --> 00:12:17,680
uh both symmetric and asymmetric

00:12:16,639 --> 00:12:20,959
cryptography so

00:12:17,680 --> 00:12:24,240
you have the possibility to uh having

00:12:20,959 --> 00:12:27,279
ecdsa you can do signature verification

00:12:24,240 --> 00:12:28,480
you can have aed's type of encryption of

00:12:27,279 --> 00:12:30,320
your assets

00:12:28,480 --> 00:12:32,160
and of course you can use the crypto

00:12:30,320 --> 00:12:34,160
service to establish a full tls

00:12:32,160 --> 00:12:36,240
connection to the cloud service

00:12:34,160 --> 00:12:39,120
when it comes to the attestation service

00:12:36,240 --> 00:12:40,240
it again allows you to prove your

00:12:39,120 --> 00:12:43,279
identity

00:12:40,240 --> 00:12:45,760
to a relying party but here it uses

00:12:43,279 --> 00:12:47,120
the asymmetric cryptography or a public

00:12:45,760 --> 00:12:50,800
private key pair to

00:12:47,120 --> 00:12:50,800
sign the attestation token

00:12:51,040 --> 00:12:55,760
and finally looking at the profile

00:12:54,079 --> 00:12:57,760
large configuration i would say it's

00:12:55,760 --> 00:12:59,600
very much under design so profile small

00:12:57,760 --> 00:13:01,760
and medium is now supported in

00:12:59,600 --> 00:13:02,880
uh tfm upstream you can have a look at

00:13:01,760 --> 00:13:05,920
the detailed design

00:13:02,880 --> 00:13:06,720
if you go to the project profile largest

00:13:05,920 --> 00:13:08,959
aimed at

00:13:06,720 --> 00:13:09,920
uh less constrained devices so you might

00:13:08,959 --> 00:13:13,600
have a few

00:13:09,920 --> 00:13:14,959
mdf flash and a higher-end codex and cpu

00:13:13,600 --> 00:13:17,360
at your disposal for

00:13:14,959 --> 00:13:19,120
achieving a more complex use case there

00:13:17,360 --> 00:13:20,079
can be multiple vendors providing

00:13:19,120 --> 00:13:22,320
firmware

00:13:20,079 --> 00:13:23,440
to these sites of devices and it might

00:13:22,320 --> 00:13:25,839
have to um

00:13:23,440 --> 00:13:26,880
cater to uh sort of higher attack

00:13:25,839 --> 00:13:29,839
potential like

00:13:26,880 --> 00:13:31,519
attacks at a physical level as well and

00:13:29,839 --> 00:13:32,800
if you quickly compare it with profile

00:13:31,519 --> 00:13:36,480
medium this would

00:13:32,800 --> 00:13:38,560
be much more feature-rich it would have

00:13:36,480 --> 00:13:40,240
still the ipc model but it would support

00:13:38,560 --> 00:13:41,360
the level three isolation which means

00:13:40,240 --> 00:13:43,839
you can have

00:13:41,360 --> 00:13:45,680
uh separation between the different

00:13:43,839 --> 00:13:46,959
application root of trust services so

00:13:45,680 --> 00:13:49,600
you can have

00:13:46,959 --> 00:13:50,160
your own custom secure services uh as

00:13:49,600 --> 00:13:53,279
shown

00:13:50,160 --> 00:13:55,360
as green blocks here us

00:13:53,279 --> 00:13:56,959
uh but without having to trust each

00:13:55,360 --> 00:13:58,959
other it would still have

00:13:56,959 --> 00:14:00,720
the storage functionality but it would

00:13:58,959 --> 00:14:01,040
support both protected and internal

00:14:00,720 --> 00:14:04,079
trust

00:14:01,040 --> 00:14:06,160
storage at the crypto service um with

00:14:04,079 --> 00:14:08,399
all possible ciphers and the attestation

00:14:06,160 --> 00:14:08,959
service as well but this is under design

00:14:08,399 --> 00:14:11,120
and you

00:14:08,959 --> 00:14:14,000
see more details around the design in

00:14:11,120 --> 00:14:17,440
the coming weeks in the meaning list

00:14:14,000 --> 00:14:20,160
with that i would like to hand over to

00:14:17,440 --> 00:14:22,800
david to talk about the profile small

00:14:20,160 --> 00:14:26,720
demo that we have put together

00:14:22,800 --> 00:14:29,519
thank you thank you uh can you hear me

00:14:26,720 --> 00:14:31,839
yes and you can start sharing now let's

00:14:29,519 --> 00:14:31,839
talk

00:14:37,839 --> 00:14:48,000
can you see this right

00:14:44,800 --> 00:14:49,120
yes okay yeah yes thank you yeah i'm

00:14:48,000 --> 00:14:52,720
david wong from

00:14:49,120 --> 00:14:55,680
i'm china so i mainly focus on the tfm

00:14:52,720 --> 00:14:58,480
ecosystem enablement so in this section

00:14:55,680 --> 00:15:03,040
i introduce the profile small demo

00:14:58,480 --> 00:15:06,160
so this is a use case of the

00:15:03,040 --> 00:15:09,760
of the demo so basically as as

00:15:06,160 --> 00:15:12,240
shabu introduced the profile small

00:15:09,760 --> 00:15:13,600
ha just supports us the magic of

00:15:12,240 --> 00:15:17,360
cryptography

00:15:13,600 --> 00:15:21,040
so we need to uh connect to the gateway

00:15:17,360 --> 00:15:24,399
uh instead of the uh cloud directly

00:15:21,040 --> 00:15:25,920
so the gateway supports the trs psk

00:15:24,399 --> 00:15:29,680
which is a symmetric uh

00:15:25,920 --> 00:15:32,000
based uh js connection to secure the

00:15:29,680 --> 00:15:32,959
uh the communication between the device

00:15:32,000 --> 00:15:36,800
and the gateway

00:15:32,959 --> 00:15:40,320
so in this example we have three devices

00:15:36,800 --> 00:15:43,199
which all arm weight am devices

00:15:40,320 --> 00:15:44,000
running tfm profile small connect to the

00:15:43,199 --> 00:15:45,759
gateway

00:15:44,000 --> 00:15:49,440
gateway is the rest of the battery price

00:15:45,759 --> 00:15:54,079
3b so the gateway can connect to the aws

00:15:49,440 --> 00:15:57,680
cloud based on the tis 1.2

00:15:54,079 --> 00:16:02,160
this is a s metric based okay

00:15:57,680 --> 00:16:04,880
so the gateway will uh when the jspsk

00:16:02,160 --> 00:16:05,519
connection established the gateway will

00:16:04,880 --> 00:16:08,079
do the

00:16:05,519 --> 00:16:08,880
initial destination check for the

00:16:08,079 --> 00:16:12,000
devices

00:16:08,880 --> 00:16:14,959
to make sure the device the device

00:16:12,000 --> 00:16:16,399
is in the correct secure state or life

00:16:14,959 --> 00:16:21,519
cycle or

00:16:16,399 --> 00:16:24,959
had correct secure components

00:16:21,519 --> 00:16:27,360
okay so this slides is uh

00:16:24,959 --> 00:16:28,320
to show the the software components of

00:16:27,360 --> 00:16:31,839
this demo

00:16:28,320 --> 00:16:33,360
so uh in device side uh we run the tfm

00:16:31,839 --> 00:16:37,839
provides more in the

00:16:33,360 --> 00:16:40,880
se and and we mainly focus on the

00:16:37,839 --> 00:16:43,360
crypto and its stories used by this demo

00:16:40,880 --> 00:16:45,199
so and in the non-secure side we run the

00:16:43,360 --> 00:16:48,959
uh free autos

00:16:45,199 --> 00:16:50,160
and a an application to handle the tsp

00:16:48,959 --> 00:16:53,519
client

00:16:50,160 --> 00:16:56,880
request which will establish a

00:16:53,519 --> 00:16:57,920
ts connection and forward the initial

00:16:56,880 --> 00:17:00,880
attestation

00:16:57,920 --> 00:17:02,160
request result and the following

00:17:00,880 --> 00:17:04,640
application data

00:17:02,160 --> 00:17:05,600
the gateway on the gateway side is based

00:17:04,640 --> 00:17:08,160
on the linux

00:17:05,600 --> 00:17:09,360
and yeah it's the raspberry pi you know

00:17:08,160 --> 00:17:13,360
and it connects to

00:17:09,360 --> 00:17:17,679
aws uh adapts cloud through the

00:17:13,360 --> 00:17:19,839
aws iot device application so the ts

00:17:17,679 --> 00:17:20,799
psk server application running on the

00:17:19,839 --> 00:17:24,160
gateway

00:17:20,799 --> 00:17:28,160
uh is to establish the

00:17:24,160 --> 00:17:31,280
ts psk connection and send the

00:17:28,160 --> 00:17:33,760
initial attack stage initial attestation

00:17:31,280 --> 00:17:34,559
request and verify the initial testing

00:17:33,760 --> 00:17:36,960
token

00:17:34,559 --> 00:17:38,480
and also forward the application data to

00:17:36,960 --> 00:17:41,679
the aws

00:17:38,480 --> 00:17:47,200
cloud through the iot

00:17:41,679 --> 00:17:50,640
aws iot device application

00:17:47,200 --> 00:17:54,720
okay so this is uh the workflow of

00:17:50,640 --> 00:17:57,760
this demo so uh the first stage is to

00:17:54,720 --> 00:18:00,799
establish a ts psk

00:17:57,760 --> 00:18:04,000
connection so the key point here is we

00:18:00,799 --> 00:18:05,039
we leverage the crypto and secure

00:18:04,000 --> 00:18:08,080
storage service

00:18:05,039 --> 00:18:10,799
so the psk the appreciate key is

00:18:08,080 --> 00:18:12,480
provisioned in factory stage in the

00:18:10,799 --> 00:18:15,840
secure storage service

00:18:12,480 --> 00:18:19,360
and and in the handshake stage uh

00:18:15,840 --> 00:18:21,840
we the non-secure side application

00:18:19,360 --> 00:18:22,640
can use the handle of the key but it

00:18:21,840 --> 00:18:25,440
cannot

00:18:22,640 --> 00:18:26,559
export the key to generate the session

00:18:25,440 --> 00:18:29,760
key

00:18:26,559 --> 00:18:32,320
to secure the ts uh connection

00:18:29,760 --> 00:18:33,280
and when the connection established the

00:18:32,320 --> 00:18:35,760
the gateway

00:18:33,280 --> 00:18:37,760
will verify the device by sending the

00:18:35,760 --> 00:18:40,480
initial attestation request

00:18:37,760 --> 00:18:42,240
and the device will ask the secure side

00:18:40,480 --> 00:18:45,360
to sign the

00:18:42,240 --> 00:18:48,640
the initial testing token and reply to

00:18:45,360 --> 00:18:51,919
the to the gateway so the gateway if

00:18:48,640 --> 00:18:55,520
gateway is is fine with the secure

00:18:51,919 --> 00:18:58,160
secure status life cycle of the

00:18:55,520 --> 00:19:00,080
device then it will go to the next stage

00:18:58,160 --> 00:19:02,559
in next stage we create a

00:19:00,080 --> 00:19:03,280
another secure partition uh running the

00:19:02,559 --> 00:19:05,760
sensor

00:19:03,280 --> 00:19:07,600
uh running a sensor application the

00:19:05,760 --> 00:19:12,000
sensor application is to collect

00:19:07,600 --> 00:19:15,120
the temperature and community data

00:19:12,000 --> 00:19:16,000
in the secure world and send it to the

00:19:15,120 --> 00:19:17,840
gateway

00:19:16,000 --> 00:19:20,559
and the gateway will forward this data

00:19:17,840 --> 00:19:20,559
to the cloud

00:19:21,760 --> 00:19:28,240
okay this is a video for the

00:19:25,520 --> 00:19:30,320
demo which may help you better

00:19:28,240 --> 00:19:34,000
understand

00:19:30,320 --> 00:19:34,000
can you see the demo the video

00:19:35,840 --> 00:19:41,600
yes okay okay cool

00:19:38,880 --> 00:19:42,000
yeah yeah basically this uh uh what i

00:19:41,600 --> 00:19:44,160
said

00:19:42,000 --> 00:19:45,840
the the three devices connect to the

00:19:44,160 --> 00:19:47,440
rest of various parts respectful connect

00:19:45,840 --> 00:19:51,120
to the database cloud

00:19:47,440 --> 00:19:54,240
so and the

00:19:51,120 --> 00:19:56,880
uh here's an example of uh

00:19:54,240 --> 00:19:58,240
how mascara b connects to the rest of

00:19:56,880 --> 00:20:01,280
barry pi the gateway

00:19:58,240 --> 00:20:04,320
so uh yeah we have uh a big we have

00:20:01,280 --> 00:20:04,880
therefore five small running the secure

00:20:04,320 --> 00:20:08,480
side

00:20:04,880 --> 00:20:09,679
and friata's an application running a

00:20:08,480 --> 00:20:12,400
non-secure site

00:20:09,679 --> 00:20:14,320
in the gateway we run the linux and some

00:20:12,400 --> 00:20:19,120
applications

00:20:14,320 --> 00:20:19,120
so in the handshake stage

00:20:19,360 --> 00:20:23,440
enhanced jet shock stage the the device

00:20:22,159 --> 00:20:26,480
and the client hello

00:20:23,440 --> 00:20:30,080
this is a standard tspsk

00:20:26,480 --> 00:20:35,120
process so server require a server hello

00:20:30,080 --> 00:20:38,159
and at this stage we agreed to use tspsk

00:20:35,120 --> 00:20:41,600
and the crypto uh set with this support

00:20:38,159 --> 00:20:45,039
this product and the different from the

00:20:41,600 --> 00:20:45,679
uh the the standard tspsk is that we

00:20:45,039 --> 00:20:49,280
generate

00:20:45,679 --> 00:20:52,960
the session key in the secure side

00:20:49,280 --> 00:20:56,559
so which is that we use a psk handle

00:20:52,960 --> 00:20:58,960
stored in the psk store in rts

00:20:56,559 --> 00:21:00,799
in internal charge storage and not to

00:20:58,960 --> 00:21:03,039
use secure side can use a handle

00:21:00,799 --> 00:21:05,440
to generate a session key so in that

00:21:03,039 --> 00:21:09,520
case it cannot touch the

00:21:05,440 --> 00:21:10,240
the preset key so and once the handshake

00:21:09,520 --> 00:21:13,440
finished

00:21:10,240 --> 00:21:16,880
the application running on the device

00:21:13,440 --> 00:21:17,840
can use the session key stored in the

00:21:16,880 --> 00:21:20,320
secure site

00:21:17,840 --> 00:21:23,440
to encrypt and decrypt the message for

00:21:20,320 --> 00:21:23,440
the application data

00:21:24,240 --> 00:21:29,919
so when the connection established the

00:21:28,000 --> 00:21:31,360
gateway will send an initial testing

00:21:29,919 --> 00:21:34,400
challenge and

00:21:31,360 --> 00:21:37,039
the device will sign sign the the

00:21:34,400 --> 00:21:38,559
report uh the initial testing token i

00:21:37,039 --> 00:21:41,039
stand back to the

00:21:38,559 --> 00:21:41,039
gateway

00:21:41,840 --> 00:21:48,799
so this is uh the the video of

00:21:45,280 --> 00:21:51,520
the demo so yeah this is a uart message

00:21:48,799 --> 00:21:52,559
this is on the gateway side we started

00:21:51,520 --> 00:21:55,600
the gateway

00:21:52,559 --> 00:21:58,559
and the one board connected through the

00:21:55,600 --> 00:21:59,360
jspsk and this is another board

00:21:58,559 --> 00:22:03,280
connected

00:21:59,360 --> 00:22:06,799
and they will all verify the

00:22:03,280 --> 00:22:09,120
the initial that's the token so

00:22:06,799 --> 00:22:10,640
the ball sends the the temperature and

00:22:09,120 --> 00:22:15,760
the humidity data

00:22:10,640 --> 00:22:19,600
so this is uh the inhale in aws id cloud

00:22:15,760 --> 00:22:19,600
so yeah the cloud can get the data

00:22:19,919 --> 00:22:28,640
yeah this is a video for

00:22:23,919 --> 00:22:28,640
for this demo okay

00:22:32,559 --> 00:22:35,600
okay so basically this is all for the

00:22:34,559 --> 00:22:41,840
for the demo

00:22:35,600 --> 00:22:41,840
so uh do you have any questions

00:23:25,600 --> 00:23:31,039
there's two questions um in the youtube

00:23:27,919 --> 00:23:31,039
i'll put them in the chat here

00:23:34,840 --> 00:23:37,840
okay

00:23:49,360 --> 00:23:54,320
uh shabo i think this question is to you

00:24:01,120 --> 00:24:07,840
hi shepherd

00:24:04,240 --> 00:24:08,960
oh can you hear me yeah okay sorry um my

00:24:07,840 --> 00:24:11,840
mic was muted

00:24:08,960 --> 00:24:13,840
uh yeah hi eric uh yeah multiple vendors

00:24:11,840 --> 00:24:14,559
for large profile refers to level three

00:24:13,840 --> 00:24:18,720
isolation

00:24:14,559 --> 00:24:21,760
isn't it uh not uh entirely

00:24:18,720 --> 00:24:25,039
uh so there can be a scenario where uh

00:24:21,760 --> 00:24:28,400
there's um no level three isolation but

00:24:25,039 --> 00:24:30,400
the secure and non-secure images are

00:24:28,400 --> 00:24:32,960
coming from multiple vendors so

00:24:30,400 --> 00:24:35,520
a silicon vendor might be fully owning

00:24:32,960 --> 00:24:38,720
the secure side and the non-secure side

00:24:35,520 --> 00:24:40,640
is completely owned by the oem

00:24:38,720 --> 00:24:42,559
uh so there also it can be a

00:24:40,640 --> 00:24:44,880
multi-vendor scenario

00:24:42,559 --> 00:24:46,720
so there's no level three isolation uh

00:24:44,880 --> 00:24:47,360
the silicon vendor manages the secure

00:24:46,720 --> 00:24:49,440
site

00:24:47,360 --> 00:24:51,120
uh maybe it's just running in level one

00:24:49,440 --> 00:24:55,120
or level two isolation

00:24:51,120 --> 00:24:57,120
uh and um the application or the oem

00:24:55,120 --> 00:25:00,400
always is in charge of the non-secure

00:24:57,120 --> 00:25:02,320
side so our thinking is for low-end

00:25:00,400 --> 00:25:05,600
profile small devices

00:25:02,320 --> 00:25:07,760
uh it doesn't uh the systems are or use

00:25:05,600 --> 00:25:09,600
cases are going to be very simple that

00:25:07,760 --> 00:25:11,760
one party is going to be owning the

00:25:09,600 --> 00:25:12,799
entire thing so the secure boot just

00:25:11,760 --> 00:25:15,840
need to care about

00:25:12,799 --> 00:25:17,919
updating the image completely so mc boot

00:25:15,840 --> 00:25:19,120
doesn't have to be enabled with multiple

00:25:17,919 --> 00:25:20,880
image feature

00:25:19,120 --> 00:25:22,240
but where when you come to profile

00:25:20,880 --> 00:25:25,200
medium we

00:25:22,240 --> 00:25:25,919
our thought processes the use cases

00:25:25,200 --> 00:25:27,919
might

00:25:25,919 --> 00:25:29,679
have multiple vendors owning secure and

00:25:27,919 --> 00:25:32,480
non-secure sites so in

00:25:29,679 --> 00:25:32,880
profile medium and large we would enable

00:25:32,480 --> 00:25:36,080
uh

00:25:32,880 --> 00:25:38,400
multiple image in mcboot that's what

00:25:36,080 --> 00:25:40,720
a small we would disable that just to

00:25:38,400 --> 00:25:43,279
save some

00:25:40,720 --> 00:25:44,240
code space and as i said it's always

00:25:43,279 --> 00:25:46,240
configurable if

00:25:44,240 --> 00:25:48,000
someone watch profile small with

00:25:46,240 --> 00:25:50,400
multiple image update they just need to

00:25:48,000 --> 00:25:54,320
enable a flag in mmc boot

00:25:50,400 --> 00:25:57,679
uh the second question um

00:25:54,320 --> 00:26:00,400
on uh flashless mcu i think we

00:25:57,679 --> 00:26:00,880
have had the discussions in the mailing

00:26:00,400 --> 00:26:03,360
list

00:26:00,880 --> 00:26:04,080
it's of course possible but uh to be

00:26:03,360 --> 00:26:07,360
honest

00:26:04,080 --> 00:26:10,080
i think there is more work to be done uh

00:26:07,360 --> 00:26:12,080
in the current tfm or and above all the

00:26:10,080 --> 00:26:15,520
profile work to support

00:26:12,080 --> 00:26:17,039
flashless mcus because one of the psa

00:26:15,520 --> 00:26:20,400
certification requirement

00:26:17,039 --> 00:26:22,799
is to have uh sort of rollback protected

00:26:20,400 --> 00:26:24,799
internal trusted storage so if you don't

00:26:22,799 --> 00:26:26,480
have a on chip storage then you'll have

00:26:24,799 --> 00:26:29,520
to emulate

00:26:26,480 --> 00:26:30,400
uh that functionality in an external

00:26:29,520 --> 00:26:32,559
flash

00:26:30,400 --> 00:26:34,400
uh with some sort of uh rollback

00:26:32,559 --> 00:26:38,400
protection maybe using some sort of

00:26:34,400 --> 00:26:40,400
otp fuses or some sort of envy counters

00:26:38,400 --> 00:26:41,600
internally in the system which is not

00:26:40,400 --> 00:26:44,480
supported today

00:26:41,600 --> 00:26:45,120
so we can of course add it in the road

00:26:44,480 --> 00:26:47,760
map

00:26:45,120 --> 00:26:49,039
and maybe as a community we can solve

00:26:47,760 --> 00:26:50,640
such a use case i

00:26:49,039 --> 00:26:53,120
know there are certain devices which

00:26:50,640 --> 00:26:54,320
don't have one chip storage and this is

00:26:53,120 --> 00:26:57,360
something we need to

00:26:54,320 --> 00:27:00,400
address but it's more work i think

00:26:57,360 --> 00:27:00,400
in the future root map

00:27:00,799 --> 00:27:04,080
yeah but i think its is required as per

00:27:02,960 --> 00:27:05,919
the security

00:27:04,080 --> 00:27:07,919
certification requirement but it has to

00:27:05,919 --> 00:27:13,440
be emulated on an external flash

00:27:07,919 --> 00:27:13,440

YouTube URL: https://www.youtube.com/watch?v=uckFPurhfvY


