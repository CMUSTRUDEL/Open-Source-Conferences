Title: LVC20-105 Linaro Developer Cloud Update
Publication date: 2020-09-18
Playlist: Linaro Virtual Connect 2020
Description: 
	Linaro Developer Cloud is the Arm64 based open source cloud and has engaged deeply with multiple open source community. Now LDC can support not only the virtual machine but also the Kubernetes service for multiple users.

In this presentation, we will talk about the structure of Linaro Developer Cloud now and the bare metal as a service. With bare mental support, the Linaro Colo can be refined to improve resource utilization, as well as offer the hardware resilient for the different communities as the extendable arm64 backend CI pools

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-105-0.pdf
Captions: 
	00:00:00,320 --> 00:00:03,120
okay hello everyone welcome to our

00:00:02,480 --> 00:00:05,040
session

00:00:03,120 --> 00:00:07,680
so today uh we are talking about the

00:00:05,040 --> 00:00:10,960
linear developer cloud update

00:00:07,680 --> 00:00:14,160
and uh we are totally uh introduction

00:00:10,960 --> 00:00:17,279
of our newly hardware automation

00:00:14,160 --> 00:00:19,840
so uh so today uh uh

00:00:17,279 --> 00:00:22,160
we will have two presenters so first is

00:00:19,840 --> 00:00:23,600
me uh my name is kevin zhao from early

00:00:22,160 --> 00:00:27,680
nara ldcg

00:00:23,600 --> 00:00:31,840
and also uh xin yang hi

00:00:27,680 --> 00:00:34,880
i need to see now okay so uh

00:00:31,840 --> 00:00:38,160
so our session is about two part

00:00:34,880 --> 00:00:39,120
uh so first is about the uh linearity of

00:00:38,160 --> 00:00:42,239
cloud

00:00:39,120 --> 00:00:46,000
so it is a general introduction

00:00:42,239 --> 00:00:47,920
for our uh for our uh infrastructure

00:00:46,000 --> 00:00:48,480
service and also the platform as a

00:00:47,920 --> 00:00:50,879
service

00:00:48,480 --> 00:00:51,680
so after that we will have introdu uh

00:00:50,879 --> 00:00:54,160
have a detail

00:00:51,680 --> 00:00:55,120
talking about the hardware augmentation

00:00:54,160 --> 00:00:59,840
technology in

00:00:55,120 --> 00:00:59,840
the lineup developer cloud

00:01:00,640 --> 00:01:07,920
so our linaro develop cloud is a

00:01:04,239 --> 00:01:12,080
totally open source cloud for the

00:01:07,920 --> 00:01:15,119
for the upstream developers and also

00:01:12,080 --> 00:01:15,840
the uh and also the open source

00:01:15,119 --> 00:01:19,840
community

00:01:15,840 --> 00:01:19,840
so we are building the uh

00:01:20,080 --> 00:01:24,000
we have built the open source

00:01:22,240 --> 00:01:26,080
infrastructure as a service and also

00:01:24,000 --> 00:01:29,360
offers a platform as a service

00:01:26,080 --> 00:01:30,720
on top of the latest arm-based server

00:01:29,360 --> 00:01:34,640
class hardware

00:01:30,720 --> 00:01:37,840
so now we can enable the mainstream

00:01:34,640 --> 00:01:39,119
environment and enable the lth and cloud

00:01:37,840 --> 00:01:42,720
ecosystem

00:01:39,119 --> 00:01:46,159
to develop port and enable the cid for

00:01:42,720 --> 00:01:50,079
the ecosystem so now we are

00:01:46,159 --> 00:01:50,720
a totally openstack certified cloud

00:01:50,079 --> 00:01:52,640
because

00:01:50,720 --> 00:01:54,320
the infrastructure as a service is based

00:01:52,640 --> 00:01:56,640
on openstack and safe

00:01:54,320 --> 00:01:57,520
and also we can offer the kubernetes as

00:01:56,640 --> 00:01:59,759
a service

00:01:57,520 --> 00:02:02,479
and recently we have been certified by

00:01:59,759 --> 00:02:02,479
cncf

00:02:04,079 --> 00:02:11,120
so this page is a general architectures

00:02:08,080 --> 00:02:13,440
for our cloud uh and

00:02:11,120 --> 00:02:14,319
the the service we can offer to the

00:02:13,440 --> 00:02:16,560
upstream

00:02:14,319 --> 00:02:18,560
so we can see is the the basement of the

00:02:16,560 --> 00:02:20,800
cloud is openstack and site

00:02:18,560 --> 00:02:21,760
so openstack for computing for the full

00:02:20,800 --> 00:02:25,520
networking

00:02:21,760 --> 00:02:28,959
support and also site for the backend

00:02:25,520 --> 00:02:32,560
storage support so on top of this

00:02:28,959 --> 00:02:34,720
we can offer the user uh three main

00:02:32,560 --> 00:02:36,080
workloads so first you can you can have

00:02:34,720 --> 00:02:39,120
a virtual machine

00:02:36,080 --> 00:02:42,160
it is a totally it is a

00:02:39,120 --> 00:02:44,959
isolated isolated virtual machine

00:02:42,160 --> 00:02:45,680
instance you can do whatever you want

00:02:44,959 --> 00:02:47,599
and

00:02:45,680 --> 00:02:49,120
also we can offer the kubernetes as a

00:02:47,599 --> 00:02:52,560
service so

00:02:49,120 --> 00:02:55,840
you can you can have a uh

00:02:52,560 --> 00:02:57,599
you can have a totally open source the

00:02:55,840 --> 00:03:00,879
kubernetes cluster

00:02:57,599 --> 00:03:04,159
on top of the open stack and you you

00:03:00,879 --> 00:03:08,560
you just need one api to launch

00:03:04,159 --> 00:03:11,440
and manage your newly create communities

00:03:08,560 --> 00:03:12,560
and also uh we can offer users to the

00:03:11,440 --> 00:03:15,840
custom workloads

00:03:12,560 --> 00:03:16,800
for example you want to deploy several

00:03:15,840 --> 00:03:21,440
workloads

00:03:16,800 --> 00:03:23,280
or deploy your applications in the

00:03:21,440 --> 00:03:24,959
the narrow device cloud so you can

00:03:23,280 --> 00:03:27,840
define the template

00:03:24,959 --> 00:03:30,959
or you can deploy the application on the

00:03:27,840 --> 00:03:30,959
kubernetes cluster

00:03:31,120 --> 00:03:34,640
so on top of the totally uh kubernetes

00:03:33,760 --> 00:03:38,239
cluster

00:03:34,640 --> 00:03:39,200
uh we uh we can offer ui for the user

00:03:38,239 --> 00:03:43,200
interface

00:03:39,200 --> 00:03:45,920
and also we can using the openstack sdk

00:03:43,200 --> 00:03:48,400
for the team for for the different users

00:03:45,920 --> 00:03:48,400
to use

00:03:51,120 --> 00:03:57,920
next so this picture uh

00:03:55,439 --> 00:03:58,959
is mainly uh the narrow developer cloud

00:03:57,920 --> 00:04:01,360
architectures

00:03:58,959 --> 00:04:02,000
in details so in the bottom of the

00:04:01,360 --> 00:04:06,400
picture

00:04:02,000 --> 00:04:09,360
we can see it is arm 64 bare metals

00:04:06,400 --> 00:04:11,200
and the on top of this we use the caller

00:04:09,360 --> 00:04:13,439
based open stack and size

00:04:11,200 --> 00:04:14,959
so because that the open stack and site

00:04:13,439 --> 00:04:16,799
are the infrastructure

00:04:14,959 --> 00:04:18,959
service so they are not very easy to

00:04:16,799 --> 00:04:20,639
deployment so using the color-based

00:04:18,959 --> 00:04:23,440
container will solve the complex

00:04:20,639 --> 00:04:24,960
compatible problem so after the

00:04:23,440 --> 00:04:28,160
infrastructure is ready

00:04:24,960 --> 00:04:31,680
we can see in the

00:04:28,160 --> 00:04:35,680
green module so uh the openstack has

00:04:31,680 --> 00:04:38,400
offered several uh several services for

00:04:35,680 --> 00:04:39,120
for example the nova uh the nutrient and

00:04:38,400 --> 00:04:41,680
keystone

00:04:39,120 --> 00:04:42,320
so many of them are over the network

00:04:41,680 --> 00:04:44,720
compute

00:04:42,320 --> 00:04:45,759
and the volume support for the vm

00:04:44,720 --> 00:04:48,960
instance

00:04:45,759 --> 00:04:52,240
so after that of to achieving

00:04:48,960 --> 00:04:55,360
a coordinated service we also uh

00:04:52,240 --> 00:04:59,040
have a lot of the uh i

00:04:55,360 --> 00:05:01,280
have several new components in the

00:04:59,040 --> 00:05:02,479
uh in the block for example we use the

00:05:01,280 --> 00:05:05,440
magnum to

00:05:02,479 --> 00:05:06,880
provision the kubernetes provisioner and

00:05:05,440 --> 00:05:10,880
the octavio for the

00:05:06,880 --> 00:05:14,240
load balancer and help hate for this

00:05:10,880 --> 00:05:14,240
orchestration service

00:05:14,479 --> 00:05:19,039
so because kubernetes is famous now and

00:05:17,039 --> 00:05:19,680
a lot of the providers can offer this

00:05:19,039 --> 00:05:22,560
function

00:05:19,680 --> 00:05:23,280
so we are leveraging and developing the

00:05:22,560 --> 00:05:26,240
open source

00:05:23,280 --> 00:05:27,919
solution on arm64 to offer the

00:05:26,240 --> 00:05:31,120
kubernetes service on top of

00:05:27,919 --> 00:05:33,919
openstack to launch the kubernetes

00:05:31,120 --> 00:05:35,039
cluster and after the kubernetes is

00:05:33,919 --> 00:05:37,280
ready

00:05:35,039 --> 00:05:38,479
what we need is that using the

00:05:37,280 --> 00:05:40,800
kubernetes

00:05:38,479 --> 00:05:43,039
and also we need to interact with the

00:05:40,800 --> 00:05:45,039
with the open

00:05:43,039 --> 00:05:46,240
infrastructure so as we know the

00:05:45,039 --> 00:05:49,039
openstack cluster

00:05:46,240 --> 00:05:49,759
so we also need several controller to

00:05:49,039 --> 00:05:53,360
handle

00:05:49,759 --> 00:05:57,199
the resource interaction with the

00:05:53,360 --> 00:06:00,720
with the singer with the network

00:05:57,199 --> 00:06:03,120
so we need several red red block

00:06:00,720 --> 00:06:05,120
we can see in the picture it is a

00:06:03,120 --> 00:06:07,440
openstack cloud provider

00:06:05,120 --> 00:06:09,919
so it is a cloud controller manager the

00:06:07,440 --> 00:06:11,919
single csi driver and also

00:06:09,919 --> 00:06:13,840
the octavia ingress controller which is

00:06:11,919 --> 00:06:16,720
served for the

00:06:13,840 --> 00:06:17,759
balance service for the application that

00:06:16,720 --> 00:06:21,280
will be deployed

00:06:17,759 --> 00:06:23,759
in the communities also

00:06:21,280 --> 00:06:25,919
for uh open source cloud we know that

00:06:23,759 --> 00:06:29,120
the monitoring are very important

00:06:25,919 --> 00:06:32,479
so we are using the promises and the

00:06:29,120 --> 00:06:35,199
for the totally monitoring

00:06:32,479 --> 00:06:35,680
so so we can see that all our solutions

00:06:35,199 --> 00:06:38,800
are

00:06:35,680 --> 00:06:38,800
totally open sourced

00:06:40,720 --> 00:06:48,880
so next uh i will cover several users

00:06:44,240 --> 00:06:51,199
user scenarios for our linaro

00:06:48,880 --> 00:06:52,400
develop cloud so first is the most

00:06:51,199 --> 00:06:55,120
traditional

00:06:52,400 --> 00:06:55,919
the user can excise the virtual machine

00:06:55,120 --> 00:06:58,479
by

00:06:55,919 --> 00:06:59,599
attaching the floating ip for the

00:06:58,479 --> 00:07:01,919
instances

00:06:59,599 --> 00:07:03,199
so the different users can have multi

00:07:01,919 --> 00:07:05,840
virtual machines

00:07:03,199 --> 00:07:06,400
in the shared network well the different

00:07:05,840 --> 00:07:09,840
things

00:07:06,400 --> 00:07:10,400
virtual machine are isolated so the user

00:07:09,840 --> 00:07:14,240
can

00:07:10,400 --> 00:07:17,199
either use the ui or api to excise our

00:07:14,240 --> 00:07:17,520
linear develop cloud for the management

00:07:17,199 --> 00:07:20,720
and

00:07:17,520 --> 00:07:23,840
in the red picture uh we can see uh

00:07:20,720 --> 00:07:27,199
there's the two main user cases for us

00:07:23,840 --> 00:07:30,800
so first is open live and open dive so

00:07:27,199 --> 00:07:33,680
they are leveraging the ldc

00:07:30,800 --> 00:07:35,199
uh as a node pool so when this air job

00:07:33,680 --> 00:07:37,520
running

00:07:35,199 --> 00:07:38,240
we have when the ci job coming from the

00:07:37,520 --> 00:07:40,880
open lab

00:07:38,240 --> 00:07:42,000
or the open dive so they are calling the

00:07:40,880 --> 00:07:45,360
openstack api

00:07:42,000 --> 00:07:48,720
to to our ldc cloud

00:07:45,360 --> 00:07:49,360
and then the ci ci will come in and they

00:07:48,720 --> 00:07:51,840
are

00:07:49,360 --> 00:07:54,000
uh we will launch the virtual machines

00:07:51,840 --> 00:07:57,039
uh in the

00:07:54,000 --> 00:07:59,680
narrow develop cloud and then running

00:07:57,039 --> 00:08:02,720
the

00:07:59,680 --> 00:08:06,479
running the tasks so the so

00:08:02,720 --> 00:08:09,520
because it is uh auto scaling framework

00:08:06,479 --> 00:08:13,199
so uh they are traditionally

00:08:09,520 --> 00:08:17,360
a provision vm running the job and

00:08:13,199 --> 00:08:19,759
delete the vm after the the job is

00:08:17,360 --> 00:08:20,560
finished so another user case is more

00:08:19,759 --> 00:08:23,199
stable

00:08:20,560 --> 00:08:23,919
so we have collaboration with uh with

00:08:23,199 --> 00:08:26,879
the

00:08:23,919 --> 00:08:27,520
apache big talk project so they have a

00:08:26,879 --> 00:08:30,560
central

00:08:27,520 --> 00:08:33,680
jenkins master and

00:08:30,560 --> 00:08:35,680
the the vm we will pre-creation the

00:08:33,680 --> 00:08:39,279
virtual machines in ldc

00:08:35,680 --> 00:08:42,560
and served as a slave to to running as a

00:08:39,279 --> 00:08:45,760
to running as the

00:08:42,560 --> 00:08:46,480
jobs so the virtual machines there are

00:08:45,760 --> 00:08:50,240
more stable

00:08:46,480 --> 00:08:50,240
and dedicated for the test

00:08:51,440 --> 00:08:57,279
all right so next is a uh is a

00:08:55,360 --> 00:08:59,040
you just use a scenario that is more

00:08:57,279 --> 00:09:02,880
dedicated for deploying

00:08:59,040 --> 00:09:05,920
the uh general workloads

00:09:02,880 --> 00:09:09,600
so we can see in the first picture uh

00:09:05,920 --> 00:09:10,240
it is a it is a user the user want to

00:09:09,600 --> 00:09:13,440
define

00:09:10,240 --> 00:09:16,720
uh to want to have defined two

00:09:13,440 --> 00:09:20,160
virtual machines the one the vm one

00:09:16,720 --> 00:09:23,680
is with the container installed and

00:09:20,160 --> 00:09:26,480
running the mysql container and the vm2

00:09:23,680 --> 00:09:28,000
is with the container installed and

00:09:26,480 --> 00:09:31,600
running the engines

00:09:28,000 --> 00:09:34,320
so uh we can define the h template

00:09:31,600 --> 00:09:35,279
to generate probations virtual machine

00:09:34,320 --> 00:09:38,320
and

00:09:35,279 --> 00:09:39,680
after the probation they can define to

00:09:38,320 --> 00:09:43,279
join the

00:09:39,680 --> 00:09:46,320
content in the vm1

00:09:43,279 --> 00:09:49,360
they will install the docker container

00:09:46,320 --> 00:09:53,920
and pull the message containers and

00:09:49,360 --> 00:09:56,000
random sequel and also in the vm2

00:09:53,920 --> 00:09:57,519
the head template will tell the

00:09:56,000 --> 00:09:59,680
openstack to

00:09:57,519 --> 00:10:00,560
install the docker container and after

00:09:59,680 --> 00:10:02,800
that

00:10:00,560 --> 00:10:05,440
run the engine's container and also

00:10:02,800 --> 00:10:09,279
access to the massive container port

00:10:05,440 --> 00:10:12,640
and also we have defined the floating ip

00:10:09,279 --> 00:10:13,839
to the vm2 and so for the users they can

00:10:12,640 --> 00:10:17,519
get access to

00:10:13,839 --> 00:10:22,160
the engix to the to the engine server

00:10:17,519 --> 00:10:22,160
by accessing the virtual machine too

00:10:24,480 --> 00:10:29,120
another user case for say the kubernetes

00:10:27,519 --> 00:10:32,240
we can see it is very simple

00:10:29,120 --> 00:10:36,160
so user can use one api to provision the

00:10:32,240 --> 00:10:39,640
kubernetes uh so the only

00:10:36,160 --> 00:10:42,959
parameters for you is just

00:10:39,640 --> 00:10:45,600
specifying the node count and also

00:10:42,959 --> 00:10:47,360
the combination version so after that

00:10:45,600 --> 00:10:47,839
they can deploy the kubernetes cluster

00:10:47,360 --> 00:10:50,720
for you

00:10:47,839 --> 00:10:51,360
only once with one command and after

00:10:50,720 --> 00:10:54,000
that

00:10:51,360 --> 00:10:54,880
the openstack will generate the config

00:10:54,000 --> 00:10:58,839
files

00:10:54,880 --> 00:11:01,760
and you can connect with the commit

00:10:58,839 --> 00:11:05,120
clusters

00:11:01,760 --> 00:11:06,079
all right here is a last scenario which

00:11:05,120 --> 00:11:08,959
is be

00:11:06,079 --> 00:11:09,680
a little more complicated for the

00:11:08,959 --> 00:11:12,800
developers

00:11:09,680 --> 00:11:16,079
but it's also very important because

00:11:12,800 --> 00:11:18,800
traditionally now uh

00:11:16,079 --> 00:11:20,399
there are a lot of users are tending to

00:11:18,800 --> 00:11:22,079
deploy their applications in the

00:11:20,399 --> 00:11:25,680
kubernetes cluster

00:11:22,079 --> 00:11:28,560
so uh so we are also

00:11:25,680 --> 00:11:29,360
designing this uh you use users

00:11:28,560 --> 00:11:33,360
scenarios

00:11:29,360 --> 00:11:36,160
for the upstream developers

00:11:33,360 --> 00:11:38,399
for example you want to uh also you you

00:11:36,160 --> 00:11:40,800
want to

00:11:38,399 --> 00:11:42,560
deploy your engines with a messy

00:11:40,800 --> 00:11:46,320
container and also wants a

00:11:42,560 --> 00:11:48,800
external excise so we can say

00:11:46,320 --> 00:11:49,440
first you need to define the kubernetes

00:11:48,800 --> 00:11:52,079
yamaha

00:11:49,440 --> 00:11:52,800
example so we you need to define the

00:11:52,079 --> 00:11:54,560
port

00:11:52,800 --> 00:11:57,120
which is has a container one with a

00:11:54,560 --> 00:11:58,480
magical image and container two with the

00:11:57,120 --> 00:12:01,440
engine's image

00:11:58,480 --> 00:12:02,560
and also we know that in kubernetes pod

00:12:01,440 --> 00:12:07,120
is not a

00:12:02,560 --> 00:12:10,399
port is a beta unit but it is not the

00:12:07,120 --> 00:12:11,519
exposed unit for the total service so uh

00:12:10,399 --> 00:12:14,940
you need to define

00:12:11,519 --> 00:12:17,200
the deployment concept which has been

00:12:14,940 --> 00:12:20,480
[Music]

00:12:17,200 --> 00:12:24,480
which has been specified to the polls

00:12:20,480 --> 00:12:28,160
and after that we need a service concept

00:12:24,480 --> 00:12:31,519
which is related with the

00:12:28,160 --> 00:12:34,720
deployment with this

00:12:31,519 --> 00:12:38,160
deployment and after that

00:12:34,720 --> 00:12:40,800
the service can be excised to in

00:12:38,160 --> 00:12:41,200
the open in the combination eternally

00:12:40,800 --> 00:12:45,519
but

00:12:41,200 --> 00:12:47,200
if you want to have a external exercise

00:12:45,519 --> 00:12:49,200
you also need to leveraging the

00:12:47,200 --> 00:12:52,160
openstack resources here

00:12:49,200 --> 00:12:52,800
so we need to define the ingress concept

00:12:52,160 --> 00:12:56,240
here

00:12:52,800 --> 00:12:59,519
and and the

00:12:56,240 --> 00:13:02,800
site the backend service to the svc

00:12:59,519 --> 00:13:06,320
we have defined before so after that

00:13:02,800 --> 00:13:07,600
we can using the openstack uh octavia

00:13:06,320 --> 00:13:10,720
ingress controller

00:13:07,600 --> 00:13:11,920
so this controller can come have created

00:13:10,720 --> 00:13:15,120
a load balancer

00:13:11,920 --> 00:13:16,160
in the openstack side so after that the

00:13:15,120 --> 00:13:19,440
openstack

00:13:16,160 --> 00:13:20,959
uh load balancer can be attaching of

00:13:19,440 --> 00:13:24,560
floating ips

00:13:20,959 --> 00:13:27,279
so a user can excise by the load

00:13:24,560 --> 00:13:30,480
balancer from openstack to the ingress

00:13:27,279 --> 00:13:33,200
and after that the the flow will be

00:13:30,480 --> 00:13:34,000
will be connecting to the engine's

00:13:33,200 --> 00:13:37,600
container

00:13:34,000 --> 00:13:41,199
so it is a relatively long work

00:13:37,600 --> 00:13:43,839
long data flows so you need to specify

00:13:41,199 --> 00:13:44,480
the past past life of the combination

00:13:43,839 --> 00:13:46,959
side

00:13:44,480 --> 00:13:47,600
and also leveraging the infrastructure

00:13:46,959 --> 00:13:51,120
side

00:13:47,600 --> 00:13:51,120
as a openstack

00:13:51,760 --> 00:13:58,320
okay so here is uh generally uh three

00:13:55,120 --> 00:13:59,760
scenarios for us and now uh actually

00:13:58,320 --> 00:14:02,240
based on our work

00:13:59,760 --> 00:14:04,399
with the openstack and the communities

00:14:02,240 --> 00:14:05,519
we are now certified by the same safe

00:14:04,399 --> 00:14:08,079
side

00:14:05,519 --> 00:14:10,480
we are actually the same safe certified

00:14:08,079 --> 00:14:10,480
cloud

00:14:12,800 --> 00:14:20,639
the next is uh the ci collaborations now

00:14:17,040 --> 00:14:21,680
with linear develop cloud uh actually we

00:14:20,639 --> 00:14:24,160
have a good

00:14:21,680 --> 00:14:25,519
relationship and the collaboration with

00:14:24,160 --> 00:14:28,000
a open dive

00:14:25,519 --> 00:14:28,800
open live at the north pole and also

00:14:28,000 --> 00:14:32,160
serve

00:14:28,800 --> 00:14:35,600
for the jenkins slave with the

00:14:32,160 --> 00:14:38,880
apache picked up apache beam and also

00:14:35,600 --> 00:14:39,760
and and also we are collaborating with

00:14:38,880 --> 00:14:42,720
level

00:14:39,760 --> 00:14:44,639
and arcane fusion and actually we are we

00:14:42,720 --> 00:14:48,160
can offer the arm-based

00:14:44,639 --> 00:14:51,519
open source uh ci resources so where we

00:14:48,160 --> 00:14:55,040
we welcome the other upstream

00:14:51,519 --> 00:14:55,600
uh if the newly upstream have the

00:14:55,040 --> 00:14:59,440
interest

00:14:55,600 --> 00:15:01,760
to build or the site or

00:14:59,440 --> 00:15:02,880
develop the arm-based application or

00:15:01,760 --> 00:15:06,720
solutions so

00:15:02,880 --> 00:15:08,880
we will welcome the applications

00:15:06,720 --> 00:15:10,839
okay so next i'll hand over to xinhuang

00:15:08,880 --> 00:15:12,480
so have a talk about the hardware

00:15:10,839 --> 00:15:16,240
automation

00:15:12,480 --> 00:15:20,000
okay thank you kevin so

00:15:16,240 --> 00:15:24,160
oh let me present the second part

00:15:20,000 --> 00:15:24,160
automation please next

00:15:24,839 --> 00:15:32,720
okay uh when we come to habit

00:15:27,920 --> 00:15:36,160
automation we are mainly talking about

00:15:32,720 --> 00:15:39,279
the metal reason because uh

00:15:36,160 --> 00:15:43,120
we may handle uh servers

00:15:39,279 --> 00:15:46,160
in the data center here are some

00:15:43,120 --> 00:15:49,279
reasons why we need

00:15:46,160 --> 00:15:52,800
in our nano developer cloud

00:15:49,279 --> 00:15:56,160
first there is a limitation

00:15:52,800 --> 00:15:59,519
in nested virtualization that is

00:15:56,160 --> 00:16:02,800
um some a once feature

00:15:59,519 --> 00:16:04,160
or functionality such as gpu are not

00:16:02,800 --> 00:16:09,839
working

00:16:04,160 --> 00:16:13,199
in a nasty virtualization and

00:16:09,839 --> 00:16:17,600
and nowadays the pyri cloud

00:16:13,199 --> 00:16:21,040
are attending to bare metal plus

00:16:17,600 --> 00:16:24,320
kubernetes for best performance

00:16:21,040 --> 00:16:27,440
and also the

00:16:24,320 --> 00:16:30,079
external and cd

00:16:27,440 --> 00:16:30,079
and ci

00:16:31,360 --> 00:16:39,519
users and case for the bare metal

00:16:36,320 --> 00:16:43,440
machine yeah this is

00:16:39,519 --> 00:16:47,360
uh these are the reasons why we need

00:16:43,440 --> 00:16:48,839
a method for our you know developer

00:16:47,360 --> 00:16:51,839
cloud

00:16:48,839 --> 00:16:51,839
next

00:16:54,959 --> 00:17:02,839
okay this mission is the overview

00:16:58,480 --> 00:17:05,280
structure of our metal vision

00:17:02,839 --> 00:17:09,760
solution which

00:17:05,280 --> 00:17:14,720
we are working on now

00:17:09,760 --> 00:17:19,120
we use ironical the main beneficent

00:17:14,720 --> 00:17:22,959
project and the fifth step

00:17:19,120 --> 00:17:26,000
to provide the remote

00:17:22,959 --> 00:17:32,080
ice casing volumes for the

00:17:26,000 --> 00:17:35,120
parameter machines

00:17:32,080 --> 00:17:39,120
in the perimeter mountains they are

00:17:35,120 --> 00:17:42,640
all distances that means

00:17:39,120 --> 00:17:46,000
this barbed machine just put from

00:17:42,640 --> 00:17:48,480
the most set volume

00:17:46,000 --> 00:17:48,480
okay next

00:17:54,320 --> 00:18:01,600
our main level is main is to make

00:17:58,160 --> 00:18:07,039
better machine to put funds

00:18:01,600 --> 00:18:10,559
and remote set and volume

00:18:07,039 --> 00:18:13,600
here is a brief view of

00:18:10,559 --> 00:18:17,760
how idonic use

00:18:13,600 --> 00:18:21,200
set volume first uh

00:18:17,760 --> 00:18:23,840
in the right mode there will be a single

00:18:21,200 --> 00:18:24,799
there will be a ice cast gateway to

00:18:23,840 --> 00:18:29,200
provide

00:18:24,799 --> 00:18:32,640
the safe ice currency volume

00:18:29,200 --> 00:18:35,039
and in the middle cylinder

00:18:32,640 --> 00:18:36,720
in the center it would there will be a

00:18:35,039 --> 00:18:40,480
safe ice glass driver

00:18:36,720 --> 00:18:44,400
to communicate with

00:18:40,480 --> 00:18:44,400
the snap ice cast gateway

00:18:48,240 --> 00:18:55,520
and ionic core and atlas

00:18:51,600 --> 00:18:59,200
ionic and cost signal api

00:18:55,520 --> 00:19:02,400
to fetch the single volume connection

00:18:59,200 --> 00:19:11,840
information and attach to the bad

00:19:02,400 --> 00:19:15,840
metal machine okay next

00:19:11,840 --> 00:19:19,280
this is the inside how bare metal

00:19:15,840 --> 00:19:23,679
used set ice gas module

00:19:19,280 --> 00:19:28,480
as you can see we have a control pad

00:19:23,679 --> 00:19:32,000
on the control node which handle

00:19:28,480 --> 00:19:35,440
volume creation attached

00:19:32,000 --> 00:19:40,320
detached for the safe

00:19:35,440 --> 00:19:45,039
iscs gateway api and also

00:19:40,320 --> 00:19:47,919
in the bmw compute node we have

00:19:45,039 --> 00:19:47,919
a data pair

00:19:49,039 --> 00:19:58,080
to read and write the remote

00:19:52,799 --> 00:20:02,559
ice gas volume disc for the

00:19:58,080 --> 00:20:07,840
ice gas in administrator and targets

00:20:02,559 --> 00:20:07,840
okay next

00:20:08,880 --> 00:20:17,200
okay now that the user can launch a

00:20:12,240 --> 00:20:20,960
better motion just like they do for vm

00:20:17,200 --> 00:20:24,880
and this this world is under uh

00:20:20,960 --> 00:20:24,880
under internal testing now

00:20:25,200 --> 00:20:29,280
and also uh if they want if a barometer

00:20:28,400 --> 00:20:33,520
want to

00:20:29,280 --> 00:20:37,360
access the internal in the outside

00:20:33,520 --> 00:20:41,919
internet they can use the voting

00:20:37,360 --> 00:20:48,720
ips swn

00:20:41,919 --> 00:20:50,960
tool okay

00:20:48,720 --> 00:20:50,960
nice

00:20:52,400 --> 00:21:03,840
okay thank you thank you for

00:20:55,520 --> 00:21:03,840
listening our presentation

00:21:06,000 --> 00:21:08,080

YouTube URL: https://www.youtube.com/watch?v=Sg7eHmGJb-4


