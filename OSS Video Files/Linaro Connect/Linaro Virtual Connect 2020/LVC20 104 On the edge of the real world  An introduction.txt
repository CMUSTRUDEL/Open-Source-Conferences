Title: LVC20 104 On the edge of the real world  An introduction
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	Raspberry Pis have been there like forever, and have sold like hot cakes for 8 years now. Lots of people have done very ambitious projects (self-driving robots, anyone?), and new ideas and projects surface every day. Be it building a supercomputer by stacking lots of SBCs, a bitcoin miner, a brewery system, home automation, a weather station, or any crazy idea, the only limit seems to be your imagination.

Of course, these little beasts can also be used as servers. For years, Docker has been used only on big servers, but after resin.io ported Docker to the Arm processor, everything changed.

Pretty cool to be able to run Docker on that kind of mini machines, but what kind of service could you run on Docker with so little memory? Lots of things in fact…

And what if you could get the best of both worlds? What could you do with a machine able to interact with hardware (🌡️, 📹 , 🚦) thanks to Docker? Could you transform your Raspberry Pi into an edge computing node, an IoT on steroids 💪 , or anything in between?

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-104-0.pdf
Captions: 
	00:00:00,560 --> 00:00:05,200
welcome everyone so it's been around for

00:00:03,280 --> 00:00:09,040
years now but it's slowly becoming the

00:00:05,200 --> 00:00:10,800
template of a silent evolution

00:00:09,040 --> 00:00:12,559
raspberry pies have been their life

00:00:10,800 --> 00:00:13,040
forever nineteen just eight years from

00:00:12,559 --> 00:00:15,839
now

00:00:13,040 --> 00:00:16,400
but they have sold like hotcakes since

00:00:15,839 --> 00:00:18,160
the beginning

00:00:16,400 --> 00:00:20,720
i'm sure lots of you have already used a

00:00:18,160 --> 00:00:21,439
raspberry pi for sure more than 30

00:00:20,720 --> 00:00:24,320
millions

00:00:21,439 --> 00:00:25,920
have been sold we have all seen them

00:00:24,320 --> 00:00:28,080
working as a cheap alternative to a

00:00:25,920 --> 00:00:29,599
desktop computer helping children to get

00:00:28,080 --> 00:00:31,760
a taste of i.t or help to automate

00:00:29,599 --> 00:00:34,000
things but it can be more than that and

00:00:31,760 --> 00:00:35,040
less than that at the same time so let's

00:00:34,000 --> 00:00:37,280
try to get the quick

00:00:35,040 --> 00:00:38,879
glimpse together today by the way thanks

00:00:37,280 --> 00:00:40,559
a lot for having me today in the

00:00:38,879 --> 00:00:44,800
virtual connect for this part of my

00:00:40,559 --> 00:00:46,960
mister what if tour from home 2020.

00:00:44,800 --> 00:00:48,079
my name is and i work for french payment

00:00:46,960 --> 00:00:51,680
company named

00:00:48,079 --> 00:00:54,160
worldline so the internet of things

00:00:51,680 --> 00:00:55,920
is a network of devices such as vehicles

00:00:54,160 --> 00:00:58,239
and home appliances that contain

00:00:55,920 --> 00:01:00,239
electronic sensors software device

00:00:58,239 --> 00:01:01,359
actuators and connectivity which allow

00:01:00,239 --> 00:01:03,280
these things to connect

00:01:01,359 --> 00:01:05,360
interact and exchange data there are

00:01:03,280 --> 00:01:06,880
bluetooth enabled forks which vibrate

00:01:05,360 --> 00:01:08,720
when you are eating too quickly

00:01:06,880 --> 00:01:10,479
there are internet connected umbrellas

00:01:08,720 --> 00:01:11,280
which alert you if it looks like it's

00:01:10,479 --> 00:01:13,040
going to rain

00:01:11,280 --> 00:01:14,400
there are even smart toilet paper

00:01:13,040 --> 00:01:16,479
dispensers that can sense when you're

00:01:14,400 --> 00:01:17,200
running low and will notify you via an

00:01:16,479 --> 00:01:18,720
app

00:01:17,200 --> 00:01:21,520
want your toaster to tweet when you're

00:01:18,720 --> 00:01:24,400
toasty ready we got you covered

00:01:21,520 --> 00:01:25,119
iot is not a toaster not a refrigerator

00:01:24,400 --> 00:01:26,880
itscore

00:01:25,119 --> 00:01:28,880
iot is really just about sensing

00:01:26,880 --> 00:01:30,159
controlling and interacting with more of

00:01:28,880 --> 00:01:32,799
the physical world

00:01:30,159 --> 00:01:33,759
in a connected way so the first point is

00:01:32,799 --> 00:01:36,159
sensing

00:01:33,759 --> 00:01:38,159
data drives decision whether dry soil

00:01:36,159 --> 00:01:38,799
needs irrigations or freezers need to be

00:01:38,159 --> 00:01:40,400
serviced

00:01:38,799 --> 00:01:41,840
having better information about the

00:01:40,400 --> 00:01:44,960
physical world around us

00:01:41,840 --> 00:01:45,520
can solve problems a huge part of iot is

00:01:44,960 --> 00:01:47,520
about

00:01:45,520 --> 00:01:49,200
getting this information to the machine

00:01:47,520 --> 00:01:51,600
that needed to solve the problems

00:01:49,200 --> 00:01:52,880
automatically most of the work in the

00:01:51,600 --> 00:01:55,119
iot sensing space

00:01:52,880 --> 00:01:56,560
involves figuring out how to replace the

00:01:55,119 --> 00:01:59,439
human in the loop

00:01:56,560 --> 00:01:59,759
sensing measuring and metering processes

00:01:59,439 --> 00:02:02,960
with

00:01:59,759 --> 00:02:04,799
automated ones the second point is

00:02:02,960 --> 00:02:06,799
controlling so once data points a

00:02:04,799 --> 00:02:08,959
machine in the direction of a problem

00:02:06,799 --> 00:02:11,120
the best outcome is often for automated

00:02:08,959 --> 00:02:13,120
processes to kick in to solve them

00:02:11,120 --> 00:02:14,959
sure this can go horribly wrong if

00:02:13,120 --> 00:02:17,599
systems are not well designed

00:02:14,959 --> 00:02:19,920
but the true return on investment for

00:02:17,599 --> 00:02:20,879
more and better sensors is automated

00:02:19,920 --> 00:02:22,720
control

00:02:20,879 --> 00:02:24,800
this could be as simple as turning on

00:02:22,720 --> 00:02:26,080
the sprinklers when the soil is dry or

00:02:24,800 --> 00:02:27,920
as complicated as

00:02:26,080 --> 00:02:30,400
adjusting regional power grids to

00:02:27,920 --> 00:02:32,239
compensate the loss of power from solar

00:02:30,400 --> 00:02:33,280
panels that just went and does a shade

00:02:32,239 --> 00:02:35,599
of clouds

00:02:33,280 --> 00:02:37,200
the third point is interacting and this

00:02:35,599 --> 00:02:39,680
is where the human gets back

00:02:37,200 --> 00:02:41,360
into the iot loop whenever we provide

00:02:39,680 --> 00:02:42,800
information to a machine or make an

00:02:41,360 --> 00:02:44,080
electronic decision that affects

00:02:42,800 --> 00:02:46,480
something physical

00:02:44,080 --> 00:02:47,360
we are interacting with the internet of

00:02:46,480 --> 00:02:49,680
things

00:02:47,360 --> 00:02:51,760
edge computing now it brings memory and

00:02:49,680 --> 00:02:52,800
computing power closer to the location

00:02:51,760 --> 00:02:54,959
where it is needed

00:02:52,800 --> 00:02:56,080
as wikipedia says it's a distributed

00:02:54,959 --> 00:02:57,920
computing paradigm

00:02:56,080 --> 00:02:59,120
in which computation is largely or

00:02:57,920 --> 00:03:01,440
completely performed

00:02:59,120 --> 00:03:03,360
on distributed device nodes edge

00:03:01,440 --> 00:03:05,040
computing pushes applications data

00:03:03,360 --> 00:03:07,200
and computing power away from

00:03:05,040 --> 00:03:09,680
centralized point to locations closer

00:03:07,200 --> 00:03:11,040
to the user in fact idc research

00:03:09,680 --> 00:03:13,840
predicts that in two years

00:03:11,040 --> 00:03:14,640
45 percent of iot created data will be

00:03:13,840 --> 00:03:17,519
stored

00:03:14,640 --> 00:03:18,080
processed analyze and act upon close to

00:03:17,519 --> 00:03:20,480
or

00:03:18,080 --> 00:03:22,560
at the edge of the network and over 6

00:03:20,480 --> 00:03:24,959
billion devices will be connected

00:03:22,560 --> 00:03:26,799
to the edge computing solution this is

00:03:24,959 --> 00:03:28,799
way different from cloud computing where

00:03:26,799 --> 00:03:30,080
the data the images are sent to the

00:03:28,799 --> 00:03:32,799
cloud to be processed

00:03:30,080 --> 00:03:33,440
and an action is performed afterwards

00:03:32,799 --> 00:03:35,920
but

00:03:33,440 --> 00:03:36,560
what should why should we work at the

00:03:35,920 --> 00:03:38,799
edge

00:03:36,560 --> 00:03:39,920
why not use a cloud it's a general

00:03:38,799 --> 00:03:41,360
tendency these days

00:03:39,920 --> 00:03:43,760
and the first reason would be the

00:03:41,360 --> 00:03:45,760
latency and the bandwidth if your iot is

00:03:43,760 --> 00:03:47,840
waiting for an answer of an api

00:03:45,760 --> 00:03:49,680
will have enough time to get into

00:03:47,840 --> 00:03:51,200
trouble there are cases where the

00:03:49,680 --> 00:03:53,840
response time is really

00:03:51,200 --> 00:03:55,519
critical moreover if you have tons of

00:03:53,840 --> 00:03:57,599
devices connected to the very same

00:03:55,519 --> 00:04:00,000
network trying to push data to the cloud

00:03:57,599 --> 00:04:02,040
the effective bandwidth will be reduced

00:04:00,000 --> 00:04:03,280
the second reason would be security and

00:04:02,040 --> 00:04:05,040
decentralization

00:04:03,280 --> 00:04:07,200
commercial servers are subject to

00:04:05,040 --> 00:04:09,599
attacks and hacks if your edge computing

00:04:07,200 --> 00:04:11,599
device is not super easy to attack

00:04:09,599 --> 00:04:14,000
then it will be harder for attackers to

00:04:11,599 --> 00:04:15,519
bring down an entire network of devices

00:04:14,000 --> 00:04:17,120
using a ddos attack than with a

00:04:15,519 --> 00:04:19,440
centralized server

00:04:17,120 --> 00:04:21,680
to counterbalance that badly protected

00:04:19,440 --> 00:04:22,079
iot can then become zombie machines may

00:04:21,680 --> 00:04:26,000
be

00:04:22,079 --> 00:04:26,000
able to be part of a ddos attack too

00:04:26,800 --> 00:04:30,720
the third reason would be customization

00:04:29,199 --> 00:04:31,759
let's say that i run a factory that

00:04:30,720 --> 00:04:34,160
produces toys

00:04:31,759 --> 00:04:35,120
it comprises 100 workstations and to

00:04:34,160 --> 00:04:36,880
check the quality

00:04:35,120 --> 00:04:39,360
i would need an image classification at

00:04:36,880 --> 00:04:41,280
each work station but each workstation

00:04:39,360 --> 00:04:42,000
has a different set of objects that

00:04:41,280 --> 00:04:44,320
training one

00:04:42,000 --> 00:04:45,120
single classifier could be not the most

00:04:44,320 --> 00:04:48,080
effective way

00:04:45,120 --> 00:04:49,919
of classifying object so i could have

00:04:48,080 --> 00:04:53,040
several classifiers on the cloud

00:04:49,919 --> 00:04:55,600
which would be expensive and i'm cheap

00:04:53,040 --> 00:04:56,639
so why not have a custom classifier at

00:04:55,600 --> 00:04:58,960
each workstation

00:04:56,639 --> 00:05:01,039
for cheap there are also other reasons

00:04:58,960 --> 00:05:02,800
like redundancy cost effectiveness but i

00:05:01,039 --> 00:05:04,720
won't detail it here

00:05:02,800 --> 00:05:06,160
by the way do you know you are already

00:05:04,720 --> 00:05:09,360
using machine learning

00:05:06,160 --> 00:05:11,360
on the edge every day now that we have

00:05:09,360 --> 00:05:13,600
the definition of iot and edge computing

00:05:11,360 --> 00:05:15,280
could we transform our raspberry pi into

00:05:13,600 --> 00:05:16,400
an edge computing node an iot on

00:05:15,280 --> 00:05:19,520
steroids or

00:05:16,400 --> 00:05:21,280
anything in between ten of thousands of

00:05:19,520 --> 00:05:22,479
people have made lead blink thanks to

00:05:21,280 --> 00:05:24,240
raspberry pi's

00:05:22,479 --> 00:05:26,639
lots of them have done way more

00:05:24,240 --> 00:05:27,680
ambitious projects and new ideas and

00:05:26,639 --> 00:05:30,639
projects to face

00:05:27,680 --> 00:05:31,600
every day be building a supercomputer by

00:05:30,639 --> 00:05:34,400
stacking lots of

00:05:31,600 --> 00:05:35,440
sbcs a bitcoin miner a brewery system a

00:05:34,400 --> 00:05:38,479
home automation

00:05:35,440 --> 00:05:41,520
weather station or any crazy idea the

00:05:38,479 --> 00:05:43,440
only limit seems to be your imagination

00:05:41,520 --> 00:05:45,360
a lot of competitors have appeared in

00:05:43,440 --> 00:05:46,880
them and somehow managed to follow the

00:05:45,360 --> 00:05:50,000
same otp which is stay

00:05:46,880 --> 00:05:51,199
cheap use the arm architecture and don't

00:05:50,000 --> 00:05:53,600
forget to add

00:05:51,199 --> 00:05:54,479
or to interact with the outside world

00:05:53,600 --> 00:05:57,919
and of course

00:05:54,479 --> 00:05:57,919
run line express all the time

00:05:58,080 --> 00:06:01,520
some of them keep the same pie suffix to

00:06:00,240 --> 00:06:03,520
show they're part of that same

00:06:01,520 --> 00:06:05,600
impulse like the banana pie the ranch

00:06:03,520 --> 00:06:07,039
pie some others stay on the plant theme

00:06:05,600 --> 00:06:09,039
like the pine 64

00:06:07,039 --> 00:06:10,960
and others plays on other suffixes to be

00:06:09,039 --> 00:06:12,800
visible like odd

00:06:10,960 --> 00:06:14,000
the last ones have a personality of

00:06:12,800 --> 00:06:16,560
their own like the

00:06:14,000 --> 00:06:18,240
bigger bone to do the same kind of

00:06:16,560 --> 00:06:20,479
things that we do with a raspberry pi we

00:06:18,240 --> 00:06:22,080
could use an orange pie sbc but we could

00:06:20,479 --> 00:06:23,759
have chosen another fruit like the

00:06:22,080 --> 00:06:26,639
banana a rose apple

00:06:23,759 --> 00:06:27,520
or any other edible themed sbc like the

00:06:26,639 --> 00:06:29,840
potato

00:06:27,520 --> 00:06:31,280
or something even less palatable like a

00:06:29,840 --> 00:06:33,360
pine cone

00:06:31,280 --> 00:06:34,800
whatever floats your boat as long as the

00:06:33,360 --> 00:06:36,800
car supports a very

00:06:34,800 --> 00:06:38,880
recent version of the linux kernel and

00:06:36,800 --> 00:06:41,680
who knows maybe docker

00:06:38,880 --> 00:06:43,360
that could be interesting there are lots

00:06:41,680 --> 00:06:45,280
of cards to choose from so you have to

00:06:43,360 --> 00:06:46,080
make a list of your prerequisites before

00:06:45,280 --> 00:06:48,479
ordering one

00:06:46,080 --> 00:06:50,000
how much memory would it need 256

00:06:48,479 --> 00:06:52,160
megabytes four gigabyte

00:06:50,000 --> 00:06:53,599
anything in between should it have gpu

00:06:52,160 --> 00:06:56,240
and pu fpga

00:06:53,599 --> 00:06:57,199
what was your storage good old sd card

00:06:56,240 --> 00:07:00,720
emmc

00:06:57,199 --> 00:07:03,360
m2 should have camera input hdmi output

00:07:00,720 --> 00:07:04,720
nothing at all and regarding the network

00:07:03,360 --> 00:07:07,759
could that be fat ethernet

00:07:04,720 --> 00:07:08,800
gigabit ethernet wi-fi lora mobile

00:07:07,759 --> 00:07:10,880
broadband

00:07:08,800 --> 00:07:12,160
would you need usb and what about the

00:07:10,880 --> 00:07:13,759
gpio pins

00:07:12,160 --> 00:07:15,599
should it be able to use a real-time

00:07:13,759 --> 00:07:16,319
clock would you need to be battery

00:07:15,599 --> 00:07:18,720
operated

00:07:16,319 --> 00:07:19,360
what about the operating system linux

00:07:18,720 --> 00:07:22,400
android

00:07:19,360 --> 00:07:24,479
anything more exotic and what about otg

00:07:22,400 --> 00:07:26,240
do you need very recent kernel or not

00:07:24,479 --> 00:07:29,199
would you need a specific hat

00:07:26,240 --> 00:07:30,080
cap mezzanine to extend the features of

00:07:29,199 --> 00:07:32,960
the card

00:07:30,080 --> 00:07:35,280
should it be able to run darker there is

00:07:32,960 --> 00:07:36,240
no one-size-fits-all in the sbc field so

00:07:35,280 --> 00:07:39,680
you have to choose

00:07:36,240 --> 00:07:41,199
your weapon now

00:07:39,680 --> 00:07:43,840
these little beasts can be used as

00:07:41,199 --> 00:07:46,080
servers most of them run linux after all

00:07:43,840 --> 00:07:48,479
f5 ethernet or gigabit ethernet and have

00:07:46,080 --> 00:07:49,680
plenty enough memory to run a web server

00:07:48,479 --> 00:07:52,879
a small database

00:07:49,680 --> 00:07:54,960
web log nas server a home media server

00:07:52,879 --> 00:07:56,080
or any kind of server as long as the

00:07:54,960 --> 00:07:58,960
software you need

00:07:56,080 --> 00:08:01,520
is supported the possibilities are

00:07:58,960 --> 00:08:01,520
endless

00:08:03,520 --> 00:08:07,280
we have also in that a blinking led

00:08:05,680 --> 00:08:09,440
plugged into a breadboard

00:08:07,280 --> 00:08:11,120
linked to a raspberry pi that's almost

00:08:09,440 --> 00:08:13,280
the first mandatory step when you want

00:08:11,120 --> 00:08:15,280
to interact with the outside world

00:08:13,280 --> 00:08:17,199
the number of difficulty levels is quite

00:08:15,280 --> 00:08:19,199
high so i don't advise you to run your

00:08:17,199 --> 00:08:21,120
nuclear power plant with sensors plug

00:08:19,199 --> 00:08:23,680
into raspberry pi gpio

00:08:21,120 --> 00:08:25,360
but having your own raspi drone sounds

00:08:23,680 --> 00:08:27,120
pretty cool

00:08:25,360 --> 00:08:29,280
lots of intermediate levels give

00:08:27,120 --> 00:08:30,000
instantaneous satisfaction like home

00:08:29,280 --> 00:08:31,840
automation

00:08:30,000 --> 00:08:34,159
you can either coolness factor by using

00:08:31,840 --> 00:08:36,240
trendy devices like the eco google home

00:08:34,159 --> 00:08:39,599
elixir or you can even build your own

00:08:36,240 --> 00:08:41,680
elixir or google home thanks to sbcs

00:08:39,599 --> 00:08:43,599
docker has been tried the craze for a

00:08:41,680 --> 00:08:46,480
few years now it's used almost

00:08:43,599 --> 00:08:48,959
everywhere and mostly on big x86 server

00:08:46,480 --> 00:08:50,399
i use it every day and must admit that

00:08:48,959 --> 00:08:52,640
it made my life easier

00:08:50,399 --> 00:08:54,160
as a developer with docker you can run

00:08:52,640 --> 00:08:55,279
the same software as you would without

00:08:54,160 --> 00:08:57,680
it but so much

00:08:55,279 --> 00:08:58,720
easier as all the configuration and the

00:08:57,680 --> 00:09:01,760
dependency hell

00:08:58,720 --> 00:09:03,200
have already been done for you it will

00:09:01,760 --> 00:09:03,920
run the same way on your development

00:09:03,200 --> 00:09:06,160
laptop

00:09:03,920 --> 00:09:07,440
any virtual machine or on your shiny and

00:09:06,160 --> 00:09:09,200
expensive server

00:09:07,440 --> 00:09:10,480
you can also run several containers at

00:09:09,200 --> 00:09:12,640
the same time with docker

00:09:10,480 --> 00:09:13,519
but you can host different services on

00:09:12,640 --> 00:09:16,240
the same host

00:09:13,519 --> 00:09:18,399
without interferences who has never

00:09:16,240 --> 00:09:20,640
experienced having dependencies clash

00:09:18,399 --> 00:09:23,360
when trying to host different services

00:09:20,640 --> 00:09:25,440
on the same host

00:09:23,360 --> 00:09:28,480
for yours docker has been used only on

00:09:25,440 --> 00:09:30,880
big x86 servers but after resin dot eo

00:09:28,480 --> 00:09:32,000
which is now a berliner port docker to

00:09:30,880 --> 00:09:34,080
the m processor

00:09:32,000 --> 00:09:35,200
everything change you could then have a

00:09:34,080 --> 00:09:36,880
running service on

00:09:35,200 --> 00:09:39,200
arm without having to reinstall the

00:09:36,880 --> 00:09:41,360
whole system in case of an update

00:09:39,200 --> 00:09:43,680
rollback is much easier when using

00:09:41,360 --> 00:09:44,080
docker so you can now use docker on your

00:09:43,680 --> 00:09:47,360
new

00:09:44,080 --> 00:09:49,839
big arm servers

00:09:47,360 --> 00:09:51,760
speaking of arm and docker you are not

00:09:49,839 --> 00:09:52,240
limited to the biggest arm servers to

00:09:51,760 --> 00:09:54,800
use it

00:09:52,240 --> 00:09:55,360
even the raspberry pi can use darker by

00:09:54,800 --> 00:09:57,600
the way

00:09:55,360 --> 00:09:59,920
ipriot arm liner's distribution has made

00:09:57,600 --> 00:10:02,079
docker on arm its main selling point

00:09:59,920 --> 00:10:04,079
from burning the image on an sd card to

00:10:02,079 --> 00:10:04,880
running the first docker container in 5

00:10:04,079 --> 00:10:06,959
to 10 minutes

00:10:04,880 --> 00:10:09,600
is for real and not just a charming

00:10:06,959 --> 00:10:11,440
province it even exists in 64 bits for

00:10:09,600 --> 00:10:13,200
the latest evolutions of the raspberry

00:10:11,440 --> 00:10:15,360
pi

00:10:13,200 --> 00:10:17,200
for other cards like the orange pi zero

00:10:15,360 --> 00:10:18,800
you can use ambian which made the

00:10:17,200 --> 00:10:21,120
installation of docker

00:10:18,800 --> 00:10:23,440
breathe pretty cool to be able to run

00:10:21,120 --> 00:10:25,440
docker on that kind of mini machines but

00:10:23,440 --> 00:10:27,760
what kind of service could you run on

00:10:25,440 --> 00:10:30,240
docker with so little memory

00:10:27,760 --> 00:10:32,079
well tons of things believe it or not

00:10:30,240 --> 00:10:34,000
you can transform your docker arm

00:10:32,079 --> 00:10:35,920
machine into a gitlab runner to ease

00:10:34,000 --> 00:10:39,120
your continuous integration process

00:10:35,920 --> 00:10:41,760
or into web server database a blog

00:10:39,120 --> 00:10:43,040
as without docker the possibilities are

00:10:41,760 --> 00:10:45,120
endless

00:10:43,040 --> 00:10:46,959
so we think that we can make tons of

00:10:45,120 --> 00:10:48,720
funny interesting projects with

00:10:46,959 --> 00:10:50,720
raspberry pi and its competitors

00:10:48,720 --> 00:10:52,480
use them as servers interact with them

00:10:50,720 --> 00:10:54,640
thanks to gpi or hats

00:10:52,480 --> 00:10:56,640
and even use docker which will help us

00:10:54,640 --> 00:10:58,480
get out of dependency hell

00:10:56,640 --> 00:11:00,240
all thanks to top-notch recent

00:10:58,480 --> 00:11:03,200
distributions like ambien

00:11:00,240 --> 00:11:03,920
or ipriot now what what if we could

00:11:03,200 --> 00:11:06,560
somehow

00:11:03,920 --> 00:11:08,720
combine that could docker show some love

00:11:06,560 --> 00:11:10,640
for the lead

00:11:08,720 --> 00:11:12,839
can we get the best of bath world a

00:11:10,640 --> 00:11:14,000
blinking lead controlled by a darker

00:11:12,839 --> 00:11:16,240
container

00:11:14,000 --> 00:11:17,600
okay this may not be the best use but

00:11:16,240 --> 00:11:19,040
you get the idea

00:11:17,600 --> 00:11:20,640
as soon as you think of what you could

00:11:19,040 --> 00:11:21,200
do if you could control form within

00:11:20,640 --> 00:11:23,760
docker

00:11:21,200 --> 00:11:25,680
what's going on with your dpio ideas

00:11:23,760 --> 00:11:28,240
will pop up by themselves because

00:11:25,680 --> 00:11:28,880
yes you can control the gpio through

00:11:28,240 --> 00:11:30,720
darker

00:11:28,880 --> 00:11:32,320
you can prepare ahead of time an image

00:11:30,720 --> 00:11:32,959
containing everything you need you can

00:11:32,320 --> 00:11:34,800
break it

00:11:32,959 --> 00:11:36,160
as many times as necessary until it

00:11:34,800 --> 00:11:37,760
works fine and then

00:11:36,160 --> 00:11:39,519
deploy it on a new scent machine which

00:11:37,760 --> 00:11:41,760
is linked to a piece of hardware

00:11:39,519 --> 00:11:42,800
without having to tinker with a machine

00:11:41,760 --> 00:11:45,519
configuration

00:11:42,800 --> 00:11:46,640
like for example the sensor connected to

00:11:45,519 --> 00:11:48,720
raspberry pi

00:11:46,640 --> 00:11:50,399
ready to be read through docker there

00:11:48,720 --> 00:11:52,639
are several ways to do it you can choose

00:11:50,399 --> 00:11:54,320
your favorite gpio library and create

00:11:52,639 --> 00:11:56,160
your own docker image with it

00:11:54,320 --> 00:11:57,680
or use a pre-made docker image

00:11:56,160 --> 00:12:00,320
containing a gpio

00:11:57,680 --> 00:12:01,920
library afterwards you just have to run

00:12:00,320 --> 00:12:02,959
the chosen docker image while not

00:12:01,920 --> 00:12:06,720
forgetting to link

00:12:02,959 --> 00:12:07,440
the ftty mi0 to deft ui mi0 and the fmm

00:12:06,720 --> 00:12:09,839
to devmem

00:12:07,440 --> 00:12:10,800
which would give something like this

00:12:09,839 --> 00:12:14,720
easy peasy

00:12:10,800 --> 00:12:15,519
lemon squeezy being able to interact

00:12:14,720 --> 00:12:17,680
with a sensor

00:12:15,519 --> 00:12:19,360
a hat or any hardware plugged into the

00:12:17,680 --> 00:12:20,959
gpio is a major step

00:12:19,360 --> 00:12:23,279
if you could add on top of that

00:12:20,959 --> 00:12:24,399
capturing images through the csi camera

00:12:23,279 --> 00:12:26,800
with darker

00:12:24,399 --> 00:12:28,720
that would be the raspberry on the cake

00:12:26,800 --> 00:12:30,399
is it even possible

00:12:28,720 --> 00:12:31,680
for those of you who have not yet if you

00:12:30,399 --> 00:12:32,240
would like to take a seat because of

00:12:31,680 --> 00:12:35,040
course

00:12:32,240 --> 00:12:35,920
it works you have access to the csi

00:12:35,040 --> 00:12:38,160
camera from

00:12:35,920 --> 00:12:40,320
docker you can access it through darker

00:12:38,160 --> 00:12:40,880
and there are even darker images ready

00:12:40,320 --> 00:12:42,800
to use

00:12:40,880 --> 00:12:44,639
that will launch a web server serving

00:12:42,800 --> 00:12:45,920
the video and that will open a port with

00:12:44,639 --> 00:12:48,079
the video streaming

00:12:45,920 --> 00:12:49,600
you just have to link the right device

00:12:48,079 --> 00:12:52,480
to your docker container

00:12:49,600 --> 00:12:54,959
or run it as a priviled container that's

00:12:52,480 --> 00:12:57,440
another nice step in the right direction

00:12:54,959 --> 00:12:58,160
so what do we have now a docker-able

00:12:57,440 --> 00:13:00,320
machine

00:12:58,160 --> 00:13:02,320
ready to be used as a server that can

00:13:00,320 --> 00:13:04,079
interact with the outside world

00:13:02,320 --> 00:13:06,000
it can make some heavy computation or

00:13:04,079 --> 00:13:08,399
even ai based on the data

00:13:06,000 --> 00:13:10,480
it gathers from the sensors or camera

00:13:08,399 --> 00:13:11,279
that we can do animal detection or

00:13:10,480 --> 00:13:13,760
forecast

00:13:11,279 --> 00:13:15,760
we can also report on specific hardware

00:13:13,760 --> 00:13:17,600
for example like your level amp for fail

00:13:15,760 --> 00:13:18,720
build or google home notification

00:13:17,600 --> 00:13:22,079
message

00:13:18,720 --> 00:13:25,120
ok that's interesting but can we do any

00:13:22,079 --> 00:13:25,839
better with this configuration we still

00:13:25,120 --> 00:13:28,160
need to use

00:13:25,839 --> 00:13:29,760
a power plug ethernet or wi-fi so that

00:13:28,160 --> 00:13:32,240
we're not really on the edge of

00:13:29,760 --> 00:13:33,040
anything could we simplify or make the

00:13:32,240 --> 00:13:36,399
device more

00:13:33,040 --> 00:13:38,240
independent some devices can handle poe

00:13:36,399 --> 00:13:40,240
natively with little hacks

00:13:38,240 --> 00:13:41,760
or hats but you could get rid of the

00:13:40,240 --> 00:13:44,240
power plug and let them

00:13:41,760 --> 00:13:45,279
operate just about anywhere as long as

00:13:44,240 --> 00:13:48,480
you've got ethernet

00:13:45,279 --> 00:13:50,079
nearby we still have to be next to a

00:13:48,480 --> 00:13:52,399
plug of some sort

00:13:50,079 --> 00:13:53,279
what if we removed the power adapter

00:13:52,399 --> 00:13:54,959
limitations

00:13:53,279 --> 00:13:57,120
the pie juice for the raspberry could be

00:13:54,959 --> 00:13:59,199
the solution if coupled to a solar panel

00:13:57,120 --> 00:14:00,560
or to any other solution that does not

00:13:59,199 --> 00:14:02,880
depend on the grid

00:14:00,560 --> 00:14:03,760
for other sbc there are other solutions

00:14:02,880 --> 00:14:06,320
like mine

00:14:03,760 --> 00:14:08,000
crude and some smart but most of the

00:14:06,320 --> 00:14:10,399
time it looks almost the same

00:14:08,000 --> 00:14:11,920
a maiden of some sort hosting a battery

00:14:10,399 --> 00:14:15,040
on top of the main card

00:14:11,920 --> 00:14:16,160
we are not far from happiness no more

00:14:15,040 --> 00:14:17,760
wires for power

00:14:16,160 --> 00:14:20,320
and we could get rid of the ethernet

00:14:17,760 --> 00:14:22,079
cable too but we still depend on wi-fi

00:14:20,320 --> 00:14:22,959
which may not be convenient depending on

00:14:22,079 --> 00:14:25,279
the location

00:14:22,959 --> 00:14:26,639
of the device so one last upgrade to a

00:14:25,279 --> 00:14:28,880
device on the edge

00:14:26,639 --> 00:14:30,480
could be the user floor this technology

00:14:28,880 --> 00:14:32,800
allows very long range transmission

00:14:30,480 --> 00:14:33,680
supposedly like 15 kilometers nine miles

00:14:32,800 --> 00:14:36,079
in an open field

00:14:33,680 --> 00:14:38,000
with low power consumption of course you

00:14:36,079 --> 00:14:39,600
have to be able to get in touch with a

00:14:38,000 --> 00:14:41,680
lower gateway in that range

00:14:39,600 --> 00:14:44,079
and the data rate is not super exciting

00:14:41,680 --> 00:14:45,440
27 kilobits per second at most and

00:14:44,079 --> 00:14:46,079
you're not allowed to occupy the

00:14:45,440 --> 00:14:48,079
bandwidth

00:14:46,079 --> 00:14:49,839
all the time so it won't be the answer

00:14:48,079 --> 00:14:50,480
to all your questions about using a

00:14:49,839 --> 00:14:53,360
darker

00:14:50,480 --> 00:14:55,440
able arm device on the edge without any

00:14:53,360 --> 00:14:57,519
access to the grid it will never

00:14:55,440 --> 00:14:58,639
allow you to send pictures taken by the

00:14:57,519 --> 00:15:01,120
camera for example

00:14:58,639 --> 00:15:02,639
but it could send results about what it

00:15:01,120 --> 00:15:05,440
found in the pictures

00:15:02,639 --> 00:15:06,160
your sensors devices motors sprinklers

00:15:05,440 --> 00:15:08,399
whatever

00:15:06,160 --> 00:15:09,760
equipped with lorawan will send data to

00:15:08,399 --> 00:15:11,760
the gateway they can reach

00:15:09,760 --> 00:15:14,000
and these gateways will send this data

00:15:11,760 --> 00:15:16,079
to an application server which will then

00:15:14,000 --> 00:15:18,160
get in touch with your code thanks to

00:15:16,079 --> 00:15:20,160
http or mqtt for example

00:15:18,160 --> 00:15:21,600
that knows what to do with this piece of

00:15:20,160 --> 00:15:24,240
data but

00:15:21,600 --> 00:15:26,639
is there a way to use lora easily with

00:15:24,240 --> 00:15:29,279
the raspberry pi

00:15:26,639 --> 00:15:31,199
yes indeed you can find hats to

00:15:29,279 --> 00:15:33,120
transform your raspberry into a laura

00:15:31,199 --> 00:15:34,959
thing even the raspberry pi is zero

00:15:33,120 --> 00:15:36,639
you can also transform your raspberry

00:15:34,959 --> 00:15:39,040
into a somehow limited

00:15:36,639 --> 00:15:40,160
lora gateway with that very same card or

00:15:39,040 --> 00:15:43,120
spend more money

00:15:40,160 --> 00:15:43,519
and have a full-fledged gateway instead

00:15:43,120 --> 00:15:46,320
now

00:15:43,519 --> 00:15:46,959
we're talking we have a low power of the

00:15:46,320 --> 00:15:49,440
grid

00:15:46,959 --> 00:15:51,440
armed device running docker and able to

00:15:49,440 --> 00:15:53,279
interact with the outside world while

00:15:51,440 --> 00:15:54,000
exchanging data with the rest of the

00:15:53,279 --> 00:15:57,440
internet

00:15:54,000 --> 00:16:00,639
and the lora devices around him not bad

00:15:57,440 --> 00:16:03,040
but is that really computing at the edge

00:16:00,639 --> 00:16:04,720
i think it is a nice blend of iot and

00:16:03,040 --> 00:16:06,480
edge computing

00:16:04,720 --> 00:16:08,720
but why should you bother with law

00:16:06,480 --> 00:16:09,600
couldn't you use directly gsm on your

00:16:08,720 --> 00:16:11,759
sbc

00:16:09,600 --> 00:16:13,920
of course you can some usb keys that

00:16:11,759 --> 00:16:16,399
provide gsm connectivity are handled by

00:16:13,920 --> 00:16:17,920
linux on raspberry some sbcs have

00:16:16,399 --> 00:16:19,759
mezzanines with sim card slot so that

00:16:17,920 --> 00:16:21,920
you can get network this way too

00:16:19,759 --> 00:16:24,000
and some other cards have directly a sim

00:16:21,920 --> 00:16:24,480
card slots and lots of other gimmicks

00:16:24,000 --> 00:16:26,560
too

00:16:24,480 --> 00:16:28,639
that you could start sending your data

00:16:26,560 --> 00:16:29,519
on the internet just after unboxing your

00:16:28,639 --> 00:16:32,320
card

00:16:29,519 --> 00:16:33,920
but will there be a good 4g connection

00:16:32,320 --> 00:16:35,839
where your device will be located

00:16:33,920 --> 00:16:38,079
are you ready to pay each month a fair

00:16:35,839 --> 00:16:39,600
amount of money for your iot device to

00:16:38,079 --> 00:16:42,720
get access to the internet

00:16:39,600 --> 00:16:45,279
what about it getting stolen so

00:16:42,720 --> 00:16:46,959
why not get a cheaper subscription and

00:16:45,279 --> 00:16:49,600
just send text messages

00:16:46,959 --> 00:16:51,600
2g is widely available even in the

00:16:49,600 --> 00:16:53,680
countryside but you would have then to

00:16:51,600 --> 00:16:55,759
be able to catch the messages on the

00:16:53,680 --> 00:16:56,320
other end so that you're able to proceed

00:16:55,759 --> 00:16:58,880
them

00:16:56,320 --> 00:17:00,560
which means another card at home with

00:16:58,880 --> 00:17:03,680
another gsm subscriptions

00:17:00,560 --> 00:17:05,919
and tons of headaches

00:17:03,680 --> 00:17:06,959
another drawback of using gsm is a power

00:17:05,919 --> 00:17:09,520
conception

00:17:06,959 --> 00:17:10,880
sending sms is way more energy consuming

00:17:09,520 --> 00:17:12,720
than sending the same message with

00:17:10,880 --> 00:17:14,640
larawan so using lorawan is just a

00:17:12,720 --> 00:17:17,120
matter of finding the right card

00:17:14,640 --> 00:17:18,720
hat usb key and being part of the right

00:17:17,120 --> 00:17:20,480
network but once it's done

00:17:18,720 --> 00:17:22,319
it's done you won't have to pay each

00:17:20,480 --> 00:17:23,360
month to get lower on your connected

00:17:22,319 --> 00:17:25,039
part of the world

00:17:23,360 --> 00:17:26,480
lore gateways are there for you

00:17:25,039 --> 00:17:27,520
forwarding the packets to your

00:17:26,480 --> 00:17:30,720
application server

00:17:27,520 --> 00:17:31,440
automagically you already got it i'm

00:17:30,720 --> 00:17:33,280
cheap

00:17:31,440 --> 00:17:34,720
and loja has been designed to be as

00:17:33,280 --> 00:17:36,799
cheap as possible

00:17:34,720 --> 00:17:37,760
so cheap in fact that you could get lora

00:17:36,799 --> 00:17:40,720
able sensors

00:17:37,760 --> 00:17:42,799
for very little money these sensors

00:17:40,720 --> 00:17:45,360
could send to your laura get away able

00:17:42,799 --> 00:17:47,200
sbc data that you could then process and

00:17:45,360 --> 00:17:48,480
forward through the core network to your

00:17:47,200 --> 00:17:51,200
application server

00:17:48,480 --> 00:17:51,760
it's so cheap dependable and disposable

00:17:51,200 --> 00:17:54,480
that even

00:17:51,760 --> 00:17:54,799
cows gets home i know we are not ships

00:17:54,480 --> 00:17:57,360
nor

00:17:54,799 --> 00:17:57,919
cows but if cows can get some we should

00:17:57,360 --> 00:18:02,720
too

00:17:57,919 --> 00:18:06,080
maybe not on our ears but in our cities

00:18:02,720 --> 00:18:08,160
so what do we have now off the grid sbc

00:18:06,080 --> 00:18:10,160
able to process some data to interact

00:18:08,160 --> 00:18:11,679
with the outside world by using sensors

00:18:10,160 --> 00:18:14,400
cameras or maybe even

00:18:11,679 --> 00:18:16,480
engaging mechanisms starting models and

00:18:14,400 --> 00:18:17,039
even being able to get and send back

00:18:16,480 --> 00:18:19,120
data

00:18:17,039 --> 00:18:20,480
to your application server we could have

00:18:19,120 --> 00:18:23,120
several of them acting as

00:18:20,480 --> 00:18:25,520
endnotes processing images sensor data

00:18:23,120 --> 00:18:28,240
taking decisions or drawing conclusions

00:18:25,520 --> 00:18:29,679
and sending back data to others acting

00:18:28,240 --> 00:18:31,840
as gateways

00:18:29,679 --> 00:18:33,840
now what we've seen earlier that the

00:18:31,840 --> 00:18:34,640
raspberry could be used for ai with

00:18:33,840 --> 00:18:36,640
tensorflow

00:18:34,640 --> 00:18:39,039
of course there was also a docker image

00:18:36,640 --> 00:18:39,919
for that so could we use our out of the

00:18:39,039 --> 00:18:42,240
grid somehow

00:18:39,919 --> 00:18:44,400
internet linked docker docker-able sbc

00:18:42,240 --> 00:18:47,440
to process the data coming from the edge

00:18:44,400 --> 00:18:49,039
of the real world yes we can first of

00:18:47,440 --> 00:18:50,799
all you have to train a model in the

00:18:49,039 --> 00:18:52,720
cloud or on premises

00:18:50,799 --> 00:18:55,520
and then you will be able to run it on

00:18:52,720 --> 00:18:56,160
the raspi or on any sbc able to run

00:18:55,520 --> 00:18:58,320
docker

00:18:56,160 --> 00:19:01,200
you can use of course some more powerful

00:18:58,320 --> 00:19:03,520
boards like the one with worksheet 3399

00:19:01,200 --> 00:19:05,039
to get more accurate or faster results

00:19:03,520 --> 00:19:07,440
but you can do even better

00:19:05,039 --> 00:19:09,600
you can also add hats to the sbc that

00:19:07,440 --> 00:19:11,600
will bring powerful inference for models

00:19:09,600 --> 00:19:14,480
in areas such as predictive maintenance

00:19:11,600 --> 00:19:16,000
anomaly detection robotics and many more

00:19:14,480 --> 00:19:18,160
you can find hybrid boards with

00:19:16,000 --> 00:19:20,160
programmable logic that are able to do

00:19:18,160 --> 00:19:21,120
much better than only with the cpu for

00:19:20,160 --> 00:19:23,280
example

00:19:21,120 --> 00:19:25,120
on the other hand you also have cheaper

00:19:23,280 --> 00:19:26,000
and more specialized boards like bundle

00:19:25,120 --> 00:19:27,760
with a camera

00:19:26,000 --> 00:19:29,520
that can do some image recognition for

00:19:27,760 --> 00:19:32,559
example thanks to a specialized

00:19:29,520 --> 00:19:34,960
arm library you also have cameras let's

00:19:32,559 --> 00:19:36,320
pour the same stock than some sbcs with

00:19:34,960 --> 00:19:39,679
ai extension chip

00:19:36,320 --> 00:19:40,160
like the rockshift 3399 pro speaking of

00:19:39,679 --> 00:19:43,600
this

00:19:40,160 --> 00:19:45,840
sock is the same as the rk3399 except

00:19:43,600 --> 00:19:48,160
for the addition of an up to three tops

00:19:45,840 --> 00:19:51,200
performing neural network processing

00:19:48,160 --> 00:19:53,600
unit the npu supports tensorflow

00:19:51,200 --> 00:19:54,960
tensorflow lite cafe and other deep

00:19:53,600 --> 00:19:56,720
learning models

00:19:54,960 --> 00:19:58,640
as i said before machine learning

00:19:56,720 --> 00:20:01,280
development is done most of the time

00:19:58,640 --> 00:20:02,000
in two stages as for tensorflow on the

00:20:01,280 --> 00:20:04,159
raspi

00:20:02,000 --> 00:20:05,760
an algorithm is initially trained on a

00:20:04,159 --> 00:20:07,440
large set of same build data

00:20:05,760 --> 00:20:08,960
on a fast and powerful machine or

00:20:07,440 --> 00:20:10,960
cluster then

00:20:08,960 --> 00:20:12,960
the train network is deployed into an

00:20:10,960 --> 00:20:13,520
application that needs to interpret real

00:20:12,960 --> 00:20:16,080
data

00:20:13,520 --> 00:20:16,799
this deployment stage or inference stage

00:20:16,080 --> 00:20:19,440
is where

00:20:16,799 --> 00:20:21,919
edge computing is really useful for the

00:20:19,440 --> 00:20:24,640
boards with an npu like this one

00:20:21,919 --> 00:20:25,600
you have an intermediary third step

00:20:24,640 --> 00:20:27,120
which converts

00:20:25,600 --> 00:20:30,640
the train model into something

00:20:27,120 --> 00:20:32,880
understandable by the npu

00:20:30,640 --> 00:20:34,960
let's say now that you already have sbc

00:20:32,880 --> 00:20:36,799
which is good at taking pics or getting

00:20:34,960 --> 00:20:38,240
sensors data but which fails at

00:20:36,799 --> 00:20:40,080
inference because of poor

00:20:38,240 --> 00:20:41,440
performance you want to keep it because

00:20:40,080 --> 00:20:43,200
the time you invested on it

00:20:41,440 --> 00:20:44,480
is valuable and that you don't want to

00:20:43,200 --> 00:20:47,919
invest into another one

00:20:44,480 --> 00:20:50,559
and redo everything despite using docker

00:20:47,919 --> 00:20:53,120
what if there was a way to run something

00:20:50,559 --> 00:20:53,679
at the edge of your edge computing

00:20:53,120 --> 00:20:56,080
device

00:20:53,679 --> 00:20:57,600
could we call that dangling on the edge

00:20:56,080 --> 00:20:59,840
computing

00:20:57,600 --> 00:21:01,280
just kidding not at the edge but what if

00:20:59,840 --> 00:21:02,000
we could delegate the work to a

00:21:01,280 --> 00:21:03,440
specialized piece

00:21:02,000 --> 00:21:06,400
of hardware that we could link to the

00:21:03,440 --> 00:21:07,200
aging sbc this usb stick for example is

00:21:06,400 --> 00:21:09,919
the orange pi

00:21:07,200 --> 00:21:11,120
ai stick that supports cafe pi torch and

00:21:09,919 --> 00:21:13,919
soon tensorflow

00:21:11,120 --> 00:21:16,880
it can achieve up to 5.6 tops almost

00:21:13,919 --> 00:21:18,720
twice as good as the rk3399 pro

00:21:16,880 --> 00:21:21,520
that's pretty impressive little bit of

00:21:18,720 --> 00:21:23,760
hardware google has another proposal

00:21:21,520 --> 00:21:24,799
make any linux or android things machine

00:21:23,760 --> 00:21:27,280
even the raspberry

00:21:24,799 --> 00:21:28,400
ai able thanks to the htp machine

00:21:27,280 --> 00:21:30,320
learning chip

00:21:28,400 --> 00:21:32,559
plug it in use a dev kit and you will

00:21:30,320 --> 00:21:34,400
process ml inference data directly

00:21:32,559 --> 00:21:36,080
on the device this chip is a

00:21:34,400 --> 00:21:38,240
stripped-down version of the one google

00:21:36,080 --> 00:21:40,159
uses to train machine learning models

00:21:38,240 --> 00:21:41,520
of course you will have to train your

00:21:40,159 --> 00:21:43,600
models in the cloud

00:21:41,520 --> 00:21:46,080
beforehand but that opens quite a lot of

00:21:43,600 --> 00:21:49,200
opportunities for the low end devices

00:21:46,080 --> 00:21:49,760
located at the edge nowadays we see more

00:21:49,200 --> 00:21:52,080
and more

00:21:49,760 --> 00:21:53,760
sbcs equipped with a standard sock but

00:21:52,080 --> 00:21:55,280
which get help from a powerful

00:21:53,760 --> 00:21:58,240
integrated npu

00:21:55,280 --> 00:21:59,200
like in the orange pi 4b let's hope we

00:21:58,240 --> 00:22:01,120
will see more

00:21:59,200 --> 00:22:03,360
and more of this kind of worlds in the

00:22:01,120 --> 00:22:05,520
near future

00:22:03,360 --> 00:22:06,640
to conclude if you're interested in

00:22:05,520 --> 00:22:08,400
machine learning and

00:22:06,640 --> 00:22:10,080
already have a raspberry pi gathering

00:22:08,400 --> 00:22:12,000
dust or stuck in your pocket

00:22:10,080 --> 00:22:14,000
wait no more you will find tons of

00:22:12,000 --> 00:22:15,600
tutorials for this card but you can also

00:22:14,000 --> 00:22:16,640
follow more general introduction to

00:22:15,600 --> 00:22:19,440
machine learning

00:22:16,640 --> 00:22:19,919
or go to the discord on server to excuse

00:22:19,440 --> 00:22:22,240
ml

00:22:19,919 --> 00:22:24,000
and everything arm if you don't own a

00:22:22,240 --> 00:22:24,880
raspberry yet you could buy an even

00:22:24,000 --> 00:22:26,960
cheaper card

00:22:24,880 --> 00:22:28,080
like the orange pie one which starts at

00:22:26,960 --> 00:22:30,240
9 euros

00:22:28,080 --> 00:22:31,280
and start playing with tensorflow in

00:22:30,240 --> 00:22:34,159
docker or

00:22:31,280 --> 00:22:36,799
opencv yes you can start machine

00:22:34,159 --> 00:22:38,559
learning and edge computing for 9 euros

00:22:36,799 --> 00:22:40,000
if you just want to start interacting

00:22:38,559 --> 00:22:42,799
with the outside world without

00:22:40,000 --> 00:22:44,720
ml that's perfect too if you're using

00:22:42,799 --> 00:22:47,120
the raspberry pi you'll find the biggest

00:22:44,720 --> 00:22:49,600
community that will help you progress

00:22:47,120 --> 00:22:50,320
and if you choose another card well

00:22:49,600 --> 00:22:52,720
you'll have

00:22:50,320 --> 00:22:54,000
tons of fun chasing the little gremlins

00:22:52,720 --> 00:22:56,799
and by doing that you will

00:22:54,000 --> 00:22:57,679
also learn a lot and deserve a cold brew

00:22:56,799 --> 00:23:00,080
afterwards

00:22:57,679 --> 00:23:02,000
the only rules after all are just having

00:23:00,080 --> 00:23:05,280
fun and learning all day

00:23:02,000 --> 00:23:08,880
and the only limits are your imagination

00:23:05,280 --> 00:23:10,880
and the memory usb bus bandwidth

00:23:08,880 --> 00:23:12,159
sd card performance don't you be so

00:23:10,880 --> 00:23:17,440
bitter

00:23:12,159 --> 00:23:17,440

YouTube URL: https://www.youtube.com/watch?v=Tlb0DEtegFk


