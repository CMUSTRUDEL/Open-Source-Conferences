Title: LVC20-114 Thermal management update by Daniel Lezcano
Publication date: 2020-09-18
Playlist: Linaro Virtual Connect 2020
Description: 
	Thermal management
The number of different components on the embedded devices, their performances, and the power they drain put on the front of the scene the thermal framework which was delegated to a second role until recently. We had to find new strategies to cool down the components as well as improve thermal management.

This session provides an update of the different changes in the thermal framework which are now available upstream.
Captions: 
	00:00:00,560 --> 00:00:04,720
hello my name is daniel escano i'm

00:00:02,560 --> 00:00:07,680
working for the

00:00:04,720 --> 00:00:08,800
canal working room for inlinero and i

00:00:07,680 --> 00:00:12,240
wanted to do

00:00:08,800 --> 00:00:16,400
some update on the tamar framework

00:00:12,240 --> 00:00:18,160
because the reason is

00:00:16,400 --> 00:00:19,840
the tamar framework is getting more and

00:00:18,160 --> 00:00:23,199
more important

00:00:19,840 --> 00:00:27,760
because it's one of the major factor

00:00:23,199 --> 00:00:30,800
limiting the performances on the sock

00:00:27,760 --> 00:00:32,719
and on the other side we have some issue

00:00:30,800 --> 00:00:36,079
with the maintenance chip which is

00:00:32,719 --> 00:00:39,440
uh unresponsive and

00:00:36,079 --> 00:00:42,559
finally in the current maintenance

00:00:39,440 --> 00:00:46,000
just bailouts and the patch

00:00:42,559 --> 00:00:48,800
patches were not merged in time

00:00:46,000 --> 00:00:49,680
so that was delaying the features and

00:00:48,800 --> 00:00:53,280
and so so

00:00:49,680 --> 00:00:56,000
for drivers could be a problem but the

00:00:53,280 --> 00:00:56,879
in particular the main issue is the

00:00:56,000 --> 00:00:59,840
thermal

00:00:56,879 --> 00:00:59,840
core itself

00:01:00,399 --> 00:01:05,439
also we want to talk about different

00:01:03,760 --> 00:01:06,240
aspects of the tamar from what we can

00:01:05,439 --> 00:01:08,799
improve

00:01:06,240 --> 00:01:09,920
and then there were some changes

00:01:08,799 --> 00:01:12,960
recently

00:01:09,920 --> 00:01:13,920
we need to present what what are the new

00:01:12,960 --> 00:01:17,360
features

00:01:13,920 --> 00:01:20,320
for this framework and then

00:01:17,360 --> 00:01:20,320
i will end up by

00:01:20,640 --> 00:01:26,320
giving some information about the future

00:01:22,960 --> 00:01:29,520
work of the tamar framework

00:01:26,320 --> 00:01:32,720
so now there is a new the maintenance

00:01:29,520 --> 00:01:33,439
problem is solved uh there is two new

00:01:32,720 --> 00:01:36,799
maintenance

00:01:33,439 --> 00:01:40,799
and reviewer so one new maintenance me

00:01:36,799 --> 00:01:43,920
and um and amit kucheria

00:01:40,799 --> 00:01:47,680
who is also involved in reviewing

00:01:43,920 --> 00:01:50,479
the patches so we have more ir

00:01:47,680 --> 00:01:52,240
looking at the code and and doing

00:01:50,479 --> 00:01:55,439
feedbacks

00:01:52,240 --> 00:01:58,320
before we add two trees the tamasok tree

00:01:55,439 --> 00:01:59,040
and the telma core tree with the intel

00:01:58,320 --> 00:02:01,600
so that

00:01:59,040 --> 00:02:02,960
it was a bit confusing because we didn't

00:02:01,600 --> 00:02:05,360
know

00:02:02,960 --> 00:02:06,880
to which tree against which we should

00:02:05,360 --> 00:02:09,679
provide patches

00:02:06,880 --> 00:02:11,200
and which maintenance should take them

00:02:09,679 --> 00:02:14,560
so we created a group

00:02:11,200 --> 00:02:17,680
which is the thermal group

00:02:14,560 --> 00:02:21,520
and we have a single tree

00:02:17,680 --> 00:02:24,959
um so any maintenance of the thermal

00:02:21,520 --> 00:02:28,560
so it could be angry or can could be me

00:02:24,959 --> 00:02:31,840
can commit patches on this tree we have

00:02:28,560 --> 00:02:34,720
three branches we have a canal ci branch

00:02:31,840 --> 00:02:35,680
so this branch can be rebased so when i

00:02:34,720 --> 00:02:38,239
pick a patch

00:02:35,680 --> 00:02:39,040
i put this patch on this branch if

00:02:38,239 --> 00:02:41,840
everything is

00:02:39,040 --> 00:02:42,720
all right it goes to the linux branch

00:02:41,840 --> 00:02:45,040
and

00:02:42,720 --> 00:02:47,760
when it's all right it goes to the next

00:02:45,040 --> 00:02:50,319
branch the next branch is never rebased

00:02:47,760 --> 00:02:53,040
um and the linux next branch and the

00:02:50,319 --> 00:02:56,560
canon ci branch can be rebased

00:02:53,040 --> 00:02:57,760
also to comply with the the up streaming

00:02:56,560 --> 00:03:01,200
process

00:02:57,760 --> 00:03:05,120
we are using now sign up tags

00:03:01,200 --> 00:03:09,200
so we put the tag and we sign that

00:03:05,120 --> 00:03:12,480
and finally for each patches we merge

00:03:09,200 --> 00:03:15,280
we take the patch and we put um

00:03:12,480 --> 00:03:16,400
the description well a link to lkml

00:03:15,280 --> 00:03:18,800
giving the

00:03:16,400 --> 00:03:20,159
you can have access to the full thread

00:03:18,800 --> 00:03:23,040
for these patches

00:03:20,159 --> 00:03:23,920
and it's given in this in this form so

00:03:23,040 --> 00:03:27,760
so you have a link

00:03:23,920 --> 00:03:31,440
with the the message the url

00:03:27,760 --> 00:03:31,440
um to the to dispatch

00:03:31,519 --> 00:03:35,519
so we did on the tamar framework some

00:03:33,360 --> 00:03:36,159
cleanups first of all the enabled

00:03:35,519 --> 00:03:39,680
disabled

00:03:36,159 --> 00:03:42,159
amazon was not very well handled

00:03:39,680 --> 00:03:43,280
so we fixed that and it's visited and

00:03:42,159 --> 00:03:45,599
some code cleanup

00:03:43,280 --> 00:03:46,640
and removal of some callbacks a new

00:03:45,599 --> 00:03:49,680
callback

00:03:46,640 --> 00:03:51,170
so that reduce the complexity of the

00:03:49,680 --> 00:03:52,480
code

00:03:51,170 --> 00:03:55,360
[Music]

00:03:52,480 --> 00:03:58,000
also we remove we removed the clock

00:03:55,360 --> 00:04:01,840
cooling device because it was in use

00:03:58,000 --> 00:04:04,640
anywhere maybe by out of tree canal but

00:04:01,840 --> 00:04:06,239
we don't care they're not upstream so we

00:04:04,640 --> 00:04:11,200
remove them

00:04:06,239 --> 00:04:14,080
we remove all pointless tub we have

00:04:11,200 --> 00:04:15,920
because the main one of the main problem

00:04:14,080 --> 00:04:18,959
of the thermal framework is

00:04:15,920 --> 00:04:22,160
exporting the entire earth to

00:04:18,959 --> 00:04:25,199
all the all additional drivers

00:04:22,160 --> 00:04:26,639
and all these drivers are changing the

00:04:25,199 --> 00:04:28,000
internals of the terminal framework

00:04:26,639 --> 00:04:28,560
because they have direct access to the

00:04:28,000 --> 00:04:31,280
structure

00:04:28,560 --> 00:04:31,840
and so on so we improve the situation

00:04:31,280 --> 00:04:35,600
because

00:04:31,840 --> 00:04:37,759
it's a it's um an obstacle for us

00:04:35,600 --> 00:04:39,600
to do improvement in a timer framework

00:04:37,759 --> 00:04:42,960
as every

00:04:39,600 --> 00:04:45,680
driver are doing some crappy things

00:04:42,960 --> 00:04:48,639
with the internals so we have to do some

00:04:45,680 --> 00:04:48,639
cleanups around that

00:04:48,800 --> 00:04:54,320
also we change the governors um the way

00:04:52,400 --> 00:04:55,600
they are initialized and now they are

00:04:54,320 --> 00:04:59,120
initialized

00:04:55,600 --> 00:05:02,960
automatically and they are registered

00:04:59,120 --> 00:05:03,440
sooner and there is a plan to rework the

00:05:02,960 --> 00:05:06,800
locks

00:05:03,440 --> 00:05:10,880
on the framework because they are on

00:05:06,800 --> 00:05:13,600
using the mutex mutex is a av lock

00:05:10,880 --> 00:05:15,919
and they are taken for every changes in

00:05:13,600 --> 00:05:19,280
timer framework so

00:05:15,919 --> 00:05:25,840
we suspect we can solve that with uh

00:05:19,280 --> 00:05:29,039
spin locks and ref counting

00:05:25,840 --> 00:05:31,120
one new

00:05:29,039 --> 00:05:32,960
feature we have is the new cooling a new

00:05:31,120 --> 00:05:36,160
cooling device

00:05:32,960 --> 00:05:37,600
so in some today we have the cpu frag

00:05:36,160 --> 00:05:41,039
dvfs

00:05:37,600 --> 00:05:42,320
dbfs changes cooling device based

00:05:41,039 --> 00:05:44,479
and

00:05:42,320 --> 00:05:47,840
[Music]

00:05:44,479 --> 00:05:50,880
we can have a situation where the dvfs

00:05:47,840 --> 00:05:54,479
is not available and you need another

00:05:50,880 --> 00:05:57,120
cooling device to make sure that

00:05:54,479 --> 00:05:59,600
you will cut the the you cap the

00:05:57,120 --> 00:06:02,479
performances of the system

00:05:59,600 --> 00:06:03,440
in order to prevent this temperature to

00:06:02,479 --> 00:06:05,520
go

00:06:03,440 --> 00:06:06,880
higher and higher and higher so that

00:06:05,520 --> 00:06:10,479
happen when there is

00:06:06,880 --> 00:06:12,960
no dvfs or if the voltage domain

00:06:10,479 --> 00:06:15,120
is shared with another device so when

00:06:12,960 --> 00:06:18,160
the other device is in use and is

00:06:15,120 --> 00:06:21,360
this voltage then you cannot under volt

00:06:18,160 --> 00:06:25,039
with a dvfs and result

00:06:21,360 --> 00:06:28,960
on having this temperature increasing

00:06:25,039 --> 00:06:32,080
so some boards are not are just not

00:06:28,960 --> 00:06:34,800
working because of that and they

00:06:32,080 --> 00:06:36,080
they when they go on in a long term in a

00:06:34,800 --> 00:06:39,440
long

00:06:36,080 --> 00:06:41,919
run uh with heavy load then they

00:06:39,440 --> 00:06:42,880
they end up by rebooting because they

00:06:41,919 --> 00:06:45,919
reach this

00:06:42,880 --> 00:06:45,919
critical temperature

00:06:46,080 --> 00:06:54,319
now we provide something in order to

00:06:50,800 --> 00:06:55,120
fill this hole we have where we don't

00:06:54,319 --> 00:06:57,520
have any

00:06:55,120 --> 00:06:59,280
solution to cool down the device so now

00:06:57,520 --> 00:07:00,840
with the idler injection we can cool

00:06:59,280 --> 00:07:04,800
down the device

00:07:00,840 --> 00:07:07,599
and the advantage of this cooling device

00:07:04,800 --> 00:07:08,240
is you the dt is very flexible so you

00:07:07,599 --> 00:07:11,039
can

00:07:08,240 --> 00:07:12,479
set um this cooling device for one cpu

00:07:11,039 --> 00:07:16,160
for two cpu

00:07:12,479 --> 00:07:19,840
for all the cpus

00:07:16,160 --> 00:07:22,400
you can specify the latency so

00:07:19,840 --> 00:07:23,199
the idle state selection to do the idle

00:07:22,400 --> 00:07:26,800
injection

00:07:23,199 --> 00:07:30,960
will be uh will be influenced

00:07:26,800 --> 00:07:34,479
by this latency so you won't be choosing

00:07:30,960 --> 00:07:36,560
an idler state which is too deep

00:07:34,479 --> 00:07:37,759
also you can choose the duration of the

00:07:36,560 --> 00:07:40,800
sleep time

00:07:37,759 --> 00:07:42,639
so of course it makes more sense to put

00:07:40,800 --> 00:07:47,280
a duration which is grim

00:07:42,639 --> 00:07:50,720
at least twice the duration uh

00:07:47,280 --> 00:07:53,199
the target residency um

00:07:50,720 --> 00:07:54,160
thanks to this device the temperature in

00:07:53,199 --> 00:07:56,240
term of

00:07:54,160 --> 00:07:58,080
mitigation is much more stable so you

00:07:56,240 --> 00:08:01,360
when you reach you have a flat curve

00:07:58,080 --> 00:08:05,520
instead of having this uh

00:08:01,360 --> 00:08:08,800
saw teeth we can find with the dvfs

00:08:05,520 --> 00:08:11,759
but the drawback it

00:08:08,800 --> 00:08:12,400
they it introduces latencies on the

00:08:11,759 --> 00:08:14,080
system when

00:08:12,400 --> 00:08:16,080
you mitigate so you have to be aware of

00:08:14,080 --> 00:08:19,280
that it save

00:08:16,080 --> 00:08:22,080
save your system for the for from

00:08:19,280 --> 00:08:23,199
hard reboot but it does not it does not

00:08:22,080 --> 00:08:27,039
ensure that you have

00:08:23,199 --> 00:08:29,440
full performances just ensure you don't

00:08:27,039 --> 00:08:31,360
go through the specific temperature so

00:08:29,440 --> 00:08:34,000
it in it introduces latency when

00:08:31,360 --> 00:08:34,000
mitigating

00:08:36,159 --> 00:08:42,380
also we have today the solution

00:08:39,200 --> 00:08:44,640
to receive events from from

00:08:42,380 --> 00:08:47,120
[Music]

00:08:44,640 --> 00:08:47,920
the camera space to user space is not

00:08:47,120 --> 00:08:50,160
existing

00:08:47,920 --> 00:08:51,519
except if you create a user space

00:08:50,160 --> 00:08:53,519
governor that means

00:08:51,519 --> 00:08:56,080
you will receive all the events all the

00:08:53,519 --> 00:08:59,200
temperature but you have to

00:08:56,080 --> 00:09:02,000
mitigate the the temperature yourself

00:08:59,200 --> 00:09:02,560
so it's a choice or you receive the

00:09:02,000 --> 00:09:04,160
events

00:09:02,560 --> 00:09:07,040
but you have to mitigate the temperature

00:09:04,160 --> 00:09:09,760
there is no longer internal

00:09:07,040 --> 00:09:11,279
logic involved or you let the canal

00:09:09,760 --> 00:09:14,880
handle that but you don't receive

00:09:11,279 --> 00:09:17,680
any event that is very

00:09:14,880 --> 00:09:19,600
problematic for systems using user space

00:09:17,680 --> 00:09:20,959
demon doing dynamic temperature pole

00:09:19,600 --> 00:09:24,160
management

00:09:20,959 --> 00:09:25,200
so they need this information receiving

00:09:24,160 --> 00:09:28,800
without

00:09:25,200 --> 00:09:31,839
um having to deal with the mitigation

00:09:28,800 --> 00:09:35,279
they need to get to get the

00:09:31,839 --> 00:09:38,640
the temperature to get the the

00:09:35,279 --> 00:09:39,839
result being crossed the way they are

00:09:38,640 --> 00:09:42,480
crossed and so on

00:09:39,839 --> 00:09:43,680
so for that there is a net link

00:09:42,480 --> 00:09:46,080
framework

00:09:43,680 --> 00:09:47,040
uh the user space code is available

00:09:46,080 --> 00:09:48,959
somewhere but

00:09:47,040 --> 00:09:51,760
it's another aspect we have to merge

00:09:48,959 --> 00:09:54,000
that with the lib libenal

00:09:51,760 --> 00:09:55,279
we have three channels the first one is

00:09:54,000 --> 00:09:58,560
to discard to send

00:09:55,279 --> 00:09:59,680
discovery commands the second one if you

00:09:58,560 --> 00:10:01,519
are not interested in

00:09:59,680 --> 00:10:03,519
releasing any temperature you can

00:10:01,519 --> 00:10:05,360
receive event channel just

00:10:03,519 --> 00:10:06,640
telling you the events happening on

00:10:05,360 --> 00:10:08,640
terminal framework

00:10:06,640 --> 00:10:09,920
or if you are just interested in the

00:10:08,640 --> 00:10:11,839
temperature you can have

00:10:09,920 --> 00:10:12,959
just sampling channel and you receive

00:10:11,839 --> 00:10:14,720
the temperature

00:10:12,959 --> 00:10:16,480
if you are not interested if your

00:10:14,720 --> 00:10:17,440
interest is in both you just subscribe

00:10:16,480 --> 00:10:19,600
to both

00:10:17,440 --> 00:10:21,279
channels and you receive both

00:10:19,600 --> 00:10:24,720
information

00:10:21,279 --> 00:10:29,279
there is a detailed description

00:10:24,720 --> 00:10:31,680
of this what are providing the net links

00:10:29,279 --> 00:10:33,600
on the on the blog you can find with the

00:10:31,680 --> 00:10:35,920
tama notification of net link blog

00:10:33,600 --> 00:10:36,880
there is all the definition and the

00:10:35,920 --> 00:10:39,760
semantic of

00:10:36,880 --> 00:10:39,760
each messages

00:10:41,279 --> 00:10:46,240
also there are there are some changes in

00:10:44,160 --> 00:10:48,480
the ng model because

00:10:46,240 --> 00:10:49,360
we have the energy model but the the

00:10:48,480 --> 00:10:52,480
different

00:10:49,360 --> 00:10:54,640
cooling devices were not using this

00:10:52,480 --> 00:10:57,040
energy model to

00:10:54,640 --> 00:10:58,880
change the performance state so they

00:10:57,040 --> 00:10:59,920
were doing the same thing as the energy

00:10:58,880 --> 00:11:02,880
model

00:10:59,920 --> 00:11:03,760
so instead of duplicating the code the

00:11:02,880 --> 00:11:07,120
energy model

00:11:03,760 --> 00:11:08,959
has been merged well

00:11:07,120 --> 00:11:10,240
reused in the separate free cooling

00:11:08,959 --> 00:11:13,120
device

00:11:10,240 --> 00:11:14,000
that send up we end up to provide some

00:11:13,120 --> 00:11:16,320
changes

00:11:14,000 --> 00:11:18,240
so we have the energy model which is now

00:11:16,320 --> 00:11:20,000
in the stroke device so we can tie the

00:11:18,240 --> 00:11:21,839
energy model structure

00:11:20,000 --> 00:11:23,920
life cycle with the stroke device life

00:11:21,839 --> 00:11:26,320
cycle so it's much cleaner instead of

00:11:23,920 --> 00:11:30,000
duplicating ref counting and so on

00:11:26,320 --> 00:11:33,120
and thanks to that we have potentially

00:11:30,000 --> 00:11:36,880
the possibility to uh to provide

00:11:33,120 --> 00:11:40,079
an energy model per device

00:11:36,880 --> 00:11:40,560
and now the next step happening right

00:11:40,079 --> 00:11:43,760
now

00:11:40,560 --> 00:11:47,360
is um the same thing so

00:11:43,760 --> 00:11:49,920
using defraction separate freck

00:11:47,360 --> 00:11:52,240
cooling cooling code to come to be

00:11:49,920 --> 00:11:53,600
consolidated using the energy model and

00:11:52,240 --> 00:11:55,920
as there are there are

00:11:53,600 --> 00:11:57,040
a lot of common things between these two

00:11:55,920 --> 00:12:00,320
cooling devices

00:11:57,040 --> 00:12:03,120
it makes sense to merge somehow

00:12:00,320 --> 00:12:03,120
part of the code

00:12:05,519 --> 00:12:08,800
so the terminal framework is preventing

00:12:07,839 --> 00:12:13,440
the temperature

00:12:08,800 --> 00:12:14,320
to go above a certain limit but it does

00:12:13,440 --> 00:12:17,839
not prevent

00:12:14,320 --> 00:12:21,120
to go below and for some

00:12:17,839 --> 00:12:24,880
devices which are which are

00:12:21,120 --> 00:12:27,360
outdoor devices they are functioning

00:12:24,880 --> 00:12:28,240
during the night the temperature can

00:12:27,360 --> 00:12:32,480
decrease

00:12:28,240 --> 00:12:34,480
and then they they need to be warm up

00:12:32,480 --> 00:12:35,839
they need they need a warm-up in order

00:12:34,480 --> 00:12:39,279
to to have the

00:12:35,839 --> 00:12:41,920
silicone still functioning so here we

00:12:39,279 --> 00:12:45,360
have a silicon which is functioning

00:12:41,920 --> 00:12:47,920
below to high temperature and above

00:12:45,360 --> 00:12:49,440
too cold temperature so it's interesting

00:12:47,920 --> 00:12:51,040
we need to introduce this temperature

00:12:49,440 --> 00:12:55,279
range thing

00:12:51,040 --> 00:12:58,720
and for that we have

00:12:55,279 --> 00:13:00,959
uh devices which are increasing

00:12:58,720 --> 00:13:02,079
their performance state to warm up to

00:13:00,959 --> 00:13:05,360
eat

00:13:02,079 --> 00:13:09,120
the the system and

00:13:05,360 --> 00:13:12,800
well actually um intuitively

00:13:09,120 --> 00:13:15,360
we think that it's the mirror so

00:13:12,800 --> 00:13:16,240
we think that it's just a question of

00:13:15,360 --> 00:13:18,480
inverting

00:13:16,240 --> 00:13:20,800
doing using negative value instead of

00:13:18,480 --> 00:13:24,079
positive value and doing the

00:13:20,800 --> 00:13:26,320
split which is semantically correct but

00:13:24,079 --> 00:13:27,120
from a term of an implementation point

00:13:26,320 --> 00:13:30,560
of view

00:13:27,120 --> 00:13:33,040
that is false because we have

00:13:30,560 --> 00:13:33,760
the qs constraint putting mean and max

00:13:33,040 --> 00:13:35,680
values

00:13:33,760 --> 00:13:38,160
and that change so we need different

00:13:35,680 --> 00:13:41,120
constraints also we have

00:13:38,160 --> 00:13:43,040
the different instances of the cooling

00:13:41,120 --> 00:13:46,079
devices and warming devices

00:13:43,040 --> 00:13:48,720
so we can have one

00:13:46,079 --> 00:13:50,639
cooling device or one warming device on

00:13:48,720 --> 00:13:51,440
top of two thermal zone that can be

00:13:50,639 --> 00:13:54,800
shared

00:13:51,440 --> 00:13:58,000
across so there is an aggregation

00:13:54,800 --> 00:14:00,880
of um there is an aggregation of

00:13:58,000 --> 00:14:01,440
the the states and for that it's not so

00:14:00,880 --> 00:14:03,360
easy

00:14:01,440 --> 00:14:04,560
to do just the opposite with the warming

00:14:03,360 --> 00:14:08,720
device so it's still

00:14:04,560 --> 00:14:11,760
under description and uh well we had

00:14:08,720 --> 00:14:14,560
a long discussion at lpc

00:14:11,760 --> 00:14:16,240
we agree with the concept of forming the

00:14:14,560 --> 00:14:19,360
devices but now

00:14:16,240 --> 00:14:22,959
is a question about

00:14:19,360 --> 00:14:22,959
discussing about the implementation

00:14:23,360 --> 00:14:27,040
from the hierarchy called amazon point

00:14:26,000 --> 00:14:29,040
of view

00:14:27,040 --> 00:14:30,560
last time we presented that there were

00:14:29,040 --> 00:14:33,600
not a very big

00:14:30,560 --> 00:14:37,600
enthusiasm for this feature

00:14:33,600 --> 00:14:41,199
and that we had to

00:14:37,600 --> 00:14:43,519
think about a bit more about that so

00:14:41,199 --> 00:14:45,199
finally we come back with a proposal to

00:14:43,519 --> 00:14:46,560
use the power cut framework with the

00:14:45,199 --> 00:14:49,680
energy model

00:14:46,560 --> 00:14:51,120
so actually we think that instead of

00:14:49,680 --> 00:14:52,959
having the thermal framework to

00:14:51,120 --> 00:14:54,320
collaborate which does not really make

00:14:52,959 --> 00:14:58,240
sense because we need

00:14:54,320 --> 00:15:00,240
to have to cap the to make sure that

00:14:58,240 --> 00:15:01,760
the the device the termizon is not going

00:15:00,240 --> 00:15:04,720
above the temperature

00:15:01,760 --> 00:15:05,040
we don't have this concept of uh having

00:15:04,720 --> 00:15:08,000
an

00:15:05,040 --> 00:15:09,120
intermediate temperature so the power

00:15:08,000 --> 00:15:11,519
limiting

00:15:09,120 --> 00:15:12,160
framework power cut framework is much

00:15:11,519 --> 00:15:14,959
more

00:15:12,160 --> 00:15:15,279
adequate to do that so what we want to

00:15:14,959 --> 00:15:18,480
do

00:15:15,279 --> 00:15:21,680
is to export an api to have

00:15:18,480 --> 00:15:22,639
all the devices providing the different

00:15:21,680 --> 00:15:25,680
callbacks

00:15:22,639 --> 00:15:29,680
through this api to set power limit

00:15:25,680 --> 00:15:33,120
then use a space which is the

00:15:29,680 --> 00:15:36,800
most is the component

00:15:33,120 --> 00:15:40,959
most aware of all the stock behave

00:15:36,800 --> 00:15:41,600
can take different power limitation

00:15:40,959 --> 00:15:44,720
action

00:15:41,600 --> 00:15:47,440
on this on this tree depending

00:15:44,720 --> 00:15:48,000
on the load and depending on the kind of

00:15:47,440 --> 00:15:51,360
pattern

00:15:48,000 --> 00:15:51,360
is detecting on the system

00:15:51,839 --> 00:15:56,079
of course as we can change the power

00:15:54,320 --> 00:15:58,000
that goes

00:15:56,079 --> 00:16:00,079
somehow we can find that in the

00:15:58,000 --> 00:16:03,279
intelligent po

00:16:00,079 --> 00:16:03,920
power allocator can use this framework

00:16:03,279 --> 00:16:08,000
somehow

00:16:03,920 --> 00:16:11,440
so so we we will see how that can

00:16:08,000 --> 00:16:14,480
fit with the entire uh polar capsing if

00:16:11,440 --> 00:16:14,480
it makes sense or not

00:16:14,720 --> 00:16:18,959
okay i finished the presentation thank

00:16:17,120 --> 00:16:23,839
you if you have any question

00:16:18,959 --> 00:16:23,839

YouTube URL: https://www.youtube.com/watch?v=-pPvZQe_Sj0


