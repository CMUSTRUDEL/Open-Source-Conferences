Title: LVC20-207 Innovation Drives the Future of openEuler
Publication date: 2020-09-21
Playlist: Linaro Virtual Connect 2020
Description: 
	Chat live with the speaker of LVC20-207 in the Slack channel here: 
https://linaroconnect.slack.com/archives/C01APFU350X 
DESCRIPTION
OpenEuler is an open source, free Linux distribution platform. The platform provides an open community for global developers to build an open, diversified, and architecture-inclusive software ecosystem. OpenEuler is also an innovative platform that encourages everyone to propose new ideas, explore new approaches, and practice new solutions. The openEuler project will launch the 20.09 version in September 2020 includes a many new features. Dr Xiong Wei will introduce the new virtualization implementation platform, the new features in the iSula which is a container engine comply Open Container Initiative specification, a new project base OpenJDK and so on.
Captions: 
	00:00:02,320 --> 00:00:06,879
hello everyone

00:00:03,679 --> 00:00:08,160
uh i'm william i'm from opamulla

00:00:06,879 --> 00:00:11,360
community

00:00:08,160 --> 00:00:15,200
uh here i will give a presentation of

00:00:11,360 --> 00:00:18,640
opumla i'm very happy to give

00:00:15,200 --> 00:00:22,000
the talk in a linaro summit

00:00:18,640 --> 00:00:24,400
my topic is innovation drives the future

00:00:22,000 --> 00:00:26,800
of obama

00:00:24,400 --> 00:00:27,439
i will it's the first time for opula to

00:00:26,800 --> 00:00:30,640
present

00:00:27,439 --> 00:00:33,840
in linaro summit and i will do

00:00:30,640 --> 00:00:36,880
a rough introduction of what opengla

00:00:33,840 --> 00:00:40,640
is and why we build upon our project

00:00:36,880 --> 00:00:44,000
and i will give some introduction of

00:00:40,640 --> 00:00:47,360
projects opala have

00:00:44,000 --> 00:00:50,640
and finally welcome to anyone to

00:00:47,360 --> 00:00:53,840
join to the ohola and i believe

00:00:50,640 --> 00:00:54,879
opamulla can work with linado linaro

00:00:53,840 --> 00:01:00,960
together

00:00:54,879 --> 00:01:00,960
to build the um 64 uh ecosystem together

00:01:01,359 --> 00:01:09,040
okay first on first one is why

00:01:04,799 --> 00:01:12,479
opela there are a lot of you know

00:01:09,040 --> 00:01:13,280
os community of the world why we build

00:01:12,479 --> 00:01:15,600
another

00:01:13,280 --> 00:01:16,880
community i think there are several

00:01:15,600 --> 00:01:19,920
reasons

00:01:16,880 --> 00:01:20,960
the first one is we may need to make a

00:01:19,920 --> 00:01:23,680
new technology

00:01:20,960 --> 00:01:24,799
and the features more accessible to the

00:01:23,680 --> 00:01:27,360
end user

00:01:24,799 --> 00:01:30,479
and secondly we want to provide a

00:01:27,360 --> 00:01:33,600
unified platform to support

00:01:30,479 --> 00:01:34,640
system and ecosystem from iot to the

00:01:33,600 --> 00:01:37,920
cloud

00:01:34,640 --> 00:01:40,960
and the third one is we want to do

00:01:37,920 --> 00:01:43,920
some exploration of

00:01:40,960 --> 00:01:45,840
uh to change the os platform to make the

00:01:43,920 --> 00:01:49,280
os maybe easier and

00:01:45,840 --> 00:01:51,119
more secure to do some you know research

00:01:49,280 --> 00:01:55,280
job

00:01:51,119 --> 00:01:58,240
okay let's move on to the reason one

00:01:55,280 --> 00:01:58,960
we want to deliver a new new feature to

00:01:58,240 --> 00:02:03,439
any user

00:01:58,960 --> 00:02:03,439
faster and easier uh

00:02:03,520 --> 00:02:08,319
if we want to release some chipset after

00:02:06,240 --> 00:02:12,239
chipset is released

00:02:08,319 --> 00:02:15,599
we have to provide the patch or features

00:02:12,239 --> 00:02:18,160
to the upstream community and after

00:02:15,599 --> 00:02:19,760
those features and the packs accepted

00:02:18,160 --> 00:02:23,200
are murdered by the

00:02:19,760 --> 00:02:23,920
community and the osv will pull them

00:02:23,200 --> 00:02:27,200
down

00:02:23,920 --> 00:02:31,200
and integrate into their release

00:02:27,200 --> 00:02:33,760
so this is the regular uh process but

00:02:31,200 --> 00:02:34,239
during those process it may last several

00:02:33,760 --> 00:02:37,760
months

00:02:34,239 --> 00:02:40,800
or even over one year it's not

00:02:37,760 --> 00:02:43,120
short time for os we

00:02:40,800 --> 00:02:45,680
the commercial os vendor i think it's

00:02:43,120 --> 00:02:49,200
reasonable because

00:02:45,680 --> 00:02:52,319
os we need to make sure the product

00:02:49,200 --> 00:02:56,959
is stable enough but can we

00:02:52,319 --> 00:03:00,000
make things better to improve this

00:02:56,959 --> 00:03:03,040
okay let's check out uh how

00:03:00,000 --> 00:03:06,640
opolar make a try

00:03:03,040 --> 00:03:11,040
we how how we uh want to try to

00:03:06,640 --> 00:03:14,959
fix the the issue openly has a main line

00:03:11,040 --> 00:03:18,000
and we have two kind of uh version

00:03:14,959 --> 00:03:21,200
the first one is the the first release

00:03:18,000 --> 00:03:23,920
is the the we call it

00:03:21,200 --> 00:03:24,879
community release or innovation release

00:03:23,920 --> 00:03:28,560
the second one

00:03:24,879 --> 00:03:31,920
is we will provide rps

00:03:28,560 --> 00:03:34,560
release based on the innovation release

00:03:31,920 --> 00:03:37,680
rts means long-term

00:03:34,560 --> 00:03:41,040
service support

00:03:37,680 --> 00:03:44,319
for the community release we will

00:03:41,040 --> 00:03:48,480
release twice per year

00:03:44,319 --> 00:03:51,840
and the community release will sustain

00:03:48,480 --> 00:03:55,840
uh for one year and

00:03:51,840 --> 00:03:58,959
for the rts version we will release

00:03:55,840 --> 00:04:02,319
the rts release release

00:03:58,959 --> 00:04:05,840
for two years so we can

00:04:02,319 --> 00:04:09,200
the first release is that rts release is

00:04:05,840 --> 00:04:12,319
in this year and the next

00:04:09,200 --> 00:04:15,840
release will be the 2022

00:04:12,319 --> 00:04:20,000
and for the rts version release

00:04:15,840 --> 00:04:21,200
we will maintain uh for uh 60 years

00:04:20,000 --> 00:04:23,199
so i think it's a

00:04:21,200 --> 00:04:25,840
[Music]

00:04:23,199 --> 00:04:27,440
time long long longer enough for the

00:04:25,840 --> 00:04:30,960
commercial

00:04:27,440 --> 00:04:34,560
users and for the osv

00:04:30,960 --> 00:04:40,560
we hope the osv can

00:04:34,560 --> 00:04:40,560
produce their product based on the rts

00:04:41,280 --> 00:04:46,720
this is the regular uh roadmap and

00:04:44,479 --> 00:04:48,080
from the roadmap you can see you know

00:04:46,720 --> 00:04:51,759
it's not easy to

00:04:48,080 --> 00:04:52,800
develop uh os especially for the

00:04:51,759 --> 00:04:56,240
commercial

00:04:52,800 --> 00:05:00,240
os so that is why we want to

00:04:56,240 --> 00:05:04,639
make the os development more easier

00:05:00,240 --> 00:05:04,639
especially for the rm64 ecosystem

00:05:04,720 --> 00:05:08,720
and the second one is openly is more

00:05:07,680 --> 00:05:12,080
aggressive

00:05:08,720 --> 00:05:15,199
in technology and release policy

00:05:12,080 --> 00:05:18,240
we will have more the first one is we

00:05:15,199 --> 00:05:21,759
will have more aggressive release cycle

00:05:18,240 --> 00:05:24,880
so uh you we will check

00:05:21,759 --> 00:05:27,520
for the for the last bit i gave out

00:05:24,880 --> 00:05:29,520
the release cycle you can see we will

00:05:27,520 --> 00:05:32,720
release the lts

00:05:29,520 --> 00:05:36,240
uh two year so

00:05:32,720 --> 00:05:40,000
that cycle will the opponent

00:05:36,240 --> 00:05:43,759
easily to use the latest kernel

00:05:40,000 --> 00:05:47,759
we can catch up the latest community

00:05:43,759 --> 00:05:51,520
release to keep sync up with the latest

00:05:47,759 --> 00:05:54,560
upstream so that will help our

00:05:51,520 --> 00:05:58,080
customers to adopt their new technology

00:05:54,560 --> 00:06:01,280
and the second rule is upstream first

00:05:58,080 --> 00:06:02,240
anything we have done will contribute to

00:06:01,280 --> 00:06:06,240
the upstream

00:06:02,240 --> 00:06:06,800
community first but if some features or

00:06:06,240 --> 00:06:10,639
parts

00:06:06,800 --> 00:06:14,160
are not easy we accept

00:06:10,639 --> 00:06:17,120
for the upstream community

00:06:14,160 --> 00:06:18,319
we are open quite open to use those new

00:06:17,120 --> 00:06:21,039
features

00:06:18,319 --> 00:06:21,680
so we will keep the balance between the

00:06:21,039 --> 00:06:24,800
uh

00:06:21,680 --> 00:06:28,400
the the quality and the

00:06:24,800 --> 00:06:28,800
the technology uh risk so that is the

00:06:28,400 --> 00:06:32,000
two

00:06:28,800 --> 00:06:35,520
uh i mean uh uh

00:06:32,000 --> 00:06:38,720
things we want to focus

00:06:35,520 --> 00:06:42,400
okay let's move on to the reason two uh

00:06:38,720 --> 00:06:44,560
arm is used from iot to cloud but the os

00:06:42,400 --> 00:06:47,759
is not you know arm is a

00:06:44,560 --> 00:06:49,360
dominant in iot or at computing or

00:06:47,759 --> 00:06:53,680
something like that the embedded

00:06:49,360 --> 00:06:56,880
system and the um is moving to the cloud

00:06:53,680 --> 00:06:58,000
quickly but the os vendor is quite

00:06:56,880 --> 00:07:00,880
different

00:06:58,000 --> 00:07:03,680
for the embedded system we have some os

00:07:00,880 --> 00:07:07,919
vendor for example the vulnerability

00:07:03,680 --> 00:07:11,360
company and for the server

00:07:07,919 --> 00:07:13,120
industry we have centos red hat susie or

00:07:11,360 --> 00:07:16,160
emanuel or something like that

00:07:13,120 --> 00:07:19,759
it's quite different so is it impossible

00:07:16,160 --> 00:07:22,240
for us to build a unified

00:07:19,759 --> 00:07:23,520
platform to meet all of those kind of

00:07:22,240 --> 00:07:26,880
scenarios

00:07:23,520 --> 00:07:28,240
uh if we don't have this kind of

00:07:26,880 --> 00:07:31,840
platform

00:07:28,240 --> 00:07:34,319
for developers uh although they

00:07:31,840 --> 00:07:35,840
build the application for arm but a

00:07:34,319 --> 00:07:38,880
different os will

00:07:35,840 --> 00:07:42,400
still have some a lot of difference

00:07:38,880 --> 00:07:45,840
so it's not easy for the developer to

00:07:42,400 --> 00:07:49,440
migrate between the different os

00:07:45,840 --> 00:07:50,240
so our idea is we worked with osv

00:07:49,440 --> 00:07:53,360
together

00:07:50,240 --> 00:07:56,720
to build a unified base

00:07:53,360 --> 00:08:00,160
os base in china we have

00:07:56,720 --> 00:08:03,440
worked with several major players in os

00:08:00,160 --> 00:08:05,280
and we uh work together to define what

00:08:03,440 --> 00:08:08,720
open world should be like

00:08:05,280 --> 00:08:11,520
and what opela the interface

00:08:08,720 --> 00:08:12,879
need to provide and we unify the

00:08:11,520 --> 00:08:16,800
interface

00:08:12,879 --> 00:08:19,520
so all of the osv will

00:08:16,800 --> 00:08:21,039
produce their commercial product based

00:08:19,520 --> 00:08:23,039
on opamula

00:08:21,039 --> 00:08:24,240
so that means for the end user or

00:08:23,039 --> 00:08:27,280
developer

00:08:24,240 --> 00:08:29,599
although they may use different uh

00:08:27,280 --> 00:08:30,400
you know product the commercial product

00:08:29,599 --> 00:08:32,959
but they

00:08:30,400 --> 00:08:33,680
share the same interface and share the

00:08:32,959 --> 00:08:37,039
same uh

00:08:33,680 --> 00:08:37,919
environment so it's simplify the

00:08:37,039 --> 00:08:40,959
development and

00:08:37,919 --> 00:08:45,040
use it for the end user so

00:08:40,959 --> 00:08:48,399
i'm very happy that this job

00:08:45,040 --> 00:08:51,519
is working on the progress and those are

00:08:48,399 --> 00:08:54,560
osv they are very uh

00:08:51,519 --> 00:08:58,320
we work together very well and

00:08:54,560 --> 00:09:01,760
secondly uh i think we need a solution

00:08:58,320 --> 00:09:06,480
that can help iot and the cloud

00:09:01,760 --> 00:09:10,080
to share the same infra infrastructure

00:09:06,480 --> 00:09:13,360
you know uh for the

00:09:10,080 --> 00:09:14,320
for the system i.t system we need to

00:09:13,360 --> 00:09:17,040
visualization

00:09:14,320 --> 00:09:17,680
and container those are two parts are

00:09:17,040 --> 00:09:21,360
the

00:09:17,680 --> 00:09:25,120
the the major part of the the it

00:09:21,360 --> 00:09:28,880
base so for the virtualization

00:09:25,120 --> 00:09:31,920
we start a project named stratwork

00:09:28,880 --> 00:09:35,680
this is a totally new

00:09:31,920 --> 00:09:38,959
virtualization platform it's similar as

00:09:35,680 --> 00:09:39,600
cumule but we use rust language to

00:09:38,959 --> 00:09:42,399
rewrite

00:09:39,600 --> 00:09:44,000
the whole system and remove a lot of

00:09:42,399 --> 00:09:47,839
unnecessary parts of

00:09:44,000 --> 00:09:51,040
cumule and make keep the strata world

00:09:47,839 --> 00:09:53,680
to be light and faster

00:09:51,040 --> 00:09:54,320
and for the container we develop a

00:09:53,680 --> 00:09:57,440
project

00:09:54,320 --> 00:10:00,880
named isola it's

00:09:57,440 --> 00:10:03,839
also used use the language as c

00:10:00,880 --> 00:10:05,440
and the rust to rewrite the container

00:10:03,839 --> 00:10:08,800
environment

00:10:05,440 --> 00:10:09,600
also the target is to make the system to

00:10:08,800 --> 00:10:14,399
be

00:10:09,600 --> 00:10:18,320
light and faster and secure

00:10:14,399 --> 00:10:21,839
so if we have this kind of two

00:10:18,320 --> 00:10:25,360
uh uh software we can

00:10:21,839 --> 00:10:28,560
provide a unified uh id

00:10:25,360 --> 00:10:32,079
base from iot to iot cloud

00:10:28,560 --> 00:10:35,279
either computing or even cloud and

00:10:32,079 --> 00:10:35,839
all of those software will conform to

00:10:35,279 --> 00:10:39,120
the

00:10:35,839 --> 00:10:43,440
industry standard for example uh for

00:10:39,120 --> 00:10:47,360
asula we conform to the oci container

00:10:43,440 --> 00:10:48,240
standard and we also conform to the cri

00:10:47,360 --> 00:10:51,440
standard

00:10:48,240 --> 00:10:53,519
so that means if we want to integrate

00:10:51,440 --> 00:10:54,800
isola into the cloud native or

00:10:53,519 --> 00:10:58,320
kubernetes

00:10:54,800 --> 00:10:58,320
environment it's very easy

00:10:58,399 --> 00:11:04,880
okay uh and uh uh

00:11:01,440 --> 00:11:05,519
we have released sliding open overlap

00:11:04,880 --> 00:11:08,560
community

00:11:05,519 --> 00:11:12,399
and we will release a strategy word

00:11:08,560 --> 00:11:15,680
by the end of this month so i can

00:11:12,399 --> 00:11:19,200
welcome i want to check them out

00:11:15,680 --> 00:11:22,880
and make some try

00:11:19,200 --> 00:11:26,839
okay for the reason 3 we need to make os

00:11:22,880 --> 00:11:29,920
easier to use general speaking i.t

00:11:26,839 --> 00:11:32,800
infrastructure is complicated

00:11:29,920 --> 00:11:34,959
it's not easy to upgrade optimize and

00:11:32,800 --> 00:11:38,079
make the system as secure

00:11:34,959 --> 00:11:42,320
so uh opela can open

00:11:38,079 --> 00:11:45,200
up provide some tools to help

00:11:42,320 --> 00:11:46,320
to make those difficulties to be easier

00:11:45,200 --> 00:11:48,640
so that is a

00:11:46,320 --> 00:11:51,680
i think a very interesting topic we want

00:11:48,640 --> 00:11:55,760
to discuss in the community

00:11:51,680 --> 00:11:59,120
okay let's uh for the open log

00:11:55,760 --> 00:12:02,560
community we welcome any idea

00:11:59,120 --> 00:12:04,720
until now we will focus on three

00:12:02,560 --> 00:12:06,800
directions the first one is secure the

00:12:04,720 --> 00:12:09,120
second one is the cloud native

00:12:06,800 --> 00:12:11,920
the third one is you know i want to make

00:12:09,120 --> 00:12:16,320
a thing to be easy to use

00:12:11,920 --> 00:12:20,240
so uh if you you have any idea which

00:12:16,320 --> 00:12:23,040
can help us to reach those goals we will

00:12:20,240 --> 00:12:23,040
very well come

00:12:23,360 --> 00:12:26,800
uh let's move on to the first one the

00:12:25,519 --> 00:12:30,800
security

00:12:26,800 --> 00:12:34,240
for security we have uh several projects

00:12:30,800 --> 00:12:37,920
and the first one we will release

00:12:34,240 --> 00:12:39,600
by the end of this month is the cloud

00:12:37,920 --> 00:12:42,399
enclave

00:12:39,600 --> 00:12:43,880
uh you know cloud enclave is designed to

00:12:42,399 --> 00:12:46,639
meet the requirement of

00:12:43,880 --> 00:12:48,480
confidential computing now confidential

00:12:46,639 --> 00:12:51,680
computing is more and more

00:12:48,480 --> 00:12:54,880
popular in the industry and

00:12:51,680 --> 00:12:57,839
but uh the problem for the

00:12:54,880 --> 00:12:58,880
confidential computing is it's not easy

00:12:57,839 --> 00:13:03,200
it's very difficult

00:12:58,880 --> 00:13:07,839
to to develop this kind of software

00:13:03,200 --> 00:13:11,120
so cloud enclave provide a

00:13:07,839 --> 00:13:14,160
middleware to simplify those

00:13:11,120 --> 00:13:17,360
job the whole software device

00:13:14,160 --> 00:13:20,240
is divided into three layers

00:13:17,360 --> 00:13:21,279
the bottom layer is the base layer the

00:13:20,240 --> 00:13:24,320
base layer

00:13:21,279 --> 00:13:26,320
you know covered the different hardware

00:13:24,320 --> 00:13:28,639
the difference between uh among the

00:13:26,320 --> 00:13:31,040
different hardware facilities

00:13:28,639 --> 00:13:31,920
you know uh for the comp by central

00:13:31,040 --> 00:13:35,519
computing

00:13:31,920 --> 00:13:36,720
uh different hardware vendors provide a

00:13:35,519 --> 00:13:40,000
quite different uh

00:13:36,720 --> 00:13:42,959
you know mechanism intel provider sjx

00:13:40,000 --> 00:13:44,079
uh um provider trust zone and the risk

00:13:42,959 --> 00:13:48,000
file maybe have

00:13:44,079 --> 00:13:49,600
the clean stone so if you have want to

00:13:48,000 --> 00:13:52,959
develop some

00:13:49,600 --> 00:13:56,399
software uh you need to

00:13:52,959 --> 00:13:56,880
you know to handle different sdks at

00:13:56,399 --> 00:14:00,560
different

00:13:56,880 --> 00:14:04,480
interfaces so the base layer will cover

00:14:00,560 --> 00:14:07,440
those difference the middle layer will

00:14:04,480 --> 00:14:08,160
have an abstract abstraction interface

00:14:07,440 --> 00:14:12,000
to help

00:14:08,160 --> 00:14:15,279
the customer to easily develop software

00:14:12,000 --> 00:14:17,839
and on top of these two layers there

00:14:15,279 --> 00:14:18,800
are the service layer the service layer

00:14:17,839 --> 00:14:21,839
will

00:14:18,800 --> 00:14:24,720
you know to provide some

00:14:21,839 --> 00:14:25,839
service interface to make the customer

00:14:24,720 --> 00:14:28,880
easily to differ

00:14:25,839 --> 00:14:30,240
to develop different services for

00:14:28,880 --> 00:14:33,040
example

00:14:30,240 --> 00:14:33,920
based on cloud and playable you can

00:14:33,040 --> 00:14:38,160
develop

00:14:33,920 --> 00:14:42,639
the kms service very easily

00:14:38,160 --> 00:14:45,920
on top of trial zone and also you can

00:14:42,639 --> 00:14:47,040
to build a blockchain service you can

00:14:45,920 --> 00:14:50,160
provide

00:14:47,040 --> 00:14:51,120
the the the secure database service or

00:14:50,160 --> 00:14:55,120
something like that

00:14:51,120 --> 00:14:58,079
we we provide the very easily

00:14:55,120 --> 00:14:59,680
used interface so there are two targets

00:14:58,079 --> 00:15:02,399
the first one is

00:14:59,680 --> 00:15:02,800
we want to build a unified and easy to

00:15:02,399 --> 00:15:06,079
use

00:15:02,800 --> 00:15:08,320
interfaces for the application developer

00:15:06,079 --> 00:15:09,519
the second one is we want to isolate a

00:15:08,320 --> 00:15:12,639
developer from

00:15:09,519 --> 00:15:13,279
complicated hardware details and handled

00:15:12,639 --> 00:15:16,399
the different

00:15:13,279 --> 00:15:19,519
sdks uh so by the end of

00:15:16,399 --> 00:15:22,079
this month uh we will put

00:15:19,519 --> 00:15:24,880
the code on the openweb community so

00:15:22,079 --> 00:15:27,360
welcome anyone to to check them out

00:15:24,880 --> 00:15:28,800
and to develop the confidential

00:15:27,360 --> 00:15:32,000
computing based on

00:15:28,800 --> 00:15:35,120
cloud enclave okay

00:15:32,000 --> 00:15:38,720
let's move on the second one

00:15:35,120 --> 00:15:41,759
the directory is the cloud native os

00:15:38,720 --> 00:15:44,880
you know and you know all of the os is

00:15:41,759 --> 00:15:48,240
uh composed by rpm

00:15:44,880 --> 00:15:52,000
or the db durbin uh packages

00:15:48,240 --> 00:15:54,639
so uh os is composed

00:15:52,000 --> 00:15:55,680
by you know thousands of different kind

00:15:54,639 --> 00:15:58,720
of rpms

00:15:55,680 --> 00:16:01,120
but our cam is not easy to manage

00:15:58,720 --> 00:16:03,839
management it's not easy to upgrade a

00:16:01,120 --> 00:16:07,279
downgrade or something like that

00:16:03,839 --> 00:16:11,360
so we can bring the idea from

00:16:07,279 --> 00:16:14,480
from container so is it possible

00:16:11,360 --> 00:16:17,839
for us to put os itself

00:16:14,480 --> 00:16:19,360
into a container image so if we can do

00:16:17,839 --> 00:16:22,160
so

00:16:19,360 --> 00:16:22,720
uh we can imagine when we want to

00:16:22,160 --> 00:16:26,800
upgrade

00:16:22,720 --> 00:16:30,639
os it means just replace

00:16:26,800 --> 00:16:34,480
a container image other than

00:16:30,639 --> 00:16:38,160
yam install a lot of software rpms

00:16:34,480 --> 00:16:39,440
to make the see the system uh easier to

00:16:38,160 --> 00:16:42,639
maintain

00:16:39,440 --> 00:16:43,680
so this is the first uh thing we want to

00:16:42,639 --> 00:16:46,880
do

00:16:43,680 --> 00:16:50,160
the second one is

00:16:46,880 --> 00:16:50,800
there are a lot of system series system

00:16:50,160 --> 00:16:54,079
daemon

00:16:50,800 --> 00:16:57,600
on linux system

00:16:54,079 --> 00:17:00,720
but if we consider the system

00:16:57,600 --> 00:17:04,480
running in the you know cloud

00:17:00,720 --> 00:17:07,600
in the cloud native scenario we have

00:17:04,480 --> 00:17:10,319
a lot of network uh the cloud service

00:17:07,600 --> 00:17:11,120
we can use we do not need to put

00:17:10,319 --> 00:17:14,319
everything

00:17:11,120 --> 00:17:17,360
on the os service for example

00:17:14,319 --> 00:17:19,760
a lot of cloud environment provider log

00:17:17,360 --> 00:17:23,360
service

00:17:19,760 --> 00:17:26,559
and also os has its own

00:17:23,360 --> 00:17:30,640
log service can we offload

00:17:26,559 --> 00:17:34,160
the local log service to the cloud

00:17:30,640 --> 00:17:38,000
this is a very interesting question and

00:17:34,160 --> 00:17:43,120
in the same way can we offload the audit

00:17:38,000 --> 00:17:43,120
service to the cloud so

00:17:43,200 --> 00:17:47,520
no matter we put the os into a container

00:17:47,120 --> 00:17:50,880
or

00:17:47,520 --> 00:17:52,000
we offload some system service to the

00:17:50,880 --> 00:17:55,200
cloud

00:17:52,000 --> 00:17:56,400
the total idea is to we want to make the

00:17:55,200 --> 00:17:59,760
os

00:17:56,400 --> 00:18:02,160
simpler than complicated so that's a

00:17:59,760 --> 00:18:05,200
very interesting

00:18:02,160 --> 00:18:08,880
topic we want to discuss

00:18:05,200 --> 00:18:12,080
in the future and we we are working on

00:18:08,880 --> 00:18:15,120
some prototype and we hope

00:18:12,080 --> 00:18:16,320
we can release the prototype in uh in

00:18:15,120 --> 00:18:19,600
next year

00:18:16,320 --> 00:18:24,000
so if anyone uh get interested

00:18:19,600 --> 00:18:28,559
in this direction we welcome join to the

00:18:24,000 --> 00:18:29,280
committee we discuss together okay let's

00:18:28,559 --> 00:18:32,480
move on

00:18:29,280 --> 00:18:35,679
to the easy to use uh one of

00:18:32,480 --> 00:18:38,400
open last targeted to we want

00:18:35,679 --> 00:18:39,679
you uh to try to make the os to be easy

00:18:38,400 --> 00:18:44,880
to use

00:18:39,679 --> 00:18:47,919
uh here we set up a project named atun

00:18:44,880 --> 00:18:52,240
the target is to make the performance

00:18:47,919 --> 00:18:52,240
tuning easier you know

00:18:52,640 --> 00:18:56,000
when application vendors they want to

00:18:55,679 --> 00:18:59,520
use

00:18:56,000 --> 00:19:01,440
the os the the software from the os

00:18:59,520 --> 00:19:02,799
to the application will be very the

00:19:01,440 --> 00:19:07,200
software stack is very

00:19:02,799 --> 00:19:09,360
heavy it includes maybe

00:19:07,200 --> 00:19:10,960
the database the middleware the

00:19:09,360 --> 00:19:13,440
applications

00:19:10,960 --> 00:19:14,559
so the performance tuning will be a very

00:19:13,440 --> 00:19:17,280
hard job

00:19:14,559 --> 00:19:17,919
it needs a very professional engineer to

00:19:17,280 --> 00:19:21,360
do so and

00:19:17,919 --> 00:19:24,480
spend a lot of time so can we

00:19:21,360 --> 00:19:27,760
provide some way some

00:19:24,480 --> 00:19:30,480
tools to simplify this job

00:19:27,760 --> 00:19:32,400
here we provide the two we make a trial

00:19:30,480 --> 00:19:36,320
we build a software

00:19:32,400 --> 00:19:39,760
e-tune it's a ai based

00:19:36,320 --> 00:19:42,640
tuning job it help it helps

00:19:39,760 --> 00:19:43,760
the customer the use the developer to

00:19:42,640 --> 00:19:47,120
modeling

00:19:43,760 --> 00:19:48,799
uh to build the model of your system and

00:19:47,120 --> 00:19:51,840
to do some uh

00:19:48,799 --> 00:19:52,720
ai tuning job and to collect the

00:19:51,840 --> 00:19:55,919
information

00:19:52,720 --> 00:19:56,799
and to do the anal slice and give some

00:19:55,919 --> 00:20:00,480
suggestion

00:19:56,799 --> 00:20:02,080
for for the parameters value or

00:20:00,480 --> 00:20:05,200
something like that

00:20:02,080 --> 00:20:08,000
we do some tests on different

00:20:05,200 --> 00:20:09,200
scenario for example the database the

00:20:08,000 --> 00:20:13,280
web service

00:20:09,200 --> 00:20:13,280
the big data or something like that

00:20:14,960 --> 00:20:18,000
the different scenario will have been

00:20:17,440 --> 00:20:21,919
different

00:20:18,000 --> 00:20:25,120
you know result uh some in some scenario

00:20:21,919 --> 00:20:28,320
we can get a very good uh

00:20:25,120 --> 00:20:31,600
result uh the increa the performance

00:20:28,320 --> 00:20:32,400
can be increased over 50 percent over

00:20:31,600 --> 00:20:35,440
one night

00:20:32,400 --> 00:20:37,120
you know we deployed the software in the

00:20:35,440 --> 00:20:39,840
environment and around

00:20:37,120 --> 00:20:41,200
after the night and the in the morning

00:20:39,840 --> 00:20:43,440
we can get a result

00:20:41,200 --> 00:20:45,200
uh it will save a lot of you know human

00:20:43,440 --> 00:20:48,720
beings liver

00:20:45,200 --> 00:20:51,760
because this is uh yeah they are tuning

00:20:48,720 --> 00:20:55,120
uh too okay uh

00:20:51,760 --> 00:20:58,480
um it's very close to the end of

00:20:55,120 --> 00:21:00,480
the speech and uh finally uh welcome to

00:20:58,480 --> 00:21:02,880
john o'connell community

00:21:00,480 --> 00:21:04,480
the process is very simple uh just

00:21:02,880 --> 00:21:07,520
assign the theory

00:21:04,480 --> 00:21:10,240
and to join the uh

00:21:07,520 --> 00:21:11,880
seek the special into the group we have

00:21:10,240 --> 00:21:14,240
over

00:21:11,880 --> 00:21:18,080
76 until now

00:21:14,240 --> 00:21:21,280
it covers the different parts of the os

00:21:18,080 --> 00:21:21,600
and in the community you can assign use

00:21:21,280 --> 00:21:24,640
you

00:21:21,600 --> 00:21:27,360
to fire you you can get the build

00:21:24,640 --> 00:21:29,039
and the development environment and you

00:21:27,360 --> 00:21:32,240
can contribute the code

00:21:29,039 --> 00:21:35,280
and reveal code and

00:21:32,240 --> 00:21:36,960
to take part in the community activities

00:21:35,280 --> 00:21:39,200
and it's something like that

00:21:36,960 --> 00:21:40,559
so the community is very open to to

00:21:39,200 --> 00:21:44,240
anyone to any

00:21:40,559 --> 00:21:47,120
company to any developers

00:21:44,240 --> 00:21:47,120
or something like that

00:21:47,360 --> 00:21:54,240
okay here is the address

00:21:50,960 --> 00:21:57,679
the ur you can check

00:21:54,240 --> 00:22:00,640
the address and to find out

00:21:57,679 --> 00:22:01,440
the code to find out the documents and

00:22:00,640 --> 00:22:04,480
to join

00:22:01,440 --> 00:22:07,360
the community uh if you have any

00:22:04,480 --> 00:22:09,039
problem with welcome to to discuss in

00:22:07,360 --> 00:22:12,320
the community

00:22:09,039 --> 00:22:15,679
and finally i open ola

00:22:12,320 --> 00:22:16,640
will work with the linaro we have set up

00:22:15,679 --> 00:22:20,080
the links

00:22:16,640 --> 00:22:22,960
and and also uh i think we

00:22:20,080 --> 00:22:23,679
both side can now work together to

00:22:22,960 --> 00:22:26,720
promote

00:22:23,679 --> 00:22:29,360
the arms for uh ecosystem

00:22:26,720 --> 00:22:31,200
that is the very very important target

00:22:29,360 --> 00:22:33,600
for the opela

00:22:31,200 --> 00:22:34,480
community i think we share the same

00:22:33,600 --> 00:22:37,760
target for

00:22:34,480 --> 00:22:40,880
both parts

00:22:37,760 --> 00:22:41,760
okay thank you uh here is the end of the

00:22:40,880 --> 00:22:45,280
speech

00:22:41,760 --> 00:22:48,640
so finally uh welcome to uh

00:22:45,280 --> 00:22:51,840
uh to to open ola and we

00:22:48,640 --> 00:22:55,919
are eager to work with inaro

00:22:51,840 --> 00:22:59,840
together to build the um ecosystem

00:22:55,919 --> 00:23:03,120
welcome to any suggestion of the issue

00:22:59,840 --> 00:23:09,840
or any development work

00:23:03,120 --> 00:23:09,840

YouTube URL: https://www.youtube.com/watch?v=ioWVY3jTaPo


