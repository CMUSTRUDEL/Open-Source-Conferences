Title: LVC20 217 Open Source License Compliance with Yocto Project
Publication date: 2020-10-08
Playlist: Linaro Virtual Connect 2020
Description: 
	Open Source license compliance is a concern for any company which distributes systems containing the Linux kernel and other copyleft-licensed components. The Yocto Project, a widely used Embedded Linux toolkit including the OpenEmbedded build system, contains many tools to help companies achieve license compliance. Output from a Yocto Project build can also be fed into other license compliance software such as Fossology. In this talk Paul will explore these tools, address how best to configure & connect them and discuss current best practices. Paul will explore how modern programming languages such as Go, Javascript and Rust cause license compliance headaches due to their separate package managers and how to resolve these issues. He will show how to handle common concerns such as commercially licensed media codecs and GPLv3 licensed software components. He will also bring the audience up to date with the latest developments and ongoing work in this area of the Yocto Project.

This talk will cover technical best practices and available tools, it will not give legal advice.

https://connect.linaro.org/resources/lvc20/lvc20-217/
Captions: 
	00:00:00,080 --> 00:00:04,000
um yes so first of all i want to invite

00:00:03,280 --> 00:00:08,480
everyone

00:00:04,000 --> 00:00:11,679
to join the slack channel for this

00:00:08,480 --> 00:00:12,880
talk i'll be keeping that open to see

00:00:11,679 --> 00:00:16,640
any questions

00:00:12,880 --> 00:00:17,600
um i probably won't follow the questions

00:00:16,640 --> 00:00:20,960
in

00:00:17,600 --> 00:00:23,760
zoom or on youtube um i'm

00:00:20,960 --> 00:00:26,080
not intending this to be the most

00:00:23,760 --> 00:00:27,920
perfectly scripted start to finish talk

00:00:26,080 --> 00:00:30,480
um so yeah if you've got any questions

00:00:27,920 --> 00:00:33,600
post them in slack i'll

00:00:30,480 --> 00:00:36,480
try and get to them so yeah

00:00:33,600 --> 00:00:37,920
thank you very much for joining me today

00:00:36,480 --> 00:00:40,000
i'm going to talk to you about open

00:00:37,920 --> 00:00:45,039
source license compliance

00:00:40,000 --> 00:00:47,280
with the octoproject

00:00:45,039 --> 00:00:49,039
so yeah a little introduction about me

00:00:47,280 --> 00:00:50,559
i've been involved in the octa project

00:00:49,039 --> 00:00:54,480
since around

00:00:50,559 --> 00:00:57,520
2013 i work across the whole

00:00:54,480 --> 00:00:58,879
embedded software stack um mostly sort

00:00:57,520 --> 00:01:00,719
of single board

00:00:58,879 --> 00:01:02,559
computers helping out hardware vendors

00:01:00,719 --> 00:01:05,119
with their yocto project

00:01:02,559 --> 00:01:05,680
support and i'm currently principal

00:01:05,119 --> 00:01:08,799
engineer

00:01:05,680 --> 00:01:11,360
at consortco group providing those

00:01:08,799 --> 00:01:12,080
services to clients and there's some

00:01:11,360 --> 00:01:15,360
contact

00:01:12,080 --> 00:01:17,040
information on this slide

00:01:15,360 --> 00:01:18,560
so we've got to start with a bit of a

00:01:17,040 --> 00:01:21,439
disclaimer since we're talking about

00:01:18,560 --> 00:01:22,000
license compliance nothing i say in this

00:01:21,439 --> 00:01:25,200
talk

00:01:22,000 --> 00:01:25,600
is legal advice what i'm trying to give

00:01:25,200 --> 00:01:29,600
you

00:01:25,600 --> 00:01:32,479
is best practices based on my experience

00:01:29,600 --> 00:01:34,479
developer my experience as a member of

00:01:32,479 --> 00:01:38,000
open source communities

00:01:34,479 --> 00:01:42,240
and if any doubts on any of this

00:01:38,000 --> 00:01:44,720
consult an appropriate lawyer

00:01:42,240 --> 00:01:45,759
so this talk um i'm going to give a bit

00:01:44,720 --> 00:01:48,640
of an introduction

00:01:45,759 --> 00:01:50,960
talk to you about license compliance the

00:01:48,640 --> 00:01:53,520
octoproject the tools that we've got

00:01:50,960 --> 00:01:54,560
provide a bit of a brief overview for

00:01:53,520 --> 00:01:57,759
those who may not be

00:01:54,560 --> 00:01:58,479
very familiar with these tools and then

00:01:57,759 --> 00:02:01,920
i'm going to look

00:01:58,479 --> 00:02:05,680
at a couple of sort of newer topics

00:02:01,920 --> 00:02:07,119
for us which is the language package

00:02:05,680 --> 00:02:08,720
managers that have come along with new

00:02:07,119 --> 00:02:12,239
programming languages

00:02:08,720 --> 00:02:14,800
i'm going to talk about spdx

00:02:12,239 --> 00:02:16,720
and the tools can be used to generate

00:02:14,800 --> 00:02:19,120
spdx documents

00:02:16,720 --> 00:02:20,640
i'm going to talk about some finish up

00:02:19,120 --> 00:02:23,360
with future work

00:02:20,640 --> 00:02:25,200
that can go on in this area and as i say

00:02:23,360 --> 00:02:28,640
i'll be taking questions on slack

00:02:25,200 --> 00:02:31,200
during and after the talk

00:02:28,640 --> 00:02:33,280
um i did a previous talk on license

00:02:31,200 --> 00:02:36,400
compliance very similar

00:02:33,280 --> 00:02:39,599
subject at elc

00:02:36,400 --> 00:02:41,200
in 2019 there's video and slides

00:02:39,599 --> 00:02:44,319
available for that

00:02:41,200 --> 00:02:47,040
that's a bit more of a deep dive on the

00:02:44,319 --> 00:02:48,959
basic tools that we've got in the octo

00:02:47,040 --> 00:02:50,319
project i'm not going to duplicate all

00:02:48,959 --> 00:02:52,319
of that content

00:02:50,319 --> 00:02:53,760
today so if you're interested i highly

00:02:52,319 --> 00:02:56,239
recommend

00:02:53,760 --> 00:02:58,720
going watching that and having a look at

00:02:56,239 --> 00:03:01,280
the slides

00:02:58,720 --> 00:03:03,280
so yeah the best place to start really

00:03:01,280 --> 00:03:05,760
is why should you care about

00:03:03,280 --> 00:03:07,519
license compliance well if you sell an

00:03:05,760 --> 00:03:08,959
embedded linux device running embedded

00:03:07,519 --> 00:03:10,239
linux

00:03:08,959 --> 00:03:12,800
typically that's going to involve

00:03:10,239 --> 00:03:13,840
distribution of open source software

00:03:12,800 --> 00:03:16,879
that is

00:03:13,840 --> 00:03:19,280
physically present on the device

00:03:16,879 --> 00:03:20,720
that carries a risk of legal action if

00:03:19,280 --> 00:03:23,599
you don't do it properly

00:03:20,720 --> 00:03:25,280
um so the right way to look at this is

00:03:23,599 --> 00:03:27,040
risk reduction

00:03:25,280 --> 00:03:28,560
the other thing is doing this while

00:03:27,040 --> 00:03:31,680
gives you standing

00:03:28,560 --> 00:03:33,440
and positive reputation within the open

00:03:31,680 --> 00:03:35,280
source community that can really help

00:03:33,440 --> 00:03:37,680
when you then want to

00:03:35,280 --> 00:03:40,319
influence those communities and

00:03:37,680 --> 00:03:43,280
participate

00:03:40,319 --> 00:03:45,120
and the third thing i always say is

00:03:43,280 --> 00:03:47,519
really you need to be keeping

00:03:45,120 --> 00:03:48,560
source code of all the third-party

00:03:47,519 --> 00:03:50,080
components

00:03:48,560 --> 00:03:51,920
that you use anyway to help with

00:03:50,080 --> 00:03:54,000
debugging satisfy

00:03:51,920 --> 00:03:55,680
customer requests to rebuild something

00:03:54,000 --> 00:03:57,040
you did six months ago with one little

00:03:55,680 --> 00:03:58,720
patch

00:03:57,040 --> 00:04:00,560
and sources do disappear from the

00:03:58,720 --> 00:04:02,959
internet you need to keep your own cops

00:04:00,560 --> 00:04:04,480
this anyway and once you've done that

00:04:02,959 --> 00:04:05,599
you know it's it's not too much of a

00:04:04,480 --> 00:04:08,959
leap from having

00:04:05,599 --> 00:04:11,519
all that source codes archived

00:04:08,959 --> 00:04:15,040
to being able to fulfill your license

00:04:11,519 --> 00:04:16,880
compliance needs

00:04:15,040 --> 00:04:18,560
i also want to give a brief introduction

00:04:16,880 --> 00:04:20,079
to the octo project for anyone who isn't

00:04:18,560 --> 00:04:22,960
familiar with it

00:04:20,079 --> 00:04:24,639
and this is a toolkit for creating a

00:04:22,960 --> 00:04:27,680
fully customized

00:04:24,639 --> 00:04:28,720
embedded linux distribution for your

00:04:27,680 --> 00:04:31,919
product

00:04:28,720 --> 00:04:34,560
um it's widely adopted it's practically

00:04:31,919 --> 00:04:36,160
an industry standard at this stage

00:04:34,560 --> 00:04:38,560
and we've got a really welcome and

00:04:36,160 --> 00:04:42,000
active community

00:04:38,560 --> 00:04:43,840
of developers um

00:04:42,000 --> 00:04:45,520
and yeah there's several features that

00:04:43,840 --> 00:04:46,800
we've got that are specifically geared

00:04:45,520 --> 00:04:51,360
towards

00:04:46,800 --> 00:04:51,360
supporting licensed compliance

00:04:52,320 --> 00:04:58,720
so really brief example of

00:04:55,360 --> 00:05:00,960
a yocto project recipe the recipe is the

00:04:58,720 --> 00:05:02,240
thing that contains the metadata and the

00:05:00,960 --> 00:05:04,880
build commands

00:05:02,240 --> 00:05:07,280
for a particular piece of software so

00:05:04,880 --> 00:05:10,960
this is just a recipe for a hello world

00:05:07,280 --> 00:05:14,639
application it shows the

00:05:10,960 --> 00:05:18,880
um the license um this

00:05:14,639 --> 00:05:21,199
format here is um an spdx

00:05:18,880 --> 00:05:23,039
license identifier i'll mention a little

00:05:21,199 --> 00:05:26,560
more about spdx later

00:05:23,039 --> 00:05:30,800
which is a standardized way of um

00:05:26,560 --> 00:05:33,919
identifying a license and we also

00:05:30,800 --> 00:05:36,000
call out a license file and the checksum

00:05:33,919 --> 00:05:38,880
off that file within the source tree

00:05:36,000 --> 00:05:39,520
this just helps us to or automatically

00:05:38,880 --> 00:05:42,160
notice

00:05:39,520 --> 00:05:44,720
if that license changes when you upgrade

00:05:42,160 --> 00:05:47,120
the software

00:05:44,720 --> 00:05:48,720
and so this this metadata is kind of the

00:05:47,120 --> 00:05:52,800
starting point

00:05:48,720 --> 00:05:54,639
for uh license compliance activity

00:05:52,800 --> 00:05:56,800
the metadata in public layers isn't

00:05:54,639 --> 00:06:00,080
always perfect but it's usually

00:05:56,800 --> 00:06:00,080
in a pretty decent state

00:06:01,360 --> 00:06:05,600
so once you've got these recipes and

00:06:04,240 --> 00:06:06,000
you're building software and building

00:06:05,600 --> 00:06:09,520
images

00:06:06,000 --> 00:06:11,600
from the recipes first step to

00:06:09,520 --> 00:06:12,560
license compliance really is being able

00:06:11,600 --> 00:06:15,840
to provide

00:06:12,560 --> 00:06:17,280
the sources for components which are

00:06:15,840 --> 00:06:20,639
under copyleft

00:06:17,280 --> 00:06:22,479
licenses and the octo project supports

00:06:20,639 --> 00:06:25,840
you to do this

00:06:22,479 --> 00:06:29,199
we've got an archiver class

00:06:25,840 --> 00:06:32,319
that will collect the source code

00:06:29,199 --> 00:06:34,800
for any recipes that are built

00:06:32,319 --> 00:06:36,240
and usually collect it in either sort of

00:06:34,800 --> 00:06:40,000
the original

00:06:36,240 --> 00:06:42,720
form um as it would be distributed

00:06:40,000 --> 00:06:43,360
can also collect it with patchy supplied

00:06:42,720 --> 00:06:46,639
or

00:06:43,360 --> 00:06:46,880
after it's been configured um and this

00:06:46,639 --> 00:06:50,560
is

00:06:46,880 --> 00:06:54,880
all done by adding um

00:06:50,560 --> 00:06:58,080
the this line here to the

00:06:54,880 --> 00:07:00,800
local configuration file for your build

00:06:58,080 --> 00:07:02,560
um and then setting one of these

00:07:00,800 --> 00:07:04,880
archival modes

00:07:02,560 --> 00:07:05,680
the mirror archiver mode at the bottom

00:07:04,880 --> 00:07:09,520
is one that i

00:07:05,680 --> 00:07:12,880
worked at worked on over the last year

00:07:09,520 --> 00:07:16,639
which is really geared towards producing

00:07:12,880 --> 00:07:19,120
a full mirror of all open source

00:07:16,639 --> 00:07:20,960
software which can then be reused in

00:07:19,120 --> 00:07:24,479
future yocte project

00:07:20,960 --> 00:07:28,080
builds the archiver can also be tweaked

00:07:24,479 --> 00:07:31,599
and configured further to support your

00:07:28,080 --> 00:07:33,280
use case so we support filtering which

00:07:31,599 --> 00:07:34,800
software packages you want to include

00:07:33,280 --> 00:07:37,840
the sources of

00:07:34,800 --> 00:07:39,520
um along with several other

00:07:37,840 --> 00:07:42,560
variables which are covered in the

00:07:39,520 --> 00:07:44,800
project documentation

00:07:42,560 --> 00:07:45,599
the the kind of other half to license

00:07:44,800 --> 00:07:48,639
compliance

00:07:45,599 --> 00:07:51,840
is providing the actual license text and

00:07:48,639 --> 00:07:53,199
copyright notices um

00:07:51,840 --> 00:07:56,080
this is often a requirement for

00:07:53,199 --> 00:07:56,800
permissive open source licenses as well

00:07:56,080 --> 00:08:00,560
as

00:07:56,800 --> 00:08:03,599
copy copyleft licenses and we

00:08:00,560 --> 00:08:06,400
collect all that license text

00:08:03,599 --> 00:08:07,280
as part of the artifacts produced by a

00:08:06,400 --> 00:08:11,120
build anyway

00:08:07,280 --> 00:08:13,360
so you can simply copy this directory

00:08:11,120 --> 00:08:16,319
but it will probably need a bit of

00:08:13,360 --> 00:08:17,919
post processing to make sure you've got

00:08:16,319 --> 00:08:18,960
just the licenses that are actually

00:08:17,919 --> 00:08:22,080
relevant

00:08:18,960 --> 00:08:25,199
to your current build um

00:08:22,080 --> 00:08:26,560
if you're distributing a product and you

00:08:25,199 --> 00:08:29,840
want to include the license

00:08:26,560 --> 00:08:31,199
text in the actual file system image

00:08:29,840 --> 00:08:34,000
that's going to go on the product

00:08:31,199 --> 00:08:36,399
we also support that in two two

00:08:34,000 --> 00:08:40,399
different ways really

00:08:36,399 --> 00:08:45,200
one is by including this

00:08:40,399 --> 00:08:48,240
at the um image generation time

00:08:45,200 --> 00:08:48,800
um and this just collects all the

00:08:48,240 --> 00:08:51,839
license

00:08:48,800 --> 00:08:54,399
text into one directory when

00:08:51,839 --> 00:08:55,920
the root file system image is created

00:08:54,399 --> 00:08:58,480
and the second is to create

00:08:55,920 --> 00:08:59,440
license packages for each software

00:08:58,480 --> 00:09:02,480
package

00:08:59,440 --> 00:09:05,279
and this gives you an installable

00:09:02,480 --> 00:09:07,440
package and provides an upgrade path if

00:09:05,279 --> 00:09:10,959
you're doing sort of on device

00:09:07,440 --> 00:09:12,480
upgrades using apt or yum or some other

00:09:10,959 --> 00:09:14,320
package manager

00:09:12,480 --> 00:09:15,519
and this provides you a way of getting

00:09:14,320 --> 00:09:20,399
the the newer

00:09:15,519 --> 00:09:20,399
license text when you update a

00:09:20,839 --> 00:09:26,720
package

00:09:23,360 --> 00:09:30,000
so a couple more tools that we have

00:09:26,720 --> 00:09:34,160
we have the ability to exclude

00:09:30,000 --> 00:09:37,760
unwanted licenses from images

00:09:34,160 --> 00:09:40,399
so if you're building

00:09:37,760 --> 00:09:42,000
something and for whatever reason you

00:09:40,399 --> 00:09:45,120
maybe don't want to include

00:09:42,000 --> 00:09:47,040
in gpl3 or later is kind of the go-to

00:09:45,120 --> 00:09:48,480
example that people use

00:09:47,040 --> 00:09:50,000
but if there's a particular license

00:09:48,480 --> 00:09:50,959
which you want to make sure that no

00:09:50,000 --> 00:09:52,880
software

00:09:50,959 --> 00:09:54,000
covered by that license is included in

00:09:52,880 --> 00:09:55,839
your image

00:09:54,000 --> 00:09:57,120
you can add that to this incompatible

00:09:55,839 --> 00:10:01,920
license

00:09:57,120 --> 00:10:03,760
variable within your build configuration

00:10:01,920 --> 00:10:05,200
and that will then block the inclusion

00:10:03,760 --> 00:10:07,760
of

00:10:05,200 --> 00:10:09,600
packages which have that license

00:10:07,760 --> 00:10:11,760
typically this applies to

00:10:09,600 --> 00:10:14,480
target packages only that is packages

00:10:11,760 --> 00:10:16,959
that are built for your

00:10:14,480 --> 00:10:18,800
embedded device and are going to go into

00:10:16,959 --> 00:10:19,839
the root file systems this doesn't

00:10:18,800 --> 00:10:22,720
prevent

00:10:19,839 --> 00:10:24,399
things like a cross compiler or a

00:10:22,720 --> 00:10:25,200
development tool that's only used on

00:10:24,399 --> 00:10:28,800
your

00:10:25,200 --> 00:10:29,519
build host from being used and if you do

00:10:28,800 --> 00:10:33,680
exclude

00:10:29,519 --> 00:10:34,079
gpl3 licensed components you may need to

00:10:33,680 --> 00:10:38,399
use

00:10:34,079 --> 00:10:41,120
the meta gpl v2 layer

00:10:38,399 --> 00:10:42,880
to pick up older versions of some

00:10:41,120 --> 00:10:44,800
software packages

00:10:42,880 --> 00:10:47,519
if that is the direction you go in i

00:10:44,800 --> 00:10:50,720
highly recommend you contribute to the

00:10:47,519 --> 00:10:53,120
gpl v2 layer as well because that really

00:10:50,720 --> 00:10:56,000
does rely on the people who are actually

00:10:53,120 --> 00:10:58,720
needing it and using it and helping to

00:10:56,000 --> 00:10:58,720
maintain it

00:10:59,360 --> 00:11:03,440
and kind of to support this what we do

00:11:01,760 --> 00:11:05,440
in all the core

00:11:03,440 --> 00:11:07,200
layers within yokto projects and what we

00:11:05,440 --> 00:11:10,720
recommend in all other

00:11:07,200 --> 00:11:11,600
layers is use the standardized license

00:11:10,720 --> 00:11:15,440
names

00:11:11,600 --> 00:11:17,519
from the spdx license list

00:11:15,440 --> 00:11:19,040
to identify licenses that avoids

00:11:17,519 --> 00:11:21,120
confusion

00:11:19,040 --> 00:11:24,000
and it ensures that you know when you

00:11:21,120 --> 00:11:27,120
add something like gpl-3.0

00:11:24,000 --> 00:11:28,079
to your incompatible license list then

00:11:27,120 --> 00:11:30,800
that is the the

00:11:28,079 --> 00:11:34,000
word that's used in the license variable

00:11:30,800 --> 00:11:34,000
for every recipe as well

00:11:36,399 --> 00:11:40,640
the other thing that we've got is

00:11:38,560 --> 00:11:41,200
licensed flags sometimes this gets a

00:11:40,640 --> 00:11:43,519
little

00:11:41,200 --> 00:11:45,600
confused what's what's licensed what's

00:11:43,519 --> 00:11:48,800
licensed flags

00:11:45,600 --> 00:11:50,079
licensed flags is a way of identifying

00:11:48,800 --> 00:11:53,519
recipes that have

00:11:50,079 --> 00:11:56,959
some additional terms beyond

00:11:53,519 --> 00:11:59,200
an open source software license so this

00:11:56,959 --> 00:12:00,880
may be a commercial license or an end

00:11:59,200 --> 00:12:02,079
user license agreement that you have to

00:12:00,880 --> 00:12:04,320
agree to

00:12:02,079 --> 00:12:06,399
and it may be that the software uses

00:12:04,320 --> 00:12:09,440
patented

00:12:06,399 --> 00:12:10,000
algorithms which may or may not be an

00:12:09,440 --> 00:12:12,000
issue for

00:12:10,000 --> 00:12:13,760
you depending on your use case your

00:12:12,000 --> 00:12:17,120
jurisdiction

00:12:13,760 --> 00:12:17,680
and other questions so when um license

00:12:17,120 --> 00:12:20,399
flags

00:12:17,680 --> 00:12:22,839
are set in a recipe that results in the

00:12:20,399 --> 00:12:24,399
recipe being excluded from a build by

00:12:22,839 --> 00:12:27,200
default

00:12:24,399 --> 00:12:27,920
and you need to come in and add those

00:12:27,200 --> 00:12:31,600
recipes

00:12:27,920 --> 00:12:35,279
to the license flags whitelist

00:12:31,600 --> 00:12:38,480
variable to enable

00:12:35,279 --> 00:12:40,480
those recipes so this in terms of open

00:12:38,480 --> 00:12:46,399
source components you could see this

00:12:40,480 --> 00:12:46,399
for video and audio codecs

00:12:48,800 --> 00:12:57,120
and it's useful for and say flagging

00:12:52,000 --> 00:12:57,120
commercially licensed items as well

00:12:58,000 --> 00:13:01,920
so one of the things we support within

00:13:00,639 --> 00:13:04,880
the octo project

00:13:01,920 --> 00:13:06,480
is generation of a software development

00:13:04,880 --> 00:13:10,240
kit

00:13:06,480 --> 00:13:11,760
and this is a self-contained build tool

00:13:10,240 --> 00:13:14,480
that you can give to application

00:13:11,760 --> 00:13:16,320
developers to let them build their code

00:13:14,480 --> 00:13:18,240
without needing to

00:13:16,320 --> 00:13:19,600
understand all the details of writing

00:13:18,240 --> 00:13:22,800
and maintaining

00:13:19,600 --> 00:13:24,399
doctor project recipes and we've got two

00:13:22,800 --> 00:13:25,040
forms of the software development kit

00:13:24,399 --> 00:13:28,800
we've got

00:13:25,040 --> 00:13:32,959
the plain sdk and we've got

00:13:28,800 --> 00:13:37,040
an extensible sdk

00:13:32,959 --> 00:13:39,279
which is um kind of package based and

00:13:37,040 --> 00:13:42,160
allows you to upgrade

00:13:39,279 --> 00:13:44,320
the sdk on your developers machines and

00:13:42,160 --> 00:13:46,720
the archiver that i mentioned before

00:13:44,320 --> 00:13:49,519
and that should capture the sources for

00:13:46,720 --> 00:13:52,800
any components that go into the sdk

00:13:49,519 --> 00:13:54,160
and so if you're distributing the sdk um

00:13:52,800 --> 00:13:55,839
you know you want to treat that the same

00:13:54,160 --> 00:13:58,480
way you distribute uh

00:13:55,839 --> 00:14:01,360
tree a root fast that you distribute in

00:13:58,480 --> 00:14:03,279
and capture those sources

00:14:01,360 --> 00:14:04,880
for the extensible sdk things are a

00:14:03,279 --> 00:14:06,959
little bit different i would highly

00:14:04,880 --> 00:14:07,839
recommend you do some research of your

00:14:06,959 --> 00:14:10,320
own

00:14:07,839 --> 00:14:11,519
there because the way the extensible sdk

00:14:10,320 --> 00:14:15,040
is built

00:14:11,519 --> 00:14:18,079
there maybe is the opportunity for

00:14:15,040 --> 00:14:21,680
the the archiver to miss things and some

00:14:18,079 --> 00:14:21,680
additional work required there

00:14:22,320 --> 00:14:28,720
if your developers use the sdk to build

00:14:25,360 --> 00:14:30,240
software outside of the octo project

00:14:28,720 --> 00:14:32,160
that obviously bypasses all of our

00:14:30,240 --> 00:14:34,240
license compliance tooling so do be

00:14:32,160 --> 00:14:39,519
careful distributing

00:14:34,240 --> 00:14:44,399
um code that is built in that way

00:14:39,519 --> 00:14:48,320
um just to jump back a little bit

00:14:44,399 --> 00:14:50,480
um where was the thing on gpl v2 layer

00:14:48,320 --> 00:14:52,880
uh so alexandre asked do we know how

00:14:50,480 --> 00:14:54,800
well meta gpl v2 is maintained regarding

00:14:52,880 --> 00:14:58,079
security fixes

00:14:54,800 --> 00:15:01,920
um i think i

00:14:58,079 --> 00:15:04,560
i'm not sure off the top of my head um

00:15:01,920 --> 00:15:05,199
i imagine it's pretty much parked where

00:15:04,560 --> 00:15:08,480
the last

00:15:05,199 --> 00:15:10,800
gpr v2 release of a component

00:15:08,480 --> 00:15:13,519
was made and if you need security fixes

00:15:10,800 --> 00:15:14,240
for that that is a place where we would

00:15:13,519 --> 00:15:18,320
recommend

00:15:14,240 --> 00:15:21,600
you yeah get involved and

00:15:18,320 --> 00:15:21,600
help us out with those things

00:15:24,480 --> 00:15:31,360
so um next

00:15:27,920 --> 00:15:33,040
topic i wanted to cover was licensed

00:15:31,360 --> 00:15:34,880
package managers

00:15:33,040 --> 00:15:38,480
so this is something that's become a

00:15:34,880 --> 00:15:38,480
little more of an issue in recent years

00:15:39,440 --> 00:15:43,519
so many newer programming languages use

00:15:41,759 --> 00:15:47,360
their own package managers

00:15:43,519 --> 00:15:49,120
um i mean maybe not just newer ones

00:15:47,360 --> 00:15:52,839
python's always had its own

00:15:49,120 --> 00:15:56,320
language package manager um but

00:15:52,839 --> 00:15:59,600
for languages like go

00:15:56,320 --> 00:16:02,720
has the the go build tool uh

00:15:59,600 --> 00:16:05,600
javascript node.js has the npm

00:16:02,720 --> 00:16:06,560
node package manager and rust has the

00:16:05,600 --> 00:16:10,639
cargo

00:16:06,560 --> 00:16:13,839
build system and package manager um

00:16:10,639 --> 00:16:16,639
and these do present some issues for

00:16:13,839 --> 00:16:18,160
embedded development and for license

00:16:16,639 --> 00:16:19,759
compliance

00:16:18,160 --> 00:16:21,279
you know the concerns of embedded

00:16:19,759 --> 00:16:23,040
developers and

00:16:21,279 --> 00:16:26,240
the concerns of achieving licensed

00:16:23,040 --> 00:16:28,480
compliance just don't seem to be

00:16:26,240 --> 00:16:29,759
the things at the forefront of the

00:16:28,480 --> 00:16:32,220
developers

00:16:29,759 --> 00:16:33,440
minds the developers of these tools

00:16:32,220 --> 00:16:35,440
[Music]

00:16:33,440 --> 00:16:37,920
and some of the features that i would

00:16:35,440 --> 00:16:41,440
say we need do seem to be missing

00:16:37,920 --> 00:16:45,600
from these tools um so

00:16:41,440 --> 00:16:48,839
the features we need to achieve this

00:16:45,600 --> 00:16:50,639
from my point of view is offline build

00:16:48,839 --> 00:16:52,800
support

00:16:50,639 --> 00:16:53,759
it's very difficult to ensure that

00:16:52,800 --> 00:16:55,759
you've got

00:16:53,759 --> 00:16:57,040
an archive copy of all the sources you

00:16:55,759 --> 00:16:59,360
need and you've collected all the

00:16:57,040 --> 00:17:01,680
license text and everything else

00:16:59,360 --> 00:17:04,559
if the build process actually goes and

00:17:01,680 --> 00:17:06,640
interacts with online components and

00:17:04,559 --> 00:17:08,640
downloads additional components during

00:17:06,640 --> 00:17:10,880
the compile stage

00:17:08,640 --> 00:17:12,319
um we really need to be able to support

00:17:10,880 --> 00:17:15,760
offline builds

00:17:12,319 --> 00:17:18,480
as a baseline here we need an automa

00:17:15,760 --> 00:17:20,160
automated way of downloading source

00:17:18,480 --> 00:17:22,000
archives for

00:17:20,160 --> 00:17:24,240
not just the package itself but for all

00:17:22,000 --> 00:17:26,079
the dependencies

00:17:24,240 --> 00:17:28,160
and that needs to include license text

00:17:26,079 --> 00:17:32,240
it needs to include various

00:17:28,160 --> 00:17:35,760
um collateral files so readme

00:17:32,240 --> 00:17:37,600
instructions and everything else within

00:17:35,760 --> 00:17:40,880
that source archive

00:17:37,600 --> 00:17:44,720
um we need to be able to support

00:17:40,880 --> 00:17:46,400
http https proxies and this maybe isn't

00:17:44,720 --> 00:17:47,919
a licensed compliance issue but it's

00:17:46,400 --> 00:17:51,200
definitely an embedded

00:17:47,919 --> 00:17:53,440
cross-development thing um to support

00:17:51,200 --> 00:17:55,520
people who are behind either corporate

00:17:53,440 --> 00:17:58,640
firewalls or national firewalls and may

00:17:55,520 --> 00:18:00,160
not have access to all the online

00:17:58,640 --> 00:18:01,760
services that some of us take for

00:18:00,160 --> 00:18:03,679
granted

00:18:01,760 --> 00:18:05,600
and we also the tools also should

00:18:03,679 --> 00:18:07,520
support source mirrors

00:18:05,600 --> 00:18:10,000
and so they should not be insistent on

00:18:07,520 --> 00:18:13,039
always fetching directly from

00:18:10,000 --> 00:18:17,840
a particular upstream

00:18:13,039 --> 00:18:20,240
um canonical package manager website

00:18:17,840 --> 00:18:21,360
um you need to be able to provide your

00:18:20,240 --> 00:18:24,400
own mirror

00:18:21,360 --> 00:18:24,720
of those components and that's important

00:18:24,400 --> 00:18:28,080
for

00:18:24,720 --> 00:18:29,919
testability so to test that you've

00:18:28,080 --> 00:18:32,240
actually achieved license compliance and

00:18:29,919 --> 00:18:34,960
you've actually got all the source code

00:18:32,240 --> 00:18:36,880
you want to rebuild just from your local

00:18:34,960 --> 00:18:38,480
mirror of that source code and see that

00:18:36,880 --> 00:18:40,400
it does actually

00:18:38,480 --> 00:18:43,039
work and that will then show you that

00:18:40,400 --> 00:18:46,400
you've got a complete source archive

00:18:43,039 --> 00:18:46,400
for your image

00:18:47,120 --> 00:18:50,559
so those are the features that you

00:18:48,480 --> 00:18:52,559
really need to look for

00:18:50,559 --> 00:18:54,320
when dealing with one of these license

00:18:52,559 --> 00:18:57,840
language specific

00:18:54,320 --> 00:18:58,400
package managers i want to sort of dive

00:18:57,840 --> 00:19:03,120
into

00:18:58,400 --> 00:19:06,640
one of these languages in particular

00:19:03,120 --> 00:19:09,440
which is rust um rust

00:19:06,640 --> 00:19:10,559
is a language that came out of mozilla

00:19:09,440 --> 00:19:12,480
research

00:19:10,559 --> 00:19:14,000
a few years back and has been growing in

00:19:12,480 --> 00:19:17,120
popularity

00:19:14,000 --> 00:19:20,720
in pretty much every area

00:19:17,120 --> 00:19:24,799
including embedded software

00:19:20,720 --> 00:19:29,039
development and it provides a lot of

00:19:24,799 --> 00:19:32,559
unique benefits and unique guarantees

00:19:29,039 --> 00:19:35,200
um so the um

00:19:32,559 --> 00:19:36,160
the rust software written in rust is

00:19:35,200 --> 00:19:39,280
built using

00:19:36,160 --> 00:19:41,039
uh tool called cargo and cargo has built

00:19:39,280 --> 00:19:44,320
both the build system

00:19:41,039 --> 00:19:47,760
and the language package manager for

00:19:44,320 --> 00:19:50,720
rust um and so a rust project

00:19:47,760 --> 00:19:53,120
typically includes a configuration file

00:19:50,720 --> 00:19:56,240
for the cargo build tool

00:19:53,120 --> 00:19:58,480
um and this

00:19:56,240 --> 00:20:00,400
includes metadata such as you know a

00:19:58,480 --> 00:20:01,760
description of the software the authors

00:20:00,400 --> 00:20:04,320
the license

00:20:01,760 --> 00:20:05,679
the other things you'd normally find in

00:20:04,320 --> 00:20:08,480
a

00:20:05,679 --> 00:20:11,120
youtube project recipe as well to to

00:20:08,480 --> 00:20:14,559
identify and describe your software

00:20:11,120 --> 00:20:17,200
and it includes a list of dependencies

00:20:14,559 --> 00:20:18,960
that are required in order to build an

00:20:17,200 --> 00:20:22,640
application or a library

00:20:18,960 --> 00:20:25,840
and it includes configuration options

00:20:22,640 --> 00:20:28,240
for your

00:20:25,840 --> 00:20:30,720
piece of software it could also include

00:20:28,240 --> 00:20:34,720
the configurations to set when building

00:20:30,720 --> 00:20:37,360
dependencies um

00:20:34,720 --> 00:20:38,480
and the cargo build system is also

00:20:37,360 --> 00:20:41,640
associated

00:20:38,480 --> 00:20:44,000
with a software registry called

00:20:41,640 --> 00:20:47,679
crates.io

00:20:44,000 --> 00:20:50,880
and this is a place where open source

00:20:47,679 --> 00:20:54,240
projects written in rust can publish

00:20:50,880 --> 00:20:56,240
their their source code

00:20:54,240 --> 00:20:58,720
provides search it provides download

00:20:56,240 --> 00:21:01,360
functionality

00:20:58,720 --> 00:21:04,240
so let's dive into rust with the

00:21:01,360 --> 00:21:04,240
octoproject

00:21:05,840 --> 00:21:08,960
we you know rust support is done by the

00:21:08,080 --> 00:21:12,240
meta rust

00:21:08,960 --> 00:21:14,960
layer right now um we're having a few

00:21:12,240 --> 00:21:17,039
discussions about bringing that into

00:21:14,960 --> 00:21:18,159
the the octo project core but right now

00:21:17,039 --> 00:21:20,960
it's in this

00:21:18,159 --> 00:21:23,120
meta rust layer because there's so much

00:21:20,960 --> 00:21:25,120
information in that cargo configuration

00:21:23,120 --> 00:21:28,640
file we can generate recipes

00:21:25,120 --> 00:21:30,720
automatically using this cargo dash bit

00:21:28,640 --> 00:21:31,919
bake tool and it seems to do a pretty

00:21:30,720 --> 00:21:35,039
good job of things

00:21:31,919 --> 00:21:39,039
and it includes source uri entries for

00:21:35,039 --> 00:21:41,520
all the dependencies of your project

00:21:39,039 --> 00:21:43,280
includes a fetcher that allows bitbake

00:21:41,520 --> 00:21:44,799
to go and fetch these dependencies

00:21:43,280 --> 00:21:47,760
typically from

00:21:44,799 --> 00:21:47,760
crates.i o

00:21:48,960 --> 00:21:55,600
and it includes a cargo

00:21:52,000 --> 00:22:00,159
class that describes how to build

00:21:55,600 --> 00:22:02,640
rust projects and this

00:22:00,159 --> 00:22:03,360
this supports offline builds it uses

00:22:02,640 --> 00:22:04,880
this bit

00:22:03,360 --> 00:22:07,280
fetcher to download all the crates

00:22:04,880 --> 00:22:09,360
you're depending on and

00:22:07,280 --> 00:22:11,360
does the build offline which i say is

00:22:09,360 --> 00:22:14,000
one of the key features we need

00:22:11,360 --> 00:22:15,679
and this workflow works pretty well with

00:22:14,000 --> 00:22:17,280
most the octo project tool and

00:22:15,679 --> 00:22:20,000
i've described the archive that i

00:22:17,280 --> 00:22:21,679
mentioned before supports http proxies

00:22:20,000 --> 00:22:23,919
it supports source mirrors

00:22:21,679 --> 00:22:25,039
that all works pretty well the one thing

00:22:23,919 --> 00:22:28,400
that is missing

00:22:25,039 --> 00:22:31,039
is those crate dependencies

00:22:28,400 --> 00:22:32,400
um it doesn't have the cargo bitmaker

00:22:31,039 --> 00:22:35,120
doesn't actually

00:22:32,400 --> 00:22:36,559
go and find the the licenses that apply

00:22:35,120 --> 00:22:38,400
to all those dependencies

00:22:36,559 --> 00:22:40,799
and collect all the license text for

00:22:38,400 --> 00:22:42,720
those so there's an additional step that

00:22:40,799 --> 00:22:43,760
we either need to add into the cargo bit

00:22:42,720 --> 00:22:45,919
bake tool

00:22:43,760 --> 00:22:47,200
or that you need to be willing to do

00:22:45,919 --> 00:22:50,799
yourself

00:22:47,200 --> 00:22:55,520
when using software written in rust

00:22:50,799 --> 00:22:59,360
um the next thing that i want to cover

00:22:55,520 --> 00:23:02,640
um quickly is spdx

00:22:59,360 --> 00:23:04,480
which i have mentioned already and spdx

00:23:02,640 --> 00:23:06,159
describes itself as an open standard

00:23:04,480 --> 00:23:08,080
for communicating software bill of

00:23:06,159 --> 00:23:10,799
material information

00:23:08,080 --> 00:23:14,000
including components licenses copyrights

00:23:10,799 --> 00:23:14,000
security references

00:23:14,080 --> 00:23:21,120
spdex is supported in the octoproject

00:23:17,200 --> 00:23:23,520
by the meta spdx scanner layer

00:23:21,120 --> 00:23:26,000
this layer provides tools to scan source

00:23:23,520 --> 00:23:30,000
code to identify licenses

00:23:26,000 --> 00:23:32,480
and produce spdx documents that is

00:23:30,000 --> 00:23:34,400
essentially a software bill of material

00:23:32,480 --> 00:23:35,760
with all those licenses and copyright

00:23:34,400 --> 00:23:38,559
information

00:23:35,760 --> 00:23:40,799
in that document the one thing i will

00:23:38,559 --> 00:23:42,640
say is generation of spdx documents is

00:23:40,799 --> 00:23:44,880
typically a slow process

00:23:42,640 --> 00:23:46,799
because it involves scanning all the

00:23:44,880 --> 00:23:50,159
text files of your software

00:23:46,799 --> 00:23:52,559
to look for the

00:23:50,159 --> 00:23:54,720
the license is involved it can extend

00:23:52,559 --> 00:23:56,799
build times by several hours this can

00:23:54,720 --> 00:23:58,880
this is usable on a release build

00:23:56,799 --> 00:24:01,520
when you do a release it's not really

00:23:58,880 --> 00:24:03,919
usable on day-to-day development builds

00:24:01,520 --> 00:24:04,720
um but one thing we do support is scan

00:24:03,919 --> 00:24:07,760
code

00:24:04,720 --> 00:24:09,279
and so scan code toolkit and does this

00:24:07,760 --> 00:24:10,320
job of looking through all your source

00:24:09,279 --> 00:24:11,919
files

00:24:10,320 --> 00:24:13,360
identifying blocks that look like

00:24:11,919 --> 00:24:15,679
licensed text

00:24:13,360 --> 00:24:18,559
and pulling out those license names into

00:24:15,679 --> 00:24:18,559
a big long list

00:24:19,360 --> 00:24:23,360
so that is included as a class within

00:24:22,000 --> 00:24:26,159
meta spdx

00:24:23,360 --> 00:24:27,120
scanner layer you can either enable it

00:24:26,159 --> 00:24:30,640
globally

00:24:27,120 --> 00:24:33,279
by adding that to local.conf

00:24:30,640 --> 00:24:35,520
or you can just say inherit that class

00:24:33,279 --> 00:24:37,919
in the specific recipes

00:24:35,520 --> 00:24:39,279
where you want to do that license

00:24:37,919 --> 00:24:43,039
scanning because obviously like

00:24:39,279 --> 00:24:45,039
scanning something as big as the kernel

00:24:43,039 --> 00:24:46,720
is going to be very very time consuming

00:24:45,039 --> 00:24:49,120
and you might not feel that you need to

00:24:46,720 --> 00:24:51,120
do that

00:24:49,120 --> 00:24:53,600
um another component we can integrate

00:24:51,120 --> 00:24:55,200
with is fossology

00:24:53,600 --> 00:24:56,960
[Music]

00:24:55,200 --> 00:24:59,520
which is a much more fully featured

00:24:56,960 --> 00:25:02,720
system for licensed compliance scanning

00:24:59,520 --> 00:25:04,960
and for sign off manual sign-off

00:25:02,720 --> 00:25:06,880
processes to confirm

00:25:04,960 --> 00:25:09,120
that you're happy with the results of

00:25:06,880 --> 00:25:11,919
the scan runs as a service with a web

00:25:09,120 --> 00:25:13,919
interface and an api

00:25:11,919 --> 00:25:15,760
the spdx scanner layer provides

00:25:13,919 --> 00:25:19,279
integration with us as well

00:25:15,760 --> 00:25:22,320
i'm going to skip over this as i'm

00:25:19,279 --> 00:25:22,320
running out of time

00:25:23,360 --> 00:25:26,480
and i'm going to wrap up with some

00:25:25,200 --> 00:25:28,080
future work

00:25:26,480 --> 00:25:29,679
um what i would like to see is better

00:25:28,080 --> 00:25:30,640
integration with those language package

00:25:29,679 --> 00:25:32,799
managers

00:25:30,640 --> 00:25:35,039
which may require some extra features in

00:25:32,799 --> 00:25:37,200
the package managers themselves

00:25:35,039 --> 00:25:39,120
um i'd like to see automatic generation

00:25:37,200 --> 00:25:41,360
more user-friendly

00:25:39,120 --> 00:25:42,559
plain text or html license document for

00:25:41,360 --> 00:25:44,559
an image

00:25:42,559 --> 00:25:46,720
and there are other license compliance

00:25:44,559 --> 00:25:48,400
tools like the oss review toolkit that

00:25:46,720 --> 00:25:50,640
we can integrate with

00:25:48,400 --> 00:25:52,320
and i'd like to see some of these

00:25:50,640 --> 00:25:53,600
license scanning spdx document

00:25:52,320 --> 00:25:57,520
generations

00:25:53,600 --> 00:26:02,240
tools used for our actual yokto project

00:25:57,520 --> 00:26:02,240
releases though that is non-trivial

00:26:03,360 --> 00:26:08,559
and just final link slide with some

00:26:06,640 --> 00:26:11,760
additional links

00:26:08,559 --> 00:26:13,279
that are i've added after i published

00:26:11,760 --> 00:26:15,600
these slides

00:26:13,279 --> 00:26:18,000
online so i've got a link to my twitter

00:26:15,600 --> 00:26:21,200
and personal website and blog

00:26:18,000 --> 00:26:22,799
carlos talk this morning was excellent i

00:26:21,200 --> 00:26:24,320
highly recommend

00:26:22,799 --> 00:26:26,559
giving that a watch if you're interested

00:26:24,320 --> 00:26:30,159
in license compliance

00:26:26,559 --> 00:26:32,960
he mentioned reuse dot software which is

00:26:30,159 --> 00:26:34,559
very interesting on this front uh within

00:26:32,960 --> 00:26:37,120
the october project we've got a

00:26:34,559 --> 00:26:38,480
licensing mailing list

00:26:37,120 --> 00:26:40,799
if you want to discuss any of these

00:26:38,480 --> 00:26:42,240
topics and i if again if you're

00:26:40,799 --> 00:26:43,279
interested in licensing i highly

00:26:42,240 --> 00:26:46,799
recommend looking

00:26:43,279 --> 00:26:49,919
at the open chain project

00:26:46,799 --> 00:26:50,960
so thank you very much for that i will

00:26:49,919 --> 00:26:55,000
be around on

00:26:50,960 --> 00:26:58,000
slack to discuss further or answer any

00:26:55,000 --> 00:26:58,000

YouTube URL: https://www.youtube.com/watch?v=HILbAIeCTR8


