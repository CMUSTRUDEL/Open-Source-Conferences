Title: LVC20 112 PSA Secure Partitions in OP TEE 1
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	OP TEE 1
ArmÂ® Firmware Framework for Armv8-A [1] describes a software architecture and interfaces that standardize isolation and communication between the various software components.
Depending on the framework configuration, OP-TEE can be deployed either as a Secure-EL1 Secure Partition managed by a Secure Partition Manager (SPM) executing at secure EL2, or can serve as an SPM for S-EL0 Secure Partitions.

In this session, we'll focus on the potential use cases for S-EL0 partitions, such as a basic set of Platform Security services (Crypto, Storage and Attestation), Standalone MM, or an existing set of TAs, managed by OP-TEE as the partition manager core.

We'll cover the design considerations and implementation choices made for an initial prototype, some of the challenges encountered and the status of the work in progress to support multiple types of partitions within a single standard framework in OP-TEE.

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-112-0.pdf
Captions: 
	00:00:00,480 --> 00:00:07,359
hi everyone my presentation

00:00:03,439 --> 00:00:10,400
is uh about a project that was launched

00:00:07,359 --> 00:00:13,679
at arm to add support for a new

00:00:10,400 --> 00:00:18,480
type of component uh you know

00:00:13,679 --> 00:00:22,080
t uh and that is uh the secure partition

00:00:18,480 --> 00:00:26,240
my name is miklos balind i work at uh

00:00:22,080 --> 00:00:30,320
arms oss open source software group

00:00:26,240 --> 00:00:33,440
and uh

00:00:30,320 --> 00:00:36,880
uh i previously i was

00:00:33,440 --> 00:00:37,200
i was working uh on the trusted firmware

00:00:36,880 --> 00:00:40,800
for

00:00:37,200 --> 00:00:44,239
m project and uh about a year or so i

00:00:40,800 --> 00:00:46,480
started modeling with the a profile

00:00:44,239 --> 00:00:47,440
especially looking at how the platform

00:00:46,480 --> 00:00:49,840
security

00:00:47,440 --> 00:00:51,120
root of trust service standardization

00:00:49,840 --> 00:00:54,320
initiatives

00:00:51,120 --> 00:00:57,120
that were started for the m profile

00:00:54,320 --> 00:00:59,359
could be expanded to include a similar

00:00:57,120 --> 00:01:02,800
reference implementation

00:00:59,359 --> 00:01:03,920
for the rich iot and infrastructure edge

00:01:02,800 --> 00:01:08,240
devices

00:01:03,920 --> 00:01:08,240
based on the a-profile cores

00:01:10,840 --> 00:01:16,240
so

00:01:12,000 --> 00:01:16,240
let me just see if my clicker works

00:01:17,200 --> 00:01:22,960
no it does not just hang on there

00:01:23,119 --> 00:01:29,439
yep that's better so

00:01:26,400 --> 00:01:32,720
sorry about that so the

00:01:29,439 --> 00:01:36,400
after an initial incubation period uh

00:01:32,720 --> 00:01:37,040
uh uh full-fledged uh project was

00:01:36,400 --> 00:01:39,600
started

00:01:37,040 --> 00:01:40,880
uh and the team was formed around this

00:01:39,600 --> 00:01:44,159
subject

00:01:40,880 --> 00:01:48,159
roughly in the spring of this year

00:01:44,159 --> 00:01:51,520
and the project goals were stated

00:01:48,159 --> 00:01:53,840
as providing out-of-the-box security

00:01:51,520 --> 00:01:55,119
for each iot and infrastructure edge

00:01:53,840 --> 00:01:58,240
devices

00:01:55,119 --> 00:02:00,640
and provide a reference

00:01:58,240 --> 00:02:01,520
platform security implementation for

00:02:00,640 --> 00:02:04,960
cortex-a

00:02:01,520 --> 00:02:07,520
devices including a set of standard

00:02:04,960 --> 00:02:10,000
platform route of trust services that

00:02:07,520 --> 00:02:12,560
would be required

00:02:10,000 --> 00:02:15,040
or that would support enabling devices

00:02:12,560 --> 00:02:18,080
to be psa certified

00:02:15,040 --> 00:02:18,640
and the whole implementation would be

00:02:18,080 --> 00:02:22,160
based

00:02:18,640 --> 00:02:27,360
on arms firmware framework for

00:02:22,160 --> 00:02:31,200
arm v8a or ffa in short

00:02:27,360 --> 00:02:35,120
just a quick recap on uh the

00:02:31,200 --> 00:02:37,760
security platform security offering uh

00:02:35,120 --> 00:02:38,720
that that provides the background for

00:02:37,760 --> 00:02:42,239
this project

00:02:38,720 --> 00:02:45,519
so it's a a four step process

00:02:42,239 --> 00:02:49,680
uh the last step of which

00:02:45,519 --> 00:02:53,440
is an independent security

00:02:49,680 --> 00:02:55,519
assessment to provide the psa

00:02:53,440 --> 00:02:58,959
certification

00:02:55,519 --> 00:02:59,760
our project focuses on the preceding

00:02:58,959 --> 00:03:04,159
step

00:02:59,760 --> 00:03:07,440
of having a open source reference

00:03:04,159 --> 00:03:09,840
implementation for some of the key

00:03:07,440 --> 00:03:14,800
security related components

00:03:09,840 --> 00:03:19,840
in such a device to

00:03:14,800 --> 00:03:19,840
enable certification at a later stage

00:03:20,239 --> 00:03:24,159
i think uh the background uh for today's

00:03:23,599 --> 00:03:25,840
uh

00:03:24,159 --> 00:03:27,760
a profile architecture is well

00:03:25,840 --> 00:03:31,519
understood and some of the

00:03:27,760 --> 00:03:33,680
drawbacks that uh the platform security

00:03:31,519 --> 00:03:35,599
initiatives are trying to address

00:03:33,680 --> 00:03:38,080
multiple vendors are present

00:03:35,599 --> 00:03:38,959
uh at all exceptional levels and there

00:03:38,080 --> 00:03:41,360
are uh

00:03:38,959 --> 00:03:42,560
dependencies between various software

00:03:41,360 --> 00:03:45,519
components

00:03:42,560 --> 00:03:46,400
uh normal world clients and their secure

00:03:45,519 --> 00:03:51,360
world

00:03:46,400 --> 00:03:51,360
service providers and various

00:03:51,840 --> 00:03:58,159
protocol layers that are specific to the

00:03:54,480 --> 00:04:01,599
trusted execution environments

00:03:58,159 --> 00:04:04,959
the way uh uh an important aim in

00:04:01,599 --> 00:04:07,360
in addressing these problems is to

00:04:04,959 --> 00:04:10,400
provide a standardized uh

00:04:07,360 --> 00:04:11,760
trusted firm there running at the higher

00:04:10,400 --> 00:04:15,200
exceptional levels

00:04:11,760 --> 00:04:16,000
and uh to have platform and secure

00:04:15,200 --> 00:04:19,840
services

00:04:16,000 --> 00:04:22,639
executing at the lowest and

00:04:19,840 --> 00:04:24,400
not the lowest possible exception levels

00:04:22,639 --> 00:04:27,440
with the least amount of privilege

00:04:24,400 --> 00:04:30,880
necessary for them to function and

00:04:27,440 --> 00:04:33,280
for them to run in isolated contacts

00:04:30,880 --> 00:04:35,840
where they are uh shielded from one

00:04:33,280 --> 00:04:35,840
another

00:04:36,720 --> 00:04:41,280
arms firmware framework uh describes a

00:04:39,840 --> 00:04:44,639
software architecture

00:04:41,280 --> 00:04:47,520
that aims at

00:04:44,639 --> 00:04:48,800
resolving these issues or aims at

00:04:47,520 --> 00:04:52,720
providing the means

00:04:48,800 --> 00:04:54,639
for solving these issues it introduces a

00:04:52,720 --> 00:04:56,400
few terms that i will be using

00:04:54,639 --> 00:04:59,440
throughout the presentation

00:04:56,400 --> 00:05:02,639
so the isolated contexts

00:04:59,440 --> 00:05:05,280
where sec where services are executed

00:05:02,639 --> 00:05:07,199
are called partitions which are virtual

00:05:05,280 --> 00:05:10,320
machines in the normal world

00:05:07,199 --> 00:05:11,759
and secure partitions in the secure

00:05:10,320 --> 00:05:14,240
world

00:05:11,759 --> 00:05:16,160
the attribute for one of these

00:05:14,240 --> 00:05:20,800
partitions is

00:05:16,160 --> 00:05:20,800
described as a partition manifest

00:05:21,120 --> 00:05:25,039
and both in the normal world and in the

00:05:23,759 --> 00:05:28,240
secure world

00:05:25,039 --> 00:05:30,479
there's one partition manager each

00:05:28,240 --> 00:05:32,160
for managing these partitions in the

00:05:30,479 --> 00:05:33,520
normal world that would be the

00:05:32,160 --> 00:05:36,960
hypervisor

00:05:33,520 --> 00:05:38,720
and in the secure world it's a component

00:05:36,960 --> 00:05:41,280
that's called the secure partition

00:05:38,720 --> 00:05:41,280
manager

00:05:41,440 --> 00:05:47,759
the firmware framework provides uh

00:05:44,560 --> 00:05:48,560
standard interfaces between all of these

00:05:47,759 --> 00:05:52,639
components

00:05:48,560 --> 00:05:56,400
and standardizes transport primitives

00:05:52,639 --> 00:06:00,080
for their interaction it also

00:05:56,400 --> 00:06:03,360
uh provides multiple configurations

00:06:00,080 --> 00:06:04,720
uh to cater for the needs of different

00:06:03,360 --> 00:06:07,319
hardware platforms

00:06:04,720 --> 00:06:08,560
and of course the important

00:06:07,319 --> 00:06:11,919
configurations

00:06:08,560 --> 00:06:15,280
for the market segments that

00:06:11,919 --> 00:06:16,800
our project is aiming for the rich iot

00:06:15,280 --> 00:06:19,759
and infrastructure edge

00:06:16,800 --> 00:06:21,280
devices are the ones where secure

00:06:19,759 --> 00:06:25,440
hypervise or layer

00:06:21,280 --> 00:06:25,440
is not present or is not used

00:06:26,000 --> 00:06:29,840
so what does uh the software

00:06:28,479 --> 00:06:33,039
architecture look like

00:06:29,840 --> 00:06:34,520
in that kind of a configuration in

00:06:33,039 --> 00:06:37,759
default

00:06:34,520 --> 00:06:40,560
specification so in that case the secure

00:06:37,759 --> 00:06:44,319
partitions are secure er0

00:06:40,560 --> 00:06:48,639
or user mode components and the spm

00:06:44,319 --> 00:06:51,680
component is split between a

00:06:48,639 --> 00:06:52,479
secure partition manager dispatcher

00:06:51,680 --> 00:06:55,199
component

00:06:52,479 --> 00:06:56,800
which relays messages between the normal

00:06:55,199 --> 00:06:59,280
world and the trusted world

00:06:56,800 --> 00:07:00,240
that is implemented as part of the er3

00:06:59,280 --> 00:07:03,039
firmware

00:07:00,240 --> 00:07:03,919
and the secure partition manager core

00:07:03,039 --> 00:07:06,960
component

00:07:03,919 --> 00:07:08,319
that manages secure partitions and which

00:07:06,960 --> 00:07:11,840
is implemented

00:07:08,319 --> 00:07:11,840
at secure el1

00:07:13,039 --> 00:07:18,319
so as the first step when launching the

00:07:16,080 --> 00:07:21,440
project was for us to create a

00:07:18,319 --> 00:07:24,240
proof of concept uh uh

00:07:21,440 --> 00:07:26,880
addressing the basic uh concepts in the

00:07:24,240 --> 00:07:30,240
firmware framework specification

00:07:26,880 --> 00:07:34,160
and uh the baseline for that uh

00:07:30,240 --> 00:07:35,199
proof of concept work is ote's 3.10.0

00:07:34,160 --> 00:07:39,440
release

00:07:35,199 --> 00:07:43,360
which already contains uh an spmc

00:07:39,440 --> 00:07:45,440
security l1 spmc configuration

00:07:43,360 --> 00:07:46,800
uh in this configuration the opti

00:07:45,440 --> 00:07:49,840
functionality itself

00:07:46,800 --> 00:07:50,560
is unchanged what's changed is the

00:07:49,840 --> 00:07:53,919
physical

00:07:50,560 --> 00:07:57,919
is the smc transport layer so the

00:07:53,919 --> 00:07:58,319
transport layer between the normal world

00:07:57,919 --> 00:08:01,599
and

00:07:58,319 --> 00:08:04,560
the secure world uh

00:08:01,599 --> 00:08:05,759
and therefore uh the component at

00:08:04,560 --> 00:08:07,759
securial

00:08:05,759 --> 00:08:09,520
three which is required to relay the

00:08:07,759 --> 00:08:14,080
messages so the

00:08:09,520 --> 00:08:15,280
uh opti dispatcher component at securia

00:08:14,080 --> 00:08:17,919
3 which was there

00:08:15,280 --> 00:08:20,720
previously could be replaced by this

00:08:17,919 --> 00:08:22,319
standard component the spm dispatcher

00:08:20,720 --> 00:08:26,400
component

00:08:22,319 --> 00:08:27,360
with this configuration opti

00:08:26,400 --> 00:08:30,720
functionality

00:08:27,360 --> 00:08:33,200
is implemented as a single logical

00:08:30,720 --> 00:08:34,080
secure partition running at the

00:08:33,200 --> 00:08:37,519
privileged

00:08:34,080 --> 00:08:38,560
security l1 layer and of course in the

00:08:37,519 --> 00:08:41,360
baseline

00:08:38,560 --> 00:08:41,760
there's no support for additional secure

00:08:41,360 --> 00:08:45,200
er

00:08:41,760 --> 00:08:48,880
zero isolated partitions uh

00:08:45,200 --> 00:08:52,320
which is why uh our team needed to

00:08:48,880 --> 00:08:55,680
start the proof of concept to

00:08:52,320 --> 00:08:56,560
work the proof of concept uh that we

00:08:55,680 --> 00:08:59,600
started

00:08:56,560 --> 00:09:03,279
is using the v8a architecture model

00:08:59,600 --> 00:09:06,399
as the development platform and so

00:09:03,279 --> 00:09:08,320
what does it include uh the proof of

00:09:06,399 --> 00:09:12,240
concept includes a

00:09:08,320 --> 00:09:16,800
minimal spmc based on the specification

00:09:12,240 --> 00:09:16,800
which manages multiple secure partitions

00:09:17,600 --> 00:09:21,120
to enable that it implements the virtual

00:09:20,240 --> 00:09:24,959
ffa

00:09:21,120 --> 00:09:28,560
abi at the svc conduit layer

00:09:24,959 --> 00:09:32,720
and to maintain compatibility

00:09:28,560 --> 00:09:36,720
and interoper interoperability with

00:09:32,720 --> 00:09:38,240
optis uh other components it keeps the

00:09:36,720 --> 00:09:41,200
implementation defined

00:09:38,240 --> 00:09:42,240
interface towards the privileged secure

00:09:41,200 --> 00:09:47,680
partition

00:09:42,240 --> 00:09:50,959
running of these standard functionality

00:09:47,680 --> 00:09:52,480
when choosing the initial design for

00:09:50,959 --> 00:09:57,440
secure partitions

00:09:52,480 --> 00:10:00,240
we took the example of that of early tas

00:09:57,440 --> 00:10:01,760
we created a library to build secure

00:10:00,240 --> 00:10:05,040
partitions against

00:10:01,760 --> 00:10:08,880
that would enable us to use ffa

00:10:05,040 --> 00:10:11,200
api functionality from the partitions

00:10:08,880 --> 00:10:14,560
we call that the live sp which from a

00:10:11,200 --> 00:10:18,160
functional perspective is similar to

00:10:14,560 --> 00:10:22,560
how tas are built against a

00:10:18,160 --> 00:10:26,079
leap ute uh

00:10:22,560 --> 00:10:26,959
and uh an important aspect in basing our

00:10:26,079 --> 00:10:29,680
design

00:10:26,959 --> 00:10:30,240
on earth that of early tas is the fact

00:10:29,680 --> 00:10:33,040
that

00:10:30,240 --> 00:10:33,920
those are deployed as part of the opti

00:10:33,040 --> 00:10:37,440
binary

00:10:33,920 --> 00:10:40,800
and started as within

00:10:37,440 --> 00:10:43,839
the opti initialization flow and since

00:10:40,800 --> 00:10:44,560
secure partitions are static entities

00:10:43,839 --> 00:10:47,920
they are not

00:10:44,560 --> 00:10:49,680
created or destroyed during run time

00:10:47,920 --> 00:10:51,200
not at least in this version of the

00:10:49,680 --> 00:10:52,880
specification the

00:10:51,200 --> 00:10:55,120
the one.host version of the

00:10:52,880 --> 00:10:58,320
specification

00:10:55,120 --> 00:11:00,880
so that will seem to be a good fit for

00:10:58,320 --> 00:11:03,600
our project to demonstrate

00:11:00,880 --> 00:11:06,640
all this functionality we created a

00:11:03,600 --> 00:11:12,839
minimal set of cryptographic operations

00:11:06,640 --> 00:11:17,360
uh in a securia zero secure partition

00:11:12,839 --> 00:11:20,640
and for for test purposes

00:11:17,360 --> 00:11:21,920
the initial patches uh for this proof of

00:11:20,640 --> 00:11:25,519
concept work

00:11:21,920 --> 00:11:28,399
uh were hosted uh

00:11:25,519 --> 00:11:29,440
are hosted on trustedfirmware.org

00:11:28,399 --> 00:11:32,000
garrett

00:11:29,440 --> 00:11:33,040
and they were made public and announced

00:11:32,000 --> 00:11:37,760
on the opti

00:11:33,040 --> 00:11:37,760
public mailing list at the end of july

00:11:37,920 --> 00:11:41,600
the ongoing verse work since that so for

00:11:40,880 --> 00:11:44,880
the

00:11:41,600 --> 00:11:45,519
for the third quarter and early next

00:11:44,880 --> 00:11:49,040
quarter

00:11:45,519 --> 00:11:51,920
uh time frame we're making strides on

00:11:49,040 --> 00:11:52,880
multiple work streams we're implementing

00:11:51,920 --> 00:11:56,639
an additional

00:11:52,880 --> 00:11:56,639
uh standard uh

00:11:57,360 --> 00:12:00,880
the internal trusted storage secure

00:11:59,920 --> 00:12:03,200
partition

00:12:00,880 --> 00:12:05,440
which includes a placeholder for a

00:12:03,200 --> 00:12:07,680
hardware driver

00:12:05,440 --> 00:12:08,720
it's only a placeholder at this moment

00:12:07,680 --> 00:12:12,000
because

00:12:08,720 --> 00:12:12,880
of course a storage back-end hardware

00:12:12,000 --> 00:12:16,000
driver is

00:12:12,880 --> 00:12:19,839
highly platform specific and we haven't

00:12:16,000 --> 00:12:19,839
addressed the intricacies of that

00:12:20,639 --> 00:12:26,560
another work stream is that we're uh

00:12:23,519 --> 00:12:29,760
focusing on decoupling the partition

00:12:26,560 --> 00:12:33,360
source and the build for build flow

00:12:29,760 --> 00:12:34,000
from that of od uh this is to highlight

00:12:33,360 --> 00:12:38,480
that

00:12:34,000 --> 00:12:41,360
secure partitions are meant to be

00:12:38,480 --> 00:12:42,079
standalone components and and and highly

00:12:41,360 --> 00:12:45,040
portable

00:12:42,079 --> 00:12:46,480
between various implementations of the

00:12:45,040 --> 00:12:49,760
spmc

00:12:46,480 --> 00:12:53,120
so because there should be no uh

00:12:49,760 --> 00:12:54,360
dependency other than the ones specified

00:12:53,120 --> 00:12:57,360
in the ffa

00:12:54,360 --> 00:12:57,360
specification

00:12:57,440 --> 00:13:03,600
we're also cleaning up the spmc

00:13:00,480 --> 00:13:06,639
code and

00:13:03,600 --> 00:13:11,040
starting to provide documentation

00:13:06,639 --> 00:13:13,760
test suits and a ci infrastructure so

00:13:11,040 --> 00:13:14,880
we're doing we're trying to do overall

00:13:13,760 --> 00:13:19,200
improvements

00:13:14,880 --> 00:13:19,200
to the whole developer experience

00:13:19,760 --> 00:13:26,160
the next steps which is the

00:13:23,680 --> 00:13:27,360
roughly the q4 time frame for the

00:13:26,160 --> 00:13:30,079
project

00:13:27,360 --> 00:13:31,440
uh we have a we are planning a

00:13:30,079 --> 00:13:34,959
consolidation

00:13:31,440 --> 00:13:35,680
so uh we're we will make an effort to

00:13:34,959 --> 00:13:39,199
upstream

00:13:35,680 --> 00:13:44,959
uh the spmc uh changes

00:13:39,199 --> 00:13:44,959
uh to the opti master repository

00:13:45,600 --> 00:13:51,279
also we're uh

00:13:48,800 --> 00:13:52,480
we will be working on a normal world

00:13:51,279 --> 00:13:56,240
application to

00:13:52,480 --> 00:13:58,399
demonstrate the usage and the usability

00:13:56,240 --> 00:14:03,120
of the platform root of trust services

00:13:58,399 --> 00:14:06,560
we have implemented by that time

00:14:03,120 --> 00:14:07,279
so to demonstrate that they are ready to

00:14:06,560 --> 00:14:10,560
fulfill

00:14:07,279 --> 00:14:13,680
a psa level one certification

00:14:10,560 --> 00:14:16,199
hopefully at the same time

00:14:13,680 --> 00:14:17,600
we will be launching some several

00:14:16,199 --> 00:14:20,240
investigations

00:14:17,600 --> 00:14:22,160
one into the attestation service which

00:14:20,240 --> 00:14:26,959
is clearly an important

00:14:22,160 --> 00:14:29,600
part of a secure device life cycle

00:14:26,959 --> 00:14:31,880
and also into hardware management and

00:14:29,600 --> 00:14:33,600
interrupt handling aspects of the ffa

00:14:31,880 --> 00:14:36,959
specification

00:14:33,600 --> 00:14:40,560
which are prerequisites to

00:14:36,959 --> 00:14:40,560
uh having a

00:14:40,800 --> 00:14:47,360
hardware backend platform root of trust

00:14:44,560 --> 00:14:49,600
hardware components mapped to dedicated

00:14:47,360 --> 00:14:52,800
platform secure partnerships

00:14:49,600 --> 00:14:55,839
to have them access controlled from a

00:14:52,800 --> 00:14:58,880
single secure partition each

00:14:55,839 --> 00:15:01,040
and so

00:14:58,880 --> 00:15:03,120
other partitions in the system would

00:15:01,040 --> 00:15:04,800
only ever get access to that hardware

00:15:03,120 --> 00:15:07,760
resource uh

00:15:04,800 --> 00:15:08,399
by calling a service from that secure

00:15:07,760 --> 00:15:13,519
that

00:15:08,399 --> 00:15:15,680
dedicated secure partition

00:15:13,519 --> 00:15:17,519
as for future directions and

00:15:15,680 --> 00:15:21,519
opportunities that we

00:15:17,519 --> 00:15:24,079
see for this project there are uh

00:15:21,519 --> 00:15:24,959
there's a plethora of activities that

00:15:24,079 --> 00:15:28,240
are uh

00:15:24,959 --> 00:15:30,720
still to be done or can be done uh

00:15:28,240 --> 00:15:31,279
and and and we're planning to address

00:15:30,720 --> 00:15:34,959
those

00:15:31,279 --> 00:15:37,360
uh but but it all depends on the

00:15:34,959 --> 00:15:39,279
interest and the bandwidth that we have

00:15:37,360 --> 00:15:41,839
uh

00:15:39,279 --> 00:15:42,480
one very important aspect is the

00:15:41,839 --> 00:15:44,639
packaging

00:15:42,480 --> 00:15:46,079
delivery authentication of secure

00:15:44,639 --> 00:15:49,040
partitions

00:15:46,079 --> 00:15:50,639
as i mentioned currently uh they are

00:15:49,040 --> 00:15:55,519
bundled together

00:15:50,639 --> 00:15:59,440
uh with the opti binary

00:15:55,519 --> 00:16:01,680
if we want to eliminate that dependency

00:15:59,440 --> 00:16:03,680
we have to look at the implications of

00:16:01,680 --> 00:16:05,360
that so an investigation needs to be

00:16:03,680 --> 00:16:07,440
launched into

00:16:05,360 --> 00:16:11,279
what the ramifications are for the boot

00:16:07,440 --> 00:16:14,800
flow authentication flow all of that

00:16:11,279 --> 00:16:18,079
another important area to explore

00:16:14,800 --> 00:16:21,519
is 32-bit support so support for

00:16:18,079 --> 00:16:26,160
uh 32-bit secure partitions and

00:16:21,519 --> 00:16:29,519
service protocols based on 32-bit

00:16:26,160 --> 00:16:32,639
partition code and of course for a

00:16:29,519 --> 00:16:34,399
32-bit only platform to have an

00:16:32,639 --> 00:16:37,600
implementation of the spm

00:16:34,399 --> 00:16:38,320
core component in supervisor mode so

00:16:37,600 --> 00:16:42,560
built in

00:16:38,320 --> 00:16:44,959
that you built for 32 bit

00:16:42,560 --> 00:16:46,079
from a security point of view it's very

00:16:44,959 --> 00:16:48,959
important

00:16:46,079 --> 00:16:50,720
to focus on reduced uh privileged

00:16:48,959 --> 00:16:54,720
footprint in the system

00:16:50,720 --> 00:16:57,839
so one possible course of action

00:16:54,720 --> 00:17:00,399
is to look at how existing the

00:16:57,839 --> 00:17:02,399
functionality can be mapped to root of

00:17:00,399 --> 00:17:05,199
trust secure partitions

00:17:02,399 --> 00:17:05,600
so that some parts of the of the kernel

00:17:05,199 --> 00:17:08,400
can

00:17:05,600 --> 00:17:08,400
optionally be

00:17:08,640 --> 00:17:15,280
mapped to secure er0

00:17:11,839 --> 00:17:18,720
execution which is

00:17:15,280 --> 00:17:21,600
which which would uh help us

00:17:18,720 --> 00:17:24,640
reduce the attack service at privileged

00:17:21,600 --> 00:17:24,640
exceptional levels

00:17:24,880 --> 00:17:30,320
some ways in which we can focus on the

00:17:27,679 --> 00:17:34,240
portability of secure partitions

00:17:30,320 --> 00:17:35,600
so as i uh mentioned the secure

00:17:34,240 --> 00:17:38,720
partitions themselves

00:17:35,600 --> 00:17:40,960
are independent of the underlying

00:17:38,720 --> 00:17:44,720
software architecture

00:17:40,960 --> 00:17:47,280
uh the as long as

00:17:44,720 --> 00:17:48,000
a secure partition manager core

00:17:47,280 --> 00:17:51,360
component

00:17:48,000 --> 00:17:55,280
implements the virtual ffa api

00:17:51,360 --> 00:17:56,799
at the svc layer and it can parse the

00:17:55,280 --> 00:18:00,000
partition

00:17:56,799 --> 00:18:01,679
dependencies and and and the manifest of

00:18:00,000 --> 00:18:05,039
the partition

00:18:01,679 --> 00:18:08,320
it can be executed on that particular uh

00:18:05,039 --> 00:18:10,960
setup and so

00:18:08,320 --> 00:18:13,919
some options to explore there are

00:18:10,960 --> 00:18:15,039
securia zero global platforms adaptation

00:18:13,919 --> 00:18:18,000
layer

00:18:15,039 --> 00:18:20,240
so that tas can actually be wrapped into

00:18:18,000 --> 00:18:23,440
secure partitions

00:18:20,240 --> 00:18:24,799
to have as the standalone mm

00:18:23,440 --> 00:18:28,400
functionality

00:18:24,799 --> 00:18:32,160
uh ported to our sd

00:18:28,400 --> 00:18:36,480
spm implementation there's already

00:18:32,160 --> 00:18:39,120
an activity uh that prepares us for that

00:18:36,480 --> 00:18:41,200
so i will just there's a dedicated talk

00:18:39,120 --> 00:18:42,559
for that later so i would just briefly

00:18:41,200 --> 00:18:46,400
mention that

00:18:42,559 --> 00:18:48,640
since uh as part of that activity

00:18:46,400 --> 00:18:52,799
standalone mm functionality is

00:18:48,640 --> 00:18:56,080
implemented with the virtual ffa api

00:18:52,799 --> 00:18:58,960
as its protocol

00:18:56,080 --> 00:19:00,880
layer with uh other functionality in the

00:18:58,960 --> 00:19:03,919
system

00:19:00,880 --> 00:19:07,840
it should be relatively easy to

00:19:03,919 --> 00:19:08,840
uh port that into our to integrate that

00:19:07,840 --> 00:19:12,400
into our

00:19:08,840 --> 00:19:16,000
solution of course another

00:19:12,400 --> 00:19:19,600
important aspect is uh

00:19:16,000 --> 00:19:21,600
that of uh future

00:19:19,600 --> 00:19:22,880
or later architectures newer

00:19:21,600 --> 00:19:26,240
architectures

00:19:22,880 --> 00:19:29,440
which do implement this securial two

00:19:26,240 --> 00:19:33,520
layer uh so the virtualization extension

00:19:29,440 --> 00:19:33,520
secure virtualization extension

00:19:34,080 --> 00:19:38,000
even in those cases uh the secure

00:19:37,280 --> 00:19:41,520
partitions

00:19:38,000 --> 00:19:44,160
that we're developing uh the platform

00:19:41,520 --> 00:19:44,880
security uh components that we're

00:19:44,160 --> 00:19:48,240
developing

00:19:44,880 --> 00:19:51,600
as part of this project can be reused

00:19:48,240 --> 00:19:52,000
uh and the framework that we're creating

00:19:51,600 --> 00:19:55,919
can be

00:19:52,000 --> 00:19:59,520
reused by adding a shim layer

00:19:55,919 --> 00:20:02,960
at securil1 which acts as a

00:19:59,520 --> 00:20:06,320
trampoline between the partition code

00:20:02,960 --> 00:20:10,559
and the spmc which in this case

00:20:06,320 --> 00:20:10,559
is executing at security

00:20:11,120 --> 00:20:18,000
uh there's also a dedicated talk

00:20:14,240 --> 00:20:19,120
on the virtual the secure virtualization

00:20:18,000 --> 00:20:21,600
so

00:20:19,120 --> 00:20:23,200
it will be explored in more detail on

00:20:21,600 --> 00:20:26,320
that

00:20:23,200 --> 00:20:30,000
to summarize uh we're looking

00:20:26,320 --> 00:20:31,200
at creating a software architecture

00:20:30,000 --> 00:20:34,480
agnostic

00:20:31,200 --> 00:20:38,880
uh root of trust partitions

00:20:34,480 --> 00:20:41,919
a referenced in reference implementation

00:20:38,880 --> 00:20:44,240
catering for the requirements

00:20:41,919 --> 00:20:46,000
that we understand the rich iot and

00:20:44,240 --> 00:20:49,039
infrastructure edge

00:20:46,000 --> 00:20:50,799
devices may have with a focus on this

00:20:49,039 --> 00:20:54,159
psa certified

00:20:50,799 --> 00:20:57,039
program uh if you want to

00:20:54,159 --> 00:20:57,760
have get a bigger picture view of how

00:20:57,039 --> 00:21:01,520
this fits

00:20:57,760 --> 00:21:04,080
into the wider trusted firmware

00:21:01,520 --> 00:21:04,880
project just stay tuned for the next

00:21:04,080 --> 00:21:08,880
talk

00:21:04,880 --> 00:21:09,600
uh and uh if you want to provide

00:21:08,880 --> 00:21:13,679
feedback

00:21:09,600 --> 00:21:16,960
uh we are on the optimating list

00:21:13,679 --> 00:21:20,080
and so feel free to reach out and

00:21:16,960 --> 00:21:22,799
for your active reviews i just attached

00:21:20,080 --> 00:21:26,240
a link in the presentation

00:21:22,799 --> 00:21:31,840
and i don't know if we have the time

00:21:26,240 --> 00:21:31,840
for some questions we should have

00:21:32,960 --> 00:21:36,799
uh yes me close this is derrick miller

00:21:35,919 --> 00:21:39,120
uh with uh

00:21:36,799 --> 00:21:40,400
arm research nice uh nice to talk to you

00:21:39,120 --> 00:21:43,919
again

00:21:40,400 --> 00:21:45,919
yeah hi um one question that we had when

00:21:43,919 --> 00:21:49,120
writing the internal trusted storage

00:21:45,919 --> 00:21:49,760
um uh apis and requirements was what

00:21:49,120 --> 00:21:51,360
what does

00:21:49,760 --> 00:21:52,880
internal trusted storage look like on

00:21:51,360 --> 00:21:53,840
the a-class you mentioned the driver

00:21:52,880 --> 00:21:56,640
earlier do you

00:21:53,840 --> 00:21:58,000
have a better answer for that now or any

00:21:56,640 --> 00:21:59,840
answer i mean i i

00:21:58,000 --> 00:22:02,880
i don't know i never knew what the

00:21:59,840 --> 00:22:02,880
answer was so i'm curious

00:22:03,280 --> 00:22:11,200
so uh what exactly

00:22:07,200 --> 00:22:14,400
uh the internal the storage backend

00:22:11,200 --> 00:22:16,320
for a particular a profile device is

00:22:14,400 --> 00:22:18,000
no i don't think i have a the

00:22:16,320 --> 00:22:22,720
appropriate answer

00:22:18,000 --> 00:22:26,320
at this point because we have yet to uh

00:22:22,720 --> 00:22:30,000
find uh the first uh

00:22:26,320 --> 00:22:30,960
platform uh first physical hardware

00:22:30,000 --> 00:22:33,200
devices

00:22:30,960 --> 00:22:34,640
to port this on we're as i mentioned

00:22:33,200 --> 00:22:37,840
working on the

00:22:34,640 --> 00:22:41,200
architecture model we do have

00:22:37,840 --> 00:22:45,280
some ideas on from some partners on

00:22:41,200 --> 00:22:45,280
on what that might look like but uh

00:22:45,760 --> 00:22:49,360
i don't think that we're at a stage

00:22:47,760 --> 00:22:51,919
where

00:22:49,360 --> 00:22:55,200
we're very very where we can have a

00:22:51,919 --> 00:22:58,480
meaningful conversation about that

00:22:55,200 --> 00:23:01,919
okay thanks but but but but certainly

00:22:58,480 --> 00:23:04,960
so currently our implementation is a

00:23:01,919 --> 00:23:07,679
ram file ram based file system

00:23:04,960 --> 00:23:09,280
uh but but we're trying to have a

00:23:07,679 --> 00:23:12,799
hardware abstraction there

00:23:09,280 --> 00:23:14,159
and so so any partner can fill in the

00:23:12,799 --> 00:23:17,679
appropriate backend

00:23:14,159 --> 00:23:23,840
uh as needed

00:23:17,679 --> 00:23:23,840
okay thank you sure

00:23:27,120 --> 00:23:30,480
so any other questions i don't see

00:23:29,440 --> 00:23:34,159
questions on the

00:23:30,480 --> 00:23:37,840
chat nor

00:23:34,159 --> 00:23:37,840
on slack

00:23:38,320 --> 00:23:43,440
a couple of people raised their hand i

00:23:39,840 --> 00:23:46,480
just um allowed them to talk

00:23:43,440 --> 00:23:48,640
hi hi this is varun

00:23:46,480 --> 00:23:50,640
so i had one question this is related to

00:23:48,640 --> 00:23:51,120
the previous question about the storage

00:23:50,640 --> 00:23:54,400
so

00:23:51,120 --> 00:23:55,440
um i mean rpmb is one storage right so

00:23:54,400 --> 00:23:58,720
maybe i did not

00:23:55,440 --> 00:24:01,600
get the question uh maybe but uh

00:23:58,720 --> 00:24:04,159
the secure storage right so rpmb is one

00:24:01,600 --> 00:24:08,480
of the solutions that is being used

00:24:04,159 --> 00:24:09,760
um so what other storage models are

00:24:08,480 --> 00:24:12,880
being explored

00:24:09,760 --> 00:24:17,039
i would like to understand so

00:24:12,880 --> 00:24:21,039
at this point we're creating uh

00:24:17,039 --> 00:24:24,320
the hardware independent uh

00:24:21,039 --> 00:24:27,760
platform code uh so we're

00:24:24,320 --> 00:24:29,120
we're at this point it's not info in in

00:24:27,760 --> 00:24:31,760
scope for us

00:24:29,120 --> 00:24:34,159
to to to look at the various back-end

00:24:31,760 --> 00:24:34,159
options

00:24:39,039 --> 00:24:45,440
okay um yeah but

00:24:43,039 --> 00:24:46,960
i just want one clarification that rpmb

00:24:45,440 --> 00:24:48,240
is one of the backends that is already

00:24:46,960 --> 00:24:50,880
being used

00:24:48,240 --> 00:24:52,960
right the op uh the rpmp solution with

00:24:50,880 --> 00:24:55,120
the ammc so that is

00:24:52,960 --> 00:24:56,400
uh i mean that is one option that we

00:24:55,120 --> 00:25:00,559
have

00:24:56,400 --> 00:25:00,559
and uh i mean what other

00:25:01,840 --> 00:25:06,880
okay so fine so i just wanted to clarify

00:25:04,640 --> 00:25:10,000
that thank you

00:25:06,880 --> 00:25:11,919
yeah essentially uh any storage backend

00:25:10,000 --> 00:25:15,679
that fulfills the requirements

00:25:11,919 --> 00:25:16,720
uh and and that some of the partners

00:25:15,679 --> 00:25:19,200
find feasible

00:25:16,720 --> 00:25:19,840
should fit the bill uh i don't know if

00:25:19,200 --> 00:25:22,799
they have

00:25:19,840 --> 00:25:23,360
a dedicated store or something like that

00:25:22,799 --> 00:25:27,440
uh

00:25:23,360 --> 00:25:27,440

YouTube URL: https://www.youtube.com/watch?v=GriSaAsN4x0


