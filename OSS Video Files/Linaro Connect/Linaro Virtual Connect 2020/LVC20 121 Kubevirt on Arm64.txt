Title: LVC20 121 Kubevirt on Arm64
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	Kubevirt on Arm64

KubeVirt is a virtual machine management add-on for Kubernetes. The aim is to provide a common ground for virtualization solutions on top of Kubernetes. KubeVirt allows VMs to be run and managed as pods inside a Kubernetes cluster. It's much like the openstack.

I believe that kubevirt can be well integrated with the arm's ecology, which is extremely advantageous in certain specific scenarios, such as Android, Automotive field...

This presentation shows our work of enabling kubevirt on Arm and our plan for it. It also describes some specific features in kubevirt. Major features of kubevirt on Arm64 including:
1. basic features 2. sidecar, 3. migration 4. device-plugin ...

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-121-0.pdf
Captions: 
	00:00:00,719 --> 00:00:06,240
hi everyone good day

00:00:03,439 --> 00:00:07,520
uh thank you to attend this session my

00:00:06,240 --> 00:00:10,400
name is howling

00:00:07,520 --> 00:00:11,920
and now i'm working for arm today i'm

00:00:10,400 --> 00:00:15,200
glad to be here

00:00:11,920 --> 00:00:16,240
to talk something about kobe world um

00:00:15,200 --> 00:00:20,800
with my colleague

00:00:16,240 --> 00:00:20,800
bing so let's begin

00:00:23,039 --> 00:00:29,760
this is the agenda for today's speak

00:00:26,880 --> 00:00:30,480
firstly we will talk something a

00:00:29,760 --> 00:00:33,920
background

00:00:30,480 --> 00:00:37,840
about cubic words like what cubey word

00:00:33,920 --> 00:00:41,360
is why we need it then we will introduce

00:00:37,840 --> 00:00:44,719
cube word architecture networking and

00:00:41,360 --> 00:00:48,160
cdi component

00:00:44,719 --> 00:00:51,360
after that we will talk all progress

00:00:48,160 --> 00:00:52,879
for qb world on arm and the things we

00:00:51,360 --> 00:00:56,000
are going to do

00:00:52,879 --> 00:00:59,440
on arm finally we will do

00:00:56,000 --> 00:01:04,719
a small demo to show you how easily

00:00:59,440 --> 00:01:04,719
qb word can be used so let's go

00:01:06,159 --> 00:01:13,200
some audience may be new for qb words

00:01:10,000 --> 00:01:17,040
let me talk a little bit about what qb

00:01:13,200 --> 00:01:20,720
word is i list three concepts for

00:01:17,040 --> 00:01:25,040
cubic words basically it helps you

00:01:20,720 --> 00:01:27,119
to run virtual machine on kubernetes

00:01:25,040 --> 00:01:29,119
in another world you can control

00:01:27,119 --> 00:01:32,240
resource arrangements

00:01:29,119 --> 00:01:36,240
life cycle for virtual machine well

00:01:32,240 --> 00:01:39,280
kubernetes qb works helps you to

00:01:36,240 --> 00:01:42,320
connect resources that's necessary for

00:01:39,280 --> 00:01:45,680
virtual machine as you can see

00:01:42,320 --> 00:01:46,640
in the right picture qb world creates

00:01:45,680 --> 00:01:49,920
three custom

00:01:46,640 --> 00:01:53,280
resource kvm turn

00:01:49,920 --> 00:01:56,399
and re-host the net then

00:01:53,280 --> 00:01:57,119
qmu can use these custom resources to

00:01:56,399 --> 00:02:01,840
boot

00:01:57,119 --> 00:02:04,960
or config virtual machines

00:02:01,840 --> 00:02:08,399
also it use kubernetes components

00:02:04,960 --> 00:02:11,840
like sky scheduling storage

00:02:08,399 --> 00:02:14,720
networking monitoring and cli

00:02:11,840 --> 00:02:16,560
thus you can control and monitor virtual

00:02:14,720 --> 00:02:19,920
machines while kubernetes

00:02:16,560 --> 00:02:23,040
in a easy way but for

00:02:19,920 --> 00:02:24,640
virtual machine or gesturation we

00:02:23,040 --> 00:02:28,480
already get

00:02:24,640 --> 00:02:32,239
many good solutions like openstack

00:02:28,480 --> 00:02:32,239
why we need qb word

00:02:33,440 --> 00:02:38,239
as you can see here will a company need

00:02:37,440 --> 00:02:41,360
to deploy

00:02:38,239 --> 00:02:45,360
their service in container they and

00:02:41,360 --> 00:02:47,519
use kubernetes to maintain this workload

00:02:45,360 --> 00:02:48,640
their staff needs some knowledge on

00:02:47,519 --> 00:02:52,080
kubernetes

00:02:48,640 --> 00:02:55,680
like logging metrics monitoring

00:02:52,080 --> 00:02:59,120
and so on however

00:02:55,680 --> 00:02:59,680
in many cases company may need to manage

00:02:59,120 --> 00:03:03,760
both

00:02:59,680 --> 00:03:07,120
container workload and vm workload

00:03:03,760 --> 00:03:08,000
if company hosts another virtual machine

00:03:07,120 --> 00:03:12,000
work

00:03:08,000 --> 00:03:15,040
platform like openstack to handle the

00:03:12,000 --> 00:03:17,840
virtual machine workload

00:03:15,040 --> 00:03:20,800
the staff need knowledge on both system

00:03:17,840 --> 00:03:23,760
and the way to more work to do

00:03:20,800 --> 00:03:24,560
which means more cost for the company

00:03:23,760 --> 00:03:26,959
how about

00:03:24,560 --> 00:03:28,959
combining buying these two platform

00:03:26,959 --> 00:03:31,599
together

00:03:28,959 --> 00:03:32,319
kuby word comes out which make

00:03:31,599 --> 00:03:34,239
kubernetes

00:03:32,319 --> 00:03:36,000
control virtual machine workload

00:03:34,239 --> 00:03:40,640
possible

00:03:36,000 --> 00:03:44,080
let's have a close look on cubivert

00:03:40,640 --> 00:03:45,200
it is a process of building virtual

00:03:44,080 --> 00:03:49,519
machine vial

00:03:45,200 --> 00:03:53,439
tubulate the entry is

00:03:49,519 --> 00:03:57,439
could be ctl user post vm

00:03:53,439 --> 00:04:01,439
manifest 2 cluster as you can see here

00:03:57,439 --> 00:04:04,000
vm is defined in a yaml file

00:04:01,439 --> 00:04:05,280
this is similar to configuration file

00:04:04,000 --> 00:04:09,360
for normal ports

00:04:05,280 --> 00:04:09,680
in kubernetes the yaml file will later

00:04:09,360 --> 00:04:12,799
be

00:04:09,680 --> 00:04:18,079
decoded to post configuration

00:04:12,799 --> 00:04:18,079
and xml file for virtual machine

00:04:19,840 --> 00:04:26,880
then comes to vote controller

00:04:24,000 --> 00:04:28,960
from a high level perspective virtual

00:04:26,880 --> 00:04:31,800
controller

00:04:28,960 --> 00:04:34,240
word controller provides all the

00:04:31,800 --> 00:04:35,759
cluster-wide virtualization

00:04:34,240 --> 00:04:38,639
functionality

00:04:35,759 --> 00:04:40,080
it is responsible for monitoring the

00:04:38,639 --> 00:04:43,280
virtual machine

00:04:40,080 --> 00:04:46,120
and the customer resource and

00:04:43,280 --> 00:04:48,960
at the same time it's managing the

00:04:46,120 --> 00:04:51,440
associated ports

00:04:48,960 --> 00:04:54,960
the vote controller is responsible for

00:04:51,440 --> 00:04:58,240
creating and managing the life cycle of

00:04:54,960 --> 00:05:00,080
ports associated to virtual machine

00:04:58,240 --> 00:05:04,479
object

00:05:00,080 --> 00:05:05,680
in this case word controller observed

00:05:04,479 --> 00:05:08,560
that

00:05:05,680 --> 00:05:10,080
our ports for virtual machine instance

00:05:08,560 --> 00:05:13,360
got studied

00:05:10,080 --> 00:05:17,280
and updates the node name file filled

00:05:13,360 --> 00:05:21,280
in the virtual machine instance object

00:05:17,280 --> 00:05:24,800
now that the node name is set

00:05:21,280 --> 00:05:27,759
the responsibility translation to the

00:05:24,800 --> 00:05:30,160
word handler for the future filter

00:05:27,759 --> 00:05:30,160
action

00:05:31,520 --> 00:05:39,360
next is the word handler what handler is

00:05:35,600 --> 00:05:42,960
a kubernetes demo set

00:05:39,360 --> 00:05:44,000
which is needed to run on error workload

00:05:42,960 --> 00:05:47,280
host

00:05:44,000 --> 00:05:51,520
in the cluster it performs

00:05:47,280 --> 00:05:54,960
functions similar to those of kubulet

00:05:51,520 --> 00:05:55,280
where it is reactive and watching out

00:05:54,960 --> 00:05:59,759
for

00:05:55,280 --> 00:06:03,120
change in the vm object

00:05:59,759 --> 00:06:06,479
like boot purse or

00:06:03,120 --> 00:06:09,039
shutdown once changed are

00:06:06,479 --> 00:06:11,440
detected it will perform all the

00:06:09,039 --> 00:06:14,240
necessary operation to change

00:06:11,440 --> 00:06:15,840
a virtual machine to meet the required

00:06:14,240 --> 00:06:19,199
state

00:06:15,840 --> 00:06:20,000
in this case the word handler observes

00:06:19,199 --> 00:06:22,960
that

00:06:20,000 --> 00:06:23,840
a virtual machine instance got assigned

00:06:22,960 --> 00:06:27,360
to

00:06:23,840 --> 00:06:30,720
the host where it is running on

00:06:27,360 --> 00:06:33,039
and then it is using the

00:06:30,720 --> 00:06:34,160
vm virtual machine instance

00:06:33,039 --> 00:06:37,039
specification

00:06:34,160 --> 00:06:38,960
and signal knows creation of

00:06:37,039 --> 00:06:42,160
corresponding domain

00:06:38,960 --> 00:06:45,680
using a liberality is instance in the

00:06:42,160 --> 00:06:45,680
virtual machine instances

00:06:46,840 --> 00:06:51,919
ports

00:06:48,479 --> 00:06:55,680
finally it is vert

00:06:51,919 --> 00:06:57,759
launcher ports for every virtual machine

00:06:55,680 --> 00:07:02,080
object

00:06:57,759 --> 00:07:05,360
one virtual launcher port is created

00:07:02,080 --> 00:07:08,560
the main purpose of the water launcher

00:07:05,360 --> 00:07:11,520
ports is to provide the sig groups

00:07:08,560 --> 00:07:14,720
and name space ways which will be used

00:07:11,520 --> 00:07:17,440
to host the virtual machine process

00:07:14,720 --> 00:07:18,720
advert launcher ports contains all

00:07:17,440 --> 00:07:21,759
necessary pack

00:07:18,720 --> 00:07:25,680
package for virtual

00:07:21,759 --> 00:07:28,800
machine boots like libraries and cumule

00:07:25,680 --> 00:07:31,520
in this virtual machine booting process

00:07:28,800 --> 00:07:32,240
would road handler signal would launcher

00:07:31,520 --> 00:07:35,680
to start

00:07:32,240 --> 00:07:39,440
rvm by passing the vm's

00:07:35,680 --> 00:07:42,160
customer's crd customer resource object

00:07:39,440 --> 00:07:42,639
to the water launcher what a launcher

00:07:42,160 --> 00:07:45,759
then

00:07:42,639 --> 00:07:48,560
uses a local library instance

00:07:45,759 --> 00:07:51,039
within its container to start the

00:07:48,560 --> 00:07:55,039
virtual machine

00:07:51,039 --> 00:07:58,879
from there what launcher monitors the

00:07:55,039 --> 00:08:02,720
vm process once the vm process

00:07:58,879 --> 00:08:05,360
exceeds the volt launcher port would

00:08:02,720 --> 00:08:05,360
terminate

00:08:10,720 --> 00:08:15,199
now when it comes to could be worth

00:08:13,280 --> 00:08:18,560
lightworking

00:08:15,199 --> 00:08:21,599
could be worth supports bridge

00:08:18,560 --> 00:08:25,360
sl irp sr iov

00:08:21,599 --> 00:08:29,360
and the must-squealed networking type

00:08:25,360 --> 00:08:32,080
i take bridge as an example here

00:08:29,360 --> 00:08:33,360
as the virtual machine is warped in

00:08:32,080 --> 00:08:36,399
container

00:08:33,360 --> 00:08:39,839
so here is true level network

00:08:36,399 --> 00:08:42,240
firstly is between container and host

00:08:39,839 --> 00:08:44,480
second is between virtual machine and

00:08:42,240 --> 00:08:48,640
the container

00:08:44,480 --> 00:08:53,040
first first layer cni creates

00:08:48,640 --> 00:08:56,399
network between container and host

00:08:53,040 --> 00:08:59,519
in this picture saying i create

00:08:56,399 --> 00:09:01,760
network interface cni0 out of the

00:08:59,519 --> 00:09:06,800
container

00:09:01,760 --> 00:09:10,800
and eth 0 in the container

00:09:06,800 --> 00:09:14,160
and use v-e-t-h pair to connect them

00:09:10,800 --> 00:09:17,720
in the container labor

00:09:14,160 --> 00:09:21,440
creates a bridge and the link

00:09:17,720 --> 00:09:23,920
eth0 in the container and the eth-0

00:09:21,440 --> 00:09:23,920
of am

00:09:24,800 --> 00:09:28,880
but here is a problem how virtual

00:09:27,600 --> 00:09:33,839
machine get ip

00:09:28,880 --> 00:09:33,839
from kubernetes or in another world

00:09:34,000 --> 00:09:38,160
how the assigned ip passthrough

00:09:36,720 --> 00:09:41,279
container

00:09:38,160 --> 00:09:42,240
layer and the received by virtual

00:09:41,279 --> 00:09:45,200
machine

00:09:42,240 --> 00:09:46,560
the answer is dhcp server in the

00:09:45,200 --> 00:09:49,600
container

00:09:46,560 --> 00:09:52,959
the dhcp is modified by

00:09:49,600 --> 00:09:56,560
voter launcher it gets the allo

00:09:52,959 --> 00:10:00,000
allocated ip from kubernetes

00:09:56,560 --> 00:10:05,440
then vm requires dhcp service

00:10:00,000 --> 00:10:11,200
to get ip thus server pass the ip2vm

00:10:05,440 --> 00:10:11,200
thus vm can't get ip from kubernetes

00:10:11,680 --> 00:10:15,279
so this is basically how could be

00:10:14,720 --> 00:10:19,279
working

00:10:15,279 --> 00:10:22,800
light working works next

00:10:19,279 --> 00:10:25,600
let's go to kubernetes api

00:10:22,800 --> 00:10:27,040
here i'm not going to talk too much

00:10:25,600 --> 00:10:30,720
detail about it

00:10:27,040 --> 00:10:34,240
but give you a general idea what it is

00:10:30,720 --> 00:10:37,680
kubernetes cdi is a tool that helps you

00:10:34,240 --> 00:10:40,240
to build virtual machine image volume

00:10:37,680 --> 00:10:42,800
thus you can put your own virtual

00:10:40,240 --> 00:10:46,160
machine viral could be worked

00:10:42,800 --> 00:10:49,920
generally speaking it morphs a

00:10:46,160 --> 00:10:52,640
virtual machine image into a resistant

00:10:49,920 --> 00:10:55,839
volume clan

00:10:52,640 --> 00:10:59,120
or in short pvc

00:10:55,839 --> 00:11:02,640
as you can see here when you boot up

00:10:59,120 --> 00:11:05,920
vm while could be vert

00:11:02,640 --> 00:11:10,320
vm image pvc is mounted

00:11:05,920 --> 00:11:13,519
as container disk into ports

00:11:10,320 --> 00:11:16,560
the virtual machine fill like uh

00:11:13,519 --> 00:11:17,760
fendorate or qco2 can be seen in the

00:11:16,560 --> 00:11:21,279
container

00:11:17,760 --> 00:11:24,880
and the liberate can boot from the

00:11:21,279 --> 00:11:28,000
boot vm from the image

00:11:24,880 --> 00:11:31,519
okay i have finished the talking on

00:11:28,000 --> 00:11:34,720
could be worth basic futures

00:11:31,519 --> 00:11:37,600
but beyond these features qb works

00:11:34,720 --> 00:11:37,839
also have many additional features that

00:11:37,600 --> 00:11:41,519
are

00:11:37,839 --> 00:11:44,880
essential for virtual machines workloads

00:11:41,519 --> 00:11:48,160
like leave migration huge page

00:11:44,880 --> 00:11:52,079
device province and sidecar

00:11:48,160 --> 00:11:54,639
we may talk about this future next time

00:11:52,079 --> 00:11:55,440
now let's welcome my colleague bing to

00:11:54,639 --> 00:11:58,959
talk about

00:11:55,440 --> 00:11:59,360
some excellent achievements and the idea

00:11:58,959 --> 00:12:03,279
for

00:11:59,360 --> 00:12:03,279
kuby world automotive

00:12:06,880 --> 00:12:15,040
hello everyone this is lupin from arm

00:12:12,000 --> 00:12:18,639
let me introduce some more features that

00:12:15,040 --> 00:12:21,680
we think are useful for arm platform

00:12:18,639 --> 00:12:24,000
at present we feel that the edge

00:12:21,680 --> 00:12:27,440
computing and the automotive domain

00:12:24,000 --> 00:12:31,279
is very important for um in the future

00:12:27,440 --> 00:12:33,839
so we are investigating this new domain

00:12:31,279 --> 00:12:34,959
in the process we found that could be

00:12:33,839 --> 00:12:38,959
world may bring

00:12:34,959 --> 00:12:41,920
some new changes to this new field

00:12:38,959 --> 00:12:44,399
please look at the right side this is a

00:12:41,920 --> 00:12:48,240
typical hypervisor solution for

00:12:44,399 --> 00:12:50,079
edge computing and automotive domain

00:12:48,240 --> 00:12:52,000
there are two typical guest virtual

00:12:50,079 --> 00:12:54,240
machines in this case

00:12:52,000 --> 00:12:55,279
linux water machine and android motor

00:12:54,240 --> 00:12:59,120
machine

00:12:55,279 --> 00:13:03,519
and in this case the hypervisor is zen

00:12:59,120 --> 00:13:06,800
currently copy water only support km

00:13:03,519 --> 00:13:10,959
as we know so for this case

00:13:06,800 --> 00:13:13,920
i added the zen support for kuwait

00:13:10,959 --> 00:13:14,399
and have successfully to use copyword to

00:13:13,920 --> 00:13:18,000
manage

00:13:14,399 --> 00:13:22,160
the life cycle of zen voting machines

00:13:18,000 --> 00:13:25,040
in kubernetes let's see the next slide

00:13:22,160 --> 00:13:25,040
for more reference

00:13:28,240 --> 00:13:36,800
please see the log as reference we added

00:13:31,680 --> 00:13:38,240
the zen incorporate as the first step

00:13:36,800 --> 00:13:39,839
please see the first picture as

00:13:38,240 --> 00:13:43,519
reference

00:13:39,839 --> 00:13:47,680
in the first picture it means this basic

00:13:43,519 --> 00:13:52,639
specific kubernetes node support zen

00:13:47,680 --> 00:13:56,320
and we can deploy up to 110 zen

00:13:52,639 --> 00:13:59,360
volt machines in this specific

00:13:56,320 --> 00:14:02,800
quantities node then we

00:13:59,360 --> 00:14:05,360
optimize the report pods

00:14:02,800 --> 00:14:06,560
so finally as you see in the second

00:14:05,360 --> 00:14:09,519
picture

00:14:06,560 --> 00:14:10,079
we can successfully deploy them water

00:14:09,519 --> 00:14:13,360
machines

00:14:10,079 --> 00:14:17,040
by quote on arm platform

00:14:13,360 --> 00:14:20,399
also if we kill the zone water machine

00:14:17,040 --> 00:14:23,199
manually kubernetes will deploy it

00:14:20,399 --> 00:14:23,199
in a short time

00:14:28,399 --> 00:14:32,720
so let's see what what we have done and

00:14:31,040 --> 00:14:37,040
what's going going

00:14:32,720 --> 00:14:39,839
i list uh several rough stories here

00:14:37,040 --> 00:14:40,240
the first one is that currently we can

00:14:39,839 --> 00:14:42,880
run

00:14:40,240 --> 00:14:45,760
kubota on arm platform to achieve some

00:14:42,880 --> 00:14:48,800
basic control of water machines

00:14:45,760 --> 00:14:52,000
like life cycle management

00:14:48,800 --> 00:14:54,959
this is our first step on

00:14:52,000 --> 00:14:54,959
on this project

00:14:55,120 --> 00:14:59,839
and the patches have been in the

00:14:57,279 --> 00:14:59,839
upstream

00:15:00,000 --> 00:15:03,920
later i will show the demo about this

00:15:02,160 --> 00:15:06,959
case

00:15:03,920 --> 00:15:09,199
the second one is that we added the

00:15:06,959 --> 00:15:12,639
zensport for copyword

00:15:09,199 --> 00:15:17,279
just like the first job

00:15:12,639 --> 00:15:22,240
we have enabled the basic control

00:15:17,279 --> 00:15:22,240
for zen water machines by copyright

00:15:22,480 --> 00:15:26,720
and the last one is that we are trying

00:15:25,519 --> 00:15:30,160
to enable

00:15:26,720 --> 00:15:32,079
the ci testing on arm platform including

00:15:30,160 --> 00:15:35,440
enabling the kubernetes

00:15:32,079 --> 00:15:36,160
pro job or arm platform also we have

00:15:35,440 --> 00:15:41,839
some

00:15:36,160 --> 00:15:41,839
patches in upstream

00:15:44,160 --> 00:15:49,040
okay let's see uh our next plan for

00:15:47,120 --> 00:15:52,079
copyright on arm platform

00:15:49,040 --> 00:15:54,880
i listed four stories here

00:15:52,079 --> 00:15:56,320
the first one is that we need to add

00:15:54,880 --> 00:15:59,920
device plugins for the

00:15:56,320 --> 00:16:00,639
arm as we know kubernetes is become a

00:15:59,920 --> 00:16:03,680
large

00:16:00,639 --> 00:16:07,360
ecosystem and the device tracking is an

00:16:03,680 --> 00:16:10,399
important key features in this ecosystem

00:16:07,360 --> 00:16:10,880
such as we can use device plugins to

00:16:10,399 --> 00:16:14,079
provide

00:16:10,880 --> 00:16:14,880
gpu devices into many projects like such

00:16:14,079 --> 00:16:17,440
as

00:16:14,880 --> 00:16:18,480
deploy android in kubernetes such as

00:16:17,440 --> 00:16:21,759
deploy

00:16:18,480 --> 00:16:24,000
photo well in kubernetes

00:16:21,759 --> 00:16:25,920
this feature is very important for

00:16:24,000 --> 00:16:28,959
android in kubernetes and

00:16:25,920 --> 00:16:32,959
automotive domain

00:16:28,959 --> 00:16:35,759
so we should enable it of course

00:16:32,959 --> 00:16:38,560
and the second one is that as we know

00:16:35,759 --> 00:16:42,880
sidecar feature is a fundamental feature

00:16:38,560 --> 00:16:45,519
for swiss mesh the service mesh

00:16:42,880 --> 00:16:46,800
has become more and more popular

00:16:45,519 --> 00:16:51,040
especially in some

00:16:46,800 --> 00:16:55,279
production domain such as in cooper flow

00:16:51,040 --> 00:16:58,000
such as in automotive domain

00:16:55,279 --> 00:16:59,120
if we enable this feature on arm we can

00:16:58,000 --> 00:17:05,839
deploy copyright

00:16:59,120 --> 00:17:05,839
to more scenarios related to swiss mesh

00:17:06,559 --> 00:17:11,520
the third one is live migration line

00:17:09,600 --> 00:17:14,480
migration is a process

00:17:11,520 --> 00:17:15,280
during which a running virtual machine

00:17:14,480 --> 00:17:18,720
instance

00:17:15,280 --> 00:17:21,839
moves to another computer node why

00:17:18,720 --> 00:17:25,600
the guest workload continues to run

00:17:21,839 --> 00:17:28,079
and remain accessible the concept of

00:17:25,600 --> 00:17:31,039
right migration is already well known

00:17:28,079 --> 00:17:33,039
in virtual virtualization domain and the

00:17:31,039 --> 00:17:36,160
enables administrators

00:17:33,039 --> 00:17:37,600
to keep a user workloads running why the

00:17:36,160 --> 00:17:40,400
servers can be moved

00:17:37,600 --> 00:17:41,440
for any reason such as hardware

00:17:40,400 --> 00:17:44,799
maintenance

00:17:41,440 --> 00:17:47,280
such as power management kubernetes

00:17:44,799 --> 00:17:48,480
also support for virtual machine

00:17:47,280 --> 00:17:51,600
migration with

00:17:48,480 --> 00:17:54,880
within kubernetes

00:17:51,600 --> 00:17:57,600
also we will do more investigation in

00:17:54,880 --> 00:17:58,320
new domains such as automotive age

00:17:57,600 --> 00:18:02,799
computing

00:17:58,320 --> 00:18:05,840
and iot we believe that quote

00:18:02,799 --> 00:18:08,400
will bring new changes into these

00:18:05,840 --> 00:18:08,400
new domains

00:18:12,320 --> 00:18:17,679
finally i hope to use a demo to choose

00:18:15,360 --> 00:18:22,160
what machine lifecycle management

00:18:17,679 --> 00:18:22,160
by the by using quote on arm platform

00:18:24,240 --> 00:18:29,840
let's share my screen

00:18:42,000 --> 00:18:44,320
hello

00:18:48,160 --> 00:18:57,840
hello everyone this is uh this is an

00:18:51,440 --> 00:18:57,840
arm server you see

00:19:06,480 --> 00:19:13,600
okay uh we have deployed

00:19:10,880 --> 00:19:14,799
the copywater successfully on this

00:19:13,600 --> 00:19:17,600
specific

00:19:14,799 --> 00:19:17,600
arm server

00:19:22,880 --> 00:19:27,600
okay we can see some liberal water

00:19:25,760 --> 00:19:31,440
products

00:19:27,600 --> 00:19:33,679
already deployed in this kubernetes

00:19:31,440 --> 00:19:35,280
firstly i will show the crt in

00:19:33,679 --> 00:19:38,720
kubernetes

00:19:35,280 --> 00:19:42,240
coupe what use uses crd to increase

00:19:38,720 --> 00:19:47,360
the resource type of virtual machines

00:19:42,240 --> 00:19:47,360
instance the short name for it is vmi

00:19:47,440 --> 00:19:52,559
quickbooks you use the canonies image

00:19:50,160 --> 00:19:54,000
registry to create virtual machines and

00:19:52,559 --> 00:19:57,440
provide the virtual machine

00:19:54,000 --> 00:19:57,760
lifecycle management if covered water

00:19:57,440 --> 00:20:00,480
was

00:19:57,760 --> 00:20:01,039
successfully deployed either we can see

00:20:00,480 --> 00:20:04,840
the

00:20:01,039 --> 00:20:07,840
vmi in crd so let's check the

00:20:04,840 --> 00:20:07,840
cid

00:20:08,880 --> 00:20:13,520
we can see the virtual machine instance

00:20:11,360 --> 00:20:20,320
here

00:20:13,520 --> 00:20:23,760
then let's check the vmi crd

00:20:20,320 --> 00:20:26,640
so it means we have deployed

00:20:23,760 --> 00:20:27,360
an virtual machine so saved successfully

00:20:26,640 --> 00:20:31,840
by

00:20:27,360 --> 00:20:35,440
quote this new watch machine's name is

00:20:31,840 --> 00:20:38,799
vmi fedora and the status

00:20:35,440 --> 00:20:40,320
is running this means that this water

00:20:38,799 --> 00:20:43,360
machine works well on this

00:20:40,320 --> 00:20:46,840
specific kubernetes nodes and

00:20:43,360 --> 00:20:49,840
here this is the ip for this new virtual

00:20:46,840 --> 00:20:49,840
machine

00:20:50,960 --> 00:20:55,039
okay let's try to access this watch

00:20:53,280 --> 00:20:57,280
machine

00:20:55,039 --> 00:20:58,159
copywriter provide us a water machine

00:20:57,280 --> 00:21:00,720
control tool

00:20:58,159 --> 00:21:03,840
we can use this tool to access this

00:21:00,720 --> 00:21:03,840
virtual machine

00:21:04,240 --> 00:21:20,799
like this

00:21:17,520 --> 00:21:22,799
okay it's work firstly

00:21:20,799 --> 00:21:25,440
let's check the architecture of this

00:21:22,799 --> 00:21:25,440
virtual machine

00:21:26,320 --> 00:21:30,400
yeah it's

00:21:27,600 --> 00:21:34,720
[Music]

00:21:30,400 --> 00:21:37,760
machine then let's check the networking

00:21:34,720 --> 00:21:37,760
in this virtual machine

00:21:38,240 --> 00:21:44,400
okay the ip address is is okay and

00:21:41,520 --> 00:21:47,039
then let's use the pin to check the

00:21:44,400 --> 00:21:47,039
networking

00:21:50,559 --> 00:21:54,400
yes the networking is fine

00:21:55,039 --> 00:21:59,840
so let's quit the automation

00:22:09,200 --> 00:22:13,840
so i think the demo is finished

00:22:13,919 --> 00:22:17,440

YouTube URL: https://www.youtube.com/watch?v=4A_qUTkQHdA


