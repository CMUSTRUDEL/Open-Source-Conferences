Title: LVC20 118 SCMI server in TEE
Publication date: 2020-10-08
Playlist: Linaro Virtual Connect 2020
Description: 
	SCMI server in TEE
The System Control and Management Interface (SCMI) is a set of operating system-independent software interfaces that have been originally specified to standardize the interface between Application Processors and the power coprocessor. But there are situations where we can't rely on such a power coprocessor. In such a case, the SCMI server has to run a secured partition like OP-TEE. This presentation will describe the status of our PoC of a SCMI server running as an OP-TEE TA. We will present the design, what is already available, the next features to be added and also how this could be extended to other UCs.
Captions: 
	00:00:00,799 --> 00:00:03,439
hi everybody thanks for joining this

00:00:02,879 --> 00:00:08,080
session

00:00:03,439 --> 00:00:12,320
so this talk uh will give you a status

00:00:08,080 --> 00:00:15,440
on the work that jen and i are

00:00:12,320 --> 00:00:18,640
are doing to make a an scmi

00:00:15,440 --> 00:00:20,160
server running in a trusted environment

00:00:18,640 --> 00:00:22,800
so we have work on this so we are

00:00:20,160 --> 00:00:26,080
working with other people but

00:00:22,800 --> 00:00:27,359
but for this part it's mainly yetian and

00:00:26,080 --> 00:00:30,560
i who have worked

00:00:27,359 --> 00:00:33,440
the goal is really to put an smi server

00:00:30,560 --> 00:00:35,680
in a trusted environment

00:00:33,440 --> 00:00:38,399
and we'll go through what we have done

00:00:35,680 --> 00:00:42,559
so far and what still remains to be done

00:00:38,399 --> 00:00:45,520
there is also lit project tab on the

00:00:42,559 --> 00:00:48,000
linux website where you can follow our

00:00:45,520 --> 00:00:51,520
activity

00:00:48,000 --> 00:00:53,520
uh so let uh so

00:00:51,520 --> 00:00:55,199
during this session so yeah we will

00:00:53,520 --> 00:00:58,160
explain uh why we

00:00:55,199 --> 00:01:00,079
we want this t just give you a kind of

00:00:58,160 --> 00:01:03,039
background

00:01:00,079 --> 00:01:03,600
and then which kind of typical design we

00:01:03,039 --> 00:01:07,360
want

00:01:03,600 --> 00:01:10,960
and why we want this

00:01:07,360 --> 00:01:14,320
how we have implemented that in in opt

00:01:10,960 --> 00:01:15,680
with the opti services what we have

00:01:14,320 --> 00:01:17,600
right now

00:01:15,680 --> 00:01:19,759
what are the next step for the i would

00:01:17,600 --> 00:01:22,640
say the next

00:01:19,759 --> 00:01:23,759
six months and which are the other steps

00:01:22,640 --> 00:01:27,840
in the i would

00:01:23,759 --> 00:01:31,600
say in far future or in the future

00:01:27,840 --> 00:01:31,600
in a for in a more long time

00:01:32,880 --> 00:01:40,240
so let's move first

00:01:37,680 --> 00:01:42,960
let's move to the reason so why do we

00:01:40,240 --> 00:01:45,520
need an scmi server in a trusted

00:01:42,960 --> 00:01:48,799
environment so

00:01:45,520 --> 00:01:51,200
on on sock we have more on

00:01:48,799 --> 00:01:52,960
the soccer more and more complex and we

00:01:51,200 --> 00:01:54,799
have more and more resources which are

00:01:52,960 --> 00:01:57,920
shared between the

00:01:54,799 --> 00:02:01,840
the secure world

00:01:57,920 --> 00:02:05,600
and the non-secure world like linux

00:02:01,840 --> 00:02:08,959
and usually you can use

00:02:05,600 --> 00:02:11,440
a dedicated core processor to

00:02:08,959 --> 00:02:13,040
to manage this shared resources but in

00:02:11,440 --> 00:02:14,400
some case

00:02:13,040 --> 00:02:16,160
you you also have to share the

00:02:14,400 --> 00:02:17,280
communication with this power core

00:02:16,160 --> 00:02:19,680
processor

00:02:17,280 --> 00:02:20,720
or you don't have power core processor

00:02:19,680 --> 00:02:25,200
because of the

00:02:20,720 --> 00:02:27,200
size of the die and in this case

00:02:25,200 --> 00:02:30,080
you need you still need to make sure

00:02:27,200 --> 00:02:33,200
that the non-seeker side will not

00:02:30,080 --> 00:02:33,200
overwrite or

00:02:33,440 --> 00:02:36,959
the configuration or the request from

00:02:35,360 --> 00:02:39,200
the secure world

00:02:36,959 --> 00:02:41,360
and because the c the secret word is the

00:02:39,200 --> 00:02:44,720
one that must have the ultimate decision

00:02:41,360 --> 00:02:47,920
we have decided to implement this

00:02:44,720 --> 00:02:52,800
this semi server this back end on

00:02:47,920 --> 00:02:52,800
in a trusted execution environment

00:02:54,879 --> 00:02:58,640
for this our goal was

00:02:58,959 --> 00:03:03,360
mainly to to reuse what was already done

00:03:02,319 --> 00:03:05,599
so typically the

00:03:03,360 --> 00:03:06,480
we we have the smi server running in a

00:03:05,599 --> 00:03:09,920
daily

00:03:06,480 --> 00:03:11,519
co-processor but we wanted to reuse

00:03:09,920 --> 00:03:13,519
the software which have been already

00:03:11,519 --> 00:03:16,640
developed for such a configuration

00:03:13,519 --> 00:03:19,920
at least to maximize this reviews

00:03:16,640 --> 00:03:23,200
so that's why we decided to

00:03:19,920 --> 00:03:23,920
to start with the scp firmware which is

00:03:23,200 --> 00:03:27,680
a

00:03:23,920 --> 00:03:29,120
an implementation of the hdmi server

00:03:27,680 --> 00:03:31,360
which have been done to run on the

00:03:29,120 --> 00:03:32,959
cortex-m on a dedicated power core

00:03:31,360 --> 00:03:34,799
processor

00:03:32,959 --> 00:03:37,680
and which mainly use the hardware

00:03:34,799 --> 00:03:39,519
mailbox so

00:03:37,680 --> 00:03:42,480
that has been our starting point in

00:03:39,519 --> 00:03:45,280
order to reuse most of the

00:03:42,480 --> 00:03:45,840
software module and also that will ease

00:03:45,280 --> 00:03:48,080
uh

00:03:45,840 --> 00:03:50,640
the configuration because in our in our

00:03:48,080 --> 00:03:53,200
in our solution we want

00:03:50,640 --> 00:03:54,560
uh we want to be able to easily move the

00:03:53,200 --> 00:03:58,080
the semi server

00:03:54,560 --> 00:03:59,360
in different place of the of your system

00:03:58,080 --> 00:04:02,720
so that can be in the power core

00:03:59,360 --> 00:04:05,120
processor or in the secure

00:04:02,720 --> 00:04:07,680
trusted environment or another place

00:04:05,120 --> 00:04:12,080
that will go further

00:04:07,680 --> 00:04:12,080
after that so um

00:04:12,959 --> 00:04:16,799
we can start by describing the typical

00:04:15,200 --> 00:04:20,160
design

00:04:16,799 --> 00:04:23,120
maybe it can you want to to present this

00:04:20,160 --> 00:04:23,120
a typical design

00:04:23,440 --> 00:04:28,040
okay hello uh so here

00:04:27,360 --> 00:04:30,479
on the

00:04:28,040 --> 00:04:33,919
[Music]

00:04:30,479 --> 00:04:37,360
diagram we can sell on the left side

00:04:33,919 --> 00:04:39,759
which uh which is the usual links

00:04:37,360 --> 00:04:40,800
which handle several drivers for

00:04:39,759 --> 00:04:44,080
resources

00:04:40,800 --> 00:04:47,199
and among these drivers

00:04:44,080 --> 00:04:49,199
we are resources that are

00:04:47,199 --> 00:04:51,680
not accessible straight from the linux

00:04:49,199 --> 00:04:55,280
kernel so this goes through this

00:04:51,680 --> 00:04:59,360
sdmi framework so we have drivers like

00:04:55,280 --> 00:05:02,720
power domains and so on

00:04:59,360 --> 00:05:06,880
that interact with the smi framework

00:05:02,720 --> 00:05:10,160
interacting with scmi transport layer

00:05:06,880 --> 00:05:12,639
and currently it's using shared memory

00:05:10,160 --> 00:05:14,240
and the typical design we have that

00:05:12,639 --> 00:05:15,840
currently exists and is embedded in

00:05:14,240 --> 00:05:19,360
platforms is when this

00:05:15,840 --> 00:05:23,120
semi framework transition memory goes to

00:05:19,360 --> 00:05:25,039
the most right side where you have a

00:05:23,120 --> 00:05:28,400
power core processor that handles

00:05:25,039 --> 00:05:31,039
all the htmi services and receives

00:05:28,400 --> 00:05:33,360
this stm by message through this mailbox

00:05:31,039 --> 00:05:36,160
so here's the intention is

00:05:33,360 --> 00:05:38,080
when we have the smi server acting on

00:05:36,160 --> 00:05:40,800
resources that are owned by the

00:05:38,080 --> 00:05:42,400
spiritual world so here typically not

00:05:40,800 --> 00:05:45,840
the smi server

00:05:42,400 --> 00:05:49,600
will be implemented in inside the opti

00:05:45,840 --> 00:05:53,759
going through a naughty interface

00:05:49,600 --> 00:05:56,720
which here is as a naughty service

00:05:53,759 --> 00:05:58,560
so we'll come back to that later so here

00:05:56,720 --> 00:05:58,960
the typical design is that we have on

00:05:58,560 --> 00:06:02,080
the

00:05:58,960 --> 00:06:03,039
left side the hdmi client that's called

00:06:02,080 --> 00:06:06,960
an agent

00:06:03,039 --> 00:06:09,039
that communicates with the smi server

00:06:06,960 --> 00:06:10,160
in the trust of the west in the in the

00:06:09,039 --> 00:06:12,960
opti

00:06:10,160 --> 00:06:13,520
and this is the part we're working on

00:06:12,960 --> 00:06:16,880
and

00:06:13,520 --> 00:06:17,280
as the next extension for the future is

00:06:16,880 --> 00:06:20,639
that

00:06:17,280 --> 00:06:23,919
even this opti smi server

00:06:20,639 --> 00:06:27,199
could also itself interact with some

00:06:23,919 --> 00:06:30,560
external entities as a co-processor

00:06:27,199 --> 00:06:34,400
which owns its own scmi server or even

00:06:30,560 --> 00:06:39,600
another dedicated processor as the one

00:06:34,400 --> 00:06:42,319
pictured on the right bottom side

00:06:39,600 --> 00:06:44,960
for some specific resources that are not

00:06:42,319 --> 00:06:47,039
maybe dedicated to power but still

00:06:44,960 --> 00:06:48,800
must be accessed through the stm wire

00:06:47,039 --> 00:06:51,360
resources

00:06:48,800 --> 00:06:52,720
and so all these hdmi servers will

00:06:51,360 --> 00:06:55,919
communicate through

00:06:52,720 --> 00:06:58,319
some hdmi transport layers as we said

00:06:55,919 --> 00:06:59,120
and actually the one implemented in the

00:06:58,319 --> 00:07:03,199
core processor

00:06:59,120 --> 00:07:06,720
is the mailbox one when we

00:07:03,199 --> 00:07:10,160
embedded the sdmi server in the rt style

00:07:06,720 --> 00:07:12,560
then we will use the opti share memory

00:07:10,160 --> 00:07:15,520
and the native rt

00:07:12,560 --> 00:07:18,000
interface to uh to reach the service and

00:07:15,520 --> 00:07:21,199
get the ustmi request to be

00:07:18,000 --> 00:07:23,440
processed so when we go through an opti

00:07:21,199 --> 00:07:24,319
this means that the linux kernel goes

00:07:23,440 --> 00:07:27,759
through

00:07:24,319 --> 00:07:30,960
some secure uh monitor

00:07:27,759 --> 00:07:31,759
which is represented here as the ef-3d

00:07:30,960 --> 00:07:34,639
firmware

00:07:31,759 --> 00:07:36,080
or a single partition monitor in the

00:07:34,639 --> 00:07:39,759
case of the not t

00:07:36,080 --> 00:07:43,280
it could be a tfa running a

00:07:39,759 --> 00:07:44,000
naughty dispatcher that allows the linux

00:07:43,280 --> 00:07:47,199
to reach

00:07:44,000 --> 00:07:48,160
the elt and so in the end this htmi

00:07:47,199 --> 00:07:50,879
server really

00:07:48,160 --> 00:07:51,759
acts on the hardware resources that

00:07:50,879 --> 00:07:55,360
could be

00:07:51,759 --> 00:07:58,720
clouds power controllers

00:07:55,360 --> 00:08:01,759
even deported on the pmic

00:07:58,720 --> 00:08:02,639
from our fuson links so that's a big

00:08:01,759 --> 00:08:05,759
picture

00:08:02,639 --> 00:08:07,840
of what could be done and maybe extended

00:08:05,759 --> 00:08:10,720
and i know that in the next session uh

00:08:07,840 --> 00:08:10,720
presented by uh

00:08:10,879 --> 00:08:12,960
on

00:08:14,560 --> 00:08:18,000
he will extend also how this can be used

00:08:17,680 --> 00:08:20,720
in

00:08:18,000 --> 00:08:22,639
other environments so in our case we

00:08:20,720 --> 00:08:24,840
will considering as a first step

00:08:22,639 --> 00:08:27,840
the linux kernel interacting with the

00:08:24,840 --> 00:08:27,840
option

00:08:28,800 --> 00:08:32,479
so maybe we can move on the next slide

00:08:31,039 --> 00:08:35,760
that presents maybe

00:08:32,479 --> 00:08:39,599
where we could have hdmi servers and

00:08:35,760 --> 00:08:43,599
uh where we can integrate this

00:08:39,599 --> 00:08:47,040
my server so

00:08:43,599 --> 00:08:51,120
here this picture presents only the

00:08:47,040 --> 00:08:54,720
server part meaning that the client

00:08:51,120 --> 00:08:56,720
the agent will be in our case in the in

00:08:54,720 --> 00:08:57,440
the linux kernel it is not represented

00:08:56,720 --> 00:08:59,519
here

00:08:57,440 --> 00:09:01,040
so what is this is uh what i've

00:08:59,519 --> 00:09:04,240
instantly

00:09:01,040 --> 00:09:05,279
drawn green which is the hdmi server in

00:09:04,240 --> 00:09:08,320
the

00:09:05,279 --> 00:09:08,959
power control system what we're working

00:09:08,320 --> 00:09:12,480
on

00:09:08,959 --> 00:09:15,760
is the scmr server integrated into

00:09:12,480 --> 00:09:19,360
the opti trusted os that is available

00:09:15,760 --> 00:09:23,760
and what we were

00:09:19,360 --> 00:09:26,800
looking for in the far

00:09:23,760 --> 00:09:29,040
in a more distant structure let's say

00:09:26,800 --> 00:09:33,200
is uh maybe the possibility to embed

00:09:29,040 --> 00:09:37,519
this very same semi server participation

00:09:33,200 --> 00:09:40,480
in other as a

00:09:37,519 --> 00:09:41,200
secure el1 that would run straight over

00:09:40,480 --> 00:09:44,480
tfa

00:09:41,200 --> 00:09:46,959
when there is no ot or maybe

00:09:44,480 --> 00:09:48,080
in a specific secure partition when

00:09:46,959 --> 00:09:50,959
considering

00:09:48,080 --> 00:09:52,480
the latest works made on the security

00:09:50,959 --> 00:09:57,120
per visa

00:09:52,480 --> 00:09:58,160
by arman linaro or even the csmi server

00:09:57,120 --> 00:10:01,120
could be hosted

00:09:58,160 --> 00:10:01,760
into the secure world of trusted

00:10:01,120 --> 00:10:04,800
firmware

00:10:01,760 --> 00:10:09,040
m firmware

00:10:04,800 --> 00:10:09,040
and another possible

00:10:09,600 --> 00:10:16,000
setup would be that in the

00:10:12,720 --> 00:10:19,200
non-secure world there could be

00:10:16,000 --> 00:10:22,480
some several virtual machines and one

00:10:19,200 --> 00:10:25,040
would act as an scmr server to get

00:10:22,480 --> 00:10:25,839
all the requests from the other virtual

00:10:25,040 --> 00:10:28,640
machines

00:10:25,839 --> 00:10:33,200
non-secure virtual machines that act as

00:10:28,640 --> 00:10:35,600
hdmi clients

00:10:33,200 --> 00:10:37,120
yeah maybe i can add so yeah on this our

00:10:35,600 --> 00:10:40,959
goal is really that the same

00:10:37,120 --> 00:10:42,880
the same smi server can be used in each

00:10:40,959 --> 00:10:43,440
and every context and mainly the goal is

00:10:42,880 --> 00:10:46,160
only to

00:10:43,440 --> 00:10:48,000
to change the communication channel the

00:10:46,160 --> 00:10:49,519
transport layer because we can probably

00:10:48,000 --> 00:10:52,079
use different way to

00:10:49,519 --> 00:10:54,160
to exchange the hdmi requests according

00:10:52,079 --> 00:10:56,160
to which context we are running

00:10:54,160 --> 00:10:58,560
and also then only the the really low

00:10:56,160 --> 00:11:02,079
level the connection between this

00:10:58,560 --> 00:11:04,399
server and its environment which can be

00:11:02,079 --> 00:11:05,839
typically how to allocate some memory or

00:11:04,399 --> 00:11:07,760
how to manage some

00:11:05,839 --> 00:11:09,519
interruption or some event but the goal

00:11:07,760 --> 00:11:11,760
is really to have the same server

00:11:09,519 --> 00:11:13,040
that's already what we have right now so

00:11:11,760 --> 00:11:15,839
we have in opti

00:11:13,040 --> 00:11:17,680
as an example we can we are able to run

00:11:15,839 --> 00:11:20,720
the opti version of the hdmi

00:11:17,680 --> 00:11:23,120
as a linux application in order to

00:11:20,720 --> 00:11:24,640
to speed up a bit our our development

00:11:23,120 --> 00:11:25,920
but that's really the same it's only the

00:11:24,640 --> 00:11:28,560
low level that change

00:11:25,920 --> 00:11:29,040
that's really what we are focused uh

00:11:28,560 --> 00:11:30,880
when

00:11:29,040 --> 00:11:32,240
we have selected the scp firmware and

00:11:30,880 --> 00:11:36,240
when we have work on

00:11:32,240 --> 00:11:36,240
adding the opti support

00:11:38,079 --> 00:11:44,000
so the next step which is

00:11:41,440 --> 00:11:44,480
the current status on our cmi server and

00:11:44,000 --> 00:11:47,600
opti

00:11:44,480 --> 00:11:47,600
do you want to continue uh

00:11:48,959 --> 00:11:54,480
okay okay so

00:11:52,079 --> 00:11:56,320
when we consider integrating the html

00:11:54,480 --> 00:11:59,120
server in an upt then

00:11:56,320 --> 00:11:59,519
we must have a transport layer a way to

00:11:59,120 --> 00:12:02,800
reach

00:11:59,519 --> 00:12:06,079
the opti smr service in a

00:12:02,800 --> 00:12:06,800
native optiway so currently this goes

00:12:06,079 --> 00:12:10,000
through

00:12:06,800 --> 00:12:10,240
some shared memory srt already handles

00:12:10,000 --> 00:12:13,120
the

00:12:10,240 --> 00:12:13,680
share memory and we can allocate some

00:12:13,120 --> 00:12:15,920
stats

00:12:13,680 --> 00:12:17,360
aesthetically some general memory or

00:12:15,920 --> 00:12:21,040
even we have uh

00:12:17,360 --> 00:12:24,160
currently uh means in the bit of t

00:12:21,040 --> 00:12:26,079
for the nautical world to register

00:12:24,160 --> 00:12:28,079
dynamically shared memory and then to

00:12:26,079 --> 00:12:29,600
allocate this piece of share memories

00:12:28,079 --> 00:12:32,720
that will be used to exchange

00:12:29,600 --> 00:12:35,839
the smile messages

00:12:32,720 --> 00:12:39,120
and uh going through

00:12:35,839 --> 00:12:41,680
going into the eot this

00:12:39,120 --> 00:12:42,720
cmi transport player should also invoke

00:12:41,680 --> 00:12:45,839
vrt

00:12:42,720 --> 00:12:49,680
in the optimizative way which is

00:12:45,839 --> 00:12:52,480
actually the most negative way to

00:12:49,680 --> 00:12:53,360
to invoke a service from the lte is to

00:12:52,480 --> 00:12:56,800
use the

00:12:53,360 --> 00:12:58,720
invoke command interface of the opt

00:12:56,800 --> 00:13:00,079
which is uh currently based on the

00:12:58,720 --> 00:13:02,639
global platform t

00:13:00,079 --> 00:13:03,440
specification where you open the session

00:13:02,639 --> 00:13:06,480
with some

00:13:03,440 --> 00:13:09,440
entity and then you invoke command into

00:13:06,480 --> 00:13:10,480
this session so for this we designed a

00:13:09,440 --> 00:13:13,600
naughty service

00:13:10,480 --> 00:13:14,000
which has this uh interface which we

00:13:13,600 --> 00:13:17,680
called

00:13:14,000 --> 00:13:21,040
in other sudo ta which is

00:13:17,680 --> 00:13:24,720
which are actually services uh in the

00:13:21,040 --> 00:13:27,920
optical kernel part let's say that to

00:13:24,720 --> 00:13:28,720
expose an interface which is a trusted

00:13:27,920 --> 00:13:32,000
application

00:13:28,720 --> 00:13:32,720
interface like when you open such a

00:13:32,000 --> 00:13:35,440
session and

00:13:32,720 --> 00:13:38,240
then you invoke some common so here for

00:13:35,440 --> 00:13:41,360
example the linux kernel

00:13:38,240 --> 00:13:43,839
the sami driver of the linux kernels

00:13:41,360 --> 00:13:44,720
opens the station towards this opti

00:13:43,839 --> 00:13:47,600
stmips

00:13:44,720 --> 00:13:48,399
lta and then when there is an html

00:13:47,600 --> 00:13:50,880
message

00:13:48,399 --> 00:13:51,519
from some drivers of the linux kernel

00:13:50,880 --> 00:13:54,560
that

00:13:51,519 --> 00:13:58,079
is requested it

00:13:54,560 --> 00:14:01,680
um it trades an invocation of the

00:13:58,079 --> 00:14:04,800
command into the ta of sdmi

00:14:01,680 --> 00:14:06,079
ot so that the message is processed by

00:14:04,800 --> 00:14:08,880
the uh

00:14:06,079 --> 00:14:09,600
the smi server in the update and in the

00:14:08,880 --> 00:14:12,959
end

00:14:09,600 --> 00:14:16,079
eventually uh acting on some hardware as

00:14:12,959 --> 00:14:19,120
requested so

00:14:16,079 --> 00:14:22,320
this um using this

00:14:19,120 --> 00:14:25,839
option this allows us

00:14:22,320 --> 00:14:27,839
eventually to use several message

00:14:25,839 --> 00:14:30,079
or channels or to define several

00:14:27,839 --> 00:14:33,120
channels so that resources

00:14:30,079 --> 00:14:36,399
handled by the htmi server

00:14:33,120 --> 00:14:39,040
can be decorated uh regarding this uh

00:14:36,399 --> 00:14:39,440
this transport layer when those results

00:14:39,040 --> 00:14:43,199
are

00:14:39,440 --> 00:14:46,720
nothing no dependencies between them

00:14:43,199 --> 00:14:47,279
so that a channel can be freely accessed

00:14:46,720 --> 00:14:49,920
even

00:14:47,279 --> 00:14:51,040
if there is a pending request on another

00:14:49,920 --> 00:14:53,680
channel because

00:14:51,040 --> 00:14:54,959
both channels have some resources that

00:14:53,680 --> 00:14:58,320
relies on the

00:14:54,959 --> 00:15:02,880
specific hardware without dependencies

00:14:58,320 --> 00:15:06,560
in them and so we work on

00:15:02,880 --> 00:15:09,760
creating those multiple channels

00:15:06,560 --> 00:15:12,800
using specific sharing memories

00:15:09,760 --> 00:15:16,720
to to be used for

00:15:12,800 --> 00:15:20,000
uh exchanging those messages

00:15:16,720 --> 00:15:22,399
so we have some uh still some issues and

00:15:20,000 --> 00:15:24,480
things to uh to address in the opt

00:15:22,399 --> 00:15:25,120
because when we create a such a service

00:15:24,480 --> 00:15:28,560
in the

00:15:25,120 --> 00:15:31,839
since it's a system service

00:15:28,560 --> 00:15:32,639
we must provision any resources option

00:15:31,839 --> 00:15:35,759
needs to

00:15:32,639 --> 00:15:36,240
run these services so that we don't lack

00:15:35,759 --> 00:15:40,079
of

00:15:36,240 --> 00:15:40,079
memory or lack of her

00:15:41,040 --> 00:15:45,120
when the service is executed for example

00:15:43,920 --> 00:15:48,959
we can imagine

00:15:45,120 --> 00:15:52,560
that a non-secure client

00:15:48,959 --> 00:15:55,440
asks crt to to access some leather

00:15:52,560 --> 00:15:57,040
and eot itself must test the linux

00:15:55,440 --> 00:16:01,120
kernel for example to have

00:15:57,040 --> 00:16:03,920
to access the file system or a resource

00:16:01,120 --> 00:16:05,920
so the key goes back to the linux kernel

00:16:03,920 --> 00:16:08,720
and then the linux kernel

00:16:05,920 --> 00:16:11,040
needs to enable a clock or to access

00:16:08,720 --> 00:16:15,040
hardware any mmc for example

00:16:11,040 --> 00:16:17,279
and if this very clockwise the resource

00:16:15,040 --> 00:16:19,040
needed by the linux kernel needs to be

00:16:17,279 --> 00:16:21,519
handled back in the opt

00:16:19,040 --> 00:16:23,440
we must make sure that all resources

00:16:21,519 --> 00:16:24,800
already are located in the opt for the

00:16:23,440 --> 00:16:28,000
initial request

00:16:24,800 --> 00:16:28,880
do not uh over-consume all the resources

00:16:28,000 --> 00:16:30,720
and that

00:16:28,880 --> 00:16:32,160
there are still enough resources for the

00:16:30,720 --> 00:16:35,759
service to uh

00:16:32,160 --> 00:16:36,000
to be to be handled otherwise we may

00:16:35,759 --> 00:16:39,120
face

00:16:36,000 --> 00:16:39,120
some deadlocks

00:16:40,560 --> 00:16:46,399
so that's a pretty rough overview of

00:16:43,759 --> 00:16:48,240
what's we need to be done in the party

00:16:46,399 --> 00:16:50,000
so we have currently a

00:16:48,240 --> 00:16:52,320
proof of concept that there are still

00:16:50,000 --> 00:16:52,959
things that needs to be uh discussed

00:16:52,320 --> 00:16:55,440
with the

00:16:52,959 --> 00:16:56,880
team maintainers uh so that we get

00:16:55,440 --> 00:17:04,319
through the

00:16:56,880 --> 00:17:08,000
resources provision maybe

00:17:04,319 --> 00:17:11,600
okay yeah do you want me to continue

00:17:08,000 --> 00:17:15,280
on this okay

00:17:11,600 --> 00:17:17,280
so yeah so as i mentioned we have a

00:17:15,280 --> 00:17:17,880
proof of concept that is now running on

00:17:17,280 --> 00:17:21,039
the

00:17:17,880 --> 00:17:24,640
stm32 mp1 and on the avp

00:17:21,039 --> 00:17:27,039
farm v8 and on on linux

00:17:24,640 --> 00:17:28,720
first for for the beginning but

00:17:27,039 --> 00:17:31,120
everything for now is

00:17:28,720 --> 00:17:32,480
out of the tree out of the official tree

00:17:31,120 --> 00:17:34,799
so

00:17:32,480 --> 00:17:35,600
for the next couple of months we will

00:17:34,799 --> 00:17:37,280
focus on

00:17:35,600 --> 00:17:38,799
back parting everything to the main

00:17:37,280 --> 00:17:41,520
repository so

00:17:38,799 --> 00:17:44,160
on the scp firmware the mainline support

00:17:41,520 --> 00:17:45,760
to make sure that the opt

00:17:44,160 --> 00:17:47,600
the modification that we have done to

00:17:45,760 --> 00:17:50,720
support opti will be

00:17:47,600 --> 00:17:54,320
merged in the official sap repository

00:17:50,720 --> 00:17:56,880
uh so atm has already uh

00:17:54,320 --> 00:17:58,880
made some pull requests on some

00:17:56,880 --> 00:18:00,080
specification protocol but well the goal

00:17:58,880 --> 00:18:03,360
is read to have everything

00:18:00,080 --> 00:18:04,400
upstream also in opt itself as we are

00:18:03,360 --> 00:18:08,160
using this uh

00:18:04,400 --> 00:18:10,640
sudo trusted application uh interface

00:18:08,160 --> 00:18:11,200
we we need uh to make our changes in

00:18:10,640 --> 00:18:13,679
opti

00:18:11,200 --> 00:18:15,760
merge in the in the opti repository so

00:18:13,679 --> 00:18:20,000
that will be also a main

00:18:15,760 --> 00:18:23,679
larger a large work to make everything

00:18:20,000 --> 00:18:24,080
in a good shape to be merged on linux

00:18:23,679 --> 00:18:26,320
side

00:18:24,080 --> 00:18:28,320
we'll mainly have to to add the opt

00:18:26,320 --> 00:18:31,520
transport layer

00:18:28,320 --> 00:18:32,960
which now that the scmi framework

00:18:31,520 --> 00:18:34,640
supports multiple transport layers

00:18:32,960 --> 00:18:37,840
should be

00:18:34,640 --> 00:18:39,520
easier than before and also in ubud

00:18:37,840 --> 00:18:40,320
that's something that is already on the

00:18:39,520 --> 00:18:44,720
review but

00:18:40,320 --> 00:18:44,720
yeah we need we have we have um created

00:18:45,360 --> 00:18:48,480
we have we also we're already working on

00:18:47,600 --> 00:18:50,720
the scmi

00:18:48,480 --> 00:18:51,919
agent in your boot which is using the

00:18:50,720 --> 00:18:54,000
smc interface

00:18:51,919 --> 00:18:55,360
and we also have to prepare an update

00:18:54,000 --> 00:18:58,720
transport layer

00:18:55,360 --> 00:18:59,200
so we can access this server from you

00:18:58,720 --> 00:19:02,240
boot

00:18:59,200 --> 00:19:04,799
as well so that will be

00:19:02,240 --> 00:19:07,360
one of our main next step and in

00:19:04,799 --> 00:19:09,679
addition to that

00:19:07,360 --> 00:19:11,039
we also need to enable the notification

00:19:09,679 --> 00:19:14,320
to linux so the

00:19:11,039 --> 00:19:18,080
hdmi notification has been merged in

00:19:14,320 --> 00:19:18,559
kernel v 5.9 and so with that being

00:19:18,080 --> 00:19:21,120
merged

00:19:18,559 --> 00:19:23,039
we can enable the notification from our

00:19:21,120 --> 00:19:26,160
cmi server back to linux

00:19:23,039 --> 00:19:28,320
which will be mainly useful for sensor

00:19:26,160 --> 00:19:30,400
and power domain for example or reset as

00:19:28,320 --> 00:19:32,080
well so that will be something that's

00:19:30,400 --> 00:19:33,919
something we have started to work on

00:19:32,080 --> 00:19:35,120
and our goal is to have something up and

00:19:33,919 --> 00:19:38,160
running

00:19:35,120 --> 00:19:40,400
during the next cycle we're also working

00:19:38,160 --> 00:19:43,919
on supporting the voltage regulator

00:19:40,400 --> 00:19:45,600
a specification which which is a new

00:19:43,919 --> 00:19:48,400
which has been added in the latest three

00:19:45,600 --> 00:19:51,280
days of the hcmi

00:19:48,400 --> 00:19:52,080
specification so we have a proof of

00:19:51,280 --> 00:19:55,280
concept

00:19:52,080 --> 00:19:58,000
if i'm not wrong atn has worked on this

00:19:55,280 --> 00:19:58,400
and the goal is really to to make it

00:19:58,000 --> 00:20:01,520
back

00:19:58,400 --> 00:20:04,640
in the cp firmware

00:20:01,520 --> 00:20:06,720
um and the last item is the support of

00:20:04,640 --> 00:20:09,120
the device 3

00:20:06,720 --> 00:20:10,000
while working with the scp firmware the

00:20:09,120 --> 00:20:13,039
one

00:20:10,000 --> 00:20:15,520
main i would say issue or complex

00:20:13,039 --> 00:20:17,200
things to to do is to set up the

00:20:15,520 --> 00:20:20,159
hardware configuration

00:20:17,200 --> 00:20:21,120
in this html server right now everything

00:20:20,159 --> 00:20:24,159
is based on

00:20:21,120 --> 00:20:26,000
array which are statically filled so all

00:20:24,159 --> 00:20:28,960
the connections must be done and

00:20:26,000 --> 00:20:30,320
before compilation which is sometimes a

00:20:28,960 --> 00:20:33,679
bit

00:20:30,320 --> 00:20:36,080
complex and time consuming so

00:20:33,679 --> 00:20:36,799
we will consider adding the device free

00:20:36,080 --> 00:20:40,159
support

00:20:36,799 --> 00:20:42,400
in this scp so either to be used at

00:20:40,159 --> 00:20:44,720
compile time

00:20:42,400 --> 00:20:48,080
similarly to what is done in the sphere

00:20:44,720 --> 00:20:50,960
for example or even at good time

00:20:48,080 --> 00:20:52,640
so that we can pass the device 3 device

00:20:50,960 --> 00:20:55,120
3 blob

00:20:52,640 --> 00:20:56,640
so that will be a main new feature that

00:20:55,120 --> 00:20:59,120
would like to add not sure that this

00:20:56,640 --> 00:21:03,760
will be done during this cycle but

00:20:59,120 --> 00:21:05,600
that's part of the of the plan at least

00:21:03,760 --> 00:21:07,760
i think we still have few minutes so

00:21:05,600 --> 00:21:10,400
that for the next i would say the next

00:21:07,760 --> 00:21:11,600
by next step we mean the next cycle and

00:21:10,400 --> 00:21:14,320
then

00:21:11,600 --> 00:21:15,039
the other future step that we want to to

00:21:14,320 --> 00:21:19,039
have a look at

00:21:15,039 --> 00:21:21,679
it's um extending uh

00:21:19,039 --> 00:21:23,120
the use of this hdmi server in order

00:21:21,679 --> 00:21:26,960
another t

00:21:23,120 --> 00:21:29,679
so either in the scl0 secure partition

00:21:26,960 --> 00:21:33,039
when we are running along with tfa

00:21:29,679 --> 00:21:35,120
or in the dedicated partition once

00:21:33,039 --> 00:21:36,720
the ffa will be available and the

00:21:35,120 --> 00:21:39,360
hypervisor will be available in the

00:21:36,720 --> 00:21:39,360
secure world

00:21:40,240 --> 00:21:44,400
we expect to to take advantage of the

00:21:42,559 --> 00:21:47,200
refactoring that we are doing for obt

00:21:44,400 --> 00:21:47,919
so we can easily plug the smi server on

00:21:47,200 --> 00:21:52,159
this uh

00:21:47,919 --> 00:21:56,159
on this new execution environment

00:21:52,159 --> 00:21:56,159
and i would say the last one which

00:21:56,720 --> 00:22:01,039
that would also this has al also been

00:21:59,520 --> 00:22:03,120
requested by

00:22:01,039 --> 00:22:05,919
by some of our members is being able to

00:22:03,120 --> 00:22:08,960
run this hcmi server

00:22:05,919 --> 00:22:12,240
in the secure side of

00:22:08,960 --> 00:22:14,400
the cortex m so typically uh

00:22:12,240 --> 00:22:16,080
around the tfm or something like that

00:22:14,400 --> 00:22:17,600
but that's really something we have not

00:22:16,080 --> 00:22:21,120
really look at for now

00:22:17,600 --> 00:22:21,120
that's really for the future

00:22:21,280 --> 00:22:24,559
and i think that we have covered on our

00:22:24,080 --> 00:22:27,120
slide

00:22:24,559 --> 00:22:28,480
at the end you want to to say something

00:22:27,120 --> 00:22:30,400
else to add one more things

00:22:28,480 --> 00:22:32,000
i don't know i will check if we have

00:22:30,400 --> 00:22:34,159
some questions

00:22:32,000 --> 00:22:36,640
i've just looked at slack then it seems

00:22:34,159 --> 00:22:39,760
there's no specific question

00:22:36,640 --> 00:22:42,640
okay this will mean that we have been

00:22:39,760 --> 00:22:42,640
crystal clear

00:22:43,039 --> 00:22:45,360
sure

00:22:47,679 --> 00:22:54,480
so yeah we have two more minutes

00:22:52,400 --> 00:22:55,840
okay maybe just uh mentioning is that

00:22:54,480 --> 00:22:58,720
there are some uh

00:22:55,840 --> 00:22:59,039
jira tickets that are publicly reachable

00:22:58,720 --> 00:23:02,480
for

00:22:59,039 --> 00:23:04,559
i want to just follow what's done on the

00:23:02,480 --> 00:23:06,559
scmi

00:23:04,559 --> 00:23:08,480
yeah on the website linear website then

00:23:06,559 --> 00:23:09,840
there is a project tab and there will be

00:23:08,480 --> 00:23:12,960
a cma project

00:23:09,840 --> 00:23:15,919
there where there is cart which describe

00:23:12,960 --> 00:23:18,159
what we are working on

00:23:15,919 --> 00:23:19,039
maybe also one other thing to come back

00:23:18,159 --> 00:23:23,360
on

00:23:19,039 --> 00:23:25,360
just that mentioning that this semi-7 vm

00:23:23,360 --> 00:23:28,720
that's something that have been recently

00:23:25,360 --> 00:23:30,799
added as part of the possibility

00:23:28,720 --> 00:23:33,600
typically to be used as a back-end proxy

00:23:30,799 --> 00:23:36,720
between some

00:23:33,600 --> 00:23:40,080
some non-secure side vm and

00:23:36,720 --> 00:23:42,559
and another hdmi server that

00:23:40,080 --> 00:23:45,279
could run in the processor or inductee

00:23:42,559 --> 00:23:48,400
or somewhere else

00:23:45,279 --> 00:23:50,320
so yeah that's we are

00:23:48,400 --> 00:23:53,520
we are keeping that that in mind while

00:23:50,320 --> 00:23:53,520
working on our contact

00:23:55,360 --> 00:23:58,400
yeah and follow the next session from

00:23:57,600 --> 00:24:01,600
suvik we'll

00:23:58,400 --> 00:24:04,720
discuss also about the stmi and

00:24:01,600 --> 00:24:07,919
what uh arm and for the future

00:24:04,720 --> 00:24:07,919
use of smi

00:24:10,960 --> 00:24:15,600

YouTube URL: https://www.youtube.com/watch?v=67hCiGMikDc


