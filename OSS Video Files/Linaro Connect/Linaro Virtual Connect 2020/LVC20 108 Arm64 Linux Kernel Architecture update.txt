Title: LVC20 108 Arm64 Linux Kernel Architecture update
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	Arm64 Linux Kernel
An overview of the latest status of Armv8-A architecture enablement for the arm64 Linux Kernel, including security features (Pointer Authentication, BTI, Memory Tagging), system features (MPAM) and new areas of investigation.

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-108-0.pdf
Captions: 
	00:00:00,080 --> 00:00:04,319
so thanks everyone for joining this is

00:00:01,920 --> 00:00:05,520
the arnold 64 linus kernel architectural

00:00:04,319 --> 00:00:07,440
update

00:00:05,520 --> 00:00:09,840
i'm matto carlini i'm a director of

00:00:07,440 --> 00:00:11,440
software technology management at arm

00:00:09,840 --> 00:00:14,080
i'm part of the open source software

00:00:11,440 --> 00:00:16,080
group in arm and i look after the arm64

00:00:14,080 --> 00:00:18,400
kernel roadmap together with other

00:00:16,080 --> 00:00:22,480
firmware projects as well

00:00:18,400 --> 00:00:24,720
so first of all a news regarding the

00:00:22,480 --> 00:00:26,320
naming convention of the arm

00:00:24,720 --> 00:00:28,960
architectural features

00:00:26,320 --> 00:00:31,199
so this comes from our friends and

00:00:28,960 --> 00:00:33,120
colleagues from the architecture team

00:00:31,199 --> 00:00:34,719
so effectively the a profile

00:00:33,120 --> 00:00:37,440
architecture has changed

00:00:34,719 --> 00:00:39,480
the feature names and you can find on

00:00:37,440 --> 00:00:40,960
this page which are linked there on

00:00:39,480 --> 00:00:43,200
developer.com

00:00:40,960 --> 00:00:44,399
and mapping between the old name and the

00:00:43,200 --> 00:00:47,120
new name

00:00:44,399 --> 00:00:48,399
so you can see that effectively arm is

00:00:47,120 --> 00:00:51,360
trying to move away

00:00:48,399 --> 00:00:52,160
from identifying each feature with a

00:00:51,360 --> 00:00:56,000
specific

00:00:52,160 --> 00:00:59,120
revision of the architecture so 8.0 8.1

00:00:56,000 --> 00:01:00,480
and so on and just moving to a simpler

00:00:59,120 --> 00:01:02,960
naming scheme

00:01:00,480 --> 00:01:04,000
where there is the fit and the score

00:01:02,960 --> 00:01:06,799
name

00:01:04,000 --> 00:01:08,320
so this should hopefully also clear out

00:01:06,799 --> 00:01:10,000
some confusion around

00:01:08,320 --> 00:01:12,240
features which get added in some

00:01:10,000 --> 00:01:13,280
revisions of the architecture but then

00:01:12,240 --> 00:01:14,400
they can be used

00:01:13,280 --> 00:01:16,400
in previous revisions of the

00:01:14,400 --> 00:01:18,400
architecture because they are optional

00:01:16,400 --> 00:01:20,240
so we just refer to the feature name

00:01:18,400 --> 00:01:23,920
moving forward

00:01:20,240 --> 00:01:27,600
and that should help possibly clarifying

00:01:23,920 --> 00:01:30,640
all the list of features as a result

00:01:27,600 --> 00:01:34,079
we also updated our specific

00:01:30,640 --> 00:01:34,720
open source software kernel page we do

00:01:34,079 --> 00:01:38,799
have

00:01:34,720 --> 00:01:41,680
an oss page for arnold 64 linux kernel

00:01:38,799 --> 00:01:44,560
architectural features and this page

00:01:41,680 --> 00:01:47,600
basically tells for each of the

00:01:44,560 --> 00:01:50,799
feature in which kernel revision

00:01:47,600 --> 00:01:53,360
the feature has been merged some of them

00:01:50,799 --> 00:01:55,600
are marked still as dvd or ongoing and

00:01:53,360 --> 00:01:58,960
there are some nodes which explain

00:01:55,600 --> 00:02:00,479
the development status for those so we

00:01:58,960 --> 00:02:02,960
also updated this table

00:02:00,479 --> 00:02:04,320
with keeping the old naming scheme the

00:02:02,960 --> 00:02:06,719
new naming scheme

00:02:04,320 --> 00:02:09,280
so hopefully again this will help doing

00:02:06,719 --> 00:02:10,239
the mapping and clarifying also in which

00:02:09,280 --> 00:02:13,520
kernel

00:02:10,239 --> 00:02:16,959
we included each one of the

00:02:13,520 --> 00:02:21,440
architectural features from 8.1

00:02:16,959 --> 00:02:24,480
here down to 8.6 at the moment

00:02:21,440 --> 00:02:27,680
so um i did a similar slot

00:02:24,480 --> 00:02:28,480
last uh linaro during the tech days in

00:02:27,680 --> 00:02:31,360
march

00:02:28,480 --> 00:02:32,080
and i did present kind of a flowery

00:02:31,360 --> 00:02:36,080
meadow

00:02:32,080 --> 00:02:39,760
like this one which was well received

00:02:36,080 --> 00:02:42,640
so i thought of showing it again

00:02:39,760 --> 00:02:43,440
this was a the picture from last march

00:02:42,640 --> 00:02:45,920
and

00:02:43,440 --> 00:02:48,080
effectively it does represent the

00:02:45,920 --> 00:02:49,340
enablement status of the features in the

00:02:48,080 --> 00:02:51,040
kernel

00:02:49,340 --> 00:02:53,519
[Music]

00:02:51,040 --> 00:02:54,560
still using kind of the old naming

00:02:53,519 --> 00:02:56,000
scheme but at least

00:02:54,560 --> 00:02:58,159
referring to the revision of the

00:02:56,000 --> 00:02:59,360
architecture in which those features

00:02:58,159 --> 00:03:02,640
were added

00:02:59,360 --> 00:03:05,360
then i can update it for next time maybe

00:03:02,640 --> 00:03:07,519
the color scheme is pretty simple green

00:03:05,360 --> 00:03:10,959
is for features that are already merged

00:03:07,519 --> 00:03:11,760
in the kernel yellow or light orange

00:03:10,959 --> 00:03:14,800
whatever it is

00:03:11,760 --> 00:03:18,319
is for features which are ongoing

00:03:14,800 --> 00:03:20,640
usually on the list and red or light red

00:03:18,319 --> 00:03:21,920
is for features which are not currently

00:03:20,640 --> 00:03:23,840
in the works

00:03:21,920 --> 00:03:25,040
are under internal investigation or

00:03:23,840 --> 00:03:28,640
analysis

00:03:25,040 --> 00:03:31,360
uh tvd let's say with light gray

00:03:28,640 --> 00:03:32,560
are instead features that we believe

00:03:31,360 --> 00:03:34,400
there is nothing to be done in the

00:03:32,560 --> 00:03:36,080
kernel so they are not applicable in the

00:03:34,400 --> 00:03:38,480
kernel

00:03:36,080 --> 00:03:40,000
so this was the picture in march now i

00:03:38,480 --> 00:03:42,159
have an update

00:03:40,000 --> 00:03:43,519
a new medal which shows the picture

00:03:42,159 --> 00:03:45,040
today

00:03:43,519 --> 00:03:46,640
now i'm not going to ask you to spot the

00:03:45,040 --> 00:03:48,879
differences

00:03:46,640 --> 00:03:49,840
the next slides which follows tries to

00:03:48,879 --> 00:03:52,720
explain

00:03:49,840 --> 00:03:53,920
what changed but roughly speaking so you

00:03:52,720 --> 00:03:58,959
can see that

00:03:53,920 --> 00:04:01,760
we are mostly all green up to 8.4

00:03:58,959 --> 00:04:03,200
in 8.4 the only things with which are

00:04:01,760 --> 00:04:05,360
still ongoing

00:04:03,200 --> 00:04:07,599
well there is the long-standing nested

00:04:05,360 --> 00:04:10,080
virtualization enablement

00:04:07,599 --> 00:04:11,599
which is both an 803 extension and an

00:04:10,080 --> 00:04:13,280
8.4

00:04:11,599 --> 00:04:16,000
and pam is still ongoing i have a

00:04:13,280 --> 00:04:17,600
dedicated couple of slides for that

00:04:16,000 --> 00:04:20,479
and then we are completing also the

00:04:17,600 --> 00:04:22,479
debugging trace enablement for 8.4

00:04:20,479 --> 00:04:24,400
and this kind of completes the picture

00:04:22,479 --> 00:04:27,840
for 8.4

00:04:24,400 --> 00:04:30,080
a.5 is also reasonably green we've done

00:04:27,840 --> 00:04:30,960
all the major enablements with the last

00:04:30,080 --> 00:04:34,000
one missing

00:04:30,960 --> 00:04:36,400
so far is memory tagging which is again

00:04:34,000 --> 00:04:39,840
progressing quite well towards merge

00:04:36,400 --> 00:04:43,199
i have a dedicated slide for it um

00:04:39,840 --> 00:04:45,600
what's missing few uh

00:04:43,199 --> 00:04:46,960
actually investigation activities

00:04:45,600 --> 00:04:49,919
regarding specs

00:04:46,960 --> 00:04:52,160
speculation barriers in the context of

00:04:49,919 --> 00:04:53,680
some specific kernel subsystems for

00:04:52,160 --> 00:04:56,639
example ebpf

00:04:53,680 --> 00:04:58,400
so how those barriers can be helpful in

00:04:56,639 --> 00:05:01,039
those subsystems

00:04:58,400 --> 00:05:03,120
and then there is an enablement on the

00:05:01,039 --> 00:05:06,639
statistical profiling extensions

00:05:03,120 --> 00:05:08,560
spe which has been introduced in 8.5

00:05:06,639 --> 00:05:10,240
but it's one of those features which can

00:05:08,560 --> 00:05:13,759
be retroactively implemented

00:05:10,240 --> 00:05:18,000
so it's listed it was listed as an 803

00:05:13,759 --> 00:05:19,440
spe feature moving on 8.6

00:05:18,000 --> 00:05:21,759
we've done basically half of the

00:05:19,440 --> 00:05:24,160
enablement

00:05:21,759 --> 00:05:25,840
now which is the reasoning process here

00:05:24,160 --> 00:05:28,479
so we are giving

00:05:25,840 --> 00:05:30,000
usually precedence to the features which

00:05:28,479 --> 00:05:34,639
are known to appear

00:05:30,000 --> 00:05:36,840
in upcoming armed cores or arm socs

00:05:34,639 --> 00:05:38,000
the other features are under

00:05:36,840 --> 00:05:40,160
investigation

00:05:38,000 --> 00:05:41,120
some of them might appear in the kernel

00:05:40,160 --> 00:05:43,680
quite soon

00:05:41,120 --> 00:05:45,440
some of some of them might be a bit late

00:05:43,680 --> 00:05:48,560
in the process depending again

00:05:45,440 --> 00:05:50,639
on um timing and priorities

00:05:48,560 --> 00:05:53,840
of the hardware availability also for

00:05:50,639 --> 00:05:53,840
testing these features as well

00:05:53,919 --> 00:05:58,720
the last flower here is around future

00:05:56,720 --> 00:06:01,680
architecture technologies

00:05:58,720 --> 00:06:02,960
this is today pretty much unchanged we

00:06:01,680 --> 00:06:06,479
enabled as v2

00:06:02,960 --> 00:06:08,319
in user space there are patches to

00:06:06,479 --> 00:06:09,120
enable the transactional memory

00:06:08,319 --> 00:06:12,720
extension

00:06:09,120 --> 00:06:13,600
tme on the list but given that we

00:06:12,720 --> 00:06:16,080
haven't heard

00:06:13,600 --> 00:06:18,639
any specific pull from the market or the

00:06:16,080 --> 00:06:20,479
ecosystem around this feature

00:06:18,639 --> 00:06:21,840
these are at the moment they are hanging

00:06:20,479 --> 00:06:23,680
there in the list

00:06:21,840 --> 00:06:26,479
uh waiting for some more concrete use

00:06:23,680 --> 00:06:28,240
cases for that

00:06:26,479 --> 00:06:29,680
so this is the picture of the enablement

00:06:28,240 --> 00:06:32,560
today

00:06:29,680 --> 00:06:34,400
but i also have um a news kind of a

00:06:32,560 --> 00:06:37,039
forecast from tomorrow

00:06:34,400 --> 00:06:37,840
and when i say tomorrow i literally mean

00:06:37,039 --> 00:06:41,039
tomorrow

00:06:37,840 --> 00:06:41,759
wednesday because i invite you actually

00:06:41,039 --> 00:06:44,400
to

00:06:41,759 --> 00:06:46,240
participate to this session in which my

00:06:44,400 --> 00:06:47,039
colleague martin from the architecture

00:06:46,240 --> 00:06:49,759
team

00:06:47,039 --> 00:06:50,880
we present the 2020 architectural

00:06:49,759 --> 00:06:53,680
extensions

00:06:50,880 --> 00:06:55,120
from arm which again they are labeled

00:06:53,680 --> 00:06:56,720
8.7

00:06:55,120 --> 00:06:58,479
i'm not going to enter into the details

00:06:56,720 --> 00:07:00,960
right now

00:06:58,479 --> 00:07:02,560
from a kernel enablement point of view

00:07:00,960 --> 00:07:05,520
we are just effectively

00:07:02,560 --> 00:07:06,720
um investigating the new spec the new

00:07:05,520 --> 00:07:08,720
extensions

00:07:06,720 --> 00:07:09,840
and putting the enablement features in

00:07:08,720 --> 00:07:13,039
the backlog

00:07:09,840 --> 00:07:14,080
with the same kind of priority uh that i

00:07:13,039 --> 00:07:16,560
said before

00:07:14,080 --> 00:07:19,199
so features which will come in upcoming

00:07:16,560 --> 00:07:22,319
um arm socs or arm cores will be

00:07:19,199 --> 00:07:22,319
prioritized first

00:07:22,639 --> 00:07:26,800
the 2020 extensions also comes with a

00:07:24,880 --> 00:07:28,960
couple of features which does not fall

00:07:26,800 --> 00:07:31,599
into the 807 nomenclature

00:07:28,960 --> 00:07:33,440
martin will explain everything tomorrow

00:07:31,599 --> 00:07:36,960
but effectively they are marked as

00:07:33,440 --> 00:07:39,199
future architectures so one is csre

00:07:36,960 --> 00:07:41,039
call stack recorder extension and the

00:07:39,199 --> 00:07:44,080
other one is brbe

00:07:41,039 --> 00:07:46,240
branch record buffer extension again

00:07:44,080 --> 00:07:49,360
please do join martin's session tomorrow

00:07:46,240 --> 00:07:49,360
for knowing more about those

00:07:50,960 --> 00:07:55,840
now um quick snapshot of what happened

00:07:54,479 --> 00:07:59,440
since march 2020

00:07:55,840 --> 00:08:02,800
last lastly in our attack days um

00:07:59,440 --> 00:08:04,160
back in march i did present the update

00:08:02,800 --> 00:08:08,240
for five six

00:08:04,160 --> 00:08:10,720
uh kernel so a couple of 8.5 uh feature

00:08:08,240 --> 00:08:12,960
again using the old nomenclature i'm

00:08:10,720 --> 00:08:16,400
gonna update next one i promise

00:08:12,960 --> 00:08:19,360
um the random number generator and e0pd

00:08:16,400 --> 00:08:21,280
has been enabled in five six and a bunch

00:08:19,360 --> 00:08:23,599
of the 8.6

00:08:21,280 --> 00:08:25,360
features as well has been exposed to to

00:08:23,599 --> 00:08:28,639
user space

00:08:25,360 --> 00:08:30,080
then here it comes five seven so five

00:08:28,639 --> 00:08:32,000
seven comes with the

00:08:30,080 --> 00:08:33,519
complete enablement of pointer

00:08:32,000 --> 00:08:36,800
authentication

00:08:33,519 --> 00:08:39,440
so the feature introduced in 8.3

00:08:36,800 --> 00:08:40,399
in five seven we enable the internal

00:08:39,440 --> 00:08:42,800
support

00:08:40,399 --> 00:08:44,880
for functional return address protection

00:08:42,800 --> 00:08:47,279
all the user space exposure was done

00:08:44,880 --> 00:08:48,240
already in previous kernel revision 5.5

00:08:47,279 --> 00:08:51,360
and before

00:08:48,240 --> 00:08:54,720
i explained it all in in the march

00:08:51,360 --> 00:08:55,760
discussion a few other features exposed

00:08:54,720 --> 00:08:58,800
here

00:08:55,760 --> 00:09:03,200
activity monitors extensions included

00:08:58,800 --> 00:09:05,120
pmu counters extended to 64-bit

00:09:03,200 --> 00:09:07,760
they use that boot of the random number

00:09:05,120 --> 00:09:10,800
generator

00:09:07,760 --> 00:09:14,480
some preparatory work for the 8.5

00:09:10,800 --> 00:09:17,279
branch target identifier extension bti

00:09:14,480 --> 00:09:18,399
so in five seven we managed to merge

00:09:17,279 --> 00:09:20,160
some assembler

00:09:18,399 --> 00:09:22,160
refactoring a similar annotations

00:09:20,160 --> 00:09:25,440
refactoring in preparation

00:09:22,160 --> 00:09:27,279
for bti and then from the community from

00:09:25,440 --> 00:09:29,600
the kvm arm community

00:09:27,279 --> 00:09:31,120
there was support for the geek 4.1

00:09:29,600 --> 00:09:34,080
system ip

00:09:31,120 --> 00:09:36,000
and the maintainers also decided to

00:09:34,080 --> 00:09:39,040
remove the 32-bit host

00:09:36,000 --> 00:09:41,200
support with 32-bit guests still

00:09:39,040 --> 00:09:44,480
supported on a 64-bit

00:09:41,200 --> 00:09:47,200
kvn host machine um

00:09:44,480 --> 00:09:47,920
5.7 comes as well with memory hot remove

00:09:47,200 --> 00:09:50,959
support

00:09:47,920 --> 00:09:53,120
for m64 which also concludes

00:09:50,959 --> 00:09:55,120
uh a long-standing enablement that we

00:09:53,120 --> 00:09:58,320
did for memory hot plug and hot remove

00:09:55,120 --> 00:09:58,320
that was outstanding

00:09:58,880 --> 00:10:03,279
moving on we've got five eight so

00:10:01,760 --> 00:10:04,800
finally in five eight we managed to

00:10:03,279 --> 00:10:07,200
merge bti

00:10:04,800 --> 00:10:08,880
so bti is the architectural extension

00:10:07,200 --> 00:10:12,160
which protects against

00:10:08,880 --> 00:10:14,880
um jump oriented programming attacks

00:10:12,160 --> 00:10:15,920
and usually it it's you know it's

00:10:14,880 --> 00:10:17,360
thought to be

00:10:15,920 --> 00:10:19,040
deployed together with pointer

00:10:17,360 --> 00:10:20,480
authentication because they protect with

00:10:19,040 --> 00:10:24,240
similar

00:10:20,480 --> 00:10:25,360
attack um in five eight we merged both

00:10:24,240 --> 00:10:28,320
the user space

00:10:25,360 --> 00:10:28,800
and the internal support for bti and it

00:10:28,320 --> 00:10:30,480
was

00:10:28,800 --> 00:10:33,839
kind of an achievement because it was

00:10:30,480 --> 00:10:37,680
outstanding for a while

00:10:33,839 --> 00:10:39,760
plus the kvm arm team is working also on

00:10:37,680 --> 00:10:41,279
some pre-master virtualization patches

00:10:39,760 --> 00:10:42,480
which mostly comes from

00:10:41,279 --> 00:10:44,880
from the community and from the

00:10:42,480 --> 00:10:46,640
maintainers and this is all in

00:10:44,880 --> 00:10:48,399
preparation to the full support for

00:10:46,640 --> 00:10:50,959
nested virtualization which is quite

00:10:48,399 --> 00:10:53,920
heavyweight

00:10:50,959 --> 00:10:55,040
five nine not yet tagged i guess we are

00:10:53,920 --> 00:10:57,200
at rc6

00:10:55,040 --> 00:10:58,480
uh about to enter into rc seven four

00:10:57,200 --> 00:11:01,120
five nine

00:10:58,480 --> 00:11:02,000
um but we have a few things which are

00:11:01,120 --> 00:11:04,720
already merged

00:11:02,000 --> 00:11:07,600
and going in the right direction so we

00:11:04,720 --> 00:11:11,519
finalized again thanks to the community

00:11:07,600 --> 00:11:13,920
two features from 8.4 uh ttl and tlbi

00:11:11,519 --> 00:11:16,480
this has been queued and merged in

00:11:13,920 --> 00:11:16,480
fight9

00:11:17,200 --> 00:11:21,760
in terms of specification support we

00:11:19,839 --> 00:11:25,839
managed to develop and merge

00:11:21,760 --> 00:11:28,079
the scmi notification support

00:11:25,839 --> 00:11:29,839
so this is for the scmi power management

00:11:28,079 --> 00:11:31,760
spec

00:11:29,839 --> 00:11:34,240
which our colleagues will have different

00:11:31,760 --> 00:11:36,720
talks about that during the week

00:11:34,240 --> 00:11:38,880
um and then again some further kvm

00:11:36,720 --> 00:11:42,560
enhancement and preparatory work for

00:11:38,880 --> 00:11:43,600
nested world now a bit of prediction for

00:11:42,560 --> 00:11:44,880
00:11:43,600 --> 00:11:46,640
well these are all things which are

00:11:44,880 --> 00:11:49,600
already queued in next so

00:11:46,640 --> 00:11:50,480
fingers crossed they will appear in 510

00:11:49,600 --> 00:11:52,399
um

00:11:50,480 --> 00:11:54,320
point authentication so what was missing

00:11:52,399 --> 00:11:56,240
in point authentication

00:11:54,320 --> 00:11:58,639
well there was an extension that was

00:11:56,240 --> 00:12:01,760
added in the 8.6

00:11:58,639 --> 00:12:04,639
revision of the arm architecture

00:12:01,760 --> 00:12:06,800
but these extensions were called a.3

00:12:04,639 --> 00:12:10,480
pointer authentication 2

00:12:06,800 --> 00:12:11,920
and 8.3 fold on pointer authentication

00:12:10,480 --> 00:12:14,800
instructions

00:12:11,920 --> 00:12:17,440
and those required an enhancement in the

00:12:14,800 --> 00:12:22,000
kernels of support for default handler

00:12:17,440 --> 00:12:26,079
and some changes for the pot algorithm

00:12:22,000 --> 00:12:30,079
and these have been again developed

00:12:26,079 --> 00:12:33,360
huge and will appear in 510.

00:12:30,079 --> 00:12:33,680
as a teaser for mpan we'll also manage

00:12:33,360 --> 00:12:37,839
to

00:12:33,680 --> 00:12:40,320
upstream finally some of the preparatory

00:12:37,839 --> 00:12:43,760
rework and clean up patches

00:12:40,320 --> 00:12:48,399
of the resource control interface

00:12:43,760 --> 00:12:48,399
that we are working on for enabling mpam

00:12:48,720 --> 00:12:55,600
speaking about mpam let's talk about

00:12:52,079 --> 00:12:56,480
that so you might know or you might

00:12:55,600 --> 00:12:59,920
remember

00:12:56,480 --> 00:13:02,560
that for mpan we are enabling um

00:12:59,920 --> 00:13:04,079
the arm support based on an interface

00:13:02,560 --> 00:13:06,240
which is already there

00:13:04,079 --> 00:13:07,760
it's an intel interface except the six

00:13:06,240 --> 00:13:10,880
which is called intel

00:13:07,760 --> 00:13:12,399
um from an intel rdt technology

00:13:10,880 --> 00:13:14,720
and the interface is called resource

00:13:12,399 --> 00:13:15,440
control it's already there it's used

00:13:14,720 --> 00:13:18,800
already

00:13:15,440 --> 00:13:20,480
in deployments so the

00:13:18,800 --> 00:13:22,079
we couldn't do differently rather than

00:13:20,480 --> 00:13:24,639
enabling the arm 64

00:13:22,079 --> 00:13:26,880
backhands against that existing

00:13:24,639 --> 00:13:29,680
interface

00:13:26,880 --> 00:13:31,600
there are um a lot of patches for

00:13:29,680 --> 00:13:33,839
reworking this interface and making it

00:13:31,600 --> 00:13:35,200
multi-architecture because it was not

00:13:33,839 --> 00:13:37,279
originally

00:13:35,200 --> 00:13:39,519
all these patches are available and

00:13:37,279 --> 00:13:42,639
developed for examination

00:13:39,519 --> 00:13:44,000
in this developer branch which we are

00:13:42,639 --> 00:13:47,199
constantly rebasing

00:13:44,000 --> 00:13:50,000
and updating as i said

00:13:47,199 --> 00:13:50,800
the first bunch of patches are in next

00:13:50,000 --> 00:13:52,880
and

00:13:50,800 --> 00:13:55,360
queued on top of five nine so they will

00:13:52,880 --> 00:13:58,000
hopefully make by ten

00:13:55,360 --> 00:14:00,079
now here down below i summarized uh

00:13:58,000 --> 00:14:02,639
again as i did in march

00:14:00,079 --> 00:14:04,240
what does the rest control interface

00:14:02,639 --> 00:14:07,440
allow to do

00:14:04,240 --> 00:14:10,800
versus what the arm architecture

00:14:07,440 --> 00:14:13,360
and pan controls

00:14:10,800 --> 00:14:14,800
would theoretically allowed to to

00:14:13,360 --> 00:14:17,040
configure

00:14:14,800 --> 00:14:19,600
and mainly so the resource control

00:14:17,040 --> 00:14:22,399
interface allows to configure

00:14:19,600 --> 00:14:24,399
um cache cache portion bitmaps for layer

00:14:22,399 --> 00:14:27,760
2 and layer 3 cache

00:14:24,399 --> 00:14:29,760
up to 32-bit portions and similarly for

00:14:27,760 --> 00:14:31,760
memory bandwidth portions as well on

00:14:29,760 --> 00:14:33,839
layer 3 cache

00:14:31,760 --> 00:14:36,399
we have some initial thoughts on how to

00:14:33,839 --> 00:14:38,399
enable other

00:14:36,399 --> 00:14:39,519
extensions of the arm architecture and

00:14:38,399 --> 00:14:42,480
pan

00:14:39,519 --> 00:14:44,320
but that will come after we managed to

00:14:42,480 --> 00:14:47,440
successfully upstream

00:14:44,320 --> 00:14:52,720
all the pieces for plugging the mpan

00:14:47,440 --> 00:14:54,959
arm 64 specific driver with rest control

00:14:52,720 --> 00:14:56,720
and so if we are talking about a bit of

00:14:54,959 --> 00:15:00,320
planning or

00:14:56,720 --> 00:15:02,480
looking ahead for mpn so first of all

00:15:00,320 --> 00:15:04,560
what is the system description

00:15:02,480 --> 00:15:07,120
so there is a spec which is available in

00:15:04,560 --> 00:15:07,839
vita it's available for our partners

00:15:07,120 --> 00:15:10,480
download

00:15:07,839 --> 00:15:11,360
it's not yet widely available to the

00:15:10,480 --> 00:15:14,639
community

00:15:11,360 --> 00:15:16,320
but it's we are hoping to finalize it

00:15:14,639 --> 00:15:19,440
in october so in a month from now

00:15:16,320 --> 00:15:21,360
actually and that is for spi

00:15:19,440 --> 00:15:22,800
the device 3 bindings will be

00:15:21,360 --> 00:15:26,959
effectively

00:15:22,800 --> 00:15:27,839
worked upon and derived from the acpi

00:15:26,959 --> 00:15:31,759
bindings as well

00:15:27,839 --> 00:15:31,759
once we manage to finalize those

00:15:32,399 --> 00:15:36,560
the development plan so we are expecting

00:15:34,800 --> 00:15:37,519
we are mid of september now end of

00:15:36,560 --> 00:15:39,839
september

00:15:37,519 --> 00:15:42,480
we are expecting to continue the rework

00:15:39,839 --> 00:15:45,680
of the resource control interface

00:15:42,480 --> 00:15:47,240
throughout all the rest of 2020 so

00:15:45,680 --> 00:15:48,720
really making the interface

00:15:47,240 --> 00:15:52,720
multi-architecture

00:15:48,720 --> 00:15:55,680
there are tens and tens of patches

00:15:52,720 --> 00:15:57,519
to do that that are about to be posted

00:15:55,680 --> 00:16:00,720
on the mailing list

00:15:57,519 --> 00:16:03,279
in the next uh cycles actually in the

00:16:00,720 --> 00:16:06,399
upcoming 510 iteration

00:16:03,279 --> 00:16:08,639
the arm 64 specific back end the

00:16:06,399 --> 00:16:09,120
architectural enablement is expected to

00:16:08,639 --> 00:16:12,399
land

00:16:09,120 --> 00:16:12,959
on the list starting from 21 once we

00:16:12,399 --> 00:16:17,199
manage

00:16:12,959 --> 00:16:17,199
to upstream the resource control reworks

00:16:17,680 --> 00:16:21,440
there are few bits and pieces that we

00:16:19,519 --> 00:16:24,240
are comfortable in upstreaming

00:16:21,440 --> 00:16:26,240
anywhere in parallel so things like the

00:16:24,240 --> 00:16:27,839
system register descriptions and cpu

00:16:26,240 --> 00:16:30,160
feature enablement

00:16:27,839 --> 00:16:30,959
will likely be posted during the 510

00:16:30,160 --> 00:16:34,639
iteration

00:16:30,959 --> 00:16:37,839
anyway so you will see them appearing

00:16:34,639 --> 00:16:39,519
now a recent development that i would

00:16:37,839 --> 00:16:41,120
like to mention is also that we are

00:16:39,519 --> 00:16:44,320
looking into

00:16:41,120 --> 00:16:47,519
which are the mobile driven use cases

00:16:44,320 --> 00:16:51,120
for rampam in an android

00:16:47,519 --> 00:16:54,320
scenario so how we would like to enable

00:16:51,120 --> 00:16:55,360
mpan in an android system and how does

00:16:54,320 --> 00:16:58,399
that match

00:16:55,360 --> 00:16:59,199
with the concepts of jki from google so

00:16:58,399 --> 00:17:00,880
these

00:16:59,199 --> 00:17:02,720
uh topics are currently under

00:17:00,880 --> 00:17:04,319
investigation and

00:17:02,720 --> 00:17:06,799
together with that we are also

00:17:04,319 --> 00:17:07,439
investigating the possibility of having

00:17:06,799 --> 00:17:10,559
another

00:17:07,439 --> 00:17:12,319
internal user for mpam that would be

00:17:10,559 --> 00:17:15,120
effectively an alternative

00:17:12,319 --> 00:17:16,640
to resource control and can also provide

00:17:15,120 --> 00:17:20,480
an alternative path

00:17:16,640 --> 00:17:22,160
for upstreaming the arch arm 64 code

00:17:20,480 --> 00:17:23,839
because if we can prove that there is

00:17:22,160 --> 00:17:25,600
another user

00:17:23,839 --> 00:17:27,039
and effectively we wouldn't have to

00:17:25,600 --> 00:17:30,799
necessarily wait

00:17:27,039 --> 00:17:30,799
for the resource control interface to be

00:17:30,840 --> 00:17:36,720
stabilized test the situation

00:17:33,280 --> 00:17:40,799
on mpan

00:17:36,720 --> 00:17:42,880
now moving forward just time check

00:17:40,799 --> 00:17:44,640
few other things sparse things which are

00:17:42,880 --> 00:17:47,120
ongoing in terms of architectural

00:17:44,640 --> 00:17:51,039
enablement and spec enablement from

00:17:47,120 --> 00:17:53,600
the arm64 team so um

00:17:51,039 --> 00:17:55,600
from the good old day.2 spec the

00:17:53,600 --> 00:17:58,640
statistical profiling extensions

00:17:55,600 --> 00:18:00,720
are not yet exposed in kdm guests it was

00:17:58,640 --> 00:18:01,520
a known gap that we're trying to cover

00:18:00,720 --> 00:18:03,120
right now

00:18:01,520 --> 00:18:06,160
we are working to enable that and will

00:18:03,120 --> 00:18:08,880
be soon posted on the list

00:18:06,160 --> 00:18:10,160
uh i mentioned memory tagging so memory

00:18:08,880 --> 00:18:11,919
tagging is progressing quite well

00:18:10,160 --> 00:18:15,600
actually towards merge

00:18:11,919 --> 00:18:18,640
um at the moment we are only enabling

00:18:15,600 --> 00:18:19,440
scenarios with hip tagging and that is

00:18:18,640 --> 00:18:22,480
what

00:18:19,440 --> 00:18:23,919
is under development for both user space

00:18:22,480 --> 00:18:26,799
exposure

00:18:23,919 --> 00:18:28,960
for android systems for example or other

00:18:26,799 --> 00:18:31,200
commercial distros to pick up

00:18:28,960 --> 00:18:32,320
and also what has been ongoing in the

00:18:31,200 --> 00:18:33,840
kernel

00:18:32,320 --> 00:18:35,760
and in kernel support is now

00:18:33,840 --> 00:18:37,520
co-developed with google

00:18:35,760 --> 00:18:39,440
there are common patches available on

00:18:37,520 --> 00:18:41,039
the list

00:18:39,440 --> 00:18:42,640
between arm and google that tries to

00:18:41,039 --> 00:18:44,320
enable the incremental hip tagging

00:18:42,640 --> 00:18:46,559
support

00:18:44,320 --> 00:18:47,679
the user space enablement gain

00:18:46,559 --> 00:18:50,559
prediction here

00:18:47,679 --> 00:18:52,240
take it as a crystal ball are likely to

00:18:50,559 --> 00:18:55,360
be queued for 5.11

00:18:52,240 --> 00:18:57,200
but as usual no promise we are hoping

00:18:55,360 --> 00:18:58,080
that the patches are in a good state for

00:18:57,200 --> 00:19:01,600
going in

00:18:58,080 --> 00:19:05,120
by then we also did enable

00:19:01,600 --> 00:19:07,120
um kvn gas in parallel

00:19:05,120 --> 00:19:10,160
uh why that well to spot if there were

00:19:07,120 --> 00:19:12,720
any issues in enabling it in gas

00:19:10,160 --> 00:19:14,000
and the enablement is on the list again

00:19:12,720 --> 00:19:16,960
for heap tagging

00:19:14,000 --> 00:19:18,960
and it's available for for testing or

00:19:16,960 --> 00:19:22,320
commands

00:19:18,960 --> 00:19:25,360
as i said last time in march 2

00:19:22,320 --> 00:19:28,240
the stack tagging support is currently

00:19:25,360 --> 00:19:29,679
let's say paused so we did an early

00:19:28,240 --> 00:19:32,240
investigation

00:19:29,679 --> 00:19:33,280
and we know that the fine grain stack

00:19:32,240 --> 00:19:35,919
tagging

00:19:33,280 --> 00:19:37,440
so tagging for each function for each

00:19:35,919 --> 00:19:40,559
stack function which

00:19:37,440 --> 00:19:43,039
will break a single image of the kernel

00:19:40,559 --> 00:19:44,720
and we don't want that even though there

00:19:43,039 --> 00:19:46,880
might be some

00:19:44,720 --> 00:19:49,039
deployment scenarios which can get away

00:19:46,880 --> 00:19:50,720
with that from a general general kernel

00:19:49,039 --> 00:19:53,039
point of view this is not really

00:19:50,720 --> 00:19:56,160
acceptable by the maintainers

00:19:53,039 --> 00:19:59,280
so we are kind of having the backlog

00:19:56,160 --> 00:20:02,159
um an activity to think about how

00:19:59,280 --> 00:20:03,039
stack tagging could be enabled and

00:20:02,159 --> 00:20:06,480
deployed

00:20:03,039 --> 00:20:07,840
possibly as a debug feature then again

00:20:06,480 --> 00:20:11,760
that will depend on

00:20:07,840 --> 00:20:15,840
gcc mainly gcc compiler support

00:20:11,760 --> 00:20:15,840
which will have to be worked on as well

00:20:16,159 --> 00:20:21,200
so that's the story for memory tanking

00:20:18,880 --> 00:20:23,840
now last bullet point of the slide

00:20:21,200 --> 00:20:25,919
debug activities and core site i

00:20:23,840 --> 00:20:29,039
mentioned we are working to complete the

00:20:25,919 --> 00:20:31,440
8.4 enablement for debug and trace

00:20:29,039 --> 00:20:33,120
and there is an etn embedded trace

00:20:31,440 --> 00:20:36,640
module 4.4

00:20:33,120 --> 00:20:38,320
currently on list and thanks to the

00:20:36,640 --> 00:20:39,520
community there is also support for

00:20:38,320 --> 00:20:42,559
self-hosted trace

00:20:39,520 --> 00:20:44,000
on list as well and even the possibility

00:20:42,559 --> 00:20:47,520
to build coresight

00:20:44,000 --> 00:20:50,559
as a module which is kind of interesting

00:20:47,520 --> 00:20:52,640
thing internally

00:20:50,559 --> 00:20:54,240
it's not yet on the list but internally

00:20:52,640 --> 00:20:57,200
we're also working to enable

00:20:54,240 --> 00:20:58,559
some new extensions of the viva can

00:20:57,200 --> 00:21:00,799
trace

00:20:58,559 --> 00:21:02,640
which have been announced last year as

00:21:00,799 --> 00:21:03,840
part of the future extensions of the arm

00:21:02,640 --> 00:21:06,400
architecture

00:21:03,840 --> 00:21:09,679
these are called the ete embedded trace

00:21:06,400 --> 00:21:09,679
extension and trb

00:21:09,919 --> 00:21:17,840
we'll soon see the light of the list

00:21:12,960 --> 00:21:17,840
possibly during the 510 iteration

00:21:20,159 --> 00:21:27,360
i have one last light again snapshot of

00:21:23,840 --> 00:21:29,919
other ongoing developments

00:21:27,360 --> 00:21:31,440
so you might know arm is proposing also

00:21:29,919 --> 00:21:34,960
a firmware framework

00:21:31,440 --> 00:21:37,200
for a class which is called ffa

00:21:34,960 --> 00:21:38,320
there is a spec public spec available at

00:21:37,200 --> 00:21:41,840
this link

00:21:38,320 --> 00:21:46,480
and this provides effectively a

00:21:41,840 --> 00:21:50,320
defined interface for allowing

00:21:46,480 --> 00:21:52,159
vm communications or secure word

00:21:50,320 --> 00:21:53,440
sorry normal word to secure word

00:21:52,159 --> 00:21:57,360
invocation

00:21:53,440 --> 00:21:59,840
of services this can be either used

00:21:57,360 --> 00:22:02,480
for by hypervisor in the normal world

00:21:59,840 --> 00:22:05,440
for allowing vm to vm communication

00:22:02,480 --> 00:22:07,120
but also as i said for invoking some

00:22:05,440 --> 00:22:09,360
secure services

00:22:07,120 --> 00:22:10,960
deployed through a trusted os in the

00:22:09,360 --> 00:22:13,919
secure world

00:22:10,960 --> 00:22:16,320
so we are working publicly on the list

00:22:13,919 --> 00:22:19,679
to support both the scenarios above the

00:22:16,320 --> 00:22:21,360
users of this interface and we are

00:22:19,679 --> 00:22:24,000
hoping to progress the driver pretty

00:22:21,360 --> 00:22:24,000
soon as well

00:22:24,080 --> 00:22:29,200
before the end of the year

00:22:27,280 --> 00:22:31,520
another different spec which has been

00:22:29,200 --> 00:22:34,080
recently published as an eac

00:22:31,520 --> 00:22:36,880
early availability by arm is the true

00:22:34,080 --> 00:22:39,679
random number generator prng spec

00:22:36,880 --> 00:22:41,679
it's available at this link it

00:22:39,679 --> 00:22:43,679
introduces support for a new smc for

00:22:41,679 --> 00:22:45,120
standardizing the communication between

00:22:43,679 --> 00:22:47,360
kernel and firmware

00:22:45,120 --> 00:22:48,720
but this will also imply changes in the

00:22:47,360 --> 00:22:52,080
el3 firmware

00:22:48,720 --> 00:22:54,240
to accommodate the usmc

00:22:52,080 --> 00:22:55,760
a few changes also to handle the entropy

00:22:54,240 --> 00:22:58,720
source

00:22:55,760 --> 00:22:59,679
this is currently under internal

00:22:58,720 --> 00:23:01,600
enablement

00:22:59,679 --> 00:23:03,679
and again we see the light soon it's

00:23:01,600 --> 00:23:05,360
kind of another teaser of what's going

00:23:03,679 --> 00:23:08,720
on

00:23:05,360 --> 00:23:09,840
in terms of scmi as i said we completed

00:23:08,720 --> 00:23:12,960
most of the

00:23:09,840 --> 00:23:15,760
enablement already in the kernel

00:23:12,960 --> 00:23:16,799
what is out at the moment is a system

00:23:15,760 --> 00:23:18,880
protocol

00:23:16,799 --> 00:23:20,240
system sorry system power protocol

00:23:18,880 --> 00:23:21,840
support

00:23:20,240 --> 00:23:24,159
which has been already cued actually

00:23:21,840 --> 00:23:27,760
next um

00:23:24,159 --> 00:23:31,039
but that needs a separate control driver

00:23:27,760 --> 00:23:31,840
which has been kind of discussed during

00:23:31,039 --> 00:23:35,440
the review

00:23:31,840 --> 00:23:37,919
of the protocol and this driver

00:23:35,440 --> 00:23:38,559
is currently developed on list so it

00:23:37,919 --> 00:23:41,919
will appear

00:23:38,559 --> 00:23:45,279
in one of the future iterations as well

00:23:41,919 --> 00:23:47,200
a couple of other um

00:23:45,279 --> 00:23:48,559
random enablements so one is the system

00:23:47,200 --> 00:23:51,360
ip

00:23:48,559 --> 00:23:54,640
there is a new interconnect cmn 600 that

00:23:51,360 --> 00:23:56,960
requires a pmu driver for handling pmus

00:23:54,640 --> 00:23:58,240
this is currently on the list under

00:23:56,960 --> 00:24:02,559
active review

00:23:58,240 --> 00:24:05,440
tested by partners and community

00:24:02,559 --> 00:24:06,320
and last thing i would like to mention

00:24:05,440 --> 00:24:10,000
um

00:24:06,320 --> 00:24:12,320
around morelo so morello

00:24:10,000 --> 00:24:13,440
is a research project actually sponsored

00:24:12,320 --> 00:24:15,679
by arm

00:24:13,440 --> 00:24:16,880
um i'm not gonna spend too many words

00:24:15,679 --> 00:24:19,279
here

00:24:16,880 --> 00:24:20,799
from a kernel point of view there is an

00:24:19,279 --> 00:24:24,320
investigation activity

00:24:20,799 --> 00:24:26,400
for um basically understanding how the

00:24:24,320 --> 00:24:29,760
capability based api

00:24:26,400 --> 00:24:31,440
could be enabled in the kernel

00:24:29,760 --> 00:24:33,520
and this this is going to be a very

00:24:31,440 --> 00:24:35,760
intrusive enablement

00:24:33,520 --> 00:24:38,240
uh it's a joint collaboration between

00:24:35,760 --> 00:24:40,720
various teams in our mainly narrow

00:24:38,240 --> 00:24:42,480
tool chain teams user space android

00:24:40,720 --> 00:24:45,120
teams and so on

00:24:42,480 --> 00:24:47,200
there is a brilliant linux plumbers con

00:24:45,120 --> 00:24:50,400
presentation which i pointed here which

00:24:47,200 --> 00:24:52,640
describes the capability based api

00:24:50,400 --> 00:24:53,919
developed as part of the morelo project

00:24:52,640 --> 00:24:57,440
so i encourage you to go and look at

00:24:53,919 --> 00:24:57,440

YouTube URL: https://www.youtube.com/watch?v=P2Fzxp-n_C8


