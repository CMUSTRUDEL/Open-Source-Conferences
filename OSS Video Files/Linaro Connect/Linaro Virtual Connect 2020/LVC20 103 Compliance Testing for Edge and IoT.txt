Title: LVC20 103 Compliance Testing for Edge and IoT
Publication date: 2020-10-09
Playlist: Linaro Virtual Connect 2020
Description: 
	Compliance Testing for Edge and IoT.
Arm ServerReady has been instrumental to making Arm servers a consistent and reliable platform for OS vendors and end-users. By providing testing tools and a certification program ServerReady gave hardware vendors the tools they need to create products that just work with enterprise OSes.

In the embedded Linux ecosystem, firmware projects are adopting some of the same interfaces that are already standard on Arm servers, such as UEFI, Secure Boot, Capsule Update, and TPM. Using the same interfaces reduces the engineering required to provision and manage embedded devices by leveraging the same tooling and making the platform interface consistent.

However, unlike in the server space with ServerReady, there isn't a compliance test program for embedded platforms, which makes it difficult to know how well a given platform implements the standard interfaces. In this presentation, we'll explore what testing is available for embedded platforms and what could be provided as tooling for embedded platform compliance.

For the presentation see: https://static.linaro.org/connect/lvc20/presentations/LVC20-103-0.pdf
Captions: 
	00:00:00,160 --> 00:00:03,280
welcome everyone uh my name is grant

00:00:02,000 --> 00:00:06,640
likely if you don't know me

00:00:03,280 --> 00:00:08,960
i am a architect at uh at arm and have

00:00:06,640 --> 00:00:10,400
um been involved with the linux kernel

00:00:08,960 --> 00:00:13,920
for many years

00:00:10,400 --> 00:00:15,360
um and so i'm here to present on

00:00:13,920 --> 00:00:18,640
compliance testing for

00:00:15,360 --> 00:00:21,119
for edge and iot um now before i

00:00:18,640 --> 00:00:23,039
start i just want to say like this whole

00:00:21,119 --> 00:00:26,240
virtual conference thing

00:00:23,039 --> 00:00:28,560
still really weird uh it's really odd

00:00:26,240 --> 00:00:31,359
not being able to to see your faces and

00:00:28,560 --> 00:00:32,880
interact especially on this presentation

00:00:31,359 --> 00:00:33,520
this is actually very much work in

00:00:32,880 --> 00:00:35,440
progress

00:00:33,520 --> 00:00:36,559
and so questions and thoughts are really

00:00:35,440 --> 00:00:39,920
much really

00:00:36,559 --> 00:00:42,879
much appreciated um i have both of the

00:00:39,920 --> 00:00:44,559
the chat channels here open beside me if

00:00:42,879 --> 00:00:45,520
you have any questions please go ahead

00:00:44,559 --> 00:00:47,680
and ask them

00:00:45,520 --> 00:00:48,640
i'll see if i see them and i'll try to

00:00:47,680 --> 00:00:51,360
answer them as we

00:00:48,640 --> 00:00:51,360
as we go along

00:00:51,920 --> 00:00:59,600
so but let's just get right into it and

00:00:54,640 --> 00:01:01,760
i'll share my screen

00:00:59,600 --> 00:01:03,760
so um yeah as i said i want to talk

00:01:01,760 --> 00:01:04,879
about some compliance testing for it for

00:01:03,760 --> 00:01:08,159
edge and iot

00:01:04,879 --> 00:01:10,720
um now if you were just watching peter

00:01:08,159 --> 00:01:11,520
robinson's uh keynote he actually did a

00:01:10,720 --> 00:01:14,720
really good

00:01:11,520 --> 00:01:17,040
job of uh of presenting kind of what

00:01:14,720 --> 00:01:18,560
what it looks like for the edge uh and

00:01:17,040 --> 00:01:20,560
that's you know sometimes you'll often

00:01:18,560 --> 00:01:22,720
hear people talking about well edge

00:01:20,560 --> 00:01:24,640
edge is just server and in a lot of

00:01:22,720 --> 00:01:26,560
respects i i agree with that because

00:01:24,640 --> 00:01:28,240
we're aiming towards the same kind of

00:01:26,560 --> 00:01:30,159
platformization

00:01:28,240 --> 00:01:31,759
but the reality is that we've got a lot

00:01:30,159 --> 00:01:34,880
of different types of edge devices on a

00:01:31,759 --> 00:01:37,439
lot of different types of profiles

00:01:34,880 --> 00:01:38,079
so for the purpose of what i want to

00:01:37,439 --> 00:01:41,840
talk about

00:01:38,079 --> 00:01:42,240
here is that i'm focusing on the things

00:01:41,840 --> 00:01:45,439
that

00:01:42,240 --> 00:01:48,479
have traditionally been more vertically

00:01:45,439 --> 00:01:51,280
integrated have traditionally been

00:01:48,479 --> 00:01:52,399
more custom builds on the on the os's

00:01:51,280 --> 00:01:54,079
and what it looks like to bring

00:01:52,399 --> 00:01:55,119
standards into that to bring some of the

00:01:54,079 --> 00:01:58,240
benefits

00:01:55,119 --> 00:02:02,719
of a of a software a robust

00:01:58,240 --> 00:02:02,719
software ecosystem into that

00:02:03,040 --> 00:02:06,560
and i also want to talk about kind of

00:02:04,719 --> 00:02:08,239
when i'm talking about standardization

00:02:06,560 --> 00:02:09,920
and they can kind of compliance that

00:02:08,239 --> 00:02:12,879
we're talking about

00:02:09,920 --> 00:02:14,560
is this ends up being at the very low

00:02:12,879 --> 00:02:16,640
level details

00:02:14,560 --> 00:02:18,480
because you know so we're talking about

00:02:16,640 --> 00:02:19,920
how you actually how the system how the

00:02:18,480 --> 00:02:21,360
hardware is put together

00:02:19,920 --> 00:02:23,040
we're talking about the system

00:02:21,360 --> 00:02:24,879
description whether it be device tree or

00:02:23,040 --> 00:02:28,560
acpi that is provided

00:02:24,879 --> 00:02:30,319
in up to the um to the operating system

00:02:28,560 --> 00:02:31,760
uh i'm talking about the the firmware

00:02:30,319 --> 00:02:34,319
apis you know what

00:02:31,760 --> 00:02:36,080
what interfaces does the firmware expose

00:02:34,319 --> 00:02:37,760
at boot time and run time

00:02:36,080 --> 00:02:40,080
that an operating system vendor can make

00:02:37,760 --> 00:02:42,160
good use of

00:02:40,080 --> 00:02:43,120
and the reason that this is focusing

00:02:42,160 --> 00:02:46,160
primarily on that

00:02:43,120 --> 00:02:48,400
and not on the upper layers is that once

00:02:46,160 --> 00:02:50,640
a lot of those pieces are in place and

00:02:48,400 --> 00:02:52,319
the use cases that peter was talking

00:02:50,640 --> 00:02:53,760
about in his keynote

00:02:52,319 --> 00:02:55,599
uh a lot of those are enabled

00:02:53,760 --> 00:02:56,400
automatically because you get the right

00:02:55,599 --> 00:02:59,040
layers

00:02:56,400 --> 00:03:00,879
down below so that's why for this

00:02:59,040 --> 00:03:02,720
presentation i'm focusing

00:03:00,879 --> 00:03:05,840
very much on the firmware very much on

00:03:02,720 --> 00:03:05,840
what the platform provides

00:03:06,879 --> 00:03:11,680
right so if we're talking about

00:03:10,400 --> 00:03:13,840
compliance what exact

00:03:11,680 --> 00:03:14,959
what are the standards that we're

00:03:13,840 --> 00:03:18,400
actually talking about

00:03:14,959 --> 00:03:18,879
compliance with with what uh so as far

00:03:18,400 --> 00:03:20,640
as to

00:03:18,879 --> 00:03:24,080
start with picking out the standards

00:03:20,640 --> 00:03:26,319
that are relevant in this space

00:03:24,080 --> 00:03:27,200
to begin with i'd point out based system

00:03:26,319 --> 00:03:30,080
architecture

00:03:27,200 --> 00:03:31,040
um a lot of you will are already

00:03:30,080 --> 00:03:33,280
familiar with

00:03:31,040 --> 00:03:34,319
this the work that was done when in the

00:03:33,280 --> 00:03:37,519
server space

00:03:34,319 --> 00:03:40,000
with uh server-based system architecture

00:03:37,519 --> 00:03:41,920
and that provided a baseline for how the

00:03:40,000 --> 00:03:44,400
hardware is put together

00:03:41,920 --> 00:03:46,720
so that you know your operating system

00:03:44,400 --> 00:03:50,640
doesn't have to deal with 20 different

00:03:46,720 --> 00:03:51,920
uh standard uh controllers it doesn't

00:03:50,640 --> 00:03:52,959
have to deal with 20 different serial

00:03:51,920 --> 00:03:53,760
ports doesn't have to deal with

00:03:52,959 --> 00:03:57,040
different

00:03:53,760 --> 00:04:00,400
um not network devices so much but uh

00:03:57,040 --> 00:04:02,319
how your gif is wired up how your uh

00:04:00,400 --> 00:04:04,000
smmu you know all of those things if

00:04:02,319 --> 00:04:05,760
it's if they're wired up consistently

00:04:04,000 --> 00:04:08,080
there's less

00:04:05,760 --> 00:04:09,760
per platform enablement that needs to go

00:04:08,080 --> 00:04:12,879
on

00:04:09,760 --> 00:04:16,079
uh next one is uefi um

00:04:12,879 --> 00:04:16,720
now if you may have heard me say this

00:04:16,079 --> 00:04:18,400
before

00:04:16,720 --> 00:04:21,199
i said many times but i think it's worth

00:04:18,400 --> 00:04:23,120
repeating when i'm talking about uefi

00:04:21,199 --> 00:04:26,800
i am talking about the specification i

00:04:23,120 --> 00:04:28,639
am not talking about edk-2 tiano core

00:04:26,800 --> 00:04:30,800
a lot of times those two got conflated

00:04:28,639 --> 00:04:34,400
which is why i

00:04:30,800 --> 00:04:36,479
talk about this a lot uefi is a spec edk

00:04:34,400 --> 00:04:38,560
ii tiana core is one implementation of

00:04:36,479 --> 00:04:39,919
that and those two are not the same

00:04:38,560 --> 00:04:42,560
things

00:04:39,919 --> 00:04:43,520
so with the the platforms that we're

00:04:42,560 --> 00:04:44,560
talking about the ones that are

00:04:43,520 --> 00:04:47,199
predominantly you

00:04:44,560 --> 00:04:50,000
based when i'm talking about uefi is

00:04:47,199 --> 00:04:54,320
uefi implemented within the ubu project

00:04:50,000 --> 00:04:56,639
not edk2 device 3 and acpi

00:04:54,320 --> 00:04:58,240
also incredibly relevant because that of

00:04:56,639 --> 00:04:59,919
course is the

00:04:58,240 --> 00:05:01,600
what is provided to the operating system

00:04:59,919 --> 00:05:03,039
so the os knows what to do with the

00:05:01,600 --> 00:05:06,479
hardware

00:05:03,039 --> 00:05:09,360
um evbr is uh you can find

00:05:06,479 --> 00:05:11,440
ebbr on on github there it is an open

00:05:09,360 --> 00:05:12,800
project to produce kind of is basically

00:05:11,440 --> 00:05:15,280
a roll-up spec

00:05:12,800 --> 00:05:16,639
that defines the requirements and picks

00:05:15,280 --> 00:05:18,560
and pulls out which

00:05:16,639 --> 00:05:21,039
requirements are necessary to pull

00:05:18,560 --> 00:05:23,120
together a consistent platform

00:05:21,039 --> 00:05:24,560
and this is a project that got started

00:05:23,120 --> 00:05:28,160
about three years ago at

00:05:24,560 --> 00:05:30,639
adelinaro connect to create

00:05:28,160 --> 00:05:31,440
a set of documents that are relevant for

00:05:30,639 --> 00:05:34,880
um

00:05:31,440 --> 00:05:35,520
for the embedded space um and then also

00:05:34,880 --> 00:05:37,360
psa

00:05:35,520 --> 00:05:38,880
if you look at platform security

00:05:37,360 --> 00:05:41,840
architecture and

00:05:38,880 --> 00:05:42,720
you know what what which arm has

00:05:41,840 --> 00:05:44,639
produced and

00:05:42,720 --> 00:05:45,919
published on how you actually build up a

00:05:44,639 --> 00:05:47,680
secure platform

00:05:45,919 --> 00:05:49,039
so these are the standards that have

00:05:47,680 --> 00:05:51,919
floated to the top as

00:05:49,039 --> 00:05:52,639
what is relevant in these embedded edge

00:05:51,919 --> 00:05:56,000
and iot

00:05:52,639 --> 00:05:56,000
embedded compute devices

00:05:56,639 --> 00:06:01,680
a little bit more about ebbr um as i

00:05:59,840 --> 00:06:05,039
said this is this grew out of the

00:06:01,680 --> 00:06:06,000
the uboot and linux ecosystem the main

00:06:05,039 --> 00:06:08,720
pain point

00:06:06,000 --> 00:06:10,800
that was highlighted is all of the linux

00:06:08,720 --> 00:06:15,680
particularly the community distros

00:06:10,800 --> 00:06:17,919
fedora souza debian ubuntu

00:06:15,680 --> 00:06:19,120
maintaining support for all of the armed

00:06:17,919 --> 00:06:22,240
single board computers

00:06:19,120 --> 00:06:23,120
was just about impossible or really

00:06:22,240 --> 00:06:24,800
difficult because

00:06:23,120 --> 00:06:27,039
every single board required custom

00:06:24,800 --> 00:06:29,759
engineering to bring them up

00:06:27,039 --> 00:06:32,400
uh so ebbr you know already souza and

00:06:29,759 --> 00:06:35,280
fedora had been

00:06:32,400 --> 00:06:37,199
championing for the uefi specification

00:06:35,280 --> 00:06:39,680
to be implemented in u-boot

00:06:37,199 --> 00:06:41,440
so that they could use that for the

00:06:39,680 --> 00:06:44,080
majority of their os support

00:06:41,440 --> 00:06:44,560
and what was what they were able to do

00:06:44,080 --> 00:06:46,479
is

00:06:44,560 --> 00:06:48,560
in fact ship a u-boot image for the

00:06:46,479 --> 00:06:50,560
particular board

00:06:48,560 --> 00:06:52,479
but that you boot image that's the only

00:06:50,560 --> 00:06:55,520
really custom piece that ends up being

00:06:52,479 --> 00:06:58,080
in the image on the platform so that

00:06:55,520 --> 00:06:59,280
it can then jump in and use the uefi api

00:06:58,080 --> 00:07:02,479
to actually get into

00:06:59,280 --> 00:07:04,080
into the operating system uh so what

00:07:02,479 --> 00:07:07,919
ebvr is covering is a

00:07:04,080 --> 00:07:10,479
subset of the uefi api um it talks about

00:07:07,919 --> 00:07:13,199
uh secure world interfaces like psci

00:07:10,479 --> 00:07:14,400
uh firmware and os uh separation and it

00:07:13,199 --> 00:07:16,639
also goes into

00:07:14,400 --> 00:07:17,759
how to deal with some embedded specific

00:07:16,639 --> 00:07:20,800
constraints

00:07:17,759 --> 00:07:22,880
such as shared storage right if emmc is

00:07:20,800 --> 00:07:24,880
the only device that's on your platform

00:07:22,880 --> 00:07:26,000
and both your firmware images and your

00:07:24,880 --> 00:07:28,080
os images

00:07:26,000 --> 00:07:31,840
have to exist on that same thing how do

00:07:28,080 --> 00:07:31,840
you actually share between those two

00:07:32,639 --> 00:07:35,680
and the two other big points i want to

00:07:34,880 --> 00:07:38,160
bring up on this

00:07:35,680 --> 00:07:40,639
is first of all ebbr is designed to

00:07:38,160 --> 00:07:43,440
align with what's already happening in

00:07:40,639 --> 00:07:45,199
server and desktop and data center right

00:07:43,440 --> 00:07:47,360
the goal is not to create a new set of

00:07:45,199 --> 00:07:48,720
standards that diverges and goes off in

00:07:47,360 --> 00:07:50,800
a different direction

00:07:48,720 --> 00:07:52,160
but rather to adopt standards that

00:07:50,800 --> 00:07:54,319
already exist

00:07:52,160 --> 00:07:55,599
where it is where it makes sense to do

00:07:54,319 --> 00:07:58,960
so

00:07:55,599 --> 00:08:01,120
so uefi by adopting the uefi

00:07:58,960 --> 00:08:02,560
spec or standard into traditionally

00:08:01,120 --> 00:08:04,720
vertically integrated

00:08:02,560 --> 00:08:06,479
products you actually get the benefits

00:08:04,720 --> 00:08:08,639
of consistent deployment

00:08:06,479 --> 00:08:12,000
but it's not a full upheaval of how you

00:08:08,639 --> 00:08:13,440
actually would would build platforms uh

00:08:12,000 --> 00:08:14,400
and the other thing i want to highlight

00:08:13,440 --> 00:08:16,000
with ebbr

00:08:14,400 --> 00:08:17,520
is that this is intense this is a cross

00:08:16,000 --> 00:08:19,599
architecture spec or

00:08:17,520 --> 00:08:21,360
at least it's intended to be if you go

00:08:19,599 --> 00:08:23,680
and take a look at the spec right now

00:08:21,360 --> 00:08:24,400
uh you'll notice it only covers uh arm

00:08:23,680 --> 00:08:27,680
and arm

00:08:24,400 --> 00:08:28,080
and ar64 uh but the the structure of the

00:08:27,680 --> 00:08:30,960
spec

00:08:28,080 --> 00:08:32,159
is this is for the embedded compute

00:08:30,960 --> 00:08:34,320
ecosystem

00:08:32,159 --> 00:08:36,000
and other architectures have been

00:08:34,320 --> 00:08:37,039
expressing interest on being involved

00:08:36,000 --> 00:08:40,640
and having

00:08:37,039 --> 00:08:44,320
their architectures included within the

00:08:40,640 --> 00:08:45,519
document right

00:08:44,320 --> 00:08:47,440
okay so i've spent a bunch of time

00:08:45,519 --> 00:08:50,399
talking about the context

00:08:47,440 --> 00:08:52,000
um but the big elephant in the room when

00:08:50,399 --> 00:08:53,519
we're talking about standards for

00:08:52,000 --> 00:08:56,399
embedded compute

00:08:53,519 --> 00:08:58,080
is we don't have any kind of any way to

00:08:56,399 --> 00:09:00,080
say whether or not the platform is

00:08:58,080 --> 00:09:02,240
compliant we don't have any compliance

00:09:00,080 --> 00:09:04,880
testing we don't have any tooling

00:09:02,240 --> 00:09:06,800
we don't have the we don't have any way

00:09:04,880 --> 00:09:10,240
to put a stamp on a product

00:09:06,800 --> 00:09:12,800
and say this is compliant and therefore

00:09:10,240 --> 00:09:14,480
this set of embedded offering systems is

00:09:12,800 --> 00:09:17,760
going to work out of the box

00:09:14,480 --> 00:09:18,640
on that product uh so that's what this

00:09:17,760 --> 00:09:20,959
presentation

00:09:18,640 --> 00:09:22,399
or discussion this is this is really

00:09:20,959 --> 00:09:24,240
more of a discussion topic

00:09:22,399 --> 00:09:26,000
that's what i'm talking about today and

00:09:24,240 --> 00:09:28,800
i'm going to go through

00:09:26,000 --> 00:09:29,519
uh what it would look like to have a

00:09:28,800 --> 00:09:32,160
compliance

00:09:29,519 --> 00:09:34,000
testing program for embedded compute

00:09:32,160 --> 00:09:36,480
devices

00:09:34,000 --> 00:09:37,519
uh and so these if we need a compliance

00:09:36,480 --> 00:09:40,560
testing

00:09:37,519 --> 00:09:42,080
um oh is it just not a

00:09:40,560 --> 00:09:44,000
question is based system architecture

00:09:42,080 --> 00:09:44,880
the same as spsa or is it a different

00:09:44,000 --> 00:09:47,760
spec

00:09:44,880 --> 00:09:49,440
uh spsa is a server-based system

00:09:47,760 --> 00:09:51,120
architecture so i've just stole those

00:09:49,440 --> 00:09:53,360
last three letters to talk about

00:09:51,120 --> 00:09:54,800
what it looks like for the hardware but

00:09:53,360 --> 00:09:55,839
i don't have anything that i can really

00:09:54,800 --> 00:09:58,320
talk about that

00:09:55,839 --> 00:09:58,320
right now

00:09:59,600 --> 00:10:02,880
so some of the questions that we have to

00:10:01,839 --> 00:10:05,440
ask on whether the

00:10:02,880 --> 00:10:07,760
the platform is compliant is i mean what

00:10:05,440 --> 00:10:10,800
what os's are going to boot reliably

00:10:07,760 --> 00:10:11,600
um are the interfaces that are required

00:10:10,800 --> 00:10:13,600
by this

00:10:11,600 --> 00:10:14,880
spec by the specifications implemented

00:10:13,600 --> 00:10:18,160
correctly or do they

00:10:14,880 --> 00:10:20,079
behave in some odd manner um

00:10:18,160 --> 00:10:21,839
what are the boot scenarios that need to

00:10:20,079 --> 00:10:22,480
be supported do you need to boot off of

00:10:21,839 --> 00:10:25,839
usb

00:10:22,480 --> 00:10:26,800
do you need to when s sd card or emmc is

00:10:25,839 --> 00:10:29,279
important

00:10:26,800 --> 00:10:31,680
um network over the air update what are

00:10:29,279 --> 00:10:33,360
the interfaces that are needed

00:10:31,680 --> 00:10:36,320
and then what would a compliance test

00:10:33,360 --> 00:10:36,320
procedure look like

00:10:37,440 --> 00:10:43,279
now i will step back for a moment

00:10:41,120 --> 00:10:44,160
for the what i've got on the the next

00:10:43,279 --> 00:10:47,519
few sides is

00:10:44,160 --> 00:10:49,519
very u-boot-centric um that isn't

00:10:47,519 --> 00:10:51,519
because any of these specifications

00:10:49,519 --> 00:10:52,399
require u-boot i want to be really clear

00:10:51,519 --> 00:10:56,720
on that

00:10:52,399 --> 00:10:59,360
uh but the pre the predominant platforms

00:10:56,720 --> 00:11:00,640
are ubu based and they are linux based

00:10:59,360 --> 00:11:02,320
so the examples that are going to be

00:11:00,640 --> 00:11:04,880
given here are going to be from that

00:11:02,320 --> 00:11:04,880
context

00:11:05,360 --> 00:11:08,720
right so the the first stage um if we're

00:11:07,920 --> 00:11:10,320
bringing up a

00:11:08,720 --> 00:11:12,079
trying to make a platform compliant is

00:11:10,320 --> 00:11:13,040
make sure we've actually got uefi turned

00:11:12,079 --> 00:11:16,160
on

00:11:13,040 --> 00:11:18,320
there's been a lot of work um by

00:11:16,160 --> 00:11:19,360
um the engineers who've been working on

00:11:18,320 --> 00:11:22,959
on u-boot

00:11:19,360 --> 00:11:25,839
to enable this um heinrich and takahiro

00:11:22,959 --> 00:11:26,320
uh elias uh there's been just a ton of

00:11:25,839 --> 00:11:30,720
work

00:11:26,320 --> 00:11:31,040
gone into uh to stabilizing and refining

00:11:30,720 --> 00:11:33,680
the

00:11:31,040 --> 00:11:34,800
uefi implementation in ubud a lot of

00:11:33,680 --> 00:11:35,519
people don't know that it's actually

00:11:34,800 --> 00:11:38,399
there

00:11:35,519 --> 00:11:40,320
so this is my call out to embedded

00:11:38,399 --> 00:11:42,320
developers if you haven't turned the efi

00:11:40,320 --> 00:11:44,959
interfaces on in your firmware

00:11:42,320 --> 00:11:47,200
go ahead and do that and go and start

00:11:44,959 --> 00:11:50,240
looking at what it looks like for uefi

00:11:47,200 --> 00:11:51,680
boot flow here's a starting point these

00:11:50,240 --> 00:11:54,160
config options here

00:11:51,680 --> 00:11:55,120
are the ones that you should start with

00:11:54,160 --> 00:11:58,160
to get you

00:11:55,120 --> 00:11:58,959
uh enabled um i also have a shameless

00:11:58,160 --> 00:12:01,360
plug here

00:11:58,959 --> 00:12:02,639
there is a scripts and makefile set that

00:12:01,360 --> 00:12:05,279
i've been hacking on

00:12:02,639 --> 00:12:05,760
that i intend to submit to the like this

00:12:05,279 --> 00:12:08,320
this is

00:12:05,760 --> 00:12:10,240
i consider this part of the ubu project

00:12:08,320 --> 00:12:12,079
um but it's it's very much prototype

00:12:10,240 --> 00:12:13,519
right now

00:12:12,079 --> 00:12:15,600
one of the things that i've noticed with

00:12:13,519 --> 00:12:17,279
uboot is we've got trusted firmware

00:12:15,600 --> 00:12:18,959
we've got off tv we've got standalone mm

00:12:17,279 --> 00:12:21,680
we've got uboot

00:12:18,959 --> 00:12:22,160
there are various per platform scripts

00:12:21,680 --> 00:12:25,040
that

00:12:22,160 --> 00:12:26,000
you can find on how to build all those

00:12:25,040 --> 00:12:28,639
things together

00:12:26,000 --> 00:12:30,079
but it's not all rolled up into a a

00:12:28,639 --> 00:12:32,240
consistent package

00:12:30,079 --> 00:12:34,000
uh so there's i'm working on been

00:12:32,240 --> 00:12:34,800
working on a tool that allows you based

00:12:34,000 --> 00:12:37,279
on your you

00:12:34,800 --> 00:12:38,079
configuration choose the correct options

00:12:37,279 --> 00:12:40,320
for tfa

00:12:38,079 --> 00:12:41,120
for opti and standalone mm so that you

00:12:40,320 --> 00:12:43,839
can build

00:12:41,120 --> 00:12:46,720
a fully functional firmware image that's

00:12:43,839 --> 00:12:46,720
my shameless plug

00:12:46,959 --> 00:12:51,040
next step we need to test the interfaces

00:12:49,680 --> 00:12:53,200
fortunately

00:12:51,040 --> 00:12:55,120
a lot of the tests just on whether the

00:12:53,200 --> 00:12:56,639
whether or not the interfaces exist

00:12:55,120 --> 00:12:58,800
have already been written they've been

00:12:56,639 --> 00:13:01,360
in written as part of the tiana

00:12:58,800 --> 00:13:01,920
project uh so if you go to the github

00:13:01,360 --> 00:13:04,000
page

00:13:01,920 --> 00:13:05,040
that's on this link you'll find the the

00:13:04,000 --> 00:13:08,560
source code for the

00:13:05,040 --> 00:13:10,399
for the test framework um

00:13:08,560 --> 00:13:11,600
it's not immediately obvious how to

00:13:10,399 --> 00:13:13,920
build it

00:13:11,600 --> 00:13:15,440
but again there's i've got a there's a

00:13:13,920 --> 00:13:18,560
manifest that i

00:13:15,440 --> 00:13:20,240
put together and if you go through this

00:13:18,560 --> 00:13:20,959
you can you get a zip file out at the

00:13:20,240 --> 00:13:24,399
end of it which

00:13:20,959 --> 00:13:27,360
contains the latest sct and

00:13:24,399 --> 00:13:28,639
the latest edk2 shell which will run on

00:13:27,360 --> 00:13:30,800
you root

00:13:28,639 --> 00:13:32,240
um and so with that zip file if you

00:13:30,800 --> 00:13:34,720
unzip it onto a usb

00:13:32,240 --> 00:13:36,399
key you immediately got a test framework

00:13:34,720 --> 00:13:39,600
that works

00:13:36,399 --> 00:13:42,959
and in fact i think i'll

00:13:39,600 --> 00:13:49,600
let's see so i can actually demonstrate

00:13:42,959 --> 00:13:52,639
that here uh

00:13:49,600 --> 00:13:57,360
right so this this is no that's not it

00:13:52,639 --> 00:13:57,360
okay two test manifest

00:13:59,199 --> 00:14:03,199
um this is the outputs of the script i

00:14:02,079 --> 00:14:05,040
don't really need to show you that but

00:14:03,199 --> 00:14:09,079
what i do want to show you

00:14:05,040 --> 00:14:11,360
is i have here a um rockpro 64

00:14:09,079 --> 00:14:14,000
rk3399 based platform and i'll just

00:14:11,360 --> 00:14:14,000
reset it

00:14:14,320 --> 00:14:19,040
and you can see here this was built

00:14:16,720 --> 00:14:19,040
today

00:14:19,920 --> 00:14:24,560
uh september 22nd um as it's going

00:14:23,120 --> 00:14:26,880
through the regular boot this is using

00:14:24,560 --> 00:14:30,320
the stock scripts in ubut

00:14:26,880 --> 00:14:32,720
and it will go through efi boot device

00:14:30,320 --> 00:14:34,399
selection and here is the ue5 shell

00:14:32,720 --> 00:14:35,760
whereas it was able to find it on the

00:14:34,399 --> 00:14:37,920
usb key

00:14:35,760 --> 00:14:39,920
and boots the right thing that drops me

00:14:37,920 --> 00:14:44,079
to a edk2

00:14:39,920 --> 00:14:45,839
shell prompt and i can run the sct

00:14:44,079 --> 00:14:47,519
it gives me some help desk and i can do

00:14:45,839 --> 00:14:49,120
sct

00:14:47,519 --> 00:14:50,800
and it will actually start loading

00:14:49,120 --> 00:14:54,079
things loading up the tests

00:14:50,800 --> 00:14:55,920
and running them one by one

00:14:54,079 --> 00:14:59,120
uh so that's all well good we can run

00:14:55,920 --> 00:14:59,120
the sct test and

00:14:59,279 --> 00:15:03,120
again takahiro and heinrich have done

00:15:01,440 --> 00:15:06,000
ton of work to make this

00:15:03,120 --> 00:15:07,519
uh to get the sct running and a lot of

00:15:06,000 --> 00:15:10,560
the

00:15:07,519 --> 00:15:12,399
the tests working this is now becoming

00:15:10,560 --> 00:15:13,839
looking through one time of figuring out

00:15:12,399 --> 00:15:14,800
what are the interfaces that need to be

00:15:13,839 --> 00:15:16,720
refined

00:15:14,800 --> 00:15:18,240
uh so if you're working on a platform

00:15:16,720 --> 00:15:20,000
another strong of

00:15:18,240 --> 00:15:21,519
a strong advice i have is get onto

00:15:20,000 --> 00:15:23,600
mainline if you're not running with

00:15:21,519 --> 00:15:29,120
mainline get onto mainland because

00:15:23,600 --> 00:15:29,120
this these interfaces are maturing fast

00:15:29,199 --> 00:15:32,639
right so i'll just let that let that run

00:15:32,079 --> 00:15:36,079
and

00:15:32,639 --> 00:15:38,079
come back to my slides right

00:15:36,079 --> 00:15:40,079
and i'm running a little low on time so

00:15:38,079 --> 00:15:43,120
i better get moving

00:15:40,079 --> 00:15:44,480
um next step this slide isn't nearly so

00:15:43,120 --> 00:15:46,079
happy because

00:15:44,480 --> 00:15:47,600
i can tell you to run the test but i

00:15:46,079 --> 00:15:49,120
can't tell you what the test results

00:15:47,600 --> 00:15:51,199
mean yet or whether or not that's

00:15:49,120 --> 00:15:55,360
compliant with the ebpr

00:15:51,199 --> 00:15:57,839
uh we don't have any partisan tools

00:15:55,360 --> 00:15:59,199
uh at the moment uh stuff is being

00:15:57,839 --> 00:16:00,399
worked on so it's not like there's

00:15:59,199 --> 00:16:01,600
nothing happening here

00:16:00,399 --> 00:16:04,079
but there's nothing that's actually

00:16:01,600 --> 00:16:07,120
released in public out there on

00:16:04,079 --> 00:16:09,279
how to parse and interpret the sct

00:16:07,120 --> 00:16:13,040
results for an ebvr

00:16:09,279 --> 00:16:16,000
platform uh if you're interested in

00:16:13,040 --> 00:16:17,440
this is something that there's i mean

00:16:16,000 --> 00:16:19,360
there's lots of room for collaboration

00:16:17,440 --> 00:16:22,000
if you want to help with this

00:16:19,360 --> 00:16:22,959
i would really appreciate uh just let me

00:16:22,000 --> 00:16:26,800
know and

00:16:22,959 --> 00:16:30,720
uh we'll work that out um

00:16:26,800 --> 00:16:33,759
let's see okay but non-monopoly os

00:16:30,720 --> 00:16:36,320
um right then then i think that the next

00:16:33,759 --> 00:16:38,399
bit of a certification program is what

00:16:36,320 --> 00:16:40,320
are we actually able to boot

00:16:38,399 --> 00:16:41,920
it's fine to have specifications it's

00:16:40,320 --> 00:16:44,240
fine to have specification

00:16:41,920 --> 00:16:45,360
test tools those are critically

00:16:44,240 --> 00:16:47,040
important

00:16:45,360 --> 00:16:48,480
but those mean nothing if they're if

00:16:47,040 --> 00:16:50,160
we're not able to actually boot the real

00:16:48,480 --> 00:16:52,720
operating systems

00:16:50,160 --> 00:16:54,160
so i think a certification test plan

00:16:52,720 --> 00:16:57,360
would include

00:16:54,160 --> 00:17:00,560
um off the top like for a reasonable

00:16:57,360 --> 00:17:04,559
selection here i think taking at least

00:17:00,560 --> 00:17:05,760
two um unmodified commercial os well i

00:17:04,559 --> 00:17:08,480
say commercial but

00:17:05,760 --> 00:17:10,400
released os's without having to do any

00:17:08,480 --> 00:17:11,360
custom engineering be able to boot those

00:17:10,400 --> 00:17:13,360
on the platform

00:17:11,360 --> 00:17:15,520
and bring the platform up into a fully

00:17:13,360 --> 00:17:19,039
functional state

00:17:15,520 --> 00:17:20,160
um it's i mean we've we're able to do

00:17:19,039 --> 00:17:23,600
this now

00:17:20,160 --> 00:17:25,360
so fedora i we've had i've had success

00:17:23,600 --> 00:17:27,199
or the some of the other folks in arm

00:17:25,360 --> 00:17:30,559
we've had success with

00:17:27,199 --> 00:17:32,160
um fedora with debian with souza

00:17:30,559 --> 00:17:33,679
um there's been some success with

00:17:32,160 --> 00:17:36,880
freebsd

00:17:33,679 --> 00:17:38,960
uh all there's

00:17:36,880 --> 00:17:39,919
the major problems that we're hitting

00:17:38,960 --> 00:17:41,919
right it's like

00:17:39,919 --> 00:17:44,559
the interfaces are there to to do this

00:17:41,919 --> 00:17:46,720
properly the major missing piece

00:17:44,559 --> 00:17:48,240
is device tree compatibility right and

00:17:46,720 --> 00:17:49,679
this is right back into a problem that

00:17:48,240 --> 00:17:52,799
we've had for a very long time

00:17:49,679 --> 00:17:54,000
of what is our stability guarantee for

00:17:52,799 --> 00:17:56,320
device tree

00:17:54,000 --> 00:17:58,080
um and the drivers for that have always

00:17:56,320 --> 00:17:59,520
been different because

00:17:58,080 --> 00:18:01,039
so many of the device tree platforms

00:17:59,520 --> 00:18:02,799
were vertically integrated there isn't

00:18:01,039 --> 00:18:05,760
the same economic driver

00:18:02,799 --> 00:18:07,200
to make it a generic platform that is

00:18:05,760 --> 00:18:09,120
that is stable

00:18:07,200 --> 00:18:11,280
um so i think we need to acknowledge

00:18:09,120 --> 00:18:13,039
that on these embedded devices

00:18:11,280 --> 00:18:14,720
is that there's always going to be a

00:18:13,039 --> 00:18:16,559
certain amount of

00:18:14,720 --> 00:18:18,000
the device tree is going to either need

00:18:16,559 --> 00:18:20,640
to be updated by the os

00:18:18,000 --> 00:18:22,640
or we need to do do some um specific

00:18:20,640 --> 00:18:25,280
things for the deployment

00:18:22,640 --> 00:18:26,720
however the wild west of nothing is ever

00:18:25,280 --> 00:18:29,440
compatible i don't think is a

00:18:26,720 --> 00:18:30,240
is a good answer either um this is still

00:18:29,440 --> 00:18:32,160
being

00:18:30,240 --> 00:18:33,360
tackled within the device tree evolution

00:18:32,160 --> 00:18:34,880
project um

00:18:33,360 --> 00:18:36,400
and so that that's not really going to

00:18:34,880 --> 00:18:40,000
get solved here

00:18:36,400 --> 00:18:43,200
but what a certification plan looks like

00:18:40,000 --> 00:18:46,240
we would need to reflect that

00:18:43,200 --> 00:18:48,000
uh one question that i've been asked is

00:18:46,240 --> 00:18:49,440
i mean if i'm talking about primarily

00:18:48,000 --> 00:18:50,960
vertically integrated if i'm talking

00:18:49,440 --> 00:18:54,080
about yocto

00:18:50,960 --> 00:18:55,360
um why do i bother with testing distros

00:18:54,080 --> 00:18:58,080
why is that important

00:18:55,360 --> 00:19:00,320
um two two answers to that first of all

00:18:58,080 --> 00:19:02,400
is i think the distros are important

00:19:00,320 --> 00:19:03,919
these platforms have gotten so

00:19:02,400 --> 00:19:07,120
complicated

00:19:03,919 --> 00:19:09,760
that it's not enough to is

00:19:07,120 --> 00:19:10,480
it's not just yacto right and if you're

00:19:09,760 --> 00:19:13,360
trying to

00:19:10,480 --> 00:19:13,679
maintain do security updates try to keep

00:19:13,360 --> 00:19:16,400
up

00:19:13,679 --> 00:19:17,120
on the the product and you're doing it

00:19:16,400 --> 00:19:18,559
all yourself

00:19:17,120 --> 00:19:20,559
like if you're responsible for tracking

00:19:18,559 --> 00:19:22,640
all the projects uh

00:19:20,559 --> 00:19:24,720
yakuto can be a very heavy load that's a

00:19:22,640 --> 00:19:27,039
lot of projects you've got to track

00:19:24,720 --> 00:19:28,799
for as a device vendor it's really

00:19:27,039 --> 00:19:29,919
appealing to partner with a company that

00:19:28,799 --> 00:19:31,520
already does that

00:19:29,919 --> 00:19:34,400
which looks an awful lot like a linux

00:19:31,520 --> 00:19:36,480
distro and so if you've

00:19:34,400 --> 00:19:37,600
got the ability to run distros as your

00:19:36,480 --> 00:19:39,760
substrate

00:19:37,600 --> 00:19:42,080
for the application you want to run you

00:19:39,760 --> 00:19:43,679
can offload a lot of the security issues

00:19:42,080 --> 00:19:45,440
and and management so i think there's

00:19:43,679 --> 00:19:46,799
good economic reasons to want to use

00:19:45,440 --> 00:19:48,320
distros

00:19:46,799 --> 00:19:50,400
the other reason is that distros are

00:19:48,320 --> 00:19:52,160
going to have much stricter requirements

00:19:50,400 --> 00:19:54,480
on the behavior of the platform

00:19:52,160 --> 00:19:55,919
so if it works with a distro it's going

00:19:54,480 --> 00:19:57,280
to work with the vertically integrated

00:19:55,919 --> 00:19:58,880
as well

00:19:57,280 --> 00:20:00,080
and it drives the project it drives

00:19:58,880 --> 00:20:02,480
things like you boot in the right

00:20:00,080 --> 00:20:02,480
direction

00:20:04,159 --> 00:20:08,960
right and then um this one isn't very

00:20:07,600 --> 00:20:10,400
so i'm testing multiple deployment

00:20:08,960 --> 00:20:12,240
scenarios this really needs to be

00:20:10,400 --> 00:20:14,480
flushed out i don't have good answers on

00:20:12,240 --> 00:20:16,400
this this is mostly a list of thoughts

00:20:14,480 --> 00:20:18,400
of we need to deal with you know usb

00:20:16,400 --> 00:20:20,799
boot pixie boot what does it look like

00:20:18,400 --> 00:20:24,400
to deploy over the air over the network

00:20:20,799 --> 00:20:27,919
in a standard way i think with uefi

00:20:24,400 --> 00:20:28,880
and we've got the framework to be able

00:20:27,919 --> 00:20:30,480
to do that

00:20:28,880 --> 00:20:32,640
and i think we actually need within the

00:20:30,480 --> 00:20:36,000
embedded compute ecosystem

00:20:32,640 --> 00:20:38,080
to start uh adopting particular

00:20:36,000 --> 00:20:40,000
deployment mechanisms so that where you

00:20:38,080 --> 00:20:41,440
i i think we can use much the same tools

00:20:40,000 --> 00:20:44,320
that are being used in the

00:20:41,440 --> 00:20:47,120
in the data center space but adapted for

00:20:44,320 --> 00:20:49,919
the for the edge compute

00:20:47,120 --> 00:20:51,440
right uh i think that's okay i'll come

00:20:49,919 --> 00:20:52,880
back to that in a moment but there have

00:20:51,440 --> 00:20:56,080
been some questions

00:20:52,880 --> 00:20:58,320
so paul was asking um

00:20:56,080 --> 00:20:59,760
building ubud tfa opti and stand alone

00:20:58,320 --> 00:21:01,440
and then together sounds like a drop for

00:20:59,760 --> 00:21:03,679
the octo project

00:21:01,440 --> 00:21:05,600
i'm just going to set that one aside for

00:21:03,679 --> 00:21:06,400
i will we can talk about that on chat

00:21:05,600 --> 00:21:10,080
later

00:21:06,400 --> 00:21:11,840
because um yeah that that's that's a

00:21:10,080 --> 00:21:15,600
very specific project

00:21:11,840 --> 00:21:17,120
uh major barrier to bolting

00:21:15,600 --> 00:21:19,280
hardware vendor kernels is the other

00:21:17,120 --> 00:21:22,960
major okay so paul also pointed out

00:21:19,280 --> 00:21:24,000
that um i'm booting unmodified standard

00:21:22,960 --> 00:21:26,000
os's

00:21:24,000 --> 00:21:27,919
uh the vendor kernels is a massive

00:21:26,000 --> 00:21:30,640
problem and that is absolutely right

00:21:27,919 --> 00:21:31,440
uh unless and board support are in

00:21:30,640 --> 00:21:33,760
mainline

00:21:31,440 --> 00:21:35,360
the distros will not pick it up and you

00:21:33,760 --> 00:21:36,320
won't be able to boot so if you want to

00:21:35,360 --> 00:21:38,320
get into the

00:21:36,320 --> 00:21:39,520
if you want to your products in an

00:21:38,320 --> 00:21:42,840
ecosystem

00:21:39,520 --> 00:21:44,240
that supports the distros you got to be

00:21:42,840 --> 00:21:47,760
mainline

00:21:44,240 --> 00:21:51,039
uh right so i think that's it i've got

00:21:47,760 --> 00:21:53,919
about three minutes left um

00:21:51,039 --> 00:21:55,520
next steps on this uh as i said there is

00:21:53,919 --> 00:21:57,679
active work on

00:21:55,520 --> 00:21:58,799
what a certification plan would look

00:21:57,679 --> 00:22:01,520
like

00:21:58,799 --> 00:22:02,720
i think this needs um needs some

00:22:01,520 --> 00:22:05,679
collaboration on

00:22:02,720 --> 00:22:06,880
so anyone who's interested message me

00:22:05,679 --> 00:22:10,080
email me

00:22:06,880 --> 00:22:11,600
and you know we'll talk about getting

00:22:10,080 --> 00:22:13,440
results of the sct

00:22:11,600 --> 00:22:16,640
going through getting a reasonable test

00:22:13,440 --> 00:22:16,640
plan for booty distros

00:22:17,760 --> 00:22:25,440
we've got some gaps right now i mean

00:22:21,520 --> 00:22:26,000
runtime services has been a show stopper

00:22:25,440 --> 00:22:28,320
for a long

00:22:26,000 --> 00:22:30,400
time on uefi that is changing now

00:22:28,320 --> 00:22:31,280
because uh runtime services is being

00:22:30,400 --> 00:22:33,679
implemented

00:22:31,280 --> 00:22:35,919
but it does have some gotchas and so how

00:22:33,679 --> 00:22:39,280
you actually manipulate boot flow

00:22:35,919 --> 00:22:41,280
is um is important uh

00:22:39,280 --> 00:22:42,720
heinrich brought up firmer test suite

00:22:41,280 --> 00:22:44,240
yes i should have had firmware test

00:22:42,720 --> 00:22:44,720
suite in the slides and i forgot to add

00:22:44,240 --> 00:22:46,880
them in

00:22:44,720 --> 00:22:50,000
but firmware test suite is another test

00:22:46,880 --> 00:22:53,919
uh suite that is relevant here

00:22:50,000 --> 00:22:54,880
um and consistent process you know it's

00:22:53,919 --> 00:22:57,200
i would love to

00:22:54,880 --> 00:22:59,039
be at the point of having um of being

00:22:57,200 --> 00:23:02,240
able to do useful

00:22:59,039 --> 00:23:03,280
um plug flex tests for evr class

00:23:02,240 --> 00:23:05,200
platforms

00:23:03,280 --> 00:23:07,120
i tried to do that a number of years ago

00:23:05,200 --> 00:23:10,000
uh it

00:23:07,120 --> 00:23:11,760
i wasn't it didn't have quite uh wasn't

00:23:10,000 --> 00:23:13,440
why it's well organized

00:23:11,760 --> 00:23:15,039
as well wasn't well organized so it

00:23:13,440 --> 00:23:16,559
wasn't particularly useful

00:23:15,039 --> 00:23:20,080
i think it needs a bit more rigor around

00:23:16,559 --> 00:23:23,360
it to be uh to be worthwhile

00:23:20,080 --> 00:23:25,679
um and i think that is it

00:23:23,360 --> 00:23:27,039
any other questions on the chat kind of

00:23:25,679 --> 00:23:29,600
last minute

00:23:27,039 --> 00:23:29,600
last call

00:23:32,240 --> 00:23:35,679
uh okay heinrich also brings up uh we

00:23:35,360 --> 00:23:37,200
are

00:23:35,679 --> 00:23:38,960
missing a test suite for what happens

00:23:37,200 --> 00:23:42,480
between exit boot services and

00:23:38,960 --> 00:23:46,159
the running os uh there is

00:23:42,480 --> 00:23:49,520
also a larger problem of the sct

00:23:46,159 --> 00:23:52,559
at at the moment is largely abandoned

00:23:49,520 --> 00:23:54,400
there are people maintaining it

00:23:52,559 --> 00:23:56,880
but the original development team that

00:23:54,400 --> 00:23:59,760
was responsible for the edk ii sct

00:23:56,880 --> 00:24:01,039
are no longer involved with the project

00:23:59,760 --> 00:24:03,600
and so

00:24:01,039 --> 00:24:04,960
i think it's the last two revisions of

00:24:03,600 --> 00:24:06,400
the uefi spec

00:24:04,960 --> 00:24:10,000
we don't have any tests written for

00:24:06,400 --> 00:24:12,960
those for any the new content

00:24:10,000 --> 00:24:14,400
uh however on the other hand the sct has

00:24:12,960 --> 00:24:16,320
in the last uh

00:24:14,400 --> 00:24:17,440
has recently become open source in the

00:24:16,320 --> 00:24:19,600
last couple of years

00:24:17,440 --> 00:24:21,039
and so now it is actually possible to

00:24:19,600 --> 00:24:22,480
contribute to it

00:24:21,039 --> 00:24:25,440
without having to be a member of the

00:24:22,480 --> 00:24:27,679
uefi forum so us as the linux community

00:24:25,440 --> 00:24:28,480
can be involved and get patches merged

00:24:27,679 --> 00:24:32,080
into

00:24:28,480 --> 00:24:36,320
into the sct

00:24:32,080 --> 00:24:38,640
all right um i think oh and one more

00:24:36,320 --> 00:24:39,840
so paul a standard for sd card or emmc

00:24:38,640 --> 00:24:42,559
boot would be excellent

00:24:39,840 --> 00:24:43,840
uh different kernels etc will be needed

00:24:42,559 --> 00:24:45,360
uh there's no need for so many

00:24:43,840 --> 00:24:47,039
devices to require different

00:24:45,360 --> 00:24:48,080
partitioning as they do now i think

00:24:47,039 --> 00:24:50,880
that's absolutely too

00:24:48,080 --> 00:24:52,000
true and one of the big advantages of

00:24:50,880 --> 00:24:55,120
uefi

00:24:52,000 --> 00:24:57,760
is that it actually that it comes with

00:24:55,120 --> 00:24:58,240
a requirement on how you put together

00:24:57,760 --> 00:25:01,360
your

00:24:58,240 --> 00:25:02,080
your boot media that it it standardizes

00:25:01,360 --> 00:25:04,799
that

00:25:02,080 --> 00:25:06,720
and it gives a common layout so if

00:25:04,799 --> 00:25:08,480
you're using gpt and you set up a system

00:25:06,720 --> 00:25:10,880
partition we've got a way to do that

00:25:08,480 --> 00:25:12,320
there are some weaknesses there however

00:25:10,880 --> 00:25:14,960
in that

00:25:12,320 --> 00:25:16,720
uh the system partition the way it's

00:25:14,960 --> 00:25:18,799
defined as a fat file system

00:25:16,720 --> 00:25:21,520
is not particularly resilient against

00:25:18,799 --> 00:25:24,799
corruption so there's actually work

00:25:21,520 --> 00:25:25,200
needed to for you i think on the uefi

00:25:24,799 --> 00:25:27,520
spec

00:25:25,200 --> 00:25:28,400
on how we make resilient systems that

00:25:27,520 --> 00:25:31,760
can do a b

00:25:28,400 --> 00:25:32,559
update and one you're trying to update

00:25:31,760 --> 00:25:34,400
one component

00:25:32,559 --> 00:25:36,080
won't end up causing corruption and

00:25:34,400 --> 00:25:38,640
crash the whole system

00:25:36,080 --> 00:25:40,080
um anyway i am out of time so i'm going

00:25:38,640 --> 00:25:41,039
to have to drop off and so i just want

00:25:40,080 --> 00:25:43,520
to say thank you for

00:25:41,039 --> 00:25:44,880
everyone who joined for for watching

00:25:43,520 --> 00:25:47,440
message me on chat

00:25:44,880 --> 00:25:51,200
and or email me and enjoy the rest of

00:25:47,440 --> 00:25:51,200

YouTube URL: https://www.youtube.com/watch?v=_e1Pu7o3Ftg


