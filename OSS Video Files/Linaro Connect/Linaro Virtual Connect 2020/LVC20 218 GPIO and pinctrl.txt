Title: LVC20 218 GPIO and pinctrl
Publication date: 2020-10-08
Playlist: Linaro Virtual Connect 2020
Description: 
	BoF session to discuss recent changes and current issues in gpio and pinctrl. For GPIO, we have new uAPI in the works and also the recent GPIO aggregator. For pinctrl, gpiod is starting to incorporate certain pinctrl aspects like bias. Linus Walleij, who is the maintainer, told me he thought is would be a good idea and agreed to attend if I organize it.

https://connect.linaro.org/resources/lvc20/lvc20-218/
Captions: 
	00:00:01,280 --> 00:00:04,160
so uh the idea here was to just go

00:00:03,360 --> 00:00:06,879
through some of the

00:00:04,160 --> 00:00:07,839
um things that are new um in resin and

00:00:06,879 --> 00:00:09,920
gpio

00:00:07,839 --> 00:00:12,080
um and then i had one one quick item i

00:00:09,920 --> 00:00:15,360
want to talk about with pin control

00:00:12,080 --> 00:00:18,960
um so let me see how

00:00:15,360 --> 00:00:20,160
okay i can advance them now um i pasted

00:00:18,960 --> 00:00:22,320
into the slack as well

00:00:20,160 --> 00:00:24,400
the link to the slides there if people

00:00:22,320 --> 00:00:27,840
want to be able to click on them

00:00:24,400 --> 00:00:30,400
uh so for people that haven't seen these

00:00:27,840 --> 00:00:33,200
talks in the past um

00:00:30,400 --> 00:00:34,000
these are good references from uh uh

00:00:33,200 --> 00:00:37,040
linus and

00:00:34,000 --> 00:00:38,800
bartholz most importantly the last one

00:00:37,040 --> 00:00:40,719
there was from back at the end of june

00:00:38,800 --> 00:00:42,640
for the embedded linux conference

00:00:40,719 --> 00:00:45,840
um and has content that we're gonna be

00:00:42,640 --> 00:00:45,840
talking about today

00:00:45,920 --> 00:00:50,160
and that slide there is from bart's talk

00:00:48,000 --> 00:00:53,840
so before we jump into the user space

00:00:50,160 --> 00:00:56,160
api um gpo

00:00:53,840 --> 00:00:58,719
changes i think one thing we should

00:00:56,160 --> 00:01:01,359
bring up is the gpo aggregator

00:00:58,719 --> 00:01:02,079
so this is a neat feature that gert

00:01:01,359 --> 00:01:05,360
worked on

00:01:02,079 --> 00:01:06,560
earlier this year i'm not sure what

00:01:05,360 --> 00:01:10,479
colonel got merged into

00:01:06,560 --> 00:01:12,320
but it was i think earlier in 2020

00:01:10,479 --> 00:01:14,479
so this is quite an interesting feature

00:01:12,320 --> 00:01:18,320
for where people want to be able to

00:01:14,479 --> 00:01:20,320
expose several gpo chips as one virtual

00:01:18,320 --> 00:01:22,320
gpo chip

00:01:20,320 --> 00:01:24,000
and one of the reasons would be for

00:01:22,320 --> 00:01:26,159
access control

00:01:24,000 --> 00:01:28,080
so that you can take different gpao

00:01:26,159 --> 00:01:30,320
lines and combine them into a virtual

00:01:28,080 --> 00:01:31,920
um gpio chip and then set the

00:01:30,320 --> 00:01:33,200
permissions that you want in there

00:01:31,920 --> 00:01:35,920
um i think there's some other

00:01:33,200 --> 00:01:38,880
interesting use cases for it as well so

00:01:35,920 --> 00:01:41,520
um i don't know if anyone wanted to um

00:01:38,880 --> 00:01:45,040
chat about this one

00:01:41,520 --> 00:01:54,399
if not we can get into the user space

00:01:45,040 --> 00:01:55,680
api changes

00:01:54,399 --> 00:01:57,680
bart did you have anything you wanted to

00:01:55,680 --> 00:01:59,439
add about this one or anyone have any

00:01:57,680 --> 00:02:03,600
questions

00:01:59,439 --> 00:02:05,200
um so this is something that maybe uh

00:02:03,600 --> 00:02:06,560
we could talk about later when when

00:02:05,200 --> 00:02:07,920
you're done with your slides that i

00:02:06,560 --> 00:02:10,399
wanted to bring up the

00:02:07,920 --> 00:02:11,200
the config fs for gpio mockup that i'm

00:02:10,399 --> 00:02:15,120
working on

00:02:11,200 --> 00:02:17,520
and i was thinking that uh maybe uh

00:02:15,120 --> 00:02:18,640
using csfs for gpio aggregator wasn't

00:02:17,520 --> 00:02:21,120
the best idea because i

00:02:18,640 --> 00:02:23,200
i think now now i having learned more

00:02:21,120 --> 00:02:25,200
about config fs i think uh

00:02:23,200 --> 00:02:26,480
it would be better to use contig fs to

00:02:25,200 --> 00:02:28,959
instantiate the

00:02:26,480 --> 00:02:29,840
the aggregated chips but yeah we were

00:02:28,959 --> 00:02:32,080
we've done we

00:02:29,840 --> 00:02:33,599
we did we went the sesame so we're

00:02:32,080 --> 00:02:38,239
probably stuck with that

00:02:33,599 --> 00:02:40,000
but uh okay i i will talk a bit about uh

00:02:38,239 --> 00:02:41,599
what i'm doing for gpio mockup for the

00:02:40,000 --> 00:02:44,959
testing module with config fs

00:02:41,599 --> 00:02:45,519
uh but we can do it later like when you

00:02:44,959 --> 00:02:48,400
when

00:02:45,519 --> 00:02:50,160
when you went through yourself uh that

00:02:48,400 --> 00:02:53,599
should work uh

00:02:50,160 --> 00:02:55,680
let's see here so and i see uh we have

00:02:53,599 --> 00:02:57,680
linus in the as a panelist but i think

00:02:55,680 --> 00:03:01,280
he's still muted now so

00:02:57,680 --> 00:03:04,959
um i think hopefully that's on purpose

00:03:01,280 --> 00:03:06,959
i can unmute okay awesome um so the

00:03:04,959 --> 00:03:09,040
the next topic was the current state of

00:03:06,959 --> 00:03:12,319
the uapi user space api

00:03:09,040 --> 00:03:14,000
um uh so in general and i think if you

00:03:12,319 --> 00:03:15,599
watch any of the previous talks

00:03:14,000 --> 00:03:18,000
you know the idea here is that you

00:03:15,599 --> 00:03:20,400
should be using subsystem drivers for

00:03:18,000 --> 00:03:21,840
using gpio when you can but there are

00:03:20,400 --> 00:03:25,920
certain use cases where

00:03:21,840 --> 00:03:28,560
that's not feasible or a good idea

00:03:25,920 --> 00:03:30,560
and linus ended earlier this year i

00:03:28,560 --> 00:03:33,280
think back in january some documentation

00:03:30,560 --> 00:03:36,239
about using gpo lines um so that's

00:03:33,280 --> 00:03:38,319
a good thing to check out um if you're

00:03:36,239 --> 00:03:40,400
also trying to convince people that want

00:03:38,319 --> 00:03:42,159
to maybe do things that they shouldn't

00:03:40,400 --> 00:03:43,680
um that's a good thing to refer people

00:03:42,159 --> 00:03:45,040
to it's it's now in the kernel

00:03:43,680 --> 00:03:48,319
documentation

00:03:45,040 --> 00:03:52,080
um of course the legacy user api

00:03:48,319 --> 00:03:54,159
here is the csfs um and then as of linux

00:03:52,080 --> 00:03:54,799
48 which is actually quite a while ago

00:03:54,159 --> 00:03:58,319
now

00:03:54,799 --> 00:04:01,680
um we now have the character device

00:03:58,319 --> 00:04:04,560
where the gpio ships chips show up as um

00:04:01,680 --> 00:04:05,920
character devices um and then features

00:04:04,560 --> 00:04:08,799
that were added recently

00:04:05,920 --> 00:04:09,360
um to the existing uh version one user

00:04:08,799 --> 00:04:12,319
space

00:04:09,360 --> 00:04:13,840
api for the character device um there's

00:04:12,319 --> 00:04:14,480
been a few things that were added uh

00:04:13,840 --> 00:04:17,680
this year

00:04:14,480 --> 00:04:19,040
um including the bias settings so there

00:04:17,680 --> 00:04:20,720
was a desire from

00:04:19,040 --> 00:04:22,320
user space libraries to be able to do

00:04:20,720 --> 00:04:24,800
pull up and pull down

00:04:22,320 --> 00:04:26,560
through the character device and kent

00:04:24,800 --> 00:04:27,759
gibson worked a lot in adding this

00:04:26,560 --> 00:04:30,400
feature

00:04:27,759 --> 00:04:32,240
along with bart and lena's and then

00:04:30,400 --> 00:04:35,360
another thing that was part of that

00:04:32,240 --> 00:04:39,520
change was a set config eye octal

00:04:35,360 --> 00:04:40,720
or i o control and that allows people to

00:04:39,520 --> 00:04:42,639
be able to change the configuration

00:04:40,720 --> 00:04:44,800
while they're still owning the line so

00:04:42,639 --> 00:04:45,680
rather than closing it and trying to

00:04:44,800 --> 00:04:48,160
open back up

00:04:45,680 --> 00:04:50,160
there's no race condition there and then

00:04:48,160 --> 00:04:53,120
also the ability to watch lines

00:04:50,160 --> 00:04:53,120
from user space

00:04:53,440 --> 00:04:57,280
however the the real um story here is

00:04:56,960 --> 00:05:00,240
the

00:04:57,280 --> 00:05:01,280
the new version the v2 um so from bart's

00:05:00,240 --> 00:05:03,680
slides a dlc

00:05:01,280 --> 00:05:04,400
um one of the examples he brought up

00:05:03,680 --> 00:05:07,360
with an issue

00:05:04,400 --> 00:05:08,560
is the idea of 64-bit kernel with 32-bit

00:05:07,360 --> 00:05:11,120
user space

00:05:08,560 --> 00:05:12,000
and this is where the the size of the

00:05:11,120 --> 00:05:14,639
struct

00:05:12,000 --> 00:05:16,160
is different depending on the

00:05:14,639 --> 00:05:17,759
architecture

00:05:16,160 --> 00:05:19,919
and the other issue is that we didn't

00:05:17,759 --> 00:05:22,800
have padding in the strut

00:05:19,919 --> 00:05:24,479
to add new features things came up like

00:05:22,800 --> 00:05:26,639
debounce on the main list and that

00:05:24,479 --> 00:05:30,320
wasn't really possible

00:05:26,639 --> 00:05:33,520
so along came the v2 of the

00:05:30,320 --> 00:05:35,520
character device user space api this is

00:05:33,520 --> 00:05:36,479
still an active patch series so the most

00:05:35,520 --> 00:05:40,560
recent version

00:05:36,479 --> 00:05:43,360
version 9 was posted this week by kent

00:05:40,560 --> 00:05:44,560
an idea here is to add in the padding

00:05:43,360 --> 00:05:49,039
that's needed to

00:05:44,560 --> 00:05:51,680
make it more future proof and then also

00:05:49,039 --> 00:05:52,320
some of the features were refactored a

00:05:51,680 --> 00:05:55,280
bit

00:05:52,320 --> 00:05:57,680
to make it easier to work with so one of

00:05:55,280 --> 00:05:58,720
those and this is from bart slides there

00:05:57,680 --> 00:06:01,120
from elc

00:05:58,720 --> 00:06:01,919
earlier this year is there used to be

00:06:01,120 --> 00:06:03,919
line handle

00:06:01,919 --> 00:06:06,800
and line event and now those are all

00:06:03,919 --> 00:06:09,919
just line requests

00:06:06,800 --> 00:06:12,319
and the flags are reworked now too to to

00:06:09,919 --> 00:06:15,520
make a little bit more sense

00:06:12,319 --> 00:06:17,120
so this is the patch series

00:06:15,520 --> 00:06:18,639
so there's a lot of a lot of little

00:06:17,120 --> 00:06:20,400
things in there but

00:06:18,639 --> 00:06:21,840
probably one of the bigger ones is the

00:06:20,400 --> 00:06:25,360
patch number four

00:06:21,840 --> 00:06:27,919
which defines the user space api

00:06:25,360 --> 00:06:29,840
and kind of goes into some details there

00:06:27,919 --> 00:06:32,319
about the things that have changed

00:06:29,840 --> 00:06:33,680
um i don't know if uh lena starbar do

00:06:32,319 --> 00:06:37,199
you want to add anything

00:06:33,680 --> 00:06:40,400
here or if anyone has any questions

00:06:37,199 --> 00:06:42,880
uh i mean the first thing i

00:06:40,400 --> 00:06:44,560
like somebody asked me on irc or

00:06:42,880 --> 00:06:45,440
something like what's up with the micro

00:06:44,560 --> 00:06:47,039
api

00:06:45,440 --> 00:06:49,599
and that's a common misunderstanding is

00:06:47,039 --> 00:06:51,120
the user space api like i want everybody

00:06:49,599 --> 00:06:53,039
to know that because it's

00:06:51,120 --> 00:06:54,479
that's what we mean with the kernel so

00:06:53,039 --> 00:06:56,720
maybe it's a bit uh

00:06:54,479 --> 00:06:58,720
unlucky that we don't write this all

00:06:56,720 --> 00:07:00,160
caps it confuses some people so for the

00:06:58,720 --> 00:07:00,960
audience and everyone it's the user

00:07:00,160 --> 00:07:04,800
space

00:07:00,960 --> 00:07:07,440
api and the other thing is like

00:07:04,800 --> 00:07:07,919
then i got some flack from some people

00:07:07,440 --> 00:07:10,800
which

00:07:07,919 --> 00:07:12,560
will remain anonymous on like don't you

00:07:10,800 --> 00:07:13,520
guys ever make your mind up about how

00:07:12,560 --> 00:07:16,960
things are gonna work

00:07:13,520 --> 00:07:18,000
and i think my uh rebuttal to that was a

00:07:16,960 --> 00:07:20,479
reference to the

00:07:18,000 --> 00:07:22,240
quite well known book in uh in

00:07:20,479 --> 00:07:23,759
management called the mythical man month

00:07:22,240 --> 00:07:27,120
which states explicitly

00:07:23,759 --> 00:07:27,599
always calculate to throw one iteration

00:07:27,120 --> 00:07:29,280
away

00:07:27,599 --> 00:07:30,720
the first version is gonna go that's

00:07:29,280 --> 00:07:34,400
just how it works

00:07:30,720 --> 00:07:36,000
so this one what is happening to us

00:07:34,400 --> 00:07:38,080
yeah this this is exactly what's

00:07:36,000 --> 00:07:39,199
happening to us and it's it's to be

00:07:38,080 --> 00:07:41,440
expected so

00:07:39,199 --> 00:07:42,960
like the i understand perfectionism but

00:07:41,440 --> 00:07:44,160
but that's not what we are doing we are

00:07:42,960 --> 00:07:46,080
doing uh

00:07:44,160 --> 00:07:48,800
rough consensus and running code that's

00:07:46,080 --> 00:07:51,039
uh the the ietf motto and that's

00:07:48,800 --> 00:07:54,240
that i think should be our motto as well

00:07:51,039 --> 00:07:54,240
i think we're doing just fine

00:07:54,639 --> 00:07:59,840
yeah no no plan will survive the contact

00:07:56,720 --> 00:07:59,840
with the enemy

00:08:00,080 --> 00:08:05,120
great i see andy joined the chat as well

00:08:02,879 --> 00:08:07,520
um

00:08:05,120 --> 00:08:08,400
andy if you can hear us um if anyone

00:08:07,520 --> 00:08:09,840
raises their hand

00:08:08,400 --> 00:08:12,879
i should be able to see that and i can

00:08:09,840 --> 00:08:15,280
allow them to speak um

00:08:12,879 --> 00:08:16,960
all right uh so actually the next one is

00:08:15,280 --> 00:08:17,680
about pin control which is kind of a

00:08:16,960 --> 00:08:19,759
discussion if

00:08:17,680 --> 00:08:20,879
we have time that i wanted to bring up

00:08:19,759 --> 00:08:22,479
um but i think the

00:08:20,879 --> 00:08:24,879
the biggest thing going on here is is

00:08:22,479 --> 00:08:27,039
the new user space api

00:08:24,879 --> 00:08:28,560
um i don't have a slide for it but i

00:08:27,039 --> 00:08:30,080
don't know bart if you wanted to

00:08:28,560 --> 00:08:32,080
get into what you're talking about with

00:08:30,080 --> 00:08:35,279
config fs or if anyone has any

00:08:32,080 --> 00:08:37,760
questions or comments um thus far

00:08:35,279 --> 00:08:38,839
we have about 15 minutes left so should

00:08:37,760 --> 00:08:42,159
have enough time for

00:08:38,839 --> 00:08:44,880
discussion i can talk about

00:08:42,159 --> 00:08:46,880
uh gpio mockup and user space testing

00:08:44,880 --> 00:08:50,240
and config fs if

00:08:46,880 --> 00:08:51,600
nobody else is uh waving their hands

00:08:50,240 --> 00:08:55,920
probably not okay

00:08:51,600 --> 00:08:58,480
so we have so like the user space uh

00:08:55,920 --> 00:09:00,080
api is actually wrapped in in this

00:08:58,480 --> 00:09:03,120
library that we have

00:09:00,080 --> 00:09:05,519
which is called lib gpiod and this is uh

00:09:03,120 --> 00:09:06,399
like it's basically a wraparound around

00:09:05,519 --> 00:09:10,160
the ver

00:09:06,399 --> 00:09:11,040
i octo calls which makes things easier

00:09:10,160 --> 00:09:12,800
and

00:09:11,040 --> 00:09:14,240
in the package there are some user-based

00:09:12,800 --> 00:09:17,600
tools

00:09:14,240 --> 00:09:18,240
and this library has a has a test suite

00:09:17,600 --> 00:09:20,880
that

00:09:18,240 --> 00:09:22,720
is based around a kernel module which is

00:09:20,880 --> 00:09:24,320
called gpio mock-up which

00:09:22,720 --> 00:09:26,800
basically allows us to create simulated

00:09:24,320 --> 00:09:29,440
gpio chips and uh

00:09:26,800 --> 00:09:30,480
and test both the library and the the

00:09:29,440 --> 00:09:32,160
user api

00:09:30,480 --> 00:09:34,000
and we've actually found a couple backs

00:09:32,160 --> 00:09:37,440
with this uh with this

00:09:34,000 --> 00:09:40,240
testing tools so it's it's quite useful

00:09:37,440 --> 00:09:42,480
uh and right now the the the testing

00:09:40,240 --> 00:09:46,480
module in the kernel uses debug fs

00:09:42,480 --> 00:09:48,959
to uh to control the chips and uh

00:09:46,480 --> 00:09:50,880
and uses module params to instantiate

00:09:48,959 --> 00:09:52,320
chips so basically we were we're very

00:09:50,880 --> 00:09:53,920
limited in that we have to always

00:09:52,320 --> 00:09:55,600
unload the module load it again to

00:09:53,920 --> 00:09:58,399
create a new set of chips

00:09:55,600 --> 00:10:00,480
uh it's quite uh it isn't very

00:09:58,399 --> 00:10:01,760
extensible because in order to add new

00:10:00,480 --> 00:10:04,079
flags and new features you would have to

00:10:01,760 --> 00:10:06,880
add new module params uh

00:10:04,079 --> 00:10:07,680
and so i was like i tried to create a

00:10:06,880 --> 00:10:10,079
better

00:10:07,680 --> 00:10:11,440
debug fs interface for that which would

00:10:10,079 --> 00:10:13,040
parse the command line

00:10:11,440 --> 00:10:14,560
command line like the which would parse

00:10:13,040 --> 00:10:16,959
the the input and uh

00:10:14,560 --> 00:10:19,040
for for arguments and create chips on

00:10:16,959 --> 00:10:21,200
the fly without having to

00:10:19,040 --> 00:10:22,560
unload the module and load it again but

00:10:21,200 --> 00:10:24,959
i was told that actually the

00:10:22,560 --> 00:10:26,320
the correct tool to use in this case

00:10:24,959 --> 00:10:29,600
would be config fs

00:10:26,320 --> 00:10:33,600
and csfs like they they go together and

00:10:29,600 --> 00:10:35,360
i i i was very aware of config fs's

00:10:33,600 --> 00:10:37,040
existence but i i didn't know it very

00:10:35,360 --> 00:10:40,079
well so now that i

00:10:37,040 --> 00:10:42,160
spent some time learning it and uh just

00:10:40,079 --> 00:10:44,320
getting getting uh

00:10:42,160 --> 00:10:46,000
getting to know how it works i i think

00:10:44,320 --> 00:10:48,000
it is the right tool to use

00:10:46,000 --> 00:10:49,360
and for those who who don't know config

00:10:48,000 --> 00:10:52,000
fs uh

00:10:49,360 --> 00:10:52,959
very well it's basically uh the opposite

00:10:52,000 --> 00:10:55,519
of csfs so

00:10:52,959 --> 00:10:57,040
csfs uh represents objects that are

00:10:55,519 --> 00:11:01,440
created in the kernel

00:10:57,040 --> 00:11:04,160
uh and confess allows you to create

00:11:01,440 --> 00:11:04,640
kernel objects from user space uh

00:11:04,160 --> 00:11:07,760
basically

00:11:04,640 --> 00:11:10,880
you tell modules make me

00:11:07,760 --> 00:11:14,399
a in our case we would just

00:11:10,880 --> 00:11:16,000
tell the kernel to make me a a gpio chip

00:11:14,399 --> 00:11:19,760
with this in this configuration

00:11:16,000 --> 00:11:22,000
and the thing with config fs is that

00:11:19,760 --> 00:11:23,360
the feature that we really need for gpio

00:11:22,000 --> 00:11:25,680
mockup that is

00:11:23,360 --> 00:11:27,360
so called committable itunes is not

00:11:25,680 --> 00:11:28,880
implemented yet it's well defined in the

00:11:27,360 --> 00:11:30,560
documentation but it's not implemented

00:11:28,880 --> 00:11:34,720
so i started implementing it

00:11:30,560 --> 00:11:37,040
uh with the aim of using it for uh for

00:11:34,720 --> 00:11:38,560
gpio mockup and now that i got to know

00:11:37,040 --> 00:11:39,120
config fast pretty well i'm sorry this

00:11:38,560 --> 00:11:42,560
is my

00:11:39,120 --> 00:11:46,079
kit hitting the door uh

00:11:42,560 --> 00:11:48,800
now that we that we uh but that

00:11:46,079 --> 00:11:49,839
that i learned config fs uh more about

00:11:48,800 --> 00:11:53,360
configfs i think

00:11:49,839 --> 00:11:55,360
this could be uh could have been the the

00:11:53,360 --> 00:11:56,800
the right tool to use for gpio

00:11:55,360 --> 00:11:57,760
aggregator because it would be quite

00:11:56,800 --> 00:12:00,959
useful to

00:11:57,760 --> 00:12:04,160
um right to call mkdir in

00:12:00,959 --> 00:12:07,920
some in some configfs directory

00:12:04,160 --> 00:12:11,839
to create an aggregator then

00:12:07,920 --> 00:12:13,760
then write to all the the the config fs

00:12:11,839 --> 00:12:15,279
attributes to configure the

00:12:13,760 --> 00:12:17,040
uh the chips that should be aggregated

00:12:15,279 --> 00:12:18,480
and their lines and then commit this

00:12:17,040 --> 00:12:20,480
item by

00:12:18,480 --> 00:12:22,720
doing the rename to the to the live

00:12:20,480 --> 00:12:24,480
directory like this is all in the config

00:12:22,720 --> 00:12:26,160
documentation um probably sounds quite

00:12:24,480 --> 00:12:28,480
chaotic but uh

00:12:26,160 --> 00:12:29,839
uh this this is how configfs works and

00:12:28,480 --> 00:12:34,399
uh yeah

00:12:29,839 --> 00:12:37,440
so uh so that's it i i i i see that

00:12:34,399 --> 00:12:40,720
garrett join joined us so so yeah

00:12:37,440 --> 00:12:42,079
maybe he's probably uh you know he knows

00:12:40,720 --> 00:12:45,360
the aggregator better so

00:12:42,079 --> 00:12:48,560
maybe he could uh speak his mind

00:12:45,360 --> 00:12:49,519
yeah um victor i if um anyone wants to

00:12:48,560 --> 00:12:52,560
speak like um

00:12:49,519 --> 00:12:54,240
kurt or i saw andy who's another

00:12:52,560 --> 00:12:56,560
person that's very active and detailed

00:12:54,240 --> 00:13:00,000
if they want to speak or be able to

00:12:56,560 --> 00:13:02,800
give him the mic yes absolutely

00:13:00,000 --> 00:13:02,800
so i think um

00:13:03,680 --> 00:13:08,880
is in here as well

00:13:07,120 --> 00:13:11,120
i don't seem to have a ability to do

00:13:08,880 --> 00:13:14,560
that but um okay if anyone wants to

00:13:11,120 --> 00:13:17,040
who do you want me to give the back

00:13:14,560 --> 00:13:17,600
um i don't know if kirk has anything to

00:13:17,040 --> 00:13:19,120
say but

00:13:17,600 --> 00:13:21,600
he's the person that did the gpo

00:13:19,120 --> 00:13:24,079
aggregator um okay

00:13:21,600 --> 00:13:25,360
i just see chat next to his name but um

00:13:24,079 --> 00:13:27,519
if he wanted to

00:13:25,360 --> 00:13:28,399
say anything here and um bart i didn't

00:13:27,519 --> 00:13:30,399
know if you had any

00:13:28,399 --> 00:13:32,079
any like graphics or anything you wanted

00:13:30,399 --> 00:13:33,760
to share um

00:13:32,079 --> 00:13:36,240
i can give you the screen or if it was

00:13:33,760 --> 00:13:37,839
just not literally i'm not really

00:13:36,240 --> 00:13:41,120
prepared to present anything uh

00:13:37,839 --> 00:13:42,399
okay yeah this configure testing is it's

00:13:41,120 --> 00:13:45,040
nice so um

00:13:42,399 --> 00:13:46,720
i uh probably not for this release cycle

00:13:45,040 --> 00:13:48,320
but for the next i will i will send a

00:13:46,720 --> 00:13:48,959
series that implements the commutable

00:13:48,320 --> 00:13:51,199
items

00:13:48,959 --> 00:13:54,240
for config fs and then i'll reuse them

00:13:51,199 --> 00:13:57,920
in gpio mockup this is my plan for

00:13:54,240 --> 00:13:58,639
uh for for testing and by then we should

00:13:57,920 --> 00:14:02,320
already have

00:13:58,639 --> 00:14:04,800
v2 in upstream so

00:14:02,320 --> 00:14:05,519
yeah it's probably going to go together

00:14:04,800 --> 00:14:07,360
okay

00:14:05,519 --> 00:14:08,639
and i didn't actually put it in a slide

00:14:07,360 --> 00:14:10,800
but if there's people that

00:14:08,639 --> 00:14:12,000
um are kind of new to gpio or pin

00:14:10,800 --> 00:14:14,079
control um

00:14:12,000 --> 00:14:15,440
kind of the main place to look is the

00:14:14,079 --> 00:14:18,560
mailing list that you'll find

00:14:15,440 --> 00:14:19,760
um listed on lore um in the links in the

00:14:18,560 --> 00:14:22,560
slides go to that

00:14:19,760 --> 00:14:22,880
there's the gpo subsystem analyst which

00:14:22,560 --> 00:14:25,199
is

00:14:22,880 --> 00:14:28,000
probably the best way to keep in touch

00:14:25,199 --> 00:14:28,000
with what's going on

00:14:28,160 --> 00:14:34,560
and if no one else had any any other um

00:14:32,880 --> 00:14:37,040
comments or thoughts right now i can go

00:14:34,560 --> 00:14:39,760
on to the one kind of question i had

00:14:37,040 --> 00:14:41,040
um regarding pin control we have about

00:14:39,760 --> 00:14:45,040
10 minutes left

00:14:41,040 --> 00:14:48,000
um if there's anyone that wants to speak

00:14:45,040 --> 00:14:51,519
um maybe put it in the zoom chat or i'm

00:14:48,000 --> 00:14:51,519
also watching the slack as well

00:14:54,560 --> 00:14:58,320
all right let me think like one thing

00:14:56,800 --> 00:15:01,040
that i would like to know

00:14:58,320 --> 00:15:01,440
is from garth if he can say something

00:15:01,040 --> 00:15:04,880
about

00:15:01,440 --> 00:15:07,040
the future for the aggregator if uh

00:15:04,880 --> 00:15:08,320
like where is it finished or is there

00:15:07,040 --> 00:15:09,519
like a lot of work

00:15:08,320 --> 00:15:11,760
that needs to happen are you seeing

00:15:09,519 --> 00:15:14,959
future use cases this kind of stuff that

00:15:11,760 --> 00:15:14,959
would be really interesting to know

00:15:15,040 --> 00:15:21,680
um do you hear me yes yeah

00:15:18,399 --> 00:15:26,000
yeah we hear you okay uh

00:15:21,680 --> 00:15:27,920
so well the original idea behind the

00:15:26,000 --> 00:15:31,839
aggregator was to

00:15:27,920 --> 00:15:35,680
expose gpios to a virtual machine

00:15:31,839 --> 00:15:40,399
and that goal has been reached so

00:15:35,680 --> 00:15:44,160
as far as i'm concerned it's finished

00:15:40,399 --> 00:15:47,920
um in the meantime a few other

00:15:44,160 --> 00:15:51,279
use cases popped up um

00:15:47,920 --> 00:15:53,920
like using it as some generic gpio

00:15:51,279 --> 00:15:55,680
driver for yeah the example i gave in

00:15:53,920 --> 00:15:58,399
the documentation was for a

00:15:55,680 --> 00:16:01,199
door lock that you can that's controlled

00:15:58,399 --> 00:16:01,199
with the gpio

00:16:01,759 --> 00:16:07,199
um then i think it's

00:16:05,759 --> 00:16:09,600
better to keep it separate from the

00:16:07,199 --> 00:16:11,680
mock-up driver because

00:16:09,600 --> 00:16:13,199
those are two completely different

00:16:11,680 --> 00:16:16,639
things

00:16:13,199 --> 00:16:16,639
like andy also said

00:16:18,399 --> 00:16:23,040
the aggregator is a bit simpler when

00:16:20,959 --> 00:16:24,079
talking about configuration because it

00:16:23,040 --> 00:16:27,279
basically takes

00:16:24,079 --> 00:16:28,800
just a list of gpios and that's it while

00:16:27,279 --> 00:16:31,440
with the mockup driver

00:16:28,800 --> 00:16:34,839
if i read what the plans are there then

00:16:31,440 --> 00:16:36,000
a lot of configuration options will be

00:16:34,839 --> 00:16:38,720
possible

00:16:36,000 --> 00:16:40,079
i fully agree definitely didn't like the

00:16:38,720 --> 00:16:43,440
idea of

00:16:40,079 --> 00:16:44,720
putting them together oh yeah it was

00:16:43,440 --> 00:16:48,000
andy was suggested to putting it

00:16:44,720 --> 00:16:50,720
together but it's yeah it's uh

00:16:48,000 --> 00:16:51,120
well and the reason i didn't use config

00:16:50,720 --> 00:16:54,240
fs

00:16:51,120 --> 00:16:57,440
is because it's basically

00:16:54,240 --> 00:17:00,959
creating a new aggregator device is

00:16:57,440 --> 00:17:03,120
a quite simple operation and and in

00:17:00,959 --> 00:17:07,360
many other drivers and subsystems you

00:17:03,120 --> 00:17:09,120
already have this new device csvs file

00:17:07,360 --> 00:17:11,760
and since it's just one line you have to

00:17:09,120 --> 00:17:15,120
write to that

00:17:11,760 --> 00:17:15,120
i don't think you need more

00:17:16,839 --> 00:17:21,679
configuration

00:17:18,240 --> 00:17:22,079
there's one thing that perhaps you want

00:17:21,679 --> 00:17:25,199
to

00:17:22,079 --> 00:17:33,600
configure um

00:17:25,199 --> 00:17:37,200
let me look it up

00:17:33,600 --> 00:17:40,240
uh yes so right now you can uh

00:17:37,200 --> 00:17:43,919
the aggregator forwards everything

00:17:40,240 --> 00:17:45,360
to the original physical gpio

00:17:43,919 --> 00:17:48,960
which means that you could can

00:17:45,360 --> 00:17:48,960
completely reconfigure a pin

00:17:49,440 --> 00:17:52,799
and perhaps that's something we may want

00:17:51,760 --> 00:17:55,120
to

00:17:52,799 --> 00:17:55,120
block

00:17:57,919 --> 00:18:01,679
for example if you have configured i'm

00:18:00,640 --> 00:18:03,840
sorry

00:18:01,679 --> 00:18:06,080
now i was asking what do you mean by

00:18:03,840 --> 00:18:09,520
completely reconfigured

00:18:06,080 --> 00:18:12,559
well if you put

00:18:09,520 --> 00:18:15,440
the direction in dt

00:18:12,559 --> 00:18:16,240
you can still override it from uh from

00:18:15,440 --> 00:18:18,000
the

00:18:16,240 --> 00:18:20,720
from the driver or from user space and

00:18:18,000 --> 00:18:20,720
things like that

00:18:23,280 --> 00:18:26,160
so if you put

00:18:26,640 --> 00:18:30,400
sorry so it's like a bit of policy that

00:18:28,799 --> 00:18:33,520
might want to add to the

00:18:30,400 --> 00:18:34,559
aggregator to like restrict what it can

00:18:33,520 --> 00:18:37,200
do with underlying

00:18:34,559 --> 00:18:39,280
gpio lines yeah that's right so right

00:18:37,200 --> 00:18:42,559
now from user space you can configure

00:18:39,280 --> 00:18:44,080
input output whatever while if you

00:18:42,559 --> 00:18:46,640
describe your your

00:18:44,080 --> 00:18:47,360
door opener device in dt for example

00:18:46,640 --> 00:18:50,799
then

00:18:47,360 --> 00:18:52,720
these gpios are are configured as

00:18:50,799 --> 00:18:53,919
outputs and then from user space you

00:18:52,720 --> 00:18:57,120
could still

00:18:53,919 --> 00:19:00,480
change them to input

00:18:57,120 --> 00:19:02,000
or vice versa from output to input is

00:19:00,480 --> 00:19:03,679
not that dangerous but the other way

00:19:02,000 --> 00:19:05,200
around

00:19:03,679 --> 00:19:07,600
you could damage some hardware for

00:19:05,200 --> 00:19:10,240
example

00:19:07,600 --> 00:19:12,720
if you suddenly drive input with a

00:19:10,240 --> 00:19:14,559
signal

00:19:12,720 --> 00:19:17,919
that seems sounds very useful to be able

00:19:14,559 --> 00:19:17,919
to to set the rule like that

00:19:20,640 --> 00:19:24,720
yeah i had a quick look already if there

00:19:22,880 --> 00:19:29,600
are some special flags

00:19:24,720 --> 00:19:31,679
in gpio subsystem that we can

00:19:29,600 --> 00:19:33,039
see if these if direction has been

00:19:31,679 --> 00:19:35,200
configured from

00:19:33,039 --> 00:19:38,559
dt or not but that doesn't seem to be

00:19:35,200 --> 00:19:41,679
the case

00:19:38,559 --> 00:19:43,520
now we don't have any policy as of today

00:19:41,679 --> 00:19:45,200
what i know we are more like

00:19:43,520 --> 00:19:47,440
counting on the device 3 to be kind of

00:19:45,200 --> 00:19:49,360
static and

00:19:47,440 --> 00:19:51,760
but the kernel space can of course

00:19:49,360 --> 00:19:55,120
already change this around

00:19:51,760 --> 00:19:57,280
so uh we have no way to in any of the

00:19:55,120 --> 00:20:01,039
hardware descriptions to say like

00:19:57,280 --> 00:20:02,159
this this pin or this line is for output

00:20:01,039 --> 00:20:03,679
or input only

00:20:02,159 --> 00:20:05,440
the driver can implement it it can

00:20:03,679 --> 00:20:07,600
refuse to execute

00:20:05,440 --> 00:20:09,280
the set direction call of course to to

00:20:07,600 --> 00:20:11,360
input or output so so

00:20:09,280 --> 00:20:12,880
we can we can have a limitation down on

00:20:11,360 --> 00:20:14,880
the hardware level

00:20:12,880 --> 00:20:16,640
but we can't configure that limitation

00:20:14,880 --> 00:20:18,480
let's say from the device tree or as

00:20:16,640 --> 00:20:20,559
something

00:20:18,480 --> 00:20:22,159
per device specific it's only something

00:20:20,559 --> 00:20:24,159
that would be a property of the hardware

00:20:22,159 --> 00:20:26,320
itself there are there is hardware with

00:20:24,159 --> 00:20:27,760
output lines that are only output or

00:20:26,320 --> 00:20:29,520
input lines that are only input and we

00:20:27,760 --> 00:20:31,440
can handle that in the driver

00:20:29,520 --> 00:20:33,520
but there's no way to add that policy on

00:20:31,440 --> 00:20:37,520
top of something that is

00:20:33,520 --> 00:20:40,320
electronically speaking or register wise

00:20:37,520 --> 00:20:40,320
multi-direction

00:20:46,840 --> 00:20:50,320
okay

00:20:48,320 --> 00:20:52,080
so drew do you want me to talk about pin

00:20:50,320 --> 00:20:54,640
control

00:20:52,080 --> 00:20:55,600
uh yeah um we just have i think a few

00:20:54,640 --> 00:20:58,159
minutes left here

00:20:55,600 --> 00:20:59,120
um one of the things i've been wondering

00:20:58,159 --> 00:21:02,159
about was

00:20:59,120 --> 00:21:04,640
um for kind of a debugging or

00:21:02,159 --> 00:21:06,880
development um type use case was the

00:21:04,640 --> 00:21:09,840
ability to change a pin muck state

00:21:06,880 --> 00:21:10,960
um the the motivation here for me is

00:21:09,840 --> 00:21:12,799
currently with

00:21:10,960 --> 00:21:14,400
the debian image that we ship on the

00:21:12,799 --> 00:21:16,640
beaglebones

00:21:14,400 --> 00:21:18,720
we have out out-of-free driver misc

00:21:16,640 --> 00:21:21,120
driver that allows people to

00:21:18,720 --> 00:21:23,360
have there's a state file in sysfs which

00:21:21,120 --> 00:21:26,720
allows them to change the state

00:21:23,360 --> 00:21:27,919
um for the pin mucks on a pin um so this

00:21:26,720 --> 00:21:30,080
is meant for like people

00:21:27,919 --> 00:21:31,760
doing rapid prototyping where they want

00:21:30,080 --> 00:21:34,960
to switch between like pwm

00:21:31,760 --> 00:21:36,480
to gpio um and those are all defined in

00:21:34,960 --> 00:21:37,200
the device tree it's just a matter of

00:21:36,480 --> 00:21:39,520
doing the

00:21:37,200 --> 00:21:42,880
like the pin control select state during

00:21:39,520 --> 00:21:45,200
runtime on it from user space

00:21:42,880 --> 00:21:46,000
and i'd like to get rid of this out of

00:21:45,200 --> 00:21:47,679
tree driver

00:21:46,000 --> 00:21:49,760
and trying to have some sort of mainline

00:21:47,679 --> 00:21:52,080
solution i think

00:21:49,760 --> 00:21:54,240
back during elc you'd mention that debug

00:21:52,080 --> 00:21:56,799
fs might be one way to do it

00:21:54,240 --> 00:21:59,760
um and i chatted on the list a little

00:21:56,799 --> 00:22:02,240
bit about it and and tony had mentioned

00:21:59,760 --> 00:22:04,159
um i think he thought putting it into

00:22:02,240 --> 00:22:05,120
the generic pin control might be one way

00:22:04,159 --> 00:22:07,120
of doing it

00:22:05,120 --> 00:22:08,640
or the driver in this case is pin

00:22:07,120 --> 00:22:10,720
control single so

00:22:08,640 --> 00:22:12,080
just kind of wondering um what you or

00:22:10,720 --> 00:22:15,760
other people might but

00:22:12,080 --> 00:22:15,760
might think about the solution for this

00:22:16,240 --> 00:22:21,280
yeah the basic problem you're going to

00:22:19,679 --> 00:22:23,760
run into here is the

00:22:21,280 --> 00:22:25,679
device 3 overlay people and i just have

00:22:23,760 --> 00:22:28,000
no control over these people

00:22:25,679 --> 00:22:29,840
that might sound a bit you know

00:22:28,000 --> 00:22:33,120
off-putting or derogative but it

00:22:29,840 --> 00:22:34,960
just it's just like such a big it ties

00:22:33,120 --> 00:22:36,320
into this system device 3 and all this

00:22:34,960 --> 00:22:37,039
kind of discussion that people are

00:22:36,320 --> 00:22:40,240
having

00:22:37,039 --> 00:22:42,320
and i just simply cannot grasp

00:22:40,240 --> 00:22:44,159
that thing i just have to give up and

00:22:42,320 --> 00:22:47,600
toss up my hands and i was like yeah you

00:22:44,159 --> 00:22:49,760
you go fix it i mean i can't figure out

00:22:47,600 --> 00:22:51,840
the whole world of system device tree

00:22:49,760 --> 00:22:53,440
and and it's also typical that this is

00:22:51,840 --> 00:22:55,760
one of the first things that

00:22:53,440 --> 00:22:57,360
we see because with the introduction of

00:22:55,760 --> 00:23:00,720
device tree

00:22:57,360 --> 00:23:02,080
to begin with and the evolution of it

00:23:00,720 --> 00:23:04,320
what is the first thing that people

00:23:02,080 --> 00:23:07,360
always do with their device trees always

00:23:04,320 --> 00:23:08,480
always always pink uh gpio and ping

00:23:07,360 --> 00:23:10,159
control like

00:23:08,480 --> 00:23:12,159
for some reason this always comes first

00:23:10,159 --> 00:23:13,120
in their mind not not even lead always

00:23:12,159 --> 00:23:16,400
gpio

00:23:13,120 --> 00:23:19,840
so um it's a bit stressful

00:23:16,400 --> 00:23:20,559
that we as kernel developers i suppose

00:23:19,840 --> 00:23:23,600
if i

00:23:20,559 --> 00:23:24,960
talk about i am like the internal

00:23:23,600 --> 00:23:28,400
representative of

00:23:24,960 --> 00:23:29,600
gpiomping control and bartos might be

00:23:28,400 --> 00:23:32,960
the

00:23:29,600 --> 00:23:37,440
user space interest party

00:23:32,960 --> 00:23:37,440
um we are kind of uh

00:23:37,600 --> 00:23:41,360
hijacked or something into this kind of

00:23:40,480 --> 00:23:43,360
system-wide

00:23:41,360 --> 00:23:45,120
description discussions and that

00:23:43,360 --> 00:23:48,880
universe is just so big

00:23:45,120 --> 00:23:51,039
that i just have to give up sometimes

00:23:48,880 --> 00:23:53,840
of course we can add a facility in debug

00:23:51,039 --> 00:23:54,240
fs debug fest is it's not a stable api

00:23:53,840 --> 00:23:56,400
so

00:23:54,240 --> 00:23:57,919
like it may break tomorrow it might be

00:23:56,400 --> 00:24:01,360
something uh

00:23:57,919 --> 00:24:03,360
am 3358 specific let's say this

00:24:01,360 --> 00:24:04,480
only works with that thing ever but that

00:24:03,360 --> 00:24:08,000
might be okay for you

00:24:04,480 --> 00:24:12,240
i don't know um as for generic solutions

00:24:08,000 --> 00:24:14,080
yeah that's another thing uh

00:24:12,240 --> 00:24:15,520
yeah yeah i've been playing around with

00:24:14,080 --> 00:24:18,080
sorry in

00:24:15,520 --> 00:24:19,600
in one is i can i could add like a you

00:24:18,080 --> 00:24:22,720
know a select state

00:24:19,600 --> 00:24:23,279
file to the main debug fs entries in

00:24:22,720 --> 00:24:26,320
core

00:24:23,279 --> 00:24:28,880
or i could do it in the driver um

00:24:26,320 --> 00:24:33,840
is there any is either one seem more

00:24:28,880 --> 00:24:33,840
appropriate to you

00:24:34,559 --> 00:24:38,080
yeah that's a good question i would say

00:24:36,320 --> 00:24:38,480
start with the driver and then let's see

00:24:38,080 --> 00:24:39,919
if

00:24:38,480 --> 00:24:42,000
there is generic interest and then

00:24:39,919 --> 00:24:43,200
evolve it into core though that will be

00:24:42,000 --> 00:24:46,640
like a lot of more

00:24:43,200 --> 00:24:47,600
work like i kind of like that gradual

00:24:46,640 --> 00:24:49,919
approach to it like

00:24:47,600 --> 00:24:51,520
solve the problem that you have and then

00:24:49,919 --> 00:24:53,039
if it turns up somebody else has that

00:24:51,520 --> 00:24:54,640
problem then you start to

00:24:53,039 --> 00:24:57,360
generalize it otherwise we get the

00:24:54,640 --> 00:25:00,799
upfront design pattern like big up front

00:24:57,360 --> 00:25:02,720
builder skyscraper in new york

00:25:00,799 --> 00:25:04,880
kind of kind of things and that's that

00:25:02,720 --> 00:25:08,159
just takes too much time

00:25:04,880 --> 00:25:08,159
okay guys

00:25:11,919 --> 00:25:16,000
okay i would like to add to the topic

00:25:15,039 --> 00:25:18,159
that

00:25:16,000 --> 00:25:20,960
we used to have something like specific

00:25:18,159 --> 00:25:24,240
debug first interface for stock image

00:25:20,960 --> 00:25:25,120
for this iot projects from winter and it

00:25:24,240 --> 00:25:28,799
seems people

00:25:25,120 --> 00:25:30,480
used really differently so the idea was

00:25:28,799 --> 00:25:34,320
because we have firmware

00:25:30,480 --> 00:25:37,760
and firmware misconfigurates sometimes

00:25:34,320 --> 00:25:41,200
beings we would like to configurate them

00:25:37,760 --> 00:25:42,320
back at runtime but i think this is not

00:25:41,200 --> 00:25:44,960
what

00:25:42,320 --> 00:25:46,960
actually we need because either in

00:25:44,960 --> 00:25:50,000
device 3 or

00:25:46,960 --> 00:25:50,559
in acpi we could just you know reboot

00:25:50,000 --> 00:25:55,279
system

00:25:50,559 --> 00:25:58,000
it's like only a matter of one minute

00:25:55,279 --> 00:26:00,640
so why do we need to have it at all at

00:25:58,000 --> 00:26:00,640
runtime

00:26:01,840 --> 00:26:05,200
that's where it come we get this thing

00:26:04,159 --> 00:26:08,400
that i talked about

00:26:05,200 --> 00:26:10,240
for for the the beagle specifically what

00:26:08,400 --> 00:26:10,720
people are pointing at is system device

00:26:10,240 --> 00:26:13,120
three

00:26:10,720 --> 00:26:15,360
if this was like an intel board they

00:26:13,120 --> 00:26:18,159
would be pointing us to

00:26:15,360 --> 00:26:18,480
acpi dsdt i guess and say like yeah

00:26:18,159 --> 00:26:20,480
would

00:26:18,480 --> 00:26:21,520
just change that or just change this

00:26:20,480 --> 00:26:24,640
this and

00:26:21,520 --> 00:26:28,559
the the problem there which is not

00:26:24,640 --> 00:26:30,720
like uh which is a device 3

00:26:28,559 --> 00:26:32,159
universe specific problem is that they

00:26:30,720 --> 00:26:34,559
just don't have

00:26:32,159 --> 00:26:36,880
the infrastructure to do dynamic updates

00:26:34,559 --> 00:26:38,559
to device trees i mean they they might

00:26:36,880 --> 00:26:40,559
have it in some form you might be able

00:26:38,559 --> 00:26:42,720
to do it in the bootloader

00:26:40,559 --> 00:26:44,159
but doing it at runtime on a system

00:26:42,720 --> 00:26:46,799
that's up and running

00:26:44,159 --> 00:26:47,200
um that's not working for them and it's

00:26:46,799 --> 00:26:49,279
not

00:26:47,200 --> 00:26:50,480
doable to make it at runtime and make it

00:26:49,279 --> 00:26:53,760
persistent

00:26:50,480 --> 00:26:56,799
either it's just like the the the

00:26:53,760 --> 00:26:58,480
um the workability of that thing is just

00:26:56,799 --> 00:27:00,159
very complex and people are just like

00:26:58,480 --> 00:27:00,880
finding it a hard time to work with it

00:27:00,159 --> 00:27:02,400
but

00:27:00,880 --> 00:27:04,880
i guess drew maybe you have actually

00:27:02,400 --> 00:27:08,720
tried it in practice to do overlays

00:27:04,880 --> 00:27:10,559
does it work for you yeah so i mean uh

00:27:08,720 --> 00:27:12,159
the initial kind of overlay work was

00:27:10,559 --> 00:27:16,159
done by pentelus

00:27:12,159 --> 00:27:18,799
for the beaglebone capes um and

00:27:16,159 --> 00:27:20,399
you know it did work for us but after it

00:27:18,799 --> 00:27:22,720
became clear it was never going to go

00:27:20,399 --> 00:27:24,799
mainline we and you boot got the

00:27:22,720 --> 00:27:25,840
capability to do overlays we switched

00:27:24,799 --> 00:27:29,120
over to uboot

00:27:25,840 --> 00:27:29,840
um the downside there is it requires a

00:27:29,120 --> 00:27:32,399
reboot

00:27:29,840 --> 00:27:34,000
um and it can be a little more

00:27:32,399 --> 00:27:36,240
complicated for some of our users

00:27:34,000 --> 00:27:37,840
to figure out how to do stuff in uboot

00:27:36,240 --> 00:27:42,240
um versus

00:27:37,840 --> 00:27:47,120
just in during runtime itself

00:27:42,240 --> 00:27:51,520
yeah i i see so it also for me was

00:27:47,120 --> 00:27:54,080
recently surprise inventions that

00:27:51,520 --> 00:27:55,840
acpi in this sense is a bit ahead of

00:27:54,080 --> 00:27:58,080
device 3 because we have kind of

00:27:55,840 --> 00:28:00,880
overlays and networking

00:27:58,080 --> 00:28:02,080
and you could load and load many times

00:28:00,880 --> 00:28:04,080
at one time

00:28:02,080 --> 00:28:05,520
the only problem we already discussed

00:28:04,080 --> 00:28:08,000
like a couple of years ago

00:28:05,520 --> 00:28:10,720
three years ago with linus that acpi

00:28:08,000 --> 00:28:10,720
misses one

00:28:11,200 --> 00:28:16,880
stuff for pin control namely this

00:28:14,399 --> 00:28:17,919
layer between acps e and pin control

00:28:16,880 --> 00:28:20,559
subsystem

00:28:17,919 --> 00:28:22,960
so we have already everything in spec to

00:28:20,559 --> 00:28:26,799
support the pin control states but

00:28:22,960 --> 00:28:26,799
we miss implementation

00:28:29,760 --> 00:28:34,240
and so so my first thought was yeah if

00:28:32,320 --> 00:28:36,320
you have a way to

00:28:34,240 --> 00:28:38,000
load the device tree overlay then the

00:28:36,320 --> 00:28:40,559
ping control stuff

00:28:38,000 --> 00:28:41,760
that works automatically the biggest

00:28:40,559 --> 00:28:44,399
issue there is to

00:28:41,760 --> 00:28:45,279
load the overlays dynamically and get

00:28:44,399 --> 00:28:50,159
that

00:28:45,279 --> 00:28:52,080
supported upstream technically it work

00:28:50,159 --> 00:28:54,080
it's dangerous you have to know what you

00:28:52,080 --> 00:28:57,200
do but yeah that's

00:28:54,080 --> 00:29:01,039
the case for many things

00:28:57,200 --> 00:29:02,159
uh the way forward there i think is to

00:29:01,039 --> 00:29:06,320
get into this

00:29:02,159 --> 00:29:08,799
connector way of having overlays

00:29:06,320 --> 00:29:10,320
which is so more like a limited subset

00:29:08,799 --> 00:29:13,840
where you

00:29:10,320 --> 00:29:15,679
define how a connector looks like

00:29:13,840 --> 00:29:19,360
beaglebone is probably a bad example

00:29:15,679 --> 00:29:21,600
there because it's way too complicated

00:29:19,360 --> 00:29:24,159
but i think a good starting point would

00:29:21,600 --> 00:29:24,159
be uh

00:29:24,320 --> 00:29:28,159
b mod connectors or uh

00:29:28,240 --> 00:29:33,840
uh sparkfun quick

00:29:31,520 --> 00:29:36,000
or uh seed studio what are they using

00:29:33,840 --> 00:29:37,679
this i can't

00:29:36,000 --> 00:29:39,279
find the name right now this four pin

00:29:37,679 --> 00:29:43,840
connector which you can

00:29:39,279 --> 00:29:47,039
use as uart i square c or gpio so

00:29:43,840 --> 00:29:49,279
those are small limited examples and

00:29:47,039 --> 00:29:50,960
probably good starting points to start

00:29:49,279 --> 00:29:54,000
defining

00:29:50,960 --> 00:29:54,720
connector interface and then later that

00:29:54,000 --> 00:29:57,120
can be

00:29:54,720 --> 00:29:58,480
enhanced to to beaglebone which is more

00:29:57,120 --> 00:29:59,919
complex

00:29:58,480 --> 00:30:04,320
or to the connectors we have on the

00:29:59,919 --> 00:30:04,320
renesas boards where i am using overlays

00:30:04,480 --> 00:30:08,799
now in real life most people don't need

00:30:07,279 --> 00:30:11,440
overlays and i think

00:30:08,799 --> 00:30:13,120
but i mean what need dynamic overlays

00:30:11,440 --> 00:30:15,679
and just doing it in the bootloader is

00:30:13,120 --> 00:30:19,679
probably fine

00:30:15,679 --> 00:30:22,240
who is doing hot swapping of hardware

00:30:19,679 --> 00:30:24,080
recently i saw a video that somebody was

00:30:22,240 --> 00:30:25,760
hot swapping kickstart rooms in this

00:30:24,080 --> 00:30:30,159
amiga

00:30:25,760 --> 00:30:33,039
but these are uh

00:30:30,159 --> 00:30:33,039
not typical use

00:30:35,200 --> 00:30:39,279
uh cases so you know the session already

00:30:38,399 --> 00:30:41,200
over time for

00:30:39,279 --> 00:30:43,120
seven minutes but this is the last

00:30:41,200 --> 00:30:46,159
session of this track so

00:30:43,120 --> 00:30:50,559
i'm okay to pull it open uh but

00:30:46,159 --> 00:30:55,520
uh consider all the attendees time uh

00:30:50,559 --> 00:30:57,679
i uh suggest you can cut it short

00:30:55,520 --> 00:30:59,919
yeah people are free to drop out of

00:30:57,679 --> 00:30:59,919
course

00:31:00,000 --> 00:31:05,200
but uh yeah i think that one of the

00:31:03,279 --> 00:31:06,480
the things that would be typically

00:31:05,200 --> 00:31:09,039
counter to

00:31:06,480 --> 00:31:10,960
doing overlays in the u-boot would be if

00:31:09,039 --> 00:31:11,919
users have an expectation to actually

00:31:10,960 --> 00:31:14,880
remax pins

00:31:11,919 --> 00:31:16,480
at runtime and one typical use case

00:31:14,880 --> 00:31:18,720
example of that is people using the

00:31:16,480 --> 00:31:21,039
arduino and want to have like their own

00:31:18,720 --> 00:31:24,480
computer act as an arduino

00:31:21,039 --> 00:31:27,120
because that thing does remax pins

00:31:24,480 --> 00:31:29,440
on demand at runtime so if you have an

00:31:27,120 --> 00:31:31,519
arduino connected over usb you expect it

00:31:29,440 --> 00:31:34,000
to be able to change that pin from gpio

00:31:31,519 --> 00:31:36,080
to pwm to uart whatever

00:31:34,000 --> 00:31:38,559
just with a little bit of program code

00:31:36,080 --> 00:31:41,039
in your little ide that you have

00:31:38,559 --> 00:31:42,640
and i understand it if these users will

00:31:41,039 --> 00:31:45,360
find it frustrating that i have

00:31:42,640 --> 00:31:46,880
all of these things in my computer that

00:31:45,360 --> 00:31:48,480
i'm sitting at but i'm not allowed to

00:31:46,880 --> 00:31:49,440
change it then i have to reboot it and

00:31:48,480 --> 00:31:51,600
go into

00:31:49,440 --> 00:31:53,919
this funny overlay thing and like what

00:31:51,600 --> 00:31:56,080
is this i understand that to them

00:31:53,919 --> 00:31:58,159
coming from that world this is gonna

00:31:56,080 --> 00:31:58,640
seem alien it's not their their normal

00:31:58,159 --> 00:32:01,840
use

00:31:58,640 --> 00:32:01,840
pattern let's say

00:32:02,080 --> 00:32:05,600
yeah but but we see the difference is

00:32:04,320 --> 00:32:08,480
arduino

00:32:05,600 --> 00:32:09,039
is operating system less platform and

00:32:08,480 --> 00:32:12,000
small

00:32:09,039 --> 00:32:14,320
and like microcontroller but here we

00:32:12,000 --> 00:32:16,960
have really operating system and

00:32:14,320 --> 00:32:18,640
the user's device connected even to usb

00:32:16,960 --> 00:32:29,679
whatever it's not

00:32:18,640 --> 00:32:31,279
the same thing as standalone arduino

00:32:29,679 --> 00:32:32,960
i mean i think for the use case of us

00:32:31,279 --> 00:32:35,519
was just for people doing rapid

00:32:32,960 --> 00:32:39,440
prototyping which is kind of a narrow

00:32:35,519 --> 00:32:42,960
um use case but important for a dev

00:32:39,440 --> 00:32:46,559
board platform like ours

00:32:42,960 --> 00:32:49,200
yes and we actually we discussed here at

00:32:46,559 --> 00:32:52,799
the intel also the possibility and

00:32:49,200 --> 00:32:55,120
become if named mike westerberg

00:32:52,799 --> 00:32:58,399
says to you something then we discussed

00:32:55,120 --> 00:33:01,760
with him and we come to the idea that

00:32:58,399 --> 00:33:04,320
it's really for prototyping it's

00:33:01,760 --> 00:33:04,960
not really needed debug first off or

00:33:04,320 --> 00:33:07,360
something

00:33:04,960 --> 00:33:09,840
it's a bit dangerous because people

00:33:07,360 --> 00:33:13,120
could use that debug affairs and

00:33:09,840 --> 00:33:13,919
really fire fryer their boards with the

00:33:13,120 --> 00:33:16,960
smoke

00:33:13,919 --> 00:33:20,960
real smoke out and

00:33:16,960 --> 00:33:20,960
who who to blame for that right

00:33:21,519 --> 00:33:26,559
right yeah i guess in this case

00:33:24,799 --> 00:33:28,320
the facility i wanted to see all you

00:33:26,559 --> 00:33:31,360
want to be able to do is do uh

00:33:28,320 --> 00:33:31,919
like pin control select state from user

00:33:31,360 --> 00:33:34,640
space

00:33:31,919 --> 00:33:36,480
and those states are already defined um

00:33:34,640 --> 00:33:38,799
in the device tree so

00:33:36,480 --> 00:33:39,760
um for a given pin like on our expansion

00:33:38,799 --> 00:33:43,519
connector

00:33:39,760 --> 00:33:46,640
it might be like gpio in gpio or pwm

00:33:43,519 --> 00:33:50,399
and the ability to do a runtime

00:33:46,640 --> 00:33:52,159
uh pin control select state

00:33:50,399 --> 00:33:53,840
from user space is really what we want

00:33:52,159 --> 00:33:55,120
because we have this utility called

00:33:53,840 --> 00:33:57,279
config pin

00:33:55,120 --> 00:33:59,200
which allows people to say config pin

00:33:57,279 --> 00:34:01,760
the name of the pin on the on the

00:33:59,200 --> 00:34:02,880
on the expansion header and the state

00:34:01,760 --> 00:34:06,559
that they want to be in

00:34:02,880 --> 00:34:08,399
and the the states it's a defined list

00:34:06,559 --> 00:34:12,800
of possible states for each pin

00:34:08,399 --> 00:34:16,159
so um i think the safety for that can be

00:34:12,800 --> 00:34:17,839
um satisfied by the fact that we only

00:34:16,159 --> 00:34:20,240
have states defined in the device tree

00:34:17,839 --> 00:34:22,639
that we know are are safe for each pin

00:34:20,240 --> 00:34:23,359
on the expansion header um i mean i

00:34:22,639 --> 00:34:25,440
suppose

00:34:23,359 --> 00:34:26,800
people could potentially create shorts

00:34:25,440 --> 00:34:29,679
but

00:34:26,800 --> 00:34:30,720
in practice over the last um like seven

00:34:29,679 --> 00:34:33,119
years that's not

00:34:30,720 --> 00:34:34,399
been too much of a problem the the main

00:34:33,119 --> 00:34:36,399
problem here is just that

00:34:34,399 --> 00:34:38,800
we have this out of tree module and we

00:34:36,399 --> 00:34:39,119
would we'd love to be able to get rid of

00:34:38,800 --> 00:34:41,440
it

00:34:39,119 --> 00:34:44,560
while still keeping the same um

00:34:41,440 --> 00:34:44,560
prototyping experience

00:34:45,119 --> 00:34:50,879
i would say go for debug fs for now and

00:34:48,800 --> 00:34:52,720
see where that takes you what we could

00:34:50,879 --> 00:34:55,119
think about in the long run is

00:34:52,720 --> 00:34:56,879
like because what you describe is is not

00:34:55,119 --> 00:34:57,599
applicable to all kind of hardware there

00:34:56,879 --> 00:34:59,440
are

00:34:57,599 --> 00:35:00,720
many ping controllers out there that do

00:34:59,440 --> 00:35:03,280
not control

00:35:00,720 --> 00:35:04,000
maxing on a per pin granularity they do

00:35:03,280 --> 00:35:06,560
it like they

00:35:04,000 --> 00:35:08,640
you change something and you switch the

00:35:06,560 --> 00:35:10,160
function of 40 different pins

00:35:08,640 --> 00:35:12,400
so then this is obviously not going to

00:35:10,160 --> 00:35:14,400
work so i would say like take this and

00:35:12,400 --> 00:35:16,079
then for the future if we want to create

00:35:14,400 --> 00:35:18,400
something generic out of it

00:35:16,079 --> 00:35:19,119
it would be more like on the basis like

00:35:18,400 --> 00:35:22,400
take this

00:35:19,119 --> 00:35:25,839
this this and this pin and expose that

00:35:22,400 --> 00:35:28,079
to debug fs knob or csfs knob or

00:35:25,839 --> 00:35:30,000
config fs knob whatever knob you have

00:35:28,079 --> 00:35:32,880
but so that we can put the policy on

00:35:30,000 --> 00:35:34,960
what exactly pins we want to do that way

00:35:32,880 --> 00:35:36,960
than not so that we just like

00:35:34,960 --> 00:35:39,200
like these are experimental pins those

00:35:36,960 --> 00:35:41,200
you can switch between pwm and

00:35:39,200 --> 00:35:42,320
uart and whatever those pins over here

00:35:41,200 --> 00:35:44,000
we don't touch those

00:35:42,320 --> 00:35:45,760
like something like that but those are

00:35:44,000 --> 00:35:47,760
just like guesses right now i would say

00:35:45,760 --> 00:35:49,680
keep it to debug first for now

00:35:47,760 --> 00:35:53,280
so could you rule out that this is going

00:35:49,680 --> 00:35:59,599
to become part of the gpio version three

00:35:53,280 --> 00:36:01,040
ioctal interface

00:35:59,599 --> 00:36:03,359
i i would think it would be something

00:36:01,040 --> 00:36:03,359
different

00:36:04,400 --> 00:36:08,079
so uh at least you know divide and

00:36:06,800 --> 00:36:11,520
conquer

00:36:08,079 --> 00:36:14,640
normal uh machiavellian tactic

00:36:11,520 --> 00:36:15,680
no i was just thinking that if there's a

00:36:14,640 --> 00:36:19,040
chance

00:36:15,680 --> 00:36:22,160
that uh it would be part of the

00:36:19,040 --> 00:36:23,520
octal interface then maybe we should

00:36:22,160 --> 00:36:26,400
think about it some more

00:36:23,520 --> 00:36:28,240
and delay the version two api one more

00:36:26,400 --> 00:36:30,880
release before we have

00:36:28,240 --> 00:36:32,079
come to i i don't think like this isn't

00:36:30,880 --> 00:36:34,800
really related to

00:36:32,079 --> 00:36:36,400
gpios like this is really something

00:36:34,800 --> 00:36:39,119
separate and

00:36:36,400 --> 00:36:40,000
this lives in in pin control and gpio is

00:36:39,119 --> 00:36:43,119
really limited

00:36:40,000 --> 00:36:44,800
to the gpio understand that there are

00:36:43,119 --> 00:36:46,000
different subsystems in the kernel but

00:36:44,800 --> 00:36:48,400
to a user

00:36:46,000 --> 00:36:51,040
there is a certain commonality because a

00:36:48,400 --> 00:36:53,280
lot of the

00:36:51,040 --> 00:36:55,040
things you're managing are the same pins

00:36:53,280 --> 00:36:58,000
like you might be managing them

00:36:55,040 --> 00:36:59,200
as pins and set them to high and low but

00:36:58,000 --> 00:37:02,880
you might also want to

00:36:59,200 --> 00:37:04,720
set that pin to to do something else

00:37:02,880 --> 00:37:06,240
it is true that i have toyed at times

00:37:04,720 --> 00:37:08,240
with the idea that

00:37:06,240 --> 00:37:10,560
that eventually far down the road the

00:37:08,240 --> 00:37:12,720
gpiomp in control would become one

00:37:10,560 --> 00:37:15,119
subsystem and just like do everything

00:37:12,720 --> 00:37:17,040
related to pins and ios and so on

00:37:15,119 --> 00:37:18,480
it's just a problem right now that's off

00:37:17,040 --> 00:37:20,240
in the future with you know fusion

00:37:18,480 --> 00:37:20,720
reactors and flying cars and this kind

00:37:20,240 --> 00:37:24,480
of stuff

00:37:20,720 --> 00:37:24,480
it's like just too far away right now

00:37:27,280 --> 00:37:30,480
i would like to add that for debug

00:37:29,200 --> 00:37:33,599
affairs uh

00:37:30,480 --> 00:37:35,359
cleaners you were worrying about a group

00:37:33,599 --> 00:37:37,680
of pins but we already have

00:37:35,359 --> 00:37:39,599
this idea of functions and groups i

00:37:37,680 --> 00:37:41,119
guess we could only operate on this

00:37:39,599 --> 00:37:45,040
level at least it would be

00:37:41,119 --> 00:37:45,040
more generic ish

00:37:45,680 --> 00:37:50,000
that would be my stance as well it's

00:37:47,599 --> 00:37:52,640
just the single pin control people will

00:37:50,000 --> 00:37:56,000
disagree with me so i already know what

00:37:52,640 --> 00:37:56,000
kind of resistance i would meet

00:37:59,040 --> 00:38:04,560
uh drew on on that note i was i just

00:38:02,160 --> 00:38:06,320
have a quick question uh

00:38:04,560 --> 00:38:07,680
is there any support for for the

00:38:06,320 --> 00:38:09,599
beaglebone kernel

00:38:07,680 --> 00:38:11,200
in yokto for the beaglebone kernel and

00:38:09,599 --> 00:38:11,839
the associated tools like the cape

00:38:11,200 --> 00:38:14,480
manager

00:38:11,839 --> 00:38:14,880
uh the pinmax helper and all that is is

00:38:14,480 --> 00:38:17,440
it

00:38:14,880 --> 00:38:18,160
on like really debian specific or or is

00:38:17,440 --> 00:38:20,560
there some

00:38:18,160 --> 00:38:21,680
some support for that in yoko it's not

00:38:20,560 --> 00:38:24,720
debian specific

00:38:21,680 --> 00:38:25,280
um i i can i'll put the link in the chat

00:38:24,720 --> 00:38:27,680
we have

00:38:25,280 --> 00:38:29,280
um a directory of patches that we apply

00:38:27,680 --> 00:38:33,040
to our debian kernel

00:38:29,280 --> 00:38:35,280
but it could be applied on on top of

00:38:33,040 --> 00:38:36,079
any of the kernels we we tend to rebase

00:38:35,280 --> 00:38:39,200
our patches

00:38:36,079 --> 00:38:39,920
for each of the stable kernels that ti

00:38:39,200 --> 00:38:42,960
does so

00:38:39,920 --> 00:38:45,280
right now that's 5'4 and the work i do

00:38:42,960 --> 00:38:48,720
is just on on top of mainline but

00:38:45,280 --> 00:38:49,599
um we stopped using the overlay cape

00:38:48,720 --> 00:38:51,440
manager though

00:38:49,599 --> 00:38:52,880
um the the gate manager which was a

00:38:51,440 --> 00:38:54,880
missed driver so

00:38:52,880 --> 00:38:57,599
um kind of the main things are right now

00:38:54,880 --> 00:39:00,560
is is this bone pin mux helper

00:38:57,599 --> 00:39:01,440
um and there's another one called gpio

00:39:00,560 --> 00:39:04,079
of helper

00:39:01,440 --> 00:39:04,560
um though i think i can solve that by

00:39:04,079 --> 00:39:08,000
using

00:39:04,560 --> 00:39:11,040
aggregator but i'll drop a

00:39:08,000 --> 00:39:12,160
link to our patches into into the chat

00:39:11,040 --> 00:39:15,119
here

00:39:12,160 --> 00:39:16,560
but mainline does boot it's basically

00:39:15,119 --> 00:39:18,240
just some of the out-of-box

00:39:16,560 --> 00:39:19,599
features that we use for like our

00:39:18,240 --> 00:39:24,320
tutorials don't work

00:39:19,599 --> 00:39:24,320
um mainly the the config pin utility

00:39:25,040 --> 00:39:28,960
okay yeah but there are lots of people

00:39:26,560 --> 00:39:31,920
that use yakdo to

00:39:28,960 --> 00:39:33,520
to run on the on the beaglebone um

00:39:31,920 --> 00:39:34,000
especially especially when people go and

00:39:33,520 --> 00:39:36,640
like

00:39:34,000 --> 00:39:38,320
make products out of it they tend to to

00:39:36,640 --> 00:39:40,800
stop using our debian

00:39:38,320 --> 00:39:42,560
image and switch over to yakuto yeah

00:39:40,800 --> 00:39:44,640
this is what i'm thinking about and and

00:39:42,560 --> 00:39:46,240
like the the kernel from meta ti doesn't

00:39:44,640 --> 00:39:48,160
support any of that so i was thinking

00:39:46,240 --> 00:39:49,920
that maybe this would be

00:39:48,160 --> 00:39:51,520
it would be easier to just reuse these

00:39:49,920 --> 00:39:54,240
tools

00:39:51,520 --> 00:39:55,359
yeah this is not related to the stock i

00:39:54,240 --> 00:39:57,200
i don't know you want to take

00:39:55,359 --> 00:40:00,160
take your time with this but uh we'll

00:39:57,200 --> 00:40:02,079
take it offline maybe or

00:40:00,160 --> 00:40:03,599
yeah um definitely we can we can talk

00:40:02,079 --> 00:40:05,760
about it um meta ti

00:40:03,599 --> 00:40:07,359
i mean it ha the main things that are

00:40:05,760 --> 00:40:09,599
out of tree um that

00:40:07,359 --> 00:40:12,079
matter a lot are the stuff for the pru

00:40:09,599 --> 00:40:14,240
um because it took ti a really long time

00:40:12,079 --> 00:40:15,680
to upstream support for the pure u

00:40:14,240 --> 00:40:17,359
for those that don't know there's a

00:40:15,680 --> 00:40:18,319
little these little microcontrollers

00:40:17,359 --> 00:40:21,520
that are in the

00:40:18,319 --> 00:40:24,240
soc um that the beaglebone uses um

00:40:21,520 --> 00:40:25,040
and they finally got the remote prop

00:40:24,240 --> 00:40:28,400
driver i think

00:40:25,040 --> 00:40:30,880
upstream just now so um for

00:40:28,400 --> 00:40:31,599
for all the past years we've been using

00:40:30,880 --> 00:40:33,520
that from

00:40:31,599 --> 00:40:35,200
the ti kernel so that's kind of the main

00:40:33,520 --> 00:40:38,319
thing that's missing from mainline

00:40:35,200 --> 00:40:39,680
um is to use those prus

00:40:38,319 --> 00:40:41,520
but other than that there's not there's

00:40:39,680 --> 00:40:43,440
not a lot that's not

00:40:41,520 --> 00:40:44,960
um mainline i mean the other thing too

00:40:43,440 --> 00:40:47,599
is the socs

00:40:44,960 --> 00:40:49,440
i think 10 years old by now so most of

00:40:47,599 --> 00:40:52,000
the supports in there

00:40:49,440 --> 00:40:53,040
it's just these rapid prototyping use

00:40:52,000 --> 00:40:56,160
cases that

00:40:53,040 --> 00:40:56,160
aren't really covered yet

00:40:58,000 --> 00:41:06,000
guys to the topic i have also question

00:41:02,000 --> 00:41:09,040
about arm64 and acpi

00:41:06,000 --> 00:41:10,160
is gpio somehow in pin configuration

00:41:09,040 --> 00:41:12,880
consider it

00:41:10,160 --> 00:41:12,880
to be there

00:41:13,280 --> 00:41:16,560
for arm 64

00:41:18,160 --> 00:41:21,920
i'm not working on any arm 64 system

00:41:20,720 --> 00:41:26,960
that has acpi

00:41:21,920 --> 00:41:28,640
so so i don't know

00:41:26,960 --> 00:41:30,800
i think generally speaking those would

00:41:28,640 --> 00:41:34,160
be for servers

00:41:30,800 --> 00:41:37,599
where you don't want to

00:41:34,160 --> 00:41:39,599
configure the the pinmux or the gpr i

00:41:37,599 --> 00:41:41,040
think in the past we've always said that

00:41:39,599 --> 00:41:43,119
pin maxing and pin control would

00:41:41,040 --> 00:41:45,520
completely be out

00:41:43,119 --> 00:41:46,640
for those systems gpio you might have

00:41:45,520 --> 00:41:48,160
because

00:41:46,640 --> 00:41:51,680
you can always have devices that have

00:41:48,160 --> 00:41:53,839
gpios exposed to user space

00:41:51,680 --> 00:41:55,119
but that would just be a regular device

00:41:53,839 --> 00:41:57,760
somewhere that happens to have some

00:41:55,119 --> 00:41:57,760
gpios

00:41:57,920 --> 00:42:02,079
yeah but but what i mean this acp

00:42:00,880 --> 00:42:04,000
specification provides

00:42:02,079 --> 00:42:06,240
pin configuration for example firmware

00:42:04,000 --> 00:42:09,040
could use some pins on their own

00:42:06,240 --> 00:42:11,200
purpose before system boots and systems

00:42:09,040 --> 00:42:14,240
visited to different purpose by

00:42:11,200 --> 00:42:16,800
some reason and for that you have a cpi

00:42:14,240 --> 00:42:17,920
description for pins so if you would

00:42:16,800 --> 00:42:20,640
like really

00:42:17,920 --> 00:42:22,000
through acps with each device even on

00:42:20,640 --> 00:42:25,760
servers

00:42:22,000 --> 00:42:27,920
it could be possible and from experience

00:42:25,760 --> 00:42:31,359
i could tell that our customers they

00:42:27,920 --> 00:42:33,520
use dpi on servers which surprises to me

00:42:31,359 --> 00:42:33,520
but

00:42:37,599 --> 00:42:41,040
well we we did have one question from

00:42:39,839 --> 00:42:42,880
our and i don't know if you're still

00:42:41,040 --> 00:42:44,960
interested but you had asked about the

00:42:42,880 --> 00:42:47,359
virtio based gpo driver

00:42:44,960 --> 00:42:49,119
um right yes since we're adding retail

00:42:47,359 --> 00:42:51,839
drivers for almost anything now

00:42:49,119 --> 00:42:53,200
um that is something i was wondering

00:42:51,839 --> 00:42:54,160
whether there's already work going on

00:42:53,200 --> 00:42:56,839
for that

00:42:54,160 --> 00:42:59,839
and how it connects to the to the host

00:42:56,839 --> 00:42:59,839
side

00:43:05,839 --> 00:43:10,880
i see this question from lucas about

00:43:08,400 --> 00:43:13,359
creating a connector device with a gpio

00:43:10,880 --> 00:43:16,079
aggregator

00:43:13,359 --> 00:43:18,480
so yeah if you have a connector a

00:43:16,079 --> 00:43:21,680
physical connector that is only

00:43:18,480 --> 00:43:23,920
gpio pins then you can use the gpio

00:43:21,680 --> 00:43:25,119
aggregator to group them all together

00:43:23,920 --> 00:43:28,480
into one

00:43:25,119 --> 00:43:31,280
virtual gpio ship but the whole

00:43:28,480 --> 00:43:34,000
connector thing would be

00:43:31,280 --> 00:43:34,720
more generic so if it's just gpios it's

00:43:34,000 --> 00:43:36,720
not that

00:43:34,720 --> 00:43:38,960
interesting it's more interesting if

00:43:36,720 --> 00:43:42,720
some of these pins can also be used as

00:43:38,960 --> 00:43:42,720
the i square c or uart bus

00:43:42,880 --> 00:43:50,000
and then you want a way to

00:43:46,400 --> 00:43:51,760
expose that and describe users that are

00:43:50,000 --> 00:43:53,920
connected to them

00:43:51,760 --> 00:43:58,079
but if it's purely for gpio then yeah

00:43:53,920 --> 00:43:58,079
the gpio aggregator can help there

00:43:58,240 --> 00:44:00,560
okay

00:44:02,079 --> 00:44:06,480
i think i pasted the wrong uh your your

00:44:04,400 --> 00:44:09,040
comment about echo pin mucks into

00:44:06,480 --> 00:44:11,280
debug fest that was that was unrelated

00:44:09,040 --> 00:44:14,720
right

00:44:11,280 --> 00:44:14,720
indeed okay

00:44:19,040 --> 00:44:26,079
and did anyone have a reply to oh um

00:44:23,520 --> 00:44:29,280
i guess uh lena's reply to not having

00:44:26,079 --> 00:44:37,839
seen any of the video gpo stuff

00:44:29,280 --> 00:44:37,839
but he'll relay the question to bjorn

00:44:38,880 --> 00:44:46,240
anyone else have any um yeah for on

00:44:42,200 --> 00:44:49,520
questions question um

00:44:46,240 --> 00:44:53,119
so basically i worked on adding

00:44:49,520 --> 00:44:56,400
support for gpios to qmo so i have

00:44:53,119 --> 00:44:56,400
something for outputs

00:44:56,800 --> 00:45:00,560
it wasn't welcomed that much

00:45:00,720 --> 00:45:07,680
and i didn't use some vit io

00:45:04,319 --> 00:45:10,720
protocol because basically the

00:45:07,680 --> 00:45:13,839
gpio uh gpo ship device

00:45:10,720 --> 00:45:15,680
in user space is already

00:45:13,839 --> 00:45:19,839
good enough for that i think so it's not

00:45:15,680 --> 00:45:19,839
needed to define some other protocol

00:45:20,720 --> 00:45:24,720
so yeah using that i can control leds on

00:45:23,920 --> 00:45:27,280
the board from

00:45:24,720 --> 00:45:27,280
qmo

00:45:27,920 --> 00:45:33,839
so far it's only outputs but not inputs

00:45:30,839 --> 00:45:33,839
yet

00:45:35,040 --> 00:45:39,280
yeah the the idea about what i o would

00:45:37,520 --> 00:45:42,560
be to make it

00:45:39,280 --> 00:45:44,640
um more generic across different kinds

00:45:42,560 --> 00:45:47,119
of hypervisors and virtualization

00:45:44,640 --> 00:45:47,760
and emulators and all kinds of other

00:45:47,119 --> 00:45:50,880
things

00:45:47,760 --> 00:45:52,480
like they might um we're adding verteiro

00:45:50,880 --> 00:45:55,520
drivers for other things too

00:45:52,480 --> 00:45:57,119
where you might have the console routed

00:45:55,520 --> 00:45:58,880
through vertio

00:45:57,119 --> 00:46:01,200
to some some other hardware device for

00:45:58,880 --> 00:46:02,880
example and have that

00:46:01,200 --> 00:46:04,480
run on a microcontroller somewhere and

00:46:02,880 --> 00:46:07,599
same for gpos there might

00:46:04,480 --> 00:46:09,839
just be somewhere completely different

00:46:07,599 --> 00:46:09,839
um

00:46:11,200 --> 00:46:16,560
so video is the logical thing for that

00:46:14,480 --> 00:46:17,680
and then you can also have it in user

00:46:16,560 --> 00:46:20,160
space have the

00:46:17,680 --> 00:46:20,960
the host side running as a separate

00:46:20,160 --> 00:46:23,119
process and

00:46:20,960 --> 00:46:24,960
not implement it as part of qmu but qm

00:46:23,119 --> 00:46:29,040
we could just route the verteor channel

00:46:24,960 --> 00:46:30,800
into user space actually remember having

00:46:29,040 --> 00:46:33,200
that discussion with alistair from

00:46:30,800 --> 00:46:34,960
uh google because they have this uh you

00:46:33,200 --> 00:46:35,920
know android emulator thing that they

00:46:34,960 --> 00:46:39,280
want to run

00:46:35,920 --> 00:46:41,119
and they have like verteio for gpu and

00:46:39,280 --> 00:46:43,200
pci and whatnot like that they have on

00:46:41,119 --> 00:46:46,240
the phone and uh

00:46:43,200 --> 00:46:48,560
um i asked him do or do you have some

00:46:46,240 --> 00:46:52,400
plan for something you want to use and

00:46:48,560 --> 00:46:55,760
i involved them in review of garth's

00:46:52,400 --> 00:46:57,440
series and their stunts from from

00:46:55,760 --> 00:46:59,119
from google android's point of view seem

00:46:57,440 --> 00:47:02,400
to be pretty much like we don't know

00:46:59,119 --> 00:47:04,800
what do you guys think so that's their

00:47:02,400 --> 00:47:06,960
point of view we've if we want to drive

00:47:04,800 --> 00:47:08,160
if people to watch virtao we can

00:47:06,960 --> 00:47:12,160
probably do that

00:47:08,160 --> 00:47:13,920
but um not that google android for sure

00:47:12,160 --> 00:47:14,640
they just like use whatever we want them

00:47:13,920 --> 00:47:16,319
to use

00:47:14,640 --> 00:47:20,000
most android phones don't have external

00:47:16,319 --> 00:47:23,599
gpo lines that you might want to control

00:47:20,000 --> 00:47:23,599
mostly not some do

00:47:23,680 --> 00:47:28,880
they may have internal lines we want to

00:47:25,839 --> 00:47:28,880
control yes

00:47:32,480 --> 00:47:35,520
they are using it in the emulator to

00:47:34,480 --> 00:47:37,280
like test out

00:47:35,520 --> 00:47:41,359
like a mobile phone mock-up so they have

00:47:37,280 --> 00:47:44,000
like a piece of hardware that is like

00:47:41,359 --> 00:47:46,640
somewhat in reminiscence of the phone

00:47:44,000 --> 00:47:48,800
that they want to use in the end or like

00:47:46,640 --> 00:47:50,240
something in the use case direction of

00:47:48,800 --> 00:47:50,960
something they want to use and that has

00:47:50,240 --> 00:47:53,359
a bunch of

00:47:50,960 --> 00:47:54,720
gpios on this like hardware mockup well

00:47:53,359 --> 00:47:56,240
the thing that could actually happen is

00:47:54,720 --> 00:47:58,800
that we would see

00:47:56,240 --> 00:47:59,920
um a verteo based gpio open control

00:47:58,800 --> 00:48:02,960
driver

00:47:59,920 --> 00:48:04,480
that controls like that is

00:48:02,960 --> 00:48:06,000
just generic to a lot of different

00:48:04,480 --> 00:48:09,440
phones and then you have

00:48:06,000 --> 00:48:11,760
the host side of that implemented

00:48:09,440 --> 00:48:12,559
either in a hypervisor or in secure

00:48:11,760 --> 00:48:14,640
world

00:48:12,559 --> 00:48:16,160
running in a separate context and

00:48:14,640 --> 00:48:18,400
actually talking to the hardware

00:48:16,160 --> 00:48:19,680
so that you don't have to write a new

00:48:18,400 --> 00:48:22,960
driver for every single

00:48:19,680 --> 00:48:24,640
soc that comes up but just

00:48:22,960 --> 00:48:26,079
have the abstraction at a different

00:48:24,640 --> 00:48:30,319
layer i think

00:48:26,079 --> 00:48:30,319
there's a desire to have that

00:48:30,960 --> 00:48:34,079
even though it has a lot of

00:48:32,240 --> 00:48:36,960
disadvantages too i

00:48:34,079 --> 00:48:37,520
i agree yeah it's just like i kind of

00:48:36,960 --> 00:48:39,839
nudged

00:48:37,520 --> 00:48:40,559
google to go and do that just implement

00:48:39,839 --> 00:48:49,839
it please

00:48:40,559 --> 00:48:49,839
but well they didn't wanna so

00:48:58,400 --> 00:49:06,000
awesome anyone else 70 yeah

00:49:02,880 --> 00:49:06,000
exhausted discussion

00:49:08,319 --> 00:49:11,680
anyone else have any uh final thoughts

00:49:10,960 --> 00:49:14,079
or

00:49:11,680 --> 00:49:14,079
questions

00:49:15,119 --> 00:49:21,839
if if not we can uh we can wrap up this

00:49:18,400 --> 00:49:24,559
uh extra extra serving of uh gpio

00:49:21,839 --> 00:49:24,559
pin control

00:49:26,640 --> 00:49:32,160
thanks guys nice talking to you yeah

00:49:29,680 --> 00:49:33,760
thank thank you all um i did apparently

00:49:32,160 --> 00:49:36,319
have the slides link

00:49:33,760 --> 00:49:37,680
not public so it should be fixed now so

00:49:36,319 --> 00:49:38,800
if anyone that wants to you can click on

00:49:37,680 --> 00:49:40,720
the slides link

00:49:38,800 --> 00:49:42,400
in slack there and i'll add them to this

00:49:40,720 --> 00:49:43,920
guide page as well

00:49:42,400 --> 00:49:46,160
but uh thank you for everyone for

00:49:43,920 --> 00:49:50,640
joining and chatting and

00:49:46,160 --> 00:49:50,640

YouTube URL: https://www.youtube.com/watch?v=kon9IidLD_4


