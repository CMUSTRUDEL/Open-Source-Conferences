Title: LVC20 209 96Boards OSS GPU Drivers Show & Tell
Publication date: 2020-10-08
Playlist: Linaro Virtual Connect 2020
Description: 
	96Boards keeps OSS first and we love OSS GPU Drivers. This will be a show and tell session about all the 96Boards development boards that are capable and run OSS GPU drivers.
The session will introduce the GNU/Linux graphics stack and the concept of Reverse Engineered GPU Drivers. Followed by a lot of Demos or pre-recorded videos of devices running benchmarks.

https://connect.linaro.org/resources/lvc20/lvc20-209/
Captions: 
	00:00:00,080 --> 00:00:05,440
but hello everyone um this is

00:00:03,360 --> 00:00:08,080
uh i work as an application engineer

00:00:05,440 --> 00:00:10,960
with the 96 sports team at lenaro

00:00:08,080 --> 00:00:12,880
um and past year or two have been very

00:00:10,960 --> 00:00:14,400
exciting for open source gpu drivers

00:00:12,880 --> 00:00:17,039
especially in the arm space

00:00:14,400 --> 00:00:17,520
and they have really opened up like a

00:00:17,039 --> 00:00:20,880
door

00:00:17,520 --> 00:00:24,320
to a lot of possibilities with dev boats

00:00:20,880 --> 00:00:25,039
and like a lot of wow not sure what

00:00:24,320 --> 00:00:28,800
happened there

00:00:25,039 --> 00:00:31,920
but a lot of um old dev boats have

00:00:28,800 --> 00:00:34,000
sort of come back to life um because now

00:00:31,920 --> 00:00:38,960
their gpus can be utilized as well

00:00:34,000 --> 00:00:41,840
or in a useful manner so um

00:00:38,960 --> 00:00:43,040
last linear tech days i kind of missed

00:00:41,840 --> 00:00:45,200
the

00:00:43,040 --> 00:00:46,640
spirit of demo friday so today's session

00:00:45,200 --> 00:00:48,800
is more of a demo

00:00:46,640 --> 00:00:50,239
of different boards running these open

00:00:48,800 --> 00:00:53,520
source drivers

00:00:50,239 --> 00:00:55,760
rather than an in-depth um detailed talk

00:00:53,520 --> 00:00:57,039
about what the drivers actually do there

00:00:55,760 --> 00:00:59,520
are people who are far more

00:00:57,039 --> 00:01:00,879
knowledgeable than me in this regard and

00:00:59,520 --> 00:01:03,760
they have talks on

00:01:00,879 --> 00:01:04,159
uh xoc developer conference from this

00:01:03,760 --> 00:01:07,280
year

00:01:04,159 --> 00:01:08,799
earlier earlier in the year and

00:01:07,280 --> 00:01:11,360
that is a really good source if you want

00:01:08,799 --> 00:01:14,720
to get into the nitty-gritty working of

00:01:11,360 --> 00:01:15,600
mesa and the linux display stack in

00:01:14,720 --> 00:01:19,119
general

00:01:15,600 --> 00:01:23,119
i'll go through a bit of that

00:01:19,119 --> 00:01:24,720
stuff but um not a whole lot i'll be

00:01:23,119 --> 00:01:26,799
focusing more on the demos

00:01:24,720 --> 00:01:27,920
because of some cool tricks to show you

00:01:26,799 --> 00:01:30,799
guys so

00:01:27,920 --> 00:01:33,360
um getting started with that this is the

00:01:30,799 --> 00:01:36,320
linux display and graphics subsystem

00:01:33,360 --> 00:01:37,040
um kind of complicated but you know it's

00:01:36,320 --> 00:01:40,640
all

00:01:37,040 --> 00:01:43,680
um pretty easy to grasp when you

00:01:40,640 --> 00:01:46,880
uh take a look at this flowchart

00:01:43,680 --> 00:01:49,920
um for a while uh

00:01:46,880 --> 00:01:50,720
so the main thing we're going to focus

00:01:49,920 --> 00:01:53,920
is

00:01:50,720 --> 00:01:54,880
on messer today and there are some

00:01:53,920 --> 00:01:58,079
kernel bits that

00:01:54,880 --> 00:02:00,799
are there and are required but mostly

00:01:58,079 --> 00:02:02,719
the magic happens within mesa uh there's

00:02:00,799 --> 00:02:05,920
the drm driver which

00:02:02,719 --> 00:02:07,520
is the kernel part that communicates

00:02:05,920 --> 00:02:08,800
with the user space message driver and

00:02:07,520 --> 00:02:12,160
then

00:02:08,800 --> 00:02:13,040
the kernel itself uh the one thing wrong

00:02:12,160 --> 00:02:15,599
here with this

00:02:13,040 --> 00:02:17,520
flowchart i won't actually say wrong but

00:02:15,599 --> 00:02:19,599
you know could have been added is that

00:02:17,520 --> 00:02:20,879
usually there are two drm drivers

00:02:19,599 --> 00:02:23,879
working together

00:02:20,879 --> 00:02:25,840
because it take an example for the

00:02:23,879 --> 00:02:28,480
rk3399 where

00:02:25,840 --> 00:02:30,400
the actual uh display subsystem is

00:02:28,480 --> 00:02:32,239
provided by rockchip so you have the

00:02:30,400 --> 00:02:34,800
rockchip drm

00:02:32,239 --> 00:02:35,760
driver for the display subsystem and the

00:02:34,800 --> 00:02:38,480
gpu

00:02:35,760 --> 00:02:40,400
is provided by our malip and that's

00:02:38,480 --> 00:02:41,120
provided by the pan frost drive in our

00:02:40,400 --> 00:02:44,480
open source

00:02:41,120 --> 00:02:46,879
situation here um and similarly with a

00:02:44,480 --> 00:02:50,720
lot more like all winner has their own

00:02:46,879 --> 00:02:53,840
display drm and then um

00:02:50,720 --> 00:02:58,159
some of them like imx uh

00:02:53,840 --> 00:03:01,440
am logic stm all use the dw

00:02:58,159 --> 00:03:02,800
or designed by uh display subsystem ip

00:03:01,440 --> 00:03:04,959
but they still have their own like

00:03:02,800 --> 00:03:05,840
driver so you'll have miss and dew

00:03:04,959 --> 00:03:08,400
driver

00:03:05,840 --> 00:03:10,239
uh stm has their it's on the on own dr

00:03:08,400 --> 00:03:13,360
en driver and so on so forth

00:03:10,239 --> 00:03:14,640
so apart from that yes uh mesa is sort

00:03:13,360 --> 00:03:17,920
of

00:03:14,640 --> 00:03:20,800
the thing that magically translates egl

00:03:17,920 --> 00:03:23,840
and opengl and vulcan and opencl calls

00:03:20,800 --> 00:03:26,879
on to and and run that on

00:03:23,840 --> 00:03:26,879
your gpus

00:03:27,440 --> 00:03:30,480
this is the sort of messy clockwork

00:03:29,760 --> 00:03:33,920
magic of

00:03:30,480 --> 00:03:37,360
mesa now this is not the entire mesa

00:03:33,920 --> 00:03:39,120
project concise in a few in a small

00:03:37,360 --> 00:03:43,120
flowchart now this is just the

00:03:39,120 --> 00:03:43,120
compiler stack and

00:03:43,360 --> 00:03:48,400
basically nir is where all the magic

00:03:46,239 --> 00:03:49,200
happens it's been standardized a lot

00:03:48,400 --> 00:03:52,879
more

00:03:49,200 --> 00:03:56,799
uh nir is this magical layer which

00:03:52,879 --> 00:04:01,680
converts your um all the

00:03:56,799 --> 00:04:04,640
shader stuff uh into

00:04:01,680 --> 00:04:05,760
the uh sort of the intermediate level

00:04:04,640 --> 00:04:09,200
and then uh

00:04:05,760 --> 00:04:09,840
it spits out whatever you're using uh so

00:04:09,200 --> 00:04:12,720
in term of

00:04:09,840 --> 00:04:13,439
band frost band force driver relies on

00:04:12,720 --> 00:04:16,880
an ir

00:04:13,439 --> 00:04:17,759
and then um if so the street you know

00:04:16,880 --> 00:04:20,799
sort of zinc

00:04:17,759 --> 00:04:21,840
uh tgsi is sort of the depreciated

00:04:20,799 --> 00:04:25,280
version there are some

00:04:21,840 --> 00:04:28,800
old drivers some really old nvidia stuff

00:04:25,280 --> 00:04:30,720
it never still uses tgsi

00:04:28,800 --> 00:04:33,360
and then the llvm pipe which is the

00:04:30,720 --> 00:04:36,479
software renderer uses tgsi

00:04:33,360 --> 00:04:39,040
um llvm pipe is um

00:04:36,479 --> 00:04:42,800
another really great stuff that i like

00:04:39,040 --> 00:04:46,240
because it uses the clang back in

00:04:42,800 --> 00:04:49,280
it has the ability to

00:04:46,240 --> 00:04:52,560
be highly paralyzed so if you ever run

00:04:49,280 --> 00:04:55,440
anything on lvm pipe versus vert i o

00:04:52,560 --> 00:04:56,240
uh you can see like while running it on

00:04:55,440 --> 00:04:58,000
on

00:04:56,240 --> 00:04:59,759
it while running edge top you can see

00:04:58,000 --> 00:05:02,240
the cpu utilization

00:04:59,759 --> 00:05:03,759
uh differ quite a lot with llvm by you

00:05:02,240 --> 00:05:06,800
know utilizing as much

00:05:03,759 --> 00:05:08,720
uh cores as possible uh the other thing

00:05:06,800 --> 00:05:11,759
that llvm pipe or

00:05:08,720 --> 00:05:14,320
i should say llvm ir provides is

00:05:11,759 --> 00:05:15,280
opencl support using again the clang

00:05:14,320 --> 00:05:18,479
back-end

00:05:15,280 --> 00:05:19,360
so uh that is used by message project

00:05:18,479 --> 00:05:22,840
clover

00:05:19,360 --> 00:05:26,560
uh and uh all the am llvm pipe

00:05:22,840 --> 00:05:30,080
um and the radeon uh

00:05:26,560 --> 00:05:33,440
driver so radwee and radio and si both

00:05:30,080 --> 00:05:36,880
use the lnvm ir um

00:05:33,440 --> 00:05:40,720
as the back end and so uh the radeon

00:05:36,880 --> 00:05:43,440
graphic cards and if you're using lvm

00:05:40,720 --> 00:05:43,919
pipe you can actually run opencl on nesa

00:05:43,440 --> 00:05:46,479
uh

00:05:43,919 --> 00:05:46,960
as far as i know there's some work going

00:05:46,479 --> 00:05:50,880
on

00:05:46,960 --> 00:05:55,600
to get uh opencl over spur

00:05:50,880 --> 00:05:58,000
v um running and at that point you

00:05:55,600 --> 00:05:59,680
will not need lvm ir to get your

00:05:58,000 --> 00:06:02,479
concealed stuff running

00:05:59,680 --> 00:06:04,560
um but yeah so that's sort of the

00:06:02,479 --> 00:06:08,240
overview again more details is

00:06:04,560 --> 00:06:10,479
like on x or devcon and i'll

00:06:08,240 --> 00:06:11,440
recommend everyone go there so off to

00:06:10,479 --> 00:06:14,880
the good parts

00:06:11,440 --> 00:06:19,280
which are the actual demos

00:06:14,880 --> 00:06:22,240
um first one is at navif

00:06:19,280 --> 00:06:24,319
now 96 boats has a few boats we have the

00:06:22,240 --> 00:06:28,160
imx 8

00:06:24,319 --> 00:06:32,479
based ai ml boards

00:06:28,160 --> 00:06:35,600
and we have the thor 96 again imx8 based

00:06:32,479 --> 00:06:39,039
but both of them have i think not

00:06:35,600 --> 00:06:42,160
i don't have the hdmi stuff upstream yet

00:06:39,039 --> 00:06:44,800
um also stm32mp1

00:06:42,160 --> 00:06:46,960
is a much recent stock and after a long

00:06:44,800 --> 00:06:50,479
time i've seen someone other than imx

00:06:46,960 --> 00:06:54,560
utilize the vivante gpu drivers

00:06:50,479 --> 00:06:55,840
um so this one uses the vivante gc400

00:06:54,560 --> 00:06:59,680
which is like

00:06:55,840 --> 00:07:04,240
their super low cost um

00:06:59,680 --> 00:07:08,160
solution uh which is like they they have

00:07:04,240 --> 00:07:09,599
uh like less than one millimeter square

00:07:08,160 --> 00:07:10,960
silicon area and

00:07:09,599 --> 00:07:13,599
stuff like that so it supports very

00:07:10,960 --> 00:07:16,080
basic uh opengl es calls

00:07:13,599 --> 00:07:19,039
um and you know extremely cheap to

00:07:16,080 --> 00:07:22,000
implement and it's a low power solution

00:07:19,039 --> 00:07:22,479
so let's actually switch i'll need to

00:07:22,000 --> 00:07:25,759
stop

00:07:22,479 --> 00:07:31,120
share and switch

00:07:25,759 --> 00:07:34,960
over to

00:07:31,120 --> 00:07:39,840
my webcam um i'm not sure if i'm being

00:07:34,960 --> 00:07:43,199
pinned but i think this is

00:07:39,840 --> 00:07:46,720
is my webcam being pinned or

00:07:43,199 --> 00:07:47,759
i can't see um i can still see the your

00:07:46,720 --> 00:07:50,879
black screen

00:07:47,759 --> 00:07:53,840
with the code on it right

00:07:50,879 --> 00:07:54,720
so i guess everyone can see that then uh

00:07:53,840 --> 00:07:57,840
which is

00:07:54,720 --> 00:08:00,400
right so um i don't have

00:07:57,840 --> 00:08:01,120
an xor base or like a gui based demo

00:08:00,400 --> 00:08:04,000
here

00:08:01,120 --> 00:08:05,680
uh i just didn't have time this is a

00:08:04,000 --> 00:08:08,080
basic build root build but you can see

00:08:05,680 --> 00:08:08,080
it's a

00:08:08,160 --> 00:08:13,680
dual core cortex a7 solution this is the

00:08:11,360 --> 00:08:17,840
stm32 mp1 as i mentioned

00:08:13,680 --> 00:08:18,479
with the gc400 um running the latest

00:08:17,840 --> 00:08:22,800
mainline

00:08:18,479 --> 00:08:27,599
stuff 5.8.7 i just built it recently

00:08:22,800 --> 00:08:30,479
and i can run a kms cube on it

00:08:27,599 --> 00:08:31,120
runs on the open source driver just fine

00:08:30,479 --> 00:08:34,159
and

00:08:31,120 --> 00:08:37,279
again if i

00:08:34,159 --> 00:08:37,279
back out in a second

00:08:38,320 --> 00:08:46,560
you can clearly shows opengl es2 dot x

00:08:42,560 --> 00:08:47,920
um on at neve and vivante gc 400

00:08:46,560 --> 00:08:49,600
but if you see at the frame rates

00:08:47,920 --> 00:08:51,920
they're not

00:08:49,600 --> 00:08:53,600
very exciting but like that's what the

00:08:51,920 --> 00:08:55,519
performance of

00:08:53,600 --> 00:08:58,240
this gpu it's it's basically made for

00:08:55,519 --> 00:09:01,680
basic um

00:08:58,240 --> 00:09:03,440
i'm guessing qt based gl stuff uh that

00:09:01,680 --> 00:09:06,480
runs on embedded processor so

00:09:03,440 --> 00:09:09,839
like even the basic kms cube

00:09:06,480 --> 00:09:12,399
only runs at uh 60 fps um

00:09:09,839 --> 00:09:14,160
and i'm pretty sure that's not a refresh

00:09:12,399 --> 00:09:18,000
rate limitation here

00:09:14,160 --> 00:09:20,640
uh because of uh it also shows 70 fps

00:09:18,000 --> 00:09:22,399
on certain other um when it's like

00:09:20,640 --> 00:09:25,519
properly cooled and stuff

00:09:22,399 --> 00:09:30,000
so it's not a uh

00:09:25,519 --> 00:09:33,360
a limitation of the motor refresh rate

00:09:30,000 --> 00:09:36,000
um but yeah that's that's for the nevis

00:09:33,360 --> 00:09:37,839
stuff that's the only one i have at hand

00:09:36,000 --> 00:09:41,680
right now

00:09:37,839 --> 00:09:45,519
so we'll move on to our

00:09:41,680 --> 00:09:45,519
next demo this was a short one

00:09:46,399 --> 00:09:51,920
next up we have pan frost um before i go

00:09:49,920 --> 00:09:54,959
further i mean congratulations

00:09:51,920 --> 00:09:57,279
pan frost people uh like

00:09:54,959 --> 00:09:58,399
basically i'm i'm giving you all the

00:09:57,279 --> 00:10:01,760
support they have

00:09:58,399 --> 00:10:04,240
and uh this is actually amazing amazing

00:10:01,760 --> 00:10:07,600
news that arm is now backing the project

00:10:04,240 --> 00:10:10,480
uh in any way uh they like i hope

00:10:07,600 --> 00:10:12,720
that this support leads to arm actually

00:10:10,480 --> 00:10:13,360
releasing pan frost based drivers for

00:10:12,720 --> 00:10:16,160
their

00:10:13,360 --> 00:10:18,320
uh upcoming gpus out of the box rather

00:10:16,160 --> 00:10:20,640
than the binary blobs they have

00:10:18,320 --> 00:10:22,560
um you know it's it's a pipe dream but

00:10:20,640 --> 00:10:24,399
anything's possible at this point

00:10:22,560 --> 00:10:26,000
but you know just arm coming out and

00:10:24,399 --> 00:10:29,360
openly supporting the project

00:10:26,000 --> 00:10:32,079
is amazing news uh so

00:10:29,360 --> 00:10:33,040
yeah that like really shows the power of

00:10:32,079 --> 00:10:34,850
open source

00:10:33,040 --> 00:10:36,079
um but yeah pan trust um

00:10:34,850 --> 00:10:38,480
[Music]

00:10:36,079 --> 00:10:40,079
provides the open source driver again

00:10:38,480 --> 00:10:40,720
reverse engineered initially i'm not

00:10:40,079 --> 00:10:42,959
sure

00:10:40,720 --> 00:10:44,480
how they go forward now that arm is

00:10:42,959 --> 00:10:47,680
being involved

00:10:44,480 --> 00:10:50,720
um and provides uh support for

00:10:47,680 --> 00:10:54,640
midgard and bifrost gpus um today

00:10:50,720 --> 00:10:58,560
i'll be showing it on the um rock 960

00:10:54,640 --> 00:11:02,000
uh running the rk3399 with the

00:10:58,560 --> 00:11:05,839
mali t860 mp4 gpu so kind of a

00:11:02,000 --> 00:11:09,040
mid-range deal with opengl es

00:11:05,839 --> 00:11:09,519
1.12 and 3 and we'll be demonstrating

00:11:09,040 --> 00:11:12,959
the

00:11:09,519 --> 00:11:16,480
gl3 as well i

00:11:12,959 --> 00:11:16,480
so again with uh

00:11:16,560 --> 00:11:23,920
with pan frost they have done work

00:11:19,680 --> 00:11:24,720
on uh bifrost or the g series gpus as

00:11:23,920 --> 00:11:27,440
well

00:11:24,720 --> 00:11:28,000
um okay we have a couple more boats and

00:11:27,440 --> 00:11:31,519
this is where

00:11:28,000 --> 00:11:32,160
the interesting drm bit comes in uh like

00:11:31,519 --> 00:11:35,760
we have

00:11:32,160 --> 00:11:37,839
high key 916 high key 970 both running

00:11:35,760 --> 00:11:39,040
by frost gpus which would have been a

00:11:37,839 --> 00:11:42,240
great candidate

00:11:39,040 --> 00:11:43,760
but now remember the second drm bit that

00:11:42,240 --> 00:11:45,360
i talked about which is the display

00:11:43,760 --> 00:11:48,079
engine on the sock

00:11:45,360 --> 00:11:48,880
um so that's not upstream for those

00:11:48,079 --> 00:11:52,880
boards

00:11:48,880 --> 00:11:54,079
so that means even if we have the wi-fi

00:11:52,880 --> 00:11:56,880
gpu running

00:11:54,079 --> 00:11:57,279
it runs in an off-screen mode because

00:11:56,880 --> 00:11:59,200
like

00:11:57,279 --> 00:12:00,560
this can't display anything because that

00:11:59,200 --> 00:12:05,120
drm bit is not

00:12:00,560 --> 00:12:08,720
enabled in upstream kernel as long as um

00:12:05,120 --> 00:12:11,760
as i recall uh the high key has

00:12:08,720 --> 00:12:15,279
drm enabled for sorry

00:12:11,760 --> 00:12:18,000
high silicon has drm enabled for uh

00:12:15,279 --> 00:12:19,440
high six six two zero which is in the

00:12:18,000 --> 00:12:23,600
original high key

00:12:19,440 --> 00:12:25,760
uh but the ip changed

00:12:23,600 --> 00:12:28,240
when they shifted to the new platform so

00:12:25,760 --> 00:12:31,040
960 and 970 of the same

00:12:28,240 --> 00:12:31,600
uh display engine drm ip uh from high

00:12:31,040 --> 00:12:34,880
silicon

00:12:31,600 --> 00:12:36,399
and that's not upstream um so i have the

00:12:34,880 --> 00:12:39,360
rock 960 and

00:12:36,399 --> 00:12:40,320
let's get to the demo of running cool

00:12:39,360 --> 00:12:42,160
stuff with it

00:12:40,320 --> 00:12:44,959
the other thing is that this board is

00:12:42,160 --> 00:12:49,440
kind of um

00:12:44,959 --> 00:12:52,800
touchy when it comes to switching hdmi

00:12:49,440 --> 00:12:56,079
so i will have to plug

00:12:52,800 --> 00:12:56,079
and then power on the board

00:12:57,120 --> 00:13:03,600
this board is running

00:13:00,320 --> 00:13:06,240
fedora 33 and since

00:13:03,600 --> 00:13:07,040
the u-boot is pretty much well

00:13:06,240 --> 00:13:09,600
upstreamed

00:13:07,040 --> 00:13:11,200
i'll stop screen sharing so you can see

00:13:09,600 --> 00:13:13,600
you boot boot

00:13:11,200 --> 00:13:15,680
um yeah like the ubud graphics work as

00:13:13,600 --> 00:13:18,320
well so display output works as well

00:13:15,680 --> 00:13:20,800
and everything so this is mostly ebbr

00:13:18,320 --> 00:13:24,160
compliant from what i recall

00:13:20,800 --> 00:13:26,320
and have been off on and off working

00:13:24,160 --> 00:13:27,040
with peter peter robinson to test this

00:13:26,320 --> 00:13:28,639
board and

00:13:27,040 --> 00:13:30,320
make sure that it's well supported in

00:13:28,639 --> 00:13:34,639
fedora um

00:13:30,320 --> 00:13:36,959
so hopefully yeah so it's it's running

00:13:34,639 --> 00:13:38,320
up or up everything upstream like your

00:13:36,959 --> 00:13:42,079
boots upstream and then

00:13:38,320 --> 00:13:44,639
uh proper distro

00:13:42,079 --> 00:13:46,639
so just waiting for it takes a few

00:13:44,639 --> 00:13:47,680
seconds and i was afraid this was going

00:13:46,639 --> 00:13:50,800
to happen

00:13:47,680 --> 00:13:54,959
i'm not sure why the hdmi

00:13:50,800 --> 00:14:03,839
is so finicky on this board but

00:13:54,959 --> 00:14:03,839
yeah gnome should show up any second now

00:14:04,240 --> 00:14:07,440
um there's pointer

00:14:08,959 --> 00:14:17,839
and there we have it login um

00:14:19,680 --> 00:14:26,000
right so as you can see wait for it too

00:14:28,839 --> 00:14:31,839
soon

00:14:37,839 --> 00:14:43,760
yes running stuff from sd card is not

00:14:39,760 --> 00:14:46,079
the fastest way to do things

00:14:43,760 --> 00:14:47,199
when your bootloader is on the emmc what

00:14:46,079 --> 00:14:50,480
 you have

00:14:47,199 --> 00:14:52,480
so there you go um boots into

00:14:50,480 --> 00:14:54,160
gnome just fine and norm is working fine

00:14:52,480 --> 00:14:57,199
as well

00:14:54,160 --> 00:15:00,160
but that's what the

00:14:57,199 --> 00:15:00,560
stuff we are looking for what we really

00:15:00,160 --> 00:15:03,680
want

00:15:00,560 --> 00:15:05,920
is some gl mark two runs now of course

00:15:03,680 --> 00:15:07,760
i won't be going through the entire like

00:15:05,920 --> 00:15:09,519
gl mark two suite it's just going to

00:15:07,760 --> 00:15:13,199
take a lot of time but

00:15:09,519 --> 00:15:15,040
um just to prove a point here

00:15:13,199 --> 00:15:16,240
it's running pan frost on the molding

00:15:15,040 --> 00:15:19,680
gpu uh

00:15:16,240 --> 00:15:22,720
again gm mark 2 is just 2.1 so

00:15:19,680 --> 00:15:27,600
you won't see any 3.0 stuff

00:15:22,720 --> 00:15:31,920
on this demo but if i run super tux cart

00:15:27,600 --> 00:15:31,920
um oops

00:15:33,440 --> 00:15:40,560
that actually runs open gl3 actually

00:15:36,639 --> 00:15:43,519
requires open gl3 not only once open gl3

00:15:40,560 --> 00:15:44,720
and that is an actual uh demonstration

00:15:43,519 --> 00:15:50,240
of

00:15:44,720 --> 00:15:50,240
the gpu running in opengl mode so

00:15:52,320 --> 00:15:57,199
and i can go into a quick race

00:16:06,480 --> 00:16:09,680
wait for a few seconds again we are

00:16:09,040 --> 00:16:23,839
running on

00:16:09,680 --> 00:16:23,839
an sd card

00:16:26,480 --> 00:16:34,399
while this load side yeah i

00:16:30,160 --> 00:16:34,399
even should have like spi flash

00:16:34,839 --> 00:16:39,759
mandatory

00:16:36,800 --> 00:16:42,160
this is oops that's not supposed to

00:16:39,759 --> 00:16:42,160
happen

00:16:43,600 --> 00:16:48,880
all right i'm not i'm not sure why it

00:16:45,519 --> 00:16:52,480
crashed usually runs fine

00:16:48,880 --> 00:16:55,279
um but but what's uh

00:16:52,480 --> 00:16:56,720
what's a talk without stuff crashing but

00:16:55,279 --> 00:16:58,959
you know i've i've

00:16:56,720 --> 00:17:01,440
run this so i can actually run another

00:16:58,959 --> 00:17:03,839
demo that might work

00:17:01,440 --> 00:17:06,240
better this one's called mind test it's

00:17:03,839 --> 00:17:07,600
a minecraft clone but it's like a really

00:17:06,240 --> 00:17:11,439
good clone

00:17:07,600 --> 00:17:14,319
um it basically supports

00:17:11,439 --> 00:17:15,839
octopus like i've run it on opengl too

00:17:14,319 --> 00:17:19,280
as well

00:17:15,839 --> 00:17:22,640
be happy with whatever it gets um

00:17:19,280 --> 00:17:26,000
so yeah it's it's a voxel based game so

00:17:22,640 --> 00:17:27,280
uh it stresses the cpu a bit um but what

00:17:26,000 --> 00:17:28,559
we are looking for that there are no

00:17:27,280 --> 00:17:31,039
rendering artifacts

00:17:28,559 --> 00:17:33,039
and it's working just fine the

00:17:31,039 --> 00:17:35,440
smoothness really depends on what

00:17:33,039 --> 00:17:38,799
environment you are in within the game

00:17:35,440 --> 00:17:42,000
and it can vary from like place to place

00:17:38,799 --> 00:17:44,880
if it has to render less blocks then uh

00:17:42,000 --> 00:17:46,720
like fps will increase quite a bit but

00:17:44,880 --> 00:17:49,039
if you're in a space where there's large

00:17:46,720 --> 00:17:49,760
open things to render then it will have

00:17:49,039 --> 00:17:51,760
issues

00:17:49,760 --> 00:17:54,559
uh but anyway i think this is good

00:17:51,760 --> 00:17:58,960
enough demo on my end for pan frost

00:17:54,559 --> 00:18:02,720
uh performs well enough um

00:17:58,960 --> 00:18:04,320
and i i like i've never run this gpu

00:18:02,720 --> 00:18:05,520
using the closed source driver so i'm

00:18:04,320 --> 00:18:08,160
not really sure

00:18:05,520 --> 00:18:09,760
um how close it is to like the actual

00:18:08,160 --> 00:18:11,520
gpu's performance

00:18:09,760 --> 00:18:14,000
but i'm i'm lacking what i'm seeing so

00:18:11,520 --> 00:18:16,720
like yeah i'm getting close to 30

00:18:14,000 --> 00:18:17,600
if the conditions is right uh which is

00:18:16,720 --> 00:18:21,919
good enough for

00:18:17,600 --> 00:18:24,160
um low to mid-range gpu so

00:18:21,919 --> 00:18:28,720
you know good on fan frost folks and

00:18:24,160 --> 00:18:31,280
i'll be keeping my eye on the bifrost

00:18:28,720 --> 00:18:33,360
development that happens

00:18:31,280 --> 00:18:34,960
because it's it's going to be nice to

00:18:33,360 --> 00:18:39,679
see or actually have

00:18:34,960 --> 00:18:42,720
another demo hopefully in person

00:18:39,679 --> 00:18:47,679
when possible next year um

00:18:42,720 --> 00:18:51,039
right back to the slides

00:18:47,679 --> 00:18:53,120
so the next bit is fridrino

00:18:51,039 --> 00:18:55,440
this is available on a bunch of our

00:18:53,120 --> 00:18:56,720
boards starting from dragon boat 14c

00:18:55,440 --> 00:18:59,840
which is the

00:18:56,720 --> 00:19:02,640
um snapdragon 14c based

00:18:59,840 --> 00:19:04,880
uh board and then uh the one that i'll

00:19:02,640 --> 00:19:08,080
be doing today is the rb3

00:19:04,880 --> 00:19:09,840
uh there's also the db 820 in between

00:19:08,080 --> 00:19:13,600
the driving board 820

00:19:09,840 --> 00:19:16,320
the rb3 is based on the snapdragon 845

00:19:13,600 --> 00:19:17,679
uh which is last year's or last

00:19:16,320 --> 00:19:21,520
generation's top-end

00:19:17,679 --> 00:19:23,919
um smartphone soc

00:19:21,520 --> 00:19:26,400
and then we now have the rb5 which i

00:19:23,919 --> 00:19:28,960
don't have in person due to

00:19:26,400 --> 00:19:30,480
you know shipping issues right now the

00:19:28,960 --> 00:19:32,480
world's not

00:19:30,480 --> 00:19:34,000
entirely sane so shipping is weird as

00:19:32,480 --> 00:19:36,320
well um

00:19:34,000 --> 00:19:38,240
yeah so rb3 i'll be demonstrating it's a

00:19:36,320 --> 00:19:40,160
really really nice sock it's a really

00:19:38,240 --> 00:19:43,360
high-end sock so

00:19:40,160 --> 00:19:45,760
yeah demo is going to be cool uh

00:19:43,360 --> 00:19:47,520
again yeah so free luna provides the msm

00:19:45,760 --> 00:19:50,720
uh drm drivers

00:19:47,520 --> 00:19:52,170
the actual free dino or the arduino

00:19:50,720 --> 00:19:53,840
drivers and

00:19:52,170 --> 00:19:57,840
[Music]

00:19:53,840 --> 00:19:59,280
the xf 86 stuff to run xorgon but again

00:19:57,840 --> 00:20:03,679
we'll be using

00:19:59,280 --> 00:20:06,080
the uh qualcomm landing team's

00:20:03,679 --> 00:20:08,240
debian district to run it which is which

00:20:06,080 --> 00:20:11,760
one's very very close to main line

00:20:08,240 --> 00:20:14,320
um with some of like uh

00:20:11,760 --> 00:20:15,200
toby merged patches or patches already

00:20:14,320 --> 00:20:17,360
applied so

00:20:15,200 --> 00:20:20,080
we're doing very close uh mainline stuff

00:20:17,360 --> 00:20:22,480
on this and this does up to opengl es

00:20:20,080 --> 00:20:23,919
3.2 i'm not entirely sure what the free

00:20:22,480 --> 00:20:24,960
adreno drivers goes up to i think it's

00:20:23,919 --> 00:20:28,240
pretty close

00:20:24,960 --> 00:20:32,080
um so again i'll switch

00:20:28,240 --> 00:20:35,120
back and i will

00:20:32,080 --> 00:20:39,200
quickly switch out to

00:20:35,120 --> 00:20:39,200
the rb3

00:20:46,840 --> 00:20:50,640
oops

00:20:48,320 --> 00:20:50,640
um

00:20:51,440 --> 00:20:59,440
and there we go so as you can see the

00:20:55,200 --> 00:21:00,559
snapdragon 845 and we are running kernel

00:20:59,440 --> 00:21:04,320
5.7

00:21:00,559 --> 00:21:06,320
very very close now now this has uh mesa

00:21:04,320 --> 00:21:07,280
master bill for a very specific reason

00:21:06,320 --> 00:21:10,559
which we'll see

00:21:07,280 --> 00:21:14,159
in our next demo but just for a quick

00:21:10,559 --> 00:21:16,640
look um i'll run super tux cart

00:21:14,159 --> 00:21:16,640
on this

00:21:21,039 --> 00:21:27,600
and this is uh running on

00:21:24,159 --> 00:21:28,400
oh did i not install super dexcom oops

00:21:27,600 --> 00:21:32,240
my bad

00:21:28,400 --> 00:21:36,000
uh you don't mind testing

00:21:32,240 --> 00:21:39,760
um and since this is running actually a

00:21:36,000 --> 00:21:43,600
pretty decent gpu

00:21:39,760 --> 00:21:46,240
one of the more high-end ones um

00:21:43,600 --> 00:21:48,000
it it gets much much more fba so you can

00:21:46,240 --> 00:21:52,000
see we have around 45

00:21:48,000 --> 00:21:54,559
to 50 fps and looks really smooth

00:21:52,000 --> 00:21:55,360
now i do want you all to sort of notice

00:21:54,559 --> 00:21:58,799
the

00:21:55,360 --> 00:22:01,919
um sort of a glitch now

00:21:58,799 --> 00:22:05,520
i have um opened up a issue uh

00:22:01,919 --> 00:22:07,600
with the freedom you know folks um

00:22:05,520 --> 00:22:09,600
and this is being looked into but i need

00:22:07,600 --> 00:22:13,360
to i need you to look into this

00:22:09,600 --> 00:22:15,440
uh transparency transparency issue

00:22:13,360 --> 00:22:18,960
a bit closer for some other reason which

00:22:15,440 --> 00:22:18,960
my next demo will clear out

00:22:19,679 --> 00:22:24,880
so we'll just exit from here

00:22:22,720 --> 00:22:27,600
i'll give you guys a quick run of gl

00:22:24,880 --> 00:22:30,799
mark 2 so that

00:22:27,600 --> 00:22:32,400
let's see you guys can see what the

00:22:30,799 --> 00:22:36,159
actual performance is so we are getting

00:22:32,400 --> 00:22:38,559
around 1700 fps on the first test

00:22:36,159 --> 00:22:40,159
which should be a ref indication to what

00:22:38,559 --> 00:22:43,919
this gpu is

00:22:40,159 --> 00:22:47,679
actually capable of um now to the much

00:22:43,919 --> 00:22:50,480
more cooler part um

00:22:47,679 --> 00:22:51,200
something called turnip and something

00:22:50,480 --> 00:22:54,400
called

00:22:51,200 --> 00:22:58,080
zinc now

00:22:54,400 --> 00:23:01,679
turn it was a project that just got

00:22:58,080 --> 00:23:04,559
like announced last year so i was at the

00:23:01,679 --> 00:23:05,840
uh bangkok leonardo connect and i've

00:23:04,559 --> 00:23:08,400
heard about it that day

00:23:05,840 --> 00:23:09,919
and the it's an open source vulcan

00:23:08,400 --> 00:23:12,240
driver for

00:23:09,919 --> 00:23:13,440
our arduino hardware so for the qualcomm

00:23:12,240 --> 00:23:16,960
gpus

00:23:13,440 --> 00:23:17,360
and when it was announced the first

00:23:16,960 --> 00:23:20,400
thing

00:23:17,360 --> 00:23:22,880
like the description was it renders a

00:23:20,400 --> 00:23:26,240
very specific vulcan triangle so it was

00:23:22,880 --> 00:23:29,440
in no way compliant it didn't run

00:23:26,240 --> 00:23:30,880
general demos but now like just one year

00:23:29,440 --> 00:23:34,159
after it's been merged

00:23:30,880 --> 00:23:34,799
into uh mesa also like just directly a

00:23:34,159 --> 00:23:37,039
part of

00:23:34,799 --> 00:23:38,400
you know driver now much better code

00:23:37,039 --> 00:23:41,760
base

00:23:38,400 --> 00:23:42,720
and runs a lot of examples really well

00:23:41,760 --> 00:23:46,080
like

00:23:42,720 --> 00:23:49,760
they say that it's not

00:23:46,080 --> 00:23:51,039
a fully compliant one but like i've put

00:23:49,760 --> 00:23:52,640
in it through its spaces

00:23:51,039 --> 00:23:54,559
of course not done the comprehensives

00:23:52,640 --> 00:23:55,520
but in terms of demos that are available

00:23:54,559 --> 00:23:57,600
for linux

00:23:55,520 --> 00:24:00,240
and that can be compiled for arms it's

00:23:57,600 --> 00:24:01,919
run them just fine

00:24:00,240 --> 00:24:04,400
and then zinc is an opengl

00:24:01,919 --> 00:24:05,679
implementation on top of vulcan so we'll

00:24:04,400 --> 00:24:08,320
look at that as well

00:24:05,679 --> 00:24:08,320
really quick

00:24:09,039 --> 00:24:15,679
and i will

00:24:12,080 --> 00:24:20,080
stop the screen share and so

00:24:15,679 --> 00:24:20,080
on on here i can run vk mark

00:24:21,760 --> 00:24:25,279
and that runs just fine so i can just go

00:24:24,559 --> 00:24:27,919
through

00:24:25,279 --> 00:24:29,679
all of the demos in vk mark and it runs

00:24:27,919 --> 00:24:30,480
fine again it shows the warning that

00:24:29,679 --> 00:24:33,679
it's not

00:24:30,480 --> 00:24:36,080
confirmed to vulcan implementation

00:24:33,679 --> 00:24:39,919
but it's still running fine so it was

00:24:36,080 --> 00:24:40,880
getting around 6771 fps on the first

00:24:39,919 --> 00:24:42,960
demo

00:24:40,880 --> 00:24:45,279
um which is kind of comparable to what

00:24:42,960 --> 00:24:48,799
the opengl stuff does

00:24:45,279 --> 00:24:52,559
um the other uh demos we have

00:24:48,799 --> 00:24:55,600
is from the from sharsha williams

00:24:52,559 --> 00:24:56,799
uh library of vulcan demos which have

00:24:55,600 --> 00:24:59,919
been there for a while

00:24:56,799 --> 00:25:00,640
and sort of one of the best sources of

00:24:59,919 --> 00:25:03,679
testing out

00:25:00,640 --> 00:25:06,720
balkan in a fun way but i'll just

00:25:03,679 --> 00:25:08,240
run one of the demos because again it's

00:25:06,720 --> 00:25:09,580
going to take a lot of time if i run

00:25:08,240 --> 00:25:11,440
every one of them

00:25:09,580 --> 00:25:13,279
[Music]

00:25:11,440 --> 00:25:15,039
but again i have tested every one of

00:25:13,279 --> 00:25:18,320
them and it runs fine

00:25:15,039 --> 00:25:19,520
so this is compute cloth this looks kind

00:25:18,320 --> 00:25:22,640
of looks cool

00:25:19,520 --> 00:25:22,640
when it's running and

00:25:24,400 --> 00:25:31,279
it's it's computing the like

00:25:27,520 --> 00:25:33,279
the actual fabric um

00:25:31,279 --> 00:25:34,559
simulation how how it should fold and

00:25:33,279 --> 00:25:38,400
everything around the

00:25:34,559 --> 00:25:42,080
sphere and yeah that

00:25:38,400 --> 00:25:43,120
just runs fine 140 41 fps which is

00:25:42,080 --> 00:25:45,520
comparable

00:25:43,120 --> 00:25:46,799
to a lot of benchmarks i've seen with

00:25:45,520 --> 00:25:51,840
this demo

00:25:46,799 --> 00:25:55,120
and um yeah

00:25:51,840 --> 00:25:59,679
vk is running fine but

00:25:55,120 --> 00:25:59,679
like the crazy part is like it's

00:26:01,039 --> 00:26:07,919
the the turnip um is good enough to run

00:26:04,720 --> 00:26:10,720
a zinc um and zinc

00:26:07,919 --> 00:26:12,080
is uh again as i said on opengl

00:26:10,720 --> 00:26:15,120
implementation

00:26:12,080 --> 00:26:15,120
over um

00:26:15,520 --> 00:26:23,200
over vulcan and that is hardware

00:26:19,520 --> 00:26:25,200
agnostic so if you have a

00:26:23,200 --> 00:26:27,360
vulcan driver enabled uh you can

00:26:25,200 --> 00:26:27,919
basically get opengl as well which sort

00:26:27,360 --> 00:26:30,640
of

00:26:27,919 --> 00:26:31,919
shortens the time for a driver

00:26:30,640 --> 00:26:33,840
developing you just have to do the

00:26:31,919 --> 00:26:34,880
vulkan stuff and you get the opengl

00:26:33,840 --> 00:26:37,520
stuff through

00:26:34,880 --> 00:26:38,000
zinc and it works fine of course there

00:26:37,520 --> 00:26:41,039
is a

00:26:38,000 --> 00:26:43,919
performance penalty now but

00:26:41,039 --> 00:26:45,360
um you know there's no there's no reason

00:26:43,919 --> 00:26:47,360
it couldn't improve in the future it's a

00:26:45,360 --> 00:26:50,240
very very young project

00:26:47,360 --> 00:26:51,520
and for the most part it's running fine

00:26:50,240 --> 00:26:54,720
now if you remember

00:26:51,520 --> 00:26:56,159
the mind test glitches that i showed you

00:26:54,720 --> 00:26:58,000
now because there's a fresh

00:26:56,159 --> 00:27:01,279
implementation of

00:26:58,000 --> 00:27:03,520
opengl again over vulcan

00:27:01,279 --> 00:27:04,320
those glitches aren't apparent anymore

00:27:03,520 --> 00:27:07,440
because they

00:27:04,320 --> 00:27:08,880
go away it's it's like so see all the

00:27:07,440 --> 00:27:11,039
transparency is back

00:27:08,880 --> 00:27:13,600
of course you have taken a massive hit

00:27:11,039 --> 00:27:15,520
in terms of fps

00:27:13,600 --> 00:27:19,440
but again this is like the same demo as

00:27:15,520 --> 00:27:22,000
before uh but again running on a sync so

00:27:19,440 --> 00:27:23,520
uh if you only spend time developing the

00:27:22,000 --> 00:27:26,640
vulcan driver really well

00:27:23,520 --> 00:27:29,440
um zinc helps you get to opengl

00:27:26,640 --> 00:27:30,240
very very quickly um you just enable

00:27:29,440 --> 00:27:33,279
that so

00:27:30,240 --> 00:27:36,320
again this is uh even

00:27:33,279 --> 00:27:40,640
more beta or alpha level stuff

00:27:36,320 --> 00:27:43,679
than turnip because you have to like

00:27:40,640 --> 00:27:48,559
specifically enable it by overriding the

00:27:43,679 --> 00:27:51,760
default messer loader and

00:27:48,559 --> 00:27:54,720
and yeah so

00:27:51,760 --> 00:27:55,919
this was sort of the array of demos i

00:27:54,720 --> 00:27:58,880
had

00:27:55,919 --> 00:28:01,840
for the short time i'm not sure if i've

00:27:58,880 --> 00:28:04,720
overrun the time but

00:28:01,840 --> 00:28:06,399
just a couple minutes yeah all right um

00:28:04,720 --> 00:28:07,919
i think i can take questions and also

00:28:06,399 --> 00:28:10,159
i'd like to thank

00:28:07,919 --> 00:28:11,039
uh all the developers of these various

00:28:10,159 --> 00:28:12,960
projects

00:28:11,039 --> 00:28:14,880
uh who have helped me along the way and

00:28:12,960 --> 00:28:17,360
i've been asking them questions on irc

00:28:14,880 --> 00:28:19,200
for the last year or so

00:28:17,360 --> 00:28:20,640
and especially daniel stones because

00:28:19,200 --> 00:28:23,679
we've just had a chat

00:28:20,640 --> 00:28:26,960
on our email about how the or

00:28:23,679 --> 00:28:30,720
how all the internal messa nir stuff

00:28:26,960 --> 00:28:33,840
works so thank you for that um

00:28:30,720 --> 00:28:37,039
yeah i i hope uh like

00:28:33,840 --> 00:28:39,279
these developments go forward um

00:28:37,039 --> 00:28:40,960
because open source gpu drivers just

00:28:39,279 --> 00:28:44,320
makes life easier

00:28:40,960 --> 00:28:46,880
to bring arm to

00:28:44,320 --> 00:28:46,880
desktop

00:28:48,720 --> 00:28:55,120

YouTube URL: https://www.youtube.com/watch?v=Bx4skU2MCDI


