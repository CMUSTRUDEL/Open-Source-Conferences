Title: LVC21-305 OP TEE as a Secure Partition running on SPM using ARMv8 4 A SEL2 feature
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	The ARMv8.4â€‘A architecture introduces the Secure EL2 extension (FEAT_SEL2) that provides virtualisation in the Secure world. This feature when used by the Secure Partition Manager (SPM) at SEL2 provides isolation of firmware components from multiple vendors like silicon, OEM, Trusted OS vendors.

This session will cover the use-case of running OP-TEE as a Secure Partition (SP) in a virtualised environment created by the Secure Partition Manager (SPM) in a platform with SEL2 support. We will cover the Firmware Framework for Arm A-profile processors (FF-A), a standardised communication interface between various components in the secure world and normal world. A brief overview of communication flow between OP-TEE driver, EL3 SPM Dispatcher (SPMD), SEL2 SPM Core (SPMC) and the OPTEE-OS. We will finally cover the current status of work and future plans.
Captions: 
	00:00:01,199 --> 00:00:04,240
welcome everyone to this session in this

00:00:02,720 --> 00:00:05,040
session we will talk about virtualizing

00:00:04,240 --> 00:00:07,040
opti with

00:00:05,040 --> 00:00:08,240
uh secure partition manager that is

00:00:07,040 --> 00:00:11,040
happening running at

00:00:08,240 --> 00:00:12,799
uh security l2 uh let me introduce

00:00:11,040 --> 00:00:15,120
myself my name is arnold schwarz working

00:00:12,799 --> 00:00:16,880
in open source after group a town

00:00:15,120 --> 00:00:20,560
this will be a joint presentation with

00:00:16,880 --> 00:00:22,480
me i have inspectlander from lenaro

00:00:20,560 --> 00:00:24,240
today we will cover about what a clt

00:00:22,480 --> 00:00:27,279
feature is and the software

00:00:24,240 --> 00:00:30,320
that it runs on is cl2 and a bit about

00:00:27,279 --> 00:00:33,680
arm fa and let

00:00:30,320 --> 00:00:35,680
then we'll uh talk more about the opti

00:00:33,680 --> 00:00:37,280
driver changes in in the linux kernel as

00:00:35,680 --> 00:00:40,000
well as the opti os

00:00:37,280 --> 00:00:42,239
changes in the secure world to make it

00:00:40,000 --> 00:00:45,840
ffa aware and as well as to add a cl to

00:00:42,239 --> 00:00:45,840
speech support

00:00:46,239 --> 00:00:51,840
so restoration in secure world arm 8.4

00:00:49,600 --> 00:00:52,800
or architecture introduce a new

00:00:51,840 --> 00:00:55,600
exception level

00:00:52,800 --> 00:00:57,520
in in the secure world called sel2 this

00:00:55,600 --> 00:00:58,559
is similar to the el2 exception level in

00:00:57,520 --> 00:01:02,320
the normal world

00:00:58,559 --> 00:01:04,720
how el 2 exception level uh provides

00:01:02,320 --> 00:01:05,600
uh capability to run multiple virtual

00:01:04,720 --> 00:01:07,040
machines

00:01:05,600 --> 00:01:09,439
on top of hypervisor similar

00:01:07,040 --> 00:01:12,560
functionality is provided in

00:01:09,439 --> 00:01:14,479
the secure world whereas the multiple

00:01:12,560 --> 00:01:16,720
secure partition can be isolated from

00:01:14,479 --> 00:01:17,920
from each other by using a hypervisor

00:01:16,720 --> 00:01:20,799
like functionality

00:01:17,920 --> 00:01:21,680
in a cl2 exception level the isolation

00:01:20,799 --> 00:01:25,360
is achieved by

00:01:21,680 --> 00:01:28,240
uh two level table translation uh by

00:01:25,360 --> 00:01:29,600
va to ipa and then ipa to physical

00:01:28,240 --> 00:01:33,040
address translation

00:01:29,600 --> 00:01:35,040
and the software that uh the software

00:01:33,040 --> 00:01:37,439
runs on scl2 is hafnium

00:01:35,040 --> 00:01:38,799
hypervisor initial implementation of

00:01:37,439 --> 00:01:41,759
aptm was

00:01:38,799 --> 00:01:42,720
was was only on normal work arm has

00:01:41,759 --> 00:01:44,960
added support to

00:01:42,720 --> 00:01:46,320
run hypno in the in the secure worlds

00:01:44,960 --> 00:01:50,159
and also added

00:01:46,320 --> 00:01:50,159
ffa adoption to hackney

00:01:50,240 --> 00:01:55,759
talk about what uh what ffa is support

00:01:53,680 --> 00:01:57,200
it's uh it stands for firmware framework

00:01:55,759 --> 00:01:59,920
for apa profile

00:01:57,200 --> 00:02:01,759
this is a uh this is a specification

00:01:59,920 --> 00:02:02,399
developed by am and contribution from

00:02:01,759 --> 00:02:04,159
google

00:02:02,399 --> 00:02:07,520
silicon vendor and as well as multiple

00:02:04,159 --> 00:02:07,520
trusted os vendors

00:02:07,680 --> 00:02:10,800
the specification standard is the

00:02:09,200 --> 00:02:14,160
communication interface between

00:02:10,800 --> 00:02:15,920
um between the endpoints mainly the uh

00:02:14,160 --> 00:02:18,080
the communication happens from the

00:02:15,920 --> 00:02:20,080
normal world to the to the secure world

00:02:18,080 --> 00:02:22,480
uh that communication has been

00:02:20,080 --> 00:02:25,920
standardized by these specifications

00:02:22,480 --> 00:02:30,080
and it also leverages the scl2 of

00:02:25,920 --> 00:02:32,560
the hardware features like acl2 and smu

00:02:30,080 --> 00:02:33,200
stage two translation uh feature in some

00:02:32,560 --> 00:02:36,080
new unders

00:02:33,200 --> 00:02:36,959
as well as the virtual gig the main

00:02:36,080 --> 00:02:39,840
terminologies

00:02:36,959 --> 00:02:41,200
uh that firmware framework introduces is

00:02:39,840 --> 00:02:42,560
about the spm

00:02:41,200 --> 00:02:44,800
which stands for secure partition

00:02:42,560 --> 00:02:47,440
manager the secure parameter manager is

00:02:44,800 --> 00:02:49,519
uh is composed of two components one is

00:02:47,440 --> 00:02:51,920
the secure partition manager dispatcher

00:02:49,519 --> 00:02:53,440
and the secure partition manager code

00:02:51,920 --> 00:02:55,440
the secure purchaser partition manager

00:02:53,440 --> 00:02:58,159
dispatcher responsibility will be to

00:02:55,440 --> 00:02:59,599
forward the calls that that comes from

00:02:58,159 --> 00:03:03,040
the vulnerable to the

00:02:59,599 --> 00:03:06,159
uh spmc component that runs in the cl2

00:03:03,040 --> 00:03:08,879
this the spec supports uh running spmc

00:03:06,159 --> 00:03:11,519
either in acl1 or in scl2

00:03:08,879 --> 00:03:12,560
like the like the the image shown over

00:03:11,519 --> 00:03:15,840
here

00:03:12,560 --> 00:03:16,640
the spmc here runs at sel2 and in this

00:03:15,840 --> 00:03:20,000
configuration

00:03:16,640 --> 00:03:22,319
there are multiple uh multiple sps

00:03:20,000 --> 00:03:23,360
that are shown above it can either be a

00:03:22,319 --> 00:03:25,840
cl1 sp

00:03:23,360 --> 00:03:26,879
or it could be a svc mode or it could be

00:03:25,840 --> 00:03:29,680
a cl0

00:03:26,879 --> 00:03:30,400
secure partition for our case we will be

00:03:29,680 --> 00:03:33,360
talking about

00:03:30,400 --> 00:03:34,159
a cl1 sp which which in this it will be

00:03:33,360 --> 00:03:37,599
opti

00:03:34,159 --> 00:03:40,879
and scl2 spmc which will be half

00:03:37,599 --> 00:03:44,319
hacknew and the spmd component which is

00:03:40,879 --> 00:03:47,120
el3 firmware the the firmware framework

00:03:44,319 --> 00:03:48,319
uh extends the some typical c as a

00:03:47,120 --> 00:03:50,159
transport for

00:03:48,319 --> 00:03:52,560
coming for sending and receiving ffa

00:03:50,159 --> 00:03:52,560
messages

00:03:53,200 --> 00:03:56,959
so we will talk about the changes that

00:03:54,879 --> 00:03:59,920
are done in opti update driver

00:03:56,959 --> 00:04:01,599
so first thing is in the in the el3

00:03:59,920 --> 00:04:04,959
there is a trusted os specific

00:04:01,599 --> 00:04:08,080
dispatcher named of dd now that has

00:04:04,959 --> 00:04:08,879
been replaced by spmd which is a generic

00:04:08,080 --> 00:04:12,879
dispatcher

00:04:08,879 --> 00:04:15,120
if any trusted os is adopts ffa

00:04:12,879 --> 00:04:16,160
then the trustworthy specific dispatcher

00:04:15,120 --> 00:04:18,479
can be

00:04:16,160 --> 00:04:19,840
replaced with this genetic dispatcher

00:04:18,479 --> 00:04:22,079
the functionality is

00:04:19,840 --> 00:04:23,360
similar to what what the update

00:04:22,079 --> 00:04:25,600
dispatcher would be doing

00:04:23,360 --> 00:04:27,360
mainly it handles the world switch

00:04:25,600 --> 00:04:29,840
routine save and restore

00:04:27,360 --> 00:04:30,400
restoring contacts and also it forwards

00:04:29,840 --> 00:04:34,160
the

00:04:30,400 --> 00:04:35,680
uh prior prior opti dispatcher would be

00:04:34,160 --> 00:04:38,479
forwarding smc calls

00:04:35,680 --> 00:04:40,560
now uh the spmd will be forwarding the

00:04:38,479 --> 00:04:41,040
ffa fba calls from the normal loan and

00:04:40,560 --> 00:04:44,560
secure

00:04:41,040 --> 00:04:45,759
secure world talking about the

00:04:44,560 --> 00:04:49,120
initialization

00:04:45,759 --> 00:04:51,840
uh the bl 2 loader

00:04:49,120 --> 00:04:52,960
bootloader 2 loads the spmc component

00:04:51,840 --> 00:04:55,520
and the

00:04:52,960 --> 00:04:56,960
secure partition images as mentioned in

00:04:55,520 --> 00:05:00,080
the uh

00:04:56,960 --> 00:05:03,440
flip image of the trusted firmware

00:05:00,080 --> 00:05:04,800
like uh the spmc that there has to be

00:05:03,440 --> 00:05:07,280
resources mentioned

00:05:04,800 --> 00:05:08,800
what are the what memory region the spmc

00:05:07,280 --> 00:05:09,600
will be using and what are the memory

00:05:08,800 --> 00:05:12,160
regions where

00:05:09,600 --> 00:05:13,759
the secure partition and what are the uh

00:05:12,160 --> 00:05:14,720
devices the secure partition will be

00:05:13,759 --> 00:05:16,639
will be using

00:05:14,720 --> 00:05:18,400
and all this are mentioned through

00:05:16,639 --> 00:05:20,800
manifest files

00:05:18,400 --> 00:05:22,000
as shown over here this is the spmc

00:05:20,800 --> 00:05:25,199
manifest file

00:05:22,000 --> 00:05:25,680
you can see uh the the compatibility

00:05:25,199 --> 00:05:29,039
string

00:05:25,680 --> 00:05:31,280
uh where which which aligns to ffa

00:05:29,039 --> 00:05:32,639
specification and it it also has the

00:05:31,280 --> 00:05:35,039
spmc id

00:05:32,639 --> 00:05:36,560
the major and the minor version where to

00:05:35,039 --> 00:05:39,840
which the specification

00:05:36,560 --> 00:05:42,960
it implements and also the entry point

00:05:39,840 --> 00:05:43,919
and the load address of of the spmc

00:05:42,960 --> 00:05:47,120
component

00:05:43,919 --> 00:05:49,280
and it also lists the uh available the

00:05:47,120 --> 00:05:52,560
secure partition that needs to be loaded

00:05:49,280 --> 00:05:54,560
as shown over here it's the vm whether

00:05:52,560 --> 00:05:56,319
the secure partition is available

00:05:54,560 --> 00:05:59,600
and what is the name of the secure

00:05:56,319 --> 00:06:03,039
partition and how many vcpu it consumes

00:05:59,600 --> 00:06:05,199
this manifest files are are

00:06:03,039 --> 00:06:07,600
combined together in the in the flip

00:06:05,199 --> 00:06:08,080
image which will be consumed by the spmc

00:06:07,600 --> 00:06:11,039
during

00:06:08,080 --> 00:06:11,039
during the unit phase

00:06:11,520 --> 00:06:16,479
coming to the linux uh kernel side

00:06:16,560 --> 00:06:20,479
based on the arm fps specification there

00:06:18,800 --> 00:06:23,120
is a generic driver implementation in

00:06:20,479 --> 00:06:25,440
linux kernel called rmfv driver

00:06:23,120 --> 00:06:27,759
what the main role of the mfa driver is

00:06:25,440 --> 00:06:28,479
to expose the ffa specification as a

00:06:27,759 --> 00:06:32,000
transport

00:06:28,479 --> 00:06:34,240
in the in the linux kernel like ffa

00:06:32,000 --> 00:06:35,440
transport it provides a generic

00:06:34,240 --> 00:06:38,319
interface to

00:06:35,440 --> 00:06:38,800
multiple t subsystem inside the kernel

00:06:38,319 --> 00:06:42,479
and

00:06:38,800 --> 00:06:45,360
exports internal apis

00:06:42,479 --> 00:06:46,319
to the to the t subsystem in this case

00:06:45,360 --> 00:06:49,520
it will be opti

00:06:46,319 --> 00:06:50,400
so that later it can be consumed the ffa

00:06:49,520 --> 00:06:52,800
device

00:06:50,400 --> 00:06:54,319
driver follows the linux kernel uh

00:06:52,800 --> 00:06:58,400
device driver model

00:06:54,319 --> 00:07:00,720
whereas the the ffa arm fpa bus is

00:06:58,400 --> 00:07:02,800
represented as a logical bus over here

00:07:00,720 --> 00:07:04,160
and there are devices which are which

00:07:02,800 --> 00:07:06,319
are attached to this

00:07:04,160 --> 00:07:08,160
like every secure partition will be will

00:07:06,319 --> 00:07:11,360
be identified as a device

00:07:08,160 --> 00:07:13,120
uh and the corresponding driver routine

00:07:11,360 --> 00:07:15,039
will be probed

00:07:13,120 --> 00:07:16,880
which is the driver over which is shown

00:07:15,039 --> 00:07:19,120
over here and the transport

00:07:16,880 --> 00:07:20,560
of the message happens for the sum

00:07:19,120 --> 00:07:23,120
triple c standard

00:07:20,560 --> 00:07:24,319
it could be either a hvc coded or it

00:07:23,120 --> 00:07:27,680
could be a

00:07:24,319 --> 00:07:31,440
smc content during initiation

00:07:27,680 --> 00:07:33,840
the rfa driver is responsible to load uh

00:07:31,440 --> 00:07:34,720
or to prove the secure partition based

00:07:33,840 --> 00:07:37,599
on the

00:07:34,720 --> 00:07:39,520
uid basically it does partition get info

00:07:37,599 --> 00:07:43,440
to this to the secure world

00:07:39,520 --> 00:07:46,479
and it fetches the secure world

00:07:43,440 --> 00:07:47,199
the partitions id and registers with the

00:07:46,479 --> 00:07:49,680
device

00:07:47,199 --> 00:07:50,639
in in the in the linux kernel subsystem

00:07:49,680 --> 00:07:54,160
so that later

00:07:50,639 --> 00:07:58,400
opti can use that uh id to

00:07:54,160 --> 00:08:02,560
or try to send and receive messages

00:07:58,400 --> 00:08:05,360
it implements ffa spec 1.0

00:08:02,560 --> 00:08:05,680
the main functionality that it provides

00:08:05,360 --> 00:08:07,759
are

00:08:05,680 --> 00:08:09,039
sending and receiving direct messages

00:08:07,759 --> 00:08:13,840
memory sharing and memory

00:08:09,039 --> 00:08:13,840
reclaiming functionality

00:08:15,759 --> 00:08:19,280
uh the main change that has been done in

00:08:17,440 --> 00:08:21,520
opti driver is to have

00:08:19,280 --> 00:08:22,479
fva transport transport support for

00:08:21,520 --> 00:08:25,120
update driver

00:08:22,479 --> 00:08:25,759
prior to this opti used to have smc

00:08:25,120 --> 00:08:29,039
based

00:08:25,759 --> 00:08:30,319
communication uh now those smc based

00:08:29,039 --> 00:08:32,800
calls are replaced with

00:08:30,319 --> 00:08:34,719
fake ffa calls there are three main uh

00:08:32,800 --> 00:08:35,360
categories one is the client of way

00:08:34,719 --> 00:08:39,599
house

00:08:35,360 --> 00:08:42,640
and the subjugates

00:08:39,599 --> 00:08:44,880
uh this as the name suggests

00:08:42,640 --> 00:08:46,480
of the client of your are used by the

00:08:44,880 --> 00:08:46,959
client application in the in the normal

00:08:46,480 --> 00:08:49,200
world

00:08:46,959 --> 00:08:50,000
the supplicand is subject of free ox are

00:08:49,200 --> 00:08:53,519
used by the

00:08:50,000 --> 00:08:56,080
t supplicant and the core fpv

00:08:53,519 --> 00:08:57,519
are used by the rpc and message boxing

00:08:56,080 --> 00:09:00,000
subsystem

00:08:57,519 --> 00:09:01,680
so this the function uh the function

00:09:00,000 --> 00:09:03,120
routine or the pointers in this

00:09:01,680 --> 00:09:06,240
subsystem are

00:09:03,120 --> 00:09:08,880
now points to the fa fp interface

00:09:06,240 --> 00:09:09,839
as shown over here in this diagram uh

00:09:08,880 --> 00:09:11,760
like you should

00:09:09,839 --> 00:09:13,279
normally the call that comes from the

00:09:11,760 --> 00:09:16,560
client apps to the

00:09:13,279 --> 00:09:18,399
uh generic tree tap and follows

00:09:16,560 --> 00:09:20,720
following to the linux kernel through

00:09:18,399 --> 00:09:24,080
the genericity subsystem and from there

00:09:20,720 --> 00:09:24,800
it reaches the t driver with an update

00:09:24,080 --> 00:09:26,480
driver

00:09:24,800 --> 00:09:28,560
all the subsystem within update driver

00:09:26,480 --> 00:09:31,920
uses the fa interface

00:09:28,560 --> 00:09:33,279
uh the ffa interface is during the unit

00:09:31,920 --> 00:09:36,399
time it would have probed the

00:09:33,279 --> 00:09:38,560
ffa ops and through which the messages

00:09:36,399 --> 00:09:41,680
are passed down to the ffa

00:09:38,560 --> 00:09:43,360
driver in the linux the way driver will

00:09:41,680 --> 00:09:46,560
be responsible for

00:09:43,360 --> 00:09:48,720
uh assigning the ffa ap

00:09:46,560 --> 00:09:51,040
particular api numbers to it and

00:09:48,720 --> 00:09:53,600
forwarding the call to the

00:09:51,040 --> 00:09:55,519
to the layer below it mainly the el3

00:09:53,600 --> 00:09:57,839
spmd dispatcher

00:09:55,519 --> 00:10:01,279
from here the dispatcher will be

00:09:57,839 --> 00:10:03,519
forwarding the call based on the

00:10:01,279 --> 00:10:04,880
destination is the forward in the call

00:10:03,519 --> 00:10:07,920
directly to the spm

00:10:04,880 --> 00:10:09,440
spmc component and spmc component based

00:10:07,920 --> 00:10:12,640
on the destination id

00:10:09,440 --> 00:10:13,120
will be will route the call to any one

00:10:12,640 --> 00:10:16,320
of the

00:10:13,120 --> 00:10:19,040
secure partition available

00:10:16,320 --> 00:10:19,839
the direct message send and receive

00:10:19,040 --> 00:10:21,680
related

00:10:19,839 --> 00:10:22,959
operation will be directly forwarded to

00:10:21,680 --> 00:10:25,279
the uh

00:10:22,959 --> 00:10:26,880
opti os that is running in the in the

00:10:25,279 --> 00:10:29,920
secure cigar website

00:10:26,880 --> 00:10:31,920
memory memory sharing related apis or

00:10:29,920 --> 00:10:34,160
the hack name will handle it mainly it

00:10:31,920 --> 00:10:37,920
will create a stage 2 translation

00:10:34,160 --> 00:10:39,440
entry for the for the page that is being

00:10:37,920 --> 00:10:42,240
for the non-secure page that is being

00:10:39,440 --> 00:10:42,240
provided by the

00:10:42,320 --> 00:10:45,680
as our argument that is provided through

00:10:44,240 --> 00:10:48,959
the ffa apa

00:10:45,680 --> 00:10:48,959
memory sharing api calls

00:10:51,279 --> 00:10:54,880
as shown over here during the opt-in

00:10:53,360 --> 00:10:58,079
driver initialization

00:10:54,880 --> 00:11:00,480
uh the opt-in probe routine is called

00:10:58,079 --> 00:11:02,320
it will initialize the ffv operation uh

00:11:00,480 --> 00:11:03,760
by fetching the operations directly from

00:11:02,320 --> 00:11:05,200
the fp driver

00:11:03,760 --> 00:11:06,800
and it also check the version

00:11:05,200 --> 00:11:09,920
compatibility uh

00:11:06,800 --> 00:11:11,680
whether for what is the spec that is

00:11:09,920 --> 00:11:13,279
implemented by the optivois that is

00:11:11,680 --> 00:11:15,760
running in the secure world side

00:11:13,279 --> 00:11:17,360
and it also exchanges the fba exchange

00:11:15,760 --> 00:11:20,240
capabilities

00:11:17,360 --> 00:11:21,839
and the probe and your deduction and

00:11:20,240 --> 00:11:23,839
loading of the opt-in driver

00:11:21,839 --> 00:11:26,399
what happens to the through the device

00:11:23,839 --> 00:11:26,399
free entry

00:11:26,800 --> 00:11:33,519
uh this uid will be the sps you

00:11:30,399 --> 00:11:36,640
the secure partition uid and what

00:11:33,519 --> 00:11:39,360
version it is compatible to this

00:11:36,640 --> 00:11:40,079
uh this entry will be used by the rfv

00:11:39,360 --> 00:11:42,959
driver

00:11:40,079 --> 00:11:44,000
and based on the uid it will probe each

00:11:42,959 --> 00:11:47,360
driver

00:11:44,000 --> 00:11:47,360
in in the linux kernel

00:11:49,120 --> 00:11:52,160
so moving on we will talk about all from

00:11:51,519 --> 00:11:55,440
driver

00:11:52,160 --> 00:11:57,600
calls mainly truck is categorized into

00:11:55,440 --> 00:11:59,360
arm ffa blocking calls and all my

00:11:57,600 --> 00:12:01,120
leading calls

00:11:59,360 --> 00:12:02,480
the blocking calls are used during the

00:12:01,120 --> 00:12:05,279
initiation phase

00:12:02,480 --> 00:12:06,800
it while it executes the faq queues are

00:12:05,279 --> 00:12:09,440
disabled and the

00:12:06,800 --> 00:12:10,000
functional and the return arguments are

00:12:09,440 --> 00:12:12,959
sent through

00:12:10,000 --> 00:12:13,680
the uh registers whereas when it comes

00:12:12,959 --> 00:12:16,000
to indic

00:12:13,680 --> 00:12:16,800
yielding calls uh when when a college

00:12:16,000 --> 00:12:19,440
male when

00:12:16,800 --> 00:12:20,240
a yielding call is made to the secure

00:12:19,440 --> 00:12:23,440
world

00:12:20,240 --> 00:12:25,680
a thread is signed in in the

00:12:23,440 --> 00:12:27,600
os to run this particular particular

00:12:25,680 --> 00:12:30,720
command

00:12:27,600 --> 00:12:32,720
it could be either either to run a

00:12:30,720 --> 00:12:36,160
specific

00:12:32,720 --> 00:12:39,040
decline related api

00:12:36,160 --> 00:12:42,480
or it could be to register or

00:12:39,040 --> 00:12:42,480
unregistered a shared memory

00:12:47,440 --> 00:12:50,959
up to yielding calls when it returns

00:12:49,040 --> 00:12:51,440
back it could it could return back with

00:12:50,959 --> 00:12:54,399
this

00:12:51,440 --> 00:12:55,120
any of this return or return argument uh

00:12:54,399 --> 00:12:56,959
based on

00:12:55,120 --> 00:13:00,240
based on the return value property

00:12:56,959 --> 00:13:02,880
driver handles whether whether to

00:13:00,240 --> 00:13:03,680
whether to re-trade a particular command

00:13:02,880 --> 00:13:07,120
or to

00:13:03,680 --> 00:13:09,760
handle the rpc rpc command sent by the

00:13:07,120 --> 00:13:09,760
of device

00:13:13,040 --> 00:13:16,880
here in this diagram it shows the flow

00:13:16,000 --> 00:13:20,639
of

00:13:16,880 --> 00:13:21,680
the ffa call from the t subsystem to the

00:13:20,639 --> 00:13:25,760
spmd

00:13:21,680 --> 00:13:28,560
there so you can see tioc in work is a

00:13:25,760 --> 00:13:30,880
generic command which is this is widely

00:13:28,560 --> 00:13:30,880
used

00:13:31,120 --> 00:13:37,120
here the t command holds uh

00:13:35,360 --> 00:13:38,560
pulls the command that needs to be

00:13:37,120 --> 00:13:41,199
passed

00:13:38,560 --> 00:13:41,680
it could be a login or it could be open

00:13:41,199 --> 00:13:44,800
session

00:13:41,680 --> 00:13:48,160
or it could be a circuit related api and

00:13:44,800 --> 00:13:51,360
this this is packed in opti message and

00:13:48,160 --> 00:13:53,600
later on the opti driver uh assigns

00:13:51,360 --> 00:13:55,760
of the ffa yielding call with arguments

00:13:53,600 --> 00:13:57,760
and it adds the cookie this cookie is a

00:13:55,760 --> 00:14:01,199
global handle assigned by

00:13:57,760 --> 00:14:04,000
the spmc component and this is

00:14:01,199 --> 00:14:05,120
one this is set the the call is

00:14:04,000 --> 00:14:08,639
forwarded to the

00:14:05,120 --> 00:14:10,560
fva driver by by doing a sync sent and

00:14:08,639 --> 00:14:14,320
send and receive

00:14:10,560 --> 00:14:16,079
the ffa driver adds the source vmid

00:14:14,320 --> 00:14:18,639
and as well as the destination secure

00:14:16,079 --> 00:14:21,199
partition id and it sets

00:14:18,639 --> 00:14:22,480
the ffa function to be a ffa message and

00:14:21,199 --> 00:14:25,519
direct request

00:14:22,480 --> 00:14:28,560
and forwards the call through smc

00:14:25,519 --> 00:14:30,800
to the spmd component the spmd component

00:14:28,560 --> 00:14:32,880
saves and restores

00:14:30,800 --> 00:14:34,560
it restores the secure secure world

00:14:32,880 --> 00:14:37,839
state and forwards it

00:14:34,560 --> 00:14:37,839
to the spmc

00:14:38,320 --> 00:14:44,800
once the call returned back from spmc

00:14:42,000 --> 00:14:45,680
spmd does a e-red and that that way the

00:14:44,800 --> 00:14:48,160
control comes

00:14:45,680 --> 00:14:49,600
back to the fp driver now the ffa driver

00:14:48,160 --> 00:14:52,880
looks at the octfv

00:14:49,600 --> 00:14:54,240
response code and accordingly it sets

00:14:52,880 --> 00:14:56,720
the argument and

00:14:54,240 --> 00:14:58,079
returns back to the opti driver it could

00:14:56,720 --> 00:15:02,959
either return with a

00:14:58,079 --> 00:15:05,760
fba bc or or could be a base success

00:15:02,959 --> 00:15:07,440
in case which means there are no

00:15:05,760 --> 00:15:09,120
available threats in the

00:15:07,440 --> 00:15:10,800
in the secure website to execute this

00:15:09,120 --> 00:15:12,399
particular command then it waits

00:15:10,800 --> 00:15:13,839
for a thread to be available and the

00:15:12,399 --> 00:15:16,959
command will be retrayed

00:15:13,839 --> 00:15:18,480
if it is a success then it follows so

00:15:16,959 --> 00:15:21,920
then then it goes along and

00:15:18,480 --> 00:15:23,680
checks for this return value

00:15:21,920 --> 00:15:25,920
what are the return values that is

00:15:23,680 --> 00:15:27,839
coming as part of this yielding call

00:15:25,920 --> 00:15:31,279
based on that the rpc commands

00:15:27,839 --> 00:15:33,839
executed this the support for

00:15:31,279 --> 00:15:35,759
ffa drive transport support in opti

00:15:33,839 --> 00:15:38,800
driver is a work in progress

00:15:35,759 --> 00:15:41,120
this macros might change in in the

00:15:38,800 --> 00:15:41,120
stream

00:15:49,519 --> 00:15:55,839
the control passes down to the back to

00:15:52,079 --> 00:15:55,839
the t subsystem

00:15:59,360 --> 00:16:06,839
the os support for ffa and

00:16:02,880 --> 00:16:09,839
acl2 spmc support will be discussed by

00:16:06,839 --> 00:16:09,839
yens

00:16:13,199 --> 00:16:17,360
thank you arun here i'm going to talk

00:16:15,680 --> 00:16:19,440
about the opposite side of ffa

00:16:17,360 --> 00:16:21,519
and also running opti with a hypervisor

00:16:19,440 --> 00:16:23,120
at secure el2

00:16:21,519 --> 00:16:26,560
we have support for running opti with

00:16:23,120 --> 00:16:28,560
ffa but without a secure el2 upstream

00:16:26,560 --> 00:16:31,279
this is experimental support and should

00:16:28,560 --> 00:16:33,360
be considered to be work in progress

00:16:31,279 --> 00:16:36,160
without the three patches we also have a

00:16:33,360 --> 00:16:39,279
working setup with secure l2

00:16:36,160 --> 00:16:42,480
with ffa we always have an spmd

00:16:39,279 --> 00:16:43,279
at el3 and with opti in the picture the

00:16:42,480 --> 00:16:47,680
spmc

00:16:43,279 --> 00:16:50,320
is placed in secure el2 or secure el1

00:16:47,680 --> 00:16:52,160
so when configuring opti for ffa we only

00:16:50,320 --> 00:16:53,600
need to tell where the spmc is to be

00:16:52,160 --> 00:16:55,839
placed

00:16:53,600 --> 00:16:57,920
during the rest of this presentation i

00:16:55,839 --> 00:17:01,120
will focus on the case where the spmc

00:16:57,920 --> 00:17:04,079
is placed at security of 2.

00:17:01,120 --> 00:17:05,439
booting up of t is similar to before we

00:17:04,079 --> 00:17:07,360
have a start function which

00:17:05,439 --> 00:17:09,439
which is entered by the primary cpu

00:17:07,360 --> 00:17:12,559
during initialization

00:17:09,439 --> 00:17:14,319
the spm is conv is informed of the entry

00:17:12,559 --> 00:17:17,600
point of the secondary cpus

00:17:14,319 --> 00:17:21,039
the secondary cpu so then initialized by

00:17:17,600 --> 00:17:21,039
entering cpu on handler

00:17:23,959 --> 00:17:31,760
opti-osffa message weight loop

00:17:28,079 --> 00:17:34,960
an ffa message is sent with the h

00:17:31,760 --> 00:17:36,480
v c instruction and with this control of

00:17:34,960 --> 00:17:40,000
the cpu is handed over to

00:17:36,480 --> 00:17:40,640
the spmc execution in opti is resumed at

00:17:40,000 --> 00:17:42,960
the next

00:17:40,640 --> 00:17:44,000
instruction when a new ffa message is

00:17:42,960 --> 00:17:47,039
received

00:17:44,000 --> 00:17:50,559
the state that we had before the hvc

00:17:47,039 --> 00:17:53,039
is restored except that x0 to x7

00:17:50,559 --> 00:17:54,320
are updated with a new message so we

00:17:53,039 --> 00:17:57,440
have a message loop

00:17:54,320 --> 00:18:00,240
similar to the example here to the right

00:17:57,440 --> 00:18:00,720
the loop is entered the first time when

00:18:00,240 --> 00:18:03,760
we

00:18:00,720 --> 00:18:05,520
signaled the cpu has completed boot with

00:18:03,760 --> 00:18:08,000
ffa message weight

00:18:05,520 --> 00:18:09,760
and not left again unless we have a

00:18:08,000 --> 00:18:12,799
yielding request

00:18:09,760 --> 00:18:16,000
yielding request other ones that may do

00:18:12,799 --> 00:18:18,400
remote serial calls or rpc those

00:18:16,000 --> 00:18:21,200
requests are the only ones that can be

00:18:18,400 --> 00:18:23,679
interrupted by a non-secure interrupt

00:18:21,200 --> 00:18:25,200
when doing an rpc we may very well

00:18:23,679 --> 00:18:27,120
return a different cpu

00:18:25,200 --> 00:18:28,240
so the state is saved in a way that it

00:18:27,120 --> 00:18:32,080
can produce

00:18:28,240 --> 00:18:32,080
can be resumed by any cpu

00:18:34,799 --> 00:18:41,919
of the os messages all the ffa messages

00:18:39,120 --> 00:18:42,240
received by opti or run to completion

00:18:41,919 --> 00:18:44,320
but

00:18:42,240 --> 00:18:45,919
a yielding behavior is built on top of

00:18:44,320 --> 00:18:48,880
two messages send direct

00:18:45,919 --> 00:18:50,640
wreck and send direct resp so that the

00:18:48,880 --> 00:18:53,039
request being processed by

00:18:50,640 --> 00:18:54,000
opti can be temporarily saved before

00:18:53,039 --> 00:18:56,320
doing a

00:18:54,000 --> 00:18:59,679
send direct resp and later resumed by

00:18:56,320 --> 00:18:59,679
another centerrect wreck

00:18:59,760 --> 00:19:03,440
the return value in register v3 of the

00:19:02,400 --> 00:19:06,320
send direct rest

00:19:03,440 --> 00:19:07,360
indicates what kind of return opt is

00:19:06,320 --> 00:19:09,200
doing

00:19:07,360 --> 00:19:11,919
if we are done we expect to be called

00:19:09,200 --> 00:19:14,160
the next time with a new call with arg

00:19:11,919 --> 00:19:16,000
else we expect to resume the ongoing

00:19:14,160 --> 00:19:18,400
call with the call resume

00:19:16,000 --> 00:19:19,120
in the example to the right you can see

00:19:18,400 --> 00:19:21,520
a

00:19:19,120 --> 00:19:22,480
sequence where a call is both both

00:19:21,520 --> 00:19:25,039
preempted and

00:19:22,480 --> 00:19:27,280
requests an rpc command before being

00:19:25,039 --> 00:19:27,280
done

00:19:33,600 --> 00:19:40,000
opt-os secure el 2 spmc memory sharing

00:19:38,240 --> 00:19:42,480
sharing memory from normal world to

00:19:40,000 --> 00:19:44,480
secure world is a two-step process

00:19:42,480 --> 00:19:46,160
first the memory is registered for

00:19:44,480 --> 00:19:51,360
sharing with

00:19:46,160 --> 00:19:54,000
the spmc using a ffa memshare

00:19:51,360 --> 00:19:55,600
with this call with this the caller gets

00:19:54,000 --> 00:19:58,080
a global handle or a cookie

00:19:55,600 --> 00:19:59,280
as we call it in opti this is in the

00:19:58,080 --> 00:20:01,360
system a globally

00:19:59,280 --> 00:20:02,559
unique identifier of that piece of

00:20:01,360 --> 00:20:04,559
shared memory

00:20:02,559 --> 00:20:06,640
the next step is to share this cookie

00:20:04,559 --> 00:20:07,919
with opti this is normally done with a

00:20:06,640 --> 00:20:09,600
yielding call

00:20:07,919 --> 00:20:11,200
with this cookie as one of the memory

00:20:09,600 --> 00:20:13,280
parameters

00:20:11,200 --> 00:20:14,880
when optic sees that this is a new

00:20:13,280 --> 00:20:18,080
cookie it will call

00:20:14,880 --> 00:20:18,880
ffa memory pre-wreck when this function

00:20:18,080 --> 00:20:21,120
returns

00:20:18,880 --> 00:20:22,640
the memory can be mapped in ofte in the

00:20:21,120 --> 00:20:23,360
example to the right you can see a

00:20:22,640 --> 00:20:27,039
typical

00:20:23,360 --> 00:20:29,679
sequence used to share memory

00:20:27,039 --> 00:20:31,520
relinquishing or stop sharing memory is

00:20:29,679 --> 00:20:34,159
also a two-step process

00:20:31,520 --> 00:20:36,159
when shared when started from the normal

00:20:34,159 --> 00:20:38,720
world

00:20:36,159 --> 00:20:39,760
there's first a call to opti of the ffa

00:20:38,720 --> 00:20:43,200
android desktop

00:20:39,760 --> 00:20:45,200
shm with cookies parameter if opt

00:20:43,200 --> 00:20:47,039
isn't busy using this memory it will

00:20:45,200 --> 00:20:50,559
make a ffa mem

00:20:47,039 --> 00:20:51,520
relinquish call to spmc to release the

00:20:50,559 --> 00:20:55,039
memory and then

00:20:51,520 --> 00:20:56,720
return success to the normal world

00:20:55,039 --> 00:20:59,039
this way of dealing with non-secure

00:20:56,720 --> 00:21:01,280
memory prevents opti from accessing

00:20:59,039 --> 00:21:03,520
any non-secure memory that isn't chat in

00:21:01,280 --> 00:21:05,760
fact the same applies to secure memory

00:21:03,520 --> 00:21:09,360
opt has only access to the memory that

00:21:05,760 --> 00:21:09,360
the spmc has granted

00:21:09,440 --> 00:21:13,440
thank you and now over to our roon

00:21:14,000 --> 00:21:17,280
thanks since now you have a demo on fvp

00:21:16,640 --> 00:21:21,120
with

00:21:17,280 --> 00:21:23,600
oct fba transport and sel2 spmc support

00:21:21,120 --> 00:21:30,080
here i have a fpv booted with opt in the

00:21:23,600 --> 00:21:32,880
secure partition along with apnea

00:21:30,080 --> 00:21:33,200
are the initial messages of craftium and

00:21:32,880 --> 00:21:36,240
it

00:21:33,200 --> 00:21:38,960
uh it loads opti with eight vcpus

00:21:36,240 --> 00:21:40,320
and this is the optic boot messages and

00:21:38,960 --> 00:21:42,640
here you can see

00:21:40,320 --> 00:21:44,720
uh the opti register the secondary core

00:21:42,640 --> 00:21:46,880
entry point with spmd

00:21:44,720 --> 00:21:49,360
and later once the linux kernel boot the

00:21:46,880 --> 00:21:52,000
vcpus are initialized in opti

00:21:49,360 --> 00:21:53,280
coming to the linux terminal we can see

00:21:52,000 --> 00:21:55,760
the arm favors

00:21:53,280 --> 00:21:57,280
understands under the surface and this

00:21:55,760 --> 00:21:59,679
is the device of

00:21:57,280 --> 00:22:01,600
which which is opti secure partition and

00:21:59,679 --> 00:22:13,840
the corresponding driver to it

00:22:01,600 --> 00:22:13,840
now we will run some sample test cases

00:22:18,640 --> 00:22:22,080
as you can see here for the messages

00:22:21,039 --> 00:22:25,600
that are passed from

00:22:22,080 --> 00:22:29,520
spmd to spmc and this are the ffa apis

00:22:25,600 --> 00:22:32,480
aba calls along with the arguments

00:22:29,520 --> 00:22:33,919
passed in the registers

00:22:32,480 --> 00:22:36,159
this brings us to the end of this

00:22:33,919 --> 00:22:37,280
presentation thank you for your time and

00:22:36,159 --> 00:22:40,320
attention

00:22:37,280 --> 00:22:40,320

YouTube URL: https://www.youtube.com/watch?v=kqLZ8ZtaEpM


