Title: LVC21-222 A networking chip at the heart of an Arm on Arm workstation
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Both Daniel and Ilias both long been interested in the quest for an affordable 64-bit Arm workstation capable of handling lots of RAM and storage. Daniel has even taken to the stage at previous Linaro events to discuss his dogfooding experiences.
     
Following the time honoured traditions of previous Arm-on-Arm      enthusiasts, both these developers have adopted a new board      to be the heart of their "daily driver" workstations. The board      in question is a Honeycomb LX2K from Solidrun, a mini ITX board      built around a surprisingly powerful NXP networking and      communications chip.

Did they learn anything new this time around?
Captions: 
	00:00:01,520 --> 00:00:04,159
got it yeah

00:00:05,680 --> 00:00:11,440
okay so my name is daniel thompson and

00:00:08,880 --> 00:00:13,599
for the last three months i have been

00:00:11,440 --> 00:00:16,320
running an arm 64 workstation

00:00:13,599 --> 00:00:17,199
for all of my daily work at lonaro and

00:00:16,320 --> 00:00:19,439
my colleague

00:00:17,199 --> 00:00:22,480
ilias apologist for the last three

00:00:19,439 --> 00:00:25,199
months has been running exactly the same

00:00:22,480 --> 00:00:26,640
arm 64 workstation built around an nxp

00:00:25,199 --> 00:00:29,519
networking chip for his

00:00:26,640 --> 00:00:30,640
daily driver and we've joined you today

00:00:29,519 --> 00:00:34,480
to tell you

00:00:30,640 --> 00:00:36,160
some of the things we've learned um

00:00:34,480 --> 00:00:38,399
so first off talking about the hardware

00:00:36,160 --> 00:00:42,320
um the central device

00:00:38,399 --> 00:00:44,000
is an nxp lx2 system chip

00:00:42,320 --> 00:00:45,600
um it has got some quite powerful

00:00:44,000 --> 00:00:46,480
networking capabilities it's not purely

00:00:45,600 --> 00:00:48,480
for networking

00:00:46,480 --> 00:00:50,399
but you'll see in the bottom middle um

00:00:48,480 --> 00:00:51,680
that we've got things running up to 100

00:00:50,399 --> 00:00:53,520
gigabits ethernet

00:00:51,680 --> 00:00:55,360
um now personally there is nothing in my

00:00:53,520 --> 00:00:56,559
house i could plug even 10 gigabit

00:00:55,360 --> 00:00:58,800
ethernet into

00:00:56,559 --> 00:01:00,239
um so i'm more or less completely

00:00:58,800 --> 00:01:01,199
uninterested in the networking features

00:01:00,239 --> 00:01:03,600
of this chip

00:01:01,199 --> 00:01:06,400
um what attracted me to it is the

00:01:03,600 --> 00:01:09,520
enormous pool of cortex a72s

00:01:06,400 --> 00:01:11,439
at the top there are 16 a72s there are

00:01:09,520 --> 00:01:12,960
two ddr controllers on the right

00:01:11,439 --> 00:01:14,960
which allows us to attach massive

00:01:12,960 --> 00:01:16,560
amounts of ram to this thing

00:01:14,960 --> 00:01:18,000
i'm running with 32 but it supports up

00:01:16,560 --> 00:01:19,920
to 64. and

00:01:18,000 --> 00:01:21,200
in the bottom right hand corner you can

00:01:19,920 --> 00:01:23,439
see lots and lots of

00:01:21,200 --> 00:01:27,439
industry standard protocol connectors

00:01:23,439 --> 00:01:29,600
lots of pcie and lots of sata

00:01:27,439 --> 00:01:30,720
and i'm sorry i can't do a down on this

00:01:29,600 --> 00:01:33,520
one this

00:01:30,720 --> 00:01:35,439
is what um solid run have built from it

00:01:33,520 --> 00:01:37,920
so this is their diagram

00:01:35,439 --> 00:01:38,960
and it's showing a com express type 7

00:01:37,920 --> 00:01:41,200
board in the middle

00:01:38,960 --> 00:01:42,720
which mounts the processor and two so

00:01:41,200 --> 00:01:44,240
dim slots

00:01:42,720 --> 00:01:46,240
and if you roll around to the right

00:01:44,240 --> 00:01:49,759
you'll see the pcie capabilities

00:01:46,240 --> 00:01:51,200
that is an m2 slot with 4x pcie which

00:01:49,759 --> 00:01:52,720
allows you to get full speed to your

00:01:51,200 --> 00:01:55,119
nvme

00:01:52,720 --> 00:01:55,840
or any other pci device you want to plug

00:01:55,119 --> 00:01:59,840
in there

00:01:55,840 --> 00:02:01,360
and you have an 8x pcie open back slot

00:01:59,840 --> 00:02:03,280
which allows you to attach essentially

00:02:01,360 --> 00:02:03,600
any standard pci peripheral that you

00:02:03,280 --> 00:02:05,520
wish

00:02:03,600 --> 00:02:07,439
obviously in my case i've got a graphics

00:02:05,520 --> 00:02:08,720
card

00:02:07,439 --> 00:02:11,039
bottom of the diagram you've got the

00:02:08,720 --> 00:02:15,440
back panel um that's the micro sd

00:02:11,039 --> 00:02:17,599
card two usb 3 and a gigabit uh ethernet

00:02:15,440 --> 00:02:19,680
there is also lurking in that corner the

00:02:17,599 --> 00:02:22,800
sfp plus that allows you to attach

00:02:19,680 --> 00:02:23,840
very fast ethernet files i have not

00:02:22,800 --> 00:02:25,520
plugged anything there

00:02:23,840 --> 00:02:26,879
because like i say even if i plugged in

00:02:25,520 --> 00:02:28,319
a fire i'd have nothing to connect the

00:02:26,879 --> 00:02:31,040
other side to

00:02:28,319 --> 00:02:32,400
so i have not used any of that component

00:02:31,040 --> 00:02:33,040
and in that area of the board also there

00:02:32,400 --> 00:02:34,720
are the four

00:02:33,040 --> 00:02:36,239
sata channels that allows you to attach

00:02:34,720 --> 00:02:39,519
a massive amount of storage

00:02:36,239 --> 00:02:42,160
to this device if you wish um

00:02:39,519 --> 00:02:42,800
and solving actually a little bit humble

00:02:42,160 --> 00:02:44,720
because

00:02:42,800 --> 00:02:46,239
they omitted to mention the additional

00:02:44,720 --> 00:02:48,840
connectivity we've got we've got

00:02:46,239 --> 00:02:50,720
standard front panel connectors and more

00:02:48,840 --> 00:02:52,959
usb

00:02:50,720 --> 00:02:54,640
and on the bottom corner here there is

00:02:52,959 --> 00:02:55,760
the debugging automation connectors the

00:02:54,640 --> 00:02:59,120
micro

00:02:55,760 --> 00:03:01,599
bs so that is either an

00:02:59,120 --> 00:03:03,920
ftdi usb to uart bridge which just gives

00:03:01,599 --> 00:03:07,040
you access to a serial console

00:03:03,920 --> 00:03:09,120
or it can be an stm32 based what solver

00:03:07,040 --> 00:03:11,120
and call their micro bmc

00:03:09,120 --> 00:03:12,800
which has access to power and reset

00:03:11,120 --> 00:03:14,640
lines for power on and off

00:03:12,800 --> 00:03:16,319
it has access to the same console as the

00:03:14,640 --> 00:03:18,959
ftdi it can

00:03:16,319 --> 00:03:21,040
directly manipulate the spinal to

00:03:18,959 --> 00:03:22,720
reflash the device remotely

00:03:21,040 --> 00:03:25,840
and it has access to i2c which i think

00:03:22,720 --> 00:03:27,680
primarily gives you access to the rtc

00:03:25,840 --> 00:03:29,440
so you have got a capacity to use a usb

00:03:27,680 --> 00:03:31,120
hookup to completely automate this board

00:03:29,440 --> 00:03:32,799
if you wish

00:03:31,120 --> 00:03:35,440
absent firmware fcos which we'll talk

00:03:32,799 --> 00:03:37,040
about later

00:03:35,440 --> 00:03:39,040
and then finally if you've been in the

00:03:37,040 --> 00:03:41,120
arm ecosystem a long time

00:03:39,040 --> 00:03:42,319
um you might like to know that the pcie

00:03:41,120 --> 00:03:44,560
is not broken

00:03:42,319 --> 00:03:46,080
um it's not an arm problem pcie it's an

00:03:44,560 --> 00:03:47,680
embedded problem

00:03:46,080 --> 00:03:49,840
and the problem is that on embedded

00:03:47,680 --> 00:03:52,400
platforms the pcie is only usually

00:03:49,840 --> 00:03:54,319
tested with a 1x wi-fi card which just

00:03:52,400 --> 00:03:55,760
means a bunch of registers

00:03:54,319 --> 00:03:57,599
and if you attach anything that's not a

00:03:55,760 --> 00:03:59,040
bunch of registers such as a graphics

00:03:57,599 --> 00:03:59,519
card with its massive amount of video

00:03:59,040 --> 00:04:01,680
ram

00:03:59,519 --> 00:04:02,720
uh you tickle bugs in the pci

00:04:01,680 --> 00:04:05,840
infrastructure that

00:04:02,720 --> 00:04:08,080
were um were simply not tested or not

00:04:05,840 --> 00:04:10,000
intended to work by the vendor

00:04:08,080 --> 00:04:12,799
so it's very important to note here that

00:04:10,000 --> 00:04:15,840
pci is not as far away broken in any way

00:04:12,799 --> 00:04:15,840
on this platform

00:04:17,840 --> 00:04:21,519
okay so summary of the good and the bad

00:04:19,680 --> 00:04:23,040
um obviously we've been attracted to it

00:04:21,519 --> 00:04:25,520
because it's powerful and stable

00:04:23,040 --> 00:04:28,320
hardware

00:04:25,520 --> 00:04:29,600
it's got cortex a72 which among other

00:04:28,320 --> 00:04:32,080
things means we can execute

00:04:29,600 --> 00:04:33,040
all three of the arm instruction sets so

00:04:32,080 --> 00:04:36,639
you really can do

00:04:33,040 --> 00:04:38,720
all of arm on arm with this platform

00:04:36,639 --> 00:04:40,160
um and it's completely standardized and

00:04:38,720 --> 00:04:42,639
it's form factoring connectors it's a

00:04:40,160 --> 00:04:43,440
mini itx board it goes into standard pc

00:04:42,639 --> 00:04:45,199
cases

00:04:43,440 --> 00:04:46,479
the fans are connected with standard

00:04:45,199 --> 00:04:49,520
connectors the

00:04:46,479 --> 00:04:51,199
heatsink is a classic northbridge mount

00:04:49,520 --> 00:04:53,759
so if you try to get northbridge coolers

00:04:51,199 --> 00:04:55,759
you can replace the cooler

00:04:53,759 --> 00:04:57,360
the usb headers front panel pins all are

00:04:55,759 --> 00:05:00,080
there to design and work with the

00:04:57,360 --> 00:05:01,600
classic mini itx case ecosystem

00:05:00,080 --> 00:05:03,360
there's a couple of small points that we

00:05:01,600 --> 00:05:05,440
don't like there's no back

00:05:03,360 --> 00:05:06,880
cutout panel which means you simply get

00:05:05,440 --> 00:05:08,080
extra ventilation rather than something

00:05:06,880 --> 00:05:09,600
to stop your children putting their

00:05:08,080 --> 00:05:12,720
fingers in

00:05:09,600 --> 00:05:15,840
and the 40 millimeter cpu heatsink fan

00:05:12,720 --> 00:05:17,440
is phenomenally noisy um i don't know if

00:05:15,840 --> 00:05:19,520
anybody who's using this board as a

00:05:17,440 --> 00:05:22,000
daily machine that has not replaced it

00:05:19,520 --> 00:05:24,479
uh either by replacing the the fan or

00:05:22,000 --> 00:05:25,680
the heatsink or both

00:05:24,479 --> 00:05:27,440
there's a couple of small hardware

00:05:25,680 --> 00:05:28,800
issues as well so the micro bmc reset

00:05:27,440 --> 00:05:30,800
line doesn't actually work on

00:05:28,800 --> 00:05:33,039
the early generation of boards i'm told

00:05:30,800 --> 00:05:35,840
solid run will fix that in the next

00:05:33,039 --> 00:05:36,639
current release of boards and the

00:05:35,840 --> 00:05:39,199
biggest

00:05:36,639 --> 00:05:41,520
most ugly problem is that x-16 cards

00:05:39,199 --> 00:05:42,560
don't necessarily detect reliably

00:05:41,520 --> 00:05:44,160
because

00:05:42,560 --> 00:05:46,560
the way psi works is this presence

00:05:44,160 --> 00:05:48,639
detect lines and in the case of an x-16

00:05:46,560 --> 00:05:49,360
card the presence detect line is hanging

00:05:48,639 --> 00:05:51,520
out the back

00:05:49,360 --> 00:05:53,840
of the open back slot and there is

00:05:51,520 --> 00:05:56,639
simply no way to electrically discover

00:05:53,840 --> 00:05:57,919
that a card is connected

00:05:56,639 --> 00:05:59,919
that's only a problem because i haven't

00:05:57,919 --> 00:06:00,800
yet found a way to force the software

00:05:59,919 --> 00:06:03,360
override

00:06:00,800 --> 00:06:04,800
or hardware override to force a

00:06:03,360 --> 00:06:07,680
detection

00:06:04,800 --> 00:06:09,680
which in reality means you reboot a few

00:06:07,680 --> 00:06:11,120
times until it takes your x16 card or

00:06:09,680 --> 00:06:13,759
you use a riser

00:06:11,120 --> 00:06:15,680
that has a different presence detect

00:06:13,759 --> 00:06:18,560
mechanism if you've got a 16 to

00:06:15,680 --> 00:06:20,080
48x converter for example that converter

00:06:18,560 --> 00:06:23,120
should be asserting hot plug detect to

00:06:20,080 --> 00:06:23,120
avoid these kind of problems

00:06:23,759 --> 00:06:28,080
in my case i'm running an x1 nvidia card

00:06:26,720 --> 00:06:34,400
which has a similar

00:06:28,080 --> 00:06:36,080
effect so firmware um

00:06:34,400 --> 00:06:38,080
there are several packages of firmware

00:06:36,080 --> 00:06:40,000
available for this board including two

00:06:38,080 --> 00:06:41,919
fully packaged turnkey builds available

00:06:40,000 --> 00:06:43,600
from solid run themselves

00:06:41,919 --> 00:06:45,120
so that's their vendor edk2

00:06:43,600 --> 00:06:48,240
implementation which is an

00:06:45,120 --> 00:06:50,720
efi acpi firmware that allows efi

00:06:48,240 --> 00:06:52,960
compliant boot from usb start to nvme

00:06:50,720 --> 00:06:54,560
and probably from mmc an sd card i've

00:06:52,960 --> 00:06:56,639
seen it in the boot lists but i've not

00:06:54,560 --> 00:06:58,880
tested it

00:06:56,639 --> 00:07:00,400
it has pgm fan control which takes the

00:06:58,880 --> 00:07:03,440
noise down just a little bit but you

00:07:00,400 --> 00:07:04,720
still want to be thinking of a new fan

00:07:03,440 --> 00:07:07,120
and it supports what i've put in air

00:07:04,720 --> 00:07:08,720
quotes as overclocked memory profiles

00:07:07,120 --> 00:07:11,039
i say overclocked because it's a bit of

00:07:08,720 --> 00:07:13,840
gamer marketing

00:07:11,039 --> 00:07:15,680
you can buy 3.2 gigahertz motherboards

00:07:13,840 --> 00:07:16,880
and 3.2 gigahertz ram

00:07:15,680 --> 00:07:18,240
and they still pretend that they're

00:07:16,880 --> 00:07:19,599
overclocking the ram despite the fact

00:07:18,240 --> 00:07:22,040
both were sold to you on the basis they

00:07:19,599 --> 00:07:24,319
would run that first

00:07:22,040 --> 00:07:25,759
[Music]

00:07:24,319 --> 00:07:27,599
um both soldier on the basis they would

00:07:25,759 --> 00:07:29,039
run that fast um so

00:07:27,599 --> 00:07:30,880
whenever you run faster than 2.4

00:07:29,039 --> 00:07:34,240
gigahertz it's called overclocking

00:07:30,880 --> 00:07:37,680
and we can do that um there is

00:07:34,240 --> 00:07:39,919
also a vendor u-boot build um

00:07:37,680 --> 00:07:40,720
which is solid and reliable and works

00:07:39,919 --> 00:07:42,960
very well

00:07:40,720 --> 00:07:44,000
but like most u-boot builds it does not

00:07:42,960 --> 00:07:46,800
provide any device

00:07:44,000 --> 00:07:49,039
tree which means interoperating with

00:07:46,800 --> 00:07:51,199
distro installers and distro iso images

00:07:49,039 --> 00:07:53,280
is a less pleasant experience you have

00:07:51,199 --> 00:07:55,360
to have quite a lot of domain knowledge

00:07:53,280 --> 00:07:56,840
to know how to inject the device stream

00:07:55,360 --> 00:08:00,080
before you do any

00:07:56,840 --> 00:08:02,000
installation um upstream status

00:08:00,080 --> 00:08:03,840
uvu is mature enough to allow honeycomb

00:08:02,000 --> 00:08:05,759
to be used as a development platform to

00:08:03,840 --> 00:08:07,440
develop new u-boot features

00:08:05,759 --> 00:08:08,800
i'm told it doesn't include quite all

00:08:07,440 --> 00:08:10,240
the comfort features you've got in the

00:08:08,800 --> 00:08:13,599
vendor u-boot at the moment but they're

00:08:10,240 --> 00:08:15,120
on the way and edk2 i am told it is a

00:08:13,599 --> 00:08:17,280
work in progress but i have not been

00:08:15,120 --> 00:08:18,800
able to investigate how far the work has

00:08:17,280 --> 00:08:20,319
progressed

00:08:18,800 --> 00:08:24,080
but it is all open source so these

00:08:20,319 --> 00:08:24,080
things can uh can be coming

00:08:25,120 --> 00:08:29,919
uh straight very very strong bit of

00:08:27,840 --> 00:08:30,879
guidance is if you like your firmware to

00:08:29,919 --> 00:08:34,159
just work

00:08:30,879 --> 00:08:37,039
use edk2 it works well

00:08:34,159 --> 00:08:39,680
all the distros boot nicely acpi solves

00:08:37,039 --> 00:08:41,120
a number of interoperability problems

00:08:39,680 --> 00:08:43,200
and it's capable of driving the graphics

00:08:41,120 --> 00:08:44,240
card which means that the distro

00:08:43,200 --> 00:08:47,040
installer will appear

00:08:44,240 --> 00:08:48,240
on the display if you've connected a

00:08:47,040 --> 00:08:49,839
graphics card

00:08:48,240 --> 00:08:51,440
so if you like things just work that's

00:08:49,839 --> 00:08:53,680
the one to use

00:08:51,440 --> 00:08:56,080
and a final note on the firmware is that

00:08:53,680 --> 00:08:58,240
it is currently undergoing certification

00:08:56,080 --> 00:08:59,600
for system ready es

00:08:58,240 --> 00:09:01,440
there was a talk about exactly what

00:08:59,600 --> 00:09:04,000
system ready es and sr

00:09:01,440 --> 00:09:04,480
are yesterday but essentially what that

00:09:04,000 --> 00:09:07,120
means

00:09:04,480 --> 00:09:08,000
is the target is for the honeycomb to be

00:09:07,120 --> 00:09:10,560
sbbr

00:09:08,000 --> 00:09:12,640
compliant it will not be spsa compliant

00:09:10,560 --> 00:09:13,839
but it will be sbbr compliant that's

00:09:12,640 --> 00:09:15,279
what they're shooting for

00:09:13,839 --> 00:09:16,720
and if you want to know more about that

00:09:15,279 --> 00:09:18,240
have a look at the talk yesterday from

00:09:16,720 --> 00:09:20,160
sama and dong

00:09:18,240 --> 00:09:23,839
from whom i stole with permission these

00:09:20,160 --> 00:09:23,839
slides on the right

00:09:24,080 --> 00:09:28,800
so moving from the firmware we can talk

00:09:26,240 --> 00:09:30,000
about the kernel

00:09:28,800 --> 00:09:31,519
i'm going to talk about the device tree

00:09:30,000 --> 00:09:33,920
kernel first the one that you would use

00:09:31,519 --> 00:09:36,080
with u-boot

00:09:33,920 --> 00:09:37,760
and it benefits enormously from the very

00:09:36,080 --> 00:09:40,880
significant upstreaming work

00:09:37,760 --> 00:09:41,760
that's been undertaken by both nxp and

00:09:40,880 --> 00:09:43,760
solid run

00:09:41,760 --> 00:09:45,680
and community members such as russell

00:09:43,760 --> 00:09:49,839
king

00:09:45,680 --> 00:09:50,160
um and what that means at the end of

00:09:49,839 --> 00:09:53,519
this

00:09:50,160 --> 00:09:55,440
is that as of 5.11 um all the pieces

00:09:53,519 --> 00:09:56,640
of hardware on the board that i care

00:09:55,440 --> 00:09:57,839
about are working

00:09:56,640 --> 00:09:59,680
and like i said the only thing i don't

00:09:57,839 --> 00:10:04,240
care about is the

00:09:59,680 --> 00:10:06,000
um the sfp plus connectors

00:10:04,240 --> 00:10:08,240
i will concede that we haven't tested

00:10:06,000 --> 00:10:10,800
suspend resume and power management

00:10:08,240 --> 00:10:11,760
or even explored it very much at all but

00:10:10,800 --> 00:10:13,440
feature-wise

00:10:11,760 --> 00:10:15,440
you have all the board features

00:10:13,440 --> 00:10:16,880
available to you in the upstream kernel

00:10:15,440 --> 00:10:18,320
today

00:10:16,880 --> 00:10:20,160
and that means also that support is

00:10:18,320 --> 00:10:22,079
starting to flow into distress

00:10:20,160 --> 00:10:24,000
so as a simple example the debian

00:10:22,079 --> 00:10:26,000
bullseye um

00:10:24,000 --> 00:10:27,600
builds are currently based on five shot

00:10:26,000 --> 00:10:29,760
10 and i think they're likely to go gold

00:10:27,600 --> 00:10:31,519
with 5.10

00:10:29,760 --> 00:10:35,040
that will have support for everything

00:10:31,519 --> 00:10:35,040
except gigabit ethernet

00:10:35,440 --> 00:10:40,480
and i'm currently talking to you on a

00:10:37,519 --> 00:10:42,560
board with a usb 3 ethernet output back

00:10:40,480 --> 00:10:46,480
um i'm working to i'm talking to you on

00:10:42,560 --> 00:10:48,480
the workstation itself

00:10:46,480 --> 00:10:51,120
the situation for acpi is in some ways

00:10:48,480 --> 00:10:52,959
very similar but for different reasons

00:10:51,120 --> 00:10:54,240
um and the reason is that if you are

00:10:52,959 --> 00:10:56,560
working with peripherals that have a

00:10:54,240 --> 00:10:59,200
mature acpi model

00:10:56,560 --> 00:10:59,760
then the peripherals will just work so

00:10:59,200 --> 00:11:02,959
pci

00:10:59,760 --> 00:11:05,519
usb starter uart efi frame buffer

00:11:02,959 --> 00:11:06,720
are all going to just work including in

00:11:05,519 --> 00:11:09,360
old distros

00:11:06,720 --> 00:11:10,880
because of that mature acpi model so

00:11:09,360 --> 00:11:12,959
what that means is you could take centos

00:11:10,880 --> 00:11:15,279
eight which is based on 418 or debian

00:11:12,959 --> 00:11:18,160
buster which is based around 419

00:11:15,279 --> 00:11:19,600
and they will boot and run and they will

00:11:18,160 --> 00:11:20,079
have support for all those things i've

00:11:19,600 --> 00:11:21,600
listed

00:11:20,079 --> 00:11:23,120
which notably does not include the

00:11:21,600 --> 00:11:24,320
networking

00:11:23,120 --> 00:11:26,079
so just as you would with debian

00:11:24,320 --> 00:11:28,240
bullseye and device tree you have to

00:11:26,079 --> 00:11:30,560
have a usb 3 adapter out the back

00:11:28,240 --> 00:11:31,920
and that is going to change um so for

00:11:30,560 --> 00:11:34,240
the sock peripherals the things that

00:11:31,920 --> 00:11:36,800
don't have mature acpi models

00:11:34,240 --> 00:11:38,560
um there's a work in progress this also

00:11:36,800 --> 00:11:39,120
benefits enormously from the upstream

00:11:38,560 --> 00:11:40,959
work

00:11:39,120 --> 00:11:43,200
being undertaken by silicon board

00:11:40,959 --> 00:11:44,320
vendors in the community

00:11:43,200 --> 00:11:45,920
just to give you an example of where

00:11:44,320 --> 00:11:48,000
we're sitting at the moment solid runner

00:11:45,920 --> 00:11:50,560
has published an upstream ish 5.10

00:11:48,000 --> 00:11:54,880
kernel that contains 44 patches on top

00:11:50,560 --> 00:11:56,079
of 510 that enables sd card mmc gigabit

00:11:54,880 --> 00:11:59,760
ethernet and i suspect

00:11:56,079 --> 00:12:03,040
also the spf plus and to show progress

00:11:59,760 --> 00:12:05,120
i rebased that on 512 rc3 and the patch

00:12:03,040 --> 00:12:07,200
count dropped to 33

00:12:05,120 --> 00:12:09,760
and of those 33 patches i have

00:12:07,200 --> 00:12:11,680
personally seen at least half

00:12:09,760 --> 00:12:13,680
already posted or reposted during the

00:12:11,680 --> 00:12:16,720
513 cycle

00:12:13,680 --> 00:12:18,160
so i am personally hoping that com 513

00:12:16,720 --> 00:12:20,000
maybe 514

00:12:18,160 --> 00:12:22,880
network common come alive i can connect

00:12:20,000 --> 00:12:24,480
that usb 3 networking connector

00:12:22,880 --> 00:12:27,839
because i'd like to run district owners

00:12:24,480 --> 00:12:27,839
i'd like to run upstream kernels

00:12:27,920 --> 00:12:31,839
so finally the bit that i'm going to

00:12:29,600 --> 00:12:32,959
tell you about is living the arm and arm

00:12:31,839 --> 00:12:36,000
dream what it's like

00:12:32,959 --> 00:12:39,200
to work in the arm ecosystem and run

00:12:36,000 --> 00:12:40,800
arm ecosystem products every day

00:12:39,200 --> 00:12:43,040
and first off i would like to address

00:12:40,800 --> 00:12:46,079
something of the elephant in the room

00:12:43,040 --> 00:12:48,560
um which is the arm is already back on

00:12:46,079 --> 00:12:49,760
the desktop what you can see on the

00:12:48,560 --> 00:12:52,480
bottom of the screen here

00:12:49,760 --> 00:12:52,959
is an apple product a microsoft windows

00:12:52,480 --> 00:12:55,279
product

00:12:52,959 --> 00:12:56,000
and a chrome product and while the

00:12:55,279 --> 00:12:58,480
latter two

00:12:56,000 --> 00:12:59,600
are laptops they are chasing desktop use

00:12:58,480 --> 00:13:01,519
cases

00:12:59,600 --> 00:13:04,399
so we're already in the case where arm

00:13:01,519 --> 00:13:06,240
has returned to the desktop

00:13:04,399 --> 00:13:08,240
across a broad spectrum of devices and a

00:13:06,240 --> 00:13:09,360
broad spectrum of ecosystems

00:13:08,240 --> 00:13:11,279
the key thing we don't have at the

00:13:09,360 --> 00:13:13,920
moment is a very large

00:13:11,279 --> 00:13:15,040
vibrant gnu linux ecosystem so that's

00:13:13,920 --> 00:13:18,160
what i'm talking about

00:13:15,040 --> 00:13:22,320
when i talk about living the dream

00:13:18,160 --> 00:13:25,440
and um it is gloriously triumphantly

00:13:22,320 --> 00:13:27,600
fantastically boring um

00:13:25,440 --> 00:13:28,880
and what that means roughly speaking is

00:13:27,600 --> 00:13:30,240
we're done

00:13:28,880 --> 00:13:31,839
i think this could be the last time

00:13:30,240 --> 00:13:32,800
anybody manages to sneak onto a

00:13:31,839 --> 00:13:34,720
conference agenda

00:13:32,800 --> 00:13:36,160
simply by taking an arm workstation and

00:13:34,720 --> 00:13:37,519
using it as a daily driver

00:13:36,160 --> 00:13:39,920
it's not going to be interesting for

00:13:37,519 --> 00:13:42,720
very much longer

00:13:39,920 --> 00:13:44,160
and to give you a clear example i had to

00:13:42,720 --> 00:13:44,959
send a bug report well i had to send a

00:13:44,160 --> 00:13:46,720
tested buy

00:13:44,959 --> 00:13:48,399
to the kernel mailing list and i was

00:13:46,720 --> 00:13:49,839
half free through typing oh my system is

00:13:48,399 --> 00:13:50,880
fairly boring it's a very normal

00:13:49,839 --> 00:13:53,600
collection of software

00:13:50,880 --> 00:13:56,320
and hardware and then i realized that

00:13:53,600 --> 00:13:58,720
while the graphics card is just a gt710

00:13:56,320 --> 00:14:00,240
i'm running arm64 and i'd forgotten i

00:13:58,720 --> 00:14:02,480
was about to send a test device to

00:14:00,240 --> 00:14:03,839
mainlist and neglect to mention

00:14:02,480 --> 00:14:06,560
that i'm on this exotic hardware and

00:14:03,839 --> 00:14:08,399
that's how boring it can be day-to-day

00:14:06,560 --> 00:14:10,079
um and that's due to a lot of ecosystem

00:14:08,399 --> 00:14:12,000
progress um some of the ones that i'll

00:14:10,079 --> 00:14:12,880
call out that that i particularly think

00:14:12,000 --> 00:14:14,880
is important

00:14:12,880 --> 00:14:16,160
one is simply hardware hardware that is

00:14:14,880 --> 00:14:19,680
fast enough

00:14:16,160 --> 00:14:23,120
16 by 2 gigahertz cortex a72

00:14:19,680 --> 00:14:26,240
is a significant step forward in cheap

00:14:23,120 --> 00:14:29,279
available compute power um this board's

00:14:26,240 --> 00:14:32,560
about 750 dollars in case you wonder

00:14:29,279 --> 00:14:33,680
um ecosystem-wise we no longer see

00:14:32,560 --> 00:14:35,600
mobile

00:14:33,680 --> 00:14:36,959
websites just because we're running arm

00:14:35,600 --> 00:14:38,320
so various other places that used to

00:14:36,959 --> 00:14:39,440
auto detect you're running on arm and

00:14:38,320 --> 00:14:40,560
give you a mobile site have stopped

00:14:39,440 --> 00:14:42,880
doing that

00:14:40,560 --> 00:14:44,480
you can build open embedded projects

00:14:42,880 --> 00:14:45,680
very comprehensively now open embedded

00:14:44,480 --> 00:14:46,880
has worked on for a long time

00:14:45,680 --> 00:14:48,800
but unfortunately was not able to

00:14:46,880 --> 00:14:50,720
bootstrap go and go

00:14:48,800 --> 00:14:52,240
is you know penetrating further and

00:14:50,720 --> 00:14:53,600
further into the open source system

00:14:52,240 --> 00:14:54,240
there are far more components written in

00:14:53,600 --> 00:14:55,920
go

00:14:54,240 --> 00:14:58,480
and since gates go up he'll be able to

00:14:55,920 --> 00:14:59,839
build those for opening bedded as well

00:14:58,480 --> 00:15:01,760
and while binaries as we're about to

00:14:59,839 --> 00:15:03,279
discover are the last frontier

00:15:01,760 --> 00:15:05,920
there are many many more project

00:15:03,279 --> 00:15:08,160
shipping binaries for arm64 today

00:15:05,920 --> 00:15:09,199
and that also includes arm themselves uh

00:15:08,160 --> 00:15:11,920
so for a long time

00:15:09,199 --> 00:15:14,320
arms own compiler products for arm 64

00:15:11,920 --> 00:15:17,040
and arm could not run on m64 platforms

00:15:14,320 --> 00:15:17,920
they have addressed that now so in many

00:15:17,040 --> 00:15:21,199
ways it's boring

00:15:17,920 --> 00:15:23,839
a couple of rough edges the first one

00:15:21,199 --> 00:15:24,720
is no wide vine and that's not because i

00:15:23,839 --> 00:15:27,360
spend all day

00:15:24,720 --> 00:15:28,880
watching amazon prime movies um it's

00:15:27,360 --> 00:15:30,639
mostly so i could stream audio to be

00:15:28,880 --> 00:15:32,639
honest

00:15:30,639 --> 00:15:34,000
and i have a simple work around which is

00:15:32,639 --> 00:15:36,959
i own a tablet

00:15:34,000 --> 00:15:37,279
um however there are some issues you

00:15:36,959 --> 00:15:39,120
know

00:15:37,279 --> 00:15:40,639
it would be nice to have wired vine

00:15:39,120 --> 00:15:41,680
working to be a full member of the

00:15:40,639 --> 00:15:44,959
ecosystem

00:15:41,680 --> 00:15:48,720
um google products and mozilla products

00:15:44,959 --> 00:15:50,880
themselves normally ship with widevine

00:15:48,720 --> 00:15:54,160
but when they are repackaged by distros

00:15:50,880 --> 00:15:54,880
by as chromium or as distress firefox um

00:15:54,160 --> 00:15:57,199
distros

00:15:54,880 --> 00:15:58,880
cannot and do not include widevine

00:15:57,199 --> 00:16:01,759
planet plugins

00:15:58,880 --> 00:16:02,720
um there's long been discussions of wide

00:16:01,759 --> 00:16:05,040
vine workarounds on

00:16:02,720 --> 00:16:06,800
arm they've all appeared legally dubious

00:16:05,040 --> 00:16:09,120
however since i wrote this slide

00:16:06,800 --> 00:16:11,680
it has hit the news feeds that raspberry

00:16:09,120 --> 00:16:12,880
pi have started shipping a widevine um

00:16:11,680 --> 00:16:15,040
debian package

00:16:12,880 --> 00:16:17,040
it's a 32-bit debian package but this is

00:16:15,040 --> 00:16:19,440
a 32-bit platform

00:16:17,040 --> 00:16:21,120
so i haven't investigated closely but it

00:16:19,440 --> 00:16:22,880
may be reaching the point where other

00:16:21,120 --> 00:16:25,199
parts of the arm ecosystem are allowing

00:16:22,880 --> 00:16:27,920
us to do a workaround that doesn't have

00:16:25,199 --> 00:16:27,920
legal problems

00:16:28,240 --> 00:16:33,120
the other aspect that really hurts me

00:16:29,759 --> 00:16:33,120
day to day is video conferencing

00:16:33,519 --> 00:16:37,600
so some of them just work so google me

00:16:35,759 --> 00:16:38,560
works perfectly cisco webex works

00:16:37,600 --> 00:16:40,880
perfectly

00:16:38,560 --> 00:16:42,560
um zoom which is a big one for me

00:16:40,880 --> 00:16:44,800
because it's the one linaro uses

00:16:42,560 --> 00:16:46,399
does need some coke coaxing and the

00:16:44,800 --> 00:16:49,440
coaching is quite a lot to be honest

00:16:46,399 --> 00:16:50,639
the desktop app is not available assume

00:16:49,440 --> 00:16:53,440
does consider the web

00:16:50,639 --> 00:16:54,639
app to be a second-class citizen citizen

00:16:53,440 --> 00:16:57,120
every time you try to

00:16:54,639 --> 00:16:59,199
join a zoom call they try to encourage

00:16:57,120 --> 00:17:01,440
you to download an app that doesn't work

00:16:59,199 --> 00:17:03,199
um and it's also rather fiddly to run it

00:17:01,440 --> 00:17:05,360
doesn't run in firefox

00:17:03,199 --> 00:17:07,120
um and even to run it in chromium i was

00:17:05,360 --> 00:17:09,199
having to do a number of workarounds

00:17:07,120 --> 00:17:12,240
such as go and grub through the settings

00:17:09,199 --> 00:17:13,439
to force the gpu to deploy

00:17:12,240 --> 00:17:14,959
however worse than that was the fact

00:17:13,439 --> 00:17:16,079
that microsoft teams i have not been

00:17:14,959 --> 00:17:18,240
able to connect to any meeting

00:17:16,079 --> 00:17:20,079
whatsoever from an arm platform

00:17:18,240 --> 00:17:21,919
i don't know why it's not working it

00:17:20,079 --> 00:17:23,199
gets as far as trying to connect it puts

00:17:21,919 --> 00:17:24,319
the frog up saying we're trying to get

00:17:23,199 --> 00:17:26,319
you into the meeting and then two

00:17:24,319 --> 00:17:29,360
minutes later it throws you out

00:17:26,319 --> 00:17:29,840
um and yes there's nothing really to go

00:17:29,360 --> 00:17:31,200
on there

00:17:29,840 --> 00:17:33,120
it's not a clean error it just looks

00:17:31,200 --> 00:17:34,400
like a disconnection

00:17:33,120 --> 00:17:37,039
i did experimentally run some of the

00:17:34,400 --> 00:17:38,559
desktop video clients using qmu and x86

00:17:37,039 --> 00:17:41,120
emulation

00:17:38,559 --> 00:17:42,480
which does run you can see them launch

00:17:41,120 --> 00:17:43,840
but there is no practical way you could

00:17:42,480 --> 00:17:46,960
hold any kind of video conference with

00:17:43,840 --> 00:17:50,080
that performance

00:17:46,960 --> 00:17:51,679
so the final frontier for um what i've

00:17:50,080 --> 00:17:53,120
basically said with widevine

00:17:51,679 --> 00:17:54,880
and with video conferencing and

00:17:53,120 --> 00:17:55,360
everything else is that the thing we're

00:17:54,880 --> 00:17:57,840
missing

00:17:55,360 --> 00:17:59,600
are binaries you know the ecosystem the

00:17:57,840 --> 00:18:03,120
open source side of the world is

00:17:59,600 --> 00:18:04,480
done and i do realize

00:18:03,120 --> 00:18:06,480
i'm running on an operating system with

00:18:04,480 --> 00:18:07,360
relatively low market share for desktop

00:18:06,480 --> 00:18:08,960
use cases

00:18:07,360 --> 00:18:12,559
and running an architecture that's only

00:18:08,960 --> 00:18:13,919
just emerged as a serious desktop player

00:18:12,559 --> 00:18:15,600
but still i would like the binaries the

00:18:13,919 --> 00:18:18,000
bronies will come with time

00:18:15,600 --> 00:18:19,440
they definitely will come the ones that

00:18:18,000 --> 00:18:20,080
would make the most difference to me

00:18:19,440 --> 00:18:22,720
would be

00:18:20,080 --> 00:18:24,640
mozilla firefox ideally as a mozilla

00:18:22,720 --> 00:18:28,400
authored flat pack

00:18:24,640 --> 00:18:30,320
or google chrome um

00:18:28,400 --> 00:18:32,080
other areas where it's a bit thorny

00:18:30,320 --> 00:18:33,600
still things like tensorflow if you

00:18:32,080 --> 00:18:35,200
want to if you look at any tutorial it

00:18:33,600 --> 00:18:36,480
says how do i run tensorflow it says pip

00:18:35,200 --> 00:18:39,120
install tensorflow

00:18:36,480 --> 00:18:40,720
and that does not work on arm64 because

00:18:39,120 --> 00:18:43,760
the tensorflow wheel

00:18:40,720 --> 00:18:44,880
is not being built for arm 64. there are

00:18:43,760 --> 00:18:46,080
workers because you can build it

00:18:44,880 --> 00:18:47,440
yourself

00:18:46,080 --> 00:18:49,280
but basically you can't follow the

00:18:47,440 --> 00:18:50,240
tutorials because the tutorials don't

00:18:49,280 --> 00:18:52,640
work

00:18:50,240 --> 00:18:53,360
um and video conferencing idea that i'd

00:18:52,640 --> 00:18:55,039
prefer better

00:18:53,360 --> 00:18:57,039
web apps to be honest but something

00:18:55,039 --> 00:18:58,000
binary that would allow me to join video

00:18:57,039 --> 00:19:00,320
conferences

00:18:58,000 --> 00:19:03,840
uh across the board would make a big

00:19:00,320 --> 00:19:06,080
difference to me day to day

00:19:03,840 --> 00:19:08,080
and that's the kind of full summary that

00:19:06,080 --> 00:19:09,440
i have ilias is going to take up the

00:19:08,080 --> 00:19:12,080
thread now

00:19:09,440 --> 00:19:14,080
and talk about using honeycomb as a

00:19:12,080 --> 00:19:16,480
development target

00:19:14,080 --> 00:19:18,080
so hi uh daniel apart from the web

00:19:16,480 --> 00:19:19,039
conferencing applications another thing

00:19:18,080 --> 00:19:20,559
that's

00:19:19,039 --> 00:19:23,280
might be annoying for people is that you

00:19:20,559 --> 00:19:25,120
don't have support for slack or discord

00:19:23,280 --> 00:19:27,440
or the chat applications that

00:19:25,120 --> 00:19:30,960
are usable nowadays those are lacking

00:19:27,440 --> 00:19:30,960
r64 binaries as well

00:19:33,440 --> 00:19:42,480
so can you move to the next slide

00:19:39,200 --> 00:19:44,160
all right so

00:19:42,480 --> 00:19:45,760
what what we're trying to say here is

00:19:44,160 --> 00:19:47,919
that it's it's more than

00:19:45,760 --> 00:19:49,440
just a desktop i'm i'm usually working

00:19:47,919 --> 00:19:51,200
on camera development and on uber

00:19:49,440 --> 00:19:53,120
development on the efi part and i'm

00:19:51,200 --> 00:19:55,760
actually using the platform

00:19:53,120 --> 00:19:56,799
uh for three months now uh and i've

00:19:55,760 --> 00:20:00,240
completely switched

00:19:56,799 --> 00:20:02,640
all of my workflow from an xa x86 to an

00:20:00,240 --> 00:20:07,840
arm 64.

00:20:02,640 --> 00:20:07,840
can you move to the next slide

00:20:12,159 --> 00:20:16,400
so we've included some compilation times

00:20:14,799 --> 00:20:17,840
and how much time you need to compile a

00:20:16,400 --> 00:20:19,520
kernel or a u-boot just for

00:20:17,840 --> 00:20:21,200
for reference or for people to compare

00:20:19,520 --> 00:20:23,440
it to their own platforms

00:20:21,200 --> 00:20:25,919
uh but compiling a latest kernel with

00:20:23,440 --> 00:20:26,559
the r64 dev config takes roughly 12

00:20:25,919 --> 00:20:28,799
minutes

00:20:26,559 --> 00:20:30,320
and it's it's personally it's faster

00:20:28,799 --> 00:20:33,520
than the core i5

00:20:30,320 --> 00:20:36,720
that i had before the honeycomb hub is

00:20:33,520 --> 00:20:39,039
minimal it takes less than 13 seconds uh

00:20:36,720 --> 00:20:40,799
and it's we think it's faster than one

00:20:39,039 --> 00:20:41,600
lap most laptops that you can get

00:20:40,799 --> 00:20:43,200
nowadays

00:20:41,600 --> 00:20:45,600
at least if you get a four core one if

00:20:43,200 --> 00:20:47,760
you have a build server or

00:20:45,600 --> 00:20:49,919
laptops with extreme core counts then

00:20:47,760 --> 00:20:52,960
the box is going to be slower but

00:20:49,919 --> 00:20:53,840
that means the box is very usable as a

00:20:52,960 --> 00:20:56,080
day-to-day

00:20:53,840 --> 00:20:57,440
arm on our development platform uh for

00:20:56,080 --> 00:20:59,760
example the

00:20:57,440 --> 00:21:02,320
i'm also having to do some open embedded

00:20:59,760 --> 00:21:04,000
builds and due to the fact that the 16

00:21:02,320 --> 00:21:05,679
cores compared to the four cores that my

00:21:04,000 --> 00:21:08,080
core i5 has

00:21:05,679 --> 00:21:09,039
uh that yields a significant performance

00:21:08,080 --> 00:21:12,159
boost

00:21:09,039 --> 00:21:14,320
on the compilation times and as daniel

00:21:12,159 --> 00:21:15,760
mentioned

00:21:14,320 --> 00:21:18,320
it has support for all three arm

00:21:15,760 --> 00:21:22,080
instruction sets so running kvm

00:21:18,320 --> 00:21:24,159
is as as seamless as it would be

00:21:22,080 --> 00:21:25,760
and it's quite fast you can run multiple

00:21:24,159 --> 00:21:28,559
uh vms with

00:21:25,760 --> 00:21:30,799
pretty much no impact uh mostly because

00:21:28,559 --> 00:21:35,200
of the fact that we both have

00:21:30,799 --> 00:21:35,200
32 gig 32 gigs of ram anyway

00:21:35,280 --> 00:21:39,679
the last thing is gl mark score and

00:21:37,600 --> 00:21:41,520
we've included that only to

00:21:39,679 --> 00:21:44,240
give you an idea of how usable it is as

00:21:41,520 --> 00:21:47,360
a desktop so we both have a gt710

00:21:44,240 --> 00:21:48,960
uh as our daily gpu that we use

00:21:47,360 --> 00:21:50,640
daniel is getting a bit higher numbers i

00:21:48,960 --> 00:21:51,919
don't know why it's probably because of

00:21:50,640 --> 00:21:55,840
the different

00:21:51,919 --> 00:21:58,320
gt710 model uh i did try an

00:21:55,840 --> 00:21:59,840
amd r9 which had substantially better

00:21:58,320 --> 00:22:03,280
results but

00:21:59,840 --> 00:22:05,760
uh it i i got bitten by the

00:22:03,280 --> 00:22:06,480
hardware issue daniel mentioned on the

00:22:05,760 --> 00:22:08,640
beginning of

00:22:06,480 --> 00:22:10,720
the presentation so the card wasn't

00:22:08,640 --> 00:22:12,480
detected reliably i had to reboot

00:22:10,720 --> 00:22:14,159
sometimes i had to reboot two or three

00:22:12,480 --> 00:22:15,840
times to get it to detect

00:22:14,159 --> 00:22:18,320
so i just switched straight over to the

00:22:15,840 --> 00:22:18,320
gt7

00:22:19,280 --> 00:22:21,760
next slide

00:22:24,159 --> 00:22:27,600
so what what's been going on in ubud on

00:22:26,240 --> 00:22:30,000
this platform uh the

00:22:27,600 --> 00:22:31,520
as daniel said if you wanna a desktop

00:22:30,000 --> 00:22:32,960
experience and everyday desktop

00:22:31,520 --> 00:22:34,000
experience just go ahead and install

00:22:32,960 --> 00:22:35,360
ndk2

00:22:34,000 --> 00:22:37,039
uh you'll be able to install your

00:22:35,360 --> 00:22:40,480
platforms everything will

00:22:37,039 --> 00:22:42,159
your your distros everything will pretty

00:22:40,480 --> 00:22:43,679
much work in fact there's a presentation

00:22:42,159 --> 00:22:45,200
and a youtube video from a

00:22:43,679 --> 00:22:47,280
narrow employee installing windows on

00:22:45,200 --> 00:22:50,320
the music indicator

00:22:47,280 --> 00:22:52,080
uh so indk2 is pretty complete and since

00:22:50,320 --> 00:22:55,520
we wrote the presentation

00:22:52,080 --> 00:22:58,159
uh solid run has published binaries

00:22:55,520 --> 00:22:59,760
for indie k2 you can pick up and flash

00:22:58,159 --> 00:23:02,159
instead of going through the compilation

00:22:59,760 --> 00:23:04,159
process yourself

00:23:02,159 --> 00:23:05,679
uh but i was mostly interested in your

00:23:04,159 --> 00:23:08,799
boot so youboot

00:23:05,679 --> 00:23:11,039
was very well behaved on the board so i

00:23:08,799 --> 00:23:13,280
could i pretty much installed my distro

00:23:11,039 --> 00:23:15,120
uh i am using debian and i pretty much

00:23:13,280 --> 00:23:17,039
installed debian using ubud

00:23:15,120 --> 00:23:18,159
i didn't have to do anything there's

00:23:17,039 --> 00:23:20,559
there's one minor

00:23:18,159 --> 00:23:22,480
uh problem at the moment in hebrew set

00:23:20,559 --> 00:23:24,640
variable is not supported

00:23:22,480 --> 00:23:26,240
so the the whole installer runs the

00:23:24,640 --> 00:23:28,159
operating system works correctly

00:23:26,240 --> 00:23:30,880
everything works the lvfs works your

00:23:28,159 --> 00:23:31,280
your encryption on the drive works uh

00:23:30,880 --> 00:23:33,360
but

00:23:31,280 --> 00:23:35,360
the the boot variable you need to put up

00:23:33,360 --> 00:23:36,000
the the system after the installation

00:23:35,360 --> 00:23:37,840
ends

00:23:36,000 --> 00:23:39,760
is not working so i had to set that

00:23:37,840 --> 00:23:41,200
manually but that's pretty much the only

00:23:39,760 --> 00:23:43,120
thing i did

00:23:41,200 --> 00:23:44,960
uh another thing that works very well on

00:23:43,120 --> 00:23:48,559
you boot is secured

00:23:44,960 --> 00:23:50,960
and the security fi variables in an

00:23:48,559 --> 00:23:53,360
in a manner that it's all vfi compliant

00:23:50,960 --> 00:23:54,240
so the board has a secure ice core ce

00:23:53,360 --> 00:23:56,640
prom

00:23:54,240 --> 00:23:58,320
or an rpm b with an emmc that you can

00:23:56,640 --> 00:23:59,440
use to store the variables and all those

00:23:58,320 --> 00:24:02,320
are protected from the

00:23:59,440 --> 00:24:03,840
from the user access so uh the square c

00:24:02,320 --> 00:24:07,200
is not visible from linux and you can

00:24:03,840 --> 00:24:09,120
change or tamper with the variables

00:24:07,200 --> 00:24:10,559
another target we're testing on is the

00:24:09,120 --> 00:24:12,159
capsule updates on youboot which

00:24:10,559 --> 00:24:14,000
recently got merged and this and

00:24:12,159 --> 00:24:15,760
those seem to be working as well so you

00:24:14,000 --> 00:24:18,480
can perform a firmware update

00:24:15,760 --> 00:24:19,120
without having to either write the spine

00:24:18,480 --> 00:24:21,360
or the

00:24:19,120 --> 00:24:22,799
the firmware leaves or the emmc card

00:24:21,360 --> 00:24:26,240
depending on what you've

00:24:22,799 --> 00:24:28,559
you've selected and then support for the

00:24:26,240 --> 00:24:30,799
efi tcg protocol as well in ubud

00:24:28,559 --> 00:24:32,799
so if you compile a firmware tpm or if

00:24:30,799 --> 00:24:36,559
you if you have some kind of hardware

00:24:32,799 --> 00:24:36,559
tpm you can do a boot at the station

00:24:37,600 --> 00:24:42,720
exactly how the efi spec describes it

00:24:41,039 --> 00:24:44,559
and again the runtime environments are

00:24:42,720 --> 00:24:46,000
working set variable is not the runtime

00:24:44,559 --> 00:24:49,039
set variable is not but that's

00:24:46,000 --> 00:24:50,080
a problem we're working on uh one thing

00:24:49,039 --> 00:24:52,400
you get

00:24:50,080 --> 00:24:53,760
if you run ubu instead of edk2 is that

00:24:52,400 --> 00:24:55,520
you can have

00:24:53,760 --> 00:24:57,120
both your efi secure boot and secure

00:24:55,520 --> 00:25:01,679
variables working

00:24:57,120 --> 00:25:04,559
uh and an uh the way dk2 works and the

00:25:01,679 --> 00:25:07,039
way the secure variables work in indk2

00:25:04,559 --> 00:25:08,640
uh prohibit you from running variables

00:25:07,039 --> 00:25:12,159
in conjunction with opti you

00:25:08,640 --> 00:25:13,679
can do that right now and it presents a

00:25:12,159 --> 00:25:15,840
number of interesting use cases for the

00:25:13,679 --> 00:25:15,840
future

00:25:16,159 --> 00:25:18,600
uh daniel i think that's the last one

00:25:17,600 --> 00:25:20,799
it's back to you for the

00:25:18,600 --> 00:25:24,320
[Music]

00:25:20,799 --> 00:25:27,039
uh for the console yep um

00:25:24,320 --> 00:25:28,159
so last thing we wanted to mention um oh

00:25:27,039 --> 00:25:31,200
one too far

00:25:28,159 --> 00:25:32,159
is bringing the micro bmc alive um so we

00:25:31,200 --> 00:25:34,799
have started

00:25:32,159 --> 00:25:36,480
a um tiny firmware that basically at the

00:25:34,799 --> 00:25:40,159
moment can just poke the reset

00:25:36,480 --> 00:25:44,640
lines um right recent power lines

00:25:40,159 --> 00:25:46,480
i hope shortly to get it enabled for um

00:25:44,640 --> 00:25:48,320
the uart as well but if you're

00:25:46,480 --> 00:25:49,760
interested you can find it here

00:25:48,320 --> 00:25:51,840
um and i'd really like to do this

00:25:49,760 --> 00:25:55,039
because the s10 32

00:25:51,840 --> 00:25:56,720
f4 f0 is actually cheaper than the ftdi

00:25:55,039 --> 00:25:58,720
that people put on a lot of places

00:25:56,720 --> 00:26:00,159
so i'd really like to see a decent micro

00:25:58,720 --> 00:26:01,919
bmc firmware so we can have more

00:26:00,159 --> 00:26:02,799
powerful board automation built into

00:26:01,919 --> 00:26:04,559
things

00:26:02,799 --> 00:26:06,000
uh and it just happened that honeycomb

00:26:04,559 --> 00:26:07,520
was the first platform that i was able

00:26:06,000 --> 00:26:11,520
to buy to do it

00:26:07,520 --> 00:26:14,080
i do actually have a modified stm32f04

00:26:11,520 --> 00:26:15,600
in a lab box somewhere that was hacked

00:26:14,080 --> 00:26:19,600
up for me to develop the firmware

00:26:15,600 --> 00:26:22,320
but to have it working here was perfect

00:26:19,600 --> 00:26:23,520
um and that's it apart from the comments

00:26:22,320 --> 00:26:26,240
i've seen plenty of comments

00:26:23,520 --> 00:26:27,760
um biggest one has been about that x-16

00:26:26,240 --> 00:26:30,080
slot and present detect

00:26:27,760 --> 00:26:31,279
um i believe the presence of tech lines

00:26:30,080 --> 00:26:33,039
float

00:26:31,279 --> 00:26:34,400
so what happens is sometimes it detects

00:26:33,039 --> 00:26:37,520
sometimes it doesn't and

00:26:34,400 --> 00:26:39,600
on some boards it never has problems um

00:26:37,520 --> 00:26:41,360
but we've seen it across multiple boards

00:26:39,600 --> 00:26:43,840
i've seen it on the

00:26:41,360 --> 00:26:44,400
uefi firmware and the u-group firmware

00:26:43,840 --> 00:26:45,760
um

00:26:44,400 --> 00:26:47,760
and i haven't been able to find anything

00:26:45,760 --> 00:26:49,039
in the schematics that would solve it

00:26:47,760 --> 00:26:50,480
other than sticking a blob of solder

00:26:49,039 --> 00:26:52,320
over the back of the usb connector at

00:26:50,480 --> 00:26:53,440
the back of the pcie connector

00:26:52,320 --> 00:26:55,840
so i would like to investigate one

00:26:53,440 --> 00:26:57,440
further to be honest um but like i say

00:26:55,840 --> 00:26:59,120
to get day-to-day work done

00:26:57,440 --> 00:27:00,640
i've used hardware that forces the

00:26:59,120 --> 00:27:02,880
presence detect to work reliably every

00:27:00,640 --> 00:27:02,880
time

00:27:04,400 --> 00:27:10,400
how many for time

00:27:07,600 --> 00:27:11,039
you've got about three minutes oh

00:27:10,400 --> 00:27:14,240
excellent

00:27:11,039 --> 00:27:15,520
uh that's better than hoped um so i'm

00:27:14,240 --> 00:27:16,799
just looking back through the chat to

00:27:15,520 --> 00:27:20,159
see if there's anything else i've

00:27:16,799 --> 00:27:22,799
missed um

00:27:20,159 --> 00:27:24,159
yes so talking about the python um wheel

00:27:22,799 --> 00:27:25,200
stuff uh lots of people have said that

00:27:24,159 --> 00:27:26,960
narrow publishes

00:27:25,200 --> 00:27:28,960
a wheel that makes tensorflow work

00:27:26,960 --> 00:27:30,240
that's fantastic but i don't care

00:27:28,960 --> 00:27:33,200
because i want pip

00:27:30,240 --> 00:27:34,080
install tensorflow to work that's what

00:27:33,200 --> 00:27:37,200
all the docs

00:27:34,080 --> 00:27:38,559
and things tell you to do um so yes i

00:27:37,200 --> 00:27:40,640
know i can i've

00:27:38,559 --> 00:27:42,720
i think back 2017 i had to rebuild it by

00:27:40,640 --> 00:27:44,640
hand now you can find a binary that's

00:27:42,720 --> 00:27:45,600
not available in pip under the standard

00:27:44,640 --> 00:27:47,279
naming

00:27:45,600 --> 00:27:48,799
um and it's not just tensorflow

00:27:47,279 --> 00:27:50,399
tensorflow is just an example this does

00:27:48,799 --> 00:27:51,679
pervade particularly the python

00:27:50,399 --> 00:27:55,360
ecosystem

00:27:51,679 --> 00:27:56,399
um and there are lots of packages that

00:27:55,360 --> 00:27:58,480
you can't fetch

00:27:56,399 --> 00:28:00,399
the interesting thing is that pip denies

00:27:58,480 --> 00:28:00,799
their existence so it pre-filters a bit

00:28:00,399 --> 00:28:02,880
like

00:28:00,799 --> 00:28:03,919
um play store does so you type pip

00:28:02,880 --> 00:28:05,440
install tensorflow

00:28:03,919 --> 00:28:07,200
and it doesn't even say it's not

00:28:05,440 --> 00:28:09,919
available for your architecture

00:28:07,200 --> 00:28:10,960
it says it's not there it doesn't exist

00:28:09,919 --> 00:28:12,480
which means you have to spend a little

00:28:10,960 --> 00:28:14,080
bit more time

00:28:12,480 --> 00:28:15,760
watching it do the downloading verbose

00:28:14,080 --> 00:28:17,919
mode to figure out why actually happened

00:28:15,760 --> 00:28:19,039
and then you realize that the package

00:28:17,919 --> 00:28:20,720
that you're trying to fetch

00:28:19,039 --> 00:28:22,080
contains binary components that aren't

00:28:20,720 --> 00:28:25,360
available to you

00:28:22,080 --> 00:28:25,840
um python also is quite good with its

00:28:25,360 --> 00:28:28,159
kind of

00:28:25,840 --> 00:28:29,919
set up utils and other things to cope

00:28:28,159 --> 00:28:31,279
with source only ecosystems it's not

00:28:29,919 --> 00:28:33,600
that hard to go and fetch

00:28:31,279 --> 00:28:35,039
the packages and use the python tools to

00:28:33,600 --> 00:28:36,960
rebuild them

00:28:35,039 --> 00:28:38,240
but it's a rough edge and that's where

00:28:36,960 --> 00:28:39,440
that's what i mean by the fact it's

00:28:38,240 --> 00:28:42,080
boring and we're done

00:28:39,440 --> 00:28:43,840
those ref edges are now relatively

00:28:42,080 --> 00:28:45,200
modest things like getting binaries

00:28:43,840 --> 00:28:47,919
and even binary for some of the open

00:28:45,200 --> 00:28:50,720
source components via proper means

00:28:47,919 --> 00:28:53,039
are what we haven't currently got and i

00:28:50,720 --> 00:28:54,880
think we would like

00:28:53,039 --> 00:28:56,960
i don't think i missed anything else in

00:28:54,880 --> 00:28:58,960
the chat

00:28:56,960 --> 00:29:01,679
just spinning back somebody asked about

00:28:58,960 --> 00:29:05,679
porting riscos

00:29:01,679 --> 00:29:08,080
so the hardware is sbbr compliant so

00:29:05,679 --> 00:29:09,760
i know sahaj for example has run windows

00:29:08,080 --> 00:29:12,720
on it successfully

00:29:09,760 --> 00:29:13,600
based on the sbbr boot and the driver

00:29:12,720 --> 00:29:16,880
set is a bit weak

00:29:13,600 --> 00:29:18,159
once windows has booted

00:29:16,880 --> 00:29:20,240
and i think you might see the same for

00:29:18,159 --> 00:29:20,960
other sbr things they're assuming sbsa

00:29:20,240 --> 00:29:23,919
hardware

00:29:20,960 --> 00:29:26,240
and this is not sbsa hardware so whether

00:29:23,919 --> 00:29:27,360
riskos works or not will depend on what

00:29:26,240 --> 00:29:29,120
drivers it's got

00:29:27,360 --> 00:29:30,960
but if it wants to draw on the efi frame

00:29:29,120 --> 00:29:32,880
buffer and talk to usb

00:29:30,960 --> 00:29:34,720
using the standardized drive mechanisms

00:29:32,880 --> 00:29:36,080
it might well come up it might

00:29:34,720 --> 00:29:37,919
it's certainly worth trying and it's

00:29:36,080 --> 00:29:38,960
certainly worth trying to make it work

00:29:37,919 --> 00:29:40,960
because

00:29:38,960 --> 00:29:42,480
um it allows things like risk us to do

00:29:40,960 --> 00:29:44,399
self-hosted build at pace

00:29:42,480 --> 00:29:46,159
you know this thing is seven or seven

00:29:44,399 --> 00:29:47,440
times quicker than a raspberry pi 4.

00:29:46,159 --> 00:29:49,600
so they're not comparable they're

00:29:47,440 --> 00:29:52,399
they're the things you can do with

00:29:49,600 --> 00:29:53,679
a build machine that powerful is quite

00:29:52,399 --> 00:29:56,720
different to what you can do with an

00:29:53,679 --> 00:29:56,720
embedded board like the pie

00:29:57,440 --> 00:30:00,799
and that i think does come to my time

00:29:58,960 --> 00:30:03,200
because i can see the time clicking down

00:30:00,799 --> 00:30:04,799
so thank you all very much for joining i

00:30:03,200 --> 00:30:05,679
will go back and read the comments to

00:30:04,799 --> 00:30:06,880
make sure i didn't

00:30:05,679 --> 00:30:08,799
miss anything that i should have been

00:30:06,880 --> 00:30:12,000
learning from it because i i do often

00:30:08,799 --> 00:30:13,440
quite find some bits pieces here

00:30:12,000 --> 00:30:16,159
but yeah thank you all very much indeed

00:30:13,440 --> 00:30:16,159
for your attention

00:30:16,799 --> 00:30:20,799
thanks ilyas thanks daniel thank you

00:30:19,279 --> 00:30:23,840
very much

00:30:20,799 --> 00:30:23,840

YouTube URL: https://www.youtube.com/watch?v=tloLT4EPSpo


