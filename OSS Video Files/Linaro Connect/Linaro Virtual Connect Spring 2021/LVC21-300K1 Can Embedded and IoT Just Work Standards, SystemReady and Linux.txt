Title: LVC21-300K1 Can Embedded and IoT Just Work Standards, SystemReady and Linux
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	This talk will provide an overview of Arm SystemReady, a recently launched certification program based on a set of standards that enable interoperability with generic, off-the-shelf operating systems and hypervisors. SystemReady extends the former Arm ServerReady program to the embedded and IoT sector and we will cover the steps needed to make software â€˜Just Workâ€™ on these diverse platforms.
Captions: 
	00:00:04,160 --> 00:00:07,600
uh

00:00:05,040 --> 00:00:09,440
good morning everyone uh welcome to the

00:00:07,600 --> 00:00:12,160
third day of lenaro connect

00:00:09,440 --> 00:00:13,840
um and thank you for having me here to

00:00:12,160 --> 00:00:15,679
talk about

00:00:13,840 --> 00:00:17,279
my name is grant lightly i am a senior

00:00:15,679 --> 00:00:19,119
technical director at arm

00:00:17,279 --> 00:00:21,279
and i'm the architect of the system

00:00:19,119 --> 00:00:25,119
ready ir or iot ready

00:00:21,279 --> 00:00:26,560
band and today i'm here to talk about

00:00:25,119 --> 00:00:28,400
platform standards

00:00:26,560 --> 00:00:31,519
uh how they apply to the rich compute

00:00:28,400 --> 00:00:33,840
embedded in iot ecosystem

00:00:31,519 --> 00:00:35,680
and i want to put forward the question

00:00:33,840 --> 00:00:38,079
can embedded in iot

00:00:35,680 --> 00:00:40,000
just work we've talked about just work

00:00:38,079 --> 00:00:42,719
we've talked about things being boring

00:00:40,000 --> 00:00:44,399
in the armed server space and that does

00:00:42,719 --> 00:00:45,520
an awful lot for enabling operating

00:00:44,399 --> 00:00:48,239
systems and

00:00:45,520 --> 00:00:49,520
really making for a richer arm compute

00:00:48,239 --> 00:00:51,360
ecosystem

00:00:49,520 --> 00:00:52,800
so we want to talk about how we can do

00:00:51,360 --> 00:00:54,480
that in other areas

00:00:52,800 --> 00:00:57,120
um now first of all i just want to shout

00:00:54,480 --> 00:00:58,320
out to lenaro for this tool and how this

00:00:57,120 --> 00:00:59,680
conference is set up

00:00:58,320 --> 00:01:01,760
i've been really impressed with how

00:00:59,680 --> 00:01:04,320
interactive it has been uh

00:01:01,760 --> 00:01:05,439
go ahead i mean i already see everyone

00:01:04,320 --> 00:01:07,200
people doing this but

00:01:05,439 --> 00:01:08,640
ask questions i will try to leave some

00:01:07,200 --> 00:01:11,439
questions at the or to

00:01:08,640 --> 00:01:12,799
answer questions at the end um but yes

00:01:11,439 --> 00:01:16,400
please anything that comes up

00:01:12,799 --> 00:01:16,400
ask and i'll try to answer them

00:01:17,200 --> 00:01:21,840
so i want to talk about standardization

00:01:20,000 --> 00:01:23,759
and if i'm talking about standardization

00:01:21,840 --> 00:01:24,720
i have to start with how choosing

00:01:23,759 --> 00:01:27,040
standards

00:01:24,720 --> 00:01:28,880
is a balancing app to find the right fit

00:01:27,040 --> 00:01:31,360
for the ecosystems

00:01:28,880 --> 00:01:32,479
uh standards they bring predictability

00:01:31,360 --> 00:01:34,640
needed to support

00:01:32,479 --> 00:01:35,840
so um for software to support armed

00:01:34,640 --> 00:01:37,280
platforms

00:01:35,840 --> 00:01:39,520
uh but if there's too much

00:01:37,280 --> 00:01:41,520
standardization then we end up with a

00:01:39,520 --> 00:01:43,119
rigid platform and partners don't have

00:01:41,520 --> 00:01:46,000
the flexibility they need

00:01:43,119 --> 00:01:47,280
to bring products to the market on the

00:01:46,000 --> 00:01:48,960
other hand

00:01:47,280 --> 00:01:51,600
if we don't have standards or don't have

00:01:48,960 --> 00:01:54,240
enough standards then that brings along

00:01:51,600 --> 00:01:55,680
a high software maintenance cost and

00:01:54,240 --> 00:02:00,159
engineering cost

00:01:55,680 --> 00:02:01,600
to port software onto the new platform

00:02:00,159 --> 00:02:03,200
and then right in the middle there's a

00:02:01,600 --> 00:02:04,640
balance there on

00:02:03,200 --> 00:02:06,640
choosing standards that enable

00:02:04,640 --> 00:02:09,679
innovation while also

00:02:06,640 --> 00:02:10,959
supporting interoperability and we

00:02:09,679 --> 00:02:13,520
learned this

00:02:10,959 --> 00:02:14,239
really well when uh when we started

00:02:13,520 --> 00:02:16,800
looking at

00:02:14,239 --> 00:02:17,520
doing armed servers in the course of

00:02:16,800 --> 00:02:19,840
that

00:02:17,520 --> 00:02:21,840
we talked with our partners we talked

00:02:19,840 --> 00:02:23,280
with silicon and software partners on

00:02:21,840 --> 00:02:25,520
what it is that they needed

00:02:23,280 --> 00:02:26,560
to be able to bring across the market

00:02:25,520 --> 00:02:30,160
and

00:02:26,560 --> 00:02:32,400
support each other and out of that came

00:02:30,160 --> 00:02:33,360
the armed server ready certification

00:02:32,400 --> 00:02:36,400
program

00:02:33,360 --> 00:02:38,720
which was based on a set of standards

00:02:36,400 --> 00:02:40,400
and testing to confirm that platforms

00:02:38,720 --> 00:02:43,200
met what was required by the

00:02:40,400 --> 00:02:45,360
operating systems and really we've had

00:02:43,200 --> 00:02:47,920
tremendous success with this

00:02:45,360 --> 00:02:49,360
this is the expectation now of if you're

00:02:47,920 --> 00:02:50,239
putting together an armed server

00:02:49,360 --> 00:02:52,239
platform

00:02:50,239 --> 00:02:53,440
that is going to run an off-the-shelf

00:02:52,239 --> 00:02:57,280
operating system

00:02:53,440 --> 00:02:59,200
be that windows or vmware esxi

00:02:57,280 --> 00:03:01,200
or one of the enterprise linux distros

00:02:59,200 --> 00:03:03,120
like sles or rel

00:03:01,200 --> 00:03:05,200
you have to be server ready you have to

00:03:03,120 --> 00:03:08,319
meet these standards

00:03:05,200 --> 00:03:09,120
so with that success we started looking

00:03:08,319 --> 00:03:12,400
at

00:03:09,120 --> 00:03:13,519
what can we do to do that same thing and

00:03:12,400 --> 00:03:16,080
bring that same

00:03:13,519 --> 00:03:17,599
interoperability and just works to other

00:03:16,080 --> 00:03:20,959
ecosystems

00:03:17,599 --> 00:03:23,200
and so late last year we announced

00:03:20,959 --> 00:03:24,959
the system ready program and the

00:03:23,200 --> 00:03:26,000
system-ready program expands on the

00:03:24,959 --> 00:03:27,760
success

00:03:26,000 --> 00:03:29,200
of the server ready certification

00:03:27,760 --> 00:03:32,080
program

00:03:29,200 --> 00:03:32,799
however if we had approached this of

00:03:32,080 --> 00:03:34,720
taking

00:03:32,799 --> 00:03:37,920
what we did in server ready and just

00:03:34,720 --> 00:03:39,840
apply that over the entire arm ecosystem

00:03:37,920 --> 00:03:42,080
it simply wouldn't have worked right

00:03:39,840 --> 00:03:43,760
because each part of the arm ecosystem

00:03:42,080 --> 00:03:45,360
has different characteristics and

00:03:43,760 --> 00:03:48,480
different needs

00:03:45,360 --> 00:03:48,959
so we needed to take a look at each at

00:03:48,480 --> 00:03:52,000
some

00:03:48,959 --> 00:03:53,439
specific places determine what they need

00:03:52,000 --> 00:03:56,159
and choose standards that

00:03:53,439 --> 00:03:58,080
that are appropriate for that area so

00:03:56,159 --> 00:04:01,200
what we have with system ready

00:03:58,080 --> 00:04:04,560
is instead of uh we have one program

00:04:01,200 --> 00:04:07,519
that has multiple bands each targeted at

00:04:04,560 --> 00:04:08,640
uh particular use cases and ecosystems

00:04:07,519 --> 00:04:09,519
so i'm just going to go through these

00:04:08,640 --> 00:04:12,799
quickly

00:04:09,519 --> 00:04:12,799
um over on

00:04:12,959 --> 00:04:16,720
over on the left hand side we've got

00:04:14,400 --> 00:04:18,400
system ready sr our server ready

00:04:16,720 --> 00:04:20,639
and this is simply the server ready

00:04:18,400 --> 00:04:22,320
program rebranded under system ready

00:04:20,639 --> 00:04:24,479
to show how this is part of the larger

00:04:22,320 --> 00:04:27,520
hole

00:04:24,479 --> 00:04:30,320
next one over is es or embedded server

00:04:27,520 --> 00:04:32,240
and what we wanted to do with es was

00:04:30,320 --> 00:04:32,800
take the success that we had with server

00:04:32,240 --> 00:04:34,560
ready

00:04:32,800 --> 00:04:36,880
with the shrink wrapped offering system

00:04:34,560 --> 00:04:37,680
market and be able to run that or

00:04:36,880 --> 00:04:40,800
support that

00:04:37,680 --> 00:04:43,040
on a larger variety of arm hardware

00:04:40,800 --> 00:04:44,479
there are a lot of rmsocs out there that

00:04:43,040 --> 00:04:46,400
are

00:04:44,479 --> 00:04:47,919
performant devices that are great

00:04:46,400 --> 00:04:48,639
candidates for running general purpose

00:04:47,919 --> 00:04:50,400
software

00:04:48,639 --> 00:04:52,160
and so es takes the server ready

00:04:50,400 --> 00:04:53,840
standards it relaxes some of the

00:04:52,160 --> 00:04:57,199
hardware requirements

00:04:53,840 --> 00:05:00,880
but still allows the uh the

00:04:57,199 --> 00:05:02,560
shrink wrapped os to run next one over

00:05:00,880 --> 00:05:05,360
is ir which is the primary one i'm

00:05:02,560 --> 00:05:08,639
talking about today and that's iot ready

00:05:05,360 --> 00:05:11,360
so the ir program is focused on

00:05:08,639 --> 00:05:13,280
primarily the embedded linux ecosystem

00:05:11,360 --> 00:05:15,919
and some embedded bsd as well

00:05:13,280 --> 00:05:16,960
as well as uh and other embedded os's

00:05:15,919 --> 00:05:18,960
but primarily

00:05:16,960 --> 00:05:20,080
there is an embedded linux ecosystem

00:05:18,960 --> 00:05:21,919
that is really healthy

00:05:20,080 --> 00:05:23,919
and we needed to choose standards that

00:05:21,919 --> 00:05:24,800
made sense and fit well with what was

00:05:23,919 --> 00:05:27,520
already happening

00:05:24,800 --> 00:05:29,120
in the embedded linux space and then

00:05:27,520 --> 00:05:32,320
finally there's one more band called

00:05:29,120 --> 00:05:35,039
ls and that's linux group server

00:05:32,320 --> 00:05:36,240
which is targeted for our hyperscale

00:05:35,039 --> 00:05:37,919
partners

00:05:36,240 --> 00:05:39,759
for the platforms where they want to

00:05:37,919 --> 00:05:42,320
control the entire stack of firmware

00:05:39,759 --> 00:05:43,039
and there's a definite preference for a

00:05:42,320 --> 00:05:45,600
linux boot

00:05:43,039 --> 00:05:46,960
based firmware stack right so within

00:05:45,600 --> 00:05:48,479
each of these bands

00:05:46,960 --> 00:05:52,160
we can choose a set of standards that

00:05:48,479 --> 00:05:55,360
make sense within that

00:05:52,160 --> 00:05:57,680
now if i back up a little bit further uh

00:05:55,360 --> 00:05:58,560
server ready is part of a larger

00:05:57,680 --> 00:06:01,280
initiative

00:05:58,560 --> 00:06:03,520
that arms uh our arms broader push into

00:06:01,280 --> 00:06:06,080
the edge and iot infrastructure market

00:06:03,520 --> 00:06:08,000
and this is our project cassini a

00:06:06,080 --> 00:06:09,280
project cassini is designed to ensure a

00:06:08,000 --> 00:06:12,560
cloud-native experience

00:06:09,280 --> 00:06:13,280
across a diverse set and secure edge

00:06:12,560 --> 00:06:16,000
ecosystem

00:06:13,280 --> 00:06:17,759
and it operates across three vectors the

00:06:16,000 --> 00:06:18,960
first vector is platform standards which

00:06:17,759 --> 00:06:21,120
is where system ready

00:06:18,960 --> 00:06:22,639
sits and these standards are a minimal

00:06:21,120 --> 00:06:24,479
set of features in silicon

00:06:22,639 --> 00:06:27,680
to support and firmware to support the

00:06:24,479 --> 00:06:30,639
os or hypervisor

00:06:27,680 --> 00:06:31,360
second is security i mean arm believes

00:06:30,639 --> 00:06:33,680
that

00:06:31,360 --> 00:06:34,720
all connected devices must meet key

00:06:33,680 --> 00:06:36,720
security goals

00:06:34,720 --> 00:06:39,199
and you utilize a route of trust to

00:06:36,720 --> 00:06:42,160
ensure a baseline of security

00:06:39,199 --> 00:06:44,000
so the psa certified program builds

00:06:42,160 --> 00:06:44,800
assurance that devices have a security

00:06:44,000 --> 00:06:46,960
baseline

00:06:44,800 --> 00:06:48,240
aligned with key standards and use case

00:06:46,960 --> 00:06:51,039
requirements

00:06:48,240 --> 00:06:52,560
in addition the parsec program is an

00:06:51,039 --> 00:06:53,599
open source project that provides

00:06:52,560 --> 00:06:56,639
cross-platform

00:06:53,599 --> 00:06:58,400
architecture agnostic apis to

00:06:56,639 --> 00:07:00,560
provide those security features into

00:06:58,400 --> 00:07:02,080
applications

00:07:00,560 --> 00:07:03,919
and then finally there is the cloud

00:07:02,080 --> 00:07:06,960
native stacks and so

00:07:03,919 --> 00:07:09,440
the project cassini aims to

00:07:06,960 --> 00:07:11,120
uh well as iot market demands i mean

00:07:09,440 --> 00:07:14,400
they're very based on segment

00:07:11,120 --> 00:07:15,360
so use cases defining them is rather

00:07:14,400 --> 00:07:17,280
complex

00:07:15,360 --> 00:07:19,440
and involves secure gateways aggregation

00:07:17,280 --> 00:07:21,280
devices cloud platforms connectivity

00:07:19,440 --> 00:07:22,880
device and data management solutions

00:07:21,280 --> 00:07:24,000
right there's a lot of pieces that go

00:07:22,880 --> 00:07:26,240
into that

00:07:24,000 --> 00:07:28,240
what project cassini does is it provides

00:07:26,240 --> 00:07:28,800
reference solutions that are developed

00:07:28,240 --> 00:07:31,039
in

00:07:28,800 --> 00:07:32,400
close partnership with the ecosystem and

00:07:31,039 --> 00:07:35,680
serve as building blocks for

00:07:32,400 --> 00:07:36,960
infrastructure and iot edge use cases

00:07:35,680 --> 00:07:39,039
if you want to know more about project

00:07:36,960 --> 00:07:40,800
cassini you can contact us at arm

00:07:39,039 --> 00:07:43,199
there's a link at the end

00:07:40,800 --> 00:07:46,720
but i'm going to move back and to talk

00:07:43,199 --> 00:07:46,720
specifically about system ready

00:07:47,199 --> 00:07:51,440
now just like the server ready program

00:07:49,680 --> 00:07:52,479
the system ready program is built on

00:07:51,440 --> 00:07:54,240
three things

00:07:52,479 --> 00:07:56,160
it's built on hardware requirements it's

00:07:54,240 --> 00:07:59,199
built on firmware requirements and it's

00:07:56,160 --> 00:08:00,639
built on testing hardware requirements

00:07:59,199 --> 00:08:01,759
are defined in the the base system

00:08:00,639 --> 00:08:04,160
architecture document

00:08:01,759 --> 00:08:04,960
and this is if you're familiar with the

00:08:04,160 --> 00:08:07,120
sbsa

00:08:04,960 --> 00:08:09,599
or server based system architecture we

00:08:07,120 --> 00:08:11,759
took that document we reworked it

00:08:09,599 --> 00:08:13,280
factored out the generic portions that

00:08:11,759 --> 00:08:15,759
apply to multiple bands

00:08:13,280 --> 00:08:17,520
and created this this new document and

00:08:15,759 --> 00:08:18,720
this is the hardware requirements

00:08:17,520 --> 00:08:20,560
how you should implement the arm

00:08:18,720 --> 00:08:22,800
architecture how you should

00:08:20,560 --> 00:08:25,599
connect up devices for maximum

00:08:22,800 --> 00:08:26,960
compatibility with os's

00:08:25,599 --> 00:08:28,560
similarly there's a firmware

00:08:26,960 --> 00:08:29,440
requirements document called base boot

00:08:28,560 --> 00:08:31,120
requirements

00:08:29,440 --> 00:08:32,959
and this again is derived from the

00:08:31,120 --> 00:08:34,719
server based boot requirements from the

00:08:32,959 --> 00:08:37,760
server ready program

00:08:34,719 --> 00:08:40,320
um and this is the

00:08:37,760 --> 00:08:42,240
standard behavior that are consistent

00:08:40,320 --> 00:08:46,080
behavior that os's and hyper

00:08:42,240 --> 00:08:47,360
advisors can rely on to deploy onto and

00:08:46,080 --> 00:08:49,360
manage the platform

00:08:47,360 --> 00:08:52,160
and the focus here is on the interfaces

00:08:49,360 --> 00:08:53,760
not so much on the implementation

00:08:52,160 --> 00:08:55,600
and then finally if we've got these

00:08:53,760 --> 00:08:58,240
requirements these are only

00:08:55,600 --> 00:09:00,000
really useful if we can test for them uh

00:08:58,240 --> 00:09:01,360
so for each one of the bands of ir

00:09:00,000 --> 00:09:03,200
we are producing an architecture

00:09:01,360 --> 00:09:05,279
compliance suite uh

00:09:03,200 --> 00:09:06,640
that tests the hardware features the

00:09:05,279 --> 00:09:10,320
software features

00:09:06,640 --> 00:09:12,720
and um uh and also compliant

00:09:10,320 --> 00:09:14,399
um yes and so this is these are test

00:09:12,720 --> 00:09:15,279
suites that are open source we're

00:09:14,399 --> 00:09:18,160
hosting them

00:09:15,279 --> 00:09:20,399
on github and this allows you to val

00:09:18,160 --> 00:09:23,040
evaluate your platform for compliance

00:09:20,399 --> 00:09:24,800
before bringing it to certification and

00:09:23,040 --> 00:09:28,080
then we use the same test suite

00:09:24,800 --> 00:09:29,519
for our certification evidence and this

00:09:28,080 --> 00:09:33,600
goes for across

00:09:29,519 --> 00:09:33,600
all the bands of of system ready

00:09:34,000 --> 00:09:39,200
but that's that i mean i've talked in

00:09:36,800 --> 00:09:41,680
very general terms

00:09:39,200 --> 00:09:43,519
if we go and look at embedded i need to

00:09:41,680 --> 00:09:44,480
start talking about specifics really

00:09:43,519 --> 00:09:48,560
fast

00:09:44,480 --> 00:09:50,240
um and so with system ready ir

00:09:48,560 --> 00:09:52,160
i don't think it works just come in with

00:09:50,240 --> 00:09:54,240
a set of uh requirements

00:09:52,160 --> 00:09:56,320
that are different that are completely

00:09:54,240 --> 00:09:59,200
different or require a lot of changes

00:09:56,320 --> 00:10:01,040
from what already is there so it's

00:09:59,200 --> 00:10:03,040
helpful to start with what i see

00:10:01,040 --> 00:10:04,880
in the embedded compute in ecosystem

00:10:03,040 --> 00:10:06,399
right now

00:10:04,880 --> 00:10:08,399
and there's some unique characteristics

00:10:06,399 --> 00:10:09,839
here first of all

00:10:08,399 --> 00:10:12,240
there's a huge amount of platform

00:10:09,839 --> 00:10:15,279
diversity the embedded

00:10:12,240 --> 00:10:17,440
uh arm compute ecosystem is very healthy

00:10:15,279 --> 00:10:18,720
there are a lot of socs there's a lot of

00:10:17,440 --> 00:10:21,440
partners producing

00:10:18,720 --> 00:10:23,920
devices uh and you can see that arm

00:10:21,440 --> 00:10:26,160
devices are everywhere

00:10:23,920 --> 00:10:27,360
what that means though is that there's a

00:10:26,160 --> 00:10:29,600
lot of diversity in the

00:10:27,360 --> 00:10:30,880
implementations a lot of vendor ip

00:10:29,600 --> 00:10:34,079
blocks there's a

00:10:30,880 --> 00:10:36,000
low standardization on particular

00:10:34,079 --> 00:10:37,839
interfaces that are used

00:10:36,000 --> 00:10:40,320
and these devices have to be highly

00:10:37,839 --> 00:10:44,800
configurable because they're used in a

00:10:40,320 --> 00:10:44,800
large number of different use cases

00:10:45,120 --> 00:10:48,560
second there's a large amount of

00:10:46,720 --> 00:10:52,240
software diversity

00:10:48,560 --> 00:10:54,320
rather than uh a couple of

00:10:52,240 --> 00:10:56,640
of major os's that are the de facto

00:10:54,320 --> 00:10:58,560
standards there's a lot of ways to build

00:10:56,640 --> 00:11:01,040
an embedded linux device

00:10:58,560 --> 00:11:02,079
uh and this goes anywhere everywhere

00:11:01,040 --> 00:11:05,920
from custom builds

00:11:02,079 --> 00:11:08,079
based on yakto or open wrt um

00:11:05,920 --> 00:11:09,760
up to distros that have been taken and

00:11:08,079 --> 00:11:10,800
modified with maybe the kernel being

00:11:09,760 --> 00:11:12,480
replaced

00:11:10,800 --> 00:11:14,720
um and then third party supported

00:11:12,480 --> 00:11:16,399
whether we're talking fedora iot

00:11:14,720 --> 00:11:18,880
or one of the other products that that

00:11:16,399 --> 00:11:21,600
are out there and this isn't even

00:11:18,880 --> 00:11:23,279
discrete categories this is a spectrum

00:11:21,600 --> 00:11:26,800
of different ways to land an

00:11:23,279 --> 00:11:28,640
operating system on a platform also

00:11:26,800 --> 00:11:30,079
the os images are tailored for the

00:11:28,640 --> 00:11:32,399
application

00:11:30,079 --> 00:11:34,240
the each application requires a bespoke

00:11:32,399 --> 00:11:37,200
set of packages that have to be

00:11:34,240 --> 00:11:38,480
uh tailored uh to land on the platform

00:11:37,200 --> 00:11:40,880
so we need to account for that

00:11:38,480 --> 00:11:42,399
in in how this system this ecosystem

00:11:40,880 --> 00:11:45,680
works

00:11:42,399 --> 00:11:48,160
and then finally the the

00:11:45,680 --> 00:11:49,360
the incumbent projects here are you boot

00:11:48,160 --> 00:11:50,720
for the firmware project

00:11:49,360 --> 00:11:52,639
and device tree is the platform

00:11:50,720 --> 00:11:54,079
description i mean this is a large

00:11:52,639 --> 00:11:56,639
installed base

00:11:54,079 --> 00:11:57,600
all of the socs have mature device free

00:11:56,639 --> 00:12:00,480
support

00:11:57,600 --> 00:12:02,639
um there is significant engineering

00:12:00,480 --> 00:12:05,360
that's gone into the yubood ecosystem

00:12:02,639 --> 00:12:08,320
and i mean it's also preferred by a lot

00:12:05,360 --> 00:12:10,560
of us in the developer community

00:12:08,320 --> 00:12:12,240
at this point someone will invariably

00:12:10,560 --> 00:12:14,160
bring up well what about acpi why aren't

00:12:12,240 --> 00:12:17,279
we just doing acpr

00:12:14,160 --> 00:12:18,800
um and i mean the reality is is yes we

00:12:17,279 --> 00:12:20,959
could use acpi

00:12:18,800 --> 00:12:24,160
uh there is significant work going on to

00:12:20,959 --> 00:12:27,360
bring up acpi on embedded socs

00:12:24,160 --> 00:12:28,959
uh but the pragmatic view is at this

00:12:27,360 --> 00:12:30,160
point in time acpi simply isn't

00:12:28,959 --> 00:12:31,760
practical

00:12:30,160 --> 00:12:33,600
uh there are a number of technical

00:12:31,760 --> 00:12:35,519
challenges to bringing up a high quality

00:12:33,600 --> 00:12:38,480
acpi implementation

00:12:35,519 --> 00:12:41,120
uh so we don't want to get into a debate

00:12:38,480 --> 00:12:43,440
of whether it's acpi or device tree

00:12:41,120 --> 00:12:45,760
but for this particular band we're

00:12:43,440 --> 00:12:47,760
saying device tree is the pragmatic and

00:12:45,760 --> 00:12:49,920
supported solution that you can build

00:12:47,760 --> 00:12:52,000
products right now with and so device

00:12:49,920 --> 00:12:54,720
tree is what the system ready ir program

00:12:52,000 --> 00:12:54,720
is based on

00:12:55,200 --> 00:12:58,000
uh which i'm getting ahead of myself

00:12:56,720 --> 00:13:00,320
because that's i was talking about

00:12:58,000 --> 00:13:03,440
characteristics of the ecosystem

00:13:00,320 --> 00:13:05,519
so system ready ir this one's again

00:13:03,440 --> 00:13:06,560
tailored for embedded and here's the

00:13:05,519 --> 00:13:09,360
vision of what we

00:13:06,560 --> 00:13:09,600
want is regardless of what your device

00:13:09,360 --> 00:13:12,480
is

00:13:09,600 --> 00:13:14,480
along the bottom there regardless of how

00:13:12,480 --> 00:13:16,800
you've designed your firmware

00:13:14,480 --> 00:13:19,200
whether it's trusted firmware with you

00:13:16,800 --> 00:13:22,320
boot into the user space and opti as a

00:13:19,200 --> 00:13:24,480
trusted os or just users just you boot

00:13:22,320 --> 00:13:26,480
in

00:13:24,480 --> 00:13:27,760
in the normal world or tiana core in the

00:13:26,480 --> 00:13:30,320
normal world

00:13:27,760 --> 00:13:30,959
all of these are can present the same

00:13:30,320 --> 00:13:33,839
interface

00:13:30,959 --> 00:13:35,279
based on uefi and device tree up to the

00:13:33,839 --> 00:13:37,760
os ecosystem

00:13:35,279 --> 00:13:39,440
so that if you're landing yakto or one

00:13:37,760 --> 00:13:40,800
of the bsds or one of the linux

00:13:39,440 --> 00:13:42,800
distributions

00:13:40,800 --> 00:13:45,040
all of those solutions can rely on

00:13:42,800 --> 00:13:48,480
consistent behavior from the platform

00:13:45,040 --> 00:13:52,320
and consistent description of the system

00:13:48,480 --> 00:13:53,360
right uh and so we acknowledge that

00:13:52,320 --> 00:13:56,160
while you boot

00:13:53,360 --> 00:13:56,880
and as the primary implementation that's

00:13:56,160 --> 00:13:59,120
going to be

00:13:56,880 --> 00:14:01,600
used there is choice here on how that's

00:13:59,120 --> 00:14:03,760
implemented and in fact if you implement

00:14:01,600 --> 00:14:04,639
a system with uefi and device tree using

00:14:03,760 --> 00:14:06,800
tiana core

00:14:04,639 --> 00:14:09,040
or you've got an es or sr certified

00:14:06,800 --> 00:14:11,360
system we're able to use those same

00:14:09,040 --> 00:14:13,680
the same interfaces to be compliant with

00:14:11,360 --> 00:14:13,680
ir

00:14:15,680 --> 00:14:19,040
so let's go and talk about the specifics

00:14:17,920 --> 00:14:22,240
on what exactly

00:14:19,040 --> 00:14:23,760
is system ready ir and there's an

00:14:22,240 --> 00:14:25,360
i've got seven points here and these are

00:14:23,760 --> 00:14:28,399
the key elements that

00:14:25,360 --> 00:14:28,720
make for a compliance system uh i'll go

00:14:28,399 --> 00:14:32,639
through

00:14:28,720 --> 00:14:36,000
these one by one first one is uefi uh

00:14:32,639 --> 00:14:38,560
system ready ir is based on uefi and

00:14:36,000 --> 00:14:39,360
there is a subset of uefi defined in the

00:14:38,560 --> 00:14:40,959
ebbr

00:14:39,360 --> 00:14:42,560
or embedded base boot requirements

00:14:40,959 --> 00:14:44,160
document i'll have a link at the end of

00:14:42,560 --> 00:14:45,760
the presentation

00:14:44,160 --> 00:14:47,760
and that is a community developed

00:14:45,760 --> 00:14:50,240
document with uh

00:14:47,760 --> 00:14:51,120
that's been driven by linux developers

00:14:50,240 --> 00:14:53,040
on

00:14:51,120 --> 00:14:56,480
us and you move developers of a subset

00:14:53,040 --> 00:14:59,519
of uefi that is implemented right now

00:14:56,480 --> 00:15:00,639
and provides everything needed by the

00:14:59,519 --> 00:15:04,160
opera by the

00:15:00,639 --> 00:15:06,880
um majority distributions to boot on

00:15:04,160 --> 00:15:08,959
on the platform right so what uefi

00:15:06,880 --> 00:15:11,199
brings is it brings consistency

00:15:08,959 --> 00:15:12,160
regard the problems we've had with

00:15:11,199 --> 00:15:14,320
huboot in the past

00:15:12,160 --> 00:15:15,920
is while that is a very healthy and

00:15:14,320 --> 00:15:18,079
robust project

00:15:15,920 --> 00:15:19,519
each platform that you lands on

00:15:18,079 --> 00:15:20,720
implements things slightly different and

00:15:19,519 --> 00:15:23,040
there's a

00:15:20,720 --> 00:15:24,399
there's it's hard to get a single image

00:15:23,040 --> 00:15:26,160
that's going to boot across the wide

00:15:24,399 --> 00:15:28,639
variety of platforms

00:15:26,160 --> 00:15:30,079
so by standardizing on uefi we have

00:15:28,639 --> 00:15:32,160
consistent behavior

00:15:30,079 --> 00:15:36,000
that also matches the behavior of other

00:15:32,160 --> 00:15:38,639
uefi platforms in the arm ecosystem

00:15:36,000 --> 00:15:40,480
second device tree and specifically

00:15:38,639 --> 00:15:41,759
device tree that is provided by the

00:15:40,480 --> 00:15:44,079
platform firmware

00:15:41,759 --> 00:15:45,920
instead of carried along by the os and

00:15:44,079 --> 00:15:47,759
so to be ir certified

00:15:45,920 --> 00:15:49,680
you your firmware has to provide the

00:15:47,759 --> 00:15:51,199
system description so that the os

00:15:49,680 --> 00:15:53,360
doesn't need to carry that system

00:15:51,199 --> 00:15:56,560
description along with it

00:15:53,360 --> 00:15:58,480
um now you might argue i need to modify

00:15:56,560 --> 00:15:59,040
my device tree well i'm going to replace

00:15:58,480 --> 00:16:01,279
it

00:15:59,040 --> 00:16:02,800
that's fine the os always has the option

00:16:01,279 --> 00:16:05,040
to provide its own device tree

00:16:02,800 --> 00:16:06,079
if that's your deployment model but for

00:16:05,040 --> 00:16:08,800
compatibility

00:16:06,079 --> 00:16:10,639
for system ir compliance we want to have

00:16:08,800 --> 00:16:11,519
a default based device tree in the

00:16:10,639 --> 00:16:14,000
platform

00:16:11,519 --> 00:16:16,800
so that there's a fighting chance of the

00:16:14,000 --> 00:16:19,360
os being able to boot

00:16:16,800 --> 00:16:21,199
third this isn't really a characteristic

00:16:19,360 --> 00:16:22,079
of system ready ir because we don't call

00:16:21,199 --> 00:16:25,360
out ubud or

00:16:22,079 --> 00:16:27,680
tfa but the practical reality is

00:16:25,360 --> 00:16:28,480
everything for ir is implemented in ubud

00:16:27,680 --> 00:16:30,160
and tfa

00:16:28,480 --> 00:16:32,000
you don't need to go and rejig your

00:16:30,160 --> 00:16:33,920
entire engineering process

00:16:32,000 --> 00:16:35,360
what you can do instead is as long as

00:16:33,920 --> 00:16:38,240
you're up to date on the

00:16:35,360 --> 00:16:40,000
firmware projects you can turn on the

00:16:38,240 --> 00:16:41,920
efi configuration

00:16:40,000 --> 00:16:43,199
add the device tree to your platform and

00:16:41,920 --> 00:16:46,079
you've got most of the things that you

00:16:43,199 --> 00:16:49,440
need to be ir compliant

00:16:46,079 --> 00:16:51,759
related to that a new addition to ebbr

00:16:49,440 --> 00:16:53,120
is update capsule is required and what

00:16:51,759 --> 00:16:56,399
update capsule does

00:16:53,120 --> 00:16:58,160
well okay we'd arm i mean if we're

00:16:56,399 --> 00:17:00,079
building secure always on connected

00:16:58,160 --> 00:17:02,240
devices

00:17:00,079 --> 00:17:03,199
in order for those always-on connected

00:17:02,240 --> 00:17:05,039
devices to remain

00:17:03,199 --> 00:17:06,720
always on connected and secure you

00:17:05,039 --> 00:17:08,000
really need to be able to update all the

00:17:06,720 --> 00:17:09,520
components and that includes the

00:17:08,000 --> 00:17:11,919
firmware

00:17:09,520 --> 00:17:13,280
but with traditional embedded stacks

00:17:11,919 --> 00:17:14,720
each platform has

00:17:13,280 --> 00:17:16,319
a slightly different way of updating

00:17:14,720 --> 00:17:17,360
firmware and the os needs to know

00:17:16,319 --> 00:17:18,720
details

00:17:17,360 --> 00:17:21,360
on where it's supposed to write its

00:17:18,720 --> 00:17:23,439
firmware what update capsule does is it

00:17:21,360 --> 00:17:26,000
brings a consistent api

00:17:23,439 --> 00:17:27,360
so that firmware knows how to write

00:17:26,000 --> 00:17:30,000
firmware images to flash

00:17:27,360 --> 00:17:31,520
and the operating system is able to

00:17:30,000 --> 00:17:32,480
discover what firmware images are

00:17:31,520 --> 00:17:34,720
available

00:17:32,480 --> 00:17:36,559
with the esrt table and then use update

00:17:34,720 --> 00:17:38,240
capsule to actually write it into the to

00:17:36,559 --> 00:17:40,559
the system so this again provides that

00:17:38,240 --> 00:17:43,120
consistency

00:17:40,559 --> 00:17:44,720
um next compliance testing to be

00:17:43,120 --> 00:17:46,080
certified we go through compliance

00:17:44,720 --> 00:17:47,840
testing and we've got a process

00:17:46,080 --> 00:17:49,440
that we work through we can work through

00:17:47,840 --> 00:17:51,600
with you as our partners

00:17:49,440 --> 00:17:52,640
on bringing your platform from enabling

00:17:51,600 --> 00:17:54,880
all these features

00:17:52,640 --> 00:17:56,080
testing yourself and then having us

00:17:54,880 --> 00:17:58,799
confirm that and giving you a

00:17:56,080 --> 00:17:58,799
certification

00:17:58,840 --> 00:18:05,120
uh next one works with the octo project

00:18:03,280 --> 00:18:06,799
again kind of like the ufo and tfa one

00:18:05,120 --> 00:18:09,600
this isn't actually called out

00:18:06,799 --> 00:18:10,640
in system ready ir but i really want to

00:18:09,600 --> 00:18:13,360
highlight it

00:18:10,640 --> 00:18:15,280
that this isn't just about binary

00:18:13,360 --> 00:18:17,440
distros being able to work on embedded

00:18:15,280 --> 00:18:21,200
socs this is also about

00:18:17,440 --> 00:18:23,600
custom build yakto openwrt build root

00:18:21,200 --> 00:18:24,320
or any other method that you use for for

00:18:23,600 --> 00:18:27,520
building your

00:18:24,320 --> 00:18:30,640
os and the key here is consistency

00:18:27,520 --> 00:18:32,960
is you can build a yacht to image

00:18:30,640 --> 00:18:35,200
that will very easily deploy on multiple

00:18:32,960 --> 00:18:38,160
platforms without having to do

00:18:35,200 --> 00:18:39,120
a separate image for each uh for each

00:18:38,160 --> 00:18:42,160
platform

00:18:39,120 --> 00:18:43,039
um there was a presentation on um on

00:18:42,160 --> 00:18:44,799
tuesday

00:18:43,039 --> 00:18:46,960
that called this specifically out that

00:18:44,799 --> 00:18:48,559
having to build yocto images

00:18:46,960 --> 00:18:50,640
for each and every platform is a very

00:18:48,559 --> 00:18:53,679
expensive affair uh so

00:18:50,640 --> 00:18:55,280
this you can build multi-platform images

00:18:53,679 --> 00:18:58,320
with the octo quite easily

00:18:55,280 --> 00:18:59,679
if everything is ir compliant um and

00:18:58,320 --> 00:19:02,160
then the last one is that

00:18:59,679 --> 00:19:03,039
you must test against top tier distros

00:19:02,160 --> 00:19:06,400
the goal here

00:19:03,039 --> 00:19:08,080
again is consistency compatibility

00:19:06,400 --> 00:19:10,799
and we use the top tier distros as

00:19:08,080 --> 00:19:12,640
evidence that the platform conforms

00:19:10,799 --> 00:19:14,000
uh you might ask why do i even care

00:19:12,640 --> 00:19:15,919
about that i plan to use

00:19:14,000 --> 00:19:17,840
yakto or something else and do a custom

00:19:15,919 --> 00:19:19,919
build which is totally fine

00:19:17,840 --> 00:19:22,400
but in terms of certification we use the

00:19:19,919 --> 00:19:26,080
top tier distros whether it be red hat

00:19:22,400 --> 00:19:28,320
fedora suse or ubuntu

00:19:26,080 --> 00:19:30,720
to provide evidence that these really

00:19:28,320 --> 00:19:33,039
are conforming platforms

00:19:30,720 --> 00:19:34,640
okay and then the last thing that i want

00:19:33,039 --> 00:19:36,960
to bring up which isn't actually

00:19:34,640 --> 00:19:38,640
it's not part of system ir proper but

00:19:36,960 --> 00:19:41,200
there is kind of an add-on

00:19:38,640 --> 00:19:43,280
uh certification that can be uh for

00:19:41,200 --> 00:19:44,160
security or secure boot which is based

00:19:43,280 --> 00:19:47,919
on the

00:19:44,160 --> 00:19:48,559
um uh bpsr base boot security

00:19:47,919 --> 00:19:50,480
requirements

00:19:48,559 --> 00:19:52,480
document and this is if you implement

00:19:50,480 --> 00:19:54,320
secure uefi secure boot

00:19:52,480 --> 00:19:56,080
there is additional testing that we can

00:19:54,320 --> 00:19:58,720
do to say that that is implemented

00:19:56,080 --> 00:19:59,679
correctly this isn't required now but

00:19:58,720 --> 00:20:02,320
really

00:19:59,679 --> 00:20:03,760
iot connected devices need to be secure

00:20:02,320 --> 00:20:07,840
so this is really important to pay

00:20:03,760 --> 00:20:07,840
attention to

00:20:08,159 --> 00:20:13,679
um and then this just shows that ir

00:20:11,360 --> 00:20:14,960
it is part of the larger system rate

00:20:13,679 --> 00:20:16,400
program these are not different

00:20:14,960 --> 00:20:17,280
standards that we've just plucked out of

00:20:16,400 --> 00:20:19,520
thin air

00:20:17,280 --> 00:20:21,679
but across when you look at ir compared

00:20:19,520 --> 00:20:23,840
with es and sr

00:20:21,679 --> 00:20:25,280
they're all based on uefi they all run

00:20:23,840 --> 00:20:27,760
on 64-bit arm

00:20:25,280 --> 00:20:30,320
ir also gives you the option on 32-bit

00:20:27,760 --> 00:20:33,280
where that's not so much on es and sr

00:20:30,320 --> 00:20:33,760
um and then while ir is based on device

00:20:33,280 --> 00:20:37,919
tree

00:20:33,760 --> 00:20:39,600
es and sr are on acpi and sm bios

00:20:37,919 --> 00:20:41,760
and that that is the most significant

00:20:39,600 --> 00:20:45,679
difference between the two

00:20:41,760 --> 00:20:47,679
um now it's also worth pointing out

00:20:45,679 --> 00:20:49,520
and i've said this already once is that

00:20:47,679 --> 00:20:51,440
between ir and es

00:20:49,520 --> 00:20:53,200
there's actually quite a few socs that

00:20:51,440 --> 00:20:56,159
can land in both cases

00:20:53,200 --> 00:20:57,280
so which one you choose depends on what

00:20:56,159 --> 00:20:59,120
you care about

00:20:57,280 --> 00:21:00,799
if you care about embedded if you only

00:20:59,120 --> 00:21:03,120
care about embedded linux

00:21:00,799 --> 00:21:04,240
ir has lower requirements and it is

00:21:03,120 --> 00:21:06,240
easier to implement

00:21:04,240 --> 00:21:07,919
whereas es gives you access to a much

00:21:06,240 --> 00:21:10,159
broader range of software

00:21:07,919 --> 00:21:12,240
with windows and vmware as examples of

00:21:10,159 --> 00:21:13,840
ones and enterprise linux

00:21:12,240 --> 00:21:16,240
so that's the choice to make when you're

00:21:13,840 --> 00:21:18,320
looking at certification

00:21:16,240 --> 00:21:20,080
uh and as you can see we've got a number

00:21:18,320 --> 00:21:22,720
we've already got quite a few partners

00:21:20,080 --> 00:21:24,640
we have certified platforms under uh the

00:21:22,720 --> 00:21:26,640
sr and es vans

00:21:24,640 --> 00:21:28,240
uh we don't have any certified under ir

00:21:26,640 --> 00:21:29,919
yet but that's because it's a new

00:21:28,240 --> 00:21:31,280
program and so we're just

00:21:29,919 --> 00:21:32,559
we're bringing that up now and you can

00:21:31,280 --> 00:21:36,000
expect to see certification

00:21:32,559 --> 00:21:36,000
announcements in the coming months

00:21:36,400 --> 00:21:40,080
current status the documents that you

00:21:38,320 --> 00:21:42,480
need are all really released

00:21:40,080 --> 00:21:43,760
uh you can go to developer.org.com to

00:21:42,480 --> 00:21:45,440
find out more

00:21:43,760 --> 00:21:47,440
we've got some example platforms that we

00:21:45,440 --> 00:21:49,520
are working on um

00:21:47,440 --> 00:21:51,280
and we also are in the progress of

00:21:49,520 --> 00:21:52,320
writing some how-to documentation on

00:21:51,280 --> 00:21:53,919
actually implementing this

00:21:52,320 --> 00:21:56,320
but most of what you need is already out

00:21:53,919 --> 00:21:59,919
there in open source

00:21:56,320 --> 00:22:01,600
um so to sum up we're spinning up the

00:21:59,919 --> 00:22:03,440
certification program now

00:22:01,600 --> 00:22:05,280
you can expect out announcements later

00:22:03,440 --> 00:22:08,000
this year uh

00:22:05,280 --> 00:22:08,400
join us on the ebbr community in github

00:22:08,000 --> 00:22:10,840
or

00:22:08,400 --> 00:22:12,880
uh contact us about certification at

00:22:10,840 --> 00:22:15,039
systemreadyadarn.com

00:22:12,880 --> 00:22:16,480
um and then i also just have to

00:22:15,039 --> 00:22:17,200
highlight some of the sessions that have

00:22:16,480 --> 00:22:20,559
already come up

00:22:17,200 --> 00:22:23,679
at lunaro connect um there's been

00:22:20,559 --> 00:22:25,200
sres and ir sessions on tuesday

00:22:23,679 --> 00:22:27,120
uh i'm not sure when the recordings will

00:22:25,200 --> 00:22:30,240
be up but you can go and look for those

00:22:27,120 --> 00:22:33,200
um there was a case on uefi boot on iot

00:22:30,240 --> 00:22:33,679
devices um standard firmware update and

00:22:33,200 --> 00:22:35,360
also

00:22:33,679 --> 00:22:38,640
the generic image approach on the ledge

00:22:35,360 --> 00:22:42,240
reference platform which leverages an ir

00:22:38,640 --> 00:22:45,760
and that is that so are there any

00:22:42,240 --> 00:22:49,280
questions i see one um

00:22:45,760 --> 00:22:50,880
so is is the sr ir requires device for

00:22:49,280 --> 00:22:52,559
your tolerance device so i already

00:22:50,880 --> 00:22:57,280
talked about that that we've got

00:22:52,559 --> 00:23:01,120
device tree is required um

00:22:57,280 --> 00:23:01,120
i'm just checking anything else

00:23:01,360 --> 00:23:05,200
so i am not uh

00:23:06,840 --> 00:23:09,840
nice

00:23:11,840 --> 00:23:16,799
okay and it looks like there's been some

00:23:13,440 --> 00:23:16,799
answers to questions right now

00:23:16,960 --> 00:23:20,480
um okay uh francoise you mentioned ebv

00:23:19,520 --> 00:23:22,000
art snacks

00:23:20,480 --> 00:23:24,159
does not require specific system

00:23:22,000 --> 00:23:25,360
description language that is correct so

00:23:24,159 --> 00:23:28,799
ebbr

00:23:25,360 --> 00:23:30,240
is acpi or device tree and that is fine

00:23:28,799 --> 00:23:32,640
but for the system ready ir

00:23:30,240 --> 00:23:35,280
certification program

00:23:32,640 --> 00:23:36,960
we are specifically requiring device

00:23:35,280 --> 00:23:37,280
tree because that's what that ecosystem

00:23:36,960 --> 00:23:40,960
is

00:23:37,280 --> 00:23:41,600
is expecting um if you have acpi in your

00:23:40,960 --> 00:23:44,640
platform

00:23:41,600 --> 00:23:47,360
rather than doing an ir certification uh

00:23:44,640 --> 00:23:49,360
we're i mean we're encouraging you to go

00:23:47,360 --> 00:23:50,400
and look at an es certification because

00:23:49,360 --> 00:23:53,200
that gives you access

00:23:50,400 --> 00:23:54,640
to a wider range of os's and presumably

00:23:53,200 --> 00:23:55,760
that's why you would have implemented

00:23:54,640 --> 00:23:58,720
acpi

00:23:55,760 --> 00:24:00,320
the reason that language is in ebbr is

00:23:58,720 --> 00:24:02,480
we want to make sure that it's possible

00:24:00,320 --> 00:24:05,840
to build a system that is both

00:24:02,480 --> 00:24:05,840
ir and es compatible

00:24:06,400 --> 00:24:08,640
uh

00:24:10,080 --> 00:24:13,120
and i think

00:24:13,200 --> 00:24:16,720
uh i think that is it i'm not seeing any

00:24:15,200 --> 00:24:18,640
other

00:24:16,720 --> 00:24:21,039
oh one more so generic ir compliant

00:24:18,640 --> 00:24:23,440
yocto image presumably that means all

00:24:21,039 --> 00:24:24,159
bb append and various sfc bsp layers

00:24:23,440 --> 00:24:26,000
that

00:24:24,159 --> 00:24:28,400
patch all manner of things need to go

00:24:26,000 --> 00:24:30,799
away um

00:24:28,400 --> 00:24:32,240
there is a meta arm if you're that

00:24:30,799 --> 00:24:33,600
should that we're looking at

00:24:32,240 --> 00:24:35,840
making sure it implements everything

00:24:33,600 --> 00:24:38,000
that's needed um

00:24:35,840 --> 00:24:40,559
i don't know enough about the yakuto

00:24:38,000 --> 00:24:42,559
layers to answer that specifically

00:24:40,559 --> 00:24:44,480
but yes if you're building a generic

00:24:42,559 --> 00:24:46,080
image you would want to do away with

00:24:44,480 --> 00:24:48,720
anything that is

00:24:46,080 --> 00:24:49,919
exclusive for a single platform and try

00:24:48,720 --> 00:24:53,039
to add on pieces

00:24:49,919 --> 00:24:55,120
into that and of that i am out of time

00:24:53,039 --> 00:24:56,559
so i'm going to say thank you very much

00:24:55,120 --> 00:25:01,840
and enjoy the

00:24:56,559 --> 00:25:01,840
last day of connect

00:25:10,600 --> 00:25:13,600

YouTube URL: https://www.youtube.com/watch?v=ri_XG3dfhMU


