Title: LVC21-206 SecGear Unified Confidential Computing Framework
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	1) Confidential Computing and Its Pain Points

2) SecGear Framework

3) SecGear Makes Confidential Computing Simple
Captions: 
	00:00:01,920 --> 00:00:05,920
hello everyone

00:00:03,280 --> 00:00:08,559
today let me introduce this year the

00:00:05,920 --> 00:00:11,200
unified competition computer framework

00:00:08,559 --> 00:00:13,599
from overall community i'm the

00:00:11,200 --> 00:00:17,920
confidential compulsive manager

00:00:13,599 --> 00:00:17,920
from physical

00:00:21,600 --> 00:00:28,400
okay i will introduce the located

00:00:25,199 --> 00:00:31,840
first what's confidential possibility

00:00:28,400 --> 00:00:31,840
at the

00:00:32,160 --> 00:00:35,280
architecture before the old company's

00:00:34,239 --> 00:00:39,040
computer

00:00:35,280 --> 00:00:41,440
and also uh our secure framework

00:00:39,040 --> 00:00:45,360
under explain why that here makes a

00:00:41,440 --> 00:00:47,360
potential computer

00:00:45,360 --> 00:00:49,520
okay first uh what's called digital

00:00:47,360 --> 00:00:51,520
computing

00:00:49,520 --> 00:00:52,879
competition computer is actually a

00:00:51,520 --> 00:00:57,039
technology that

00:00:52,879 --> 00:01:00,559
uh emerged to resolve data reuse

00:00:57,039 --> 00:01:01,520
protection as we know we have physical

00:01:00,559 --> 00:01:06,159
storage

00:01:01,520 --> 00:01:09,760
to protect the data erect and also

00:01:06,159 --> 00:01:12,080
find several uh dirty protocols to

00:01:09,760 --> 00:01:16,000
protect the data you retranslation but

00:01:12,080 --> 00:01:18,479
how to protect the data used into topic

00:01:16,000 --> 00:01:20,159
actually uh competition computative

00:01:18,479 --> 00:01:24,640
technology is

00:01:20,159 --> 00:01:24,640
to resolve this problem

00:01:25,439 --> 00:01:30,079
so uh uh usually the hardware

00:01:28,000 --> 00:01:31,040
competition computer technology can be

00:01:30,079 --> 00:01:34,159
simply

00:01:31,040 --> 00:01:37,280
destructive and that puts

00:01:34,159 --> 00:01:40,640
the running data into a black box and

00:01:37,280 --> 00:01:43,920
the application can only request the

00:01:40,640 --> 00:01:48,079
computer computation of the data but

00:01:43,920 --> 00:01:50,640
it accounted for the data out of the box

00:01:48,079 --> 00:01:52,000
currently there are several hardware

00:01:50,640 --> 00:01:55,439
solutions

00:01:52,000 --> 00:01:59,200
that supplies the functionality first

00:01:55,439 --> 00:02:03,119
uh intel intel has htx

00:01:59,200 --> 00:02:05,520
and also uh the intel view how do i have

00:02:03,119 --> 00:02:09,599
the fpga

00:02:05,520 --> 00:02:13,120
for after it's at the forest five or

00:02:09,599 --> 00:02:16,879
six pistols solution for this

00:02:13,120 --> 00:02:19,200
uh from the design perspective

00:02:16,879 --> 00:02:20,879
actually the different hardware attaches

00:02:19,200 --> 00:02:24,959
have different

00:02:20,879 --> 00:02:27,440
design principle for example the fgs

00:02:24,959 --> 00:02:29,520
partitions some memory addresses that

00:02:27,440 --> 00:02:30,480
they can continue to ensure the security

00:02:29,520 --> 00:02:33,920
of the memory

00:02:30,480 --> 00:02:36,640
is the address as a transfer

00:02:33,920 --> 00:02:37,599
constructed two parts sticker at the end

00:02:36,640 --> 00:02:40,400
of the world

00:02:37,599 --> 00:02:42,319
through the time development process of

00:02:40,400 --> 00:02:45,599
the

00:02:42,319 --> 00:02:49,120
processor to achieve the security

00:02:45,599 --> 00:02:53,120
uh that is the forward uh the data

00:02:49,120 --> 00:02:56,000
also be the memory cannot be

00:02:53,120 --> 00:02:56,560
successful directly from the actual

00:02:56,000 --> 00:03:00,720
world

00:02:56,560 --> 00:03:00,720
so that the private data can be

00:03:02,840 --> 00:03:06,560
protected

00:03:04,319 --> 00:03:07,920
and as we know currently the public

00:03:06,560 --> 00:03:11,120
cloud is a

00:03:07,920 --> 00:03:14,480
charge for the industry

00:03:11,120 --> 00:03:18,159
but some customers are still

00:03:14,480 --> 00:03:21,680
hesitated to migrate to their business

00:03:18,159 --> 00:03:25,680
to public cloud the biggest is

00:03:21,680 --> 00:03:28,640
database uh you know the fifth data is

00:03:25,680 --> 00:03:29,680
very important for the customers some

00:03:28,640 --> 00:03:33,120
customers

00:03:29,680 --> 00:03:36,480
are very worried about that

00:03:33,120 --> 00:03:37,440
if their business are migrated to the

00:03:36,480 --> 00:03:41,760
public cloud

00:03:37,440 --> 00:03:45,599
the data potential is auto controlled

00:03:41,760 --> 00:03:46,799
so actually the competition computer

00:03:45,599 --> 00:03:51,360
technology is a

00:03:46,799 --> 00:03:51,360
good fit to resolve this problem

00:03:52,480 --> 00:03:56,799
okay let me introduce why multi-accessor

00:03:55,840 --> 00:04:01,840
is a big part

00:03:56,799 --> 00:04:01,840
of the competition computing

00:04:06,879 --> 00:04:14,080
there are several hardware solutions

00:04:09,920 --> 00:04:18,479
each hardware really has his own

00:04:14,080 --> 00:04:22,960
sdk and the sdk on other compatible

00:04:18,479 --> 00:04:26,320
if a developer writes a

00:04:22,960 --> 00:04:26,960
computational computer application uict

00:04:26,320 --> 00:04:30,479
actually it

00:04:26,960 --> 00:04:33,360
could be running out of

00:04:30,479 --> 00:04:33,360
other activities

00:04:34,160 --> 00:04:41,120
they are ecological isolated and

00:04:37,440 --> 00:04:44,080
also if the driver wants to support

00:04:41,120 --> 00:04:46,320
their applications from the web because

00:04:44,080 --> 00:04:50,080
one other actually

00:04:46,320 --> 00:04:54,080
the app is quite high so the

00:04:50,080 --> 00:04:57,360
also if the if the device

00:04:54,080 --> 00:05:00,639
really has two hardware solutions

00:04:57,360 --> 00:05:04,240
that it needs to

00:05:00,639 --> 00:05:06,720
compare with and it has

00:05:04,240 --> 00:05:07,680
two satellites the software the method

00:05:06,720 --> 00:05:11,360
is

00:05:07,680 --> 00:05:14,639
quite high

00:05:11,360 --> 00:05:18,320
okay so let me introduce to our secure

00:05:14,639 --> 00:05:20,000
framework from the stack you can see the

00:05:18,320 --> 00:05:24,160
secure framework

00:05:20,000 --> 00:05:28,000
supply the server layer the base layer

00:05:24,160 --> 00:05:31,520
supplies the unified basic api

00:05:28,000 --> 00:05:32,720
to the complications and the middleware

00:05:31,520 --> 00:05:36,240
layer

00:05:32,720 --> 00:05:39,120
supplies several uh standard

00:05:36,240 --> 00:05:39,600
middleware implementation for developers

00:05:39,120 --> 00:05:42,160
and

00:05:39,600 --> 00:05:42,880
also the service layer somewhere there

00:05:42,160 --> 00:05:44,639
is a

00:05:42,880 --> 00:05:48,240
ready to use layer that can't be

00:05:44,639 --> 00:05:48,240
deployed directly

00:05:50,880 --> 00:05:58,000
so first uh let's let's have a look

00:05:54,639 --> 00:06:01,520
here basically that here uh uh

00:05:58,000 --> 00:06:04,800
supplies the basic interfaces

00:06:01,520 --> 00:06:07,840
for the customers to to develop

00:06:04,800 --> 00:06:11,199
their trusted application

00:06:07,840 --> 00:06:14,400
and the library supports standard

00:06:11,199 --> 00:06:18,560
politics api and also standard open

00:06:14,400 --> 00:06:21,680
excel uh details on the secure word

00:06:18,560 --> 00:06:23,520
users derived

00:06:21,680 --> 00:06:25,120
secure applications without these

00:06:23,520 --> 00:06:28,479
interfaces

00:06:25,120 --> 00:06:31,919
and our uh

00:06:28,479 --> 00:06:35,600
our our goal of design is to

00:06:31,919 --> 00:06:37,919
flatter developers have the

00:06:35,600 --> 00:06:39,280
same uh programming interfaces our

00:06:37,919 --> 00:06:42,319
central side

00:06:39,280 --> 00:06:44,639
as as our national site

00:06:42,319 --> 00:06:46,960
and also a lot of developers have

00:06:44,639 --> 00:06:49,120
assisted the programming interface

00:06:46,960 --> 00:06:51,680
experiences different architecture

00:06:49,120 --> 00:06:51,680
solutions

00:06:54,800 --> 00:07:03,039
so from this page you can see a

00:06:58,560 --> 00:07:06,479
static compilation of the

00:07:03,039 --> 00:07:09,759
interface supplied by intel fcs also

00:07:06,479 --> 00:07:13,120
uh by the global platform

00:07:09,759 --> 00:07:16,319
standard interface

00:07:13,120 --> 00:07:19,520
from the from the comparison you can see

00:07:16,319 --> 00:07:22,720
uh the global platform interface is

00:07:19,520 --> 00:07:25,840
further complicated it is designed

00:07:22,720 --> 00:07:29,280
for the for the

00:07:25,840 --> 00:07:30,800
mobile phone uh scenario actually of a

00:07:29,280 --> 00:07:33,840
server

00:07:30,800 --> 00:07:37,840
it's not has it

00:07:33,840 --> 00:07:41,039
don't have the ecosystem

00:07:37,840 --> 00:07:44,160
so uh and the

00:07:41,039 --> 00:07:48,639
under if the interface is quite

00:07:44,160 --> 00:07:53,280
complicated so our

00:07:48,639 --> 00:07:56,879
our objective is to put that to simplify

00:07:53,280 --> 00:08:00,000
to simplify the global platform

00:07:56,879 --> 00:08:03,360
interface using the section and

00:08:00,000 --> 00:08:06,639
we referred to the intel xjs

00:08:03,360 --> 00:08:10,479
style interface and notified

00:08:06,639 --> 00:08:14,240
the interfaces to a similar way

00:08:10,479 --> 00:08:14,240
and after the uh

00:08:14,400 --> 00:08:18,479
up after the uh

00:08:19,039 --> 00:08:25,680
after those implementations that the

00:08:22,400 --> 00:08:29,360
interfaces are unified to

00:08:25,680 --> 00:08:31,680
at the driver has easily

00:08:29,360 --> 00:08:33,120
drafted their applications based on the

00:08:31,680 --> 00:08:35,839
unified

00:08:33,120 --> 00:08:35,839
interfaces

00:08:36,320 --> 00:08:40,719
and then for the middleware layer we

00:08:38,640 --> 00:08:44,000
supplied several uh

00:08:40,719 --> 00:08:44,560
standard uh protocol implementation it

00:08:44,000 --> 00:08:46,959
would be

00:08:44,560 --> 00:08:48,320
a difficult language tell us that the

00:08:46,959 --> 00:08:51,640
cpe

00:08:48,320 --> 00:08:55,440
this has been developed and used the

00:08:51,640 --> 00:08:58,880
eclipse as a package device

00:08:55,440 --> 00:09:00,240
and provide a standard crc level

00:08:58,880 --> 00:09:03,760
interface

00:09:00,240 --> 00:09:03,760
and trs

00:09:04,399 --> 00:09:08,880
it's a picturesque provides the signal

00:09:07,680 --> 00:09:11,519
transmission protocols

00:09:08,880 --> 00:09:12,800
for the right interaction between the

00:09:11,519 --> 00:09:16,880
nuclear weapons

00:09:12,800 --> 00:09:21,040
class as we know generate is widely used

00:09:16,880 --> 00:09:24,160
in many scenarios such as uh

00:09:21,040 --> 00:09:27,440
speaker special communication sql uh

00:09:24,160 --> 00:09:30,560
database connection and the pke

00:09:27,440 --> 00:09:33,920
is the key exchange protocol that

00:09:30,560 --> 00:09:37,360
enables the user can

00:09:33,920 --> 00:09:37,839
negotiate equipped speed between the

00:09:37,360 --> 00:09:42,399
cloud

00:09:37,839 --> 00:09:44,959
and the easily the data can be

00:09:42,399 --> 00:09:46,480
transmitted into easily with the signal

00:09:44,959 --> 00:09:50,480
protocol

00:09:46,480 --> 00:09:54,080
with with the equipment

00:09:50,480 --> 00:09:56,480
protocol so that it has so that is

00:09:54,080 --> 00:09:56,480
secure

00:09:59,839 --> 00:10:08,399
that is just a simple uh

00:10:04,640 --> 00:10:11,120
showing that our uh tps in our library

00:10:08,399 --> 00:10:12,320
are compiled compatible with the

00:10:11,120 --> 00:10:15,680
standard

00:10:12,320 --> 00:10:18,240
uh interfaces that the other

00:10:15,680 --> 00:10:19,839
the other application you will need to

00:10:18,240 --> 00:10:22,320
be modified

00:10:19,839 --> 00:10:23,440
that's related to our libraries it can

00:10:22,320 --> 00:10:25,920
use the

00:10:23,440 --> 00:10:25,920
deploy

00:10:29,839 --> 00:10:32,880
and further service there uh that they

00:10:32,000 --> 00:10:37,800
applied to

00:10:32,880 --> 00:10:39,680
a key management service called the

00:10:37,800 --> 00:10:43,839
episodes equally

00:10:39,680 --> 00:10:46,720
as the encryption devices

00:10:43,839 --> 00:10:48,000
other key generation at the inflation

00:10:46,720 --> 00:10:51,760
equation

00:10:48,000 --> 00:10:55,360
operations are inside the economy

00:10:51,760 --> 00:10:58,560
to protect the security of the

00:10:55,360 --> 00:11:01,040
chief and also to process with

00:10:58,560 --> 00:11:01,040
publishing

00:11:12,839 --> 00:11:17,600
it

00:11:14,640 --> 00:11:18,399
okay uh myself is the big confidential

00:11:17,600 --> 00:11:22,320
computer

00:11:18,399 --> 00:11:25,120
uh simple i think that from

00:11:22,320 --> 00:11:27,200
the above introduction you should have

00:11:25,120 --> 00:11:30,240
uh already have an idea

00:11:27,200 --> 00:11:33,120
actually the secure

00:11:30,240 --> 00:11:34,560
supports the multi multiple

00:11:33,120 --> 00:11:36,959
architectures

00:11:34,560 --> 00:11:39,120
and the multiple hardware solutions and

00:11:36,959 --> 00:11:42,000
supplies the unified

00:11:39,120 --> 00:11:42,800
programming interfaces to the user and

00:11:42,000 --> 00:11:45,760
the

00:11:42,800 --> 00:11:46,560
user needs to support about that while

00:11:45,760 --> 00:11:50,959
hardware

00:11:46,560 --> 00:11:54,160
uh solution uh you disappear

00:11:50,959 --> 00:11:57,279
into fighter after cv

00:11:54,160 --> 00:12:00,320
for example it kind of

00:11:57,279 --> 00:12:03,440
used by unified software for different

00:12:00,320 --> 00:12:05,600
architectures and also the

00:12:03,440 --> 00:12:11,360
attendance and the developers efforts

00:12:05,600 --> 00:12:15,120
are reduced

00:12:11,360 --> 00:12:18,160
so uh in summary the secure

00:12:15,120 --> 00:12:21,279
supplies the base layer that's

00:12:18,160 --> 00:12:22,560
how the standard interfaces are the

00:12:21,279 --> 00:12:26,560
middleware error that

00:12:22,560 --> 00:12:30,399
has standard protocol implementation

00:12:26,560 --> 00:12:30,720
under the service layer is ready to use

00:12:30,399 --> 00:12:34,240
and

00:12:30,720 --> 00:12:39,839
ready to define so software makes

00:12:34,240 --> 00:12:39,839
the competition computer simple

00:12:39,920 --> 00:12:43,760
okay that's what i want to introduce for

00:12:42,800 --> 00:12:48,639
today

00:12:43,760 --> 00:12:48,639
and welcome welcome to follow our

00:12:50,839 --> 00:12:53,839
publicity

00:12:55,760 --> 00:12:57,839

YouTube URL: https://www.youtube.com/watch?v=QJBp0dEdRS8


