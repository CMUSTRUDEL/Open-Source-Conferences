Title: LVC21-111 KWG lightning and office hours
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	
Captions: 
	00:00:00,080 --> 00:00:03,840
hi everybody welcome to this channel

00:00:03,040 --> 00:00:07,520
working group

00:00:03,840 --> 00:00:10,800
lightning talk so during this session

00:00:07,520 --> 00:00:12,799
we will um go through the diff

00:00:10,800 --> 00:00:14,160
we'll cover all the topic on which the

00:00:12,799 --> 00:00:15,920
team is working or

00:00:14,160 --> 00:00:17,680
as work or is going to work during the

00:00:15,920 --> 00:00:21,439
next cycle

00:00:17,680 --> 00:00:23,439
so um when i say all the topic i will

00:00:21,439 --> 00:00:25,439
some topic related to some lead project

00:00:23,439 --> 00:00:27,119
like stratos or trustee substrate will

00:00:25,439 --> 00:00:30,320
not be included in this

00:00:27,119 --> 00:00:30,640
i will differ to this uh other project

00:00:30,320 --> 00:00:33,520
to

00:00:30,640 --> 00:00:34,559
to to give details so we'll go through

00:00:33,520 --> 00:00:38,480
to a number

00:00:34,559 --> 00:00:41,280
of um of topic and uh

00:00:38,480 --> 00:00:42,879
most of our uh engineers there so they

00:00:41,280 --> 00:00:45,920
can provide some

00:00:42,879 --> 00:00:48,559
explanation in detail in each topic

00:00:45,920 --> 00:00:49,360
following so we only have 25 minutes for

00:00:48,559 --> 00:00:52,480
this session

00:00:49,360 --> 00:00:54,800
and we have something like 10 slide so

00:00:52,480 --> 00:00:56,320
we'll probably not have time to answer a

00:00:54,800 --> 00:00:58,079
lot of questions

00:00:56,320 --> 00:00:59,920
nevertheless after this session we have

00:00:58,079 --> 00:01:02,719
an open office hour

00:00:59,920 --> 00:01:03,840
so we'll move to this we'll switch to

00:01:02,719 --> 00:01:06,880
this room and then we'll

00:01:03,840 --> 00:01:07,840
we can continue and either go in more

00:01:06,880 --> 00:01:10,320
detail for

00:01:07,840 --> 00:01:13,920
for for a topic in particular and answer

00:01:10,320 --> 00:01:18,799
all the question that that you have

00:01:13,920 --> 00:01:22,479
um so let me start

00:01:18,799 --> 00:01:25,360
with this first slide

00:01:22,479 --> 00:01:26,000
there so here are the topics of odf it

00:01:25,360 --> 00:01:28,640
will speak

00:01:26,000 --> 00:01:29,600
about thermal cluster idling which is a

00:01:28,640 --> 00:01:32,880
scheduler

00:01:29,600 --> 00:01:34,400
hdmi server the remote proc nlp message

00:01:32,880 --> 00:01:37,520
activity some storage

00:01:34,400 --> 00:01:38,079
area also the 4gig split for the arm32

00:01:37,520 --> 00:01:40,320
bit

00:01:38,079 --> 00:01:41,680
in which we're working this va the car

00:01:40,320 --> 00:01:43,600
site and we'll

00:01:41,680 --> 00:01:45,200
finish with some arm sup maintenance

00:01:43,600 --> 00:01:47,040
having in mind that there was a session

00:01:45,200 --> 00:01:48,799
about that just before

00:01:47,040 --> 00:01:50,560
so let's start with the first one which

00:01:48,799 --> 00:01:54,640
is the thermal

00:01:50,560 --> 00:01:57,680
so it's up to you daniel no

00:01:54,640 --> 00:01:59,840
so first the first point is the the new

00:01:57,680 --> 00:02:02,159
notification mechanism which is

00:01:59,840 --> 00:02:03,119
what was implemented in the in the

00:02:02,159 --> 00:02:06,640
thermal framework

00:02:03,119 --> 00:02:08,479
with the netlinks so i think i already

00:02:06,640 --> 00:02:11,440
mentioned that last time but

00:02:08,479 --> 00:02:13,360
as it's important to and it's an

00:02:11,440 --> 00:02:15,920
important feature

00:02:13,360 --> 00:02:17,680
and and where the goal is to continue to

00:02:15,920 --> 00:02:20,720
evolve with the versioning

00:02:17,680 --> 00:02:21,360
um i just wanted to remind that we have

00:02:20,720 --> 00:02:24,080
this

00:02:21,360 --> 00:02:24,560
this framework so it's because it's net

00:02:24,080 --> 00:02:27,120
links

00:02:24,560 --> 00:02:28,239
we are we can have full benefit of the

00:02:27,120 --> 00:02:30,319
network stack

00:02:28,239 --> 00:02:33,120
and with the socket in particular and

00:02:30,319 --> 00:02:36,080
use the main loops to get events

00:02:33,120 --> 00:02:36,959
uh something we cannot have with today

00:02:36,080 --> 00:02:39,680
with the

00:02:36,959 --> 00:02:40,080
well we something we were not able to

00:02:39,680 --> 00:02:43,200
have

00:02:40,080 --> 00:02:46,160
with the ccfs um

00:02:43,200 --> 00:02:48,400
api we had before so it's not only an

00:02:46,160 --> 00:02:51,440
application but it's also getting

00:02:48,400 --> 00:02:53,680
um discovery of the

00:02:51,440 --> 00:02:55,920
of the of the of the configuration of

00:02:53,680 --> 00:02:57,519
the thermal framework like the thermal

00:02:55,920 --> 00:02:59,680
zones and the cooling devices

00:02:57,519 --> 00:03:02,000
so you get notified when you have new

00:02:59,680 --> 00:03:05,280
thermal zones on new cooling devices

00:03:02,000 --> 00:03:07,680
set or removed uh

00:03:05,280 --> 00:03:08,319
also you can you have a set of commands

00:03:07,680 --> 00:03:10,400
so it's

00:03:08,319 --> 00:03:11,760
it's a flexible tool to access to the

00:03:10,400 --> 00:03:15,040
tamar framework

00:03:11,760 --> 00:03:19,519
the second point is um the thermal

00:03:15,040 --> 00:03:22,319
framework has some in story

00:03:19,519 --> 00:03:24,080
and this histories was designed before

00:03:22,319 --> 00:03:25,120
for a specific platform and for a

00:03:24,080 --> 00:03:28,480
specific

00:03:25,120 --> 00:03:30,879
framework which was a cpi and then

00:03:28,480 --> 00:03:32,959
this framework evolved try to evolve to

00:03:30,879 --> 00:03:34,400
something generic but because of this

00:03:32,959 --> 00:03:37,920
conversion between

00:03:34,400 --> 00:03:40,879
the specific tool generic it brought

00:03:37,920 --> 00:03:41,519
some code from the rcpi which was that

00:03:40,879 --> 00:03:43,360
results

00:03:41,519 --> 00:03:44,959
in something a bit strange inside the

00:03:43,360 --> 00:03:46,480
tamar framework and inefficient

00:03:44,959 --> 00:03:50,000
especially from

00:03:46,480 --> 00:03:53,200
a lock point of view and

00:03:50,000 --> 00:03:55,439
so as an important thing in

00:03:53,200 --> 00:03:58,400
the term and maintenance is to remove

00:03:55,439 --> 00:04:01,040
some debt code and remove bogus code so

00:03:58,400 --> 00:04:02,560
we identify every other engineered part

00:04:01,040 --> 00:04:06,159
and remove that

00:04:02,560 --> 00:04:09,599
and for every dead code

00:04:06,159 --> 00:04:12,799
um we remove that also but also we

00:04:09,599 --> 00:04:15,360
identify that we have some code which

00:04:12,799 --> 00:04:17,199
was not uh with bogus which was bogus

00:04:15,360 --> 00:04:19,759
and it was never

00:04:17,199 --> 00:04:22,079
fixed since years so we assume that

00:04:19,759 --> 00:04:23,759
nobody is using it and remove it

00:04:22,079 --> 00:04:25,759
so that simplified the templar form okay

00:04:23,759 --> 00:04:27,360
and it allows to meant to take to create

00:04:25,759 --> 00:04:29,520
to set those the same for the next

00:04:27,360 --> 00:04:33,199
features we will have

00:04:29,520 --> 00:04:36,000
um after and then the three point the

00:04:33,199 --> 00:04:36,800
the third point is uh the most important

00:04:36,000 --> 00:04:39,280
one is the

00:04:36,800 --> 00:04:41,600
in a new framework based on the we call

00:04:39,280 --> 00:04:44,800
dynamic thermal power management

00:04:41,600 --> 00:04:46,720
and the idea behind that is to fulfill

00:04:44,800 --> 00:04:48,320
what is missing with the tamar framework

00:04:46,720 --> 00:04:49,280
which is not able to manage different

00:04:48,320 --> 00:04:51,360
thermal zones

00:04:49,280 --> 00:04:53,280
and different cooling devices so we can

00:04:51,360 --> 00:04:55,919
delegate that to user space

00:04:53,280 --> 00:04:57,759
or we can create an algorithm uh to

00:04:55,919 --> 00:05:01,520
aggregate all of them

00:04:57,759 --> 00:05:04,160
to to to sustain the power um

00:05:01,520 --> 00:05:05,039
as a world for all all these devices so

00:05:04,160 --> 00:05:07,600
it's a big

00:05:05,039 --> 00:05:08,880
i don't have enough time to explain

00:05:07,600 --> 00:05:10,720
details that so

00:05:08,880 --> 00:05:12,720
there is a blog where you have the link

00:05:10,720 --> 00:05:15,759
and you can refer to

00:05:12,720 --> 00:05:18,880
um and yeah

00:05:15,759 --> 00:05:18,880
basically that's it

00:05:19,280 --> 00:05:22,400
so we let uh ulf i think it's working on

00:05:21,520 --> 00:05:25,680
a yeah which is

00:05:22,400 --> 00:05:28,479
who is working on the cluster listing

00:05:25,680 --> 00:05:30,320
yes so a couple of worlds around this

00:05:28,479 --> 00:05:32,160
project has been running for quite a

00:05:30,320 --> 00:05:34,880
while now

00:05:32,160 --> 00:05:36,560
so it's been a close collaboration with

00:05:34,880 --> 00:05:38,800
qualcomm

00:05:36,560 --> 00:05:40,400
and i would say that the basic support

00:05:38,800 --> 00:05:42,240
landed in the

00:05:40,400 --> 00:05:44,320
landed in the kernel for about a year

00:05:42,240 --> 00:05:46,400
ago in the 506 squad

00:05:44,320 --> 00:05:48,880
and since then the collaboration with

00:05:46,400 --> 00:05:52,240
qualcomm has continued and we have

00:05:48,880 --> 00:05:54,160
evolved support for class widely

00:05:52,240 --> 00:05:55,680
basically it's three subsystems that's

00:05:54,160 --> 00:05:58,960
involved it's the

00:05:55,680 --> 00:06:00,080
cpu idle and the generic power domain

00:05:58,960 --> 00:06:03,600
and uh

00:06:00,080 --> 00:06:06,319
and runtime pm so together that

00:06:03,600 --> 00:06:07,280
that yeah those are the subsystems that

00:06:06,319 --> 00:06:10,240
we've been working on

00:06:07,280 --> 00:06:12,160
going forward this work will uh continue

00:06:10,240 --> 00:06:14,160
but we are probably moving into a little

00:06:12,160 --> 00:06:15,680
bit of the optimizations rather than

00:06:14,160 --> 00:06:19,600
actual uh

00:06:15,680 --> 00:06:20,960
basic functionality uh so during the

00:06:19,600 --> 00:06:23,120
last cycle we

00:06:20,960 --> 00:06:25,120
actually kicked off a new project uh

00:06:23,120 --> 00:06:27,280
together with st micro that's

00:06:25,120 --> 00:06:29,120
uh that recently also joined us working

00:06:27,280 --> 00:06:31,759
on this clustered link

00:06:29,120 --> 00:06:32,319
uh so the in the trusted firmware side

00:06:31,759 --> 00:06:36,160
of things

00:06:32,319 --> 00:06:39,120
uh the implementation of the psi

00:06:36,160 --> 00:06:41,280
is and that currently lacks the

00:06:39,120 --> 00:06:43,759
so-called os initiated mode

00:06:41,280 --> 00:06:45,120
support for those initiated mode which

00:06:43,759 --> 00:06:46,960
is required

00:06:45,120 --> 00:06:48,720
for the platform to benefit from the

00:06:46,960 --> 00:06:50,639
things that we begin to be implementing

00:06:48,720 --> 00:06:52,880
on on the kernel sites

00:06:50,639 --> 00:06:54,720
so so together with the sd micro that is

00:06:52,880 --> 00:06:55,120
a project that we are now currently

00:06:54,720 --> 00:06:57,280
running

00:06:55,120 --> 00:07:00,000
and that quality product will continue

00:06:57,280 --> 00:07:01,520
here over the next cycle

00:07:00,000 --> 00:07:03,199
so these are the main things that we

00:07:01,520 --> 00:07:04,720
have been working on it's and it's just

00:07:03,199 --> 00:07:08,160
moving forward

00:07:04,720 --> 00:07:08,160
in the next phase i would say

00:07:08,639 --> 00:07:13,599
yeah that's it and uh back to you in

00:07:11,440 --> 00:07:16,319
sound about the schedule

00:07:13,599 --> 00:07:18,479
thank you yeah so on the scheduler side

00:07:16,319 --> 00:07:20,639
we have three main

00:07:18,479 --> 00:07:22,720
item on which we have started to work

00:07:20,639 --> 00:07:23,520
and we'll continue for the next cycle so

00:07:22,720 --> 00:07:26,639
the first one

00:07:23,520 --> 00:07:29,520
is the deadline scheduler and uh

00:07:26,639 --> 00:07:30,080
we we are going we aren't going to do an

00:07:29,520 --> 00:07:32,880
evaluation

00:07:30,080 --> 00:07:34,000
of the deadline scheduler and especially

00:07:32,880 --> 00:07:37,280
with the audio

00:07:34,000 --> 00:07:39,520
android audio use case and the goal is

00:07:37,280 --> 00:07:42,560
to evaluate

00:07:39,520 --> 00:07:44,000
so the audio latency with the current

00:07:42,560 --> 00:07:47,199
implementation which is mainly

00:07:44,000 --> 00:07:49,440
uh based on the rt task and

00:07:47,199 --> 00:07:51,039
what would it mean to move on the

00:07:49,440 --> 00:07:52,479
deadline scheduler so that's something

00:07:51,039 --> 00:07:55,919
that i've been already be done

00:07:52,479 --> 00:07:57,520
few years ago with uh but in the

00:07:55,919 --> 00:08:00,240
meantime a lot of

00:07:57,520 --> 00:08:01,280
features have been merged so after this

00:08:00,240 --> 00:08:04,000
first step where

00:08:01,280 --> 00:08:06,560
we will do a status we will see what is

00:08:04,000 --> 00:08:08,479
the main feature that is lacking

00:08:06,560 --> 00:08:10,639
and we'll start to work on this so

00:08:08,479 --> 00:08:12,400
that's the first item

00:08:10,639 --> 00:08:14,800
the other one it's about enabling some

00:08:12,400 --> 00:08:17,199
scheduler feature on the arm server

00:08:14,800 --> 00:08:18,240
so few features have been enabled but

00:08:17,199 --> 00:08:21,840
but mainly on

00:08:18,240 --> 00:08:24,800
a mobile sock system

00:08:21,840 --> 00:08:26,000
so now we have enabled the frequency

00:08:24,800 --> 00:08:29,360
invariants for example

00:08:26,000 --> 00:08:32,560
for the cppc cpu frag driver

00:08:29,360 --> 00:08:35,120
which was not the case uh before so

00:08:32,560 --> 00:08:36,080
now some arm servers which don't have

00:08:35,120 --> 00:08:38,399
amu yet

00:08:36,080 --> 00:08:40,159
can still have some frequency invariants

00:08:38,399 --> 00:08:41,680
just like intel platform

00:08:40,159 --> 00:08:43,839
and we'll continue with the thermal

00:08:41,680 --> 00:08:46,399
management and especially would like to

00:08:43,839 --> 00:08:46,399
to connect

00:08:46,640 --> 00:08:51,440
the arm server on the thermal pressure

00:08:49,760 --> 00:08:54,480
so that we can see if there are some

00:08:51,440 --> 00:08:56,640
parts some node which are overheating

00:08:54,480 --> 00:08:58,640
and then more specifically on the cfs

00:08:56,640 --> 00:09:02,560
scheduler

00:08:58,640 --> 00:09:04,959
so i will continue to work on the task

00:09:02,560 --> 00:09:06,000
on improving the the task placement on

00:09:04,959 --> 00:09:08,320
my system

00:09:06,000 --> 00:09:10,080
we haven't done all the things that we

00:09:08,320 --> 00:09:11,279
would like during the the previous cycle

00:09:10,080 --> 00:09:13,200
but uh

00:09:11,279 --> 00:09:14,800
we'll uh try to continue and move

00:09:13,200 --> 00:09:17,040
forward on this

00:09:14,800 --> 00:09:18,959
and the last item it's the latin season

00:09:17,040 --> 00:09:20,240
sensitive task that's also something

00:09:18,959 --> 00:09:21,440
that have been raised several time on

00:09:20,240 --> 00:09:22,800
the mailing list

00:09:21,440 --> 00:09:24,560
and we know that some members are

00:09:22,800 --> 00:09:26,000
interested in so

00:09:24,560 --> 00:09:28,720
we'll start to be involved on this

00:09:26,000 --> 00:09:31,040
activity and help moving forward on this

00:09:28,720 --> 00:09:31,920
which include for example this nice

00:09:31,040 --> 00:09:34,320
latency

00:09:31,920 --> 00:09:36,959
discussion so these are the three main

00:09:34,320 --> 00:09:39,920
items and we can continue on that

00:09:36,959 --> 00:09:40,800
during the open office so that's all for

00:09:39,920 --> 00:09:44,640
the scheduler

00:09:40,800 --> 00:09:47,680
let me move to the scmi server

00:09:44,640 --> 00:09:49,440
so for this we have two items the first

00:09:47,680 --> 00:09:51,600
one is that we are finalizing

00:09:49,440 --> 00:09:55,040
the upstream of the first step in which

00:09:51,600 --> 00:09:56,399
we have a scmi backend or a semi server

00:09:55,040 --> 00:09:58,240
which is running as a trusted

00:09:56,399 --> 00:09:59,680
application

00:09:58,240 --> 00:10:01,680
so we are working on adding an

00:09:59,680 --> 00:10:04,640
abstraction layers

00:10:01,680 --> 00:10:06,480
in order to ease the the port of the scp

00:10:04,640 --> 00:10:09,920
firmware that we are using

00:10:06,480 --> 00:10:11,920
into various execution environments

00:10:09,920 --> 00:10:13,680
and we'll continue working on the on

00:10:11,920 --> 00:10:16,480
adding this opti transport layer

00:10:13,680 --> 00:10:19,040
in this sap firmware and one of the next

00:10:16,480 --> 00:10:22,640
step will be to to to run this firmware

00:10:19,040 --> 00:10:24,959
in a guest vm with using the virteo hcmi

00:10:22,640 --> 00:10:28,160
as the main transport layer this will be

00:10:24,959 --> 00:10:30,480
one of the next step for us

00:10:28,160 --> 00:10:32,800
and i think that's all for me so let me

00:10:30,480 --> 00:10:32,800
give

00:10:34,320 --> 00:10:37,760
let me move to the next topic on which

00:10:36,959 --> 00:10:41,120
but you will

00:10:37,760 --> 00:10:43,600
will explain a bit more so on the rule

00:10:41,120 --> 00:10:45,519
processor and rp message

00:10:43,600 --> 00:10:47,440
we have seen a fair amount of new

00:10:45,519 --> 00:10:50,720
features uh

00:10:47,440 --> 00:10:51,680
in the last six months so what will be

00:10:50,720 --> 00:10:55,360
presented here

00:10:51,680 --> 00:10:57,920
is an overview of linero's activity but

00:10:55,360 --> 00:10:59,600
also what has happened in the community

00:10:57,920 --> 00:11:03,360
as a whole

00:10:59,600 --> 00:11:06,160
so uh we have seen support for detaching

00:11:03,360 --> 00:11:07,040
a remote processor so that complements

00:11:06,160 --> 00:11:10,320
the attach

00:11:07,040 --> 00:11:13,440
feature that happened

00:11:10,320 --> 00:11:14,240
like last year so detaching will be

00:11:13,440 --> 00:11:18,399
available

00:11:14,240 --> 00:11:21,519
in the 5.3 uh release cycle

00:11:18,399 --> 00:11:25,600
on the rp message and name service

00:11:21,519 --> 00:11:25,600
two interesting um

00:11:25,680 --> 00:11:30,800
features to talk about first it is now a

00:11:29,120 --> 00:11:33,519
standalone module

00:11:30,800 --> 00:11:35,600
so it is not only tied to remote proc

00:11:33,519 --> 00:11:37,720
anymore it can be used

00:11:35,600 --> 00:11:39,360
in other scenarios such as

00:11:37,720 --> 00:11:42,640
virtualization between

00:11:39,360 --> 00:11:45,839
a host and a guest it is also

00:11:42,640 --> 00:11:49,279
transport independent

00:11:45,839 --> 00:11:50,079
so once again allowing other areas of

00:11:49,279 --> 00:11:53,440
the kernel

00:11:50,079 --> 00:11:56,800
to use the mechanism and

00:11:53,440 --> 00:12:00,480
expand it to a different realms

00:11:56,800 --> 00:12:03,600
the rp message character driver is

00:12:00,480 --> 00:12:07,440
accessible from the virtio backend

00:12:03,600 --> 00:12:11,600
so that too will be available in 5.13

00:12:07,440 --> 00:12:14,240
and lastly support for many core dumps

00:12:11,600 --> 00:12:14,639
so if you have an application processor

00:12:14,240 --> 00:12:17,600
that

00:12:14,639 --> 00:12:19,920
is memory constrained and the remote

00:12:17,600 --> 00:12:22,560
processor happens to crash

00:12:19,920 --> 00:12:23,120
that core dump can be processed in

00:12:22,560 --> 00:12:25,760
stepped

00:12:23,120 --> 00:12:28,639
as memory is available rather than

00:12:25,760 --> 00:12:33,120
having to process the whole cordon

00:12:28,639 --> 00:12:33,680
uh as a whole uh with regards to ongoing

00:12:33,120 --> 00:12:37,600
work

00:12:33,680 --> 00:12:40,959
there's a lot of activity in the area of

00:12:37,600 --> 00:12:44,800
multiplexing various hardware protocols

00:12:40,959 --> 00:12:45,440
on top of rp message i will be coming

00:12:44,800 --> 00:12:49,120
out

00:12:45,440 --> 00:12:51,200
with a patch set in the coming weeks

00:12:49,120 --> 00:12:53,680
that have properly handles crash

00:12:51,200 --> 00:12:55,200
recovery when a processor has been

00:12:53,680 --> 00:12:57,920
attached to

00:12:55,200 --> 00:13:00,079
and lately we have seen discussions or

00:12:57,920 --> 00:13:03,120
we have started talking about

00:13:00,079 --> 00:13:05,120
uh how to extend the rp message uh

00:13:03,120 --> 00:13:06,880
protocol so if you are interested in

00:13:05,120 --> 00:13:09,760
that area

00:13:06,880 --> 00:13:11,839
join us on the mailing list so this is

00:13:09,760 --> 00:13:14,880
what i had for remote processor

00:13:11,839 --> 00:13:18,560
and rp message uh ulf

00:13:14,880 --> 00:13:22,480
will be taken over with an overview of

00:13:18,560 --> 00:13:22,480
what has happened in the storage area

00:13:25,519 --> 00:13:32,560
thanks matthew yes so the

00:13:29,120 --> 00:13:35,120
storage activities within linaro

00:13:32,560 --> 00:13:36,320
has more or less two two two topics

00:13:35,120 --> 00:13:39,680
we've been working on

00:13:36,320 --> 00:13:42,480
on uh emmc and sd cards

00:13:39,680 --> 00:13:44,240
and on that level uh we have been

00:13:42,480 --> 00:13:46,480
focusing on on

00:13:44,240 --> 00:13:48,000
improving uh i o right performance in

00:13:46,480 --> 00:13:49,760
particular for sd cards

00:13:48,000 --> 00:13:52,000
there's a couple of new features coming

00:13:49,760 --> 00:13:54,959
in from the sd spec that's been

00:13:52,000 --> 00:13:56,560
lacking and support so that is something

00:13:54,959 --> 00:13:58,720
that we've been looking at

00:13:56,560 --> 00:13:59,680
but we've also been looking at new types

00:13:58,720 --> 00:14:02,320
of sd cards

00:13:59,680 --> 00:14:02,720
that supports greater speed modes and

00:14:02,320 --> 00:14:04,800
these

00:14:02,720 --> 00:14:05,920
types are st express and uh just two

00:14:04,800 --> 00:14:09,040
things

00:14:05,920 --> 00:14:09,600
uh a lot of work has been completed but

00:14:09,040 --> 00:14:12,880
there is

00:14:09,600 --> 00:14:14,639
still some parts remaining and so we're

00:14:12,880 --> 00:14:17,760
working on on completing those

00:14:14,639 --> 00:14:18,800
as soon as we can when it comes to the

00:14:17,760 --> 00:14:22,160
other part for storage

00:14:18,800 --> 00:14:24,399
that's the bfq i o scheduler we have

00:14:22,160 --> 00:14:24,399
been

00:14:24,639 --> 00:14:29,120
working on improving this in particular

00:14:27,199 --> 00:14:29,680
from throughput and latency point of

00:14:29,120 --> 00:14:32,480
view

00:14:29,680 --> 00:14:34,880
and that's been a collaboration with a

00:14:32,480 --> 00:14:38,000
couple of guys from sousa

00:14:34,880 --> 00:14:38,800
most of this work has turned out into a

00:14:38,000 --> 00:14:41,680
big patch

00:14:38,800 --> 00:14:43,040
series of small step-by-step

00:14:41,680 --> 00:14:46,480
improvements

00:14:43,040 --> 00:14:50,399
and uh two thoughts of that series is

00:14:46,480 --> 00:14:52,800
has been uh made it upstream

00:14:50,399 --> 00:14:55,519
and we have submitted the the final

00:14:52,800 --> 00:14:57,680
things for this and so it's

00:14:55,519 --> 00:14:59,040
most likely to be completed within this

00:14:57,680 --> 00:15:02,480
cycle

00:14:59,040 --> 00:15:04,480
so that said um the when it comes to

00:15:02,480 --> 00:15:06,079
storage activities we are planning on

00:15:04,480 --> 00:15:08,240
ramping down

00:15:06,079 --> 00:15:10,320
on this field so more or less just

00:15:08,240 --> 00:15:12,160
moving moving to uh

00:15:10,320 --> 00:15:14,480
dealing with the maintenance both from

00:15:12,160 --> 00:15:16,160
emmc and sd subsystem and the bfq

00:15:14,480 --> 00:15:18,639
subsystem

00:15:16,160 --> 00:15:20,320
so um we will that said we will not be

00:15:18,639 --> 00:15:22,320
driving new airports in this

00:15:20,320 --> 00:15:23,440
field but more let's just dealing with

00:15:22,320 --> 00:15:27,839
the maintenance

00:15:23,440 --> 00:15:27,839
that's the plan at least

00:15:28,399 --> 00:15:32,079
i think that's for storage and we can

00:15:30,480 --> 00:15:35,440
move to sean philippe from

00:15:32,079 --> 00:15:39,040
sva right

00:15:35,440 --> 00:15:42,399
yeah i'm working on sva also

00:15:39,040 --> 00:15:44,800
called svm which is the ability to

00:15:42,399 --> 00:15:47,120
share virtual just space between cpu and

00:15:44,800 --> 00:15:50,560
devices

00:15:47,120 --> 00:15:54,639
it requires two special features

00:15:50,560 --> 00:15:57,920
in the device and the system mmu

00:15:54,639 --> 00:15:59,759
the first one is the ability for the

00:15:57,920 --> 00:16:03,839
device to have multiple

00:15:59,759 --> 00:16:03,839
address spaces um

00:16:04,880 --> 00:16:13,440
we merged that last year

00:16:08,720 --> 00:16:17,120
support for pa seed in the smu and

00:16:13,440 --> 00:16:20,800
in the immune care as well

00:16:17,120 --> 00:16:24,959
along with the possibility to share

00:16:20,800 --> 00:16:29,279
process address space with the smu

00:16:24,959 --> 00:16:33,920
the second hardware feature is the

00:16:29,279 --> 00:16:37,519
io page faults and support for this

00:16:33,920 --> 00:16:40,800
in the smu and the

00:16:37,519 --> 00:16:42,959
generic page fault handler is will be

00:16:40,800 --> 00:16:46,160
added in the

00:16:42,959 --> 00:16:46,160
next kernel version

00:16:48,959 --> 00:16:54,000
this should uh complete a svs report for

00:16:52,800 --> 00:16:57,680
the

00:16:54,000 --> 00:17:01,360
high silicon accelerators

00:16:57,680 --> 00:17:06,799
um the user api

00:17:01,360 --> 00:17:09,839
uxl has been merged last year as well

00:17:06,799 --> 00:17:14,000
for future work

00:17:09,839 --> 00:17:16,880
depending on the the need and the

00:17:14,000 --> 00:17:18,640
sva compatible hardware that appears

00:17:16,880 --> 00:17:22,240
will be

00:17:18,640 --> 00:17:25,360
upstreaming support for pri and

00:17:22,240 --> 00:17:28,559
dvm which is um which allows to

00:17:25,360 --> 00:17:30,240
send turbine variations using cpu

00:17:28,559 --> 00:17:32,960
instructions

00:17:30,240 --> 00:17:35,120
there is a lot of work to be done on

00:17:32,960 --> 00:17:38,240
improving and optimizing the

00:17:35,120 --> 00:17:41,440
io page fault handler and um

00:17:38,240 --> 00:17:41,919
virtualization for sva which requires a

00:17:41,440 --> 00:17:45,360
lot of

00:17:41,919 --> 00:17:48,640
api work and is being discussed

00:17:45,360 --> 00:17:51,360
on the list that's

00:17:48,640 --> 00:17:51,360
that's all for me

00:17:53,120 --> 00:18:00,000
okay so let okay

00:17:56,640 --> 00:18:01,520
make you the next one yeah hi

00:18:00,000 --> 00:18:03,280
um i'm going to briefly talk about

00:18:01,520 --> 00:18:03,679
coresight work that's happened over the

00:18:03,280 --> 00:18:06,880
past

00:18:03,679 --> 00:18:07,840
year um corsac system configuration

00:18:06,880 --> 00:18:09,600
management

00:18:07,840 --> 00:18:12,160
enables the programming of components

00:18:09,600 --> 00:18:13,600
such as etm devices especially

00:18:12,160 --> 00:18:15,600
using some of the more complex

00:18:13,600 --> 00:18:17,039
functionality not easily accessible from

00:18:15,600 --> 00:18:20,960
the perth command line or

00:18:17,039 --> 00:18:22,880
csfs uh programming a configuration onto

00:18:20,960 --> 00:18:23,520
a system enables that complete set of

00:18:22,880 --> 00:18:25,280
programming

00:18:23,520 --> 00:18:28,960
to be accessed by a single command

00:18:25,280 --> 00:18:32,000
either in perth or through config fs

00:18:28,960 --> 00:18:34,400
the baseline set uh includes an example

00:18:32,000 --> 00:18:36,320
of programming for etm v4

00:18:34,400 --> 00:18:39,360
that provides a strobing function this

00:18:36,320 --> 00:18:41,520
uses counters and sequencing on the etm

00:18:39,360 --> 00:18:42,640
to enable and disable trace in our

00:18:41,520 --> 00:18:45,600
user-defined

00:18:42,640 --> 00:18:47,200
markspace ratio so this is enabled

00:18:45,600 --> 00:18:48,799
pretty easily on the perf command line

00:18:47,200 --> 00:18:51,760
and then we'll be programming to

00:18:48,799 --> 00:18:53,360
whichever etm devices are used during

00:18:51,760 --> 00:18:55,520
the perf session

00:18:53,360 --> 00:18:57,520
so this example has already been used to

00:18:55,520 --> 00:19:00,559
collect sample trace data

00:18:57,520 --> 00:19:02,240
and generate profiles for auto fdo

00:19:00,559 --> 00:19:04,000
so hopefully this baseline set will be

00:19:02,240 --> 00:19:07,360
queued in the

00:19:04,000 --> 00:19:08,799
513 merge window there will be some

00:19:07,360 --> 00:19:10,320
follow-up patch sets to this which will

00:19:08,799 --> 00:19:12,400
enable users to define their own

00:19:10,320 --> 00:19:15,280
configurations which were loadable as

00:19:12,400 --> 00:19:17,440
kernel modules or through config fs this

00:19:15,280 --> 00:19:19,760
along with support for cti and other

00:19:17,440 --> 00:19:21,520
coresight components will allow

00:19:19,760 --> 00:19:22,080
development of configurations that can

00:19:21,520 --> 00:19:26,960
operate

00:19:22,080 --> 00:19:28,799
across the entire uh cause height system

00:19:26,960 --> 00:19:31,039
uh there's been some further coresight

00:19:28,799 --> 00:19:32,640
work from uh the community at large

00:19:31,039 --> 00:19:34,480
which includes support for tracing when

00:19:32,640 --> 00:19:36,400
the kernels in the l2

00:19:34,480 --> 00:19:37,679
this is introduced with the architecture

00:19:36,400 --> 00:19:40,240
virtual

00:19:37,679 --> 00:19:42,000
extensions there's also been some work

00:19:40,240 --> 00:19:43,039
that i support for the architecture

00:19:42,000 --> 00:19:46,080
version 8.4

00:19:43,039 --> 00:19:48,320
self-hosted trace extensions

00:19:46,080 --> 00:19:50,000
finally uh support for the future

00:19:48,320 --> 00:19:52,400
architecture features ete

00:19:50,000 --> 00:19:54,960
and trbe have been the subject of patch

00:19:52,400 --> 00:19:57,760
sets from engineers at on

00:19:54,960 --> 00:19:59,520
et and prba are both internal core

00:19:57,760 --> 00:20:01,120
features that are accessed through core

00:19:59,520 --> 00:20:03,600
system instructions

00:20:01,120 --> 00:20:04,960
rather than being memory mapped external

00:20:03,600 --> 00:20:08,400
components

00:20:04,960 --> 00:20:10,240
like the etm or eti so briefly et is an

00:20:08,400 --> 00:20:12,159
extension to etm

00:20:10,240 --> 00:20:13,919
v4 that adds trace support for newer

00:20:12,159 --> 00:20:17,280
core architecture features

00:20:13,919 --> 00:20:19,679
and trbe is the equivalent to an eti

00:20:17,280 --> 00:20:21,760
and it it's a per core component that

00:20:19,679 --> 00:20:24,159
writes trace data direct to memory

00:20:21,760 --> 00:20:25,760
accessible from the core

00:20:24,159 --> 00:20:29,200
uh so that's all i have there so i think

00:20:25,760 --> 00:20:32,240
it's over to uh on now for the uh

00:20:29,200 --> 00:20:34,799
uh armstock maintenance

00:20:32,240 --> 00:20:36,159
so yeah that will be either linus on i

00:20:34,799 --> 00:20:40,400
don't know if linus

00:20:36,159 --> 00:20:43,840
has been able to join as a speaker here

00:20:40,400 --> 00:20:46,400
great yeah um

00:20:43,840 --> 00:20:48,799
i can talk about it the armed can

00:20:46,400 --> 00:20:51,280
correct me if i'm saying something wrong

00:20:48,799 --> 00:20:52,720
there is uh there was a while back a

00:20:51,280 --> 00:20:55,840
long discussion thread about

00:20:52,720 --> 00:20:59,200
uh highman and um the page cache

00:20:55,840 --> 00:21:00,159
specifically there's a lot of extra code

00:20:59,200 --> 00:21:03,200
in the kernel or

00:21:00,159 --> 00:21:05,520
especially complicated code to

00:21:03,200 --> 00:21:06,400
use the high mount for page cache

00:21:05,520 --> 00:21:08,320
because uh

00:21:06,400 --> 00:21:10,799
hi mam unless you know what it is it's

00:21:08,320 --> 00:21:14,159
it's it's memory that's outside of the

00:21:10,799 --> 00:21:15,679
kernels one-to-one mapping or the

00:21:14,159 --> 00:21:16,960
that you would have to selectively map

00:21:15,679 --> 00:21:18,240
in when you want to use it the only

00:21:16,960 --> 00:21:19,919
thing you can actually use it for is

00:21:18,240 --> 00:21:21,440
page cache and for that reason page

00:21:19,919 --> 00:21:24,080
cache contains a lot of

00:21:21,440 --> 00:21:26,320
complicated code to deal with that and

00:21:24,080 --> 00:21:26,320
um

00:21:26,880 --> 00:21:30,000
the one place where we use a lot of him

00:21:29,120 --> 00:21:33,120
in the arm architecture

00:21:30,000 --> 00:21:34,640
is the rm32 architecture the arm 64 does

00:21:33,120 --> 00:21:36,799
not have this problem because it has

00:21:34,640 --> 00:21:39,280
such a large address space that it

00:21:36,799 --> 00:21:42,720
doesn't need to section it into

00:21:39,280 --> 00:21:45,360
one part that's mapped and

00:21:42,720 --> 00:21:46,400
one that is not because it has a better

00:21:45,360 --> 00:21:48,880
setup for that

00:21:46,400 --> 00:21:49,600
many more external memory lines and so

00:21:48,880 --> 00:21:53,440
on

00:21:49,600 --> 00:21:55,039
so um we need to deal with that and the

00:21:53,440 --> 00:21:57,360
idea is to

00:21:55,039 --> 00:21:58,640
partition the virtual memory differently

00:21:57,360 --> 00:22:00,559
so that you have

00:21:58,640 --> 00:22:01,840
one set of memory mappings for kernel

00:22:00,559 --> 00:22:03,679
space and one set for

00:22:01,840 --> 00:22:06,240
user space right now we are sharing this

00:22:03,679 --> 00:22:08,400
which is a performance optimization

00:22:06,240 --> 00:22:10,840
that you do in order to speed up the

00:22:08,400 --> 00:22:13,520
kernel to user space

00:22:10,840 --> 00:22:16,640
swap um

00:22:13,520 --> 00:22:20,240
and uh to achieve that this uh

00:22:16,640 --> 00:22:23,760
two different legs of four gigs each we

00:22:20,240 --> 00:22:26,320
need to yeah go step wise

00:22:23,760 --> 00:22:27,600
and uh what i'm looking into now is to

00:22:26,320 --> 00:22:30,880
move the kernel

00:22:27,600 --> 00:22:30,880
out of the current

00:22:31,120 --> 00:22:35,679
c 0 million mapping and into the via

00:22:33,600 --> 00:22:37,200
malloc space so we just have to

00:22:35,679 --> 00:22:38,799
because you always have to access the

00:22:37,200 --> 00:22:40,400
kernel memory from user space and then

00:22:38,799 --> 00:22:42,480
you have to put it in somewhere and then

00:22:40,400 --> 00:22:43,840
you want to put in all of the via malloc

00:22:42,480 --> 00:22:46,960
area which is the

00:22:43,840 --> 00:22:48,720
the area which uh where the kernel can

00:22:46,960 --> 00:22:49,600
allocate freely so we take some of that

00:22:48,720 --> 00:22:53,600
memory

00:22:49,600 --> 00:22:54,080
and we use that to communicate with user

00:22:53,600 --> 00:22:55,600
space

00:22:54,080 --> 00:22:57,039
but we don't want to like map in two

00:22:55,600 --> 00:22:57,679
parts otherwise we have to map the

00:22:57,039 --> 00:22:59,840
kernel we have

00:22:57,679 --> 00:23:01,360
map user space so i'm working with that

00:22:59,840 --> 00:23:03,679
after that we have to do

00:23:01,360 --> 00:23:05,280
some other stuff to get this nice four

00:23:03,679 --> 00:23:06,559
by four split

00:23:05,280 --> 00:23:09,039
which is the other stuff you see here

00:23:06,559 --> 00:23:12,799
copy to and from user so

00:23:09,039 --> 00:23:16,720
that this can travel across the two

00:23:12,799 --> 00:23:19,039
to four gig memory stacks and so on

00:23:16,720 --> 00:23:20,480
so this is this is the big picture i

00:23:19,039 --> 00:23:21,280
don't know if you have any questions you

00:23:20,480 --> 00:23:23,520
can ask

00:23:21,280 --> 00:23:25,360
me or you can even preferably ask arndt

00:23:23,520 --> 00:23:27,840
which has the even better idea about it

00:23:25,360 --> 00:23:27,840
i suppose

00:23:34,080 --> 00:23:37,600
right i'll continue with the arm stock

00:23:35,840 --> 00:23:39,600
maintenance this is um

00:23:37,600 --> 00:23:41,679
work that's essentially been going on

00:23:39,600 --> 00:23:45,039
for the past 10 years

00:23:41,679 --> 00:23:48,080
and i'm just giving an update on

00:23:45,039 --> 00:23:50,559
um where we are and

00:23:48,080 --> 00:23:51,600
what the overall work looks like so i'm

00:23:50,559 --> 00:23:53,440
co-maintaining

00:23:51,600 --> 00:23:56,400
this together with olaf we've been doing

00:23:53,440 --> 00:23:59,200
this for a long time now there's

00:23:56,400 --> 00:24:01,279
a good tree that we maintain so anything

00:23:59,200 --> 00:24:04,480
that is specific to one of the

00:24:01,279 --> 00:24:07,600
many arm socks

00:24:04,480 --> 00:24:11,520
in around 100 different soc

00:24:07,600 --> 00:24:15,200
families from various vendors

00:24:11,520 --> 00:24:17,200
the code goes through our tree

00:24:15,200 --> 00:24:19,200
and from there we send a pull request to

00:24:17,200 --> 00:24:20,480
linux 12 volts to integrate it into the

00:24:19,200 --> 00:24:23,120
mainline

00:24:20,480 --> 00:24:24,720
kernel most of the changes these days

00:24:23,120 --> 00:24:26,480
are in device tree files but there are

00:24:24,720 --> 00:24:29,679
also a couple of drivers

00:24:26,480 --> 00:24:30,400
that go through our tree all the time

00:24:29,679 --> 00:24:33,520
and there's

00:24:30,400 --> 00:24:37,360
there's still platform code for 32-bit

00:24:33,520 --> 00:24:40,480
for 64-bit the

00:24:37,360 --> 00:24:41,039
code was designed from the start to only

00:24:40,480 --> 00:24:43,279
have

00:24:41,039 --> 00:24:44,720
platform-specific drivers and

00:24:43,279 --> 00:24:45,520
architecture code that is platform

00:24:44,720 --> 00:24:48,960
independent

00:24:45,520 --> 00:24:51,760
so there's no strict

00:24:48,960 --> 00:24:53,840
code for 64-bit platforms other than

00:24:51,760 --> 00:24:55,200
drivers

00:24:53,840 --> 00:24:56,799
and then of course we have to work with

00:24:55,200 --> 00:24:59,120
all these maintainers there's usually

00:24:56,799 --> 00:25:02,559
around 80 pull requests i get

00:24:59,120 --> 00:25:04,000
in the merge window and then we merge

00:25:02,559 --> 00:25:07,279
those in sometimes

00:25:04,000 --> 00:25:09,120
we reject something um

00:25:07,279 --> 00:25:11,039
it used to be a little bit bigger than

00:25:09,120 --> 00:25:13,200
it is now so it's now nowadays it's

00:25:11,039 --> 00:25:14,000
typically around 800 patches per merge

00:25:13,200 --> 00:25:17,039
window

00:25:14,000 --> 00:25:19,039
and it's roughly 50 50 split between

00:25:17,039 --> 00:25:22,320
work for 32 and 64 bit

00:25:19,039 --> 00:25:25,919
even though there are many more machines

00:25:22,320 --> 00:25:28,960
for 32 bit we are

00:25:25,919 --> 00:25:29,600
adding most of the time we're adding

00:25:28,960 --> 00:25:33,279
more

00:25:29,600 --> 00:25:36,720
64-bit machines new but there's still

00:25:33,279 --> 00:25:39,679
i expect that we will see 32-bit for

00:25:36,720 --> 00:25:41,360
quite a while in new socs new new

00:25:39,679 --> 00:25:43,039
machines

00:25:41,360 --> 00:25:45,120
the most recently we have actually

00:25:43,039 --> 00:25:48,080
deleted a couple of machines

00:25:45,120 --> 00:25:49,360
so um every few years i go through and

00:25:48,080 --> 00:25:52,799
see

00:25:49,360 --> 00:25:56,400
which of the machines are likely to

00:25:52,799 --> 00:25:58,480
not have any users anymore based on

00:25:56,400 --> 00:26:01,279
what i see from from users and what else

00:25:58,480 --> 00:26:02,880
i know and we ended up deleting six

00:26:01,279 --> 00:26:04,720
where we got a confirmation that the

00:26:02,880 --> 00:26:07,360
previous maintainers said

00:26:04,720 --> 00:26:09,120
uh no we are sure that nobody is using

00:26:07,360 --> 00:26:10,880
the upstream code anymore but that also

00:26:09,120 --> 00:26:11,840
means that we still have around 100

00:26:10,880 --> 00:26:15,520
platforms

00:26:11,840 --> 00:26:15,520
that are actively being used

00:26:16,640 --> 00:26:24,000
and i hand back to rason

00:26:20,320 --> 00:26:26,320
thank you so i think that we are running

00:26:24,000 --> 00:26:27,120
out of time but we have finished the

00:26:26,320 --> 00:26:31,440
slide

00:26:27,120 --> 00:26:33,360
so it was the last one so i propose to

00:26:31,440 --> 00:26:35,200
people who are interested to continue on

00:26:33,360 --> 00:26:38,880
the kernel working group of

00:26:35,200 --> 00:26:39,710
open office rooms so you will find that

00:26:38,880 --> 00:26:41,760
in the

00:26:39,710 --> 00:26:44,159
[Music]

00:26:41,760 --> 00:26:45,600
application and website and then we can

00:26:44,159 --> 00:26:46,240
we can answer to your question if you

00:26:45,600 --> 00:26:48,880
have any

00:26:46,240 --> 00:26:49,679
so see you in a few minutes in this uh

00:26:48,880 --> 00:26:53,039
in this room

00:26:49,679 --> 00:26:56,799
thank you everybody and

00:26:53,039 --> 00:26:56,799

YouTube URL: https://www.youtube.com/watch?v=uHQSqaB5y1E


