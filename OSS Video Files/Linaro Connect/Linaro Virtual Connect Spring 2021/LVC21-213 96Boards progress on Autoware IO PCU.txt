Title: LVC21-213 96Boards progress on Autoware IO PCU
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Overview of 96Boards progress on different aspects from Autoware using Autocore's PCU, the first board within the Autoware.IO project
Captions: 
	00:00:04,319 --> 00:00:07,600
okay

00:00:04,960 --> 00:00:08,800
we are live hello everybody depending on

00:00:07,600 --> 00:00:11,120
where you are

00:00:08,800 --> 00:00:12,320
good morning good evening or good night

00:00:11,120 --> 00:00:14,480
i hope you all

00:00:12,320 --> 00:00:16,240
had a nice stretch with the previous

00:00:14,480 --> 00:00:19,520
yoga session

00:00:16,240 --> 00:00:21,920
and well my name is servando i'm

00:00:19,520 --> 00:00:23,760
going to cover a little bit of a

00:00:21,920 --> 00:00:26,720
progress over the last year

00:00:23,760 --> 00:00:27,920
for 96 boards mainly what uh we have

00:00:26,720 --> 00:00:31,119
been doing on the

00:00:27,920 --> 00:00:34,079
autoword dot io project specifically

00:00:31,119 --> 00:00:35,360
on the pcu the perception control unit

00:00:34,079 --> 00:00:37,680
which i will

00:00:35,360 --> 00:00:38,480
present in a little bit and just let's

00:00:37,680 --> 00:00:41,520
get started

00:00:38,480 --> 00:00:43,520
well as i said my name is servando

00:00:41,520 --> 00:00:44,800
masorano so i'm a spanish engineer

00:00:43,520 --> 00:00:47,760
that's a

00:00:44,800 --> 00:00:48,559
young me from over seven or eight years

00:00:47,760 --> 00:00:50,079
ago

00:00:48,559 --> 00:00:52,480
i'm a software applications engineer

00:00:50,079 --> 00:00:55,120
within linaro at the 96 sports team

00:00:52,480 --> 00:00:56,399
and from my background i have been

00:00:55,120 --> 00:00:59,280
working on

00:00:56,399 --> 00:00:59,760
random robotics and autonomous systems

00:00:59,280 --> 00:01:04,239
from

00:00:59,760 --> 00:01:04,239
quadcopters submarines and ground rovers

00:01:04,320 --> 00:01:08,479
so uh just a year ago actually was i was

00:01:07,680 --> 00:01:11,600
checking

00:01:08,479 --> 00:01:15,439
and it was 24th march 2020

00:01:11,600 --> 00:01:18,880
on the on the first linear tech days

00:01:15,439 --> 00:01:21,119
i presented the progress that we had

00:01:18,880 --> 00:01:23,200
come across from the previous years of

00:01:21,119 --> 00:01:25,920
2019 to 2020

00:01:23,200 --> 00:01:26,640
on on ottawa and what we have been doing

00:01:25,920 --> 00:01:29,840
and

00:01:26,640 --> 00:01:30,720
here just a little bit of a recap i had

00:01:29,840 --> 00:01:33,600
been working with

00:01:30,720 --> 00:01:35,360
uh different socs uh getting ready for

00:01:33,600 --> 00:01:36,720
rose 2 and otterwear

00:01:35,360 --> 00:01:38,240
if you recall from the previous

00:01:36,720 --> 00:01:40,000
presentations and if you're familiar

00:01:38,240 --> 00:01:43,119
with ottawa

00:01:40,000 --> 00:01:45,040
i was with at that point it was mainly

00:01:43,119 --> 00:01:48,799
auto where dot ai built on ros

00:01:45,040 --> 00:01:50,960
one and what we wanted is be sure that

00:01:48,799 --> 00:01:53,280
the range of 96 boards would be able to

00:01:50,960 --> 00:01:56,079
support ros 2 and auto

00:01:53,280 --> 00:01:56,799
auto which was a clean rewrite of

00:01:56,079 --> 00:01:59,920
photoware

00:01:56,799 --> 00:02:03,040
using ros2 so what we did was uh

00:01:59,920 --> 00:02:07,840
mainly work on high key 970 dragon ball

00:02:03,040 --> 00:02:08,959
45c through the rp3 kit ultra 96 as well

00:02:07,840 --> 00:02:11,520
um

00:02:08,959 --> 00:02:12,560
if i recall correctly those are the main

00:02:11,520 --> 00:02:15,120
ones that i used

00:02:12,560 --> 00:02:16,560
uh here for example what we wanted to

00:02:15,120 --> 00:02:19,840
check is that we could run

00:02:16,560 --> 00:02:22,239
uh real-time tasks on on the boards and

00:02:19,840 --> 00:02:23,599
here we can see we took the rust to

00:02:22,239 --> 00:02:25,840
real-time demo

00:02:23,599 --> 00:02:26,720
at that point which has changed a little

00:02:25,840 --> 00:02:29,760
bit in terms of

00:02:26,720 --> 00:02:32,720
what it can do but at that point

00:02:29,760 --> 00:02:35,680
what i did was uh patch the premium 30

00:02:32,720 --> 00:02:36,879
linux kernel onto the high key 970 and

00:02:35,680 --> 00:02:40,319
as well

00:02:36,879 --> 00:02:41,760
on to the dragon board for the hiking

00:02:40,319 --> 00:02:44,319
970 was a

00:02:41,760 --> 00:02:46,640
normal kernel patching and everything

00:02:44,319 --> 00:02:49,360
but for the dragon ball as well we

00:02:46,640 --> 00:02:50,000
overlapped on top docker image because

00:02:49,360 --> 00:02:51,840
we were using

00:02:50,000 --> 00:02:53,040
deviantbuster and there was there was no

00:02:51,840 --> 00:02:56,239
support for ros2

00:02:53,040 --> 00:02:59,360
on the onto the ambassador so we we

00:02:56,239 --> 00:03:00,080
put a docker image with with ubuntu i

00:02:59,360 --> 00:03:03,200
think to

00:03:00,080 --> 00:03:05,040
to run the rows to real time demo and

00:03:03,200 --> 00:03:07,200
here we basically compare

00:03:05,040 --> 00:03:08,800
with two of the dds implementation which

00:03:07,200 --> 00:03:11,440
is the middleware that uh

00:03:08,800 --> 00:03:14,319
is being used for russ2 at the moment

00:03:11,440 --> 00:03:17,440
namely fast rtps which is fast dds now

00:03:14,319 --> 00:03:20,000
and cyclone dds and what we

00:03:17,440 --> 00:03:22,319
basically checked is that apart from a

00:03:20,000 --> 00:03:24,720
spike at the start of the demo

00:03:22,319 --> 00:03:26,080
mainly due to memory allocations and

00:03:24,720 --> 00:03:28,720
that sort of stuff

00:03:26,080 --> 00:03:30,560
we were quite well below within the

00:03:28,720 --> 00:03:33,680
maximum jitter that was allowed

00:03:30,560 --> 00:03:34,319
for the for the demo so that was that

00:03:33,680 --> 00:03:36,239
was

00:03:34,319 --> 00:03:37,840
positive news in terms that we could do

00:03:36,239 --> 00:03:40,080
some real-time work

00:03:37,840 --> 00:03:42,400
in the future and as well everything is

00:03:40,080 --> 00:03:43,519
uh documented in the blog post within

00:03:42,400 --> 00:03:46,959
the 96 ports

00:03:43,519 --> 00:03:49,760
website and we provided that

00:03:46,959 --> 00:03:51,680
building a step towards other

00:03:49,760 --> 00:03:54,799
contributors or people working on

00:03:51,680 --> 00:03:56,640
on higher end applications at least all

00:03:54,799 --> 00:03:58,480
the initial setup and configuration you

00:03:56,640 --> 00:04:01,120
can just go to the blog post

00:03:58,480 --> 00:04:02,159
go through that and and get it all

00:04:01,120 --> 00:04:06,080
sorted out

00:04:02,159 --> 00:04:09,200
apart from this uh we as well run

00:04:06,080 --> 00:04:10,720
different workloads within underwear

00:04:09,200 --> 00:04:12,480
uh what was available so for

00:04:10,720 --> 00:04:14,319
autoworld.ti

00:04:12,480 --> 00:04:15,599
it's a it's a software stack for

00:04:14,319 --> 00:04:18,400
autonomous vehicles so

00:04:15,599 --> 00:04:19,919
as of course uh we cannot run everything

00:04:18,400 --> 00:04:23,199
within one board so we

00:04:19,919 --> 00:04:25,040
selected specific demos and what was

00:04:23,199 --> 00:04:28,160
available at the moment for auto

00:04:25,040 --> 00:04:30,960
auto was a subset of components and

00:04:28,160 --> 00:04:33,040
here i've taken the 3d perception

00:04:30,960 --> 00:04:33,520
software stack demo for autograph.auto

00:04:33,040 --> 00:04:37,600
which

00:04:33,520 --> 00:04:38,800
where we had a data file from a velodin

00:04:37,600 --> 00:04:41,680
lidar

00:04:38,800 --> 00:04:42,880
uh fed that through the through the

00:04:41,680 --> 00:04:46,160
lidar drivers

00:04:42,880 --> 00:04:48,560
written in ros2 and we did some

00:04:46,160 --> 00:04:49,280
ground uh point perception and boxer

00:04:48,560 --> 00:04:52,560
great uh

00:04:49,280 --> 00:04:54,320
cloud no point cloud uh

00:04:52,560 --> 00:04:56,880
clustering apartments from a clear

00:04:54,320 --> 00:04:58,800
clustering that is not shown here

00:04:56,880 --> 00:05:00,240
apart from that then we have a blog

00:04:58,800 --> 00:05:02,320
series on on ottaware

00:05:00,240 --> 00:05:04,000
which is called autoware everywhere

00:05:02,320 --> 00:05:05,600
where we we recall

00:05:04,000 --> 00:05:07,680
everything that we have been doing and

00:05:05,600 --> 00:05:08,800
for otherworld.a in particular we have

00:05:07,680 --> 00:05:12,000
shown as well

00:05:08,800 --> 00:05:14,720
how to do some mapping doing some using

00:05:12,000 --> 00:05:16,639
rosbach data and some localization

00:05:14,720 --> 00:05:19,759
within the map using the

00:05:16,639 --> 00:05:21,759
ndt matching algorithm which takes a

00:05:19,759 --> 00:05:24,320
point cloud from the lidar that you are

00:05:21,759 --> 00:05:24,800
feeding a point cloud map 3d point cloud

00:05:24,320 --> 00:05:27,440
map

00:05:24,800 --> 00:05:28,320
and actually outputs the the current

00:05:27,440 --> 00:05:31,120
location of the

00:05:28,320 --> 00:05:31,840
of the car itself as i said we tried

00:05:31,120 --> 00:05:34,800
everything on

00:05:31,840 --> 00:05:35,759
on different socs within the 96 world's

00:05:34,800 --> 00:05:38,080
ecosystem

00:05:35,759 --> 00:05:40,400
because we didn't have a specific

00:05:38,080 --> 00:05:44,160
hardware from the ottawa.io project

00:05:40,400 --> 00:05:46,560
and actually we announced uh it came out

00:05:44,160 --> 00:05:48,000
soon before the narrow tech days on

00:05:46,560 --> 00:05:51,440
2020.

00:05:48,000 --> 00:05:52,560
this is autocore pcu which is the first

00:05:51,440 --> 00:05:56,000
board within the auto

00:05:52,560 --> 00:05:57,600
dot io project i have taken here uh what

00:05:56,000 --> 00:06:00,880
is currently available for

00:05:57,600 --> 00:06:01,520
for for the pcu at the moment well at

00:06:00,880 --> 00:06:04,000
that time

00:06:01,520 --> 00:06:05,440
at that point in time it we had an an

00:06:04,000 --> 00:06:08,479
image with ubuntu 18

00:06:05,440 --> 00:06:08,880
rost2 dashing and ros1 but if you go on

00:06:08,479 --> 00:06:11,039
to

00:06:08,880 --> 00:06:12,720
on to the resource page which autocorp

00:06:11,039 --> 00:06:15,919
provides a ton of

00:06:12,720 --> 00:06:17,440
information and how to use apart from

00:06:15,919 --> 00:06:19,680
different tools and

00:06:17,440 --> 00:06:21,680
and set up on how to to do things with

00:06:19,680 --> 00:06:24,080
the to get ready up and running with the

00:06:21,680 --> 00:06:25,919
without the course with the pcu

00:06:24,080 --> 00:06:28,479
the last and the latest image that we

00:06:25,919 --> 00:06:30,479
have been using contains ubuntu 2004

00:06:28,479 --> 00:06:33,600
with ros2 foxy

00:06:30,479 --> 00:06:34,000
apart from that uh the this image

00:06:33,600 --> 00:06:36,000
actually

00:06:34,000 --> 00:06:37,199
has as well the pre-emptive patch

00:06:36,000 --> 00:06:39,280
enabled

00:06:37,199 --> 00:06:41,280
uh with within it so you could have a

00:06:39,280 --> 00:06:44,240
soft real-time system

00:06:41,280 --> 00:06:46,319
up and running in a matter of like ten

00:06:44,240 --> 00:06:46,880
five to ten minutes that takes to burn

00:06:46,319 --> 00:06:49,759
the

00:06:46,880 --> 00:06:51,759
to flash the sd card apart from that

00:06:49,759 --> 00:06:54,720
since this is uh this board is a

00:06:51,759 --> 00:06:55,280
mpumcu combination they provide an image

00:06:54,720 --> 00:06:57,520
with free

00:06:55,280 --> 00:06:58,560
rtos and a lightweight simulator that

00:06:57,520 --> 00:07:00,479
you can run on

00:06:58,560 --> 00:07:02,639
windows i think they have provided a

00:07:00,479 --> 00:07:05,440
version for linux as well now

00:07:02,639 --> 00:07:05,919
to to do some hardware in the loop and

00:07:05,440 --> 00:07:10,080
as well

00:07:05,919 --> 00:07:13,680
some optimized autoware nodes for the

00:07:10,080 --> 00:07:14,880
for the pcu in here uh some of you might

00:07:13,680 --> 00:07:17,440
be missing some

00:07:14,880 --> 00:07:18,000
ai and neural networks and that sort of

00:07:17,440 --> 00:07:21,199
stuff

00:07:18,000 --> 00:07:23,360
and they provide a pcie

00:07:21,199 --> 00:07:26,400
support so you could potentially get

00:07:23,360 --> 00:07:28,639
google coral or tpu and plug it in and

00:07:26,400 --> 00:07:29,840
run all neural networks and that sort of

00:07:28,639 --> 00:07:31,759
that sort of things with the

00:07:29,840 --> 00:07:33,759
workloads within the within the pcu as

00:07:31,759 --> 00:07:35,680
well the nice thing about the pcu

00:07:33,759 --> 00:07:37,039
is that it's auto-grade so you could

00:07:35,680 --> 00:07:39,919
potentially

00:07:37,039 --> 00:07:40,800
run things on your board i have one here

00:07:39,919 --> 00:07:43,919
which

00:07:40,800 --> 00:07:46,800
jan brought from from china just before

00:07:43,919 --> 00:07:48,960
the lockdown and i managed to to steal

00:07:46,800 --> 00:07:50,720
and which has been a little bit of a

00:07:48,960 --> 00:07:52,400
nightmare and a dream at points as i

00:07:50,720 --> 00:07:54,080
will cover a bit later

00:07:52,400 --> 00:07:56,000
but basically you can do your

00:07:54,080 --> 00:07:56,720
development on the board it's uh and

00:07:56,000 --> 00:07:58,960
then just

00:07:56,720 --> 00:08:00,240
try and deploy on the on a vehicle

00:07:58,960 --> 00:08:02,080
because it has all the interfaces i

00:08:00,240 --> 00:08:03,599
would expect for uh for a vehicle can

00:08:02,080 --> 00:08:06,720
interface all the

00:08:03,599 --> 00:08:08,560
debuss sort of range

00:08:06,720 --> 00:08:10,639
i don't know if you can see here maybe

00:08:08,560 --> 00:08:13,680
not the best

00:08:10,639 --> 00:08:15,280
and so it basically comes joins all the

00:08:13,680 --> 00:08:16,639
development and natural deployments

00:08:15,280 --> 00:08:18,639
afterwards

00:08:16,639 --> 00:08:20,000
and as i said uh in this presentation

00:08:18,639 --> 00:08:21,360
i'm gonna be covering

00:08:20,000 --> 00:08:23,919
all the work that i have been doing in

00:08:21,360 --> 00:08:27,759
the past year on the pcu

00:08:23,919 --> 00:08:28,479
uh starting with the arm autonomy yukto

00:08:27,759 --> 00:08:30,879
layer

00:08:28,479 --> 00:08:31,919
which this was so this was one of the

00:08:30,879 --> 00:08:34,800
first nightmares

00:08:31,919 --> 00:08:35,680
with the board uh coming basically

00:08:34,800 --> 00:08:37,440
because i

00:08:35,680 --> 00:08:39,279
haven't hadn't used the joke to approve

00:08:37,440 --> 00:08:41,760
yet before so it was a

00:08:39,279 --> 00:08:42,880
little bit of a steep learning curve uh

00:08:41,760 --> 00:08:45,200
with it

00:08:42,880 --> 00:08:46,560
but basically what we tried is uh we

00:08:45,200 --> 00:08:48,160
managed to enable

00:08:46,560 --> 00:08:50,240
the hormotonomy octo layer which

00:08:48,160 --> 00:08:52,000
provides a hypervisor solution for

00:08:50,240 --> 00:08:54,560
autonomous systems

00:08:52,000 --> 00:08:55,839
it's uh it's fully available it's all

00:08:54,560 --> 00:08:56,399
public and available and basically

00:08:55,839 --> 00:08:58,560
contains

00:08:56,399 --> 00:09:00,640
all recipes and classes for host and gas

00:08:58,560 --> 00:09:02,320
systems instead of using the default

00:09:00,640 --> 00:09:05,360
boards that are suggested within the

00:09:02,320 --> 00:09:08,480
documentation of arm of our metonomy

00:09:05,360 --> 00:09:10,880
we managed to unravel the nxp

00:09:08,480 --> 00:09:12,000
flex builder tool to put together an

00:09:10,880 --> 00:09:15,120
image together

00:09:12,000 --> 00:09:16,959
using normotonomy and for those of you

00:09:15,120 --> 00:09:20,480
that rather watch the movie than

00:09:16,959 --> 00:09:22,959
go through the book we as well have a

00:09:20,480 --> 00:09:24,399
video blog post of everything is

00:09:22,959 --> 00:09:25,760
included in the blog post but there is a

00:09:24,399 --> 00:09:28,399
video here

00:09:25,760 --> 00:09:29,360
with all the different steps books that

00:09:28,399 --> 00:09:32,720
you would need to

00:09:29,360 --> 00:09:33,440
to get the image up and going in an easy

00:09:32,720 --> 00:09:35,120
and

00:09:33,440 --> 00:09:38,399
chunky manner so basically it's a five

00:09:35,120 --> 00:09:40,560
minute video on how to get things going

00:09:38,399 --> 00:09:41,839
apart from that so moving on from from

00:09:40,560 --> 00:09:43,680
our autonomy

00:09:41,839 --> 00:09:45,600
we wanted to test as well the real-time

00:09:43,680 --> 00:09:46,480
capabilities and and get it ready for

00:09:45,600 --> 00:09:49,360
real-time

00:09:46,480 --> 00:09:51,360
workload and as i mentioned since we

00:09:49,360 --> 00:09:53,760
already had preempt rt

00:09:51,360 --> 00:09:55,519
uh the preemptory patch it wouldn't make

00:09:53,760 --> 00:09:58,480
much sense to just

00:09:55,519 --> 00:10:00,640
have a video of flashing the the board

00:09:58,480 --> 00:10:00,959
and then just running this so instead we

00:10:00,640 --> 00:10:04,000
took

00:10:00,959 --> 00:10:06,880
uh cenomic version 3

00:10:04,000 --> 00:10:08,720
on on firstly which was quite a

00:10:06,880 --> 00:10:10,240
straightforward on the mercury core

00:10:08,720 --> 00:10:13,360
which is a single kernel plurals

00:10:10,240 --> 00:10:14,240
basically you build senamai alongside

00:10:13,360 --> 00:10:17,360
the preemptor t

00:10:14,240 --> 00:10:19,279
patch and for that you there's

00:10:17,360 --> 00:10:20,880
quite a few probably just need to

00:10:19,279 --> 00:10:22,320
download the sources from the next

00:10:20,880 --> 00:10:26,000
branch in order to target

00:10:22,320 --> 00:10:29,120
arc 64 architecture for the board

00:10:26,000 --> 00:10:31,600
and what we did we build the

00:10:29,120 --> 00:10:32,560
cinema and run the cyclic test i need to

00:10:31,600 --> 00:10:34,399
check that

00:10:32,560 --> 00:10:36,000
what is the maximum latency that we were

00:10:34,399 --> 00:10:38,079
getting and as you can see

00:10:36,000 --> 00:10:40,399
here what we were getting is that was

00:10:38,079 --> 00:10:43,200
around 120 microseconds

00:10:40,399 --> 00:10:45,760
which is uh quite nice but we wanted

00:10:43,200 --> 00:10:47,839
these to compare as well with the cobalt

00:10:45,760 --> 00:10:49,680
kernel which is a pure dual kernel

00:10:47,839 --> 00:10:52,240
approach

00:10:49,680 --> 00:10:53,680
uh for this one it was a little bit of a

00:10:52,240 --> 00:10:56,240
hiccup at the start

00:10:53,680 --> 00:10:59,120
so uh it's a bit of a background i'm

00:10:56,240 --> 00:11:02,959
running ubuntu 20 on my laptop

00:10:59,120 --> 00:11:05,760
and i was able to patch the eye pipe

00:11:02,959 --> 00:11:07,120
on the on the default linux kernel for

00:11:05,760 --> 00:11:09,680
for the pcu

00:11:07,120 --> 00:11:11,279
but if you try to do the same for the

00:11:09,680 --> 00:11:13,200
using ubuntu 18 which

00:11:11,279 --> 00:11:15,680
you would need to use the nxp flex

00:11:13,200 --> 00:11:17,760
visual tool that i was using for cross

00:11:15,680 --> 00:11:19,600
compiling the kernel for the pcu

00:11:17,760 --> 00:11:21,360
as well from the autocore sources

00:11:19,600 --> 00:11:24,560
because everything is

00:11:21,360 --> 00:11:27,839
there to to just grab and run without

00:11:24,560 --> 00:11:29,600
much customization but because the pcu

00:11:27,839 --> 00:11:30,880
kernel is a little bit customized if you

00:11:29,600 --> 00:11:33,680
would try to do that

00:11:30,880 --> 00:11:34,480
in ubuntu 18 it would break uh because

00:11:33,680 --> 00:11:36,800
it was

00:11:34,480 --> 00:11:37,519
missing a staff uh misalignments between

00:11:36,800 --> 00:11:40,480
the

00:11:37,519 --> 00:11:42,399
what the ipad was trying to target

00:11:40,480 --> 00:11:44,320
within the linux kernel sources

00:11:42,399 --> 00:11:45,440
so basically what we have done is we

00:11:44,320 --> 00:11:49,920
provided a modified

00:11:45,440 --> 00:11:52,800
ipad patch for anybody to just

00:11:49,920 --> 00:11:54,320
go around us download patch the kernel

00:11:52,800 --> 00:11:57,519
and you can basically use

00:11:54,320 --> 00:12:00,320
the flexibility to be the

00:11:57,519 --> 00:12:01,600
the patch kernel and then as what we did

00:12:00,320 --> 00:12:03,760
with the mercury

00:12:01,600 --> 00:12:05,600
with mercury core the main cobalt

00:12:03,760 --> 00:12:08,480
libraries for for cenomi

00:12:05,600 --> 00:12:10,000
are built ideally on the pcu and in here

00:12:08,480 --> 00:12:12,320
in this gif basically i show

00:12:10,000 --> 00:12:13,519
that after building the cobalt kernel

00:12:12,320 --> 00:12:16,560
you need to boot it

00:12:13,519 --> 00:12:19,839
and here we had it running all fine

00:12:16,560 --> 00:12:22,320
and as we did with the with mercury we

00:12:19,839 --> 00:12:24,240
run the cyclic test again

00:12:22,320 --> 00:12:27,839
but in this case we got a maximum of

00:12:24,240 --> 00:12:30,160
around 20 microseconds that's

00:12:27,839 --> 00:12:30,959
coming of depending on this is a higher

00:12:30,160 --> 00:12:32,639
real time

00:12:30,959 --> 00:12:34,399
capabilities that we can achieve on on

00:12:32,639 --> 00:12:36,160
the pcu now coming

00:12:34,399 --> 00:12:38,639
from from cinema depending on the way

00:12:36,160 --> 00:12:39,839
you go so you get around 120 or 20

00:12:38,639 --> 00:12:42,320
microseconds

00:12:39,839 --> 00:12:44,720
which is quite a quite a low a low

00:12:42,320 --> 00:12:48,240
latency for the

00:12:44,720 --> 00:12:51,680
for for the real-time tasks moving on

00:12:48,240 --> 00:12:52,160
from for from real time we wanted to

00:12:51,680 --> 00:12:55,440
check

00:12:52,160 --> 00:12:58,720
if we could have a distributed

00:12:55,440 --> 00:13:00,800
sort of auto wear running on

00:12:58,720 --> 00:13:02,240
on the board and maybe on multiple words

00:13:00,800 --> 00:13:04,839
in the future

00:13:02,240 --> 00:13:06,240
and to do that we had a look at

00:13:04,839 --> 00:13:08,079
kubernetes

00:13:06,240 --> 00:13:09,760
first thing that we need to do is check

00:13:08,079 --> 00:13:10,880
whether actually adding the kubernetes

00:13:09,760 --> 00:13:13,839
infrastructure

00:13:10,880 --> 00:13:16,160
impacted the the performance on the we

00:13:13,839 --> 00:13:19,200
took the cyclone dds

00:13:16,160 --> 00:13:20,959
to to assess this and to have because

00:13:19,200 --> 00:13:22,720
the idea basically instead of having the

00:13:20,959 --> 00:13:24,480
full auto or software stack because if

00:13:22,720 --> 00:13:26,000
you go to the

00:13:24,480 --> 00:13:27,360
to the documentation and everything you

00:13:26,000 --> 00:13:28,079
will have everything running on the same

00:13:27,360 --> 00:13:29,839
place

00:13:28,079 --> 00:13:31,839
what you want is to be able to manage

00:13:29,839 --> 00:13:33,279
every module independently as

00:13:31,839 --> 00:13:35,040
a service once you have a stable

00:13:33,279 --> 00:13:36,480
software there is no need to actually

00:13:35,040 --> 00:13:39,199
manually manually

00:13:36,480 --> 00:13:41,040
kick enough nodes and and that sort of

00:13:39,199 --> 00:13:42,320
stuff so we wanted to have a little bit

00:13:41,040 --> 00:13:44,320
of an orchestration

00:13:42,320 --> 00:13:45,920
abstraction onto it so as i said the

00:13:44,320 --> 00:13:47,680
first thing that we did was checking

00:13:45,920 --> 00:13:49,680
that the kubernetes cluster was not

00:13:47,680 --> 00:13:51,440
impacting the performance

00:13:49,680 --> 00:13:53,440
and we compared with our manually

00:13:51,440 --> 00:13:56,079
running the containers using the

00:13:53,440 --> 00:13:57,279
cyclone dds performance tool here we can

00:13:56,079 --> 00:13:59,199
see that

00:13:57,279 --> 00:14:00,880
basically we have the same throughput

00:13:59,199 --> 00:14:03,920
and and rate

00:14:00,880 --> 00:14:05,360
so we verify that there is no there's no

00:14:03,920 --> 00:14:07,839
problem of adding

00:14:05,360 --> 00:14:08,959
kubernetes onto the onto the mix which

00:14:07,839 --> 00:14:11,920
we were expecting

00:14:08,959 --> 00:14:14,480
we can do this basically because uh with

00:14:11,920 --> 00:14:16,000
the dds there is a serverless the

00:14:14,480 --> 00:14:18,720
masterless discovery within the

00:14:16,000 --> 00:14:20,079
different nodes that talk to each other

00:14:18,720 --> 00:14:22,079
which means that we don't need to go

00:14:20,079 --> 00:14:25,040
around setting eyepiece

00:14:22,079 --> 00:14:26,959
for for every pod or manually within

00:14:25,040 --> 00:14:29,519
within a generative cluster which is

00:14:26,959 --> 00:14:31,120
one of the benefits for of ros 2 against

00:14:29,519 --> 00:14:34,560
roshujan as well

00:14:31,120 --> 00:14:35,519
so once we checked this up we had a

00:14:34,560 --> 00:14:37,760
little bit of a

00:14:35,519 --> 00:14:39,440
break from the pcu and we started we

00:14:37,760 --> 00:14:40,320
collaborated a little bit with with tier

00:14:39,440 --> 00:14:42,720
4 on the new

00:14:40,320 --> 00:14:44,160
ottawa architecture proposal which is a

00:14:42,720 --> 00:14:47,120
bit of a cleanup on the

00:14:44,160 --> 00:14:48,639
original world dot ai actually

00:14:47,120 --> 00:14:52,160
clarifying the role of each

00:14:48,639 --> 00:14:54,079
module uh identifying the interfaces

00:14:52,160 --> 00:14:56,560
and and making sure that each module

00:14:54,079 --> 00:14:58,480
that's a particular thing

00:14:56,560 --> 00:15:00,240
and what we did was a little bit of

00:14:58,480 --> 00:15:02,959
porting work for

00:15:00,240 --> 00:15:03,519
from ros one to rush two of the software

00:15:02,959 --> 00:15:05,839
stack

00:15:03,519 --> 00:15:09,040
while at the same time auto where auto

00:15:05,839 --> 00:15:10,720
was was being developed uh coming to uh

00:15:09,040 --> 00:15:12,639
to our release which i will cover in a

00:15:10,720 --> 00:15:15,920
bit so as

00:15:12,639 --> 00:15:17,760
as we were waiting for for auto auto for

00:15:15,920 --> 00:15:20,320
the first release of whatever auto the

00:15:17,760 --> 00:15:21,120
guys from tier 4 sent across a rosbach

00:15:20,320 --> 00:15:22,720
data file

00:15:21,120 --> 00:15:25,920
that they recorded using the new

00:15:22,720 --> 00:15:26,880
architecture and what we did in here is

00:15:25,920 --> 00:15:30,480
making

00:15:26,880 --> 00:15:32,720
uh checking that having two pots

00:15:30,480 --> 00:15:33,920
managed through kubernetes we could play

00:15:32,720 --> 00:15:35,680
the rows back on one

00:15:33,920 --> 00:15:38,160
pot and the other one would be able to

00:15:35,680 --> 00:15:40,720
listen as well so we can see here

00:15:38,160 --> 00:15:41,279
there's a deployment general file that

00:15:40,720 --> 00:15:44,320
it's uh

00:15:41,279 --> 00:15:47,040
fully fully public and kicks off

00:15:44,320 --> 00:15:48,320
the rosbach deployment and a rostopic

00:15:47,040 --> 00:15:51,040
echo deployment

00:15:48,320 --> 00:15:51,759
and on on this end these are all both

00:15:51,040 --> 00:15:55,040
running on the

00:15:51,759 --> 00:15:57,199
on the pcu we can see that the

00:15:55,040 --> 00:15:58,079
it's possible to to echo the topics

00:15:57,199 --> 00:16:01,440
without

00:15:58,079 --> 00:16:02,720
any influence or any manually setting

00:16:01,440 --> 00:16:05,600
anything apart from

00:16:02,720 --> 00:16:06,399
getting the cluster up and running

00:16:05,600 --> 00:16:09,600
follow that

00:16:06,399 --> 00:16:11,279
uh we as well published and used the

00:16:09,600 --> 00:16:12,480
laptop for visualization to make sure

00:16:11,279 --> 00:16:14,320
that we have as well

00:16:12,480 --> 00:16:16,000
extract the the information from the

00:16:14,320 --> 00:16:16,720
kubernetes cluster and this is basically

00:16:16,000 --> 00:16:18,320
having

00:16:16,720 --> 00:16:20,320
the master node running on the laptop

00:16:18,320 --> 00:16:22,560
and a worker node from kubernetes

00:16:20,320 --> 00:16:26,240
running on the on the pcu

00:16:22,560 --> 00:16:27,920
and using rbs we can actually visualize

00:16:26,240 --> 00:16:30,320
the the lidar data that is being

00:16:27,920 --> 00:16:33,440
published in the system which is quite

00:16:30,320 --> 00:16:36,240
handy but not is far from what we want

00:16:33,440 --> 00:16:37,279
on the on on a real vehicle effectively

00:16:36,240 --> 00:16:41,199
we are just

00:16:37,279 --> 00:16:42,959
getting a data file and replaying it

00:16:41,199 --> 00:16:43,759
which is not doing anything meaningful

00:16:42,959 --> 00:16:45,440
with it

00:16:43,759 --> 00:16:48,399
that's basically because the new

00:16:45,440 --> 00:16:50,800
architecture is not as mature as

00:16:48,399 --> 00:16:52,079
we would need to have a point cloud map

00:16:50,800 --> 00:16:53,759
and everything that we didn't have at

00:16:52,079 --> 00:16:56,639
the moment

00:16:53,759 --> 00:16:59,040
so we this is the what we showed at the

00:16:56,639 --> 00:17:01,279
moment but at least it goes from

00:16:59,040 --> 00:17:03,440
having the dds performance tool step

00:17:01,279 --> 00:17:05,120
further actually adding cross nodes

00:17:03,440 --> 00:17:06,720
in the mix and making sure that

00:17:05,120 --> 00:17:10,400
everything can talk to each other and

00:17:06,720 --> 00:17:13,439
and the rates are fine and everything

00:17:10,400 --> 00:17:14,079
follow from that so we had uh so auto

00:17:13,439 --> 00:17:17,120
world

00:17:14,079 --> 00:17:19,760
was uh released after well

00:17:17,120 --> 00:17:21,039
the avp demo was happened on october

00:17:19,760 --> 00:17:22,799
00:17:21,039 --> 00:17:25,360
and these are the software packages that

00:17:22,799 --> 00:17:26,160
were available are available at the

00:17:25,360 --> 00:17:28,559
moment

00:17:26,160 --> 00:17:30,000
for the coming from the autonomous

00:17:28,559 --> 00:17:31,840
valley parking demo which is a

00:17:30,000 --> 00:17:33,120
localization using the entity with the

00:17:31,840 --> 00:17:34,799
velodin driver

00:17:33,120 --> 00:17:37,440
of the connotation planning and motion

00:17:34,799 --> 00:17:40,320
control and they developed everything

00:17:37,440 --> 00:17:41,760
using the elgsville simulator there are

00:17:40,320 --> 00:17:45,679
a couple of videos here

00:17:41,760 --> 00:17:47,919
of the car running autonomously

00:17:45,679 --> 00:17:49,760
this was done it was a little bit of a

00:17:47,919 --> 00:17:51,919
delay as well due to copies because

00:17:49,760 --> 00:17:54,400
everybody taking care of max and

00:17:51,919 --> 00:17:55,840
social distancing but we can see that

00:17:54,400 --> 00:17:57,600
the vehicle actually stops

00:17:55,840 --> 00:17:59,360
when there is an obstacle and in this

00:17:57,600 --> 00:18:01,440
video it

00:17:59,360 --> 00:18:02,720
manages to go to the parking spot that

00:18:01,440 --> 00:18:06,400
it needs to be

00:18:02,720 --> 00:18:08,559
and park itself autonomously so once

00:18:06,400 --> 00:18:10,960
this is completed we was there one of

00:18:08,559 --> 00:18:11,440
the milestones for the for the first ldd

00:18:10,960 --> 00:18:14,320
for

00:18:11,440 --> 00:18:16,080
for rottweiler auto and after a little

00:18:14,320 --> 00:18:16,799
bit of a cleanup so i will go a little

00:18:16,080 --> 00:18:19,039
bit further

00:18:16,799 --> 00:18:21,200
basically the car stops itself into the

00:18:19,039 --> 00:18:24,480
parking spot

00:18:21,200 --> 00:18:26,400
what we did uh so autoworld version

00:18:24,480 --> 00:18:29,440
1.0.0 was released

00:18:26,400 --> 00:18:30,480
and since we had a ton of software now

00:18:29,440 --> 00:18:33,280
that we could try

00:18:30,480 --> 00:18:34,559
and rush to we took the kubernetes

00:18:33,280 --> 00:18:37,280
further and actually

00:18:34,559 --> 00:18:37,919
did the what i showed initially on the

00:18:37,280 --> 00:18:40,160
multi

00:18:37,919 --> 00:18:42,400
soc so instead of using the high key and

00:18:40,160 --> 00:18:44,400
the dragon board we use the pcu

00:18:42,400 --> 00:18:45,840
to run the author of the world of 3d

00:18:44,400 --> 00:18:48,480
perception stack

00:18:45,840 --> 00:18:49,600
but in a distributed way so instead of

00:18:48,480 --> 00:18:52,799
having everything

00:18:49,600 --> 00:18:56,720
running manually from one container we

00:18:52,799 --> 00:18:59,039
have three docker images individually

00:18:56,720 --> 00:19:00,720
ones individual ones for each deployment

00:18:59,039 --> 00:19:02,559
so it's are

00:19:00,720 --> 00:19:04,000
separated and smaller than what you

00:19:02,559 --> 00:19:06,320
would expect for a full

00:19:04,000 --> 00:19:08,320
auto auto build which means that it's

00:19:06,320 --> 00:19:09,360
easy as well to roll updates

00:19:08,320 --> 00:19:11,360
in the future and everything and

00:19:09,360 --> 00:19:12,799
basically what we have mainly is the udp

00:19:11,360 --> 00:19:15,280
replay deployment which actually

00:19:12,799 --> 00:19:17,679
replaces the development pickup data

00:19:15,280 --> 00:19:19,360
a sensing deployment with kicks off the

00:19:17,679 --> 00:19:20,640
two drivers the for the front and the

00:19:19,360 --> 00:19:23,280
rear below the

00:19:20,640 --> 00:19:23,679
lidars and another one which is a little

00:19:23,280 --> 00:19:25,679
bit

00:19:23,679 --> 00:19:28,000
big so this one could be a split as well

00:19:25,679 --> 00:19:29,039
into individual ones which means lead to

00:19:28,000 --> 00:19:32,160
all the perception

00:19:29,039 --> 00:19:34,799
which is takes care of the transforms

00:19:32,160 --> 00:19:38,080
the point cloud

00:19:34,799 --> 00:19:40,080
the point cloud identifies which ones

00:19:38,080 --> 00:19:41,760
are belong to the ground and in order to

00:19:40,080 --> 00:19:44,960
be able to remove it and as well

00:19:41,760 --> 00:19:47,039
uh performing a clustering of the of the

00:19:44,960 --> 00:19:50,320
points uh in order to identify different

00:19:47,039 --> 00:19:53,760
uh objects and and draw

00:19:50,320 --> 00:19:54,400
bounding boxes around them so as i said

00:19:53,760 --> 00:19:58,080
everything

00:19:54,400 --> 00:20:00,160
is stacked for version 1.0.0 these are

00:19:58,080 --> 00:20:02,880
the three docker images that we have

00:20:00,160 --> 00:20:04,720
for for the for the different

00:20:02,880 --> 00:20:08,159
deployments

00:20:04,720 --> 00:20:10,240
and what we did uh first was just uh

00:20:08,159 --> 00:20:11,520
as opposed to manually kicking off

00:20:10,240 --> 00:20:13,440
everything we can just

00:20:11,520 --> 00:20:15,360
run them as a little bit of a service

00:20:13,440 --> 00:20:17,520
within the kubernetes

00:20:15,360 --> 00:20:18,640
and kick off the all the deployments and

00:20:17,520 --> 00:20:22,799
once

00:20:18,640 --> 00:20:24,640
all of them are running we can as well

00:20:22,799 --> 00:20:26,159
check that everything using laptop for

00:20:24,640 --> 00:20:27,919
the visualization check that everything

00:20:26,159 --> 00:20:30,960
is running fine

00:20:27,919 --> 00:20:33,280
and in here what i did i use the

00:20:30,960 --> 00:20:34,559
host network parameter within kubernetes

00:20:33,280 --> 00:20:36,400
to be able to

00:20:34,559 --> 00:20:37,600
publish everything on my local network

00:20:36,400 --> 00:20:41,360
here at home

00:20:37,600 --> 00:20:43,919
and just having a rost2 uh

00:20:41,360 --> 00:20:45,039
terminal running rvs on my laptop i was

00:20:43,919 --> 00:20:47,440
able to

00:20:45,039 --> 00:20:49,120
get all the topics that were running

00:20:47,440 --> 00:20:50,400
through the network so that's uh from

00:20:49,120 --> 00:20:52,880
the cleveland clustering

00:20:50,400 --> 00:20:54,799
all the ground points non-ground points

00:20:52,880 --> 00:20:59,840
etc

00:20:54,799 --> 00:20:59,840
after doing this we had uh

00:20:59,919 --> 00:21:04,880
i think a little bit of a confusion of

00:21:02,320 --> 00:21:07,039
what's the benefit between doing

00:21:04,880 --> 00:21:09,440
uh running this using kubernetes as

00:21:07,039 --> 00:21:12,480
opposed to playing docker for example

00:21:09,440 --> 00:21:14,320
and apart from not needing to have four

00:21:12,480 --> 00:21:16,880
different terminals to set

00:21:14,320 --> 00:21:19,360
everything manually which we do here

00:21:16,880 --> 00:21:23,120
from the from the master node

00:21:19,360 --> 00:21:26,320
we come into scalability issues and and

00:21:23,120 --> 00:21:29,360
and how we can do that and achieve that

00:21:26,320 --> 00:21:32,960
so as a bit of a showcase we took

00:21:29,360 --> 00:21:35,200
a combo of the pcu plus the rb3 so the

00:21:32,960 --> 00:21:37,840
dragonboard a45c

00:21:35,200 --> 00:21:38,720
where we want to assume that we are in a

00:21:37,840 --> 00:21:42,240
vehicle now

00:21:38,720 --> 00:21:42,640
and we have the lidars plug onto the rbc

00:21:42,240 --> 00:21:44,240
because

00:21:42,640 --> 00:21:46,480
we want to do some pre-processing for

00:21:44,240 --> 00:21:48,960
example and the main

00:21:46,480 --> 00:21:51,840
board is the pcu which is a bit more

00:21:48,960 --> 00:21:53,760
hardcore and we can actually run the

00:21:51,840 --> 00:21:56,080
higher higher end loads on the on the

00:21:53,760 --> 00:21:58,559
pcu so what we did here

00:21:56,080 --> 00:22:00,320
is actually show how we can run just the

00:21:58,559 --> 00:22:03,600
doing exactly the same the udp

00:22:00,320 --> 00:22:05,120
replay uh deployment and the cnc

00:22:03,600 --> 00:22:07,360
deployment on the rb3

00:22:05,120 --> 00:22:09,360
and all the other ones on the perception

00:22:07,360 --> 00:22:11,280
3d deployment on on the pcu are making

00:22:09,360 --> 00:22:13,760
sure that everything runs fine

00:22:11,280 --> 00:22:15,679
and there is no need to do any for the

00:22:13,760 --> 00:22:16,880
manual integration to manage the whole

00:22:15,679 --> 00:22:19,919
cluster

00:22:16,880 --> 00:22:24,159
so after creating the cluster which

00:22:19,919 --> 00:22:25,679
we get the the rbs3 and the pcu joint

00:22:24,159 --> 00:22:26,880
into the into the whole communities

00:22:25,679 --> 00:22:30,240
cluster

00:22:26,880 --> 00:22:32,559
we modify the deployment files

00:22:30,240 --> 00:22:35,039
uh taking the name of each one you see

00:22:32,559 --> 00:22:37,760
the node node name parameter

00:22:35,039 --> 00:22:40,080
so in here for the udp replay we use the

00:22:37,760 --> 00:22:41,280
linarelip which is the name of the the

00:22:40,080 --> 00:22:44,480
rb3

00:22:41,280 --> 00:22:46,240
the same for the sensing for each of the

00:22:44,480 --> 00:22:47,919
because here we have basically two

00:22:46,240 --> 00:22:50,720
deployments for each of the

00:22:47,919 --> 00:22:53,919
sensing for the lighter drivers and we

00:22:50,720 --> 00:22:55,200
use the pcu for the perception demo

00:22:53,919 --> 00:22:58,720
deployment

00:22:55,200 --> 00:22:59,280
after this we can basically as we did

00:22:58,720 --> 00:23:02,640
before

00:22:59,280 --> 00:23:03,440
kick off the three deployments apply

00:23:02,640 --> 00:23:05,919
them using the

00:23:03,440 --> 00:23:06,720
kubernetes infrastructure and making

00:23:05,919 --> 00:23:08,080
sure that

00:23:06,720 --> 00:23:11,200
everything is running when it needs to

00:23:08,080 --> 00:23:13,360
run which can easily see here so

00:23:11,200 --> 00:23:16,720
basically this one the perception 3d

00:23:13,360 --> 00:23:18,720
in the pcu and the other ones on the rv3

00:23:16,720 --> 00:23:20,000
and to check that everything was running

00:23:18,720 --> 00:23:21,840
properly we did the same

00:23:20,000 --> 00:23:23,039
so basically took the laptop since

00:23:21,840 --> 00:23:24,799
everything is being published on the

00:23:23,039 --> 00:23:28,159
local network

00:23:24,799 --> 00:23:30,559
just checking that everything runs fine

00:23:28,159 --> 00:23:32,400
here on the just getting all the

00:23:30,559 --> 00:23:34,240
different topics that we had before

00:23:32,400 --> 00:23:35,600
in exactly the same way with no issues

00:23:34,240 --> 00:23:37,600
whatsoever

00:23:35,600 --> 00:23:39,280
so here we try to show as well how we

00:23:37,600 --> 00:23:40,640
can introduce redundancies so you might

00:23:39,280 --> 00:23:41,360
have multiple boards on the on the

00:23:40,640 --> 00:23:43,919
vehicle

00:23:41,360 --> 00:23:44,880
or you might just want to make sure that

00:23:43,919 --> 00:23:47,600
your

00:23:44,880 --> 00:23:49,679
software modules are being handled

00:23:47,600 --> 00:23:52,159
appropriately so if

00:23:49,679 --> 00:23:54,240
one of them dies kubernetes will take

00:23:52,159 --> 00:23:55,520
care of of respawning it again and that

00:23:54,240 --> 00:23:58,640
sort of stuff in

00:23:55,520 --> 00:24:00,240
so well able to deploy updates and

00:23:58,640 --> 00:24:02,400
and that sort of things rolling updates

00:24:00,240 --> 00:24:03,760
for for the different modules is

00:24:02,400 --> 00:24:04,320
something that we haven't explored yet

00:24:03,760 --> 00:24:07,679
what we are

00:24:04,320 --> 00:24:10,080
looking into in the near future and

00:24:07,679 --> 00:24:11,760
that basically takes me to the end of

00:24:10,080 --> 00:24:13,840
the presentation

00:24:11,760 --> 00:24:15,919
thank you thank you all for your time i

00:24:13,840 --> 00:24:17,440
know if there are any questions or

00:24:15,919 --> 00:24:20,480
anything to cover please

00:24:17,440 --> 00:24:23,440
uh please ask or if not just

00:24:20,480 --> 00:24:24,080
bring us a message or an email and we'll

00:24:23,440 --> 00:24:27,279
happy to

00:24:24,080 --> 00:24:27,279
to reply to everything

00:24:28,640 --> 00:24:32,000
thanks savannah we have a minute left if

00:24:30,640 --> 00:24:32,960
someone wants to put something in the

00:24:32,000 --> 00:24:47,840
chat

00:24:32,960 --> 00:24:47,840
that was a great talk

00:24:49,120 --> 00:24:54,880
okay seems it was all perfectly clear

00:24:52,960 --> 00:24:56,000
so thanks to everyone uh we'll close

00:24:54,880 --> 00:24:57,440
this session now

00:24:56,000 --> 00:24:59,760
and the next one will start in five

00:24:57,440 --> 00:25:15,840
minutes yeah yang was happy

00:24:59,760 --> 00:25:15,840
so all good

00:25:19,679 --> 00:25:21,760

YouTube URL: https://www.youtube.com/watch?v=VnqsxyKd5Dk


