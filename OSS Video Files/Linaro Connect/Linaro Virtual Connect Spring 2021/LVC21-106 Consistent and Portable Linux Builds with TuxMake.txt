Title: LVC21-106 Consistent and Portable Linux Builds with TuxMake
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	TuxMake is a tool that automates Linux builds across different architectures, configurations, targets, and toolchains. You specify your choices, and tuxmake drives the build for you, doing the same steps in the same way every time.

TuxMake provides portable build environments as docker/podman container images, so that your team can use the same exact toolchain(s) across different workstation platforms. Reporting and reproducing build failures is trivial by sharing tuxmake command lines with others.

In this presentation, we will take a look on how to use tuxmake. We will cover the trivial and the not so trivial use cases, starting with a simple build, then looking at cross builds, incremental builds, bisecting, etc.
Captions: 
	00:00:05,600 --> 00:00:08,880
hello i'm antoine tessier and i'm going

00:00:07,520 --> 00:00:10,800
to talk about text make

00:00:08,880 --> 00:00:11,920
and how to achieve consistent and

00:00:10,800 --> 00:00:16,080
portable

00:00:11,920 --> 00:00:17,760
linux builds

00:00:16,080 --> 00:00:19,199
text makes a command line and python

00:00:17,760 --> 00:00:21,680
library for building linux

00:00:19,199 --> 00:00:23,680
it supports different architectures to

00:00:21,680 --> 00:00:25,199
change scanner configurations analytic

00:00:23,680 --> 00:00:27,119
targets

00:00:25,199 --> 00:00:29,519
it's a free software project using the

00:00:27,119 --> 00:00:31,599
mit expat lite license

00:00:29,519 --> 00:00:33,680
and it's created by linaro as part of

00:00:31,599 --> 00:00:35,280
touchsuite which is a suite of tools and

00:00:33,680 --> 00:00:38,480
services to help with

00:00:35,280 --> 00:00:41,719
linux kernel development in this

00:00:38,480 --> 00:00:43,360
presentation i will be covering textmate

00:00:41,719 --> 00:00:45,680
0.17.0

00:00:43,360 --> 00:00:48,320
uh other or newer versions might be a

00:00:45,680 --> 00:00:48,320
little different

00:00:48,879 --> 00:00:53,280
in this presentation i am going to focus

00:00:50,960 --> 00:00:56,399
on the command line interface

00:00:53,280 --> 00:00:58,960
but flexmake also has a python api which

00:00:56,399 --> 00:01:00,719
is documented on text maker

00:00:58,960 --> 00:01:03,600
almost everything is identical between

00:01:00,719 --> 00:01:05,439
the cli and the python api

00:01:03,600 --> 00:01:07,280
when there are exceptions i'll i'll be

00:01:05,439 --> 00:01:09,680
saying that exclusively

00:01:07,280 --> 00:01:13,840
but in most cases all the concepts and

00:01:09,680 --> 00:01:13,840
even the argument names are the same

00:01:14,400 --> 00:01:20,400
text make has three facets that we

00:01:17,439 --> 00:01:21,360
need to keep in mind the first one is

00:01:20,400 --> 00:01:24,400
automation

00:01:21,360 --> 00:01:26,880
cannot build scenarios so that we

00:01:24,400 --> 00:01:28,320
can throw away or at least greatly

00:01:26,880 --> 00:01:32,159
simplify

00:01:28,320 --> 00:01:34,400
uh our custom screws to build the kernel

00:01:32,159 --> 00:01:36,000
it also provides curated cute container

00:01:34,400 --> 00:01:36,799
images containing two chains so that

00:01:36,000 --> 00:01:38,720
teams

00:01:36,799 --> 00:01:40,000
can use the exact same build environment

00:01:38,720 --> 00:01:42,159
when discussing reproducing

00:01:40,000 --> 00:01:44,000
issues so by using this it's containing

00:01:42,159 --> 00:01:47,200
images you can

00:01:44,000 --> 00:01:49,680
use any exact version of compiler and

00:01:47,200 --> 00:01:51,600
tools to build or kernel

00:01:49,680 --> 00:01:54,159
and your teammates can use the exact

00:01:51,600 --> 00:01:56,079
same version on their side

00:01:54,159 --> 00:01:57,360
and if you combine the two first points

00:01:56,079 --> 00:02:00,000
then we can say that in

00:01:57,360 --> 00:02:03,119
tux make enables consistent portable and

00:02:00,000 --> 00:02:03,119
reproducible views

00:02:03,680 --> 00:02:07,360
getting text make is very easy there are

00:02:05,759 --> 00:02:11,200
a few different ways you can do that

00:02:07,360 --> 00:02:12,480
you can use pip and install the python

00:02:11,200 --> 00:02:15,680
package from the python

00:02:12,480 --> 00:02:18,879
package index or you can install

00:02:15,680 --> 00:02:21,440
a debit package or an rpm package that

00:02:18,879 --> 00:02:23,440
they are provided on taxmake.org

00:02:21,440 --> 00:02:24,879
and you can also not install text make

00:02:23,440 --> 00:02:27,280
at all you can

00:02:24,879 --> 00:02:29,040
uh very easily run proximity from the

00:02:27,280 --> 00:02:31,200
source directory

00:02:29,040 --> 00:02:33,120
and it only depends on the python 3 core

00:02:31,200 --> 00:02:35,840
so you don't even need any

00:02:33,120 --> 00:02:37,040
extra dependencies beyond the python

00:02:35,840 --> 00:02:39,599
integrator

00:02:37,040 --> 00:02:41,040
so this specific insertion for each of

00:02:39,599 --> 00:02:43,040
these types of installations are

00:02:41,040 --> 00:02:44,720
provided on textmate.org

00:02:43,040 --> 00:02:46,720
and you can check it out for more

00:02:44,720 --> 00:02:48,560
information

00:02:46,720 --> 00:02:51,280
for using text mate there are a few

00:02:48,560 --> 00:02:54,400
terms you need to be familiar with

00:02:51,280 --> 00:02:56,319
so the first one is target which means

00:02:54,400 --> 00:02:57,599
that part of the canon 3d detects make

00:02:56,319 --> 00:02:59,519
knows how to build

00:02:57,599 --> 00:03:00,720
for instance it can be the kernel

00:02:59,519 --> 00:03:03,680
modules dtps

00:03:00,720 --> 00:03:05,360
it's this is more or less the same as

00:03:03,680 --> 00:03:06,000
the make targets you are using from the

00:03:05,360 --> 00:03:08,159
kernel

00:03:06,000 --> 00:03:09,840
but in some cases there are slight

00:03:08,159 --> 00:03:13,360
difference but

00:03:09,840 --> 00:03:17,280
mostly is just a

00:03:13,360 --> 00:03:17,280
common name for part of the curve

00:03:17,599 --> 00:03:21,760
to change the specific two chain version

00:03:19,519 --> 00:03:23,200
so in this example we are we are talking

00:03:21,760 --> 00:03:26,959
about gcc 10 or

00:03:23,200 --> 00:03:30,000
clank 12 and when you choose

00:03:26,959 --> 00:03:32,959
a two chain that's making if

00:03:30,000 --> 00:03:33,440
you are also using the container images

00:03:32,959 --> 00:03:36,480
then

00:03:33,440 --> 00:03:40,000
docs makes that's making sure that you

00:03:36,480 --> 00:03:43,360
get exactly that compiler version

00:03:40,000 --> 00:03:45,120
and run time is how touch make we run

00:03:43,360 --> 00:03:47,120
the view we have a few options so the

00:03:45,120 --> 00:03:50,080
default is

00:03:47,120 --> 00:03:50,480
uh the new runtime which means stocks

00:03:50,080 --> 00:03:52,560
make

00:03:50,480 --> 00:03:54,319
just do the build on your host system

00:03:52,560 --> 00:03:56,000
using whatever two chains are available

00:03:54,319 --> 00:04:00,319
there

00:03:56,000 --> 00:04:02,239
uh and then there and then we have the

00:04:00,319 --> 00:04:03,439
container runtimes which is docker and

00:04:02,239 --> 00:04:06,959
podman

00:04:03,439 --> 00:04:08,799
which will download uh

00:04:06,959 --> 00:04:10,720
the curated container you just provided

00:04:08,799 --> 00:04:11,680
by text make project itself so if you

00:04:10,720 --> 00:04:15,040
say

00:04:11,680 --> 00:04:18,000
uh to change gcc 10 and run time docker

00:04:15,040 --> 00:04:20,560
then text makes going to download the

00:04:18,000 --> 00:04:22,960
gcc 10 darker image and then run

00:04:20,560 --> 00:04:24,000
your music using that image so that you

00:04:22,960 --> 00:04:27,680
have

00:04:24,000 --> 00:04:28,000
the exact same uh gcc 10 that everyone

00:04:27,680 --> 00:04:31,360
else

00:04:28,000 --> 00:04:33,759
using dot snake gets when they use

00:04:31,360 --> 00:04:33,759
gcc

00:04:34,800 --> 00:04:39,680
basic usage is very simple you just run

00:04:37,520 --> 00:04:42,639
text make in a linux source 3

00:04:39,680 --> 00:04:45,040
and textmate will do a build using all

00:04:42,639 --> 00:04:47,759
its defaults

00:04:45,040 --> 00:04:48,960
uh it builds a default set of targets

00:04:47,759 --> 00:04:50,639
you can see

00:04:48,960 --> 00:04:52,000
in this slide here so it builds a

00:04:50,639 --> 00:04:54,880
configuration

00:04:52,000 --> 00:04:55,280
it builds a kernel it builds modules you

00:04:54,880 --> 00:04:58,400
build

00:04:55,280 --> 00:04:58,400
gtps if that's

00:04:59,199 --> 00:05:02,400
supporting the architecture you are

00:05:01,039 --> 00:05:05,199
using

00:05:02,400 --> 00:05:06,400
it builds a debug kernel which cdm linux

00:05:05,199 --> 00:05:08,960
with no compression

00:05:06,400 --> 00:05:11,280
but in debug symbols and it also builds

00:05:08,960 --> 00:05:15,600
a header style ball

00:05:11,280 --> 00:05:17,440
and by default you put the output in

00:05:15,600 --> 00:05:19,039
a dot cache directory in your home

00:05:17,440 --> 00:05:21,360
directory

00:05:19,039 --> 00:05:23,120
but you can also override the output

00:05:21,360 --> 00:05:26,240
directory so

00:05:23,120 --> 00:05:26,240
that's just the default

00:05:27,919 --> 00:05:31,840
if you look inside the output directory

00:05:29,919 --> 00:05:32,320
you you can see there are several files

00:05:31,840 --> 00:05:34,320
there

00:05:32,320 --> 00:05:36,400
which are mostly the artifacts we are

00:05:34,320 --> 00:05:38,639
interested in building the curve

00:05:36,400 --> 00:05:39,520
so you can see that you get the full

00:05:38,639 --> 00:05:43,120
build log

00:05:39,520 --> 00:05:45,199
and everything that you get as a build

00:05:43,120 --> 00:05:47,039
log on the on the terminal you also get

00:05:45,199 --> 00:05:48,720
save in that file

00:05:47,039 --> 00:05:50,320
you have the kernel in this case the

00:05:48,720 --> 00:05:54,240
image you have

00:05:50,320 --> 00:05:56,080
uh the final resulting configuration

00:05:54,240 --> 00:05:58,800
file which is config

00:05:56,080 --> 00:06:01,120
you also had get a header starboard with

00:05:58,800 --> 00:06:04,319
the headers from the kernel

00:06:01,120 --> 00:06:05,039
and you get a metadata file it is a json

00:06:04,319 --> 00:06:07,840
file

00:06:05,039 --> 00:06:09,280
that contained several metadata about

00:06:07,840 --> 00:06:11,440
the build itself

00:06:09,280 --> 00:06:13,600
about the build environment such as

00:06:11,440 --> 00:06:16,479
exact compiler versions the version of

00:06:13,600 --> 00:06:19,520
the tools that are installed

00:06:16,479 --> 00:06:20,000
you get static statistics about caching

00:06:19,520 --> 00:06:22,080
for instance

00:06:20,000 --> 00:06:23,360
if you are using c cache it could tell

00:06:22,080 --> 00:06:26,479
you exactly

00:06:23,360 --> 00:06:28,000
how many cache hits and cache misses you

00:06:26,479 --> 00:06:30,880
have you had

00:06:28,000 --> 00:06:32,960
you also get modules if your kernel was

00:06:30,880 --> 00:06:36,880
configured for modules

00:06:32,960 --> 00:06:40,240
you get a season.map file

00:06:36,880 --> 00:06:43,600
and also you get a vm news file

00:06:40,240 --> 00:06:45,680
which is compressed to save space so

00:06:43,600 --> 00:06:47,120
of those the ones that are always

00:06:45,680 --> 00:06:49,360
present are build.log

00:06:47,120 --> 00:06:51,039
and metadata.json so those are always

00:06:49,360 --> 00:06:52,960
present independent

00:06:51,039 --> 00:06:54,560
independent of what you are actually

00:06:52,960 --> 00:06:58,240
building and the others

00:06:54,560 --> 00:07:01,199
are artifacts from the targets so if

00:06:58,240 --> 00:07:02,560
if you can only build the kernel for

00:07:01,199 --> 00:07:03,759
instance and not build modules or

00:07:02,560 --> 00:07:08,160
headers and then you don't

00:07:03,759 --> 00:07:10,639
get modules or header stop turbo

00:07:08,160 --> 00:07:13,199
now going beyond the basics you can

00:07:10,639 --> 00:07:16,000
change how flex make does your view

00:07:13,199 --> 00:07:17,680
in several ways if you want to build a

00:07:16,000 --> 00:07:19,360
specific target for instance

00:07:17,680 --> 00:07:21,520
if you only want the kernel and not

00:07:19,360 --> 00:07:23,919
module or dtps or anything else

00:07:21,520 --> 00:07:25,919
you can do that's made kernel and then

00:07:23,919 --> 00:07:29,039
you just do that

00:07:25,919 --> 00:07:31,599
uh textmake also has support for a few

00:07:29,039 --> 00:07:33,520
tools from the kind of source so you can

00:07:31,599 --> 00:07:35,840
build for instance case of test which

00:07:33,520 --> 00:07:38,880
let's make a surf test

00:07:35,840 --> 00:07:40,400
and we also have support for perfect cpu

00:07:38,880 --> 00:07:42,639
power at the moment

00:07:40,400 --> 00:07:44,319
by default x make the silent fields so

00:07:42,639 --> 00:07:47,520
you only get warrants

00:07:44,319 --> 00:07:48,800
but if you want to have a full log uh

00:07:47,520 --> 00:07:51,840
you can

00:07:48,800 --> 00:07:54,720
pass v equals on

00:07:51,840 --> 00:07:55,680
to the command line and also use dash

00:07:54,720 --> 00:07:59,520
dash variables

00:07:55,680 --> 00:08:02,240
which will drop the

00:07:59,520 --> 00:08:04,319
silent flag from me so this way you can

00:08:02,240 --> 00:08:07,440
you get a full build log

00:08:04,319 --> 00:08:08,319
and vehicles on is just an example but

00:08:07,440 --> 00:08:12,160
if you can bet

00:08:08,319 --> 00:08:15,120
any uh make variables should they make

00:08:12,160 --> 00:08:16,960
a command run by text make just using

00:08:15,120 --> 00:08:18,080
the variable equals value in the command

00:08:16,960 --> 00:08:19,840
line

00:08:18,080 --> 00:08:22,000
by default that's make will do a depth

00:08:19,840 --> 00:08:22,960
config view but you can change that that

00:08:22,000 --> 00:08:25,599
using the

00:08:22,960 --> 00:08:26,639
key config in the dash k complete add

00:08:25,599 --> 00:08:30,240
options

00:08:26,639 --> 00:08:30,560
so config allows you to define which is

00:08:30,240 --> 00:08:32,959
the

00:08:30,560 --> 00:08:34,560
the main configuration you're building

00:08:32,959 --> 00:08:35,519
so you can do all mod config for

00:08:34,560 --> 00:08:38,560
instance

00:08:35,519 --> 00:08:39,440
and there's actually configure lets you

00:08:38,560 --> 00:08:41,839
add

00:08:39,440 --> 00:08:44,080
config fragments on top of the

00:08:41,839 --> 00:08:47,040
configuration so it can be

00:08:44,080 --> 00:08:48,640
both a config fragment uh directly in

00:08:47,040 --> 00:08:49,839
the command line or you can also point

00:08:48,640 --> 00:08:53,200
to a local

00:08:49,839 --> 00:08:54,959
configuration file with which which has

00:08:53,200 --> 00:08:57,120
several config fragments you want to

00:08:54,959 --> 00:08:59,519
enable uh

00:08:57,120 --> 00:09:00,959
4k config you can also point your local

00:08:59,519 --> 00:09:03,920
file so you can

00:09:00,959 --> 00:09:05,760
store a custom configuration file or use

00:09:03,920 --> 00:09:09,279
your distribution configuration file

00:09:05,760 --> 00:09:10,640
just pointing to it in the command line

00:09:09,279 --> 00:09:12,720
you can also build four different

00:09:10,640 --> 00:09:14,160
architectures using the dash dev target

00:09:12,720 --> 00:09:17,040
arc

00:09:14,160 --> 00:09:19,519
option in this case for instance you can

00:09:17,040 --> 00:09:20,800
do text make dash dash target arc equals

00:09:19,519 --> 00:09:22,480
arm64

00:09:20,800 --> 00:09:24,800
and then that's make your handle

00:09:22,480 --> 00:09:27,760
everything to get across compiling

00:09:24,800 --> 00:09:29,200
correctly on your side and in this case

00:09:27,760 --> 00:09:30,160
you have to have the cross compilers

00:09:29,200 --> 00:09:33,279
installed

00:09:30,160 --> 00:09:36,560
but if you use the container runtimes

00:09:33,279 --> 00:09:37,600
so if i department or docker then tux

00:09:36,560 --> 00:09:40,240
make you download

00:09:37,600 --> 00:09:41,760
a container image for you that already

00:09:40,240 --> 00:09:44,530
has the cross compiler

00:09:41,760 --> 00:09:46,080
and then you get everything

00:09:44,530 --> 00:09:48,839
[Music]

00:09:46,080 --> 00:09:50,800
with that right the correct cross

00:09:48,839 --> 00:09:52,640
compiler

00:09:50,800 --> 00:09:54,640
using text make you you find that

00:09:52,640 --> 00:09:55,600
several options are useful and if you

00:09:54,640 --> 00:09:57,760
want to use them

00:09:55,600 --> 00:10:00,080
in all your builds so text makes support

00:09:57,760 --> 00:10:04,320
configuration files using the

00:10:00,080 --> 00:10:08,079
add name convention

00:10:04,320 --> 00:10:10,240
so when you usually text make add name

00:10:08,079 --> 00:10:12,000
then that's going to load a

00:10:10,240 --> 00:10:15,600
configuration file

00:10:12,000 --> 00:10:19,040
in dot config text make slash name

00:10:15,600 --> 00:10:21,920
in your home directory so for instance

00:10:19,040 --> 00:10:22,720
you can have a add r64 configuration

00:10:21,920 --> 00:10:26,079
file

00:10:22,720 --> 00:10:28,240
that sets the the correct arguments to

00:10:26,079 --> 00:10:28,240
do

00:10:28,640 --> 00:10:32,000
an m64 build and then you don't have to

00:10:30,640 --> 00:10:34,240
repeat yourself

00:10:32,000 --> 00:10:36,000
every time so in this case the

00:10:34,240 --> 00:10:37,760
configuration file sets the target

00:10:36,000 --> 00:10:39,839
architecture to m64

00:10:37,760 --> 00:10:40,959
and also sets the runtime department so

00:10:39,839 --> 00:10:42,959
you don't have to care

00:10:40,959 --> 00:10:45,040
about having a cross compiler installed

00:10:42,959 --> 00:10:48,560
if you just get one

00:10:45,040 --> 00:10:50,320
from the top slate images

00:10:48,560 --> 00:10:51,680
and there's a special case which is the

00:10:50,320 --> 00:10:53,600
default

00:10:51,680 --> 00:10:56,160
configuration file that's used in

00:10:53,600 --> 00:10:58,640
basically on all views so if you have

00:10:56,160 --> 00:11:00,560
options that you want on every single

00:10:58,640 --> 00:11:02,320
view then you can

00:11:00,560 --> 00:11:05,839
store that in the default configuration

00:11:02,320 --> 00:11:08,240
file and that gets loaded on all views

00:11:05,839 --> 00:11:09,519
so for instance here i have from our

00:11:08,240 --> 00:11:11,920
builds i want

00:11:09,519 --> 00:11:12,800
to use c cache as a compiler wrapper to

00:11:11,920 --> 00:11:15,040
cache

00:11:12,800 --> 00:11:17,200
compilation results and i also want

00:11:15,040 --> 00:11:18,079
always to do a git clean on the source

00:11:17,200 --> 00:11:21,440
directory

00:11:18,079 --> 00:11:23,680
after the view using it option

00:11:21,440 --> 00:11:24,640
uh note that this feature is only for

00:11:23,680 --> 00:11:26,399
the cli

00:11:24,640 --> 00:11:27,680
so if you if you're using a python

00:11:26,399 --> 00:11:28,880
library you already have complete

00:11:27,680 --> 00:11:32,000
control

00:11:28,880 --> 00:11:35,440
on what you do so

00:11:32,000 --> 00:11:37,519
you don't need it so these configuration

00:11:35,440 --> 00:11:39,120
files are only read by the common blind

00:11:37,519 --> 00:11:40,640
interface

00:11:39,120 --> 00:11:42,320
another configuration that is only for

00:11:40,640 --> 00:11:44,480
cli is the hooks

00:11:42,320 --> 00:11:45,760
which allow integrating text making your

00:11:44,480 --> 00:11:47,839
workflow

00:11:45,760 --> 00:11:49,839
so if we have three types of books one

00:11:47,839 --> 00:11:51,839
is the pre-built book

00:11:49,839 --> 00:11:52,959
where you can specify command to run

00:11:51,839 --> 00:11:56,240
before the build

00:11:52,959 --> 00:11:58,320
in the source field or a post build book

00:11:56,240 --> 00:11:59,279
with where you can specify a command to

00:11:58,320 --> 00:12:02,160
run

00:11:59,279 --> 00:12:03,920
if the build succeeds then that command

00:12:02,160 --> 00:12:07,279
will run in the source tool

00:12:03,920 --> 00:12:09,040
and then you have a result where you

00:12:07,279 --> 00:12:12,399
specify command to run

00:12:09,040 --> 00:12:14,959
after the build succeeds in the artifact

00:12:12,399 --> 00:12:17,600
directory so for instance you can

00:12:14,959 --> 00:12:19,600
inspect that they provide the the

00:12:17,600 --> 00:12:21,920
produced kernel or

00:12:19,600 --> 00:12:25,120
the build log from there for instance

00:12:21,920 --> 00:12:27,440
you can check for warnings or you can

00:12:25,120 --> 00:12:29,519
check for specific items in the metadata

00:12:27,440 --> 00:12:31,680
file

00:12:29,519 --> 00:12:33,680
and again this is for the cli only

00:12:31,680 --> 00:12:34,639
because if you are using the python api

00:12:33,680 --> 00:12:36,880
then

00:12:34,639 --> 00:12:40,639
you already have full control of what

00:12:36,880 --> 00:12:40,639
you do before or after the view

00:12:40,880 --> 00:12:47,920
so one example of uh

00:12:44,560 --> 00:12:50,639
workflow integration is using text make

00:12:47,920 --> 00:12:51,519
by second group failure the index more

00:12:50,639 --> 00:12:54,720
or less preview

00:12:51,519 --> 00:12:57,360
you just start a bisection and you run

00:12:54,720 --> 00:12:58,240
text make with with whatever options you

00:12:57,360 --> 00:13:00,639
want as a

00:12:58,240 --> 00:13:02,800
b section command and let's make does

00:13:00,639 --> 00:13:04,880
the right thing of exiting of non-zero

00:13:02,800 --> 00:13:07,279
if the big fails

00:13:04,880 --> 00:13:09,839
and then when doing a bisection you want

00:13:07,279 --> 00:13:11,680
to pass a few options to speed up things

00:13:09,839 --> 00:13:12,959
so you want to use the cache most

00:13:11,680 --> 00:13:15,760
probably

00:13:12,959 --> 00:13:17,200
and you can also use a custom view here

00:13:15,760 --> 00:13:20,560
in that case

00:13:17,200 --> 00:13:23,680
uh text make you you reuse the

00:13:20,560 --> 00:13:26,399
directory so you can

00:13:23,680 --> 00:13:28,800
cache the compilation results using that

00:13:26,399 --> 00:13:31,360
as well

00:13:28,800 --> 00:13:34,240
now a second example when you want to

00:13:31,360 --> 00:13:37,360
bisect the runtime bug so

00:13:34,240 --> 00:13:38,000
you can use a result book and pass a

00:13:37,360 --> 00:13:39,440
script

00:13:38,000 --> 00:13:41,519
that's going to be called in the

00:13:39,440 --> 00:13:44,720
resource directory so for instance that

00:13:41,519 --> 00:13:47,680
that script can get the kernel you just

00:13:44,720 --> 00:13:50,800
build and boot it into a new front tests

00:13:47,680 --> 00:13:52,399
or the script can copy the camera and

00:13:50,800 --> 00:13:55,279
the modules to a vm

00:13:52,399 --> 00:13:56,959
do a reboot and run some tests or you

00:13:55,279 --> 00:13:58,880
can submit the build kernel to some

00:13:56,959 --> 00:14:00,000
online testing services for instance for

00:13:58,880 --> 00:14:03,199
example

00:14:00,000 --> 00:14:06,720
you can submit it to lava

00:14:03,199 --> 00:14:09,199
for for testing in the future i want to

00:14:06,720 --> 00:14:11,440
investigate a few other options to

00:14:09,199 --> 00:14:13,040
improve developer workflow using let's

00:14:11,440 --> 00:14:15,680
make

00:14:13,040 --> 00:14:18,720
the first line of investigation is using

00:14:15,680 --> 00:14:21,760
text make instead of make

00:14:18,720 --> 00:14:23,680
as a custom make command uk test so

00:14:21,760 --> 00:14:26,800
that's going to be

00:14:23,680 --> 00:14:29,600
enabling you building

00:14:26,800 --> 00:14:29,920
uh the camera with text make while using

00:14:29,600 --> 00:14:31,440
k

00:14:29,920 --> 00:14:33,360
test that's going to be interesting

00:14:31,440 --> 00:14:35,680
because you can

00:14:33,360 --> 00:14:37,440
simplify a lot the the actual beginning

00:14:35,680 --> 00:14:40,959
of the panel and then

00:14:37,440 --> 00:14:43,120
integrate that in a test info and also

00:14:40,959 --> 00:14:45,120
uh tux run is a tool that we are

00:14:43,120 --> 00:14:48,880
extraction contact suites

00:14:45,120 --> 00:14:51,519
tuxedo service it will boot kernels from

00:14:48,880 --> 00:14:52,720
mood for architectural frequemu and run

00:14:51,519 --> 00:14:55,760
tests against them

00:14:52,720 --> 00:14:58,399
so tax run is going to be

00:14:55,760 --> 00:14:59,199
to tax test as stocks make history talks

00:14:58,399 --> 00:15:03,440
view

00:14:59,199 --> 00:15:03,920
so just as tax build stocks making their

00:15:03,440 --> 00:15:05,920
service

00:15:03,920 --> 00:15:07,519
the impact test is going to be tax run

00:15:05,920 --> 00:15:09,120
as a service and then that's going to be

00:15:07,519 --> 00:15:11,680
a free software tool

00:15:09,120 --> 00:15:12,880
as well in the same way it starts me and

00:15:11,680 --> 00:15:15,600
also if you have

00:15:12,880 --> 00:15:17,760
other ideas of integration uh you can

00:15:15,600 --> 00:15:21,279
talk to me you can send your ideas

00:15:17,760 --> 00:15:22,959
as issues or dispatches actually get

00:15:21,279 --> 00:15:26,320
repository that they will be

00:15:22,959 --> 00:15:28,079
very welcome

00:15:26,320 --> 00:15:29,360
and that's all i had for today if you

00:15:28,079 --> 00:15:32,800
want to talk more about

00:15:29,360 --> 00:15:35,920
uh perks make after this talk you can

00:15:32,800 --> 00:15:37,360
stay for the q a session or you can also

00:15:35,920 --> 00:15:40,000
talk to us later

00:15:37,360 --> 00:15:41,040
in the gitlab repository by opening bug

00:15:40,000 --> 00:15:43,440
reports or

00:15:41,040 --> 00:15:45,440
merge requests with patches you can also

00:15:43,440 --> 00:15:49,440
join us at the tuxmade channel

00:15:45,440 --> 00:15:50,639
freenode and to learn more you can go to

00:15:49,440 --> 00:15:55,360
tuxmake.org

00:15:50,639 --> 00:15:55,360
where we have our website and all the

00:15:59,079 --> 00:16:02,079

YouTube URL: https://www.youtube.com/watch?v=s3w0sI7r13w


