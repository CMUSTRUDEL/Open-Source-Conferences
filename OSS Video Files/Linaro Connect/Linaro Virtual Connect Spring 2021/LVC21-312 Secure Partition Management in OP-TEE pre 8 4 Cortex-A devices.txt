Title: LVC21-312 Secure Partition Management in OP-TEE pre 8 4 Cortex-A devices
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Overview of the FF-A SMPC implementation running at S-EL1 targeting pre-8.4 Cortex-A devices.

ArmÂ® Firmware Framework for Armv8-A [1] describes a software architecture and interfaces that standardize isolation and communication between the various software components.

This session focuses on the changes introduced to the upstream OP-TEE kernel to enable booting and runtime management of S-EL0 Secure Partitions in line with the Firmware Framework.

https://developer.arm.com/docs/den0077/a
Captions: 
	00:00:00,240 --> 00:00:06,960
um hello my name is jana salz

00:00:03,919 --> 00:00:08,960
i'm a software engineer at uh at arm as

00:00:06,960 --> 00:00:11,759
part of the open source group

00:00:08,960 --> 00:00:13,440
and i'm presenting the secure partition

00:00:11,759 --> 00:00:15,599
management in opti

00:00:13,440 --> 00:00:16,480
and that's specifically for the pre-804

00:00:15,599 --> 00:00:19,920
cortex a

00:00:16,480 --> 00:00:23,279
devices um so maybe

00:00:19,920 --> 00:00:26,880
a quick start about what

00:00:23,279 --> 00:00:30,720
ffa's ffa stands for the

00:00:26,880 --> 00:00:33,520
firmware firmware framework for arm v8

00:00:30,720 --> 00:00:34,320
and it defines a set of concepts and

00:00:33,520 --> 00:00:37,680
apis for

00:00:34,320 --> 00:00:40,320
for handling secure partitions um

00:00:37,680 --> 00:00:41,600
it has two main components it has the

00:00:40,320 --> 00:00:44,800
secure

00:00:41,600 --> 00:00:48,320
partition manager dispatcher the spmv

00:00:44,800 --> 00:00:51,199
which runs into scl3

00:00:48,320 --> 00:00:53,360
as part of the trusted firmware a and it

00:00:51,199 --> 00:00:56,399
is responsible for

00:00:53,360 --> 00:00:56,960
routing ffa messages from the normal

00:00:56,399 --> 00:01:00,239
world

00:00:56,960 --> 00:01:01,840
between the normal world and the spmc

00:01:00,239 --> 00:01:03,920
then there is the svmc which stands for

00:01:01,840 --> 00:01:07,200
the secure partition manager core

00:01:03,920 --> 00:01:09,600
um this can run into secure els

00:01:07,200 --> 00:01:12,720
zero secure security one security l2 and

00:01:09,600 --> 00:01:16,080
secure el3 um

00:01:12,720 --> 00:01:17,200
this is responsible for managing secure

00:01:16,080 --> 00:01:20,560
partitions

00:01:17,200 --> 00:01:20,960
um so it is responsible for loading them

00:01:20,560 --> 00:01:22,720
it's

00:01:20,960 --> 00:01:24,400
responsible for sending messages to them

00:01:22,720 --> 00:01:28,000
back and forward

00:01:24,400 --> 00:01:31,280
and all that kind of stuff um

00:01:28,000 --> 00:01:34,400
so this is kind of uh an overview of

00:01:31,280 --> 00:01:37,840
how the ffa stack looks um

00:01:34,400 --> 00:01:39,040
for 804 devices um so on the left we

00:01:37,840 --> 00:01:40,720
have the normal world with kind of

00:01:39,040 --> 00:01:41,600
standard application space application

00:01:40,720 --> 00:01:45,119
el zero

00:01:41,600 --> 00:01:47,600
el1 standards uh kernel and el2 can be

00:01:45,119 --> 00:01:48,880
done in hypervisor on top of that

00:01:47,600 --> 00:01:51,119
and between the kernel and the

00:01:48,880 --> 00:01:53,600
hypervisor ffa is already

00:01:51,119 --> 00:01:55,200
being used to kind of pass the messages

00:01:53,600 --> 00:01:57,040
and then

00:01:55,200 --> 00:01:58,560
from there it goes to the spmd which

00:01:57,040 --> 00:02:01,200
runs into tfa

00:01:58,560 --> 00:02:02,719
um that already once in the secure world

00:02:01,200 --> 00:02:08,080
in security l3

00:02:02,719 --> 00:02:10,080
um and then normally if you run on

00:02:08,080 --> 00:02:11,520
normal devices which which have the

00:02:10,080 --> 00:02:12,400
security translation extension there is

00:02:11,520 --> 00:02:14,720
a secure

00:02:12,400 --> 00:02:16,239
uh uh secure hypervisor that can run

00:02:14,720 --> 00:02:18,560
insecure el2

00:02:16,239 --> 00:02:19,760
um this is not supported for pre-804

00:02:18,560 --> 00:02:21,520
devices we don't

00:02:19,760 --> 00:02:22,800
support the secure virtualization

00:02:21,520 --> 00:02:25,599
extensions

00:02:22,800 --> 00:02:27,280
so that's why the spmc needs to run into

00:02:25,599 --> 00:02:29,680
secure e01

00:02:27,280 --> 00:02:30,319
um the current implementation that we're

00:02:29,680 --> 00:02:33,360
working on

00:02:30,319 --> 00:02:35,360
has the spmc running into opti

00:02:33,360 --> 00:02:37,280
and then we have these secure partitions

00:02:35,360 --> 00:02:39,440
running in secure el 0.

00:02:37,280 --> 00:02:40,800
they can also sometimes run a secure el1

00:02:39,440 --> 00:02:41,840
but mainly they're supposed to run

00:02:40,800 --> 00:02:45,840
insecure hero

00:02:41,840 --> 00:02:48,080
0. um next slides please

00:02:45,840 --> 00:02:50,239
um so back to a little bit more review

00:02:48,080 --> 00:02:52,160
of what the sbmc is so like i said it's

00:02:50,239 --> 00:02:54,959
the secure partition manager core

00:02:52,160 --> 00:02:57,280
um it's main responsibilities for

00:02:54,959 --> 00:03:01,360
managing the secure partitions

00:02:57,280 --> 00:03:04,720
um we are using the opti as the standard

00:03:01,360 --> 00:03:06,159
spmc implementation for pre-804 cortex-a

00:03:04,720 --> 00:03:09,040
devices

00:03:06,159 --> 00:03:11,280
um most of the secure partitions that

00:03:09,040 --> 00:03:12,959
will be run in secure el 0

00:03:11,280 --> 00:03:14,480
um to ensure that we still have

00:03:12,959 --> 00:03:17,040
isolation between the different

00:03:14,480 --> 00:03:19,599
sps without the use of a secure

00:03:17,040 --> 00:03:20,959
hypervisor

00:03:19,599 --> 00:03:23,519
and the current implementation we're

00:03:20,959 --> 00:03:27,440
looking at is based on the ffa spec

00:03:23,519 --> 00:03:27,440
1.0 yeah

00:03:31,440 --> 00:03:35,120
so if we're looking at some of the core

00:03:33,959 --> 00:03:38,319
responsibilities

00:03:35,120 --> 00:03:39,680
um for the spmc um so one of the

00:03:38,319 --> 00:03:42,480
core responsibilities is basically

00:03:39,680 --> 00:03:44,400
loading and managing sps um

00:03:42,480 --> 00:03:46,319
so the sps needs to be loaded the

00:03:44,400 --> 00:03:48,080
context needs to be setups and

00:03:46,319 --> 00:03:50,159
and we need to do context switches

00:03:48,080 --> 00:03:52,799
between sps

00:03:50,159 --> 00:03:53,840
um then there's the manifest data

00:03:52,799 --> 00:03:56,000
handling um

00:03:53,840 --> 00:03:57,680
so for every the ffa spec defines and

00:03:56,000 --> 00:04:00,720
manifest files which

00:03:57,680 --> 00:04:02,080
defines some of the information from a

00:04:00,720 --> 00:04:05,280
secure partition so they can

00:04:02,080 --> 00:04:06,799
be the endpoint id um it can be solve

00:04:05,280 --> 00:04:07,439
the memory that needs to be mapped it

00:04:06,799 --> 00:04:10,159
can be

00:04:07,439 --> 00:04:11,200
uh interrupts it can be device using all

00:04:10,159 --> 00:04:13,040
of that stuff

00:04:11,200 --> 00:04:14,879
so this is all stuff that espnc is

00:04:13,040 --> 00:04:17,120
responsible for

00:04:14,879 --> 00:04:18,880
to handling that data so it needs to map

00:04:17,120 --> 00:04:21,680
the the

00:04:18,880 --> 00:04:23,520
memory it needs to set the interest

00:04:21,680 --> 00:04:25,840
correctly and that kind of stuff

00:04:23,520 --> 00:04:27,600
um that needs to manage the input id so

00:04:25,840 --> 00:04:28,400
every secure partition has an endpoint

00:04:27,600 --> 00:04:29,759
id so it

00:04:28,400 --> 00:04:32,800
it might have to make sure that all the

00:04:29,759 --> 00:04:36,240
endpoint ids are there it also has to be

00:04:32,800 --> 00:04:39,600
short it helps us to make aware that the

00:04:36,240 --> 00:04:41,440
um spmc can kind of response the proper

00:04:39,600 --> 00:04:44,320
endpoint for your ids by

00:04:41,440 --> 00:04:45,280
those specific ffa methods for

00:04:44,320 --> 00:04:48,400
requesting the

00:04:45,280 --> 00:04:50,320
uh all of the endpoints um then one of

00:04:48,400 --> 00:04:53,360
the main responsibilities is the inter

00:04:50,320 --> 00:04:56,560
partition communication

00:04:53,360 --> 00:04:58,320
so sps have to be able to communicate

00:04:56,560 --> 00:05:01,680
between each other and also between

00:04:58,320 --> 00:05:04,560
a secure partition and the normal world

00:05:01,680 --> 00:05:06,160
um so this is the send direct request

00:05:04,560 --> 00:05:09,440
and the send direct response so the

00:05:06,160 --> 00:05:10,960
spmc has to make sure that the ffa

00:05:09,440 --> 00:05:12,000
messages are forwarded to the correct

00:05:10,960 --> 00:05:14,960
skew partition

00:05:12,000 --> 00:05:16,800
and also kind of um when there is a

00:05:14,960 --> 00:05:19,520
chain of multiple sps that the response

00:05:16,800 --> 00:05:23,199
are also end up to the correct

00:05:19,520 --> 00:05:25,440
sp and and that we don't break the chain

00:05:23,199 --> 00:05:27,600
um it's also spmc is also responsible

00:05:25,440 --> 00:05:30,960
for the rxdx buffer handling

00:05:27,600 --> 00:05:33,039
um so when an

00:05:30,960 --> 00:05:34,639
an endpoint which can be a secure

00:05:33,039 --> 00:05:36,160
partition or the normal one needs to

00:05:34,639 --> 00:05:39,360
kind of communicate sp

00:05:36,160 --> 00:05:41,680
spmc where it needs

00:05:39,360 --> 00:05:43,919
more data than it can handle by the

00:05:41,680 --> 00:05:47,440
normal ffa arguments which are the

00:05:43,919 --> 00:05:50,479
x0 d2 x7

00:05:47,440 --> 00:05:53,280
then it can use an rtx tx buffer for

00:05:50,479 --> 00:05:56,160
kind of

00:05:53,280 --> 00:05:56,479
kind of moving more data um and for that

00:05:56,160 --> 00:05:59,039
to

00:05:56,479 --> 00:06:00,560
be able to work the there is a um some

00:05:59,039 --> 00:06:03,680
affect manage which kind of

00:06:00,560 --> 00:06:05,360
um map the buffer so it kind of

00:06:03,680 --> 00:06:06,880
passes above the ftx buffer and it

00:06:05,360 --> 00:06:08,400
manages kind of handling this stuff so

00:06:06,880 --> 00:06:10,720
that's also something that the spmc is

00:06:08,400 --> 00:06:13,440
responsible for

00:06:10,720 --> 00:06:14,000
um the secure partitions are also kind

00:06:13,440 --> 00:06:17,039
of

00:06:14,000 --> 00:06:18,960
also able to share

00:06:17,039 --> 00:06:20,639
memory between each other so there's a

00:06:18,960 --> 00:06:23,280
fair amount of ffa

00:06:20,639 --> 00:06:24,000
um messages which are for memory sharing

00:06:23,280 --> 00:06:25,600
so it's kind of

00:06:24,000 --> 00:06:27,360
it's like memory share and memory

00:06:25,600 --> 00:06:30,479
request and review news and

00:06:27,360 --> 00:06:32,639
stuff like that um which is there for

00:06:30,479 --> 00:06:33,199
speeds to share memory between each

00:06:32,639 --> 00:06:35,680
other

00:06:33,199 --> 00:06:36,240
or for the normal world to share memory

00:06:35,680 --> 00:06:39,039
regions

00:06:36,240 --> 00:06:40,479
with the secret partitions so the spmc

00:06:39,039 --> 00:06:42,240
has to be aware that kind of these

00:06:40,479 --> 00:06:43,360
regions are mapped properly that they're

00:06:42,240 --> 00:06:46,000
only mapped with the

00:06:43,360 --> 00:06:48,240
sps that are that have access to it and

00:06:46,000 --> 00:06:51,039
all that kind of stuff um

00:06:48,240 --> 00:06:52,479
and then another aspect of the spnc is

00:06:51,039 --> 00:06:53,680
that it has to do some kind of device

00:06:52,479 --> 00:06:57,120
management um

00:06:53,680 --> 00:06:59,280
as part of the manifest file we can map

00:06:57,120 --> 00:07:02,560
some interrupts to an sp

00:06:59,280 --> 00:07:04,400
and also some memory regions so the spmc

00:07:02,560 --> 00:07:07,360
needs to make sure that these

00:07:04,400 --> 00:07:08,960
spmcs are properly set up that one

00:07:07,360 --> 00:07:09,599
interrupt is triggered that it's being

00:07:08,960 --> 00:07:13,840
passed

00:07:09,599 --> 00:07:16,000
to the proper secure partitions

00:07:13,840 --> 00:07:16,880
and then when the screw partition is

00:07:16,000 --> 00:07:20,800
done that

00:07:16,880 --> 00:07:21,120
that the um that is the x is giving back

00:07:20,800 --> 00:07:23,919
to

00:07:21,120 --> 00:07:25,680
whoever was interrupted um for the

00:07:23,919 --> 00:07:28,639
device region you can also kind of

00:07:25,680 --> 00:07:30,720
request device region memory uh for that

00:07:28,639 --> 00:07:32,400
the spmc basically has to kind of map

00:07:30,720 --> 00:07:34,720
the regions in the similar way as for

00:07:32,400 --> 00:07:36,800
member region but then with specifically

00:07:34,720 --> 00:07:38,000
uh device specific options without like

00:07:36,800 --> 00:07:39,919
caching shouldn't be enabled and all

00:07:38,000 --> 00:07:43,520
that kind of stuff

00:07:39,919 --> 00:07:46,560
next slide please um

00:07:43,520 --> 00:07:48,240
so if we look at um the the secure

00:07:46,560 --> 00:07:49,039
partitions and the trusted application

00:07:48,240 --> 00:07:52,319
in opti

00:07:49,039 --> 00:07:54,400
um both of them are kind of secure

00:07:52,319 --> 00:07:56,160
uh executions environment that run

00:07:54,400 --> 00:07:57,919
mostly in secure l0

00:07:56,160 --> 00:07:59,919
um there is however a fair amount of

00:07:57,919 --> 00:08:00,639
difference um that is important to know

00:07:59,919 --> 00:08:03,680
kind of

00:08:00,639 --> 00:08:05,759
how the sps works uh and

00:08:03,680 --> 00:08:07,120
how some of the implementation is done

00:08:05,759 --> 00:08:10,000
um so if you look at

00:08:07,120 --> 00:08:12,879
um trusted applications so they always

00:08:10,000 --> 00:08:16,240
have a clean context for each invocation

00:08:12,879 --> 00:08:18,160
um so that means like every time you

00:08:16,240 --> 00:08:19,599
send a message to a trusted application

00:08:18,160 --> 00:08:20,800
it's always started from like a clean

00:08:19,599 --> 00:08:22,479
slate

00:08:20,800 --> 00:08:24,080
which means that if you have any kind of

00:08:22,479 --> 00:08:25,039
user data that needs to be stored

00:08:24,080 --> 00:08:26,720
between

00:08:25,039 --> 00:08:28,080
between requests it needs to store in

00:08:26,720 --> 00:08:31,360
kind of the the

00:08:28,080 --> 00:08:32,800
the ta session um secure partitions on

00:08:31,360 --> 00:08:33,919
the other hand they're always kept into

00:08:32,800 --> 00:08:36,080
memory so they're loaded at the

00:08:33,919 --> 00:08:38,959
beginning of boots and then they

00:08:36,080 --> 00:08:39,599
they're kept into memory um all the data

00:08:38,959 --> 00:08:41,440
you

00:08:39,599 --> 00:08:42,640
also take on the stack on the heap it's

00:08:41,440 --> 00:08:44,159
all kind of there

00:08:42,640 --> 00:08:45,839
um and it's all there between

00:08:44,159 --> 00:08:48,959
invocations

00:08:45,839 --> 00:08:50,959
um just applications can be dynamically

00:08:48,959 --> 00:08:54,320
loaded during runtime so you can load

00:08:50,959 --> 00:08:56,240
an interest application from the

00:08:54,320 --> 00:08:58,320
from linux it can be for example loaded

00:08:56,240 --> 00:08:59,519
into the secure world and then can be

00:08:58,320 --> 00:09:01,600
loaded like that

00:08:59,519 --> 00:09:03,600
for secure partitions on the under end

00:09:01,600 --> 00:09:04,399
all sps at the moment are loaded during

00:09:03,600 --> 00:09:08,240
the

00:09:04,399 --> 00:09:10,080
installation trusted applications have

00:09:08,240 --> 00:09:11,440
multiple endpoints and they all run to

00:09:10,080 --> 00:09:13,040
completion so it's basically

00:09:11,440 --> 00:09:14,560
like calling a function and then when

00:09:13,040 --> 00:09:18,080
it's done the function

00:09:14,560 --> 00:09:20,480
uh it returns back to where it was um

00:09:18,080 --> 00:09:22,720
where um secure partition have to have

00:09:20,480 --> 00:09:23,360
one entry point so that entry point is

00:09:22,720 --> 00:09:25,920
called at

00:09:23,360 --> 00:09:26,880
initialization and then from there we

00:09:25,920 --> 00:09:29,360
basically have

00:09:26,880 --> 00:09:31,120
a while loop where we kind of constantly

00:09:29,360 --> 00:09:34,480
run the same application

00:09:31,120 --> 00:09:36,320
and then um it might be interrupted from

00:09:34,480 --> 00:09:39,200
there but once we go back into

00:09:36,320 --> 00:09:40,640
the partition it kind of re-goes from

00:09:39,200 --> 00:09:41,760
where it was interrupted

00:09:40,640 --> 00:09:43,519
and the same is when he doesn't see

00:09:41,760 --> 00:09:44,959
skull so if it's a cisco then it might

00:09:43,519 --> 00:09:46,640
be interrupted but then afterwards it

00:09:44,959 --> 00:09:48,640
will continue at the same place

00:09:46,640 --> 00:09:50,640
where it has been interrupted and where

00:09:48,640 --> 00:09:52,000
did the syscall

00:09:50,640 --> 00:09:53,680
so trusted applications can have

00:09:52,000 --> 00:09:55,040
multiple sessions

00:09:53,680 --> 00:09:56,720
at the moment secure partition you can

00:09:55,040 --> 00:09:58,480
only have like one instance of a secure

00:09:56,720 --> 00:10:01,120
partition running

00:09:58,480 --> 00:10:02,839
and then so it means if you need to

00:10:01,120 --> 00:10:05,120
track

00:10:02,839 --> 00:10:06,560
multiple requests from the from

00:10:05,120 --> 00:10:08,079
different requests in the sql partition

00:10:06,560 --> 00:10:11,440
this has to be done by

00:10:08,079 --> 00:10:12,399
the implementation itself um so asset

00:10:11,440 --> 00:10:14,800
applications

00:10:12,399 --> 00:10:17,200
uh use opticis call to communicate with

00:10:14,800 --> 00:10:20,320
the outside walls

00:10:17,200 --> 00:10:20,959
while in secure partitions we prefer to

00:10:20,320 --> 00:10:23,279
use the

00:10:20,959 --> 00:10:24,720
ffa messages to communicate with the

00:10:23,279 --> 00:10:28,160
outside world

00:10:24,720 --> 00:10:30,160
um we are looking into

00:10:28,160 --> 00:10:32,640
kind of creating a mapping between the

00:10:30,160 --> 00:10:34,399
global term messages and ffa messages so

00:10:32,640 --> 00:10:35,200
that there will be a mapping between the

00:10:34,399 --> 00:10:38,240
two

00:10:35,200 --> 00:10:41,680
um so that hopefully people can just

00:10:38,240 --> 00:10:43,680
get by by only using the ffa messages um

00:10:41,680 --> 00:10:44,720
for trusted application there is the

00:10:43,680 --> 00:10:48,160
leapda

00:10:44,720 --> 00:10:49,279
which exports the syst calls to trusted

00:10:48,160 --> 00:10:51,839
applications

00:10:49,279 --> 00:10:53,680
and we introduced the lib sb which kind

00:10:51,839 --> 00:10:55,920
of does the same thing where we

00:10:53,680 --> 00:10:57,760
expose the ffa functionality to the

00:10:55,920 --> 00:11:01,440
secure partitions

00:10:57,760 --> 00:11:04,399
yeah excited please

00:11:01,440 --> 00:11:05,760
um so if we look in kind of the the

00:11:04,399 --> 00:11:07,680
context of the security

00:11:05,760 --> 00:11:09,360
uh partitions kind of the data that we

00:11:07,680 --> 00:11:12,720
we need to keep uh

00:11:09,360 --> 00:11:14,800
for a secure partition um the

00:11:12,720 --> 00:11:16,640
secure partitions and the trusted

00:11:14,800 --> 00:11:19,360
applications they have a lot of kind of

00:11:16,640 --> 00:11:21,120
data that is uh the same and also a lot

00:11:19,360 --> 00:11:23,440
of functionality is the same

00:11:21,120 --> 00:11:25,040
um that's why we introduced kind of a

00:11:23,440 --> 00:11:26,800
trusted service abstraction layer

00:11:25,040 --> 00:11:29,200
um in the traffic stairs abstraction

00:11:26,800 --> 00:11:31,279
layer basically combines the

00:11:29,200 --> 00:11:33,440
uh the trusted applications and the

00:11:31,279 --> 00:11:36,240
secure partition functionality

00:11:33,440 --> 00:11:37,440
um so this makes it for us possible to

00:11:36,240 --> 00:11:41,120
use

00:11:37,440 --> 00:11:44,560
the standard of the functionality

00:11:41,120 --> 00:11:45,200
to do uh to load tsps to use the memory

00:11:44,560 --> 00:11:49,680
management

00:11:45,200 --> 00:11:51,680
um use ldl and also for the svc handling

00:11:49,680 --> 00:11:53,200
to use kind of the same principles that

00:11:51,680 --> 00:11:57,200
are being done in the

00:11:53,200 --> 00:12:00,720
trusted applications at the moment um

00:11:57,200 --> 00:12:03,600
we do use internally sb sessions

00:12:00,720 --> 00:12:05,120
like the same as ta sessions the only

00:12:03,600 --> 00:12:06,880
difference is that we only have

00:12:05,120 --> 00:12:09,040
one sp sessions for each secure

00:12:06,880 --> 00:12:10,800
partitions

00:12:09,040 --> 00:12:12,079
we do this kind of to make it easier for

00:12:10,800 --> 00:12:14,720
us to use

00:12:12,079 --> 00:12:15,519
the internal opti-functionality kind of

00:12:14,720 --> 00:12:17,839
like again

00:12:15,519 --> 00:12:19,519
for the mappings and all that stuff um

00:12:17,839 --> 00:12:20,160
we use the sp sessions and the sp

00:12:19,519 --> 00:12:24,560
context

00:12:20,160 --> 00:12:26,560
for uh to store our sp specific data um

00:12:24,560 --> 00:12:27,600
like i said the normally the sessions

00:12:26,560 --> 00:12:29,680
are created

00:12:27,600 --> 00:12:31,760
at initialization and they're created

00:12:29,680 --> 00:12:33,360
one there's only one session always

00:12:31,760 --> 00:12:35,040
and that's kept into memory and then

00:12:33,360 --> 00:12:38,320
normally um

00:12:35,040 --> 00:12:41,200
yeah that's never deleted normally

00:12:38,320 --> 00:12:43,839
um another thing that we do is for in

00:12:41,200 --> 00:12:46,560
the in the species that we kind of store

00:12:43,839 --> 00:12:47,839
all of the registers and the context in

00:12:46,560 --> 00:12:49,360
the spirits of the

00:12:47,839 --> 00:12:51,600
secure petition context to make sure

00:12:49,360 --> 00:12:52,800
that we can kind of do contact switches

00:12:51,600 --> 00:12:54,959
and then we can

00:12:52,800 --> 00:12:56,160
stop nsp and then restore it later and

00:12:54,959 --> 00:12:58,160
then there is the opensp

00:12:56,160 --> 00:12:59,440
sessions linked list which tracks all

00:12:58,160 --> 00:13:01,000
the sps

00:12:59,440 --> 00:13:03,040
yeah excited please

00:13:01,000 --> 00:13:06,000
[Music]

00:13:03,040 --> 00:13:06,800
um so the initializations of the secure

00:13:06,000 --> 00:13:10,079
partition

00:13:06,800 --> 00:13:10,639
is fairly similar to the early ta

00:13:10,079 --> 00:13:13,440
process

00:13:10,639 --> 00:13:14,079
um so what we do is we load the sbs as

00:13:13,440 --> 00:13:16,160
the last

00:13:14,079 --> 00:13:17,440
last step in the in the initialization

00:13:16,160 --> 00:13:19,920
process

00:13:17,440 --> 00:13:21,680
um we at the moment we're also embedded

00:13:19,920 --> 00:13:22,720
in the optimistic and it's very similar

00:13:21,680 --> 00:13:25,920
to the rdta

00:13:22,720 --> 00:13:29,360
um how early the ease works

00:13:25,920 --> 00:13:30,639
um we store them in an sp store

00:13:29,360 --> 00:13:32,320
and you can add them to the build by

00:13:30,639 --> 00:13:35,120
using no in the op sim version there is

00:13:32,320 --> 00:13:36,959
the spot but in the in the in the

00:13:35,120 --> 00:13:38,800
proof concept version is called is still

00:13:36,959 --> 00:13:41,839
the early tas that you need

00:13:38,800 --> 00:13:44,480
um we also use the who use ldl

00:13:41,839 --> 00:13:45,920
to load tsps the same way as normal tas

00:13:44,480 --> 00:13:48,560
are done

00:13:45,920 --> 00:13:49,839
we are kind of developing some patches

00:13:48,560 --> 00:13:52,959
where hopefully we can use

00:13:49,839 --> 00:13:55,600
pl2 to load the secure partitions

00:13:52,959 --> 00:13:57,440
and then pl2 would pass a manifest file

00:13:55,600 --> 00:13:59,040
or device three to obt and then from

00:13:57,440 --> 00:14:01,199
there opting knows where the secure

00:13:59,040 --> 00:14:04,160
partitions are loaded

00:14:01,199 --> 00:14:04,160
yeah next slide please

00:14:04,399 --> 00:14:07,680
um if we look at some of the

00:14:05,839 --> 00:14:10,800
implementation um there is basically

00:14:07,680 --> 00:14:12,639
two main uh components

00:14:10,800 --> 00:14:14,839
in the in the optic kernel that handles

00:14:12,639 --> 00:14:16,320
the spmc first of all there is a threat

00:14:14,839 --> 00:14:18,720
spmc um this

00:14:16,320 --> 00:14:19,839
is for uh handling this handles all the

00:14:18,720 --> 00:14:21,519
messages that are coming from the

00:14:19,839 --> 00:14:24,480
non-secure world

00:14:21,519 --> 00:14:26,800
um it also handles all the messages that

00:14:24,480 --> 00:14:28,959
kind of where opti is designed as an as

00:14:26,800 --> 00:14:30,160
an endpoint so it can also be a secure

00:14:28,959 --> 00:14:33,600
endpoint

00:14:30,160 --> 00:14:34,959
um and uh once there is a direct once we

00:14:33,600 --> 00:14:37,760
receive a direct request

00:14:34,959 --> 00:14:38,079
um in the threats bmc that is meant for

00:14:37,760 --> 00:14:41,360
us

00:14:38,079 --> 00:14:43,360
for for a secure partition um we switch

00:14:41,360 --> 00:14:44,240
to the spmcs b handler and this is kind

00:14:43,360 --> 00:14:47,839
of the second

00:14:44,240 --> 00:14:49,920
big part um this is meant for handling

00:14:47,839 --> 00:14:53,199
all of the sffa messages from the

00:14:49,920 --> 00:14:56,959
from the sps it always runs on a

00:14:53,199 --> 00:14:58,639
in a trend context to make sure

00:14:56,959 --> 00:15:00,000
that we have a beacon of stack but then

00:14:58,639 --> 00:15:01,199
we can also um

00:15:00,000 --> 00:15:02,800
access some of the functionality that

00:15:01,199 --> 00:15:03,760
you can only access running on on a

00:15:02,800 --> 00:15:06,000
threat

00:15:03,760 --> 00:15:07,680
um and then from there it calls um sp

00:15:06,000 --> 00:15:10,320
enter which is used to kind of

00:15:07,680 --> 00:15:11,120
uh start esp and jump back into the sp

00:15:10,320 --> 00:15:14,480
context

00:15:11,120 --> 00:15:19,040
yeah next slide um

00:15:14,480 --> 00:15:20,959
yeah this is kind of a flow chart of

00:15:19,040 --> 00:15:22,959
how it goes basically when there's a

00:15:20,959 --> 00:15:24,320
direct direct request going from the

00:15:22,959 --> 00:15:27,519
non-secure world

00:15:24,320 --> 00:15:28,320
it's been sent to the spmd from there

00:15:27,519 --> 00:15:32,800
it's sent

00:15:28,320 --> 00:15:35,680
to uh via an earth from sql 3 to the

00:15:32,800 --> 00:15:37,360
security one and in opti we get to the

00:15:35,680 --> 00:15:41,360
spmc

00:15:37,360 --> 00:15:42,560
from there we forwarded to the spmc sp

00:15:41,360 --> 00:15:44,880
handler

00:15:42,560 --> 00:15:46,079
um once we get in there we basically

00:15:44,880 --> 00:15:50,000
have a loop there

00:15:46,079 --> 00:15:51,759
where we check the ffa messages um

00:15:50,000 --> 00:15:53,519
and then for example if we have a direct

00:15:51,759 --> 00:15:54,079
request what will what will happen then

00:15:53,519 --> 00:15:57,519
it's

00:15:54,079 --> 00:16:00,639
we will copy the ffa messages

00:15:57,519 --> 00:16:02,160
into the secure partition context so the

00:16:00,639 --> 00:16:03,440
the context of the specific secure

00:16:02,160 --> 00:16:07,440
partitions

00:16:03,440 --> 00:16:10,720
um so the ffa ffa a2

00:16:07,440 --> 00:16:15,040
seven sorry a0 to a7 sorry um

00:16:10,720 --> 00:16:17,759
is copied into the uh the x0 to x7

00:16:15,040 --> 00:16:19,680
um registers of the square partitions

00:16:17,759 --> 00:16:21,440
and then we basically jump into the

00:16:19,680 --> 00:16:23,360
secure partition where it left off and

00:16:21,440 --> 00:16:25,199
that's basically how we copy the ffa

00:16:23,360 --> 00:16:26,639
messages for coming from the normal

00:16:25,199 --> 00:16:29,440
world or coming from another

00:16:26,639 --> 00:16:30,800
secure partitions in the to the uh

00:16:29,440 --> 00:16:32,800
secure partition

00:16:30,800 --> 00:16:34,079
um and then once the secure partition is

00:16:32,800 --> 00:16:36,079
done

00:16:34,079 --> 00:16:38,240
it will send another ffa message which

00:16:36,079 --> 00:16:41,279
is always done by svc

00:16:38,240 --> 00:16:43,199
um the svc handler will basically copy

00:16:41,279 --> 00:16:47,360
store the context

00:16:43,199 --> 00:16:49,279
we jump back into sl1 where we left off

00:16:47,360 --> 00:16:51,199
and then before going back into while

00:16:49,279 --> 00:16:52,079
loop while we while we check the new ffa

00:16:51,199 --> 00:16:55,360
message

00:16:52,079 --> 00:16:56,959
the um x 0 to x

00:16:55,360 --> 00:16:58,560
7 parameters are copied back into the

00:16:56,959 --> 00:17:00,800
ffa message and that's kind of how we

00:16:58,560 --> 00:17:02,320
then receive the ffa message

00:17:00,800 --> 00:17:05,199
from a secure partition and then we

00:17:02,320 --> 00:17:06,959
handle it again and then once we have a

00:17:05,199 --> 00:17:08,799
message that is

00:17:06,959 --> 00:17:10,160
meant for the normal world we just pass

00:17:08,799 --> 00:17:13,120
it back to the spmd

00:17:10,160 --> 00:17:14,000
and from there uh back to the normal

00:17:13,120 --> 00:17:17,039
world

00:17:14,000 --> 00:17:19,360
yeah next slide please

00:17:17,039 --> 00:17:20,160
um so yeah for like the contact

00:17:19,360 --> 00:17:22,799
switching and the

00:17:20,160 --> 00:17:24,720
entering actually executing sps um we

00:17:22,799 --> 00:17:26,880
have a function called sp enter

00:17:24,720 --> 00:17:28,319
and that's basically used to kind of

00:17:26,880 --> 00:17:31,440
restore and continue the

00:17:28,319 --> 00:17:32,080
sp executions um so we copy the ffa

00:17:31,440 --> 00:17:34,880
arguments

00:17:32,080 --> 00:17:36,400
on the uh in the into the sp sp

00:17:34,880 --> 00:17:40,720
execution context so

00:17:36,400 --> 00:17:43,440
the a0 to a7 is copied into x0 to x7

00:17:40,720 --> 00:17:45,280
uh of the secure partition context and

00:17:43,440 --> 00:17:45,679
then we call the enter info command and

00:17:45,280 --> 00:17:47,520
that

00:17:45,679 --> 00:17:49,120
just basically works the same as kind of

00:17:47,520 --> 00:17:49,679
trusted applications works where we kind

00:17:49,120 --> 00:17:51,679
of just

00:17:49,679 --> 00:17:54,160
restore the the context and then jump

00:17:51,679 --> 00:17:56,240
into secure zero

00:17:54,160 --> 00:17:57,280
and then to leave a secure partition

00:17:56,240 --> 00:18:00,400
there is the sp

00:17:57,280 --> 00:18:03,600
sp handle sv which is the svc handler

00:18:00,400 --> 00:18:06,799
um there we only copy

00:18:03,600 --> 00:18:09,120
we only kind of store the sp context and

00:18:06,799 --> 00:18:11,919
afterwards we return back to sl0

00:18:09,120 --> 00:18:13,600
and then at the end of sp enter we copy

00:18:11,919 --> 00:18:16,799
the ffa arguments

00:18:13,600 --> 00:18:19,919
from us from the um spket

00:18:16,799 --> 00:18:22,240
sp context and then we jump back into

00:18:19,919 --> 00:18:24,799
the sbmc sp handler and that one kind of

00:18:22,240 --> 00:18:28,160
handles them the message that we

00:18:24,799 --> 00:18:32,000
got from the secure partition

00:18:28,160 --> 00:18:36,000
yeah next slide please um

00:18:32,000 --> 00:18:39,120
so we created the uh lib sp

00:18:36,000 --> 00:18:40,720
which is used for building secure

00:18:39,120 --> 00:18:42,160
partitions

00:18:40,720 --> 00:18:44,080
so it builds kind of the the basic

00:18:42,160 --> 00:18:45,840
framework to build secure partitions

00:18:44,080 --> 00:18:47,200
like it exports all of the function that

00:18:45,840 --> 00:18:48,320
makes it a little bit easier that you

00:18:47,200 --> 00:18:51,280
don't have to write your own

00:18:48,320 --> 00:18:53,840
svc calls but it exports the svc calls

00:18:51,280 --> 00:18:56,320
um so that people can easily use it

00:18:53,840 --> 00:18:57,679
um so like i said it's export all the

00:18:56,320 --> 00:19:00,640
ffa messages

00:18:57,679 --> 00:19:02,240
and at the moment it's uh part of the uh

00:19:00,640 --> 00:19:02,799
trusted services project and the link is

00:19:02,240 --> 00:19:05,760
there

00:19:02,799 --> 00:19:07,520
uh to the trusted service project um

00:19:05,760 --> 00:19:09,360
yeah and then there's also some some a

00:19:07,520 --> 00:19:10,880
fair amount of uh secure partitions that

00:19:09,360 --> 00:19:12,080
you can find in a trusted service

00:19:10,880 --> 00:19:14,080
project

00:19:12,080 --> 00:19:15,360
which can be easily used as some kind of

00:19:14,080 --> 00:19:17,039
reference

00:19:15,360 --> 00:19:18,960
to start kind of creating your own

00:19:17,039 --> 00:19:21,679
secure partition

00:19:18,960 --> 00:19:21,679
next slide please

00:19:23,200 --> 00:19:26,400
so opt itself can also be used as a

00:19:25,280 --> 00:19:30,000
secure partition

00:19:26,400 --> 00:19:33,280
so that it opt will become the endpoint

00:19:30,000 --> 00:19:35,840
um this is used to uh

00:19:33,280 --> 00:19:36,960
wrap opti-specific calls into ffa

00:19:35,840 --> 00:19:40,640
messages

00:19:36,960 --> 00:19:43,760
um so when the spmds when trusted

00:19:40,640 --> 00:19:46,720
firmware runs as configured as sbnb

00:19:43,760 --> 00:19:48,160
it only kind of passes the ffa messages

00:19:46,720 --> 00:19:51,200
back and forth between the

00:19:48,160 --> 00:19:52,640
normal world and the secure world and to

00:19:51,200 --> 00:19:56,160
be able to still use

00:19:52,640 --> 00:19:58,240
uh optics specific uh messages and to be

00:19:56,160 --> 00:20:01,600
able to use the trust applications

00:19:58,240 --> 00:20:03,120
there is a way to uh encapsulate the the

00:20:01,600 --> 00:20:05,760
the messages are being encapsulated in

00:20:03,120 --> 00:20:06,080
ffa messages so the opt-in messages are

00:20:05,760 --> 00:20:09,600
being

00:20:06,080 --> 00:20:11,679
encapsulated in into ffa messages um

00:20:09,600 --> 00:20:13,120
and then when a direct request message

00:20:11,679 --> 00:20:16,240
is received by

00:20:13,120 --> 00:20:18,640
the spmc which is specific for opti

00:20:16,240 --> 00:20:20,960
um it will kind of unwrap that messages

00:20:18,640 --> 00:20:22,480
and pass it back and then handle it kind

00:20:20,960 --> 00:20:24,080
of as a normal

00:20:22,480 --> 00:20:25,520
opening messages and then you can send

00:20:24,080 --> 00:20:27,200
it back to trusted applications or

00:20:25,520 --> 00:20:29,679
whatever it needs to do

00:20:27,200 --> 00:20:32,360
um this can also be used to kind of run

00:20:29,679 --> 00:20:35,760
tas next to sps and they can run kind of

00:20:32,360 --> 00:20:38,799
simultaneously it also runs the whole

00:20:35,760 --> 00:20:40,880
uh x-test suite like that

00:20:38,799 --> 00:20:41,919
um well this can yeah it can run a

00:20:40,880 --> 00:20:44,240
standalone

00:20:41,919 --> 00:20:46,559
seo one spmc or we can also run it on

00:20:44,240 --> 00:20:48,559
the under half num as a secure hyper

00:20:46,559 --> 00:20:49,760
under a secure hypervisor this wasn't

00:20:48,559 --> 00:20:50,559
developed by myself but this was

00:20:49,760 --> 00:20:56,159
developed by

00:20:50,559 --> 00:20:56,159
jens mark and achi so next time please

00:20:56,320 --> 00:20:59,919
so um we have a proof of concept at the

00:20:59,200 --> 00:21:02,240
moment

00:20:59,919 --> 00:21:03,760
the link is there most of our code is

00:21:02,240 --> 00:21:04,400
being pushed to the psa development

00:21:03,760 --> 00:21:06,559
branch

00:21:04,400 --> 00:21:07,679
um there is a fair amount of stuff

00:21:06,559 --> 00:21:11,280
supported already

00:21:07,679 --> 00:21:14,320
um of the ffa spec um

00:21:11,280 --> 00:21:16,159
we can handle the manifold manifest file

00:21:14,320 --> 00:21:18,080
we can communicate between secure

00:21:16,159 --> 00:21:19,760
partitions and the normal world to via

00:21:18,080 --> 00:21:21,280
the direct request and the type response

00:21:19,760 --> 00:21:24,960
messages

00:21:21,280 --> 00:21:28,080
the rx tx buffer entrant is implemented

00:21:24,960 --> 00:21:30,159
the endpoint id is implemented we can do

00:21:28,080 --> 00:21:33,600
some basic memory region mapping

00:21:30,159 --> 00:21:35,600
um so that we can send we can share data

00:21:33,600 --> 00:21:37,360
between the the secure partitions and

00:21:35,600 --> 00:21:39,280
also between the normal world and the

00:21:37,360 --> 00:21:41,919
secure partition

00:21:39,280 --> 00:21:44,559
we have some device regions where we

00:21:41,919 --> 00:21:48,080
have some tests that we've done

00:21:44,559 --> 00:21:50,559
to map device reasons um we are

00:21:48,080 --> 00:21:51,919
we have some code to have secure el 1

00:21:50,559 --> 00:21:54,320
sps

00:21:51,919 --> 00:21:55,280
and we are especially looking into that

00:21:54,320 --> 00:21:58,720
for the

00:21:55,280 --> 00:22:00,960
rpm b which is currently into uh

00:21:58,720 --> 00:22:02,480
development to support airbnb with

00:22:00,960 --> 00:22:04,400
secure partitions

00:22:02,480 --> 00:22:05,679
and then we have some code for

00:22:04,400 --> 00:22:06,640
interrupts and that's currently in

00:22:05,679 --> 00:22:09,840
review

00:22:06,640 --> 00:22:11,440
next slide please um

00:22:09,840 --> 00:22:13,280
so we are planning to kind of upsum

00:22:11,440 --> 00:22:14,799
everything to github um it

00:22:13,280 --> 00:22:16,080
does take a little bit longer to get

00:22:14,799 --> 00:22:17,520
everything there so it's kind of a

00:22:16,080 --> 00:22:20,000
step-by-step approach

00:22:17,520 --> 00:22:21,200
um but on the long run ideally we want

00:22:20,000 --> 00:22:22,000
to kind of just get everything into

00:22:21,200 --> 00:22:25,200
github

00:22:22,000 --> 00:22:27,360
so it's the standard opti github

00:22:25,200 --> 00:22:29,120
repository and at the moment we have

00:22:27,360 --> 00:22:30,320
some some basic functionality already

00:22:29,120 --> 00:22:33,520
there upstream so we can

00:22:30,320 --> 00:22:34,960
load them we can run the sps um the

00:22:33,520 --> 00:22:36,559
we can handle the direct request and the

00:22:34,960 --> 00:22:38,080
direct response vessels so you can send

00:22:36,559 --> 00:22:40,320
messages from the normal world to secure

00:22:38,080 --> 00:22:43,679
partition in between secure partitions

00:22:40,320 --> 00:22:45,039
and then the rtxt rxtx buffer management

00:22:43,679 --> 00:22:46,559
is currently in review and that should

00:22:45,039 --> 00:22:49,679
be hopefully

00:22:46,559 --> 00:22:52,159
uh merged fairly soon and then

00:22:49,679 --> 00:22:53,520
i will start pushing more batches from

00:22:52,159 --> 00:22:57,280
once that's done

00:22:53,520 --> 00:22:58,960
yeah next slide please yeah so

00:22:57,280 --> 00:23:00,559
if you need any more information about

00:22:58,960 --> 00:23:02,080
this you can always kind of send the

00:23:00,559 --> 00:23:04,320
mail to the mailing list uh we

00:23:02,080 --> 00:23:06,000
like everybody on our team reads the

00:23:04,320 --> 00:23:08,480
mailing list and we can definitely

00:23:06,000 --> 00:23:09,840
respond to that um and then i also added

00:23:08,480 --> 00:23:11,039
some kind of presentation some other

00:23:09,840 --> 00:23:14,159
presentations that

00:23:11,039 --> 00:23:16,400
are uh where where ffa comes into play

00:23:14,159 --> 00:23:18,400
uh because there's it's a it's a big

00:23:16,400 --> 00:23:21,039
topic for arm now and

00:23:18,400 --> 00:23:21,679
we want to support it as much as we can

00:23:21,039 --> 00:23:24,400
um

00:23:21,679 --> 00:23:26,080
yeah i think this was my last slide um

00:23:24,400 --> 00:23:27,440
sorry for the technical

00:23:26,080 --> 00:23:29,679
difficulties but i'm happy that i

00:23:27,440 --> 00:23:31,360
managed to get through it um

00:23:29,679 --> 00:23:33,200
so i hope it was an interesting talk and

00:23:31,360 --> 00:23:34,880
i don't know if there's let me see if i

00:23:33,200 --> 00:23:36,799
can check

00:23:34,880 --> 00:23:38,559
there are a couple of questions it looks

00:23:36,799 --> 00:23:40,240
like one has already been answered but

00:23:38,559 --> 00:23:44,480
there's another one

00:23:40,240 --> 00:23:44,480
um that you should see in the q and a

00:23:44,960 --> 00:23:50,480
so does uh sp support preemption

00:23:48,320 --> 00:23:53,200
from normal fault interrupts like we

00:23:50,480 --> 00:23:56,880
have for tas

00:23:53,200 --> 00:23:58,080
um that's a good question um i

00:23:56,880 --> 00:24:00,159
would have to check i mean the

00:23:58,080 --> 00:24:01,039
interrupts we are still it's in an early

00:24:00,159 --> 00:24:05,440
stage yet

00:24:01,039 --> 00:24:08,480
um but normally it does so um

00:24:05,440 --> 00:24:11,039
there is um a patch that we also do

00:24:08,480 --> 00:24:13,039
that we are kind of um changing for the

00:24:11,039 --> 00:24:16,720
trusted firmware that we need first

00:24:13,039 --> 00:24:18,000
um where then we can for the spmd to be

00:24:16,720 --> 00:24:20,720
able to

00:24:18,000 --> 00:24:22,480
forward these interrupts to the secure

00:24:20,720 --> 00:24:26,880
to the spmc

00:24:22,480 --> 00:24:30,480
so it should in the long run but

00:24:26,880 --> 00:24:30,480
we might need a little bit more work on

00:24:30,840 --> 00:24:34,640
that

00:24:32,240 --> 00:24:36,720
and the other question was can tas and

00:24:34,640 --> 00:24:38,240
sps exist together but it looks like

00:24:36,720 --> 00:24:40,799
this has been answered

00:24:38,240 --> 00:24:41,919
yes they can can you add anything to

00:24:40,799 --> 00:24:44,799
that

00:24:41,919 --> 00:24:45,600
um no so the the thing is they can so um

00:24:44,799 --> 00:24:48,880
the only

00:24:45,600 --> 00:24:51,279
thing there is that for the um the um

00:24:48,880 --> 00:24:52,559
opti-specific goals will be wrapped into

00:24:51,279 --> 00:24:55,679
ffa messages

00:24:52,559 --> 00:24:58,080
um and then the optic kernel uh will

00:24:55,679 --> 00:24:59,440
kind of handle those as an end point and

00:24:58,080 --> 00:25:02,159
then we'll translate them

00:24:59,440 --> 00:25:04,640
and then pass them to da's if needed so

00:25:02,159 --> 00:25:04,640
yeah they can

00:25:07,279 --> 00:25:13,200
okay i and i think that's all the

00:25:09,200 --> 00:25:13,200
questions so uh anything else

00:25:13,279 --> 00:25:16,720
uh yeah no not for me so uh thanks

00:25:16,000 --> 00:25:19,200
everybody for

00:25:16,720 --> 00:25:20,720
from joining and uh yeah if you've got

00:25:19,200 --> 00:25:22,480
any questions just send the mail to the

00:25:20,720 --> 00:25:27,679
mailing list and then

00:25:22,480 --> 00:25:27,679

YouTube URL: https://www.youtube.com/watch?v=H1u_V0z1Zr4


