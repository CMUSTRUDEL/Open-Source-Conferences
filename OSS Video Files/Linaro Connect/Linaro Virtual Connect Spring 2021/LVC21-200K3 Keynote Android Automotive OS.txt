Title: LVC21-200K3 Keynote Android Automotive OS
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Guru will cover Android Automotive OS.
Captions: 
	00:00:02,800 --> 00:00:07,520
good morning

00:00:05,120 --> 00:00:08,960
i'm guru nagarajan and i lead the

00:00:07,520 --> 00:00:12,000
android automotive os

00:00:08,960 --> 00:00:13,360
platform engineering team at google very

00:00:12,000 --> 00:00:17,920
excited to join you all

00:00:13,360 --> 00:00:17,920
at lonaro connect this morning

00:00:18,160 --> 00:00:21,680
i want to cover a number of areas this

00:00:21,119 --> 00:00:23,680
morning

00:00:21,680 --> 00:00:26,160
starting from the android automotive os

00:00:23,680 --> 00:00:29,039
platform and our efforts

00:00:26,160 --> 00:00:31,279
in virtualization and areas of

00:00:29,039 --> 00:00:32,480
collaboration with the community on lts

00:00:31,279 --> 00:00:36,000
and security

00:00:32,480 --> 00:00:38,800
and performance and reliability

00:00:36,000 --> 00:00:41,680
before we get started a little bit of

00:00:38,800 --> 00:00:43,760
context on the android automotive os

00:00:41,680 --> 00:00:46,480
the operating system for automotive

00:00:43,760 --> 00:00:49,760
infotainment

00:00:46,480 --> 00:00:52,719
we've extended the android operating

00:00:49,760 --> 00:00:55,760
system or the core android as we call it

00:00:52,719 --> 00:00:56,079
for automotive use cases we've enhanced

00:00:55,760 --> 00:00:59,359
it

00:00:56,079 --> 00:01:03,039
we've extended across the applications

00:00:59,359 --> 00:01:05,760
to the hal tier and we've optimized it

00:01:03,039 --> 00:01:08,560
to allow our partners to build offer

00:01:05,760 --> 00:01:11,680
automotive infotainment systems

00:01:08,560 --> 00:01:12,560
and the process we've also expanded and

00:01:11,680 --> 00:01:14,960
provided

00:01:12,560 --> 00:01:16,880
a rich set of developer tools and sdk

00:01:14,960 --> 00:01:19,040
for application developers

00:01:16,880 --> 00:01:20,720
to enhance their mobile applications or

00:01:19,040 --> 00:01:24,159
introduce new applications

00:01:20,720 --> 00:01:25,600
for automotive use cases in addition to

00:01:24,159 --> 00:01:27,360
this

00:01:25,600 --> 00:01:29,040
extension and enhancement of the

00:01:27,360 --> 00:01:30,240
multi-layer security that we're all

00:01:29,040 --> 00:01:34,159
familiar with

00:01:30,240 --> 00:01:36,960
in android phones into cars

00:01:34,159 --> 00:01:37,439
and to give you a little bit of a flavor

00:01:36,960 --> 00:01:39,840
of

00:01:37,439 --> 00:01:41,520
the enhancements from the applications

00:01:39,840 --> 00:01:43,360
to the linux kernel

00:01:41,520 --> 00:01:45,600
i'll just touch up on a few of them and

00:01:43,360 --> 00:01:49,200
in the application tier we've introduced

00:01:45,600 --> 00:01:52,399
support for system ui specifically

00:01:49,200 --> 00:01:53,280
suited for automotive use cases and in

00:01:52,399 --> 00:01:56,640
framework

00:01:53,280 --> 00:02:00,000
support for multiple displays

00:01:56,640 --> 00:02:02,880
multiple audio zones multiple users

00:02:00,000 --> 00:02:04,560
cluster and so on and connectivity new

00:02:02,880 --> 00:02:07,520
profiles for bluetooth

00:02:04,560 --> 00:02:08,080
browseable media sources and in case of

00:02:07,520 --> 00:02:10,959
wi-fi

00:02:08,080 --> 00:02:11,760
where wi-fi is not native to android

00:02:10,959 --> 00:02:15,280
support for

00:02:11,760 --> 00:02:17,760
dynamic wi-fi interfaces and

00:02:15,280 --> 00:02:18,800
a rich set of interfaces and

00:02:17,760 --> 00:02:21,120
enhancements

00:02:18,800 --> 00:02:23,599
to manage the system health and the

00:02:21,120 --> 00:02:26,720
telemetry

00:02:23,599 --> 00:02:30,560
and likewise we introduce new health for

00:02:26,720 --> 00:02:33,360
rear view cameras x-interviews system

00:02:30,560 --> 00:02:34,080
for surround views and vehicle hal to

00:02:33,360 --> 00:02:37,840
abstract

00:02:34,080 --> 00:02:37,840
the underlying vehicle bus

00:02:40,480 --> 00:02:43,920
our most recent release was android 11

00:02:43,440 --> 00:02:47,120
or

00:02:43,920 --> 00:02:49,040
android rbc and

00:02:47,120 --> 00:02:50,560
we introduced a number of features

00:02:49,040 --> 00:02:53,680
across the entire

00:02:50,560 --> 00:02:54,879
platform from multi-zone audio and per

00:02:53,680 --> 00:02:57,760
user audio zone

00:02:54,879 --> 00:02:59,440
to allow users in large cars to have

00:02:57,760 --> 00:03:02,319
customized audio on a per

00:02:59,440 --> 00:03:03,760
seat on a personal basis to multiple

00:03:02,319 --> 00:03:05,840
displays

00:03:03,760 --> 00:03:06,800
we introduce support for surround view

00:03:05,840 --> 00:03:10,080
apis for

00:03:06,800 --> 00:03:10,640
our partners to build applications which

00:03:10,080 --> 00:03:14,000
leverage

00:03:10,640 --> 00:03:14,000
the cameras around the car

00:03:14,640 --> 00:03:19,120
we also introduce what is called a

00:03:16,480 --> 00:03:22,640
compute pipe a cdml framework

00:03:19,120 --> 00:03:24,080
to allow our partners to execute and

00:03:22,640 --> 00:03:27,200
deploy models

00:03:24,080 --> 00:03:29,440
either on android or across

00:03:27,200 --> 00:03:31,680
virtualized environments or any discrete

00:03:29,440 --> 00:03:34,720
hardware in the car

00:03:31,680 --> 00:03:37,200
we've enhanced security with te support

00:03:34,720 --> 00:03:38,560
and introduce new vertio based sub

00:03:37,200 --> 00:03:41,200
systems

00:03:38,560 --> 00:03:42,560
similarly enhancements to metrics

00:03:41,200 --> 00:03:45,440
vehicle integration

00:03:42,560 --> 00:03:46,159
to abstract the vehicle best bus to

00:03:45,440 --> 00:03:50,159
deploy

00:03:46,159 --> 00:03:50,159
android automotive os quickly

00:03:51,599 --> 00:03:55,439
now over the course of this development

00:03:53,920 --> 00:03:59,200
one of the key learnings

00:03:55,439 --> 00:04:01,280
has been that we have to ensure

00:03:59,200 --> 00:04:03,200
that the user experience and the

00:04:01,280 --> 00:04:06,560
security are sustained

00:04:03,200 --> 00:04:07,200
for long periods of time so software and

00:04:06,560 --> 00:04:09,760
cars

00:04:07,200 --> 00:04:11,200
have a lifetime of a decade or more

00:04:09,760 --> 00:04:13,280
phones typically have

00:04:11,200 --> 00:04:15,680
somewhere in the range of two to three

00:04:13,280 --> 00:04:18,880
or four years

00:04:15,680 --> 00:04:22,240
what this means is providing a rich

00:04:18,880 --> 00:04:24,080
and robust set of tools and ensuring

00:04:22,240 --> 00:04:28,479
performance and reliability

00:04:24,080 --> 00:04:30,080
are very important

00:04:28,479 --> 00:04:31,680
and this is an area where we think we

00:04:30,080 --> 00:04:34,400
can work with the community

00:04:31,680 --> 00:04:35,759
in enhancing the tools and also

00:04:34,400 --> 00:04:38,880
standardizing

00:04:35,759 --> 00:04:42,240
the interfaces which will allow us to

00:04:38,880 --> 00:04:44,160
improve both the user security

00:04:42,240 --> 00:04:48,400
and the user experience and i'll be

00:04:44,160 --> 00:04:48,400
talking about some of those areas

00:04:49,680 --> 00:04:52,639
virtualization

00:04:53,360 --> 00:04:56,479
before we get into what we're doing in

00:04:55,199 --> 00:04:58,400
this space a little bit of

00:04:56,479 --> 00:05:00,080
you know motivation on why we're doing

00:04:58,400 --> 00:05:04,000
it

00:05:00,080 --> 00:05:07,520
virtualization is a emerging

00:05:04,000 --> 00:05:10,080
trend and a strong trend in the

00:05:07,520 --> 00:05:12,400
automotive industry and it's motivated

00:05:10,080 --> 00:05:14,479
by a number of factors

00:05:12,400 --> 00:05:16,800
weight reduction and this is you know

00:05:14,479 --> 00:05:19,440
whether it's electrification of cars or

00:05:16,800 --> 00:05:20,080
consumption weight reduction is a key

00:05:19,440 --> 00:05:24,400
focus

00:05:20,080 --> 00:05:26,240
for our automotive partners likewise as

00:05:24,400 --> 00:05:28,000
the software and the hardware becomes

00:05:26,240 --> 00:05:31,520
complex in cars

00:05:28,000 --> 00:05:35,360
cost reduction is a key focus

00:05:31,520 --> 00:05:37,600
for our partners and this enables

00:05:35,360 --> 00:05:39,280
improved cross-domain integration where

00:05:37,600 --> 00:05:40,560
you're running applications in the head

00:05:39,280 --> 00:05:42,560
unit and you want to

00:05:40,560 --> 00:05:44,880
also provide information to the user to

00:05:42,560 --> 00:05:47,759
the cluster and provide interactions

00:05:44,880 --> 00:05:48,639
and so on improving the power

00:05:47,759 --> 00:05:50,240
consumption

00:05:48,639 --> 00:05:52,720
so you can provide a rich set of use

00:05:50,240 --> 00:05:56,800
cases and also

00:05:52,720 --> 00:05:59,600
simplifying the updates and the security

00:05:56,800 --> 00:06:01,440
in the most recent car that we launched

00:05:59,600 --> 00:06:03,120
in addition to the android automotive os

00:06:01,440 --> 00:06:05,120
and the infotainment head unit

00:06:03,120 --> 00:06:09,120
there was a real-time system and there

00:06:05,120 --> 00:06:12,560
were over 100 ecu's

00:06:09,120 --> 00:06:15,199
and as the consolidation enables

00:06:12,560 --> 00:06:16,240
we believe this will also improve the

00:06:15,199 --> 00:06:21,840
otas

00:06:16,240 --> 00:06:21,840
the updates and the security of the car

00:06:25,919 --> 00:06:29,759
a couple of additional reasons why we're

00:06:27,440 --> 00:06:31,680
doing virtualization

00:06:29,759 --> 00:06:34,000
as our partners are looking at more

00:06:31,680 --> 00:06:36,560
powerful safes socs to enable

00:06:34,000 --> 00:06:38,639
more use cases this gives us an operator

00:06:36,560 --> 00:06:43,120
to provide

00:06:38,639 --> 00:06:43,120
a richer set of capabilities to the user

00:06:43,280 --> 00:06:46,639
also there are some use cases that are

00:06:46,080 --> 00:06:48,639
critical

00:06:46,639 --> 00:06:49,840
where you need memory isolation and they

00:06:48,639 --> 00:06:54,240
need to be run

00:06:49,840 --> 00:06:56,000
in a dedicated virtual machine

00:06:54,240 --> 00:06:57,280
and there's some use cases where the

00:06:56,000 --> 00:07:00,840
hardware is

00:06:57,280 --> 00:07:04,240
shared across infotainment and

00:07:00,840 --> 00:07:04,240
other systems

00:07:05,280 --> 00:07:09,759
and given all of these we've been

00:07:08,000 --> 00:07:12,880
working with the partners

00:07:09,759 --> 00:07:16,080
on making sure that

00:07:12,880 --> 00:07:19,520
android automotive os works

00:07:16,080 --> 00:07:19,520
as a guest virtual machine

00:07:19,919 --> 00:07:25,599
and is performant and secure

00:07:23,440 --> 00:07:27,919
now what's our path and our approach to

00:07:25,599 --> 00:07:30,560
virtualization

00:07:27,919 --> 00:07:31,520
so as with android automotive os we've

00:07:30,560 --> 00:07:33,440
adopted

00:07:31,520 --> 00:07:35,599
an open platform based approach to

00:07:33,440 --> 00:07:38,800
virtualization

00:07:35,599 --> 00:07:39,520
in addition to that a standards-based

00:07:38,800 --> 00:07:42,000
one

00:07:39,520 --> 00:07:44,479
which makes it easy for the entire

00:07:42,000 --> 00:07:47,280
industry to collaborate and to that

00:07:44,479 --> 00:07:50,560
end we've adopted word io which is an

00:07:47,280 --> 00:07:53,199
open standard for virtualized devices

00:07:50,560 --> 00:07:55,280
and it started about a decade or so back

00:07:53,199 --> 00:07:58,879
and it's maintained

00:07:55,280 --> 00:08:03,039
and managed by an open committee

00:07:58,879 --> 00:08:03,039
and google is a member of this committee

00:08:04,560 --> 00:08:07,599
the portability across implementations

00:08:06,400 --> 00:08:11,520
and easier updates

00:08:07,599 --> 00:08:12,240
is also one of a big driving factor for

00:08:11,520 --> 00:08:14,720
us

00:08:12,240 --> 00:08:16,080
to ensure that we are adopting a

00:08:14,720 --> 00:08:18,800
standards-based

00:08:16,080 --> 00:08:18,800
implementation

00:08:19,199 --> 00:08:25,599
so we are leveraging whatever possible

00:08:22,319 --> 00:08:28,479
and extending it as needed and

00:08:25,599 --> 00:08:30,000
providing pass-throughs where android is

00:08:28,479 --> 00:08:33,840
the only consumer

00:08:30,000 --> 00:08:33,840
of a particular subsystem

00:08:35,120 --> 00:08:38,479
to give you a little bit of how this

00:08:37,599 --> 00:08:42,640
architecture

00:08:38,479 --> 00:08:45,200
looks like on a non-hyperbar system you

00:08:42,640 --> 00:08:46,800
typically have the user space

00:08:45,200 --> 00:08:50,399
and android sitting on the top of the

00:08:46,800 --> 00:08:50,399
kernel and you have the drivers

00:08:51,839 --> 00:08:56,640
one of the key changes is in a

00:08:54,560 --> 00:08:59,600
virtualized

00:08:56,640 --> 00:09:01,519
system is these drivers instead of

00:08:59,600 --> 00:09:04,959
sitting on the top of the ion

00:09:01,519 --> 00:09:07,440
are talking via the hypervisor

00:09:04,959 --> 00:09:08,800
and that underlying implementation is

00:09:07,440 --> 00:09:12,240
avert i o

00:09:08,800 --> 00:09:13,760
implementation of the driver so to

00:09:12,240 --> 00:09:16,720
native android

00:09:13,760 --> 00:09:17,519
it looks like you're running just like

00:09:16,720 --> 00:09:21,760
you would

00:09:17,519 --> 00:09:24,959
even without a non-virtualized system

00:09:21,760 --> 00:09:26,320
we believe this portability and also the

00:09:24,959 --> 00:09:28,959
standardization

00:09:26,320 --> 00:09:31,680
will be very helpful to the industry and

00:09:28,959 --> 00:09:31,680
the ecosystem

00:09:33,760 --> 00:09:38,880
now the word io has its origins in the

00:09:36,399 --> 00:09:41,519
cloud desktop world

00:09:38,880 --> 00:09:43,600
it's been used broadly across tens of

00:09:41,519 --> 00:09:47,200
millions of deployments

00:09:43,600 --> 00:09:50,399
the number of areas where we reuse

00:09:47,200 --> 00:09:52,399
reuse the standards assets an example is

00:09:50,399 --> 00:09:53,600
for disk we're using the verti or block

00:09:52,399 --> 00:09:55,519
standard assets

00:09:53,600 --> 00:09:57,200
in case of network we're using the verti

00:09:55,519 --> 00:10:00,399
network and so on

00:09:57,200 --> 00:10:02,560
with some areas where we need automotive

00:10:00,399 --> 00:10:05,680
specific enhancements

00:10:02,560 --> 00:10:07,040
we're introducing those and developing

00:10:05,680 --> 00:10:09,760
those

00:10:07,040 --> 00:10:11,440
an example is for word ios town which is

00:10:09,760 --> 00:10:14,560
a brand new standard

00:10:11,440 --> 00:10:17,760
for managing audio and cars

00:10:14,560 --> 00:10:20,560
for gpu providing performance extensions

00:10:17,760 --> 00:10:21,760
likewise for video and semi semis for

00:10:20,560 --> 00:10:24,560
sensors

00:10:21,760 --> 00:10:26,240
these are new and enhanced new

00:10:24,560 --> 00:10:27,200
implementations and enhancements for

00:10:26,240 --> 00:10:30,240
automotive

00:10:27,200 --> 00:10:32,640
to support the rich set of features that

00:10:30,240 --> 00:10:34,160
we want to realize

00:10:32,640 --> 00:10:35,680
and across a number of these

00:10:34,160 --> 00:10:40,320
specifications

00:10:35,680 --> 00:10:40,320
automotive use cases are a key driver

00:10:40,959 --> 00:10:44,399
now we'll talk about you know three

00:10:43,519 --> 00:10:46,800
scenarios

00:10:44,399 --> 00:10:48,000
where the way we have realized these

00:10:46,800 --> 00:10:51,040
capabilities

00:10:48,000 --> 00:10:54,320
vary on a spectrum okay

00:10:51,040 --> 00:10:58,560
in case of vehicle hal

00:10:54,320 --> 00:11:01,600
we basically provide what is called the

00:10:58,560 --> 00:11:03,040
communication to and from the vehicle

00:11:01,600 --> 00:11:06,320
so the vehicle has an android

00:11:03,040 --> 00:11:09,680
essentially is a client server model

00:11:06,320 --> 00:11:13,200
and it supports the abstraction

00:11:09,680 --> 00:11:16,399
of the underlying vehicle bus

00:11:13,200 --> 00:11:19,360
vehicle hal does two things primarily

00:11:16,399 --> 00:11:20,320
one it manages the property

00:11:19,360 --> 00:11:24,399
subscriptions

00:11:20,320 --> 00:11:26,640
and the overall state and then

00:11:24,399 --> 00:11:28,240
it manages communication to and from the

00:11:26,640 --> 00:11:31,600
vehicle as an example

00:11:28,240 --> 00:11:34,000
turn on the ac turn off the ac okay

00:11:31,600 --> 00:11:35,920
the the ladder is the one that needs to

00:11:34,000 --> 00:11:38,079
be virtualized so we are focused

00:11:35,920 --> 00:11:40,480
on introducing the standard only for the

00:11:38,079 --> 00:11:40,480
ladder

00:11:40,720 --> 00:11:44,000
gpu we all know what iogp has been there

00:11:43,200 --> 00:11:46,800
for a while

00:11:44,000 --> 00:11:48,480
it's sufficient for many use cases

00:11:46,800 --> 00:11:51,200
however

00:11:48,480 --> 00:11:52,079
for the performance paths where

00:11:51,200 --> 00:11:54,639
performance is

00:11:52,079 --> 00:11:55,200
absolutely crucial where we use a gpu

00:11:54,639 --> 00:11:58,240
for

00:11:55,200 --> 00:12:02,240
multiple scenarios whether it be for

00:11:58,240 --> 00:12:02,240
image processing or for

00:12:02,480 --> 00:12:10,320
vulcan-based implementation for rich and

00:12:05,519 --> 00:12:13,200
quick ui qi access performance is key

00:12:10,320 --> 00:12:15,760
and a number of our soc partners are

00:12:13,200 --> 00:12:18,480
providing optimized paths for guest vms

00:12:15,760 --> 00:12:21,200
and we want to leverage them

00:12:18,480 --> 00:12:22,880
and we plan to do though by introducing

00:12:21,200 --> 00:12:24,880
new vendor extensions

00:12:22,880 --> 00:12:26,399
and providing additional what are called

00:12:24,880 --> 00:12:29,040
the what io cues

00:12:26,399 --> 00:12:29,600
for vendor-specific commands and our

00:12:29,040 --> 00:12:31,440
belief

00:12:29,600 --> 00:12:32,800
is that this will bring the

00:12:31,440 --> 00:12:36,560
implementation

00:12:32,800 --> 00:12:39,600
in very close parity with native

00:12:36,560 --> 00:12:41,519
implementations and performance

00:12:39,600 --> 00:12:43,600
and the final one which is a work in

00:12:41,519 --> 00:12:47,600
progress is on the security space

00:12:43,600 --> 00:12:49,920
we plan to integrate the antra zoom

00:12:47,600 --> 00:12:52,720
and obviously this requires vendor and

00:12:49,920 --> 00:12:55,519
hypervisor support so we're planning

00:12:52,720 --> 00:12:56,560
an initial implementation in mid-2021

00:12:55,519 --> 00:12:59,519
and we will allow

00:12:56,560 --> 00:12:59,519
for your feedback

00:13:02,160 --> 00:13:07,680
the next major area i want to touch upon

00:13:04,480 --> 00:13:10,560
is lts and security

00:13:07,680 --> 00:13:11,120
a long-term stable kernel or the lts

00:13:10,560 --> 00:13:13,760
kernel

00:13:11,120 --> 00:13:14,560
is a version of the upstream linux

00:13:13,760 --> 00:13:16,320
kernel

00:13:14,560 --> 00:13:18,560
that is maintained for a long period of

00:13:16,320 --> 00:13:21,040
time or an extended period of time

00:13:18,560 --> 00:13:22,880
in case of android we support for six

00:13:21,040 --> 00:13:25,920
years

00:13:22,880 --> 00:13:28,320
we also work with our partners to ensure

00:13:25,920 --> 00:13:31,839
that the security and functional fixes

00:13:28,320 --> 00:13:31,839
are regularly checked in

00:13:32,000 --> 00:13:35,519
android like other major linux

00:13:33,440 --> 00:13:37,519
distributions like ubuntu debian or red

00:13:35,519 --> 00:13:40,560
hat

00:13:37,519 --> 00:13:41,199
we base our releases on a linux lts

00:13:40,560 --> 00:13:43,600
kernel

00:13:41,199 --> 00:13:44,480
to ensure that we work closely with the

00:13:43,600 --> 00:13:47,519
community to

00:13:44,480 --> 00:13:49,040
get updates and provide updates for

00:13:47,519 --> 00:13:51,360
the support of the lifetime of the

00:13:49,040 --> 00:13:51,360
product

00:13:53,040 --> 00:13:57,519
a little bit on where things are today

00:13:57,600 --> 00:14:01,760
the many security vulnerabilities that

00:13:59,440 --> 00:14:04,800
are fixed on upstream linux

00:14:01,760 --> 00:14:07,760
but were not

00:14:04,800 --> 00:14:08,480
bottom much later to android and this

00:14:07,760 --> 00:14:11,600
puts

00:14:08,480 --> 00:14:16,959
both the users and the brand

00:14:11,600 --> 00:14:18,800
at risk the android security team

00:14:16,959 --> 00:14:20,160
does an amazing job to identify the

00:14:18,800 --> 00:14:22,240
fixes

00:14:20,160 --> 00:14:23,600
to address the vulnerabilities and

00:14:22,240 --> 00:14:26,639
require them to be

00:14:23,600 --> 00:14:27,839
patched and what's called as an spl or

00:14:26,639 --> 00:14:30,560
security patch

00:14:27,839 --> 00:14:33,680
compliance they share in the monthly

00:14:30,560 --> 00:14:33,680
security bulletins

00:14:34,959 --> 00:14:41,760
in 2019 we did an analysis

00:14:38,000 --> 00:14:44,000
and found that 92 percent of the linux

00:14:41,760 --> 00:14:46,480
kernel security vulnerabilities

00:14:44,000 --> 00:14:47,440
that required for spl compliance were

00:14:46,480 --> 00:14:51,040
already fixed

00:14:47,440 --> 00:14:51,040
in the lts kernel at the time

00:14:55,360 --> 00:14:58,560
so to improve on this what we've started

00:14:58,079 --> 00:15:01,760
doing

00:14:58,560 --> 00:15:02,880
is starting with android 9 we we have

00:15:01,760 --> 00:15:04,880
introduced

00:15:02,880 --> 00:15:05,920
a requirement wherein new device

00:15:04,880 --> 00:15:08,320
launches

00:15:05,920 --> 00:15:09,120
are required to ship with the most

00:15:08,320 --> 00:15:12,560
recent

00:15:09,120 --> 00:15:14,720
lts release

00:15:12,560 --> 00:15:16,560
so our soc partners update the kernel to

00:15:14,720 --> 00:15:19,839
the required lts version

00:15:16,560 --> 00:15:23,040
to support the new device launches

00:15:19,839 --> 00:15:27,839
and on the google side we update

00:15:23,040 --> 00:15:27,839
and maintain the android common kernel

00:15:30,240 --> 00:15:34,000
nlts update requirements are published

00:15:33,120 --> 00:15:36,560
frequently

00:15:34,000 --> 00:15:38,880
in the partners security bulletin after

00:15:36,560 --> 00:15:42,000
we have confirmed with our soc partners

00:15:38,880 --> 00:15:44,560
that the lts version is merged in and

00:15:42,000 --> 00:15:44,560
tested

00:15:46,399 --> 00:15:51,519
shifting gears i want to talk about

00:15:48,240 --> 00:15:51,519
performance and reliability

00:15:52,079 --> 00:15:58,240
performance is key for

00:15:55,279 --> 00:16:00,560
any consumer device and i would say more

00:15:58,240 --> 00:16:02,560
so for automotive

00:16:00,560 --> 00:16:05,199
because performance is also tied to the

00:16:02,560 --> 00:16:08,320
safety of cars

00:16:05,199 --> 00:16:10,560
but this is a challenging area the user

00:16:08,320 --> 00:16:14,079
needs are evolving

00:16:10,560 --> 00:16:14,079
users are demanding

00:16:14,240 --> 00:16:19,680
a richer and a performant experience

00:16:17,600 --> 00:16:21,120
and at the same time there are new use

00:16:19,680 --> 00:16:23,839
cases that are pushing

00:16:21,120 --> 00:16:23,839
the boundaries

00:16:24,959 --> 00:16:28,160
a lot of the benchmarks that we have

00:16:26,480 --> 00:16:30,240
today are not re

00:16:28,160 --> 00:16:32,880
representative of real world

00:16:30,240 --> 00:16:35,360
interactions

00:16:32,880 --> 00:16:37,040
so one area where we're working on is a

00:16:35,360 --> 00:16:39,759
creation of a representative

00:16:37,040 --> 00:16:40,480
set of use cases that can be used to

00:16:39,759 --> 00:16:44,079
evaluate

00:16:40,480 --> 00:16:48,480
our priorities and that's a start

00:16:44,079 --> 00:16:50,800
and the reason i say that is in case of

00:16:48,480 --> 00:16:51,759
you know comparing to mobile users

00:16:50,800 --> 00:16:53,759
change phones

00:16:51,759 --> 00:16:55,680
every two to three years and with every

00:16:53,759 --> 00:16:58,320
change in their device

00:16:55,680 --> 00:16:59,120
there is a performance gain whereas a

00:16:58,320 --> 00:17:01,279
car

00:16:59,120 --> 00:17:02,880
for the lifetime of the car because the

00:17:01,279 --> 00:17:05,520
hardware doesn't change

00:17:02,880 --> 00:17:07,039
it is a challenge and one way to

00:17:05,520 --> 00:17:09,600
alleviate this challenge

00:17:07,039 --> 00:17:10,559
is to plan ahead and provide enough

00:17:09,600 --> 00:17:15,439
headroom

00:17:10,559 --> 00:17:15,439
and also prepare early for future color

00:17:16,839 --> 00:17:22,880
apps

00:17:19,679 --> 00:17:22,880
the key for performance

00:17:23,360 --> 00:17:27,199
is also standardization but before i get

00:17:26,079 --> 00:17:29,760
to standardization

00:17:27,199 --> 00:17:31,760
i will touch upon a couple of things

00:17:29,760 --> 00:17:34,400
when we started this automotive effort

00:17:31,760 --> 00:17:35,039
a common question was what is important

00:17:34,400 --> 00:17:37,679
in cars

00:17:35,039 --> 00:17:38,480
is it throughput or is it latency and

00:17:37,679 --> 00:17:41,760
the answer is

00:17:38,480 --> 00:17:44,799
both throughput is important

00:17:41,760 --> 00:17:47,360
for rich use cases where you know

00:17:44,799 --> 00:17:49,200
you want to make sure you are providing

00:17:47,360 --> 00:17:51,840
the right user experience

00:17:49,200 --> 00:17:54,080
latency is important for quick

00:17:51,840 --> 00:17:54,720
interaction use cases an example is a

00:17:54,080 --> 00:17:57,919
user

00:17:54,720 --> 00:18:00,160
who wants to use a google assistant for

00:17:57,919 --> 00:18:02,880
why search

00:18:00,160 --> 00:18:04,160
a quick response a quick processing of

00:18:02,880 --> 00:18:06,080
that information

00:18:04,160 --> 00:18:08,960
and presenting the information to the

00:18:06,080 --> 00:18:12,080
user is absolutely critical

00:18:08,960 --> 00:18:12,880
likewise power energy are important as

00:18:12,080 --> 00:18:15,679
well

00:18:12,880 --> 00:18:18,160
just like mobile this allows the car to

00:18:15,679 --> 00:18:18,160
do more

00:18:19,120 --> 00:18:25,600
a and b and

00:18:22,240 --> 00:18:28,080
remain in a low power state to provide

00:18:25,600 --> 00:18:29,520
an instant user experience whether you

00:18:28,080 --> 00:18:31,919
just want to get inside the car

00:18:29,520 --> 00:18:34,160
start it and go or you want to do

00:18:31,919 --> 00:18:36,320
certain offline processing

00:18:34,160 --> 00:18:37,600
and we're seeing a rich set of use cases

00:18:36,320 --> 00:18:43,760
that are emerging

00:18:37,600 --> 00:18:46,400
in the space

00:18:43,760 --> 00:18:47,600
a crucial part to addressing performance

00:18:46,400 --> 00:18:50,640
and reliability

00:18:47,600 --> 00:18:51,200
is to standardize on the counters the

00:18:50,640 --> 00:18:54,720
tools

00:18:51,200 --> 00:18:58,320
and the house as an example

00:18:54,720 --> 00:19:00,400
you know we leverage a number of linux

00:18:58,320 --> 00:19:01,440
tools and capabilities an example is f

00:19:00,400 --> 00:19:04,480
trace

00:19:01,440 --> 00:19:07,039
and we leverage a number of

00:19:04,480 --> 00:19:07,919
android capabilities like the android

00:19:07,039 --> 00:19:10,000
event log

00:19:07,919 --> 00:19:13,200
the android power stack so on and so

00:19:10,000 --> 00:19:16,559
forth and we collect all this data

00:19:13,200 --> 00:19:19,600
and in our profilers

00:19:16,559 --> 00:19:25,840
we consume all of these to identify

00:19:19,600 --> 00:19:25,840
where the bottlenecks in the system are

00:19:26,080 --> 00:19:32,320
we want to continue doing the same thing

00:19:29,280 --> 00:19:32,880
in a virtualized instance as well and

00:19:32,320 --> 00:19:36,080
hence

00:19:32,880 --> 00:19:38,000
the standardization standardization of

00:19:36,080 --> 00:19:39,200
these counters and the tools and the

00:19:38,000 --> 00:19:42,720
hals are

00:19:39,200 --> 00:19:45,440
incredibly important for all of these

00:19:42,720 --> 00:19:45,440
use cases

00:19:46,000 --> 00:19:50,480
let me talk a little bit about

00:19:47,120 --> 00:19:54,400
reliability as we talked about earlier

00:19:50,480 --> 00:19:57,679
reliability is very important on a car

00:19:54,400 --> 00:20:02,400
and we've introduced what is called as

00:19:57,679 --> 00:20:04,320
car wash stock for ensuring reliability

00:20:02,400 --> 00:20:05,600
and this is a service that monitors the

00:20:04,320 --> 00:20:08,640
system health

00:20:05,600 --> 00:20:11,919
and identifies and terminates

00:20:08,640 --> 00:20:13,679
badly behaving apps and processes

00:20:11,919 --> 00:20:15,039
it's an example it monitors the i o

00:20:13,679 --> 00:20:18,240
performance at boot

00:20:15,039 --> 00:20:19,360
and at runtime and you can also

00:20:18,240 --> 00:20:22,400
customize it

00:20:19,360 --> 00:20:25,440
for a specific duration

00:20:22,400 --> 00:20:29,360
and this car watchdog is different from

00:20:25,440 --> 00:20:29,360
the application not responding

00:20:29,600 --> 00:20:33,440
and other watchdog capabilities which

00:20:31,679 --> 00:20:35,840
are built in to android

00:20:33,440 --> 00:20:36,720
in the android activity lifecycle so

00:20:35,840 --> 00:20:39,360
this is an

00:20:36,720 --> 00:20:40,240
addition to those capabilities which

00:20:39,360 --> 00:20:43,840
already exist

00:20:40,240 --> 00:20:46,720
in android we also provide

00:20:43,840 --> 00:20:48,320
facilities for managing restarts and

00:20:46,720 --> 00:20:52,080
process control for

00:20:48,320 --> 00:20:52,080
automotive specific use cases

00:20:58,880 --> 00:21:02,000
these are a number of areas where we

00:21:01,360 --> 00:21:04,720
would like to

00:21:02,000 --> 00:21:05,919
get the community feedback and also

00:21:04,720 --> 00:21:09,200
would like to collaborate

00:21:05,919 --> 00:21:11,679
with the community across virtualization

00:21:09,200 --> 00:21:14,080
performance reliability and lts and

00:21:11,679 --> 00:21:17,840
security

00:21:14,080 --> 00:21:17,840

YouTube URL: https://www.youtube.com/watch?v=rvpjk8q95OI


