Title: LVC21-318 Open drivers for Arm GPUs
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	2020 was a watershed year for open source graphics drivers on Arm. For years, every Linaro Connect has asked when open drivers would come -- finally, they have. For Mali, open source support for Bifrost materialized with the Panfrost driver, working together with Arm. Adreno is seeing the open source Freedreno drivers shipping in production. This presentation will give an annual status update for open drivers for Arm GPUs with a view of what's to come.
Captions: 
	00:00:05,180 --> 00:00:09,440
[Music]

00:00:07,279 --> 00:00:11,440
hello and welcome to the talk on open

00:00:09,440 --> 00:00:13,360
drivers for arm gpus

00:00:11,440 --> 00:00:16,160
i'm melissa rosenzweig the lead

00:00:13,360 --> 00:00:19,760
developer of pan frost at calabra

00:00:16,160 --> 00:00:22,320
the open source driver for arms molly

00:00:19,760 --> 00:00:22,320
gps

00:00:22,640 --> 00:00:25,760
it is a bit of a lennar connect

00:00:24,800 --> 00:00:28,840
tradition

00:00:25,760 --> 00:00:30,720
to ask every year the so-called molly

00:00:28,840 --> 00:00:33,360
question and every year

00:00:30,720 --> 00:00:35,280
or so i hear a molly developer would

00:00:33,360 --> 00:00:36,239
present at lennar connect or an arm

00:00:35,280 --> 00:00:38,480
engineer

00:00:36,239 --> 00:00:39,600
and some member of the audience would

00:00:38,480 --> 00:00:40,800
ask hey

00:00:39,600 --> 00:00:42,640
when are there going to be open source

00:00:40,800 --> 00:00:45,760
molly drivers available

00:00:42,640 --> 00:00:47,360
and yeah the answer is a year ago maybe

00:00:45,760 --> 00:00:49,520
two years ago if you like

00:00:47,360 --> 00:00:50,640
something a bit less stable uh but

00:00:49,520 --> 00:00:53,120
certainly by now

00:00:50,640 --> 00:00:54,000
the answer is that our it's already here

00:00:53,120 --> 00:00:55,920
so

00:00:54,000 --> 00:00:57,680
i'm uh quite happy to be presenting at

00:00:55,920 --> 00:01:00,960
this lenora connect with

00:00:57,680 --> 00:01:00,960
some better news on that front

00:01:01,120 --> 00:01:07,520
but it's not just molly essentially

00:01:04,159 --> 00:01:10,640
every arm gpu of note

00:01:07,520 --> 00:01:14,880
and i don't just mean arms gpus i mean

00:01:10,640 --> 00:01:17,040
any gpu you will find with an armed cpu

00:01:14,880 --> 00:01:18,640
has some amount of open source support

00:01:17,040 --> 00:01:21,439
uh at least for the

00:01:18,640 --> 00:01:21,920
ones worth caring about right now molly

00:01:21,439 --> 00:01:24,080
is

00:01:21,920 --> 00:01:26,080
very well supported with the lima and

00:01:24,080 --> 00:01:28,320
panfrost drivers for the oldest

00:01:26,080 --> 00:01:30,000
guard series and the newer midgard

00:01:28,320 --> 00:01:33,280
bifrost series

00:01:30,000 --> 00:01:37,119
the adreno gpu is well supported

00:01:33,280 --> 00:01:38,079
by the friedrino driver levante has an

00:01:37,119 --> 00:01:42,880
aviv

00:01:38,079 --> 00:01:45,920
video core has vc4 and v3d uh even tegra

00:01:42,880 --> 00:01:46,640
has the nuvo driver supporting uh most

00:01:45,920 --> 00:01:49,920
modern

00:01:46,640 --> 00:01:54,159
models from our perspective

00:01:49,920 --> 00:01:57,759
at least this is a huge success

00:01:54,159 --> 00:02:01,200
it's unusual to come across a

00:01:57,759 --> 00:02:04,560
board running linux in 2021 that

00:02:01,200 --> 00:02:06,000
has an armed cpu and yet has is paired

00:02:04,560 --> 00:02:08,399
with an integrated gpu

00:02:06,000 --> 00:02:09,759
that does not have open source graphics

00:02:08,399 --> 00:02:11,680
drivers

00:02:09,759 --> 00:02:12,959
unfortunately it's not to say it's

00:02:11,680 --> 00:02:16,239
impossible

00:02:12,959 --> 00:02:17,360
the two outliers right now is would be

00:02:16,239 --> 00:02:20,319
imagination

00:02:17,360 --> 00:02:21,040
and much more recently apple but

00:02:20,319 --> 00:02:22,560
although

00:02:21,040 --> 00:02:24,160
at least on the latter front there is

00:02:22,560 --> 00:02:27,200
the asahi project

00:02:24,160 --> 00:02:29,120
uh which i've played

00:02:27,200 --> 00:02:30,239
played a bit with outside of my main

00:02:29,120 --> 00:02:34,800
role

00:02:30,239 --> 00:02:34,800
but what can i say

00:02:35,120 --> 00:02:41,519
on one hand you have these before times

00:02:38,480 --> 00:02:43,920
with a downstream and

00:02:41,519 --> 00:02:44,640
downstream code and proprietary code

00:02:43,920 --> 00:02:48,080
which

00:02:44,640 --> 00:02:51,200
creates a bundle of problems for

00:02:48,080 --> 00:02:53,200
users and system integrators alike

00:02:51,200 --> 00:02:54,319
on one hand the features are going to be

00:02:53,200 --> 00:02:57,040
capped

00:02:54,319 --> 00:02:58,400
generally with to the embedded subset of

00:02:57,040 --> 00:03:01,280
opengl

00:02:58,400 --> 00:03:03,200
and without hardware documentation

00:03:01,280 --> 00:03:05,519
without driver source code

00:03:03,200 --> 00:03:07,760
nobody can do anything about this with

00:03:05,519 --> 00:03:11,200
these proprietary stacks

00:03:07,760 --> 00:03:12,480
on one hand the hardware becomes this

00:03:11,200 --> 00:03:14,959
guarded secret

00:03:12,480 --> 00:03:16,080
which means even application developers

00:03:14,959 --> 00:03:18,319
with no interest

00:03:16,080 --> 00:03:20,319
in driver development will end up

00:03:18,319 --> 00:03:22,080
lacking information they need

00:03:20,319 --> 00:03:25,120
to effectively optimize their

00:03:22,080 --> 00:03:27,360
applications and although

00:03:25,120 --> 00:03:29,440
although some documentation gets

00:03:27,360 --> 00:03:32,720
published on the broad strokes

00:03:29,440 --> 00:03:35,360
generally speaking vendors are reticent

00:03:32,720 --> 00:03:37,840
to disclose find microarchitectural

00:03:35,360 --> 00:03:40,000
details that do matter in practice

00:03:37,840 --> 00:03:40,879
when this information is available as

00:03:40,000 --> 00:03:43,200
part of

00:03:40,879 --> 00:03:46,720
the open source implementation everyone

00:03:43,200 --> 00:03:50,640
on the platform benefits on

00:03:46,720 --> 00:03:54,560
a much more uh concrete level

00:03:50,640 --> 00:03:57,920
the there's a very uh stern issue

00:03:54,560 --> 00:04:01,280
with and end-of-life cycle the

00:03:57,920 --> 00:04:03,599
planned obsolescence issues

00:04:01,280 --> 00:04:04,720
and frankly the electronic waste crisis

00:04:03,599 --> 00:04:07,599
that we're

00:04:04,720 --> 00:04:08,480
seeing much like cast on in recent years

00:04:07,599 --> 00:04:11,280
the fact is

00:04:08,480 --> 00:04:12,959
that forcing devices to be deprecated

00:04:11,280 --> 00:04:15,439
after five or so years

00:04:12,959 --> 00:04:16,959
is not sustainable in the long run and

00:04:15,439 --> 00:04:19,280
consumers are starting to understand

00:04:16,959 --> 00:04:22,960
this and starting to care about this

00:04:19,280 --> 00:04:25,280
and it's very unfortunate that

00:04:22,960 --> 00:04:27,520
historically proprietary drivers

00:04:25,280 --> 00:04:28,960
including proprietary graphics drivers

00:04:27,520 --> 00:04:33,040
uh were contributing to

00:04:28,960 --> 00:04:36,080
contributing to this crisis when

00:04:33,040 --> 00:04:38,720
when a proprietary user space driver

00:04:36,080 --> 00:04:40,240
requires a downstream kernel and the

00:04:38,720 --> 00:04:43,440
downstream kernel

00:04:40,240 --> 00:04:44,960
is out of this is not maintained anymore

00:04:43,440 --> 00:04:47,280
uh you get caught in a very vicious

00:04:44,960 --> 00:04:49,600
cycle

00:04:47,280 --> 00:04:51,520
it's clear that the list of problems

00:04:49,600 --> 00:04:54,800
with these proprietary times

00:04:51,520 --> 00:04:57,520
uh were very lengthy

00:04:54,800 --> 00:04:58,320
but it seems like such a distant memory

00:04:57,520 --> 00:05:02,160
because we don't

00:04:58,320 --> 00:05:02,160
we don't do that anymore that's not

00:05:02,240 --> 00:05:06,320
we're an upstream world now because

00:05:04,960 --> 00:05:09,520
nowadays

00:05:06,320 --> 00:05:12,400
the goal is to have upstream first

00:05:09,520 --> 00:05:13,360
code at least on the linux side the user

00:05:12,400 --> 00:05:16,479
space

00:05:13,360 --> 00:05:18,320
is expected to be free and open source

00:05:16,479 --> 00:05:20,160
architectures are expected to have

00:05:18,320 --> 00:05:22,639
permissively licensed

00:05:20,160 --> 00:05:25,520
machine-readable documentation generally

00:05:22,639 --> 00:05:29,360
in the form of xml files in mesa

00:05:25,520 --> 00:05:32,639
and the benefits affect everyone

00:05:29,360 --> 00:05:35,360
the end users vendors

00:05:32,639 --> 00:05:37,199
and integrators alike because devices

00:05:35,360 --> 00:05:40,639
can be maintained for the long term

00:05:37,199 --> 00:05:44,000
even after a vendor has moved on to the

00:05:40,639 --> 00:05:45,360
newer gpu ip the community can continue

00:05:44,000 --> 00:05:48,639
to maintain devices

00:05:45,360 --> 00:05:50,639
preventing electronic waste there is

00:05:48,639 --> 00:05:52,160
considerable opportunities for cross

00:05:50,639 --> 00:05:54,479
vendor collaboration

00:05:52,160 --> 00:05:55,520
enabling drivers to be developed in a

00:05:54,479 --> 00:05:59,360
fraction of the time

00:05:55,520 --> 00:06:01,280
at a fraction of the cost or enabling

00:05:59,360 --> 00:06:03,280
features that the proprietary stack

00:06:01,280 --> 00:06:04,800
simply could not do without the

00:06:03,280 --> 00:06:07,759
collaboration

00:06:04,800 --> 00:06:10,400
most notably supporting the full desktop

00:06:07,759 --> 00:06:13,520
specification of opengl

00:06:10,400 --> 00:06:17,039
which is necessary for a good experience

00:06:13,520 --> 00:06:20,240
of desktop desktop linux

00:06:17,039 --> 00:06:23,440
including on an arm laptop yet

00:06:20,240 --> 00:06:25,919
is very much absent from

00:06:23,440 --> 00:06:27,199
almost all proprietary drivers for arm

00:06:25,919 --> 00:06:30,639
gpus

00:06:27,199 --> 00:06:32,080
so if we want a proper arm development

00:06:30,639 --> 00:06:35,520
laptop

00:06:32,080 --> 00:06:38,560
this open source drivers are very much

00:06:35,520 --> 00:06:40,880
in that blocking path and it's

00:06:38,560 --> 00:06:43,520
very happy to say that that blocker has

00:06:40,880 --> 00:06:43,520
been resolved

00:06:43,759 --> 00:06:49,440
because the fact remains open graphics

00:06:47,039 --> 00:06:52,560
is not an underdog disrupting the status

00:06:49,440 --> 00:06:54,880
quo at least not anymore

00:06:52,560 --> 00:06:57,680
we are the status quo whether you're a

00:06:54,880 --> 00:06:57,680
part of us or not

00:06:58,000 --> 00:07:02,000
for the first case study let's look at

00:06:59,840 --> 00:07:04,960
the video core

00:07:02,000 --> 00:07:07,680
gpu from broadcom notably used in the

00:07:04,960 --> 00:07:07,680
raspberry pi

00:07:08,000 --> 00:07:15,759
in these before times the video core was

00:07:11,520 --> 00:07:18,880
supported with a proprietary open jles

00:07:15,759 --> 00:07:20,479
but to make matters more interesting to

00:07:18,880 --> 00:07:23,360
say the least

00:07:20,479 --> 00:07:24,880
the proprietary driver running on the

00:07:23,360 --> 00:07:28,160
arms side

00:07:24,880 --> 00:07:31,759
or even when this driver became

00:07:28,160 --> 00:07:34,560
open source it was not the real

00:07:31,759 --> 00:07:35,840
driver at least not the interesting part

00:07:34,560 --> 00:07:39,520
it was a shim

00:07:35,840 --> 00:07:42,560
that essentially translated opengl calls

00:07:39,520 --> 00:07:44,400
into a serialized form that got passed

00:07:42,560 --> 00:07:47,919
off to this co-processor

00:07:44,400 --> 00:07:48,639
which was not the gpu in its fullest

00:07:47,919 --> 00:07:50,000
form

00:07:48,639 --> 00:07:52,240
the co-processor was running a

00:07:50,000 --> 00:07:56,319
multi-megabyte firmware that did

00:07:52,240 --> 00:07:59,520
all of the actual driver tasks

00:07:56,319 --> 00:08:02,720
up to and including the shader compiler

00:07:59,520 --> 00:08:05,199
which leads to every issue previously

00:08:02,720 --> 00:08:08,720
discussed and then some

00:08:05,199 --> 00:08:12,879
needless to say for a target

00:08:08,720 --> 00:08:16,319
free for a board that's targeted

00:08:12,879 --> 00:08:19,599
at the linux hobbyist community

00:08:16,319 --> 00:08:20,240
uh this was led to uh met with some

00:08:19,599 --> 00:08:22,400
backlash

00:08:20,240 --> 00:08:23,360
and led to a community-based reverse

00:08:22,400 --> 00:08:26,400
engineering effort

00:08:23,360 --> 00:08:29,280
which made some impressive results and

00:08:26,400 --> 00:08:30,160
was the bit of public pressure mixed and

00:08:29,280 --> 00:08:33,360
the net result

00:08:30,160 --> 00:08:34,000
is that the ties got tightened broadcom

00:08:33,360 --> 00:08:38,000
hired

00:08:34,000 --> 00:08:41,519
the uh prolific

00:08:38,000 --> 00:08:44,560
mesa developer eric anholt to spearhead

00:08:41,519 --> 00:08:45,839
a new open source st driver stack for

00:08:44,560 --> 00:08:50,000
the video cord

00:08:45,839 --> 00:08:51,680
ip and the end of this

00:08:50,000 --> 00:08:53,680
first half of the story was that this

00:08:51,680 --> 00:08:54,480
video core 4 driver did get merged into

00:08:53,680 --> 00:08:56,080
mesa

00:08:54,480 --> 00:08:58,160
and the corresponding piece did get

00:08:56,080 --> 00:09:00,800
merged into the mainline linux kernel

00:08:58,160 --> 00:09:02,240
supporting opengl es 2.0 on the older

00:09:00,800 --> 00:09:05,279
raspberry pi's

00:09:02,240 --> 00:09:06,800
and this is all fine and good but this

00:09:05,279 --> 00:09:10,160
is all still part of my

00:09:06,800 --> 00:09:12,320
before time so to speak because

00:09:10,160 --> 00:09:14,640
what we have today is so much better

00:09:12,320 --> 00:09:17,920
than a single person maintaining a

00:09:14,640 --> 00:09:22,080
driver for es2

00:09:17,920 --> 00:09:25,200
today we have opengles 3.1 desktop geo

00:09:22,080 --> 00:09:26,240
vulcan 1.0 shipping in production by

00:09:25,200 --> 00:09:29,440
default

00:09:26,240 --> 00:09:30,240
on the latest raspberry pi this has been

00:09:29,440 --> 00:09:32,240
a

00:09:30,240 --> 00:09:34,959
the culmination of a tremendous amount

00:09:32,240 --> 00:09:37,760
of work in collaboration between agalia

00:09:34,959 --> 00:09:40,000
broadcom and the raspberry pi foundation

00:09:37,760 --> 00:09:41,360
and the net results are speaker

00:09:40,000 --> 00:09:44,240
themselves

00:09:41,360 --> 00:09:45,040
we have in mesa very clean driver source

00:09:44,240 --> 00:09:49,200
code

00:09:45,040 --> 00:09:50,959
the opengl driver has become a

00:09:49,200 --> 00:09:53,920
reference implementation for any new

00:09:50,959 --> 00:09:57,600
opengl driver in mesa

00:09:53,920 --> 00:10:00,800
it's based on auto-generated xml file

00:09:57,600 --> 00:10:03,360
or auto-generated c from xml files

00:10:00,800 --> 00:10:04,000
with a permissively licensed

00:10:03,360 --> 00:10:06,720
architecture

00:10:04,000 --> 00:10:08,000
description there's no secrets here and

00:10:06,720 --> 00:10:12,000
in fact

00:10:08,000 --> 00:10:14,720
both of these drivers are conformant per

00:10:12,000 --> 00:10:15,360
the kronos conformance definition which

00:10:14,720 --> 00:10:19,600
is

00:10:15,360 --> 00:10:22,720
uh means in every sense that matters

00:10:19,600 --> 00:10:24,880
they are the they are the real drivers

00:10:22,720 --> 00:10:26,079
they are this is serious this is a

00:10:24,880 --> 00:10:28,959
success story

00:10:26,079 --> 00:10:31,040
and to see how far it's come should give

00:10:28,959 --> 00:10:34,640
much inspiration and much hope

00:10:31,040 --> 00:10:38,640
for every other driver project that's

00:10:34,640 --> 00:10:41,279
so inclined however

00:10:38,640 --> 00:10:42,000
this end result of this video course

00:10:41,279 --> 00:10:44,320
story

00:10:42,000 --> 00:10:45,360
is not the only way such a reverse

00:10:44,320 --> 00:10:49,040
engineered

00:10:45,360 --> 00:10:51,120
driver can end up for the next case

00:10:49,040 --> 00:10:53,120
study we can look at fridrina which has

00:10:51,120 --> 00:10:56,959
had a very different

00:10:53,120 --> 00:10:58,160
situation started out under very similar

00:10:56,959 --> 00:11:00,800
circumstances

00:10:58,160 --> 00:11:02,399
there is a proprietary open gls driver

00:11:00,800 --> 00:11:04,240
and later a vulcan driver

00:11:02,399 --> 00:11:05,519
released by qualcomm for the adreno

00:11:04,240 --> 00:11:07,839
hardware

00:11:05,519 --> 00:11:09,519
and no there was no real hardware

00:11:07,839 --> 00:11:12,959
documentation to speak of

00:11:09,519 --> 00:11:16,880
there was no certainly no

00:11:12,959 --> 00:11:19,200
open source code to speak of and

00:11:16,880 --> 00:11:20,480
this led to a very active reverse

00:11:19,200 --> 00:11:23,519
engineering effort

00:11:20,480 --> 00:11:24,320
by rob clark who at the time was a

00:11:23,519 --> 00:11:27,279
hobbyist

00:11:24,320 --> 00:11:28,240
and in time was able to get some support

00:11:27,279 --> 00:11:31,279
from his employer

00:11:28,240 --> 00:11:31,839
red hat to reverse engineer and work on

00:11:31,279 --> 00:11:35,120
this

00:11:31,839 --> 00:11:36,399
mesa driver on work time but it was

00:11:35,120 --> 00:11:39,519
still very much

00:11:36,399 --> 00:11:41,040
an outsider and yes it did develop some

00:11:39,519 --> 00:11:43,920
open gles support

00:11:41,040 --> 00:11:46,399
enough to run common linux tasks say a

00:11:43,920 --> 00:11:49,440
good um shell with acceleration

00:11:46,399 --> 00:11:53,200
your average x11 or weyland

00:11:49,440 --> 00:11:57,600
but that's still

00:11:53,200 --> 00:12:00,079
not that's not everything you need but

00:11:57,600 --> 00:12:01,680
the end of the story is much more

00:12:00,079 --> 00:12:04,720
interesting i think

00:12:01,680 --> 00:12:05,600
because today the opengl es driver

00:12:04,720 --> 00:12:09,440
supports

00:12:05,600 --> 00:12:13,920
3.2 missing only a single extension

00:12:09,440 --> 00:12:16,240
the desktop opengl support is up to 3.3

00:12:13,920 --> 00:12:17,360
and there's a vulcan driver turnip which

00:12:16,240 --> 00:12:20,800
supports

00:12:17,360 --> 00:12:22,560
1.0 and is very close to supporting 1.1

00:12:20,800 --> 00:12:24,240
and this has been a project that's been

00:12:22,560 --> 00:12:28,079
led by google

00:12:24,240 --> 00:12:31,120
including rob clark who is now a googler

00:12:28,079 --> 00:12:33,360
uh after leaving red hat

00:12:31,120 --> 00:12:34,240
eric anholt another googler after

00:12:33,360 --> 00:12:36,240
leaving broadcom

00:12:34,240 --> 00:12:37,360
in very capable hands and indeed

00:12:36,240 --> 00:12:40,000
christian hicksburg

00:12:37,360 --> 00:12:40,959
who is known for founding the weyland

00:12:40,000 --> 00:12:43,519
project

00:12:40,959 --> 00:12:44,639
in other words some of the top graphics

00:12:43,519 --> 00:12:47,200
people in linux

00:12:44,639 --> 00:12:49,120
are working on bringing this fridrino

00:12:47,200 --> 00:12:51,440
driver into fruition

00:12:49,120 --> 00:12:53,600
in addition to google there has been

00:12:51,440 --> 00:12:56,880
significant contributions from valve

00:12:53,600 --> 00:12:58,320
and gallia and the net results separate

00:12:56,880 --> 00:13:00,639
reno is

00:12:58,320 --> 00:13:01,760
capable enough to ship in production

00:13:00,639 --> 00:13:03,920
hardware

00:13:01,760 --> 00:13:06,079
and indeed this is one of the biggest

00:13:03,920 --> 00:13:08,160
successes and biggest changes in

00:13:06,079 --> 00:13:09,120
the driver's space since last linear

00:13:08,160 --> 00:13:10,959
connect

00:13:09,120 --> 00:13:13,680
in the past few months we've we're

00:13:10,959 --> 00:13:14,880
seeing google ship snapdragon hardware

00:13:13,680 --> 00:13:16,959
to end users

00:13:14,880 --> 00:13:18,079
and this is running the open source

00:13:16,959 --> 00:13:22,160
reverse engineered

00:13:18,079 --> 00:13:23,680
mind you driver stack from day one

00:13:22,160 --> 00:13:25,279
it's hard for me to understate the

00:13:23,680 --> 00:13:28,560
importance of this

00:13:25,279 --> 00:13:31,279
the fact is that google believes so

00:13:28,560 --> 00:13:33,120
strongly in the need for open source

00:13:31,279 --> 00:13:35,440
drivers for this hardware

00:13:33,120 --> 00:13:37,040
that they were willing to invest in a

00:13:35,440 --> 00:13:40,399
reverse engineering effort

00:13:37,040 --> 00:13:44,160
over qualcomm's own proprietary stack

00:13:40,399 --> 00:13:44,800
there's been a stereotype a myth i dare

00:13:44,160 --> 00:13:47,839
say

00:13:44,800 --> 00:13:49,839
about open source drivers including

00:13:47,839 --> 00:13:53,120
graphics drivers that it's only

00:13:49,839 --> 00:13:54,959
for us loony free software types and i

00:13:53,120 --> 00:13:57,120
mean yeah you got me i

00:13:54,959 --> 00:13:58,800
i say free software just like i say open

00:13:57,120 --> 00:14:01,120
source

00:13:58,800 --> 00:14:02,320
but the fact is that open source

00:14:01,120 --> 00:14:05,519
graphics drivers

00:14:02,320 --> 00:14:06,320
are wanted by such loonies and fringe

00:14:05,519 --> 00:14:10,959
types as

00:14:06,320 --> 00:14:10,959
i don't know google valve broadcom

00:14:11,120 --> 00:14:14,320
the biggest players in the graphics

00:14:12,800 --> 00:14:17,760
industry get it

00:14:14,320 --> 00:14:19,440
do you

00:14:17,760 --> 00:14:21,279
so i want to look at the final case

00:14:19,440 --> 00:14:23,920
study the one closest to my heart and

00:14:21,279 --> 00:14:27,360
that's pant frost

00:14:23,920 --> 00:14:28,480
the origin story looks almost identical

00:14:27,360 --> 00:14:31,199
to

00:14:28,480 --> 00:14:32,240
the free drain origin story and i will

00:14:31,199 --> 00:14:35,360
openly admit

00:14:32,240 --> 00:14:38,320
that i duplicated the slide because yeah

00:14:35,360 --> 00:14:40,720
the vendor provided a proprietary

00:14:38,320 --> 00:14:43,199
opengls driver and a vulcan driver

00:14:40,720 --> 00:14:45,519
and got reverse engineered by connor

00:14:43,199 --> 00:14:48,800
abbott another prolific mesa contributor

00:14:45,519 --> 00:14:52,240
and myself and

00:14:48,800 --> 00:14:55,279
i wrote a open dles turtle driver

00:14:52,240 --> 00:14:57,360
which again it's it's a big good

00:14:55,279 --> 00:14:58,560
big first step it opened up a lot of

00:14:57,360 --> 00:15:00,959
doors for

00:14:58,560 --> 00:15:02,160
molly based hardware on linux it meant

00:15:00,959 --> 00:15:03,920
that you could run an accelerated

00:15:02,160 --> 00:15:05,839
desktop finally

00:15:03,920 --> 00:15:07,519
without proprietary drivers it meant you

00:15:05,839 --> 00:15:10,160
could run a main line kernel

00:15:07,519 --> 00:15:12,079
but that's not the end of it that's

00:15:10,160 --> 00:15:13,519
something you can do in high school and

00:15:12,079 --> 00:15:14,720
i know this because i did it in high

00:15:13,519 --> 00:15:16,399
school and when conor

00:15:14,720 --> 00:15:18,800
reverse engineered the relevant part

00:15:16,399 --> 00:15:20,560
molly he too was in high school

00:15:18,800 --> 00:15:22,160
i think there might be a trend about

00:15:20,560 --> 00:15:23,680
molly being reverse injured by high

00:15:22,160 --> 00:15:26,160
schoolers

00:15:23,680 --> 00:15:27,839
maybe i'm gonna need to go to the local

00:15:26,160 --> 00:15:29,360
to the local school system to see if

00:15:27,839 --> 00:15:30,079
anybody's interested in taking a bell

00:15:29,360 --> 00:15:32,959
hall

00:15:30,079 --> 00:15:33,600
i don't know that's it just seems to be

00:15:32,959 --> 00:15:35,519
a trend

00:15:33,600 --> 00:15:37,759
but then again it's molly so what do i

00:15:35,519 --> 00:15:37,759
know

00:15:38,079 --> 00:15:42,320
the after at any rate is something so

00:15:41,120 --> 00:15:44,079
much further than

00:15:42,320 --> 00:15:45,519
i could have dreamed of in between my

00:15:44,079 --> 00:15:48,880
english exams

00:15:45,519 --> 00:15:51,360
uh we support opengl es 3.0

00:15:48,880 --> 00:15:54,800
and quite close to 3.1 we support

00:15:51,360 --> 00:15:57,279
desktop opengl 3.1 and

00:15:54,800 --> 00:15:58,480
this is a this is seeing commercial

00:15:57,279 --> 00:16:01,519
backing

00:15:58,480 --> 00:16:04,560
with the project being led by calabra

00:16:01,519 --> 00:16:08,320
between my fellow collaborating boris

00:16:04,560 --> 00:16:10,480
brazion as well as my myself i

00:16:08,320 --> 00:16:13,199
became a collaborative employee you know

00:16:10,480 --> 00:16:15,759
after graduating high school

00:16:13,199 --> 00:16:16,320
and the largest change i've seen in pan

00:16:15,759 --> 00:16:19,279
frost

00:16:16,320 --> 00:16:20,720
especially in this past year has been

00:16:19,279 --> 00:16:23,040
moving away from this

00:16:20,720 --> 00:16:24,639
reverse engineered underdog model

00:16:23,040 --> 00:16:29,040
because as of

00:16:24,639 --> 00:16:32,320
the end of 2020 uh arm is now

00:16:29,040 --> 00:16:34,000
on our side quite frankly providing

00:16:32,320 --> 00:16:34,959
there's no need to reverse engineer this

00:16:34,000 --> 00:16:37,360
hardware anymore

00:16:34,959 --> 00:16:38,320
and i quote armor now working together

00:16:37,360 --> 00:16:41,360
with collabora

00:16:38,320 --> 00:16:43,360
to provide us with documentation so the

00:16:41,360 --> 00:16:46,160
net result is that

00:16:43,360 --> 00:16:48,000
the ubiquitous molle hardware including

00:16:46,160 --> 00:16:50,320
midgard t16 up

00:16:48,000 --> 00:16:51,279
and every bifrost chip is very well

00:16:50,320 --> 00:16:54,880
supported

00:16:51,279 --> 00:16:57,120
uh the pan frost driver is seeing re uh

00:16:54,880 --> 00:16:59,279
real use cases for instance shipping in

00:16:57,120 --> 00:16:59,279
the

00:16:59,839 --> 00:17:03,600
let's just say uh shipping in the

00:17:01,360 --> 00:17:07,839
pipeline pro which is

00:17:03,600 --> 00:17:11,520
a very common development laptop for

00:17:07,839 --> 00:17:13,439
arm hackers uh seeing much interest in

00:17:11,520 --> 00:17:15,919
linux hobbyist space

00:17:13,439 --> 00:17:16,959
i would not be surprised if one of you

00:17:15,919 --> 00:17:19,520
in the audience is

00:17:16,959 --> 00:17:22,720
a happy owner of one and running pan

00:17:19,520 --> 00:17:24,559
frost whether you realize it or not

00:17:22,720 --> 00:17:27,679
but there is something missing from the

00:17:24,559 --> 00:17:29,760
story because we saw with the video core

00:17:27,679 --> 00:17:32,240
that part of its success story and

00:17:29,760 --> 00:17:34,799
becoming a serious driver and the

00:17:32,240 --> 00:17:36,160
uh really the the only driver of

00:17:34,799 --> 00:17:38,080
interest for the hardware

00:17:36,160 --> 00:17:39,280
was gaining a conformant vulcan

00:17:38,080 --> 00:17:43,120
implementation

00:17:39,280 --> 00:17:45,360
we saw for fridrino in the uh

00:17:43,120 --> 00:17:46,320
months and years leading up to shipping

00:17:45,360 --> 00:17:48,240
and production

00:17:46,320 --> 00:17:51,039
there was intense interest and it's

00:17:48,240 --> 00:17:54,400
turnip vulcan driver

00:17:51,039 --> 00:17:56,799
so what about pan frost you know what

00:17:54,400 --> 00:17:59,440
i think we can be a serious driver too

00:17:56,799 --> 00:18:02,799
so starting last month

00:17:59,440 --> 00:18:05,360
my fellow collaborating boris

00:18:02,799 --> 00:18:07,039
has been hard at work uh putting

00:18:05,360 --> 00:18:09,200
together a vulcan driver

00:18:07,039 --> 00:18:10,080
and i'd like to show off the first

00:18:09,200 --> 00:18:12,960
renter

00:18:10,080 --> 00:18:14,080
here is vulcan cube running with a open

00:18:12,960 --> 00:18:17,200
source driver stack

00:18:14,080 --> 00:18:29,840
on a rmali bifrost gpu

00:18:17,200 --> 00:18:29,840
thank you

00:18:34,980 --> 00:18:39,200
[Music]

00:18:42,710 --> 00:18:52,480
[Music]

00:18:58,040 --> 00:19:04,930
[Music]

00:19:16,559 --> 00:19:18,640

YouTube URL: https://www.youtube.com/watch?v=ZYCGVzkSIpg


