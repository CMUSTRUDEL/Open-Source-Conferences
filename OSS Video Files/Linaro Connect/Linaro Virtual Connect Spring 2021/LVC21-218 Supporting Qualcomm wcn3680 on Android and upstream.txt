Title: LVC21-218 Supporting Qualcomm wcn3680 on Android and upstream
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	A 10-20 minute talk on adding support for the wcn3680 to upstream and Android kernels.

- Brief overview of wcn3620, wcn3660 and wcn3680
- Initial state of hardware support upstream
- Adding of 802.11 ac
- Adding of firmware assisted keep alive
- WiFi Scanning
- WoWLAN
- Lessons learned
Captions: 
	00:00:00,640 --> 00:00:03,600
and i'm brian um i'm going to do a talk

00:00:02,960 --> 00:00:07,520
about the

00:00:03,600 --> 00:00:10,400
uh wcn 3680 on

00:00:07,520 --> 00:00:11,759
android and uh upstream which is very

00:00:10,400 --> 00:00:15,759
interesting project we did

00:00:11,759 --> 00:00:18,160
with um with the square this is the uh

00:00:15,759 --> 00:00:20,320
this is the square uh point of sale

00:00:18,160 --> 00:00:23,359
terminal it's based on the uh

00:00:20,320 --> 00:00:23,840
qualcomm on a qualcomm chipset i want to

00:00:23,359 --> 00:00:27,199
build

00:00:23,840 --> 00:00:28,000
a voltage which one um uh but it has a

00:00:27,199 --> 00:00:31,119
wcn

00:00:28,000 --> 00:00:34,880
3680 inside of it

00:00:31,119 --> 00:00:38,760
which is a an iteration of the

00:00:34,880 --> 00:00:42,480
wcn 3620 which comes in your

00:00:38,760 --> 00:00:46,399
gb410c and

00:00:42,480 --> 00:00:49,680
in your well the cm3680 is also

00:00:46,399 --> 00:00:52,879
in uh the uh

00:00:49,680 --> 00:00:54,160
sony m4 aqua and it's shipped on a whole

00:00:52,879 --> 00:00:57,520
bunch of

00:00:54,160 --> 00:00:59,039
uh products so over its lifespan it's

00:00:57,520 --> 00:01:01,840
it's really out there

00:00:59,039 --> 00:01:03,440
um for us in this first of all i had

00:01:01,840 --> 00:01:04,879
loads of food on this project it was it

00:01:03,440 --> 00:01:07,520
was really lots of fun

00:01:04,879 --> 00:01:08,960
and uh educational and successful

00:01:07,520 --> 00:01:12,240
ultimately at the end which is

00:01:08,960 --> 00:01:14,000
always a good thing um we had two

00:01:12,240 --> 00:01:15,360
two kind of targets when we were doing

00:01:14,000 --> 00:01:18,320
the development

00:01:15,360 --> 00:01:20,000
one was android and the other was debian

00:01:18,320 --> 00:01:21,680
um

00:01:20,000 --> 00:01:25,840
android because that's our production

00:01:21,680 --> 00:01:25,840
target and debian because that's for

00:01:27,430 --> 00:01:31,920
[Music]

00:01:29,439 --> 00:01:33,119
using those two platforms actually ended

00:01:31,920 --> 00:01:36,479
up being very important

00:01:33,119 --> 00:01:40,320
in terms of development and validation

00:01:36,479 --> 00:01:41,600
uh as we we will get into so uh for

00:01:40,320 --> 00:01:44,240
those of you not familiar

00:01:41,600 --> 00:01:45,920
wi-fi is not you know just some well

00:01:44,240 --> 00:01:47,920
there's a magic technology

00:01:45,920 --> 00:01:49,280
but it's you know it's also a technology

00:01:47,920 --> 00:01:52,840
based in the whole

00:01:49,280 --> 00:01:56,640
a whole bunch of different um

00:01:52,840 --> 00:02:00,640
modulations and you know

00:01:56,640 --> 00:02:03,759
time shifting and time slicing

00:02:00,640 --> 00:02:06,320
and so on it sits at the

00:02:03,759 --> 00:02:06,799
two bottom layers of the osi model at

00:02:06,320 --> 00:02:10,640
the

00:02:06,799 --> 00:02:10,640
physical and the data link layer

00:02:11,120 --> 00:02:16,959
and what we had upstream at the

00:02:14,400 --> 00:02:18,959
at the time of uh right at the when we

00:02:16,959 --> 00:02:23,680
initially started the project

00:02:18,959 --> 00:02:27,520
was um abg

00:02:23,680 --> 00:02:30,160
which you know is based on uh

00:02:27,520 --> 00:02:31,599
well abgn as a matter of fact so you

00:02:30,160 --> 00:02:33,920
could go all the way up to

00:02:31,599 --> 00:02:35,360
72 megabits and the five gigahertz

00:02:33,920 --> 00:02:38,720
frequency

00:02:35,360 --> 00:02:42,080
and the db410c uh has

00:02:38,720 --> 00:02:43,680
abg which is you know at least 54

00:02:42,080 --> 00:02:46,800
megabits at

00:02:43,680 --> 00:02:50,160
the 2.4 gigahertz frequency uh

00:02:46,800 --> 00:02:50,560
i don't have a wcn 3660 to to test with

00:02:50,160 --> 00:02:53,360
so

00:02:50,560 --> 00:02:54,319
i don't know what sort of performance

00:02:53,360 --> 00:02:58,480
that actually gets

00:02:54,319 --> 00:03:01,920
but the db410c gets about 47 megabits so

00:02:58,480 --> 00:03:04,720
it's it's pretty close to um

00:03:01,920 --> 00:03:05,879
to the theoretical maximum there uh for

00:03:04,720 --> 00:03:10,640
the

00:03:05,879 --> 00:03:12,560
36azb um it's uh

00:03:10,640 --> 00:03:13,720
what well the maximum for the standard

00:03:12,560 --> 00:03:17,440
is as you can see here

00:03:13,720 --> 00:03:21,840
433 megabits uh qualcomm

00:03:17,440 --> 00:03:22,720
itself published a maximum of about 233

00:03:21,840 --> 00:03:26,640
megabits

00:03:22,720 --> 00:03:30,080
and uh i myself measured 230

00:03:26,640 --> 00:03:32,720
on their downstream so so they get

00:03:30,080 --> 00:03:33,599
pretty pretty close to their maximum um

00:03:32,720 --> 00:03:36,640
with their

00:03:33,599 --> 00:03:40,159
downstream prima curl

00:03:36,640 --> 00:03:41,200
and with their premade driver so the

00:03:40,159 --> 00:03:43,360
prima driver

00:03:41,200 --> 00:03:44,400
is the the name of the driver that

00:03:43,360 --> 00:03:47,840
qualcomm

00:03:44,400 --> 00:03:52,560
used downstream um kernel 310

00:03:47,840 --> 00:03:56,239
for the um w6 for the 3680

00:03:52,560 --> 00:03:59,280
probably for the 3620 and 3660

00:03:56,239 --> 00:04:01,439
uh and that that driver was you know

00:03:59,280 --> 00:04:04,480
developed and supported until

00:04:01,439 --> 00:04:06,000
kind of end of life for that that um for

00:04:04,480 --> 00:04:09,280
those chips

00:04:06,000 --> 00:04:12,840
um prima is you know

00:04:09,280 --> 00:04:15,840
a very featureful driver um it's also

00:04:12,840 --> 00:04:17,359
highly you know it's pretty pretty out

00:04:15,840 --> 00:04:20,400
there in terms of the

00:04:17,359 --> 00:04:23,440
linux kernel standard you know if depths

00:04:20,400 --> 00:04:25,280
camel humping indentation all that

00:04:23,440 --> 00:04:27,840
standard stuff but also

00:04:25,280 --> 00:04:29,759
bringing stuff in from the wi-fi stack

00:04:27,840 --> 00:04:32,000
or developing stuff inside of the driver

00:04:29,759 --> 00:04:35,520
that opted up in the wi-fi stack

00:04:32,000 --> 00:04:38,560
it wasn't available at the time and so

00:04:35,520 --> 00:04:39,680
it's kind of very featureful but nearly

00:04:38,560 --> 00:04:43,199
impossible

00:04:39,680 --> 00:04:44,800
to forward part so the first thing we

00:04:43,199 --> 00:04:47,440
looked at was forward parting

00:04:44,800 --> 00:04:48,000
this driver to a laser kernel and one of

00:04:47,440 --> 00:04:49,440
the

00:04:48,000 --> 00:04:51,440
one of the problems that you're going to

00:04:49,440 --> 00:04:54,000
encounter there is removing

00:04:51,440 --> 00:04:56,240
features inside of that driver that are

00:04:54,000 --> 00:04:58,240
now inside of linux kernel

00:04:56,240 --> 00:04:59,360
and doing it in a way that that doesn't

00:04:58,240 --> 00:05:01,919
break everything

00:04:59,360 --> 00:05:03,120
so it's it's it borders on the

00:05:01,919 --> 00:05:06,400
impossible

00:05:03,120 --> 00:05:08,960
um so what we

00:05:06,400 --> 00:05:10,320
decided in the end was to use the uh

00:05:08,960 --> 00:05:14,160
upstream kernel

00:05:10,320 --> 00:05:15,759
which didn't have support for um 3680

00:05:14,160 --> 00:05:19,600
specifically

00:05:15,759 --> 00:05:20,639
so uh to kind of cause a long story

00:05:19,600 --> 00:05:25,120
short

00:05:20,639 --> 00:05:27,360
uh you need to

00:05:25,120 --> 00:05:28,240
you need to make you need to you you

00:05:27,360 --> 00:05:31,520
have a base

00:05:28,240 --> 00:05:34,560
of um communications with the firmware

00:05:31,520 --> 00:05:35,360
but to to add the 5g stuff onto it you

00:05:34,560 --> 00:05:37,600
need to

00:05:35,360 --> 00:05:38,479
extend the parameter passing between the

00:05:37,600 --> 00:05:40,960
firmware

00:05:38,479 --> 00:05:42,000
and you need to set issue a bunch of

00:05:40,960 --> 00:05:44,000
commands to

00:05:42,000 --> 00:05:45,280
set the firmware up to tell it that you

00:05:44,000 --> 00:05:48,720
you want to go into this

00:05:45,280 --> 00:05:50,800
extended mode and nonetheless it's

00:05:48,720 --> 00:05:53,919
documented except in the code

00:05:50,800 --> 00:05:55,840
and the the only way to figure this is

00:05:53,919 --> 00:05:57,360
to do it and get it wrong and say why is

00:05:55,840 --> 00:05:58,639
this going around and go back to the

00:05:57,360 --> 00:06:00,319
brain mcgregor

00:05:58,639 --> 00:06:02,960
and take a bunch of snapshots of what's

00:06:00,319 --> 00:06:06,479
going on and try to understand it so

00:06:02,960 --> 00:06:10,880
that that part was slow um and

00:06:06,479 --> 00:06:14,080
of course we you know comparing 36

00:06:10,880 --> 00:06:16,240
comparing the upstream uh driver to

00:06:14,080 --> 00:06:17,440
prima on what we absolutely had to have

00:06:16,240 --> 00:06:20,960
in prima

00:06:17,440 --> 00:06:22,880
and there were a few gaps apart from

00:06:20,960 --> 00:06:26,560
just the 5g support

00:06:22,880 --> 00:06:29,680
um so

00:06:26,560 --> 00:06:31,199
one of them was we i discovered

00:06:29,680 --> 00:06:33,520
i was going to say we discovered i

00:06:31,199 --> 00:06:35,759
discovered um after

00:06:33,520 --> 00:06:37,440
telling people this is all working and

00:06:35,759 --> 00:06:38,479
square came back and said well actually

00:06:37,440 --> 00:06:39,840
you know you need to

00:06:38,479 --> 00:06:42,240
you need to do a little bit more work

00:06:39,840 --> 00:06:45,680
here as as customers and

00:06:42,240 --> 00:06:49,440
end users invariably do and rightly so

00:06:45,680 --> 00:06:52,960
so when was firmware keep alive um

00:06:49,440 --> 00:06:54,720
which the the which is where

00:06:52,960 --> 00:06:56,240
you delegate to the firmware to the

00:06:54,720 --> 00:06:59,199
wi-fi chip the task

00:06:56,240 --> 00:07:00,160
of keeping the wi-fi link alive between

00:06:59,199 --> 00:07:03,599
the

00:07:00,160 --> 00:07:06,639
sda and the ap instead of having

00:07:03,599 --> 00:07:10,000
the linux wi-fi stack do that for you

00:07:06,639 --> 00:07:13,360
hey that's a that's a power saving thing

00:07:10,000 --> 00:07:15,840
uh b it's also a cadence thing a

00:07:13,360 --> 00:07:17,599
firmware will do that on a much more

00:07:15,840 --> 00:07:20,960
accurate cadence

00:07:17,599 --> 00:07:24,479
and uh c to go into suspend

00:07:20,960 --> 00:07:25,680
and keep your link alive um you you need

00:07:24,479 --> 00:07:28,319
the firmware to

00:07:25,680 --> 00:07:29,599
continuously ping the ap and say hey i'm

00:07:28,319 --> 00:07:33,039
here hey in here

00:07:29,599 --> 00:07:34,800
hey i'm here um so that the the first

00:07:33,039 --> 00:07:36,400
pass that suspend

00:07:34,800 --> 00:07:38,880
that we did was you would go into

00:07:36,400 --> 00:07:42,000
suspend and when you would resume

00:07:38,880 --> 00:07:43,199
your your your well your terminal would

00:07:42,000 --> 00:07:46,639
reconnect

00:07:43,199 --> 00:07:49,039
um and if you

00:07:46,639 --> 00:07:51,120
remember kind of earlier experiences of

00:07:49,039 --> 00:07:54,800
having

00:07:51,120 --> 00:07:56,240
cellular phones i i remember a few of my

00:07:54,800 --> 00:07:58,319
phones did things like that

00:07:56,240 --> 00:07:59,680
and i never really noticed because if

00:07:58,319 --> 00:08:02,080
you know this now when you

00:07:59,680 --> 00:08:04,319
turn your phone off or turn it off and

00:08:02,080 --> 00:08:06,080
put it into a low power stage and turn

00:08:04,319 --> 00:08:08,000
it back on

00:08:06,080 --> 00:08:10,080
you see that it has wavelet immediately

00:08:08,000 --> 00:08:11,919
available and of course one of the the

00:08:10,080 --> 00:08:13,360
magic things going on there is this

00:08:11,919 --> 00:08:16,800
constant firmware

00:08:13,360 --> 00:08:19,440
uh keep alive um but what

00:08:16,800 --> 00:08:20,639
what square wanted and uh they were

00:08:19,440 --> 00:08:24,879
quite right about this

00:08:20,639 --> 00:08:27,599
uh it was a guy in there called ben

00:08:24,879 --> 00:08:28,639
i was to have a thing called arm

00:08:27,599 --> 00:08:32,159
response

00:08:28,639 --> 00:08:35,360
and uh sorry ipv4

00:08:32,159 --> 00:08:37,760
uh our local response ipv6

00:08:35,360 --> 00:08:38,959
namespace lookup response it's the it's

00:08:37,760 --> 00:08:42,560
the analogous thing in

00:08:38,959 --> 00:08:45,680
ipv6 to an art local

00:08:42,560 --> 00:08:48,320
and so what that means is you you add

00:08:45,680 --> 00:08:50,399
your phone to a wi-fi network

00:08:48,320 --> 00:08:51,920
and you put it to sleep straight away

00:08:50,399 --> 00:08:55,360
but if you want to

00:08:51,920 --> 00:08:55,920
um send a send a notification to your

00:08:55,360 --> 00:08:58,640
phone

00:08:55,920 --> 00:09:00,800
like from your bank or i don't know from

00:08:58,640 --> 00:09:04,000
gmail or something like that

00:09:00,800 --> 00:09:05,920
you you're you want to send it to an ip

00:09:04,000 --> 00:09:08,640
you don't actually know the the arc

00:09:05,920 --> 00:09:11,680
address of the phone on the network

00:09:08,640 --> 00:09:13,279
prior to that so what

00:09:11,680 --> 00:09:14,959
what happens is you send out your

00:09:13,279 --> 00:09:18,480
standard

00:09:14,959 --> 00:09:20,240
arab request and everybody does their

00:09:18,480 --> 00:09:22,320
arab response you know if you have that

00:09:20,240 --> 00:09:23,839
mac you do your app response

00:09:22,320 --> 00:09:26,399
but of course if your phone is in

00:09:23,839 --> 00:09:30,000
suspend uh

00:09:26,399 --> 00:09:32,880
the there's no ips stack to resolve the

00:09:30,000 --> 00:09:34,480
requested ip to the to the necessary mac

00:09:32,880 --> 00:09:37,360
because linux is asleep

00:09:34,480 --> 00:09:38,640
so you need your firmware to do that and

00:09:37,360 --> 00:09:40,800
that was another thing that we

00:09:38,640 --> 00:09:43,120
that we added so those it's kind of

00:09:40,800 --> 00:09:45,839
three things there at the end where

00:09:43,120 --> 00:09:46,880
the kind of the last five percent of the

00:09:45,839 --> 00:09:52,160
00:09:46,880 --> 00:09:55,760
where 95 percent of the effort went um

00:09:52,160 --> 00:09:57,760
and this is this part here isn't isn't

00:09:55,760 --> 00:10:02,839
upstream yet but it's pretty close

00:09:57,760 --> 00:10:06,320
uh the um 5g stuff is upstream

00:10:02,839 --> 00:10:07,839
um already so

00:10:06,320 --> 00:10:09,600
yeah i mean i just went through this

00:10:07,839 --> 00:10:10,720
already the the objectives were to get

00:10:09,600 --> 00:10:13,440
to

00:10:10,720 --> 00:10:14,320
five five g so eight or two eleven ac

00:10:13,440 --> 00:10:18,560
speeds

00:10:14,320 --> 00:10:22,079
um so up to 233 megabits

00:10:18,560 --> 00:10:24,720
uh what 433 was what we stated

00:10:22,079 --> 00:10:27,360
but you know qualcomm themselves only

00:10:24,720 --> 00:10:28,480
only said 233 megabits to have suspended

00:10:27,360 --> 00:10:30,959
resume work

00:10:28,480 --> 00:10:31,519
push notifications work so as i just

00:10:30,959 --> 00:10:33,440
explained

00:10:31,519 --> 00:10:34,560
push notifications need to work when

00:10:33,440 --> 00:10:36,800
you're in suspend

00:10:34,560 --> 00:10:37,600
and nobody else on your network knows

00:10:36,800 --> 00:10:40,640
your your

00:10:37,600 --> 00:10:42,720
mac address um and

00:10:40,640 --> 00:10:44,560
wi-fi can't be a source of unreasonably

00:10:42,720 --> 00:10:47,279
high power consumption

00:10:44,560 --> 00:10:47,760
and on that what i'll say is it's not

00:10:47,279 --> 00:10:49,920
but

00:10:47,760 --> 00:10:51,440
i didn't know specific we did no

00:10:49,920 --> 00:10:53,680
specific work for that

00:10:51,440 --> 00:10:55,920
it just turned out that the wi-fi was

00:10:53,680 --> 00:10:58,240
not a very big consumer

00:10:55,920 --> 00:10:59,440
and uh the firmware basically is doing

00:10:58,240 --> 00:11:00,800
the right thing when you're going to

00:10:59,440 --> 00:11:04,320
suspend

00:11:00,800 --> 00:11:08,880
um so i mentioned briefly earlier

00:11:04,320 --> 00:11:12,079
uh debian and android um debian

00:11:08,880 --> 00:11:15,120
for me anyway was uh well for us for

00:11:12,079 --> 00:11:18,399
for our team so shall go

00:11:15,120 --> 00:11:20,720
um myself and uh junie

00:11:18,399 --> 00:11:22,399
the two two other the narrow engineers

00:11:20,720 --> 00:11:24,480
um

00:11:22,399 --> 00:11:26,079
so so for us definitely debian is the

00:11:24,480 --> 00:11:30,480
gold standard

00:11:26,079 --> 00:11:31,360
um and uh in both cases in debian and

00:11:30,480 --> 00:11:34,399
android

00:11:31,360 --> 00:11:36,640
uh the what what we were working against

00:11:34,399 --> 00:11:40,240
was a wpa supplicant

00:11:36,640 --> 00:11:44,079
um which is you know you host apd

00:11:40,240 --> 00:11:46,560
and wpa supplicants those are the two

00:11:44,079 --> 00:11:47,839
most common ways of doing wi-fi on linux

00:11:46,560 --> 00:11:50,480
and wpa software

00:11:47,839 --> 00:11:50,880
of course is excuse me what you do when

00:11:50,480 --> 00:11:52,510
you're

00:11:50,880 --> 00:11:54,160
a client um

00:11:52,510 --> 00:11:56,639
[Music]

00:11:54,160 --> 00:11:57,839
excuse me debian that that runs as the

00:11:56,639 --> 00:12:00,720
daemon

00:11:57,839 --> 00:12:01,440
and android what what they found was

00:12:00,720 --> 00:12:04,959
they

00:12:01,440 --> 00:12:08,399
uh they have wrapper libraries around

00:12:04,959 --> 00:12:11,120
wpa supplicant so that if you imagine

00:12:08,399 --> 00:12:14,959
the wrapper libraries then bind into the

00:12:11,120 --> 00:12:17,760
the android services and and ui

00:12:14,959 --> 00:12:20,240
so when you when you click a scan the

00:12:17,760 --> 00:12:23,839
library calls wpi supplicant

00:12:20,240 --> 00:12:25,839
and wpi supplicant tells the driver to

00:12:23,839 --> 00:12:29,600
please do a scan

00:12:25,839 --> 00:12:32,800
um what you have on android

00:12:29,600 --> 00:12:36,639
is a whole bunch of

00:12:32,800 --> 00:12:38,480
vendor drivers and therefore

00:12:36,639 --> 00:12:40,800
in the user space you have

00:12:38,480 --> 00:12:43,680
vendor-specific android libraries

00:12:40,800 --> 00:12:44,880
that talk to those vendor drivers

00:12:43,680 --> 00:12:48,399
fortunately the

00:12:44,880 --> 00:12:51,040
android vanilla libraries don't do that

00:12:48,399 --> 00:12:52,800
they're just kind of a standard wrapper

00:12:51,040 --> 00:12:57,440
around standard called

00:12:52,800 --> 00:13:00,720
wpa supplement so um

00:12:57,440 --> 00:13:01,360
for me then for us in the end to to get

00:13:00,720 --> 00:13:04,079
working

00:13:01,360 --> 00:13:05,440
on android if you imagine we have a

00:13:04,079 --> 00:13:08,399
delivery from

00:13:05,440 --> 00:13:09,279
from qualcomm an android delivery from

00:13:08,399 --> 00:13:11,680
qualcomm

00:13:09,279 --> 00:13:12,880
with android specific excuse me with

00:13:11,680 --> 00:13:16,399
qualcomm specific

00:13:12,880 --> 00:13:19,839
wrappers around wpa supplicants

00:13:16,399 --> 00:13:20,800
um but when you're using the upstream

00:13:19,839 --> 00:13:24,000
driver

00:13:20,800 --> 00:13:25,519
the qualcomm specific libraries are

00:13:24,000 --> 00:13:26,480
actually an impediment to what you want

00:13:25,519 --> 00:13:28,480
to do

00:13:26,480 --> 00:13:30,639
uh because you're never sure that when

00:13:28,480 --> 00:13:31,120
you're debugging something that you're

00:13:30,639 --> 00:13:32,880
not

00:13:31,120 --> 00:13:35,279
trying to do a vendor call that just

00:13:32,880 --> 00:13:38,880
doesn't exist in the upstream driver

00:13:35,279 --> 00:13:40,240
so part of the work getting the upstream

00:13:38,880 --> 00:13:43,360
driver to work

00:13:40,240 --> 00:13:45,440
uh which i only found is that

00:13:43,360 --> 00:13:47,440
kind of in the middle of the end was

00:13:45,440 --> 00:13:50,399
that you we needed to switch out

00:13:47,440 --> 00:13:51,279
to just regular android vanilla

00:13:50,399 --> 00:13:54,720
libraries

00:13:51,279 --> 00:13:57,839
um so

00:13:54,720 --> 00:13:58,240
that that kind of leads into my my gag

00:13:57,839 --> 00:14:01,760
here

00:13:58,240 --> 00:14:03,519
which is uh wi-fi scanning at david

00:14:01,760 --> 00:14:05,760
cronenberg production

00:14:03,519 --> 00:14:07,040
uh i i love david cronenberg movies

00:14:05,760 --> 00:14:09,519
don't get me wrong

00:14:07,040 --> 00:14:10,560
but i don't i don't want to run my wi-fi

00:14:09,519 --> 00:14:13,920
scan like a

00:14:10,560 --> 00:14:15,279
david cronenberg movie and uh

00:14:13,920 --> 00:14:17,600
so if you just take the difference

00:14:15,279 --> 00:14:20,240
between debian and android

00:14:17,600 --> 00:14:21,279
um it is a little bit like scanners you

00:14:20,240 --> 00:14:23,279
you kind of have

00:14:21,279 --> 00:14:25,279
the guy on the left with the with the

00:14:23,279 --> 00:14:27,199
bald head and the glasses

00:14:25,279 --> 00:14:29,199
and then that's baby and the guy in the

00:14:27,199 --> 00:14:32,399
right is of course michael ironside

00:14:29,199 --> 00:14:34,639
that's that's android and android uh

00:14:32,399 --> 00:14:37,120
persistently scans you know it's it's

00:14:34,639 --> 00:14:39,920
it's a scan beast you can

00:14:37,120 --> 00:14:40,320
in in any given minute you can find that

00:14:39,920 --> 00:14:43,920
you know

00:14:40,320 --> 00:14:45,760
android can for whatever reason spend

00:14:43,920 --> 00:14:48,480
ten or

00:14:45,760 --> 00:14:49,440
ten ten for for example ten seconds just

00:14:48,480 --> 00:14:52,560
scanning they're

00:14:49,440 --> 00:14:53,360
they're uh when you when you open your

00:14:52,560 --> 00:14:55,920
phone up

00:14:53,360 --> 00:14:56,720
and you look for a lifeline network in

00:14:55,920 --> 00:14:58,959
android if

00:14:56,720 --> 00:15:00,240
you imagine it's just issuing a constant

00:14:58,959 --> 00:15:02,959
scan request

00:15:00,240 --> 00:15:03,279
constantly scanning constantly scanning

00:15:02,959 --> 00:15:07,120
and

00:15:03,279 --> 00:15:10,000
uh for for roaming around between aps

00:15:07,120 --> 00:15:11,839
it also does the same thing in contrast

00:15:10,000 --> 00:15:12,480
to the experience you have on your

00:15:11,839 --> 00:15:15,279
desktop

00:15:12,480 --> 00:15:17,199
or with your laptop which is you connect

00:15:15,279 --> 00:15:18,079
to you you scan once you connect to an

00:15:17,199 --> 00:15:21,199
ap

00:15:18,079 --> 00:15:26,000
and unless the the link drops

00:15:21,199 --> 00:15:28,720
you never scan again um so

00:15:26,000 --> 00:15:30,880
that's debian and android just just in

00:15:28,720 --> 00:15:34,959
contrast that's my experience of it

00:15:30,880 --> 00:15:37,759
uh wcn 36xx the upstream driver has

00:15:34,959 --> 00:15:38,560
three separate methods of doing a weekly

00:15:37,759 --> 00:15:41,519
scan

00:15:38,560 --> 00:15:43,839
it has a software scan which was uh

00:15:41,519 --> 00:15:47,360
already supported in upstream

00:15:43,839 --> 00:15:49,360
and is the reference for what we have

00:15:47,360 --> 00:15:50,880
from downstream so downstream actually

00:15:49,360 --> 00:15:53,440
does its scan

00:15:50,880 --> 00:15:54,720
we have a very nice hardware assisted

00:15:53,440 --> 00:15:57,600
scan

00:15:54,720 --> 00:16:00,240
um unfortunately that we've only ever

00:15:57,600 --> 00:16:02,959
made that work in the 2.4 gigahertz band

00:16:00,240 --> 00:16:04,480
we've never seen that work on five

00:16:02,959 --> 00:16:08,560
gigahertz and then we have

00:16:04,480 --> 00:16:10,399
hardware batch scan which is a uh

00:16:08,560 --> 00:16:12,720
you know kind of an asynchronous scan

00:16:10,399 --> 00:16:15,680
that runs and then delivers results

00:16:12,720 --> 00:16:16,399
uh which is untested and unimplemented

00:16:15,680 --> 00:16:18,399
so

00:16:16,399 --> 00:16:20,480
again we don't know if it will work on

00:16:18,399 --> 00:16:23,920
the five gigahertz band

00:16:20,480 --> 00:16:26,160
but um if i if i find two months

00:16:23,920 --> 00:16:29,120
of my spare time i will definitely have

00:16:26,160 --> 00:16:32,639
a go at getting that to work because

00:16:29,120 --> 00:16:35,360
the software scan is slow

00:16:32,639 --> 00:16:37,600
and uh eats time and it's really not the

00:16:35,360 --> 00:16:41,120
way you want to do things so

00:16:37,600 --> 00:16:41,600
that's just uh that's just scanning for

00:16:41,120 --> 00:16:43,680
you

00:16:41,600 --> 00:16:45,680
uh bluetooth in contrast just works it

00:16:43,680 --> 00:16:48,959
was a very easy experience

00:16:45,680 --> 00:16:52,000
um all of the upstream work uh for

00:16:48,959 --> 00:16:54,639
wcn 3620 uh

00:16:52,000 --> 00:16:55,440
just worked it's a credit to whoever did

00:16:54,639 --> 00:16:58,720
it

00:16:55,440 --> 00:17:00,800
um fair play to you

00:16:58,720 --> 00:17:02,480
uh thanks very much for your hard work

00:17:00,800 --> 00:17:05,600
it was a total no up

00:17:02,480 --> 00:17:09,360
for me and in terms of results

00:17:05,600 --> 00:17:12,400
so the wcn 3680

00:17:09,360 --> 00:17:13,439
we can get onto the uh correct five

00:17:12,400 --> 00:17:17,199
gigahertz

00:17:13,439 --> 00:17:21,120
uh 80 megahertz uh mcs 9

00:17:17,199 --> 00:17:23,760
um uh connection to the ap

00:17:21,120 --> 00:17:26,240
we're only getting about 130 megabits

00:17:23,760 --> 00:17:29,039
instead of the 230 megabits

00:17:26,240 --> 00:17:29,440
uh i don't know why um so we're getting

00:17:29,039 --> 00:17:33,360
about

00:17:29,440 --> 00:17:36,240
twice the speed of the um

00:17:33,360 --> 00:17:38,000
36 20 actually over twice the speed

00:17:36,240 --> 00:17:40,640
maybe three times the speed

00:17:38,000 --> 00:17:42,480
two and a half times the speed and so

00:17:40,640 --> 00:17:43,679
it's a definite improvement in terms of

00:17:42,480 --> 00:17:46,000
throughput

00:17:43,679 --> 00:17:46,799
but uh that you know there's definitely

00:17:46,000 --> 00:17:48,559
a

00:17:46,799 --> 00:17:50,880
a large gap that needs to be filled

00:17:48,559 --> 00:17:53,200
there uh suspend resume

00:17:50,880 --> 00:17:55,120
on the other hand works and appears to

00:17:53,200 --> 00:17:58,240
work uh very well

00:17:55,120 --> 00:18:01,280
um and the good news is for 3620

00:17:58,240 --> 00:18:04,799
suspend resume also works there uh

00:18:01,280 --> 00:18:07,919
as does the uh ipv4 are

00:18:04,799 --> 00:18:11,280
look up in the ns6 the

00:18:07,919 --> 00:18:13,440
equivalent at what we call lowland

00:18:11,280 --> 00:18:16,960
waitron wlan

00:18:13,440 --> 00:18:18,880
lowland since cooler um so it's

00:18:16,960 --> 00:18:20,000
it's it's the the work that we did on

00:18:18,880 --> 00:18:24,320
00:18:20,000 --> 00:18:28,400
is also beneficial to wcn 3620

00:18:24,320 --> 00:18:30,080
and 3660 uh of course to do suspend and

00:18:28,400 --> 00:18:32,240
resume you do need

00:18:30,080 --> 00:18:33,840
additional patches to to to do it

00:18:32,240 --> 00:18:34,880
properly you need additional patches for

00:18:33,840 --> 00:18:38,080
the car

00:18:34,880 --> 00:18:40,960
uh because the the low power mode

00:18:38,080 --> 00:18:41,600
and the relevant chipsets isn't isn't

00:18:40,960 --> 00:18:44,799
upstream

00:18:41,600 --> 00:18:48,480
but that's that's neither here there

00:18:44,799 --> 00:18:50,080
um so yeah uh um

00:18:48,480 --> 00:18:51,919
draw your attention to the graphic here

00:18:50,080 --> 00:18:53,280
you can see i'm not making it all up

00:18:51,919 --> 00:18:55,840
this is my

00:18:53,280 --> 00:18:57,520
this is my square device uh with a

00:18:55,840 --> 00:19:00,880
fairly recent kernel

00:18:57,520 --> 00:19:04,640
um um you know five gigahertz

00:19:00,880 --> 00:19:07,760
at 80 megahertz so that's uh

00:19:04,640 --> 00:19:11,440
probably not ncs9 there it's you know in

00:19:07,760 --> 00:19:13,120
in some quiescent mode um

00:19:11,440 --> 00:19:14,960
next steps though for me would

00:19:13,120 --> 00:19:18,320
definitely be thermal support

00:19:14,960 --> 00:19:21,760
and maybe some of the reason that the

00:19:18,320 --> 00:19:23,200
a bit slower than on downstream is

00:19:21,760 --> 00:19:25,679
we haven't implemented any of the

00:19:23,200 --> 00:19:26,480
thermal support so whatever the default

00:19:25,679 --> 00:19:29,120
thermal mode

00:19:26,480 --> 00:19:30,799
is whatever the default thermal mode is

00:19:29,120 --> 00:19:34,640
and presumably we can

00:19:30,799 --> 00:19:36,799
we can tell it to go faster um

00:19:34,640 --> 00:19:38,640
a really interesting thing is called uh

00:19:36,799 --> 00:19:40,960
radar detection so

00:19:38,640 --> 00:19:42,720
if you are an ap it is your

00:19:40,960 --> 00:19:45,760
responsibility to

00:19:42,720 --> 00:19:46,960
detect when there is radar on your on

00:19:45,760 --> 00:19:50,080
your band

00:19:46,960 --> 00:19:50,720
and switch all of your client devices to

00:19:50,080 --> 00:19:53,039
uh

00:19:50,720 --> 00:19:54,640
to another round and to do radar

00:19:53,039 --> 00:19:55,520
detection i would have to go up to the

00:19:54,640 --> 00:19:58,160
airport

00:19:55,520 --> 00:20:00,160
and sit there with the with the thing in

00:19:58,160 --> 00:20:03,120
my hand pushing buttons beside the

00:20:00,160 --> 00:20:05,200
radar dish i'm sure securely without no

00:20:03,120 --> 00:20:08,159
problem with that

00:20:05,200 --> 00:20:08,960
wi-fi direct nobody really wants that

00:20:08,159 --> 00:20:10,880
feature

00:20:08,960 --> 00:20:13,120
i don't think that works too well on

00:20:10,880 --> 00:20:13,520
upstream or how well it supports it but

00:20:13,120 --> 00:20:17,039
it's

00:20:13,520 --> 00:20:20,080
it's certainly interesting um and

00:20:17,039 --> 00:20:23,039
wi-fi batch scanning

00:20:20,080 --> 00:20:23,840
so i think i have to end the session now

00:20:23,039 --> 00:20:26,400
um

00:20:23,840 --> 00:20:27,760
thanks for bearing with me there at the

00:20:26,400 --> 00:20:31,760
start

00:20:27,760 --> 00:20:33,919
um and i'm available to take uh

00:20:31,760 --> 00:20:34,960
any questions you might have in the in

00:20:33,919 --> 00:20:37,919
the relevant

00:20:34,960 --> 00:20:37,919

YouTube URL: https://www.youtube.com/watch?v=cz4yyf_mcz0


