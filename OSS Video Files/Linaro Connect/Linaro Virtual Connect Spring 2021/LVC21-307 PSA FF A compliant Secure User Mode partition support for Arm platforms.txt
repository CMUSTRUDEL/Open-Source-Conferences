Title: LVC21-307 PSA FF A compliant Secure User Mode partition support for Arm platforms
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Platform Security Architecture Firmware Framework For A Profile (PSA FF-A) specification defines an architecture that allows standardized communication among various software stacks, running across Normal and Secure world. FF-A defines the architecture of a Secure Partition Manager (SPM) that manages this standardized communication. It is split into two components – the SPM-Core (SPMC) and SPM-Dispatcher (SPMD). SPMD is part of the secure monitor executing at EL3. But SPMC, based on the hardware and architectural requirements, can exist in either EL3, S-EL2 or S-EL1.

This talk focuses on secure software architecture for Arm platforms that support the use of FF-A defined SPMD and SPMC components at EL3 and secure partitions at secure user mode (S-EL0). This software architecture is targeted to be deployed on Arm platforms that do not support virtualization in the secure world. Typical uses of such a software architecture include enabling support for UEFI secure boot and handling of secure platform hardware errors. There has been significant progress in this direction and multiple software components including EDK II, StandaloneMM and Trusted firmware have been enabled to support the FF-A defined software architecture. This talk uses Arm’s Neoverse reference design platform as an example to demonstrate the deployment of this software architecture and typical uses.

Key objectives of this talk are to present the details on deploying this software architecture on Arm platforms and discuss other possible secure partition scenarios with the audience.
Captions: 
	00:00:01,839 --> 00:00:07,200
hello

00:00:03,199 --> 00:00:07,200
and uh welcome everyone

00:00:08,639 --> 00:00:16,080
in this session i am going to talk about

00:00:11,679 --> 00:00:19,439
ffa compliant secure user mode

00:00:16,080 --> 00:00:22,640
partition where the partition manager

00:00:19,439 --> 00:00:26,240
exists at el3

00:00:22,640 --> 00:00:29,599
in the past there has been talks and

00:00:26,240 --> 00:00:32,600
significant amount of work around

00:00:29,599 --> 00:00:34,480
having secure partition manager at

00:00:32,600 --> 00:00:38,719
securial2

00:00:34,480 --> 00:00:41,840
or at uh securial one

00:00:38,719 --> 00:00:45,120
this talk is focused more on

00:00:41,840 --> 00:00:50,160
introducing the ffa compliant

00:00:45,120 --> 00:00:50,160
secure partition manager at el3

00:00:50,480 --> 00:00:57,280
former framework architecture for

00:00:53,760 --> 00:01:01,520
arm v8 platforms also known as

00:00:57,280 --> 00:01:05,280
ffa defines a spec

00:01:01,520 --> 00:01:12,080
which standardizes the communication

00:01:05,280 --> 00:01:16,080
among normal world and secured images

00:01:12,080 --> 00:01:19,439
in this talk we will cover

00:01:16,080 --> 00:01:21,600
the objectives behind this proposed

00:01:19,439 --> 00:01:24,960
model

00:01:21,600 --> 00:01:30,000
the existing solution

00:01:24,960 --> 00:01:30,000
some key features about ffa

00:01:30,880 --> 00:01:37,920
in the proposed model and in brief

00:01:34,799 --> 00:01:41,119
how it works

00:01:37,920 --> 00:01:44,159
i scienta will present the

00:01:41,119 --> 00:01:47,200
topic and my colleague

00:01:44,159 --> 00:01:51,920
aditya will be present to

00:01:47,200 --> 00:01:51,920
take questions post presentation

00:01:53,360 --> 00:02:00,240
the key objective uh we have

00:01:57,040 --> 00:02:03,360
for this implementation is to have an

00:02:00,240 --> 00:02:06,399
out of box uh secure software solution

00:02:03,360 --> 00:02:09,840
for arm platforms that

00:02:06,399 --> 00:02:13,280
do not support security 2 which is like

00:02:09,840 --> 00:02:16,480
a free 8.4 version

00:02:13,280 --> 00:02:19,680
or do not deploy any secure hypervisor

00:02:16,480 --> 00:02:22,800
at security

00:02:19,680 --> 00:02:24,480
also the platforms that do not deploy a

00:02:22,800 --> 00:02:28,080
secure os

00:02:24,480 --> 00:02:28,080
at the security l1

00:02:28,160 --> 00:02:32,879
overall objective is to have a secure

00:02:31,040 --> 00:02:35,360
software solution

00:02:32,879 --> 00:02:39,280
following former framework architecture

00:02:35,360 --> 00:02:39,280
for arm v8 platforms

00:02:41,120 --> 00:02:46,160
at present spm mm is the existing

00:02:44,480 --> 00:02:50,560
solution

00:02:46,160 --> 00:02:51,440
where stm acts as the secure partition

00:02:50,560 --> 00:02:55,599
manager

00:02:51,440 --> 00:03:00,000
and it's a it is part of trusted former

00:02:55,599 --> 00:03:02,879
at el3 html

00:03:00,000 --> 00:03:03,519
manages the context of secure partition

00:03:02,879 --> 00:03:06,239
and

00:03:03,519 --> 00:03:08,879
communication among normal world and the

00:03:06,239 --> 00:03:13,920
secured images

00:03:08,879 --> 00:03:18,640
standalone mm acts as secure partition

00:03:13,920 --> 00:03:20,560
which executes at securil0 on the normal

00:03:18,640 --> 00:03:23,599
world side

00:03:20,560 --> 00:03:26,319
there is mm communicate which is part of

00:03:23,599 --> 00:03:26,319
predicate 2

00:03:26,720 --> 00:03:30,080
and the normal world former and the

00:03:28,799 --> 00:03:33,440
secure partition

00:03:30,080 --> 00:03:36,879
communicate using

00:03:33,440 --> 00:03:36,879
mm interface ids

00:03:38,799 --> 00:03:44,840
the current solution

00:03:42,000 --> 00:03:47,840
looks like how it is shown in this

00:03:44,840 --> 00:03:47,840
picture

00:03:51,920 --> 00:03:59,599
the firmware framework for arm v8

00:03:55,760 --> 00:04:03,680
platforms so candidate is the

00:03:59,599 --> 00:04:08,319
communication among normal world and

00:04:03,680 --> 00:04:11,840
secured images the spec

00:04:08,319 --> 00:04:14,879
defines a partition manager concept

00:04:11,840 --> 00:04:16,479
which manages the resources for all

00:04:14,879 --> 00:04:19,840
partitions

00:04:16,479 --> 00:04:24,479
and ensures inter-partition isolation

00:04:19,840 --> 00:04:28,479
at runtime this is also a concept of

00:04:24,479 --> 00:04:31,840
partition manifest which is

00:04:28,479 --> 00:04:34,800
to hold all the configuration data

00:04:31,840 --> 00:04:36,800
of the partition and it's an

00:04:34,800 --> 00:04:40,639
implementation defined method

00:04:36,800 --> 00:04:42,800
it could be of any format

00:04:40,639 --> 00:04:43,919
one of the example could be a device

00:04:42,800 --> 00:04:46,800
tree

00:04:43,919 --> 00:04:47,440
where partition specific configuration

00:04:46,800 --> 00:04:50,720
details

00:04:47,440 --> 00:04:50,720
can be captured

00:04:50,960 --> 00:04:55,680
there is a list of extensive application

00:04:53,440 --> 00:04:59,360
binary interfaces

00:04:55,680 --> 00:05:02,479
for various purposes

00:04:59,360 --> 00:05:05,360
such as discovery of artisans

00:05:02,479 --> 00:05:07,199
direct indirect message communications

00:05:05,360 --> 00:05:11,680
memory management operations

00:05:07,199 --> 00:05:14,240
and even cpu cycle management operations

00:05:11,680 --> 00:05:16,639
these are some of the key features

00:05:14,240 --> 00:05:19,440
defined by the

00:05:16,639 --> 00:05:19,440
affected spec

00:05:20,320 --> 00:05:26,080
going into bit more detail about the

00:05:23,039 --> 00:05:26,080
partition manager

00:05:26,560 --> 00:05:31,120
if spec splits the secure partition

00:05:29,600 --> 00:05:34,400
manager

00:05:31,120 --> 00:05:38,240
into two components one is

00:05:34,400 --> 00:05:41,360
dispatcher known as spmd

00:05:38,240 --> 00:05:41,680
and another is the core which is known

00:05:41,360 --> 00:05:45,759
as

00:05:41,680 --> 00:05:48,960
spmc spmc is the component

00:05:45,759 --> 00:05:52,080
which initializes and manages

00:05:48,960 --> 00:05:56,319
the partition resources and ensure

00:05:52,080 --> 00:06:01,759
all the isolation amongst them

00:05:56,319 --> 00:06:04,840
and if the face pack allows spmc

00:06:01,759 --> 00:06:06,880
to be included at any of the exception

00:06:04,840 --> 00:06:11,600
level it could be

00:06:06,880 --> 00:06:14,560
either at ent3 or at security l1

00:06:11,600 --> 00:06:16,800
or it could be at securill 2 on

00:06:14,560 --> 00:06:20,080
platforms which support

00:06:16,800 --> 00:06:23,840
security so there

00:06:20,080 --> 00:06:27,840
has been work

00:06:23,840 --> 00:06:30,720
on the front of having secured

00:06:27,840 --> 00:06:31,680
to secure partition manager all secret

00:06:30,720 --> 00:06:34,800
partition manager

00:06:31,680 --> 00:06:37,520
at securial one and

00:06:34,800 --> 00:06:38,880
but this talk is more focused on

00:06:37,520 --> 00:06:42,080
introducing a model

00:06:38,880 --> 00:06:48,560
where stmd and spmc

00:06:42,080 --> 00:06:52,240
both coexist at l3

00:06:48,560 --> 00:06:55,199
and this choice of including the

00:06:52,240 --> 00:06:55,599
spmc at particular exception level is

00:06:55,199 --> 00:06:59,440
done

00:06:55,599 --> 00:07:02,960
based on the platform architecture

00:06:59,440 --> 00:07:06,880
and the project requirement

00:07:02,960 --> 00:07:10,960
so the model with spmd and spmc

00:07:06,880 --> 00:07:16,160
both at el3 looks similar to

00:07:10,960 --> 00:07:19,280
this how it's shown in this picture

00:07:16,160 --> 00:07:22,720
proposed model with

00:07:19,280 --> 00:07:24,880
users secure partition and hp mc and

00:07:22,720 --> 00:07:28,720
spmd at tl3

00:07:24,880 --> 00:07:31,440
looks how it's shown in this picture

00:07:28,720 --> 00:07:32,720
where sp md and spmc both are part of

00:07:31,440 --> 00:07:37,680
trusted former

00:07:32,720 --> 00:07:40,960
and are at el3 standalone mm

00:07:37,680 --> 00:07:44,319
is the secure partition and executes at

00:07:40,960 --> 00:07:47,840
secure l0 layer

00:07:44,319 --> 00:07:51,039
is sandbox between standalone mm

00:07:47,840 --> 00:07:52,479
and trusted formula which is a bare

00:07:51,039 --> 00:07:54,560
minimum code

00:07:52,479 --> 00:07:56,479
and just helps in changing the

00:07:54,560 --> 00:07:59,199
expression level

00:07:56,479 --> 00:08:00,960
on the normal world side there is mm

00:07:59,199 --> 00:08:05,039
communicate which is part of

00:08:00,960 --> 00:08:08,319
ddk2 as part of

00:08:05,039 --> 00:08:11,599
this implementation

00:08:08,319 --> 00:08:13,919
ppmd at el3

00:08:11,599 --> 00:08:15,599
has been modified and on the additive

00:08:13,919 --> 00:08:20,879
side mm communicate

00:08:15,599 --> 00:08:20,879
and standalone mm modules are modified

00:08:21,120 --> 00:08:28,240
spmc module has been introduced at tl3

00:08:24,879 --> 00:08:31,360
part of trusted former and also for

00:08:28,240 --> 00:08:34,080
better code reusability spm

00:08:31,360 --> 00:08:35,839
mm code has been modified and

00:08:34,080 --> 00:08:39,120
reorganized

00:08:35,839 --> 00:08:40,399
so that some part of common code can be

00:08:39,120 --> 00:08:45,120
used by both

00:08:40,399 --> 00:08:45,120
spm mm and hpmc

00:08:49,519 --> 00:08:53,680
going into bit more details about the

00:08:52,320 --> 00:08:59,680
ffa changes

00:08:53,680 --> 00:08:59,680
on the adk-2 mm communicate

00:09:00,320 --> 00:09:07,040
is the module exist at tdk2

00:09:03,920 --> 00:09:09,519
which allows normal world

00:09:07,040 --> 00:09:10,320
components to communicate with the cq

00:09:09,519 --> 00:09:13,680
world

00:09:10,320 --> 00:09:16,880
by aspect defined smcs

00:09:13,680 --> 00:09:18,080
tandalone mm which is loaded by el

00:09:16,880 --> 00:09:21,519
tradformer

00:09:18,080 --> 00:09:22,399
executes as secure partition in securial

00:09:21,519 --> 00:09:25,920
zero

00:09:22,399 --> 00:09:29,200
on arm axis default platforms

00:09:25,920 --> 00:09:32,480
so the changes in standalone mm

00:09:29,200 --> 00:09:36,640
and mm communicate for ffa

00:09:32,480 --> 00:09:39,920
support are similar in nature

00:09:36,640 --> 00:09:41,920
so if it is support for

00:09:39,920 --> 00:09:44,000
handling direct message communication

00:09:41,920 --> 00:09:47,120
and spm version checking

00:09:44,000 --> 00:09:50,640
error responses have been added

00:09:47,120 --> 00:09:54,320
in both and places has been a

00:09:50,640 --> 00:09:56,959
build time option introduced for user

00:09:54,320 --> 00:09:56,959
to use

00:09:57,519 --> 00:10:02,320
either existing mm interface all the ffa

00:10:01,279 --> 00:10:04,800
interface

00:10:02,320 --> 00:10:08,320
for communication between normal world

00:10:04,800 --> 00:10:08,320
and the secure world images

00:10:11,760 --> 00:10:18,160
on some more details about the

00:10:14,959 --> 00:10:21,839
secure partition manager work

00:10:18,160 --> 00:10:21,839
for this proposed model

00:10:22,320 --> 00:10:29,600
spmd module is the gateway for

00:10:25,839 --> 00:10:33,839
handling any ffa agencies

00:10:29,600 --> 00:10:37,600
either from normal world or secure world

00:10:33,839 --> 00:10:41,200
and it forwards the smc

00:10:37,600 --> 00:10:44,800
request to spmc and since

00:10:41,200 --> 00:10:48,240
spmc co exist at sp

00:10:44,800 --> 00:10:51,920
el3 spmd doesn't need to handle any

00:10:48,240 --> 00:10:54,959
exception level change but it's just a

00:10:51,920 --> 00:10:59,040
spmc module function call

00:10:54,959 --> 00:11:03,279
so far the spmd

00:10:59,040 --> 00:11:06,480
was handling the cases where spmc

00:11:03,279 --> 00:11:09,519
is either at securial 2

00:11:06,480 --> 00:11:13,760
or at securil1

00:11:09,519 --> 00:11:17,600
so under those designs spmd

00:11:13,760 --> 00:11:20,640
had to manage the exception level change

00:11:17,600 --> 00:11:25,279
but but

00:11:20,640 --> 00:11:28,800
after inclusion of spmc at tl3

00:11:25,279 --> 00:11:29,920
and in this model spmd will just have to

00:11:28,800 --> 00:11:33,279
make a

00:11:29,920 --> 00:11:38,160
spmc module specific function called

00:11:33,279 --> 00:11:38,160
for handling the ffa sfcs

00:11:38,399 --> 00:11:45,519
amc is the one which initializes

00:11:41,680 --> 00:11:48,560
and manages secure partitions

00:11:45,519 --> 00:11:49,600
it gathers memorization details prepares

00:11:48,560 --> 00:11:52,560
memory mapping

00:11:49,600 --> 00:11:52,959
and create translation table out of it

00:11:52,560 --> 00:11:55,519
and

00:11:52,959 --> 00:11:57,760
it creates the execution context for

00:11:55,519 --> 00:12:01,600
user partition

00:11:57,760 --> 00:12:02,959
and during handling of ffa request spmc

00:12:01,600 --> 00:12:06,560
does the job of

00:12:02,959 --> 00:12:11,839
saving and restoring execution context

00:12:06,560 --> 00:12:11,839
and jump to respective exception level

00:12:15,680 --> 00:12:24,079
the sp md spmc and secure partitions

00:12:19,680 --> 00:12:27,680
setup routines are

00:12:24,079 --> 00:12:30,959
shown in this picture in both in bit

00:12:27,680 --> 00:12:34,320
detailed way so

00:12:30,959 --> 00:12:37,360
sp md setup routine is the first

00:12:34,320 --> 00:12:40,639
one to kick in it initializes

00:12:37,360 --> 00:12:45,440
the hpmc context array for all

00:12:40,639 --> 00:12:48,959
cores and invokes spmc setup routine

00:12:45,440 --> 00:12:50,720
spmc setup routine invokes the secure

00:12:48,959 --> 00:12:54,000
partition specific

00:12:50,720 --> 00:12:57,040
setup routine secure partition setup

00:12:54,000 --> 00:13:00,160
it will first get the partition specific

00:12:57,040 --> 00:13:00,959
good arguments memories and details and

00:13:00,160 --> 00:13:03,360
create

00:13:00,959 --> 00:13:04,639
memory mapping and translation table out

00:13:03,360 --> 00:13:08,160
of it

00:13:04,639 --> 00:13:11,040
and it creates prepares the cpu context

00:13:08,160 --> 00:13:12,720
for standalone mm which is the secure

00:13:11,040 --> 00:13:16,399
part user secure protection

00:13:12,720 --> 00:13:18,240
in this case one setup

00:13:16,399 --> 00:13:20,160
of the secure partition and the

00:13:18,240 --> 00:13:22,720
preparation has been

00:13:20,160 --> 00:13:24,720
completed it will return back to the

00:13:22,720 --> 00:13:28,000
spmc setup routine

00:13:24,720 --> 00:13:31,040
and there it will register a

00:13:28,000 --> 00:13:34,959
secure partition in it routine and

00:13:31,040 --> 00:13:34,959
returns back to the spm

00:13:38,480 --> 00:13:43,680
and once the secure partition init

00:13:41,279 --> 00:13:43,680
routine

00:13:43,760 --> 00:13:52,880
is invoked it will try to

00:13:47,360 --> 00:13:52,880
make a jump to the user level

00:13:53,040 --> 00:13:59,199
by making a function call and where the

00:13:56,079 --> 00:14:02,399
runtime el3 context will be

00:13:59,199 --> 00:14:06,079
saved and an exit will be made

00:14:02,399 --> 00:14:09,360
to the secure user mode

00:14:06,079 --> 00:14:12,399
so here the standalone mm

00:14:09,360 --> 00:14:16,240
init routine will be starting and

00:14:12,399 --> 00:14:17,519
as and as the first step the boot

00:14:16,240 --> 00:14:20,720
arguments

00:14:17,519 --> 00:14:23,519
will be passed and

00:14:20,720 --> 00:14:24,720
it will fetch the booting structure out

00:14:23,519 --> 00:14:28,880
of that

00:14:24,720 --> 00:14:32,079
and as part of peak of image

00:14:28,880 --> 00:14:35,120
it will have a requirement of

00:14:32,079 --> 00:14:36,000
getting or changing the memory region

00:14:35,120 --> 00:14:38,959
attributes

00:14:36,000 --> 00:14:38,959
at boot time

00:14:39,360 --> 00:14:47,440
or doing so it hdmi

00:14:43,279 --> 00:14:51,199
will make ffa direct message

00:14:47,440 --> 00:14:52,160
uh abi request to the secure partition

00:14:51,199 --> 00:14:56,079
manager

00:14:52,160 --> 00:14:59,600
which has the authority of uh

00:14:56,079 --> 00:15:03,199
manipulating the memory religion

00:14:59,600 --> 00:15:07,199
views so after receiving

00:15:03,199 --> 00:15:12,160
the f5 direct message

00:15:07,199 --> 00:15:15,360
uh request stmd

00:15:12,160 --> 00:15:16,959
will forward it to the spmc which will

00:15:15,360 --> 00:15:20,560
look into the request

00:15:16,959 --> 00:15:23,600
and do uh handle

00:15:20,560 --> 00:15:26,720
uh accordingly it may

00:15:23,600 --> 00:15:27,519
it may get the memories in attribute

00:15:26,720 --> 00:15:31,199
details

00:15:27,519 --> 00:15:33,199
or it can change the memories and

00:15:31,199 --> 00:15:36,639
attributes

00:15:33,199 --> 00:15:40,639
on on completing the function

00:15:36,639 --> 00:15:43,920
it will return back and it will

00:15:40,639 --> 00:15:47,440
return back to the secure partition

00:15:43,920 --> 00:15:50,880
by responding to ffa

00:15:47,440 --> 00:15:50,880
direct response abi

00:15:50,959 --> 00:15:57,360
so this if a direct message request and

00:15:54,240 --> 00:15:57,360
the direct response

00:15:57,519 --> 00:16:05,279
require apis this

00:16:01,360 --> 00:16:09,040
way of communication will

00:16:05,279 --> 00:16:12,240
iterate few number of times

00:16:09,040 --> 00:16:16,800
as part of the boot process so

00:16:12,240 --> 00:16:18,880
and once the html booting process is

00:16:16,800 --> 00:16:22,160
complete successfully

00:16:18,880 --> 00:16:25,839
it responds back to the

00:16:22,160 --> 00:16:29,440
secure partition manager by using the

00:16:25,839 --> 00:16:32,959
ffa direct response api

00:16:29,440 --> 00:16:36,000
spmd will receive the

00:16:32,959 --> 00:16:39,600
direct response request and it will

00:16:36,000 --> 00:16:42,959
forward it to the spmc on receiving the

00:16:39,600 --> 00:16:43,600
response spmc will understand the secure

00:16:42,959 --> 00:16:47,600
partition

00:16:43,600 --> 00:16:51,600
voting has been completed successfully

00:16:47,600 --> 00:16:54,480
and it will try to save the

00:16:51,600 --> 00:16:55,519
secure partition context and it will

00:16:54,480 --> 00:16:59,920
restore back

00:16:55,519 --> 00:17:04,240
the runtime el3 context it was

00:16:59,920 --> 00:17:04,880
saved before starting the secure

00:17:04,240 --> 00:17:08,240
partition

00:17:04,880 --> 00:17:12,000
init routine so

00:17:08,240 --> 00:17:14,160
this way the spmd spmc

00:17:12,000 --> 00:17:15,679
and secure partition setup routine

00:17:14,160 --> 00:17:20,240
completes

00:17:15,679 --> 00:17:20,240
by using ffa apis

00:17:27,039 --> 00:17:34,480
ufi secure boot is one

00:17:30,799 --> 00:17:39,600
use case which is covered

00:17:34,480 --> 00:17:39,600
by using this proposed model

00:17:39,760 --> 00:17:47,200
so on the normal world side there is

00:17:43,760 --> 00:17:51,600
as part of adk2 it has a

00:17:47,200 --> 00:17:54,720
feature of secure boot if enabled

00:17:51,600 --> 00:17:59,280
the secure boot framework

00:17:54,720 --> 00:18:03,039
performs a lot of secure boot related

00:17:59,280 --> 00:18:06,480
jobs and as part of that

00:18:03,039 --> 00:18:09,919
secure boot process

00:18:06,480 --> 00:18:13,440
it requests for secure keys

00:18:09,919 --> 00:18:16,480
through mm communicate using ffa direct

00:18:13,440 --> 00:18:16,480
messaging apis

00:18:17,679 --> 00:18:22,640
after this direct messaging abi request

00:18:20,640 --> 00:18:25,120
has been placed

00:18:22,640 --> 00:18:27,039
this pmd module will receive the effect

00:18:25,120 --> 00:18:30,160
direct message apis

00:18:27,039 --> 00:18:33,280
from non-secure world and

00:18:30,160 --> 00:18:34,559
forwards the request to the partition

00:18:33,280 --> 00:18:37,760
manager code which is

00:18:34,559 --> 00:18:40,080
spmc if the empty module

00:18:37,760 --> 00:18:40,799
saves the normal world context and

00:18:40,080 --> 00:18:43,840
prepare

00:18:40,799 --> 00:18:46,799
the payload for

00:18:43,840 --> 00:18:48,720
ffa payload for jumping into the secure

00:18:46,799 --> 00:18:51,440
user partition

00:18:48,720 --> 00:18:53,200
and it prepares the context for jumping

00:18:51,440 --> 00:18:56,400
into the

00:18:53,200 --> 00:18:59,520
secure partition

00:18:56,400 --> 00:19:02,720
once the change of exception level is

00:18:59,520 --> 00:19:02,720
done and uh

00:19:02,799 --> 00:19:09,360
the request reaches secure partition

00:19:06,000 --> 00:19:14,400
which is standalone mm uh in this

00:19:09,360 --> 00:19:17,679
model so the sql partition

00:19:14,400 --> 00:19:21,200
also has access to the secure storage

00:19:17,679 --> 00:19:25,039
so the platform uh while this

00:19:21,200 --> 00:19:29,679
uh use case has been verified

00:19:25,039 --> 00:19:29,679
nor class acts as the secure storage

00:19:29,919 --> 00:19:37,600
and the secure partition has access

00:19:33,039 --> 00:19:39,840
to the secure storage so as part of its

00:19:37,600 --> 00:19:40,960
booting process it initializes the

00:19:39,840 --> 00:19:44,240
interface

00:19:40,960 --> 00:19:47,039
for accessing the secure storage

00:19:44,240 --> 00:19:48,000
after receiving the ffa direct message

00:19:47,039 --> 00:19:50,880
request for

00:19:48,000 --> 00:19:52,320
secure key information it will access

00:19:50,880 --> 00:19:57,039
the secure storage

00:19:52,320 --> 00:19:57,039
and get the key information

00:19:57,200 --> 00:20:00,400
before receiving the key information it

00:19:59,919 --> 00:20:04,559
will

00:20:00,400 --> 00:20:07,600
copy into the ffa payload buffer

00:20:04,559 --> 00:20:11,200
and respond back using the

00:20:07,600 --> 00:20:16,000
direct response api

00:20:11,200 --> 00:20:19,039
so after the f5 direct response api

00:20:16,000 --> 00:20:20,559
received by spmd it will forward it to

00:20:19,039 --> 00:20:23,679
the spmc

00:20:20,559 --> 00:20:26,799
and spmc will

00:20:23,679 --> 00:20:30,000
pass on the payload message

00:20:26,799 --> 00:20:33,440
and restore the normal world context

00:20:30,000 --> 00:20:37,200
and this this

00:20:33,440 --> 00:20:40,799
the normal world routine

00:20:37,200 --> 00:20:44,320
in the mm communicate and edk-2

00:20:40,799 --> 00:20:47,679
will resume the way of

00:20:44,320 --> 00:20:51,280
communication between normal world

00:20:47,679 --> 00:20:54,320
and secure world for getting the

00:20:51,280 --> 00:20:56,320
secure key information will continue for

00:20:54,320 --> 00:20:59,440
number of iterations

00:20:56,320 --> 00:21:00,080
as part of the secure boot process and

00:20:59,440 --> 00:21:03,840
this will

00:21:00,080 --> 00:21:03,840
use the ffa interface

00:21:04,240 --> 00:21:11,200
so by this method the

00:21:07,360 --> 00:21:11,200
efi secure boot will

00:21:11,360 --> 00:21:14,640
complete and

00:21:14,960 --> 00:21:20,799
and it will use the ffa avis

00:21:18,000 --> 00:21:20,799
in that process

00:21:22,880 --> 00:21:28,559
on current status the standalone mm ffa

00:21:27,039 --> 00:21:31,919
interface support

00:21:28,559 --> 00:21:32,640
has been already added by upstream

00:21:31,919 --> 00:21:35,919
community

00:21:32,640 --> 00:21:38,720
and it's merged as a

00:21:35,919 --> 00:21:40,960
uh in the education uh upgrading code

00:21:38,720 --> 00:21:40,960
base

00:21:41,200 --> 00:21:48,400
support uh for

00:21:44,400 --> 00:21:52,640
uh is added in the mm communicate

00:21:48,400 --> 00:21:52,640
for interaction from normal one

00:21:52,799 --> 00:21:56,640
interested firmware changes are made in

00:21:55,440 --> 00:22:00,320
hp md

00:21:56,640 --> 00:22:03,520
and spm mm

00:22:00,320 --> 00:22:08,320
to accommodate a new

00:22:03,520 --> 00:22:08,320
newly introduced spmc model

00:22:08,480 --> 00:22:12,480
at present only direct messaging abi's

00:22:11,280 --> 00:22:15,120
are implemented

00:22:12,480 --> 00:22:18,960
for communication between normal world

00:22:15,120 --> 00:22:18,960
and the secure world partitions

00:22:19,200 --> 00:22:26,240
ufi secure boot is one key user scenario

00:22:23,200 --> 00:22:30,080
which is covered with current

00:22:26,240 --> 00:22:33,840
implementation next

00:22:30,080 --> 00:22:37,120
very immediate objective is to get

00:22:33,840 --> 00:22:42,159
all the changes and solutions merged

00:22:37,120 --> 00:22:42,159
into the respective upstream code bases

00:22:42,400 --> 00:22:46,720
on future opportunity

00:22:49,360 --> 00:22:54,640
the effort will be to engage with the

00:22:52,840 --> 00:22:57,679
community and

00:22:54,640 --> 00:23:01,440
encourage on covering larger number of

00:22:57,679 --> 00:23:08,080
use cases and thus

00:23:01,440 --> 00:23:12,320
supporting more number of apis

00:23:08,080 --> 00:23:17,679
yes that would be all we had

00:23:12,320 --> 00:23:17,679

YouTube URL: https://www.youtube.com/watch?v=wmkXR0fA6x4


