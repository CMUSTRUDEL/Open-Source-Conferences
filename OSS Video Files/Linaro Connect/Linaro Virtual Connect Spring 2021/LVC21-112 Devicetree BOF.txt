Title: LVC21-112 Devicetree BOF
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Devicetree remains an important part of the boot architecture for many ARM SOCs. 

In this Birds of a Feather session, attendees are encouraged to ask questions or suggest topics.  What problem areas do you have? What are your suggestions for improvement to the Devicetree state of the art?

The speakers from the Devicetree State of the Union session will be available to help guide the discussion.
Captions: 
	00:00:00,000 --> 00:00:04,080
enough if you just stop your video

00:00:08,639 --> 00:00:16,240
hi everybody hello

00:00:12,960 --> 00:00:19,359
i don't are we public

00:00:16,240 --> 00:00:19,359
we are live bill yeah

00:00:19,600 --> 00:00:28,000
so i'm just so i'm looking for the

00:00:23,279 --> 00:00:32,160
session but there's a delay so okay so

00:00:28,000 --> 00:00:35,200
we have a number of questions canned but

00:00:32,160 --> 00:00:37,920
we'd really like to take new questions

00:00:35,200 --> 00:00:39,120
um so if you could put any of those in

00:00:37,920 --> 00:00:44,559
the chat we

00:00:39,120 --> 00:00:48,800
it would be good um

00:00:44,559 --> 00:00:50,640
so i see questions on whether

00:00:48,800 --> 00:00:52,640
pocketbeagle is upstream but i don't

00:00:50,640 --> 00:00:53,600
think that's uh a question for this

00:00:52,640 --> 00:00:56,960
session

00:00:53,600 --> 00:00:59,840
um there was some talk about

00:00:56,960 --> 00:01:00,879
how good it would be for a system device

00:00:59,840 --> 00:01:04,239
tree

00:01:00,879 --> 00:01:07,200
um on things like uh

00:01:04,239 --> 00:01:08,080
ti's am64 that's got lots and lots of

00:01:07,200 --> 00:01:11,680
cores

00:01:08,080 --> 00:01:13,680
i think the stuff that stefano talked

00:01:11,680 --> 00:01:16,000
about and kumar talked about

00:01:13,680 --> 00:01:17,040
marry very nicely together and so that

00:01:16,000 --> 00:01:19,520
that's something that's pretty

00:01:17,040 --> 00:01:19,520
interesting

00:01:23,119 --> 00:01:26,960
yeah so and i think that's that that is

00:01:25,200 --> 00:01:29,280
really one of the big use cases for

00:01:26,960 --> 00:01:30,799
system devices right that you have and

00:01:29,280 --> 00:01:32,479
and from us from a signings point of

00:01:30,799 --> 00:01:34,400
view that's

00:01:32,479 --> 00:01:35,840
why we've been really interested in it

00:01:34,400 --> 00:01:36,720
because we have all these different

00:01:35,840 --> 00:01:38,479
devices

00:01:36,720 --> 00:01:40,560
and then we have the programmable logic

00:01:38,479 --> 00:01:43,600
where people put in their new

00:01:40,560 --> 00:01:46,720
both peripherals and soft cores so new

00:01:43,600 --> 00:01:47,520
cpus just pop up right so we need a way

00:01:46,720 --> 00:01:49,680
to

00:01:47,520 --> 00:01:51,119
to have a flow where where you can have

00:01:49,680 --> 00:01:55,840
one true source

00:01:51,119 --> 00:01:55,840
so it's definitely a good use case yeah

00:01:56,560 --> 00:02:00,320
so if we don't have a question i have a

00:01:59,360 --> 00:02:03,759
question for

00:02:00,320 --> 00:02:04,719
kumar which is so right now you're

00:02:03,759 --> 00:02:08,239
talking about

00:02:04,719 --> 00:02:10,959
um code generation in zephyr

00:02:08,239 --> 00:02:13,200
has there any so but zephyr is also

00:02:10,959 --> 00:02:15,200
being ported to cortex a's and things

00:02:13,200 --> 00:02:18,560
like that that have more space

00:02:15,200 --> 00:02:22,080
is there any talk about doing

00:02:18,560 --> 00:02:24,400
you know as bindings for zephyr so that

00:02:22,080 --> 00:02:25,440
you know it could take a device tree at

00:02:24,400 --> 00:02:27,680
runtime

00:02:25,440 --> 00:02:28,720
yeah there's been some interest uh

00:02:27,680 --> 00:02:30,800
that's been shown

00:02:28,720 --> 00:02:32,800
kind of around that i think there's some

00:02:30,800 --> 00:02:36,160
interest um actually from nxp

00:02:32,800 --> 00:02:38,959
and they've been doing some work around

00:02:36,160 --> 00:02:39,519
using zephyr or with jailhouse on a on a

00:02:38,959 --> 00:02:43,440
cortex

00:02:39,519 --> 00:02:46,879
a i think 53 based soc

00:02:43,440 --> 00:02:49,280
and so i think it's it's still

00:02:46,879 --> 00:02:50,640
i'll call it in in conception stage

00:02:49,280 --> 00:02:52,239
because i think it's kind of trying to

00:02:50,640 --> 00:02:55,519
figure out how

00:02:52,239 --> 00:02:58,720
um a runtime uh

00:02:55,519 --> 00:03:00,400
dt model would sort of work in and

00:02:58,720 --> 00:03:01,920
having someone kind of sketch out or

00:03:00,400 --> 00:03:03,519
prototype a little bit of what that

00:03:01,920 --> 00:03:04,080
would look like compared to kind of how

00:03:03,519 --> 00:03:06,560
the

00:03:04,080 --> 00:03:08,319
the driver model and device model works

00:03:06,560 --> 00:03:10,560
and zephyr right now being very

00:03:08,319 --> 00:03:11,519
kind of static driven in the sense of of

00:03:10,560 --> 00:03:15,599
being

00:03:11,519 --> 00:03:17,519
um uh you know from from the

00:03:15,599 --> 00:03:19,040
you know code generation perspective and

00:03:17,519 --> 00:03:20,239
so how you would marry those two is

00:03:19,040 --> 00:03:21,599
something that i think someone needs to

00:03:20,239 --> 00:03:23,120
kind of think about or look at that

00:03:21,599 --> 00:03:24,239
that's wanting to drive that but i don't

00:03:23,120 --> 00:03:26,080
i don't think there's

00:03:24,239 --> 00:03:27,440
you know like most any open source

00:03:26,080 --> 00:03:28,560
project if someone's interested in

00:03:27,440 --> 00:03:30,879
contributing work

00:03:28,560 --> 00:03:32,480
uh in that area then then that would be

00:03:30,879 --> 00:03:33,680
something but i don't

00:03:32,480 --> 00:03:36,159
you know it's kind of the question of

00:03:33,680 --> 00:03:36,720
what additional value does something

00:03:36,159 --> 00:03:38,879
like that

00:03:36,720 --> 00:03:40,480
get where if you have a dts and you're

00:03:38,879 --> 00:03:42,159
going through one other build stage of

00:03:40,480 --> 00:03:43,840
getting code generation out versus

00:03:42,159 --> 00:03:46,799
having a blob

00:03:43,840 --> 00:03:48,159
um and and so forth so just kind of

00:03:46,799 --> 00:03:50,400
understanding kind of what's needed

00:03:48,159 --> 00:03:50,400
there

00:03:52,239 --> 00:04:00,319
good so stefano

00:03:56,480 --> 00:04:02,480
so one obviously one big uh

00:04:00,319 --> 00:04:04,000
question we we talked about it a bit in

00:04:02,480 --> 00:04:08,480
our session about

00:04:04,000 --> 00:04:10,560
you know device tree versus acpi um

00:04:08,480 --> 00:04:15,200
servers and more standardized

00:04:10,560 --> 00:04:17,519
environments are definitely going acpi

00:04:15,200 --> 00:04:18,239
you and i had talked a little bit about

00:04:17,519 --> 00:04:21,680
generating

00:04:18,239 --> 00:04:22,880
acpi tables directly from system device

00:04:21,680 --> 00:04:24,960
tree

00:04:22,880 --> 00:04:26,800
can you talk about that idea a little

00:04:24,960 --> 00:04:30,240
bit more

00:04:26,800 --> 00:04:33,040
well so the idea is on a system where

00:04:30,240 --> 00:04:35,600
um an assistant an eterogenic system

00:04:33,040 --> 00:04:37,680
with a large cpu cluster and

00:04:35,600 --> 00:04:39,919
one operating system on the large cpu

00:04:37,680 --> 00:04:42,880
cluster won't use a cpi

00:04:39,919 --> 00:04:44,639
uh the the configuration i will imagine

00:04:42,880 --> 00:04:46,400
the description of the full board will

00:04:44,639 --> 00:04:48,880
still be system device tree

00:04:46,400 --> 00:04:50,880
uh you will still get a traditional

00:04:48,880 --> 00:04:52,400
device stream maybe for your court exams

00:04:50,880 --> 00:04:55,040
for your court exams

00:04:52,400 --> 00:04:56,320
that doesn't change uh if you have a

00:04:55,040 --> 00:04:59,120
static hypervisor

00:04:56,320 --> 00:05:01,199
uh like zen or or jlouds or others you

00:04:59,120 --> 00:05:02,880
will still get maybe a device for each

00:05:01,199 --> 00:05:05,199
of your partitions

00:05:02,880 --> 00:05:05,919
but then eventually goes down to that

00:05:05,199 --> 00:05:07,600
one

00:05:05,919 --> 00:05:09,360
operating system which could be linux

00:05:07,600 --> 00:05:13,120
could be windows or other that

00:05:09,360 --> 00:05:15,680
support the cpi uh then we will

00:05:13,120 --> 00:05:17,360
need that translation you know from the

00:05:15,680 --> 00:05:18,400
device the traditional device three for

00:05:17,360 --> 00:05:21,039
that os to

00:05:18,400 --> 00:05:24,000
to a cpi that has been done a few times

00:05:21,039 --> 00:05:26,639
in the past like a few projects uh

00:05:24,000 --> 00:05:28,240
have done that from firmware projects to

00:05:26,639 --> 00:05:30,800
uh qm or even

00:05:28,240 --> 00:05:32,320
uh so it's is known to be possible maybe

00:05:30,800 --> 00:05:34,639
um

00:05:32,320 --> 00:05:36,000
not straightforward but definitely uh

00:05:34,639 --> 00:05:38,800
you know doable

00:05:36,000 --> 00:05:39,919
and maintainable as well because most of

00:05:38,800 --> 00:05:41,520
acpi

00:05:39,919 --> 00:05:44,080
i mean some of the cpi is actually

00:05:41,520 --> 00:05:47,120
static as well so that can be easily

00:05:44,080 --> 00:05:49,680
generated and the difficulties are

00:05:47,120 --> 00:05:51,680
the by code interpreted part of the cpi

00:05:49,680 --> 00:05:54,320
but even that can be um

00:05:51,680 --> 00:05:55,919
can be done especially if you have be

00:05:54,320 --> 00:05:58,960
powerful build time tools

00:05:55,919 --> 00:05:58,960
at your disposal

00:06:01,440 --> 00:06:07,759
um so grant the we talked about how

00:06:04,400 --> 00:06:11,680
device tree intersects system ready ir

00:06:07,759 --> 00:06:14,000
um what's what is

00:06:11,680 --> 00:06:15,919
i know there's several sessions at

00:06:14,000 --> 00:06:18,400
connect about system ready

00:06:15,919 --> 00:06:21,440
um can you bridge those gaps a little

00:06:18,400 --> 00:06:24,800
bit for this session

00:06:21,440 --> 00:06:26,319
yes so there's i mean

00:06:24,800 --> 00:06:28,400
we've got the larger system ready

00:06:26,319 --> 00:06:32,319
program which is certification

00:06:28,400 --> 00:06:36,560
for across a wide a wide variety of arms

00:06:32,319 --> 00:06:39,520
devices and

00:06:36,560 --> 00:06:39,840
in the server when we would server ready

00:06:39,520 --> 00:06:43,440
uh

00:06:39,840 --> 00:06:45,680
that was acpi and uefi

00:06:43,440 --> 00:06:47,520
but for uh for the new one of the new

00:06:45,680 --> 00:06:49,919
bands of system ready which is ir

00:06:47,520 --> 00:06:52,080
targeted at the embedded devices uh

00:06:49,919 --> 00:06:55,280
we've chosen device tree for that one

00:06:52,080 --> 00:06:56,800
and the reality the pragmatic reality

00:06:55,280 --> 00:07:00,000
looking at the market

00:06:56,800 --> 00:07:00,720
is the embedded linux ecosystem is

00:07:00,000 --> 00:07:02,960
different

00:07:00,720 --> 00:07:05,280
from what's required in server and right

00:07:02,960 --> 00:07:05,840
now all the socs already support device

00:07:05,280 --> 00:07:09,120
tree

00:07:05,840 --> 00:07:10,880
it is mature and we have a way of

00:07:09,120 --> 00:07:15,280
supporting that in the distros

00:07:10,880 --> 00:07:18,960
uh or in the in within linux

00:07:15,280 --> 00:07:22,240
and also bsd for that matter uh so

00:07:18,960 --> 00:07:24,880
device tree is i mean

00:07:22,240 --> 00:07:26,880
is what works it's it makes sense to

00:07:24,880 --> 00:07:30,560
keep sporting is not going away anytime

00:07:26,880 --> 00:07:33,919
soon so the the effort with system ready

00:07:30,560 --> 00:07:36,400
on the ir band is to standardize that

00:07:33,919 --> 00:07:37,440
um how that fits in with the larger

00:07:36,400 --> 00:07:39,599
system ready

00:07:37,440 --> 00:07:41,360
is that wherever possible we're trying

00:07:39,599 --> 00:07:43,440
to use the same standards

00:07:41,360 --> 00:07:44,720
across the system-ready bands so if you

00:07:43,440 --> 00:07:48,960
take a look at what

00:07:44,720 --> 00:07:51,599
the standard says the specs say is that

00:07:48,960 --> 00:07:52,879
the ir bands the es band the sr band all

00:07:51,599 --> 00:07:55,520
of them use uefi

00:07:52,879 --> 00:07:56,639
as the api into the to the os so that

00:07:55,520 --> 00:07:58,319
the os

00:07:56,639 --> 00:08:00,800
knows how the platform's going to be

00:07:58,319 --> 00:08:02,160
performed it knows how to boot

00:08:00,800 --> 00:08:04,000
up but then when you talk about the

00:08:02,160 --> 00:08:07,199
system description

00:08:04,000 --> 00:08:11,120
for embedded compute for uh for edge

00:08:07,199 --> 00:08:14,400
embedded edge iot that's all device tree

00:08:11,120 --> 00:08:15,759
uh for es and sr that are targeted at

00:08:14,400 --> 00:08:17,840
the shrink craft os's

00:08:15,759 --> 00:08:19,039
so if you care about windows or you care

00:08:17,840 --> 00:08:23,680
about uh

00:08:19,039 --> 00:08:25,759
vmware esxi well then that's the cpi

00:08:23,680 --> 00:08:27,599
which one you use depends very much on

00:08:25,759 --> 00:08:31,680
which operating system

00:08:27,599 --> 00:08:35,360
targets your your product is for

00:08:31,680 --> 00:08:37,360
and from the os point of view

00:08:35,360 --> 00:08:38,399
an os can support both so if you're

00:08:37,360 --> 00:08:41,599
talking about linux if you're talking

00:08:38,399 --> 00:08:45,040
about bst those os's support both

00:08:41,599 --> 00:08:47,360
and a linux distro can land on either a

00:08:45,040 --> 00:08:48,080
device tree based system or an acpi

00:08:47,360 --> 00:08:50,080
system

00:08:48,080 --> 00:08:51,200
it is perfectly happy to support both if

00:08:50,080 --> 00:08:52,880
the distros

00:08:51,200 --> 00:08:54,959
is having to do that so we've got a

00:08:52,880 --> 00:08:57,839
story with system ready that covers

00:08:54,959 --> 00:08:59,279
i think covers all those bands and but

00:08:57,839 --> 00:09:02,160
deals with

00:08:59,279 --> 00:09:03,760
the particularities of the embedded

00:09:02,160 --> 00:09:09,839
compute

00:09:03,760 --> 00:09:09,839
and how it's different from servers

00:09:10,320 --> 00:09:14,480
so thomas xilinx has been a big

00:09:13,360 --> 00:09:19,200
supporter of the

00:09:14,480 --> 00:09:22,160
system device tree concept um

00:09:19,200 --> 00:09:24,399
what what motivated you to start this

00:09:22,160 --> 00:09:24,399
work

00:09:25,120 --> 00:09:28,480
well as i mentioned a little bit before

00:09:26,959 --> 00:09:32,240
our problem is that we have

00:09:28,480 --> 00:09:34,720
really heterogeneous parts and we have

00:09:32,240 --> 00:09:37,519
devices that show up on the fly because

00:09:34,720 --> 00:09:40,800
we can reprogram the hardware and so on

00:09:37,519 --> 00:09:43,120
and so we had some internal tooling

00:09:40,800 --> 00:09:44,959
that could create some device trees out

00:09:43,120 --> 00:09:47,200
of our eda tools

00:09:44,959 --> 00:09:48,160
and and so on and but it was all

00:09:47,200 --> 00:09:51,440
proprietary

00:09:48,160 --> 00:09:54,399
it worked on sort of on our linux uh

00:09:51,440 --> 00:09:56,399
but our customers are using various uh

00:09:54,399 --> 00:09:57,519
operating systems our tosses and they're

00:09:56,399 --> 00:09:59,839
mixing them

00:09:57,519 --> 00:10:01,360
and for example the xbox is popular

00:09:59,839 --> 00:10:04,240
right it didn't work for that

00:10:01,360 --> 00:10:05,360
for bare metal we had a special way of

00:10:04,240 --> 00:10:07,680
translating

00:10:05,360 --> 00:10:09,360
and so we're thinking we really need to

00:10:07,680 --> 00:10:11,839
standardize this thing and

00:10:09,360 --> 00:10:12,800
it shouldn't really be a signing

00:10:11,839 --> 00:10:14,959
standard

00:10:12,800 --> 00:10:16,000
so really interested in working with

00:10:14,959 --> 00:10:17,839
other people so

00:10:16,000 --> 00:10:19,600
instead of coming up with a new standard

00:10:17,839 --> 00:10:21,920
our stuff was based on xml

00:10:19,600 --> 00:10:22,720
and things like that let's let's see if

00:10:21,920 --> 00:10:25,680
we can work with

00:10:22,720 --> 00:10:26,640
device trees and uh so so what we're

00:10:25,680 --> 00:10:29,680
hoping is

00:10:26,640 --> 00:10:32,640
is that our class vendors

00:10:29,680 --> 00:10:35,200
other soc vendors whether it's for the

00:10:32,640 --> 00:10:38,640
firmware for hypervisors for orthosis

00:10:35,200 --> 00:10:40,640
and so on really adopts device trees

00:10:38,640 --> 00:10:41,760
as as their way and then system device

00:10:40,640 --> 00:10:44,320
we can provide

00:10:41,760 --> 00:10:46,000
one's true source as we call it so that

00:10:44,320 --> 00:10:47,120
you only have to if you want to share a

00:10:46,000 --> 00:10:49,839
page for example

00:10:47,120 --> 00:10:50,320
for word io you specify that in one

00:10:49,839 --> 00:10:53,360
place

00:10:50,320 --> 00:10:55,200
it just flows through it and that's one

00:10:53,360 --> 00:10:58,079
of those things that our customers they

00:10:55,200 --> 00:10:59,760
complain most about is that it's so darn

00:10:58,079 --> 00:11:01,920
hard to configure our systems

00:10:59,760 --> 00:11:04,560
because you miss one thing in one place

00:11:01,920 --> 00:11:06,560
and a pound defined somewhere

00:11:04,560 --> 00:11:08,240
and then the system doesn't work and

00:11:06,560 --> 00:11:08,959
it's really hard to debug that stuff

00:11:08,240 --> 00:11:10,800
right so

00:11:08,959 --> 00:11:13,279
what we hope as well is to add

00:11:10,800 --> 00:11:15,920
verification into it so you can see that

00:11:13,279 --> 00:11:17,200
the rtos and the linux has a consistent

00:11:15,920 --> 00:11:19,600
view of

00:11:17,200 --> 00:11:20,800
the resources as opposed to when you put

00:11:19,600 --> 00:11:22,079
in something here and then

00:11:20,800 --> 00:11:23,440
after a while it turned out that both

00:11:22,079 --> 00:11:26,000
were trying to use the same device at

00:11:23,440 --> 00:11:26,000
the same time

00:11:26,880 --> 00:11:29,839
great

00:11:30,160 --> 00:11:34,880
grant do you want to talk about ebbr on

00:11:32,560 --> 00:11:37,920
other architectures

00:11:34,880 --> 00:11:41,120
yeah um i answered on the chat but

00:11:37,920 --> 00:11:43,279
um so evpr um if you're for those not

00:11:41,120 --> 00:11:46,800
aware it is a publicly maintained spec

00:11:43,279 --> 00:11:49,279
it is on github um the

00:11:46,800 --> 00:11:50,959
it is a community spec it is not one

00:11:49,279 --> 00:11:52,480
even though i'm the maintainer of it we

00:11:50,959 --> 00:11:56,160
don't view it as being owned by

00:11:52,480 --> 00:11:59,040
arm uh right now it specifies how to

00:11:56,160 --> 00:11:59,360
do the standards for unarmed platforms

00:11:59,040 --> 00:12:01,600
but

00:11:59,360 --> 00:12:02,959
it is absolutely open to any other

00:12:01,600 --> 00:12:06,320
architecture

00:12:02,959 --> 00:12:09,120
the the risk by folks have

00:12:06,320 --> 00:12:10,880
have been involved a little bit i don't

00:12:09,120 --> 00:12:12,399
have any patches yet that have actually

00:12:10,880 --> 00:12:15,839
that can be merged

00:12:12,399 --> 00:12:19,040
to bring in risk five support

00:12:15,839 --> 00:12:21,600
onto uh into the document but i'm

00:12:19,040 --> 00:12:24,880
absolutely supportive of it um i think

00:12:21,600 --> 00:12:27,279
this is one of the areas where

00:12:24,880 --> 00:12:29,760
having different documents for us in the

00:12:27,279 --> 00:12:32,720
linux ecosystem it doesn't do any good

00:12:29,760 --> 00:12:34,800
i mean the the what i'd like to see is

00:12:32,720 --> 00:12:37,519
we use common interfaces regardless of

00:12:34,800 --> 00:12:41,279
the architecture

00:12:37,519 --> 00:12:41,920
i would rather compete on technology and

00:12:41,279 --> 00:12:44,959
products

00:12:41,920 --> 00:12:46,959
rather than competing standards

00:12:44,959 --> 00:12:48,240
where then in the linux ecosystem we

00:12:46,959 --> 00:12:52,000
then have to figure out how to deal with

00:12:48,240 --> 00:12:55,040
each of them

00:12:52,000 --> 00:12:58,160
great great answer

00:12:55,040 --> 00:13:03,279
so luig what what challenges does

00:12:58,160 --> 00:13:07,120
st see um with device tree

00:13:03,279 --> 00:13:08,880
well there's there is the world uh first

00:13:07,120 --> 00:13:10,639
i would say that we are following the

00:13:08,880 --> 00:13:12,160
system device free initiative

00:13:10,639 --> 00:13:13,920
proposed by xylene because we have

00:13:12,160 --> 00:13:16,399
exactly the same issues

00:13:13,920 --> 00:13:17,760
uh device 3 is used by all our software

00:13:16,399 --> 00:13:21,279
components running on

00:13:17,760 --> 00:13:22,880
sm32 and p1 on cortex a but also on

00:13:21,279 --> 00:13:26,959
cartridge m4

00:13:22,880 --> 00:13:28,480
with zephyr and we have some consistency

00:13:26,959 --> 00:13:30,399
issues between the different software

00:13:28,480 --> 00:13:32,839
components so having

00:13:30,399 --> 00:13:35,120
like you mentioned before during the

00:13:32,839 --> 00:13:37,519
video one locations

00:13:35,120 --> 00:13:38,320
for all device three was one possible

00:13:37,519 --> 00:13:41,760
solutions

00:13:38,320 --> 00:13:44,560
to have one um i would say unique source

00:13:41,760 --> 00:13:45,680
for the dts files but it was not

00:13:44,560 --> 00:13:48,079
possible

00:13:45,680 --> 00:13:49,600
so you mentioned some tools that are

00:13:48,079 --> 00:13:50,800
proposed to matter to manage the

00:13:49,600 --> 00:13:53,120
consistencies

00:13:50,800 --> 00:13:54,320
but system diversity is another answer

00:13:53,120 --> 00:13:58,240
that means that we have

00:13:54,320 --> 00:14:00,399
one unique way to define all the systems

00:13:58,240 --> 00:14:02,399
the conversion of the systems and to

00:14:00,399 --> 00:14:04,240
generate

00:14:02,399 --> 00:14:06,480
a consistent configuration for all the

00:14:04,240 --> 00:14:10,000
software component

00:14:06,480 --> 00:14:12,639
uh second challenge will be i said from

00:14:10,000 --> 00:14:14,480
my point of view um the device three

00:14:12,639 --> 00:14:18,639
life cycles

00:14:14,480 --> 00:14:21,760
uh how to update part of the

00:14:18,639 --> 00:14:25,519
system configurations thanks to

00:14:21,760 --> 00:14:26,800
update laser still having a consistent

00:14:25,519 --> 00:14:28,959
configuration between the default

00:14:26,800 --> 00:14:32,079
software component

00:14:28,959 --> 00:14:32,720
so today on st platform for example we

00:14:32,079 --> 00:14:36,399
have

00:14:32,720 --> 00:14:39,040
several gtb one per software component

00:14:36,399 --> 00:14:39,519
but with the discretions we have ongoing

00:14:39,040 --> 00:14:42,079
uh

00:14:39,519 --> 00:14:43,680
with a system system ready

00:14:42,079 --> 00:14:46,160
specifications where we have our

00:14:43,680 --> 00:14:46,880
one unique hardware descriptions is how

00:14:46,160 --> 00:14:49,680
to maintain

00:14:46,880 --> 00:14:51,519
a consistent hardware configurations for

00:14:49,680 --> 00:14:53,680
all the software components

00:14:51,519 --> 00:14:55,600
when you're on the platform and i think

00:14:53,680 --> 00:14:58,160
that there is a

00:14:55,600 --> 00:14:59,760
lot of things to do here you mentioned

00:14:58,160 --> 00:15:03,360
the device three signatures

00:14:59,760 --> 00:15:06,800
also how to verify uh the device we

00:15:03,360 --> 00:15:10,839
were using in your secure boot so

00:15:06,800 --> 00:15:13,839
all these for me as an exchange for the

00:15:10,839 --> 00:15:13,839
device

00:15:14,399 --> 00:15:21,120
great thanks

00:15:17,920 --> 00:15:25,120
um so

00:15:21,120 --> 00:15:27,199
andre um with when river

00:15:25,120 --> 00:15:29,120
you know you're integrating a lot of

00:15:27,199 --> 00:15:30,160
these solutions from different soc

00:15:29,120 --> 00:15:32,240
providers and

00:15:30,160 --> 00:15:34,399
you talked a little bit in your video

00:15:32,240 --> 00:15:35,279
about some of the challenges that brings

00:15:34,399 --> 00:15:38,399
up

00:15:35,279 --> 00:15:38,800
um what is wind river specifically doing

00:15:38,399 --> 00:15:42,480
around

00:15:38,800 --> 00:15:45,600
device tree um

00:15:42,480 --> 00:15:49,040
yeah i think it's it's uh

00:15:45,600 --> 00:15:49,519
first of all uh inter operability right

00:15:49,040 --> 00:15:53,279
so

00:15:49,519 --> 00:15:56,399
and as we have discussed before

00:15:53,279 --> 00:15:57,440
and thomas also has pointed out so that

00:15:56,399 --> 00:16:00,720
there are

00:15:57,440 --> 00:16:01,279
um we do support in the xbox device 3

00:16:00,720 --> 00:16:04,079
which is

00:16:01,279 --> 00:16:06,800
a little bit different from like with

00:16:04,079 --> 00:16:08,639
some specific extension

00:16:06,800 --> 00:16:10,480
and but thomas has mentioned that that

00:16:08,639 --> 00:16:11,440
other operating systems real-time

00:16:10,480 --> 00:16:13,920
operating systems

00:16:11,440 --> 00:16:15,759
does not support it at all right and

00:16:13,920 --> 00:16:17,040
then it would be good to to have some

00:16:15,759 --> 00:16:20,399
kind of you know

00:16:17,040 --> 00:16:23,680
uh interoperability um

00:16:20,399 --> 00:16:26,639
um wherever you you could uh or

00:16:23,680 --> 00:16:27,680
with uh users at the end or system

00:16:26,639 --> 00:16:30,399
integrator

00:16:27,680 --> 00:16:32,160
can easily exchange the components

00:16:30,399 --> 00:16:35,040
depending on on the

00:16:32,160 --> 00:16:36,320
on their needs right and then still have

00:16:35,040 --> 00:16:40,399
a consistent

00:16:36,320 --> 00:16:40,880
uh device 3 or system device 3 across

00:16:40,399 --> 00:16:44,720
the whole

00:16:40,880 --> 00:16:48,160
platform right so and we are working

00:16:44,720 --> 00:16:51,759
on on vxworks

00:16:48,160 --> 00:16:53,199
in this area uh to make uh our device 3

00:16:51,759 --> 00:16:57,680
compatible with this

00:16:53,199 --> 00:16:57,680
other stuff um yes so

00:16:58,639 --> 00:17:05,360
great can i ask a question on that

00:17:02,560 --> 00:17:06,799
what have have you found a lot of pain

00:17:05,360 --> 00:17:08,720
points on compatibility

00:17:06,799 --> 00:17:10,240
when compared to the device tree that is

00:17:08,720 --> 00:17:12,240
in the linux kernel do you try to

00:17:10,240 --> 00:17:14,799
maintain compatibility there

00:17:12,240 --> 00:17:16,720
or does you know what linux uses for

00:17:14,799 --> 00:17:19,760
advisory end up differing from what you

00:17:16,720 --> 00:17:22,640
are using for for vx works

00:17:19,760 --> 00:17:24,160
yeah but basically what we have done

00:17:22,640 --> 00:17:27,280
recently yeah so we

00:17:24,160 --> 00:17:29,760
have um we have decided to make our

00:17:27,280 --> 00:17:33,360
device 3 compatible with the linux one

00:17:29,760 --> 00:17:37,679
right so to um to

00:17:33,360 --> 00:17:41,039
uh uh to have uh interoperability there

00:17:37,679 --> 00:17:42,320
and so i i think it's it's it's good for

00:17:41,039 --> 00:17:45,440
the moment

00:17:42,320 --> 00:17:47,520
yeah this is one thing

00:17:45,440 --> 00:17:48,559
at least on on the operating system

00:17:47,520 --> 00:17:51,760
level right so

00:17:48,559 --> 00:17:54,559
the operating system yeah

00:17:51,760 --> 00:17:55,760
this is one of the areas that i'm uh i'm

00:17:54,559 --> 00:17:57,200
concerned about or

00:17:55,760 --> 00:17:59,200
i mean we've talked about device tree

00:17:57,200 --> 00:18:00,960
stability for many many years

00:17:59,200 --> 00:18:03,200
on how to get stability between

00:18:00,960 --> 00:18:05,440
different kernel versions

00:18:03,200 --> 00:18:07,200
for system ready where the platform

00:18:05,440 --> 00:18:08,000
provides the device tree that becomes

00:18:07,200 --> 00:18:11,600
even

00:18:08,000 --> 00:18:13,760
even a bigger concern i'm hoping

00:18:11,600 --> 00:18:15,039
that with the increased level of testing

00:18:13,760 --> 00:18:16,240
that that will actually help with

00:18:15,039 --> 00:18:17,760
stability

00:18:16,240 --> 00:18:20,480
uh but i do think that's one of the

00:18:17,760 --> 00:18:23,360
challenges for for device tree

00:18:20,480 --> 00:18:26,640
that i still i don't feel like there's a

00:18:23,360 --> 00:18:26,640
really strong solution for

00:18:27,280 --> 00:18:30,799
so just one point on on that one i

00:18:29,760 --> 00:18:32,720
totally agree with you

00:18:30,799 --> 00:18:35,039
as part of this we need more

00:18:32,720 --> 00:18:36,720
standardization how things look like

00:18:35,039 --> 00:18:38,400
and that was one of the things when we

00:18:36,720 --> 00:18:41,120
were talking about

00:18:38,400 --> 00:18:42,960
uh remote proc and and sort of sharing

00:18:41,120 --> 00:18:45,120
the pages it turned out that everyone

00:18:42,960 --> 00:18:47,200
had their own way of describing

00:18:45,120 --> 00:18:49,039
all those things and it was mailboxes

00:18:47,200 --> 00:18:52,080
how you name those and so on

00:18:49,039 --> 00:18:52,559
so the long-term plan of course should

00:18:52,080 --> 00:18:54,160
be that

00:18:52,559 --> 00:18:55,600
let's standardize on that so it doesn't

00:18:54,160 --> 00:18:58,400
look different but

00:18:55,600 --> 00:19:00,080
a sort of half cleogy but still very

00:18:58,400 --> 00:19:00,960
workable way that we're doing right now

00:19:00,080 --> 00:19:03,600
is that

00:19:00,960 --> 00:19:04,720
you align on how you specify it in the

00:19:03,600 --> 00:19:05,919
system device tree

00:19:04,720 --> 00:19:08,400
and then you have a little plug-in and

00:19:05,919 --> 00:19:12,240
looper that takes care of all the

00:19:08,400 --> 00:19:14,000
the details that each device vendor has

00:19:12,240 --> 00:19:16,320
and it's not the best approach but but

00:19:14,000 --> 00:19:17,679
it's uh much better than the alternative

00:19:16,320 --> 00:19:20,480
that you have to do so

00:19:17,679 --> 00:19:21,120
so that's one way to go forward while we

00:19:20,480 --> 00:19:22,720
are

00:19:21,120 --> 00:19:24,559
it only takes a little bit longer to

00:19:22,720 --> 00:19:26,320
sort of the standardization we'll go

00:19:24,559 --> 00:19:30,400
along

00:19:26,320 --> 00:19:31,280
great so in in the meantime drew thanks

00:19:30,400 --> 00:19:33,919
for the

00:19:31,280 --> 00:19:35,840
good questions drew um so drew's been

00:19:33,919 --> 00:19:38,880
asking about overlays so

00:19:35,840 --> 00:19:39,440
it's as i re reported in the session

00:19:38,880 --> 00:19:42,640
there is

00:19:39,440 --> 00:19:46,080
work uh to get the device tree overlay

00:19:42,640 --> 00:19:49,200
source files accepted um upstream but

00:19:46,080 --> 00:19:53,039
that is still for being applied at

00:19:49,200 --> 00:19:55,280
uh by the bootloader um

00:19:53,039 --> 00:19:55,280
the

00:19:56,240 --> 00:20:02,320
frank has um that your question was

00:20:00,000 --> 00:20:04,960
going to be my hard question to frank

00:20:02,320 --> 00:20:05,600
but unfortunately he can't be live here

00:20:04,960 --> 00:20:09,280
um

00:20:05,600 --> 00:20:09,760
so frank has has given some good answers

00:20:09,280 --> 00:20:12,880
there

00:20:09,760 --> 00:20:14,080
uh in and this is something that will

00:20:12,880 --> 00:20:18,320
continue to

00:20:14,080 --> 00:20:21,039
go forward um

00:20:18,320 --> 00:20:21,360
but from a kernel maintainer point of

00:20:21,039 --> 00:20:24,880
view

00:20:21,360 --> 00:20:28,159
rob um what

00:20:24,880 --> 00:20:30,240
what challenges do you see in the in

00:20:28,159 --> 00:20:32,880
what what are you working on for device

00:20:30,240 --> 00:20:35,760
tree maintenance

00:20:32,880 --> 00:20:36,320
uh can i answer the overlay part first

00:20:35,760 --> 00:20:39,760
sure

00:20:36,320 --> 00:20:42,280
that would be great um so the

00:20:39,760 --> 00:20:43,679
basic infrastructure has gone in for

00:20:42,280 --> 00:20:48,240
5.13

00:20:43,679 --> 00:20:50,960
which allows us to build overlays and

00:20:48,240 --> 00:20:53,039
also apply overlays at build time to

00:20:50,960 --> 00:20:55,600
verify it

00:20:53,039 --> 00:20:57,200
which will allow us if we have existing

00:20:55,600 --> 00:21:01,200
dts that we want to split

00:20:57,200 --> 00:21:04,880
into to a base plus overlay dt

00:21:01,200 --> 00:21:07,760
we can do that and keep the original

00:21:04,880 --> 00:21:07,760
complete dt

00:21:08,159 --> 00:21:11,919
as far as runtime management i think

00:21:10,960 --> 00:21:15,520
frank's link

00:21:11,919 --> 00:21:19,520
probably covers that the best but

00:21:15,520 --> 00:21:22,960
we already support runtime applying um

00:21:19,520 --> 00:21:26,080
and with the fpga manager subsystems

00:21:22,960 --> 00:21:31,840
support set already and has for a number

00:21:26,080 --> 00:21:31,840
of years

00:21:32,080 --> 00:21:36,480
so to to your question on uh

00:21:37,120 --> 00:21:41,440
maintenance for dt and the kernel uh

00:21:39,679 --> 00:21:44,559
most of that right now is

00:21:41,440 --> 00:21:48,720
working on getting dt schema

00:21:44,559 --> 00:21:52,480
in place there's about

00:21:48,720 --> 00:21:55,919
4 000 bindings in the kernel tree

00:21:52,480 --> 00:21:56,640
um and we're i think at somewhere over a

00:21:55,919 --> 00:22:00,240
thousand

00:21:56,640 --> 00:22:02,720
or schema now so we're

00:22:00,240 --> 00:22:04,320
that's getting worked on and and as we

00:22:02,720 --> 00:22:06,159
get

00:22:04,320 --> 00:22:08,720
more and more schema in place there's

00:22:06,159 --> 00:22:11,919
additional things we can do and

00:22:08,720 --> 00:22:15,120
uh like verification that

00:22:11,919 --> 00:22:15,120
binding is documented

00:22:19,600 --> 00:22:26,000
good yesterday

00:22:23,360 --> 00:22:27,600
uh we are actually i sold my colleague

00:22:26,000 --> 00:22:29,840
of mine gave me the first patch series

00:22:27,600 --> 00:22:31,760
to add overlay support for exam two

00:22:29,840 --> 00:22:32,880
that you know obviously with fpga if you

00:22:31,760 --> 00:22:35,200
had

00:22:32,880 --> 00:22:37,600
if you add something new you need to let

00:22:35,200 --> 00:22:41,679
also the hypervisor know it's not

00:22:37,600 --> 00:22:44,640
an os only issue they're getting

00:22:41,679 --> 00:22:44,640
we'll get there as well

00:22:46,000 --> 00:22:49,440
so i see another question from drew

00:22:48,130 --> 00:22:51,520
[Music]

00:22:49,440 --> 00:22:52,840
should i start sending patches to add

00:22:51,520 --> 00:22:55,919
overlays

00:22:52,840 --> 00:22:59,200
um the answer is it

00:22:55,919 --> 00:23:02,640
depends on the uh sub arch i think

00:22:59,200 --> 00:23:06,799
at this point um so one one of the

00:23:02,640 --> 00:23:06,799
dependencies for 32-bit arm

00:23:06,840 --> 00:23:12,640
and the

00:23:09,679 --> 00:23:13,120
the sub arch needs to split out the dts

00:23:12,640 --> 00:23:16,480
to a

00:23:13,120 --> 00:23:22,320
subdirectory which we did for

00:23:16,480 --> 00:23:24,240
rm64 but not on rm32

00:23:22,320 --> 00:23:25,600
uh because right now we have a single

00:23:24,240 --> 00:23:28,960
directory and it's

00:23:25,600 --> 00:23:32,080
you know thousands of dts files

00:23:28,960 --> 00:23:34,880
and some become

00:23:32,080 --> 00:23:37,840
unmaintainable i think with uh adding

00:23:34,880 --> 00:23:37,840
overlays there

00:23:41,120 --> 00:23:44,320
yeah yep

00:23:44,880 --> 00:23:51,600
but yeah so i drew i think um

00:23:47,919 --> 00:23:55,279
you know beaglebone capes would be a

00:23:51,600 --> 00:23:58,880
a great um driver use case for

00:23:55,279 --> 00:23:58,880
that overlay support so

00:23:59,200 --> 00:24:06,000
um so there's a little bit of question

00:24:02,640 --> 00:24:08,720
talk about the new fdt format so

00:24:06,000 --> 00:24:11,679
this is an active discussion in the

00:24:08,720 --> 00:24:13,919
device tree evolution

00:24:11,679 --> 00:24:16,559
calls that we have every two weeks on

00:24:13,919 --> 00:24:16,559
mondays

00:24:16,960 --> 00:24:23,120
i if you're interested in this topic and

00:24:20,080 --> 00:24:26,640
are interested in not just watching but

00:24:23,120 --> 00:24:30,320
um participating in the conversation um

00:24:26,640 --> 00:24:33,679
that would be really good to get uh

00:24:30,320 --> 00:24:38,320
some other people in in that call um

00:24:33,679 --> 00:24:40,960
all so if you um

00:24:38,320 --> 00:24:43,679
if you subscribe to the boot

00:24:40,960 --> 00:24:45,679
architecture mailing list at lenara.org

00:24:43,679 --> 00:24:48,000
that's where we announced that that

00:24:45,679 --> 00:24:50,080
meeting hey bill it looks like in 14

00:24:48,000 --> 00:24:52,080
seconds this may shut down

00:24:50,080 --> 00:24:54,400
yeah that was the last thing i wanted to

00:24:52,080 --> 00:25:00,559
say so

00:24:54,400 --> 00:25:15,840
thanks everybody for participating

00:25:00,559 --> 00:25:15,840

YouTube URL: https://www.youtube.com/watch?v=TUxWhrUML5c


