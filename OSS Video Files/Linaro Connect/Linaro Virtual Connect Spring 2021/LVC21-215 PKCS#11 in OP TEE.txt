Title: LVC21-215 PKCS#11 in OP TEE
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	The PKCS#11 standard defines a platform-independent API to cryptographic tokens such as hardware security modules (HSM) and smart cards. These API’s help software to use, create, modify and delete cryptographic objects, without ever exposing those objects to the application’s memory.

Use of HSM’s in embedded/IoT products is not very common as it costs money but there is a need to provide secure storage for private keys in HSM. These may be needed for managing device identity, secure updates, TLS connections etc. Creating a PKCS#11 API for Linux application allows them to leverage OP-TEE secure enclave to handle secrets with a well established standard interface.

In this session, we will give details on some implementation points, status of the work completed and the next planned steps.
Captions: 
	00:00:02,639 --> 00:00:06,480
hello everyone i'm ruchika gupta i'm

00:00:04,880 --> 00:00:08,080
working as a tech lead with security

00:00:06,480 --> 00:00:11,599
working group in linaro

00:00:08,080 --> 00:00:13,120
i have itian with me yeah hello rushika

00:00:11,599 --> 00:00:16,240
hello everybody

00:00:13,120 --> 00:00:18,000
thanks for watching this video i am

00:00:16,240 --> 00:00:21,119
meeting carrier i work for

00:00:18,000 --> 00:00:24,080
st microelectronics and work also with

00:00:21,119 --> 00:00:25,599
linaro as an assignee this talk is about

00:00:24,080 --> 00:00:28,720
pkcs 11 in

00:00:25,599 --> 00:00:31,359
opti it's a story that started

00:00:28,720 --> 00:00:32,000
a few years ago like three or four years

00:00:31,359 --> 00:00:34,640
ago

00:00:32,000 --> 00:00:35,280
and since last year is something really

00:00:34,640 --> 00:00:38,879
effective

00:00:35,280 --> 00:00:39,840
in the octi project so we will present

00:00:38,879 --> 00:00:42,079
you

00:00:39,840 --> 00:00:43,120
first well what is the pkcs

00:00:42,079 --> 00:00:46,960
specification

00:00:43,120 --> 00:00:51,039
and what is the opti and how opti can

00:00:46,960 --> 00:00:52,960
leverage pkcs or pcs can leverage opti

00:00:51,039 --> 00:00:55,760
afterward we'll make a short status on

00:00:52,960 --> 00:00:59,520
the latest opti tag that was released

00:00:55,760 --> 00:01:02,559
and we'll go through a bit of details uh

00:00:59,520 --> 00:01:04,080
in the uh client library and the trusted

00:01:02,559 --> 00:01:05,680
application architecture

00:01:04,080 --> 00:01:09,520
i will show you the next steps

00:01:05,680 --> 00:01:12,000
afterwards rochika

00:01:09,520 --> 00:01:14,240
so now let's begin with an overview of

00:01:12,000 --> 00:01:16,640
the pkcs 11 specification

00:01:14,240 --> 00:01:18,560
so what is pkcs11 it is a platform

00:01:16,640 --> 00:01:19,040
independent api that can be used to

00:01:18,560 --> 00:01:20,560
manage

00:01:19,040 --> 00:01:22,960
and use the cryptographic security

00:01:20,560 --> 00:01:23,840
hardware now what is this hardware this

00:01:22,960 --> 00:01:27,520
can be

00:01:23,840 --> 00:01:30,720
smart card usb keys and even remote hsms

00:01:27,520 --> 00:01:31,520
so what pkcs 11 does is it abstracts the

00:01:30,720 --> 00:01:33,520
specific

00:01:31,520 --> 00:01:34,960
detail of the underlying communication

00:01:33,520 --> 00:01:36,479
between the application and the

00:01:34,960 --> 00:01:38,079
cryptographic hardware

00:01:36,479 --> 00:01:39,759
now this communication can be over a

00:01:38,079 --> 00:01:43,360
hardware bus maybe

00:01:39,759 --> 00:01:44,399
i2c spy or even uh over a network with a

00:01:43,360 --> 00:01:46,960
remote sperm there

00:01:44,399 --> 00:01:48,560
which is running on a crypto device uh

00:01:46,960 --> 00:01:50,640
now what does the client application do

00:01:48,560 --> 00:01:52,399
it calls the pkcs 11 api

00:01:50,640 --> 00:01:54,799
which is either provided by a vendor

00:01:52,399 --> 00:01:56,880
specific or a common crypto key library

00:01:54,799 --> 00:01:58,719
and which then calls into a kernel

00:01:56,880 --> 00:02:00,320
driver which communicates with this

00:01:58,719 --> 00:02:02,159
remote firmware

00:02:00,320 --> 00:02:03,920
in this specification these devices are

00:02:02,159 --> 00:02:05,759
usually referred to as tokens

00:02:03,920 --> 00:02:07,119
and that is how we will be referring to

00:02:05,759 --> 00:02:08,479
them as we move forward in the

00:02:07,119 --> 00:02:10,879
presentation

00:02:08,479 --> 00:02:12,800
uh the pkcs 11 apis allow the

00:02:10,879 --> 00:02:13,920
applications to manage the cryptographic

00:02:12,800 --> 00:02:16,400
objects on the token

00:02:13,920 --> 00:02:17,360
so these objects can be key certificates

00:02:16,400 --> 00:02:20,319
or data

00:02:17,360 --> 00:02:20,800
and by management the applications can

00:02:20,319 --> 00:02:23,440
create

00:02:20,800 --> 00:02:25,360
modify or destroy these objects then

00:02:23,440 --> 00:02:27,200
application can also call the cryptokey

00:02:25,360 --> 00:02:29,360
apis to use these objects for various

00:02:27,200 --> 00:02:31,360
crypto operations like maybe ciphering

00:02:29,360 --> 00:02:34,080
or authentications

00:02:31,360 --> 00:02:36,160
uh with respect to user authentication

00:02:34,080 --> 00:02:38,400
the token allows two types of user

00:02:36,160 --> 00:02:39,280
uh one is security officer or a normal

00:02:38,400 --> 00:02:41,760
user

00:02:39,280 --> 00:02:43,200
so the user can authenticate itself to

00:02:41,760 --> 00:02:46,959
the token either with a pin

00:02:43,200 --> 00:02:48,720
or alternate needs so a pkcs 11

00:02:46,959 --> 00:02:50,400
is no doubt a popular standard which is

00:02:48,720 --> 00:02:53,120
used by many hsms

00:02:50,400 --> 00:02:54,720
so before we move forward uh it in will

00:02:53,120 --> 00:02:55,519
help introduce our audience to some

00:02:54,720 --> 00:02:57,760
packages

00:02:55,519 --> 00:03:00,080
uh which can interface with these pkcs

00:02:57,760 --> 00:03:03,840
11 apis otu a10

00:03:00,080 --> 00:03:07,360
yeah thank you yes speaker cs11

00:03:03,840 --> 00:03:11,519
api is already used in uh some

00:03:07,360 --> 00:03:14,720
well-known packages like open ssh

00:03:11,519 --> 00:03:18,080
open agnu tls also has a pkcs

00:03:14,720 --> 00:03:20,159
interface pithon has a pkcs library

00:03:18,080 --> 00:03:21,200
and there are also packages like

00:03:20,159 --> 00:03:24,480
openness with

00:03:21,200 --> 00:03:27,360
which does not provide a native pkcs11

00:03:24,480 --> 00:03:29,120
engine but there's an alternate uh

00:03:27,360 --> 00:03:31,840
package that proposed one and that is

00:03:29,120 --> 00:03:32,400
used already by well-known distributions

00:03:31,840 --> 00:03:35,040
and

00:03:32,400 --> 00:03:35,440
and hopefully hoptie also will support

00:03:35,040 --> 00:03:39,120
uh

00:03:35,440 --> 00:03:41,280
pekka cs11 just remember that pkc7 is a

00:03:39,120 --> 00:03:43,599
standard it's well known and well used

00:03:41,280 --> 00:03:45,120
but we must be very careful when

00:03:43,599 --> 00:03:47,360
implementing the features

00:03:45,120 --> 00:03:48,159
so that it's well implemented and if

00:03:47,360 --> 00:03:50,159
there's some

00:03:48,159 --> 00:03:52,319
weaknesses in the specifications it's

00:03:50,159 --> 00:03:54,000
addressed uh before there's a new

00:03:52,319 --> 00:03:57,280
release of the speaker

00:03:54,000 --> 00:03:59,840
specification right and

00:03:57,280 --> 00:04:01,040
now as we kind of move in how this is

00:03:59,840 --> 00:04:04,000
implemented in opti

00:04:01,040 --> 00:04:04,640
let's talk in brief about what opti is

00:04:04,000 --> 00:04:06,640
i'm sure

00:04:04,640 --> 00:04:08,159
audience already knows about that but

00:04:06,640 --> 00:04:09,920
just a brief overview

00:04:08,159 --> 00:04:11,840
so opti is a trusted execution

00:04:09,920 --> 00:04:14,080
environment which is uh designed as a

00:04:11,840 --> 00:04:16,400
companion to the non-secure world linux

00:04:14,080 --> 00:04:17,359
running on cortex a cpus using arm trust

00:04:16,400 --> 00:04:20,000
zone

00:04:17,359 --> 00:04:23,040
and uh let's uh talk in brief about the

00:04:20,000 --> 00:04:25,199
various opti components so it includes

00:04:23,040 --> 00:04:26,080
on the linux side a user space safe

00:04:25,199 --> 00:04:28,320
based library

00:04:26,080 --> 00:04:29,840
which exposes the global platform apis

00:04:28,320 --> 00:04:32,880
which the client can use

00:04:29,840 --> 00:04:34,240
and a ta driver for the communication so

00:04:32,880 --> 00:04:36,000
the client apps talks to the

00:04:34,240 --> 00:04:37,919
corresponding trusted application which

00:04:36,000 --> 00:04:40,160
are there on the secure world side

00:04:37,919 --> 00:04:42,479
and the on the ta side you have a user

00:04:40,160 --> 00:04:44,800
space library which exposes various apis

00:04:42,479 --> 00:04:46,800
like crypto apis object management apis

00:04:44,800 --> 00:04:49,040
for the tas to use

00:04:46,800 --> 00:04:50,560
now uh you might be wondering i mean if

00:04:49,040 --> 00:04:52,639
we already have these crypto and the

00:04:50,560 --> 00:04:53,520
object management apis available then

00:04:52,639 --> 00:04:57,199
why do we need

00:04:53,520 --> 00:04:59,520
a generic pkcs 11 api global platforms

00:04:57,199 --> 00:05:01,840
t specification does not provide

00:04:59,520 --> 00:05:04,639
cryptographic objects or operation

00:05:01,840 --> 00:05:05,919
available to the client application it's

00:05:04,639 --> 00:05:08,720
only the internal

00:05:05,919 --> 00:05:10,400
trusted application libraries and apis

00:05:08,720 --> 00:05:13,840
that allow such objects

00:05:10,400 --> 00:05:17,360
and for a client to manipulate all those

00:05:13,840 --> 00:05:20,560
features from the opt we need a clear

00:05:17,360 --> 00:05:21,280
api exposed to the client so this is

00:05:20,560 --> 00:05:25,360
where

00:05:21,280 --> 00:05:28,479
the pcs11 api can really fill the gap

00:05:25,360 --> 00:05:30,240
between clear objects and operations

00:05:28,479 --> 00:05:34,000
visible from the client

00:05:30,240 --> 00:05:37,120
and the way we can handle such

00:05:34,000 --> 00:05:40,320
objects in the in the secure world

00:05:37,120 --> 00:05:42,320
so basically we are helping the uh

00:05:40,320 --> 00:05:44,080
users i mean not to kind of reinvent the

00:05:42,320 --> 00:05:46,240
key management apis perhaps

00:05:44,080 --> 00:05:47,120
and use a ready-made available pkcs11

00:05:46,240 --> 00:05:49,840
apis

00:05:47,120 --> 00:05:51,680
now uh let's move towards the design how

00:05:49,840 --> 00:05:55,120
the design for the pkcs

00:05:51,680 --> 00:05:57,520
token and the cryptokey library looks

00:05:55,120 --> 00:05:58,400
so we've already talked about uh the two

00:05:57,520 --> 00:06:00,160
components of the

00:05:58,400 --> 00:06:01,680
with the opti so one is the client side

00:06:00,160 --> 00:06:03,199
component and one is the trusted

00:06:01,680 --> 00:06:05,759
application side

00:06:03,199 --> 00:06:06,479
so what we have is we have a lipstick

00:06:05,759 --> 00:06:09,520
tec

00:06:06,479 --> 00:06:10,960
that is the crypto key t library

00:06:09,520 --> 00:06:12,639
which is equivalent to a crypto key

00:06:10,960 --> 00:06:15,520
library which is available

00:06:12,639 --> 00:06:17,520
uh from optic client and then we have a

00:06:15,520 --> 00:06:19,759
trust corresponding trusted application

00:06:17,520 --> 00:06:21,360
uh so it's available in the opti os

00:06:19,759 --> 00:06:22,960
which acts as a remote enclave or a

00:06:21,360 --> 00:06:25,759
remote uh

00:06:22,960 --> 00:06:27,199
hardware token and we also provide an

00:06:25,759 --> 00:06:28,160
exchange which are there in the update

00:06:27,199 --> 00:06:31,360
test

00:06:28,160 --> 00:06:33,759
so lip cktc in short is a crypto library

00:06:31,360 --> 00:06:34,000
which exposes the pkcs11 apis to the

00:06:33,759 --> 00:06:37,199
client

00:06:34,000 --> 00:06:39,120
application it's hosted in optic lan jit

00:06:37,199 --> 00:06:40,160
and it converts the crypto apis to the

00:06:39,120 --> 00:06:43,199
global platform

00:06:40,160 --> 00:06:46,319
um apis in invoke commands

00:06:43,199 --> 00:06:48,080
so and what we have is we have a pkcs11

00:06:46,319 --> 00:06:50,520
token which is emulated by a ta

00:06:48,080 --> 00:06:52,319
in opti so code is available in

00:06:50,520 --> 00:06:54,720
optis.jet for that

00:06:52,319 --> 00:06:56,720
so this is just a brief overview of the

00:06:54,720 --> 00:07:00,479
components uh which are there

00:06:56,720 --> 00:07:03,440
here for the pkcs11 token

00:07:00,479 --> 00:07:05,599
yes and with this setup well it's uh

00:07:03,440 --> 00:07:07,599
it's a huge setup and a lot of features

00:07:05,599 --> 00:07:08,080
and things to be exposed easy to the

00:07:07,599 --> 00:07:10,560
client

00:07:08,080 --> 00:07:12,319
and things to be implemented in the uh

00:07:10,560 --> 00:07:15,039
in a trusted application

00:07:12,319 --> 00:07:16,080
uh so it's uh those stories that started

00:07:15,039 --> 00:07:21,080
more than three years

00:07:16,080 --> 00:07:24,240
ago it was presented like in

00:07:21,080 --> 00:07:27,919
2019 at the hong kong

00:07:24,240 --> 00:07:30,960
linear connect and the project

00:07:27,919 --> 00:07:34,240
just matured a bit uh

00:07:30,960 --> 00:07:35,120
to get more features in and we started

00:07:34,240 --> 00:07:37,759
thinking on

00:07:35,120 --> 00:07:39,039
how to review uh this piece of code

00:07:37,759 --> 00:07:41,360
because it was a quite

00:07:39,039 --> 00:07:42,319
big amount of lines of code to be

00:07:41,360 --> 00:07:45,440
reviewed and

00:07:42,319 --> 00:07:48,560
fully maintained by the opti project

00:07:45,440 --> 00:07:50,800
so last year linaro decided to put an

00:07:48,560 --> 00:07:54,160
effort on

00:07:50,800 --> 00:07:54,720
making a deeper review of this code and

00:07:54,160 --> 00:07:58,000
bringing

00:07:54,720 --> 00:08:00,960
it to the upstream and now we are killed

00:07:58,000 --> 00:08:01,919
uh we're pretty happy to say that we are

00:08:00,960 --> 00:08:04,960
achieved

00:08:01,919 --> 00:08:06,960
the main basics of a pkcs

00:08:04,960 --> 00:08:08,720
token and now we can really start

00:08:06,960 --> 00:08:11,360
implementing cryptographic

00:08:08,720 --> 00:08:12,240
apis and objects that will really help

00:08:11,360 --> 00:08:14,800
will deserve

00:08:12,240 --> 00:08:15,280
in the real world so what we are active

00:08:14,800 --> 00:08:18,400
today

00:08:15,280 --> 00:08:19,440
is a slot and token discovery and

00:08:18,400 --> 00:08:22,240
management

00:08:19,440 --> 00:08:22,960
all the user session management and with

00:08:22,240 --> 00:08:26,479
the user

00:08:22,960 --> 00:08:29,840
authentication based on pins and also

00:08:26,479 --> 00:08:33,120
an alternate authentication means based

00:08:29,840 --> 00:08:36,320
on linux access control lists

00:08:33,120 --> 00:08:37,039
we manage basic objects being session or

00:08:36,320 --> 00:08:41,120
permanent

00:08:37,039 --> 00:08:44,560
objects as well as uh key degenerations

00:08:41,120 --> 00:08:44,959
we do a bit of uh siffering we do a bit

00:08:44,560 --> 00:08:47,920
of

00:08:44,959 --> 00:08:49,839
key derivation currently only aes

00:08:47,920 --> 00:08:53,360
derivation by encryption

00:08:49,839 --> 00:08:56,240
we do a bit of math mac computation

00:08:53,360 --> 00:08:57,760
digest random number generate

00:08:56,240 --> 00:09:01,200
generations

00:08:57,760 --> 00:09:03,519
and as rudica just told uh previously

00:09:01,200 --> 00:09:04,480
we have a non-regression test suite that

00:09:03,519 --> 00:09:06,720
is available

00:09:04,480 --> 00:09:08,240
and to allow us that as we progress in

00:09:06,720 --> 00:09:10,959
the in the

00:09:08,240 --> 00:09:11,680
development and reviews uh everything is

00:09:10,959 --> 00:09:14,480
still

00:09:11,680 --> 00:09:15,120
working as expected so just give it a

00:09:14,480 --> 00:09:18,480
try

00:09:15,120 --> 00:09:21,519
uh you can download the opt-q

00:09:18,480 --> 00:09:25,680
deliveries just make a run

00:09:21,519 --> 00:09:29,519
with the cfg pkfcs11ti

00:09:25,680 --> 00:09:32,320
equals yes and run the qmu emulation

00:09:29,519 --> 00:09:33,680
and using the pkcs112 for example you

00:09:32,320 --> 00:09:36,959
will be able to

00:09:33,680 --> 00:09:40,880
show to see the uh slots and tokens

00:09:36,959 --> 00:09:43,680
that are provided by the pkcs 11ta

00:09:40,880 --> 00:09:46,399
and now let's talk a bit about the

00:09:43,680 --> 00:09:50,000
client library internals

00:09:46,399 --> 00:09:53,440
yeah so uh now what's what's there in

00:09:50,000 --> 00:09:53,920
libsy ktec so for every critoki api

00:09:53,440 --> 00:09:56,240
which

00:09:53,920 --> 00:09:59,279
the library exposes we have a

00:09:56,240 --> 00:10:01,519
corresponding pkcs 11 ta command id

00:09:59,279 --> 00:10:03,120
and this command id is then used by the

00:10:01,519 --> 00:10:06,160
trusted application

00:10:03,120 --> 00:10:07,040
so what all does this lipstick pc do so

00:10:06,160 --> 00:10:08,959
it is a very thin

00:10:07,040 --> 00:10:10,320
wrapper layer and doesn't do much uh

00:10:08,959 --> 00:10:12,240
complex processing

00:10:10,320 --> 00:10:13,440
ink all the complex processing is taken

00:10:12,240 --> 00:10:15,440
care by the ta

00:10:13,440 --> 00:10:17,600
so what library this library basically

00:10:15,440 --> 00:10:20,079
does is it serializes the arguments

00:10:17,600 --> 00:10:21,440
which are received in the cryptokey api

00:10:20,079 --> 00:10:24,240
and sends it through the ta

00:10:21,440 --> 00:10:25,920
along with the ta command id for the

00:10:24,240 --> 00:10:26,800
serialization there could be things such

00:10:25,920 --> 00:10:29,920
as session id

00:10:26,800 --> 00:10:31,600
object id attribute templates mechanisms

00:10:29,920 --> 00:10:33,519
or the data which needs to be uh

00:10:31,600 --> 00:10:36,000
processed and

00:10:33,519 --> 00:10:37,279
the ta does its magic and once uh it

00:10:36,000 --> 00:10:39,600
receives the output back

00:10:37,279 --> 00:10:41,200
so it is also responsible for dc re

00:10:39,600 --> 00:10:43,920
deserializing this data

00:10:41,200 --> 00:10:45,920
and uh this can be by deserializing this

00:10:43,920 --> 00:10:47,279
could be the error or the success code

00:10:45,920 --> 00:10:49,519
maybe the object ids

00:10:47,279 --> 00:10:50,959
or object attributes in case of get

00:10:49,519 --> 00:10:52,160
attribute value

00:10:50,959 --> 00:10:54,480
just remember this is a very thin

00:10:52,160 --> 00:10:55,600
wrapper layer the main intention is to

00:10:54,480 --> 00:10:58,800
communicate with the

00:10:55,600 --> 00:11:01,839
ta which is sitting on the of this side

00:10:58,800 --> 00:11:03,760
and now further crypto key apis can be

00:11:01,839 --> 00:11:05,200
divided into various categories as you

00:11:03,760 --> 00:11:07,200
can just mentioned we have general

00:11:05,200 --> 00:11:08,560
purpose apis plot management session

00:11:07,200 --> 00:11:10,560
management

00:11:08,560 --> 00:11:11,920
um key management and even the crypto

00:11:10,560 --> 00:11:13,839
function apis

00:11:11,920 --> 00:11:16,560
so most of these apis are already

00:11:13,839 --> 00:11:18,320
defined in the pkcs11ta apis

00:11:16,560 --> 00:11:20,399
we have the list mentioned in the slide

00:11:18,320 --> 00:11:21,200
over here and there are still a few

00:11:20,399 --> 00:11:23,519
missing ones

00:11:21,200 --> 00:11:25,440
contributions are always welcome so

00:11:23,519 --> 00:11:28,000
please feel free to send in a patch to

00:11:25,440 --> 00:11:29,600
add any of these missing apis

00:11:28,000 --> 00:11:31,360
and now let's move for towards the

00:11:29,600 --> 00:11:32,240
design of the ta so as i mentioned lip

00:11:31,360 --> 00:11:35,279
ck tec

00:11:32,240 --> 00:11:36,800
is a thin wrapper so now uh if it didn't

00:11:35,279 --> 00:11:39,760
you can explain in the design

00:11:36,800 --> 00:11:41,760
of the t the tpk cs11ta if it sits in

00:11:39,760 --> 00:11:44,640
the octos

00:11:41,760 --> 00:11:45,600
thank you rejecter um we don't have

00:11:44,640 --> 00:11:49,160
enough time to

00:11:45,600 --> 00:11:52,160
really dig into the pkts pica

00:11:49,160 --> 00:11:55,360
cs11ta design and implementation

00:11:52,160 --> 00:11:58,720
so we just put some big uh

00:11:55,360 --> 00:12:01,680
important points here so the ta

00:11:58,720 --> 00:12:02,880
supports client sessions so the the

00:12:01,680 --> 00:12:06,800
currency can

00:12:02,880 --> 00:12:10,000
implement several isolated tokens

00:12:06,800 --> 00:12:13,519
each with its own take your storage

00:12:10,000 --> 00:12:16,639
uh private objects um

00:12:13,519 --> 00:12:19,839
session and object reference are all

00:12:16,639 --> 00:12:20,639
registered using lists in the ta so that

00:12:19,839 --> 00:12:23,120
sessions

00:12:20,639 --> 00:12:26,079
are bound to uh clients and objects are

00:12:23,120 --> 00:12:28,639
bound to sessions or to

00:12:26,079 --> 00:12:29,600
to the token itself so we use a list to

00:12:28,639 --> 00:12:31,839
uh register

00:12:29,600 --> 00:12:33,279
all that and to hold on on the hoses

00:12:31,839 --> 00:12:35,600
objects

00:12:33,279 --> 00:12:36,480
as for the objects objects are lists of

00:12:35,600 --> 00:12:40,240
attributes

00:12:36,480 --> 00:12:42,959
so in the pkcs ta

00:12:40,240 --> 00:12:44,079
all these attributes are stored in a

00:12:42,959 --> 00:12:47,040
serialized

00:12:44,079 --> 00:12:47,600
byte stream and it is the way it's empty

00:12:47,040 --> 00:12:50,480
it's uh

00:12:47,600 --> 00:12:50,959
handled in the ta and it's also the way

00:12:50,480 --> 00:12:53,600
the

00:12:50,959 --> 00:12:54,560
object is stored in the secure storage

00:12:53,600 --> 00:12:57,519
when it's a

00:12:54,560 --> 00:12:58,000
persistent object and so each time an

00:12:57,519 --> 00:13:00,959
object

00:12:58,000 --> 00:13:01,839
will be used or will be created for some

00:13:00,959 --> 00:13:04,639
processing

00:13:01,839 --> 00:13:06,160
the object that we use will be checked

00:13:04,639 --> 00:13:08,720
against the user credentials

00:13:06,160 --> 00:13:10,880
the token states or the target

00:13:08,720 --> 00:13:14,000
processing expected

00:13:10,880 --> 00:13:17,120
um as ruchika just said

00:13:14,000 --> 00:13:21,200
regarding the crypto operations

00:13:17,120 --> 00:13:24,079
in the pkcs11ta we rely on the opti

00:13:21,200 --> 00:13:24,480
itself to do the other cryptographic

00:13:24,079 --> 00:13:27,200
part

00:13:24,480 --> 00:13:28,880
as well as the secure storage part so

00:13:27,200 --> 00:13:31,760
the pkcs7 ta

00:13:28,880 --> 00:13:32,480
is based on the global platform internal

00:13:31,760 --> 00:13:37,120
core t

00:13:32,480 --> 00:13:40,560
api for all those management

00:13:37,120 --> 00:13:42,880
um i guess that's all we'll say on the

00:13:40,560 --> 00:13:44,240
ta implementation the code is there so

00:13:42,880 --> 00:13:46,560
uh feel free to

00:13:44,240 --> 00:13:48,560
to have a look at it and uh comment if

00:13:46,560 --> 00:13:51,440
you if you want

00:13:48,560 --> 00:13:53,440
uh let's talk a bit about user

00:13:51,440 --> 00:13:56,720
authentication specifically

00:13:53,440 --> 00:14:00,800
um in the pristine

00:13:56,720 --> 00:14:03,920
uh pkcs 11 specification

00:14:00,800 --> 00:14:06,720
the standard way to login into the

00:14:03,920 --> 00:14:07,199
the token for a user is to provide a pin

00:14:06,720 --> 00:14:09,600
value

00:14:07,199 --> 00:14:11,600
so this was handled from the very

00:14:09,600 --> 00:14:14,959
beginning in the

00:14:11,600 --> 00:14:18,399
pkcs 11 opti project

00:14:14,959 --> 00:14:22,959
and we had this nice contribution

00:14:18,399 --> 00:14:26,160
from a visa and hero from vesela oig

00:14:22,959 --> 00:14:29,199
that proposes a scheme where we can

00:14:26,160 --> 00:14:30,320
benefit from the linux access control

00:14:29,199 --> 00:14:33,519
leads and the

00:14:30,320 --> 00:14:36,320
user and group ids to

00:14:33,519 --> 00:14:37,760
allow specific applications to register

00:14:36,320 --> 00:14:40,560
and to identify

00:14:37,760 --> 00:14:42,000
to authenticate into the token without

00:14:40,560 --> 00:14:44,639
needing

00:14:42,000 --> 00:14:46,560
a pin that should be stored in the

00:14:44,639 --> 00:14:49,600
client non-secure world and

00:14:46,560 --> 00:14:50,959
may be exposed so the all user

00:14:49,600 --> 00:14:54,399
authentication of the

00:14:50,959 --> 00:14:58,240
pks 11 token would be based on the

00:14:54,399 --> 00:15:01,360
linux access control list and so the um

00:14:58,240 --> 00:15:02,800
uh contribution from visa henro proposes

00:15:01,360 --> 00:15:05,199
all the implementation

00:15:02,800 --> 00:15:06,800
in the uh several non-secure and secure

00:15:05,199 --> 00:15:08,079
part and they also propose a

00:15:06,800 --> 00:15:11,279
configuration to

00:15:08,079 --> 00:15:13,680
to help one uh defining the credentials

00:15:11,279 --> 00:15:19,040
for the security officer and user

00:15:13,680 --> 00:15:21,760
using either pin or linux seo means

00:15:19,040 --> 00:15:22,639
and now let's talk a bit about the

00:15:21,760 --> 00:15:27,040
testing part

00:15:22,639 --> 00:15:29,120
ruchika yeah so how do we test the pkcs

00:15:27,040 --> 00:15:31,360
11 apis which we have added

00:15:29,120 --> 00:15:33,759
so one thing which we do is uh we use

00:15:31,360 --> 00:15:36,560
the opti test suits that is the x test

00:15:33,759 --> 00:15:37,759
so as we are adding new apis we add in

00:15:36,560 --> 00:15:41,040
tests over there

00:15:37,759 --> 00:15:43,199
and with each test we try to test both

00:15:41,040 --> 00:15:45,199
invalid as well as the invalid uh cases

00:15:43,199 --> 00:15:47,040
for the apis and some minimal crypto

00:15:45,199 --> 00:15:49,600
algorithm compliance

00:15:47,040 --> 00:15:52,079
so in order to run these tests you can

00:15:49,600 --> 00:15:55,120
use the x test with an option pkcs11

00:15:52,079 --> 00:15:56,959
and you will have the 11 tests running

00:15:55,120 --> 00:15:58,480
so we're apart from that we are also

00:15:56,959 --> 00:16:00,240
exploring that if we can use some

00:15:58,480 --> 00:16:02,880
already available test suite

00:16:00,240 --> 00:16:04,560
so pkcs11 is a well-known standard but

00:16:02,880 --> 00:16:06,000
unfortunately we didn't find any

00:16:04,560 --> 00:16:07,759
standard compliance suit which is

00:16:06,000 --> 00:16:09,600
available which can be used to set test

00:16:07,759 --> 00:16:11,920
these pkcs 11 apis

00:16:09,600 --> 00:16:12,880
and confirm to confirm to us whether we

00:16:11,920 --> 00:16:14,639
are uh

00:16:12,880 --> 00:16:17,680
actually complying to the standard or

00:16:14,639 --> 00:16:19,120
not so it looks like every as hsm does

00:16:17,680 --> 00:16:21,759
their own testing

00:16:19,120 --> 00:16:22,959
but we did find two of these two of the

00:16:21,759 --> 00:16:25,600
test implementations

00:16:22,959 --> 00:16:26,720
uh which may not be complete but uh do

00:16:25,600 --> 00:16:28,160
help us enhance

00:16:26,720 --> 00:16:31,839
the compliance testing which we're going

00:16:28,160 --> 00:16:33,600
to do so one of these is the pkcs11 test

00:16:31,839 --> 00:16:35,360
so this is a test suit which is using

00:16:33,600 --> 00:16:37,920
google test framework

00:16:35,360 --> 00:16:40,160
and uh we've given in details on how you

00:16:37,920 --> 00:16:41,519
can build it and use it for the testing

00:16:40,160 --> 00:16:43,759
we are trying it in the chemo

00:16:41,519 --> 00:16:45,279
environment but please note that this is

00:16:43,759 --> 00:16:47,120
a work in progress

00:16:45,279 --> 00:16:48,480
so you'll see that there are failures

00:16:47,120 --> 00:16:50,800
when you're trying this

00:16:48,480 --> 00:16:52,480
thing out this may be due to the missing

00:16:50,800 --> 00:16:53,600
features in the implementation which and

00:16:52,480 --> 00:16:55,759
we are in the process

00:16:53,600 --> 00:16:57,360
of adding and sometimes there is a

00:16:55,759 --> 00:16:58,480
variation in the type of error code

00:16:57,360 --> 00:17:01,040
which is returned

00:16:58,480 --> 00:17:02,560
like uh the specification is not very

00:17:01,040 --> 00:17:03,920
clear on whether we should be returning

00:17:02,560 --> 00:17:06,000
a template called incomplete or a

00:17:03,920 --> 00:17:08,480
template inconsistent type of error

00:17:06,000 --> 00:17:10,240
so that kind of mismatches are there so

00:17:08,480 --> 00:17:12,400
we're looking at these failures and

00:17:10,240 --> 00:17:14,720
we'll fix them as we move along

00:17:12,400 --> 00:17:16,000
so again contributions are welcome for

00:17:14,720 --> 00:17:18,480
this

00:17:16,000 --> 00:17:19,120
and another test suit which we are

00:17:18,480 --> 00:17:20,880
exploring

00:17:19,120 --> 00:17:22,559
is the unit test which is available with

00:17:20,880 --> 00:17:24,799
the soft hsn

00:17:22,559 --> 00:17:25,760
so soft hsn is a software based

00:17:24,799 --> 00:17:29,280
implementation

00:17:25,760 --> 00:17:31,200
for an hsn which exposes pkcs 11 apis

00:17:29,280 --> 00:17:32,799
it is widely used by people just for

00:17:31,200 --> 00:17:35,919
testing stuff out

00:17:32,799 --> 00:17:36,960
and it also has a a well-formed unit

00:17:35,919 --> 00:17:39,120
test suit

00:17:36,960 --> 00:17:40,960
which can be built standalone and used

00:17:39,120 --> 00:17:43,919
with other crypto key libraries

00:17:40,960 --> 00:17:46,320
so this is what we tried uh we picked up

00:17:43,919 --> 00:17:48,799
this unit test from the soft hsm

00:17:46,320 --> 00:17:50,240
and try to compile it standalone and

00:17:48,799 --> 00:17:51,120
then use it with the crypto key a

00:17:50,240 --> 00:17:54,480
library

00:17:51,120 --> 00:17:56,880
which we expose using opti and

00:17:54,480 --> 00:17:57,600
details are available at the link which

00:17:56,880 --> 00:18:00,160
is over here

00:17:57,600 --> 00:18:01,840
again a note this is again a work in

00:18:00,160 --> 00:18:04,160
progress you'll see many cases

00:18:01,840 --> 00:18:05,200
failing but this will give you an idea

00:18:04,160 --> 00:18:09,039
of where we are

00:18:05,200 --> 00:18:10,880
with respect to the compliance then uh

00:18:09,039 --> 00:18:13,039
ethn mentioned about various packages

00:18:10,880 --> 00:18:15,440
standard packages which are available

00:18:13,039 --> 00:18:16,400
so pkcs11 tool is one of the popular

00:18:15,440 --> 00:18:18,000
packages

00:18:16,400 --> 00:18:20,559
and which provides in command line

00:18:18,000 --> 00:18:23,120
utilities to use these apis without

00:18:20,559 --> 00:18:25,120
getting into the details of apis or the

00:18:23,120 --> 00:18:26,799
parameters etc

00:18:25,120 --> 00:18:28,960
we already have it added in the build

00:18:26,799 --> 00:18:31,679
root in the opti-built environment

00:18:28,960 --> 00:18:32,720
and on the slide we've also added a few

00:18:31,679 --> 00:18:34,880
sample commands

00:18:32,720 --> 00:18:36,880
which can help you play around with the

00:18:34,880 --> 00:18:37,600
token like get in the token slot

00:18:36,880 --> 00:18:40,320
information

00:18:37,600 --> 00:18:41,679
initialize the token generate a key list

00:18:40,320 --> 00:18:43,840
objects etc

00:18:41,679 --> 00:18:45,200
so please feel free to try it in any

00:18:43,840 --> 00:18:47,120
feedback is welcome

00:18:45,200 --> 00:18:48,480
or any contribution is welcome for the

00:18:47,120 --> 00:18:51,760
same

00:18:48,480 --> 00:18:53,679
so uh now this is about the testing and

00:18:51,760 --> 00:18:55,120
what what are we going to do as next

00:18:53,679 --> 00:18:57,120
steps so

00:18:55,120 --> 00:18:58,799
now that we have the basics in like we

00:18:57,120 --> 00:18:59,760
have the basics of most of the session

00:18:58,799 --> 00:19:01,679
management

00:18:59,760 --> 00:19:03,039
uh the cryptographic operation which are

00:19:01,679 --> 00:19:04,960
then which are in

00:19:03,039 --> 00:19:07,520
we are really looking forward to adding

00:19:04,960 --> 00:19:09,600
the ecdsa and the rsa support

00:19:07,520 --> 00:19:11,039
and this would make release ready to be

00:19:09,600 --> 00:19:13,440
used for a remote token

00:19:11,039 --> 00:19:15,200
uh for platforms that support opti or

00:19:13,440 --> 00:19:18,559
real life use cases

00:19:15,200 --> 00:19:20,799
so uh easy patches pr is already

00:19:18,559 --> 00:19:21,600
there in review and thanks to visa for

00:19:20,799 --> 00:19:23,679
that

00:19:21,600 --> 00:19:25,919
and we're also looking at implementing

00:19:23,679 --> 00:19:28,880
the wrapping and the unwrapping apis

00:19:25,919 --> 00:19:29,600
and adding more mechanisms for symmetric

00:19:28,880 --> 00:19:33,039
ciphers

00:19:29,600 --> 00:19:35,679
max or the key derivation functions and

00:19:33,039 --> 00:19:37,120
as i mentioned about the test suits we

00:19:35,679 --> 00:19:38,000
want to improve in the test results of

00:19:37,120 --> 00:19:40,720
pkcs11

00:19:38,000 --> 00:19:41,919
test and the soft hsm unit test so it's

00:19:40,720 --> 00:19:43,760
another thing which we want to

00:19:41,919 --> 00:19:45,280
accomplish

00:19:43,760 --> 00:19:48,720
there are some improvements which can

00:19:45,280 --> 00:19:52,080
also be done from design perspective

00:19:48,720 --> 00:19:54,240
yes currently these are some areas

00:19:52,080 --> 00:19:56,400
that are quite raw in the implementation

00:19:54,240 --> 00:19:58,880
that that could be uh refined so

00:19:56,400 --> 00:20:00,640
in the next steps maybe we can improve

00:19:58,880 --> 00:20:03,360
the data storage maybe

00:20:00,640 --> 00:20:05,280
to split uh private objects from

00:20:03,360 --> 00:20:08,320
specific objects or to

00:20:05,280 --> 00:20:11,600
make a better isolation of the

00:20:08,320 --> 00:20:13,440
tokens that are implemented by the tta

00:20:11,600 --> 00:20:15,440
when there are several tokens

00:20:13,440 --> 00:20:18,480
uh also we should do some garbage

00:20:15,440 --> 00:20:21,600
collections of the uh secure storage

00:20:18,480 --> 00:20:25,360
contents because during the uh

00:20:21,600 --> 00:20:28,400
life time of the ta there may be

00:20:25,360 --> 00:20:30,880
objects that are created and while the

00:20:28,400 --> 00:20:32,000
device runs into some power failure and

00:20:30,880 --> 00:20:34,720
some

00:20:32,000 --> 00:20:35,760
left content in the secure storage that

00:20:34,720 --> 00:20:38,320
must be clean

00:20:35,760 --> 00:20:40,480
so it's something we should address and

00:20:38,320 --> 00:20:44,480
also put some documentation

00:20:40,480 --> 00:20:48,159
in the opti generic documentation

00:20:44,480 --> 00:20:51,200
about what is supported in the pkcs 11

00:20:48,159 --> 00:20:53,840
ta well

00:20:51,200 --> 00:20:55,039
um thanks last uh thank you everybody

00:20:53,840 --> 00:20:58,559
for watching this

00:20:55,039 --> 00:21:01,840
video and we really want to make a warm

00:20:58,559 --> 00:21:02,640
uh thanks to everybody that contributed

00:21:01,840 --> 00:21:04,799
to this uh

00:21:02,640 --> 00:21:07,440
to this project uh with all the

00:21:04,799 --> 00:21:10,400
contributions being code called reviews

00:21:07,440 --> 00:21:11,919
issues comments or whatever so we put a

00:21:10,400 --> 00:21:14,799
few of the names here

00:21:11,919 --> 00:21:16,000
that really participated but it's not

00:21:14,799 --> 00:21:18,799
all of them so

00:21:16,000 --> 00:21:20,960
thank you to all of them and uh let's

00:21:18,799 --> 00:21:24,640
see this uh still progressing

00:21:20,960 --> 00:21:27,360
and uh reaching a really useful state

00:21:24,640 --> 00:21:28,880
thanks to all and if you have questions

00:21:27,360 --> 00:21:32,640
do not hesitate to use uh

00:21:28,880 --> 00:21:37,919
to use a chat bye bye everyone

00:21:32,640 --> 00:21:37,919

YouTube URL: https://www.youtube.com/watch?v=VxBEQdu1T7A


