Title: LVC21-109 Introducing the Trusted Services project
Publication date: 2021-04-15
Playlist: Linaro Virtual Connect Spring 2021
Description: 
	Trusted Services is a new trustedfirmware.org project that provides a home for security related service components that may be integrated and deployed in different secure processing environments.  Whether running under OP-TEE as a trusted application, within a secure partition or on a secondary MCU, services that implement platform security function such as secure storage, cryptography and fTPM can be built using common components, interface definitions and test cases.  The presentation provides an introduction to the project and describes how a common framework can help with reuse and standardization.
Captions: 
	00:00:16,400 --> 00:00:19,520
hi

00:00:16,960 --> 00:00:20,880
uh it's julian hall here from arm i'm

00:00:19,520 --> 00:00:22,880
going to talk to you

00:00:20,880 --> 00:00:25,840
this afternoon about the trusted

00:00:22,880 --> 00:00:25,840
services project

00:00:27,279 --> 00:00:30,720
so i'll give you a little bit of

00:00:28,240 --> 00:00:33,800
background to start with

00:00:30,720 --> 00:00:35,680
so this is a new project under the

00:00:33,800 --> 00:00:38,480
trustedfirmware.org

00:00:35,680 --> 00:00:40,239
group of projects uh which and

00:00:38,480 --> 00:00:43,120
trustedfirm.org in case you don't know

00:00:40,239 --> 00:00:45,200
these open governance community projects

00:00:43,120 --> 00:00:47,440
and the intention is to provide

00:00:45,200 --> 00:00:48,960
reference implementations of secure

00:00:47,440 --> 00:00:53,280
world firmware

00:00:48,960 --> 00:00:56,559
for arm v8 a and m

00:00:53,280 --> 00:00:58,079
and also to provide sock developers and

00:00:56,559 --> 00:01:00,480
oems with reference

00:00:58,079 --> 00:01:01,760
code reference code base that can be

00:01:00,480 --> 00:01:05,119
used to meet

00:01:01,760 --> 00:01:08,400
our specifications for the firmware

00:01:05,119 --> 00:01:10,159
so the trust is the trusted service

00:01:08,400 --> 00:01:13,720
was first published it's a very new

00:01:10,159 --> 00:01:16,240
project it was first published through

00:01:13,720 --> 00:01:18,240
trustedfirmware.get.org on the 26th of

00:01:16,240 --> 00:01:20,880
november last year

00:01:18,240 --> 00:01:21,759
and it originates from work uh in arm

00:01:20,880 --> 00:01:24,000
within the

00:01:21,759 --> 00:01:26,159
open source software group firmware

00:01:24,000 --> 00:01:30,400
group concerned with providing

00:01:26,159 --> 00:01:32,720
psa services for cortex-a

00:01:30,400 --> 00:01:34,079
and so the idea is it will help help

00:01:32,720 --> 00:01:36,400
people to meet

00:01:34,079 --> 00:01:38,479
psa certification requirements but also

00:01:36,400 --> 00:01:41,680
hopefully go well beyond that

00:01:38,479 --> 00:01:42,240
in terms of terms of making components

00:01:41,680 --> 00:01:45,119
for

00:01:42,240 --> 00:01:47,280
trusted services reusable i think it's

00:01:45,119 --> 00:01:49,040
basically it complements the existing

00:01:47,280 --> 00:01:51,280
trusted firmware projects

00:01:49,040 --> 00:01:52,479
uh quite well and so we have tfa which

00:01:51,280 --> 00:01:55,680
is concerned with

00:01:52,479 --> 00:01:58,799
uh secure boot measured boots uh we have

00:01:55,680 --> 00:02:01,040
opt providing

00:01:58,799 --> 00:02:02,719
sort of secure execution environments

00:02:01,040 --> 00:02:04,399
and so this is more about the

00:02:02,719 --> 00:02:06,479
payloads for those environments things

00:02:04,399 --> 00:02:09,840
that can actually do useful things

00:02:06,479 --> 00:02:12,319
uh to solve some of the

00:02:09,840 --> 00:02:15,760
secure service type problems that

00:02:12,319 --> 00:02:15,760
application developers will have

00:02:18,160 --> 00:02:21,920
and so just to give you an idea of what

00:02:20,239 --> 00:02:23,680
trusted services are it's a term that

00:02:21,920 --> 00:02:27,200
we've made up

00:02:23,680 --> 00:02:30,560
and uh it's a general term uh

00:02:27,200 --> 00:02:32,879
that refers to sort of applications that

00:02:30,560 --> 00:02:35,440
perform very specific security related

00:02:32,879 --> 00:02:37,920
operations on behalf of clients

00:02:35,440 --> 00:02:39,040
and so clients could be just user space

00:02:37,920 --> 00:02:41,440
applications

00:02:39,040 --> 00:02:43,120
they could be kernel drivers uh there

00:02:41,440 --> 00:02:44,239
could be other trusted services they

00:02:43,120 --> 00:02:47,760
could be boot loaders

00:02:44,239 --> 00:02:50,080
it could be quite diverse but

00:02:47,760 --> 00:02:50,800
the important thing is that the service

00:02:50,080 --> 00:02:53,040
provider

00:02:50,800 --> 00:02:55,519
runs within some kind of secure

00:02:53,040 --> 00:02:57,360
processing environment

00:02:55,519 --> 00:02:58,560
and the motivation behind that is to

00:02:57,360 --> 00:03:01,120
protect

00:02:58,560 --> 00:03:02,879
security sensitive assets from malicious

00:03:01,120 --> 00:03:05,200
software that might be running outside

00:03:02,879 --> 00:03:07,280
of that environment

00:03:05,200 --> 00:03:08,480
and on cortex-a devices there's quite a

00:03:07,280 --> 00:03:10,640
diverse uh

00:03:08,480 --> 00:03:12,640
range of secure processing environments

00:03:10,640 --> 00:03:15,519
that can be used depending on

00:03:12,640 --> 00:03:16,879
sock pretending on on on architecture

00:03:15,519 --> 00:03:19,280
version and on

00:03:16,879 --> 00:03:20,959
basic implementation choices and so it

00:03:19,280 --> 00:03:23,599
could be secure partitions

00:03:20,959 --> 00:03:25,040
managed by a secure partition manager

00:03:23,599 --> 00:03:28,159
they could run under a t

00:03:25,040 --> 00:03:28,799
such as opti as trusted applications or

00:03:28,159 --> 00:03:32,959
run

00:03:28,799 --> 00:03:34,400
on a secondary cpu secure enclave

00:03:32,959 --> 00:03:36,159
so all of those are possibilities and

00:03:34,400 --> 00:03:38,720
they all achieve similar sort of

00:03:36,159 --> 00:03:40,959
isolation goals

00:03:38,720 --> 00:03:42,239
uh and examples of the sort of services

00:03:40,959 --> 00:03:46,480
you might run would be

00:03:42,239 --> 00:03:50,480
crypto there's a psa defines

00:03:46,480 --> 00:03:52,560
uh a crypto service uh which protects

00:03:50,480 --> 00:03:54,720
uh keys and provides a set of sort of

00:03:52,560 --> 00:03:57,280
primitive trips to operations

00:03:54,720 --> 00:03:58,400
uh that allows you not to expose the

00:03:57,280 --> 00:04:02,560
actual

00:03:58,400 --> 00:04:04,879
uh key material a protected storage

00:04:02,560 --> 00:04:06,239
maybe a firmware tpm running in one of

00:04:04,879 --> 00:04:08,799
these environments

00:04:06,239 --> 00:04:09,439
or uefi key store there's probably going

00:04:08,799 --> 00:04:11,280
to be

00:04:09,439 --> 00:04:15,840
many many other types of services that

00:04:11,280 --> 00:04:15,840
could be classed as trusted services

00:04:17,519 --> 00:04:22,079
okay so the work the work so far this

00:04:19,759 --> 00:04:25,040
just gives you an idea of the

00:04:22,079 --> 00:04:27,520
uh the actual reference environment that

00:04:25,040 --> 00:04:30,479
we've been developing these services in

00:04:27,520 --> 00:04:33,440
and so this we've been uh developing the

00:04:30,479 --> 00:04:35,440
uh the krypton storage trusted services

00:04:33,440 --> 00:04:37,520
in conjunction with some extensions to

00:04:35,440 --> 00:04:41,120
opti to provide

00:04:37,520 --> 00:04:44,320
uh sel zero secure partitions

00:04:41,120 --> 00:04:46,000
uh and so this is

00:04:44,320 --> 00:04:47,280
quite complicated diagram that shows

00:04:46,000 --> 00:04:48,320
that i don't want to go into many of the

00:04:47,280 --> 00:04:51,520
details

00:04:48,320 --> 00:04:52,000
of this but this is but so far all of

00:04:51,520 --> 00:04:54,400
the

00:04:52,000 --> 00:04:56,560
shuttered services that we've developed

00:04:54,400 --> 00:04:59,199
and tested have run in this particular

00:04:56,560 --> 00:04:59,199
environment

00:05:01,280 --> 00:05:03,600
okay

00:05:05,520 --> 00:05:09,360
and so why have a separate trusted

00:05:07,520 --> 00:05:11,919
services project

00:05:09,360 --> 00:05:13,120
well the trusted services project

00:05:11,919 --> 00:05:15,440
provides a home

00:05:13,120 --> 00:05:16,400
for service related components that may

00:05:15,440 --> 00:05:17,919
be integrated

00:05:16,400 --> 00:05:20,320
employed in different processing

00:05:17,919 --> 00:05:21,680
environments so that's really the main

00:05:20,320 --> 00:05:24,800
reason for this i think from

00:05:21,680 --> 00:05:26,639
from the earlier slides uh is evident

00:05:24,800 --> 00:05:27,919
there are quite a few choices that

00:05:26,639 --> 00:05:30,880
implementers have

00:05:27,919 --> 00:05:31,600
as to how to actually you know where to

00:05:30,880 --> 00:05:34,639
run

00:05:31,600 --> 00:05:36,560
these sort of services and the idea is

00:05:34,639 --> 00:05:39,039
behind one of the main ideas behind the

00:05:36,560 --> 00:05:42,160
project is to promote reuse

00:05:39,039 --> 00:05:43,919
and a level of standardization uh

00:05:42,160 --> 00:05:45,280
for service components that could be

00:05:43,919 --> 00:05:46,880
deployed in the different kinds of

00:05:45,280 --> 00:05:48,560
environments

00:05:46,880 --> 00:05:50,960
and so because of that the project is

00:05:48,560 --> 00:05:52,479
independent of any particular secure

00:05:50,960 --> 00:05:53,199
processing environment project so for

00:05:52,479 --> 00:05:55,759
example

00:05:53,199 --> 00:05:58,800
it's not tied to the opti project or the

00:05:55,759 --> 00:06:01,520
heftner project or any other project

00:05:58,800 --> 00:06:02,960
but the way we've structured things

00:06:01,520 --> 00:06:05,840
should hopefully allow

00:06:02,960 --> 00:06:06,400
the services or the components to be put

00:06:05,840 --> 00:06:07,919
together

00:06:06,400 --> 00:06:09,840
and then deployed in those different

00:06:07,919 --> 00:06:13,280
environments

00:06:09,840 --> 00:06:15,840
and so what we've tried to do is to

00:06:13,280 --> 00:06:18,400
adopt a common framework we stacked with

00:06:15,840 --> 00:06:20,400
standard conventions and solutions

00:06:18,400 --> 00:06:22,319
we tried to promote component and test

00:06:20,400 --> 00:06:25,039
case reuse

00:06:22,319 --> 00:06:26,560
and importantly for clients of these

00:06:25,039 --> 00:06:29,199
services publishing

00:06:26,560 --> 00:06:31,120
standard interfaces so independent of

00:06:29,199 --> 00:06:33,680
where the services are deployed

00:06:31,120 --> 00:06:35,919
if you're writing an application that

00:06:33,680 --> 00:06:39,039
uses those services it sees

00:06:35,919 --> 00:06:39,039
a common interface

00:06:39,759 --> 00:06:42,880
uh and other other benefits of this sort

00:06:41,840 --> 00:06:44,400
of thing is that by

00:06:42,880 --> 00:06:46,479
sharing components when there are

00:06:44,400 --> 00:06:48,720
security enhancements fixes

00:06:46,479 --> 00:06:50,960
improvements hopefully they're shared

00:06:48,720 --> 00:06:52,800
across different deployments

00:06:50,960 --> 00:06:54,160
and things like having a common build

00:06:52,800 --> 00:06:56,720
and test uh

00:06:54,160 --> 00:06:59,280
solution again well we can benefit from

00:06:56,720 --> 00:07:02,319
wreaths in that area

00:06:59,280 --> 00:07:02,639
so the end goal is that uh independence

00:07:02,319 --> 00:07:05,360
of

00:07:02,639 --> 00:07:06,240
what type of environment you're using a

00:07:05,360 --> 00:07:08,639
in a product

00:07:06,240 --> 00:07:09,599
there's a possibility of of running the

00:07:08,639 --> 00:07:12,479
trusted services

00:07:09,599 --> 00:07:17,840
really in any of those environments

00:07:12,479 --> 00:07:17,840
that's the real goal

00:07:18,479 --> 00:07:23,039
okay so just drilling down a little bit

00:07:21,120 --> 00:07:24,000
more deeply into the goals behind the

00:07:23,039 --> 00:07:25,840
project

00:07:24,000 --> 00:07:27,919
you know we set ourselves you know a set

00:07:25,840 --> 00:07:30,560
of goals to actually

00:07:27,919 --> 00:07:33,039
try and really clarify what it was that

00:07:30,560 --> 00:07:36,080
we were trying to achieve

00:07:33,039 --> 00:07:38,160
and this kind of summarizes those goals

00:07:36,080 --> 00:07:40,319
so we wanted a project structure that

00:07:38,160 --> 00:07:42,000
made it easy to reuse components we

00:07:40,319 --> 00:07:43,919
didn't want to tie

00:07:42,000 --> 00:07:45,120
potentially reusable components to any

00:07:43,919 --> 00:07:48,560
particular environment

00:07:45,120 --> 00:07:49,199
if it was unnecessary to do so we wanted

00:07:48,560 --> 00:07:52,479
to make it

00:07:49,199 --> 00:07:55,360
easy for clients to

00:07:52,479 --> 00:07:57,360
consume interfaces so these were

00:07:55,360 --> 00:07:59,680
interface definitions

00:07:57,360 --> 00:08:01,599
so again there's not a struc it's it's

00:07:59,680 --> 00:08:03,360
not too cumbersome there's not too much

00:08:01,599 --> 00:08:06,639
that you need to include to actually

00:08:03,360 --> 00:08:08,160
access one of these services

00:08:06,639 --> 00:08:10,160
and to give us three is we wanted to

00:08:08,160 --> 00:08:12,960
have a generic model regenex

00:08:10,160 --> 00:08:15,759
layered module that allows alternative

00:08:12,960 --> 00:08:17,680
layer implementations to coexist

00:08:15,759 --> 00:08:19,280
so when you when you need to port a

00:08:17,680 --> 00:08:20,639
service implementation from one

00:08:19,280 --> 00:08:22,479
environment to another

00:08:20,639 --> 00:08:23,680
it's a case of just interchanging maybe

00:08:22,479 --> 00:08:26,240
one lower layer

00:08:23,680 --> 00:08:28,960
from another but higher layers remain

00:08:26,240 --> 00:08:30,800
consistent

00:08:28,960 --> 00:08:32,560
we wanted to support service deployment

00:08:30,800 --> 00:08:32,959
into different processing environments

00:08:32,560 --> 00:08:35,200
that was

00:08:32,959 --> 00:08:37,039
a pretty obvious requirement you know we

00:08:35,200 --> 00:08:39,440
wanted to make it straightforward

00:08:37,039 --> 00:08:40,719
for you you know to build and deploy the

00:08:39,440 --> 00:08:43,519
services in the

00:08:40,719 --> 00:08:44,000
in a diverse set of environments and for

00:08:43,519 --> 00:08:47,440
that

00:08:44,000 --> 00:08:50,640
set of environments to be extensible

00:08:47,440 --> 00:08:52,720
uh testing clearly these are security

00:08:50,640 --> 00:08:55,120
sensitive components and so encouraging

00:08:52,720 --> 00:08:57,200
testing and building testing

00:08:55,120 --> 00:09:00,399
into the sort of the project early on

00:08:57,200 --> 00:09:00,399
was an important goal

00:09:00,800 --> 00:09:04,480
and also to to allow for testing in a

00:09:03,440 --> 00:09:07,120
native pc

00:09:04,480 --> 00:09:09,200
environment to help with development of

00:09:07,120 --> 00:09:11,040
services but also to help

00:09:09,200 --> 00:09:12,560
with application developers who want to

00:09:11,040 --> 00:09:15,279
use these services

00:09:12,560 --> 00:09:16,000
we've already seen how that was a smart

00:09:15,279 --> 00:09:17,279
decision

00:09:16,000 --> 00:09:19,600
where we've done some work with other

00:09:17,279 --> 00:09:21,760
projects who want to integrate

00:09:19,600 --> 00:09:23,519
the services we were able to provide

00:09:21,760 --> 00:09:25,680
them with a pc only

00:09:23,519 --> 00:09:26,640
implementation of a set of services and

00:09:25,680 --> 00:09:28,560
it made the

00:09:26,640 --> 00:09:30,480
integration work very very

00:09:28,560 --> 00:09:30,880
straightforward and so i think that was

00:09:30,480 --> 00:09:32,560
a

00:09:30,880 --> 00:09:36,080
good decision that we made early on and

00:09:32,560 --> 00:09:37,760
we're already seeing benefits from that

00:09:36,080 --> 00:09:39,920
we also want to be able to reuse

00:09:37,760 --> 00:09:41,839
components from external projects

00:09:39,920 --> 00:09:44,000
and to do that cleanly without

00:09:41,839 --> 00:09:45,440
maintaining uh having to maintain forks

00:09:44,000 --> 00:09:47,120
of those projects so

00:09:45,440 --> 00:09:50,000
we set about setting up a structure that

00:09:47,120 --> 00:09:52,640
made that made that possible

00:09:50,000 --> 00:09:53,839
and we also want to enable uh platform

00:09:52,640 --> 00:09:56,320
developers

00:09:53,839 --> 00:09:58,000
uh to be able to contribute any hardware

00:09:56,320 --> 00:09:59,680
specific code where necessary we didn't

00:09:58,000 --> 00:10:01,600
want this to be

00:09:59,680 --> 00:10:04,000
a project that is burdened with having

00:10:01,600 --> 00:10:06,800
to deal with porting different platforms

00:10:04,000 --> 00:10:07,760
we wanted to enable the community uh to

00:10:06,800 --> 00:10:10,560
deal with

00:10:07,760 --> 00:10:11,200
uh contributing uh hardware specific

00:10:10,560 --> 00:10:14,560
code

00:10:11,200 --> 00:10:14,560
in a straightforward way

00:10:14,640 --> 00:10:18,560
and we wanted a build system that could

00:10:16,800 --> 00:10:20,720
deal with all of this

00:10:18,560 --> 00:10:22,480
and could integrate and to allow with

00:10:20,720 --> 00:10:25,360
integration with external

00:10:22,480 --> 00:10:28,000
uh os build systems such as the opto or

00:10:25,360 --> 00:10:28,000
build routes

00:10:31,040 --> 00:10:34,880
so how we how we achieve that

00:10:38,000 --> 00:10:43,760
oh can you do that over shots

00:10:41,200 --> 00:10:45,200
okay so this this one this is a little

00:10:43,760 --> 00:10:46,480
bit complicated but i won't spend twelve

00:10:45,200 --> 00:10:48,399
too long on this one but

00:10:46,480 --> 00:10:50,320
i just wanna just give you an idea of

00:10:48,399 --> 00:10:52,240
how we've uh

00:10:50,320 --> 00:10:54,160
how we've tried to handle sort of the

00:10:52,240 --> 00:10:57,120
reuse and so this is

00:10:54,160 --> 00:10:58,560
gives an idea of the directory structure

00:10:57,120 --> 00:11:00,079
of the project to give you

00:10:58,560 --> 00:11:02,399
just to introduce some of the concepts

00:11:00,079 --> 00:11:04,079
that we're using

00:11:02,399 --> 00:11:05,680
and so starting on the left with this

00:11:04,079 --> 00:11:07,440
idea of protocols

00:11:05,680 --> 00:11:09,279
protocols if you're right if you're

00:11:07,440 --> 00:11:09,760
writing a client application you want to

00:11:09,279 --> 00:11:12,240
use

00:11:09,760 --> 00:11:12,880
trusted services the only place you need

00:11:12,240 --> 00:11:15,200
to go

00:11:12,880 --> 00:11:16,800
as the protocols and we have the

00:11:15,200 --> 00:11:19,440
ambition for this attribute

00:11:16,800 --> 00:11:21,120
to be a separate repo and so this is

00:11:19,440 --> 00:11:24,800
where we have definitions

00:11:21,120 --> 00:11:26,720
of interfaces uh and so these again are

00:11:24,800 --> 00:11:29,360
separated by layers

00:11:26,720 --> 00:11:31,519
on the operations the primitive

00:11:29,360 --> 00:11:33,600
definitions of how you actually

00:11:31,519 --> 00:11:34,560
consume and talk to one of these service

00:11:33,600 --> 00:11:36,240
providers

00:11:34,560 --> 00:11:39,279
to access a service that's what

00:11:36,240 --> 00:11:42,240
protocols is all about

00:11:39,279 --> 00:11:44,079
external is about representing external

00:11:42,240 --> 00:11:47,519
components that we want to

00:11:44,079 --> 00:11:49,839
uh to be able to include in builds of of

00:11:47,519 --> 00:11:54,000
service instances

00:11:49,839 --> 00:11:55,920
uh tools just about build tools mainly

00:11:54,000 --> 00:11:57,600
environments is this is an abstraction

00:11:55,920 --> 00:12:00,320
that we've introduced

00:11:57,600 --> 00:12:02,560
for uh an enviro a secure processing

00:12:00,320 --> 00:12:04,959
environment so we have one for

00:12:02,560 --> 00:12:06,240
secure partitions running under opt we

00:12:04,959 --> 00:12:08,000
have ones for uh

00:12:06,240 --> 00:12:10,959
running under hafnium we also have

00:12:08,000 --> 00:12:14,720
environments for native pc builds

00:12:10,959 --> 00:12:18,399
or builds for uh running in sort of

00:12:14,720 --> 00:12:20,880
an embedded arm linux environment

00:12:18,399 --> 00:12:23,200
and so each of those is abstracted by an

00:12:20,880 --> 00:12:26,079
environment

00:12:23,200 --> 00:12:27,920
the platforms is all about uh different

00:12:26,079 --> 00:12:30,560
hardware and so where

00:12:27,920 --> 00:12:32,240
an environment needs to be extended with

00:12:30,560 --> 00:12:34,639
some hardware specifics

00:12:32,240 --> 00:12:36,240
we introduce the concept of a platform

00:12:34,639 --> 00:12:39,040
to allow us to deal with

00:12:36,240 --> 00:12:40,880
any environment dependencies on devices

00:12:39,040 --> 00:12:42,160
on drivers that's what platforms is

00:12:40,880 --> 00:12:44,079
about

00:12:42,160 --> 00:12:45,680
components is kind of the interesting

00:12:44,079 --> 00:12:47,440
bit this is where

00:12:45,680 --> 00:12:49,760
all the special code for trusted

00:12:47,440 --> 00:12:52,240
services is and so these are

00:12:49,760 --> 00:12:53,040
components that can piece to be pieced

00:12:52,240 --> 00:12:57,120
together

00:12:53,040 --> 00:13:00,399
to create a deployment and deployments

00:12:57,120 --> 00:13:04,079
are the other things that define builds

00:13:00,399 --> 00:13:06,000
and so we have deployments for the

00:13:04,079 --> 00:13:08,560
crypto service for a protected

00:13:06,000 --> 00:13:10,480
store service and for any other thing

00:13:08,560 --> 00:13:13,839
that you might want to build and deploy

00:13:10,480 --> 00:13:13,839
in a particular environment

00:13:14,560 --> 00:13:18,000
so that's the overall project structure

00:13:16,160 --> 00:13:18,480
and these are the structures reflected

00:13:18,000 --> 00:13:20,639
in the

00:13:18,480 --> 00:13:22,000
the directors directors in the projects

00:13:20,639 --> 00:13:23,120
if afterwards you want to sort of

00:13:22,000 --> 00:13:26,160
explore the

00:13:23,120 --> 00:13:28,079
uh the the the get repo

00:13:26,160 --> 00:13:30,720
you'll see exactly the structure within

00:13:28,079 --> 00:13:30,720
the project

00:13:32,880 --> 00:13:37,839
okay next slide just just going drilling

00:13:36,160 --> 00:13:39,600
down a little bit deeper into cut into

00:13:37,839 --> 00:13:42,639
some of those concepts

00:13:39,600 --> 00:13:45,839
so deployments we've used this word

00:13:42,639 --> 00:13:47,680
to mean the

00:13:45,839 --> 00:13:49,760
build of something whether it's a

00:13:47,680 --> 00:13:52,880
library an elf file

00:13:49,760 --> 00:13:53,680
uh or whatever that you want to be able

00:13:52,880 --> 00:13:55,920
to build

00:13:53,680 --> 00:13:58,160
to run in a particular environment we're

00:13:55,920 --> 00:14:00,240
calling that a deployment

00:13:58,160 --> 00:14:03,120
and so a deployment for example the

00:14:00,240 --> 00:14:05,760
crypto service to run under opti

00:14:03,120 --> 00:14:06,240
uh is a combination of this idea of the

00:14:05,760 --> 00:14:08,480
name

00:14:06,240 --> 00:14:09,839
the descriptive name and the environment

00:14:08,480 --> 00:14:11,680
you want to run in it

00:14:09,839 --> 00:14:13,680
and there is a build that reflects

00:14:11,680 --> 00:14:16,240
exactly that and will produce

00:14:13,680 --> 00:14:17,760
will pull together external components

00:14:16,240 --> 00:14:19,360
internal components

00:14:17,760 --> 00:14:21,600
and produce a build that's suitable for

00:14:19,360 --> 00:14:22,800
that environment and the idea is that

00:14:21,600 --> 00:14:26,240
the output of that

00:14:22,800 --> 00:14:29,600
can then be deployed to run under opti

00:14:26,240 --> 00:14:32,880
or under whatever is the provider of the

00:14:29,600 --> 00:14:32,880
execution environments

00:14:33,360 --> 00:14:36,399
okay so that's the concept behind

00:14:35,360 --> 00:14:39,279
deployments

00:14:36,399 --> 00:14:41,440
and on the right there is an example of

00:14:39,279 --> 00:14:41,920
a deployment this is one that we use for

00:14:41,440 --> 00:14:43,839
running

00:14:41,920 --> 00:14:44,959
service level tests so this is a

00:14:43,839 --> 00:14:47,920
deployment

00:14:44,959 --> 00:14:49,120
that runs under arm linux runs in user

00:14:47,920 --> 00:14:52,800
space

00:14:49,120 --> 00:14:54,880
and runs tests that behave like

00:14:52,800 --> 00:14:55,839
a normal sort of clients of the trusted

00:14:54,880 --> 00:14:58,639
services

00:14:55,839 --> 00:14:59,199
and exercises the trusted services so so

00:14:58,639 --> 00:15:02,880
we treat

00:14:59,199 --> 00:15:02,880
any build as a deployment

00:15:05,680 --> 00:15:09,360
okay the the other important concept i

00:15:07,839 --> 00:15:11,440
just want to drill down a little bit

00:15:09,360 --> 00:15:14,480
more deeply is protocols because this is

00:15:11,440 --> 00:15:17,199
this is going to be important to users

00:15:14,480 --> 00:15:18,880
of trusted services so as i said earlier

00:15:17,199 --> 00:15:21,920
the protocols define

00:15:18,880 --> 00:15:25,120
the public interface definitions

00:15:21,920 --> 00:15:26,639
and the service and these are really

00:15:25,120 --> 00:15:28,160
split by layer

00:15:26,639 --> 00:15:31,040
and so what we call the service access

00:15:28,160 --> 00:15:33,759
protocol defines the set of operations

00:15:31,040 --> 00:15:34,480
supported by a service and the per

00:15:33,759 --> 00:15:37,279
operation

00:15:34,480 --> 00:15:39,199
input and output parameters and any

00:15:37,279 --> 00:15:42,320
service specific status codes

00:15:39,199 --> 00:15:44,160
might be returned and we also

00:15:42,320 --> 00:15:45,519
allow for different underlying remote

00:15:44,160 --> 00:15:48,240
procedural

00:15:45,519 --> 00:15:49,040
protocols uh if a special one needs to

00:15:48,240 --> 00:15:50,160
be defined

00:15:49,040 --> 00:15:52,399
and there's a space there and the

00:15:50,160 --> 00:15:53,759
protocols for doing that and we have

00:15:52,399 --> 00:15:56,880
defined an rpc

00:15:53,759 --> 00:15:59,440
protocol to run over the

00:15:56,880 --> 00:16:01,199
ffa messaging that our reference

00:15:59,440 --> 00:16:03,120
implementation uses

00:16:01,199 --> 00:16:04,880
but there's no reason why external

00:16:03,120 --> 00:16:06,959
protocol rpc

00:16:04,880 --> 00:16:09,920
standard rpc mechanisms could couldn't

00:16:06,959 --> 00:16:11,519
be used either

00:16:09,920 --> 00:16:13,519
now as i say the protocol definitions

00:16:11,519 --> 00:16:15,680
are planned to be kept in a separate

00:16:13,519 --> 00:16:17,040
uh re-protocols repo currently they're

00:16:15,680 --> 00:16:17,920
not but we're planning to do that this

00:16:17,040 --> 00:16:20,000
is advice

00:16:17,920 --> 00:16:22,880
we've got from other projects that

00:16:20,000 --> 00:16:25,279
that's something that can really make

00:16:22,880 --> 00:16:26,880
access consuming the public interfaces

00:16:25,279 --> 00:16:29,839
by people's writing applications as

00:16:26,880 --> 00:16:32,160
straightforward as possible

00:16:29,839 --> 00:16:33,639
and currently the structure we've

00:16:32,160 --> 00:16:35,920
adopted allows for different

00:16:33,639 --> 00:16:37,040
serializations for these protocols and

00:16:35,920 --> 00:16:40,320
currently we support

00:16:37,040 --> 00:16:42,480
two we support uh google proto

00:16:40,320 --> 00:16:44,160
protocol buffers which provides a

00:16:42,480 --> 00:16:45,839
language independence

00:16:44,160 --> 00:16:48,079
interface and so that's great for people

00:16:45,839 --> 00:16:51,279
writing applications for example in

00:16:48,079 --> 00:16:52,880
non-clc plus plus type languages

00:16:51,279 --> 00:16:55,839
where there's a formal language

00:16:52,880 --> 00:16:59,120
independent definition of the interface

00:16:55,839 --> 00:17:04,480
and we also have a more lightweight

00:16:59,120 --> 00:17:06,959
c type uh call it paxi serialization

00:17:04,480 --> 00:17:08,559
which is good for people writing uh

00:17:06,959 --> 00:17:10,559
c-type clients maybe

00:17:08,559 --> 00:17:12,160
kernel drivers and so there's less

00:17:10,559 --> 00:17:14,799
overhead involved there

00:17:12,160 --> 00:17:15,199
but we've had interest from people using

00:17:14,799 --> 00:17:17,360
uh

00:17:15,199 --> 00:17:18,319
looking at other serializations such as

00:17:17,360 --> 00:17:20,480
cbor and the

00:17:18,319 --> 00:17:24,400
framework we've got allows the number of

00:17:20,480 --> 00:17:24,400
serializations to be extended

00:17:28,160 --> 00:17:35,120
okay so this slide is a

00:17:31,440 --> 00:17:38,640
general common layered module for what

00:17:35,120 --> 00:17:41,520
any trusted service looks like

00:17:38,640 --> 00:17:42,799
uh and so it's a very simple model so we

00:17:41,520 --> 00:17:45,520
view that there being

00:17:42,799 --> 00:17:47,520
really three basic players with a

00:17:45,520 --> 00:17:50,480
peer-to-peer relationship between

00:17:47,520 --> 00:17:51,679
a client that will use a service and the

00:17:50,480 --> 00:17:53,440
service provider

00:17:51,679 --> 00:17:55,919
that implements the service and it's the

00:17:53,440 --> 00:17:58,840
service provider that will be running

00:17:55,919 --> 00:18:00,160
in the uh some sort of secure execution

00:17:58,840 --> 00:18:02,799
environment

00:18:00,160 --> 00:18:04,240
and so we've called the protocol that

00:18:02,799 --> 00:18:06,080
the client uses to

00:18:04,240 --> 00:18:07,520
access the service the service access

00:18:06,080 --> 00:18:10,559
protocol

00:18:07,520 --> 00:18:12,160
and that should be the same independence

00:18:10,559 --> 00:18:13,760
of the environment that the service is

00:18:12,160 --> 00:18:18,559
deployed in and

00:18:13,760 --> 00:18:22,640
what underlying rpc protocol is used

00:18:18,559 --> 00:18:26,720
okay the rpc is just about being able to

00:18:22,640 --> 00:18:30,160
invoke remote procedures past parameters

00:18:26,720 --> 00:18:31,600
and return results and again

00:18:30,160 --> 00:18:33,600
we're kind of the the higher layers is

00:18:31,600 --> 00:18:36,160
pretty are pretty agnostic as to what

00:18:33,600 --> 00:18:37,520
underlying rpc is used there's lots of

00:18:36,160 --> 00:18:39,840
flexibility as to what

00:18:37,520 --> 00:18:41,679
what should be used there and at the

00:18:39,840 --> 00:18:42,160
moment as i say we've only implemented a

00:18:41,679 --> 00:18:44,559
single

00:18:42,160 --> 00:18:46,080
rpc at the moment but the structure

00:18:44,559 --> 00:18:49,760
would accommodate just about

00:18:46,080 --> 00:18:51,760
any conventional rpc uh protocol

00:18:49,760 --> 00:18:53,440
and beneath that there's the flexibility

00:18:51,760 --> 00:18:56,799
for an rpc to run over different

00:18:53,440 --> 00:18:59,039
messaging layers

00:18:56,799 --> 00:19:01,200
and so this sort of common layered

00:18:59,039 --> 00:19:03,679
layered model is reflected

00:19:01,200 --> 00:19:05,280
in the project structure and so it's

00:19:03,679 --> 00:19:07,120
really clear when you're looking at

00:19:05,280 --> 00:19:09,039
components the components are concerned

00:19:07,120 --> 00:19:11,200
with the uh the sort of

00:19:09,039 --> 00:19:12,400
the service layer or the rpc layer or

00:19:11,200 --> 00:19:14,480
the messaging layer

00:19:12,400 --> 00:19:16,559
and so if you need to define new

00:19:14,480 --> 00:19:17,919
services or new rpcs it's really clear

00:19:16,559 --> 00:19:20,640
within the project structure how you

00:19:17,919 --> 00:19:20,640
should do that

00:19:23,520 --> 00:19:30,240
okay just a few words about test

00:19:27,360 --> 00:19:31,280
uh so we we've incorporated tests into

00:19:30,240 --> 00:19:33,840
the project

00:19:31,280 --> 00:19:34,799
right from day one uh so it's such an

00:19:33,840 --> 00:19:36,480
important thing we've got different

00:19:34,799 --> 00:19:38,799
classes of tests and the number of

00:19:36,480 --> 00:19:41,440
classes is likely actually to extend

00:19:38,799 --> 00:19:43,120
but currently we've got tests that we've

00:19:41,440 --> 00:19:44,720
got some unit tests a few of these that

00:19:43,120 --> 00:19:47,120
run on very very small

00:19:44,720 --> 00:19:48,640
units of code we've got a lot of

00:19:47,120 --> 00:19:51,120
component tests

00:19:48,640 --> 00:19:52,799
that run at the component level within

00:19:51,120 --> 00:19:55,280
the components

00:19:52,799 --> 00:19:57,280
subtree within the project and these are

00:19:55,280 --> 00:19:59,600
mainly tests that will run in a native

00:19:57,280 --> 00:20:01,360
pc environment

00:19:59,600 --> 00:20:02,720
we have service tests and these are

00:20:01,360 --> 00:20:04,720
really tests that

00:20:02,720 --> 00:20:07,039
represent how clients will use the

00:20:04,720 --> 00:20:08,559
services these are end-to-end tests

00:20:07,039 --> 00:20:10,640
and again these can be run in a pc

00:20:08,559 --> 00:20:14,240
environment or on the real

00:20:10,640 --> 00:20:16,000
uh target deployments and we also have

00:20:14,240 --> 00:20:17,360
a new class of tests that we've recently

00:20:16,000 --> 00:20:20,559
introduced called environment

00:20:17,360 --> 00:20:23,280
tests that really run that run within

00:20:20,559 --> 00:20:27,200
an execution environment test test any

00:20:23,280 --> 00:20:27,200
services provided by an environment

00:20:27,840 --> 00:20:33,520
we've we've adopted a cppu test

00:20:31,360 --> 00:20:34,880
uh for running our c and c plus plus

00:20:33,520 --> 00:20:36,159
type test cases

00:20:34,880 --> 00:20:39,440
if you're not familiar with it this is a

00:20:36,159 --> 00:20:42,400
fairly standard uh sort of x unit

00:20:39,440 --> 00:20:42,880
uh test framework that supports the sort

00:20:42,400 --> 00:20:46,000
of the

00:20:42,880 --> 00:20:47,280
uh the x units xml output format which

00:20:46,000 --> 00:20:49,600
can be

00:20:47,280 --> 00:20:50,880
used for displaying results in jenkins

00:20:49,600 --> 00:20:52,000
or whatever so we've tried to use a very

00:20:50,880 --> 00:20:55,600
conventional

00:20:52,000 --> 00:20:57,520
approach for testing and as i say

00:20:55,600 --> 00:20:58,880
we've tried to make sure that as many

00:20:57,520 --> 00:21:01,440
tests as possible

00:20:58,880 --> 00:21:02,720
can be run in a pc environment to make

00:21:01,440 --> 00:21:04,720
to give you a very quick and

00:21:02,720 --> 00:21:06,000
uh convenient way of checking

00:21:04,720 --> 00:21:07,919
progressions

00:21:06,000 --> 00:21:10,799
and for debugging certain components in

00:21:07,919 --> 00:21:10,799
that environment

00:21:11,840 --> 00:21:16,159
and just a few words about where we're

00:21:14,240 --> 00:21:16,960
going and so you know the project has

00:21:16,159 --> 00:21:18,960
been running for

00:21:16,960 --> 00:21:20,080
several months now but you know it's

00:21:18,960 --> 00:21:23,039
there's a

00:21:20,080 --> 00:21:24,559
the next steps are really concerned with

00:21:23,039 --> 00:21:26,000
really moving from the sort of the

00:21:24,559 --> 00:21:26,640
reference environment we're in at the

00:21:26,000 --> 00:21:30,159
moment on

00:21:26,640 --> 00:21:31,600
some real hardware and so currently the

00:21:30,159 --> 00:21:34,080
when we're running on a real target it's

00:21:31,600 --> 00:21:34,960
only been on an arm uh virtual platform

00:21:34,080 --> 00:21:36,400
at the moment

00:21:34,960 --> 00:21:38,159
and so one of the next steps is to

00:21:36,400 --> 00:21:38,880
actually replicate what we've done

00:21:38,159 --> 00:21:41,360
running on

00:21:38,880 --> 00:21:43,280
uh real hardware and to make sure our

00:21:41,360 --> 00:21:44,799
platform support model has been pipe

00:21:43,280 --> 00:21:46,320
cleaned

00:21:44,799 --> 00:21:47,919
so it's going to work to add new

00:21:46,320 --> 00:21:50,320
services currently we've

00:21:47,919 --> 00:21:51,280
implemented crypto and secure storage

00:21:50,320 --> 00:21:53,440
services

00:21:51,280 --> 00:21:56,400
but they'll be work to actually extend

00:21:53,440 --> 00:21:59,679
the number of services we support

00:21:56,400 --> 00:22:01,440
hardening security uh in particular

00:21:59,679 --> 00:22:03,440
strengthening the idea of client

00:22:01,440 --> 00:22:05,120
identity and then implementing access

00:22:03,440 --> 00:22:05,440
control based on that that's really

00:22:05,120 --> 00:22:07,360
quite

00:22:05,440 --> 00:22:09,360
important sort of a hardening measure

00:22:07,360 --> 00:22:12,159
that we're working on

00:22:09,360 --> 00:22:13,440
and uh in line with the psa program

00:22:12,159 --> 00:22:16,960
we're going to be looking to

00:22:13,440 --> 00:22:19,280
certify uh uh one or two

00:22:16,960 --> 00:22:20,720
platforms to actually uh to to

00:22:19,280 --> 00:22:21,760
demonstrate that we have a viable

00:22:20,720 --> 00:22:24,640
approach that

00:22:21,760 --> 00:22:27,600
uh people can use to uh certify their

00:22:24,640 --> 00:22:30,400
own platform based on these components

00:22:27,600 --> 00:22:31,520
and also are intending to extend the

00:22:30,400 --> 00:22:34,400
testing model

00:22:31,520 --> 00:22:34,799
to better represent real life use case

00:22:34,400 --> 00:22:36,880
and

00:22:34,799 --> 00:22:40,720
and also misuse cases to improve the

00:22:36,880 --> 00:22:43,360
security testing

00:22:40,720 --> 00:22:44,480
and finally if you want to find out more

00:22:43,360 --> 00:22:47,360
here are some

00:22:44,480 --> 00:22:49,200
uh some useful links uh the link to the

00:22:47,360 --> 00:22:50,559
project itself to the repos and

00:22:49,200 --> 00:22:54,400
documents

00:22:50,559 --> 00:22:59,120
uh and to the mailing list

00:22:54,400 --> 00:23:03,039
so that is the trusted services project

00:22:59,120 --> 00:23:05,360
well thank you very much for your time

00:23:03,039 --> 00:23:08,559
uh i don't know if there are any

00:23:05,360 --> 00:23:10,799
questions haven't seen any

00:23:08,559 --> 00:23:12,400
but yes if you do think of any questions

00:23:10,799 --> 00:23:15,440
please don't hesitate to

00:23:12,400 --> 00:23:16,559
uh to message me or send me an email and

00:23:15,440 --> 00:23:20,240
i'm quite happy to

00:23:16,559 --> 00:23:20,880
respond so right yes thanks very much

00:23:20,240 --> 00:23:23,600
for your time

00:23:20,880 --> 00:23:25,440
i think that's it julian thank you very

00:23:23,600 --> 00:23:27,360
much for your session and to all those

00:23:25,440 --> 00:23:29,039
who attended thank

00:23:27,360 --> 00:23:30,480
you mentioned he will be available in

00:23:29,039 --> 00:23:32,000
chat and he's provided some great

00:23:30,480 --> 00:23:35,200
resources to learn more

00:23:32,000 --> 00:23:37,840
about trusted services thanks everybody

00:23:35,200 --> 00:23:37,840

YouTube URL: https://www.youtube.com/watch?v=loaOpJM_CeU


