Title: LAS16-308: Mini Conference 2 Cortex M Software   Security Architecture
Publication date: 2017-10-25
Playlist: Open Source Security
Description: 
	LAS16-308: Mini Conference 2 Cortex-M Software - Security Architecture for Cortex-M
Speakers: Paul Bakker
Date: September 28, 2016

★ Session Description ★
For connected embedded systems we can broadly consider security across four different areas: Security within a cloud application/platform. Lifecycle security for large deployments of embedded devices. Communication security between internet connected systems. Local device security implemented within end nodes. Each connected end node needs to support aspects of lifecycle, communication and device security according to application needs. It is not scalable (or secure or productive) to start from scratch, implementing all of these aspects for each development. It is also not a good idea to implement static, closed, proprietary security systems which rely more on “security by obscurity” than on thorough, continuous and open validation of security implementations. Developers need comprehensive and flexible SW security frameworks with strong links to MCU HW security features that enable them to efficiently implement, validate and deploy “right sized” security solutions. This session will discuss the solutions that are available today, how to reason effectively about application security requirements and opportunities to evolve embedded security solutions in the future.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-308
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-308/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
Captions: 
	00:00:08,330 --> 00:00:15,120
so welcome to the next mini conference

00:00:12,570 --> 00:00:20,100
on cortex-m this time specifically on

00:00:15,120 --> 00:00:23,400
security first a short introduction my

00:00:20,100 --> 00:00:27,480
background is IT in general but more

00:00:23,400 --> 00:00:29,760
specifically I've done the development

00:00:27,480 --> 00:00:33,000
and design of products for all the way

00:00:29,760 --> 00:00:35,430
from NATO top-secret data protection

00:00:33,000 --> 00:00:37,500
down to being the lead maintainer for

00:00:35,430 --> 00:00:42,090
what used to be called polar seas el

00:00:37,500 --> 00:00:46,920
ember TLS is the current name as part of

00:00:42,090 --> 00:00:50,100
embed after an acquisition by by arm so

00:00:46,920 --> 00:00:54,690
in that scope I'm currently leading the

00:00:50,100 --> 00:00:56,940
our effort on defining the security

00:00:54,690 --> 00:00:59,250
specification but also the things you

00:00:56,940 --> 00:01:03,210
want to do with security on the device

00:00:59,250 --> 00:01:04,920
side of IOT devices so not things in the

00:01:03,210 --> 00:01:09,930
cloud but what do you do to protect the

00:01:04,920 --> 00:01:12,510
devices and in light of that I'd like to

00:01:09,930 --> 00:01:14,280
look at more generic differences between

00:01:12,510 --> 00:01:16,350
what are the different reasons this is

00:01:14,280 --> 00:01:18,689
between the cortex a security world

00:01:16,350 --> 00:01:21,030
deaths are well understood nowadays with

00:01:18,689 --> 00:01:23,130
mobile and everything we do with a with

00:01:21,030 --> 00:01:26,820
trust owned and protected and

00:01:23,130 --> 00:01:30,600
unprotected side and how that translates

00:01:26,820 --> 00:01:32,729
to a cortex-m world specifically also

00:01:30,600 --> 00:01:34,500
from the perspective of people that have

00:01:32,729 --> 00:01:37,079
experience in the cortex a side but not

00:01:34,500 --> 00:01:40,860
necessarily cortex in world because

00:01:37,079 --> 00:01:43,680
there are different beasts to tackle so

00:01:40,860 --> 00:01:45,210
to dive into that first put a bit of

00:01:43,680 --> 00:01:48,869
framing for people that don't have a

00:01:45,210 --> 00:01:51,090
deep background in cortex-m and the

00:01:48,869 --> 00:01:54,210
cortex a Linux like environments and

00:01:51,090 --> 00:01:56,070
cortex-m environments have have some

00:01:54,210 --> 00:01:58,140
major differences and the most important

00:01:56,070 --> 00:02:01,950
one is that the lightweight approach

00:01:58,140 --> 00:02:05,130
that you need to take on cortex-m for a

00:02:01,950 --> 00:02:07,140
few reasons for one there the standard

00:02:05,130 --> 00:02:08,970
big operating systems that provide a lot

00:02:07,140 --> 00:02:11,060
of functionality across all layers and

00:02:08,970 --> 00:02:14,330
have all modules for protective for

00:02:11,060 --> 00:02:17,300
or providing security and functionality

00:02:14,330 --> 00:02:20,290
to the rest of the system are not there

00:02:17,300 --> 00:02:23,270
because there's no linux running there

00:02:20,290 --> 00:02:25,760
but also you don't have virtualization

00:02:23,270 --> 00:02:28,190
built into the chipset so you don't have

00:02:25,760 --> 00:02:30,500
hardware support for virtualization so

00:02:28,190 --> 00:02:32,870
you can't use that to separate separate

00:02:30,500 --> 00:02:38,030
items and you're very resource

00:02:32,870 --> 00:02:42,530
constraints typical systems have a flash

00:02:38,030 --> 00:02:45,860
of 256 6k maybe a Meg but that's really

00:02:42,530 --> 00:02:48,110
big Ram sizes all the way down to 64 k

00:02:45,860 --> 00:02:51,230
maybe 25 12 if you're really really

00:02:48,110 --> 00:02:52,790
lucky and within that space we need to

00:02:51,230 --> 00:02:54,739
be able to provide applications but also

00:02:52,790 --> 00:02:56,630
do that security protection to make sure

00:02:54,739 --> 00:02:58,760
that we provide something similar to

00:02:56,630 --> 00:03:01,010
what we can do in cortex a to protect

00:02:58,760 --> 00:03:03,920
secrets identities and everything but

00:03:01,010 --> 00:03:09,170
without the the same capabilities of

00:03:03,920 --> 00:03:11,690
measures in additions and the there's a

00:03:09,170 --> 00:03:15,829
lot of actions especially in security to

00:03:11,690 --> 00:03:18,070
take a long time to perform like public

00:03:15,829 --> 00:03:21,489
key operations but there's real time

00:03:18,070 --> 00:03:25,130
constraints on drivers like bit banging

00:03:21,489 --> 00:03:26,930
specific ports and that have to be

00:03:25,130 --> 00:03:31,459
adhered as well and you don't have the

00:03:26,930 --> 00:03:33,620
same scheduling capabilities there so in

00:03:31,459 --> 00:03:35,500
MCU environments we have to directly use

00:03:33,620 --> 00:03:39,049
the hardware to do all the low-level

00:03:35,500 --> 00:03:42,170
actions and we have to do all the things

00:03:39,049 --> 00:03:44,239
like separation privileges in a single

00:03:42,170 --> 00:03:46,850
core instead of having separate layers

00:03:44,239 --> 00:03:49,700
and modules that work together as in the

00:03:46,850 --> 00:03:53,989
grand scheme of the Linux and similar

00:03:49,700 --> 00:03:56,299
operating systems so on an OS level we

00:03:53,989 --> 00:04:00,319
need to provide some form of software

00:03:56,299 --> 00:04:03,769
partitioning 241 be able to boot that

00:04:00,319 --> 00:04:08,769
device all the way from power down to a

00:04:03,769 --> 00:04:12,410
secure state again in that single OS

00:04:08,769 --> 00:04:15,910
core that you have and to have some form

00:04:12,410 --> 00:04:20,980
of ability to provide mutually

00:04:15,910 --> 00:04:23,080
distrusted boxes as we call them

00:04:20,980 --> 00:04:25,150
with in with an M bed but mutual

00:04:23,080 --> 00:04:29,440
distrust for boxes where you can make

00:04:25,150 --> 00:04:30,910
sure that if a part of the software

00:04:29,440 --> 00:04:33,010
component wants to do something

00:04:30,910 --> 00:04:36,330
malicious on the device it's not able to

00:04:33,010 --> 00:04:38,380
do that on other parts of the system and

00:04:36,330 --> 00:04:40,300
so the boxes are protected against each

00:04:38,380 --> 00:04:41,830
other they have to protect from

00:04:40,300 --> 00:04:44,170
malicious code because of a hacker

00:04:41,830 --> 00:04:46,360
breaking into the Wi-Fi driver for

00:04:44,170 --> 00:04:48,400
instance because those are major parts

00:04:46,360 --> 00:04:51,640
of the system millions of lines of codes

00:04:48,400 --> 00:04:55,920
very hard to definitively say that they

00:04:51,640 --> 00:04:58,990
are one hundred percent secure and

00:04:55,920 --> 00:05:01,630
because there is probably a single flash

00:04:58,990 --> 00:05:03,760
wear boots from in every system normally

00:05:01,630 --> 00:05:05,680
has access to the flash you have to

00:05:03,760 --> 00:05:06,730
prevent any of those components to be

00:05:05,680 --> 00:05:08,530
able to write to the flash because

00:05:06,730 --> 00:05:11,050
that's where the firmware and thus the

00:05:08,530 --> 00:05:13,540
security of the booting actually lies

00:05:11,050 --> 00:05:18,130
and of the OSX relies so that's

00:05:13,540 --> 00:05:20,140
something that's different in MCU and in

00:05:18,130 --> 00:05:23,230
addition compounding that and making

00:05:20,140 --> 00:05:25,660
that harder is the fact that all the

00:05:23,230 --> 00:05:27,580
different court examiner MC use have a

00:05:25,660 --> 00:05:29,590
lot of diversity they have different

00:05:27,580 --> 00:05:33,190
programmers models that different CPU

00:05:29,590 --> 00:05:37,900
CPU architectures but we need to be able

00:05:33,190 --> 00:05:39,430
to disband at all and they differ a lot

00:05:37,900 --> 00:05:43,420
in functionality that they can offer

00:05:39,430 --> 00:05:46,870
some have a timer that you can can use

00:05:43,420 --> 00:05:48,940
some of an external one some have a TR

00:05:46,870 --> 00:05:50,980
ng some of hardware acceleration some

00:05:48,940 --> 00:05:53,280
don't some have an mpu some don't

00:05:50,980 --> 00:05:56,110
there's there's all kinds of different

00:05:53,280 --> 00:06:00,910
configurations especially because the

00:05:56,110 --> 00:06:03,700
cortex MC us have a whole load of

00:06:00,910 --> 00:06:05,680
configuration options when silicon

00:06:03,700 --> 00:06:08,230
vendors try to differentiate between

00:06:05,680 --> 00:06:10,060
each other and so in order to cope with

00:06:08,230 --> 00:06:12,820
that we need to make some form of

00:06:10,060 --> 00:06:16,600
portable security libraries that provide

00:06:12,820 --> 00:06:20,800
those separations future bootstrapping

00:06:16,600 --> 00:06:23,530
and everything so one of those is and

00:06:20,800 --> 00:06:27,100
then micro visor which is our effort to

00:06:23,530 --> 00:06:28,930
and provide a security microkernel that

00:06:27,100 --> 00:06:31,840
separates boxes does nothing else it

00:06:28,930 --> 00:06:32,930
just make sure that one box can't access

00:06:31,840 --> 00:06:36,199
the other

00:06:32,930 --> 00:06:38,360
and it requires some form of common API

00:06:36,199 --> 00:06:40,310
to interact with all those boxes and to

00:06:38,360 --> 00:06:42,080
do the things there and that's what if

00:06:40,310 --> 00:06:44,000
you went to the talk yesterday if the

00:06:42,080 --> 00:06:45,889
platform security architecture was

00:06:44,000 --> 00:06:49,370
talked about to have some form of common

00:06:45,889 --> 00:06:52,789
API is across the cortex platforms to to

00:06:49,370 --> 00:06:55,820
talk to those secure site so that's the

00:06:52,789 --> 00:07:02,090
general framing of the the situation as

00:06:55,820 --> 00:07:03,650
we see a and and what I did is I created

00:07:02,090 --> 00:07:05,840
a few questions where I would be very

00:07:03,650 --> 00:07:08,919
interested to hear your opinions about

00:07:05,840 --> 00:07:12,710
on how we can solve some of those issues

00:07:08,919 --> 00:07:15,830
so if you look at the cortex a world we

00:07:12,710 --> 00:07:19,490
use the trusted world to protect drm

00:07:15,830 --> 00:07:21,800
mechanisms enable features and more like

00:07:19,490 --> 00:07:23,660
that but in the cortex m world these

00:07:21,800 --> 00:07:25,430
often don't apply we don't really have

00:07:23,660 --> 00:07:28,039
drm there because there's no video

00:07:25,430 --> 00:07:31,970
streaming going on but what are the

00:07:28,039 --> 00:07:34,910
biggest threats that that that are

00:07:31,970 --> 00:07:36,620
facing court exempt system so what do we

00:07:34,910 --> 00:07:39,260
have to protect against in cortex-m

00:07:36,620 --> 00:07:40,760
systems and IOT systems what do you have

00:07:39,260 --> 00:07:43,010
to take into account will be building

00:07:40,760 --> 00:07:44,990
those secure site libraries and the

00:07:43,010 --> 00:07:48,820
physical security in the future may be

00:07:44,990 --> 00:07:48,820
inside the CPUs

00:07:52,000 --> 00:07:59,020
dan you need to stick bleep leakage of

00:07:55,960 --> 00:08:04,090
sensitive data the immediate one so now

00:07:59,020 --> 00:08:05,740
health data or anything yeah that's

00:08:04,090 --> 00:08:08,260
definitely one that we need to take into

00:08:05,740 --> 00:08:10,000
account especially if if people are well

00:08:08,260 --> 00:08:18,190
using more and more of medical smart

00:08:10,000 --> 00:08:21,580
devices and I mean so for me it's secure

00:08:18,190 --> 00:08:24,100
boot and getting enough in the these

00:08:21,580 --> 00:08:26,560
products that you can for example have

00:08:24,100 --> 00:08:28,750
fusible security certificates and

00:08:26,560 --> 00:08:30,400
getting enough commonality and in people

00:08:28,750 --> 00:08:32,469
who make specifically ARM chips but

00:08:30,400 --> 00:08:36,909
really any chips so that you can have

00:08:32,469 --> 00:08:39,729
secure boot done in the chip itself yep

00:08:36,909 --> 00:08:42,130
so secure beautiful is of course a

00:08:39,729 --> 00:08:44,169
mechanism that is already a measure

00:08:42,130 --> 00:08:45,430
against some form of threat so what's

00:08:44,169 --> 00:08:47,350
the threat we're trying to protect

00:08:45,430 --> 00:08:50,020
against the threat there is uploading

00:08:47,350 --> 00:08:52,990
images that are bad to a device in some

00:08:50,020 --> 00:08:55,210
way and those threats can either be over

00:08:52,990 --> 00:08:57,040
the air upgrades which are obviously the

00:08:55,210 --> 00:08:59,430
most threatening but even you know

00:08:57,040 --> 00:09:03,310
getting into the supply chain itself and

00:08:59,430 --> 00:09:06,220
replacing out for example flashes so you

00:09:03,310 --> 00:09:08,020
know a lot of one of the later concerns

00:09:06,220 --> 00:09:11,020
we had was when we had our production

00:09:08,020 --> 00:09:12,550
chain we had external flashes there that

00:09:11,020 --> 00:09:15,040
somebody would come parsh part of the

00:09:12,550 --> 00:09:16,860
way through that and actually put on a

00:09:15,040 --> 00:09:19,750
different flash after the device was

00:09:16,860 --> 00:09:21,160
manufactured and then cause an issue

00:09:19,750 --> 00:09:22,780
there so I think it's both in the

00:09:21,160 --> 00:09:25,330
manufacturing process but then also the

00:09:22,780 --> 00:09:26,710
once the device gets installed and in

00:09:25,330 --> 00:09:28,360
this case it's an external flash

00:09:26,710 --> 00:09:31,180
apparently it's not that was inside the

00:09:28,360 --> 00:09:34,060
MCU you know in single chip designs you

00:09:31,180 --> 00:09:36,220
have less of a risk there but it would

00:09:34,060 --> 00:09:38,860
still be nice to you still have to

00:09:36,220 --> 00:09:44,200
protect against over-the-air upgrades

00:09:38,860 --> 00:09:46,000
I would probably be the biggest thing

00:09:44,200 --> 00:09:47,980
I'd be worried about was side-channel

00:09:46,000 --> 00:09:50,290
attacks like a power analysis attack on

00:09:47,980 --> 00:09:52,120
the crypto because this is me use a lot

00:09:50,290 --> 00:09:55,210
different crypto from lot of different

00:09:52,120 --> 00:09:56,980
vendors and to be confident that all of

00:09:55,210 --> 00:09:58,840
them have done the proper job of making

00:09:56,980 --> 00:10:00,700
sure that the power is constant and

00:09:58,840 --> 00:10:03,400
timing attacks are not viable really

00:10:00,700 --> 00:10:05,260
hard yeah that's definitely something to

00:10:03,400 --> 00:10:07,540
consider i mean that's that's of course

00:10:05,260 --> 00:10:10,420
the the big issue now that we have with

00:10:07,540 --> 00:10:13,480
IOT and all the devices are more

00:10:10,420 --> 00:10:18,940
physically available to people there so

00:10:13,480 --> 00:10:20,470
people can access them there there's of

00:10:18,940 --> 00:10:22,420
course mitigations like making sure

00:10:20,470 --> 00:10:26,260
there's nothing in the device that you

00:10:22,420 --> 00:10:29,200
can that can break out to other devices

00:10:26,260 --> 00:10:32,440
but that's definitely some something to

00:10:29,200 --> 00:10:36,270
consider to me getting access to the

00:10:32,440 --> 00:10:39,190
whole network being a non detected and

00:10:36,270 --> 00:10:41,470
being a non detecting sentian being in

00:10:39,190 --> 00:10:44,470
one device and having access to the rest

00:10:41,470 --> 00:10:47,080
of a network so I mean one device being

00:10:44,470 --> 00:10:49,570
attacked that whole little beings you

00:10:47,080 --> 00:10:51,850
know being compromised this catastrophe

00:10:49,570 --> 00:10:54,430
so I think that's doing this there's a

00:10:51,850 --> 00:10:57,040
big challenge yeah so the threat of

00:10:54,430 --> 00:10:59,620
group compromised so that one class of

00:10:57,040 --> 00:11:01,450
devices one device can compromise the

00:10:59,620 --> 00:11:03,450
entire group of devices based on the

00:11:01,450 --> 00:11:08,430
same batch or whatever they're building

00:11:03,450 --> 00:11:08,430
sure anybody else

00:11:09,520 --> 00:11:24,350
Jeff programmers probably but what

00:11:22,370 --> 00:11:26,990
specific part of programmers I think

00:11:24,350 --> 00:11:30,800
when they're sitting on their chairs are

00:11:26,990 --> 00:11:35,110
fine I'm joking around I guess one of

00:11:30,800 --> 00:11:40,790
the threats that seems most ignored

00:11:35,110 --> 00:11:42,530
might be denial of service the the

00:11:40,790 --> 00:11:44,450
proliferation of nodes I mean wasn't

00:11:42,530 --> 00:11:46,370
long ago car was a node it's now one of

00:11:44,450 --> 00:11:49,160
the most complicated and networks itself

00:11:46,370 --> 00:11:55,600
and the consequence of being able to

00:11:49,160 --> 00:11:55,600
render any one of those ECU's you know

00:11:56,290 --> 00:12:01,630
to make it malfunction shut it down can

00:11:59,780 --> 00:12:03,650
trigger a sort of a domino effect

00:12:01,630 --> 00:12:05,060
because these nodes are so sort of

00:12:03,650 --> 00:12:07,490
organically stitched together into

00:12:05,060 --> 00:12:09,170
systems rather than systems per se being

00:12:07,490 --> 00:12:11,180
something that you have to defend your

00:12:09,170 --> 00:12:13,790
having to defend each of the individual

00:12:11,180 --> 00:12:15,080
components of it so the ability just to

00:12:13,790 --> 00:12:18,110
break them rather than necessarily

00:12:15,080 --> 00:12:19,370
exploit them you know because those are

00:12:18,110 --> 00:12:20,960
the kind of traditional problems we're

00:12:19,370 --> 00:12:23,420
so used to dealing with that I see the

00:12:20,960 --> 00:12:24,860
less of a threat because we're aware of

00:12:23,420 --> 00:12:26,390
them and these problems usually come

00:12:24,860 --> 00:12:27,890
we're not looking they're not they don't

00:12:26,390 --> 00:12:32,000
occur where you are looking and so I

00:12:27,890 --> 00:12:33,490
think but that's not a kind of threat

00:12:32,000 --> 00:12:36,230
that we're used to dealing with in

00:12:33,490 --> 00:12:40,010
bigger notes and and conventional

00:12:36,230 --> 00:12:42,760
computing okay that's

00:12:40,010 --> 00:12:42,760
this one

00:12:45,220 --> 00:12:49,490
for me probably and this goes back to

00:12:47,480 --> 00:12:51,110
let a gentleman or was saying the

00:12:49,490 --> 00:12:53,780
compromise of a single device that can

00:12:51,110 --> 00:12:56,510
lead to compromise at multiple devices

00:12:53,780 --> 00:12:59,230
but at specific use case where you have

00:12:56,510 --> 00:13:02,060
now with IOT of proliferation of

00:12:59,230 --> 00:13:06,710
heterogeneous devices and some may be

00:13:02,060 --> 00:13:09,830
completely secure but one isn't and that

00:13:06,710 --> 00:13:11,240
that in the armor is very

00:13:09,830 --> 00:13:12,140
difficult to protect against and I think

00:13:11,240 --> 00:13:14,390
that's probably one of the biggest

00:13:12,140 --> 00:13:20,390
threats that I see as far as I OT is

00:13:14,390 --> 00:13:21,980
concerned yeah that's that's that's one

00:13:20,390 --> 00:13:25,220
that also hinges on the on your first

00:13:21,980 --> 00:13:28,040
comment it links well to Jeff's denial

00:13:25,220 --> 00:13:31,310
of service as well because often similar

00:13:28,040 --> 00:13:34,010
devices are similar points in the change

00:13:31,310 --> 00:13:36,760
across globe and the value chain so if

00:13:34,010 --> 00:13:39,170
you find the u.s. in one of those

00:13:36,760 --> 00:13:40,250
devices you can probably bring down the

00:13:39,170 --> 00:13:41,570
entire class because that's not

00:13:40,250 --> 00:13:43,940
something you can protect against plate

00:13:41,570 --> 00:13:45,830
with unique eat or something so that

00:13:43,940 --> 00:13:50,480
that can pound those two compound each

00:13:45,830 --> 00:13:52,750
other even more okay good just one more

00:13:50,480 --> 00:13:52,750
maybe

00:13:55,540 --> 00:14:04,040
sorry you wait for the Talking Stick to

00:14:00,250 --> 00:14:05,390
riff on Jess point actually I don't

00:14:04,040 --> 00:14:08,920
think it's so much develop as much as

00:14:05,390 --> 00:14:12,190
product managers and the time to market

00:14:08,920 --> 00:14:15,320
is that product management or is that

00:14:12,190 --> 00:14:20,720
sea level management but yeah I I agree

00:14:15,320 --> 00:14:26,540
there but just one more climbing of

00:14:20,720 --> 00:14:32,750
devices yeah cloning identities and not

00:14:26,540 --> 00:14:36,230
being able to detect those yeah so one

00:14:32,750 --> 00:14:39,649
more just even more when I haven't heard

00:14:36,230 --> 00:14:42,950
spoken about yet is verifying that the

00:14:39,649 --> 00:14:44,720
hardware is trusted hardware so from a

00:14:42,950 --> 00:14:47,390
from a chip vendor perspective I might

00:14:44,720 --> 00:14:49,160
be licensing selling a chip in licensing

00:14:47,390 --> 00:14:50,540
the software that goes with it but I

00:14:49,160 --> 00:14:53,959
want to make sure that somebody doesn't

00:14:50,540 --> 00:15:00,620
come around and bootleg some hardware

00:14:53,959 --> 00:15:04,160
and undermine my price points yeah okay

00:15:00,620 --> 00:15:06,399
those are that's a quite an extensive

00:15:04,160 --> 00:15:12,170
set of things we have to protect against

00:15:06,399 --> 00:15:14,779
that are risks for IOT devices so follow

00:15:12,170 --> 00:15:18,140
on a logical following question is then

00:15:14,779 --> 00:15:19,790
what are the services that we should

00:15:18,140 --> 00:15:22,010
provide on the secure site to protecting

00:15:19,790 --> 00:15:25,160
answers because that's of course the

00:15:22,010 --> 00:15:28,820
next step what do we have to provide in

00:15:25,160 --> 00:15:30,200
a chip either on the hardware side or on

00:15:28,820 --> 00:15:35,120
the software side to make sure that this

00:15:30,200 --> 00:15:37,690
these threats can't happen in a

00:15:35,120 --> 00:15:37,690
systematic way

00:15:38,310 --> 00:15:42,630
you start with the basics you know

00:15:40,230 --> 00:15:46,500
authentication and authorization for for

00:15:42,630 --> 00:15:50,900
access to any portion of device by and I

00:15:46,500 --> 00:15:54,090
I guess the term is box and ended so

00:15:50,900 --> 00:15:56,700
yeah the boxes so the first step that

00:15:54,090 --> 00:16:00,230
that we've taken is the embed micro

00:15:56,700 --> 00:16:03,089
visor example of how to separate

00:16:00,230 --> 00:16:06,990
processes from each other which is at

00:16:03,089 --> 00:16:10,350
least tries to mitigate the risk of

00:16:06,990 --> 00:16:12,000
faulty or faulty software or malicious

00:16:10,350 --> 00:16:14,820
actors on your device because they could

00:16:12,000 --> 00:16:18,060
break into one of your publicly

00:16:14,820 --> 00:16:19,200
network-enabled stacks that you happen

00:16:18,060 --> 00:16:21,290
to having a revised anyway because

00:16:19,200 --> 00:16:27,720
otherwise you won't have an IOT device

00:16:21,290 --> 00:16:30,510
Jeff and marks Matt's coming so i guess

00:16:27,720 --> 00:16:32,040
one i think your question is that

00:16:30,510 --> 00:16:35,490
there's an inherent problem in it which

00:16:32,040 --> 00:16:38,210
is that you're talking about providing

00:16:35,490 --> 00:16:40,350
services in order to provide certain

00:16:38,210 --> 00:16:41,940
measures of security and you're talking

00:16:40,350 --> 00:16:44,070
about services that can be provided by

00:16:41,940 --> 00:16:45,570
the secure environment so we live in a

00:16:44,070 --> 00:16:47,370
recursion right because that presumes

00:16:45,570 --> 00:16:49,380
the insecure environment to secure and

00:16:47,370 --> 00:16:51,930
that may indeed be the weak link in the

00:16:49,380 --> 00:16:53,550
chain particularly thinking of trust so

00:16:51,930 --> 00:16:56,700
and we're talking about an eminently

00:16:53,550 --> 00:16:59,400
logical security system not a physical

00:16:56,700 --> 00:17:00,900
one so through row hammer or similar

00:16:59,400 --> 00:17:02,700
type attacks if we can compromise the

00:17:00,900 --> 00:17:05,310
so-called secure environment then all

00:17:02,700 --> 00:17:10,199
the the house of cards that were built

00:17:05,310 --> 00:17:12,209
on top is for nothing so i don't mean to

00:17:10,199 --> 00:17:13,410
subvert the question or the conversation

00:17:12,209 --> 00:17:14,670
but maybe we should be talking about

00:17:13,410 --> 00:17:16,079
whether or not that and secure

00:17:14,670 --> 00:17:17,819
environment is actually secure in that

00:17:16,079 --> 00:17:20,520
if that isn't in fact the chief

00:17:17,819 --> 00:17:23,280
challenge yeah so that those are

00:17:20,520 --> 00:17:24,810
services as well am I in my book with

00:17:23,280 --> 00:17:28,590
Datak regard so protection against

00:17:24,810 --> 00:17:31,800
things like row mr.big banging I'm not a

00:17:28,590 --> 00:17:33,810
hardware expert but as far as i know the

00:17:31,800 --> 00:17:36,660
arm that the arm wave do memory isn't

00:17:33,810 --> 00:17:38,190
vulnerable to 22 row hammer but there

00:17:36,660 --> 00:17:41,610
might be similar kind of attacks in the

00:17:38,190 --> 00:17:46,290
future of course and those require

00:17:41,610 --> 00:17:47,850
physical mitigations in the MCU because

00:17:46,290 --> 00:17:48,809
that's not something you can solve in

00:17:47,850 --> 00:17:51,090
software

00:17:48,809 --> 00:17:54,539
in a simple way you can but it requires

00:17:51,090 --> 00:17:56,340
a lot of redundant data and that's

00:17:54,539 --> 00:17:59,279
something you definitely don't have on a

00:17:56,340 --> 00:18:05,929
constraint device soda again makes life

00:17:59,279 --> 00:18:10,379
harder any other services applications

00:18:05,929 --> 00:18:12,889
physical protections we a non

00:18:10,379 --> 00:18:17,159
compromising on compromise ability of

00:18:12,889 --> 00:18:20,909
self detecting the state of the doors

00:18:17,159 --> 00:18:22,139
and self-healing another device in

00:18:20,909 --> 00:18:25,379
if she does not capable of healing

00:18:22,139 --> 00:18:26,460
itself you should just shut down and and

00:18:25,379 --> 00:18:28,470
we need to put some secure and

00:18:26,460 --> 00:18:31,350
mechanisms to that it cannot be ordered

00:18:28,470 --> 00:18:33,749
in so you mean some some live way of

00:18:31,350 --> 00:18:36,539
detecting the current integrity of the

00:18:33,749 --> 00:18:38,600
run in the running OS code and running

00:18:36,539 --> 00:18:42,059
application code if it hasn't been

00:18:38,600 --> 00:18:44,850
maliciously modified yeah and only if it

00:18:42,059 --> 00:18:47,279
is then there should be a some some

00:18:44,850 --> 00:18:48,990
level of guarantee that the device is

00:18:47,279 --> 00:18:50,220
not going to be operable anymore or if

00:18:48,990 --> 00:18:53,129
it is going to operate it's going to

00:18:50,220 --> 00:18:55,649
first heal itself and then operate yeah

00:18:53,129 --> 00:18:57,149
I think the simplest fix of course is

00:18:55,649 --> 00:18:59,190
just reboot the device if it detects

00:18:57,149 --> 00:19:01,049
that but then you're still vulnerable in

00:18:59,190 --> 00:19:05,129
your next reboot so then it depends on

00:19:01,049 --> 00:19:07,889
how easy or how hard and how present

00:19:05,129 --> 00:19:09,389
your attacker is on the network to

00:19:07,889 --> 00:19:16,110
compromise the device but yeah that's a

00:19:09,389 --> 00:19:18,259
good good way of moving forward anything

00:19:16,110 --> 00:19:18,259
else

00:19:20,140 --> 00:19:25,050
again this is another basic one but

00:19:22,090 --> 00:19:28,420
secure communications between different

00:19:25,050 --> 00:19:30,880
different pieces of your system both

00:19:28,420 --> 00:19:35,950
actually I think of a system could

00:19:30,880 --> 00:19:39,820
compra be multiple devices as well so

00:19:35,950 --> 00:19:41,950
security across that is tough to do well

00:19:39,820 --> 00:19:46,920
and providing that as a service is very

00:19:41,950 --> 00:19:50,140
credible that's definitely tough to do

00:19:46,920 --> 00:19:53,890
especially if you if you see that we get

00:19:50,140 --> 00:19:56,620
more and more multi-core systems in the

00:19:53,890 --> 00:19:58,450
cortex world would that need to

00:19:56,620 --> 00:20:02,770
communicate together and that's

00:19:58,450 --> 00:20:04,630
something we have to well do well so one

00:20:02,770 --> 00:20:06,460
of the things i didn't hear necessarily

00:20:04,630 --> 00:20:09,520
but i'm not sure if people are worried

00:20:06,460 --> 00:20:12,910
about that is things like physically

00:20:09,520 --> 00:20:16,060
protecting the memory against physical

00:20:12,910 --> 00:20:17,800
access in the sense that people looking

00:20:16,060 --> 00:20:19,000
into it with electron microscopes and

00:20:17,800 --> 00:20:21,190
stuff because they have physical access

00:20:19,000 --> 00:20:23,050
to every device is that something people

00:20:21,190 --> 00:20:24,880
are worried about it is that something

00:20:23,050 --> 00:20:27,730
where we say well that's that comes with

00:20:24,880 --> 00:20:29,890
the job of any computer and any cpu so

00:20:27,730 --> 00:20:31,450
that's fine because there's devices

00:20:29,890 --> 00:20:33,340
where we care about that like smart

00:20:31,450 --> 00:20:36,580
cards where we have measures in place

00:20:33,340 --> 00:20:38,170
that erase the device or make it not

00:20:36,580 --> 00:20:39,760
working the moment something like that

00:20:38,170 --> 00:20:49,110
happens is it something we care about in

00:20:39,760 --> 00:20:49,110
IOT devices or is the cost too high

00:20:51,250 --> 00:20:56,299
yeah I think it's something you do care

00:20:54,380 --> 00:20:58,399
about and I'm not sure how expensive is

00:20:56,299 --> 00:21:00,799
because kinky you can always have the

00:20:58,399 --> 00:21:03,110
keys if you have any on ship memory of

00:21:00,799 --> 00:21:05,419
any kind you can always to decrypt the

00:21:03,110 --> 00:21:07,130
keys from memory to the local thing put

00:21:05,419 --> 00:21:08,990
me register fuse them and send it back

00:21:07,130 --> 00:21:09,830
or if you have actually crypto hard work

00:21:08,990 --> 00:21:12,470
it's going to have that ability

00:21:09,830 --> 00:21:16,519
oftentimes so it may not be a big big

00:21:12,470 --> 00:21:21,409
cost to not keeping keys ever having

00:21:16,519 --> 00:21:23,539
keys go through the D Ram yeah secure

00:21:21,409 --> 00:21:29,210
memory on chip but that's that's often

00:21:23,539 --> 00:21:32,149
an expensive expensive exercise but yeah

00:21:29,210 --> 00:21:41,179
that's a that's definitely a way of

00:21:32,149 --> 00:21:43,669
handling it dan dan Han yeah acceptable

00:21:41,179 --> 00:21:47,269
yeah my name tab was wrong if anyone's

00:21:43,669 --> 00:21:49,190
wondering why he's referring to yeah so

00:21:47,269 --> 00:21:50,570
I think I think in terms of the round I

00:21:49,190 --> 00:21:54,260
think it's similar to the mobile world

00:21:50,570 --> 00:21:57,200
onto Rams are probably secure enough but

00:21:54,260 --> 00:21:59,330
off to probably not it's also the

00:21:57,200 --> 00:22:03,169
non-volatile storage or whether that's

00:21:59,330 --> 00:22:04,850
how secure is that if if that's probable

00:22:03,169 --> 00:22:07,460
then do you need to root the device in

00:22:04,850 --> 00:22:09,620
ROM or is some kind of embedded flash

00:22:07,460 --> 00:22:13,490
solution enough i guess it varies

00:22:09,620 --> 00:22:15,409
depending on the use case so I'm

00:22:13,490 --> 00:22:17,779
triggered by what you say at the start

00:22:15,409 --> 00:22:19,159
so I come as I said my background is in

00:22:17,779 --> 00:22:22,130
the security world and especially in the

00:22:19,159 --> 00:22:25,669
breaking of security world and you say

00:22:22,130 --> 00:22:27,830
well off-chip ram is is not so secure as

00:22:25,669 --> 00:22:30,620
on ship ram but that's of course that's

00:22:27,830 --> 00:22:32,720
that's a path that always is declining

00:22:30,620 --> 00:22:34,820
in the sense that the capabilities the

00:22:32,720 --> 00:22:37,370
public capabilities are increasing more

00:22:34,820 --> 00:22:40,120
and more without needing high-end

00:22:37,370 --> 00:22:44,960
equipment and stuff like that and the

00:22:40,120 --> 00:22:46,820
design of new chips takes years before

00:22:44,960 --> 00:22:48,889
they actually come in to market and most

00:22:46,820 --> 00:22:53,090
IOT devices now are already built to be

00:22:48,889 --> 00:22:56,840
in place for 10 years or not for a year

00:22:53,090 --> 00:22:58,389
in time so um those are things that if

00:22:56,840 --> 00:23:01,580
we care about them we should be

00:22:58,389 --> 00:23:02,860
mitigating now and not say well the

00:23:01,580 --> 00:23:04,960
capabilities aren't there

00:23:02,860 --> 00:23:07,450
you're I at some point it's going to be

00:23:04,960 --> 00:23:10,960
feasible to you know flip the lid off

00:23:07,450 --> 00:23:12,700
and for the average person to get into

00:23:10,960 --> 00:23:14,980
that I guess then we go starting to look

00:23:12,700 --> 00:23:16,450
at you know hardware encrypted Ram

00:23:14,980 --> 00:23:19,600
solutions and things like that but

00:23:16,450 --> 00:23:25,230
that's pretty advanced stuff maybe baby

00:23:19,600 --> 00:23:25,230
steps first yeah baby steps sometimes I

00:23:37,410 --> 00:23:41,049
think that's the that the current

00:23:39,669 --> 00:23:43,809
thought the date they are reasonably

00:23:41,049 --> 00:23:47,590
secure because in order to program those

00:23:43,809 --> 00:23:49,150
you have to either defused or you have

00:23:47,590 --> 00:23:52,510
to directly program which is very hard

00:23:49,150 --> 00:23:58,090
to do but again those capabilities will

00:23:52,510 --> 00:24:00,250
change and yeah so I'm definitely

00:23:58,090 --> 00:24:02,980
wondering what what we as a community

00:24:00,250 --> 00:24:11,799
will do their to make sure that that we

00:24:02,980 --> 00:24:13,480
can mitigate that fact in the future how

00:24:11,799 --> 00:24:16,809
feasible or physical attacks were you

00:24:13,480 --> 00:24:22,049
you know decap you know an SOC to try

00:24:16,809 --> 00:24:25,690
and look at flash inside technology and

00:24:22,049 --> 00:24:31,390
unfortunately quite feasible if you have

00:24:25,690 --> 00:24:37,179
enough budget so if you look at very

00:24:31,390 --> 00:24:39,309
high level SOC designs like the one that

00:24:37,179 --> 00:24:43,360
most governments build for themselves in

00:24:39,309 --> 00:24:45,220
order to do secure crypto in devices the

00:24:43,360 --> 00:24:48,010
nelons did one I was

00:24:45,220 --> 00:24:51,070
I was a project project leader for that

00:24:48,010 --> 00:24:53,320
project you see that there's a whole

00:24:51,070 --> 00:24:55,690
range of threats that are taken into

00:24:53,320 --> 00:24:57,280
account as being feasible either then

00:24:55,690 --> 00:25:01,570
with huge budgets or in the near future

00:24:57,280 --> 00:25:06,720
within 10 your time frame with with way

00:25:01,570 --> 00:25:09,940
less budget and you've already seen

00:25:06,720 --> 00:25:12,940
University attacks on those kind of

00:25:09,940 --> 00:25:14,890
systems where they just scrape off layer

00:25:12,940 --> 00:25:16,419
by layer of the SOC till they get to

00:25:14,890 --> 00:25:18,730
level where you can just with an

00:25:16,419 --> 00:25:22,000
electron microscope read out the current

00:25:18,730 --> 00:25:24,549
state of the memory and that's already

00:25:22,000 --> 00:25:27,220
doable it's very very slow process you

00:25:24,549 --> 00:25:28,870
run around high risk that you break the

00:25:27,220 --> 00:25:34,380
chip but it's something that's already

00:25:28,870 --> 00:25:37,240
being done research environments so

00:25:34,380 --> 00:25:38,740
that's why it begs the question on how

00:25:37,240 --> 00:25:42,520
we're going to keep that up in the

00:25:38,740 --> 00:25:45,610
future but related to that I think was

00:25:42,520 --> 00:25:47,679
what we're already talking about in the

00:25:45,610 --> 00:25:51,309
cortex a world we always have a big

00:25:47,679 --> 00:25:54,159
offline flash of the data include the

00:25:51,309 --> 00:25:56,980
firmware and because it's outside you

00:25:54,159 --> 00:26:00,010
cannot trust the contents and there's

00:25:56,980 --> 00:26:03,070
always a form of a key embedded in the

00:26:00,010 --> 00:26:04,750
in the chip that does decryption of that

00:26:03,070 --> 00:26:06,510
flash because you can't trust it to make

00:26:04,750 --> 00:26:08,679
sure that you have integrity and

00:26:06,510 --> 00:26:11,530
encryption of the data there before you

00:26:08,679 --> 00:26:13,750
start booting it but in the cortex-m

00:26:11,530 --> 00:26:20,190
world that firmware is almost always

00:26:13,750 --> 00:26:24,460
stored in a flash inside the casing

00:26:20,190 --> 00:26:26,169
meaning that basically you can say in

00:26:24,460 --> 00:26:29,049
most cases that you can trust what's in

00:26:26,169 --> 00:26:30,700
there because you as a MC you had to be

00:26:29,049 --> 00:26:32,830
able to you were the one that was

00:26:30,700 --> 00:26:35,320
writing it so if you can make sure that

00:26:32,830 --> 00:26:36,940
nobody can right there and that firmware

00:26:35,320 --> 00:26:38,440
should be be trusted and you don't

00:26:36,940 --> 00:26:40,360
necessarily need to do an integrity

00:26:38,440 --> 00:26:45,190
check at the start when booting and you

00:26:40,360 --> 00:26:48,549
don't need specific keys to load the

00:26:45,190 --> 00:26:49,690
that firmware especially because those

00:26:48,549 --> 00:26:51,190
keys probably will be stored in that

00:26:49,690 --> 00:26:53,010
same flash so you can trust them either

00:26:51,190 --> 00:26:57,039
or you have to have them hardware

00:26:53,010 --> 00:27:00,909
Harper refused so if everything is

00:26:57,039 --> 00:27:02,440
stored on chip and in embedded flash how

00:27:00,909 --> 00:27:04,659
different does that make the boot the

00:27:02,440 --> 00:27:07,059
secure boot model is it true that we can

00:27:04,659 --> 00:27:09,640
just say we trust that so we can always

00:27:07,059 --> 00:27:14,080
start from that image do we need to do

00:27:09,640 --> 00:27:16,330
integrity checks anyway even though we

00:27:14,080 --> 00:27:20,919
think we can make sure that it can never

00:27:16,330 --> 00:27:23,260
be written without our consent and if so

00:27:20,919 --> 00:27:25,029
how can we protect it because what are

00:27:23,260 --> 00:27:27,130
the other source we have for protecting

00:27:25,029 --> 00:27:30,490
the integrity of the flash if it's not

00:27:27,130 --> 00:27:33,399
the flash itself dan I'm going to jump

00:27:30,490 --> 00:27:34,870
in Al's got the steak still yeah so I

00:27:33,399 --> 00:27:37,330
think maybe you could just make some

00:27:34,870 --> 00:27:41,230
assumptions about the boot sequences is

00:27:37,330 --> 00:27:43,630
oh you know implicitly safe but not

00:27:41,230 --> 00:27:46,630
necessarily the firmware updates system

00:27:43,630 --> 00:27:47,980
so you still need to authenticate your

00:27:46,630 --> 00:27:50,710
firmware and if it's coming over the air

00:27:47,980 --> 00:27:52,240
or some things done well you need me so

00:27:50,710 --> 00:27:54,610
you're gonna do you need to authenticate

00:27:52,240 --> 00:27:56,789
during the firmware update process that

00:27:54,610 --> 00:27:59,289
the firmware is an integral yeah it

00:27:56,789 --> 00:28:00,669
firmware but at that point you are the

00:27:59,289 --> 00:28:02,649
only one that can ride it you can write

00:28:00,669 --> 00:28:06,460
it down and then you're again sure that

00:28:02,649 --> 00:28:07,600
what's in the flash is your protected

00:28:06,460 --> 00:28:09,010
integrity if you're making the

00:28:07,600 --> 00:28:11,860
assumption that which was the flash yeah

00:28:09,010 --> 00:28:14,080
yes if we don't just the flash then we

00:28:11,860 --> 00:28:15,520
need a rom or something so but if we

00:28:14,080 --> 00:28:19,179
don't trust the flash what can we do

00:28:15,520 --> 00:28:22,840
that cuz how can we then ever trust

00:28:19,179 --> 00:28:24,940
what's in the flash because what I'm you

00:28:22,840 --> 00:28:26,890
actually referred to stuff early maybe

00:28:24,940 --> 00:28:28,630
do some runtime integrity checking and

00:28:26,890 --> 00:28:30,340
things but what do you what do you use

00:28:28,630 --> 00:28:32,850
to do the integrity check cuz that's

00:28:30,340 --> 00:28:36,070
often stored in the flash as well as

00:28:32,850 --> 00:28:38,529
well I said yeah I think you do need

00:28:36,070 --> 00:28:39,940
some root of trust in terms of some you

00:28:38,529 --> 00:28:42,279
know one time program memory or

00:28:39,940 --> 00:28:44,649
something story yeah but the software

00:28:42,279 --> 00:28:48,010
that runs that that integrity check is

00:28:44,649 --> 00:28:51,309
again in that flash yeah so then you

00:28:48,010 --> 00:28:54,250
need a hardware part in the MCU that

00:28:51,309 --> 00:28:56,200
doesn't initial integrity check based on

00:28:54,250 --> 00:28:58,029
an extra flash that only contains the

00:28:56,200 --> 00:28:59,320
integrity to check that the flash is

00:28:58,029 --> 00:29:00,669
correct and liquid can boot from it

00:28:59,320 --> 00:29:02,340
because otherwise you have a chicken and

00:29:00,669 --> 00:29:04,690
egg problem

00:29:02,340 --> 00:29:15,520
you're right uncle I've no thought this

00:29:04,690 --> 00:29:19,720
round thinking out loud so a TPM is an

00:29:15,520 --> 00:29:22,080
option within so forearm you have some

00:29:19,720 --> 00:29:23,920
form you have a number of external

00:29:22,080 --> 00:29:28,059
coprocessors that you can add like the

00:29:23,920 --> 00:29:30,160
crypto cell that that arm has that could

00:29:28,059 --> 00:29:32,940
potentially do that but it's not

00:29:30,160 --> 00:29:35,740
something that's now by default in a

00:29:32,940 --> 00:29:38,610
standard MCU so that's something we need

00:29:35,740 --> 00:29:38,610
to think about that

00:29:45,540 --> 00:29:51,160
could but the costs of a TPM are

00:29:48,130 --> 00:29:57,310
significantly higher than then what's

00:29:51,160 --> 00:29:59,140
currently in the on the board in all

00:29:57,310 --> 00:30:01,360
decisions the depth that have attended

00:29:59,140 --> 00:30:04,150
in this conference they have been

00:30:01,360 --> 00:30:05,950
focusing on the device security what are

00:30:04,150 --> 00:30:08,230
the what are the models we are going to

00:30:05,950 --> 00:30:09,820
put on the server side I'm sure there'll

00:30:08,230 --> 00:30:12,610
be there should be some teacher rrb

00:30:09,820 --> 00:30:16,420
assuming that it is inherently secure on

00:30:12,610 --> 00:30:19,150
the on the on the server side so what do

00:30:16,420 --> 00:30:21,610
you mean with what is inherently secure

00:30:19,150 --> 00:30:25,420
so very so right now the service that we

00:30:21,610 --> 00:30:27,490
have in non IIT servers they cater to a

00:30:25,420 --> 00:30:31,090
limited number of devices compared to

00:30:27,490 --> 00:30:33,430
what I tea is going to look like when

00:30:31,090 --> 00:30:35,380
when we the way we believe I it is going

00:30:33,430 --> 00:30:37,750
to be is like hundreds of devices per

00:30:35,380 --> 00:30:42,580
person or maybe not that much but in

00:30:37,750 --> 00:30:44,830
that scale are we seeing any any changes

00:30:42,580 --> 00:30:47,440
happening on the way servers are handled

00:30:44,830 --> 00:30:49,660
with that respect or are we but we

00:30:47,440 --> 00:30:51,790
confident that the server side set up

00:30:49,660 --> 00:30:54,190
the way it is right now is secure enough

00:30:51,790 --> 00:30:58,060
and it can cater to the IOT needs

00:30:54,190 --> 00:31:00,240
security needs as well yeah that's

00:30:58,060 --> 00:31:06,820
definitely an interesting question I'm

00:31:00,240 --> 00:31:08,800
not sure that I can answer that we have

00:31:06,820 --> 00:31:10,420
to do a lot of different things in on

00:31:08,800 --> 00:31:13,480
the server side as well I mean the cloud

00:31:10,420 --> 00:31:15,400
is going to changing the way we we

00:31:13,480 --> 00:31:17,800
transfer data and how protection is is

00:31:15,400 --> 00:31:19,660
done it also introduces a lot of new

00:31:17,800 --> 00:31:22,650
security risks that weren't there when

00:31:19,660 --> 00:31:25,630
you have your own private server rooms

00:31:22,650 --> 00:31:28,180
especially related to the fact that we

00:31:25,630 --> 00:31:31,810
are now creating a large large number of

00:31:28,180 --> 00:31:34,119
hives that are very interesting targets

00:31:31,810 --> 00:31:37,389
for state actors and

00:31:34,119 --> 00:31:40,059
and hacker groups and ever to take down

00:31:37,389 --> 00:31:43,479
or to infiltrate I mean if you're able

00:31:40,059 --> 00:31:47,109
to infiltrate the Amazon AWS core

00:31:43,479 --> 00:31:49,119
infrastructure you suddenly have a huge

00:31:47,109 --> 00:31:51,129
struggle with access to data that

00:31:49,119 --> 00:31:55,029
normally is a scale that would normally

00:31:51,129 --> 00:31:56,859
not be impossible so yeah I think we

00:31:55,029 --> 00:31:58,509
need to do a lot of extra protection in

00:31:56,859 --> 00:31:59,889
the cloud as well but that's a whole

00:31:58,509 --> 00:32:01,839
different discussion that I would like

00:31:59,889 --> 00:32:06,099
to take somewhere else than in the

00:32:01,839 --> 00:32:08,049
cortex and discussion here I'm curious

00:32:06,099 --> 00:32:10,059
getting up to any of the hardware

00:32:08,049 --> 00:32:13,389
vendors in the room about to the

00:32:10,059 --> 00:32:17,859
question on there as far as products

00:32:13,389 --> 00:32:20,019
that they may have today that do secure

00:32:17,859 --> 00:32:22,989
boot in the microcontroller space and

00:32:20,019 --> 00:32:26,399
did they also do encrypted boot or is it

00:32:22,989 --> 00:32:26,399
just a validation today

00:32:28,999 --> 00:32:35,719
a cortex aches cortex a so i don't i

00:32:34,189 --> 00:32:37,669
don't have experience with the MS and

00:32:35,719 --> 00:32:40,669
all the other thing but we do to secure

00:32:37,669 --> 00:32:42,709
boot and in people look at a couple

00:32:40,669 --> 00:32:44,539
different approaches for one is is in

00:32:42,709 --> 00:32:47,149
fact we haven't talked about fuses and

00:32:44,539 --> 00:32:50,479
that's an approach that some of these

00:32:47,149 --> 00:32:52,969
ships have used to tour the fine of the

00:32:50,479 --> 00:32:54,949
very very highest root key or not you

00:32:52,969 --> 00:33:00,249
restore the key with a lot of times do

00:32:54,949 --> 00:33:00,249
is they'll store a hash of the root yeah

00:33:18,720 --> 00:33:23,460
yeah I was just thinking your comment

00:33:20,820 --> 00:33:27,559
about you know booting internally our

00:33:23,460 --> 00:33:30,360
Wi-Fi chip boots externally so it has a

00:33:27,559 --> 00:33:33,120
secure external spy flash that it

00:33:30,360 --> 00:33:36,179
cryptographically signs and boots from

00:33:33,120 --> 00:33:40,950
so we do have at least one instance that

00:33:36,179 --> 00:33:51,230
works that way so we don't have more

00:33:40,950 --> 00:33:51,230
things like that inside both

00:34:15,909 --> 00:34:27,429
sorry so my view is I is in the

00:34:23,540 --> 00:34:29,480
discussion that I had with dad it's

00:34:27,429 --> 00:34:32,899
inherently there's an issue there

00:34:29,480 --> 00:34:34,580
without any extra hardware because you

00:34:32,899 --> 00:34:36,980
can't trust the flash if you don't trust

00:34:34,580 --> 00:34:39,350
the flash then all hell breaks loose

00:34:36,980 --> 00:34:42,409
because there's no way to trust the

00:34:39,350 --> 00:34:45,350
flash so the only way to protect against

00:34:42,409 --> 00:34:47,570
that and mechanisms that are used in

00:34:45,350 --> 00:34:49,810
other systems to do that is similar to

00:34:47,570 --> 00:34:52,100
what mark just described is to have

00:34:49,810 --> 00:34:54,530
hardware capabilities in front of that

00:34:52,100 --> 00:34:56,149
flash to make sure that both encrypted

00:34:54,530 --> 00:34:58,280
and integrity check that moment so that

00:34:56,149 --> 00:35:02,090
at least you can see if it's externally

00:34:58,280 --> 00:35:04,790
manipulated but at that point after

00:35:02,090 --> 00:35:06,590
you've done that there's nothing more

00:35:04,790 --> 00:35:08,810
you can do than to just trust it and to

00:35:06,590 --> 00:35:11,930
make sure that your update process is as

00:35:08,810 --> 00:35:13,430
secure as needed because the moment that

00:35:11,930 --> 00:35:16,280
something goes wrong at an update

00:35:13,430 --> 00:35:18,050
process it's under the wire gets

00:35:16,280 --> 00:35:20,650
encrypted and integrity checked and put

00:35:18,050 --> 00:35:20,650
into that flash

00:35:29,520 --> 00:35:31,580
you

00:35:41,049 --> 00:35:46,819
so it depends how much you can trust the

00:35:43,490 --> 00:35:48,619
secure boot and your secure update

00:35:46,819 --> 00:35:51,410
process which can probably rewrite your

00:35:48,619 --> 00:35:54,710
secure boot process so in the end it all

00:35:51,410 --> 00:35:57,079
hangs together as as as a large number

00:35:54,710 --> 00:36:01,040
of different items which there is a

00:35:57,079 --> 00:36:03,619
solution which introduces a new security

00:36:01,040 --> 00:36:05,780
issue which is you sign it at the at the

00:36:03,619 --> 00:36:07,790
cloud side and provide the integrity of

00:36:05,780 --> 00:36:09,290
the cloud side and that is put into the

00:36:07,790 --> 00:36:12,650
flashing you're sure but that requires

00:36:09,290 --> 00:36:14,750
you to know each in each devices

00:36:12,650 --> 00:36:17,510
integrity encryption keys which means

00:36:14,750 --> 00:36:19,130
you have a central throw where all the

00:36:17,510 --> 00:36:22,309
data is available to hack all your

00:36:19,130 --> 00:36:24,950
devices so that's not pretty either so

00:36:22,309 --> 00:36:26,329
yeah it's a it's a hard problem to solve

00:36:24,950 --> 00:36:30,369
that's why it was interesting to hear

00:36:26,329 --> 00:36:37,700
the different opinions of people here

00:36:30,369 --> 00:36:39,559
moving on there's a lot of features in

00:36:37,700 --> 00:36:41,809
the a world security infrastructure that

00:36:39,559 --> 00:36:43,460
we saw yesterday at the if you were at

00:36:41,809 --> 00:36:45,470
the PSA presentation there was a whole

00:36:43,460 --> 00:36:48,200
load of boxes with all kinds of

00:36:45,470 --> 00:36:49,670
capabilities and features that are part

00:36:48,200 --> 00:36:54,079
of the cortex a security infrastructure

00:36:49,670 --> 00:36:58,490
and which one of those do we expect to

00:36:54,079 --> 00:37:00,500
actually be able to map to cortex-m and

00:36:58,490 --> 00:37:03,470
do we need them or are all the

00:37:00,500 --> 00:37:05,150
capabilities we have on cortex AR those

00:37:03,470 --> 00:37:07,430
are also capability we need on cortex-m

00:37:05,150 --> 00:37:08,990
because there's capabilities with

00:37:07,430 --> 00:37:10,940
regards to drm and stuff that we

00:37:08,990 --> 00:37:13,130
probably don't need but there's parts

00:37:10,940 --> 00:37:15,589
like secure boot that we do need but the

00:37:13,130 --> 00:37:17,599
process is wholly different but there's

00:37:15,589 --> 00:37:20,510
a whole load of other items that might

00:37:17,599 --> 00:37:23,260
be interesting amateur if anybody has an

00:37:20,510 --> 00:37:23,260
opinion about that

00:37:26,660 --> 00:37:39,000
and otherwise we're moving to the next

00:37:28,680 --> 00:37:42,720
question I am so as said we have

00:37:39,000 --> 00:37:46,050
developed a first prototype of a way of

00:37:42,720 --> 00:37:49,520
doing a secure microkernel on cortex-m

00:37:46,050 --> 00:37:53,180
devices using the hardware capabilities

00:37:49,520 --> 00:37:57,900
for instance the mpu in a v7m

00:37:53,180 --> 00:37:59,910
architecture and trust zone for v8n as

00:37:57,900 --> 00:38:02,010
the base capability to do some form of

00:37:59,910 --> 00:38:04,950
hardware separation hardware enforcement

00:38:02,010 --> 00:38:09,090
but also hardware acceleration of of

00:38:04,950 --> 00:38:11,220
that of those those boxes meaning you

00:38:09,090 --> 00:38:13,500
can have some forms trust between the

00:38:11,220 --> 00:38:17,460
boxes and they can we be you can have

00:38:13,500 --> 00:38:19,080
mutual distrust full engagements but it

00:38:17,460 --> 00:38:22,170
also means that you you as a developer

00:38:19,080 --> 00:38:25,140
because we don't have multiple layers

00:38:22,170 --> 00:38:27,810
and dynamic loading and stuff like that

00:38:25,140 --> 00:38:29,910
you have as a developer active

00:38:27,810 --> 00:38:31,920
involvement to be able to secure your

00:38:29,910 --> 00:38:35,760
system for each app and secure library

00:38:31,920 --> 00:38:38,100
to to have to protect it so there's code

00:38:35,760 --> 00:38:40,650
required insecure libraries and code

00:38:38,100 --> 00:38:44,400
required in applications calling secure

00:38:40,650 --> 00:38:47,640
code in order to be able to use that so

00:38:44,400 --> 00:38:50,160
for instance I this is just one little

00:38:47,640 --> 00:38:53,390
blob out of a big presentation we did a

00:38:50,160 --> 00:38:56,790
while back on the amid micro visor and

00:38:53,390 --> 00:38:58,740
which is public open source it so they

00:38:56,790 --> 00:39:01,530
won't github so if you want to dive into

00:38:58,740 --> 00:39:04,350
that deeper I suggest you you have a

00:39:01,530 --> 00:39:07,610
look there but at the bottom it's rather

00:39:04,350 --> 00:39:10,080
smaller but you see two micro visor box

00:39:07,610 --> 00:39:11,910
configuration lines that you as a

00:39:10,080 --> 00:39:14,280
developer need to add in order to make

00:39:11,910 --> 00:39:17,760
sure that you you're able to call a

00:39:14,280 --> 00:39:19,740
secure function or to have a secure main

00:39:17,760 --> 00:39:26,310
loop and that's not part of the regular

00:39:19,740 --> 00:39:30,180
system so that means that something that

00:39:26,310 --> 00:39:32,100
is very well abstracted away in for

00:39:30,180 --> 00:39:34,020
instance Linux where you don't have to

00:39:32,100 --> 00:39:36,300
think about security that's it's already

00:39:34,020 --> 00:39:38,370
by default provided and maybe you have

00:39:36,300 --> 00:39:40,530
to do some some acl's on

00:39:38,370 --> 00:39:41,880
on a kernel level but that's that's what

00:39:40,530 --> 00:39:44,910
you need to do and then everything runs

00:39:41,880 --> 00:39:47,010
here in the code you have to make

00:39:44,910 --> 00:39:48,420
changes and you have to add lines and

00:39:47,010 --> 00:39:50,130
defines to make sure that your code

00:39:48,420 --> 00:39:51,930
would work so it requires an intimate

00:39:50,130 --> 00:39:54,390
knowledge of the security process of the

00:39:51,930 --> 00:39:58,590
system which is not required on things

00:39:54,390 --> 00:40:02,880
like a Linux system so that begs the

00:39:58,590 --> 00:40:06,240
question if that is needed is it

00:40:02,880 --> 00:40:08,370
acceptable to ask active involvement

00:40:06,240 --> 00:40:12,360
from the developers of secure libraries

00:40:08,370 --> 00:40:16,080
and applications to to actually create a

00:40:12,360 --> 00:40:18,450
secure IOT device firmware or is that a

00:40:16,080 --> 00:40:20,970
bird and that's too much and do we need

00:40:18,450 --> 00:40:23,460
to think about other ways of making this

00:40:20,970 --> 00:40:25,170
happen automatically how come believe it

00:40:23,460 --> 00:40:28,010
or maybe impossible and constrained

00:40:25,170 --> 00:40:28,010
device that might be

00:40:37,550 --> 00:40:43,890
so to repeat my gut response is that

00:40:41,610 --> 00:40:48,090
it's too much to ask for two reasons the

00:40:43,890 --> 00:40:50,160
first one is it's easy to get wrong and

00:40:48,090 --> 00:40:54,170
the second one is because of the product

00:40:50,160 --> 00:40:57,150
managers the product development

00:40:54,170 --> 00:40:58,500
environments that people work in so the

00:40:57,150 --> 00:41:00,270
constraints there if they're told that

00:40:58,500 --> 00:41:02,160
you know there's that what there are

00:41:00,270 --> 00:41:05,070
core pieces that they have to work on

00:41:02,160 --> 00:41:07,790
have to add something else more often

00:41:05,070 --> 00:41:07,790
than not it gets dropped

00:41:10,589 --> 00:41:16,339
sorry Matt can you go to a bishop I

00:41:18,170 --> 00:41:24,479
didn't say that time I think is the

00:41:22,440 --> 00:41:26,369
other way round for me if you had an

00:41:24,479 --> 00:41:29,130
infrastructure which does not allow me

00:41:26,369 --> 00:41:32,279
to modify it completely for my system a

00:41:29,130 --> 00:41:33,960
system designer I'm no happy so you are

00:41:32,279 --> 00:41:37,259
defining a microwave a framework to

00:41:33,960 --> 00:41:39,299
adding security into things and it's

00:41:37,259 --> 00:41:41,099
methodology but you have implemented it

00:41:39,299 --> 00:41:43,249
in one way there could be others coming

00:41:41,099 --> 00:41:46,380
along based on some sort of industry

00:41:43,249 --> 00:41:48,539
standardization system designers will

00:41:46,380 --> 00:41:50,700
always want some control over what they

00:41:48,539 --> 00:41:52,069
finally put in there and no one's going

00:41:50,700 --> 00:41:54,839
to come into forums and say we think

00:41:52,069 --> 00:41:56,789
exactly X why's that are threats to our

00:41:54,839 --> 00:42:00,989
device they will analyze it in

00:41:56,789 --> 00:42:03,299
themselves so definition of ACL in micro

00:42:00,989 --> 00:42:04,799
visor and similar things in going

00:42:03,299 --> 00:42:06,779
forward I think that will be part of

00:42:04,799 --> 00:42:09,479
system design work for specific

00:42:06,779 --> 00:42:13,229
applications so i wouldn't think that

00:42:09,479 --> 00:42:14,999
that's a burden but you know you could

00:42:13,229 --> 00:42:16,710
define it in a way which basically adds

00:42:14,999 --> 00:42:18,450
a lot of headache or you can define it

00:42:16,710 --> 00:42:19,739
away which is bit more logical and

00:42:18,450 --> 00:42:22,289
that's that's where i think just the

00:42:19,739 --> 00:42:25,969
balance is I think I would like that

00:42:22,289 --> 00:42:29,190
freedom rather than the burden okay cool

00:42:25,969 --> 00:42:31,440
of course the reason why it's it's in

00:42:29,190 --> 00:42:34,229
code in these kind of systems is because

00:42:31,440 --> 00:42:35,670
we have static linking and everything

00:42:34,229 --> 00:42:38,190
just needs to be in place we can't do

00:42:35,670 --> 00:42:40,920
things at run time to add these kinds of

00:42:38,190 --> 00:42:46,830
protections which normally you can do on

00:42:40,920 --> 00:42:51,540
lineage kind systems anybody else i'm

00:42:46,830 --> 00:42:55,650
not sure what the time is yeah so it's

00:42:51,540 --> 00:42:57,630
even close we're gonna go so with that

00:42:55,650 --> 00:43:00,780
them probably I'd like to thank all of

00:42:57,630 --> 00:43:02,970
you for your knowledge and sharing of

00:43:00,780 --> 00:43:03,810
that and making sure that I think

00:43:02,970 --> 00:43:05,910
everybody here has a better

00:43:03,810 --> 00:43:09,420
understanding of what the cortex and

00:43:05,910 --> 00:43:12,900
security world will partake to make to

00:43:09,420 --> 00:43:14,550
make a better place I'm punks look what

00:43:12,900 --> 00:43:16,080
plug your you're going to be in the

00:43:14,550 --> 00:43:19,110
hacking room with embed boards this

00:43:16,080 --> 00:43:20,400
afternoon is that right yes and Sam is

00:43:19,110 --> 00:43:23,430
going to be around for a little while or

00:43:20,400 --> 00:43:25,470
you until five so you so if you guys

00:43:23,430 --> 00:43:26,370
want to go play with in bed and talk to

00:43:25,470 --> 00:43:32,150
these guys some more they're going to be

00:43:26,370 --> 00:43:32,150
in the light hacking room yep thanks

00:43:38,360 --> 00:43:40,420

YouTube URL: https://www.youtube.com/watch?v=AQrmbX6R1aY


