Title: TEE Linux kernel support and open source security [Free Webinar]
Publication date: 2017-10-25
Playlist: Open Source Security
Description: 
	Learn the latest status on TEE support in Linux, development of secure applications with OP-TEE & the challenges of Linux kernel upstreaming. 

📃 Presentation: https://www.slideshare.net/linaroorg/tee-kernel-support-is-now-upstream-what-this-means-for-open-source-security-76943254/linaroorg/tee-kernel-support-is-now-upstream-what-this-means-for-open-source-security-76943254
🗓 Date: Wednesday 14 June 2017
🕛 Time: 12:00 Noon UTC
⏱ Duration: 50 minutes (including Q&A)
👉 Link to register: linaro.co/webinar01


TEE security infrastructure is now upstream in the Linux kernel, thanks to the hard work of many people in the ARM open source ecosystem. In this upcoming webinar, Joakim Bech and Jens Wiklander of the Linaro Security Working Group explain:

‣ Why upstream Linux kernel driver support is an important milestone.
‣ The relationship with specifications such as GlobalPlatform.
‣ A recap of the design principles for the TEE driver.
‣ How to get involved with TEE development.

This webinar is based on the work of the Linaro Security Working Group. Their work helps Linaro achieve its mission of providing upstream open source support for the ARM ecosystem. The webinar will be of interest to developers and engineering managers who would like the latest status on TEE support in Linux, particularly those looking to develop secure applications with e.g. OP-TEE. It’s also a great case study for those interested in the challenges of Linux kernel upstreaming. There will be the opportunity to ask questions before, during and after the webinar.

🎙 Speakers:
Joakim Bech, Security Working Group Tech Lead, Linaro
Jens Wiklander, Security Working Group Engineer & Upstream Driver Author, Linaro​

🎯 Moderator:
Bill Fletcher, EMEA Field Engineering, Linaro

✨ Register here
http://linaro.co/webinar01


🤔 Unable to attend? Register now and you will receive an email with the recorded presentation after the webinar.


For more information on...
On Linaro - Leading Collaboration in the ARM Ecosystem - linaro.org
On OP-TEE - the TEE in Linux using the ARM® TrustZone® technology op-tee.org


----------------------------------------------


Videos & Presentation
--
Introduction to OP-TEE
--
A great introduction to OP-TEE security written from the standpoint of Automotive Grade Linux. It's only 13 slides with some great diagrams explaining trusted execution, secure boot and isolation.
#Automotive #AGL #OP-TEE #Linux
https://www.slideshare.net/YannickGicquel/introduction-to-optee-26-may-2016

--
OP-TEE for Beginners and Porting Review
--
Explains the building blocks involved in Security including TrustZone, OP-TEE, Trusted Firmware etc. Goes into detail on how Secure Boot Works.. and Why. Explains how a simple secure Trusted Application interacts with OP-TEE and works. Brief overview on how to port OP-TEE to an ARM platform. Opens discussions for Potential Challenges and Hardware limitations and how they can be overcome.
#TrustedApplication #Trustzone 
http://connect.linaro.org/resource/hkg15/hkg15-311-op-tee-for-beginners-and-porting-review/

--
Raspberry Pi3, OP-TEE and JTAG debugging
--
ARM TrustZone is a critical technology for securing IoT devices and systems. But awareness of TrustZone and its benefits lags within the maker community as well as among enterprises. The first step to solving this problem is lowering the cost of access. Sequitur Labs and Linaro have joined forces to address this problem by making a port of OP-TEE available on the Raspberry Pi 3. The presentation covers the value of TrustZone for securing IoT and how customers can learn more through this joint effort.
#RaspberryPi, #OP-TEE, #JTAG, #TrustZone
http://connect.linaro.org/resource/las16/las16-111/

--
Android Widevine on OP-TEE
--
Widevine is a Google DRM technology that works across various desktop and mobile platforms.Here's a practical explanation covering porting Widevine DRM technology to run using OP-TEE.
#DRM #Widevine #Android #AOSP #OP-TEE
http://connect.linaro.org/resource/las16/las16-406/

--
A Gentle Introduction to Trusted Execution and OP-TEE
--
Smart connected devices such as mobile phones, tablets and Digital TVs are required to handle data with strong security and confidentiality requirements. A “Trusted Execution Environment” (TEE) provides an environment for processing data securely, protected from normal platform applications. This talk is intended as an introduction to Trusted Execution, and the open-source Trusted Execution Environment OP-TEE in particular. It introduces the GlobalPlatform TEE Specifications, explains how Trusted Execution is implemented by ARM TrustZone and OP-TEE, and outlines how trusted boot software manages the secure boot of an ARM platform. Finally, it gives some pointers on how to get started with OP-TEE.
http://connect.linaro.org/resource/bkk16/bkk16-110/

-~-~~-~~~-~~-~-
Please watch: "Linaro Connect SFO17 - Linaro Segment Group - Andrea Gallo" 
https://www.youtube.com/watch?v=4Iw50ZApbsI
-~-~~-~~~-~~-~-
Captions: 
	00:00:01,490 --> 00:00:06,960
hey welcome to

00:00:03,179 --> 00:00:09,900
Linares opti webinar I'm Bill Fletcher

00:00:06,960 --> 00:00:12,960
from llanera EMEA engineering this

00:00:09,900 --> 00:00:15,269
webinar is entitled tea kernel support

00:00:12,960 --> 00:00:18,420
is now upstream and what this means for

00:00:15,269 --> 00:00:22,890
open source security I'm based in

00:00:18,420 --> 00:00:25,680
Cambridge in the UK Linares headquarters

00:00:22,890 --> 00:00:27,990
I've got Lenora colleagues on this

00:00:25,680 --> 00:00:30,179
webinar today he'll talk from the

00:00:27,990 --> 00:00:36,680
standpoint of the lonardo security

00:00:30,179 --> 00:00:43,170
working group so if we make a start just

00:00:36,680 --> 00:00:45,059
wait for the slides to move on so during

00:00:43,170 --> 00:00:52,500
this during this webinar we'll be

00:00:45,059 --> 00:00:57,000
running a couple of polls first of all

00:00:52,500 --> 00:01:00,390
we'd like to would like to know if if

00:00:57,000 --> 00:01:03,030
the audio quality is good for you so if

00:01:00,390 --> 00:01:05,280
you could if you could click on the on

00:01:03,030 --> 00:01:07,590
the poll which appears on one of the

00:01:05,280 --> 00:01:12,750
tabs in the webinar tool or let us know

00:01:07,590 --> 00:01:14,460
if you can hear everything ok so getting

00:01:12,750 --> 00:01:16,830
a few sponsors in there that's great so

00:01:14,460 --> 00:01:18,750
good the tool is working and we do have

00:01:16,830 --> 00:01:21,119
chat running if you've just joined the

00:01:18,750 --> 00:01:23,580
webinar and you'd like to maybe just

00:01:21,119 --> 00:01:25,350
check it out then feel free to type the

00:01:23,580 --> 00:01:27,119
name of the city or the country that

00:01:25,350 --> 00:01:32,520
you're you're joining from we'd be

00:01:27,119 --> 00:01:34,320
interested to see so I'd like to

00:01:32,520 --> 00:01:37,200
introduce today's webinar subject which

00:01:34,320 --> 00:01:39,659
is trusted execution environment a

00:01:37,200 --> 00:01:42,990
software isolation environment for

00:01:39,659 --> 00:01:45,000
executing security applications we're

00:01:42,990 --> 00:01:48,509
going to talk about an implementation

00:01:45,000 --> 00:01:50,700
which was originally based on arm trust

00:01:48,509 --> 00:01:52,439
zone technology for hardware isolation

00:01:50,700 --> 00:01:54,299
between the trusted and non trusted

00:01:52,439 --> 00:01:59,490
worlds and there's a little diagram on

00:01:54,299 --> 00:02:00,600
the slide which I hope you can see we're

00:01:59,490 --> 00:02:02,369
also going to be talking about an

00:02:00,600 --> 00:02:06,420
open-source project which is hosted by

00:02:02,369 --> 00:02:08,429
Lyn ro that's at opti that org and we

00:02:06,420 --> 00:02:11,160
chose to do the webinar at this time

00:02:08,429 --> 00:02:13,860
because the driver source for the TE has

00:02:11,160 --> 00:02:15,630
been recently accepted upstream

00:02:13,860 --> 00:02:17,790
the 4:12 Linux kernel and that's

00:02:15,630 --> 00:02:21,210
something we're really excited about and

00:02:17,790 --> 00:02:22,620
we really want people to share with so

00:02:21,210 --> 00:02:28,620
if we just move on to the next slide and

00:02:22,620 --> 00:02:30,810
who is this webinar for this webinar is

00:02:28,620 --> 00:02:31,530
for members of the software development

00:02:30,810 --> 00:02:34,920
community

00:02:31,530 --> 00:02:37,050
so that's developers managers architects

00:02:34,920 --> 00:02:38,550
products owners people who are

00:02:37,050 --> 00:02:40,260
developing secure applications and the

00:02:38,550 --> 00:02:42,540
Linux people who are contributing to

00:02:40,260 --> 00:02:45,180
open source people who are working in

00:02:42,540 --> 00:02:47,820
the arm ecosystem people who are

00:02:45,180 --> 00:02:53,610
interested in up streaming and anyone

00:02:47,820 --> 00:02:55,260
with supported hardware on the previous

00:02:53,610 --> 00:02:57,989
slide there are a couple of boards that

00:02:55,260 --> 00:02:59,700
you might recognize and so if you've got

00:02:57,989 --> 00:03:01,860
one of those boards great then you have

00:02:59,700 --> 00:03:03,480
a board which which can run opti and

00:03:01,860 --> 00:03:07,200
even if you don't have a target board

00:03:03,480 --> 00:03:09,989
then we do have a root to emulate opti

00:03:07,200 --> 00:03:15,450
with with creme you so you can get

00:03:09,989 --> 00:03:19,350
started right away so what we'll cover

00:03:15,450 --> 00:03:22,709
in this webinar is a backgrounder on

00:03:19,350 --> 00:03:25,530
opti we look at the components that make

00:03:22,709 --> 00:03:28,530
it up we look at the design principles

00:03:25,530 --> 00:03:30,209
behind it and why it's important we look

00:03:28,530 --> 00:03:32,340
at how the code got upstream into the

00:03:30,209 --> 00:03:36,480
kernel and we'll look at how to get

00:03:32,340 --> 00:03:40,470
involved now one key thing is that it's

00:03:36,480 --> 00:03:41,970
a webinar it's interactive we hope that

00:03:40,470 --> 00:03:44,730
the value that you get from this webinar

00:03:41,970 --> 00:03:46,950
is from questions that you asked in real

00:03:44,730 --> 00:03:49,230
time and we answer to the best of our

00:03:46,950 --> 00:03:52,200
ability so there will be a Q&A at the

00:03:49,230 --> 00:03:53,880
end of this presentation you can raise a

00:03:52,200 --> 00:03:56,880
question at any time as we go along in

00:03:53,880 --> 00:03:58,560
the chat window we'll try to answer as

00:03:56,880 --> 00:04:00,120
many questions as we can at the end of

00:03:58,560 --> 00:04:02,130
the presentation

00:04:00,120 --> 00:04:04,769
it does help as if you can mark a

00:04:02,130 --> 00:04:06,540
comment as a question rather than chat

00:04:04,769 --> 00:04:09,540
reserved there's a little graphic there

00:04:06,540 --> 00:04:11,820
to show you how to do it so please pitch

00:04:09,540 --> 00:04:16,410
in in the chat window and keep some good

00:04:11,820 --> 00:04:18,919
questions coming so without further ado

00:04:16,410 --> 00:04:22,169
I'd like to move on to introduce today's

00:04:18,919 --> 00:04:24,750
presenters for the webinar and they're

00:04:22,169 --> 00:04:28,289
from Linares security working group they

00:04:24,750 --> 00:04:30,960
are jockeying bek security experts

00:04:28,289 --> 00:04:33,090
ahead of group and yen cervical under

00:04:30,960 --> 00:04:34,979
who is the security working group

00:04:33,090 --> 00:04:37,740
engineer and he's the author of the

00:04:34,979 --> 00:04:41,520
upstream driver so I'd like to hand over

00:04:37,740 --> 00:04:43,560
right now to your team to kick off the

00:04:41,520 --> 00:04:45,529
technical part of this webinar thanks

00:04:43,560 --> 00:04:48,090
very much

00:04:45,529 --> 00:04:53,069
thank you Bill I hope you can hear me

00:04:48,090 --> 00:04:54,900
too so yeah as bill mentioned this

00:04:53,069 --> 00:04:57,659
webinar was a little bit about spreading

00:04:54,900 --> 00:05:01,379
the news about getting the T framework

00:04:57,659 --> 00:05:04,680
into the kernel for f12 and also give

00:05:01,379 --> 00:05:06,240
people a chance to ask questions of the

00:05:04,680 --> 00:05:11,400
work we have been doing with the drivers

00:05:06,240 --> 00:05:16,199
r1 so on the next slide I'm going to

00:05:11,400 --> 00:05:17,969
start with opti and the reason we're

00:05:16,199 --> 00:05:20,580
doing that is I would like to give you

00:05:17,969 --> 00:05:23,430
some kind of context to why we have been

00:05:20,580 --> 00:05:25,259
working with this T driver and how we

00:05:23,430 --> 00:05:28,139
are working with things on the databases

00:05:25,259 --> 00:05:30,419
and so on so a short introduction don't

00:05:28,139 --> 00:05:32,819
be here with just four slides now and

00:05:30,419 --> 00:05:35,219
usually I have 24 it's like something

00:05:32,819 --> 00:05:39,419
when I talk about opti so this is a very

00:05:35,219 --> 00:05:42,719
compressed form so opti is an open

00:05:39,419 --> 00:05:45,419
source trust execution environment it's

00:05:42,719 --> 00:05:48,479
a global platform based T so that means

00:05:45,419 --> 00:05:50,819
that we conform to the specifications

00:05:48,479 --> 00:05:53,789
developed by global platform it has

00:05:50,819 --> 00:05:57,120
origins in a proprietary T solution

00:05:53,789 --> 00:06:01,050
coming from s T so if we look at the

00:05:57,120 --> 00:06:02,759
timeline we started in 2010 when this

00:06:01,050 --> 00:06:05,399
were started to be developed biased

00:06:02,759 --> 00:06:08,250
Ericsson and they developed it for

00:06:05,399 --> 00:06:10,949
roughly three years and during that

00:06:08,250 --> 00:06:12,839
period they were also taking part of

00:06:10,949 --> 00:06:16,469
global platform compliance testing on a

00:06:12,839 --> 00:06:20,969
few devices and then they ceased

00:06:16,469 --> 00:06:23,969
operations in 2013 so esti took over the

00:06:20,969 --> 00:06:25,740
ownership of the T driver and at the

00:06:23,969 --> 00:06:28,199
same time roughly in all started to

00:06:25,740 --> 00:06:32,310
thinking about forming security working

00:06:28,199 --> 00:06:34,789
group and one of the major tasks that we

00:06:32,310 --> 00:06:40,199
had in front of us was working with

00:06:34,789 --> 00:06:41,279
making T less fragmented than done but

00:06:40,199 --> 00:06:47,909
it was in

00:06:41,279 --> 00:06:50,629
past so in the end we started working

00:06:47,909 --> 00:06:55,679
together with s T on the T solution and

00:06:50,629 --> 00:06:57,329
we we rewrote the build system we re

00:06:55,679 --> 00:07:00,479
implemented a monitor

00:06:57,329 --> 00:07:02,459
we added little encrypt as a crypto

00:07:00,479 --> 00:07:05,219
library so we replaced some things that

00:07:02,459 --> 00:07:14,629
we rely C's reasons you couldn't keep it

00:07:05,219 --> 00:07:19,169
in notes from the old solution then in

00:07:14,629 --> 00:07:22,379
the summer of 2014 we published

00:07:19,169 --> 00:07:25,129
everything and get up and it's been

00:07:22,379 --> 00:07:28,259
there since then everyone can access

00:07:25,129 --> 00:07:30,449
more or less everything there are a few

00:07:28,259 --> 00:07:33,539
components that are under NDA for

00:07:30,449 --> 00:07:35,939
example white wine related things but

00:07:33,539 --> 00:07:39,149
otherwise everything else is is on

00:07:35,939 --> 00:07:41,939
github you can find everything and by

00:07:39,149 --> 00:07:44,549
the end of 2015 we transfer the

00:07:41,939 --> 00:07:47,899
ownership from st to Lenora so today

00:07:44,549 --> 00:07:51,259
Lenora both owned and maintained optic

00:07:47,899 --> 00:07:51,259
next slide please

00:07:53,659 --> 00:07:59,939
the question is where do up to run today

00:07:56,939 --> 00:08:03,599
and you can find it running on a mix of

00:07:59,939 --> 00:08:08,669
both Army 7 and V 8 devices both 32 and

00:08:03,599 --> 00:08:10,619
64-bit and we tend to work mainly with

00:08:08,669 --> 00:08:13,229
development devices and I listed a few

00:08:10,619 --> 00:08:16,349
here June aboard Raspberry Pi key and so

00:08:13,229 --> 00:08:18,689
on but we have members and non-members

00:08:16,349 --> 00:08:22,829
using it also in tablets mobile phones

00:08:18,689 --> 00:08:25,379
set up boxes and even cars today and I

00:08:22,829 --> 00:08:27,659
took a screenshot of the platform

00:08:25,379 --> 00:08:30,599
supported on github and you can see here

00:08:27,659 --> 00:08:33,769
is roughly 20 different platform

00:08:30,599 --> 00:08:36,089
supported today and it's everything from

00:08:33,769 --> 00:08:38,339
devices that are publicly available to

00:08:36,089 --> 00:08:40,319
things that you only can get access to

00:08:38,339 --> 00:08:44,029
if you or partner with the company

00:08:40,319 --> 00:08:46,290
itself and we know quite a few our the

00:08:44,029 --> 00:08:48,300
platforms also that are running on opti

00:08:46,290 --> 00:08:50,370
or using up to you one another way today

00:08:48,300 --> 00:08:52,259
but they haven't upstream leads for one

00:08:50,370 --> 00:08:54,779
another reason in some cases it can be

00:08:52,259 --> 00:08:56,779
licenses it could be that they have

00:08:54,779 --> 00:08:59,670
you've product being developed and they

00:08:56,779 --> 00:09:03,449
don't want to talk about it publicly yet

00:08:59,670 --> 00:09:05,730
and yeah there could be other reasons

00:09:03,449 --> 00:09:08,040
also but in general we try to encourage

00:09:05,730 --> 00:09:10,319
people to as soon as you can pry it up

00:09:08,040 --> 00:09:15,540
scream it and we will get it into the

00:09:10,319 --> 00:09:18,649
regular releases and so on alright so

00:09:15,540 --> 00:09:18,649
next slide please

00:09:19,579 --> 00:09:25,019
the question that quite often comes up

00:09:22,230 --> 00:09:28,559
is about some kind of certification and

00:09:25,019 --> 00:09:32,220
since opti is a global platform based

00:09:28,559 --> 00:09:34,740
trust execution environment people quite

00:09:32,220 --> 00:09:38,519
often ask about this and the thing is

00:09:34,740 --> 00:09:40,889
that you can't certify or qualify just a

00:09:38,519 --> 00:09:42,959
software you always do that as a

00:09:40,889 --> 00:09:43,439
combination with both software and

00:09:42,959 --> 00:09:48,899
hardware

00:09:43,439 --> 00:09:51,180
so that's puts us in a situation here

00:09:48,899 --> 00:09:53,459
since Lenore oh we're not manufacturing

00:09:51,180 --> 00:09:56,610
on a device on our own we are using the

00:09:53,459 --> 00:09:59,540
devices former members that means that

00:09:56,610 --> 00:10:01,889
we are not actively taking part of any

00:09:59,540 --> 00:10:04,050
certification scheme ourselves in in

00:10:01,889 --> 00:10:06,240
Ouro but the members of Lenora are using

00:10:04,050 --> 00:10:09,569
opti they are one that are active in

00:10:06,240 --> 00:10:12,209
this and here I listed two areas as I

00:10:09,569 --> 00:10:15,839
called the proprietary area and open

00:10:12,209 --> 00:10:17,550
source era and during the first era st

00:10:15,839 --> 00:10:19,980
ericsson was involved in doing some

00:10:17,550 --> 00:10:22,639
compliance tests and as i mentioned a

00:10:19,980 --> 00:10:27,240
couple of slides ago they pass this in

00:10:22,639 --> 00:10:29,509
2013 so but the more the oldest becomes

00:10:27,240 --> 00:10:32,129
the less value it has but it has been

00:10:29,509 --> 00:10:34,949
through some compliance tests in the

00:10:32,129 --> 00:10:37,079
past and at the same time global

00:10:34,949 --> 00:10:41,309
platform they have developed a test

00:10:37,079 --> 00:10:47,910
suite which people are using as some

00:10:41,309 --> 00:10:50,069
kind of pretest to be able to to get

00:10:47,910 --> 00:10:52,050
prepared for the compliance and

00:10:50,069 --> 00:10:53,939
qualification tests and we know that

00:10:52,050 --> 00:10:57,120
quite a few of our members are running

00:10:53,939 --> 00:10:59,850
this on regular basis and it happens

00:10:57,120 --> 00:11:03,089
also that they find issues and quite

00:10:59,850 --> 00:11:04,589
often they send back patches to us or we

00:11:03,089 --> 00:11:07,259
do patches what they have described

00:11:04,589 --> 00:11:08,250
problem for us and we're all good to go

00:11:07,259 --> 00:11:12,210
again

00:11:08,250 --> 00:11:14,130
so we don't really know if this will

00:11:12,210 --> 00:11:17,160
change not if we will get involved in

00:11:14,130 --> 00:11:20,070
some compliance test or qualification we

00:11:17,160 --> 00:11:22,230
have been discussing our audits just

00:11:20,070 --> 00:11:26,010
reviewing the code and so on but that's

00:11:22,230 --> 00:11:30,330
a little bit different so it's not

00:11:26,010 --> 00:11:34,500
really the same question here so all

00:11:30,330 --> 00:11:36,480
right so what kind of software do we

00:11:34,500 --> 00:11:39,570
have in opti today so this is the

00:11:36,480 --> 00:11:42,570
classic picture you have when you show a

00:11:39,570 --> 00:11:46,170
normal world secure world and use of

00:11:42,570 --> 00:11:49,560
space and the privileged mode so on the

00:11:46,170 --> 00:11:52,650
left side we have normal world and I

00:11:49,560 --> 00:11:54,600
guess most of the people here today know

00:11:52,650 --> 00:11:57,930
what that is but that's the normal

00:11:54,600 --> 00:12:00,480
environment where you're using Linux

00:11:57,930 --> 00:12:03,090
basically so user space is a normal

00:12:00,480 --> 00:12:05,760
program that you run and the user space

00:12:03,090 --> 00:12:08,760
we have object client which is the

00:12:05,760 --> 00:12:10,920
library that you're using to communicate

00:12:08,760 --> 00:12:13,580
with the trust execution environment

00:12:10,920 --> 00:12:16,500
itself so you have all the functions to

00:12:13,580 --> 00:12:19,950
open session and context enroll commands

00:12:16,500 --> 00:12:22,170
and so on and in the same gift we have a

00:12:19,950 --> 00:12:23,820
daemon running which we call T sub

00:12:22,170 --> 00:12:28,320
account and that is something that is

00:12:23,820 --> 00:12:31,410
used to serve secure side we have a file

00:12:28,320 --> 00:12:33,630
system access and a few other things we

00:12:31,410 --> 00:12:36,030
also have the opt e test that is our

00:12:33,630 --> 00:12:40,860
host application for the test suite that

00:12:36,030 --> 00:12:43,440
we call X tests X test itself is proper

00:12:40,860 --> 00:12:46,710
big today it's standalone and you find

00:12:43,440 --> 00:12:49,860
everything in github also it's when you

00:12:46,710 --> 00:12:52,350
run it with all tests enable you get

00:12:49,860 --> 00:12:55,530
more than 40,000 different sub tests

00:12:52,350 --> 00:12:59,010
performed when they're running

00:12:55,530 --> 00:13:01,290
everything if we go down the stack we

00:12:59,010 --> 00:13:04,410
have Linux kernel and that's mainly what

00:13:01,290 --> 00:13:06,720
this is about today we have the T

00:13:04,410 --> 00:13:10,980
framework itself and of course we are

00:13:06,720 --> 00:13:13,950
our own opti driver and further down in

00:13:10,980 --> 00:13:17,190
the stack the secure monitor on v7 you

00:13:13,950 --> 00:13:19,620
will find the monitor in Optio s but if

00:13:17,190 --> 00:13:21,300
you're running on a v8 then we're using

00:13:19,620 --> 00:13:25,560
the secure monitor from

00:13:21,300 --> 00:13:29,279
I'm just a former product instead on

00:13:25,560 --> 00:13:32,190
secure side of TOS this is where we have

00:13:29,279 --> 00:13:35,430
all the main secret sauce and we'd say

00:13:32,190 --> 00:13:39,450
that this is the big part of D so you've

00:13:35,430 --> 00:13:42,800
conceded some kind of small operating

00:13:39,450 --> 00:13:49,950
system serving France applications with

00:13:42,800 --> 00:13:54,959
access to secure secure features we have

00:13:49,950 --> 00:13:58,079
the cryptography secure storage secure

00:13:54,959 --> 00:14:00,300
time and so on so that that's the big

00:13:58,079 --> 00:14:01,800
thing that we have and on top of that we

00:14:00,300 --> 00:14:05,279
of course have the trust applications

00:14:01,800 --> 00:14:07,560
and in our case you will find a few

00:14:05,279 --> 00:14:10,079
trust applications in the test suite and

00:14:07,560 --> 00:14:14,310
we also have a few first applications

00:14:10,079 --> 00:14:15,990
just for people to get started so this

00:14:14,310 --> 00:14:20,060
is the entire stack where we have the

00:14:15,990 --> 00:14:25,380
components in object so I think we can

00:14:20,060 --> 00:14:28,050
move on so just a reminder here if you

00:14:25,380 --> 00:14:30,390
have any questions as bill said feel

00:14:28,050 --> 00:14:33,360
free to send them in the chat and if you

00:14:30,390 --> 00:14:37,950
can mark them as a question also and we

00:14:33,360 --> 00:14:40,410
will try to answer it later on and from

00:14:37,950 --> 00:14:45,350
now on I will continue with the T

00:14:40,410 --> 00:14:51,360
generic framework it's been accepted for

00:14:45,350 --> 00:14:53,760
kernel four to twelve and we're quite

00:14:51,360 --> 00:14:57,120
happy to have its integral I mean it's

00:14:53,760 --> 00:14:59,640
took quite a while to get the patches

00:14:57,120 --> 00:15:01,829
merged we would talk a little bit more

00:14:59,640 --> 00:15:03,420
about the data but it's it took almost

00:15:01,829 --> 00:15:05,250
two years from without the first patch

00:15:03,420 --> 00:15:08,820
set to it finally got accepted in the

00:15:05,250 --> 00:15:12,360
kernel and we are going to give some

00:15:08,820 --> 00:15:15,980
kind of high-level overview here of what

00:15:12,360 --> 00:15:19,470
it is and so on so no deep technical

00:15:15,980 --> 00:15:22,110
discussion here right now so the first

00:15:19,470 --> 00:15:24,449
question is why should we have a T frame

00:15:22,110 --> 00:15:27,000
working colonel and colonel is

00:15:24,449 --> 00:15:29,130
everywhere so by having it in the kernel

00:15:27,000 --> 00:15:32,540
it will automatically be exposed to

00:15:29,130 --> 00:15:34,520
basically anything running Linux and

00:15:32,540 --> 00:15:38,839
another benefit is the

00:15:34,520 --> 00:15:39,589
the source code has been reviewed quite

00:15:38,839 --> 00:15:43,940
thoroughly

00:15:39,589 --> 00:15:47,510
we need that coming from a world not

00:15:43,940 --> 00:15:50,149
with working with open source I learn to

00:15:47,510 --> 00:15:52,790
see some differences and my comment here

00:15:50,149 --> 00:15:55,040
is that kernel experts are not as nice

00:15:52,790 --> 00:15:57,170
as your corporate friend I mean they're

00:15:55,040 --> 00:15:58,550
nice guys but they're also very honest

00:15:57,170 --> 00:16:01,010
so if they don't like what they're

00:15:58,550 --> 00:16:03,050
seeing they will actually they will tell

00:16:01,010 --> 00:16:03,740
you that this is no good you you need to

00:16:03,050 --> 00:16:07,040
change it

00:16:03,740 --> 00:16:11,660
so as an end result of this the the

00:16:07,040 --> 00:16:14,270
final code is usually quite good we have

00:16:11,660 --> 00:16:16,550
the maintenance when you get it

00:16:14,270 --> 00:16:19,370
merge the kernel someone will maintain

00:16:16,550 --> 00:16:22,190
this code for you and our kernel

00:16:19,370 --> 00:16:24,230
maintains in this case it will be gents

00:16:22,190 --> 00:16:26,990
that is on the call today who will be

00:16:24,230 --> 00:16:30,500
the maintainer for this the new

00:16:26,990 --> 00:16:32,330
framework and so on we will of course

00:16:30,500 --> 00:16:35,930
try to run it when we are doing the

00:16:32,330 --> 00:16:39,470
optic releases and so on and when it

00:16:35,930 --> 00:16:41,209
comes to free as in paying someone this

00:16:39,470 --> 00:16:44,720
is the work that has been sponsored by

00:16:41,209 --> 00:16:48,310
the members of lenore oh so we are

00:16:44,720 --> 00:16:51,100
grateful to have them doing this for us

00:16:48,310 --> 00:16:54,980
another thing that we know is that the

00:16:51,100 --> 00:16:57,380
SSE vendors OMS they prefer to have

00:16:54,980 --> 00:17:00,140
single tree to pull everything from they

00:16:57,380 --> 00:17:01,490
it's more work for them if they need to

00:17:00,140 --> 00:17:03,829
pull patches from a lot of different

00:17:01,490 --> 00:17:06,170
trees and they get in those sorts of

00:17:03,829 --> 00:17:08,630
mergers and so on so having it

00:17:06,170 --> 00:17:11,270
officially available in an upstream tree

00:17:08,630 --> 00:17:15,079
is something that they really like so

00:17:11,270 --> 00:17:17,569
that's what we try to do and then what

00:17:15,079 --> 00:17:21,100
are the use cases or a use cases is it

00:17:17,569 --> 00:17:23,660
only DRM and the answer to that is no

00:17:21,100 --> 00:17:25,520
most of the people think about theorem

00:17:23,660 --> 00:17:28,189
when they hear about trust execution

00:17:25,520 --> 00:17:29,900
environments and so on but there are

00:17:28,189 --> 00:17:31,670
more use cases you can have a hard drive

00:17:29,900 --> 00:17:34,730
encryption for example how do you deal

00:17:31,670 --> 00:17:36,890
with the keys you maybe need to

00:17:34,730 --> 00:17:42,170
authenticate the device for one another

00:17:36,890 --> 00:17:43,760
e so there could be existing frameworks

00:17:42,170 --> 00:17:45,590
in kernel for example we have something

00:17:43,760 --> 00:17:48,169
called ima integrity measurement

00:17:45,590 --> 00:17:50,989
architecture today it uses TB

00:17:48,169 --> 00:17:54,440
but we think you could use a tea if you

00:17:50,989 --> 00:17:58,759
want it instead and so on so there is

00:17:54,440 --> 00:18:01,009
more things to it than just drm but in

00:17:58,759 --> 00:18:03,109
the end why a tea framework in colonel

00:18:01,009 --> 00:18:06,499
it is about unifying the tea protocols

00:18:03,109 --> 00:18:11,149
and that leads to this particular slide

00:18:06,499 --> 00:18:13,309
here so global platform the open forum

00:18:11,149 --> 00:18:15,279
have been doing tons of good stuff for

00:18:13,309 --> 00:18:18,009
the tea ecosystem and they are

00:18:15,279 --> 00:18:20,450
continuously working with making more

00:18:18,009 --> 00:18:23,480
standards and specifications and so on

00:18:20,450 --> 00:18:26,059
so they're doing really great work and

00:18:23,480 --> 00:18:29,119
so on but the thing is that that they

00:18:26,059 --> 00:18:31,730
haven't defined anything about the

00:18:29,119 --> 00:18:34,039
layers in between so if you look at it

00:18:31,730 --> 00:18:37,519
the image we had and I've also tried to

00:18:34,039 --> 00:18:39,919
make it visible here they are mandating

00:18:37,519 --> 00:18:41,840
how you should talk to the tea from user

00:18:39,919 --> 00:18:45,139
space in normal world and that's the

00:18:41,840 --> 00:18:47,299
so-called client API and on the other

00:18:45,139 --> 00:18:49,220
end you have the transit vacations they

00:18:47,299 --> 00:18:51,859
also have a well defined API how to

00:18:49,220 --> 00:18:53,629
communicate with the tea itself but for

00:18:51,859 --> 00:18:55,460
the communication in between there is

00:18:53,629 --> 00:18:58,659
nothing being said how that should be

00:18:55,460 --> 00:19:02,840
done so this is the first step trying to

00:18:58,659 --> 00:19:05,059
to to make something that could be used

00:19:02,840 --> 00:19:07,999
in a more common way between different

00:19:05,059 --> 00:19:11,480
team vendors here are more to do through

00:19:07,999 --> 00:19:13,399
it but this is a start so the answer is

00:19:11,480 --> 00:19:15,200
that the tea driver is not a global

00:19:13,399 --> 00:19:18,379
platform tea driver and the framework is

00:19:15,200 --> 00:19:20,690
not a global platform framework but opti

00:19:18,379 --> 00:19:23,389
as I said is a global platform tea

00:19:20,690 --> 00:19:25,159
so how do we do it how do we manage with

00:19:23,389 --> 00:19:29,299
it the thing is that we have put

00:19:25,159 --> 00:19:32,320
everything on a higher level so the the

00:19:29,299 --> 00:19:35,960
tea the protocol that we are using is

00:19:32,320 --> 00:19:42,080
put on top of this instead so we have

00:19:35,960 --> 00:19:45,259
our own protocol in this case so that

00:19:42,080 --> 00:19:49,489
was a quick introduction to that and if

00:19:45,259 --> 00:19:53,299
we jump over to the design principles so

00:19:49,489 --> 00:19:56,059
we have tried to not make it too big

00:19:53,299 --> 00:20:00,169
keep it small and simple so you will

00:19:56,059 --> 00:20:01,700
only find a few our control calls in the

00:20:00,169 --> 00:20:03,860
driver today

00:20:01,700 --> 00:20:07,309
we came up with those after having

00:20:03,860 --> 00:20:09,980
discussions both internally people at SD

00:20:07,309 --> 00:20:14,120
and we talked to some people that used

00:20:09,980 --> 00:20:15,919
to work for our tea vendors also so we

00:20:14,120 --> 00:20:18,230
concluded that this small set of our

00:20:15,919 --> 00:20:21,110
controls is what you need to have when

00:20:18,230 --> 00:20:22,850
you're communicating with tea eventually

00:20:21,110 --> 00:20:25,460
it will be extended in the future but

00:20:22,850 --> 00:20:26,929
this is what we have right now and the

00:20:25,460 --> 00:20:29,029
idea is that the driver and the

00:20:26,929 --> 00:20:31,940
framework everything you're sending to

00:20:29,029 --> 00:20:34,970
it the information data and so on that

00:20:31,940 --> 00:20:36,679
should be opaque the driver so it should

00:20:34,970 --> 00:20:39,260
just work at some kind of transport

00:20:36,679 --> 00:20:40,639
layer between normal world user space

00:20:39,260 --> 00:20:43,639
and the secure site

00:20:40,639 --> 00:20:45,380
and the novel design goal we have the

00:20:43,639 --> 00:20:47,299
work that we should reuse the existing

00:20:45,380 --> 00:20:52,519
infrastructure in the kernel so we

00:20:47,299 --> 00:20:54,490
should try to invent or new the new

00:20:52,519 --> 00:20:58,460
types and so on so we have tried to

00:20:54,490 --> 00:21:00,110
reuse as much as possible and another

00:20:58,460 --> 00:21:02,750
requirement was of course to having

00:21:00,110 --> 00:21:04,610
multi-core support and that is how it's

00:21:02,750 --> 00:21:10,639
working today you can run it on all

00:21:04,610 --> 00:21:14,120
course independently so the thing is

00:21:10,639 --> 00:21:17,570
that a tea driver uses this new

00:21:14,120 --> 00:21:19,970
framework and today it's only updating

00:21:17,570 --> 00:21:22,490
that use this new framework and we hope

00:21:19,970 --> 00:21:29,389
that our momentous trying to do with in

00:21:22,490 --> 00:21:31,250
the near future also next thank you so

00:21:29,389 --> 00:21:35,510
the first eye control we have is

00:21:31,250 --> 00:21:38,960
diversion and you use that to identify a

00:21:35,510 --> 00:21:40,730
specific T so if you're running RT you

00:21:38,960 --> 00:21:42,799
will have up to you you can have a core

00:21:40,730 --> 00:21:45,590
constituency you can Restonic tea and

00:21:42,799 --> 00:21:49,070
crusty or whatever this is what you use

00:21:45,590 --> 00:21:51,919
that for and you can also tell what kind

00:21:49,070 --> 00:21:54,080
of capabilities you have in your tea

00:21:51,919 --> 00:21:57,200
what what kind of functionality we

00:21:54,080 --> 00:21:59,029
actually support so in this case we have

00:21:57,200 --> 00:22:01,669
a specific listed here for optic

00:21:59,029 --> 00:22:06,260
capabilities and we also have one for

00:22:01,669 --> 00:22:08,470
global platform this case next slide

00:22:06,260 --> 00:22:08,470
please

00:22:13,350 --> 00:22:18,820
so in the global platform slide I

00:22:16,480 --> 00:22:22,659
mentioned that you will see quite a lot

00:22:18,820 --> 00:22:24,909
of ideas coming from even though it's

00:22:22,659 --> 00:22:26,890
not a global platform framework you can

00:22:24,909 --> 00:22:29,470
see ideas coming from it and here is one

00:22:26,890 --> 00:22:31,510
good example the session handling when

00:22:29,470 --> 00:22:33,399
you actually open up the logical channel

00:22:31,510 --> 00:22:36,789
between user space and cross

00:22:33,399 --> 00:22:39,100
certification so you have two functions

00:22:36,789 --> 00:22:42,130
here one to open the session when you do

00:22:39,100 --> 00:22:44,230
that you go all the way down through the

00:22:42,130 --> 00:22:46,390
stack over to the secure side and to the

00:22:44,230 --> 00:22:50,740
trust application and you open the

00:22:46,390 --> 00:22:52,090
channel and then you keep it open until

00:22:50,740 --> 00:22:53,830
you decide to not use the cross

00:22:52,090 --> 00:22:57,039
application anymore and then you close

00:22:53,830 --> 00:22:58,529
the session in this case so and we think

00:22:57,039 --> 00:23:02,830
that this is something that is needed

00:22:58,529 --> 00:23:07,600
for any tea vendor and it should be

00:23:02,830 --> 00:23:10,919
something that everyone is using jump to

00:23:07,600 --> 00:23:10,919
the next next slide please

00:23:11,279 --> 00:23:16,299
for the commands there is a castle

00:23:13,960 --> 00:23:19,289
command I mean it could be that you need

00:23:16,299 --> 00:23:22,720
to abort someone going operation and

00:23:19,289 --> 00:23:24,640
that is the way how you should tell the

00:23:22,720 --> 00:23:28,510
tea to stop doing what it's doing and

00:23:24,640 --> 00:23:30,669
return back to user space and then we

00:23:28,510 --> 00:23:33,549
have the Evoque command that's the big

00:23:30,669 --> 00:23:36,370
command that is actually doing the real

00:23:33,549 --> 00:23:38,919
work so when you have opened a session

00:23:36,370 --> 00:23:43,840
and so on you are intended to send Evo

00:23:38,919 --> 00:23:46,630
commands and you do that by telling what

00:23:43,840 --> 00:23:48,970
kind of classification you intend to run

00:23:46,630 --> 00:23:52,950
and you usually do that by some user ID

00:23:48,970 --> 00:23:57,010
or UUID and you also have some

00:23:52,950 --> 00:24:01,000
well-defined identifier for to fine-tune

00:23:57,010 --> 00:24:03,669
either you're going to call and we

00:24:01,000 --> 00:24:06,909
believe that this is the way that most

00:24:03,669 --> 00:24:08,830
of the people are using or communicating

00:24:06,909 --> 00:24:10,320
with us execution environment so I don't

00:24:08,830 --> 00:24:15,820
think this is something unique for us

00:24:10,320 --> 00:24:18,850
but the thing is that with a limited set

00:24:15,820 --> 00:24:21,610
of AI controls that we have today there

00:24:18,850 --> 00:24:23,190
could be a need for quite big changes in

00:24:21,610 --> 00:24:25,320
some cases so I try to look

00:24:23,190 --> 00:24:28,860
they for other drivers to see what they

00:24:25,320 --> 00:24:30,810
had and I can see and if we had people

00:24:28,860 --> 00:24:32,880
from Qualcomm and Tristana care please

00:24:30,810 --> 00:24:34,560
correct me later on and I would correct

00:24:32,880 --> 00:24:37,710
this when we send out the slides and so

00:24:34,560 --> 00:24:43,130
on but I found this Tristana theorem I

00:24:37,710 --> 00:24:46,470
find 17 i/o controls I found a Qualcomm

00:24:43,130 --> 00:24:48,990
QC driver and they had more than 40

00:24:46,470 --> 00:24:50,670
different I controls so what they need

00:24:48,990 --> 00:24:53,490
to do instead is to bring everything

00:24:50,670 --> 00:24:59,130
down one level and tunnel it in the mill

00:24:53,490 --> 00:25:03,270
command is that to do is the final two

00:24:59,130 --> 00:25:05,160
commands that we have or the AI controls

00:25:03,270 --> 00:25:07,560
for the supplicants and the supplicant

00:25:05,160 --> 00:25:10,080
is something you also believe that all T

00:25:07,560 --> 00:25:11,400
vendors have in one another way and the

00:25:10,080 --> 00:25:13,470
supplicant as I mentioned in the

00:25:11,400 --> 00:25:15,540
beginning of the talk was that you have

00:25:13,470 --> 00:25:18,360
some kind of demon running in normal

00:25:15,540 --> 00:25:20,670
world user space serving secure side

00:25:18,360 --> 00:25:24,300
we've access to things that it usually

00:25:20,670 --> 00:25:27,180
don't have access to so at least a file

00:25:24,300 --> 00:25:30,990
system access here or PMB an RPM is

00:25:27,180 --> 00:25:33,150
really good examples is in Linux if you

00:25:30,990 --> 00:25:35,370
would try to talk to our pamby directly

00:25:33,150 --> 00:25:38,190
then you will probably getting some kind

00:25:35,370 --> 00:25:40,350
of conflict with the MMC controller so

00:25:38,190 --> 00:25:43,260
in this case we're actually going all

00:25:40,350 --> 00:25:46,200
the way back from the secure side to

00:25:43,260 --> 00:25:54,720
know what a normal world talks to the

00:25:46,200 --> 00:25:58,850
normal emmc framework and so on yep I

00:25:54,720 --> 00:25:58,850
think we can move on to the next slide

00:26:01,820 --> 00:26:07,590
the opti part or the driver either using

00:26:05,460 --> 00:26:09,740
the framework of course also needs a

00:26:07,590 --> 00:26:13,560
probe function just as anything else

00:26:09,740 --> 00:26:16,070
so if you have a look at the driver that

00:26:13,560 --> 00:26:19,320
we have submitted now you can see that

00:26:16,070 --> 00:26:21,330
the probe function starts by figuring

00:26:19,320 --> 00:26:23,880
out what kind of evoke function should

00:26:21,330 --> 00:26:27,210
be used to be a normal SMC call or

00:26:23,880 --> 00:26:30,600
should it be a HP sequel we do some

00:26:27,210 --> 00:26:34,070
sanity checking they use UID revision

00:26:30,600 --> 00:26:36,950
and capabilities to ensure that

00:26:34,070 --> 00:26:39,410
we're running what we intend to run we

00:26:36,950 --> 00:26:41,330
configure some shared memory and then

00:26:39,410 --> 00:26:43,460
we're using the new framework to

00:26:41,330 --> 00:26:45,680
actually allocate the T devices and we

00:26:43,460 --> 00:26:48,410
do that both for the clients connecting

00:26:45,680 --> 00:26:54,080
to the T and we do it for the

00:26:48,410 --> 00:26:56,360
supplicants also and in this case the

00:26:54,080 --> 00:26:57,890
probe function would not be called if

00:26:56,360 --> 00:27:00,320
there is nothing in the device free

00:26:57,890 --> 00:27:02,060
block so what the right side here on

00:27:00,320 --> 00:27:03,740
leave it you can see how how it will

00:27:02,060 --> 00:27:07,520
look like when it should be probed and

00:27:03,740 --> 00:27:10,550
with all this in and compile and so on

00:27:07,520 --> 00:27:12,560
it will automatically probe the driver

00:27:10,550 --> 00:27:26,660
and it would be ready to run when you

00:27:12,560 --> 00:27:29,270
boot up all right and once again I I

00:27:26,660 --> 00:27:30,980
just want to remember about please ask

00:27:29,270 --> 00:27:36,200
question we will try to ask them when

00:27:30,980 --> 00:27:41,750
I'm done with this so chad is near

00:27:36,200 --> 00:27:43,580
subscribing of T framework the driver

00:27:41,750 --> 00:27:46,010
and framework that you will find today

00:27:43,580 --> 00:27:48,770
Linux kernel I think that that is the

00:27:46,010 --> 00:27:51,020
fourth version of the driver and

00:27:48,770 --> 00:27:54,940
framework that we are writing it was

00:27:51,020 --> 00:27:58,430
written twice at st ericsson and st

00:27:54,940 --> 00:28:01,940
actually three times if we twice at st

00:27:58,430 --> 00:28:04,400
Eric's on once at st and then yen's we

00:28:01,940 --> 00:28:09,710
wrote it more less entirely and now when

00:28:04,400 --> 00:28:11,750
when we updated the driver also so if we

00:28:09,710 --> 00:28:13,910
take that then we actually have been

00:28:11,750 --> 00:28:17,120
working with this driver for seven years

00:28:13,910 --> 00:28:20,270
but if we just include the work when Yin

00:28:17,120 --> 00:28:23,210
started submitting the first patch we

00:28:20,270 --> 00:28:25,760
are talking about two years ago the

00:28:23,210 --> 00:28:29,720
beginning of 2015 was when we said the

00:28:25,760 --> 00:28:33,590
first percent and 16 revisions later it

00:28:29,720 --> 00:28:37,160
finally got accepted and why did it take

00:28:33,590 --> 00:28:39,740
that much time yeah one reason is that

00:28:37,160 --> 00:28:42,650
the T framework is little over or T

00:28:39,740 --> 00:28:44,720
solution is not only a T driver it's as

00:28:42,650 --> 00:28:47,150
balanced as I said over a couple of

00:28:44,720 --> 00:28:47,920
different layers so just by reading the

00:28:47,150 --> 00:28:50,800
code

00:28:47,920 --> 00:28:52,660
driver T framework it could be hard to

00:28:50,800 --> 00:28:55,110
actually know what's going on if you if

00:28:52,660 --> 00:28:57,430
you don't not into this already and

00:28:55,110 --> 00:28:59,530
Colonel there are a lot of experts and

00:28:57,430 --> 00:29:01,420
they know every detail about everything

00:28:59,530 --> 00:29:03,790
but there aren't that very security

00:29:01,420 --> 00:29:07,150
experts so it was a bit hard for them to

00:29:03,790 --> 00:29:09,430
see all this code coming and to give

00:29:07,150 --> 00:29:13,240
their opinion of you if it was good or

00:29:09,430 --> 00:29:15,730
bad another thing that we've said is

00:29:13,240 --> 00:29:18,460
that getting people to review was pretty

00:29:15,730 --> 00:29:21,490
hard we have good contacts with all

00:29:18,460 --> 00:29:23,170
members in Oro and we try to remind

00:29:21,490 --> 00:29:24,850
people and so on but in some cases that

00:29:23,170 --> 00:29:26,920
could be corporate policies saying that

00:29:24,850 --> 00:29:31,870
you're not allowed to reply to a mailing

00:29:26,920 --> 00:29:34,870
list with your company name and in some

00:29:31,870 --> 00:29:36,490
cases people are allowed but they don't

00:29:34,870 --> 00:29:39,040
really know how to do it so if you're

00:29:36,490 --> 00:29:42,550
not subscribing to mailing list you can

00:29:39,040 --> 00:29:44,320
still reply using email to this mailing

00:29:42,550 --> 00:29:46,360
list but it is a little bit complicated

00:29:44,320 --> 00:29:48,910
you need to download the patch using a

00:29:46,360 --> 00:29:50,740
web tool and open it up in your email

00:29:48,910 --> 00:29:54,010
program and it could be a little bit

00:29:50,740 --> 00:29:57,520
tricky so getting it people to review

00:29:54,010 --> 00:30:01,440
was actually a bit hard so but we had a

00:29:57,520 --> 00:30:01,440
quite nice reviews at the end at least

00:30:01,590 --> 00:30:08,530
we also face the chicken and egg problem

00:30:04,660 --> 00:30:10,480
there is some kind of mentality in Linux

00:30:08,530 --> 00:30:13,540
that you should submit submit or

00:30:10,480 --> 00:30:17,110
resubmit often so small patches and send

00:30:13,540 --> 00:30:20,170
often instead but at the same time one

00:30:17,110 --> 00:30:22,060
of the main maintainer si told us you

00:30:20,170 --> 00:30:24,850
must have enough codes you can actually

00:30:22,060 --> 00:30:27,850
prove that it is working and someone is

00:30:24,850 --> 00:30:31,180
actually using what you find submit so

00:30:27,850 --> 00:30:33,310
we were forced to actually include quite

00:30:31,180 --> 00:30:34,930
a lot of patches and I think this also

00:30:33,310 --> 00:30:37,090
was one of the ways the white was hard

00:30:34,930 --> 00:30:40,630
to get people to review it since there

00:30:37,090 --> 00:30:45,280
was a lot of code actually in the

00:30:40,630 --> 00:30:47,320
initial patch set and at the same time

00:30:45,280 --> 00:30:49,030
as we've been doing this we have been

00:30:47,320 --> 00:30:52,600
working with our kernel features so we

00:30:49,030 --> 00:30:53,890
have been forced to keep our features we

00:30:52,600 --> 00:30:55,990
have been working with on a separate

00:30:53,890 --> 00:30:58,330
branches and those are features that we

00:30:55,990 --> 00:31:00,190
are going to try to upstream as soon as

00:30:58,330 --> 00:31:03,190
possible now so we have a

00:31:00,190 --> 00:31:05,050
yeah a big list of patches out of tree

00:31:03,190 --> 00:31:09,040
that we are going to try to bring in now

00:31:05,050 --> 00:31:10,900
and submit one-by-one and finally

00:31:09,040 --> 00:31:13,480
getting enough input from our team

00:31:10,900 --> 00:31:15,250
members as I mentioned we talked to some

00:31:13,480 --> 00:31:18,010
people that used to work without tea

00:31:15,250 --> 00:31:19,660
vendors and so on but we would have

00:31:18,010 --> 00:31:23,650
hoped that we would get more feedback

00:31:19,660 --> 00:31:26,200
from more people but with the driver in

00:31:23,650 --> 00:31:28,840
the tree now we hope that people will

00:31:26,200 --> 00:31:35,010
stop paying attention to it and give the

00:31:28,840 --> 00:31:40,750
feedback or mainly distance alone so

00:31:35,010 --> 00:31:42,490
then we are closing to the end and if

00:31:40,750 --> 00:31:44,260
people are interesting contribute to

00:31:42,490 --> 00:31:46,690
this driver if you've never done

00:31:44,260 --> 00:31:48,820
anything before then I suggest that you

00:31:46,690 --> 00:31:51,760
try it out you can try it out with opti

00:31:48,820 --> 00:31:52,770
for example and if you're already a tea

00:31:51,760 --> 00:31:55,630
vendor

00:31:52,770 --> 00:31:57,490
please have a look at the mailing lists

00:31:55,630 --> 00:32:00,700
and when we are sending packages review

00:31:57,490 --> 00:32:02,470
them get feedback and if you can try to

00:32:00,700 --> 00:32:05,800
rewrite your own driver to use the new

00:32:02,470 --> 00:32:08,320
framework and again I remind you about

00:32:05,800 --> 00:32:10,180
reviewing patches it's always important

00:32:08,320 --> 00:32:14,830
there's always lack of people reviewing

00:32:10,180 --> 00:32:17,320
things the question is should you talk

00:32:14,830 --> 00:32:21,520
directly to the normal people or not if

00:32:17,320 --> 00:32:23,920
it is about opti related mainly then

00:32:21,520 --> 00:32:27,430
sure why not I mean you can reach out to

00:32:23,920 --> 00:32:30,700
us email you can go to github whatever

00:32:27,430 --> 00:32:34,180
IRC and so on but if it is about the tea

00:32:30,700 --> 00:32:36,940
framework inlet of Colonel please use

00:32:34,180 --> 00:32:38,770
the current mailing list instead that's

00:32:36,940 --> 00:32:42,100
the that's the traditional way of

00:32:38,770 --> 00:32:43,570
communicating in lyrics and the list

00:32:42,100 --> 00:32:48,010
that you should subscribe to in that

00:32:43,570 --> 00:32:49,360
case is listed here on this slide so I

00:32:48,010 --> 00:32:56,560
think that should answer the question

00:32:49,360 --> 00:33:00,280
how to contribute and final slide the

00:32:56,560 --> 00:33:03,820
first slide had a question what does

00:33:00,280 --> 00:33:07,420
this mean to open-source security as I

00:33:03,820 --> 00:33:10,050
have tried to say we are trying to unify

00:33:07,420 --> 00:33:13,060
how about unify the three protocols

00:33:10,050 --> 00:33:13,810
again global platform have done tons of

00:33:13,060 --> 00:33:17,260
good work

00:33:13,810 --> 00:33:19,300
with the echo system 40 but there are

00:33:17,260 --> 00:33:23,320
some gaps in between that needs to be

00:33:19,300 --> 00:33:27,730
filled still fragmentation we have a

00:33:23,320 --> 00:33:29,980
couple of players now then they are not

00:33:27,730 --> 00:33:31,740
really compatible I think from a global

00:33:29,980 --> 00:33:37,300
platform point of view if you try to

00:33:31,740 --> 00:33:40,240
compile a transportation for example

00:33:37,300 --> 00:33:42,730
here crash sonic take an opt-in

00:33:40,240 --> 00:33:45,070
pacification and compile it with the

00:33:42,730 --> 00:33:47,620
Tristana tool chain I would imagine it

00:33:45,070 --> 00:33:50,260
would work without too many issues and

00:33:47,620 --> 00:33:52,210
vice versa and so on but then we have

00:33:50,260 --> 00:33:54,640
some players like trustee for example

00:33:52,210 --> 00:33:57,910
with you will they are not using bubble

00:33:54,640 --> 00:34:01,030
platform so we have some fragmentation

00:33:57,910 --> 00:34:05,140
going on still we are trying to do some

00:34:01,030 --> 00:34:07,810
work to mitigate this and getting people

00:34:05,140 --> 00:34:11,590
to use the same kind of for calls in all

00:34:07,810 --> 00:34:15,010
different levels and finally we have a

00:34:11,590 --> 00:34:17,410
common code base the it shouldn't matter

00:34:15,010 --> 00:34:21,220
what kind of T we're working with all

00:34:17,410 --> 00:34:23,950
our components in Linux they are sharing

00:34:21,220 --> 00:34:25,510
some kind of generic framework it

00:34:23,950 --> 00:34:27,670
doesn't really matter what kind of

00:34:25,510 --> 00:34:29,920
subsystem they're in there are some kind

00:34:27,670 --> 00:34:31,510
of framework and we shouldn't be

00:34:29,920 --> 00:34:33,700
different we should also be able to

00:34:31,510 --> 00:34:37,510
share some kind of framework and now we

00:34:33,700 --> 00:34:42,700
have code in parallel that can be shared

00:34:37,510 --> 00:34:45,880
between people if we want to so that's

00:34:42,700 --> 00:34:48,040
everything I had and now we're going

00:34:45,880 --> 00:34:53,800
into the Q&A I don't know if you will

00:34:48,040 --> 00:34:56,320
want to say something here yeah that's

00:34:53,800 --> 00:34:58,480
great thanks very much for for a great

00:34:56,320 --> 00:35:01,600
presentation so we're going to move into

00:34:58,480 --> 00:35:03,060
the Q&A now so just a reminder to use

00:35:01,600 --> 00:35:05,610
the chat window to post some questions

00:35:03,060 --> 00:35:08,830
we have had some really great questions

00:35:05,610 --> 00:35:12,820
it's great to know that there are some

00:35:08,830 --> 00:35:15,220
some people who are obviously quite deep

00:35:12,820 --> 00:35:16,930
into this topic and and we are seeing

00:35:15,220 --> 00:35:18,130
seeing a lot of good questions there if

00:35:16,930 --> 00:35:21,220
we don't get chance to answer the

00:35:18,130 --> 00:35:24,060
questions now then we will we will get

00:35:21,220 --> 00:35:26,599
back to you too offline by mail

00:35:24,060 --> 00:35:29,640
so just keep those questions coming

00:35:26,599 --> 00:35:31,980
whilst anybody's tabling a few last

00:35:29,640 --> 00:35:34,380
questions just a few quick words about

00:35:31,980 --> 00:35:35,819
Lennar o soul in our delivers

00:35:34,380 --> 00:35:38,849
engineering effort to develop key

00:35:35,819 --> 00:35:40,050
technologies for the armed ecosystem we

00:35:38,849 --> 00:35:41,790
develop lots of key software

00:35:40,050 --> 00:35:44,910
technologies some of them are listed

00:35:41,790 --> 00:35:47,310
below on the slide how we deliver our

00:35:44,910 --> 00:35:50,339
output to members into open source

00:35:47,310 --> 00:35:52,230
projects and into the community you can

00:35:50,339 --> 00:35:54,930
check out our websites and projects

00:35:52,230 --> 00:35:58,200
which we host and support and again as I

00:35:54,930 --> 00:36:00,690
listed there and Lennar o works with its

00:35:58,200 --> 00:36:03,780
members to maximize the return on their

00:36:00,690 --> 00:36:07,369
open-source investment so with that

00:36:03,780 --> 00:36:09,329
message done we'll go to the questions

00:36:07,369 --> 00:36:10,829
I'd like to kick off with the first

00:36:09,329 --> 00:36:12,359
question which is it which is a great

00:36:10,829 --> 00:36:15,990
one so thanks for whoever submitted it

00:36:12,359 --> 00:36:17,819
it's a good place to start which is a to

00:36:15,990 --> 00:36:22,010
you our team and may be against what is

00:36:17,819 --> 00:36:22,010
the best way to get started with opti

00:36:22,609 --> 00:36:33,180
right so does that question is go to get

00:36:29,910 --> 00:36:36,930
up try to set up a complete build using

00:36:33,180 --> 00:36:38,550
qmu and you can do that you don't need

00:36:36,930 --> 00:36:40,170
any hardware all you can do everything

00:36:38,550 --> 00:36:41,660
locally on your computer and you can

00:36:40,170 --> 00:36:47,000
have a full of merriment up and running

00:36:41,660 --> 00:36:49,410
so get qmu build everything run X test

00:36:47,000 --> 00:36:51,150
but you know everything is working there

00:36:49,410 --> 00:36:52,890
you can try out the hello world

00:36:51,150 --> 00:36:55,109
application you can try to modify it

00:36:52,890 --> 00:36:57,930
change it a little bit and so on so you

00:36:55,109 --> 00:37:02,160
get used to how to compile it and so on

00:36:57,930 --> 00:37:07,140
and other than that I think you should

00:37:02,160 --> 00:37:09,780
also try to look up the presentations

00:37:07,140 --> 00:37:11,880
that we have had at Leonora connect

00:37:09,780 --> 00:37:18,510
during the years there are quite a few

00:37:11,880 --> 00:37:22,079
presentations with 8-12 t great great

00:37:18,510 --> 00:37:24,300
yeah that's kind thanks so I've I've

00:37:22,079 --> 00:37:28,369
taken a couple of questions that I think

00:37:24,300 --> 00:37:32,819
we should maybe take together which are

00:37:28,369 --> 00:37:34,500
related to memory so first question

00:37:32,819 --> 00:37:37,160
which is can you elaborate about memory

00:37:34,500 --> 00:37:39,200
access procedures from te

00:37:37,160 --> 00:37:41,630
and where to configure the memory for

00:37:39,200 --> 00:37:48,950
the tea environment who decides about

00:37:41,630 --> 00:37:53,390
the bootleg up or te OS itself yeah we

00:37:48,950 --> 00:37:56,990
have basically a define on the secure

00:37:53,390 --> 00:37:59,420
side the memory that you can use but

00:37:56,990 --> 00:38:02,980
quite recently we also added some

00:37:59,420 --> 00:38:06,170
patches that enables you to use

00:38:02,980 --> 00:38:09,440
basically memory from normal world user

00:38:06,170 --> 00:38:10,970
space so it depends on what kind of

00:38:09,440 --> 00:38:12,890
memory we're talking about we have the

00:38:10,970 --> 00:38:14,630
concept of shared memory when you're

00:38:12,890 --> 00:38:17,599
sharing the memory between normal world

00:38:14,630 --> 00:38:19,280
and secure site the data that is what if

00:38:17,599 --> 00:38:22,599
for example can use normal world memory

00:38:19,280 --> 00:38:25,780
for today but on secure side you have

00:38:22,599 --> 00:38:32,599
the SRAM and so on and that's configured

00:38:25,780 --> 00:38:38,900
separately for each platform yes do you

00:38:32,599 --> 00:38:43,700
want to fill in anything here and I

00:38:38,900 --> 00:38:47,150
think that's good oh okay then um we

00:38:43,700 --> 00:38:50,359
have a question do you have an interface

00:38:47,150 --> 00:38:53,299
for the kernel driver to access this

00:38:50,359 --> 00:38:57,079
firmware maybe you need to read

00:38:53,299 --> 00:38:59,630
something into that question yeah the

00:38:57,079 --> 00:39:01,460
that's example of one of the things that

00:38:59,630 --> 00:39:03,200
we have been working with at the same

00:39:01,460 --> 00:39:06,859
time as we were trying to submit the

00:39:03,200 --> 00:39:09,470
driver off-screen so in we have a outer

00:39:06,859 --> 00:39:13,010
pre patches consisting of a kernel a two

00:39:09,470 --> 00:39:15,770
face that more or more or less reminds

00:39:13,010 --> 00:39:19,970
of interfaces that you have from user

00:39:15,770 --> 00:39:23,770
space so that is something that probably

00:39:19,970 --> 00:39:23,770
will be submitted sooner or later

00:39:25,000 --> 00:39:30,380
okay we have a question how much of the

00:39:28,279 --> 00:39:36,079
global platform test suite testing

00:39:30,380 --> 00:39:37,970
depends on the hardware good questions

00:39:36,079 --> 00:39:42,589
is we don't have access to the test

00:39:37,970 --> 00:39:43,910
suite to as I said we let's try to

00:39:42,589 --> 00:39:46,099
clarify here a little bit

00:39:43,910 --> 00:39:48,770
so what we are testing off to today we

00:39:46,099 --> 00:39:50,690
are adding what we call X tests

00:39:48,770 --> 00:39:53,630
and that's the test we developed by

00:39:50,690 --> 00:39:56,870
ourselves and as I've said with there's

00:39:53,630 --> 00:39:58,580
quite a lot of test in it but it's not

00:39:56,870 --> 00:40:01,940
the same as running the test suite from

00:39:58,580 --> 00:40:03,800
global platform so what we have done is

00:40:01,940 --> 00:40:06,700
that we have enabled it so it's possible

00:40:03,800 --> 00:40:09,290
to extend the test suite to also include

00:40:06,700 --> 00:40:11,420
the test from global platform if you

00:40:09,290 --> 00:40:14,120
have access to their test suite and

00:40:11,420 --> 00:40:15,620
that's what I said in one of the slides

00:40:14,120 --> 00:40:21,320
that some of our members are running

00:40:15,620 --> 00:40:25,180
this on a regular basis yeah maybe not

00:40:21,320 --> 00:40:25,180
precisely an answer to the question but

00:40:25,330 --> 00:40:30,050
okay thanks

00:40:26,930 --> 00:40:31,790
the next question is a hardened stroke

00:40:30,050 --> 00:40:34,610
trusted Linux OS supported actually the

00:40:31,790 --> 00:40:36,770
question is is what exactly is supported

00:40:34,610 --> 00:40:39,190
so the question goes on say our teaser

00:40:36,770 --> 00:40:45,800
api's which I assume is trustzone api's

00:40:39,190 --> 00:40:49,130
and then a container framework container

00:40:45,800 --> 00:40:52,130
framework if we're talking about

00:40:49,130 --> 00:40:56,960
containers from Linux no I mean this is

00:40:52,130 --> 00:40:59,630
just running directly on the hardware I

00:40:56,960 --> 00:41:03,080
mean from Linux ID to the secure side as

00:40:59,630 --> 00:41:06,470
a single operating system I know there

00:41:03,080 --> 00:41:07,880
are big questions in the past asking if

00:41:06,470 --> 00:41:12,770
it would be possible to run more than

00:41:07,880 --> 00:41:22,210
one T maybe I don't know we haven't seen

00:41:12,770 --> 00:41:25,670
it's not what I'm aware of okay yeah

00:41:22,210 --> 00:41:29,030
yeah a hardened Linux OS as such I mean

00:41:25,670 --> 00:41:31,970
it's as I said the driver itself is not

00:41:29,030 --> 00:41:34,250
really it's just moving information from

00:41:31,970 --> 00:41:36,680
normal world to the secure side so

00:41:34,250 --> 00:41:38,780
adding horan security to kernel of

00:41:36,680 --> 00:41:42,170
course helps for the overall security

00:41:38,780 --> 00:41:46,280
but the trust model is that we normally

00:41:42,170 --> 00:41:48,620
don't trust normal world

00:41:46,280 --> 00:41:54,040
we don't even trust ledo's kernel we see

00:41:48,620 --> 00:41:54,040
that us a non secure thing

00:41:56,529 --> 00:42:02,539
okay so couple more questions we have a

00:42:00,260 --> 00:42:05,119
some great questions so I trying to get

00:42:02,539 --> 00:42:08,150
through as many as possible so again on

00:42:05,119 --> 00:42:11,990
on things which is supported does opti

00:42:08,150 --> 00:42:17,170
feature a secure file system they yes we

00:42:11,990 --> 00:42:20,150
do but we piggyback on the flash in in

00:42:17,170 --> 00:42:23,990
normal world in linux so what happens

00:42:20,150 --> 00:42:25,789
when you store something is that the

00:42:23,990 --> 00:42:30,650
traffic Asian that would like to store

00:42:25,789 --> 00:42:33,500
some kind of information will call some

00:42:30,650 --> 00:42:36,589
secure storage functionality you will

00:42:33,500 --> 00:42:40,339
get sent back from secure side using the

00:42:36,589 --> 00:42:42,289
RPC messages to normal world a normal

00:42:40,339 --> 00:42:46,099
wall will store it on the filesystem and

00:42:42,289 --> 00:42:47,720
since this goes from secure side the non

00:42:46,099 --> 00:42:51,049
secure side everything needs to be

00:42:47,720 --> 00:42:55,269
encrypted and integrated protected so

00:42:51,049 --> 00:42:55,269
we're running a sgem on everything here

00:42:56,859 --> 00:42:59,829
okay a couple of questions about

00:42:58,640 --> 00:43:02,900
execution model

00:42:59,829 --> 00:43:06,950
do you support SMP and is opti

00:43:02,900 --> 00:43:09,309
multi-threaded yes I think that's the

00:43:06,950 --> 00:43:09,309
short answer

00:43:09,460 --> 00:43:14,779
okay great

00:43:12,549 --> 00:43:20,569
that means I didn't get tested time the

00:43:14,779 --> 00:43:23,869
next question so just a quick answer of

00:43:20,569 --> 00:43:27,380
mine to some people who asked we will be

00:43:23,869 --> 00:43:29,420
sending out a link to this content so we

00:43:27,380 --> 00:43:31,190
are recording this they'll send out a

00:43:29,420 --> 00:43:33,500
link to the content to all the people

00:43:31,190 --> 00:43:36,529
who've registered some people have asked

00:43:33,500 --> 00:43:39,319
will we post this content otherwise

00:43:36,529 --> 00:43:40,930
online on our YouTube channel to be

00:43:39,319 --> 00:43:43,220
honest we haven't figured that out yet

00:43:40,930 --> 00:43:44,960
probably ultimately but initially we

00:43:43,220 --> 00:43:48,049
just plan to to make it available to

00:43:44,960 --> 00:43:50,240
people registered and then we will it

00:43:48,049 --> 00:43:52,299
will end up on our YouTube channel and

00:43:50,240 --> 00:43:56,390
the slides wonderful SlideShare

00:43:52,299 --> 00:44:00,819
so again great questions are just

00:43:56,390 --> 00:44:00,819
looking out for the next one

00:44:03,260 --> 00:44:11,190
so question up just give me a second to

00:44:08,849 --> 00:44:18,480
to send it to you

00:44:11,190 --> 00:44:20,099
Hakeem ah such as I can elaborate a

00:44:18,480 --> 00:44:22,530
little bit meanwhile on the multi-thread

00:44:20,099 --> 00:44:25,560
we met when we don't mother fighting

00:44:22,530 --> 00:44:30,000
here got it all to run multi-thread I

00:44:25,560 --> 00:44:32,550
mean in secure OS context as such but

00:44:30,000 --> 00:44:34,619
it's not possible to run fred's from the

00:44:32,550 --> 00:44:37,619
first application and that's the

00:44:34,619 --> 00:44:42,180
misconceptions on point from people the

00:44:37,619 --> 00:44:44,069
country is its defining global platform

00:44:42,180 --> 00:44:48,450
also if I look wrong you should not be

00:44:44,069 --> 00:44:53,069
able to run classifications very

00:44:48,450 --> 00:44:54,390
different first okay so those a question

00:44:53,069 --> 00:44:58,230
how is multi-core handled in the

00:44:54,390 --> 00:45:01,050
communication driver of cata sessions

00:44:58,230 --> 00:45:06,710
tagged by tag by a core ID affinity for

00:45:01,050 --> 00:45:06,710
example I think I handed over to you yes

00:45:10,790 --> 00:45:16,260
sorry I really need to read the question

00:45:13,770 --> 00:45:18,410
again because I missed some the last

00:45:16,260 --> 00:45:20,670
words I thought that

00:45:18,410 --> 00:45:23,280
how is multi-core handled in the

00:45:20,670 --> 00:45:27,630
communication driver are cata sessions

00:45:23,280 --> 00:45:31,079
tagged by core idea affinity yes you

00:45:27,630 --> 00:45:33,839
could a more or less compare it with a

00:45:31,079 --> 00:45:39,480
normal function call within the kernel

00:45:33,839 --> 00:45:41,150
so you use the task context inside the

00:45:39,480 --> 00:45:44,490
kernel and everything is tracked on that

00:45:41,150 --> 00:45:47,550
when you do the actual smc into secure

00:45:44,490 --> 00:45:49,950
world it happens on the same CPU I mean

00:45:47,550 --> 00:45:52,520
you know you enter secure world with the

00:45:49,950 --> 00:45:55,380
same CPU as you did the NSMC with and

00:45:52,520 --> 00:46:00,119
when you return out you will come out on

00:45:55,380 --> 00:46:03,500
the same CPU so any rescheduling happens

00:46:00,119 --> 00:46:06,060
in a non secure world but it means that

00:46:03,500 --> 00:46:09,450
during one invoke you can get

00:46:06,060 --> 00:46:12,390
rescheduled by yeah get delivering an

00:46:09,450 --> 00:46:16,069
interrupt to a normal world and re-enter

00:46:12,390 --> 00:46:16,069
on a different CPU later on

00:46:17,369 --> 00:46:24,430
okay next question which I did I just

00:46:22,180 --> 00:46:27,910
post it to you which is if I have to do

00:46:24,430 --> 00:46:29,859
a yes encryption using tea services is

00:46:27,910 --> 00:46:34,660
there some example of how to use the

00:46:29,859 --> 00:46:37,440
invoke I octal or generally our existing

00:46:34,660 --> 00:46:37,440
applications available

00:46:37,650 --> 00:46:42,130
iris Qing goes on I remember X tests

00:46:40,089 --> 00:46:46,060
having some demo cases so I guess this

00:46:42,130 --> 00:46:49,540
is application example of how to use it

00:46:46,060 --> 00:46:52,000
your Kim yeah it through I mean if you

00:46:49,540 --> 00:46:54,190
look in X test you can see how we invoke

00:46:52,000 --> 00:46:56,319
things and so on but XS this a little

00:46:54,190 --> 00:46:58,420
bit it could be a little bit hard to

00:46:56,319 --> 00:47:01,900
follow I mean if you're not used to it

00:46:58,420 --> 00:47:05,319
so I would suggest in that case is that

00:47:01,900 --> 00:47:07,420
I mean to call AAS encryption isn't

00:47:05,319 --> 00:47:09,520
really different calling anything else

00:47:07,420 --> 00:47:11,079
it's just that you come up with some

00:47:09,520 --> 00:47:12,520
press application that you're working

00:47:11,079 --> 00:47:14,890
with when you implement your own

00:47:12,520 --> 00:47:16,780
classification you call that first

00:47:14,890 --> 00:47:20,260
application with a certain function ID

00:47:16,780 --> 00:47:21,819
also invented by you and what happens in

00:47:20,260 --> 00:47:24,010
the first application is up to you and

00:47:21,819 --> 00:47:27,430
that is where you actually called the

00:47:24,010 --> 00:47:29,170
AAS functionality and in opti today you

00:47:27,430 --> 00:47:32,349
should look at the global platform

00:47:29,170 --> 00:47:35,349
specifications the internal core API to

00:47:32,349 --> 00:47:40,839
figure out how to do a s calls and so on

00:47:35,349 --> 00:47:42,819
and I think it is it could also be a

00:47:40,839 --> 00:47:44,109
little bit tricky I mean to figure out

00:47:42,819 --> 00:47:47,410
all the calls there are some

00:47:44,109 --> 00:47:51,849
preconditions that you need to do to set

00:47:47,410 --> 00:47:53,650
up the context is gone but I think

00:47:51,849 --> 00:47:56,380
people in general will figure it out and

00:47:53,650 --> 00:47:58,780
if not by doing it themselves and not by

00:47:56,380 --> 00:48:04,599
reading X tests reach out to us and we

00:47:58,780 --> 00:48:08,680
will help out great ah

00:48:04,599 --> 00:48:10,480
next question back to memory is it

00:48:08,680 --> 00:48:12,339
possible to allocate a chunk of RAM in

00:48:10,480 --> 00:48:14,560
the normal world and then turn it into a

00:48:12,339 --> 00:48:20,020
secure memory which can be used for DRM

00:48:14,560 --> 00:48:21,940
pipeline for instance yeah this is

00:48:20,020 --> 00:48:24,190
interesting we have been working with

00:48:21,940 --> 00:48:27,280
something called secure data path for a

00:48:24,190 --> 00:48:29,540
while and that is just to satisfy this

00:48:27,280 --> 00:48:31,820
require

00:48:29,540 --> 00:48:34,490
what we have done so for now is that we

00:48:31,820 --> 00:48:37,910
are using the ion memory allocator for

00:48:34,490 --> 00:48:41,150
this and we have added a new secure heap

00:48:37,910 --> 00:48:46,400
type so that means that you can use this

00:48:41,150 --> 00:48:50,600
heat to you set it up and then you can

00:48:46,400 --> 00:48:52,490
use that memory to send information in

00:48:50,600 --> 00:48:55,250
their own context for example video data

00:48:52,490 --> 00:48:57,170
and so on from normal world to secure

00:48:55,250 --> 00:49:01,550
side so you have a way of securing

00:48:57,170 --> 00:49:02,590
memory and yeah without copying a lot of

00:49:01,550 --> 00:49:04,850
information

00:49:02,590 --> 00:49:06,770
so here's there has been more some work

00:49:04,850 --> 00:49:08,630
done in it and we hope that we can

00:49:06,770 --> 00:49:10,670
submit the patches for this work as soon

00:49:08,630 --> 00:49:14,540
as possible that the thing is right now

00:49:10,670 --> 00:49:16,700
is that people lower but them and some

00:49:14,540 --> 00:49:19,310
it there are trying to D state their ion

00:49:16,700 --> 00:49:21,140
drive right now from being an android

00:49:19,310 --> 00:49:23,480
driver to become a real Linux prior

00:49:21,140 --> 00:49:25,550
instead and they explicitly told us to

00:49:23,480 --> 00:49:34,220
wait submit our patches something that

00:49:25,550 --> 00:49:39,950
has been done okay so next next question

00:49:34,220 --> 00:49:47,440
is about a cryptic or cursor is well

00:49:39,950 --> 00:49:47,440
cryptic cell just come in

00:49:53,980 --> 00:49:59,500
which is in foot photo of Colonel we see

00:49:57,820 --> 00:50:03,849
a staging driver of our script a cell

00:49:59,500 --> 00:50:05,820
driver is there an opinion property

00:50:03,849 --> 00:50:15,760
about crypto cell are crypto cell and

00:50:05,820 --> 00:50:20,079
opti related how we currently were only

00:50:15,760 --> 00:50:22,660
using let encrypt we have been in

00:50:20,079 --> 00:50:25,260
discussions with arm regarding the

00:50:22,660 --> 00:50:28,570
crypto default crypto framework node

00:50:25,260 --> 00:50:32,380
replacing it eventually with embassy

00:50:28,570 --> 00:50:35,380
left is dead and one benefit by

00:50:32,380 --> 00:50:39,550
replacing it with TLS would be that

00:50:35,380 --> 00:50:43,300
crypto cell would probably work out of

00:50:39,550 --> 00:50:45,940
the box I guess in this case so there

00:50:43,300 --> 00:50:48,099
has been some discussions but nothing

00:50:45,940 --> 00:50:50,050
done yet but I think you will see

00:50:48,099 --> 00:50:52,690
something in the coming months in this

00:50:50,050 --> 00:50:54,670
area and I suspect that it will live

00:50:52,690 --> 00:50:56,950
side by side with little awkward for a

00:50:54,670 --> 00:51:05,310
while until we know things are working

00:50:56,950 --> 00:51:09,849
and then eventually we will switch so ok

00:51:05,310 --> 00:51:13,630
next question is ta - ta communication

00:51:09,849 --> 00:51:15,640
supported it is

00:51:13,630 --> 00:51:17,740
I don't know yen's if you would like to

00:51:15,640 --> 00:51:20,520
have something here and in limitations

00:51:17,740 --> 00:51:24,940
and so on but in general it is supported

00:51:20,520 --> 00:51:31,930
well it works as specified in the T

00:51:24,940 --> 00:51:37,690
internal API and yes but that's not much

00:51:31,930 --> 00:51:41,020
more to say about it okay and the next

00:51:37,690 --> 00:51:45,970
question is do support multi-threading

00:51:41,020 --> 00:51:49,089
for TAS no that's what I mentioned a few

00:51:45,970 --> 00:51:51,900
minutes ago okay I'm not sure if there's

00:51:49,089 --> 00:51:55,119
anyone else supporting it IRA I mean I

00:51:51,900 --> 00:51:57,130
I'm not sure waving to go the question

00:51:55,119 --> 00:51:59,050
is is there actually is there any T

00:51:57,130 --> 00:52:00,819
which supports multi-threading for TAS

00:51:59,050 --> 00:52:03,250
which I guess the answer is we're not

00:52:00,819 --> 00:52:05,730
sure we don't know we don't we're not

00:52:03,250 --> 00:52:05,730
sure

00:52:06,530 --> 00:52:16,620
okay I have a question about secure user

00:52:11,310 --> 00:52:21,920
space what is included here is that

00:52:16,620 --> 00:52:21,920
limited to the trust zone client api's

00:52:24,440 --> 00:52:35,480
mm-hmm sure if I really follow the

00:52:28,440 --> 00:52:40,710
question okay cause I think question are

00:52:35,480 --> 00:52:44,910
thanks excuse vessels yeah so you had a

00:52:40,710 --> 00:52:46,770
secure user space I mean what what now

00:52:44,910 --> 00:52:48,320
we're talking about Optio again as we're

00:52:46,770 --> 00:52:50,970
repeating global platform based

00:52:48,320 --> 00:52:54,330
solutions so all the transom vacations

00:52:50,970 --> 00:52:57,000
when they are communicating with secure

00:52:54,330 --> 00:53:00,630
services they are using interfaces

00:52:57,000 --> 00:53:03,210
defined by global platform property so

00:53:00,630 --> 00:53:06,360
that that's it there are some cases

00:53:03,210 --> 00:53:09,660
where we have made some extensions and I

00:53:06,360 --> 00:53:11,850
think some of them have reached Goa back

00:53:09,660 --> 00:53:15,390
from also the key derivation and so on

00:53:11,850 --> 00:53:17,910
but in general we stick with what's

00:53:15,390 --> 00:53:24,030
being defined by your platform that's

00:53:17,910 --> 00:53:29,370
what we try to do okay so the next

00:53:24,030 --> 00:53:34,080
question is there any work on trusted

00:53:29,370 --> 00:53:38,100
user interface support yeah that's the

00:53:34,080 --> 00:53:41,910
tough work question we have we have been

00:53:38,100 --> 00:53:45,750
doing some work we have we did a

00:53:41,910 --> 00:53:49,050
proof-of-concept running in emulators f

00:53:45,750 --> 00:53:53,310
AP q mu where we could fire up across

00:53:49,050 --> 00:53:54,840
the user interface you got some keypad

00:53:53,310 --> 00:53:58,320
and you could enter some credentials and

00:53:54,840 --> 00:54:01,350
so on but since we want up scream

00:53:58,320 --> 00:54:05,340
everything we don't want to have out of

00:54:01,350 --> 00:54:10,380
pre patches we have a big task in front

00:54:05,340 --> 00:54:15,500
of us trying to get this done in a way

00:54:10,380 --> 00:54:18,349
so we can share frame buffers etc with

00:54:15,500 --> 00:54:20,630
with Linux kernel basically

00:54:18,349 --> 00:54:23,749
so it's actually a normal world lewis

00:54:20,630 --> 00:54:26,299
colonel which is the harfa here how can

00:54:23,749 --> 00:54:30,709
we share things that are being rendered

00:54:26,299 --> 00:54:32,150
with secure site and that is something

00:54:30,709 --> 00:54:34,279
that we haven't been able to do anything

00:54:32,150 --> 00:54:36,049
about yet and i don't really know when

00:54:34,279 --> 00:54:38,329
we will have time to dig into it again

00:54:36,049 --> 00:54:41,539
but that is where we are right now

00:54:38,329 --> 00:54:43,609
but it is an important use case and we

00:54:41,539 --> 00:54:49,519
understand the need for it so it's

00:54:43,609 --> 00:54:51,529
definitely on our radar great we're

00:54:49,519 --> 00:54:55,729
actually coming up to five to the hour

00:54:51,529 --> 00:54:57,499
now as I said for people who ask

00:54:55,729 --> 00:55:00,259
questions that we that we may not get to

00:54:57,499 --> 00:55:01,809
we will follow up with you offline if we

00:55:00,259 --> 00:55:04,069
have an email address for you that works

00:55:01,809 --> 00:55:06,349
so we will try and get in touch with you

00:55:04,069 --> 00:55:08,509
they have been really great questions so

00:55:06,349 --> 00:55:12,799
thanks very much for what you submitted

00:55:08,509 --> 00:55:16,069
so a good question to come close the

00:55:12,799 --> 00:55:18,229
clothes which is what is the future

00:55:16,069 --> 00:55:20,660
roadmap for the Linux T opti

00:55:18,229 --> 00:55:23,029
infrastructure what about support for

00:55:20,660 --> 00:55:34,519
client applications in containers and/or

00:55:23,029 --> 00:55:35,839
virtualization good question yes I'm

00:55:34,519 --> 00:55:37,519
repeating here I mean is this something

00:55:35,839 --> 00:55:40,039
that has been discussed also but it's

00:55:37,519 --> 00:55:44,719
not really on our radar for the near

00:55:40,039 --> 00:55:47,239
future at least not running things from

00:55:44,719 --> 00:55:50,089
a virtualized environment so we will

00:55:47,239 --> 00:55:52,279
probably stick with doing what we have

00:55:50,089 --> 00:55:53,989
been doing right now but I know that our

00:55:52,279 --> 00:55:58,969
people that have been looking into this

00:55:53,989 --> 00:56:02,150
already we had one engineer from used to

00:55:58,969 --> 00:56:06,019
work global logic he did some work with

00:56:02,150 --> 00:56:09,559
ulti and virtualization and so on and I

00:56:06,019 --> 00:56:14,119
know there is one it's not a company

00:56:09,559 --> 00:56:15,829
it's I think there are some research

00:56:14,119 --> 00:56:18,709
they're working with it here in Sweden

00:56:15,829 --> 00:56:23,779
and trying to run virtualized

00:56:18,709 --> 00:56:25,640
environments to get a wave of T but yeah

00:56:23,779 --> 00:56:28,190
it's not really on our roadmap as such

00:56:25,640 --> 00:56:30,579
but internally we have a roadmap I mean

00:56:28,190 --> 00:56:30,579
we try to

00:56:31,330 --> 00:56:36,040
or remember us we get requirements for

00:56:34,450 --> 00:56:37,930
more members what is most important for

00:56:36,040 --> 00:56:41,080
you and then we try to prioritize that

00:56:37,930 --> 00:56:42,970
and work according to that and that is

00:56:41,080 --> 00:56:46,060
something that we also have a quantity

00:56:42,970 --> 00:56:48,310
that we we need to publish a little bit

00:56:46,060 --> 00:56:51,160
more information on public pages of

00:56:48,310 --> 00:56:52,930
Western arms is otherwise it can be hard

00:56:51,160 --> 00:56:55,870
for people to know if we already I've

00:56:52,930 --> 00:57:01,450
been thinking about doing something so

00:56:55,870 --> 00:57:03,760
yeah okay we're pretty much out of time

00:57:01,450 --> 00:57:05,380
now so for any questions that we didn't

00:57:03,760 --> 00:57:08,560
get to we will try to follow up with you

00:57:05,380 --> 00:57:10,360
offline everyone that registered will be

00:57:08,560 --> 00:57:13,690
mailed a link to the recording and the

00:57:10,360 --> 00:57:16,690
content please check out other Lenora

00:57:13,690 --> 00:57:20,290
content on SlideShare on YouTube at

00:57:16,690 --> 00:57:21,880
Lenora org and of course at opted org we

00:57:20,290 --> 00:57:23,950
will ultimately be posting this content

00:57:21,880 --> 00:57:26,440
on our YouTube and SlideShare channels

00:57:23,950 --> 00:57:29,860
so it just remains for me to to thank

00:57:26,440 --> 00:57:31,660
very much everyone for joining thanks to

00:57:29,860 --> 00:57:33,850
your team and yen's

00:57:31,660 --> 00:57:36,490
our presenters from the security working

00:57:33,850 --> 00:57:39,010
group and the thank you very much for

00:57:36,490 --> 00:57:42,870
for making this webinar a success thank

00:57:39,010 --> 00:57:42,870

YouTube URL: https://www.youtube.com/watch?v=kk3_DUMJrTI


