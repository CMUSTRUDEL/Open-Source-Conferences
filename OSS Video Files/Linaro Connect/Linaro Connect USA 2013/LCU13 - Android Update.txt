Title: LCU13 - Android Update
Publication date: 2014-04-30
Playlist: Linaro Connect USA 2013
Description: 
	Linaro Android update with Khasim Syed Mohammed and Bero.
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:05,200 --> 00:00:07,259
you

00:00:12,690 --> 00:00:19,349
it has been very interesting exciting

00:00:15,480 --> 00:00:20,759
experience so far with linaro have been

00:00:19,349 --> 00:00:23,130
part of this Android engineering team

00:00:20,759 --> 00:00:25,860
and as you know the focus is mainly on

00:00:23,130 --> 00:00:28,680
the mobile segment and as we know that

00:00:25,860 --> 00:00:30,840
Mobile is moving very fast and it's it's

00:00:28,680 --> 00:00:34,170
really challenging for us to really

00:00:30,840 --> 00:00:36,809
maintain and keep going with the same

00:00:34,170 --> 00:00:40,100
pace as the mobile moves and really it

00:00:36,809 --> 00:00:42,930
has been a very exciting experience and

00:00:40,100 --> 00:00:45,329
linaro like you get to work with so many

00:00:42,930 --> 00:00:48,059
member engineers and then our engineers

00:00:45,329 --> 00:00:57,390
who were like best in this industry and

00:00:48,059 --> 00:00:59,249
it's really exciting so far android

00:00:57,390 --> 00:01:01,620
development Athena has always been

00:00:59,249 --> 00:01:04,860
really interesting even though it

00:01:01,620 --> 00:01:07,380
changed quite a bit I mean now we are

00:01:04,860 --> 00:01:09,900
pretty much sure what we have to do but

00:01:07,380 --> 00:01:13,620
in the early days were vivir a bunch of

00:01:09,900 --> 00:01:16,229
Linux people most of us didn't have any

00:01:13,620 --> 00:01:18,000
experience with Android before so at

00:01:16,229 --> 00:01:20,790
first we were trying to figure out how

00:01:18,000 --> 00:01:24,240
this thing works and what we can do to

00:01:20,790 --> 00:01:26,490
make it better we started by getting it

00:01:24,240 --> 00:01:27,990
to compare with the tool chains deadly

00:01:26,490 --> 00:01:31,140
now has always released for in the

00:01:27,990 --> 00:01:33,180
regular Linux world by looking at how

00:01:31,140 --> 00:01:35,580
Android is different from regular Linux

00:01:33,180 --> 00:01:37,620
but also how it is similar what

00:01:35,580 --> 00:01:39,420
optimizations that we had already done

00:01:37,620 --> 00:01:42,360
on regular Linux could be merged into

00:01:39,420 --> 00:01:45,300
Android and there we would have to do

00:01:42,360 --> 00:01:47,520
something completely new other than just

00:01:45,300 --> 00:01:50,580
doing those optimizations one of the

00:01:47,520 --> 00:01:53,730
main tasks as keeping up with new

00:01:50,580 --> 00:01:55,890
upstream arises just today 4.4 has come

00:01:53,730 --> 00:01:58,560
out and we are planning to build a then

00:01:55,890 --> 00:02:01,160
I release based on that hopefully within

00:01:58,560 --> 00:02:01,160
the next week

00:02:05,479 --> 00:02:11,370
arm is actually as a prosperous is as a

00:02:09,209 --> 00:02:13,500
core entering into multiple new areas

00:02:11,370 --> 00:02:15,720
like enterprise networking and so on as

00:02:13,500 --> 00:02:17,819
so lyra with its nature of the way it is

00:02:15,720 --> 00:02:20,130
organized it is very important for

00:02:17,819 --> 00:02:23,010
Leonardo to actually focus on those

00:02:20,130 --> 00:02:25,200
areas as well but given that the focus

00:02:23,010 --> 00:02:27,090
for mobile has not changed at all and it

00:02:25,200 --> 00:02:29,250
is the on day by day basis we are

00:02:27,090 --> 00:02:32,310
continuously improving the focus that we

00:02:29,250 --> 00:02:34,260
are supposed to give to mobile and as

00:02:32,310 --> 00:02:36,120
part of this connect actually we have we

00:02:34,260 --> 00:02:37,620
are forming the mobile subcommittee

00:02:36,120 --> 00:02:40,110
which we like to actually focus on the

00:02:37,620 --> 00:02:42,090
problems of mobile and where exactly

00:02:40,110 --> 00:02:45,450
like for example we want to make sure

00:02:42,090 --> 00:02:48,780
that Android on latest process is

00:02:45,450 --> 00:02:50,220
running as expected to and helps all our

00:02:48,780 --> 00:02:52,170
members to get into production as

00:02:50,220 --> 00:02:54,090
quickly as possible we are looking at

00:02:52,170 --> 00:02:56,069
the current core arm cores that are

00:02:54,090 --> 00:02:59,519
there in the market today and making

00:02:56,069 --> 00:03:01,470
sure that Android is improving and we we

00:02:59,519 --> 00:03:03,299
want to make sure that all the latest

00:03:01,470 --> 00:03:05,850
and greatest kernel versions are

00:03:03,299 --> 00:03:07,350
available and all the latest Android ESP

00:03:05,850 --> 00:03:10,230
releases are available for our members

00:03:07,350 --> 00:03:11,760
so and a lot of optimizations and

00:03:10,230 --> 00:03:13,799
customizations we want to bring into

00:03:11,760 --> 00:03:16,290
Android as part of Android engineering

00:03:13,799 --> 00:03:18,780
Italy neuro so our executive committee

00:03:16,290 --> 00:03:21,060
in linaro is very excited about mobile

00:03:18,780 --> 00:03:24,840
and they are really focusing on mobile

00:03:21,060 --> 00:03:27,540
segment so the focus is really on and we

00:03:24,840 --> 00:03:29,959
are still we are going very aggressive

00:03:27,540 --> 00:03:29,959
on mobile

00:03:34,690 --> 00:03:42,580
traditionally the as we see the Android

00:03:36,920 --> 00:03:45,620
development so what basically happens is

00:03:42,580 --> 00:03:48,140
Google works with the one of their code

00:03:45,620 --> 00:03:50,000
partners and the we amend audience and

00:03:48,140 --> 00:03:51,650
they actually pick one processor and 10

00:03:50,000 --> 00:03:53,150
imodium and they actually develop

00:03:51,650 --> 00:03:55,160
complete Android solution for that

00:03:53,150 --> 00:03:57,140
particular processor and then they

00:03:55,160 --> 00:03:58,820
actually go and announce the public and

00:03:57,140 --> 00:04:01,100
then they make the source code public

00:03:58,820 --> 00:04:04,760
and it goes into AOSP and everyone picks

00:04:01,100 --> 00:04:06,440
it for other hardware's so and then the

00:04:04,760 --> 00:04:08,780
semiconductor providers generally focus

00:04:06,440 --> 00:04:10,840
on hardware entitlement and then OEM

00:04:08,780 --> 00:04:14,090
sodium's are always busy in getting the

00:04:10,840 --> 00:04:16,730
processor and getting their device into

00:04:14,090 --> 00:04:19,299
market as quickly as possible so not

00:04:16,730 --> 00:04:21,109
much focus is really spent on

00:04:19,299 --> 00:04:24,730
customizations optimizations

00:04:21,109 --> 00:04:28,160
benchmarking and profiling in Android so

00:04:24,730 --> 00:04:31,150
therefore we and as we understand that

00:04:28,160 --> 00:04:33,410
linner or like optimizations and

00:04:31,150 --> 00:04:36,350
profiling and benchmarking is actually a

00:04:33,410 --> 00:04:37,820
commodity which which actually can be

00:04:36,350 --> 00:04:40,580
shared across all the members so we

00:04:37,820 --> 00:04:43,520
actually want to spend a lot of time in

00:04:40,580 --> 00:04:45,110
really optimizing Android you know so

00:04:43,520 --> 00:04:46,790
therefore we have taken this task of

00:04:45,110 --> 00:04:50,710
optimizing Android for all these

00:04:46,790 --> 00:04:50,710
existing arm core processors

00:04:55,150 --> 00:04:59,870
one of the things that you will notice

00:04:57,379 --> 00:05:02,840
right away is that most hens that make

00:04:59,870 --> 00:05:05,419
us tend to focus on things that are

00:05:02,840 --> 00:05:07,699
immediately visible to the user like

00:05:05,419 --> 00:05:10,009
they improved a user interface or they

00:05:07,699 --> 00:05:12,199
modify some applications that user will

00:05:10,009 --> 00:05:15,259
immediately see I mean when you take a

00:05:12,199 --> 00:05:16,759
samsung mobile and a sony mobile you can

00:05:15,259 --> 00:05:19,819
immediately tell which is which because

00:05:16,759 --> 00:05:21,710
of their customizations but they focus

00:05:19,819 --> 00:05:24,020
on those bits and those bits are not

00:05:21,710 --> 00:05:25,639
actually what we are working on we are

00:05:24,020 --> 00:05:28,430
more interested in making sure that

00:05:25,639 --> 00:05:31,819
those improvements can stand on a solid

00:05:28,430 --> 00:05:33,590
base by making sure that all the core

00:05:31,819 --> 00:05:37,310
libraries as optimized as they can be

00:05:33,590 --> 00:05:42,949
and that all the underlying code like to

00:05:37,310 --> 00:05:45,500
Colonel as done in a sane fashion and we

00:05:42,949 --> 00:05:48,530
make sure that things can always be

00:05:45,500 --> 00:05:50,930
compared with the latest compilers which

00:05:48,530 --> 00:05:54,020
may not be all that interesting to an

00:05:50,930 --> 00:05:56,659
end user but in the end it just speeds

00:05:54,020 --> 00:05:58,819
things up and therefore just gives you a

00:05:56,659 --> 00:06:01,310
faster user experience and also helps

00:05:58,819 --> 00:06:07,159
save battery power because CPU can

00:06:01,310 --> 00:06:10,150
reenter sleep mode a lot earlier another

00:06:07,159 --> 00:06:12,949
part is as chasm has already pointed out

00:06:10,150 --> 00:06:16,340
the upstream Android generally tends to

00:06:12,949 --> 00:06:18,919
focus on one device so for example the

00:06:16,340 --> 00:06:20,779
Nexus 5 has just come out and it that's

00:06:18,919 --> 00:06:22,789
a Snapdragon so there's a pretty good

00:06:20,779 --> 00:06:25,009
chance that they will have a lot of

00:06:22,789 --> 00:06:27,680
optimizations specifically for snapped

00:06:25,009 --> 00:06:30,199
ring and one of our tasks is to make

00:06:27,680 --> 00:06:34,490
sure that it will work equally well on

00:06:30,199 --> 00:06:36,849
cortex a15 and also some future upcoming

00:06:34,490 --> 00:06:36,849
out where

00:06:41,050 --> 00:06:45,950
as we see like there are more than

00:06:44,210 --> 00:06:48,710
hundred forty different repositories in

00:06:45,950 --> 00:06:51,140
android today so it's really challenging

00:06:48,710 --> 00:06:53,570
for us to focus on each and every aspect

00:06:51,140 --> 00:06:56,870
of Android so the way we want to focus

00:06:53,570 --> 00:06:58,820
is like take all important use cases

00:06:56,870 --> 00:07:00,290
understand like what are the typical use

00:06:58,820 --> 00:07:02,180
cases which are very important for

00:07:00,290 --> 00:07:05,300
Android and focus on those optimization

00:07:02,180 --> 00:07:07,970
areas and we don't want to go into

00:07:05,300 --> 00:07:09,800
Colonel because Colonel is actually gets

00:07:07,970 --> 00:07:11,330
optimized at multiple levels so boot

00:07:09,800 --> 00:07:13,160
loader and Colonel we want to maybe

00:07:11,330 --> 00:07:15,560
don't want to go into those we want to

00:07:13,160 --> 00:07:17,390
pick Android middleware and and really

00:07:15,560 --> 00:07:19,610
go and focus on the Android middleware

00:07:17,390 --> 00:07:22,010
components first and understand the top

00:07:19,610 --> 00:07:23,630
use cases then understand the different

00:07:22,010 --> 00:07:25,820
kernel 40 repositories that we want to

00:07:23,630 --> 00:07:27,530
go after and then want to focus mainly

00:07:25,820 --> 00:07:30,200
from the user experience point of view

00:07:27,530 --> 00:07:32,750
and so we want to limit the focus to

00:07:30,200 --> 00:07:37,010
Android middleware toolchain compilers

00:07:32,750 --> 00:07:41,110
and mainly on the application side mount

00:07:37,010 --> 00:07:41,110
on the colonel and bootloader side

00:07:45,430 --> 00:07:51,500
we want to continue focusing on only the

00:07:49,310 --> 00:07:53,210
middleware components the way we want to

00:07:51,500 --> 00:07:55,730
approach is like there is lot of

00:07:53,210 --> 00:07:57,110
activity and research and benchmarking

00:07:55,730 --> 00:07:59,150
and profiling which has already gone

00:07:57,110 --> 00:08:00,440
into Android so we want to start off

00:07:59,150 --> 00:08:02,390
from there instead of reinventing

00:08:00,440 --> 00:08:04,880
ourselves in terms of profiling and

00:08:02,390 --> 00:08:06,440
benchmarking so as I see like in each

00:08:04,880 --> 00:08:08,330
Android conferences there are a lot of

00:08:06,440 --> 00:08:10,760
papers presented and many guys have

00:08:08,330 --> 00:08:12,260
already researched the topics on what

00:08:10,760 --> 00:08:14,780
kind of optimizations we can do whether

00:08:12,260 --> 00:08:16,790
it is IO optimization if it is Bionic

00:08:14,780 --> 00:08:18,680
optimization dalvik optimization

00:08:16,790 --> 00:08:20,750
compiler and tool chain optimization so

00:08:18,680 --> 00:08:23,270
each of these areas have been identified

00:08:20,750 --> 00:08:25,070
we have cornered that this this has to

00:08:23,270 --> 00:08:26,540
be improved but we are not really

00:08:25,070 --> 00:08:28,070
spending the engineering cycles on that

00:08:26,540 --> 00:08:29,840
so we don't want to go into researching

00:08:28,070 --> 00:08:32,690
these topics but we want to start from

00:08:29,840 --> 00:08:34,310
where someone has ended and has not

00:08:32,690 --> 00:08:36,050
taken it forward the kind of expertise

00:08:34,310 --> 00:08:38,810
we have in linaro and win with our

00:08:36,050 --> 00:08:40,670
members this is quite easy for us to

00:08:38,810 --> 00:08:49,700
pick this challenge instead of somebody

00:08:40,670 --> 00:08:52,730
else in the community big city so test

00:08:49,700 --> 00:08:55,610
several key areas some of which are

00:08:52,730 --> 00:08:59,180
really directly related to what linares

00:08:55,610 --> 00:09:00,770
doing for example Bionic which is lipsy

00:08:59,180 --> 00:09:03,680
implementation basically an

00:09:00,770 --> 00:09:05,570
implementation of all the basic

00:09:03,680 --> 00:09:07,730
functions has some room for

00:09:05,570 --> 00:09:12,080
optimizations that will just make every

00:09:07,730 --> 00:09:15,890
application benefit then there's several

00:09:12,080 --> 00:09:18,230
other core libraries for example there's

00:09:15,890 --> 00:09:22,790
a couple of file formats telecom to use

00:09:18,230 --> 00:09:25,600
like jpg PNG for images and De Niro has

00:09:22,790 --> 00:09:29,630
already optimized libraries that are

00:09:25,600 --> 00:09:31,910
generally used to load those images to

00:09:29,630 --> 00:09:36,080
make use of features of new arm CPUs

00:09:31,910 --> 00:09:38,990
such as neon and vfp version 3 and those

00:09:36,080 --> 00:09:41,690
can be merged into Android then there's

00:09:38,990 --> 00:09:43,310
definitely lots of improvement in dalvik

00:09:41,690 --> 00:09:46,870
with just a virtual machine that once

00:09:43,310 --> 00:09:50,360
all of the Java bits for Android and

00:09:46,870 --> 00:09:53,060
there's also some external things like 2

00:09:50,360 --> 00:09:55,070
Chainz compilers that can really help

00:09:53,060 --> 00:09:56,110
make things better by just making sure

00:09:55,070 --> 00:09:57,790
that good

00:09:56,110 --> 00:10:01,480
photos already there gets translated

00:09:57,790 --> 00:10:04,649
into better sampling code and actually

00:10:01,480 --> 00:10:07,540
one thing we are also doing here is

00:10:04,649 --> 00:10:09,279
people who want to write native machine

00:10:07,540 --> 00:10:11,200
code on Android have to use the tool

00:10:09,279 --> 00:10:14,380
that is called the ndk native

00:10:11,200 --> 00:10:16,420
development kit that so far comes out of

00:10:14,380 --> 00:10:18,820
Google but starting last month's we have

00:10:16,420 --> 00:10:21,670
started making linaro ndk releases that

00:10:18,820 --> 00:10:24,190
are essentially the same thing but with

00:10:21,670 --> 00:10:27,279
the upstream GCC compiler replaced

00:10:24,190 --> 00:10:29,290
faster linaro version of GCC that should

00:10:27,279 --> 00:10:31,779
simply generate better code without

00:10:29,290 --> 00:10:35,260
requiring the user to do anything other

00:10:31,779 --> 00:10:38,649
than just installing this NDK I have

00:10:35,260 --> 00:10:42,670
some applications compared to a Vista

00:10:38,649 --> 00:10:48,339
enero ndk here for example this mapping

00:10:42,670 --> 00:10:50,860
application uses the ndk heavily then

00:10:48,339 --> 00:10:53,190
there's cutie which is a very commonly

00:10:50,860 --> 00:10:56,140
used to which it set on regular Linux

00:10:53,190 --> 00:10:58,149
that can now also be used on Android and

00:10:56,140 --> 00:11:00,420
it already compiles with an arrow and

00:10:58,149 --> 00:11:00,420
decay

00:11:04,540 --> 00:11:08,480
actually there are a lot of key

00:11:06,230 --> 00:11:12,670
challenges for us to get into to the

00:11:08,480 --> 00:11:14,989
standard optimization space the first

00:11:12,670 --> 00:11:19,339
the first challenge that I can think of

00:11:14,989 --> 00:11:21,139
is like as we know as we said just now

00:11:19,339 --> 00:11:22,730
that there are there are quite a few

00:11:21,139 --> 00:11:25,160
areas to focus on we need to identify

00:11:22,730 --> 00:11:27,290
which are the low-hanging ones and just

00:11:25,160 --> 00:11:29,449
try to fix those things plus also we

00:11:27,290 --> 00:11:31,429
need to work closely with the Google and

00:11:29,449 --> 00:11:33,139
our members to really understand if the

00:11:31,429 --> 00:11:35,209
kind of optimization that we are picking

00:11:33,139 --> 00:11:36,739
with google has already implemented it

00:11:35,209 --> 00:11:38,869
or some members have already implemented

00:11:36,739 --> 00:11:40,399
it so therefore there should be lot of

00:11:38,869 --> 00:11:44,119
collaboration that should go in between

00:11:40,399 --> 00:11:46,040
members Google engineers and us so these

00:11:44,119 --> 00:11:48,259
are quite a few challenges but but we

00:11:46,040 --> 00:11:51,169
have clear plans on how we are going to

00:11:48,259 --> 00:11:53,809
execute this so we just want to take one

00:11:51,169 --> 00:11:56,239
step at a time and first identify the

00:11:53,809 --> 00:11:58,249
right tools that we want and then

00:11:56,239 --> 00:11:59,689
identify the right profiling tools that

00:11:58,249 --> 00:12:02,149
we want to pick and benchmarking tools

00:11:59,689 --> 00:12:03,559
we want to pick and then go for as I

00:12:02,149 --> 00:12:05,600
said that collaborate with all the

00:12:03,559 --> 00:12:07,489
members and Google engineers to

00:12:05,600 --> 00:12:09,319
understand what level of optimization

00:12:07,489 --> 00:12:12,919
can be done in each area that we have

00:12:09,319 --> 00:12:15,889
identified and then go address each one

00:12:12,919 --> 00:12:17,629
by one for us there we actually focus on

00:12:15,889 --> 00:12:19,100
two different areas in Android

00:12:17,629 --> 00:12:21,230
engineering at lennar one is like

00:12:19,100 --> 00:12:23,239
focusing on the upcoming processors and

00:12:21,230 --> 00:12:24,949
then also the optimization thing so we

00:12:23,239 --> 00:12:27,679
need to balance between these two so we

00:12:24,949 --> 00:12:29,269
cannot drop our the latest technologies

00:12:27,679 --> 00:12:31,399
that we are working with versus the

00:12:29,269 --> 00:12:33,230
Android optimization thing so that's

00:12:31,399 --> 00:12:35,989
another challenge like having engineers

00:12:33,230 --> 00:12:38,239
working on both of these is is really a

00:12:35,989 --> 00:12:40,459
challenge for us as well so but we as I

00:12:38,239 --> 00:12:41,989
said like we have a plan and we have

00:12:40,459 --> 00:12:43,339
good support from all our members and

00:12:41,989 --> 00:12:47,119
there is a good support from our

00:12:43,339 --> 00:12:48,860
executive team in general so I think

00:12:47,119 --> 00:12:52,449
it's quite possible to make this happen

00:12:48,860 --> 00:12:52,449
within a short period of time

00:12:56,740 --> 00:13:02,390
if you really want the very latest

00:12:59,660 --> 00:13:05,240
updates it's probably best to just look

00:13:02,390 --> 00:13:07,250
at code and go to Android get totally

00:13:05,240 --> 00:13:10,010
now talk which is where all of our

00:13:07,250 --> 00:13:12,950
development lives then the next thing is

00:13:10,010 --> 00:13:15,230
our mailing lists which is where you can

00:13:12,950 --> 00:13:17,920
actually talk to the developers and see

00:13:15,230 --> 00:13:20,810
what developers are saying to each other

00:13:17,920 --> 00:13:23,360
then they're still in our block and the

00:13:20,810 --> 00:13:25,520
newest twitter China's people should

00:13:23,360 --> 00:13:27,170
really follow those to keep track of

00:13:25,520 --> 00:13:29,360
what clean arrow is doing and of course

00:13:27,170 --> 00:13:34,240
they're still in our connect conferences

00:13:29,360 --> 00:13:36,320
three times a year and other than that

00:13:34,240 --> 00:13:39,260
something you might want to do is just

00:13:36,320 --> 00:13:41,930
for identify some individual engineer

00:13:39,260 --> 00:13:44,060
who is working on a project you care

00:13:41,930 --> 00:13:45,920
about and follow that guy on Google+ or

00:13:44,060 --> 00:13:48,610
Facebook or whatever he keeps his

00:13:45,920 --> 00:13:48,610
personal things

00:13:52,579 --> 00:13:54,639

YouTube URL: https://www.youtube.com/watch?v=fvH2SG-GL58


