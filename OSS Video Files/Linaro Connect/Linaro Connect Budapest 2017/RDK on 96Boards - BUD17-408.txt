Title: RDK on 96Boards - BUD17-408
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	
Captions: 
	00:00:00,130 --> 00:00:12,350
[Music]

00:00:07,070 --> 00:00:14,090
I have a very brief update on some

00:00:12,350 --> 00:00:16,400
changes that have been going on in UF

00:00:14,090 --> 00:00:20,210
Island and then thankfully in order to

00:00:16,400 --> 00:00:22,640
fill the hour half hour 25 minutes our

00:00:20,210 --> 00:00:24,170
art randomly came up with some

00:00:22,640 --> 00:00:26,599
interesting discussions about secure

00:00:24,170 --> 00:00:33,140
storage with you you've got net memory

00:00:26,599 --> 00:00:38,080
protection with UEFI right so the first

00:00:33,140 --> 00:00:38,080
thing can someone please close the door

00:00:38,649 --> 00:00:44,329
first thing I've been speaking about

00:00:41,210 --> 00:00:46,670
open platform package in the past I'm

00:00:44,329 --> 00:00:49,070
now here to tell you that it's it's dead

00:00:46,670 --> 00:00:51,079
it's going it's going away and the

00:00:49,070 --> 00:00:53,000
reason it's going away is because it's

00:00:51,079 --> 00:00:55,430
achieved what it was about to do in the

00:00:53,000 --> 00:00:57,770
first place which is it gave me the

00:00:55,430 --> 00:01:01,570
ability to prototype setting up a single

00:00:57,770 --> 00:01:05,390
tree with support for multiple platforms

00:01:01,570 --> 00:01:07,370
for edk to until we actually managed to

00:01:05,390 --> 00:01:09,710
sort out the situation of getting clot

00:01:07,370 --> 00:01:13,280
forms up into the public piano core

00:01:09,710 --> 00:01:17,090
trees and we've actually achieved now

00:01:13,280 --> 00:01:19,310
that the guidelines and documentation

00:01:17,090 --> 00:01:23,630
and the official process for how we're

00:01:19,310 --> 00:01:27,890
going to tweet open platform support

00:01:23,630 --> 00:01:31,549
with ed k to the the repository is

00:01:27,890 --> 00:01:33,560
already up there and github and so far

00:01:31,549 --> 00:01:39,860
it contains a readme dot md which

00:01:33,560 --> 00:01:42,920
basically explains the process so i lied

00:01:39,860 --> 00:01:47,810
there's actually two repositories we do

00:01:42,920 --> 00:01:50,960
have some platforms that are not

00:01:47,810 --> 00:01:54,710
completely open source so they contain

00:01:50,960 --> 00:01:57,110
some binary only modules which because

00:01:54,710 --> 00:01:59,329
of the ABI guarantees that you if I

00:01:57,110 --> 00:02:01,490
gives you it's still possible to have

00:01:59,329 --> 00:02:08,450
and still rebuild against newer versions

00:02:01,490 --> 00:02:10,690
of edk to but because of the basically

00:02:08,450 --> 00:02:13,610
it is unacceptable to many of the UEFI

00:02:10,690 --> 00:02:17,090
for members and the ed k2 contributors

00:02:13,610 --> 00:02:20,150
and participants to have these binaries

00:02:17,090 --> 00:02:20,900
in the main tree so we're splitting that

00:02:20,150 --> 00:02:23,689
out in

00:02:20,900 --> 00:02:28,579
to separate one called ed que tu non OS

00:02:23,689 --> 00:02:30,970
I it neither of these are Forks of the

00:02:28,579 --> 00:02:34,129
ADK to repository they're standalone

00:02:30,970 --> 00:02:38,569
subdirectories but there is a function

00:02:34,129 --> 00:02:40,189
in DDK to build system well the function

00:02:38,569 --> 00:02:42,859
as in an environment variable you can

00:02:40,189 --> 00:02:44,239
set it's called packages pass which

00:02:42,859 --> 00:02:45,950
means that the build come on go through

00:02:44,239 --> 00:02:47,599
and looks in all of those places so you

00:02:45,950 --> 00:02:51,230
can seamlessly integrate multiple

00:02:47,599 --> 00:02:55,250
repositories like that for the actual

00:02:51,230 --> 00:02:58,190
edk two platforms one of the reasons it

00:02:55,250 --> 00:03:01,370
took so long to agree on a process is

00:02:58,190 --> 00:03:03,409
that we're trying to bring together two

00:03:01,370 --> 00:03:06,859
quite different development communities

00:03:03,409 --> 00:03:10,750
we have the traditional bias and unified

00:03:06,859 --> 00:03:15,730
developers who are basically used to

00:03:10,750 --> 00:03:17,900
having some sort of underlying base

00:03:15,730 --> 00:03:19,639
project and whether that you know

00:03:17,900 --> 00:03:23,379
there's a commercial bias developer to

00:03:19,639 --> 00:03:25,609
have their own Fork of Ed k 2 but anyway

00:03:23,379 --> 00:03:28,280
checking that out and then basically

00:03:25,609 --> 00:03:30,680
taking 10 different zip files from 10

00:03:28,280 --> 00:03:32,930
different vendors unpacking into that

00:03:30,680 --> 00:03:35,269
directory and working with us sir so

00:03:32,930 --> 00:03:37,250
because that model doesn't really scale

00:03:35,269 --> 00:03:40,459
to carrying multiple platforms in the

00:03:37,250 --> 00:03:42,500
same repository in the same branch they

00:03:40,459 --> 00:03:46,010
want to be able to keep that workflow

00:03:42,500 --> 00:03:48,139
with the new system and of course I'm

00:03:46,010 --> 00:03:50,260
fairly convinced that they will see the

00:03:48,139 --> 00:03:53,419
benefits of not doing that in the future

00:03:50,260 --> 00:03:55,370
but at the same time I was quite

00:03:53,419 --> 00:03:57,769
strongly feeling that the entire point

00:03:55,370 --> 00:03:59,810
of this is that we can stick multiple

00:03:57,769 --> 00:04:01,819
platforms preferably all of them into

00:03:59,810 --> 00:04:03,650
the same branch so we can see with this

00:04:01,819 --> 00:04:06,530
code commonality and we can start

00:04:03,650 --> 00:04:10,569
breaking out a lot of reinvented wheels

00:04:06,530 --> 00:04:10,569
and just getting them into many decay to

00:04:15,720 --> 00:04:24,430
we used to make you fi releases in leg

00:04:19,590 --> 00:04:28,300
and last year we kind of silently

00:04:24,430 --> 00:04:30,490
stopped doing that a it was a reasonable

00:04:28,300 --> 00:04:33,580
amount of overhead doing that but also

00:04:30,490 --> 00:04:37,300
we got the reference platform releases

00:04:33,580 --> 00:04:40,900
coming out which had to include firmware

00:04:37,300 --> 00:04:44,169
as well so we just sort of basically

00:04:40,900 --> 00:04:45,910
leaned on those guys to take the heavy

00:04:44,169 --> 00:04:48,040
lifting and work together with them to

00:04:45,910 --> 00:04:49,750
get those releases up so we're not going

00:04:48,040 --> 00:04:52,870
to go back to making any more leg

00:04:49,750 --> 00:04:58,330
releases that's all going to be through

00:04:52,870 --> 00:05:00,850
the the reference platforms work but

00:04:58,330 --> 00:05:04,389
doing this with the enterprise reference

00:05:00,850 --> 00:05:07,240
platform work has also perpetuated the

00:05:04,389 --> 00:05:10,500
broken mechanism that has been endemic

00:05:07,240 --> 00:05:14,229
in the arm you if I ecosystem of

00:05:10,500 --> 00:05:16,449
treating firmware as software so we're

00:05:14,229 --> 00:05:18,190
making we've been making releases they

00:05:16,449 --> 00:05:24,280
supposed to do at that point and flawed

00:05:18,190 --> 00:05:27,130
a bit later okay so we've been basically

00:05:24,280 --> 00:05:30,479
releasing fully vertically integrated

00:05:27,130 --> 00:05:34,500
software stacks of industry standard

00:05:30,479 --> 00:05:37,090
compatible interfaces but it it

00:05:34,500 --> 00:05:40,000
inevitably leads to bad habits and bad

00:05:37,090 --> 00:05:43,840
practice so we did that for 2016 06 /

00:05:40,000 --> 00:05:45,490
2016 12 there was some reason we

00:05:43,840 --> 00:05:49,120
actually had to do that right we're in

00:05:45,490 --> 00:05:53,169
order to be able to support some of the

00:05:49,120 --> 00:05:54,910
acpi features we kind of had to move

00:05:53,169 --> 00:05:57,130
things on both sides of the fence up

00:05:54,910 --> 00:06:00,550
until the point that we actually got

00:05:57,130 --> 00:06:03,220
stuff merged into the Linux kernel sins

00:06:00,550 --> 00:06:05,289
Linux 49 we're in a very good place we

00:06:03,220 --> 00:06:07,120
can move away from that now which means

00:06:05,289 --> 00:06:11,440
we absolutely have to as quickly as

00:06:07,120 --> 00:06:13,419
possible and from now on we will have

00:06:11,440 --> 00:06:16,690
the firmware releases will be leading

00:06:13,419 --> 00:06:19,780
the erp operating system releases by one

00:06:16,690 --> 00:06:22,530
two three months starting with 20 1704

00:06:19,780 --> 00:06:25,600
which is going to be the next one for

00:06:22,530 --> 00:06:28,630
the 05 or 06

00:06:25,600 --> 00:06:31,570
software station I will be on holiday

00:06:28,630 --> 00:06:35,140
until third of April so basically any

00:06:31,570 --> 00:06:37,420
firmware patches acpi table updates

00:06:35,140 --> 00:06:40,240
anything like that that you want to have

00:06:37,420 --> 00:06:43,990
in platform supported by the ERP release

00:06:40,240 --> 00:06:53,020
in May or June need to have it my inbox

00:06:43,990 --> 00:06:55,270
by the tenth of April that's mainly the

00:06:53,020 --> 00:06:57,490
old stuff that that we're doing in

00:06:55,270 --> 00:06:59,590
denaro but I have a couple of slides of

00:06:57,490 --> 00:07:06,100
other stuff that's happening in in this

00:06:59,590 --> 00:07:08,980
space the main thing I think is arm has

00:07:06,100 --> 00:07:12,850
released what's being called the

00:07:08,980 --> 00:07:15,220
architecture compliance with its already

00:07:12,850 --> 00:07:17,980
on github but that is the alpha version

00:07:15,220 --> 00:07:22,300
you know it builds you can make it work

00:07:17,980 --> 00:07:27,220
but it's not entirely complete and there

00:07:22,300 --> 00:07:29,560
there might be some rough edges it

00:07:27,220 --> 00:07:32,940
provides validation of SB SA and SB be

00:07:29,560 --> 00:07:37,870
our compliance the SDV our portion is

00:07:32,940 --> 00:07:41,800
based in part on the UEFI FCT which as

00:07:37,870 --> 00:07:44,680
we know is still available only to you

00:07:41,800 --> 00:07:47,890
if I for our members useful though we're

00:07:44,680 --> 00:07:50,620
working on that but for now if you want

00:07:47,890 --> 00:07:52,780
that part of the test framework you need

00:07:50,620 --> 00:07:55,870
to be you if I for a member and get your

00:07:52,780 --> 00:07:57,450
code from there but actually I would say

00:07:55,870 --> 00:08:00,400
the majority of their to be our test

00:07:57,450 --> 00:08:03,670
consists of the firmware test suite

00:08:00,400 --> 00:08:06,310
integrated into the OS so we're all

00:08:03,670 --> 00:08:09,610
basing this on the upstream love OS

00:08:06,310 --> 00:08:12,700
project with a few patches the sps a

00:08:09,610 --> 00:08:15,250
side that's a lot more bare metal pipe

00:08:12,700 --> 00:08:17,380
level of testing so that's sort of a

00:08:15,250 --> 00:08:19,030
standard own thing but we build

00:08:17,380 --> 00:08:22,200
everything under the same environment

00:08:19,030 --> 00:08:25,870
and we include that into the same image

00:08:22,200 --> 00:08:28,450
the current level s release is based on

00:08:25,870 --> 00:08:30,610
linux 4.6 and as i said in the previous

00:08:28,450 --> 00:08:32,880
slide we were in a bit of a problematic

00:08:30,610 --> 00:08:35,889
situation until 4.9 so there's a

00:08:32,880 --> 00:08:39,579
reasonable amount of Colonel patches

00:08:35,889 --> 00:08:42,219
stacked on top of that 4.6 colonel the

00:08:39,579 --> 00:08:44,769
next release of love OS is going to be

00:08:42,219 --> 00:08:46,779
based on four point 10 again at which

00:08:44,769 --> 00:08:50,970
point we can throw all of those patches

00:08:46,779 --> 00:08:54,160
away and just use the upstream colonel

00:08:50,970 --> 00:08:57,639
it says 4.9 there because when i wrote

00:08:54,160 --> 00:09:00,249
this slide that was true then basically

00:08:57,639 --> 00:09:01,779
the next release of love Wes had slipped

00:09:00,249 --> 00:09:04,989
to the point where they might as well

00:09:01,779 --> 00:09:06,910
use for point 10 but i think they

00:09:04,989 --> 00:09:09,669
promised me that it was going to go out

00:09:06,910 --> 00:09:19,529
and code freeze this week and release

00:09:09,669 --> 00:09:19,529
next week pass if it's in 410 yes yeah

00:09:21,269 --> 00:09:25,660
there was one console STC our thing as

00:09:24,100 --> 00:09:29,189
well that we go to 410 that we didn't

00:09:25,660 --> 00:09:32,949
get in 49 which makes it even better yes

00:09:29,189 --> 00:09:38,199
we're currently or arm is currently up

00:09:32,949 --> 00:09:42,309
streaming SBB our test to firmware test

00:09:38,199 --> 00:09:46,899
suite which is owned by canonical if you

00:09:42,309 --> 00:09:48,639
know that and the so for now we still

00:09:46,899 --> 00:09:50,319
have patches on top of firmware test

00:09:48,639 --> 00:09:52,029
suite and this we're hoping again to get

00:09:50,319 --> 00:09:55,600
rid of that as much as possible in the

00:09:52,029 --> 00:09:57,939
future so there will be basically a dash

00:09:55,600 --> 00:10:01,209
dash SBB are come online option to the

00:09:57,939 --> 00:10:05,199
firmware test suite which will change

00:10:01,209 --> 00:10:08,199
some tests from verify that this table

00:10:05,199 --> 00:10:09,639
is valid if it exists to fail if this

00:10:08,199 --> 00:10:12,009
table does not exist in this platform

00:10:09,639 --> 00:10:14,889
and a few things like that adding test

00:10:12,009 --> 00:10:22,089
for another few trees and tables and so

00:10:14,889 --> 00:10:26,040
on that's that's the SCT

00:10:22,089 --> 00:10:26,040
yes yeah

00:10:57,250 --> 00:11:02,210
what we'll do on the redhead ciders will

00:10:59,660 --> 00:11:04,130
basically run all of this stuff on

00:11:02,210 --> 00:11:05,810
anyone's proto platforms they send us

00:11:04,130 --> 00:11:08,300
because we kind of do that already for

00:11:05,810 --> 00:11:10,310
first WTF but if they send us something

00:11:08,300 --> 00:11:13,070
and it doesn't pass all of these things

00:11:10,310 --> 00:11:14,990
we're just going to say now you failed

00:11:13,070 --> 00:11:16,460
it's broken you know we're not

00:11:14,990 --> 00:11:22,570
interested come back to us when you have

00:11:16,460 --> 00:11:30,310
it when you pass all this stuff cool

00:11:22,570 --> 00:11:34,220
final slide which is kind of big grub

00:11:30,310 --> 00:11:37,130
grub has been a problem child for a

00:11:34,220 --> 00:11:40,280
while and that there hasn't been an

00:11:37,130 --> 00:11:44,240
upstream release for three and a half

00:11:40,280 --> 00:11:50,150
years four and a half years which means

00:11:44,240 --> 00:11:52,910
basically lost if not all of the AR 64

00:11:50,150 --> 00:11:57,410
and armed support has not formally been

00:11:52,910 --> 00:11:59,990
part of a release version and lots of

00:11:57,410 --> 00:12:03,260
bug fixes improvements of you if I

00:11:59,990 --> 00:12:09,860
support and so on that'sthat's not been

00:12:03,260 --> 00:12:11,840
there but last at pembridge there was an

00:12:09,860 --> 00:12:14,690
announcement that bladimir who is the

00:12:11,840 --> 00:12:17,150
head maintainer was going to pick up

00:12:14,690 --> 00:12:18,950
three new sub maintain errs to help him

00:12:17,150 --> 00:12:21,470
speed things up and tear up the backlog

00:12:18,950 --> 00:12:26,930
and actually get release out the door

00:12:21,470 --> 00:12:32,780
and on the third of februari this year

00:12:26,930 --> 00:12:34,520
the RC one was tagged now the intent was

00:12:32,780 --> 00:12:37,730
that the release would go out in

00:12:34,520 --> 00:12:42,170
February but it not happened but it's

00:12:37,730 --> 00:12:48,110
it's clearly moving along the other

00:12:42,170 --> 00:12:51,950
thing which is possibly the big news is

00:12:48,110 --> 00:12:56,990
that there is now a proposal for how to

00:12:51,950 --> 00:12:58,970
integrate image verification into the

00:12:56,990 --> 00:13:01,430
upstream grub if we had this horrible

00:12:58,970 --> 00:13:02,120
situation for years now we're all of the

00:13:01,430 --> 00:13:05,150
distro

00:13:02,120 --> 00:13:07,130
have their own local copies based off

00:13:05,150 --> 00:13:09,260
some stuff that Matthew Garrett threw

00:13:07,130 --> 00:13:10,970
together a few years ago and they're all

00:13:09,260 --> 00:13:13,010
diverging and they're kind of sometimes

00:13:10,970 --> 00:13:16,550
behaving similarly and sometimes Kadim

00:13:13,010 --> 00:13:19,940
not and obviously having that situation

00:13:16,550 --> 00:13:24,890
and a security feature is extra

00:13:19,940 --> 00:13:26,930
undesirable but there is now a proposal

00:13:24,890 --> 00:13:31,070
for an abstraction layer to deal with

00:13:26,930 --> 00:13:35,270
both the gpg signed images which grub

00:13:31,070 --> 00:13:38,690
supported in the past but also TPM

00:13:35,270 --> 00:13:42,110
measured boots and actually integrating

00:13:38,690 --> 00:13:43,580
support for the shim protocol and that

00:13:42,110 --> 00:13:50,540
is going to be a huge improvement for

00:13:43,580 --> 00:13:54,529
everyone one thing one thing on the

00:13:50,540 --> 00:13:56,420
website is a really big kudos being

00:13:54,529 --> 00:13:57,650
clueless utd to the grub developers if

00:13:56,420 --> 00:13:59,420
you've ever had a bad experience on

00:13:57,650 --> 00:14:01,010
submitting code to grab which is

00:13:59,420 --> 00:14:04,130
basically a given if you've ever

00:14:01,010 --> 00:14:05,600
submitted code to go up before that's

00:14:04,130 --> 00:14:07,580
changed a lot day they're actually

00:14:05,600 --> 00:14:10,430
responsive now they review your patches

00:14:07,580 --> 00:14:11,990
they have good comments and they do take

00:14:10,430 --> 00:14:13,279
patches you don't have to have 500

00:14:11,990 --> 00:14:14,900
patches on top of upstream gap in the

00:14:13,279 --> 00:14:18,200
distribution anymore so if you own a

00:14:14,900 --> 00:14:21,470
distribution make sure to flush your

00:14:18,200 --> 00:14:24,890
cues because now it's possible before it

00:14:21,470 --> 00:14:27,170
wasn't and to be fair I think that's

00:14:24,890 --> 00:14:29,779
part of the reason why this release has

00:14:27,170 --> 00:14:32,120
taken so long because they are Jen doing

00:14:29,779 --> 00:14:34,640
Leigh going through the support the bug

00:14:32,120 --> 00:14:36,020
list on Savannah and trying to close out

00:14:34,640 --> 00:14:37,700
everything before they get to release

00:14:36,020 --> 00:14:39,140
done so they're not just dragging their

00:14:37,700 --> 00:14:40,490
heels they're dealing with the fact that

00:14:39,140 --> 00:14:49,010
they haven't done this for four years

00:14:40,490 --> 00:14:55,279
and that's all for me any questions okay

00:14:49,010 --> 00:14:58,250
okay 271 and put your questions hi um

00:14:55,279 --> 00:15:02,089
first of all do we still need grubs when

00:14:58,250 --> 00:15:04,610
we have UEFI what what's missing in you

00:15:02,089 --> 00:15:06,410
fi that doesn't exist in sorry what yeah

00:15:04,610 --> 00:15:07,820
what's missing in the FI it's not a

00:15:06,410 --> 00:15:11,240
question amazing into the question of

00:15:07,820 --> 00:15:12,920
its useful abstraction layer but all of

00:15:11,240 --> 00:15:15,620
this yet can you guys can you verify

00:15:12,920 --> 00:15:18,350
that I can but that's going to take

00:15:15,620 --> 00:15:19,910
well that's the basic answer to your

00:15:18,350 --> 00:15:22,790
question it's a useful abstraction layer

00:15:19,910 --> 00:15:24,680
do you fundamentally need it in order to

00:15:22,790 --> 00:15:27,050
boot the linux kernel on the UEFI system

00:15:24,680 --> 00:15:29,060
no but it's a very useful abstraction

00:15:27,050 --> 00:15:30,680
layer for distributions okay the other

00:15:29,060 --> 00:15:36,050
question I think that was mentioned by

00:15:30,680 --> 00:15:39,440
he narrows CEO eb c compiler support for

00:15:36,050 --> 00:15:41,330
you know cross-platform drivers there it

00:15:39,440 --> 00:15:43,880
will there be a lean arrow initiative to

00:15:41,330 --> 00:15:45,589
develop one from scratch or is it like

00:15:43,880 --> 00:15:47,330
you know are you guys waiting for a

00:15:45,589 --> 00:15:50,660
contract to do that or is it a

00:15:47,330 --> 00:15:53,570
possibility the the one that's that's

00:15:50,660 --> 00:15:54,650
you know we had the only one is the

00:15:53,570 --> 00:15:56,180
Microsoft one and it's not even

00:15:54,650 --> 00:15:57,770
supported anymore so what are we do

00:15:56,180 --> 00:16:02,000
notice the int'l one our Intel sorry

00:15:57,770 --> 00:16:04,460
internet yeah so what what's the story

00:16:02,000 --> 00:16:08,210
here what's the plan Paulino so we have

00:16:04,460 --> 00:16:11,060
drafted a plan for how to do how to

00:16:08,210 --> 00:16:12,770
develop the spaced on llvm what we

00:16:11,060 --> 00:16:14,029
haven't done is resource that plan and

00:16:12,770 --> 00:16:15,800
that's the question for the steering

00:16:14,029 --> 00:16:20,240
committee to decide when and how to do

00:16:15,800 --> 00:16:22,670
that and the final question is can we

00:16:20,240 --> 00:16:25,250
can we do cell phones to the arm UEFI

00:16:22,670 --> 00:16:29,930
development today can we compile an arm

00:16:25,250 --> 00:16:34,070
UEFI on top of the NAM machine i I this

00:16:29,930 --> 00:16:39,589
is not over 32 Chromebook apart from

00:16:34,070 --> 00:16:44,089
titanium I kid you not I also compile

00:16:39,589 --> 00:16:46,850
and run my air 64 UEFI on that one and I

00:16:44,089 --> 00:16:49,730
actually have an a or 64 qemu that i use

00:16:46,850 --> 00:16:56,690
on my 32-bit arm to test that the 64-bit

00:16:49,730 --> 00:16:57,830
UEFI works cool thank you nice a quick

00:16:56,690 --> 00:17:00,529
one it we support at the beginning you

00:16:57,830 --> 00:17:02,839
had the open platform package being

00:17:00,529 --> 00:17:05,270
moved into the tea addict or upstream

00:17:02,839 --> 00:17:07,280
I'm off I'll do that so it just happens

00:17:05,270 --> 00:17:11,390
asking for a timeline and that sort of

00:17:07,280 --> 00:17:17,319
thing prime-line is ideally by the end

00:17:11,390 --> 00:17:17,319
of last year but I realized that

00:17:17,699 --> 00:17:22,780
realistically it's going to be I'm I

00:17:21,189 --> 00:17:24,730
guess I'm going to have to go into

00:17:22,780 --> 00:17:27,309
hiding immediately after the April

00:17:24,730 --> 00:17:35,580
release but that's probably the only way

00:17:27,309 --> 00:17:35,580
it's going to happen yeah no comment

00:17:36,360 --> 00:17:39,730
okay I'll and over to art if you have

00:17:38,650 --> 00:17:45,040
any more questions we can take that

00:17:39,730 --> 00:17:47,770
later okay so I'll just run through a

00:17:45,040 --> 00:17:50,830
couple of slides on the work I've been

00:17:47,770 --> 00:17:52,840
doing on the sides over the past year

00:17:50,830 --> 00:18:02,049
and a half maybe to improve memory

00:17:52,840 --> 00:18:04,540
protection in janak or so this may be

00:18:02,049 --> 00:18:09,130
bit sensationalist being under attack

00:18:04,540 --> 00:18:10,720
but I've been working on this topic not

00:18:09,130 --> 00:18:16,090
necessarily new if I that's the kind of

00:18:10,720 --> 00:18:19,720
embedded platform security since 2009

00:18:16,090 --> 00:18:23,020
and back then it was quite difficult to

00:18:19,720 --> 00:18:26,169
get people excited about securing their

00:18:23,020 --> 00:18:29,200
memory and explaining that there's more

00:18:26,169 --> 00:18:31,270
than copying right or that kind of

00:18:29,200 --> 00:18:36,610
things that can actually make use of

00:18:31,270 --> 00:18:38,370
which only bit in your page tables so

00:18:36,610 --> 00:18:41,799
[Music]

00:18:38,370 --> 00:18:43,059
yeah I think this is I'm not going to

00:18:41,799 --> 00:18:45,820
read all sides because we only have a

00:18:43,059 --> 00:18:47,679
couple of minutes but the idea is that

00:18:45,820 --> 00:18:48,910
because the colonel is getting more

00:18:47,679 --> 00:18:51,490
serious about memory protection by

00:18:48,910 --> 00:18:52,690
default it makes sense to do the same in

00:18:51,490 --> 00:19:00,160
the firmware because otherwise you just

00:18:52,690 --> 00:19:03,210
move the problem around so this is the

00:19:00,160 --> 00:19:05,650
current situation basically if you have

00:19:03,210 --> 00:19:07,990
well week in linux kernel were quite

00:19:05,650 --> 00:19:11,140
serious about locking things down more

00:19:07,990 --> 00:19:12,730
and more and then well actually pushing

00:19:11,140 --> 00:19:16,140
on bachelor on the curl side as well to

00:19:12,730 --> 00:19:21,309
to even improve that's a bit more and

00:19:16,140 --> 00:19:23,740
well DB be kind of ultimate goal because

00:19:21,309 --> 00:19:25,390
when you're loading you have to load

00:19:23,740 --> 00:19:28,299
stuff before you can execute it but the

00:19:25,390 --> 00:19:29,320
ultimate goal is to have as few regions

00:19:28,299 --> 00:19:31,360
that are

00:19:29,320 --> 00:19:34,110
writable NX kids about the same time

00:19:31,360 --> 00:19:38,590
because it's basically the biggest

00:19:34,110 --> 00:19:40,659
biggest issue under you fi sides they

00:19:38,590 --> 00:19:43,259
basically never cared so everything is

00:19:40,659 --> 00:19:43,259
just read write execute

00:19:49,700 --> 00:19:54,590
so for the regions that the colonel

00:19:52,039 --> 00:19:57,230
actually maps but which are basically

00:19:54,590 --> 00:20:03,860
owned by the former we have a new table

00:19:57,230 --> 00:20:05,659
that was specified in 2.6 where in

00:20:03,860 --> 00:20:08,450
addition to the UF I memory map which

00:20:05,659 --> 00:20:11,210
describes the nature of those regions

00:20:08,450 --> 00:20:13,549
there's a table on the side that for

00:20:11,210 --> 00:20:16,159
every runtime data or run some code

00:20:13,549 --> 00:20:18,529
region tells you which parts inside

00:20:16,159 --> 00:20:21,889
those regions you can map with either no

00:20:18,529 --> 00:20:25,429
next check or read-only permissions this

00:20:21,889 --> 00:20:28,250
does require the section alignment to

00:20:25,429 --> 00:20:32,000
make sense so it also implies that alarm

00:20:28,250 --> 00:20:35,149
64 your freak of binaries me to have 64

00:20:32,000 --> 00:20:38,510
K section alignment which is already

00:20:35,149 --> 00:20:40,340
more or less mandated in respect anyway

00:20:38,510 --> 00:20:44,990
but it's something you have to take in

00:20:40,340 --> 00:20:48,529
account explicitly and so we have

00:20:44,990 --> 00:20:50,059
support for this table in 4.7 and the

00:20:48,529 --> 00:20:52,190
Intel guys are catching up now and

00:20:50,059 --> 00:20:54,340
they've enabled it for four point 11 as

00:20:52,190 --> 00:20:54,340
well

00:21:01,779 --> 00:21:08,889
this the DHC non-executable stack so

00:21:05,049 --> 00:21:11,080
this is like the firmware phase where

00:21:08,889 --> 00:21:14,219
all the drivers are dispatched and which

00:21:11,080 --> 00:21:16,299
spills over into BDS where you're

00:21:14,219 --> 00:21:17,999
loading stuff from the network loading

00:21:16,299 --> 00:21:22,570
stuff from the disk doing other stuff

00:21:17,999 --> 00:21:25,029
which may involve interested data and so

00:21:22,570 --> 00:21:30,729
there was support edit for mapping the

00:21:25,029 --> 00:21:35,799
zone technol next critical and I enabled

00:21:30,729 --> 00:21:38,109
that a while ago for arm 64 in the the

00:21:35,799 --> 00:21:39,729
third creamy reference bills and some of

00:21:38,109 --> 00:21:42,219
the platforms we have an open platform

00:21:39,729 --> 00:21:44,469
PKG and actually the patches that are

00:21:42,219 --> 00:21:48,279
pending for 22 bit arm I just merge them

00:21:44,469 --> 00:21:52,629
the other day so and I fetch on the list

00:21:48,279 --> 00:21:53,859
for Ryan to cash from the 32-bit arm you

00:21:52,629 --> 00:21:57,239
actually make sure that it works on your

00:21:53,859 --> 00:22:00,989
platforms that then we have the the

00:21:57,239 --> 00:22:00,989
stack map non-excludable

00:22:03,860 --> 00:22:10,790
and this is like the peak of image

00:22:07,580 --> 00:22:12,410
protection is like the boot time

00:22:10,790 --> 00:22:14,900
counterpart of the memory attribute

00:22:12,410 --> 00:22:18,230
table where you build your peak of

00:22:14,900 --> 00:22:21,320
substandard peak of images have very

00:22:18,230 --> 00:22:22,940
small section alignments which is not

00:22:21,320 --> 00:22:27,080
even allowed by the peak of spec by the

00:22:22,940 --> 00:22:30,040
way but it seemed to work so they're

00:22:27,080 --> 00:22:32,990
just a hard-coded thats everywhere and

00:22:30,040 --> 00:22:35,960
recently one of the Intel former team

00:22:32,990 --> 00:22:38,929
engineers implements the speak of

00:22:35,960 --> 00:22:40,190
protection where you build your peak of

00:22:38,929 --> 00:22:43,220
images in a way where you can

00:22:40,190 --> 00:22:47,990
meaningfully separate code and data and

00:22:43,220 --> 00:22:50,830
medical read-only and data and electric

00:22:47,990 --> 00:22:50,830
executable

00:23:00,519 --> 00:23:07,179
and mapping your peak of images secure

00:23:04,959 --> 00:23:11,529
doesn't make a lot of sense if all other

00:23:07,179 --> 00:23:14,559
memory is mapped we'd write X cube so

00:23:11,529 --> 00:23:16,659
because the Intel guys seemed serious

00:23:14,559 --> 00:23:19,599
about fixing this I kind of jumped in

00:23:16,659 --> 00:23:21,269
and proposed some patches that they

00:23:19,599 --> 00:23:24,639
should just map everything

00:23:21,269 --> 00:23:26,469
non-executable unless you're going to

00:23:24,639 --> 00:23:32,339
use it to execute something from and

00:23:26,469 --> 00:23:36,849
then it gets three Maps executable and

00:23:32,339 --> 00:23:40,289
this broke some stuff so it's not

00:23:36,849 --> 00:23:44,619
something we can enable by default

00:23:40,289 --> 00:23:48,039
completely strictly because well grab

00:23:44,619 --> 00:23:49,959
assumes that anything is allocates it

00:23:48,039 --> 00:23:52,059
can execute from which is not entirely

00:23:49,959 --> 00:23:55,059
unreasonable for a louder so it does

00:23:52,059 --> 00:23:58,859
make sense that they did it that way but

00:23:55,059 --> 00:24:02,049
it's still something we may want to fix

00:23:58,859 --> 00:24:04,959
and well one thing to mention here is

00:24:02,049 --> 00:24:09,309
that because the way we wire up grub

00:24:04,959 --> 00:24:12,809
with shame and all these circumventing

00:24:09,309 --> 00:24:15,339
normal note image controls in able to do

00:24:12,809 --> 00:24:17,259
verification against the shim

00:24:15,339 --> 00:24:20,019
certificates rather than be firmer

00:24:17,259 --> 00:24:25,239
certificates and you if I doesn't

00:24:20,019 --> 00:24:28,179
specify manipulation controls to

00:24:25,239 --> 00:24:33,159
actually tighten down the peak of image

00:24:28,179 --> 00:24:35,709
protection really only works for OS

00:24:33,159 --> 00:24:38,019
louder side using normal load image

00:24:35,709 --> 00:24:41,169
interfaces and if we want anything on

00:24:38,019 --> 00:24:44,369
top of that we need to do it well we

00:24:41,169 --> 00:24:44,369
need to work on spec ciphers

00:24:50,760 --> 00:24:56,670
no no now this is a free stuff that was

00:24:54,790 --> 00:25:05,890
living last month dinosaurs okay let's

00:24:56,670 --> 00:25:08,590
whip up some slides okay just to have

00:25:05,890 --> 00:25:11,730
the old end-to-end picture I'm doing

00:25:08,590 --> 00:25:16,210
some work on the Linux side as well and

00:25:11,730 --> 00:25:19,360
so the because we omit the kernel image

00:25:16,210 --> 00:25:20,830
poses as a peak of binary as well you

00:25:19,360 --> 00:25:24,520
have to enable the same kind of section

00:25:20,830 --> 00:25:26,380
alignment and mapping attributes in the

00:25:24,520 --> 00:25:29,140
peak of header to make sure that only

00:25:26,380 --> 00:25:30,940
the stuff that well that you have

00:25:29,140 --> 00:25:38,950
district split between right to an

00:25:30,940 --> 00:25:41,140
executable and it makes sense well it's

00:25:38,950 --> 00:25:42,550
it's under debate whether how far you

00:25:41,140 --> 00:25:44,980
want to take this I mean if you really

00:25:42,550 --> 00:25:47,140
early and you have to do some mappings

00:25:44,980 --> 00:25:51,130
that are right to rate the read write

00:25:47,140 --> 00:25:52,780
execute but you're not consuming

00:25:51,130 --> 00:25:55,140
external data or you're really just

00:25:52,780 --> 00:25:59,470
setting up a table maybe doesn't matter

00:25:55,140 --> 00:26:01,330
so have some so the D basically the top

00:25:59,470 --> 00:26:02,800
part dispatches that are currently under

00:26:01,330 --> 00:26:05,790
review and probably going in and have

00:26:02,800 --> 00:26:10,840
some RFC patches out that do some

00:26:05,790 --> 00:26:13,480
ungodly things to move the colonel round

00:26:10,840 --> 00:26:16,530
so it happens to blend on a section

00:26:13,480 --> 00:26:18,820
boundary so you can map one side of this

00:26:16,530 --> 00:26:21,400
section boundary read right on the other

00:26:18,820 --> 00:26:25,870
side weak excuse I'm not expecting that

00:26:21,400 --> 00:26:29,010
to be acceptable to the maintenance but

00:26:25,870 --> 00:26:29,010
i may get surprised

00:26:33,120 --> 00:26:36,290
any questions

00:26:37,650 --> 00:26:44,230
okay thanks

00:26:40,160 --> 00:26:49,200
[Applause]

00:26:44,230 --> 00:26:49,200

YouTube URL: https://www.youtube.com/watch?v=Kr21uAiM-q8


