Title: BUD17-421 What's happening with ARM Mali drivers
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-421
Session Name: What's happening with ARM Mali drivers - BUD17-421
Speaker: John Reitan, 
Ketil Johnsen
Track: 


★ Session Summary ★
Ketil Johnsen and John Reitan from ARM will provide the latest update on ARM's Mali drivers and hold a Q&A session.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-421/
Presentation: 
Video: https://youtu.be/dPjSm_98rgo
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: Mali, ARM mali, drivers
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,130 --> 00:00:15,089
[Music]

00:00:11,719 --> 00:00:17,940
okay I guess we're ready to start so

00:00:15,089 --> 00:00:19,920
yeah and cattle ni we're working in the

00:00:17,940 --> 00:00:22,650
arms in PG division so we work on the

00:00:19,920 --> 00:00:24,990
Molly DP drivers used to Molly work on

00:00:22,650 --> 00:00:27,869
the multi 411 drivers so what's in the

00:00:24,990 --> 00:00:30,000
Heike but the last seven years and

00:00:27,869 --> 00:00:32,460
you've been about five years working on

00:00:30,000 --> 00:00:35,280
the Midgard on the used car generation

00:00:32,460 --> 00:00:37,079
so over experience in Mali for hundreds

00:00:35,280 --> 00:00:40,530
a bit rusty but you can see lots of

00:00:37,079 --> 00:00:45,750
questions about that so first we're

00:00:40,530 --> 00:00:47,430
gonna start give some updates about some

00:00:45,750 --> 00:00:50,489
new stuff that's happening in a Molly

00:00:47,430 --> 00:00:54,210
ecosystem so we've just released Vokoun

00:00:50,489 --> 00:00:57,780
SDK it's MIT license this can find it on

00:00:54,210 --> 00:01:01,020
github it was released at G&G DC so you

00:00:57,780 --> 00:01:02,430
can experiment with it use it to play

00:01:01,020 --> 00:01:03,690
around on the Lord a little bit about

00:01:02,430 --> 00:01:05,850
volcanic an even you're sitting

00:01:03,690 --> 00:01:11,490
commercial products because its premiere

00:01:05,850 --> 00:01:14,610
permitted so yeah please please do and

00:01:11,490 --> 00:01:17,520
you can visit our webpage to see a

00:01:14,610 --> 00:01:19,110
little bit about typical use cases I

00:01:17,520 --> 00:01:21,030
think there are a few examples using it

00:01:19,110 --> 00:01:23,100
and you can take it from there basically

00:01:21,030 --> 00:01:25,020
to start experimenting with welcome

00:01:23,100 --> 00:01:27,180
because I know that or so create a mom

00:01:25,020 --> 00:01:29,310
for actually learning how to use Vulcan

00:01:27,180 --> 00:01:31,020
of an API because it seems like unless

00:01:29,310 --> 00:01:32,250
you're using one of those big game

00:01:31,020 --> 00:01:35,280
engines you don't know actually how to

00:01:32,250 --> 00:01:43,649
use volcano optimized way so this is a

00:01:35,280 --> 00:01:47,250
good starting point ok so the woken is

00:01:43,649 --> 00:01:49,680
supported on the Bifrost GPUs and mid

00:01:47,250 --> 00:01:51,390
car gps but not on the used car tipa so

00:01:49,680 --> 00:01:58,860
the high keyboard won't support Vulcan

00:01:51,390 --> 00:02:02,070
because it's all glass to only slc so

00:01:58,860 --> 00:02:03,930
next up it's not released yet but it's

00:02:02,070 --> 00:02:05,759
going to be released by at the end of

00:02:03,930 --> 00:02:09,890
this month or early next month with the

00:02:05,759 --> 00:02:12,900
arm compute library it's a set of

00:02:09,890 --> 00:02:15,120
functions you can use in your

00:02:12,900 --> 00:02:16,980
program and they trust back and

00:02:15,120 --> 00:02:18,810
footballs running on the GP using opencl

00:02:16,980 --> 00:02:21,299
but also thrown on the whole CPUs in

00:02:18,810 --> 00:02:24,659
neon intrinsics and it allows you to do

00:02:21,299 --> 00:02:28,530
as it is here all of the fun stuff

00:02:24,659 --> 00:02:31,200
that's useful for say recognizing say

00:02:28,530 --> 00:02:34,939
people in a picture and like recognizing

00:02:31,200 --> 00:02:36,930
objects in general so it's something and

00:02:34,939 --> 00:02:38,220
there's actually another link I can

00:02:36,930 --> 00:02:40,109
provide you that's going to fit onto

00:02:38,220 --> 00:02:41,670
this webpage so if you go to community

00:02:40,109 --> 00:02:43,739
are not common search for it is much

00:02:41,670 --> 00:02:47,519
easier than to actually try to have a

00:02:43,739 --> 00:02:50,970
very long link the plan is to release it

00:02:47,519 --> 00:02:54,450
on github on arms software page but it's

00:02:50,970 --> 00:02:57,540
not dr or not there yet so that's the

00:02:54,450 --> 00:03:00,810
latest news from a little short session

00:02:57,540 --> 00:03:03,299
so mainly this session was supposed to

00:03:00,810 --> 00:03:05,849
be a Q&A and i know some of our friends

00:03:03,299 --> 00:03:19,829
have some questions that he's going to

00:03:05,849 --> 00:03:22,109
repeat from the last connect well so the

00:03:19,829 --> 00:03:23,549
current situation for us is that we're

00:03:22,109 --> 00:03:26,329
not going to open source the user space

00:03:23,549 --> 00:03:28,379
drivers because there's a risk game

00:03:26,329 --> 00:03:30,150
evaluation and right now the risk of

00:03:28,379 --> 00:03:37,500
passing trolls is too great basically

00:03:30,150 --> 00:03:42,750
versus what the game would work ok I'm a

00:03:37,500 --> 00:03:44,370
software engineer yeah so the over

00:03:42,750 --> 00:03:45,659
problem is that we don't suspect that

00:03:44,370 --> 00:03:47,010
they are broken in the patterns but the

00:03:45,659 --> 00:03:48,419
problem with patent trolls is are going

00:03:47,010 --> 00:03:50,489
to go after Armin arms going to be

00:03:48,419 --> 00:03:52,290
needing to defend ourselves and we're

00:03:50,489 --> 00:03:54,930
going to spend all the dollars and if we

00:03:52,290 --> 00:03:57,060
win / when we win there's no money to

00:03:54,930 --> 00:04:00,299
begin at then there's no damages or

00:03:57,060 --> 00:04:01,709
anything that we can reclaim from from

00:04:00,299 --> 00:04:03,959
like the patent trolls because they

00:04:01,709 --> 00:04:07,739
basically have no money and no nothing

00:04:03,959 --> 00:04:10,639
we can go after and they have nothing to

00:04:07,739 --> 00:04:10,639
do is basically so

00:04:12,260 --> 00:04:20,579
so happy with a bouncer still so I

00:04:18,959 --> 00:04:30,630
thought you would say why we're not open

00:04:20,579 --> 00:04:39,360
sourcing userspace drivers but it still

00:04:30,630 --> 00:04:41,160
keeps asking yeah so and to answer your

00:04:39,360 --> 00:04:42,930
follow-up question was will it change

00:04:41,160 --> 00:04:44,669
before the next connect as I said it's a

00:04:42,930 --> 00:04:48,800
continuous evolution between the risk

00:04:44,669 --> 00:04:48,800
and games so I can't promise anything

00:04:56,690 --> 00:05:01,590
well I'm not a lawyer or anything but I

00:04:59,550 --> 00:05:04,320
would assume a Vulcan drawer is less

00:05:01,590 --> 00:05:17,520
risky but yeah as I said I'm no lawyer

00:05:04,320 --> 00:05:20,100
so I'm gonna go into that area yes I

00:05:17,520 --> 00:05:22,410
agree so welkin it's the future and if

00:05:20,100 --> 00:05:24,180
the lawyers agree that our Vulcan driver

00:05:22,410 --> 00:05:26,010
is less risky it might be something

00:05:24,180 --> 00:05:29,190
that's going to sway them towards the

00:05:26,010 --> 00:05:30,960
game is hard on the risk so maybe that's

00:05:29,190 --> 00:05:40,979
true to what happens before the next

00:05:30,960 --> 00:05:44,160
connect yeah but remember Molly's also

00:05:40,979 --> 00:05:45,930
display and video and Cody code so if

00:05:44,160 --> 00:05:47,460
you offer other drivers like the Molly

00:05:45,930 --> 00:05:50,220
display it's in main line it's fully

00:05:47,460 --> 00:05:51,990
supported and we're working on the open

00:05:50,220 --> 00:05:55,169
sourcing stuff for the model a video

00:05:51,990 --> 00:05:56,370
hardware as well so yeah maybe that's

00:05:55,169 --> 00:06:03,060
going to be good answers for an

00:05:56,370 --> 00:06:04,860
explanation yeah there's some device g

00:06:03,060 --> 00:06:06,660
bindings process for the old Molly

00:06:04,860 --> 00:06:08,400
drivers and there's also plans for

00:06:06,660 --> 00:06:10,680
actually making proper device your

00:06:08,400 --> 00:06:15,060
bindings for the Midgard / Bifrost

00:06:10,680 --> 00:06:16,710
generation of GPS which i think is

00:06:15,060 --> 00:06:19,680
actually more progress than we've had in

00:06:16,710 --> 00:06:21,000
the last few years yeah so the problem

00:06:19,680 --> 00:06:22,830
you have there is that a lot of the

00:06:21,000 --> 00:06:24,659
vendors have extended what they

00:06:22,830 --> 00:06:25,560
considered wisely because azita so yet

00:06:24,659 --> 00:06:28,290
another weight into

00:06:25,560 --> 00:06:30,930
they're custom stuff so normal when we

00:06:28,290 --> 00:06:32,790
find associates they have modified the

00:06:30,930 --> 00:06:34,320
device tree bindings by adding new stuff

00:06:32,790 --> 00:06:36,540
stuff they need internal in their

00:06:34,320 --> 00:06:38,400
integration of the drivers like special

00:06:36,540 --> 00:06:40,500
stuff to integrate into the Roger IP and

00:06:38,400 --> 00:06:42,720
a new pot handles through the device

00:06:40,500 --> 00:06:46,770
tree alright so this is what happened

00:06:42,720 --> 00:06:48,419
here so so far we've never taken the

00:06:46,770 --> 00:06:50,220
device rebinding soon as we said well

00:06:48,419 --> 00:06:52,080
there's no kernel driver and then of

00:06:50,220 --> 00:06:54,090
course every SOC vendor came up with

00:06:52,080 --> 00:06:55,910
their own device to bindings doing the

00:06:54,090 --> 00:06:58,650
same things and somewhat different way

00:06:55,910 --> 00:07:00,930
as you've a complaint like why are they

00:06:58,650 --> 00:07:03,389
all using those non upstream device tree

00:07:00,930 --> 00:07:05,669
bindings well there are no upstream

00:07:03,389 --> 00:07:07,830
button yeah I agree so yes we have to

00:07:05,669 --> 00:07:09,000
get there some some way one step at a

00:07:07,830 --> 00:07:10,740
time because because we have provided

00:07:09,000 --> 00:07:12,450
like documentation with device your

00:07:10,740 --> 00:07:14,280
bindings as if it were upstream to our

00:07:12,450 --> 00:07:16,500
customers but they haven't treated it

00:07:14,280 --> 00:07:18,840
also picks cry i got it from the colonel

00:07:16,500 --> 00:07:20,850
perspective whatever you publish mix has

00:07:18,840 --> 00:07:22,590
no impact whatsoever on what we do in

00:07:20,850 --> 00:07:23,970
the car no yeah i agree what once it's

00:07:22,590 --> 00:07:26,940
in the car no that's actually the

00:07:23,970 --> 00:07:29,190
official so now hopefully that matches

00:07:26,940 --> 00:07:31,110
what you have i don't know so what we

00:07:29,190 --> 00:07:32,910
plan is to actually work with maybe

00:07:31,110 --> 00:07:34,410
because i have like a lot of previous

00:07:32,910 --> 00:07:36,479
connect on a plumber's we talked about

00:07:34,410 --> 00:07:38,610
maybe opening up the potential for the

00:07:36,479 --> 00:07:40,590
colonel accepts device via binding for

00:07:38,610 --> 00:07:43,380
some driver which isn't actually in main

00:07:40,590 --> 00:07:45,210
line just to bait a glass of starting

00:07:43,380 --> 00:07:47,070
point actually maybe in the future to

00:07:45,210 --> 00:07:50,270
merge it in the main line if we get an

00:07:47,070 --> 00:07:50,270
open source user base

00:07:55,410 --> 00:07:59,199
more for the audience because I already

00:07:57,490 --> 00:08:00,819
talked to you a little bit about this so

00:07:59,199 --> 00:08:02,789
something that's been a huge pain point

00:08:00,819 --> 00:08:05,860
over the last little time period is

00:08:02,789 --> 00:08:10,509
trying to run Molly against mainline

00:08:05,860 --> 00:08:13,660
kernels is there anything that you want

00:08:10,509 --> 00:08:17,460
to tell there and say that might improve

00:08:13,660 --> 00:08:20,080
the situation in the future yeah so

00:08:17,460 --> 00:08:22,599
internally an arm we work on actually

00:08:20,080 --> 00:08:24,039
fixing issues it it's the delay of

00:08:22,599 --> 00:08:25,990
releases and all that which actually

00:08:24,039 --> 00:08:29,410
postponed when you actually get access

00:08:25,990 --> 00:08:31,270
and like our problem is that over

00:08:29,410 --> 00:08:33,399
commercial interest are normally on

00:08:31,270 --> 00:08:35,890
older kernels was like this ship Android

00:08:33,399 --> 00:08:37,060
devices feed through 18 and 40 1 4 of 4

00:08:35,890 --> 00:08:39,370
and that's what we actually need to

00:08:37,060 --> 00:08:41,589
focus on because that's what we get

00:08:39,370 --> 00:08:46,959
actually paying customers asking us for

00:08:41,589 --> 00:08:49,149
I know but like internally on arm like

00:08:46,959 --> 00:08:50,680
engineers actually fix mainline kernel

00:08:49,149 --> 00:08:51,880
issues because you have to use mainline

00:08:50,680 --> 00:08:53,620
kernels internally when we are

00:08:51,880 --> 00:08:55,839
developing so we actually try to fix it

00:08:53,620 --> 00:08:57,399
but it we're talking about months and

00:08:55,839 --> 00:08:59,560
months before actually the latest called

00:08:57,399 --> 00:09:01,089
we're writing actually is published so

00:08:59,560 --> 00:09:02,470
that's a problem and it's not easy for

00:09:01,089 --> 00:09:18,820
us to actually provide patches to order

00:09:02,470 --> 00:09:21,459
the least code it's great that you guys

00:09:18,820 --> 00:09:23,200
are keeping stuff yourself but but but

00:09:21,459 --> 00:09:25,390
that's i have discussed with you i have

00:09:23,200 --> 00:09:27,370
been proposing within arms and how we do

00:09:25,390 --> 00:09:30,730
like Colonel drivers delivery something

00:09:27,370 --> 00:09:32,649
like that but it gives a really bad

00:09:30,730 --> 00:09:35,370
taste in your mouth when you have to do

00:09:32,649 --> 00:09:35,370
this over and over

00:09:43,680 --> 00:09:50,319
so question for you John do you think

00:09:46,000 --> 00:09:52,600
that there might be a scenario where you

00:09:50,319 --> 00:09:54,550
could perhaps partner with someone in

00:09:52,600 --> 00:09:56,889
the open community to do a user space

00:09:54,550 --> 00:09:59,459
implementation of just say Vulcan that

00:09:56,889 --> 00:10:02,410
would then use your kernel driver and

00:09:59,459 --> 00:10:04,959
then you know you guys have the good

00:10:02,410 --> 00:10:06,370
professional stuff that you know has its

00:10:04,959 --> 00:10:08,410
space but then likewise we have it

00:10:06,370 --> 00:10:11,019
something that satisfies the needs of

00:10:08,410 --> 00:10:13,209
the open community as well so I can't

00:10:11,019 --> 00:10:15,250
answer for arms commercials interested

00:10:13,209 --> 00:10:18,160
into the Sierra because like arm do sell

00:10:15,250 --> 00:10:21,339
a driver that's it's going to compete

00:10:18,160 --> 00:10:33,910
with so so I guess the answer would be

00:10:21,339 --> 00:10:44,230
no so any other questions related to

00:10:33,910 --> 00:10:46,630
that for well I wouldn't know that

00:10:44,230 --> 00:10:49,529
because like it's it's more male but

00:10:46,630 --> 00:10:52,720
basically that is dictating everything

00:10:49,529 --> 00:11:02,500
now so if customers made the mall flexi

00:10:52,720 --> 00:11:04,709
to change although this may be so yeah

00:11:02,500 --> 00:11:07,509
just I've been packaging the existing

00:11:04,709 --> 00:11:09,250
non-free drivers just so that at least

00:11:07,509 --> 00:11:11,769
you could have to get them and yeah go

00:11:09,250 --> 00:11:13,449
as far as discovering the bindings are

00:11:11,769 --> 00:11:16,990
in the kernel so actually nothing works

00:11:13,449 --> 00:11:19,240
and we really need to fix that I guess I

00:11:16,990 --> 00:11:21,040
should talk to some people about how we

00:11:19,240 --> 00:11:24,250
unblock this thing so at least we could

00:11:21,040 --> 00:11:26,769
have that part fixed so about making

00:11:24,250 --> 00:11:30,209
like AB get double drivers seems trivial

00:11:26,769 --> 00:11:34,059
but we need to create say drivers

00:11:30,209 --> 00:11:35,860
pertinent per board but per GPU revision

00:11:34,059 --> 00:11:37,870
action yet a little hollow binary is

00:11:35,860 --> 00:11:39,279
actually much exactly built on a course

00:11:37,870 --> 00:11:41,139
you have an all an absolute probably

00:11:39,279 --> 00:11:42,910
like one by gates against this because

00:11:41,139 --> 00:11:44,860
it's designed exactly backwards from the

00:11:42,910 --> 00:11:46,540
point of view of binary distros but yes

00:11:44,860 --> 00:11:48,040
at least we can support a few things if

00:11:46,540 --> 00:11:49,389
we had some binding also if like that

00:11:48,040 --> 00:11:51,430
were popular board something like that

00:11:49,389 --> 00:11:53,410
we could actually probably set up a way

00:11:51,430 --> 00:11:54,850
to get these access the designers for

00:11:53,410 --> 00:11:56,050
exactly so they could to get some things

00:11:54,850 --> 00:11:58,120
working that would improve people's

00:11:56,050 --> 00:12:01,889
lives a bit and but we have netflix the

00:11:58,120 --> 00:12:01,889
dts problem for that to actually work

00:12:08,460 --> 00:12:16,710
I sort of some ideas of getting trouble

00:12:13,830 --> 00:12:18,750
into running my age of Internet is

00:12:16,710 --> 00:12:21,090
cuddle I might be doing similar thing

00:12:18,750 --> 00:12:23,280
for a new device roaring is there an

00:12:21,090 --> 00:12:25,290
implication notes from homicide or

00:12:23,280 --> 00:12:28,170
whatever you can gathering all those

00:12:25,290 --> 00:12:30,240
inputs and this can be handled to

00:12:28,170 --> 00:12:34,260
another guy who I be doing the similar

00:12:30,240 --> 00:12:38,220
stuff make his life much easier yeah so

00:12:34,260 --> 00:12:40,500
like when you like for a do like receive

00:12:38,220 --> 00:12:41,760
drivers from army get a full release

00:12:40,500 --> 00:12:43,080
notes on integration notes and

00:12:41,760 --> 00:12:45,390
everything should be included and

00:12:43,080 --> 00:12:47,760
they're so travel to give feedback if

00:12:45,390 --> 00:12:49,970
you encounter problems or issues so it

00:12:47,760 --> 00:12:52,170
can be improved or changed anyway so

00:12:49,970 --> 00:12:53,490
that document should already included

00:12:52,170 --> 00:12:55,770
information about the feedback of

00:12:53,490 --> 00:12:57,540
improving the documentation yeah so you

00:12:55,770 --> 00:12:59,910
already have some documentation but for

00:12:57,540 --> 00:13:01,980
example use the dhaka missionary in

00:12:59,910 --> 00:13:05,210
Korea journals feedback he is

00:13:01,980 --> 00:13:09,000
experienced in stream just give some can

00:13:05,210 --> 00:13:10,170
grab up ok he experienced and what I'm

00:13:09,000 --> 00:13:12,660
saying you know and shall gain his

00:13:10,170 --> 00:13:15,960
experience into your documentation so I

00:13:12,660 --> 00:13:19,170
can get rid of over can the difficulty I

00:13:15,960 --> 00:13:21,750
have to go through again I think the

00:13:19,170 --> 00:13:23,250
complication is the who the agreements

00:13:21,750 --> 00:13:25,440
are with because i don't think i have an

00:13:23,250 --> 00:13:28,650
agreement it's like i'm just using a

00:13:25,440 --> 00:13:30,750
board that i have and the software that

00:13:28,650 --> 00:13:32,820
was available publicly didn't work so

00:13:30,750 --> 00:13:34,190
I've just got to fix it because I'm not

00:13:32,820 --> 00:13:36,720
a vendor selling it selling the hardware

00:13:34,190 --> 00:13:38,190
you know I don't have the license for

00:13:36,720 --> 00:13:41,190
those things so it's just one of those

00:13:38,190 --> 00:13:43,200
things where the pain is that this you

00:13:41,190 --> 00:13:44,640
know there are people who I guess are

00:13:43,200 --> 00:13:48,720
supposed to be responsible for making

00:13:44,640 --> 00:13:51,900
this nice but they're not so I've got to

00:13:48,720 --> 00:13:54,900
do it and it is being outside of this

00:13:51,900 --> 00:13:57,030
cycle for this is just dysfunctional I'm

00:13:54,900 --> 00:14:00,720
gonna show you Danny like I see chantome

00:13:57,030 --> 00:14:03,750
analysts we can kind of watch it's about

00:14:00,720 --> 00:14:05,940
voting for machines I don't think so the

00:14:03,750 --> 00:14:08,100
problem is that arm focuses on it like

00:14:05,940 --> 00:14:09,450
total direct licensees and they get all

00:14:08,100 --> 00:14:13,020
the information and all of that but

00:14:09,450 --> 00:14:17,120
vinaro is not a paying customer alarm so

00:14:13,020 --> 00:14:17,120
[Laughter]

00:14:17,870 --> 00:14:23,040
yeah so you have received feedback from

00:14:21,269 --> 00:14:28,110
from lennar when having try to

00:14:23,040 --> 00:14:31,769
incorporate it it's just happens yeah

00:14:28,110 --> 00:14:33,750
but now is also we don't work just about

00:14:31,769 --> 00:14:35,670
itself we work with our captain like for

00:14:33,750 --> 00:14:38,130
example silicon so they kind of had a

00:14:35,670 --> 00:14:40,649
grim into it yes I'm so I feel I can

00:14:38,130 --> 00:14:42,810
have direct channels like pretty good

00:14:40,649 --> 00:14:45,209
direct channels to engineers human so

00:14:42,810 --> 00:14:47,040
they can give feedback so usually we

00:14:45,209 --> 00:14:48,930
have to go through has weekend has taken

00:14:47,040 --> 00:15:04,949
back to am and always it goes this way

00:14:48,930 --> 00:15:07,350
right yeah so maybe that's the channel

00:15:04,949 --> 00:15:27,510
for linaro and order non-customers back

00:15:07,350 --> 00:15:28,889
to give feedback say because I mean I

00:15:27,510 --> 00:15:30,720
having a mate having made some packages

00:15:28,889 --> 00:15:32,730
I realized that I needed a way to find

00:15:30,720 --> 00:15:34,470
out when new releases were just so that

00:15:32,730 --> 00:15:36,209
you know there were the things that I

00:15:34,470 --> 00:15:37,680
should be kept up to date so we have we

00:15:36,209 --> 00:15:40,260
have people on the inside who won this

00:15:37,680 --> 00:15:42,779
fixed as well so we can we control and I

00:15:40,260 --> 00:15:45,000
feel the pain so example creating a

00:15:42,779 --> 00:15:46,980
proper process because like releasing an

00:15:45,000 --> 00:15:49,110
open or drivers on them while a

00:15:46,980 --> 00:15:51,209
developer a small high priority compared

00:15:49,110 --> 00:15:53,880
to light customers who build their own

00:15:51,209 --> 00:15:55,589
drivers so when you have our device

00:15:53,880 --> 00:15:57,000
that's officially supported by Leonard

00:15:55,589 --> 00:15:58,860
they provided binaries of course they

00:15:57,000 --> 00:16:01,769
always need to customize and do special

00:15:58,860 --> 00:16:04,019
stuff so we can pick those drivers or

00:16:01,769 --> 00:16:05,639
mala developer but you know we recognize

00:16:04,019 --> 00:16:07,319
making our own internal development less

00:16:05,639 --> 00:16:09,709
painful is a good thing right so I think

00:16:07,319 --> 00:16:11,939
quite a lot of people would appreciate

00:16:09,709 --> 00:16:14,790
improvements but it's just a matter of

00:16:11,939 --> 00:16:16,500
arranging you know mechanisms and as you

00:16:14,790 --> 00:16:18,540
say somewhere to feedback will be and as

00:16:16,500 --> 00:16:23,310
discuss will be a good idea so yeah we

00:16:18,540 --> 00:16:24,839
should that's probably good start did

00:16:23,310 --> 00:16:28,800
you actually find any particular

00:16:24,839 --> 00:16:30,990
starting point for dis chose at all so

00:16:28,800 --> 00:16:32,850
the license got changed last year so we

00:16:30,990 --> 00:16:34,230
and now we distribute the drivers even

00:16:32,850 --> 00:16:35,970
though they're still non-free so that's

00:16:34,230 --> 00:16:38,459
a significant step and that's good and

00:16:35,970 --> 00:16:41,040
the double is starting so now it there

00:16:38,459 --> 00:16:42,660
is some point in packaging it and like I

00:16:41,040 --> 00:16:44,370
did it but stuff doesn't work yet

00:16:42,660 --> 00:16:45,720
because we have some bits missing and

00:16:44,370 --> 00:16:46,920
that's kind of how far I've got so I

00:16:45,720 --> 00:16:48,390
don't actually see anything because it

00:16:46,920 --> 00:16:50,070
there wasn't much point I'd actually get

00:16:48,390 --> 00:16:51,450
it to show me any graphics yet on a

00:16:50,070 --> 00:16:52,740
board when I get to that point i'll

00:16:51,450 --> 00:16:54,300
release swimming with all X ticket

00:16:52,740 --> 00:16:57,600
anyway I should I should stick it up on

00:16:54,300 --> 00:16:59,970
our git repo but i guess i'm on a

00:16:57,600 --> 00:17:01,920
similar point 5 and I OBS a set of

00:16:59,970 --> 00:17:03,360
patches to make it compile with the

00:17:01,920 --> 00:17:05,610
latest versions of the colonel but I

00:17:03,360 --> 00:17:07,819
haven't really tested it because the dts

00:17:05,610 --> 00:17:10,980
bindings were until recently not yet in

00:17:07,819 --> 00:17:13,350
but for instance one thing that confuses

00:17:10,980 --> 00:17:15,480
me to hell is that there's like I don't

00:17:13,350 --> 00:17:17,459
know how many dozen different tables are

00:17:15,480 --> 00:17:19,650
available for download like just for one

00:17:17,459 --> 00:17:22,140
which gorilla dance card yeah I also you

00:17:19,650 --> 00:17:24,809
have a good drivers for cute card Midgar

00:17:22,140 --> 00:17:26,339
and Bifrost they're separate for well

00:17:24,809 --> 00:17:28,740
but but even for for one of those

00:17:26,339 --> 00:17:30,630
there's like a dozen of exid really why

00:17:28,740 --> 00:17:32,880
r l yeah nothing that's a release

00:17:30,630 --> 00:17:34,679
version so basically but the highest no

00:17:32,880 --> 00:17:37,290
way documented my point is there's no

00:17:34,679 --> 00:17:39,780
way documented can we as a distro just

00:17:37,290 --> 00:17:41,910
pick the latest or XP x and be good with

00:17:39,780 --> 00:17:44,070
it or do we need to maintain those as

00:17:41,910 --> 00:17:45,750
packages in parallel and choose them

00:17:44,070 --> 00:17:47,790
depending on you know like the sock

00:17:45,750 --> 00:17:49,830
vendor or bored or whatever love notes

00:17:47,790 --> 00:17:52,830
so normally it's the latest driver

00:17:49,830 --> 00:17:55,050
should be a gracious a pic for any older

00:17:52,830 --> 00:17:57,179
supported although sometimes you drop a

00:17:55,050 --> 00:17:59,820
platform in a revision if I understand

00:17:57,179 --> 00:18:03,080
correctly yeah so sometimes we will need

00:17:59,820 --> 00:18:06,390
to maintain two revisions for a release

00:18:03,080 --> 00:18:07,860
because the platform support is built

00:18:06,390 --> 00:18:09,480
into the driver which of course is just

00:18:07,860 --> 00:18:12,780
wrong and broken than we need to fix /

00:18:09,480 --> 00:18:15,120
so many hole I did you see why the whole

00:18:12,780 --> 00:18:17,700
design at the moment is that you build

00:18:15,120 --> 00:18:22,170
for predict the combination of platform

00:18:17,700 --> 00:18:24,690
of device driver there Molly hardware

00:18:22,170 --> 00:18:26,790
thingy which produces is enormous matrix

00:18:24,690 --> 00:18:28,710
as possible bill and a command the

00:18:26,790 --> 00:18:31,380
binary distribution that's exactly what

00:18:28,710 --> 00:18:32,730
we didn't want and we need to get away

00:18:31,380 --> 00:18:38,220
from that obviously that's going to take

00:18:32,730 --> 00:18:42,000
a while the other miners request would

00:18:38,220 --> 00:18:44,220
be if there's any way to allow for I

00:18:42,000 --> 00:18:47,490
guess need to need to

00:18:44,220 --> 00:18:49,500
less updates of the old user space so

00:18:47,490 --> 00:18:52,770
you know what are the troubles that we

00:18:49,500 --> 00:18:56,130
see is that we have the old users based

00:18:52,770 --> 00:19:00,390
binaries don't yet have new ones can't

00:18:56,130 --> 00:19:01,770
move to the new driver so it's the

00:19:00,390 --> 00:19:03,179
dependency of that hard linking the

00:19:01,770 --> 00:19:05,100
kernel driver to the user space that

00:19:03,179 --> 00:19:06,390
there's any way to help energize that or

00:19:05,100 --> 00:19:08,700
minimize the number of times that's

00:19:06,390 --> 00:19:10,409
changed yeah so would be worth quite it

00:19:08,700 --> 00:19:12,090
up sub problem but most on the Midgard

00:19:10,409 --> 00:19:13,409
Bifrost generation because there you can

00:19:12,090 --> 00:19:15,390
take on your version of the colonel

00:19:13,409 --> 00:19:17,070
drive around the world yes especially I

00:19:15,390 --> 00:19:20,159
able to cope I'm going to go even

00:19:17,070 --> 00:19:21,809
stronger on that even if we had fully

00:19:20,159 --> 00:19:24,289
open source drivers I would say there

00:19:21,809 --> 00:19:28,500
are still argument applies of having a

00:19:24,289 --> 00:19:30,990
not breaking old user space with new

00:19:28,500 --> 00:19:35,460
kernel update is very very important I

00:19:30,990 --> 00:19:37,650
never want to get to the kind of being

00:19:35,460 --> 00:19:41,250
able to support these devices with

00:19:37,650 --> 00:19:43,409
general generic distributions and up to

00:19:41,250 --> 00:19:47,789
having to keep user space in the kernel

00:19:43,409 --> 00:19:49,500
and log stuff is painful so um Midgar my

00:19:47,789 --> 00:19:51,570
frost latest generation of GPS you can

00:19:49,500 --> 00:19:56,880
actually upgrade users before kernel

00:19:51,570 --> 00:20:06,750
space independently so that's fixed I'm

00:19:56,880 --> 00:20:09,780
is it okay to be honest you can actually

00:20:06,750 --> 00:20:12,570
build the kernel driver for Midgar start

00:20:09,780 --> 00:20:15,510
by frost and run it on anything so all

00:20:12,570 --> 00:20:17,010
the jeep is released from midgar my

00:20:15,510 --> 00:20:18,990
proscan actually is the same kernel

00:20:17,010 --> 00:20:20,610
driver the colonel door is actually

00:20:18,990 --> 00:20:22,590
dynamically probes and sets of

00:20:20,610 --> 00:20:25,309
everything it's only user space top

00:20:22,590 --> 00:20:29,610
actually is dependent on the GP because

00:20:25,309 --> 00:20:32,850
basically when the driver design was

00:20:29,610 --> 00:20:35,549
designed yeah I let the colonel tiamat i

00:20:32,850 --> 00:20:37,260
did a correct way it seems well someone

00:20:35,549 --> 00:20:40,860
else because the problem in user space

00:20:37,260 --> 00:20:42,630
is that they're more depending on data

00:20:40,860 --> 00:20:44,520
structures that the GPU builds and that

00:20:42,630 --> 00:20:46,140
has changed slightly as they fix bugs

00:20:44,520 --> 00:20:47,460
some things that and sometimes unity

00:20:46,140 --> 00:20:49,799
encode data differently because the

00:20:47,460 --> 00:20:51,630
hardware bugs and when they started to

00:20:49,799 --> 00:20:53,789
go down that route they saw that it was

00:20:51,630 --> 00:20:55,799
too hard to actually make that dynamic

00:20:53,789 --> 00:20:58,020
so it's all in one compiled by and rail

00:20:55,799 --> 00:21:00,210
actually you switch plus the overhead

00:20:58,020 --> 00:21:01,920
actually having a branch every time you

00:21:00,210 --> 00:21:03,930
encoded some data structure with two

00:21:01,920 --> 00:21:07,500
costly basic both code size but also

00:21:03,930 --> 00:21:09,120
execution performance while in the

00:21:07,500 --> 00:21:10,650
kernel driver there's less dependence on

00:21:09,120 --> 00:21:12,390
those kind of hardware bugs and we've

00:21:10,650 --> 00:21:13,620
usually the kind of hardware bugs you

00:21:12,390 --> 00:21:15,360
need to work on and kernel driver is

00:21:13,620 --> 00:21:16,820
basically jumped a completely front

00:21:15,360 --> 00:21:19,680
handler for something so it's basically

00:21:16,820 --> 00:21:28,350
set up a function pointer at probe time

00:21:19,680 --> 00:21:29,880
enough that's it all the boards are

00:21:28,350 --> 00:21:31,320
similar enough so what we need to know

00:21:29,880 --> 00:21:33,330
is basically the base address and

00:21:31,320 --> 00:21:38,880
interrupt numbers and the clock and

00:21:33,330 --> 00:21:41,820
we're good yeah the stuff that's in

00:21:38,880 --> 00:21:45,230
advisory basically is it possible that

00:21:41,820 --> 00:21:50,790
you will adopt linaro 90 support support

00:21:45,230 --> 00:21:52,650
well from the from the mollified in 96

00:21:50,790 --> 00:21:56,370
part is melting special with it still

00:21:52,650 --> 00:21:58,350
every associés special in which GP

00:21:56,370 --> 00:22:00,720
revision it has and how many cores it

00:21:58,350 --> 00:22:03,330
has enabled and all that so the binary

00:22:00,720 --> 00:22:05,310
is always compiled for the GP relation

00:22:03,330 --> 00:22:08,010
that knows about the hardware of us and

00:22:05,310 --> 00:22:09,870
then the shade of course and then for

00:22:08,010 --> 00:22:12,240
fun if you're an Android usually the

00:22:09,870 --> 00:22:14,100
customers if they enable integration

00:22:12,240 --> 00:22:16,080
meter display hardware it has enabled

00:22:14,100 --> 00:22:18,270
our is compression standards inside the

00:22:16,080 --> 00:22:23,940
driver which we don't even have access

00:22:18,270 --> 00:22:26,640
to the Heike doesn't do that but for

00:22:23,940 --> 00:22:29,060
other boards so so that's all the

00:22:26,640 --> 00:22:29,060
problem

00:22:33,410 --> 00:22:37,640
so I just looked and developed at the

00:22:36,020 --> 00:22:39,020
arm block come on Molly aankhon don't

00:22:37,640 --> 00:22:40,700
actually have a feedback mechanism of

00:22:39,020 --> 00:22:42,950
love and support stuff sport case if

00:22:40,700 --> 00:22:44,360
you're paid customer so that's not going

00:22:42,950 --> 00:22:46,400
to work so somebody think it would never

00:22:44,360 --> 00:22:48,320
come here yeah so we should probably

00:22:46,400 --> 00:22:49,960
have lights are gone but it said Q&A and

00:22:48,320 --> 00:22:52,880
feedback so that's useful feedback

00:22:49,960 --> 00:22:54,650
exactly so either either add some chat

00:22:52,880 --> 00:22:59,990
or remaining list or something or think

00:22:54,650 --> 00:23:03,490
of somewhere else we can discuss so i'll

00:22:59,990 --> 00:23:03,490
make sure to mention up when i get back

00:23:05,320 --> 00:23:09,530
even arms account managers are seem to

00:23:07,940 --> 00:23:11,960
be having a difficult time finding

00:23:09,530 --> 00:23:13,580
actually someone within the RM Molly you

00:23:11,960 --> 00:23:16,400
know department to you know provide

00:23:13,580 --> 00:23:18,020
feedback to and once they do it kind of

00:23:16,400 --> 00:23:24,410
just seems to go into a black hole and

00:23:18,020 --> 00:23:26,060
nothing comes back again yeah but it's

00:23:24,410 --> 00:23:29,480
definitely something I need to but we do

00:23:26,060 --> 00:23:31,790
have pink eye on our like what no but

00:23:29,480 --> 00:23:33,920
it's a message i'm going to relate to my

00:23:31,790 --> 00:23:38,030
monitors when i get back to see if they

00:23:33,920 --> 00:23:41,360
can do something about it maybe it goes

00:23:38,030 --> 00:23:44,240
into the same local another question

00:23:41,360 --> 00:23:45,950
that i haven't checked recently but at

00:23:44,240 --> 00:23:49,370
least sometimes it seemed that there

00:23:45,950 --> 00:23:51,770
were like newer versions of the chrono

00:23:49,370 --> 00:23:53,900
drivers available then of the user space

00:23:51,770 --> 00:23:55,400
libraries that there were you know not

00:23:53,900 --> 00:23:57,350
always in sync that they were like

00:23:55,400 --> 00:23:59,300
sometimes like two versions or yeah so

00:23:57,350 --> 00:24:00,650
now we go back to what I mentioned does

00:23:59,300 --> 00:24:03,320
like when you release the corridor which

00:24:00,650 --> 00:24:05,150
supports everything but we basically

00:24:03,320 --> 00:24:07,010
dropped support for some of the bars so

00:24:05,150 --> 00:24:09,650
they've stopped updating basically

00:24:07,010 --> 00:24:11,480
preview boundaries for some boards so

00:24:09,650 --> 00:24:13,940
that's why you see that there's two

00:24:11,480 --> 00:24:16,310
different revisions so you can take the

00:24:13,940 --> 00:24:18,020
latest driver so for the Heike you can

00:24:16,310 --> 00:24:24,470
take the artists have them kernel driver

00:24:18,020 --> 00:24:26,540
the kernel driver yeah yeah so for

00:24:24,470 --> 00:24:28,940
instance on Midgar you can take there

00:24:26,540 --> 00:24:33,400
are 16 kernel driver and it should work

00:24:28,940 --> 00:24:33,400
within our 14 or are 12 user space

00:24:51,159 --> 00:25:19,999
okay so that's the first generation

00:25:07,219 --> 00:25:23,419
midgar I know that the code names might

00:25:19,999 --> 00:25:25,219
not be meaningful so for the problem is

00:25:23,419 --> 00:25:28,039
up some customers actually use the code

00:25:25,219 --> 00:25:29,749
names and some don't so it's hard for us

00:25:28,039 --> 00:25:33,259
even to know which we're actually

00:25:29,749 --> 00:25:39,169
matches between a code name and a actual

00:25:33,259 --> 00:25:40,879
marketing number I have a easy question

00:25:39,169 --> 00:25:43,009
for you technical answer well you

00:25:40,879 --> 00:25:46,009
mentioned some dependency between the

00:25:43,009 --> 00:25:47,989
mari delivers either use special kind of

00:25:46,009 --> 00:25:50,539
space there's some dependency to the

00:25:47,989 --> 00:25:52,159
display controller side so we are

00:25:50,539 --> 00:25:55,249
dependency years into neo space grand

00:25:52,159 --> 00:25:56,479
space so the dependency is actually

00:25:55,249 --> 00:25:58,070
normally in growl look and then

00:25:56,479 --> 00:26:00,679
integration with growl look into each

00:25:58,070 --> 00:26:02,450
else's normally new surface descriptor

00:26:00,679 --> 00:26:06,769
formats and things of that up they pause

00:26:02,450 --> 00:26:08,539
down at the Molly supports or even and

00:26:06,769 --> 00:26:12,169
the display hardware block support so

00:26:08,539 --> 00:26:13,879
like the user space drivers are other

00:26:12,169 --> 00:26:16,369
support for many different compression

00:26:13,879 --> 00:26:18,379
formats but the vendors only enable them

00:26:16,369 --> 00:26:21,769
based on what they actually can consume

00:26:18,379 --> 00:26:24,049
in the display and video path if we say

00:26:21,769 --> 00:26:25,969
for instance render internally for only

00:26:24,049 --> 00:26:27,469
internal news in the GPD de kuip you

00:26:25,969 --> 00:26:29,029
always use the most efficient texture

00:26:27,469 --> 00:26:30,649
compression format but we need to be

00:26:29,029 --> 00:26:32,719
rendered into something that's it be

00:26:30,649 --> 00:26:34,580
scanned out we need to make sure that we

00:26:32,719 --> 00:26:36,739
can actually send it out in them the

00:26:34,580 --> 00:26:38,649
customers actually do stuff and we

00:26:36,739 --> 00:26:41,299
actually have also customers have ADD

00:26:38,649 --> 00:26:42,769
change the structure support compression

00:26:41,299 --> 00:26:45,109
standards that we don't officially

00:26:42,769 --> 00:26:46,849
support in the DD k and then they do

00:26:45,109 --> 00:26:49,100
modifications both in the hardware and

00:26:46,849 --> 00:26:57,500
in the source and we don't actually

00:26:49,100 --> 00:27:00,679
access to that source sorry I have a

00:26:57,500 --> 00:27:03,380
questions as a graphics layman just with

00:27:00,679 --> 00:27:06,140
a check my understanding is right the

00:27:03,380 --> 00:27:07,640
there is a open kernel driver but it's

00:27:06,140 --> 00:27:09,260
not going to be merged upstream because

00:27:07,640 --> 00:27:13,190
it needs the user space is it possible

00:27:09,260 --> 00:27:16,340
to do opencl with a completely open path

00:27:13,190 --> 00:27:19,039
no they're the opencl dry whistles or

00:27:16,340 --> 00:27:21,740
it's part of the commercial use binary

00:27:19,039 --> 00:27:24,710
so you need basically the compiler is

00:27:21,740 --> 00:27:29,390
shared between say welcome OpenGL ES and

00:27:24,710 --> 00:27:32,990
opencl the back end okay people are

00:27:29,390 --> 00:27:35,179
saying with Vulcan it might be less loya

00:27:32,990 --> 00:27:38,179
scary in terms of making an open driver

00:27:35,179 --> 00:27:40,520
would it be even less for opencl i would

00:27:38,179 --> 00:27:43,760
say open CEO might be on the same level

00:27:40,520 --> 00:27:52,400
as Vulcan in that regard okay but is too

00:27:43,760 --> 00:27:57,620
still in those community lawyers sorry a

00:27:52,400 --> 00:27:59,450
remote location set in your didi ke you

00:27:57,620 --> 00:28:01,940
actually don't have the have a composer

00:27:59,450 --> 00:28:04,220
implementation but you have the g an oak

00:28:01,940 --> 00:28:08,510
implementation which depends on which

00:28:04,220 --> 00:28:11,450
insider have the FB device supports

00:28:08,510 --> 00:28:13,400
right is that correct so the hardware

00:28:11,450 --> 00:28:15,620
composer interface is normally a portal

00:28:13,400 --> 00:28:18,669
or tightly integrated at this place

00:28:15,620 --> 00:28:23,179
right not the GPU side so since Molly

00:28:18,669 --> 00:28:25,730
GPU is just a GPU we don't actually

00:28:23,179 --> 00:28:27,440
handle the actual scan out samples say

00:28:25,730 --> 00:28:29,390
layering a multiple little stuff and

00:28:27,440 --> 00:28:31,700
setting up multiple layers of the left

00:28:29,390 --> 00:28:35,090
side absolutely customer specific

00:28:31,700 --> 00:28:37,730
hardware do you have the FB divisive

00:28:35,090 --> 00:28:39,740
implementation for judge for backwards

00:28:37,730 --> 00:28:42,140
compatibility because in the old Android

00:28:39,740 --> 00:28:44,270
versions that you use the FBI better FB

00:28:42,140 --> 00:28:45,740
is still exposed by whatever exposed to

00:28:44,270 --> 00:28:47,780
hardware compulsory interface it's not

00:28:45,740 --> 00:28:50,630
part of the malady decay out of at all

00:28:47,780 --> 00:28:56,120
cause Molly doesn't do any delve FB at

00:28:50,630 --> 00:28:58,460
all the NJ so the DD Cape it can be told

00:28:56,120 --> 00:29:00,860
to actually render into a side diverse

00:28:58,460 --> 00:29:02,330
be 0 but it's not actually dividing

00:29:00,860 --> 00:29:04,309
there were superior that

00:29:02,330 --> 00:29:05,720
the hardware on the on the board you can

00:29:04,309 --> 00:29:07,760
do you can't have the kind of

00:29:05,720 --> 00:29:09,620
configurations don't have any heresy

00:29:07,760 --> 00:29:12,409
implementation buddy you only have the

00:29:09,620 --> 00:29:15,200
FB device you still can running but i'm

00:29:12,409 --> 00:29:18,350
not sure but of course good use FB

00:29:15,200 --> 00:29:19,669
instead of any hardware compare that i'm

00:29:18,350 --> 00:29:22,279
not sure about the latest version of

00:29:19,669 --> 00:29:24,380
Android but I know brother versus

00:29:22,279 --> 00:29:26,360
Android the hardware composer was an

00:29:24,380 --> 00:29:29,600
optional components if you didn't it

00:29:26,360 --> 00:29:31,580
fell back to compositing using the jeep

00:29:29,600 --> 00:29:33,110
you basically sweet combine all the

00:29:31,580 --> 00:29:35,360
layers electra rendered into the final

00:29:33,110 --> 00:29:37,000
frame buffer but still that's fine the

00:29:35,360 --> 00:29:39,320
frame buffer bottom was something not

00:29:37,000 --> 00:29:41,630
controlled by the model graphics package

00:29:39,320 --> 00:29:43,850
yeah what for example eternity you only

00:29:41,630 --> 00:29:46,370
depend on how to FB devising

00:29:43,850 --> 00:29:49,960
implementation of the vendor once we

00:29:46,370 --> 00:29:54,590
have that basically you can have the

00:29:49,960 --> 00:29:55,820
display works so so we don't any display

00:29:54,590 --> 00:29:57,110
hardware the jeep you would still a

00:29:55,820 --> 00:30:00,049
render that you wouldn't see anything

00:29:57,110 --> 00:30:01,309
you can get like read back what producer

00:30:00,049 --> 00:30:03,730
actually dumped it to discontinue

00:30:01,309 --> 00:30:07,370
interpreters there's nothing to open

00:30:03,730 --> 00:30:08,929
because the GP is just what is the 3d

00:30:07,370 --> 00:30:11,630
render it of likely drive into this

00:30:08,929 --> 00:30:13,669
place alright so in the gr oak I think

00:30:11,630 --> 00:30:16,639
you have several configurations going to

00:30:13,669 --> 00:30:19,850
use the iOS narrow kid and you have yo a

00:30:16,639 --> 00:30:22,370
look at SI un PR a whatever UMP was

00:30:19,850 --> 00:30:24,110
deprecated some five or six years ago

00:30:22,370 --> 00:30:27,440
but it's still around because of some

00:30:24,110 --> 00:30:30,350
customers will use it but I am is get a

00:30:27,440 --> 00:30:34,539
preferred click on isn't today and has

00:30:30,350 --> 00:30:34,539
been for quite some years okay thank you

00:30:38,710 --> 00:30:46,909
so so the oldest Molly I guess is multi

00:30:44,450 --> 00:30:49,549
400 custom Allah 200 doesn't exist in

00:30:46,909 --> 00:30:57,740
any devices of people are right yea

00:30:49,549 --> 00:30:59,389
Somali 400 is the oldest Kemalist we

00:30:57,740 --> 00:31:05,600
hundred is newer than most wanted by the

00:30:59,389 --> 00:31:09,340
way you can more say that we exclude

00:31:05,600 --> 00:31:09,340
Molly 200ml of 55

00:31:10,840 --> 00:31:19,810
okay and your final question before we

00:31:12,610 --> 00:31:25,640
head off to lunch I feel our shares of

00:31:19,810 --> 00:31:29,850
quite a few of them okay thank you

00:31:25,640 --> 00:31:34,820
[Applause]

00:31:29,850 --> 00:31:34,820

YouTube URL: https://www.youtube.com/watch?v=dPjSm_98rgo


