Title: BUD17-404 UEFI EDK2 for RDK on HiKey
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-404
Session Name: UEFI/EDK2 for RDK on HiKey - BUD17-404
Speaker: Kalyan Nagabhirava
Track: LHG


★ Session Summary ★
The set-top industry is still heavily reliant upon proprietary U Boot bootloader schemes that present significant integration challenges to OEM vendors. LHG has undertaken an initiative to implement a UEFI/EDK2 solution for the RDK. This presentation will describe the implementation challenges and advantages by moving to a UEFI runtime environment.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-404/
Presentation: https://www.slideshare.net/linaroorg/bud17404-uefiedk2-for-rdk-on-hikey
Video: https://youtu.be/AwVfedYi_S4
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: LHG, UEFI-EDK2, RDK, Hikey
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,130 --> 00:00:04,110
[Music]

00:00:09,440 --> 00:00:15,179
so in coming slides I will be explaining

00:00:11,730 --> 00:00:17,820
about why Comtesse has chosen your five

00:00:15,179 --> 00:00:21,630
standard for implementing the radical

00:00:17,820 --> 00:00:25,160
boot loader and the cube boot features

00:00:21,630 --> 00:00:27,840
and its advantages and retail

00:00:25,160 --> 00:00:35,600
explanation about developing the secure

00:00:27,840 --> 00:00:39,120
boot loader efi bootloader for our DK

00:00:35,600 --> 00:00:42,809
come test looping ways to introduce more

00:00:39,120 --> 00:00:46,890
standardization to its setup box for my

00:00:42,809 --> 00:00:49,530
boot process traditionally a set up boot

00:00:46,890 --> 00:00:53,399
architecture is based on the new boot

00:00:49,530 --> 00:00:56,010
out of proprietary so it takes a lot of

00:00:53,399 --> 00:00:58,620
integration efforts when if you

00:00:56,010 --> 00:01:02,399
implement solutions on different SOC

00:00:58,620 --> 00:01:07,500
vendors so to reduce the complexity and

00:01:02,399 --> 00:01:09,750
interoperability between SOC vendors the

00:01:07,500 --> 00:01:14,400
UF I a standard used to take the place

00:01:09,750 --> 00:01:18,360
of traditional wedge boot loader and EFI

00:01:14,400 --> 00:01:20,340
supports secure boot and which does not

00:01:18,360 --> 00:01:25,560
require any hardware support other than

00:01:20,340 --> 00:01:27,659
a flash and the UF I standard provides

00:01:25,560 --> 00:01:32,369
the protocol interfaces for different

00:01:27,659 --> 00:01:35,549
services like 60 TP / handling or file

00:01:32,369 --> 00:01:37,909
handling so using this you can implement

00:01:35,549 --> 00:01:41,579
your bootloader at boot applications

00:01:37,909 --> 00:01:46,170
which can be ported easily across the

00:01:41,579 --> 00:01:48,299
SOC vendors so r BK we are working on

00:01:46,170 --> 00:01:51,090
implementing our DK boot loader and the

00:01:48,299 --> 00:02:00,750
dri that is disaster recovery image

00:01:51,090 --> 00:02:03,060
using your five standard ok so ed k2 is

00:02:00,750 --> 00:02:07,140
a cross platform firmware development

00:02:03,060 --> 00:02:10,229
environment for you 05 specifications so

00:02:07,140 --> 00:02:12,900
we are using tiana corey de que tu as

00:02:10,229 --> 00:02:16,400
our development environment so these are

00:02:12,900 --> 00:02:20,459
the two links which gives a setup and

00:02:16,400 --> 00:02:21,990
the built in sections for creating the

00:02:20,459 --> 00:02:26,250
flash image

00:02:21,990 --> 00:02:30,120
in firmware image for arm cable and a

00:02:26,250 --> 00:02:32,280
high keyboard respectively so on top of

00:02:30,120 --> 00:02:39,210
this we are implementing the RDK

00:02:32,280 --> 00:02:42,000
bootloader so secure boot loader of the

00:02:39,210 --> 00:02:44,850
secure boot is designed to protect a

00:02:42,000 --> 00:02:48,960
system against a malicious code being

00:02:44,850 --> 00:02:52,140
loaded executed in early boot process

00:02:48,960 --> 00:02:54,810
that is before OS operating system

00:02:52,140 --> 00:03:01,110
loaded so when you enable the secure

00:02:54,810 --> 00:03:05,100
boot in your fight so for every boot the

00:03:01,110 --> 00:03:08,670
UF I firmware try to inspect each efi

00:03:05,100 --> 00:03:13,910
binary image that is loaded and ensures

00:03:08,670 --> 00:03:16,830
that it is having a valid signature so

00:03:13,910 --> 00:03:19,020
these certificates whatever are the

00:03:16,830 --> 00:03:24,110
trusted certificates in your file you

00:03:19,020 --> 00:03:29,790
can store as a fi variables and

00:03:24,110 --> 00:03:32,760
non-volatile memory so basically in

00:03:29,790 --> 00:03:34,710
sexual boot these are the main keys

00:03:32,760 --> 00:03:41,760
which we are we need to talk like a

00:03:34,710 --> 00:03:46,010
platform t so platform key offers full

00:03:41,760 --> 00:03:48,630
control of secure boot hierarchy and

00:03:46,010 --> 00:03:52,500
whoever holds a platform key they can

00:03:48,630 --> 00:03:57,960
update new PK fat funky are they can

00:03:52,500 --> 00:04:01,830
update our kak so and ke ke it is a key

00:03:57,960 --> 00:04:05,490
exchange key so using ke ke ki you can

00:04:01,830 --> 00:04:08,970
either sign the binary images or you can

00:04:05,490 --> 00:04:11,160
update the TV so if the KA has a trusted

00:04:08,970 --> 00:04:16,260
certificate using that you can update

00:04:11,160 --> 00:04:18,930
the DB so and that the DB is like white

00:04:16,260 --> 00:04:21,750
listing the other otherwise certificate

00:04:18,930 --> 00:04:24,380
so any case which you are I mean any

00:04:21,750 --> 00:04:27,090
binary images which you signed to

00:04:24,380 --> 00:04:30,950
authenticate that you have to register

00:04:27,090 --> 00:04:30,950
those certificates into our day be

00:04:34,580 --> 00:04:40,889
so secure boot loader in general I mean

00:04:38,280 --> 00:04:44,009
x86 efficient are they in case of our

00:04:40,889 --> 00:04:48,210
memo also we can enable secure boot

00:04:44,009 --> 00:04:50,810
using device manager you I but in this

00:04:48,210 --> 00:04:53,610
case we are not using you i

00:04:50,810 --> 00:04:56,819
programmatically we are trying to set

00:04:53,610 --> 00:05:01,699
the platform key by which we can enable

00:04:56,819 --> 00:05:04,229
the secure boot and once you said the

00:05:01,699 --> 00:05:06,690
platform key you have to see the setup

00:05:04,229 --> 00:05:08,780
mode that is it is in the user mode or

00:05:06,690 --> 00:05:12,060
not if it is in a user mode then it is a

00:05:08,780 --> 00:05:15,120
it is in secure boot so once it is in a

00:05:12,060 --> 00:05:17,669
secure boot only signed images can be

00:05:15,120 --> 00:05:21,690
executed so to validate your signed

00:05:17,669 --> 00:05:32,419
images you have to register your kek as

00:05:21,690 --> 00:05:35,370
well as the dvds so so that is the basic

00:05:32,419 --> 00:05:38,159
implementation we have to do so we

00:05:35,370 --> 00:05:41,130
started implementing the RDK boot loader

00:05:38,159 --> 00:05:45,300
so in ed k2 environment if you want to

00:05:41,130 --> 00:05:50,250
develop a module so you have to create

00:05:45,300 --> 00:05:52,650
INF for that module so which is having

00:05:50,250 --> 00:05:55,020
the source code it is kind of make file

00:05:52,650 --> 00:05:58,380
I can say so which will have your source

00:05:55,020 --> 00:06:00,419
code as well as the packages indicate

00:05:58,380 --> 00:06:03,810
two packages which you are trying to use

00:06:00,419 --> 00:06:07,530
the new code and the PCD with variables

00:06:03,810 --> 00:06:10,680
so and global variables which you are

00:06:07,530 --> 00:06:17,400
using so those things you have to add in

00:06:10,680 --> 00:06:21,930
our INF file and and then for enabling

00:06:17,400 --> 00:06:24,300
the secure boot so in general they have

00:06:21,930 --> 00:06:27,000
a India files they have some global

00:06:24,300 --> 00:06:29,759
variables so those variables you can set

00:06:27,000 --> 00:06:31,830
in your program by the cfi r run time

00:06:29,759 --> 00:06:35,250
service they provide some set variable

00:06:31,830 --> 00:06:39,090
and get variables using those api's you

00:06:35,250 --> 00:06:43,830
can set the to enable secure boot you

00:06:39,090 --> 00:06:45,409
have to set the custom mode global

00:06:43,830 --> 00:06:50,899
variables that is

00:06:45,409 --> 00:06:54,019
of a security package so you have to set

00:06:50,899 --> 00:06:55,909
that one to secure boot mode once you

00:06:54,019 --> 00:07:01,610
have done that what you have to do is

00:06:55,909 --> 00:07:05,179
you have to load platform PR certificate

00:07:01,610 --> 00:07:08,929
from fat file system say in your Flash

00:07:05,179 --> 00:07:12,019
maybe you've flashed your fat file

00:07:08,929 --> 00:07:17,209
system where you can copy certificates

00:07:12,019 --> 00:07:20,269
as well as other efi binaries so so in

00:07:17,209 --> 00:07:25,099
your so in our bootloader code we are

00:07:20,269 --> 00:07:28,069
loading this platform key and then a

00:07:25,099 --> 00:07:31,209
true file system protocol we are getting

00:07:28,069 --> 00:07:33,319
that file handle and then the data

00:07:31,209 --> 00:07:38,509
whatever is there that we are updating

00:07:33,319 --> 00:07:45,289
in 20 efi signature list data so this

00:07:38,509 --> 00:07:48,069
data has to be data has to be set so

00:07:45,289 --> 00:07:51,709
through set variable once you said that

00:07:48,069 --> 00:07:53,509
it will enable the secure boot so we

00:07:51,709 --> 00:07:56,329
have to just validate whether the setup

00:07:53,509 --> 00:07:59,059
mode is in custom mode or user mode so

00:07:56,329 --> 00:08:01,639
it has to be in a user mode so after

00:07:59,059 --> 00:08:04,819
that so for setting that you have to

00:08:01,639 --> 00:08:07,219
give these attributes also like fi

00:08:04,819 --> 00:08:10,610
variable non-volatile and other

00:08:07,219 --> 00:08:14,659
attributes you have to set and the same

00:08:10,610 --> 00:08:24,919
way we are sitting other keys also kek

00:08:14,659 --> 00:08:28,749
and dvds so and one more important

00:08:24,919 --> 00:08:31,039
important thing is like arm kimmel

00:08:28,749 --> 00:08:33,349
virtualization platform by default it

00:08:31,039 --> 00:08:37,370
supports the secure boot but whereas a

00:08:33,349 --> 00:08:39,769
high key it doesn't support it is not

00:08:37,370 --> 00:08:44,079
supporting the secure boot so we added

00:08:39,769 --> 00:08:45,550
required secure boot loader packages and

00:08:44,079 --> 00:08:50,240
other

00:08:45,550 --> 00:08:52,760
variable in drivers into their platform

00:08:50,240 --> 00:08:57,130
dot PSC so hi ketta PSD flatform

00:08:52,760 --> 00:09:00,590
description file with we added this

00:08:57,130 --> 00:09:03,620
packages and drivers to enable the

00:09:00,590 --> 00:09:06,440
secure boot so after that we are able to

00:09:03,620 --> 00:09:12,590
see the secure boot on you have come in

00:09:06,440 --> 00:09:17,840
on high key side also so once you enable

00:09:12,590 --> 00:09:21,170
the secure boot all your efi binaries or

00:09:17,840 --> 00:09:24,380
images has to be signed so then other it

00:09:21,170 --> 00:09:29,750
can execute only sign the images can be

00:09:24,380 --> 00:09:32,540
executed so the colonel part so

00:09:29,750 --> 00:09:34,070
basically if in arm colonel in the old

00:09:32,540 --> 00:09:37,220
code i think there is a linux loader

00:09:34,070 --> 00:09:40,570
which we which will load the linux

00:09:37,220 --> 00:09:44,330
kernel but if you are using kernel

00:09:40,570 --> 00:09:46,340
version for dot five it has a GF i stub

00:09:44,330 --> 00:09:51,320
implementation which will try to load

00:09:46,340 --> 00:09:54,560
the kernel by itself so it acts as a GF

00:09:51,320 --> 00:09:56,570
I application so if you are using the

00:09:54,560 --> 00:09:59,900
world turned on or something you have to

00:09:56,570 --> 00:10:02,330
use a linux loader application which is

00:09:59,900 --> 00:10:05,330
available in adk too but if you are

00:10:02,330 --> 00:10:08,240
using the kernel version for at five so

00:10:05,330 --> 00:10:11,780
it is it works as a stripe for books as

00:10:08,240 --> 00:10:14,180
a fi application so when you when you

00:10:11,780 --> 00:10:17,660
are using a loofah application so you

00:10:14,180 --> 00:10:22,090
have to get that image using the load

00:10:17,660 --> 00:10:26,720
image protocol and using that protocol

00:10:22,090 --> 00:10:29,120
you will get a file image handler in

00:10:26,720 --> 00:10:31,520
this case it is a colonel so we have to

00:10:29,120 --> 00:10:36,680
pass the colonel argument so how we are

00:10:31,520 --> 00:10:38,900
doing this is so in your file they have

00:10:36,680 --> 00:10:40,880
a the indicate they have with loaded

00:10:38,900 --> 00:10:42,860
options available so in the loader

00:10:40,880 --> 00:10:45,260
options we are setting the colonel

00:10:42,860 --> 00:10:49,000
arguments so what we have to see here is

00:10:45,260 --> 00:10:51,980
it is not a ski so personal documents

00:10:49,000 --> 00:10:56,030
should be in a unicode so you have to

00:10:51,980 --> 00:10:57,200
convert that ascii string to any code

00:10:56,030 --> 00:11:01,130
and then

00:10:57,200 --> 00:11:05,740
those arguments for load options so with

00:11:01,130 --> 00:11:13,010
that with that we are able to put the

00:11:05,740 --> 00:11:16,910
next colonel in a sexual boot mode so

00:11:13,010 --> 00:11:22,070
this one I am just mentioning how to

00:11:16,910 --> 00:11:25,940
create a pair for private key and the

00:11:22,070 --> 00:11:28,910
public certificate so the key using the

00:11:25,940 --> 00:11:31,670
private tpk dad k UI you have to sign

00:11:28,910 --> 00:11:33,140
your binary images I mean efi binary

00:11:31,670 --> 00:11:35,900
measures and the corresponding

00:11:33,140 --> 00:11:41,360
certificate you have to put it in there

00:11:35,900 --> 00:11:49,130
were flash or your fat file system so

00:11:41,360 --> 00:11:51,500
too for validating the efi images so so

00:11:49,130 --> 00:11:53,770
this is very basic bootloader

00:11:51,500 --> 00:11:55,690
functionalities what we are doing just

00:11:53,770 --> 00:11:59,390
enabling the secure boot on

00:11:55,690 --> 00:12:03,710
programmatically and then giving the

00:11:59,390 --> 00:12:06,440
kernel of an EFI kernel that means

00:12:03,710 --> 00:12:10,280
Colonel photodiodes and then the colonel

00:12:06,440 --> 00:12:14,060
arguments through load uploader options

00:12:10,280 --> 00:12:16,130
so with that we are able to boot and any

00:12:14,060 --> 00:12:18,050
trauma this is very basic in a drama

00:12:16,130 --> 00:12:22,220
fest with that we are able to boot

00:12:18,050 --> 00:12:27,650
Colonel in arm k mu as well as on my

00:12:22,220 --> 00:12:33,740
keyboard so still the work is like we

00:12:27,650 --> 00:12:36,170
need to implement so currently we are

00:12:33,740 --> 00:12:39,560
just very basic any trauma fest we are

00:12:36,170 --> 00:12:42,050
loading but the plan is we need to

00:12:39,560 --> 00:12:44,900
create a monolithic image or fit image

00:12:42,050 --> 00:12:47,090
where you will have a colonel and root

00:12:44,900 --> 00:12:50,870
of s everything together has to be

00:12:47,090 --> 00:12:55,550
signed and it has to be loaded in a

00:12:50,870 --> 00:12:57,320
secure boot mode so that is the next

00:12:55,550 --> 00:13:01,250
stop after that we have a disaster

00:12:57,320 --> 00:13:04,990
recovery image implementation so comcast

00:13:01,250 --> 00:13:07,340
they have a DRI module for supporting

00:13:04,990 --> 00:13:09,750
disaster recovery image that means it

00:13:07,340 --> 00:13:14,260
has to be a load

00:13:09,750 --> 00:13:17,310
the monolithic image the latest

00:13:14,260 --> 00:13:21,520
monolithic image has to be updated and

00:13:17,310 --> 00:13:24,850
you have yep BDR I backup prl different

00:13:21,520 --> 00:13:27,940
modules are there so we are planning to

00:13:24,850 --> 00:13:41,980
implement this functionality using your

00:13:27,940 --> 00:13:45,250
five standard so that's I think yeah so

00:13:41,980 --> 00:13:49,990
this is very simple bootloader we

00:13:45,250 --> 00:13:56,200
implemented using your five but we face

00:13:49,990 --> 00:13:59,080
some issues like a high key udk to it is

00:13:56,200 --> 00:14:01,450
a somewhat volt code compared to the

00:13:59,080 --> 00:14:04,600
latest CD k whatever we have the Heike

00:14:01,450 --> 00:14:08,850
branch is a little bit of old code so

00:14:04,600 --> 00:14:13,450
the fdd side wins for linux kernel

00:14:08,850 --> 00:14:17,860
passing the TTB in general you can pass

00:14:13,450 --> 00:14:20,080
a dt be as a kernel argument so it can

00:14:17,860 --> 00:14:22,540
but in the secure boot side if you pass

00:14:20,080 --> 00:14:25,420
the dtb as a kernel document it won't

00:14:22,540 --> 00:14:31,510
allow that so you have to update your

00:14:25,420 --> 00:14:33,970
FDD variable in erie k2 and based on

00:14:31,510 --> 00:14:35,770
also when the colonel is booting up it

00:14:33,970 --> 00:14:38,020
will look for this f dt variable and

00:14:35,770 --> 00:14:39,640
based on that based on the pointer it

00:14:38,020 --> 00:14:43,930
will take the dtp file and it will

00:14:39,640 --> 00:14:46,600
update so the latest code the part of a

00:14:43,930 --> 00:14:49,990
driver like f dt try water is available

00:14:46,600 --> 00:14:52,420
in the latest IDK too but whatever the

00:14:49,990 --> 00:14:57,580
Heike branch we have there that code is

00:14:52,420 --> 00:15:01,360
not available so we have to implement we

00:14:57,580 --> 00:15:03,850
have to see how we have to do that part

00:15:01,360 --> 00:15:07,560
still we are working on that that is the

00:15:03,850 --> 00:15:07,560
update on the this worth

00:15:09,450 --> 00:15:17,390
okay yeah that's all any questions yeah

00:15:30,060 --> 00:15:37,060
because curious how the UEFI secure boot

00:15:34,540 --> 00:15:39,550
process that's I believe expects just

00:15:37,060 --> 00:15:42,040
digital in boots a single next partition

00:15:39,550 --> 00:15:43,750
and so the single single kernel that

00:15:42,040 --> 00:15:45,850
sort of thing so it's something like a

00:15:43,750 --> 00:15:47,890
bee updates where you have possible

00:15:45,850 --> 00:15:52,150
multiple slots that might have different

00:15:47,890 --> 00:15:56,430
signatures you know okay has anyone kind

00:15:52,150 --> 00:15:59,590
of been thinking about that rules work

00:15:56,430 --> 00:16:04,420
can you be pregnant question that in

00:15:59,590 --> 00:16:07,420
Venice vente um so a mode but some

00:16:04,420 --> 00:16:10,420
devices are using for updates okay is

00:16:07,420 --> 00:16:12,070
that they have two slots okay and so

00:16:10,420 --> 00:16:13,870
that they can you know but-- a new

00:16:12,070 --> 00:16:16,210
kernel or the old colonel and so when

00:16:13,870 --> 00:16:19,450
you do an update you only update one and

00:16:16,210 --> 00:16:22,150
move the slop pointer to point to point

00:16:19,450 --> 00:16:23,980
to the other partition and that you know

00:16:22,150 --> 00:16:26,530
allows you to do rolling back to the old

00:16:23,980 --> 00:16:28,870
version if you need or yes it also just

00:16:26,530 --> 00:16:30,940
updating without corrupting encourage

00:16:28,870 --> 00:16:32,140
and so I was curious if that was

00:16:30,940 --> 00:16:35,290
something that anyways kind of looked at

00:16:32,140 --> 00:16:37,720
with it yeah yeah yes yeah so the Bri is

00:16:35,290 --> 00:16:40,000
the disaster recovery ms let's do that

00:16:37,720 --> 00:16:43,290
only so but still we didn't started

00:16:40,000 --> 00:16:46,630
working on that but they are I so in the

00:16:43,290 --> 00:16:48,370
kernel boot if the boot is failed so if

00:16:46,630 --> 00:16:50,650
it will check for ten times or something

00:16:48,370 --> 00:16:54,580
if it is boot failures happen then we

00:16:50,650 --> 00:16:57,820
will go to the dr i sighed the dr i will

00:16:54,580 --> 00:17:00,190
have a sum in some location it will have

00:16:57,820 --> 00:17:02,020
a monolithic image that we will take and

00:17:00,190 --> 00:17:04,710
we'll try to boot up that if that is

00:17:02,020 --> 00:17:08,410
also failing then we will go back to the

00:17:04,710 --> 00:17:11,890
back up bri so that way so that

00:17:08,410 --> 00:17:14,980
implementation part is their roadmap

00:17:11,890 --> 00:17:18,180
yeah so it is that part was like is that

00:17:14,980 --> 00:17:18,180
in the u.s. I

00:17:25,339 --> 00:17:39,450
in your face thank you I think you know

00:17:28,830 --> 00:17:42,480
it would be nice yeah but the disaster

00:17:39,450 --> 00:17:45,270
recovery scheme is implemented as a UEFI

00:17:42,480 --> 00:17:47,190
runtime application so comcast has

00:17:45,270 --> 00:17:49,080
specific requirements like we'll we'll

00:17:47,190 --> 00:17:52,370
try something 10 times it doesn't work

00:17:49,080 --> 00:17:55,020
than we do this so any logic can be

00:17:52,370 --> 00:17:57,210
implemented in the UF I runtime

00:17:55,020 --> 00:18:02,040
environment comcast does it a particular

00:17:57,210 --> 00:18:05,250
way and anyone then who provides like an

00:18:02,040 --> 00:18:07,320
oem providing a box to comcast

00:18:05,250 --> 00:18:09,660
essentially there's no need for them all

00:18:07,320 --> 00:18:12,480
to to redo it once those applications

00:18:09,660 --> 00:18:14,490
are runtime apps are written that

00:18:12,480 --> 00:18:17,400
implement the requirements for this

00:18:14,490 --> 00:18:19,320
disaster recovery scream like typically

00:18:17,400 --> 00:18:24,540
like on set top boxes you have like a

00:18:19,320 --> 00:18:26,990
swap if a new download sales you revert

00:18:24,540 --> 00:18:29,160
back to the old implementation or

00:18:26,990 --> 00:18:30,960
there's still some other problems and

00:18:29,160 --> 00:18:33,390
you can try to do a network download I

00:18:30,960 --> 00:18:35,940
don't just comcast have requirements for

00:18:33,390 --> 00:18:41,670
like a tftp download or any kind of a

00:18:35,940 --> 00:18:54,240
network download so yeah I think HTTPS

00:18:41,670 --> 00:18:57,480
is there I think yeah no questions the

00:18:54,240 --> 00:18:59,730
Heike us i pull up straight oreonna

00:18:57,480 --> 00:19:02,130
could you say it's a note of it older

00:18:59,730 --> 00:19:04,620
version yeah that you're using so I

00:19:02,130 --> 00:19:09,210
guess what the Heike UFO never go

00:19:04,620 --> 00:19:12,240
upstream do so I just said we bad it is

00:19:09,210 --> 00:19:17,220
very old code so they don't have any

00:19:12,240 --> 00:19:20,310
plans go upstream heike related changes

00:19:17,220 --> 00:19:25,470
so anyway next version of I key is

00:19:20,310 --> 00:19:29,310
coming it's in so I met my senses the

00:19:25,470 --> 00:19:32,580
red has been moved to the recent version

00:19:29,310 --> 00:19:34,590
but maybe this is a little bit back you

00:19:32,580 --> 00:19:35,500
know i'm not i'm not sure i would hope

00:19:34,590 --> 00:19:36,850
that we get it

00:19:35,500 --> 00:19:44,290
stream says it does want anything

00:19:36,850 --> 00:19:46,980
handsome did you does any part of your

00:19:44,290 --> 00:19:50,500
system require the use of efi variables

00:19:46,980 --> 00:19:51,940
because efi variables math set from the

00:19:50,500 --> 00:19:54,940
disco and things like that are a huge

00:19:51,940 --> 00:19:56,200
problem like you at the moment I'm just

00:19:54,940 --> 00:19:59,670
wondering if your work will contribute

00:19:56,200 --> 00:19:59,670
to solving it or if you don't need it

00:20:01,590 --> 00:20:11,080
list efi variables at the moment on the

00:20:06,580 --> 00:20:14,350
Heike can't be stalled because on a pc

00:20:11,080 --> 00:20:16,390
they can put nor flash and because the

00:20:14,350 --> 00:20:18,730
operating system and the firmware share

00:20:16,390 --> 00:20:21,100
the emmc and the opposition has been

00:20:18,730 --> 00:20:23,830
using the emc when it tries to say

00:20:21,100 --> 00:20:26,500
anything I variable you can't set efi

00:20:23,830 --> 00:20:30,940
variables it's a long-standing problem

00:20:26,500 --> 00:20:32,530
with the FI on embedded devices and I

00:20:30,940 --> 00:20:34,330
was hoping that as embedded companies

00:20:32,530 --> 00:20:36,850
like like Comcast get involved in using

00:20:34,330 --> 00:20:38,410
it that problem would be overcome I'm

00:20:36,850 --> 00:20:42,400
just wondering if your work is likely to

00:20:38,410 --> 00:20:45,010
contribute to solving it or not yeah as

00:20:42,400 --> 00:20:49,210
of now we are just a different

00:20:45,010 --> 00:20:52,150
implementation so yeah I mean hopefully

00:20:49,210 --> 00:20:55,360
we will look into that but we were

00:20:52,150 --> 00:20:58,690
discussing the analogy that there is a

00:20:55,360 --> 00:21:01,920
one more implementation using you boot

00:20:58,690 --> 00:21:05,110
the efi application you can use through

00:21:01,920 --> 00:21:09,550
even in you boot also so which has to

00:21:05,110 --> 00:21:18,520
take that putter still we are to take a

00:21:09,550 --> 00:21:22,000
decision on that you just mentioned

00:21:18,520 --> 00:21:24,730
about the hike isla can ask for the

00:21:22,000 --> 00:21:29,500
skill boot so doesn't mean you can now

00:21:24,730 --> 00:21:35,170
verify the UEFI image by high key hf so

00:21:29,500 --> 00:21:39,580
tell me the secure boot means if you

00:21:35,170 --> 00:21:43,720
sign the images it has to be validated

00:21:39,580 --> 00:21:46,840
and it has to be run but when you signed

00:21:43,720 --> 00:21:49,240
or unsigned if is the secure boot mode

00:21:46,840 --> 00:21:52,390
has to be enabled but that part is

00:21:49,240 --> 00:21:54,850
not supported efi images are running

00:21:52,390 --> 00:22:00,250
without validating the signature those

00:21:54,850 --> 00:22:04,480
stuff so it supports the U of Phi so it

00:22:00,250 --> 00:22:06,610
has a you fi a firmware image to which

00:22:04,480 --> 00:22:09,280
you can run I can launch a year five

00:22:06,610 --> 00:22:12,160
batteries but it is not secure like

00:22:09,280 --> 00:22:14,350
signed images if you flash it and try to

00:22:12,160 --> 00:22:23,800
launch you don't validate anything it

00:22:14,350 --> 00:22:30,610
will just execute that secure both of it

00:22:23,800 --> 00:22:32,740
yes yes so I had a similar question so

00:22:30,610 --> 00:22:34,570
if secure boot is not working on the

00:22:32,740 --> 00:22:37,360
high key and you're currently only doing

00:22:34,570 --> 00:22:39,220
this with EMU what other development

00:22:37,360 --> 00:22:43,300
options are available where secure boot

00:22:39,220 --> 00:22:45,520
is actually working so in high key we

00:22:43,300 --> 00:22:48,550
enable I mean just the software we have

00:22:45,520 --> 00:22:51,910
to just added some libraries and some

00:22:48,550 --> 00:22:54,940
packages and our hike EDS see file so

00:22:51,910 --> 00:23:02,770
when you enable when you add that the

00:22:54,940 --> 00:23:05,440
secure boot is enabled I mean so what

00:23:02,770 --> 00:23:09,220
you can't do another hockey is is sewing

00:23:05,440 --> 00:23:11,260
bookworm just affirmed amicable one but

00:23:09,220 --> 00:23:13,330
you can embed the keys in Bell warm that

00:23:11,260 --> 00:23:15,880
you fi then uses further down as though

00:23:13,330 --> 00:23:17,530
they were embedded secrets so you have

00:23:15,880 --> 00:23:19,810
the full architectural simulation of

00:23:17,530 --> 00:23:21,490
secure boot but that first step of

00:23:19,810 --> 00:23:23,860
actually putting the first bit into ramp

00:23:21,490 --> 00:23:25,960
we don't have the capacity or Nike

00:23:23,860 --> 00:23:27,790
designs okay but my question still

00:23:25,960 --> 00:23:30,430
stands because so far I got the

00:23:27,790 --> 00:23:33,520
impression that only like the enterprise

00:23:30,430 --> 00:23:35,230
kind of server great vendors for looking

00:23:33,520 --> 00:23:37,630
into ed k2 and I would still be

00:23:35,230 --> 00:23:40,030
interested to to understand like which

00:23:37,630 --> 00:23:41,950
vendors in this home networking site

00:23:40,030 --> 00:23:44,080
topics are actually looking in a fully

00:23:41,950 --> 00:23:46,420
implemented UEFI where those features

00:23:44,080 --> 00:23:49,060
are available okay let's let's go in

00:23:46,420 --> 00:23:51,070
nashik sports is public boxes and

00:23:49,060 --> 00:23:53,050
they're never going to ship with the

00:23:51,070 --> 00:23:55,360
security hardware to sign the first

00:23:53,050 --> 00:23:56,950
stage be loaded turned on I believe hike

00:23:55,360 --> 00:23:58,600
is actually capable of doing all this in

00:23:56,950 --> 00:24:01,600
hardware but the fuses when we set up

00:23:58,600 --> 00:24:02,169
training so you don't think you'll see

00:24:01,600 --> 00:24:03,669
the same thing

00:24:02,169 --> 00:24:06,100
the whole of the community available

00:24:03,669 --> 00:24:09,450
boards nobody is ever going to make form

00:24:06,100 --> 00:24:12,669
where the secret keys are asking a known

00:24:09,450 --> 00:24:14,679
sure about that I wasn't really asking

00:24:12,669 --> 00:24:16,509
about community boards simply it was

00:24:14,679 --> 00:24:19,149
even there like and usually the thing is

00:24:16,509 --> 00:24:20,980
if there's you now know like based

00:24:19,149 --> 00:24:23,470
software implementation available that

00:24:20,980 --> 00:24:24,879
the vendor or in OEM can actually take

00:24:23,470 --> 00:24:34,509
from them they're not going to ship it

00:24:24,879 --> 00:24:36,129
in other embedded devices either I don't

00:24:34,509 --> 00:24:39,970
know if this answers your question but I

00:24:36,129 --> 00:24:41,799
know that in the case of Comcast doing

00:24:39,970 --> 00:24:45,129
this reference implementation they are

00:24:41,799 --> 00:24:49,779
currently discussing UEFI with their

00:24:45,129 --> 00:24:52,779
OEMs and there this is an effort that is

00:24:49,779 --> 00:24:55,539
you know this is like a first step but

00:24:52,779 --> 00:24:58,029
there is more interest we see the OEMs

00:24:55,539 --> 00:25:01,960
doing adopting doing their own reference

00:24:58,029 --> 00:25:05,129
implementations for comcast so we hope

00:25:01,960 --> 00:25:07,989
that this will create momentum for UEFI

00:25:05,129 --> 00:25:10,690
and of course if it is implemented in

00:25:07,989 --> 00:25:12,700
production deployments then it will go

00:25:10,690 --> 00:25:16,389
through there you know production

00:25:12,700 --> 00:25:19,179
facilities and the bo-kyung no true root

00:25:16,389 --> 00:25:22,059
of trust security type things does that

00:25:19,179 --> 00:25:26,730
answer your question or kind of yes I

00:25:22,059 --> 00:25:30,249
like that let me add a little bit there

00:25:26,730 --> 00:25:32,919
usually this cover infrastructure is

00:25:30,249 --> 00:25:35,320
pada pada citizen vendor because the

00:25:32,919 --> 00:25:37,330
root of trust the truth rule of trust

00:25:35,320 --> 00:25:39,399
has to build into the silicon in order

00:25:37,330 --> 00:25:42,970
to secure the environment from the

00:25:39,399 --> 00:25:46,330
bottom and then doesn't matter what the

00:25:42,970 --> 00:25:49,720
second stage of the boot is either UEFI

00:25:46,330 --> 00:25:53,049
or you put and that even that image will

00:25:49,720 --> 00:25:56,889
get signed and encrypted then the

00:25:53,049 --> 00:26:00,429
silicon good romp who decrypted based on

00:25:56,889 --> 00:26:03,429
the role of trust key and then you

00:26:00,429 --> 00:26:06,129
continue on the boot the UEFI or you put

00:26:03,429 --> 00:26:09,179
can decrypt the subsequent security

00:26:06,129 --> 00:26:14,009
image so there are three stages of

00:26:09,179 --> 00:26:14,009
security in terms of a pudding

00:26:20,070 --> 00:26:36,640
ok we can follow up ok yeah thank you

00:26:33,520 --> 00:26:40,550
thanks for watching the fishing

00:26:36,640 --> 00:26:44,680
[Applause]

00:26:40,550 --> 00:26:44,680

YouTube URL: https://www.youtube.com/watch?v=AwVfedYi_S4


