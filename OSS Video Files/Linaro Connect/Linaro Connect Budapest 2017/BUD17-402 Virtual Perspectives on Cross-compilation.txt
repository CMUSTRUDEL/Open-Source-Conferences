Title: BUD17-402 Virtual Perspectives on Cross-compilation
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-402
Session Name: Virtual Perspectives on Cross-compilation - BUD17-402
Speaker: Alex Bennée
Track: Virtualization


★ Session Summary ★
Cross compiling (building software for one machine type on another) is something that should be familiar to most ARM developers. While kernel cross-compilation is well supported the story for user space is more complex. There are dedicated build systems for creating an entire rootfs from scratch but the overhead of learning them is quite for a single program. The usual fall-back of a linux-user chroot can be quite fiddly to set up and is often unique to each developer's set-up.
Virtualisation developer Alex Bennée offers some solutions that utilise Docker's container based approach, optionally with QEMU's linux-user emulation to do builds directly from the command line. In contrast to custom chroots Docker allows the creation of well specified, re-buildable containers that can be simply deployed by new developers. He will talk about the ongoing work to make building test binaries for foreign architectures in QEMU as simple as a make invocation.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-402/
Presentation: https://www.slideshare.net/linaroorg/bud17402-virtual-perspectives-on-crosscompilation
Video: https://youtu.be/8q9gWreQYZU
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: Virtualization, cross-compilation
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,130 --> 00:00:14,219
[Music]

00:00:10,700 --> 00:00:15,990
right so before I start just a quick

00:00:14,219 --> 00:00:19,800
introduction for those that don't know

00:00:15,990 --> 00:00:23,189
me my name is Alex bene I work on the

00:00:19,800 --> 00:00:25,380
virtualization team in linaro which is

00:00:23,189 --> 00:00:28,560
part of the core engineering group I've

00:00:25,380 --> 00:00:31,859
been with linaro since 2013 and I mostly

00:00:28,560 --> 00:00:33,600
work on creme ease TCG code which is the

00:00:31,859 --> 00:00:37,110
cross architecture emulation bit of

00:00:33,600 --> 00:00:38,969
creme you so as I work on virtualization

00:00:37,110 --> 00:00:42,000
perhaps the better title for this talk

00:00:38,969 --> 00:00:45,329
should be virtualization solves

00:00:42,000 --> 00:00:47,399
everything this might be a variation of

00:00:45,329 --> 00:00:48,930
maslow's hammer when you work on creme

00:00:47,399 --> 00:00:50,930
you all day all problems look as though

00:00:48,930 --> 00:00:55,170
they can be solved with a little bit of

00:00:50,930 --> 00:00:57,449
virtualization so I'm going to approach

00:00:55,170 --> 00:00:58,920
this talk as a series of compilation

00:00:57,449 --> 00:01:00,750
problems I'm going to explain the

00:00:58,920 --> 00:01:05,760
challenges of each problem in the steps

00:01:00,750 --> 00:01:07,470
we can take to avoid them so let's start

00:01:05,760 --> 00:01:10,380
with a simple case that I'm sure a lot

00:01:07,470 --> 00:01:12,990
of people are familiar with the colonel

00:01:10,380 --> 00:01:16,439
compile now I assume most of us here

00:01:12,990 --> 00:01:18,450
work with in the ARCIC arm ecosystem so

00:01:16,439 --> 00:01:19,950
I'm probably fair to assume that most of

00:01:18,450 --> 00:01:25,530
us have done a kernel compiler to in

00:01:19,950 --> 00:01:28,939
that time so about the hardest part of

00:01:25,530 --> 00:01:31,170
this setup is getting hold of a compiler

00:01:28,939 --> 00:01:33,270
fortunately linaro makes arm cross

00:01:31,170 --> 00:01:34,920
compilers available pretty available on

00:01:33,270 --> 00:01:36,930
the website and if you run a same

00:01:34,920 --> 00:01:38,549
distribution the chances are you can

00:01:36,930 --> 00:01:43,579
just install the cross compile package

00:01:38,549 --> 00:01:47,970
straight from your system however

00:01:43,579 --> 00:01:50,579
colonel compiles are easy colonel is a

00:01:47,970 --> 00:01:52,890
self-contained piece of software apart

00:01:50,579 --> 00:01:54,090
from the build tools we don't need to

00:01:52,890 --> 00:01:57,509
deal with any number of challenges

00:01:54,090 --> 00:01:59,369
associated with user space the colonel

00:01:57,509 --> 00:02:00,899
doesn't link to any external libraries

00:01:59,369 --> 00:02:03,479
so we don't have to deal with any

00:02:00,899 --> 00:02:05,579
external headers or even the events of

00:02:03,479 --> 00:02:07,350
shared objects or static libraries that

00:02:05,579 --> 00:02:08,910
you might want to link to and you don't

00:02:07,350 --> 00:02:11,030
have to deal with tools like package

00:02:08,910 --> 00:02:17,160
config

00:02:11,030 --> 00:02:19,020
so let's look at a simple test case I'm

00:02:17,160 --> 00:02:21,930
sure anyone it compile C has come across

00:02:19,020 --> 00:02:28,520
this one this is the canonical hello

00:02:21,930 --> 00:02:32,239
world and this is the simple mmm fine

00:02:28,520 --> 00:02:34,709
but it compiles the most important thing

00:02:32,239 --> 00:02:36,330
this is the simplest you can get with

00:02:34,709 --> 00:02:41,130
the stand only the standard library

00:02:36,330 --> 00:02:43,680
involved and indeed crops compilers

00:02:41,130 --> 00:02:45,180
usually ship with lipsy so as long as

00:02:43,680 --> 00:02:52,560
you don't use anything out of literacy

00:02:45,180 --> 00:02:54,269
this compiles straight out of the box so

00:02:52,560 --> 00:02:59,910
let's look at something slightly more

00:02:54,269 --> 00:03:02,549
complex this is hello world again but

00:02:59,910 --> 00:03:04,410
this time we're using the g live library

00:03:02,549 --> 00:03:12,150
so this is different from the G lipsy

00:03:04,410 --> 00:03:14,400
library to do our output now even some

00:03:12,150 --> 00:03:17,070
latest compilation our GCC invocation is

00:03:14,400 --> 00:03:19,140
going to be a little bit more complex we

00:03:17,070 --> 00:03:20,430
need to use package config to return the

00:03:19,140 --> 00:03:22,680
correct search paths for all the headers

00:03:20,430 --> 00:03:24,090
and we also need to tell it where to

00:03:22,680 --> 00:03:28,019
find the libraries it's going to link

00:03:24,090 --> 00:03:30,090
again so as you can see once we give GCC

00:03:28,019 --> 00:03:35,239
the correct flags we can quite happily

00:03:30,090 --> 00:03:35,239
compile latest binary

00:03:37,659 --> 00:03:43,549
however we can't simply call our cross

00:03:40,610 --> 00:03:46,099
compiler with the same set of flags we

00:03:43,549 --> 00:03:48,019
managed the first stage of the build but

00:03:46,099 --> 00:03:50,390
the link when we get to the link stage

00:03:48,019 --> 00:03:52,220
it fails to link against the library so

00:03:50,390 --> 00:03:58,220
to do this properly we need to have

00:03:52,220 --> 00:04:00,830
multi art set up on our system so let's

00:03:58,220 --> 00:04:03,440
look at how you do that now i will say

00:04:00,830 --> 00:04:05,660
now this is very debian specific other

00:04:03,440 --> 00:04:08,180
distributions do have similar ways of

00:04:05,660 --> 00:04:13,160
setting up these coexisting libraries

00:04:08,180 --> 00:04:14,750
but all these examples of for debian so

00:04:13,160 --> 00:04:16,340
let's the first thing we need to do is

00:04:14,750 --> 00:04:19,100
tell our packaging system that we want

00:04:16,340 --> 00:04:21,109
to support an additional architecture so

00:04:19,100 --> 00:04:23,870
this is quite simply done by telling d

00:04:21,109 --> 00:04:25,610
package at the n64 architecture and

00:04:23,870 --> 00:04:29,180
after we've updated our package list we

00:04:25,610 --> 00:04:32,810
can now install the a art 64 version of

00:04:29,180 --> 00:04:33,949
the g lib development package you can

00:04:32,810 --> 00:04:36,530
even install a whole slew of

00:04:33,949 --> 00:04:38,240
dependencies for a program if you've got

00:04:36,530 --> 00:04:40,669
your source repository setup so here i'm

00:04:38,240 --> 00:04:46,849
installing all the arm 64 dependencies

00:04:40,669 --> 00:04:48,770
for the cross building crimea so now we

00:04:46,849 --> 00:04:51,320
have multi arch set up on our system we

00:04:48,770 --> 00:04:52,669
can continue now the first thing we need

00:04:51,320 --> 00:04:55,760
to do is we need to use a specific

00:04:52,669 --> 00:04:57,470
package config for a Ark ships before so

00:04:55,760 --> 00:04:59,120
instead of calling the system one you

00:04:57,470 --> 00:05:01,430
call the one for the architecture you

00:04:59,120 --> 00:05:04,760
want to build against as you can see the

00:05:01,430 --> 00:05:06,050
parcels almost the same G lip path is

00:05:04,760 --> 00:05:08,919
exactly the same but there is an

00:05:06,050 --> 00:05:12,139
additional include path added for any

00:05:08,919 --> 00:05:14,030
architecture specific bits and the link

00:05:12,139 --> 00:05:20,150
path for the library we're going to link

00:05:14,030 --> 00:05:22,280
to is they are 64 specific and without

00:05:20,150 --> 00:05:28,510
new multi art sets that we can compile

00:05:22,280 --> 00:05:30,700
and Link without any problems it'll work

00:05:28,510 --> 00:05:36,400
so let's look at some of the pros and

00:05:30,700 --> 00:05:38,200
cons of a multi out setup so Debian in

00:05:36,400 --> 00:05:40,180
particular is very good for supporting

00:05:38,200 --> 00:05:41,860
multiple architectures there's about 10

00:05:40,180 --> 00:05:43,330
official architecture supported by

00:05:41,860 --> 00:05:47,080
Debian and there's a whole number of

00:05:43,330 --> 00:05:49,480
additional ports you can use debian has

00:05:47,080 --> 00:05:51,190
a very active community and it's got

00:05:49,480 --> 00:05:56,530
some excellent maintained errs including

00:05:51,190 --> 00:05:58,480
quite a number of linaro people however

00:05:56,530 --> 00:06:01,090
there are some caveats to a multi art

00:05:58,480 --> 00:06:03,820
set up so to be able to install a

00:06:01,090 --> 00:06:06,190
package from a foreign architecture have

00:06:03,820 --> 00:06:09,600
to match exactly the version of the host

00:06:06,190 --> 00:06:12,490
package so even a minor update to the

00:06:09,600 --> 00:06:14,320
foreign architecture can cause the

00:06:12,490 --> 00:06:16,570
package to not be able to be installed I

00:06:14,320 --> 00:06:18,130
believe this is being fixed in newer

00:06:16,570 --> 00:06:22,030
versions of Debian that not quite out

00:06:18,130 --> 00:06:24,250
yet also multi-arts is relatively new so

00:06:22,030 --> 00:06:25,870
while we're lucky that arm ports are in

00:06:24,250 --> 00:06:28,270
a pretty good state your experience can

00:06:25,870 --> 00:06:30,610
vary and there are still plenty of

00:06:28,270 --> 00:06:34,540
packages that need to be made multi-arts

00:06:30,610 --> 00:06:36,880
clean and it goes without saying this is

00:06:34,540 --> 00:06:38,560
very debian specific so even though a

00:06:36,880 --> 00:06:41,140
bun two packages a number of cross

00:06:38,560 --> 00:06:42,520
compilers it supports substantially

00:06:41,140 --> 00:06:44,980
fewer architectures as first-class

00:06:42,520 --> 00:06:46,810
citizens and because the foreign

00:06:44,980 --> 00:06:48,490
packages have to match exactly you can't

00:06:46,810 --> 00:06:51,280
just install a Debian package alongside

00:06:48,490 --> 00:06:52,600
the venturi system ones so before we go

00:06:51,280 --> 00:06:57,040
on let's look at some of the other

00:06:52,600 --> 00:06:59,560
options so the traditional solution has

00:06:57,040 --> 00:07:01,240
been to user to roots so these file

00:06:59,560 --> 00:07:02,680
trees with the cross compiler and all

00:07:01,240 --> 00:07:05,110
the libraries that do the right thing

00:07:02,680 --> 00:07:07,090
when you're cool with immature root and

00:07:05,110 --> 00:07:09,640
the other options of some sort of cross

00:07:07,090 --> 00:07:13,720
build system build ruse and opening baby

00:07:09,640 --> 00:07:15,880
that there are two well-known ones so to

00:07:13,720 --> 00:07:18,220
rusev being used for solving the cross

00:07:15,880 --> 00:07:20,470
compile problem for a long time but they

00:07:18,220 --> 00:07:22,300
do have some issues they usually

00:07:20,470 --> 00:07:24,280
provided as part of whatever project

00:07:22,300 --> 00:07:26,710
you're hacking on and usually they're

00:07:24,280 --> 00:07:28,540
just some sort of Allens unsigned tarble

00:07:26,710 --> 00:07:31,630
that healthful developer has put up on

00:07:28,540 --> 00:07:34,120
their website they can be fiddly to set

00:07:31,630 --> 00:07:35,890
up and generally in my experience once

00:07:34,120 --> 00:07:38,190
someone's got a chroot cross compile set

00:07:35,890 --> 00:07:42,420
up they never touch it again

00:07:38,190 --> 00:07:44,700
so it's never updated at the other end

00:07:42,420 --> 00:07:46,560
of the scale you've got the full-blown

00:07:44,700 --> 00:07:49,230
embedded build systems so example of

00:07:46,560 --> 00:07:51,900
this is these include buildroot and

00:07:49,230 --> 00:07:55,410
openembedded while they're excellent or

00:07:51,900 --> 00:07:56,910
what they do they are usually building a

00:07:55,410 --> 00:07:59,130
full stack so they will start by

00:07:56,910 --> 00:08:01,170
building a tool chain building all the

00:07:59,130 --> 00:08:02,880
system libraries and then usually they

00:08:01,170 --> 00:08:05,280
have some sort of project manifest and

00:08:02,880 --> 00:08:06,300
they will build all the user space that

00:08:05,280 --> 00:08:08,520
you want to have in that particular

00:08:06,300 --> 00:08:10,920
build they're basically aimed at

00:08:08,520 --> 00:08:12,690
building a full distribution and that

00:08:10,920 --> 00:08:17,910
massive overkill if all you want to do

00:08:12,690 --> 00:08:20,250
is build a small little test case so

00:08:17,910 --> 00:08:22,740
what's our wish lists for building our

00:08:20,250 --> 00:08:24,510
test cases we want to be able to have

00:08:22,740 --> 00:08:27,870
something that can precisely define a

00:08:24,510 --> 00:08:30,050
build environment multi-step manual

00:08:27,870 --> 00:08:32,340
setups are big barrier to entry and

00:08:30,050 --> 00:08:34,950
getting some sort of uber automated

00:08:32,340 --> 00:08:36,659
script for people to download they're

00:08:34,950 --> 00:08:38,370
very tricky to write and people are

00:08:36,659 --> 00:08:41,190
generally worry about running random

00:08:38,370 --> 00:08:42,180
scripts on their system we want

00:08:41,190 --> 00:08:44,490
something that's going to be widely

00:08:42,180 --> 00:08:45,870
available across distros because

00:08:44,490 --> 00:08:47,880
developers have very personal

00:08:45,870 --> 00:08:49,920
preferences and you don't have to force

00:08:47,880 --> 00:08:52,380
them to install particularly distro just

00:08:49,920 --> 00:08:55,020
to be able to build things in cross

00:08:52,380 --> 00:08:56,460
compilers and finally we want to be

00:08:55,020 --> 00:08:59,480
fully buzzword complying because we are

00:08:56,460 --> 00:09:03,090
in the 21st century so let's look at

00:08:59,480 --> 00:09:05,730
dhaka now doctor is a container based

00:09:03,090 --> 00:09:07,920
system the idea is that any particular

00:09:05,730 --> 00:09:10,140
services package with all its

00:09:07,920 --> 00:09:12,420
dependencies and then it's running an

00:09:10,140 --> 00:09:15,650
ephemeral container this is actually a

00:09:12,420 --> 00:09:17,190
kind of virtualization because the

00:09:15,650 --> 00:09:20,900
application running in the docker

00:09:17,190 --> 00:09:23,670
container sees only its own little world

00:09:20,900 --> 00:09:25,860
in this case we're going to use it to

00:09:23,670 --> 00:09:28,560
house our cross compiling setup so let's

00:09:25,860 --> 00:09:31,680
look at a definition so this is the

00:09:28,560 --> 00:09:33,690
complete definition of a doc across pill

00:09:31,680 --> 00:09:36,600
container just go through the steps at

00:09:33,690 --> 00:09:38,670
the top we start with our source Debian

00:09:36,600 --> 00:09:42,870
stable slim so this is just a cut down

00:09:38,670 --> 00:09:45,150
version of the Debian filesystem the

00:09:42,870 --> 00:09:46,890
next two steps here and we're adding an

00:09:45,150 --> 00:09:49,140
additional repository this is the M

00:09:46,890 --> 00:09:51,360
Debian repository so the M debian

00:09:49,140 --> 00:09:51,790
project packages cross compilers for a

00:09:51,360 --> 00:09:54,070
number of

00:09:51,790 --> 00:09:55,510
different architectures I believe this

00:09:54,070 --> 00:09:57,130
is something that goes away with the

00:09:55,510 --> 00:09:58,930
next version of stable when it comes out

00:09:57,130 --> 00:10:02,770
because the cross compilers are packaged

00:09:58,930 --> 00:10:04,720
as part of the core distribution this

00:10:02,770 --> 00:10:08,140
little step just enables the source

00:10:04,720 --> 00:10:10,660
repositories for the packages so that's

00:10:08,140 --> 00:10:12,130
very useful if you want to build install

00:10:10,660 --> 00:10:14,590
the bill dependencies for the package

00:10:12,130 --> 00:10:18,420
and then the same steps we saw before we

00:10:14,590 --> 00:10:20,530
add the architecture update install our

00:10:18,420 --> 00:10:22,300
essential field packages and in this

00:10:20,530 --> 00:10:27,430
case I'm also installing the quay music

00:10:22,300 --> 00:10:30,760
bill dependencies so there's a couple of

00:10:27,430 --> 00:10:34,990
things to note with docker firstly most

00:10:30,760 --> 00:10:36,640
docker containers run as root it's not

00:10:34,990 --> 00:10:38,500
really the real root of your system but

00:10:36,640 --> 00:10:42,130
it's still a fully privileged in its own

00:10:38,500 --> 00:10:45,220
little world so one fix to this is to

00:10:42,130 --> 00:10:47,770
add a user to your docket container that

00:10:45,220 --> 00:10:50,860
maps to the user in your system you'll

00:10:47,770 --> 00:10:52,810
see why this is useful in a moment the

00:10:50,860 --> 00:10:55,390
other thing is docker containers on

00:10:52,810 --> 00:10:56,560
their own or a self-contained little

00:10:55,390 --> 00:10:59,410
file system they don't have any

00:10:56,560 --> 00:11:01,390
disability at the outside world so a

00:10:59,410 --> 00:11:03,490
simple call won't be able to build

00:11:01,390 --> 00:11:05,980
anything in your source trees so now

00:11:03,490 --> 00:11:09,760
we've created our container how do we

00:11:05,980 --> 00:11:11,620
run it so here is a simple invocation

00:11:09,760 --> 00:11:14,140
let's just go through the first episode

00:11:11,620 --> 00:11:16,510
first of all minus minus RM that's just

00:11:14,140 --> 00:11:19,900
a topper ism for saying when you've run

00:11:16,510 --> 00:11:21,850
this container throw it away so when a

00:11:19,900 --> 00:11:24,190
container runs it might generate log

00:11:21,850 --> 00:11:26,170
files it might just put ephemeral stuff

00:11:24,190 --> 00:11:27,640
on the file system none of this matters

00:11:26,170 --> 00:11:30,940
because the doctor container gets thrown

00:11:27,640 --> 00:11:32,860
away when it's done the user lines

00:11:30,940 --> 00:11:35,050
instead of running the default route I'm

00:11:32,860 --> 00:11:37,600
saying running is the user is currently

00:11:35,050 --> 00:11:40,270
running in the host system so that's me

00:11:37,600 --> 00:11:43,990
because I've already made the docker

00:11:40,270 --> 00:11:47,710
container available as where of my user

00:11:43,990 --> 00:11:50,890
ID everything Maps across nicely the

00:11:47,710 --> 00:11:53,320
minus V is the volume command so all I'm

00:11:50,890 --> 00:11:55,510
saying here is map my current working

00:11:53,320 --> 00:11:57,310
doubt current working directory to

00:11:55,510 --> 00:12:00,970
exactly the same place on the docker

00:11:57,310 --> 00:12:03,610
container and most of users and also

00:12:00,970 --> 00:12:04,720
when I run the command do it in that

00:12:03,610 --> 00:12:07,660
directory

00:12:04,720 --> 00:12:09,730
and finally I identify the docker

00:12:07,660 --> 00:12:12,850
container I want to run so this is a

00:12:09,730 --> 00:12:16,029
unique tag that was created when I built

00:12:12,850 --> 00:12:17,709
my system and then the rest of it is the

00:12:16,029 --> 00:12:21,339
same cross-compile commanders we gave

00:12:17,709 --> 00:12:27,790
before and as you can see it builds a

00:12:21,339 --> 00:12:29,079
successful a art 64 binary well this is

00:12:27,790 --> 00:12:31,209
all well and good but as I've pointed

00:12:29,079 --> 00:12:34,180
out those occasions where multi-arts

00:12:31,209 --> 00:12:36,250
won't work either multi-arts could be

00:12:34,180 --> 00:12:39,329
broken or the development environment we

00:12:36,250 --> 00:12:45,009
want to actually use doesn't support it

00:12:39,329 --> 00:12:47,680
how do we get round this if only I had

00:12:45,009 --> 00:12:49,839
some sort of cross architecture

00:12:47,680 --> 00:12:54,970
simulator that I could use to run

00:12:49,839 --> 00:12:58,449
foreign binaries and here we go so this

00:12:54,970 --> 00:13:01,170
is running on my x86 systems again the

00:12:58,449 --> 00:13:04,660
same run command running new name ass

00:13:01,170 --> 00:13:08,079
but according to my guest I'm running on

00:13:04,660 --> 00:13:10,870
a arm v7 system doc it doesn't actually

00:13:08,079 --> 00:13:13,629
care what is in its root filesystem as

00:13:10,870 --> 00:13:16,240
long as it can run the binaries so what

00:13:13,629 --> 00:13:18,430
we've done here this was installed in

00:13:16,240 --> 00:13:23,740
the docker root filesystem a copy of the

00:13:18,430 --> 00:13:26,139
creme you lillix user emulator you try

00:13:23,740 --> 00:13:28,240
and run an arm v7 binary bin format miss

00:13:26,139 --> 00:13:30,430
ghost that's a foreign binary I'll run

00:13:28,240 --> 00:13:34,480
it with Crimea and then everything

00:13:30,430 --> 00:13:36,000
appears to be an arm so in this system I

00:13:34,480 --> 00:13:38,589
haven't even had to worry about doing

00:13:36,000 --> 00:13:42,550
multi-arts the entire root file system

00:13:38,589 --> 00:13:48,699
is armed binaries with arm compilers and

00:13:42,550 --> 00:13:53,189
our native libraries so there's a couple

00:13:48,699 --> 00:13:56,980
of caveats bin format misc itself is not

00:13:53,189 --> 00:14:00,370
containerized so you have to have been

00:13:56,980 --> 00:14:02,800
format misc setup on your host system so

00:14:00,370 --> 00:14:06,639
if you're whole system thinks cram you

00:14:02,800 --> 00:14:08,529
know to users using user bin prem you

00:14:06,639 --> 00:14:10,000
are you need to make sure that when you

00:14:08,529 --> 00:14:12,269
copy into the container is in exactly

00:14:10,000 --> 00:14:12,269
the same place

00:14:14,220 --> 00:14:21,220
it's not yet updated I think someone has

00:14:18,610 --> 00:14:23,050
posted patches once it's fairly trivial

00:14:21,220 --> 00:14:27,010
to work around and maybe one day we'll

00:14:23,050 --> 00:14:30,130
get round to doing it you can actually

00:14:27,010 --> 00:14:33,120
include if your guests running in the

00:14:30,130 --> 00:14:35,230
docker container is multi-arts cleaned a

00:14:33,120 --> 00:14:37,960
dynamically linked claiming but

00:14:35,230 --> 00:14:39,640
generally it's safer just to compile

00:14:37,960 --> 00:14:40,990
your creme you statically because it

00:14:39,640 --> 00:14:44,500
reduces the chance to be clashing with

00:14:40,990 --> 00:14:47,380
anything on the guest and unfortunately

00:14:44,500 --> 00:14:50,020
it will be slower than using a natively

00:14:47,380 --> 00:14:55,150
built cross compiler but it's still

00:14:50,020 --> 00:14:56,650
pretty useful so let's look at the use

00:14:55,150 --> 00:15:01,900
cases we have for the creamy build

00:14:56,650 --> 00:15:05,440
system so why do we want to do this in

00:15:01,900 --> 00:15:09,100
Quenya well the first one is portable

00:15:05,440 --> 00:15:11,080
build recipes so we have a system called

00:15:09,100 --> 00:15:12,700
pachu that sits on the crema mailing

00:15:11,080 --> 00:15:15,400
list and every time someone posts a

00:15:12,700 --> 00:15:18,370
series of patches it alert those patches

00:15:15,400 --> 00:15:22,990
into a tree and then run a number of

00:15:18,370 --> 00:15:27,780
built on them because cremieux needs to

00:15:22,990 --> 00:15:29,770
support a large variety of house of

00:15:27,780 --> 00:15:32,440
development operating systems which

00:15:29,770 --> 00:15:35,980
generally like to support the oldest LTS

00:15:32,440 --> 00:15:38,340
of every Enterprise OS it runs those

00:15:35,980 --> 00:15:40,870
builds against all those systems and

00:15:38,340 --> 00:15:42,880
this is actually fairly easy to do by

00:15:40,870 --> 00:15:45,430
creating doctor containers for all your

00:15:42,880 --> 00:15:48,340
guests the other case that we're looking

00:15:45,430 --> 00:15:50,560
at now is trying to get better at

00:15:48,340 --> 00:15:53,590
building out guess test cases so by

00:15:50,560 --> 00:15:56,680
default on x86 all the units has to be

00:15:53,590 --> 00:15:58,090
run are they built against x86 and we

00:15:56,680 --> 00:16:01,270
don't really exercise across

00:15:58,090 --> 00:16:02,920
architecture side of Crimea and this is

00:16:01,270 --> 00:16:05,020
generally tricky because usually when

00:16:02,920 --> 00:16:06,190
people want to test the first thing you

00:16:05,020 --> 00:16:08,890
say is the first thing you need is a

00:16:06,190 --> 00:16:13,060
cross compiler and I go all right can

00:16:08,890 --> 00:16:15,280
you not make it easier so in the cromeus

00:16:13,060 --> 00:16:18,160
or if you write if you run make docker

00:16:15,280 --> 00:16:20,200
you'll get this big long list of things

00:16:18,160 --> 00:16:22,940
that you can build using docker I'll

00:16:20,200 --> 00:16:26,040
just give you some examples

00:16:22,940 --> 00:16:29,370
so here's the first one make doc a test

00:16:26,040 --> 00:16:30,990
build at center six so quite often when

00:16:29,370 --> 00:16:33,000
people submit patches they might have

00:16:30,990 --> 00:16:35,310
accidentally broken one of these older

00:16:33,000 --> 00:16:39,360
Enterprise distributions usually because

00:16:35,310 --> 00:16:41,070
they have relatively old libraries and

00:16:39,360 --> 00:16:42,600
this way when it breaks you can tell

00:16:41,070 --> 00:16:45,780
them just run this on your command line

00:16:42,600 --> 00:16:49,250
and as long as you built ok you can

00:16:45,780 --> 00:16:51,690
recreate the bill that you just failed

00:16:49,250 --> 00:16:55,020
this next one make doc the test cricket

00:16:51,690 --> 00:16:56,940
Travis this is basically building on the

00:16:55,020 --> 00:16:58,350
same Travis build environment that we

00:16:56,940 --> 00:17:02,100
used for one of our continuous

00:16:58,350 --> 00:17:06,240
integration setups Travis I think was in

00:17:02,100 --> 00:17:08,670
a bun to 1204 and sometimes when the

00:17:06,240 --> 00:17:11,130
test case fails only on Travis but not

00:17:08,670 --> 00:17:13,470
on the developers system they want to be

00:17:11,130 --> 00:17:15,600
able to reproduce it main difference

00:17:13,470 --> 00:17:17,070
between that is my Travis build systems

00:17:15,600 --> 00:17:22,470
aid cause instead of the two that they

00:17:17,070 --> 00:17:24,420
have upstream next doc a test build at

00:17:22,470 --> 00:17:26,100
debian on 64 cross so this is one of the

00:17:24,420 --> 00:17:30,300
multi art across systems that i created

00:17:26,100 --> 00:17:32,130
the for this is useful because by

00:17:30,300 --> 00:17:35,160
default if you're just building on an

00:17:32,130 --> 00:17:37,860
x86 you're not actually building all of

00:17:35,160 --> 00:17:40,320
the creme you code things like kvm

00:17:37,860 --> 00:17:41,760
supports are only built in for the

00:17:40,320 --> 00:17:45,000
native architecture that you're building

00:17:41,760 --> 00:17:48,800
on but now building a proper crossbills

00:17:45,000 --> 00:17:51,450
we built with all the kvm support in

00:17:48,800 --> 00:17:54,240
finally here's one not actually in the

00:17:51,450 --> 00:17:57,960
main line yet but I had problems getting

00:17:54,240 --> 00:18:00,000
the Debian PPC cross to work but not

00:17:57,960 --> 00:18:02,250
with debian pbc user so i can use

00:18:00,000 --> 00:18:11,390
cremieux user support the cross build

00:18:02,250 --> 00:18:15,240
and everything's okay so in summary

00:18:11,390 --> 00:18:17,610
Colonel compiles of the simple case if

00:18:15,240 --> 00:18:19,620
you're building user space programs that

00:18:17,610 --> 00:18:22,680
adds complexity to your cross my path

00:18:19,620 --> 00:18:26,100
better but this is actually sold for the

00:18:22,680 --> 00:18:28,140
most part with multi-arts however

00:18:26,100 --> 00:18:30,150
sometimes that doesn't work so we can

00:18:28,140 --> 00:18:33,210
use docker to allow us to paper over the

00:18:30,150 --> 00:18:35,970
cracks and if we really want to we can

00:18:33,210 --> 00:18:41,040
combine dhaka virtualization with creme

00:18:35,970 --> 00:18:55,460
so double the fun and that is it do we

00:18:41,040 --> 00:18:59,010
have any question do you know p root

00:18:55,460 --> 00:19:02,910
Beirut after yes I've had a period it

00:18:59,010 --> 00:19:07,130
has been developed in HD and it's a kind

00:19:02,910 --> 00:19:11,910
of a chroot sin in user mode without the

00:19:07,130 --> 00:19:14,150
need for privileged exec BFFs with two

00:19:11,910 --> 00:19:17,880
CH woods yeah and I think it does

00:19:14,150 --> 00:19:21,420
exactly what you you can you are showing

00:19:17,880 --> 00:19:23,850
with docker priests queuing is it yeah

00:19:21,420 --> 00:19:27,890
it will be a similar sort of set our

00:19:23,850 --> 00:19:31,320
doctor is essentially a glorified churu

00:19:27,890 --> 00:19:32,460
apart from that process isolation but

00:19:31,320 --> 00:19:34,920
yes you're right you can solve this

00:19:32,460 --> 00:19:38,550
without with other solutions is P route

00:19:34,920 --> 00:19:40,350
widely packaged so one of one advantage

00:19:38,550 --> 00:19:42,750
of using docker is all of the major

00:19:40,350 --> 00:19:44,130
distributions have dr. package so this

00:19:42,750 --> 00:19:45,980
just works out of the box you don't have

00:19:44,130 --> 00:19:50,820
to ask someone to install an additional

00:19:45,980 --> 00:19:53,130
binary to get a system working and it's

00:19:50,820 --> 00:19:59,610
a nice the Knights property of the

00:19:53,130 --> 00:20:04,890
purities that you can you can compile

00:19:59,610 --> 00:20:07,290
your your your code using qemu base

00:20:04,890 --> 00:20:13,530
which is one one solution but you can

00:20:07,290 --> 00:20:15,510
also use the cost compiler as if you

00:20:13,530 --> 00:20:17,640
were using an anti-vampire in the

00:20:15,510 --> 00:20:22,890
virtualizer environment you see what I

00:20:17,640 --> 00:20:25,590
mean yes it means that you you you you

00:20:22,890 --> 00:20:30,240
don't have the overload the overhead of

00:20:25,590 --> 00:20:32,880
a simulating our processor yeah you and

00:20:30,240 --> 00:20:35,130
in the cross compile case here in Java

00:20:32,880 --> 00:20:36,600
there is no overhead my apartment

00:20:35,130 --> 00:20:39,270
lessons of mine or overhead of running

00:20:36,600 --> 00:20:42,420
inside the rocket container but the

00:20:39,270 --> 00:20:44,850
other thing that is useful in the docker

00:20:42,420 --> 00:20:46,410
setup is you can concisely describe what

00:20:44,850 --> 00:20:48,210
your build environment is so is with

00:20:46,410 --> 00:20:49,240
Peru you still have to have a tarball

00:20:48,210 --> 00:20:51,760
that you

00:20:49,240 --> 00:20:57,670
set up from somewhere that's got all

00:20:51,760 --> 00:20:59,410
your cross-compile in it that's that

00:20:57,670 --> 00:21:01,930
that's the bit that where you say uh

00:20:59,410 --> 00:21:04,720
download this tar ball and you know put

00:21:01,930 --> 00:21:06,520
it here to running you have to install

00:21:04,720 --> 00:21:13,450
peru and the root filesystem that you're

00:21:06,520 --> 00:21:15,160
going to run your compiler yeah and the

00:21:13,450 --> 00:21:16,600
other thing that's nice about docker is

00:21:15,160 --> 00:21:18,640
you can just say right well we're going

00:21:16,600 --> 00:21:20,500
to base it on debian and all you need is

00:21:18,640 --> 00:21:30,820
these five steps to add the additional

00:21:20,500 --> 00:21:33,460
bits that you need not as much a

00:21:30,820 --> 00:21:36,520
question of the common so we use a very

00:21:33,460 --> 00:21:43,150
very similar setup also using darker for

00:21:36,520 --> 00:21:48,070
touching building TC whe and oh when

00:21:43,150 --> 00:21:50,830
using more closed environments when you

00:21:48,070 --> 00:21:58,060
need authentication inside container

00:21:50,830 --> 00:22:00,460
like SSH keys is a the likeliest case it

00:21:58,060 --> 00:22:03,730
is often easier to start a docker

00:22:00,460 --> 00:22:06,190
container with an ssh server inside so

00:22:03,730 --> 00:22:09,550
that and then treat that as a virtual

00:22:06,190 --> 00:22:13,120
machine which runs a virtual machine

00:22:09,550 --> 00:22:18,730
running arm code and then ssh into that

00:22:13,120 --> 00:22:20,890
and run build script via stage using SH

00:22:18,730 --> 00:22:22,810
agent forwarding so that from inside of

00:22:20,890 --> 00:22:25,660
the machine you have access to your

00:22:22,810 --> 00:22:27,670
private repos you have access to other

00:22:25,660 --> 00:22:30,970
machines which you might use for testing

00:22:27,670 --> 00:22:33,400
yes I mean the use case we're using here

00:22:30,970 --> 00:22:35,050
the the doc container is really just an

00:22:33,400 --> 00:22:38,140
ephemeral thing that gets brought up to

00:22:35,050 --> 00:22:40,200
the build and then thrown away you can

00:22:38,140 --> 00:22:42,550
use it as you say is more of a

00:22:40,200 --> 00:22:45,040
persistent self contained environment I

00:22:42,550 --> 00:22:48,330
know a lot of the doctor people would

00:22:45,040 --> 00:22:50,530
say that running SSH inside docker is

00:22:48,330 --> 00:22:53,050
missing the point and they would say

00:22:50,530 --> 00:22:55,630
there are other ways to do it so you can

00:22:53,050 --> 00:23:00,670
export I've done it before we basically

00:22:55,630 --> 00:23:02,980
make your the socket pass through your

00:23:00,670 --> 00:23:03,220
SSH and visible to the docker container

00:23:02,980 --> 00:23:05,080
and

00:23:03,220 --> 00:23:08,370
you've got the same sort of thing access

00:23:05,080 --> 00:23:14,470
to all your some cases whatever hey

00:23:08,370 --> 00:23:17,440
acura i'm also using the docker to avoid

00:23:14,470 --> 00:23:21,309
answering that the crowdsourcing in my

00:23:17,440 --> 00:23:26,740
year m host environment and i'm also

00:23:21,309 --> 00:23:31,600
work hitting the same issue was a no

00:23:26,740 --> 00:23:36,490
privileged user issue in docker

00:23:31,600 --> 00:23:39,309
container and i also tried to share that

00:23:36,490 --> 00:23:43,679
the doc I image itself with are the

00:23:39,309 --> 00:23:48,130
other users in that case how did you

00:23:43,679 --> 00:23:50,559
solve that so in the in the Crimea build

00:23:48,130 --> 00:23:53,289
system case yes all the images just

00:23:50,559 --> 00:23:56,740
exist lovely so they're obviously they

00:23:53,289 --> 00:23:58,360
used it pulls from debian stable slim so

00:23:56,740 --> 00:24:01,570
that just automatically pulls from the

00:23:58,360 --> 00:24:05,350
docker hub but you can actually set up

00:24:01,570 --> 00:24:07,179
your own doctor repositories and that

00:24:05,350 --> 00:24:08,890
mean it probably needs his ways to set

00:24:07,179 --> 00:24:12,610
up a specific doctor repository to put

00:24:08,890 --> 00:24:14,710
your specific set of tests yes now I

00:24:12,610 --> 00:24:18,850
mean that they're printed are sure that

00:24:14,710 --> 00:24:25,510
there are they are adding their other

00:24:18,850 --> 00:24:28,150
user hug on their your container that

00:24:25,510 --> 00:24:34,570
one oh yeah this one so that this one

00:24:28,150 --> 00:24:37,510
will be run in container or docker yeah

00:24:34,570 --> 00:24:41,710
so i glossed over the detail slightly

00:24:37,510 --> 00:24:43,360
here so we actually have in the Crimea

00:24:41,710 --> 00:24:45,909
build system we have a little script

00:24:43,360 --> 00:24:48,130
that pulls together a docker build and

00:24:45,909 --> 00:24:53,620
what it actually does is it takes the

00:24:48,130 --> 00:24:56,650
the this recipe that you see here yep

00:24:53,620 --> 00:24:58,780
and then it creates a temporary copy of

00:24:56,650 --> 00:25:01,510
it adds this on to the end depending on

00:24:58,780 --> 00:25:04,809
what your real user name is and then

00:25:01,510 --> 00:25:06,640
when it builds through the container is

00:25:04,809 --> 00:25:09,250
just set up for the user on that system

00:25:06,640 --> 00:25:13,750
yeah in that case but there are if we

00:25:09,250 --> 00:25:15,380
add this third container image a build

00:25:13,750 --> 00:25:17,480
for each user

00:25:15,380 --> 00:25:20,690
is that right yes that's right the alchy

00:25:17,480 --> 00:25:25,010
yeah but it's only a little difference

00:25:20,690 --> 00:25:27,110
basically the root image that it uses

00:25:25,010 --> 00:25:29,000
everyone is based on that and then it's

00:25:27,110 --> 00:25:31,640
just the local set of changes with this

00:25:29,000 --> 00:25:33,140
mate so in this in this case yes there

00:25:31,640 --> 00:25:34,700
is a bit because it's installed a bunch

00:25:33,140 --> 00:25:38,020
of dependencies but it's not actually

00:25:34,700 --> 00:25:41,660
that's a larger change okay thank you go

00:25:38,020 --> 00:25:44,090
hi he'll go to the page about the the

00:25:41,660 --> 00:25:50,300
mixed ockert have to build I mean blood

00:25:44,090 --> 00:25:53,120
is coming out maybe example ones yes yes

00:25:50,300 --> 00:25:56,630
yeah so this is already in the Crimea

00:25:53,120 --> 00:25:58,990
sauce gravy these three are this one's

00:25:56,630 --> 00:26:01,790
still in full pages what is the

00:25:58,990 --> 00:26:04,430
requirement on the developer machine to

00:26:01,790 --> 00:26:06,800
longer this so the requirement is

00:26:04,430 --> 00:26:08,270
basically have dr. installed so as long

00:26:06,800 --> 00:26:11,060
as you've got the dacha demon installed

00:26:08,270 --> 00:26:12,560
and most same distribution if you just

00:26:11,060 --> 00:26:14,990
install it will automatically get even

00:26:12,560 --> 00:26:17,960
up really are these images from I mean

00:26:14,990 --> 00:26:20,240
like the central as 60 so yeah so these

00:26:17,960 --> 00:26:22,670
will get pulled so central 6 is pulled

00:26:20,240 --> 00:26:26,120
directly from the docker hub Travis is

00:26:22,670 --> 00:26:29,750
pulled from travis's own well it's a

00:26:26,120 --> 00:26:31,640
quaver I oh but you are all specified in

00:26:29,750 --> 00:26:34,130
the docker file so if you're going to

00:26:31,640 --> 00:26:37,280
immediate are not cramming or specific

00:26:34,130 --> 00:26:38,930
they're not that the changes that have

00:26:37,280 --> 00:26:41,870
been made for them to add the build

00:26:38,930 --> 00:26:44,540
dependencies cremy specific but the root

00:26:41,870 --> 00:26:48,080
file system that they're all builds on

00:26:44,540 --> 00:26:49,850
is based on Yom Custer wondering what I

00:26:48,080 --> 00:26:54,130
should do if I want to do something

00:26:49,850 --> 00:26:56,450
similar in my program time into yeah so

00:26:54,130 --> 00:27:00,110
if you look if you've got the creamy

00:26:56,450 --> 00:27:02,060
sauce pre-tests docker everything under

00:27:00,110 --> 00:27:05,360
there is what's done and there's a dr

00:27:02,060 --> 00:27:08,090
dot pi little script that just automate

00:27:05,360 --> 00:27:10,160
some of the build steps and then there's

00:27:08,090 --> 00:27:12,470
some dhaka fire example dr. fire all the

00:27:10,160 --> 00:27:19,400
various tips we build so looking there

00:27:12,470 --> 00:27:22,220
and thank you QMI upstream other other

00:27:19,400 --> 00:27:24,290
this option yeah these three already

00:27:22,220 --> 00:27:27,710
upstream because i have actually uses

00:27:24,290 --> 00:27:29,250
these this is just one using user I just

00:27:27,710 --> 00:27:32,040
haven't upstream those patches yet

00:27:29,250 --> 00:27:33,570
they're still being reviewed so one

00:27:32,040 --> 00:27:38,400
thing I didn't quite get for the Debian

00:27:33,570 --> 00:27:40,650
am 64 cross image that is native I'm 64

00:27:38,400 --> 00:27:42,450
image as I understand it now the arm 64

00:27:40,650 --> 00:27:46,050
cross the image is a multi archimage so

00:27:42,450 --> 00:27:49,320
it's a it's an x86 image with the arm 64

00:27:46,050 --> 00:27:50,760
cross compiler and the arm 64 libraries

00:27:49,320 --> 00:27:54,270
and packages installed in that image

00:27:50,760 --> 00:27:56,490
right yeah so you also mentioned the

00:27:54,270 --> 00:27:58,800
other case though which is not this one

00:27:56,490 --> 00:28:02,520
apparently the way you have the wood

00:27:58,800 --> 00:28:06,120
really could have a native arm 54 system

00:28:02,520 --> 00:28:08,490
and then an x86 to the arm 64 cross

00:28:06,120 --> 00:28:10,980
compiler instead of user bin gccs right

00:28:08,490 --> 00:28:14,670
how would you set that up the soccer to

00:28:10,980 --> 00:28:19,200
just replace the compiler good job I

00:28:14,670 --> 00:28:21,600
thought of this right so we it's a it's

00:28:19,200 --> 00:28:24,750
a little complex but this is basically

00:28:21,600 --> 00:28:28,220
an abridged version of the setup script

00:28:24,750 --> 00:28:31,920
so we run at a little doc about pie

00:28:28,220 --> 00:28:33,900
script will if you've got a dot pre it

00:28:31,920 --> 00:28:35,850
will run that in the docket build

00:28:33,900 --> 00:28:37,440
context so this I mean most of this is

00:28:35,850 --> 00:28:38,460
all boys places just sort of checking

00:28:37,440 --> 00:28:42,060
that you've got the tools that you need

00:28:38,460 --> 00:28:45,090
and then runs this line here def

00:28:42,060 --> 00:28:47,880
bootstrap and boots scraps debian into

00:28:45,090 --> 00:28:51,660
the file system and then the actual

00:28:47,880 --> 00:28:54,090
build it says I'm not that I'm not

00:28:51,660 --> 00:28:56,880
basing this image on anything everything

00:28:54,090 --> 00:28:59,010
in my daugher build contacts add so this

00:28:56,880 --> 00:29:00,990
is the directory you're in when you run

00:28:59,010 --> 00:29:03,900
the docker bills so that includes the

00:29:00,990 --> 00:29:07,140
entire docker file system and copy of

00:29:03,900 --> 00:29:08,730
Prem you this is just a little hack for

00:29:07,140 --> 00:29:10,530
bootstrap so it doesn't try and mount

00:29:08,730 --> 00:29:12,870
something when you when you run the

00:29:10,530 --> 00:29:14,970
script this is the second stage so it

00:29:12,870 --> 00:29:17,100
just runs the bootstrap second stage and

00:29:14,970 --> 00:29:19,550
it's just like setting up a normal

00:29:17,100 --> 00:29:22,860
debuting filesystem at that point and

00:29:19,550 --> 00:29:25,440
then finally run runs the updates and

00:29:22,860 --> 00:29:28,020
installs that bill dependencies but but

00:29:25,440 --> 00:29:31,740
you still have to like then if you

00:29:28,020 --> 00:29:34,080
install the x86 64 across component of

00:29:31,740 --> 00:29:37,050
that it will not be called GPUs urban

00:29:34,080 --> 00:29:40,110
Jesus years or because you have been so

00:29:37,050 --> 00:29:42,000
in this case your user bin GCC is an

00:29:40,110 --> 00:29:44,700
armed binary

00:29:42,000 --> 00:29:46,770
target's arm so this is a this is

00:29:44,700 --> 00:29:49,260
resetting a setting up a fully foreign

00:29:46,770 --> 00:29:51,420
root file system so the only x86 binary

00:29:49,260 --> 00:29:53,340
in there is the quay me static that

00:29:51,420 --> 00:29:55,530
allows you to talk about it the case

00:29:53,340 --> 00:29:57,360
that I've used on non-doctor systems

00:29:55,530 --> 00:30:01,470
before that I want to replicate that

00:29:57,360 --> 00:30:06,290
this is where I have a fully armed 64

00:30:01,470 --> 00:30:09,830
root file system except for user qmu and

00:30:06,290 --> 00:30:13,380
GCC and pin details and make and bash

00:30:09,830 --> 00:30:15,840
right okay so sort of hybrid for fun but

00:30:13,380 --> 00:30:17,310
that's what we have on your system which

00:30:15,840 --> 00:30:19,650
is not the car base but it's perhaps

00:30:17,310 --> 00:30:21,060
would be better if we take this outside

00:30:19,650 --> 00:30:23,850
because I think we're just about to run

00:30:21,060 --> 00:30:26,230
out of time it yep okay well thank you

00:30:23,850 --> 00:30:30,819
very much for your time

00:30:26,230 --> 00:30:30,819
[Applause]

00:30:42,050 --> 00:30:44,110
you

00:31:10,200 --> 00:31:12,260

YouTube URL: https://www.youtube.com/watch?v=8q9gWreQYZU


