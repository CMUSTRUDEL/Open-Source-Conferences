Title: The kernel’s limits to growth - Jonathan Corbet from LWN - BUD17-500K1
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	Video & Presentation: http://connect.linaro.org/resource/bud17/bud17-500k1/

The Linux kernel is one of the most successful software-development projects ever. To get there we had to surmount a "Session ID: BUD17-500K1
Session Name: The kernel’s limits to growth - BUD17-500K1
Speaker: Jonathan Corbet
Track: 


★ Session Summary ★
The Linux kernel is one of the most successful software-development projects ever. To get there we had to surmount a number of process and community-management hurdles, though. The result is a development process that is a wonder to behold, but it would be a mistake to say that we have solved all of our problems forevermore. We are facing a number of obstacles that, beyond limiting our future growth, might even threaten our ability to sustain our current development pace. What are those obstacles, and what can we be doing to address them?
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-500k1/
Presentation: https://www.slideshare.net/linaroorg/the-kernels-limits-to-growth-bud17500k1
Video: https://www.youtube.com/watch?v=_hajkHgyVbk
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: kernel, linux, corbet, keynote
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:02,030 --> 00:00:06,600
so today's keynote we have a very

00:00:04,200 --> 00:00:08,730
special keynote a gentleman who has been

00:00:06,600 --> 00:00:10,050
here lots of Budapest but to connect

00:00:08,730 --> 00:00:12,509
before and is always an interesting

00:00:10,050 --> 00:00:22,769
speaker please join me in welcoming John

00:00:12,509 --> 00:00:24,840
Corben all right well good morning

00:00:22,769 --> 00:00:27,570
everybody thanks for coming out early on

00:00:24,840 --> 00:00:30,500
a Friday morning it's nice to be here in

00:00:27,570 --> 00:00:32,730
Budapest where I've never been before so

00:00:30,500 --> 00:00:36,899
unfortunately I come bearing some bad

00:00:32,730 --> 00:00:38,430
news it was sort we had a bit of a

00:00:36,899 --> 00:00:40,559
discussion on the Linux kernel mailing

00:00:38,430 --> 00:00:42,210
list people got upset with in his

00:00:40,559 --> 00:00:45,090
Torvalds because patches were being

00:00:42,210 --> 00:00:46,860
dropped and the process wasn't working

00:00:45,090 --> 00:00:48,149
very well it ended up with him

00:00:46,860 --> 00:00:50,039
complaining that everybody was just

00:00:48,149 --> 00:00:51,780
adding pressure to him until them go

00:00:50,039 --> 00:00:53,250
away people don't see see me anymore I'm

00:00:51,780 --> 00:00:56,460
not interested I'm taking a vacation

00:00:53,250 --> 00:00:58,170
don't talk to me anymore about this okay

00:00:56,460 --> 00:01:00,270
the good news is that this happened

00:00:58,170 --> 00:01:04,199
about 19 years ago and so he's come back

00:01:00,270 --> 00:01:07,280
since then but this was not the first

00:01:04,199 --> 00:01:09,270
but what are the first and biggest of of

00:01:07,280 --> 00:01:10,950
episodes that we have had over the years

00:01:09,270 --> 00:01:15,090
and what I call development process

00:01:10,950 --> 00:01:16,439
scalability the Linux kernel is famously

00:01:15,090 --> 00:01:18,270
scalable and their runs and everything

00:01:16,439 --> 00:01:19,650
from these tiny little boards that we

00:01:18,270 --> 00:01:21,960
saw up here up to the largest of

00:01:19,650 --> 00:01:23,610
computers over the years we've had to

00:01:21,960 --> 00:01:25,380
scale the development process in the

00:01:23,610 --> 00:01:27,630
same way going from a project that was

00:01:25,380 --> 00:01:29,909
initially a hobby done by a single

00:01:27,630 --> 00:01:32,400
developer up to what we have now which

00:01:29,909 --> 00:01:35,640
is rather larger than that over the

00:01:32,400 --> 00:01:37,680
years the scalability the scaling has

00:01:35,640 --> 00:01:40,890
brought about some challenges of its own

00:01:37,680 --> 00:01:42,780
and what I want to do is to talk about

00:01:40,890 --> 00:01:46,290
some of those and the ones that I think

00:01:42,780 --> 00:01:49,110
we may be facing in the future so we got

00:01:46,290 --> 00:01:51,030
over that episode in 1998 figured out

00:01:49,110 --> 00:01:55,320
how to go on but we had other issues as

00:01:51,030 --> 00:01:57,390
well so if we think back to the early 2x

00:01:55,320 --> 00:02:00,210
days all right the two da doe colonel

00:01:57,390 --> 00:02:02,159
came out at the beginning of 1999 the

00:02:00,210 --> 00:02:03,930
two dot for kernel which was the next

00:02:02,159 --> 00:02:06,240
stable release right the next feature

00:02:03,930 --> 00:02:07,740
release that we had was two years after

00:02:06,240 --> 00:02:09,840
that it took us two full years to do

00:02:07,740 --> 00:02:11,900
that and then to that six came out

00:02:09,840 --> 00:02:14,120
actually three full years after they

00:02:11,900 --> 00:02:16,730
so if you were waiting for a new kernel

00:02:14,120 --> 00:02:18,470
with new code new features new hardware

00:02:16,730 --> 00:02:22,970
support you were waiting up to three

00:02:18,470 --> 00:02:24,799
years to get it this was a fairly long

00:02:22,970 --> 00:02:27,379
period of time especially in this period

00:02:24,799 --> 00:02:29,629
when Linux was just really beginning to

00:02:27,379 --> 00:02:32,090
be taken seriously was just beginning to

00:02:29,629 --> 00:02:34,099
take off commercially but we had an

00:02:32,090 --> 00:02:35,599
awful lot of gaps to fill still we were

00:02:34,099 --> 00:02:37,760
still working very hard just to be

00:02:35,599 --> 00:02:39,829
competitive with proprietary UNIX in

00:02:37,760 --> 00:02:41,989
those days much less to actually take

00:02:39,829 --> 00:02:43,489
the lead so there's a lot of development

00:02:41,989 --> 00:02:45,079
going on development was happening at

00:02:43,489 --> 00:02:47,900
what we thought was a furious pace back

00:02:45,079 --> 00:02:51,889
then relatively slow compared to what we

00:02:47,900 --> 00:02:54,889
have now but this business of taking up

00:02:51,889 --> 00:02:58,849
to three years to get a kernel out I had

00:02:54,889 --> 00:03:00,769
a bunch of consequences since everybody

00:02:58,849 --> 00:03:02,870
wanted the stuff that for example was

00:03:00,769 --> 00:03:04,819
being devolved for two dot six but they

00:03:02,870 --> 00:03:06,079
wanted it back three years earlier when

00:03:04,819 --> 00:03:08,389
it was developed when we actually needed

00:03:06,079 --> 00:03:09,739
it we've had distributors back porting

00:03:08,389 --> 00:03:11,689
all that stuff into the two top for

00:03:09,739 --> 00:03:14,090
kernel and creating these incredible

00:03:11,689 --> 00:03:15,709
Frankenstein kernels that they would

00:03:14,090 --> 00:03:17,540
ship these were kernels that were tested

00:03:15,709 --> 00:03:20,060
by nobody but the distributor not tested

00:03:17,540 --> 00:03:22,819
by the by the community as a whole these

00:03:20,060 --> 00:03:24,650
were kernels that had a bi differences

00:03:22,819 --> 00:03:26,449
between distributors there were these

00:03:24,650 --> 00:03:28,609
really massive things and then for extra

00:03:26,449 --> 00:03:31,280
fun they threw in a bunch of add a tree

00:03:28,609 --> 00:03:32,930
code of their own some fun things how

00:03:31,280 --> 00:03:36,230
many of you remember the tux web server

00:03:32,930 --> 00:03:39,530
a few of you we actually had a web

00:03:36,230 --> 00:03:42,409
server in the colonel fortunately we no

00:03:39,530 --> 00:03:44,810
longer have that so this has created a

00:03:42,409 --> 00:03:47,329
lot of pain and when for example to that

00:03:44,810 --> 00:03:50,540
six dot zero finally came out it created

00:03:47,329 --> 00:03:54,010
a different kind of pain when everybody

00:03:50,540 --> 00:03:56,780
had to move forward from these one-off

00:03:54,010 --> 00:03:58,879
frankenstein kernels into two dot six

00:03:56,780 --> 00:04:01,040
and drag forward all this to that does

00:03:58,879 --> 00:04:02,599
all this out of tree code and so on so

00:04:01,040 --> 00:04:06,040
the upgrade process was also quite

00:04:02,599 --> 00:04:08,569
painful for a whole lot of reasons so

00:04:06,040 --> 00:04:10,489
this this seemed unsustainable it seemed

00:04:08,569 --> 00:04:13,310
like a real process problem that we were

00:04:10,489 --> 00:04:15,620
taking so long to get the code out to

00:04:13,310 --> 00:04:17,030
our users and creating this whole

00:04:15,620 --> 00:04:18,590
ecosystem that required all this back

00:04:17,030 --> 00:04:22,669
porting and so on so we made some

00:04:18,590 --> 00:04:24,220
changes we adopted what we call the

00:04:22,669 --> 00:04:27,220
upstream first rule

00:04:24,220 --> 00:04:29,560
this rule says that before you ship code

00:04:27,220 --> 00:04:31,270
to your customers it needs to be in the

00:04:29,560 --> 00:04:33,580
mainline kernel or at least on a

00:04:31,270 --> 00:04:35,350
plausible path towards getting there the

00:04:33,580 --> 00:04:37,570
distributor is the time adopted this

00:04:35,350 --> 00:04:40,030
rule quite seriously and it made a big

00:04:37,570 --> 00:04:43,090
difference in terms of of the kernels

00:04:40,030 --> 00:04:44,950
that we shipped to our tour community we

00:04:43,090 --> 00:04:46,870
adopted distributed source code control

00:04:44,950 --> 00:04:48,550
in fact the truth of the matter is that

00:04:46,870 --> 00:04:51,280
we adopted any source code control at

00:04:48,550 --> 00:04:54,490
all which made a big difference it's

00:04:51,280 --> 00:04:56,110
hard to think back to 15 years ago when

00:04:54,490 --> 00:04:58,960
our patch management system was Lumas

00:04:56,110 --> 00:05:00,460
Torvalds is email inbox and that works

00:04:58,960 --> 00:05:04,720
just about as well as you might expect

00:05:00,460 --> 00:05:06,970
it to work then we adopted what is the

00:05:04,720 --> 00:05:08,320
current release model where instead of

00:05:06,970 --> 00:05:10,870
going two or three years between

00:05:08,320 --> 00:05:13,450
releases we went to about 9 or 10 weeks

00:05:10,870 --> 00:05:15,640
between releases getting code out to our

00:05:13,450 --> 00:05:18,340
users very quickly this reduced the

00:05:15,640 --> 00:05:20,020
pressure to to get changes into the

00:05:18,340 --> 00:05:22,060
kernel quickly before they're ready it

00:05:20,020 --> 00:05:24,130
reduced the the need to backport things

00:05:22,060 --> 00:05:25,510
and so on and really made the whole

00:05:24,130 --> 00:05:28,180
process run a whole lot more smoothly

00:05:25,510 --> 00:05:31,630
these changes and some others helped us

00:05:28,180 --> 00:05:33,669
to establish a model of development that

00:05:31,630 --> 00:05:36,490
we had been aiming at for quite some

00:05:33,669 --> 00:05:38,410
years I remember talking to two people

00:05:36,490 --> 00:05:40,780
way back in nineteen ninety eight about

00:05:38,410 --> 00:05:43,720
trying to do this where instead of

00:05:40,780 --> 00:05:45,100
having just linna's torvalds managing

00:05:43,720 --> 00:05:47,229
all the patches going to the kernel we

00:05:45,100 --> 00:05:48,910
set up a hierarchy we have a whole bunch

00:05:47,229 --> 00:05:51,610
of contributors out there contributing

00:05:48,910 --> 00:05:52,780
patches to a set of maintainer subsystem

00:05:51,610 --> 00:05:54,820
maintained errs these are people who are

00:05:52,780 --> 00:05:56,620
specialized in a particular part of the

00:05:54,820 --> 00:05:58,300
colonel who understand that who can

00:05:56,620 --> 00:06:00,550
review and judge those patches and

00:05:58,300 --> 00:06:02,350
incorporate them feed them up the chain

00:06:00,550 --> 00:06:04,450
possibly two other maintained errs and

00:06:02,350 --> 00:06:05,890
those finally get up to lose torvalds

00:06:04,450 --> 00:06:08,410
who can merge them into the main line

00:06:05,890 --> 00:06:10,720
without having to pay specific attention

00:06:08,410 --> 00:06:13,390
to every single patch going into the

00:06:10,720 --> 00:06:15,640
kernel this this mode of operation

00:06:13,390 --> 00:06:17,440
increased our scalability in a whole lot

00:06:15,640 --> 00:06:21,360
of ways it took a lot of the load off of

00:06:17,440 --> 00:06:24,040
lettuce of course which is good and it

00:06:21,360 --> 00:06:25,720
sets things up so these maintainer could

00:06:24,040 --> 00:06:28,000
work for the most part without stepping

00:06:25,720 --> 00:06:29,560
on each other's toes each could handle a

00:06:28,000 --> 00:06:31,840
piece of the problem and it allowed us

00:06:29,560 --> 00:06:34,090
to ramp up our patch flow in a very big

00:06:31,840 --> 00:06:35,370
way so what did all this do for us

00:06:34,090 --> 00:06:37,560
beyond that

00:06:35,370 --> 00:06:40,500
I showed you the release schedule before

00:06:37,560 --> 00:06:41,639
two to three years between kernels now

00:06:40,500 --> 00:06:43,669
we have something looks like this this

00:06:41,639 --> 00:06:46,290
is the release history for the last year

00:06:43,669 --> 00:06:47,850
so we do in fact now have Colonels

00:06:46,290 --> 00:06:50,910
coming out every nine or ten weeks

00:06:47,850 --> 00:06:54,389
pretty much like clockwork she's good

00:06:50,910 --> 00:06:56,100
the the change rate that we have now is

00:06:54,389 --> 00:06:59,130
something we could not have imagined

00:06:56,100 --> 00:07:01,080
back in the early two days where we have

00:06:59,130 --> 00:07:03,270
at least 12,000 changes going in each

00:07:01,080 --> 00:07:04,740
mainline kernel release often more the

00:07:03,270 --> 00:07:06,570
Florida 9 Colonel was the busiest

00:07:04,740 --> 00:07:08,550
development cycle in the history of the

00:07:06,570 --> 00:07:10,620
kernel development project with over

00:07:08,550 --> 00:07:14,490
16,000 change that's being merged over a

00:07:10,620 --> 00:07:17,280
period of 10 weeks so we have definitely

00:07:14,490 --> 00:07:19,979
scaled the process quite a bit as we've

00:07:17,280 --> 00:07:21,960
done this we're bringing in oh yes we

00:07:19,979 --> 00:07:23,760
had another way of looking at this is

00:07:21,960 --> 00:07:27,419
about 80,000 changes over the course of

00:07:23,760 --> 00:07:29,610
one year from about 4,000 developers the

00:07:27,419 --> 00:07:31,199
number of developers can be seen in this

00:07:29,610 --> 00:07:32,820
little plot here the upper line is the

00:07:31,199 --> 00:07:35,669
number of developers participating in

00:07:32,820 --> 00:07:38,210
every kernel development cycle so we're

00:07:35,669 --> 00:07:41,039
up to sometimes over 1,700 developers

00:07:38,210 --> 00:07:42,840
contributing to a single development

00:07:41,039 --> 00:07:44,669
cycle of the Linux kernel lots of people

00:07:42,840 --> 00:07:47,220
the bottom line here are the one that

00:07:44,669 --> 00:07:48,780
looks relatively flat is the number of

00:07:47,220 --> 00:07:50,820
first-time developers the number of

00:07:48,780 --> 00:07:52,710
people we see in each development cycle

00:07:50,820 --> 00:07:56,010
who've never contributed to the Linux

00:07:52,710 --> 00:07:57,300
kernel before and that number stays

00:07:56,010 --> 00:07:58,860
about what it is it seems to be a

00:07:57,300 --> 00:08:01,380
fundamental constant of Linux

00:07:58,860 --> 00:08:03,210
development that every development cycle

00:08:01,380 --> 00:08:05,849
features the work of about 200 new

00:08:03,210 --> 00:08:08,010
developers it doesn't seem to matter how

00:08:05,849 --> 00:08:10,650
busy it is how long it takes it we get

00:08:08,010 --> 00:08:12,270
about 200 new people each time around so

00:08:10,650 --> 00:08:14,090
to my mind this is a picture of a

00:08:12,270 --> 00:08:15,870
relatively healthy development community

00:08:14,090 --> 00:08:18,120
right we have a lot of people

00:08:15,870 --> 00:08:19,849
participating we have more people coming

00:08:18,120 --> 00:08:21,930
in we have a nice flow of incoming

00:08:19,849 --> 00:08:23,599
developers which you need to keep your

00:08:21,930 --> 00:08:26,340
project healthy this is all good stuff

00:08:23,599 --> 00:08:28,349
things are going very well partly as a

00:08:26,340 --> 00:08:30,539
result of this and other things the

00:08:28,349 --> 00:08:32,580
Linux kernel is everywhere right I don't

00:08:30,539 --> 00:08:35,550
have to tell you all this about this

00:08:32,580 --> 00:08:37,110
we've been wildly successful so one

00:08:35,550 --> 00:08:38,479
might summarize this is saying we seem

00:08:37,110 --> 00:08:42,959
to be on a roll we're doing pretty well

00:08:38,479 --> 00:08:45,120
Linux is doing great so why is it that i

00:08:42,959 --> 00:08:47,040
say i'm here with some potentially bad

00:08:45,120 --> 00:08:47,900
news why is it that i'm worried well

00:08:47,040 --> 00:08:50,050
that's letting

00:08:47,900 --> 00:08:53,030
spend the rest of my time talking about

00:08:50,050 --> 00:08:58,400
so let's go back to this picture of of

00:08:53,030 --> 00:09:01,070
our development model we tend to focus

00:08:58,400 --> 00:09:03,710
an awful lot on the developer side of

00:09:01,070 --> 00:09:05,360
the picture here what we see on the left

00:09:03,710 --> 00:09:06,680
hand side of the picture I'm sorry yeah

00:09:05,360 --> 00:09:09,740
the right hand left hand side of the

00:09:06,680 --> 00:09:11,690
picture we work hard to bring more

00:09:09,740 --> 00:09:13,040
developers into our community to recruit

00:09:11,690 --> 00:09:14,900
people to teach them how to work with

00:09:13,040 --> 00:09:16,100
our process and so on in fact there's a

00:09:14,900 --> 00:09:18,320
lot of stuff happening at this very

00:09:16,100 --> 00:09:19,640
event aimed doing just that all right

00:09:18,320 --> 00:09:20,930
Luminara has done some very good work

00:09:19,640 --> 00:09:22,910
and bringing developers into our

00:09:20,930 --> 00:09:24,950
community and this is good we've needed

00:09:22,910 --> 00:09:28,010
this we need to continue to do it we

00:09:24,950 --> 00:09:29,630
need to recruit developers I think that

00:09:28,010 --> 00:09:31,280
we have paid less attention to the

00:09:29,630 --> 00:09:33,500
middle piece of the puddles and the

00:09:31,280 --> 00:09:36,380
maintainer ship aspect of how the Linux

00:09:33,500 --> 00:09:38,840
kernel works and I think that that is

00:09:36,380 --> 00:09:42,050
where we are likely to see scalability

00:09:38,840 --> 00:09:44,600
problems showing up in the future so all

00:09:42,050 --> 00:09:46,190
of this came to mind it's me a couple

00:09:44,600 --> 00:09:49,880
months ago I was at another conference

00:09:46,190 --> 00:09:51,260
in Australia wondering just what was I

00:09:49,880 --> 00:09:54,350
was going to say to this crowd in

00:09:51,260 --> 00:09:56,810
budapest in March and I saw a talk by a

00:09:54,350 --> 00:09:58,220
lady named Nadia egg ball she was

00:09:56,810 --> 00:10:00,770
working in the the finance industry

00:09:58,220 --> 00:10:02,930
actually not in the in the technology

00:10:00,770 --> 00:10:04,970
industry at all and she put together

00:10:02,930 --> 00:10:08,960
this lengthy report she called roads and

00:10:04,970 --> 00:10:11,810
bridges it was all about all the

00:10:08,960 --> 00:10:13,790
open-source software that though that

00:10:11,810 --> 00:10:15,860
our economy depends on in general and

00:10:13,790 --> 00:10:17,750
the rather parlous state of maintainer

00:10:15,860 --> 00:10:19,130
ship with much of that software she

00:10:17,750 --> 00:10:21,470
wasn't really talking about the colonel

00:10:19,130 --> 00:10:25,610
in fact pretty much avoided was talking

00:10:21,470 --> 00:10:27,050
about the much wider ecosystem and the

00:10:25,610 --> 00:10:28,460
fact that we're not really paying much

00:10:27,050 --> 00:10:31,430
attention to the needs of our main

00:10:28,460 --> 00:10:33,200
teeners she was focused to a great

00:10:31,430 --> 00:10:35,450
extent on maintainer is working on their

00:10:33,200 --> 00:10:36,830
own time and thus being unable to keep

00:10:35,450 --> 00:10:38,750
up with things and that was leading to

00:10:36,830 --> 00:10:40,730
things like shell-shocked and heart

00:10:38,750 --> 00:10:44,240
bleed and other famous problems like

00:10:40,730 --> 00:10:45,950
that we're we're important software is

00:10:44,240 --> 00:10:47,600
simply being neglected but it goes

00:10:45,950 --> 00:10:49,190
beyond it's a good report i recommend

00:10:47,600 --> 00:10:50,330
searching it out and reading it if

00:10:49,190 --> 00:10:53,080
you're interested in this kind of stuff

00:10:50,330 --> 00:10:55,060
at all so

00:10:53,080 --> 00:10:59,520
as I said much of her focus was on

00:10:55,060 --> 00:11:01,540
support for means he knows this is the

00:10:59,520 --> 00:11:03,250
corporate support for subsystem

00:11:01,540 --> 00:11:04,930
maintainer Xin the Linux kernel over the

00:11:03,250 --> 00:11:07,270
course of last year these numbers are

00:11:04,930 --> 00:11:10,000
approximate but it shows that it shows a

00:11:07,270 --> 00:11:11,380
few things vs. shows that our support

00:11:10,000 --> 00:11:14,020
for maintainer zyzz relatively

00:11:11,380 --> 00:11:15,760
concentrated we have typically two

00:11:14,020 --> 00:11:18,220
hundred or so companies supporting work

00:11:15,760 --> 00:11:19,600
in each development cycle the number of

00:11:18,220 --> 00:11:21,160
companies that are willing to support

00:11:19,600 --> 00:11:23,650
substance and maintenance is quite a bit

00:11:21,160 --> 00:11:25,870
smaller we have a lot of companies who

00:11:23,650 --> 00:11:28,510
are happy to support someone to make

00:11:25,870 --> 00:11:30,550
their hardware work fewer her interested

00:11:28,510 --> 00:11:32,770
in making the the process as a whole

00:11:30,550 --> 00:11:34,420
work but it's enough one of the things

00:11:32,770 --> 00:11:36,670
that you can see there is about four

00:11:34,420 --> 00:11:38,110
percent of our maintainer zaur subsystem

00:11:36,670 --> 00:11:40,390
maintained errs are working on our own

00:11:38,110 --> 00:11:43,120
time which is pretty much in the noise

00:11:40,390 --> 00:11:45,310
so we're good in this sense we have good

00:11:43,120 --> 00:11:47,680
support for for our maintained errs if

00:11:45,310 --> 00:11:50,920
you look at the support for the core

00:11:47,680 --> 00:11:52,510
kernel it becomes more concentrated as

00:11:50,920 --> 00:11:54,940
there's fewer companies willing to work

00:11:52,510 --> 00:11:57,220
in that area to support the core that

00:11:54,940 --> 00:11:59,470
everybody depends on but once again that

00:11:57,220 --> 00:12:01,480
support is there so support for

00:11:59,470 --> 00:12:04,150
maintainer zaz such is not our problem

00:12:01,480 --> 00:12:06,700
but we do see even here the beginnings

00:12:04,150 --> 00:12:09,220
of one aspect of it which is there there

00:12:06,700 --> 00:12:11,260
are parts of this that that nobody is

00:12:09,220 --> 00:12:13,930
willing to pay for a lot of certain

00:12:11,260 --> 00:12:15,750
parts of the common code that that

00:12:13,930 --> 00:12:17,950
companies are less willing to support

00:12:15,750 --> 00:12:20,200
this includes a certain amount of core

00:12:17,950 --> 00:12:23,350
kernel work if you just think about

00:12:20,200 --> 00:12:25,690
things like oh I don't know fixing the

00:12:23,350 --> 00:12:28,300
CPU hot-plug system that sort of thing

00:12:25,690 --> 00:12:30,460
worked at the the developers try to get

00:12:28,300 --> 00:12:32,860
support for four years and is only now

00:12:30,460 --> 00:12:34,980
succeeded in doing that documentation of

00:12:32,860 --> 00:12:38,200
course is a bit of a sore point of mine

00:12:34,980 --> 00:12:39,790
is often not been supported how many of

00:12:38,200 --> 00:12:44,230
you like the Colonel's configuration

00:12:39,790 --> 00:12:48,670
system Wow we have a couple masochists

00:12:44,230 --> 00:12:50,920
in the audience our configuration system

00:12:48,670 --> 00:12:54,880
is widely regarded as being painful and

00:12:50,920 --> 00:12:56,790
a mess and so on but nobody yeah it's

00:12:54,880 --> 00:12:59,080
just barely supported and nobody is

00:12:56,790 --> 00:13:01,110
really even thinking about replacing it

00:12:59,080 --> 00:13:02,980
with something that would work better

00:13:01,110 --> 00:13:04,420
which is good because the last time

00:13:02,980 --> 00:13:06,750
somebody did try to replace it it did

00:13:04,420 --> 00:13:06,750
not end well

00:13:06,790 --> 00:13:10,610
things like D bloating it's actually

00:13:08,930 --> 00:13:12,620
glad to hear from nico these working on

00:13:10,610 --> 00:13:14,030
some tiny fication efforts but in

00:13:12,620 --> 00:13:16,040
general that's that's not something that

00:13:14,030 --> 00:13:18,200
we support we see supported it is

00:13:16,040 --> 00:13:19,940
actually important for scaling Linux

00:13:18,200 --> 00:13:21,860
down to the smallest of systems which i

00:13:19,940 --> 00:13:24,710
think is still something that we want to

00:13:21,860 --> 00:13:25,940
work on to do and one that I want to

00:13:24,710 --> 00:13:29,540
talk about just a little bit further

00:13:25,940 --> 00:13:31,460
which is security because the colonel is

00:13:29,540 --> 00:13:33,560
at the core of all of our systems out

00:13:31,460 --> 00:13:35,780
there if the colonel is not secure our

00:13:33,560 --> 00:13:37,400
systems are not secure and we see over

00:13:35,780 --> 00:13:39,860
and over again that security actually

00:13:37,400 --> 00:13:42,140
does matter to our users at pretty much

00:13:39,860 --> 00:13:43,790
every level so given that you would

00:13:42,140 --> 00:13:46,430
think that we would have say a security

00:13:43,790 --> 00:13:48,260
maintainer but we don't we have a

00:13:46,430 --> 00:13:51,260
maintainer who's in charge of keeping

00:13:48,260 --> 00:13:53,450
selinux working and so on we have nobody

00:13:51,260 --> 00:13:56,630
whose job it is to make sure that the

00:13:53,450 --> 00:13:58,870
kernel itself is secure nobody right we

00:13:56,630 --> 00:14:02,120
have no security officer we have no

00:13:58,870 --> 00:14:03,530
nobody who's watching for this and as

00:14:02,120 --> 00:14:06,890
part of this we have no training no

00:14:03,530 --> 00:14:09,050
documentation we have known we have

00:14:06,890 --> 00:14:11,210
nothing for a developer who wants to

00:14:09,050 --> 00:14:12,890
learn how to write kernel code that is

00:14:11,210 --> 00:14:14,870
secure it will not prevail nur bilities

00:14:12,890 --> 00:14:16,070
into the kernel you would think that we

00:14:14,870 --> 00:14:17,480
would have this because there are a lot

00:14:16,070 --> 00:14:18,950
of things that are unique to kernel

00:14:17,480 --> 00:14:21,350
development in terms of security a lot

00:14:18,950 --> 00:14:23,600
of pitfalls there that we don't have

00:14:21,350 --> 00:14:25,880
anywhere else but we have nothing for

00:14:23,600 --> 00:14:27,380
people who want to learn about that and

00:14:25,880 --> 00:14:29,660
I think this is a bit of a short coming

00:14:27,380 --> 00:14:31,370
this is an area where our maintainer

00:14:29,660 --> 00:14:32,990
model has not really kept up with what

00:14:31,370 --> 00:14:35,750
we need to do and there are consequences

00:14:32,990 --> 00:14:37,970
of this that are obvious I would like to

00:14:35,750 --> 00:14:39,860
say that this is the list of CVE numbers

00:14:37,970 --> 00:14:42,500
of known vulnerabilities in the kernel

00:14:39,860 --> 00:14:43,820
for 2016 but the truth of the matter is

00:14:42,500 --> 00:14:47,510
I made this particular slide in

00:14:43,820 --> 00:14:49,010
September and never saw the point in

00:14:47,510 --> 00:14:50,720
filling out the rest because well I

00:14:49,010 --> 00:14:52,910
didn't have room and it gets the point

00:14:50,720 --> 00:14:56,360
across the actual number of cvd entries

00:14:52,910 --> 00:14:59,360
is probably about double this 4 2016 and

00:14:56,360 --> 00:15:00,890
we haven't found them all yet now kernel

00:14:59,360 --> 00:15:02,930
development due to his nature is always

00:15:00,890 --> 00:15:06,410
going to have more vulnerabilities and

00:15:02,930 --> 00:15:09,320
than other projects just because of our

00:15:06,410 --> 00:15:12,080
rate of change and because the the

00:15:09,320 --> 00:15:14,030
nature of the Colonel's job makes it so

00:15:12,080 --> 00:15:15,980
that things are just bugs and other

00:15:14,030 --> 00:15:18,020
systems become vulnerabilities in the

00:15:15,980 --> 00:15:19,040
colonel but still this is a lot this is

00:15:18,020 --> 00:15:20,420
a lot of holes

00:15:19,040 --> 00:15:23,329
this is not something that we should

00:15:20,420 --> 00:15:25,820
really be having in in a core component

00:15:23,329 --> 00:15:27,649
of our system especially in this day and

00:15:25,820 --> 00:15:30,019
age where we're becoming increasingly

00:15:27,649 --> 00:15:32,480
concerned about security yeah well the

00:15:30,019 --> 00:15:34,550
sorts of problems is evidenced by this

00:15:32,480 --> 00:15:36,829
little patch here this is a patch to

00:15:34,550 --> 00:15:38,690
this TCP protocol code in the core

00:15:36,829 --> 00:15:40,810
networking subsystem it fixes a

00:15:38,690 --> 00:15:43,399
trivially exploitable use-after-free

00:15:40,810 --> 00:15:46,040
vulnerability if you can run code on

00:15:43,399 --> 00:15:47,420
system you can get root with this

00:15:46,040 --> 00:15:49,940
particular vulnerability which frees

00:15:47,420 --> 00:15:56,029
memory that is still being used okay

00:15:49,940 --> 00:15:57,790
this problem was fixed in 2007 this is a

00:15:56,029 --> 00:16:01,240
patch for a trivial use-after-free

00:15:57,790 --> 00:16:05,000
vulnerability in the DC CP protocol code

00:16:01,240 --> 00:16:06,440
ok now if you look at this it looks like

00:16:05,000 --> 00:16:08,180
a very similar patch a very similar

00:16:06,440 --> 00:16:11,329
vulnerability and in fact if you look

00:16:08,180 --> 00:16:14,089
even closer see that the original patch

00:16:11,329 --> 00:16:16,009
was in tcp receive state process the

00:16:14,089 --> 00:16:18,800
other one was in a function called DC CP

00:16:16,009 --> 00:16:21,139
receive state process one was clearly

00:16:18,800 --> 00:16:22,550
cut and pasted from the other ok in fact

00:16:21,139 --> 00:16:24,290
it makes sense if you're implementing a

00:16:22,550 --> 00:16:26,300
new protocol you start with working

00:16:24,290 --> 00:16:28,579
protocol code and then change it to work

00:16:26,300 --> 00:16:30,769
the way that you need it to work this

00:16:28,579 --> 00:16:32,420
latter trivial used after free

00:16:30,769 --> 00:16:36,829
vulnerability was fixed about two weeks

00:16:32,420 --> 00:16:41,540
ago hey we had the first one that

00:16:36,829 --> 00:16:44,180
exhibited a pattern of a way that things

00:16:41,540 --> 00:16:46,069
can go wrong we had code that was copied

00:16:44,180 --> 00:16:48,889
and pasted from the vulnerable code and

00:16:46,069 --> 00:16:50,089
nobody went looked at that copied and

00:16:48,889 --> 00:16:52,399
pasted code or looked for another

00:16:50,089 --> 00:16:55,069
occurrence of that pattern to see if we

00:16:52,399 --> 00:16:58,670
had other vulnerabilities like it and so

00:16:55,069 --> 00:17:01,040
as a result we kept a a tribute

00:16:58,670 --> 00:17:03,439
exploitable vulnerability in the kernel

00:17:01,040 --> 00:17:08,510
for 10 years longer than we needed to

00:17:03,439 --> 00:17:09,860
keep it there we have nobody looking for

00:17:08,510 --> 00:17:11,540
patterns like this and I believe this

00:17:09,860 --> 00:17:13,069
particular pattern probably exists in

00:17:11,540 --> 00:17:15,980
other places in the networking code it's

00:17:13,069 --> 00:17:18,439
a result of of a questionable API choice

00:17:15,980 --> 00:17:21,110
it was made over 20 years ago that we've

00:17:18,439 --> 00:17:22,730
never fixed the I wish that I could say

00:17:21,110 --> 00:17:26,179
I thought that the attacker community

00:17:22,730 --> 00:17:27,530
was sophitia Lee under-resourced in

00:17:26,179 --> 00:17:29,240
terms of looking for things like this

00:17:27,530 --> 00:17:31,110
but I don't believe that for a second I

00:17:29,240 --> 00:17:32,280
would not be surprised to learn this

00:17:31,110 --> 00:17:35,520
vulnerability had been known for years

00:17:32,280 --> 00:17:37,410
in the attacker community so we have a

00:17:35,520 --> 00:17:39,450
lot of this kind of stuff that nobody is

00:17:37,410 --> 00:17:40,890
really looking for it shows up at all

00:17:39,450 --> 00:17:42,299
levels this is just an article I

00:17:40,890 --> 00:17:43,830
stumbled across as I was putting

00:17:42,299 --> 00:17:45,059
together this talk talking about

00:17:43,830 --> 00:17:49,230
vulnerabilities and automotive

00:17:45,059 --> 00:17:51,030
applications in in cars and such these

00:17:49,230 --> 00:17:52,559
vulnerabilities get out into places

00:17:51,030 --> 00:17:56,179
where they really matter where they

00:17:52,559 --> 00:17:58,230
really affect our users so to my mind

00:17:56,179 --> 00:18:00,120
security show is a big hole in our

00:17:58,230 --> 00:18:02,910
maintainer model this is a place where

00:18:00,120 --> 00:18:05,460
we haven't really scaled properly thus

00:18:02,910 --> 00:18:07,590
far and there are consequences that come

00:18:05,460 --> 00:18:09,330
from it and as the community gets bigger

00:18:07,590 --> 00:18:12,120
as the colonel gets bigger and more

00:18:09,330 --> 00:18:14,220
complex this is going to continue to

00:18:12,120 --> 00:18:16,590
bite us harder unless we find a way to

00:18:14,220 --> 00:18:18,750
do something about it and to support

00:18:16,590 --> 00:18:22,110
parts of the kernel that are not in my

00:18:18,750 --> 00:18:23,309
mind sufficiently well supported so get

00:18:22,110 --> 00:18:25,470
any other things but I want to step back

00:18:23,309 --> 00:18:27,179
for a minute and think a little bit

00:18:25,470 --> 00:18:31,110
about what the maintainer model is in

00:18:27,179 --> 00:18:33,720
general and how we approach it so we can

00:18:31,110 --> 00:18:35,730
start with a simple question if somebody

00:18:33,720 --> 00:18:37,910
wants to become a subsystem maintainer

00:18:35,730 --> 00:18:41,730
what do they do how do they get there

00:18:37,910 --> 00:18:44,730
well we've never defined that and so end

00:18:41,730 --> 00:18:46,140
up resorting to this Neal Brown being

00:18:44,730 --> 00:18:48,390
one of the most quotable of all kernel

00:18:46,140 --> 00:18:49,980
developers said the way that you become

00:18:48,390 --> 00:18:53,160
a maintainer is by failing your first

00:18:49,980 --> 00:18:54,690
test because a maintainer job is to say

00:18:53,160 --> 00:18:58,169
no to things to keep things out of the

00:18:54,690 --> 00:18:59,790
kernel that don't belong there but if

00:18:58,169 --> 00:19:01,650
the way you become maintainer is by

00:18:59,790 --> 00:19:04,910
failing to say no to the maintainer role

00:19:01,650 --> 00:19:07,650
when it becomes thrust upon you and so

00:19:04,910 --> 00:19:10,590
by kind of by definition are maintained

00:19:07,650 --> 00:19:13,200
errs are not qualified for the job we're

00:19:10,590 --> 00:19:14,790
seriously if we have an ambitious

00:19:13,200 --> 00:19:16,770
developer who wants to take on this role

00:19:14,790 --> 00:19:20,490
we can't tell them what to do we don't

00:19:16,770 --> 00:19:23,130
there's no real processor way for for

00:19:20,490 --> 00:19:24,600
this to come about and it's tied to the

00:19:23,130 --> 00:19:27,450
related question of how do you stop

00:19:24,600 --> 00:19:29,970
becoming a maintainer so Neal again when

00:19:27,450 --> 00:19:32,220
he got tired of it saying his approach

00:19:29,970 --> 00:19:34,290
was to try to appear to become and be an

00:19:32,220 --> 00:19:36,299
incompetent maintainer so that somebody

00:19:34,290 --> 00:19:40,770
would offer to take over the job as he

00:19:36,299 --> 00:19:42,809
put it it isn't working yet anybody who

00:19:40,770 --> 00:19:44,120
has watched the process for a period of

00:19:42,809 --> 00:19:46,250
time knows

00:19:44,120 --> 00:19:48,380
that this generally does not work that

00:19:46,250 --> 00:19:50,480
it takes a very long time for somebody

00:19:48,380 --> 00:19:52,870
who is not doing the maintainer job well

00:19:50,480 --> 00:19:55,580
to be sort of eased out of that role

00:19:52,870 --> 00:19:58,100
mostly because people understand that is

00:19:55,580 --> 00:19:59,810
a difficult stressful role and the only

00:19:58,100 --> 00:20:01,310
way to eat somebody out is usually to

00:19:59,810 --> 00:20:04,010
offer to take it over yourself and

00:20:01,310 --> 00:20:05,630
people often don't want to do that so

00:20:04,010 --> 00:20:07,640
when Neal ended up doing was simply

00:20:05,630 --> 00:20:10,010
leaving and leaving a vacuum there and

00:20:07,640 --> 00:20:11,720
leaving his subsystem unmaintained for

00:20:10,010 --> 00:20:15,230
some time because there was really

00:20:11,720 --> 00:20:16,820
nothing else that he could do this of

00:20:15,230 --> 00:20:18,140
course is something that subsystem means

00:20:16,820 --> 00:20:19,970
he knows are generally unwilling to do

00:20:18,140 --> 00:20:21,830
because this is code they've been

00:20:19,970 --> 00:20:23,480
carrying for four years and they don't

00:20:21,830 --> 00:20:26,960
want to leave it on maintained like that

00:20:23,480 --> 00:20:30,800
and this this leads to sell kinds of

00:20:26,960 --> 00:20:32,630
trouble a classic example of my mind is

00:20:30,800 --> 00:20:35,000
the wireless networking subsystem

00:20:32,630 --> 00:20:37,640
wireless networking drivers 10 years or

00:20:35,000 --> 00:20:40,130
so ago our wireless drivers were in a

00:20:37,640 --> 00:20:41,900
pretty poor condition we had a bunch of

00:20:40,130 --> 00:20:44,690
drivers with no real framework they

00:20:41,900 --> 00:20:47,030
didn't always work all that well we had

00:20:44,690 --> 00:20:49,490
a maintainer he came in and oversaw the

00:20:47,030 --> 00:20:51,860
conversion to a proper framework and

00:20:49,490 --> 00:20:54,980
what was now pretty good weld running

00:20:51,860 --> 00:20:56,660
wireless networking subsystem but over

00:20:54,980 --> 00:20:58,550
the course of this he really burned

00:20:56,660 --> 00:21:00,800
himself out and got very tired of it and

00:20:58,550 --> 00:21:02,510
let it be known that he thought he was

00:21:00,800 --> 00:21:05,150
done he had done his job and he would

00:21:02,510 --> 00:21:07,670
like somebody else to take this over it

00:21:05,150 --> 00:21:09,050
took about two years to find somebody

00:21:07,670 --> 00:21:10,850
else who was willing to take on that

00:21:09,050 --> 00:21:12,380
role during which time he had to

00:21:10,850 --> 00:21:14,290
continue to do this even though he

00:21:12,380 --> 00:21:16,700
really didn't want to anymore and

00:21:14,290 --> 00:21:18,470
wireless networking development suffered

00:21:16,700 --> 00:21:20,030
as a result of that this is something

00:21:18,470 --> 00:21:21,350
that happens a lot we tend to run our

00:21:20,030 --> 00:21:25,070
main teeners into the ground and we

00:21:21,350 --> 00:21:27,020
don't have relief for them when when the

00:21:25,070 --> 00:21:29,060
time comes for them to move on and I

00:21:27,020 --> 00:21:30,590
think that that hurts us and I think it

00:21:29,060 --> 00:21:34,460
will continue to hurt us as we try to

00:21:30,590 --> 00:21:35,720
grow our development community once you

00:21:34,460 --> 00:21:38,570
become a maintainer what's your

00:21:35,720 --> 00:21:40,940
authority I found an interesting quote

00:21:38,570 --> 00:21:42,920
giving one view of this a fairly typical

00:21:40,940 --> 00:21:44,990
view which is greg kroah-hartman saying

00:21:42,920 --> 00:21:46,400
the colonel maintainer ship is not a no

00:21:44,990 --> 00:21:47,900
one else can never touch the style of

00:21:46,400 --> 00:21:49,340
development Colonel maintained errs do

00:21:47,900 --> 00:21:52,130
not have absolute control over their

00:21:49,340 --> 00:21:53,750
particular subsystem and as I said this

00:21:52,130 --> 00:21:55,970
is how I think a lot of us have viewed

00:21:53,750 --> 00:21:59,270
the the task for a long time

00:21:55,970 --> 00:22:01,610
but not everybody sees it that way and

00:21:59,270 --> 00:22:03,350
so we had a fairly well-known developer

00:22:01,610 --> 00:22:05,780
in this community saying that it's his

00:22:03,350 --> 00:22:08,120
prerogative to say no to anything arch /

00:22:05,780 --> 00:22:10,090
arm and he really doesn't have to give

00:22:08,120 --> 00:22:13,670
his reasons for it if he doesn't want to

00:22:10,090 --> 00:22:16,220
now one might argue this particular

00:22:13,670 --> 00:22:17,690
maintainer is an outlier but the simple

00:22:16,220 --> 00:22:19,730
truth of the matter is death not

00:22:17,690 --> 00:22:23,570
entirely true there are awful lot of

00:22:19,730 --> 00:22:25,340
maintainer is to feel who maintained a

00:22:23,570 --> 00:22:28,070
pretty firm grip over there subsystem

00:22:25,340 --> 00:22:31,220
and it's their turf and they want to

00:22:28,070 --> 00:22:33,050
hold on to it again in Australia I was

00:22:31,220 --> 00:22:35,780
talking to a fairly well-known developer

00:22:33,050 --> 00:22:37,190
familiar to many of you and he described

00:22:35,780 --> 00:22:39,740
the current state of the colonel

00:22:37,190 --> 00:22:43,100
community as a bunch of little fiefdoms

00:22:39,740 --> 00:22:45,020
a lot of people running their own little

00:22:43,100 --> 00:22:48,200
part of the colonel running at their own

00:22:45,020 --> 00:22:53,120
way for their own purposes and not

00:22:48,200 --> 00:22:55,220
always seeing themselves as part of a

00:22:53,120 --> 00:22:57,590
bigger hole we see this in a lot of

00:22:55,220 --> 00:23:01,180
different ways from people saying you

00:22:57,590 --> 00:23:03,260
cannot touch my subsystem at all to

00:23:01,180 --> 00:23:05,990
Colonel subsystems they have their own

00:23:03,260 --> 00:23:08,360
rules for comment styles there's a

00:23:05,990 --> 00:23:10,490
particular large subsystem that you

00:23:08,360 --> 00:23:12,770
cannot get a patch into if you have not

00:23:10,490 --> 00:23:15,590
arranged your variable decorations in

00:23:12,770 --> 00:23:18,740
Reverse Christmas tree order okay look

00:23:15,590 --> 00:23:20,210
at up if you don't know that is there

00:23:18,740 --> 00:23:23,300
are people who have very firm rules

00:23:20,210 --> 00:23:26,200
about how you do subject lines there are

00:23:23,300 --> 00:23:29,090
different rules about how you say handle

00:23:26,200 --> 00:23:30,380
stable patches that sort of thing every

00:23:29,090 --> 00:23:31,490
subsystems a little different every

00:23:30,380 --> 00:23:33,170
maintainer is a little different it

00:23:31,490 --> 00:23:35,300
makes it hard for developers to know how

00:23:33,170 --> 00:23:37,340
to contribute to specific subsystem

00:23:35,300 --> 00:23:39,370
without getting into trouble and I think

00:23:37,340 --> 00:23:41,720
that once again as our community grows

00:23:39,370 --> 00:23:44,060
the more that we have little fiefdoms

00:23:41,720 --> 00:23:46,310
the harder is going to be to maintain

00:23:44,060 --> 00:23:48,080
the kernel as a single coherent project

00:23:46,310 --> 00:23:52,010
and I think that that's that's a problem

00:23:48,080 --> 00:23:53,090
that we need to be facing related to

00:23:52,010 --> 00:23:54,920
this what are maintained errs

00:23:53,090 --> 00:23:56,900
responsibilities what does the

00:23:54,920 --> 00:23:59,000
maintainer supposed to do Greg again

00:23:56,900 --> 00:24:00,560
here exhibited one aspect of it when you

00:23:59,000 --> 00:24:02,600
said I can't take patches without a

00:24:00,560 --> 00:24:04,940
change lock text and neither should any

00:24:02,600 --> 00:24:07,250
other maintainer this reflects a a

00:24:04,940 --> 00:24:08,370
fairly common expectation of colonel

00:24:07,250 --> 00:24:10,110
maintain errs

00:24:08,370 --> 00:24:12,210
we want good changelogs for our kernel

00:24:10,110 --> 00:24:14,010
patches and so if a patch does not meet

00:24:12,210 --> 00:24:18,870
that standard the maintainer should not

00:24:14,010 --> 00:24:20,610
accept it but as we see we don't have a

00:24:18,870 --> 00:24:22,770
consensus even on this because there are

00:24:20,610 --> 00:24:26,190
over 500 batches merged in the fourth at

00:24:22,770 --> 00:24:27,930
10 with no changelog at all so we don't

00:24:26,190 --> 00:24:30,540
really have a sense for what that rule

00:24:27,930 --> 00:24:32,220
is we've never really codify damn ain't

00:24:30,540 --> 00:24:33,780
a nurs responsibility is in general

00:24:32,220 --> 00:24:35,220
there are a lot of things that we think

00:24:33,780 --> 00:24:37,140
that a maintainer should be doing

00:24:35,220 --> 00:24:40,260
starting things like reviewing code

00:24:37,140 --> 00:24:41,790
mentoring developers responding quickly

00:24:40,260 --> 00:24:44,220
the patches telling developers with

00:24:41,790 --> 00:24:46,440
status is ensuring the provenance of our

00:24:44,220 --> 00:24:48,090
code we don't want people contributing

00:24:46,440 --> 00:24:50,280
code to the colonel that is not

00:24:48,090 --> 00:24:52,110
legitimately contributed sort of thing

00:24:50,280 --> 00:24:54,690
dealing with regressions getting fixes

00:24:52,110 --> 00:24:56,130
in the stable representing the subsystem

00:24:54,690 --> 00:24:57,690
to the world the companies that are

00:24:56,130 --> 00:24:59,490
involved with it so on is definitely a

00:24:57,690 --> 00:25:01,710
part of the main teeners job and

00:24:59,490 --> 00:25:03,179
resisting pressure from companies to get

00:25:01,710 --> 00:25:04,350
stuff in which is something summoning

00:25:03,179 --> 00:25:08,550
teeners have to deal with a fair amount

00:25:04,350 --> 00:25:10,020
of and of course the one unavoidable

00:25:08,550 --> 00:25:12,540
task of any colonel maintainer which is

00:25:10,020 --> 00:25:15,030
to keep bolinas happy and this is often

00:25:12,540 --> 00:25:17,100
where maintain errs tend to to go wrong

00:25:15,030 --> 00:25:18,540
especially when they're new because we

00:25:17,100 --> 00:25:22,590
haven't really documented the rules for

00:25:18,540 --> 00:25:25,410
keeping this happy either and so if you

00:25:22,590 --> 00:25:27,300
if you fail there you hear about it and

00:25:25,410 --> 00:25:30,059
this is tends to be not a good

00:25:27,300 --> 00:25:33,720
experience for for people trying to move

00:25:30,059 --> 00:25:35,760
into the maintainer role even a

00:25:33,720 --> 00:25:37,200
mechanical level you think about the

00:25:35,760 --> 00:25:39,120
management of patches which is a big

00:25:37,200 --> 00:25:40,640
part of the maintainer job making sure

00:25:39,120 --> 00:25:42,780
they don't fall through the cracks

00:25:40,640 --> 00:25:44,520
maintaining your git repository this is

00:25:42,780 --> 00:25:48,000
another place where we're maintainer is

00:25:44,520 --> 00:25:49,620
often go wrong early on is failing to

00:25:48,000 --> 00:25:52,610
manage the repository in the right way

00:25:49,620 --> 00:25:54,750
and then you definitely hear from this

00:25:52,610 --> 00:25:56,580
informing contributor is all this sort

00:25:54,750 --> 00:25:58,620
of stuff is all a bunch of low-level

00:25:56,580 --> 00:26:01,020
make mechanics that every maintainer has

00:25:58,620 --> 00:26:03,890
to do each one of us has our own scripts

00:26:01,020 --> 00:26:06,630
our own practices our own policies and

00:26:03,890 --> 00:26:09,809
there's the not much cooperation that

00:26:06,630 --> 00:26:11,610
much common structure there and again it

00:26:09,809 --> 00:26:14,880
makes it hard to keep the kernel as a

00:26:11,610 --> 00:26:19,170
coherent project and I think will become

00:26:14,880 --> 00:26:20,300
more so as as we try to grow and while

00:26:19,170 --> 00:26:23,450
I'm on the

00:26:20,300 --> 00:26:25,790
topic of patch management we have over

00:26:23,450 --> 00:26:28,340
the years developed a pretty well tuned

00:26:25,790 --> 00:26:30,920
process around mailing list and email

00:26:28,340 --> 00:26:32,600
and get and all that sort of stuff and

00:26:30,920 --> 00:26:35,150
it works really well for us it is scaled

00:26:32,600 --> 00:26:37,070
very well but at some point we are going

00:26:35,150 --> 00:26:38,570
to have to face the fact that kids these

00:26:37,070 --> 00:26:42,230
days look at things a little bit

00:26:38,570 --> 00:26:44,390
differently and too many of the people

00:26:42,230 --> 00:26:47,120
who are coming into their own as

00:26:44,390 --> 00:26:48,800
developers things like email or how you

00:26:47,120 --> 00:26:51,940
get a message to your grandparents and

00:26:48,800 --> 00:26:59,480
they're they're just appalled at how

00:26:51,940 --> 00:27:01,460
primitive our process looks so the

00:26:59,480 --> 00:27:02,690
problem of course is that the way that a

00:27:01,460 --> 00:27:04,460
lot of these developers like to do

00:27:02,690 --> 00:27:07,190
things with github pull requests and so

00:27:04,460 --> 00:27:10,640
on doesn't scale to our volume of work

00:27:07,190 --> 00:27:12,710
at all so the tools that are out there

00:27:10,640 --> 00:27:14,840
the new tools don't really work for us

00:27:12,710 --> 00:27:16,760
but at some point I think we're going to

00:27:14,840 --> 00:27:18,440
have to face this we've we've had a

00:27:16,760 --> 00:27:19,880
number of scalability issues that have

00:27:18,440 --> 00:27:21,920
involved the development of new tools

00:27:19,880 --> 00:27:23,630
over the years some of us like the

00:27:21,920 --> 00:27:25,550
development of get have have changed the

00:27:23,630 --> 00:27:27,950
world in the process I think we may have

00:27:25,550 --> 00:27:30,260
to do this again sometime in the near

00:27:27,950 --> 00:27:33,980
future to move the development model

00:27:30,260 --> 00:27:37,010
into the way that the people expect it

00:27:33,980 --> 00:27:40,130
to be in the in the upcoming World while

00:27:37,010 --> 00:27:42,110
not sacrificing the ability to deal with

00:27:40,130 --> 00:27:44,030
patches by the thousands as we do now

00:27:42,110 --> 00:27:47,480
and we're going to have to face this

00:27:44,030 --> 00:27:50,180
because our community is getting older

00:27:47,480 --> 00:27:51,740
this is a picture of a whole bunch of

00:27:50,180 --> 00:27:53,930
current colonel subsystem maintained

00:27:51,740 --> 00:27:57,260
errs but I took this picture at the very

00:27:53,930 --> 00:27:59,330
first Colonel summit in 2001 sometimes

00:27:57,260 --> 00:28:01,450
might say the only thing that has

00:27:59,330 --> 00:28:06,500
changed is that there's less hair and

00:28:01,450 --> 00:28:07,850
less eric raymond but otherwise an awful

00:28:06,500 --> 00:28:09,530
lot of these people are still around a

00:28:07,850 --> 00:28:10,700
lot of the same people some of them as

00:28:09,530 --> 00:28:13,150
far as i can tell are still wearing the

00:28:10,700 --> 00:28:13,150
same clothes

00:28:13,490 --> 00:28:20,789
but you know one aspect of this is that

00:28:17,700 --> 00:28:22,650
is that much of the upper levels of our

00:28:20,789 --> 00:28:24,720
maintain ership structure occupied by

00:28:22,650 --> 00:28:26,880
the people who first got into this in

00:28:24,720 --> 00:28:29,610
the 1990s and that's a good thing that's

00:28:26,880 --> 00:28:32,280
a body of experience that helps keep the

00:28:29,610 --> 00:28:34,440
project going and we desperately need on

00:28:32,280 --> 00:28:35,789
the other hand more and more of these

00:28:34,440 --> 00:28:37,950
folks are going to start finding other

00:28:35,789 --> 00:28:39,150
things to do with their lives and we're

00:28:37,950 --> 00:28:41,039
going to have to replace them we're

00:28:39,150 --> 00:28:42,690
going to have to bring in an awful lot

00:28:41,039 --> 00:28:44,780
of new maintainer I think at some point

00:28:42,690 --> 00:28:49,169
as these people move on to other things

00:28:44,780 --> 00:28:51,059
so at this point it's going to bite us

00:28:49,169 --> 00:28:52,860
that we don't define the maintainer role

00:28:51,059 --> 00:28:55,169
very well we don't document how to fill

00:28:52,860 --> 00:28:57,390
it and we really don't train or mentor

00:28:55,169 --> 00:28:58,799
our future maintain errs and I think

00:28:57,390 --> 00:29:02,150
this is going to affect the ability of

00:28:58,799 --> 00:29:03,780
our community to scale as we go forward

00:29:02,150 --> 00:29:05,460
something that I think we're really

00:29:03,780 --> 00:29:08,730
going to have to address in the coming

00:29:05,460 --> 00:29:14,520
years a couple of the things worth

00:29:08,730 --> 00:29:16,770
mentioning here one is is code review we

00:29:14,520 --> 00:29:18,179
have a rule that says that code doesn't

00:29:16,770 --> 00:29:21,690
get into the kernel if it hasn't been

00:29:18,179 --> 00:29:23,039
reviewed here's a quote from Greg saying

00:29:21,690 --> 00:29:24,600
big promise we only have a very small

00:29:23,039 --> 00:29:28,530
group of people reviewing code in the

00:29:24,600 --> 00:29:30,210
Chrome he said this in 2006 but I don't

00:29:28,530 --> 00:29:31,890
think many people would say that the

00:29:30,210 --> 00:29:33,360
problem has gotten better since then in

00:29:31,890 --> 00:29:35,820
fact we have a fair number of people

00:29:33,360 --> 00:29:37,860
saying that has gotten worse Michal jaco

00:29:35,820 --> 00:29:39,990
memory management developer posted this

00:29:37,860 --> 00:29:42,419
just a couple months ago the number of

00:29:39,990 --> 00:29:44,549
patches posted grows over time while the

00:29:42,419 --> 00:29:48,120
number of reviewers is not scaling with

00:29:44,549 --> 00:29:50,370
the number of patches another developer

00:29:48,120 --> 00:29:52,679
familiar to many viewable from song gave

00:29:50,370 --> 00:29:54,000
a talk a few months ago where he made

00:29:52,679 --> 00:29:56,070
pretty much the same point that the

00:29:54,000 --> 00:29:57,299
number of reviewers is not scaling with

00:29:56,070 --> 00:29:59,490
the number of contributors he has a

00:29:57,299 --> 00:30:01,140
bunch of metrics to back this up he has

00:29:59,490 --> 00:30:03,809
looked at things like that the time that

00:30:01,140 --> 00:30:06,330
passes between when it patches first

00:30:03,809 --> 00:30:09,059
posted and when it is actually merged

00:30:06,330 --> 00:30:11,640
into a repository for moving upstream

00:30:09,059 --> 00:30:13,230
and that time he says is growing the

00:30:11,640 --> 00:30:14,970
time it takes us to actually get through

00:30:13,230 --> 00:30:17,090
the review process and get a patch merge

00:30:14,970 --> 00:30:19,169
is growing so if you look at the

00:30:17,090 --> 00:30:21,090
development process one might argue that

00:30:19,169 --> 00:30:22,919
our throughput is increasing as the

00:30:21,090 --> 00:30:25,289
number of patches we merge as increasing

00:30:22,919 --> 00:30:26,490
but our latency is also increasing and

00:30:25,289 --> 00:30:32,280
that I think

00:30:26,490 --> 00:30:33,900
is going to hurt us over time so as the

00:30:32,280 --> 00:30:34,860
number of viewers does that scale the

00:30:33,900 --> 00:30:37,440
number of contributors their

00:30:34,860 --> 00:30:38,850
consequences with maintain errs burning

00:30:37,440 --> 00:30:40,470
out and following behind because if

00:30:38,850 --> 00:30:42,960
nobody else reviews code then the

00:30:40,470 --> 00:30:45,360
maintainer has to review it all right no

00:30:42,960 --> 00:30:46,650
one because the maintainer is not

00:30:45,360 --> 00:30:48,270
supposed to merge code that is

00:30:46,650 --> 00:30:49,830
unreviewed so if no one has done it it's

00:30:48,270 --> 00:30:52,320
up to the maintainer and maintained errs

00:30:49,830 --> 00:30:54,809
get very tired and burn out they fall

00:30:52,320 --> 00:30:56,520
behind and so they either just don't do

00:30:54,809 --> 00:30:58,650
it and they drop patches on the floor or

00:30:56,520 --> 00:31:01,890
else they just sort of merge it anyway

00:30:58,650 --> 00:31:03,840
and hope for the best and we see a

00:31:01,890 --> 00:31:05,760
certain amount of that going on this is

00:31:03,840 --> 00:31:07,610
amusing quote from Thomas a little while

00:31:05,760 --> 00:31:09,660
back actually just a few weeks ago

00:31:07,610 --> 00:31:11,670
seriously bro p about this engineering

00:31:09,660 --> 00:31:13,740
trainwreck had seven signed off buys

00:31:11,670 --> 00:31:15,540
from company developers for 50 lines of

00:31:13,740 --> 00:31:18,540
code and none of them figured out that

00:31:15,540 --> 00:31:21,179
it was broken so even when we ostensibly

00:31:18,540 --> 00:31:23,370
have review we don't necessarily have

00:31:21,179 --> 00:31:25,980
have good code review that is going on

00:31:23,370 --> 00:31:27,570
and I think we've all seen examples of

00:31:25,980 --> 00:31:30,840
code that really should not have been

00:31:27,570 --> 00:31:34,679
merged but we just we don't have the

00:31:30,840 --> 00:31:36,720
review resources to to keep up with it I

00:31:34,679 --> 00:31:40,890
know the consequence of this can be API

00:31:36,720 --> 00:31:43,140
issues in 4 to 10 we we just about

00:31:40,890 --> 00:31:45,179
released the for that 10 kernel with a

00:31:43,140 --> 00:31:47,250
with a problem in a new feature which

00:31:45,179 --> 00:31:48,900
allows the attachment of a BPF program

00:31:47,250 --> 00:31:51,540
to a control group to filter network

00:31:48,900 --> 00:31:53,160
packets there were some api issues there

00:31:51,540 --> 00:31:56,100
that could have led to some fairly

00:31:53,160 --> 00:31:57,990
serious security issues that if they had

00:31:56,100 --> 00:31:59,730
not been fixed before for that 10 was

00:31:57,990 --> 00:32:01,800
released would have been unfixable

00:31:59,730 --> 00:32:03,600
afterwards without at least without

00:32:01,800 --> 00:32:05,250
breaking api compatibility which is

00:32:03,600 --> 00:32:07,890
something we are very very reluctant to

00:32:05,250 --> 00:32:09,960
do so this is only found because we have

00:32:07,890 --> 00:32:12,750
a particular very persistent reviewer

00:32:09,960 --> 00:32:15,330
who insisted that it be fixed we have

00:32:12,750 --> 00:32:16,950
released many api's over the years not

00:32:15,330 --> 00:32:18,690
over the years of messing this kind of

00:32:16,950 --> 00:32:20,970
you and so we're carrying a lot of

00:32:18,690 --> 00:32:23,490
problems as a result of that this leads

00:32:20,970 --> 00:32:25,620
to the more long-term maintenance issues

00:32:23,490 --> 00:32:28,410
and makes things more difficult in

00:32:25,620 --> 00:32:29,910
general review bandwidth of course is

00:32:28,410 --> 00:32:33,179
not a problem that is unique to the

00:32:29,910 --> 00:32:36,390
colonel it is endemic to any project out

00:32:33,179 --> 00:32:38,040
there that cares about code review but

00:32:36,390 --> 00:32:39,620
it is certainly acute for us and it

00:32:38,040 --> 00:32:41,809
appears to be getting worse as

00:32:39,620 --> 00:32:43,850
as the community grows the reviewing is

00:32:41,809 --> 00:32:45,200
not scaling with it so I might make the

00:32:43,850 --> 00:32:47,809
point that we work very hard to

00:32:45,200 --> 00:32:50,420
encourage contributions we aren't

00:32:47,809 --> 00:32:51,830
working so hard to encourage review and

00:32:50,420 --> 00:32:53,809
perhaps we really should be doing more

00:32:51,830 --> 00:32:59,840
to promote the development and use of

00:32:53,809 --> 00:33:01,100
code review skills all right it wouldn't

00:32:59,840 --> 00:33:04,550
be one of my talks if I didn't bug

00:33:01,100 --> 00:33:06,350
people about about this here is a slide

00:33:04,550 --> 00:33:08,420
that Tim Berg put up at a kernel summit

00:33:06,350 --> 00:33:10,100
a couple years ago just listing the

00:33:08,420 --> 00:33:13,460
amount of out of tree code that was

00:33:10,100 --> 00:33:16,250
shipped with a number of popular phone

00:33:13,460 --> 00:33:19,460
handsets and so the numbers are all in

00:33:16,250 --> 00:33:21,440
the millions of lines of code one might

00:33:19,460 --> 00:33:22,940
argue that after all the unused code is

00:33:21,440 --> 00:33:24,620
configured out of a colonel there's more

00:33:22,940 --> 00:33:27,050
out of tree code being shipped in these

00:33:24,620 --> 00:33:28,340
handsets than the mainline code I don't

00:33:27,050 --> 00:33:29,630
really have to tell this crowd about

00:33:28,340 --> 00:33:32,090
this you all understand very well I

00:33:29,630 --> 00:33:34,400
think how this particular part of our

00:33:32,090 --> 00:33:36,200
ecosystem works and I think you

00:33:34,400 --> 00:33:37,850
understand the consequences that come

00:33:36,200 --> 00:33:39,590
from as well we have bugs and security

00:33:37,850 --> 00:33:41,690
issues from all these essentially

00:33:39,590 --> 00:33:43,760
unreviewed kernels being shipped out

00:33:41,690 --> 00:33:45,980
there the inability to run mainline

00:33:43,760 --> 00:33:47,960
kernels on unpopular hardware out there

00:33:45,980 --> 00:33:49,370
which is hard for developers hard for

00:33:47,960 --> 00:33:51,170
people trying to get into our community

00:33:49,370 --> 00:33:55,400
stress on maintained errs trying to

00:33:51,170 --> 00:33:56,990
balance in and out of tree users and the

00:33:55,400 --> 00:33:58,550
fact that the people maintaining all is

00:33:56,990 --> 00:34:00,650
had a tree code are not working in our

00:33:58,550 --> 00:34:03,080
community and that weakens our community

00:34:00,650 --> 00:34:04,760
we lose a lot of talented people I think

00:34:03,080 --> 00:34:08,600
would be better off working supporting

00:34:04,760 --> 00:34:11,120
our community so and this brings about

00:34:08,600 --> 00:34:13,280
other problems like like the same sorts

00:34:11,120 --> 00:34:15,649
of upgrade issues i mentioned before in

00:34:13,280 --> 00:34:16,909
fact if you think about this slide that

00:34:15,649 --> 00:34:19,100
i put up back at the beginning of the

00:34:16,909 --> 00:34:21,260
talk about two or three years between

00:34:19,100 --> 00:34:24,290
releases and difficult upgrades and so

00:34:21,260 --> 00:34:26,419
on and then you look at my handset my

00:34:24,290 --> 00:34:29,750
current phone running current android it

00:34:26,419 --> 00:34:31,340
has a three dot 1073 colonel on it this

00:34:29,750 --> 00:34:33,889
is a kernel it was released many years

00:34:31,340 --> 00:34:36,889
ago this Colonel is a quarter of a

00:34:33,889 --> 00:34:38,450
million changes behind the main line at

00:34:36,889 --> 00:34:41,629
this point but that's what's running on

00:34:38,450 --> 00:34:43,850
my current android phone so this song

00:34:41,629 --> 00:34:47,240
starts to look very familiar we've seen

00:34:43,850 --> 00:34:49,190
this before all right we've seen where

00:34:47,240 --> 00:34:51,109
we just we can't upgrade so we're just

00:34:49,190 --> 00:34:51,559
back porting all this crap into our

00:34:51,109 --> 00:34:55,039
older

00:34:51,559 --> 00:34:56,959
knowles and a bit us badly back in 15

00:34:55,039 --> 00:34:59,509
years ago and i think it's likely to

00:34:56,959 --> 00:35:01,789
bite us badly again now so i think we

00:34:59,509 --> 00:35:04,219
really have to ask how much more can we

00:35:01,789 --> 00:35:06,259
scale when there's so much that's going

00:35:04,219 --> 00:35:08,959
on outside of our community instead of

00:35:06,259 --> 00:35:11,209
within him where we're not really

00:35:08,959 --> 00:35:13,309
growing our community as such as growing

00:35:11,209 --> 00:35:15,469
that the out of tree part of it this

00:35:13,309 --> 00:35:17,660
problem is as bad it seems to be getting

00:35:15,469 --> 00:35:20,869
worse and I think that it's something

00:35:17,660 --> 00:35:22,670
that I hopefully this crowd as much as

00:35:20,869 --> 00:35:25,640
anybody can hope to address over the

00:35:22,670 --> 00:35:27,619
years and try to fix and I know you're

00:35:25,640 --> 00:35:31,189
all aware of it but I have to harp on it

00:35:27,619 --> 00:35:32,779
anyway all right last concern i'm going

00:35:31,189 --> 00:35:35,599
to just mention quickly is the

00:35:32,779 --> 00:35:37,130
complexity of the colonel how many of

00:35:35,599 --> 00:35:40,939
you understand the read copy update

00:35:37,130 --> 00:35:42,529
subsystem in the kernel a couple of wavy

00:35:40,939 --> 00:35:46,670
hands how many of you would be willing

00:35:42,529 --> 00:35:49,369
to try to change it right we have one

00:35:46,670 --> 00:35:52,279
developer who understands read copy

00:35:49,369 --> 00:35:54,739
update we have maybe two who are willing

00:35:52,279 --> 00:36:00,949
to go and make changes to the food text

00:35:54,739 --> 00:36:03,019
subsystem we have probably one or maybe

00:36:00,949 --> 00:36:04,670
two who understand how past the name

00:36:03,019 --> 00:36:07,999
lookup works in the virtual file system

00:36:04,670 --> 00:36:11,900
layer this is all incredibly complex

00:36:07,999 --> 00:36:14,299
code quite difficult to follow and we

00:36:11,900 --> 00:36:15,829
have very few people understand it now

00:36:14,299 --> 00:36:18,499
we have plenty of people I think who are

00:36:15,829 --> 00:36:20,900
capable of understanding if they apply

00:36:18,499 --> 00:36:22,369
their their talents to it we have nobody

00:36:20,900 --> 00:36:25,849
who could step in and pick it up quickly

00:36:22,369 --> 00:36:28,069
if the need were to arise as these

00:36:25,849 --> 00:36:29,449
developers get older and thinking about

00:36:28,069 --> 00:36:31,449
doing other things we're going to have

00:36:29,449 --> 00:36:36,439
to pass this code off to other people

00:36:31,449 --> 00:36:37,910
and it's not entirely clear how we're

00:36:36,439 --> 00:36:40,339
going to do that because we are not

00:36:37,910 --> 00:36:43,400
really bringing up new maintain errs for

00:36:40,339 --> 00:36:45,499
these subsystems so it's going to be an

00:36:43,400 --> 00:36:49,279
interesting issue how we pass this code

00:36:45,499 --> 00:36:50,959
on we'll figure it out but but it's a

00:36:49,279 --> 00:36:53,150
problem that I think needs to be on our

00:36:50,959 --> 00:36:54,799
radar because the complexity of Criminal

00:36:53,150 --> 00:36:56,749
Code is grown significantly over years

00:36:54,799 --> 00:37:00,709
and parts of it are indeed quite

00:36:56,749 --> 00:37:03,410
difficult to understand so just to sort

00:37:00,709 --> 00:37:05,050
of close things out here with a few

00:37:03,410 --> 00:37:09,160
ideas for what we can maybe

00:37:05,050 --> 00:37:10,990
to do about all of this stuff one I

00:37:09,160 --> 00:37:13,390
think is that we need to better

00:37:10,990 --> 00:37:15,370
recognize maintain ership is an activity

00:37:13,390 --> 00:37:16,960
that needs support need support within

00:37:15,370 --> 00:37:19,090
our community for our maintained errs

00:37:16,960 --> 00:37:21,310
needs support within the commercial

00:37:19,090 --> 00:37:23,020
ecosystem so the maintainer Zach chua

00:37:21,310 --> 00:37:25,060
Lee have time to be maintained errs and

00:37:23,020 --> 00:37:26,860
perhaps support for more of the

00:37:25,060 --> 00:37:29,140
companies out there understanding that

00:37:26,860 --> 00:37:30,880
it is in their interests to support

00:37:29,140 --> 00:37:33,520
maintain errs the core kernel for the

00:37:30,880 --> 00:37:36,430
whole kernel because we're all depending

00:37:33,520 --> 00:37:38,800
on in the end we need to to keep this

00:37:36,430 --> 00:37:41,200
part of our system just as healthy as we

00:37:38,800 --> 00:37:43,240
need to keep the contributor base this

00:37:41,200 --> 00:37:46,600
is just an important part part of the

00:37:43,240 --> 00:37:49,000
whole thing as part of that we need to

00:37:46,600 --> 00:37:52,360
say harass the documentation maintainer

00:37:49,000 --> 00:37:54,220
to get the to document what it means to

00:37:52,360 --> 00:37:55,930
be a maintainer because we don't have

00:37:54,220 --> 00:37:58,120
that there's there's nothing out there

00:37:55,930 --> 00:37:59,620
it says if I want to be maintainer this

00:37:58,120 --> 00:38:02,800
is what we have to do it's that there

00:37:59,620 --> 00:38:04,510
it's all in people's heads is sort of

00:38:02,800 --> 00:38:06,280
developed over time but it's never

00:38:04,510 --> 00:38:08,530
really been set down and I think it's

00:38:06,280 --> 00:38:11,680
maybe coming to time where we need to do

00:38:08,530 --> 00:38:13,870
that and associated with that is to

00:38:11,680 --> 00:38:15,310
create training and mentoring for new

00:38:13,870 --> 00:38:17,710
maintainer so that we can try to bring

00:38:15,310 --> 00:38:19,390
maintain errs into our community we

00:38:17,710 --> 00:38:21,070
don't have that one way that I think it

00:38:19,390 --> 00:38:23,170
would help that it would solve a lot of

00:38:21,070 --> 00:38:24,460
other problems as well this is trying to

00:38:23,170 --> 00:38:27,010
move away from the single maintainer

00:38:24,460 --> 00:38:28,810
model most of our subsystems have one

00:38:27,010 --> 00:38:31,030
person who maintains them one person

00:38:28,810 --> 00:38:35,020
whose job it is to merge patches send

00:38:31,030 --> 00:38:36,580
them upstream and so on that focuses an

00:38:35,020 --> 00:38:38,800
awful lot of stress on a single person

00:38:36,580 --> 00:38:40,390
if we can move a little bit more towards

00:38:38,800 --> 00:38:42,520
group maintainer ship model so we have

00:38:40,390 --> 00:38:44,500
multiple people there then we can spread

00:38:42,520 --> 00:38:46,030
that stress where maintain errs can

00:38:44,500 --> 00:38:49,330
actually take vacations during the merge

00:38:46,030 --> 00:38:53,650
window and not find your inbox on fire

00:38:49,330 --> 00:38:57,220
when they come back and also where we

00:38:53,650 --> 00:38:59,050
can train you maintain errs part of this

00:38:57,220 --> 00:39:01,000
whole group maintainer model I think the

00:38:59,050 --> 00:39:02,440
aren't and all have done a great job of

00:39:01,000 --> 00:39:05,410
showing how this can work with the arms

00:39:02,440 --> 00:39:07,240
octree actually I really like what

00:39:05,410 --> 00:39:08,920
Daniel Vetter is doing with with his

00:39:07,240 --> 00:39:10,330
graphics driver subsystem when there is

00:39:08,920 --> 00:39:12,120
now over a dozen people who are

00:39:10,330 --> 00:39:15,100
empowered to commit to that repository

00:39:12,120 --> 00:39:16,990
so we have a whole large crowd of people

00:39:15,100 --> 00:39:17,460
who are learning how to maintain that

00:39:16,990 --> 00:39:19,740
sub

00:39:17,460 --> 00:39:22,380
and who will be ready to move on to

00:39:19,740 --> 00:39:23,940
bigger things we need maintainer is also

00:39:22,380 --> 00:39:26,160
in the colonel I think we need to do a

00:39:23,940 --> 00:39:28,490
whole lot more of that and change our

00:39:26,160 --> 00:39:32,640
maintainer model in that way to try to

00:39:28,490 --> 00:39:35,520
bring that about we need to teach people

00:39:32,640 --> 00:39:37,260
how to review code we don't have a guy

00:39:35,520 --> 00:39:39,690
that says here's the things to look for

00:39:37,260 --> 00:39:41,220
when we're reviewing code and so every

00:39:39,690 --> 00:39:42,780
code reviewer looks for their own thing

00:39:41,220 --> 00:39:45,710
so we have some people who are very good

00:39:42,780 --> 00:39:47,970
at reviewing code for locking problems

00:39:45,710 --> 00:39:50,780
there are other people who are very good

00:39:47,970 --> 00:39:53,940
at looking for my nano stack usage or

00:39:50,780 --> 00:39:56,160
security issues or ABI issues that sort

00:39:53,940 --> 00:39:57,599
of thing we have a fair crowded people

00:39:56,160 --> 00:40:01,650
who are very good at reviewing code for

00:39:57,599 --> 00:40:04,470
white space issues but we um we do not

00:40:01,650 --> 00:40:06,000
have anything says here are the things

00:40:04,470 --> 00:40:09,780
you should be looking for in kernel code

00:40:06,000 --> 00:40:11,790
to to make sure that code doesn't go in

00:40:09,780 --> 00:40:14,190
with with known sorts of problems we

00:40:11,790 --> 00:40:16,380
have we have some tools are cooling is

00:40:14,190 --> 00:40:17,640
getting a little bit better but we could

00:40:16,380 --> 00:40:20,130
do a whole lot better in terms of

00:40:17,640 --> 00:40:22,140
training our reviewers and more the

00:40:20,130 --> 00:40:24,599
point of encouraging people to use those

00:40:22,140 --> 00:40:26,760
skills and giving them time to review

00:40:24,599 --> 00:40:28,980
code out there code review takes a lot

00:40:26,760 --> 00:40:31,530
of time it's a lot of work it's hard

00:40:28,980 --> 00:40:32,940
work it's it's well known that code

00:40:31,530 --> 00:40:35,160
reviewers tend to get really grumpy

00:40:32,940 --> 00:40:36,690
because they tend to be overworked and

00:40:35,160 --> 00:40:39,060
doing it on time when they're not doing

00:40:36,690 --> 00:40:41,460
everything else if we gave them more

00:40:39,060 --> 00:40:44,460
time we would have better code review

00:40:41,460 --> 00:40:46,260
and in my experience there's also no

00:40:44,460 --> 00:40:47,760
better way to learn about how parts of

00:40:46,260 --> 00:40:49,859
the colonel work then to review patches

00:40:47,760 --> 00:40:51,510
going into it because by the time you

00:40:49,859 --> 00:40:53,099
get to where you can ask educated

00:40:51,510 --> 00:40:54,210
questions about the code you've had to

00:40:53,099 --> 00:40:56,790
understand to learn a whole lot of

00:40:54,210 --> 00:40:58,440
things so if more people spent more time

00:40:56,790 --> 00:41:02,430
this way we would have better kernel

00:40:58,440 --> 00:41:05,390
developers in general pay more attention

00:41:02,430 --> 00:41:07,650
to our unmaintained dark corners we have

00:41:05,390 --> 00:41:10,080
large areas of the kernel that aren't

00:41:07,650 --> 00:41:12,030
really being looked after the way they

00:41:10,080 --> 00:41:13,470
should be and I think that that's not

00:41:12,030 --> 00:41:17,010
going to scale well as we grow bigger

00:41:13,470 --> 00:41:19,890
and and the nasties in those bits of

00:41:17,010 --> 00:41:23,339
code come out to bite us thinking about

00:41:19,890 --> 00:41:25,830
tools as I said because I think we need

00:41:23,339 --> 00:41:27,660
to figure out what our next generation

00:41:25,830 --> 00:41:30,660
of tooling is going to look like so that

00:41:27,660 --> 00:41:35,250
we can start to work on developing it

00:41:30,660 --> 00:41:37,380
and just to close it down we've we've

00:41:35,250 --> 00:41:38,910
been a good 10 years or so without a

00:41:37,380 --> 00:41:41,100
real scalability crisis we've had a

00:41:38,910 --> 00:41:42,420
really good run since we made the

00:41:41,100 --> 00:41:44,520
changes i described back at the

00:41:42,420 --> 00:41:46,080
beginning of the talk so it might be

00:41:44,520 --> 00:41:47,970
tempting to believe that we've solved

00:41:46,080 --> 00:41:50,760
our problems and we're good we're going

00:41:47,970 --> 00:41:52,020
great for now I want to challenge the

00:41:50,760 --> 00:41:53,760
assumption that we're done with our

00:41:52,020 --> 00:41:56,520
scalability issues our process

00:41:53,760 --> 00:41:57,900
scalability issues and we need to be

00:41:56,520 --> 00:41:59,670
looking forward to what the next ones

00:41:57,900 --> 00:42:01,140
are going to be we've solved all of them

00:41:59,670 --> 00:42:03,180
in the past and come out much stronger

00:42:01,140 --> 00:42:05,220
for them we will solve any future ones

00:42:03,180 --> 00:42:07,860
as well I'm not worried about that but

00:42:05,220 --> 00:42:09,090
if we can think about them and start

00:42:07,860 --> 00:42:11,070
thinking about how we're going to solve

00:42:09,090 --> 00:42:13,980
them now that I think we will have an

00:42:11,070 --> 00:42:16,020
easier time and go through rather less

00:42:13,980 --> 00:42:18,330
drama in the coming years and we might

00:42:16,020 --> 00:42:20,610
otherwise do so i would like to

00:42:18,330 --> 00:42:22,800
encourage us to do that no no no i am

00:42:20,610 --> 00:42:25,340
done and i would like to thank you all

00:42:22,800 --> 00:42:25,340
for your attention

00:42:31,860 --> 00:42:37,240
okay thank you so much Jonathan that was

00:42:34,750 --> 00:42:39,100
really interesting and certainly a lot

00:42:37,240 --> 00:42:42,160
of topics at a regular topics inside

00:42:39,100 --> 00:42:43,570
linaro and if does anybody have any

00:42:42,160 --> 00:42:47,820
questions before we have a few minutes

00:42:43,570 --> 00:42:47,820
as any other any questions for Jonathan

00:42:52,170 --> 00:42:56,470
so one of the topics we've been talking

00:42:54,610 --> 00:42:59,620
about this this week is Colonel

00:42:56,470 --> 00:43:03,700
functional tests you know on desktop

00:42:59,620 --> 00:43:06,160
systems and even server systems there's

00:43:03,700 --> 00:43:08,620
a lot of people to get the kernel code

00:43:06,160 --> 00:43:09,760
gets tested in those environments some

00:43:08,620 --> 00:43:12,130
of these more specialized environments

00:43:09,760 --> 00:43:15,090
like embedded systems and in cell phones

00:43:12,130 --> 00:43:19,480
and things it's it's it's hard to get

00:43:15,090 --> 00:43:22,030
real timely feedback on on problems and

00:43:19,480 --> 00:43:24,040
things like that so you know work we're

00:43:22,030 --> 00:43:26,230
trying to work on that problem I just

00:43:24,040 --> 00:43:29,800
wondered if you had thoughts on that

00:43:26,230 --> 00:43:32,620
well testing has been a perennial issue

00:43:29,800 --> 00:43:35,470
for the kernel for a long time we used

00:43:32,620 --> 00:43:37,150
to say that to justify our lack of tests

00:43:35,470 --> 00:43:39,670
by saying that most of our problems our

00:43:37,150 --> 00:43:41,350
workload and hardware related so we

00:43:39,670 --> 00:43:45,520
couldn't test them anyway and that was

00:43:41,350 --> 00:43:47,170
what we kept users around for ya but in

00:43:45,520 --> 00:43:49,030
fact that's kind of a lame excuse for a

00:43:47,170 --> 00:43:51,190
lot of things so I think we are getting

00:43:49,030 --> 00:43:54,670
better with with our testing picture in

00:43:51,190 --> 00:43:56,230
a whole lot of ways we have the just the

00:43:54,670 --> 00:43:58,120
embryonic set of self tests in the

00:43:56,230 --> 00:44:00,790
kernel now it's just the beginning we

00:43:58,120 --> 00:44:02,770
have a long way to go with that we have

00:44:00,790 --> 00:44:04,810
efforts like Colonel CI we have efforts

00:44:02,770 --> 00:44:06,850
like the zero-day tester out there that

00:44:04,810 --> 00:44:08,830
improved our testing in that regard so I

00:44:06,850 --> 00:44:11,590
think that our story is getting better

00:44:08,830 --> 00:44:13,690
but but we have a long way to go for

00:44:11,590 --> 00:44:16,450
testing and I think that that is in fact

00:44:13,690 --> 00:44:18,040
it's an area in touch on but to scale

00:44:16,450 --> 00:44:20,800
our process going forward we have to

00:44:18,040 --> 00:44:23,020
find more problems before they go out

00:44:20,800 --> 00:44:25,000
and bite users and so I agree we very

00:44:23,020 --> 00:44:26,290
much need to improve our testing I'm

00:44:25,000 --> 00:44:30,730
encouraged by what we see but we're just

00:44:26,290 --> 00:44:34,490
beginning okay anyone else any other

00:44:30,730 --> 00:44:36,869
questions hey

00:44:34,490 --> 00:44:38,730
you said you just mentioned that

00:44:36,869 --> 00:44:40,339
reviewing the code is very important but

00:44:38,730 --> 00:44:42,900
still there is a challenge in getting

00:44:40,339 --> 00:44:45,150
the associate vendors opening their data

00:44:42,900 --> 00:44:47,579
sheets are getting the specifications

00:44:45,150 --> 00:44:50,010
out in public in time when the code is

00:44:47,579 --> 00:44:52,170
getting populated in the kernel tree and

00:44:50,010 --> 00:44:54,480
it has been a challenge for many years

00:44:52,170 --> 00:44:57,390
so is there anything that is being done

00:44:54,480 --> 00:44:59,160
to motivate the associate vendors and

00:44:57,390 --> 00:45:02,460
the spec maintenance to release the

00:44:59,160 --> 00:45:04,470
specs and SOC data sheets well yeah

00:45:02,460 --> 00:45:05,910
getting getting information out of

00:45:04,470 --> 00:45:07,619
hardware vendors of course has been a

00:45:05,910 --> 00:45:11,849
problem since the very first days of

00:45:07,619 --> 00:45:13,950
kernel development and you know at the

00:45:11,849 --> 00:45:17,520
SOC level and all that stuff it is a

00:45:13,950 --> 00:45:21,359
problem and there are plenty of things

00:45:17,520 --> 00:45:22,859
being done in terms of trying to to push

00:45:21,359 --> 00:45:24,750
vendors to release their information

00:45:22,859 --> 00:45:26,849
trying to get vendors to work more

00:45:24,750 --> 00:45:28,800
directly upstream as opposed to shipping

00:45:26,849 --> 00:45:32,339
their own vendor tree is a lot of

00:45:28,800 --> 00:45:33,720
backported code that sort of stuff but

00:45:32,339 --> 00:45:37,530
you know what really solved it in the

00:45:33,720 --> 00:45:39,930
end in the in the server side of the

00:45:37,530 --> 00:45:42,630
ecosystem was when the customers started

00:45:39,930 --> 00:45:45,450
the banding upstream code and I think

00:45:42,630 --> 00:45:48,240
that's perhaps is really required at

00:45:45,450 --> 00:45:50,819
this level of things as well and we

00:45:48,240 --> 00:45:52,560
haven't seen that yet but I keep hoping

00:45:50,819 --> 00:45:54,180
that it will happen when that happens

00:45:52,560 --> 00:45:58,680
when the customers really require it

00:45:54,180 --> 00:46:02,880
then the vendors will respond okay any

00:45:58,680 --> 00:46:04,800
others any other questions so the

00:46:02,880 --> 00:46:06,569
auditory code thing comes up for us all

00:46:04,800 --> 00:46:08,579
the time I mean it's pretty regular

00:46:06,569 --> 00:46:10,800
topic of discussion so do you have

00:46:08,579 --> 00:46:12,540
perspective on well so what is good

00:46:10,800 --> 00:46:13,980
hygiene what you would would you would

00:46:12,540 --> 00:46:16,980
you ever expect it to be everything to

00:46:13,980 --> 00:46:19,170
be upstream I mean what's go what's the

00:46:16,980 --> 00:46:21,599
metric here really well everything

00:46:19,170 --> 00:46:27,270
upstream is is it difficult to attain

00:46:21,599 --> 00:46:31,650
ideal right but I think it's what we

00:46:27,270 --> 00:46:32,880
should be aiming for and i am the closer

00:46:31,650 --> 00:46:37,020
we can get to it the better we are

00:46:32,880 --> 00:46:38,430
because when code is upstream it works

00:46:37,020 --> 00:46:41,860
better right

00:46:38,430 --> 00:46:43,330
well so is there any other any phones or

00:46:41,860 --> 00:46:46,300
companies that you could point out today

00:46:43,330 --> 00:46:47,500
that you think are you pointed out a

00:46:46,300 --> 00:46:49,630
number that you felt that there were a

00:46:47,500 --> 00:46:51,910
lot that had a lot of lines of upstream

00:46:49,630 --> 00:46:53,860
code are there any that you think fit

00:46:51,910 --> 00:46:59,890
better into that into the more positive

00:46:53,860 --> 00:47:02,440
metric there okay you know if that at

00:46:59,890 --> 00:47:05,170
that end of the ecosystem is pretty hard

00:47:02,440 --> 00:47:07,510
at this point so I'm not sure I want to

00:47:05,170 --> 00:47:09,970
call out any any particular vendors at

00:47:07,510 --> 00:47:14,140
this point you you see improvements here

00:47:09,970 --> 00:47:15,460
and then regressions there so so we have

00:47:14,140 --> 00:47:17,620
a lot of work to do is I mean we have a

00:47:15,460 --> 00:47:19,030
lot of work to do right all right well

00:47:17,620 --> 00:47:20,710
thank you so much today for coming here

00:47:19,030 --> 00:47:23,910
and sharing all that with us we really

00:47:20,710 --> 00:47:23,910
appreciated thank you

00:47:27,390 --> 00:47:31,600
okay so that's a wrap will start the

00:47:29,920 --> 00:47:33,310
sessions at ten this morning and be back

00:47:31,600 --> 00:47:34,960
in here at noon for the close-up and

00:47:33,310 --> 00:47:37,140
then we're going to have some lunch and

00:47:34,960 --> 00:47:37,140

YouTube URL: https://www.youtube.com/watch?v=_hajkHgyVbk


