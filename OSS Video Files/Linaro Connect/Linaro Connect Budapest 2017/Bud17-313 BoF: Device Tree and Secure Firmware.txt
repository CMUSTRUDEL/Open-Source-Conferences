Title: Bud17-313 BoF: Device Tree and Secure Firmware
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-313
Session Name: BoF - Device Tree and Secure Firmware - BUD17-313
Speaker: Joakim Bech, Jens Wiklander
Track: Security


★ Session Summary ★
Device Tree is well established in the Linux kernel. But since there could be other bootloader(s) and firmware components involved that needs to configure the hardware and thereby also needs to update the Device Tree blobs before passing it to Linux kernel. Therefore we are looking for a well established way for firmware to also make use and modify the Device Tree blobs before handing them over to Linux kernel. With this BoF session we would like to get started a gather ideas etc.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-313/
Presentation: https://www.slideshare.net/linaroorg/bud17313-bof-device-tree-and-secure-firmware
Video: https://youtu.be/kbREjQS3moM
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: BoF, security, firmware
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,130 --> 00:00:04,110
[Music]

00:00:08,900 --> 00:00:14,099
[Music]

00:00:11,210 --> 00:00:17,550
so hi everyone my name is you came back

00:00:14,099 --> 00:00:19,770
and we have against here also sent it

00:00:17,550 --> 00:00:22,560
with me so this is above session so we

00:00:19,770 --> 00:00:24,779
would like to get some feedback on the

00:00:22,560 --> 00:00:27,390
idea of using device cream firmer

00:00:24,779 --> 00:00:32,610
something that we are starting to use a

00:00:27,390 --> 00:00:36,899
little bit of tea so hands up how many

00:00:32,610 --> 00:00:38,670
know what device tree is here right so

00:00:36,899 --> 00:00:42,090
probably no need to go through this but

00:00:38,670 --> 00:00:48,030
it's a binary representation of the

00:00:42,090 --> 00:00:52,680
device itself basically so we have seen

00:00:48,030 --> 00:00:56,100
that firmware if you have more forward

00:00:52,680 --> 00:00:58,410
in the running in advisor today and

00:00:56,100 --> 00:01:01,829
justice linux kernel there is some need

00:00:58,410 --> 00:01:03,420
for having the same kind of thinking

00:01:01,829 --> 00:01:04,860
that you would like to have one binary

00:01:03,420 --> 00:01:07,350
and you have the configuration

00:01:04,860 --> 00:01:10,920
separately and that is what we will have

00:01:07,350 --> 00:01:12,869
been looking into here also and we can

00:01:10,920 --> 00:01:14,580
see here that the former components we

00:01:12,869 --> 00:01:18,210
are listed here is the sea we have the

00:01:14,580 --> 00:01:20,009
monitor we have us I you boot grub so

00:01:18,210 --> 00:01:24,869
that's quite a few things running before

00:01:20,009 --> 00:01:29,040
you hand over to lose kernel and the use

00:01:24,869 --> 00:01:30,750
cases we have listed here is what we do

00:01:29,040 --> 00:01:33,659
we reserve some memory for the secure

00:01:30,750 --> 00:01:37,710
site you haven't you want to reserve

00:01:33,659 --> 00:01:41,460
some free soul you have you owned that

00:01:37,710 --> 00:01:43,740
from the secure side and good arguments

00:01:41,460 --> 00:01:46,250
and such so the same kind of huge case

00:01:43,740 --> 00:01:46,250
is morally

00:01:49,760 --> 00:01:56,430
this is what we are using today so you

00:01:54,090 --> 00:01:59,340
built is quite obvious and your files I

00:01:56,430 --> 00:02:04,050
guess I'm not leave the unified from

00:01:59,340 --> 00:02:06,320
opti we used it to we have a note to

00:02:04,050 --> 00:02:09,479
tell the colonel that of the driver so

00:02:06,320 --> 00:02:14,100
the driver will find to secure file of

00:02:09,479 --> 00:02:16,350
nowhere to the postings on and we also

00:02:14,100 --> 00:02:20,520
use it to reserve some memory that's

00:02:16,350 --> 00:02:23,400
because we have four mom tattoo for my

00:02:20,520 --> 00:02:26,610
against added some pics here for the PSP

00:02:23,400 --> 00:02:31,830
i know'd and that's to bring up the gps

00:02:26,610 --> 00:02:33,950
and so on and the flow that we have is

00:02:31,830 --> 00:02:36,780
described here comes at the fervor

00:02:33,950 --> 00:02:39,030
thanks it gives you softly and then give

00:02:36,780 --> 00:02:44,570
back the 50-year fire you go to meant to

00:02:39,030 --> 00:02:44,570
the colonel so

00:02:46,270 --> 00:02:51,460
that is very short introduction of what

00:02:49,690 --> 00:02:53,170
it's done and how we are using and so on

00:02:51,460 --> 00:02:55,210
and now we would like to have some

00:02:53,170 --> 00:02:57,490
feedback what do you think about it if

00:02:55,210 --> 00:03:00,190
this is the right way to do should be

00:02:57,490 --> 00:03:03,130
done in another way some questions here

00:03:00,190 --> 00:03:04,840
what should a TPS 53 should we have the

00:03:03,130 --> 00:03:08,380
concern on taking from Colonel what

00:03:04,840 --> 00:03:11,290
should have it separately and questions

00:03:08,380 --> 00:03:15,400
like that and I've seen also on the

00:03:11,290 --> 00:03:17,590
forum them over there there were some

00:03:15,400 --> 00:03:21,490
some Engineer saying that this might be

00:03:17,590 --> 00:03:24,580
overkill to have these actually define

00:03:21,490 --> 00:03:26,050
missing so on so there are several

00:03:24,580 --> 00:03:36,150
aspects here that we would like to get

00:03:26,050 --> 00:03:50,159
feedback on for any cotton grants

00:03:36,150 --> 00:03:53,220
I guess you were so when qm stops it

00:03:50,159 --> 00:03:57,930
generates a btb which is starting ramp

00:03:53,220 --> 00:04:02,280
and entrepreneur mindset and dust the

00:03:57,930 --> 00:04:04,709
updates pci and also process the point

00:04:02,280 --> 00:04:08,010
of two of tea when of the initial Isis

00:04:04,709 --> 00:04:11,280
and off t at its notes and and memorias

00:04:08,010 --> 00:04:14,760
is described and returns back to haunt

00:04:11,280 --> 00:04:20,370
us at lenoir which in turn launched its

00:04:14,760 --> 00:04:22,650
you fi us I on qmo knows that the device

00:04:20,370 --> 00:04:25,520
Rabab is at a certain location memories

00:04:22,650 --> 00:04:30,060
we didn't have to pass a pointer to the

00:04:25,520 --> 00:04:32,430
dtp birthday on on hardware we would

00:04:30,060 --> 00:04:35,639
probably boss this pointer instead of

00:04:32,430 --> 00:04:39,389
relying on a hot-headed address and yeah

00:04:35,639 --> 00:04:41,070
the rest is easier flow so that goes

00:04:39,389 --> 00:04:43,320
hanging out with this weed from flash

00:04:41,070 --> 00:04:49,130
once that is probably quite nice and

00:04:43,320 --> 00:04:49,130
none yet hand it over a separate part

00:04:52,810 --> 00:04:56,320
I guess the other thing that's worth

00:04:54,460 --> 00:04:58,030
pointing out there is that if you're

00:04:56,320 --> 00:04:59,980
doing this and then you've got Kobe on

00:04:58,030 --> 00:05:02,950
time zone you originally running UEFI

00:04:59,980 --> 00:05:06,130
then UEFI will construct this acpi

00:05:02,950 --> 00:05:07,840
tables by asking cream you for a bunch

00:05:06,130 --> 00:05:09,639
of a Saffiano table fragments so it's

00:05:07,840 --> 00:05:12,190
not the case that the DTV is the only

00:05:09,639 --> 00:05:13,600
source of truth about what the system

00:05:12,190 --> 00:05:15,210
looks like so if you're going to apply

00:05:13,600 --> 00:05:17,470
this to hardware then the question is

00:05:15,210 --> 00:05:20,230
are you then go try and generate clear

00:05:17,470 --> 00:05:22,630
HBO tables from the original BTW thing

00:05:20,230 --> 00:05:27,250
or is there some other setup you have

00:05:22,630 --> 00:05:31,389
that so far we haven't written a spot

00:05:27,250 --> 00:05:34,660
about that I guess so good comment so I

00:05:31,389 --> 00:05:36,729
guess I'm we're using cavium is using in

00:05:34,660 --> 00:05:39,760
our firm where you're using just our own

00:05:36,729 --> 00:05:41,800
private dtb so not linux bindings but

00:05:39,760 --> 00:05:43,440
just it's a data format we're not going

00:05:41,800 --> 00:05:47,620
to didn't reinvent that so we're using

00:05:43,440 --> 00:05:50,229
for our own stuff driving some hardware

00:05:47,620 --> 00:05:51,610
as well as some you know configuration

00:05:50,229 --> 00:05:54,720
which I know generally isn't you know

00:05:51,610 --> 00:05:57,070
that's that's not how linux uses it but

00:05:54,720 --> 00:05:59,140
you know yeah right so I mean so we have

00:05:57,070 --> 00:06:01,120
you know we needed we actually have for

00:05:59,140 --> 00:06:03,520
our for you know even before arm trusted

00:06:01,120 --> 00:06:05,770
firmware we actually have two separate

00:06:03,520 --> 00:06:08,560
dtb blobs one is for the manufacturing

00:06:05,770 --> 00:06:10,090
info for a board so that's like where

00:06:08,560 --> 00:06:12,220
mac addresses and serial numbers goes

00:06:10,090 --> 00:06:14,530
and that's right once at the you know

00:06:12,220 --> 00:06:16,240
never updated and we have then another

00:06:14,530 --> 00:06:17,710
dtb that actually then describes the

00:06:16,240 --> 00:06:19,990
hardware that the firmer once and the

00:06:17,710 --> 00:06:22,030
first level firm or combines those and

00:06:19,990 --> 00:06:24,280
passes that then you know up the chain

00:06:22,030 --> 00:06:25,960
so we found that to work quite well and

00:06:24,280 --> 00:06:29,350
so we have it like an armed trusted

00:06:25,960 --> 00:06:31,090
firmware port you know we have we use

00:06:29,350 --> 00:06:33,280
the dt be there already in an that get

00:06:31,090 --> 00:06:34,780
this is all separate from some of that

00:06:33,280 --> 00:06:37,090
stuff like the mac address will filter

00:06:34,780 --> 00:06:42,789
its way up and then be added to the real

00:06:37,090 --> 00:06:45,370
linux dtb so this is something does it's

00:06:42,789 --> 00:06:49,150
just locally yeah getting your phone

00:06:45,370 --> 00:06:50,380
okay so do we know if maybe roll

00:06:49,150 --> 00:06:55,210
programs do you know if we have

00:06:50,380 --> 00:06:57,370
discussions like this and they open and

00:06:55,210 --> 00:06:58,780
i guess maybe just one one side thing i

00:06:57,370 --> 00:07:00,190
want to bring up is the sort of on the

00:06:58,780 --> 00:07:02,050
configuration i mean i think that this

00:07:00,190 --> 00:07:03,550
could be useful for not just a hardware

00:07:02,050 --> 00:07:06,460
description but for like if you want to

00:07:03,550 --> 00:07:08,830
configure well oscillating options in

00:07:06,460 --> 00:07:10,389
and you know how arm trusted firmware

00:07:08,830 --> 00:07:11,979
runs not just telling me about the

00:07:10,389 --> 00:07:13,569
hardware which is useful to but I think

00:07:11,979 --> 00:07:15,160
there are things where you might want to

00:07:13,569 --> 00:07:17,020
we know where that's not how it's used

00:07:15,160 --> 00:07:22,150
in Linux but I think that that could be

00:07:17,020 --> 00:07:35,169
a you know in a useful use for it infirm

00:07:22,150 --> 00:07:38,470
or I mean generally white using the vest

00:07:35,169 --> 00:07:40,750
et using dt in firmware is as a

00:07:38,470 --> 00:07:43,139
reasonable approach it is just a data

00:07:40,750 --> 00:07:44,919
structure you need to pass data from

00:07:43,139 --> 00:07:46,650
between these various from Earth

00:07:44,919 --> 00:07:49,500
components and having the structure data

00:07:46,650 --> 00:07:52,300
structure data to do that makes sense

00:07:49,500 --> 00:07:56,320
the the caution or the guidance i would

00:07:52,300 --> 00:07:59,919
give on that is take the time to think

00:07:56,320 --> 00:08:01,419
about and write down what what

00:07:59,919 --> 00:08:06,069
information is that you need to pass

00:08:01,419 --> 00:08:10,330
round because they can easily get to you

00:08:06,069 --> 00:08:12,099
build very big DTV files and it is more

00:08:10,330 --> 00:08:14,470
complicated you get things the harder it

00:08:12,099 --> 00:08:17,669
is to to audit and figure out what

00:08:14,470 --> 00:08:20,560
you're what you're doing so i would

00:08:17,669 --> 00:08:22,900
recommend really defining what the model

00:08:20,560 --> 00:08:26,680
is that you're trying to do and if

00:08:22,900 --> 00:08:30,039
you're if opti is only touching a small

00:08:26,680 --> 00:08:33,070
subset of the hardware to restrict the

00:08:30,039 --> 00:08:36,930
DTV that it receives to dispatch that

00:08:33,070 --> 00:08:36,930
data is probably reasonable

00:08:41,289 --> 00:08:50,990
there is also these secure prefix

00:08:45,260 --> 00:08:52,940
bindings that were upstream by Peter so

00:08:50,990 --> 00:08:56,029
that supposed to be I mean to seek your

00:08:52,940 --> 00:08:59,360
status that's supposed to be used over

00:08:56,029 --> 00:09:02,860
to be spread over the whole kernel dt

00:08:59,360 --> 00:09:05,149
basically so that how do you handle it

00:09:02,860 --> 00:09:06,950
it's been a bit since I've looked at the

00:09:05,149 --> 00:09:09,860
secure bindings so I can't at this

00:09:06,950 --> 00:09:12,800
moment but when I'm also feeling very

00:09:09,860 --> 00:09:16,459
ill this morning I don't remember what

00:09:12,800 --> 00:09:22,610
what things are there Rob would be able

00:09:16,459 --> 00:09:26,899
to answer better right now what is there

00:09:22,610 --> 00:09:28,610
is just purely the secure status though

00:09:26,899 --> 00:09:31,880
it is designed to extend to other

00:09:28,610 --> 00:09:34,940
properties and that's purely just for

00:09:31,880 --> 00:09:38,510
partitioning of peripherals and I would

00:09:34,940 --> 00:09:44,360
consider that pretty minor changes to

00:09:38,510 --> 00:09:48,560
the BTB so what's the concern with

00:09:44,360 --> 00:09:58,160
weather live FTT is overkill the size of

00:09:48,560 --> 00:10:00,620
it or so yet they just did first we just

00:09:58,160 --> 00:10:03,770
echo what really was saying about is to

00:10:00,620 --> 00:10:05,930
be an issue use case restoring with

00:10:03,770 --> 00:10:08,930
interest so myself just a firmware is

00:10:05,930 --> 00:10:10,940
for configuration of this so am I not

00:10:08,930 --> 00:10:13,760
actually some kind of hardware full

00:10:10,940 --> 00:10:15,110
hardware description to do full probing

00:10:13,760 --> 00:10:17,920
and things like that but these

00:10:15,110 --> 00:10:20,390
certificates earn here was more in the

00:10:17,920 --> 00:10:23,779
runtime aspect a trusted firm oh we

00:10:20,390 --> 00:10:25,550
didn't like the idea of the being a

00:10:23,779 --> 00:10:30,709
device tree like it's part of every

00:10:25,550 --> 00:10:32,810
single stage of the boot process we so

00:10:30,709 --> 00:10:37,040
that the runtime part diseases concerns

00:10:32,810 --> 00:10:38,600
about Memphis I size of the code many

00:10:37,040 --> 00:10:41,930
male partners want to keep it as simple

00:10:38,600 --> 00:10:43,760
as possible so which for any pausing to

00:10:41,930 --> 00:10:45,410
be done it in the kind of transient

00:10:43,760 --> 00:10:47,240
boots ages and then there's some kind of

00:10:45,410 --> 00:10:50,029
in-memory representation pass to the

00:10:47,240 --> 00:10:52,550
runtime so much or at least have this is

00:10:50,029 --> 00:10:53,010
an option so not a part of the force

00:10:52,550 --> 00:10:56,580
into the

00:10:53,010 --> 00:11:01,740
I've had so I think runtime wise is it's

00:10:56,580 --> 00:11:04,830
fairly tiny I've part i worked on in the

00:11:01,740 --> 00:11:07,320
past kind of did the same thing it

00:11:04,830 --> 00:11:11,130
wasn't really trust on but it was the

00:11:07,320 --> 00:11:16,760
microcontroller on the chip read the DTV

00:11:11,130 --> 00:11:19,520
from flash added in mac addresses and

00:11:16,760 --> 00:11:21,810
various configuration that only the

00:11:19,520 --> 00:11:25,920
market controller new and then passed

00:11:21,810 --> 00:11:30,360
that to the a course and then it was you

00:11:25,920 --> 00:11:34,800
boot at the time and it was five or ten

00:11:30,360 --> 00:11:39,980
k I think that added yeah that's not

00:11:34,800 --> 00:11:39,980
small in and how Wilson was bullshitting

00:11:40,130 --> 00:11:45,050
every k count sure

00:11:48,090 --> 00:11:53,980
so depending on your goal and I missed

00:11:50,380 --> 00:11:55,840
the first two minutes the Zephyr guys a

00:11:53,980 --> 00:11:59,110
TLC had a nice talk about how to do

00:11:55,840 --> 00:12:03,430
device tree with a release memory

00:11:59,110 --> 00:12:05,500
constraint model where you can basically

00:12:03,430 --> 00:12:06,850
take a device people so their their goal

00:12:05,500 --> 00:12:08,500
is probably different from from what

00:12:06,850 --> 00:12:09,520
you're describing in that you want to

00:12:08,500 --> 00:12:11,320
have only a single piece of

00:12:09,520 --> 00:12:12,640
configuration of describing your

00:12:11,320 --> 00:12:15,160
hardware because once you have multiple

00:12:12,640 --> 00:12:17,890
ones things will always go bad because

00:12:15,160 --> 00:12:19,180
they're getting out of things so so they

00:12:17,890 --> 00:12:21,490
basically wanted to make sure that they

00:12:19,180 --> 00:12:22,990
have one device g that basically just

00:12:21,490 --> 00:12:25,840
described hard when they can just use

00:12:22,990 --> 00:12:27,640
that wherever and that one device

00:12:25,840 --> 00:12:29,440
typically would go and get passed in the

00:12:27,640 --> 00:12:30,910
build process after film where so you

00:12:29,440 --> 00:12:33,100
would take it as an input file and then

00:12:30,910 --> 00:12:36,370
build defines in your header files and

00:12:33,100 --> 00:12:37,570
just ways to use them depending on the

00:12:36,370 --> 00:12:39,160
problem is you're trying to solve that

00:12:37,570 --> 00:12:40,390
might be a viable solution right if you

00:12:39,160 --> 00:12:42,940
really do care about like one killer

00:12:40,390 --> 00:12:51,000
body usually do know what hard are you

00:12:42,940 --> 00:12:53,650
running on in the other thing I've

00:12:51,000 --> 00:12:55,840
mentioned here also i'm not sure if

00:12:53,650 --> 00:12:59,170
that's a big deal of us where to store

00:12:55,840 --> 00:13:00,970
the BTS files if you read something in

00:12:59,170 --> 00:13:05,230
linux kernel you boot it up and you

00:13:00,970 --> 00:13:07,690
shake it in rock so on it might look

00:13:05,230 --> 00:13:09,610
different and that's seeing someone has

00:13:07,690 --> 00:13:16,660
already done something in firmware and

00:13:09,610 --> 00:13:18,100
i'm not sure if that's a big issue that

00:13:16,660 --> 00:13:20,860
already happens because you do changes

00:13:18,100 --> 00:13:26,560
the device tree to some extent it's ok

00:13:20,860 --> 00:13:28,930
to do it if things are dynamic and and

00:13:26,560 --> 00:13:32,100
the firmware needs to fill it in rather

00:13:28,930 --> 00:13:36,520
than it being in the DTS and that's fine

00:13:32,100 --> 00:13:38,490
you've also got a different threat model

00:13:36,520 --> 00:13:41,290
than the colonel has to and we've

00:13:38,490 --> 00:13:43,960
shipped dt bees with the colonel because

00:13:41,290 --> 00:13:46,510
it turned out to it was convenient but

00:13:43,960 --> 00:13:48,880
you don't want to be replacing if you're

00:13:46,510 --> 00:13:51,190
replacing the dpb that gets passed

00:13:48,880 --> 00:13:55,420
around to firmware that's a major attack

00:13:51,190 --> 00:13:59,320
surface and pick a tick see wants to

00:13:55,420 --> 00:14:00,510
weigh in on this but yeah so that that

00:13:59,320 --> 00:14:02,820
alone is a

00:14:00,510 --> 00:14:09,270
14 okay how does the diversities t be

00:14:02,820 --> 00:14:12,840
stored who trusts the dtp and is there

00:14:09,270 --> 00:14:19,830
any signing oh how is signing applied to

00:14:12,840 --> 00:14:21,270
the D TVs that are firmer fusion I just

00:14:19,830 --> 00:14:24,150
want to jump in there keep saying I

00:14:21,270 --> 00:14:29,430
understand that you don't though it's

00:14:24,150 --> 00:14:34,830
cute guys so please the system is the

00:14:29,430 --> 00:14:36,240
whole thing and let me put new system

00:14:34,830 --> 00:14:38,670
together you don't know all the pieces

00:14:36,240 --> 00:14:41,840
so people working with firmware people

00:14:38,670 --> 00:14:41,840
working on the operating system kernel

00:14:41,900 --> 00:14:46,050
you haven't got to complete

00:14:43,560 --> 00:14:48,060
representation system integration elites

00:14:46,050 --> 00:14:52,410
menu profit system together from pieces

00:14:48,060 --> 00:14:54,470
so you do need a method of updating

00:14:52,410 --> 00:14:58,710
these things so if you can't put

00:14:54,470 --> 00:15:00,510
configuration in it it's accomplished

00:14:58,710 --> 00:15:02,810
information into device tree that the

00:15:00,510 --> 00:15:05,370
colonel requires to work optimally

00:15:02,810 --> 00:15:06,930
because that might compromise the skin

00:15:05,370 --> 00:15:08,970
firmer he needs a way of adding it in

00:15:06,930 --> 00:15:10,430
extra that's all I'm saying is you need

00:15:08,970 --> 00:15:15,870
to be able to update your device tree

00:15:10,430 --> 00:15:17,130
for the sort of higher levels so you

00:15:15,870 --> 00:15:19,500
need some method of that you can't just

00:15:17,130 --> 00:15:22,560
say further provides it and then

00:15:19,500 --> 00:15:24,810
ultimately agriculture suit of linux and

00:15:22,560 --> 00:15:27,480
it's got no eating you've got no control

00:15:24,810 --> 00:15:28,830
over it you know metal barrel to inject

00:15:27,480 --> 00:15:30,960
things with a lot that goes in a higher

00:15:28,830 --> 00:15:32,580
level to get this extra information but

00:15:30,960 --> 00:15:35,180
doesn't mean then you don't have one

00:15:32,580 --> 00:15:35,180
representation

00:15:39,110 --> 00:15:45,230
that I agree on that we do with the

00:15:41,570 --> 00:15:49,010
commode I study the use cases I see an

00:15:45,230 --> 00:15:52,610
info on my side it would be a very close

00:15:49,010 --> 00:15:54,470
internal representation configuration

00:15:52,610 --> 00:15:57,440
within the firmware which would would be

00:15:54,470 --> 00:15:59,890
part of the chain of trust in there in

00:15:57,440 --> 00:16:05,810
the firmware and wouldn't kind of I

00:15:59,890 --> 00:16:07,790
don't see you know the value of the

00:16:05,810 --> 00:16:09,560
single device tree that gets passed

00:16:07,790 --> 00:16:11,990
around and manipulated through all

00:16:09,560 --> 00:16:14,360
stages of boots which firmware into the

00:16:11,990 --> 00:16:15,890
kernel I decide I think it needs to be a

00:16:14,360 --> 00:16:19,339
standalone thing at least to start it

00:16:15,890 --> 00:16:20,930
until we understand how what what

00:16:19,339 --> 00:16:25,579
information does need to pass through

00:16:20,930 --> 00:16:27,380
those different stages what about the

00:16:25,579 --> 00:16:29,660
the example thank you I Kim gave the

00:16:27,380 --> 00:16:32,630
memory reservations and so on the fact

00:16:29,660 --> 00:16:34,430
that opti needs to declare that it is

00:16:32,630 --> 00:16:37,250
actually present and initialized so that

00:16:34,430 --> 00:16:39,230
the colonel will start the driver and

00:16:37,250 --> 00:16:41,690
probe use eating smc or or anything

00:16:39,230 --> 00:16:43,820
that's kind kind of information that you

00:16:41,690 --> 00:16:47,029
have to plot from the firm owner to the

00:16:43,820 --> 00:16:51,680
colonel so if you have to dt's that that

00:16:47,029 --> 00:16:53,029
smoothes out is this mechanism know what

00:16:51,680 --> 00:16:56,060
it does mean is it means you need to

00:16:53,029 --> 00:16:59,149
define how you do that if you've got a

00:16:56,060 --> 00:17:01,760
kernel dtb it still doesn't change the

00:16:59,149 --> 00:17:03,380
fact that configuration of the secure

00:17:01,760 --> 00:17:06,439
world and want devices this here roll

00:17:03,380 --> 00:17:09,199
takes responsibility for its going to

00:17:06,439 --> 00:17:10,130
need to be passed so that's one of the

00:17:09,199 --> 00:17:12,140
areas where you can strain your

00:17:10,130 --> 00:17:17,000
configuration and you say the behavior

00:17:12,140 --> 00:17:19,280
here is firmware will look for these

00:17:17,000 --> 00:17:21,319
nodes and will modify them as

00:17:19,280 --> 00:17:23,179
appropriate and you you draw a box

00:17:21,319 --> 00:17:25,880
remote on and you say look these this is

00:17:23,179 --> 00:17:27,799
this is the interface so as more the ddb

00:17:25,880 --> 00:17:31,309
is just a data format and at that point

00:17:27,799 --> 00:17:34,190
because equally important is the

00:17:31,309 --> 00:17:37,240
behavior that we that is standardized

00:17:34,190 --> 00:17:37,240
for that level

00:17:37,990 --> 00:17:50,980
I think we're about to end actually

00:17:46,030 --> 00:17:53,170
already four more minutes I think we've

00:17:50,980 --> 00:17:56,559
got some idea so it seems like we did

00:17:53,170 --> 00:17:59,830
you have a second look at this and look

00:17:56,559 --> 00:18:32,559
at both security implications and what

00:17:59,830 --> 00:18:35,860
and why we need to do it the control so

00:18:32,559 --> 00:18:38,260
the control dtb the in modern you boo

00:18:35,860 --> 00:18:40,450
the view so there's a big big picture

00:18:38,260 --> 00:18:44,530
that is you basically have the if you

00:18:40,450 --> 00:18:46,210
control f TT in you boot which is a

00:18:44,530 --> 00:18:49,120
device that gets included on bill time

00:18:46,210 --> 00:18:51,580
of you boot that then can go to the

00:18:49,120 --> 00:18:54,400
initializers internal device model

00:18:51,580 --> 00:18:57,010
objects inside of you boot to be used in

00:18:54,400 --> 00:18:58,450
value buddhist running and you booty

00:18:57,010 --> 00:19:01,960
states also can do your free so you can

00:18:58,450 --> 00:19:10,510
even go and do your paci provider in

00:19:01,960 --> 00:19:13,120
ubud with configured or buy for you but

00:19:10,510 --> 00:19:16,330
you would never you would never forces

00:19:13,120 --> 00:19:20,260
anything on anyone right as you might be

00:19:16,330 --> 00:19:22,540
well aware but the goal the final goal

00:19:20,260 --> 00:19:25,120
of this and a lot of architectures are a

00:19:22,540 --> 00:19:27,309
lot of parts from students today should

00:19:25,120 --> 00:19:30,160
be that this is the same device g that

00:19:27,309 --> 00:19:33,580
linux also uses so for example the

00:19:30,160 --> 00:19:35,530
distribute boot code in ubud uses the

00:19:33,580 --> 00:19:37,240
device tree the internal device tree as

00:19:35,530 --> 00:19:38,920
a fallback if it doesn't find a manual

00:19:37,240 --> 00:19:40,600
override device tree on this on the disk

00:19:38,920 --> 00:19:42,429
device that is trying to boot which

00:19:40,600 --> 00:19:43,929
means by default it will use that

00:19:42,429 --> 00:19:45,730
internal device tree and that works just

00:19:43,929 --> 00:19:47,260
fine i mean we have tried actively

00:19:45,730 --> 00:19:49,240
pushing a couple of vendors to that

00:19:47,260 --> 00:19:51,070
model so everybody we're working with

00:19:49,240 --> 00:19:51,549
basically because if we want to do some

00:19:51,070 --> 00:19:53,169
and you would

00:19:51,549 --> 00:19:55,570
model we do need to get the device tree

00:19:53,169 --> 00:19:58,210
from them and that same device g model

00:19:55,570 --> 00:19:59,529
is the same as that i can think of since

00:19:58,210 --> 00:20:01,239
you don't want to have to devise freeze

00:19:59,529 --> 00:20:04,419
in different areas somewhere lying

00:20:01,239 --> 00:20:06,340
around in diverging and eventually it's

00:20:04,419 --> 00:20:08,019
much easier to just make you would use

00:20:06,340 --> 00:20:09,129
the linux kernel bindings the nervous

00:20:08,019 --> 00:20:11,139
about rebalancing everything's just

00:20:09,129 --> 00:20:15,009
works out of the box so i don't i

00:20:11,139 --> 00:20:16,809
honestly i don't see the issue where it

00:20:15,009 --> 00:20:17,889
would be an issue with teachers use the

00:20:16,809 --> 00:20:19,960
current about you rose katie just

00:20:17,889 --> 00:20:21,970
penetrated and say this is a device you

00:20:19,960 --> 00:20:23,139
shouldn't care about right now because i

00:20:21,970 --> 00:20:24,909
don't want to have it initialized in

00:20:23,139 --> 00:20:26,739
early film where this is out of scope or

00:20:24,909 --> 00:20:29,259
whatever right you can just add those

00:20:26,739 --> 00:20:31,389
are you as long as you you have you boot

00:20:29,259 --> 00:20:32,619
or boot loader specific properties just

00:20:31,389 --> 00:20:34,809
add them in parallels and that will just

00:20:32,619 --> 00:20:36,970
ignore them you don't you don't have to

00:20:34,809 --> 00:20:38,950
pass you don't have to push that device

00:20:36,970 --> 00:20:40,690
that you use for both for film where n

00:20:38,950 --> 00:20:42,850
for colonel you don't have to push that

00:20:40,690 --> 00:20:45,999
into the linux kernel tree it's a

00:20:42,850 --> 00:20:48,999
different thing right as long as as the

00:20:45,999 --> 00:20:50,919
linux kernel device tree it's a full

00:20:48,999 --> 00:20:52,690
subset of whatever you have in your

00:20:50,919 --> 00:20:55,239
device or system everything just works

00:20:52,690 --> 00:20:57,220
you use a few things for your firmware

00:20:55,239 --> 00:20:58,090
and then everything else goes there and

00:20:57,220 --> 00:21:02,919
then don't think those the piece it

00:20:58,090 --> 00:21:05,950
doesn't know about done maintenance

00:21:02,919 --> 00:21:08,679
thing then you're constantly merging

00:21:05,950 --> 00:21:10,059
your you basically forked the colonel

00:21:08,679 --> 00:21:11,559
device streaming interest from

00:21:10,059 --> 00:21:12,970
maintenance point of view has something

00:21:11,559 --> 00:21:14,619
changed in the kernel device tree now

00:21:12,970 --> 00:21:16,720
you have to get those changes integrate

00:21:14,619 --> 00:21:19,720
your changes on them no no the colonel

00:21:16,720 --> 00:21:21,759
device g does not change it should not

00:21:19,720 --> 00:21:24,669
you're doing as long if you're doing a

00:21:21,759 --> 00:21:25,989
hearing wrong basically if you if you

00:21:24,669 --> 00:21:27,759
change the colonel device tree and

00:21:25,989 --> 00:21:29,350
compatibly to what it was before you're

00:21:27,759 --> 00:21:31,509
breaking every kernel that was running

00:21:29,350 --> 00:21:35,129
before which means we don't care about

00:21:31,509 --> 00:21:38,769
your system yeah it's not to think about

00:21:35,129 --> 00:21:40,450
new features new bondings get added so

00:21:38,769 --> 00:21:42,940
let in theory it's combined with

00:21:40,450 --> 00:21:46,359
compatible is not always but even

00:21:42,940 --> 00:21:47,919
without the compatibility issue baby get

00:21:46,359 --> 00:21:49,960
new kernels what new features is for

00:21:47,919 --> 00:21:52,659
sports do a lot OPP bindings and stuff

00:21:49,960 --> 00:21:55,929
like then power lots of power management

00:21:52,659 --> 00:21:57,309
features or support prop te well it

00:21:55,929 --> 00:21:59,590
means then you have to update the

00:21:57,309 --> 00:22:03,159
bootloader because it's got the device

00:21:59,590 --> 00:22:04,539
tree in some new kernel or op te n boots

00:22:03,159 --> 00:22:05,290
new boots will then need to know about

00:22:04,539 --> 00:22:06,970
op to you

00:22:05,290 --> 00:22:10,570
in order to modify its device treats

00:22:06,970 --> 00:22:14,020
passing to the colonel it's going to be

00:22:10,570 --> 00:22:17,680
cold beverages alright so sorry Jose

00:22:14,020 --> 00:22:20,590
we're about the time running out so we

00:22:17,680 --> 00:22:22,510
have to solve it thank you for the

00:22:20,590 --> 00:22:24,430
feedback so far we will see if we will

00:22:22,510 --> 00:22:25,810
follow up in some way we will pull it up

00:22:24,430 --> 00:22:28,300
at least food because we are working

00:22:25,810 --> 00:22:31,320
with it already but thank you for all

00:22:28,300 --> 00:22:31,320
ideas that you got

00:22:31,770 --> 00:22:36,740

YouTube URL: https://www.youtube.com/watch?v=kbREjQS3moM


