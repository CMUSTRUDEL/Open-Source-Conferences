Title: Bud17-306 ODP IPsec offload panel
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-306
Session Name: ODP IPsec offload panel - BUD17-306
Speaker: Bill Fischofer, Bala Manoharan,
Nikhil Agarwal, Bogdan Pricope, Petri Savolainen
Track: 


★ Session Summary ★
Discuss IPsec offload from:
 Application perspective
 Application developer perspective
 Implementation perspective
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-306/
Presentation: https://www.slideshare.net/linaroorg/bud17306-odp-ipsec-offload-panel
Video: https://youtu.be/EZXiHRU2uZM
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: ODP, LNG, IPsec
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,130 --> 00:00:07,509
[Music]

00:00:10,139 --> 00:00:16,539
so this session is a is a discussion

00:00:13,900 --> 00:00:19,470
panel on some of the latest work we've

00:00:16,539 --> 00:00:23,770
been doing an OTP on IPSec offload and

00:00:19,470 --> 00:00:26,140
so we basically have two perspectives on

00:00:23,770 --> 00:00:29,410
this from the application side we have

00:00:26,140 --> 00:00:31,929
Petri and Bogdan who have been you know

00:00:29,410 --> 00:00:35,350
taking the what is an application want

00:00:31,929 --> 00:00:37,120
to see view in IPSec offload and then

00:00:35,350 --> 00:00:40,540
from the implementation standpoint we

00:00:37,120 --> 00:00:43,690
have Bala and Nikhil who are offering

00:00:40,540 --> 00:00:46,659
their perspective on what IPSec offload

00:00:43,690 --> 00:00:50,080
looks like from a from an implementer

00:00:46,659 --> 00:00:56,220
perspective and I'm here just to look

00:00:50,080 --> 00:00:59,830
good so you didn't fill in right so

00:00:56,220 --> 00:01:02,379
basically to two aspects of IPSec

00:00:59,830 --> 00:01:05,650
offload that we are offering in the next

00:01:02,379 --> 00:01:09,430
major release of ODP which is codenamed

00:01:05,650 --> 00:01:12,700
tiger moth following our butter random

00:01:09,430 --> 00:01:14,289
butterfly series the first one is what

00:01:12,700 --> 00:01:17,500
we call lookaside processing and the

00:01:14,289 --> 00:01:20,679
idea behind look outside is all packets

00:01:17,500 --> 00:01:23,109
first come to an application thread and

00:01:20,679 --> 00:01:25,960
then the application says oh this is an

00:01:23,109 --> 00:01:27,490
IPSec packet let me decrypt it or this

00:01:25,960 --> 00:01:30,009
is a packet that I want to have IPSec

00:01:27,490 --> 00:01:35,109
encrypted and it will basically send it

00:01:30,009 --> 00:01:36,759
down to an IPSec offload engine which of

00:01:35,109 --> 00:01:40,539
course interoperates with a crypto block

00:01:36,759 --> 00:01:43,299
and then returns the result back to the

00:01:40,539 --> 00:01:45,429
thread and we have both synchronous and

00:01:43,299 --> 00:01:50,469
asynchronous versions of these api's

00:01:45,429 --> 00:01:53,350
defined so you can you can do a in a

00:01:50,469 --> 00:01:55,389
synchronous call to - IPSec encrypt or

00:01:53,350 --> 00:01:59,560
encrypt or you can do an asynchronous

00:01:55,389 --> 00:02:04,749
one and then get a result back as an

00:01:59,560 --> 00:02:08,289
event completion for offload processing

00:02:04,749 --> 00:02:09,910
it's and this is this is what currently

00:02:08,289 --> 00:02:11,530
being defined where we've been working

00:02:09,910 --> 00:02:13,000
on this week trying to get the API

00:02:11,530 --> 00:02:15,850
definitions for that but the idea here

00:02:13,000 --> 00:02:19,480
is to provide more autonomous capability

00:02:15,850 --> 00:02:21,350
where the similar to the way the

00:02:19,480 --> 00:02:25,040
classifier works where the application

00:02:21,350 --> 00:02:26,720
simply sets up classification rules and

00:02:25,040 --> 00:02:28,760
then that happens automatically as

00:02:26,720 --> 00:02:30,800
packets are being received we want to

00:02:28,760 --> 00:02:35,090
similarly be able to program

00:02:30,800 --> 00:02:37,610
IPSec input rules security Association

00:02:35,090 --> 00:02:39,890
rules and have them automatically be

00:02:37,610 --> 00:02:43,130
acted on on packet receive and transmit

00:02:39,890 --> 00:02:46,510
so an IPSec packet would be received it

00:02:43,130 --> 00:02:49,430
would be recognized as such by OTP

00:02:46,510 --> 00:02:51,670
decrypted before it ever shows up and

00:02:49,430 --> 00:02:55,250
the application sees it similarly on

00:02:51,670 --> 00:02:57,470
transmit a plaintext packet would be

00:02:55,250 --> 00:02:59,120
sent off for encryption followed by

00:02:57,470 --> 00:03:05,050
transmission without ever having to come

00:02:59,120 --> 00:03:08,120
back to the application so from the

00:03:05,050 --> 00:03:11,350
application perspective we have bogdan

00:03:08,120 --> 00:03:18,410
and Petri who might want to offer some

00:03:11,350 --> 00:03:22,760
insights thank you so we have our DP

00:03:18,410 --> 00:03:25,610
this leukocyte api but on top we need to

00:03:22,760 --> 00:03:29,590
construct an application compliant

00:03:25,610 --> 00:03:32,690
application we need to have some things

00:03:29,590 --> 00:03:41,450
application of course they have to have

00:03:32,690 --> 00:03:49,070
policy database IP traffic for outbound

00:03:41,450 --> 00:03:53,840
both for secure and policies for bypass

00:03:49,070 --> 00:03:57,080
and discard you need to have secret

00:03:53,840 --> 00:04:02,540
Association databases even if it will

00:03:57,080 --> 00:04:05,510
provide one inbound lookup we need to

00:04:02,540 --> 00:04:07,850
have database secret association

00:04:05,510 --> 00:04:11,150
database we need to provide on outbound

00:04:07,850 --> 00:04:16,370
direction the secret Association if we

00:04:11,150 --> 00:04:20,180
want to store some statistics we have to

00:04:16,370 --> 00:04:23,630
have sufficient data base just or

00:04:20,180 --> 00:04:27,080
somewhere informations of course you

00:04:23,630 --> 00:04:30,290
need to have all bound cache because we

00:04:27,080 --> 00:04:33,439
need to search fast on our boundary

00:04:30,290 --> 00:04:37,500
action and provide security Association

00:04:33,439 --> 00:04:42,569
for inbound as I said the leucocyte API

00:04:37,500 --> 00:04:46,199
provides lookup based on a unique SPI

00:04:42,569 --> 00:04:50,159
but if you have multicast traffic you

00:04:46,199 --> 00:04:55,680
may also need to have some kind of cache

00:04:50,159 --> 00:04:57,180
to find fast Equity Association so an

00:04:55,680 --> 00:05:01,199
inbound cache and of course we need to

00:04:57,180 --> 00:05:07,009
have interaction with strongswan

00:05:01,199 --> 00:05:12,090
or some IP to implementation this is

00:05:07,009 --> 00:05:15,479
that box and of course you may know that

00:05:12,090 --> 00:05:18,419
on Friday we'll have a demo with this

00:05:15,479 --> 00:05:23,629
setup one application will be open fast

00:05:18,419 --> 00:05:27,930
part with special proof-of-concept page

00:05:23,629 --> 00:05:31,020
implementing all those things of course

00:05:27,930 --> 00:05:34,409
except for integration with the Samsung

00:05:31,020 --> 00:05:39,449
reduce static sector solutions for this

00:05:34,409 --> 00:05:42,659
proof concept and I think Ron is

00:05:39,449 --> 00:05:51,240
processing and during this meeting will

00:05:42,659 --> 00:05:53,639
present some results ok so if you are

00:05:51,240 --> 00:05:55,020
wondering how will be how the processing

00:05:53,639 --> 00:05:58,560
is taking place in a synchronous

00:05:55,020 --> 00:06:01,199
processing mode involved in outbound may

00:05:58,560 --> 00:06:03,000
mainly look like this when inbound by

00:06:01,199 --> 00:06:06,960
receiving packets in the processing loop

00:06:03,000 --> 00:06:10,259
on a worker thread we are using

00:06:06,960 --> 00:06:16,740
scheduling with our schedule scheduling

00:06:10,259 --> 00:06:21,539
packets and if the packet is ours for

00:06:16,740 --> 00:06:24,389
this node is ASP or age then we are

00:06:21,539 --> 00:06:29,039
processing as IPSec unique if it's

00:06:24,389 --> 00:06:33,870
unicast we can simply send it to VDP

00:06:29,039 --> 00:06:36,089
through a synchronous API because what

00:06:33,870 --> 00:06:38,849
DP will provide lookup and we'll

00:06:36,089 --> 00:06:43,370
identify sift Association if it is

00:06:38,849 --> 00:06:45,509
multicast then we will search in the

00:06:43,370 --> 00:06:49,740
inbound

00:06:45,509 --> 00:06:53,400
this will not be part of the demo and of

00:06:49,740 --> 00:06:55,789
course we receive the termination or the

00:06:53,400 --> 00:06:59,580
result of the synchronous processing

00:06:55,789 --> 00:07:03,979
also in the repeat read in ODP worker as

00:06:59,580 --> 00:07:10,110
an completion event on a synchronous

00:07:03,979 --> 00:07:12,900
event we need to process the result if

00:07:10,110 --> 00:07:18,419
it is a the processing was correct or

00:07:12,900 --> 00:07:20,550
not maybe the secret Association was not

00:07:18,419 --> 00:07:24,449
found and then we have to take some

00:07:20,550 --> 00:07:28,220
actions optionally we have to verify if

00:07:24,449 --> 00:07:31,620
the inbound if the inner pocket

00:07:28,220 --> 00:07:34,680
corresponds with the selectors for

00:07:31,620 --> 00:07:37,680
fitted with the sector Association this

00:07:34,680 --> 00:07:40,500
is an optional step and then we will

00:07:37,680 --> 00:07:45,210
move to processing further the inner

00:07:40,500 --> 00:07:49,050
pocket because the tunnel but it should

00:07:45,210 --> 00:07:55,199
work as well with transport mode going

00:07:49,050 --> 00:07:59,010
with their three an outbound processing

00:07:55,199 --> 00:08:02,430
is a little bit different because you

00:07:59,010 --> 00:08:05,220
are sending the packet from some

00:08:02,430 --> 00:08:10,590
processing in this case will be routing

00:08:05,220 --> 00:08:13,560
and of course if it is an IDE interface

00:08:10,590 --> 00:08:16,349
on which we want perform IPSec we need

00:08:13,560 --> 00:08:19,050
to consult cache outbound and if the

00:08:16,349 --> 00:08:20,840
cache is found in this protect will go

00:08:19,050 --> 00:08:25,370
to

00:08:20,840 --> 00:08:29,870
ODP providing security Association and

00:08:25,370 --> 00:08:33,570
on the termination of the result of the

00:08:29,870 --> 00:08:38,099
IPSec processing in a similar way we

00:08:33,570 --> 00:08:42,050
have an event a scheduled event process

00:08:38,099 --> 00:08:47,310
result and same packet to the interface

00:08:42,050 --> 00:08:51,180
so this will be demo on Friday lasting

00:08:47,310 --> 00:08:57,140
calls processing and as I said Nikki

00:08:51,180 --> 00:08:57,140
also some results thank you

00:09:00,960 --> 00:09:08,350
yeah maybe I'll add something without

00:09:04,420 --> 00:09:11,170
any slide so benefit from application

00:09:08,350 --> 00:09:13,810
point of view so we we have already a

00:09:11,170 --> 00:09:17,830
crypto API that you can do I basic but

00:09:13,810 --> 00:09:20,380
now adding an IPSec API allows first in

00:09:17,830 --> 00:09:23,200
leukocyte mode offload some packet

00:09:20,380 --> 00:09:25,360
transformation kind of encryption

00:09:23,200 --> 00:09:30,100
decryption adding headers removing

00:09:25,360 --> 00:09:34,990
headers and then then doing some kind of

00:09:30,100 --> 00:09:38,140
light offload like like the SA lookups

00:09:34,990 --> 00:09:40,240
and in inbound and and packet

00:09:38,140 --> 00:09:42,760
fragmentation potentially packet

00:09:40,240 --> 00:09:47,860
fragmentation outbound side so that's

00:09:42,760 --> 00:09:49,960
already all in leukocyte mode API and

00:09:47,860 --> 00:09:53,560
then as bill mentioned we are working on

00:09:49,960 --> 00:09:55,000
on inline version of the API so it's

00:09:53,560 --> 00:09:58,110
actually adding just a couple of

00:09:55,000 --> 00:10:03,060
configuration options there to enable

00:09:58,110 --> 00:10:05,590
coconut offload one one extra route

00:10:03,060 --> 00:10:08,800
round trip through the application and

00:10:05,590 --> 00:10:10,420
so that packets when they come in into

00:10:08,800 --> 00:10:12,220
the system day if there are IPSec

00:10:10,420 --> 00:10:14,620
packets they are already inbound

00:10:12,220 --> 00:10:17,290
processed before application sees it so

00:10:14,620 --> 00:10:18,730
it's kind of offloading extra cycles

00:10:17,290 --> 00:10:21,370
through the application code and the

00:10:18,730 --> 00:10:23,440
schedulers and queue short so it should

00:10:21,370 --> 00:10:25,900
give another bump on the on the

00:10:23,440 --> 00:10:28,510
performance so compared to crypto use

00:10:25,900 --> 00:10:31,270
its of crypto API the inline it it

00:10:28,510 --> 00:10:33,900
should be major major performance

00:10:31,270 --> 00:10:33,900
increase

00:10:37,360 --> 00:10:41,200
hello good morning everyone

00:10:42,010 --> 00:10:49,660
so basically we will go through what

00:10:44,560 --> 00:10:52,810
currently Lucas ID pays office so in

00:10:49,660 --> 00:10:56,020
addition to the crypto crypto processing

00:10:52,810 --> 00:10:58,150
I be like API offers the complete IPSec

00:10:56,020 --> 00:11:01,570
step stack to be offloaded to the

00:10:58,150 --> 00:11:04,240
hardware so like we can push the hip is

00:11:01,570 --> 00:11:06,190
like headers in the hardware they're

00:11:04,240 --> 00:11:09,310
different bottlenecks in the IPSec

00:11:06,190 --> 00:11:11,920
Crossing basically number update which

00:11:09,310 --> 00:11:13,830
is like you every packet will have to go

00:11:11,920 --> 00:11:17,740
through an atomic operation in case of

00:11:13,830 --> 00:11:19,330
updating in software or atomic Q so if

00:11:17,740 --> 00:11:22,240
you offloaded to the hardware at

00:11:19,330 --> 00:11:25,450
Hardware will will take care of that

00:11:22,240 --> 00:11:27,990
then for the IPSec header we need to

00:11:25,450 --> 00:11:31,600
generate a random IV number for every

00:11:27,990 --> 00:11:34,630
packet so that will be taken care in the

00:11:31,600 --> 00:11:37,210
hardware anti replay checks ICV

00:11:34,630 --> 00:11:42,280
checksums and obviously the crypto

00:11:37,210 --> 00:11:44,470
operations so as bill mentioned in this

00:11:42,280 --> 00:11:47,200
approach all the packets coming will be

00:11:44,470 --> 00:11:49,030
hitting the GPB first and then if i

00:11:47,200 --> 00:11:55,050
pacific processing is required they'll

00:11:49,030 --> 00:11:58,020
be interface through which we can link

00:11:55,050 --> 00:12:00,900
this is basically depicts the

00:11:58,020 --> 00:12:03,850
application and implementation domain

00:12:00,900 --> 00:12:05,530
segregating below is the implementation

00:12:03,850 --> 00:12:08,530
what implementation is taking care of

00:12:05,530 --> 00:12:10,690
basically in the hardware and what

00:12:08,530 --> 00:12:14,380
application needs to do in the software

00:12:10,690 --> 00:12:19,120
so packet is coming of a scheduler or

00:12:14,380 --> 00:12:20,020
directly through some q AP is so basic

00:12:19,120 --> 00:12:23,050
on des

00:12:20,020 --> 00:12:25,330
so when you receive a packet you check

00:12:23,050 --> 00:12:26,920
whether you have got an encrypted packet

00:12:25,330 --> 00:12:29,050
if you have got an encrypted packet you

00:12:26,920 --> 00:12:31,960
send it back to hardware and hardware

00:12:29,050 --> 00:12:35,860
does the IPSec related processing send

00:12:31,960 --> 00:12:37,900
it back by a ODB should you'll again you

00:12:35,860 --> 00:12:40,990
do that outlook of policy lookup and

00:12:37,900 --> 00:12:42,850
then if again the IPSec processing is

00:12:40,990 --> 00:12:46,870
required on that packet it goes where

00:12:42,850 --> 00:12:49,990
again the same crypt okay so the

00:12:46,870 --> 00:12:52,900
hardware interaction during this is a

00:12:49,990 --> 00:12:57,920
bit more so for that we have in line

00:12:52,900 --> 00:13:00,110
so so by offloading this to the hardware

00:12:57,920 --> 00:13:02,060
IPSec protocol processing so we have

00:13:00,110 --> 00:13:05,330
some significant performance

00:13:02,060 --> 00:13:08,210
improvements so this blue blocks here

00:13:05,330 --> 00:13:12,230
shows the kernel IPSec stack performance

00:13:08,210 --> 00:13:13,580
and this gray bar is the OTP example

00:13:12,230 --> 00:13:14,510
application that we have written over

00:13:13,580 --> 00:13:17,630
these APs

00:13:14,510 --> 00:13:20,270
so you can clearly see the difference so

00:13:17,630 --> 00:13:23,300
it is approximately like eleven times

00:13:20,270 --> 00:13:25,220
can perform what Linux that can perform

00:13:23,300 --> 00:13:30,080
obviously there are some additional

00:13:25,220 --> 00:13:32,930
stuff in Linux but we have got we have

00:13:30,080 --> 00:13:37,580
also ported this oh s P application over

00:13:32,930 --> 00:13:43,040
ODP air so that also outperform kernel

00:13:37,580 --> 00:13:48,110
with a significant gain so next is like

00:13:43,040 --> 00:13:55,460
we have this or DP inline offload

00:13:48,110 --> 00:13:57,890
proposal so basically in this model we

00:13:55,460 --> 00:14:01,430
have increased the implementation domain

00:13:57,890 --> 00:14:07,160
and reduce the application so that major

00:14:01,430 --> 00:14:08,660
of more of more offerings and more

00:14:07,160 --> 00:14:11,210
things are offloaded to the hardware

00:14:08,660 --> 00:14:12,980
like when a packet is received it is

00:14:11,210 --> 00:14:15,650
already checked in the hardware whether

00:14:12,980 --> 00:14:17,510
it is ESP or edge and it directly goes

00:14:15,650 --> 00:14:19,610
to the hardware crypto engine instead of

00:14:17,510 --> 00:14:23,900
going to the application and coming back

00:14:19,610 --> 00:14:25,850
to hardware again so in this a pro so if

00:14:23,900 --> 00:14:28,070
it is a encrypted packet it will be

00:14:25,850 --> 00:14:30,740
looked up in the hardware it goes to

00:14:28,070 --> 00:14:33,140
crypto module and then after being

00:14:30,740 --> 00:14:37,160
decrypted and removing the IPSec headers

00:14:33,140 --> 00:14:38,750
it goes back to application then so then

00:14:37,160 --> 00:14:41,660
application checks whether it was a

00:14:38,750 --> 00:14:43,970
packet direct received plane or it was

00:14:41,660 --> 00:14:46,280
like decrypted by the hardware so you

00:14:43,970 --> 00:14:47,840
can check the IPSec results and you just

00:14:46,280 --> 00:14:50,030
need to do the routing in the software

00:14:47,840 --> 00:14:52,790
and then on the hardware side it will

00:14:50,030 --> 00:14:55,550
again do the policy lookup in case it

00:14:52,790 --> 00:14:57,260
needs to be interrupted if it is it

00:14:55,550 --> 00:15:00,080
needs to be encrypted it will go to the

00:14:57,260 --> 00:15:02,270
hardware crypto block again and then out

00:15:00,080 --> 00:15:05,130
or otherwise it will can go directly out

00:15:02,270 --> 00:15:07,440
so there we can have a

00:15:05,130 --> 00:15:10,320
mcmanager as well under the thief site

00:15:07,440 --> 00:15:12,630
we can have classifier as well so this

00:15:10,320 --> 00:15:15,090
this reduces the hardware interactions

00:15:12,630 --> 00:15:19,050
the application needs to do for the

00:15:15,090 --> 00:15:29,940
crypt operations so basically in this

00:15:19,050 --> 00:15:32,150
proposal we IPSec directly by the IPSec

00:15:29,940 --> 00:15:37,560
offload engine instead of going to the

00:15:32,150 --> 00:15:43,320
GP P and then coming back then lookup is

00:15:37,560 --> 00:15:45,630
being offloaded to the hardware so so

00:15:43,320 --> 00:15:49,590
you can run the classification rule post

00:15:45,630 --> 00:15:51,960
IPSec on the receive side packets are

00:15:49,590 --> 00:15:54,150
like after encryption packets can be

00:15:51,960 --> 00:15:58,830
directly to packet IO or

00:15:54,150 --> 00:16:01,440
by the traffic manager API is so we have

00:15:58,830 --> 00:16:04,650
done some POC based on the draft API s--

00:16:01,440 --> 00:16:06,990
and this is what the performance

00:16:04,650 --> 00:16:09,300
difference so these three bars were

00:16:06,990 --> 00:16:11,070
earlier there so this is the green bar

00:16:09,300 --> 00:16:15,390
with the inline offload that we have

00:16:11,070 --> 00:16:18,180
achieved so it is almost hitting 20 G 20

00:16:15,390 --> 00:16:21,660
a VPS with I'm extract on single core

00:16:18,180 --> 00:16:24,420
itself so the cores are free for

00:16:21,660 --> 00:16:27,600
application to process any control trim

00:16:24,420 --> 00:16:30,150
or other processing so there is a

00:16:27,600 --> 00:16:32,910
significant boost in the performance and

00:16:30,150 --> 00:16:36,500
we'll be having demo for these three

00:16:32,910 --> 00:16:36,500
applications on Friday

00:16:42,380 --> 00:16:48,180
great I mean I think these are really

00:16:45,980 --> 00:16:50,730
impressive results because you look

00:16:48,180 --> 00:16:54,180
compared to the Linux kernel is hardly

00:16:50,730 --> 00:16:56,130
visible at this scale compared to the

00:16:54,180 --> 00:16:58,500
you know being able to get effectively

00:16:56,130 --> 00:17:03,090
line rate with a single core by just

00:16:58,500 --> 00:17:31,650
offloading the the full IPSec path so

00:17:03,090 --> 00:17:34,530
any questions for anyone here so HP is

00:17:31,650 --> 00:17:39,930
done is is doing much more actually

00:17:34,530 --> 00:17:46,530
doing and actually storing that

00:17:39,930 --> 00:17:49,860
databases policies and part of the Civic

00:17:46,530 --> 00:17:52,740
Association databases and also the

00:17:49,860 --> 00:17:55,290
caches for at least for all bomb

00:17:52,740 --> 00:17:57,840
direction you have to have to provide or

00:17:55,290 --> 00:18:00,720
DP the secret Association so you have to

00:17:57,840 --> 00:18:07,100
do a lookup in application level meaning

00:18:00,720 --> 00:18:11,730
in AFP in this case and so if we provide

00:18:07,100 --> 00:18:13,830
configuration means by API or July can

00:18:11,730 --> 00:18:16,320
configure it actually for the demo will

00:18:13,830 --> 00:18:20,100
have a configuration file that the

00:18:16,320 --> 00:18:23,430
syntax is similar to IPSec tools from

00:18:20,100 --> 00:18:27,470
Linux so he's not exactly but it's

00:18:23,430 --> 00:18:27,470
similar concept

00:18:33,700 --> 00:18:50,350
yes if you need a stake to do what

00:18:40,790 --> 00:18:50,350
another stack should so DP is not doing

00:19:03,310 --> 00:19:09,200
so yeah Oh dpi basically is kind of

00:19:06,290 --> 00:19:12,710
example of the case in doing I think

00:19:09,200 --> 00:19:14,690
it's kind of doing a gateway type of

00:19:12,710 --> 00:19:16,970
thing that it's terminating that other

00:19:14,690 --> 00:19:19,610
side might be taken ten maybe

00:19:16,970 --> 00:19:21,800
Nicola can comment a bit more but off

00:19:19,610 --> 00:19:24,520
bail obviously it's a fully stocked it's

00:19:21,800 --> 00:19:33,590
kind of hostage EP and every karate

00:19:24,520 --> 00:19:36,650
whatever so it's it's a full stack yeah

00:19:33,590 --> 00:19:40,760
yeah of course yeah of course yeah yeah

00:19:36,650 --> 00:19:44,150
so yeah so yeah it's kind of working on

00:19:40,760 --> 00:19:46,460
parallel at the same time yeah just one

00:19:44,150 --> 00:19:48,680
more point oh if he's still not build on

00:19:46,460 --> 00:19:51,130
this in line it gets the green but that

00:19:48,680 --> 00:19:51,130
is shown

00:20:13,540 --> 00:20:18,350
from hardware perspective it is like one

00:20:16,760 --> 00:20:20,930
is like you are reducing the hardware

00:20:18,350 --> 00:20:24,770
interaction with GPP because hardware is

00:20:20,930 --> 00:20:26,600
from interface network interface packet

00:20:24,770 --> 00:20:28,730
is directly coming to the crypto clock

00:20:26,600 --> 00:20:42,200
not going to the GPP and coming back and

00:20:28,730 --> 00:20:48,200
then within line so it's a capability so

00:20:42,200 --> 00:20:50,240
yeah or a PAPR or EP API has a

00:20:48,200 --> 00:20:53,540
capability flag if inline mode is

00:20:50,240 --> 00:20:56,450
supported or not so the leucocyte must

00:20:53,540 --> 00:20:58,010
be should be always supported but in

00:20:56,450 --> 00:21:00,740
line is countries that support it an

00:20:58,010 --> 00:21:02,300
application can choose that yeah so you

00:21:00,740 --> 00:21:04,310
know one of the goals Rho DP is

00:21:02,300 --> 00:21:07,370
portability across different platforms

00:21:04,310 --> 00:21:10,520
and so when this feature is introduced

00:21:07,370 --> 00:21:12,920
an official release all ODP conforming

00:21:10,520 --> 00:21:15,590
releases will support inline now whether

00:21:12,920 --> 00:21:17,480
the in line is leverages full hardware

00:21:15,590 --> 00:21:19,670
capabilities or whether the OTT

00:21:17,480 --> 00:21:22,160
implementation is doing all are part of

00:21:19,670 --> 00:21:25,700
that and software will vary based on

00:21:22,160 --> 00:21:28,130
platform so for instance in the you know

00:21:25,700 --> 00:21:29,600
Linux generic reference implementation

00:21:28,130 --> 00:21:30,680
everything will be done in software and

00:21:29,600 --> 00:21:32,360
obviously you will not get the

00:21:30,680 --> 00:21:33,920
performance boost but you will still

00:21:32,360 --> 00:21:36,520
have the application doesn't have to

00:21:33,920 --> 00:21:36,520
worry about it

00:21:41,100 --> 00:21:58,680
this one this is an XPS platform 128 s

00:22:05,400 --> 00:22:17,350
so it will do a check so when you

00:22:14,620 --> 00:22:19,510
receive a packet on an inbound side it

00:22:17,350 --> 00:22:22,030
does a lookup we found that they so

00:22:19,510 --> 00:22:24,910
hardware will tell you if there is any

00:22:22,030 --> 00:22:27,850
error in the packet it is anti replay

00:22:24,910 --> 00:22:29,950
failures or is there any ICV failure so

00:22:27,850 --> 00:22:32,650
it will report back in the results

00:22:29,950 --> 00:22:35,320
structure and that IPSec event will show

00:22:32,650 --> 00:22:37,900
you that you'll check in the IPSec

00:22:35,320 --> 00:22:40,230
result is there any beta set for the

00:22:37,900 --> 00:22:40,230
packet

00:22:56,520 --> 00:23:06,730
yes I say look up on the inbound side

00:23:05,140 --> 00:23:11,130
we'll be done in the hard way and

00:23:06,730 --> 00:23:11,130
outbound side it will then in the soft

00:23:13,530 --> 00:23:22,240
because policy are not offloaded in the

00:23:16,450 --> 00:23:23,980
leucocyte modules on the out points now

00:23:22,240 --> 00:23:29,169
it you don't have a spare you will have

00:23:23,980 --> 00:23:31,740
to do the polysilicon yet that that is

00:23:29,169 --> 00:23:31,740
done in hardware

00:23:32,730 --> 00:23:39,280
so such comment on the so this is under

00:23:36,100 --> 00:23:42,210
PCI stuff is under work work so so we

00:23:39,280 --> 00:23:45,130
are debating if the policy should be

00:23:42,210 --> 00:23:48,730
under the API or on the application side

00:23:45,130 --> 00:23:50,620
and it we may take in in phases or but

00:23:48,730 --> 00:23:53,380
my proposal will take it in phases so

00:23:50,620 --> 00:23:55,929
that the policy lookup is not in the OTP

00:23:53,380 --> 00:23:59,610
in the first in line face but maybe

00:23:55,929 --> 00:23:59,610
write it later like it's in the picture

00:24:09,930 --> 00:24:16,630
yeah it's in its look aside it's in the

00:24:13,720 --> 00:24:19,810
impound there is a kind of option to

00:24:16,630 --> 00:24:22,290
take have the SLO Cup in in in our

00:24:19,810 --> 00:24:25,330
episode so

00:24:22,290 --> 00:24:28,030
it leukocyte there's no outbound as

00:24:25,330 --> 00:24:30,370
lookups only inbound and actually tech

00:24:28,030 --> 00:24:32,740
so their application can choose to just

00:24:30,370 --> 00:24:35,200
shuffle the packets there and make the

00:24:32,740 --> 00:24:38,530
offload in they say look up offload on

00:24:35,200 --> 00:24:44,140
ODP side or if you already know this you

00:24:38,530 --> 00:24:45,940
can also give packet and I say option to

00:24:44,140 --> 00:24:52,450
use to offload or not not used to

00:24:45,940 --> 00:24:56,460
offload so output sound output outside

00:24:52,450 --> 00:24:56,460
application always gives packet and si

00:25:04,110 --> 00:25:10,690
so so out point application first

00:25:08,290 --> 00:25:13,090
Christa si gives all the keys and all

00:25:10,690 --> 00:25:15,160
the parameters watts per meters and then

00:25:13,090 --> 00:25:20,020
on outbound it always gives packet and

00:25:15,160 --> 00:25:21,670
si packet and sa ya know and all the

00:25:20,020 --> 00:25:25,750
configuration all the configuration yeah

00:25:21,670 --> 00:25:29,070
including SP yeah in point in point you

00:25:25,750 --> 00:25:32,740
can choose if if you want the

00:25:29,070 --> 00:25:35,140
development implementation to do the SPR

00:25:32,740 --> 00:25:38,350
look up for you or or not

00:25:35,140 --> 00:25:40,030
so in pound it can do it outbound

00:25:38,350 --> 00:25:44,760
application always gives that explicit

00:25:40,030 --> 00:25:44,760
this SATs packet this as this packet

00:25:53,510 --> 00:26:02,550
[Applause]

00:25:57,840 --> 00:26:02,550

YouTube URL: https://www.youtube.com/watch?v=EZXiHRU2uZM


