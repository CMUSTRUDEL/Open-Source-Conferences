Title: Bud17-307 SCHED_DEADLINE: ongoing development and new features
Publication date: 2017-03-11
Playlist: Linaro Connect Budapest 2017
Description: 
	"Session ID: BUD17-307
Session Name: SCHED_DEADLINE: ongoing development and new features - BUD17-307
Speaker: Juri Lelli
Track: Power Management


★ Session Summary ★
After deadline scheduling for processes (SCHED_DEADLINE scheduling policy) has been merged in the Linux kernel in Mar-2014 (version 3.14) a considerable effort has been put into actively maintaining it, but no further development really happened after that date, until recently.
 
In this presentation, Juri Lelli, after giving a (very briefly) review of the current set of features, will deep dive into the details of all the new features currently under development: CPU capacity and clock frequency scaling, bandwidth reclaiming, coupling with clock frequency selection and cgroups support.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/bud17/bud17-307/
Presentation: https://www.slideshare.net/linaroorg/bud17307-scheddeadline-ongoing-development-and-new-features
Video: https://youtu.be/YXjWDjzzhV8
 ---------------------------------------------------

★ Event Details ★
Linaro Connect Budapest 2017 (BUD17)
6-10 March 2017
Corinthia Hotel, Budapest,
Erzsébet krt. 43-49,
1073 Hungary

---------------------------------------------------
Keyword: Power-management, sched-deadline
http://www.linaro.org
http://connect.linaro.org
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961"
Captions: 
	00:00:00,240 --> 00:00:03,439
[Music]

00:00:09,980 --> 00:00:18,810
right okay therefore reconning I'm you

00:00:15,570 --> 00:00:21,660
deadly and work in harm I've been

00:00:18,810 --> 00:00:25,080
working last three years mostly on the

00:00:21,660 --> 00:00:29,640
energyaware shredder initiatives mostly

00:00:25,080 --> 00:00:34,020
focus on the cpu freak governor parts

00:00:29,640 --> 00:00:37,430
and the energy model before joining arm

00:00:34,020 --> 00:00:40,890
I actually work on these deadlines

00:00:37,430 --> 00:00:43,500
little kernel scheduler and I

00:00:40,890 --> 00:00:46,860
participate in the project and then the

00:00:43,500 --> 00:00:50,700
team cosmas so that's why basically here

00:00:46,860 --> 00:00:52,260
today also i'll be talking about the

00:00:50,700 --> 00:00:55,020
ongoing development that we are doing

00:00:52,260 --> 00:00:59,340
both at arm and collaborating with the

00:00:55,020 --> 00:01:01,140
university Oh Pizza about this and we I

00:00:59,340 --> 00:01:04,260
don't have much time in this session

00:01:01,140 --> 00:01:06,290
soils just came through the to the new

00:01:04,260 --> 00:01:08,939
feature so we are trying to add to the

00:01:06,290 --> 00:01:11,040
treasure but we have an a concession in

00:01:08,939 --> 00:01:13,290
the afternoon so you are very welcome to

00:01:11,040 --> 00:01:16,740
to come there will be more time to

00:01:13,290 --> 00:01:19,650
discuss details alright so that's

00:01:16,740 --> 00:01:23,100
basically what ie I'd like to share with

00:01:19,650 --> 00:01:25,380
you today give really freaking to the

00:01:23,100 --> 00:01:27,780
introduction about what deadline

00:01:25,380 --> 00:01:33,420
shadowing is and then I'll say about the

00:01:27,780 --> 00:01:36,119
new feature that we are developing okay

00:01:33,420 --> 00:01:37,770
so what's a deadline was dead when shall

00:01:36,119 --> 00:01:40,350
you another shin is basically an

00:01:37,770 --> 00:01:43,020
additional scheduling policy in class

00:01:40,350 --> 00:01:47,520
for the linux red alert set it has been

00:01:43,020 --> 00:01:50,939
melt in v3 dot 14 so it really roughly

00:01:47,520 --> 00:01:54,570
three years ago I guess the main

00:01:50,939 --> 00:01:58,680
features is that despite the name it's

00:01:54,570 --> 00:02:00,719
not only about deadlines why so but it

00:01:58,680 --> 00:02:03,899
is a real-time scheduling policy like

00:02:00,719 --> 00:02:06,899
sched FIFO or skater are but it's

00:02:03,899 --> 00:02:10,860
basically i say more powerful because

00:02:06,899 --> 00:02:14,090
you can actually explicitly specify

00:02:10,860 --> 00:02:16,860
first oscillating signal strength

00:02:14,090 --> 00:02:19,590
using the new API so there is a new

00:02:16,860 --> 00:02:22,530
cisco that is being introduced and using

00:02:19,590 --> 00:02:25,730
this code you have more reach api to

00:02:22,530 --> 00:02:29,459
specify this lady three constraints the

00:02:25,730 --> 00:02:32,280
by design avoid starvation between us

00:02:29,459 --> 00:02:34,709
and the internal reach is the scheduler

00:02:32,280 --> 00:02:37,260
knowledge about the quality of service

00:02:34,709 --> 00:02:42,660
requirements of the different activities

00:02:37,260 --> 00:02:45,480
that run on your system it implements a

00:02:42,660 --> 00:02:49,380
couple of algorithm the basic one is

00:02:45,480 --> 00:02:51,329
iess for earlier deadening fourth it

00:02:49,380 --> 00:02:55,260
means that you visually price our eyes

00:02:51,329 --> 00:02:58,590
the sasku d earlier said length and then

00:02:55,260 --> 00:03:01,290
it's also implements edss sense for

00:02:58,590 --> 00:03:07,290
cause a badly server which is basically

00:03:01,290 --> 00:03:09,780
the nativities the guys actually we

00:03:07,290 --> 00:03:12,810
deciding which are the dynamic deadlines

00:03:09,780 --> 00:03:14,700
i said i wanted to imitate so we are

00:03:12,810 --> 00:03:15,989
free to asleep most question after the

00:03:14,700 --> 00:03:18,959
sessions there is no time to actually

00:03:15,989 --> 00:03:20,940
and in thursday's it implements the

00:03:18,959 --> 00:03:23,900
resource reservation mechanism and the

00:03:20,940 --> 00:03:26,549
resource here is of course cpu time and

00:03:23,900 --> 00:03:29,940
the internet for the temper isolation

00:03:26,549 --> 00:03:32,700
between tasks so task belonging to

00:03:29,940 --> 00:03:36,780
different reservation cannot jeopardize

00:03:32,700 --> 00:03:38,880
each other activities there is whether i

00:03:36,780 --> 00:03:42,000
actually now a couple of presentations

00:03:38,880 --> 00:03:44,630
so that I even last year experimentation

00:03:42,000 --> 00:03:47,400
a TLC and you can find a link there

00:03:44,630 --> 00:03:50,430
where I actually talked about all the

00:03:47,400 --> 00:03:53,250
details of the current of limitation and

00:03:50,430 --> 00:03:56,819
actually I given a like a longer a

00:03:53,250 --> 00:04:00,389
longer view of these new features a

00:03:56,819 --> 00:04:03,359
couple of weeks ago a TLC 2017 so you

00:04:00,389 --> 00:04:07,650
also find that information probably

00:04:03,359 --> 00:04:10,410
YouTube already so why we actually

00:04:07,650 --> 00:04:13,319
decide to try to spend some more time on

00:04:10,410 --> 00:04:17,480
it basically as part of the energyaware

00:04:13,319 --> 00:04:22,700
shell and scheduling work we

00:04:17,480 --> 00:04:25,730
and also after Billy yes actually

00:04:22,700 --> 00:04:28,490
immerse in the annoying bit of comic

00:04:25,730 --> 00:04:30,470
relief come on colonel we eventually

00:04:28,490 --> 00:04:32,870
realize that there are some skill some

00:04:30,470 --> 00:04:39,350
activities going going on in season that

00:04:32,870 --> 00:04:41,090
really needs a very sweet latency really

00:04:39,350 --> 00:04:43,940
need to meet very strict latency

00:04:41,090 --> 00:04:45,800
requirements so what that what's

00:04:43,940 --> 00:04:49,820
happening in Android Esther for those

00:04:45,800 --> 00:04:53,270
few DVDs we basically start to use this

00:04:49,820 --> 00:04:58,610
cat 5 or so it's really using NRC

00:04:53,270 --> 00:05:00,740
scheduling policy and in class things

00:04:58,610 --> 00:05:05,300
actually works fine but the problem is

00:05:00,740 --> 00:05:08,510
that there are a few I they are also

00:05:05,300 --> 00:05:10,160
quite invasive modification they were

00:05:08,510 --> 00:05:12,490
required to actually make this this

00:05:10,160 --> 00:05:17,390
thing work for for Android and

00:05:12,490 --> 00:05:21,920
personally I guess it's not so easy to

00:05:17,390 --> 00:05:25,550
see those multiplication melt upstream

00:05:21,920 --> 00:05:28,940
so the point here is that scat airline

00:05:25,550 --> 00:05:32,420
seems to be a better fit for me for

00:05:28,940 --> 00:05:35,060
those kind of activities and secondly

00:05:32,420 --> 00:05:36,980
the same kind of modification that will

00:05:35,060 --> 00:05:40,490
be required to actually make it useful

00:05:36,980 --> 00:05:42,710
it seemed to be easier to defend on the

00:05:40,490 --> 00:05:45,010
line of communities so to propose to the

00:05:42,710 --> 00:05:48,050
maintainer that's why I basically we

00:05:45,010 --> 00:05:50,630
started working on it again and actually

00:05:48,050 --> 00:05:52,820
this activity is a joint collaboration

00:05:50,630 --> 00:05:55,130
between armed and scholars for Santana

00:05:52,820 --> 00:05:57,950
pizza which is also basically like the

00:05:55,130 --> 00:06:00,470
laboratory which are you working on you

00:05:57,950 --> 00:06:03,860
remind you see this actually make this

00:06:00,470 --> 00:06:08,510
thing the scheduler impossible and up

00:06:03,860 --> 00:06:13,310
three same guys start already okay so

00:06:08,510 --> 00:06:16,010
let's enter into some details the first

00:06:13,310 --> 00:06:19,070
new feature they were actually in cement

00:06:16,010 --> 00:06:21,110
is called bandwidth reclaiming what's

00:06:19,070 --> 00:06:24,770
the problem we'd be covering my line

00:06:21,110 --> 00:06:27,800
square deadline the promise that once

00:06:24,770 --> 00:06:30,060
you use interface so these nooses see

00:06:27,800 --> 00:06:32,160
school calls gets attached

00:06:30,060 --> 00:06:34,950
then we been with it that you are

00:06:32,160 --> 00:06:37,139
located to the task speaks so the task

00:06:34,950 --> 00:06:39,630
is has to actually run inside that

00:06:37,139 --> 00:06:42,000
amount of run time that you actually

00:06:39,630 --> 00:06:44,250
allocated to the task but what happens

00:06:42,000 --> 00:06:47,220
if the task occasionally need more

00:06:44,250 --> 00:06:49,830
benefits that was he actually requested

00:06:47,220 --> 00:06:52,320
to the system but we say it is total so

00:06:49,830 --> 00:06:54,690
you cannot express Kate this is run time

00:06:52,320 --> 00:06:57,410
so if you for example have some

00:06:54,690 --> 00:06:59,990
occasional workload for populations like

00:06:57,410 --> 00:07:03,030
you to for example network traffic

00:06:59,990 --> 00:07:05,790
changes or maybe your render a

00:07:03,030 --> 00:07:07,680
particularly heavy frame in the

00:07:05,790 --> 00:07:10,979
rendering pipeline your task will be

00:07:07,680 --> 00:07:13,710
total so that my effect d actually the

00:07:10,979 --> 00:07:19,620
worker service so my affect water user

00:07:13,710 --> 00:07:22,530
experience is to to fix this this

00:07:19,620 --> 00:07:25,770
problem we are proposing a solution that

00:07:22,530 --> 00:07:27,840
implements this thing binary claiming we

00:07:25,770 --> 00:07:30,979
are proposing already this thing also on

00:07:27,840 --> 00:07:36,240
many lists so they've been at least four

00:07:30,979 --> 00:07:38,669
successive yes success posted on the new

00:07:36,240 --> 00:07:41,100
economy release will be probably a v5 of

00:07:38,669 --> 00:07:42,890
this set of features hopefully by this

00:07:41,100 --> 00:07:45,930
week or next week and we are actually

00:07:42,890 --> 00:07:51,260
finishing the setting of the new other

00:07:45,930 --> 00:07:54,450
new set what it does is basically gives

00:07:51,260 --> 00:07:58,020
tough the possibility to consume more

00:07:54,450 --> 00:08:01,919
than what they've been allocated at red

00:07:58,020 --> 00:08:05,100
set of time by basically you can specify

00:08:01,919 --> 00:08:06,960
a certain maximum fraction of sickle

00:08:05,100 --> 00:08:10,020
time that those size can actually clean

00:08:06,960 --> 00:08:11,789
and of course this has to steal

00:08:10,020 --> 00:08:15,210
guarantee the temporal isolation so you

00:08:11,789 --> 00:08:17,220
don't want that by advocating this more

00:08:15,210 --> 00:08:18,720
bandwidth of toast our sources can

00:08:17,220 --> 00:08:22,770
actually drop or dies other activities

00:08:18,720 --> 00:08:26,669
that's the basics yeah I put here's the

00:08:22,770 --> 00:08:29,010
link to the last olympian mailing list

00:08:26,669 --> 00:08:34,709
forcing you can find more information

00:08:29,010 --> 00:08:36,690
there and that's what the solution is

00:08:34,709 --> 00:08:39,209
implementing its implementing an

00:08:36,690 --> 00:08:41,780
algorithm called grab which stands for

00:08:39,209 --> 00:08:43,710
greedy reclamation of unused entities

00:08:41,780 --> 00:08:48,240
which is

00:08:43,710 --> 00:08:50,100
composed by three main parts again you

00:08:48,240 --> 00:08:52,650
can find more information on the papers

00:08:50,100 --> 00:08:55,020
that i am putting their obviously

00:08:52,650 --> 00:09:00,240
composed by a mechanism of to actually

00:08:55,020 --> 00:09:03,870
track the utilization of the XE task on

00:09:00,240 --> 00:09:06,410
the season it modifies the schedule a

00:09:03,870 --> 00:09:08,310
country ruled the country rule is be

00:09:06,410 --> 00:09:11,040
basically this the thing that actually

00:09:08,310 --> 00:09:14,820
enforces the runtime of the running

00:09:11,040 --> 00:09:16,920
tasks and then if basically the

00:09:14,820 --> 00:09:19,740
implementation actually extends the

00:09:16,920 --> 00:09:21,360
original grab algorithm because there

00:09:19,740 --> 00:09:23,760
are greater was actually designed for

00:09:21,360 --> 00:09:25,830
uniprocessor systems well of course we

00:09:23,760 --> 00:09:31,260
have to support multi processor so we

00:09:25,830 --> 00:09:34,770
need to make some modifications except

00:09:31,260 --> 00:09:39,060
you're very welcome to come these these

00:09:34,770 --> 00:09:42,450
operating it's at two right there 20 to

00:09:39,060 --> 00:09:52,230
30 in section 2 there will be the second

00:09:42,450 --> 00:09:54,780
session yeah just some very very easy

00:09:52,230 --> 00:09:57,210
results this is all running synthetics

00:09:54,780 --> 00:10:00,570
but just to highlight what's the purpose

00:09:57,210 --> 00:10:02,550
of these this feature let's say that

00:10:00,570 --> 00:10:05,430
scientist this particular example you

00:10:02,550 --> 00:10:09,510
have to toss granular same with you you

00:10:05,430 --> 00:10:11,520
have once a freeze if a constant

00:10:09,510 --> 00:10:13,560
execution time in south of five mini

00:10:11,520 --> 00:10:15,930
second it is it is running side a

00:10:13,560 --> 00:10:18,330
six-minute egg on 20 minutes check on

00:10:15,930 --> 00:10:21,270
the reservation please running together

00:10:18,330 --> 00:10:23,750
with analysis that is 45 minutes seconds

00:10:21,270 --> 00:10:26,730
when and 60 milliseconds tough

00:10:23,750 --> 00:10:30,150
reservation but the task actually run

00:10:26,730 --> 00:10:32,910
sign varies between 45 and 50

00:10:30,150 --> 00:10:34,830
millisecond what I am showing here is a

00:10:32,910 --> 00:10:37,160
community resource of distribution

00:10:34,830 --> 00:10:41,640
functions of the response time

00:10:37,160 --> 00:10:44,310
experienced by the two tasks how to read

00:10:41,640 --> 00:10:46,680
this basically you have the response

00:10:44,310 --> 00:10:50,520
time experience with us on the x-axis

00:10:46,680 --> 00:10:52,230
and you want as you want that the X

00:10:50,520 --> 00:10:55,260
response time if you want to cross this

00:10:52,230 --> 00:10:56,460
line which is the 216 mini second

00:10:55,260 --> 00:10:59,220
deadline for the same

00:10:56,460 --> 00:11:02,460
on top the problem with the current

00:10:59,220 --> 00:11:05,910
deadline implementation is that scene

00:11:02,460 --> 00:11:08,550
the second thoughts sometime goes try to

00:11:05,910 --> 00:11:10,440
execute for more than the 45 minutes

00:11:08,550 --> 00:11:12,630
seconds that has been granted is

00:11:10,440 --> 00:11:15,660
actually total so there is a non-null

00:11:12,630 --> 00:11:19,230
probability that the task actually have

00:11:15,660 --> 00:11:24,740
to agree miss his deadline is that when

00:11:19,230 --> 00:11:28,620
you enable the been with ultimate

00:11:24,740 --> 00:11:30,930
feature let us can actually reclaim some

00:11:28,620 --> 00:11:35,760
of the spare bandwidth so you can

00:11:30,930 --> 00:11:38,660
complete always before the 216 yourself

00:11:35,760 --> 00:11:41,100
it is a really simple example just to

00:11:38,660 --> 00:11:48,660
show how the thing actually can be

00:11:41,100 --> 00:11:51,990
useful alright so that is the first set

00:11:48,660 --> 00:11:54,390
of patches and incidentally this new

00:11:51,990 --> 00:11:57,020
feature another thing that we actually

00:11:54,390 --> 00:12:00,960
need these of course cpu frequency

00:11:57,020 --> 00:12:04,140
scaling so currently the reservation

00:12:00,960 --> 00:12:05,940
parameter our peak so when and basically

00:12:04,140 --> 00:12:08,760
something is that you always run at the

00:12:05,940 --> 00:12:11,760
maximum frequency but of course if we

00:12:08,760 --> 00:12:14,430
plan to use this on android platform we

00:12:11,760 --> 00:12:16,980
actually want to save energy and power

00:12:14,430 --> 00:12:19,910
by iranian lower frequencies so we need

00:12:16,980 --> 00:12:23,640
to scale the reservation parameter i

00:12:19,910 --> 00:12:26,160
work we actually need only to scale the

00:12:23,640 --> 00:12:29,220
runtime because we figure this it speaks

00:12:26,160 --> 00:12:31,590
i mean it's a frequent imbalance by

00:12:29,220 --> 00:12:34,410
itself the runtime against the

00:12:31,590 --> 00:12:37,830
assumption is that we can scale linearly

00:12:34,410 --> 00:12:40,290
the runtime with the clock frequency

00:12:37,830 --> 00:12:42,300
it's an assumption right kind of work in

00:12:40,290 --> 00:12:45,990
practice and practice and it's similar

00:12:42,300 --> 00:12:50,220
to what the CSS not tracking mechanism

00:12:45,990 --> 00:12:53,220
already does here I only detail the

00:12:50,220 --> 00:12:57,500
formula that we apply to scale run fine

00:12:53,220 --> 00:13:00,090
considering clock frequency or capacity

00:12:57,500 --> 00:13:02,730
battery capacities the saturation of the

00:13:00,090 --> 00:13:07,950
available clock frequency considering it

00:13:02,730 --> 00:13:10,320
zeroes 1024 scale not in not in fancy we

00:13:07,950 --> 00:13:12,780
apply this formula so it's basically

00:13:10,320 --> 00:13:17,220
multiply in the original runtime by the

00:13:12,780 --> 00:13:19,080
ratio of the max capacity in the car at

00:13:17,220 --> 00:13:22,140
the current capacity and a gives you

00:13:19,080 --> 00:13:25,620
that bit more of run time to actually

00:13:22,140 --> 00:13:28,860
complete spinning time we apply this for

00:13:25,620 --> 00:13:32,910
frequency we then have to apply the very

00:13:28,860 --> 00:13:35,390
basics a similar formula for CPU in

00:13:32,910 --> 00:13:37,830
volumes if you have curing in a

00:13:35,390 --> 00:13:41,190
accepting a big little system when you

00:13:37,830 --> 00:13:44,160
have different max capacity for the

00:13:41,190 --> 00:13:48,740
difference abuse is the same thing again

00:13:44,160 --> 00:13:53,190
the belt is doing already yeah I have

00:13:48,740 --> 00:13:54,960
another couple of slides retailing how

00:13:53,190 --> 00:13:57,930
this thing actually works in practice on

00:13:54,960 --> 00:14:01,860
for example run this some experience on

00:13:57,930 --> 00:14:04,940
a keyboard and again I can show you this

00:14:01,860 --> 00:14:12,690
beep in there hacking session so again

00:14:04,940 --> 00:14:14,520
come right now that we have frequent

00:14:12,690 --> 00:14:18,060
sensitive scaling we actually want to

00:14:14,520 --> 00:14:22,790
drive frequency it was basically what a

00:14:18,060 --> 00:14:26,070
main line today with the schedule till

00:14:22,790 --> 00:14:28,620
governor is only considering they say

00:14:26,070 --> 00:14:32,700
considers their the depreciation

00:14:28,620 --> 00:14:35,070
requirements for these CSS cos but then

00:14:32,700 --> 00:14:37,500
when you have either real time or

00:14:35,070 --> 00:14:41,100
peasant as we just go to mix and that's

00:14:37,500 --> 00:14:46,110
of course not I optimal say so you want

00:14:41,100 --> 00:14:48,990
something better the idea is that you

00:14:46,110 --> 00:14:51,360
need to scale clock frequency but still

00:14:48,990 --> 00:14:55,910
you want to meet task requirements so

00:14:51,360 --> 00:14:55,910
you cannot actually scale too much I

00:14:56,120 --> 00:15:02,790
said okay normal views with Yuka

00:14:58,980 --> 00:15:06,870
leverage which is the bell signal and

00:15:02,790 --> 00:15:09,540
then currently 500 let go to max so the

00:15:06,870 --> 00:15:12,780
plan is once the bandwidth claiming set

00:15:09,540 --> 00:15:16,160
is I cannot be in so it's accepting them

00:15:12,780 --> 00:15:20,010
in the new kernel then we can start

00:15:16,160 --> 00:15:23,210
adding up the sky deadline for cpu

00:15:20,010 --> 00:15:26,430
utilization contribution to the CSS

00:15:23,210 --> 00:15:28,410
contribution and then come up with the I

00:15:26,430 --> 00:15:33,590
mean summon up to do is basically

00:15:28,410 --> 00:15:33,590
considering both utilization requirement

00:15:33,920 --> 00:15:41,130
we have also to move the places in the

00:15:38,760 --> 00:15:45,060
sky deadline schedule where we actually

00:15:41,130 --> 00:15:48,180
trigger OPP request again too much

00:15:45,060 --> 00:15:52,500
details the fact is that currently we

00:15:48,180 --> 00:15:54,330
trigger on tick boundary by dozen really

00:15:52,500 --> 00:15:56,130
make sense for deadline just because the

00:15:54,330 --> 00:15:59,610
algorithm works differently so we need

00:15:56,130 --> 00:16:03,780
to change that it's not invasive change

00:15:59,610 --> 00:16:06,150
I guess out of the trees are the most

00:16:03,780 --> 00:16:09,660
probably controversial well maybe the

00:16:06,150 --> 00:16:11,880
fact that for platform that actually

00:16:09,660 --> 00:16:15,570
requires might require to sleep for

00:16:11,880 --> 00:16:18,930
changing frequencies like Nam systems we

00:16:15,570 --> 00:16:21,180
are the scheduler city for a governor is

00:16:18,930 --> 00:16:23,790
currently using a key worker to actually

00:16:21,180 --> 00:16:26,070
do the job this K warfare currently

00:16:23,790 --> 00:16:29,550
scheduled by a scape fifo but of course

00:16:26,070 --> 00:16:31,890
if you need to change frequency for

00:16:29,550 --> 00:16:34,500
scheduling cos you want that guy to

00:16:31,890 --> 00:16:36,180
actually be able to preempt scheduled

00:16:34,500 --> 00:16:39,060
activities two extra change the people

00:16:36,180 --> 00:16:43,200
who will need to make it a deadline from

00:16:39,060 --> 00:16:45,300
is that what what parameters then you

00:16:43,200 --> 00:16:47,550
associate to the task which deadly

00:16:45,300 --> 00:16:49,830
runtime the current solution that I

00:16:47,550 --> 00:16:51,870
thought is that IE basically treat that

00:16:49,830 --> 00:16:54,180
guy as a special deadline tart which

00:16:51,870 --> 00:16:56,220
creams everybody and can actually change

00:16:54,180 --> 00:16:58,110
people maybe it's a credible way not

00:16:56,220 --> 00:17:02,420
we'll have to discuss these things on a

00:16:58,110 --> 00:17:05,250
very Michigan again a concession

00:17:02,420 --> 00:17:07,199
motivates oh and by the way this class

00:17:05,250 --> 00:17:10,020
could be no working for evidence which

00:17:07,199 --> 00:17:11,990
is a start-up of quality Rios internal

00:17:10,020 --> 00:17:17,420
pieces have been with those needs and

00:17:11,990 --> 00:17:21,709
just want to mention this okay so last

00:17:17,420 --> 00:17:24,660
part of the series group sharing

00:17:21,709 --> 00:17:31,170
currently scheduled and doesn't support

00:17:24,660 --> 00:17:33,990
group sharing as CFS and fifo do so

00:17:31,170 --> 00:17:36,220
Billy current we have a one-to-one

00:17:33,990 --> 00:17:39,520
association between us

00:17:36,220 --> 00:17:41,440
and reservation you cannot prove Seto

00:17:39,520 --> 00:17:44,289
task installation reservation but

00:17:41,440 --> 00:17:48,909
sometimes it might be better easier to

00:17:44,289 --> 00:17:50,770
actually do this kind of association for

00:17:48,909 --> 00:17:54,400
example you can have you can run you can

00:17:50,770 --> 00:17:58,419
principal thing to run beautiful machine

00:17:54,400 --> 00:18:00,370
thread on the same reservation or if you

00:17:58,419 --> 00:18:04,360
have a rendering pipeline you might want

00:18:00,370 --> 00:18:06,250
to reserve a fraction of CPU times the

00:18:04,360 --> 00:18:08,980
whole pipeline or set of task of the

00:18:06,250 --> 00:18:11,350
pipeline you might need to support

00:18:08,980 --> 00:18:15,940
legacy application which don't actually

00:18:11,350 --> 00:18:17,950
we cannot which the sub-code of cannot

00:18:15,940 --> 00:18:23,710
be modified so you might want to support

00:18:17,950 --> 00:18:26,830
it as well and other possible uses so

00:18:23,710 --> 00:18:29,799
what we are actually implement is is

00:18:26,830 --> 00:18:34,870
Cola hi erika brooks scheduling there is

00:18:29,799 --> 00:18:37,120
again a lot of theory a sea shell in

00:18:34,870 --> 00:18:38,500
theory behind this so we are actually

00:18:37,120 --> 00:18:41,919
planting one of the possible

00:18:38,500 --> 00:18:45,520
alternatives more details in the papers

00:18:41,919 --> 00:18:47,650
done detail in their daddy SS yeah you

00:18:45,520 --> 00:18:48,970
can basically group set ourselves in a

00:18:47,650 --> 00:18:51,690
similar servation than you actually

00:18:48,970 --> 00:18:56,140
enforce in temporal isolation between

00:18:51,690 --> 00:19:02,260
such groups it's business than in the

00:18:56,140 --> 00:19:05,650
ones one idea to group attacks how it

00:19:02,260 --> 00:19:08,799
would work it will mean that basically

00:19:05,650 --> 00:19:11,860
the first letter for the root scaling

00:19:08,799 --> 00:19:16,260
level you will be using EDS to actually

00:19:11,860 --> 00:19:19,330
know which one of the both groups and

00:19:16,260 --> 00:19:21,490
lee fantasies US route to schedule and

00:19:19,330 --> 00:19:24,250
that inside the let's say that you have

00:19:21,490 --> 00:19:26,950
a group of us inside you spoke leather

00:19:24,250 --> 00:19:30,130
the entity and then inside you actually

00:19:26,950 --> 00:19:33,970
selecting which one of us using fiber so

00:19:30,130 --> 00:19:38,500
will be a double to label type of

00:19:33,970 --> 00:19:42,039
approach i guess the plan well fitted

00:19:38,500 --> 00:19:44,110
eyes open i talked with him and

00:19:42,039 --> 00:19:46,450
basically the plan is here if once we

00:19:44,110 --> 00:19:50,060
have this listing implemented we can

00:19:46,450 --> 00:19:51,890
basically supplant the current as we

00:19:50,060 --> 00:19:54,680
proudly mechanism which more or less

00:19:51,890 --> 00:19:57,440
data seen by these less powerful so it

00:19:54,680 --> 00:20:02,930
makes probably sent to to switch to use

00:19:57,440 --> 00:20:05,090
this hi we will it will be implementing

00:20:02,930 --> 00:20:07,300
practice impact is basically you for

00:20:05,090 --> 00:20:11,870
each group you will be able to specify

00:20:07,300 --> 00:20:13,940
again run time deadlines period sets of

00:20:11,870 --> 00:20:15,560
parameters and basically you have to

00:20:13,940 --> 00:20:18,860
imagine that those piranhas will be

00:20:15,560 --> 00:20:22,700
replicated on all your CPU so you will

00:20:18,860 --> 00:20:24,980
be having basically one scared get

00:20:22,700 --> 00:20:27,890
deadline entity representing the group

00:20:24,980 --> 00:20:32,240
on each CPU and then you basically put

00:20:27,890 --> 00:20:35,180
all your five photos inside those three

00:20:32,240 --> 00:20:38,360
two reservations and of course they can

00:20:35,180 --> 00:20:41,990
coexist so here and easily plotting this

00:20:38,360 --> 00:20:44,690
is a group entity but this is like it's

00:20:41,990 --> 00:20:47,000
a chance it's actually a pure scattered

00:20:44,690 --> 00:20:51,380
lineage for its extra stuff so that the

00:20:47,000 --> 00:20:56,120
zoo can actually coexist of course when

00:20:51,380 --> 00:20:58,640
you migrate the fifo task using the RT

00:20:56,120 --> 00:21:01,040
pool and pool push and pull mechanism

00:20:58,640 --> 00:21:04,430
those class will be actually migrated

00:21:01,040 --> 00:21:06,410
between these schedule in NC goodell

00:21:04,430 --> 00:21:08,390
analysis so the schedule in entities

00:21:06,410 --> 00:21:16,630
corresponding to group can be thought of

00:21:08,390 --> 00:21:16,630
like the vid once accused yes

00:21:30,040 --> 00:21:35,610
yes so currently is one is one for all

00:21:33,220 --> 00:21:37,930
you have just two a couple of values and

00:21:35,610 --> 00:21:49,390
basically that amount of bandwidth

00:21:37,930 --> 00:21:51,700
really replicated on all your CPU yeah i

00:21:49,390 --> 00:21:54,040
mean the implementation is per cpu of

00:21:51,700 --> 00:21:56,590
course but then from a user space point

00:21:54,040 --> 00:22:06,520
of view you will be having one single

00:21:56,590 --> 00:22:08,980
value yes good again yeah alright so

00:22:06,520 --> 00:22:12,840
that's busily covering all the features

00:22:08,980 --> 00:22:16,540
yeah the enzyme and what's missing well

00:22:12,840 --> 00:22:18,960
say that there is still some work to be

00:22:16,540 --> 00:22:21,640
done that we are not currently doing

00:22:18,960 --> 00:22:23,890
currently I'm experimenting on Android

00:22:21,640 --> 00:22:26,520
I've been doing experiments using the I

00:22:23,890 --> 00:22:31,390
keyboard I recently actually managed to

00:22:26,520 --> 00:22:33,820
beg for all the creatine mainline set of

00:22:31,390 --> 00:22:36,820
fixes that applies to deadlines on top

00:22:33,820 --> 00:22:39,790
of the peak cell phone baseline so we

00:22:36,820 --> 00:22:43,030
can actually probably play with these

00:22:39,790 --> 00:22:48,460
features on the on aerial platform

00:22:43,030 --> 00:22:49,810
commercial great platform that's good in

00:22:48,460 --> 00:22:52,090
the near future I guess want to

00:22:49,810 --> 00:22:57,310
implement it those feature we might want

00:22:52,090 --> 00:22:59,650
to extend the reclaiming idea by a

00:22:57,310 --> 00:23:01,540
business romantic demotion towards the

00:22:59,650 --> 00:23:04,930
lower priority class what means it means

00:23:01,540 --> 00:23:06,940
that you can anything pink and peaceful

00:23:04,930 --> 00:23:09,610
that's what instead of dropping your

00:23:06,940 --> 00:23:11,860
task you can actually remove them so let

00:23:09,610 --> 00:23:15,070
them run continue running on example

00:23:11,860 --> 00:23:19,710
using CFS until the next video that will

00:23:15,070 --> 00:23:21,850
have meat I mean meeting the deadlines

00:23:19,710 --> 00:23:23,320
then of course we have to implement

00:23:21,850 --> 00:23:26,710
cafeteria where nests because you

00:23:23,320 --> 00:23:30,220
actually have to run on a big little

00:23:26,710 --> 00:23:33,750
distance so we need actually to be aware

00:23:30,220 --> 00:23:35,650
that there might be maximum capacity

00:23:33,750 --> 00:23:37,930
different maximum capacity of the

00:23:35,650 --> 00:23:40,030
different abuse and of course then we

00:23:37,930 --> 00:23:43,049
left to use the energy were scheduling

00:23:40,030 --> 00:23:44,279
energy model and see how we can

00:23:43,049 --> 00:23:47,070
actually see if a different energy

00:23:44,279 --> 00:23:49,769
happening the information that we now

00:23:47,070 --> 00:23:52,230
have in the current side with the energy

00:23:49,769 --> 00:23:55,830
model description of the platform this

00:23:52,230 --> 00:23:57,600
is so near the nearish nearer she means

00:23:55,830 --> 00:23:59,879
that nobody is actually working on it

00:23:57,600 --> 00:24:01,559
car engine so you're more welcoming our

00:23:59,879 --> 00:24:05,039
interest to actually start working these

00:24:01,559 --> 00:24:08,460
things we basically have to refine the

00:24:05,039 --> 00:24:10,139
secure affinity requirement for that

00:24:08,460 --> 00:24:14,309
length of one of the experience it just

00:24:10,139 --> 00:24:18,899
affects that currently you cannot set an

00:24:14,309 --> 00:24:21,269
affinity closer to basically the system

00:24:18,899 --> 00:24:23,549
or at least the root of Maine associated

00:24:21,269 --> 00:24:26,129
with Rupert us for that length then we

00:24:23,549 --> 00:24:28,049
left to enhance priority nations or we

00:24:26,129 --> 00:24:29,700
have right now it's only deadly

00:24:28,049 --> 00:24:31,440
narration so you're actually narrating

00:24:29,700 --> 00:24:34,980
the deadline when you are boosted

00:24:31,440 --> 00:24:37,080
because you you actually hold the energy

00:24:34,980 --> 00:24:39,269
mutex probably implementing a

00:24:37,080 --> 00:24:42,059
multiprocessor bandwidth its inheritance

00:24:39,269 --> 00:24:45,450
mechanism and then might be also

00:24:42,059 --> 00:24:48,239
something to to work with like a dynamic

00:24:45,450 --> 00:24:51,989
static feedback mechanism so it was we

00:24:48,239 --> 00:24:54,419
to have a way between user space and

00:24:51,989 --> 00:24:56,820
canapes actually constantly have a

00:24:54,419 --> 00:25:00,899
feedback form on how things are going

00:24:56,820 --> 00:25:04,710
internal space and ended up to possible

00:25:00,899 --> 00:25:07,889
nip right that's basically what i got

00:25:04,710 --> 00:25:10,470
totally feel more pressure to manila

00:25:07,889 --> 00:25:13,230
shoot an email in the communities RT

00:25:10,470 --> 00:25:16,019
users yes there we are on all those

00:25:13,230 --> 00:25:18,389
lists and please come to the Acting

00:25:16,019 --> 00:25:20,730
station and actually we are putting

00:25:18,389 --> 00:25:23,519
together a family the works for summit

00:25:20,730 --> 00:25:25,710
in Pisa next month so it will be three

00:25:23,519 --> 00:25:27,450
and four of April so you're more work

00:25:25,710 --> 00:25:29,970
under to to join us we'll be discussing

00:25:27,450 --> 00:25:33,600
these things also energy per share in

00:25:29,970 --> 00:25:36,919
power management and also a sort of kind

00:25:33,600 --> 00:25:40,470
of thought so that's that is interesting

00:25:36,919 --> 00:25:43,170
give yep question

00:25:40,470 --> 00:25:46,950
[Applause]

00:25:43,170 --> 00:25:49,100
will be five mins per person if you have

00:25:46,950 --> 00:25:49,100
any

00:25:55,580 --> 00:25:59,310
so currently what's the implementing

00:25:57,960 --> 00:26:03,510
news in the pressures that we have is

00:25:59,310 --> 00:26:07,140
funny too because it's difficult to

00:26:03,510 --> 00:26:10,140
understand whoa how you would use more

00:26:07,140 --> 00:26:13,190
than two levels so we just started

00:26:10,140 --> 00:26:13,190
people I guess

00:26:19,750 --> 00:26:51,520
I guess to get this thing every mayor

00:26:46,450 --> 00:26:53,410
the the easy solution was actually not

00:26:51,520 --> 00:26:55,600
taking into account groups from the

00:26:53,410 --> 00:27:01,120
start because actually complicate things

00:26:55,600 --> 00:27:02,760
so that I do you how well you can once

00:27:01,120 --> 00:27:05,740
you have groups on you can actually do

00:27:02,760 --> 00:27:08,320
like what you're proposing you can

00:27:05,740 --> 00:27:10,390
create a group and then put your five of

00:27:08,320 --> 00:27:13,840
us can try it there will be like the

00:27:10,390 --> 00:27:16,210
same as using the schedule set up with

00:27:13,840 --> 00:27:18,040
the with that single touch you can

00:27:16,210 --> 00:27:20,680
actually do that yeah actually will be

00:27:18,040 --> 00:27:23,050
it's probably solving I mean your

00:27:20,680 --> 00:27:25,000
approach is probably solving the problem

00:27:23,050 --> 00:27:27,190
that we have with when the task force

00:27:25,000 --> 00:27:29,470
and it's a deadline task so currently

00:27:27,190 --> 00:27:35,170
cannot fork because we we don't have a

00:27:29,470 --> 00:27:38,950
way to actually give the shared

00:27:35,170 --> 00:27:41,170
bandwidth among the children and parents

00:27:38,950 --> 00:27:48,210
so there might be a way to solve this

00:27:41,170 --> 00:27:48,210
issue other questions

00:27:50,000 --> 00:27:53,590
right so cute

00:27:58,050 --> 00:28:03,020

YouTube URL: https://www.youtube.com/watch?v=YXjWDjzzhV8


