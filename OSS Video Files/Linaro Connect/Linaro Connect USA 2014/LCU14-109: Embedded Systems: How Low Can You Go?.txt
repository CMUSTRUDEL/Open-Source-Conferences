Title: LCU14-109: Embedded Systems: How Low Can You Go?
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-109: Embedded Systems: How Low Can You Go?

---------------------------------------------------

Speaker: Arnd Bergmann
Track: Kernel
Location: Grand Peninsula A, Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
ARM Linux has traditionally been the the operating system of choice for the very low end of embedded systems, with very low power consumption and tight constraints on memory size and CPU speed.

We still support machines based on ARM7TDMI and Cortex-M3 with as little as 2MB of RAM, but there is a disconnect between the stagnating upstream contributions for systems like this and growing interest for using Linux in ultra-low power and low-cost scenarios like wearable
computing or the ""Internet of Things"".

In my presentation, I will talk about some of the tricks that used to scale Linux to the absolute low-end, such as running without an MMU or executing the kernel from NOR flash, and areas that could use more work, such as upstream ports for Linaro member platforms (STM32, Kinetis, ...) and improving kernel support for low-memory scenarios.

In the discussion, I want to find out where people in the audience think we should be heading in ARM Linux. Are we leaving the low-end market to MIPS, ARC, Blackfin and MSP430 by removing support for MMU-less systems and small-memory configurations, or should we
invest more time in these systems?'
---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137712
Google Event: 
Presentation: 
Video: 
Eatherpad: pad.linaro.org/p/lcu14-109
---------------------------------------------------

★ Event Details ★
Linaro Connect USA - #LCU14
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:00,390 --> 00:00:08,490
my kids tree was ending everything on

00:00:03,870 --> 00:00:10,260
the linens 12 hours that's my main area

00:00:08,490 --> 00:00:13,550
of work i'm also in the colonel timothy

00:00:10,260 --> 00:00:16,410
nauru and in both of these jobs I'm

00:00:13,550 --> 00:00:19,410
always wondering what we do about the

00:00:16,410 --> 00:00:21,570
really low end system I have to say I'm

00:00:19,410 --> 00:00:24,570
not an expert on this and I'm hoping to

00:00:21,570 --> 00:00:28,289
talk to experts today add a little bit

00:00:24,570 --> 00:00:32,550
of research presenting my opinion and my

00:00:28,289 --> 00:00:35,010
my findings about our systems today and

00:00:32,550 --> 00:00:38,699
then we'll have a second half of today's

00:00:35,010 --> 00:00:47,010
session talking about where we need to

00:00:38,699 --> 00:00:50,929
be heading in the future so there the

00:00:47,010 --> 00:00:54,809
main question for us today to answer is

00:00:50,929 --> 00:00:57,000
what kind of really small systems are we

00:00:54,809 --> 00:01:00,120
actually interested in for linux on arm

00:00:57,000 --> 00:01:02,460
and which systems do we say we don't

00:01:00,120 --> 00:01:04,320
care about run ignorance on those or we

00:01:02,460 --> 00:01:09,439
don't care about using arm cpus for

00:01:04,320 --> 00:01:12,960
those even if you're running linens i

00:01:09,439 --> 00:01:17,100
try to find it a small collection of

00:01:12,960 --> 00:01:20,549
machines that are considered small

00:01:17,100 --> 00:01:22,920
machines running arm linux today most

00:01:20,549 --> 00:01:28,740
people think of phones as a small system

00:01:22,920 --> 00:01:32,219
if you look at the sony phone here you

00:01:28,740 --> 00:01:34,170
use that for gym that's like a high-end

00:01:32,219 --> 00:01:36,990
found extra cabinetry gigabyte of RAM

00:01:34,170 --> 00:01:39,240
but that's the same amount of memory

00:01:36,990 --> 00:01:41,340
that you have metro hogarth or cheap

00:01:39,240 --> 00:01:45,329
laptop not actually a small system and

00:01:41,340 --> 00:01:46,860
even if you go to the low is the very

00:01:45,329 --> 00:01:50,039
low end of phones that you can buy today

00:01:46,860 --> 00:01:51,840
running Linux for thirty-three dollars

00:01:50,039 --> 00:01:55,229
you can get a phone that has 128

00:01:51,840 --> 00:01:56,850
megabytes of RAM that's still not

00:01:55,229 --> 00:02:01,320
particularly small system even though

00:01:56,850 --> 00:02:03,960
one on erected small on this one to go

00:02:01,320 --> 00:02:07,850
to the to what was actually an embedded

00:02:03,960 --> 00:02:09,170
system in my own my sense

00:02:07,850 --> 00:02:12,020
we'd have to go to something like this

00:02:09,170 --> 00:02:15,709
there's even one more order of magnitude

00:02:12,020 --> 00:02:20,050
smaller you think 16 or 32 megabytes of

00:02:15,709 --> 00:02:22,459
RAM so these are kind of small systems

00:02:20,050 --> 00:02:27,530
that people are using on large scale

00:02:22,459 --> 00:02:30,319
today and 32 megabyte interestingly

00:02:27,530 --> 00:02:33,920
seems to be a sweet spot or embedded

00:02:30,319 --> 00:02:37,430
system has been for a long time and I

00:02:33,920 --> 00:02:39,830
try to figure out why that is so if you

00:02:37,430 --> 00:02:44,769
look at it this is basically the only

00:02:39,830 --> 00:02:47,269
system that aren't there to find and

00:02:44,769 --> 00:02:54,739
that didn't really do anything in nobody

00:02:47,269 --> 00:02:57,860
bought what you need to do to scale down

00:02:54,739 --> 00:02:59,930
from typical Linux system to something

00:02:57,860 --> 00:03:02,630
that runs as little as 32 megabytes of

00:02:59,930 --> 00:03:05,060
RAM you have an effective distribution

00:03:02,630 --> 00:03:09,049
sounds like open wrt buildroot often

00:03:05,060 --> 00:03:14,120
embedded things like those run just busy

00:03:09,049 --> 00:03:15,500
box or gives us base they are very

00:03:14,120 --> 00:03:17,780
little user space you can have a full

00:03:15,500 --> 00:03:20,810
distribution they are open wrt and

00:03:17,780 --> 00:03:23,299
download binary packages its fields

00:03:20,810 --> 00:03:24,650
almost like a debian system can do a lot

00:03:23,299 --> 00:03:29,600
of the same things but everything's

00:03:24,650 --> 00:03:31,820
smaller and typical system has sounds

00:03:29,600 --> 00:03:36,079
like four megabytes of flesh 32

00:03:31,820 --> 00:03:38,750
megabytes of RAM and the army five CPU

00:03:36,079 --> 00:03:40,160
that's a very typical thing that you

00:03:38,750 --> 00:03:43,220
find a lot of different markets whether

00:03:40,160 --> 00:03:44,630
it's and the Wi-Fi router or even a

00:03:43,220 --> 00:03:49,940
nasty car that I had on the previous

00:03:44,630 --> 00:03:51,650
picture so this is sin in SD card with

00:03:49,940 --> 00:03:55,160
Wi-Fi controller in it they actually

00:03:51,650 --> 00:03:59,150
runs an arm linux doesn't get much

00:03:55,160 --> 00:04:06,410
smaller than that physical sides does

00:03:59,150 --> 00:04:08,630
this place is fairly well-known one

00:04:06,410 --> 00:04:10,760
interesting thing that surprised me was

00:04:08,630 --> 00:04:13,519
looking at that is this is actually the

00:04:10,760 --> 00:04:18,799
cheapest configuration you can get to if

00:04:13,519 --> 00:04:20,690
you try to buy a ddr2 memory chip you

00:04:18,799 --> 00:04:23,940
can't get anything

00:04:20,690 --> 00:04:25,710
smaller than 32 megabytes and anything

00:04:23,940 --> 00:04:33,600
older than a dr 2 is going to be more

00:04:25,710 --> 00:04:35,760
expensive basically with off 50 rub yes

00:04:33,600 --> 00:04:39,150
yes exactly but SRAM tends to be more

00:04:35,760 --> 00:04:40,770
expensive for the same size that's that

00:04:39,150 --> 00:04:50,250
this seems to be a sweet spot for this

00:04:40,770 --> 00:04:53,280
case and another interesting point here

00:04:50,250 --> 00:04:55,950
is this will keep growing in your future

00:04:53,280 --> 00:04:57,390
because as people are moving to ddr3 the

00:04:55,950 --> 00:05:01,320
smallest size you can get it suddenly

00:04:57,390 --> 00:05:03,900
128 megabytes of RAM so four times that

00:05:01,320 --> 00:05:05,850
and people are also moving from

00:05:03,900 --> 00:05:08,360
Northwestern and flesh in the same areas

00:05:05,850 --> 00:05:11,220
for the same reasons for price and

00:05:08,360 --> 00:05:14,100
getting with the times and then you go

00:05:11,220 --> 00:05:16,620
from four megabytes 128 megabytes of

00:05:14,100 --> 00:05:19,169
flesh and suddenly you have completely

00:05:16,620 --> 00:05:24,630
different constraints and flash sighs

00:05:19,169 --> 00:05:26,940
suddenly is one of them anymore so

00:05:24,630 --> 00:05:32,030
people are doing this basically to get

00:05:26,940 --> 00:05:34,290
the cheapest system that you can run on

00:05:32,030 --> 00:05:36,090
connected to the mains power if you're

00:05:34,290 --> 00:05:39,990
not running out of battery this is what

00:05:36,090 --> 00:05:45,360
you would use and you can build a system

00:05:39,990 --> 00:05:49,380
for a few dollars at most but you can

00:05:45,360 --> 00:05:52,050
get smaller than this and at this point

00:05:49,380 --> 00:05:54,540
you're not actually saving any money

00:05:52,050 --> 00:05:57,990
anymore you wouldn't do this for cost

00:05:54,540 --> 00:06:01,979
reasons normally you can get down to two

00:05:57,990 --> 00:06:04,080
megabytes the reason for this is you run

00:06:01,979 --> 00:06:07,200
on a battery you don't want to charge

00:06:04,080 --> 00:06:09,390
the battery every other day and then you

00:06:07,200 --> 00:06:11,400
want to use SRAM which is more power

00:06:09,390 --> 00:06:13,410
efficient so instead of having drm trip

00:06:11,400 --> 00:06:18,120
next to us or see you have an SRAM trip

00:06:13,410 --> 00:06:21,450
next to us or see it's one out of

00:06:18,120 --> 00:06:24,240
magnitude less memory and also an

00:06:21,450 --> 00:06:28,370
attitude roughly let's power consumption

00:06:24,240 --> 00:06:30,050
oh but if you do this you have a lot of

00:06:28,370 --> 00:06:32,630
you constraints typically those

00:06:30,050 --> 00:06:36,800
associated use for this don't have an

00:06:32,630 --> 00:06:42,020
MMU anymore which is a huge pain to deal

00:06:36,800 --> 00:06:46,270
with in linux and ram if you keep going

00:06:42,020 --> 00:06:50,900
to ashram sighs suddenly becomes a huge

00:06:46,270 --> 00:06:58,340
cost you want to go too many megabytes

00:06:50,900 --> 00:07:00,500
of SRAM it's basically the largest cost

00:06:58,340 --> 00:07:05,600
for you for your machine you want

00:07:00,500 --> 00:07:10,970
reduces far as possible if you go to two

00:07:05,600 --> 00:07:13,460
megabytes of SRAM you can't really do

00:07:10,970 --> 00:07:17,330
software field upgrade anymore because

00:07:13,460 --> 00:07:19,820
everything is running from flash you

00:07:17,330 --> 00:07:21,770
have the colonel in nor flash executing

00:07:19,820 --> 00:07:27,620
directly from there give a little bit of

00:07:21,770 --> 00:07:29,419
SRAM and you typically have just one

00:07:27,620 --> 00:07:32,270
application program running the whole

00:07:29,419 --> 00:07:44,419
time you don't have destroyed that send

00:07:32,270 --> 00:07:46,940
any more for this cost sorry for power

00:07:44,419 --> 00:07:48,530
reasons but you still have system where

00:07:46,940 --> 00:07:50,330
you need to have at least two chips you

00:07:48,530 --> 00:07:51,470
might have small SOC that does all the

00:07:50,330 --> 00:07:54,830
things and then you need to have the

00:07:51,470 --> 00:07:59,080
extra grand chip that is much bigger

00:07:54,830 --> 00:07:59,080
than you slc and much more expensive

00:08:03,500 --> 00:08:09,660
when you go one order of magnitude

00:08:06,479 --> 00:08:11,880
smaller you get to the really silly kind

00:08:09,660 --> 00:08:14,340
you have 2056 kilobytes of RAM that's

00:08:11,880 --> 00:08:17,580
the smallest system that i have heard of

00:08:14,340 --> 00:08:22,410
running linux on an arm cpu italy would

00:08:17,580 --> 00:08:27,960
from sea we record for sony or is it

00:08:22,410 --> 00:08:30,060
contracting okay so he's shown that it's

00:08:27,960 --> 00:08:33,570
actually possible to do Leonard's

00:08:30,060 --> 00:08:35,459
running in 256 kilobytes of RAM I would

00:08:33,570 --> 00:08:39,450
never have thought that possible he did

00:08:35,459 --> 00:08:40,709
it the highly Hector colonel you won't

00:08:39,450 --> 00:08:42,599
be able to do that with an upstream

00:08:40,709 --> 00:08:45,180
colonel unlike previous ones they can

00:08:42,599 --> 00:08:48,510
actually run a mainline kernel today on

00:08:45,180 --> 00:08:53,910
an efm32 without any pet risen into

00:08:48,510 --> 00:08:56,640
megabyte Oh Graham you still get much

00:08:53,910 --> 00:08:59,010
lower power consumption you have one

00:08:56,640 --> 00:09:00,600
tiny chip that you need and everything

00:08:59,010 --> 00:09:02,370
runs from that trip because it contains

00:09:00,600 --> 00:09:08,550
both the flesh and the RAM and all the

00:09:02,370 --> 00:09:12,529
iou are both user space and Colonel are

00:09:08,550 --> 00:09:15,330
running from flesh and only the very

00:09:12,529 --> 00:09:20,220
like the data section of your kernel and

00:09:15,330 --> 00:09:22,610
very few pages of user space are in RAM

00:09:20,220 --> 00:09:24,720
you know exactly what you're doing

00:09:22,610 --> 00:09:27,810
incredible amount of work getting this

00:09:24,720 --> 00:09:29,100
to run and I'm not sure that with 256

00:09:27,810 --> 00:09:32,040
kilobytes a connection to something

00:09:29,100 --> 00:09:34,260
useful but it just showing that it's

00:09:32,040 --> 00:09:35,400
possible to do this you know that if you

00:09:34,260 --> 00:09:38,520
add a little bit more round we could

00:09:35,400 --> 00:09:41,070
actually add something valuable to it so

00:09:38,520 --> 00:09:46,890
this is the absolute minimum they're not

00:09:41,070 --> 00:09:49,589
that I'm aware of running limiter can

00:09:46,890 --> 00:09:54,839
ask why do we actually want to run linux

00:09:49,589 --> 00:09:59,870
on this panel system because most of

00:09:54,839 --> 00:10:02,220
these micro controllers are meant to run

00:09:59,870 --> 00:10:04,920
real-time operating systems of some sort

00:10:02,220 --> 00:10:06,209
that are very tiny kernel and you link

00:10:04,920 --> 00:10:10,680
the application directly into the

00:10:06,209 --> 00:10:14,560
chronic but they have

00:10:10,680 --> 00:10:16,269
some significant disadvantage as well as

00:10:14,560 --> 00:10:20,350
lead at least from the perspective of

00:10:16,269 --> 00:10:22,240
Linux developers I am I know linux I

00:10:20,350 --> 00:10:24,940
don't know any of the other real-time

00:10:22,240 --> 00:10:27,730
operating systems or any to a tiny car

00:10:24,940 --> 00:10:29,860
no so it's much easier for me to get

00:10:27,730 --> 00:10:31,480
used to it and a lot of you probably

00:10:29,860 --> 00:10:32,950
have experienced linens and don't have

00:10:31,480 --> 00:10:35,290
experience with any of the other edge

00:10:32,950 --> 00:10:37,450
existence you will consider running so

00:10:35,290 --> 00:10:39,820
if it is your task to to get the system

00:10:37,450 --> 00:10:42,959
to run then it would probably the first

00:10:39,820 --> 00:10:45,790
choice then there's that drive us apart

00:10:42,959 --> 00:10:48,880
we have all sorts of device drivers in

00:10:45,790 --> 00:10:50,649
the Quran already for another operating

00:10:48,880 --> 00:10:53,320
system to probably have to write your

00:10:50,649 --> 00:11:04,529
own driver and then we have a network

00:10:53,320 --> 00:11:04,529
stack that is mature and tested and it

00:11:04,589 --> 00:11:11,350
yeah I'm very afraid that if we are

00:11:08,950 --> 00:11:15,160
going to see millions of billions of

00:11:11,350 --> 00:11:18,430
devices with random real-time operating

00:11:15,160 --> 00:11:20,829
system and network stack that has been

00:11:18,430 --> 00:11:23,380
picked up by whoever developer was

00:11:20,829 --> 00:11:25,630
tasked with this and then never updated

00:11:23,380 --> 00:11:27,880
because you can't update that would have

00:11:25,630 --> 00:11:30,970
an endless amount of security holes in

00:11:27,880 --> 00:11:33,640
the long run so this is huge risk that

00:11:30,970 --> 00:11:35,260
you have you using operating system it

00:11:33,640 --> 00:11:39,490
doesn't have such a wide install base

00:11:35,260 --> 00:11:44,199
are sure network stick and of course the

00:11:39,490 --> 00:11:46,390
disadvantage is the nose is essentially

00:11:44,199 --> 00:11:49,600
much larger than anything else you would

00:11:46,390 --> 00:11:53,740
consider but the question would have to

00:11:49,600 --> 00:11:56,589
ask ourselves is we know that below

00:11:53,740 --> 00:11:58,420
certain size we don't want to run

00:11:56,589 --> 00:12:00,220
littles anymore we know that above a

00:11:58,420 --> 00:12:02,740
certain size almost certainly want to

00:12:00,220 --> 00:12:08,380
run linux on a microcontroller or on

00:12:02,740 --> 00:12:11,699
bigger machine of what's the limit you

00:12:08,380 --> 00:12:14,199
can ask a similar question about the cpu

00:12:11,699 --> 00:12:16,720
the lots of CPU architectures in the

00:12:14,199 --> 00:12:19,870
world and almost all the Leonardo

00:12:16,720 --> 00:12:21,370
members that that make an arm SOC also

00:12:19,870 --> 00:12:23,640
make an SOC with the difference if you

00:12:21,370 --> 00:12:26,400
architecture and some of them

00:12:23,640 --> 00:12:30,380
may be better suited for example in MIPS

00:12:26,400 --> 00:12:32,760
you have very soft very small cars

00:12:30,380 --> 00:12:35,070
similar to cortex-m but they have an M

00:12:32,760 --> 00:12:37,290
of you that makes it much easier to run

00:12:35,070 --> 00:12:40,520
the notes if you have slightly more

00:12:37,290 --> 00:12:43,410
memory that we need about 100 kilobytes

00:12:40,520 --> 00:12:46,200
just for the memory management code in

00:12:43,410 --> 00:12:49,970
Linux if you have 100 kilobytes it's

00:12:46,200 --> 00:12:49,970
immensely useful to have it turned on

00:12:51,170 --> 00:12:59,610
but still arm is basically taking over

00:12:54,840 --> 00:13:03,210
all the markets where were processors

00:12:59,610 --> 00:13:06,000
and slc are being used at the moment the

00:13:03,210 --> 00:13:10,170
other GPU architecture seem to be going

00:13:06,000 --> 00:13:12,300
away slowly so it would be nice to use

00:13:10,170 --> 00:13:14,040
arm of those that used to be fairly

00:13:12,300 --> 00:13:18,620
popular the past as well so you should

00:13:14,040 --> 00:13:18,620
be able to do it in the future

00:13:26,100 --> 00:13:34,420
so I've looked at the kernel code where

00:13:30,910 --> 00:13:36,450
we are regarding arm no no mule in

00:13:34,420 --> 00:13:39,399
except I because that seems to be the

00:13:36,450 --> 00:13:42,370
main thing about the really small

00:13:39,399 --> 00:13:45,339
systems going below 32 megabytes means

00:13:42,370 --> 00:13:52,209
we part XM instead of norm 9 your

00:13:45,339 --> 00:13:57,459
pockets if I've we have the 70d mi that

00:13:52,209 --> 00:14:01,149
is currently used in the 89 1 x 40 as I

00:13:57,459 --> 00:14:03,820
see family it's been working for

00:14:01,149 --> 00:14:05,980
probably 15 years it's been some product

00:14:03,820 --> 00:14:10,380
upstream and we're just about throw it

00:14:05,980 --> 00:14:10,380
out the next release or the one after

00:14:11,220 --> 00:14:19,089
this important but of CPU chorus in the

00:14:15,550 --> 00:14:21,700
car note they don't have an MMU you can

00:14:19,089 --> 00:14:24,510
build the kernel for those CPU cars but

00:14:21,700 --> 00:14:28,060
we don't support any SSD that has them

00:14:24,510 --> 00:14:31,290
so there's a question what good does it

00:14:28,060 --> 00:14:38,470
do us still keep supporting those cb4

00:14:31,290 --> 00:14:40,690
and anyway everybody who is using an SSD

00:14:38,470 --> 00:14:43,810
with any of these cars is probably using

00:14:40,690 --> 00:14:46,870
the 2.4 colonel from the UC linux

00:14:43,810 --> 00:14:49,420
distribution we supported all our stream

00:14:46,870 --> 00:14:51,339
into politics we're still supporting it

00:14:49,420 --> 00:14:53,500
which we point out but for some reason

00:14:51,339 --> 00:15:02,050
the users of these chips have never

00:14:53,500 --> 00:15:03,900
moved beyond 2.44 cortex-m for a long

00:15:02,050 --> 00:15:07,029
time we didn't support it at all so

00:15:03,900 --> 00:15:12,370
everybody using it was on a bender

00:15:07,029 --> 00:15:15,820
colonel from a based on it 26 33 Colonel

00:15:12,370 --> 00:15:18,730
that arm did initially that was picked

00:15:15,820 --> 00:15:20,589
up by some companies lot of people have

00:15:18,730 --> 00:15:23,550
product based on this we never had

00:15:20,589 --> 00:15:26,800
anything extreme until pegatron X

00:15:23,550 --> 00:15:29,020
contributed a part for the efm32 as I

00:15:26,800 --> 00:15:31,029
see that's been is a what-if now and

00:15:29,020 --> 00:15:33,220
seems to be working well and you can

00:15:31,029 --> 00:15:34,720
build incredibly an energy efficient

00:15:33,220 --> 00:15:37,480
systems with this as

00:15:34,720 --> 00:15:40,980
see the same theory be possible with it

00:15:37,480 --> 00:15:43,180
that doesn't other microcontroller

00:15:40,980 --> 00:15:47,439
platforms that we don't support upstream

00:15:43,180 --> 00:15:50,069
and then finally you can support no

00:15:47,439 --> 00:15:55,870
ma'am you cannot unsee be used it

00:15:50,069 --> 00:15:58,600
actually have an MMU you can almost as a

00:15:55,870 --> 00:16:01,269
CSV support today you can turn off the

00:15:58,600 --> 00:16:03,759
MMU and you can do run them and

00:16:01,269 --> 00:16:05,170
apparently nobody does that and I'm not

00:16:03,759 --> 00:16:06,850
sure there's a good reason for that but

00:16:05,170 --> 00:16:10,720
one of you might come up with a good

00:16:06,850 --> 00:16:13,420
reason why needed but nobody has a good

00:16:10,720 --> 00:16:14,560
idea what should be useful for that we

00:16:13,420 --> 00:16:23,939
could probably just remove this

00:16:14,560 --> 00:16:23,939
important as a look at the size growth

00:16:24,209 --> 00:16:29,709
like how much harder has become to run

00:16:27,069 --> 00:16:34,810
liniment really small system just look

00:16:29,709 --> 00:16:37,800
at the kernel code Megan 26 16 smallest

00:16:34,810 --> 00:16:42,370
configuration you could have an arm was

00:16:37,800 --> 00:16:45,759
around 650 kilobytes or kernels that

00:16:42,370 --> 00:16:47,709
didn't do anything at all the father

00:16:45,759 --> 00:16:53,170
relation was wrong from her four

00:16:47,709 --> 00:16:54,790
megabytes and in the eight years the

00:16:53,170 --> 00:16:56,680
minimum configuration has hardly grown

00:16:54,790 --> 00:17:00,279
at all this still less than eight

00:16:56,680 --> 00:17:02,730
hundred kilobytes so it's so it's grown

00:17:00,279 --> 00:17:06,789
some fifteen percent make twenty percent

00:17:02,730 --> 00:17:10,049
of the default configuration has grown

00:17:06,789 --> 00:17:12,400
quite a bit of a four megabytes now

00:17:10,049 --> 00:17:14,049
which means we've added a lot of

00:17:12,400 --> 00:17:15,459
features if you want to use those

00:17:14,049 --> 00:17:17,020
features of course you will have a much

00:17:15,459 --> 00:17:20,049
larger car mat might not fit it to

00:17:17,020 --> 00:17:25,329
advise individual was fitting in at the

00:17:20,049 --> 00:17:27,579
2.4 or ally 2.6 timeframe so that's it

00:17:25,329 --> 00:17:32,140
for my presentation and now I think we

00:17:27,579 --> 00:17:34,630
should start the discussion and are you

00:17:32,140 --> 00:17:37,090
talk about default config or is there is

00:17:34,630 --> 00:17:40,299
it the case that there are many built-in

00:17:37,090 --> 00:17:41,809
things that have been made options now

00:17:40,299 --> 00:17:46,179
so that the

00:17:41,809 --> 00:17:51,679
no kernel size thing consistent might

00:17:46,179 --> 00:17:53,809
not reflect yes that that's probably one

00:17:51,679 --> 00:17:55,730
point I haven't looked at that in detail

00:17:53,809 --> 00:17:59,179
and know that the block layer and the TV

00:17:55,730 --> 00:18:02,870
wailea used to not be optional and they

00:17:59,179 --> 00:18:04,700
now are i'm not sure if to 616 already

00:18:02,870 --> 00:18:06,740
here at the option of la playa didn't

00:18:04,700 --> 00:18:09,799
have the opportunity wailea and know

00:18:06,740 --> 00:18:11,659
that at some point the colonel actually

00:18:09,799 --> 00:18:14,570
got the minimum configuration actually

00:18:11,659 --> 00:18:16,970
got smallest of this one this to 26 32

00:18:14,570 --> 00:18:19,070
was actually smaller than 26 16 and that

00:18:16,970 --> 00:18:20,570
may have been effect of the rock layer

00:18:19,070 --> 00:18:29,690
becoming optional based on the world

00:18:20,570 --> 00:18:31,580
they found so it might be that the

00:18:29,690 --> 00:18:43,970
larger of the day actually does less

00:18:31,580 --> 00:18:48,049
than the moniker 926 16 that did so let

00:18:43,970 --> 00:18:50,570
me just see show of hands who has used

00:18:48,049 --> 00:18:57,799
its system with our millenniums without

00:18:50,570 --> 00:19:05,330
at home you in the last five years is

00:18:57,799 --> 00:19:07,369
any of you still using that so i mean is

00:19:05,330 --> 00:19:15,529
anybody working on products that are

00:19:07,369 --> 00:19:17,960
using this yes i was hoping to get that

00:19:15,529 --> 00:19:27,289
audience here but maybe just don't have

00:19:17,960 --> 00:19:28,850
those people in did not connect okay

00:19:27,289 --> 00:19:32,119
this is a terrible thing to admit at

00:19:28,850 --> 00:19:35,240
allen ro event but we have used sony is

00:19:32,119 --> 00:19:38,480
working on a wearable with a mips or in

00:19:35,240 --> 00:19:40,309
that range and is that for the reason

00:19:38,480 --> 00:19:47,389
that i mentioned that nips has an MMU in

00:19:40,309 --> 00:19:49,100
the wind for sat i'm buzzin um I don't

00:19:47,389 --> 00:19:50,269
know the details on the sourcing I just

00:19:49,100 --> 00:19:53,570
know that we even got

00:19:50,269 --> 00:19:54,529
a rib score and one of our wearables but

00:19:53,570 --> 00:19:58,429
that's a very useful piece of

00:19:54,529 --> 00:20:01,399
information I thing because it it seems

00:19:58,429 --> 00:20:03,349
that arm is moving more into the higher

00:20:01,399 --> 00:20:06,169
end markets and maybe that just

00:20:03,349 --> 00:20:11,179
defending the lower of justin linux but

00:20:06,169 --> 00:20:13,039
everywhere yeah i mean context and is

00:20:11,179 --> 00:20:22,339
still there but it's still getting

00:20:13,039 --> 00:20:26,389
bigger yep the i hope this as an

00:20:22,339 --> 00:20:29,179
interview he think he's got an arm 96 so

00:20:26,389 --> 00:20:31,579
what the code running in there is not

00:20:29,179 --> 00:20:33,709
using the MN you is just turned off now

00:20:31,579 --> 00:20:38,029
watch like it's turned on for the caches

00:20:33,709 --> 00:20:40,129
what is using an identity mind so the

00:20:38,029 --> 00:20:45,649
systems that i looked at on the on the

00:20:40,129 --> 00:20:50,869
first slide boss didn't see it wasn't

00:20:45,649 --> 00:20:53,119
like they the SD card with the Wi-Fi

00:20:50,869 --> 00:20:56,209
that has an MMU it because it's are 96

00:20:53,119 --> 00:20:57,979
the only system without an MMU on the

00:20:56,209 --> 00:21:00,469
slide was the apple ipod which of course

00:20:57,979 --> 00:21:10,179
did not run linux officially but people

00:21:00,469 --> 00:21:14,599
managed to get in is running on it and

00:21:10,179 --> 00:21:17,329
to be able o system linux they have

00:21:14,599 --> 00:21:18,889
heart rates 110 last time yeah so one of

00:21:17,329 --> 00:21:22,759
the problems with the arm architecture

00:21:18,889 --> 00:21:28,849
that I see is that we have those three

00:21:22,759 --> 00:21:30,649
profiles cortex-m army 7m r and a but

00:21:28,849 --> 00:21:32,119
you can you can't just mix and match

00:21:30,649 --> 00:21:35,089
features from those so if you have a

00:21:32,119 --> 00:21:37,519
cortex-m there's a lot of things that

00:21:35,089 --> 00:21:40,849
you can't have and if you have projects

00:21:37,519 --> 00:21:42,529
eight you have to have them all so you

00:21:40,849 --> 00:21:45,759
can't just have the tiny car that we've

00:21:42,529 --> 00:21:45,759
got everything except for the other

00:21:47,950 --> 00:21:56,190
assistance

00:21:49,170 --> 00:22:00,390
yes yeas are so silly so you could have

00:21:56,190 --> 00:22:02,400
I know I think a handful of systems were

00:22:00,390 --> 00:22:05,310
the cortex Asian are paired in context

00:22:02,400 --> 00:22:06,630
ends or varnish but the cortex and it's

00:22:05,310 --> 00:22:09,060
not running minutes in that case and

00:22:06,630 --> 00:22:13,140
then I had no part of any good you gotta

00:22:09,060 --> 00:22:17,370
make oh could its run but it could but

00:22:13,140 --> 00:22:21,510
you wouldn't it goes back to your first

00:22:17,370 --> 00:22:23,670
night yeah editor and I know Nicholas

00:22:21,510 --> 00:22:28,310
especially if I has running a memory

00:22:23,670 --> 00:22:28,310
that's for me I can rule engine itself

00:22:28,730 --> 00:22:34,470
so it seemed to me that I say people

00:22:32,310 --> 00:22:36,780
only this much anymore but all the

00:22:34,470 --> 00:22:40,370
internet of things people probably ought

00:22:36,780 --> 00:22:47,160
to and there's lots of that is happening

00:22:40,370 --> 00:22:48,450
we are they come is that thing right but

00:22:47,160 --> 00:22:49,860
if you want to make cheap sensors then

00:22:48,450 --> 00:22:52,680
you actually want to get this running on

00:22:49,860 --> 00:22:54,840
the the pity things as the man says if

00:22:52,680 --> 00:22:57,330
our networks tax crap it's going to be a

00:22:54,840 --> 00:22:59,280
nightmare so it's imp like a good reason

00:22:57,330 --> 00:23:00,690
but giving this stuff working but I

00:22:59,280 --> 00:23:02,550
don't know who's actually doing that and

00:23:00,690 --> 00:23:04,050
whether they all went on the problem of

00:23:02,550 --> 00:23:07,920
the Internet of Things is that there's

00:23:04,050 --> 00:23:09,360
an awful lot of things out there a lot

00:23:07,920 --> 00:23:15,990
of those things have an interview and

00:23:09,360 --> 00:23:17,670
others don't yeah in the list of

00:23:15,990 --> 00:23:19,950
operating systems I didn't see you

00:23:17,670 --> 00:23:24,750
mentioned tiny OS did you take a look at

00:23:19,950 --> 00:23:26,310
that no i said i'm not actually an

00:23:24,750 --> 00:23:34,680
expert so I did my own research night I

00:23:26,310 --> 00:23:37,140
didn't come across that 100 and I didn't

00:23:34,680 --> 00:23:38,880
list any none of us are systems that I

00:23:37,140 --> 00:23:43,950
guess if you mention it that is open

00:23:38,880 --> 00:23:45,660
source I was wondering why on that slide

00:23:43,950 --> 00:23:48,360
that had all pictures of the machines

00:23:45,660 --> 00:23:52,650
included a 3 gigabyte memory machine

00:23:48,360 --> 00:23:54,690
yeah well they r ej that the reason is

00:23:52,650 --> 00:23:58,200
dead i have evil that's a very hyper

00:23:54,690 --> 00:24:00,780
cell phone that's pretty my end yes the

00:23:58,200 --> 00:24:03,960
reason that i give it give this example

00:24:00,780 --> 00:24:05,670
is that when people think of small

00:24:03,960 --> 00:24:07,980
systems running linux first thing that

00:24:05,670 --> 00:24:09,390
comes to mind is phones a lot of cases i

00:24:07,980 --> 00:24:11,850
want to show that this is actually not

00:24:09,390 --> 00:24:13,290
that small oh ok i know because all the

00:24:11,850 --> 00:24:16,170
other ones were like which would think

00:24:13,290 --> 00:24:18,500
you know 128 anger less yes i'm a gig

00:24:16,170 --> 00:24:22,860
sitting in the corner I just want wine

00:24:18,500 --> 00:24:24,150
actually yeah as I said yes with the

00:24:22,860 --> 00:24:25,650
phones that's already an order of

00:24:24,150 --> 00:24:28,230
magnitude difference but even the

00:24:25,650 --> 00:24:31,140
smallest one that's not only two smaller

00:24:28,230 --> 00:24:33,090
than the largest one is other big dude

00:24:31,140 --> 00:24:41,100
larger than the typical small systems

00:24:33,090 --> 00:24:45,890
here when is the last time that anybody

00:24:41,100 --> 00:24:45,890
heard about a machine running arm 70 mi

00:24:47,990 --> 00:24:54,750
yes but I mean something shipping with

00:24:50,670 --> 00:24:57,120
linux do we ever does anybody think we

00:24:54,750 --> 00:25:15,570
should keep on 70 DMI support in the

00:24:57,120 --> 00:25:18,180
Corn Laws of you the 89 10 yes yes yeah

00:25:15,570 --> 00:25:20,760
there's still be four devices but funny

00:25:18,180 --> 00:25:23,010
because I've stuff oh yes I still exists

00:25:20,760 --> 00:25:26,160
and people still making them before with

00:25:23,010 --> 00:25:27,660
mmm you certainly still been used and

00:25:26,160 --> 00:25:32,700
used a lot I'm people are actively

00:25:27,660 --> 00:25:35,640
working on adding you one now we

00:25:32,700 --> 00:25:38,130
wouldn't save any significant amount of

00:25:35,640 --> 00:25:42,060
lines of code for removing that one well

00:25:38,130 --> 00:25:44,610
I'm interested in is reducing the test

00:25:42,060 --> 00:25:46,830
matrix because currently when you're

00:25:44,610 --> 00:25:50,790
building a colonel or army for without

00:25:46,830 --> 00:25:52,200
mm view we run into dozens or hundreds

00:25:50,790 --> 00:25:57,020
of build hang arrows and random

00:25:52,200 --> 00:25:57,020
configurations because nobody tested

00:26:00,490 --> 00:26:05,600
well i'm testing random configuration so

00:26:03,409 --> 00:26:07,309
it will still enabled worker we only

00:26:05,600 --> 00:26:08,990
thing open telling us if it's impossible

00:26:07,309 --> 00:26:11,870
to enable we could keep the code around

00:26:08,990 --> 00:26:14,059
but they well just depends on broken

00:26:11,870 --> 00:26:17,480
because we know about using it but then

00:26:14,059 --> 00:26:19,789
what's the difference to remove it if we

00:26:17,480 --> 00:26:21,770
come to the conclusion that nobody has

00:26:19,789 --> 00:26:24,980
been used using this worthless fiber and

00:26:21,770 --> 00:26:27,020
years and I'm assuming that even on the

00:26:24,980 --> 00:26:31,400
I but you wouldn't run them you want 17

00:26:27,020 --> 00:26:32,840
colonel yes exactly and if that's the

00:26:31,400 --> 00:26:35,270
case for everybody then we can just

00:26:32,840 --> 00:26:40,970
remove that I know about new designs

00:26:35,270 --> 00:26:43,760
using that arm TMI chips into door

00:26:40,970 --> 00:26:46,610
controllers for matching trains the

00:26:43,760 --> 00:26:49,250
thing is they're using it to six that

00:26:46,610 --> 00:26:50,840
they using what I 2.6 journal yes and

00:26:49,250 --> 00:26:53,929
what's the chances I'm I've operating

00:26:50,840 --> 00:26:57,429
never yes exactly and that my pressure

00:26:53,929 --> 00:26:57,429
is that this is the case of everybody

00:26:58,390 --> 00:27:03,799
machine you're getting at is here and

00:27:00,649 --> 00:27:05,480
for our membership specially is okay

00:27:03,799 --> 00:27:06,830
we've got these all platforms and we

00:27:05,480 --> 00:27:09,049
have the questionnaire we keep Safari to

00:27:06,830 --> 00:27:12,320
reoccupy supporting them but moving

00:27:09,049 --> 00:27:14,870
forward is what's the level of interest

00:27:12,320 --> 00:27:17,270
in small systems running 10 especially

00:27:14,870 --> 00:27:20,360
with IOT in deeper minute systems yeah

00:27:17,270 --> 00:27:23,390
what do we do we focus on that in both

00:27:20,360 --> 00:27:25,370
the comedian lil narrow did we say you

00:27:23,390 --> 00:27:27,649
know linux is maybe not the choice that

00:27:25,370 --> 00:27:30,140
most people are going to make in that

00:27:27,649 --> 00:27:32,630
that environment and just not worry

00:27:30,140 --> 00:27:34,279
about it too much and the same question

00:27:32,630 --> 00:27:35,929
i'm really interested from both sides

00:27:34,279 --> 00:27:40,279
from both the attitude perspective and

00:27:35,929 --> 00:27:42,320
from the dinero perfected this is just a

00:27:40,279 --> 00:27:44,960
special case with more general polymer

00:27:42,320 --> 00:27:47,570
you got processor we've got drivers

00:27:44,960 --> 00:27:49,760
you've got functionality we've got may

00:27:47,570 --> 00:27:53,419
be certain to fake you know tunable

00:27:49,760 --> 00:27:55,940
parameters etc that are sort of well

00:27:53,419 --> 00:27:58,010
beyond the normal range of usage or

00:27:55,940 --> 00:28:00,380
haven't been used for a long time but

00:27:58,010 --> 00:28:01,720
is when should you or could you retire

00:28:00,380 --> 00:28:04,370
them and say these are no longer

00:28:01,720 --> 00:28:06,140
supported on the other hand once you

00:28:04,370 --> 00:28:08,180
stop supporting my management be able to

00:28:06,140 --> 00:28:10,190
possibly start supporting you again

00:28:08,180 --> 00:28:11,720
because them to get back in you don't

00:28:10,190 --> 00:28:13,760
have to work right now they're in sort

00:28:11,720 --> 00:28:15,080
of and a grandmother flavor we're never

00:28:13,760 --> 00:28:18,980
really were there almost there for

00:28:15,080 --> 00:28:20,780
reference we who agrees yes so this is

00:28:18,980 --> 00:28:24,110
generally a problem but usually the rule

00:28:20,780 --> 00:28:26,270
is we remove something when we think

00:28:24,110 --> 00:28:28,850
that nobody is possibly using it anymore

00:28:26,270 --> 00:28:31,640
or it's broken and hasn't been working

00:28:28,850 --> 00:28:34,160
for a while but if anybody complains and

00:28:31,640 --> 00:28:35,540
says I still need this and this was

00:28:34,160 --> 00:28:42,380
actually murdered for me then we will

00:28:35,540 --> 00:28:44,750
begin in the state that was before and I

00:28:42,380 --> 00:28:48,350
message into marketing of it if you have

00:28:44,750 --> 00:28:49,820
a two megabyte curve and you're

00:28:48,350 --> 00:28:51,800
arranging to fit it to make your voice

00:28:49,820 --> 00:28:54,170
yes ma'am I think the people you are

00:28:51,800 --> 00:28:58,850
serving with that our people are making

00:28:54,170 --> 00:29:01,730
low volumes they're the ones who but for

00:28:58,850 --> 00:29:03,830
whom the list of benefits of Linux the

00:29:01,730 --> 00:29:06,470
familiarity that I was trained on you

00:29:03,830 --> 00:29:09,140
tools the the low-cost developments like

00:29:06,470 --> 00:29:11,510
with what you describe is particularly

00:29:09,140 --> 00:29:13,220
important in markets where you don't hit

00:29:11,510 --> 00:29:16,310
volumes to pay back here and

00:29:13,220 --> 00:29:18,620
non-recurring engineering and perhaps

00:29:16,310 --> 00:29:21,050
the lennar remembers quite nature of

00:29:18,620 --> 00:29:22,880
being much larger audiences of

00:29:21,050 --> 00:29:25,130
organization would prefer to drive the

00:29:22,880 --> 00:29:26,900
cost down further because they are

00:29:25,130 --> 00:29:28,310
making higher volumes at which point

00:29:26,900 --> 00:29:31,850
they'd rather have one megabyte of SRAM

00:29:28,310 --> 00:29:33,460
and Norman linen so you I mean dragon oh

00:29:31,850 --> 00:29:36,110
sorry I know it for example

00:29:33,460 --> 00:29:40,340
stmicroelectronics has people run to

00:29:36,110 --> 00:29:41,870
doing linens on stm32 as i sees I didn't

00:29:40,340 --> 00:29:47,150
ask somebody to look up of networking

00:29:41,870 --> 00:29:49,460
get them and stm32 is actually there's a

00:29:47,150 --> 00:29:51,200
custom used in the example with 256 k

00:29:49,460 --> 00:29:55,970
and this is also what a lot of people

00:29:51,200 --> 00:29:59,540
use on commercial linux on 26 33 kernels

00:29:55,970 --> 00:30:02,840
from the cool thing about drivers is

00:29:59,540 --> 00:30:05,990
that what he calls especially volumes is

00:30:02,840 --> 00:30:08,840
that USB based cops are much cheaper sir

00:30:05,990 --> 00:30:10,100
bluetooth USB part is very Richie a blue

00:30:08,840 --> 00:30:12,230
jeep motion controller

00:30:10,100 --> 00:30:14,000
extremely expensive so to have an

00:30:12,230 --> 00:30:16,549
operating system where the USB

00:30:14,000 --> 00:30:17,660
controllability allows you to drive down

00:30:16,549 --> 00:30:19,340
costs of some of you are those

00:30:17,660 --> 00:30:21,650
connections it's quite peculiar

00:30:19,340 --> 00:30:22,730
phenomena having and molten logic

00:30:21,650 --> 00:30:25,070
controllers now gotten the goes

00:30:22,730 --> 00:30:26,630
controllers so and if you can run

00:30:25,070 --> 00:30:37,640
everything from one chip it actually

00:30:26,630 --> 00:30:41,000
fits in the USB connector um that's the

00:30:37,640 --> 00:30:43,970
wheel yeah I was hoping you could get

00:30:41,000 --> 00:30:46,490
come from real conclusion but I did have

00:30:43,970 --> 00:30:48,470
high hopes on get among these thing yes

00:30:46,490 --> 00:30:50,450
so wasn't one question from sort of a

00:30:48,470 --> 00:30:53,510
community perspective this so we know

00:30:50,450 --> 00:30:55,730
that there are these you know there are

00:30:53,510 --> 00:30:57,049
people out there who are using linux and

00:30:55,730 --> 00:31:00,799
small systems but they're stuck in whole

00:30:57,049 --> 00:31:03,890
kernels is there was no incentive for

00:31:00,799 --> 00:31:06,980
them to move to a new kernel what could

00:31:03,890 --> 00:31:10,070
the community be due to incentivize them

00:31:06,980 --> 00:31:13,450
to move to a more recent kernel that

00:31:10,070 --> 00:31:16,669
doesn't I think one question to consider

00:31:13,450 --> 00:31:19,460
one time we were when we first started

00:31:16,669 --> 00:31:23,570
with digital unix required 64 megabytes

00:31:19,460 --> 00:31:27,080
of memory just to boot system and the

00:31:23,570 --> 00:31:29,539
bottom of the park managers required it

00:31:27,080 --> 00:31:32,990
to cut down to 32 megabytes because of

00:31:29,539 --> 00:31:34,970
considerable savings at that time the

00:31:32,990 --> 00:31:36,890
engineers did the work of what we found

00:31:34,970 --> 00:31:39,799
out was the assistant brand about seven

00:31:36,890 --> 00:31:42,320
percent faster because a lot more of the

00:31:39,799 --> 00:31:45,230
colonel and various parts of system fit

00:31:42,320 --> 00:31:48,169
in the cache so even though we have very

00:31:45,230 --> 00:31:50,600
large main memories are cash is still

00:31:48,169 --> 00:31:54,710
relatively small we might find a

00:31:50,600 --> 00:31:56,750
performance improvement in that if

00:31:54,710 --> 00:31:59,299
everything runs at the 256 kilobytes of

00:31:56,750 --> 00:32:05,929
SRAM then you don't you never have cash

00:31:59,299 --> 00:32:07,730
with thing to follow on from that we

00:32:05,929 --> 00:32:11,210
mustn't confuse having a small kernel

00:32:07,730 --> 00:32:12,559
with having an omm UK yes that's we seem

00:32:11,210 --> 00:32:14,410
to be doing that a bit and the point is

00:32:12,559 --> 00:32:15,970
that the lower mmu crowd aren't engaging

00:32:14,410 --> 00:32:17,080
dream and I'd certainly have to fix that

00:32:15,970 --> 00:32:18,940
but there's a whole different mindset

00:32:17,080 --> 00:32:20,980
that people may know a menu system

00:32:18,940 --> 00:32:22,090
exactly yes making a kernel slaughter

00:32:20,980 --> 00:32:23,470
there's loads of people that want to do

00:32:22,090 --> 00:32:24,930
that and even the x86 guys are

00:32:23,470 --> 00:32:27,250
interested in doing that as well another

00:32:24,930 --> 00:32:29,290
yes but they're different reasons for

00:32:27,250 --> 00:32:30,880
making the kind of small about it one

00:32:29,290 --> 00:32:34,360
thing that I've that I mentioned earlier

00:32:30,880 --> 00:32:37,270
is that this is becoming less and less

00:32:34,360 --> 00:32:39,640
interesting if you actually have drm and

00:32:37,270 --> 00:32:44,680
if you don't have to you most likely

00:32:39,640 --> 00:32:45,910
don't have an MMU on are so be in theory

00:32:44,680 --> 00:32:48,250
there should be completely separate

00:32:45,910 --> 00:32:50,500
issues but in practice they always come

00:32:48,250 --> 00:32:52,780
to get up so problem with expanding

00:32:50,500 --> 00:32:54,430
kernel is for new systems it doesn't

00:32:52,780 --> 00:32:56,950
matter that if you're upgrading existing

00:32:54,430 --> 00:32:58,960
systems the problem is that they're the

00:32:56,950 --> 00:33:01,300
big space allocated it on or whatever

00:32:58,960 --> 00:33:03,550
which you can easily change for real

00:33:01,300 --> 00:33:04,900
systems for actually consumers that the

00:33:03,550 --> 00:33:07,090
modern can simply look so we've had to

00:33:04,900 --> 00:33:09,520
draw platforms in debian because the

00:33:07,090 --> 00:33:11,680
current simply don't fit in the grid

00:33:09,520 --> 00:33:14,470
space anymore so we go we can do about

00:33:11,680 --> 00:33:15,970
that sorry yeah which is esco annoying

00:33:14,470 --> 00:33:18,640
because there's nothing broken it just

00:33:15,970 --> 00:33:20,380
anymore you know and you have to keep

00:33:18,640 --> 00:33:21,820
basically the same functionality you

00:33:20,380 --> 00:33:23,440
drop things for a while till you go

00:33:21,820 --> 00:33:25,660
person if you can really leave out still

00:33:23,440 --> 00:33:29,170
have this called an equivalent colonel

00:33:25,660 --> 00:33:30,460
them so i'm sure we do about that but he

00:33:29,170 --> 00:33:34,500
obviously thinks design ten years ago

00:33:30,460 --> 00:33:38,860
when 456 mega boobs basis loans and

00:33:34,500 --> 00:33:41,200
interesting observation that i made when

00:33:38,860 --> 00:33:43,930
looking at open up wrt is they actually

00:33:41,200 --> 00:33:46,450
have patches that make the colonel

00:33:43,930 --> 00:33:47,950
runtime science larger you know other to

00:33:46,450 --> 00:33:49,840
make the compressed current size smaller

00:33:47,950 --> 00:33:51,580
so we did it at the flesh as they're

00:33:49,840 --> 00:33:52,960
much more constraint of a flesh side the

00:33:51,580 --> 00:33:56,040
compressed size of the colonel them

00:33:52,960 --> 00:33:56,040
there on time sighs

00:33:59,760 --> 00:34:05,850
I assume that the sort of opposite

00:34:03,150 --> 00:34:10,290
question is a non-starter which is in

00:34:05,850 --> 00:34:13,050
its an arm to the stage make something

00:34:10,290 --> 00:34:15,090
that would take small amount of memory

00:34:13,050 --> 00:34:16,770
but evident when you I said they would

00:34:15,090 --> 00:34:20,070
have no reference to building something

00:34:16,770 --> 00:34:22,320
of this kind of UTC time getting there

00:34:20,070 --> 00:34:24,380
are loading screens on cause whenever he

00:34:22,320 --> 00:34:27,389
doesn't make sense that are of course

00:34:24,380 --> 00:34:31,649
can I can even begin to see you were

00:34:27,389 --> 00:34:34,530
happy okay then why are those not be

00:34:31,649 --> 00:34:37,110
until but they you have a cortex eight

00:34:34,530 --> 00:34:40,169
you can't get into the low power stuff

00:34:37,110 --> 00:34:42,090
because the smallest car is cortex a5

00:34:40,169 --> 00:34:44,750
and that's just so much bigger and has

00:34:42,090 --> 00:34:47,550
so many more features than the cortex m3

00:34:44,750 --> 00:34:49,560
reservation it's not the other useful

00:34:47,550 --> 00:34:51,960
again you can't separate one from the

00:34:49,560 --> 00:34:55,950
other you can't you can't have a smaller

00:34:51,960 --> 00:34:57,720
car that still smaller than the a5 or

00:34:55,950 --> 00:35:01,050
much smaller than the a5 and still have

00:34:57,720 --> 00:35:11,370
an MMU because this looks like our o

00:35:01,050 --> 00:35:12,990
memory to be both but a muzzle I think

00:35:11,370 --> 00:35:15,030
for most people it's suspend our pod

00:35:12,990 --> 00:35:21,510
runtime power is this different issue

00:35:15,030 --> 00:35:35,010
that may be more bear or product ok

00:35:21,510 --> 00:35:37,470
let's density post.much so he may have

00:35:35,010 --> 00:35:39,750
already addressed us not you said

00:35:37,470 --> 00:35:42,860
something about it but they're like ti

00:35:39,750 --> 00:35:47,940
just recently did something with on-chip

00:35:42,860 --> 00:35:49,590
deram that was like two Meg which I

00:35:47,940 --> 00:35:51,990
thought was interesting so I don't know

00:35:49,590 --> 00:35:55,200
how that factors into the kind of the

00:35:51,990 --> 00:35:57,720
lowest price DRAM is is 32 meg I think

00:35:55,200 --> 00:35:59,430
he said something earlier about these on

00:35:57,720 --> 00:36:01,260
chip ones are kind of specialty

00:35:59,430 --> 00:36:04,260
solutions and they're not less expensive

00:36:01,260 --> 00:36:06,510
than the external de gremlins so I guess

00:36:04,260 --> 00:36:10,260
in this case they would also have the

00:36:06,510 --> 00:36:11,720
drm being power optimized would also be

00:36:10,260 --> 00:36:12,950
a vector so in that

00:36:11,720 --> 00:36:34,369
that sense it wouldn't be all that

00:36:12,950 --> 00:36:36,380
different from a strap or PM that may be

00:36:34,369 --> 00:36:37,609
that may be a game changer too because

00:36:36,380 --> 00:36:40,310
if you're persistent Graham doesn't

00:36:37,609 --> 00:36:44,180
consume any power at runtime or it idle

00:36:40,310 --> 00:36:47,390
time you happy yes fit yes but 16 mega

00:36:44,180 --> 00:36:49,040
if you have 16 megabytes yeah it's not

00:36:47,390 --> 00:36:51,859
that hard today but look at heart of

00:36:49,040 --> 00:36:54,619
time of course yes and that may still be

00:36:51,859 --> 00:36:58,869
something to optimize for another point

00:36:54,619 --> 00:37:01,550
with a similar to what maddog said like

00:36:58,869 --> 00:37:03,800
making the corners the system smaller

00:37:01,550 --> 00:37:06,020
makes those may we can make it

00:37:03,800 --> 00:37:09,320
sometimes faster sometimes have

00:37:06,020 --> 00:37:11,630
regressions we introduced a bug in the

00:37:09,320 --> 00:37:14,359
carnival system that makes the colonel

00:37:11,630 --> 00:37:19,160
both bigger and slower because we made

00:37:14,359 --> 00:37:22,040
it a stake and just being better at

00:37:19,160 --> 00:37:25,010
finding size regressions means we can

00:37:22,040 --> 00:37:27,230
also catch this this kind of regression

00:37:25,010 --> 00:37:30,349
where things suddenly turns slower

00:37:27,230 --> 00:37:39,020
because someone did something stupid we

00:37:30,349 --> 00:37:42,680
just had one of those cases in the fist

00:37:39,020 --> 00:37:46,609
of herbs address patching were a lot of

00:37:42,680 --> 00:37:49,849
users of the code that would do the

00:37:46,609 --> 00:37:51,410
computation that would normally get

00:37:49,849 --> 00:37:53,839
simplified by the compiler but as soon

00:37:51,410 --> 00:37:55,730
as we did the fetching we got this extra

00:37:53,839 --> 00:37:58,940
computation like the code actually got a

00:37:55,730 --> 00:38:02,170
lot bigger buy it by a pitch that was

00:37:58,940 --> 00:38:02,170
meant to make smaller

00:38:07,020 --> 00:38:13,900
well I don't know we are moving subject

00:38:11,290 --> 00:38:16,870
what what probably tries are typically

00:38:13,900 --> 00:38:19,270
couple seven that's once the no other

00:38:16,870 --> 00:38:22,300
new counter out who are always forked

00:38:19,270 --> 00:38:24,070
and never come back and then there's the

00:38:22,300 --> 00:38:26,050
is it worth making the curtain smaller

00:38:24,070 --> 00:38:28,600
because it just kind of tends to grow

00:38:26,050 --> 00:38:30,340
whole time and then there's the do we

00:38:28,600 --> 00:38:34,060
care about all systems and code lying

00:38:30,340 --> 00:38:35,590
around yes that's and I think conclusion

00:38:34,060 --> 00:38:38,370
to our own code line of balance it's not

00:38:35,590 --> 00:38:42,600
good anybody it's not very big cares

00:38:38,370 --> 00:38:42,600
these are any conclusion of you this

00:38:43,050 --> 00:38:52,720
week we discuss her over I think but the

00:38:50,680 --> 00:38:55,090
important thing is actually not have to

00:38:52,720 --> 00:38:59,470
do with our port Linux it's the fact

00:38:55,090 --> 00:39:01,900
that we may face nine billion insecure

00:38:59,470 --> 00:39:07,000
network nodes in the future if we don't

00:39:01,900 --> 00:39:12,490
do something it's not let's get another

00:39:07,000 --> 00:39:15,640
problem well if we make the I don't know

00:39:12,490 --> 00:39:18,010
but the who knows if the nine billion

00:39:15,640 --> 00:39:26,830
nodes are all going to be you know with

00:39:18,010 --> 00:39:30,550
only two mega RAM my view foot is but a

00:39:26,830 --> 00:39:32,470
plus linux on cause they consult cause

00:39:30,550 --> 00:39:34,060
we'll run linux will be an Internet of

00:39:32,470 --> 00:39:36,010
Things they're sent you to the top

00:39:34,060 --> 00:39:38,560
Ledger's work and so it's probably worth

00:39:36,010 --> 00:39:39,700
pandering qld room yeah whatever you

00:39:38,560 --> 00:39:41,980
know they're going to be constraint

00:39:39,700 --> 00:39:44,350
system for their views or breasts and

00:39:41,980 --> 00:39:47,380
there's the middle of our processes and

00:39:44,350 --> 00:39:49,900
console cuts without any views so do you

00:39:47,380 --> 00:39:51,610
care enough to watch rather than it the

00:39:49,900 --> 00:39:58,240
solution will be open source really be

00:39:51,610 --> 00:40:00,150
living sometimes don't know yeah until

00:39:58,240 --> 00:40:02,740
we make it attractive a tough decision

00:40:00,150 --> 00:40:08,500
but the other the other question is if

00:40:02,740 --> 00:40:10,780
someone asks us well can you can you can

00:40:08,500 --> 00:40:12,850
can we improve support for linux on the

00:40:10,780 --> 00:40:14,770
cortex-m do we tell people these

00:40:12,850 --> 00:40:16,390
products adri tell them to use something

00:40:14,770 --> 00:40:19,380
other than arm who tell them to

00:40:16,390 --> 00:40:19,380
something other than Linux

00:40:23,230 --> 00:40:27,950
well not put too fine a point on it but

00:40:25,640 --> 00:40:34,370
right so his arm disincentive to solve

00:40:27,950 --> 00:40:37,340
this problem yes at least one thing like

00:40:34,370 --> 00:40:39,910
I got out of this so far as nobody seems

00:40:37,340 --> 00:40:44,150
to object to the idea of removing the

00:40:39,910 --> 00:40:52,370
support for really old architectures

00:40:44,150 --> 00:40:53,750
with no mm you know it's not about the

00:40:52,370 --> 00:41:04,190
lines of code it's it's about the test

00:40:53,750 --> 00:41:07,070
matrix yeah so one of one of the work

00:41:04,190 --> 00:41:08,780
that I've been involved in over the last

00:41:07,070 --> 00:41:10,670
one and a half years is trying to get

00:41:08,780 --> 00:41:13,070
random configurations to build cleanly

00:41:10,670 --> 00:41:15,290
in the kernel or the third of the

00:41:13,070 --> 00:41:17,350
problems that I run into is tough

00:41:15,290 --> 00:41:20,540
randomly breaking if a ton of the MMU

00:41:17,350 --> 00:41:24,230
some of these will also break with a

00:41:20,540 --> 00:41:26,330
cortex m3 some of them only break if I

00:41:24,230 --> 00:41:36,950
have a tip you Carly basically nobody

00:41:26,330 --> 00:41:46,070
uses yes that sounds like a lot of cases

00:41:36,950 --> 00:41:48,980
it's the MMU because no no it's not that

00:41:46,070 --> 00:41:51,260
one it's at the coming it's a

00:41:48,980 --> 00:41:53,060
combination of configurations omens if

00:41:51,260 --> 00:41:55,540
you turn them on together things break

00:41:53,060 --> 00:42:01,640
because nobody tested that combination

00:41:55,540 --> 00:42:04,520
the core no the architecture taken

00:42:01,640 --> 00:42:08,480
actually in my reference platform maybe

00:42:04,520 --> 00:42:10,400
work well it's currently working it's

00:42:08,480 --> 00:42:12,200
just what the only one that's working at

00:42:10,400 --> 00:42:20,120
the moment is the one that wanted rid of

00:42:12,200 --> 00:42:22,660
other reasons yeah we knew this one is

00:42:20,120 --> 00:42:22,660
actually complete

00:42:25,090 --> 00:42:45,150
who's it instead of frying to that bowl

00:42:28,330 --> 00:42:49,240
what that's external that was provided a

00:42:45,150 --> 00:42:52,330
60 people planting I think if you wrote

00:42:49,240 --> 00:42:55,300
happy with my monitor furthermore

00:42:52,330 --> 00:42:57,060
user-specified did you try to find a

00:42:55,300 --> 00:43:00,580
user space and energy of system is

00:42:57,060 --> 00:43:04,750
lonely you see it is yes so I'm 34 Carly

00:43:00,580 --> 00:43:06,220
page yes but that's a question do we do

00:43:04,750 --> 00:43:07,750
we care about it that's enough only

00:43:06,220 --> 00:43:17,880
narrow that we actually put work into

00:43:07,750 --> 00:43:17,880
making part x + 3 efm32 or stm32 insert

00:43:22,290 --> 00:43:27,490
but as high as i shone like the smallest

00:43:26,020 --> 00:43:29,050
a class systems they all have at least

00:43:27,490 --> 00:43:37,120
30 to make up a gram and i don't think

00:43:29,050 --> 00:43:40,090
this first portion 32 megabytes of AC

00:43:37,120 --> 00:43:41,860
come in user space even today we go to

00:43:40,090 --> 00:43:44,170
school you know but i need to make a

00:43:41,860 --> 00:43:46,030
bike works root of all I actually at the

00:43:44,170 --> 00:43:55,780
moment that's not a lot we have to do

00:43:46,030 --> 00:43:57,610
about this what am I thinking about yes

00:43:55,780 --> 00:43:58,990
that's very useful an affection for

00:43:57,610 --> 00:44:01,210
virtualization that's one of the reasons

00:43:58,990 --> 00:44:02,770
when one of my previous dropped at IBM

00:44:01,210 --> 00:44:04,600
people were looking into making systems

00:44:02,770 --> 00:44:08,340
much smaller so i think they delicately

00:44:04,600 --> 00:44:12,870
load four megabytes on the mainframe but

00:44:08,340 --> 00:44:12,870
that was very interesting target

00:44:22,730 --> 00:44:33,120
how are we with the time will be is to

00:44:25,860 --> 00:44:36,890
be done so the number of resources last

00:44:33,120 --> 00:44:36,890
slide of anyone would look up the slides

00:44:37,250 --> 00:44:49,110
so this is the key oh yeah that's listed

00:44:44,640 --> 00:44:51,420
as a page but millions of dollars then

00:44:49,110 --> 00:44:54,210
there's m crafters the company that's

00:44:51,420 --> 00:44:57,060
maintaining the 26 33 kernel and they

00:44:54,210 --> 00:45:02,100
have mega Desmond of sses they support

00:44:57,060 --> 00:45:05,550
them so one last comment people may not

00:45:02,100 --> 00:45:07,470
be aware mr. Reed llvm that net there

00:45:05,550 --> 00:45:10,800
was discussion at the last panel summit

00:45:07,470 --> 00:45:13,830
on Colonel Tigh ification and right now

00:45:10,800 --> 00:45:16,920
it looks like people that Intel are

00:45:13,830 --> 00:45:19,430
leading the battle to kind of revival

00:45:16,920 --> 00:45:23,100
mix tiny patches so it's just a size

00:45:19,430 --> 00:45:26,090
issue in general i'm not sure what their

00:45:23,100 --> 00:45:29,370
actual target is what they're up to

00:45:26,090 --> 00:45:31,680
that's just FYI one of the main

00:45:29,370 --> 00:45:35,460
interests there was to using linux as a

00:45:31,680 --> 00:45:36,960
bootloader it might mean because that's

00:45:35,460 --> 00:45:40,110
something that it seemed to be up

00:45:36,960 --> 00:45:42,450
policy doing that legs yeah you're on

00:45:40,110 --> 00:45:43,740
our medical orders oh that's an

00:45:42,450 --> 00:45:46,740
interesting use case on all platforms

00:45:43,740 --> 00:45:49,140
yes getting getting the phone way out of

00:45:46,740 --> 00:45:54,390
the way you can probably go to edit on

00:45:49,140 --> 00:45:56,850
our control but anyway there will

00:45:54,390 --> 00:45:58,800
probably be as near as I can tell there

00:45:56,850 --> 00:46:16,080
will be revived interest in shrinking

00:45:58,800 --> 00:46:18,260
the colonel exactly those are those are

00:46:16,080 --> 00:46:22,130
it knows I

00:46:18,260 --> 00:46:31,079
and Jay something more collective i

00:46:22,130 --> 00:46:33,720
close but then a lot of them are using

00:46:31,079 --> 00:46:37,170
linux like you can you know a Wi-Fi

00:46:33,720 --> 00:46:39,359
control power socket that has two

00:46:37,170 --> 00:46:43,849
megabytes of ram it run linux on it and

00:46:39,359 --> 00:47:00,380
it costs less than fact office again

00:46:43,849 --> 00:47:11,190
yeah Eric truly think you're wrong yep

00:47:00,380 --> 00:47:12,780
200 shades so you choose an ass so what

00:47:11,190 --> 00:47:14,130
do you think they're the the boundary

00:47:12,780 --> 00:47:15,510
should be what what's the smallest

00:47:14,130 --> 00:47:17,250
system in your mind that I should care

00:47:15,510 --> 00:47:27,779
about I just want to point out yeah

00:47:17,250 --> 00:47:29,339
right so you think participant so what

00:47:27,779 --> 00:47:50,190
do we need to do to make a number larger

00:47:29,339 --> 00:48:00,809
cities developers yes but I mean they're

00:47:50,190 --> 00:48:08,099
tall spine to fight its way between two

00:48:00,809 --> 00:48:12,660
it seriously and get good path Smith is

00:48:08,099 --> 00:48:15,180
here I'm thinking thanks for costco the

00:48:12,660 --> 00:48:18,779
only way that we're going to see real

00:48:15,180 --> 00:48:21,720
attraction I'm trying to do this stuff

00:48:18,779 --> 00:48:25,260
is if there's a product that really

00:48:21,720 --> 00:48:27,780
and talk about an actual solo Tuesday's

00:48:25,260 --> 00:48:31,170
that driver a couple of use he's little

00:48:27,780 --> 00:48:33,619
what the same thing it's fun to talk

00:48:31,170 --> 00:48:37,650
about but I really don't see their unity

00:48:33,619 --> 00:48:43,400
any traction avant well yeah the guy but

00:48:37,650 --> 00:48:47,430
it has minor Rs 10 and you won't do

00:48:43,400 --> 00:48:51,420
right now so we have some nursing things

00:48:47,430 --> 00:48:55,920
now get Lydia language text video of

00:48:51,420 --> 00:49:02,580
power in InDesign bloody ass and then

00:48:55,920 --> 00:49:04,410
the system but one of the problems with

00:49:02,580 --> 00:49:14,369
the really small systems is none of them

00:49:04,410 --> 00:49:17,280
has a proper to be 6 dec original but

00:49:14,369 --> 00:49:18,810
you cancel the contest the 7 billion or

00:49:17,280 --> 00:49:55,980
nine billion devices if you don't have

00:49:18,810 --> 00:49:59,280
ipv6 is that I really think you should

00:49:55,980 --> 00:50:03,599
take a look at tiny OS net okay they

00:49:59,280 --> 00:50:10,020
have they have a complete ipv6 stack on

00:50:03,599 --> 00:50:12,359
their system yes love a lot of those

00:50:10,020 --> 00:50:15,510
artists have what they call a complete

00:50:12,359 --> 00:50:24,900
ipv6 stack but there's different levels

00:50:15,510 --> 00:50:26,640
of completeness yeah that's I was

00:50:24,900 --> 00:50:29,820
looking through the list on wikipedia

00:50:26,640 --> 00:50:32,720
and that's like hundreds of them I had a

00:50:29,820 --> 00:50:47,990
hard time finding the ones that matter

00:50:32,720 --> 00:50:52,810
a lot of the park intact audio is thank

00:50:47,990 --> 00:50:52,810

YouTube URL: https://www.youtube.com/watch?v=TvM1wcJT0p0


