Title: LCU14-107: OP-TEE on ARMv8
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-107: OP-TEE on ARMv8

---------------------------------------------------

Speaker: Jens Wiklander
Track: Security
Location: Grand Peninsula C, Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
SWG is porting OP-TEE to ARMv8 using Fixed Virtual Platform. Initially OP-TEE is running secure world in aarch32 mode, but with the normal world code running in aarch64 mode. Since ARMv8 uses ARM Trusted Firmware we have patched it with an OP-TEE dispatcher to be able to communicate between secure and normal world.

---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137710
Google Event: 
Presentation: 
Video: 
Eatherpad: pad.linaro.org/p/lcu14-107 

---------------------------------------------------

★ Event Details ★
Linaro Connect USA - #LCU14
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:03,410 --> 00:00:08,610
so welcome to this session where we are

00:00:06,180 --> 00:00:16,800
going to talk about the running of tea

00:00:08,610 --> 00:00:20,699
on on v8 opti is an open source d and

00:00:16,800 --> 00:00:23,939
this result of collaboration work

00:00:20,699 --> 00:00:29,869
between este micro electronics and

00:00:23,939 --> 00:00:34,230
linares is fuel to work we have a

00:00:29,869 --> 00:00:38,070
complete it stack from normal world

00:00:34,230 --> 00:00:42,480
client api of the clients to call it and

00:00:38,070 --> 00:00:46,440
the latest kernel t4i walk of the Linux

00:00:42,480 --> 00:00:50,989
driver and defrosted OS and your monitor

00:00:46,440 --> 00:00:50,989
which is equal of the OS

00:00:58,660 --> 00:01:06,950
on our v8 we have fast food component is

00:01:04,070 --> 00:01:12,080
composite firmware and of tea has to

00:01:06,950 --> 00:01:15,520
work together with that on past karma

00:01:12,080 --> 00:01:22,810
runs at the l3 and this charge of

00:01:15,520 --> 00:01:30,920
guaranteeing its cute is his CI and

00:01:22,810 --> 00:01:37,369
essence is to secure of TOS runs at the

00:01:30,920 --> 00:01:40,550
secure l1 and need to cooperate with the

00:01:37,369 --> 00:01:48,860
on fast firmware for doing the switching

00:01:40,550 --> 00:01:52,729
between normal world and secure well if

00:01:48,860 --> 00:01:55,640
you look here we can see how the

00:01:52,729 --> 00:02:02,560
different parts fit together and we have

00:01:55,640 --> 00:02:06,289
the client api in non-secure il0 and

00:02:02,560 --> 00:02:09,259
then we have the normal world is not

00:02:06,289 --> 00:02:12,680
secure at one or two depending on if we

00:02:09,259 --> 00:02:16,340
have a hypervisor or not this is also

00:02:12,680 --> 00:02:23,660
where we have the linux kernel driver

00:02:16,340 --> 00:02:29,330
and then at l-3 we have the secure

00:02:23,660 --> 00:02:32,750
monitor and this is what the actual smc

00:02:29,330 --> 00:02:35,000
interfaces implemented so the old

00:02:32,750 --> 00:02:39,550
essence is issued from normal world

00:02:35,000 --> 00:02:46,250
which will be under hero product to

00:02:39,550 --> 00:02:48,970
secure world from this point and our S&C

00:02:46,250 --> 00:02:55,819
interface we have tried to build on

00:02:48,970 --> 00:02:59,450
generic API with people PS MC which all

00:02:55,819 --> 00:03:03,200
the what do i bring home world the

00:02:59,450 --> 00:03:07,990
dispatcher in f3 and trusted always in

00:03:03,200 --> 00:03:15,520
years curiel one need to agree on how we

00:03:07,990 --> 00:03:18,700
k and then further down in secure yield

00:03:15,520 --> 00:03:27,970
zero we have reserved applications that

00:03:18,700 --> 00:03:32,650
run seeing more or less same extent the

00:03:27,970 --> 00:03:35,550
view monitor runs a deal three and has

00:03:32,650 --> 00:03:41,590
to be part of my cell phone work since

00:03:35,550 --> 00:03:44,290
that loading at the time this cumulative

00:03:41,590 --> 00:03:50,170
within uncross lungworm is called

00:03:44,290 --> 00:03:53,200
dispatcher and the dispatcher acts as a

00:03:50,170 --> 00:03:59,170
few monitor on interfaces with frosted

00:03:53,200 --> 00:04:01,960
OS which runs a secure ear mom as of now

00:03:59,170 --> 00:04:04,360
that's already one especially known for

00:04:01,960 --> 00:04:09,850
the phone work and tests if you pay

00:04:04,360 --> 00:04:13,870
locust dispatcher and that's tracyton

00:04:09,850 --> 00:04:18,130
were showing how you can integrate the

00:04:13,870 --> 00:04:23,710
dispatcher I guess they also use it the

00:04:18,130 --> 00:04:25,660
testing purposes for opti we need

00:04:23,710 --> 00:04:28,300
another dispatch since we use a

00:04:25,660 --> 00:04:34,450
different protocol when communicating

00:04:28,300 --> 00:04:43,720
with with opti and we call it to opt a

00:04:34,450 --> 00:04:47,370
dispatcher you could call it a module

00:04:43,720 --> 00:04:47,370
within opposite former

00:04:58,570 --> 00:05:02,020
yep thank you

00:05:02,919 --> 00:05:08,960
the obtained structure works imprints

00:05:06,289 --> 00:05:12,650
were like the test acute payload

00:05:08,960 --> 00:05:17,120
dispatcher but it handles smc specific

00:05:12,650 --> 00:05:22,280
to update if the rods if i use and i

00:05:17,120 --> 00:05:29,660
accuse specific for opti and it also

00:05:22,280 --> 00:05:32,690
starts up t in a ouch 32 as compared to

00:05:29,660 --> 00:05:36,919
a testicle taylor which runs in a

00:05:32,690 --> 00:05:44,289
opposite for the dispatcher itself is

00:05:36,919 --> 00:05:49,099
transparent normal world we have no

00:05:44,289 --> 00:05:53,599
dispatcher specific changes in our linux

00:05:49,099 --> 00:06:00,470
rival it's same whether it's rb8 or its

00:05:53,599 --> 00:06:02,060
be 70 so so you're saying that there's

00:06:00,470 --> 00:06:04,520
no changes between different

00:06:02,060 --> 00:06:06,949
architectures sorry you're saying that

00:06:04,520 --> 00:06:10,699
there's no dispatcher change between v7

00:06:06,949 --> 00:06:13,130
and v8 yeah okay but you still have the

00:06:10,699 --> 00:06:16,430
Linux driver is specific to the opti

00:06:13,130 --> 00:06:18,680
dispatcher you won't worry the

00:06:16,430 --> 00:06:22,400
difference factory it's a specific form

00:06:18,680 --> 00:06:24,979
the TSMC protocol that we have when we

00:06:22,400 --> 00:06:27,050
communicate with optio s but the

00:06:24,979 --> 00:06:35,120
protocol is the same regardless if it's

00:06:27,050 --> 00:06:37,960
be a visa right ok ok though here i was

00:06:35,120 --> 00:06:46,159
computed the way it was written here yes

00:06:37,960 --> 00:06:50,599
Godric gotta make sense and the Optio

00:06:46,159 --> 00:06:53,210
was prancing ouch that eco mode to

00:06:50,599 --> 00:07:00,320
minimize any of any initial effort to

00:06:53,210 --> 00:07:02,780
port 2 and 2 on v8 the internal secure

00:07:00,320 --> 00:07:05,120
portal that we used before is replaced

00:07:02,780 --> 00:07:09,560
with an interface to work the opti

00:07:05,120 --> 00:07:12,159
dispatcher in nonplussed homework and we

00:07:09,560 --> 00:07:12,159
can see here

00:07:14,539 --> 00:07:28,770
but we have a skill monitor that is kind

00:07:18,479 --> 00:07:31,680
of external towards of T of the client

00:07:28,770 --> 00:07:34,440
and Linux rival it was just ported to

00:07:31,680 --> 00:07:37,910
compile properly without receipts for

00:07:34,440 --> 00:07:40,860
since normal world is running in a on 64

00:07:37,910 --> 00:07:45,599
the name Linux driver has to be limited

00:07:40,860 --> 00:07:49,789
to only use smc 32 since we are

00:07:45,599 --> 00:07:58,830
following arm smc call a convention and

00:07:49,789 --> 00:08:01,409
of the OS is and we run in a 32 that

00:07:58,830 --> 00:08:07,889
means for instance that we can't use

00:08:01,409 --> 00:08:15,330
physical pointers that are 64 bit so

00:08:07,889 --> 00:08:19,650
that's a limitation we have all the

00:08:15,330 --> 00:08:25,979
source code at github opti at the usual

00:08:19,650 --> 00:08:28,650
place and thus compositor work and we

00:08:25,979 --> 00:08:32,310
also have a dispatcher would request

00:08:28,650 --> 00:08:37,620
that is still being reviewed I guess it

00:08:32,310 --> 00:08:39,959
would be matched by two so this is that

00:08:37,620 --> 00:08:42,779
to get emerged up into our trusted

00:08:39,959 --> 00:08:45,779
farmer socially maintains artist for the

00:08:42,779 --> 00:08:48,149
central repo not as a separate it will

00:08:45,779 --> 00:08:52,220
be most into on Christopher mehran we

00:08:48,149 --> 00:08:52,220
will help maintaining their

00:08:56,430 --> 00:09:03,880
MC and the the kernel driver is that

00:09:00,880 --> 00:09:09,640
what's the progress for remain lining

00:09:03,880 --> 00:09:12,040
that we have we have basically two

00:09:09,640 --> 00:09:14,230
drivers we have one legacy driver which

00:09:12,040 --> 00:09:17,500
is the one that we have a get up now

00:09:14,230 --> 00:09:21,360
which I did port to on be eight or so

00:09:17,500 --> 00:09:23,740
and then Stas working on a new one that

00:09:21,360 --> 00:09:27,040
that's a better option tech chure which

00:09:23,740 --> 00:09:29,830
is the one we would try to mainline but

00:09:27,040 --> 00:09:32,470
what's the the timeline for getting that

00:09:29,830 --> 00:09:34,450
really will what are you projecting for

00:09:32,470 --> 00:09:38,070
having something ready for mainline

00:09:34,450 --> 00:09:43,240
posting however that's breaking question

00:09:38,070 --> 00:09:45,640
but do you think he okay miss it we had

00:09:43,240 --> 00:09:47,530
a plan to try to have it ready already

00:09:45,640 --> 00:09:51,310
in October this year but I don't think

00:09:47,530 --> 00:09:53,200
that will happen right there so as soon

00:09:51,310 --> 00:09:55,570
as possible but it depends a little bit

00:09:53,200 --> 00:09:59,080
on when we actually get our fingers of

00:09:55,570 --> 00:10:00,670
this driver but it's it looks a little

00:09:59,080 --> 00:10:02,920
bit better it's better structured it's

00:10:00,670 --> 00:10:04,480
divided into two components one generic

00:10:02,920 --> 00:10:07,020
component and then one specific

00:10:04,480 --> 00:10:09,760
component for the different environments

00:10:07,020 --> 00:10:12,190
dedicated security process for the first

00:10:09,760 --> 00:10:15,490
own run inside show I think it's worth

00:10:12,190 --> 00:10:18,250
waiting for itself and for that reason

00:10:15,490 --> 00:10:20,440
we are trying to not put too much effort

00:10:18,250 --> 00:10:22,600
in the kernel driver for mobile we know

00:10:20,440 --> 00:10:25,530
it will be replaced as Rama Sri the

00:10:22,600 --> 00:10:25,530
champions

00:10:33,820 --> 00:10:38,060
the Joseph firmware using psci provides

00:10:36,800 --> 00:10:39,950
some specific hooks around power

00:10:38,060 --> 00:10:41,329
management before the just at OS if it

00:10:39,950 --> 00:10:43,700
wants to make use of that is that

00:10:41,329 --> 00:10:45,320
something that you are using today or is

00:10:43,700 --> 00:10:46,670
it something you can see making Phelps

00:10:45,320 --> 00:10:48,800
he could make use of a future where it

00:10:46,670 --> 00:10:51,350
cannot know when doors are being to

00:10:48,800 --> 00:10:58,399
spend it all or woken up or hop logged

00:10:51,350 --> 00:11:03,260
out the charity we don't need it since

00:10:58,399 --> 00:11:05,240
we don't really use any hard one but we

00:11:03,260 --> 00:11:08,600
have all the hooks in place just did as

00:11:05,240 --> 00:11:13,370
in the skill pelo to the testicle

00:11:08,600 --> 00:11:17,019
payload so it's just a matter of filling

00:11:13,370 --> 00:11:17,019
in the functions if you need something

00:11:23,170 --> 00:11:30,709
how is the the protocol and the

00:11:26,570 --> 00:11:33,620
communication channel 2 T is it is it

00:11:30,709 --> 00:11:35,779
stable or they're like if we once we

00:11:33,620 --> 00:11:38,300
have a driver emergent main line or do

00:11:35,779 --> 00:11:40,070
we have some assurance that that that

00:11:38,300 --> 00:11:44,380
driver is now going to work with lots of

00:11:40,070 --> 00:11:52,029
different platforms that implement opt

00:11:44,380 --> 00:11:57,019
get lost is the protocol stable yes a

00:11:52,029 --> 00:12:00,019
less stable as we can see it at least I

00:11:57,019 --> 00:12:04,430
mean we haven't had to make any drastic

00:12:00,019 --> 00:12:10,970
changes over the last few months so can

00:12:04,430 --> 00:12:12,740
we expect that between you know two

00:12:10,970 --> 00:12:17,870
platforms or three platforms that have

00:12:12,740 --> 00:12:19,370
oh BTW on it the same kernel would be

00:12:17,870 --> 00:12:22,610
able to work with all three of them and

00:12:19,370 --> 00:12:25,760
expect the same interface yes I think so

00:12:22,610 --> 00:12:30,680
I'm this protocol is designed in an

00:12:25,760 --> 00:12:33,290
extensible way so I don't see that we

00:12:30,680 --> 00:12:36,170
need to make any changes in the protocol

00:12:33,290 --> 00:12:39,050
itself room and it could be that you

00:12:36,170 --> 00:12:40,870
could perhaps need some extra involved

00:12:39,050 --> 00:12:43,580
call for some reason

00:12:40,870 --> 00:12:45,440
but that's not really the protocol in

00:12:43,580 --> 00:12:48,290
but it would of course okay I've

00:12:45,440 --> 00:12:50,060
affected rival itself right the reason

00:12:48,290 --> 00:12:52,940
I'm asking the question is I'm thinking

00:12:50,060 --> 00:12:59,120
about architecture architecture and

00:12:52,940 --> 00:13:01,490
ecosystem of if opt is implemented can

00:12:59,120 --> 00:13:06,380
the colonel discover what services are

00:13:01,490 --> 00:13:10,150
provided in rely on yeah the driver

00:13:06,380 --> 00:13:14,960
stopped with probing opti asking for

00:13:10,150 --> 00:13:18,950
which version it is some specific uuid

00:13:14,960 --> 00:13:28,010
for this of tea and so on to be able to

00:13:18,950 --> 00:13:30,140
know what what it's located right we

00:13:28,010 --> 00:13:32,720
have mention that we have been running

00:13:30,140 --> 00:13:34,310
on this on s these platforms is start

00:13:32,720 --> 00:13:37,460
working with it and now lately we have

00:13:34,310 --> 00:13:39,890
been running on ftp and you last week at

00:13:37,460 --> 00:13:43,160
it up and running on q mu and we have

00:13:39,890 --> 00:13:45,320
one hour port on going and I don't think

00:13:43,160 --> 00:13:48,400
we have made any change at all actually

00:13:45,320 --> 00:13:50,290
to get linux kernel driver so far when

00:13:48,400 --> 00:13:58,070
important to it's different

00:13:50,290 --> 00:14:01,610
architectural platforms what's your plan

00:13:58,070 --> 00:14:05,450
for reporting into v8 silicon to

00:14:01,610 --> 00:14:08,540
hardware on v8 you mean on juno well do

00:14:05,450 --> 00:14:11,630
any NE VA silicon among fe PS isn't

00:14:08,540 --> 00:14:12,800
isn't isn't really quite enough for sort

00:14:11,630 --> 00:14:14,510
of exploring some of the further

00:14:12,800 --> 00:14:16,250
applications that you could start trying

00:14:14,510 --> 00:14:19,460
to build on top of it obviously you're

00:14:16,250 --> 00:14:21,200
working recently but v7 hardware but i'm

00:14:19,460 --> 00:14:26,060
just curious is what the plans offer v8

00:14:21,200 --> 00:14:28,010
hard way October this year so it's

00:14:26,060 --> 00:14:30,590
actually not where we have the access

00:14:28,010 --> 00:14:32,360
now but not entirely sure if we have the

00:14:30,590 --> 00:14:35,090
instrument infrastructure to be able to

00:14:32,360 --> 00:14:38,000
change all components remotely as we

00:14:35,090 --> 00:14:42,230
need today so what if you would have a

00:14:38,000 --> 00:14:44,660
number would stop working yeah exactly

00:14:42,230 --> 00:14:46,430
so but if we get our fingers on the

00:14:44,660 --> 00:14:48,770
device and we will do it immediately we

00:14:46,430 --> 00:14:51,380
are also discussed to maybe that the

00:14:48,770 --> 00:14:53,890
ends goes to Cambridge for we can try to

00:14:51,380 --> 00:14:53,890
sort it out

00:15:01,600 --> 00:15:07,000
so I came a little betrayed but did he

00:15:04,190 --> 00:15:12,880
said there are some sample secure apps

00:15:07,000 --> 00:15:15,200
available right now we have only one

00:15:12,880 --> 00:15:17,210
publicly available on that see hello

00:15:15,200 --> 00:15:20,300
world application that we'd imagine the

00:15:17,210 --> 00:15:22,220
previous presentation but he internally

00:15:20,300 --> 00:15:24,260
when we are testing operative while

00:15:22,220 --> 00:15:27,410
developing we have a test framework

00:15:24,260 --> 00:15:31,970
which contains several trusted

00:15:27,410 --> 00:15:39,140
applications and I guess that we have

00:15:31,970 --> 00:15:43,190
plans to make them available I was is op

00:15:39,140 --> 00:15:47,840
TSM be aware i can get run on multiple

00:15:43,190 --> 00:15:50,450
core simultaneously or eats well it's

00:15:47,840 --> 00:15:54,230
not the restricted to run only unwanted

00:15:50,450 --> 00:15:57,350
you it it depends on the normal world

00:15:54,230 --> 00:15:59,720
which cpu attempt does secure world with

00:15:57,350 --> 00:16:05,260
it then we will run on that one but we

00:15:59,720 --> 00:16:05,260
only have one freddies world at the time

00:16:12,160 --> 00:16:17,800
is there any global platform conformance

00:16:15,170 --> 00:16:20,780
test just to make sure I mean easier

00:16:17,800 --> 00:16:22,370
optus it's compiled with a google bad

00:16:20,780 --> 00:16:28,130
for specification and do you have any

00:16:22,370 --> 00:16:30,770
tests were to demonstrate it we tried to

00:16:28,130 --> 00:16:35,150
have it as compliant as possible but we

00:16:30,770 --> 00:16:37,580
will probably never certify it but it

00:16:35,150 --> 00:16:44,360
should be fairly close and are you aware

00:16:37,580 --> 00:16:47,720
of any government test we have destitute

00:16:44,360 --> 00:16:49,700
set well we don't have any performance

00:16:47,720 --> 00:16:53,260
tests except of course but we have

00:16:49,700 --> 00:16:53,260
something that is help us

00:17:07,460 --> 00:17:16,790

YouTube URL: https://www.youtube.com/watch?v=JViplz-ah9M


