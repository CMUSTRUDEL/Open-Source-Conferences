Title: LCU14-113: Upstreaming 101
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-113: Upstreaming 101

---------------------------------------------------

Speaker: 
Track: Training
Location: , Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
This session is an introductory course on Linux kernel upstreaming fundamentals. The course covers the definition the Linux mainline kernel tree as well as the maintainer hierarchy and processes used to contribute software into the mainline kernel. Special focus is given to understanding what documentation will help understand the process and mechanics in more detail while breaking the workflow into the various steps of upstreaming software patches. The target audience is both software engineers and engineering managers preparing to upstream software into the kernel. The topic requires a solid background in software configuration management terminology and the git SCM tool as well as a good technical understanding of the Linux kernel itself.
---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137716
Google Event: 
Presentation: 
Video: 
Eatherpad: pad.linaro.org/p/lcu14-113
---------------------------------------------------

★ Event Details ★
Linaro Connect USA -  #LCU14 
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:04,740 --> 00:00:13,930
ok welcome hopefully some of you enjoyed

00:00:10,390 --> 00:00:17,200
the previous session about general

00:00:13,930 --> 00:00:19,480
working in upstream communities and a

00:00:17,200 --> 00:00:21,070
lot of the etiquette things and so forth

00:00:19,480 --> 00:00:26,789
because we'll build a little bit on that

00:00:21,070 --> 00:00:30,220
in this session this is up streaming 101

00:00:26,789 --> 00:00:33,519
welcome to it and we'll get a little

00:00:30,220 --> 00:00:37,089
overview the target audience here is

00:00:33,519 --> 00:00:38,949
mostly developers engineering managers

00:00:37,089 --> 00:00:40,179
make it have been out of this because if

00:00:38,949 --> 00:00:42,100
you're an engineering manager you

00:00:40,179 --> 00:00:44,079
probably want to know what it is your

00:00:42,100 --> 00:00:46,659
developers are doing if you haven't done

00:00:44,079 --> 00:00:49,389
this before it's a bit different from

00:00:46,659 --> 00:00:53,379
your typical corporate development

00:00:49,389 --> 00:00:57,069
environment our focus here is on linux

00:00:53,379 --> 00:00:58,989
kernel up streaming and now just want to

00:00:57,069 --> 00:01:00,579
really point that out the last session

00:00:58,989 --> 00:01:02,170
is really talking about a lot of the

00:01:00,579 --> 00:01:03,850
different communities you could possibly

00:01:02,170 --> 00:01:06,970
work in as you're you're working on your

00:01:03,850 --> 00:01:08,800
your arm ecosystem projects here I'm

00:01:06,970 --> 00:01:12,340
going to focus on the colonel community

00:01:08,800 --> 00:01:14,560
and the things that make it unique we'll

00:01:12,340 --> 00:01:16,600
talk about what up streaming is there's

00:01:14,560 --> 00:01:18,730
a lot of misconceptions people have in

00:01:16,600 --> 00:01:20,740
companies sometimes so we want to define

00:01:18,730 --> 00:01:23,050
it and then we'll really get into the

00:01:20,740 --> 00:01:27,970
meat of how to do it execution that's

00:01:23,050 --> 00:01:30,580
really what this session is about so

00:01:27,970 --> 00:01:33,730
prereqs I expect you to be familiar with

00:01:30,580 --> 00:01:36,490
source code control techniques in

00:01:33,730 --> 00:01:39,010
particular expect you to know get

00:01:36,490 --> 00:01:41,230
terminology so hopefully if you're

00:01:39,010 --> 00:01:44,620
working with Linux on arm you're already

00:01:41,230 --> 00:01:46,900
using get inside your company if you're

00:01:44,620 --> 00:01:49,290
not you better learn it real quick it's

00:01:46,900 --> 00:01:52,060
fundamental to doing anything upstream

00:01:49,290 --> 00:01:54,460
and then expect you have some technical

00:01:52,060 --> 00:01:58,300
understanding of the kernel that really

00:01:54,460 --> 00:02:02,250
helps so what is up streaming again

00:01:58,300 --> 00:02:05,500
we're talking in a linux kernel context

00:02:02,250 --> 00:02:09,099
upstream means to move software into the

00:02:05,500 --> 00:02:11,260
top-level linux repository and what that

00:02:09,099 --> 00:02:14,290
means and it's often a misconception

00:02:11,260 --> 00:02:16,840
within companies this upstream and

00:02:14,290 --> 00:02:19,359
this is the main line Linux repository

00:02:16,840 --> 00:02:23,519
that list Torvalds owns that's the only

00:02:19,359 --> 00:02:23,519
thing that we should ever call main line

00:02:24,150 --> 00:02:29,620
so just to further punctuate this point

00:02:27,310 --> 00:02:32,500
because I run into a lot of companies

00:02:29,620 --> 00:02:34,239
i've been in the companies where people

00:02:32,500 --> 00:02:37,060
are saying well we just we put this in

00:02:34,239 --> 00:02:40,180
our in our XYZ mainline insert your

00:02:37,060 --> 00:02:42,430
company name here right and a lot of

00:02:40,180 --> 00:02:43,959
time you'll have a management or other

00:02:42,430 --> 00:02:46,870
individuals to say well we have our

00:02:43,959 --> 00:02:49,870
software and main line because the term

00:02:46,870 --> 00:02:52,480
is a bit overloaded so the best thing

00:02:49,870 --> 00:02:54,669
you can do to educate people to say this

00:02:52,480 --> 00:02:56,650
is where that term comes from when we're

00:02:54,669 --> 00:02:58,090
talking about going upstream in the

00:02:56,650 --> 00:03:00,730
kernel context we're talking about

00:02:58,090 --> 00:03:02,680
mainline you can go to kernel.org you

00:03:00,730 --> 00:03:04,959
can show these people this is what

00:03:02,680 --> 00:03:08,939
mainline means that's Lewis torvalds

00:03:04,959 --> 00:03:11,260
tree that's why we use the term mainline

00:03:08,939 --> 00:03:15,790
it's best if you don't use it to

00:03:11,260 --> 00:03:18,940
describe any other Colonel tree so who

00:03:15,790 --> 00:03:22,359
exactly contributes to mainline we have

00:03:18,940 --> 00:03:25,239
a fortune to have some nice to

00:03:22,359 --> 00:03:28,359
statistics kept of the top contributors

00:03:25,239 --> 00:03:31,569
broken out by companies and so forth if

00:03:28,359 --> 00:03:34,000
we just take the when I updated this I

00:03:31,569 --> 00:03:35,260
took say at the top 15 here gives you a

00:03:34,000 --> 00:03:38,049
little thought if you're not already

00:03:35,260 --> 00:03:40,479
doing up streaming your company maybe

00:03:38,049 --> 00:03:42,519
you haven't figured out how to actually

00:03:40,479 --> 00:03:45,699
quantify and show the business reasons

00:03:42,519 --> 00:03:48,040
why you need to do this ok you can look

00:03:45,699 --> 00:03:49,840
at the who's who of companies and see

00:03:48,040 --> 00:03:52,180
all these companies that found business

00:03:49,840 --> 00:03:56,709
reasons of why they have to do this and

00:03:52,180 --> 00:03:58,750
aggressively do this if you're not there

00:03:56,709 --> 00:04:04,720
you probably want to think about why

00:03:58,750 --> 00:04:07,599
you're not there so how do we get swim

00:04:04,720 --> 00:04:10,989
upstream in the main line so there's a

00:04:07,599 --> 00:04:13,359
distinct hierarchy of repositories of

00:04:10,989 --> 00:04:16,599
git repositories I talked about got to

00:04:13,359 --> 00:04:19,930
know your you or get terminology there

00:04:16,599 --> 00:04:22,030
get trees these repositories and one or

00:04:19,930 --> 00:04:25,210
more of these topic branches will then

00:04:22,030 --> 00:04:26,970
feed into the mainline kernel in a

00:04:25,210 --> 00:04:31,620
larger hierarchy

00:04:26,970 --> 00:04:33,660
so each of these repositories has an

00:04:31,620 --> 00:04:35,580
individual owner all right these are all

00:04:33,660 --> 00:04:37,770
different people that own different

00:04:35,580 --> 00:04:40,560
pieces of this so let's take a look at

00:04:37,770 --> 00:04:45,810
that a little bit give a little context

00:04:40,560 --> 00:04:48,630
to it diagrams help so if we're

00:04:45,810 --> 00:04:51,560
mainlining changes we have some set of

00:04:48,630 --> 00:04:54,420
code that we want to get upstream okay

00:04:51,560 --> 00:04:57,410
depending on what type of code it is it

00:04:54,420 --> 00:04:59,790
will go initially to a different

00:04:57,410 --> 00:05:01,440
repository depending on what part part

00:04:59,790 --> 00:05:04,500
of the colonel you're dealing with so a

00:05:01,440 --> 00:05:07,350
lot of times a common thing especially

00:05:04,500 --> 00:05:10,200
when we're working on new SOC can be

00:05:07,350 --> 00:05:13,200
common with linaro members you may have

00:05:10,200 --> 00:05:17,910
a driver maintainer it could be you know

00:05:13,200 --> 00:05:20,220
DWC 33 like a USB driver some of the RM

00:05:17,910 --> 00:05:23,340
IP cores those go through specific

00:05:20,220 --> 00:05:25,310
driver maintain errs okay if you're

00:05:23,340 --> 00:05:28,020
working on architecture specific code

00:05:25,310 --> 00:05:30,450
perhaps you're working on some cash code

00:05:28,020 --> 00:05:32,790
for arm you're going to go through an

00:05:30,450 --> 00:05:35,940
architecture level maintainer and then

00:05:32,790 --> 00:05:38,340
there's different features okay device

00:05:35,940 --> 00:05:41,430
tree has a core maintainer grant likely

00:05:38,340 --> 00:05:43,410
maintains that core code if you need to

00:05:41,430 --> 00:05:46,130
do work or add something new you would

00:05:43,410 --> 00:05:49,590
deal with that core feature maintainer

00:05:46,130 --> 00:05:51,270
and then what you can see is if let's

00:05:49,590 --> 00:05:53,580
say you were doing that driver work then

00:05:51,270 --> 00:05:55,910
you have the subsystem maintainer that

00:05:53,580 --> 00:05:58,620
each of those drivers fits within and

00:05:55,910 --> 00:06:00,270
you may move things if you need to make

00:05:58,620 --> 00:06:02,669
generic changes you may need to deal

00:06:00,270 --> 00:06:04,350
with that subsystem maintainer but at

00:06:02,669 --> 00:06:06,780
the end of the day each of those

00:06:04,350 --> 00:06:11,400
repository feeds up into Lynn is's

00:06:06,780 --> 00:06:14,720
mainline tree so let's talk about

00:06:11,400 --> 00:06:18,270
maintain errs who they are what they do

00:06:14,720 --> 00:06:20,729
essentially they're their core component

00:06:18,270 --> 00:06:22,229
code owners no different than what

00:06:20,729 --> 00:06:25,530
happens in the company where we have an

00:06:22,229 --> 00:06:28,169
owner for a specific feature has

00:06:25,530 --> 00:06:31,140
responsibility for this latest community

00:06:28,169 --> 00:06:32,880
we have the same thing and as I kind of

00:06:31,140 --> 00:06:36,510
pointed out in the diagram you have that

00:06:32,880 --> 00:06:39,539
broken up you have subsystem owners you

00:06:36,510 --> 00:06:40,310
have dry owners for specific drivers

00:06:39,539 --> 00:06:45,020
some

00:06:40,310 --> 00:06:47,570
x a driver like a common license do

00:06:45,020 --> 00:06:50,390
siebie block that's a full-time job

00:06:47,570 --> 00:06:52,060
sometimes for a maintainer just to deal

00:06:50,390 --> 00:06:56,720
with that and all the different

00:06:52,060 --> 00:06:59,030
architectures it's used on and you have

00:06:56,720 --> 00:07:01,060
file system maintained errs you have

00:06:59,030 --> 00:07:04,670
maintained errs for each architecture

00:07:01,060 --> 00:07:07,940
and and in different platforms so

00:07:04,670 --> 00:07:10,130
there's a lot of maintained errs active

00:07:07,940 --> 00:07:11,720
in the kernel each of them we were

00:07:10,130 --> 00:07:14,870
saying is responsible for a slice of

00:07:11,720 --> 00:07:19,760
this kernel tree and really the core

00:07:14,870 --> 00:07:21,860
role is to be gatekeepers they have to

00:07:19,760 --> 00:07:25,880
determine what the acceptance criteria

00:07:21,860 --> 00:07:28,820
is for their piece of the colonel and so

00:07:25,880 --> 00:07:30,830
they are the end person who controls

00:07:28,820 --> 00:07:32,900
acceptance of your patch into the kernel

00:07:30,830 --> 00:07:37,640
it all starts with that first level

00:07:32,900 --> 00:07:42,860
maintainer put a little quantified a bit

00:07:37,640 --> 00:07:47,050
I I think this was 313 time frames the

00:07:42,860 --> 00:07:50,000
last time I ran this it's more by now

00:07:47,050 --> 00:07:51,830
912 different maintained errs for

00:07:50,000 --> 00:07:53,930
different pieces of the colonel it's a

00:07:51,830 --> 00:07:57,650
lot of people right it's very

00:07:53,930 --> 00:07:59,900
distributed and so your first thing

00:07:57,650 --> 00:08:01,160
maybe we'll check how do i how do i

00:07:59,900 --> 00:08:04,730
figure out where to send my patches

00:08:01,160 --> 00:08:06,770
right so that information is there the

00:08:04,730 --> 00:08:08,690
informations all in the maintainer smile

00:08:06,770 --> 00:08:11,300
that's why i show how you get this

00:08:08,690 --> 00:08:14,540
information just by gripping it out for

00:08:11,300 --> 00:08:16,880
numbers of people and what you can do is

00:08:14,540 --> 00:08:20,090
you can see here's Russell king who

00:08:16,880 --> 00:08:24,320
maintains the core arm code and you see

00:08:20,090 --> 00:08:26,900
there's a well formatted entry here for

00:08:24,320 --> 00:08:29,360
him so you've got the maintainer name

00:08:26,900 --> 00:08:32,450
you've got a mailing list of which you

00:08:29,360 --> 00:08:34,610
want to send patches to if there's a

00:08:32,450 --> 00:08:37,040
website that may have information about

00:08:34,610 --> 00:08:39,680
that area maybe documentation on a

00:08:37,040 --> 00:08:41,780
subsystem it can be there and then a

00:08:39,680 --> 00:08:43,730
status right in this case it's

00:08:41,780 --> 00:08:46,310
maintained there are pieces of the

00:08:43,730 --> 00:08:48,920
kernel that are unmaintained right maybe

00:08:46,310 --> 00:08:50,360
maintainer is moved on something like

00:08:48,920 --> 00:08:52,450
that and they're orphaned all right

00:08:50,360 --> 00:08:57,070
there's a number of different

00:08:52,450 --> 00:09:02,830
status situations and then what's really

00:08:57,070 --> 00:09:07,080
important is this location in the kernel

00:09:02,830 --> 00:09:09,730
tree of what that person owns right so

00:09:07,080 --> 00:09:13,930
for Russell it's all the core code in

00:09:09,730 --> 00:09:16,750
our charm so that's how you find out who

00:09:13,930 --> 00:09:17,950
you want to deal with the other thing

00:09:16,750 --> 00:09:19,960
that's really important when you're

00:09:17,950 --> 00:09:23,140
doing upstream it's very different from

00:09:19,960 --> 00:09:25,900
internal development is merge windows

00:09:23,140 --> 00:09:28,330
you need to think about what emerged

00:09:25,900 --> 00:09:30,580
window is understand the timing of them

00:09:28,330 --> 00:09:32,530
so you can understand the scheduling of

00:09:30,580 --> 00:09:36,610
having your code ready and when you want

00:09:32,530 --> 00:09:40,090
to submit it so merge windows open every

00:09:36,610 --> 00:09:42,580
10 weeks plus or minus one week okay not

00:09:40,090 --> 00:09:45,160
very exact but pretty close pretty

00:09:42,580 --> 00:09:48,270
predictable the merge windows open for

00:09:45,160 --> 00:09:51,280
two weeks all right that's very firm

00:09:48,270 --> 00:09:54,430
there's been some exceptions but that's

00:09:51,280 --> 00:09:57,610
you pretty much bank on that but the

00:09:54,430 --> 00:09:59,260
important thing is is that when you want

00:09:57,610 --> 00:10:01,000
to get something upstream new

00:09:59,260 --> 00:10:05,160
functionalities only taken during the

00:10:01,000 --> 00:10:08,440
merge window period no other times so

00:10:05,160 --> 00:10:10,330
every 10 weeks or so you have a two-week

00:10:08,440 --> 00:10:13,990
window at which things can be merged

00:10:10,330 --> 00:10:16,120
into lettuces tree okay and what you can

00:10:13,990 --> 00:10:19,090
see here is to see that progression

00:10:16,120 --> 00:10:21,130
between the previous release you get

00:10:19,090 --> 00:10:22,870
that two-week merge window and then if

00:10:21,130 --> 00:10:25,090
you're familiar with release candidates

00:10:22,870 --> 00:10:28,390
there's a stabilization process before

00:10:25,090 --> 00:10:31,150
that final release is made and they

00:10:28,390 --> 00:10:32,800
typically go RC 12 maybe seven or eight

00:10:31,150 --> 00:10:34,990
and it just depends that will vary

00:10:32,800 --> 00:10:41,590
that's where that plus or minus a week

00:10:34,990 --> 00:10:43,990
comes if we go to an RC eight or so so

00:10:41,590 --> 00:10:47,320
to further clarify because this is

00:10:43,990 --> 00:10:49,600
really a difficult thing for people to

00:10:47,320 --> 00:10:51,550
get in their planning process and if

00:10:49,600 --> 00:10:53,050
they're they're talking about maybe

00:10:51,550 --> 00:10:54,310
committing to their managers when they

00:10:53,050 --> 00:10:57,070
think they might be able to get

00:10:54,310 --> 00:10:59,670
something upstream really need to

00:10:57,070 --> 00:11:03,250
understand that these merge windows so

00:10:59,670 --> 00:11:06,310
because that merge window that's the

00:11:03,250 --> 00:11:08,650
point where the maintainer

00:11:06,310 --> 00:11:10,750
right or the subsystem maintainer can

00:11:08,650 --> 00:11:12,820
send pull requests to us we'll talk

00:11:10,750 --> 00:11:16,210
about pull request a little bit later

00:11:12,820 --> 00:11:18,340
but because that two weeks that means

00:11:16,210 --> 00:11:20,560
that you can't post your code right

00:11:18,340 --> 00:11:22,960
right before that merge window ordering

00:11:20,560 --> 00:11:27,010
it you need to have it accepted by that

00:11:22,960 --> 00:11:30,670
maintainer and in his tree by their tree

00:11:27,010 --> 00:11:35,320
by you know say RC six RC seven at the

00:11:30,670 --> 00:11:38,529
latest preferably earlier so you have to

00:11:35,320 --> 00:11:39,880
be doing all your work ahead of that so

00:11:38,529 --> 00:11:41,920
you need to think about these merge

00:11:39,880 --> 00:11:44,230
windows when your development happens

00:11:41,920 --> 00:11:46,180
you need to expect review time and

00:11:44,230 --> 00:11:48,339
everything so after our c7 most

00:11:46,180 --> 00:11:50,500
maintainer czar only accepting fixes

00:11:48,339 --> 00:11:53,320
against the things that they have queued

00:11:50,500 --> 00:11:56,380
to go to lennis for the next merge

00:11:53,320 --> 00:11:59,470
window so the best way to look at this

00:11:56,380 --> 00:12:01,510
if we take a look at here's here's kind

00:11:59,470 --> 00:12:06,400
of a let's look at where we are now

00:12:01,510 --> 00:12:10,420
right we're in the 317 cycle if I wanted

00:12:06,400 --> 00:12:13,600
something in 317 I probably should have

00:12:10,420 --> 00:12:15,339
been developing it way back depending on

00:12:13,600 --> 00:12:17,740
the scope of it and and how

00:12:15,339 --> 00:12:20,080
controversial me you probably wanted to

00:12:17,740 --> 00:12:22,930
be developing it way back in the 316

00:12:20,080 --> 00:12:25,030
cycle and having it posted for review

00:12:22,930 --> 00:12:28,210
and so forth because you need people to

00:12:25,030 --> 00:12:32,500
pick it up well before RC 6 and 7 which

00:12:28,210 --> 00:12:34,990
are coming up right on the 317 cycle so

00:12:32,500 --> 00:12:37,300
you have less than seven weeks after

00:12:34,990 --> 00:12:40,000
emerging window closes to have that

00:12:37,300 --> 00:12:42,550
maintainer queue for the next window now

00:12:40,000 --> 00:12:44,020
a lot of things you'd be working on you

00:12:42,550 --> 00:12:45,670
have to have that development done and

00:12:44,020 --> 00:12:50,320
then you have to deal with comments

00:12:45,670 --> 00:12:52,270
upstream so definitely in in most cases

00:12:50,320 --> 00:12:54,970
you can't just start something in the

00:12:52,270 --> 00:13:02,200
middle of a 317 cycle and expect it to

00:12:54,970 --> 00:13:03,850
go into the 317 release colonel so now

00:13:02,200 --> 00:13:08,290
we'll get into the meat of how to

00:13:03,850 --> 00:13:11,140
upstream the mechanics it all starts

00:13:08,290 --> 00:13:13,600
with preparation you absolutely must

00:13:11,140 --> 00:13:16,690
know your content and I know this sounds

00:13:13,600 --> 00:13:18,590
trivial but it's all about the review

00:13:16,690 --> 00:13:21,410
process okay

00:13:18,590 --> 00:13:23,480
your contribution fits into some kernel

00:13:21,410 --> 00:13:25,280
framework most likely somehow you're

00:13:23,480 --> 00:13:28,010
probably not inventing something that

00:13:25,280 --> 00:13:29,060
doesn't fit anywhere else typically

00:13:28,010 --> 00:13:31,460
especially if you're just getting

00:13:29,060 --> 00:13:33,680
started you probably don't want to show

00:13:31,460 --> 00:13:36,230
up and invent the latest greatest

00:13:33,680 --> 00:13:38,270
scheduler out of the blue right you're

00:13:36,230 --> 00:13:40,580
probably starting starting simple things

00:13:38,270 --> 00:13:42,770
maybe bug fixes maybe you've got a new

00:13:40,580 --> 00:13:44,420
driver or something you need to

00:13:42,770 --> 00:13:48,620
understand what Colonel framework

00:13:44,420 --> 00:13:50,420
subsystem that you fit into so important

00:13:48,620 --> 00:13:53,480
thing is rate your contribution to

00:13:50,420 --> 00:13:56,150
conform to what's their subsystems have

00:13:53,480 --> 00:13:58,580
abstraction that are designed for good

00:13:56,150 --> 00:14:00,620
reason because the maintainer snow the

00:13:58,580 --> 00:14:05,180
whole breadth of hardware that are out

00:14:00,620 --> 00:14:07,190
there or other things like device tree

00:14:05,180 --> 00:14:10,460
they've seen the whole breadth of things

00:14:07,190 --> 00:14:13,130
and things are designed the way they are

00:14:10,460 --> 00:14:15,560
for a good reason right so you need to

00:14:13,130 --> 00:14:18,050
fit into that the other thing you need

00:14:15,560 --> 00:14:20,480
to know is you may be developing

00:14:18,050 --> 00:14:23,330
something where other people are working

00:14:20,480 --> 00:14:25,940
in the same area so if you're working on

00:14:23,330 --> 00:14:27,590
a driver and a subsystem and you're not

00:14:25,940 --> 00:14:29,300
aware and following the mailing list

00:14:27,590 --> 00:14:32,810
that someone's actually changing all the

00:14:29,300 --> 00:14:35,450
api's right in this cycle you may have

00:14:32,810 --> 00:14:38,240
trouble getting upstream and have to

00:14:35,450 --> 00:14:40,130
wait and rewrite things against that so

00:14:38,240 --> 00:14:43,750
you may need to base your work on

00:14:40,130 --> 00:14:47,240
something that isn't yet upstream right

00:14:43,750 --> 00:14:48,980
so you need to know the places in which

00:14:47,240 --> 00:14:50,570
you find out this information i

00:14:48,980 --> 00:14:52,790
mentioned mailing list we'll talk about

00:14:50,570 --> 00:14:54,830
the different resources you have in the

00:14:52,790 --> 00:15:02,960
kernel community to keep on top of these

00:14:54,830 --> 00:15:08,840
things the other part of preparation is

00:15:02,960 --> 00:15:12,500
the old tired but never well rtfm right

00:15:08,840 --> 00:15:15,050
so we're going to talk a lot about where

00:15:12,500 --> 00:15:18,110
do I get the information right it's all

00:15:15,050 --> 00:15:20,750
available there's a huge wealth of

00:15:18,110 --> 00:15:22,970
documentation it's not just things that

00:15:20,750 --> 00:15:25,580
are tribal knowledge on the mailing list

00:15:22,970 --> 00:15:28,520
and current happenings but the number

00:15:25,580 --> 00:15:30,590
one thing I see is I've mentored people

00:15:28,520 --> 00:15:32,060
on my past team on how to do this is

00:15:30,590 --> 00:15:35,570
they don't know where to look

00:15:32,060 --> 00:15:37,550
right and nine times out of ten I find

00:15:35,570 --> 00:15:39,380
at the beginning that people haven't

00:15:37,550 --> 00:15:42,680
read everything in the documentation

00:15:39,380 --> 00:15:44,480
directory so first the first thing you

00:15:42,680 --> 00:15:46,780
should be thinking is is there some

00:15:44,480 --> 00:15:49,250
documentation in the top level Colonel

00:15:46,780 --> 00:15:53,870
documentation directory I'll go look

00:15:49,250 --> 00:15:55,640
there right for the most part if we're

00:15:53,870 --> 00:15:56,930
doing linen arm things and you're doing

00:15:55,640 --> 00:15:58,490
driver work or you're doing

00:15:56,930 --> 00:16:00,650
architectural work you're going to come

00:15:58,490 --> 00:16:04,430
in contact with the device tree right

00:16:00,650 --> 00:16:06,080
and again that's a specific area there's

00:16:04,430 --> 00:16:08,020
a lot of confusion over how to write

00:16:06,080 --> 00:16:11,990
good bindings but there's great

00:16:08,020 --> 00:16:14,150
documentation and examples in there you

00:16:11,990 --> 00:16:16,760
just need to go nowhere the right places

00:16:14,150 --> 00:16:18,950
and because that's a developing area i

00:16:16,760 --> 00:16:20,930
really recommend that that that's a

00:16:18,950 --> 00:16:23,900
mailing list that it can't hurt to be on

00:16:20,930 --> 00:16:27,680
and understand what the latest evolving

00:16:23,900 --> 00:16:29,510
standards are for writing a device tree

00:16:27,680 --> 00:16:32,630
binding should you have to do that in

00:16:29,510 --> 00:16:39,560
your work so that's where that mailing

00:16:32,630 --> 00:16:43,790
list is so getting back to where do you

00:16:39,560 --> 00:16:45,770
find out what are the resources you need

00:16:43,790 --> 00:16:49,300
to know what mailing lists and IRC

00:16:45,770 --> 00:16:52,370
channels can help you in your work ok I

00:16:49,300 --> 00:16:54,380
showed you the maintainer smile you can

00:16:52,370 --> 00:16:55,970
see what mailing list is relevant if

00:16:54,380 --> 00:16:57,740
you're touching some files and you've

00:16:55,970 --> 00:17:00,110
made a patch you got something working

00:16:57,740 --> 00:17:03,320
then you can start looking at oh here's

00:17:00,110 --> 00:17:05,420
this mailing list right MMC subsystem

00:17:03,320 --> 00:17:08,540
has the mailing list XYZ all the way

00:17:05,420 --> 00:17:10,750
down there's a lot of mailing lists

00:17:08,540 --> 00:17:13,850
where you can go read those archives

00:17:10,750 --> 00:17:15,860
everything's out there right and if

00:17:13,850 --> 00:17:17,870
you've got something where you've got to

00:17:15,860 --> 00:17:21,170
make a change or it's different it's not

00:17:17,870 --> 00:17:24,290
a trivial thing than ask questions right

00:17:21,170 --> 00:17:27,170
the maintainer want to help you do

00:17:24,290 --> 00:17:29,690
things the way that they have things set

00:17:27,170 --> 00:17:31,430
up so they'll be more than happy to

00:17:29,690 --> 00:17:36,140
answer your questions you just need to

00:17:31,430 --> 00:17:37,910
ask them right read Linux arm colonel at

00:17:36,140 --> 00:17:40,880
a minimum if you're going to read

00:17:37,910 --> 00:17:44,120
anything read that mailing list that's

00:17:40,880 --> 00:17:45,779
where most things will get cross posted

00:17:44,120 --> 00:17:49,169
to that are relevant to

00:17:45,779 --> 00:17:52,169
linux on arm you'll find a lot of

00:17:49,169 --> 00:17:53,879
changing trends are covered in threads

00:17:52,169 --> 00:17:56,820
that may not make it in the

00:17:53,879 --> 00:17:59,159
documentation yet so you really want to

00:17:56,820 --> 00:18:03,629
find an efficient way to read that

00:17:59,159 --> 00:18:06,210
probably not off of web archives the

00:18:03,629 --> 00:18:10,109
other thing is for IRC you can go to

00:18:06,210 --> 00:18:14,159
hash arm linux on freenode and you'll

00:18:10,109 --> 00:18:18,359
find most of the arm related Colonel

00:18:14,159 --> 00:18:20,339
maintained errs hang out there and quite

00:18:18,359 --> 00:18:22,909
a few linaro people since there's a

00:18:20,339 --> 00:18:27,289
pretty good cross section there and

00:18:22,909 --> 00:18:29,489
that's a great great resource sometimes

00:18:27,289 --> 00:18:32,429
previous session they talked about IRC

00:18:29,489 --> 00:18:34,049
and and benefits and a lot of times you

00:18:32,429 --> 00:18:37,019
might just have a quick simple question

00:18:34,049 --> 00:18:38,519
really needed a clarification and didn't

00:18:37,019 --> 00:18:41,039
really warrant an email and it's a great

00:18:38,519 --> 00:18:47,309
way to get that 5-10 minute turnaround

00:18:41,039 --> 00:18:50,519
on something trivial so creating patches

00:18:47,309 --> 00:18:52,019
I talked to lonner preparation crane

00:18:50,519 --> 00:18:55,019
patches again we're going to go back to

00:18:52,019 --> 00:18:57,629
the documentation read and understand in

00:18:55,019 --> 00:18:59,909
the documentation directory it's a whole

00:18:57,629 --> 00:19:04,070
slew of things here they're well

00:18:59,909 --> 00:19:06,809
reviewed by thousands of people

00:19:04,070 --> 00:19:09,599
submitting patches submit checklist and

00:19:06,809 --> 00:19:12,960
then in the device tree area they have a

00:19:09,599 --> 00:19:17,580
bi dot txt and actually a special device

00:19:12,960 --> 00:19:20,339
tree how to submit patches thing those

00:19:17,580 --> 00:19:22,320
are all very useful read those and

00:19:20,339 --> 00:19:28,559
understand those that have most of the

00:19:22,320 --> 00:19:32,639
answers back to my thing about use get

00:19:28,559 --> 00:19:36,330
right the Linux kernel is maintaining it

00:19:32,639 --> 00:19:38,879
the distinctive distributed nature of

00:19:36,330 --> 00:19:42,659
the repositories it's all done and get

00:19:38,879 --> 00:19:45,119
you need to use git if your company uses

00:19:42,659 --> 00:19:46,979
something else internally you need to

00:19:45,119 --> 00:19:49,409
move away from that and you get to

00:19:46,979 --> 00:19:51,389
efficiently work upstream that's how

00:19:49,409 --> 00:19:52,950
it's done that's how all the tools are

00:19:51,389 --> 00:19:58,440
wrapped around get that you'll need to

00:19:52,950 --> 00:19:59,190
use so when we post something and this

00:19:58,440 --> 00:20:01,170
is covered

00:19:59,190 --> 00:20:03,180
this submitting patches and checklists

00:20:01,170 --> 00:20:05,820
but just to give you a flavor of it you

00:20:03,180 --> 00:20:08,730
may already be looking at mailing list

00:20:05,820 --> 00:20:12,780
and you see things like this if you have

00:20:08,730 --> 00:20:15,810
a set of patches to implement a certain

00:20:12,780 --> 00:20:18,570
feature your your to split your patches

00:20:15,810 --> 00:20:22,020
up you end up seeing subject lines like

00:20:18,570 --> 00:20:24,330
this patch 01 / 11 right that's patch

00:20:22,020 --> 00:20:26,550
one out of a set of 11 they were all

00:20:24,330 --> 00:20:28,620
related right and then you'll see a

00:20:26,550 --> 00:20:31,320
well-formed again covered in the

00:20:28,620 --> 00:20:33,870
documentation the subsystem that the

00:20:31,320 --> 00:20:36,000
patch is touching and then a summary

00:20:33,870 --> 00:20:38,400
phrase which is a piece that describes

00:20:36,000 --> 00:20:41,880
it and it lives along with it and is

00:20:38,400 --> 00:20:44,490
there in the commits for all time and

00:20:41,880 --> 00:20:46,980
that is a well-formed thing you get

00:20:44,490 --> 00:20:49,050
trained to seeing of this subsystem okay

00:20:46,980 --> 00:20:51,720
that that's touching MMC stuff and that

00:20:49,050 --> 00:20:53,280
and so you get trained to see that and

00:20:51,720 --> 00:20:56,910
notice that when you get used to this

00:20:53,280 --> 00:20:58,830
format there's other things covered in

00:20:56,910 --> 00:21:00,330
the documentation like as you're going

00:20:58,830 --> 00:21:02,160
through the review cycle you're going to

00:21:00,330 --> 00:21:04,110
get comments you need to send out a new

00:21:02,160 --> 00:21:06,210
version of the series so you're going to

00:21:04,110 --> 00:21:08,430
bump the version so everybody can see ah

00:21:06,210 --> 00:21:10,320
this is a new version of that patch the

00:21:08,430 --> 00:21:13,320
subsystem and summary phrase stay the

00:21:10,320 --> 00:21:16,200
same right but oh I'm in version 3 now

00:21:13,320 --> 00:21:18,120
okay somebody can come review that and

00:21:16,200 --> 00:21:21,450
see that it's kind of far along in the

00:21:18,120 --> 00:21:23,310
comments and finally things maybe you've

00:21:21,450 --> 00:21:26,460
created something you're not quite sure

00:21:23,310 --> 00:21:28,920
it's the way to do it but you want to

00:21:26,460 --> 00:21:33,890
get some comments back and so putting

00:21:28,920 --> 00:21:38,040
RFC or request for comment in in the

00:21:33,890 --> 00:21:40,950
patch posting tag says says to reviewers

00:21:38,040 --> 00:21:42,810
I'm not asking you to accept this in the

00:21:40,950 --> 00:21:44,940
colonel I'm just asking you for comments

00:21:42,810 --> 00:21:48,540
so i can decide how you guys want it

00:21:44,940 --> 00:21:52,350
done so that's some examples you may

00:21:48,540 --> 00:21:54,000
have seen some of those a very important

00:21:52,350 --> 00:21:57,480
thing here and it's kind of related to

00:21:54,000 --> 00:21:59,400
those those subject lines is when you're

00:21:57,480 --> 00:22:01,260
creating these these patches you need to

00:21:59,400 --> 00:22:04,770
take the time to create a quality commit

00:22:01,260 --> 00:22:06,810
log message when you commit and you put

00:22:04,770 --> 00:22:10,290
the message you need to you need to

00:22:06,810 --> 00:22:12,429
explain why that patch is needed okay

00:22:10,290 --> 00:22:15,039
you need to say what it

00:22:12,429 --> 00:22:17,379
right there's why there's a what and

00:22:15,039 --> 00:22:20,379
implement and then how you actually

00:22:17,379 --> 00:22:23,320
implemented it right so there may it may

00:22:20,379 --> 00:22:25,269
not be obvious of why you did something

00:22:23,320 --> 00:22:27,879
or how you did something in a patch and

00:22:25,269 --> 00:22:32,110
you need to describe that into in human

00:22:27,879 --> 00:22:35,559
readable text so this fabricated example

00:22:32,110 --> 00:22:38,980
you know that covers what it is and how

00:22:35,559 --> 00:22:40,929
it is for say a bugfix right the

00:22:38,980 --> 00:22:43,769
conditional food did not handle case bar

00:22:40,929 --> 00:22:48,460
and broke platform bass that tells me

00:22:43,769 --> 00:22:50,440
why the patch was needed right and then

00:22:48,460 --> 00:22:52,210
what it implements add an additional

00:22:50,440 --> 00:22:55,899
conditional and error path to food a

00:22:52,210 --> 00:22:59,409
handle bar tells me right what it does

00:22:55,899 --> 00:23:02,049
and how it does it okay that tells a

00:22:59,409 --> 00:23:04,929
maintainer okay this is why it's needed

00:23:02,049 --> 00:23:08,080
it breaks platform as much detail as you

00:23:04,929 --> 00:23:10,029
can get and what was done alright that

00:23:08,080 --> 00:23:13,899
helps them in their review process the

00:23:10,029 --> 00:23:16,779
more you can describe things preferably

00:23:13,899 --> 00:23:19,389
in a in a concise fashion but the

00:23:16,779 --> 00:23:21,669
details are important maintain errs need

00:23:19,389 --> 00:23:24,009
to understand that you understand what

00:23:21,669 --> 00:23:27,669
you're writing right and it helps them

00:23:24,009 --> 00:23:30,429
save them time but each commit must have

00:23:27,669 --> 00:23:34,360
a well-formed commit log that's one of

00:23:30,429 --> 00:23:38,110
the big big reasons for rejecting or or

00:23:34,360 --> 00:23:41,379
you know requiring of an update on the

00:23:38,110 --> 00:23:43,450
second cycle is that you know patch v2

00:23:41,379 --> 00:23:45,369
you know the first thing someone's going

00:23:43,450 --> 00:23:50,289
to say is you need to describe what this

00:23:45,369 --> 00:23:54,490
patch does so and before we go on I mean

00:23:50,289 --> 00:23:56,110
the reason for that is that when you

00:23:54,490 --> 00:23:58,269
when your patch makes it in the main

00:23:56,110 --> 00:24:00,580
line when somebody comes back and looks

00:23:58,269 --> 00:24:02,710
at at two years later that commit log

00:24:00,580 --> 00:24:04,899
tells them why this thing was in there

00:24:02,710 --> 00:24:06,850
and why they shouldn't remove it right

00:24:04,899 --> 00:24:09,009
if it broke something or fix something

00:24:06,850 --> 00:24:11,200
subtle things aren't very obvious two

00:24:09,009 --> 00:24:12,879
years down the road so that's why the

00:24:11,200 --> 00:24:18,070
colonel community demands that you have

00:24:12,879 --> 00:24:21,460
a good commit message going further on

00:24:18,070 --> 00:24:22,929
the why you use get the get tools you're

00:24:21,460 --> 00:24:26,140
going to create your patches with get

00:24:22,929 --> 00:24:28,810
format patch if you're doing a multi

00:24:26,140 --> 00:24:31,270
art series there's a nice there's a nice

00:24:28,810 --> 00:24:33,510
option for a cover letter it's good

00:24:31,270 --> 00:24:36,910
etiquette to put a cover letter on a

00:24:33,510 --> 00:24:39,130
multi-part series where the cover letter

00:24:36,910 --> 00:24:41,470
actually describes what the whole series

00:24:39,130 --> 00:24:43,750
does because the patch is individually

00:24:41,470 --> 00:24:45,610
it may not be completely obvious what

00:24:43,750 --> 00:24:47,920
they're what the logical grouping adds

00:24:45,610 --> 00:24:51,010
up to and the cover letter gives you a

00:24:47,920 --> 00:24:53,320
chance to tell reviewers you know here's

00:24:51,010 --> 00:24:57,130
what this 11 part series does add

00:24:53,320 --> 00:24:59,100
support for this driver you know and in

00:24:57,130 --> 00:25:02,080
that series you may be doing things like

00:24:59,100 --> 00:25:04,870
updating an API and a subsystem plus add

00:25:02,080 --> 00:25:07,510
the driver so its place to give that

00:25:04,870 --> 00:25:11,950
flavor of that that does not go upstream

00:25:07,510 --> 00:25:14,530
but it does a tin in maintain errs and

00:25:11,950 --> 00:25:17,140
other reviewers being able to quickly

00:25:14,530 --> 00:25:20,950
review and understand the bigger picture

00:25:17,140 --> 00:25:23,650
of why you're doing something in the

00:25:20,950 --> 00:25:25,240
kernel tree you have a scripts check

00:25:23,650 --> 00:25:27,130
patch a lot of people have that

00:25:25,240 --> 00:25:30,910
integrated in their internal process

00:25:27,130 --> 00:25:33,780
already run into you want to use that

00:25:30,910 --> 00:25:36,900
before you submit anything further

00:25:33,780 --> 00:25:39,640
there's a tool called get maintainer

00:25:36,900 --> 00:25:42,310
it's just a guideline tool it requires

00:25:39,640 --> 00:25:45,130
human processing after you get the

00:25:42,310 --> 00:25:48,100
output from it it can be overly verbose

00:25:45,130 --> 00:25:52,120
about the output but what it does is

00:25:48,100 --> 00:25:54,100
it's simply a perl script that parses

00:25:52,120 --> 00:25:56,440
that maintain errs file based on your

00:25:54,100 --> 00:25:59,710
patches finds out which maintain errs

00:25:56,440 --> 00:26:02,170
you should be emailing ok it will tell

00:25:59,710 --> 00:26:04,830
you what lists so it uses the fact that

00:26:02,170 --> 00:26:09,370
we have those well for maintainer

00:26:04,830 --> 00:26:11,560
entries to make that easy for you it may

00:26:09,370 --> 00:26:13,930
generate it also goes into commit logs

00:26:11,560 --> 00:26:16,920
and shows people that have touched a

00:26:13,930 --> 00:26:20,110
file or something within that directory

00:26:16,920 --> 00:26:22,060
recently to have have commits and you it

00:26:20,110 --> 00:26:24,700
may not be necessary to CC those and

00:26:22,060 --> 00:26:27,280
that's why I say you need to parse and

00:26:24,700 --> 00:26:30,360
use good judgment on what you use out of

00:26:27,280 --> 00:26:33,820
that output but it's a it's a real help

00:26:30,360 --> 00:26:37,270
and then when you post and we've created

00:26:33,820 --> 00:26:39,049
our patches there's a lot of different

00:26:37,270 --> 00:26:42,440
ways to do this I've

00:26:39,049 --> 00:26:43,879
is my former team of just put the actual

00:26:42,440 --> 00:26:47,570
maintain errs that you want to actually

00:26:43,879 --> 00:26:50,570
take action on the two line mailing

00:26:47,570 --> 00:26:54,860
lists on the CC to catch other reviewers

00:26:50,570 --> 00:26:56,149
and other interested parties on the CC

00:26:54,860 --> 00:26:58,009
maybe there's somebody you're

00:26:56,149 --> 00:27:00,519
collaborating with that's interested in

00:26:58,009 --> 00:27:03,169
this patch you want them to see so a

00:27:00,519 --> 00:27:05,119
pretty good general email etiquette

00:27:03,169 --> 00:27:09,830
people that you want to take action on

00:27:05,119 --> 00:27:12,499
to line and everybody else on the CC use

00:27:09,830 --> 00:27:14,690
get send email again we keep saying use

00:27:12,499 --> 00:27:17,960
get use get right all these tools are

00:27:14,690 --> 00:27:19,970
there because this they've developed out

00:27:17,960 --> 00:27:23,299
of the need to have efficient process

00:27:19,970 --> 00:27:25,309
get send email does a nice job with what

00:27:23,299 --> 00:27:27,919
you formatted patch or you can use the

00:27:25,309 --> 00:27:31,100
built-in generate it and send it in one

00:27:27,919 --> 00:27:33,980
shot out of your git tree and then

00:27:31,100 --> 00:27:36,259
you're just getting started most people

00:27:33,980 --> 00:27:38,450
think all right you know I posted the

00:27:36,259 --> 00:27:42,200
patch I am done right it's some

00:27:38,450 --> 00:27:44,119
milestone I told my manager I've got it

00:27:42,200 --> 00:27:46,730
heading upstream but you've only just

00:27:44,119 --> 00:27:51,980
started and this is where you expect

00:27:46,730 --> 00:27:53,239
comments and expect a lot of them so the

00:27:51,980 --> 00:27:55,639
first thing that's going to happen is

00:27:53,239 --> 00:27:59,090
you're all excited you posted your patch

00:27:55,639 --> 00:28:00,350
and then you hear nothing and then you

00:27:59,090 --> 00:28:03,080
wait a little bit longer and you hear

00:28:00,350 --> 00:28:07,009
nothing right and it seems like a long

00:28:03,080 --> 00:28:08,929
time and this week that the edit of a

00:28:07,009 --> 00:28:11,119
week seems like a long time when you

00:28:08,929 --> 00:28:13,700
just put your heart soul into this

00:28:11,119 --> 00:28:18,289
software that you've written but wait

00:28:13,700 --> 00:28:19,730
one week resend if no response but go

00:28:18,289 --> 00:28:22,159
back to what we talked about with the

00:28:19,730 --> 00:28:24,109
merge windows don't expect a response in

00:28:22,159 --> 00:28:26,809
the middle of a merge window maintainer

00:28:24,109 --> 00:28:28,669
zar very busy if there's fallout if

00:28:26,809 --> 00:28:31,070
there's there's not a lot of review

00:28:28,669 --> 00:28:33,379
happening of patches right before the

00:28:31,070 --> 00:28:36,109
merge window and right during a a lot of

00:28:33,379 --> 00:28:39,019
times they're dealing with conflicts

00:28:36,109 --> 00:28:41,450
that didn't get detected the process and

00:28:39,019 --> 00:28:43,580
things got merge or something broke so

00:28:41,450 --> 00:28:48,470
you just can't expect that to happen you

00:28:43,580 --> 00:28:50,960
need to be aware you know be aware to

00:28:48,470 --> 00:28:52,850
that maintain errs will

00:28:50,960 --> 00:28:56,270
just a bunch of people right they go on

00:28:52,850 --> 00:28:58,880
travel they gone holiday you just need

00:28:56,270 --> 00:29:02,149
to be aware so one of the nice things is

00:28:58,880 --> 00:29:04,730
we go back to our IRC suggestion say hey

00:29:02,149 --> 00:29:07,909
is is anybody seen Marc Brown around

00:29:04,730 --> 00:29:14,690
right and they'll say oh he's on holiday

00:29:07,909 --> 00:29:17,360
you know so if he's lucky so and then

00:29:14,690 --> 00:29:19,730
and then once you get engaged you're

00:29:17,360 --> 00:29:21,200
going to deal with tough questions so we

00:29:19,730 --> 00:29:22,970
go back there was there's there's a

00:29:21,200 --> 00:29:25,159
rhyme and reason why I said no your

00:29:22,970 --> 00:29:27,860
content is this is where you need to

00:29:25,159 --> 00:29:29,899
know your content if you're trying to

00:29:27,860 --> 00:29:32,659
upstream a patch that you didn't write

00:29:29,899 --> 00:29:34,549
and you don't intimately know why

00:29:32,659 --> 00:29:37,789
something was implemented a certain way

00:29:34,549 --> 00:29:40,039
you pretty much guaranteed that some

00:29:37,789 --> 00:29:41,899
reviewers going to ask you why did you

00:29:40,039 --> 00:29:44,419
implement it that way and you won't know

00:29:41,899 --> 00:29:46,159
and if you can't explain why you did

00:29:44,419 --> 00:29:48,740
that you've got a problem you're not

00:29:46,159 --> 00:29:50,570
getting it upstream so if you're picking

00:29:48,740 --> 00:29:53,059
up some other codes you better learn it

00:29:50,570 --> 00:29:54,980
intimately know why it's done that way

00:29:53,059 --> 00:29:59,120
what the purpose what you're trying to

00:29:54,980 --> 00:30:01,070
solve okay and if you wrote it yourself

00:29:59,120 --> 00:30:03,820
I sure hope you understood it in the

00:30:01,070 --> 00:30:06,950
first place right in and know that so

00:30:03,820 --> 00:30:08,510
the other thing is and the every

00:30:06,950 --> 00:30:11,240
maintainer will disagree with this but

00:30:08,510 --> 00:30:13,279
they're not always correct if you're

00:30:11,240 --> 00:30:16,070
doing something for good reason you know

00:30:13,279 --> 00:30:17,570
your hardware and there are things where

00:30:16,070 --> 00:30:20,179
the maintainer hasn't seen this type of

00:30:17,570 --> 00:30:22,760
thing before I be strong in your

00:30:20,179 --> 00:30:24,919
convictions right don't just turn around

00:30:22,760 --> 00:30:26,390
if you're sure that there's a good

00:30:24,919 --> 00:30:28,340
reason for this or you've got something

00:30:26,390 --> 00:30:30,440
different you need to let them know they

00:30:28,340 --> 00:30:32,600
want to know right they want to make

00:30:30,440 --> 00:30:36,470
their framework or whatever you know

00:30:32,600 --> 00:30:39,620
better and more robust and it most

00:30:36,470 --> 00:30:41,899
importantly and you know sometimes it

00:30:39,620 --> 00:30:43,659
can be a cultural problem sometimes it

00:30:41,899 --> 00:30:46,429
could be people aren't sure ask

00:30:43,659 --> 00:30:48,770
questions if you're not sure how to do

00:30:46,429 --> 00:30:51,260
something now there's you can post an

00:30:48,770 --> 00:30:53,659
RFC you can ask the maintainer well what

00:30:51,260 --> 00:30:56,029
do you recommend or what do you mean by

00:30:53,659 --> 00:31:00,159
this comment right it's not always clear

00:30:56,029 --> 00:31:00,159
right we sometimes need clarification

00:31:02,190 --> 00:31:07,139
we're mechanics I was so happy to hear

00:31:04,230 --> 00:31:09,990
mutt mentioned in the last session use

00:31:07,139 --> 00:31:11,970
the same male user agent like but it's

00:31:09,990 --> 00:31:14,720
really going to help you with dealing

00:31:11,970 --> 00:31:17,460
with feedback there are other things

00:31:14,720 --> 00:31:20,460
there's advice in the kernel

00:31:17,460 --> 00:31:23,129
documentation again documentation on how

00:31:20,460 --> 00:31:26,490
to configure email clients to actually

00:31:23,129 --> 00:31:28,980
work sanely wrapping at seventy two

00:31:26,490 --> 00:31:31,350
columns right the requirement for the

00:31:28,980 --> 00:31:33,659
etiquette on lk ml and other colonel

00:31:31,350 --> 00:31:35,370
related mailing list there's some great

00:31:33,659 --> 00:31:37,740
advice in there how to take all your

00:31:35,370 --> 00:31:40,500
other male clients thunderbird and

00:31:37,740 --> 00:31:45,720
things like that and have them kind of

00:31:40,500 --> 00:31:47,370
cooperate and last thing and I there's

00:31:45,720 --> 00:31:50,039
just no need to even spend much time on

00:31:47,370 --> 00:31:51,629
this it's very over bone one of the big

00:31:50,039 --> 00:31:55,730
things people worry about getting flamed

00:31:51,629 --> 00:31:58,590
the first time there's a lot of talk in

00:31:55,730 --> 00:32:00,980
tech media about flame wars and the

00:31:58,590 --> 00:32:04,409
colonel and people hear about this it's

00:32:00,980 --> 00:32:07,500
this general misconception urban thing

00:32:04,409 --> 00:32:09,059
new people don't get flamed right it's

00:32:07,500 --> 00:32:11,279
it's generally been the experience

00:32:09,059 --> 00:32:13,350
people people who are maintained errs

00:32:11,279 --> 00:32:16,529
that should know better lynus will flame

00:32:13,350 --> 00:32:18,539
somebody occasionally you don't need to

00:32:16,529 --> 00:32:21,059
worry about that you're following these

00:32:18,539 --> 00:32:24,149
kind of practices good etiquette your

00:32:21,059 --> 00:32:25,500
new people actually want to help out you

00:32:24,149 --> 00:32:27,419
know they'll they'll help you if you

00:32:25,500 --> 00:32:31,909
make mistakes on formatting something

00:32:27,419 --> 00:32:31,909
and just make a comment and go on right

00:32:34,070 --> 00:32:39,799
so when you're getting this feedback

00:32:36,710 --> 00:32:42,870
it's really important to be responsive

00:32:39,799 --> 00:32:45,929
one of the one of the major problems in

00:32:42,870 --> 00:32:49,769
up streaming is that somebody will post

00:32:45,929 --> 00:32:51,980
and disappear for two months they'll get

00:32:49,769 --> 00:32:54,750
comments and you lose a maintainer

00:32:51,980 --> 00:32:57,419
interest and after you do that a few

00:32:54,750 --> 00:32:59,279
times they notice that you kind of drive

00:32:57,419 --> 00:33:01,919
my postal thing and disappear and they

00:32:59,279 --> 00:33:05,879
pay less attention right this person is

00:33:01,919 --> 00:33:08,820
not not really addressing the comments

00:33:05,879 --> 00:33:10,860
and is not really committed to this so

00:33:08,820 --> 00:33:14,610
you get a general human interaction an

00:33:10,860 --> 00:33:15,389
air of if you get some comments you want

00:33:14,610 --> 00:33:17,759
to

00:33:15,389 --> 00:33:21,419
get them come to conclusion whether you

00:33:17,759 --> 00:33:22,859
need clarification on it you're not sure

00:33:21,419 --> 00:33:25,259
how to do you want to engage that

00:33:22,859 --> 00:33:28,049
maintainer get to exactly what they want

00:33:25,259 --> 00:33:29,429
to see as fast as you can okay while

00:33:28,049 --> 00:33:32,219
you've got them engaged they're busy

00:33:29,429 --> 00:33:34,950
people so you want to incorporate those

00:33:32,219 --> 00:33:38,279
those changes and get another version

00:33:34,950 --> 00:33:39,749
out as soon as you can so that they're

00:33:38,279 --> 00:33:41,099
seeing the progress they're still

00:33:39,749 --> 00:33:43,859
remembering oh yeah I made these

00:33:41,099 --> 00:33:47,700
comments okay they incorporated those it

00:33:43,859 --> 00:33:50,669
looks good move that you know through

00:33:47,700 --> 00:33:53,159
you need to be prepared to that you may

00:33:50,669 --> 00:33:56,099
not get an acceptable comment resolution

00:33:53,159 --> 00:33:59,959
on the first try and what that means is

00:33:56,099 --> 00:34:03,570
that you may be in a long conversation

00:33:59,959 --> 00:34:05,339
you have a comment you have a long

00:34:03,570 --> 00:34:08,490
conversation and you implement something

00:34:05,339 --> 00:34:10,319
you might go to v2 and a maintainer or

00:34:08,490 --> 00:34:12,179
somebody else's yeah that's not actually

00:34:10,319 --> 00:34:14,220
what I was looking for no maybe you

00:34:12,179 --> 00:34:15,899
thought you had it clarified so just be

00:34:14,220 --> 00:34:19,260
aware you might end up rewriting

00:34:15,899 --> 00:34:21,289
something twice three times and of

00:34:19,260 --> 00:34:24,389
course are getting it upstream right

00:34:21,289 --> 00:34:26,069
there's a lot missed people think they

00:34:24,389 --> 00:34:29,009
understand something so just just be

00:34:26,069 --> 00:34:31,200
aware that the end thing is expect many

00:34:29,009 --> 00:34:33,990
iterations I mean it's not uncommon to

00:34:31,200 --> 00:34:37,379
have even simple drivers go through 11

00:34:33,990 --> 00:34:39,839
versions 12 versions sometimes with some

00:34:37,379 --> 00:34:42,450
a new posting or or an area that's under

00:34:39,839 --> 00:34:44,819
some change and so you need to think

00:34:42,450 --> 00:34:46,919
that way and that's why when you first

00:34:44,819 --> 00:34:49,230
post that patch of all this great work

00:34:46,919 --> 00:34:52,349
that you got working you just started

00:34:49,230 --> 00:34:56,339
right those 11 iterations can take a lot

00:34:52,349 --> 00:34:57,869
of calendar time all right like we

00:34:56,339 --> 00:34:59,160
showed that the subject headers when

00:34:57,869 --> 00:35:00,809
you're resubmitting these you're going

00:34:59,160 --> 00:35:04,619
to increment the version number in the

00:35:00,809 --> 00:35:07,200
subject line right and the get tools the

00:35:04,619 --> 00:35:12,170
rapper and everything and format patch

00:35:07,200 --> 00:35:12,170
help you do that tall semi-automated

00:35:13,400 --> 00:35:17,810
so say we finally got through all these

00:35:15,110 --> 00:35:21,020
revisions and we got accepted you know

00:35:17,810 --> 00:35:24,800
now now what happens right we saw the

00:35:21,020 --> 00:35:26,840
hierarchy the maintainer 'he's let's say

00:35:24,800 --> 00:35:31,700
you submitted a regulator driver and

00:35:26,840 --> 00:35:33,950
mark took it in and it heads up heads up

00:35:31,700 --> 00:35:37,700
well directly at Al Ennis in the merge

00:35:33,950 --> 00:35:41,680
window and it's in now you own the

00:35:37,700 --> 00:35:45,070
driver right you have some requirement

00:35:41,680 --> 00:35:49,790
obligation to help review changes

00:35:45,070 --> 00:35:51,620
against it and also test changes that

00:35:49,790 --> 00:35:54,680
are coming in there may be a change to

00:35:51,620 --> 00:35:56,960
the Sun system and the maintainer may

00:35:54,680 --> 00:35:59,710
need you to test that your driver is not

00:35:56,960 --> 00:36:01,850
broken by this right so you have these

00:35:59,710 --> 00:36:04,250
responsibilities when you move upstream

00:36:01,850 --> 00:36:12,020
it's not put it in there and forget and

00:36:04,250 --> 00:36:15,230
walk away right so in summary we talked

00:36:12,020 --> 00:36:17,750
a lot preparations key you've got to

00:36:15,230 --> 00:36:20,930
know your material you've got to divide

00:36:17,750 --> 00:36:24,230
things up logically logical change sets

00:36:20,930 --> 00:36:26,840
you've got to know the material and

00:36:24,230 --> 00:36:28,160
explain well in your postings of why

00:36:26,840 --> 00:36:32,140
you're doing things how you're doing

00:36:28,160 --> 00:36:34,670
things I need to rtfm on everything

00:36:32,140 --> 00:36:37,280
documentation is there for what's not

00:36:34,670 --> 00:36:41,870
there use the resources of bailing lists

00:36:37,280 --> 00:36:44,120
in IRC and really ask questions and then

00:36:41,870 --> 00:36:45,880
that act with the sense of urgency one

00:36:44,120 --> 00:36:47,780
of those biggest problems is the

00:36:45,880 --> 00:36:49,640
disinterest sore maintainer when

00:36:47,780 --> 00:36:51,350
somebody you know disappears for two

00:36:49,640 --> 00:36:53,150
months and then they come back and

00:36:51,350 --> 00:36:55,370
another two months they disappear right

00:36:53,150 --> 00:36:58,490
the long cycles and it just ends up

00:36:55,370 --> 00:37:00,260
taking you longer and really understand

00:36:58,490 --> 00:37:02,750
your merger window timing so you're

00:37:00,260 --> 00:37:04,490
doing this in your business environment

00:37:02,750 --> 00:37:07,910
you need to be able to communicate to

00:37:04,490 --> 00:37:09,710
people that hey you know I can't give

00:37:07,910 --> 00:37:12,140
you a date in which it will be upstream

00:37:09,710 --> 00:37:14,720
because you can't because you probably

00:37:12,140 --> 00:37:16,670
don't know how many cycles it's going to

00:37:14,720 --> 00:37:19,580
take you don't know if you're going to

00:37:16,670 --> 00:37:23,030
you know move a merge window simply

00:37:19,580 --> 00:37:25,160
because some subsystem is changing right

00:37:23,030 --> 00:37:26,630
as you get more experience you could

00:37:25,160 --> 00:37:28,640
start to predict this a little

00:37:26,630 --> 00:37:31,369
more accurately but at the beginning

00:37:28,640 --> 00:37:33,859
it's it's very hard to kind of predict

00:37:31,369 --> 00:37:35,869
exactly which one there may be things

00:37:33,859 --> 00:37:38,210
out of your control where it moves

00:37:35,869 --> 00:37:41,000
emerge window so all of a sudden you're

00:37:38,210 --> 00:37:47,900
in 319 instead of 318 that you thought

00:37:41,000 --> 00:37:53,230
you were going to be here's a backup

00:37:47,900 --> 00:37:53,230
slide with like this one common question

00:37:53,859 --> 00:38:00,019
no none of those trees that you hear

00:37:56,809 --> 00:38:02,089
about our upstream a lot of people say

00:38:00,019 --> 00:38:04,940
upstream I talked about mainline the

00:38:02,089 --> 00:38:06,619
misconception a lot of companies think

00:38:04,940 --> 00:38:10,970
because they're basing their product off

00:38:06,619 --> 00:38:14,589
of these trees okay clarify what's there

00:38:10,970 --> 00:38:17,660
those are not upstream right just like

00:38:14,589 --> 00:38:20,660
another example would be a OSP the

00:38:17,660 --> 00:38:23,089
Colonel's an AOSP not upstream right

00:38:20,660 --> 00:38:26,119
again Linda's Torvalds tree is upstream

00:38:23,089 --> 00:38:40,099
these are all downstream trees the

00:38:26,119 --> 00:38:44,059
colonel okay any question is you're all

00:38:40,099 --> 00:38:47,660
experts now all right so we're gonna

00:38:44,059 --> 00:38:52,880
that that's the that's the beginner's

00:38:47,660 --> 00:38:57,049
guide to it in 201 which I'll start will

00:38:52,880 --> 00:39:00,440
give a little break here but 201 I go

00:38:57,049 --> 00:39:02,299
through a lot of real-world examples we

00:39:00,440 --> 00:39:05,660
look at postings of the mailing list and

00:39:02,299 --> 00:39:07,940
laugh at them a bit and see how people

00:39:05,660 --> 00:39:13,690
actually do certain things like this and

00:39:07,940 --> 00:39:13,690

YouTube URL: https://www.youtube.com/watch?v=x280RQtH8Fo


