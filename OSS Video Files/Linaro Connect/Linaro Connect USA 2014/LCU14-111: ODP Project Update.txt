Title: LCU14-111: ODP Project Update
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-111: ODP Project Update

---------------------------------------------------

Speaker: Bill Fischofer
Track: Networking
Location: Grand Peninsula C, Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
Update on the current status of ODP 1.0
---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137714
Google Event: 
Presentation: 
Video: 
Eatherpad: pad.linaro.org/p/lcu14-111

---------------------------------------------------

★ Event Details ★
Linaro Connect USA - #LCU14
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:00,690 --> 00:00:06,690
thank you as well I'm billfish offer i'm

00:00:04,770 --> 00:00:08,820
with the linaro networking group and

00:00:06,690 --> 00:00:15,959
what we're going to do today is give an

00:00:08,820 --> 00:00:18,750
overview an update on the ODP project so

00:00:15,959 --> 00:00:21,660
quick quick background of what OTP is

00:00:18,750 --> 00:00:24,060
open data plane is an open source open

00:00:21,660 --> 00:00:27,710
contribution framework for portable high

00:00:24,060 --> 00:00:30,570
performance data plane applications

00:00:27,710 --> 00:00:32,789
basically consisting of a common set of

00:00:30,570 --> 00:00:35,190
a pis which provide application

00:00:32,789 --> 00:00:37,710
portability and optimized

00:00:35,190 --> 00:00:40,589
implementations of those AP is to

00:00:37,710 --> 00:00:45,390
provide accelerated performance on each

00:00:40,589 --> 00:00:47,879
platform we currently have a fairly wide

00:00:45,390 --> 00:00:52,829
architecture support which includes both

00:00:47,879 --> 00:00:55,139
arm nips powerpc and x86 so far and what

00:00:52,829 --> 00:00:57,479
we're really focused on with ODP is

00:00:55,139 --> 00:01:00,089
providing portability without

00:00:57,479 --> 00:01:02,460
sacrificing performance with the goal

00:01:00,089 --> 00:01:04,530
being to provide a wide choice in

00:01:02,460 --> 00:01:11,820
platform selection to match application

00:01:04,530 --> 00:01:14,610
price performance needs LNG and its

00:01:11,820 --> 00:01:17,220
members are the ODP maintained errs and

00:01:14,610 --> 00:01:21,050
its upstream okay so if you look at the

00:01:17,220 --> 00:01:23,850
linaro networking group with a series of

00:01:21,050 --> 00:01:26,490
companies that are come together to work

00:01:23,850 --> 00:01:29,520
on common problems like all members

00:01:26,490 --> 00:01:33,330
within linaro common problems within a

00:01:29,520 --> 00:01:36,930
designated application area in this case

00:01:33,330 --> 00:01:39,690
networking so even though we're where

00:01:36,930 --> 00:01:42,120
the sponsoring companies the project

00:01:39,690 --> 00:01:45,600
itself is open source open contribution

00:01:42,120 --> 00:01:51,780
and is available under a bsd 3 cost

00:01:45,600 --> 00:01:55,820
license if we look at the system

00:01:51,780 --> 00:02:00,000
architecture it's a little washed out

00:01:55,820 --> 00:02:02,430
the the intent here is that we can

00:02:00,000 --> 00:02:05,960
support multiple apps which can be on

00:02:02,430 --> 00:02:09,869
either shared or dedicated chords and

00:02:05,960 --> 00:02:13,319
also providing a by providing a common

00:02:09,869 --> 00:02:15,120
framework we can leverage existing SDKs

00:02:13,319 --> 00:02:18,810
running across either real or virtual

00:02:15,120 --> 00:02:21,599
hardware and some of the vision for afro

00:02:18,810 --> 00:02:24,120
TV the design point is multi point

00:02:21,599 --> 00:02:28,049
multi-core SOC s that could run linux on

00:02:24,120 --> 00:02:30,299
at least one core and what we're really

00:02:28,049 --> 00:02:33,420
providing with ODP is a framework rather

00:02:30,299 --> 00:02:39,090
than environment allowing existing apps

00:02:33,420 --> 00:02:43,769
to deploy ODP surfaces incrementally and

00:02:39,090 --> 00:02:45,780
this is illustrated here as to you know

00:02:43,769 --> 00:02:49,219
the structure of how ODP relates to

00:02:45,780 --> 00:02:51,750
applications so existing apps can add

00:02:49,219 --> 00:02:54,449
ODP functionality on incremental basis

00:02:51,750 --> 00:02:56,250
because as we all know very few programs

00:02:54,449 --> 00:02:58,579
are written from scratch you have large

00:02:56,250 --> 00:03:05,609
existing bodies of code which have to

00:02:58,579 --> 00:03:08,699
migrate over time so ODP appliqued

00:03:05,609 --> 00:03:11,760
implementations leverage existing SDKs

00:03:08,699 --> 00:03:14,340
and we smell we still allow applications

00:03:11,760 --> 00:03:17,129
to directly explore either the SDK or

00:03:14,340 --> 00:03:19,290
the underlying hardware if they wish so

00:03:17,129 --> 00:03:21,599
the idea is that to the extent that an

00:03:19,290 --> 00:03:24,150
application wants to be portable it can

00:03:21,599 --> 00:03:26,040
start using ODP api's to the extent that

00:03:24,150 --> 00:03:27,900
it wants to get that last ounce of

00:03:26,040 --> 00:03:30,239
performance on given platform it can

00:03:27,900 --> 00:03:36,209
still interoperate with native

00:03:30,239 --> 00:03:40,049
facilities on that on that platform so

00:03:36,209 --> 00:03:42,359
if we look at the more detail here the

00:03:40,049 --> 00:03:44,579
components they said are the api's which

00:03:42,359 --> 00:03:47,939
are the common definitions build tools

00:03:44,579 --> 00:03:51,269
and validation tests and these are open

00:03:47,939 --> 00:03:54,989
contribution with LNG serving as the

00:03:51,269 --> 00:03:57,719
maintainer and upstream for that whereas

00:03:54,989 --> 00:04:00,090
ODP implementations are developed and

00:03:57,719 --> 00:04:03,780
maintained by a sponsoring owner which

00:04:00,090 --> 00:04:05,759
is typically an SOC vendor and they are

00:04:03,780 --> 00:04:07,439
either integrated into the main OD

00:04:05,759 --> 00:04:10,289
piquant repository and maintained

00:04:07,439 --> 00:04:12,650
separately at the owners option so as I

00:04:10,289 --> 00:04:19,590
said we don't dictate how you choose to

00:04:12,650 --> 00:04:22,430
distribute ODP implementations we have a

00:04:19,590 --> 00:04:25,389
fair number of implementations that are

00:04:22,430 --> 00:04:28,520
we're working on in the initial release

00:04:25,389 --> 00:04:32,919
the main one which we call Linux generic

00:04:28,520 --> 00:04:35,750
is open contribution maintained by LNG

00:04:32,919 --> 00:04:38,360
this is a pure software implementation

00:04:35,750 --> 00:04:40,220
which runs on any Linux kernel as a

00:04:38,360 --> 00:04:42,650
result it's not a performance target

00:04:40,220 --> 00:04:44,840
it's really there to provide an

00:04:42,650 --> 00:04:48,110
application proving ground of API crude

00:04:44,840 --> 00:04:51,440
and ground and a easy method of

00:04:48,110 --> 00:04:53,240
bootstrapping ODP and its core

00:04:51,440 --> 00:04:56,770
applications onto any new platform

00:04:53,240 --> 00:05:00,919
because all you need is a linux kernel

00:04:56,770 --> 00:05:04,849
another one of interest is a Linux dpd k

00:05:00,919 --> 00:05:08,780
where again which open contribution LNG

00:05:04,849 --> 00:05:11,770
has developed this initially and the

00:05:08,780 --> 00:05:14,449
target platform here is Intel x86

00:05:11,770 --> 00:05:18,259
platforms using dpd k as a software

00:05:14,449 --> 00:05:21,349
acceleration layer so the idea being

00:05:18,259 --> 00:05:23,539
that you're still using ODP api is but

00:05:21,349 --> 00:05:26,180
underneath the covers they're actually

00:05:23,539 --> 00:05:30,590
being translated into into DVD k calls

00:05:26,180 --> 00:05:34,630
to accelerate on x86 we've been have a

00:05:30,590 --> 00:05:38,150
number of member SOC implementations

00:05:34,630 --> 00:05:42,949
there's a one from avago technologies

00:05:38,150 --> 00:05:47,060
for their axia family of soc s which is

00:05:42,949 --> 00:05:49,880
arm cortex a15 based Texas Instruments

00:05:47,060 --> 00:05:53,479
has an implementation for its Keystone

00:05:49,880 --> 00:06:00,979
to platform which again is arm cortex

00:05:53,479 --> 00:06:06,979
a15 based cavium has 14 octi on which is

00:06:00,979 --> 00:06:10,970
64 based freescale has one for the QR IQ

00:06:06,979 --> 00:06:14,509
sses that's how our pc based and applied

00:06:10,970 --> 00:06:18,289
micro is working on one for your XG

00:06:14,509 --> 00:06:20,409
press which is our v8 and we're also

00:06:18,289 --> 00:06:23,060
aware that there are other

00:06:20,409 --> 00:06:26,389
implementations that are being developed

00:06:23,060 --> 00:06:29,419
by others outside of lng that are

00:06:26,389 --> 00:06:32,500
looking to to participate in the larger

00:06:29,419 --> 00:06:32,500
own EP ecosystem

00:06:34,010 --> 00:06:42,030
so the design development methodology

00:06:38,160 --> 00:06:45,480
following is really iterative so the

00:06:42,030 --> 00:06:48,210
idea here is that we're not smart enough

00:06:45,480 --> 00:06:51,060
to come up with a set of AP is that we

00:06:48,210 --> 00:06:53,430
know in advance are optimal so what we

00:06:51,060 --> 00:06:55,230
do is we propose a set of api's we try

00:06:53,430 --> 00:06:58,650
them out on lots of different platforms

00:06:55,230 --> 00:07:01,290
discover where the seams are and then

00:06:58,650 --> 00:07:04,170
refine that based on experience with the

00:07:01,290 --> 00:07:05,580
idea being that a stable release one to

00:07:04,170 --> 00:07:08,010
be achieved when we have multiple

00:07:05,580 --> 00:07:11,330
efficient implementations validated for

00:07:08,010 --> 00:07:15,330
a variety of different network SOC s and

00:07:11,330 --> 00:07:17,490
if you look at the project statistics

00:07:15,330 --> 00:07:20,760
they sort of shows that iterative nature

00:07:17,490 --> 00:07:25,170
is that this is some data that I took as

00:07:20,760 --> 00:07:30,660
of last Friday or git repository and so

00:07:25,170 --> 00:07:35,100
we have today 216 files about 55,000

00:07:30,660 --> 00:07:39,030
lines of code but that comprises 96,000

00:07:35,100 --> 00:07:41,430
k lines of code that adds and forty-one

00:07:39,030 --> 00:07:44,310
thousand lines removed so we've been in

00:07:41,430 --> 00:07:47,550
a ting on try this No and decided to

00:07:44,310 --> 00:07:49,260
refine it to do something else 337

00:07:47,550 --> 00:07:52,500
commits and a total of twenty-six

00:07:49,260 --> 00:07:55,320
authors today and I should point out

00:07:52,500 --> 00:07:56,370
that this does not include a platform

00:07:55,320 --> 00:07:59,100
development work that's being done

00:07:56,370 --> 00:08:00,600
outside the main OTP git repository so

00:07:59,100 --> 00:08:03,030
for example a number of the

00:08:00,600 --> 00:08:05,370
implementations are not being integrated

00:08:03,030 --> 00:08:07,520
into the git repository so their work is

00:08:05,370 --> 00:08:10,140
is not included in these these totals

00:08:07,520 --> 00:08:16,500
it's a fair amount of activity over the

00:08:10,140 --> 00:08:19,020
past 11 months again more our statistics

00:08:16,500 --> 00:08:20,610
graphs they show it better on the slides

00:08:19,020 --> 00:08:24,810
then on this projector because it's a

00:08:20,610 --> 00:08:29,130
vga but we've had we've had a total of

00:08:24,810 --> 00:08:31,920
465 patches submitted and 178 up

00:08:29,130 --> 00:08:33,360
streamed into owning p a lot of the

00:08:31,920 --> 00:08:38,510
other patches are just basically

00:08:33,360 --> 00:08:38,510
iterations on version 1 2 3 etc

00:08:40,790 --> 00:08:46,310
if we look at the project histories it's

00:08:44,270 --> 00:08:51,980
a fairly fairly young project we

00:08:46,310 --> 00:08:58,040
announced ODP last October at lcu 13

00:08:51,980 --> 00:08:59,900
here in Santa Clara we as at that time

00:08:58,040 --> 00:09:03,440
we basically had a set of slides and

00:08:59,900 --> 00:09:06,260
some good intentions we did deliver a

00:09:03,440 --> 00:09:09,590
preview preview release the following

00:09:06,260 --> 00:09:12,770
December last year and that had basic

00:09:09,590 --> 00:09:16,460
functionality for threads and processes

00:09:12,770 --> 00:09:22,040
and cues we also had a interim release

00:09:16,460 --> 00:09:24,860
that we demoed in during LCA 14 earlier

00:09:22,040 --> 00:09:27,730
this year in March and at that point you

00:09:24,860 --> 00:09:30,640
were able to show ping type traffic

00:09:27,730 --> 00:09:33,980
running across a couple of different

00:09:30,640 --> 00:09:35,990
implementations over the spring and

00:09:33,980 --> 00:09:37,610
summer we had a number of quite a bit of

00:09:35,990 --> 00:09:40,250
intensive design and development

00:09:37,610 --> 00:09:45,380
activity including to design Sprint's

00:09:40,250 --> 00:09:47,090
one focused on Krypto in April and then

00:09:45,380 --> 00:09:51,530
a second one focused on classification

00:09:47,090 --> 00:09:53,690
which was held in June that brings us to

00:09:51,530 --> 00:09:56,120
today where we're actually planning on

00:09:53,690 --> 00:09:58,640
having a number of demos which we'll

00:09:56,120 --> 00:10:01,730
talk about later that you'll be seeing

00:09:58,640 --> 00:10:04,520
on Thursday and then we're planning on

00:10:01,730 --> 00:10:06,770
delivering our first actual full-fledged

00:10:04,520 --> 00:10:10,100
release by the end of this year and

00:10:06,770 --> 00:10:12,080
we're looking to also starting at this

00:10:10,100 --> 00:10:15,380
connect we're doing advanced planning

00:10:12,080 --> 00:10:22,430
for our ODB 20 which we hope to deliver

00:10:15,380 --> 00:10:24,890
some time next year if we look at the

00:10:22,430 --> 00:10:28,310
where we are in terms of the various

00:10:24,890 --> 00:10:33,670
features that ODP 10 is offering in its

00:10:28,310 --> 00:10:36,140
api's buffers classification crypto

00:10:33,670 --> 00:10:38,150
inter-process communication and packet I

00:10:36,140 --> 00:10:40,280
oh these are all different level areas

00:10:38,150 --> 00:10:44,210
of functional abstraction so for

00:10:40,280 --> 00:10:47,740
instance a packet i/o object is a is an

00:10:44,210 --> 00:10:51,200
i/o channel okay logical or physical

00:10:47,740 --> 00:10:51,980
crypto is is providing a set of api's

00:10:51,200 --> 00:10:55,990
for do

00:10:51,980 --> 00:11:01,940
algorithm offload for encryption ashing

00:10:55,990 --> 00:11:06,410
functions like that here's just some

00:11:01,940 --> 00:11:09,620
more list of things so Q's scheduler

00:11:06,410 --> 00:11:12,590
shared memory and synchronizers all

00:11:09,620 --> 00:11:15,230
these are our we have various ap is that

00:11:12,590 --> 00:11:19,240
are defined and provide services in

00:11:15,230 --> 00:11:21,650
these areas and threats and timers

00:11:19,240 --> 00:11:24,230
timers interesting is that we've gone

00:11:21,650 --> 00:11:26,240
through really to complete iterations of

00:11:24,230 --> 00:11:28,940
the design we had an initial design and

00:11:26,240 --> 00:11:31,400
then an improved design which has just

00:11:28,940 --> 00:11:35,720
recently been I've been integrated so

00:11:31,400 --> 00:11:41,390
it's all part of the iteration that

00:11:35,720 --> 00:11:44,080
we're doing for those who get want to

00:11:41,390 --> 00:11:47,270
get involved in the Uyuni project

00:11:44,080 --> 00:11:50,620
there's you can visit the website open a

00:11:47,270 --> 00:11:53,960
clinic morgue we have a mailing list

00:11:50,620 --> 00:11:57,560
which is open and you know there's a lot

00:11:53,960 --> 00:12:02,380
of discussion activity we also have a

00:11:57,560 --> 00:12:06,410
weekly call on tuesdays at 1500 UTC

00:12:02,380 --> 00:12:13,970
which on the west coast would translate

00:12:06,410 --> 00:12:15,410
to 8am so we've given the span of time

00:12:13,970 --> 00:12:17,390
zones that the people who are

00:12:15,410 --> 00:12:20,720
participating it's either ranges from

00:12:17,390 --> 00:12:22,480
early morning to to early evening we

00:12:20,720 --> 00:12:26,140
tried to pick a time that that's

00:12:22,480 --> 00:12:30,080
mutually inconvenient for the extremes

00:12:26,140 --> 00:12:32,060
and anyway that's that is a open a call

00:12:30,080 --> 00:12:36,830
and anyone can participate not just we

00:12:32,060 --> 00:12:38,390
go to conference com / / data plane and

00:12:36,830 --> 00:12:39,800
then of course obviously it's an open

00:12:38,390 --> 00:12:41,450
source project we're always interested

00:12:39,800 --> 00:12:48,830
in people who want to contribute code

00:12:41,450 --> 00:12:51,520
tests documents bug reports etc any

00:12:48,830 --> 00:12:51,520
questions so far

00:12:54,180 --> 00:13:01,420
okay there are a number of a couple of

00:12:59,440 --> 00:13:04,000
other ODP sessions of interest which I

00:13:01,420 --> 00:13:07,420
wanted to point out that both you will

00:13:04,000 --> 00:13:08,770
want to check out on Wednesday cisco

00:13:07,420 --> 00:13:10,570
will be doing a very interesting

00:13:08,770 --> 00:13:13,029
presentation on some of their

00:13:10,570 --> 00:13:15,730
experiences at work with working with

00:13:13,029 --> 00:13:18,610
ODP since they're one of the lng members

00:13:15,730 --> 00:13:22,900
and and one of the one of the key

00:13:18,610 --> 00:13:25,720
drivers behind behind the vp and on

00:13:22,900 --> 00:13:28,960
thursday there is a an interesting talk

00:13:25,720 --> 00:13:30,940
that beresch will be giving on the

00:13:28,960 --> 00:13:33,880
isolation and no hurts up streaming

00:13:30,940 --> 00:13:37,720
progress the intent behind this is to

00:13:33,880 --> 00:13:39,670
allow applications to take a complete

00:13:37,720 --> 00:13:42,070
control of coors without interference

00:13:39,670 --> 00:13:43,540
from the Linux kernel and in the data

00:13:42,070 --> 00:13:46,089
plane just as in high-performance

00:13:43,540 --> 00:13:48,040
computer other things this is useful

00:13:46,089 --> 00:13:50,380
because it basically means that you can

00:13:48,040 --> 00:13:54,490
have complete access to the core without

00:13:50,380 --> 00:13:59,280
the overhead of the colonel constantly

00:13:54,490 --> 00:14:02,910
interrupting and of course on Thursday

00:13:59,280 --> 00:14:07,930
we do have a number of demos planned

00:14:02,910 --> 00:14:12,730
which will be held over in the I think

00:14:07,930 --> 00:14:14,680
it's happy sweetie okay where I mean

00:14:12,730 --> 00:14:17,700
they will see the posters go up later

00:14:14,680 --> 00:14:21,730
this week we have a number of pro of

00:14:17,700 --> 00:14:23,650
demos basically showing ODP running and

00:14:21,730 --> 00:14:27,010
performing different applications across

00:14:23,650 --> 00:14:33,190
a wide variety of of application

00:14:27,010 --> 00:14:39,670
platforms and SOC is including ipsec

00:14:33,190 --> 00:14:42,270
routing I or two forwarding a kadai o

00:14:39,670 --> 00:14:46,510
across different different architectures

00:14:42,270 --> 00:14:51,850
as well as interacting with open

00:14:46,510 --> 00:14:54,279
daylight project and showing the open

00:14:51,850 --> 00:14:59,260
virtual switch running on open data

00:14:54,279 --> 00:15:01,330
planning as well and a few others and I

00:14:59,260 --> 00:15:02,000
am say that we you know there cisco has

00:15:01,330 --> 00:15:04,130
a demo

00:15:02,000 --> 00:15:06,170
they're also planted which we don't get

00:15:04,130 --> 00:15:14,570
on in on this chart or we'll we'll have

00:15:06,170 --> 00:15:16,820
that up as well that's basically the

00:15:14,570 --> 00:15:24,410
update we went we didn't have a lot of

00:15:16,820 --> 00:15:27,020
questions but maybe also now yes time so

00:15:24,410 --> 00:15:30,410
debugging is that from easy cheap um so

00:15:27,020 --> 00:15:33,010
uh like heaven started being involved in

00:15:30,410 --> 00:15:35,570
the EPS I guess some people know and uh

00:15:33,010 --> 00:15:38,120
so the code is probably available that's

00:15:35,570 --> 00:15:40,010
that's the cool part but some of the

00:15:38,120 --> 00:15:42,050
like the design documents some were very

00:15:40,010 --> 00:15:44,420
easy to find someone up till this day

00:15:42,050 --> 00:15:47,840
I'm not quite sure which we get like the

00:15:44,420 --> 00:15:49,610
classifier and stuff so I can understand

00:15:47,840 --> 00:15:51,830
if some of them you know just doesn't

00:15:49,610 --> 00:15:54,340
exist nobody wrote a formal document but

00:15:51,830 --> 00:15:56,870
I'm just wondering if there's somewhere

00:15:54,340 --> 00:15:58,280
someone can go to to see okay these are

00:15:56,870 --> 00:16:01,550
all the design documents that we have

00:15:58,280 --> 00:16:04,400
yeah that's all in in the claim website

00:16:01,550 --> 00:16:06,230
the classification document was just you

00:16:04,400 --> 00:16:08,750
know we had some problems with

00:16:06,230 --> 00:16:12,080
formatting on that we were just resolved

00:16:08,750 --> 00:16:15,980
last week so check there again with that

00:16:12,080 --> 00:16:18,890
document is fully available now okay i'm

00:16:15,980 --> 00:16:21,410
on there thank you and you know one of

00:16:18,890 --> 00:16:26,089
the major activities that still needed

00:16:21,410 --> 00:16:28,339
is you know is is more documentation by

00:16:26,089 --> 00:16:30,170
my first manager had a sign in his

00:16:28,339 --> 00:16:32,320
office we've said everything comes to

00:16:30,170 --> 00:16:35,360
you who aids except documentation and

00:16:32,320 --> 00:16:39,740
that's true for all projects i think so

00:16:35,360 --> 00:16:41,830
we're no exception on that didn't thank

00:16:39,740 --> 00:16:41,830
you

00:16:50,750 --> 00:16:56,130
so all these new name beer is the cook

00:16:54,360 --> 00:16:58,020
to a beer and the classification API

00:16:56,130 --> 00:17:03,420
what is the plan level of support on

00:16:58,020 --> 00:17:06,780
Linux gendrich minutes DVD k so the

00:17:03,420 --> 00:17:12,300
crypto API is available on Linux generic

00:17:06,780 --> 00:17:15,690
it basically run it uses openssl 22 to

00:17:12,300 --> 00:17:17,699
provide those api's support and that's

00:17:15,690 --> 00:17:19,280
where that that's that's how it saying

00:17:17,699 --> 00:17:23,760
so again it's not a performance

00:17:19,280 --> 00:17:26,970
implementation for DVD k we've we've

00:17:23,760 --> 00:17:31,250
done dtek support as an essentially a

00:17:26,970 --> 00:17:35,090
demonstration project but the status of

00:17:31,250 --> 00:17:38,550
DP DK as an officially supported

00:17:35,090 --> 00:17:42,270
platform for ODP is still under

00:17:38,550 --> 00:17:45,140
discussion ideally we'd like someone who

00:17:42,270 --> 00:17:47,850
is a deep main DVD case stakeholder to

00:17:45,140 --> 00:17:52,170
step up and say hey we want to provide

00:17:47,850 --> 00:17:54,510
this on support on an ongoing basis to

00:17:52,170 --> 00:17:56,340
district notifications is it expected

00:17:54,510 --> 00:17:58,740
that all of these a pas that are coming

00:17:56,340 --> 00:18:01,650
our classification included will always

00:17:58,740 --> 00:18:04,020
have a Linux gendrich at least yes the

00:18:01,650 --> 00:18:06,000
intent the intent is that Linux generic

00:18:04,020 --> 00:18:08,550
is essentially a proving ground for all

00:18:06,000 --> 00:18:12,020
the API so any idea could be available

00:18:08,550 --> 00:18:14,670
there although obviously not accelerated

00:18:12,020 --> 00:18:20,400
suitable fervor for development and test

00:18:14,670 --> 00:18:25,620
views but but not for production gonna

00:18:20,400 --> 00:18:28,110
add a bit most of the blood homes apart

00:18:25,620 --> 00:18:29,790
from Linux you look arm we would like to

00:18:28,110 --> 00:18:32,400
make it a lens you would like to meet it

00:18:29,790 --> 00:18:34,950
all of the platforms is expected that

00:18:32,400 --> 00:18:36,870
that member companies all over its

00:18:34,950 --> 00:18:42,060
interested they should maintain it in

00:18:36,870 --> 00:18:44,400
future though the initial period so we

00:18:42,060 --> 00:18:46,550
would help them but later on it should

00:18:44,400 --> 00:18:51,170
be like a true open source project so

00:18:46,550 --> 00:18:51,170
respective user should make it

00:18:51,860 --> 00:18:57,780
not very spinning from Talera what's the

00:18:54,870 --> 00:18:59,880
view of the notes they get directly

00:18:57,780 --> 00:19:02,460
there some only p applications are they

00:18:59,880 --> 00:19:04,590
expect it to be you know real

00:19:02,460 --> 00:19:06,620
applications you know your production

00:19:04,590 --> 00:19:10,230
quality or they just expect to be test

00:19:06,620 --> 00:19:13,440
demos or was a cool though right now

00:19:10,230 --> 00:19:15,060
right now we've focused on on demos

00:19:13,440 --> 00:19:24,780
really but I think there's people who

00:19:15,060 --> 00:19:27,270
are working on on more serious stuff so

00:19:24,780 --> 00:19:29,670
what we're working on the day is that we

00:19:27,270 --> 00:19:32,490
have our data plane code and actually i

00:19:29,670 --> 00:19:35,040
have a presentation it's the same time

00:19:32,490 --> 00:19:39,180
slot on wednesday yeah that right that

00:19:35,040 --> 00:19:42,330
we're talk about more details of that

00:19:39,180 --> 00:19:46,560
but we have an existing code base that

00:19:42,330 --> 00:19:49,950
we have deployed on our multiple melted

00:19:46,560 --> 00:19:51,000
asics for several years now and what

00:19:49,950 --> 00:19:53,640
I've been working on is actually

00:19:51,000 --> 00:19:57,030
according that code to run on top of OD

00:19:53,640 --> 00:20:01,010
p as the basic infrastructure for

00:19:57,030 --> 00:20:05,930
receive transmitted packet ordering and

00:20:01,010 --> 00:20:08,880
buffer management and so i think that

00:20:05,930 --> 00:20:13,040
that might be probably one of the more

00:20:08,880 --> 00:20:16,530
advanced uses of it today although the

00:20:13,040 --> 00:20:19,260
ipsec example application does make use

00:20:16,530 --> 00:20:25,770
of like packet ordering cues to do

00:20:19,260 --> 00:20:30,900
sequence number assignment the are our

00:20:25,770 --> 00:20:33,330
data plane code know so well i mean we

00:20:30,900 --> 00:20:36,450
are yet we are going to be showing open

00:20:33,330 --> 00:20:38,400
V switch okay which is running on on

00:20:36,450 --> 00:20:41,090
open date nights we have a an adapter

00:20:38,400 --> 00:20:44,130
module for allowing it to run on that

00:20:41,090 --> 00:20:46,170
there will be some I think you know when

00:20:44,130 --> 00:20:49,140
you look at the how the ecosystem in

00:20:46,170 --> 00:20:52,440
open source projects develops it's

00:20:49,140 --> 00:20:55,410
really driven by end user interest in ND

00:20:52,440 --> 00:20:57,930
right so if if somebody says hey this is

00:20:55,410 --> 00:21:01,570
cool I have a great app that I want to

00:20:57,930 --> 00:21:04,000
make run on this go for it

00:21:01,570 --> 00:21:06,640
I mean there's that that's that's that

00:21:04,000 --> 00:21:09,400
that only helps everyone both in terms

00:21:06,640 --> 00:21:11,440
of making your app more readily

00:21:09,400 --> 00:21:13,390
available across multiple platforms as

00:21:11,440 --> 00:21:16,330
well as providing good feedback for hey

00:21:13,390 --> 00:21:18,640
we could further improve ODP by looking

00:21:16,330 --> 00:21:21,130
at in these features but we what we see

00:21:18,640 --> 00:21:24,550
is the whole idea behind it is we

00:21:21,130 --> 00:21:26,140
started from scratch so this past year

00:21:24,550 --> 00:21:29,140
we've been developing you know and

00:21:26,140 --> 00:21:31,960
aiming towards an ODP 10 and the idea

00:21:29,140 --> 00:21:34,810
behind only be 10 means that this is now

00:21:31,960 --> 00:21:37,330
suitable for evaluation by the community

00:21:34,810 --> 00:21:38,650
of large okay that it's mature enough

00:21:37,330 --> 00:21:40,990
that the api's aren't going to change

00:21:38,650 --> 00:21:44,830
out from underneath you every you know

00:21:40,990 --> 00:21:47,140
every week so so you can start playing

00:21:44,830 --> 00:21:49,390
around with it the there seems to be

00:21:47,140 --> 00:21:52,480
emerging consensus that the intent is

00:21:49,390 --> 00:21:54,070
that Brody be 20 we want to then have

00:21:52,480 --> 00:21:57,220
something which is suitable for

00:21:54,070 --> 00:21:58,840
production deployment right so that's

00:21:57,220 --> 00:22:01,450
just part of the natural maturation

00:21:58,840 --> 00:22:04,600
process of any project that you have to

00:22:01,450 --> 00:22:06,160
have enough there so that people can it

00:22:04,600 --> 00:22:08,430
has stable enough so that people can

00:22:06,160 --> 00:22:10,960
actually do serious evaluation and

00:22:08,430 --> 00:22:13,930
prototyping with it and then based on

00:22:10,960 --> 00:22:15,730
that we can we can further tune and

00:22:13,930 --> 00:22:18,640
harden the interfaces so that it's ready

00:22:15,730 --> 00:22:20,590
for our functions but bill to his

00:22:18,640 --> 00:22:23,830
specific question i mean the the crypto

00:22:20,590 --> 00:22:25,870
demo app that was done for example was

00:22:23,830 --> 00:22:28,090
in no way meant for ultimately being a

00:22:25,870 --> 00:22:30,700
production piece of code these are all

00:22:28,090 --> 00:22:32,710
really so far apps that are about

00:22:30,700 --> 00:22:34,990
demonstrating and exercising and

00:22:32,710 --> 00:22:37,240
validating api's and infrastructure and

00:22:34,990 --> 00:22:39,150
so bill I don't I don't know you folks

00:22:37,240 --> 00:22:41,320
have any plans of writing applications

00:22:39,150 --> 00:22:44,860
that would also be upstream for

00:22:41,320 --> 00:22:47,260
production use well I mean again if if

00:22:44,860 --> 00:22:49,270
people wanted to write applications and

00:22:47,260 --> 00:22:51,880
open source them they're welcome to that

00:22:49,270 --> 00:22:54,160
LNG itself is not doesn't have a mission

00:22:51,880 --> 00:22:58,420
to do that exactly and I think that's

00:22:54,160 --> 00:23:02,110
you're quitting here so but what we are

00:22:58,420 --> 00:23:05,380
interested in is using some of these as

00:23:02,110 --> 00:23:07,720
perhaps part of a validation sweet okay

00:23:05,380 --> 00:23:10,210
so that you can verify that when you

00:23:07,720 --> 00:23:12,400
know someone says I have an ODP

00:23:10,210 --> 00:23:13,670
implementation you know then they had to

00:23:12,400 --> 00:23:15,860
get some sort of

00:23:13,670 --> 00:23:18,320
asian process that basically says yes

00:23:15,860 --> 00:23:21,530
indeed you know if you run these tests

00:23:18,320 --> 00:23:24,650
and they pass then you did it conforms

00:23:21,530 --> 00:23:26,030
to the Odin along spec I think the

00:23:24,650 --> 00:23:27,350
validation suite is something that we

00:23:26,030 --> 00:23:29,720
see is being very important moving

00:23:27,350 --> 00:23:32,510
forward exactly yeah her for the for

00:23:29,720 --> 00:23:34,010
obvious reasons you know point of having

00:23:32,510 --> 00:23:35,630
multiple implementations if you can't

00:23:34,010 --> 00:23:47,030
reliably say that they're really

00:23:35,630 --> 00:23:49,430
implementing the same thing yes Alice so

00:23:47,030 --> 00:23:51,530
another question about but obviously

00:23:49,430 --> 00:23:54,020
because part of the target of doing this

00:23:51,530 --> 00:23:55,580
is to be able to supply the same

00:23:54,020 --> 00:23:57,380
interface across different

00:23:55,580 --> 00:23:59,660
implementation but it's also obvious

00:23:57,380 --> 00:24:01,400
that you know certain targets would be

00:23:59,660 --> 00:24:05,090
able to do stuff that are target's

00:24:01,400 --> 00:24:06,560
cannot I cannot do efficiently now for

00:24:05,090 --> 00:24:08,090
some things you could just say okay I

00:24:06,560 --> 00:24:09,800
have this feature is working very well

00:24:08,090 --> 00:24:12,920
because it's hard work sorry edit here

00:24:09,800 --> 00:24:15,050
and here's may be slightly less well

00:24:12,920 --> 00:24:17,660
because it's not accelerated it's done

00:24:15,050 --> 00:24:19,220
in software but obviously from time to

00:24:17,660 --> 00:24:21,620
time there will be features that you

00:24:19,220 --> 00:24:24,980
know not everybody can do so they would

00:24:21,620 --> 00:24:27,410
be marked I guess optional um the

00:24:24,980 --> 00:24:29,930
question is is there like a some sort of

00:24:27,410 --> 00:24:32,330
policy to say when are we putting stuff

00:24:29,930 --> 00:24:35,770
in when are we putting it as optional on

00:24:32,330 --> 00:24:38,450
men are putting it mandatory detention

00:24:35,770 --> 00:24:41,420
for application writers write till they

00:24:38,450 --> 00:24:45,290
know what to expect well that's part of

00:24:41,420 --> 00:24:49,580
the the design process which I know

00:24:45,290 --> 00:24:50,990
you've been involved with now I think

00:24:49,580 --> 00:24:53,410
it's a really a question of consensus

00:24:50,990 --> 00:24:55,670
with you're actually right that not

00:24:53,410 --> 00:24:57,830
being portable doesn't mean that all

00:24:55,670 --> 00:24:59,600
platforms are identical right that

00:24:57,830 --> 00:25:01,010
that's certainly not the intent and nor

00:24:59,600 --> 00:25:02,570
can it couldn't be because different

00:25:01,010 --> 00:25:05,690
platforms have different capabilities

00:25:02,570 --> 00:25:07,040
price performance points you know I mean

00:25:05,690 --> 00:25:09,350
you're not going to make a one course is

00:25:07,040 --> 00:25:12,110
to look like a 64 quarter system or a

00:25:09,350 --> 00:25:16,670
128 core system or a thousand core

00:25:12,110 --> 00:25:19,280
system but on the other hand not all

00:25:16,670 --> 00:25:22,010
applications are going to need you know

00:25:19,280 --> 00:25:24,830
a thousand cores for a given deployment

00:25:22,010 --> 00:25:26,740
so the intent is that we want to provide

00:25:24,830 --> 00:25:29,470
who the application writer

00:25:26,740 --> 00:25:32,590
a common set of AP is that they can

00:25:29,470 --> 00:25:35,110
easily provide sheave presence around a

00:25:32,590 --> 00:25:37,360
wide range of different s OCS and that

00:25:35,110 --> 00:25:40,720
allows and turn the people who are

00:25:37,360 --> 00:25:43,059
looking to deploy those apps to select a

00:25:40,720 --> 00:25:44,500
platform that matches their price

00:25:43,059 --> 00:25:57,190
performant need for that particular

00:25:44,500 --> 00:25:58,720
deployment well is so some of the work I

00:25:57,190 --> 00:26:01,000
mean it's it's mentioned in the

00:25:58,720 --> 00:26:03,070
specification but in the linux generic

00:26:01,000 --> 00:26:06,190
implementation of the crypt of api it's

00:26:03,070 --> 00:26:08,679
not implemented yet but the idea with

00:26:06,190 --> 00:26:11,500
the crypto it was to be able to the

00:26:08,679 --> 00:26:16,210
application to query capabilities of the

00:26:11,500 --> 00:26:19,780
implementation and so in the application

00:26:16,210 --> 00:26:22,690
could determine at runtime what the

00:26:19,780 --> 00:26:26,559
underlying system can do and then adjust

00:26:22,690 --> 00:26:29,260
for that and I think that that concept

00:26:26,559 --> 00:26:31,750
will probably find his way to other

00:26:29,260 --> 00:26:34,650
aspects of it p as well and in addition

00:26:31,750 --> 00:26:37,809
we've talked about even with crypto

00:26:34,650 --> 00:26:39,700
there's the idea of discovering and

00:26:37,809 --> 00:26:41,590
handling to run time and there's the

00:26:39,700 --> 00:26:47,170
idea of doing it at compile time so

00:26:41,590 --> 00:26:49,660
we're also we've discussed trying to the

00:26:47,170 --> 00:26:52,840
crypto has sort of been the litmus test

00:26:49,660 --> 00:26:54,730
or the first try at era we're going to

00:26:52,840 --> 00:26:57,280
do a lot of these things and so we're

00:26:54,730 --> 00:26:59,950
still been working through the kinks of

00:26:57,280 --> 00:27:02,559
how do you really efficiently at build

00:26:59,950 --> 00:27:06,760
time lend a given implementation

00:27:02,559 --> 00:27:09,130
propagate some town defiance or whatever

00:27:06,760 --> 00:27:12,670
to efficiently let your application

00:27:09,130 --> 00:27:16,050
adjust accordingly so that that's still

00:27:12,670 --> 00:27:19,600
sort of a working product assemble okay

00:27:16,050 --> 00:27:21,870
a la carte is a fundamental principle I

00:27:19,600 --> 00:27:24,250
think right and that is to allow for

00:27:21,870 --> 00:27:26,590
varying implementations in varying

00:27:24,250 --> 00:27:28,059
underlying hardware and to be able to be

00:27:26,590 --> 00:27:30,280
able to pick and choose those and not

00:27:28,059 --> 00:27:32,260
have to accept you know the least common

00:27:30,280 --> 00:27:35,500
denominator for a given set of hardware

00:27:32,260 --> 00:27:37,920
did that was what I had in mind might so

00:27:35,500 --> 00:27:39,900
if you have all of optional features the

00:27:37,920 --> 00:27:41,670
the application writer if its target a

00:27:39,900 --> 00:27:43,710
certain platform that's fine but if it's

00:27:41,670 --> 00:27:46,110
starting the most then it will be forced

00:27:43,710 --> 00:27:54,960
to take the lowest common denominator so

00:27:46,110 --> 00:27:57,540
yeah we settled for a software software

00:27:54,960 --> 00:27:59,400
exists right so into some degree maybe

00:27:57,540 --> 00:28:01,830
the the actual application doesn't know

00:27:59,400 --> 00:28:03,870
or care whether there's hardware

00:28:01,830 --> 00:28:06,450
software under that's your business as a

00:28:03,870 --> 00:28:08,820
sock vendor to decide whether you put a

00:28:06,450 --> 00:28:10,320
driver in to leverage your hardware or

00:28:08,820 --> 00:28:12,480
whether you put in a software

00:28:10,320 --> 00:28:14,520
implementation right if I want my

00:28:12,480 --> 00:28:16,050
application to do something whether you

00:28:14,520 --> 00:28:17,430
do it in hardware or software is your

00:28:16,050 --> 00:28:20,880
business but that's what you're going to

00:28:17,430 --> 00:28:23,130
provide so if I get your right so the

00:28:20,880 --> 00:28:24,810
expectation is that over time the ODP

00:28:23,130 --> 00:28:26,640
API will include more and more

00:28:24,810 --> 00:28:28,380
abstractions for stuff like that no

00:28:26,640 --> 00:28:31,050
lookups counters and so on it will

00:28:28,380 --> 00:28:32,820
either be soft or whatever yeah so so

00:28:31,050 --> 00:28:35,010
and Blake is absolutely right so the

00:28:32,820 --> 00:28:38,010
idea is just to provide ranges and

00:28:35,010 --> 00:28:39,510
options and choice so each SOC vendor

00:28:38,010 --> 00:28:42,540
says okay these are the set of mandatory

00:28:39,510 --> 00:28:44,490
api's we will we will accelerate what

00:28:42,540 --> 00:28:46,800
makes sense in hardware will provide

00:28:44,490 --> 00:28:49,640
software implementations you know for

00:28:46,800 --> 00:28:53,040
the balance and then for an application

00:28:49,640 --> 00:28:54,930
deployer okay which says hey I want to

00:28:53,040 --> 00:28:57,690
deploy application x for this type of

00:28:54,930 --> 00:28:59,670
use well what do I need I know that I

00:28:57,690 --> 00:29:01,230
want real your hardware acceleration for

00:28:59,670 --> 00:29:04,320
these features you know what's the list

00:29:01,230 --> 00:29:06,420
of soc s that provide that you know then

00:29:04,320 --> 00:29:07,830
they you know that that too narrows your

00:29:06,420 --> 00:29:12,230
choice for which ones to consider for

00:29:07,830 --> 00:29:23,000
the point you can even choose light

00:29:12,230 --> 00:29:27,240
which not that oh yeah yes this one yeah

00:29:23,000 --> 00:29:29,310
so so again if we look at here the idea

00:29:27,240 --> 00:29:32,070
is behind the ODP implementation so

00:29:29,310 --> 00:29:35,100
again these can these can operate either

00:29:32,070 --> 00:29:37,020
in hardware or software they can call

00:29:35,100 --> 00:29:39,240
directly into hardware or they can go

00:29:37,020 --> 00:29:42,690
through an existing platform SDK we

00:29:39,240 --> 00:29:44,580
don't specify how many particularly yeah

00:29:42,690 --> 00:29:47,220
that's that's you know within the domain

00:29:44,580 --> 00:29:49,980
of expertise of the SOC vendor ok well

00:29:47,220 --> 00:29:51,610
the expedition is to provide as much FBI

00:29:49,980 --> 00:29:53,650
as possible so that each one

00:29:51,610 --> 00:29:55,480
choose whether or not to accelerate

00:29:53,650 --> 00:29:58,090
definitely do not want at least common

00:29:55,480 --> 00:30:00,100
denominator where you have you said such

00:29:58,090 --> 00:30:02,170
weak ap is that nobody is really

00:30:00,100 --> 00:30:03,760
interested in using any of them I think

00:30:02,170 --> 00:30:05,650
you really want a rich level of

00:30:03,760 --> 00:30:07,390
functionality but not an impossibly high

00:30:05,650 --> 00:30:09,580
bar where everyone has to do everything

00:30:07,390 --> 00:30:13,480
in software because only one platform

00:30:09,580 --> 00:30:16,770
ever has you know that but over time you

00:30:13,480 --> 00:30:18,940
would expect that you know the level of

00:30:16,770 --> 00:30:21,280
abstraction and level of capability

00:30:18,940 --> 00:30:24,340
would increase it would increase because

00:30:21,280 --> 00:30:26,590
I mean Hardware designers are constantly

00:30:24,340 --> 00:30:28,570
cleverly coming up with new things and

00:30:26,590 --> 00:30:33,040
and one of the real purposes of coming

00:30:28,570 --> 00:30:34,270
up with really good ap is that a large

00:30:33,040 --> 00:30:35,860
number of applications are going to be

00:30:34,270 --> 00:30:38,380
interested in using is that is the

00:30:35,860 --> 00:30:40,480
hardware designers free rein to say hey

00:30:38,380 --> 00:30:47,320
we can do this heart this API and

00:30:40,480 --> 00:30:49,360
hardware very cleverly so thank you soul

00:30:47,320 --> 00:30:51,040
of a specific one I'm talking about the

00:30:49,360 --> 00:30:54,040
crypto stuff if you have a very specific

00:30:51,040 --> 00:30:56,169
case that came up recently and I

00:30:54,040 --> 00:30:58,000
actually bumped into this with a 90

00:30:56,169 --> 00:31:00,820
second foundation and it has to do with

00:30:58,000 --> 00:31:02,710
that we had an implementation for all

00:31:00,820 --> 00:31:05,830
the ipsec protocol I mean kripa

00:31:02,710 --> 00:31:09,250
protocols but only up to 4,000 bits well

00:31:05,830 --> 00:31:11,320
ipsec has some to the helmand things

00:31:09,250 --> 00:31:12,610
going to six thousand bits so there are

00:31:11,320 --> 00:31:14,890
a couple ways when you can look at that

00:31:12,610 --> 00:31:17,500
from ODP point of view one way is that

00:31:14,890 --> 00:31:19,210
ODP app says what's your biggest key

00:31:17,500 --> 00:31:21,610
size and they would come back and say

00:31:19,210 --> 00:31:22,960
four thousand and which case then it's a

00:31:21,610 --> 00:31:24,520
okay if I want to do six thousand Oh

00:31:22,960 --> 00:31:27,790
Mike software implication or

00:31:24,520 --> 00:31:29,679
alternatively the ODP could say no no if

00:31:27,790 --> 00:31:31,360
your supply this crypto capability you

00:31:29,679 --> 00:31:33,700
have to do it for everything up to the

00:31:31,360 --> 00:31:35,559
max and therefore Thea it's an OD piece

00:31:33,700 --> 00:31:37,570
implementation that has to say oh I

00:31:35,559 --> 00:31:39,370
can't do anything worth 4,000 hardware

00:31:37,570 --> 00:31:41,080
I'll ship it off to my software library

00:31:39,370 --> 00:31:43,630
two very different approaches and I

00:31:41,080 --> 00:31:46,299
think kind of sucked the philosophy yeah

00:31:43,630 --> 00:31:48,429
I think that's exactly what the

00:31:46,299 --> 00:31:50,290
community design process is all about

00:31:48,429 --> 00:31:53,040
because we're the ones that decide you

00:31:50,290 --> 00:31:55,540
know does it make sense you know from a

00:31:53,040 --> 00:31:57,370
ecosystem standpoint to say you know

00:31:55,540 --> 00:31:59,919
this is where the line should be drawn

00:31:57,370 --> 00:32:02,080
okay and one would assume that those

00:31:59,919 --> 00:32:05,220
lines would change over time because

00:32:02,080 --> 00:32:05,220
technology matures

00:32:07,229 --> 00:32:13,200
okay anything else

00:32:21,690 --> 00:32:27,389
alright well thank you all very much

00:32:23,779 --> 00:32:30,919
this is a very good exchange and we hope

00:32:27,389 --> 00:32:33,419
to see you on the mailing list and

00:32:30,919 --> 00:32:38,450
participating in our weekly design calls

00:32:33,419 --> 00:32:38,450

YouTube URL: https://www.youtube.com/watch?v=RU02hVQu2vU


