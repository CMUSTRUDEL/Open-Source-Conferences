Title: LCU14-104: Everything’s Done! Android for 64-bit ARMv8, What’s next?
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-104: Everything’s Done! Android for 64-bit ARMv8, What’s next?

---------------------------------------------------

Speaker: Khasim Mohammed
Track: Android
Location: Grand Peninsula D, Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
Android is getting tuned for AArch64 ARMv8, while majority of tasks are complete, there is still a lot more TODO. Let’s understand the key components in Android that have changed for ARMv8, how we prepare for Android L for ARMv8, moving forward with LSK 3.10 or 3.14 for ARMv8 and an overview on optimizing Android to improve performance.
---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137707
Google Event: 
Presentation: #
Video: #
Eatherpad: pad.linaro.org/p/lcu14-104
---------------------------------------------------

★ Event Details ★
Linaro Connect USA - #LCU14
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:38,950 --> 00:00:43,750
okay we can start off with this session

00:00:45,579 --> 00:00:50,390
now more than session this is what we

00:00:47,930 --> 00:00:52,970
actually would want to happen like you

00:00:50,390 --> 00:01:01,430
talk to each of this that is more

00:00:52,970 --> 00:01:02,809
important this is pretty big room it

00:01:01,430 --> 00:01:04,640
would have been good like if we had a

00:01:02,809 --> 00:01:17,410
small room it looks like there is nobody

00:01:04,640 --> 00:01:21,380
listening then you see from here yeah ok

00:01:17,410 --> 00:01:23,240
so the object of this session was mainly

00:01:21,380 --> 00:01:26,899
to cover what has been done so far on

00:01:23,240 --> 00:01:30,380
Android on our v8 and what else needs to

00:01:26,899 --> 00:01:32,210
be done so generally like as you saw in

00:01:30,380 --> 00:01:36,409
the keynote demo like we demonstrated

00:01:32,210 --> 00:01:39,380
and returning on a v8 and like there is

00:01:36,409 --> 00:01:42,979
also hardware expected soon so devices

00:01:39,380 --> 00:01:45,470
expected soon so it looks like almost an

00:01:42,979 --> 00:01:47,570
android port for me it is done but still

00:01:45,470 --> 00:01:51,259
there are not of things which are

00:01:47,570 --> 00:01:53,119
missing which we need to do so in this

00:01:51,259 --> 00:01:55,700
session like I will just highlight few

00:01:53,119 --> 00:01:58,640
main areas which we think we should go

00:01:55,700 --> 00:02:01,189
after from here like whatever we have

00:01:58,640 --> 00:02:03,229
done so far so from here we need to pick

00:02:01,189 --> 00:02:07,369
few more areas and really look into

00:02:03,229 --> 00:02:09,560
those but I am very open to your inputs

00:02:07,369 --> 00:02:11,810
on what exactly we need to focus on and

00:02:09,560 --> 00:02:13,820
if something which i am talking if it is

00:02:11,810 --> 00:02:17,870
not relevant to am be eight or something

00:02:13,820 --> 00:02:20,000
please feel free to ping me so generally

00:02:17,870 --> 00:02:22,549
the sessions we had before were all like

00:02:20,000 --> 00:02:24,680
joint sessions right like where the

00:02:22,549 --> 00:02:27,799
audience in environment or the members

00:02:24,680 --> 00:02:29,660
involvement is very much required so it

00:02:27,799 --> 00:02:31,160
this is I don't want to run in in a

00:02:29,660 --> 00:02:33,109
presentation mode where I am going to

00:02:31,160 --> 00:02:36,019
talk and you're just listening but feel

00:02:33,109 --> 00:02:38,690
free to stop me anywhere let's discuss

00:02:36,019 --> 00:02:41,239
more on what exactly we are discussing

00:02:38,690 --> 00:02:43,700
and whether it is relevant for army

00:02:41,239 --> 00:02:47,630
eight whether we should do it or we

00:02:43,700 --> 00:02:49,400
should not or if there are any more any

00:02:47,630 --> 00:02:49,880
other important items which we need to

00:02:49,400 --> 00:02:51,410
be pick

00:02:49,880 --> 00:02:58,940
instead of what we are going to present

00:02:51,410 --> 00:03:05,300
here so I'm just checking if team you

00:02:58,940 --> 00:03:07,790
guys are here so like going with what /

00:03:05,300 --> 00:03:12,860
Stewart was saying in the previous slide

00:03:07,790 --> 00:03:15,890
previous session so Juno with android on

00:03:12,860 --> 00:03:17,930
arm v8 was announced in july so this was

00:03:15,890 --> 00:03:21,200
the work which we have been doing with

00:03:17,930 --> 00:03:23,990
harm and like google also joined lately

00:03:21,200 --> 00:03:27,170
and this has been like first version

00:03:23,990 --> 00:03:29,390
public version was announced in july so

00:03:27,170 --> 00:03:32,600
this this is not like we implemented

00:03:29,390 --> 00:03:35,180
something in the last month but it it is

00:03:32,600 --> 00:03:36,860
like an ear kind of for two years kind

00:03:35,180 --> 00:03:39,050
of work that actually came in together

00:03:36,860 --> 00:03:41,450
and we made it free first official

00:03:39,050 --> 00:03:43,760
release in july on the actual hardware

00:03:41,450 --> 00:03:47,030
platform and the release is publicly

00:03:43,760 --> 00:03:48,890
available for all of us to download so

00:03:47,030 --> 00:03:50,990
this lazy is on you know hardware

00:03:48,890 --> 00:03:54,260
development platform so this platform is

00:03:50,990 --> 00:03:56,060
available from arm most of our members I

00:03:54,260 --> 00:03:59,000
think already have this platform and

00:03:56,060 --> 00:04:01,690
they are already using our releases for

00:03:59,000 --> 00:04:07,670
in-house development as well as for

00:04:01,690 --> 00:04:11,600
validation and so on so this is where we

00:04:07,670 --> 00:04:14,540
were and on the on Android side itself

00:04:11,600 --> 00:04:17,330
like at USP there were a lot of things

00:04:14,540 --> 00:04:19,940
which were added for army eight so on

00:04:17,330 --> 00:04:23,570
Android user space like as we just

00:04:19,940 --> 00:04:27,440
discussed so art j9 valgrind was done

00:04:23,570 --> 00:04:29,300
from arm I partners and then by owning

00:04:27,440 --> 00:04:31,700
skia renderscript I think there was a

00:04:29,300 --> 00:04:35,570
lot of keyframe words which are modified

00:04:31,700 --> 00:04:38,750
in AOSP to get it compatible or get it

00:04:35,570 --> 00:04:41,990
running on jambe 8 on the colonel side

00:04:38,750 --> 00:04:45,560
like lot of patches the colonel work on

00:04:41,990 --> 00:04:48,500
160 or like arm v8 was like tremendous

00:04:45,560 --> 00:04:50,870
lot of work has been done even before

00:04:48,500 --> 00:04:53,960
Android work started and a lot of

00:04:50,870 --> 00:04:57,740
patches went upstream and then we saw

00:04:53,960 --> 00:05:01,750
that LSK was important because our

00:04:57,740 --> 00:05:03,740
members and Google and everyone was

00:05:01,750 --> 00:05:05,660
depending on a stable

00:05:03,740 --> 00:05:09,199
instead of migrating along with the

00:05:05,660 --> 00:05:11,660
moving kernel versions so we act Lenora

00:05:09,199 --> 00:05:14,300
we do both the tasks like one we have

00:05:11,660 --> 00:05:16,759
alice k which is based on three dot ten

00:05:14,300 --> 00:05:20,569
today so where we have android

00:05:16,759 --> 00:05:24,410
completely tested for production and we

00:05:20,569 --> 00:05:26,810
also have upstream kernel which is also

00:05:24,410 --> 00:05:28,759
being maintained and we have lot of

00:05:26,810 --> 00:05:30,860
patches or the actual development that

00:05:28,759 --> 00:05:33,139
is going on on the Colonel's IDs on

00:05:30,860 --> 00:05:35,120
upstream so when the patches go upstream

00:05:33,139 --> 00:05:39,500
we also pull it in LSK and then

00:05:35,120 --> 00:05:43,069
maintained in three point 10 so both the

00:05:39,500 --> 00:05:45,620
tasks are going on for latest kernel as

00:05:43,069 --> 00:05:48,650
well as a less key and on the tool chain

00:05:45,620 --> 00:05:51,740
so GCC for dot main is fully supported

00:05:48,650 --> 00:05:55,130
today and we continue to work on GCC

00:05:51,740 --> 00:05:59,780
till we see a complete migration to the

00:05:55,130 --> 00:06:01,970
tools and compilers from also like we

00:05:59,780 --> 00:06:04,639
work with Google like last year when we

00:06:01,970 --> 00:06:06,050
were here at connect we gave lot of

00:06:04,639 --> 00:06:07,849
presentations and there were other

00:06:06,050 --> 00:06:10,520
sessions that we presented at Android

00:06:07,849 --> 00:06:13,159
builders and we also worked closely with

00:06:10,520 --> 00:06:16,130
Google Android team to identify the

00:06:13,159 --> 00:06:18,380
projects in external folder like if you

00:06:16,130 --> 00:06:21,770
go to Android external project like you

00:06:18,380 --> 00:06:26,180
see more than 170 + Android projects

00:06:21,770 --> 00:06:28,699
which are which are derived from Linux

00:06:26,180 --> 00:06:33,080
user space but they are being used in

00:06:28,699 --> 00:06:36,050
Android for like if you see open SSL or

00:06:33,080 --> 00:06:38,419
any codecs or so on so they are being

00:06:36,050 --> 00:06:40,460
used in Android as well so we worked

00:06:38,419 --> 00:06:43,159
with Google in order to migrate these

00:06:40,460 --> 00:06:45,830
projects to the latest versions so there

00:06:43,159 --> 00:06:49,849
were these projects were on with older

00:06:45,830 --> 00:06:53,449
version so we we validated it for latest

00:06:49,849 --> 00:06:56,539
versions and they so we migrated

00:06:53,449 --> 00:06:58,219
basically to the Google pulled all the

00:06:56,539 --> 00:07:01,520
latest versions of these external

00:06:58,219 --> 00:07:05,030
projects in Android AOSP with that we

00:07:01,520 --> 00:07:07,460
get all the support for a v8 and latest

00:07:05,030 --> 00:07:09,650
bug fixes and so on so the performance

00:07:07,460 --> 00:07:12,020
improvements like moving from sqlite

00:07:09,650 --> 00:07:14,510
which was older version to the newer

00:07:12,020 --> 00:07:17,050
version of SQLite act just moving to the

00:07:14,510 --> 00:07:19,300
latest version gave like 24

00:07:17,050 --> 00:07:20,710
and improvement in SQLite itself so

00:07:19,300 --> 00:07:23,229
similarly there were many improvements

00:07:20,710 --> 00:07:25,509
than in external projects which were not

00:07:23,229 --> 00:07:28,629
being picked in Android a USB so which

00:07:25,509 --> 00:07:31,659
were pulled so and also like a v8 work

00:07:28,629 --> 00:07:33,610
was being pulled in this so yeah

00:07:31,659 --> 00:07:36,729
definitely thanks to him for working

00:07:33,610 --> 00:07:38,530
with the Google and partners like planer

00:07:36,729 --> 00:07:43,060
and others forgetting all the RV eight

00:07:38,530 --> 00:07:46,629
stuff into AOSP on Lenora site like we

00:07:43,060 --> 00:07:49,210
continued to working on a v8 Android for

00:07:46,629 --> 00:07:53,620
a long time like we started with Android

00:07:49,210 --> 00:07:56,979
64-bit and 32-bit you the 32-bit user

00:07:53,620 --> 00:07:58,900
space with the 64-bit kernel so we we

00:07:56,979 --> 00:08:02,740
were releasing this to our members and

00:07:58,900 --> 00:08:05,229
to harm to stabilize the stabilize the

00:08:02,740 --> 00:08:08,349
tunnel side first because we wanted to

00:08:05,229 --> 00:08:11,139
ever validate Android user space on a

00:08:08,349 --> 00:08:13,900
64-bit kernel so that activity continued

00:08:11,139 --> 00:08:16,300
for us for almost a year and where we

00:08:13,900 --> 00:08:18,159
were finding cts issues where we were

00:08:16,300 --> 00:08:20,020
finding lot of framework issues and so

00:08:18,159 --> 00:08:23,080
on where we need will be used to hack

00:08:20,020 --> 00:08:25,270
basically so those patches were not in

00:08:23,080 --> 00:08:28,180
us because they were almost like hacks

00:08:25,270 --> 00:08:30,849
but the work was really hard for us to

00:08:28,180 --> 00:08:33,459
keep Android maintained for 64-bit

00:08:30,849 --> 00:08:36,190
kernel so after doing that we migrated

00:08:33,459 --> 00:08:38,770
to like when Google started supporting

00:08:36,190 --> 00:08:41,680
Android for 64-bit user space so we

00:08:38,770 --> 00:08:45,399
started working on the AOSP master and

00:08:41,680 --> 00:08:47,649
the like work on a USB master with the

00:08:45,399 --> 00:08:50,529
64-bit user space and 64-bit kernel

00:08:47,649 --> 00:08:53,850
picked up very fast and it was completed

00:08:50,529 --> 00:08:56,829
within no time so it was very quick and

00:08:53,850 --> 00:09:00,190
after the launch of this Juno platform

00:08:56,829 --> 00:09:02,440
so we are now actually working on the

00:09:00,190 --> 00:09:05,770
hardware but earlier we used to work on

00:09:02,440 --> 00:09:08,079
fast models of liquor and a v8 soft

00:09:05,770 --> 00:09:10,750
models for Android as well so lot of

00:09:08,079 --> 00:09:12,850
work has been done as I said like on LSK

00:09:10,750 --> 00:09:14,709
keeping their less stable and also on

00:09:12,850 --> 00:09:17,350
the upstream stuff blowing a lot of

00:09:14,709 --> 00:09:21,310
upstream work keeping Android maintained

00:09:17,350 --> 00:09:23,560
for migrating moving GCC versions so for

00:09:21,310 --> 00:09:25,170
dot 9 and the Swan like earlier weaved

00:09:23,560 --> 00:09:28,680
was product 8

00:09:25,170 --> 00:09:31,589
or 3d graphic soap from lenoir of like

00:09:28,680 --> 00:09:34,410
every month here we make a release which

00:09:31,589 --> 00:09:37,050
is like pre-integrated release from like

00:09:34,410 --> 00:09:39,660
we have our mural release which we look

00:09:37,050 --> 00:09:41,850
at and if there are any major bug fixes

00:09:39,660 --> 00:09:43,709
and value adds we pick those things we

00:09:41,850 --> 00:09:46,320
pick Cardinal changes from upstream we

00:09:43,709 --> 00:09:48,449
integrate into LSK we have money drivers

00:09:46,320 --> 00:09:52,139
from arm which we integrate it to AOSP

00:09:48,449 --> 00:09:55,079
and then we have every month we pull the

00:09:52,139 --> 00:09:58,620
latest USB master and then we run a

00:09:55,079 --> 00:10:01,190
thorough CTS test suit on this and then

00:09:58,620 --> 00:10:05,279
also individual tests or to validate

00:10:01,190 --> 00:10:07,949
Bionic and codecs and so on so after

00:10:05,279 --> 00:10:10,170
validating and then pre-integration so

00:10:07,949 --> 00:10:12,449
this release is being done every month

00:10:10,170 --> 00:10:15,000
so it should help our members to

00:10:12,449 --> 00:10:19,019
baseline their software on our releases

00:10:15,000 --> 00:10:22,050
and start developing their code base so

00:10:19,019 --> 00:10:24,810
and also we focused on few optimization

00:10:22,050 --> 00:10:29,370
areas which were very key like with our

00:10:24,810 --> 00:10:31,680
v8 we get like openssl was more

00:10:29,370 --> 00:10:33,500
optimized for aam be eight and that

00:10:31,680 --> 00:10:36,630
really gave a significant improvement

00:10:33,500 --> 00:10:38,519
now a few areas we optimized for neon

00:10:36,630 --> 00:10:42,180
but still there is a lot of worker too

00:10:38,519 --> 00:10:44,130
good can be done in that sense and we

00:10:42,180 --> 00:10:46,829
also enabled selinux by default and

00:10:44,130 --> 00:10:49,410
there were few issues with that and we

00:10:46,829 --> 00:10:51,449
were able to resolve and our android

00:10:49,410 --> 00:10:54,990
default releases have AC linux enabled

00:10:51,449 --> 00:10:58,110
of builds no so this is what was done at

00:10:54,990 --> 00:11:01,640
linaro with respect to like till 14 dot

00:10:58,110 --> 00:11:06,000
08 like which was our previous release

00:11:01,640 --> 00:11:08,160
so we continue to work on that so so

00:11:06,000 --> 00:11:10,560
this is what has happened till date and

00:11:08,160 --> 00:11:13,800
what way do we want to focus next so as

00:11:10,560 --> 00:11:15,860
i said like i have very few basic ideas

00:11:13,800 --> 00:11:19,380
where we think we should put our effort

00:11:15,860 --> 00:11:22,170
knowing that Google Android team is also

00:11:19,380 --> 00:11:24,750
working on multiple frameworks and also

00:11:22,170 --> 00:11:26,790
working on el and there is lot of things

00:11:24,750 --> 00:11:29,819
which were announced at Google i/o like

00:11:26,790 --> 00:11:32,160
project Volta and so on so lot of work

00:11:29,819 --> 00:11:35,120
is happening at Android teams in Google

00:11:32,160 --> 00:11:37,649
for zombie 8 as well as L and so on

00:11:35,120 --> 00:11:38,550
similarly her arm team is also working

00:11:37,649 --> 00:11:41,580
on

00:11:38,550 --> 00:11:43,769
key differentiators phenom v8 so now

00:11:41,580 --> 00:11:47,220
it's our response and our members also

00:11:43,769 --> 00:11:49,740
have like most of our members have L

00:11:47,220 --> 00:11:52,260
access now they are also working on a v8

00:11:49,740 --> 00:11:55,110
so there is also of engineering teams

00:11:52,260 --> 00:11:57,089
working on no actual hardware so if you

00:11:55,110 --> 00:11:59,100
see the development effort is happening

00:11:57,089 --> 00:12:02,339
at Google lat arm at our member so

00:11:59,100 --> 00:12:05,040
Lenora should play something like where

00:12:02,339 --> 00:12:08,040
we go really fix the important pieces

00:12:05,040 --> 00:12:12,329
give some foundation software and also

00:12:08,040 --> 00:12:14,820
see that we we are having some we are

00:12:12,329 --> 00:12:17,760
meeting we are trying to identify and

00:12:14,820 --> 00:12:20,790
fix some key issues for our members and

00:12:17,760 --> 00:12:22,920
the complete arm ecosystem itself we

00:12:20,790 --> 00:12:26,100
don't want to add any redundancy to the

00:12:22,920 --> 00:12:28,829
work that our members or or Google is

00:12:26,100 --> 00:12:31,709
doing like things are being done by some

00:12:28,829 --> 00:12:34,170
team I think we should only try to

00:12:31,709 --> 00:12:36,000
consider that work than doing any

00:12:34,170 --> 00:12:38,399
redundant effort so they're definitely

00:12:36,000 --> 00:12:40,019
that will be one of the key input like

00:12:38,399 --> 00:12:41,610
if you guys are already are doing some

00:12:40,019 --> 00:12:44,339
work and let us know then we can

00:12:41,610 --> 00:12:49,620
actually stop doing that or to focus on

00:12:44,339 --> 00:12:52,079
something else um so I have prepared

00:12:49,620 --> 00:12:54,089
some few items which we think we should

00:12:52,079 --> 00:12:56,579
focus on like first item is definitely

00:12:54,089 --> 00:13:00,000
on Android L so what are we going to do

00:12:56,579 --> 00:13:01,950
on Android L at this point for at lenoir

00:13:00,000 --> 00:13:05,910
oh we don't have sources for Android L

00:13:01,950 --> 00:13:08,250
so we like based on our interactions

00:13:05,910 --> 00:13:11,279
with the Android team and knowing how

00:13:08,250 --> 00:13:14,010
things are going in here SP so one thing

00:13:11,279 --> 00:13:16,950
that we are trying to do is we we are

00:13:14,010 --> 00:13:19,470
trying to be on tip of a AOSP master

00:13:16,950 --> 00:13:22,800
like this is where the changes from el

00:13:19,470 --> 00:13:27,089
are also getting in fact so we are

00:13:22,800 --> 00:13:28,860
trying to be on AOSP if so that we get

00:13:27,089 --> 00:13:32,730
all the changes that are happening for l

00:13:28,860 --> 00:13:35,329
and we validate it every month with LSK

00:13:32,730 --> 00:13:39,870
and other into other pieces of software

00:13:35,329 --> 00:13:43,560
like Molly and graphics and video and so

00:13:39,870 --> 00:13:47,250
on so that is one key thing that we want

00:13:43,560 --> 00:13:51,449
to do like continue to maintain on a USB

00:13:47,250 --> 00:13:52,209
master for a v8 so also keep integrating

00:13:51,449 --> 00:13:55,749
as I said like

00:13:52,209 --> 00:13:57,730
Molly and so on identify issues with the

00:13:55,749 --> 00:14:00,009
3d graphics integration like if there

00:13:57,730 --> 00:14:04,029
are any issues with respect to Bionic

00:14:00,009 --> 00:14:06,910
updates and the run CTS there are still

00:14:04,029 --> 00:14:09,189
few issues with the packages in cts

00:14:06,910 --> 00:14:11,860
which we need which might have to be

00:14:09,189 --> 00:14:13,600
solved so look into those things so keep

00:14:11,860 --> 00:14:18,339
a salinas enabled by default to catch

00:14:13,600 --> 00:14:21,490
any bugs early and the other top item

00:14:18,339 --> 00:14:23,860
that we are also focusing on is like at

00:14:21,490 --> 00:14:27,309
lmg we have identified some list of

00:14:23,860 --> 00:14:31,990
benchmarks which are key for our members

00:14:27,309 --> 00:14:34,420
to run and Harvey ate like as soon as

00:14:31,990 --> 00:14:36,610
the software is up on any rv-8 hardware

00:14:34,420 --> 00:14:40,029
the first thing that members are doing

00:14:36,610 --> 00:14:41,949
or members are interested to do is run

00:14:40,029 --> 00:14:44,290
the benchmark and see what the numbers

00:14:41,949 --> 00:14:46,300
are they compare it with their Humvee

00:14:44,290 --> 00:14:48,069
seven numbers and now v8 numbers and see

00:14:46,300 --> 00:14:50,619
whether really they are seeing these

00:14:48,069 --> 00:14:52,360
performance improvements and so on but

00:14:50,619 --> 00:14:54,879
in order to run that first the benchmark

00:14:52,360 --> 00:14:57,100
itself should run right so there are

00:14:54,879 --> 00:14:59,860
issues that we found that few benchmark

00:14:57,100 --> 00:15:02,199
applications are still not not running

00:14:59,860 --> 00:15:05,529
maybe they are because of software

00:15:02,199 --> 00:15:07,299
compatibility or it might be it might be

00:15:05,529 --> 00:15:10,629
hardware issue or it might be something

00:15:07,299 --> 00:15:12,850
else so we want to identify it up we

00:15:10,629 --> 00:15:14,410
have identified a list of benchmarks

00:15:12,850 --> 00:15:18,369
which we think are important for our

00:15:14,410 --> 00:15:20,290
members not from the results or we are

00:15:18,369 --> 00:15:24,220
not focusing on the results of the

00:15:20,290 --> 00:15:26,410
numbers results we are not focusing on

00:15:24,220 --> 00:15:28,449
the numbers but we are actually trying

00:15:26,410 --> 00:15:30,100
to get the benchmark running itself so

00:15:28,449 --> 00:15:33,339
that way is one of the key item that we

00:15:30,100 --> 00:15:35,259
have for this connect in our hacking

00:15:33,339 --> 00:15:38,350
session so we have couple of tuna boats

00:15:35,259 --> 00:15:40,389
where we want to really try out all

00:15:38,350 --> 00:15:42,100
these stop a few benchmarks and ensure

00:15:40,389 --> 00:15:45,699
that they are working for our members to

00:15:42,100 --> 00:15:47,799
peak so this is one of the to-do items

00:15:45,699 --> 00:15:53,199
at where that I have listed and feel

00:15:47,799 --> 00:15:56,019
free to feel free to reject it and just

00:15:53,199 --> 00:15:57,970
we can focus on something else and on

00:15:56,019 --> 00:16:00,370
Linux I'd like as I was saying there is

00:15:57,970 --> 00:16:02,259
lot of work being done on the upstream

00:16:00,370 --> 00:16:05,350
and there is also a lot of work that is

00:16:02,259 --> 00:16:06,040
done on LSK and also like we need to see

00:16:05,350 --> 00:16:08,620
when

00:16:06,040 --> 00:16:12,639
he moves from three-point in 2 3 4 14 or

00:16:08,620 --> 00:16:15,850
so so this work is completely done by

00:16:12,639 --> 00:16:18,130
our Linux kernel team or Colonel working

00:16:15,850 --> 00:16:21,310
group so upstream work is being handled

00:16:18,130 --> 00:16:23,740
there so you will see I think we have a

00:16:21,310 --> 00:16:25,899
session in lmg lightning talks to

00:16:23,740 --> 00:16:28,089
highlight colonel feature so they will

00:16:25,899 --> 00:16:30,610
get to know more into like where we are

00:16:28,089 --> 00:16:32,529
in each of these new topics on

00:16:30,610 --> 00:16:34,360
three-point and we will continue to

00:16:32,529 --> 00:16:36,100
integrate all the upstream work that is

00:16:34,360 --> 00:16:38,560
happening for colonel so we will try to

00:16:36,100 --> 00:16:41,430
put it back to the front end and we will

00:16:38,560 --> 00:16:43,990
make a release there every month

00:16:41,430 --> 00:16:48,220
three-point 14 I think it is almost

00:16:43,990 --> 00:16:50,470
ready if someone has any doubts that

00:16:48,220 --> 00:16:53,170
maybe we can check it the real estate

00:16:50,470 --> 00:16:55,569
team but we are not migrating unless we

00:16:53,170 --> 00:16:59,470
see that google also migrates to

00:16:55,569 --> 00:17:00,970
three-point 15 or any latest nsk no but

00:16:59,470 --> 00:17:04,290
till then we will continue to be on

00:17:00,970 --> 00:17:08,199
whatever version is being used for us

00:17:04,290 --> 00:17:10,510
pee-on neon optimization so this is one

00:17:08,199 --> 00:17:14,439
area which we which again I want to work

00:17:10,510 --> 00:17:16,540
with arm team like we like we we have

00:17:14,439 --> 00:17:19,240
been doing this task or reviewing these

00:17:16,540 --> 00:17:23,199
neon optimizations with I'm team as well

00:17:19,240 --> 00:17:25,120
so the there are still we find there are

00:17:23,199 --> 00:17:29,559
few areas which can be optimized for

00:17:25,120 --> 00:17:31,480
neon in external projects which can be

00:17:29,559 --> 00:17:36,280
applicable for linux as well as android

00:17:31,480 --> 00:17:38,350
user space so the this is some basic

00:17:36,280 --> 00:17:41,350
list that i have but we need to again i

00:17:38,350 --> 00:17:43,690
will walk through this list with bit

00:17:41,350 --> 00:17:47,260
members as well as our um team to see if

00:17:43,690 --> 00:17:50,500
this really if there is really a gap in

00:17:47,260 --> 00:17:53,110
for neon optimizations in this space and

00:17:50,500 --> 00:17:54,730
if this is applicable and based on this

00:17:53,110 --> 00:17:58,690
we can probably consider this as a

00:17:54,730 --> 00:18:03,309
roadmap item for lmg and work in coming

00:17:58,690 --> 00:18:05,890
months from on Tools definitely there is

00:18:03,309 --> 00:18:09,460
lot of focus now on tools in a limb G

00:18:05,890 --> 00:18:11,049
that we have like form and content they

00:18:09,460 --> 00:18:14,110
have put together like a list of things

00:18:11,049 --> 00:18:17,530
that we have to do for Android so the

00:18:14,110 --> 00:18:19,340
basic the basic requirement here is like

00:18:17,530 --> 00:18:24,050
there are lot of tools in the next

00:18:19,340 --> 00:18:25,910
munity two for the there are a lot of

00:18:24,050 --> 00:18:28,610
tools in Linux community which we can

00:18:25,910 --> 00:18:30,800
bring in for Android as well so we want

00:18:28,610 --> 00:18:33,170
to investigate those tools lot of things

00:18:30,800 --> 00:18:35,030
are already there but we also want to

00:18:33,170 --> 00:18:38,810
see like if there is something good that

00:18:35,030 --> 00:18:41,300
we can leverage from the next part apart

00:18:38,810 --> 00:18:44,240
from that like migrating to GCC Fido

00:18:41,300 --> 00:18:46,640
this is one of the item that we want to

00:18:44,240 --> 00:18:48,740
be focused on as soon as it is out we

00:18:46,640 --> 00:18:52,880
want to continue working on today we are

00:18:48,740 --> 00:18:54,620
picking latest of GCC like Barrow is

00:18:52,880 --> 00:18:56,420
sitting there at the back and he is

00:18:54,620 --> 00:19:00,590
trying to solve the GCC issue for over

00:18:56,420 --> 00:19:03,440
14 dot 09 release so we are on tape on

00:19:00,590 --> 00:19:05,960
the GCC side there now we also did then

00:19:03,440 --> 00:19:08,630
indicate release last month so this was

00:19:05,960 --> 00:19:10,970
based on AOSP master generally if you

00:19:08,630 --> 00:19:14,480
see indicated leases are available every

00:19:10,970 --> 00:19:18,170
three months 24 months time from google

00:19:14,480 --> 00:19:20,600
itself so no the idea here was like arm

00:19:18,170 --> 00:19:22,910
is pushing lot of patches to indicate

00:19:20,600 --> 00:19:24,560
and they are not other they are not

00:19:22,910 --> 00:19:27,290
going to be available for our members to

00:19:24,560 --> 00:19:30,050
test until like three or four months so

00:19:27,290 --> 00:19:33,860
instead we worked on this task of

00:19:30,050 --> 00:19:35,810
pulling ESP master indicate from us

00:19:33,860 --> 00:19:37,820
remastered and trying to get it run on

00:19:35,810 --> 00:19:42,410
the juno hardware development platform

00:19:37,820 --> 00:19:44,540
we using Lenora GCC toolchain so it was

00:19:42,410 --> 00:19:46,790
tough this time for us like barrow had

00:19:44,540 --> 00:19:48,830
to spend again two to three weeks to at

00:19:46,790 --> 00:19:50,860
least two weeks to get it working and it

00:19:48,830 --> 00:19:54,740
was bit hard because lot of things were

00:19:50,860 --> 00:19:56,330
seem to be like broken so we managed to

00:19:54,740 --> 00:19:59,300
fix those things and the release was

00:19:56,330 --> 00:20:01,160
done last month so similar exercises we

00:19:59,300 --> 00:20:03,920
want to do every one month or two months

00:20:01,160 --> 00:20:08,210
to give our members like Utley access to

00:20:03,920 --> 00:20:10,220
indicate for validation purposes so this

00:20:08,210 --> 00:20:12,560
is on in decay and then GCC fired otto

00:20:10,220 --> 00:20:14,450
frank is always an important item for

00:20:12,560 --> 00:20:16,640
all of us we have been discussing this

00:20:14,450 --> 00:20:19,520
for the last two to three connect some

00:20:16,640 --> 00:20:22,100
migrating to plan completely from the

00:20:19,520 --> 00:20:25,040
key requirement there is like we are

00:20:22,100 --> 00:20:29,060
waiting for google to completely move to

00:20:25,040 --> 00:20:31,790
crank and lot of projects are already on

00:20:29,060 --> 00:20:32,600
Clank few projects are not on flying so

00:20:31,790 --> 00:20:35,300
we

00:20:32,600 --> 00:20:37,160
we are talking and making sure that we

00:20:35,300 --> 00:20:40,130
are picking all the latest changes on

00:20:37,160 --> 00:20:45,140
flying so our goal is also to make sure

00:20:40,130 --> 00:20:47,570
that we have we have in-house work being

00:20:45,140 --> 00:20:50,000
done for clang migration so as soon as

00:20:47,570 --> 00:20:51,860
we see similar work being done he neeo

00:20:50,000 --> 00:20:57,080
SP we will be doing the same for our

00:20:51,860 --> 00:20:59,120
religious as well on there is also a

00:20:57,080 --> 00:21:00,590
requirement from our members to work on

00:20:59,120 --> 00:21:03,470
memory usage analysis and optimization

00:21:00,590 --> 00:21:06,290
so I pulled this slide from one of our

00:21:03,470 --> 00:21:09,170
discussions that tom is having email FG

00:21:06,290 --> 00:21:12,500
so this is basically to see you when we

00:21:09,170 --> 00:21:15,290
have clang and GCC so what what issues

00:21:12,500 --> 00:21:17,480
so this is mainly profile and benchmark

00:21:15,290 --> 00:21:19,700
and see if there are how the memory

00:21:17,480 --> 00:21:21,770
usage and memory footprint is between

00:21:19,700 --> 00:21:24,230
these two compilers and also like do

00:21:21,770 --> 00:21:26,570
compiler optimization level analysis and

00:21:24,230 --> 00:21:29,270
see like where they are so this task is

00:21:26,570 --> 00:21:30,950
more of like profiling and benchmarking

00:21:29,270 --> 00:21:33,140
and finding the bottlenecks in memory

00:21:30,950 --> 00:21:36,020
and finding the bottlenecks in the

00:21:33,140 --> 00:21:39,710
memory footprint and use it as such so

00:21:36,020 --> 00:21:41,360
this task he is given a high importance

00:21:39,710 --> 00:21:44,120
so we need to really look into what

00:21:41,360 --> 00:21:46,850
exactly what exact tools we would use

00:21:44,120 --> 00:21:48,950
for measuring the performance and how do

00:21:46,850 --> 00:21:51,230
we produce the results and how do we

00:21:48,950 --> 00:21:53,660
infer the results basically and say that

00:21:51,230 --> 00:21:55,640
is very important whether there is any

00:21:53,660 --> 00:21:57,470
scope for improvement and if it is then

00:21:55,640 --> 00:22:02,660
we need to really go and look into those

00:21:57,470 --> 00:22:04,970
areas as well so I had a question like

00:22:02,660 --> 00:22:07,730
if there is any requirement for us to

00:22:04,970 --> 00:22:11,480
look at 64 and 32-bit addressing from

00:22:07,730 --> 00:22:14,110
Android image as such maybe I will

00:22:11,480 --> 00:22:17,480
discuss it offline with somebody on

00:22:14,110 --> 00:22:21,200
power and boot like we are waiting for

00:22:17,480 --> 00:22:23,450
Volta things to stabilize in android USP

00:22:21,200 --> 00:22:25,760
and get released so until it is released

00:22:23,450 --> 00:22:28,520
we don't know exactly what to be done in

00:22:25,760 --> 00:22:31,700
project Volta so we all the information

00:22:28,520 --> 00:22:34,580
that we have is basically like on the

00:22:31,700 --> 00:22:38,750
specs and things that will really not

00:22:34,580 --> 00:22:40,640
help us to make a task for us to work on

00:22:38,750 --> 00:22:42,560
so we we generally want to wait there

00:22:40,640 --> 00:22:45,740
and see what exactly is being done in

00:22:42,560 --> 00:22:46,490
USP so other thing is like butum

00:22:45,740 --> 00:22:48,590
investigation

00:22:46,490 --> 00:22:51,350
we did a thorough investigation of good

00:22:48,590 --> 00:22:54,920
time and measurements last year and we

00:22:51,350 --> 00:22:56,360
presented that connect last year and we

00:22:54,920 --> 00:23:00,070
found that a lot of work was being done

00:22:56,360 --> 00:23:03,380
a lot of time was being fooled by zygote

00:23:00,070 --> 00:23:07,100
now definitely there are lot of areas

00:23:03,380 --> 00:23:09,170
which can be a lot of frameworks and

00:23:07,100 --> 00:23:12,710
modifications can be done to get the

00:23:09,170 --> 00:23:14,600
boob them optimizations but they look

00:23:12,710 --> 00:23:17,360
from our understanding these things will

00:23:14,600 --> 00:23:20,059
not end up in USP because there will be

00:23:17,360 --> 00:23:22,429
like a lot of hacks required so we have

00:23:20,059 --> 00:23:24,710
an app note that we implemented last

00:23:22,429 --> 00:23:27,620
year which shows like what you can do to

00:23:24,710 --> 00:23:30,350
get the bottom optimization reduced so

00:23:27,620 --> 00:23:33,740
it is a application note that we

00:23:30,350 --> 00:23:35,360
released last year itself but we then

00:23:33,740 --> 00:23:38,210
generally don't want to do it because

00:23:35,360 --> 00:23:40,429
they you can't get that sources into

00:23:38,210 --> 00:23:43,190
AOSP so we just want to recommend like

00:23:40,429 --> 00:23:46,429
how you can achieve the best impossible

00:23:43,190 --> 00:23:49,700
for your products the other thing that

00:23:46,429 --> 00:23:52,130
we are looking at is which again has to

00:23:49,700 --> 00:23:55,340
be further discussed at LMG you see

00:23:52,130 --> 00:23:57,650
basically is to see if we can get tax on

00:23:55,340 --> 00:24:00,410
ice kind of thing ported for android so

00:23:57,650 --> 00:24:03,440
this is one of the discussions that the

00:24:00,410 --> 00:24:08,480
term will be having in deep dive with

00:24:03,440 --> 00:24:09,890
hell mgc on the other things like on the

00:24:08,480 --> 00:24:12,679
multimedia codecs again I need to

00:24:09,890 --> 00:24:15,020
discuss this with Frank at the shook

00:24:12,679 --> 00:24:16,970
here from and Google basically to

00:24:15,020 --> 00:24:21,500
understand like if there is so one thing

00:24:16,970 --> 00:24:25,160
that I feel is I took this note from the

00:24:21,500 --> 00:24:27,230
media codecs a page that Android

00:24:25,160 --> 00:24:29,720
maintain sub from an application

00:24:27,230 --> 00:24:33,050
developer point of view they definitely

00:24:29,720 --> 00:24:35,290
need multimedia codecs support to in

00:24:33,050 --> 00:24:38,120
order to test and validate their

00:24:35,290 --> 00:24:40,340
applications but if we see from our

00:24:38,120 --> 00:24:42,380
members they'll basically have lot of

00:24:40,340 --> 00:24:44,690
hardware accelerators for each of these

00:24:42,380 --> 00:24:46,340
products so in the end product it is the

00:24:44,690 --> 00:24:49,160
hardware accelerated products which will

00:24:46,340 --> 00:24:50,570
eventually go and will be used but from

00:24:49,160 --> 00:24:52,670
the development point of view like when

00:24:50,570 --> 00:24:54,320
I am developing some app or when I am

00:24:52,670 --> 00:24:57,559
testing some framework or when I am

00:24:54,320 --> 00:24:59,419
doing any active development if it is

00:24:57,559 --> 00:25:00,340
broken because the hardware accelerator

00:24:59,419 --> 00:25:02,500
is not there

00:25:00,340 --> 00:25:05,169
it will actually stop my work as well so

00:25:02,500 --> 00:25:07,570
in order to facilitate that work we

00:25:05,169 --> 00:25:11,740
basically want to have multimedia codecs

00:25:07,570 --> 00:25:13,929
completely enabled optimized for a v8 so

00:25:11,740 --> 00:25:16,360
this is one task that we are looking at

00:25:13,929 --> 00:25:18,429
if we really want to I think most

00:25:16,360 --> 00:25:20,529
majority of these codecs are already

00:25:18,429 --> 00:25:23,230
running for our v8 and some of them can

00:25:20,529 --> 00:25:25,779
be improved and optimized for a v8 with

00:25:23,230 --> 00:25:28,210
Liam so that is one exercise which we

00:25:25,779 --> 00:25:30,429
want to do apart from that like we

00:25:28,210 --> 00:25:34,029
worked closely with arm on identifying

00:25:30,429 --> 00:25:35,919
some automated the test suit for

00:25:34,029 --> 00:25:38,049
multimedia codecs this has come up

00:25:35,919 --> 00:25:39,640
really well like last six months back

00:25:38,049 --> 00:25:41,710
when we were discussing I was not very

00:25:39,640 --> 00:25:44,950
sure like how we are going to do this in

00:25:41,710 --> 00:25:46,750
terms of automation but it has been done

00:25:44,950 --> 00:25:49,870
and it has been done very good like

00:25:46,750 --> 00:25:51,760
there was an assignee from broadcom

00:25:49,870 --> 00:25:54,039
Edmond and Ashok they worked together to

00:25:51,760 --> 00:25:56,649
come up with this automated media test

00:25:54,039 --> 00:25:59,529
soup so this has been used for our

00:25:56,649 --> 00:26:02,140
linaro multimedia testing then we plan

00:25:59,529 --> 00:26:05,289
to continue improving these tests so

00:26:02,140 --> 00:26:08,500
this is basically done as with respect

00:26:05,289 --> 00:26:09,940
to mu Phi some so you run a known sample

00:26:08,500 --> 00:26:12,250
and then on an access device or

00:26:09,940 --> 00:26:14,830
something collect the output and then

00:26:12,250 --> 00:26:16,210
compare the same results on homme v8 and

00:26:14,830 --> 00:26:20,950
see if you are really getting similar

00:26:16,210 --> 00:26:22,690
md5sum so that will give you the codecs

00:26:20,950 --> 00:26:24,760
are running fine in an automated

00:26:22,690 --> 00:26:26,679
environment then just looking at the

00:26:24,760 --> 00:26:29,679
screen or some or hearing to audio

00:26:26,679 --> 00:26:32,049
itself so this has come out really well

00:26:29,679 --> 00:26:33,909
and we plan to improve this suit and it

00:26:32,049 --> 00:26:36,940
is available for our members to download

00:26:33,909 --> 00:26:38,830
from linaro android user space test so

00:26:36,940 --> 00:26:41,919
we have Colonel tests as well as user

00:26:38,830 --> 00:26:43,870
space tests so these tests repository is

00:26:41,919 --> 00:26:45,669
being maintained and if any of our

00:26:43,870 --> 00:26:47,620
members are interested to participate in

00:26:45,669 --> 00:26:49,360
this they're more welcome and also like

00:26:47,620 --> 00:26:51,309
if there are any other user space tested

00:26:49,360 --> 00:26:54,010
they want to contribute or maintain it

00:26:51,309 --> 00:26:56,350
so they can publish it or sup stream it

00:26:54,010 --> 00:26:59,260
here so we could get maintained for all

00:26:56,350 --> 00:27:02,110
of us so if in your organization's you

00:26:59,260 --> 00:27:04,179
you have any Android validation or test

00:27:02,110 --> 00:27:06,159
that you want to make it public or want

00:27:04,179 --> 00:27:07,870
to find a better portal for those

00:27:06,159 --> 00:27:11,919
userspace tests I think this is the

00:27:07,870 --> 00:27:14,419
right thing to do so

00:27:11,919 --> 00:27:17,599
other thing is like on builds and

00:27:14,419 --> 00:27:20,899
validation so I may I I was this is

00:27:17,599 --> 00:27:22,759
definitely a knotted right list to work

00:27:20,899 --> 00:27:25,489
with our bills team this is going to be

00:27:22,759 --> 00:27:27,859
very risky to prepare so many bills but

00:27:25,489 --> 00:27:30,559
I was just thinking like what other

00:27:27,859 --> 00:27:33,649
builds apart from LSK and USB master

00:27:30,559 --> 00:27:36,109
will help our members in terms of

00:27:33,649 --> 00:27:38,239
validation like will AOSP master and

00:27:36,109 --> 00:27:41,419
upstream colonel be the right build that

00:27:38,239 --> 00:27:43,909
we need to have like by build I mean at

00:27:41,419 --> 00:27:45,919
linaro we have automated build system

00:27:43,909 --> 00:27:48,710
and automated validation system so this

00:27:45,919 --> 00:27:50,509
is one of our good infrastructure that

00:27:48,710 --> 00:27:52,519
we have that is available for our

00:27:50,509 --> 00:27:54,879
members so if there is a hardware

00:27:52,519 --> 00:27:58,460
platform you can put it in our lava and

00:27:54,879 --> 00:28:00,679
have the build setup so on daily basis

00:27:58,460 --> 00:28:02,479
your build will get generated and then

00:28:00,679 --> 00:28:04,879
it will automatically get tested and you

00:28:02,479 --> 00:28:07,429
will see the results in the dashboard so

00:28:04,879 --> 00:28:10,369
with this we can basically try to catch

00:28:07,429 --> 00:28:12,919
any books that are there on daily basis

00:28:10,369 --> 00:28:15,499
or weekly basis whenever we need so in

00:28:12,919 --> 00:28:17,059
that build like I was thinking what

00:28:15,499 --> 00:28:18,830
combination should be basically try

00:28:17,059 --> 00:28:21,139
should we try GCC for not mine as well

00:28:18,830 --> 00:28:23,299
as clang should we have a bid for

00:28:21,139 --> 00:28:25,820
upstream kernel as well as LSK colonel

00:28:23,299 --> 00:28:29,119
today we are only running AOSP master

00:28:25,820 --> 00:28:32,239
and illus k so similarly we can add more

00:28:29,119 --> 00:28:36,799
builds if we want to focus on so this is

00:28:32,239 --> 00:28:39,499
one area that we can explore so also

00:28:36,799 --> 00:28:42,139
like as I was saying running benchmarks

00:28:39,499 --> 00:28:43,909
and profiling gaps is one the thing that

00:28:42,139 --> 00:28:47,779
we are also looking at implementing a

00:28:43,909 --> 00:28:49,249
new audio video codec testing is also an

00:28:47,779 --> 00:28:52,669
area that we are looking at from

00:28:49,249 --> 00:28:55,159
validation point of view so this is the

00:28:52,669 --> 00:28:57,289
list I had which I said like have

00:28:55,159 --> 00:28:59,119
populated based on our discussions and

00:28:57,289 --> 00:29:01,489
the member interest and also seeing that

00:28:59,119 --> 00:29:04,729
we are not doing any redundant work with

00:29:01,489 --> 00:29:06,769
other teams across our own ecosystem so

00:29:04,729 --> 00:29:09,080
if there is anything that you think

00:29:06,769 --> 00:29:11,149
should be added into our list of to do

00:29:09,080 --> 00:29:13,580
for rom be eight will be more welcome to

00:29:11,149 --> 00:29:15,679
at those if you think some of these

00:29:13,580 --> 00:29:17,629
things are not relevant or we need not

00:29:15,679 --> 00:29:20,299
focus on these things please feel free

00:29:17,629 --> 00:29:22,629
to update that as well we can consider

00:29:20,299 --> 00:29:22,629
that

00:29:22,679 --> 00:30:10,440
so I'm open for questions hey Jonathan

00:29:34,570 --> 00:30:14,380
oh you so we ran we ran multiple

00:30:10,440 --> 00:30:17,020
applications so we ran around 50 to 60

00:30:14,380 --> 00:30:20,169
different apps last month and we found

00:30:17,020 --> 00:30:21,640
like few of them were failing we really

00:30:20,169 --> 00:30:24,130
don't know why they were failing so we

00:30:21,640 --> 00:30:26,440
had we were not having access to the

00:30:24,130 --> 00:30:28,960
platform at that time so we have access

00:30:26,440 --> 00:30:30,549
to ambi eight hardware now so we want to

00:30:28,960 --> 00:30:32,409
really investigate that so as I was

00:30:30,549 --> 00:30:34,390
saying like in this week we will be

00:30:32,409 --> 00:30:36,549
returning those applications again and

00:30:34,390 --> 00:30:40,390
seeing that they are related to any

00:30:36,549 --> 00:30:43,480
framework or compeller issue or indique

00:30:40,390 --> 00:30:45,610
or 32 and 64-bit tissues so I had

00:30:43,480 --> 00:30:48,549
general talk with sharpened Blake in one

00:30:45,610 --> 00:30:51,159
of the cultures when one thought that

00:30:48,549 --> 00:30:52,659
servant said was like because some of

00:30:51,159 --> 00:30:57,340
the things were failing for us because

00:30:52,659 --> 00:30:59,020
we were not having complete the list of

00:30:57,340 --> 00:31:01,149
devices that are needed like audio was

00:30:59,020 --> 00:31:02,559
not there for us on Juno or Wi-Fi was

00:31:01,149 --> 00:31:04,659
not there or something so things were

00:31:02,559 --> 00:31:06,370
breaking for that but otherwise in

00:31:04,659 --> 00:31:09,399
generic terms we are not seeing any

00:31:06,370 --> 00:31:13,419
issue in running a 32-bit app or 64-bit

00:31:09,399 --> 00:31:15,340
a form on our v8 so that exercise we

00:31:13,419 --> 00:31:19,240
have done like both in DK apps as well

00:31:15,340 --> 00:31:21,720
as unit you apps we were able to run and

00:31:19,240 --> 00:31:23,980
we didn't find any issue as such but the

00:31:21,720 --> 00:31:26,200
requirement that we are trying to focus

00:31:23,980 --> 00:31:27,580
on is like pulling latest apps from the

00:31:26,200 --> 00:31:29,440
market and seeing with that they are

00:31:27,580 --> 00:31:32,919
working or not working so that part is

00:31:29,440 --> 00:31:36,149
still under in progress you want to add

00:31:32,919 --> 00:31:36,149
to that anything sharp on

00:31:40,049 --> 00:31:46,149
so I actually have a talk about some of

00:31:43,779 --> 00:31:49,379
these type of these stuff on Thursdays

00:31:46,149 --> 00:31:52,330
which I encourage you to participate you

00:31:49,379 --> 00:31:55,089
so but from a platform point of view

00:31:52,330 --> 00:31:57,279
Juno is a development platform another

00:31:55,089 --> 00:32:00,249
device so it doesn't have things like

00:31:57,279 --> 00:32:03,249
Bluetooth or Wi-Fi and so on which are

00:32:00,249 --> 00:32:04,899
mandatory for for a throne but from our

00:32:03,249 --> 00:32:08,559
intention or point of view and the way

00:32:04,899 --> 00:32:11,019
that 32-bit and 64-bit and multi Lee

00:32:08,559 --> 00:32:13,839
works together in android that should be

00:32:11,019 --> 00:32:20,139
no reason for 32-bit applications not

00:32:13,839 --> 00:32:22,209
work on your 64-bit ARM 64 platform so

00:32:20,139 --> 00:32:24,369
there should be no such reason of

00:32:22,209 --> 00:32:26,289
discussing with calcium and most of the

00:32:24,369 --> 00:32:27,820
applications that were failing or

00:32:26,289 --> 00:32:30,909
failing because they were querying SD

00:32:27,820 --> 00:32:34,329
card or wife or a Wi-Fi connection that

00:32:30,909 --> 00:32:35,950
wasn't existing we have a hacking

00:32:34,329 --> 00:32:39,849
session and we have a couple of June

00:32:35,950 --> 00:32:42,059
abort so if you have any issues or want

00:32:39,849 --> 00:32:45,700
to get up to speed with arrow SP and I'm

00:32:42,059 --> 00:32:49,450
64 development feel free to nag million

00:32:45,700 --> 00:32:51,639
or any other member from our team or

00:32:49,450 --> 00:32:55,589
from kissimmee steam and we'll be able

00:32:51,639 --> 00:32:55,589
to help thanks

00:33:06,960 --> 00:33:22,660
and no more questions so do you have any

00:33:19,810 --> 00:33:25,780
benchmarks course comparison like to be

00:33:22,660 --> 00:33:32,230
seven and v8 so what is the you know

00:33:25,780 --> 00:33:34,920
what is the cpu speed you know you have

00:33:32,230 --> 00:33:40,210
any numbers or any of the benchmarks

00:33:34,920 --> 00:33:43,030
like quadrant are on total we generally

00:33:40,210 --> 00:33:45,910
don't publish benchmark numbers as I was

00:33:43,030 --> 00:33:49,330
saying like our main goal is to run get

00:33:45,910 --> 00:33:53,050
quadrant running on a v8 so then we let

00:33:49,330 --> 00:33:54,940
members run their own between their own

00:33:53,050 --> 00:33:57,460
Association compare the results so

00:33:54,940 --> 00:34:00,670
personally we don't maintain these

00:33:57,460 --> 00:34:02,290
benchmark numbers otherwise the

00:34:00,670 --> 00:34:04,240
definitely from arm you will get a lot

00:34:02,290 --> 00:34:08,050
of benchmarking and these type of

00:34:04,240 --> 00:34:09,520
numbers for his CPU specific or neon

00:34:08,050 --> 00:34:18,940
specific and these things you should be

00:34:09,520 --> 00:34:22,240
able to find so this is related to

00:34:18,940 --> 00:34:24,250
memory so when you compare a 64-bit

00:34:22,240 --> 00:34:27,400
instructions attend 32-bit instruction

00:34:24,250 --> 00:34:29,620
set so only you will gain in that data

00:34:27,400 --> 00:34:37,630
section right so is there any other

00:34:29,620 --> 00:34:40,000
sections you will gain it memory or a

00:34:37,630 --> 00:34:52,510
64-bit instruction set and 32-bit

00:34:40,000 --> 00:34:58,330
instruction set so is this a comparison

00:34:52,510 --> 00:35:00,880
between arm and arm 64's architecture so

00:34:58,330 --> 00:35:05,590
there are lots of advantages of arm 64

00:35:00,880 --> 00:35:10,090
compared to 32-bit arm we have more

00:35:05,590 --> 00:35:13,510
registers the vector floating-point unit

00:35:10,090 --> 00:35:15,550
is mandated for operating systems so the

00:35:13,510 --> 00:35:17,020
ABI won't be so float would be hot flow

00:35:15,550 --> 00:35:19,450
density for

00:35:17,020 --> 00:35:21,820
we have different views of the registers

00:35:19,450 --> 00:35:25,320
so from architectural point of view on

00:35:21,820 --> 00:35:27,730
v8 is a improvement of our visa and

00:35:25,320 --> 00:35:31,270
again I'll be discussing about some of

00:35:27,730 --> 00:35:33,550
these improvements in in the talk I have

00:35:31,270 --> 00:35:38,500
one on Thursday I think it's from zero

00:35:33,550 --> 00:35:41,190
to put an Android I hope this answers

00:35:38,500 --> 00:35:41,190
your question

00:35:51,890 --> 00:35:57,829
so one thing you could do um I should

00:35:55,549 --> 00:36:00,140
mention I'm the person who's been

00:35:57,829 --> 00:36:03,140
working on LP 32 so that could be

00:36:00,140 --> 00:36:13,460
something that linaro can work on for

00:36:03,140 --> 00:36:17,799
android too why not one thing just get

00:36:13,460 --> 00:36:17,799
rid of the last just get rid of 32 then

00:36:23,559 --> 00:36:29,480
the idea is since you guys just

00:36:26,930 --> 00:36:33,170
mentioned you know arm 64 has a lot of

00:36:29,480 --> 00:36:36,890
benefits you know why not support iop 32

00:36:33,170 --> 00:36:40,750
except for the you know let down full of

00:36:36,890 --> 00:36:40,750
having to support a little bit more

00:36:43,119 --> 00:36:55,670
really would it be I don't think it

00:36:45,859 --> 00:36:58,910
would be that much more except for e

00:36:55,670 --> 00:37:20,930
well userland wise yes but Colonel eyes

00:36:58,910 --> 00:37:22,960
you only have one Niels yeah I can see

00:37:20,930 --> 00:37:22,960
that

00:37:27,360 --> 00:37:42,990
I a quick bridge between 64 and 32 but

00:37:41,100 --> 00:37:45,150
if once you've already made the jump 64

00:37:42,990 --> 00:37:46,920
adding it in again when you've already

00:37:45,150 --> 00:37:50,820
got 32 bit to support another

00:37:46,920 --> 00:37:52,980
architected support becomes probably

00:37:50,820 --> 00:38:05,520
more expensive than it than the effort

00:37:52,980 --> 00:38:07,860
justifies so if there are no more

00:38:05,520 --> 00:38:11,790
questions so I just put up the next

00:38:07,860 --> 00:38:15,650
slide for the next presentation so this

00:38:11,790 --> 00:38:15,650
is going to be an interesting session so

00:38:17,990 --> 00:38:24,590
it should start at 12 10 so there is 10

00:38:21,990 --> 00:38:24,590

YouTube URL: https://www.youtube.com/watch?v=uGBra7vg_n8


