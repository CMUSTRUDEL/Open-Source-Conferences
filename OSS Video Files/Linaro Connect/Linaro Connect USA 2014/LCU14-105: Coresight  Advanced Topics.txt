Title: LCU14-105: Coresight  Advanced Topics
Publication date: 2014-09-15
Playlist: Linaro Connect USA 2014
Description: 
	LCU14-105: Coresight  Advanced Topics

---------------------------------------------------

Speaker: Mathieu Poirier
Track: Kernel
Location: Grand Peninsula A, Hyatt Regency San Francisco Airport, Burlingame, CA, United States
---------------------------------------------------

★ Session Summary ★
This session is meant to look at Coresight in deeper details.  The goal is to go ove more advanced concepts that are going beyond the basic traces mechanism such as STMs and how it could be used to interleave messages from the existing kernel trace infrastructure with the Coresight trace stream.  The second part will concentrated on some of the challenges we face such as the configuration of STM trace channels between user and kernel space, the representation of metadata
for trace decoding and the decoding of compressed streams themselves. The presentation will conclude with a use case example and it's associated decoded trace stream.

---------------------------------------------------

★ Resources ★
Zerista: http://lcu14.zerista.com/event/member/137708
Google Event: 
Presentation: 
Video: 
Eatherpad: pad.linaro.org/p/lcu14-105
---------------------------------------------------

★ Event Details ★
Linaro Connect USA - #LCU14
September 15-19th, 2014
Hyatt Regency San Francisco Airport
---------------------------------------------------

&gt; http://www.linaro.org
&gt; http://connect.linaro.org
Captions: 
	00:00:05,349 --> 00:00:45,460
yeah all right

00:00:58,269 --> 00:01:06,830
all right okay so we'll get started on

00:01:05,150 --> 00:01:09,020
this second this is a second portion of

00:01:06,830 --> 00:01:12,619
a presentation on our site here once

00:01:09,020 --> 00:01:17,899
again I have managed to run behind so we

00:01:12,619 --> 00:01:20,479
have half an hour left for an hour long

00:01:17,899 --> 00:01:22,729
presentation so i'll probably be

00:01:20,479 --> 00:01:24,560
overflowing a little bit and skim

00:01:22,729 --> 00:01:27,560
through a side of it quicker as i did

00:01:24,560 --> 00:01:31,009
for the first one but definitely that we

00:01:27,560 --> 00:01:32,990
will see the material that we should

00:01:31,009 --> 00:01:34,670
have seen powerful presentation once

00:01:32,990 --> 00:01:36,830
again i'll have support on this site

00:01:34,670 --> 00:01:41,090
here to help us follow with the

00:01:36,830 --> 00:01:44,420
presentation okay so in the first

00:01:41,090 --> 00:01:46,490
presentation we have seen we found

00:01:44,420 --> 00:01:49,610
introduction on course like you should

00:01:46,490 --> 00:01:52,159
use it for the advantages with it we've

00:01:49,610 --> 00:01:56,270
also talked about framework that when i

00:01:52,159 --> 00:01:59,660
was trying to push upstream some of its

00:01:56,270 --> 00:02:02,840
capabilities we've seen tracing a very

00:01:59,660 --> 00:02:05,420
basic example so this this presentation

00:02:02,840 --> 00:02:07,929
here will go into broader teat

00:02:05,420 --> 00:02:11,120
excellence the problems are the solution

00:02:07,929 --> 00:02:14,290
so all of these these blocks all of

00:02:11,120 --> 00:02:17,090
these that this capability is also

00:02:14,290 --> 00:02:19,610
offering a fair amount of opportunities

00:02:17,090 --> 00:02:23,720
for problems and they are a lot to

00:02:19,610 --> 00:02:27,470
tackle I've also talked about how course

00:02:23,720 --> 00:02:30,230
I can be extended so arm is publishing a

00:02:27,470 --> 00:02:32,209
standard which is what we support but I

00:02:30,230 --> 00:02:35,180
think prevents a vendor from adding your

00:02:32,209 --> 00:02:38,360
own sauce 22 tracers or to the course I

00:02:35,180 --> 00:02:41,330
components and some have done that right

00:02:38,360 --> 00:02:44,150
so the idea is for the framework to be

00:02:41,330 --> 00:02:46,310
used you can talk to these components

00:02:44,150 --> 00:02:48,349
it's not because you have one small

00:02:46,310 --> 00:02:51,110
enhancement in your core site system

00:02:48,349 --> 00:02:54,160
that can't do the framer ping pong so by

00:02:51,110 --> 00:02:56,959
simply writing at the driver or shim for

00:02:54,160 --> 00:02:59,359
that will comply to the framework API

00:02:56,959 --> 00:03:03,200
you can introduce that new functionality

00:02:59,359 --> 00:03:04,129
and use the rest of the course I

00:03:03,200 --> 00:03:06,530
work the same way that you would

00:03:04,129 --> 00:03:08,269
normally have with a standard component

00:03:06,530 --> 00:03:10,720
so this will be the first part of the

00:03:08,269 --> 00:03:13,280
presentation we'll have a bit of a

00:03:10,720 --> 00:03:17,209
porting guide on what to do like things

00:03:13,280 --> 00:03:18,980
to look for and the last last set the

00:03:17,209 --> 00:03:24,080
last the second part of the presentation

00:03:18,980 --> 00:03:29,049
will deal with issues so we'll see we'll

00:03:24,080 --> 00:03:30,769
see the problems with the reservation

00:03:29,049 --> 00:03:35,000
imaginative the channels that are

00:03:30,769 --> 00:03:37,790
exposed by a component like an STM or

00:03:35,000 --> 00:03:40,280
Sdn 500 okay so this is a component that

00:03:37,790 --> 00:03:42,799
will expose in memory areas to different

00:03:40,280 --> 00:03:45,920
devices in the system so how do we go

00:03:42,799 --> 00:03:49,670
about managing that like these early

00:03:45,920 --> 00:03:51,140
challenges for specific components and

00:03:49,670 --> 00:03:53,660
if we're talking about an operating

00:03:51,140 --> 00:03:56,660
system of how do we split that into a

00:03:53,660 --> 00:03:57,910
user space and kernel space trace d

00:03:56,660 --> 00:04:00,260
coatings and we talked up the

00:03:57,910 --> 00:04:02,030
intricacies of trace decoding for the

00:04:00,260 --> 00:04:06,380
first during the first presentation

00:04:02,030 --> 00:04:08,750
right now there's no open source tool

00:04:06,380 --> 00:04:11,989
that yield professional-grade trace

00:04:08,750 --> 00:04:15,019
decoding your course site and we'll

00:04:11,989 --> 00:04:19,910
finish with Colonel interface so how do

00:04:15,019 --> 00:04:21,560
we plug if you want to say co-sited into

00:04:19,910 --> 00:04:24,050
the rest of the colonel what kind of

00:04:21,560 --> 00:04:27,260
interface have you exposed to the

00:04:24,050 --> 00:04:29,479
colonel in regards to course I'm okay so

00:04:27,260 --> 00:04:31,280
I was supposed to give a brief

00:04:29,479 --> 00:04:33,200
introduction of what we've seen in the

00:04:31,280 --> 00:04:36,590
first session I don't think we have the

00:04:33,200 --> 00:04:40,760
time to slide through there go ahead

00:04:36,590 --> 00:04:42,620
right they're all grown up on the

00:04:40,760 --> 00:04:44,360
website now the slides that I have now

00:04:42,620 --> 00:04:46,760
are semantically modify if we learn that

00:04:44,360 --> 00:04:49,220
I've been published but we'll make sure

00:04:46,760 --> 00:04:53,000
that the latest and razor version will

00:04:49,220 --> 00:04:54,800
be published as well okay so yeah first

00:04:53,000 --> 00:04:56,900
presentation will report site car door

00:04:54,800 --> 00:05:02,180
system tracing very good because it's

00:04:56,900 --> 00:05:05,030
not intrusive caters to more complex for

00:05:02,180 --> 00:05:09,919
complex scenarios dem your average day

00:05:05,030 --> 00:05:14,819
to jtag wood and very good for filing

00:05:09,919 --> 00:05:17,590
and final very nasty bugs okay um

00:05:14,819 --> 00:05:19,449
so we've seen this picture in the first

00:05:17,590 --> 00:05:21,460
reputation that's the seat the TC 2

00:05:19,449 --> 00:05:23,949
since we are talking about an advanced

00:05:21,460 --> 00:05:28,150
presentation on coresight let's look at

00:05:23,949 --> 00:05:30,780
a slightly more complex right course I

00:05:28,150 --> 00:05:33,460
diagram this is the judo board so again

00:05:30,780 --> 00:05:36,759
it's a bit more complex but when you're

00:05:33,460 --> 00:05:41,139
looking at the components its kind we

00:05:36,759 --> 00:05:42,490
can easily find our way around so the

00:05:41,139 --> 00:05:44,740
power processor here in system

00:05:42,490 --> 00:05:47,680
controller we have a course like element

00:05:44,740 --> 00:05:49,840
here that is funneled into another

00:05:47,680 --> 00:05:51,699
funnel and then the plumbing of the

00:05:49,840 --> 00:05:55,000
course I components are following all

00:05:51,699 --> 00:05:57,940
the way to TPI you or Nietzsche are all

00:05:55,000 --> 00:06:01,449
right PTR here is component that will

00:05:57,940 --> 00:06:04,840
aggravate the traces of the same applies

00:06:01,449 --> 00:06:06,909
for our two clusters of processors so we

00:06:04,840 --> 00:06:09,639
have a small cluster a big cluster in

00:06:06,909 --> 00:06:11,740
the small cluster for processors all of

00:06:09,639 --> 00:06:16,210
the component all of the trace data are

00:06:11,740 --> 00:06:17,770
funneled the same way they were if you

00:06:16,210 --> 00:06:19,780
remember for the clusters on TC to

00:06:17,770 --> 00:06:22,300
accept that in this case here there's

00:06:19,780 --> 00:06:24,659
more there's also a highlight for across

00:06:22,300 --> 00:06:27,460
Stricker interface roster the new tricks

00:06:24,659 --> 00:06:30,449
that I talked about right in the first

00:06:27,460 --> 00:06:33,729
presentation ok so we can see how

00:06:30,449 --> 00:06:37,240
complex for subsystem can get but again

00:06:33,729 --> 00:06:44,529
the components and the base solution is

00:06:37,240 --> 00:06:47,139
to say ok so reporting guy this part is

00:06:44,529 --> 00:06:49,210
where people who have a course of

00:06:47,139 --> 00:06:52,240
entities that have been modified all

00:06:49,210 --> 00:06:54,400
right I have seen that at least two

00:06:52,240 --> 00:06:58,389
different systems modifications were not

00:06:54,400 --> 00:07:01,210
big but big enough that a special driver

00:06:58,389 --> 00:07:04,659
is needed for that ok of course I

00:07:01,210 --> 00:07:06,130
framework is extensible than nature it's

00:07:04,659 --> 00:07:09,520
really not the end of the world soon

00:07:06,130 --> 00:07:11,919
right a drive before that um so before

00:07:09,520 --> 00:07:14,949
before jumping into the details again

00:07:11,919 --> 00:07:18,849
when you download the code from from an

00:07:14,949 --> 00:07:20,830
hour org enable course site using when

00:07:18,849 --> 00:07:23,529
you configure so of course I tracing

00:07:20,830 --> 00:07:26,680
support under criminal hacking once you

00:07:23,529 --> 00:07:27,969
have that so these are the two to

00:07:26,680 --> 00:07:30,369
configure goals that we have

00:07:27,969 --> 00:07:35,469
we have junior Corsican link and the

00:07:30,369 --> 00:07:37,079
drivers to support etm or PTM okay after

00:07:35,469 --> 00:07:41,049
that as I mentioned in the first

00:07:37,079 --> 00:07:43,539
presentation everything is found on in

00:07:41,049 --> 00:07:46,089
debug FS on your course site and these

00:07:43,539 --> 00:07:48,819
are addresses that are picked up from

00:07:46,089 --> 00:07:51,009
the device all right so on the poor side

00:07:48,819 --> 00:07:53,439
specification is done a device to it

00:07:51,009 --> 00:08:00,279
along with the topology of the linking

00:07:53,439 --> 00:08:03,069
the devices together perfectly okay so

00:08:00,279 --> 00:08:04,629
when I talked about device or a

00:08:03,069 --> 00:08:06,009
specification the correlation between

00:08:04,629 --> 00:08:08,139
the address and the name of the

00:08:06,009 --> 00:08:10,959
components so on the first one and see

00:08:08,139 --> 00:08:13,989
EG p is the map at a specific address

00:08:10,959 --> 00:08:17,769
that's what shows up under debug efsane

00:08:13,989 --> 00:08:20,499
apply for a cheapy airport oh so it's

00:08:17,769 --> 00:08:23,289
very hard to see obviously it's

00:08:20,499 --> 00:08:26,709
impossible to see all the sophistication

00:08:23,289 --> 00:08:30,669
that are coming to the device tree for

00:08:26,709 --> 00:08:33,879
coresight for that simply go to or

00:08:30,669 --> 00:08:36,189
download the code that is on get out one

00:08:33,879 --> 00:08:40,649
hour or there's a document as a

00:08:36,189 --> 00:08:44,220
published part of the the files that are

00:08:40,649 --> 00:08:47,970
in the pack set so all of the bindings

00:08:44,220 --> 00:08:50,740
manatorian or not are found under

00:08:47,970 --> 00:08:53,430
findings on course site so in there

00:08:50,740 --> 00:08:58,209
you'll have examples on how to specify

00:08:53,430 --> 00:09:00,519
nose for course I components topologies

00:08:58,209 --> 00:09:01,990
itself between the components follows a

00:09:00,519 --> 00:09:04,809
brass specification that was developed

00:09:01,990 --> 00:09:06,850
for video for linux so they've made a

00:09:04,809 --> 00:09:10,240
generic enough that can be reused for

00:09:06,850 --> 00:09:13,029
other components so that specification

00:09:10,240 --> 00:09:15,220
is found under binding graphs so I think

00:09:13,029 --> 00:09:17,529
it's worth is about the time to read it

00:09:15,220 --> 00:09:21,339
it's not long but it's fairly inviting

00:09:17,529 --> 00:09:23,470
and everything is worth everything is

00:09:21,339 --> 00:09:25,689
better with an example we have three

00:09:23,470 --> 00:09:29,110
divine through specifications that we've

00:09:25,689 --> 00:09:31,899
done two for legal needle and some which

00:09:29,110 --> 00:09:34,660
are fairly simple systems and a more

00:09:31,899 --> 00:09:36,759
complex one for TC 2 which is the last

00:09:34,660 --> 00:09:41,379
one so again in the patch check that we

00:09:36,759 --> 00:09:43,419
have in on get on our work

00:09:41,379 --> 00:09:53,679
these spots or their as a partner we

00:09:43,419 --> 00:09:56,559
patched it okay so there's a there's a

00:09:53,679 --> 00:09:59,949
very good how to on how to port driver

00:09:56,559 --> 00:10:02,349
to the framework again in a

00:09:59,949 --> 00:10:04,929
documentation section I strongly suggest

00:10:02,349 --> 00:10:10,509
that you have a look before you start in

00:10:04,929 --> 00:10:12,220
down that route I would definitely see

00:10:10,509 --> 00:10:14,679
people sending me drivers for the

00:10:12,220 --> 00:10:18,999
specific components I will gladly with

00:10:14,679 --> 00:10:22,689
you it offer comments and if it is

00:10:18,999 --> 00:10:25,059
working properly and the thing is done

00:10:22,689 --> 00:10:27,939
right I'll add it into the pad set for

00:10:25,059 --> 00:10:30,009
upstream felt very empty yeah so when

00:10:27,939 --> 00:10:31,539
you say that it can customize you need

00:10:30,009 --> 00:10:35,829
to put driver that's that mean you

00:10:31,539 --> 00:10:39,309
expect that only the ETB and the SDM in

00:10:35,829 --> 00:10:41,019
those things have very end to some

00:10:39,309 --> 00:10:42,939
vendor but the core code is always

00:10:41,019 --> 00:10:44,949
saying how would these also need for

00:10:42,939 --> 00:10:46,809
code like all the framework and never

00:10:44,949 --> 00:10:48,999
trade a very word will never change ok

00:10:46,809 --> 00:10:52,029
so the framework calls into API that are

00:10:48,999 --> 00:10:54,220
specific to those system right so enable

00:10:52,029 --> 00:10:55,749
whether you have any TV from three

00:10:54,220 --> 00:10:58,089
different companies you'll have an

00:10:55,749 --> 00:11:00,129
enable for all of them alright so the

00:10:58,089 --> 00:11:02,499
two framework will call enable for all

00:11:00,129 --> 00:11:03,970
of these ETP is except that the API

00:11:02,499 --> 00:11:09,629
total turnaround rules will do the

00:11:03,970 --> 00:11:12,309
enabling for that specific device ok now

00:11:09,629 --> 00:11:15,100
those really easy to interact with the

00:11:12,309 --> 00:11:18,639
CorSec framework of course I was just

00:11:15,100 --> 00:11:21,039
for psychologists right the magic is in

00:11:18,639 --> 00:11:25,389
the course of description and that

00:11:21,039 --> 00:11:27,459
itself is over here I posted it in there

00:11:25,389 --> 00:11:30,749
there's only four or five fields that

00:11:27,459 --> 00:11:33,999
are out of the ordinary so device and

00:11:30,749 --> 00:11:37,329
audio owner this is something that is

00:11:33,999 --> 00:11:38,889
you know you think we just throw the

00:11:37,329 --> 00:11:41,409
Colonel's there's no rocket science

00:11:38,889 --> 00:11:44,649
there everything else happens in the

00:11:41,409 --> 00:11:48,039
four or five of the fields that we will

00:11:44,649 --> 00:11:49,629
see like in the next few slides they saw

00:11:48,039 --> 00:11:51,639
I'm going to leave that up so that's

00:11:49,629 --> 00:11:54,560
when we go through slides kind of know

00:11:51,639 --> 00:11:56,750
where we're at alright so so

00:11:54,560 --> 00:11:58,700
I haven't mentioned that than the first

00:11:56,750 --> 00:12:01,940
presentation but typically a course I

00:11:58,700 --> 00:12:04,130
component is on the end of us it's an

00:12:01,940 --> 00:12:06,350
and book driver to start so now the

00:12:04,130 --> 00:12:08,900
device to start with okay it's got a

00:12:06,350 --> 00:12:10,760
different and by the device ID but in a

00:12:08,900 --> 00:12:15,980
sense of acts exactly like any other

00:12:10,760 --> 00:12:18,080
handle device so part of your pro

00:12:15,980 --> 00:12:20,480
routine for an avid of ice you would

00:12:18,080 --> 00:12:22,820
have foresight register and course i

00:12:20,480 --> 00:12:24,800
under mr. we'll see an example on that

00:12:22,820 --> 00:12:30,800
later in the presentation where we put

00:12:24,800 --> 00:12:33,470
everything together okay um I talked

00:12:30,800 --> 00:12:35,290
about amba device have a driver

00:12:33,470 --> 00:12:38,510
typically when riding in an with driver

00:12:35,290 --> 00:12:41,000
specify the ID to be found out again the

00:12:38,510 --> 00:12:46,070
bus this would be here so when you're

00:12:41,000 --> 00:12:47,510
Pro be a component idea address on you

00:12:46,070 --> 00:12:49,400
have a bus from the command line using

00:12:47,510 --> 00:12:52,580
Devlin to for instance you should be

00:12:49,400 --> 00:12:54,830
finding a number looks something similar

00:12:52,580 --> 00:12:58,370
like this one here simply added to an M

00:12:54,830 --> 00:13:01,490
ID structured be that structure to an mo

00:12:58,370 --> 00:13:04,370
driver again very simple not the end of

00:13:01,490 --> 00:13:07,960
the world right all you need is the name

00:13:04,370 --> 00:13:11,680
and owner a pro and a roof routine and

00:13:07,960 --> 00:13:16,580
reference your am of ID that you have

00:13:11,680 --> 00:13:18,800
declared just above and following their

00:13:16,580 --> 00:13:20,750
normal instantiation module in it module

00:13:18,800 --> 00:13:22,220
exit part of that you're gonna pop

00:13:20,750 --> 00:13:24,680
you're going to call the Ambo driver

00:13:22,220 --> 00:13:27,940
routines just like any other driver

00:13:24,680 --> 00:13:30,380
right this is extremely something okay

00:13:27,940 --> 00:13:34,120
where your site registered course I

00:13:30,380 --> 00:13:37,370
understand what happened is these two

00:13:34,120 --> 00:13:40,310
program remove okay so so the foundation

00:13:37,370 --> 00:13:45,050
to call and start whenever driver is

00:13:40,310 --> 00:13:50,270
fairly busy right at most three lines

00:13:45,050 --> 00:13:52,520
the very most okay so as I said let's go

00:13:50,270 --> 00:13:57,950
through the fields of that structure

00:13:52,520 --> 00:14:00,890
vert plate alright so the first two

00:13:57,950 --> 00:14:03,830
probably easy the title and the step

00:14:00,890 --> 00:14:05,810
type the type is just what is it you

00:14:03,830 --> 00:14:08,240
talked about the source sink in link and

00:14:05,810 --> 00:14:11,060
cross trigger matrix and cross rigor

00:14:08,240 --> 00:14:12,740
interface right these this is where they

00:14:11,060 --> 00:14:14,690
are this is what you would specify what

00:14:12,740 --> 00:14:19,520
it is so the framework knows what it's

00:14:14,690 --> 00:14:21,920
dealing with okay ah very easy one of

00:14:19,520 --> 00:14:24,230
these one of these five here link see

00:14:21,920 --> 00:14:28,820
those would be for a device like a TMC

00:14:24,230 --> 00:14:32,630
that can act as a fifo in the CorSec

00:14:28,820 --> 00:14:36,830
system or as a sink just using the five

00:14:32,630 --> 00:14:39,860
old memory as an ETD buffer okay some

00:14:36,830 --> 00:14:42,800
type well it's simply a specification on

00:14:39,860 --> 00:14:46,430
what a further specification on what the

00:14:42,800 --> 00:14:48,170
Taipings there are a few I will not go

00:14:46,430 --> 00:14:51,200
to all of the specifics here but they're

00:14:48,170 --> 00:14:53,630
pretty easy to pick out a simply look at

00:14:51,200 --> 00:14:57,740
little sports like not H to find out

00:14:53,630 --> 00:15:05,330
exactly what they are but again fairly

00:14:57,740 --> 00:15:08,540
easy to pick out okay operations Deepak

00:15:05,330 --> 00:15:11,630
was asking about generic versus specific

00:15:08,540 --> 00:15:14,329
all of the generic operations pertaining

00:15:11,630 --> 00:15:18,260
to any type of components are found in

00:15:14,329 --> 00:15:21,680
course like operations right so save

00:15:18,260 --> 00:15:23,870
link and source all of them have

00:15:21,680 --> 00:15:26,779
specific operation that the framework

00:15:23,870 --> 00:15:29,240
wants to see you naked right what scenes

00:15:26,779 --> 00:15:33,620
then she ate otherwise it might not work

00:15:29,240 --> 00:15:38,360
program okay so these would be the

00:15:33,620 --> 00:15:39,649
generic part of the components all of

00:15:38,360 --> 00:15:42,170
these are better than the course I

00:15:39,649 --> 00:15:52,640
operations and based on the types of to

00:15:42,170 --> 00:15:54,709
instantiate the right pointer okay where

00:15:52,640 --> 00:15:57,290
the interesting part happened is in the

00:15:54,709 --> 00:16:00,140
debug operation this would be the

00:15:57,290 --> 00:16:03,110
specific part of a specified by a

00:16:00,140 --> 00:16:05,209
manufacturer or enhancement that someone

00:16:03,110 --> 00:16:08,690
would have done all right in the earlier

00:16:05,209 --> 00:16:12,529
slide we have seen all of the specifics

00:16:08,690 --> 00:16:16,060
that pertain to an entry in debug FS

00:16:12,529 --> 00:16:18,920
right these entries are added via a

00:16:16,060 --> 00:16:20,690
debug FS entry like this okay everything

00:16:18,920 --> 00:16:21,690
that is specific to a component that is

00:16:20,690 --> 00:16:29,640
not generic

00:16:21,690 --> 00:16:31,830
goes in there right so we have a macro

00:16:29,640 --> 00:16:34,770
that might change in the next few weeks

00:16:31,830 --> 00:16:36,330
because greatest commented or asked me

00:16:34,770 --> 00:16:40,080
to do something different here for now

00:16:36,330 --> 00:16:41,910
this is how it is i use a mac co which

00:16:40,080 --> 00:16:45,330
will there's tons of example in the co

00:16:41,910 --> 00:16:49,140
that was already published on the macro

00:16:45,330 --> 00:16:51,780
will simply instantiate the mode and the

00:16:49,140 --> 00:16:54,630
specific file operation has found in

00:16:51,780 --> 00:16:56,700
generic occur everywhere d magnet will

00:16:54,630 --> 00:16:58,590
invent all that into specific fields

00:16:56,700 --> 00:17:02,730
that are fed to the raid null-terminated

00:16:58,590 --> 00:17:05,730
police and that array is d by FS

00:17:02,730 --> 00:17:07,949
operation and found in the second to

00:17:05,730 --> 00:17:09,860
last field will be there right all the

00:17:07,949 --> 00:17:16,530
specifics that we change without to of

00:17:09,860 --> 00:17:20,579
components will go into that and last

00:17:16,530 --> 00:17:25,470
but not least module owner that's that's

00:17:20,579 --> 00:17:30,420
classic the device is taken from the

00:17:25,470 --> 00:17:33,270
album driver structure I was Yammer

00:17:30,420 --> 00:17:34,500
device structure okay so you don't have

00:17:33,270 --> 00:17:36,900
anything to do there except for

00:17:34,500 --> 00:17:41,490
extracting so if we put everything

00:17:36,900 --> 00:17:43,920
together right we have this I talked

00:17:41,490 --> 00:17:45,390
about the type if we were talking we're

00:17:43,920 --> 00:17:48,870
talking about an ETP here which is a

00:17:45,390 --> 00:17:51,150
sink the type alright very top what is

00:17:48,870 --> 00:17:53,970
it as a cell type it's a sink buffer are

00:17:51,150 --> 00:17:57,270
you fairly evident um are debugging our

00:17:53,970 --> 00:18:00,720
operations so doctors that we've seen in

00:17:57,270 --> 00:18:03,630
the slide from work don't enable disable

00:18:00,720 --> 00:18:07,070
which are in the case of a sink like

00:18:03,630 --> 00:18:10,560
this all of the operation started

00:18:07,070 --> 00:18:15,360
specific to that particular component

00:18:10,560 --> 00:18:18,780
order and registered coresight device

00:18:15,360 --> 00:18:20,910
using or car tech target using course

00:18:18,780 --> 00:18:23,550
i'm mr. that's it everything goes well

00:18:20,910 --> 00:18:29,760
they don't get it nervous dig when error

00:18:23,550 --> 00:18:32,260
message and your fact that here colonel

00:18:29,760 --> 00:18:35,050
has been taken into account by framework

00:18:32,260 --> 00:18:37,690
as Richard like when the colonel needs

00:18:35,050 --> 00:18:42,070
okay so there's really no rocket science

00:18:37,690 --> 00:18:43,630
and adding your own device you own dryer

00:18:42,070 --> 00:18:48,850
for device that you would have

00:18:43,630 --> 00:18:50,680
customized okay the more the merrier if

00:18:48,850 --> 00:18:53,410
you do have a device that would like to

00:18:50,680 --> 00:18:56,620
add into the foresight firm work please

00:18:53,410 --> 00:18:59,650
do so i'll be happy to look at it the

00:18:56,620 --> 00:19:03,100
fee and the more we have will guarantee

00:18:59,650 --> 00:19:06,190
you that the framework is a generic

00:19:03,100 --> 00:19:08,500
right so if we find problems it probably

00:19:06,190 --> 00:19:13,240
means that we're not generic enough oh

00:19:08,500 --> 00:19:16,600
we need to change things okay so we

00:19:13,240 --> 00:19:18,370
talked about what happens when we want

00:19:16,600 --> 00:19:19,630
to introduce into driver now let's talk

00:19:18,370 --> 00:19:26,380
about problems that we have of course

00:19:19,630 --> 00:19:33,070
like um so just to put us into context

00:19:26,380 --> 00:19:35,790
here there you go all right you heard a

00:19:33,070 --> 00:19:38,380
problem from talking about okay so

00:19:35,790 --> 00:19:40,120
channel management all right if you talk

00:19:38,380 --> 00:19:41,950
about that so we're going to do in order

00:19:40,120 --> 00:19:44,290
to split in reserve channel between

00:19:41,950 --> 00:19:47,200
components better than a collection

00:19:44,290 --> 00:19:49,810
right huge problem and we're not the

00:19:47,200 --> 00:19:52,420
only ones who have that people at Intel

00:19:49,810 --> 00:19:55,450
also have that and I haven't seen

00:19:52,420 --> 00:19:58,270
anything from mix but I assume that it

00:19:55,450 --> 00:20:00,280
would be about to state the thing trace

00:19:58,270 --> 00:20:02,230
the coding touched on that in the first

00:20:00,280 --> 00:20:04,960
session it will also talk about that app

00:20:02,230 --> 00:20:07,720
and an incredible interface okay so

00:20:04,960 --> 00:20:11,980
let's dive right in the phone is like an

00:20:07,720 --> 00:20:16,360
STM for either for Archie seven art or

00:20:11,980 --> 00:20:19,750
art v8 will expose channels to the

00:20:16,360 --> 00:20:22,530
system anyone who can map those channel

00:20:19,750 --> 00:20:26,590
in your memory area can write to those

00:20:22,530 --> 00:20:28,570
call it stimulus support and those that

00:20:26,590 --> 00:20:33,370
information will catch will be packaged

00:20:28,570 --> 00:20:35,380
into an stp v2 format down into the

00:20:33,370 --> 00:20:38,530
course I clubbing all the way down to a

00:20:35,380 --> 00:20:41,130
tpim port or an ATV okay so if you want

00:20:38,530 --> 00:20:45,080
it's like an F trace or a syslog

00:20:41,130 --> 00:20:47,450
mechanism but on assistance scale

00:20:45,080 --> 00:20:49,730
and also it doesn't fail because it's

00:20:47,450 --> 00:20:52,220
not memory that can be corrupted on the

00:20:49,730 --> 00:20:58,670
CPU or on an application processor so

00:20:52,220 --> 00:21:01,760
that memory is is not obvious if you

00:20:58,670 --> 00:21:04,880
can't we can't right into it cover the

00:21:01,760 --> 00:21:06,920
information in there so so how do we

00:21:04,880 --> 00:21:08,690
split those chairs between the

00:21:06,920 --> 00:21:11,090
components that we have on the system

00:21:08,690 --> 00:21:13,070
remember these components may not be

00:21:11,090 --> 00:21:14,390
running Linux these components may not

00:21:13,070 --> 00:21:17,480
be done even operating system at all

00:21:14,390 --> 00:21:19,550
right so we need to have a way to

00:21:17,480 --> 00:21:21,920
specify what we're going to do with that

00:21:19,550 --> 00:21:24,740
so let me put everything into the device

00:21:21,920 --> 00:21:29,030
tree if so what is the format right

00:21:24,740 --> 00:21:30,860
another solution is to use something

00:21:29,030 --> 00:21:33,170
like the colonel is using with a memory

00:21:30,860 --> 00:21:35,180
splint right that is a bit more

00:21:33,170 --> 00:21:37,970
constraining because we can't really

00:21:35,180 --> 00:21:42,980
play with the proportion of the amount

00:21:37,970 --> 00:21:44,120
of child without me half right so this

00:21:42,980 --> 00:21:47,830
is something that we haven't found a

00:21:44,120 --> 00:21:50,000
solution to you I've seen a company that

00:21:47,830 --> 00:21:52,490
wasn't doing anything with that horse

00:21:50,000 --> 00:21:56,780
using st. channel and they work from

00:21:52,490 --> 00:22:00,380
Oliver their rights and they were

00:21:56,780 --> 00:22:03,560
decoding and demultiplexing the packets

00:22:00,380 --> 00:22:07,070
based on the source of a component that

00:22:03,560 --> 00:22:09,530
was writing to stimulus port and the

00:22:07,070 --> 00:22:12,470
protocol that were enacting users things

00:22:09,530 --> 00:22:16,010
so they were taking all the processes

00:22:12,470 --> 00:22:19,610
having an api user space that was that

00:22:16,010 --> 00:22:23,150
was exporting a no map in between

00:22:19,610 --> 00:22:26,210
process and ID and based on what would

00:22:23,150 --> 00:22:28,190
found in there it's fine in there they

00:22:26,210 --> 00:22:30,680
were able to do the decoding like this

00:22:28,190 --> 00:22:34,880
is the right way to proceed I don't know

00:22:30,680 --> 00:22:36,890
it worked well for them on a broader

00:22:34,880 --> 00:22:40,100
scale would it work probably not because

00:22:36,890 --> 00:22:44,000
it's kind of replicating the mechanism

00:22:40,100 --> 00:22:46,430
that's harder all yes and something I

00:22:44,000 --> 00:22:49,670
just this one as heavy start looking at

00:22:46,430 --> 00:22:52,970
or thinking about also cases of where

00:22:49,670 --> 00:22:55,580
you've got virtual machines and serious

00:22:52,970 --> 00:22:57,350
hardware how do you allocate if you have

00:22:55,580 --> 00:22:57,920
multiple virtual machines wanting to use

00:22:57,350 --> 00:23:00,860
the course I

00:22:57,920 --> 00:23:03,340
I birth and the dead own STM how would

00:23:00,860 --> 00:23:05,900
you allocate channels across that and

00:23:03,340 --> 00:23:08,000
how he also take into account things

00:23:05,900 --> 00:23:10,040
like so which that's more of a

00:23:08,000 --> 00:23:12,020
configuration licking this tool prank so

00:23:10,040 --> 00:23:14,480
until is a proverb virtual machine

00:23:12,020 --> 00:23:17,570
context i eat razon that's all part of

00:23:14,480 --> 00:23:20,600
the tracers right regardless of the

00:23:17,570 --> 00:23:22,610
virtual machine that is running it on at

00:23:20,600 --> 00:23:25,850
that very moment the trace the course I

00:23:22,610 --> 00:23:28,780
component does not change right so what

00:23:25,850 --> 00:23:31,640
does changed Oh as you mentioned is the

00:23:28,780 --> 00:23:34,280
written how do you reserve all this

00:23:31,640 --> 00:23:36,650
between and specifically since the Vice

00:23:34,280 --> 00:23:38,870
tree for instance will ramat know about

00:23:36,650 --> 00:23:40,970
all of the virtual instances that can

00:23:38,870 --> 00:23:43,040
run as the system right so how does that

00:23:40,970 --> 00:23:47,090
work those are questions that we have

00:23:43,040 --> 00:23:49,340
aren't you okay so if this is just about

00:23:47,090 --> 00:23:50,930
which channels I used by hardware that

00:23:49,340 --> 00:23:53,240
should definitely be a device tree attic

00:23:50,930 --> 00:23:56,960
um the device trainers craft what the

00:23:53,240 --> 00:23:59,180
hard with us and if I have the set of

00:23:56,960 --> 00:24:01,790
channels that are used by hard way

00:23:59,180 --> 00:24:03,230
already we should have away from the

00:24:01,790 --> 00:24:05,420
device tree to figure out what they are

00:24:03,230 --> 00:24:10,700
and then use all the other ones for the

00:24:05,420 --> 00:24:13,210
operators I think that's and leader yeah

00:24:10,700 --> 00:24:16,460
the separation of his refuse for her

00:24:13,210 --> 00:24:21,560
these are almost fully further you've

00:24:16,460 --> 00:24:23,690
got the lady you yes that's that's how

00:24:21,560 --> 00:24:26,810
good to me so anything that's

00:24:23,690 --> 00:24:29,240
intelligent on the system has access to

00:24:26,810 --> 00:24:31,550
those two more support yes the device we

00:24:29,240 --> 00:24:33,440
should describe the environment that the

00:24:31,550 --> 00:24:36,800
operating systems running on that one

00:24:33,440 --> 00:24:38,720
that's specifically yes so if if the

00:24:36,800 --> 00:24:40,250
bootloader knows that there's something

00:24:38,720 --> 00:24:41,840
else right into this and that channel

00:24:40,250 --> 00:24:44,120
that should be in the device for ease of

00:24:41,840 --> 00:24:48,290
the operating system that's currently

00:24:44,120 --> 00:24:50,360
using will not use those channels if you

00:24:48,290 --> 00:24:53,090
have virtual machines that I think the

00:24:50,360 --> 00:24:55,430
same same issue though the host

00:24:53,090 --> 00:24:57,170
operating system can assign social

00:24:55,430 --> 00:24:59,090
channels to a guest and then in the

00:24:57,170 --> 00:25:01,130
device free you should have a list of

00:24:59,090 --> 00:25:03,530
which channels are allowed to be

00:25:01,130 --> 00:25:07,160
accessed by that guest so it's enough to

00:25:03,530 --> 00:25:09,140
know just the channels that we can

00:25:07,160 --> 00:25:09,389
access and not bother about everything

00:25:09,140 --> 00:25:11,009
else

00:25:09,389 --> 00:25:12,839
but you could do you could either

00:25:11,009 --> 00:25:15,299
describe the ones that I use are the

00:25:12,839 --> 00:25:17,249
ones that are free for use but one or

00:25:15,299 --> 00:25:19,289
the other which one has the most chances

00:25:17,249 --> 00:25:20,999
of being up screen of going upstream

00:25:19,289 --> 00:25:25,589
there was a really good ones that are

00:25:20,999 --> 00:25:27,209
used before because then you can yeah

00:25:25,589 --> 00:25:29,190
well sometimes you might want to

00:25:27,209 --> 00:25:30,809
describe what they used for I give if

00:25:29,190 --> 00:25:32,339
there's something writing this

00:25:30,809 --> 00:25:35,219
particular channel but you actually want

00:25:32,339 --> 00:25:36,419
to know about the data and then it might

00:25:35,219 --> 00:25:39,359
want to have the information there's

00:25:36,419 --> 00:25:41,309
this thing that we have a driver for its

00:25:39,359 --> 00:25:43,619
writing into there in the operating

00:25:41,309 --> 00:25:46,679
system we can mean it we know what it is

00:25:43,619 --> 00:25:50,519
I can our ASIS I can already see other

00:25:46,679 --> 00:25:52,049
people saying that well why specifying

00:25:50,519 --> 00:25:54,479
the ones that I use when we can deduce

00:25:52,049 --> 00:25:55,769
them from the ones that are all that

00:25:54,479 --> 00:25:58,769
that you're assigning to that specific

00:25:55,769 --> 00:26:01,049
instance no you can't because if you

00:25:58,769 --> 00:26:03,539
assign if you should describe which ones

00:26:01,049 --> 00:26:05,190
are available you don't know what you're

00:26:03,539 --> 00:26:06,839
reading like if you're seeing events

00:26:05,190 --> 00:26:08,729
from another channel you don't know what

00:26:06,839 --> 00:26:10,320
they are he described what the Chinese

00:26:08,729 --> 00:26:16,279
are that are being used then you can

00:26:10,320 --> 00:26:19,679
read the data coming from them okay oh

00:26:16,279 --> 00:26:21,899
there's one of you yes I mean I have an

00:26:19,679 --> 00:26:24,479
immature that's usually use case but you

00:26:21,899 --> 00:26:26,879
can do it one way and cannot do it the

00:26:24,479 --> 00:26:28,979
other way I think just just a mere fact

00:26:26,879 --> 00:26:30,719
of talking about Israel let me guess is

00:26:28,979 --> 00:26:32,339
that it's relevant right the fact that

00:26:30,719 --> 00:26:34,739
we're having a conversation about this

00:26:32,339 --> 00:26:36,419
means that yeah that's that's not

00:26:34,739 --> 00:26:38,639
interesting problem though if you had

00:26:36,419 --> 00:26:42,379
virtual machines and you allow a virtual

00:26:38,639 --> 00:26:45,029
machine to read any data from car site

00:26:42,379 --> 00:26:47,459
this virtual machine might be able to

00:26:45,029 --> 00:26:49,889
get information about what is running in

00:26:47,459 --> 00:26:52,200
another virtual machine in you typically

00:26:49,889 --> 00:26:59,339
don't want that it's a problem that we

00:26:52,200 --> 00:27:01,219
have posted yes so the only thing you

00:26:59,339 --> 00:27:05,429
can enforce is that the virtual machine

00:27:01,219 --> 00:27:07,649
might not have any access to our site at

00:27:05,429 --> 00:27:08,890
all or some other components oh you

00:27:07,649 --> 00:27:11,440
don't

00:27:08,890 --> 00:27:14,200
you know virtualize the hardware but

00:27:11,440 --> 00:27:16,240
that seems yeah yeah yeah virtualizing

00:27:14,200 --> 00:27:18,490
the hardware he isn't all that use and

00:27:16,240 --> 00:27:20,860
you can only you can only give excess

00:27:18,490 --> 00:27:22,780
like you could have read access to some

00:27:20,860 --> 00:27:28,960
registers but only on a per page basis

00:27:22,780 --> 00:27:31,720
and I'm sure that you letting other

00:27:28,960 --> 00:27:35,080
painter lined would you have multiple

00:27:31,720 --> 00:27:42,400
addresses within 1 4 kilobyte page or a

00:27:35,080 --> 00:27:44,620
seat for the right page here right so

00:27:42,400 --> 00:27:48,310
you can't give them one of finding

00:27:44,620 --> 00:27:51,010
colonel original one yes yeah but you

00:27:48,310 --> 00:27:53,410
could have set up where you when you

00:27:51,010 --> 00:27:55,450
have a linux running that you want to

00:27:53,410 --> 00:27:57,550
trace different virtual machine that out

00:27:55,450 --> 00:28:02,080
of attention that's right sentiment then

00:27:57,550 --> 00:28:05,670
it's just means from this uses dtb to

00:28:02,080 --> 00:28:05,670
read data from the other virtual machine

00:28:05,970 --> 00:28:13,540
so their notes of it oh this is

00:28:11,350 --> 00:28:16,240
something we have to tackle right if you

00:28:13,540 --> 00:28:18,940
have done something I like in that area

00:28:16,240 --> 00:28:21,540
out here company you're interested in

00:28:18,940 --> 00:28:23,430
talking about it just come and find me

00:28:21,540 --> 00:28:26,980
adapting on what people have done

00:28:23,430 --> 00:28:28,410
tiffany is good for ideas of what has

00:28:26,980 --> 00:28:31,000
worked what hasn't worked for them

00:28:28,410 --> 00:28:33,160
there's a company who said don't do this

00:28:31,000 --> 00:28:36,340
because this is this or not okay that's

00:28:33,160 --> 00:28:38,290
a good idea alright so yeah if you have

00:28:36,340 --> 00:28:41,440
something like that channel allocation

00:28:38,290 --> 00:28:43,060
mechanism for course I for STM yeah come

00:28:41,440 --> 00:28:48,330
and find me and I'll be happy to talk

00:28:43,060 --> 00:28:51,580
about it okay all right metadata

00:28:48,330 --> 00:28:56,280
metadata that's a good one the problem

00:28:51,580 --> 00:28:59,410
with fault its inherent to how it works

00:28:56,280 --> 00:29:02,200
based on how the trace engine are

00:28:59,410 --> 00:29:04,780
configured the information is conveyed

00:29:02,200 --> 00:29:07,750
in the packet of the trace group will be

00:29:04,780 --> 00:29:09,940
different for instance if you have

00:29:07,750 --> 00:29:12,220
psycho accurate which allows them to

00:29:09,940 --> 00:29:16,000
trace data from different components at

00:29:12,220 --> 00:29:18,690
the same time the format of the packets

00:29:16,000 --> 00:29:20,760
will be different or map of the pack the

00:29:18,690 --> 00:29:22,560
athens and the athens themselves that

00:29:20,760 --> 00:29:26,640
are found in the trees dream will be

00:29:22,560 --> 00:29:29,490
different the kick area is that these

00:29:26,640 --> 00:29:33,540
packets don't convey any clues about

00:29:29,490 --> 00:29:35,940
what is in the package at such in order

00:29:33,540 --> 00:29:37,650
to decode the trade students you need to

00:29:35,940 --> 00:29:40,530
know how the trace engine has been

00:29:37,650 --> 00:29:43,290
thinking the same thing for ten stampin

00:29:40,530 --> 00:29:47,640
there's a way to specify how wide your

00:29:43,290 --> 00:29:49,770
time stamping feel is right as such that

00:29:47,640 --> 00:29:52,020
will have an impact on the format of the

00:29:49,770 --> 00:29:55,290
packets that are being sent into your

00:29:52,020 --> 00:29:57,360
system so unlike f trace where we can

00:29:55,290 --> 00:29:59,550
train you can take a trace dump and

00:29:57,360 --> 00:30:02,660
simply haven't fed or feed it to Colonel

00:29:59,550 --> 00:30:06,330
sharp it's not really the same way or

00:30:02,660 --> 00:30:08,940
course I'm right so along with your

00:30:06,330 --> 00:30:11,310
trades dido you also have to have a lump

00:30:08,940 --> 00:30:14,160
and we'll describe how you trace the

00:30:11,310 --> 00:30:16,490
engine has been configured right so how

00:30:14,160 --> 00:30:23,610
do you do that what is the format flat

00:30:16,490 --> 00:30:26,370
um there's a alright so along with it

00:30:23,610 --> 00:30:31,020
before moved to a document written by

00:30:26,370 --> 00:30:34,650
out all our I'll grant at arm we also

00:30:31,020 --> 00:30:37,650
have to it because what's in a tray

00:30:34,650 --> 00:30:39,990
stream is only the Waypoint so only the

00:30:37,650 --> 00:30:41,580
points in the code where the instruction

00:30:39,990 --> 00:30:45,360
pointer has jumped because a certain

00:30:41,580 --> 00:30:48,240
event we need to have an idea of the

00:30:45,360 --> 00:30:50,190
image that was fed to the system so if

00:30:48,240 --> 00:30:52,770
you're looking at the system that runs

00:30:50,190 --> 00:30:54,780
from wrong and doesn't change a code on

00:30:52,770 --> 00:30:56,460
the fly or doesn't match the crew it's

00:30:54,780 --> 00:30:58,710
not public but if you have

00:30:56,460 --> 00:31:01,320
self-modifying code or code that has

00:30:58,710 --> 00:31:03,720
been enhanced upgraded then you need to

00:31:01,320 --> 00:31:06,060
also take account into account all of

00:31:03,720 --> 00:31:08,610
the thing or the software in each

00:31:06,060 --> 00:31:10,500
other's running into memory right for a

00:31:08,610 --> 00:31:13,080
corn the colonel it's fairly easy

00:31:10,500 --> 00:31:16,920
because you can get it from can get that

00:31:13,080 --> 00:31:19,080
area from the command line and do a DD

00:31:16,920 --> 00:31:20,430
half that number area but for

00:31:19,080 --> 00:31:22,710
applications that are running in user

00:31:20,430 --> 00:31:24,330
space it might not be so simple simply

00:31:22,710 --> 00:31:26,480
because you need to have an idea of how

00:31:24,330 --> 00:31:29,790
the system is configured as also

00:31:26,480 --> 00:31:32,250
dynamically that is right so so that

00:31:29,790 --> 00:31:33,930
like like knowing what is being

00:31:32,250 --> 00:31:40,140
trace and having an image of that trees

00:31:33,930 --> 00:31:43,650
is can be challenging all right on

00:31:40,140 --> 00:31:47,310
metadata I read on a plane a super good

00:31:43,650 --> 00:31:51,240
document I'll grant at arm try

00:31:47,310 --> 00:31:54,090
formalized these two slides so he know

00:31:51,240 --> 00:31:56,670
he basically formalized the information

00:31:54,090 --> 00:31:59,250
that is required for metadata in the

00:31:56,670 --> 00:32:03,210
metadata how to be packaged limit raised

00:31:59,250 --> 00:32:06,270
view and what to do with multiple traces

00:32:03,210 --> 00:32:08,460
and articles where trace entity or the

00:32:06,270 --> 00:32:11,400
train engine would have changed its

00:32:08,460 --> 00:32:15,510
configuration on the fly so it's

00:32:11,400 --> 00:32:19,470
definitely not a definitive not a final

00:32:15,510 --> 00:32:22,370
document and it specifically written in

00:32:19,470 --> 00:32:25,830
there as well that it's meant to be a

00:32:22,370 --> 00:32:28,350
starting point for discussion right it's

00:32:25,830 --> 00:32:31,080
a formalization of all the parameters

00:32:28,350 --> 00:32:33,270
that have to be taken into account for

00:32:31,080 --> 00:32:36,480
metadata to be packing our package with

00:32:33,270 --> 00:32:39,480
a tray street so yeah if you're

00:32:36,480 --> 00:32:41,730
interested get on there and locking it's

00:32:39,480 --> 00:32:48,210
free it's available and it's really well

00:32:41,730 --> 00:32:50,850
written okay um so decoding trace PTM to

00:32:48,210 --> 00:32:53,520
human does a very good job on flip side

00:32:50,850 --> 00:32:55,590
it does not think own packets entirely

00:32:53,520 --> 00:32:57,810
people tell you what the packets arc but

00:32:55,590 --> 00:32:59,550
it will not tell you what instructions

00:32:57,810 --> 00:33:01,860
were conveyed in fact it is what

00:32:59,550 --> 00:33:06,720
happened so it seems like the work was

00:33:01,860 --> 00:33:11,130
entrusted in the mode of government okay

00:33:06,720 --> 00:33:13,350
ah google has done an awesome trip I

00:33:11,130 --> 00:33:15,570
call an ATM object done because that's

00:33:13,350 --> 00:33:19,230
what the author called it on amazing

00:33:15,570 --> 00:33:21,720
automating lists it's amazing if you can

00:33:19,230 --> 00:33:24,920
make it work for your product it will do

00:33:21,720 --> 00:33:27,450
it will give you results that are

00:33:24,920 --> 00:33:30,570
listening instructions the exact suite

00:33:27,450 --> 00:33:34,410
of instructions of was taken by a

00:33:30,570 --> 00:33:37,110
processor except that it was written

00:33:34,410 --> 00:33:39,210
with a specific trace scenario in mind

00:33:37,110 --> 00:33:41,070
when specific trace configuration

00:33:39,210 --> 00:33:42,960
everything that goes beyond that

00:33:41,070 --> 00:33:44,990
boundary cannot be recognized what to

00:33:42,960 --> 00:33:47,270
write so

00:33:44,990 --> 00:33:50,420
data to step in right direction but it

00:33:47,270 --> 00:33:51,559
would have to be enhanced for so in

00:33:50,420 --> 00:33:55,720
order to be able to handle different

00:33:51,559 --> 00:33:58,700
trading arms okay as I mentioned earlier

00:33:55,720 --> 00:34:01,190
previous session ds5 awesome tools

00:33:58,700 --> 00:34:05,780
professional tool except that it's a

00:34:01,190 --> 00:34:09,250
three day trial I system right and a

00:34:05,780 --> 00:34:12,740
tracer youtube well it's again very very

00:34:09,250 --> 00:34:15,440
professional tool very uh kidney tool

00:34:12,740 --> 00:34:20,919
but it will certainly punch a hole in

00:34:15,440 --> 00:34:24,560
your budget so if you're building

00:34:20,919 --> 00:34:26,840
support for her on top of this work

00:34:24,560 --> 00:34:29,540
based control both the input and the

00:34:26,840 --> 00:34:31,250
output have a format that isn't that

00:34:29,540 --> 00:34:34,879
nice and all but only used inside of

00:34:31,250 --> 00:34:38,179
carnal that would circumvent all these

00:34:34,879 --> 00:34:39,440
problems for an important these days or

00:34:38,179 --> 00:34:42,490
the notion of all the other use

00:34:39,440 --> 00:34:44,540
management but the problem is too deep

00:34:42,490 --> 00:34:46,280
regardless of where you do it whether

00:34:44,540 --> 00:34:48,290
it's understandable bases or with in

00:34:46,280 --> 00:34:51,020
person the problem is to do the trace

00:34:48,290 --> 00:34:53,960
decoding it's better if you do it in the

00:34:51,020 --> 00:34:56,810
kernel a jerk the decoding would be in

00:34:53,960 --> 00:34:58,430
the Carlin right or would it not I would

00:34:56,810 --> 00:35:00,980
not put the decoding in the colonel oh

00:34:58,430 --> 00:35:05,109
yeah okay I would not would not put that

00:35:00,980 --> 00:35:08,840
about and i remove an assole straight

00:35:05,109 --> 00:35:12,050
right but but not not not part of the

00:35:08,840 --> 00:35:14,420
kernel as a running entity yeah okay I

00:35:12,050 --> 00:35:17,600
got it right not not not part of the

00:35:14,420 --> 00:35:19,940
binary functionality at least in the

00:35:17,600 --> 00:35:22,369
current it be user space to write this

00:35:19,940 --> 00:35:24,170
is the former hardware-specific like

00:35:22,369 --> 00:35:25,700
would it change between different i sow

00:35:24,170 --> 00:35:28,850
seeds that have different versions of

00:35:25,700 --> 00:35:32,570
the it's not supposed to that's why i'm

00:35:28,850 --> 00:35:35,119
surprised that people at TI I've told me

00:35:32,570 --> 00:35:37,700
that you're cooking bullets to do it can

00:35:35,119 --> 00:35:39,859
only get killed traces from the TR

00:35:37,700 --> 00:35:43,340
Assessors right I haven't looked into

00:35:39,859 --> 00:35:45,590
that but I was surprised by that ok so

00:35:43,340 --> 00:35:49,400
the traces themselves should be generic

00:35:45,590 --> 00:35:52,460
and Lester like the modification of the

00:35:49,400 --> 00:35:56,200
ugly blog itself is done which I died I

00:35:52,460 --> 00:35:56,200
don't see why one would want to do that

00:36:00,290 --> 00:36:06,000
I mean there there is a divorce i expect

00:36:03,480 --> 00:36:07,320
the architecture so it with erika

00:36:06,000 --> 00:36:08,840
supposed to follow that by mean you have

00:36:07,320 --> 00:36:12,510
to find that there is still a burrata

00:36:08,840 --> 00:36:14,730
that bull you know like if you that just

00:36:12,510 --> 00:36:16,200
happens to be in the logic where you

00:36:14,730 --> 00:36:18,360
know if you follow this certain stream

00:36:16,200 --> 00:36:20,010
you can't decode it or I'll break or

00:36:18,360 --> 00:36:21,420
something like that and that's gonna I

00:36:20,010 --> 00:36:25,560
mean that you'll have that with any

00:36:21,420 --> 00:36:28,050
product so kind of circumventing goes

00:36:25,560 --> 00:36:31,260
arata that's going to be issued to you

00:36:28,050 --> 00:36:33,780
know any jerk I mean if everything

00:36:31,260 --> 00:36:35,820
worked perfectly that you fine but you

00:36:33,780 --> 00:36:41,460
know we can sure that you know to get

00:36:35,820 --> 00:36:43,230
around those methods yeah sounds the

00:36:41,460 --> 00:36:47,190
idea of having a tool that is supported

00:36:43,230 --> 00:36:50,610
as well right so that people can read

00:36:47,190 --> 00:37:01,080
ear about us and write code that allows

00:36:50,610 --> 00:37:03,270
to provision for all right okay so

00:37:01,080 --> 00:37:04,980
another problem we have is how should we

00:37:03,270 --> 00:37:07,950
want to expose the colonel in the

00:37:04,980 --> 00:37:10,410
colonel right when we're talking about f

00:37:07,950 --> 00:37:13,770
trace you're able to start and stop

00:37:10,410 --> 00:37:17,630
trace from a kernel code itself we want

00:37:13,770 --> 00:37:20,490
to be able to do that with porcine if so

00:37:17,630 --> 00:37:23,760
going down the same path how much

00:37:20,490 --> 00:37:27,390
configuration we want turtle to be able

00:37:23,760 --> 00:37:30,570
to do on the course i trace engine right

00:37:27,390 --> 00:37:34,020
this is a valid question do we want a

00:37:30,570 --> 00:37:37,680
Trier to configure a course i trace

00:37:34,020 --> 00:37:40,080
engine for specific scenario or specific

00:37:37,680 --> 00:37:43,680
debugging's number right how much you

00:37:40,080 --> 00:37:46,670
eat how much exactly expose and how how

00:37:43,680 --> 00:37:50,010
much of the configuration that connects

00:37:46,670 --> 00:37:52,530
a trace entity to a cpu but we want to

00:37:50,010 --> 00:37:56,100
expose this one right so these are

00:37:52,530 --> 00:38:00,000
interesting questions there's any

00:37:56,100 --> 00:38:01,980
questions that are not urgent to be

00:38:00,000 --> 00:38:04,770
answered right away but it's it's

00:38:01,980 --> 00:38:08,930
questions that those are discussions

00:38:04,770 --> 00:38:11,780
I've had other people but

00:38:08,930 --> 00:38:12,859
okay those are questions that that those

00:38:11,780 --> 00:38:14,750
are conversations that I've had with

00:38:12,859 --> 00:38:17,119
other people and since we've already had

00:38:14,750 --> 00:38:20,240
this conversation well simply a topic

00:38:17,119 --> 00:38:23,180
that we have to look into right hard

00:38:20,240 --> 00:38:25,089
yeah I was thinking the deck being able

00:38:23,180 --> 00:38:28,040
to trace to use a space program that's

00:38:25,089 --> 00:38:31,819
to me that's the most important part of

00:38:28,040 --> 00:38:33,650
pop basic the chrono is not all that

00:38:31,819 --> 00:38:36,079
interesting with them to actually run

00:38:33,650 --> 00:38:38,450
the colonel that much you try to write

00:38:36,079 --> 00:38:42,819
what we're talking about here is a

00:38:38,450 --> 00:38:46,069
driver configuring a trace engine and

00:38:42,819 --> 00:38:49,130
configuring the the trigger points for

00:38:46,069 --> 00:38:50,450
our traces to start and stop yes and

00:38:49,130 --> 00:38:52,760
that means interface with the colonel

00:38:50,450 --> 00:38:55,790
greatly we wanted that meant I think you

00:38:52,760 --> 00:38:57,500
need to so and if so how much do we

00:38:55,790 --> 00:39:13,220
expose what kind of look up that

00:38:57,500 --> 00:39:16,299
mechanism do we have for that I run over

00:39:13,220 --> 00:39:18,980
the the use case use he said was a

00:39:16,299 --> 00:39:23,569
system tab interacting with poor site

00:39:18,980 --> 00:39:26,329
would be a use case of super I was

00:39:23,569 --> 00:39:30,619
looking for ideas super thank you for

00:39:26,329 --> 00:39:33,470
that I definitely know i'm not an expert

00:39:30,619 --> 00:39:35,750
in that area but part of you know

00:39:33,470 --> 00:39:38,299
talking about this is to see if people

00:39:35,750 --> 00:39:39,829
have seen other things in the kernel or

00:39:38,299 --> 00:39:41,839
in the open source community could be

00:39:39,829 --> 00:39:45,859
applied to solve problems like that

00:39:41,839 --> 00:39:49,430
right by an extension or district

00:39:45,859 --> 00:39:52,460
configuration right so thank you for

00:39:49,430 --> 00:39:54,710
that and I was thinking of wonder more

00:39:52,460 --> 00:39:57,650
important Clarence basis of those turtle

00:39:54,710 --> 00:40:01,369
interfaces is the one where the colonel

00:39:57,650 --> 00:40:04,069
informs the trace output of changes to

00:40:01,369 --> 00:40:06,079
address places because any user space

00:40:04,069 --> 00:40:07,790
tool will be unable to do anything until

00:40:06,079 --> 00:40:10,640
it knows where pages come and go so

00:40:07,790 --> 00:40:12,530
that's that's that it's got couple

00:40:10,640 --> 00:40:15,980
paragraphs and how grants documentation

00:40:12,530 --> 00:40:18,170
how do you do that if you love it it's

00:40:15,980 --> 00:40:20,089
got like the documentation of al grant

00:40:18,170 --> 00:40:22,660
rolling on with the data collection it's

00:40:20,089 --> 00:40:25,120
got two big paragraphs specifically

00:40:22,660 --> 00:40:26,530
on that right and I think that's one of

00:40:25,120 --> 00:40:31,600
the main things that hurt yourself

00:40:26,530 --> 00:40:34,500
really well and that's probably why we

00:40:31,600 --> 00:40:36,970
need to get this closer to curve and

00:40:34,500 --> 00:40:40,000
huge infrastructure that's already there

00:40:36,970 --> 00:40:43,180
to do this father hardware and extended

00:40:40,000 --> 00:40:44,950
in the way that we need I agree I agree

00:40:43,180 --> 00:40:46,990
and we're not the first one to think

00:40:44,950 --> 00:40:55,780
about that that's around that Intel

00:40:46,990 --> 00:40:57,400
taking this one only look into this only

00:40:55,780 --> 00:40:59,380
difference with her that you can context

00:40:57,400 --> 00:41:02,050
which things like p.m. you can deceiving

00:40:59,380 --> 00:41:04,540
you this you could easily have a

00:41:02,050 --> 00:41:06,040
sickness stop going on and also the hard

00:41:04,540 --> 00:41:08,200
way as an understanding a context ID

00:41:06,040 --> 00:41:10,630
which is how its program right now

00:41:08,200 --> 00:41:12,760
called XO knees can be reused to be

00:41:10,630 --> 00:41:14,770
reallocated they're not fixed for that

00:41:12,760 --> 00:41:16,540
it's all the same as if he IDs to

00:41:14,770 --> 00:41:18,130
something different so we do need to

00:41:16,540 --> 00:41:20,680
have a way where if the colonel really

00:41:18,130 --> 00:41:22,690
hate the sort of a company studied it

00:41:20,680 --> 00:41:24,610
can tell cause I by the way now using

00:41:22,690 --> 00:41:26,950
this that has to be you know it's not

00:41:24,610 --> 00:41:29,020
going to work I agree texting I agree

00:41:26,950 --> 00:41:34,450
because if this context idea is simply a

00:41:29,020 --> 00:41:36,790
 and of course like in CP 15 that

00:41:34,450 --> 00:41:38,320
the software rights do right there still

00:41:36,790 --> 00:41:42,180
has to be a mapping through the

00:41:38,320 --> 00:41:45,700
processes numbers or the process thing

00:41:42,180 --> 00:41:48,310
time check we're 12 almost 12 10 so all

00:41:45,700 --> 00:41:51,730
right so there's a ruffian tease perfect

00:41:48,310 --> 00:41:53,980
timing for telling you all right so so

00:41:51,730 --> 00:41:56,860
we're out of time right I'll be here all

00:41:53,980 --> 00:41:59,500
week of course site is all I get full

00:41:56,860 --> 00:42:01,870
time I'm very interested in hearing what

00:41:59,500 --> 00:42:04,780
people are working on and their

00:42:01,870 --> 00:42:07,300
companies that can be done you know you

00:42:04,780 --> 00:42:11,140
can tell me we talk about privately or

00:42:07,300 --> 00:42:13,420
openly it's all seem to be a one thing

00:42:11,140 --> 00:42:15,730
that several companies have told me is

00:42:13,420 --> 00:42:18,130
that we don't compete on course I we

00:42:15,730 --> 00:42:22,860
collaborate on course I I foliot leave

00:42:18,130 --> 00:42:22,860

YouTube URL: https://www.youtube.com/watch?v=QhaGLftyvTc


