Title: LAS16-TR02: Upstreaming 101
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-TR02: Upstreaming 101
Speakers: Shawn Guo, Daniel Thompson
Date: September 27, 2016

★ Session Description ★
This session is an introductory course on Linux kernel upstreaming fundamentals. The course covers the definition the Linux mainline kernel tree as well as the maintainer hierarchy and processes used to contribute software into the mainline kernel. Special focus is given to understanding what documentation will help understand the process and mechanics in more detail while breaking the workflow into the various steps of upstreaming software patches. The target audience is both software engineers and engineering managers preparing to upstream software into the kernel. The topic requires a solid background in software configuration management terminology and the git SCM tool as well as a good technical understanding of the Linux kernel itself.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-tr02
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-tr02/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,360 --> 00:00:15,000
okay I think we should get started my

00:00:12,660 --> 00:00:18,359
name's daniel thompson I'm the tech lead

00:00:15,000 --> 00:00:20,820
of the support and solutions team linaro

00:00:18,359 --> 00:00:24,019
i work in member services and i'm here

00:00:20,820 --> 00:00:26,310
to talk to you today about up streaming

00:00:24,019 --> 00:00:29,640
so just to set you the context of what

00:00:26,310 --> 00:00:31,920
we can be talking about today's focus is

00:00:29,640 --> 00:00:34,710
every bit on linux kernel up streaming

00:00:31,920 --> 00:00:36,570
if anybody was in the talk from sarah

00:00:34,710 --> 00:00:37,770
sharp earlier you know there's lots and

00:00:36,570 --> 00:00:40,140
lots of different ways the open source

00:00:37,770 --> 00:00:41,460
projects can be organized and in this

00:00:40,140 --> 00:00:43,559
session we can be focused very much on

00:00:41,460 --> 00:00:46,020
the Linux kernel there are a couple of

00:00:43,559 --> 00:00:49,079
other projects who share a very similar

00:00:46,020 --> 00:00:52,350
culture q mu is one this brings to mind

00:00:49,079 --> 00:00:54,390
you boot another where you wouldn't want

00:00:52,350 --> 00:00:56,280
to follow these protocols exactly but

00:00:54,390 --> 00:00:58,379
certainly you would recognize enough of

00:00:56,280 --> 00:01:00,030
this kind of activity if you went to

00:00:58,379 --> 00:01:03,510
either those projects as you go further

00:01:00,030 --> 00:01:06,840
afield mechanism to change much more and

00:01:03,510 --> 00:01:08,790
more so we're going to look up streaming

00:01:06,840 --> 00:01:10,590
and what it is will describe essentially

00:01:08,790 --> 00:01:14,159
kind of process mechanics bits and

00:01:10,590 --> 00:01:15,299
pieces we're going to step through and I

00:01:14,159 --> 00:01:17,280
don't really care who the target

00:01:15,299 --> 00:01:18,720
audience is because you're in here but

00:01:17,280 --> 00:01:23,369
yeah it's mostly going to be

00:01:18,720 --> 00:01:25,020
substantially technical so we have a few

00:01:23,369 --> 00:01:27,600
prerequisites which are basically that

00:01:25,020 --> 00:01:30,360
you ultimately when I talk about a git

00:01:27,600 --> 00:01:32,579
pull or sending patches that you know

00:01:30,360 --> 00:01:34,590
what these things are it doesn't matter

00:01:32,579 --> 00:01:36,530
if you don't understand how the race

00:01:34,590 --> 00:01:39,720
conditions of SMP work that's irrelevant

00:01:36,530 --> 00:01:42,030
so he's basic source control actions in

00:01:39,720 --> 00:01:43,649
get push-pull sharing patches things

00:01:42,030 --> 00:01:47,640
like that that's all you need to know to

00:01:43,649 --> 00:01:50,299
follow what we're saying today so again

00:01:47,640 --> 00:01:53,850
in upstream ink for the Linux kernel

00:01:50,299 --> 00:01:56,520
this means moving software to the kind

00:01:53,850 --> 00:01:58,560
of top-level Linux repository which is

00:01:56,520 --> 00:02:01,770
the one that is managed by lena store

00:01:58,560 --> 00:02:04,320
volts one of the curious things about it

00:02:01,770 --> 00:02:06,719
is it's surprisingly hard to find if you

00:02:04,320 --> 00:02:08,550
go onto the get Colonel to org you

00:02:06,719 --> 00:02:11,280
actually have to search for torvalds as

00:02:08,550 --> 00:02:12,629
the name and scroll down until you find

00:02:11,280 --> 00:02:13,890
the git repository because it's not

00:02:12,629 --> 00:02:15,569
highlighted anyway

00:02:13,890 --> 00:02:18,480
from me to any other Colonel maintained

00:02:15,569 --> 00:02:19,470
as repository so that's where you're

00:02:18,480 --> 00:02:21,270
going and that's the repository that

00:02:19,470 --> 00:02:25,410
matters that's the one that we call main

00:02:21,270 --> 00:02:27,690
line and what we're heading for there's

00:02:25,410 --> 00:02:31,260
a bit of dogma here lots of companies

00:02:27,690 --> 00:02:32,190
have a main line and they have lots of

00:02:31,260 --> 00:02:34,709
things and when they talk about their

00:02:32,190 --> 00:02:36,330
main line they tend not to mean the main

00:02:34,709 --> 00:02:37,170
line linux kernel they mean whatever

00:02:36,330 --> 00:02:39,330
they're trying to ship to their

00:02:37,170 --> 00:02:40,950
customers so it's quite a cop keep track

00:02:39,330 --> 00:02:43,890
of which which mail are we talking about

00:02:40,950 --> 00:02:45,420
so this is the main line it is even

00:02:43,890 --> 00:02:50,700
marked as main line when you're trying

00:02:45,420 --> 00:02:54,660
to download it as a tarball and it will

00:02:50,700 --> 00:02:57,980
move through 45 RC 637 and so on until

00:02:54,660 --> 00:02:57,980
it goes up to the next version number

00:02:58,160 --> 00:03:03,360
lots of knots of companies contribution

00:03:00,239 --> 00:03:04,350
main line it's probably less important

00:03:03,360 --> 00:03:07,170
over the years that we show this slide

00:03:04,350 --> 00:03:09,510
because more and more people now

00:03:07,170 --> 00:03:10,980
understand the benefits of mainlining of

00:03:09,510 --> 00:03:13,890
why people wanted main line in the first

00:03:10,980 --> 00:03:17,010
place so this for was originally added

00:03:13,890 --> 00:03:18,959
to kind of point out the so many names

00:03:17,010 --> 00:03:20,489
you recognize doing up streaming as well

00:03:18,959 --> 00:03:22,920
as quite a lot of consulting companies

00:03:20,489 --> 00:03:24,510
who are Jim really taking on contract

00:03:22,920 --> 00:03:28,350
work from somebody else stops doing that

00:03:24,510 --> 00:03:31,260
code but what you do notice is Intel is

00:03:28,350 --> 00:03:33,600
there that Lenore is their arm is there

00:03:31,260 --> 00:03:34,530
in its own right it has a big outfit of

00:03:33,600 --> 00:03:38,280
people doing the maintenance

00:03:34,530 --> 00:03:40,019
particularly the arm 64 work and there's

00:03:38,280 --> 00:03:42,660
also plenty of representation from among

00:03:40,019 --> 00:03:45,870
the arm ecosystem as well so arm is a

00:03:42,660 --> 00:03:50,730
very influential contributor to mainline

00:03:45,870 --> 00:03:53,549
as an ecosystem now when you heading

00:03:50,730 --> 00:03:54,930
upstream there's a hierarchy of

00:03:53,549 --> 00:03:57,420
repositories you know you are not going

00:03:54,930 --> 00:03:59,940
to be sending code to lena store volts

00:03:57,420 --> 00:04:02,430
to get your coat up streamed you will be

00:03:59,940 --> 00:04:04,140
working with subsystems if you're

00:04:02,430 --> 00:04:06,450
writing a driver for a particular area

00:04:04,140 --> 00:04:09,989
you'll tend to work with the subsystem

00:04:06,450 --> 00:04:12,920
maintainer for that driver that

00:04:09,989 --> 00:04:15,359
subsystem maintainer may possibly even

00:04:12,920 --> 00:04:16,890
work with another subsystem maintainer

00:04:15,359 --> 00:04:19,530
we get hierarchies is it particularly if

00:04:16,890 --> 00:04:20,940
you look at areas like TTYL where there

00:04:19,530 --> 00:04:23,070
is the kind of base character device

00:04:20,940 --> 00:04:25,050
then there's a collection of you arts

00:04:23,070 --> 00:04:26,910
and other character devices all involved

00:04:25,050 --> 00:04:27,360
reserved as a tree of maintain is to

00:04:26,910 --> 00:04:30,479
hand

00:04:27,360 --> 00:04:33,599
that but during most of the way through

00:04:30,479 --> 00:04:35,189
the next kernel for the well warden

00:04:33,599 --> 00:04:38,030
trodden path you know when you're

00:04:35,189 --> 00:04:42,990
putting drivers the hardware that is not

00:04:38,030 --> 00:04:44,759
unique or magical then there will be a

00:04:42,990 --> 00:04:47,759
maintainer for the subsystem you want to

00:04:44,759 --> 00:04:49,949
contribute to when you head towards ESO

00:04:47,759 --> 00:04:52,050
tarek drivers you might have the

00:04:49,949 --> 00:04:53,490
misfortune to need to introduce a

00:04:52,050 --> 00:04:55,889
subsystem which is a long way outside

00:04:53,490 --> 00:04:57,509
the scope of this talk but you do get a

00:04:55,889 --> 00:04:59,039
lot of maintain is who have become that

00:04:57,509 --> 00:05:03,569
because they were the first person to

00:04:59,039 --> 00:05:04,919
run up to stream that type of driver so

00:05:03,569 --> 00:05:06,509
we have your own example code flow it's

00:05:04,919 --> 00:05:08,189
very very small you can probably only

00:05:06,509 --> 00:05:10,469
see the Penguins but i'll give you a

00:05:08,189 --> 00:05:11,879
quick point to to kind of give some

00:05:10,469 --> 00:05:13,830
suggestions whereas what's going on here

00:05:11,879 --> 00:05:16,710
so right at the top we've got the

00:05:13,830 --> 00:05:19,379
leanest tree and then we've got three

00:05:16,710 --> 00:05:23,039
different types of maintainer because

00:05:19,379 --> 00:05:25,199
although in the sock and you know silica

00:05:23,039 --> 00:05:26,729
manufacturer community what we think is

00:05:25,199 --> 00:05:28,379
really important at the drivers to make

00:05:26,729 --> 00:05:30,270
the i think i'm alive there are lots of

00:05:28,379 --> 00:05:34,440
other things that go in to make up a

00:05:30,270 --> 00:05:36,870
colonel so on the far side over the far

00:05:34,440 --> 00:05:38,729
end we've got feature maintain errs so

00:05:36,870 --> 00:05:40,620
there's plenty of hard computer science

00:05:38,729 --> 00:05:42,409
happening in modern kernels you know

00:05:40,620 --> 00:05:45,270
there's the networking stack there's

00:05:42,409 --> 00:05:47,219
particular file systems there's block

00:05:45,270 --> 00:05:48,900
devices device tree all those things are

00:05:47,219 --> 00:05:50,729
features that are used common to all

00:05:48,900 --> 00:05:52,169
kernels but they are essentially

00:05:50,729 --> 00:05:53,639
software there's not a great deal of

00:05:52,169 --> 00:05:56,879
direct interaction with the hardware

00:05:53,639 --> 00:05:59,129
going on at that point and so that's one

00:05:56,879 --> 00:06:01,800
type maintainer down the middle strike

00:05:59,129 --> 00:06:03,839
we've got architecture maintain us so

00:06:01,800 --> 00:06:06,589
you know people like Russell King for

00:06:03,839 --> 00:06:10,680
arm arm 32 bit and we'll deacon and

00:06:06,589 --> 00:06:12,509
cattle infer I'm 64 cities architecture

00:06:10,680 --> 00:06:15,779
maintain errs if you're trying to add

00:06:12,509 --> 00:06:17,279
new architectural features those are the

00:06:15,779 --> 00:06:21,199
sort of people you'll be talking with so

00:06:17,279 --> 00:06:23,819
when particular people get involved in

00:06:21,199 --> 00:06:25,620
virtualization they often have to work

00:06:23,819 --> 00:06:28,080
with the architecture maintain errs

00:06:25,620 --> 00:06:30,360
again if you work for a sock vendor your

00:06:28,080 --> 00:06:31,650
fundamental bread and butter is gonna be

00:06:30,360 --> 00:06:34,050
getting device drivers to work which is

00:06:31,650 --> 00:06:35,550
this far side down here where we've got

00:06:34,050 --> 00:06:39,149
that potential hierarchy of the

00:06:35,550 --> 00:06:41,350
subsystem maintainer via ITC or USB big

00:06:39,149 --> 00:06:45,340
subsystems and below that you have

00:06:41,350 --> 00:06:47,710
potentially big drivers so DW c 3 is the

00:06:45,340 --> 00:06:50,320
top of my list which is one of the very

00:06:47,710 --> 00:06:52,870
flexible USB sales comes even lots and

00:06:50,320 --> 00:06:55,210
lots of socks so that particular single

00:06:52,870 --> 00:06:57,280
USB cell has a special maintainer who

00:06:55,210 --> 00:07:00,700
just looks after that cell and if you've

00:06:57,280 --> 00:07:02,620
got that cell on your sock your driver

00:07:00,700 --> 00:07:04,270
contribution is adding whatever glue

00:07:02,620 --> 00:07:08,560
logic is necessary and you'd send you a

00:07:04,270 --> 00:07:15,250
driver to the USB peripheral maintainer

00:07:08,560 --> 00:07:16,780
I didn't say at the beginning actually

00:07:15,250 --> 00:07:18,670
that I'll take questions as we go if

00:07:16,780 --> 00:07:20,620
anybody has any so there's no need to

00:07:18,670 --> 00:07:25,270
acquire if you've got any questions well

00:07:20,620 --> 00:07:27,190
I'm saying okay so a maintainer again

00:07:25,270 --> 00:07:28,960
we've looked at what they have been in

00:07:27,190 --> 00:07:31,900
an earlier session but they are

00:07:28,960 --> 00:07:34,360
essentially the people who own specific

00:07:31,900 --> 00:07:36,280
base of component code be it the

00:07:34,360 --> 00:07:38,200
subsystem of the drivers follow our

00:07:36,280 --> 00:07:41,530
systems or so on and they responsible

00:07:38,200 --> 00:07:45,570
subsist specific slice of the colonel

00:07:41,530 --> 00:07:49,990
tree quite often that the file system

00:07:45,570 --> 00:07:51,550
structure of the colonel gives you the

00:07:49,990 --> 00:07:53,230
division into subsystem so the way it

00:07:51,550 --> 00:07:56,140
uses directories is the fundamental way

00:07:53,230 --> 00:07:58,420
that things are divided up and for the

00:07:56,140 --> 00:08:02,140
most part they're the gatekeepers for

00:07:58,420 --> 00:08:05,500
the code if you cannot convince them to

00:08:02,140 --> 00:08:08,500
take your code it would be not

00:08:05,500 --> 00:08:10,990
impossible but certainly as close to to

00:08:08,500 --> 00:08:13,000
bypass you have to satisfy the

00:08:10,990 --> 00:08:14,290
maintainer that the code that you want

00:08:13,000 --> 00:08:16,600
to contribute to their section of the

00:08:14,290 --> 00:08:19,990
colonel is the right piece of code and

00:08:16,600 --> 00:08:21,640
that it fits into place and the thing

00:08:19,990 --> 00:08:23,980
that I say I hope I'll get it in a few

00:08:21,640 --> 00:08:28,090
times during this presentation is that

00:08:23,980 --> 00:08:30,160
maintain errs are not all the same there

00:08:28,090 --> 00:08:32,469
is a kind of standard process which I

00:08:30,160 --> 00:08:35,919
think by and large we can thank Greg

00:08:32,469 --> 00:08:38,080
khoa Hartman for formalizing there's a

00:08:35,919 --> 00:08:39,940
kind of generic flow but different

00:08:38,080 --> 00:08:42,729
maintained errs do have subtly different

00:08:39,940 --> 00:08:44,169
working styles and so one of the key

00:08:42,729 --> 00:08:46,240
things is to understand that the up

00:08:44,169 --> 00:08:47,560
streaming is a social activity of you

00:08:46,240 --> 00:08:48,820
forming a relationship with the

00:08:47,560 --> 00:08:51,130
maintainer while you're working with

00:08:48,820 --> 00:08:53,200
them and so it's important that you

00:08:51,130 --> 00:08:54,820
recognize that they might have likes and

00:08:53,200 --> 00:08:59,200
dislikes that you can

00:08:54,820 --> 00:09:01,260
you can work with so just to give you an

00:08:59,200 --> 00:09:03,700
impression of the number of maintainer

00:09:01,260 --> 00:09:08,260
this is a grep that was when across the

00:09:03,700 --> 00:09:13,630
version 4.4 colonel 1087 colonel

00:09:08,260 --> 00:09:15,670
maintainer and that includes catch will

00:09:13,630 --> 00:09:17,410
maintain is include maintains the single

00:09:15,670 --> 00:09:19,600
drivers on particular architectures but

00:09:17,410 --> 00:09:23,050
there are over a thousand jeanne

00:09:19,600 --> 00:09:24,700
maintain errs and you can find them by

00:09:23,050 --> 00:09:26,680
looking in this maintain as file it's a

00:09:24,700 --> 00:09:28,150
very standard format the format for

00:09:26,680 --> 00:09:29,620
maintain is file is actually documented

00:09:28,150 --> 00:09:31,930
at the top of the maintain its fail to

00:09:29,620 --> 00:09:35,350
help you this is an arm related example

00:09:31,930 --> 00:09:38,140
where we see the M Russell King is a

00:09:35,350 --> 00:09:40,840
maintainer for the arm port there is a

00:09:38,140 --> 00:09:43,240
list L that you should copy when you try

00:09:40,840 --> 00:09:46,240
and contribute code to that port so that

00:09:43,240 --> 00:09:48,940
other reviewers can get involved there

00:09:46,240 --> 00:09:51,700
was a website that you could go to learn

00:09:48,940 --> 00:09:53,080
extra information it's a very good idea

00:09:51,700 --> 00:09:54,280
to have a quick look at this site if

00:09:53,080 --> 00:09:56,800
you're going to be touching code in our

00:09:54,280 --> 00:09:58,750
charm it's quite worthwhile having a

00:09:56,800 --> 00:10:00,730
quick look at that side because Russell

00:09:58,750 --> 00:10:02,980
in particular has some extra processes

00:10:00,730 --> 00:10:05,410
that not all maintain us do and he

00:10:02,980 --> 00:10:07,510
documents them on that website and the S

00:10:05,410 --> 00:10:09,730
stands for status is to maintained so

00:10:07,510 --> 00:10:11,950
some bits of code aren't maintained they

00:10:09,730 --> 00:10:14,290
you know the maintainers stopped

00:10:11,950 --> 00:10:15,760
volunteering to help and it goes on

00:10:14,290 --> 00:10:19,480
maintained and the status gets updated

00:10:15,760 --> 00:10:21,310
as i mentioned for driver writers it's

00:10:19,480 --> 00:10:25,570
quite rare to bump into a maintained

00:10:21,310 --> 00:10:26,710
code and the f is the far system

00:10:25,570 --> 00:10:28,780
location for whatever is under

00:10:26,710 --> 00:10:30,010
maintenance so when it ends in a slash

00:10:28,780 --> 00:10:31,750
obviously it's covering the whole

00:10:30,010 --> 00:10:36,570
directory tree so anything in the arch

00:10:31,750 --> 00:10:38,980
arm tree or any sub directories is

00:10:36,570 --> 00:10:40,870
slightly more comfortable yet the

00:10:38,980 --> 00:10:43,690
essential search down does go death

00:10:40,870 --> 00:10:51,100
based so anything in our charm russell

00:10:43,690 --> 00:10:52,480
should be a very minimum CC done now

00:10:51,100 --> 00:10:54,550
this stage I'm going to shift slightly

00:10:52,480 --> 00:10:55,900
into the timing of things it's very very

00:10:54,550 --> 00:10:57,520
important to understand merge windows

00:10:55,900 --> 00:10:59,680
because there's a very common

00:10:57,520 --> 00:11:02,590
misconception which is every two weeks

00:10:59,680 --> 00:11:03,970
the Linux kernel merge me door opens and

00:11:02,590 --> 00:11:08,290
there's a frenzy of activity of thrown

00:11:03,970 --> 00:11:10,720
code into the kernel the only people

00:11:08,290 --> 00:11:14,139
you are throwing code anywhere during

00:11:10,720 --> 00:11:16,180
the merge window are maintained us if

00:11:14,139 --> 00:11:18,009
you are not a maintainer when you are

00:11:16,180 --> 00:11:19,329
trying to get co2 people it is not going

00:11:18,009 --> 00:11:21,759
to be in the two-week merge window

00:11:19,329 --> 00:11:24,610
period you are trying to share your code

00:11:21,759 --> 00:11:27,060
mostly during the release cycle period

00:11:24,610 --> 00:11:29,649
the early parts of the release cycle

00:11:27,060 --> 00:11:31,480
somos maintain is can review or change

00:11:29,649 --> 00:11:33,819
review your change find it if they

00:11:31,480 --> 00:11:35,769
approve on it comment it get it fixed up

00:11:33,819 --> 00:11:43,449
and if they're happy they can then apply

00:11:35,769 --> 00:11:47,529
to their tree now maintain errs really

00:11:43,449 --> 00:11:49,420
don't like making me nuts unhappy so

00:11:47,529 --> 00:11:51,339
after released six maybe really seven

00:11:49,420 --> 00:11:53,649
they will start to get more and more

00:11:51,339 --> 00:11:56,259
conservative about the changes they

00:11:53,649 --> 00:11:57,940
accept into their tree mostly a by

00:11:56,259 --> 00:12:00,160
release six they would have already

00:11:57,940 --> 00:12:02,319
shared the code they've merged into the

00:12:00,160 --> 00:12:03,579
Linux next tree for testing they live

00:12:02,319 --> 00:12:05,980
got reports back and they may be looking

00:12:03,579 --> 00:12:07,750
at bug fixes but they will become more

00:12:05,980 --> 00:12:10,660
and more resistant to taking changes

00:12:07,750 --> 00:12:14,680
during the tail end of the development

00:12:10,660 --> 00:12:15,970
period so once you are c6 you're

00:12:14,680 --> 00:12:17,230
probably better off wait you can still

00:12:15,970 --> 00:12:19,959
share a patch there's nothing wrong with

00:12:17,230 --> 00:12:21,310
sending a patch at any time but you know

00:12:19,959 --> 00:12:23,110
if you're actually trying to convince

00:12:21,310 --> 00:12:25,569
them you to take that coat they're going

00:12:23,110 --> 00:12:29,920
to be most receptive in the RC 22 rc4

00:12:25,569 --> 00:12:31,540
kind of period and so you're typically

00:12:29,920 --> 00:12:34,630
less than six seven weeks after the

00:12:31,540 --> 00:12:36,399
merge window closes that's the period

00:12:34,630 --> 00:12:40,089
that you've got to get everything landed

00:12:36,399 --> 00:12:42,430
I say less it's some kernel cycles are

00:12:40,089 --> 00:12:44,800
longer than others so it's typically

00:12:42,430 --> 00:12:45,880
around about our c7 you get to sometimes

00:12:44,800 --> 00:12:47,949
if things are going well there's only

00:12:45,880 --> 00:12:51,519
six release candidates I think in the

00:12:47,949 --> 00:12:52,959
current 49 series 24 8 series there are

00:12:51,519 --> 00:12:56,800
there's an iron at eighth release

00:12:52,959 --> 00:13:01,329
candidate which way am I going so I am

00:12:56,800 --> 00:13:03,430
yeah so we've understood the merger

00:13:01,329 --> 00:13:05,889
window already do some work what we

00:13:03,430 --> 00:13:07,509
going to do so this is a quick summary

00:13:05,889 --> 00:13:13,089
of what about to talk about our media

00:13:07,509 --> 00:13:14,769
team preparation fundamentally and most

00:13:13,089 --> 00:13:16,600
importantly you need to know the content

00:13:14,769 --> 00:13:18,550
you are trying to / upstream one

00:13:16,600 --> 00:13:21,130
phenomenal quite common in sauk renders

00:13:18,550 --> 00:13:22,120
is the person who is test with landing

00:13:21,130 --> 00:13:25,750
at upstream is

00:13:22,120 --> 00:13:27,700
not necessarily the original author the

00:13:25,750 --> 00:13:29,260
maintainer doesn't care you're trying to

00:13:27,700 --> 00:13:31,420
get code up you're the person with

00:13:29,260 --> 00:13:32,710
responsibly to fix it up so it's a very

00:13:31,420 --> 00:13:34,150
good idea to understand the code you're

00:13:32,710 --> 00:13:36,190
contributing even if it was written by

00:13:34,150 --> 00:13:38,589
somebody else it's certainly important

00:13:36,190 --> 00:13:40,990
that you feel you own it enough to make

00:13:38,589 --> 00:13:43,029
changes to it because the maintainer is

00:13:40,990 --> 00:13:44,860
very likely to answer changes and you

00:13:43,029 --> 00:13:47,230
have to feel confident to make whatever

00:13:44,860 --> 00:13:50,710
changes are being made or resist changes

00:13:47,230 --> 00:13:52,350
if you think they're inappropriate it's

00:13:50,710 --> 00:13:55,180
also very useful to know what's going on

00:13:52,350 --> 00:13:57,400
in related areas as you're working

00:13:55,180 --> 00:14:00,730
upstream so there are lots of other sock

00:13:57,400 --> 00:14:02,200
vendors they have device drivers they

00:14:00,730 --> 00:14:04,089
may share features with yours they may

00:14:02,200 --> 00:14:07,210
not but it's certainly a very good idea

00:14:04,089 --> 00:14:09,880
to keep an eye on other work that people

00:14:07,210 --> 00:14:10,960
are doing in that framework there's two

00:14:09,880 --> 00:14:14,650
reasons one is the one written there

00:14:10,960 --> 00:14:16,320
that it may possibly create API changes

00:14:14,650 --> 00:14:19,089
that you ought to be tuned in to the

00:14:16,320 --> 00:14:21,279
other actually you get to watch the

00:14:19,089 --> 00:14:23,050
maintainer interact with people if you

00:14:21,279 --> 00:14:25,150
watch somebody else put in app changeset

00:14:23,050 --> 00:14:26,950
that's very like yours and the matana

00:14:25,150 --> 00:14:28,870
goes yet awesome I'll take that don't

00:14:26,950 --> 00:14:29,770
worry you look at the timing you see

00:14:28,870 --> 00:14:31,779
what the copper ridge the other

00:14:29,770 --> 00:14:33,130
contributor did right and you try to

00:14:31,779 --> 00:14:34,390
emulate their behavior as closely as

00:14:33,130 --> 00:14:35,680
possible because you know that what

00:14:34,390 --> 00:14:39,430
they've done is what that maintained

00:14:35,680 --> 00:14:41,290
alikes so it is very good idea to get in

00:14:39,430 --> 00:14:45,220
and watching what's happening in related

00:14:41,290 --> 00:14:46,240
areas there are some very very basic

00:14:45,220 --> 00:14:49,600
things that you should certainly not

00:14:46,240 --> 00:14:52,060
omit doing you should read the

00:14:49,600 --> 00:14:54,459
documentation for the subsystem to get

00:14:52,060 --> 00:14:56,110
an idea of how it is used what it's

00:14:54,459 --> 00:14:57,580
there for you may get some clues some

00:14:56,110 --> 00:15:00,370
testing from the documentation a sort of

00:14:57,580 --> 00:15:02,680
testing that should be done I've also

00:15:00,370 --> 00:15:06,310
written some bits in green here well

00:15:02,680 --> 00:15:09,100
gray possibly this is very arm specific

00:15:06,310 --> 00:15:11,170
but if you are working on anything

00:15:09,100 --> 00:15:12,490
except perhaps an enterprise arm 64

00:15:11,170 --> 00:15:14,620
system you will be working with device

00:15:12,490 --> 00:15:16,630
tree at the moment and there are

00:15:14,620 --> 00:15:19,000
ditional complexities that come with

00:15:16,630 --> 00:15:20,890
working with device tree and if the loss

00:15:19,000 --> 00:15:24,040
of your device tree that needs to be

00:15:20,890 --> 00:15:26,980
understood and the philosophy of device

00:15:24,040 --> 00:15:28,900
tree is that it's not I see what it is

00:15:26,980 --> 00:15:31,270
actually what device tree is is it's a

00:15:28,900 --> 00:15:32,680
description of the hardware it's not a

00:15:31,270 --> 00:15:34,000
description of what software features

00:15:32,680 --> 00:15:35,860
should be enabled or anything else it is

00:15:34,000 --> 00:15:37,779
a pure direct descrip

00:15:35,860 --> 00:15:40,390
of the hardware that the kernel can

00:15:37,779 --> 00:15:44,310
understand and work ahead to initialize

00:15:40,390 --> 00:15:47,920
itself and it's not linux specific

00:15:44,310 --> 00:15:50,800
device tree is used by the bsd s at the

00:15:47,920 --> 00:15:52,360
very minimum so if you put in a

00:15:50,800 --> 00:15:53,680
controversial device tree binding you

00:15:52,360 --> 00:15:55,480
can expect the linux maintained as

00:15:53,680 --> 00:15:57,310
perhaps to ping some of the bsd people

00:15:55,480 --> 00:15:58,810
to find what's going on so for that

00:15:57,310 --> 00:16:02,170
reason it is treated in a very special

00:15:58,810 --> 00:16:03,910
way and it is worth both reading about

00:16:02,170 --> 00:16:06,190
the device tree bindings and how they

00:16:03,910 --> 00:16:07,959
worked with and also perhaps even sit on

00:16:06,190 --> 00:16:10,209
the main rest a bit because if you sit

00:16:07,959 --> 00:16:12,040
on the mailing list you'll again you'll

00:16:10,209 --> 00:16:14,470
see lots of driver authors putting in

00:16:12,040 --> 00:16:16,149
device tree bindings and you will see

00:16:14,470 --> 00:16:18,670
the device tree maintained is responding

00:16:16,149 --> 00:16:20,410
to them and their responses can be very

00:16:18,670 --> 00:16:27,010
educational for you in working out what

00:16:20,410 --> 00:16:29,350
you need to do for your coat there is a

00:16:27,010 --> 00:16:31,360
lot I'll just hold you now to go and

00:16:29,350 --> 00:16:34,329
read several mailing lists and look out

00:16:31,360 --> 00:16:36,339
of the way other people are interacting

00:16:34,329 --> 00:16:39,250
with maintainence its natural way to

00:16:36,339 --> 00:16:40,570
understand the community so there's

00:16:39,250 --> 00:16:43,089
obviously a question which mainly miss

00:16:40,570 --> 00:16:47,670
you can read how many it is universally

00:16:43,089 --> 00:16:49,600
acknowledged that no one can possibly

00:16:47,670 --> 00:16:52,120
read the different the Linux kernel

00:16:49,600 --> 00:16:54,190
mailing list and remain productive they

00:16:52,120 --> 00:16:55,959
probably can't read the Linux kernel

00:16:54,190 --> 00:16:57,699
main list and remain sane there is just

00:16:55,959 --> 00:16:59,920
so much stuff going through it on a

00:16:57,699 --> 00:17:01,690
daily basis that you would simply never

00:16:59,920 --> 00:17:04,480
read it all so you have to work it how

00:17:01,690 --> 00:17:07,120
to filter down to a level where you can

00:17:04,480 --> 00:17:08,860
gain enough insight in the community to

00:17:07,120 --> 00:17:13,630
feel confident when you said come to

00:17:08,860 --> 00:17:15,400
send your code but also keep yourself

00:17:13,630 --> 00:17:18,040
and the work load of reading or email to

00:17:15,400 --> 00:17:20,980
a low enough level so one suggestion is

00:17:18,040 --> 00:17:22,179
to go into the Linux arm kernel that has

00:17:20,980 --> 00:17:25,419
the tremendous benefits that you'll see

00:17:22,179 --> 00:17:27,610
lots of device reactivity in it it's

00:17:25,419 --> 00:17:29,470
very active it's likely to be related if

00:17:27,610 --> 00:17:31,809
anybody in the room is working for mips

00:17:29,470 --> 00:17:32,919
and bad luck but you know it's very like

00:17:31,809 --> 00:17:35,590
to be related to what you're doing for a

00:17:32,919 --> 00:17:36,820
living it's a good start i'm going to be

00:17:35,590 --> 00:17:40,299
honest it's still actually quite high

00:17:36,820 --> 00:17:41,980
volume so I don't subscribe I filter

00:17:40,299 --> 00:17:43,360
things down boredness and we'll discuss

00:17:41,980 --> 00:17:46,730
that either at the end of this session

00:17:43,360 --> 00:17:50,430
or in the 201 session

00:17:46,730 --> 00:17:52,890
your things IRC channel so it can be

00:17:50,430 --> 00:17:56,040
hard work to find IRC channels but arm

00:17:52,890 --> 00:17:57,300
linux is a good starting point and you

00:17:56,040 --> 00:18:00,810
might even see introductions there to

00:17:57,300 --> 00:18:02,250
other things so as we saw in the last

00:18:00,810 --> 00:18:04,140
session being on mailing this is a good

00:18:02,250 --> 00:18:12,060
start but for short quick discussions

00:18:04,140 --> 00:18:15,120
you can learn things on IRC okay there

00:18:12,060 --> 00:18:17,400
are also lots of ways you can make what

00:18:15,120 --> 00:18:20,520
you might call a boring mistake your

00:18:17,400 --> 00:18:21,960
maintain asst sit there and they will

00:18:20,520 --> 00:18:24,210
receive lots of contributions and lots

00:18:21,960 --> 00:18:25,410
of people and they find it more exciting

00:18:24,210 --> 00:18:29,400
if you make a new and interesting

00:18:25,410 --> 00:18:30,930
mistake so they have put in lots of

00:18:29,400 --> 00:18:33,660
documentation to try and stop you for

00:18:30,930 --> 00:18:35,340
making boring mistakes so that there's

00:18:33,660 --> 00:18:36,660
very importance of top is the submitting

00:18:35,340 --> 00:18:38,370
patches that's the document that

00:18:36,660 --> 00:18:40,140
describes how to repair patch and gives

00:18:38,370 --> 00:18:42,300
you advice on how to get the quality to

00:18:40,140 --> 00:18:45,690
a level that your mistakes are unlikely

00:18:42,300 --> 00:18:48,150
to be boring this is mid checklist

00:18:45,690 --> 00:18:49,590
there's a bi the device tree section has

00:18:48,150 --> 00:18:50,880
its own submitting patches because it

00:18:49,590 --> 00:18:53,490
has their own unique rules for how to

00:18:50,880 --> 00:18:56,010
submit patches for it and then Greg

00:18:53,490 --> 00:18:58,530
kroah-hartman has created this long

00:18:56,010 --> 00:19:02,040
series of posts called how to piss off

00:18:58,530 --> 00:19:04,620
the colonel subsystem maintainer which

00:19:02,040 --> 00:19:06,300
documents effectively seen interesting

00:19:04,620 --> 00:19:07,740
set because it's very time separating it

00:19:06,300 --> 00:19:11,100
looks there like it was already a

00:19:07,740 --> 00:19:12,780
but i think it spans maybe 2003 2010

00:19:11,100 --> 00:19:15,570
it's a very wide time interval it was

00:19:12,780 --> 00:19:17,490
written in and it was basically the type

00:19:15,570 --> 00:19:18,930
of mistakes that people were making over

00:19:17,490 --> 00:19:21,480
and over again in that time period he

00:19:18,930 --> 00:19:23,250
was finding boring and so he described

00:19:21,480 --> 00:19:25,140
her board he was by these mistakes and

00:19:23,250 --> 00:19:32,460
tried to encourage people to make new

00:19:25,140 --> 00:19:34,530
and interesting mistakes so having

00:19:32,460 --> 00:19:36,200
understood how to create a patch or at

00:19:34,530 --> 00:19:38,850
least what processes you're going to use

00:19:36,200 --> 00:19:40,710
use git I think this is probably

00:19:38,850 --> 00:19:42,720
obviously so there was a period where

00:19:40,710 --> 00:19:44,340
there was some ambiguity about tools you

00:19:42,720 --> 00:19:45,780
might be best off using and the ref you

00:19:44,340 --> 00:19:48,210
very senior colonel maintained as who

00:19:45,780 --> 00:19:52,710
didn't choose to use the source control

00:19:48,210 --> 00:19:56,550
tools of the day but yeah used it and

00:19:52,710 --> 00:19:58,380
learn how to use get to make logical

00:19:56,550 --> 00:19:59,720
divisions of commits the sort of vice I

00:19:58,380 --> 00:20:02,360
mean

00:19:59,720 --> 00:20:04,970
it can be used to do partial commits

00:20:02,360 --> 00:20:07,100
either using the GUI or using the minus

00:20:04,970 --> 00:20:09,350
P feature the minus P is a patch and it

00:20:07,100 --> 00:20:11,450
shows you the fragments of your code one

00:20:09,350 --> 00:20:12,950
at a time and it allows you to example

00:20:11,450 --> 00:20:17,179
split things out into multiple patches

00:20:12,950 --> 00:20:20,240
to get the section incorrect each patch

00:20:17,179 --> 00:20:23,360
should be individually complete by which

00:20:20,240 --> 00:20:25,760
it means that you don't break the

00:20:23,360 --> 00:20:28,250
colonel builder any of the intervening

00:20:25,760 --> 00:20:30,200
bits it doesn't have to have made a

00:20:28,250 --> 00:20:31,549
functional change age level ami

00:20:30,200 --> 00:20:33,830
obviously if you're putting a driver in

00:20:31,549 --> 00:20:36,830
until you've got the driver enabled in

00:20:33,830 --> 00:20:38,990
the defconfig and in the device tree it

00:20:36,830 --> 00:20:40,880
won't actually function but you can

00:20:38,990 --> 00:20:42,950
compile it separately and bisect ability

00:20:40,880 --> 00:20:46,039
which is a way to search for regressions

00:20:42,950 --> 00:20:48,080
and correctly is a vital tool for

00:20:46,039 --> 00:20:50,000
hunting down bugs in Linux and if you if

00:20:48,080 --> 00:20:52,370
you have patches that don't lay to

00:20:50,000 --> 00:20:57,530
compile the code that can four straight

00:20:52,370 --> 00:20:59,990
line obviously again the Linux kernel

00:20:57,530 --> 00:21:02,270
community norms are for very small

00:20:59,990 --> 00:21:06,140
patches so when it says logical commits

00:21:02,270 --> 00:21:07,309
easy review speed acceptance I actually

00:21:06,140 --> 00:21:09,770
find the opposite problem there when I

00:21:07,309 --> 00:21:11,240
go to other projects I split it up as a

00:21:09,770 --> 00:21:13,190
kernel developer because that's kind of

00:21:11,240 --> 00:21:16,190
instinctive to me and I get told us gosh

00:21:13,190 --> 00:21:18,080
them together so yeah the Linux kernel

00:21:16,190 --> 00:21:20,450
very much is the smallest possible

00:21:18,080 --> 00:21:27,289
change is a good change if you've got

00:21:20,450 --> 00:21:28,850
three bug fixes three patches although

00:21:27,289 --> 00:21:30,650
if they're three bug fixes in a related

00:21:28,850 --> 00:21:33,049
area you might choose to do it as a

00:21:30,650 --> 00:21:34,669
multi-part series so if you've got a

00:21:33,049 --> 00:21:38,360
collection of things that are logically

00:21:34,669 --> 00:21:39,980
a feature but they're broken down you

00:21:38,360 --> 00:21:42,350
put them into a multi-part series and

00:21:39,980 --> 00:21:43,669
that allows both different maintain is

00:21:42,350 --> 00:21:45,320
to take different patches on the seat

00:21:43,669 --> 00:21:46,880
series and it also means that you can

00:21:45,320 --> 00:21:50,330
keep the patches as small as possible to

00:21:46,880 --> 00:21:53,120
keep everybody happy the other things

00:21:50,330 --> 00:21:54,710
you do with patches is U version them so

00:21:53,120 --> 00:21:56,480
the maintainer would have seen a patch

00:21:54,710 --> 00:21:58,490
they will have commented on the patch

00:21:56,480 --> 00:21:59,750
you would have gone away you would have

00:21:58,490 --> 00:22:02,000
changed it you'll have sent in a new

00:21:59,750 --> 00:22:03,740
patch if you don't version it it's

00:22:02,000 --> 00:22:06,590
really hard maintainer to figure out

00:22:03,740 --> 00:22:07,940
exactly what has changed they have to

00:22:06,590 --> 00:22:10,700
start renewing from scratch if they've

00:22:07,940 --> 00:22:12,020
invested time before if they've invested

00:22:10,700 --> 00:22:13,159
a lot of fun before and you've sent it

00:22:12,020 --> 00:22:14,809
without a version number

00:22:13,159 --> 00:22:18,169
they might we'll just ignore it I mean

00:22:14,809 --> 00:22:19,549
you compete from as described is

00:22:18,169 --> 00:22:21,320
competing from maintain our attention

00:22:19,549 --> 00:22:24,889
patches compete with lots of other

00:22:21,320 --> 00:22:26,210
patches and maintain your attention so

00:22:24,889 --> 00:22:28,159
if you do things to make your patcher

00:22:26,210 --> 00:22:29,570
annoying to review you are less like to

00:22:28,159 --> 00:22:34,249
get the maintainer attention that you

00:22:29,570 --> 00:22:37,399
need so you can see inversion there the

00:22:34,249 --> 00:22:39,229
other thing is that the norm is that if

00:22:37,399 --> 00:22:41,359
you're submitting a patch you've put a

00:22:39,229 --> 00:22:42,830
signed off by the bottom and the signed

00:22:41,359 --> 00:22:44,929
off by the bottom is implicitly saying

00:22:42,830 --> 00:22:47,690
that you believe the patch is fit and

00:22:44,929 --> 00:22:49,009
ready to go into the kernel so if you

00:22:47,690 --> 00:22:50,359
send in the patch and say actually this

00:22:49,009 --> 00:22:51,979
is a bit broken can you help me to

00:22:50,359 --> 00:22:54,499
figure out what I need to do to change

00:22:51,979 --> 00:22:56,090
the link or am i doing it right or is

00:22:54,499 --> 00:22:58,129
this the best way to solve the problem

00:22:56,090 --> 00:23:01,009
then you take it oh I see it means is

00:22:58,129 --> 00:23:02,269
request for comment and it's a it's a

00:23:01,009 --> 00:23:04,700
request basically saying that you think

00:23:02,269 --> 00:23:06,559
this plant isn't quite right but you

00:23:04,700 --> 00:23:09,289
would appreciate advice or comment or

00:23:06,559 --> 00:23:11,690
infusers and will help it's a very good

00:23:09,289 --> 00:23:13,340
way to get things now what you will also

00:23:11,690 --> 00:23:15,889
hear as you go in is there are

00:23:13,340 --> 00:23:19,669
maintained errs who are very busy and

00:23:15,889 --> 00:23:21,739
are filtering out all the RFC stuff it's

00:23:19,669 --> 00:23:23,720
true some maintain is do filter ifsc

00:23:21,739 --> 00:23:25,519
stuff and we'll never see it but there

00:23:23,720 --> 00:23:29,119
are other developers in and around that

00:23:25,519 --> 00:23:30,830
subsystem who will see it so despite the

00:23:29,119 --> 00:23:32,749
fact that some maintained as filter IRC

00:23:30,830 --> 00:23:34,549
stuff it is still worth having that

00:23:32,749 --> 00:23:36,139
tagged in if you don't believe your

00:23:34,549 --> 00:23:37,609
patch is fit for inclusion as you are

00:23:36,139 --> 00:23:45,009
sending it if you're seeking advice and

00:23:37,609 --> 00:23:48,320
help the commit message matters this is

00:23:45,009 --> 00:23:50,929
yeah I'm so indoctrinated I can't see

00:23:48,320 --> 00:23:52,249
what its controversial but a lot of

00:23:50,929 --> 00:23:56,330
people do think well I've got the code

00:23:52,249 --> 00:23:58,940
it looks perfect I love it the commit

00:23:56,330 --> 00:24:01,340
log is describing the benefit of the

00:23:58,940 --> 00:24:03,169
patch and the first thing I key thing is

00:24:01,340 --> 00:24:05,479
going to is to explain why the code that

00:24:03,169 --> 00:24:07,849
you're committing is worth putting in

00:24:05,479 --> 00:24:09,379
the girl in the first place so it's a

00:24:07,849 --> 00:24:11,269
very good idea to put a lot of attention

00:24:09,379 --> 00:24:13,129
into the commit messages spell them

00:24:11,269 --> 00:24:15,639
correctly simple spelling as we picked

00:24:13,129 --> 00:24:18,409
up and you'll have to rescind the patch

00:24:15,639 --> 00:24:20,889
so there's an example layer of the sort

00:24:18,409 --> 00:24:22,999
of the commit message you could use

00:24:20,889 --> 00:24:25,009
we'll also again discuss a little bit

00:24:22,999 --> 00:24:28,089
later some examples of really good and

00:24:25,009 --> 00:24:28,089
really bad commit messages

00:24:31,029 --> 00:24:34,789
reason one of the reasons to use get

00:24:32,899 --> 00:24:38,690
among many are the benefits of this

00:24:34,789 --> 00:24:40,789
format patch tool actually that's a

00:24:38,690 --> 00:24:42,110
thing to observe yes having said we talk

00:24:40,789 --> 00:24:44,330
about get pull requests all these things

00:24:42,110 --> 00:24:47,419
pull requests are mostly used between

00:24:44,330 --> 00:24:48,799
maintain errs to share code any

00:24:47,419 --> 00:24:52,669
contribution you make should almost

00:24:48,799 --> 00:24:54,710
always go into the the mailing list as a

00:24:52,669 --> 00:24:56,809
patch and this is an area where for

00:24:54,710 --> 00:24:59,269
example Linux and many other projects

00:24:56,809 --> 00:25:01,549
differ many other projects use Garrett

00:24:59,269 --> 00:25:03,820
or get help to manage pull the question

00:25:01,549 --> 00:25:07,429
the review processes are assisted with

00:25:03,820 --> 00:25:09,499
web tools the review process is for the

00:25:07,429 --> 00:25:11,090
colonel are assisted using mailing list

00:25:09,499 --> 00:25:14,480
tools so you sent patches to the main

00:25:11,090 --> 00:25:15,919
amidst minus malaise cover letter is

00:25:14,480 --> 00:25:18,139
important if you're sending a multi

00:25:15,919 --> 00:25:20,269
series patch because that will allocate

00:25:18,139 --> 00:25:22,850
you a patch zero where you can describe

00:25:20,269 --> 00:25:25,369
the purpose of the entire set and you

00:25:22,850 --> 00:25:27,499
can fill it in once you've generated

00:25:25,369 --> 00:25:31,149
your patch set run it through check

00:25:27,499 --> 00:25:34,340
patch because that will pick up again

00:25:31,149 --> 00:25:36,230
boring mistakes the colonel people are

00:25:34,340 --> 00:25:39,169
very used to getting boring mistakes and

00:25:36,230 --> 00:25:41,450
check patch is there to filter out a

00:25:39,169 --> 00:25:42,950
large number of boring miss lakes and

00:25:41,450 --> 00:25:44,600
common misspellings it's got a

00:25:42,950 --> 00:25:47,059
collection of ways in which people

00:25:44,600 --> 00:25:48,110
misspell things and it will remind you

00:25:47,059 --> 00:25:52,759
that you spelt it wrong and tell you how

00:25:48,110 --> 00:25:54,499
to fix it and then finally once you've

00:25:52,759 --> 00:25:57,080
got your set patches and you think is

00:25:54,499 --> 00:25:58,909
ready to go there is a tool to scan the

00:25:57,080 --> 00:26:02,990
maintain this file and help you figure

00:25:58,909 --> 00:26:05,960
out who to send that patch to and so you

00:26:02,990 --> 00:26:08,179
can use your tool to get the maintainer

00:26:05,960 --> 00:26:11,179
and then you said a good patch so you

00:26:08,179 --> 00:26:13,580
put the maintainers on the to list and

00:26:11,179 --> 00:26:15,559
you put mailing this typically on a cc

00:26:13,580 --> 00:26:18,769
and if there are other interested

00:26:15,559 --> 00:26:20,450
parties so there might be reviewers that

00:26:18,769 --> 00:26:22,220
come up out of the maintain is in

00:26:20,450 --> 00:26:24,889
certain areas where there aren't very

00:26:22,220 --> 00:26:27,529
many people involved check patch will go

00:26:24,889 --> 00:26:30,710
and search through the history of the

00:26:27,529 --> 00:26:32,749
patch looking for people who have

00:26:30,710 --> 00:26:35,000
contributed to the same driver if you're

00:26:32,749 --> 00:26:36,919
working in frameworks it will look for

00:26:35,000 --> 00:26:38,600
other people in the ghetto street is to

00:26:36,919 --> 00:26:39,920
use worked on it and if you can see

00:26:38,600 --> 00:26:42,170
somebody who's written lots and lots of

00:26:39,920 --> 00:26:44,090
code in that particular file the old

00:26:42,170 --> 00:26:45,800
drink you might use to put them on CC

00:26:44,090 --> 00:26:50,420
because as the original author of that

00:26:45,800 --> 00:26:52,660
code they reviewed by tag is useful in

00:26:50,420 --> 00:26:54,980
terms of getting the code upstream

00:26:52,660 --> 00:26:57,010
there's then even a toolkit send email

00:26:54,980 --> 00:26:59,300
which will help you post the patches

00:26:57,010 --> 00:27:01,790
once you've created them without making

00:26:59,300 --> 00:27:04,880
any kind of boring mistakes it'll the

00:27:01,790 --> 00:27:07,100
mail user agent level gets an email is

00:27:04,880 --> 00:27:10,070
pretty configurable you can connect it

00:27:07,100 --> 00:27:11,840
to you know password controlled a smtp

00:27:10,070 --> 00:27:14,750
servers and things like that you can

00:27:11,840 --> 00:27:16,310
configure it never I ative ways and then

00:27:14,750 --> 00:27:20,270
you sit back and you wait for those

00:27:16,310 --> 00:27:21,890
comments to roll in expecting comments

00:27:20,270 --> 00:27:23,930
doesn't really mean you know expect

00:27:21,890 --> 00:27:27,110
comments straight away it more means

00:27:23,930 --> 00:27:30,530
that it's not a bad thing if somebody

00:27:27,110 --> 00:27:32,720
asks you to change it if they've asked

00:27:30,530 --> 00:27:34,640
you to make a small change what that

00:27:32,720 --> 00:27:36,500
implicitly means is they've read the

00:27:34,640 --> 00:27:39,170
code and they don't think anything else

00:27:36,500 --> 00:27:40,760
that it needs to be changed if they say

00:27:39,170 --> 00:27:42,380
you've done it completely wrong at least

00:27:40,760 --> 00:27:45,320
you've got out early enough and you can

00:27:42,380 --> 00:27:46,670
start working in a new direction so when

00:27:45,320 --> 00:27:48,140
it says expect comments it's more being

00:27:46,670 --> 00:27:51,560
you know be receptive and listen to

00:27:48,140 --> 00:27:53,030
comments when they come back and the

00:27:51,560 --> 00:27:56,870
reason it isn't actually that uncommon

00:27:53,030 --> 00:27:59,210
to get no response certainly not quite

00:27:56,870 --> 00:28:00,680
as fast as you might like be patient I

00:27:59,210 --> 00:28:02,560
mean maintainers are very busy and

00:28:00,680 --> 00:28:05,480
particularly during the merge window

00:28:02,560 --> 00:28:06,830
they are tremendously busy trying to get

00:28:05,480 --> 00:28:08,480
the code into Linus and fix any

00:28:06,830 --> 00:28:13,850
last-minute bugs before you get the RC

00:28:08,480 --> 00:28:17,510
one end so yeah my advice actually is

00:28:13,850 --> 00:28:18,680
don't ever beg somebody to pay more

00:28:17,510 --> 00:28:21,350
attention to your patch while the verge

00:28:18,680 --> 00:28:24,530
windows open it's it quite often

00:28:21,350 --> 00:28:25,700
regarded as bad manners there's even in

00:28:24,530 --> 00:28:27,050
the past be some debate about whether

00:28:25,700 --> 00:28:29,090
you should tim patches at all during the

00:28:27,050 --> 00:28:30,290
merge window the conclusion of that

00:28:29,090 --> 00:28:31,460
debate was that you can same patch

00:28:30,290 --> 00:28:34,550
history in the merge we know to most

00:28:31,460 --> 00:28:36,200
maintained errs but yes you certainly

00:28:34,550 --> 00:28:38,990
should not say ping have you looked at

00:28:36,200 --> 00:28:40,400
can you have a look at my patch anyway

00:28:38,990 --> 00:28:43,940
if you wait a week and it's not the most

00:28:40,400 --> 00:28:45,500
windows open you can send a pic via

00:28:43,940 --> 00:28:48,230
resent so in all those tanks we have

00:28:45,500 --> 00:28:50,270
before patch RFC versioning you can also

00:28:48,230 --> 00:28:51,710
add the word resent just to remind

00:28:50,270 --> 00:28:54,190
people that you're still there and you'd

00:28:51,710 --> 00:28:54,190
like some help

00:28:54,810 --> 00:28:58,480
so you keep an eye out for tough

00:28:57,250 --> 00:29:00,160
questions you know you are going to have

00:28:58,480 --> 00:29:01,780
to justify the decisions you've made and

00:29:00,160 --> 00:29:05,560
this is the reason why I suggested you

00:29:01,780 --> 00:29:09,760
should know your content maintained is

00:29:05,560 --> 00:29:11,140
are they aren't always correct bo start

00:29:09,760 --> 00:29:12,880
by assuming they are unless you can

00:29:11,140 --> 00:29:16,210
construct an argument by which they're

00:29:12,880 --> 00:29:19,570
not as we need to be able to express

00:29:16,210 --> 00:29:21,760
disagreement with facts as I think Sarah

00:29:19,570 --> 00:29:25,000
mentioned earlier you need to be strong

00:29:21,760 --> 00:29:25,990
and to be clear you need to make you can

00:29:25,000 --> 00:29:27,370
make technik arguments if they've

00:29:25,990 --> 00:29:28,750
suggested that some ways faster and

00:29:27,370 --> 00:29:30,670
you've already benchmarked it it's very

00:29:28,750 --> 00:29:31,900
simple we apply yourself benchmark that

00:29:30,670 --> 00:29:36,340
already and I've done like this because

00:29:31,900 --> 00:29:39,430
it was faster but yes if it's a matter

00:29:36,340 --> 00:29:43,210
of taste and you can't create effect

00:29:39,430 --> 00:29:45,070
then just follow the matter of taste if

00:29:43,210 --> 00:29:47,220
you can't have a clear argument as to

00:29:45,070 --> 00:29:51,160
why the way you want to do it is better

00:29:47,220 --> 00:29:52,630
make the changes requested if you don't

00:29:51,160 --> 00:29:54,340
understand why they actually do

00:29:52,630 --> 00:29:55,720
something is absolutely fine to ask the

00:29:54,340 --> 00:29:57,540
clarification you can have some very

00:29:55,720 --> 00:29:59,020
useful dialogue with maintainence

00:29:57,540 --> 00:30:02,650
ultimately a form of relationship

00:29:59,020 --> 00:30:04,690
building so if you get comments you to

00:30:02,650 --> 00:30:07,480
understand it's very sensible to ask the

00:30:04,690 --> 00:30:09,390
clarification don't make assumptions and

00:30:07,480 --> 00:30:12,160
very critically don't ignore comments

00:30:09,390 --> 00:30:19,620
the convention on the mailing list is

00:30:12,160 --> 00:30:22,870
that an unreliable are having debates

00:30:19,620 --> 00:30:24,670
typically it's assumed by and large

00:30:22,870 --> 00:30:27,130
except perhaps in serious flame wars

00:30:24,670 --> 00:30:31,330
that the last comment is the kind of

00:30:27,130 --> 00:30:33,100
final word it is the agreed position so

00:30:31,330 --> 00:30:34,330
if you don't reply what that means you

00:30:33,100 --> 00:30:41,380
agree with everything the maintainer has

00:30:34,330 --> 00:30:44,200
asked you to do I mentioned using a sane

00:30:41,380 --> 00:30:45,400
email client when you've used gets an

00:30:44,200 --> 00:30:47,020
email you've already sent everything out

00:30:45,400 --> 00:30:48,820
and if I order but in order to engage

00:30:47,020 --> 00:30:51,040
with the discussion with the maintainer

00:30:48,820 --> 00:30:53,620
you need to follow the conventions used

00:30:51,040 --> 00:30:56,680
by the community and they are esky

00:30:53,620 --> 00:30:58,000
centric actually not there probably

00:30:56,680 --> 00:31:00,160
Unicode central easily but there

00:30:58,000 --> 00:31:02,530
certainly take centric it's not HTML

00:31:00,160 --> 00:31:05,080
it's plain text typically wrapped to a

00:31:02,530 --> 00:31:06,370
fairly narrow width so that when you

00:31:05,080 --> 00:31:09,070
quote it doesn't start over

00:31:06,370 --> 00:31:10,720
doing an 80 column terminal it's a good

00:31:09,070 --> 00:31:12,790
idea to have threading working so that

00:31:10,720 --> 00:31:14,740
when you make a reply most maintain us

00:31:12,790 --> 00:31:16,600
will be using threading email clients to

00:31:14,740 --> 00:31:19,750
keep track of what's going on with the

00:31:16,600 --> 00:31:22,150
various comments has been made again

00:31:19,750 --> 00:31:24,730
board mistakes don't do them there is a

00:31:22,150 --> 00:31:28,059
document called email clients helping

00:31:24,730 --> 00:31:30,250
you find email times the Argonne of

00:31:28,059 --> 00:31:31,750
course trouble so she can't belong the

00:31:30,250 --> 00:31:34,420
two if you see things like pine in there

00:31:31,750 --> 00:31:36,040
so on I'll confess i personally use

00:31:34,420 --> 00:31:38,230
thunderbird with everything waste into

00:31:36,040 --> 00:31:40,450
text mode it's not that you can't use

00:31:38,230 --> 00:31:41,470
modern GUI email is it's that you have

00:31:40,450 --> 00:31:43,780
to make sure they're appropriately

00:31:41,470 --> 00:31:44,950
configured and again the documentation

00:31:43,780 --> 00:31:49,990
on it will help you configure it

00:31:44,950 --> 00:31:52,120
directly don't worry about getting

00:31:49,990 --> 00:31:55,390
flamed I mean of all the things that can

00:31:52,120 --> 00:31:56,860
go wrong in the world being flamed by

00:31:55,390 --> 00:32:01,210
maintainer is both very unlikely and

00:31:56,860 --> 00:32:03,010
also not the end of the world so yeah

00:32:01,210 --> 00:32:05,380
other document practices try not to make

00:32:03,010 --> 00:32:06,640
boring mistakes if that's the other

00:32:05,380 --> 00:32:09,400
thing I mean I've made plenty of boring

00:32:06,640 --> 00:32:11,110
mistakes in my time quick apology is one

00:32:09,400 --> 00:32:13,030
of the best corrections you can offer

00:32:11,110 --> 00:32:14,080
you know BB reactive when somebody's

00:32:13,030 --> 00:32:16,390
giving you feedback whether its

00:32:14,080 --> 00:32:17,980
technical or social if they said you're

00:32:16,390 --> 00:32:19,600
acting like a idiot don't do that again

00:32:17,980 --> 00:32:21,970
then you say yeah sorry I won't do that

00:32:19,600 --> 00:32:26,559
again you it's enough to clean things up

00:32:21,970 --> 00:32:29,350
to acknowledge miss names so when you

00:32:26,559 --> 00:32:32,020
have these things it's best to be as

00:32:29,350 --> 00:32:34,240
responsive as you can while the issue is

00:32:32,020 --> 00:32:37,210
still fresh in people's mind that is the

00:32:34,240 --> 00:32:39,220
point when you replied quickly can get

00:32:37,210 --> 00:32:40,660
resolution quickly you know faster you

00:32:39,220 --> 00:32:41,920
can turn a patch ryona react to the

00:32:40,660 --> 00:32:45,520
feedback that you've had from maintained

00:32:41,920 --> 00:32:49,660
as and other reviewers the more quickly

00:32:45,520 --> 00:32:51,100
and more alert everybody is it can also

00:32:49,660 --> 00:32:53,080
get you through multiple iterations much

00:32:51,100 --> 00:32:58,840
more quickly you know you've only got

00:32:53,080 --> 00:33:00,610
that three week four week period so yeah

00:32:58,840 --> 00:33:02,110
if you release rc2 you've got to make

00:33:00,610 --> 00:33:04,630
agreement and complete everything by RC

00:33:02,110 --> 00:33:07,690
5 so the first you had to write the

00:33:04,630 --> 00:33:10,360
better make sure when you resubmit that

00:33:07,690 --> 00:33:12,940
there is a version number and the common

00:33:10,360 --> 00:33:14,920
convention is to include a changelog so

00:33:12,940 --> 00:33:16,720
that maintainer or anybody else can very

00:33:14,920 --> 00:33:19,770
quickly wisden the patch and check that

00:33:16,720 --> 00:33:19,770
their feedback has been incorporated

00:33:20,220 --> 00:33:24,940
and now it's been accepted yay we're

00:33:22,930 --> 00:33:27,910
done all right we'll go on me really go

00:33:24,940 --> 00:33:31,030
on with the rest of our lives it's a

00:33:27,910 --> 00:33:34,000
good idea to stay round keep your email

00:33:31,030 --> 00:33:35,050
er connected with appropriate filters to

00:33:34,000 --> 00:33:38,410
keep an eye on the code that you've

00:33:35,050 --> 00:33:40,840
written there may be contributions

00:33:38,410 --> 00:33:42,610
somebody else may want to extend your

00:33:40,840 --> 00:33:44,710
driver fix your driver and so on and so

00:33:42,610 --> 00:33:46,900
forth if you're there to review what

00:33:44,710 --> 00:33:49,570
they've done and send your act by it's a

00:33:46,900 --> 00:33:51,460
nice contribution it encourages further

00:33:49,570 --> 00:33:55,270
changes things the other thing is

00:33:51,460 --> 00:33:56,830
testing your the sock render nobody is

00:33:55,270 --> 00:33:59,590
more motivated than you to keep your

00:33:56,830 --> 00:34:02,260
sock working while when something goes

00:33:59,590 --> 00:34:03,670
upstream if AP ice change people tend to

00:34:02,260 --> 00:34:05,620
automatically change your drivers it

00:34:03,670 --> 00:34:07,260
conforms the api's they won't have

00:34:05,620 --> 00:34:11,980
tested it they won't know still works

00:34:07,260 --> 00:34:16,000
keeping it tested is usually a good job

00:34:11,980 --> 00:34:18,220
for you to do so we have a summary at

00:34:16,000 --> 00:34:21,639
this point which is the iteration

00:34:18,220 --> 00:34:23,200
everything I've spoken about putting

00:34:21,639 --> 00:34:24,850
that time you preparing understanding

00:34:23,200 --> 00:34:27,700
the processes you're going to take part

00:34:24,850 --> 00:34:30,730
in it is a good idea if you if you can

00:34:27,700 --> 00:34:33,340
find something small to work with find a

00:34:30,730 --> 00:34:34,510
driver that is where there's lots of

00:34:33,340 --> 00:34:36,100
them where there's a lot of power to

00:34:34,510 --> 00:34:42,490
copy where there's not any innovation

00:34:36,100 --> 00:34:44,830
happening if you can you probably don't

00:34:42,490 --> 00:34:46,179
understand what you are does if you can

00:34:44,830 --> 00:34:47,649
avoid making the you out your first

00:34:46,179 --> 00:34:49,330
driver that's a good plan to do it

00:34:47,649 --> 00:34:50,830
doesn't matter if you do it you out but

00:34:49,330 --> 00:34:54,340
there's a lot of strange and easter

00:34:50,830 --> 00:34:55,929
tarek things in you are drivers strange

00:34:54,340 --> 00:34:58,150
areas of POSIX compliant in the ER no

00:34:55,929 --> 00:34:59,680
replies and things like that if you can

00:34:58,150 --> 00:35:01,360
pick a different driver do if you can't

00:34:59,680 --> 00:35:03,520
you are is obviously one of the most

00:35:01,360 --> 00:35:04,900
important drivers because it's one of

00:35:03,520 --> 00:35:07,810
the kind of four or five things you have

00:35:04,900 --> 00:35:09,490
to do to get basic boonton move from am

00:35:07,810 --> 00:35:12,250
disc working but if you can avoid it

00:35:09,490 --> 00:35:14,320
being the UART so much the better ask

00:35:12,250 --> 00:35:15,790
questions there's nothing wrong as

00:35:14,320 --> 00:35:17,500
nothing dishonorable about asking for

00:35:15,790 --> 00:35:18,700
help on the main leanest providing

00:35:17,500 --> 00:35:22,540
you're doing an appropriate way with the

00:35:18,700 --> 00:35:25,750
right email client and reacting quickly

00:35:22,540 --> 00:35:27,400
and understanding a merger window so I

00:35:25,750 --> 00:35:28,840
will pause the comments at this point if

00:35:27,400 --> 00:35:30,850
anybody has any questions now is an

00:35:28,840 --> 00:35:33,100
excellent time to ask them I do have

00:35:30,850 --> 00:35:33,700
some more material if there's anything

00:35:33,100 --> 00:35:35,770
burn

00:35:33,700 --> 00:35:42,450
people's minds now it's a really good

00:35:35,770 --> 00:35:46,869
time to ask there's a microphone comment

00:35:42,450 --> 00:35:49,540
you you talk about change logs and in a

00:35:46,869 --> 00:35:51,880
patch series that you have multiple

00:35:49,540 --> 00:35:54,010
revisions on do you have an example of

00:35:51,880 --> 00:35:56,609
what you mean in terms of change log I

00:35:54,010 --> 00:36:00,160
think that would come pin 201 I hope

00:35:56,609 --> 00:36:02,980
it's a free form text most people have

00:36:00,160 --> 00:36:05,530
their own personal style so I tend to

00:36:02,980 --> 00:36:07,240
put the version of the patch so VB to

00:36:05,530 --> 00:36:10,300
colon and then I was just create a

00:36:07,240 --> 00:36:13,750
bulleted list of the changes I've made I

00:36:10,300 --> 00:36:16,270
quite often follow each change in a with

00:36:13,750 --> 00:36:19,320
a bracket describing who who submitted

00:36:16,270 --> 00:36:21,250
that change so he requested the change

00:36:19,320 --> 00:36:22,630
because again if that means reviewers

00:36:21,250 --> 00:36:24,579
can scan down and look for their name

00:36:22,630 --> 00:36:26,230
and they might be done it just save some

00:36:24,579 --> 00:36:27,430
time so my personal preference is to

00:36:26,230 --> 00:36:29,530
include the name of the person he

00:36:27,430 --> 00:36:31,960
requested the change both to credit them

00:36:29,530 --> 00:36:33,510
and to make their job more easier to

00:36:31,960 --> 00:36:35,950
look at things but it's free full text

00:36:33,510 --> 00:36:39,540
so so a tag and a bulleted list is a

00:36:35,950 --> 00:36:39,540
very sensible and easy way to do it

00:36:50,230 --> 00:37:00,090
you mentioned patch series and how do

00:36:55,150 --> 00:37:00,090
you determine a method of partitioning

00:37:02,970 --> 00:37:08,230
can I take the drive for example drive

00:37:04,960 --> 00:37:11,410
is very easy so if you're writing a

00:37:08,230 --> 00:37:16,050
patch at sour patch series to enable a

00:37:11,410 --> 00:37:18,730
particular driver lipless taking you out

00:37:16,050 --> 00:37:20,170
if you're writing it for our then you

00:37:18,730 --> 00:37:23,890
will need to introduce the device tree

00:37:20,170 --> 00:37:26,080
bindings you will need so I document the

00:37:23,890 --> 00:37:27,490
device tree bindings because the first

00:37:26,080 --> 00:37:28,540
thing in all patch sets we're going to

00:37:27,490 --> 00:37:29,920
come to this uh maybe is to have the

00:37:28,540 --> 00:37:31,780
device tree bindings you'll need the

00:37:29,920 --> 00:37:34,210
driver itself so that means the driver

00:37:31,780 --> 00:37:36,550
and the changes to the make file to

00:37:34,210 --> 00:37:39,520
cause it to compile you might need

00:37:36,550 --> 00:37:40,630
another pair to change the defconfig so

00:37:39,520 --> 00:37:42,670
if you want this drivers be enabled by

00:37:40,630 --> 00:37:43,810
default that you don't put those in the

00:37:42,670 --> 00:37:46,960
same patch because they're owned by

00:37:43,810 --> 00:37:48,430
different people and also you will need

00:37:46,960 --> 00:37:51,460
then to have a patch to modify the

00:37:48,430 --> 00:37:53,260
device tree so that your driver is able

00:37:51,460 --> 00:37:55,780
to bind when you load it with the right

00:37:53,260 --> 00:37:56,980
device ettore so there's a simple

00:37:55,780 --> 00:37:59,800
partitioning I mean there are other much

00:37:56,980 --> 00:38:02,440
more complicated examples went realized

00:37:59,800 --> 00:38:03,640
if it gets gray maintaining full comment

00:38:02,440 --> 00:38:07,440
on your partitioning as much nothing

00:38:03,640 --> 00:38:09,369
else so for example I've got a

00:38:07,440 --> 00:38:12,550
complicated architecture patch that I'm

00:38:09,369 --> 00:38:14,140
working on the moment and I've parties i

00:38:12,550 --> 00:38:15,880
lovingly partitioned it as carefully as

00:38:14,140 --> 00:38:18,280
I could i made as logical as i could and

00:38:15,880 --> 00:38:19,990
i was a solicitor slice the thing into

00:38:18,280 --> 00:38:22,660
and call it to separate patch series

00:38:19,990 --> 00:38:24,400
because may need make some pretty

00:38:22,660 --> 00:38:27,940
fundamental changes to the way the RS

00:38:24,400 --> 00:38:29,650
works on an arm so they wanted to have

00:38:27,940 --> 00:38:32,109
the fundamental changes in one thing and

00:38:29,650 --> 00:38:34,330
the features in somewhere else so they

00:38:32,109 --> 00:38:36,010
could do a kernel cycle with the one

00:38:34,330 --> 00:38:37,510
thing in it and then follow it up but

00:38:36,010 --> 00:38:40,030
the maintainers help me with that you

00:38:37,510 --> 00:38:42,609
know I I submitted the way I thought was

00:38:40,030 --> 00:38:44,050
right I was asked to partition here I

00:38:42,609 --> 00:38:45,520
did actually challenged the maintainer

00:38:44,050 --> 00:38:46,869
who suggested I said leader up he came

00:38:45,520 --> 00:38:49,840
back with very very good reasons for me

00:38:46,869 --> 00:38:51,550
so yeah you can be fairly relaxed about

00:38:49,840 --> 00:38:53,320
it and in the next session we will also

00:38:51,550 --> 00:38:57,480
go into a bit more detail with examples

00:38:53,320 --> 00:38:57,480
of constructing patch sense

00:39:03,780 --> 00:39:06,870
well actually you put your hands up

00:39:05,280 --> 00:39:08,880
anytime if you like but I do have some

00:39:06,870 --> 00:39:11,340
preview material what I've done is for

00:39:08,880 --> 00:39:13,290
this training session this year I've

00:39:11,340 --> 00:39:15,000
added some new materials is quite of

00:39:13,290 --> 00:39:17,010
course we've been running in a same form

00:39:15,000 --> 00:39:18,720
quite a number of times i've added lots

00:39:17,010 --> 00:39:20,790
of new material and i haven't done my

00:39:18,720 --> 00:39:23,160
timings and events so i added a bit of

00:39:20,790 --> 00:39:24,810
tactile material to each presentation so

00:39:23,160 --> 00:39:27,810
that i can overrun or under run and

00:39:24,810 --> 00:39:30,030
still gone to it before we do that I

00:39:27,810 --> 00:39:32,400
should like to say this is a gimmick but

00:39:30,030 --> 00:39:35,070
this presentation that comes with a

00:39:32,400 --> 00:39:36,930
lifetime warranty so anybody in the

00:39:35,070 --> 00:39:38,760
audience here today who at any point

00:39:36,930 --> 00:39:40,680
wants to discuss anything that's come up

00:39:38,760 --> 00:39:42,990
in either session there's an email

00:39:40,680 --> 00:39:44,640
address there which will be active for

00:39:42,990 --> 00:39:47,090
essentially as long as the IRS with

00:39:44,640 --> 00:39:49,800
people to help you it goes to my team

00:39:47,090 --> 00:39:51,750
you'll be surprised how many senior

00:39:49,800 --> 00:39:53,610
people you'll be copied in but yeah

00:39:51,750 --> 00:39:57,150
it'll go past my desk it will go past

00:39:53,610 --> 00:40:00,360
the desk at most people on my team and

00:39:57,150 --> 00:40:03,420
yet we will help you I think if you work

00:40:00,360 --> 00:40:05,760
for a group member club or core member

00:40:03,420 --> 00:40:07,830
you can even go outside the scope of the

00:40:05,760 --> 00:40:09,690
presentation for members we will put

00:40:07,830 --> 00:40:13,370
extra effort in club and core members we

00:40:09,690 --> 00:40:16,290
can even do helping specific mentoring

00:40:13,370 --> 00:40:18,090
so yeah it has a guarantee if you want

00:40:16,290 --> 00:40:22,560
to talk about in the future please do i

00:40:18,090 --> 00:40:23,790
would appreciate the feedback okay so

00:40:22,560 --> 00:40:25,350
this is a preview the next session

00:40:23,790 --> 00:40:27,270
effectively I'm assuming that because

00:40:25,350 --> 00:40:29,130
these sessions are so closely related I

00:40:27,270 --> 00:40:30,690
shan't get many people for the next

00:40:29,130 --> 00:40:31,710
session you are sitting in this one so

00:40:30,690 --> 00:40:33,450
I'm going to preview some of the

00:40:31,710 --> 00:40:34,650
material that's really closely related

00:40:33,450 --> 00:40:37,460
to what I've been talking about and

00:40:34,650 --> 00:40:39,600
that's this filtering of mailing lists

00:40:37,460 --> 00:40:41,400
lots of people filter may notice in a

00:40:39,600 --> 00:40:47,280
lot of different ways once they're gone

00:40:41,400 --> 00:40:49,860
black yeah we get home excuse me Raymond

00:40:47,280 --> 00:40:53,340
o is an extra page let me go thank you

00:40:49,860 --> 00:40:54,480
pardon right so I know I know yeah why

00:40:53,340 --> 00:40:57,060
do we filter the Magnus well

00:40:54,480 --> 00:40:59,070
fundamentally because you can't not

00:40:57,060 --> 00:41:00,480
filter you have to find a way to filter

00:40:59,070 --> 00:41:04,290
because there's too much information you

00:41:00,480 --> 00:41:06,630
can absorb any other way but one very

00:41:04,290 --> 00:41:08,910
simple technique is to apply to

00:41:06,630 --> 00:41:11,580
subscribe to the full linux kernel

00:41:08,910 --> 00:41:15,240
mailing list and filter it really

00:41:11,580 --> 00:41:17,110
aggressively and that means taking out

00:41:15,240 --> 00:41:18,700
the verge of the context

00:41:17,110 --> 00:41:20,050
and using those aggressive filters so

00:41:18,700 --> 00:41:22,570
that you're focusing on the areas that

00:41:20,050 --> 00:41:25,360
really interest you based on whether

00:41:22,570 --> 00:41:27,160
that's your personal interests if you're

00:41:25,360 --> 00:41:31,390
a manager who can use it to watch what's

00:41:27,160 --> 00:41:33,460
happening in your team if you are normal

00:41:31,390 --> 00:41:35,080
engineer you can use it to watch related

00:41:33,460 --> 00:41:36,340
subject areas if you're working on the

00:41:35,080 --> 00:41:40,120
you are a driver you can watch other

00:41:36,340 --> 00:41:41,410
people submit you are drivers so the

00:41:40,120 --> 00:41:45,040
good habits if you're filtering the

00:41:41,410 --> 00:41:46,300
mailing list is to have a whitelist you

00:41:45,040 --> 00:41:49,180
don't want to filter out what you're not

00:41:46,300 --> 00:41:50,860
interested in you want to filter in what

00:41:49,180 --> 00:41:53,410
you are interested in and you just

00:41:50,860 --> 00:41:55,690
delete everything else don't try holding

00:41:53,410 --> 00:41:57,970
it your hard disk can be used to other

00:41:55,690 --> 00:41:59,410
things all the stuff that happens in the

00:41:57,970 --> 00:42:01,150
mailing list are available from search

00:41:59,410 --> 00:42:02,800
engines there's a lot lot easier to

00:42:01,150 --> 00:42:04,180
search with the search engine google is

00:42:02,800 --> 00:42:05,650
much better at searching text than

00:42:04,180 --> 00:42:10,150
whatever emailing you possibly could

00:42:05,650 --> 00:42:12,430
fight I like to have a filter that keeps

00:42:10,150 --> 00:42:15,100
an eye on code that I've contributed so

00:42:12,430 --> 00:42:17,320
that if it slips through and if my other

00:42:15,100 --> 00:42:20,410
filters the fact that it's a father I

00:42:17,320 --> 00:42:27,310
worked on will pick it up and show it to

00:42:20,410 --> 00:42:28,960
me have a look at the git log for

00:42:27,310 --> 00:42:30,760
drivers in the directory you're

00:42:28,960 --> 00:42:32,280
interested in and you will notice that

00:42:30,760 --> 00:42:35,320
they start with a collection of tags

00:42:32,280 --> 00:42:37,420
like TTYL colon you ought for example if

00:42:35,320 --> 00:42:39,550
you're working are you out so you have a

00:42:37,420 --> 00:42:41,140
quick look at the the logs for the

00:42:39,550 --> 00:42:43,090
directory that you were interested in

00:42:41,140 --> 00:42:45,340
looking at and you'll get a feel for

00:42:43,090 --> 00:42:47,500
those tags and then you make put those

00:42:45,340 --> 00:42:48,820
tags on your white list so the drive of

00:42:47,500 --> 00:42:52,390
interest you comes up in your mailer

00:42:48,820 --> 00:42:54,760
when you're looking at it and the final

00:42:52,390 --> 00:42:56,950
thing is assuming you are a fairly

00:42:54,760 --> 00:42:58,270
curious person you will still get quite

00:42:56,950 --> 00:42:59,500
a lot of email because you'll have ended

00:42:58,270 --> 00:43:03,550
up subscribing yourself to quite a lot

00:42:59,500 --> 00:43:06,430
of stuff so you now have to cope with

00:43:03,550 --> 00:43:07,810
that volume of email and so r attempting

00:43:06,430 --> 00:43:09,430
to write a filter Nair to take all that

00:43:07,810 --> 00:43:12,060
stuff and throw it off into a side email

00:43:09,430 --> 00:43:15,160
address you know separate email box

00:43:12,060 --> 00:43:17,290
which you then never read and you then

00:43:15,160 --> 00:43:20,170
delete every two months everything for

00:43:17,290 --> 00:43:22,270
men start again so I prefer to keep that

00:43:20,170 --> 00:43:25,360
in my novel mailbox flow and I don't

00:43:22,270 --> 00:43:30,400
hide it for myself I use marks or

00:43:25,360 --> 00:43:31,030
colorization so that email to me CC door

00:43:30,400 --> 00:43:32,620
to

00:43:31,030 --> 00:43:35,080
it shows to be in a different color than

00:43:32,620 --> 00:43:36,670
stuff off the mailing list and their way

00:43:35,080 --> 00:43:40,300
that's great is that that allows me then

00:43:36,670 --> 00:43:42,640
to filter very quickly I can look at the

00:43:40,300 --> 00:43:44,980
subject line and if the subject line

00:43:42,640 --> 00:43:46,930
interested me I can read it and because

00:43:44,980 --> 00:43:48,940
it's a separate color if the subject

00:43:46,930 --> 00:43:50,080
line doesn't interest me I don't have to

00:43:48,940 --> 00:43:53,200
even open it i can delete it without

00:43:50,080 --> 00:43:54,460
looking at it so that's the personal all

00:43:53,200 --> 00:43:56,020
I think you should add yourselves if

00:43:54,460 --> 00:43:58,840
you're doing this kind of filtering is

00:43:56,020 --> 00:43:59,920
that for tagged email you just press

00:43:58,840 --> 00:44:03,670
delete straight away if you're not

00:43:59,920 --> 00:44:08,080
interested the final detail actually is

00:44:03,670 --> 00:44:09,280
that make sure that you are only hiding

00:44:08,080 --> 00:44:12,250
mailing list traffic from yourself

00:44:09,280 --> 00:44:15,190
because if you've contributed code you

00:44:12,250 --> 00:44:16,990
will now be on the CC list of a another

00:44:15,190 --> 00:44:18,940
patch that may be of interest you and is

00:44:16,990 --> 00:44:21,760
important that if you're in the two in

00:44:18,940 --> 00:44:23,200
CC list that you highlight it for

00:44:21,760 --> 00:44:25,150
yourself so you don't quickly skim

00:44:23,200 --> 00:44:26,650
through and delete it because you

00:44:25,150 --> 00:44:28,570
probably get need to get involved in the

00:44:26,650 --> 00:44:30,370
renew for various reasons that make

00:44:28,570 --> 00:44:33,520
sense i'm not sure i've explained it as

00:44:30,370 --> 00:44:34,930
best I could but you know I personally

00:44:33,520 --> 00:44:37,180
have a conversation filter the pics out

00:44:34,930 --> 00:44:39,370
to and CC and marks it is important and

00:44:37,180 --> 00:44:40,690
then I have things that spot stuff on my

00:44:39,370 --> 00:44:43,510
list and market explicitly and

00:44:40,690 --> 00:44:45,490
unimportant but if I'm on 22 if I'm on

00:44:43,510 --> 00:44:48,190
two or CC and he comes to me by two

00:44:45,490 --> 00:44:50,320
routes mailing list and direct I will

00:44:48,190 --> 00:44:53,940
still see it clearly and it will pop out

00:44:50,320 --> 00:44:56,680
for me in my mailing list there's even

00:44:53,940 --> 00:44:58,300
are really really cunning and clever way

00:44:56,680 --> 00:45:00,730
to achieve all this filtering no matter

00:44:58,300 --> 00:45:03,400
how what clients you are compelled to

00:45:00,730 --> 00:45:04,630
use in your working environment which is

00:45:03,400 --> 00:45:06,820
you can create yourself a specialist

00:45:04,630 --> 00:45:08,980
gmail account this is entirely optional

00:45:06,820 --> 00:45:10,210
no maintain a is going so all dear you

00:45:08,980 --> 00:45:12,550
didn't use a special gmail account this

00:45:10,210 --> 00:45:15,190
is if you like this idea it's a neat one

00:45:12,550 --> 00:45:18,220
to copy you can create a special gmail

00:45:15,190 --> 00:45:20,950
account you subscribe it to its current

00:45:18,220 --> 00:45:22,420
mailing list you can figure it so it's

00:45:20,950 --> 00:45:26,110
allowed to forward to your work email

00:45:22,420 --> 00:45:28,360
account and then you put the filters

00:45:26,110 --> 00:45:31,030
expressed in a gmail form and then

00:45:28,360 --> 00:45:32,560
anything that you want to see will

00:45:31,030 --> 00:45:36,820
automatically forwarded to your work

00:45:32,560 --> 00:45:38,350
account where you can pick it up and it

00:45:36,820 --> 00:45:40,630
also gives this fantastic colorization

00:45:38,350 --> 00:45:41,890
opportunity which is you can colorize

00:45:40,630 --> 00:45:43,269
messages by looking for a specific

00:45:41,890 --> 00:45:45,459
header

00:45:43,269 --> 00:45:47,739
to show there was forwarded by gmail to

00:45:45,459 --> 00:45:49,509
you and that solves the two and CC

00:45:47,739 --> 00:45:51,279
proper mentioned before because anything

00:45:49,509 --> 00:45:53,559
is to in CC will land in your normal

00:45:51,279 --> 00:45:56,799
work account and can't get picked up by

00:45:53,559 --> 00:45:58,149
that filter so it's a little bit more

00:45:56,799 --> 00:46:00,549
complicated to set up the gang

00:45:58,149 --> 00:46:03,489
thunderbird to do it for you but it's

00:46:00,549 --> 00:46:05,380
it's a very nice and clean way to manage

00:46:03,489 --> 00:46:08,739
the volumes of email are going to come

00:46:05,380 --> 00:46:09,909
into you and with auto delete set you

00:46:08,739 --> 00:46:11,469
still get opportunity to do a quick

00:46:09,909 --> 00:46:14,709
search through 30 days of thing using

00:46:11,469 --> 00:46:17,259
all Google algorithms and if it's older

00:46:14,709 --> 00:46:19,509
than that you use the web copies the

00:46:17,259 --> 00:46:24,130
other area of socialization I should

00:46:19,509 --> 00:46:25,539
talk about is IRC IRC is also where kind

00:46:24,130 --> 00:46:27,009
of small things happen a lot of maintain

00:46:25,539 --> 00:46:30,699
us hang out there it's a chance to

00:46:27,009 --> 00:46:32,499
discuss things with them but it is

00:46:30,699 --> 00:46:35,169
difficult to figure out which particular

00:46:32,499 --> 00:46:36,989
IRC channels to join so you can start

00:46:35,169 --> 00:46:41,169
with arm linux it's a good sign default

00:46:36,989 --> 00:46:43,659
you can also search for mailing this

00:46:41,169 --> 00:46:45,189
data to IRC but unfortunately IRC

00:46:43,659 --> 00:46:47,199
channels are not mentioned in maintain

00:46:45,189 --> 00:46:49,029
us so you can't go and look down

00:46:47,199 --> 00:46:51,099
maintained as and find out which IRC

00:46:49,029 --> 00:46:55,419
channel is going to be interesting you

00:46:51,099 --> 00:46:59,499
can search for pants so this for example

00:46:55,419 --> 00:47:00,849
looks for the next minus M which I think

00:46:59,499 --> 00:47:03,669
was when I was looking for something to

00:47:00,849 --> 00:47:06,579
do with Qualcomm where the MSM keyword

00:47:03,669 --> 00:47:08,259
is quite popular so yes a lot of Linux I

00:47:06,579 --> 00:47:09,880
see channels start with word linux and

00:47:08,259 --> 00:47:13,689
it does give you the opportunity to to

00:47:09,880 --> 00:47:15,669
try and find interesting IRC channels on

00:47:13,689 --> 00:47:18,759
IRC it's absolutely fine to sit and

00:47:15,669 --> 00:47:22,389
watch you know lurking is perfectly well

00:47:18,759 --> 00:47:23,799
tolerated their big IRC channels the

00:47:22,389 --> 00:47:25,029
only really important thing I see is if

00:47:23,799 --> 00:47:26,799
something does become interesting any do

00:47:25,029 --> 00:47:29,489
want to ask a question don't see

00:47:26,799 --> 00:47:32,169
permission it's another boring mistake

00:47:29,489 --> 00:47:34,509
because our see channels are you know

00:47:32,169 --> 00:47:37,119
slightly time separated you know they're

00:47:34,509 --> 00:47:39,880
not absolutely instant for people unless

00:47:37,119 --> 00:47:41,649
they've been tagged then you know just

00:47:39,880 --> 00:47:46,539
ask a question and see what comes in in

00:47:41,649 --> 00:47:47,919
the reply it use this with care but it

00:47:46,539 --> 00:47:51,429
can be a way to follow up on code

00:47:47,919 --> 00:47:54,279
reviews as well if somebody's sent you a

00:47:51,429 --> 00:47:56,169
review and you've replied that you

00:47:54,279 --> 00:47:57,040
understand and you still don't you just

00:47:56,169 --> 00:47:59,560
don't seem to be coming

00:47:57,040 --> 00:48:01,750
doing well on email you know you can pop

00:47:59,560 --> 00:48:06,250
up on icy in and ping them and say hello

00:48:01,750 --> 00:48:08,140
you know I can feel quite safe

00:48:06,250 --> 00:48:09,690
disclosing this to a room of people who

00:48:08,140 --> 00:48:11,620
are coming up with speed because it

00:48:09,690 --> 00:48:13,540
takes you a while to figure out how to

00:48:11,620 --> 00:48:15,580
connect an email address in an IC tag

00:48:13,540 --> 00:48:16,630
and by the time you turn that you're

00:48:15,580 --> 00:48:21,700
probably not going to be use that

00:48:16,630 --> 00:48:23,530
information and at that point that is

00:48:21,700 --> 00:48:25,270
the conclusion of the material in the

00:48:23,530 --> 00:48:27,550
one I want session and we're running

00:48:25,270 --> 00:48:30,060
almost perfectly to time so if there are

00:48:27,550 --> 00:48:32,560
any closing questions we can do that

00:48:30,060 --> 00:48:34,870
otherwise there is a 20 minute break and

00:48:32,560 --> 00:48:41,520
a resumption for the tow to session in

00:48:34,870 --> 00:48:41,520
20 minutes thank

00:48:49,740 --> 00:48:51,800

YouTube URL: https://www.youtube.com/watch?v=QBY8OceIt5I


