Title: LAS16-202: Reference Software Platform
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-202: Reference Software Platform
Speakers: Alan Bennett
Date: September 27, 2016

★ Session Description ★
Review of the direction the Reference Software Platform is taking for each of the variants.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-202
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-202/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:09,679 --> 00:00:16,139
director of the automation CIT Matlin ro

00:00:13,009 --> 00:00:17,730
where we we kind of Shepherd a few

00:00:16,139 --> 00:00:21,449
different projects and functions within

00:00:17,730 --> 00:00:23,869
the loan our organization so automation

00:00:21,449 --> 00:00:29,310
and CI and that's just a very strange

00:00:23,869 --> 00:00:31,140
Dainius so we've got the lava team the

00:00:29,310 --> 00:00:32,940
automation test framework platform we've

00:00:31,140 --> 00:00:35,460
got the QA Services team where we

00:00:32,940 --> 00:00:37,739
provide both testing and validation

00:00:35,460 --> 00:00:41,579
analysis services and certification for

00:00:37,739 --> 00:00:43,410
some of the 96 boards projects that

00:00:41,579 --> 00:00:45,329
built and baselines teams were actually

00:00:43,410 --> 00:00:48,270
work with the individual teams to help

00:00:45,329 --> 00:00:51,539
them create software builds for the work

00:00:48,270 --> 00:00:53,070
that they're doing what else am I

00:00:51,539 --> 00:00:55,140
missing and then there's the reference

00:00:53,070 --> 00:00:57,750
platform which is really kind of a focus

00:00:55,140 --> 00:01:00,210
software build some focused quality

00:00:57,750 --> 00:01:03,510
engineering some focused automation and

00:01:00,210 --> 00:01:06,420
CI around the concept of a reference

00:01:03,510 --> 00:01:09,060
platform and then with the reference

00:01:06,420 --> 00:01:10,650
platform the one other trick to this is

00:01:09,060 --> 00:01:13,290
is it's really an end and software

00:01:10,650 --> 00:01:16,409
solution can you know from the firmware

00:01:13,290 --> 00:01:19,290
the colonel the middle or applications

00:01:16,409 --> 00:01:21,509
and the end user applications for our

00:01:19,290 --> 00:01:23,970
segment groups so we'll have Enterprise

00:01:21,509 --> 00:01:26,310
Edition reference platform which is kind

00:01:23,970 --> 00:01:29,549
of end-to-end use cases around the

00:01:26,310 --> 00:01:32,159
enterprise software ecosystem and the

00:01:29,549 --> 00:01:33,600
same for the consumer edition for the

00:01:32,159 --> 00:01:35,840
Home Edition and all these different

00:01:33,600 --> 00:01:38,100
editions of the reference platform so

00:01:35,840 --> 00:01:40,680
we'll get into a lot of that this

00:01:38,100 --> 00:01:42,840
conversation is meant to be a little bit

00:01:40,680 --> 00:01:45,270
of background on what the the reference

00:01:42,840 --> 00:01:46,649
platform is but as we as we discuss this

00:01:45,270 --> 00:01:48,600
and have this conversation and be

00:01:46,649 --> 00:01:53,820
interesting to to get your feedback as

00:01:48,600 --> 00:01:56,990
well so that's me Alan Bennett also part

00:01:53,820 --> 00:02:00,570
of this conversation will be me oh Sh

00:01:56,990 --> 00:02:02,909
yep pretty good anybody who doesn't know

00:02:00,570 --> 00:02:05,909
meals let me know I've got to say the l

00:02:02,909 --> 00:02:08,729
because I just can't not say and then

00:02:05,909 --> 00:02:09,940
fatty as well builds and bass lines

00:02:08,729 --> 00:02:13,480
engineering manager

00:02:09,940 --> 00:02:22,720
euless runs the QA team fatty runs the

00:02:13,480 --> 00:02:25,210
builds in basements alright so inland

00:02:22,720 --> 00:02:27,610
all the reference platform again is is a

00:02:25,210 --> 00:02:31,750
it's a program but it gets a lot of its

00:02:27,610 --> 00:02:33,460
input from our or our different segments

00:02:31,750 --> 00:02:37,510
groups around linaro so you're going to

00:02:33,460 --> 00:02:40,930
see that the the core team is rather

00:02:37,510 --> 00:02:43,630
small but what we get from the other

00:02:40,930 --> 00:02:47,380
teams it actually comprises of a pretty

00:02:43,630 --> 00:02:49,030
large software project of course special

00:02:47,380 --> 00:02:51,190
thanks to everybody who's involved both

00:02:49,030 --> 00:02:53,830
directly and indirectly in making the

00:02:51,190 --> 00:02:57,370
reference platform each one of the

00:02:53,830 --> 00:02:59,080
groups both from direction as well as

00:02:57,370 --> 00:03:00,970
some of the contributions the

00:02:59,080 --> 00:03:04,480
improvements the individual open source

00:03:00,970 --> 00:03:05,740
software projects there there are a lot

00:03:04,480 --> 00:03:08,710
of people that make the reference

00:03:05,740 --> 00:03:10,840
platforms possible and we definitely

00:03:08,710 --> 00:03:13,450
appreciate all their work including some

00:03:10,840 --> 00:03:15,370
assistance in the past and hopefully in

00:03:13,450 --> 00:03:17,890
the future from our landing teams who

00:03:15,370 --> 00:03:23,290
have additional support that they

00:03:17,890 --> 00:03:25,930
provide on the physical boards and then

00:03:23,290 --> 00:03:28,600
at the core so the kind of the center

00:03:25,930 --> 00:03:30,100
team there is really a group of the

00:03:28,600 --> 00:03:34,480
individuals who are responsible for

00:03:30,100 --> 00:03:36,430
getting that bet RP be constructed

00:03:34,480 --> 00:03:38,260
validated and tested for each one of the

00:03:36,430 --> 00:03:39,790
releases on the cadence that the

00:03:38,260 --> 00:03:44,230
different enterprise but that the

00:03:39,790 --> 00:03:46,530
different editions have none off David

00:03:44,230 --> 00:03:46,530
Simmons

00:03:47,550 --> 00:03:55,680
so David is kind of the program manager

00:03:51,480 --> 00:03:57,330
for the project he'll he'll start the

00:03:55,680 --> 00:03:59,370
conversation and make sure that we're

00:03:57,330 --> 00:04:01,290
we're having the conversation about what

00:03:59,370 --> 00:04:05,670
what makes up the enterprise reference

00:04:01,290 --> 00:04:07,080
platform Emeril helps facilitate the

00:04:05,670 --> 00:04:09,180
discussion with the teams and make sure

00:04:07,080 --> 00:04:11,400
that people are working on things fafi

00:04:09,180 --> 00:04:14,490
on the build side neelesh on the the

00:04:11,400 --> 00:04:17,160
test and verification of it Marc Brown

00:04:14,490 --> 00:04:19,230
who does have a conflict right now is

00:04:17,160 --> 00:04:21,120
our Colonel maintainer for the reference

00:04:19,230 --> 00:04:24,980
platform colonel will talk about it a

00:04:21,120 --> 00:04:28,050
little bit then myself and another

00:04:24,980 --> 00:04:32,970
member contributing member would be

00:04:28,050 --> 00:04:35,640
Robert wolf there from the 96 board

00:04:32,970 --> 00:04:40,820
Stephen it really around the technical

00:04:35,640 --> 00:04:43,590
documentation side of the project okay

00:04:40,820 --> 00:04:45,240
so what is the reference software goals

00:04:43,590 --> 00:04:48,120
so you might have heard in George's

00:04:45,240 --> 00:04:51,750
keynote a lot of these and we try to

00:04:48,120 --> 00:04:53,280
maintain a similar voice so really we

00:04:51,750 --> 00:04:55,250
want to use the reference software as a

00:04:53,280 --> 00:04:57,660
chance to collaborate work together

00:04:55,250 --> 00:04:59,910
leverage to the open source software and

00:04:57,660 --> 00:05:06,060
then build a shared platform for the

00:04:59,910 --> 00:05:07,530
developers and I think a key point to

00:05:06,060 --> 00:05:09,720
the reference software is we really want

00:05:07,530 --> 00:05:15,419
it to be a verification in an instance

00:05:09,720 --> 00:05:17,340
of an end-to-end reference product so it

00:05:15,419 --> 00:05:19,020
should be everything from the colonel

00:05:17,340 --> 00:05:21,240
through the distribution middleware and

00:05:19,020 --> 00:05:23,070
then any end user applications and it

00:05:21,240 --> 00:05:25,560
may be a customized set of those so

00:05:23,070 --> 00:05:27,660
might we might have one edition that is

00:05:25,560 --> 00:05:30,120
focused on only one use case and so it's

00:05:27,660 --> 00:05:34,020
only one set of packages and other

00:05:30,120 --> 00:05:38,190
editions that focus on similar end into

00:05:34,020 --> 00:05:42,140
end applications as well a major goal

00:05:38,190 --> 00:05:42,140
that we have questioned

00:05:48,770 --> 00:05:53,520
so the goal is that we're testing the

00:05:51,120 --> 00:05:54,990
over so the question is is the idea that

00:05:53,520 --> 00:05:57,629
we're testing software are we testing

00:05:54,990 --> 00:06:01,069
the hardware so the goal is that we're

00:05:57,629 --> 00:06:03,240
able to test that end-to-end solution

00:06:01,069 --> 00:06:06,539
sometimes that means that we are testing

00:06:03,240 --> 00:06:09,150
just the software and there are open

00:06:06,539 --> 00:06:11,129
hardware issues or you know but the

00:06:09,150 --> 00:06:14,940
ideal goal is that we've actually got a

00:06:11,129 --> 00:06:16,440
solid platform from a hardware that we

00:06:14,940 --> 00:06:20,310
can actually test that end-to-end use

00:06:16,440 --> 00:06:23,370
case and we're somewhere in the middle

00:06:20,310 --> 00:06:25,620
right now so but the reference platform

00:06:23,370 --> 00:06:28,610
are really trying to build that that

00:06:25,620 --> 00:06:33,750
software system on top of some stable

00:06:28,610 --> 00:06:34,909
hardware platform as well so yeah I

00:06:33,750 --> 00:06:39,199
don't know if that answers the question

00:06:34,909 --> 00:06:41,250
yeah there's a lot of gray in between

00:06:39,199 --> 00:06:49,650
the beginning and the end of the goals

00:06:41,250 --> 00:06:51,449
here so with that in mind you know we

00:06:49,650 --> 00:06:54,210
really want to be able to provide a

00:06:51,449 --> 00:06:57,539
known level of quality for the reference

00:06:54,210 --> 00:07:00,360
platform so we do have product level

00:06:57,539 --> 00:07:02,099
quality goals so that's making sure that

00:07:00,360 --> 00:07:04,469
we've got good subsystem coverage we've

00:07:02,099 --> 00:07:06,210
got good coverage of the features good

00:07:04,469 --> 00:07:12,479
coverage of the systems that we put into

00:07:06,210 --> 00:07:13,830
a reference platform and of course the

00:07:12,479 --> 00:07:17,849
other thing we want to do is really

00:07:13,830 --> 00:07:21,210
focus on the upstream technology so we

00:07:17,849 --> 00:07:23,969
don't want to necessarily just focus on

00:07:21,210 --> 00:07:25,889
you know to fork off of a lot of the

00:07:23,969 --> 00:07:29,219
upstream projects and build a single a

00:07:25,889 --> 00:07:31,199
single distribution off of a bunch of

00:07:29,219 --> 00:07:34,770
forks we really want to try and keep the

00:07:31,199 --> 00:07:38,490
platform moving forward as close to tip

00:07:34,770 --> 00:07:44,719
and most of the projects as we can which

00:07:38,490 --> 00:07:44,719
is also a challenge new questions

00:07:47,039 --> 00:07:53,259
so what does a reference platform look

00:07:51,039 --> 00:07:57,280
like with this diagram we could kind of

00:07:53,259 --> 00:07:59,110
see the overall block diagrams that

00:07:57,280 --> 00:08:03,460
would make up what we would consider the

00:07:59,110 --> 00:08:06,160
reference platform now so a security

00:08:03,460 --> 00:08:09,580
solution your firmware on top of your

00:08:06,160 --> 00:08:11,110
firmware is your kernel the distribution

00:08:09,580 --> 00:08:15,370
middleware and then end user

00:08:11,110 --> 00:08:17,590
applications and then we we really try

00:08:15,370 --> 00:08:21,070
to focus on is also taking that

00:08:17,590 --> 00:08:24,490
reference platform and a 96 boards

00:08:21,070 --> 00:08:26,110
product that is it kind of meets the

00:08:24,490 --> 00:08:29,349
goals of the program so it's a it's an

00:08:26,110 --> 00:08:31,570
ear tip colonel that's that's got the

00:08:29,349 --> 00:08:36,459
support necessary in order to be that

00:08:31,570 --> 00:08:38,919
end end reference just kind of any

00:08:36,459 --> 00:08:44,470
questions on I think we'll be seeing a

00:08:38,919 --> 00:08:46,390
lot of similar things so on the

00:08:44,470 --> 00:08:49,420
enterprise reference platform it looks

00:08:46,390 --> 00:08:52,330
very similar as well so you take the

00:08:49,420 --> 00:08:56,800
reference platform you build build your

00:08:52,330 --> 00:08:59,260
software stack up you have 96 boards to

00:08:56,800 --> 00:09:04,300
verify to be the verification hardware

00:08:59,260 --> 00:09:05,440
platforms for the release and then kind

00:09:04,300 --> 00:09:07,420
of on the right here you'll see the

00:09:05,440 --> 00:09:09,640
developer cloud which is a kind of a

00:09:07,420 --> 00:09:11,890
production instance of the reference

00:09:09,640 --> 00:09:13,839
platform running running on the cloud so

00:09:11,890 --> 00:09:17,160
that people can actually use that end

00:09:13,839 --> 00:09:17,160
and implementation

00:09:21,420 --> 00:09:29,230
okay a little more vocabulary around the

00:09:26,380 --> 00:09:31,269
reference platform we also have we which

00:09:29,230 --> 00:09:34,120
you'll hear from time to time is an RP B

00:09:31,269 --> 00:09:36,820
which is a reference platform build and

00:09:34,120 --> 00:09:38,889
so the build is you've got a reference

00:09:36,820 --> 00:09:42,180
platform for the enterprise market and

00:09:38,889 --> 00:09:46,120
then your rpb would be a specific

00:09:42,180 --> 00:09:47,889
collection of components that would then

00:09:46,120 --> 00:09:49,540
make up that bill so might not

00:09:47,889 --> 00:09:51,910
necessarily be every application

00:09:49,540 --> 00:09:53,470
installed or that is installable it'd be

00:09:51,910 --> 00:09:56,230
really specific suite of applications

00:09:53,470 --> 00:10:01,990
and components that are put together for

00:09:56,230 --> 00:10:03,730
that bill kind of a I think of it almost

00:10:01,990 --> 00:10:05,380
like a like the silver thread that ties

00:10:03,730 --> 00:10:07,509
those components together so that you've

00:10:05,380 --> 00:10:10,690
got just what's necessary for that into

00:10:07,509 --> 00:10:12,220
end use case so your security your

00:10:10,690 --> 00:10:15,730
firmware your kernel your user space

00:10:12,220 --> 00:10:20,620
applications make up that that reference

00:10:15,730 --> 00:10:22,569
platform build of course we also want to

00:10:20,620 --> 00:10:24,310
make this usable by the community so we

00:10:22,569 --> 00:10:26,230
want to put with that reference platform

00:10:24,310 --> 00:10:27,730
build the necessary documentation to

00:10:26,230 --> 00:10:31,540
describe the platform build how to

00:10:27,730 --> 00:10:35,889
reproduce it how to make it really easy

00:10:31,540 --> 00:10:37,660
to use so we focus our goal is to really

00:10:35,889 --> 00:10:41,800
focus on making sure that documentation

00:10:37,660 --> 00:10:44,110
is there it's it's easy to use and so

00:10:41,800 --> 00:10:46,329
that everybody can get the most value

00:10:44,110 --> 00:10:50,260
without too much of their own

00:10:46,329 --> 00:10:52,180
investigations each one of our reference

00:10:50,260 --> 00:10:54,670
platform builds should also come with a

00:10:52,180 --> 00:10:57,430
specification that defines the software

00:10:54,670 --> 00:11:00,490
that makes up that reference platform so

00:10:57,430 --> 00:11:01,870
that we've got incoming requirements for

00:11:00,490 --> 00:11:03,040
building the reference platform we've

00:11:01,870 --> 00:11:05,560
got the reference platform software

00:11:03,040 --> 00:11:08,079
itself and then we've got QA and test

00:11:05,560 --> 00:11:10,230
reports that verify that reference

00:11:08,079 --> 00:11:13,029
platform the components within it I

00:11:10,230 --> 00:11:14,529
think this is key in order to make sure

00:11:13,029 --> 00:11:16,180
that people that use the reference

00:11:14,529 --> 00:11:19,689
platforms actually have something to

00:11:16,180 --> 00:11:21,579
start from when it comes to their

00:11:19,689 --> 00:11:23,259
quality and verification plans so they

00:11:21,579 --> 00:11:25,660
can they can see what makes up the

00:11:23,259 --> 00:11:28,839
reference platform they can see the test

00:11:25,660 --> 00:11:30,910
artifacts that we're used to validate

00:11:28,839 --> 00:11:32,230
the most recent version of it of that

00:11:30,910 --> 00:11:33,459
reference platform and then they can

00:11:32,230 --> 00:11:34,929
consume used

00:11:33,459 --> 00:11:39,550
within their own product development

00:11:34,929 --> 00:11:42,879
team of course the test reports that

00:11:39,550 --> 00:11:45,759
come out of that and then again you know

00:11:42,879 --> 00:11:47,619
a key focus is really building these

00:11:45,759 --> 00:11:51,459
reference platform builds as close to

00:11:47,619 --> 00:11:55,089
tip as possible to show everybody how to

00:11:51,459 --> 00:11:57,699
use the most recent software software

00:11:55,089 --> 00:11:59,679
straight out of the communities how to

00:11:57,699 --> 00:12:01,269
put it together and then how to actually

00:11:59,679 --> 00:12:05,499
do that end and use case use in the

00:12:01,269 --> 00:12:07,899
upstream components of course the RP be

00:12:05,499 --> 00:12:11,290
on different reference hardware may have

00:12:07,899 --> 00:12:13,149
some binary blobs in the firmware for

00:12:11,290 --> 00:12:18,730
key functionality things like Wi-Fi

00:12:13,149 --> 00:12:21,550
Bluetooth now Molly GPA GP use of course

00:12:18,730 --> 00:12:24,129
of course we ideally those would be

00:12:21,550 --> 00:12:26,679
minimal function out and maybe not

00:12:24,129 --> 00:12:28,929
minimal functionality but a minimal part

00:12:26,679 --> 00:12:30,850
of the system so you know again our goal

00:12:28,929 --> 00:12:32,529
with a 96 voyage program is to have

00:12:30,850 --> 00:12:34,149
something that's open as open as

00:12:32,529 --> 00:12:44,559
possible so that people can see how to

00:12:34,149 --> 00:12:47,170
do this from the bottom sub one another

00:12:44,559 --> 00:12:53,499
piece of vocab unit vocabulary is the

00:12:47,170 --> 00:12:54,910
reference platform kernel or the RPK at

00:12:53,499 --> 00:12:56,259
the high level goal that you know the

00:12:54,910 --> 00:12:59,139
reference platform Colonel I think this

00:12:56,259 --> 00:13:01,869
statement probably sums what we would

00:12:59,139 --> 00:13:03,819
want the RPK to be as far as a near

00:13:01,869 --> 00:13:06,879
mainline kernel that is used by the

00:13:03,819 --> 00:13:09,519
linaro teams for the reference platform

00:13:06,879 --> 00:13:11,829
built so the key there is a near

00:13:09,519 --> 00:13:14,559
mainline kernel and one of the big

00:13:11,829 --> 00:13:16,179
problems we have in linaro is just a

00:13:14,559 --> 00:13:20,230
number of different maintained errs of

00:13:16,179 --> 00:13:24,730
these kernels so having enough

00:13:20,230 --> 00:13:27,369
maintained errs to build your reference

00:13:24,730 --> 00:13:30,220
platform kernel and to track the changes

00:13:27,369 --> 00:13:32,199
when it's off tree is very difficult but

00:13:30,220 --> 00:13:34,389
with our kernel working groups if we

00:13:32,199 --> 00:13:36,040
have a kernel that's near main line and

00:13:34,389 --> 00:13:38,619
we can get the board support into that

00:13:36,040 --> 00:13:40,689
kernel for the boards that are that the

00:13:38,619 --> 00:13:42,939
RPP is going to be validated on it makes

00:13:40,689 --> 00:13:45,129
it so that we can leverage our our core

00:13:42,939 --> 00:13:48,220
engineering team and our and somebody

00:13:45,129 --> 00:13:50,199
like Mark Brown to maintain that instead

00:13:48,220 --> 00:13:52,269
of having to have you know a team of

00:13:50,199 --> 00:13:55,980
kernel developers and maintain errs

00:13:52,269 --> 00:13:55,980
maintain a kernel for multiple boards

00:13:57,509 --> 00:14:01,779
that's kind of the goal around the

00:13:59,620 --> 00:14:03,249
reference platform kernel and then just

00:14:01,779 --> 00:14:08,470
reference here these are the different

00:14:03,249 --> 00:14:11,589
kernels that we have within manaro so

00:14:08,470 --> 00:14:13,720
the RPK being a base colonel plus in

00:14:11,589 --> 00:14:17,559
flight board support which is board

00:14:13,720 --> 00:14:19,749
support that is heading upstream to so

00:14:17,559 --> 00:14:22,559
it's either being discussed on a mailing

00:14:19,749 --> 00:14:24,999
list or it's being discussed in the open

00:14:22,559 --> 00:14:30,040
through a patch series that mark and

00:14:24,999 --> 00:14:32,230
then integrate into the RPK but it's

00:14:30,040 --> 00:14:35,499
really key that that that that that

00:14:32,230 --> 00:14:40,809
support and those and that system is on

00:14:35,499 --> 00:14:42,730
its way upstream so and then the base

00:14:40,809 --> 00:14:46,720
kernel that he would he would then

00:14:42,730 --> 00:14:51,009
maintained as really its kind of demand

00:14:46,720 --> 00:14:52,889
based so right now it's following the RC

00:14:51,009 --> 00:14:55,470
series so

00:14:52,889 --> 00:14:57,959
this is primarily because the RPK is

00:14:55,470 --> 00:14:59,730
being derived from the lake colonel

00:14:57,959 --> 00:15:05,549
right now which is tracking main line

00:14:59,730 --> 00:15:08,579
with their features and so we take the

00:15:05,549 --> 00:15:14,069
board support and we follow the the

00:15:08,579 --> 00:15:15,809
latest RCS out of Colonel org and then

00:15:14,069 --> 00:15:17,429
when we when we lock down a release

00:15:15,809 --> 00:15:19,529
candidate will will kind of freeze that

00:15:17,429 --> 00:15:21,959
Colonel do the test and verification for

00:15:19,529 --> 00:15:24,179
the Enterprise Edition throughout the

00:15:21,959 --> 00:15:31,109
release but we'll continue to track with

00:15:24,179 --> 00:15:32,970
the eleg team and the enterprise rpb we

00:15:31,109 --> 00:15:34,769
also have the LSK I don't know if

00:15:32,970 --> 00:15:39,499
anybody has any questions about the LSK

00:15:34,769 --> 00:15:43,499
but it's a it tracks greg kroah-hartman

00:15:39,499 --> 00:15:46,079
long-term support colonel and it also

00:15:43,499 --> 00:15:49,739
brings in member requested of harm

00:15:46,079 --> 00:15:52,649
features in support for the two years we

00:15:49,739 --> 00:15:57,179
don't necessarily build reference

00:15:52,649 --> 00:15:58,860
platform builds with the osk because it

00:15:57,179 --> 00:16:02,790
is that historical Colonel we really

00:15:58,860 --> 00:16:07,759
want to keep the the true rbk the true

00:16:02,790 --> 00:16:07,759
RPPs built from the near mainline kernel

00:16:07,970 --> 00:16:13,619
of course when RL does have member

00:16:10,799 --> 00:16:16,829
kernels through Arlen our landing teams

00:16:13,619 --> 00:16:18,809
where we'll have either a tip Colonel up

00:16:16,829 --> 00:16:21,959
streaming tree that they'll focus on or

00:16:18,809 --> 00:16:26,220
LSK based kernels and then some of our

00:16:21,959 --> 00:16:27,569
segment groups do participate in in

00:16:26,220 --> 00:16:30,679
maintaining their own colonel says

00:16:27,569 --> 00:16:37,939
they're doing development questionnaire

00:16:30,679 --> 00:16:37,939
okay any questions around the RPK it's

00:16:40,089 --> 00:16:45,980
so how the question is how long will the

00:16:42,649 --> 00:16:49,100
RPK colonel be maintained so right now

00:16:45,980 --> 00:16:50,660
it's a tracking colonel so we will we

00:16:49,100 --> 00:16:52,850
will follow it through a release and

00:16:50,660 --> 00:16:55,429
we'll do the verification and test of

00:16:52,850 --> 00:16:59,179
the RPK colonel at release and then the

00:16:55,429 --> 00:17:00,589
RPK colonel will move to the next next

00:16:59,179 --> 00:17:05,839
release so that we can leverage the

00:17:00,589 --> 00:17:07,909
maintenance from Marc Brown so it's a

00:17:05,839 --> 00:17:10,339
it's essentially right now based on the

00:17:07,909 --> 00:17:13,839
resources more or less an unmaintained

00:17:10,339 --> 00:17:16,429
colonel over time it's really that a

00:17:13,839 --> 00:17:18,380
demonstration colonel it's that how do

00:17:16,429 --> 00:17:21,289
you bring everything together and do the

00:17:18,380 --> 00:17:23,419
release in the bill for a specific rpb

00:17:21,289 --> 00:17:25,789
release and then what's most important

00:17:23,419 --> 00:17:27,679
is we take all of that and we move it

00:17:25,789 --> 00:17:29,990
into the the next Colonel as we move

00:17:27,679 --> 00:17:33,020
forward so we'll continue to bring those

00:17:29,990 --> 00:17:37,210
patches to support the next release from

00:17:33,020 --> 00:17:37,210
the last release if that makes sense

00:17:51,210 --> 00:18:00,210
yes I would say right now that it is

00:17:56,850 --> 00:18:02,010
more of the demonstration colonel so if

00:18:00,210 --> 00:18:04,200
somebody wanted to take that Colonel

00:18:02,010 --> 00:18:06,899
into production it would have to be

00:18:04,200 --> 00:18:08,549
maintained you have to have security

00:18:06,899 --> 00:18:10,140
patches come into it all those different

00:18:08,549 --> 00:18:12,720
types of things as you were to lock down

00:18:10,140 --> 00:18:14,880
if you do choose that as your strategy

00:18:12,720 --> 00:18:17,370
to lock down on a colonel you would want

00:18:14,880 --> 00:18:19,409
to make sure that you but you are

00:18:17,370 --> 00:18:21,240
prepared to you know the main maintain

00:18:19,409 --> 00:18:23,760
that over time because we we don't have

00:18:21,240 --> 00:18:28,970
a maintenance strategy for the RPK for

00:18:23,760 --> 00:18:28,970
product development does that make sense

00:18:32,929 --> 00:18:39,630
is this RP cocoon or for all different

00:18:36,570 --> 00:18:41,490
up here platform project that you know

00:18:39,630 --> 00:18:46,760
there are so many different party

00:18:41,490 --> 00:18:49,919
platform there for IOT for mobile for

00:18:46,760 --> 00:18:52,860
mgs something like that so this this is

00:18:49,919 --> 00:18:56,309
recognized for all these different happy

00:18:52,860 --> 00:18:58,470
project so the question you know I'll

00:18:56,309 --> 00:19:00,899
just repeat it just in case yeah make

00:18:58,470 --> 00:19:03,450
sure i understand it as well is this is

00:19:00,899 --> 00:19:07,529
there one rbk for all of the different

00:19:03,450 --> 00:19:11,190
reference platforms so the answer is yes

00:19:07,529 --> 00:19:13,320
sort of so for most of the projects we

00:19:11,190 --> 00:19:16,830
do try and track on RB k that is

00:19:13,320 --> 00:19:21,630
maintained by mark brown as that

00:19:16,830 --> 00:19:25,669
upstream tracking rpk the differences to

00:19:21,630 --> 00:19:29,880
that statement are with with lmg and a

00:19:25,669 --> 00:19:34,320
OSP based colonel they track a different

00:19:29,880 --> 00:19:37,350
main line for the the LMG based aaos p

00:19:34,320 --> 00:19:41,610
builds which would be kind of a linaro

00:19:37,350 --> 00:19:43,830
confectionery release so in that one

00:19:41,610 --> 00:19:48,350
they'll track d I think it's the google

00:19:43,830 --> 00:19:52,230
common kernel and so lmg provides a

00:19:48,350 --> 00:19:55,320
kernel base to use for the confectionary

00:19:52,230 --> 00:19:59,389
release which is pretty much what we

00:19:55,320 --> 00:20:02,370
would use for the AOSP based our PB

00:19:59,389 --> 00:20:03,160
other projects it kind of depends on

00:20:02,370 --> 00:20:07,030
feature

00:20:03,160 --> 00:20:11,020
your support right now so with the

00:20:07,030 --> 00:20:14,470
consumer edition boards the RPK ideally

00:20:11,020 --> 00:20:16,570
would be the latest tracking her PK that

00:20:14,470 --> 00:20:19,630
Mark Brown is maintaining a problem that

00:20:16,570 --> 00:20:21,670
we've had is the support of the features

00:20:19,630 --> 00:20:24,730
necessary for that rpb to be a

00:20:21,670 --> 00:20:30,580
feature-rich RV a feature-rich build and

00:20:24,730 --> 00:20:32,890
so for instance the 1609 release is

00:20:30,580 --> 00:20:36,340
being built with the kernel that was

00:20:32,890 --> 00:20:38,770
released in 1606 just because we did not

00:20:36,340 --> 00:20:42,520
have the patches that were supported in

00:20:38,770 --> 00:20:47,050
1606 follow forward for the consumer

00:20:42,520 --> 00:20:52,120
boards that we build the are ppl so the

00:20:47,050 --> 00:20:53,800
goal is yes it is one unified colonel it

00:20:52,120 --> 00:20:58,770
is a tracking kernel that is close to

00:20:53,800 --> 00:21:01,300
tip so that we're not maintaining a fort

00:20:58,770 --> 00:21:03,370
but there are some Delta's to that

00:21:01,300 --> 00:21:06,340
strategy because of either resource

00:21:03,370 --> 00:21:12,040
loads support from the necessary

00:21:06,340 --> 00:21:13,920
hardware vendors if it's a common color

00:21:12,040 --> 00:21:22,390
for all different reference platform

00:21:13,920 --> 00:21:25,540
projects if it were very tight tight for

00:21:22,390 --> 00:21:29,040
the magic much windows for all these

00:21:25,540 --> 00:21:32,200
different projects you know me from

00:21:29,040 --> 00:21:36,370
before maybe you need a handle are test

00:21:32,200 --> 00:21:39,960
for all different hardware so that and

00:21:36,370 --> 00:21:45,310
March odd or practice from different

00:21:39,960 --> 00:21:47,530
platform so this will maybe we're you

00:21:45,310 --> 00:21:50,830
know you were aware leather project

00:21:47,530 --> 00:22:01,060
every schedule that become very tight

00:21:50,830 --> 00:22:06,430
end and so so I want to know our this if

00:22:01,060 --> 00:22:10,360
if this were impacted their the RP

00:22:06,430 --> 00:22:12,010
public a schedule and progress so I

00:22:10,360 --> 00:22:14,980
think the question is kind of around

00:22:12,010 --> 00:22:15,460
alright so now everybody's relying on

00:22:14,980 --> 00:22:20,049
one

00:22:15,460 --> 00:22:22,659
and maybe this RPPs got a bug will it

00:22:20,049 --> 00:22:29,880
you know really put at risk the rest of

00:22:22,659 --> 00:22:31,990
the releases for that really it could I

00:22:29,880 --> 00:22:33,789
don't know if we necessarily have all

00:22:31,990 --> 00:22:36,309
the rules in place to deal with that

00:22:33,789 --> 00:22:37,779
situation the most you know if it's that

00:22:36,309 --> 00:22:39,159
complex yet but it's definitely

00:22:37,779 --> 00:22:42,399
something we need to come up with a

00:22:39,159 --> 00:22:45,340
strategy for is to make sure that the

00:22:42,399 --> 00:22:47,740
release is not necessarily held hostage

00:22:45,340 --> 00:22:49,980
by any one issue on any one of the RPPs

00:22:47,740 --> 00:22:53,380
but that we can actually you know

00:22:49,980 --> 00:22:55,240
separate them but keep them together so

00:22:53,380 --> 00:22:57,429
it is a challenge that we probably need

00:22:55,240 --> 00:22:59,230
a better strategy for when we get to a

00:22:57,429 --> 00:23:01,960
point where we have so many boards

00:22:59,230 --> 00:23:04,270
releasing at this or so many builds

00:23:01,960 --> 00:23:13,289
releasing at the same time relying on a

00:23:04,270 --> 00:23:13,289
same unified kernel source thank you

00:23:19,290 --> 00:23:31,210
it's on it's on github I think it's

00:23:24,130 --> 00:23:35,620
github / linaro / just rpk so sorry i

00:23:31,210 --> 00:23:37,780
did with it that link in here I question

00:23:35,620 --> 00:23:41,770
was is where is the public repository

00:23:37,780 --> 00:23:45,270
for the RPK and so it's github.com /

00:23:41,770 --> 00:23:45,270
linaro / r PK

00:23:51,960 --> 00:23:56,610
any other question I think the RPK is

00:23:54,150 --> 00:23:57,870
probably one of the key areas where we

00:23:56,610 --> 00:24:05,010
really want to make sure we have a

00:23:57,870 --> 00:24:07,230
dialogue with the community just because

00:24:05,010 --> 00:24:10,230
it's a it's pretty important to this

00:24:07,230 --> 00:24:12,150
challenge and a lot of it you know it

00:24:10,230 --> 00:24:14,820
really builds the platform that we do

00:24:12,150 --> 00:24:18,240
our verification on as well just that

00:24:14,820 --> 00:24:22,770
supported feature-rich support within a

00:24:18,240 --> 00:24:27,720
within a linux kernel at least on the on

00:24:22,770 --> 00:24:34,740
a linux based rpgs i should about my

00:24:27,720 --> 00:24:39,000
power alright so what does the matrix

00:24:34,740 --> 00:24:42,030
look like right now for our PBS so each

00:24:39,000 --> 00:24:45,890
one of the each one of our editions

00:24:42,030 --> 00:24:49,320
which is really just nomenclature it's

00:24:45,890 --> 00:24:52,380
where we derive a lot of the strategy

00:24:49,320 --> 00:24:57,210
behind each one of these from you know a

00:24:52,380 --> 00:25:00,900
specific linaro segment group or you

00:24:57,210 --> 00:25:02,990
know other goals of the program so one

00:25:00,900 --> 00:25:06,330
being a consumer dish and RB b which is

00:25:02,990 --> 00:25:08,880
almost built around being the firmware

00:25:06,330 --> 00:25:12,090
software support for the consumer

00:25:08,880 --> 00:25:13,890
edition reference platform builds so we

00:25:12,090 --> 00:25:16,470
build we currently are building for

00:25:13,890 --> 00:25:18,270
different user space variants most of

00:25:16,470 --> 00:25:20,640
them are pretty similar except for the

00:25:18,270 --> 00:25:23,490
graphic system so you know the open

00:25:20,640 --> 00:25:27,020
embedded we've got a console only an ex

00:25:23,490 --> 00:25:27,020
sort based and then a Whalin based

00:25:27,380 --> 00:25:33,870
system we also have a Debian stretch

00:25:31,430 --> 00:25:38,400
we've got the RPK which is currently

00:25:33,870 --> 00:25:42,240
based off the 1606 release which is the

00:25:38,400 --> 00:25:45,090
four dot for dot11 paste there and then

00:25:42,240 --> 00:25:46,710
we retested on two boards and there's

00:25:45,090 --> 00:25:50,010
question around you know what is the

00:25:46,710 --> 00:25:52,860
coin new strategy for doing builds and

00:25:50,010 --> 00:26:01,040
verifications on I don't think we do any

00:25:52,860 --> 00:26:01,040
right now but it's a potential on

00:26:07,640 --> 00:26:15,270
you can describe the question being why

00:26:12,210 --> 00:26:17,010
do we have a wailing billed as wonder if

00:26:15,270 --> 00:26:26,250
you have a good reason behind the

00:26:17,010 --> 00:26:31,860
background you can stand here so the

00:26:26,250 --> 00:26:35,280
will and based image for football ye is

00:26:31,860 --> 00:26:38,280
coming from requirement of HK so we are

00:26:35,280 --> 00:26:41,250
using using that some other people are

00:26:38,280 --> 00:26:43,340
killed using X org and do some testing

00:26:41,250 --> 00:26:48,540
with Mally so that's why we have to

00:26:43,340 --> 00:26:53,040
graphical based built for we won based

00:26:48,540 --> 00:26:54,990
on X Oregon 14 way then that's really

00:26:53,040 --> 00:26:57,750
the home group and some of their

00:26:54,990 --> 00:27:00,050
development use cases see that as a

00:26:57,750 --> 00:27:00,050
priority

00:27:03,870 --> 00:27:05,930
you

00:27:09,540 --> 00:27:19,620
so right now the kind of a bootloader

00:27:13,900 --> 00:27:19,620
strategy is to really unify around UEFI

00:27:20,430 --> 00:27:27,040
again that you know could change but

00:27:24,550 --> 00:27:28,660
with the boards and the requirements we

00:27:27,040 --> 00:27:33,000
have coming in right now it's really

00:27:28,660 --> 00:27:33,000
focused on UEFI at the bootloader level

00:27:44,220 --> 00:27:50,440
so question around water what's the

00:27:48,159 --> 00:27:52,600
strategy around 32-bit platforms and I

00:27:50,440 --> 00:27:55,179
think just this release we've started to

00:27:52,600 --> 00:27:58,179
look a little more so 32-bit platform

00:27:55,179 --> 00:28:01,389
are not lost we have one coming actually

00:27:58,179 --> 00:28:04,629
from st so upcoming LP be with will add

00:28:01,389 --> 00:28:08,789
support for little bit builds and i

00:28:04,629 --> 00:28:08,789
think one is coming also from qualcomm

00:28:10,769 --> 00:28:17,139
yeah so yeah it's not done yet but for

00:28:14,440 --> 00:28:21,720
upcoming release we will have 32-bit

00:28:17,139 --> 00:28:21,720
support and bills and platform supported

00:28:26,399 --> 00:28:50,859
it is same source code for both 32 and

00:28:37,629 --> 00:28:52,419
64 so many shoe is enablement so for

00:28:50,859 --> 00:28:55,830
several platforms is kind of easy to

00:28:52,419 --> 00:28:59,710
have a unified kernel and have 11 binary

00:28:55,830 --> 00:29:02,139
for arm 7 and 32 bit that form which

00:28:59,710 --> 00:29:05,259
should be ok but there's some use case

00:29:02,139 --> 00:29:09,879
where we can't have one side single

00:29:05,259 --> 00:29:13,330
binary simply because some people are

00:29:09,879 --> 00:29:17,669
stuck on the user space because of Molly

00:29:13,330 --> 00:29:17,669
or sum over binaries blood

00:29:32,900 --> 00:29:41,250
enablement again so basically enablement

00:29:36,060 --> 00:29:43,980
so we can use the same kernel for GE and

00:29:41,250 --> 00:29:46,410
server platform band we can boot the

00:29:43,980 --> 00:29:48,150
problem is that for some use cases we

00:29:46,410 --> 00:29:55,220
need more independent so what we have

00:29:48,150 --> 00:30:00,090
with a single kernel is just bare

00:29:55,220 --> 00:30:02,310
booting of a system and for example if

00:30:00,090 --> 00:30:05,070
you take a dragon ball photo and see for

00:30:02,310 --> 00:30:07,850
example in male internal not all the

00:30:05,070 --> 00:30:11,760
future are enabled and some might be

00:30:07,850 --> 00:30:14,190
well it will never happen or it will

00:30:11,760 --> 00:30:16,320
take a long time so that that's why we

00:30:14,190 --> 00:30:17,700
can't we will have a unified channel we

00:30:16,320 --> 00:30:19,140
have even if I cannot but it doesn't

00:30:17,700 --> 00:30:21,620
bring the same enablement and the same

00:30:19,140 --> 00:30:23,970
feature enablement on the platforms I

00:30:21,620 --> 00:30:27,300
think that's really related as well that

00:30:23,970 --> 00:30:29,180
Justin's question around you know having

00:30:27,300 --> 00:30:31,920
that unifying corner colonel and

00:30:29,180 --> 00:30:35,010
requiring that for a release you know

00:30:31,920 --> 00:30:36,840
puts everything all the priorities all

00:30:35,010 --> 00:30:39,330
the builds to make sure that that works

00:30:36,840 --> 00:30:42,360
on all those platforms and so because of

00:30:39,330 --> 00:30:44,520
some of the enablement we've had some

00:30:42,360 --> 00:30:47,070
divergence I guess from one single

00:30:44,520 --> 00:30:50,640
unified the goal is absolutely one

00:30:47,070 --> 00:30:52,730
single unified we just with a reality

00:30:50,640 --> 00:30:54,390
between here and the goal we haven't

00:30:52,730 --> 00:30:55,830
haven't been able to get all the

00:30:54,390 --> 00:31:07,770
features necessary to have a

00:30:55,830 --> 00:31:12,320
feature-rich build in hopefully it's

00:31:07,770 --> 00:31:12,320
much more than a basic feature set

00:31:37,420 --> 00:31:39,480
you

00:31:56,190 --> 00:32:02,080
yeah so questions last statement is

00:31:59,620 --> 00:32:03,850
really know if we continue to grow the

00:32:02,080 --> 00:32:06,640
program and continue to focus on one

00:32:03,850 --> 00:32:09,010
single unified Colonel no do we have

00:32:06,640 --> 00:32:10,480
enough resources to in a timely manner

00:32:09,010 --> 00:32:14,290
verify all the features that would come

00:32:10,480 --> 00:32:17,080
in we probably don't right now that's a

00:32:14,290 --> 00:32:19,690
big reason why the strategy is a near

00:32:17,080 --> 00:32:21,520
mainline kernel because the the ultimate

00:32:19,690 --> 00:32:24,370
unified Colonel I think is the main line

00:32:21,520 --> 00:32:25,780
so getting those features upstream so

00:32:24,370 --> 00:32:27,520
that they're supported so that when we

00:32:25,780 --> 00:32:29,350
do build a unified Colonel we don't have

00:32:27,520 --> 00:32:34,600
to bring the entire technical debt of

00:32:29,350 --> 00:32:36,309
each individual with it so right now I

00:32:34,600 --> 00:32:38,620
think we're staffed sufficiently to

00:32:36,309 --> 00:32:41,050
cover the platforms but as it grows that

00:32:38,620 --> 00:32:43,330
would be a pretty big concern if a if a

00:32:41,050 --> 00:32:46,809
hard requirement was to use one single

00:32:43,330 --> 00:32:49,020
unified colonel getting all that testing

00:32:46,809 --> 00:32:49,020
done

00:32:56,220 --> 00:33:02,140
so on the Enterprise Edition RPV you

00:32:59,740 --> 00:33:08,169
know userspace builds today focus around

00:33:02,140 --> 00:33:10,299
Santos and Debian bills we are you know

00:33:08,169 --> 00:33:16,419
the 1606 release went with a four dot 4

00:33:10,299 --> 00:33:19,230
11 and the target for the 16 12 the

00:33:16,419 --> 00:33:23,110
estimated 1612 release or I mean

00:33:19,230 --> 00:33:26,140
estimated is on 48 with hopefully the

00:33:23,110 --> 00:33:31,000
four dot nine LTS releasing a net near

00:33:26,140 --> 00:33:33,250
that time frame we would do a 16-12

00:33:31,000 --> 00:33:37,000
release of the RP be and then likely a

00:33:33,250 --> 00:33:38,470
point release of an RP be win 49

00:33:37,000 --> 00:33:45,940
releases so that there's one tracking

00:33:38,470 --> 00:33:47,860
that next TS as well and then the

00:33:45,940 --> 00:33:51,039
current reference systems the d 0 2 and

00:33:47,860 --> 00:33:54,850
3 also hoping to look at the 205 for the

00:33:51,039 --> 00:33:58,590
16 12 Qualcomm bordick a vm thunder

00:33:54,850 --> 00:33:58,590
action and the AMD overdrive

00:34:13,929 --> 00:34:18,409
let's see so the home edition so with

00:34:16,940 --> 00:34:20,600
the release of the poplar board that you

00:34:18,409 --> 00:34:24,470
guys had a chance to see yesterday we

00:34:20,600 --> 00:34:26,179
are looking at defining a build or two

00:34:24,470 --> 00:34:28,159
around the poplar board for the home

00:34:26,179 --> 00:34:32,659
group so those are in progress right now

00:34:28,159 --> 00:34:35,000
we expect that if not in the 16 12 to be

00:34:32,659 --> 00:34:36,980
shortly after we're also working with

00:34:35,000 --> 00:34:42,679
the home group on the cadence of those

00:34:36,980 --> 00:34:44,540
releases how frequent and the rest of

00:34:42,679 --> 00:34:47,200
the specification on the home and then

00:34:44,540 --> 00:34:51,110
same around the network edition as well

00:34:47,200 --> 00:34:53,210
the network edition is looking at four

00:34:51,110 --> 00:34:56,150
separate releases I have them in my

00:34:53,210 --> 00:34:58,010
notes but I don't have them display view

00:34:56,150 --> 00:35:02,570
but there'll be more information about

00:34:58,010 --> 00:35:06,080
those coming out as well other questions

00:35:02,570 --> 00:35:15,140
around what makes up at different our

00:35:06,080 --> 00:35:17,360
PBS so there's a quick slide I added in

00:35:15,140 --> 00:35:19,370
it's not in the download deck is just

00:35:17,360 --> 00:35:21,880
really to describe how the evolution of

00:35:19,370 --> 00:35:26,570
the are the reference platform builds

00:35:21,880 --> 00:35:28,010
would occur so this is not a lot of

00:35:26,570 --> 00:35:30,470
specifics in here but just to let people

00:35:28,010 --> 00:35:33,200
know that an enterprise edition could

00:35:30,470 --> 00:35:34,580
start and only be one specific build and

00:35:33,200 --> 00:35:37,220
it's very custom building it's not

00:35:34,580 --> 00:35:39,560
leveraged in any other builds beyond

00:35:37,220 --> 00:35:41,690
that but for instance the Enterprise

00:35:39,560 --> 00:35:43,700
editions reference platform is planned

00:35:41,690 --> 00:35:46,310
to be the base reference platform for

00:35:43,700 --> 00:35:49,910
our network for majority of the network

00:35:46,310 --> 00:35:52,160
builds so you could see a almost a make

00:35:49,910 --> 00:35:53,780
from relationship to where we have an

00:35:52,160 --> 00:35:55,940
enterprise edition reference platform

00:35:53,780 --> 00:35:57,950
and from that we make the developer

00:35:55,940 --> 00:36:00,080
cloud image from that we make the

00:35:57,950 --> 00:36:02,210
network edition and other network

00:36:00,080 --> 00:36:04,070
edition so we we try and use this kind

00:36:02,210 --> 00:36:05,690
of an evolution model so that we don't

00:36:04,070 --> 00:36:06,860
have to rebuild from scratch every

00:36:05,690 --> 00:36:09,890
single one of them but we can actually

00:36:06,860 --> 00:36:11,570
actually leverage both at the

00:36:09,890 --> 00:36:13,610
specification level as well as the test

00:36:11,570 --> 00:36:16,510
verification and documentation level

00:36:13,610 --> 00:36:16,510
these these different

00:36:21,460 --> 00:36:29,569
so currently for the two you know

00:36:26,329 --> 00:36:33,790
released RPV's we've got two different

00:36:29,569 --> 00:36:37,359
cadence life cycles one being the

00:36:33,790 --> 00:36:40,520
Enterprise Edition where it's roughly a

00:36:37,359 --> 00:36:43,790
six-month cadence so you got about 26

00:36:40,520 --> 00:36:45,650
working weeks where will the goal is to

00:36:43,790 --> 00:36:50,150
have the requirements captured in the

00:36:45,650 --> 00:36:52,400
first four weeks of the cycle we iterate

00:36:50,150 --> 00:36:55,190
both among the feature development teams

00:36:52,400 --> 00:36:59,000
as well as the platform teams in any

00:36:55,190 --> 00:37:03,140
upstream just feature review and

00:36:59,000 --> 00:37:07,160
inclusion and the teams will iterate

00:37:03,140 --> 00:37:09,050
after about 20 weeks we freeze the

00:37:07,160 --> 00:37:11,180
features and we start working on the

00:37:09,050 --> 00:37:13,069
release candidates so it's not

00:37:11,180 --> 00:37:16,069
necessarily a code freeze but necessary

00:37:13,069 --> 00:37:18,589
you know more no new hardware boards are

00:37:16,069 --> 00:37:20,809
allowed after that date no new you know

00:37:18,589 --> 00:37:21,950
major software features which would be

00:37:20,809 --> 00:37:24,410
wanted at that point because we're

00:37:21,950 --> 00:37:28,720
really trying to harden the release in

00:37:24,410 --> 00:37:32,119
that remaining four to six weeks and

00:37:28,720 --> 00:37:34,280
then the consumer edition is pretty

00:37:32,119 --> 00:37:39,950
similar except for its it's half as much

00:37:34,280 --> 00:37:43,130
time and so the large features are ones

00:37:39,950 --> 00:37:45,619
that we would integrate in and verify

00:37:43,130 --> 00:37:47,180
over multiple cycles just because you

00:37:45,619 --> 00:37:51,349
know you really only have about six

00:37:47,180 --> 00:37:53,930
weeks from planning to release and

00:37:51,349 --> 00:37:56,030
hardening cycle so it's a it's a pretty

00:37:53,930 --> 00:37:58,819
fast cadence we'll be looking at that

00:37:56,030 --> 00:38:03,710
cadence to see if a quarterly cycle is

00:37:58,819 --> 00:38:05,119
necessary for the consumer platforms but

00:38:03,710 --> 00:38:08,150
right now that's that's kind of where

00:38:05,119 --> 00:38:14,869
we're starting from any questions on

00:38:08,150 --> 00:38:18,380
these I know today we are not

00:38:14,869 --> 00:38:22,339
necessarily on this cycle we are you

00:38:18,380 --> 00:38:23,450
know I think we're eight weeks from 16

00:38:22,339 --> 00:38:29,630
12 release

00:38:23,450 --> 00:38:31,970
give or take and so hopefully with the

00:38:29,630 --> 00:38:33,440
next one we start those conversations a

00:38:31,970 --> 00:38:34,370
lot or earlier so that we can really

00:38:33,440 --> 00:38:37,430
come up with our goals and our

00:38:34,370 --> 00:38:39,230
strategies with enough time to you know

00:38:37,430 --> 00:38:41,810
allow the teams to do development and

00:38:39,230 --> 00:38:44,090
planning especially where external

00:38:41,810 --> 00:38:48,470
partners as well as anybody who's going

00:38:44,090 --> 00:38:51,110
to use this knows ahead of time what

00:38:48,470 --> 00:38:53,350
features are coming what the major goals

00:38:51,110 --> 00:38:53,350
are

00:38:59,330 --> 00:39:08,610
price the tool you mean you were killed

00:39:04,920 --> 00:39:12,570
to release per per year is it right for

00:39:08,610 --> 00:39:15,870
the Enterprise Edition easy to write if

00:39:12,570 --> 00:39:20,070
that I think maybe it's too too too

00:39:15,870 --> 00:39:31,140
little for the version okay also more

00:39:20,070 --> 00:39:34,080
release maybe I think for 33 / / 3

00:39:31,140 --> 00:39:37,620
months for our washing each data I think

00:39:34,080 --> 00:39:41,370
right okay yeah I don't think Martin's

00:39:37,620 --> 00:39:44,540
in here is he Martin director Lee ldg I

00:39:41,370 --> 00:39:46,800
think he might have been double-booked

00:39:44,540 --> 00:39:48,780
yeah that's that's great feedback I

00:39:46,800 --> 00:39:51,000
think a concern that we've had is to

00:39:48,780 --> 00:39:53,100
make sure that we're not spending so

00:39:51,000 --> 00:39:56,460
many resources multiple times a year in

00:39:53,100 --> 00:39:58,740
the hardening phases but really these

00:39:56,460 --> 00:40:00,900
life cycles and strategies are built

00:39:58,740 --> 00:40:03,420
around each one of those segments groups

00:40:00,900 --> 00:40:06,840
and so when it comes to the enterprise

00:40:03,420 --> 00:40:08,430
edition I think we could support that if

00:40:06,840 --> 00:40:10,760
that was the direction that came out of

00:40:08,430 --> 00:40:10,760
l eg

00:40:17,250 --> 00:40:25,050
and the presentation happy be original

00:40:20,650 --> 00:40:29,050
cycle was three months it was decided

00:40:25,050 --> 00:40:31,480
you know within our EG group discussion

00:40:29,050 --> 00:40:34,300
with the members that three month cycle

00:40:31,480 --> 00:40:37,960
was pretty difficult to catch up for

00:40:34,300 --> 00:40:39,940
enterprise space so i think they it can

00:40:37,960 --> 00:40:42,430
come to the conclusion that maybe we

00:40:39,940 --> 00:40:44,860
should start to push back the cycle to

00:40:42,430 --> 00:40:46,450
be twice a year which is six months and

00:40:44,860 --> 00:40:49,170
see how obviously we all know we'll

00:40:46,450 --> 00:40:55,210
always open mind to discuss a frequency

00:40:49,170 --> 00:40:56,620
on going another thing around kind of

00:40:55,210 --> 00:40:58,270
the planning around these builds is

00:40:56,620 --> 00:41:00,070
we'll go over it in a few slides which

00:40:58,270 --> 00:41:02,050
really is establishing more of a

00:41:00,070 --> 00:41:03,160
structured community around these so

00:41:02,050 --> 00:41:05,470
that we're having the regular

00:41:03,160 --> 00:41:09,610
discussions with involved members

00:41:05,470 --> 00:41:11,970
vendors and users around that kind of on

00:41:09,610 --> 00:41:14,140
a bi-weekly cadence so there's there's

00:41:11,970 --> 00:41:15,940
hopefully more that communication

00:41:14,140 --> 00:41:18,070
challenges her channels that will be

00:41:15,940 --> 00:41:21,250
opened to have these discussions and

00:41:18,070 --> 00:41:27,880
adjust you know have a dialogue around

00:41:21,250 --> 00:41:29,740
adjusting the delivery cadence I just

00:41:27,880 --> 00:41:33,940
want you to HUD that what we don't see

00:41:29,740 --> 00:41:35,890
on this slide is it's not only big bank

00:41:33,940 --> 00:41:38,790
release every six months so we might

00:41:35,890 --> 00:41:42,880
have incremental updates of components

00:41:38,790 --> 00:41:45,370
during the life cycle so for example

00:41:42,880 --> 00:41:48,520
let's say we have an OpenStack update

00:41:45,370 --> 00:41:50,260
happening we might have an update on

00:41:48,520 --> 00:41:53,590
OpenStack we don't have to wait for

00:41:50,260 --> 00:41:56,490
complete cycle to get the updated

00:41:53,590 --> 00:41:56,490
release

00:42:03,599 --> 00:42:13,499
questions around life cycle we take a

00:42:08,349 --> 00:42:13,499
note stated that one

00:42:14,180 --> 00:42:20,750
okay you look like you're taking notes

00:42:22,099 --> 00:42:29,250
okay so you know having product level

00:42:26,220 --> 00:42:31,920
quality goals I think is important askme

00:42:29,250 --> 00:42:34,799
loesch to really kind of summarize what

00:42:31,920 --> 00:42:39,960
those goals are and so I'm gonna walk

00:42:34,799 --> 00:42:43,829
through these okay so as I was told

00:42:39,960 --> 00:42:47,099
we're we're aiming for a product quality

00:42:43,829 --> 00:42:49,020
so in order to get there we need to

00:42:47,099 --> 00:42:53,520
define what product actually so you

00:42:49,020 --> 00:42:55,740
don't forget to do it first need to

00:42:53,520 --> 00:42:58,650
define the requirements for for the

00:42:55,740 --> 00:43:01,049
product well it's like I don't want to

00:42:58,650 --> 00:43:03,089
stick to naming is that requirement user

00:43:01,049 --> 00:43:05,579
stories or whatever you call it it's

00:43:03,089 --> 00:43:10,079
basically we need to gather the

00:43:05,579 --> 00:43:12,720
description of what we want to do then

00:43:10,079 --> 00:43:15,150
for each reference build they're

00:43:12,720 --> 00:43:18,539
probably the set of requirements will be

00:43:15,150 --> 00:43:20,010
different so the consumer edition set of

00:43:18,539 --> 00:43:25,430
requirements will be different from the

00:43:20,010 --> 00:43:27,960
enterprise one but among those the

00:43:25,430 --> 00:43:29,880
journey to be a decision or agreement

00:43:27,960 --> 00:43:32,789
which requirements are mandatory so

00:43:29,880 --> 00:43:35,609
which made a core of the of the build

00:43:32,789 --> 00:43:39,779
without those requirements fulfilled we

00:43:35,609 --> 00:43:41,700
won't really my idea is that the initial

00:43:39,779 --> 00:43:45,900
set of requirements should come up come

00:43:41,700 --> 00:43:48,270
from the 96 board specifications there

00:43:45,900 --> 00:43:51,809
are like there is a software part in the

00:43:48,270 --> 00:43:56,760
specs and this makes a pretty good

00:43:51,809 --> 00:43:59,640
baseline for for is trying to define the

00:43:56,760 --> 00:44:01,470
requirements then I guess after the

00:43:59,640 --> 00:44:03,299
initial phase we will go to the reviews

00:44:01,470 --> 00:44:07,250
and and decide which stakeholders what

00:44:03,299 --> 00:44:11,670
what the insurer set is so those should

00:44:07,250 --> 00:44:13,770
compare like we compose of the future

00:44:11,670 --> 00:44:17,819
requirements performance requirements

00:44:13,770 --> 00:44:20,819
and robustness like for the moment there

00:44:17,819 --> 00:44:24,799
were a lot of complaints about stability

00:44:20,819 --> 00:44:24,799
of the bills that we that we produce

00:44:25,870 --> 00:44:34,180
the ultimate goal of this exercise is to

00:44:28,690 --> 00:44:36,220
provide testing and validation coverage

00:44:34,180 --> 00:44:37,690
for for all the requirements at the

00:44:36,220 --> 00:44:43,990
moment we don't test all the features

00:44:37,690 --> 00:44:56,290
and we need to get there in order to to

00:44:43,990 --> 00:45:00,760
ship the product product type bills then

00:44:56,290 --> 00:45:02,530
after this happens so still this is

00:45:00,760 --> 00:45:09,010
still the work to be done after this

00:45:02,530 --> 00:45:11,470
happens then some some criteria for

00:45:09,010 --> 00:45:14,710
releasing is to be defined the proposal

00:45:11,470 --> 00:45:16,750
the proposals are here so all the

00:45:14,710 --> 00:45:18,280
requirements or the mandatory

00:45:16,750 --> 00:45:21,550
requirements should be colored with

00:45:18,280 --> 00:45:23,590
tests then the optional requirements

00:45:21,550 --> 00:45:29,470
might be covered it I would recommend

00:45:23,590 --> 00:45:32,050
that but it's not mandatory then for the

00:45:29,470 --> 00:45:33,820
testing cycle the run rate of all the

00:45:32,050 --> 00:45:38,290
tests should be a hundred percent so all

00:45:33,820 --> 00:45:40,570
the tests should be run for 3ds and for

00:45:38,290 --> 00:45:42,540
the mandatory requirements for optional

00:45:40,570 --> 00:45:46,720
it's not like they don't have to be all

00:45:42,540 --> 00:45:48,340
run but if we have them that why not my

00:45:46,720 --> 00:45:52,060
proposal is to have the pass rate of

00:45:48,340 --> 00:45:55,840
ninety percent it's i would say

00:45:52,060 --> 00:45:58,710
ambitious goal at the moment but if you

00:45:55,840 --> 00:46:03,880
want to have a good quality then this is

00:45:58,710 --> 00:46:05,920
like this is a good target again when

00:46:03,880 --> 00:46:08,140
completing the release candidates the

00:46:05,920 --> 00:46:12,190
the criteria for completing should be

00:46:08,140 --> 00:46:17,170
like no blocker defects complete rc1 now

00:46:12,190 --> 00:46:19,060
critical defects of ability to and of

00:46:17,170 --> 00:46:21,340
course we can dispute what is the bug

00:46:19,060 --> 00:46:25,800
severity based on the requirements and

00:46:21,340 --> 00:46:25,800
based on the goal of the of the release

00:46:27,780 --> 00:46:34,690
i think what we should also aim to is

00:46:31,480 --> 00:46:37,690
that the performance metrics are do not

00:46:34,690 --> 00:46:38,380
regress in the incremental releases so

00:46:37,690 --> 00:46:42,420
we

00:46:38,380 --> 00:46:46,750
perform the same as we did last time

00:46:42,420 --> 00:46:48,250
hopefully better now whether we do

00:46:46,750 --> 00:46:53,380
time-based release or feature based

00:46:48,250 --> 00:46:54,970
religion she has to be decided I guess

00:46:53,380 --> 00:46:56,650
it depends on the on the group

00:46:54,970 --> 00:46:58,840
requirement so at the moment we do

00:46:56,650 --> 00:47:02,050
time-based releases so whatever features

00:46:58,840 --> 00:47:04,600
are there we just released and either

00:47:02,050 --> 00:47:08,320
announced and supported or not so based

00:47:04,600 --> 00:47:11,800
on the testing criteria so that's how

00:47:08,320 --> 00:47:15,420
the plan for ensuring the quality in a

00:47:11,800 --> 00:47:15,420
nutshell looks like

00:47:29,040 --> 00:47:37,030
improve your test case and attract them

00:47:33,580 --> 00:47:38,860
all yes the idea is to have the hundred

00:47:37,030 --> 00:47:40,480
percent of coverage of requirements we

00:47:38,860 --> 00:47:43,810
don't have the full set of requirements

00:47:40,480 --> 00:47:48,340
defined yet so that we don't have them

00:47:43,810 --> 00:47:50,230
covered of course and the set of tests

00:47:48,340 --> 00:47:52,180
we were using is open so anyone can

00:47:50,230 --> 00:47:55,120
contribute to improve those so there's

00:47:52,180 --> 00:47:57,280
no problem doing that and my goal is to

00:47:55,120 --> 00:47:59,320
have the hundred percent coverage so

00:47:57,280 --> 00:48:03,570
without that it would be pretty hard to

00:47:59,320 --> 00:48:03,570
ensure that product ok.thank level quite

00:48:06,030 --> 00:48:10,840
what sort of baseline would you

00:48:07,990 --> 00:48:14,290
establish for your performance goals the

00:48:10,840 --> 00:48:17,050
baseline for for performance goals yeah

00:48:14,290 --> 00:48:18,400
so that's still to be agreed so i guess

00:48:17,050 --> 00:48:20,740
i guess the baseline would be what we

00:48:18,400 --> 00:48:22,510
have now if there are like no because

00:48:20,740 --> 00:48:24,910
all going to be hardware dependent right

00:48:22,510 --> 00:48:27,520
sorry it's all going to be high so the

00:48:24,910 --> 00:48:30,340
performance metrics should be verified /

00:48:27,520 --> 00:48:31,930
hardware platform so we don't want to

00:48:30,340 --> 00:48:33,550
compare between platforms what we want

00:48:31,930 --> 00:48:35,620
to ensure that the software did we run

00:48:33,550 --> 00:48:37,420
on each platform doesn't regress so we

00:48:35,620 --> 00:48:39,100
compare apples to apples between each

00:48:37,420 --> 00:48:44,020
release and make sure that it doesn't

00:48:39,100 --> 00:48:46,210
address right I mean maybe since since

00:48:44,020 --> 00:48:48,730
the vendors themselves do some of this

00:48:46,210 --> 00:48:50,440
testing at least a subset of what we are

00:48:48,730 --> 00:48:52,540
doing or he actually they probably do a

00:48:50,440 --> 00:48:54,100
superset of what we are doing so maybe

00:48:52,540 --> 00:48:57,480
you could get the initial numbers from

00:48:54,100 --> 00:49:01,870
them just make babies they want to share

00:48:57,480 --> 00:49:05,050
yeah when I would be I could see that

00:49:01,870 --> 00:49:06,850
kind of a sharing really of an arrow to

00:49:05,050 --> 00:49:09,280
that specific member so wouldn't

00:49:06,850 --> 00:49:11,110
necessarily be your open group we could

00:49:09,280 --> 00:49:14,650
definitely because we want everybody to

00:49:11,110 --> 00:49:16,450
get you know better performing products

00:49:14,650 --> 00:49:22,180
in the end so getting that information

00:49:16,450 --> 00:49:24,340
back to them how I would you make the

00:49:22,180 --> 00:49:29,020
link between the regiment and the test

00:49:24,340 --> 00:49:33,010
you are running on your list I can't

00:49:29,020 --> 00:49:35,710
follow I can hear the question how do

00:49:33,010 --> 00:49:36,349
you make the link between a requirement

00:49:35,710 --> 00:49:43,729
and

00:49:36,349 --> 00:49:48,440
test or something traceability yeah so

00:49:43,729 --> 00:49:49,970
at the moment we don't have much of that

00:49:48,440 --> 00:49:53,180
we're building a dashboard that that

00:49:49,970 --> 00:49:55,670
will allow us to track between like from

00:49:53,180 --> 00:50:00,859
from requirements down to test results

00:49:55,670 --> 00:50:05,420
hopefully it's sort of what we don't

00:50:00,859 --> 00:50:07,700
have a session on it right yeah we're

00:50:05,420 --> 00:50:09,140
definitely recognize that you know to

00:50:07,700 --> 00:50:11,359
take this to the product level we need

00:50:09,140 --> 00:50:12,680
to bring in a lot of those practices so

00:50:11,359 --> 00:50:15,079
have the traceability from the

00:50:12,680 --> 00:50:17,119
requirements that are agreed upon by the

00:50:15,079 --> 00:50:25,519
different groups traceability through

00:50:17,119 --> 00:50:27,140
the feature and then you know given that

00:50:25,519 --> 00:50:40,969
kind of a system and start tracking

00:50:27,140 --> 00:50:42,469
coverage percentage some more common

00:50:40,969 --> 00:50:46,329
rather than questions so first comment

00:50:42,469 --> 00:50:49,640
on the performance so by default we are

00:50:46,329 --> 00:50:51,079
not going to compel as Miller said quite

00:50:49,640 --> 00:50:54,170
rightly we're not going to publish

00:50:51,079 --> 00:50:55,999
compel comparison between platforms and

00:50:54,170 --> 00:50:58,039
performance or without specific

00:50:55,999 --> 00:50:59,630
agreement of ways Portland I guess I

00:50:58,039 --> 00:51:02,359
guess that their general comment is we

00:50:59,630 --> 00:51:05,029
won't be publishing any numbers and Eero

00:51:02,359 --> 00:51:07,759
numbers we might publish something like

00:51:05,029 --> 00:51:09,619
this platform improved from last time by

00:51:07,759 --> 00:51:11,539
ten percent or something like this but

00:51:09,619 --> 00:51:14,420
right about raw numbers yes especially

00:51:11,539 --> 00:51:17,749
between associate who s sa is not in our

00:51:14,420 --> 00:51:20,660
mandate to do so second second comments

00:51:17,749 --> 00:51:22,819
regarding the cup test I mean I said I

00:51:20,660 --> 00:51:24,619
guess the traceability so absolute right

00:51:22,819 --> 00:51:26,779
so we need to be able to establish the

00:51:24,619 --> 00:51:29,660
round robin to the test cases and that

00:51:26,779 --> 00:51:31,910
might evolve as well and it also got my

00:51:29,660 --> 00:51:34,430
vary from segment two segments group

00:51:31,910 --> 00:51:37,819
yeah from check i guess the requirements

00:51:34,430 --> 00:51:39,710
by vary from from from one bill to the

00:51:37,819 --> 00:51:41,839
other and I guess even for the platform

00:51:39,710 --> 00:51:44,299
the set of requirements might be

00:51:41,839 --> 00:51:47,230
different because for example somehow

00:51:44,299 --> 00:51:51,520
some platforms might not have

00:51:47,230 --> 00:51:54,150
some hardware in a bullfight Dragon Ball

00:51:51,520 --> 00:51:54,150
has GPS

00:52:07,180 --> 00:52:15,170
okay so the next is really what's coming

00:52:10,990 --> 00:52:17,960
kind of a discussion slide here so we

00:52:15,170 --> 00:52:19,880
are working to establish a reference

00:52:17,960 --> 00:52:21,880
platform portal portal which will kind

00:52:19,880 --> 00:52:24,710
of be the landing page for the project

00:52:21,880 --> 00:52:26,630
provide description provide links to the

00:52:24,710 --> 00:52:31,040
specifications the tests the test

00:52:26,630 --> 00:52:32,690
coverage etc we are evaluating the new

00:52:31,040 --> 00:52:35,330
reference build use cases as they are

00:52:32,690 --> 00:52:37,070
coming in from the members getting our

00:52:35,330 --> 00:52:41,810
strategies in place working with them on

00:52:37,070 --> 00:52:44,350
those specifications evaluating new

00:52:41,810 --> 00:52:48,260
hardware boards that are coming in and

00:52:44,350 --> 00:52:50,720
you know really the closer you get to

00:52:48,260 --> 00:52:52,070
the day you know an upstream supported

00:52:50,720 --> 00:52:59,120
board the easier it would be to bring

00:52:52,070 --> 00:53:02,510
into the project and working with a 96

00:52:59,120 --> 00:53:06,620
boards project I think they they talked

00:53:02,510 --> 00:53:10,210
about two different levels of 96 boards

00:53:06,620 --> 00:53:17,690
in both community and kind of reference

00:53:10,210 --> 00:53:20,360
hardware certifications and had it

00:53:17,690 --> 00:53:21,890
adding the oh yeah that's different

00:53:20,360 --> 00:53:23,990
classes the rough from software you know

00:53:21,890 --> 00:53:25,880
so challenge we have right now is

00:53:23,990 --> 00:53:29,150
feature completeness with a mere

00:53:25,880 --> 00:53:31,340
mainline kernel we end up with something

00:53:29,150 --> 00:53:34,780
that is a little harder to do a full

00:53:31,340 --> 00:53:39,050
end-to-end verification validation ons

00:53:34,780 --> 00:53:41,860
the concept here is to have you know

00:53:39,050 --> 00:53:44,810
have the ability to do some verification

00:53:41,860 --> 00:53:48,410
that's a little more complete for an

00:53:44,810 --> 00:53:50,060
Indian use case maybe it uses a kernel

00:53:48,410 --> 00:53:52,850
that's a little further from tip maybe

00:53:50,060 --> 00:53:55,580
it uses something that provides a little

00:53:52,850 --> 00:53:57,380
more feature support but it's not quite

00:53:55,580 --> 00:54:00,080
a tip board and that would be more of a

00:53:57,380 --> 00:54:02,360
community project versus the really that

00:54:00,080 --> 00:54:04,130
reference platform project which is

00:54:02,360 --> 00:54:07,070
trying to stay as close to tip as

00:54:04,130 --> 00:54:09,440
possible but maybe you know but also to

00:54:07,070 --> 00:54:14,619
have the features necessary to you know

00:54:09,440 --> 00:54:16,710
to really be an end and use case yeah

00:54:14,619 --> 00:54:16,710
you

00:54:30,360 --> 00:54:41,130
I don't know if anything's written that

00:54:36,780 --> 00:54:43,770
specific but I could see that as being

00:54:41,130 --> 00:54:46,890
illogical so the question around if you

00:54:43,770 --> 00:54:49,710
you use the reference platform and then

00:54:46,890 --> 00:54:52,500
you make a change to it and it makes a

00:54:49,710 --> 00:54:53,880
change that maybe violates one of the no

00:54:52,500 --> 00:54:55,380
one of the core principles of being an

00:54:53,880 --> 00:54:58,200
upstream so maybe you take your kernel

00:54:55,380 --> 00:54:59,610
on it's a 318 based gendered kernel that

00:54:58,200 --> 00:55:02,160
works really well and provides all the

00:54:59,610 --> 00:55:06,200
features can you still call that this is

00:55:02,160 --> 00:55:06,200
derived from allah na reference platform

00:55:06,740 --> 00:55:14,940
maybe i don't know if we have that that

00:55:10,890 --> 00:55:18,480
language really specify them do you have

00:55:14,940 --> 00:55:26,190
any gang as far as the plans on the 96

00:55:18,480 --> 00:55:29,760
boards so the main difference between a

00:55:26,190 --> 00:55:32,370
community I mean RP certify is really in

00:55:29,760 --> 00:55:34,830
terms of hardware right so the main

00:55:32,370 --> 00:55:37,790
difference between the first group in

00:55:34,830 --> 00:55:40,980
some compute community board and as to

00:55:37,790 --> 00:55:43,890
RT ip35 both is really down to the

00:55:40,980 --> 00:55:45,300
software so that's really what is it you

00:55:43,890 --> 00:55:48,290
know the difference between those two

00:55:45,300 --> 00:55:52,410
for the community boards vendo provide

00:55:48,290 --> 00:55:55,230
software will be sufficient for the RP

00:55:52,410 --> 00:55:59,070
certified hardware you have to be able

00:55:55,230 --> 00:56:02,010
to meet the requirements were setting

00:55:59,070 --> 00:56:04,560
for the boat to becomes reference

00:56:02,010 --> 00:56:06,680
software worthy for example upstream

00:56:04,560 --> 00:56:09,150
requirements open source bootloader

00:56:06,680 --> 00:56:11,540
accessory so that's really the key

00:56:09,150 --> 00:56:11,540
difference

00:56:20,980 --> 00:56:24,240
any other questions

00:56:27,990 --> 00:56:32,760
we definitely want to keep the dialogue

00:56:29,640 --> 00:56:34,619
open we will be establishing the portal

00:56:32,760 --> 00:56:37,710
and also some other communication

00:56:34,619 --> 00:56:41,580
channels as well and so you have

00:56:37,710 --> 00:56:43,460
questions you don't ask here hopefully

00:56:41,580 --> 00:56:47,520
have a open way to have that dialogue

00:56:43,460 --> 00:56:49,830
coming up so stay tuned we'll make sure

00:56:47,520 --> 00:56:53,970
that that information gets out and you

00:56:49,830 --> 00:56:58,130
can always contact any of us you know

00:56:53,970 --> 00:57:00,180
alan bennett at menara org the other

00:56:58,130 --> 00:57:04,490
people if you have questions or concerns

00:57:00,180 --> 00:57:04,490

YouTube URL: https://www.youtube.com/watch?v=WFY0Kt3HDas


