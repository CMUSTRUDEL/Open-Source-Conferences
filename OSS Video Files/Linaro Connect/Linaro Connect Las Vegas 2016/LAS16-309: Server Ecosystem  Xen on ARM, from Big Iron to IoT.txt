Title: LAS16-309: Server Ecosystem  Xen on ARM, from Big Iron to IoT
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-309: Server Ecosystem: Xen on ARM, from Big Iron to IoT & LuaJIT status on Aarch64
Speakers: Ryan Arnold, Steve Capper, Julien Grall, Zheng Xu
Date: September 28, 2016

Second presentation:  http://www.slideshare.net/linaroorg/las16-309-lua-jit-arm64-port-status
Download second presentation;  http://s3.amazonaws.com/connect.linaro.org/las16/Presentations/Wednesday/LAS16-309%20-%20LuaJIT%20ARM64%20Port%20-%20Status.pdf

★ Session Description ★
Abstract Xen on ARM: The Xen port is exploiting this set of new hardware capabilities to run guest VMs in the most efficient way possible while keeping ARM specific changes to Xen and Linux to a minimum. ARM virtualization is set to be increasingly relevant for the embedded industry in the coming years.
Whilst Xen is best known as the technology powering the biggest clouds in the industry, it also a great fit for automotive deployments and mobile devices that can fit in your pocket. The talk will give concrete examples of the ways Xen can add value to your platforms, not only by providing an excellent general purpose virtualization solution, but also by providing simple, yet effective ways to partition the platform into different security domains.
This presentation will include a brief overview of the Xen on ARM architecture, covering the key design principles employed. The techniques pioneered during the ARM port that allowed the Xen community to remove many legacy components from the Xen code base, streamlining both the ARM and x86 implementations. The talk will conclude explaining how to port Xen to any new ARM boards with the least amount of effort.

Abstract LuaJIT: Lua is a scripting language commonly embedded by web front-ends. Enabling Lua JIT compilation can reduce CPU usage when  handling huge amounts of network traffic. This year Linaro (and others) started to work on porting LuaJIT to AArch64. Though the work is not finished we have made good progress. This presentation will briefly introduce LuaJIT, discuss the technical challenges of porting to AArch64, and address the progress of the porting effort and the
next steps.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-309
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-309/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:00,320 --> 00:00:11,130
[Music]

00:00:07,610 --> 00:00:15,210
I'm drilling I've been walking on then

00:00:11,130 --> 00:00:19,400
for the past fires I'm muttering with

00:00:15,210 --> 00:00:23,010
stiffener stable in easy on both of them

00:00:19,400 --> 00:00:24,900
so exam is a type 1 hypervisor so it

00:00:23,010 --> 00:00:27,090
means it's running the ugly on top of

00:00:24,900 --> 00:00:30,900
the other way we support different

00:00:27,090 --> 00:00:34,590
architectures such as x86 and 64 bit on

00:00:30,900 --> 00:00:38,780
the MV 78 when the authorization is

00:00:34,590 --> 00:00:41,550
enabled so the main difference between

00:00:38,780 --> 00:00:43,680
so what is the type 1 I pave sources ice

00:00:41,550 --> 00:00:46,829
to type of ipod obviously type 1 type 2

00:00:43,680 --> 00:00:49,590
the type 1 equals R will likely run on

00:00:46,829 --> 00:00:51,840
the on top of the other wire on the end

00:00:49,590 --> 00:00:54,270
you have each guest on top of it with

00:00:51,840 --> 00:00:58,140
the applications in case of the type to

00:00:54,270 --> 00:01:00,719
hypervisor you will first start your

00:00:58,140 --> 00:01:02,340
windows or linux on then you will have

00:01:00,719 --> 00:01:05,400
the ipod on top of it for example

00:01:02,340 --> 00:01:09,619
VirtualBox is one of the main type to a

00:01:05,400 --> 00:01:14,040
Palazzo on then you will have the guests

00:01:09,619 --> 00:01:16,890
after that so enjoy castles and the

00:01:14,040 --> 00:01:19,560
architecture so has I sex and is the

00:01:16,890 --> 00:01:21,720
ugly running on the adware exam itself

00:01:19,560 --> 00:01:24,030
is very small so we don't support our

00:01:21,720 --> 00:01:25,530
driver in size so we expect one domain

00:01:24,030 --> 00:01:28,409
which will catch it at the beginning

00:01:25,530 --> 00:01:31,770
donne 0 which will on most of the other

00:01:28,409 --> 00:01:33,479
wire like pci network at exeter it would

00:01:31,770 --> 00:01:36,420
be also the control domain so when you

00:01:33,479 --> 00:01:38,610
want to create a new guest every the

00:01:36,420 --> 00:01:40,590
user space tools will be there so to

00:01:38,610 --> 00:01:43,770
stack to go ask for the configurations

00:01:40,590 --> 00:01:46,110
with this cake CTL after that when you

00:01:43,770 --> 00:01:53,340
want so you got multiple guests each

00:01:46,110 --> 00:01:56,399
guest will needs network blog etc what

00:01:53,340 --> 00:01:58,950
we use for block on the network is PV

00:01:56,399 --> 00:02:01,710
drivers so pv reverse is a back-end on

00:01:58,950 --> 00:02:04,469
content so from 10 is on the guest the

00:02:01,710 --> 00:02:06,810
back end is on dom0 on most other case

00:02:04,469 --> 00:02:08,020
on if they will communicate to get the

00:02:06,810 --> 00:02:12,400
networks on

00:02:08,020 --> 00:02:17,470
disk so there is no emulation on the on

00:02:12,400 --> 00:02:19,810
the guests so exam as many different

00:02:17,470 --> 00:02:21,400
videos on some of them have very

00:02:19,810 --> 00:02:23,440
specific to their legs drive out them

00:02:21,400 --> 00:02:25,600
and I will go a bit further on the next

00:02:23,440 --> 00:02:27,460
slide so second thing we can have is

00:02:25,600 --> 00:02:30,370
like different schedules so we got some

00:02:27,460 --> 00:02:32,680
main scheduler credit to on we ever so

00:02:30,370 --> 00:02:35,160
real time schedule if you want to use in

00:02:32,680 --> 00:02:38,230
automotive or in content of the unknown

00:02:35,160 --> 00:02:39,940
we can also have the film's have a pool

00:02:38,230 --> 00:02:41,950
of CPU like for instance you got many

00:02:39,940 --> 00:02:43,930
CPUs on you want different schedule so

00:02:41,950 --> 00:02:46,270
we can have a scheduler for a specific

00:02:43,930 --> 00:02:49,450
set of CPU on another scheduler like a

00:02:46,270 --> 00:02:52,840
real time for another set of CPU you can

00:02:49,450 --> 00:02:54,850
also pin guests to a specific CPU if you

00:02:52,840 --> 00:02:57,760
want performance on it avoiding the

00:02:54,850 --> 00:03:00,970
scheduler one of her so the main

00:02:57,760 --> 00:03:03,850
features that we are using is memo

00:03:00,970 --> 00:03:06,430
introspection so the idea is to be able

00:03:03,850 --> 00:03:09,130
to watch what the gas is doing so for

00:03:06,430 --> 00:03:12,310
instance if having a tunnel Taveras is

00:03:09,130 --> 00:03:16,270
an operating system in a guest the guest

00:03:12,310 --> 00:03:18,160
may be compromised by a mile of oil so

00:03:16,270 --> 00:03:20,200
you won't be able to john tavares may

00:03:18,160 --> 00:03:23,100
not work anymore so what you may want to

00:03:20,200 --> 00:03:25,930
have is the integration in another vm on

00:03:23,100 --> 00:03:27,610
this vm will watch what is doing access

00:03:25,930 --> 00:03:31,959
to the memory access to system or

00:03:27,610 --> 00:03:34,060
sisters on exeter on the last video

00:03:31,959 --> 00:03:36,280
which is fairly common to every Webber's

00:03:34,060 --> 00:03:40,330
affinity is device vessel so being able

00:03:36,280 --> 00:03:43,660
to add a pci to assam a pci device to a

00:03:40,330 --> 00:03:47,320
gas authorizing like a network out of

00:03:43,660 --> 00:03:49,300
your sub to the guest so indicator

00:03:47,320 --> 00:03:52,209
driver demand so what I motion on the

00:03:49,300 --> 00:03:54,880
first slide is most of DV drivers most

00:03:52,209 --> 00:03:57,370
others most don't realize the main guest

00:03:54,880 --> 00:03:59,350
so if Tom's always questioning

00:03:57,370 --> 00:04:02,320
everything is questioning so in the case

00:03:59,350 --> 00:04:04,480
you won't be more easily shins you may

00:04:02,320 --> 00:04:06,840
want to use driver demand so the idea is

00:04:04,480 --> 00:04:09,640
to have specific domain for specific

00:04:06,840 --> 00:04:13,239
driver like a specific device like a

00:04:09,640 --> 00:04:16,270
disk private of disk drive alderman so

00:04:13,239 --> 00:04:17,769
this if your drivers question for any

00:04:16,270 --> 00:04:19,959
lessons you will just crushed

00:04:17,769 --> 00:04:22,180
when you won't touch them zero on the

00:04:19,959 --> 00:04:25,780
platform so this is i doing easily shins

00:04:22,180 --> 00:04:28,599
on your on your deal on your own

00:04:25,780 --> 00:04:30,099
villalon months also the idea is like

00:04:28,599 --> 00:04:32,470
you may want to have another operating

00:04:30,099 --> 00:04:34,889
system foil for your disc of fondling

00:04:32,470 --> 00:04:37,569
some device like unix or anything it on

00:04:34,889 --> 00:04:39,610
you can use a specific dollar demand

00:04:37,569 --> 00:04:46,409
with that with this device on using

00:04:39,610 --> 00:04:50,259
back-end on content for communicating so

00:04:46,409 --> 00:04:52,690
we also try am in general to have a

00:04:50,259 --> 00:04:55,120
really good good security process to be

00:04:52,690 --> 00:04:56,500
transparent so we explain every time

00:04:55,120 --> 00:04:59,050
that I the scituate with you we have a

00:04:56,500 --> 00:05:02,830
security mailing list where they will

00:04:59,050 --> 00:05:05,560
deal with with the person that live in

00:05:02,830 --> 00:05:07,449
the security to see explaining what's

00:05:05,560 --> 00:05:10,090
the issue what is the Medicaid

00:05:07,449 --> 00:05:13,030
mitigations on also defining when it

00:05:10,090 --> 00:05:15,940
will be released so in the indicator if

00:05:13,030 --> 00:05:18,969
you use that in big of elements are you

00:05:15,940 --> 00:05:21,280
don't want having a security zero-day

00:05:18,969 --> 00:05:24,009
security issues so what we are trying to

00:05:21,280 --> 00:05:27,400
do is is a bunch of people using them

00:05:24,009 --> 00:05:36,479
that are aware of the security a bit

00:05:27,400 --> 00:05:41,169
before the public so they can so okay so

00:05:36,479 --> 00:05:46,990
they can decide to patch if possible be

00:05:41,169 --> 00:05:50,229
found their use of them on then we want

00:05:46,990 --> 00:05:52,060
the secret the security issue is

00:05:50,229 --> 00:05:54,669
disclosed everything is working

00:05:52,060 --> 00:05:57,250
perfectly on there is no issue on we

00:05:54,669 --> 00:06:01,960
also have stubble twist so we really

00:05:57,250 --> 00:06:04,479
then every six months also this on we

00:06:01,960 --> 00:06:06,039
are also produced release a stable for

00:06:04,479 --> 00:06:08,800
moments so we do usually back fig

00:06:06,039 --> 00:06:10,870
security issue but after a couple of

00:06:08,800 --> 00:06:13,590
village we decide to do by Patrick bare

00:06:10,870 --> 00:06:17,590
face but we still continue to support a

00:06:13,590 --> 00:06:21,460
security issue for trails so if you are

00:06:17,590 --> 00:06:26,520
running a no not the latest version of

00:06:21,460 --> 00:06:26,520
then you will still be a secure

00:06:26,880 --> 00:06:33,490
so this is a main part of the talk via

00:06:30,640 --> 00:06:35,890
sedation on down so the first thing is

00:06:33,490 --> 00:06:38,590
vegetation alarm has been i did on em b7

00:06:35,890 --> 00:06:41,950
on the ice we potful mb 860 to bit on

00:06:38,590 --> 00:06:43,930
64-bit it provides a clean gutters ation

00:06:41,950 --> 00:06:48,340
interface for time where Intel

00:06:43,930 --> 00:06:51,640
controller on page tellers so the idea

00:06:48,340 --> 00:06:53,710
if you have your set of device with the

00:06:51,640 --> 00:06:56,770
genetic time I'll so giggly 20 degrees

00:06:53,710 --> 00:06:59,200
we mmm you on yu-gi-oh device on one

00:06:56,770 --> 00:07:03,760
side on you have so I did not specify

00:06:59,200 --> 00:07:05,620
the the first level of the trusted film

00:07:03,760 --> 00:07:09,310
well but you have basically swing over

00:07:05,620 --> 00:07:11,230
weekends and so you are VL to dl l to

00:07:09,310 --> 00:07:14,320
forge a Palazzo yellow one for the kill

00:07:11,230 --> 00:07:16,360
nine years ago for the user space on to

00:07:14,320 --> 00:07:21,490
communicate bit on year one year to you

00:07:16,360 --> 00:07:25,570
have the a pellicle the ashleys of Zen

00:07:21,490 --> 00:07:27,550
is fitting quite well in general of the

00:07:25,570 --> 00:07:29,860
arm architecture so the idea is you have

00:07:27,550 --> 00:07:32,740
l2 is then on during the genetic time

00:07:29,860 --> 00:07:35,500
also geek with two ones am a stage 2 mm

00:07:32,740 --> 00:07:37,090
you on you have done the which will

00:07:35,500 --> 00:07:41,020
endure all the other device like a

00:07:37,090 --> 00:07:43,090
decide pci network card exeter on on the

00:07:41,020 --> 00:07:45,970
other side of any guest VM which will

00:07:43,090 --> 00:07:53,050
communicate with them with every see or

00:07:45,970 --> 00:07:55,390
maybe some sharp edge what we try to do

00:07:53,050 --> 00:08:00,040
is so general name has been added in

00:07:55,390 --> 00:08:03,460
2012 then has been there since 2000 sway

00:08:00,040 --> 00:08:07,720
we started with the 36 where there was

00:08:03,460 --> 00:08:09,610
no other way about relations no honest

00:08:07,720 --> 00:08:12,160
has been added so we have got on x86

00:08:09,610 --> 00:08:16,840
quite a legacy in general of to support

00:08:12,160 --> 00:08:18,970
all the previous architecture so what we

00:08:16,840 --> 00:08:21,370
decided with their own arm is to get to

00:08:18,970 --> 00:08:24,070
clean up but so it's not like we didn't

00:08:21,370 --> 00:08:27,370
take 36 whatever was done on Putin's

00:08:24,070 --> 00:08:29,860
armed with your support we just rework

00:08:27,370 --> 00:08:33,130
from everything's so there is no device

00:08:29,860 --> 00:08:35,170
simulations we only support one kind of

00:08:33,130 --> 00:08:37,140
guests in case of ecstatic we've got

00:08:35,170 --> 00:08:41,760
five different guests

00:08:37,140 --> 00:08:44,180
and we exploit as much as possible to

00:08:41,760 --> 00:08:50,370
Viet relationship also like I said timer

00:08:44,180 --> 00:08:54,720
general Ike a geek on mmm you on the

00:08:50,370 --> 00:08:57,930
last things is we if you want to either

00:08:54,720 --> 00:09:02,040
support of a new ice booting us as a

00:08:57,930 --> 00:09:04,920
guest on then it's much easier those few

00:09:02,040 --> 00:09:09,360
things to our like p diverse also why we

00:09:04,920 --> 00:09:14,370
use most of the boot parts of the azu

00:09:09,360 --> 00:09:18,000
linux running on bare metal so smaller

00:09:14,370 --> 00:09:21,660
parts which means smaller code base so

00:09:18,000 --> 00:09:24,210
this is a slow cons of the previous

00:09:21,660 --> 00:09:27,450
Kelly's of of them than 47 which has

00:09:24,210 --> 00:09:33,150
been a linear on june so as you can see

00:09:27,450 --> 00:09:36,060
the arms that the arm part is like 125

00:09:33,150 --> 00:09:38,550
thousand levin card on the exit is but

00:09:36,060 --> 00:09:40,650
on the other side is above one all the

00:09:38,550 --> 00:09:43,560
way two thousand line of cards so it's

00:09:40,650 --> 00:09:48,360
very small it's like one fifth of the

00:09:43,560 --> 00:09:50,790
x86 part that means two things it's very

00:09:48,360 --> 00:09:53,670
small surface of attack so less code

00:09:50,790 --> 00:09:57,390
means less bugs unless possibility to

00:09:53,670 --> 00:09:59,280
exploits anything scale things we don't

00:09:57,390 --> 00:10:03,530
have any device summation which means we

00:09:59,280 --> 00:10:06,030
don't have creamish which is also i

00:10:03,530 --> 00:10:12,480
don't know the size of creamy but is

00:10:06,030 --> 00:10:14,730
quite a lot of line of godless on we are

00:10:12,480 --> 00:10:16,740
but also to as I say easily thing

00:10:14,730 --> 00:10:18,870
together getting the the different

00:10:16,740 --> 00:10:21,690
domain to a driver specific Iverson

00:10:18,870 --> 00:10:33,330
specific domain on also partitioning cpu

00:10:21,690 --> 00:10:36,930
on the memo so the next phase of then

00:10:33,330 --> 00:10:41,330
we'll be in the sand or so we move to a

00:10:36,930 --> 00:10:41,330
six-month a list in this unborn engine

00:10:41,630 --> 00:10:46,130
most of the features that will be

00:10:44,070 --> 00:10:48,950
supported will be

00:10:46,130 --> 00:10:52,190
but for so we care for bus there were

00:10:48,950 --> 00:10:54,710
some embedded system so there would be a

00:10:52,190 --> 00:10:58,550
supporter fee fi own guest on our

00:10:54,710 --> 00:11:01,610
support acpi CPR so this for both lost

00:10:58,550 --> 00:11:04,670
on inside the guest on we also do

00:11:01,610 --> 00:11:11,210
support a different personality like 64k

00:11:04,670 --> 00:11:14,530
16 k for k so most of the future we are

00:11:11,210 --> 00:11:18,500
close to the future part ii with 66 so

00:11:14,530 --> 00:11:23,150
all the main feature are present few of

00:11:18,500 --> 00:11:26,060
them are missing like busy a bicycle on

00:11:23,150 --> 00:11:28,790
we are trying to what every dailies more

00:11:26,060 --> 00:11:30,290
support of new boards on new platform so

00:11:28,790 --> 00:11:33,260
if you want to add support of your

00:11:30,290 --> 00:11:36,140
services it's very easily on most of the

00:11:33,260 --> 00:11:42,070
time you don't have machines what except

00:11:36,140 --> 00:11:47,170
the UART for debugging on the on the

00:11:42,070 --> 00:11:47,170
maybe cpu wing up if you don't use psci

00:11:47,590 --> 00:11:54,350
if you want to contribute if you want to

00:11:50,990 --> 00:11:55,850
use then we have differents you a

00:11:54,350 --> 00:11:57,410
different way to communicate them to

00:11:55,850 --> 00:11:58,910
have more information so you have the

00:11:57,410 --> 00:12:01,010
user mailing list where you can ask

00:11:58,910 --> 00:12:04,220
question about how to use them it

00:12:01,010 --> 00:12:07,070
doesn't work i'm not sure what can be

00:12:04,220 --> 00:12:11,030
done we also have a wiki where we

00:12:07,070 --> 00:12:14,750
explain how to build them for arm how to

00:12:11,030 --> 00:12:16,700
setup for specific boards and we have a

00:12:14,750 --> 00:12:23,690
white paper explaining the architecture

00:12:16,700 --> 00:12:29,840
of exam on in general on how to put a no

00:12:23,690 --> 00:12:31,520
passing system to the guests so we are

00:12:29,840 --> 00:12:33,230
always looking to have more people

00:12:31,520 --> 00:12:35,870
contributing exams so we have many

00:12:33,230 --> 00:12:39,410
features we aren't open source project

00:12:35,870 --> 00:12:40,820
so most of features as working on open

00:12:39,410 --> 00:12:42,860
source different mini company are

00:12:40,820 --> 00:12:46,700
working on it so if you want to

00:12:42,860 --> 00:12:50,570
contribute on then you can go on for

00:12:46,700 --> 00:12:52,130
patch tendons and devel on if you want

00:12:50,570 --> 00:12:54,280
to have a quick question or discussing

00:12:52,130 --> 00:12:59,410
with people i will use a young goats on

00:12:54,280 --> 00:12:59,410
Xena moans and devil on freenode

00:12:59,920 --> 00:13:05,980
so is there any questions

00:13:22,709 --> 00:13:30,720
so we are we were discussing with Lena

00:13:26,830 --> 00:13:33,730
orbits hiding multi-source in general on

00:13:30,720 --> 00:13:47,560
Armas Cooper a functional also working

00:13:33,730 --> 00:13:50,440
on Xena yes so I don't have the name but

00:13:47,560 --> 00:13:54,160
I was in the developer summit a couple

00:13:50,440 --> 00:13:57,240
months ago in Toronto for exam on many

00:13:54,160 --> 00:13:59,709
people wanting to use the non-automotive

00:13:57,240 --> 00:14:02,500
javiel that some people are making

00:13:59,709 --> 00:14:07,990
products for too much even also in this

00:14:02,500 --> 00:14:11,279
stage we seen many people care taking

00:14:07,990 --> 00:14:11,279
care of automotive engineer

00:14:17,329 --> 00:14:21,639
and those are questions last question

00:14:23,709 --> 00:14:27,100
thank you for listening

00:14:28,560 --> 00:14:32,060
[Applause]

00:15:06,310 --> 00:15:10,250
we're going to go over Louie jet status

00:15:08,600 --> 00:15:26,570
here in a little min a little bit just

00:15:10,250 --> 00:15:29,649
please bear with me as I set up okay

00:15:26,570 --> 00:15:29,649
that's not what I want

00:15:41,900 --> 00:15:43,960
you

00:15:45,470 --> 00:15:48,340
perfect

00:15:56,000 --> 00:16:00,650
alright hello my name is Ryan Arnold I'm

00:15:59,150 --> 00:16:03,370
the linaro toolchain working group

00:16:00,650 --> 00:16:07,490
engineering manager I'm going to go over

00:16:03,370 --> 00:16:09,670
the legit status forearm 64 port this

00:16:07,490 --> 00:16:13,100
has been something we've been working on

00:16:09,670 --> 00:16:15,710
in conjunction with our friends at arm

00:16:13,100 --> 00:16:19,540
as well as some business partners and

00:16:15,710 --> 00:16:23,630
members and also some community members

00:16:19,540 --> 00:16:25,520
the Lua jetport porting effort did start

00:16:23,630 --> 00:16:28,190
in april so we've been furiously working

00:16:25,520 --> 00:16:31,340
over the last four or five months on

00:16:28,190 --> 00:16:32,750
this port alright so first I want to

00:16:31,340 --> 00:16:34,910
just talk about what Lua is so you have

00:16:32,750 --> 00:16:37,370
a bit of background and then we'll go on

00:16:34,910 --> 00:16:40,220
to where the porting effort is so Lua is

00:16:37,370 --> 00:16:41,990
an interpreted scripting language that's

00:16:40,220 --> 00:16:44,180
easily embedded into application engines

00:16:41,990 --> 00:16:46,480
so you might ask well isn't isn't this

00:16:44,180 --> 00:16:48,980
just something that video games use and

00:16:46,480 --> 00:16:53,270
originally it was used by video games

00:16:48,980 --> 00:16:55,010
but it's also a very effective embedded

00:16:53,270 --> 00:16:58,850
scripting language for front-end / web

00:16:55,010 --> 00:16:59,960
server front ends so I'm not going to go

00:16:58,850 --> 00:17:02,830
through all the information on the

00:16:59,960 --> 00:17:06,050
slides it's for your information but

00:17:02,830 --> 00:17:09,140
this sly discusses how it's used in the

00:17:06,050 --> 00:17:12,530
end jinx web server for instance the

00:17:09,140 --> 00:17:20,360
interesting thing is that it it allows

00:17:12,530 --> 00:17:22,699
the it allows the the use of lua co

00:17:20,360 --> 00:17:24,470
routines to provide asynchronous yet

00:17:22,699 --> 00:17:26,660
non-blocking api access to network

00:17:24,470 --> 00:17:28,550
services and the interesting thing about

00:17:26,660 --> 00:17:30,830
using a jit is that shits are faster

00:17:28,550 --> 00:17:35,540
than just straight interpreted scripting

00:17:30,830 --> 00:17:37,220
languages and lua itself has the FFI

00:17:35,540 --> 00:17:39,500
interface which is the foreign function

00:17:37,220 --> 00:17:41,780
interface will get it I'll get into that

00:17:39,500 --> 00:17:43,850
just a little bit more in the next slide

00:17:41,780 --> 00:17:45,740
so we're also seeing this showing up in

00:17:43,850 --> 00:17:50,000
software packet networking engines likes

00:17:45,740 --> 00:17:55,100
NAB so Wailua jit specifically or why is

00:17:50,000 --> 00:17:57,680
legit interesting so just Louie jet is a

00:17:55,100 --> 00:18:00,230
trace is a trace compiler or a

00:17:57,680 --> 00:18:03,500
just-in-time trace compilation engine

00:18:00,230 --> 00:18:06,320
for the loo language appendix a goes

00:18:03,500 --> 00:18:08,810
over exactly what what a trace

00:18:06,320 --> 00:18:09,330
compilation engine does I'm not going to

00:18:08,810 --> 00:18:11,490
get to my

00:18:09,330 --> 00:18:13,340
into it other than to just say that it

00:18:11,490 --> 00:18:15,900
identifies a hot spot in code and

00:18:13,340 --> 00:18:18,660
compiled that code and then future

00:18:15,900 --> 00:18:20,310
iterations of that hot spot are executed

00:18:18,660 --> 00:18:22,770
with the compiled code rather than in

00:18:20,310 --> 00:18:26,040
interpretive mode so there's anecdotal

00:18:22,770 --> 00:18:28,710
information that says that Louie jet

00:18:26,040 --> 00:18:30,570
itself outperforms other scripting

00:18:28,710 --> 00:18:33,870
languages like Python Ruby and

00:18:30,570 --> 00:18:36,690
interpreted Lua by about 10 X which is

00:18:33,870 --> 00:18:38,670
which is pretty impressive and like i

00:18:36,690 --> 00:18:40,380
said the FFI interface allows the

00:18:38,670 --> 00:18:42,930
invocation of high-performance c library

00:18:40,380 --> 00:18:44,760
functions from within Luis scripts so

00:18:42,930 --> 00:18:48,360
you can see how this can be pretty

00:18:44,760 --> 00:18:50,340
powerful for a web server it can script

00:18:48,360 --> 00:18:52,500
what it wants to do with lua and then

00:18:50,340 --> 00:18:59,250
call out to a highly optimized library

00:18:52,500 --> 00:19:03,350
if it was so legit support for AR 64 has

00:18:59,250 --> 00:19:06,570
been noticeably lacking until recently

00:19:03,350 --> 00:19:08,460
so the slide header is a or 64 but

00:19:06,570 --> 00:19:11,550
you'll notice I reference arm 64

00:19:08,460 --> 00:19:14,370
throughout this is because the logic

00:19:11,550 --> 00:19:18,900
community refers to the 64-bit ARM v8

00:19:14,370 --> 00:19:22,140
architecture as RM 64 so currently only

00:19:18,900 --> 00:19:26,490
or previously only interpreted mode

00:19:22,140 --> 00:19:28,710
worked for arm 64 whereas x86 64 had jet

00:19:26,490 --> 00:19:30,840
support and this this clearly puts arm

00:19:28,710 --> 00:19:35,970
at a disadvantage performance a

00:19:30,840 --> 00:19:39,060
disadvantage to x86 64 so if we look at

00:19:35,970 --> 00:19:41,190
what's in a lua Jetport this would

00:19:39,060 --> 00:19:43,140
explain this explains the effort that's

00:19:41,190 --> 00:19:45,180
necessary to get the jet working for arm

00:19:43,140 --> 00:19:49,290
64 I'm not going to go over this

00:19:45,180 --> 00:19:52,320
completely but it involves a large

00:19:49,290 --> 00:19:53,910
number of steps and so this is like this

00:19:52,320 --> 00:19:55,380
is the effort involved this is what our

00:19:53,910 --> 00:19:59,190
engineers have been working on over the

00:19:55,380 --> 00:20:00,390
last five months and we'll talk through

00:19:59,190 --> 00:20:04,670
some of these stuffs just a little bit

00:20:00,390 --> 00:20:07,920
later so leg the lennar enter cry

00:20:04,670 --> 00:20:11,670
Enterprise Group has petitioned TC WG to

00:20:07,920 --> 00:20:16,230
help work on porting lua jet jet to arm

00:20:11,670 --> 00:20:19,710
64 so we have some engineers in TC WG as

00:20:16,230 --> 00:20:21,570
well as engineers in in leg and some

00:20:19,710 --> 00:20:23,010
some industry friends and partners

00:20:21,570 --> 00:20:26,370
working on this

00:20:23,010 --> 00:20:29,190
hurt so to get access to the trees you

00:20:26,370 --> 00:20:30,690
can find them on github and you can see

00:20:29,190 --> 00:20:32,550
the project development history here

00:20:30,690 --> 00:20:36,540
it's a long list of commits over the

00:20:32,550 --> 00:20:38,940
last five months so if we look at the

00:20:36,540 --> 00:20:42,000
phases of the logit project started with

00:20:38,940 --> 00:20:45,840
defining the project scope identifying a

00:20:42,000 --> 00:20:47,940
minimum viable project and then exposing

00:20:45,840 --> 00:20:51,510
and implementing ir translation hooks

00:20:47,940 --> 00:20:53,490
and once those are completed moving into

00:20:51,510 --> 00:20:56,130
continuous integration eventually up

00:20:53,490 --> 00:20:59,160
streaming and optimization so currently

00:20:56,130 --> 00:21:01,560
we are in phase 3 so as of this morning

00:20:59,160 --> 00:21:04,080
all the developers agreed that the Lua

00:21:01,560 --> 00:21:07,310
jet arm 64 port is functionally complete

00:21:04,080 --> 00:21:09,330
so that's a major milestone thank you

00:21:07,310 --> 00:21:12,960
you can clap for me but you're really

00:21:09,330 --> 00:21:15,720
clapping for these guys so now we're in

00:21:12,960 --> 00:21:17,280
the phase of continuous integration and

00:21:15,720 --> 00:21:19,350
integration testing so continuous

00:21:17,280 --> 00:21:21,090
integration is future commit level

00:21:19,350 --> 00:21:26,250
testing verifying we're not regressing

00:21:21,090 --> 00:21:30,210
either arm 64 x86 64 and the integration

00:21:26,250 --> 00:21:33,750
testing will be a CI loop that allows us

00:21:30,210 --> 00:21:37,080
to test legit chip mode with different

00:21:33,750 --> 00:21:38,640
applications such as engines also part

00:21:37,080 --> 00:21:42,660
of phase 3 is a long tale of bug fixes

00:21:38,640 --> 00:21:45,120
and secondary feature fixes preparation

00:21:42,660 --> 00:21:48,330
for up streaming some small

00:21:45,120 --> 00:21:50,610
optimizations phase 4 and phase 5 are

00:21:48,330 --> 00:21:52,440
grayed out here but those are those are

00:21:50,610 --> 00:21:56,460
forthcoming that is up streaming and

00:21:52,440 --> 00:21:58,650
optimization itself all right so what

00:21:56,460 --> 00:22:01,170
will be done in phase 3 as I said we've

00:21:58,650 --> 00:22:04,380
long tale of bug fixes implementing the

00:22:01,170 --> 00:22:07,710
automation CI and integration there were

00:22:04,380 --> 00:22:10,380
some lingering issues with LJG c64 my

00:22:07,710 --> 00:22:13,710
understanding is were very close to x86

00:22:10,380 --> 00:22:17,310
64 here this feature enables 64-bit

00:22:13,710 --> 00:22:20,280
address space in lua and that was just

00:22:17,310 --> 00:22:22,860
recently added to x86 64 I think it was

00:22:20,280 --> 00:22:26,010
two months ago or one and a half two

00:22:22,860 --> 00:22:30,540
months ago so we're not too far behind

00:22:26,010 --> 00:22:32,400
x86 64 in this regard so phase two this

00:22:30,540 --> 00:22:34,010
slide is here because when I wrote the

00:22:32,400 --> 00:22:36,080
slide deck we were still in phase two

00:22:34,010 --> 00:22:38,510
but we have now

00:22:36,080 --> 00:22:41,929
now completed phase two which is all the

00:22:38,510 --> 00:22:43,669
functional all the functionality and

00:22:41,929 --> 00:22:47,149
feature additions to Luigi to get the

00:22:43,669 --> 00:22:48,380
JIT working so i won't go go through all

00:22:47,149 --> 00:22:49,700
this but this is just some of the

00:22:48,380 --> 00:22:52,850
challenges that the engineers have

00:22:49,700 --> 00:22:54,679
worked through so when you look at

00:22:52,850 --> 00:22:57,649
what's left for the for the actual port

00:22:54,679 --> 00:23:02,779
as you can see here we r we are very

00:22:57,649 --> 00:23:04,360
nearly fully complete and complete

00:23:02,779 --> 00:23:06,950
enough as i said before that the

00:23:04,360 --> 00:23:10,340
developers have declare that the port is

00:23:06,950 --> 00:23:12,230
functionally complete so what does

00:23:10,340 --> 00:23:15,289
functional completeness mean it means

00:23:12,230 --> 00:23:18,649
that the IR and translation hooks are

00:23:15,289 --> 00:23:20,029
complete this is with the exception of

00:23:18,649 --> 00:23:23,690
the optimization hook which will be

00:23:20,029 --> 00:23:27,830
added later the entire test suite can

00:23:23,690 --> 00:23:29,360
execute to completion in isolation we do

00:23:27,830 --> 00:23:30,950
have a garbage collector bug but there

00:23:29,360 --> 00:23:32,720
are some known issues in the garbage

00:23:30,950 --> 00:23:37,519
collector and I believe the same issue

00:23:32,720 --> 00:23:43,580
is found in x86 64 Charles can correct

00:23:37,519 --> 00:23:45,409
me if I'm wrong no maybe FFA ffi

00:23:43,580 --> 00:23:47,929
translation hooks are complete that

00:23:45,409 --> 00:23:51,440
allows the invocation of C library

00:23:47,929 --> 00:23:53,090
function called we have test suite

00:23:51,440 --> 00:23:56,210
parity between the jet mode and

00:23:53,090 --> 00:23:58,190
interpreted mode we do have currently a

00:23:56,210 --> 00:24:02,120
number of failures in the test suite

00:23:58,190 --> 00:24:03,679
compared to x86 64 but that number is

00:24:02,120 --> 00:24:06,320
actually smaller than this as far as I

00:24:03,679 --> 00:24:10,130
understand and we will clean those up as

00:24:06,320 --> 00:24:14,389
we get ready to upstream the port we are

00:24:10,130 --> 00:24:17,360
working on the CI mechanism I'm not sure

00:24:14,389 --> 00:24:21,380
if we're going to use github CI i forgot

00:24:17,360 --> 00:24:23,630
to follow through on that one and we are

00:24:21,380 --> 00:24:27,169
starting to look at in jenks and jigs

00:24:23,630 --> 00:24:29,000
support so as far as the schedule is

00:24:27,169 --> 00:24:31,130
concerned we did hit our original

00:24:29,000 --> 00:24:32,779
estimates right on so I would like to

00:24:31,130 --> 00:24:37,299
congratulate the team on that they did a

00:24:32,779 --> 00:24:40,250
fantastic job we are hoping to enable

00:24:37,299 --> 00:24:42,919
complete the enablement of our test

00:24:40,250 --> 00:24:45,350
suite enablement by September I have

00:24:42,919 --> 00:24:46,190
this slide wrong and integration and CI

00:24:45,350 --> 00:24:50,450
by

00:24:46,190 --> 00:24:55,570
by mid-october and we need to verify

00:24:50,450 --> 00:24:59,360
that LG G c64 is at parity with x86 64

00:24:55,570 --> 00:25:01,370
so that's the the full status so as far

00:24:59,360 --> 00:25:04,490
as we're concerned we are functionally

00:25:01,370 --> 00:25:07,250
complete we are just as of like an hour

00:25:04,490 --> 00:25:09,879
ago I did discuss the up streaming

00:25:07,250 --> 00:25:12,649
effort with some of our partners and

00:25:09,879 --> 00:25:15,230
what's how it's going to proceed is that

00:25:12,649 --> 00:25:17,840
we will do a short clean up on the

00:25:15,230 --> 00:25:20,870
existing code base to unify all of the

00:25:17,840 --> 00:25:25,039
style do some minor optimizations and

00:25:20,870 --> 00:25:28,549
then our partner are co-collaborators

00:25:25,039 --> 00:25:29,929
RTR k will will start the up streaming

00:25:28,549 --> 00:25:32,600
effort and that's projected to take a

00:25:29,929 --> 00:25:34,370
few weeks they're doing the up streaming

00:25:32,600 --> 00:25:35,990
effort because they upstream the mips

00:25:34,370 --> 00:25:39,950
port so they have a history with the

00:25:35,990 --> 00:25:42,440
maintainer so we expect that over the

00:25:39,950 --> 00:25:46,970
next three months we will polish and

00:25:42,440 --> 00:25:48,529
improve the polish and improve the port

00:25:46,970 --> 00:25:51,440
and hopefully within a few months we can

00:25:48,529 --> 00:25:52,909
we can get something upstream there are

00:25:51,440 --> 00:25:55,600
some concerns with up streaming and that

00:25:52,909 --> 00:25:57,950
the community primary maintainer is

00:25:55,600 --> 00:26:00,379
interested in retiring from the project

00:25:57,950 --> 00:26:04,370
so that could delay some up streaming

00:26:00,379 --> 00:26:10,190
all right so Jing Zhu has done a really

00:26:04,370 --> 00:26:11,960
interesting CI CI mechanism for us that

00:26:10,190 --> 00:26:16,100
I wanted to just sort of give you an

00:26:11,960 --> 00:26:17,509
idea of so here's here's a static slide

00:26:16,100 --> 00:26:21,799
on it I but I'll actually take you to

00:26:17,509 --> 00:26:26,059
the actual tool itself as well so this

00:26:21,799 --> 00:26:28,370
allows real-time testing of lua get code

00:26:26,059 --> 00:26:32,590
and can do real-time performance

00:26:28,370 --> 00:26:35,840
comparisons of let's see what are the

00:26:32,590 --> 00:26:40,759
eluate self so interpreted mode Lua jet

00:26:35,840 --> 00:26:47,419
2.1 and then in interpreted mode and

00:26:40,759 --> 00:26:51,389
then arm 64 jit performance as well all

00:26:47,419 --> 00:26:55,559
right so I'm going to switch to

00:26:51,389 --> 00:26:59,940
the actual web page so here we have the

00:26:55,559 --> 00:27:04,709
web page itself so this is just the

00:26:59,940 --> 00:27:07,079
default view let's say I can run this

00:27:04,709 --> 00:27:11,459
application I'm going to do it from here

00:27:07,079 --> 00:27:14,279
and we get just some runtime information

00:27:11,459 --> 00:27:15,899
on the application itself here we

00:27:14,279 --> 00:27:24,979
haven't actually benched anything in

00:27:15,899 --> 00:27:30,029
this case I can show whoops I'll print

00:27:24,979 --> 00:27:35,249
world bear with me as I don't really

00:27:30,029 --> 00:27:37,379
know Lua so likewise we we have

00:27:35,249 --> 00:27:40,649
information here showing that it's

00:27:37,379 --> 00:27:46,649
working in jet mode blue interpreted

00:27:40,649 --> 00:27:50,789
mode and arm 64 interpreted mode and if

00:27:46,649 --> 00:27:53,249
i want to say i want to get benchmarking

00:27:50,789 --> 00:27:56,429
information i would say bench world and

00:27:53,249 --> 00:27:58,820
i can run that and that shows us that

00:27:56,429 --> 00:28:01,979
there's no deltas because obviously the

00:27:58,820 --> 00:28:06,059
the time frames is executing too quickly

00:28:01,979 --> 00:28:10,019
but we have the availability of number

00:28:06,059 --> 00:28:12,629
of pre-canned tests here that the jêng

00:28:10,019 --> 00:28:14,219
is provided with provided us and these

00:28:12,629 --> 00:28:17,249
are marked as bench so these will show

00:28:14,219 --> 00:28:21,450
up with performance numbers so here for

00:28:17,249 --> 00:28:23,339
instance this binary tree benchmark we

00:28:21,450 --> 00:28:26,249
can see some performance improvements

00:28:23,339 --> 00:28:31,009
here in jet mode will run through a few

00:28:26,249 --> 00:28:31,009
more stack them up

00:28:31,820 --> 00:28:36,350
and you'll see as you see here they

00:28:34,400 --> 00:28:40,250
start to stack up so we can get sort of

00:28:36,350 --> 00:28:42,920
a lie running total and not total excuse

00:28:40,250 --> 00:28:49,520
me just a trend across different

00:28:42,920 --> 00:28:51,110
benchmarks so this is a tool that will

00:28:49,520 --> 00:28:53,330
use as well when we start our

00:28:51,110 --> 00:28:56,390
optimization efforts so we can start to

00:28:53,330 --> 00:29:01,490
see where and how each of the

00:28:56,390 --> 00:29:06,500
modifications we make to the 222 luige

00:29:01,490 --> 00:29:08,900
it for armed 64 will will will be

00:29:06,500 --> 00:29:11,060
realized and performance benefit all

00:29:08,900 --> 00:29:13,130
right so jeng wasn't anything else that

00:29:11,060 --> 00:29:16,480
you wanted to cover with regard to the

00:29:13,130 --> 00:29:16,480
demo we do still have some time

00:29:22,260 --> 00:29:27,160
actually I what I want to say that this

00:29:25,000 --> 00:29:28,900
demo is quite interesting that we are

00:29:27,160 --> 00:29:31,000
not only demonstrated the logit

00:29:28,900 --> 00:29:34,750
performance it also demonstrate a lot of

00:29:31,000 --> 00:29:38,680
stuffs in the enterprise area of AR 60

00:29:34,750 --> 00:29:41,470
for this demo this demos runs with our

00:29:38,680 --> 00:29:44,860
web server which which are hosted are

00:29:41,470 --> 00:29:48,430
also hosts our AR 64 obviously and also

00:29:44,860 --> 00:29:53,680
we have a PHP server for perhaps on that

00:29:48,430 --> 00:29:57,550
it's all its runs also all of I'm 64 and

00:29:53,680 --> 00:30:00,670
I also this this web is host on the

00:29:57,550 --> 00:30:03,520
narrow cloud which is which is a virtual

00:30:00,670 --> 00:30:06,910
machine allocated for for the

00:30:03,520 --> 00:30:10,710
demonstration and also we put all the

00:30:06,910 --> 00:30:13,630
other web stuffs inside a container so

00:30:10,710 --> 00:30:16,300
this demonstration shows that most of

00:30:13,630 --> 00:30:19,420
the pieces of I think the arm enterprise

00:30:16,300 --> 00:30:22,570
works at least for this demo yeah thank

00:30:19,420 --> 00:30:24,400
you all right were there any questions

00:30:22,570 --> 00:30:28,350
on the status or where we're going next

00:30:24,400 --> 00:30:28,350
or what is what has been completed

00:30:34,700 --> 00:30:41,220
Charles Charles's answer was no not

00:30:39,149 --> 00:30:43,580
really do you care to elaborate as to

00:30:41,220 --> 00:30:43,580
why

00:30:55,380 --> 00:30:59,820
so the answer is that there were

00:30:56,880 --> 00:31:03,870
significant changes in Lua jet 2.1 that

00:30:59,820 --> 00:31:06,060
are needed for the arm 64 jetport and I

00:31:03,870 --> 00:31:09,180
believe the current releases are based

00:31:06,060 --> 00:31:12,180
on luge at two point oh so it would

00:31:09,180 --> 00:31:15,780
require back porting everything into 2.1

00:31:12,180 --> 00:31:18,270
from 2.1 into two point oh I know some

00:31:15,780 --> 00:31:21,300
of the more experimental distributions

00:31:18,270 --> 00:31:23,280
are already starting to pick up 2.1 even

00:31:21,300 --> 00:31:26,160
though it's only in beta and I believe

00:31:23,280 --> 00:31:28,560
this is related to the unknown nature

00:31:26,160 --> 00:31:34,340
nature of the future maintenance of

00:31:28,560 --> 00:31:37,460
legit other other questions yes Larry

00:31:34,340 --> 00:31:37,460
thank you

00:31:48,830 --> 00:31:56,390
I think that's one of our next steps

00:31:51,399 --> 00:31:57,919
Charles any any comments yeah we haven't

00:31:56,390 --> 00:32:00,080
done any measurements as we literally

00:31:57,919 --> 00:32:02,929
just declared feature completion today

00:32:00,080 --> 00:32:05,809
so we should have that information soon

00:32:02,929 --> 00:32:07,279
we are sinking the team will sink in the

00:32:05,809 --> 00:32:09,289
next month and I should be able to get

00:32:07,279 --> 00:32:11,480
that information to you Larry at that

00:32:09,289 --> 00:32:14,029
point we'll have a better idea of what

00:32:11,480 --> 00:32:18,289
our optimization targets are and where

00:32:14,029 --> 00:32:23,419
the up streaming effort is let's see

00:32:18,289 --> 00:32:24,919
further questions nope all right well

00:32:23,419 --> 00:32:27,230
thank you for attending the presentation

00:32:24,919 --> 00:32:30,409
I don't know if these slides are

00:32:27,230 --> 00:32:31,850
available in the session the session

00:32:30,409 --> 00:32:41,950
website but I'll make sure they are oh

00:32:31,850 --> 00:32:41,950
yes yeah yeah let me find that for you

00:32:51,100 --> 00:32:55,350
yes

00:32:53,040 --> 00:33:07,920
oh yes he just wanted he wanted the

00:32:55,350 --> 00:33:10,440
information on the github location yeah

00:33:07,920 --> 00:33:13,500
okay i will merge them i will have them

00:33:10,440 --> 00:33:16,740
put up it's because the only ones that

00:33:13,500 --> 00:33:27,300
got up online were the zen slides that

00:33:16,740 --> 00:33:28,560
was wiki on the little robot okay well

00:33:27,300 --> 00:33:36,090
that's all i had so thank you for

00:33:28,560 --> 00:33:38,310
attending the presentation and this one

00:33:36,090 --> 00:33:40,770
last thing the slides did do have some

00:33:38,310 --> 00:33:43,140
resources here at the end and there is

00:33:40,770 --> 00:33:45,090
an appendix which describes legit trace

00:33:43,140 --> 00:33:47,220
compilation and what a minimum viable

00:33:45,090 --> 00:33:50,670
program actually looks like in lua to

00:33:47,220 --> 00:33:52,180
exercise the JIT all right thank you

00:33:50,670 --> 00:33:55,279
very much

00:33:52,180 --> 00:33:55,279
[Music]

00:33:58,870 --> 00:34:03,490
you

00:34:00,080 --> 00:34:03,490

YouTube URL: https://www.youtube.com/watch?v=ZTtCHF4FoqM


