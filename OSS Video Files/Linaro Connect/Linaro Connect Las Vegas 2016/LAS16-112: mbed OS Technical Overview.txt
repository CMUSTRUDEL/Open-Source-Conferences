Title: LAS16-112: mbed OS Technical Overview
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-112: mbed OS Technical Overview
Speakers: Sam Grove
Date: September 26, 2016

★ Session Description ★
ARM mbed OS is an open source embedded operating system designed
specifically for the “things” in the Internet of Things. It includes all the features you need to develop a connected product based on very small memory footprint ARM Cortex-M microcontrollers, including security,connectivity, an RTOS, and drivers for sensors and I/O devices. You can start developing with mbed OS 5.1.0 today using a choice of 40 different development boards from 11 different providers and a wide choice of toolchains including a complete command line build management and configuration tool mbed CLI, industry standard desktop IDEs or ARM’s free online IDE.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-112
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-112/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:21,980 --> 00:00:30,570
so I'll spend the next 30 minutes going

00:00:27,359 --> 00:00:34,530
over what my OS is as far as a technical

00:00:30,570 --> 00:00:38,129
overview and some of the directions that

00:00:34,530 --> 00:00:41,160
it takes based on the way we view IOT

00:00:38,129 --> 00:00:44,879
and some of the importances around

00:00:41,160 --> 00:00:49,410
security and building a very broad and

00:00:44,879 --> 00:00:51,870
rich ecosystem of partners so again

00:00:49,410 --> 00:01:00,570
thank you for having me here can I just

00:00:51,870 --> 00:01:08,939
get a quick raise of hands and how about

00:01:00,570 --> 00:01:10,830
who has actually used cool okay so I'm

00:01:08,939 --> 00:01:13,619
not gonna give those of you who haven't

00:01:10,830 --> 00:01:17,759
used it yet much detail as to what it

00:01:13,619 --> 00:01:20,040
takes overview the product but we will

00:01:17,759 --> 00:01:26,790
have happening this week where you can

00:01:20,040 --> 00:01:29,850
get access and touch it so if we start

00:01:26,790 --> 00:01:32,549
by looking at the challenges for

00:01:29,850 --> 00:01:34,920
building IOT devices or in general in

00:01:32,549 --> 00:01:36,990
the IOT landscape at the moment

00:01:34,920 --> 00:01:42,049
on the very left hand side we have a

00:01:36,990 --> 00:01:44,130
very diverse very diverse landscape of

00:01:42,049 --> 00:01:46,829
devices that want to connect to the

00:01:44,130 --> 00:01:49,320
cloud or capable of being connected to

00:01:46,829 --> 00:01:51,229
the cloud in one way or another and the

00:01:49,320 --> 00:02:00,990
applications that sit on top of them

00:01:51,229 --> 00:02:03,060
also vary quite widely same thing on the

00:02:00,990 --> 00:02:05,100
right hand side we see what it looks

00:02:03,060 --> 00:02:08,009
like from a cloud applications

00:02:05,100 --> 00:02:09,270
perspective and to deliver an end-to-end

00:02:08,009 --> 00:02:11,580
solution

00:02:09,270 --> 00:02:14,310
the device to worry about and you also

00:02:11,580 --> 00:02:15,960
have the cloud services or the value-add

00:02:14,310 --> 00:02:17,870
that you provide with your products or

00:02:15,960 --> 00:02:19,740
services and that may be something like

00:02:17,870 --> 00:02:22,440
understanding the data that comes off of

00:02:19,740 --> 00:02:25,380
a device or it may have something to do

00:02:22,440 --> 00:02:27,870
with the longevity or lifecycle of that

00:02:25,380 --> 00:02:30,780
device as its deployed in the field or

00:02:27,870 --> 00:02:32,160
in the environment and so how all these

00:02:30,780 --> 00:02:34,890
pieces talk together there's a few

00:02:32,160 --> 00:02:36,570
things that we do know we know that the

00:02:34,890 --> 00:02:38,160
device is in the web service or in the

00:02:36,570 --> 00:02:40,080
cloud service side they're gonna want to

00:02:38,160 --> 00:02:42,540
use restful interfaces and REST API s

00:02:40,080 --> 00:02:45,210
and there's no shortage of vertically

00:02:42,540 --> 00:02:47,370
integrated solutions at this point that

00:02:45,210 --> 00:02:49,560
work together the challenge comes down

00:02:47,370 --> 00:02:51,570
to when you want to scale across

00:02:49,560 --> 00:02:56,280
multiple vertically integrated solutions

00:02:51,570 --> 00:03:00,170
to provide a system for that device or a

00:02:56,280 --> 00:03:02,400
set of services for that device and so

00:03:00,170 --> 00:03:04,560
what we've done at arm is we've built

00:03:02,400 --> 00:03:07,950
arm embed which is an IOT device

00:03:04,560 --> 00:03:09,240
platform and the important thing here is

00:03:07,950 --> 00:03:12,300
this is kind of just an introduction to

00:03:09,240 --> 00:03:14,940
the embed client software and then the

00:03:12,300 --> 00:03:18,420
embed client or embed device connector

00:03:14,940 --> 00:03:20,430
web service so the embed client software

00:03:18,420 --> 00:03:22,950
will run on any random number of devices

00:03:20,430 --> 00:03:27,060
any architecture any operating system

00:03:22,950 --> 00:03:29,130
and it connects to the device connector

00:03:27,060 --> 00:03:31,620
service which then takes these devices

00:03:29,130 --> 00:03:33,150
and gives them a restful api to all the

00:03:31,620 --> 00:03:35,160
other different type business or cloud

00:03:33,150 --> 00:03:37,290
applications that you would need to

00:03:35,160 --> 00:03:39,330
stitch together you know the best of all

00:03:37,290 --> 00:03:41,400
worlds you know whether it be something

00:03:39,330 --> 00:03:43,280
from Amazon or something from IBM and

00:03:41,400 --> 00:03:46,950
bits and pieces from each one of them

00:03:43,280 --> 00:03:48,960
and device connector does something very

00:03:46,950 --> 00:03:51,630
important which is it handles some of

00:03:48,960 --> 00:03:53,610
the complexity between these sleeping

00:03:51,630 --> 00:03:56,370
nodes or these nodes that may be online

00:03:53,610 --> 00:04:00,090
may be offline they don't necessarily

00:03:56,370 --> 00:04:02,940
have a defined lifetime or lifecycle

00:04:00,090 --> 00:04:04,530
they're not always available but given

00:04:02,940 --> 00:04:06,480
that they're deployed you need to know

00:04:04,530 --> 00:04:08,400
what would like to know what that state

00:04:06,480 --> 00:04:11,310
was the last time it was available to

00:04:08,400 --> 00:04:13,830
send you some information so an big

00:04:11,310 --> 00:04:16,080
client software makes that possible and

00:04:13,830 --> 00:04:17,970
device connector is a service based on

00:04:16,080 --> 00:04:19,019
lots of different standards I guess one

00:04:17,970 --> 00:04:21,870
important thing

00:04:19,019 --> 00:04:23,729
mentioned is that to make this happen it

00:04:21,870 --> 00:04:25,669
needs to be a very standard and secure

00:04:23,729 --> 00:04:31,830
based approach between the device and

00:04:25,669 --> 00:04:34,159
the connector service so when we look at

00:04:31,830 --> 00:04:36,389
the IOT device platform and ecosystem

00:04:34,159 --> 00:04:38,159
there's really four pieces that we're

00:04:36,389 --> 00:04:40,560
working on one is the device connector

00:04:38,159 --> 00:04:42,870
and again I'll have one more kind of

00:04:40,560 --> 00:04:44,370
brief overview of what that is the embed

00:04:42,870 --> 00:04:46,830
client and so that allows these things

00:04:44,370 --> 00:04:48,690
to connect and then we've built in OS

00:04:46,830 --> 00:04:52,380
which is an operating system for

00:04:48,690 --> 00:04:54,270
cortex-m devices specifically and what

00:04:52,380 --> 00:04:57,479
this does is it provides a complete

00:04:54,270 --> 00:05:03,930
solution for device security enabling

00:04:57,479 --> 00:05:06,569
the channel security and from the cloud

00:05:03,930 --> 00:05:08,990
is trusted all the way through and then

00:05:06,569 --> 00:05:13,229
we have an ecosystem and that ecosystem

00:05:08,990 --> 00:05:16,199
is built around product makers silicon

00:05:13,229 --> 00:05:19,440
manufacturers cloud service providers

00:05:16,199 --> 00:05:20,849
middleware stack providers it takes a

00:05:19,440 --> 00:05:23,460
lot of these different pieces to provide

00:05:20,849 --> 00:05:31,560
value where these devices or where these

00:05:23,460 --> 00:05:34,169
systems are so complex so just very

00:05:31,560 --> 00:05:37,050
quickly looking at the security as it

00:05:34,169 --> 00:05:40,830
relates to the devices and the cloud

00:05:37,050 --> 00:05:43,620
services at the very very bottom of this

00:05:40,830 --> 00:05:45,690
problem you have the hardware device and

00:05:43,620 --> 00:05:48,630
the hardware device is going to need to

00:05:45,690 --> 00:05:54,120
provide a few resources to you in order

00:05:48,630 --> 00:05:56,430
to build out a secure device a way to

00:05:54,120 --> 00:05:58,199
have you know keys or storage and those

00:05:56,430 --> 00:06:01,889
things will be protected in one way or

00:05:58,199 --> 00:06:03,180
another by protected or secured file

00:06:01,889 --> 00:06:09,900
systems or trusted execution

00:06:03,180 --> 00:06:11,969
environments which enables that but the

00:06:09,900 --> 00:06:13,710
point is the the connectivity client

00:06:11,969 --> 00:06:15,659
which is on top of that but then creates

00:06:13,710 --> 00:06:19,080
a trusted and secure communication

00:06:15,659 --> 00:06:24,120
channel with cloud services and that's

00:06:19,080 --> 00:06:27,680
over protocols are lightweight they have

00:06:24,120 --> 00:06:27,680
low data rates in some cases

00:06:32,540 --> 00:06:41,120
psycho security device management

00:06:35,440 --> 00:06:43,460
management as well so so that's how this

00:06:41,120 --> 00:06:47,480
whole system fits together they're all

00:06:43,460 --> 00:06:48,860
developed in or they're all developed

00:06:47,480 --> 00:06:50,690
irrespective of each other so you can

00:06:48,860 --> 00:06:53,840
use bits and pieces and they're all

00:06:50,690 --> 00:06:56,080
based on standards with the security

00:06:53,840 --> 00:06:59,360
being the most important aspect of them

00:06:56,080 --> 00:07:01,310
so that's enough about the big picture

00:06:59,360 --> 00:07:01,640
of IOT and the pieces that we're

00:07:01,310 --> 00:07:03,410
building

00:07:01,640 --> 00:07:06,740
I can go spend a bit more time now we'll

00:07:03,410 --> 00:07:11,260
dig into em but OS and some of the tools

00:07:06,740 --> 00:07:11,260
that were using to build and deploy this

00:07:13,660 --> 00:07:20,360
so when we looked at building a platform

00:07:17,630 --> 00:07:24,020
OS there were a couple requirements that

00:07:20,360 --> 00:07:25,460
were mandatory and the first was the

00:07:24,020 --> 00:07:28,550
software and the tooling that we're

00:07:25,460 --> 00:07:30,830
building needs to accelerate the

00:07:28,550 --> 00:07:31,690
development of IOT devices and

00:07:30,830 --> 00:07:34,060
accelerating the development

00:07:31,690 --> 00:07:36,380
accelerating the development means that

00:07:34,060 --> 00:07:40,940
all the bits of software that you would

00:07:36,380 --> 00:07:44,930
need to actually integrated together and

00:07:40,940 --> 00:07:46,190
delivered as one tested unit in that we

00:07:44,930 --> 00:07:49,820
should also be challenging some of the

00:07:46,190 --> 00:07:53,180
methodologies behind how people build

00:07:49,820 --> 00:07:56,150
software or share software or grab

00:07:53,180 --> 00:07:58,040
software that is compatible given a

00:07:56,150 --> 00:08:01,670
contract of the platform operating

00:07:58,040 --> 00:08:04,250
system that they're running on and that

00:08:01,670 --> 00:08:07,760
we need to be able to have scaleable

00:08:04,250 --> 00:08:10,280
api's that enable different networking

00:08:07,760 --> 00:08:12,800
choices or different product development

00:08:10,280 --> 00:08:15,080
choices to all reuse the same software

00:08:12,800 --> 00:08:18,410
so regardless if it's a Wi-Fi product or

00:08:15,080 --> 00:08:19,580
a ble product or an Ethernet product the

00:08:18,410 --> 00:08:20,870
point is that the framework that you're

00:08:19,580 --> 00:08:23,300
building on should have those pieces

00:08:20,870 --> 00:08:25,640
integrated as a requirement in order to

00:08:23,300 --> 00:08:29,020
build your products and ship them into

00:08:25,640 --> 00:08:31,580
different markets or have different

00:08:29,020 --> 00:08:34,010
different features or functionalities

00:08:31,580 --> 00:08:35,870
these most likely aren't like computers

00:08:34,010 --> 00:08:39,880
where all these stacks and all this

00:08:35,870 --> 00:08:39,880
networking is built into one chip

00:08:41,800 --> 00:08:45,830
multi-system solutions where you may

00:08:44,270 --> 00:08:47,870
ship one with a Bluetooth interface or

00:08:45,830 --> 00:08:50,570
one with a Wi-Fi interface so a

00:08:47,870 --> 00:08:52,220
consistent environments important and

00:08:50,570 --> 00:08:54,620
then the second piece is accelerating

00:08:52,220 --> 00:08:56,060
the deployment of these devices so it's

00:08:54,620 --> 00:08:59,780
one thing if you can build your product

00:08:56,060 --> 00:09:01,640
out and you can then go but what do you

00:08:59,780 --> 00:09:03,260
do with it once it's up in the field how

00:09:01,640 --> 00:09:06,140
do you get it updates how do you

00:09:03,260 --> 00:09:08,780
understand how its behaving is it you

00:09:06,140 --> 00:09:10,430
know going to become a burden for your

00:09:08,780 --> 00:09:12,800
deployment in the first place if you

00:09:10,430 --> 00:09:13,910
ship million units they all come back

00:09:12,800 --> 00:09:14,990
for updates

00:09:13,910 --> 00:09:16,850
you probably don't have a very

00:09:14,990 --> 00:09:21,380
successful business especially in

00:09:16,850 --> 00:09:23,840
low-margin consumer type businesses so

00:09:21,380 --> 00:09:27,110
there needs to be a manageability aspect

00:09:23,840 --> 00:09:29,600
where as you're building these devices

00:09:27,110 --> 00:09:31,850
with connections you also have the

00:09:29,600 --> 00:09:33,560
ability to remotely query or understand

00:09:31,850 --> 00:09:36,770
the state of health of those devices or

00:09:33,560 --> 00:09:40,100
get it more information and then thirdly

00:09:36,770 --> 00:09:41,870
there needs to be an ecosystem so making

00:09:40,100 --> 00:09:43,820
sure the software is available in a you

00:09:41,870 --> 00:09:46,280
know freely open-source way such that it

00:09:43,820 --> 00:09:48,080
can easily be adopted it needs to just

00:09:46,280 --> 00:09:48,860
be in people's environment that they're

00:09:48,080 --> 00:09:53,420
comfortable with

00:09:48,860 --> 00:09:55,700
so delivering into somebody's existing

00:09:53,420 --> 00:09:57,620
workflow not making them learn new

00:09:55,700 --> 00:09:59,690
things in order to adopt what you're

00:09:57,620 --> 00:10:02,360
doing and it needs to be something that

00:09:59,690 --> 00:10:04,610
people from the device side the software

00:10:02,360 --> 00:10:07,700
middleware and also the cloud side all

00:10:04,610 --> 00:10:10,280
have an agreement or are bought into the

00:10:07,700 --> 00:10:17,270
standards that we're using to to build

00:10:10,280 --> 00:10:19,250
this so with that the majority of embed

00:10:17,270 --> 00:10:22,700
is licensed under an Apache 2.0 license

00:10:19,250 --> 00:10:25,940
now there's a couple components that are

00:10:22,700 --> 00:10:27,770
released in binary form and a really

00:10:25,940 --> 00:10:29,960
good thing by producing a permissive

00:10:27,770 --> 00:10:32,540
binary license as well so there there is

00:10:29,960 --> 00:10:33,710
IP that is going to be confidential or

00:10:32,540 --> 00:10:36,740
going to be restricted to particular

00:10:33,710 --> 00:10:39,470
devices and the delivery of that in

00:10:36,740 --> 00:10:41,030
these type of large software ecosystems

00:10:39,470 --> 00:10:45,160
and frameworks is typically challenging

00:10:41,030 --> 00:10:45,160
due to click-through license agreements

00:10:49,690 --> 00:10:53,350
industry meaning

00:10:53,620 --> 00:10:58,120
deliver them within these big software

00:10:55,540 --> 00:11:02,710
stacks in a way where the end developers

00:10:58,120 --> 00:11:04,960
have similar rights to use it in the way

00:11:02,710 --> 00:11:08,200
it was compiled to be used such as

00:11:04,960 --> 00:11:11,260
Apache and then the other piece of it is

00:11:08,200 --> 00:11:13,600
you know given that we're delivering

00:11:11,260 --> 00:11:16,060
this software on behalf of the partner

00:11:13,600 --> 00:11:18,130
ecosystem making sure that the

00:11:16,060 --> 00:11:20,110
contributions to the software come in in

00:11:18,130 --> 00:11:22,270
a way which also permits them to be

00:11:20,110 --> 00:11:24,340
reused so there's two different types of

00:11:22,270 --> 00:11:26,470
contributor licensure payments one of

00:11:24,340 --> 00:11:28,540
them for partners of the ecosystem who

00:11:26,470 --> 00:11:30,580
say you probably have more access or

00:11:28,540 --> 00:11:30,940
roadmap information than the general

00:11:30,580 --> 00:11:32,800
public

00:11:30,940 --> 00:11:40,210
so you have a separate license under

00:11:32,800 --> 00:11:42,670
which you can come in submit patches or

00:11:40,210 --> 00:11:44,860
add new features or request changes as

00:11:42,670 --> 00:11:47,170
well and all this work is done via

00:11:44,860 --> 00:11:49,830
github and submitted via pull request

00:11:47,170 --> 00:11:52,510
mechanism and then generally having

00:11:49,830 --> 00:11:58,480
strong API guidelines and coding styles

00:11:52,510 --> 00:12:01,180
to maintain the the separation of

00:11:58,480 --> 00:12:03,100
responsibility lies between the main OS

00:12:01,180 --> 00:12:04,720
that's developed the devices that are

00:12:03,100 --> 00:12:06,730
implementing different drivers to

00:12:04,720 --> 00:12:10,480
perform functionalities or even

00:12:06,730 --> 00:12:14,190
third-party components and so the

00:12:10,480 --> 00:12:17,020
governor of this project is right now

00:12:14,190 --> 00:12:19,180
we're leave maintainer and the silicon

00:12:17,020 --> 00:12:21,190
partners who have support for their

00:12:19,180 --> 00:12:28,390
devices are the maintainer zuv their

00:12:21,190 --> 00:12:31,180
devices that are delivered and there's

00:12:28,390 --> 00:12:32,380
also some ecosystem partners who support

00:12:31,180 --> 00:12:34,330
their components which come in and

00:12:32,380 --> 00:12:38,520
that's in the form of secured file

00:12:34,330 --> 00:12:38,520
systems or networking stacks

00:12:45,850 --> 00:12:52,010
this is what my OS looks like so at the

00:12:49,790 --> 00:12:54,650
at the top of it we have an artist

00:12:52,010 --> 00:12:58,370
Colonel this is built on symphysis our

00:12:54,650 --> 00:13:00,620
boss will talk about and then we have a

00:12:58,370 --> 00:13:02,420
portable set of drivers for many

00:13:00,620 --> 00:13:10,640
different aspects of the code so

00:13:02,420 --> 00:13:11,960
resources that are on ships and then the

00:13:10,640 --> 00:13:13,370
security is also one of those things

00:13:11,960 --> 00:13:16,000
that needs to be well integrated and

00:13:13,370 --> 00:13:18,080
whether or not your device is capable

00:13:16,000 --> 00:13:20,300
optimizing or performing hardware

00:13:18,080 --> 00:13:21,710
acceleration on that security regardless

00:13:20,300 --> 00:13:23,570
there should be software only solutions

00:13:21,710 --> 00:13:27,830
available given how important security

00:13:23,570 --> 00:13:30,050
is to hi ot devices and the same thing

00:13:27,830 --> 00:13:34,940
goes for connectivity so there's a few

00:13:30,050 --> 00:13:40,370
key pillars of technology Bluetooth IP

00:13:34,940 --> 00:13:42,350
based networking and then you know these

00:13:40,370 --> 00:13:44,510
these clients these clients allow the

00:13:42,350 --> 00:13:47,950
connection between these devices and

00:13:44,510 --> 00:13:47,950
these cloud services which enable you to

00:13:48,010 --> 00:13:53,060
provide updates or transfer ownership of

00:13:51,590 --> 00:13:54,950
the devices so those things are very

00:13:53,060 --> 00:13:57,020
important as well I mean making sure

00:13:54,950 --> 00:13:59,060
that they're consolidating on networking

00:13:57,020 --> 00:14:04,610
stacks and consolidating on security

00:13:59,060 --> 00:14:08,320
stacks otherwise what you have is as far

00:14:04,610 --> 00:14:08,320
as what actually takes resources

00:14:11,290 --> 00:14:22,550
possible and all these things are are

00:14:15,010 --> 00:14:25,130
supported by the partner ecosystem so

00:14:22,550 --> 00:14:27,830
looking at the main pieces from a

00:14:25,130 --> 00:14:29,300
technical perspective we have Humberto s

00:14:27,830 --> 00:14:33,350
as a core and that's what we'll talk

00:14:29,300 --> 00:14:36,650
about the artisan the main portability

00:14:33,350 --> 00:14:38,060
and then we have connectivity stacks and

00:14:36,650 --> 00:14:40,940
that comes in many different forms some

00:14:38,060 --> 00:14:42,470
are IP based and some are not security

00:14:40,940 --> 00:14:44,150
which is very important it's delivered

00:14:42,470 --> 00:14:45,770
in two different ways one is device side

00:14:44,150 --> 00:14:49,480
security and the other is the channel

00:14:45,770 --> 00:14:49,480
security and

00:14:55,980 --> 00:15:04,839
so as of embed OS 5 the core of the

00:15:01,720 --> 00:15:07,300
software stack was built on a kernel

00:15:04,839 --> 00:15:08,920
hunter toss kernel and it's built on

00:15:07,300 --> 00:15:11,200
symphysis our toss those of you familiar

00:15:08,920 --> 00:15:12,880
or not with sims's that's the cortex

00:15:11,200 --> 00:15:25,029
microcontroller software interface

00:15:12,880 --> 00:15:26,470
standard and there's a called r-tx it's

00:15:25,029 --> 00:15:31,570
a very well established and widely used

00:15:26,470 --> 00:15:34,750
our toss kernel been around since early

00:15:31,570 --> 00:15:37,540
2000s and it's very very small and it's

00:15:34,750 --> 00:15:40,150
it's optimized for very small and

00:15:37,540 --> 00:15:41,980
constrained devices giving that's not

00:15:40,150 --> 00:15:45,820
necessarily the reality when you look at

00:15:41,980 --> 00:15:48,670
the needs of an IOT device but it's a

00:15:45,820 --> 00:15:49,779
good starting point and the other piece

00:15:48,670 --> 00:15:52,270
to talk about is the peripheral drivers

00:15:49,779 --> 00:15:55,630
and api is they remain consistent across

00:15:52,270 --> 00:16:01,870
the different devices so as you change

00:15:55,630 --> 00:16:04,060
out the different rewriting your drivers

00:16:01,870 --> 00:16:05,580
for the sensors for the you know the

00:16:04,060 --> 00:16:08,770
middleware stacks

00:16:05,580 --> 00:16:10,720
audio processing anything like that that

00:16:08,770 --> 00:16:12,820
shouldn't have to change so that all

00:16:10,720 --> 00:16:16,240
remains the same and then you provide a

00:16:12,820 --> 00:16:20,290
consistent feel for the connectivity

00:16:16,240 --> 00:16:24,070
from one transport to the next and so

00:16:20,290 --> 00:16:26,020
the frameworks written in C and C++ C++

00:16:24,070 --> 00:16:28,930
specifically focused for the runtime

00:16:26,020 --> 00:16:30,610
environment of applications and it

00:16:28,930 --> 00:16:32,980
handles all the startup and environment

00:16:30,610 --> 00:16:35,380
initialization bootstrapping the chips

00:16:32,980 --> 00:16:37,930
memory maps and cross toolchain support

00:16:35,380 --> 00:16:39,520
and getting you into your main statement

00:16:37,930 --> 00:16:43,480
and your main statement is the first

00:16:39,520 --> 00:16:45,370
thread that the system is executing and

00:16:43,480 --> 00:16:48,250
the important thing to about delivering

00:16:45,370 --> 00:16:50,440
software like this is the abstract API

00:16:48,250 --> 00:16:52,870
is that are produced don't always make a

00:16:50,440 --> 00:16:54,220
very logical connection between the

00:16:52,870 --> 00:16:56,760
resource that's on the chip and the

00:16:54,220 --> 00:16:58,780
software rests with representation of it

00:16:56,760 --> 00:17:02,230
in software

00:16:58,780 --> 00:17:03,730
so multiplex spy interfaces or you start

00:17:02,230 --> 00:17:08,230
to run into challenges with thread

00:17:03,730 --> 00:17:09,820
safety and resource ownership so one of

00:17:08,230 --> 00:17:11,530
the big things with introducing in our

00:17:09,820 --> 00:17:13,480
toss and that was very important is

00:17:11,530 --> 00:17:15,130
thread safety in the peripheral drivers

00:17:13,480 --> 00:17:18,220
and that's a contract that's made

00:17:15,130 --> 00:17:21,900
between the c++ interfaces that's the

00:17:18,220 --> 00:17:21,900
application developers right against

00:17:23,100 --> 00:17:29,920
normal primitives is an eventing

00:17:25,840 --> 00:17:31,540
mechanism and yeah what that means is

00:17:29,920 --> 00:17:33,610
again the application component

00:17:31,540 --> 00:17:36,430
libraries can remain unchanged and be

00:17:33,610 --> 00:17:38,890
rebuilt just by changing the targets

00:17:36,430 --> 00:17:41,260
definition which are the details about

00:17:38,890 --> 00:17:42,730
the chip whether it's the CPU type or

00:17:41,260 --> 00:17:46,270
the amount of memory and how it's

00:17:42,730 --> 00:17:49,660
segmented or put together on the device

00:17:46,270 --> 00:17:56,440
so recompilation you'll do a system that

00:17:49,660 --> 00:18:02,460
is so one of the more important

00:17:56,440 --> 00:18:13,750
connectivity options there is is ble and

00:18:02,460 --> 00:18:17,200
sabili right now is used 4.2 and 5.0

00:18:13,750 --> 00:18:18,340
surface it's it's only scratching the

00:18:17,200 --> 00:18:19,750
surface you look at the number of

00:18:18,340 --> 00:18:23,380
smartphones people have that are ble

00:18:19,750 --> 00:18:25,300
capable and you look at all these

00:18:23,380 --> 00:18:27,490
devices and you instantly have the

00:18:25,300 --> 00:18:40,680
attachment or a relationship between a

00:18:27,490 --> 00:18:40,680
device and something a person carries so

00:18:52,110 --> 00:19:03,370
and there's plenty of examples that are

00:18:55,330 --> 00:19:05,170
built up servers and clients and the

00:19:03,370 --> 00:19:07,090
support for this is ever expanding its

00:19:05,170 --> 00:19:09,490
it just now feels like it's starting to

00:19:07,090 --> 00:19:12,040
make that

00:19:09,490 --> 00:19:16,960
the inflection where it's going from a

00:19:12,040 --> 00:19:19,179
few to the many everything is is whether

00:19:16,960 --> 00:19:20,500
it's for the main interface that you

00:19:19,179 --> 00:19:22,179
have with the device or whether it's for

00:19:20,500 --> 00:19:26,370
these these side bands that'll be used

00:19:22,179 --> 00:19:26,370
in order to configure other networking

00:19:27,300 --> 00:19:31,929
and with that there's there's gonna be a

00:19:29,830 --> 00:19:34,900
demo on Friday so arm has a test ship

00:19:31,929 --> 00:19:36,400
called beetle and Friday at 12:00 time I

00:19:34,900 --> 00:19:40,390
hope have that time right we'll have a

00:19:36,400 --> 00:19:41,710
demo with this so you can actually see

00:19:40,390 --> 00:19:44,380
this in action and ask questions about

00:19:41,710 --> 00:19:47,950
the core do IP that arm has which is the

00:19:44,380 --> 00:19:53,650
radio and some other systems put

00:19:47,950 --> 00:20:00,429
together so another another key piece of

00:19:53,650 --> 00:20:02,559
connectivity and Wi-Fi again comes in

00:20:00,429 --> 00:20:05,610
many different shapes and sizes right

00:20:02,559 --> 00:20:09,190
now for these for these microcontrollers

00:20:05,610 --> 00:20:11,590
it's not always is not always the case

00:20:09,190 --> 00:20:14,440
that you'll find Mac level integrations

00:20:11,590 --> 00:20:17,320
in many cases you see Wi-Fi used as

00:20:14,440 --> 00:20:19,750
Network coprocessors attached to the

00:20:17,320 --> 00:20:23,440
larger application processors or other

00:20:19,750 --> 00:20:26,200
cortex-m devices and what we've been

00:20:23,440 --> 00:20:28,390
working on is updating Wi-Fi api's to

00:20:26,200 --> 00:20:30,340
support multiple different network

00:20:28,390 --> 00:20:32,559
interfaces simultaneously so whether

00:20:30,340 --> 00:20:34,240
that been an Ethernet and a Wi-Fi

00:20:32,559 --> 00:20:37,510
back-end so it could choose what

00:20:34,240 --> 00:20:39,820
environment can attach to or whether you

00:20:37,510 --> 00:20:43,090
attach just via basic socket and network

00:20:39,820 --> 00:20:45,940
interfaces again the programmers model

00:20:43,090 --> 00:20:47,860
is is very similar and moving from one

00:20:45,940 --> 00:20:50,279
to the other is transparent it's just a

00:20:47,860 --> 00:20:53,009
matter of how you describe

00:20:50,279 --> 00:20:56,159
that the drivers needed to boot and to

00:20:53,009 --> 00:20:57,929
use that and so supporting the Mac and

00:20:56,159 --> 00:20:59,909
network processor integration means that

00:20:57,929 --> 00:21:02,909
there's a wealth of devices that exist

00:20:59,909 --> 00:21:05,159
today with you know a certain set of

00:21:02,909 --> 00:21:09,149
capabilities given the memory

00:21:05,159 --> 00:21:10,799
constraints and the security required to

00:21:09,149 --> 00:21:12,599
build out these applications and so

00:21:10,799 --> 00:21:14,849
those can be put into network processor

00:21:12,599 --> 00:21:16,519
type modes well or you can run your

00:21:14,849 --> 00:21:19,469
whole application it doesn't much matter

00:21:16,519 --> 00:21:21,419
the the operating system and the drivers

00:21:19,469 --> 00:21:23,369
the contract between what developers use

00:21:21,419 --> 00:21:24,989
and what the the partners are

00:21:23,369 --> 00:21:27,299
contributors use is very clearly defined

00:21:24,989 --> 00:21:30,229
so you have many different places to

00:21:27,299 --> 00:21:36,509
plug in and deliver different solutions

00:21:30,229 --> 00:21:38,099
and again the importance of Sipan

00:21:36,509 --> 00:21:46,320
configuration again will be something

00:21:38,099 --> 00:21:50,489
quite big appear more and more in these

00:21:46,320 --> 00:21:52,879
different devices and we're about thread

00:21:50,489 --> 00:21:55,649
who's has anybody heard of thread a

00:21:52,879 --> 00:21:59,249
couple people okay so thread it's a

00:21:55,649 --> 00:22:02,719
necklace to Wi-Fi in that it builds on

00:21:59,249 --> 00:22:06,719
top of the 802 15 for physical layer and

00:22:02,719 --> 00:22:09,929
it provides IP routing a 6lowpan stack

00:22:06,719 --> 00:22:10,889
and UDP sockets meaning when you have

00:22:09,929 --> 00:22:12,570
these devices they're no longer

00:22:10,889 --> 00:22:15,359
point-to-point they can actually form in

00:22:12,570 --> 00:22:18,690
meshes and they dynamically form meshes

00:22:15,359 --> 00:22:20,580
in a secure way such that as nodes come

00:22:18,690 --> 00:22:23,399
on or offline whether they're powered or

00:22:20,580 --> 00:22:27,239
not the network is able to self-heal or

00:22:23,399 --> 00:22:31,229
able to reconfigure itself so that's one

00:22:27,239 --> 00:22:35,460
of the key connectivity elements a stack

00:22:31,229 --> 00:22:37,619
called nano stack support 6lowpan in

00:22:35,460 --> 00:22:39,509
many different configurations as well as

00:22:37,619 --> 00:22:41,279
thread so whether it's end nodes that

00:22:39,509 --> 00:22:43,379
are just capable of producing data

00:22:41,279 --> 00:22:44,999
whether it's the routing nodes which are

00:22:43,379 --> 00:22:47,399
the ones in the middle that can forward

00:22:44,999 --> 00:22:52,529
on information or the border routers

00:22:47,399 --> 00:22:54,029
which have some sort of internet

00:22:52,529 --> 00:22:55,489
transport on the back end something that

00:22:54,029 --> 00:22:58,290
you would find attached to your router

00:22:55,489 --> 00:23:00,830
and these stacks have been

00:22:58,290 --> 00:23:02,940
the alarm was part of the thread

00:23:00,830 --> 00:23:06,120
specification in community since the

00:23:02,940 --> 00:23:08,910
beginning members so the stack in the

00:23:06,120 --> 00:23:11,570
software here has been delivered and

00:23:08,910 --> 00:23:15,150
part of all the interrupts so very nice

00:23:11,570 --> 00:23:18,420
in the software stack and while we were

00:23:15,150 --> 00:23:21,210
busy looking at all of this all of this

00:23:18,420 --> 00:23:23,250
IP based networking something was kind

00:23:21,210 --> 00:23:27,300
of quietly happening separately and that

00:23:23,250 --> 00:23:31,520
was Laura has anybody heard of Laura as

00:23:27,300 --> 00:23:36,780
well so Laura is the long-range wireless

00:23:31,520 --> 00:23:38,820
so gigahertz a couple of frequencies but

00:23:36,780 --> 00:23:42,690
lots of distance a little bit to power a

00:23:38,820 --> 00:23:44,550
little bit to data and those are now

00:23:42,690 --> 00:23:46,560
going through actually carrier

00:23:44,550 --> 00:23:49,830
deployments in many different parts of

00:23:46,560 --> 00:23:51,420
the world we kind of had looked up in

00:23:49,830 --> 00:23:53,640
it's like wow you know there are a lot

00:23:51,420 --> 00:23:55,260
of ecosystem members who are part of

00:23:53,640 --> 00:24:00,390
this lower alliance that was some tech

00:23:55,260 --> 00:24:02,160
who licenses that technology then there

00:24:00,390 --> 00:24:03,990
were ecosystem players like multi tag

00:24:02,160 --> 00:24:08,280
who built these certified modules that

00:24:03,990 --> 00:24:10,430
go snap into big industrial equipment in

00:24:08,280 --> 00:24:12,600
some cases replacing cellular

00:24:10,430 --> 00:24:18,120
connectivity where you have the you know

00:24:12,600 --> 00:24:19,800
SIM cards or different data plans and we

00:24:18,120 --> 00:24:23,130
realized okay wow this this again looks

00:24:19,800 --> 00:24:25,890
to be something big and so we've looked

00:24:23,130 --> 00:24:27,690
to invest our increase our investment in

00:24:25,890 --> 00:24:29,910
Laura as a as a technology as a

00:24:27,690 --> 00:24:31,800
connectivity and looking for interested

00:24:29,910 --> 00:24:34,320
partners to understand a bit more about

00:24:31,800 --> 00:24:36,090
its using its deployment right so these

00:24:34,320 --> 00:24:38,850
networks are popping up the network the

00:24:36,090 --> 00:24:41,460
carriers are putting these out and

00:24:38,850 --> 00:24:43,020
there's also lots of community and other

00:24:41,460 --> 00:24:44,910
groups that are building out these

00:24:43,020 --> 00:24:48,960
networks as well so very very

00:24:44,910 --> 00:24:52,620
interesting and so for three we'll look

00:24:48,960 --> 00:24:54,150
at having a set of standard API and

00:24:52,620 --> 00:24:55,770
demos to showcase how this technology

00:24:54,150 --> 00:24:58,500
works again it's one of those things

00:24:55,770 --> 00:25:00,750
that's been in the community and just

00:24:58,500 --> 00:25:07,460
kind of incubating for the last couple

00:25:00,750 --> 00:25:07,460
years and where it's being deployed

00:25:07,740 --> 00:25:18,450
this has got a bit more traction so

00:25:16,470 --> 00:25:21,420
that's the that's the end of some of the

00:25:18,450 --> 00:25:24,450
networking connectivity options we then

00:25:21,420 --> 00:25:28,260
talked about the embed security and so

00:25:24,450 --> 00:25:31,980
security starts starts at the device and

00:25:28,260 --> 00:25:34,800
so this micro visor it's a tiniest a

00:25:31,980 --> 00:25:37,320
hypervisor like a microkernel that helps

00:25:34,800 --> 00:25:39,030
boot the device and it uses the MTU and

00:25:37,320 --> 00:25:42,450
creates these trusted relationships

00:25:39,030 --> 00:25:45,030
between different devices and things

00:25:42,450 --> 00:25:48,480
accessing resources on the device such

00:25:45,030 --> 00:25:51,620
that you can create you know the secure

00:25:48,480 --> 00:25:53,760
boundaries an isolate execution of a

00:25:51,620 --> 00:25:57,630
different code or you can share access

00:25:53,760 --> 00:25:59,220
to resources in a secure way and so this

00:25:57,630 --> 00:26:01,350
will help protect against even that

00:25:59,220 --> 00:26:04,830
weren't attacks it it efficiently

00:26:01,350 --> 00:26:07,050
virtualizes the MP you and for the VM

00:26:04,830 --> 00:26:09,750
it'll work with trusts own as well

00:26:07,050 --> 00:26:11,640
so micro visor it's very much a work in

00:26:09,750 --> 00:26:13,740
progress it's available it's its own

00:26:11,640 --> 00:26:18,420
micro project that is delivered as part

00:26:13,740 --> 00:26:21,360
of us as well but it provides the

00:26:18,420 --> 00:26:22,770
trusted and this form partitioning

00:26:21,360 --> 00:26:24,360
against some resources that you would

00:26:22,770 --> 00:26:26,760
want to protect or keep on your device

00:26:24,360 --> 00:26:29,730
or that you would only want to allow

00:26:26,760 --> 00:26:35,880
certain processes where certain threads

00:26:29,730 --> 00:26:37,410
or functions to even have access to an

00:26:35,880 --> 00:26:38,880
attack to shut down and let your

00:26:37,410 --> 00:26:40,230
heater's go off and you know create

00:26:38,880 --> 00:26:43,970
fires and buildings or something you can

00:26:40,230 --> 00:26:43,970
protect these type of resources

00:26:45,260 --> 00:26:49,340
and there's gonna be another discussion

00:26:47,150 --> 00:26:52,220
about that as well so Paul backer he's

00:26:49,340 --> 00:26:54,080
the director of security products for M

00:26:52,220 --> 00:26:55,970
but OS he'll be here tomorrow on

00:26:54,080 --> 00:27:01,760
Wednesday talking about that in a little

00:26:55,970 --> 00:27:03,559
mini session and then the other piece is

00:27:01,760 --> 00:27:05,120
once you have the the device secured or

00:27:03,559 --> 00:27:07,669
certain information that you need to

00:27:05,120 --> 00:27:10,160
keep on the device secured the channel

00:27:07,669 --> 00:27:12,919
security or the operations to secure

00:27:10,160 --> 00:27:17,290
things within that is important so embed

00:27:12,919 --> 00:27:17,290
TLS again some of the contributions that

00:27:18,190 --> 00:27:22,669
team one of them was years ago you know

00:27:21,260 --> 00:27:24,679
security was a great challenging thing

00:27:22,669 --> 00:27:27,530
partially because the licensing of those

00:27:24,679 --> 00:27:30,470
stacks but given how important it was

00:27:27,530 --> 00:27:32,299
that every device had access to security

00:27:30,470 --> 00:27:34,760
that was an investment that arm had made

00:27:32,299 --> 00:27:38,299
so we had purchased polar SSL at the

00:27:34,760 --> 00:27:40,190
time and that was to you know get some

00:27:38,299 --> 00:27:41,510
people some mindshare but then also to

00:27:40,190 --> 00:27:46,040
realize since that stack and make

00:27:41,510 --> 00:27:47,360
available about its nice integration

00:27:46,040 --> 00:27:48,980
there so that's one of those pieces you

00:27:47,360 --> 00:27:51,320
can see at work where some of the the

00:27:48,980 --> 00:27:54,049
mine share or just the commonality of

00:27:51,320 --> 00:27:55,880
fundamentally sharing a belief as to how

00:27:54,049 --> 00:27:59,360
these products with these devices should

00:27:55,880 --> 00:28:01,130
be built is starting to play and shape

00:27:59,360 --> 00:28:07,910
the way that software is delivered into

00:28:01,130 --> 00:28:12,470
this ecosystem you know it's well it's

00:28:07,910 --> 00:28:15,950
very and we actively develop against the

00:28:12,470 --> 00:28:19,220
upcoming security requirements for these

00:28:15,950 --> 00:28:21,710
different protocols so DTLS is one

00:28:19,220 --> 00:28:25,040
important one so co-op which works over

00:28:21,710 --> 00:28:27,650
a UDP socket uses DTLS in order to

00:28:25,040 --> 00:28:31,190
provide that channel security with the

00:28:27,650 --> 00:28:33,770
server or the thread specification

00:28:31,190 --> 00:28:36,980
required some onboarding and there's a

00:28:33,770 --> 00:28:39,080
new security standard well we had a team

00:28:36,980 --> 00:28:40,250
in house that was able to develop that

00:28:39,080 --> 00:28:43,100
stuff side by side with the

00:28:40,250 --> 00:28:45,710
specifications making sure this security

00:28:43,100 --> 00:28:47,150
stack was optimized for these protocols

00:28:45,710 --> 00:28:49,070
that are going to be very important to

00:28:47,150 --> 00:28:51,470
the devices that people are building

00:28:49,070 --> 00:28:53,990
with these software stacks so if you

00:28:51,470 --> 00:28:56,270
combine the micro visor in this device

00:28:53,990 --> 00:28:57,340
communication security you have a pretty

00:28:56,270 --> 00:28:59,710
well lock down to by

00:28:57,340 --> 00:29:01,840
there's meaning the tools are there for

00:28:59,710 --> 00:29:03,010
people to use them now it's just a

00:29:01,840 --> 00:29:05,740
matter of choosing the devices that

00:29:03,010 --> 00:29:08,230
they're capable and there'll be another

00:29:05,740 --> 00:29:10,030
conversation about that so Marc Hamilton

00:29:08,230 --> 00:29:11,620
he'll be here tomorrow where he's

00:29:10,030 --> 00:29:13,930
probably here now but yeah we'll have

00:29:11,620 --> 00:29:22,870
another forum security architecture for

00:29:13,930 --> 00:29:27,640
embedded devices talk and one of the

00:29:22,870 --> 00:29:31,090
final pieces about umberto ass is the

00:29:27,640 --> 00:29:33,940
core tools so with the release of embed

00:29:31,090 --> 00:29:38,070
OS 5 there was an update to use

00:29:33,940 --> 00:29:40,150
something called embed CLI which is a

00:29:38,070 --> 00:29:41,710
integrated tool that supports the

00:29:40,150 --> 00:29:43,900
building of the codebase the

00:29:41,710 --> 00:29:46,270
collaboration and testing of the

00:29:43,900 --> 00:29:47,560
codebase and many of these pieces are

00:29:46,270 --> 00:29:48,790
already existed so there's a couple

00:29:47,560 --> 00:29:51,210
things that are pretty important about

00:29:48,790 --> 00:29:53,470
these tools if if we believe that the

00:29:51,210 --> 00:29:54,910
operating system to be successful is if

00:29:53,470 --> 00:29:56,530
as a platform OS it needs to be

00:29:54,910 --> 00:29:58,780
accessible and it needs to be low

00:29:56,530 --> 00:30:00,880
friction to get started with they're

00:29:58,780 --> 00:30:02,230
using it needs to be cross-platform and

00:30:00,880 --> 00:30:04,930
it needs to work in many different

00:30:02,230 --> 00:30:08,200
environments and it needs to you know

00:30:04,930 --> 00:30:11,380
build itself it needs to stay out of the

00:30:08,200 --> 00:30:13,120
way of how you actually use the software

00:30:11,380 --> 00:30:15,610
when you go off and integrate it into

00:30:13,120 --> 00:30:18,820
your own environmental solution or

00:30:15,610 --> 00:30:20,320
system so it supports you know

00:30:18,820 --> 00:30:22,780
compilation whether that be just you

00:30:20,320 --> 00:30:26,140
know building test building examples

00:30:22,780 --> 00:30:28,480
building libraries the collaboration

00:30:26,140 --> 00:30:30,760
aspect so it's it's unaware whether

00:30:28,480 --> 00:30:33,340
you're you know scoring your code in a

00:30:30,760 --> 00:30:35,920
mercurial or get or an Espeon repo it

00:30:33,340 --> 00:30:38,020
just has a way of identifying what that

00:30:35,920 --> 00:30:39,370
remote repository type is and then

00:30:38,020 --> 00:30:41,680
pulling down and understanding the

00:30:39,370 --> 00:30:43,930
indexes in the histories to get you the

00:30:41,680 --> 00:30:46,420
software and different from different

00:30:43,930 --> 00:30:48,550
points of development and then it's also

00:30:46,420 --> 00:30:50,710
important that it integrates with a test

00:30:48,550 --> 00:30:52,360
workflow because with all these

00:30:50,710 --> 00:30:54,220
different pieces the software story

00:30:52,360 --> 00:30:57,520
becomes much much more complex and

00:30:54,220 --> 00:31:01,150
testing is much more important arguably

00:30:57,520 --> 00:31:02,530
than it ever was before so selecting

00:31:01,150 --> 00:31:04,519
these different targets and and

00:31:02,530 --> 00:31:06,409
selecting different tool chains

00:31:04,519 --> 00:31:09,140
so one of the things that goes with you

00:31:06,409 --> 00:31:11,649
know ease of access and working in the

00:31:09,140 --> 00:31:13,429
environment of which somebody's

00:31:11,649 --> 00:31:14,690
currently used to or you know

00:31:13,429 --> 00:31:16,220
eliminating that learning curve is

00:31:14,690 --> 00:31:19,549
supporting the different industry

00:31:16,220 --> 00:31:21,260
supported compilers and so there's three

00:31:19,549 --> 00:31:23,750
of them soon to be four we'll look at

00:31:21,260 --> 00:31:24,950
those next but you know the version

00:31:23,750 --> 00:31:27,320
control shouldn't be something you have

00:31:24,950 --> 00:31:28,370
to teach and the compiler shouldn't

00:31:27,320 --> 00:31:30,140
necessarily be something you have to

00:31:28,370 --> 00:31:31,909
teach people have their environments and

00:31:30,140 --> 00:31:33,649
have their engineering mandates they

00:31:31,909 --> 00:31:36,169
should be able to you know take your

00:31:33,649 --> 00:31:37,580
software take your systems and integrate

00:31:36,169 --> 00:31:41,269
it into what they're comfortable or

00:31:37,580 --> 00:31:43,159
required to work with so it also became

00:31:41,269 --> 00:31:46,909
important to support third party tools

00:31:43,159 --> 00:31:56,960
and a few of the artists or

00:31:46,909 --> 00:32:03,590
microcontrollers and so they use

00:31:56,960 --> 00:32:05,360
different compilers GCC compiler so each

00:32:03,590 --> 00:32:08,659
one of these brings its own set of

00:32:05,360 --> 00:32:11,419
challenges and a requirement of the for

00:32:08,659 --> 00:32:12,740
the platform OS is that it doesn't treat

00:32:11,419 --> 00:32:14,480
any one of these any better than the

00:32:12,740 --> 00:32:16,190
others you need to be able to deliver

00:32:14,480 --> 00:32:18,200
your software as the solution into these

00:32:16,190 --> 00:32:21,590
environments and it needs to execute as

00:32:18,200 --> 00:32:23,179
you anticipated as an author so the

00:32:21,590 --> 00:32:25,519
software is built and it is tested

00:32:23,179 --> 00:32:30,470
across all these different compilers on

00:32:25,519 --> 00:32:32,240
a continual basis and then the test

00:32:30,470 --> 00:32:37,639
tools right the testing becomes very

00:32:32,240 --> 00:32:39,830
very important so the the execution of

00:32:37,639 --> 00:32:41,330
unit tests or functional tests again

00:32:39,830 --> 00:32:43,460
operating across many different

00:32:41,330 --> 00:32:45,380
operating systems so python is the

00:32:43,460 --> 00:32:46,909
language that we use to write all of our

00:32:45,380 --> 00:32:50,480
tooling and write all of our testing

00:32:46,909 --> 00:32:52,100
suites harnesses and exit executors and

00:32:50,480 --> 00:32:55,159
what that means is you have a very easy

00:32:52,100 --> 00:32:57,320
interface to take what you do locally

00:32:55,159 --> 00:32:59,179
with your machine and to

00:32:57,320 --> 00:33:01,610
continuous integration type environment

00:32:59,179 --> 00:33:03,320
or to extend it beyond the way you

00:33:01,610 --> 00:33:05,450
deliver you receive the code and go

00:33:03,320 --> 00:33:08,000
write your tests for your product or for

00:33:05,450 --> 00:33:11,090
your high o T device and again talking

00:33:08,000 --> 00:33:13,549
about contributions that has been made

00:33:11,090 --> 00:33:15,049
from Armen from from the embed team so

00:33:13,549 --> 00:33:18,019
since this doubt does anybody know what

00:33:15,049 --> 00:33:21,080
Simpson Zappos got a few people so

00:33:18,019 --> 00:33:23,450
Simpson staff that's a it's a protocol

00:33:21,080 --> 00:33:25,730
it's how you actually shuffle bits from

00:33:23,450 --> 00:33:28,250
the host PC to the device how you

00:33:25,730 --> 00:33:31,820
actually debug something and course I

00:33:28,250 --> 00:33:33,620
its the debug access port on this on the

00:33:31,820 --> 00:33:34,610
C's attached to the CPUs so it's a

00:33:33,620 --> 00:33:35,690
standard it's part of all these

00:33:34,610 --> 00:33:37,789
different devices there's a few

00:33:35,690 --> 00:33:40,070
different flavors but you know you look

00:33:37,789 --> 00:33:41,929
back five six eight years ago you had

00:33:40,070 --> 00:33:44,330
you know handful of probes which was the

00:33:41,929 --> 00:33:45,919
hardware that attached to the device and

00:33:44,330 --> 00:33:47,720
each one of those would be compatible

00:33:45,919 --> 00:33:50,360
with one maybe two different integrated

00:33:47,720 --> 00:33:51,500
development environments of which they

00:33:50,360 --> 00:33:53,419
didn't even work across all the

00:33:51,500 --> 00:33:54,799
different rating systems and back then

00:33:53,419 --> 00:33:56,870
it wasn't as much of a problem you had

00:33:54,799 --> 00:33:59,809
very much contained into what you did

00:33:56,870 --> 00:34:01,399
but now you know working across

00:33:59,809 --> 00:34:02,990
different compilers working across

00:34:01,399 --> 00:34:04,789
different operating systems as the

00:34:02,990 --> 00:34:06,919
development paradigm it becomes very

00:34:04,789 --> 00:34:10,760
important that you can also take your

00:34:06,919 --> 00:34:12,530
tools with you and so since this tap was

00:34:10,760 --> 00:34:14,929
a standard that arm authored and wrote a

00:34:12,530 --> 00:34:17,119
reference implementation for which that

00:34:14,929 --> 00:34:18,950
you know it's just USB with a bunch of

00:34:17,119 --> 00:34:21,079
data going back and forth you can put

00:34:18,950 --> 00:34:23,240
these you know twelve component circuits

00:34:21,079 --> 00:34:26,119
onto a development board or put it

00:34:23,240 --> 00:34:28,369
inside of your debug probe and every OS

00:34:26,119 --> 00:34:29,960
and every IDE should be able to connect

00:34:28,369 --> 00:34:32,119
and talk to that device whether it be to

00:34:29,960 --> 00:34:34,970
to load a new binary image or to

00:34:32,119 --> 00:34:37,280
single-step debug look at your execution

00:34:34,970 --> 00:34:38,480
of that device so that was something a

00:34:37,280 --> 00:34:40,280
couple years ago I think a bit ahead of

00:34:38,480 --> 00:34:41,750
its time but you know it was released if

00:34:40,280 --> 00:34:43,099
you want quite sure to do with it

00:34:41,750 --> 00:34:45,560
but you look now and you get these

00:34:43,099 --> 00:34:47,359
boards you plug them in and have a money

00:34:45,560 --> 00:34:50,450
of material have a mass storage

00:34:47,359 --> 00:34:52,399
interface and you can just just because

00:34:50,450 --> 00:34:54,139
this reference firmware is made

00:34:52,399 --> 00:34:56,510
available that anybody can pick up and

00:34:54,139 --> 00:35:00,190
adopt in and run on their on their chips

00:34:56,510 --> 00:35:02,750
or put on their boards and it makes the

00:35:00,190 --> 00:35:05,510
integration between development through

00:35:02,750 --> 00:35:06,859
to test and automation much much simpler

00:35:05,510 --> 00:35:08,470
because you don't have all these

00:35:06,859 --> 00:35:10,540
different bits and pieces you need to

00:35:08,470 --> 00:35:14,230
get together to put in a testing

00:35:10,540 --> 00:35:15,970
environment so yep very very interesting

00:35:14,230 --> 00:35:17,980
another contribution that we we've made

00:35:15,970 --> 00:35:20,800
in this space and again and again that

00:35:17,980 --> 00:35:23,109
all leads to continuous integration and

00:35:20,800 --> 00:35:25,480
support how do you actually run a

00:35:23,109 --> 00:35:28,329
project and take contributions from a

00:35:25,480 --> 00:35:30,490
large number of parties and people and

00:35:28,329 --> 00:35:32,470
guarantee any sort of stability or

00:35:30,490 --> 00:35:35,880
quality in the software and that's where

00:35:32,470 --> 00:35:38,260
using standard you know system tests or

00:35:35,880 --> 00:35:39,940
reporting formats such that you can

00:35:38,260 --> 00:35:41,800
execute tests of any sort the important

00:35:39,940 --> 00:35:43,300
thing is that you can see the results in

00:35:41,800 --> 00:35:45,130
a way that fits in with the rest of your

00:35:43,300 --> 00:35:51,569
products and systems whether you're

00:35:45,130 --> 00:35:54,640
testing system very important and again

00:35:51,569 --> 00:36:00,670
python is the language of choice here

00:35:54,640 --> 00:36:02,200
just due to its multiple support so the

00:36:00,670 --> 00:36:05,530
the final thing we'll talk about here

00:36:02,200 --> 00:36:06,849
closing out is the ecosystem again so

00:36:05,530 --> 00:36:10,810
that was the last piece to the recipe

00:36:06,849 --> 00:36:12,690
for making a successful platform OS you

00:36:10,810 --> 00:36:15,550
know there needs to be an ecosystem and

00:36:12,690 --> 00:36:19,000
ecosystem needs to be very diverse

00:36:15,550 --> 00:36:20,020
having just a lot of MCU support you

00:36:19,000 --> 00:36:22,240
know will get you so far

00:36:20,020 --> 00:36:25,150
but there's a lot of middleware and

00:36:22,240 --> 00:36:27,250
value add that comes along from people

00:36:25,150 --> 00:36:31,270
who deliver software and the same thing

00:36:27,250 --> 00:36:33,430
from the cloud side how you actually you

00:36:31,270 --> 00:36:36,640
know manage these devices or get the

00:36:33,430 --> 00:36:41,829
data you know into this so all three of

00:36:36,640 --> 00:36:44,099
those are quite key do you look at all

00:36:41,829 --> 00:36:47,440
the different types of people right from

00:36:44,099 --> 00:36:51,339
distribution to chipsets themselves to

00:36:47,440 --> 00:36:54,310
people who do cloud and web you know

00:36:51,339 --> 00:36:56,740
even consulting services and product

00:36:54,310 --> 00:36:58,420
companies so it's it's important that

00:36:56,740 --> 00:37:01,599
all these people have a stake in what

00:36:58,420 --> 00:37:03,430
you're doing because IOT devices are the

00:37:01,599 --> 00:37:04,839
Internet of Things is not just one

00:37:03,430 --> 00:37:06,790
aspect it's not just the device and it's

00:37:04,839 --> 00:37:08,829
not just the cloud it's all those pieces

00:37:06,790 --> 00:37:10,329
put together and understanding the

00:37:08,829 --> 00:37:11,770
technology is that each one of these

00:37:10,329 --> 00:37:14,560
different verticals or each one of these

00:37:11,770 --> 00:37:16,160
different segments is going after

00:37:14,560 --> 00:37:21,330
important

00:37:16,160 --> 00:37:24,900
it's critical so the the embed OS

00:37:21,330 --> 00:37:26,520
partner ecosystem you know currently you

00:37:24,900 --> 00:37:28,080
know it's running on devices cortex

00:37:26,520 --> 00:37:30,600
seven zero all the way up to cortex

00:37:28,080 --> 00:37:32,460
seven seven there's actually a couple

00:37:30,600 --> 00:37:35,730
cortex a devices that run bare metal are

00:37:32,460 --> 00:37:39,090
toss as well and when we released the OS

00:37:35,730 --> 00:37:41,130
5.1 in August there were you know forty

00:37:39,090 --> 00:37:43,920
plus nine forty two platforms made

00:37:41,130 --> 00:37:45,900
available at that point in time and they

00:37:43,920 --> 00:37:47,490
come from a handful of different MCU

00:37:45,900 --> 00:37:49,340
partners there's just about a dozen of

00:37:47,490 --> 00:37:51,770
them list is there but each one of these

00:37:49,340 --> 00:37:54,390
has you know made a commitment to

00:37:51,770 --> 00:37:56,850
providing software and testing in a way

00:37:54,390 --> 00:38:00,270
that it plugs into this value app stack

00:37:56,850 --> 00:38:02,130
and has delivered on a schedule

00:38:00,270 --> 00:38:05,580
according to the you know the governance

00:38:02,130 --> 00:38:09,390
and in the partnerships better or the

00:38:05,580 --> 00:38:11,760
schedules that we that we set so there's

00:38:09,390 --> 00:38:13,440
lots of these coming and in another

00:38:11,760 --> 00:38:15,120
pitch so Wednesday night there's going

00:38:13,440 --> 00:38:17,520
to be board games and I hear pizza and

00:38:15,120 --> 00:38:18,840
beer so anybody interested we do have a

00:38:17,520 --> 00:38:21,300
handful of boards come find me

00:38:18,840 --> 00:38:26,400
afterwards I unfortunately won't be here

00:38:21,300 --> 00:38:28,560
to run that but otherwise Paul backer as

00:38:26,400 --> 00:38:36,360
well he'll be here to help people run

00:38:28,560 --> 00:38:38,880
through a tutorial or give them or even

00:38:36,360 --> 00:38:42,660
dive deeper if they have specific

00:38:38,880 --> 00:38:45,270
questions and finally after the

00:38:42,660 --> 00:38:46,650
developer community after the partner

00:38:45,270 --> 00:38:49,050
ecosystem there's a developer community

00:38:46,650 --> 00:38:52,110
and it's important to deliver the

00:38:49,050 --> 00:38:54,330
software to them but it's also important

00:38:52,110 --> 00:38:56,790
to encourage the feedback and encourage

00:38:54,330 --> 00:38:59,190
the patches and the chain says so you

00:38:56,790 --> 00:39:00,750
know there's lots of lots of registered

00:38:59,190 --> 00:39:03,270
developers lots of people who are using

00:39:00,750 --> 00:39:04,770
the online tools that we provide which

00:39:03,270 --> 00:39:05,640
gives somebody like a very quick low

00:39:04,770 --> 00:39:08,310
friction start

00:39:05,640 --> 00:39:10,920
I mean it's user name email address and

00:39:08,310 --> 00:39:13,050
you're in an environment where you can

00:39:10,920 --> 00:39:15,300
you know create an application you can

00:39:13,050 --> 00:39:18,570
share it because reproducibility is very

00:39:15,300 --> 00:39:21,740
important in these environments and you

00:39:18,570 --> 00:39:24,030
know that leads to them you know again

00:39:21,740 --> 00:39:26,190
feeling part of something so then they

00:39:24,030 --> 00:39:26,690
write component drivers or started doing

00:39:26,190 --> 00:39:28,550
the value

00:39:26,690 --> 00:39:31,730
which is the middleware ecosystem of

00:39:28,550 --> 00:39:33,740
components and of devices that again

00:39:31,730 --> 00:39:35,540
feel like the operating system they may

00:39:33,740 --> 00:39:37,339
not be part of it but they're made

00:39:35,540 --> 00:39:40,540
available such that other people can

00:39:37,339 --> 00:39:45,500
reuse them in their applications as well

00:39:40,540 --> 00:39:47,329
so with that we do have partnership the

00:39:45,500 --> 00:39:48,770
events of so this year there's a the

00:39:47,329 --> 00:39:50,869
embed Connect which happens just before

00:39:48,770 --> 00:39:54,470
arms Techcon event in October and that's

00:39:50,869 --> 00:39:56,180
open to developers and to partners so

00:39:54,470 --> 00:39:58,760
lots of people get together hands-on

00:39:56,180 --> 00:39:59,869
training partner insights so you hear

00:39:58,760 --> 00:40:01,940
from people who are on the other side

00:39:59,869 --> 00:40:04,339
either contributing to this operating

00:40:01,940 --> 00:40:07,040
system or people who are building

00:40:04,339 --> 00:40:10,550
different products or services based on

00:40:07,040 --> 00:40:11,420
this ecosystem so as I close out here

00:40:10,550 --> 00:40:14,180
just a quick summary

00:40:11,420 --> 00:40:19,250
so Umberto S is a it's a fully

00:40:14,180 --> 00:40:21,190
functional OS for cortex-m devices and

00:40:19,250 --> 00:40:23,569
you know it's it's good to use today

00:40:21,190 --> 00:40:26,540
it's free and it's open to use and

00:40:23,569 --> 00:40:28,430
there's a very broad platform support so

00:40:26,540 --> 00:40:34,280
different devices that run it and it's

00:40:28,430 --> 00:40:38,390
just growing in the IOT device platform

00:40:34,280 --> 00:40:42,410
is where the embed client allows you to

00:40:38,390 --> 00:40:45,890
run on embed OS Linux based devices run

00:40:42,410 --> 00:40:48,050
on devices run anywhere but connect to

00:40:45,890 --> 00:40:50,540
the device connector which then creates

00:40:48,050 --> 00:40:53,030
that contract between the different or

00:40:50,540 --> 00:40:54,829
cloud services via a restful interface

00:40:53,030 --> 00:40:57,050
that they're used to speaking to in the

00:40:54,829 --> 00:40:59,300
device which again may or not be there

00:40:57,050 --> 00:41:03,319
that has you know sleepy characteristics

00:40:59,300 --> 00:41:04,880
or behaviors and then again the embody

00:41:03,319 --> 00:41:07,010
per system right so the broad ecosystem

00:41:04,880 --> 00:41:09,530
of all these people together in it for a

00:41:07,010 --> 00:41:13,160
particular purpose which is building a

00:41:09,530 --> 00:41:15,349
secure in a scalable IOT with that I

00:41:13,160 --> 00:41:18,579
wanted to say thank you and I guess it's

00:41:15,349 --> 00:41:18,579
just me between you and coffee

00:41:30,960 --> 00:41:33,020

YouTube URL: https://www.youtube.com/watch?v=LQn5-2caSZY


