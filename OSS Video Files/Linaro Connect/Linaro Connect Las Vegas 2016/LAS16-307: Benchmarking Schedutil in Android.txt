Title: LAS16-307: Benchmarking Schedutil in Android
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-307: Benchmarking Schedutil in Android
Speakers: Steve Muckle
Date: September 28, 2016

★ Session Description ★
Being able to see the performance and power impacts of changes in a real world environment such as Android is a prerequisite to doing meaningful development on scheduler-guided frequency (or many other sensitive subsystems). The first half of this session will review setting up the tools to automate testing for performance and power in Android. The second half will cover the results of using these tests to compare the schedutil and interactive governors.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-307
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-307/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:07,849 --> 00:00:13,710
hi everyone so my name is Steve muckle

00:00:10,740 --> 00:00:15,900
I'm Alan ro full time employee and I've

00:00:13,710 --> 00:00:19,460
been spending some of my time over the

00:00:15,900 --> 00:00:21,930
last six months trying to be able to get

00:00:19,460 --> 00:00:24,119
some decent performance and power

00:00:21,930 --> 00:00:26,310
numbers on Android for benchmarking are

00:00:24,119 --> 00:00:28,410
changes to the schedule till governor so

00:00:26,310 --> 00:00:30,210
if you have worked me with me at all

00:00:28,410 --> 00:00:31,650
over the last few years before I joined

00:00:30,210 --> 00:00:34,790
one are a year ago I was a qualcomm

00:00:31,650 --> 00:00:37,739
working on the same exact stuff doing

00:00:34,790 --> 00:00:40,200
working on our big little scheduler

00:00:37,739 --> 00:00:41,489
there and also the enhancements the CP

00:00:40,200 --> 00:00:43,829
free governor that we were using at

00:00:41,489 --> 00:00:46,710
Qualcomm with using scheduler

00:00:43,829 --> 00:00:48,450
information and something that has sort

00:00:46,710 --> 00:00:50,160
of frustrated me for a long time is

00:00:48,450 --> 00:00:52,289
being able to easily quantify the

00:00:50,160 --> 00:00:55,680
benefit of our changes on you know in

00:00:52,289 --> 00:00:58,320
real-world scenarios so this

00:00:55,680 --> 00:01:00,539
presentation is kind of my story about

00:00:58,320 --> 00:01:03,090
my effort to do that as a community

00:01:00,539 --> 00:01:04,470
member as someone without access to you

00:01:03,090 --> 00:01:07,860
know the benefits that the big

00:01:04,470 --> 00:01:09,510
corporations have and I certainly am not

00:01:07,860 --> 00:01:10,979
making any guarantees that this is the

00:01:09,510 --> 00:01:13,110
best way to do it or is that it even

00:01:10,979 --> 00:01:14,700
works but this is what I've got and I'm

00:01:13,110 --> 00:01:17,430
hoping to maybe start a discussion about

00:01:14,700 --> 00:01:19,229
how we can make it easier for community

00:01:17,430 --> 00:01:20,729
members people out you know just doing

00:01:19,229 --> 00:01:22,020
this in their spare time or for whatever

00:01:20,729 --> 00:01:24,479
reason you don't have access to the

00:01:22,020 --> 00:01:25,830
fancy platforms to be able to get in

00:01:24,479 --> 00:01:27,810
because you really need to be able to do

00:01:25,830 --> 00:01:30,900
this to be part of the development

00:01:27,810 --> 00:01:33,680
effort I think for for the scheduler for

00:01:30,900 --> 00:01:33,680
cpu freak

00:01:34,310 --> 00:01:39,530
so it's a two-part presentation so I'll

00:01:36,799 --> 00:01:41,390
talk about yeah how I kind of my my sort

00:01:39,530 --> 00:01:43,880
of rudimentary approach to creating a

00:01:41,390 --> 00:01:44,869
suite for this and then I've all

00:01:43,880 --> 00:01:46,520
compared so I've been working on

00:01:44,869 --> 00:01:48,740
schedule till as well over the last six

00:01:46,520 --> 00:01:50,180
months and i'll talk about so I've

00:01:48,740 --> 00:01:52,490
compared that so the interactive

00:01:50,180 --> 00:01:53,780
governor and then also to sched freak

00:01:52,490 --> 00:01:56,539
which is sort of an earlier incarnation

00:01:53,780 --> 00:02:02,390
of schedule till that recently got

00:01:56,539 --> 00:02:04,220
merged into AOSP so I mean why why do I

00:02:02,390 --> 00:02:06,049
think I guess Android is so important

00:02:04,220 --> 00:02:09,410
why is it worth you know bringing this

00:02:06,049 --> 00:02:12,230
up in the community and I think putting

00:02:09,410 --> 00:02:13,970
effort into getting people better

00:02:12,230 --> 00:02:15,200
support for doing these tests and this

00:02:13,970 --> 00:02:17,180
is going to be obvious to a lot of

00:02:15,200 --> 00:02:19,160
people in the audience but you know

00:02:17,180 --> 00:02:21,799
maintain errs I found it increasingly

00:02:19,160 --> 00:02:23,480
increasingly been asking for you know

00:02:21,799 --> 00:02:24,890
what's the real world impact of this and

00:02:23,480 --> 00:02:26,120
why are we even considering this change

00:02:24,890 --> 00:02:29,209
why would why do we want to add this

00:02:26,120 --> 00:02:31,819
complexity for a patch they want to know

00:02:29,209 --> 00:02:33,170
what test case is this relevant on rep

00:02:31,819 --> 00:02:34,970
you know rather than just stuffing in

00:02:33,170 --> 00:02:37,640
something because it sounds nice in

00:02:34,970 --> 00:02:41,120
theory you know they want some numbers

00:02:37,640 --> 00:02:44,780
and some data so and we have you know

00:02:41,120 --> 00:02:47,420
like Artie app to do unit tests but you

00:02:44,780 --> 00:02:49,609
know my and this is partly my opinion i

00:02:47,420 --> 00:02:50,989
guess but i don't think that RT app is a

00:02:49,609 --> 00:02:53,150
good guarantee that things are going to

00:02:50,989 --> 00:02:55,760
be relevant on android you know these

00:02:53,150 --> 00:02:57,200
platforms are constantly changing with

00:02:55,760 --> 00:02:59,049
every new version of android that comes

00:02:57,200 --> 00:03:02,600
out i mean it's it's a very complex

00:02:59,049 --> 00:03:04,730
framework userspace framework how do you

00:03:02,600 --> 00:03:06,170
know that this you know unit task that

00:03:04,730 --> 00:03:08,930
you put a considerable amount of effort

00:03:06,170 --> 00:03:11,239
into to replicate what say a browser

00:03:08,930 --> 00:03:12,709
might do the various you know threads of

00:03:11,239 --> 00:03:14,269
a browser and how they interact I mean

00:03:12,709 --> 00:03:15,889
for one thing it's very complicated to

00:03:14,269 --> 00:03:18,590
build a unit test that will replicate

00:03:15,889 --> 00:03:20,780
that behavior and then you know because

00:03:18,590 --> 00:03:22,280
new teller nougat or whatever comes out

00:03:20,780 --> 00:03:23,810
the next version of android they change

00:03:22,280 --> 00:03:25,970
a few things and now suddenly your unit

00:03:23,810 --> 00:03:27,470
test isn't relevant anymore because

00:03:25,970 --> 00:03:29,690
there's something else in the framework

00:03:27,470 --> 00:03:31,519
that it you know causes different

00:03:29,690 --> 00:03:33,799
behaviors so I think you know just just

00:03:31,519 --> 00:03:36,200
test the real thing clearly android is

00:03:33,799 --> 00:03:38,030
the dominant mobile OS here's some

00:03:36,200 --> 00:03:39,340
statistics on that i don't think we need

00:03:38,030 --> 00:03:41,570
those to know that

00:03:39,340 --> 00:03:43,460
and more importantly on in the mobile

00:03:41,570 --> 00:03:46,430
space you know perfect the perfect power

00:03:43,460 --> 00:03:47,840
dynamic is is so important that you know

00:03:46,430 --> 00:03:49,820
of all the platforms we're going to

00:03:47,840 --> 00:03:51,050
consider on the Linux kernel mailing

00:03:49,820 --> 00:03:53,480
list you know how does this change

00:03:51,050 --> 00:03:56,030
affect you know the things that Linux

00:03:53,480 --> 00:03:57,680
runs on Android should be you know I

00:03:56,030 --> 00:04:01,340
certainly right at the top of the list

00:03:57,680 --> 00:04:04,070
of discussion so how do we usually do

00:04:01,340 --> 00:04:06,530
this profiling it's usually done on

00:04:04,070 --> 00:04:08,000
internal only platforms I mean if you

00:04:06,530 --> 00:04:10,400
look at the you know the sock vendors

00:04:08,000 --> 00:04:12,290
and the platform vendors they'll have

00:04:10,400 --> 00:04:15,070
stuff that it's not publicly available

00:04:12,290 --> 00:04:17,359
it's done with costly test equipment

00:04:15,070 --> 00:04:19,220
stuff that's probably been you know

00:04:17,359 --> 00:04:21,200
professionally calibrated that has a

00:04:19,220 --> 00:04:23,720
high sampling rate if it's going to get

00:04:21,200 --> 00:04:26,030
you very high quality data they're using

00:04:23,720 --> 00:04:28,160
product quality software stacks that

00:04:26,030 --> 00:04:30,380
have been through a lot of testing and

00:04:28,160 --> 00:04:33,800
tuning with engineers that are basically

00:04:30,380 --> 00:04:35,300
dedicated for this purpose and then

00:04:33,800 --> 00:04:37,280
they've also got you know benchmarks

00:04:35,300 --> 00:04:38,570
there you know the sock vendors in the

00:04:37,280 --> 00:04:40,490
end the platform vendors they obviously

00:04:38,570 --> 00:04:42,290
know what benchmarks the bloggers and

00:04:40,490 --> 00:04:44,780
whatnot care about the most so they've

00:04:42,290 --> 00:04:47,570
selected a suite of benchmarks that are

00:04:44,780 --> 00:04:48,980
going to you know hit home with with

00:04:47,570 --> 00:04:50,450
those folks and do a good job of

00:04:48,980 --> 00:04:56,240
characterizing the system's performance

00:04:50,450 --> 00:04:57,650
and power so you know I this is kind of

00:04:56,240 --> 00:04:58,970
I guess obvious stuff from the previous

00:04:57,650 --> 00:05:00,380
slide but I mean commercial entities

00:04:58,970 --> 00:05:01,760
have a huge number of advantages here

00:05:00,380 --> 00:05:04,460
right I mean they've got armies of

00:05:01,760 --> 00:05:06,410
people as I say I mean in my time with

00:05:04,460 --> 00:05:09,350
Qualcomm i worked with dedicated

00:05:06,410 --> 00:05:12,200
separate teams to do performance and

00:05:09,350 --> 00:05:13,550
power just for Android you know so and

00:05:12,200 --> 00:05:14,960
then they've got a whole bunch of money

00:05:13,550 --> 00:05:17,240
that they can throw at these expensive

00:05:14,960 --> 00:05:18,650
tools not only do they have access to

00:05:17,240 --> 00:05:19,790
these platforms but they create them

00:05:18,650 --> 00:05:22,130
right so I mean they can design

00:05:19,790 --> 00:05:24,800
platforms that lend themselves to this

00:05:22,130 --> 00:05:27,980
sort of testing and then they also are

00:05:24,800 --> 00:05:30,050
part of a network of connections to you

00:05:27,980 --> 00:05:33,020
know relevant other entities some of

00:05:30,050 --> 00:05:34,730
which might be covered with ndas and in

00:05:33,020 --> 00:05:37,340
some cases they may be able to effect

00:05:34,730 --> 00:05:40,080
changes and say benchmarks I think you

00:05:37,340 --> 00:05:43,030
know some of these folks work with

00:05:40,080 --> 00:05:44,410
some of the benchmark vendors to to make

00:05:43,030 --> 00:05:47,650
changes to make it easier to do this

00:05:44,410 --> 00:05:49,540
testing so you know here's a quick I did

00:05:47,650 --> 00:05:51,310
all of my testing on the Heike platform

00:05:49,540 --> 00:05:54,040
and here's a quick rundown of how that

00:05:51,310 --> 00:05:55,570
you know compares to when I say typical

00:05:54,040 --> 00:05:58,180
I'm talking about basically what a

00:05:55,570 --> 00:05:59,830
commercial vendor would do obviously the

00:05:58,180 --> 00:06:01,570
Heike has the great benefit that is

00:05:59,830 --> 00:06:03,760
totally open right i mean if it weren't

00:06:01,570 --> 00:06:05,140
for that then we basically couldn't

00:06:03,760 --> 00:06:07,000
really do anything because as a

00:06:05,140 --> 00:06:10,270
community member because there really is

00:06:07,000 --> 00:06:12,400
no other alternative you know the

00:06:10,270 --> 00:06:15,760
hardware is accessible and everything is

00:06:12,400 --> 00:06:17,740
open including the schematics but in the

00:06:15,760 --> 00:06:19,090
other categories we're facing challenges

00:06:17,740 --> 00:06:20,770
and again this this isn't a sort of

00:06:19,090 --> 00:06:22,600
poo-poo the idea of doing this testing

00:06:20,770 --> 00:06:23,770
on on open platforms I mean I'm really

00:06:22,600 --> 00:06:25,420
here to just try and point out these

00:06:23,770 --> 00:06:29,260
problems and as I say start a discussion

00:06:25,420 --> 00:06:33,400
about how maybe we can do better to get

00:06:29,260 --> 00:06:34,840
over them or round them I think I've

00:06:33,400 --> 00:06:36,490
already mentioned most of this stuff but

00:06:34,840 --> 00:06:37,780
the power domain accessibility when I'm

00:06:36,490 --> 00:06:39,610
referring there is yeah really the

00:06:37,780 --> 00:06:42,370
ability to measure the separate rails

00:06:39,610 --> 00:06:44,290
you know the CPU rails and not have to

00:06:42,370 --> 00:06:45,760
have the clutter of activity on other

00:06:44,290 --> 00:06:49,900
Hardware blocks in your power

00:06:45,760 --> 00:06:51,940
measurements so as I look to create a

00:06:49,900 --> 00:06:54,220
test suite there were sort of three

00:06:51,940 --> 00:06:55,990
areas I wanted to cover I separated out

00:06:54,220 --> 00:06:57,430
UX because on Android that's

00:06:55,990 --> 00:06:59,320
particularly important right i mean they

00:06:57,430 --> 00:07:00,550
care about that a lot so i think it's

00:06:59,320 --> 00:07:04,420
worth considering that as sort of a

00:07:00,550 --> 00:07:06,250
separate area of interest for

00:07:04,420 --> 00:07:08,260
performance you know right now i was

00:07:06,250 --> 00:07:10,870
just looking for some composite system

00:07:08,260 --> 00:07:13,390
benchmark that's a good general overview

00:07:10,870 --> 00:07:15,310
of how the device is doing they're

00:07:13,390 --> 00:07:16,840
harder to analyze which is a drawback I

00:07:15,310 --> 00:07:18,250
mean if you want to take a trace and try

00:07:16,840 --> 00:07:20,320
and tease out you know hey why didn't my

00:07:18,250 --> 00:07:22,660
change you know make an to to go down

00:07:20,320 --> 00:07:24,430
100 points that might be kind of tough

00:07:22,660 --> 00:07:27,070
because it's a you know an 22 does a

00:07:24,430 --> 00:07:30,270
whole lot of different things or or

00:07:27,070 --> 00:07:33,070
geekbench or whatever also the license

00:07:30,270 --> 00:07:35,110
that I faced here really was licensing I

00:07:33,070 --> 00:07:36,730
mean in fact I started out with deep

00:07:35,110 --> 00:07:38,770
bench and then discover that it's it's

00:07:36,730 --> 00:07:42,010
got a you know license that said that

00:07:38,770 --> 00:07:43,090
costly so and 22 seems to be free if

00:07:42,010 --> 00:07:44,840
someone knows that that's not true

00:07:43,090 --> 00:07:47,160
please tell me

00:07:44,840 --> 00:07:49,410
you know it measures a few different

00:07:47,160 --> 00:07:51,509
things in the future I think I'd like to

00:07:49,410 --> 00:07:56,370
do some i/o and gaming testing as well

00:07:51,509 --> 00:07:57,660
so shanks again I think a lot of you

00:07:56,370 --> 00:08:00,960
folks in the audience probably know what

00:07:57,660 --> 00:08:03,060
this is but you know the UI and Android

00:08:00,960 --> 00:08:04,770
wants to run at 60fps and they have a

00:08:03,060 --> 00:08:07,380
good video here that explains why that

00:08:04,770 --> 00:08:09,720
number is is significant and why they

00:08:07,380 --> 00:08:11,720
want to achieve that number when you

00:08:09,720 --> 00:08:13,830
miss a frame they call that a jank

00:08:11,720 --> 00:08:15,710
something in the display pipeline took

00:08:13,830 --> 00:08:18,960
too long that can be for various reasons

00:08:15,710 --> 00:08:20,370
you know one of the most relevant for me

00:08:18,960 --> 00:08:21,960
is that the CPUs weren't running fast

00:08:20,370 --> 00:08:23,550
enough the governor hadn't sped up the

00:08:21,960 --> 00:08:25,050
CPU fast enough but there's other

00:08:23,550 --> 00:08:27,539
reasons too i mean the scheduler might

00:08:25,050 --> 00:08:29,340
have suboptimal eco scheduled a couple

00:08:27,539 --> 00:08:31,410
of tasks on the same cpu rather than

00:08:29,340 --> 00:08:36,089
splitting them up or there could have

00:08:31,410 --> 00:08:38,310
been something else so for you x there's

00:08:36,089 --> 00:08:40,979
a recent fling script in the AOSP tree

00:08:38,310 --> 00:08:43,500
and this is what i did i based most of

00:08:40,979 --> 00:08:46,200
my testing on for you x it basically it

00:08:43,500 --> 00:08:47,580
opens up a collection of apps and then

00:08:46,200 --> 00:08:49,529
you know if you're feeling but like

00:08:47,580 --> 00:08:51,450
familiar with the recent app list and

00:08:49,529 --> 00:08:53,790
android it opens that up and just flings

00:08:51,450 --> 00:08:56,490
that back and forth scrolling amongst

00:08:53,790 --> 00:08:58,620
those screens and looking for Jencks i

00:08:56,490 --> 00:09:00,360
wanted to try and explore some of the

00:08:58,620 --> 00:09:02,010
other scenarios with that as well so i

00:09:00,360 --> 00:09:04,650
used thats group as a template to create

00:09:02,010 --> 00:09:08,370
three other tests based on scrolling an

00:09:04,650 --> 00:09:10,920
email inbox opening up of the image

00:09:08,370 --> 00:09:12,870
gallery and flinging that back and forth

00:09:10,920 --> 00:09:16,130
and then also opening up a web page and

00:09:12,870 --> 00:09:16,130
flinging that as well

00:09:17,480 --> 00:09:20,899
Oh feel free to stop me also if you have

00:09:19,579 --> 00:09:23,600
any questions along the way we'd have to

00:09:20,899 --> 00:09:24,980
wait till the end and then for the power

00:09:23,600 --> 00:09:27,380
scenario is just a few you know

00:09:24,980 --> 00:09:29,779
rudimentary scenarios there they're

00:09:27,380 --> 00:09:32,029
listed here I'd like to do email web

00:09:29,779 --> 00:09:34,750
browsing as well at some point I didn't

00:09:32,029 --> 00:09:34,750
get to that just yet

00:09:35,590 --> 00:09:39,700
a camera yeah that is also another one

00:09:37,810 --> 00:09:43,450
that would be good said yeah definitely

00:09:39,700 --> 00:09:50,160
oh sorry you said a cpu intensive work

00:09:43,450 --> 00:09:50,160
load oh yeah yeah camera vcq yeah sure

00:09:50,170 --> 00:09:54,320
Automation is important not only because

00:09:52,339 --> 00:09:55,639
it you know stings to sit there and do

00:09:54,320 --> 00:09:57,380
the same thing over and over again but

00:09:55,639 --> 00:09:59,209
also for accuracy right we want to try

00:09:57,380 --> 00:10:02,089
and get the same exact flings each time

00:09:59,209 --> 00:10:04,519
and also to try and capture the same

00:10:02,089 --> 00:10:06,860
amount of background activity this is

00:10:04,519 --> 00:10:07,880
not a perfect solution I mean with

00:10:06,860 --> 00:10:09,829
Android there's there's

00:10:07,880 --> 00:10:12,110
non-deterministic stuff happening in the

00:10:09,829 --> 00:10:14,480
background and so the best you can do I

00:10:12,110 --> 00:10:15,800
think is just try and get the system

00:10:14,480 --> 00:10:17,570
into this you know with similar a state

00:10:15,800 --> 00:10:20,120
as possible and keep your measurement

00:10:17,570 --> 00:10:26,720
for the same length of time and you know

00:10:20,120 --> 00:10:28,310
run multiple trials and CEO it goes so

00:10:26,720 --> 00:10:30,410
for this there's there's at least a

00:10:28,310 --> 00:10:32,060
couple different options here I went

00:10:30,410 --> 00:10:33,980
with workload automation sweet I think

00:10:32,060 --> 00:10:35,990
somewhat to the chagrin of my arm

00:10:33,980 --> 00:10:37,880
friends so they they have another

00:10:35,990 --> 00:10:40,820
solution called Lisa which you can can

00:10:37,880 --> 00:10:43,670
find out more about from them this is a

00:10:40,820 --> 00:10:46,730
bit smaller it was also created by armed

00:10:43,670 --> 00:10:49,010
in Python and it's got a lot of support

00:10:46,730 --> 00:10:50,329
for a lot of different workloads it's

00:10:49,010 --> 00:10:52,250
very modular so if you want to add new

00:10:50,329 --> 00:10:54,380
support for a new workload or for new

00:10:52,250 --> 00:10:57,470
instrumentation it's pretty easy to do

00:10:54,380 --> 00:10:59,209
and there's some pointers here so I had

00:10:57,470 --> 00:11:00,680
to make a few changes and those are in

00:10:59,209 --> 00:11:06,050
that git repository that I've listed

00:11:00,680 --> 00:11:07,519
there you know a couple downsides you

00:11:06,050 --> 00:11:09,290
know these apps change pretty frequently

00:11:07,519 --> 00:11:10,670
so you know like an tues you geekbench

00:11:09,290 --> 00:11:13,130
all these things they're updated all the

00:11:10,670 --> 00:11:15,769
time and the support for that and this

00:11:13,130 --> 00:11:17,569
week breaks frequently and so you know

00:11:15,769 --> 00:11:19,760
you go to run that and you probably have

00:11:17,569 --> 00:11:20,899
to make some changes if it's you know if

00:11:19,760 --> 00:11:23,110
you're trying to run the latest and

00:11:20,899 --> 00:11:26,089
greatest and i ran into that as well

00:11:23,110 --> 00:11:29,000
also you know that's the stuff in there

00:11:26,089 --> 00:11:31,670
i think assumes the stock android you

00:11:29,000 --> 00:11:34,579
know google android experience that was

00:11:31,670 --> 00:11:37,420
not you know what we have on the high

00:11:34,579 --> 00:11:40,279
keyboard so i added some support for

00:11:37,420 --> 00:11:41,959
using things like VLC or other free

00:11:40,279 --> 00:11:44,290
alternatives that i installed in my

00:11:41,959 --> 00:11:44,290
environment

00:11:45,050 --> 00:11:50,160
so on to some other challenges you know

00:11:48,870 --> 00:11:53,400
one of the things with the high keyboard

00:11:50,160 --> 00:11:54,660
is it doesn't come instrumented for

00:11:53,400 --> 00:11:56,340
power measurement you have to do that

00:11:54,660 --> 00:11:58,860
yourself you have to solder on SaLuSa

00:11:56,340 --> 00:12:00,750
leads and a connector you know there is

00:11:58,860 --> 00:12:02,940
information on how to do that in the

00:12:00,750 --> 00:12:06,300
documentation but you got to be careful

00:12:02,940 --> 00:12:09,840
so I a I was working on a different

00:12:06,300 --> 00:12:11,460
board which which I won't name but the

00:12:09,840 --> 00:12:15,600
instructions that came with it were not

00:12:11,460 --> 00:12:17,520
correct and I I mean I think if i had

00:12:15,600 --> 00:12:19,230
actually looked at the schematics it

00:12:17,520 --> 00:12:20,280
would have been fairly obvious but i

00:12:19,230 --> 00:12:21,930
didn't and i just followed the

00:12:20,280 --> 00:12:24,180
instructions and i actually blew a trace

00:12:21,930 --> 00:12:25,620
on the board and fortunately didn't fry

00:12:24,180 --> 00:12:27,360
completely and i was able to find a

00:12:25,620 --> 00:12:29,040
different point at which I could you

00:12:27,360 --> 00:12:31,770
know attached this and successfully

00:12:29,040 --> 00:12:33,600
continue to do measurements but yeah I

00:12:31,770 --> 00:12:36,450
mean this this again I mean when you're

00:12:33,600 --> 00:12:38,400
not you have the support of a you know a

00:12:36,450 --> 00:12:40,080
rework lab or whatever or you know

00:12:38,400 --> 00:12:41,340
officially supported internal platforms

00:12:40,080 --> 00:12:45,180
this is kind of what you're up against

00:12:41,340 --> 00:12:46,350
so and then there's some other I mean

00:12:45,180 --> 00:12:49,200
when you're doing this again other

00:12:46,350 --> 00:12:50,820
things that you know when you don't have

00:12:49,200 --> 00:12:52,080
a lab or a team of people doing this

00:12:50,820 --> 00:12:54,990
you've got to handle these things

00:12:52,080 --> 00:12:57,300
yourselves and a guy by the name of andy

00:12:54,990 --> 00:12:58,890
green did a great presentation on all

00:12:57,300 --> 00:13:00,840
the details of measuring power and so i

00:12:58,890 --> 00:13:02,310
won't delve into that stuff here but i

00:13:00,840 --> 00:13:06,440
mean here just a few of the concerns

00:13:02,310 --> 00:13:06,440
that he explores in that presentation

00:13:07,900 --> 00:13:12,340
and then I also ran into some stability

00:13:10,210 --> 00:13:14,920
issues both with the target and with the

00:13:12,340 --> 00:13:16,960
framework that the workload automation

00:13:14,920 --> 00:13:18,850
sweet you know I mean the idea is that

00:13:16,960 --> 00:13:20,650
you can just kick off this this testing

00:13:18,850 --> 00:13:22,390
and come back an hour later and have a

00:13:20,650 --> 00:13:24,520
nice pile of results right to pore over

00:13:22,390 --> 00:13:27,460
in reality that's not what happens I

00:13:24,520 --> 00:13:28,950
mean even with my you know however much

00:13:27,460 --> 00:13:30,970
effort I put in over the last six months

00:13:28,950 --> 00:13:32,440
you know the Heike it's a community

00:13:30,970 --> 00:13:34,690
supported platform so you're going to

00:13:32,440 --> 00:13:36,250
get random issues now and then work

00:13:34,690 --> 00:13:38,890
while got automation just sort of fails

00:13:36,250 --> 00:13:41,470
every now and then and stops working and

00:13:38,890 --> 00:13:42,970
you have to mess with it and then the

00:13:41,470 --> 00:13:44,290
individual tests also there's some

00:13:42,970 --> 00:13:46,450
issues there so I mean this is something

00:13:44,290 --> 00:13:48,850
that really needs to be supported over a

00:13:46,450 --> 00:13:53,200
length of time you know it needs sort of

00:13:48,850 --> 00:13:55,420
constant attention and maintenance so

00:13:53,200 --> 00:13:58,510
with that I was going to get into my

00:13:55,420 --> 00:14:01,699
test results if there's any questions on

00:13:58,510 --> 00:14:04,299
any of this stuff I could take this now

00:14:01,699 --> 00:14:04,299
one

00:14:09,770 --> 00:14:16,410
anything specific in my device

00:14:11,640 --> 00:14:17,760
configuration for this not that I can

00:14:16,410 --> 00:14:19,860
recall I mean I think it was a you know

00:14:17,760 --> 00:14:22,160
it's it's a standard well actually all

00:14:19,860 --> 00:14:22,160
go to

00:14:25,100 --> 00:14:38,000
oh you're gay yeah I mean nothing I

00:14:36,250 --> 00:14:39,440
don't think there was anything really

00:14:38,000 --> 00:14:43,280
particular it was moves I mean this is

00:14:39,440 --> 00:14:44,810
what the configuration I used yeah I

00:14:43,280 --> 00:14:47,150
mean software-wise it was pretty much as

00:14:44,810 --> 00:14:48,890
two standard AOSP build other than the

00:14:47,150 --> 00:14:59,090
components that specifically wanted to

00:14:48,890 --> 00:15:00,770
test you know so different races toward

00:14:59,090 --> 00:15:03,890
everything budgeting climbing they're

00:15:00,770 --> 00:15:07,880
more standardized way to measure power

00:15:03,890 --> 00:15:09,530
like two pins or three beans just that

00:15:07,880 --> 00:15:11,570
comes with the board with the help

00:15:09,530 --> 00:15:14,540
because it's a I guess I mean greenies

00:15:11,570 --> 00:15:16,310
methods and everything is possible yeah

00:15:14,540 --> 00:15:17,210
so let me see if I just understand your

00:15:16,310 --> 00:15:18,470
question i mean you're saying like

00:15:17,210 --> 00:15:20,090
wouldn't be nice if we didn't have to

00:15:18,470 --> 00:15:22,100
solder the distance resistor and it came

00:15:20,090 --> 00:15:24,500
yeah no absolutely and I I kind of

00:15:22,100 --> 00:15:27,230
wonder why that's the case I don't know

00:15:24,500 --> 00:15:28,640
why I mean the 96 board standard I think

00:15:27,230 --> 00:15:29,930
there's some language in there about you

00:15:28,640 --> 00:15:31,610
know trying to make it easier to measure

00:15:29,930 --> 00:15:34,670
power that you should have at least a

00:15:31,610 --> 00:15:36,080
place to put a sense resistor but you

00:15:34,670 --> 00:15:38,030
know I mean I had to go and research

00:15:36,080 --> 00:15:39,440
okay what's the you know resist is

00:15:38,030 --> 00:15:41,150
required for this you know particular

00:15:39,440 --> 00:15:43,130
current and everything and that that's

00:15:41,150 --> 00:15:44,600
not a trivial exercise I mean it's not

00:15:43,130 --> 00:15:46,400
particularly hard but you got to dig up

00:15:44,600 --> 00:15:47,840
that information and you got to go find

00:15:46,400 --> 00:15:49,670
a vendor of your choosing and go to

00:15:47,840 --> 00:15:50,840
Mauser calm or whatever in order this

00:15:49,670 --> 00:15:53,060
thing and you know I mean it's like a

00:15:50,840 --> 00:15:54,290
dollar fifty cents or something but you

00:15:53,060 --> 00:15:56,150
know I mean can we really not just have

00:15:54,290 --> 00:15:57,590
that I i I'm not familiar enough

00:15:56,150 --> 00:15:59,360
actually be an interesting question to

00:15:57,590 --> 00:16:01,640
talk to the folks in the 96 sports team

00:15:59,360 --> 00:16:03,380
in because I don't understand the cost

00:16:01,640 --> 00:16:05,960
pressures you know that they face and

00:16:03,380 --> 00:16:07,460
getting these boards out there but yeah

00:16:05,960 --> 00:16:10,690
that would be really nice we could just

00:16:07,460 --> 00:16:15,080
plug in a header and be done with it so

00:16:10,690 --> 00:16:18,710
if you plan to send the modification to

00:16:15,080 --> 00:16:20,540
w82 made like upstream yeah so I mean I

00:16:18,710 --> 00:16:22,040
sent a couple of my changes but I

00:16:20,540 --> 00:16:24,020
haven't been as diligent as I should be

00:16:22,040 --> 00:16:29,060
so yeah oh I'll send that other than

00:16:24,020 --> 00:16:32,300
posting and I haven't done much so I did

00:16:29,060 --> 00:16:35,570
two comparisons you know I mean with the

00:16:32,300 --> 00:16:37,220
earth EAS getting pulled into AOSP you

00:16:35,570 --> 00:16:41,010
know I wanted to

00:16:37,220 --> 00:16:42,180
test that tree was scheduled till so

00:16:41,010 --> 00:16:43,320
just to give some background I guess

00:16:42,180 --> 00:16:45,450
because not everyone might know what's

00:16:43,320 --> 00:16:47,160
sketchy till is so you know there was an

00:16:45,450 --> 00:16:50,339
effort inland are over the last couple

00:16:47,160 --> 00:16:51,959
two or three years to create a CP free

00:16:50,339 --> 00:16:53,550
governor that took information from the

00:16:51,959 --> 00:16:55,200
scheduler and used that to make

00:16:53,550 --> 00:16:58,260
intelligent decisions about the cpu

00:16:55,200 --> 00:17:00,690
frequency that that work went on as a

00:16:58,260 --> 00:17:03,089
safer for maybe a couple of years and

00:17:00,690 --> 00:17:06,449
then early this year right around

00:17:03,089 --> 00:17:08,189
january time frame i guess raphael

00:17:06,449 --> 00:17:10,860
Wysocki he created his own kind of

00:17:08,189 --> 00:17:12,660
version and merged that it's similar in

00:17:10,860 --> 00:17:14,280
spirit it does the same basic thing it

00:17:12,660 --> 00:17:18,809
takes information from the scheduler to

00:17:14,280 --> 00:17:22,410
make decisions on CP frequency so i am

00:17:18,809 --> 00:17:24,839
now trying to move us away from so the

00:17:22,410 --> 00:17:27,809
lenoir o solution called sked freak is

00:17:24,839 --> 00:17:28,950
what is made it into AOSP you know we

00:17:27,809 --> 00:17:30,600
want to try and move away from that

00:17:28,950 --> 00:17:31,980
obviously over time and get to the the

00:17:30,600 --> 00:17:34,020
upstream solution which is scheduled

00:17:31,980 --> 00:17:36,120
till so that's why I'm doing this

00:17:34,020 --> 00:17:39,780
measurement and I want to see how much

00:17:36,120 --> 00:17:41,940
more work there is there so with EAS

00:17:39,780 --> 00:17:43,140
being merged in to AOSP I you know I

00:17:41,940 --> 00:17:44,820
basically wanted to measure with them

00:17:43,140 --> 00:17:47,130
without that the a s makes some changes

00:17:44,820 --> 00:17:48,450
to you know to key scheduler paths and

00:17:47,130 --> 00:17:49,950
might have an effect on the behavior so

00:17:48,450 --> 00:17:54,000
I thought it'd be good to have both sets

00:17:49,950 --> 00:17:58,080
of data so the first set i will have is

00:17:54,000 --> 00:18:01,320
pre EAS it's the 44 heike kernel that

00:17:58,080 --> 00:18:03,929
linaro maintains with cpu freak tip

00:18:01,320 --> 00:18:05,610
backported so that we can use the latest

00:18:03,929 --> 00:18:07,530
schedule till patches along with any

00:18:05,610 --> 00:18:09,840
other framework stuff to see be freaking

00:18:07,530 --> 00:18:11,010
in the main line and then i also have a

00:18:09,840 --> 00:18:12,360
patch and scheduled till right now

00:18:11,010 --> 00:18:14,850
scheduled till does a horrible thing

00:18:12,360 --> 00:18:16,410
with RTE tasks like whenever you run our

00:18:14,850 --> 00:18:18,210
t it just goes to have max which is

00:18:16,410 --> 00:18:20,520
going to be obviously horrible for power

00:18:18,210 --> 00:18:23,010
so i've got a patch to improve that

00:18:20,520 --> 00:18:25,290
policy which i pulled in its not

00:18:23,010 --> 00:18:30,570
upstream yet and then some other

00:18:25,290 --> 00:18:32,010
dependencies so here i put the tuning

00:18:30,570 --> 00:18:34,140
information in here i'm not going to run

00:18:32,010 --> 00:18:35,880
over all these numbers it's you know

00:18:34,140 --> 00:18:36,840
it's mainly if folks are curious and

00:18:35,880 --> 00:18:38,460
want to go back and look at these

00:18:36,840 --> 00:18:40,919
numbers i think the most important thing

00:18:38,460 --> 00:18:42,450
is that also i was comparing three

00:18:40,919 --> 00:18:44,460
different governors here interactive on

00:18:42,450 --> 00:18:46,800
demand and sketchy till they're all

00:18:44,460 --> 00:18:48,270
using a 20 millisecond sampling rate so

00:18:46,800 --> 00:18:50,570
that's kind of the most important thing

00:18:48,270 --> 00:18:50,570
I think

00:18:50,980 --> 00:18:56,960
so on to the numbers schedule so again

00:18:54,559 --> 00:19:01,120
this is pre EAS so this schedule till is

00:18:56,960 --> 00:19:01,120
just using pelts / energy load tracking

00:19:01,870 --> 00:19:06,919
Kenny goes are you can you go to the

00:19:05,510 --> 00:19:08,840
previous flight so that I can look at

00:19:06,919 --> 00:19:11,840
some of the configuration not for an

00:19:08,840 --> 00:19:14,659
attractor for other ones without a

00:19:11,840 --> 00:19:18,110
schedule well schedules really slim it

00:19:14,659 --> 00:19:19,279
up so scheduled till just has 11 tunable

00:19:18,110 --> 00:19:20,630
which controls the race so they're

00:19:19,279 --> 00:19:23,240
they're the upstream folks are really

00:19:20,630 --> 00:19:30,669
trying to crack you know yeah down on

00:19:23,240 --> 00:19:30,669
the teen holes ok thanks it's good right

00:19:31,090 --> 00:19:36,470
so Angie to actually looks pretty good

00:19:33,639 --> 00:19:38,299
the the numbers are pretty close you

00:19:36,470 --> 00:19:40,010
know I think at this point given that

00:19:38,299 --> 00:19:42,500
sketch istill is not an optimized

00:19:40,010 --> 00:19:44,360
solution you know it's it's very early I

00:19:42,500 --> 00:19:47,179
think anything that's in the ballpark is

00:19:44,360 --> 00:19:51,620
doing pretty well and so you know I was

00:19:47,179 --> 00:19:55,789
pretty happy to see this actually so

00:19:51,620 --> 00:19:57,529
yeah that was pretty good but then we

00:19:55,789 --> 00:20:00,320
get into some of the interactive or UX

00:19:57,529 --> 00:20:01,820
stuff and it's not so great so you know

00:20:00,320 --> 00:20:06,200
this is a this is a pretty nasty

00:20:01,820 --> 00:20:07,880
regression in recent fling this this

00:20:06,200 --> 00:20:09,350
percentage is the percent of janky

00:20:07,880 --> 00:20:11,960
frames that we see out of the total

00:20:09,350 --> 00:20:13,700
number of frames so I mean you know

00:20:11,960 --> 00:20:15,740
these numbers obviously also are just

00:20:13,700 --> 00:20:17,299
horrible in their own right I mean you

00:20:15,740 --> 00:20:19,519
know even eighteen fourteen percent is

00:20:17,299 --> 00:20:20,990
terrible but that's what you get with

00:20:19,519 --> 00:20:23,450
the Heike platform because it's an

00:20:20,990 --> 00:20:25,490
unoptimized community platform right so

00:20:23,450 --> 00:20:27,980
but I'm just having to you know the best

00:20:25,490 --> 00:20:30,590
i can do is relative comparison here and

00:20:27,980 --> 00:20:33,950
get it as close as I can to you know to

00:20:30,590 --> 00:20:35,690
what's being used generally so still

00:20:33,950 --> 00:20:37,190
you're like the interactive for this

00:20:35,690 --> 00:20:40,159
particular configuration is actually

00:20:37,190 --> 00:20:42,889
linked we did like touch boost miss her

00:20:40,159 --> 00:20:44,870
sorry I didn't if interactive the

00:20:42,889 --> 00:20:46,909
attractive governor is actually linked

00:20:44,870 --> 00:20:51,950
with the for example Android touch boost

00:20:46,909 --> 00:20:57,830
for this particular thing so it might

00:20:51,950 --> 00:21:00,260
might be old yeah so I get that that

00:20:57,830 --> 00:21:04,190
links the link doesn't 64 or shred you

00:21:00,260 --> 00:21:06,919
deal so my be here yeah so I guess here

00:21:04,190 --> 00:21:11,269
doesn't it will in my next set of tests

00:21:06,919 --> 00:21:13,460
which includes John's powerhouse changes

00:21:11,269 --> 00:21:16,370
right so i think in with your schedule

00:21:13,460 --> 00:21:25,429
to with your EAS tree does that is that

00:21:16,370 --> 00:21:28,460
true so we also added support for the

00:21:25,429 --> 00:21:30,710
EES skid boost its good tune boosting

00:21:28,460 --> 00:21:31,970
okay and so that's in the power hell as

00:21:30,710 --> 00:21:35,710
well so the powerhouse supports both

00:21:31,970 --> 00:21:38,029
interactive governor and schedule okay

00:21:35,710 --> 00:21:40,340
although actually that said though i

00:21:38,029 --> 00:21:43,039
think in the the testing that i did in

00:21:40,340 --> 00:21:45,980
your tree we had you taken out that so

00:21:43,039 --> 00:21:49,009
yeah so it's a it's a it's a fair point

00:21:45,980 --> 00:21:50,480
but I think for interactive here it

00:21:49,009 --> 00:21:54,350
sounds like we should have that boosting

00:21:50,480 --> 00:21:56,179
right and this in this test so so

00:21:54,350 --> 00:21:58,580
question on the so I suppose both

00:21:56,179 --> 00:22:02,330
specific to a governor just change them

00:21:58,580 --> 00:22:04,509
in know why is that spoofs specific to a

00:22:02,330 --> 00:22:11,419
governor don't you just change a men

00:22:04,509 --> 00:22:13,210
frequency okay yes get in but so the

00:22:11,419 --> 00:22:16,370
mechanisms are different I guess between

00:22:13,210 --> 00:22:20,049
the schedule boosting and the

00:22:16,370 --> 00:22:22,429
interactive governor and so it's done

00:22:20,049 --> 00:22:23,870
yeah I mean so the idea you know the

00:22:22,429 --> 00:22:26,450
interactive governor if you go into the

00:22:23,870 --> 00:22:28,399
tunable directory it's got a boost and a

00:22:26,450 --> 00:22:30,320
boost pulse duration and that stuff

00:22:28,399 --> 00:22:31,820
whereas you know with scheduled till

00:22:30,320 --> 00:22:33,470
you're going to be well I guess

00:22:31,820 --> 00:22:35,419
eventually we'll be playing with sket

00:22:33,470 --> 00:22:41,990
tune and those things to achieve the

00:22:35,419 --> 00:22:44,029
same effect so yeah before I go on I

00:22:41,990 --> 00:22:46,279
mean I you know when I look at this the

00:22:44,029 --> 00:22:47,779
first thing that leaps out to me is to

00:22:46,279 --> 00:22:49,519
to why this is happening it's most

00:22:47,779 --> 00:22:51,440
likely the nature in which we're

00:22:49,519 --> 00:22:53,960
collecting the task utilization data

00:22:51,440 --> 00:22:56,090
right so in this test we're just using

00:22:53,960 --> 00:22:59,330
pretty low tracking the exponential

00:22:56,090 --> 00:23:02,480
decay method that's upstream right now

00:22:59,330 --> 00:23:04,909
so you know we'll window baseload

00:23:02,480 --> 00:23:09,440
tracking help will actually take a look

00:23:04,909 --> 00:23:11,659
at that in the next section so the tests

00:23:09,440 --> 00:23:14,029
that i added you know i need to spend

00:23:11,659 --> 00:23:16,850
more time sort of digging into them and

00:23:14,029 --> 00:23:17,990
assessing sort of their utility you know

00:23:16,850 --> 00:23:19,640
they tell something of a

00:23:17,990 --> 00:23:22,010
story here but I don't know that they've

00:23:19,640 --> 00:23:24,700
been you've seen enough action to trust

00:23:22,010 --> 00:23:27,320
the results or to read a lot into them

00:23:24,700 --> 00:23:31,870
but you know nevertheless here they are

00:23:27,320 --> 00:23:34,460
so free male fling it sits in the noise

00:23:31,870 --> 00:23:36,500
browser flings get you two looked good

00:23:34,460 --> 00:23:39,559
here as well the numbers are still

00:23:36,500 --> 00:23:42,020
pretty low kind of across the board and

00:23:39,559 --> 00:23:43,880
then again gallery fling not much I

00:23:42,020 --> 00:23:46,850
actually saw probably more interesting

00:23:43,880 --> 00:23:50,650
results in the next section when EAS is

00:23:46,850 --> 00:23:52,940
in the tree and then for power numbers

00:23:50,650 --> 00:23:54,530
schedule schedule to look pretty good

00:23:52,940 --> 00:23:57,230
here as well actually it was competitive

00:23:54,530 --> 00:24:01,309
across the board for all of these sort

00:23:57,230 --> 00:24:06,410
of basic use cases so yeah idle an mp3

00:24:01,309 --> 00:24:08,540
playback and also for video playback the

00:24:06,410 --> 00:24:10,700
numbers look pretty good you'll notice

00:24:08,540 --> 00:24:13,760
that actually video playback is lower

00:24:10,700 --> 00:24:15,290
power than audio playback which you know

00:24:13,760 --> 00:24:17,750
again here we are in a community

00:24:15,290 --> 00:24:20,330
platform so you know this the my audio

00:24:17,750 --> 00:24:22,429
playback was done using the sort of

00:24:20,330 --> 00:24:24,800
stock audio player that you you get when

00:24:22,429 --> 00:24:27,530
you install the AOSP whereas my video

00:24:24,800 --> 00:24:29,990
playback is using VLC which is probably

00:24:27,530 --> 00:24:32,870
a more advanced piece of software that's

00:24:29,990 --> 00:24:38,600
taking advantage of codecs and onboard

00:24:32,870 --> 00:24:40,940
hardware I guess so you have any

00:24:38,600 --> 00:24:43,370
performance data for the video codec I

00:24:40,940 --> 00:24:45,830
mean performance for wet for the video

00:24:43,370 --> 00:24:48,500
playback I mean no like drop frames yeah

00:24:45,830 --> 00:24:54,770
no I don't yeah I don't have that so

00:24:48,500 --> 00:24:57,920
that's a good good to do yeah all these

00:24:54,770 --> 00:25:01,100
numbers do look close but I mean like 90

00:24:57,920 --> 00:25:03,140
noses 21 or yeah pick any two numbers

00:25:01,100 --> 00:25:05,330
it's almost like what five person right

00:25:03,140 --> 00:25:06,679
yeah five percent power and the phone

00:25:05,330 --> 00:25:11,150
means I probably get half an hour more

00:25:06,679 --> 00:25:13,250
sure are more agree I mean my reply to

00:25:11,150 --> 00:25:15,170
that would be you know when you're on an

00:25:13,250 --> 00:25:17,330
optimized platform I you know schedu

00:25:15,170 --> 00:25:20,740
till is seeing no you know so little

00:25:17,330 --> 00:25:20,740
effort and development yet

00:25:20,840 --> 00:25:25,440
yeah i mean i'm sure you guys are going

00:25:22,919 --> 00:25:26,610
to come back with 30 patches that make

00:25:25,440 --> 00:25:29,909
it look like something totally different

00:25:26,610 --> 00:25:31,080
but yeah I mean to me this is satisfying

00:25:29,909 --> 00:25:32,639
to me I mean it's something that was

00:25:31,080 --> 00:25:34,980
just developed in the community without

00:25:32,639 --> 00:25:38,519
any serious effort of honor you know

00:25:34,980 --> 00:25:40,200
like this is well i'm not saying

00:25:38,519 --> 00:25:41,639
schedule is glister oval are horrible

00:25:40,200 --> 00:25:44,669
but i didn't wanna call it a small

00:25:41,639 --> 00:25:47,429
difference it's different that we do

00:25:44,669 --> 00:25:48,690
still need address I think so I I guess

00:25:47,429 --> 00:25:50,580
there you know there is a discussion to

00:25:48,690 --> 00:25:53,279
be had on you know where are we going to

00:25:50,580 --> 00:25:54,929
set the bar here you know how close in

00:25:53,279 --> 00:25:57,840
terms of a percentage do we need to be I

00:25:54,929 --> 00:26:00,059
mean in my opinion you know if we can

00:25:57,840 --> 00:26:02,669
get within ten to fifteen percent that's

00:26:00,059 --> 00:26:04,559
probably good enough and I think at that

00:26:02,669 --> 00:26:06,419
point you know we're going to need more

00:26:04,559 --> 00:26:08,039
help from Sauk vendors and folks that

00:26:06,419 --> 00:26:10,470
have optimized platforms to be able to

00:26:08,039 --> 00:26:12,389
get that last little bit you know so I

00:26:10,470 --> 00:26:14,159
mean I this I think for where we're at

00:26:12,389 --> 00:26:16,169
right now is good but I mean point taken

00:26:14,159 --> 00:26:23,000
yeah we're obviously not the way not all

00:26:16,169 --> 00:26:26,009
the way there so so the second build

00:26:23,000 --> 00:26:28,049
thanks a lot to URI for you know he p

00:26:26,009 --> 00:26:31,620
did the dirty work of merging what I had

00:26:28,049 --> 00:26:33,899
into the EAS tree and subtracting out

00:26:31,620 --> 00:26:36,149
this get frickin sket tuned Scott freak

00:26:33,899 --> 00:26:39,799
again being the now deprecated version

00:26:36,149 --> 00:26:43,590
of schedule or guided frequency control

00:26:39,799 --> 00:26:47,789
so here are the two Nobles are pretty

00:26:43,590 --> 00:26:52,429
much the same I'll spend a lot of time

00:26:47,789 --> 00:26:54,779
there so for this set of data I added in

00:26:52,429 --> 00:26:56,450
comparing pelts opportunity load

00:26:54,779 --> 00:26:58,620
tracking with window baseload tracking

00:26:56,450 --> 00:27:00,960
Vikram's going to give a presentation on

00:26:58,620 --> 00:27:03,120
window baseload tracking next if you

00:27:00,960 --> 00:27:04,740
want to learn more about it but it's

00:27:03,120 --> 00:27:08,460
something that was developed at Qualcomm

00:27:04,740 --> 00:27:12,059
to basically try and retain you know the

00:27:08,460 --> 00:27:13,980
window based nature of cpu utilization

00:27:12,059 --> 00:27:18,149
sampling that you get in both

00:27:13,980 --> 00:27:20,100
interactive and on-demand we found I say

00:27:18,149 --> 00:27:21,539
we because I worked on that also during

00:27:20,100 --> 00:27:23,090
my time there we found that that was

00:27:21,539 --> 00:27:25,160
more suitable for mobile

00:27:23,090 --> 00:27:28,610
and workloads that needed no more

00:27:25,160 --> 00:27:32,210
responsiveness so and sure enough when

00:27:28,610 --> 00:27:33,860
you look at these numbers Walt does give

00:27:32,210 --> 00:27:37,580
you quite a boost actually of around

00:27:33,860 --> 00:27:40,100
1,200 points with with in antutu with

00:27:37,580 --> 00:27:42,340
skagit ill so again I mean the numbers

00:27:40,100 --> 00:27:44,960
across the board look look pretty good

00:27:42,340 --> 00:27:50,480
but Walt does get you closer to what we

00:27:44,960 --> 00:27:52,640
get with interactive so and also with

00:27:50,480 --> 00:27:54,350
recent fling so again sure enough Walt

00:27:52,640 --> 00:27:56,390
does help you there as well it still

00:27:54,350 --> 00:27:59,420
doesn't get us all the way down to where

00:27:56,390 --> 00:28:01,970
interactive is when I tested with EAS

00:27:59,420 --> 00:28:04,580
we're still you know like 12 percentage

00:28:01,970 --> 00:28:07,640
points off but it got us all almost half

00:28:04,580 --> 00:28:09,500
the way down so certainly more more work

00:28:07,640 --> 00:28:12,200
is needed there more optimization is

00:28:09,500 --> 00:28:24,920
required there hey Steve one question

00:28:12,200 --> 00:28:27,230
about the wallet integration is that so

00:28:24,920 --> 00:28:28,670
the world integration was it purely cpu

00:28:27,230 --> 00:28:33,440
utilization or was it also task

00:28:28,670 --> 00:28:36,140
utilization that was um this is exposed

00:28:33,440 --> 00:28:40,940
right yeah it should be both right I me

00:28:36,140 --> 00:28:43,460
more sense of emotion so the the trial

00:28:40,940 --> 00:28:45,410
one number four so that's perform

00:28:43,460 --> 00:28:47,330
performance governor at the end isn't it

00:28:45,410 --> 00:28:48,860
there's the bottom row yeah yeah

00:28:47,330 --> 00:28:52,550
performance governor yes so your first

00:28:48,860 --> 00:28:57,620
so trial 123 percent worsen interactive

00:28:52,550 --> 00:28:59,540
is that sorry I'm not following yeah

00:28:57,620 --> 00:29:01,370
trial one yeah so I actually measured

00:28:59,540 --> 00:29:04,250
worse with performance than with

00:29:01,370 --> 00:29:06,980
interactive on the first trial so you

00:29:04,250 --> 00:29:09,380
know I can about sample me sorry papi

00:29:06,980 --> 00:29:12,230
but sample maybe I mean yeah bad bad

00:29:09,380 --> 00:29:13,520
sampling thermal random activity on the

00:29:12,230 --> 00:29:17,540
device you know with the android

00:29:13,520 --> 00:29:18,680
framework yeah I mean any number of and

00:29:17,540 --> 00:29:20,570
this is kind of what I'm getting at them

00:29:18,680 --> 00:29:24,530
and I think testing perf and power is

00:29:20,570 --> 00:29:26,690
often a in my experience almost more of

00:29:24,530 --> 00:29:27,980
an art than a science I mean with the

00:29:26,690 --> 00:29:30,530
number of things that can affect the

00:29:27,980 --> 00:29:32,540
device you know I know from my

00:29:30,530 --> 00:29:34,640
experience with with teams at Qualcomm

00:29:32,540 --> 00:29:35,360
that yeah they will take a certain

00:29:34,640 --> 00:29:37,610
number of tests

00:29:35,360 --> 00:29:39,770
and they'll just throw out outliers you

00:29:37,610 --> 00:29:42,020
know like this doesn't look right you

00:29:39,770 --> 00:29:43,670
know and and just take what they see is

00:29:42,020 --> 00:29:45,860
like the three best samples out of maybe

00:29:43,670 --> 00:29:47,630
five or something like that so how do

00:29:45,860 --> 00:29:49,940
you know what's considered saying you

00:29:47,630 --> 00:29:51,590
know I mean that that requires knowing a

00:29:49,940 --> 00:29:53,420
particular version of Android and

00:29:51,590 --> 00:29:56,240
everything that's running on your

00:29:53,420 --> 00:29:57,799
installation and you know so i didn't i

00:29:56,240 --> 00:29:59,360
didn't go through all those steps with

00:29:57,799 --> 00:30:00,799
this i mean just you know just and again

00:29:59,360 --> 00:30:02,809
I mean this is one of the problems that

00:30:00,799 --> 00:30:05,570
I'm trying to I guess bring up is that

00:30:02,809 --> 00:30:08,150
is a loan community member you can't do

00:30:05,570 --> 00:30:10,549
that right so I don't really know what

00:30:08,150 --> 00:30:12,590
the answer is there I I think when you

00:30:10,549 --> 00:30:15,260
look at the average numbers it you know

00:30:12,590 --> 00:30:16,669
it looks relatively sane but I'm you

00:30:15,260 --> 00:30:18,799
know I do like this probably needs more

00:30:16,669 --> 00:30:21,290
trials to weed out things like that yeah

00:30:18,799 --> 00:30:24,320
might also be interesting to see look at

00:30:21,290 --> 00:30:26,030
the right person tiles to I mean as you

00:30:24,320 --> 00:30:29,660
saying to all to see if there are

00:30:26,030 --> 00:30:31,520
outliers that may be a fatty averages

00:30:29,660 --> 00:30:33,679
sorry I missed the first part here we

00:30:31,520 --> 00:30:37,429
have a look at the percentiles like oh

00:30:33,679 --> 00:30:43,820
yeah sure as to a better picture mm-hmm

00:30:37,429 --> 00:30:45,590
agreed so with email fling again yeah

00:30:43,820 --> 00:30:47,780
with EA yes I actually saw more of a

00:30:45,590 --> 00:30:51,380
regression with the a s with schedule

00:30:47,780 --> 00:30:53,330
for some reason and actually weirdly

00:30:51,380 --> 00:30:55,010
enough in this case Walt actually made

00:30:53,330 --> 00:30:56,720
things a little worse although with

00:30:55,010 --> 00:30:58,700
differences this close it's probably

00:30:56,720 --> 00:31:00,590
hard to read a whole lot into it but I

00:30:58,700 --> 00:31:02,120
think you probably can read into this

00:31:00,590 --> 00:31:04,669
that there is something going on with

00:31:02,120 --> 00:31:10,940
scheduled till on this particular use

00:31:04,669 --> 00:31:12,530
case and here again I see the same thing

00:31:10,940 --> 00:31:14,950
with browser fling it looks like there's

00:31:12,530 --> 00:31:17,210
something going on with scheduled till

00:31:14,950 --> 00:31:22,240
that Walt did actually maybe help a

00:31:17,210 --> 00:31:24,410
little bit with and then with this one

00:31:22,240 --> 00:31:26,600
you know it's interesting because I mean

00:31:24,410 --> 00:31:28,520
without EAS you know this looked pretty

00:31:26,600 --> 00:31:30,110
good actually for scheduled till but for

00:31:28,520 --> 00:31:32,240
whatever reason when we add EAS in there

00:31:30,110 --> 00:31:34,429
now I'm seeing a significant regression

00:31:32,240 --> 00:31:36,470
that Walt actually helps out a fair

00:31:34,429 --> 00:31:38,390
amount with so it's a pretty sweet

00:31:36,470 --> 00:31:41,000
because also on the man interactive

00:31:38,390 --> 00:31:46,030
imperfect are using basically yes in

00:31:41,000 --> 00:31:49,100
this case for not windy run all the

00:31:46,030 --> 00:31:52,760
carbonyls with the new branch

00:31:49,100 --> 00:31:56,390
oh yes or are they on demand interactive

00:31:52,760 --> 00:31:58,190
imperf coming from this is already a s

00:31:56,390 --> 00:32:02,990
so that's that's what I'm say I'm in a

00:31:58,190 --> 00:32:05,620
callous rage that basically it seems

00:32:02,990 --> 00:32:08,720
that like es works fine with on-demand

00:32:05,620 --> 00:32:10,190
interactive and bear from this case but

00:32:08,720 --> 00:32:11,690
still we have province we should do to

00:32:10,190 --> 00:32:16,900
some yeah maybe it's integration in

00:32:11,690 --> 00:32:19,730
general yeah it needs more investigation

00:32:16,900 --> 00:32:23,450
so why not so you don't have numbers for

00:32:19,730 --> 00:32:26,059
skate freak no i don't so I mean you to

00:32:23,450 --> 00:32:28,909
compare with your point those yeah you

00:32:26,059 --> 00:32:32,330
have those no I didn't test get freaked

00:32:28,909 --> 00:32:33,919
skid freaks not upstream Yuri actually

00:32:32,330 --> 00:32:36,080
will have numbers on skype freak okay

00:32:33,919 --> 00:32:38,770
but to compare like with skip detail

00:32:36,080 --> 00:32:41,929
right I mean everything else the same

00:32:38,770 --> 00:32:44,000
yeah i mean i don't know I for my

00:32:41,929 --> 00:32:47,419
purposes I mean my goal is to try and

00:32:44,000 --> 00:32:51,230
get scheduled till I guess move folks

00:32:47,419 --> 00:32:54,890
over his gadget ill and I that was the

00:32:51,230 --> 00:32:57,950
easiest comparison for me to do i think

00:32:54,890 --> 00:32:59,960
that uh yeah and also given that Yuri

00:32:57,950 --> 00:33:02,750
has those numbers yeah crushed in an

00:32:59,960 --> 00:33:04,789
anthill yeah also share the branch one

00:33:02,750 --> 00:33:08,000
week before or having here to it what's

00:33:04,789 --> 00:33:12,159
up sorry I also share the branch one

00:33:08,000 --> 00:33:12,159
just one week before or connects yes

00:33:20,149 --> 00:33:24,479
all right i mean this particular test

00:33:22,350 --> 00:33:29,309
your interesting to know what would be

00:33:24,479 --> 00:33:32,129
with so the last the last little bit i

00:33:29,309 --> 00:33:34,499
have those power numbers and here you do

00:33:32,129 --> 00:33:35,940
actually see that Walt is is chewing up

00:33:34,499 --> 00:33:39,179
some additional power so in all three

00:33:35,940 --> 00:33:41,729
news cases we see that you know skagit

00:33:39,179 --> 00:33:44,809
till with pelts is is in line with the

00:33:41,729 --> 00:33:50,249
others whereas Walt introduces a

00:33:44,809 --> 00:33:52,259
significant power increase so you know I

00:33:50,249 --> 00:33:54,090
mean nothing comes for free you know in

00:33:52,259 --> 00:33:56,489
order to get meaningful gains with

00:33:54,090 --> 00:33:58,379
performance without you know impacting

00:33:56,489 --> 00:34:00,090
power we're going to need more I guess

00:33:58,379 --> 00:34:01,830
tight integration with the framework

00:34:00,090 --> 00:34:04,249
some more intelligently you know

00:34:01,830 --> 00:34:08,190
allocate that power to these use cases

00:34:04,249 --> 00:34:09,480
so but if nothing else I guess it's an

00:34:08,190 --> 00:34:11,639
indication that at least this test

00:34:09,480 --> 00:34:15,240
framework is you know doing something

00:34:11,639 --> 00:34:17,790
right so yeah so in all these you can

00:34:15,240 --> 00:34:19,889
see I mean that one in particular is is

00:34:17,790 --> 00:34:29,480
a fairly nasty regression for video

00:34:19,889 --> 00:34:32,639
playback so schedu till so these two

00:34:29,480 --> 00:34:34,980
here I mean you know introducing Walton

00:34:32,639 --> 00:34:38,970
to sched it till on video playback using

00:34:34,980 --> 00:34:41,159
pretty ugly power regression so that is

00:34:38,970 --> 00:34:43,950
pretty much it well okay so next steps

00:34:41,159 --> 00:34:47,040
yeah I mean clearly the framework itself

00:34:43,950 --> 00:34:48,720
needs no work as I say I mean the

00:34:47,040 --> 00:34:55,740
stability of being able to run tez I'm

00:34:48,720 --> 00:34:58,170
sorry so we can go back yeah so pretty

00:34:55,740 --> 00:35:01,579
close to perp to perform as governor

00:34:58,170 --> 00:35:01,579
yeah it is

00:35:09,589 --> 00:35:21,029
no let me into the number 4 / versus

00:35:12,930 --> 00:35:34,319
digital with world no no he's comparing

00:35:21,029 --> 00:35:47,940
schedule with digital involved yeah wait

00:35:34,319 --> 00:35:50,369
sorry how is this okay so yeah I think

00:35:47,940 --> 00:35:53,309
you know workload automation sweet the

00:35:50,369 --> 00:35:54,900
automation side of this needs work we're

00:35:53,309 --> 00:35:56,549
not to the point where you can you know

00:35:54,900 --> 00:35:58,349
cook a build and then just set it loose

00:35:56,549 --> 00:35:59,910
and go have lunch and come back i mean

00:35:58,349 --> 00:36:01,920
it's it's going to run into stuff I also

00:35:59,910 --> 00:36:04,950
see issues with the individual test

00:36:01,920 --> 00:36:06,509
cases you know sometimes when you're

00:36:04,950 --> 00:36:08,789
running like the email fling test case

00:36:06,509 --> 00:36:10,739
one of the flings will malfunction and

00:36:08,789 --> 00:36:14,609
so you're not getting consistent fling

00:36:10,739 --> 00:36:16,319
behavior across every test and then yeah

00:36:14,609 --> 00:36:19,380
I mean there's a lot of data here to to

00:36:16,319 --> 00:36:20,460
dig into you know a lot of a lot of

00:36:19,380 --> 00:36:21,720
possible regressions I mean there's

00:36:20,460 --> 00:36:22,829
their stuff that's kind of obvious I

00:36:21,720 --> 00:36:24,930
think you know the walls the Walt

00:36:22,829 --> 00:36:27,950
feature is obviously just moving us into

00:36:24,930 --> 00:36:30,029
a more performance aggressive space and

00:36:27,950 --> 00:36:31,710
my guess is yeah the only way to fix

00:36:30,029 --> 00:36:35,039
that really is better integration with

00:36:31,710 --> 00:36:36,480
the user space and then which is

00:36:35,039 --> 00:36:38,309
sketching right so that's probably the

00:36:36,480 --> 00:36:40,950
next step is to look at integrating

00:36:38,309 --> 00:36:43,499
let's get to the feature with with

00:36:40,950 --> 00:36:45,029
schedu till well had I wish them the

00:36:43,499 --> 00:36:46,700
power numbers so I'm guessing you're

00:36:45,029 --> 00:36:50,009
taking the power numbers at the battery

00:36:46,700 --> 00:36:50,999
know so I sorry I should have spoken to

00:36:50,009 --> 00:36:54,089
that so thanks for asking that question

00:36:50,999 --> 00:36:56,849
so this is this is a measurement of just

00:36:54,089 --> 00:36:58,619
of the sock so there's some resources

00:36:56,849 --> 00:37:01,259
that are you know that are excluded from

00:36:58,619 --> 00:37:04,710
that I think like hdmi and USB power are

00:37:01,259 --> 00:37:06,569
not included the Wi-Fi I the Wi-Fi is

00:37:04,710 --> 00:37:09,180
off I don't know if there's any anything

00:37:06,569 --> 00:37:10,109
going to that but yeah it's it so it's

00:37:09,180 --> 00:37:11,970
at least a little bit better than

00:37:10,109 --> 00:37:17,089
battery power so and its measured using

00:37:11,970 --> 00:37:17,089
an arm energy probe so thanks

00:37:17,250 --> 00:37:21,300
I think the fact that like Andres

00:37:19,620 --> 00:37:22,830
pointed out that the power was so close

00:37:21,300 --> 00:37:25,320
the performance it seems like there

00:37:22,830 --> 00:37:27,810
might be an integration bug right rather

00:37:25,320 --> 00:37:32,820
than in integration issue yeah for Walt

00:37:27,810 --> 00:37:34,380
with schedule okay yeah I mean we

00:37:32,820 --> 00:37:36,870
certainly can look into that I mean it

00:37:34,380 --> 00:37:39,330
the numbers seemed believable in other

00:37:36,870 --> 00:37:41,460
test cases I mean I did double check

00:37:39,330 --> 00:37:43,680
just the basic configuration of window

00:37:41,460 --> 00:37:45,690
based you know it's it's the five

00:37:43,680 --> 00:37:47,730
windows you know max of recent and

00:37:45,690 --> 00:37:51,510
average okay so that stuff looked okay

00:37:47,730 --> 00:37:53,220
but but yeah I mean I that that test

00:37:51,510 --> 00:37:54,690
case will have to be investigated and I

00:37:53,220 --> 00:38:00,750
guess we'll find out what the what

00:37:54,690 --> 00:38:03,170
the issue is let's see so that's it are

00:38:00,750 --> 00:38:09,480
there any other questions I can answer

00:38:03,170 --> 00:38:11,370
yeah came I came a little bit late i

00:38:09,480 --> 00:38:14,070
don't know if i missed it all those

00:38:11,370 --> 00:38:17,060
tests you are doing like email flings

00:38:14,070 --> 00:38:19,620
and brother Frank are they as set up

00:38:17,060 --> 00:38:22,680
some kind of automated test a framework

00:38:19,620 --> 00:38:25,290
or I show me another hand fling every

00:38:22,680 --> 00:38:26,940
time no yeah that that was covered a

00:38:25,290 --> 00:38:29,340
little bit earlier so i'm using workload

00:38:26,940 --> 00:38:31,380
automation sweet and then there's a

00:38:29,340 --> 00:38:33,510
script in the AOSP tree called recent

00:38:31,380 --> 00:38:35,430
fling which opens up a bunch of apps and

00:38:33,510 --> 00:38:37,800
then flings amongst them in the recent

00:38:35,430 --> 00:38:41,070
screen and i've used that as a template

00:38:37,800 --> 00:38:42,930
to create several more test cases it's

00:38:41,070 --> 00:38:46,110
worth mentioning that there you know the

00:38:42,930 --> 00:38:48,810
recent fling app also relies on some non

00:38:46,110 --> 00:38:50,970
free google apps so i've modified that a

00:38:48,810 --> 00:38:53,820
little bit to launch their free

00:38:50,970 --> 00:38:58,080
equivalents from like f droid and things

00:38:53,820 --> 00:39:03,920
like that yeah so the workload

00:38:58,080 --> 00:39:03,920
automation repo that i mentioned back

00:39:06,230 --> 00:39:11,280
here so that last line you know if you

00:39:09,450 --> 00:39:15,060
fetch water flow domination there it'll

00:39:11,280 --> 00:39:17,040
have those use cases in there um and the

00:39:15,060 --> 00:39:19,320
kind of mr. pod discussion earlier on

00:39:17,040 --> 00:39:21,360
touch post being there for interactive

00:39:19,320 --> 00:39:24,810
is it also there for skid you to linear

00:39:21,360 --> 00:39:26,130
all test cases no so interactive is kind

00:39:24,810 --> 00:39:29,000
of getting an unfair advantage in terms

00:39:26,130 --> 00:39:29,000
of performance right

00:39:31,950 --> 00:39:41,700
any other questions great looks like

00:39:38,230 --> 00:39:41,700

YouTube URL: https://www.youtube.com/watch?v=Wxu5ApDRYH4


