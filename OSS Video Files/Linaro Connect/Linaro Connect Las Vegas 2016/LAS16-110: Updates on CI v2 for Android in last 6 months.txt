Title: LAS16-110: Updates on CI v2 for Android in last 6 months
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-110: Updates on CI v2 for Android in last 6 months
Speakers: Vishal Bhoj, Daniel Diaz
Date: September 26, 2016

★ Session Description ★
The session would briefly provide updates on migration of builds from android-build to ci.linaro.org. The session would also take feedback from the users on what features would improve their experience with ci.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-110
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-110/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,210 --> 00:00:15,900
welcome to the session updates on CI we

00:00:11,160 --> 00:00:19,050
do for Android yeah basically on this

00:00:15,900 --> 00:00:24,029
session we plan to cover what we've done

00:00:19,050 --> 00:00:29,369
in last six months on CI for Android as

00:00:24,029 --> 00:00:32,940
well as get some feedback on the current

00:00:29,369 --> 00:00:34,860
setup that we have this kind of service

00:00:32,940 --> 00:00:39,120
summarizes major things that we have

00:00:34,860 --> 00:00:42,020
done we've moved all the jobs to see I

00:00:39,120 --> 00:00:44,550
Leonardo torg with Jenkins top builder

00:00:42,020 --> 00:00:50,160
with this we track any of the changes

00:00:44,550 --> 00:00:53,789
that we do for the job helps us track on

00:00:50,160 --> 00:00:56,489
what change actually broke the job this

00:00:53,789 --> 00:00:59,010
second thing was to include multiple

00:00:56,489 --> 00:01:01,500
lava job submissions we had a couple of

00:00:59,010 --> 00:01:04,589
approaches on how we wanted to do that

00:01:01,500 --> 00:01:08,580
because it was different with me and

00:01:04,589 --> 00:01:10,979
bill enyart was doing it finally we went

00:01:08,580 --> 00:01:14,040
with possible lava multiple possible

00:01:10,979 --> 00:01:17,759
lava job submissions on the job

00:01:14,040 --> 00:01:21,060
submission front we've now hooked up the

00:01:17,759 --> 00:01:25,229
LCR jobs to Android q airports with

00:01:21,060 --> 00:01:28,590
which I guess it's easier for LMG to

00:01:25,229 --> 00:01:33,720
monitor the lava jobs running as well as

00:01:28,590 --> 00:01:38,909
tracking the results even the odd geyser

00:01:33,720 --> 00:01:43,409
anyways the team which is driving the QA

00:01:38,909 --> 00:01:45,210
reports they are benefiting from it the

00:01:43,409 --> 00:01:48,119
third thing which we've done is we've

00:01:45,210 --> 00:01:50,820
try to configure all the jobs to be a

00:01:48,119 --> 00:01:53,009
commit driven not just through Garrett

00:01:50,820 --> 00:01:55,229
but as well as any of the git

00:01:53,009 --> 00:01:55,590
repositories that affect that particular

00:01:55,229 --> 00:01:57,659
job

00:01:55,590 --> 00:02:00,359
like what you know we track the kernel

00:01:57,659 --> 00:02:03,439
as well as the firmware repositories so

00:02:00,359 --> 00:02:05,929
that those jobs get triggered whenever

00:02:03,439 --> 00:02:09,390
the landing team updates those

00:02:05,929 --> 00:02:14,730
repositories the last thing we've done

00:02:09,390 --> 00:02:19,410
is we've moved to and we've updated the

00:02:14,730 --> 00:02:23,010
Jenkins top builder to support custom

00:02:19,410 --> 00:02:29,700
yamel tags we had a lot of duplication

00:02:23,010 --> 00:02:31,019
of code in the job files across LCR some

00:02:29,700 --> 00:02:35,519
of the common part was getting

00:02:31,019 --> 00:02:37,110
duplicated as well as the lava jobs that

00:02:35,519 --> 00:02:42,090
get submitted were also getting

00:02:37,110 --> 00:02:45,360
duplicated what we've done there is with

00:02:42,090 --> 00:02:48,480
inclusion of custom yamel files we are

00:02:45,360 --> 00:02:50,099
able to be sure that same set of flour

00:02:48,480 --> 00:02:52,950
jobs get submitted for a particular

00:02:50,099 --> 00:02:56,220
target where for different variants of

00:02:52,950 --> 00:02:59,099
the bills like our LCR NM LCR y ki will

00:02:56,220 --> 00:03:03,269
submit the same set of jobs for better

00:02:59,099 --> 00:03:04,950
comparisons at one of the ideal one of

00:03:03,269 --> 00:03:07,459
the releases we ran into issues where

00:03:04,950 --> 00:03:12,380
few jobs were not being run by RLC are

00:03:07,459 --> 00:03:12,380
such issues won't happen now

00:03:13,740 --> 00:03:23,980
this is the broad classification of jobs

00:03:19,660 --> 00:03:29,110
that we have 15 LCR jobs around 14 our

00:03:23,980 --> 00:03:31,870
jobs there are a few 96 boats here's

00:03:29,110 --> 00:03:35,650
people's as well as chromium bills which

00:03:31,870 --> 00:03:40,090
we do for the chromium team along with

00:03:35,650 --> 00:03:42,730
that we have developer jobs based on us

00:03:40,090 --> 00:03:47,800
we master as well as Clank toolchain

00:03:42,730 --> 00:03:59,200
kind of things which we do but I'll just

00:03:47,800 --> 00:04:01,570
get to one of the links I mean for each

00:03:59,200 --> 00:04:05,050
classification we have separate views so

00:04:01,570 --> 00:04:07,480
that the specific team can view they are

00:04:05,050 --> 00:04:10,959
specific i mean the jobs relevant to

00:04:07,480 --> 00:04:14,650
them here on ser we have lists of

00:04:10,959 --> 00:04:17,049
Android M and Android n jobs but if you

00:04:14,650 --> 00:04:21,690
look at it Android M jobs have not run

00:04:17,049 --> 00:04:26,380
recently we've disabled those jobs and

00:04:21,690 --> 00:04:30,840
only have a 10 jobs running I'll just

00:04:26,380 --> 00:04:34,110
discuss a bit of end of life cycle here

00:04:30,840 --> 00:04:38,410
for Android M jobs we've disabled them

00:04:34,110 --> 00:04:42,010
but LMG may want to have bug fixes kind

00:04:38,410 --> 00:04:47,190
of things added to them which can be run

00:04:42,010 --> 00:04:50,979
after enabling those jobs but after the

00:04:47,190 --> 00:04:53,140
next Android n release will have

00:04:50,979 --> 00:04:56,110
conversed confirmation from them and

00:04:53,140 --> 00:04:58,240
then delete these old jobs that way we

00:04:56,110 --> 00:05:01,390
will do all the cleanup needed and we

00:04:58,240 --> 00:05:05,289
don't have to maintain these old jobs at

00:05:01,390 --> 00:05:07,990
the same point if you ever wish to add a

00:05:05,289 --> 00:05:11,320
new job in these the best thing to do is

00:05:07,990 --> 00:05:14,289
open a service ticket and we'll create

00:05:11,320 --> 00:05:15,380
the job for you guys rather than you

00:05:14,289 --> 00:05:19,460
starting with

00:05:15,380 --> 00:05:22,060
the gamma file which may sometime take a

00:05:19,460 --> 00:05:22,060
lot of time

00:05:23,629 --> 00:05:32,780
you can just go for the reference set CR

00:05:27,780 --> 00:05:32,780
n bill at the top

00:05:37,070 --> 00:05:45,150
just for the new guys here on the

00:05:41,820 --> 00:05:47,970
Jenkins page you generally have for each

00:05:45,150 --> 00:05:49,890
build you'll have the garret link which

00:05:47,970 --> 00:05:53,970
actually triggered that build as well as

00:05:49,890 --> 00:05:59,130
the lava job IDs which got submitted

00:05:53,970 --> 00:06:12,090
their this lamppost track which

00:05:59,130 --> 00:06:15,180
Musgraves sorry we do we do we do yeah

00:06:12,090 --> 00:06:19,410
but these jobs are broken as of today

00:06:15,180 --> 00:06:21,870
for due to integration issues and we do

00:06:19,410 --> 00:06:24,240
have a few jobs where we don't have a

00:06:21,870 --> 00:06:26,610
garret link these are weekly jobs which

00:06:24,240 --> 00:06:31,890
we've configured and they run the larger

00:06:26,610 --> 00:06:38,640
set of tests that LMG wants them to be

00:06:31,890 --> 00:06:41,010
run I mean if if a user is locked in

00:06:38,640 --> 00:06:45,210
he'll have the belt now button to build

00:06:41,010 --> 00:06:50,210
as well yeah I mean this is on the UI

00:06:45,210 --> 00:06:50,210
side for the new guys in LMT team

00:06:52,409 --> 00:07:03,059
yeah you can get back to the yeah that

00:07:00,179 --> 00:07:06,330
is kind of it from my side I let Daniel

00:07:03,059 --> 00:07:10,080
cover a bit of the Amal definition that

00:07:06,330 --> 00:07:13,019
we have for LC ours and the changes that

00:07:10,080 --> 00:07:17,429
we have done recently with custom Yama

00:07:13,019 --> 00:07:20,099
tags to use yeah as we promised on last

00:07:17,429 --> 00:07:22,769
connect we migrated everything from

00:07:20,099 --> 00:07:27,479
Android will to c idling r dot org and

00:07:22,769 --> 00:07:29,699
now all android jobs are a gamma file so

00:07:27,479 --> 00:07:32,159
basically every job that exists in c

00:07:29,699 --> 00:07:35,459
idling auditor corresponds to one yahoo

00:07:32,159 --> 00:07:39,179
file that general file may call in

00:07:35,459 --> 00:07:43,800
another set of include files yah mo

00:07:39,179 --> 00:07:46,199
files or build scripts and this is this

00:07:43,800 --> 00:07:48,689
has been done very recently because we

00:07:46,199 --> 00:07:51,569
noticed that when we moved all of those

00:07:48,689 --> 00:07:53,999
jobs to see I there was a lot of

00:07:51,569 --> 00:07:57,719
duplication are many me way too many

00:07:53,999 --> 00:08:01,319
lines of in the end within the general

00:07:57,719 --> 00:08:05,449
files that were just copying and pasting

00:08:01,319 --> 00:08:09,860
across the different job definitions so

00:08:05,449 --> 00:08:14,329
we shall what he did was create a new

00:08:09,860 --> 00:08:17,639
fine what the common set of gamma

00:08:14,329 --> 00:08:20,159
definition was and use it across all LCR

00:08:17,639 --> 00:08:23,459
builds for instance and same goes for

00:08:20,159 --> 00:08:28,649
the build script so the basic set of

00:08:23,459 --> 00:08:32,339
building the foundation so say is in the

00:08:28,649 --> 00:08:39,449
in the builders it's a common it's

00:08:32,339 --> 00:08:40,919
coming to all board and then the jam of

00:08:39,449 --> 00:08:43,349
definition will also include some

00:08:40,919 --> 00:08:48,480
specific gamma files for instance for

00:08:43,349 --> 00:08:50,750
Juno and we can see in how we have one

00:08:48,480 --> 00:08:50,750
slightly

00:08:52,790 --> 00:08:57,430
can you guys can we can you see it

00:09:02,310 --> 00:09:08,760
so this is the description of a jam oh

00:09:04,230 --> 00:09:11,090
this is a regular llamo job definition

00:09:08,760 --> 00:09:14,430
very simple we have seen in the past

00:09:11,090 --> 00:09:18,990
this definition and there's nothing new

00:09:14,430 --> 00:09:23,610
to it we can see how these are set for

00:09:18,990 --> 00:09:26,760
permissions authorization when this is

00:09:23,610 --> 00:09:29,220
going to be built well sir which is to

00:09:26,760 --> 00:09:31,770
say the triggers this is time trigger so

00:09:29,220 --> 00:09:34,950
this is a weekly build but there's also

00:09:31,770 --> 00:09:38,310
a garret trigger configuration here this

00:09:34,950 --> 00:09:39,990
means that this will that whenever there

00:09:38,310 --> 00:09:43,500
is a change in Garrard it will let

00:09:39,990 --> 00:09:47,010
Jenkins now so that it goes and have go

00:09:43,500 --> 00:09:50,190
ahead and build run a build for this

00:09:47,010 --> 00:09:53,930
that for android pad set device in our

00:09:50,190 --> 00:09:57,270
common linaro our platform manifest

00:09:53,930 --> 00:09:59,250
android build configs an LCR member high

00:09:57,270 --> 00:10:01,260
key and we're looking at the high key

00:09:59,250 --> 00:10:03,000
and configuration so whenever there is a

00:10:01,260 --> 00:10:04,830
change in there there is merged this

00:10:03,000 --> 00:10:07,040
will direct that will trigger build here

00:10:04,830 --> 00:10:07,040
and

00:10:08,600 --> 00:10:13,950
now all of the jobs which were like

00:10:12,240 --> 00:10:20,160
seven hundred lines long have been

00:10:13,950 --> 00:10:25,260
reduced to something like 776 in this

00:10:20,160 --> 00:10:28,260
case it is including the builders gamma

00:10:25,260 --> 00:10:32,190
link and the publishers that channel

00:10:28,260 --> 00:10:37,470
duct think how we can see that by the

00:10:32,190 --> 00:10:39,960
way this is the this is what you can

00:10:37,470 --> 00:10:42,720
find within Android LCR for

00:10:39,960 --> 00:10:45,900
deduplication and there's a common

00:10:42,720 --> 00:10:48,510
directory which is for ftp heike you

00:10:45,900 --> 00:10:51,600
know on anything that make them up then

00:10:48,510 --> 00:10:55,710
a specific for ftp we have the builders

00:10:51,600 --> 00:10:58,320
general inclusion which also calls

00:10:55,710 --> 00:10:59,940
builder stop sh and for hockey we also

00:10:58,320 --> 00:11:04,050
have the building for which issues for

00:10:59,940 --> 00:11:09,740
publication right for snapshots and then

00:11:04,050 --> 00:11:09,740
for junam so we can take a look at

00:11:12,499 --> 00:11:19,339
100 LTR hiking

00:11:21,020 --> 00:11:24,430
Builders gamma

00:11:26,579 --> 00:11:32,759
and as I was saying there's nothing too

00:11:29,730 --> 00:11:34,709
special here the only the special tag

00:11:32,759 --> 00:11:37,410
which is Lynn are published talking

00:11:34,709 --> 00:11:40,470
which will be used for for the snapshots

00:11:37,410 --> 00:11:42,119
then the shell instead of having all of

00:11:40,470 --> 00:11:44,970
the shell steps of all of the build

00:11:42,119 --> 00:11:46,980
steps that are shell scripts that's

00:11:44,970 --> 00:11:49,589
being called from the common builders

00:11:46,980 --> 00:11:52,379
shell and heike builders shell so this

00:11:49,589 --> 00:11:56,069
is coming again to all board and this is

00:11:52,379 --> 00:11:59,569
specific to high key and then we will

00:11:56,069 --> 00:12:02,610
call possible lava will make a change to

00:11:59,569 --> 00:12:07,589
to the possible our configuration so

00:12:02,610 --> 00:12:13,619
that we can now trigger a new set of

00:12:07,589 --> 00:12:18,739
tests this is focus one focus 2 and so

00:12:13,619 --> 00:12:18,739
on yes

00:12:29,700 --> 00:12:49,570
I don't think they're in touch possible

00:12:33,550 --> 00:12:52,170
for multiple you tryna step you can't

00:12:49,570 --> 00:12:52,170
have people

00:12:59,200 --> 00:13:05,120
the game is working engine keys so the

00:13:03,290 --> 00:13:09,730
only way would be to check post with

00:13:05,120 --> 00:13:09,730
lava to support Mexico solution

00:13:14,579 --> 00:13:17,209
that's

00:13:29,630 --> 00:13:39,600
yeah that is it what we had we want to

00:13:35,430 --> 00:13:43,589
get some feedback from the users on how

00:13:39,600 --> 00:13:52,949
we can improve see I set up for end

00:13:43,589 --> 00:13:55,769
users the problem i faced with the

00:13:52,949 --> 00:13:58,620
possibility is that when you try to then

00:13:55,769 --> 00:14:04,529
report the results the possibility

00:13:58,620 --> 00:14:06,720
report expects the source build job to

00:14:04,529 --> 00:14:08,910
finish so it publishes its artifacts if

00:14:06,720 --> 00:14:10,860
you call the post built ova as a build

00:14:08,910 --> 00:14:13,170
step then the possible lava called false

00:14:10,860 --> 00:14:15,540
build reports and then repost bill

00:14:13,170 --> 00:14:17,670
reports try to to to get the artifacts

00:14:15,540 --> 00:14:20,279
but they are not there and fails so

00:14:17,670 --> 00:14:22,110
that's that's why i am asking that the

00:14:20,279 --> 00:14:24,720
post build step should be post build

00:14:22,110 --> 00:14:28,350
because then at this step the artifacts

00:14:24,720 --> 00:14:31,649
are already published and at least i'm

00:14:28,350 --> 00:14:33,269
not i'm not aware i mean you the only

00:14:31,649 --> 00:14:36,089
thing you're interested is the manifest

00:14:33,269 --> 00:14:38,370
right yeah the other way you can get

00:14:36,089 --> 00:14:40,709
that is we would have already published

00:14:38,370 --> 00:14:45,240
them on snap shots instead of pulling it

00:14:40,709 --> 00:14:47,760
from the job itself if can pull it from

00:14:45,240 --> 00:14:49,860
snapshots but it self published yet

00:14:47,760 --> 00:14:51,930
because it's for publishers keynote

00:14:49,860 --> 00:14:55,589
publishing I mean the images get

00:14:51,930 --> 00:14:58,290
uploaded in the build step itself so

00:14:55,589 --> 00:15:00,510
they are already there in the snapshots

00:14:58,290 --> 00:15:04,640
it's just that they are not archived and

00:15:00,510 --> 00:15:04,640
attached to the job in Jenkins

00:15:06,800 --> 00:15:12,540
I've been a dad but I think that is much

00:15:09,720 --> 00:15:15,210
easier for us we can just but then

00:15:12,540 --> 00:15:17,250
whitelist the IP address I don't know if

00:15:15,210 --> 00:15:19,080
it's late if I require some kind of keys

00:15:17,250 --> 00:15:23,570
to download it or something like that

00:15:19,080 --> 00:15:23,570
most of the advocate and artifacts are

00:15:23,600 --> 00:15:32,000
publicly accessible but what we can do

00:15:27,720 --> 00:15:36,899
is white lace the IP address of the

00:15:32,000 --> 00:15:42,110
German slave I mean the machine on which

00:15:36,899 --> 00:15:42,110
the possible report runs and it the

00:15:52,520 --> 00:16:02,810
otherwise make it do you have any

00:15:58,310 --> 00:16:02,810
anything private on the manifest itself

00:16:03,140 --> 00:16:09,360
nothing private as such so if we'd not

00:16:06,360 --> 00:16:11,250
have anything private we can make the

00:16:09,360 --> 00:16:14,250
manifesto where public or we can just

00:16:11,250 --> 00:16:20,190
write this to your service and you can

00:16:14,250 --> 00:16:22,820
always download whatever you want it's

00:16:20,190 --> 00:16:22,820
easier for us

00:16:25,050 --> 00:16:32,600
at the moment i was i was using the the

00:16:28,560 --> 00:16:35,670
jenkins thing to copy the artifact yeah

00:16:32,600 --> 00:16:38,269
this way i didn't have to worry what the

00:16:35,670 --> 00:16:38,269
URL is

00:16:41,649 --> 00:16:43,649
Oh

00:16:45,550 --> 00:16:52,990
if we do that we need to evacuate this

00:16:49,420 --> 00:16:56,980
information yeah that is something in to

00:16:52,990 --> 00:17:00,480
publish the URL as a job parameter yeah

00:16:56,980 --> 00:17:00,480
that's probably doable yeah

00:17:04,270 --> 00:17:18,270
anything from LCR stuff you can do you

00:17:08,709 --> 00:17:25,180
have any requests message all no big

00:17:18,270 --> 00:17:28,270
question justice once our comment well

00:17:25,180 --> 00:17:34,750
I'm sometimes I married manually trigger

00:17:28,270 --> 00:17:37,870
the built-in I wanted to run to shower

00:17:34,750 --> 00:17:40,600
the comment like a way I maybe I want to

00:17:37,870 --> 00:17:43,480
record him little reason why I want to

00:17:40,600 --> 00:17:49,530
feel at a bill that build another four

00:17:43,480 --> 00:17:49,530
eva teeth can be oh we can do that I

00:17:50,520 --> 00:17:57,490
mean we'll take it as a request and work

00:17:53,770 --> 00:18:00,900
on that but I really from my perspective

00:17:57,490 --> 00:18:05,020
you need not have to trigger a build

00:18:00,900 --> 00:18:07,750
manually if in case a belt is has failed

00:18:05,020 --> 00:18:10,000
if a build which is triggered by Garrett

00:18:07,750 --> 00:18:12,730
and it has failed you have a REIT rigger

00:18:10,000 --> 00:18:16,390
button which will make sure that the

00:18:12,730 --> 00:18:22,180
garret ID gets attached there and any

00:18:16,390 --> 00:18:24,370
other bills you triggered I mean the

00:18:22,180 --> 00:18:27,490
only reason is you need to trigger a

00:18:24,370 --> 00:18:30,670
belt would be to run all the tests

00:18:27,490 --> 00:18:33,670
together I was discussing with my Melosh

00:18:30,670 --> 00:18:38,110
as well I mean we've covered all the git

00:18:33,670 --> 00:18:41,470
repositories which actually need to

00:18:38,110 --> 00:18:43,920
trigger the build that way you shouldn't

00:18:41,470 --> 00:18:49,000
need to actually trigger a bill manually

00:18:43,920 --> 00:18:52,150
for any reason other than the one to

00:18:49,000 --> 00:18:55,000
actually run all the tests that is the

00:18:52,150 --> 00:18:57,910
goal that we want to have no need to

00:18:55,000 --> 00:18:59,470
trigger a manual build if there are any

00:18:57,910 --> 00:19:05,820
repositories which we have not covered

00:18:59,470 --> 00:19:05,820
the as part of get sem let us know will

00:19:11,409 --> 00:19:23,239
is it is it not a wrong assumption to

00:19:16,539 --> 00:19:25,609
expect that we are not able to trigger a

00:19:23,239 --> 00:19:27,469
manual job because let's say we have a

00:19:25,609 --> 00:19:31,309
build infrastructure for whatever reason

00:19:27,469 --> 00:19:33,649
and it was because I don't know it's an

00:19:31,309 --> 00:19:35,119
infrastructure issue you you still

00:19:33,649 --> 00:19:37,729
wanted to have a bill to happen yeah

00:19:35,119 --> 00:19:39,919
that's true I mean if I get triggered

00:19:37,729 --> 00:19:41,839
well Darcy him to get billed as failed

00:19:39,919 --> 00:19:43,669
we still have a real trigger button

00:19:41,839 --> 00:19:46,219
there that will make sure the garret

00:19:43,669 --> 00:19:50,269
link so it gets associated with that to

00:19:46,219 --> 00:19:52,789
build the only reason I don't want you I

00:19:50,269 --> 00:19:54,799
would the end goal is that if we commit

00:19:52,789 --> 00:19:59,149
that all the bills are triggered based

00:19:54,799 --> 00:20:03,019
on comments that'll be the best thing we

00:19:59,149 --> 00:20:07,339
can provide to users I mean we still

00:20:03,019 --> 00:20:16,639
have supported but we need to rich

00:20:07,339 --> 00:20:19,999
figure yeah another thing could be added

00:20:16,639 --> 00:20:23,329
the to the term trend and for that

00:20:19,999 --> 00:20:28,070
beauty that is there already I mean can

00:20:23,329 --> 00:20:31,219
you open one of the big the bill trend

00:20:28,070 --> 00:20:33,429
page if you can go to LCR one of the

00:20:31,219 --> 00:20:33,429
bills

00:20:45,970 --> 00:20:52,660
ya can click the twins yeah you can

00:20:50,110 --> 00:20:56,220
actually look at the trends the bill

00:20:52,660 --> 00:20:56,220
time transfer okay

00:21:01,870 --> 00:21:10,240
is there it I don't remember the latest

00:21:05,020 --> 00:21:15,330
update about the garret field verified

00:21:10,240 --> 00:21:22,570
value trigger so if the Jenkins job is

00:21:15,330 --> 00:21:27,610
successful does a plus one I let Danny

00:21:22,570 --> 00:21:29,530
lunch that I think it is enabled for a

00:21:27,610 --> 00:21:38,470
couple of projects but I think a few

00:21:29,530 --> 00:21:41,740
others are missing still ok we just need

00:21:38,470 --> 00:21:47,230
to enable them on the projects that we

00:21:41,740 --> 00:21:49,840
want if you're talking about verified

00:21:47,230 --> 00:21:53,559
link for get Leonardo dark is that the

00:21:49,840 --> 00:21:57,850
one which you're talking about no

00:21:53,559 --> 00:22:00,130
there's a verified tag in the garret in

00:21:57,850 --> 00:22:04,030
the for example when you have a garret

00:22:00,130 --> 00:22:11,830
patch yes yes I mean the thing is we

00:22:04,030 --> 00:22:15,280
have that for android review and I mean

00:22:11,830 --> 00:22:17,899
I have to check with fatty if I think we

00:22:15,280 --> 00:22:24,690
work on

00:22:17,899 --> 00:22:26,850
yeah yeah I major changes in the config

00:22:24,690 --> 00:22:29,220
on the configuration so everything

00:22:26,850 --> 00:22:32,580
should work if it doesn't work you have

00:22:29,220 --> 00:22:36,200
to tell me yeah I mean we will resolve

00:22:32,580 --> 00:22:36,200
that changes which should be resolved

00:22:39,080 --> 00:22:50,419
quick question maybe you don't know as

00:22:42,480 --> 00:22:54,000
well support for lava v2 job submission

00:22:50,419 --> 00:22:57,799
the I'm supposed to know that but paws

00:22:54,000 --> 00:22:57,799
with lava do we support that already or

00:22:58,039 --> 00:23:04,759
if you hit up to prepare a job yeah i

00:23:01,830 --> 00:23:07,559
mean vm will file the job that we hear

00:23:04,759 --> 00:23:11,309
any substitutions because bit lover will

00:23:07,559 --> 00:23:14,789
not substitute anything there yeah yes I

00:23:11,309 --> 00:23:17,250
mean whatever we have it should work for

00:23:14,789 --> 00:23:19,440
love we do but we have not adopted it

00:23:17,250 --> 00:23:22,399
for any other jobs as of today devices

00:23:19,440 --> 00:23:22,399
yeah okay

00:23:26,750 --> 00:23:30,470
I see

00:23:34,230 --> 00:23:39,840
any other questions I think there might

00:23:37,860 --> 00:23:41,580
be an issue of a possible data because

00:23:39,840 --> 00:23:47,190
it assumes that all the templates are

00:23:41,580 --> 00:23:51,450
Jason that's probably something that we

00:23:47,190 --> 00:23:53,640
need to check make sure to which and

00:23:51,450 --> 00:24:01,919
willing to fail to parse them as JSON

00:23:53,640 --> 00:24:03,750
and the submission itself there is no

00:24:01,919 --> 00:24:06,470
change or just use of something the

00:24:03,750 --> 00:24:06,470
string to love

00:24:08,800 --> 00:24:20,670
I guess we're kind of done with this

00:24:13,650 --> 00:24:20,670
thank you guys yep thanks

00:24:28,100 --> 00:24:30,160

YouTube URL: https://www.youtube.com/watch?v=Qf2BZw_JXqY


