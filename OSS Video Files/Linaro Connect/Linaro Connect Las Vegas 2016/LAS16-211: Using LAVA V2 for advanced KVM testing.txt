Title: LAS16-211: Using LAVA V2 for advanced KVM testing
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-211: Testing LAVA V2 for advanced KVM testing
Speakers: Riku Voipio
Date: September 27, 2016

★ Session Description ★
The new LAVA dispatcher allows explicit control of starting/controlling guest. Walk through how to use V2 dispatcher for KVM and other VM testing and explore usage of libvirt etc. Share experiences in using V2 dispatcher in general. Plan support for migration and other advanced multinode tests.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-211
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-211/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,630 --> 00:00:14,700
so this session is a little bit about my

00:00:12,059 --> 00:00:19,050
experiences you in using lava v2

00:00:14,700 --> 00:00:20,750
pipeline for kvm testing and the second

00:00:19,050 --> 00:00:23,609
half is then a little bit more of

00:00:20,750 --> 00:00:28,160
planning how we should proceed forward

00:00:23,609 --> 00:00:28,160
and what people want from kvm testing

00:00:30,980 --> 00:00:38,700
the background is that lava has had the

00:00:34,770 --> 00:00:41,610
BM group feature for supporting kb m and

00:00:38,700 --> 00:00:43,860
Q mu testing you know we've also been

00:00:41,610 --> 00:00:45,989
testing gave him manually by running

00:00:43,860 --> 00:00:51,030
some commands and then doing some hacks

00:00:45,989 --> 00:00:54,180
to get into inside the DMC shell the vm

00:00:51,030 --> 00:00:57,000
groups are easy to use if they are good

00:00:54,180 --> 00:01:01,829
enough for you but they're also somewhat

00:00:57,000 --> 00:01:04,680
restricted the you can only start the vm

00:01:01,829 --> 00:01:08,540
using the commands that are in the lava

00:01:04,680 --> 00:01:12,750
definition lava type device definitions

00:01:08,540 --> 00:01:16,470
you can't use sin or libvirt or anything

00:01:12,750 --> 00:01:23,460
else to start the VMS or use some exotic

00:01:16,470 --> 00:01:25,979
options so the goat go to answer for

00:01:23,460 --> 00:01:30,229
every any problems you had with the v1

00:01:25,979 --> 00:01:33,350
love ice that just wait for lava v2 and

00:01:30,229 --> 00:01:36,659
finally we are starting to have it here

00:01:33,350 --> 00:01:39,329
the pipeline as it's also called has

00:01:36,659 --> 00:01:42,680
explicit controls for everything that's

00:01:39,329 --> 00:01:48,329
the promise not always been true but

00:01:42,680 --> 00:01:51,030
quite a bit better than v1 we in during

00:01:48,329 --> 00:01:53,759
the summer and we've been working with

00:01:51,030 --> 00:01:55,560
Neil a lot to get pipeline into the

00:01:53,759 --> 00:01:58,950
state that I can use it for give am

00:01:55,560 --> 00:02:01,079
testing and thanks to the pretty quick

00:01:58,950 --> 00:02:03,149
responses most of the bugs have been

00:02:01,079 --> 00:02:05,159
ironed out actually I don't think we

00:02:03,149 --> 00:02:07,759
have any open bugs related to kvm

00:02:05,159 --> 00:02:07,759
testing now

00:02:08,780 --> 00:02:16,069
and if you haven't heard about lava v2

00:02:14,000 --> 00:02:17,660
and you intend to use it tomorrow

00:02:16,069 --> 00:02:20,780
there's a training session I

00:02:17,660 --> 00:02:23,209
unfortunately it should have probably

00:02:20,780 --> 00:02:25,160
asked people to change the schedule the

00:02:23,209 --> 00:02:26,780
other way around so I wouldn't have to

00:02:25,160 --> 00:02:30,020
take so much time to explain about

00:02:26,780 --> 00:02:32,150
pipeline I would have really recommend

00:02:30,020 --> 00:02:42,520
their training session if you want to

00:02:32,150 --> 00:02:42,520
use lava v2 so I have a basic test hear

00:02:45,340 --> 00:02:48,340
that

00:02:50,820 --> 00:02:54,480
two more little bit

00:02:55,990 --> 00:02:58,680
wait

00:03:03,319 --> 00:03:08,719
start with the host deployment section

00:03:06,200 --> 00:03:14,060
where we butta colonel directly out of

00:03:08,719 --> 00:03:18,709
the colonel CI storage the definition

00:03:14,060 --> 00:03:21,920
here is different define for NFS booting

00:03:18,709 --> 00:03:25,909
from tftp so we don't need to install

00:03:21,920 --> 00:03:29,389
anything on the hard drive this doesn't

00:03:25,909 --> 00:03:35,540
really have any differences for typical

00:03:29,389 --> 00:03:37,669
pipeline job except for that role host

00:03:35,540 --> 00:03:40,189
part where we tell that this is actually

00:03:37,669 --> 00:03:42,769
that host is that is going to boot there

00:03:40,189 --> 00:03:46,069
are roles defined for this kind of

00:03:42,769 --> 00:03:49,870
multi-node job we have the guest job

00:03:46,069 --> 00:03:53,650
which will be connected to over ssh and

00:03:49,870 --> 00:03:57,189
we have the host job which will be a

00:03:53,650 --> 00:04:01,459
mustang and arm v8 hardware which is

00:03:57,189 --> 00:04:06,530
quite capable of testing kvm there's

00:04:01,459 --> 00:04:08,269
lots of memory and quite speedy cpu also

00:04:06,530 --> 00:04:11,799
the only enterprise hardware we have a

00:04:08,269 --> 00:04:11,799
Talib lava lab currently

00:04:24,009 --> 00:04:35,600
good question so there's a custom unit

00:04:29,840 --> 00:04:38,870
rd here and it's a very very simple

00:04:35,600 --> 00:04:42,580
busybox based in it rd which only sets

00:04:38,870 --> 00:04:47,120
up the network interface in bridge mode

00:04:42,580 --> 00:04:50,690
we want to use bridge mode in the unit

00:04:47,120 --> 00:04:53,300
rd because if we switch to the bridge

00:04:50,690 --> 00:04:55,669
mode during that when the system is

00:04:53,300 --> 00:05:00,530
already running on NFS we will lose the

00:04:55,669 --> 00:05:02,930
root root filesystem and we want to use

00:05:00,530 --> 00:05:05,750
the Brighid mode for kvm testing because

00:05:02,930 --> 00:05:09,199
the user mode networking in qm and kvm

00:05:05,750 --> 00:05:13,220
is rather slow and not very useful

00:05:09,199 --> 00:05:16,460
direct as it is also we wanted to give

00:05:13,220 --> 00:05:20,570
an direct IP for the guests which is not

00:05:16,460 --> 00:05:26,360
possible with the user mode qmo and i am

00:05:20,570 --> 00:05:28,610
a user user mode networking in qmo user

00:05:26,360 --> 00:05:32,180
user mode networking and q mu is based

00:05:28,610 --> 00:05:39,520
on slip code which is like from 90s or

00:05:32,180 --> 00:05:44,449
something have you considered adding

00:05:39,520 --> 00:05:47,240
network interface to have one interface

00:05:44,449 --> 00:05:50,800
for the first and second for just

00:05:47,240 --> 00:05:55,909
bridging here may not Holly s no just

00:05:50,800 --> 00:05:59,030
physically second so you must do to

00:05:55,909 --> 00:06:00,560
Ethernet networks basically yes I don't

00:05:59,030 --> 00:06:02,690
know actually it's the second ethernet

00:06:00,560 --> 00:06:11,539
port connected on the Mustangs on our

00:06:02,690 --> 00:06:13,849
lava lab so it's quite interesting on

00:06:11,539 --> 00:06:16,610
Mustang so there's three ethernet

00:06:13,849 --> 00:06:19,610
interfaces only wall is usable because

00:06:16,610 --> 00:06:22,849
the driver is completely dead for the

00:06:19,610 --> 00:06:28,490
two others and most Mustang coming you

00:06:22,849 --> 00:06:32,330
know 1u rack without any 90-degree angle

00:06:28,490 --> 00:06:32,880
bracket so if you want to I cut the

00:06:32,330 --> 00:06:35,220
anchor

00:06:32,880 --> 00:06:39,330
to put your PCI card in that's fun but

00:06:35,220 --> 00:06:46,380
only limitedly so there is pretty hard

00:06:39,330 --> 00:06:50,490
to do actually I have most things in

00:06:46,380 --> 00:06:52,410
Austin and have three yay gainer faces

00:06:50,490 --> 00:06:55,740
jobs all three interfaces up and running

00:06:52,410 --> 00:06:59,820
with my mind I'm not interested in

00:06:55,740 --> 00:07:01,890
anything non made life so if it's a no

00:06:59,820 --> 00:07:04,110
summer pen seeker and all that go I

00:07:01,890 --> 00:07:07,140
don't know where it's our enterprise

00:07:04,110 --> 00:07:10,500
it's our six so as far as KTM is

00:07:07,140 --> 00:07:18,500
concerned there is no nine and there's

00:07:10,500 --> 00:07:18,500
nothing else thank you

00:07:34,220 --> 00:07:39,810
yes so if you want are more interested

00:07:37,560 --> 00:07:45,990
in how it works there's the code

00:07:39,810 --> 00:07:49,440
available on github it it will use a

00:07:45,990 --> 00:08:08,940
switch route in the very end that's the

00:07:49,440 --> 00:08:11,400
build script I currently this expect for

00:08:08,940 --> 00:08:14,250
NFS to addict a direct module to be

00:08:11,400 --> 00:08:17,360
built into the kernel but it's just a

00:08:14,250 --> 00:08:19,860
few extra shell script lines here I

00:08:17,360 --> 00:08:21,570
understand that Steven Mack type there

00:08:19,860 --> 00:08:24,570
has been doing the same thing for in a

00:08:21,570 --> 00:08:27,449
drama fest tools but it didn't work for

00:08:24,570 --> 00:08:30,150
me and the electron my Festool this was

00:08:27,449 --> 00:08:38,250
just too complex and I needed to quickly

00:08:30,150 --> 00:08:43,979
write something that just works where's

00:08:38,250 --> 00:08:46,230
the other Mike yeah so I had a

00:08:43,979 --> 00:08:48,480
solution in in in it manifest tools but

00:08:46,230 --> 00:08:52,410
it wasn't clean enough to be able to

00:08:48,480 --> 00:08:55,830
push it upstream talking with Anders in

00:08:52,410 --> 00:08:58,200
LNG he ended up using your script but

00:08:55,830 --> 00:09:00,209
has just tweaked it to force load all

00:08:58,200 --> 00:09:02,459
the ethernet modules before it switches

00:09:00,209 --> 00:09:04,950
ok so there's another guy who needs the

00:09:02,459 --> 00:09:06,810
same feature yeah and that is what that

00:09:04,950 --> 00:09:09,200
seems you working absolutely flawlessly

00:09:06,810 --> 00:09:09,200
for him

00:09:16,220 --> 00:09:27,720
so there we were looking at the pipeline

00:09:21,149 --> 00:09:31,350
jump division and for the guest role we

00:09:27,720 --> 00:09:33,449
don't have any kind of boot definition

00:09:31,350 --> 00:09:35,910
in the terms of kernel or anything we

00:09:33,449 --> 00:09:39,990
just sell tell that it's an SSH based

00:09:35,910 --> 00:09:43,170
boot so it s SH s inside when it gets

00:09:39,990 --> 00:09:52,949
the lava message of the ipv4 address of

00:09:43,170 --> 00:09:56,850
the guest then we have the test

00:09:52,949 --> 00:10:00,990
definitions here's the host part of the

00:09:56,850 --> 00:10:03,630
definitions we first run just some basic

00:10:00,990 --> 00:10:06,050
smoke the smoke tests for finding out

00:10:03,630 --> 00:10:11,160
that the host has booted properly and

00:10:06,050 --> 00:10:14,220
then we run the kvm starting test

00:10:11,160 --> 00:10:18,180
definition which we give a parameters of

00:10:14,220 --> 00:10:21,420
an arm v7 cloud image so we're booting

00:10:18,180 --> 00:10:26,810
in this case an arm v7 guest on an arm

00:10:21,420 --> 00:10:29,930
v8 hosts the test definition has been

00:10:26,810 --> 00:10:33,029
parametrized so that if you put an

00:10:29,930 --> 00:10:35,610
64-bit image you will not give a kernel

00:10:33,029 --> 00:10:41,130
like in this case there is a kernel for

00:10:35,610 --> 00:10:44,699
the arm v7 case there we don't have a

00:10:41,130 --> 00:10:49,399
ufe available for arm v7 kvm booting and

00:10:44,699 --> 00:10:49,399
the u-boot work is still under progress

00:10:53,329 --> 00:11:01,980
and the role guest is the test that will

00:10:58,139 --> 00:11:04,439
be run inside the guest so we can see

00:11:01,980 --> 00:11:07,500
that it's rather neatly we just need to

00:11:04,439 --> 00:11:10,100
give similar test definitions with it's

00:11:07,500 --> 00:11:13,790
not like the old job where there were

00:11:10,100 --> 00:11:16,800
hard-coded tests to run inside the guest

00:11:13,790 --> 00:11:18,630
you can just choose any guests to any

00:11:16,800 --> 00:11:22,769
test you want to run inside and outside

00:11:18,630 --> 00:11:25,649
the kvm for example if the smoke test

00:11:22,769 --> 00:11:27,510
would give a performance number you

00:11:25,649 --> 00:11:28,019
could then compare the performance that

00:11:27,510 --> 00:11:30,809
have

00:11:28,019 --> 00:11:32,610
once inside the kvm and outside the kvm

00:11:30,809 --> 00:11:34,850
to see how much performance is being

00:11:32,610 --> 00:11:34,850
lost

00:11:43,209 --> 00:11:49,420
so here's a quick graph that tries to

00:11:47,319 --> 00:11:53,290
explain what exactly is happening in

00:11:49,420 --> 00:11:57,040
this test definition lava is the lava

00:11:53,290 --> 00:12:01,240
dispatcher here which loads the colonel

00:11:57,040 --> 00:12:03,999
and asks the Mustang to boot the Mustang

00:12:01,240 --> 00:12:06,999
will then run the host tests that were

00:12:03,999 --> 00:12:11,800
deafen defined in the test definition

00:12:06,999 --> 00:12:15,249
earlier which will then start TMO which

00:12:11,800 --> 00:12:17,470
makes unguessed available now that the

00:12:15,249 --> 00:12:20,740
guest is available we need to somehow

00:12:17,470 --> 00:12:23,259
get the ipv4 address of the guests out

00:12:20,740 --> 00:12:25,959
and the guests will tell it to that host

00:12:23,259 --> 00:12:29,319
which will pass it down to the lava

00:12:25,959 --> 00:12:32,199
dispatcher now the lava dispatcher knows

00:12:29,319 --> 00:12:39,300
where to find the guest and it will SSH

00:12:32,199 --> 00:12:39,300
inside finally to run the guest tests

00:12:46,950 --> 00:12:57,030
for for the guest deployment we first

00:12:51,600 --> 00:13:02,070
download that Colonel if it's an arm v7

00:12:57,030 --> 00:13:05,610
system or just the image for the root

00:13:02,070 --> 00:13:09,090
file system or the cloud image and boot

00:13:05,610 --> 00:13:11,520
that one directly currently the test

00:13:09,090 --> 00:13:14,850
definition will also download an FFM

00:13:11,520 --> 00:13:18,240
where but it will be probably modified

00:13:14,850 --> 00:13:22,050
to use the ed k 2 packages that are now

00:13:18,240 --> 00:13:30,090
available in debian so there will be one

00:13:22,050 --> 00:13:33,080
less moving piece in the tests to

00:13:30,090 --> 00:13:37,320
configure the guest we use a very

00:13:33,080 --> 00:13:43,410
versatile tool called cloud in it which

00:13:37,320 --> 00:13:55,650
will let us explain how to get access to

00:13:43,410 --> 00:13:58,260
that job how to configure the guest we

00:13:55,650 --> 00:14:02,310
the cloud config will create a user

00:13:58,260 --> 00:14:05,910
named linaro and add an ssh key for it

00:14:02,310 --> 00:14:08,790
it's will be the lucky text there will

00:14:05,910 --> 00:14:13,140
be super-sized overwritten with the

00:14:08,790 --> 00:14:15,780
actual ssh public key we tell it we have

00:14:13,140 --> 00:14:18,720
a pseudo access and also we give

00:14:15,780 --> 00:14:23,190
directly the same ssh key to the root

00:14:18,720 --> 00:14:25,620
user because lava will login as root I'm

00:14:23,190 --> 00:14:32,220
not sure if lava has possibility to

00:14:25,620 --> 00:14:36,210
login as user yet I can look at that I

00:14:32,220 --> 00:14:40,530
don't know I don't think it does yet if

00:14:36,210 --> 00:14:43,110
we have a yeah we can make that

00:14:40,530 --> 00:14:46,250
configurable actually probably i'm not

00:14:43,110 --> 00:14:50,600
sure if it would make it cleaner or not

00:14:46,250 --> 00:14:53,720
and there

00:14:50,600 --> 00:14:56,240
as we see the cloud config can allow you

00:14:53,720 --> 00:14:59,300
running arbitrary commands on the first

00:14:56,240 --> 00:15:02,240
boot of the image and finally it will be

00:14:59,300 --> 00:15:04,819
able to phone home it will make us some

00:15:02,240 --> 00:15:07,610
kind of HTTP Eric requested the URL

00:15:04,819 --> 00:15:10,490
where you're connecting in this job we

00:15:07,610 --> 00:15:13,040
will give a URL of the Mustang machine

00:15:10,490 --> 00:15:16,480
where we will have an HTTP server

00:15:13,040 --> 00:15:16,480
listening for the IP address

00:15:35,150 --> 00:15:40,100
for the actual command that is going to

00:15:38,330 --> 00:15:42,620
be started is included in the test

00:15:40,100 --> 00:15:45,770
definitions and the command line is

00:15:42,620 --> 00:15:49,850
getting quite weirdly already even with

00:15:45,770 --> 00:15:52,700
such simple setup so it's no wonder that

00:15:49,850 --> 00:15:54,610
people are moving to use libvirt and

00:15:52,700 --> 00:16:00,860
other tools to make these things

00:15:54,610 --> 00:16:02,900
automatic for you if you want to modify

00:16:00,860 --> 00:16:04,760
this test case this is probably that

00:16:02,900 --> 00:16:08,330
place where you're going to be working

00:16:04,760 --> 00:16:12,520
to change some kind of different command

00:16:08,330 --> 00:16:12,520
line to boot your guest image

00:16:21,930 --> 00:16:30,660
the actual images that are downloaded

00:16:25,630 --> 00:16:30,660
were given in the job definition earlier

00:16:32,820 --> 00:16:39,040
one thing about the cloud in it is that

00:16:35,680 --> 00:16:41,709
it has images that supported in all

00:16:39,040 --> 00:16:45,130
cloud images provided by various

00:16:41,709 --> 00:16:50,080
distributions Ubuntu Fedora CentOS have

00:16:45,130 --> 00:16:52,330
images with cloud in it I am at yet

00:16:50,080 --> 00:16:56,040
tested marcin's images but I think they

00:16:52,330 --> 00:16:56,040
have clouding it available also

00:17:07,900 --> 00:17:16,810
so once that a kvm has been started we

00:17:12,829 --> 00:17:23,510
need to start giving a signal to the

00:17:16,810 --> 00:17:27,290
lava system where we are and down there

00:17:23,510 --> 00:17:31,070
we once that script to start kvm has

00:17:27,290 --> 00:17:33,950
been run we first used that lava send

00:17:31,070 --> 00:17:36,920
command to give the ipv4 address we have

00:17:33,950 --> 00:17:40,490
just received from the script that has

00:17:36,920 --> 00:17:42,470
been waiting for the IP address this is

00:17:40,490 --> 00:17:46,490
one of the parts that I don't really

00:17:42,470 --> 00:17:50,300
like about this job that I have embedded

00:17:46,490 --> 00:17:52,670
this into that test definition that

00:17:50,300 --> 00:17:55,420
instead of using the inline definitions

00:17:52,670 --> 00:18:01,640
as has been recommended in the lava

00:17:55,420 --> 00:18:03,920
documentation and the problem is that i

00:18:01,640 --> 00:18:07,670
currently need a script to get the IP

00:18:03,920 --> 00:18:13,520
address and having the access to the

00:18:07,670 --> 00:18:15,890
script from in line is tricky after we

00:18:13,520 --> 00:18:18,740
have got the IPV address and sent it to

00:18:15,890 --> 00:18:22,220
dispatcher we send the lava start

00:18:18,740 --> 00:18:28,250
message which will then cause dispatcher

00:18:22,220 --> 00:18:30,860
to start the access I'm not actually

00:18:28,250 --> 00:18:37,820
completely sure what the Leveson clients

00:18:30,860 --> 00:18:40,790
is doing but that's that make sure that

00:18:37,820 --> 00:18:43,460
the underlying Mustang keeps on going

00:18:40,790 --> 00:18:45,260
and waiting until all of the various

00:18:43,460 --> 00:18:47,660
clients are finished so if you had more

00:18:45,260 --> 00:18:49,520
of these so it's basically waiting for

00:18:47,660 --> 00:18:52,310
the guests to finish because we get that

00:18:49,520 --> 00:18:56,500
a la razón client from there and get the

00:18:52,310 --> 00:18:58,520
test definition as well otherwise the

00:18:56,500 --> 00:19:01,220
your cream you will suddenly disappear

00:18:58,520 --> 00:19:03,670
because the advice underneath it has

00:19:01,220 --> 00:19:03,670
been turned off

00:19:08,429 --> 00:19:10,490
you

00:19:23,870 --> 00:19:28,760
so we have a stop guest job that is the

00:19:26,660 --> 00:19:31,010
analogous to that start one that will

00:19:28,760 --> 00:19:36,440
just give that lava soon to tell that

00:19:31,010 --> 00:19:40,160
that job has finished and if you want to

00:19:36,440 --> 00:19:42,440
learn more about the job the lava

00:19:40,160 --> 00:19:50,270
synchronization signals you have to look

00:19:42,440 --> 00:19:53,110
at to that llama documentation so a

00:19:50,270 --> 00:19:56,870
little bit about the multi-node protocol

00:19:53,110 --> 00:19:59,840
we have to define here what is the exact

00:19:56,870 --> 00:20:03,190
message that we are expecting and then

00:19:59,840 --> 00:20:08,240
we have to send it in the same format

00:20:03,190 --> 00:20:11,210
here we have told that their guest is

00:20:08,240 --> 00:20:14,179
connected via SSH once we get the ipv4

00:20:11,210 --> 00:20:20,510
address and that at that point we will

00:20:14,179 --> 00:20:22,700
install the lava overlay with SCP one of

00:20:20,510 --> 00:20:25,880
the confusing part here is that you can

00:20:22,700 --> 00:20:28,120
use the multi-node protocol bits both

00:20:25,880 --> 00:20:31,040
ended inside the test definitions

00:20:28,120 --> 00:20:34,640
whether they are in line or ones that

00:20:31,040 --> 00:20:38,660
are cloned for from get but also in the

00:20:34,640 --> 00:20:41,650
actual job definition and making it it's

00:20:38,660 --> 00:20:46,550
the semantics are not exactly the same

00:20:41,650 --> 00:20:50,200
usually they are but keeping up to date

00:20:46,550 --> 00:20:53,660
with this all is slightly complicated I

00:20:50,200 --> 00:20:55,070
don't think it's a problem because doing

00:20:53,660 --> 00:20:58,360
multi-node testing is going to be

00:20:55,070 --> 00:20:58,360
complicated regardless

00:21:03,830 --> 00:21:10,100
so once the job has finished we get that

00:21:07,490 --> 00:21:15,470
results up in the validation linner org

00:21:10,100 --> 00:21:17,419
and they there's different set of

00:21:15,470 --> 00:21:22,059
results for the guests and different set

00:21:17,419 --> 00:21:24,380
of results for the host for I think a

00:21:22,059 --> 00:21:26,659
Christopher's use cases we would like to

00:21:24,380 --> 00:21:29,600
have some kind of custom user interface

00:21:26,659 --> 00:21:37,220
that shows more directly they exactly

00:21:29,600 --> 00:21:38,960
the things that you're interested in yes

00:21:37,220 --> 00:21:58,179
of course we would need to download it

00:21:38,960 --> 00:21:58,179
from lava die see the job ID

00:22:05,260 --> 00:22:11,050
so a little bit of the experience here

00:22:07,840 --> 00:22:12,910
if you are looking at my desk job you

00:22:11,050 --> 00:22:15,100
might have noticed some odd timeout

00:22:12,910 --> 00:22:18,430
values each of the timeout values I

00:22:15,100 --> 00:22:20,560
wrote was unique so it's easy to see

00:22:18,430 --> 00:22:25,150
from the log which exact time out faith

00:22:20,560 --> 00:22:29,590
was the one that tripped over it's kind

00:22:25,150 --> 00:22:32,440
of a making a unique Yuki and the v2

00:22:29,590 --> 00:22:35,500
jobs have lots of timeouts everywhere

00:22:32,440 --> 00:22:40,440
and figuring out exactly what one is too

00:22:35,500 --> 00:22:43,180
short is sometimes annoying recoup just

00:22:40,440 --> 00:22:46,020
here just like Yvonne devoted two

00:22:43,180 --> 00:22:48,850
timeouts we just added a new page on the

00:22:46,020 --> 00:22:51,280
job when you are on the validation data

00:22:48,850 --> 00:22:53,950
Naruto org on the job you can other

00:22:51,280 --> 00:22:56,200
timings you will have a list of all the

00:22:53,950 --> 00:22:58,720
actions of the pipeline and for each

00:22:56,200 --> 00:23:01,540
actions at the time that took to run on

00:22:58,720 --> 00:23:03,670
your job so you can inspect and see if

00:23:01,540 --> 00:23:06,220
you need to change your time real time I

00:23:03,670 --> 00:23:08,170
was easily like with this okay sounds

00:23:06,220 --> 00:23:11,560
very cool does it have some kind of

00:23:08,170 --> 00:23:13,420
feature to show that say in a yellow red

00:23:11,560 --> 00:23:15,430
color when it's getting rather close to

00:23:13,420 --> 00:23:17,500
the limit and green if it seems it was

00:23:15,430 --> 00:23:20,920
well enough no there is not but it's

00:23:17,500 --> 00:23:24,760
interesting you there is a two colors

00:23:20,920 --> 00:23:28,660
red which is for the longest action yeah

00:23:24,760 --> 00:23:31,600
orange orange when it's just a box the

00:23:28,660 --> 00:23:34,090
mean time for each action but I can look

00:23:31,600 --> 00:23:38,020
at looking at the different bit is just

00:23:34,090 --> 00:23:50,320
a quick idea so that's a good idea it

00:23:38,020 --> 00:23:53,170
was an ex release so are you planning to

00:23:50,320 --> 00:23:59,890
run some usability tests on daily basis

00:23:53,170 --> 00:24:02,500
against Linux next door or something so

00:23:59,890 --> 00:24:05,050
basically I'm hoping that I can wire

00:24:02,500 --> 00:24:08,980
this into that Colonel CI so after that

00:24:05,050 --> 00:24:11,560
kvm job has the one that is included in

00:24:08,980 --> 00:24:13,900
Colonel CI has successfully booted then

00:24:11,560 --> 00:24:18,480
we can start this as a second stage job

00:24:13,900 --> 00:24:18,480
that runs more complicated test cases

00:24:21,750 --> 00:24:27,640
here we go have you tried zen with this

00:24:24,760 --> 00:24:31,530
yet or just coming at moment I've tried

00:24:27,640 --> 00:24:36,700
only kvm and recently I've been started

00:24:31,530 --> 00:24:38,980
testing with libvirt as well since there

00:24:36,700 --> 00:24:41,350
was an interesting case where people

00:24:38,980 --> 00:24:49,570
were unhappy that I upgraded liberton

00:24:41,350 --> 00:24:52,000
overlay and it didn't completely work so

00:24:49,570 --> 00:24:54,280
one of the coolest features of lava v2

00:24:52,000 --> 00:24:56,200
is that you can have test definitions

00:24:54,280 --> 00:24:58,420
integrated directly in the job

00:24:56,200 --> 00:25:02,440
definition and these are really useful

00:24:58,420 --> 00:25:06,670
in getting things quickly developed use

00:25:02,440 --> 00:25:10,060
them if you are using v2 and while I

00:25:06,670 --> 00:25:13,330
wouldn't say that it's that much better

00:25:10,060 --> 00:25:15,190
code lava dispatch or anyways the fact

00:25:13,330 --> 00:25:17,770
that it's open source and you can have a

00:25:15,190 --> 00:25:20,380
good check out of it makes things a lot

00:25:17,770 --> 00:25:28,420
easier for finding out when things don't

00:25:20,380 --> 00:25:30,220
go as expected yeah well the

00:25:28,420 --> 00:25:34,900
documentation is always a little bit

00:25:30,220 --> 00:25:37,450
lagging behind and in many cases the

00:25:34,900 --> 00:25:40,270
best way is to just try and see if it

00:25:37,450 --> 00:25:42,190
works and if it doesn't then then start

00:25:40,270 --> 00:25:43,780
screaming around rather than first

00:25:42,190 --> 00:25:46,810
asking everyone how things should be

00:25:43,780 --> 00:25:53,790
done it's easier to figure out by just

00:25:46,810 --> 00:25:55,990
trying around that's yes definitely

00:25:53,790 --> 00:26:04,570
people will tell you if you're doing

00:25:55,990 --> 00:26:08,440
things wrongly or Neil will tell so the

00:26:04,570 --> 00:26:11,020
future is to extend this to do more

00:26:08,440 --> 00:26:14,650
tools libvirt because people are

00:26:11,020 --> 00:26:17,110
depending more and more on it and we

00:26:14,650 --> 00:26:23,020
send was also mentioned that people want

00:26:17,110 --> 00:26:24,880
to see that one and kvm to is popular

00:26:23,020 --> 00:26:26,470
with the kernel developers so I guess

00:26:24,880 --> 00:26:31,270
they would like to see it tested with

00:26:26,470 --> 00:26:32,690
this as well and some kind of web

00:26:31,270 --> 00:26:36,150
front-end to make

00:26:32,690 --> 00:26:39,600
results more detestable for our kvm

00:26:36,150 --> 00:26:45,720
annex and developers the lava interfaces

00:26:39,600 --> 00:26:48,150
rather raw and the interesting test Kate

00:26:45,720 --> 00:26:52,350
cases what people actually want to run

00:26:48,150 --> 00:26:56,570
inside kvm to find out what are their

00:26:52,350 --> 00:26:56,570
test cases that you're interested in

00:26:57,740 --> 00:27:03,630
well basically anything you would expect

00:27:00,960 --> 00:27:05,490
run on the host I mean if we're talking

00:27:03,630 --> 00:27:09,450
about servers I would love to see an

00:27:05,490 --> 00:27:10,650
Apache server and then some but that /

00:27:09,450 --> 00:27:14,040
for something like that mean anything

00:27:10,650 --> 00:27:16,500
you would that would be representative

00:27:14,040 --> 00:27:21,300
of a of a normal server workload that

00:27:16,500 --> 00:27:23,310
you would deploy in a vm oh yeah as it's

00:27:21,300 --> 00:27:27,450
not a lot but that's but that's still

00:27:23,310 --> 00:27:29,280
quite a lot actually one of the examples

00:27:27,450 --> 00:27:34,830
is interesting from my perspective is

00:27:29,280 --> 00:27:36,540
the beat stress test our own code with

00:27:34,830 --> 00:27:39,600
functional tests one of those is to run

00:27:36,540 --> 00:27:41,340
the lava server unit tests inside agree

00:27:39,600 --> 00:27:43,410
me that's actually running on the

00:27:41,340 --> 00:27:46,410
dispatcher that's actually quite a heavy

00:27:43,410 --> 00:27:49,050
workload because it involves Apache it

00:27:46,410 --> 00:27:51,390
involved Watsky it falls postgres you

00:27:49,050 --> 00:27:54,270
know and then your stress testing a

00:27:51,390 --> 00:27:57,120
whole range of dependencies so there are

00:27:54,270 --> 00:27:59,250
jobs like that though because she port

00:27:57,120 --> 00:28:03,110
over and yes so if you could move your

00:27:59,250 --> 00:28:07,800
your whole lava framework into the vm

00:28:03,110 --> 00:28:09,900
yeah it's triple kazoo and it'll do what

00:28:07,800 --> 00:28:11,310
we be just testing the version that's in

00:28:09,900 --> 00:28:13,730
debian we just pull it down from there

00:28:11,310 --> 00:28:13,730
in and running

00:28:17,749 --> 00:28:22,950
exactly it would be a trivial thing to

00:28:20,909 --> 00:28:26,999
her she just port or we've currently got

00:28:22,950 --> 00:28:31,259
that just boots standard amd64 Kamini we

00:28:26,999 --> 00:28:42,059
can port it directly to the other that's

00:28:31,259 --> 00:28:44,039
right and so basically you can test any

00:28:42,059 --> 00:28:47,849
kind any test we have in QA test

00:28:44,039 --> 00:28:49,590
definitions already and if it's not in

00:28:47,849 --> 00:28:55,470
curators definitions we should add it

00:28:49,590 --> 00:28:59,099
there now that we have this freedom of

00:28:55,470 --> 00:29:01,739
doing pipeline tests I think one of the

00:28:59,099 --> 00:29:06,359
interesting test cases we want to have

00:29:01,739 --> 00:29:09,149
is migration tests I did a manual

00:29:06,359 --> 00:29:10,979
testing llevaba lava by reserving to

00:29:09,149 --> 00:29:15,710
hacking sessions and it seems to be

00:29:10,979 --> 00:29:18,450
possible to do very easily with libvirt

00:29:15,710 --> 00:29:23,970
the key challenge is to have some kind

00:29:18,450 --> 00:29:33,690
of shared storage for the images so we

00:29:23,970 --> 00:29:36,389
need a third note where we run safe one

00:29:33,690 --> 00:29:38,700
annoying thing I that or one thing that

00:29:36,389 --> 00:29:40,799
annoys me is that we only have two nos

00:29:38,700 --> 00:29:45,509
and Mustangs we have hardware that is

00:29:40,799 --> 00:29:49,080
relevant for kvm testing while we have

00:29:45,509 --> 00:29:52,049
for example many other v8 server

00:29:49,080 --> 00:29:54,919
hardware and we have no idea if kvm

00:29:52,049 --> 00:29:54,919
works with them

00:30:00,029 --> 00:30:25,419
okay cool it's a good start so obvious

00:30:23,679 --> 00:30:26,740
from our point of view I think it's

00:30:25,419 --> 00:30:28,510
great if there's more hardware but

00:30:26,740 --> 00:30:29,740
that's I mean as long as we can do

00:30:28,510 --> 00:30:31,200
something on junior Mustang that's a

00:30:29,740 --> 00:30:33,850
good start it's we don't have anything

00:30:31,200 --> 00:30:36,130
automated that that covers enough today

00:30:33,850 --> 00:30:39,070
so just doing something on the hardware

00:30:36,130 --> 00:30:41,260
we have is great I think another thing

00:30:39,070 --> 00:30:42,700
that's missing here should be when you

00:30:41,260 --> 00:30:45,639
actually run BMS right there's a

00:30:42,700 --> 00:30:49,570
multitude of configuration options SMP

00:30:45,639 --> 00:30:52,330
non SMP we've just seen issues on the on

00:30:49,570 --> 00:30:54,370
the mailing list about your running the

00:30:52,330 --> 00:30:56,470
IQ chip in users based versus running

00:30:54,370 --> 00:30:57,399
the colonel so all these kinds of of

00:30:56,470 --> 00:30:59,559
options are things that we've

00:30:57,399 --> 00:31:02,440
historically seen continuously breaking

00:30:59,559 --> 00:31:05,320
so so figuring out all the knobs you can

00:31:02,440 --> 00:31:06,880
tweak in terms of how to how to run kvm

00:31:05,320 --> 00:31:09,130
which turns into some sort of matrix and

00:31:06,880 --> 00:31:10,899
try to cover as much as that with with

00:31:09,130 --> 00:31:13,779
the simple cast test I think that's

00:31:10,899 --> 00:31:15,370
probably probably the third bullet

00:31:13,779 --> 00:31:16,510
instead of the third that's there I mean

00:31:15,370 --> 00:31:19,269
I think it's more important to get that

00:31:16,510 --> 00:31:20,559
covered than running very advanced tests

00:31:19,269 --> 00:31:22,059
inside at least at least from my point

00:31:20,559 --> 00:31:24,909
of view because that's the that's the

00:31:22,059 --> 00:31:25,899
really hard point to to do manually for

00:31:24,909 --> 00:31:28,269
forming mark when we're developing

00:31:25,899 --> 00:31:30,549
because you we can't spend six hours

00:31:28,269 --> 00:31:31,510
just you know running hundreds of

00:31:30,549 --> 00:31:38,019
scripts with all sorts of different

00:31:31,510 --> 00:31:40,630
configuration options so yeah so we need

00:31:38,019 --> 00:31:43,590
some kind of passing script to run qmo

00:31:40,630 --> 00:31:43,590
with all possible options

00:31:53,330 --> 00:31:58,320
that's one of the things why I think

00:31:55,799 --> 00:32:00,899
using libvirt is very important because

00:31:58,320 --> 00:32:08,179
that's what a lot of people will end up

00:32:00,899 --> 00:32:11,190
using and finally that we had that phone

00:32:08,179 --> 00:32:13,919
phone home feature that was used from

00:32:11,190 --> 00:32:15,840
cloud in it to talk we almost time to

00:32:13,919 --> 00:32:17,490
love a dispatcher and I've been thinking

00:32:15,840 --> 00:32:19,679
that this would be a nice feature to

00:32:17,490 --> 00:32:22,230
have directly inside lava that this is a

00:32:19,679 --> 00:32:24,630
cloud in it image please configure it

00:32:22,230 --> 00:32:26,970
like this and when it contacts you from

00:32:24,630 --> 00:32:32,580
this IP we know it's a clock cloud in it

00:32:26,970 --> 00:32:34,740
I based image if you think it's ok i

00:32:32,580 --> 00:32:37,279
will write a more articulate bug report

00:32:34,740 --> 00:32:37,279
out of this

00:32:44,650 --> 00:32:51,679
so any other questions so have you ever

00:32:50,480 --> 00:32:55,040
have you actually tried anything with

00:32:51,679 --> 00:32:57,530
Lippert the reason i ask is so usually

00:32:55,040 --> 00:33:00,919
we just run km you directly but for all

00:32:57,530 --> 00:33:03,020
my x86 BMS with kvm i used lipford and

00:33:00,919 --> 00:33:05,330
then i tried so the other day i said ok

00:33:03,020 --> 00:33:07,610
time to try just installing a recent

00:33:05,330 --> 00:33:10,370
debian a recent ubuntu just using the

00:33:07,610 --> 00:33:12,020
normal tools you know Burt install verse

00:33:10,370 --> 00:33:14,179
and stuff and then nothing worked and I

00:33:12,020 --> 00:33:16,429
just got obscure errors and segmentation

00:33:14,179 --> 00:33:17,990
faults and then I was wondering so I I

00:33:16,429 --> 00:33:21,799
heard that this all just works on a

00:33:17,990 --> 00:33:22,940
recent fedora for air 64 but maybe I'm

00:33:21,799 --> 00:33:25,850
doing something wrong or I need a

00:33:22,940 --> 00:33:29,030
specific overlay or something so it's

00:33:25,850 --> 00:33:32,510
does anybody have input on this well I

00:33:29,030 --> 00:33:35,240
tested recently ubuntu general 1604 it

00:33:32,510 --> 00:33:39,200
well it was working just fine on which

00:33:35,240 --> 00:33:48,350
distro would you latest yes okay all

00:33:39,200 --> 00:33:49,549
right okay so yeah I must I must be

00:33:48,350 --> 00:33:51,500
missing some sort of fool all right I'll

00:33:49,549 --> 00:33:56,840
get in touch with you guys when trying a

00:33:51,500 --> 00:34:01,429
good at it there's a known bug we did

00:33:56,840 --> 00:34:04,160
update the liver to 2.1 in the overlay

00:34:01,429 --> 00:34:07,640
and now it should be working and well I

00:34:04,160 --> 00:34:09,619
think they used that specific libvirt in

00:34:07,640 --> 00:34:12,790
that test they were that demo they were

00:34:09,619 --> 00:34:19,250
showing on Monday morning in there so

00:34:12,790 --> 00:34:22,190
under underneath openstax I did quickly

00:34:19,250 --> 00:34:24,320
test live with myself wait i'm not sure

00:34:22,190 --> 00:34:28,100
if the commands are exactly same you use

00:34:24,320 --> 00:34:30,889
on x86 but it did work for me and I was

00:34:28,100 --> 00:34:34,940
even managed to migrate an image from

00:34:30,889 --> 00:34:36,770
from one Muslim to another which I was

00:34:34,940 --> 00:34:40,060
not able to figure out how to do with

00:34:36,770 --> 00:34:40,060
plain qmo commands

00:34:48,579 --> 00:34:54,379
basically the idea of liberty is to have

00:34:51,710 --> 00:34:57,020
one interface on all our detectors and

00:34:54,379 --> 00:35:01,460
never mind which copy hypervisor is

00:34:57,020 --> 00:35:04,240
behind is under so you can use via site

00:35:01,460 --> 00:35:13,880
for example very install with kvm Zen

00:35:04,240 --> 00:35:16,640
hyper-v probably also even liberties it

00:35:13,880 --> 00:35:20,030
has lots of permutations you can use

00:35:16,640 --> 00:35:25,550
direct disk images images from NFS or

00:35:20,030 --> 00:35:27,470
seven so the there's probably always

00:35:25,550 --> 00:35:32,440
going to be corner cases that we don't

00:35:27,470 --> 00:35:32,440
remember to put into our test matrix

00:35:43,940 --> 00:35:52,599
so I guess that's all from this time and

00:35:47,950 --> 00:35:52,599
it does anyone have a more questions

00:35:54,640 --> 00:35:59,829
thanks everyone from the lava cave EMT

00:36:07,150 --> 00:36:09,210

YouTube URL: https://www.youtube.com/watch?v=z1OW0VQqFgA


