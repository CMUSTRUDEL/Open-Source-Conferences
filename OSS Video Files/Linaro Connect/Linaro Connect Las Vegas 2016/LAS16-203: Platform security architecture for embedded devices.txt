Title: LAS16-203: Platform security architecture for embedded devices
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-203: Platform security architecture for embedded devices
Speakers: Mark Hambleton
Date: September 27, 2016

★ Session Description ★
Heads up on what ARM are doing with the new ARMv8-M architecture from a software perspective.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-203
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-203/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,269 --> 00:00:17,369
right then good morning everyone my name

00:00:13,230 --> 00:00:20,640
is Mark Hamilton I'm the head of the

00:00:17,369 --> 00:00:23,150
system and software group the software

00:00:20,640 --> 00:00:25,350
part of the system software group in arm

00:00:23,150 --> 00:00:28,590
this is a presentation from our

00:00:25,350 --> 00:00:30,840
architecture and Technology team that

00:00:28,590 --> 00:00:33,540
I'm presenting because the guy that

00:00:30,840 --> 00:00:35,640
wrote it's not actually here what I'd

00:00:33,540 --> 00:00:38,280
like to make very clear right from the

00:00:35,640 --> 00:00:41,550
outset is what we're presenting here is

00:00:38,280 --> 00:00:44,520
what we intend to work on all right so

00:00:41,550 --> 00:00:46,590
this is an early heads up about what it

00:00:44,520 --> 00:00:49,829
is we're starting to work on starting to

00:00:46,590 --> 00:00:52,020
define we've got some early prototype

00:00:49,829 --> 00:00:55,230
work that's going on inside of em bed OS

00:00:52,020 --> 00:00:58,199
so Paul can talk to some of this as part

00:00:55,230 --> 00:00:59,699
of the presentation but you are not

00:00:58,199 --> 00:01:01,949
going to see at the end of this

00:00:59,699 --> 00:01:04,409
presentation and here this is where you

00:01:01,949 --> 00:01:07,650
can get all of the code right this is an

00:01:04,409 --> 00:01:10,080
early heads up so that you guys can give

00:01:07,650 --> 00:01:14,070
us some feedback and talk to us and are

00:01:10,080 --> 00:01:16,439
aware of what's coming ok so along with

00:01:14,070 --> 00:01:18,180
the working with the upstream rather

00:01:16,439 --> 00:01:20,009
than dumping a load of stuff on the

00:01:18,180 --> 00:01:22,970
upstream this is us helping you

00:01:20,009 --> 00:01:26,970
understand where we're going any

00:01:22,970 --> 00:01:35,100
questions on the opening statement ok

00:01:26,970 --> 00:01:48,990
now I wasn't expecting that I'll leave

00:01:35,100 --> 00:01:51,860
you a talking stick so we there's one

00:01:48,990 --> 00:01:55,290
slide in here that talks about TBSA

00:01:51,860 --> 00:01:58,409
which is the trusted based system

00:01:55,290 --> 00:02:01,680
architecture and how we're extending

00:01:58,409 --> 00:02:03,780
that to cover the cortex-m platform but

00:02:01,680 --> 00:02:06,630
there's nothing that we talk about at

00:02:03,780 --> 00:02:08,340
the moment around hardware particularly

00:02:06,630 --> 00:02:10,920
there are some there's some discussion

00:02:08,340 --> 00:02:13,170
about what we're doing with the arm v8

00:02:10,920 --> 00:02:16,260
erm architecture specifications

00:02:13,170 --> 00:02:19,650
but nothing specifically to the hardware

00:02:16,260 --> 00:02:22,110
at the moment let's run through it and I

00:02:19,650 --> 00:02:24,239
suspect this talk will take about 20

00:02:22,110 --> 00:02:27,030
minutes 20 to 25 minutes and then we've

00:02:24,239 --> 00:02:30,330
got time for questions we've got a

00:02:27,030 --> 00:02:32,720
number of armed people here that will be

00:02:30,330 --> 00:02:36,780
able to answer the questions if I can't

00:02:32,720 --> 00:02:38,040
front row ins and down here so so if

00:02:36,780 --> 00:02:39,600
there's something that's missing we can

00:02:38,040 --> 00:02:50,100
actually try and dive in after that if

00:02:39,600 --> 00:02:52,080
that's okay okay are we ready so secure

00:02:50,100 --> 00:02:54,810
systems are being deployed everywhere

00:02:52,080 --> 00:02:56,630
that's what this slide says security in

00:02:54,810 --> 00:02:59,130
the embedded space isn't a new concept

00:02:56,630 --> 00:03:02,280
there are people already deploying

00:02:59,130 --> 00:03:06,299
secure cortex-m based designs secure

00:03:02,280 --> 00:03:08,069
cortex a base designs each segment has

00:03:06,299 --> 00:03:12,569
got different requirements for security

00:03:08,069 --> 00:03:14,790
all right it's it's emerging as as an

00:03:12,569 --> 00:03:18,600
interesting topic I think mobile is the

00:03:14,790 --> 00:03:20,190
one that's that's best known because and

00:03:18,600 --> 00:03:23,970
I'm taking mine out of my pocket because

00:03:20,190 --> 00:03:26,130
it's about to ring because of the

00:03:23,970 --> 00:03:28,430
identity and the payment system and DRM

00:03:26,130 --> 00:03:31,350
and all of that sort of stuff

00:03:28,430 --> 00:03:33,870
IOT the device management so the

00:03:31,350 --> 00:03:37,290
lifecycle management of IOT devices and

00:03:33,870 --> 00:03:40,459
the identity control sort key factors in

00:03:37,290 --> 00:03:42,660
that space but then when you look at

00:03:40,459 --> 00:03:45,359
server and networking in the enterprise

00:03:42,660 --> 00:03:48,690
space you've got attestation and secure

00:03:45,359 --> 00:03:51,329
execution and then automotive robotics

00:03:48,690 --> 00:03:53,640
autonomous systems they've got new

00:03:51,329 --> 00:03:55,200
evolving and more colorful requirements

00:03:53,640 --> 00:03:58,319
for security than we've seen in any of

00:03:55,200 --> 00:04:00,900
the other spaces and that's why we're

00:03:58,319 --> 00:04:02,850
looking at what do we need to do here

00:04:00,900 --> 00:04:05,480
for the ARM architecture to make make

00:04:02,850 --> 00:04:11,959
sure that platform security is is

00:04:05,480 --> 00:04:15,359
standard common and well designed so

00:04:11,959 --> 00:04:18,780
trusts sound in cortex a it's been

00:04:15,359 --> 00:04:21,060
around for quite a while I hope

00:04:18,780 --> 00:04:23,940
everybody's already familiar with trust

00:04:21,060 --> 00:04:26,880
zone on the cortex a we

00:04:23,940 --> 00:04:31,470
a quick rundown here so you've basically

00:04:26,880 --> 00:04:34,160
got at the lowest level l3 which is the

00:04:31,470 --> 00:04:37,080
highest privilege of of any system

00:04:34,160 --> 00:04:38,760
that's where I'm trusted firmware sits

00:04:37,080 --> 00:04:40,320
at the moment so we've got the tech

00:04:38,760 --> 00:04:44,040
leader on trusted firmware if there are

00:04:40,320 --> 00:04:46,740
any questions on that one later on but

00:04:44,040 --> 00:04:49,140
you've then got the normal world which

00:04:46,740 --> 00:04:51,300
which runs our rich operating systems

00:04:49,140 --> 00:04:53,840
and our user spaces like Android or you

00:04:51,300 --> 00:04:56,910
know some of the enterprise OS distros

00:04:53,840 --> 00:04:59,520
but on the on the secure side you've

00:04:56,910 --> 00:05:01,320
then got to privilege levels secure l1

00:04:59,520 --> 00:05:04,890
which is where you'd find your secure

00:05:01,320 --> 00:05:10,620
operating systems and secure l0 where

00:05:04,890 --> 00:05:12,180
you get your trusted apps so what we're

00:05:10,620 --> 00:05:15,930
saying here is that there already a

00:05:12,180 --> 00:05:18,630
bunch of standards and a bunch of API is

00:05:15,930 --> 00:05:21,720
that exist in that in that cortex a

00:05:18,630 --> 00:05:24,000
space and a bunch of standardization

00:05:21,720 --> 00:05:28,830
that's already gone that's already

00:05:24,000 --> 00:05:31,590
happened so other interesting factors

00:05:28,830 --> 00:05:33,210
here I guess of the some of the hardware

00:05:31,590 --> 00:05:35,730
interfaces that we're already starting

00:05:33,210 --> 00:05:38,430
to define like the initial route of

00:05:35,730 --> 00:05:40,650
trust and some of the you know the

00:05:38,430 --> 00:05:46,860
security features like crypto and secure

00:05:40,650 --> 00:05:49,290
key stores so this is a model that's

00:05:46,860 --> 00:05:52,520
been around you know for many many years

00:05:49,290 --> 00:05:58,740
it's been this is the the 8a

00:05:52,520 --> 00:06:00,780
architecture model we've already got

00:05:58,740 --> 00:06:04,740
architecture specific specifications

00:06:00,780 --> 00:06:07,470
that cover a lot of the secure services

00:06:04,740 --> 00:06:10,470
like the trustee board boot requirements

00:06:07,470 --> 00:06:13,950
TV VR which defines the secure boot

00:06:10,470 --> 00:06:17,880
practices to make it compliant with the

00:06:13,950 --> 00:06:21,330
global platforms specifications we've

00:06:17,880 --> 00:06:23,130
also got the TBSA the trusted base

00:06:21,330 --> 00:06:25,850
system architecture I've now got the

00:06:23,130 --> 00:06:29,070
right words it's not what I said earlier

00:06:25,850 --> 00:06:32,910
which defines some requirements on the

00:06:29,070 --> 00:06:35,850
SOC subsystem and then we've got arm

00:06:32,910 --> 00:06:39,310
trusted firmware which is arms

00:06:35,850 --> 00:06:41,650
reference or standard firmware solution

00:06:39,310 --> 00:06:44,200
for the cortex a space which we've

00:06:41,650 --> 00:06:46,270
recently extended to cover the 32-bit

00:06:44,200 --> 00:06:49,120
world rather than just the 64-bit world

00:06:46,270 --> 00:06:57,210
I think that's all upstream as well now

00:06:49,120 --> 00:06:59,889
isn't it done yeah so that's cortex a as

00:06:57,210 --> 00:07:01,780
I'm sure you all heard in the keynote

00:06:59,889 --> 00:07:06,070
yesterday when I got to stand on stage

00:07:01,780 --> 00:07:10,150
and wave my arms around the recently

00:07:06,070 --> 00:07:12,790
released armed v8 em architecture

00:07:10,150 --> 00:07:16,870
specification now brings trustzone to

00:07:12,790 --> 00:07:18,910
the microcontroller market learning

00:07:16,870 --> 00:07:20,710
heavy learning and leaning heavily on

00:07:18,910 --> 00:07:24,760
what we learn in the cortex a space

00:07:20,710 --> 00:07:27,310
we've now got the same secure non secure

00:07:24,760 --> 00:07:35,220
partitioning in the cortex-m world that

00:07:27,310 --> 00:07:37,360
we have in the in the cortex a space so

00:07:35,220 --> 00:07:42,960
the other thing to note is that we're

00:07:37,360 --> 00:07:42,960
starting to define the TBS a4m profile

00:07:43,050 --> 00:07:47,560
it follows what we did for cortex a but

00:07:46,300 --> 00:07:50,890
obviously some of the bits that we did

00:07:47,560 --> 00:07:53,740
for cortex a aren't aren't relevant in

00:07:50,890 --> 00:07:55,810
that in the EM space it's going to

00:07:53,740 --> 00:07:59,140
specify hardware requirements for secure

00:07:55,810 --> 00:08:02,169
M profile based systems so MVM

00:07:59,140 --> 00:08:06,070
cryptographic keys trusted boot trusted

00:08:02,169 --> 00:08:08,919
timers trng so the random number

00:08:06,070 --> 00:08:11,830
generator and crypto accelerators etc

00:08:08,919 --> 00:08:14,650
etc okay so more standardization of

00:08:11,830 --> 00:08:18,220
those low-level hardware features which

00:08:14,650 --> 00:08:24,820
should make it simpler to land common

00:08:18,220 --> 00:08:28,360
software on top of okay but this is the

00:08:24,820 --> 00:08:30,340
I guess the key to the the talk we're

00:08:28,360 --> 00:08:34,570
now looking at divine defining a

00:08:30,340 --> 00:08:37,510
platform security architecture to help

00:08:34,570 --> 00:08:41,349
reduce the cost and complexity of

00:08:37,510 --> 00:08:45,100
developing software for a and M class

00:08:41,349 --> 00:08:47,860
systems so we've got a good base in the

00:08:45,100 --> 00:08:49,720
cortex a world now it's time to actually

00:08:47,860 --> 00:08:57,910
extend that to cover the cortex a and

00:08:49,720 --> 00:09:00,340
cortex and so we're also looking to

00:08:57,910 --> 00:09:03,760
reduce cost and complexity for sock

00:09:00,340 --> 00:09:05,740
designers by guiding security use cases

00:09:03,760 --> 00:09:08,680
and you know it's the decomposition of a

00:09:05,740 --> 00:09:14,110
security use case and defining some

00:09:08,680 --> 00:09:17,230
common building blocks in in TBSA so a

00:09:14,110 --> 00:09:19,960
list of requirements down the right-hand

00:09:17,230 --> 00:09:21,910
side standard high-level functional

00:09:19,960 --> 00:09:24,940
software interfaces between trusts and

00:09:21,910 --> 00:09:28,030
secure and non-secure worlds so in the

00:09:24,940 --> 00:09:29,740
cortex a world you'll have seen the SMC

00:09:28,030 --> 00:09:32,080
calling conventions which I think has

00:09:29,740 --> 00:09:35,770
mentioned on the next slide how do you

00:09:32,080 --> 00:09:38,790
do that in the cortex-m world so embed

00:09:35,770 --> 00:09:41,050
OS has got a way of doing that already

00:09:38,790 --> 00:09:42,850
embed OS isn't going to be the only

00:09:41,050 --> 00:09:44,950
operating system running on a cortex am

00:09:42,850 --> 00:09:46,840
there will be others we should make sure

00:09:44,950 --> 00:09:48,970
that we've got the same standard

00:09:46,840 --> 00:09:51,070
interfaces on that cortex-m so any

00:09:48,970 --> 00:09:56,080
operating system can talk to the secure

00:09:51,070 --> 00:09:57,820
world okay we don't want to reinvent the

00:09:56,080 --> 00:10:00,550
world we want to make sure that we are

00:09:57,820 --> 00:10:04,360
reusing standard industry api's where

00:10:00,550 --> 00:10:06,220
they make sense okay so this isn't a arm

00:10:04,360 --> 00:10:08,320
is going to define the whole of the

00:10:06,220 --> 00:10:10,180
secure world we're going to reuse what's

00:10:08,320 --> 00:10:14,890
there if it's if it's fit for purpose

00:10:10,180 --> 00:10:17,950
unsuitable define a sandbox security

00:10:14,890 --> 00:10:22,450
model there's a slide on that later so I

00:10:17,950 --> 00:10:25,000
won't go there provide reference

00:10:22,450 --> 00:10:29,140
implementations that demonstrate good

00:10:25,000 --> 00:10:30,970
practice no actually that's one of the

00:10:29,140 --> 00:10:33,790
really big successes of arm trusted

00:10:30,970 --> 00:10:35,830
firmware right it was a good set of

00:10:33,790 --> 00:10:37,320
reference code that showed you how to do

00:10:35,830 --> 00:10:40,030
things the right way

00:10:37,320 --> 00:10:41,860
which is now being used in products so

00:10:40,030 --> 00:10:43,630
that's that's a really good outcome for

00:10:41,860 --> 00:10:46,680
trusted firmware because it's become

00:10:43,630 --> 00:10:50,980
kind of the standard base for arm v8a

00:10:46,680 --> 00:10:53,340
designs okay so what we're saying here

00:10:50,980 --> 00:10:54,970
is we'll provide a set of reference

00:10:53,340 --> 00:10:57,310
implementations and we're hoping that

00:10:54,970 --> 00:10:58,300
people use them and they become embedded

00:10:57,310 --> 00:11:00,160
in

00:10:58,300 --> 00:11:02,860
the various operating systems rather

00:11:00,160 --> 00:11:09,550
than everybody having to invent the

00:11:02,860 --> 00:11:11,589
wheel again and we need to make sure

00:11:09,550 --> 00:11:14,380
that we make use of the fundamental

00:11:11,589 --> 00:11:16,570
hardware platform security functions

00:11:14,380 --> 00:11:19,750
that we're going to define in TBSA and

00:11:16,570 --> 00:11:21,370
so reference code looking into standard

00:11:19,750 --> 00:11:30,720
hardware components is a good way

00:11:21,370 --> 00:11:33,160
forward for doing that so this diagrams

00:11:30,720 --> 00:11:36,810
probably provided the most amount of

00:11:33,160 --> 00:11:39,760
entertainment for the over the last week

00:11:36,810 --> 00:11:42,640
the point of contention is is this

00:11:39,760 --> 00:11:44,500
redline so as I say this is a work in

00:11:42,640 --> 00:11:46,209
progress architecture that we're trying

00:11:44,500 --> 00:11:49,390
to do that we're in the early stages of

00:11:46,209 --> 00:11:54,310
designing the platform security

00:11:49,390 --> 00:11:56,020
interface how far does it go does it

00:11:54,310 --> 00:11:58,120
make sense for you to have a platform

00:11:56,020 --> 00:12:00,220
security and interface that actually

00:11:58,120 --> 00:12:02,470
just covers the application layer or

00:12:00,220 --> 00:12:07,320
does it make sense that it spans the OS

00:12:02,470 --> 00:12:09,970
kernel and the hypervisor well for a PSA

00:12:07,320 --> 00:12:12,520
for PSA to make sense it needs to

00:12:09,970 --> 00:12:14,230
provide a common interface for all of

00:12:12,520 --> 00:12:17,050
the layers of software to talk to the

00:12:14,230 --> 00:12:18,370
secure side otherwise you end up with

00:12:17,050 --> 00:12:22,930
fragmentation at all of the various

00:12:18,370 --> 00:12:24,700
layers so so PSA is going to cover all

00:12:22,930 --> 00:12:26,470
of those layers just to make sure that

00:12:24,700 --> 00:12:30,790
we've got that that common standard

00:12:26,470 --> 00:12:33,580
interface again providing access to

00:12:30,790 --> 00:12:36,130
standard industry api's where they exist

00:12:33,580 --> 00:12:37,600
so we're defining a platform security

00:12:36,130 --> 00:12:39,580
architecture but that doesn't mean that

00:12:37,600 --> 00:12:45,810
we throw away SMCC

00:12:39,580 --> 00:12:49,000
and PS and PSC I to many acronyms for

00:12:45,810 --> 00:12:51,520
Las Vegas morning it means that it's

00:12:49,000 --> 00:12:56,130
going to encapsulate those standard

00:12:51,520 --> 00:13:01,120
api's and use them for those platforms

00:12:56,130 --> 00:13:03,820
but we will be creating new api's where

00:13:01,120 --> 00:13:06,279
they don't exist okay just to make sure

00:13:03,820 --> 00:13:09,900
that we clean up the areas where people

00:13:06,279 --> 00:13:11,020
have had to invent their own in the past

00:13:09,900 --> 00:13:13,870
then

00:13:11,020 --> 00:13:18,070
the other contentious one is the

00:13:13,870 --> 00:13:21,550
discovery mechanism it's extremely

00:13:18,070 --> 00:13:23,980
useful if you've got a common operating

00:13:21,550 --> 00:13:28,660
system like Linux so a single binary

00:13:23,980 --> 00:13:33,160
build running its ehlmann in the open

00:13:28,660 --> 00:13:35,770
side if it can interrogate secure site

00:13:33,160 --> 00:13:39,310
to say what functions do you provide all

00:13:35,770 --> 00:13:41,800
right otherwise you end up with needing

00:13:39,310 --> 00:13:43,960
to him in bed platform knowledge into

00:13:41,800 --> 00:13:47,980
into the open side which isn't such a

00:13:43,960 --> 00:13:50,680
good thing to do does a discovery

00:13:47,980 --> 00:13:54,550
mechanism make sense in the m-class

00:13:50,680 --> 00:13:57,130
world where you've got an artist that

00:13:54,550 --> 00:13:58,870
might be you know compiled and hard

00:13:57,130 --> 00:14:03,310
linked with everything that's that's

00:13:58,870 --> 00:14:05,140
embedded in that platform it's one of

00:14:03,310 --> 00:14:07,480
the areas that we're discussing and

00:14:05,140 --> 00:14:08,830
debating internally there are people

00:14:07,480 --> 00:14:11,050
like me that think it's a really good

00:14:08,830 --> 00:14:12,550
idea if it's simple enough and

00:14:11,050 --> 00:14:14,470
lightweight enough there are other

00:14:12,550 --> 00:14:16,720
people that think that it's unnecessary

00:14:14,470 --> 00:14:18,910
and it's overhead and it's one of the

00:14:16,720 --> 00:14:21,340
areas that we are going to want feedback

00:14:18,910 --> 00:14:24,340
from the OS communities and from the

00:14:21,340 --> 00:14:27,010
platform platform vendors to tell us

00:14:24,340 --> 00:14:29,530
what they think right it could be that

00:14:27,010 --> 00:14:31,450
we spend our time designing an API that

00:14:29,530 --> 00:14:33,760
nobody ever uses and doesn't care about

00:14:31,450 --> 00:14:37,870
and people don't care about that's it

00:14:33,760 --> 00:14:39,730
yeah yeah good talking to my friend from

00:14:37,870 --> 00:14:41,680
Zephyr over here because it's it's

00:14:39,730 --> 00:14:43,690
difficult to know in an in a

00:14:41,680 --> 00:14:45,760
microcontroller world whether you need

00:14:43,690 --> 00:14:47,680
that or not whether there will be that

00:14:45,760 --> 00:14:50,950
logical separation between the secure

00:14:47,680 --> 00:14:53,530
and the open side so that's why that's

00:14:50,950 --> 00:14:57,510
why we're here today to say this is what

00:14:53,530 --> 00:14:57,510
we're thinking about come and talk to us

00:14:57,930 --> 00:15:06,970
you'll notice that we've got a an array

00:15:02,440 --> 00:15:08,980
of security functions over here more

00:15:06,970 --> 00:15:10,870
complex the platform the more of these

00:15:08,980 --> 00:15:13,000
little boxes that we'll see the more

00:15:10,870 --> 00:15:15,420
important it is to have that discovery

00:15:13,000 --> 00:15:18,220
API because not all vendors will

00:15:15,420 --> 00:15:20,950
implement all of those all of those

00:15:18,220 --> 00:15:24,070
secure services and they certainly may

00:15:20,950 --> 00:15:25,570
not implement them all in hardware so

00:15:24,070 --> 00:15:27,880
could be that there is a different way

00:15:25,570 --> 00:15:30,370
of accessing those secure functions

00:15:27,880 --> 00:15:41,740
depending on the platform that your that

00:15:30,370 --> 00:15:45,100
you're running on sandboxes then so it's

00:15:41,740 --> 00:15:47,740
going to use a sandbox security model by

00:15:45,100 --> 00:15:49,660
that we mean that each security function

00:15:47,740 --> 00:15:52,500
can be placed in its own Hardware

00:15:49,660 --> 00:15:55,450
enforce partition this is a function of

00:15:52,500 --> 00:15:57,340
v8f this is oh but a feature that you

00:15:55,450 --> 00:15:59,200
get with the ATM I believe I think it's

00:15:57,340 --> 00:16:02,010
not the earlier ones don't support the

00:15:59,200 --> 00:16:04,180
earlier versions don't support this I

00:16:02,010 --> 00:16:06,280
don't understand what the next bullet

00:16:04,180 --> 00:16:09,340
means because this these slides hit my

00:16:06,280 --> 00:16:11,320
inbox and and I forgot to ask I don't

00:16:09,340 --> 00:16:13,960
quite know what reducing the trusted

00:16:11,320 --> 00:16:14,950
compute engine actually means I'm not

00:16:13,960 --> 00:16:21,400
sure if there's anybody in the audience

00:16:14,950 --> 00:16:23,860
that does Dan James Paul no but I do

00:16:21,400 --> 00:16:27,030
know that it it basically means that if

00:16:23,860 --> 00:16:29,830
you've got a security function sandbox

00:16:27,030 --> 00:16:32,110
there's no way of those functions

00:16:29,830 --> 00:16:33,970
actually interfering with the behavior

00:16:32,110 --> 00:16:37,300
of the other functions in there that a

00:16:33,970 --> 00:16:40,960
implemented secure side so everything

00:16:37,300 --> 00:16:44,890
can be mutually untrusted to enable you

00:16:40,960 --> 00:16:47,410
to stew source secure functions from

00:16:44,890 --> 00:16:51,510
different vendors or to implement secure

00:16:47,410 --> 00:16:54,570
functions differently Brown per platform

00:16:51,510 --> 00:16:58,240
so we generically refer to this as a

00:16:54,570 --> 00:17:01,300
secure partition manager which with

00:16:58,240 --> 00:17:05,020
embed is is implemented using the embed

00:17:01,300 --> 00:17:08,230
Mike reviser yeah that's good oh yes it

00:17:05,020 --> 00:17:10,630
says it down below so in embed OS that

00:17:08,230 --> 00:17:12,280
is the embed micro visor but we're

00:17:10,630 --> 00:17:15,250
actually looking at how we can genera

00:17:12,280 --> 00:17:19,140
size that functionality so that we can

00:17:15,250 --> 00:17:22,089
provide that secure partitioning manager

00:17:19,140 --> 00:17:24,579
secure side enabling other operating

00:17:22,089 --> 00:17:27,490
systems other than embed to make use of

00:17:24,579 --> 00:17:29,290
that functionality again that's

00:17:27,490 --> 00:17:30,730
something that we're starting to look at

00:17:29,290 --> 00:17:34,290
at the moment rather than B bits

00:17:30,730 --> 00:17:34,290
something that we can deliver now

00:17:35,590 --> 00:17:40,510
in the a profile world this is

00:17:38,779 --> 00:17:42,409
absolutely something that could be

00:17:40,510 --> 00:17:45,200
implemented by a trusted execution

00:17:42,409 --> 00:17:55,580
environment like opti and something that

00:17:45,200 --> 00:17:57,590
we do now and then I guess this is the

00:17:55,580 --> 00:18:00,830
this is the one that's obvious for a a

00:17:57,590 --> 00:18:06,110
class core and it's less obvious for an

00:18:00,830 --> 00:18:07,639
m-class core and and so as I say please

00:18:06,110 --> 00:18:11,600
give us some commentary and some

00:18:07,639 --> 00:18:14,360
feedback on this we're not intending to

00:18:11,600 --> 00:18:18,679
replace or redefine any of the existing

00:18:14,360 --> 00:18:22,519
secure interfaces what the discovery

00:18:18,679 --> 00:18:26,120
mechanism is is a way of describing to

00:18:22,519 --> 00:18:27,740
the rich OS world the capabilities of

00:18:26,120 --> 00:18:32,120
the platform and how to talk to those

00:18:27,740 --> 00:18:35,980
secure functions we think that the

00:18:32,120 --> 00:18:38,929
discovery mechanism will enable a

00:18:35,980 --> 00:18:41,919
uniform way to discover platform

00:18:38,929 --> 00:18:43,880
security functions describing

00:18:41,919 --> 00:18:48,559
capabilities weight and ways of

00:18:43,880 --> 00:18:50,269
accessing them right it will also

00:18:48,559 --> 00:18:52,220
provide a framework for you to add new

00:18:50,269 --> 00:18:58,639
functions that people haven't even

00:18:52,220 --> 00:19:01,070
thought of we do expect that the use of

00:18:58,639 --> 00:19:03,289
the discovery mechanism and the higher

00:19:01,070 --> 00:19:05,600
level PSA profiles will be segment

00:19:03,289 --> 00:19:06,769
specific because it's it's obvious that

00:19:05,600 --> 00:19:09,440
some of the things on a mobile phone

00:19:06,769 --> 00:19:11,720
aren't applicable to a server some of

00:19:09,440 --> 00:19:13,370
the things on a very small connected

00:19:11,720 --> 00:19:16,610
embedded device aren't necessarily

00:19:13,370 --> 00:19:19,100
applicable to a mobile phone right so it

00:19:16,610 --> 00:19:22,419
does need to be flexible extensible you

00:19:19,100 --> 00:19:27,320
know pick the right subsets for you and

00:19:22,419 --> 00:19:30,740
again we're still not completely

00:19:27,320 --> 00:19:33,169
convinced in arm that the need for the

00:19:30,740 --> 00:19:35,630
discovery API exists in the cortex-m

00:19:33,169 --> 00:19:38,630
world we think it definitely needs to be

00:19:35,630 --> 00:19:42,460
there for the cortex a but we're open to

00:19:38,630 --> 00:19:42,460
commentary from from anybody

00:19:54,240 --> 00:20:00,309
it's possible it really depends in the

00:19:57,250 --> 00:20:02,440
cortex-m world whether you've got a a

00:20:00,309 --> 00:20:09,370
trusted world and an untrusted world

00:20:02,440 --> 00:20:11,590
that are not built at the same time it's

00:20:09,370 --> 00:20:14,740
possible but then when you look at the

00:20:11,590 --> 00:20:17,559
capabilities of a cortex-m now and some

00:20:14,740 --> 00:20:19,830
of the they're not all cortex-m zeros

00:20:17,559 --> 00:20:23,550
where they're tiny energy sipping things

00:20:19,830 --> 00:20:27,100
yeah you can get you can run a an m7 a

00:20:23,550 --> 00:20:28,870
rather a large frequency range and you

00:20:27,100 --> 00:20:31,090
you suddenly get to the position where

00:20:28,870 --> 00:20:34,420
you'll where you might have more of a

00:20:31,090 --> 00:20:35,920
rich OS environment so so I wouldn't

00:20:34,420 --> 00:20:38,710
write it off until you've actually run

00:20:35,920 --> 00:20:40,929
to the bottom of it yeah see I'm

00:20:38,710 --> 00:20:47,320
defending my assertion in arm again yeah

00:20:40,929 --> 00:20:49,570
yeah yeah no it's good I do like to see

00:20:47,320 --> 00:20:51,610
the linearity oh and the embed team

00:20:49,570 --> 00:20:53,650
aligning on that on their view on that

00:20:51,610 --> 00:20:55,240
one it would just be the system guts

00:20:53,650 --> 00:21:10,260
awesome software guys that on the other

00:20:55,240 --> 00:21:12,100
side so just as a quick intro because

00:21:10,260 --> 00:21:16,840
marked at the start of the presentation

00:21:12,100 --> 00:21:19,929
I'll do just one slide I work arm as

00:21:16,840 --> 00:21:22,179
well I used to be the lead developer for

00:21:19,929 --> 00:21:24,540
what was called polar as a cell which is

00:21:22,179 --> 00:21:27,490
now called MIT less as it's part of our

00:21:24,540 --> 00:21:34,840
and I'm responsible for the device side

00:21:27,490 --> 00:21:37,750
security within embed within and as part

00:21:34,840 --> 00:21:39,970
of that we are well heavily entrenched

00:21:37,750 --> 00:21:42,730
in the discussions around PSA because it

00:21:39,970 --> 00:21:44,530
affects both the implementation of embed

00:21:42,730 --> 00:21:46,390
as we're doing it but also about our

00:21:44,530 --> 00:21:50,320
future thoughts on how we can secure it

00:21:46,390 --> 00:21:51,970
because within the embed world and any

00:21:50,320 --> 00:21:53,980
other operating system that will run on

00:21:51,970 --> 00:21:55,900
cortex-m we'll need to think about how

00:21:53,980 --> 00:21:58,660
to separate out the secure parts now

00:21:55,900 --> 00:22:02,290
that we have capabilities like trust own

00:21:58,660 --> 00:22:03,010
em that gives us the ability to do

00:22:02,290 --> 00:22:06,790
hardware and

00:22:03,010 --> 00:22:10,750
or separation but even more we can do

00:22:06,790 --> 00:22:13,150
similar separation already on a v7m and

00:22:10,750 --> 00:22:15,250
we're doing that already with the

00:22:13,150 --> 00:22:17,740
implementation of the embed micro visor

00:22:15,250 --> 00:22:19,600
that provides that box security

00:22:17,740 --> 00:22:23,680
protection between these different

00:22:19,600 --> 00:22:25,810
systems so as an illustration we'll look

00:22:23,680 --> 00:22:29,740
at ember TLS how that would evolve

00:22:25,810 --> 00:22:32,080
within embed OS as part of implementing

00:22:29,740 --> 00:22:36,430
the PSA there so if you look at enmity

00:22:32,080 --> 00:22:38,440
LS it split into three parts I've

00:22:36,430 --> 00:22:40,240
mentioned the two most important parts

00:22:38,440 --> 00:22:42,040
here amber TLS which is the TLS

00:22:40,240 --> 00:22:45,820
libraries or really the protocol library

00:22:42,040 --> 00:22:48,850
and ambit crypto which performs all the

00:22:45,820 --> 00:22:51,160
software and hardware accelerated crypto

00:22:48,850 --> 00:22:55,030
operations all the symmetric asymmetric

00:22:51,160 --> 00:22:57,040
hashing random number generation either

00:22:55,030 --> 00:22:59,050
accelerated so using hardware

00:22:57,040 --> 00:23:01,540
capabilities already in the system or

00:22:59,050 --> 00:23:03,730
non accelerated in software form where

00:23:01,540 --> 00:23:06,670
they're not available because especially

00:23:03,730 --> 00:23:08,890
in the EM world in the cortex-m world

00:23:06,670 --> 00:23:11,590
there's a lot of systems where hardware

00:23:08,890 --> 00:23:13,600
capabilities for crypto are not

00:23:11,590 --> 00:23:16,450
available where they are practically

00:23:13,600 --> 00:23:21,070
always available in the v8 in the in the

00:23:16,450 --> 00:23:25,690
a world and well that's something we

00:23:21,070 --> 00:23:29,020
need to handle so as Mark was showing we

00:23:25,690 --> 00:23:31,360
have a secure partition manager it's

00:23:29,020 --> 00:23:32,980
very very smooth it says embed micro

00:23:31,360 --> 00:23:34,900
visor so that's our implementation that

00:23:32,980 --> 00:23:37,990
takes care of separating all the boxes

00:23:34,900 --> 00:23:40,500
we have MPLS currently under normal

00:23:37,990 --> 00:23:44,140
world so part of the operating system

00:23:40,500 --> 00:23:51,700
base capabilities and what would happen

00:23:44,140 --> 00:23:53,770
with the PSA with using PSA is we want

00:23:51,700 --> 00:23:57,250
to reduce the attack surface of enmity

00:23:53,770 --> 00:23:59,380
or less because we want to reduce the

00:23:57,250 --> 00:24:02,820
the untrusted code size to make sure

00:23:59,380 --> 00:24:04,960
that even if a hacker can go into the

00:24:02,820 --> 00:24:07,660
untrusted world or the normal world

00:24:04,960 --> 00:24:10,780
they can't fact all the secure functions

00:24:07,660 --> 00:24:12,100
such as identity key encryption keys

00:24:10,780 --> 00:24:15,250
that are used for the for the

00:24:12,100 --> 00:24:17,500
transportation so what would happen

00:24:15,250 --> 00:24:20,050
is to reduce the attack surface we would

00:24:17,500 --> 00:24:22,870
move the crypto part which is actually

00:24:20,050 --> 00:24:26,130
the only part that operates on critical

00:24:22,870 --> 00:24:28,600
privileged data into the secure world

00:24:26,130 --> 00:24:31,600
make that into a separate box if

00:24:28,600 --> 00:24:33,550
possible so give that a separate box to

00:24:31,600 --> 00:24:36,490
reduce the attack surface and have a

00:24:33,550 --> 00:24:38,230
very specific generic API in front of

00:24:36,490 --> 00:24:40,480
that because that generic API isn't

00:24:38,230 --> 00:24:42,460
necessarily and the Crypt are related

00:24:40,480 --> 00:24:44,200
that will be part of what we're

00:24:42,460 --> 00:24:45,580
discussing as part of the interface is

00:24:44,200 --> 00:24:52,660
going into the secure world it'll part

00:24:45,580 --> 00:24:54,400
of that PSA interface and that isn't as

00:24:52,660 --> 00:24:56,680
simple as it looks because it's not just

00:24:54,400 --> 00:24:58,990
moving that library over because

00:24:56,680 --> 00:25:00,640
normally in every crypto library or

00:24:58,990 --> 00:25:02,200
using any crypto library you as an

00:25:00,640 --> 00:25:04,420
application are actually constantly

00:25:02,200 --> 00:25:06,670
storing those keys and moving them back

00:25:04,420 --> 00:25:08,440
and forth into the crypto functions it

00:25:06,670 --> 00:25:09,850
would mean that you would need to move

00:25:08,440 --> 00:25:12,010
to a system where you're just using

00:25:09,850 --> 00:25:14,260
references to keys instead of actually

00:25:12,010 --> 00:25:16,840
having keys and key context and all

00:25:14,260 --> 00:25:20,610
those references translate into your

00:25:16,840 --> 00:25:22,780
keys on the on the trusted side but the

00:25:20,610 --> 00:25:25,810
advantage of this is that the TLS

00:25:22,780 --> 00:25:29,530
library which is big is the protocol

00:25:25,810 --> 00:25:32,350
stack which might have issues amitiel is

00:25:29,530 --> 00:25:36,610
very well tested so security issues

00:25:32,350 --> 00:25:38,890
there are very very rare but in this

00:25:36,610 --> 00:25:40,720
case at least reduces it that it can at

00:25:38,890 --> 00:25:44,950
that point if there's an issue that it

00:25:40,720 --> 00:25:46,630
can leak security keys to the system and

00:25:44,950 --> 00:25:49,990
not just in that stack because

00:25:46,630 --> 00:25:53,890
especially in embedded systems there's a

00:25:49,990 --> 00:25:55,660
lot of million life--and driver code in

00:25:53,890 --> 00:25:57,970
the in the Bluetooth stacks and in the

00:25:55,660 --> 00:26:01,600
wireless stacks that are very very hard

00:25:57,970 --> 00:26:04,330
to to get to the level where are they

00:26:01,600 --> 00:26:06,580
they can't be interfered with so by

00:26:04,330 --> 00:26:09,490
making this move we can at least make

00:26:06,580 --> 00:26:13,090
sure that there's no impact on the rest

00:26:09,490 --> 00:26:17,160
of the codebase and that's that is the

00:26:13,090 --> 00:26:17,160
purpose of the PSA so

00:26:24,650 --> 00:26:29,760
so I just won just quick question

00:26:27,210 --> 00:26:31,350
looking at your diagram there is is it

00:26:29,760 --> 00:26:33,330
your intention to move all the crypto or

00:26:31,350 --> 00:26:34,830
just the public key stuff because I'm

00:26:33,330 --> 00:26:43,770
concerned about record layer performance

00:26:34,830 --> 00:26:46,230
are you gonna be doing so the intention

00:26:43,770 --> 00:26:48,660
is to move all the crypto to do to the

00:26:46,230 --> 00:26:50,040
secure side but in most cases this is

00:26:48,660 --> 00:26:51,240
only an upgrade and instead of a

00:26:50,040 --> 00:26:53,250
downgrade because the hardware

00:26:51,240 --> 00:26:55,530
acceleration state still takes part it

00:26:53,250 --> 00:26:57,290
still takes place on the critter side

00:26:55,530 --> 00:26:59,370
but it does mean that if to be

00:26:57,290 --> 00:27:02,730
performance effective you should be

00:26:59,370 --> 00:27:04,410
looking forward to doing large blob

00:27:02,730 --> 00:27:06,330
encryption instead of per block

00:27:04,410 --> 00:27:08,160
encryption on the software side but it's

00:27:06,330 --> 00:27:11,610
also an interface kind of kind of issue

00:27:08,160 --> 00:27:13,350
that you need to solve but yes it does

00:27:11,610 --> 00:27:15,300
impact performance and you can still do

00:27:13,350 --> 00:27:16,860
it on the software side of course but if

00:27:15,300 --> 00:27:19,200
you want to do it securely and you don't

00:27:16,860 --> 00:27:23,429
want that key exposed you'll have to do

00:27:19,200 --> 00:27:24,960
it on the secure side otherwise the key

00:27:23,429 --> 00:27:27,990
will always be exposed in your normal

00:27:24,960 --> 00:27:29,970
world code so it depends on the security

00:27:27,990 --> 00:27:32,730
level that you want to tie into that

00:27:29,970 --> 00:27:35,730
symmetric code and in most cases it's

00:27:32,730 --> 00:27:37,890
your protection key for your tunnel to

00:27:35,730 --> 00:27:40,110
the cloud you probably want to protect

00:27:37,890 --> 00:27:41,100
that from the attacker side because

00:27:40,110 --> 00:27:43,620
otherwise you can't guarantee the

00:27:41,100 --> 00:27:45,179
integrity of your data that you're

00:27:43,620 --> 00:27:48,929
pushing into the clouds and the

00:27:45,179 --> 00:27:52,850
integrity of the little data is vital

00:27:48,929 --> 00:27:52,850
for the integrity of the big data

00:27:58,220 --> 00:28:09,100
and that's what we want to talk to

00:27:59,899 --> 00:28:13,370
people this is actually the last slide

00:28:09,100 --> 00:28:17,179
as I said this is just a statement of

00:28:13,370 --> 00:28:18,620
intent at the moment so we're gonna win

00:28:17,179 --> 00:28:20,899
bill we're gonna build on existing

00:28:18,620 --> 00:28:26,200
security standards I'm hoping that came

00:28:20,899 --> 00:28:26,200
through clearly through through the talk

00:28:26,590 --> 00:28:31,309
really to make software developers lives

00:28:29,990 --> 00:28:32,509
easier that's really what we're trying

00:28:31,309 --> 00:28:36,200
to do here

00:28:32,509 --> 00:28:39,139
it intends to prevent future software

00:28:36,200 --> 00:28:41,720
fragmentation builds on existing

00:28:39,139 --> 00:28:44,120
standards and if we proven by reference

00:28:41,720 --> 00:28:45,889
implementations so the first reference

00:28:44,120 --> 00:28:49,789
implementation that we'll do is with M

00:28:45,889 --> 00:28:51,529
Beto s I'm expecting the reason why we

00:28:49,789 --> 00:28:53,690
sort of here is we want to talk to

00:28:51,529 --> 00:28:56,149
Zephyr as well because we want this to

00:28:53,690 --> 00:29:00,950
be a collaborative thing with with

00:28:56,149 --> 00:29:03,769
Linares and our alight why am I telling

00:29:00,950 --> 00:29:06,080
you this because at the moment we don't

00:29:03,769 --> 00:29:07,700
have anything to show you about what it

00:29:06,080 --> 00:29:11,269
looks like other than the pictures that

00:29:07,700 --> 00:29:13,549
we've got on the screen it's to give you

00:29:11,269 --> 00:29:17,090
a heads up nobody likes being surprised

00:29:13,549 --> 00:29:18,769
by changes by standardization certainly

00:29:17,090 --> 00:29:23,419
about standardization that they've not

00:29:18,769 --> 00:29:26,000
been involved in forming okay we do want

00:29:23,419 --> 00:29:27,320
feedback this isn't a we're gonna go

00:29:26,000 --> 00:29:28,970
away and do this and then we're going to

00:29:27,320 --> 00:29:30,320
drop it on you but we told you that we

00:29:28,970 --> 00:29:35,389
were going to do that this is what we

00:29:30,320 --> 00:29:36,919
want feedback and actually we want to

00:29:35,389 --> 00:29:39,139
make sure that we align on a common

00:29:36,919 --> 00:29:40,820
solution rather than having lots of

00:29:39,139 --> 00:29:44,139
people going and doing their own thing

00:29:40,820 --> 00:29:46,460
and then having that that big fragmented

00:29:44,139 --> 00:29:53,419
place that we have to go in defragment

00:29:46,460 --> 00:29:56,269
in the future so if you do want to have

00:29:53,419 --> 00:29:58,669
a dialogue about PSA I really do

00:29:56,269 --> 00:30:00,799
encourage you to get and talk to Andrew

00:29:58,669 --> 00:30:02,389
toca who's not actually here at connect

00:30:00,799 --> 00:30:05,779
he's been to many of connects most

00:30:02,389 --> 00:30:07,159
people are familiar with him he's one of

00:30:05,779 --> 00:30:09,980
our systems architects in our

00:30:07,159 --> 00:30:12,289
architecture and technology group if you

00:30:09,980 --> 00:30:14,510
don't know how to contact Andrew

00:30:12,289 --> 00:30:17,120
you probably know how to contact me or

00:30:14,510 --> 00:30:19,280
contact day for somebody in llanera but

00:30:17,120 --> 00:30:23,419
we can get you into contact with andrew

00:30:19,280 --> 00:30:24,679
toki but yeah please do you get involved

00:30:23,419 --> 00:30:27,650
if you're interested if you've got

00:30:24,679 --> 00:30:32,419
opinions on this and you know help us

00:30:27,650 --> 00:30:38,000
understand I was right it was the last

00:30:32,419 --> 00:30:44,840
slide any questions any comments any

00:30:38,000 --> 00:30:52,820
feedback okay

00:30:44,840 --> 00:30:54,289
talking stick to that direction first so

00:30:52,820 --> 00:30:59,539
on slide eight if you could go back for

00:30:54,289 --> 00:31:02,120
a bit slide 8 yes the question I've got

00:30:59,539 --> 00:31:03,409
is that you were commenting on the the

00:31:02,120 --> 00:31:05,390
type of the API is whether that was

00:31:03,409 --> 00:31:06,980
between you know app to app sorry could

00:31:05,390 --> 00:31:08,840
you hope the mic could be sure

00:31:06,980 --> 00:31:10,880
yeah it's that better yeah so you're

00:31:08,840 --> 00:31:12,380
talking about the type of API is would

00:31:10,880 --> 00:31:14,090
you go between you know the kernels

00:31:12,380 --> 00:31:16,730
would you go between the apps would you

00:31:14,090 --> 00:31:18,650
do both one model that we've been

00:31:16,730 --> 00:31:20,780
playing with of course is that I think

00:31:18,650 --> 00:31:23,480
you and I have talked about this is that

00:31:20,780 --> 00:31:26,409
some of us might define our secure

00:31:23,480 --> 00:31:29,240
environment as a different OS kernel

00:31:26,409 --> 00:31:30,980
within what you know it's typically

00:31:29,240 --> 00:31:33,950
labeled the non secure world and your

00:31:30,980 --> 00:31:36,049
slides and so using a secure hypervisor

00:31:33,950 --> 00:31:37,970
we can kind of do the same thing and

00:31:36,049 --> 00:31:39,650
Excise trust don't from some of our

00:31:37,970 --> 00:31:42,770
designs not that we don't all love trust

00:31:39,650 --> 00:31:44,929
own but the the question would be if

00:31:42,770 --> 00:31:47,809
we're if you're making these common API

00:31:44,929 --> 00:31:50,120
is could you include that you know

00:31:47,809 --> 00:31:52,039
within the non secure world between two

00:31:50,120 --> 00:31:58,010
OS kernels or two apps in the non secure

00:31:52,039 --> 00:32:01,490
world part of the API definition so

00:31:58,010 --> 00:32:03,590
that's a good one I don't see why not

00:32:01,490 --> 00:32:07,700
it's certainly something that should be

00:32:03,590 --> 00:32:09,260
discussed with the architecture guys the

00:32:07,700 --> 00:32:11,510
the PSA is going to be trusts own

00:32:09,260 --> 00:32:14,330
focused so if you're if you're trying to

00:32:11,510 --> 00:32:18,409
do this using hypervisors and staying in

00:32:14,330 --> 00:32:20,840
the non secure world that's an

00:32:18,409 --> 00:32:24,280
interesting interesting topic so you're

00:32:20,840 --> 00:32:26,950
probably using HVC calls rather than SMC

00:32:24,280 --> 00:32:29,410
is to get to your secure operating

00:32:26,950 --> 00:32:33,000
system yeah so that's actually still

00:32:29,410 --> 00:32:36,130
covered by the SMC calling conventions

00:32:33,000 --> 00:32:40,990
standard so I don't see why it couldn't

00:32:36,130 --> 00:32:42,640
be part of that that model but we don't

00:32:40,990 --> 00:32:43,840
really have to dig into it with you to

00:32:42,640 --> 00:32:46,090
make sure that we understand what you're

00:32:43,840 --> 00:32:48,010
doing but you know as long as you're

00:32:46,090 --> 00:32:52,470
sticking with the SMC calling

00:32:48,010 --> 00:32:55,300
conventions standard I don't see why not

00:32:52,470 --> 00:32:57,460
because it's just a matter of somebody

00:32:55,300 --> 00:32:59,880
trapping it at a higher level and

00:32:57,460 --> 00:33:02,320
passing it on to a different executive

00:32:59,880 --> 00:33:12,910
Dan's looking at me so hopefully that's

00:33:02,320 --> 00:33:15,190
what I said is right thanks for that

00:33:12,910 --> 00:33:17,320
mark yeah I think I think what you said

00:33:15,190 --> 00:33:19,450
is right you did the SMC hopefully thing

00:33:17,320 --> 00:33:21,970
see thing is just a conduit so if there

00:33:19,450 --> 00:33:23,320
is an SMC a car then extending it HPC

00:33:21,970 --> 00:33:26,820
should be so straightforward I mean it

00:33:23,320 --> 00:33:30,550
I mean I've not been involved in the

00:33:26,820 --> 00:33:35,260
creation of all this but it seems to me

00:33:30,550 --> 00:33:37,630
some of this stuff doesn't less icky

00:33:35,260 --> 00:33:39,100
discovery API itself need to be your

00:33:37,630 --> 00:33:41,890
just knowing what is available on the

00:33:39,100 --> 00:33:44,380
device you know maybe some bits and

00:33:41,890 --> 00:33:46,420
pieces it does make sense but maybe some

00:33:44,380 --> 00:33:47,620
of it actually you don't even need to go

00:33:46,420 --> 00:33:54,400
into the skill world just to find out

00:33:47,620 --> 00:33:55,810
what's there possibly whilst you were

00:33:54,400 --> 00:33:57,130
presenting I had a number of thoughts as

00:33:55,810 --> 00:33:59,140
to going off and so none of these have

00:33:57,130 --> 00:34:03,300
been structured right but one of the

00:33:59,140 --> 00:34:05,470
things that you know being an

00:34:03,300 --> 00:34:10,870
inexperience of certification freaks

00:34:05,470 --> 00:34:13,890
right and to David's point a discovery

00:34:10,870 --> 00:34:16,120
mechanism in many cases may be essential

00:34:13,890 --> 00:34:17,380
in order to just validate that the

00:34:16,120 --> 00:34:19,360
interface on the other side is what you

00:34:17,380 --> 00:34:21,130
think it is not because you're

00:34:19,360 --> 00:34:25,419
discovering it's it you're actually

00:34:21,130 --> 00:34:26,470
confirming or validating yeah and so and

00:34:25,419 --> 00:34:27,429
I was starting to freak out until it

00:34:26,470 --> 00:34:28,750
caught on to the fact that this is

00:34:27,429 --> 00:34:33,240
really an interface for expressing

00:34:28,750 --> 00:34:33,240
interfaces rather than an interface and

00:34:33,540 --> 00:34:38,630
the the use cases where the

00:34:37,040 --> 00:34:40,669
vacation and the attempts to sort of

00:34:38,630 --> 00:34:45,740
provide some kind of proved ability or

00:34:40,669 --> 00:34:48,560
some quasi prove ability of security

00:34:45,740 --> 00:34:50,870
assertions seems to I mean we have to

00:34:48,560 --> 00:34:52,940
sort of constrain as much as possible

00:34:50,870 --> 00:34:54,590
the interface and we you know that's

00:34:52,940 --> 00:34:56,780
where all this talk about generic

00:34:54,590 --> 00:34:58,550
standards just making it low-hanging

00:34:56,780 --> 00:35:00,470
fruit for software developers is kind of

00:34:58,550 --> 00:35:02,300
gonna run up against the the need to

00:35:00,470 --> 00:35:06,020
theme things very specifically for them

00:35:02,300 --> 00:35:09,410
for the vertical and so where I'm going

00:35:06,020 --> 00:35:12,730
with this I guess is have you been

00:35:09,410 --> 00:35:15,470
talking to people who deal with

00:35:12,730 --> 00:35:18,290
certification and security proof ability

00:35:15,470 --> 00:35:20,240
to sort of pin down what you should and

00:35:18,290 --> 00:35:22,670
should not do in defining this interface

00:35:20,240 --> 00:35:25,610
so that things solutions built on top of

00:35:22,670 --> 00:35:27,200
it will you know not be a square peg in

00:35:25,610 --> 00:35:30,310
a round hole when it comes time to do

00:35:27,200 --> 00:35:30,310
these certifications

00:35:46,350 --> 00:35:52,660
hi I really appreciated the presentation

00:35:50,320 --> 00:35:54,880
here in the early access reason being

00:35:52,660 --> 00:35:58,870
I'm from a small company in Anchorage

00:35:54,880 --> 00:36:01,420
Alaska who has been doing effectively

00:35:58,870 --> 00:36:03,940
something like was seen in the keynote

00:36:01,420 --> 00:36:06,700
here yesterday for about the last five

00:36:03,940 --> 00:36:10,300
years and the biggest issue we have is

00:36:06,700 --> 00:36:12,010
how can we absolutely guarantee what

00:36:10,300 --> 00:36:14,470
we're getting from the sensor device is

00:36:12,010 --> 00:36:18,160
actually what the sensor device is

00:36:14,470 --> 00:36:20,500
sensing and I don't care if anybody sees

00:36:18,160 --> 00:36:22,840
it but I can't let them jam it I can't

00:36:20,500 --> 00:36:26,260
let them change it I need to know that

00:36:22,840 --> 00:36:28,240
I'm getting what's there and I actually

00:36:26,260 --> 00:36:30,040
have made up kind of a list from the

00:36:28,240 --> 00:36:31,870
user perspective this may be the wrong

00:36:30,040 --> 00:36:33,370
place for this conversation feel free to

00:36:31,870 --> 00:36:36,160
just completely shut me down if that's

00:36:33,370 --> 00:36:37,780
the case one things we've been looking

00:36:36,160 --> 00:36:41,440
at is the blockchain because the

00:36:37,780 --> 00:36:43,390
blockchain is openly secure okay

00:36:41,440 --> 00:36:44,980
it's completely open as to how it's

00:36:43,390 --> 00:36:47,700
implementing the code that makes it go

00:36:44,980 --> 00:36:50,410
but you've got your secure data and your

00:36:47,700 --> 00:36:52,120
discoverable data and it's a very pretty

00:36:50,410 --> 00:36:54,670
kind of a system it is all for a lot

00:36:52,120 --> 00:36:56,200
more than just micro payments okay micro

00:36:54,670 --> 00:36:57,790
payments is where people think about it

00:36:56,200 --> 00:36:59,710
and so we've got to make sure we're

00:36:57,790 --> 00:37:02,740
supporting blockchain to the deepest

00:36:59,710 --> 00:37:04,450
level the trust all the way down having

00:37:02,740 --> 00:37:07,330
a very similar conversation over dinner

00:37:04,450 --> 00:37:12,970
last night so that's why Katie smiling

00:37:07,330 --> 00:37:15,400
at me cool thank you also in the

00:37:12,970 --> 00:37:20,230
industrial world which is where we're

00:37:15,400 --> 00:37:23,560
deploying systems they are living in a

00:37:20,230 --> 00:37:26,650
different world their PLC's look like

00:37:23,560 --> 00:37:27,940
our Arduino is now okay maybe sort of

00:37:26,650 --> 00:37:30,670
the Arduino Tsar actually more powerful

00:37:27,940 --> 00:37:33,430
and what's happening in computing is

00:37:30,670 --> 00:37:35,170
you're you're determining the new

00:37:33,430 --> 00:37:36,640
generation of what they're getting

00:37:35,170 --> 00:37:39,490
abusing but there's going to be a really

00:37:36,640 --> 00:37:42,010
hard transition for them from what

00:37:39,490 --> 00:37:45,190
they've been used to to now because

00:37:42,010 --> 00:37:46,630
there's concerns in this world that we

00:37:45,190 --> 00:37:49,090
don't have that they do

00:37:46,630 --> 00:37:52,330
for instance they want something to last

00:37:49,090 --> 00:37:54,340
for 30 to 60 years okay you put it in

00:37:52,330 --> 00:37:55,599
and they better keep running and if it's

00:37:54,340 --> 00:37:57,400
got a problem in a

00:37:55,599 --> 00:38:01,839
better fix itself or be better scream

00:37:57,400 --> 00:38:03,819
for help okay that's actually the world

00:38:01,839 --> 00:38:09,279
I started off in before I started doing

00:38:03,819 --> 00:38:11,140
this the next thing and if it needs a

00:38:09,279 --> 00:38:13,239
reboot it needs to figure that out and

00:38:11,140 --> 00:38:14,859
do it by itself and it needs to warn

00:38:13,239 --> 00:38:16,930
that that's what happened that's why you

00:38:14,859 --> 00:38:21,279
get some weirdness to work out that

00:38:16,930 --> 00:38:24,549
every bit came back up again uh-huh and

00:38:21,279 --> 00:38:28,059
I didn't send false information because

00:38:24,549 --> 00:38:30,369
of an initialization state then the next

00:38:28,059 --> 00:38:32,890
thing is it's unacceptable to do

00:38:30,369 --> 00:38:35,680
Wireless only Wireless is cool Wireless

00:38:32,890 --> 00:38:39,729
is sexy but wired has advantage in that

00:38:35,680 --> 00:38:42,549
it can't be jammed okay and you can

00:38:39,729 --> 00:38:44,410
supply power you don't have to deal with

00:38:42,549 --> 00:38:46,259
maintenance of batteries or what happens

00:38:44,410 --> 00:38:50,799
to the system when the battery gets low

00:38:46,259 --> 00:38:52,509
okay so every device that's built should

00:38:50,799 --> 00:38:55,329
include an Ethernet port if at all

00:38:52,509 --> 00:38:57,430
possible or something reasonably

00:38:55,329 --> 00:38:59,619
equivalent there should be nothing

00:38:57,430 --> 00:39:02,079
that's wireless only wireless wonderful

00:38:59,619 --> 00:39:04,239
option lots of flavors of wireless great

00:39:02,079 --> 00:39:08,950
world were moving into but don't delete

00:39:04,239 --> 00:39:10,960
the wired and then yeah I think that was

00:39:08,950 --> 00:39:12,819
that was pretty much what I was hoping

00:39:10,960 --> 00:39:14,799
you would address in some way and that's

00:39:12,819 --> 00:39:16,269
at a higher level than this but I also

00:39:14,799 --> 00:39:18,910
understand that the devil is in the

00:39:16,269 --> 00:39:20,710
details and if you get the details wrong

00:39:18,910 --> 00:39:23,410
which is why you're here thank you

00:39:20,710 --> 00:39:34,839
then when it gets to the level that I'm

00:39:23,410 --> 00:39:37,049
trying to use that I can't okay anybody

00:39:34,839 --> 00:39:37,049
else

00:39:41,499 --> 00:39:46,699
so on a related note already before we

00:39:44,989 --> 00:39:49,690
break up now I'm not questioning I'm

00:39:46,699 --> 00:39:52,219
putting a statement on a related note

00:39:49,690 --> 00:39:54,890
for people interested in - in the

00:39:52,219 --> 00:39:56,599
cortex-m security partitioning and how

00:39:54,890 --> 00:40:00,890
what we're going to do and what we can

00:39:56,599 --> 00:40:04,219
can do in kondu tomorrow at 12:10 I'll

00:40:00,890 --> 00:40:07,640
be hosting security mini conference on

00:40:04,219 --> 00:40:09,410
cortex-m so in ballroom B if I'm not

00:40:07,640 --> 00:40:10,069
mistaken so if you're interested in that

00:40:09,410 --> 00:40:14,109
discussion

00:40:10,069 --> 00:40:16,969
please join ok good

00:40:14,109 --> 00:40:28,009
well thanks we've got nothing else

00:40:16,969 --> 00:40:30,380
we'll finish Oh nearly got there very

00:40:28,009 --> 00:40:32,709
useful and informative presentation but

00:40:30,380 --> 00:40:35,299
it's really difficult to have a

00:40:32,709 --> 00:40:38,209
effective security discussion without

00:40:35,299 --> 00:40:40,339
discussing the attack vectors and the

00:40:38,209 --> 00:40:42,709
various ways to compromise different

00:40:40,339 --> 00:40:53,900
parts of the system you didn't really

00:40:42,709 --> 00:40:56,719
touch on that so yes you're correct you

00:40:53,900 --> 00:40:58,910
can't really put out a good security

00:40:56,719 --> 00:41:00,259
profile without having a threat matrix

00:40:58,910 --> 00:41:02,630
and a threat environment that you're

00:41:00,259 --> 00:41:05,150
trying to protect against I guess with

00:41:02,630 --> 00:41:07,309
the with the PSA we're extending what

00:41:05,150 --> 00:41:11,479
we're already having and seeing as a

00:41:07,309 --> 00:41:14,539
necessary part for well most if not all

00:41:11,479 --> 00:41:16,789
I owe t an embedded device to have in

00:41:14,539 --> 00:41:18,949
order to survive in the world that we're

00:41:16,789 --> 00:41:22,519
going to go to with billions and

00:41:18,949 --> 00:41:24,349
billions of devices there it doesn't

00:41:22,519 --> 00:41:25,969
mean that each and every system needs to

00:41:24,349 --> 00:41:33,109
have everything in hardware or not

00:41:25,969 --> 00:41:36,109
because that's a cost decision based on

00:41:33,109 --> 00:41:38,180
cost of what the cost

00:41:36,109 --> 00:41:39,739
again that's a use case scenario where

00:41:38,180 --> 00:41:41,690
you need to decide that threat scenario

00:41:39,739 --> 00:41:43,940
but what we're trying to do with PSA is

00:41:41,690 --> 00:41:45,619
at least provide a generic interface for

00:41:43,940 --> 00:41:48,619
all the different parts that you might

00:41:45,619 --> 00:41:50,180
need to be able to make more secure in

00:41:48,619 --> 00:41:52,219
either secure world or hardware

00:41:50,180 --> 00:41:53,500
accelerated world at least have that

00:41:52,219 --> 00:41:55,000
available for

00:41:53,500 --> 00:41:57,640
each and every use case that we can now

00:41:55,000 --> 00:42:00,190
do in a generic sense and there will

00:41:57,640 --> 00:42:01,990
always be cases where this won't be

00:42:00,190 --> 00:42:04,990
enough I mean especially at government

00:42:01,990 --> 00:42:07,810
government grades and higher and this is

00:42:04,990 --> 00:42:11,680
not enough because the different attack

00:42:07,810 --> 00:42:13,690
profiles that state state attackers

00:42:11,680 --> 00:42:15,490
could use are way different than what we

00:42:13,690 --> 00:42:20,140
are protecting against in a generic

00:42:15,490 --> 00:42:24,670
world of IOT in embedded spaces but yes

00:42:20,140 --> 00:42:27,010
a specific concern is that with IOT the

00:42:24,670 --> 00:42:29,860
devices are subject to both network

00:42:27,010 --> 00:42:34,210
attack as well as physical attack yeah

00:42:29,860 --> 00:42:36,310
they could be yeah but the level of

00:42:34,210 --> 00:42:38,650
physical attack that they can be

00:42:36,310 --> 00:42:41,770
subjected to depends a lot on the actor

00:42:38,650 --> 00:42:43,810
that can do that and the importance of

00:42:41,770 --> 00:42:45,940
that depends a lot on what the ports of

00:42:43,810 --> 00:42:47,860
the data in the individual devices and

00:42:45,940 --> 00:42:50,950
in most cases that individual device

00:42:47,860 --> 00:42:52,540
doesn't contain very important data it's

00:42:50,950 --> 00:42:55,060
just a combination of all the data that

00:42:52,540 --> 00:42:58,180
becomes important actually I have to

00:42:55,060 --> 00:43:00,040
respectfully disagree because in

00:42:58,180 --> 00:43:03,130
addition to the function of the device

00:43:00,040 --> 00:43:06,180
it's pretty much by definition also an

00:43:03,130 --> 00:43:08,560
entry point into your network sure that

00:43:06,180 --> 00:43:11,710
that's the case and that will always be

00:43:08,560 --> 00:43:16,330
the case you can never you can't prevent

00:43:11,710 --> 00:43:18,340
that but it's a question of cost nobody

00:43:16,330 --> 00:43:21,880
wants to pay example dollars for an IT

00:43:18,340 --> 00:43:24,250
device hey if it's a question of cost in

00:43:21,880 --> 00:43:37,780
which purchase price is one element of

00:43:24,250 --> 00:43:40,290
the cost security those are mechanisms

00:43:37,780 --> 00:43:42,220
that underpin building good security

00:43:40,290 --> 00:43:44,740
it's a good point and a good

00:43:42,220 --> 00:43:46,990
conversation I'd like to hear is there

00:43:44,740 --> 00:43:48,340
is there a more general is that what the

00:43:46,990 --> 00:43:51,130
conversation tomorrow is about it's a

00:43:48,340 --> 00:43:56,290
more general kind of around security the

00:43:51,130 --> 00:43:59,400
attack vectors and discussion good

00:43:56,290 --> 00:44:03,450
things like attack vectors we see a

00:43:59,400 --> 00:44:03,450
number of aspects in that world

00:44:05,410 --> 00:44:11,440
maybe I'm just piling on needlessly but

00:44:07,450 --> 00:44:12,910
am I correct and understanding that this

00:44:11,440 --> 00:44:14,109
is really just a logical layer that

00:44:12,910 --> 00:44:17,260
you're I mean all the underlying

00:44:14,109 --> 00:44:20,339
hardware guarantees or lack thereof a

00:44:17,260 --> 00:44:23,770
kind of orthogonal and that this is a

00:44:20,339 --> 00:44:27,070
this is an attempt to not reduce the

00:44:23,770 --> 00:44:29,260
underlying hardware security by by

00:44:27,070 --> 00:44:31,960
providing a robust as possible logical

00:44:29,260 --> 00:44:37,470
layer on top of it yes so the PSA is the

00:44:31,960 --> 00:44:41,260
logical layer on top TBSA is intended to

00:44:37,470 --> 00:44:42,849
specify the minimum logical set of

00:44:41,260 --> 00:44:46,359
hardware features that you need for a

00:44:42,849 --> 00:44:47,829
secure system so TBSA is is to try and

00:44:46,359 --> 00:44:52,000
make sure we've got the right components

00:44:47,829 --> 00:44:56,490
in Hardware PSA is that is the logical

00:44:52,000 --> 00:44:59,170
interface to enable you to use them okay

00:44:56,490 --> 00:45:02,760
any chance of them being proposed to

00:44:59,170 --> 00:45:02,760
some kind of Common Criteria profile

00:45:09,960 --> 00:45:17,319
yeah I didn't mean to give you word

00:45:12,819 --> 00:45:19,690
salad but you're referring to some kind

00:45:17,319 --> 00:45:21,010
of baseline set of assumptions about a

00:45:19,690 --> 00:45:23,770
hardware architecture that would meet

00:45:21,010 --> 00:45:26,339
some level and I hate this word but

00:45:23,770 --> 00:45:28,810
let's stick with it right security level

00:45:26,339 --> 00:45:31,240
would you consider proposing that as a

00:45:28,810 --> 00:45:33,099
template for a kind of Common Criteria

00:45:31,240 --> 00:45:35,160
profile that allows the device to

00:45:33,099 --> 00:45:37,990
essentially be certified against it

00:45:35,160 --> 00:45:39,579
that's an interesting it's an

00:45:37,990 --> 00:45:41,260
interesting proposal otherwise if it

00:45:39,579 --> 00:45:43,240
seems that it's just a it's a list of

00:45:41,260 --> 00:45:45,430
aspirational statements thou shalt thou

00:45:43,240 --> 00:45:48,099
should these things but that's

00:45:45,430 --> 00:45:51,280
definitely interesting that's worth

00:45:48,099 --> 00:45:53,410
worth us talking with Andrew I don't

00:45:51,280 --> 00:45:56,170
know what his plans are in that in that

00:45:53,410 --> 00:45:58,270
area at the moment at the beginning but

00:45:56,170 --> 00:46:01,050
if that's useful then that's good

00:45:58,270 --> 00:46:01,050
certainly be considered

00:46:06,339 --> 00:46:09,519
anything else

00:46:10,950 --> 00:46:14,480
okay thanks very much

00:46:23,730 --> 00:46:25,790

YouTube URL: https://www.youtube.com/watch?v=mg_NyAguLmQ


