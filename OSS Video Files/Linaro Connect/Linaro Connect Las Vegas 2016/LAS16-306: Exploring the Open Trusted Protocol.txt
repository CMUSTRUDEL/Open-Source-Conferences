Title: LAS16-306: Exploring the Open Trusted Protocol
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-306: Exploring the Open Trusted Protocol
Speakers: Marc Canel
Date: September 28, 2016

★ Session Description ★
Interconnected systems require trust between devices and service providers. To deal with this problem, several companies (ARM, Solacia, Symantec, Intercede) collaborated on the Open Trust Protocol (OTrP), which combines a secure architecture with trusted code management, using technologies proven in large scale banking and sensitive data applications on mass-market devices such as smartphones and tablets.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-306
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-306/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:00,190 --> 00:00:13,230
[Music]

00:00:08,780 --> 00:00:16,080
everybody hear me good thank you my name

00:00:13,230 --> 00:00:19,560
is mark canal with arm and I'm working

00:00:16,080 --> 00:00:22,590
on the security systems at arm I've been

00:00:19,560 --> 00:00:24,660
at arm for almost three years and you

00:00:22,590 --> 00:00:26,640
know working on security systems is a

00:00:24,660 --> 00:00:29,760
fancy way to say i'm working on trust

00:00:26,640 --> 00:00:32,279
down and the trazodone ecosystem before

00:00:29,760 --> 00:00:35,340
arm i was at qualcomm i spent 18 years

00:00:32,279 --> 00:00:38,760
at qualcomm working on software various

00:00:35,340 --> 00:00:40,469
software projects and during the last

00:00:38,760 --> 00:00:43,559
three to four years i actually also

00:00:40,469 --> 00:00:45,690
worked on security at qualcomm most

00:00:43,559 --> 00:00:47,670
notably trust on and the treasure liquid

00:00:45,690 --> 00:00:51,829
system so be working on trazodone for

00:00:47,670 --> 00:00:56,399
the past six years roughly before

00:00:51,829 --> 00:00:59,399
qualcomm i was at IBM so i want to talk

00:00:56,399 --> 00:01:02,730
to you about this open trust protocol

00:00:59,399 --> 00:01:06,240
that was the blood between several

00:01:02,730 --> 00:01:09,780
companies and you see the names of

00:01:06,240 --> 00:01:12,689
people from selassie on which is a

00:01:09,780 --> 00:01:17,610
korean card company but they also a te

00:01:12,689 --> 00:01:19,820
developer you see names from symantec

00:01:17,610 --> 00:01:22,710
that you probably recognize they are a

00:01:19,820 --> 00:01:25,320
big certificate authority vendor and

00:01:22,710 --> 00:01:28,259
then finally from intercede in to see it

00:01:25,320 --> 00:01:32,549
is a company which has some identity

00:01:28,259 --> 00:01:36,450
solutions and they also have a trusted

00:01:32,549 --> 00:01:39,750
application manager so all these

00:01:36,450 --> 00:01:41,549
companies got together about two and a

00:01:39,750 --> 00:01:44,640
half years ago and decided to put

00:01:41,549 --> 00:01:47,840
together this open trust protocol and we

00:01:44,640 --> 00:01:50,070
actually have a first iteration of the

00:01:47,840 --> 00:01:57,439
standards document and i'm going to take

00:01:50,070 --> 00:02:01,079
you through why we did it what we did so

00:01:57,439 --> 00:02:04,680
they the four companies that listed so

00:02:01,079 --> 00:02:07,020
far arm salacia somatic I need to see

00:02:04,680 --> 00:02:09,600
where the founding companies of this

00:02:07,020 --> 00:02:16,500
project like a founding member

00:02:09,600 --> 00:02:21,930
and we recognize about two and a half

00:02:16,500 --> 00:02:26,780
years ago a common problem around how

00:02:21,930 --> 00:02:31,110
does a application manager access the

00:02:26,780 --> 00:02:34,380
applications within a thousand within

00:02:31,110 --> 00:02:39,560
mobile devices we had actually all

00:02:34,380 --> 00:02:43,650
worked in previous i would say projects

00:02:39,560 --> 00:02:45,450
are you 20 grp when i was at qualcomm i

00:02:43,650 --> 00:02:47,580
was already working with semantics and

00:02:45,450 --> 00:02:52,800
intercede and of course we are at that

00:02:47,580 --> 00:02:54,960
time and so we realize after the initial

00:02:52,800 --> 00:02:57,990
classroom projects of four or five years

00:02:54,960 --> 00:03:00,680
ago that we actually did need to do

00:02:57,990 --> 00:03:05,090
something we needed to create a

00:03:00,680 --> 00:03:10,770
messaging protocol that would be a

00:03:05,090 --> 00:03:15,030
standard to build trust between devices

00:03:10,770 --> 00:03:18,300
and connected devices and back-end

00:03:15,030 --> 00:03:23,330
system and we needed to have a common

00:03:18,300 --> 00:03:27,450
mechanisms to do application management

00:03:23,330 --> 00:03:31,530
in at razon we want to of course do all

00:03:27,450 --> 00:03:34,410
that stuff over the air so we didn't

00:03:31,530 --> 00:03:36,570
want to reinvent security mechanisms and

00:03:34,410 --> 00:03:39,000
concepts we want to just define a

00:03:36,570 --> 00:03:43,020
messaging protocol and we wanted to

00:03:39,000 --> 00:03:45,540
reuse existing standards and so we are

00:03:43,020 --> 00:03:47,340
you know use the public key

00:03:45,540 --> 00:03:50,400
infrastructure which is a well-known

00:03:47,340 --> 00:03:54,660
security mechanism and we wanted to make

00:03:50,400 --> 00:03:57,210
sure that the i would say the portable

00:03:54,660 --> 00:04:00,540
that we feel that creates an end-to-end

00:03:57,210 --> 00:04:04,860
security chain from the firmware of the

00:04:00,540 --> 00:04:09,180
mobile device tu no te e to the trusted

00:04:04,860 --> 00:04:09,630
application manager and to the TSM and

00:04:09,180 --> 00:04:13,770
serve

00:04:09,630 --> 00:04:16,140
this provider what we also wanted to

00:04:13,770 --> 00:04:18,360
make sure is that there would be no one

00:04:16,140 --> 00:04:21,870
party that would actually have the

00:04:18,360 --> 00:04:24,450
ability of creating a situation of

00:04:21,870 --> 00:04:27,270
monopoly for itself one vendor which

00:04:24,450 --> 00:04:30,540
would be able to monopolize one aspect

00:04:27,270 --> 00:04:32,850
or another of this entrant chain and

00:04:30,540 --> 00:04:35,580
most important we wanted to make sure

00:04:32,850 --> 00:04:39,150
that multiple certificate authorities

00:04:35,580 --> 00:04:45,330
could actually play with in that chain

00:04:39,150 --> 00:04:49,530
of trust so we have achieved a first

00:04:45,330 --> 00:04:52,800
step of our goal which is we relieved we

00:04:49,530 --> 00:04:55,830
released an RFC draft to the IETF at the

00:04:52,800 --> 00:04:58,740
beginning of July and we have actually

00:04:55,830 --> 00:05:00,780
submitted the Europa trust protocol to a

00:04:58,740 --> 00:05:04,710
global platform for fast-track approval

00:05:00,780 --> 00:05:07,290
the slide says we are considering

00:05:04,710 --> 00:05:09,630
submitting the protocol to global

00:05:07,290 --> 00:05:13,530
platform but the protocol has been

00:05:09,630 --> 00:05:16,380
submitted to global platform and global

00:05:13,530 --> 00:05:19,020
platform as accepted to fast-track to

00:05:16,380 --> 00:05:21,480
that horrible probably within the next

00:05:19,020 --> 00:05:27,590
six to eight months which grp will

00:05:21,480 --> 00:05:29,640
become a global platform of standard so

00:05:27,590 --> 00:05:34,350
let's talk a little bit about the

00:05:29,640 --> 00:05:39,500
problem that we wanted to solve that

00:05:34,350 --> 00:05:42,090
slide shows what is at a high level the

00:05:39,500 --> 00:05:44,940
architecture which was typically

00:05:42,090 --> 00:05:48,330
implemented by multiple parties within

00:05:44,940 --> 00:05:51,270
the our mobile ecosystem starting let's

00:05:48,330 --> 00:05:54,900
say five years ago you would have a

00:05:51,270 --> 00:05:59,150
device split between razon and its

00:05:54,900 --> 00:06:03,840
normal world you would have an agent

00:05:59,150 --> 00:06:06,720
implemented to an SDK of the ton van der

00:06:03,840 --> 00:06:09,780
within a normal world and then you would

00:06:06,720 --> 00:06:11,430
have a te e environment service provider

00:06:09,780 --> 00:06:13,470
makes a deal with the trusted

00:06:11,430 --> 00:06:17,130
Application Manager the trusted

00:06:13,470 --> 00:06:20,100
application manager then Hoosiers

00:06:17,130 --> 00:06:23,160
applications through its agent with

00:06:20,100 --> 00:06:27,440
Troy's own applications that we're

00:06:23,160 --> 00:06:30,480
talking about digital rights management

00:06:27,440 --> 00:06:35,790
identity management applications payment

00:06:30,480 --> 00:06:40,590
applications and in some other markets

00:06:35,790 --> 00:06:43,350
you can imagine you know world world set

00:06:40,590 --> 00:06:45,990
of applications in the mobile world it

00:06:43,350 --> 00:06:48,770
initially centered around entertainment

00:06:45,990 --> 00:06:53,180
protection of entertainment content

00:06:48,770 --> 00:06:58,890
protection of privacy and identity and

00:06:53,180 --> 00:07:01,190
payment the problem is that most of

00:06:58,890 --> 00:07:04,410
those systems were actually walled

00:07:01,190 --> 00:07:06,560
gardens proprietary ecosystem so you

00:07:04,410 --> 00:07:11,970
would have one thumb vendor creating an

00:07:06,560 --> 00:07:13,830
agent in the rich execution environment

00:07:11,970 --> 00:07:16,920
of the genie but it was a proprietary

00:07:13,830 --> 00:07:19,950
protocol sometimes the security model

00:07:16,920 --> 00:07:24,150
was actually also proprietary and known

00:07:19,950 --> 00:07:26,700
and that created you know a lot of

00:07:24,150 --> 00:07:28,560
problems for the service providers that

00:07:26,700 --> 00:07:30,840
we're looking across the mobile

00:07:28,560 --> 00:07:35,390
ecosystem and later down the road across

00:07:30,840 --> 00:07:38,000
the IOT ecosystem to i would say

00:07:35,390 --> 00:07:41,070
consistent security models and

00:07:38,000 --> 00:07:45,230
consistent implementations consistent

00:07:41,070 --> 00:07:49,980
protocols to access applications within

00:07:45,230 --> 00:07:52,370
a zone and one of the best examples of

00:07:49,980 --> 00:07:57,180
actually the consequences of that

00:07:52,370 --> 00:07:59,540
situation is you know the big credit

00:07:57,180 --> 00:08:03,930
card companies in the Western world

00:07:59,540 --> 00:08:05,220
refuse to then put card credentials and

00:08:03,930 --> 00:08:07,680
trazodone because they couldn't find

00:08:05,220 --> 00:08:11,280
consistent security models they can find

00:08:07,680 --> 00:08:13,560
consistent mechanisms to access the card

00:08:11,280 --> 00:08:15,360
information and they decided to put the

00:08:13,560 --> 00:08:16,860
credentials up in the cloud and they

00:08:15,360 --> 00:08:20,850
created something called the host card

00:08:16,860 --> 00:08:24,810
emulation so down the road especially

00:08:20,850 --> 00:08:26,550
looking at the iu icky marketplace we

00:08:24,810 --> 00:08:30,810
decided that we wanted to fix this

00:08:26,550 --> 00:08:34,190
problem we saw that there would be

00:08:30,810 --> 00:08:38,729
actually growing fragment

00:08:34,190 --> 00:08:42,300
in the mobile market in the IOT market

00:08:38,729 --> 00:08:44,940
if actually we didn't take a leadership

00:08:42,300 --> 00:08:47,130
position between arm and several

00:08:44,940 --> 00:08:49,320
partners especially semantics which was

00:08:47,130 --> 00:08:52,950
a very big which is a very big

00:08:49,320 --> 00:08:57,540
certificate authority company and we

00:08:52,950 --> 00:09:00,930
propose to the industry a protocol that

00:08:57,540 --> 00:09:06,140
would actually standardize the way

00:09:00,930 --> 00:09:09,480
trusted application managers talk to

00:09:06,140 --> 00:09:11,250
secure domains inches on although secure

00:09:09,480 --> 00:09:16,980
domains are set up are they

00:09:11,250 --> 00:09:18,720
authenticated and enabling also very

00:09:16,980 --> 00:09:21,240
important for multiple certificate

00:09:18,720 --> 00:09:23,070
authorities to push their certification

00:09:21,240 --> 00:09:28,470
or security domain so authentic 80

00:09:23,070 --> 00:09:31,470
secure domains so we looked at the I

00:09:28,470 --> 00:09:35,490
would say the ecosystem the environment

00:09:31,470 --> 00:09:37,950
the landscape there was no standard we

00:09:35,490 --> 00:09:41,000
didn't see anybody leading to actually

00:09:37,950 --> 00:09:45,980
define a standard and so we decided to

00:09:41,000 --> 00:09:53,510
take a leadership position here so what

00:09:45,980 --> 00:09:57,420
we want to achieve was built is simple

00:09:53,510 --> 00:10:01,820
trust and provisioning mechanism between

00:09:57,420 --> 00:10:07,740
service providers and connected devices

00:10:01,820 --> 00:10:10,740
we didn't want to be actually tied to a

00:10:07,740 --> 00:10:12,750
specific Hardware execution environment

00:10:10,740 --> 00:10:15,300
yes you know there are some underlying

00:10:12,750 --> 00:10:18,390
requirements that were define later down

00:10:15,300 --> 00:10:20,100
the road on the implementation of those

00:10:18,390 --> 00:10:22,050
hardware environments but at the end of

00:10:20,100 --> 00:10:24,360
the day if you have an isolated

00:10:22,050 --> 00:10:27,390
execution environment if you can load a

00:10:24,360 --> 00:10:29,610
couple of root certificates within the

00:10:27,390 --> 00:10:31,590
devices during manufacturing or at some

00:10:29,610 --> 00:10:34,110
point in time in the in during the

00:10:31,590 --> 00:10:36,600
provisioning process of the system then

00:10:34,110 --> 00:10:39,630
you're good to go this protocol is going

00:10:36,600 --> 00:10:42,390
to work for you we wanted to create a

00:10:39,630 --> 00:10:43,980
free specification for industry use it

00:10:42,390 --> 00:10:45,810
was not about creating another

00:10:43,980 --> 00:10:47,220
proprietary protocol and other

00:10:45,810 --> 00:10:51,779
proprietary equals

00:10:47,220 --> 00:10:53,850
it was about building this protocol

00:10:51,779 --> 00:10:55,889
designing the protocol and then

00:10:53,850 --> 00:11:00,170
releasing it to an international

00:10:55,889 --> 00:11:05,310
standards body we also did not want to

00:11:00,170 --> 00:11:09,029
reinvent security schemes we we all felt

00:11:05,310 --> 00:11:11,579
comfortable with the concepts behind a

00:11:09,029 --> 00:11:13,889
symmetric keys behind the public key

00:11:11,579 --> 00:11:17,310
infrastructure behind certificate

00:11:13,889 --> 00:11:19,379
authorities infrastructures and we

00:11:17,310 --> 00:11:23,310
wanted to reuse those mechanisms and

00:11:19,379 --> 00:11:26,310
just build a simple messaging protocol

00:11:23,310 --> 00:11:32,699
on top of them want a high level

00:11:26,310 --> 00:11:39,420
protocol so here is the basic concept of

00:11:32,699 --> 00:11:42,420
what we achieve it's an open and secure

00:11:39,420 --> 00:11:44,759
framework open the sense that you can

00:11:42,420 --> 00:11:46,560
all go down now on the ITF website and

00:11:44,759 --> 00:11:49,079
download the document that describes

00:11:46,560 --> 00:11:53,220
this protocol subversion 102 of the

00:11:49,079 --> 00:11:58,589
protocol it's an over-the-air management

00:11:53,220 --> 00:12:02,189
framework it enables a trusted

00:11:58,589 --> 00:12:07,800
application manager to dynamically

00:12:02,189 --> 00:12:12,629
define in a mobile device a secure

00:12:07,800 --> 00:12:15,750
domain and use keys of multiple

00:12:12,629 --> 00:12:19,110
certificate authorities to authenticate

00:12:15,750 --> 00:12:23,910
that secure domain on behalf of a

00:12:19,110 --> 00:12:27,740
service provider a we use as I said

00:12:23,910 --> 00:12:30,629
earlier the public key in infrastructure

00:12:27,740 --> 00:12:35,750
the mechanism is of course based on

00:12:30,629 --> 00:12:38,790
having trust anchors and certificates

00:12:35,750 --> 00:12:40,649
provision within the TDE device within

00:12:38,790 --> 00:12:42,660
the trusted application manager within

00:12:40,649 --> 00:12:45,600
the service provider and we'll see a

00:12:42,660 --> 00:12:48,600
little bit later how that works at the

00:12:45,600 --> 00:12:51,019
station is taking place between the TV

00:12:48,600 --> 00:12:54,269
and the trusted application manager

00:12:51,019 --> 00:12:56,170
using key pairs using a certificate to

00:12:54,269 --> 00:12:59,150
control

00:12:56,170 --> 00:13:02,590
remotely the integrity of the

00:12:59,150 --> 00:13:06,410
applications that the tam is talking to

00:13:02,590 --> 00:13:10,640
wear a tee device can be provisioned to

00:13:06,410 --> 00:13:13,070
recognize several tabs right now we

00:13:10,640 --> 00:13:15,680
don't have a year our key within the

00:13:13,070 --> 00:13:18,260
protocol between tabs maybe later down

00:13:15,680 --> 00:13:23,450
the road we define your keys between

00:13:18,260 --> 00:13:26,510
times we'll have to see that so multiple

00:13:23,450 --> 00:13:29,210
certificate authorities can actually

00:13:26,510 --> 00:13:33,710
work with both the tea vendor and the

00:13:29,210 --> 00:13:37,570
dam and the service provider so we have

00:13:33,710 --> 00:13:41,540
created a mechanism which is based on a

00:13:37,570 --> 00:13:44,320
known system the PKR infrastructure but

00:13:41,540 --> 00:13:46,760
allows multiple certificate authorities

00:13:44,320 --> 00:13:50,450
multiple times multiple service

00:13:46,760 --> 00:13:52,160
providers to access devices now there's

00:13:50,450 --> 00:13:54,140
a certain level of pre provisioning that

00:13:52,160 --> 00:13:58,730
needs to take place but it's actually

00:13:54,140 --> 00:14:02,650
open nobody actually owns I would say to

00:13:58,730 --> 00:14:02,650
all booze anywhere within the system

00:14:04,060 --> 00:14:10,970
it's a complex ecosystem alright it

00:14:08,120 --> 00:14:13,100
looks easy when you take a look at the

00:14:10,970 --> 00:14:14,750
previous slide but actually at the end

00:14:13,100 --> 00:14:18,320
of the day when you try to implement

00:14:14,750 --> 00:14:20,750
things that lots of players involved you

00:14:18,320 --> 00:14:23,450
have a service provider you have a

00:14:20,750 --> 00:14:25,490
trusted application manager you have a

00:14:23,450 --> 00:14:28,310
key management architecture you have a

00:14:25,490 --> 00:14:32,810
key infrastructure that needs to be

00:14:28,310 --> 00:14:34,820
built in order to achieve at the station

00:14:32,810 --> 00:14:36,940
between the various parties you have a

00:14:34,820 --> 00:14:39,410
trusted execution environment provider

00:14:36,940 --> 00:14:41,720
sometimes it's the same party than the

00:14:39,410 --> 00:14:43,940
device manufacturer or the US

00:14:41,720 --> 00:14:47,120
manufactured the developer but sometimes

00:14:43,940 --> 00:14:50,150
not you have the trusted firmware

00:14:47,120 --> 00:14:52,550
provider the trusted firmware provider

00:14:50,150 --> 00:14:57,290
will work with a chipset vendor or with

00:14:52,550 --> 00:15:02,930
the OEM of the device but you're dealing

00:14:57,290 --> 00:15:05,150
with multiple parties here and the one

00:15:02,930 --> 00:15:08,390
of the reasons why this protocol is

00:15:05,150 --> 00:15:09,680
important is that all these parties can

00:15:08,390 --> 00:15:12,140
get together

00:15:09,680 --> 00:15:14,480
you know in one room and for one

00:15:12,140 --> 00:15:16,790
specific application define one

00:15:14,480 --> 00:15:19,760
implementation but if you try to have

00:15:16,790 --> 00:15:22,220
some level of harmonization between all

00:15:19,760 --> 00:15:28,070
these parties and international protocol

00:15:22,220 --> 00:15:30,740
was actually a requirement so here is

00:15:28,070 --> 00:15:35,330
the at a very high level as a solution

00:15:30,740 --> 00:15:39,920
that we have the clustered application

00:15:35,330 --> 00:15:43,010
manager bills and sdk based on the open

00:15:39,920 --> 00:15:47,060
trust protocol that sdk gets embedded

00:15:43,010 --> 00:15:52,450
within the normal world of the client

00:15:47,060 --> 00:15:56,480
device and communicates with the teeee

00:15:52,450 --> 00:16:01,820
over the trusted firmware in the arm

00:15:56,480 --> 00:16:03,620
ecosystem arm delivers protects a what

00:16:01,820 --> 00:16:07,220
we call actually trusted firmware it's

00:16:03,620 --> 00:16:11,680
an open source project and reused by

00:16:07,220 --> 00:16:20,779
most of our customers and partners then

00:16:11,680 --> 00:16:24,650
acee vendor will integrate the their own

00:16:20,779 --> 00:16:27,709
secure OS with an implementation of the

00:16:24,650 --> 00:16:31,360
OTR portable and of course would

00:16:27,709 --> 00:16:34,370
integrate that with the SDK of the tam a

00:16:31,360 --> 00:16:37,130
provisioning time all the parties will

00:16:34,370 --> 00:16:39,440
then lower the keys from the certificate

00:16:37,130 --> 00:16:42,740
authorities is that everybody as a way

00:16:39,440 --> 00:16:45,110
to recognize everybody but multiple

00:16:42,740 --> 00:16:48,980
certificate authorities can work with

00:16:45,110 --> 00:16:51,680
all those bodies is no one point of

00:16:48,980 --> 00:16:56,660
control so the certificate authority as

00:16:51,680 --> 00:16:59,020
to issue keys to the TE evader to the

00:16:56,660 --> 00:17:03,170
trusted services manager that runs the

00:16:59,020 --> 00:17:05,689
cam to the trusted firmware vendor which

00:17:03,170 --> 00:17:07,850
is very often actually their company's

00:17:05,689 --> 00:17:14,780
matters that is the chipset vendor and

00:17:07,850 --> 00:17:20,780
the service provider so what does the

00:17:14,780 --> 00:17:22,910
spec contain it actually defines the

00:17:20,780 --> 00:17:26,390
trust relationship

00:17:22,910 --> 00:17:29,780
all these entities and the underlying

00:17:26,390 --> 00:17:33,920
mechanism is the public key

00:17:29,780 --> 00:17:37,730
infrastructure right now the trust

00:17:33,920 --> 00:17:41,120
relationship is from te e to town to

00:17:37,730 --> 00:17:44,300
service provider we have not yet worked

00:17:41,120 --> 00:17:46,820
out any mechanism for trust relationship

00:17:44,300 --> 00:17:50,540
between the camps maybe this is actually

00:17:46,820 --> 00:17:56,000
an iteration within the development of

00:17:50,540 --> 00:18:00,020
the specifications so we decided to

00:17:56,000 --> 00:18:02,870
reuse json messages to build the

00:18:00,020 --> 00:18:04,820
protocol again we didn't want to you

00:18:02,870 --> 00:18:07,750
know invent anything from scratch we

00:18:04,820 --> 00:18:13,910
tried as much as possible to reuse known

00:18:07,750 --> 00:18:17,030
technologies and so we have a set of

00:18:13,910 --> 00:18:20,510
Jason messages to define device at a

00:18:17,030 --> 00:18:24,770
station so that the device attached its

00:18:20,510 --> 00:18:29,720
identity with the TSM and for the device

00:18:24,770 --> 00:18:31,430
to trust the TSM we have messages for

00:18:29,720 --> 00:18:33,860
security domain management so in other

00:18:31,430 --> 00:18:36,950
words H cost of the application manager

00:18:33,860 --> 00:18:39,920
can request to create a secure domain

00:18:36,950 --> 00:18:42,590
within the traditional execution

00:18:39,920 --> 00:18:46,610
environment of the device then that

00:18:42,590 --> 00:18:51,050
domain will be identified with of course

00:18:46,610 --> 00:18:54,500
the keys of the certificate authority

00:18:51,050 --> 00:18:56,450
that the TAM is working with but

00:18:54,500 --> 00:18:59,510
multiple certificate authorities could

00:18:56,450 --> 00:19:05,000
be used to create multiple domains

00:18:59,510 --> 00:19:07,610
within one device of course you have

00:19:05,000 --> 00:19:10,310
messages for trusted application

00:19:07,610 --> 00:19:13,070
management so basically download and

00:19:10,310 --> 00:19:16,990
then update and then you have some

00:19:13,070 --> 00:19:16,990
messages for network communications yes

00:19:38,290 --> 00:19:43,850
yeah absolutely we have that I have a

00:19:40,580 --> 00:19:46,130
slide later that shows all the

00:19:43,850 --> 00:19:51,080
certificates which are within the system

00:19:46,130 --> 00:19:52,700
okay there is an agent an OTR agent

00:19:51,080 --> 00:19:54,200
within the rich execution environment

00:19:52,700 --> 00:19:56,050
because of course communications take

00:19:54,200 --> 00:19:58,910
place as a rich education environment

00:19:56,050 --> 00:20:01,430
we're using the standard pki artifacts

00:19:58,910 --> 00:20:04,370
in algorithm and Jason messages and

00:20:01,430 --> 00:20:13,220
Jason the security RFC's so it's all

00:20:04,370 --> 00:20:16,610
based on stuff which is standard so the

00:20:13,220 --> 00:20:19,910
architecture of the system is for the CH

00:20:16,610 --> 00:20:23,300
issue certificates to all the your TRP

00:20:19,910 --> 00:20:25,880
components which are the t ee the

00:20:23,300 --> 00:20:28,460
trusted application manager the trusted

00:20:25,880 --> 00:20:33,140
firmware of the device and the service

00:20:28,460 --> 00:20:37,070
provider the TAM vendor provides an sdk

00:20:33,140 --> 00:20:40,160
to communicate with the tam from the

00:20:37,070 --> 00:20:42,050
client application and the cam will

00:20:40,160 --> 00:20:45,700
communicate with the OTR p agent to

00:20:42,050 --> 00:20:51,710
religio grp message between the tamil TV

00:20:45,700 --> 00:20:54,530
so there is an integration job that

00:20:51,710 --> 00:20:58,690
needs to be performed by the soc vendor

00:20:54,530 --> 00:20:58,690
when putting this architecture yes

00:21:00,770 --> 00:21:07,500
yes Taman TSM gets used very often in

00:21:05,910 --> 00:21:10,160
this presentation interchangeable

00:21:07,500 --> 00:21:10,160
absolutely

00:21:14,820 --> 00:21:25,710
ok so the specs the scope of the

00:21:18,559 --> 00:21:29,580
specifications is harm the te e to the 0

00:21:25,710 --> 00:21:33,480
grp agent to the client to the town it

00:21:29,580 --> 00:21:38,750
actually also defines api's between the

00:21:33,480 --> 00:21:41,960
agent and the client applications ok and

00:21:38,750 --> 00:21:44,490
here you have the certificate authority

00:21:41,960 --> 00:21:47,820
enrollment API is so certificate

00:21:44,490 --> 00:21:50,850
authority and roll the te e the trusted

00:21:47,820 --> 00:21:53,250
firmware which gives you the world of

00:21:50,850 --> 00:22:01,679
trust of the device and then of course

00:21:53,250 --> 00:22:04,200
the tam the OTR p agent is responsible

00:22:01,679 --> 00:22:10,139
for routing the OTR p messages to the

00:22:04,200 --> 00:22:13,730
appropriate te e it's you know developed

00:22:10,139 --> 00:22:16,919
to be typically by the TV evander

00:22:13,730 --> 00:22:18,960
actually no that's that's a mistake that

00:22:16,919 --> 00:22:21,240
should be developed and distributed by

00:22:18,960 --> 00:22:23,129
the tan van der as it needs to be able

00:22:21,240 --> 00:22:25,470
to talk to the town but it gets

00:22:23,129 --> 00:22:30,149
integrated typically by between the TV

00:22:25,470 --> 00:22:32,370
vendor and the soc and it's implemented

00:22:30,149 --> 00:22:41,610
as and implements an interface of the

00:22:32,370 --> 00:22:44,970
service and sdk to the GED this is a

00:22:41,610 --> 00:22:48,960
list of G songs that are referenced

00:22:44,970 --> 00:22:50,639
within the protocol allergy goes to that

00:22:48,960 --> 00:22:54,870
list I don't think that I need to really

00:22:50,639 --> 00:23:01,980
describe it and so the benefits of our

00:22:54,870 --> 00:23:06,450
grp is we see a standardized mechanism

00:23:01,980 --> 00:23:08,070
for building trust and privacy that's

00:23:06,450 --> 00:23:11,039
actually very important of that's

00:23:08,070 --> 00:23:13,620
consistent mechanism for trusting

00:23:11,039 --> 00:23:16,649
privacy for service providers this was

00:23:13,620 --> 00:23:23,299
one of the big issues of the card

00:23:16,649 --> 00:23:25,950
companies Visa MasterCard it's also

00:23:23,299 --> 00:23:27,180
interoperable with you know fairly easy

00:23:25,950 --> 00:23:31,890
adoption because it

00:23:27,180 --> 00:23:35,310
uses it reuses the pki infrastructure

00:23:31,890 --> 00:23:37,140
each were uses json messages so you have

00:23:35,310 --> 00:23:40,680
a lot of developers that of experience

00:23:37,140 --> 00:23:42,690
with those technologies we all know also

00:23:40,680 --> 00:23:44,520
from the pki architecture that it is

00:23:42,690 --> 00:23:46,410
actually scalable so we have an

00:23:44,520 --> 00:23:49,260
architecture here that scales fairly

00:23:46,410 --> 00:23:52,560
easily and there is no offender lock no

00:23:49,260 --> 00:23:54,870
one vendor actually knows this system

00:23:52,560 --> 00:23:59,280
and can put at all booze within the

00:23:54,870 --> 00:24:03,200
system service providers can then you

00:23:59,280 --> 00:24:05,430
know focus on their applications and

00:24:03,200 --> 00:24:08,220
defining the application that they want

00:24:05,430 --> 00:24:09,930
to work on there was an initial focus on

00:24:08,220 --> 00:24:14,820
the mobile market place especially

00:24:09,930 --> 00:24:17,730
around identity identity management but

00:24:14,820 --> 00:24:23,210
we seed actually also now being applied

00:24:17,730 --> 00:24:25,170
within the IOT marketplace there was

00:24:23,210 --> 00:24:26,460
there have been some reference

00:24:25,170 --> 00:24:29,790
implementations that have been

00:24:26,460 --> 00:24:31,680
demonstrated that were actually built by

00:24:29,790 --> 00:24:36,180
Salacia with some applications from

00:24:31,680 --> 00:24:38,100
intercede and it was an identity

00:24:36,180 --> 00:24:40,500
management application was presented at

00:24:38,100 --> 00:24:42,270
them WC earlier this year and then at

00:24:40,500 --> 00:24:46,620
the arm partners conference in the

00:24:42,270 --> 00:24:49,410
August time frame also this year so i

00:24:46,620 --> 00:24:54,680
will put up the slides that answers your

00:24:49,410 --> 00:24:58,730
questions on the architecture of keys so

00:24:54,680 --> 00:25:01,830
generated by the certificate authority

00:24:58,730 --> 00:25:03,990
the service provider will have its key

00:25:01,830 --> 00:25:06,800
pair and certificate the pap what I will

00:25:03,990 --> 00:25:09,870
keep their certificate the device te

00:25:06,800 --> 00:25:13,500
will have to keep heirs one for the TV

00:25:09,870 --> 00:25:16,010
and one for the trust Fermoyle then the

00:25:13,500 --> 00:25:21,830
service provider and

00:25:16,010 --> 00:25:27,690
we'll have dry peas that I used for

00:25:21,830 --> 00:25:30,630
encrypting the binary data and then you

00:25:27,690 --> 00:25:36,360
will have trust anchors we're with the

00:25:30,630 --> 00:25:39,600
town and the device so the two pairs of

00:25:36,360 --> 00:25:43,710
the service provider will be used to

00:25:39,600 --> 00:25:48,900
sign the trusted application the pairs

00:25:43,710 --> 00:25:58,380
of the Pam will be used to sign the OG

00:25:48,900 --> 00:26:03,390
RP request which are passed for device

00:25:58,380 --> 00:26:12,300
attestation to the cam and to the

00:26:03,390 --> 00:26:14,700
service provider will be used for at the

00:26:12,300 --> 00:26:18,690
station and certification of the device

00:26:14,700 --> 00:26:21,210
itself so that's the architecture that's

00:26:18,690 --> 00:26:24,480
how the pki infrastructure and

00:26:21,210 --> 00:26:27,180
architecture is reused within a grp

00:26:24,480 --> 00:26:29,340
portable and then you know look at this

00:26:27,180 --> 00:26:31,470
architecture of keys assume that you

00:26:29,340 --> 00:26:36,080
have a layer a messaging layer on top of

00:26:31,470 --> 00:26:44,510
that and which is implemented using the

00:26:36,080 --> 00:26:44,510
JSON messages and protocol question yes

00:27:10,210 --> 00:27:14,870
now we have not yet looked into that

00:27:12,590 --> 00:27:16,490
matter we understand that we understand

00:27:14,870 --> 00:27:18,590
that the problem of relocation is

00:27:16,490 --> 00:27:21,799
actually a big issue but we have not

00:27:18,590 --> 00:27:24,379
looked into that there are some other

00:27:21,799 --> 00:27:29,710
problems that we need to fix first we

00:27:24,379 --> 00:27:29,710
need to have a common messaging system

00:27:30,009 --> 00:27:35,210
so but the problem of relocation is

00:27:33,559 --> 00:27:40,690
actually an important promise pecially

00:27:35,210 --> 00:27:43,190
when you get to the IG ot marketplace ya

00:27:40,690 --> 00:27:47,389
understand understand that yeah we are

00:27:43,190 --> 00:27:49,519
the version 10 of this protocol and one

00:27:47,389 --> 00:27:51,249
of the reasons that we actually wanted

00:27:49,519 --> 00:27:53,869
to go out I'll get to I'll get to you

00:27:51,249 --> 00:27:56,929
one of the reason why we wanted to go to

00:27:53,869 --> 00:27:59,690
open standards is that you know we

00:27:56,929 --> 00:28:01,580
weren't for companies we had certain

00:27:59,690 --> 00:28:06,289
skill sets insanity level of experience

00:28:01,580 --> 00:28:09,259
but we can't get into a complete global

00:28:06,289 --> 00:28:12,529
peer review of the system if we don't go

00:28:09,259 --> 00:28:15,789
through a standards body and global

00:28:12,529 --> 00:28:21,070
platform was actually quite keen on us

00:28:15,789 --> 00:28:21,070
coming within their system

00:28:50,500 --> 00:29:05,620
so the yeah dude so the agent would be

00:29:00,820 --> 00:29:10,300
updated within i would say process

00:29:05,620 --> 00:29:13,900
typically managed by the OEM the OG RP

00:29:10,300 --> 00:29:16,930
agent is part of the code that's

00:29:13,900 --> 00:29:19,420
delivered by the OEM okay so if you

00:29:16,930 --> 00:29:21,850
actually our way to go back and some of

00:29:19,420 --> 00:29:27,070
those slides or a look at the stack of

00:29:21,850 --> 00:29:28,720
code which is in the OEM device the OEM

00:29:27,070 --> 00:29:31,090
has actually a fairly important

00:29:28,720 --> 00:29:34,150
responsibility within this process okay

00:29:31,090 --> 00:29:36,250
he needs to sign the code that you will

00:29:34,150 --> 00:29:37,960
find easier within the rich execution

00:29:36,250 --> 00:29:40,210
environment or was it a trusted

00:29:37,960 --> 00:29:45,580
execution environment and he needs to

00:29:40,210 --> 00:29:53,760
load the initial keys master keys and

00:29:45,580 --> 00:29:53,760
the device trusted firmware or there so

00:29:53,880 --> 00:30:00,970
it will be through the OG RP agent will

00:29:58,270 --> 00:30:05,290
be updated a screw and UGA process

00:30:00,970 --> 00:30:06,670
managed by the OEM okay there's one

00:30:05,290 --> 00:30:10,450
thing that would like to point out here

00:30:06,670 --> 00:30:12,240
is that this system is completely

00:30:10,450 --> 00:30:16,290
independent of the underlying

00:30:12,240 --> 00:30:20,520
communications Metallica otae is any

00:30:16,290 --> 00:30:20,520
communications portable doesn't matter

00:30:22,800 --> 00:30:25,430
yes

00:30:55,120 --> 00:31:02,150
so you're bringing up a topic well that

00:30:59,780 --> 00:31:04,760
we actually looked into when we designed

00:31:02,150 --> 00:31:07,430
the protocol we designed a coracle we

00:31:04,760 --> 00:31:09,890
did not design the implementation and so

00:31:07,430 --> 00:31:11,210
the implementation and you know the

00:31:09,890 --> 00:31:12,890
level of countermeasures that you

00:31:11,210 --> 00:31:14,450
actually put within the device to

00:31:12,890 --> 00:31:17,300
protect the device against side-channel

00:31:14,450 --> 00:31:20,000
attacks or again other hardware attack

00:31:17,300 --> 00:31:22,510
was actually not I would say the

00:31:20,000 --> 00:31:25,670
objective of the design of this protocol

00:31:22,510 --> 00:31:28,100
the idea here was to create a

00:31:25,670 --> 00:31:31,220
standardized mechanism that all parties

00:31:28,100 --> 00:31:32,840
could use to you know set up secure

00:31:31,220 --> 00:31:39,170
domains and manage the content of those

00:31:32,840 --> 00:31:41,090
secured image but you know you you can

00:31:39,170 --> 00:31:44,330
you can deal with devices where you're

00:31:41,090 --> 00:31:46,550
very expensive data and you need to have

00:31:44,330 --> 00:31:49,220
side-channel attacks our measures and

00:31:46,550 --> 00:31:54,980
you can deal with devices which the data

00:31:49,220 --> 00:31:57,310
is not worth much but but you cannot

00:31:54,980 --> 00:31:57,310
afford

00:31:58,080 --> 00:32:03,600
so we designed a protocol design and an

00:32:01,409 --> 00:32:07,590
interface we did not want to get into

00:32:03,600 --> 00:32:11,659
the the job of the individual OEMs and

00:32:07,590 --> 00:32:11,659
the individual application developers

00:32:18,380 --> 00:32:27,779
know there's actually no you're right

00:32:24,360 --> 00:32:35,399
now they all i would say running

00:32:27,779 --> 00:32:38,090
parallel we're saying earlier we don't

00:32:35,399 --> 00:32:38,090
have a concept

00:33:00,400 --> 00:33:08,470
right but we don't have such a question

00:33:02,680 --> 00:33:11,760
was whether we have not covered the

00:33:08,470 --> 00:33:11,760
concept of delegation of authority

00:33:12,990 --> 00:33:16,500
that's one of the things

00:33:33,870 --> 00:33:38,850
well

00:33:35,900 --> 00:33:42,210
you know the setup of the initial trust

00:33:38,850 --> 00:33:43,800
has to go through attack then if as an

00:33:42,210 --> 00:33:46,440
application developer you want to have

00:33:43,800 --> 00:33:48,320
TVs or you know application starting to

00:33:46,440 --> 00:33:50,970
trust their condition is in the system

00:33:48,320 --> 00:33:53,220
you know that's something the developer

00:33:50,970 --> 00:34:06,930
going to do but the initial cost setup

00:33:53,220 --> 00:34:10,230
needs to go we don't have this concept

00:34:06,930 --> 00:34:12,690
yet of litigation of authority because

00:34:10,230 --> 00:34:14,760
fundamentally what you talking about is

00:34:12,690 --> 00:34:16,290
you know it can barely getting authority

00:34:14,760 --> 00:34:18,750
to another party we don't have that

00:34:16,290 --> 00:34:21,140
concept we see with the protocol I think

00:34:18,750 --> 00:34:21,140
we'll get there

00:34:26,460 --> 00:34:29,990
all right other questions

00:34:33,400 --> 00:34:38,710
very good so feel free to reach out to

00:34:35,860 --> 00:34:44,170
me if you're interested in more you know

00:34:38,710 --> 00:34:46,500
discussions okay very good thank you

00:34:44,170 --> 00:34:46,500
very much

00:34:48,320 --> 00:34:51,429
[Music]

00:34:54,110 --> 00:35:00,169

YouTube URL: https://www.youtube.com/watch?v=EkuN48aa70w


