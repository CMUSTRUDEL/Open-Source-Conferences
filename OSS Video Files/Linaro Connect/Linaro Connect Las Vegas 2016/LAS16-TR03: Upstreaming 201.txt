Title: LAS16-TR03: Upstreaming 201
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-TR03: Upstreaming 201
Speakers: Shawn Guo, Daniel Thompson
Date: September 27, 2016

★ Session Description ★
This session is an advanced course on Linux kernel upstreaming fundamentals. The course covers how the arm-soc kernel tree is maintained and why that is important to ARM Linux kernel developers. The focus of the course is the explanation of the detailed mechanics of creating and posting patch series to upstream mailing lists for several common cases. Annotated session content is made up of previously upstreamed ARM support captured from emails to the kernel mailing lists. The target audience is both software engineers and engineering managers preparing to upstream software into the kernel. The topic requires a solid background in software configuration management terminology and the git SCM tool as well as a good technical understanding of the Linux kernel itself.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-tr03
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-tr03/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,630 --> 00:00:16,410
the areas we were looking at before so

00:00:13,469 --> 00:00:17,760
it builds on the previous presentation

00:00:16,410 --> 00:00:20,550
if you've just come in that doesn't

00:00:17,760 --> 00:00:24,300
matter we will still cover as much

00:00:20,550 --> 00:00:25,859
backup backup bit as we can as before

00:00:24,300 --> 00:00:29,340
please ask questions as we go if you

00:00:25,859 --> 00:00:31,710
have any and as we get towards the only

00:00:29,340 --> 00:00:33,989
presentation we're going to review some

00:00:31,710 --> 00:00:36,480
of the potential useful tools and

00:00:33,989 --> 00:00:40,770
techniques that you can use to develop

00:00:36,480 --> 00:00:42,000
your confidence and it finally we made

00:00:40,770 --> 00:00:45,090
really good time in the one at one

00:00:42,000 --> 00:00:46,620
presentation so that free bonus extra we

00:00:45,090 --> 00:00:50,129
have got a chance of getting to enter so

00:00:46,620 --> 00:00:53,190
we should see what happens so this slide

00:00:50,129 --> 00:00:54,960
here is a direct quote from the

00:00:53,190 --> 00:00:58,170
submitting patches file that you can

00:00:54,960 --> 00:01:00,149
find in the documentation directory and

00:00:58,170 --> 00:01:02,370
it's just highlighted a few of the

00:01:00,149 --> 00:01:04,409
really important bits and pieces so

00:01:02,370 --> 00:01:06,360
firstly that your summary is such an

00:01:04,409 --> 00:01:08,100
important part of the patch because

00:01:06,360 --> 00:01:10,229
that's I mentioned before that you

00:01:08,100 --> 00:01:12,900
should delete emails where the subject

00:01:10,229 --> 00:01:15,119
does not interest you so does nobody

00:01:12,900 --> 00:01:17,540
else so if you write a bad subject line

00:01:15,119 --> 00:01:21,119
you'll get far less reviewer exposure

00:01:17,540 --> 00:01:22,560
and so in 70 characters you need to be

00:01:21,119 --> 00:01:25,110
trying to describe what the perhaps

00:01:22,560 --> 00:01:26,939
changes and while I be necessary so it's

00:01:25,110 --> 00:01:31,590
like trying to write a really good tweet

00:01:26,939 --> 00:01:33,090
with even fewer characters it's

00:01:31,590 --> 00:01:35,400
important that you have your patch and

00:01:33,090 --> 00:01:37,799
your tag in the subject so that people

00:01:35,400 --> 00:01:41,159
can figure out on this is an interesting

00:01:37,799 --> 00:01:43,979
phraseology here it says patches may be

00:01:41,159 --> 00:01:45,960
numbered like this now in reality I

00:01:43,979 --> 00:01:47,549
think you will get beaten up if you

00:01:45,960 --> 00:01:49,439
think oh may means optional I might do

00:01:47,549 --> 00:01:53,299
it some other way don't innovate in how

00:01:49,439 --> 00:01:53,299
you number your patches do we like that

00:01:53,689 --> 00:01:58,350
and the other key thing I think we

00:01:57,030 --> 00:02:00,180
drilled this quite hard the one-on-one

00:01:58,350 --> 00:02:02,189
session but the commit message is a

00:02:00,180 --> 00:02:05,670
really important part of the history of

00:02:02,189 --> 00:02:07,740
the colonel there is a commanding gate

00:02:05,670 --> 00:02:09,929
which is very engaging Lee called blame

00:02:07,740 --> 00:02:12,300
which can be used to look through who

00:02:09,929 --> 00:02:13,800
has changed what line in what file and

00:02:12,300 --> 00:02:16,260
if somebody is reading code

00:02:13,800 --> 00:02:18,870
you have contributed to a modified and

00:02:16,260 --> 00:02:20,640
they can't figure out if it looks like

00:02:18,870 --> 00:02:22,230
you've done something really crazy they

00:02:20,640 --> 00:02:23,610
will use get blame and they will use it

00:02:22,230 --> 00:02:26,700
to pull out the commit message maybe

00:02:23,610 --> 00:02:28,410
three years after you know your code so

00:02:26,700 --> 00:02:30,360
the commit message is part of the

00:02:28,410 --> 00:02:32,460
archaeology of the system to help people

00:02:30,360 --> 00:02:34,620
understand and maintain it and because

00:02:32,460 --> 00:02:36,810
maintain is know that they will have to

00:02:34,620 --> 00:02:38,790
mine through this history to understand

00:02:36,810 --> 00:02:41,310
how the thing came about they do care

00:02:38,790 --> 00:02:42,450
very much that the the tools they're

00:02:41,310 --> 00:02:48,480
going to have for archaeology really

00:02:42,450 --> 00:02:50,610
really work and so here's a this is

00:02:48,480 --> 00:02:53,160
actually said that maintain us will help

00:02:50,610 --> 00:02:58,140
people this is a great example of a

00:02:53,160 --> 00:02:59,700
maintainer helping somebody so it

00:02:58,140 --> 00:03:02,130
doesn't really matter who is sent a bit

00:02:59,700 --> 00:03:03,810
he's putting a submit message commit

00:03:02,130 --> 00:03:07,380
message and it's not really very clear

00:03:03,810 --> 00:03:08,940
it's a bit jargony it's describing these

00:03:07,380 --> 00:03:10,980
blinks and everything else it doesn't

00:03:08,940 --> 00:03:12,870
say what the problem is so it says what

00:03:10,980 --> 00:03:16,410
the patch does but it doesn't offer any

00:03:12,870 --> 00:03:19,850
clues as the motivation behind it and he

00:03:16,410 --> 00:03:22,620
got this great reply from Inga mullah

00:03:19,850 --> 00:03:25,050
which was just suggesting a former for

00:03:22,620 --> 00:03:27,900
how you might choose to put in your your

00:03:25,050 --> 00:03:32,459
description you know currently the code

00:03:27,900 --> 00:03:33,930
does this and that's bad because be we

00:03:32,459 --> 00:03:37,470
can solve this all you can improve this

00:03:33,930 --> 00:03:40,320
by doing C and that works because D and

00:03:37,470 --> 00:03:42,810
I've noticed this in almost all the

00:03:40,320 --> 00:03:45,930
patches I right now pretty much all of

00:03:42,810 --> 00:03:47,610
them start with the word currently doing

00:03:45,930 --> 00:03:48,900
he's exactly this form but I start

00:03:47,610 --> 00:03:50,610
currently and I describe the behavior

00:03:48,900 --> 00:03:52,050
that I don't like and that's the first

00:03:50,610 --> 00:03:54,060
thing that goes into my commit message

00:03:52,050 --> 00:03:56,760
so that if somebody's reading it the

00:03:54,060 --> 00:03:58,470
first thing they know is what I don't

00:03:56,760 --> 00:03:59,520
like and why I might be interested in

00:03:58,470 --> 00:04:01,800
fixing it because the first and they

00:03:59,520 --> 00:04:04,440
need a check is if they don't like it as

00:04:01,800 --> 00:04:05,910
much as I do so health people flow

00:04:04,440 --> 00:04:09,000
through things it makes your patch

00:04:05,910 --> 00:04:10,170
justified and clear so that's both a

00:04:09,000 --> 00:04:11,910
really nice example of the fact that

00:04:10,170 --> 00:04:14,100
maintain errs do help people that

00:04:11,910 --> 00:04:16,169
they're not there to make your life

00:04:14,100 --> 00:04:18,690
harder they will help they will provide

00:04:16,169 --> 00:04:20,459
advice on how to improve it sometimes

00:04:18,690 --> 00:04:22,650
they won't invest during many characters

00:04:20,459 --> 00:04:23,850
to give that advice but they will be

00:04:22,650 --> 00:04:27,070
there and they will advise you as much

00:04:23,850 --> 00:04:28,450
as possible and here's

00:04:27,070 --> 00:04:33,100
example of a really good commit message

00:04:28,450 --> 00:04:36,070
so we've got a fairly narrow subject

00:04:33,100 --> 00:04:39,340
line and it just says these ports are

00:04:36,070 --> 00:04:40,990
eight big wide and then it's explaining

00:04:39,340 --> 00:04:43,600
that those ports really are only eight

00:04:40,990 --> 00:04:45,820
bits wide and so we need to modify a

00:04:43,600 --> 00:04:48,640
particular property in the device tree

00:04:45,820 --> 00:04:49,900
to avoid what's been happening it also

00:04:48,640 --> 00:04:51,640
describes what would happen if you don't

00:04:49,900 --> 00:04:53,980
have this property there which is

00:04:51,640 --> 00:04:58,810
effectively a USD device would run a

00:04:53,980 --> 00:05:02,830
half speed we've mentioned this before

00:04:58,810 --> 00:05:05,440
that if you have a comment to which you

00:05:02,830 --> 00:05:08,410
have not replied it is assumed that the

00:05:05,440 --> 00:05:10,950
comment is correct and it should be a

00:05:08,410 --> 00:05:16,360
petite a uniquely brilliant way to annoy

00:05:10,950 --> 00:05:18,460
maintain us to not listen to the advice

00:05:16,360 --> 00:05:20,340
they give it is to keep reposting the

00:05:18,460 --> 00:05:24,610
same patch with the same mistakes in it

00:05:20,340 --> 00:05:26,890
it's one of the the fastest ways you can

00:05:24,610 --> 00:05:29,650
you can cause people to not want to

00:05:26,890 --> 00:05:31,600
review your patches anymore and this is

00:05:29,650 --> 00:05:33,940
an example again you know Mark Brown who

00:05:31,600 --> 00:05:37,780
is wandering out connect he's a lovely

00:05:33,940 --> 00:05:39,850
fellow he has been nice enough to point

00:05:37,780 --> 00:05:42,160
out I mean he could just choose to

00:05:39,850 --> 00:05:45,070
ignore it he's actually been generous

00:05:42,160 --> 00:05:47,380
enough to quote his previous reply and

00:05:45,070 --> 00:05:49,750
ask the person not to ignore any more

00:05:47,380 --> 00:05:51,070
end up in the future so again you can

00:05:49,750 --> 00:05:52,510
you can relax a little bit when you're

00:05:51,070 --> 00:05:54,750
up streaming yeah it's a good idea to

00:05:52,510 --> 00:05:58,210
follow as much of the advice as you can

00:05:54,750 --> 00:06:00,700
but you know people aren't there to make

00:05:58,210 --> 00:06:02,290
your life hard and if you think about

00:06:00,700 --> 00:06:04,960
the work mark has to do to do that you

00:06:02,290 --> 00:06:06,640
know he's got to say I remember this

00:06:04,960 --> 00:06:08,290
happening before he's think I can find

00:06:06,640 --> 00:06:12,250
the email he sent he's thinking to copy

00:06:08,290 --> 00:06:13,960
bits of the message all of that is work

00:06:12,250 --> 00:06:17,350
that he doesn't have to do he could just

00:06:13,960 --> 00:06:19,930
ignore the message be chooses not to

00:06:17,350 --> 00:06:21,910
because again it people don't become

00:06:19,930 --> 00:06:28,900
maintain us because they hate the human

00:06:21,910 --> 00:06:30,370
race again in the previous session we

00:06:28,900 --> 00:06:32,370
discussed this idea of clarifying

00:06:30,370 --> 00:06:35,560
comments that if you don't understand a

00:06:32,370 --> 00:06:38,260
comment maintainer it is perfectly okay

00:06:35,560 --> 00:06:40,520
to seek clarification and this was an

00:06:38,260 --> 00:06:42,440
example simply of somebody who is st

00:06:40,520 --> 00:06:44,240
for that clarification in just a good

00:06:42,440 --> 00:06:47,629
example of somebody ringer they've got a

00:06:44,240 --> 00:06:49,580
slightly short reply me again maintain

00:06:47,629 --> 00:06:52,370
is often extremely busy with a lot of

00:06:49,580 --> 00:06:53,690
email and they will send the shorter

00:06:52,370 --> 00:06:56,360
supply that they think is enough to get

00:06:53,690 --> 00:06:57,650
the message across and sometimes that's

00:06:56,360 --> 00:06:59,569
not quite enough for people to follow

00:06:57,650 --> 00:07:00,770
what they say and so this was just a

00:06:59,569 --> 00:07:04,669
clear thing so I'm sorry I don't quite

00:07:00,770 --> 00:07:06,409
follow you he's then gone and for an

00:07:04,669 --> 00:07:07,849
interpretation he suggested is this what

00:07:06,409 --> 00:07:09,680
you meant to say or is this is this what

00:07:07,849 --> 00:07:11,389
you'd like me to do because again that's

00:07:09,680 --> 00:07:13,280
a very quick thing to say if you say is

00:07:11,389 --> 00:07:15,560
this what you want me to do then

00:07:13,280 --> 00:07:18,530
somebody can just go yes and they're

00:07:15,560 --> 00:07:20,539
done so so the way you reply to things

00:07:18,530 --> 00:07:22,490
and the way you make it possible for

00:07:20,539 --> 00:07:27,620
people to give you the easy answer

00:07:22,490 --> 00:07:29,060
quickly it is important and then of

00:07:27,620 --> 00:07:29,990
course the final bits it's managing it

00:07:29,060 --> 00:07:31,130
can you explain more if I have

00:07:29,990 --> 00:07:33,380
misunderstood this could you possibly

00:07:31,130 --> 00:07:34,849
put some more applying and I remember I

00:07:33,380 --> 00:07:36,409
went back to look at this thread and

00:07:34,849 --> 00:07:38,810
yeah that's exactly what they got the

00:07:36,409 --> 00:07:43,039
maintainer provided them a longer reply

00:07:38,810 --> 00:07:45,770
and I remember when but the driver is

00:07:43,039 --> 00:07:47,449
eventually go upstream this is a good

00:07:45,770 --> 00:07:50,530
habit it's one that doesn't actually

00:07:47,449 --> 00:07:52,969
come naturally to many people that

00:07:50,530 --> 00:07:55,130
although I've already told you now that

00:07:52,969 --> 00:07:56,599
it's assumed that if you don't reply

00:07:55,130 --> 00:07:59,180
that means the previous reply was

00:07:56,599 --> 00:08:04,669
correct for review comments it's still

00:07:59,180 --> 00:08:06,560
good manners to acknowledge the request

00:08:04,669 --> 00:08:09,080
fairly quickly and just say yeah that's

00:08:06,560 --> 00:08:12,529
fine I'll do that you can see it's two

00:08:09,080 --> 00:08:13,940
words will fix and that that's in it

00:08:12,529 --> 00:08:15,440
seems test but that's actually quite

00:08:13,940 --> 00:08:16,969
good manners that's saying I've listened

00:08:15,440 --> 00:08:19,460
to you it makes sense I'm going to get

00:08:16,969 --> 00:08:21,259
your best I will fix it you don't have

00:08:19,460 --> 00:08:23,029
to be really worthy but it is just nice

00:08:21,259 --> 00:08:26,270
to say I mean a lot of people just

00:08:23,029 --> 00:08:28,550
inhabit right neck will fix is another

00:08:26,270 --> 00:08:30,349
nice quick way to type it but it just is

00:08:28,550 --> 00:08:33,500
a way to acknowledge the work the review

00:08:30,349 --> 00:08:36,200
has done for you this is an example of

00:08:33,500 --> 00:08:39,320
what not to do this was quite a famous

00:08:36,200 --> 00:08:42,860
thread in its day so you can see here

00:08:39,320 --> 00:08:45,560
that essentially somebody has said that

00:08:42,860 --> 00:08:50,180
they can't see any other way to solve

00:08:45,560 --> 00:08:53,279
the problem and that this is the way

00:08:50,180 --> 00:08:54,990
that the arm colonel describes it

00:08:53,279 --> 00:08:56,310
this was essentially a debate about

00:08:54,990 --> 00:08:58,529
whether you should introduce an

00:08:56,310 --> 00:09:00,269
alternative to device tree and the

00:08:58,529 --> 00:09:01,829
maintain is we're pretty much adamant

00:09:00,269 --> 00:09:03,749
that no no we've got device tree we

00:09:01,829 --> 00:09:07,379
don't want a second way to describe hard

00:09:03,749 --> 00:09:10,110
way it's a really bad idea and you get

00:09:07,379 --> 00:09:13,050
this kind of flamey response you know

00:09:10,110 --> 00:09:14,759
can you prove to me that you don't want

00:09:13,050 --> 00:09:16,790
this code that you represent the entire

00:09:14,759 --> 00:09:19,290
community etc etc it doesn't matter

00:09:16,790 --> 00:09:20,790
whether you represent the entire

00:09:19,290 --> 00:09:22,620
community or not you're simply saying

00:09:20,790 --> 00:09:25,230
that you don't think that this solution

00:09:22,620 --> 00:09:28,050
is acceptable to grow in the kernel and

00:09:25,230 --> 00:09:32,279
that's not the way to get people to

00:09:28,050 --> 00:09:34,259
listen or react well I'm actually again

00:09:32,279 --> 00:09:36,149
this mr. we didn't pick these threads to

00:09:34,259 --> 00:09:38,040
victimize anybody so eventually this

00:09:36,149 --> 00:09:41,370
does come through to her kind of happy

00:09:38,040 --> 00:09:45,720
ending but that was not a high point in

00:09:41,370 --> 00:09:47,430
the debate so we're going to look at a

00:09:45,720 --> 00:09:50,040
simple driver now I mentioned trying to

00:09:47,430 --> 00:09:52,079
avoid the UART sometimes you have to

00:09:50,040 --> 00:09:53,939
start with the UART but this is a fairly

00:09:52,079 --> 00:09:56,209
simple driver that I hope most of the

00:09:53,939 --> 00:09:58,439
audience understands a watchdog driver

00:09:56,209 --> 00:10:01,800
and by looking at the watch the driver

00:09:58,439 --> 00:10:06,000
we will see how you structure the patch

00:10:01,800 --> 00:10:08,180
sense so on so first we've got the logic

00:10:06,000 --> 00:10:10,110
splitting of the work and there's any

00:10:08,180 --> 00:10:12,809
normally a driver is at least three

00:10:10,110 --> 00:10:14,250
patches on the architecture you might

00:10:12,809 --> 00:10:15,899
want more in your patch series but

00:10:14,250 --> 00:10:19,470
here's some examples of the kind of

00:10:15,899 --> 00:10:21,660
logical partitioning so first off you

00:10:19,470 --> 00:10:24,689
have to put the documentation for the

00:10:21,660 --> 00:10:27,899
device tree binding so the device tree

00:10:24,689 --> 00:10:28,949
binding describes what all the fields me

00:10:27,899 --> 00:10:31,079
when you document it you're saying that

00:10:28,949 --> 00:10:32,879
this field means this it's got this

00:10:31,079 --> 00:10:34,199
particular compatible string to describe

00:10:32,879 --> 00:10:36,809
the version of the harder we care about

00:10:34,199 --> 00:10:38,610
and so on and so forth the nice thing

00:10:36,809 --> 00:10:41,129
about device new bindings is of lots and

00:10:38,610 --> 00:10:44,550
lots of existing device tree binding

00:10:41,129 --> 00:10:46,110
documentation the secret of course just

00:10:44,550 --> 00:10:47,610
like the entire rest of the colonel I

00:10:46,110 --> 00:10:48,689
hope you will notice the secret in the

00:10:47,610 --> 00:10:51,629
kernel when you want to write a driver

00:10:48,689 --> 00:10:54,509
is find one that has been added recently

00:10:51,629 --> 00:10:57,899
and the maintainer liked copy it and

00:10:54,509 --> 00:10:59,399
then port it to your hardware so I

00:10:57,899 --> 00:11:01,019
mentioned again the one-on-one session

00:10:59,399 --> 00:11:02,790
the value of looking through and

00:11:01,019 --> 00:11:04,439
watching the mailing list and that

00:11:02,790 --> 00:11:06,630
allows you to spot that driver that went

00:11:04,439 --> 00:11:08,940
for you really easily

00:11:06,630 --> 00:11:10,590
exactly although maintaining wanted and

00:11:08,940 --> 00:11:13,080
you can take you through now there's a

00:11:10,590 --> 00:11:15,210
risk when you copy drivers which is that

00:11:13,080 --> 00:11:17,580
your copy an old one that was in the

00:11:15,210 --> 00:11:20,430
kernel 23 years ago isn't quite up to

00:11:17,580 --> 00:11:22,260
the thoroughly modern standards and then

00:11:20,430 --> 00:11:23,370
you copy the mistakes from it and then I

00:11:22,260 --> 00:11:24,360
maintaining will tell you to change them

00:11:23,370 --> 00:11:25,380
and you're really cross because i

00:11:24,360 --> 00:11:27,030
actually just copied somebody else let's

00:11:25,380 --> 00:11:28,290
go in the first place that's one of the

00:11:27,030 --> 00:11:30,690
reasons why you look for the most recent

00:11:28,290 --> 00:11:31,710
drivers to go in if you can you can look

00:11:30,690 --> 00:11:33,420
through the mailing archives if you

00:11:31,710 --> 00:11:34,860
haven't been filtering for very long but

00:11:33,420 --> 00:11:36,390
it's a good idea to find you know which

00:11:34,860 --> 00:11:38,250
drivers have come in recently you can do

00:11:36,390 --> 00:11:39,420
this with get you can do by Google on

00:11:38,250 --> 00:11:40,800
the mailing list but you look at which

00:11:39,420 --> 00:11:44,160
drivers have been added to the subsystem

00:11:40,800 --> 00:11:46,350
recently especially arm drivers have

00:11:44,160 --> 00:11:48,090
been added subsystem recently and see

00:11:46,350 --> 00:11:50,100
how they work to the maintainer Xand how

00:11:48,090 --> 00:11:53,100
easily they went in and that will give

00:11:50,100 --> 00:11:54,300
you a sense of which driver to copy so

00:11:53,100 --> 00:11:58,320
you have advice to you drive a binding

00:11:54,300 --> 00:12:00,780
documentation if you had some uniquely

00:11:58,320 --> 00:12:03,420
innovative watchdog you might have to

00:12:00,780 --> 00:12:05,220
change the framework now you would not

00:12:03,420 --> 00:12:08,160
put the framework changes and the driver

00:12:05,220 --> 00:12:09,510
changes into the same patch because for

00:12:08,160 --> 00:12:12,240
start the framework changes are going to

00:12:09,510 --> 00:12:13,920
have a even higher quality level than a

00:12:12,240 --> 00:12:15,630
straight driver because you don't want

00:12:13,920 --> 00:12:17,130
to make a badly designed framework so

00:12:15,630 --> 00:12:20,040
the maintainer is going to pay a lot

00:12:17,130 --> 00:12:21,210
more attention to framework patches so

00:12:20,040 --> 00:12:23,550
you definitely want to pull that out so

00:12:21,210 --> 00:12:25,320
we could be considered separately and

00:12:23,550 --> 00:12:28,740
made sure that the feature you're adding

00:12:25,320 --> 00:12:31,380
is exactly what people want the driver

00:12:28,740 --> 00:12:33,360
itself and any associated bill plumbing

00:12:31,380 --> 00:12:35,820
are a single patch so you wouldn't ever

00:12:33,360 --> 00:12:38,490
add a see file and then how to make file

00:12:35,820 --> 00:12:39,780
later because that that has no no value

00:12:38,490 --> 00:12:42,750
would always add a make file at the same

00:12:39,780 --> 00:12:47,070
time as the driver that is involved in

00:12:42,750 --> 00:12:49,070
it you might use to update defconfig so

00:12:47,070 --> 00:12:51,870
a lot of the time you know the defaults

00:12:49,070 --> 00:12:55,980
work but if you're adding a new driver

00:12:51,870 --> 00:12:58,250
on all the modern you know multi v7

00:12:55,980 --> 00:13:01,380
death cape config or arm 64 kernels

00:12:58,250 --> 00:13:03,780
there's one defconfig for many many

00:13:01,380 --> 00:13:07,170
boards so you might well want to go in

00:13:03,780 --> 00:13:11,450
and enable your driver in the critical

00:13:07,170 --> 00:13:14,370
def config files luckily for 32-bit arm

00:13:11,450 --> 00:13:17,520
that's usually multi v7 def configure

00:13:14,370 --> 00:13:20,280
these days for arm 64 there is only one

00:13:17,520 --> 00:13:20,520
defconfig it's a big change when you

00:13:20,280 --> 00:13:23,340
move

00:13:20,520 --> 00:13:25,140
arm to arm 64 and find there is not this

00:13:23,340 --> 00:13:26,340
directory of 200 deaf configs for

00:13:25,140 --> 00:13:30,390
different devices there's just one

00:13:26,340 --> 00:13:32,550
defconfig and you might want or dated

00:13:30,390 --> 00:13:38,490
and then finally you want the DTS

00:13:32,550 --> 00:13:40,710
changes to enable the driver now that

00:13:38,490 --> 00:13:42,260
logical split has a number of useful

00:13:40,710 --> 00:13:44,400
things in it one of which is that it's

00:13:42,260 --> 00:13:46,230
every bit of code that's affecting

00:13:44,400 --> 00:13:48,030
different maintainer ships the dt

00:13:46,230 --> 00:13:51,210
bindings are maintained by this case the

00:13:48,030 --> 00:13:54,870
dt team and just some extent whim who is

00:13:51,210 --> 00:13:57,510
the maintainer for i'm going to assume i

00:13:54,870 --> 00:13:59,670
said i won't move in isn't it vm who is

00:13:57,510 --> 00:14:00,900
the maintainer for watchdog he's also

00:13:59,670 --> 00:14:05,520
got a reviewer to help him which he

00:14:00,900 --> 00:14:08,030
would go on CC but then when you hit the

00:14:05,520 --> 00:14:10,980
deaf configs they would tend to be

00:14:08,030 --> 00:14:14,310
reviewed and maintained either by if

00:14:10,980 --> 00:14:16,860
you're on the arm the mech directory for

00:14:14,310 --> 00:14:19,020
your platform or possibly the arm soccer

00:14:16,860 --> 00:14:21,660
team especially on arm 64 I think it

00:14:19,020 --> 00:14:24,420
goes to the arm soft team as well and

00:14:21,660 --> 00:14:25,770
again the DTS additions tend to be

00:14:24,420 --> 00:14:28,770
looked at by on top team and other

00:14:25,770 --> 00:14:31,200
people so that's a useful split because

00:14:28,770 --> 00:14:33,240
the right reviewers can now look at just

00:14:31,200 --> 00:14:34,560
their patch some of them will look at

00:14:33,240 --> 00:14:35,880
the other patches in the series but they

00:14:34,560 --> 00:14:38,130
can focus on the patch the really

00:14:35,880 --> 00:14:41,280
matters to them and there is another

00:14:38,130 --> 00:14:43,970
reason which is that if different

00:14:41,280 --> 00:14:47,490
maintain errs take the different patches

00:14:43,970 --> 00:14:49,530
there will not be merge conflicts one of

00:14:47,490 --> 00:14:52,710
the things that makes linus torvalds

00:14:49,530 --> 00:14:54,660
very happy is where maintain is do pull

00:14:52,710 --> 00:14:58,230
requests and there are lots and lots of

00:14:54,660 --> 00:15:01,470
nasty merge conflicts so maintain errs

00:14:58,230 --> 00:15:04,260
work together to pick patches and

00:15:01,470 --> 00:15:06,060
logically sequence patches so that they

00:15:04,260 --> 00:15:08,220
merged nicely together at the end of the

00:15:06,060 --> 00:15:10,170
process so in addition to all the

00:15:08,220 --> 00:15:11,850
aspects of ownership there were also

00:15:10,170 --> 00:15:13,320
closest aspects and it just makes life

00:15:11,850 --> 00:15:17,670
much easier if the main taneous to have

00:15:13,320 --> 00:15:20,340
them split minus I think we have an

00:15:17,670 --> 00:15:23,070
example of this one so this was a real

00:15:20,340 --> 00:15:24,480
example and it's actually quite an old

00:15:23,070 --> 00:15:27,570
example it was before device she was

00:15:24,480 --> 00:15:30,180
really common so this is what we was

00:15:27,570 --> 00:15:33,210
actually sent this via the top so we had

00:15:30,180 --> 00:15:34,820
the robot dog driver and we heard the

00:15:33,210 --> 00:15:38,280
watchdog configuration

00:15:34,820 --> 00:15:40,080
so the Deaf config changes so just to

00:15:38,280 --> 00:15:41,640
give you a clearer illustration this is

00:15:40,080 --> 00:15:43,140
a more updated version of hair you would

00:15:41,640 --> 00:15:46,050
have structured the same patch on a

00:15:43,140 --> 00:15:47,910
modern colonel you would introduce the

00:15:46,050 --> 00:15:50,100
device tree bindings then you introduce

00:15:47,910 --> 00:15:52,710
the driver then you obtain the defconfig

00:15:50,100 --> 00:15:56,940
and then finally put it in the DT so

00:15:52,710 --> 00:15:58,170
that it works at runtime and so if we

00:15:56,940 --> 00:16:01,080
have the rest of this example you're

00:15:58,170 --> 00:16:02,460
going to see only two patches but to be

00:16:01,080 --> 00:16:04,470
clear and if you're not working if

00:16:02,460 --> 00:16:06,660
you're working arm 64 enterprise again

00:16:04,470 --> 00:16:08,520
you might not be using defconfig mind

00:16:06,660 --> 00:16:11,730
i'll be using device tree because they

00:16:08,520 --> 00:16:16,170
tend to prefer things like a a CPI and

00:16:11,730 --> 00:16:18,270
things like that but yes so what you

00:16:16,170 --> 00:16:21,270
want to be sending is that nice sequence

00:16:18,270 --> 00:16:24,300
of three patches the covering letter and

00:16:21,270 --> 00:16:27,210
the two real patches and we have the get

00:16:24,300 --> 00:16:28,770
format patch command to do it so you say

00:16:27,210 --> 00:16:31,710
I want to covering letter I want you to

00:16:28,770 --> 00:16:33,330
put in this directory so that I can pick

00:16:31,710 --> 00:16:36,000
it up later I asked me i don't use minus

00:16:33,330 --> 00:16:37,380
0 very much myself patches don't need to

00:16:36,000 --> 00:16:39,900
be kept once you've sent them there sent

00:16:37,380 --> 00:16:42,020
you don't need them anymore so i dint

00:16:39,900 --> 00:16:44,040
crate them in my current directory i

00:16:42,020 --> 00:16:45,360
create them i send them out and then i

00:16:44,040 --> 00:16:47,790
delete them they don't I don't need them

00:16:45,360 --> 00:16:51,990
I can regenerate them with for my patch

00:16:47,790 --> 00:16:57,450
again if I do you've then got to and CC

00:16:51,990 --> 00:17:00,920
and everything else and that's the

00:16:57,450 --> 00:17:04,080
commands you use I mean I recommend

00:17:00,920 --> 00:17:06,150
putting that command in a text file for

00:17:04,080 --> 00:17:09,150
yourself somewhere because when you do

00:17:06,150 --> 00:17:11,430
v2 and v3 and v4 you'll want to use the

00:17:09,150 --> 00:17:14,820
same command again so for as long as you

00:17:11,430 --> 00:17:17,220
have a pet that's alive I keep a txt

00:17:14,820 --> 00:17:18,810
file describing it somewhere so that you

00:17:17,220 --> 00:17:20,310
can copy the commands used to do the

00:17:18,810 --> 00:17:24,240
generating format and everything else so

00:17:20,310 --> 00:17:25,860
I personally have a a tool to help me

00:17:24,240 --> 00:17:27,120
maintain it I bring myself that's kind

00:17:25,860 --> 00:17:30,510
of relevant you you just need to find a

00:17:27,120 --> 00:17:32,070
way so that you keep those commands

00:17:30,510 --> 00:17:33,540
right because that takes quite long time

00:17:32,070 --> 00:17:37,020
to search the maintainer 'he's for three

00:17:33,540 --> 00:17:38,760
patches two patches for patches and work

00:17:37,020 --> 00:17:41,100
out what you want to put in the two and

00:17:38,760 --> 00:17:42,780
the CC and everything else just take it

00:17:41,100 --> 00:17:44,040
a few minutes and it's definitely worth

00:17:42,780 --> 00:17:46,650
preserving that work for the next

00:17:44,040 --> 00:17:47,940
version and the result is that you get

00:17:46,650 --> 00:17:50,220
these

00:17:47,940 --> 00:17:53,059
sitting in your file system ready to go

00:17:50,220 --> 00:17:56,610
and ready to be sent through check patch

00:17:53,059 --> 00:17:58,379
the covering letter will be blank so its

00:17:56,610 --> 00:18:00,080
title would be blank and the content

00:17:58,379 --> 00:18:02,279
will be blank and you go and fill it in

00:18:00,080 --> 00:18:04,470
again I keep that in a text file

00:18:02,279 --> 00:18:06,659
separately and I have an automatic tool

00:18:04,470 --> 00:18:10,710
to go and search for the markers in the

00:18:06,659 --> 00:18:12,059
the template to fill it in because I

00:18:10,710 --> 00:18:16,169
don't want have to keep rewriting the

00:18:12,059 --> 00:18:18,330
covering that or each time so you fill

00:18:16,169 --> 00:18:20,879
it in it has this summary of what you've

00:18:18,330 --> 00:18:22,769
changed which I was I was saying earlier

00:18:20,879 --> 00:18:24,750
if you're filtering for work that you've

00:18:22,769 --> 00:18:26,879
done you can search for these kind of

00:18:24,750 --> 00:18:28,200
words in the body because other people

00:18:26,879 --> 00:18:29,309
who following the same properties and

00:18:28,200 --> 00:18:32,700
when they change your file that's how

00:18:29,309 --> 00:18:34,860
they'll be doing it so again that helps

00:18:32,700 --> 00:18:37,799
maintain is working how complicated the

00:18:34,860 --> 00:18:41,190
patch is it's the lines of defects the

00:18:37,799 --> 00:18:42,570
lines of code involved so that's what

00:18:41,190 --> 00:18:43,740
the numbers are in its batch it bears

00:18:42,570 --> 00:18:48,090
keeping track of all the work that's

00:18:43,740 --> 00:18:50,879
happening so you have your first driver

00:18:48,090 --> 00:18:53,639
you've got your nice subject message

00:18:50,879 --> 00:18:56,279
you've got your commit message this

00:18:53,639 --> 00:18:58,289
reviewed by is perhaps a gray area so

00:18:56,279 --> 00:19:02,009
this particular driver well I believe

00:18:58,289 --> 00:19:03,480
happened was the they went through an

00:19:02,009 --> 00:19:05,700
eternal review process before they

00:19:03,480 --> 00:19:07,110
posted on the mailing list internal

00:19:05,700 --> 00:19:09,509
review place is a very good idea I mean

00:19:07,110 --> 00:19:11,549
I know if your club and core members you

00:19:09,509 --> 00:19:15,330
can even involve the premium services

00:19:11,549 --> 00:19:16,919
team in we won't do it every patch you

00:19:15,330 --> 00:19:19,440
send but if you're new to up streaming

00:19:16,919 --> 00:19:21,419
we can help you with kind of mentoring

00:19:19,440 --> 00:19:23,340
and checking of your patch so that you

00:19:21,419 --> 00:19:25,080
can gain confidence and that's clearly

00:19:23,340 --> 00:19:26,549
what happened here so Marcus wrote it

00:19:25,080 --> 00:19:30,240
and before they sent on the mailing list

00:19:26,549 --> 00:19:33,480
I had a look at it some people view this

00:19:30,240 --> 00:19:35,850
is bad practice for a v1 patch they

00:19:33,480 --> 00:19:38,460
would rather it got sent out without the

00:19:35,850 --> 00:19:40,289
review by and then Matt added himself

00:19:38,460 --> 00:19:43,139
publicly so but you could see it came

00:19:40,289 --> 00:19:44,490
from that but that's what actually

00:19:43,139 --> 00:19:46,049
happens or even we've left it as it

00:19:44,490 --> 00:19:49,919
actually happened but you may choose not

00:19:46,049 --> 00:19:52,110
to add these reviewed buys in the first

00:19:49,919 --> 00:19:54,929
iteration of the patch now when you send

00:19:52,110 --> 00:19:57,539
it obviously what will happen when you

00:19:54,929 --> 00:19:59,850
send out a patch is people reply with

00:19:57,539 --> 00:20:01,280
tags things like act by and reviewed by

00:19:59,850 --> 00:20:04,310
and other tags

00:20:01,280 --> 00:20:07,220
and that's giving you permission to add

00:20:04,310 --> 00:20:08,690
that tag when you resend your patch if

00:20:07,220 --> 00:20:10,070
they've asked you to make a change and

00:20:08,690 --> 00:20:12,170
then they'd say quite views that they'll

00:20:10,070 --> 00:20:13,940
make three comments and then say other

00:20:12,170 --> 00:20:16,130
than that act by and then give you their

00:20:13,940 --> 00:20:17,930
email address that's an invitations that

00:20:16,130 --> 00:20:20,270
if you followed their review comments

00:20:17,930 --> 00:20:22,130
and acted on them when you send it out

00:20:20,270 --> 00:20:25,550
you can add an act by yourself where

00:20:22,130 --> 00:20:27,710
you've got this reviewed by an aspect if

00:20:25,550 --> 00:20:29,300
you forget to add it the maintainer will

00:20:27,710 --> 00:20:32,660
quite often ask you to edit their time

00:20:29,300 --> 00:20:34,460
and because those act buys are part of

00:20:32,660 --> 00:20:36,680
the decision making process for other

00:20:34,460 --> 00:20:39,260
maintained errs so when somebody sends

00:20:36,680 --> 00:20:41,450
you an act by if you didn't have to send

00:20:39,260 --> 00:20:43,520
a new version of the patch you need to

00:20:41,450 --> 00:20:46,190
copy that act by all that reviewed by

00:20:43,520 --> 00:20:55,460
all that tested by into your perhaps

00:20:46,190 --> 00:20:58,010
that's the next time there we go yes and

00:20:55,460 --> 00:20:59,360
here we have the repost so this

00:20:58,010 --> 00:21:01,940
particular diet did get the review

00:20:59,360 --> 00:21:06,310
comments and somebody asked me before

00:21:01,940 --> 00:21:08,900
about possible formats for this thing

00:21:06,310 --> 00:21:11,330
this one's using a change since version

00:21:08,900 --> 00:21:13,730
1 which is very clear it does tell you

00:21:11,330 --> 00:21:15,320
what has changed this version 1 if you

00:21:13,730 --> 00:21:18,890
are ever unfortunate enough to get to

00:21:15,320 --> 00:21:20,360
version 15 or something it gets really

00:21:18,890 --> 00:21:21,680
hard to cope with this changes since

00:21:20,360 --> 00:21:24,470
it's much easier to put the actual

00:21:21,680 --> 00:21:27,470
version that you got so I would prefer

00:21:24,470 --> 00:21:29,420
to have put V 2 in there because not

00:21:27,470 --> 00:21:30,710
because that one's hard but it becomes

00:21:29,420 --> 00:21:32,300
harder and harder to keep track of

00:21:30,710 --> 00:21:33,830
version numbers what you've got to

00:21:32,300 --> 00:21:36,860
mentally add one each time to every

00:21:33,830 --> 00:21:38,210
version of mother you see but that if

00:21:36,860 --> 00:21:40,100
hopefully you don't get to that many

00:21:38,210 --> 00:21:42,560
patch this is not a problem but they can

00:21:40,100 --> 00:21:44,150
happen you get to very high numbers so

00:21:42,560 --> 00:21:46,250
that's listed all review comments that

00:21:44,150 --> 00:21:51,830
came up during a view that have been

00:21:46,250 --> 00:21:56,140
changed in this driver we've got

00:21:51,830 --> 00:21:58,820
specific who have you come in here and

00:21:56,140 --> 00:22:01,610
again this is a variant of the will fix

00:21:58,820 --> 00:22:02,690
yeah I will change it based on what you

00:22:01,610 --> 00:22:05,930
another couple of other reviewers have

00:22:02,690 --> 00:22:08,120
said I'll fix this for next time and

00:22:05,930 --> 00:22:10,910
then finally if you if you very lucky

00:22:08,120 --> 00:22:12,770
the maintainer will depart supply and

00:22:10,910 --> 00:22:14,990
say I've applied the patches I mean this

00:22:12,770 --> 00:22:16,700
particular case then was really generous

00:22:14,990 --> 00:22:18,860
because the where a few changes that

00:22:16,700 --> 00:22:20,120
were mostly administrative that he just

00:22:18,860 --> 00:22:24,230
performing himself before he applied

00:22:20,120 --> 00:22:25,460
before he applied it so that was the

00:22:24,230 --> 00:22:26,900
patch through to completion you can see

00:22:25,460 --> 00:22:29,540
here was a version five but I went

00:22:26,900 --> 00:22:33,830
upstream that is quite normal here it

00:22:29,540 --> 00:22:36,110
happens you can get to big numbers also

00:22:33,830 --> 00:22:38,750
not all maintainer send you an email to

00:22:36,110 --> 00:22:42,230
tell you they've applied it the place to

00:22:38,750 --> 00:22:46,460
keep an eye on is Linux next so the vast

00:22:42,230 --> 00:22:48,830
majority of maintain is make their get

00:22:46,460 --> 00:22:50,840
trees public so that anything they've

00:22:48,830 --> 00:22:53,059
merged into their own git tree will be

00:22:50,840 --> 00:22:56,179
picked up and merged into linux next to

00:22:53,059 --> 00:22:57,500
the testing so a it's a good idea to

00:22:56,179 --> 00:22:59,990
test Linux next if you've committed a

00:22:57,500 --> 00:23:00,920
driver because that's where it's going

00:22:59,990 --> 00:23:02,690
to look in the next version of the

00:23:00,920 --> 00:23:04,610
colonel so once it's been accepted it's

00:23:02,690 --> 00:23:06,530
a good idea to five Linux test linux

00:23:04,610 --> 00:23:08,750
next and make sure it works in Linux

00:23:06,530 --> 00:23:11,330
next because there may have been some

00:23:08,750 --> 00:23:13,790
bit missing or some problem but you can

00:23:11,330 --> 00:23:14,990
also watch Linux next if you put a

00:23:13,790 --> 00:23:17,960
couple of scripts around the gate pulse

00:23:14,990 --> 00:23:20,120
to spot when your code actually does

00:23:17,960 --> 00:23:24,890
land in Linux next to make you ready to

00:23:20,120 --> 00:23:26,630
test it so quick cursing on posting a

00:23:24,890 --> 00:23:28,400
driver I mentioned it can take a little

00:23:26,630 --> 00:23:32,840
while to figure out who the maintainer

00:23:28,400 --> 00:23:34,760
czar for a particular thing so in this

00:23:32,840 --> 00:23:37,010
case I wrote myself a fake patch to

00:23:34,760 --> 00:23:41,179
produce this text for you so I've

00:23:37,010 --> 00:23:44,420
created this SD host controller called

00:23:41,179 --> 00:23:46,940
foo and i wrote a patch and i actually

00:23:44,420 --> 00:23:48,230
to do gently side beat most of the patch

00:23:46,940 --> 00:23:50,090
you know i put all the building for

00:23:48,230 --> 00:23:53,300
structure in on modified make files etc

00:23:50,090 --> 00:23:55,730
etc what you notice there is i've used

00:23:53,300 --> 00:23:58,400
minus f to say who is reviewing via the

00:23:55,730 --> 00:24:00,590
maintainer for this file and that's a

00:23:58,400 --> 00:24:03,710
really good idea because we get this

00:24:00,590 --> 00:24:05,540
fairly clear response back we've got off

00:24:03,710 --> 00:24:09,830
again Alan are a champ wandering around

00:24:05,540 --> 00:24:12,650
the conference who is the maintainer for

00:24:09,830 --> 00:24:15,020
MMC and secure digital altering if my

00:24:12,650 --> 00:24:18,980
own name comes up now that's not because

00:24:15,020 --> 00:24:21,140
I've ever done any work on SD before

00:24:18,980 --> 00:24:23,300
it's because get has gone through the

00:24:21,140 --> 00:24:27,440
history and spotted that I wrote sdhc I

00:24:23,300 --> 00:24:29,659
food and therefore it's popped up

00:24:27,440 --> 00:24:31,129
so obviously i wouldn't have myself to

00:24:29,659 --> 00:24:33,559
the CC list because i know that i just

00:24:31,129 --> 00:24:35,059
really i'm trying to upstream it but of

00:24:33,559 --> 00:24:37,309
course of any else wants to change that

00:24:35,059 --> 00:24:40,580
file they will quite often see your name

00:24:37,309 --> 00:24:42,529
and add you to CC and then finally it's

00:24:40,580 --> 00:24:46,639
listed the mailing list so you pick out

00:24:42,529 --> 00:24:48,019
the the two people in that list that you

00:24:46,639 --> 00:24:51,340
will need to use elf and the mailing

00:24:48,019 --> 00:24:56,059
list you add all for the two you add

00:24:51,340 --> 00:24:57,289
Linux MMC to the CC list and you put

00:24:56,059 --> 00:24:58,940
that in your fauit patch and you run

00:24:57,289 --> 00:25:00,649
that for all the patches so you run

00:24:58,940 --> 00:25:02,299
patch one two three four how many

00:25:00,649 --> 00:25:04,399
patches you've got and that helps you

00:25:02,299 --> 00:25:06,710
generate your to list now the reason

00:25:04,399 --> 00:25:10,039
i've used minus f there is because if

00:25:06,710 --> 00:25:12,730
you don't use minus f that is what falls

00:25:10,039 --> 00:25:14,870
out of the get maintainer script and

00:25:12,730 --> 00:25:17,690
this is a particular phenomenon what's

00:25:14,870 --> 00:25:19,669
happening here is you've got off at the

00:25:17,690 --> 00:25:21,440
top just as you had before and although

00:25:19,669 --> 00:25:24,620
you can't read it you've also got the

00:25:21,440 --> 00:25:26,960
negs MMC right at the bottom but what's

00:25:24,620 --> 00:25:29,720
happened is because i've asked you to

00:25:26,960 --> 00:25:32,750
check the patch rather than the driver

00:25:29,720 --> 00:25:36,049
it's gone through the make file and it's

00:25:32,750 --> 00:25:39,620
given you a list of every person who has

00:25:36,049 --> 00:25:41,059
ever written an sdhc I driver which is

00:25:39,620 --> 00:25:43,580
not the set of people you need to see

00:25:41,059 --> 00:25:45,769
see that's a far too big list of CC so

00:25:43,580 --> 00:25:48,080
we'd get maintainer it's a good starting

00:25:45,769 --> 00:25:51,860
point but you do have to think about

00:25:48,080 --> 00:25:54,279
what is giving you if you find files

00:25:51,860 --> 00:25:59,840
where somebody's written you know

00:25:54,279 --> 00:26:01,850
ninety-five percent of it or even signed

00:25:59,840 --> 00:26:02,960
ninety-five percent of it you might want

00:26:01,850 --> 00:26:04,070
to see see them it's somebody who

00:26:02,960 --> 00:26:06,950
cleared as a lot of review in that

00:26:04,070 --> 00:26:08,840
subsystem if you down at ten percent

00:26:06,950 --> 00:26:10,580
you're probably looking somebody just

00:26:08,840 --> 00:26:14,230
wrote a quick patch to fix the bug once

00:26:10,580 --> 00:26:16,309
and as moved on so these percentages

00:26:14,230 --> 00:26:18,590
again you can see obviously maintain it

00:26:16,309 --> 00:26:20,419
does sign the vast majority patches in

00:26:18,590 --> 00:26:22,429
the subsystem so you see that very high

00:26:20,419 --> 00:26:25,940
percentages you also notice this chap

00:26:22,429 --> 00:26:28,100
from souza who's clearly worked in quite

00:26:25,940 --> 00:26:29,480
a lot of areas and might well be started

00:26:28,100 --> 00:26:31,340
to review things you might choose to add

00:26:29,480 --> 00:26:34,039
him on CC because he might want to

00:26:31,340 --> 00:26:35,299
review your patch as well but down the

00:26:34,039 --> 00:26:37,460
bottom you're seeing people who've

00:26:35,299 --> 00:26:39,379
written exactly what driver wants

00:26:37,460 --> 00:26:41,679
there'll be no need to see see people

00:26:39,379 --> 00:26:41,679
like that

00:26:44,299 --> 00:26:48,149
okay so it's been at examples to now we

00:26:46,889 --> 00:26:50,909
will come back to an example at the end

00:26:48,149 --> 00:26:56,059
if we're doing well for time but we are

00:26:50,909 --> 00:26:58,230
going to look a bit more at tools now

00:26:56,059 --> 00:26:59,759
just to be actually if there's any

00:26:58,230 --> 00:27:01,200
questions at this stage by the examples

00:26:59,759 --> 00:27:04,950
we've looked at it is a good time to

00:27:01,200 --> 00:27:06,779
break the questions I can see the

00:27:04,950 --> 00:27:14,519
gentleman is just putting down with

00:27:06,779 --> 00:27:22,429
microphone as we speak are you motion

00:27:14,519 --> 00:27:29,129
like a beautiful my patch with / 2 + /

00:27:22,429 --> 00:27:37,289
cece and the my question is why we need

00:27:29,129 --> 00:27:42,720
to include the two lists and the CCD in

00:27:37,289 --> 00:27:44,490
the content of patches why why I need to

00:27:42,720 --> 00:27:54,929
be sure the difference being too in CC

00:27:44,490 --> 00:27:58,379
do you mean I mean I mean even we

00:27:54,929 --> 00:28:01,139
include the tourists and necessities in

00:27:58,379 --> 00:28:11,190
the patches in the content of patches we

00:28:01,139 --> 00:28:13,799
also need to configure okay turning the

00:28:11,190 --> 00:28:16,440
pages right there are two ways you can

00:28:13,799 --> 00:28:20,730
include somebody as CC on a patch this

00:28:16,440 --> 00:28:23,309
is true you can use get format patch- CC

00:28:20,730 --> 00:28:26,960
and that will add them to the hold of

00:28:23,309 --> 00:28:28,980
the patch series so if you want somebody

00:28:26,960 --> 00:28:31,470
very first thing with the difference in

00:28:28,980 --> 00:28:33,600
two and CC so too is the person you

00:28:31,470 --> 00:28:36,000
expect to take some action typically a

00:28:33,600 --> 00:28:38,639
maintainer and there are maintained errs

00:28:36,000 --> 00:28:39,870
who if they are not in the to assume

00:28:38,639 --> 00:28:41,610
you're talking to somebody else and

00:28:39,870 --> 00:28:43,289
don't take any action if you add

00:28:41,610 --> 00:28:45,659
maintain us the CC less some of them

00:28:43,289 --> 00:28:48,000
will not assume that you would like them

00:28:45,659 --> 00:28:49,590
to take any kind of action so you put

00:28:48,000 --> 00:28:51,600
maintain is in the to list if you want

00:28:49,590 --> 00:28:54,119
them to take action full of the mail but

00:28:51,600 --> 00:28:55,979
cc's are a little bit more complicated

00:28:54,119 --> 00:28:57,929
CC is usually used for somebody who

00:28:55,979 --> 00:29:00,269
would be interested in the change who

00:28:57,929 --> 00:29:02,399
might choose to do review might have an

00:29:00,269 --> 00:29:05,309
opinion about these things and there are

00:29:02,399 --> 00:29:07,769
two ways you can put somebody on CC you

00:29:05,309 --> 00:29:10,079
can use this minus minus CC to the

00:29:07,769 --> 00:29:12,569
former patch when they'll get the whole

00:29:10,079 --> 00:29:14,249
series or if you've got a big series and

00:29:12,569 --> 00:29:17,519
you think they might only be interested

00:29:14,249 --> 00:29:19,439
in a few of the patches in it when

00:29:17,519 --> 00:29:22,109
you're doing the signed off by at the

00:29:19,439 --> 00:29:24,359
bottom of your patch you can actually

00:29:22,109 --> 00:29:27,599
put a CC they're just as you would put

00:29:24,359 --> 00:29:29,519
the reviewed by or the backed by area

00:29:27,599 --> 00:29:30,959
and that will cause get format patch to

00:29:29,519 --> 00:29:33,749
pick out the email address and send it

00:29:30,959 --> 00:29:35,819
to them the other thing it does is it

00:29:33,749 --> 00:29:39,179
creates a record in the version control

00:29:35,819 --> 00:29:42,359
system that they were cc'd which can be

00:29:39,179 --> 00:29:44,219
used with so many complaints so for the

00:29:42,359 --> 00:29:46,559
most part when you're doing a single

00:29:44,219 --> 00:29:48,599
driver this is the best way to do it if

00:29:46,559 --> 00:29:52,169
you've got a complicated driver set

00:29:48,599 --> 00:29:55,039
perhaps set you might use this extra CC

00:29:52,169 --> 00:29:57,389
tagging get which sits if I dig out the

00:29:55,039 --> 00:29:59,309
it's it's just here so after your signed

00:29:57,389 --> 00:30:08,939
off by you can also add cc's of people

00:29:59,309 --> 00:30:10,709
you want to see the patch is that that's

00:30:08,939 --> 00:30:15,289
not somebody who you necessarily expect

00:30:10,709 --> 00:30:17,309
to take direct action since that's on CC

00:30:15,289 --> 00:30:20,729
yeah it's somebody who might be

00:30:17,309 --> 00:30:22,499
interested I mean one way that some

00:30:20,729 --> 00:30:24,989
people choose to get involved in kernel

00:30:22,499 --> 00:30:27,719
development is to watch a subsystem and

00:30:24,989 --> 00:30:28,829
contribute reviews it's actually quite a

00:30:27,719 --> 00:30:30,479
good way to learn a lot quite quickly

00:30:28,829 --> 00:30:32,339
because you get to read a lot of code

00:30:30,479 --> 00:30:37,889
think about it and of course if your

00:30:32,339 --> 00:30:39,149
review is is incorrect and somebody else

00:30:37,889 --> 00:30:40,379
will kind of can to review and argue

00:30:39,149 --> 00:30:41,849
with you so it's quite a good way to

00:30:40,379 --> 00:30:44,699
learn things although you have to be

00:30:41,849 --> 00:30:45,899
quite brave but yeah so CC is for people

00:30:44,699 --> 00:30:48,809
who might be interested the original

00:30:45,899 --> 00:30:50,729
author should if you've got a driver who

00:30:48,809 --> 00:30:52,409
is maintained by somebody else but

00:30:50,729 --> 00:30:53,789
there's an original author it's a very

00:30:52,409 --> 00:30:58,339
very good idea to see see the original

00:30:53,789 --> 00:30:58,339
order for example

00:31:03,820 --> 00:31:09,460
okay so we look at a few techniques now

00:31:06,340 --> 00:31:11,350
now to be many of things we've talked

00:31:09,460 --> 00:31:13,810
about our ways to avoid boring mistakes

00:31:11,350 --> 00:31:16,630
and you should do them when we talk

00:31:13,810 --> 00:31:18,970
about the tools and techniques nothing

00:31:16,630 --> 00:31:20,920
here is mandatory these are all

00:31:18,970 --> 00:31:22,900
techniques that you can use to give

00:31:20,920 --> 00:31:25,660
yourself more confidence working with

00:31:22,900 --> 00:31:27,520
the community so the maintain is don't

00:31:25,660 --> 00:31:29,680
care if you're using any of these tools

00:31:27,520 --> 00:31:31,030
if your code is correct to the right

00:31:29,680 --> 00:31:33,820
standard and appears to be properly

00:31:31,030 --> 00:31:37,630
tested they don't care if you've use

00:31:33,820 --> 00:31:40,150
these tools so it's not up to me to say

00:31:37,630 --> 00:31:41,710
use these tools it's up to you to kind

00:31:40,150 --> 00:31:43,990
of intelligently and critically listen

00:31:41,710 --> 00:31:47,350
and see which of these techniques fits

00:31:43,990 --> 00:31:48,580
the way you want to work so with that

00:31:47,350 --> 00:31:51,490
disclaimer we've already talked about

00:31:48,580 --> 00:31:54,100
the mailing lists and particularly the

00:31:51,490 --> 00:31:56,680
use of the special gmail account is an

00:31:54,100 --> 00:31:58,570
idea it's very optional it might not be

00:31:56,680 --> 00:32:02,940
the best thing for you I love it I think

00:31:58,570 --> 00:32:04,750
it's a great technique but it's optional

00:32:02,940 --> 00:32:07,600
but I'm going to move on to this point

00:32:04,750 --> 00:32:09,400
now and talk about source navigation so

00:32:07,600 --> 00:32:11,470
source navigation is a really really

00:32:09,400 --> 00:32:13,090
important skill for anybody who's

00:32:11,470 --> 00:32:15,490
contributing to something as big as the

00:32:13,090 --> 00:32:18,790
links colonel because it's the only way

00:32:15,490 --> 00:32:21,100
in my opinion you can learn enough of

00:32:18,790 --> 00:32:24,340
the colonel in the sections that you're

00:32:21,100 --> 00:32:27,040
working on to actually have opinions

00:32:24,340 --> 00:32:30,310
about how things should be done if you

00:32:27,040 --> 00:32:33,460
can browse the colonel quickly not least

00:32:30,310 --> 00:32:36,730
if that maintain ask you something they

00:32:33,460 --> 00:32:38,200
offer a question that you can provide an

00:32:36,730 --> 00:32:39,940
answer because you can go through your

00:32:38,200 --> 00:32:43,750
source now and find the line of code

00:32:39,940 --> 00:32:45,820
where this happens you know that's the

00:32:43,750 --> 00:32:48,300
sort of thing in a maintainer says are

00:32:45,820 --> 00:32:50,590
you sure if it's safe when this happens

00:32:48,300 --> 00:32:53,950
then you've either got to show that it

00:32:50,590 --> 00:32:55,120
is safe all that it doesn't happen and

00:32:53,950 --> 00:32:56,530
you can only do that by diving through

00:32:55,120 --> 00:32:57,670
the code and looking at all the code

00:32:56,530 --> 00:32:59,230
paths that lead up to a particular

00:32:57,670 --> 00:33:02,740
function call make sure they have all

00:32:59,230 --> 00:33:04,000
certain properties guaranteed it's the

00:33:02,740 --> 00:33:05,740
source code that helps you find that out

00:33:04,000 --> 00:33:07,000
and it makes you dramatically more

00:33:05,740 --> 00:33:10,300
productive if you can move around the

00:33:07,000 --> 00:33:11,410
source code quickly so I wouldn't be

00:33:10,300 --> 00:33:13,650
saying that you should be absolutely

00:33:11,410 --> 00:33:16,270
sure to have at least one possibly more

00:33:13,650 --> 00:33:17,080
indexing tools integrating to your

00:33:16,270 --> 00:33:20,770
personal work

00:33:17,080 --> 00:33:23,050
flow even more than that the colonel

00:33:20,770 --> 00:33:25,690
build system includes support for

00:33:23,050 --> 00:33:30,040
various types of code navigators and

00:33:25,690 --> 00:33:31,570
indexes now let me start with a quick

00:33:30,040 --> 00:33:35,740
problem you get here particularly with

00:33:31,570 --> 00:33:38,940
cscope is that if you ask cscope to

00:33:35,740 --> 00:33:41,230
index the legs colonel people index all

00:33:38,940 --> 00:33:43,510
come about how many hours 20-something

00:33:41,230 --> 00:33:47,160
architectures and there if you then look

00:33:43,510 --> 00:33:49,720
for how spin lock works spin lock lock

00:33:47,160 --> 00:33:52,240
you will have to wade through 20

00:33:49,720 --> 00:33:53,440
different implementations which if

00:33:52,240 --> 00:33:55,030
you're trying to write a portable driver

00:33:53,440 --> 00:33:56,140
can be really useful because of course

00:33:55,030 --> 00:33:59,230
the spin locks don't all work the same

00:33:56,140 --> 00:34:01,660
in all cases but if you're trying to

00:33:59,230 --> 00:34:03,010
follow how a particular thing works on a

00:34:01,660 --> 00:34:04,570
particular activity it's just in your

00:34:03,010 --> 00:34:06,550
way most of the time if you want to know

00:34:04,570 --> 00:34:08,890
how the arm is going to behave it's in

00:34:06,550 --> 00:34:10,540
your way so if you use one of the

00:34:08,890 --> 00:34:13,270
supported indexes which the main system

00:34:10,540 --> 00:34:16,720
knows about it will automatically

00:34:13,270 --> 00:34:18,100
exclude the other architectures which of

00:34:16,720 --> 00:34:19,720
the most time helps you get through more

00:34:18,100 --> 00:34:23,980
quickly and helps you form mental models

00:34:19,720 --> 00:34:26,230
more quickly so you can pick C tags you

00:34:23,980 --> 00:34:29,170
can pick cscope you can pick a new

00:34:26,230 --> 00:34:31,780
global they're all different levels of

00:34:29,170 --> 00:34:33,700
power some can search for who defined a

00:34:31,780 --> 00:34:38,740
function others are just looking for

00:34:33,700 --> 00:34:40,930
symbols I don't I have a favorite I have

00:34:38,740 --> 00:34:42,850
a favorite that I like if you have a

00:34:40,930 --> 00:34:45,730
favorite that you like use that one if

00:34:42,850 --> 00:34:48,510
you don't have a favorite my suggestion

00:34:45,730 --> 00:34:52,300
is to star with cscope which is a fairly

00:34:48,510 --> 00:34:55,090
elderly source navigator these days but

00:34:52,300 --> 00:34:57,370
it's you know it does a good job on the

00:34:55,090 --> 00:35:01,150
lengths kernel and it's able to do

00:34:57,370 --> 00:35:02,590
called by and called checks it's also

00:35:01,150 --> 00:35:04,530
able to find out who includes what

00:35:02,590 --> 00:35:06,970
header files which can be really useful

00:35:04,530 --> 00:35:09,490
so it's not the best source never there

00:35:06,970 --> 00:35:12,310
is I suspect but it's a sane default to

00:35:09,490 --> 00:35:14,590
start with and there's also this little

00:35:12,310 --> 00:35:16,180
tool called see browser which is a GUI

00:35:14,590 --> 00:35:19,930
that sits over the top of cscope I mean

00:35:16,180 --> 00:35:22,570
all the kind of program editors things

00:35:19,930 --> 00:35:25,930
like veerman C and E max and other

00:35:22,570 --> 00:35:27,400
editors have got cscope plugins so you

00:35:25,930 --> 00:35:29,530
don't have to leave your favorite editor

00:35:27,400 --> 00:35:30,260
to take advantage of these things but if

00:35:29,530 --> 00:35:32,600
you

00:35:30,260 --> 00:35:34,250
do you use a GUI editor which doesn't

00:35:32,600 --> 00:35:39,860
have these support see browser can also

00:35:34,250 --> 00:35:43,280
help you I said more than one source

00:35:39,860 --> 00:35:46,700
navigator now when you want a really

00:35:43,280 --> 00:35:48,890
picture possibly you want to step

00:35:46,700 --> 00:35:51,800
forwards and backwards in time you want

00:35:48,890 --> 00:35:53,210
to see how an API evolved the web North

00:35:51,800 --> 00:35:55,010
source source now via the links is huge

00:35:53,210 --> 00:35:57,110
project there's lots of it covered on

00:35:55,010 --> 00:35:59,180
the web so the web-based source

00:35:57,110 --> 00:36:01,880
navigators are a really good tool in

00:35:59,180 --> 00:36:03,620
your arsenal for two reasons one is if

00:36:01,880 --> 00:36:06,830
you have to come to a conference like

00:36:03,620 --> 00:36:08,240
connect you might have taken a travel

00:36:06,830 --> 00:36:10,520
laptop with your a Chromebook and you

00:36:08,240 --> 00:36:11,390
haven't got your workstation so when

00:36:10,520 --> 00:36:14,210
you're having an argument in the

00:36:11,390 --> 00:36:15,860
corridor a web navigator is definitely

00:36:14,210 --> 00:36:17,270
your friend the other one is that

00:36:15,860 --> 00:36:20,660
facility to step forwards and backwards

00:36:17,270 --> 00:36:25,010
in time so if you use something like lxr

00:36:20,660 --> 00:36:27,470
and Linux cross-reference that one tends

00:36:25,010 --> 00:36:28,760
to have everything since 310 index and

00:36:27,470 --> 00:36:33,170
you can click on the version you care

00:36:28,760 --> 00:36:35,690
about and things like that there's one

00:36:33,170 --> 00:36:38,450
final fly in the ointment for source

00:36:35,690 --> 00:36:41,600
navigation and that is caused by an

00:36:38,450 --> 00:36:44,360
element of the Linux coding style which

00:36:41,600 --> 00:36:47,930
holds that it is a mistake to use

00:36:44,360 --> 00:36:49,520
typedef for structures so that's when

00:36:47,930 --> 00:36:52,700
the Linux kernel you almost always see

00:36:49,520 --> 00:36:54,890
it struct name rather than having a

00:36:52,700 --> 00:36:58,850
typedef to rename the strip to something

00:36:54,890 --> 00:37:03,650
else what that means however is in

00:36:58,850 --> 00:37:06,140
header files you get these kind of lines

00:37:03,650 --> 00:37:10,370
where because virtual container is a

00:37:06,140 --> 00:37:11,600
pointer you don't have to have the full

00:37:10,370 --> 00:37:15,380
definition of the structure and that

00:37:11,600 --> 00:37:17,000
makes this technically and i forgot the

00:37:15,380 --> 00:37:18,920
technical name in the c standard but it

00:37:17,000 --> 00:37:21,320
makes that a declaration of the virtual

00:37:18,920 --> 00:37:24,320
container symbol and so when you say

00:37:21,320 --> 00:37:25,910
what defines virtual container every

00:37:24,320 --> 00:37:28,280
single function that uses a virtual

00:37:25,910 --> 00:37:29,930
container comes up it's a particular

00:37:28,280 --> 00:37:32,720
moment cscope and it's fine if you're

00:37:29,930 --> 00:37:34,910
using a obscure structure but if you're

00:37:32,720 --> 00:37:37,310
using something like KO g which is all

00:37:34,910 --> 00:37:39,800
over the colonel if you're trying to

00:37:37,310 --> 00:37:41,360
find the definition of KO g and you see

00:37:39,800 --> 00:37:43,550
every single function that passes a que

00:37:41,360 --> 00:37:44,160
up do you ever find it and at that point

00:37:43,550 --> 00:37:47,160
you simply

00:37:44,160 --> 00:37:49,049
fall back to grab you can use get grep

00:37:47,160 --> 00:37:51,150
which will search through the whole sub

00:37:49,049 --> 00:37:53,339
tree for the directory you are currently

00:37:51,150 --> 00:37:55,460
in in a git repository so if you in the

00:37:53,339 --> 00:37:57,539
top directory it will search everything

00:37:55,460 --> 00:37:58,799
it's a good trick to move to include

00:37:57,539 --> 00:38:00,059
because if you're inside the include

00:37:58,799 --> 00:38:03,750
directory you don't have to search as

00:38:00,059 --> 00:38:07,349
much code and you look for the struct

00:38:03,750 --> 00:38:08,970
and the opening brace because that's the

00:38:07,349 --> 00:38:11,250
shape that all structures that are

00:38:08,970 --> 00:38:12,450
defined are in the linux kernel so if

00:38:11,250 --> 00:38:14,190
you have that particular form of your

00:38:12,450 --> 00:38:15,630
source navigator and then just bypass it

00:38:14,190 --> 00:38:20,339
with this get grip and then go back to

00:38:15,630 --> 00:38:21,990
using the source navigation so as if a

00:38:20,339 --> 00:38:24,869
source now if like I say pick one you

00:38:21,990 --> 00:38:27,059
really like and it will help you mind

00:38:24,869 --> 00:38:30,329
things if any of you are Android

00:38:27,059 --> 00:38:34,609
developers and you work on AOSP there is

00:38:30,329 --> 00:38:38,490
also a tool called bring back your name

00:38:34,609 --> 00:38:40,970
bye son I'll come back that sorry have

00:38:38,490 --> 00:38:44,490
blanked completely or what that's called

00:38:40,970 --> 00:38:45,809
but it's it's a thing you want to source

00:38:44,490 --> 00:38:47,789
an F your Android as well but when you

00:38:45,809 --> 00:38:49,470
source nephew Android things like csgo

00:38:47,789 --> 00:38:51,000
just aren't fast enough you have to find

00:38:49,470 --> 00:38:55,260
web-based navigators because they're

00:38:51,000 --> 00:38:58,049
this any way to get the speed up ok so

00:38:55,260 --> 00:39:00,299
for static checkers static checkers are

00:38:58,049 --> 00:39:04,380
basically tools that do not execute the

00:39:00,299 --> 00:39:06,210
code which is dynamic checking they look

00:39:04,380 --> 00:39:09,779
at the source code and look for errors

00:39:06,210 --> 00:39:12,270
in it and the more static checkers you

00:39:09,779 --> 00:39:15,589
can hurl your code the more likely you

00:39:12,270 --> 00:39:17,940
are to find faults early in the process

00:39:15,589 --> 00:39:19,799
this is good for two reasons one is that

00:39:17,940 --> 00:39:21,210
other people run static takers on your

00:39:19,799 --> 00:39:24,390
code later on and they will find bugs

00:39:21,210 --> 00:39:25,950
that using no amount and the other is

00:39:24,390 --> 00:39:27,869
that occasionally the maintainers will

00:39:25,950 --> 00:39:29,010
run in a static checker for you when

00:39:27,869 --> 00:39:30,539
they integrate it and if I maintain

00:39:29,010 --> 00:39:33,000
assist something like your patch

00:39:30,539 --> 00:39:34,200
introduces a sparse warning you need to

00:39:33,000 --> 00:39:36,420
know at events pass otherwise you will

00:39:34,200 --> 00:39:37,470
fix it because they won't you know that

00:39:36,420 --> 00:39:40,079
they're done at that point once they've

00:39:37,470 --> 00:39:41,849
said your patch has created a sparse

00:39:40,079 --> 00:39:43,500
warning they need to tell you what it is

00:39:41,849 --> 00:39:45,809
they expect you to go and run sparse and

00:39:43,500 --> 00:39:47,400
figure it out and that's not a time to

00:39:45,809 --> 00:39:48,450
go back to a plane and maintained her

00:39:47,400 --> 00:39:51,380
and say could you tell me what it is

00:39:48,450 --> 00:39:53,579
that's a time to learn to you space so

00:39:51,380 --> 00:39:55,170
you should integrate static flex

00:39:53,579 --> 00:39:57,650
checkers into your workflow without any

00:39:55,170 --> 00:39:57,650
question

00:39:58,470 --> 00:40:02,289
so again there are lots of static

00:40:00,490 --> 00:40:05,380
checkers built in to the colonel and

00:40:02,289 --> 00:40:08,559
it's important now to run them so you

00:40:05,380 --> 00:40:09,759
have this tool called check and it's as

00:40:08,559 --> 00:40:14,410
simple as that there's a variable in the

00:40:09,759 --> 00:40:17,019
make file and if you set check then it

00:40:14,410 --> 00:40:19,059
will be run using see flags on the file

00:40:17,019 --> 00:40:26,740
so you can see the example here we've

00:40:19,059 --> 00:40:28,210
set check too sparse and it's called

00:40:26,740 --> 00:40:30,400
with all the sea arguments so your

00:40:28,210 --> 00:40:32,049
static checker or a rapper script needs

00:40:30,400 --> 00:40:33,430
know how to pass all the various

00:40:32,049 --> 00:40:34,569
arguments defined and process the head

00:40:33,430 --> 00:40:36,309
of Oz I mean it's important to get all

00:40:34,569 --> 00:40:38,230
those because otherwise you can't run

00:40:36,309 --> 00:40:39,279
the c preprocessor and if you can't the

00:40:38,230 --> 00:40:41,410
CP process so you can't actually

00:40:39,279 --> 00:40:43,660
statically analyze properly so you have

00:40:41,410 --> 00:40:45,670
to have most of the sea flags anyway but

00:40:43,660 --> 00:40:47,589
w error can be a good one some static

00:40:45,670 --> 00:40:49,119
some static checkers don't understand w

00:40:47,589 --> 00:40:53,170
error and you have to put a wrap around

00:40:49,119 --> 00:40:56,380
to get rid of it sparse semantic parser

00:40:53,170 --> 00:40:59,470
this the key feature of sparse is an

00:40:56,380 --> 00:41:01,539
enriched type system so i can give you

00:40:59,470 --> 00:41:05,619
the really classic example in the

00:41:01,539 --> 00:41:07,809
colonel it is a bug a nasty potential

00:41:05,619 --> 00:41:12,579
security bug to dereference a user

00:41:07,809 --> 00:41:15,940
pointer directly but it's the same size

00:41:12,579 --> 00:41:19,779
and the same type usually as appointed

00:41:15,940 --> 00:41:21,759
to Colonel data so what happens is

00:41:19,779 --> 00:41:25,000
inside the colonel there are lots of

00:41:21,759 --> 00:41:27,220
tags on various types to mark code as

00:41:25,000 --> 00:41:28,480
being user or kernel d referenceable

00:41:27,220 --> 00:41:30,160
naughty referenceable is that there's

00:41:28,480 --> 00:41:32,650
quite a few different tags you can apply

00:41:30,160 --> 00:41:36,099
and so sparse has this Richard type

00:41:32,650 --> 00:41:37,750
system that can see if you've got

00:41:36,099 --> 00:41:39,099
mismatched types if you're reading a

00:41:37,750 --> 00:41:42,220
user pointer and writing it to kernel

00:41:39,099 --> 00:41:44,140
space and things like that and you can

00:41:42,220 --> 00:41:46,720
see exactly that here in correct type in

00:41:44,140 --> 00:41:48,789
arguing one different address space that

00:41:46,720 --> 00:41:54,099
is an example of sparse having spotted

00:41:48,789 --> 00:41:59,319
that the two the two uses are

00:41:54,099 --> 00:42:01,240
incompatible I haven't got time today to

00:41:59,319 --> 00:42:03,069
give you an exhaustive list of all the

00:42:01,240 --> 00:42:05,829
static checkers you can use and deploy

00:42:03,069 --> 00:42:07,750
but I can pull you and make help if you

00:42:05,829 --> 00:42:09,900
run make help on the legs colonel today

00:42:07,750 --> 00:42:11,700
it will list

00:42:09,900 --> 00:42:15,090
a lot of the static checkers that are

00:42:11,700 --> 00:42:16,830
built into it so there's kachchi is

00:42:15,090 --> 00:42:18,510
particularly interesting but there's a

00:42:16,830 --> 00:42:20,880
collection of things there the slides

00:42:18,510 --> 00:42:21,870
are available on the conference you

00:42:20,880 --> 00:42:24,210
should have had in strokes on how to

00:42:21,870 --> 00:42:25,410
fetch them you can also email the

00:42:24,210 --> 00:42:29,250
lifetime warranty address we'll talk

00:42:25,410 --> 00:42:31,290
around a minute you can turn on lots of

00:42:29,250 --> 00:42:33,840
warnings with W equals one that gives

00:42:31,290 --> 00:42:36,090
you lots of warnings compiler warnings

00:42:33,840 --> 00:42:37,410
can be particularly useful and there's

00:42:36,090 --> 00:42:39,090
an additional selection of things you

00:42:37,410 --> 00:42:40,910
can run now final thing I'd like to show

00:42:39,090 --> 00:42:43,500
you is this bringing it all together

00:42:40,910 --> 00:42:46,190
warnings or particular pain because the

00:42:43,500 --> 00:42:48,510
colonel my existing lee issue warnings

00:42:46,190 --> 00:42:51,030
this is a terrific script it's called

00:42:48,510 --> 00:42:57,030
III I think it was run by somebody at

00:42:51,030 --> 00:42:59,820
Intel and it allows you to run with lots

00:42:57,030 --> 00:43:02,400
of warnings and all the static checkers

00:42:59,820 --> 00:43:05,490
on a bunch of different architectures

00:43:02,400 --> 00:43:07,320
all at the same time and to run a whole

00:43:05,490 --> 00:43:09,120
patch said and it will go to each patch

00:43:07,320 --> 00:43:11,520
individually compile the patch so you

00:43:09,120 --> 00:43:13,800
get bisect ability testing so you can go

00:43:11,520 --> 00:43:16,440
for a patch that of 10 patches and it

00:43:13,800 --> 00:43:18,360
will compile each one separately and it

00:43:16,440 --> 00:43:21,450
will run each one through the static

00:43:18,360 --> 00:43:25,670
checkers and it will only tell you about

00:43:21,450 --> 00:43:27,960
new warnings so it runs the baseline

00:43:25,670 --> 00:43:31,500
captures all the warnings and all the

00:43:27,960 --> 00:43:33,180
static checker false positives then it

00:43:31,500 --> 00:43:34,800
adds your patch and runs it again and

00:43:33,180 --> 00:43:36,900
compares the two and if you've

00:43:34,800 --> 00:43:39,090
introduced new warnings it will tell you

00:43:36,900 --> 00:43:41,070
but it will not waste your time showing

00:43:39,090 --> 00:43:43,320
you all the existing warnings so it's a

00:43:41,070 --> 00:43:45,750
really great way to run the static

00:43:43,320 --> 00:43:48,150
checkers without getting dell used in

00:43:45,750 --> 00:43:52,650
false positives so I really recommend

00:43:48,150 --> 00:43:56,100
having a look at that right there so

00:43:52,650 --> 00:44:00,090
hunting regressions basically should

00:43:56,100 --> 00:44:01,200
automate pretty much everything and the

00:44:00,090 --> 00:44:03,510
reason for that is that you've got this

00:44:01,200 --> 00:44:05,520
bisect ability and if you can automate

00:44:03,510 --> 00:44:06,720
your tests then if your code breaks at

00:44:05,520 --> 00:44:09,650
some point in the future you can find

00:44:06,720 --> 00:44:11,760
out how it was broken who broke it when

00:44:09,650 --> 00:44:13,440
maintain is do that with every single

00:44:11,760 --> 00:44:15,800
commit or they try and they mostly

00:44:13,440 --> 00:44:17,580
succeed so the vast majority of

00:44:15,800 --> 00:44:20,400
intermediate stages in kerman

00:44:17,580 --> 00:44:23,369
development our compiler ball and so you

00:44:20,400 --> 00:44:25,319
can use bisect to automatically search

00:44:23,369 --> 00:44:27,390
through the gate history from a good

00:44:25,319 --> 00:44:30,740
point to a bad point and find exactly

00:44:27,390 --> 00:44:33,440
the patch which introduced a problem

00:44:30,740 --> 00:44:35,970
it's quick aside yes automate everything

00:44:33,440 --> 00:44:38,369
it's your platform right you're the sock

00:44:35,970 --> 00:44:41,339
driver water nobody cares more than you

00:44:38,369 --> 00:44:43,319
about keeping it running so having

00:44:41,339 --> 00:44:45,329
automatic testing of basic build colonel

00:44:43,319 --> 00:44:46,589
features is valuable loads and loads of

00:44:45,329 --> 00:44:49,140
options you can go to this we can help

00:44:46,589 --> 00:44:51,420
you of lava public labs your own private

00:44:49,140 --> 00:44:54,289
labs test infrastructure but your

00:44:51,420 --> 00:44:56,490
testing is the best thing you can do and

00:44:54,289 --> 00:44:58,499
I've listed some characteristic good

00:44:56,490 --> 00:45:02,789
automation but this is the key thing for

00:44:58,499 --> 00:45:06,390
me it is no excuses your management may

00:45:02,789 --> 00:45:08,160
not you know it be investing in this you

00:45:06,390 --> 00:45:09,809
may not have equipment to call Norwin

00:45:08,160 --> 00:45:14,779
take automatic reboot power control

00:45:09,809 --> 00:45:16,920
module when you're searching progression

00:45:14,779 --> 00:45:20,099
computers are so much better at

00:45:16,920 --> 00:45:23,819
repeating the actions needed to do a 10

00:45:20,099 --> 00:45:25,410
or 12 step bisect than you are and even

00:45:23,819 --> 00:45:27,869
if you can't automate every single thing

00:45:25,410 --> 00:45:30,180
you can have a script that pops up and

00:45:27,869 --> 00:45:31,289
says please press the reset button and

00:45:30,180 --> 00:45:33,509
you press the reset button and press

00:45:31,289 --> 00:45:35,309
return and then does the rest of it and

00:45:33,509 --> 00:45:38,249
you can write this with all manner of

00:45:35,309 --> 00:45:39,690
tools so so don't tolerate lack of

00:45:38,249 --> 00:45:42,599
automation if you're doing a bisector

00:45:39,690 --> 00:45:44,009
particularly try and automate as much of

00:45:42,599 --> 00:45:45,690
the test as possible so you get a pass

00:45:44,009 --> 00:45:48,989
fail for a particular version of the

00:45:45,690 --> 00:45:51,269
kernel and that's how the scripts work

00:45:48,989 --> 00:45:54,420
so they get these return values if they

00:45:51,269 --> 00:45:56,880
return 0 you can see what's happening a

00:45:54,420 --> 00:45:58,440
saying bisex run and it's giving you a

00:45:56,880 --> 00:46:00,900
shell script and that's the shell script

00:45:58,440 --> 00:46:02,130
that drives the bisection it's going to

00:46:00,900 --> 00:46:03,960
a binary search for you to get history

00:46:02,130 --> 00:46:07,160
looking for the broken part and your

00:46:03,960 --> 00:46:09,509
script can return 0 to say tests pass

00:46:07,160 --> 00:46:11,009
they can return a whole bunch of values

00:46:09,509 --> 00:46:13,920
which means I was able to compile the

00:46:11,009 --> 00:46:15,809
colonel but the test failed I it's a bad

00:46:13,920 --> 00:46:18,420
version of the colonel there's finally

00:46:15,809 --> 00:46:20,430
one you can say the Colonel's failed to

00:46:18,420 --> 00:46:22,019
compile so if the maintainer makes a

00:46:20,430 --> 00:46:24,630
mistake and that version doesn't compile

00:46:22,019 --> 00:46:26,220
if you return that get will just look

00:46:24,630 --> 00:46:28,049
for a version a little bit close to it

00:46:26,220 --> 00:46:29,700
that can work from and there's even

00:46:28,049 --> 00:46:32,069
there's also another value you can send

00:46:29,700 --> 00:46:33,869
back which means abort bisect so if for

00:46:32,069 --> 00:46:35,579
example you've established the hardware

00:46:33,869 --> 00:46:38,869
isn't plugged in you don't have to

00:46:35,579 --> 00:46:38,869
continue failing all the way through

00:46:40,969 --> 00:46:49,319
I'm sure my going there so I'm going to

00:46:46,619 --> 00:46:53,609
go away week when I was going to ask if

00:46:49,319 --> 00:46:56,130
he had a sample of the bicep compile

00:46:53,609 --> 00:46:58,409
script someplace have I got an example

00:46:56,130 --> 00:47:00,329
of what he had a script that it was it

00:46:58,409 --> 00:47:03,119
was doing the compilation on the basic

00:47:00,329 --> 00:47:07,349
command the compile kernel and test us I

00:47:03,119 --> 00:47:11,279
can dig one out i expect but they're

00:47:07,349 --> 00:47:12,989
usually customer in or at least the

00:47:11,279 --> 00:47:14,249
rapper of it is customer I've usually

00:47:12,989 --> 00:47:18,299
got a collection of tests i wrote it

00:47:14,249 --> 00:47:19,859
thinks for the area i'm working on but

00:47:18,299 --> 00:47:21,959
the rapper I quite often just hand dryer

00:47:19,859 --> 00:47:26,279
doesn't take that long compared to our

00:47:21,959 --> 00:47:32,759
timing has been bisecting so I can bend

00:47:26,279 --> 00:47:35,759
them away here so that draws us to the

00:47:32,759 --> 00:47:38,009
end of the presentation once again I

00:47:35,759 --> 00:47:39,630
have to offer this limited lifetime

00:47:38,009 --> 00:47:43,169
warranty is as you narrow this limited

00:47:39,630 --> 00:47:45,389
not the lifetime warranty yeah and

00:47:43,169 --> 00:47:48,209
anybody in here has any questions about

00:47:45,389 --> 00:47:50,099
what we've discussed today send it to

00:47:48,209 --> 00:47:52,319
support a linearity org it would really

00:47:50,099 --> 00:47:53,969
excite me to say i was at Las Vegas 16

00:47:52,319 --> 00:47:55,349
and I had this question I'd like some

00:47:53,969 --> 00:47:58,259
help yeah I'd be very happy to receive

00:47:55,349 --> 00:48:01,429
that email and to help you so with that

00:47:58,259 --> 00:48:01,429
thank you very much for your attention

00:48:12,260 --> 00:48:14,320

YouTube URL: https://www.youtube.com/watch?v=dyTPbcng7j8


