Title: LAS16-303: Kernel Testing with KernelCI dot org
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-303: Kernel Testing with KernelCI.org
Speakers: Milo Casagrande & Tyler Baker
Date: September 28, 2016

★ Session Description ★
TBD - BoF discussion.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-303
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-303/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:07,250 --> 00:00:13,320
okay so welcome everyone to this

00:00:10,650 --> 00:00:16,049
currency I session my name is mia Casa

00:00:13,320 --> 00:00:19,699
Grande I'm software engineer of the lava

00:00:16,049 --> 00:00:23,550
team is tyler is working with me on

00:00:19,699 --> 00:00:27,060
Colonel CI so how many of you already

00:00:23,550 --> 00:00:33,930
know the system apart from the familiar

00:00:27,060 --> 00:00:38,190
faces yes alright so I'm going to go

00:00:33,930 --> 00:00:41,550
through a quick overview background of a

00:00:38,190 --> 00:00:43,680
system where we started up like a really

00:00:41,550 --> 00:00:45,450
high level overview of how the system is

00:00:43,680 --> 00:00:47,100
made up if we have added a bit of time

00:00:45,450 --> 00:00:50,010
we go through a website and see how it

00:00:47,100 --> 00:00:53,010
works and then we'll have a questions

00:00:50,010 --> 00:00:56,340
and open discussions we actually want to

00:00:53,010 --> 00:00:58,969
have more time for discussions because

00:00:56,340 --> 00:01:03,870
in the last few months within a really

00:00:58,969 --> 00:01:07,729
progress on currency I 4 / / reasons so

00:01:03,870 --> 00:01:10,280
I think you're all familiar with the

00:01:07,729 --> 00:01:12,720
automation problems when you we have a

00:01:10,280 --> 00:01:14,700
repetitive task you start working on

00:01:12,720 --> 00:01:17,250
something to automate it you have an

00:01:14,700 --> 00:01:19,470
hour job because you you lose time and

00:01:17,250 --> 00:01:22,710
you don't work anymore your original

00:01:19,470 --> 00:01:24,720
problem so that's where we enter here

00:01:22,710 --> 00:01:27,420
and we wanted to help a kernel

00:01:24,720 --> 00:01:29,640
developers removing verb our land on V

00:01:27,420 --> 00:01:32,909
automating the boring stuff and help me

00:01:29,640 --> 00:01:35,850
when doing that basically so our goals

00:01:32,909 --> 00:01:37,920
were to build every configuration I

00:01:35,850 --> 00:01:40,439
reckon configuration for these

00:01:37,920 --> 00:01:43,380
architectures these architectures where

00:01:40,439 --> 00:01:47,189
we were interested boudreaux's results

00:01:43,380 --> 00:01:49,619
run tests on them repeat this for each

00:01:47,189 --> 00:01:53,369
kernel change that is Colonel commit

00:01:49,619 --> 00:01:57,590
actually but its current changes but

00:01:53,369 --> 00:02:00,240
better murcia exactly and then repeat is

00:01:57,590 --> 00:02:02,189
repeat with every time a report of a

00:02:00,240 --> 00:02:04,380
result in a sense you very useful way

00:02:02,189 --> 00:02:08,759
and actually try to make a profit out of

00:02:04,380 --> 00:02:10,229
it so why we started this but was

00:02:08,759 --> 00:02:13,620
something out well

00:02:10,229 --> 00:02:15,750
a few system but try to do better we're

00:02:13,620 --> 00:02:17,819
not open source all the kind of

00:02:15,750 --> 00:02:20,549
developers had like we're on scripts of

00:02:17,819 --> 00:02:23,220
our own way of doing things and not

00:02:20,549 --> 00:02:26,480
really sharing results in a very open

00:02:23,220 --> 00:02:29,610
way so we want to also to provide like a

00:02:26,480 --> 00:02:31,769
website a platform for the community

00:02:29,610 --> 00:02:35,569
where you can go check your results and

00:02:31,769 --> 00:02:38,579
be sure but we are testing your code and

00:02:35,569 --> 00:02:41,760
yeah obviously we wanted to make sure

00:02:38,579 --> 00:02:43,950
what all the work is a bug free as much

00:02:41,760 --> 00:02:47,400
as possible and a regression free at

00:02:43,950 --> 00:02:50,700
least form on a string point of view so

00:02:47,400 --> 00:02:55,109
yeah before going into the tail of a

00:02:50,700 --> 00:02:56,730
system of you a glossary of a term what

00:02:55,109 --> 00:03:00,150
we use on Colonel CI but might not be

00:02:56,730 --> 00:03:02,519
what clear we have three main sessions

00:03:00,150 --> 00:03:05,099
one is a job when is a build and when we

00:03:02,519 --> 00:03:07,319
have the boot so a job for us with a

00:03:05,099 --> 00:03:10,459
unit where everything starts it's more

00:03:07,319 --> 00:03:13,230
or less what do you have a Jenkins job

00:03:10,459 --> 00:03:16,470
kind of thing so it's made up of a tree

00:03:13,230 --> 00:03:19,440
and a colonel the tree is a name git

00:03:16,470 --> 00:03:22,169
repository whatever name you want to put

00:03:19,440 --> 00:03:23,840
to your git repository but Carnell is

00:03:22,169 --> 00:03:27,060
actually a value but is computed from

00:03:23,840 --> 00:03:29,790
the Alpha the wicket describe common so

00:03:27,060 --> 00:03:32,370
it takes into account the kernel version

00:03:29,790 --> 00:03:35,069
and bisha of the community ladies coming

00:03:32,370 --> 00:03:38,160
to us so an example of a tree named work

00:03:35,069 --> 00:03:39,780
maybe mainline Linux next net next so

00:03:38,160 --> 00:03:42,019
it's typically the same name as the

00:03:39,780 --> 00:03:45,000
maintainer stre what they named it yeah

00:03:42,019 --> 00:03:47,910
and that's a base unit where we start

00:03:45,000 --> 00:03:49,380
the job of compiling and testing after

00:03:47,910 --> 00:03:51,930
that we have a build but is actually a

00:03:49,380 --> 00:03:54,510
job plus bit of config and but says like

00:03:51,930 --> 00:03:58,410
all the multiple defconfig configuration

00:03:54,510 --> 00:04:00,629
we test and it outputs some artifacts

00:03:58,410 --> 00:04:02,700
usually the kernel image what we use to

00:04:00,629 --> 00:04:04,560
good all these are still available

00:04:02,700 --> 00:04:07,370
available on the system where artifice

00:04:04,560 --> 00:04:10,019
as well so you can try to reproduce with

00:04:07,370 --> 00:04:11,430
what you are doing and then the last one

00:04:10,019 --> 00:04:13,859
is a boot where is a special case of

00:04:11,430 --> 00:04:17,160
tests we actually try to boot what we

00:04:13,859 --> 00:04:20,609
build and yeah what's just a test and we

00:04:17,160 --> 00:04:27,479
measure where is also bad

00:04:20,609 --> 00:04:31,289
yeah yeah sure it's for us is where

00:04:27,479 --> 00:04:33,689
everything starts is just like the entry

00:04:31,289 --> 00:04:36,090
point for for a four hour system so it's

00:04:33,689 --> 00:04:40,409
really the big kids repository that's

00:04:36,090 --> 00:04:42,060
what we need but yeah we if we don't

00:04:40,409 --> 00:04:48,750
have that we don't have anything else

00:04:42,060 --> 00:04:52,590
that comes after so yeah what is

00:04:48,750 --> 00:04:55,139
currency I today is it's running on one

00:04:52,590 --> 00:04:59,039
server we have eight builders probably

00:04:55,139 --> 00:05:00,719
it's outdated visits from februari I

00:04:59,039 --> 00:05:04,020
think we have probably something more

00:05:00,719 --> 00:05:06,599
but I don't know if Esther's okay I

00:05:04,020 --> 00:05:10,740
guess we still have ten distributed

00:05:06,599 --> 00:05:14,129
hardware labs but we're doing the good

00:05:10,740 --> 00:05:15,979
testing 160 unique boards probably were

00:05:14,129 --> 00:05:18,960
something more new boards have coming

00:05:15,979 --> 00:05:20,729
but five hundred bills is probably wrong

00:05:18,960 --> 00:05:23,009
is probably eight hundred thousand and

00:05:20,729 --> 00:05:27,300
yeah we're more than two million good

00:05:23,009 --> 00:05:28,949
reports with a coming of 2500 woods

00:05:27,300 --> 00:05:31,620
birthday more or less and so just to go

00:05:28,949 --> 00:05:33,360
back in and point on something so in the

00:05:31,620 --> 00:05:34,349
beginning there's a lot of curled

00:05:33,360 --> 00:05:35,849
maintained errs that we're actually

00:05:34,349 --> 00:05:37,589
doing this work but they were doing it

00:05:35,849 --> 00:05:38,909
for the boards that cared about so the

00:05:37,589 --> 00:05:41,339
whole idea of the project is to try to a

00:05:38,909 --> 00:05:43,050
grenade those results and into a common

00:05:41,339 --> 00:05:44,430
interface so that everybody can view

00:05:43,050 --> 00:05:45,839
those results rather than trying to

00:05:44,430 --> 00:05:47,729
figure out where those results are and

00:05:45,839 --> 00:05:50,550
who's server so that's kind of the idea

00:05:47,729 --> 00:05:52,020
here is to built this up so that we can

00:05:50,550 --> 00:05:53,759
work together with other people's labs

00:05:52,020 --> 00:05:55,500
and their automation scripts so that we

00:05:53,759 --> 00:05:59,639
can bring that those results together in

00:05:55,500 --> 00:06:03,169
one place so this is like really really

00:05:59,639 --> 00:06:06,180
high level overview of the system on the

00:06:03,169 --> 00:06:08,729
left hand side we have the lab sir but

00:06:06,180 --> 00:06:10,680
actually the boot labs our builders and

00:06:08,729 --> 00:06:13,560
the colonel trees it's pecan trees is a

00:06:10,680 --> 00:06:15,599
manual setup we we starve em up

00:06:13,560 --> 00:06:18,659
basically you tell us which is Georgie

00:06:15,599 --> 00:06:22,550
and we start monitoring v3r each margin

00:06:18,659 --> 00:06:25,080
request by trigger or build the Builder

00:06:22,550 --> 00:06:26,520
interacts with our API we just and the

00:06:25,080 --> 00:06:28,949
results were they applaud all the

00:06:26,520 --> 00:06:31,860
artifacts and then from our API with

00:06:28,949 --> 00:06:32,330
just like trigger the boot process from

00:06:31,860 --> 00:06:37,090
the over

00:06:32,330 --> 00:06:39,770
the dashboard is an implementation

00:06:37,090 --> 00:06:41,689
visual implementation of our API so we

00:06:39,770 --> 00:06:43,909
can throw it away somebody else can do

00:06:41,689 --> 00:06:45,830
whatever we were never an hour does

00:06:43,909 --> 00:06:47,810
brief they want good example that's the

00:06:45,830 --> 00:06:50,990
Bailey break guys yeah they built power

00:06:47,810 --> 00:06:52,610
CI org which is the same system sits on

00:06:50,990 --> 00:06:54,169
top of Colonel CI but they added power

00:06:52,610 --> 00:06:55,669
measurement to it for all their boards

00:06:54,169 --> 00:06:57,740
so they threw a custom front end

00:06:55,669 --> 00:07:00,139
essentially on top of the API so that we

00:06:57,740 --> 00:07:01,849
build they are using the same API when

00:07:00,139 --> 00:07:04,370
we have reports but if you're subscribed

00:07:01,849 --> 00:07:07,099
to Kerala mean at least you probably so

00:07:04,370 --> 00:07:10,729
then and yeah and that's a really really

00:07:07,099 --> 00:07:13,340
high level overview of everything yeah

00:07:10,729 --> 00:07:16,129
this is this was paroled ahead in

00:07:13,340 --> 00:07:17,599
February it's a completely derail

00:07:16,129 --> 00:07:21,740
because there's nothing very but it's

00:07:17,599 --> 00:07:27,139
actually be done for everything's what

00:07:21,740 --> 00:07:32,509
time we had to do yeah what was really

00:07:27,139 --> 00:07:36,110
really a quick introduction of a system

00:07:32,509 --> 00:07:38,779
if you want we can go through a little

00:07:36,110 --> 00:07:41,240
bit of the UI if you don't know each or

00:07:38,779 --> 00:07:44,419
if you have questions from the UI or we

00:07:41,240 --> 00:07:47,020
can just like a go directly to open

00:07:44,419 --> 00:07:49,400
discussion if you have something else I

00:07:47,020 --> 00:07:51,620
got a question for the group here who's

00:07:49,400 --> 00:07:53,330
running the latest release mainline

00:07:51,620 --> 00:07:57,289
kernel in their laptop right now show

00:07:53,330 --> 00:08:00,379
hands 12 and and what's the reason for

00:07:57,289 --> 00:08:01,729
not doing that just curious deserve is

00:08:00,379 --> 00:08:04,699
there a good reason or is it just your

00:08:01,729 --> 00:08:10,610
taking the district riddle this district

00:08:04,699 --> 00:08:14,659
colonel so yeah well if family to be the

00:08:10,610 --> 00:08:19,430
time we go through a website so we need

00:08:14,659 --> 00:08:21,889
help especially need help in going

00:08:19,430 --> 00:08:23,719
through our results and making sure they

00:08:21,889 --> 00:08:25,460
are correct and making sure but what we

00:08:23,719 --> 00:08:28,969
report has not working is actually

00:08:25,460 --> 00:08:32,329
really not working so yeah confirm rate

00:08:28,969 --> 00:08:33,849
issues we will report send us bugs if

00:08:32,329 --> 00:08:36,529
you find something that is not working

00:08:33,849 --> 00:08:38,570
send pages to the kernels and pages to

00:08:36,529 --> 00:08:42,520
us if you have new boards that you need

00:08:38,570 --> 00:08:45,460
support to or whatever else you need

00:08:42,520 --> 00:08:49,210
percival the address open very we are on

00:08:45,460 --> 00:08:51,010
IRC so just reach out to us and I think

00:08:49,210 --> 00:08:52,780
what we need to hear is that we've got

00:08:51,010 --> 00:08:55,750
so many different types of boards now

00:08:52,780 --> 00:08:58,120
that it's you know Kevin and I me lo and

00:08:55,750 --> 00:09:01,030
Mark Brown are overloaded trying to fix

00:08:58,120 --> 00:09:02,200
the boot issues that come up so art has

00:09:01,030 --> 00:09:04,030
been doing a really good job getting rid

00:09:02,200 --> 00:09:06,550
of the build failures so I think we're

00:09:04,030 --> 00:09:07,990
covered there but the boot failures if

00:09:06,550 --> 00:09:09,850
you have a particular platform you're

00:09:07,990 --> 00:09:11,560
interested in please try to monitor the

00:09:09,850 --> 00:09:13,150
results and if something fails it gives

00:09:11,560 --> 00:09:14,050
you the bisection points and if you

00:09:13,150 --> 00:09:15,670
can't you have the hardware available

00:09:14,050 --> 00:09:16,750
please try to bisect report on the

00:09:15,670 --> 00:09:18,340
mailing list that would really help us

00:09:16,750 --> 00:09:19,720
out because right now it's you know

00:09:18,340 --> 00:09:21,970
essentially two or three people doing

00:09:19,720 --> 00:09:24,010
that and you know depending on the day

00:09:21,970 --> 00:09:25,510
Linux next breaks in very magnificent

00:09:24,010 --> 00:09:35,340
ways so it's always nice to have a

00:09:25,510 --> 00:09:35,340
little bit of extra help yes

00:09:40,100 --> 00:09:42,160
you

00:09:45,779 --> 00:10:03,749
how do you go fullscreen feel everybody

00:09:56,189 --> 00:10:12,809
driver hey I sure should be running out

00:10:03,749 --> 00:10:15,689
there so you indicated that if we send a

00:10:12,809 --> 00:10:17,370
colonel tree and we can run a colonel

00:10:15,689 --> 00:10:18,749
tree and through the colonel see I right

00:10:17,370 --> 00:10:22,379
you guys will monitor our repos and

00:10:18,749 --> 00:10:24,300
branches yes ok so I did actually do

00:10:22,379 --> 00:10:25,829
that sent you an email on it but I

00:10:24,300 --> 00:10:32,129
haven't seen anything come out of it I

00:10:25,829 --> 00:10:34,050
mean this is 40 I so we no no we don't

00:10:32,129 --> 00:10:36,870
use customer use the base defconn fix

00:10:34,050 --> 00:10:38,399
but we and kiwis config fragments to

00:10:36,870 --> 00:10:45,720
modify for our board so we can put

00:10:38,399 --> 00:10:47,910
things currently but we do use merge

00:10:45,720 --> 00:10:49,470
config and we do have a certain process

00:10:47,910 --> 00:10:50,490
I didn't get any feedback so i don't

00:10:49,470 --> 00:10:52,769
know where was going we're trying to

00:10:50,490 --> 00:10:54,839
submit that tree but I mean these are

00:10:52,769 --> 00:10:57,540
patches we need to be able to test

00:10:54,839 --> 00:10:59,550
things yeah we can work on I do remember

00:10:57,540 --> 00:11:01,110
that any mails right now I think I've

00:10:59,550 --> 00:11:08,009
gotta stop as we got pulled off the

00:11:01,110 --> 00:11:09,959
project okay stop if you still have the

00:11:08,009 --> 00:11:11,939
email fri just bring it up against a

00:11:09,959 --> 00:11:13,800
weekend okay cuz i stepped i stopped

00:11:11,939 --> 00:11:16,259
updating the tree cuz it was kind of I

00:11:13,800 --> 00:11:17,519
didn't get anything back we tried to

00:11:16,259 --> 00:11:19,259
submit that in through because I think

00:11:17,519 --> 00:11:21,660
you have a lot of TI boards that we can

00:11:19,259 --> 00:11:24,600
test against too so I mean those those

00:11:21,660 --> 00:11:26,759
config fragments ideas or we're gonna

00:11:24,600 --> 00:11:30,209
try an RFC it upstream to see what we

00:11:26,759 --> 00:11:31,920
get for feedback maybe talk to Tony

00:11:30,209 --> 00:11:35,360
Little ya just bring bring up the

00:11:31,920 --> 00:11:35,360
discussion I guess so we don't forget

00:11:40,240 --> 00:11:44,150
yeah cuz we got have to modify the

00:11:42,230 --> 00:11:45,740
scripts to go and know what config

00:11:44,150 --> 00:11:48,320
fragments are out of trees that we can

00:11:45,740 --> 00:11:51,910
run merge to create those fragments more

00:11:48,320 --> 00:11:51,910
or less up like what we did with the LSK

00:11:53,680 --> 00:11:58,430
we do use the merge config but we use it

00:11:56,210 --> 00:12:01,790
we created a script around merge config

00:11:58,430 --> 00:12:04,960
to actually combine all of those config

00:12:01,790 --> 00:12:07,760
fragments and amend them to multi v7

00:12:04,960 --> 00:12:10,310
okay so we just we put a script around

00:12:07,760 --> 00:12:12,080
it merge config that says take these in

00:12:10,310 --> 00:12:16,280
a map file that says take these config

00:12:12,080 --> 00:12:18,260
fragments and amend them to the target

00:12:16,280 --> 00:12:26,210
defconfig and that should boot specific

00:12:18,260 --> 00:12:28,490
boards yes we're gonna see it and see

00:12:26,210 --> 00:12:30,110
what we get back I mean I think you boot

00:12:28,490 --> 00:12:32,870
Tom murini's interested in the same

00:12:30,110 --> 00:12:34,760
concept as well and again I want to I

00:12:32,870 --> 00:12:40,040
want to socialize it first before I go

00:12:34,760 --> 00:12:41,360
and push it yes yeah I mean it's all

00:12:40,040 --> 00:12:42,920
open source all the all the scripts are

00:12:41,360 --> 00:12:45,170
open so they're all in github under

00:12:42,920 --> 00:12:46,280
splash Colonel CI and I could point you

00:12:45,170 --> 00:12:47,870
to where you need to make the changes

00:12:46,280 --> 00:12:52,310
and then just do a poll request and will

00:12:47,870 --> 00:12:54,620
merge it so I don't know if this is good

00:12:52,310 --> 00:12:57,710
time but since you have the GUI open

00:12:54,620 --> 00:13:00,560
what I'm i'm using this same GUI almost

00:12:57,710 --> 00:13:04,310
every day to check for repressions use

00:13:00,560 --> 00:13:06,410
only after rc2 but i'm having hard time

00:13:04,310 --> 00:13:07,850
i would like to have a static link for

00:13:06,410 --> 00:13:10,340
if you look at the top line where it

00:13:07,850 --> 00:13:13,460
says for next and then latest boots that

00:13:10,340 --> 00:13:16,940
is there the pink one showing two

00:13:13,460 --> 00:13:22,370
failures so as you click on that one so

00:13:16,940 --> 00:13:25,430
i would like to have like like a symlink

00:13:22,370 --> 00:13:28,250
that's aesthetic URL to see this on

00:13:25,430 --> 00:13:31,190
daily basis right now we're it's

00:13:28,250 --> 00:13:33,320
dynamically generated link so it's you

00:13:31,190 --> 00:13:35,390
have to click through it to go to it so

00:13:33,320 --> 00:13:37,160
you mean like licking Valley this one

00:13:35,390 --> 00:13:40,220
yeah at the correct you have two days

00:13:37,160 --> 00:13:41,720
the most recent next it's just I guess

00:13:40,220 --> 00:13:43,940
it would be just letting it early and

00:13:41,720 --> 00:13:47,900
I'm not able to exit full screen here

00:13:43,940 --> 00:13:50,180
but if you go net next of this URL slash

00:13:47,900 --> 00:13:50,570
latest you will get to the ladies boot

00:13:50,180 --> 00:13:53,240
report

00:13:50,570 --> 00:13:55,400
oh you have such a yeah yeah we are its

00:13:53,240 --> 00:13:57,230
sky is probably one of us home I

00:13:55,400 --> 00:13:59,030
mentioned it to Kevin like six months

00:13:57,230 --> 00:14:01,640
ago so it sounds like actually whenever

00:13:59,030 --> 00:14:03,560
last thing I did before out stopping

00:14:01,640 --> 00:14:04,820
working on this but I was available so

00:14:03,560 --> 00:14:07,840
we never announced it but it's actually

00:14:04,820 --> 00:14:13,010
available so what is it again yeah you

00:14:07,840 --> 00:14:16,940
so he's like para CIA shabooty / net

00:14:13,010 --> 00:14:22,790
next / latest next latest okay yeah

00:14:16,940 --> 00:14:24,710
thanks yeah i'll show you if i'm able to

00:14:22,790 --> 00:14:26,110
exit full screen from this conclusion so

00:14:24,710 --> 00:14:29,110
what about how does he work on the

00:14:26,110 --> 00:14:29,110
control

00:15:09,980 --> 00:15:52,950
next fetuses like this now jump boot

00:15:15,990 --> 00:15:57,740
heels nope yeah next and then we'll take

00:15:52,950 --> 00:15:57,740
the terms of your pillow you should work

00:16:00,110 --> 00:16:09,029
okay what else we want to show up on

00:16:02,370 --> 00:16:10,380
that you I yeah let's go through let's

00:16:09,029 --> 00:16:19,820
just go through from the jobs and

00:16:10,380 --> 00:16:24,140
everything oh yeah yeah you're right

00:16:19,820 --> 00:16:24,140
you're right because this report

00:16:28,570 --> 00:16:37,840
yeah sure okay so this seems to be a

00:16:34,210 --> 00:16:40,390
tool where the audience is associate

00:16:37,840 --> 00:16:42,730
maintain errs because you're checking

00:16:40,390 --> 00:16:46,030
basically you're checking as patches are

00:16:42,730 --> 00:16:48,250
flowing upstream you're making sure that

00:16:46,030 --> 00:16:52,600
you haven't broken this vast array of

00:16:48,250 --> 00:16:54,550
boards which is pretty cool so I'm

00:16:52,600 --> 00:16:57,430
really interested in the part where

00:16:54,550 --> 00:16:59,470
someone reacts to the bug is that

00:16:57,430 --> 00:17:02,080
formalized at all I know you send

00:16:59,470 --> 00:17:06,459
reports to lists and aren't does a lot

00:17:02,080 --> 00:17:08,620
of work fixing stuff but I guess my

00:17:06,459 --> 00:17:12,100
question is how do you envision this

00:17:08,620 --> 00:17:13,600
scaling out to other audiences or I mean

00:17:12,100 --> 00:17:15,400
you mentioned the power CI so I'm kind

00:17:13,600 --> 00:17:17,829
of interested in how they're doing it or

00:17:15,400 --> 00:17:25,660
I mean what other types of tests do you

00:17:17,829 --> 00:17:27,130
envision doing right now we're going to

00:17:25,660 --> 00:17:28,810
focus on boot testing because we don't

00:17:27,130 --> 00:17:30,130
have the resources to do anything else

00:17:28,810 --> 00:17:31,960
now if we start getting more compute

00:17:30,130 --> 00:17:33,580
community involvement and people are

00:17:31,960 --> 00:17:35,500
helping report bugs upstream that they

00:17:33,580 --> 00:17:37,300
find on Colonel CI and that takes less

00:17:35,500 --> 00:17:38,650
load off of us that'll free us up to

00:17:37,300 --> 00:17:40,480
start running the test but the problem

00:17:38,650 --> 00:17:41,800
is if we add tests now that we just

00:17:40,480 --> 00:17:43,390
doubled our workload which we already

00:17:41,800 --> 00:17:45,370
don't have enough time to do so we're

00:17:43,390 --> 00:17:47,560
kind of staying out of that realm now if

00:17:45,370 --> 00:17:49,480
you go look at the code there's hack

00:17:47,560 --> 00:17:52,660
bench LTP we have all the stuff

00:17:49,480 --> 00:17:54,430
integrated ready to run it's just the

00:17:52,660 --> 00:17:56,920
amount of failures that that's going to

00:17:54,430 --> 00:17:58,660
produce is aren't going to be sorted out

00:17:56,920 --> 00:18:00,400
by just us three so we need to get more

00:17:58,660 --> 00:18:03,040
community involvement before we start

00:18:00,400 --> 00:18:05,560
doing it so if if you guys find a bug on

00:18:03,040 --> 00:18:07,480
Colonel see i use the reported by tag

00:18:05,560 --> 00:18:11,550
when you send a patch to the mailing

00:18:07,480 --> 00:18:11,550
list because that helps us track people

00:18:14,520 --> 00:18:20,820
sorry to ask a question again maybe this

00:18:17,710 --> 00:18:23,560
is fixed but them for reporting bugs so

00:18:20,820 --> 00:18:27,580
what would be helpful would be always to

00:18:23,560 --> 00:18:29,860
see the latest known boot right now it

00:18:27,580 --> 00:18:32,760
takes quite a bit of point and clicking

00:18:29,860 --> 00:18:35,170
to find out when it will actually broke

00:18:32,760 --> 00:18:40,540
so

00:18:35,170 --> 00:18:45,620
oh you edit that one okay thanks right

00:18:40,540 --> 00:18:47,240
okay cool great yeah yeah that that's

00:18:45,620 --> 00:18:49,190
why I've never used the emails before

00:18:47,240 --> 00:18:53,200
because I couldn't figure that out but

00:18:49,190 --> 00:18:53,200
you I'll start using them then Thanks

00:18:53,290 --> 00:18:58,550
what about LTS is have you guys have any

00:18:56,000 --> 00:19:13,940
plans and testing the actual LTS itself

00:18:58,550 --> 00:19:16,460
so we do stable stable RC review yeah so

00:19:13,940 --> 00:19:18,980
eventually the CM LTS so you test our

00:19:16,460 --> 00:19:20,570
seas yeah absolutely and stable so once

00:19:18,980 --> 00:19:22,160
we check the patches in flight before

00:19:20,570 --> 00:19:23,450
they're applied and the stable bridge

00:19:22,160 --> 00:19:30,110
after this so is that something that's

00:19:23,450 --> 00:19:31,490
been very recent okay cuz it would have

00:19:30,110 --> 00:19:32,930
been something broke in the Latin he

00:19:31,490 --> 00:19:34,520
broke something in the last I build a

00:19:32,930 --> 00:19:36,320
brute and the built brick in the last

00:19:34,520 --> 00:19:38,150
one I mean iron fixed it again but I

00:19:36,320 --> 00:19:40,310
mean yeah yeah so that was all caught me

00:19:38,150 --> 00:19:41,900
artist referencing building mark Browns

00:19:40,310 --> 00:19:43,220
Bilbo Bilbo who's showing the same

00:19:41,900 --> 00:19:44,810
problem as well it's just one of those

00:19:43,220 --> 00:19:45,980
things like you know we can record it

00:19:44,810 --> 00:19:47,390
what if nobody's looking at it right now

00:19:45,980 --> 00:19:50,120
we've been pulled off the project so

00:19:47,390 --> 00:19:51,860
it's kind of this is where we need the

00:19:50,120 --> 00:20:01,160
involvement people watching watching the

00:19:51,860 --> 00:20:03,800
results I related to my last question so

00:20:01,160 --> 00:20:05,660
do you guys have a sense for how many of

00:20:03,800 --> 00:20:08,240
these how many of the failures that you

00:20:05,660 --> 00:20:10,040
see are actually because of a kernel

00:20:08,240 --> 00:20:13,280
regression versus something has gone

00:20:10,040 --> 00:20:14,750
wrong in the board farm so the biggest

00:20:13,280 --> 00:20:17,210
issues we have with infrastructure

00:20:14,750 --> 00:20:18,920
failures are we add a whole pile of

00:20:17,210 --> 00:20:20,780
things into a defconfig and we no longer

00:20:18,920 --> 00:20:23,060
can load it at that particular memory

00:20:20,780 --> 00:20:25,190
address right so we get a lot of those

00:20:23,060 --> 00:20:26,450
failures I'd say that's ten to twenty

00:20:25,190 --> 00:20:29,630
percent of the failures we get something

00:20:26,450 --> 00:20:32,030
like that the typically are if the

00:20:29,630 --> 00:20:33,440
structure is pretty good on the on the

00:20:32,030 --> 00:20:35,420
running it on the hardware we've spent a

00:20:33,440 --> 00:20:37,040
lot of time before we actually went

00:20:35,420 --> 00:20:38,270
public with this working through all the

00:20:37,040 --> 00:20:41,210
automation scripts trying to make it as

00:20:38,270 --> 00:20:44,169
robust as possible the other thing that

00:20:41,210 --> 00:20:46,269
kills us is clem because some

00:20:44,169 --> 00:20:48,399
you put a patch in and then Clemmy lags

00:20:46,269 --> 00:20:49,989
behind and then it'll be broken for a

00:20:48,399 --> 00:20:51,909
while and will bisect it and then we'll

00:20:49,989 --> 00:20:53,769
have to go find somebody say oh yeah you

00:20:51,909 --> 00:20:55,210
need to use Clem you 27 that's not

00:20:53,769 --> 00:20:56,649
released yet so that the Colonel's good

00:20:55,210 --> 00:21:00,850
so we have a lot of problems with with

00:20:56,649 --> 00:21:02,619
Clem you in that sense well it's like

00:21:00,850 --> 00:21:04,480
somebody enables a feature in the kernel

00:21:02,619 --> 00:21:05,859
which breaks Clem you but the clem you

00:21:04,480 --> 00:21:07,629
developers know about it so they patch

00:21:05,859 --> 00:21:09,609
it but then the next release cycle

00:21:07,629 --> 00:21:10,989
before that Clem you gets first gets in

00:21:09,609 --> 00:21:13,210
debian where we can pull it even in

00:21:10,989 --> 00:21:16,419
testing right lags behind so there's

00:21:13,210 --> 00:21:18,429
like right now I think the we have an

00:21:16,419 --> 00:21:19,809
issue with a are 64 m you it's

00:21:18,429 --> 00:21:21,309
completely broken because we need to

00:21:19,809 --> 00:21:26,379
upgrade to 27 well it's still in release

00:21:21,309 --> 00:21:38,080
candidate so is it package to debian

00:21:26,379 --> 00:21:40,690
testing yet ok because the creamy master

00:21:38,080 --> 00:21:41,799
is relatively stable as a something to

00:21:40,690 --> 00:21:44,679
build from especially when you're

00:21:41,799 --> 00:21:51,489
building the release camp days and tight

00:21:44,679 --> 00:22:10,690
bills the trouble is you've got a lag

00:21:51,489 --> 00:22:12,309
for the distributions and yeah I must

00:22:10,690 --> 00:22:14,440
mutters probably a little flippant I run

00:22:12,309 --> 00:22:15,999
master all the time obviously but but

00:22:14,440 --> 00:22:17,169
yeah the Keeping Up with the releases

00:22:15,999 --> 00:22:24,970
because we're doing you release every

00:22:17,169 --> 00:22:29,019
three months I guess well question is

00:22:24,970 --> 00:22:32,679
how many times is it does creme ooh find

00:22:29,019 --> 00:22:40,119
in actual colonel bug i see so when he

00:22:32,679 --> 00:22:41,710
would sell 55 okay okay yeah i was gonna

00:22:40,119 --> 00:22:44,200
I was going to ask in general about your

00:22:41,710 --> 00:22:47,230
bug metrics that's actually really good

00:22:44,200 --> 00:22:49,630
to be tracking I don't know

00:22:47,230 --> 00:22:52,179
anybody doing kvm testing the way we are

00:22:49,630 --> 00:22:54,669
so we actually boot Eric 64 target and

00:22:52,179 --> 00:22:56,470
our 30 tues targets and then launch a

00:22:54,669 --> 00:22:58,270
kvm guests with the upstream colonel on

00:22:56,470 --> 00:23:00,010
both hosts and guests and we found two

00:22:58,270 --> 00:23:02,559
issues there that actually broke arm and

00:23:00,010 --> 00:23:04,150
arm 64 kvm support so you know I think

00:23:02,559 --> 00:23:05,740
that level of testing is really good

00:23:04,150 --> 00:23:07,870
those are kind of complex use cases to

00:23:05,740 --> 00:23:12,100
be testing continuously and we'd be

00:23:07,870 --> 00:23:13,990
unable to do that mainly I would say

00:23:12,100 --> 00:23:16,150
it's mostly device tree changes that

00:23:13,990 --> 00:23:17,650
break things from time to time we've

00:23:16,150 --> 00:23:19,120
found some pretty nasty memory

00:23:17,650 --> 00:23:21,460
management ones i think we'd probably

00:23:19,120 --> 00:23:23,500
get 15 memory management things that

00:23:21,460 --> 00:23:25,450
like broke el bae on arm and things like

00:23:23,500 --> 00:23:27,549
that so we are finding some some really

00:23:25,450 --> 00:23:30,460
good bugs but those ones usually take a

00:23:27,549 --> 00:23:34,929
little bit more analysis than then we

00:23:30,460 --> 00:23:36,610
have time for unfortunately any other

00:23:34,929 --> 00:23:42,370
questions these are good questions it's

00:23:36,610 --> 00:23:44,440
good discussion so funnily enough we

00:23:42,370 --> 00:23:46,390
have similar problems with tracking all

00:23:44,440 --> 00:23:48,580
the random testing that gets done on

00:23:46,390 --> 00:23:50,770
Crimea and seeing when things break so

00:23:48,580 --> 00:23:52,210
we're quite interested in seeing whether

00:23:50,770 --> 00:23:55,330
or not we can use kennel CI as a

00:23:52,210 --> 00:23:58,240
dashboard on the crema build status but

00:23:55,330 --> 00:24:01,950
how much time do you spend keeping the

00:23:58,240 --> 00:24:06,360
web front end up and running I mean

00:24:01,950 --> 00:24:09,070
right so they'll Sarah right now serious

00:24:06,360 --> 00:24:10,450
okay so once you get it so spot invest

00:24:09,070 --> 00:24:12,700
the time getting it set up and then it

00:24:10,450 --> 00:24:16,710
can just sit there running with our

00:24:12,700 --> 00:24:16,710
hoarder now yes without being handheld

00:24:25,740 --> 00:24:31,450
yeah there's probably more interaction

00:24:28,870 --> 00:24:34,299
with forward people community to say but

00:24:31,450 --> 00:24:36,309
yeah that's like board enablement and

00:24:34,299 --> 00:24:38,110
like fixed configuration for rewards but

00:24:36,309 --> 00:24:40,419
on the website there's nothing happening

00:24:38,110 --> 00:24:43,750
message apart from new features but we

00:24:40,419 --> 00:24:47,080
have to develop it yet we need more

00:24:43,750 --> 00:24:50,559
resources so our kid architectural e is

00:24:47,080 --> 00:24:52,090
the data all in one place I mean is

00:24:50,559 --> 00:24:54,130
there like a single server that has the

00:24:52,090 --> 00:24:57,179
data from the entire all the board farms

00:24:54,130 --> 00:24:57,179
all the boards okay

00:25:00,490 --> 00:25:09,530
the API and the artifact server as well

00:25:03,650 --> 00:25:11,330
we keep them rd for 45 days yeah so what

00:25:09,530 --> 00:25:14,090
we'd like to do we have a proposal for

00:25:11,330 --> 00:25:15,140
Colonel CI v2 which essentially is I

00:25:14,090 --> 00:25:17,000
don't know if you saw the keynote on

00:25:15,140 --> 00:25:19,520
Monday morning that I demoed this thing

00:25:17,000 --> 00:25:21,140
called get CI calm which is a scalable

00:25:19,520 --> 00:25:23,120
microservice architecture for doing

00:25:21,140 --> 00:25:24,500
continuous integration and it more or

00:25:23,120 --> 00:25:27,050
less borrows from the concepts that we

00:25:24,500 --> 00:25:29,420
wanted to do with Colonel CAI v2 so our

00:25:27,050 --> 00:25:31,640
hope is we get a little bit more time we

00:25:29,420 --> 00:25:34,100
could build something where it's you

00:25:31,640 --> 00:25:35,450
know microservices to do all of those

00:25:34,100 --> 00:25:37,340
continues integration for the colonel

00:25:35,450 --> 00:25:39,050
and I think it'll scale up a lot easier

00:25:37,340 --> 00:25:41,000
will have more replication and load

00:25:39,050 --> 00:25:42,320
balancing persistent storage you know

00:25:41,000 --> 00:25:43,580
we're done a database that all the

00:25:42,320 --> 00:25:45,290
things that you should have in a cloud

00:25:43,580 --> 00:25:47,300
service that you know we were building

00:25:45,290 --> 00:25:48,530
this we didn't envision it being a cloud

00:25:47,300 --> 00:25:50,120
service we would just wanted to you know

00:25:48,530 --> 00:25:52,460
the results in one place and then it

00:25:50,120 --> 00:25:54,710
kind of it turned into that so we would

00:25:52,460 --> 00:25:56,900
like to riorca tect it slightly and have

00:25:54,710 --> 00:25:58,010
it a little bit more scalable I think

00:25:56,900 --> 00:25:59,780
the neat part about Colonel see I've

00:25:58,010 --> 00:26:01,730
right now is it I've been working on

00:25:59,780 --> 00:26:03,500
lava for for three and a half years and

00:26:01,730 --> 00:26:06,170
I think this is the largest deployment

00:26:03,500 --> 00:26:08,450
of lava that we've ever seen I mean

00:26:06,170 --> 00:26:10,280
there's ten labs I think you know

00:26:08,450 --> 00:26:11,990
there's 11 labs one of which doesn't

00:26:10,280 --> 00:26:13,400
have any peace which he switches back

00:26:11,990 --> 00:26:15,320
and forth whether uses labra zone

00:26:13,400 --> 00:26:18,740
scripts but there's ten labs that are

00:26:15,320 --> 00:26:20,180
that are using lava lava one right now

00:26:18,740 --> 00:26:24,530
so that's the other part of criminals

00:26:20,180 --> 00:26:26,450
div 2 is lava v2 offers a lot of really

00:26:24,530 --> 00:26:28,100
good features and there's a lot of

00:26:26,450 --> 00:26:31,490
optimizations and we can do testing

00:26:28,100 --> 00:26:33,410
faster with v2 but it's quite a turn to

00:26:31,490 --> 00:26:35,030
move to it as far as getting all the

00:26:33,410 --> 00:26:37,010
board supported and we were just talking

00:26:35,030 --> 00:26:38,720
about this today so with the v1 job

00:26:37,010 --> 00:26:40,280
templates the way we template the things

00:26:38,720 --> 00:26:44,500
it's fairly generic for each board

00:26:40,280 --> 00:26:46,250
whereas with in v2 there's a lot more

00:26:44,500 --> 00:26:47,780
flexibility in what you can do with the

00:26:46,250 --> 00:26:49,040
boards which is great but now they're

00:26:47,780 --> 00:26:51,080
all encoded in the job houses there are

00:26:49,040 --> 00:26:52,700
less generic jobs so we were trying to

00:26:51,080 --> 00:26:54,860
think through how we do a template like

00:26:52,700 --> 00:26:57,170
use a templating engine like jinja to be

00:26:54,860 --> 00:26:58,520
able to dynamically create jobs for you

00:26:57,170 --> 00:27:00,350
know the boot jobs for all these boards

00:26:58,520 --> 00:27:01,850
that are supported in v2 so there's that

00:27:00,350 --> 00:27:03,830
work needs to happen that needs to

00:27:01,850 --> 00:27:05,570
happen regardless for CIA linaro in

00:27:03,830 --> 00:27:06,650
general to be able to do that but then

00:27:05,570 --> 00:27:09,140
hopefully we'll be able to leverage it

00:27:06,650 --> 00:27:11,220
for Colonel CI and make that manageable

00:27:09,140 --> 00:27:12,809
so the idea would be there's a base 10

00:27:11,220 --> 00:27:15,030
for doing a boot on an arm board and

00:27:12,809 --> 00:27:16,830
then you have an inheritance for a

00:27:15,030 --> 00:27:18,630
specific device maybe needs a few extra

00:27:16,830 --> 00:27:20,309
options in their right and so you have

00:27:18,630 --> 00:27:21,840
something that's layered it's easier to

00:27:20,309 --> 00:27:24,990
change that we don't to change gigantic

00:27:21,840 --> 00:27:28,260
templates all at the same time in terms

00:27:24,990 --> 00:27:30,299
of workflow when you detect something's

00:27:28,260 --> 00:27:32,960
broken the build is it only when it's

00:27:30,299 --> 00:27:34,679
gone into linux next door into a sub

00:27:32,960 --> 00:27:36,270
maintainer subtree that you're

00:27:34,679 --> 00:27:38,460
monitoring you're not doing anything

00:27:36,270 --> 00:27:40,799
specific like monitoring patches as they

00:27:38,460 --> 00:27:43,110
go on to the mailing list not like 0 de

00:27:40,799 --> 00:27:44,909
dez del and it's really because we have

00:27:43,110 --> 00:27:47,000
eight we have eight builders a zero-day

00:27:44,909 --> 00:27:49,350
has gotten up just a massive amount of

00:27:47,000 --> 00:27:51,000
hardware you know that they're able to

00:27:49,350 --> 00:27:52,289
do that with so you know it would be

00:27:51,000 --> 00:27:53,940
nice to be able to do that but I think

00:27:52,289 --> 00:27:56,340
they're doing a great job with that and

00:27:53,940 --> 00:27:57,510
you know they're offering a lot of value

00:27:56,340 --> 00:27:59,070
doing what they're doing and I think you

00:27:57,510 --> 00:28:00,480
know we're kind of just saying we're

00:27:59,070 --> 00:28:15,780
trying to get this on the hardware right

00:28:00,480 --> 00:28:17,220
that's our main focus so when so i think

00:28:15,780 --> 00:28:18,539
i've been involved in this a couple of

00:28:17,220 --> 00:28:20,669
times when something's broken that looks

00:28:18,539 --> 00:28:24,090
next you bisect it find it and then you

00:28:20,669 --> 00:28:25,799
have to find what message ID was and

00:28:24,090 --> 00:28:31,799
then post to that yeah so that's the

00:28:25,799 --> 00:28:35,429
manual step that okay so one thing I

00:28:31,799 --> 00:28:37,289
heard and from like deaf perspective you

00:28:35,429 --> 00:28:38,520
guys said you guys got pulled off this

00:28:37,289 --> 00:28:43,049
project and you're kind of doing your

00:28:38,520 --> 00:28:45,179
free time is one hour refocusing on this

00:28:43,049 --> 00:28:47,400
or I mean because it kind of makes me

00:28:45,179 --> 00:28:49,289
hesitate a jungle Adaro project ever

00:28:47,400 --> 00:28:50,940
having a skunk works project that we're

00:28:49,289 --> 00:28:53,909
like we want to do this we need to get

00:28:50,940 --> 00:28:55,500
this thing done we just kind of found a

00:28:53,909 --> 00:28:57,000
like minded people within Lenora to do

00:28:55,500 --> 00:28:58,080
it and the doll has been great they gave

00:28:57,000 --> 00:29:00,120
us a little bit of time to work on it

00:28:58,080 --> 00:29:03,150
initially they provided the builders and

00:29:00,120 --> 00:29:05,419
so that their passive state game but

00:29:03,150 --> 00:29:05,419
it's not

00:29:07,700 --> 00:29:12,809
is it going to continue to be supported

00:29:10,260 --> 00:29:15,870
I mean because okay and did you guys

00:29:12,809 --> 00:29:18,809
ever extend from last year attended the

00:29:15,870 --> 00:29:21,480
same cik and talk it was there any

00:29:18,809 --> 00:29:22,950
extension to the data mining the data

00:29:21,480 --> 00:29:26,039
you were getting like with elastic

00:29:22,950 --> 00:29:28,350
search yeah we discussed that what was

00:29:26,039 --> 00:29:30,240
one of the plants but Ben got derailed

00:29:28,350 --> 00:29:32,580
be area was to just like throw

00:29:30,240 --> 00:29:34,740
everything back into elasticsearch and

00:29:32,580 --> 00:29:37,110
provide like a full text search on the

00:29:34,740 --> 00:29:39,480
website part so you can just like go

00:29:37,110 --> 00:29:41,460
ahead and search for a error message

00:29:39,480 --> 00:29:45,049
where it appears the first time yeah

00:29:41,460 --> 00:29:47,159
fixed like that but yeah no time yeah we

00:29:45,049 --> 00:29:48,570
service the IT was going to provide us

00:29:47,159 --> 00:29:49,590
never ended up happening because we were

00:29:48,570 --> 00:29:51,570
going to use their service rather than

00:29:49,590 --> 00:29:53,010
creating our own so now seems like we

00:29:51,570 --> 00:29:56,549
need to have our own server to do that

00:29:53,010 --> 00:29:58,049
mining but I still think that's a really

00:29:56,549 --> 00:30:00,150
good idea and something that we'd like

00:29:58,049 --> 00:30:01,470
to pursue so what we've recently done

00:30:00,150 --> 00:30:04,110
probably the newest thing is that we've

00:30:01,470 --> 00:30:05,940
added support so we're now building the

00:30:04,110 --> 00:30:07,470
MIPS def to figs we've upgraded the tool

00:30:05,940 --> 00:30:08,640
chains we're able to kind of uniquely

00:30:07,470 --> 00:30:11,820
identify builds with different tool

00:30:08,640 --> 00:30:13,650
chains so with this this kernel C IV to

00:30:11,820 --> 00:30:15,360
architecture that's all built on top of

00:30:13,650 --> 00:30:16,490
containers we'd have containers with the

00:30:15,360 --> 00:30:19,020
different versions of GCC toolchain

00:30:16,490 --> 00:30:20,760
potentially llvm which it makes it a lot

00:30:19,020 --> 00:30:23,100
easier for us to do those builds because

00:30:20,760 --> 00:30:25,289
right now we have you know deployment

00:30:23,100 --> 00:30:26,730
scripts that use salt to configure the

00:30:25,289 --> 00:30:28,260
tool chains and you know they're

00:30:26,730 --> 00:30:29,010
statically configured on the builders so

00:30:28,260 --> 00:30:35,280
it would give us a little bit more

00:30:29,010 --> 00:30:37,260
flexibility into we use for the arm side

00:30:35,280 --> 00:30:39,120
of things we use one ro s compiler for

00:30:37,260 --> 00:30:41,220
x86 we use the distribution compiler

00:30:39,120 --> 00:30:44,130
which we're running on ubuntu and then

00:30:41,220 --> 00:30:46,080
for mips we believe it's basically they

00:30:44,130 --> 00:30:49,230
sent us babe I think it's just a coastal

00:30:46,080 --> 00:30:51,480
sorry if you go on the bill gabby's you

00:30:49,230 --> 00:30:52,530
you'll see the that's that's the first

00:30:51,480 --> 00:30:54,450
question we asked when somebody's like

00:30:52,530 --> 00:30:56,039
can you had architecture x it's like

00:30:54,450 --> 00:30:57,870
where's your tool time what's the most

00:30:56,039 --> 00:30:59,940
common you know supported tool chain and

00:30:57,870 --> 00:31:06,600
that was the one that they provide it to

00:30:59,940 --> 00:31:08,429
us real time so we do that on the LSK so

00:31:06,600 --> 00:31:10,080
the LSK has branch where they have the

00:31:08,429 --> 00:31:11,940
real time patches based on whatever

00:31:10,080 --> 00:31:14,820
stable version they're on and we test

00:31:11,940 --> 00:31:16,950
that and then Andrews from LNG actually

00:31:14,820 --> 00:31:18,000
runs like the real time LT pika tests on

00:31:16,950 --> 00:31:24,130
it

00:31:18,000 --> 00:31:26,590
we do absolutely yep so so forth for

00:31:24,130 --> 00:31:28,060
testing let's assume that I have one

00:31:26,590 --> 00:31:30,580
board that i would like to run certain

00:31:28,060 --> 00:31:32,770
tests for on daily basis it's like being

00:31:30,580 --> 00:31:35,770
up being something true or wireless LAN

00:31:32,770 --> 00:31:38,080
in her face and something minimal so

00:31:35,770 --> 00:31:45,460
what would be the best way to get that

00:31:38,080 --> 00:31:49,870
happening I could do it locally but

00:31:45,460 --> 00:31:53,970
preferably on some server that is more

00:31:49,870 --> 00:31:53,970
reliable setup than my home connection

00:31:56,460 --> 00:32:01,630
it's got templates for tests so you need

00:32:00,100 --> 00:32:03,460
to find out where this board needs to

00:32:01,630 --> 00:32:22,240
live what kind of word is it and can you

00:32:03,460 --> 00:32:23,920
tell yeah okay yeah yeah so we have the

00:32:22,240 --> 00:32:25,390
ability to run the test we don't really

00:32:23,920 --> 00:32:27,160
have the reporting in place but if we

00:32:25,390 --> 00:32:28,690
were hosted in one of the board farms we

00:32:27,160 --> 00:32:30,040
could give you access to you know

00:32:28,690 --> 00:32:31,420
basically have a cron job that would

00:32:30,040 --> 00:32:32,800
just send the job out every so often

00:32:31,420 --> 00:32:34,450
order when the tree changes you use a

00:32:32,800 --> 00:32:35,860
get trigger to send the job there and

00:32:34,450 --> 00:32:37,630
then it would give it would pull you the

00:32:35,860 --> 00:32:38,980
results back locally it just wouldn't

00:32:37,630 --> 00:32:40,270
get pushed to the colonel CI front end

00:32:38,980 --> 00:32:42,160
because we're not ready to start

00:32:40,270 --> 00:32:44,410
displaying task plus we've had some

00:32:42,160 --> 00:32:46,600
members slightly concerned about having

00:32:44,410 --> 00:32:48,940
results posted in a public place so

00:32:46,600 --> 00:32:50,110
we're kind of we're treading very

00:32:48,940 --> 00:32:52,390
lightly there we don't want to make

00:32:50,110 --> 00:32:56,830
anybody upset about the status of their

00:32:52,390 --> 00:32:59,080
board upstream so this is Colonel what

00:32:56,830 --> 00:33:00,610
do you guys do with blue owners how do

00:32:59,080 --> 00:33:03,220
you update them how do you keep those in

00:33:00,610 --> 00:33:05,170
sync with the Colonel's so when

00:33:03,220 --> 00:33:07,380
something breaks the first thing we

00:33:05,170 --> 00:33:10,240
probably will thought of Tom and say Tom

00:33:07,380 --> 00:33:12,190
did something change in you boot or we

00:33:10,240 --> 00:33:16,870
talked to the maintainer zuv the actual

00:33:12,190 --> 00:33:20,110
SOC and just say hey bebos it would be

00:33:16,870 --> 00:33:21,970
nice the problem is you know we talked

00:33:20,110 --> 00:33:23,740
to Tom about this you know starting to

00:33:21,970 --> 00:33:25,900
test you boot in chrome you with the

00:33:23,740 --> 00:33:27,220
latest of latest you boot latest kernel

00:33:25,900 --> 00:33:28,510
and making sure everything works there I

00:33:27,220 --> 00:33:30,370
think we need to get there before we

00:33:28,510 --> 00:33:31,299
have the confidence to you know every

00:33:30,370 --> 00:33:32,739
time you would release

00:33:31,299 --> 00:33:34,360
go through every board that supported

00:33:32,739 --> 00:33:37,590
upstream and upgrade them I mean it's

00:33:34,360 --> 00:33:37,590
quite a lot of maintenance to do that

00:33:39,720 --> 00:33:43,659
just as a follow-on to your question

00:33:41,919 --> 00:33:45,309
about you boo'd can you talk a little

00:33:43,659 --> 00:33:47,739
bit about the mechanics of how you're

00:33:45,309 --> 00:33:50,110
actually loading with the various

00:33:47,739 --> 00:33:51,429
targets both bootloader and Colonel I'm

00:33:50,110 --> 00:33:53,649
assuming the colonel you're doing stuff

00:33:51,429 --> 00:33:56,499
like tht deluded or whatnot but more

00:33:53,649 --> 00:33:58,629
specifically with boot loaders so we

00:33:56,499 --> 00:34:01,239
drive the boot loaders when we can over

00:33:58,629 --> 00:34:04,149
cereal right and we do tftp with you

00:34:01,239 --> 00:34:07,419
boot and networks awesome UEFI will

00:34:04,149 --> 00:34:08,889
typically boot UEFI bloat grub and

00:34:07,419 --> 00:34:10,960
assuming you if I provides the right

00:34:08,889 --> 00:34:12,280
drivers to grab will net Buddha up for

00:34:10,960 --> 00:34:14,889
the enterprise arm servers that's how

00:34:12,280 --> 00:34:16,990
we're doing that Android devices that

00:34:14,889 --> 00:34:20,559
also boot upstream we use fastboot which

00:34:16,990 --> 00:34:22,899
is less than ideal to do because we got

00:34:20,559 --> 00:34:25,240
a million USB connections now plus the

00:34:22,899 --> 00:34:27,429
tooling around making these boot images

00:34:25,240 --> 00:34:28,929
are different from different s OC s so

00:34:27,429 --> 00:34:30,669
we have to have a lot of hockey logic in

00:34:28,929 --> 00:34:32,440
there and then the load addresses

00:34:30,669 --> 00:34:33,849
artists is flexible so what we'll do

00:34:32,440 --> 00:34:36,309
there is will typically create a boot

00:34:33,849 --> 00:34:37,720
image put it on the device we'd like to

00:34:36,309 --> 00:34:38,950
just load it into memory but sometimes

00:34:37,720 --> 00:34:40,540
we actually have to flash it to flash

00:34:38,950 --> 00:34:42,609
and call a reset on the on the cell

00:34:40,540 --> 00:34:44,740
phone to get it to to load the kernel so

00:34:42,609 --> 00:34:46,599
there's a lot of different ways for the

00:34:44,740 --> 00:34:48,040
different android cell phones that we

00:34:46,599 --> 00:34:49,899
support and Colonel so you have it but

00:34:48,040 --> 00:34:53,579
typically the best way to work with the

00:34:49,899 --> 00:34:57,369
boards is tftp and that's what we prefer

00:34:53,579 --> 00:34:58,780
yep now we have a bootloader that just

00:34:57,369 --> 00:35:01,299
statically configured its flashed into

00:34:58,780 --> 00:35:02,980
the ROM or wherever it's it's placed on

00:35:01,299 --> 00:35:04,540
the board and then we power cycle the

00:35:02,980 --> 00:35:06,280
board so it comes up we'd grab the yuku

00:35:04,540 --> 00:35:08,859
prompt we break it and then we can

00:35:06,280 --> 00:35:10,480
figure you have tftp vu now the way lava

00:35:08,859 --> 00:35:12,339
works I can speak towards this is it

00:35:10,480 --> 00:35:14,859
comes with the tftp server and NFS

00:35:12,339 --> 00:35:16,270
server so what we do is when we

00:35:14,859 --> 00:35:18,460
configuring the boot commands to boot we

00:35:16,270 --> 00:35:20,589
point it back at the lava server as the

00:35:18,460 --> 00:35:21,849
tftp host which then pulls the binaries

00:35:20,589 --> 00:35:23,140
law has already downloaded everything

00:35:21,849 --> 00:35:25,240
from the internet off the colonel CI

00:35:23,140 --> 00:35:26,770
storage right get sucked down to the

00:35:25,240 --> 00:35:30,000
board loaded it whatever load addresses

00:35:26,770 --> 00:35:30,000
we tell it to and then we jump to it

00:35:32,960 --> 00:35:38,280
no no we're just leaving leaving with

00:35:35,880 --> 00:35:41,130
statically configured you boot and the

00:35:38,280 --> 00:35:42,660
idea is right if we're testing you

00:35:41,130 --> 00:35:43,920
boonton that what we talked about Tom

00:35:42,660 --> 00:35:46,470
about is that we're gonna start with

00:35:43,920 --> 00:35:48,180
Clem you of x86 right we're gonna we're

00:35:46,470 --> 00:35:51,270
going to inject the latest you boo and

00:35:48,180 --> 00:35:54,360
then exactly yeah yes sir I just want to

00:35:51,270 --> 00:35:55,770
point out that it's another walk college

00:35:54,360 --> 00:35:58,200
said about how all that stuff works is

00:35:55,770 --> 00:36:00,600
not currently I specific it's the jobs

00:35:58,200 --> 00:36:02,940
just offloaded to lava the power of lava

00:36:00,600 --> 00:36:04,140
is that it takes all this funky madness

00:36:02,940 --> 00:36:05,850
that people have got with their boards

00:36:04,140 --> 00:36:09,240
it just deals with it and boots the

00:36:05,850 --> 00:36:10,530
Kerner you've told me to so the fact

00:36:09,240 --> 00:36:12,870
that all this ball so different is all

00:36:10,530 --> 00:36:14,850
the fun of larvae raise the creeper

00:36:12,870 --> 00:36:19,530
creeper but of lava I guess I'm in

00:36:14,850 --> 00:36:22,380
massive double quotes and we have looked

00:36:19,530 --> 00:36:26,240
inside love we looked long and hard

00:36:22,380 --> 00:36:29,850
about the ability of testing bootloaders

00:36:26,240 --> 00:36:32,790
most of the RV seven boards particularly

00:36:29,850 --> 00:36:34,590
those that rely on an SD card it is the

00:36:32,790 --> 00:36:37,170
hardware to do it is just not available

00:36:34,590 --> 00:36:39,660
because automation relies on on the

00:36:37,170 --> 00:36:41,640
board always coming back up and not

00:36:39,660 --> 00:36:43,530
being bricked you put a new version of

00:36:41,640 --> 00:36:45,480
you put on there you're not sure if it's

00:36:43,530 --> 00:36:47,240
going to break the door you need not

00:36:45,480 --> 00:36:49,740
always concert and let them be

00:36:47,240 --> 00:36:51,330
automatically recovered doesn't have any

00:36:49,740 --> 00:36:53,250
PMI doesn't have any other way of

00:36:51,330 --> 00:36:56,520
getting into the device you can have

00:36:53,250 --> 00:37:04,920
someone physically go there take the SD

00:36:56,520 --> 00:37:07,470
card out new one in or jtag so it yeah

00:37:04,920 --> 00:37:09,150
we've looked to do I've I can pointed a

00:37:07,470 --> 00:37:11,550
blog entry we've actually put down the

00:37:09,150 --> 00:37:14,610
criteria we need there are no end of

00:37:11,550 --> 00:37:17,340
people have come up with so we can hack

00:37:14,610 --> 00:37:20,340
solutions of this kind of solution it

00:37:17,340 --> 00:37:22,890
sounds easy I promise you it is not easy

00:37:20,340 --> 00:37:25,260
to automate and do it properly with the

00:37:22,890 --> 00:37:27,540
kind of reliability that these guys need

00:37:25,260 --> 00:37:28,800
well and every platforms different now

00:37:27,540 --> 00:37:30,630
there's some flowers I have platforms

00:37:28,800 --> 00:37:32,430
that have two banks for you boot and you

00:37:30,630 --> 00:37:34,470
can switch it and so you can wire up you

00:37:32,430 --> 00:37:36,270
know some relay to drive the pins and

00:37:34,470 --> 00:37:38,100
select the bank right but that it's

00:37:36,270 --> 00:37:39,600
going to work on a handful of boards and

00:37:38,100 --> 00:37:41,310
we'd like it to work on all the boards

00:37:39,600 --> 00:37:42,270
if possible that we thought about chain

00:37:41,310 --> 00:37:43,620
loading you but which

00:37:42,270 --> 00:37:45,180
what I think you were getting at and I

00:37:43,620 --> 00:37:46,290
don't like that because I've worked in

00:37:45,180 --> 00:37:48,360
software development doing boot loader

00:37:46,290 --> 00:37:49,590
for a long time and that the stock

00:37:48,360 --> 00:37:51,030
bootloader may set up registers

00:37:49,590 --> 00:37:52,440
different than the bootloader that you

00:37:51,030 --> 00:37:54,060
just loaded and everything works and

00:37:52,440 --> 00:37:56,610
when some of customer flashes it you

00:37:54,060 --> 00:37:58,620
know the pins aren't set up right and it

00:37:56,610 --> 00:38:01,380
works for me exactly so we really did

00:37:58,620 --> 00:38:03,330
not want to do that but the good news is

00:38:01,380 --> 00:38:05,220
with lava be too i just submitted a

00:38:03,330 --> 00:38:07,020
patch for bare metal test support so

00:38:05,220 --> 00:38:08,580
we're able to actually so that the demo

00:38:07,020 --> 00:38:10,200
that you saw on stage in the Monday you

00:38:08,580 --> 00:38:11,460
know we're doing this on embedded boards

00:38:10,200 --> 00:38:13,050
where you just squirt firm or in there

00:38:11,460 --> 00:38:15,450
there's no positive shell there's just

00:38:13,050 --> 00:38:17,040
output that gets parsed right so that's

00:38:15,450 --> 00:38:19,230
what we call it bare metal but we could

00:38:17,040 --> 00:38:21,270
now extend that to do you loot testing

00:38:19,230 --> 00:38:22,680
where we can get you boot on like Clem

00:38:21,270 --> 00:38:24,660
you device and actually run through the

00:38:22,680 --> 00:38:26,670
menu and making sure that each you know

00:38:24,660 --> 00:38:28,620
piece of the menu works so we have that

00:38:26,670 --> 00:38:30,300
ability in lava v2 and that's why it's

00:38:28,620 --> 00:38:33,210
very enticing and we want to start to

00:38:30,300 --> 00:38:38,220
move to using that rather than the v1

00:38:33,210 --> 00:38:41,340
lava Oh aku question about examples the

00:38:38,220 --> 00:38:45,480
potassium did you do some out

00:38:41,340 --> 00:38:49,740
heading for the colonel apology so we

00:38:45,480 --> 00:38:51,870
have case self-test self-test only does

00:38:49,740 --> 00:38:53,820
case hell yeah that's and then we have

00:38:51,870 --> 00:38:55,110
ltte and hack bench and we have some

00:38:53,820 --> 00:38:56,460
performance things that we can run but

00:38:55,110 --> 00:38:58,700
we don't post we're not doing any test

00:38:56,460 --> 00:39:01,700
results in courtesy I just boot testing

00:38:58,700 --> 00:39:01,700
okay

00:39:14,680 --> 00:39:21,310
yeah this very few devices are actually

00:39:17,540 --> 00:39:24,230
in EJ typer with laur v2 you've got

00:39:21,310 --> 00:39:26,150
support inside that for Alexei

00:39:24,230 --> 00:39:28,850
containers and we've already worked out

00:39:26,150 --> 00:39:30,920
basically you can put whatever software

00:39:28,850 --> 00:39:32,990
you need to drive whatever Hardware you

00:39:30,920 --> 00:39:36,200
can make available to that container to

00:39:32,990 --> 00:39:40,040
actually do what the v1 jtags would had

00:39:36,200 --> 00:39:43,280
to do but even then there's not many

00:39:40,040 --> 00:39:44,660
devices and you can't roll that back and

00:39:43,280 --> 00:39:49,070
think oh that's going to be able to

00:39:44,660 --> 00:39:52,100
allow us to to rescue you boot either

00:39:49,070 --> 00:39:56,359
because that supporters is very very

00:39:52,100 --> 00:39:58,640
erratic and very specific to individual

00:39:56,359 --> 00:40:00,410
individual boards if it's available on

00:39:58,640 --> 00:40:02,690
the board at all because you may well

00:40:00,410 --> 00:40:04,640
find that the jtags only on the

00:40:02,690 --> 00:40:09,160
prototype boards isn't on the boards you

00:40:04,640 --> 00:40:09,160
just buy us commercial units anymore

00:40:13,750 --> 00:40:18,260
anything else is courtesy I helpful to

00:40:16,640 --> 00:40:19,730
people I mean it sounds like there's

00:40:18,260 --> 00:40:21,500
some people that are using it daily and

00:40:19,730 --> 00:40:23,619
that's good to hear it's really good to

00:40:21,500 --> 00:40:26,030
hear actually because we don't know so

00:40:23,619 --> 00:40:27,260
feel free to shout at us too if like

00:40:26,030 --> 00:40:30,040
there's something to cheers like this is

00:40:27,260 --> 00:40:44,480
complete garbage we can't use this

00:40:30,040 --> 00:40:46,010
that's really that's I guess more on the

00:40:44,480 --> 00:40:47,720
management side of things I see Colonel

00:40:46,010 --> 00:40:51,290
CI as being something that's got open

00:40:47,720 --> 00:40:54,740
source consumers of it but not con

00:40:51,290 --> 00:40:56,599
contributors right and so what I would

00:40:54,740 --> 00:40:58,220
really like to see is to see people who

00:40:56,599 --> 00:40:59,900
want to feature like a plastic search

00:40:58,220 --> 00:41:01,430
work with me they'll figure out how to

00:40:59,900 --> 00:41:04,069
get it in there and then start proposing

00:41:01,430 --> 00:41:05,240
those patches and really help us make

00:41:04,069 --> 00:41:07,250
this that project that's got

00:41:05,240 --> 00:41:14,540
contributions coming in for more people

00:41:07,250 --> 00:41:16,250
than these two guys like from a website

00:41:14,540 --> 00:41:17,869
development point of view but most from

00:41:16,250 --> 00:41:20,240
a colonel side point of view so just

00:41:17,869 --> 00:41:23,420
like fixing bugs look at the website

00:41:20,240 --> 00:41:26,030
reports those kind of things first yeah

00:41:23,420 --> 00:41:27,710
there's a little bit of activity on over

00:41:26,030 --> 00:41:29,480
people of La lava lava that are

00:41:27,710 --> 00:41:31,490
integrated we cannot see I so we fix

00:41:29,480 --> 00:41:33,920
issues very just like bringing up new

00:41:31,490 --> 00:41:36,770
port so first resurrect evteeva but I

00:41:33,920 --> 00:41:44,150
never expected activity on but side of

00:41:36,770 --> 00:41:47,690
development point yeah so a couple of

00:41:44,150 --> 00:41:50,750
the features and badly needed would be

00:41:47,690 --> 00:41:53,720
automated git bisect and boot instead of

00:41:50,750 --> 00:41:55,910
just producing the script that would

00:41:53,720 --> 00:42:06,910
save huge amount of stuff of time if

00:41:55,910 --> 00:42:06,910
that could be automated okay yeah

00:42:09,550 --> 00:42:29,810
okay okay yeah yeah that would say

00:42:28,099 --> 00:42:32,720
probably like at least half a day of

00:42:29,810 --> 00:42:38,480
time for me per week between rc2 and our

00:42:32,720 --> 00:42:40,760
c7 there if there was some other feature

00:42:38,480 --> 00:42:44,960
but I have to come back to the later on

00:42:40,760 --> 00:42:47,810
when I remember so how is boot testing

00:42:44,960 --> 00:42:50,060
on android phones different than mu

00:42:47,810 --> 00:42:52,790
testing it on no development boots which

00:42:50,060 --> 00:42:54,890
we have i mean i know that i'm def birds

00:42:52,790 --> 00:42:57,349
we just boot to console and right right

00:42:54,890 --> 00:43:00,010
ok we are done how do you do that on

00:42:57,349 --> 00:43:00,010
phones do

00:43:51,869 --> 00:43:57,910
so my question was more from it's a boot

00:43:56,290 --> 00:43:59,500
successful future point of view right

00:43:57,910 --> 00:44:01,930
when you put the image when you will

00:43:59,500 --> 00:44:04,000
flash the boot image and you just boot

00:44:01,930 --> 00:44:26,109
it to console and say okay everything is

00:44:04,000 --> 00:44:27,460
fine similar to what we do and develop

00:44:26,109 --> 00:44:40,810
in boots because we aren't the same come

00:44:27,460 --> 00:44:42,400
outside so just just them going back to

00:44:40,810 --> 00:44:45,910
they still to automate it functional

00:44:42,400 --> 00:44:48,010
testing that's something that we also

00:44:45,910 --> 00:44:50,470
badly need just basic testing make sure

00:44:48,010 --> 00:44:54,839
MMC works and we can bring something

00:44:50,470 --> 00:44:54,839
over wireless LAN nothing complex and

00:44:55,020 --> 00:45:00,820
using Colonel CI that or over past let's

00:44:58,450 --> 00:45:04,030
say one and a half years what I managed

00:45:00,820 --> 00:45:08,980
to do for myself is I managed to move

00:45:04,030 --> 00:45:10,930
the testing for regressions and dealing

00:45:08,980 --> 00:45:13,690
with the regressions from happening

00:45:10,930 --> 00:45:16,450
after RC one to actually happening

00:45:13,690 --> 00:45:19,980
before the merge window open so that's a

00:45:16,450 --> 00:45:22,599
great help because that removes them

00:45:19,980 --> 00:45:25,359
urgency for for trying to deal with

00:45:22,599 --> 00:45:29,170
regressions when it's too late after the

00:45:25,359 --> 00:45:31,060
merge window so I've actually managed to

00:45:29,170 --> 00:45:34,830
get to the point where i can now use

00:45:31,060 --> 00:45:37,050
linux next between RC 2 and our CCM

00:45:34,830 --> 00:45:39,630
and on daily basis for my for my

00:45:37,050 --> 00:45:43,920
development work so it has saved me a

00:45:39,630 --> 00:45:46,740
lot of time so and that hassle also of

00:45:43,920 --> 00:45:49,620
course fixed some of the bugs because I

00:45:46,740 --> 00:45:51,840
have to keep it working for myself so i

00:45:49,620 --> 00:45:54,380
would i would urge other people also to

00:45:51,840 --> 00:45:56,640
start doing that and it might take

00:45:54,380 --> 00:45:58,440
probably up to a year depending on the

00:45:56,640 --> 00:46:00,180
hardware platform to get to that point

00:45:58,440 --> 00:46:02,310
but once you are there then you don't

00:46:00,180 --> 00:46:03,960
really want to see any requests because

00:46:02,310 --> 00:46:08,250
you know that you have to deal with them

00:46:03,960 --> 00:46:11,460
later on and then also what's

00:46:08,250 --> 00:46:14,000
interesting what has changed during that

00:46:11,460 --> 00:46:17,730
time is that initially the regressions

00:46:14,000 --> 00:46:20,790
usually we're somewhere in the arm SOC

00:46:17,730 --> 00:46:24,090
tree but seems like that's now gone and

00:46:20,790 --> 00:46:27,210
the regressions I'm seeing are mostly in

00:46:24,090 --> 00:46:32,550
in driver subsystems and and me looks

00:46:27,210 --> 00:46:35,640
generic features so so some kind of

00:46:32,550 --> 00:46:37,140
statistics on on where the regressions

00:46:35,640 --> 00:46:38,490
happen might be really interesting and

00:46:37,140 --> 00:46:41,310
how they are changing but I think we've

00:46:38,490 --> 00:46:43,590
gotten the arm SOC in general into

00:46:41,310 --> 00:46:45,150
pretty good shape and and and Colonel

00:46:43,590 --> 00:46:48,150
see I'd a dog has really helped with

00:46:45,150 --> 00:46:50,640
that but now we need to get there linaro

00:46:48,150 --> 00:46:52,530
driver subsystem maintain errs to make

00:46:50,640 --> 00:46:55,470
sure that they don't produce regressions

00:46:52,530 --> 00:46:58,320
because that's like still almost weekly

00:46:55,470 --> 00:47:01,590
event between RC to NRC seven

00:46:58,320 --> 00:47:04,920
unfortunately not necessarily narrow but

00:47:01,590 --> 00:47:07,400
a lot of them form devices on linaro

00:47:04,920 --> 00:47:07,400
maintain

00:47:40,339 --> 00:47:46,440
so so you mentioned I think he said

00:47:45,480 --> 00:47:50,549
something about standards I don't

00:47:46,440 --> 00:47:52,019
remember we said but ok so i'm i'm the

00:47:50,549 --> 00:47:55,230
one that gave you the sony experience

00:47:52,019 --> 00:47:56,519
phone and it's got the weirdo funky you

00:47:55,230 --> 00:47:59,779
have to inject something in the device

00:47:56,519 --> 00:48:02,460
tree in order to make it work and and

00:47:59,779 --> 00:48:06,809
also at Camp boot it can't do fast boot

00:48:02,460 --> 00:48:08,490
from ram which is another issue but what

00:48:06,809 --> 00:48:10,980
would be helpful I think industry-wide

00:48:08,490 --> 00:48:13,079
I've thought about this a little bit is

00:48:10,980 --> 00:48:17,069
if there were some kind of best

00:48:13,079 --> 00:48:20,400
practices document or or even a meta

00:48:17,069 --> 00:48:23,609
test that says you know it's like if you

00:48:20,400 --> 00:48:26,460
if you're bored or your bootloader meets

00:48:23,609 --> 00:48:28,289
this set of criteria like it can tftp

00:48:26,460 --> 00:48:29,339
boot and that type of thing that is kind

00:48:28,289 --> 00:48:31,589
of like the gold standard for

00:48:29,339 --> 00:48:33,900
testability then you can kind of get

00:48:31,589 --> 00:48:35,700
that out there so like when Sony

00:48:33,900 --> 00:48:37,619
engineers are doing weird the stuff with

00:48:35,700 --> 00:48:40,500
their firmware we can say hey you're not

00:48:37,619 --> 00:48:42,359
following this standard so I think that

00:48:40,500 --> 00:48:45,500
would be useful i don't know how to kick

00:48:42,359 --> 00:48:45,500
start something like that

00:48:59,480 --> 00:49:10,040
right we actually proposed something the

00:49:05,310 --> 00:49:12,630
USBC to put debug in in the standard so

00:49:10,040 --> 00:49:16,650
but I don't know if it went any where is

00:49:12,630 --> 00:49:17,910
the problem but yeah that so I'm not

00:49:16,650 --> 00:49:19,640
sure how to follow up on that I would

00:49:17,910 --> 00:49:22,230
like to follow up with you guys to

00:49:19,640 --> 00:49:26,300
somehow doc you at least document these

00:49:22,230 --> 00:49:26,300
if not put out you know something

00:49:42,349 --> 00:49:54,569
okay yeah I guess it would start by

00:49:45,780 --> 00:50:00,359
comparing notes so right and you know if

00:49:54,569 --> 00:50:04,079
we could make a standard you know it's

00:50:00,359 --> 00:50:05,339
yeah well what was because a lot of the

00:50:04,079 --> 00:50:08,790
manufacturers have this in a house

00:50:05,339 --> 00:50:10,680
already I'd question how tractable is to

00:50:08,790 --> 00:50:11,819
achieve getting them all standardized

00:50:10,680 --> 00:50:19,079
because they'd have to read all their

00:50:11,819 --> 00:50:20,609
tests jigs and production lines line I

00:50:19,079 --> 00:50:21,930
know some of the manufacturers didn't

00:50:20,609 --> 00:50:23,190
well they're moving too fast boot

00:50:21,930 --> 00:50:36,869
because they'd have to redo all the

00:50:23,190 --> 00:50:39,210
flashing tools the production cell

00:50:36,869 --> 00:50:40,650
phones over ninety percent of the

00:50:39,210 --> 00:50:42,599
production cell phones I've worked on do

00:50:40,650 --> 00:50:44,220
yeah I think it for me from my point of

00:50:42,599 --> 00:50:46,380
view it's getting it into fastboot mode

00:50:44,220 --> 00:50:48,000
so like on the Sony device right where

00:50:46,380 --> 00:50:50,190
you can't load into Ram you can't erase

00:50:48,000 --> 00:50:51,180
the boot partition and then just haven't

00:50:50,190 --> 00:50:52,650
stopped in fastboot mode that's

00:50:51,180 --> 00:50:54,630
typically what we do but when you have

00:50:52,650 --> 00:50:55,980
to flash something if the board oops is

00:50:54,630 --> 00:50:58,109
and resets itself it's just going to

00:50:55,980 --> 00:50:59,910
continually just get stuck in a kernel

00:50:58,109 --> 00:51:00,930
hoops but you know you have you ever set

00:50:59,910 --> 00:51:03,000
up there where you can actually get it

00:51:00,930 --> 00:51:03,780
into fastboot mode so that works okay

00:51:03,000 --> 00:51:06,690
but it would be great to see that

00:51:03,780 --> 00:51:09,240
standardized somehow that everybody can

00:51:06,690 --> 00:51:11,069
use cross-industry okay yeah I'm just

00:51:09,240 --> 00:51:12,690
gonna add to that that it may be hard

00:51:11,069 --> 00:51:15,299
with a lot of devices but at least

00:51:12,690 --> 00:51:18,390
setting up a bar out there exactly for

00:51:15,299 --> 00:51:19,589
people to attain yeah yeah yeah and then

00:51:18,390 --> 00:51:21,000
I can give credit to the ones that are

00:51:19,589 --> 00:51:22,980
doing it right saying these phones are

00:51:21,000 --> 00:51:25,920
doing it right yeah like I'm cell phones

00:51:22,980 --> 00:51:28,799
but I do some edit systems that are not

00:51:25,920 --> 00:51:31,470
really commercial industrial and putting

00:51:28,799 --> 00:51:34,829
a relay on a board and having it off of

00:51:31,470 --> 00:51:36,630
an STD I GPR expander right or whatever

00:51:34,829 --> 00:51:39,480
that's off USB with some new arts and

00:51:36,630 --> 00:51:40,950
jtag that's easy for me to go do having

00:51:39,480 --> 00:51:46,309
the bar set makes it easier for me to go

00:51:40,950 --> 00:51:46,309
do that yeah yeah but yeah

00:51:48,140 --> 00:51:53,760
yeah I think maybe part of it is getting

00:51:51,539 --> 00:51:56,569
people to publish or to give access to

00:51:53,760 --> 00:51:58,890
what they already have so I know

00:51:56,569 --> 00:52:00,720
shipping cell phones people go you can't

00:51:58,890 --> 00:52:04,079
do this on I knew you physically can't

00:52:00,720 --> 00:52:06,059
because they I've worked on them you

00:52:04,079 --> 00:52:06,990
just need the right test for test thing

00:52:06,059 --> 00:52:11,279
to plug in the port from the

00:52:06,990 --> 00:52:12,480
manufacturer well it don't certainly

00:52:11,279 --> 00:52:16,230
wouldn't admit it but they won't give

00:52:12,480 --> 00:52:18,029
out that hardware okay really good

00:52:16,230 --> 00:52:19,619
discussion guys I'm glad everybody was

00:52:18,029 --> 00:52:21,869
so involved but I think we are a few

00:52:19,619 --> 00:52:23,730
minutes over so thank you for coming and

00:52:21,869 --> 00:52:26,630
will continue to work on this and take

00:52:23,730 --> 00:52:26,630
your feedback thank you

00:52:34,370 --> 00:52:36,430

YouTube URL: https://www.youtube.com/watch?v=_pTXTXTHpyY


