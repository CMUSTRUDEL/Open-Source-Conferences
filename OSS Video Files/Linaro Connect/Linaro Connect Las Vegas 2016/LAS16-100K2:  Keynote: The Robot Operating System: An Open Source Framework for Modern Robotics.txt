Title: LAS16-100K2:  Keynote: The Robot Operating System: An Open Source Framework for Modern Robotics
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-100K2: The Robot Operating System: An Open Source Framework for Modern Robotics
Speakers: Morgan Quigley
Date: September 26, 2016

★ Session Description ★
Title: The Robot Operating System: An Open Source Framework for Modern Robotics

Creating truly robust, general-purpose robot software is hard! From the robot’s perspective, many problems that seem trivial to humans can actually encompass wild variations between instances of tasks and environments. Dealing with real-world variations in complex tasks and environments is so difficult that no single individual, laboratory, or institution can hope to build a complete system from scratch.
As a result, the Robot Operating System (ROS) was built from the ground up to encourage collaborative robotics software development. It is a collection of tools, libraries, and conventions that aim to simplify the task of creating complex and robust robot behavior across a wide variety of robot platforms. This talk will provide an overview of the design of ROS and show a collection of applications in industry, academia, and government. It will also briefly describe current development efforts to incorporate Transport Layer Security (TLS), access controls, a flexible UDP-based networking subsystem, and other “wish list” items for the future.

Bio
Morgan Quigley is Chief Architect of the Open Source Robotics Foundation. Prior to OSRF, Morgan received a PhD in Computer Science from Stanford University in 2012. He was one of the founding contributors of ROS and continues to participate in the development of ROS and ROS2. His research interests include collaborative software development, distributed systems, and embedded systems of all shapes and sizes.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-100k2
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-100k2/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:00,000 --> 00:00:07,500
but also increasingly deployments into

00:00:02,429 --> 00:00:09,690
industry and commercial settings so we

00:00:07,500 --> 00:00:12,450
have two primary projects that were that

00:00:09,690 --> 00:00:14,670
we steward where one is the Ross the

00:00:12,450 --> 00:00:16,170
robot operating system and the second is

00:00:14,670 --> 00:00:18,359
gazebo which is a physics-based

00:00:16,170 --> 00:00:19,830
simulator that can simulate sensors and

00:00:18,359 --> 00:00:21,380
actuators and i'll talk more about these

00:00:19,830 --> 00:00:23,490
two projects and how they interact

00:00:21,380 --> 00:00:25,170
before i get any further though i should

00:00:23,490 --> 00:00:26,580
note that when we use the word operating

00:00:25,170 --> 00:00:28,380
system it's in a bit of a different

00:00:26,580 --> 00:00:30,900
context and in different intention than

00:00:28,380 --> 00:00:32,160
oftentimes it's them so we oftentimes

00:00:30,900 --> 00:00:34,079
think of operating systems as

00:00:32,160 --> 00:00:35,960
abstractions that sit on top of common

00:00:34,079 --> 00:00:37,800
hardware like a file system or a

00:00:35,960 --> 00:00:41,219
graphics driver or a network

00:00:37,800 --> 00:00:42,149
encapsulation and that's great and you

00:00:41,219 --> 00:00:43,530
know it's been around for many decades

00:00:42,149 --> 00:00:45,690
it's a fantastic level of abstraction

00:00:43,530 --> 00:00:47,039
but oftentimes in robotics we actually

00:00:45,690 --> 00:00:49,410
want to go one level higher than that

00:00:47,039 --> 00:00:51,090
because for example many robots if not

00:00:49,410 --> 00:00:53,520
most robust nowadays have more than one

00:00:51,090 --> 00:00:55,320
computer on them so you need to be

00:00:53,520 --> 00:00:57,030
operating between multiple machines as

00:00:55,320 --> 00:00:58,800
well as providing the next level of

00:00:57,030 --> 00:01:00,210
abstraction for things like sensors and

00:00:58,800 --> 00:01:03,270
actuators so we can operate at a higher

00:01:00,210 --> 00:01:04,619
level with with both the hardware as

00:01:03,270 --> 00:01:06,240
well as the descriptions of the robot

00:01:04,619 --> 00:01:07,710
and it's its physical strength

00:01:06,240 --> 00:01:11,220
structures and how it interacts with the

00:01:07,710 --> 00:01:12,780
world around them so like like many

00:01:11,220 --> 00:01:14,400
open-source groups were supported by a

00:01:12,780 --> 00:01:16,470
generous collection of sponsors

00:01:14,400 --> 00:01:18,090
including many government agencies as

00:01:16,470 --> 00:01:20,340
well as large corporations and

00:01:18,090 --> 00:01:22,110
individual contributors as well from a

00:01:20,340 --> 00:01:24,180
financial standpoint and then we get

00:01:22,110 --> 00:01:26,100
many many many contributions like all

00:01:24,180 --> 00:01:27,630
open source projects to from all over

00:01:26,100 --> 00:01:31,619
the world for many thousands of people

00:01:27,630 --> 00:01:32,970
were very grateful for that so if we

00:01:31,619 --> 00:01:36,150
back up a little bit and let's think

00:01:32,970 --> 00:01:37,290
about what a robot looks like it's you

00:01:36,150 --> 00:01:39,450
know coming from the computer science

00:01:37,290 --> 00:01:41,460
perspective you can look at it as it's a

00:01:39,450 --> 00:01:43,680
bunch of software that has to receive

00:01:41,460 --> 00:01:45,840
data from sensors some of bank of

00:01:43,680 --> 00:01:47,430
sensors has to make some sort of

00:01:45,840 --> 00:01:49,860
decision or modeling about that sensor

00:01:47,430 --> 00:01:51,360
data and then reach down back through

00:01:49,860 --> 00:01:53,100
the world fewer collection of actuators

00:01:51,360 --> 00:01:55,500
and in the meantime while we're doing

00:01:53,100 --> 00:01:57,960
all that stuff the world itself is

00:01:55,500 --> 00:01:59,850
reacting and in fact our actuators maybe

00:01:57,960 --> 00:02:00,930
maybe effects in the world but then

00:01:59,850 --> 00:02:02,850
we're going to see response from the

00:02:00,930 --> 00:02:04,500
sensors so there's a big loop there that

00:02:02,850 --> 00:02:06,630
needs to be closed using software and

00:02:04,500 --> 00:02:08,340
what we're seeing over time is that that

00:02:06,630 --> 00:02:10,050
the complexity of that software keeps

00:02:08,340 --> 00:02:13,520
increasing as people are trying to do

00:02:10,050 --> 00:02:16,020
more and more things with their robots

00:02:13,520 --> 00:02:18,180
so what we're trying to do to attack it

00:02:16,020 --> 00:02:20,280
is rather than try to end up with these

00:02:18,180 --> 00:02:22,730
monolithic software blobs instead break

00:02:20,280 --> 00:02:25,680
it up into many different smaller pieces

00:02:22,730 --> 00:02:27,000
the goal that is is there are lots of

00:02:25,680 --> 00:02:28,800
pieces that were always going to do but

00:02:27,000 --> 00:02:31,200
but one of the primary things is it

00:02:28,800 --> 00:02:33,300
achieve reusability so that when you

00:02:31,200 --> 00:02:34,890
have a sub-module that's a device driver

00:02:33,300 --> 00:02:37,170
for a particular robot or maybe a

00:02:34,890 --> 00:02:39,300
pathfinder or some other part of the

00:02:37,170 --> 00:02:40,920
robot functionality once that's debugged

00:02:39,300 --> 00:02:42,060
and working in theory you should be able

00:02:40,920 --> 00:02:44,640
to apply that to lots of different

00:02:42,060 --> 00:02:46,860
applications and also some videos that

00:02:44,640 --> 00:02:49,380
try to illustrate this but the point is

00:02:46,860 --> 00:02:52,200
that most of your robot software should

00:02:49,380 --> 00:02:54,030
be reusable and in fact the application

00:02:52,200 --> 00:02:55,680
specific part of it over time we're

00:02:54,030 --> 00:02:58,170
hoping becomes a very very small piece

00:02:55,680 --> 00:02:59,250
of depth of the overall software with

00:02:58,170 --> 00:03:01,200
the goal being that we increase the

00:02:59,250 --> 00:03:03,959
robustness and the stability systems and

00:03:01,200 --> 00:03:05,489
improve their testing over time so I've

00:03:03,959 --> 00:03:06,750
also shown where the gazebo projects

00:03:05,489 --> 00:03:09,450
fits in so that when you're developing

00:03:06,750 --> 00:03:10,860
the software you can you can have this

00:03:09,450 --> 00:03:12,270
gazebo simulator running and you don't

00:03:10,860 --> 00:03:14,070
actually have to have a physical robot

00:03:12,270 --> 00:03:16,200
that's great for lots of reasons for

00:03:14,070 --> 00:03:18,090
example this is the turtle bot which is

00:03:16,200 --> 00:03:19,560
a relatively low cost robot but even

00:03:18,090 --> 00:03:21,510
when I say that you can have to have an

00:03:19,560 --> 00:03:23,310
asterisk because a low-cost robot is

00:03:21,510 --> 00:03:25,560
still odds are a thousand dollars or

00:03:23,310 --> 00:03:27,299
more so because of that there's not an

00:03:25,560 --> 00:03:29,190
infinite supply of them in every lab

00:03:27,299 --> 00:03:30,870
even well-equipped labs might not have

00:03:29,190 --> 00:03:32,640
as many robots as there are engineers

00:03:30,870 --> 00:03:34,260
that's typically true when you get into

00:03:32,640 --> 00:03:35,640
more exotic research platforms where

00:03:34,260 --> 00:03:38,130
they can easily cost a million dollars

00:03:35,640 --> 00:03:40,260
or more so being able to have a

00:03:38,130 --> 00:03:42,840
simulator that works that you can target

00:03:40,260 --> 00:03:43,829
from your day-to-day work is something

00:03:42,840 --> 00:03:45,239
that I'm sure many people here are

00:03:43,829 --> 00:03:47,400
familiar with from the embedded context

00:03:45,239 --> 00:03:48,959
and it's just the same for robust with

00:03:47,400 --> 00:03:50,820
the added constraints the robots break

00:03:48,959 --> 00:03:52,230
they have batteries of discharge over

00:03:50,820 --> 00:03:53,579
time and unfortunately those batter is

00:03:52,230 --> 00:03:55,350
usually discharged as it's running down

00:03:53,579 --> 00:03:56,760
the corridor away from you then it gets

00:03:55,350 --> 00:03:58,799
stuck in a corner where there's no Wi-Fi

00:03:56,760 --> 00:04:00,600
so this type of thing happens a lot and

00:03:58,799 --> 00:04:02,790
being able to have a simulator can

00:04:00,600 --> 00:04:04,799
simplify and just make the daily life of

00:04:02,790 --> 00:04:06,720
coding easier but what we're trying to

00:04:04,799 --> 00:04:08,250
do with Ross is make it so that the

00:04:06,720 --> 00:04:09,750
software interfaces and all the

00:04:08,250 --> 00:04:11,700
interconnections that are happening on

00:04:09,750 --> 00:04:13,560
the network look the same whether it's

00:04:11,700 --> 00:04:15,540
the simulator or in fact now you can

00:04:13,560 --> 00:04:18,269
plug in a real turtlebot there with a

00:04:15,540 --> 00:04:19,739
dragon board on top of it but your

00:04:18,269 --> 00:04:21,570
software should be qualitatively the

00:04:19,739 --> 00:04:23,220
same and the parameter tuning and such

00:04:21,570 --> 00:04:25,860
we're trying to abstract those away into

00:04:23,220 --> 00:04:26,740
text files so that the vast majority of

00:04:25,860 --> 00:04:29,229
the software on

00:04:26,740 --> 00:04:32,770
same whether it's a simulation or in the

00:04:29,229 --> 00:04:34,870
real hardware so I'd like to then show a

00:04:32,770 --> 00:04:37,150
video of a turtle block running around

00:04:34,870 --> 00:04:38,800
with the dragon board for 10 c on top of

00:04:37,150 --> 00:04:48,220
it so if we could play the video it's

00:04:38,800 --> 00:04:49,900
called TB 2e this video is made by the

00:04:48,220 --> 00:04:51,550
good folks over at make magazine they

00:04:49,900 --> 00:04:53,620
posted it on YouTube so there's a full

00:04:51,550 --> 00:04:55,840
video you can see on youtube includes

00:04:53,620 --> 00:04:58,539
interviews they've done with others but

00:04:55,840 --> 00:05:00,490
that's it turtlebot a small little robot

00:04:58,539 --> 00:05:03,130
there with a dragon board on top it has

00:05:00,490 --> 00:05:04,509
a depth camera on the turtlebot it's

00:05:03,130 --> 00:05:06,610
looking at the person in front of them

00:05:04,509 --> 00:05:08,229
and then as that person speeds up or

00:05:06,610 --> 00:05:09,550
slows down the turtlebot then speeds up

00:05:08,229 --> 00:05:11,710
or slow down to follow right behind you

00:05:09,550 --> 00:05:13,030
and it's a fun demo for tradeshows but

00:05:11,710 --> 00:05:15,280
it actually has economic implications

00:05:13,030 --> 00:05:16,979
because if we can roll it again well I

00:05:15,280 --> 00:05:19,240
keep talking over it would be great what

00:05:16,979 --> 00:05:20,979
we can do with this is where house

00:05:19,240 --> 00:05:22,690
picking application for example rather

00:05:20,979 --> 00:05:24,789
than walking down the warehouse shelves

00:05:22,690 --> 00:05:26,500
with with a cart or some other way to

00:05:24,789 --> 00:05:28,060
carry the items back you can have a

00:05:26,500 --> 00:05:30,009
robot that follows behind you with a big

00:05:28,060 --> 00:05:31,900
box on top and then this application

00:05:30,009 --> 00:05:33,580
actually runs today people use your

00:05:31,900 --> 00:05:35,289
office to do this exact application for

00:05:33,580 --> 00:05:37,000
for warehouse picking where you're

00:05:35,289 --> 00:05:38,680
rocking on this big huge warehouse floor

00:05:37,000 --> 00:05:40,240
is picking things out of boxes and

00:05:38,680 --> 00:05:41,500
putting them in their robot and then

00:05:40,240 --> 00:05:43,210
when you're done if the order you can

00:05:41,500 --> 00:05:44,530
tell or a lot to go back to the shipping

00:05:43,210 --> 00:05:45,969
department while you keep picking more

00:05:44,530 --> 00:05:48,550
orders and a new robot comes to follow

00:05:45,969 --> 00:05:50,620
you so again we did this demo at maker

00:05:48,550 --> 00:05:52,870
faire this last year using the dragon

00:05:50,620 --> 00:05:54,990
board for Tennessee on top and if I can

00:05:52,870 --> 00:05:59,110
go back to this slice now skip it in

00:05:54,990 --> 00:06:00,430
thank you so if we look at the hardware

00:05:59,110 --> 00:06:02,080
that's happening here we have the dragon

00:06:00,430 --> 00:06:05,139
board for 10 C which is the center of

00:06:02,080 --> 00:06:06,639
this little robot it has a depth camera

00:06:05,139 --> 00:06:08,500
that's plugged into it in this case

00:06:06,639 --> 00:06:10,900
we're using a Norbeck Astra but there's

00:06:08,500 --> 00:06:12,340
now a pretty big equivalence class of

00:06:10,900 --> 00:06:14,229
depth cameras made by various vendors

00:06:12,340 --> 00:06:15,550
around the world would then have a

00:06:14,229 --> 00:06:17,620
joystick so that we can turn the

00:06:15,550 --> 00:06:19,569
following mode on and off or override

00:06:17,620 --> 00:06:21,639
the following behavior and teleoperated

00:06:19,569 --> 00:06:22,750
directly and then at the other end of

00:06:21,639 --> 00:06:25,810
the screen we're plugging in the

00:06:22,750 --> 00:06:26,919
turtlebot into the USB ports so all

00:06:25,810 --> 00:06:28,690
these things are hanging off the USB

00:06:26,919 --> 00:06:31,449
tree and we're trying to then have a way

00:06:28,690 --> 00:06:33,069
to expose them in a way that is ideally

00:06:31,449 --> 00:06:35,889
reusable for the vast majority the

00:06:33,069 --> 00:06:37,120
software so now if we stop looking at

00:06:35,889 --> 00:06:39,039
hardware and look at a logical

00:06:37,120 --> 00:06:39,870
description of what's happening I won't

00:06:39,039 --> 00:06:41,760
get into the details

00:06:39,870 --> 00:06:44,220
all this but you can see that there's

00:06:41,760 --> 00:06:46,170
various software bubbles that are taking

00:06:44,220 --> 00:06:47,610
information in crossings to them in some

00:06:46,170 --> 00:06:49,830
sort and then pass them on to other

00:06:47,610 --> 00:06:51,300
bubbles and so as we oftentimes in

00:06:49,830 --> 00:06:53,880
computer science talk about graph theory

00:06:51,300 --> 00:06:56,610
so we call this a computation graph and

00:06:53,880 --> 00:06:58,080
Ross where every every bubble in the

00:06:56,610 --> 00:06:59,970
graph is a piece of software it's a

00:06:58,080 --> 00:07:02,910
module and those can either known as

00:06:59,970 --> 00:07:04,470
separate processes or for speed and

00:07:02,910 --> 00:07:06,930
efficiency we can put some of these

00:07:04,470 --> 00:07:08,970
nodes we call them in the same process

00:07:06,930 --> 00:07:11,310
to have fewer Stewart data crashing

00:07:08,970 --> 00:07:12,780
around through the networking stack so

00:07:11,310 --> 00:07:14,670
the idea is that the vast majority of

00:07:12,780 --> 00:07:16,650
this can be reused and in fact for this

00:07:14,670 --> 00:07:18,720
turtle dog follower demonstration only

00:07:16,650 --> 00:07:20,640
one I've drawn it in green there the

00:07:18,720 --> 00:07:22,200
only piece of software that's unique for

00:07:20,640 --> 00:07:23,880
the turtle bought follower is the one

00:07:22,200 --> 00:07:26,100
that's actually looking for the it takes

00:07:23,880 --> 00:07:27,540
of abstract point cloud in finds a bowl

00:07:26,100 --> 00:07:29,430
of points and then it tries to either

00:07:27,540 --> 00:07:30,960
speed up or slow down but all the other

00:07:29,430 --> 00:07:33,210
supporting infrastructure around that is

00:07:30,960 --> 00:07:35,580
recyclable for other applications and in

00:07:33,210 --> 00:07:37,710
fact it's used many of those nodes there

00:07:35,580 --> 00:07:39,450
are used in many other robots of wildly

00:07:37,710 --> 00:07:43,170
varying proportions which I'll show in

00:07:39,450 --> 00:07:45,360
the future so in general of this rels we

00:07:43,170 --> 00:07:47,790
call it plumbing to have this dynamic

00:07:45,360 --> 00:07:49,470
computation graph it can be all these

00:07:47,790 --> 00:07:51,900
nodes can be inserted and removed on the

00:07:49,470 --> 00:07:53,160
fly and that's you know it's useful

00:07:51,900 --> 00:07:54,810
oftentimes maybe you want to have the

00:07:53,160 --> 00:07:56,550
robot switch modes or the computation

00:07:54,810 --> 00:07:58,290
changes it a lot but what's really

00:07:56,550 --> 00:08:00,240
oftentimes from a date and day out

00:07:58,290 --> 00:08:01,620
perspective is you can sit down at a

00:08:00,240 --> 00:08:03,510
workstation in front of a robot that's

00:08:01,620 --> 00:08:05,160
misbehaving somehow and then launched a

00:08:03,510 --> 00:08:07,020
whole suite of debugging tools which

00:08:05,160 --> 00:08:09,270
will attach to the running computation

00:08:07,020 --> 00:08:11,910
graph and these processes may be running

00:08:09,270 --> 00:08:13,470
on many different computers and

00:08:11,910 --> 00:08:15,420
particularly when you sit up with your

00:08:13,470 --> 00:08:17,400
laptop or you sit at a workstation there

00:08:15,420 --> 00:08:19,500
a robot sell your then adding another

00:08:17,400 --> 00:08:21,810
machine to this computational graph and

00:08:19,500 --> 00:08:24,060
attaching visualizers data loggers or

00:08:21,810 --> 00:08:25,890
any other method of debugging tools that

00:08:24,060 --> 00:08:27,780
you might be interested in this is a

00:08:25,890 --> 00:08:30,950
type of thing that almost every ross

00:08:27,780 --> 00:08:33,510
developer does on a day-in day-out basis

00:08:30,950 --> 00:08:35,010
so there are many drivers for common

00:08:33,510 --> 00:08:37,440
hardware it's it's to the point now

00:08:35,010 --> 00:08:39,300
where if there's a commercially popular

00:08:37,440 --> 00:08:41,490
sensor odds are someone somewhere in the

00:08:39,300 --> 00:08:43,320
world has released a ross driver for it

00:08:41,490 --> 00:08:44,910
so all the depth cameras which have

00:08:43,320 --> 00:08:46,830
really produced a revolution in robotics

00:08:44,910 --> 00:08:48,480
the past few years all the common ones

00:08:46,830 --> 00:08:50,400
at least that I'm aware of has a Ross

00:08:48,480 --> 00:08:51,660
driver for them which means that when

00:08:50,400 --> 00:08:52,889
you write yourself where you're no

00:08:51,660 --> 00:08:55,259
longer targeting a specific

00:08:52,889 --> 00:08:58,019
camera instead you can receive just two

00:08:55,259 --> 00:09:00,209
we call Ross messages which are abstract

00:08:58,019 --> 00:09:02,040
structures which include just the points

00:09:00,209 --> 00:09:03,029
from the camera so you no longer have to

00:09:02,040 --> 00:09:04,889
worry about the particular

00:09:03,029 --> 00:09:06,299
initialization or shutdown features from

00:09:04,889 --> 00:09:08,399
the all the different def cameras that

00:09:06,299 --> 00:09:10,470
you can buy in the world the same thing

00:09:08,399 --> 00:09:12,629
goes for laser scanners there's many

00:09:10,470 --> 00:09:14,189
many different ones there's the big big

00:09:12,629 --> 00:09:16,049
ones that spin on top of autonomous cars

00:09:14,189 --> 00:09:18,089
there's much smaller ones intended for

00:09:16,049 --> 00:09:20,009
smaller warehousing or research robots

00:09:18,089 --> 00:09:22,529
all those things look the same to Ross

00:09:20,009 --> 00:09:24,089
now you can write abstracts high level

00:09:22,529 --> 00:09:26,910
logic code who's just receives these

00:09:24,089 --> 00:09:28,829
abstract messages and the same could go

00:09:26,910 --> 00:09:31,499
on for other classes of devices and

00:09:28,829 --> 00:09:34,019
hardware there are many tools available

00:09:31,499 --> 00:09:36,269
in Ross so the most popular one that we

00:09:34,019 --> 00:09:38,970
see people use is the Ross visualizer or

00:09:36,269 --> 00:09:40,859
our biz that includes a bunch of

00:09:38,970 --> 00:09:42,899
different components in it it's highly

00:09:40,859 --> 00:09:44,549
configurable and you can assemble all

00:09:42,899 --> 00:09:46,439
the different visualization widgets in

00:09:44,549 --> 00:09:48,899
panels and save those configurations so

00:09:46,439 --> 00:09:50,579
no matter what the robot platform is or

00:09:48,899 --> 00:09:52,350
the application you're working on you

00:09:50,579 --> 00:09:54,329
can generate a configuration of our

00:09:52,350 --> 00:09:56,879
vision and save it so you can speed up

00:09:54,329 --> 00:09:59,369
things in the future the most common and

00:09:56,879 --> 00:10:02,040
perhaps most useful mode people use this

00:09:59,369 --> 00:10:04,709
in is actually a sixty representation of

00:10:02,040 --> 00:10:06,360
any data source in the rail system you

00:10:04,709 --> 00:10:07,980
can then plot it and visualize it in

00:10:06,360 --> 00:10:10,769
zoom in and zoom out and rotate as you

00:10:07,980 --> 00:10:12,480
need a lot of robotics systems deal with

00:10:10,769 --> 00:10:14,309
spatial data whether you're looking for

00:10:12,480 --> 00:10:15,839
objects in the world and you're wanting

00:10:14,309 --> 00:10:18,059
to plug your their go bots hypotheses of

00:10:15,839 --> 00:10:20,040
where those objects are or making maps

00:10:18,059 --> 00:10:21,809
of the world or drawing path plans or

00:10:20,040 --> 00:10:23,759
watching robots as they drive around a

00:10:21,809 --> 00:10:25,619
lot of robotics software tends to be

00:10:23,759 --> 00:10:27,929
spatially oriented instead being able to

00:10:25,619 --> 00:10:29,040
debug this in a live view with

00:10:27,929 --> 00:10:33,689
everything represented in the same

00:10:29,040 --> 00:10:35,610
spatial tree is a very useful thing at

00:10:33,689 --> 00:10:37,589
the next level up on the stack we have

00:10:35,610 --> 00:10:39,269
capabilities and these are collections

00:10:37,589 --> 00:10:41,369
of Ross nodes that are tested and used

00:10:39,269 --> 00:10:43,230
together so there's lots of different

00:10:41,369 --> 00:10:46,439
ones ranging from motion planning for

00:10:43,230 --> 00:10:48,600
very complicated arms down to any number

00:10:46,439 --> 00:10:50,100
of other aerial applications but if this

00:10:48,600 --> 00:10:52,289
slide is just showing another one which

00:10:50,100 --> 00:10:54,359
is the 2d navigation so lots of

00:10:52,289 --> 00:10:56,129
environments such as this room it's

00:10:54,359 --> 00:10:57,660
relatively flat floor there might be a

00:10:56,129 --> 00:10:59,699
few little bumps on the floor but you

00:10:57,660 --> 00:11:01,019
can treat it as a 2d plane and so if we

00:10:59,699 --> 00:11:02,910
wanted to have a robot drive up this

00:11:01,019 --> 00:11:04,379
aisle between all the seats come up here

00:11:02,910 --> 00:11:06,329
and deliver an object then go back out

00:11:04,379 --> 00:11:06,810
and go out the door again you could use

00:11:06,329 --> 00:11:10,020
this

00:11:06,810 --> 00:11:11,550
2d navigation stack off the shelf if

00:11:10,020 --> 00:11:12,990
you're using it for a popular robot

00:11:11,550 --> 00:11:14,730
there's totally art a configuration that

00:11:12,990 --> 00:11:16,400
is reasonable for it if not you can

00:11:14,730 --> 00:11:18,750
configure it for your own robot platform

00:11:16,400 --> 00:11:20,490
so this was originally developed for the

00:11:18,750 --> 00:11:22,830
robot at the lower left on there called

00:11:20,490 --> 00:11:24,839
the pr2 which was by a Bay Area company

00:11:22,830 --> 00:11:28,170
called Willow Garage many of us have a

00:11:24,839 --> 00:11:30,089
history with it it was used for that but

00:11:28,170 --> 00:11:32,940
we were careful during the writing and

00:11:30,089 --> 00:11:35,730
designed to make it all Prem risible so

00:11:32,940 --> 00:11:37,410
that pier to robot was a very you know

00:11:35,730 --> 00:11:39,360
very exotic top of line four hundred

00:11:37,410 --> 00:11:41,970
thousand dollar resource platform it has

00:11:39,360 --> 00:11:43,110
sort of you know it spared no expense to

00:11:41,970 --> 00:11:45,210
to have everything you could possibly

00:11:43,110 --> 00:11:46,740
want so on every corner of that robot

00:11:45,210 --> 00:11:48,360
there's a wheel that you can steer

00:11:46,740 --> 00:11:50,820
independently and drive independently

00:11:48,360 --> 00:11:52,440
which means the robot can go sideways it

00:11:50,820 --> 00:11:54,000
can go forwards and backwards it can

00:11:52,440 --> 00:11:56,700
spin around in circles while doing any

00:11:54,000 --> 00:11:58,050
of those things that's great and you can

00:11:56,700 --> 00:11:59,160
configure the navigation the stack to

00:11:58,050 --> 00:12:00,960
deal with your what's like that but you

00:11:59,160 --> 00:12:03,000
can also configure it to a much lower

00:12:00,960 --> 00:12:05,790
cost robots that just have two wheels

00:12:03,000 --> 00:12:07,560
and can go essentially just spin in

00:12:05,790 --> 00:12:08,880
place or go forwards and backwards all

00:12:07,560 --> 00:12:11,300
that stuff can be configured you can

00:12:08,880 --> 00:12:15,420
even see some legged robots they're

00:12:11,300 --> 00:12:18,300
using various applications so how do we

00:12:15,420 --> 00:12:19,500
do this to make it more useful you can

00:12:18,300 --> 00:12:20,820
of course always build everything from

00:12:19,500 --> 00:12:23,100
source this is an open source project

00:12:20,820 --> 00:12:25,980
but I can take a long time because these

00:12:23,100 --> 00:12:27,600
are pretty big pieces of software so we

00:12:25,980 --> 00:12:29,160
run a pretty extensive build farm with a

00:12:27,600 --> 00:12:30,870
lot of automation behind it I know this

00:12:29,160 --> 00:12:32,810
is a familiar concept too many people in

00:12:30,870 --> 00:12:35,790
this room but this is a ton of work

00:12:32,810 --> 00:12:37,440
let's put it mildly but so we support

00:12:35,790 --> 00:12:39,270
three or else distributions at any given

00:12:37,440 --> 00:12:40,770
time and you can think of those like in

00:12:39,270 --> 00:12:42,630
a boon to distribution or a debian

00:12:40,770 --> 00:12:44,250
distribution it's a collection of

00:12:42,630 --> 00:12:47,070
packages that are versioned together and

00:12:44,250 --> 00:12:48,690
that we try to lock and prevent

00:12:47,070 --> 00:12:50,820
regressions from happening on pre

00:12:48,690 --> 00:12:52,680
releasing or sorry previously released

00:12:50,820 --> 00:12:53,910
distributions all we work on the next

00:12:52,680 --> 00:12:56,610
upcoming one which is where all the

00:12:53,910 --> 00:12:58,080
thrashing happens so people can target a

00:12:56,610 --> 00:13:00,420
particular else distribution for your

00:12:58,080 --> 00:13:02,490
application we release them on an annual

00:13:00,420 --> 00:13:03,750
basis and then we keep rolling it

00:13:02,490 --> 00:13:05,880
forward at the build form so that you

00:13:03,750 --> 00:13:07,680
can have binary of installs for we're

00:13:05,880 --> 00:13:11,279
currently building 48 binary targets

00:13:07,680 --> 00:13:14,670
that includes 32 and 64-bit x86 32 and

00:13:11,279 --> 00:13:16,500
64-bit ARM arm hf and a few others so

00:13:14,670 --> 00:13:17,970
when you multiply that together times

00:13:16,500 --> 00:13:20,100
all the ross packages that exist that's

00:13:17,970 --> 00:13:20,370
about 40,000 build jobs right now on the

00:13:20,100 --> 00:13:24,839
farm

00:13:20,370 --> 00:13:26,460
that we're turning over so one of the

00:13:24,839 --> 00:13:27,870
natural questions you ask is how big is

00:13:26,460 --> 00:13:29,670
this thing how many people are using it

00:13:27,870 --> 00:13:30,930
and you know ironically for an open

00:13:29,670 --> 00:13:32,520
source projects as I'm sure many

00:13:30,930 --> 00:13:34,440
understand here it's actually a hard

00:13:32,520 --> 00:13:36,540
question to answer because we licensed

00:13:34,440 --> 00:13:39,180
Ross permissibly it's a bsd or Apache

00:13:36,540 --> 00:13:40,410
License project and so no one has to get

00:13:39,180 --> 00:13:42,029
a permission or even tell us they're

00:13:40,410 --> 00:13:43,710
using it and oftentimes we only know

00:13:42,029 --> 00:13:44,970
about you spaces after a product has

00:13:43,710 --> 00:13:47,250
been released and they say oh by the way

00:13:44,970 --> 00:13:49,950
this is only girls so this is plotting

00:13:47,250 --> 00:13:52,140
six years worth of data on our best

00:13:49,950 --> 00:13:53,730
attempt to quantify the user community

00:13:52,140 --> 00:13:56,100
which is the attracting cookie from

00:13:53,730 --> 00:13:58,140
google on the wiki documentation now

00:13:56,100 --> 00:13:59,610
granted a lot of people don't use the

00:13:58,140 --> 00:14:01,620
tracking cookies they turn them off in

00:13:59,610 --> 00:14:04,200
their browser or other people use

00:14:01,620 --> 00:14:05,490
mirrors of our wiki for Geographic

00:14:04,200 --> 00:14:08,010
latency reasons in other parts of the

00:14:05,490 --> 00:14:10,970
world so this shows that we're about a

00:14:08,010 --> 00:14:13,710
hundred thousand unique users per month

00:14:10,970 --> 00:14:15,870
each user of the wiki tends to come

00:14:13,710 --> 00:14:17,940
about four or five times per month so

00:14:15,870 --> 00:14:20,190
it's about 400 or 500 thousand sessions

00:14:17,940 --> 00:14:22,980
per month that we see but I think this

00:14:20,190 --> 00:14:24,690
is safe to say it's a lower bound of the

00:14:22,980 --> 00:14:27,000
user community due to the mirroring and

00:14:24,690 --> 00:14:29,190
then people who don't do the tracking so

00:14:27,000 --> 00:14:30,480
that's the ballpark of a hundred

00:14:29,190 --> 00:14:31,770
thousand there's a two hundred thousand

00:14:30,480 --> 00:14:33,959
I don't know about what the multiple

00:14:31,770 --> 00:14:35,760
should be testament it but if we look at

00:14:33,959 --> 00:14:37,230
where everyone's coming from the u.s. is

00:14:35,760 --> 00:14:40,320
the top but again this is just of the

00:14:37,230 --> 00:14:41,730
u.s. wiki server but surprisingly see a

00:14:40,320 --> 00:14:43,350
lot of other countries very close behind

00:14:41,730 --> 00:14:45,060
it even if those countries have local

00:14:43,350 --> 00:14:47,010
mirrors of our wiki so there's a ton of

00:14:45,060 --> 00:14:49,260
people coming from China and Germany

00:14:47,010 --> 00:14:50,700
Japan and then it's also kind of fun so

00:14:49,260 --> 00:14:52,080
then divide that by population of the

00:14:50,700 --> 00:14:53,820
country and we see amazingly enough

00:14:52,080 --> 00:14:55,350
apparently point two percent of the

00:14:53,820 --> 00:14:57,959
population of singapore's or ross user

00:14:55,350 --> 00:15:00,920
which is amazing so other countries have

00:14:57,959 --> 00:15:03,779
very high high numbers as well though

00:15:00,920 --> 00:15:05,130
the code base size so the ross core

00:15:03,779 --> 00:15:08,100
that's like the message passing

00:15:05,130 --> 00:15:09,779
framework the serialization desolation

00:15:08,100 --> 00:15:11,640
some scheduling stuff the clients in

00:15:09,779 --> 00:15:13,560
various languages that's about a hundred

00:15:11,640 --> 00:15:15,240
thousand lines of code I know lines of

00:15:13,560 --> 00:15:16,620
code is a terrible metric of size but it

00:15:15,240 --> 00:15:19,110
is at least a metric that we can talk

00:15:16,620 --> 00:15:21,060
about but the desktop whole that's when

00:15:19,110 --> 00:15:23,610
we add in things like the visualizer the

00:15:21,060 --> 00:15:25,709
data recording playback that gets us up

00:15:23,610 --> 00:15:27,570
to about 400 thousand lines but then the

00:15:25,709 --> 00:15:29,880
much bigger community which is far more

00:15:27,570 --> 00:15:32,310
far more far larger than our just our

00:15:29,880 --> 00:15:33,510
little group of 18 to 20 people that's

00:15:32,310 --> 00:15:35,550
about four million lines of code right

00:15:33,510 --> 00:15:37,470
now in the universe that's publicly

00:15:35,550 --> 00:15:39,300
available and publicly released using

00:15:37,470 --> 00:15:40,800
our build automation tools so there's

00:15:39,300 --> 00:15:42,330
much much more code out there that

00:15:40,800 --> 00:15:43,590
people don't take the time to release or

00:15:42,330 --> 00:15:45,060
that's happening behind private

00:15:43,590 --> 00:15:46,710
firewalls so there's a lot of people

00:15:45,060 --> 00:15:49,020
doing a lot of stuff in robotics to from

00:15:46,710 --> 00:15:50,520
the fun time in the industry in fact all

00:15:49,020 --> 00:15:52,740
the commercial applications we're seeing

00:15:50,520 --> 00:15:54,810
now with Ross is very fun to see so this

00:15:52,740 --> 00:15:57,750
is everything ranging from drones for

00:15:54,810 --> 00:15:59,880
delivery or security purposes to hotel

00:15:57,750 --> 00:16:01,290
delivery robust by a company called

00:15:59,880 --> 00:16:03,420
savvy oak there's an inventory

00:16:01,290 --> 00:16:05,279
management robot they're called tally

00:16:03,420 --> 00:16:06,810
which will drive up and down the big box

00:16:05,279 --> 00:16:08,790
stores and make sure stuff is worth

00:16:06,810 --> 00:16:09,960
supposed to be and it's you know facing

00:16:08,790 --> 00:16:12,089
properly and all the things have to do

00:16:09,960 --> 00:16:13,800
to keep a big box store looking nice at

00:16:12,089 --> 00:16:15,529
least they can manage it and know where

00:16:13,800 --> 00:16:17,760
to send people to focus their efforts

00:16:15,529 --> 00:16:19,680
precision agriculture is a big thing

00:16:17,760 --> 00:16:21,029
nowadays as everyone becomes more and

00:16:19,680 --> 00:16:22,740
more interested in conserving water

00:16:21,029 --> 00:16:25,680
resources and minimizing fertilizer

00:16:22,740 --> 00:16:27,150
usage and other chemicals this is a big

00:16:25,680 --> 00:16:29,730
area that we're seeing several companies

00:16:27,150 --> 00:16:31,110
use raw space solutions for this as well

00:16:29,730 --> 00:16:33,540
as street mapping and in general

00:16:31,110 --> 00:16:35,880
autonomous driving research we see lots

00:16:33,540 --> 00:16:37,440
of companies using Ross maybe not put up

00:16:35,880 --> 00:16:38,910
some productions but at least in the R&D

00:16:37,440 --> 00:16:40,560
lab where it's much easier to tinker

00:16:38,910 --> 00:16:45,120
with things in these open raw systems

00:16:40,560 --> 00:16:46,470
and try things out so to illustrate a

00:16:45,120 --> 00:16:48,780
little bit more maybe I'll close here

00:16:46,470 --> 00:16:50,610
with the with the video called this

00:16:48,780 --> 00:16:53,160
eight years of Ross this is a

00:16:50,610 --> 00:16:54,839
periodically we have people submit their

00:16:53,160 --> 00:16:55,830
videos and when we get collage which is

00:16:54,839 --> 00:16:57,480
you know everyone loves to see their

00:16:55,830 --> 00:16:59,700
robot on YouTube of course or itself

00:16:57,480 --> 00:17:02,100
okay so if we could play the Ross eight

00:16:59,700 --> 00:17:03,870
years video now it's a bit overwhelming

00:17:02,100 --> 00:17:05,130
it's kind of shocked and all because we

00:17:03,870 --> 00:17:07,140
tried to include as many people as

00:17:05,130 --> 00:17:09,510
possible so there's actually four

00:17:07,140 --> 00:17:10,560
quadrants that will show here with every

00:17:09,510 --> 00:17:12,959
few seconds showing a new application

00:17:10,560 --> 00:17:15,839
this will be everything from industrial

00:17:12,959 --> 00:17:18,990
applications to research on various

00:17:15,839 --> 00:17:20,370
fields of domains government labs all

00:17:18,990 --> 00:17:22,230
sorts of stuff you can see this is all

00:17:20,370 --> 00:17:24,589
using a Ross based open source system

00:17:22,230 --> 00:17:24,589
beneath it

00:17:28,770 --> 00:17:32,850
there's a you know some things happening

00:17:31,410 --> 00:17:34,650
on the water there some things flying

00:17:32,850 --> 00:17:37,230
it'll be some even some stuff going on

00:17:34,650 --> 00:17:39,450
underwater you can see also lots of

00:17:37,230 --> 00:17:41,850
smart manufacturing sells industrial

00:17:39,450 --> 00:17:43,320
automation is a very hot topic nowadays

00:17:41,850 --> 00:17:44,900
because all these new sensors we have

00:17:43,320 --> 00:17:47,400
from the depth cameras other low-cost

00:17:44,900 --> 00:17:49,290
fantastic sensors you can combine those

00:17:47,400 --> 00:17:52,260
of these big open source packages which

00:17:49,290 --> 00:17:53,970
can do mapping and an object unification

00:17:52,260 --> 00:17:55,770
and localization to really make

00:17:53,970 --> 00:17:57,090
manufacturing much more flexible that's

00:17:55,770 --> 00:18:06,360
an exciting area we're seeing lots of

00:17:57,090 --> 00:18:08,160
people do great working so it's a bin

00:18:06,360 --> 00:18:10,350
picking application you can see there as

00:18:08,160 --> 00:18:11,880
well as all sorts of skid steer or it's

00:18:10,350 --> 00:18:13,950
fun also the robots come in so many

00:18:11,880 --> 00:18:15,660
shapes and sizes to see everything from

00:18:13,950 --> 00:18:21,630
these very small lightweight drones up

00:18:15,660 --> 00:18:23,640
to multiton alpha off-road vehicles okay

00:18:21,630 --> 00:18:26,100
well if we can skip back to the slides

00:18:23,640 --> 00:18:29,430
now this that full video is available

00:18:26,100 --> 00:18:31,500
online on on vimeo i believe so we're

00:18:29,430 --> 00:18:33,300
doing lots of work in various aspects

00:18:31,500 --> 00:18:35,070
I'll just briefly flip through one which

00:18:33,300 --> 00:18:36,600
is a security application or

00:18:35,070 --> 00:18:38,550
enhancements that were working on a

00:18:36,600 --> 00:18:40,790
cross as mentioned in the previous

00:18:38,550 --> 00:18:42,870
presentation security is a huge issue

00:18:40,790 --> 00:18:44,310
robot systems are no different from any

00:18:42,870 --> 00:18:46,200
other systems that you deploy so you

00:18:44,310 --> 00:18:48,450
need to worry about security and in fact

00:18:46,200 --> 00:18:50,400
your BOTS also bring many more issues to

00:18:48,450 --> 00:18:52,770
the front just like I LT but now you add

00:18:50,400 --> 00:18:55,770
actuation and all the things bad actors

00:18:52,770 --> 00:18:57,240
could do with that so this again I'll

00:18:55,770 --> 00:18:59,640
emphasize that the Ross community is

00:18:57,240 --> 00:19:00,930
much much larger than just our group but

00:18:59,640 --> 00:19:02,220
this is just a project that our group is

00:19:00,930 --> 00:19:03,570
working on I'm not trying to say this is

00:19:02,220 --> 00:19:05,160
representative of what everyone else is

00:19:03,570 --> 00:19:07,590
working on in the Ross community at home

00:19:05,160 --> 00:19:10,050
but we're also pushing forward more

00:19:07,590 --> 00:19:11,520
turtle bots we have the turtlebot there

00:19:10,050 --> 00:19:13,590
with the dragon board for Tennessee on

00:19:11,520 --> 00:19:15,780
it there'll be lots of announcements in

00:19:13,590 --> 00:19:17,280
two weeks at our annual Developers

00:19:15,780 --> 00:19:18,900
Conference of a next generation of

00:19:17,280 --> 00:19:20,490
turtlebot that we're looking forward to

00:19:18,900 --> 00:19:22,110
and I can assure you that arm single

00:19:20,490 --> 00:19:25,230
board computers will have a role on that

00:19:22,110 --> 00:19:27,870
as well so lots of people are using arm

00:19:25,230 --> 00:19:30,000
this is just a list of self-reported

00:19:27,870 --> 00:19:31,560
borns people have used with Ross and

00:19:30,000 --> 00:19:33,120
various capacities actually haven't even

00:19:31,560 --> 00:19:34,830
heard of some of these but this is what

00:19:33,120 --> 00:19:36,390
people put on the wiki page of saying

00:19:34,830 --> 00:19:38,370
that they're used we have again been

00:19:36,390 --> 00:19:40,140
using the dragon board for can see a lot

00:19:38,370 --> 00:19:42,280
at the open-source robotics foundation

00:19:40,140 --> 00:19:45,020
we really like that platform

00:19:42,280 --> 00:19:46,760
so if I talk about security just for a

00:19:45,020 --> 00:19:49,630
minute here over the years we have

00:19:46,760 --> 00:19:52,130
evolved a relatively homegrown

00:19:49,630 --> 00:19:53,960
communications setup for Ross so the

00:19:52,130 --> 00:19:56,030
dashed lines their show ephemeral

00:19:53,960 --> 00:19:58,490
xml-rpc connections between these Ross

00:19:56,030 --> 00:20:00,050
nodes and I think we call the raw score

00:19:58,490 --> 00:20:02,390
which is essentially a name service it's

00:20:00,050 --> 00:20:04,040
like a just tells the other nodes where

00:20:02,390 --> 00:20:05,390
to find each other on the network once

00:20:04,040 --> 00:20:06,800
they find out where they're located then

00:20:05,390 --> 00:20:08,990
they connect peer to peer and have a

00:20:06,800 --> 00:20:12,290
binary blasting you know just big heavy

00:20:08,990 --> 00:20:14,330
messages if they need you unfortunately

00:20:12,290 --> 00:20:15,260
with the presence of bad actors we don't

00:20:14,330 --> 00:20:16,850
want to just have that be all open

00:20:15,260 --> 00:20:18,890
anymore and so now we're starting to

00:20:16,850 --> 00:20:22,040
work on putting all that traffic using

00:20:18,890 --> 00:20:23,270
TLS tunnels so we can use encryption and

00:20:22,040 --> 00:20:25,550
authentication that you get for free

00:20:23,270 --> 00:20:26,870
with all the great work of openssl which

00:20:25,550 --> 00:20:28,250
I know many people here are also

00:20:26,870 --> 00:20:30,020
contributing to you and helping support

00:20:28,250 --> 00:20:32,810
that to all the computers in the arm

00:20:30,020 --> 00:20:34,790
universe as well so we're tunneling this

00:20:32,810 --> 00:20:36,440
traffic through to try to make it so at

00:20:34,790 --> 00:20:37,700
least it's harder you can't just come

00:20:36,440 --> 00:20:38,780
through the front door anymore you've

00:20:37,700 --> 00:20:41,090
got to go around to the side of the

00:20:38,780 --> 00:20:42,860
window or use some other exploit and for

00:20:41,090 --> 00:20:45,560
that since we know that nodes will get

00:20:42,860 --> 00:20:47,720
owned at some point in the classic girl

00:20:45,560 --> 00:20:49,370
system is totally open so its crew out

00:20:47,720 --> 00:20:51,290
of academic or a need where you want to

00:20:49,370 --> 00:20:53,480
have total access the system and be able

00:20:51,290 --> 00:20:56,360
to subscribe or publish any data through

00:20:53,480 --> 00:20:58,250
the graph the problem is now if we just

00:20:56,360 --> 00:21:00,470
start deploying in the wild and we allow

00:20:58,250 --> 00:21:01,880
you know just it'll happen right i mean

00:21:00,470 --> 00:21:03,380
the evildoers are going to find some way

00:21:01,880 --> 00:21:04,850
to get in one process we don't want them

00:21:03,380 --> 00:21:07,220
to be able to take over the entire robot

00:21:04,850 --> 00:21:08,630
through one process and so instead what

00:21:07,220 --> 00:21:10,520
we're starting to do now is to memorize

00:21:08,630 --> 00:21:12,410
the graphs which means the particular

00:21:10,520 --> 00:21:15,710
topology of which nodes are running on

00:21:12,410 --> 00:21:17,360
what computers who's connected to who if

00:21:15,710 --> 00:21:19,130
you can publish their subscriber if you

00:21:17,360 --> 00:21:20,330
can call a service or execute a service

00:21:19,130 --> 00:21:22,130
or which parameters you can read it

00:21:20,330 --> 00:21:23,840
right we can run the robot in what's

00:21:22,130 --> 00:21:25,790
called a training mode where you're

00:21:23,840 --> 00:21:27,740
recording what you expect to happen in a

00:21:25,790 --> 00:21:30,200
normal course of operation and then when

00:21:27,740 --> 00:21:32,000
you deploy the robot you enforce that to

00:21:30,200 --> 00:21:34,220
only be the possible outcomes so if an

00:21:32,000 --> 00:21:36,140
evildoer takes over a particular node of

00:21:34,220 --> 00:21:37,520
their graph you say that that people do

00:21:36,140 --> 00:21:38,990
are now is not able to then take over

00:21:37,520 --> 00:21:40,850
the entire system they can only do what

00:21:38,990 --> 00:21:44,090
they can reach from that single part in

00:21:40,850 --> 00:21:45,530
the golden graph then finally using all

00:21:44,090 --> 00:21:46,640
the process level security work that's

00:21:45,530 --> 00:21:49,220
been happening in the Linux community

00:21:46,640 --> 00:21:50,870
lately through the app armor interface

00:21:49,220 --> 00:21:53,240
to say which particular parts of the

00:21:50,870 --> 00:21:55,340
network or file system we want to allow

00:21:53,240 --> 00:21:56,870
Ross nodes to do so we're provide

00:21:55,340 --> 00:22:01,340
a set of a farmer profiles to try to

00:21:56,870 --> 00:22:02,990
make that easier to do so i think i'm

00:22:01,340 --> 00:22:04,340
just going to leave it at that we could

00:22:02,990 --> 00:22:06,080
go on and talk about our next generation

00:22:04,340 --> 00:22:07,700
networking stuff i'm happy to talk after

00:22:06,080 --> 00:22:09,650
but i don't want to run over time too

00:22:07,700 --> 00:22:11,150
much here so i appreciate the time and

00:22:09,650 --> 00:22:12,800
i'm happy to talk afterwards if anyone

00:22:11,150 --> 00:22:28,460
might have specific questions thank you

00:22:12,800 --> 00:22:30,290
very much okay alright so now we're

00:22:28,460 --> 00:22:31,400
going to take a group picture basically

00:22:30,290 --> 00:22:33,440
we're going to file out through here

00:22:31,400 --> 00:22:35,420
outside after the group picture they'll

00:22:33,440 --> 00:22:37,970
be the break will be out there as well

00:22:35,420 --> 00:22:39,710
and then after the break come back in

00:22:37,970 --> 00:22:45,470
and we'll start our day our sessions of

00:22:39,710 --> 00:22:48,220
the day thank you so much get those

00:22:45,470 --> 00:22:48,220

YouTube URL: https://www.youtube.com/watch?v=MCLFp55y0dc


