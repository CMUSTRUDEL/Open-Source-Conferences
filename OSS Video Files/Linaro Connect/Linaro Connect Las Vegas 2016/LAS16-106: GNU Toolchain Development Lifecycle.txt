Title: LAS16-106: GNU Toolchain Development Lifecycle
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-106: GNU Toolchain Development Lifecycle
Speakers: Ryan Arnold
Date: September 26, 2016

★ Session Description ★
This presentation will examine the lifecycle of toolchain development from inception of the micro-architecture, to development of the ISA, to delivery of OS enablement in FOSS projects, to adoption in Linux Distributions. It will examine the behaviors of successful silicon vendors as well as behaviors of vendors that struggle to get their platform fully enabled in the GNU/Linux OS.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-106
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-106/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:07,220 --> 00:00:11,849
alright welcome everyone my name is Ryan

00:00:09,960 --> 00:00:15,120
Arnold I'm the linaro toolchain working

00:00:11,849 --> 00:00:16,680
group engineering manager I haven't been

00:00:15,120 --> 00:00:19,199
in the engineering manager all my life

00:00:16,680 --> 00:00:22,680
that just the last few years before that

00:00:19,199 --> 00:00:25,320
I've been involved in Linux canoe Linux

00:00:22,680 --> 00:00:29,099
open source software enablement my whole

00:00:25,320 --> 00:00:31,619
career so I'm going to talk about the

00:00:29,099 --> 00:00:33,600
life cycle of the new tool chain so I

00:00:31,619 --> 00:00:36,270
want to start by casting you all in the

00:00:33,600 --> 00:00:37,590
role of the villain so let's say your

00:00:36,270 --> 00:00:39,329
company has enabled a new

00:00:37,590 --> 00:00:41,640
microarchitecture variant of the ARM

00:00:39,329 --> 00:00:42,780
architecture you want to get your cut

00:00:41,640 --> 00:00:45,629
your want your customers to be able to

00:00:42,780 --> 00:00:47,160
use this and use your hardware as soon

00:00:45,629 --> 00:00:49,620
as the software is available in the

00:00:47,160 --> 00:00:52,079
hardware hits the market so your team's

00:00:49,620 --> 00:00:53,910
been working on proprietary operating

00:00:52,079 --> 00:00:56,070
systems and compilers their whole career

00:00:53,910 --> 00:01:00,030
and now they want to work in the open

00:00:56,070 --> 00:01:01,670
source in the open source communities so

00:01:00,030 --> 00:01:04,140
they've worked very hard internally to

00:01:01,670 --> 00:01:06,450
enable the Linux kernel and the new tool

00:01:04,140 --> 00:01:08,280
chain for your hardware and now you

00:01:06,450 --> 00:01:11,030
finally have legal permission to give

00:01:08,280 --> 00:01:13,140
this code to the new linux OS projects

00:01:11,030 --> 00:01:14,610
so you're on a tight schedule and you

00:01:13,140 --> 00:01:17,070
need your code to go to the distro as

00:01:14,610 --> 00:01:18,720
soon as possible so that your software

00:01:17,070 --> 00:01:21,619
your the software makes it to market

00:01:18,720 --> 00:01:23,580
when your hardware makes it there so

00:01:21,619 --> 00:01:26,130
considering you want to get this code

00:01:23,580 --> 00:01:27,720
upstream you think maybe these projects

00:01:26,130 --> 00:01:29,159
should stall their plan code freeze and

00:01:27,720 --> 00:01:31,400
give us time to get this code upstream

00:01:29,159 --> 00:01:33,570
right I mean that seems reasonable and

00:01:31,400 --> 00:01:35,310
maybe they should maintain the

00:01:33,570 --> 00:01:36,750
architecture code after our engineers

00:01:35,310 --> 00:01:38,640
have moved on to the next project and

00:01:36,750 --> 00:01:40,610
the next micro a variant that seems

00:01:38,640 --> 00:01:43,710
reasonable right well unfortunately

00:01:40,610 --> 00:01:45,180
that's not right and this is the sort of

00:01:43,710 --> 00:01:47,490
attitude that a lot of companies take to

00:01:45,180 --> 00:01:49,229
our open source contribution so there's

00:01:47,490 --> 00:01:52,350
a big problem with this method and it's

00:01:49,229 --> 00:01:54,960
the form that the generosity takes did

00:01:52,350 --> 00:01:57,329
it switch it did ok so I've been

00:01:54,960 --> 00:01:58,860
involved in open-source enablement for

00:01:57,329 --> 00:02:00,719
the last 16 years I worked on 10

00:01:58,860 --> 00:02:02,460
microprocessor variants over that over

00:02:00,719 --> 00:02:05,070
that time is both a linux kernel hacker

00:02:02,460 --> 00:02:08,009
in the early part of my career and as a

00:02:05,070 --> 00:02:09,989
canoe toolchain engineer most recently

00:02:08,009 --> 00:02:11,200
so I was formerly the G Lucy PowerPC

00:02:09,989 --> 00:02:13,060
maintainer and

00:02:11,200 --> 00:02:15,220
is still a steward of the Gypsy

00:02:13,060 --> 00:02:17,379
community I was also the maintainer of a

00:02:15,220 --> 00:02:19,180
number of secondary torching packages

00:02:17,379 --> 00:02:21,700
and work closely with the Linux

00:02:19,180 --> 00:02:23,830
distribution vendors as business

00:02:21,700 --> 00:02:25,390
partners to get my company's code into

00:02:23,830 --> 00:02:29,050
distro products so that's a little bit

00:02:25,390 --> 00:02:31,239
of background about me which is informed

00:02:29,050 --> 00:02:32,769
this presentation so I just want to let

00:02:31,239 --> 00:02:37,260
you guys know I actually do have some

00:02:32,769 --> 00:02:40,180
qualifications so this isn't just

00:02:37,260 --> 00:02:41,890
spouting information at you so I've seen

00:02:40,180 --> 00:02:42,970
this gifting behavior in quite a few a

00:02:41,890 --> 00:02:44,500
quite a few times throughout my career

00:02:42,970 --> 00:02:46,810
and in fact I've even been guilty of

00:02:44,500 --> 00:02:48,910
some of it at times so I want to address

00:02:46,810 --> 00:02:51,579
this in the context of the toolchain

00:02:48,910 --> 00:02:53,319
lifecycle so I have a parable so one day

00:02:51,579 --> 00:02:57,489
I signed up for a raffle to win a huge

00:02:53,319 --> 00:02:59,709
dream house this one maybe it even has a

00:02:57,489 --> 00:03:03,160
nice red bike shed you see the bike shed

00:02:59,709 --> 00:03:04,900
in the back so the Builder wants to use

00:03:03,160 --> 00:03:07,060
the winner in an upcoming promotional

00:03:04,900 --> 00:03:09,579
event so the winner would be required to

00:03:07,060 --> 00:03:11,530
take possession immediately but if I won

00:03:09,579 --> 00:03:13,269
the house I get a sour surprise when I

00:03:11,530 --> 00:03:15,609
received the property tax bill later

00:03:13,269 --> 00:03:17,859
that year can I even pay the property

00:03:15,609 --> 00:03:20,410
taxes without taking out on an extra job

00:03:17,859 --> 00:03:21,639
or shifting my financial priorities what

00:03:20,410 --> 00:03:23,889
if things start to go wrong with the

00:03:21,639 --> 00:03:25,870
house if this gift house has major

00:03:23,889 --> 00:03:27,579
structural flaws it could take a massive

00:03:25,870 --> 00:03:29,709
amount of time and money to fix and the

00:03:27,579 --> 00:03:31,150
burden would be on me so this gift house

00:03:29,709 --> 00:03:35,290
could be a huge liability that could

00:03:31,150 --> 00:03:36,760
jeopardize my future plans so this is a

00:03:35,290 --> 00:03:38,410
favorite quote of mine I am a

00:03:36,760 --> 00:03:42,280
home-improvement guy I've restored

00:03:38,410 --> 00:03:44,829
houses before and this really kind of

00:03:42,280 --> 00:03:47,410
demonstrates how you you were burdened

00:03:44,829 --> 00:03:49,359
by health if a man builds a fine house

00:03:47,410 --> 00:03:51,400
and now he has a master and a task for

00:03:49,359 --> 00:03:52,799
life he is to furnish watch show it and

00:03:51,400 --> 00:03:55,930
keep it in a repair the rest of his days

00:03:52,799 --> 00:03:57,489
so this is an Amberson quote so notice

00:03:55,930 --> 00:03:58,900
how this quote doesn't mention getting

00:03:57,489 --> 00:04:02,889
someone else to keep the house in good

00:03:58,900 --> 00:04:04,060
repair so software bit raw it's just

00:04:02,889 --> 00:04:08,500
like a real house it has maintenance

00:04:04,060 --> 00:04:09,880
costs oops sorry the more the more

00:04:08,500 --> 00:04:12,099
dependencies that software has the

00:04:09,880 --> 00:04:14,769
faster it bit rods and tool chains have

00:04:12,099 --> 00:04:17,079
a lot of dependencies a tool chain for

00:04:14,769 --> 00:04:19,810
instance the new tool chain is i believe

00:04:17,079 --> 00:04:23,260
around five or six core projects I'll

00:04:19,810 --> 00:04:25,330
tied together all intimately intimate

00:04:23,260 --> 00:04:27,040
tied together so an open source

00:04:25,330 --> 00:04:28,630
community is reluctant to accept gifts

00:04:27,040 --> 00:04:30,370
that are prone to bit rot and many

00:04:28,630 --> 00:04:31,870
companies have tried to get open source

00:04:30,370 --> 00:04:34,510
communities to maintain their software

00:04:31,870 --> 00:04:36,520
we call this abandoned where some people

00:04:34,510 --> 00:04:38,740
have even demanded fixes from open

00:04:36,520 --> 00:04:42,430
source communities after the fact such

00:04:38,740 --> 00:04:45,850
as stop your code freeze fix my bug so

00:04:42,430 --> 00:04:47,320
back to you being the villain so what

00:04:45,850 --> 00:04:49,030
you're trying to give these communities

00:04:47,320 --> 00:04:50,680
is likely at odds with their day job and

00:04:49,030 --> 00:04:52,990
in fact maybe in direct competition to

00:04:50,680 --> 00:04:56,140
it so despite this the maintainer zhun

00:04:52,990 --> 00:04:57,610
derstand that as many we are strong so

00:04:56,140 --> 00:04:59,110
they're willing and ready to work with

00:04:57,610 --> 00:05:02,140
you to build a house that they can

00:04:59,110 --> 00:05:03,490
afford to maintain so source code gifts

00:05:02,140 --> 00:05:05,590
are often a large burden on the

00:05:03,490 --> 00:05:08,440
communities before they become a benefit

00:05:05,590 --> 00:05:10,060
and as participants in benefactors we

00:05:08,440 --> 00:05:11,680
have to be sensitive to the customs and

00:05:10,060 --> 00:05:14,170
schedules of each of these components of

00:05:11,680 --> 00:05:15,940
the software stack so I wanted to start

00:05:14,170 --> 00:05:17,860
with this because you need to understand

00:05:15,940 --> 00:05:19,390
why open-source engineers push back when

00:05:17,860 --> 00:05:23,230
someone tries to give them a gift house

00:05:19,390 --> 00:05:25,060
because it becomes it's a loaded it's a

00:05:23,230 --> 00:05:28,030
loaded gun there's more to it than just

00:05:25,060 --> 00:05:31,060
a gift so before we look at the schedule

00:05:28,030 --> 00:05:33,820
that I talked about I want to address

00:05:31,060 --> 00:05:36,700
one more major concern so your goal is

00:05:33,820 --> 00:05:39,520
to get this enabled OS code in the hands

00:05:36,700 --> 00:05:41,290
of your customers because you want to

00:05:39,520 --> 00:05:42,850
get it on your hardware and once it's

00:05:41,290 --> 00:05:44,260
gifted in the upstream it can be

00:05:42,850 --> 00:05:48,730
deployed in the customers hands right

00:05:44,260 --> 00:05:51,160
like right into the data center no you

00:05:48,730 --> 00:05:52,930
actually need to get that code in a

00:05:51,160 --> 00:05:54,700
linux distribution so your customers

00:05:52,930 --> 00:05:55,780
don't have the skills that a desire to

00:05:54,700 --> 00:05:58,120
build their own tool chains or

00:05:55,780 --> 00:06:00,370
distributions so an SOC vendor debuting

00:05:58,120 --> 00:06:04,360
a processor with no linux support would

00:06:00,370 --> 00:06:07,900
have very limited industry adoption so

00:06:04,360 --> 00:06:09,520
what do I mean by distro but distro is a

00:06:07,900 --> 00:06:11,830
formally supported collection of

00:06:09,520 --> 00:06:13,570
interoperable programs these programs

00:06:11,830 --> 00:06:15,070
have been quality and integration tested

00:06:13,570 --> 00:06:17,230
in order to guarantee they're compatible

00:06:15,070 --> 00:06:18,790
so your code needs to be accepted into a

00:06:17,230 --> 00:06:21,910
linux distro to get into your customers

00:06:18,790 --> 00:06:23,650
hands this ship represents a linux

00:06:21,910 --> 00:06:25,330
distro i use the ship as a

00:06:23,650 --> 00:06:27,580
representation because it took a long

00:06:25,330 --> 00:06:29,560
time to build a long time to load once

00:06:27,580 --> 00:06:31,570
it leaves port it'll be at sea a long

00:06:29,560 --> 00:06:34,360
time with no way to change its manifest

00:06:31,570 --> 00:06:35,940
a distro company makes a commitment to

00:06:34,360 --> 00:06:39,350
support an OS release for

00:06:35,940 --> 00:06:42,360
so this ship is at sea for years

00:06:39,350 --> 00:06:44,580
maintaining a support a distro and

00:06:42,360 --> 00:06:46,140
supporting it as expensive so the longer

00:06:44,580 --> 00:06:48,120
support is required the more expensive

00:06:46,140 --> 00:06:49,950
it becomes and because you have to

00:06:48,120 --> 00:06:52,620
maintain currency of knowledge and old

00:06:49,950 --> 00:06:55,560
and older infrastructure the longer you

00:06:52,620 --> 00:06:58,620
supported like I said the more expensive

00:06:55,560 --> 00:07:00,120
it is so back to the ship analogy ask

00:06:58,620 --> 00:07:02,120
the harbor master when the next ship

00:07:00,120 --> 00:07:04,290
will sail and the answer might be yours

00:07:02,120 --> 00:07:06,150
so your code needs be on that ship

00:07:04,290 --> 00:07:08,040
before it sails and by that I mean your

00:07:06,150 --> 00:07:13,020
code needs to go upstream well before

00:07:08,040 --> 00:07:15,600
the linux distro ships so to add further

00:07:13,020 --> 00:07:18,180
complication each distro has a different

00:07:15,600 --> 00:07:19,770
type of release so i was the district

00:07:18,180 --> 00:07:22,140
going to take architecture enablement

00:07:19,770 --> 00:07:25,500
with every release no they're not so

00:07:22,140 --> 00:07:27,360
here's an example of of canonical

00:07:25,500 --> 00:07:30,530
xubuntu release schedule and these are

00:07:27,360 --> 00:07:35,840
the LTS releases and these are their

00:07:30,530 --> 00:07:41,160
standard releases so it's expressly

00:07:35,840 --> 00:07:43,380
written in in canonical's description of

00:07:41,160 --> 00:07:45,480
LTS that this is not a feature-based

00:07:43,380 --> 00:07:46,740
release it only hardens existing

00:07:45,480 --> 00:07:49,500
functionality it doesn't add

00:07:46,740 --> 00:07:53,460
functionality so the orange bar is the

00:07:49,500 --> 00:07:54,720
next LTS release which is an act of

00:07:53,460 --> 00:07:56,730
maintenance and that's every two years

00:07:54,720 --> 00:08:00,960
so you need to get your fixes into these

00:07:56,730 --> 00:08:02,550
guys here these gray releases so this

00:08:00,960 --> 00:08:04,770
further Titans are up screaming schedule

00:08:02,550 --> 00:08:08,480
so I would roughly estimate your code

00:08:04,770 --> 00:08:08,480
needs to be upstream right about here

00:08:08,600 --> 00:08:14,130
but don't don't quote me on that I mean

00:08:11,580 --> 00:08:17,910
this is this is probably actually even

00:08:14,130 --> 00:08:19,020
too late in some instances I would like

00:08:17,910 --> 00:08:21,390
to point out that the district does

00:08:19,020 --> 00:08:23,160
retain the right to prioritize their

00:08:21,390 --> 00:08:25,830
projects in which case they might add

00:08:23,160 --> 00:08:28,980
your feature later in an LTS release but

00:08:25,830 --> 00:08:30,600
I wouldn't count on so here's similar

00:08:28,980 --> 00:08:32,780
information for rel I did they didn't

00:08:30,600 --> 00:08:35,039
have a nice graph on their webpage

00:08:32,780 --> 00:08:37,430
notice there's no rel eight on there

00:08:35,039 --> 00:08:40,080
they don't publish their projections for

00:08:37,430 --> 00:08:43,650
the rel eight schedule at this point as

00:08:40,080 --> 00:08:46,380
far as i know but last i knew they

00:08:43,650 --> 00:08:47,940
likewise encourage you feature adoption

00:08:46,380 --> 00:08:52,040
into their Fedora releases

00:08:47,940 --> 00:08:58,500
for adoption in their Enterprise release

00:08:52,040 --> 00:09:00,660
all right so excuse me roughly every

00:08:58,500 --> 00:09:01,920
three years okay so I led with the gift

00:09:00,660 --> 00:09:03,900
house in the ship because the major

00:09:01,920 --> 00:09:06,620
issue is how do you get the ship with a

00:09:03,900 --> 00:09:09,090
gift house on the ship before it sails

00:09:06,620 --> 00:09:10,560
so you might ask can't the distro just

00:09:09,090 --> 00:09:14,040
take my code without up streaming at

00:09:10,560 --> 00:09:17,900
first if you look back in lk ml far

00:09:14,040 --> 00:09:21,360
enough probably around some around 2004

00:09:17,900 --> 00:09:23,960
you'll see me being flamed by Greg KH or

00:09:21,360 --> 00:09:27,870
asking or attempting to do exactly that

00:09:23,960 --> 00:09:30,210
it wasn't pretty and it was kind of

00:09:27,870 --> 00:09:32,760
embarrassing but I thought I'd point it

00:09:30,210 --> 00:09:34,440
out because it's happened to me so for

00:09:32,760 --> 00:09:38,580
the linux OS distribution company the

00:09:34,440 --> 00:09:40,440
risk of taking on vetted code that is an

00:09:38,580 --> 00:09:43,440
vetti code is that a related bug will

00:09:40,440 --> 00:09:46,230
incur significant cost later so code

00:09:43,440 --> 00:09:48,270
taken in the distro but not upstream is

00:09:46,230 --> 00:09:51,390
the responsibility of the Linux distro

00:09:48,270 --> 00:09:54,600
to support so point being if you

00:09:51,390 --> 00:09:57,210
convince Red Hat to take a patch that's

00:09:54,600 --> 00:09:59,700
not upstream and the customers go to the

00:09:57,210 --> 00:10:01,140
Linux community the Linux community is

00:09:59,700 --> 00:10:09,750
going to kick it right back at Red Hat

00:10:01,140 --> 00:10:11,190
say your choice your problem so unready

00:10:09,750 --> 00:10:12,750
code is more likely to break in

00:10:11,190 --> 00:10:15,180
production and this can have really

00:10:12,750 --> 00:10:16,950
expensive repercussions in these LTS

00:10:15,180 --> 00:10:18,780
releases and the distros have been

00:10:16,950 --> 00:10:20,790
burned many times and they're now quite

00:10:18,780 --> 00:10:23,220
strict about making an upstream first

00:10:20,790 --> 00:10:24,780
the code before they'll accept it so

00:10:23,220 --> 00:10:26,160
sometimes they'll make an exception

00:10:24,780 --> 00:10:28,080
that's in their own business interests

00:10:26,160 --> 00:10:29,550
but it'll be hard to convince them that

00:10:28,080 --> 00:10:31,950
you're microarchitecture is one of those

00:10:29,550 --> 00:10:34,920
one exception that you'll you guys will

00:10:31,950 --> 00:10:41,370
be aware of is rel 7.2 did in fact ship

00:10:34,920 --> 00:10:44,790
arm v8a or 64 support whereas rel 7

00:10:41,370 --> 00:10:45,960
originally did not have support so

00:10:44,790 --> 00:10:49,260
believe adopt and embrace the

00:10:45,960 --> 00:10:51,570
open-source mantra roughly submit early

00:10:49,260 --> 00:10:53,780
submit often get your code upstream

00:10:51,570 --> 00:10:56,190
iterate on pat review and resubmit often

00:10:53,780 --> 00:10:58,620
so now I want to move on to where we

00:10:56,190 --> 00:11:00,250
discuss tool chain up streaming and I'm

00:10:58,620 --> 00:11:02,050
going to focus on ARM architecture

00:11:00,250 --> 00:11:05,560
licensee's because the challenges are a

00:11:02,050 --> 00:11:07,540
subset of full architecture up streaming

00:11:05,560 --> 00:11:10,810
but probably most relevant to most of

00:11:07,540 --> 00:11:12,490
you here Matt and all you guys at armor

00:11:10,810 --> 00:11:14,770
very familiar with the larger challenges

00:11:12,490 --> 00:11:16,690
but like I said I want to focus on the

00:11:14,770 --> 00:11:20,980
subset that's relevant to to our

00:11:16,690 --> 00:11:23,140
licensees are two arms licensees so the

00:11:20,980 --> 00:11:24,730
order of up streaming is different for a

00:11:23,140 --> 00:11:27,820
microarchitecture variant that for the

00:11:24,730 --> 00:11:29,890
new is a they can have upstream code

00:11:27,820 --> 00:11:32,890
upstream in stages whereas for a new is

00:11:29,890 --> 00:11:35,440
a enablement often has to go in large

00:11:32,890 --> 00:11:39,220
chunks but I mean I'm getting myself a

00:11:35,440 --> 00:11:40,540
bit a new processor is a useless piece

00:11:39,220 --> 00:11:42,310
of silicon until the Linux kernel

00:11:40,540 --> 00:11:45,550
hackers and the toolchain engineers

00:11:42,310 --> 00:11:48,940
create a software port of the base OS to

00:11:45,550 --> 00:11:50,590
run on the hardware and enablement of

00:11:48,940 --> 00:11:52,390
that process or follows a life cycle

00:11:50,590 --> 00:11:55,030
from the conception of the idea through

00:11:52,390 --> 00:11:57,820
the availability in the distro so what

00:11:55,030 --> 00:12:00,130
is that life cycle well it's all the

00:11:57,820 --> 00:12:03,340
steps of that process so we're I

00:12:00,130 --> 00:12:05,500
literally mean from conception to the

00:12:03,340 --> 00:12:08,220
creation of the ISA all the way through

00:12:05,500 --> 00:12:10,960
adoption and full linux distribution

00:12:08,220 --> 00:12:13,839
adoption means including all the

00:12:10,960 --> 00:12:16,660
features of your hardware where the

00:12:13,839 --> 00:12:20,740
software can realize all the performance

00:12:16,660 --> 00:12:24,040
benefits of your hardware as licensees

00:12:20,740 --> 00:12:26,380
you are you are fortunate that should

00:12:24,040 --> 00:12:29,020
you just ship a product which conforms

00:12:26,380 --> 00:12:31,540
to the ISA the reference platform will

00:12:29,020 --> 00:12:34,890
in fact work on your hardware it will

00:12:31,540 --> 00:12:37,780
not be optimized so it won't be running

00:12:34,890 --> 00:12:39,100
you want full supports that you won't be

00:12:37,780 --> 00:12:42,790
running bare bones reference platform

00:12:39,100 --> 00:12:44,440
software so you have to have a tool

00:12:42,790 --> 00:12:45,670
chain to build the software that runs on

00:12:44,440 --> 00:12:48,700
the system and the tool chain is the

00:12:45,670 --> 00:12:50,170
first corner piece of a puzzle so from

00:12:48,700 --> 00:12:52,900
the position of the software maintained

00:12:50,170 --> 00:12:54,990
errs the up streaming process should

00:12:52,900 --> 00:12:57,370
start as soon as conceivably possible

00:12:54,990 --> 00:12:59,620
armed licensees are fortunate in that

00:12:57,370 --> 00:13:01,180
arm Antolin ro engineers have done

00:12:59,620 --> 00:13:02,800
substantial work to make sure that the

00:13:01,180 --> 00:13:06,010
arm reference platform is available in

00:13:02,800 --> 00:13:07,990
the upstream packages so here's a linear

00:13:06,010 --> 00:13:10,120
arc of the toolchain life cycle it

00:13:07,990 --> 00:13:11,529
occludes more more than the tool chain

00:13:10,120 --> 00:13:13,029
because the tool chain has a run on hard

00:13:11,529 --> 00:13:15,310
and has to communicate with the colonel

00:13:13,029 --> 00:13:18,310
I'm not going to go through these right

00:13:15,310 --> 00:13:20,620
now we'll hit these later but right

00:13:18,310 --> 00:13:24,220
around here you'll see canoe total train

00:13:20,620 --> 00:13:26,079
implementation the canoe the whole new

00:13:24,220 --> 00:13:28,029
linux operating system is a collection

00:13:26,079 --> 00:13:29,649
of projects that are loosely committed

00:13:28,029 --> 00:13:32,939
to enter working together if configured

00:13:29,649 --> 00:13:34,720
correctly so you might think that

00:13:32,939 --> 00:13:37,649
project maintain errs would work closely

00:13:34,720 --> 00:13:39,899
together to sink their schedules right

00:13:37,649 --> 00:13:42,459
unfortunately that's wrong in fact

00:13:39,899 --> 00:13:44,110
companies like arm linaro and red hat

00:13:42,459 --> 00:13:46,509
and others have engineering teams that

00:13:44,110 --> 00:13:50,829
try to coordinate the the package

00:13:46,509 --> 00:13:54,220
interoperability so a an arm Colonel

00:13:50,829 --> 00:13:56,559
engineer might talk to a linaro compiler

00:13:54,220 --> 00:13:58,300
engineer and the Nara Pilar engineer

00:13:56,559 --> 00:14:00,490
talks to the G lipsy maintainer in

00:13:58,300 --> 00:14:01,959
linaro to make sure that a certain

00:14:00,490 --> 00:14:04,509
feature hits upstream as soon as

00:14:01,959 --> 00:14:06,699
possible but by design each of these

00:14:04,509 --> 00:14:09,309
projects as scheduled independent and in

00:14:06,699 --> 00:14:11,620
fact each project engineers are easily

00:14:09,309 --> 00:14:13,269
annoyed if they feel that anyone else is

00:14:11,620 --> 00:14:15,629
trying to exert schedule pressure on

00:14:13,269 --> 00:14:18,279
them on behalf of some other interests

00:14:15,629 --> 00:14:19,689
because often this will undermine every

00:14:18,279 --> 00:14:22,089
other participants own business

00:14:19,689 --> 00:14:23,709
objectives so if you try to delay a

00:14:22,089 --> 00:14:26,079
release freeze for your own business

00:14:23,709 --> 00:14:28,059
interests you're in fact possibly

00:14:26,079 --> 00:14:31,629
jeopardize jeopardizing another company

00:14:28,059 --> 00:14:33,339
schedule so if you don't respect your

00:14:31,629 --> 00:14:35,800
competitors schedules in this regard

00:14:33,339 --> 00:14:38,259
they're not going to respect yours so

00:14:35,800 --> 00:14:40,180
every community is a opportunity to bike

00:14:38,259 --> 00:14:42,639
shed hence the red bike shed on the

00:14:40,180 --> 00:14:44,410
house so except this will happen and be

00:14:42,639 --> 00:14:47,350
on the ground early not that it doesn't

00:14:44,410 --> 00:14:49,750
cause catastrophic delay so I keep

00:14:47,350 --> 00:14:51,519
saying early early early and what you

00:14:49,750 --> 00:14:54,850
need to keep thinking is earlier earlier

00:14:51,519 --> 00:14:57,040
earlier so up streaming might be delayed

00:14:54,850 --> 00:14:59,110
with over what you've perceived to be

00:14:57,040 --> 00:15:01,899
trivialities so maybe the reality is

00:14:59,110 --> 00:15:03,910
more like this you know this big nasty

00:15:01,899 --> 00:15:05,319
cloud of stuff that happens and if

00:15:03,910 --> 00:15:07,000
you're lucky something comes out of it

00:15:05,319 --> 00:15:08,259
but this isn't quite true there's

00:15:07,000 --> 00:15:10,600
actually some order to the chaos and

00:15:08,259 --> 00:15:12,220
that's what we're going to cover but I

00:15:10,600 --> 00:15:14,379
want to start with another parable so I

00:15:12,220 --> 00:15:17,470
had this dog this isn't him but i like i

00:15:14,379 --> 00:15:18,819
like bulldogs because i was taking a

00:15:17,470 --> 00:15:21,819
walk and saw a lady trying to drag a

00:15:18,819 --> 00:15:23,440
bulldog along the sidewalk but likewise

00:15:21,819 --> 00:15:25,480
my dog

00:15:23,440 --> 00:15:26,620
I have a dog and since I work at home he

00:15:25,480 --> 00:15:28,210
doesn't get a lot of exercise and

00:15:26,620 --> 00:15:30,820
sometimes if I take him on a walk or a

00:15:28,210 --> 00:15:32,500
run when he's done running he sits down

00:15:30,820 --> 00:15:34,360
and he won't move and open source

00:15:32,500 --> 00:15:36,670
communities are like my dog you're not

00:15:34,360 --> 00:15:40,950
going to get them to move some people

00:15:36,670 --> 00:15:44,010
will use their reputation and use their

00:15:40,950 --> 00:15:46,180
use their personal connections to try to

00:15:44,010 --> 00:15:48,820
pressure the community into doing what

00:15:46,180 --> 00:15:51,010
they want but like my dog he'll go home

00:15:48,820 --> 00:15:53,230
and he'll tear that the stuffing out of

00:15:51,010 --> 00:15:54,520
the chair cushions and retaliation you

00:15:53,230 --> 00:15:56,710
might find that once you've exhausted

00:15:54,520 --> 00:15:58,000
your company's goodwill your mat with a

00:15:56,710 --> 00:15:59,530
hostile reaction and open source

00:15:58,000 --> 00:16:03,310
communities have you ever seen an email

00:15:59,530 --> 00:16:08,470
saying go away I mean that's exactly

00:16:03,310 --> 00:16:10,120
that's the dog sitting down so it takes

00:16:08,470 --> 00:16:12,760
appropriate timing knowing the schedule

00:16:10,120 --> 00:16:14,770
and dependencies which will go over and

00:16:12,760 --> 00:16:17,290
a correct social approach to get things

00:16:14,770 --> 00:16:19,150
done so from your perspective sufficient

00:16:17,290 --> 00:16:21,550
lead time is the most important factor

00:16:19,150 --> 00:16:24,430
from the maintainer sper spective early

00:16:21,550 --> 00:16:27,490
access to information and responsive

00:16:24,430 --> 00:16:31,030
refactoring to the patches is the most

00:16:27,490 --> 00:16:34,000
important factor so why do maintain errs

00:16:31,030 --> 00:16:36,430
need early access to information so

00:16:34,000 --> 00:16:40,240
another parable where I live I'm

00:16:36,430 --> 00:16:41,860
required to have a building permit for

00:16:40,240 --> 00:16:44,080
any modifications to a physical

00:16:41,860 --> 00:16:45,670
structure my city requires a description

00:16:44,080 --> 00:16:47,320
of the work to be done before they'll

00:16:45,670 --> 00:16:48,880
grant the building permit and is to

00:16:47,320 --> 00:16:52,600
ensure the building is safe for future

00:16:48,880 --> 00:16:53,920
occupants hence the rotting house so I'm

00:16:52,600 --> 00:16:55,450
pretty skilled with a pair of linesman's

00:16:53,920 --> 00:16:56,770
players and wire strippers I've added

00:16:55,450 --> 00:16:58,600
circus to my breaker panel without

00:16:56,770 --> 00:17:01,600
electrocuting myself or burning my house

00:16:58,600 --> 00:17:03,730
down despite this the city electrical

00:17:01,600 --> 00:17:05,890
inspector might take issue with what I

00:17:03,730 --> 00:17:07,750
intend to do and he actually often

00:17:05,890 --> 00:17:10,720
enforces his own personal preferences

00:17:07,750 --> 00:17:12,640
that are not in the building code they

00:17:10,720 --> 00:17:13,569
will require that the wiring that

00:17:12,640 --> 00:17:15,760
doesn't meet building code requirements

00:17:13,569 --> 00:17:17,579
be stripped out this is directly

00:17:15,760 --> 00:17:19,630
applicable to open source software

00:17:17,579 --> 00:17:21,339
maintained errs have preferences

00:17:19,630 --> 00:17:22,930
maintained errs will require you tear

00:17:21,339 --> 00:17:25,089
out code that they don't like and you

00:17:22,930 --> 00:17:26,560
can't do anything about it I cannot get

00:17:25,089 --> 00:17:30,160
the building permit or the building

00:17:26,560 --> 00:17:31,630
inspector to do what I want all right so

00:17:30,160 --> 00:17:33,670
it's a very common practice for

00:17:31,630 --> 00:17:34,990
engineering teams to attempt attempt to

00:17:33,670 --> 00:17:36,880
dump what they consider to be

00:17:34,990 --> 00:17:38,559
completed feature on to an open source

00:17:36,880 --> 00:17:40,300
community without regard or

00:17:38,559 --> 00:17:43,510
consideration for who is the maintain

00:17:40,300 --> 00:17:45,700
this code in the future and in this in

00:17:43,510 --> 00:17:47,080
this capacity an open-source maintainer

00:17:45,700 --> 00:17:50,110
will act like the building code

00:17:47,080 --> 00:17:52,090
inspector so building house is not a

00:17:50,110 --> 00:17:54,100
process where you simply show up on site

00:17:52,090 --> 00:17:55,390
put up some walls on the bare dirt it

00:17:54,100 --> 00:17:59,110
starts with talking to the necessary

00:17:55,390 --> 00:18:01,630
officials to get the legal legal

00:17:59,110 --> 00:18:03,070
approval to build a valid structure so

00:18:01,630 --> 00:18:04,540
similarly the life cycle of good new

00:18:03,070 --> 00:18:06,010
tool chain is not a single moment in

00:18:04,540 --> 00:18:08,620
history where all the codes just dropped

00:18:06,010 --> 00:18:10,210
at once it starts with talking to the

00:18:08,620 --> 00:18:11,559
necessary and correct people so up

00:18:10,210 --> 00:18:13,420
streaming is not a moment in time but

00:18:11,559 --> 00:18:16,420
rather collection of moments that should

00:18:13,420 --> 00:18:17,740
start as early as possible when we think

00:18:16,420 --> 00:18:19,090
about the life cycle of the new tool

00:18:17,740 --> 00:18:20,559
chain we need to consider all the

00:18:19,090 --> 00:18:22,600
moments where the rain can get in and

00:18:20,559 --> 00:18:25,540
rot the house so these are the points or

00:18:22,600 --> 00:18:28,270
the toolchain community should be

00:18:25,540 --> 00:18:30,640
involved early the following phases

00:18:28,270 --> 00:18:32,650
roughly represent the major moments in

00:18:30,640 --> 00:18:35,350
the life cycle group by similarity

00:18:32,650 --> 00:18:37,000
purpose so we have legal branding

00:18:35,350 --> 00:18:40,059
platform enablement ABI enablement

00:18:37,000 --> 00:18:41,260
optimization and destroyed option you

00:18:40,059 --> 00:18:43,450
could argue with me that there are many

00:18:41,260 --> 00:18:44,890
steps in between and around and using vb

00:18:43,450 --> 00:18:48,130
you probably be right but I wanted to

00:18:44,890 --> 00:18:50,260
keep it brief so we'll start with legal

00:18:48,130 --> 00:18:51,880
and branding most companies have a new

00:18:50,260 --> 00:18:53,770
element that have new intellectual

00:18:51,880 --> 00:18:56,260
property required legal approval before

00:18:53,770 --> 00:18:58,780
engineers can start open sourcing but

00:18:56,260 --> 00:19:00,970
like I said open sourcing is not a

00:18:58,780 --> 00:19:03,040
single moment it's a process of feedback

00:19:00,970 --> 00:19:05,020
and resubmission which will finally

00:19:03,040 --> 00:19:08,350
culminate in upstream acceptance of code

00:19:05,020 --> 00:19:10,090
and I keep saying you need to get you

00:19:08,350 --> 00:19:11,410
need to get code in as soon as possible

00:19:10,090 --> 00:19:12,990
but you also need to get approval as

00:19:11,410 --> 00:19:15,880
soon as possible but i'm not i'm not

00:19:12,990 --> 00:19:17,710
talking about approval to upstream a

00:19:15,880 --> 00:19:20,880
large patch set i'm talking about

00:19:17,710 --> 00:19:23,170
getting approval to work upstream and

00:19:20,880 --> 00:19:24,880
your your legal departments need to

00:19:23,170 --> 00:19:27,429
trust that you will do the right thing

00:19:24,880 --> 00:19:29,170
so you can start the process early so

00:19:27,429 --> 00:19:33,100
that the very first patch can go

00:19:29,170 --> 00:19:34,600
upstream as early as possible so if your

00:19:33,100 --> 00:19:36,580
legal department is dragging their feet

00:19:34,600 --> 00:19:39,160
on approving upstream contribution your

00:19:36,580 --> 00:19:40,840
schedule is in jeopardy I've seen many

00:19:39,160 --> 00:19:42,400
companies held up with this with a full

00:19:40,840 --> 00:19:43,900
set of enable new patches waiting for

00:19:42,400 --> 00:19:45,700
legal approval all hinging on a tight

00:19:43,900 --> 00:19:47,759
schedule and not realizing that's

00:19:45,700 --> 00:19:51,340
there's still a lot of work to do

00:19:47,759 --> 00:19:53,649
so the other part is branding but not

00:19:51,340 --> 00:19:55,090
really so company branding is not the

00:19:53,649 --> 00:19:58,750
same as open source naming and these

00:19:55,090 --> 00:20:02,289
topics are often conflated the problem

00:19:58,750 --> 00:20:05,730
is when one of you as an engineer pushes

00:20:02,289 --> 00:20:09,279
code upstream that says this is you know

00:20:05,730 --> 00:20:11,700
a chip foo and your marketing department

00:20:09,279 --> 00:20:13,690
comes back and says no it's chip bar and

00:20:11,700 --> 00:20:15,009
you've already submitted patches and

00:20:13,690 --> 00:20:16,960
then they come back later and say well

00:20:15,009 --> 00:20:19,779
it's chip zap and they keep changing

00:20:16,960 --> 00:20:23,350
things on you the reality is don't get

00:20:19,779 --> 00:20:25,600
stuck equating the brand with the chip

00:20:23,350 --> 00:20:27,580
name and in fact the open source

00:20:25,600 --> 00:20:29,139
community might have a say and what they

00:20:27,580 --> 00:20:30,580
want to call your chip they might not

00:20:29,139 --> 00:20:32,590
like what you want to call your chip and

00:20:30,580 --> 00:20:34,210
depending on your position in the

00:20:32,590 --> 00:20:36,340
community they might not let you have a

00:20:34,210 --> 00:20:38,559
chance to call your chip what you want

00:20:36,340 --> 00:20:41,409
to call it in the open source packages

00:20:38,559 --> 00:20:44,289
and in reality it really doesn't matter

00:20:41,409 --> 00:20:46,299
so if a 0 is boring but if you don't get

00:20:44,289 --> 00:20:48,009
the right approval to build a house you

00:20:46,299 --> 00:20:50,190
might build too close to the property

00:20:48,009 --> 00:20:52,269
line for instance which is illegal so

00:20:50,190 --> 00:20:54,129
let's move on to phase one platform

00:20:52,269 --> 00:20:56,019
enablement so this describes the first

00:20:54,129 --> 00:20:58,029
stage of development in most projects

00:20:56,019 --> 00:21:00,370
where the platform is identified to the

00:20:58,029 --> 00:21:03,100
project and a minimum set of work is

00:21:00,370 --> 00:21:07,360
done and the first requirement for

00:21:03,100 --> 00:21:09,279
enablement is the ISA so if you have an

00:21:07,360 --> 00:21:11,649
ISA i would say release it as soon as

00:21:09,279 --> 00:21:13,230
you can if you keep it internal you'd

00:21:11,649 --> 00:21:15,970
better be prepared to do all the work

00:21:13,230 --> 00:21:17,409
you will be held to a higher standard so

00:21:15,970 --> 00:21:18,700
this tactic should be reserved for those

00:21:17,409 --> 00:21:20,740
companies that already have a good

00:21:18,700 --> 00:21:23,740
reputation in the communities and have a

00:21:20,740 --> 00:21:26,289
reserve of trust so once the open-source

00:21:23,740 --> 00:21:27,940
maintainer 'he's open-source maintainer

00:21:26,289 --> 00:21:29,889
have actually been known to block

00:21:27,940 --> 00:21:32,799
upstream acceptance of a pork because of

00:21:29,889 --> 00:21:34,629
the lack of ability of an ISA they'll

00:21:32,799 --> 00:21:40,000
basically say hey soon as you publish

00:21:34,629 --> 00:21:41,679
the docs I'll take your patch so if we

00:21:40,000 --> 00:21:44,879
relate this whole thing back to the gift

00:21:41,679 --> 00:21:47,169
house metaphor this is akin to wanting

00:21:44,879 --> 00:21:48,549
to know what sort of ground the house is

00:21:47,169 --> 00:21:51,639
built on and what's inside of the walls

00:21:48,549 --> 00:21:53,289
before agreeing to maintain the house so

00:21:51,639 --> 00:21:55,029
one thing you don't want to do is ask

00:21:53,289 --> 00:21:58,090
the community for help but not but

00:21:55,029 --> 00:21:59,630
refuse to provide the ISA this is like

00:21:58,090 --> 00:22:01,640
saying you know

00:21:59,630 --> 00:22:03,740
yeah this is well this is exactly that's

00:22:01,640 --> 00:22:05,000
exactly a help me help me help me but I

00:22:03,740 --> 00:22:07,160
can't tell you what I need help with

00:22:05,000 --> 00:22:09,800
that's and this is actually pretty

00:22:07,160 --> 00:22:10,850
common so arm licensees are fortunate

00:22:09,800 --> 00:22:12,230
that the arm instruction set

00:22:10,850 --> 00:22:16,240
architecture is mostly public of it

00:22:12,230 --> 00:22:18,140
publicly available at this point so a

00:22:16,240 --> 00:22:19,430
secondary element that helps with

00:22:18,140 --> 00:22:21,680
platform enablement is the availability

00:22:19,430 --> 00:22:24,980
of software models this is something

00:22:21,680 --> 00:22:29,480
that arm very much did right with the

00:22:24,980 --> 00:22:30,440
foundation model early okay so I'm going

00:22:29,480 --> 00:22:31,700
to talk you're going to see some of

00:22:30,440 --> 00:22:33,230
these stop signs you're going to see

00:22:31,700 --> 00:22:34,850
some danger things and you're going to

00:22:33,230 --> 00:22:37,310
see some pro tips you've seen pro tips

00:22:34,850 --> 00:22:38,780
already so it's a cardinal sin to

00:22:37,310 --> 00:22:42,370
implement a micro architecture and leave

00:22:38,780 --> 00:22:45,290
out the non optional parts the ISA so

00:22:42,370 --> 00:22:50,810
don't leave out simdi don't leave out

00:22:45,290 --> 00:22:53,990
hard float in our v8 64-bit it's just an

00:22:50,810 --> 00:22:55,790
absolute nightmare for you so the entire

00:22:53,990 --> 00:22:57,380
OS software stack assumes the

00:22:55,790 --> 00:22:59,660
availability of neon and floating point

00:22:57,380 --> 00:23:01,520
and the proper functioning of that

00:22:59,660 --> 00:23:03,560
software stack relies on it so leaving

00:23:01,520 --> 00:23:06,950
it out means entire code paths will be

00:23:03,560 --> 00:23:09,050
filled with illegal operations all right

00:23:06,950 --> 00:23:10,490
so we talked about models so a model is

00:23:09,050 --> 00:23:14,230
an emulation environment that simulates

00:23:10,490 --> 00:23:16,400
the hardware is defined by the ISA so

00:23:14,230 --> 00:23:18,590
open source communities are often not

00:23:16,400 --> 00:23:20,510
interested in signing ndas so there's no

00:23:18,590 --> 00:23:22,310
access to the hardware for open source

00:23:20,510 --> 00:23:24,620
engineers unless you make it these

00:23:22,310 --> 00:23:27,470
models available to them outside of NDA

00:23:24,620 --> 00:23:28,820
so this is a good really a good reason

00:23:27,470 --> 00:23:30,860
to leverage your relationship with

00:23:28,820 --> 00:23:33,620
linaro and arm as we have strong and

00:23:30,860 --> 00:23:36,290
strong open-source presence and in the

00:23:33,620 --> 00:23:39,260
early days with the foundation model we

00:23:36,290 --> 00:23:41,810
could work on enablement on number

00:23:39,260 --> 00:23:44,120
behalf in that way so a successful

00:23:41,810 --> 00:23:46,130
company will explore the options the ISA

00:23:44,120 --> 00:23:47,960
in a bi years before the scheduled

00:23:46,130 --> 00:23:51,920
pressure forces any public announcement

00:23:47,960 --> 00:23:53,480
they make the distribution model they

00:23:51,920 --> 00:23:55,430
make distribution of the model widely

00:23:53,480 --> 00:23:58,220
available as possible including two key

00:23:55,430 --> 00:23:59,930
community members on the other hand a

00:23:58,220 --> 00:24:01,670
company that provides no model or

00:23:59,930 --> 00:24:03,650
execution engine will struggle to prove

00:24:01,670 --> 00:24:07,760
to the communities that the that their

00:24:03,650 --> 00:24:10,340
port is actually functional so we have

00:24:07,760 --> 00:24:11,540
the ISA we have models what's next well

00:24:10,340 --> 00:24:12,080
there's a number of activities I can

00:24:11,540 --> 00:24:13,789
kick off

00:24:12,080 --> 00:24:16,370
same time and these are Colonel

00:24:13,789 --> 00:24:18,679
enablement compiler assembler linker and

00:24:16,370 --> 00:24:20,269
system platform identification so much

00:24:18,679 --> 00:24:21,620
has been written about getting code

00:24:20,269 --> 00:24:25,490
upstream into the Linux kernel so I

00:24:21,620 --> 00:24:27,289
won't go into detail but we'll touch on

00:24:25,490 --> 00:24:29,659
some points that relate directly to the

00:24:27,289 --> 00:24:31,220
toolchain Linux kernel platform

00:24:29,659 --> 00:24:32,539
enablement code is the code that allows

00:24:31,220 --> 00:24:34,789
the kernel to detect the

00:24:32,539 --> 00:24:36,740
microarchitecture boot the machine and

00:24:34,789 --> 00:24:38,690
export the necessary information to the

00:24:36,740 --> 00:24:42,769
user space via the communication

00:24:38,690 --> 00:24:44,480
contract which is called the kab I so

00:24:42,769 --> 00:24:46,190
this is the contract between kernel and

00:24:44,480 --> 00:24:48,830
users based applications about what the

00:24:46,190 --> 00:24:50,899
colonel expects and returns regarding

00:24:48,830 --> 00:24:53,029
structures syscall interfaces register

00:24:50,899 --> 00:24:56,960
vol ability feature enablement register

00:24:53,029 --> 00:24:58,880
access etc so it's important to

00:24:56,960 --> 00:25:00,500
understand that while the compiler link

00:24:58,880 --> 00:25:02,000
or an assembler platform enablement code

00:25:00,500 --> 00:25:04,070
can go upstream in parallel with the

00:25:02,000 --> 00:25:06,830
Linux kernel the C library must wait

00:25:04,070 --> 00:25:09,500
until the kab is committed upstream for

00:25:06,830 --> 00:25:11,690
accepting patches so this means that G

00:25:09,500 --> 00:25:14,210
lipsy won't accept code until the

00:25:11,690 --> 00:25:16,070
colonel has baked the kab I code and

00:25:14,210 --> 00:25:18,260
this is a hard dependency and it's

00:25:16,070 --> 00:25:20,120
because we never want a version of G

00:25:18,260 --> 00:25:22,010
lipsy released in the wild that

00:25:20,120 --> 00:25:23,960
identifies a platform before the colonel

00:25:22,010 --> 00:25:27,159
recognizes it and this is to prevent

00:25:23,960 --> 00:25:28,909
incompatible application code with

00:25:27,159 --> 00:25:30,649
incompatible applications with

00:25:28,909 --> 00:25:33,830
incompatible colonel abis from being

00:25:30,649 --> 00:25:36,440
released in the wild and this is this is

00:25:33,830 --> 00:25:38,299
all a maintenance issue additionals

00:25:36,440 --> 00:25:39,889
don't want to maintain it you know

00:25:38,299 --> 00:25:41,720
different versions that don't support

00:25:39,889 --> 00:25:43,070
each other and the communities don't

00:25:41,720 --> 00:25:46,130
want to maintain it either it's

00:25:43,070 --> 00:25:47,779
impossible daunt bugs so in general the

00:25:46,130 --> 00:25:49,610
Linux kernel releases a new release

00:25:47,779 --> 00:25:52,940
every two years there is a Linux

00:25:49,610 --> 00:25:55,010
long-term kernel and these have a or

00:25:52,940 --> 00:25:56,870
excuse me the Linux releases are every

00:25:55,010 --> 00:25:59,179
two to three months long term kernels

00:25:56,870 --> 00:26:00,590
have a longer supported life span you

00:25:59,179 --> 00:26:02,630
know if you look at this I don't know

00:26:00,590 --> 00:26:05,149
why some of these are are going to be

00:26:02,630 --> 00:26:08,240
maintained for five years and some / 3

00:26:05,149 --> 00:26:09,409
and some for two so district kernels

00:26:08,240 --> 00:26:10,880
don't have to track these but it's

00:26:09,409 --> 00:26:14,029
possible they're track relatively

00:26:10,880 --> 00:26:16,039
closely but my assumption is they have

00:26:14,029 --> 00:26:19,760
their own long-term kernels so if I

00:26:16,039 --> 00:26:22,340
believe if you look at rel 7 it's based

00:26:19,760 --> 00:26:24,210
on colonel 310 and will be freud's for

00:26:22,340 --> 00:26:26,320
the rest of its life

00:26:24,210 --> 00:26:27,400
so if it destroys ships a kernel that

00:26:26,320 --> 00:26:29,530
doesn't have support for your

00:26:27,400 --> 00:26:31,210
microarchitecture very meant variant

00:26:29,530 --> 00:26:33,340
your system libraries won't be able to

00:26:31,210 --> 00:26:35,620
detect the platform and it's likely the

00:26:33,340 --> 00:26:37,540
distro won't even boot your Borg so the

00:26:35,620 --> 00:26:39,250
point is you need upstream Linux kernel

00:26:37,540 --> 00:26:42,190
support or the rest of the work in the

00:26:39,250 --> 00:26:44,470
other projects is pointless so like I

00:26:42,190 --> 00:26:46,960
said rel sevens still on a 310 kernel

00:26:44,470 --> 00:26:48,910
with significant patrick so what kernel

00:26:46,960 --> 00:26:55,990
will relate use it's a good bet it'll be

00:26:48,910 --> 00:26:57,070
something in fedora first so the first

00:26:55,990 --> 00:27:00,190
batch is to hit the tool chain or

00:26:57,070 --> 00:27:02,020
microarchitecture identification so from

00:27:00,190 --> 00:27:03,820
a trustworthy SOC vendor and your

00:27:02,020 --> 00:27:06,100
reputation succeeds you by their

00:27:03,820 --> 00:27:07,300
precedes you by the way the new tool

00:27:06,100 --> 00:27:08,920
chain community will accept an

00:27:07,300 --> 00:27:10,540
architecture identification patch the

00:27:08,920 --> 00:27:13,330
assembler linker and compiler before

00:27:10,540 --> 00:27:15,310
full enablement if you're new they might

00:27:13,330 --> 00:27:16,570
not they might not trust that you're

00:27:15,310 --> 00:27:19,300
going to stick around or that your are

00:27:16,570 --> 00:27:21,370
well hardware will even hit mark it so

00:27:19,300 --> 00:27:23,560
at a minimum this code allows the linker

00:27:21,370 --> 00:27:24,970
assembler and compiler to know what kind

00:27:23,560 --> 00:27:27,550
of code they're generating and for what

00:27:24,970 --> 00:27:30,520
platform and this work can proceed in

00:27:27,550 --> 00:27:31,990
tandem with kernel development for a

00:27:30,520 --> 00:27:34,060
microarchitecture variant these first

00:27:31,990 --> 00:27:35,650
patches may simply clone the behavior of

00:27:34,060 --> 00:27:37,470
the reference platform and assign the

00:27:35,650 --> 00:27:41,860
name of the micro berry

00:27:37,470 --> 00:27:43,300
microarchitecture variant so following

00:27:41,860 --> 00:27:46,300
this we have the instructions set

00:27:43,300 --> 00:27:48,430
specific changes and these are pipeline

00:27:46,300 --> 00:27:50,110
descriptions and microarchitecture

00:27:48,430 --> 00:27:53,050
variants of the cost model and these can

00:27:50,110 --> 00:27:55,450
go upstream at this point the code is

00:27:53,050 --> 00:27:57,340
often first past and based on the best

00:27:55,450 --> 00:27:59,350
guest performance characteristics in

00:27:57,340 --> 00:28:01,060
later stages these are tuned with

00:27:59,350 --> 00:28:04,300
heuristics once real hardware is

00:28:01,060 --> 00:28:06,340
actually available so here's a dangerous

00:28:04,300 --> 00:28:08,140
sometimes early enablement might give

00:28:06,340 --> 00:28:09,640
away the details of the processor such

00:28:08,140 --> 00:28:13,140
as information about the pipeline

00:28:09,640 --> 00:28:16,030
bandwidth if if this is per if this is

00:28:13,140 --> 00:28:18,370
sensitive you what you need to do is

00:28:16,030 --> 00:28:22,240
make sure that the pipeline description

00:28:18,370 --> 00:28:24,250
that you that you export or announce is

00:28:22,240 --> 00:28:26,560
the same as the reference platform until

00:28:24,250 --> 00:28:28,840
such time as you've actually announced

00:28:26,560 --> 00:28:31,180
the hardware so just be aware of that

00:28:28,840 --> 00:28:33,760
that the sometimes the code that you

00:28:31,180 --> 00:28:34,960
upstream can give away details but you

00:28:33,760 --> 00:28:37,990
can upstream that code

00:28:34,960 --> 00:28:40,419
parts later so this is the GCC

00:28:37,990 --> 00:28:41,679
development release schedule the

00:28:40,419 --> 00:28:44,440
important thing to take note of here is

00:28:41,679 --> 00:28:46,299
stage one so we have stage one here and

00:28:44,440 --> 00:28:48,880
we have stage one here so we're in G c7

00:28:46,299 --> 00:28:50,559
stage right now stage 1 is the

00:28:48,880 --> 00:28:52,419
gatekeeper to the release it's a

00:28:50,559 --> 00:28:54,520
six-month window where the tree is open

00:28:52,419 --> 00:28:56,409
for new features and invasive fixes one

00:28:54,520 --> 00:28:58,779
stage one closes no new features will be

00:28:56,409 --> 00:29:01,809
allowed for another six months while the

00:28:58,779 --> 00:29:04,929
next release is stabilizing so the

00:29:01,809 --> 00:29:07,630
implication here is that if you miss GCC

00:29:04,929 --> 00:29:09,190
stage one your enablement patches will

00:29:07,630 --> 00:29:12,460
have to wait a minimum of one and a half

00:29:09,190 --> 00:29:14,799
years for the next release to actually

00:29:12,460 --> 00:29:17,590
hit a distro to have a chance of hitting

00:29:14,799 --> 00:29:20,320
a distro so you need to make sure you

00:29:17,590 --> 00:29:22,659
get those patches into stage one so if

00:29:20,320 --> 00:29:23,980
you're ever in a status you're watching

00:29:22,659 --> 00:29:26,380
a status update where I'm talking about

00:29:23,980 --> 00:29:28,029
stage one it's why compiler engineers

00:29:26,380 --> 00:29:30,010
and those of us that release compiler

00:29:28,029 --> 00:29:31,630
software obsessed with stage one hitting

00:29:30,010 --> 00:29:34,899
stage one we don't want to wait a year

00:29:31,630 --> 00:29:37,090
and a half the first step for G lipsy is

00:29:34,899 --> 00:29:39,549
to enable the code which will Express

00:29:37,090 --> 00:29:41,620
expressly bilji lipsy for the target

00:29:39,549 --> 00:29:43,270
microarchitecture variant so this means

00:29:41,620 --> 00:29:45,220
that you need a compiler that can build

00:29:43,270 --> 00:29:47,409
the new variant at least nominally and

00:29:45,220 --> 00:29:50,649
you also need G lipsy to build the

00:29:47,409 --> 00:29:52,950
framework changes in order to recognize

00:29:50,649 --> 00:29:55,390
your building for that new architecture

00:29:52,950 --> 00:29:57,580
at first the new microarchitecture very

00:29:55,390 --> 00:29:59,740
variant will in fact adopt the reference

00:29:57,580 --> 00:30:01,899
platform and this is ok you can submit

00:29:59,740 --> 00:30:04,630
these patches in little pieces that

00:30:01,899 --> 00:30:06,580
basically say oh yeah I'm just like a 57

00:30:04,630 --> 00:30:08,590
and then come back later and say well

00:30:06,580 --> 00:30:11,860
I'm a little different than a 57 and

00:30:08,590 --> 00:30:13,149
that's perfectly acceptable so if you

00:30:11,860 --> 00:30:14,799
look at the G lipsy release schedule

00:30:13,149 --> 00:30:16,330
this is about every six months so

00:30:14,799 --> 00:30:18,850
there's a month-long freeze before the

00:30:16,330 --> 00:30:21,520
release and the window for every new

00:30:18,850 --> 00:30:23,260
code is on is open for about 25 month

00:30:21,520 --> 00:30:26,080
periods a year so how do we know what

00:30:23,260 --> 00:30:29,649
versions of G lipsy will make ubuntu or

00:30:26,080 --> 00:30:31,539
rel distro releases so safe bet that

00:30:29,649 --> 00:30:33,159
they'll pick up the G lipsy version for

00:30:31,539 --> 00:30:35,500
the latest non LTS release or from

00:30:33,159 --> 00:30:37,240
fedora as we said before but it's not

00:30:35,500 --> 00:30:40,059
unheard of for the distro to pick up the

00:30:37,240 --> 00:30:42,520
latest version of G lipsy that they can

00:30:40,059 --> 00:30:44,529
this is because G loves eatzi's ability

00:30:42,520 --> 00:30:46,940
to identify the target is pivotal to the

00:30:44,529 --> 00:30:48,800
distro being able to execute platforms

00:30:46,940 --> 00:30:51,830
code will get a little bit more into

00:30:48,800 --> 00:30:54,290
that in a little bit so here's another

00:30:51,830 --> 00:30:57,020
protein protip get that kab I enablement

00:30:54,290 --> 00:30:59,570
code upstream as soon as possible only

00:30:57,020 --> 00:31:01,790
after that code is baked can G lipsy

00:30:59,570 --> 00:31:04,040
platform identify what hardware you're

00:31:01,790 --> 00:31:05,990
on and this is a hard requirement G

00:31:04,040 --> 00:31:09,170
lipsy implements the user space side of

00:31:05,990 --> 00:31:10,610
the KBI contract so after the identity

00:31:09,170 --> 00:31:12,530
of the platform identification you need

00:31:10,610 --> 00:31:15,050
G lipsy to be able to one implement the

00:31:12,530 --> 00:31:16,790
syscall interface to detect and query

00:31:15,050 --> 00:31:19,310
the microarchitecture information in the

00:31:16,790 --> 00:31:23,000
kernel platform information that via the

00:31:19,310 --> 00:31:25,070
Ox vector and three implement the I funk

00:31:23,000 --> 00:31:26,240
mechanism for the architecture so if

00:31:25,070 --> 00:31:29,300
there's anything controversial in the

00:31:26,240 --> 00:31:31,220
new kvi the G lipsy community will block

00:31:29,300 --> 00:31:33,680
upstream acceptance of your patches on

00:31:31,220 --> 00:31:34,880
acceptance of the kab I so you might

00:31:33,680 --> 00:31:37,040
have everything ready to go and still

00:31:34,880 --> 00:31:38,600
miss your target G lipsy date so the

00:31:37,040 --> 00:31:40,550
reason this is important is that if a

00:31:38,600 --> 00:31:42,080
linux distro can identify the hardware

00:31:40,550 --> 00:31:43,760
it's running on it can add that support

00:31:42,080 --> 00:31:45,680
to the distro and in some circumstances

00:31:43,760 --> 00:31:47,780
the optimizations might be added later

00:31:45,680 --> 00:31:50,030
I'm not promising I don't work for the

00:31:47,780 --> 00:31:52,730
distro don't quote me on it but it's

00:31:50,030 --> 00:31:54,140
happened in the past but in reality your

00:31:52,730 --> 00:31:56,720
code for G lipsy won't be accepted

00:31:54,140 --> 00:31:58,610
upstream until any necessary ABI changes

00:31:56,720 --> 00:32:01,880
have been implemented as well which is

00:31:58,610 --> 00:32:04,820
part of the next phase and the force

00:32:01,880 --> 00:32:08,120
before I get there I hope you don't need

00:32:04,820 --> 00:32:09,590
a BA changes so let's slide track very

00:32:08,120 --> 00:32:10,670
quickly to talk about rebel and hardware

00:32:09,590 --> 00:32:12,770
so if you're lucky you'll get the

00:32:10,670 --> 00:32:14,840
hardware on schedule before you start

00:32:12,770 --> 00:32:16,310
working on ABI enablement and this will

00:32:14,840 --> 00:32:18,650
show that you're early assumptions on

00:32:16,310 --> 00:32:21,860
the ABI are can in fact actually be

00:32:18,650 --> 00:32:23,540
realized in hardware unfortunately of

00:32:21,860 --> 00:32:26,690
the 10 architecture enablement I've been

00:32:23,540 --> 00:32:30,170
involved in none of them have been on

00:32:26,690 --> 00:32:32,930
time so accept the reality the necessary

00:32:30,170 --> 00:32:34,130
chain of events can't be based upon an

00:32:32,930 --> 00:32:35,420
assumption that everything is going to

00:32:34,130 --> 00:32:36,950
go according to the schedule

00:32:35,420 --> 00:32:39,680
particularly the hardware release

00:32:36,950 --> 00:32:41,420
schedule so red one harver means that

00:32:39,680 --> 00:32:43,670
the compiler cost model tables can be

00:32:41,420 --> 00:32:47,000
updated based on execution data all

00:32:43,670 --> 00:32:48,590
right back to a vis so the ABI is the

00:32:47,000 --> 00:32:51,320
application binary interface and it's

00:32:48,590 --> 00:32:53,480
the contract between applications about

00:32:51,320 --> 00:32:55,340
how the binaries laid out in memory and

00:32:53,480 --> 00:32:57,710
how it interacts with other applications

00:32:55,340 --> 00:32:59,740
so for instance the dynamic link

00:32:57,710 --> 00:33:02,830
how the dynamic linker interacts with

00:32:59,740 --> 00:33:05,149
applications that it loads and execute

00:33:02,830 --> 00:33:06,260
so hopefully for microarchitecture

00:33:05,149 --> 00:33:08,600
variants this is minimal or

00:33:06,260 --> 00:33:10,190
non-existence non-existent though it's

00:33:08,600 --> 00:33:12,890
possible that a new microarchitecture

00:33:10,190 --> 00:33:15,500
variant will de buhe a new is a feature

00:33:12,890 --> 00:33:18,409
first and thus will have to implement a

00:33:15,500 --> 00:33:20,059
bi change or addition you will be forced

00:33:18,409 --> 00:33:22,130
to separate those one will have to go in

00:33:20,059 --> 00:33:24,710
against the reference platform the ISA

00:33:22,130 --> 00:33:26,929
will apply to all our katek all

00:33:24,710 --> 00:33:28,190
microarchitecture variants that are

00:33:26,929 --> 00:33:29,480
covered by the ISA and then your

00:33:28,190 --> 00:33:31,880
secondary patch will be able to

00:33:29,480 --> 00:33:33,529
implement your new features so even in

00:33:31,880 --> 00:33:36,470
this case arm will often enable the new

00:33:33,529 --> 00:33:37,840
is a additions into the reference

00:33:36,470 --> 00:33:39,440
platform on your behalf before

00:33:37,840 --> 00:33:45,020
microarchitecture enablement is

00:33:39,440 --> 00:33:47,120
necessary ok so using using an existing

00:33:45,020 --> 00:33:48,860
API so a microarchitecture variant is

00:33:47,120 --> 00:33:50,090
able to inherit from the code base of

00:33:48,860 --> 00:33:52,850
the parent architecture and should

00:33:50,090 --> 00:33:55,010
generally not need a new API and almost

00:33:52,850 --> 00:33:56,120
every architecture variant will have an

00:33:55,010 --> 00:33:58,340
opportunity where they think to

00:33:56,120 --> 00:34:01,340
themselves you know it'd be a lot easier

00:33:58,340 --> 00:34:03,320
and cheaper on us if we just created our

00:34:01,340 --> 00:34:06,980
own ABI or broke the existing one

00:34:03,320 --> 00:34:08,899
exactly one just just don't do it the

00:34:06,980 --> 00:34:13,580
path the fastest path up streaming is to

00:34:08,899 --> 00:34:15,740
use the existing ABI so if you

00:34:13,580 --> 00:34:19,550
implemented all the required parts of

00:34:15,740 --> 00:34:21,080
the ISA if you've not implemented all

00:34:19,550 --> 00:34:23,389
the parts the ISA you've actually

00:34:21,080 --> 00:34:26,359
defined a new ABI so remember when I was

00:34:23,389 --> 00:34:28,460
talking about releasing software that

00:34:26,359 --> 00:34:29,599
doesn't have neon and does are releasing

00:34:28,460 --> 00:34:31,879
hardware that doesn't have neon and

00:34:29,599 --> 00:34:34,490
doesn't have hard float you have a new

00:34:31,879 --> 00:34:38,060
API you have to re-implement all of the

00:34:34,490 --> 00:34:40,550
code which assumed neon assumed a

00:34:38,060 --> 00:34:44,720
floating-point unit this is a mountain

00:34:40,550 --> 00:34:46,399
of work so pro tip is don't use an ABI

00:34:44,720 --> 00:34:49,669
change as a way to squeeze out more

00:34:46,399 --> 00:34:51,500
performance unless it's a benefit to all

00:34:49,669 --> 00:34:53,000
microarchitecture variants so if you're

00:34:51,500 --> 00:34:54,950
trying to squeeze out performance

00:34:53,000 --> 00:34:56,599
opposing the API change isn't the way to

00:34:54,950 --> 00:34:58,700
do it you will be blocked by the

00:34:56,599 --> 00:35:02,599
community and the other parties that use

00:34:58,700 --> 00:35:05,960
the same API all right here's another

00:35:02,599 --> 00:35:08,540
danger nothing says lazy like a new API

00:35:05,960 --> 00:35:10,190
or an API that significantly deviates

00:35:08,540 --> 00:35:11,900
from the established standards for no

00:35:10,190 --> 00:35:14,180
particular reason just don't do it

00:35:11,900 --> 00:35:16,640
maintain errs will always try to push

00:35:14,180 --> 00:35:18,589
you toward an existing API if you must

00:35:16,640 --> 00:35:20,599
have an ABI change you absolutely must

00:35:18,589 --> 00:35:24,070
petition the invested parties as soon as

00:35:20,599 --> 00:35:27,230
possible so once again your lead time

00:35:24,070 --> 00:35:29,060
yearly time goes even further out so an

00:35:27,230 --> 00:35:30,380
unsuccessful company will assume that

00:35:29,060 --> 00:35:32,060
they have the authority to make an API

00:35:30,380 --> 00:35:33,589
change where others have an invested

00:35:32,060 --> 00:35:35,720
interest which will lead to blocking

00:35:33,589 --> 00:35:40,010
installing and this can be deadly to

00:35:35,720 --> 00:35:41,780
your schedule it also damages your

00:35:40,010 --> 00:35:44,420
reputation and will cause distrust in

00:35:41,780 --> 00:35:47,210
the future all right so here's another

00:35:44,420 --> 00:35:49,460
one of those cardinal sins so as a

00:35:47,210 --> 00:35:52,280
cardinal sin to release binaries compile

00:35:49,460 --> 00:36:00,020
with a pre-release ABI into the wild so

00:35:52,280 --> 00:36:02,990
this a classic blunder so we why is this

00:36:00,020 --> 00:36:04,390
a sin so if you shipped code on a non

00:36:02,990 --> 00:36:06,740
upstream ABI and there are bugs

00:36:04,390 --> 00:36:08,270
customers will start asking someone to

00:36:06,740 --> 00:36:10,670
fix that and who do you think they go to

00:36:08,270 --> 00:36:13,070
they go to the open source community and

00:36:10,670 --> 00:36:15,560
the open source community says what's

00:36:13,070 --> 00:36:17,150
this and you'll say well it's the code

00:36:15,560 --> 00:36:18,500
that runs on my architecture and they'll

00:36:17,150 --> 00:36:20,630
say well this doesn't look like the code

00:36:18,500 --> 00:36:22,550
that went in upstream and pretty soon

00:36:20,630 --> 00:36:25,640
you have this circle of blame where then

00:36:22,550 --> 00:36:27,290
they say well who who who permitted this

00:36:25,640 --> 00:36:29,210
code to be written this way this isn't

00:36:27,290 --> 00:36:31,670
this isn't what we ship and this isn't

00:36:29,210 --> 00:36:33,170
what the Linux distribution ships so

00:36:31,670 --> 00:36:34,670
binary incompatibility between

00:36:33,170 --> 00:36:37,190
implementations is a real problem

00:36:34,670 --> 00:36:38,810
vendors of large software projects they

00:36:37,190 --> 00:36:41,570
like the ability to forward port their

00:36:38,810 --> 00:36:44,930
software and their existing applications

00:36:41,570 --> 00:36:46,490
into new linux distros and then if the

00:36:44,930 --> 00:36:49,730
ABI is differ this is impossible the

00:36:46,490 --> 00:36:51,589
source of bizarre and difficult bugs so

00:36:49,730 --> 00:36:53,510
think like large enterprise software

00:36:51,589 --> 00:36:57,020
Suites they don't want to have to

00:36:53,510 --> 00:36:59,660
recompile all that code just to to run

00:36:57,020 --> 00:37:01,869
it on the new distro and the distros do

00:36:59,660 --> 00:37:06,230
the best they can in order to allow

00:37:01,869 --> 00:37:08,270
backward compatibility so just because

00:37:06,230 --> 00:37:10,580
you propose that ABI change doesn't mean

00:37:08,270 --> 00:37:11,780
you get to own the ABI so you might not

00:37:10,580 --> 00:37:13,910
own the avi even if you're the first

00:37:11,780 --> 00:37:15,619
person to define it you might have to

00:37:13,910 --> 00:37:20,180
defer to those who own the predecessor

00:37:15,619 --> 00:37:22,060
ABI alright so moving on to GC linker

00:37:20,180 --> 00:37:25,270
and assembler ABI changes

00:37:22,060 --> 00:37:26,440
so the IB ABI changes are required they

00:37:25,270 --> 00:37:27,760
must first be implemented in the

00:37:26,440 --> 00:37:29,050
compiler and linker in tandem and

00:37:27,760 --> 00:37:31,830
otherwise you can't generate code for

00:37:29,050 --> 00:37:31,830

YouTube URL: https://www.youtube.com/watch?v=DFEErVbiR_E


