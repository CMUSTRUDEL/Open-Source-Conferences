Title: LAS16-301: OpenStack on Aarch64, running in production
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-301: OpenStack on Aarch64, running in production, upstream improvements, and interoperability
Speakers: Yibo Cai, Gema Gomez Solano, Jack He, Marcin Juskiewicz, Martin Stadtler
Date: September 28, 2016

★ Session Description ★
“OpenStack is at the heart of the next generation of the opensource
cloud on a global scale. During this presentation, we will touch on three themes, running an OpenStack based cloud in production by Gema Gomez and Andy Doan, followed by Marcin talking about the packaging and bug fixing on archives required to make that happen on AArch64. Jack He and Yibo Cai, will explain what it is like working with the the upstream project, the development environment, the current patches and what needs to be done next. Then Gema Gomez will Introduce the OpenStack Interop Working Group. Why is interoperability important for OpenStack? And What is Linaro doing to improve the interoperability of OpenStack?

★ Resources ★
Etherpad: pad.linaro.org/p/las16-301
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-301/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:08,870 --> 00:00:14,460
today we're going to talk about the SDI

00:00:11,610 --> 00:00:17,210
project about OpenStack and about all

00:00:14,460 --> 00:00:19,560
the effort that tool to get OpenStack

00:00:17,210 --> 00:00:25,140
running smoothly on the developer cloud

00:00:19,560 --> 00:00:27,119
if we can say we're running smoothly the

00:00:25,140 --> 00:00:29,580
talk today is going to be like a

00:00:27,119 --> 00:00:31,949
walkthrough from where we started with

00:00:29,580 --> 00:00:34,410
packages that were broken and trying to

00:00:31,949 --> 00:00:36,090
install OpenStack from there to where we

00:00:34,410 --> 00:00:38,910
are today where we have a cloud is

00:00:36,090 --> 00:00:42,450
working fully functional and that we can

00:00:38,910 --> 00:00:44,550
give projects to people from we will be

00:00:42,450 --> 00:00:47,129
talking about what building OpenStack

00:00:44,550 --> 00:00:49,800
means we will be talking about what the

00:00:47,129 --> 00:00:50,910
upstream work we've been doing and we're

00:00:49,800 --> 00:00:53,309
also going to be talking about the

00:00:50,910 --> 00:00:55,949
developer cloud itself and how evolved

00:00:53,309 --> 00:00:58,140
from version one that we had last year

00:00:55,949 --> 00:01:01,079
to version two that we have now in

00:00:58,140 --> 00:01:03,329
cambridge i will be talking also

00:01:01,079 --> 00:01:05,339
slightly our interoperability because

00:01:03,329 --> 00:01:08,610
that's like the last step to get the

00:01:05,339 --> 00:01:09,930
cloud up there comparable to all the

00:01:08,610 --> 00:01:12,150
other clouds that are right now

00:01:09,930 --> 00:01:14,549
installed in production so that's that

00:01:12,150 --> 00:01:16,860
will be like closing the circle and

00:01:14,549 --> 00:01:20,580
closing what the blowing OpenStack in

00:01:16,860 --> 00:01:22,049
production means for a are 64 you won't

00:01:20,580 --> 00:01:23,490
be hearing everything from me you will

00:01:22,049 --> 00:01:26,040
be hearing this from the team that has

00:01:23,490 --> 00:01:28,110
been working on that we will have evo

00:01:26,040 --> 00:01:30,299
and jack from arm that have been

00:01:28,110 --> 00:01:32,820
collaborating with linaro on this

00:01:30,299 --> 00:01:35,430
project we will have mass in talking

00:01:32,820 --> 00:01:38,040
about building stuff and we will have

00:01:35,430 --> 00:01:40,140
Andy as well from the system steam el

00:01:38,040 --> 00:01:44,729
dinero that has been running the cloud

00:01:40,140 --> 00:01:47,729
for a while first I wanted to do like a

00:01:44,729 --> 00:01:50,100
brief overview of what OpenStack is for

00:01:47,729 --> 00:01:52,590
those people that have never worked with

00:01:50,100 --> 00:01:54,689
it OpenStack is no more than a

00:01:52,590 --> 00:01:57,600
collection of services running on your

00:01:54,689 --> 00:02:00,090
servers all of them together right we

00:01:57,600 --> 00:02:01,920
have Nova that gives you compute we have

00:02:00,090 --> 00:02:04,740
ironic which helps you deploy the

00:02:01,920 --> 00:02:08,580
machines we have Keystone which help you

00:02:04,740 --> 00:02:11,340
authenticate networking Neutron we have

00:02:08,580 --> 00:02:13,200
glands for images and we also have a set

00:02:11,340 --> 00:02:16,349
of ansible scripts that allow you to

00:02:13,200 --> 00:02:18,900
deploy the whole thing there is heat

00:02:16,349 --> 00:02:20,430
which we haven't fully tested yet but

00:02:18,900 --> 00:02:23,310
that will probably be ready in another

00:02:20,430 --> 00:02:25,590
two to three weeks and then for the

00:02:23,310 --> 00:02:28,920
backend for storage were using same

00:02:25,590 --> 00:02:35,069
which is also I'm glad to report fully

00:02:28,920 --> 00:02:37,349
working alright so i will let mass in

00:02:35,069 --> 00:02:42,450
our system integrator talk about what

00:02:37,349 --> 00:02:45,510
building open status hello basically

00:02:42,450 --> 00:02:49,440
when i joined linaro for first up for

00:02:45,510 --> 00:02:52,019
second time i got handle that ok you

00:02:49,440 --> 00:02:54,630
will be working on OpenStack I had no

00:02:52,019 --> 00:02:58,769
idea what happens the case not that I

00:02:54,630 --> 00:03:01,370
have more about now but but better so we

00:02:58,769 --> 00:03:05,130
decided that we will support two

00:03:01,370 --> 00:03:09,569
distributions debian Jesse and CentOS 7

00:03:05,130 --> 00:03:12,840
and as debian had a team working on

00:03:09,569 --> 00:03:15,180
OpenStack and they decided that they

00:03:12,840 --> 00:03:17,459
will provide us packages if we provide

00:03:15,180 --> 00:03:19,859
them machine so we provide the machine

00:03:17,459 --> 00:03:24,510
and we got the we got packages from them

00:03:19,859 --> 00:03:28,109
I took care of CentOS 7 packages for

00:03:24,510 --> 00:03:32,069
centos when comes up and start there is

00:03:28,109 --> 00:03:35,850
a group of guys called the lgo project

00:03:32,069 --> 00:03:38,730
and they have fully operational

00:03:35,850 --> 00:03:41,730
OpenStack we meet version Mitaka which

00:03:38,730 --> 00:03:44,549
was the lightest at that moment so I

00:03:41,730 --> 00:03:49,290
took their source packages I rebuilt

00:03:44,549 --> 00:03:52,049
everything under on arm v8 and then we

00:03:49,290 --> 00:03:56,130
started discussions on guys you need to

00:03:52,049 --> 00:03:58,680
merge those set of fixes from fedora to

00:03:56,130 --> 00:04:02,250
your components to get everything

00:03:58,680 --> 00:04:06,780
working pinks it took a bit but things

00:04:02,250 --> 00:04:10,410
got sorted out merged and linarra now

00:04:06,780 --> 00:04:13,849
provides set of packages for CentOS 7

00:04:10,410 --> 00:04:17,310
for those who wants to run OpenStack I

00:04:13,849 --> 00:04:19,829
have to admit it works but there is

00:04:17,310 --> 00:04:24,270
there are some issues with networking

00:04:19,829 --> 00:04:28,710
that's why we moved to newton with

00:04:24,270 --> 00:04:30,629
our development Newton was update time

00:04:28,710 --> 00:04:36,020
in the developer face it was just

00:04:30,629 --> 00:04:41,669
recently released into open and we

00:04:36,020 --> 00:04:43,919
decided that for mutant we will go not

00:04:41,669 --> 00:04:46,919
for packaging because there was no

00:04:43,919 --> 00:04:52,319
packages when we start working on Newton

00:04:46,919 --> 00:04:55,919
but to go for providing parables for

00:04:52,319 --> 00:04:59,580
with each component Thurber's contained

00:04:55,919 --> 00:05:01,800
virtual Python butel and environment

00:04:59,580 --> 00:05:05,069
with everything needed to get each

00:05:01,800 --> 00:05:08,759
component working separate from from the

00:05:05,069 --> 00:05:12,270
other and we use ansible to deploy their

00:05:08,759 --> 00:05:15,840
dose and to install whatever is needed

00:05:12,270 --> 00:05:18,840
from their packages developer cloud in

00:05:15,840 --> 00:05:24,449
Cambridge the one where we have mutant

00:05:18,840 --> 00:05:30,120
now is fully on debian jesse and the

00:05:24,449 --> 00:05:34,229
work on packaging stuff for debian is

00:05:30,120 --> 00:05:38,400
ongoing and that we have there are some

00:05:34,229 --> 00:05:42,259
packages everything and for centos it

00:05:38,400 --> 00:05:45,300
just starts but the good thing is that

00:05:42,259 --> 00:05:49,380
compared to the previous OpenStack

00:05:45,300 --> 00:05:53,759
releases at Santos the Newton one will

00:05:49,380 --> 00:05:57,330
be built at the same time as x86 one so

00:05:53,759 --> 00:06:01,529
if you are running centos in few weeks

00:05:57,330 --> 00:06:05,880
time thanks to Jim Purina and guys from

00:06:01,529 --> 00:06:12,870
where do you killed deploy OpenStack on

00:06:05,880 --> 00:06:16,319
centers on arc 64 machines and to get

00:06:12,870 --> 00:06:21,659
things running we were working also on

00:06:16,319 --> 00:06:23,909
images the zeros image is the very very

00:06:21,659 --> 00:06:27,599
minimal image used by OpenStack

00:06:23,909 --> 00:06:32,360
community for testing and for checking

00:06:27,599 --> 00:06:35,790
is everything working at all I spent I

00:06:32,360 --> 00:06:39,620
think something like two three weeks on

00:06:35,790 --> 00:06:43,710
updating those they build system and

00:06:39,620 --> 00:06:47,550
merging stuff so we can now run zeros

00:06:43,710 --> 00:06:52,980
images on our v8 using you fi boutique

00:06:47,550 --> 00:06:55,710
etc and the work was merged and soon

00:06:52,980 --> 00:07:00,000
there shall be 0.4 release of zeros

00:06:55,710 --> 00:07:04,110
which will contain all our work this

00:07:00,000 --> 00:07:07,860
link on the slide provides goes to daily

00:07:04,110 --> 00:07:12,300
image which we would test it and it's

00:07:07,860 --> 00:07:15,860
fully working as Lena wrong we provide

00:07:12,300 --> 00:07:20,400
also Debian Jesse and Center 7 images

00:07:15,860 --> 00:07:22,590
they have they are different than images

00:07:20,400 --> 00:07:25,620
provided by distributions because we are

00:07:22,590 --> 00:07:28,740
using our linear overlay with updates

00:07:25,620 --> 00:07:32,820
for things like revered for example and

00:07:28,740 --> 00:07:36,630
we are also using linear kernels in

00:07:32,820 --> 00:07:40,800
those images we discussed with Fedora

00:07:36,630 --> 00:07:44,750
CentOS and colorize communities and we

00:07:40,800 --> 00:07:49,350
will have their images in our cloud soon

00:07:44,750 --> 00:07:51,720
though for some what first some of them

00:07:49,350 --> 00:07:55,470
there will be just automatic without any

00:07:51,720 --> 00:08:01,260
work from our side other than here you

00:07:55,470 --> 00:08:03,750
have the access and images for will be

00:08:01,260 --> 00:08:08,010
uploaded at the same time as too many

00:08:03,750 --> 00:08:10,830
other cloud providers and I would like

00:08:08,010 --> 00:08:15,410
to give the time for Jack Jack will tell

00:08:10,830 --> 00:08:15,410
about how absolute our up seeming works

00:08:21,990 --> 00:08:29,310
so I would like to try to introduce up

00:08:25,340 --> 00:08:34,560
what our team done with collaboration

00:08:29,310 --> 00:08:42,150
with linaro in upstream I mean works of

00:08:34,560 --> 00:08:47,220
OpenStack and next so the first module

00:08:42,150 --> 00:08:49,730
is Nova so for Noah we mostly we do the

00:08:47,220 --> 00:08:56,880
two jobs one is the for the enablement

00:08:49,730 --> 00:09:00,090
of the main features of Nova x64 almost

00:08:56,880 --> 00:09:03,930
all the features are enabled I access

00:09:00,090 --> 00:09:07,340
before except for some hot plug issue

00:09:03,930 --> 00:09:12,450
which which still has some I mean a

00:09:07,340 --> 00:09:14,610
small error when we used this attached

00:09:12,450 --> 00:09:17,490
such kind of device there is do some

00:09:14,610 --> 00:09:20,720
error except for except for this all the

00:09:17,490 --> 00:09:24,660
features are enabled are like 65 64 and

00:09:20,720 --> 00:09:28,260
the second thing we we've done is the

00:09:24,660 --> 00:09:32,750
Nova tempered tempest so as you know

00:09:28,260 --> 00:09:36,150
that the tempest is the standard of the

00:09:32,750 --> 00:09:42,170
OpenStack community see I i mean the the

00:09:36,150 --> 00:09:46,640
in terms of unit tests so to make a

00:09:42,170 --> 00:09:50,160
novel to make a nova accepted by the

00:09:46,640 --> 00:09:55,230
opportunity a community of OpenStack own

00:09:50,160 --> 00:09:57,870
you to pass the tempest tests so almost

00:09:55,230 --> 00:10:01,950
all the templates that has an hour

00:09:57,870 --> 00:10:04,500
passed as you know again we fixed some

00:10:01,950 --> 00:10:08,940
issues that I mean the fail fail the

00:10:04,500 --> 00:10:12,720
cases we've fixed to them so here is a

00:10:08,940 --> 00:10:15,720
table of of the features which we are

00:10:12,720 --> 00:10:19,410
enabled arm a access before you can see

00:10:15,720 --> 00:10:23,340
that the basic features such as Launch

00:10:19,410 --> 00:10:26,960
instance or stop by instance or such as

00:10:23,340 --> 00:10:30,510
such like save some snapshot and

00:10:26,960 --> 00:10:35,550
especially their life migration these

00:10:30,510 --> 00:10:36,410
features are all enabled excited for the

00:10:35,550 --> 00:10:40,620
next page

00:10:36,410 --> 00:10:44,130
this page is about the new trend in the

00:10:40,620 --> 00:10:48,750
moment it existed for that that we done

00:10:44,130 --> 00:10:51,269
for the passing year so again this is

00:10:48,750 --> 00:10:54,240
also divided into two jobs one is the

00:10:51,269 --> 00:10:59,760
future implement another another is the

00:10:54,240 --> 00:11:03,750
tempest tests so for in future in number

00:10:59,760 --> 00:11:06,600
in the movements the core service I mean

00:11:03,750 --> 00:11:10,920
I mean for the agents are all evaluated

00:11:06,600 --> 00:11:13,079
all very bit excessive for and also for

00:11:10,920 --> 00:11:17,220
the opendaylight clogging it is also

00:11:13,079 --> 00:11:20,940
very little while but for the open

00:11:17,220 --> 00:11:24,959
switch + DP DK for this one is still in

00:11:20,940 --> 00:11:28,800
progress and for the new trend champions

00:11:24,959 --> 00:11:33,000
the part as you can see that for this

00:11:28,800 --> 00:11:36,930
picture the green the green blocks are

00:11:33,000 --> 00:11:42,570
all enabled and a further white clocks

00:11:36,930 --> 00:11:44,699
there still aren't going so as we can

00:11:42,570 --> 00:11:50,550
see from this picture most of the

00:11:44,699 --> 00:11:56,310
features enabled I mean a neutron so

00:11:50,550 --> 00:11:58,980
next so this page is about the self

00:11:56,310 --> 00:12:05,220
integration with OpenStack we've done

00:11:58,980 --> 00:12:09,060
for I mean and first is the the rpd and

00:12:05,220 --> 00:12:14,130
at the OSD features this one is about

00:12:09,060 --> 00:12:17,490
the pure self in a balloon our access

00:12:14,130 --> 00:12:22,980
for both of them are done I already done

00:12:17,490 --> 00:12:25,529
and the next two ones they're safe rbd

00:12:22,980 --> 00:12:29,790
integration with OpenStack and the self

00:12:25,529 --> 00:12:32,130
OS the integration with OpenStack for

00:12:29,790 --> 00:12:35,790
the first one I mean the rbd integration

00:12:32,130 --> 00:12:40,050
with OpenStack for this feature is one

00:12:35,790 --> 00:12:43,649
hundred percent done and we use safe as

00:12:40,050 --> 00:12:46,920
as a singular backhand to provide to

00:12:43,649 --> 00:12:50,170
provide I mean volume services like

00:12:46,920 --> 00:12:52,720
attached or something and for the OS

00:12:50,170 --> 00:12:55,660
decoration with OpenStack I mean here

00:12:52,720 --> 00:12:58,480
most of features embedded are validated

00:12:55,660 --> 00:13:03,190
but but some of the features is still

00:12:58,480 --> 00:13:07,149
ongoing so for the last point is about

00:13:03,190 --> 00:13:10,149
the self of performance testing for this

00:13:07,149 --> 00:13:12,910
one it's still ongoing because as you

00:13:10,149 --> 00:13:14,980
know there's many self cluster

00:13:12,910 --> 00:13:19,000
performance test cases needs to be

00:13:14,980 --> 00:13:26,529
carried out and also we need to compare

00:13:19,000 --> 00:13:30,310
the performance with x86 so ok for next

00:13:26,529 --> 00:13:34,120
part we were introduced some detail of

00:13:30,310 --> 00:13:39,310
the patches we've poured into the

00:13:34,120 --> 00:13:46,240
upstream so i will let able to present

00:13:39,310 --> 00:13:51,100
his part hello I'm to introduce some of

00:13:46,240 --> 00:13:53,500
the purchased for for Iraq 64 to running

00:13:51,100 --> 00:13:59,740
open stacks and to make it a run

00:13:53,500 --> 00:14:02,199
smoothly armed service so the I'm were

00:13:59,740 --> 00:14:08,199
close team begins starts this job at

00:14:02,199 --> 00:14:10,660
about an end of april this year so at

00:14:08,199 --> 00:14:14,260
the very beginning we when we first

00:14:10,660 --> 00:14:18,100
tries to launch an instance on arm

00:14:14,260 --> 00:14:20,620
servers we found it the field it cannot

00:14:18,100 --> 00:14:24,579
work so which means the basic functions

00:14:20,620 --> 00:14:29,079
of OpenStack during the work on only act

00:14:24,579 --> 00:14:30,940
64 so we tried to find debugger divided

00:14:29,079 --> 00:14:33,519
code and the finder was the reason of

00:14:30,940 --> 00:14:35,920
this and so this is the first approach

00:14:33,519 --> 00:14:39,040
we delivered to the OpenStack community

00:14:35,920 --> 00:14:42,269
which enables enables normal functions

00:14:39,040 --> 00:14:47,170
normal physical functions armed service

00:14:42,269 --> 00:14:49,389
we found the reason why virtual machines

00:14:47,170 --> 00:14:52,540
when when Noah tries to create her

00:14:49,389 --> 00:14:56,589
virtual machines it will use it is

00:14:52,540 --> 00:15:00,760
through the libvirt API to create a kvm

00:14:56,589 --> 00:15:02,889
virtual machines but the door code is

00:15:00,760 --> 00:15:05,889
developed and tested only on

00:15:02,889 --> 00:15:09,119
x86 platforms so the virtual machine

00:15:05,889 --> 00:15:11,829
configurations just done the work on x64

00:15:09,119 --> 00:15:15,639
for example the default against the

00:15:11,829 --> 00:15:19,119
controller is is the hard-coded to ide

00:15:15,639 --> 00:15:22,509
devices so ID is Alexei standardized

00:15:19,119 --> 00:15:25,179
it's not supported on new platforms like

00:15:22,509 --> 00:15:26,739
a arc 64 so the virtual machine just

00:15:25,179 --> 00:15:30,309
that are in the work that cannot be

00:15:26,739 --> 00:15:32,439
launched so we changed the change rate

00:15:30,309 --> 00:15:35,949
of the deported divided the 40's

00:15:32,439 --> 00:15:38,649
controllers to us kasi and and it works

00:15:35,949 --> 00:15:40,959
on a toxic people so they say the first

00:15:38,649 --> 00:15:45,629
approach and after applying this patch

00:15:40,959 --> 00:15:45,629
the basic functions of Noah works

00:15:46,619 --> 00:15:52,749
another pensioner I want to introduce

00:15:48,669 --> 00:15:54,639
these about the ironic so ironic to

00:15:52,749 --> 00:16:00,369
support a multi architecture deployment

00:15:54,639 --> 00:16:03,939
of ironic services so ironic is bare

00:16:00,369 --> 00:16:08,889
metal provisioning service of OpenStack

00:16:03,939 --> 00:16:11,559
so for example if you have already set

00:16:08,889 --> 00:16:14,459
up OpenStack Claudine's but you want to

00:16:11,559 --> 00:16:16,989
expand this capability you buy some new

00:16:14,459 --> 00:16:21,610
service and want to deploy see service

00:16:16,989 --> 00:16:23,559
as a computer node or networking node so

00:16:21,610 --> 00:16:26,529
normally you need to install operating

00:16:23,559 --> 00:16:29,230
systems to install services and design

00:16:26,529 --> 00:16:31,600
configuring configure services sources

00:16:29,230 --> 00:16:35,799
of our tedious jobs so what ironic does

00:16:31,600 --> 00:16:38,889
is to deploy all these services or the

00:16:35,799 --> 00:16:42,160
bare metal machines automatically so

00:16:38,889 --> 00:16:44,499
ironically is also a OpenStack services

00:16:42,160 --> 00:16:46,660
so it which means it you can use

00:16:44,499 --> 00:16:50,470
OpenStack to deploy OpenStack this is

00:16:46,660 --> 00:16:52,679
very convenient policy as the 11 missing

00:16:50,470 --> 00:16:56,559
missing things in current

00:16:52,679 --> 00:16:59,879
implementations that the the ironic

00:16:56,559 --> 00:17:04,480
services current code can only deploy

00:16:59,879 --> 00:17:08,319
x86 servers so if you want to use ironic

00:17:04,480 --> 00:17:10,829
serve to deploy other architectures such

00:17:08,319 --> 00:17:13,500
as a are 64 you need to change the

00:17:10,829 --> 00:17:16,449
configurations and restart the service

00:17:13,500 --> 00:17:19,179
so but after you change this

00:17:16,449 --> 00:17:21,819
change these configurations this ironic

00:17:19,179 --> 00:17:28,659
service can only deploy a are 64 notes

00:17:21,819 --> 00:17:32,440
so this is very inflexible but so so we

00:17:28,659 --> 00:17:35,830
make to propose this patch to community

00:17:32,440 --> 00:17:39,909
to to support a general solutions so you

00:17:35,830 --> 00:17:41,440
can use ironically to deploy a hybrid to

00:17:39,909 --> 00:17:44,590
deploy a clouding with hybrid

00:17:41,440 --> 00:17:49,450
architectures so for example you it'll

00:17:44,590 --> 00:17:52,929
make sense to build a coding with x86

00:17:49,450 --> 00:17:56,289
computer nodes and use a arca 64 as the

00:17:52,929 --> 00:18:00,730
storage nodes as this in make sense but

00:17:56,289 --> 00:18:03,639
if you use current / usually and the old

00:18:00,730 --> 00:18:05,740
code of ironic criticism this is some

00:18:03,639 --> 00:18:08,169
problems because you need to change your

00:18:05,740 --> 00:18:13,149
configurations to deploy them one by one

00:18:08,169 --> 00:18:16,269
or so this is not good so this purchase

00:18:13,149 --> 00:18:18,840
for this purpose the policies Paris this

00:18:16,269 --> 00:18:22,269
country is a new feature to the ironical

00:18:18,840 --> 00:18:25,330
communities so it costs a very long time

00:18:22,269 --> 00:18:30,130
so it's still under reviewing so in fact

00:18:25,330 --> 00:18:32,710
this reflects a difficult is that we are

00:18:30,130 --> 00:18:35,769
facing when we doing up streams because

00:18:32,710 --> 00:18:37,960
the community are not very familiar are

00:18:35,769 --> 00:18:41,139
still not very familiar with the x64

00:18:37,960 --> 00:18:43,929
architectures so most of the code and

00:18:41,139 --> 00:18:47,769
most of their implementations are still

00:18:43,929 --> 00:18:51,659
based on the x86 servers because for

00:18:47,769 --> 00:18:54,269
example the sea is only for x86 so the

00:18:51,659 --> 00:19:00,340
developers or even some of the

00:18:54,269 --> 00:19:02,919
maintenance just as wonders why we need

00:19:00,340 --> 00:19:06,519
these new features what can you bring

00:19:02,919 --> 00:19:12,039
brings a do-gooder too late to the

00:19:06,519 --> 00:19:14,980
current open OpenStack community so this

00:19:12,039 --> 00:19:19,299
is something because there they don't

00:19:14,980 --> 00:19:21,309
have a are 64 servers so they still

00:19:19,299 --> 00:19:24,490
cannot validate here for our code it

00:19:21,309 --> 00:19:27,879
does works so this is 11 when difficulty

00:19:24,490 --> 00:19:29,370
we are facing when doing up streams for

00:19:27,879 --> 00:19:32,210
er6 before

00:19:29,370 --> 00:19:34,559
artisans are now changing so the

00:19:32,210 --> 00:19:38,190
acceptance of the OpenStack community

00:19:34,559 --> 00:19:41,400
raffle for a Ark 64 service now going up

00:19:38,190 --> 00:19:45,540
so we are glad to to cici's cheese

00:19:41,400 --> 00:19:49,230
changes another picture I want to

00:19:45,540 --> 00:19:51,570
introduce is the last one about self so

00:19:49,230 --> 00:19:57,330
because of our union serve as the back

00:19:51,570 --> 00:19:59,640
back end of our storage service object

00:19:57,330 --> 00:20:04,500
storage or Brock storage or yourself as

00:19:59,640 --> 00:20:08,420
the back end so we we do some

00:20:04,500 --> 00:20:11,490
optimizations for for self storage's

00:20:08,420 --> 00:20:14,670
this patch is about to optimize the self

00:20:11,490 --> 00:20:17,850
hash algorithms because every heavy

00:20:14,670 --> 00:20:20,400
objects are hashed so for for quick look

00:20:17,850 --> 00:20:22,380
ups but the hashing algorithms that we

00:20:20,400 --> 00:20:24,770
found the code is not very good so we

00:20:22,380 --> 00:20:27,750
just change you to some of the code and

00:20:24,770 --> 00:20:31,290
change the code and the verified on both

00:20:27,750 --> 00:20:33,540
x86 and x64 and we found that after

00:20:31,290 --> 00:20:36,059
their organization the performance gain

00:20:33,540 --> 00:20:39,600
on our core 64 is good is about twenty

00:20:36,059 --> 00:20:43,309
percent performance gains so we propose

00:20:39,600 --> 00:20:46,470
that is patch and it's already emerged

00:20:43,309 --> 00:20:50,640
besides is this list as there are many

00:20:46,470 --> 00:20:53,690
more other patches and for a Ark 64 and

00:20:50,640 --> 00:20:56,480
not listed here so for example for

00:20:53,690 --> 00:21:00,740
networking audiences this is the

00:20:56,480 --> 00:21:04,190
OpenStack opened a lighter plug in 4 for

00:21:00,740 --> 00:21:11,700
Neutron and our Oslo which is a common

00:21:04,190 --> 00:21:14,429
common module for OpenStack next I want

00:21:11,700 --> 00:21:16,980
to introduce brief introduction of the

00:21:14,429 --> 00:21:21,450
how we set up our testing environment

00:21:16,980 --> 00:21:25,650
and how we verify that our 2222

00:21:21,450 --> 00:21:29,160
development and the two streams so the

00:21:25,650 --> 00:21:32,160
left apart is so basically we are using

00:21:29,160 --> 00:21:35,910
devstack and to deploy and the two

00:21:32,160 --> 00:21:38,759
development OpenStack because dev

00:21:35,910 --> 00:21:40,829
sterically is a standard away for the

00:21:38,759 --> 00:21:43,229
photo to this kind of job is very

00:21:40,829 --> 00:21:47,089
convenient you just create a convertible

00:21:43,229 --> 00:21:52,739
fire and staggered Sh just a whit fort

00:21:47,089 --> 00:21:55,889
in wood for it works and so most of the

00:21:52,739 --> 00:21:59,399
time the for convenience we deploy or of

00:21:55,889 --> 00:22:03,629
servicing one in one host so you want

00:21:59,399 --> 00:22:07,199
deployment but for some real-life cases

00:22:03,629 --> 00:22:09,359
we will also deploy different service in

00:22:07,199 --> 00:22:12,539
different notice so to set up a multi

00:22:09,359 --> 00:22:15,209
host development environment to to

00:22:12,539 --> 00:22:22,279
verify that everything just works in

00:22:15,209 --> 00:22:25,979
real life and in in all cases so this is

00:22:22,279 --> 00:22:28,829
the OpenStack opens their enablement

00:22:25,979 --> 00:22:35,129
patches and the testing environment we

00:22:28,829 --> 00:22:39,349
are using for this purpose okay next x

00:22:35,129 --> 00:22:39,349
and e to introduce the developer cloud

00:22:44,980 --> 00:22:50,559
so the the first developer cloud that we

00:22:48,309 --> 00:22:53,200
set up was based in a lab that we have

00:22:50,559 --> 00:22:55,540
in austin and the the early work was

00:22:53,200 --> 00:22:58,630
kind of done by some guess I'd call them

00:22:55,540 --> 00:23:00,880
trailblazers in leg the main guys were

00:22:58,630 --> 00:23:03,760
playing Andrew McDermott and Michael

00:23:00,880 --> 00:23:05,169
Hudson and Clark Laughlin and they

00:23:03,760 --> 00:23:08,559
basically spent a lot of time just

00:23:05,169 --> 00:23:12,640
figuring out how can we run OpenStack on

00:23:08,559 --> 00:23:14,679
a arch 64 and they got that to a pretty

00:23:12,640 --> 00:23:17,860
decent place and then I think probably

00:23:14,679 --> 00:23:21,910
around last December so yasin got tasked

00:23:17,860 --> 00:23:24,400
with actually deploying this on several

00:23:21,910 --> 00:23:25,660
servers within our Colo and trying to

00:23:24,400 --> 00:23:28,299
set something up where we could put

00:23:25,660 --> 00:23:30,870
users on in and what we've got deployed

00:23:28,299 --> 00:23:33,970
right now there is kind of what I guess

00:23:30,870 --> 00:23:36,070
is simplified is calling a kind of a

00:23:33,970 --> 00:23:39,250
private cloud so we've got OpenStack

00:23:36,070 --> 00:23:42,070
deployed within our labs network and we

00:23:39,250 --> 00:23:47,740
managed VMs for users on their behalf

00:23:42,070 --> 00:23:49,929
and it's worked well for us so far and

00:23:47,740 --> 00:23:51,640
we actually have a lot of important

00:23:49,929 --> 00:23:55,870
projects they've taken advantage of this

00:23:51,640 --> 00:24:00,640
and been able to port features to arm

00:23:55,870 --> 00:24:02,799
for us but with this experience we kind

00:24:00,640 --> 00:24:04,270
of set around a few months ago in like

00:24:02,799 --> 00:24:06,490
you know we need to do something better

00:24:04,270 --> 00:24:13,299
and we've come up with this kind of idea

00:24:06,490 --> 00:24:15,160
what we called our v2 cloud this clouds

00:24:13,299 --> 00:24:17,380
a lot more sophisticated than the older

00:24:15,160 --> 00:24:19,150
one so we need to work on Newton and you

00:24:17,380 --> 00:24:20,559
have heard in the previous slides all

00:24:19,150 --> 00:24:25,030
these kind of features that we were

00:24:20,559 --> 00:24:26,860
working on up streaming so for my job I

00:24:25,030 --> 00:24:28,630
was kind of chasing a moving target for

00:24:26,860 --> 00:24:32,740
several months Newton was under

00:24:28,630 --> 00:24:34,360
development so I kind of focused on at

00:24:32,740 --> 00:24:36,010
least up front figuring out how to

00:24:34,360 --> 00:24:38,410
automate this to where I could tear it

00:24:36,010 --> 00:24:43,750
down quickly do a complete redeployment

00:24:38,410 --> 00:24:45,460
or just do a small update so my team is

00:24:43,750 --> 00:24:47,410
systems team we tend to manage

00:24:45,460 --> 00:24:49,630
everything with ansible within linaro so

00:24:47,410 --> 00:24:52,090
we use danceable for this we came up

00:24:49,630 --> 00:24:54,070
with a pretty good process to be able to

00:24:52,090 --> 00:24:57,170
you know iterate on this and get

00:24:54,070 --> 00:24:59,580
something working the

00:24:57,170 --> 00:25:01,080
marcin was saying earlier part of this

00:24:59,580 --> 00:25:03,450
since we didn't really have packages at

00:25:01,080 --> 00:25:05,190
the time i used python virtual

00:25:03,450 --> 00:25:07,290
environments and kind of make tar balls

00:25:05,190 --> 00:25:08,910
of these it actually works kind of nice

00:25:07,290 --> 00:25:11,280
and even in a production environment

00:25:08,910 --> 00:25:13,530
because each one of these is it's almost

00:25:11,280 --> 00:25:15,960
like a you know super simplified

00:25:13,530 --> 00:25:17,940
container or chroot so I can you know

00:25:15,960 --> 00:25:21,930
just put Nova down and it's not going to

00:25:17,940 --> 00:25:24,600
step on neutron or whatnot and all that

00:25:21,930 --> 00:25:27,990
work has culminated in a cloud that we

00:25:24,600 --> 00:25:29,370
now have in Cambridge and this is a real

00:25:27,990 --> 00:25:31,770
cloud I mean this is what you would

00:25:29,370 --> 00:25:34,680
expect from OpenStack where there's a

00:25:31,770 --> 00:25:36,660
user interface provided by horizon where

00:25:34,680 --> 00:25:38,550
you can log in and manage your own vm

00:25:36,660 --> 00:25:42,570
you can manage your own private

00:25:38,550 --> 00:25:46,230
networking we're using open V switch to

00:25:42,570 --> 00:25:50,520
manage our internal what we call tenant

00:25:46,230 --> 00:25:54,210
networks you also access this now to

00:25:50,520 --> 00:25:57,180
like the classic OpenStack CL is from

00:25:54,210 --> 00:26:01,680
from your personal laptop talking

00:25:57,180 --> 00:26:03,300
through public API s and the features of

00:26:01,680 --> 00:26:05,970
this are really kind of handy now with

00:26:03,300 --> 00:26:08,070
like something like stuff and all these

00:26:05,970 --> 00:26:10,440
api is it works good for both din so

00:26:08,070 --> 00:26:11,850
from the user it's easy for you to use

00:26:10,440 --> 00:26:14,670
and do what you want now you don't have

00:26:11,850 --> 00:26:18,030
to come to me to ask me to like you know

00:26:14,670 --> 00:26:19,650
reboot your vm or something but 40 the

00:26:18,030 --> 00:26:22,470
management side of things we have nice

00:26:19,650 --> 00:26:26,180
features now with with say SEF is our

00:26:22,470 --> 00:26:28,800
back-end i can actually migrate a vm

00:26:26,180 --> 00:26:30,450
like a live migration so you don't

00:26:28,800 --> 00:26:32,760
notice this and i can put you on another

00:26:30,450 --> 00:26:35,970
host and then we can just take that host

00:26:32,760 --> 00:26:39,630
offline and do some kind of upgrade at a

00:26:35,970 --> 00:26:41,190
hard disk or whatever and your vm keeps

00:26:39,630 --> 00:26:43,380
running and with SEF and all the

00:26:41,190 --> 00:26:45,840
redundant storage everything just stays

00:26:43,380 --> 00:26:48,600
running so we can iterate really quickly

00:26:45,840 --> 00:26:51,270
and no one has to notice we're like now

00:26:48,600 --> 00:26:52,830
with what i have in austin every now and

00:26:51,270 --> 00:26:54,750
then i have to politely figure out who's

00:26:52,830 --> 00:26:56,490
all on one system and send them an email

00:26:54,750 --> 00:27:00,990
and hey do you guys mind if I take you

00:26:56,490 --> 00:27:03,920
offline on Saturday for an hour so talk

00:27:00,990 --> 00:27:07,590
we kind of talked about the this big

00:27:03,920 --> 00:27:08,760
amazing cloud now here is a actual

00:27:07,590 --> 00:27:10,830
picture of it

00:27:08,760 --> 00:27:14,040
probably isn't quite as impressive as

00:27:10,830 --> 00:27:16,740
what the presentation was leading up to

00:27:14,040 --> 00:27:20,880
but it's actually pretty neat so we've

00:27:16,740 --> 00:27:23,700
got ten overdrive reveille servers we

00:27:20,880 --> 00:27:29,580
have to rev bees and we've got a DZ Row

00:27:23,700 --> 00:27:31,470
two that are running these are the cases

00:27:29,580 --> 00:27:34,620
that we put them in the lava lab guys

00:27:31,470 --> 00:27:37,200
have kind of put together a nice little

00:27:34,620 --> 00:27:39,120
one UK store these they're loaded up

00:27:37,200 --> 00:27:42,930
with a bunch of ram and a bunch of hard

00:27:39,120 --> 00:27:45,210
disks so the the RAM helps for the Nova

00:27:42,930 --> 00:27:48,780
bm's that were running and the hard

00:27:45,210 --> 00:27:50,070
disks help for ourself cluster and as

00:27:48,780 --> 00:27:52,560
you can see there's a little bit of

00:27:50,070 --> 00:27:55,950
extra space in there so there's more

00:27:52,560 --> 00:27:58,920
servers to come and I'll hand this off

00:27:55,950 --> 00:28:01,160
to Hema to talk about our upcoming next

00:27:58,920 --> 00:28:01,160
steps

00:28:05,660 --> 00:28:12,320
so as you can see we've come a long way

00:28:08,660 --> 00:28:15,110
in a relatively short period of time but

00:28:12,320 --> 00:28:17,540
this is just the beginning so we have

00:28:15,110 --> 00:28:21,050
what I would call a small cloud compared

00:28:17,540 --> 00:28:23,960
to things out there running and we can

00:28:21,050 --> 00:28:27,260
start in projects to people so they can

00:28:23,960 --> 00:28:30,110
start working on our cloud however we

00:28:27,260 --> 00:28:32,930
need to automate the user management so

00:28:30,110 --> 00:28:35,780
that and the era and I don't have to be

00:28:32,930 --> 00:28:38,300
there typing commands to be able to

00:28:35,780 --> 00:28:41,150
enable users to use the cloud we also

00:28:38,300 --> 00:28:43,820
have to fix back to four two four six

00:28:41,150 --> 00:28:45,710
two and I put this back here because

00:28:43,820 --> 00:28:49,910
this is the bag that will enable us to

00:28:45,710 --> 00:28:52,580
actually do a hot plugging of volumes to

00:28:49,910 --> 00:28:54,860
our cloud so that everyone can follow

00:28:52,580 --> 00:28:56,720
that and we're also going to test for

00:28:54,860 --> 00:28:59,720
interoperability on this cloud so that

00:28:56,720 --> 00:29:03,170
we are sure that a workload that can run

00:28:59,720 --> 00:29:05,900
on an x86 cloud exclude white cloud

00:29:03,170 --> 00:29:08,900
because not all x86 clouds are the same

00:29:05,900 --> 00:29:10,610
can also run on our cloud and it will be

00:29:08,900 --> 00:29:12,170
seamless for the end user so the end

00:29:10,610 --> 00:29:14,930
user doesn't really need to know that

00:29:12,170 --> 00:29:18,170
they're running on an a at 64 cloud

00:29:14,930 --> 00:29:20,150
right we are also going to do a full run

00:29:18,170 --> 00:29:22,130
of upstream test suite just to make sure

00:29:20,150 --> 00:29:24,200
that we're not missing anything on this

00:29:22,130 --> 00:29:26,390
cloud before it goes to production and

00:29:24,200 --> 00:29:28,490
we do need to finish documentation of

00:29:26,390 --> 00:29:31,610
day of the reference architecture which

00:29:28,490 --> 00:29:33,800
I'm going to talk about next then I will

00:29:31,610 --> 00:29:35,660
consider this cloud production ready and

00:29:33,800 --> 00:29:37,760
we will be able to stack it intends to

00:29:35,660 --> 00:29:41,450
people so that they can start working on

00:29:37,760 --> 00:29:42,950
it this is the reference architecture so

00:29:41,450 --> 00:29:47,090
this is what the software layout looks

00:29:42,950 --> 00:29:49,820
like in our cloud today we have an entry

00:29:47,090 --> 00:29:51,830
router you know anyone from the internet

00:29:49,820 --> 00:29:54,830
would go through this entry rotor and

00:29:51,830 --> 00:29:57,350
they would get access to their tenants

00:29:54,830 --> 00:30:01,460
private network where their vient would

00:29:57,350 --> 00:30:04,040
sit we have one server dies that we call

00:30:01,460 --> 00:30:07,400
the api controller which has all the api

00:30:04,040 --> 00:30:09,830
services deployed we have a data

00:30:07,400 --> 00:30:12,190
controller which has rabbit on mysql on

00:30:09,830 --> 00:30:14,200
it and we do have other networking

00:30:12,190 --> 00:30:15,640
services on the network

00:30:14,200 --> 00:30:17,500
controller and then we have the computer

00:30:15,640 --> 00:30:21,610
knows right where the bm's leaf and

00:30:17,500 --> 00:30:24,670
where all the storage is installed as

00:30:21,610 --> 00:30:26,950
you can see safe is distributed across

00:30:24,670 --> 00:30:29,140
all those nodes so we have some monitors

00:30:26,950 --> 00:30:30,730
we have some always DS and the whole

00:30:29,140 --> 00:30:33,940
thing seems to be holding up pretty

00:30:30,730 --> 00:30:35,800
nicely so I'm happy with that this

00:30:33,940 --> 00:30:37,600
reference architecture is where you will

00:30:35,800 --> 00:30:40,180
be able to deploy if you go and use our

00:30:37,600 --> 00:30:41,800
ansible for deploying your club you will

00:30:40,180 --> 00:30:43,330
need to choose or you will be able to

00:30:41,800 --> 00:30:45,940
choose in the future where you want to

00:30:43,330 --> 00:30:48,490
put your services and we need to do some

00:30:45,940 --> 00:30:51,100
work as well and being able to scale

00:30:48,490 --> 00:30:53,320
this so we need to do a lot of testing

00:30:51,100 --> 00:30:55,840
around being able to scale each of the

00:30:53,320 --> 00:31:02,350
services so that you can have clusters

00:30:55,840 --> 00:31:05,410
things and now i will take mildly

00:31:02,350 --> 00:31:08,860
narahat off and put on my desk or hard

00:31:05,410 --> 00:31:10,660
right interoperability so as part of the

00:31:08,860 --> 00:31:12,340
deaf core committee or the interrupt

00:31:10,660 --> 00:31:16,570
working group because we changed our

00:31:12,340 --> 00:31:18,730
name like two weeks ago we've been

00:31:16,570 --> 00:31:21,780
working on making sure that users of

00:31:18,730 --> 00:31:24,850
clouds can actually run their workloads

00:31:21,780 --> 00:31:26,620
seamlessly on different clouds so we

00:31:24,850 --> 00:31:29,010
have out there people that are using

00:31:26,620 --> 00:31:33,460
cloud that when I provide their services

00:31:29,010 --> 00:31:35,260
on different openstack cloud so how do

00:31:33,460 --> 00:31:38,380
you make sure that those people do not

00:31:35,260 --> 00:31:40,840
carry on over head of you no difference

00:31:38,380 --> 00:31:43,330
in a be is on the different clouds right

00:31:40,840 --> 00:31:44,770
that's what def call or interrupt

00:31:43,330 --> 00:31:46,420
working group is trying to make sure

00:31:44,770 --> 00:31:49,450
doesn't happen so we want to make sure

00:31:46,420 --> 00:31:51,730
that when someone runs a workload on an

00:31:49,450 --> 00:31:54,340
openstack cloud they get the same

00:31:51,730 --> 00:31:58,360
experience no matter what the provider

00:31:54,340 --> 00:32:00,580
is and the rebstock project is the

00:31:58,360 --> 00:32:02,890
enabler for being able to run all those

00:32:00,580 --> 00:32:04,750
tests so if you want to go and check

00:32:02,890 --> 00:32:07,030
what this project is about you will see

00:32:04,750 --> 00:32:09,280
what the features we include and what

00:32:07,030 --> 00:32:12,730
the api's what API is were actually

00:32:09,280 --> 00:32:15,940
interested in this it keeps growing over

00:32:12,730 --> 00:32:19,770
time so basically what we're going to do

00:32:15,940 --> 00:32:22,510
if we if we consider all those clouds

00:32:19,770 --> 00:32:24,400
x86 except for these so they will be our

00:32:22,510 --> 00:32:26,750
cloud we want to make sure that this

00:32:24,400 --> 00:32:28,370
workload that this user is running

00:32:26,750 --> 00:32:31,100
it's going to be seamlessly run on

00:32:28,370 --> 00:32:33,590
Oliver and we will present the findings

00:32:31,100 --> 00:32:39,620
of this testing at audience in three

00:32:33,590 --> 00:32:41,570
weeks so which are far here are some

00:32:39,620 --> 00:32:44,330
links and references to everything we've

00:32:41,570 --> 00:32:47,930
talked about and I think this closes our

00:32:44,330 --> 00:32:49,640
presentation so I wonder if anyone has

00:32:47,930 --> 00:32:53,620
any questions that we could address

00:32:49,640 --> 00:32:53,620
because I think we have time for that

00:32:55,420 --> 00:32:58,420
maybe

00:33:14,169 --> 00:33:37,470
questions are you just so odd what's

00:33:33,100 --> 00:33:37,470
that okay

00:33:42,800 --> 00:33:49,430
regarding the hot plug what component

00:33:46,490 --> 00:33:52,640
you guys are looking at so it's like iOS

00:33:49,430 --> 00:33:55,040
IPC I right now you use the word iom Mao

00:33:52,640 --> 00:33:59,300
is not supporting her blog and also

00:33:55,040 --> 00:34:04,250
memory and CPU and rahat is proposing to

00:33:59,300 --> 00:34:07,340
use a pearl I opt I for audio device for

00:34:04,250 --> 00:34:09,679
the gas vm so if that's a problem so

00:34:07,340 --> 00:34:13,940
maybe you guys can help with the

00:34:09,679 --> 00:34:15,230
discussion at the qme community so I

00:34:13,940 --> 00:34:18,260
haven't not sure I understand the

00:34:15,230 --> 00:34:21,530
question so what I mean is what kind of

00:34:18,260 --> 00:34:23,390
harp component there was a slice talking

00:34:21,530 --> 00:34:26,780
about you guys have issue with hot plug

00:34:23,390 --> 00:34:31,040
oh yeah yeah yeah so which component you

00:34:26,780 --> 00:34:33,050
have problem with we believe that the

00:34:31,040 --> 00:34:36,050
problem we have is that we are trying to

00:34:33,050 --> 00:34:39,500
use a package version of leopard that is

00:34:36,050 --> 00:34:42,770
on debian that is not the same as the

00:34:39,500 --> 00:34:45,170
one that's currently on a boon to so i

00:34:42,770 --> 00:34:47,660
do believe that the prom we have is with

00:34:45,170 --> 00:34:51,620
packaging but we're still investigating

00:34:47,660 --> 00:34:53,929
if you want to go to the back and read

00:34:51,620 --> 00:34:56,390
through that you will find all our

00:34:53,929 --> 00:34:58,520
findings so all our testing is described

00:34:56,390 --> 00:35:00,320
there and maybe we couldn't we could

00:34:58,520 --> 00:35:01,820
talk about this later and try to figure

00:35:00,320 --> 00:35:04,670
out if you can help us solve that

00:35:01,820 --> 00:35:06,110
because there might be some some hog on

00:35:04,670 --> 00:35:07,700
some of the packages that are published

00:35:06,110 --> 00:35:09,110
out there in the different districts and

00:35:07,700 --> 00:35:11,780
that's why we're seeing this difference

00:35:09,110 --> 00:35:15,980
okay so the second thing regarding the

00:35:11,780 --> 00:35:17,780
like Aldi prod the upstream version we

00:35:15,980 --> 00:35:19,460
have fixed a lot of issues you guys

00:35:17,780 --> 00:35:22,550
mentioned so I don't know which version

00:35:19,460 --> 00:35:26,030
you guys we are running version 2.2

00:35:22,550 --> 00:35:28,340
point 0 okay and we have that one on the

00:35:26,030 --> 00:35:30,230
liner overlay so we were we were trying

00:35:28,340 --> 00:35:33,020
to deploy with two point one point zero

00:35:30,230 --> 00:35:35,510
but we had a problem that was kind of

00:35:33,020 --> 00:35:38,150
unsurmountable so we upgraded it to two

00:35:35,510 --> 00:35:41,900
point two point zero and and we're up

00:35:38,150 --> 00:35:44,480
and running nicely okay yeah cuz I'll do

00:35:41,900 --> 00:35:47,800
serial console issue we have seen that

00:35:44,480 --> 00:35:50,830
and also scott the issue we resulted and

00:35:47,800 --> 00:35:55,000
going forward we fix

00:35:50,830 --> 00:35:57,370
okay III those are has been upstream to

00:35:55,000 --> 00:36:00,400
the depot so maybe you guys can try that

00:35:57,370 --> 00:36:02,290
and see if that yes I definitely want to

00:36:00,400 --> 00:36:03,820
talk to you more after this session and

00:36:02,290 --> 00:36:06,190
we need to connect and make sure that

00:36:03,820 --> 00:36:07,630
we're in seeing so we don't miss any

00:36:06,190 --> 00:36:10,150
great features that you're putting out

00:36:07,630 --> 00:36:12,010
there and we have them tested so one of

00:36:10,150 --> 00:36:13,780
the next steps for this project is to

00:36:12,010 --> 00:36:15,580
set up some CI for the reference

00:36:13,780 --> 00:36:18,130
architecture right I want to make sure

00:36:15,580 --> 00:36:20,530
that when something changes on the full

00:36:18,130 --> 00:36:22,570
stack we have it covered and we tested

00:36:20,530 --> 00:36:26,350
and all the functionality is still

00:36:22,570 --> 00:36:28,360
working fine and I is obviously live

00:36:26,350 --> 00:36:30,220
with this a big part of that anything

00:36:28,360 --> 00:36:32,080
changes in levert I want to test our

00:36:30,220 --> 00:36:34,470
reference architecture still holds up

00:36:32,080 --> 00:36:34,470
with them

00:36:41,819 --> 00:36:48,890
no over there Martin Jung has a question

00:36:49,219 --> 00:36:54,869
just a quick observation that bug 2462

00:36:52,829 --> 00:36:57,719
seems to be a problem with a farmer

00:36:54,869 --> 00:37:00,809
configuration it looks like it's just a

00:36:57,719 --> 00:37:04,049
permission error from your a polymer

00:37:00,809 --> 00:37:06,180
config so maybe someone here is a expert

00:37:04,049 --> 00:37:08,279
in a Palmer I only know selinux but if

00:37:06,180 --> 00:37:10,559
someone knows our farmer then that's

00:37:08,279 --> 00:37:11,999
probably what that bug is yeah that's

00:37:10,559 --> 00:37:14,009
why i put the back there because i was

00:37:11,999 --> 00:37:17,999
hoping that someone will open it and go

00:37:14,009 --> 00:37:20,640
ah there you go I think the problem is

00:37:17,999 --> 00:37:22,289
someone here knows a Palmer rules you

00:37:20,640 --> 00:37:23,759
want to go and take a look and update

00:37:22,289 --> 00:37:28,709
them because I think they're not we will

00:37:23,759 --> 00:37:36,509
do that ok thank you all right any other

00:37:28,709 --> 00:37:38,579
question or helping hand yep I might

00:37:36,509 --> 00:37:41,099
have missed some details during the

00:37:38,579 --> 00:37:44,039
presentation when you talked about multi

00:37:41,099 --> 00:37:49,529
arch deployment and I want I'm wondering

00:37:44,039 --> 00:37:52,559
whether this is involved at all in the

00:37:49,529 --> 00:37:56,130
cloud interoperability that you

00:37:52,559 --> 00:37:58,109
mentioned it is and it is important

00:37:56,130 --> 00:38:00,239
because depending on the compute nodes

00:37:58,109 --> 00:38:01,380
architecture you can run one image or

00:38:00,239 --> 00:38:03,890
another but I've been having

00:38:01,380 --> 00:38:07,170
conversations this week about running

00:38:03,890 --> 00:38:09,150
x86 images on our cloud with the core OS

00:38:07,170 --> 00:38:11,609
upstream developer that I was studying

00:38:09,150 --> 00:38:13,469
to yesterday so this is an avenue i

00:38:11,609 --> 00:38:14,880
would like to explore so i would like to

00:38:13,469 --> 00:38:18,029
make sure obviously you won't have the

00:38:14,880 --> 00:38:20,729
hardware virtualization help so the

00:38:18,029 --> 00:38:24,269
images will be probably slower but we

00:38:20,729 --> 00:38:27,449
could still potentially run x86 images

00:38:24,269 --> 00:38:30,359
on a are 64 servers but we haven't

00:38:27,449 --> 00:38:33,319
tested that yet I don't think evil have

00:38:30,359 --> 00:38:33,319
you guys tested that

00:38:35,070 --> 00:38:45,520
you want to talk come up here when it

00:38:43,060 --> 00:38:47,890
comes from architecture I think that one

00:38:45,520 --> 00:38:50,740
of things which not yet tested but would

00:38:47,890 --> 00:38:54,940
be nice to test will be to run and b7

00:38:50,740 --> 00:38:57,520
images West images because sometimes

00:38:54,940 --> 00:39:00,490
like if you can if you have something

00:38:57,520 --> 00:39:03,490
which blocks you and all you have is

00:39:00,490 --> 00:39:07,690
machine with two gigs of memory having

00:39:03,490 --> 00:39:13,589
cloud for v 7 and 10 gigs of ram can

00:39:07,690 --> 00:39:15,910
sometimes curve to the right all right

00:39:13,589 --> 00:39:18,040
does that answer your question yep

00:39:15,910 --> 00:39:20,970
thanks all right thank you any more

00:39:18,040 --> 00:39:20,970
questions over here

00:39:24,690 --> 00:39:30,089
so how many users have you had coming

00:39:27,630 --> 00:39:37,020
through the developer cloud so far how

00:39:30,089 --> 00:39:41,480
many uses we have far alright maybe you

00:39:37,020 --> 00:39:45,480
guys can hear me we've had almost 400

00:39:41,480 --> 00:39:48,450
requests for access about a hundred

00:39:45,480 --> 00:39:51,599
close to a hundred users who've come on

00:39:48,450 --> 00:39:54,210
and off and we're just flat out of

00:39:51,599 --> 00:39:56,310
hardware right so the thing we're

00:39:54,210 --> 00:39:57,900
begging right now is if you have some

00:39:56,310 --> 00:40:00,359
spare hardware let us know because we

00:39:57,900 --> 00:40:02,730
could throw it into that and get that up

00:40:00,359 --> 00:40:06,150
and running but but requests now I think

00:40:02,730 --> 00:40:08,670
we've just approached 400 it's

00:40:06,150 --> 00:40:10,890
interesting in that if you look at the

00:40:08,670 --> 00:40:12,720
breakdown geographically it's thirty

00:40:10,890 --> 00:40:15,140
percent Asia thirty percent Europe

00:40:12,720 --> 00:40:19,230
thirty percent North America we have

00:40:15,140 --> 00:40:22,589
breaks out really nicely fifteen twenty

00:40:19,230 --> 00:40:24,180
percent is echo damia open source

00:40:22,589 --> 00:40:26,250
projects is probably about thirty

00:40:24,180 --> 00:40:28,490
percent and the rest are all commercial

00:40:26,250 --> 00:40:31,500
companies that have a software business

00:40:28,490 --> 00:40:34,560
it's it's it's pretty interesting you

00:40:31,500 --> 00:40:36,780
have any observations for like the

00:40:34,560 --> 00:40:42,900
demographics or user pool or anything

00:40:36,780 --> 00:40:45,240
like that yeah that help so we will be

00:40:42,900 --> 00:40:47,760
delighted if anyone will help us fill

00:40:45,240 --> 00:40:50,880
that rock with more service right the

00:40:47,760 --> 00:40:52,560
most cpu they have the better so we can

00:40:50,880 --> 00:41:02,490
add the hard drives that's not a problem

00:40:52,560 --> 00:41:03,960
on the memory any more questions alright

00:41:02,490 --> 00:41:07,670
thank you very much everyone for your

00:41:03,960 --> 00:41:07,670
time and find us and talk to us

00:41:17,240 --> 00:41:19,300

YouTube URL: https://www.youtube.com/watch?v=P5xmaT6H3JE


