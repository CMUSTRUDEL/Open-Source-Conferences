Title: LAS16-105: Walkthrough of the EAS kernel adaptation to the Android Common Kernel
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-105: Walkthrough of the EAS kernel adaptation to the Android Common Kernel
Speakers:  Juri Lelli
Date: September 26, 2016

★ Session Description ★
Walkthrough of the EAS kernel adaptation to the Android Common Kernel.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-105
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-105/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:07,099 --> 00:00:14,460
thanks robot for for coming yeah I'm you

00:00:11,099 --> 00:00:18,180
really working at arm and basically last

00:00:14,460 --> 00:00:21,090
couple of years have been part of the es

00:00:18,180 --> 00:00:24,689
project and with it today I'm going to

00:00:21,090 --> 00:00:26,220
present you the modification with Basel

00:00:24,689 --> 00:00:30,859
II did it to the let's say their

00:00:26,220 --> 00:00:33,120
upstream version of this thing before

00:00:30,859 --> 00:00:35,489
you can actually land on the a droid

00:00:33,120 --> 00:00:37,380
come on colonel yeah you understand

00:00:35,489 --> 00:00:39,210
during the presentation what the main

00:00:37,380 --> 00:00:43,079
line I mean what are the different code

00:00:39,210 --> 00:00:49,920
lines and what does it this mean anyway

00:00:43,079 --> 00:00:53,489
let's start so since there is not really

00:00:49,920 --> 00:00:56,640
much time to actually talk about

00:00:53,489 --> 00:01:00,960
everything we need to talk I'll be quite

00:00:56,640 --> 00:01:03,049
briefly on introducing what es is so

00:01:00,960 --> 00:01:05,580
hopefully you already kind of

00:01:03,049 --> 00:01:07,320
comfortable with it it's probably not

00:01:05,580 --> 00:01:09,630
the first time you heard about it but if

00:01:07,320 --> 00:01:12,240
it is basically the high-level overview

00:01:09,630 --> 00:01:15,720
the recap what is it it's basically

00:01:12,240 --> 00:01:17,759
daddy of since you have a system

00:01:15,720 --> 00:01:19,320
topology so notion about that Walter

00:01:17,759 --> 00:01:21,420
your system and then you have some

00:01:19,320 --> 00:01:23,960
workloads that actually run on the

00:01:21,420 --> 00:01:27,210
system then you can combine the two

00:01:23,960 --> 00:01:29,549
information and visit the task scheduler

00:01:27,210 --> 00:01:31,770
can actually work combine those

00:01:29,549 --> 00:01:34,409
information to provide you frequency

00:01:31,770 --> 00:01:37,020
selection so OPP clock frequency

00:01:34,409 --> 00:01:40,680
selection CPU selections so where to

00:01:37,020 --> 00:01:43,680
shatter your task and also i decide i

00:01:40,680 --> 00:01:46,159
delayed selections and basically provide

00:01:43,680 --> 00:01:50,159
those three things at the same time it

00:01:46,159 --> 00:01:53,790
direct higher performance but still

00:01:50,159 --> 00:01:56,490
saving energy so the focus here for yes

00:01:53,790 --> 00:01:58,740
in general if all being basically

00:01:56,490 --> 00:02:01,590
trade-off between performances energy is

00:01:58,740 --> 00:02:04,530
not only performance oriented yeah

00:02:01,590 --> 00:02:11,250
that's basically a high-level review of

00:02:04,530 --> 00:02:13,130
this thing so that is a yes 0 by y here

00:02:11,250 --> 00:02:18,310
so why we need this kind of

00:02:13,130 --> 00:02:21,680
new thing and at the main point is that

00:02:18,310 --> 00:02:24,380
Linux there are like different subsystem

00:02:21,680 --> 00:02:28,540
working yes together but there is no

00:02:24,380 --> 00:02:31,340
real holistic entity that that the

00:02:28,540 --> 00:02:33,140
decisions in a drawing up way so we

00:02:31,340 --> 00:02:35,470
actually need it that we implemented a

00:02:33,140 --> 00:02:37,760
mechanism to do join our power

00:02:35,470 --> 00:02:42,770
management across the different

00:02:37,760 --> 00:02:45,260
subsystem of the colonel it also if you

00:02:42,770 --> 00:02:47,960
don't consider the energy expert it also

00:02:45,260 --> 00:02:51,220
gives you sensible the folds for

00:02:47,960 --> 00:02:54,260
performance considering different

00:02:51,220 --> 00:02:56,990
capacity different capacities like big

00:02:54,260 --> 00:02:59,980
little dicey metric systems and it's

00:02:56,990 --> 00:03:03,740
basically an option alternative to the

00:02:59,980 --> 00:03:05,900
the fold links scheduler CFS policy

00:03:03,740 --> 00:03:07,940
which is only trooper base so it also

00:03:05,900 --> 00:03:12,230
consider energy so it's basically in

00:03:07,940 --> 00:03:14,450
addition to the default policy and it

00:03:12,230 --> 00:03:19,610
gives you also a simplified Q interface

00:03:14,450 --> 00:03:22,250
so some level or tuning to get the

00:03:19,610 --> 00:03:24,500
basically the numbers you need to ship

00:03:22,250 --> 00:03:26,810
your product will be still required but

00:03:24,500 --> 00:03:29,000
that I mean the situation will be max

00:03:26,810 --> 00:03:34,700
improved a much simpler than before one

00:03:29,000 --> 00:03:38,780
CS gets widely adopted so basically what

00:03:34,700 --> 00:03:42,500
it gives you the possibility to 12 son

00:03:38,780 --> 00:03:45,890
coupling between a runtime aware user

00:03:42,500 --> 00:03:47,959
space and the colonel in well-defined

00:03:45,890 --> 00:03:51,790
ways ways so we basically also you'll

00:03:47,959 --> 00:03:55,310
find it nice and clean interface or API

00:03:51,790 --> 00:03:57,530
which user space in this time runtime

00:03:55,310 --> 00:04:01,000
and the can I can actually talk with

00:03:57,530 --> 00:04:06,800
each other and exchange information and

00:04:01,000 --> 00:04:12,230
yeah that's basically why yes has

00:04:06,800 --> 00:04:14,840
actually landed on the Android como so

00:04:12,230 --> 00:04:16,130
yeah it's actually not I mean this point

00:04:14,840 --> 00:04:20,060
about to stress this one because it's

00:04:16,130 --> 00:04:21,680
not I like a nice nice thing for us I

00:04:20,060 --> 00:04:24,080
mean that we develop the thing is I

00:04:21,680 --> 00:04:26,500
think it's nice thing for the protector

00:04:24,080 --> 00:04:28,900
system as a whole

00:04:26,500 --> 00:04:31,420
because basically we we raise little

00:04:28,900 --> 00:04:33,520
raised the bar from which you got to

00:04:31,420 --> 00:04:37,840
start to actually tune your system and

00:04:33,520 --> 00:04:41,140
to ship it and it's the focus is on my

00:04:37,840 --> 00:04:45,400
line so not right now what in few I mean

00:04:41,140 --> 00:04:48,730
few months a few years we get links to

00:04:45,400 --> 00:04:51,460
be already more ready to reuse for

00:04:48,730 --> 00:04:59,320
products so it's a big win for everybody

00:04:51,460 --> 00:05:01,680
I I think okay so what what has been the

00:04:59,320 --> 00:05:06,810
story so far so this thing that's really

00:05:01,680 --> 00:05:10,090
dates back some years ago I guess the

00:05:06,810 --> 00:05:14,140
really starting point has been the

00:05:10,090 --> 00:05:16,150
famous infamous line in the sand by ingo

00:05:14,140 --> 00:05:18,400
Warner so one of the shredder linux

00:05:16,150 --> 00:05:21,280
element a nurse you cannot probably read

00:05:18,400 --> 00:05:24,490
what he was saying on amenities but

00:05:21,280 --> 00:05:29,020
basically what he wanted was a single

00:05:24,490 --> 00:05:31,930
holistic way to actually have the I mean

00:05:29,020 --> 00:05:33,940
a single place they place me in the

00:05:31,930 --> 00:05:35,979
shredder that controls all the power X

00:05:33,940 --> 00:05:38,950
but in also performance and that's

00:05:35,979 --> 00:05:41,260
basically what we are we try to design

00:05:38,950 --> 00:05:44,979
in the following years this has been

00:05:41,260 --> 00:05:49,630
busy a joint f4 between armed dinero and

00:05:44,979 --> 00:05:52,630
other community members I guess the

00:05:49,630 --> 00:05:56,260
community it still can somewhat a small

00:05:52,630 --> 00:05:59,830
but it's raising so increasing number of

00:05:56,260 --> 00:06:02,830
people here basically I just put the

00:05:59,830 --> 00:06:05,260
main bits of what has been already

00:06:02,830 --> 00:06:08,740
achieved so I achieve the main line so

00:06:05,260 --> 00:06:10,840
the nukes main line what's on flight I

00:06:08,740 --> 00:06:12,970
guess yeah i can just came through

00:06:10,840 --> 00:06:16,210
through the different points on the

00:06:12,970 --> 00:06:19,810
slide the light blue ones means that

00:06:16,210 --> 00:06:23,590
they are i FCS so perch is proposing

00:06:19,810 --> 00:06:26,919
main line for discussion or in flight

00:06:23,590 --> 00:06:30,700
patches so the last arab sea of the

00:06:26,919 --> 00:06:34,990
whole stack of patience for es was

00:06:30,700 --> 00:06:37,360
dating back last year in july and then

00:06:34,990 --> 00:06:40,180
after that we decided to take different

00:06:37,360 --> 00:06:43,449
way but i'll talk about this afterwards

00:06:40,180 --> 00:06:47,229
and then we get some sedation pages

00:06:43,449 --> 00:06:50,830
merged and then I guess the other big

00:06:47,229 --> 00:06:52,600
beats is the coupling with the CPU freak

00:06:50,830 --> 00:06:55,539
we had this implementation code

00:06:52,600 --> 00:06:58,150
shipwreck and then happen suddenly that

00:06:55,539 --> 00:07:00,580
weasely the very same the implementation

00:06:58,150 --> 00:07:03,669
of the way to the very same idea got

00:07:00,580 --> 00:07:05,919
merged in May line and right now

00:07:03,669 --> 00:07:08,289
basically the in-flight patch is

00:07:05,919 --> 00:07:10,870
currently our Morton's Andy Dwyer a

00:07:08,289 --> 00:07:12,520
symmetric capacity support for seduced

00:07:10,870 --> 00:07:15,610
so it's basically the performance only

00:07:12,520 --> 00:07:19,660
aspect of this team and I'm following

00:07:15,610 --> 00:07:24,610
the expression inity of the energy model

00:07:19,660 --> 00:07:29,050
but I think this will be Peter as we go

00:07:24,610 --> 00:07:31,449
through the slides all right if I if you

00:07:29,050 --> 00:07:36,310
have any question I guess just as I mean

00:07:31,449 --> 00:07:39,250
don't wait for the presentation alright

00:07:36,310 --> 00:07:41,440
so that was really the introductory part

00:07:39,250 --> 00:07:44,740
of the presentation so what's the agenda

00:07:41,440 --> 00:07:47,830
for today obviously still keep talking

00:07:44,740 --> 00:07:50,380
little bit of about ES and what it is

00:07:47,830 --> 00:07:52,810
like really high level but still we need

00:07:50,380 --> 00:07:56,409
some more details to appreciate what

00:07:52,810 --> 00:07:58,479
comes next then I'll spend much more

00:07:56,409 --> 00:08:00,039
time on the Android comic adaptation of

00:07:58,479 --> 00:08:02,740
a brown because it's busily that the

00:08:00,039 --> 00:08:06,370
meat of this presentation and then i'll

00:08:02,740 --> 00:08:09,220
talk about whether the yeah upstream and

00:08:06,370 --> 00:08:11,050
product code lines so what we think is

00:08:09,220 --> 00:08:17,530
the right way to proceed from here and

00:08:11,050 --> 00:08:19,960
then okay and you get involved right so

00:08:17,530 --> 00:08:22,960
this is the little view is also called

00:08:19,960 --> 00:08:26,199
they're scary pictures not sure just

00:08:22,960 --> 00:08:30,060
scary but that's basically all the

00:08:26,199 --> 00:08:33,190
components that are part of these es

00:08:30,060 --> 00:08:36,550
mechanism so instead of just staying

00:08:33,190 --> 00:08:39,159
here I guess it's easier for someone

00:08:36,550 --> 00:08:42,279
that doesn't know what it is to

00:08:39,159 --> 00:08:44,829
understand really three main blocks that

00:08:42,279 --> 00:08:48,310
compose the whole thing so we have I

00:08:44,829 --> 00:08:50,950
mean that the biggest block is what we

00:08:48,310 --> 00:08:53,490
call year score and in score basically

00:08:50,950 --> 00:08:57,320
is composed by code

00:08:53,490 --> 00:09:01,740
in the linux shadow CFS wake up part

00:08:57,320 --> 00:09:04,110
where we actually use information about

00:09:01,740 --> 00:09:07,800
performance and power to make shelving

00:09:04,110 --> 00:09:12,779
decisions and this information comes

00:09:07,800 --> 00:09:15,149
from the arc layer so where we actually

00:09:12,779 --> 00:09:18,209
have the energy model expression this

00:09:15,149 --> 00:09:22,230
energy model that describes your to

00:09:18,209 --> 00:09:27,000
poison the power characteristics all of

00:09:22,230 --> 00:09:31,110
your platform comes from VT and then it

00:09:27,000 --> 00:09:35,070
also this information is also used DCI e

00:09:31,110 --> 00:09:38,420
and f IV means a cpu environment engine

00:09:35,070 --> 00:09:42,170
and frequency in ballentine basically

00:09:38,420 --> 00:09:45,570
they actually are able to frequency in

00:09:42,170 --> 00:09:48,540
capacity scale de l'autre immigrants one

00:09:45,570 --> 00:09:50,820
day we actually use to make informed

00:09:48,540 --> 00:09:52,320
decision also these are also about this

00:09:50,820 --> 00:09:56,070
I'll talk about later but basically

00:09:52,320 --> 00:09:59,010
those are the main components of the air

00:09:56,070 --> 00:10:01,230
score so yeah it's basically a symmetric

00:09:59,010 --> 00:10:07,320
capacitive support and energy model

00:10:01,230 --> 00:10:10,649
River during a task basement then come

00:10:07,320 --> 00:10:14,160
shatrak at least in the product code

00:10:10,649 --> 00:10:17,520
lines and said fred is basically the

00:10:14,160 --> 00:10:21,990
missing link between shared were and cpu

00:10:17,520 --> 00:10:25,440
freak so usually you have a cpu free

00:10:21,990 --> 00:10:27,899
governor that does his own decisions

00:10:25,440 --> 00:10:30,209
regarding OPP changes completely

00:10:27,899 --> 00:10:33,810
separated from the shelter what we

00:10:30,209 --> 00:10:38,579
implemented and I said this is us but

00:10:33,810 --> 00:10:41,640
also linaro f4 is basically make this

00:10:38,579 --> 00:10:43,560
link so the shredder can now ask for a

00:10:41,640 --> 00:10:47,070
particular OPP and the thing will be

00:10:43,560 --> 00:10:54,000
basically using 50 frag drivers will be

00:10:47,070 --> 00:10:58,020
actually make work and then we have a

00:10:54,000 --> 00:10:59,310
tune which is basically the single tuna

00:10:58,020 --> 00:11:03,930
mechanism that I was talking about

00:10:59,310 --> 00:11:06,690
before so away visits at the mechanism

00:11:03,930 --> 00:11:07,620
so it's an API you can actually use to

00:11:06,690 --> 00:11:10,140
try to

00:11:07,620 --> 00:11:15,750
indifferently your platform depending on

00:11:10,140 --> 00:11:17,760
what's what's running on on it and this

00:11:15,750 --> 00:11:21,360
is supposed to be actually use my user

00:11:17,760 --> 00:11:23,910
space so that's really the linkage

00:11:21,360 --> 00:11:27,360
between care no space and user space and

00:11:23,910 --> 00:11:29,850
of course the dairy is that moving that

00:11:27,360 --> 00:11:32,250
gear that corresponds ideally to shed

00:11:29,850 --> 00:11:35,190
you you're actually able to move shelf

00:11:32,250 --> 00:11:38,580
rack and es course we actually influence

00:11:35,190 --> 00:11:41,120
in not only frequency selection but are

00:11:38,580 --> 00:11:45,990
also CPU selection so shall you lean

00:11:41,120 --> 00:11:55,110
decisions at the same time okay that's

00:11:45,990 --> 00:11:57,870
yeah so what kind of information are you

00:11:55,110 --> 00:11:59,930
passing in the device tree in are you

00:11:57,870 --> 00:12:03,240
going to go into any more detail on ax

00:11:59,930 --> 00:12:05,910
from the device tree the information

00:12:03,240 --> 00:12:08,339
that you're passing in for EAS what all

00:12:05,910 --> 00:12:09,960
is that describing is it just still the

00:12:08,339 --> 00:12:11,490
hardware description are you I see

00:12:09,960 --> 00:12:13,920
there's an energy model block up there

00:12:11,490 --> 00:12:17,160
you also contain some of that so

00:12:13,920 --> 00:12:19,830
basically currently we have India in DS

00:12:17,160 --> 00:12:23,130
DT bindings which are not upstream their

00:12:19,830 --> 00:12:29,160
products what we just described is

00:12:23,130 --> 00:12:32,430
basically d-4d active state so 0 bp's of

00:12:29,160 --> 00:12:35,850
your platform you have like a capacity a

00:12:32,430 --> 00:12:39,060
given by Delta P P so how much CPU a

00:12:35,850 --> 00:12:41,490
bandwidth let OPP gives you and then

00:12:39,060 --> 00:12:43,680
associate a power and then you have

00:12:41,490 --> 00:12:45,089
basically the same thing well you don't

00:12:43,680 --> 00:12:46,770
have capacity but you have like a power

00:12:45,089 --> 00:12:50,640
associated to the different other states

00:12:46,770 --> 00:12:52,950
and so you can couple those information

00:12:50,640 --> 00:12:53,880
to make scheduling decisions those are

00:12:52,950 --> 00:12:58,670
basically the main point that's

00:12:53,880 --> 00:13:04,740
basically what the energy model is okay

00:12:58,670 --> 00:13:07,500
all right so we go with a with the meat

00:13:04,740 --> 00:13:15,420
of the presentation that's yeah that's

00:13:07,500 --> 00:13:17,550
about all right so what we well well yes

00:13:15,420 --> 00:13:20,040
first of all it's why we actually need

00:13:17,550 --> 00:13:21,240
to change something so why that what we

00:13:20,040 --> 00:13:25,470
had wasn't

00:13:21,240 --> 00:13:27,510
enough for a real product or for the

00:13:25,470 --> 00:13:31,440
Android come on Kara basically the

00:13:27,510 --> 00:13:35,220
baseline is what we call yes Fido 2 plus

00:13:31,440 --> 00:13:39,620
it's kind of funky versioning system but

00:13:35,220 --> 00:13:42,570
basically for you it esv 5 was the last

00:13:39,620 --> 00:13:46,740
code line release on linux communities

00:13:42,570 --> 00:13:50,130
then the Fido one was a minor update and

00:13:46,740 --> 00:13:53,730
had 5 door to base rates after a rewrite

00:13:50,130 --> 00:13:55,529
of the low tracking signal in Linux so

00:13:53,730 --> 00:13:59,420
we had to change something and then the

00:13:55,529 --> 00:14:03,620
plaster were built changes that we made

00:13:59,420 --> 00:14:06,089
service in another it was a Chrome OS

00:14:03,620 --> 00:14:08,220
thing going on and we had to make those

00:14:06,089 --> 00:14:13,230
changes but that's barely considered

00:14:08,220 --> 00:14:15,149
being a baseline so these are special

00:14:13,230 --> 00:14:16,950
was I mean good for a male line because

00:14:15,149 --> 00:14:19,980
we were seeing positive feedback from

00:14:16,950 --> 00:14:23,310
main line but not by their for Android

00:14:19,980 --> 00:14:27,770
so it pays yeah those four points are

00:14:23,310 --> 00:14:29,899
the main problems with that code line so

00:14:27,770 --> 00:14:34,649
one yeah the first problem was that

00:14:29,899 --> 00:14:39,149
performance as Linux consider it was

00:14:34,649 --> 00:14:43,560
still about throughput and not latency

00:14:39,149 --> 00:14:45,959
which is quite different so since on

00:14:43,560 --> 00:14:49,380
Android on mobile workers in general

00:14:45,959 --> 00:14:52,170
latency it's really important we need to

00:14:49,380 --> 00:14:57,300
make some adjustment to serve it the

00:14:52,170 --> 00:14:59,579
kind of requirements then the classic I

00:14:57,300 --> 00:15:02,940
mean the basic design was really i mean

00:14:59,579 --> 00:15:05,459
was general but still kind of always

00:15:02,940 --> 00:15:08,520
thinking about classical big little

00:15:05,459 --> 00:15:10,079
system there are there are

00:15:08,520 --> 00:15:11,910
implementations in confrontation there

00:15:10,079 --> 00:15:13,709
are which are not big little so we

00:15:11,910 --> 00:15:19,440
needed to make changes to service those

00:15:13,709 --> 00:15:22,890
as well and yeah another big point was

00:15:19,440 --> 00:15:26,760
that basically the low tracking

00:15:22,890 --> 00:15:29,070
mechanism of the male line little

00:15:26,760 --> 00:15:31,890
scheduler is basically servicing quite

00:15:29,070 --> 00:15:35,070
good server dekstop type of workloads

00:15:31,890 --> 00:15:35,550
maybe it is not this it is not the case

00:15:35,070 --> 00:15:38,610
for

00:15:35,550 --> 00:15:42,060
our mobile workloads so another

00:15:38,610 --> 00:15:47,190
mechanism was introduced to say is those

00:15:42,060 --> 00:15:50,580
workloads better and yes Billy we went I

00:15:47,190 --> 00:15:53,670
had and implemented this single tuning

00:15:50,580 --> 00:15:55,440
knob that Martinez asked for actually we

00:15:53,670 --> 00:15:57,089
needed a little bit more because it's

00:15:55,440 --> 00:16:00,540
also see group based so it's not really

00:15:57,089 --> 00:16:03,029
already single one but also having this

00:16:00,540 --> 00:16:06,980
single thing was probably too simplistic

00:16:03,029 --> 00:16:10,860
so we needed to add another tuning knob

00:16:06,980 --> 00:16:16,019
those are basically the reason why we

00:16:10,860 --> 00:16:18,360
need it we needed those changes so what

00:16:16,019 --> 00:16:20,579
what what was the approach to come up

00:16:18,360 --> 00:16:23,820
with those changes and I think that's

00:16:20,579 --> 00:16:26,779
another point worth worth stressing here

00:16:23,820 --> 00:16:30,750
because basically the primary focus

00:16:26,779 --> 00:16:35,180
dritan driving the those iterative

00:16:30,750 --> 00:16:39,300
approach in changing bits and pieces was

00:16:35,180 --> 00:16:41,820
really a try to understand what was the

00:16:39,300 --> 00:16:44,070
province of workloads than matters for

00:16:41,820 --> 00:16:48,060
the particular product and in this case

00:16:44,070 --> 00:16:50,850
basically our primary focus was on you x

00:16:48,060 --> 00:16:53,360
type of workloads so which are in

00:16:50,850 --> 00:16:57,630
general latency sensitive like you to

00:16:53,360 --> 00:16:59,399
camera record or still there I mean you

00:16:57,630 --> 00:17:02,610
I've and she still I mean it's not

00:16:59,399 --> 00:17:04,589
really application but still mimics the

00:17:02,610 --> 00:17:06,510
behavior of replications like you can

00:17:04,589 --> 00:17:08,579
scroll these then just do this kind of

00:17:06,510 --> 00:17:11,309
stuff which is with the what Android is

00:17:08,579 --> 00:17:14,370
what we're doing so the pressure was

00:17:11,309 --> 00:17:17,490
really charity so the way we did it we

00:17:14,370 --> 00:17:20,370
run the baseline so we start with fight

00:17:17,490 --> 00:17:24,720
or two plus run ething through Lisa

00:17:20,370 --> 00:17:26,339
which is basically the tooling we

00:17:24,720 --> 00:17:29,250
actually developed internally and then

00:17:26,339 --> 00:17:31,140
now is publicly available on github to

00:17:29,250 --> 00:17:34,679
actually extract I mean run workloads

00:17:31,140 --> 00:17:37,500
and NX rate data from them if you are

00:17:34,679 --> 00:17:40,350
more interested on the tooling aspects

00:17:37,500 --> 00:17:42,720
of this story make sure you follow I

00:17:40,350 --> 00:17:48,000
think it's after this that we yeah there

00:17:42,720 --> 00:17:49,500
is a neck incision metric okay yeah so

00:17:48,000 --> 00:17:51,750
make sure you follow the

00:17:49,500 --> 00:17:54,690
because we have updates on on these

00:17:51,750 --> 00:17:56,820
beads as well all right so we run the

00:17:54,690 --> 00:17:59,630
baseline then you figure out that

00:17:56,820 --> 00:18:02,670
something is not working as you expected

00:17:59,630 --> 00:18:04,880
that might be by just inspecting the

00:18:02,670 --> 00:18:09,120
trees so you collect these trees and see

00:18:04,880 --> 00:18:11,250
frames junk frames for example or you

00:18:09,120 --> 00:18:13,290
measure performance so you actually

00:18:11,250 --> 00:18:15,960
perceive that the performance is not

00:18:13,290 --> 00:18:18,090
acceptable so then you have to go there

00:18:15,960 --> 00:18:20,280
and think okay what can I change of

00:18:18,090 --> 00:18:22,650
course so there's some performing you

00:18:20,280 --> 00:18:26,010
come up with a change proposed a bit and

00:18:22,650 --> 00:18:27,750
then well if you rerun the same workload

00:18:26,010 --> 00:18:29,370
so compared with baseline and everything

00:18:27,750 --> 00:18:32,070
is good so you solve the problem that's

00:18:29,370 --> 00:18:34,050
it see bit but if it's not I mean this

00:18:32,070 --> 00:18:36,410
is a really neat a garage and a tooling

00:18:34,050 --> 00:18:41,160
that we actually have helps a lot in

00:18:36,410 --> 00:18:44,480
performing these tasks of course we

00:18:41,160 --> 00:18:47,040
didn't forget the competitive type

00:18:44,480 --> 00:18:48,780
benchmark type of application flow

00:18:47,040 --> 00:18:52,830
geekbench of allama we also care about

00:18:48,780 --> 00:18:55,860
them but I said the primary focus was on

00:18:52,830 --> 00:18:59,040
UX and also what like to stress that

00:18:55,860 --> 00:19:02,100
well latency is one side of respect the

00:18:59,040 --> 00:19:03,600
energy is actually the other bits that

00:19:02,100 --> 00:19:06,060
you care about so it's always a

00:19:03,600 --> 00:19:09,360
trade-off between the latency you

00:19:06,060 --> 00:19:15,230
achieve and the energy you actually you

00:19:09,360 --> 00:19:15,230
use to achieve that latency right

00:19:19,160 --> 00:19:41,900
I will know which will plan the form you

00:19:35,000 --> 00:19:43,820
are using to debug and optimize you mean

00:19:41,900 --> 00:19:46,910
how we figure out that something else is

00:19:43,820 --> 00:19:48,350
not working on how we then verify that

00:19:46,910 --> 00:19:52,660
the thing is actually working after a

00:19:48,350 --> 00:19:58,730
change yeah I have noticed that

00:19:52,660 --> 00:20:04,100
different CPU topology may affect the

00:19:58,730 --> 00:20:07,610
results of your view optimization so oh

00:20:04,100 --> 00:20:11,480
I want to know what is the plan for me

00:20:07,610 --> 00:20:16,970
you are using and uh what's the CPU top

00:20:11,480 --> 00:20:18,500
law change so well well I guess next

00:20:16,970 --> 00:20:20,560
slides probably explain it because I

00:20:18,500 --> 00:20:23,570
mean Here I am showing some of the

00:20:20,560 --> 00:20:26,390
performance gathering aspect and this

00:20:23,570 --> 00:20:29,810
basically has been running on my

00:20:26,390 --> 00:20:34,250
keyboard so high key is a 96 player

00:20:29,810 --> 00:20:36,380
board platform it's busier SMP system so

00:20:34,250 --> 00:20:39,740
that kind of topologies all those

00:20:36,380 --> 00:20:46,600
changes should fit in any kind of SMP or

00:20:39,740 --> 00:20:52,880
SMP like type of topologies yeah and

00:20:46,600 --> 00:20:55,840
what Sally okay okay so yeah actually I

00:20:52,880 --> 00:21:00,260
wanted to show you a simple example of

00:20:55,840 --> 00:21:02,360
the basically how we collect data how we

00:21:00,260 --> 00:21:04,160
actually work on this data and try to

00:21:02,360 --> 00:21:09,770
understand what I mean if there is a

00:21:04,160 --> 00:21:14,090
problem or not so here you see data from

00:21:09,770 --> 00:21:16,310
several runs of list view which is part

00:21:14,090 --> 00:21:19,100
of the chunk bench bench one clue that

00:21:16,310 --> 00:21:23,440
was talking about before it's very

00:21:19,100 --> 00:21:25,940
simple Reese crawling type of yep and

00:21:23,440 --> 00:21:27,920
here this is just an example so I want

00:21:25,940 --> 00:21:30,920
to enter imagine it is but basically

00:21:27,920 --> 00:21:31,850
here we compare the front frame

00:21:30,920 --> 00:21:34,640
rendering

00:21:31,850 --> 00:21:38,510
duration time so much time it is quite

00:21:34,640 --> 00:21:39,890
rather frame versus a more simple and so

00:21:38,510 --> 00:21:43,010
this is basically a cumulative

00:21:39,890 --> 00:21:47,360
distribution of the rendering all the

00:21:43,010 --> 00:21:50,390
different frames this is comparing

00:21:47,360 --> 00:21:53,390
different configurations but basically

00:21:50,390 --> 00:21:55,549
what is interesting for us is for

00:21:53,390 --> 00:21:58,400
example that starting from the point or

00:21:55,549 --> 00:22:02,179
worse you actually have start experience

00:21:58,400 --> 00:22:04,850
drunk dreams because music the dotted

00:22:02,179 --> 00:22:07,760
red line it's the 16 millisecond

00:22:04,850 --> 00:22:11,750
deadline for the Rainy River frame so

00:22:07,760 --> 00:22:14,059
each frame that goes about that limit is

00:22:11,750 --> 00:22:18,710
basically gentleness so you don't really

00:22:14,059 --> 00:22:20,570
you don't want any frame to be genki so

00:22:18,710 --> 00:22:22,130
that's basically the first thing that

00:22:20,570 --> 00:22:23,690
tells you okay there is something wrong

00:22:22,130 --> 00:22:26,330
and then you of course you have to

00:22:23,690 --> 00:22:29,630
collect races and less than what what's

00:22:26,330 --> 00:22:31,309
not working and fix it the other point

00:22:29,630 --> 00:22:35,000
here is that it's not only about

00:22:31,309 --> 00:22:38,240
averages that we usually care about but

00:22:35,000 --> 00:22:40,370
also like other statistical properties

00:22:38,240 --> 00:22:42,919
like the 99 percentile so it's really a

00:22:40,370 --> 00:22:47,299
statistical type of approach so it's not

00:22:42,919 --> 00:22:49,010
just a single result that you get not

00:22:47,299 --> 00:22:54,080
just a single number it's really a

00:22:49,010 --> 00:22:58,460
statistical thing and yeah I mean I said

00:22:54,080 --> 00:23:04,429
those are was running different code

00:22:58,460 --> 00:23:05,809
lines on yes yeah so the different

00:23:04,429 --> 00:23:07,880
colors in this case our different

00:23:05,809 --> 00:23:10,460
configurations so here I was running on

00:23:07,880 --> 00:23:13,070
my keyboard actually want to take a John

00:23:10,460 --> 00:23:16,909
and Steve also for making this easy to

00:23:13,070 --> 00:23:20,419
to achieve and here I was running the

00:23:16,909 --> 00:23:23,750
same workload with the different CP Fred

00:23:20,419 --> 00:23:25,640
corners so for example the violet line

00:23:23,750 --> 00:23:27,260
its performance governors and then you

00:23:25,640 --> 00:23:29,690
have interactive said you would either

00:23:27,260 --> 00:23:31,400
Shadrach just to be able to compare the

00:23:29,690 --> 00:23:33,169
performance of the different governors

00:23:31,400 --> 00:23:35,330
so each line it's a different

00:23:33,169 --> 00:23:37,850
configuration basically so here address

00:23:35,330 --> 00:23:40,640
I was just reaching the governor but you

00:23:37,850 --> 00:23:42,590
can in principle do whatever type of

00:23:40,640 --> 00:23:45,200
comparison you care about usually its

00:23:42,590 --> 00:23:49,940
baseline against something

00:23:45,200 --> 00:23:51,559
let you change in this case is a

00:23:49,940 --> 00:23:53,840
different configuration of the governor

00:23:51,559 --> 00:23:56,120
see to Fred governor by in general yes

00:23:53,840 --> 00:24:00,320
can be different configuration options

00:23:56,120 --> 00:24:03,049
or whatever you you want yeah but that

00:24:00,320 --> 00:24:05,510
just were like the type of results we

00:24:03,049 --> 00:24:08,059
were getting and if you're interested in

00:24:05,510 --> 00:24:10,490
this kind of thing i'll be having an a

00:24:08,059 --> 00:24:14,029
concession i think tomorrow or the day

00:24:10,490 --> 00:24:17,029
after tomorrow remember about basically

00:24:14,029 --> 00:24:21,519
copying schedule deal with the escort so

00:24:17,029 --> 00:24:21,519
i have more or this stuff to show you

00:24:21,549 --> 00:24:31,010
okay so what we actually modified who

00:24:29,269 --> 00:24:34,940
remember this was the scary picture and

00:24:31,010 --> 00:24:37,700
I very light it in light blue the bits

00:24:34,940 --> 00:24:41,059
that we actually we modified or we added

00:24:37,700 --> 00:24:43,039
to the picture so the wake up part said

00:24:41,059 --> 00:24:48,139
preggers shetty was already present in

00:24:43,039 --> 00:24:51,380
the in the baseline and what we added is

00:24:48,139 --> 00:24:55,850
basely the world low tracking mechanism

00:24:51,380 --> 00:24:58,610
thanks to our hike on friends and then

00:24:55,850 --> 00:25:01,330
the coupling with user space which also

00:24:58,610 --> 00:25:01,330
yes

00:25:12,000 --> 00:25:16,620
what was what was the target platform

00:25:14,220 --> 00:25:22,500
you used to do your development and

00:25:16,620 --> 00:25:26,070
testing so busy this is a customer

00:25:22,500 --> 00:25:27,990
platform can we talk about the platform

00:25:26,070 --> 00:25:30,060
it says but mainly those modification

00:25:27,990 --> 00:25:32,430
was saying before there are still

00:25:30,060 --> 00:25:36,420
destined matters poor for example I key

00:25:32,430 --> 00:25:39,000
the I keyboard it's a easily available

00:25:36,420 --> 00:25:40,860
and actually those body creation still

00:25:39,000 --> 00:25:43,880
matters should still matter for their

00:25:40,860 --> 00:25:47,820
platform so we of course targeted a

00:25:43,880 --> 00:25:49,860
particular product we which we cannot

00:25:47,820 --> 00:25:53,430
talk about right now but this thing is

00:25:49,860 --> 00:25:58,700
general for this kind of topologies so

00:25:53,430 --> 00:25:58,700
I'd say SNP SNP light type of topologies

00:25:59,870 --> 00:26:10,790
what what ARM version was it I mean was

00:26:04,740 --> 00:26:10,790
it and a 53 a 72

00:26:27,010 --> 00:26:30,010
f

00:26:36,790 --> 00:26:46,880
right yeah and I'll now talk about them

00:26:42,560 --> 00:26:49,700
separately so first thing is a world so

00:26:46,880 --> 00:26:51,590
we not as is a lot tracking mechanism so

00:26:49,700 --> 00:26:54,260
it's basically an alternative to the

00:26:51,590 --> 00:26:57,080
current linux no tracking mechanism

00:26:54,260 --> 00:27:02,300
which is called pals which basically

00:26:57,080 --> 00:27:05,120
gives you basically keeps tracks or task

00:27:02,300 --> 00:27:09,220
demand and cpu utilization so it's

00:27:05,120 --> 00:27:12,500
actually useful to do shelving decisions

00:27:09,220 --> 00:27:14,570
again i can give you much details

00:27:12,500 --> 00:27:18,590
because i don't have time in this thing

00:27:14,570 --> 00:27:22,490
with higher hours easily but i think you

00:27:18,590 --> 00:27:25,400
guys have I talked about this in the

00:27:22,490 --> 00:27:27,590
next days so be sure you be sure you're

00:27:25,400 --> 00:27:30,500
tending also there is a necking session

00:27:27,590 --> 00:27:36,770
about belt as well I will recap all the

00:27:30,500 --> 00:27:39,830
stuff in class right so and yeah

00:27:36,770 --> 00:27:42,260
basically we also kept the belt one in

00:27:39,830 --> 00:27:43,940
the code line so we didn't switch

00:27:42,260 --> 00:27:45,980
between the two so in the cord line you

00:27:43,940 --> 00:27:50,180
actually have a configuration time

00:27:45,980 --> 00:27:52,460
option and a progress tunable which you

00:27:50,180 --> 00:27:59,120
can switch between the two for

00:27:52,460 --> 00:28:02,480
comparison 04 because you need it say so

00:27:59,120 --> 00:28:06,190
why we needed this team this little bit

00:28:02,480 --> 00:28:09,140
basically because well that was really a

00:28:06,190 --> 00:28:12,650
testing so we did limited devices in

00:28:09,140 --> 00:28:15,740
this show better performance and energy

00:28:12,650 --> 00:28:18,800
and numbers so that's why we actually

00:28:15,740 --> 00:28:22,370
decided to to bring this in as part of

00:28:18,800 --> 00:28:25,790
the other picture of course this is

00:28:22,370 --> 00:28:29,750
known it is it is not a main line

00:28:25,790 --> 00:28:32,540
currently so we have basically plans to

00:28:29,750 --> 00:28:35,150
basically be able to use this I mean to

00:28:32,540 --> 00:28:37,880
poor it or something like it to be part

00:28:35,150 --> 00:28:40,370
of mainline always think that everything

00:28:37,880 --> 00:28:41,630
that we that we do is also it is

00:28:40,370 --> 00:28:43,610
targeting products but it's also

00:28:41,630 --> 00:28:45,720
focusing my line so we we need always to

00:28:43,610 --> 00:28:47,910
think about the tool

00:28:45,720 --> 00:28:50,220
Gold length in this case basically there

00:28:47,910 --> 00:28:52,680
is currently a discussion happening on

00:28:50,220 --> 00:28:55,050
this mini least called es dev I'll have

00:28:52,680 --> 00:28:57,300
more information afterwards which is

00:28:55,050 --> 00:28:59,550
kind of it's a I said it's a small

00:28:57,300 --> 00:29:03,570
community smallish community so we have

00:28:59,550 --> 00:29:06,150
this meaning East which is not on Linux

00:29:03,570 --> 00:29:07,770
communities currently with where we did

00:29:06,150 --> 00:29:10,290
discuss about things also because we can

00:29:07,770 --> 00:29:13,950
discuss about product code lines so it's

00:29:10,290 --> 00:29:17,580
not only main line it's easier to to

00:29:13,950 --> 00:29:19,530
participate here and yeah we are

00:29:17,580 --> 00:29:22,620
discussing and not three friendly

00:29:19,530 --> 00:29:25,920
version of this thing and hopefully we

00:29:22,620 --> 00:29:28,860
will be able to post a version of world

00:29:25,920 --> 00:29:31,290
in on the new screaming list together

00:29:28,860 --> 00:29:34,800
with this we actually the several

00:29:31,290 --> 00:29:39,120
modification on top of belt or fixes to

00:29:34,800 --> 00:29:41,430
Pell to try and make it more mobile

00:29:39,120 --> 00:29:44,220
friend I mean to basically trying to

00:29:41,430 --> 00:29:47,910
replicate and close gaps with respect to

00:29:44,220 --> 00:29:51,150
world and I guess the plan there is try

00:29:47,910 --> 00:29:53,040
I mean putting evaluating the difference

00:29:51,150 --> 00:29:55,320
between the two and see if we can come

00:29:53,040 --> 00:29:58,320
up with something up or main line which

00:29:55,320 --> 00:30:00,870
is better for everyone and yeah as I

00:29:58,320 --> 00:30:03,780
said please make sure your 10 d a

00:30:00,870 --> 00:30:09,330
concession also the presentation later

00:30:03,780 --> 00:30:14,130
on this week right then next vid was

00:30:09,330 --> 00:30:17,100
scheduled so you basically the main

00:30:14,130 --> 00:30:19,200
modification where to the negative

00:30:17,100 --> 00:30:21,870
boosting I talked about equity

00:30:19,200 --> 00:30:25,200
first so the boosting was already

00:30:21,870 --> 00:30:29,190
thought to be positive so 0 hundred but

00:30:25,200 --> 00:30:32,310
then we realized actually that it might

00:30:29,190 --> 00:30:35,190
be worth having also a kind of negative

00:30:32,310 --> 00:30:38,250
busine so if you have a background on

00:30:35,190 --> 00:30:40,320
latency density tasks and you want to

00:30:38,250 --> 00:30:42,380
keep for example you frequency low or

00:30:40,320 --> 00:30:45,900
you want to shuttle them I mean try to

00:30:42,380 --> 00:30:48,140
tune them to run on a little CPUs you

00:30:45,900 --> 00:30:51,690
can actually put them in a negative

00:30:48,140 --> 00:30:54,510
boosted group and it will be accordingly

00:30:51,690 --> 00:30:59,820
sheduled sauce there was a nice addition

00:30:54,510 --> 00:31:00,120
and which doesn't require another to

00:30:59,820 --> 00:31:02,070
know

00:31:00,120 --> 00:31:04,920
I mean I say the same to me knob but

00:31:02,070 --> 00:31:07,590
extended in the other direction and then

00:31:04,920 --> 00:31:12,390
we actually needed a new teeny nom call

00:31:07,590 --> 00:31:14,850
prefer Idol to be able to service the

00:31:12,390 --> 00:31:17,880
desire for low-latency wake-ups so in

00:31:14,850 --> 00:31:20,700
this case task there are part of the

00:31:17,880 --> 00:31:24,780
group with this flag set will be

00:31:20,700 --> 00:31:27,660
basically trying to be put on another

00:31:24,780 --> 00:31:29,640
cpu but i guess we'll be more clear

00:31:27,660 --> 00:31:36,420
afterwards when I when I actually talked

00:31:29,640 --> 00:31:38,460
about the wake up but yeah it's a flat

00:31:36,420 --> 00:31:39,960
approach but i'll talk about that like

00:31:38,460 --> 00:31:43,170
next slide is basically talking about

00:31:39,960 --> 00:31:47,790
this but those are the main leads and so

00:31:43,170 --> 00:31:51,300
plans for moving far from here it's well

00:31:47,790 --> 00:31:54,270
a main thing is to try to improve the

00:31:51,300 --> 00:31:57,720
definition of the power performance

00:31:54,270 --> 00:32:00,090
trade-off schedule is currently

00:31:57,720 --> 00:32:03,050
implementing so realize that they were

00:32:00,090 --> 00:32:05,760
like there is probably a more general

00:32:03,050 --> 00:32:08,220
approach and implementation of the same

00:32:05,760 --> 00:32:09,960
idea so we where we are actually working

00:32:08,220 --> 00:32:12,870
on Patrick's actually working on

00:32:09,960 --> 00:32:14,940
extending this idea and maybe by

00:32:12,870 --> 00:32:17,130
extending this idea we will probably

00:32:14,940 --> 00:32:19,620
able to remove for example you prefer

00:32:17,130 --> 00:32:21,750
your other flag hard to who I mean early

00:32:19,620 --> 00:32:25,790
to to see if it's possible but we still

00:32:21,750 --> 00:32:28,680
try to keep that one single no idea and

00:32:25,790 --> 00:32:31,320
yes one of the plan is to oppose an

00:32:28,680 --> 00:32:35,250
updated RFC on new screaming Lisa so the

00:32:31,320 --> 00:32:38,010
last type C is dated last year so it's

00:32:35,250 --> 00:32:40,200
time that we post a new I've see on a

00:32:38,010 --> 00:32:42,720
mini lease also because the interface is

00:32:40,200 --> 00:32:45,090
well based being based on C group might

00:32:42,720 --> 00:32:46,740
be might be posing problems for the

00:32:45,090 --> 00:32:48,720
upstream community so it's good if we

00:32:46,740 --> 00:32:53,610
had that discussion between before we

00:32:48,720 --> 00:32:56,010
move forward yes and also at LPC next

00:32:53,610 --> 00:33:01,820
month we'll be discussing and presenting

00:32:56,010 --> 00:33:01,820
this area to foster further yes

00:33:03,620 --> 00:33:10,040
okay let me just go here because here

00:33:08,180 --> 00:33:13,690
it's actually where is used so it will

00:33:10,040 --> 00:33:18,470
be theater so the task wake up path it's

00:33:13,690 --> 00:33:21,680
actually the where basically the big bag

00:33:18,470 --> 00:33:23,360
of changes are and basically what that's

00:33:21,680 --> 00:33:26,830
the part that we actually changes the

00:33:23,360 --> 00:33:30,710
most change the most we introduce it a

00:33:26,830 --> 00:33:32,360
progress to Nino coal shed its big

00:33:30,710 --> 00:33:34,670
little to be able to actually

00:33:32,360 --> 00:33:37,910
differentiate the behavior and their

00:33:34,670 --> 00:33:40,640
Yuri sticks based on your knowledge of

00:33:37,910 --> 00:33:42,980
the topology so if you have an SMB I

00:33:40,640 --> 00:33:45,740
think you like type of apology you need

00:33:42,980 --> 00:33:48,500
to set this flag 20 is that if you are

00:33:45,740 --> 00:33:52,850
in a big little system you keep it one

00:33:48,500 --> 00:33:56,179
and when you select this V 0 basically

00:33:52,850 --> 00:33:57,620
in the wake up part you'll be executing

00:33:56,179 --> 00:34:00,200
you be calling the fine best target

00:33:57,620 --> 00:34:03,830
function which basically incorporates

00:34:00,200 --> 00:34:08,600
all the changes that we actually made in

00:34:03,830 --> 00:34:12,290
this product code lines what are so

00:34:08,600 --> 00:34:15,620
basically how the selection heuristic

00:34:12,290 --> 00:34:17,480
has been changed so first we when we

00:34:15,620 --> 00:34:21,110
enter the function we actually establish

00:34:17,480 --> 00:34:23,629
if a task is boosted and or if it

00:34:21,110 --> 00:34:26,690
prepares Idol CP also to respond to a

00:34:23,629 --> 00:34:30,770
question if it as if you if the group is

00:34:26,690 --> 00:34:35,389
actually in has the prefer Idol bit flag

00:34:30,770 --> 00:34:37,429
set and then we do basically all CPUs or

00:34:35,389 --> 00:34:42,169
the system are considered so it's

00:34:37,429 --> 00:34:45,950
basically a flat cpu type of heuristics

00:34:42,169 --> 00:34:48,889
so because the original es yurius it was

00:34:45,950 --> 00:34:51,860
actually selecting a cluster before and

00:34:48,889 --> 00:34:54,710
then select the cpu be inside the

00:34:51,860 --> 00:34:58,100
cluster here we basically consider the

00:34:54,710 --> 00:35:01,730
tools to be flat and we actually try all

00:34:58,100 --> 00:35:04,700
the cpuc the system we actually start

00:35:01,730 --> 00:35:07,070
considering i mean we start from the

00:35:04,700 --> 00:35:10,820
four threepio's if the task is non

00:35:07,070 --> 00:35:14,000
boosted or from the last few if the task

00:35:10,820 --> 00:35:17,440
is boosted now this make any sense if

00:35:14,000 --> 00:35:22,840
you still have some differences in the

00:35:17,440 --> 00:35:22,840
cpu type of your topology and it yes

00:35:23,290 --> 00:35:29,900
yeah it's actually if kind of yeah it's

00:35:27,050 --> 00:35:33,110
actually the cpuid so here we actually

00:35:29,900 --> 00:35:37,280
assume that your recipe with the highest

00:35:33,110 --> 00:35:41,510
ID are the most performant one and then

00:35:37,280 --> 00:35:43,760
bury this thing helps you not selecting

00:35:41,510 --> 00:35:45,940
the same cpu for booster a mongoose a

00:35:43,760 --> 00:35:49,520
task so was the task we still consider

00:35:45,940 --> 00:35:56,480
more performance abused normal s'task we

00:35:49,520 --> 00:36:01,450
start from the least it's a littler

00:35:56,480 --> 00:36:05,930
serious yeah yes that's the assumption

00:36:01,450 --> 00:36:08,300
then with lee cpu is chosen looking at

00:36:05,930 --> 00:36:13,070
the task booster utilization so to ask

00:36:08,300 --> 00:36:16,130
us to feed the prefer idle flag and the

00:36:13,070 --> 00:36:18,740
cpu capacity and current utilization all

00:36:16,130 --> 00:36:22,700
the different CPUs in what we basically

00:36:18,740 --> 00:36:25,730
we start CPUs where the task doesn't fit

00:36:22,700 --> 00:36:29,330
so if they don't have spare enough spare

00:36:25,730 --> 00:36:32,420
capacity for a task of course then we

00:36:29,330 --> 00:36:35,270
select the first Idol CPU if the prefer

00:36:32,420 --> 00:36:37,850
Idol is set and he said wake up

00:36:35,270 --> 00:36:42,710
latencies so we prefer idle CPUs

00:36:37,850 --> 00:36:45,850
effectively and then basically if there

00:36:42,710 --> 00:36:51,350
is enough capacity at the current OPP

00:36:45,850 --> 00:36:53,630
for prefer idle task we select the cpu

00:36:51,350 --> 00:36:56,750
with the lowest utilization so it's the

00:36:53,630 --> 00:36:59,300
more idle cpu in the system or the

00:36:56,750 --> 00:37:02,960
highest utilization if the flag flag is

00:36:59,300 --> 00:37:05,090
not set so it's the least I dulce hbu in

00:37:02,960 --> 00:37:08,200
the system we this way we can actually

00:37:05,090 --> 00:37:11,480
make with a single ristic we can

00:37:08,200 --> 00:37:13,570
accommodate different type of booster

00:37:11,480 --> 00:37:18,470
and almost a task so different type of

00:37:13,570 --> 00:37:21,590
task needs yeah the last important is

00:37:18,470 --> 00:37:25,250
that for into task it's actually boosted

00:37:21,590 --> 00:37:30,170
or if it prefer prefer Idol we basically

00:37:25,250 --> 00:37:32,060
skip the energy model we don't use the

00:37:30,170 --> 00:37:35,230
energy model at all so we just select

00:37:32,060 --> 00:37:41,840
the CPU and that helps for latency and

00:37:35,230 --> 00:37:50,600
here again yeah that's basically it for

00:37:41,840 --> 00:37:55,550
later captain yeah faster okay so why we

00:37:50,600 --> 00:37:58,190
need this because yeah maybe for nominal

00:37:55,550 --> 00:38:02,360
topology doesn't fit and have plans is

00:37:58,190 --> 00:38:05,960
to try to convert back to a single wake

00:38:02,360 --> 00:38:10,670
up at even form a line we already go in

00:38:05,960 --> 00:38:13,010
the way for sure Frank is bidding

00:38:10,670 --> 00:38:15,110
briefly we just change the go to max

00:38:13,010 --> 00:38:17,420
policy instead of going to orally max we

00:38:15,110 --> 00:38:20,060
basically incrementally step up and then

00:38:17,420 --> 00:38:21,920
we introduced to throttle in thresholds

00:38:20,060 --> 00:38:25,700
up and down to basically being able to

00:38:21,920 --> 00:38:27,980
respond for to a sudden increase in the

00:38:25,700 --> 00:38:30,710
band and be able to have some mice

00:38:27,980 --> 00:38:33,860
terraces on brief drops and that helps

00:38:30,710 --> 00:38:37,160
both energy savings and responsiveness

00:38:33,860 --> 00:38:39,080
and the plan is actually to steve is

00:38:37,160 --> 00:38:42,440
already in basically doing this work is

00:38:39,080 --> 00:38:44,300
to to report those features on shred

00:38:42,440 --> 00:38:46,400
util and then switch to use schedule

00:38:44,300 --> 00:38:50,660
till both form a line and products in

00:38:46,400 --> 00:38:53,510
the future and yeah userspace

00:38:50,660 --> 00:38:55,460
interaction between can I user space I

00:38:53,510 --> 00:38:57,710
guess the main point is that now the

00:38:55,460 --> 00:39:00,380
tuning happens by a single localized

00:38:57,710 --> 00:39:02,840
surface which is an improvement we

00:39:00,380 --> 00:39:05,090
respect to the past and please attend

00:39:02,840 --> 00:39:07,070
John's talk because it's busy with

00:39:05,090 --> 00:39:11,840
entering in the details of what's

00:39:07,070 --> 00:39:14,630
happened I just give you a simple

00:39:11,840 --> 00:39:16,910
example so that there is kind of you had

00:39:14,630 --> 00:39:18,800
four cpus on your system I think drawn

00:39:16,910 --> 00:39:22,040
as something like that but just do the

00:39:18,800 --> 00:39:23,750
big what what's happening so activity

00:39:22,040 --> 00:39:25,400
mandatory in android divides your task

00:39:23,750 --> 00:39:28,460
in background foreground and top up

00:39:25,400 --> 00:39:31,790
depending on what's running and here for

00:39:28,460 --> 00:39:33,320
example we have different the folds for

00:39:31,790 --> 00:39:37,609
the different groups so you can select

00:39:33,320 --> 00:39:40,200
prefer idle booze independently here you

00:39:37,609 --> 00:39:42,150
see that the top up always has a

00:39:40,200 --> 00:39:44,460
a moose so their task running they are

00:39:42,150 --> 00:39:46,560
always a little bit boosted but for

00:39:44,460 --> 00:39:48,599
example when there is it actually

00:39:46,560 --> 00:39:50,820
interaction advice we actually switch

00:39:48,599 --> 00:39:53,220
the boost and being printable so they

00:39:50,820 --> 00:39:56,040
are actually actually better performance

00:39:53,220 --> 00:40:02,609
and happens of my Italian automatically

00:39:56,040 --> 00:40:05,820
with we'd enjoyed okay it is just no no

00:40:02,609 --> 00:40:11,359
this is the pair we'll see see groups so

00:40:05,820 --> 00:40:11,359
it's there a terror group thing yeah

00:40:15,349 --> 00:40:20,910
yeah now I was saying that I might be

00:40:17,849 --> 00:40:22,829
worth having a negative boosting for the

00:40:20,910 --> 00:40:27,359
background it's actually yeah might be

00:40:22,829 --> 00:40:29,730
may be true depends on the suggestion

00:40:27,359 --> 00:40:32,790
was to to use negative boosting for the

00:40:29,730 --> 00:40:40,020
background group which might make sense

00:40:32,790 --> 00:40:45,300
yes yeah okay right so what's the plan

00:40:40,020 --> 00:40:47,520
form a line product lines so for the

00:40:45,300 --> 00:40:50,400
malign the main line strategy has been

00:40:47,520 --> 00:40:53,760
for the last year to basically split

00:40:50,400 --> 00:40:56,790
this huge batch step composed of more

00:40:53,760 --> 00:41:00,060
than 40 pages I guess after es beef I

00:40:56,790 --> 00:41:04,020
was on the list and basically push a

00:41:00,060 --> 00:41:06,810
subset on main line one after the other

00:41:04,020 --> 00:41:10,250
and together with this will still

00:41:06,810 --> 00:41:14,490
maintaining on arm linux powered aw git

00:41:10,250 --> 00:41:17,130
repository and an upstream aligned Seto

00:41:14,490 --> 00:41:19,430
patches that you can play with if you

00:41:17,130 --> 00:41:24,450
care about main line or you start with

00:41:19,430 --> 00:41:27,810
but basically there is no I mean we keep

00:41:24,450 --> 00:41:34,530
pushing stuff on main line incrementally

00:41:27,810 --> 00:41:37,109
that's basically this strategy poor for

00:41:34,530 --> 00:41:39,829
protocol lines basically we have now the

00:41:37,109 --> 00:41:43,890
380 and photo for Android common Colonel

00:41:39,829 --> 00:41:45,630
product code lines likely there will be

00:41:43,890 --> 00:41:47,430
the next one will be Android for the

00:41:45,630 --> 00:41:51,869
line but we don't really know now and

00:41:47,430 --> 00:41:53,999
then we also have the LSK expression of

00:41:51,869 --> 00:41:56,429
the same thing with the board

00:41:53,999 --> 00:42:01,109
support like for example drew this kind

00:41:56,429 --> 00:42:04,169
of platform support and rewards it's

00:42:01,109 --> 00:42:07,829
following this kind of circle so

00:42:04,169 --> 00:42:10,889
basically for products the upstream is a

00:42:07,829 --> 00:42:13,619
0 speed then better eat those changes

00:42:10,889 --> 00:42:16,799
i'm in the code line there regulate to

00:42:13,619 --> 00:42:18,569
LSK and basically the downstream and

00:42:16,799 --> 00:42:21,449
where development happens because you

00:42:18,569 --> 00:42:24,599
had to run actually your thing on net 10

00:42:21,449 --> 00:42:27,419
for example epsilon LSK patches and

00:42:24,599 --> 00:42:30,299
improvement fixes are actually discussed

00:42:27,419 --> 00:42:32,609
on ES dev because we can talk about

00:42:30,299 --> 00:42:35,429
products the code lines there without

00:42:32,609 --> 00:42:37,159
any problem and then basically after a

00:42:35,429 --> 00:42:41,039
part the patches are reviewed and

00:42:37,159 --> 00:42:42,959
approved they go to SB Garrett and after

00:42:41,039 --> 00:42:46,979
a comprehensive testing and further

00:42:42,959 --> 00:42:50,069
review they hopefully get to our ASB

00:42:46,979 --> 00:42:57,299
again and then that's how this team

00:42:50,069 --> 00:42:59,489
supposed to work in the future so just

00:42:57,299 --> 00:43:03,179
to conclude or how you might want to get

00:42:59,489 --> 00:43:05,129
involved and please do if you want I

00:43:03,179 --> 00:43:07,319
mean the best thing for main line is to

00:43:05,129 --> 00:43:09,989
test the patches review them and

00:43:07,319 --> 00:43:12,389
actually respond to the patch them set

00:43:09,989 --> 00:43:14,759
with the test by if you kind of if you

00:43:12,389 --> 00:43:17,039
really run that thing on on a platform

00:43:14,759 --> 00:43:20,479
you say this is good so for example

00:43:17,039 --> 00:43:23,969
freedom period in the person was great

00:43:20,479 --> 00:43:26,939
or just review the thing and make your

00:43:23,969 --> 00:43:29,369
comments so it's also an indication to

00:43:26,939 --> 00:43:30,539
the mountains there are people may be

00:43:29,369 --> 00:43:32,609
outside the community is actually

00:43:30,539 --> 00:43:35,219
discussing this in the care about the

00:43:32,609 --> 00:43:38,939
patches so it's great help so please do

00:43:35,219 --> 00:43:41,219
or you can actually push purchase to the

00:43:38,939 --> 00:43:43,679
common kernel and get them reviewed

00:43:41,219 --> 00:43:46,859
there will be another way to get

00:43:43,679 --> 00:43:49,499
involved or participate in Des depth

00:43:46,859 --> 00:43:53,429
many least you can discuss both upstream

00:43:49,499 --> 00:43:56,969
or product code line patches or you can

00:43:53,429 --> 00:43:59,849
reach us always only raro yes I see a

00:43:56,969 --> 00:44:02,719
channel we are almost always they are

00:43:59,849 --> 00:44:07,379
not many people but still still there

00:44:02,719 --> 00:44:07,630
okay that's basically it for me those

00:44:07,379 --> 00:44:10,150
are

00:44:07,630 --> 00:44:13,780
the sessions I think they are worth

00:44:10,150 --> 00:44:17,620
attending in the next in this week so

00:44:13,780 --> 00:44:19,000
please come again right so i would take

00:44:17,620 --> 00:44:21,310
advantage of with the microphone in my

00:44:19,000 --> 00:44:24,250
hand yeah ask the first question so i

00:44:21,310 --> 00:44:26,650
think earlier if I heard correctly you

00:44:24,250 --> 00:44:30,490
were saying that you were tuning yes for

00:44:26,650 --> 00:44:33,310
two architectures pick a little and the

00:44:30,490 --> 00:44:36,280
other seems to be implying SMP uniform

00:44:33,310 --> 00:44:38,800
SMP did I understand that correctly so

00:44:36,280 --> 00:44:42,370
those modification basically there they

00:44:38,800 --> 00:44:46,600
were targeting like an SMP like type of

00:44:42,370 --> 00:44:49,650
system which is you can run and see the

00:44:46,600 --> 00:44:55,300
results on di key which is the busy SMP

00:44:49,650 --> 00:44:57,550
but yes okay so in practice that could

00:44:55,300 --> 00:45:01,840
be architectures that is neither big a

00:44:57,550 --> 00:45:03,940
little or conventional SMP right can

00:45:01,840 --> 00:45:07,780
those kind of system be easily adapted

00:45:03,940 --> 00:45:10,000
with this framework what do you mean I

00:45:07,780 --> 00:45:11,680
mean if they're not big leap or for

00:45:10,000 --> 00:45:13,300
example the media tech externally

00:45:11,680 --> 00:45:16,990
actually has three clusters each of the

00:45:13,300 --> 00:45:19,330
different yeah that's another yes I mean

00:45:16,990 --> 00:45:22,090
people yes indeed approach is actually

00:45:19,330 --> 00:45:26,860
general we didn't actually have real all

00:45:22,090 --> 00:45:30,220
data showing yet is actually having but

00:45:26,860 --> 00:45:33,880
that approach definitely working and it

00:45:30,220 --> 00:45:36,330
can be adapted to different Tyga all

00:45:33,880 --> 00:45:36,330
topologies

00:45:47,910 --> 00:45:52,960
Yuri mentioned the two code lines there

00:45:50,740 --> 00:45:54,700
there are two different implementations

00:45:52,960 --> 00:45:59,499
out of necessity but the concepts are

00:45:54,700 --> 00:46:01,390
the same and conceptually speaking a try

00:45:59,499 --> 00:46:05,799
cluster system like the one you alluded

00:46:01,390 --> 00:46:07,690
to should fit right what I want to call

00:46:05,799 --> 00:46:10,420
out is that from an energy modeling

00:46:07,690 --> 00:46:13,210
concept so long as the energy model is

00:46:10,420 --> 00:46:16,630
the abstraction of your topology all of

00:46:13,210 --> 00:46:19,269
this stuff will work but when you want

00:46:16,630 --> 00:46:21,819
to be on it specifically for the UX

00:46:19,269 --> 00:46:24,009
aspects you will probably have to make

00:46:21,819 --> 00:46:26,950
changes over there right it is our

00:46:24,009 --> 00:46:30,880
intent to broaden the coverage of this

00:46:26,950 --> 00:46:32,920
work on topologies like that as well for

00:46:30,880 --> 00:46:36,789
what it's worth within arm we've done

00:46:32,920 --> 00:46:39,249
some modeling based scenarios of those

00:46:36,789 --> 00:46:41,710
kind of platforms and insofar as the

00:46:39,249 --> 00:46:43,569
basic mechanics school of es that

00:46:41,710 --> 00:46:46,029
required no modification it just worked

00:46:43,569 --> 00:46:48,609
if you get into the territory of I have

00:46:46,029 --> 00:46:50,710
a specific use case which is latency

00:46:48,609 --> 00:46:55,440
sensitive then you probably will have to

00:46:50,710 --> 00:46:58,359
do some special case yeah exactly

00:46:55,440 --> 00:47:00,779
absolutely yeah yeah that is part of the

00:46:58,359 --> 00:47:05,049
curing listing for a specific problem

00:47:00,779 --> 00:47:07,089
maybe some you should attend my friend

00:47:05,049 --> 00:47:10,539
John Stone is a presentation here John

00:47:07,089 --> 00:47:13,119
sitting here Johnston the Heike use of

00:47:10,539 --> 00:47:14,680
space adaptations for Android so that

00:47:13,119 --> 00:47:17,819
would give you an insight into the kind

00:47:14,680 --> 00:47:22,559
of things you probably will need to do

00:47:17,819 --> 00:47:22,559
yeah it's part of the AOSP mini summit

00:47:25,140 --> 00:47:34,080
Thursday any other questions

00:47:40,130 --> 00:47:50,230
so every patch is go to our sk first and

00:47:44,210 --> 00:47:53,060
then you sp right yeah basically

00:47:50,230 --> 00:47:55,280
supposed to work is that on LSK we have

00:47:53,060 --> 00:47:57,440
literally same pressure on with the

00:47:55,280 --> 00:48:00,260
scene code that is the current Illinois

00:47:57,440 --> 00:48:03,170
on I oh sorry and then there will be a

00:48:00,260 --> 00:48:05,450
bore support platform support and then

00:48:03,170 --> 00:48:07,280
basically you can actually pick

00:48:05,450 --> 00:48:09,740
whichever code lines to make your

00:48:07,280 --> 00:48:11,990
changes to propose a new page but then

00:48:09,740 --> 00:48:14,470
will be better the upstream thing will

00:48:11,990 --> 00:48:14,470
be the LSB

00:48:24,880 --> 00:48:29,089
so that at my house this drawing I feel

00:48:27,739 --> 00:48:32,239
like is a little bit specific to the

00:48:29,089 --> 00:48:34,039
Android flavor of SK and so for other LS

00:48:32,239 --> 00:48:36,109
Ches that's a little bit to be

00:48:34,039 --> 00:48:49,549
determined so but we'll play another

00:48:36,109 --> 00:48:51,559
solution I think yes yeah so comparing

00:48:49,549 --> 00:48:54,199
things to our old current way of doing

00:48:51,559 --> 00:48:57,529
without EAS do you have like any metrics

00:48:54,199 --> 00:48:59,989
or comparisons you've done against old

00:48:57,529 --> 00:49:01,670
scheduler and old cpu freak like we use

00:48:59,989 --> 00:49:04,549
typically interactive governor on

00:49:01,670 --> 00:49:06,499
Android so do you have like any metrics

00:49:04,549 --> 00:49:08,809
you're tracking like with responsiveness

00:49:06,499 --> 00:49:10,940
or performance on set of tasks or

00:49:08,809 --> 00:49:12,890
something to compare how things will

00:49:10,940 --> 00:49:20,749
look you know as we move forward with

00:49:12,890 --> 00:49:23,709
EAS yeah basically basically here was

00:49:20,749 --> 00:49:26,599
modifying I mean I was changing

00:49:23,709 --> 00:49:28,430
configuration options of es or the

00:49:26,599 --> 00:49:30,979
governor money peaceful you can do the

00:49:28,430 --> 00:49:34,160
same type of analysis comparing yes with

00:49:30,979 --> 00:49:37,099
whatever other scheduler you actually

00:49:34,160 --> 00:49:39,170
have and get the same type of numbers

00:49:37,099 --> 00:49:41,569
and then say and see if you are better

00:49:39,170 --> 00:49:44,559
or not that's basically the same that's

00:49:41,569 --> 00:49:44,559
basically what happened actually

00:50:00,719 --> 00:50:05,200
there's data that's available for like

00:50:03,369 --> 00:50:07,359
kind of development boards that are open

00:50:05,200 --> 00:50:11,140
and accessible and in this data that's

00:50:07,359 --> 00:50:15,359
been done for product ization and we

00:50:11,140 --> 00:50:15,359
don't have that data in a shareable form

00:50:18,390 --> 00:50:24,519
yeah sure I mean the sites will be

00:50:21,719 --> 00:50:28,150
closely doing it they're not yet there

00:50:24,519 --> 00:50:30,369
but yes yeah I just wanted to add to

00:50:28,150 --> 00:50:32,229
that so you're talking about metrics so

00:50:30,369 --> 00:50:35,559
I'm giving a presentation actually on

00:50:32,229 --> 00:50:36,940
benchmarking schedu toe and Android so

00:50:35,559 --> 00:50:38,859
that'll cover some different metrics I

00:50:36,940 --> 00:50:41,170
did some testing also of their tree so

00:50:38,859 --> 00:50:43,089
that he combined es with skagit till

00:50:41,170 --> 00:50:44,680
which is the latest schedule or guided

00:50:43,089 --> 00:50:46,869
frequency governor that's upstream and

00:50:44,680 --> 00:50:48,069
then your I think you have more data in

00:50:46,869 --> 00:50:50,079
a hacking session right yes you were

00:50:48,069 --> 00:50:51,579
going to provide as well so there's lots

00:50:50,079 --> 00:50:53,709
more there if you were that's it's just

00:50:51,579 --> 00:51:00,489
the governor aspect of it but there is

00:50:53,709 --> 00:51:03,369
more information there one thing to

00:51:00,489 --> 00:51:06,430
point out is that the Lisa session which

00:51:03,369 --> 00:51:08,140
Patrick will do now no it's the now I'd

00:51:06,430 --> 00:51:09,940
see I think it's after this thing I are

00:51:08,140 --> 00:51:11,829
not so aware but yes so there is cooling

00:51:09,940 --> 00:51:14,079
available that can help performing those

00:51:11,829 --> 00:51:24,190
kind of analysis and a very fine grain

00:51:14,079 --> 00:51:28,569
late right any of the questions from

00:51:24,190 --> 00:51:31,440
anyone okay you go I call it very much

00:51:28,569 --> 00:51:31,440
thank you thank you

00:51:40,440 --> 00:51:42,500

YouTube URL: https://www.youtube.com/watch?v=3h8w6BoI1tY


