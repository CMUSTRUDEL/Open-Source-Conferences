Title: LAS16-209: Finished and Upcoming Projects in LMG
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-209: Finished and Upcoming Projects in LMG
Speakers: Yongqui Liu, Satish Patel, Bernhard Rosenkränzer
Date: September 27, 2016

★ Session Description ★
This survey of topics covers the engineering output of recent Android related projects in LMG and some future plans. This includes Memory Allocators, Filesystems, LCR news, Work on both gcc and clang based toolchains, Increased participation in upstream development as well as a quick overview of some upcoming topics. Kernel possible topics: Generic Build: where we are at.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-209
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-209/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:09,290 --> 00:00:15,870
about finished an upcoming projects in

00:00:12,120 --> 00:00:19,109
lmg where we will essentially talk about

00:00:15,870 --> 00:00:22,289
what the various teams in LMG have been

00:00:19,109 --> 00:00:27,050
doing over the last couple of months and

00:00:22,289 --> 00:00:29,570
what we will be looking at next so first

00:00:27,050 --> 00:00:32,610
my team and I are going to talk about

00:00:29,570 --> 00:00:35,190
projects in the AOSP engineering team

00:00:32,610 --> 00:00:38,820
then John will give an update on hi

00:00:35,190 --> 00:00:41,190
Keith in AOSP and then German will give

00:00:38,820 --> 00:00:45,870
an update on what has been going on here

00:00:41,190 --> 00:00:49,410
in the our team so we have a huge list

00:00:45,870 --> 00:00:53,940
of projects that got finished this is

00:00:49,410 --> 00:00:57,059
what all teams and LMG did so we had

00:00:53,940 --> 00:00:59,609
memory allocator analysis were very pet

00:00:57,059 --> 00:01:02,940
Bionic with different implementations of

00:00:59,609 --> 00:01:06,030
the malach function and its related

00:01:02,940 --> 00:01:08,640
functions i agree i log free denna file

00:01:06,030 --> 00:01:11,600
system analysis where we analyzed what

00:01:08,640 --> 00:01:15,030
file systems are best for use with AOSP

00:01:11,600 --> 00:01:19,229
we updated LCR quite a bit switching to

00:01:15,030 --> 00:01:22,380
a OS pn and adding more patches potting

00:01:19,229 --> 00:01:24,920
our old patches we built up increase

00:01:22,380 --> 00:01:28,380
participation in upstream development

00:01:24,920 --> 00:01:30,630
tried to upstream the system UI carrier

00:01:28,380 --> 00:01:32,640
pitch that was given to us by one member

00:01:30,630 --> 00:01:36,479
the status tears it's come is there any

00:01:32,640 --> 00:01:39,420
review queue but everything has been pet

00:01:36,479 --> 00:01:42,360
to work this post and master and cleaned

00:01:39,420 --> 00:01:45,829
up a little so it should get in as soon

00:01:42,360 --> 00:01:50,880
as someone upstream takes a look at it

00:01:45,829 --> 00:01:55,369
done we started a new LCR built that

00:01:50,880 --> 00:01:58,259
focuses on via devices with low memory

00:01:55,369 --> 00:02:01,829
we managed to get Colonel to built with

00:01:58,259 --> 00:02:05,610
the clang compiler to resulting system

00:02:01,829 --> 00:02:08,250
boots runs Android were with a couple of

00:02:05,610 --> 00:02:10,110
minor drawbacks like some applications

00:02:08,250 --> 00:02:13,410
not working which are still being

00:02:10,110 --> 00:02:16,050
debugged we got up to

00:02:13,410 --> 00:02:18,630
integrated into the MLC our bills which

00:02:16,050 --> 00:02:25,740
are dear been our releases for members

00:02:18,630 --> 00:02:30,180
only and under chromium site we got a

00:02:25,740 --> 00:02:34,650
64-bit built for of chromium with clang

00:02:30,180 --> 00:02:37,920
and receive 4am be eight and also farm

00:02:34,650 --> 00:02:41,190
be seven we updated the internal if

00:02:37,920 --> 00:02:46,580
traffic turbo 2014 90 and updated

00:02:41,190 --> 00:02:46,580
chromium's version of said lip to 128

00:02:46,880 --> 00:02:53,390
the art team improved instruction

00:02:49,530 --> 00:02:57,240
scheduling and instruction selection

00:02:53,390 --> 00:03:00,170
investigated new jet mode did some

00:02:57,240 --> 00:03:04,170
performance investigation on 32-bit

00:03:00,170 --> 00:03:07,440
hiking airport was unable to nao SP

00:03:04,170 --> 00:03:10,080
upstream we have an open graphics tech

00:03:07,440 --> 00:03:12,780
for Android enablement for running for

00:03:10,080 --> 00:03:17,190
example on a nexus 7 which is based on

00:03:12,780 --> 00:03:20,760
fridge we know we always rebase AOSP

00:03:17,190 --> 00:03:22,830
patches to tip kernels we are not going

00:03:20,760 --> 00:03:26,370
to get into details on this one because

00:03:22,830 --> 00:03:30,420
I'm it just covered it in the previous

00:03:26,370 --> 00:03:33,300
talk they're trying to enable Nexus

00:03:30,420 --> 00:03:36,060
devices with mainland kernels and of

00:03:33,300 --> 00:03:39,150
course the mainland AOSP user space on

00:03:36,060 --> 00:03:42,150
top of it is already enabled we have a

00:03:39,150 --> 00:03:45,480
GBM mini GBM based Greylock

00:03:42,150 --> 00:03:50,930
implementation upstream TM a buff

00:03:45,480 --> 00:03:50,930
support in mesa for android EG areas

00:03:51,290 --> 00:03:57,209
okay next we are going to get some

00:03:53,850 --> 00:04:00,590
details a memory analysis Satish do this

00:03:57,209 --> 00:04:00,590
probably what you want to talk about

00:04:10,890 --> 00:04:17,609
so yeah so primary focus was to analyze

00:04:14,760 --> 00:04:20,340
the various memory alligators that can

00:04:17,609 --> 00:04:22,580
be used on the low memory stuff but we

00:04:20,340 --> 00:04:26,370
got some interesting result though and

00:04:22,580 --> 00:04:28,260
we have tried to patch up in the various

00:04:26,370 --> 00:04:31,260
memory allocated algorithm such like

00:04:28,260 --> 00:04:36,090
Jamie log dl Melek that was a part of

00:04:31,260 --> 00:04:38,520
the regular USB the couple of new one is

00:04:36,090 --> 00:04:40,650
Ned malad TC may log TC Malaga is a

00:04:38,520 --> 00:04:45,440
default memory allocator as a part of

00:04:40,650 --> 00:04:49,650
chromium it's being used now there's the

00:04:45,440 --> 00:04:52,800
Emir salmela administer is a full lips

00:04:49,650 --> 00:04:54,919
implemented which is Posey POSIX

00:04:52,800 --> 00:04:57,150
compliant we have just picked up the

00:04:54,919 --> 00:04:58,770
allocation part and we have tried to

00:04:57,150 --> 00:05:01,380
analyze the same thing there is

00:04:58,770 --> 00:05:07,110
something called TLS f it's a two-level

00:05:01,380 --> 00:05:10,860
segregated malaka algorithms and one is

00:05:07,110 --> 00:05:14,460
the look less located on the GPL 3 dot 0

00:05:10,860 --> 00:05:16,680
but there is some of each over there so

00:05:14,460 --> 00:05:21,060
we couldn't able to analyze for the

00:05:16,680 --> 00:05:23,940
large number of allocations the the main

00:05:21,060 --> 00:05:26,520
challenges that we found is we need to

00:05:23,940 --> 00:05:32,160
write the couple of atomic routines for

00:05:26,520 --> 00:05:34,050
the 64-bit platforms and the few dummy

00:05:32,160 --> 00:05:36,870
and the wrapper calls which are required

00:05:34,050 --> 00:05:40,260
for the Bionic integrations we also

00:05:36,870 --> 00:05:42,990
quoted the few benchmark which comes in

00:05:40,260 --> 00:05:46,110
a part of the regular memory allocations

00:05:42,990 --> 00:05:49,470
is the TL SF and the t th t test comes

00:05:46,110 --> 00:05:51,840
with an envelope and we have out the

00:05:49,470 --> 00:05:56,160
fragmentation and I say script which can

00:05:51,840 --> 00:05:59,669
basically run the taste various memory

00:05:56,160 --> 00:06:01,080
use case and then just measure the one

00:05:59,669 --> 00:06:03,240
of the available memory SAT there on

00:06:01,080 --> 00:06:08,190
time and what is the fragmentation

00:06:03,240 --> 00:06:11,490
impact on that so we will talk about

00:06:08,190 --> 00:06:13,680
this if somebody interested we can go

00:06:11,490 --> 00:06:17,760
through in detail line USB micro

00:06:13,680 --> 00:06:21,030
conference but just to summarize in

00:06:17,760 --> 00:06:23,050
terms of the static reduction the net

00:06:21,030 --> 00:06:26,669
ballot has

00:06:23,050 --> 00:06:29,409
really good stuff nan mulaqat the TL SF

00:06:26,669 --> 00:06:31,090
but if you look at the runtime

00:06:29,409 --> 00:06:33,940
performance with the multi-threaded

00:06:31,090 --> 00:06:39,069
application DC Malik has a really good

00:06:33,940 --> 00:06:41,500
performance that there is some

00:06:39,069 --> 00:06:45,400
configuration called J email or case VLT

00:06:41,500 --> 00:06:47,470
it just disabled the the thread cash and

00:06:45,400 --> 00:06:50,590
it's not giving a good performance

00:06:47,470 --> 00:06:53,710
doe-eyed on the whites existing in the

00:06:50,590 --> 00:06:56,110
USB confusion right now could be good

00:06:53,710 --> 00:06:59,800
might be for a good reason I don't know

00:06:56,110 --> 00:07:02,229
though but when we run the the

00:06:59,800 --> 00:07:04,210
fragmentation scripts we found that the

00:07:02,229 --> 00:07:05,949
Jamie lock has a really good runtime

00:07:04,210 --> 00:07:08,650
memory available with the use case when

00:07:05,949 --> 00:07:10,659
the couple of applications like video or

00:07:08,650 --> 00:07:13,719
the image or the you are downloading

00:07:10,659 --> 00:07:16,599
something they have the good amount of

00:07:13,719 --> 00:07:18,370
memory available at the runtime the same

00:07:16,599 --> 00:07:20,169
case with the T similar but this Malik

00:07:18,370 --> 00:07:22,750
just pulled the memory initially and

00:07:20,169 --> 00:07:28,120
keep it in the user space rather than

00:07:22,750 --> 00:07:33,069
its being available as a generic memory

00:07:28,120 --> 00:07:36,969
which can be used by the other space the

00:07:33,069 --> 00:07:40,000
net dialogue the developers he's we hunt

00:07:36,969 --> 00:07:42,699
on the support from the developer so he

00:07:40,000 --> 00:07:45,819
just points to the the J mellow for the

00:07:42,699 --> 00:07:52,210
future use so there might not be a

00:07:45,819 --> 00:07:54,819
support for the net dialogue on the file

00:07:52,210 --> 00:07:57,940
system we have investigated a couple of

00:07:54,819 --> 00:08:00,789
stuff we have started with the EXT for

00:07:57,940 --> 00:08:05,199
the big e RS is nothing but the beat

00:08:00,789 --> 00:08:07,150
rebased file system then this the one is

00:08:05,199 --> 00:08:12,490
deftly affairs it's implemented by the

00:08:07,150 --> 00:08:14,529
Samsung the Nilla has a disco chef s the

00:08:12,490 --> 00:08:16,930
btrfs we have tried the various

00:08:14,529 --> 00:08:20,440
compression algorithms that leave and as

00:08:16,930 --> 00:08:23,620
a filtered for also so we have generated

00:08:20,440 --> 00:08:27,629
a couple of analysis it's it's in detail

00:08:23,620 --> 00:08:32,199
we will go through in the USB confluence

00:08:27,629 --> 00:08:35,110
so we have measured from the small data

00:08:32,199 --> 00:08:35,940
load to the harlot I rode up to fight

00:08:35,110 --> 00:08:39,690
well MB

00:08:35,940 --> 00:08:44,220
we also analyzed the disinfect and the

00:08:39,690 --> 00:08:47,250
fragmentations for this file systems the

00:08:44,220 --> 00:08:49,560
main challenges are you know just it's

00:08:47,250 --> 00:08:52,170
less like how we can hook up this file

00:08:49,560 --> 00:08:54,480
system to the regular Android build that

00:08:52,170 --> 00:08:56,010
was the main challenges and the couple

00:08:54,480 --> 00:08:58,080
of benchmarking tool which are not

00:08:56,010 --> 00:09:03,060
available in the android that we have

00:08:58,080 --> 00:09:06,750
put it just like pony and the idea we

00:09:03,060 --> 00:09:09,750
also return few scripts which can just

00:09:06,750 --> 00:09:12,840
overload the android system with the

00:09:09,750 --> 00:09:15,480
couple of use cases and just analyze

00:09:12,840 --> 00:09:20,280
what is a distinct packed and what is

00:09:15,480 --> 00:09:24,930
the read and write performance when the

00:09:20,280 --> 00:09:26,460
system gets so already so all the graphs

00:09:24,930 --> 00:09:29,010
are available i truly will go through

00:09:26,460 --> 00:09:32,790
the USB micro conference again but they

00:09:29,010 --> 00:09:35,940
not sell the f2f s at the EXT 4 has a

00:09:32,790 --> 00:09:38,100
really good performance of and the data

00:09:35,940 --> 00:09:41,310
load size is really small it's like 4m

00:09:38,100 --> 00:09:44,730
br1m be deaf to FS is a really good

00:09:41,310 --> 00:09:47,340
performed for the right and the ext4 for

00:09:44,730 --> 00:09:50,310
the week Neal FS has a very good school

00:09:47,340 --> 00:09:56,430
on the SQLite operation but the only

00:09:50,310 --> 00:09:58,410
drawback is it just overload the disk

00:09:56,430 --> 00:10:00,030
space so we need to regulate on the

00:09:58,410 --> 00:10:03,300
garbage collector in the background so

00:10:00,030 --> 00:10:06,360
it's not I mean it's not recommended for

00:10:03,300 --> 00:10:09,030
them a system yet though the score

00:10:06,360 --> 00:10:11,160
surface has a google good before I or it

00:10:09,030 --> 00:10:13,290
so it can be used for the recall all the

00:10:11,160 --> 00:10:14,910
read-only partitions and as the name

00:10:13,290 --> 00:10:17,460
suggests of course itself is a

00:10:14,910 --> 00:10:19,020
compressed file system so they cannot be

00:10:17,460 --> 00:10:21,720
used for the data partition but it can

00:10:19,020 --> 00:10:26,040
be used for the vendor binaries and now

00:10:21,720 --> 00:10:29,100
all the system level libraries btrfs has

00:10:26,040 --> 00:10:33,750
really good numbers in terms of all the

00:10:29,100 --> 00:10:36,960
data loads over the four mb but the only

00:10:33,750 --> 00:10:39,630
drawback with the btrfs is the high cpu

00:10:36,960 --> 00:10:41,430
utilization because they are running on

00:10:39,630 --> 00:10:44,120
more number of threads in the background

00:10:41,430 --> 00:10:46,350
compared to the other file system and

00:10:44,120 --> 00:10:49,769
yeah there is a high risk associated

00:10:46,350 --> 00:10:52,559
with recovery when the power goes off

00:10:49,769 --> 00:10:55,139
so it can be useful for the all the

00:10:52,559 --> 00:10:59,300
power backup system maybe in flight to

00:10:55,139 --> 00:10:59,300
the Mid system may be recording devices

00:10:59,929 --> 00:11:07,110
the one good idea is we can make use of

00:11:03,360 --> 00:11:08,939
the hybrid system where the based on the

00:11:07,110 --> 00:11:13,470
data load we can put the data on the

00:11:08,939 --> 00:11:15,829
various partitions which can give us the

00:11:13,470 --> 00:11:18,899
good read and the right at the runtime

00:11:15,829 --> 00:11:21,989
we still need to perform the impact on

00:11:18,899 --> 00:11:23,999
the file system egg as it ages we'll

00:11:21,989 --> 00:11:25,589
talk about more during the USB

00:11:23,999 --> 00:11:28,970
conference but this is overall summary

00:11:25,589 --> 00:11:28,970
on the file system thank you

00:11:42,080 --> 00:11:44,140
you

00:11:44,240 --> 00:11:53,930
here dr. Osama reporter what we to

00:11:48,270 --> 00:11:53,930
unfold Althea in the past six months

00:11:54,620 --> 00:12:01,440
till August we release the released

00:11:58,530 --> 00:12:05,010
images for high key and who know based

00:12:01,440 --> 00:12:13,190
on the marshmallow version and the from

00:12:05,010 --> 00:12:13,190
say September we release based on Nicole

00:12:17,030 --> 00:12:35,540
and with her with her from other teams

00:12:26,600 --> 00:12:39,960
we improved the we improved the build

00:12:35,540 --> 00:12:43,910
process and the release process and and

00:12:39,960 --> 00:12:49,980
also we really small cells more

00:12:43,910 --> 00:12:55,050
artifacts to help her user understand

00:12:49,980 --> 00:13:02,220
and reuse the release images we also

00:12:55,050 --> 00:13:10,940
integrate the out of t into M member al

00:13:02,220 --> 00:13:10,940
cr-v the fully automated validations

00:13:12,950 --> 00:13:27,240
also I released here switch to a as Cano

00:13:17,040 --> 00:13:32,280
before to nobles and update on the base

00:13:27,240 --> 00:13:37,680
the existing patches up made of Medicine

00:13:32,280 --> 00:13:41,130
patches for marshmallow to negative

00:13:37,680 --> 00:13:46,260
that's not finished yet review continued

00:13:41,130 --> 00:13:50,400
to other optimizations for nugget in the

00:13:46,260 --> 00:13:53,840
future we reopened also video idea

00:13:50,400 --> 00:13:56,660
support other support

00:13:53,840 --> 00:14:05,200
spotter for other bottle occur as 15 and

00:13:56,660 --> 00:14:05,200
as in in twice RCR that's all

00:14:16,730 --> 00:14:23,810
so on the toolchain side we modified

00:14:19,760 --> 00:14:30,529
AOSP em so it can be built with GCC 62

00:14:23,810 --> 00:14:32,690
and binutils 227 so far there's only 25

00:14:30,529 --> 00:14:36,050
patches that we need to make that work

00:14:32,690 --> 00:14:38,290
to have been accepted Rihanna are still

00:14:36,050 --> 00:14:40,730
in the queue for acceptance because

00:14:38,290 --> 00:14:43,579
upstream isn't really serious about

00:14:40,730 --> 00:14:45,889
looking at them anymore because 4nn on

00:14:43,579 --> 00:14:52,250
only clang will be supported as a

00:14:45,889 --> 00:14:55,430
compiler so far we haven't done this on

00:14:52,250 --> 00:15:01,670
Android end yet but that is definitely

00:14:55,430 --> 00:15:05,180
still on our to-do list and given NS

00:15:01,670 --> 00:15:10,120
transitioning to clang tool trains we

00:15:05,180 --> 00:15:13,579
have investigated well some more of

00:15:10,120 --> 00:15:16,910
olivium and clang work we can now build

00:15:13,579 --> 00:15:19,310
AOSP end and asp master with clang

00:15:16,910 --> 00:15:21,560
versions based on upstream master

00:15:19,310 --> 00:15:25,160
instead of just a version that is

00:15:21,560 --> 00:15:28,250
included in a OSP does some work in

00:15:25,160 --> 00:15:32,389
progress on creating CI builds of Clank

00:15:28,250 --> 00:15:34,760
to verify performance impacts and also

00:15:32,389 --> 00:15:38,120
to detect errors as soon as they happen

00:15:34,760 --> 00:15:41,120
upstream not waiting for new release or

00:15:38,120 --> 00:15:43,910
anything and we are continuously

00:15:41,120 --> 00:15:47,329
adapting the user space to make sure it

00:15:43,910 --> 00:15:49,310
remains compatible for example when

00:15:47,329 --> 00:15:52,610
clang hiss adding new warnings we

00:15:49,310 --> 00:15:56,060
sometimes have to get rid of HW error of

00:15:52,610 --> 00:15:57,860
fixed some code preferably sometimes we

00:15:56,060 --> 00:16:02,180
run into a neurosurgeon failures because

00:15:57,860 --> 00:16:04,670
new versions of clang detect more things

00:16:02,180 --> 00:16:06,470
going wrong sometimes of course we also

00:16:04,670 --> 00:16:10,370
run into box because we are dealing with

00:16:06,470 --> 00:16:12,949
comparison app shots and based on that

00:16:10,370 --> 00:16:18,399
we report those bugs and upstream fixes

00:16:12,949 --> 00:16:20,630
whenever possible another key goal

00:16:18,399 --> 00:16:23,079
between the last connect and this one

00:16:20,630 --> 00:16:26,029
was increasing upstream participation

00:16:23,079 --> 00:16:29,120
every member of the AOSP engineering

00:16:26,029 --> 00:16:30,499
team repeatedly gets to task to do at

00:16:29,120 --> 00:16:34,129
least ten upstream

00:16:30,499 --> 00:16:37,009
use every month we are continuing to

00:16:34,129 --> 00:16:39,289
update projects in the external tree to

00:16:37,009 --> 00:16:41,509
new upstream versions because those

00:16:39,289 --> 00:16:44,389
don't seem to be all that actively

00:16:41,509 --> 00:16:47,359
maintained an AOSP upstream and it would

00:16:44,389 --> 00:16:50,209
be nice to have more active maintenance

00:16:47,359 --> 00:16:55,279
there and we are trying to set ourselves

00:16:50,209 --> 00:16:57,499
up to help out there so far as limited

00:16:55,279 --> 00:17:02,089
acceptance / probably just because

00:16:57,499 --> 00:17:04,639
people upstream are not devoting a lot

00:17:02,089 --> 00:17:08,929
of time to looking at external projects

00:17:04,639 --> 00:17:12,679
and we also didn't have enough resources

00:17:08,929 --> 00:17:14,720
to actually make sure everyone does

00:17:12,679 --> 00:17:18,379
those 10 upstream reviews because of

00:17:14,720 --> 00:17:21,740
some sunnies will be being pulled off to

00:17:18,379 --> 00:17:24,079
other tasks but we do think that

00:17:21,740 --> 00:17:26,839
upstream work is getting even more

00:17:24,079 --> 00:17:29,059
important with Android one style devices

00:17:26,839 --> 00:17:31,190
that have a fixed system partition that

00:17:29,059 --> 00:17:34,399
will be used for every device becoming

00:17:31,190 --> 00:17:37,789
more calm and also with Android moving

00:17:34,399 --> 00:17:39,470
to monthly security updates and some

00:17:37,789 --> 00:17:42,590
vendors really taking heat over not

00:17:39,470 --> 00:17:44,539
applying them in time it's definitely a

00:17:42,590 --> 00:17:50,149
good idea to stay closer to upstream

00:17:44,539 --> 00:17:52,549
AOSP and members will probably start

00:17:50,149 --> 00:17:55,369
realizing that and try to stick closer

00:17:52,549 --> 00:17:57,889
to upstream which just means all the

00:17:55,369 --> 00:18:02,899
patches that our relevant should be up

00:17:57,889 --> 00:18:05,480
streamed next thing was to a system UI

00:18:02,899 --> 00:18:08,769
carrier status display which is a patch

00:18:05,480 --> 00:18:12,710
that comes out of the country

00:18:08,769 --> 00:18:14,750
essentially it modifies the code in a

00:18:12,710 --> 00:18:18,769
row speeded displays to carry our status

00:18:14,750 --> 00:18:22,159
so lazy one bar to four bars so that

00:18:18,769 --> 00:18:25,279
carriers can customize it what we did so

00:18:22,159 --> 00:18:29,629
far as rebuys it to a OSP master the

00:18:25,279 --> 00:18:31,250
patch we got was based on Android 5 we

00:18:29,629 --> 00:18:34,460
cleaned up a couple of minor issues

00:18:31,250 --> 00:18:35,530
wherever unnecessary API changes rebased

00:18:34,460 --> 00:18:40,780
it again when

00:18:35,530 --> 00:18:42,250
ESPN got released so from our view does

00:18:40,780 --> 00:18:45,340
this looking good but it's not yet

00:18:42,250 --> 00:18:47,080
accepted upstream probably again because

00:18:45,340 --> 00:18:52,960
upstream has slightly different

00:18:47,080 --> 00:18:55,590
priorities next is eye on Laura do you

00:18:52,960 --> 00:18:55,590
want to come up

00:19:09,580 --> 00:19:15,590
it's the one okay yeah so I on as the

00:19:13,490 --> 00:19:17,180
framework I'd probably say is make is

00:19:15,590 --> 00:19:20,780
making progress although it's still

00:19:17,180 --> 00:19:23,030
slower the eventual goal is still to try

00:19:20,780 --> 00:19:26,150
and move on as a self-contained

00:19:23,030 --> 00:19:28,309
framework into drivers and look Android

00:19:26,150 --> 00:19:31,670
similar to what happened to the binder

00:19:28,309 --> 00:19:32,660
driver I think that's a moving forward I

00:19:31,670 --> 00:19:34,970
think we'll probably just focus on that

00:19:32,660 --> 00:19:37,760
users space API is first and then as

00:19:34,970 --> 00:19:39,380
people come up with these use cases for

00:19:37,760 --> 00:19:43,630
internal then we can move it adding the

00:19:39,380 --> 00:19:45,860
internal AP is as far as work that gun

00:19:43,630 --> 00:19:48,590
there's been some work about cleaning up

00:19:45,860 --> 00:19:50,270
the I octaves those have generally been

00:19:48,590 --> 00:19:52,760
reviewed and I just need to do a little

00:19:50,270 --> 00:19:54,770
bit more work there too added a few more

00:19:52,760 --> 00:19:59,179
I apples to hopefully make the ABI work

00:19:54,770 --> 00:20:00,890
easier so I heard the slide last week

00:19:59,179 --> 00:20:03,440
and I just got before this i just got

00:20:00,890 --> 00:20:06,650
done chatting with them armed about us

00:20:03,440 --> 00:20:08,270
and the platform device support and this

00:20:06,650 --> 00:20:10,309
is another case where I don't think it's

00:20:08,270 --> 00:20:13,370
actually quite as done as I thought it

00:20:10,309 --> 00:20:14,480
was so I think some more work needs to

00:20:13,370 --> 00:20:17,540
be done there to try and figure out

00:20:14,480 --> 00:20:19,250
exactly what to do for specifying I on

00:20:17,540 --> 00:20:22,130
platform support just because there's

00:20:19,250 --> 00:20:23,830
still some objections to having I on

00:20:22,130 --> 00:20:27,640
describing the bite in the device tree

00:20:23,830 --> 00:20:30,260
especially for the hope of what goes on

00:20:27,640 --> 00:20:32,510
hopefully for eventually moving clients

00:20:30,260 --> 00:20:34,250
away from ion is that they don't want

00:20:32,510 --> 00:20:35,809
that support in the device treaters

00:20:34,250 --> 00:20:37,700
because device tree supposed to be an

00:20:35,809 --> 00:20:41,059
ABI so moving away from that is kind of

00:20:37,700 --> 00:20:43,190
difficult and then cache coherency is

00:20:41,059 --> 00:20:45,470
another one that's been sort of a sore

00:20:43,190 --> 00:20:48,200
sticking point some iron currently does

00:20:45,470 --> 00:20:51,830
the exploit he has make some calls to

00:20:48,200 --> 00:20:53,540
DNA kash AAP eyes which are incorrect so

00:20:51,830 --> 00:20:55,760
I've been to come up with a couple of

00:20:53,540 --> 00:20:58,460
different proposals about trying to do

00:20:55,760 --> 00:21:00,080
those and none of them have really stuck

00:20:58,460 --> 00:21:02,030
so it's sort of two steps forward one

00:21:00,080 --> 00:21:05,120
point five steps back as far as what

00:21:02,030 --> 00:21:06,710
exactly to do there so I need to take

00:21:05,120 --> 00:21:09,260
some more time to think about that but

00:21:06,710 --> 00:21:11,809
so I think part of all the problems on

00:21:09,260 --> 00:21:13,580
it's sort of gettin stuck with Ryan is

00:21:11,809 --> 00:21:15,770
that there isn't sort of a clear picture

00:21:13,580 --> 00:21:17,060
about exactly what I on is actually

00:21:15,770 --> 00:21:19,550
being used for so I'm going to talk

00:21:17,060 --> 00:21:21,590
about this in the AOSP session on

00:21:19,550 --> 00:21:23,720
Thursday so if you have opinions on

00:21:21,590 --> 00:21:25,789
exactly how you're using ion or what

00:21:23,720 --> 00:21:26,960
exactly did like lying to do um please

00:21:25,789 --> 00:21:28,220
come and contribute because I think

00:21:26,960 --> 00:21:32,860
that'll go a long way towards helping

00:21:28,220 --> 00:21:32,860
things go out of staging so thanks

00:21:40,140 --> 00:21:43,830
hey so I'm John I'm going to talk a

00:21:42,540 --> 00:21:46,680
little bit about the work that's been

00:21:43,830 --> 00:21:49,080
going on for high key and AOSP over the

00:21:46,680 --> 00:21:50,370
last six months gonna try to be fast I'm

00:21:49,080 --> 00:21:52,620
sorry I've got all this a lot of slides

00:21:50,370 --> 00:21:54,540
I know guys a lot of stuff to cover too

00:21:52,620 --> 00:21:57,480
so in case you missed it at the last

00:21:54,540 --> 00:21:59,100
connect high key is officially supported

00:21:57,480 --> 00:22:00,750
in AOSP so that means that everything

00:21:59,100 --> 00:22:03,480
that you need to build images for

00:22:00,750 --> 00:22:04,820
android can be found in AOSP so get you

00:22:03,480 --> 00:22:06,480
can get everything straight from google

00:22:04,820 --> 00:22:08,550
there's been kind of we've been

00:22:06,480 --> 00:22:09,840
continuing this collaboration we've been

00:22:08,550 --> 00:22:11,940
working closely with the number of folks

00:22:09,840 --> 00:22:13,740
at Google but we're also making sure to

00:22:11,940 --> 00:22:15,360
submit all of our changes through the

00:22:13,740 --> 00:22:17,040
public AOSP Garrett so we're trying to

00:22:15,360 --> 00:22:19,110
kind of work as a community

00:22:17,040 --> 00:22:22,140
collaborators and open as much as

00:22:19,110 --> 00:22:23,430
possible a whole bunch of features have

00:22:22,140 --> 00:22:24,810
been added a couple things to highlight

00:22:23,430 --> 00:22:27,300
here so we've updated de nougat

00:22:24,810 --> 00:22:28,920
basically the week it was released we've

00:22:27,300 --> 00:22:30,810
been moving we moved to the for for a

00:22:28,920 --> 00:22:32,280
stable base kernel and we've been

00:22:30,810 --> 00:22:35,490
staying current with the dash stable

00:22:32,280 --> 00:22:38,940
branch other great features that we've

00:22:35,490 --> 00:22:42,540
added hdmi and USB audio thanks to a lot

00:22:38,940 --> 00:22:44,460
of work that the shop put in we've added

00:22:42,540 --> 00:22:46,620
also haljan has done a ton of work

00:22:44,460 --> 00:22:47,910
trying to get the bootloader so that the

00:22:46,620 --> 00:22:50,760
bootloader source is also integrated

00:22:47,910 --> 00:22:52,920
into AOSP he's also added a whole bunch

00:22:50,760 --> 00:22:55,200
of android specific features to the

00:22:52,920 --> 00:22:57,360
bootloader including a boot support the

00:22:55,200 --> 00:23:00,450
unique serial number set up and the fast

00:22:57,360 --> 00:23:02,520
boot boot support I'm it added the USB

00:23:00,450 --> 00:23:04,500
tethering which has been great and then

00:23:02,520 --> 00:23:06,240
also the overlay manager and the fick

00:23:04,500 --> 00:23:08,610
debugger are two features that Dimitri

00:23:06,240 --> 00:23:09,690
fruit from google added himself and so

00:23:08,610 --> 00:23:10,770
this has kind of been one of these nice

00:23:09,690 --> 00:23:13,350
things where you know we're getting a

00:23:10,770 --> 00:23:14,940
lot of kind of team work across Google

00:23:13,350 --> 00:23:18,510
and a lot of different features being

00:23:14,940 --> 00:23:19,680
added from different places some of the

00:23:18,510 --> 00:23:22,260
work that's been in progress so the

00:23:19,680 --> 00:23:23,490
energyaware scheduler there's been a lot

00:23:22,260 --> 00:23:26,850
of talks about this will have some talks

00:23:23,490 --> 00:23:29,340
to around thursday in the AOSP micro

00:23:26,850 --> 00:23:31,770
summit there's been a lot of help from

00:23:29,340 --> 00:23:35,820
linaro teams to help benchmark EAS

00:23:31,770 --> 00:23:38,940
running on high key and then also some

00:23:35,820 --> 00:23:40,560
of the initial work to use high key as a

00:23:38,940 --> 00:23:46,290
kind of reference example of how to

00:23:40,560 --> 00:23:48,330
integrate EAS into uh I guess an Android

00:23:46,290 --> 00:23:50,100
platform it's been a lot of

00:23:48,330 --> 00:23:52,320
collaboration between

00:23:50,100 --> 00:23:54,360
arm and Google and linaro so I really

00:23:52,320 --> 00:23:56,789
appreciate a lot of the help that folks

00:23:54,360 --> 00:23:59,130
at Google in arm have provided here and

00:23:56,789 --> 00:24:02,010
this managed to get EAS merged into the

00:23:59,130 --> 00:24:04,890
Android 44 tree and also integrated into

00:24:02,010 --> 00:24:06,150
high key last week we also have opti

00:24:04,890 --> 00:24:08,970
integrations we've been working with the

00:24:06,150 --> 00:24:12,600
security team in linaro to get the opti

00:24:08,970 --> 00:24:15,030
kernel driver enabled against the Heike

00:24:12,600 --> 00:24:16,110
AOSP colonel they also have opti support

00:24:15,030 --> 00:24:17,789
for the bootloader that hasn't yet

00:24:16,110 --> 00:24:20,160
landed in AOSP but we hope will have

00:24:17,789 --> 00:24:21,809
that soon we also have the overlay

00:24:20,160 --> 00:24:23,340
manager this is a feature that Dimitri

00:24:21,809 --> 00:24:24,690
at Google actually is implemented it's

00:24:23,340 --> 00:24:27,270
kind of nice because a lot of times the

00:24:24,690 --> 00:24:30,210
Android devices are fairly static

00:24:27,270 --> 00:24:31,620
devices they maybe have USB expansion

00:24:30,210 --> 00:24:34,080
but that's about it and that's probable

00:24:31,620 --> 00:24:36,630
so being able to handle a lot of these

00:24:34,080 --> 00:24:38,970
non probable buses on a device board is

00:24:36,630 --> 00:24:40,289
really difficult so Dimitri came up with

00:24:38,970 --> 00:24:42,090
a solution which basically allows a

00:24:40,289 --> 00:24:44,549
driver to be able to select different

00:24:42,090 --> 00:24:46,770
device tree overlay objects that are in

00:24:44,549 --> 00:24:48,870
the device tree and be able to select

00:24:46,770 --> 00:24:50,549
which configuration to come up at boot

00:24:48,870 --> 00:24:53,850
and so this allows us to support a

00:24:50,549 --> 00:24:55,890
number of different mezzanine boards on

00:24:53,850 --> 00:24:57,870
high key without having to change the

00:24:55,890 --> 00:24:59,490
colonel usually have to specify a boot

00:24:57,870 --> 00:25:01,500
option and this is something that

00:24:59,490 --> 00:25:03,210
Dimitri's been working on making kind of

00:25:01,500 --> 00:25:04,590
a generic implementation and submitting

00:25:03,210 --> 00:25:06,419
upstream and it may actually end up

00:25:04,590 --> 00:25:09,530
being pushed instead of in a driver but

00:25:06,419 --> 00:25:13,049
more into kind of the device tree core

00:25:09,530 --> 00:25:15,120
also factory images this is something

00:25:13,049 --> 00:25:18,059
again sholes been super helpful with

00:25:15,120 --> 00:25:20,070
wanna say thanks a lot before so this

00:25:18,059 --> 00:25:21,630
basically one of the problems we've had

00:25:20,070 --> 00:25:23,880
over the last six months is that if you

00:25:21,630 --> 00:25:27,059
did want to create images for high key

00:25:23,880 --> 00:25:28,710
you had to basically sync the AOSP

00:25:27,059 --> 00:25:30,659
source which depending on your

00:25:28,710 --> 00:25:33,120
connection could take very many hours to

00:25:30,659 --> 00:25:34,650
days and then spend a lot of time

00:25:33,120 --> 00:25:36,000
building the entire thing to get

00:25:34,650 --> 00:25:37,380
something to flash and so this is

00:25:36,000 --> 00:25:38,669
something that you know I think was kind

00:25:37,380 --> 00:25:40,110
of a barrier for a lot of people to

00:25:38,669 --> 00:25:42,299
tinker with kind of the latest releases

00:25:40,110 --> 00:25:44,220
and so we've now got factory images

00:25:42,299 --> 00:25:46,289
direct from google you've got the URL

00:25:44,220 --> 00:25:48,600
there it's as simple as downloading the

00:25:46,289 --> 00:25:51,270
zip file you set the jumper on high key

00:25:48,600 --> 00:25:52,950
for recovery mode and then do the flash

00:25:51,270 --> 00:25:55,590
all script and pull off that jumper and

00:25:52,950 --> 00:26:00,210
reboot so it's a lot easy it's a lot

00:25:55,590 --> 00:26:01,860
easier a lot of work that almut has been

00:26:00,210 --> 00:26:02,830
doing as well across the common AOSP

00:26:01,860 --> 00:26:04,000
effort

00:26:02,830 --> 00:26:06,940
talked a little bit about these in a

00:26:04,000 --> 00:26:08,980
previous talk here so he's deep review

00:26:06,940 --> 00:26:11,350
of the android common 44 tree and sent a

00:26:08,980 --> 00:26:13,360
lot of reverse Rob's like features and

00:26:11,350 --> 00:26:15,159
high key has been useful for being able

00:26:13,360 --> 00:26:18,010
to validate that those features aren't

00:26:15,159 --> 00:26:19,419
needed we've also added the appended dtp

00:26:18,010 --> 00:26:23,529
support which was needed for the a boot

00:26:19,419 --> 00:26:25,750
image support at the bootloader we up we

00:26:23,529 --> 00:26:29,519
basically took the upstream timer slack

00:26:25,750 --> 00:26:32,590
NS support that was there to replace the

00:26:29,519 --> 00:26:34,809
PR set timer slack pig feature in the

00:26:32,590 --> 00:26:36,250
android kernel and we said we got that

00:26:34,809 --> 00:26:38,110
feature upstream but then we backported

00:26:36,250 --> 00:26:39,639
that to the 44 tree and did the user

00:26:38,110 --> 00:26:42,250
space integration to make sure that

00:26:39,639 --> 00:26:44,830
Android could use that there's also the

00:26:42,250 --> 00:26:47,649
EAS forward port from the Android 318

00:26:44,830 --> 00:26:49,419
tree to Android 44 and then a lot of

00:26:47,649 --> 00:26:52,000
prep work tomm 'it's been doing for the

00:26:49,419 --> 00:26:54,700
next long-term stable based android 49

00:26:52,000 --> 00:26:57,159
tree now this one isn't connected

00:26:54,700 --> 00:26:59,500
specifically to AOSP but we've also been

00:26:57,159 --> 00:27:01,120
using high key in rub herrings generic

00:26:59,500 --> 00:27:02,889
build project and this basically allows

00:27:01,120 --> 00:27:04,750
us as you saw in the demo to support a

00:27:02,889 --> 00:27:06,250
whole bunch of different devices and

00:27:04,750 --> 00:27:08,260
even across architectures out of a

00:27:06,250 --> 00:27:09,610
single build directory using cake in fig

00:27:08,260 --> 00:27:12,840
I think it's really awesome and I hope

00:27:09,610 --> 00:27:16,029
to see kind of more support for this

00:27:12,840 --> 00:27:18,190
still a bunch of to do's we want to try

00:27:16,029 --> 00:27:20,769
to see about getting opti fully enabled

00:27:18,190 --> 00:27:23,110
as well as helping Google get trusty

00:27:20,769 --> 00:27:26,590
running up on iOS p ouran high key and

00:27:23,110 --> 00:27:28,330
so that way we can get kind of both opti

00:27:26,590 --> 00:27:29,470
and trusty coexisting and sort of make

00:27:28,330 --> 00:27:31,840
sure you sure that we don't step on each

00:27:29,470 --> 00:27:32,919
other's toes and kind of allow people to

00:27:31,840 --> 00:27:34,960
kind of compare and contrast the

00:27:32,919 --> 00:27:37,389
different implementations and see what

00:27:34,960 --> 00:27:40,059
we can do there I also want to see a bee

00:27:37,389 --> 00:27:41,830
updates and partitioning partition

00:27:40,059 --> 00:27:43,389
switching to be added this is something

00:27:41,830 --> 00:27:45,159
that's going to require an able man

00:27:43,389 --> 00:27:48,700
across both the colonel and the

00:27:45,159 --> 00:27:51,519
bootloader we also need to move forward

00:27:48,700 --> 00:27:53,019
in the next 4 9 Colonel I also want to

00:27:51,519 --> 00:27:55,149
work with the Mali developers to try to

00:27:53,019 --> 00:27:56,769
find a way to avoid needing custom

00:27:55,149 --> 00:28:00,399
tweaks for high key so we can use just

00:27:56,769 --> 00:28:02,200
kind of be off the shelf male driver and

00:28:00,399 --> 00:28:03,789
then also something that's kind of come

00:28:02,200 --> 00:28:05,380
up with n is that we're starting to see

00:28:03,789 --> 00:28:07,690
a little more pressure on the one gig

00:28:05,380 --> 00:28:08,740
variant of high key and so I want to see

00:28:07,690 --> 00:28:10,450
if we can get some of the memory

00:28:08,740 --> 00:28:11,919
reduction efforts that lmg has been

00:28:10,450 --> 00:28:14,620
working on in the past and try to see if

00:28:11,919 --> 00:28:17,470
we can get those upstream in de OSP

00:28:14,620 --> 00:28:19,600
heike and then also just plugs as they

00:28:17,470 --> 00:28:21,520
come up so one of the reasons why I

00:28:19,600 --> 00:28:24,220
think that you know why he's kind of

00:28:21,520 --> 00:28:26,320
useful here as yeah it is just another

00:28:24,220 --> 00:28:28,870
dev board but when you look at like the

00:28:26,320 --> 00:28:31,180
current Nexus devices that are now about

00:28:28,870 --> 00:28:33,340
a year old when they came out they were

00:28:31,180 --> 00:28:35,559
using a kernel 310 kernel which was

00:28:33,340 --> 00:28:37,660
basically two years or over 22 years

00:28:35,559 --> 00:28:38,980
almost two and a half years old on the

00:28:37,660 --> 00:28:41,380
day that they came out so now that

00:28:38,980 --> 00:28:43,450
Colonel is you know basically almost

00:28:41,380 --> 00:28:44,650
three and a half years and you know if

00:28:43,450 --> 00:28:46,440
you have another year on it we're

00:28:44,650 --> 00:28:50,320
getting close to almost five years and

00:28:46,440 --> 00:28:51,970
LTS really only gets support for two or

00:28:50,320 --> 00:28:53,500
more years depending on who's actually

00:28:51,970 --> 00:28:54,640
involved so let's hope that somebody's

00:28:53,500 --> 00:28:57,970
you know working hard to keep those

00:28:54,640 --> 00:28:59,920
kernels up-to-date and safe also the

00:28:57,970 --> 00:29:02,260
latest flagship devices which you know

00:28:59,920 --> 00:29:05,080
came out starting off you know March

00:29:02,260 --> 00:29:06,330
this year they're released with a 318

00:29:05,080 --> 00:29:09,760
kernel which is that's sort of the

00:29:06,330 --> 00:29:11,860
bleeding edge of product focused kernels

00:29:09,760 --> 00:29:13,630
this year and that Colonel was a year

00:29:11,860 --> 00:29:16,380
and three months old at that point now

00:29:13,630 --> 00:29:19,120
for high key we were able to move to 44

00:29:16,380 --> 00:29:20,679
in April basically and that's four

00:29:19,120 --> 00:29:24,309
months it's still a little little behind

00:29:20,679 --> 00:29:26,770
i feel but this basically puts us a year

00:29:24,309 --> 00:29:28,929
ahead of all of the devices that are

00:29:26,770 --> 00:29:31,330
coming out and so in a lot of ways we're

00:29:28,929 --> 00:29:34,840
out there making sure that the current

00:29:31,330 --> 00:29:37,600
AOSP kernels are being stabilized and

00:29:34,840 --> 00:29:39,370
really getting some validation before

00:29:37,600 --> 00:29:41,590
vendors have started tinkering with

00:29:39,370 --> 00:29:43,270
those and so in fact we found a whole

00:29:41,590 --> 00:29:45,910
bunch of regressions in the android 44

00:29:43,270 --> 00:29:48,130
tree that was really useful to have high

00:29:45,910 --> 00:29:51,160
key in order to do for those validations

00:29:48,130 --> 00:29:53,230
and as in this picture to you also see

00:29:51,160 --> 00:29:54,820
the little dotted line you know we also

00:29:53,230 --> 00:29:56,290
are following the mainline kernel and

00:29:54,820 --> 00:29:57,880
we've been doing it using that in order

00:29:56,290 --> 00:30:00,309
to catch a number of regressions that we

00:29:57,880 --> 00:30:01,420
found in the upstream kernels and those

00:30:00,309 --> 00:30:02,559
are really nice because we're able to

00:30:01,420 --> 00:30:04,570
find those issues and immediately

00:30:02,559 --> 00:30:06,220
provide that feedback to maintain errs

00:30:04,570 --> 00:30:10,270
and they usually get you know the revert

00:30:06,220 --> 00:30:12,910
so the fixes is needed we've been

00:30:10,270 --> 00:30:14,020
pushing the Heike kernels a upstream

00:30:12,910 --> 00:30:15,220
this is kind of some of the progress

00:30:14,020 --> 00:30:17,770
that's happened across the various

00:30:15,220 --> 00:30:20,320
current recent Colonel releases in 49

00:30:17,770 --> 00:30:22,179
we've got a whole bunch of stuff cute so

00:30:20,320 --> 00:30:24,340
that'll be good as far as the remaining

00:30:22,179 --> 00:30:26,500
to do for high key for up streaming

00:30:24,340 --> 00:30:28,450
we've got about 50 patches the first two

00:30:26,500 --> 00:30:31,120
up there are queued already

00:30:28,450 --> 00:30:33,190
or the first two sets are cute then it's

00:30:31,120 --> 00:30:36,310
basically gotten down to hdmi audio

00:30:33,190 --> 00:30:39,970
support which is the ADV and the I to s

00:30:36,310 --> 00:30:42,070
driver then the high-speed microSD the

00:30:39,970 --> 00:30:45,690
USB speed audio negotiation and then

00:30:42,070 --> 00:30:47,830
while for Debian devices that use bluesy

00:30:45,690 --> 00:30:50,860
that firmware already works for

00:30:47,830 --> 00:30:53,770
bluetooth but AOSP we still need to find

00:30:50,860 --> 00:30:55,180
a solution for loading the firmware so

00:30:53,770 --> 00:30:56,950
right now we're using the TI driver

00:30:55,180 --> 00:30:59,080
which won't go upstream and then of

00:30:56,950 --> 00:31:01,600
course the Molly driver which we can

00:30:59,080 --> 00:31:03,610
dream someday that's about 15 patches

00:31:01,600 --> 00:31:07,990
out of the 50 but it's also about ninety

00:31:03,610 --> 00:31:09,250
percent of the diff now part of the

00:31:07,990 --> 00:31:10,750
reason why I think that you know

00:31:09,250 --> 00:31:12,820
continuing to work on high keys really

00:31:10,750 --> 00:31:14,290
important is that for the most part we

00:31:12,820 --> 00:31:16,360
kind of have these different communities

00:31:14,290 --> 00:31:17,860
and we've got these AOSP and hardware

00:31:16,360 --> 00:31:19,090
vendors that are very focused on kind of

00:31:17,860 --> 00:31:20,950
getting these products out and we've got

00:31:19,090 --> 00:31:22,720
the upstream colonel community that's

00:31:20,950 --> 00:31:24,100
you know got a different kind of view

00:31:22,720 --> 00:31:25,690
and they have different focuses and this

00:31:24,100 --> 00:31:27,070
is this is very normal it's

00:31:25,690 --> 00:31:28,570
understandable that the hardware vendors

00:31:27,070 --> 00:31:30,820
are going to be focused on you know

00:31:28,570 --> 00:31:32,110
their specific device getting it out in

00:31:30,820 --> 00:31:33,460
six months they don't care about any

00:31:32,110 --> 00:31:35,200
other devices they want something that's

00:31:33,460 --> 00:31:38,380
fully enabled they want low power they

00:31:35,200 --> 00:31:40,420
want you know great graphics and low

00:31:38,380 --> 00:31:42,540
latency they don't really care that much

00:31:40,420 --> 00:31:44,560
about the kernel version they're using

00:31:42,540 --> 00:31:45,490
but the upstream colonel they really

00:31:44,560 --> 00:31:47,080
care a lot about the long-term

00:31:45,490 --> 00:31:48,580
maintainability and you know who's going

00:31:47,080 --> 00:31:50,410
to handle who's going to head you know

00:31:48,580 --> 00:31:53,680
maintain this code for the next 10 to 20

00:31:50,410 --> 00:31:56,620
years any changes have to not affect

00:31:53,680 --> 00:31:58,150
other devices you've got to be using the

00:31:56,620 --> 00:32:00,190
latest kernel or nobody really cares

00:31:58,150 --> 00:32:03,310
about what your changes are and even

00:32:00,190 --> 00:32:05,470
though you know maintain errs do care

00:32:03,310 --> 00:32:07,120
about all architectures for the most

00:32:05,470 --> 00:32:09,250
part they're running x86 on their

00:32:07,120 --> 00:32:12,490
desktops so they do kind of have a

00:32:09,250 --> 00:32:14,980
natural preference for that and so it's

00:32:12,490 --> 00:32:17,320
just difficult to find splices where

00:32:14,980 --> 00:32:19,210
these two groups actually kind of share

00:32:17,320 --> 00:32:21,130
a lot of interests and so I feel like

00:32:19,210 --> 00:32:23,110
high key actually does create a little

00:32:21,130 --> 00:32:24,370
bit of an overlap because we can't have

00:32:23,110 --> 00:32:26,800
an affordable device that's available

00:32:24,370 --> 00:32:28,540
that's an interesting architecture it is

00:32:26,800 --> 00:32:31,030
fully enabled it can work against the

00:32:28,540 --> 00:32:33,070
latest long-term stable or head lynus

00:32:31,030 --> 00:32:35,320
head kernel and this basically allows us

00:32:33,070 --> 00:32:37,690
to do validation both against the latest

00:32:35,320 --> 00:32:39,130
AOSP as well as against the latest

00:32:37,690 --> 00:32:40,600
mainline kernel sand so this is

00:32:39,130 --> 00:32:42,830
something that I think is really useful

00:32:40,600 --> 00:32:44,149
and kind of part of linaro is from

00:32:42,830 --> 00:32:46,880
here is to kind of build bridges between

00:32:44,149 --> 00:32:48,890
these different communities so that's it

00:32:46,880 --> 00:32:51,940
thanks so much I'm going to move on over

00:32:48,890 --> 00:32:51,940
if you want find me in the hallway

00:33:03,660 --> 00:33:08,650
hi everybody my name is Siobhan I would

00:33:06,580 --> 00:33:15,910
and I worked together with Barrow and

00:33:08,650 --> 00:33:19,030
John only LMG King so first of all I'll

00:33:15,910 --> 00:33:22,420
tell you a bit about what we do on art

00:33:19,030 --> 00:33:26,140
in Leonardo so we primarily work on two

00:33:22,420 --> 00:33:29,050
trees one is the android p which is

00:33:26,140 --> 00:33:30,730
focused on the next android release so

00:33:29,050 --> 00:33:33,760
we focus on improving the art

00:33:30,730 --> 00:33:36,070
performance for the currently for

00:33:33,760 --> 00:33:37,900
android oh but we also focus on

00:33:36,070 --> 00:33:39,940
delivering performance of the musicians

00:33:37,900 --> 00:33:43,030
for out that could be used by you and

00:33:39,940 --> 00:33:44,560
other partners on their android trees

00:33:43,030 --> 00:33:47,290
which are based on the current android

00:33:44,560 --> 00:33:49,900
release and those are packaged up part

00:33:47,290 --> 00:33:54,370
of the members in other confectionery

00:33:49,900 --> 00:33:57,040
release so for those of you that are not

00:33:54,370 --> 00:33:58,600
familiar with the AOSP you recycle i

00:33:57,040 --> 00:34:01,750
thought that this diagram might be

00:33:58,600 --> 00:34:03,820
useful so this one highlights the trees

00:34:01,750 --> 00:34:06,180
that we work on so we work on arrays

00:34:03,820 --> 00:34:09,280
remastered which is basically the next

00:34:06,180 --> 00:34:16,060
android release and then we also work on

00:34:09,280 --> 00:34:18,880
the android linaro m members LCR which

00:34:16,060 --> 00:34:24,460
is basically a fork of the current

00:34:18,880 --> 00:34:28,330
stable android release so we're a team

00:34:24,460 --> 00:34:31,000
of 10 engineers some of which are here

00:34:28,330 --> 00:34:34,830
today you probably already saw Julian's

00:34:31,000 --> 00:34:38,919
presentation so we have Julian Julian

00:34:34,830 --> 00:34:43,800
Artyom and Tony here as well as various

00:34:38,919 --> 00:34:46,810
other members of our neighboring teams

00:34:43,800 --> 00:34:49,000
so we're mostly a team of armed

00:34:46,810 --> 00:34:51,580
assignees but we also have contributions

00:34:49,000 --> 00:34:53,169
from spectrum and Media Tech and I would

00:34:51,580 --> 00:34:56,290
like to take this opportunity to thank

00:34:53,169 --> 00:35:02,050
you all for your contributions to the

00:34:56,290 --> 00:35:04,630
art project so here's a highlight of

00:35:02,050 --> 00:35:08,050
what we have done since the last connect

00:35:04,630 --> 00:35:09,610
so as I mentioned in the first slide we

00:35:08,050 --> 00:35:12,790
delivered various performance

00:35:09,610 --> 00:35:13,590
improvements for Android master but as

00:35:12,790 --> 00:35:18,030
well for

00:35:13,590 --> 00:35:20,940
the members LCR three but not only that

00:35:18,030 --> 00:35:23,700
we have improved our benchmarking

00:35:20,940 --> 00:35:26,250
infrastructure and we have added quite a

00:35:23,700 --> 00:35:30,330
third of a number of benchmarks some of

00:35:26,250 --> 00:35:32,220
which is so in Julian's presentation we

00:35:30,330 --> 00:35:33,720
have together with the help from the

00:35:32,220 --> 00:35:36,630
automation team and I would like to

00:35:33,720 --> 00:35:38,970
thank Vishal Daniel Miller San Antonio

00:35:36,630 --> 00:35:43,710
for all the help that they wait upon the

00:35:38,970 --> 00:35:47,220
invitees so we have a tune which we call

00:35:43,710 --> 00:35:49,230
our reports which helps us benchmark and

00:35:47,220 --> 00:35:51,360
monitor the performance of the art

00:35:49,230 --> 00:35:54,770
budgets and i'll be presenting that on

00:35:51,360 --> 00:35:58,190
friday part of the demo day and

00:35:54,770 --> 00:36:01,230
furthermore we have almost completely

00:35:58,190 --> 00:36:03,540
rewritten our some of our continuous

00:36:01,230 --> 00:36:04,740
integration scripts and with that we

00:36:03,540 --> 00:36:08,550
have improved stability and

00:36:04,740 --> 00:36:09,540
reproducibility but at all not only the

00:36:08,550 --> 00:36:11,480
work that we have done on the

00:36:09,540 --> 00:36:17,070
infrastructure we have also contributed

00:36:11,480 --> 00:36:18,860
some useful investigations one of the

00:36:17,070 --> 00:36:21,420
the first one that I like to mention

00:36:18,860 --> 00:36:24,750
looks at the performance differences

00:36:21,420 --> 00:36:26,550
between 32-bit and 64-bit and as you all

00:36:24,750 --> 00:36:29,190
are aware there are some natural

00:36:26,550 --> 00:36:31,350
performance differences but there are

00:36:29,190 --> 00:36:34,740
also things that we will we would like

00:36:31,350 --> 00:36:36,570
to improve so this this report that our

00:36:34,740 --> 00:36:40,050
team put together and which is available

00:36:36,570 --> 00:36:42,930
for linner members it is it is a useful

00:36:40,050 --> 00:36:46,700
source of information for things that we

00:36:42,930 --> 00:36:50,130
need to improve or 32b furthermore

00:36:46,700 --> 00:36:51,900
shuyang who has presented here just

00:36:50,130 --> 00:36:53,610
before this session if you haven't seen

00:36:51,900 --> 00:36:57,660
it yet you could go on youtube and check

00:36:53,610 --> 00:37:01,440
it out or check the slide off but he has

00:36:57,660 --> 00:37:03,780
also put together report on most of the

00:37:01,440 --> 00:37:08,550
things that he has talked about in his a

00:37:03,780 --> 00:37:12,380
sliding so by the next connect we plan

00:37:08,550 --> 00:37:15,600
to improve the performance of 32-bit on

00:37:12,380 --> 00:37:21,030
ESP master we plan on integrating the

00:37:15,600 --> 00:37:23,220
new pixel based back end of which tony

00:37:21,030 --> 00:37:26,420
will be telling you more about in the

00:37:23,220 --> 00:37:28,609
next days but we also plan on

00:37:26,420 --> 00:37:33,020
moving the performance for the Android

00:37:28,609 --> 00:37:35,540
and members rgr tree and obviously

00:37:33,020 --> 00:37:38,359
various other improvements to the

00:37:35,540 --> 00:37:42,010
infrastructure such as adding probably

00:37:38,359 --> 00:37:44,180
new york nexus devices or other

00:37:42,010 --> 00:37:48,020
platforms that might be of interest to

00:37:44,180 --> 00:37:49,940
us so here's just the gist of the

00:37:48,020 --> 00:37:52,010
performance improvements we have worked

00:37:49,940 --> 00:37:55,490
on closely with with Google and

00:37:52,010 --> 00:37:56,990
particularly the vdr to so on your right

00:37:55,490 --> 00:37:58,640
hand side you have the performance

00:37:56,990 --> 00:38:04,579
differences between Android M and

00:37:58,640 --> 00:38:08,390
Android M measured on Nexus 5 a 53 CPU

00:38:04,579 --> 00:38:13,819
and these are just relative differences

00:38:08,390 --> 00:38:16,309
between alt Android n and Aoki Android

00:38:13,819 --> 00:38:18,230
app so as you can see their performance

00:38:16,309 --> 00:38:20,839
improvements across the board for both

00:38:18,230 --> 00:38:24,109
32-bit and 64-bit on various

00:38:20,839 --> 00:38:26,210
benchmarking suits and similarly on the

00:38:24,109 --> 00:38:30,290
left hand side you have the improvements

00:38:26,210 --> 00:38:32,960
between the members LCR and the ASP

00:38:30,290 --> 00:38:35,480
Android M so what you see on the left

00:38:32,960 --> 00:38:37,720
hand side is basically the performance

00:38:35,480 --> 00:38:41,660
improvements that you can benefit off as

00:38:37,720 --> 00:38:49,880
members of the linear mobil group part

00:38:41,660 --> 00:38:51,819
of the LCR 3 so there are a few of us

00:38:49,880 --> 00:38:55,430
here we are happy to talk with you

00:38:51,819 --> 00:38:57,589
either part of this talk or as you see

00:38:55,430 --> 00:39:00,559
us around so please please feel free to

00:38:57,589 --> 00:39:02,750
ask us any sort of questions and lady to

00:39:00,559 --> 00:39:08,809
art so as I mentioned Schilling just

00:39:02,750 --> 00:39:10,430
presented the argit in Android app but

00:39:08,809 --> 00:39:14,119
there are a couple more presentations

00:39:10,430 --> 00:39:16,030
that will follow on Thursday so Tony

00:39:14,119 --> 00:39:17,690
would be presenting on bixel

00:39:16,030 --> 00:39:20,150
programmatic assembler and East

00:39:17,690 --> 00:39:21,829
assembler so this is the assembler in

00:39:20,150 --> 00:39:25,450
this assembler that we currently use for

00:39:21,829 --> 00:39:28,609
arm 60 for optimizing compiler back end

00:39:25,450 --> 00:39:33,319
but soon we will also be using it for

00:39:28,609 --> 00:39:36,470
the 32-bit arm back end and then rtm

00:39:33,319 --> 00:39:39,980
will be sharing some of his insights and

00:39:36,470 --> 00:39:45,349
running performance and investigations

00:39:39,980 --> 00:39:48,430
on the Android runtime so with that come

00:39:45,349 --> 00:39:52,520
happy to take any questions if you have

00:39:48,430 --> 00:39:57,670
some otherwise we could all just go for

00:39:52,520 --> 00:39:57,670
lunch thanks

00:40:02,819 --> 00:40:09,130
so last we want to give a little outlook

00:40:06,970 --> 00:40:12,520
on what's going to happen next and LM

00:40:09,130 --> 00:40:14,559
three obviously not all plans are

00:40:12,520 --> 00:40:17,170
finalized a lot of things will still be

00:40:14,559 --> 00:40:19,480
discussed at the LMDS SI sessions but

00:40:17,170 --> 00:40:23,260
some things that definitely are going to

00:40:19,480 --> 00:40:27,640
happen is building AOSP with clang

00:40:23,260 --> 00:40:29,920
master and doing it all NCI stabilize it

00:40:27,640 --> 00:40:33,579
including even getting the Colonel's to

00:40:29,920 --> 00:40:37,030
build with clang and making sure that we

00:40:33,579 --> 00:40:40,270
get a workable system from bed we are

00:40:37,030 --> 00:40:42,130
working on open source benchmarks so we

00:40:40,270 --> 00:40:46,450
can verify our work better without

00:40:42,130 --> 00:40:49,119
having to rely on proprietary tools then

00:40:46,450 --> 00:40:52,420
with a continual increasing upstream

00:40:49,119 --> 00:40:56,940
participation improving LCR builds

00:40:52,420 --> 00:40:59,980
adding patches stay go optimizing things

00:40:56,940 --> 00:41:02,829
will try to continue reducing the AOSP

00:40:59,980 --> 00:41:05,859
colonel patch backlog and also make a

00:41:02,829 --> 00:41:09,910
better effort at getting our AOSP user

00:41:05,859 --> 00:41:12,520
space changes up streamed and continue

00:41:09,910 --> 00:41:14,530
how consolidation efforts so that one

00:41:12,520 --> 00:41:18,040
bill can better run on multiple devices

00:41:14,530 --> 00:41:21,220
and getting the next LTS colonel

00:41:18,040 --> 00:41:26,740
supported for Android and trying to get

00:41:21,220 --> 00:41:29,140
it into AOSP now that's all and if

00:41:26,740 --> 00:41:31,059
anyone has questions to any of the

00:41:29,140 --> 00:41:33,640
speakers now is a good time to ask or

00:41:31,059 --> 00:41:38,829
just find us in the heck no more come to

00:41:33,640 --> 00:41:40,240
the mini conference on Thursday okay

00:41:38,829 --> 00:41:45,030
looks like we don't have any questions

00:41:40,240 --> 00:41:45,030
right now so thank you for attending

00:41:54,020 --> 00:41:56,080

YouTube URL: https://www.youtube.com/watch?v=-xDmYwdwb88


