Title: LAS16-TR05: Getting Started in LAVA v2
Publication date: 2016-09-30
Playlist: Linaro Connect Las Vegas 2016
Description: 
	LAS16-TR05: Getting Started in LAVA v2
Speakers: Bill Fletcher
Date: September 28, 2016

★ Session Description ★
Tutorial material to support getting started/evaluating LAVA v2. An end-to-end tutorial including physical bootloader device with a stand-alone installation of LAVA. Covering - device requirements, device configuration for 32- and 64-bit platforms with QEMU, ARMv7 and ARMv8 targets. An important part would be having links between the v2 documentation and the tutorial material.

★ Resources ★
Etherpad: pad.linaro.org/p/las16-tr05
Presentations & Videos: http://connect.linaro.org/resource/las16/las16-tr05/

★ Event Details ★
Linaro Connect Las Vegas 2016 – #LAS16
September 26-30, 2016
http://www.linaro.org
http://connect.linaro.org
Captions: 
	00:00:09,559 --> 00:00:15,960
thanks for joining this is training

00:00:12,690 --> 00:00:21,150
session zero five and it's getting

00:00:15,960 --> 00:00:25,670
started in La Vie - but I'm Bill

00:00:21,150 --> 00:00:25,670
Fletcher from Lynn ro field engineering

00:00:27,080 --> 00:00:32,820
so what I'm going to cover in this

00:00:29,070 --> 00:00:37,010
session is a brief intro to larva and

00:00:32,820 --> 00:00:40,850
installing it I'm going to go through

00:00:37,010 --> 00:00:44,129
configuring a single instance of lava v2

00:00:40,850 --> 00:00:45,960
I'm going to talk quickly about virtual

00:00:44,129 --> 00:00:48,870
and physical targets and I've got a

00:00:45,960 --> 00:00:52,350
couple of examples I get as far as a

00:00:48,870 --> 00:00:54,449
boot test with both of those and I'm

00:00:52,350 --> 00:01:06,840
just kind of evangelizing lava because

00:00:54,449 --> 00:01:08,490
it's great in terms of this session so I

00:01:06,840 --> 00:01:10,979
will be talking about installing lava

00:01:08,490 --> 00:01:14,010
and running tests I don't expect you to

00:01:10,979 --> 00:01:16,590
follow along and install it as I speak I

00:01:14,010 --> 00:01:18,210
bet if you do I would be impressed some

00:01:16,590 --> 00:01:23,130
of you may already have it installed on

00:01:18,210 --> 00:01:24,299
your laptops there's a lot of detail I'm

00:01:23,130 --> 00:01:26,700
not going to go through every

00:01:24,299 --> 00:01:28,829
configuration file I mean there are some

00:01:26,700 --> 00:01:34,110
pie charts I have to show you that a

00:01:28,829 --> 00:01:38,880
file exists but all the referenced files

00:01:34,110 --> 00:01:41,689
are up my people in Arad org area so

00:01:38,880 --> 00:01:50,939
device templates job files images which

00:01:41,689 --> 00:01:53,070
work at least for me so this is kind of

00:01:50,939 --> 00:02:00,450
a meta tutorial it's an invitation to

00:01:53,070 --> 00:02:04,649
have a go is there anybody here who's

00:02:00,450 --> 00:02:07,369
completely new to lava okay what this

00:02:04,649 --> 00:02:07,369
slide is for you

00:02:10,610 --> 00:02:15,950
it's like having a birthday in the

00:02:12,350 --> 00:02:19,010
audience you know okay so larva

00:02:15,950 --> 00:02:20,900
new readers start here it's the Lennar

00:02:19,010 --> 00:02:23,510
Oh automated validation architecture

00:02:20,900 --> 00:02:25,970
it's an automation system for deploying

00:02:23,510 --> 00:02:28,280
kernels device tree blobs and refers

00:02:25,970 --> 00:02:30,620
onto physical and virtual hardware for

00:02:28,280 --> 00:02:32,180
running tests anybody involved in lava

00:02:30,620 --> 00:02:33,770
will obviously tell you can do a lot

00:02:32,180 --> 00:02:36,920
more than that and it can probably do

00:02:33,770 --> 00:02:38,600
almost anything but that's kind of a

00:02:36,920 --> 00:02:44,870
common use case let's go with that for a

00:02:38,600 --> 00:02:47,480
start so it's very scalable it scales to

00:02:44,870 --> 00:02:50,030
huge installations that we have inland

00:02:47,480 --> 00:02:57,050
ro distributed you know across multiple

00:02:50,030 --> 00:03:00,470
machines lots more information online

00:02:57,050 --> 00:03:02,930
there's a static Docs link and I'm going

00:03:00,470 --> 00:03:07,670
to talk about lava v2 just in the sense

00:03:02,930 --> 00:03:09,860
that it's the latest lava so you know

00:03:07,670 --> 00:03:12,670
I've been a casual user for couple of

00:03:09,860 --> 00:03:20,060
years with lava and now there's a new

00:03:12,670 --> 00:03:21,620
street there's a lot of tutorial

00:03:20,060 --> 00:03:24,680
material out there but it tends to refer

00:03:21,620 --> 00:03:26,780
to the like older versions and I'm

00:03:24,680 --> 00:03:28,130
consciously not gonna try and refer back

00:03:26,780 --> 00:03:30,050
and say the old version did it this way

00:03:28,130 --> 00:03:32,330
and the new version does it this way I'm

00:03:30,050 --> 00:03:35,720
just going to give you an overview I

00:03:32,330 --> 00:03:38,810
sort of out of box experience for this

00:03:35,720 --> 00:03:42,140
current version of lava without

00:03:38,810 --> 00:03:44,030
necessarily going on about always making

00:03:42,140 --> 00:03:48,770
comparisons because there's time passes

00:03:44,030 --> 00:03:51,350
that'll be less valid anyway so there

00:03:48,770 --> 00:03:54,170
are there are some love knowledgeable

00:03:51,350 --> 00:03:56,450
people in the audience I can see you so

00:03:54,170 --> 00:03:57,800
do feel free to pitch in interrupt to

00:03:56,450 --> 00:04:00,350
correct anything that I say alright

00:03:57,800 --> 00:04:05,959
detail and questions and comments are

00:04:00,350 --> 00:04:09,769
welcome so first of all and this is you

00:04:05,959 --> 00:04:11,780
know for quite a few of these activities

00:04:09,769 --> 00:04:15,019
where there are steps to go through like

00:04:11,780 --> 00:04:16,640
installing no stolen live here I've put

00:04:15,019 --> 00:04:19,160
a couple of like one and two minute

00:04:16,640 --> 00:04:21,799
videos up on YouTube the links are here

00:04:19,160 --> 00:04:22,610
in the deck and you can it's just a

00:04:21,799 --> 00:04:24,830
walkthrough

00:04:22,610 --> 00:04:29,629
of doing the install or various other

00:04:24,830 --> 00:04:33,069
things just so you can see the steps but

00:04:29,629 --> 00:04:37,189
love is a debian package it works with

00:04:33,069 --> 00:04:40,400
supported versions jesse and stretch if

00:04:37,189 --> 00:04:42,530
you install the Lava package you get

00:04:40,400 --> 00:04:47,030
everything that you need for a single

00:04:42,530 --> 00:04:50,990
instance it's a Python package you'll

00:04:47,030 --> 00:04:51,740
find it under Python in your tree one

00:04:50,990 --> 00:04:55,759
caveat

00:04:51,740 --> 00:04:57,620
and this is as packages and change and

00:04:55,759 --> 00:04:59,449
as distro has changed then this sort of

00:04:57,620 --> 00:05:02,300
thing is necessary from time to time if

00:04:59,449 --> 00:05:04,639
you want to install larvae on the stable

00:05:02,300 --> 00:05:07,969
Jesse Jesse relief then you've got to

00:05:04,639 --> 00:05:09,529
use back ports and you've got to enable

00:05:07,969 --> 00:05:12,889
back ports when you do the installation

00:05:09,529 --> 00:05:14,599
and if you don't do that it fails in an

00:05:12,889 --> 00:05:16,129
interesting way very doesn't actually

00:05:14,599 --> 00:05:18,529
give you the latest version and then

00:05:16,129 --> 00:05:20,889
you're just kind of subtly wonder a few

00:05:18,529 --> 00:05:24,620
days later why some things don't work

00:05:20,889 --> 00:05:26,690
and the other caveat is that for various

00:05:24,620 --> 00:05:28,430
reasons although would be nice it

00:05:26,690 --> 00:05:30,860
doesn't work on for instance Ubuntu

00:05:28,430 --> 00:05:33,229
trusty 1404 because of some dependency

00:05:30,860 --> 00:05:35,270
issues now there are people doing some

00:05:33,229 --> 00:05:37,580
very cool things to make sure that you

00:05:35,270 --> 00:05:40,639
can run lava on anything but with

00:05:37,580 --> 00:05:45,349
containers but this is I'm talking about

00:05:40,639 --> 00:05:55,460
in terms of a native install on a base

00:05:45,349 --> 00:05:59,539
machine so this is a block diagram of

00:05:55,460 --> 00:06:02,569
the the basic elements of lava and on

00:05:59,539 --> 00:06:06,639
the right hand side of the two

00:06:02,569 --> 00:06:09,979
fundamental blocks that make up the lava

00:06:06,639 --> 00:06:13,400
the lava system the lava infrastructure

00:06:09,979 --> 00:06:15,830
which is one block which is a scheduler

00:06:13,400 --> 00:06:19,969
which handles job submission and

00:06:15,830 --> 00:06:23,240
scheduling and it also combines or

00:06:19,969 --> 00:06:24,800
renders the target information and the

00:06:23,240 --> 00:06:27,289
test Job Description

00:06:24,800 --> 00:06:33,589
so there's obviously two elements of any

00:06:27,289 --> 00:06:35,000
test are what do you want to do and it

00:06:33,589 --> 00:06:38,270
renders that as

00:06:35,000 --> 00:06:40,700
list of instructions which he passes to

00:06:38,270 --> 00:06:43,390
the other major block of lava which is

00:06:40,700 --> 00:06:46,760
called the dispatcher and the dispatcher

00:06:43,390 --> 00:06:48,620
execute the test job actions he manages

00:06:46,760 --> 00:06:52,940
communication to the target device and

00:06:48,620 --> 00:06:56,960
it collects the job results and the

00:06:52,940 --> 00:06:58,880
dispatcher is relatively dumb it just

00:06:56,960 --> 00:07:01,400
takes the instructions the list of

00:06:58,880 --> 00:07:06,200
instructions the list of actions from

00:07:01,400 --> 00:07:07,840
the scheduler and does it and that for

00:07:06,200 --> 00:07:12,790
those of you who maybe use love of v1

00:07:07,840 --> 00:07:16,160
that's a change on the right hand side

00:07:12,790 --> 00:07:17,840
are those major infrastructure blocks

00:07:16,160 --> 00:07:20,450
and on the left hand side of the way

00:07:17,840 --> 00:07:23,450
that you interface to them there's a web

00:07:20,450 --> 00:07:26,390
UI reports the results shows the device

00:07:23,450 --> 00:07:29,690
and job status and managers object

00:07:26,390 --> 00:07:33,919
creation and permissions there's a

00:07:29,690 --> 00:07:35,810
command line tool called lava tool which

00:07:33,919 --> 00:07:38,350
is the name suggests is your one-stop

00:07:35,810 --> 00:07:41,419
shop for everything in terms of

00:07:38,350 --> 00:07:43,330
day-to-day interacting with lava come on

00:07:41,419 --> 00:07:45,440
- come on tool for job submission

00:07:43,330 --> 00:07:47,330
diagnostics and there's also a

00:07:45,440 --> 00:07:50,780
command-line interface directly to the

00:07:47,330 --> 00:07:52,390
to the server share dealer now I

00:07:50,780 --> 00:07:54,410
mentioned that lava is very scalable

00:07:52,390 --> 00:07:55,940
this is what it looks like if you

00:07:54,410 --> 00:07:57,770
install it on a single machine like a

00:07:55,940 --> 00:08:00,530
laptop and actually I have a laptop here

00:07:57,770 --> 00:08:08,270
with an instance all that installed on

00:08:00,530 --> 00:08:11,720
one machine but it scales so what we

00:08:08,270 --> 00:08:14,229
call the distributed instance has the

00:08:11,720 --> 00:08:18,190
same major blocks on the right hand side

00:08:14,229 --> 00:08:21,979
but you can have many many dispatchers

00:08:18,190 --> 00:08:26,690
each one with many targets connected so

00:08:21,979 --> 00:08:28,700
the the drudgery of running the tests

00:08:26,690 --> 00:08:31,370
and interacting with the targets you can

00:08:28,700 --> 00:08:34,610
offload to many machines and they're all

00:08:31,370 --> 00:08:37,669
served to a single scheduler which is

00:08:34,610 --> 00:08:39,409
managing overall the job workload to

00:08:37,669 --> 00:08:44,240
those remote workers and they're all

00:08:39,409 --> 00:08:45,920
connected by 0nq the roles on the left

00:08:44,240 --> 00:08:47,710
hand side are pretty much the same

00:08:45,920 --> 00:08:49,510
except that

00:08:47,710 --> 00:08:52,630
the the web UI keeps track of which

00:08:49,510 --> 00:08:53,320
target device instances on which which

00:08:52,630 --> 00:08:55,510
worker

00:08:53,320 --> 00:08:57,220
so obviously you need to know if you're

00:08:55,510 --> 00:08:59,860
executing on a given target you want to

00:08:57,220 --> 00:09:04,990
know where given type of target is you

00:08:59,860 --> 00:09:07,660
need to know where to find it now in

00:09:04,990 --> 00:09:09,850
terms of evaluating lava you know my

00:09:07,660 --> 00:09:11,500
usual usual approach to different

00:09:09,850 --> 00:09:13,540
versions has been to install a single

00:09:11,500 --> 00:09:15,190
instance on a single machine but this is

00:09:13,540 --> 00:09:16,720
the kind of setup that you would have if

00:09:15,190 --> 00:09:25,690
you were setting up a test farm or a

00:09:16,720 --> 00:09:29,980
test lab in terms of how a test job is

00:09:25,690 --> 00:09:33,360
represented the key concept with lava is

00:09:29,980 --> 00:09:37,060
something called the pipeline model a

00:09:33,360 --> 00:09:42,150
test job is modeled as a pipeline of

00:09:37,060 --> 00:09:47,320
actions the top level actions are deploy

00:09:42,150 --> 00:09:50,590
boots and tests and the pipeline

00:09:47,320 --> 00:09:53,200
structure of each job is explicit so in

00:09:50,590 --> 00:09:56,200
terms of the the description of the job

00:09:53,200 --> 00:09:58,980
in a file you can see where the actions

00:09:56,200 --> 00:10:02,640
are you know and that's the syntax

00:09:58,980 --> 00:10:05,800
describes the actions in the pipeline

00:10:02,640 --> 00:10:08,560
the pipeline is is completely visible

00:10:05,800 --> 00:10:10,480
it's validated when you submit the job

00:10:08,560 --> 00:10:12,430
it doesn't run through to a certain

00:10:10,480 --> 00:10:13,720
point and then fight oh it has a problem

00:10:12,430 --> 00:10:17,170
or you didn't specify something

00:10:13,720 --> 00:10:19,960
correctly and as I mentioned between the

00:10:17,170 --> 00:10:21,730
scheduler and the dispatcher it's a list

00:10:19,960 --> 00:10:24,610
of AK list of instructions that are

00:10:21,730 --> 00:10:26,110
passed and that list of rendered

00:10:24,610 --> 00:10:27,880
instructions is something that you can

00:10:26,110 --> 00:10:30,220
expect if you're trying to find out why

00:10:27,880 --> 00:10:31,900
something isn't working you can break

00:10:30,220 --> 00:10:35,050
that link and look at what's actually

00:10:31,900 --> 00:10:38,470
being rendered and on the right hand

00:10:35,050 --> 00:10:40,390
side are a couple of examples of you

00:10:38,470 --> 00:10:43,030
know graphically what pipelines look

00:10:40,390 --> 00:10:47,920
like so at the top level deploy Boonton

00:10:43,030 --> 00:10:50,830
multiple tests and deploy has sub steps

00:10:47,920 --> 00:10:52,840
similarly boots and that you can repeat

00:10:50,830 --> 00:10:54,940
maybe

00:10:52,840 --> 00:10:57,750
for instance at the bottom repeating a

00:10:54,940 --> 00:10:57,750
test eight times

00:11:03,510 --> 00:11:10,470
so as I say it's a simple pipeline

00:11:07,040 --> 00:11:12,389
deploy so download the images for

00:11:10,470 --> 00:11:15,209
instance if you if you're mounting an

00:11:12,389 --> 00:11:17,190
image over NFS you've got a lava has to

00:11:15,209 --> 00:11:22,199
put that image somewhere where the town

00:11:17,190 --> 00:11:23,790
can access it and then boot so start up

00:11:22,199 --> 00:11:25,860
the target device interrupt the

00:11:23,790 --> 00:11:29,930
bootloader and then give it a sequence

00:11:25,860 --> 00:11:29,930
of commands to actually get an image

00:11:38,970 --> 00:11:43,500
and I don't mean to test you on

00:11:40,680 --> 00:11:47,460
individual lines of this but this is a

00:11:43,500 --> 00:11:50,790
job file and what if highlighted is

00:11:47,460 --> 00:11:54,750
there's an action section and there's a

00:11:50,790 --> 00:11:57,450
deploy section which has details of the

00:11:54,750 --> 00:12:00,510
images and then there's a bhoot section

00:11:57,450 --> 00:12:04,320
which tells the test job how to interact

00:12:00,510 --> 00:12:07,620
with the bootloader so as I say it's

00:12:04,320 --> 00:12:09,540
explicit of the pipeline concept and the

00:12:07,620 --> 00:12:18,270
way the job is represented in the job

00:12:09,540 --> 00:12:20,160
file match so I mentioned earlier that

00:12:18,270 --> 00:12:21,990
there are two aspects to a test job

00:12:20,160 --> 00:12:24,480
there's the sequence of instructions

00:12:21,990 --> 00:12:25,830
that you want to carry out and there's

00:12:24,480 --> 00:12:30,530
also how you're going to interact with

00:12:25,830 --> 00:12:34,380
the target now in terms of how Lava

00:12:30,530 --> 00:12:36,210
understands the target first of all okay

00:12:34,380 --> 00:12:38,730
implicit in the tool there's the

00:12:36,210 --> 00:12:44,550
behavior of how it expects to run tests

00:12:38,730 --> 00:12:46,920
and then there's a behavior which is

00:12:44,550 --> 00:12:49,320
common to many many types of devices for

00:12:46,920 --> 00:12:52,440
instance if you've got a device which

00:12:49,320 --> 00:12:54,450
uses UEFI then in terms of interacting

00:12:52,440 --> 00:12:57,330
with the boot menu or interacting with

00:12:54,450 --> 00:13:00,180
the ufi shell then it looks very much

00:12:57,330 --> 00:13:03,780
like any other device that runs UEFI so

00:13:00,180 --> 00:13:06,150
those basic aspects of device behavior

00:13:03,780 --> 00:13:10,200
can be pretty much standardized so

00:13:06,150 --> 00:13:13,350
behavior coming to many device types but

00:13:10,200 --> 00:13:18,110
then if you're running some kind of a

00:13:13,350 --> 00:13:20,940
device you know devices have specific

00:13:18,110 --> 00:13:23,040
load addresses so a specific load

00:13:20,940 --> 00:13:27,330
address for the kernel or the device

00:13:23,040 --> 00:13:29,580
tree so you have behavior which is

00:13:27,330 --> 00:13:31,560
common to many instances of a particular

00:13:29,580 --> 00:13:35,330
type of device and it's different from a

00:13:31,560 --> 00:13:39,390
BeagleBone to a Kiba trunk or something

00:13:35,330 --> 00:13:41,610
and then you have an individual instance

00:13:39,390 --> 00:13:43,050
of a device which must be connected to

00:13:41,610 --> 00:13:44,520
something so it must be must have a

00:13:43,050 --> 00:13:47,910
serial connection it must be connected

00:13:44,520 --> 00:13:50,860
to a physical port you have to be able

00:13:47,910 --> 00:13:52,990
to reset it you must have some

00:13:50,860 --> 00:13:56,050
coordinates by which you can affect the

00:13:52,990 --> 00:13:58,180
state of the device so specifics for an

00:13:56,050 --> 00:13:59,920
individual device and then finally some

00:13:58,180 --> 00:14:02,020
aspects which may need to be specified

00:13:59,920 --> 00:14:04,150
that I've heard your basis for instance

00:14:02,020 --> 00:14:05,770
you might need to specify an extended

00:14:04,150 --> 00:14:09,310
timeout for something something takes a

00:14:05,770 --> 00:14:12,820
bit longer so those are you know all

00:14:09,310 --> 00:14:15,900
aspects of target device behavior but

00:14:12,820 --> 00:14:22,890
they cover different different

00:14:15,900 --> 00:14:25,690
population of devices and actually those

00:14:22,890 --> 00:14:29,320
categories that are listed there map

00:14:25,690 --> 00:14:34,450
onto how lava represents target

00:14:29,320 --> 00:14:36,520
configurations internally it has a base

00:14:34,450 --> 00:14:40,270
template of behavior common to many

00:14:36,520 --> 00:14:42,070
devices as device type templates so

00:14:40,270 --> 00:14:45,970
behavior for a particular device type

00:14:42,070 --> 00:14:48,490
like and then ways that that behavior

00:14:45,970 --> 00:14:50,700
can be influenced by the job file of

00:14:48,490 --> 00:14:53,650
ways that can be influenced by a

00:14:50,700 --> 00:14:57,370
specific device like which serial port

00:14:53,650 --> 00:14:59,980
it has and all that is rendered to all

00:14:57,370 --> 00:15:02,050
the templates plus the specifics for the

00:14:59,980 --> 00:15:07,570
job and device rendered it's something

00:15:02,050 --> 00:15:09,700
that the server gives the dispatcher and

00:15:07,570 --> 00:15:12,520
in terms of examples of where of what

00:15:09,700 --> 00:15:15,430
those things are so common commands with

00:15:12,520 --> 00:15:18,610
bootloaders device specific is it 32 or

00:15:15,430 --> 00:15:20,350
64 bit things which are job specific

00:15:18,610 --> 00:15:23,200
things which are device instance

00:15:20,350 --> 00:15:25,270
specific I mean this this covers a bit

00:15:23,200 --> 00:15:28,720
more of the detail so you're welcome to

00:15:25,270 --> 00:15:32,590
refer to this and these are files

00:15:28,720 --> 00:15:35,920
template files which reside under the

00:15:32,590 --> 00:15:39,700
dispatcher configuration and then

00:15:35,920 --> 00:15:41,470
individual devices and not represented

00:15:39,700 --> 00:15:43,900
as configuration files they're

00:15:41,470 --> 00:15:46,240
represented as entries in a device

00:15:43,900 --> 00:15:48,610
dictionary so there's an internal

00:15:46,240 --> 00:15:51,150
storage representation of instances of

00:15:48,610 --> 00:15:51,150
devices

00:15:53,360 --> 00:15:59,899
that device dictionary is is a list of

00:15:57,170 --> 00:16:03,980
dictionary pairs specifying information

00:15:59,899 --> 00:16:07,339
on individual device instances and it's

00:16:03,980 --> 00:16:09,350
it's something which extends the device

00:16:07,339 --> 00:16:13,299
templates and it's something that you

00:16:09,350 --> 00:16:13,299
interact with through the command line

00:16:25,989 --> 00:16:34,939
now I wanted to go through an example

00:16:31,579 --> 00:16:38,179
device because I think if you want to to

00:16:34,939 --> 00:16:39,949
evaluate larvae then they make sense to

00:16:38,179 --> 00:16:41,749
download it to an individual machine and

00:16:39,949 --> 00:16:44,209
then you want to get something up and

00:16:41,749 --> 00:16:48,499
running fairly quickly the device that I

00:16:44,209 --> 00:16:50,179
chose was qmu for forearm 64 and again

00:16:48,499 --> 00:16:52,639
there's a there's a little two minute

00:16:50,179 --> 00:16:56,179
video of installing qmu and getting a

00:16:52,639 --> 00:16:58,040
device up and running and all the

00:16:56,179 --> 00:17:00,919
configuration files that music for this

00:16:58,040 --> 00:17:07,669
so the the device template files the

00:17:00,919 --> 00:17:10,010
device dictionary entry the job file now

00:17:07,669 --> 00:17:10,760
as i say i chose this as because i

00:17:10,010 --> 00:17:14,720
thought it would be relatively

00:17:10,760 --> 00:17:21,439
straightforward it has its quirks and in

00:17:14,720 --> 00:17:25,699
fact the specification for how you how

00:17:21,439 --> 00:17:27,769
love models the emu arm 64 device type

00:17:25,699 --> 00:17:30,049
is still evolving so i have something

00:17:27,769 --> 00:17:31,700
that works that i've shared if you want

00:17:30,049 --> 00:17:34,399
to try it you're very welcome and we

00:17:31,700 --> 00:17:38,990
will be updating it as we go along but

00:17:34,399 --> 00:17:41,269
the steps are install qmu create a

00:17:38,990 --> 00:17:43,279
device instance in the device dictionary

00:17:41,269 --> 00:17:47,149
and then you also need to add it to the

00:17:43,279 --> 00:17:49,250
web interface and another caveat is that

00:17:47,149 --> 00:17:52,179
at the moment this example works very

00:17:49,250 --> 00:17:56,620
well for a boot test but in terms of

00:17:52,179 --> 00:17:56,620
extended testing this is something

00:17:59,240 --> 00:18:06,770
I chose T mu because Q mu is if you want

00:18:05,179 --> 00:18:08,090
to invoke um you all you have to really

00:18:06,770 --> 00:18:10,870
do is come up with the right command

00:18:08,090 --> 00:18:16,520
line if you've used Q mu it has a

00:18:10,870 --> 00:18:19,399
wonderfully rich set of options and this

00:18:16,520 --> 00:18:22,880
is the command line that I that I

00:18:19,399 --> 00:18:25,399
generate in larvae to run an armed 64

00:18:22,880 --> 00:18:28,429
job an actual killer coded it to say

00:18:25,399 --> 00:18:30,230
which bit of the command line comes from

00:18:28,429 --> 00:18:33,710
which of the device templates of the

00:18:30,230 --> 00:18:36,890
device dictionary or the job file so

00:18:33,710 --> 00:18:40,850
where it comes from that chain of target

00:18:36,890 --> 00:18:44,360
information so most of it comes from the

00:18:40,850 --> 00:18:45,980
device type template some specifics for

00:18:44,360 --> 00:18:48,320
the device and also things like the MAC

00:18:45,980 --> 00:18:52,520
address would come from the device

00:18:48,320 --> 00:18:54,409
dictionary and then obviously the images

00:18:52,520 --> 00:18:56,690
are in the job file because the job

00:18:54,409 --> 00:18:58,250
specifies which images it uses and then

00:18:56,690 --> 00:19:01,090
things that are grayed out basically

00:18:58,250 --> 00:19:01,090
love a boilerplate

00:19:07,980 --> 00:19:16,220
so as I say that command-line comes from

00:19:10,980 --> 00:19:19,169
this hierarchy of how lava models the

00:19:16,220 --> 00:19:24,120
the qmu device and interestingly for

00:19:19,169 --> 00:19:27,360
virtual device qmu it can run an x86 job

00:19:24,120 --> 00:19:29,789
it can run arm 64 job you don't actually

00:19:27,360 --> 00:19:33,389
have to tell it what architecture it's

00:19:29,789 --> 00:19:36,330
emulating until you submit the job and

00:19:33,389 --> 00:19:39,769
lover actually provides the capabilities

00:19:36,330 --> 00:19:44,809
have put context our our charm 64

00:19:39,769 --> 00:19:47,820
that's where lava tells qmu what kind of

00:19:44,809 --> 00:19:51,330
architecture we'll expect and you can

00:19:47,820 --> 00:19:53,460
vary that on a per job basis so there's

00:19:51,330 --> 00:19:56,580
a lot of flexibility here as to where

00:19:53,460 --> 00:19:59,370
you tell lava and and how much is common

00:19:56,580 --> 00:20:10,049
and how much let's say is is customized

00:19:59,370 --> 00:20:12,389
per job and that arch arm 64 context is

00:20:10,049 --> 00:20:14,940
a context variable inside the job file

00:20:12,389 --> 00:20:17,580
so I've just highlighted it here just

00:20:14,940 --> 00:20:20,039
above the actions section so actions as

00:20:17,580 --> 00:20:29,070
a highlight at the previous job file but

00:20:20,039 --> 00:20:30,240
here's the context arm 64 in terms of

00:20:29,070 --> 00:20:34,110
submitting the job file if you've not

00:20:30,240 --> 00:20:36,389
used lava before again a little video to

00:20:34,110 --> 00:20:39,149
walk you through it lava has a mechanism

00:20:36,389 --> 00:20:42,830
for user authentication you need to

00:20:39,149 --> 00:20:42,830
generate an authentication token before

00:20:45,139 --> 00:20:49,740
once you've got that authentication

00:20:47,279 --> 00:20:52,409
token then you add it to your local non

00:20:49,740 --> 00:20:55,760
key ring using lava tool and then you

00:20:52,409 --> 00:20:58,409
submit test your files again using tool

00:20:55,760 --> 00:21:00,620
referencing their authentication and the

00:20:58,409 --> 00:21:00,620
job

00:21:03,790 --> 00:21:13,300
so that's a very quick overview of how

00:21:08,710 --> 00:21:15,130
you would bring up something like qmu in

00:21:13,300 --> 00:21:17,230
order to just maybe validate a larva

00:21:15,130 --> 00:21:19,360
installation so what you can do on a

00:21:17,230 --> 00:21:21,760
single laptop you can install the larva

00:21:19,360 --> 00:21:24,520
dispatcher the larger server the web UI

00:21:21,760 --> 00:21:28,660
an instance of qmu you could submit a

00:21:24,520 --> 00:21:34,420
job you can boot it you can potentially

00:21:28,660 --> 00:21:41,350
run some tests what's different when you

00:21:34,420 --> 00:21:43,090
want to run tests well you need some

00:21:41,350 --> 00:21:46,540
kind of serial connection to the device

00:21:43,090 --> 00:21:48,190
or you need some sort of console you

00:21:46,540 --> 00:21:55,480
need a way to put the system in a known

00:21:48,190 --> 00:21:56,860
state and reboot it so with qmu all

00:21:55,480 --> 00:21:58,990
those things are pretty straightforward

00:21:56,860 --> 00:22:03,010
because all the stuff is already

00:21:58,990 --> 00:22:05,680
resident on your single machine here you

00:22:03,010 --> 00:22:11,800
have to specify serial power control and

00:22:05,680 --> 00:22:14,290
you have to include network so for

00:22:11,800 --> 00:22:15,760
serial the set to net package is

00:22:14,290 --> 00:22:21,400
installed automatically because of the

00:22:15,760 --> 00:22:24,670
dependency and you configure an entry in

00:22:21,400 --> 00:22:29,100
the sir to net kampf basically to say

00:22:24,670 --> 00:22:32,590
how larvae will talk to the console and

00:22:29,100 --> 00:22:35,290
the serial connection is specific to one

00:22:32,590 --> 00:22:37,810
device instance you might have twenty

00:22:35,290 --> 00:22:40,120
boards of the same type but you all you

00:22:37,810 --> 00:22:44,140
need to specify which serial port is

00:22:40,120 --> 00:22:46,300
which and so that is something which is

00:22:44,140 --> 00:22:47,730
put in the device dictionary entry so

00:22:46,300 --> 00:22:52,410
that's something which is device

00:22:47,730 --> 00:22:54,820
instance specific and for network

00:22:52,410 --> 00:22:58,330
typically the dispatcher can rely on

00:22:54,820 --> 00:23:02,590
TFTP downloads and Lava installs the FTP

00:22:58,330 --> 00:23:14,100
is dependency the device templates

00:23:02,590 --> 00:23:14,100
actually assume DHCP so that's

00:23:22,730 --> 00:23:25,730
yep

00:23:28,990 --> 00:23:38,510
you deaf rules you'd of rules and USB

00:23:33,290 --> 00:23:42,770
vendor and other strings so you thought

00:23:38,510 --> 00:23:45,080
so yes so this is actually TTY USB 47 or

00:23:42,770 --> 00:23:56,450
something but in my you deaf rules

00:23:45,080 --> 00:24:04,840
I recognize the product but yes

00:23:56,450 --> 00:24:04,840
otherwise it wouldn't work if you

00:24:22,710 --> 00:24:29,100
yeah in fact I was saying that that

00:24:24,600 --> 00:24:38,760
actually it's it's not installed as a

00:24:29,100 --> 00:24:40,830
dependency so so yes you just got one

00:24:38,760 --> 00:24:57,240
target in one laptop it seems like

00:24:40,830 --> 00:24:58,830
overkill but yes right okay so if you

00:24:57,240 --> 00:25:01,250
ever told you if you have a target that

00:24:58,830 --> 00:25:01,250
has multiple

00:25:10,800 --> 00:25:13,790
okay

00:25:29,550 --> 00:25:42,270
yeah in fact we have had targets that

00:25:33,570 --> 00:25:45,560
connected to a JTAG box so this that

00:25:42,270 --> 00:25:48,390
sort of thing has already been done so

00:25:45,560 --> 00:25:56,790
if you had us you have a particular

00:25:48,390 --> 00:25:58,620
target then just talk to us that is that

00:25:56,790 --> 00:26:01,220
that your JTAG is the only way to talk

00:25:58,620 --> 00:26:01,220
the target

00:26:20,780 --> 00:27:05,550
the history yeah we have implemented

00:26:52,740 --> 00:27:07,860
death for power control PDU is is the

00:27:05,550 --> 00:27:09,870
abbreviation in lava speak for Power

00:27:07,860 --> 00:27:12,740
Distribution unit a way to put the

00:27:09,870 --> 00:27:15,210
system in non stay and reboot the board

00:27:12,740 --> 00:27:17,580
so the assumption is that you'd have a

00:27:15,210 --> 00:27:20,400
top of rack or side of rack power

00:27:17,580 --> 00:27:23,370
distribution that you control PD you

00:27:20,400 --> 00:27:25,590
demon is one framework there was at

00:27:23,370 --> 00:27:32,330
least two frameworks for power control

00:27:25,590 --> 00:27:32,330
now PD you demon is the best

00:27:34,679 --> 00:27:42,450
and so again power control for a

00:27:40,530 --> 00:27:45,330
particular device instance is something

00:27:42,450 --> 00:27:48,210
which you know you need to say this this

00:27:45,330 --> 00:27:52,530
outlet controls this device so again

00:27:48,210 --> 00:27:54,210
it's it's a device dictionary aspect

00:27:52,530 --> 00:27:59,550
role in something which is in a template

00:27:54,210 --> 00:28:12,210
and for my own portable lava center pipe

00:27:59,550 --> 00:28:15,380
that I built so for a physical board I

00:28:12,210 --> 00:28:19,820
use that my example is BeagleBone black

00:28:15,380 --> 00:28:21,960
so as I mentioned the base template has

00:28:19,820 --> 00:28:24,150
instructions which are which are common

00:28:21,960 --> 00:28:27,120
to too many devices and many devices

00:28:24,150 --> 00:28:29,490
that were a new boot you know pretty

00:28:27,120 --> 00:28:32,429
much one UV device looks like another

00:28:29,490 --> 00:28:35,130
vice and so those tend to reside in the

00:28:32,429 --> 00:28:36,510
base template but then things like load

00:28:35,130 --> 00:28:39,030
addresses which are specific to

00:28:36,510 --> 00:28:42,020
BeagleBone black they reside in the in

00:28:39,030 --> 00:28:45,240
the BeagleBone black type template and

00:28:42,020 --> 00:28:47,760
then in the device dictionary entry the

00:28:45,240 --> 00:28:49,740
device specifics which as I mentioned on

00:28:47,760 --> 00:28:53,280
previous slides things like serial

00:28:49,740 --> 00:29:07,080
connection power control coordinates and

00:28:53,280 --> 00:29:09,210
in the job file nothing specific so it

00:29:07,080 --> 00:29:09,780
looks a device dictionary entry I'm glad

00:29:09,210 --> 00:29:17,550
you asked

00:29:09,780 --> 00:29:25,460
the very next slide looks like this the

00:29:17,550 --> 00:29:28,800
syntax is ginger - which is sort of I

00:29:25,460 --> 00:29:37,770
like to Python templating language used

00:29:28,800 --> 00:29:40,559
for flask so this is what this is what a

00:29:37,770 --> 00:29:42,660
device dictionary entry looks like it's

00:29:40,559 --> 00:29:44,190
ginger if you look at though the

00:29:42,660 --> 00:29:45,720
template files that I've also been

00:29:44,190 --> 00:29:49,200
describing they're written in the same

00:29:45,720 --> 00:29:51,900
syntax and the syntax allows you to

00:29:49,200 --> 00:29:57,179
specify what can be overridden a later

00:29:51,900 --> 00:30:02,700
stage in the hierarchy aside from maybe

00:29:57,179 --> 00:30:05,309
a few kind of the architecture of the

00:30:02,700 --> 00:30:06,929
lot of the language but actually you've

00:30:05,309 --> 00:30:09,600
got connection command which is the

00:30:06,929 --> 00:30:11,910
telnet connection and you've got a power

00:30:09,600 --> 00:30:16,050
of hard reset and power on command

00:30:11,910 --> 00:30:19,920
so basically it is power coordinates and

00:30:16,050 --> 00:30:23,010
cereal and and the device dictionary

00:30:19,920 --> 00:30:25,980
that entry is submit is imported using

00:30:23,010 --> 00:30:28,890
this lava server command so if you want

00:30:25,980 --> 00:30:31,500
to add an instance it's that's about for

00:30:28,890 --> 00:30:36,210
a physical device it's that kind of

00:30:31,500 --> 00:30:40,010
dictionary entry which you import to

00:30:36,210 --> 00:30:40,010
tell lava that there's this device

00:30:45,260 --> 00:30:53,220
so that was a very kind of quick

00:30:48,690 --> 00:30:56,820
walkthrough of larval v2 some of the

00:30:53,220 --> 00:30:59,670
newer concepts I've got a little demo

00:30:56,820 --> 00:31:02,910
system here which are maybe able to coax

00:30:59,670 --> 00:31:04,610
into life if you just a couple of

00:31:02,910 --> 00:31:07,950
seconds I'm happy to take any questions

00:31:04,610 --> 00:31:11,370
and appreciate that rattle through that

00:31:07,950 --> 00:31:16,290
stuff fairly quickly I think it is worth

00:31:11,370 --> 00:31:25,980
pointing out that you know there is a

00:31:16,290 --> 00:31:27,210
lot of existing tests on on previous

00:31:25,980 --> 00:31:30,330
versions of larvae which need to be

00:31:27,210 --> 00:31:33,900
migrated there are different models by

00:31:30,330 --> 00:31:36,300
which people tend interact with lava so

00:31:33,900 --> 00:31:38,370
for instance they can they can interact

00:31:36,300 --> 00:31:51,150
with lava as a service because we have

00:31:38,370 --> 00:31:53,280
this huge scale instances but at the

00:31:51,150 --> 00:31:55,770
same time it's the same infrastructure

00:31:53,280 --> 00:31:57,840
is doing the same jobs and if you want

00:31:55,770 --> 00:32:00,090
to have a new device added then it's

00:31:57,840 --> 00:32:02,070
likely you'd be interacting with the

00:32:00,090 --> 00:32:08,179
lava lab team to talk through how the

00:32:02,070 --> 00:32:11,910
device would be configured so this is my

00:32:08,179 --> 00:32:13,860
little local love for instance I've

00:32:11,910 --> 00:32:16,830
actually got two devices configured on

00:32:13,860 --> 00:32:26,040
my my laptop here this is the web

00:32:16,830 --> 00:32:27,840
interface for lava which has a list of

00:32:26,040 --> 00:32:30,500
jobs and then here in my little case

00:32:27,840 --> 00:32:35,160
I've got I've got a BeagleBone black

00:32:30,500 --> 00:32:39,000
center stage it's the small switch I've

00:32:35,160 --> 00:32:43,160
got power control and a USB and I've got

00:32:39,000 --> 00:32:43,160
a number of jobs jobs

00:32:51,450 --> 00:32:55,250
so for instance the qmu job

00:33:08,630 --> 00:33:19,180
so you know if I move my my camera my

00:33:12,650 --> 00:33:22,280
chair then I've actually got our focus

00:33:19,180 --> 00:33:24,350
submitted I've got two running jobs one

00:33:22,280 --> 00:33:26,270
of which is on the the internal queue a

00:33:24,350 --> 00:33:28,610
new instance which is running on the

00:33:26,270 --> 00:33:30,230
laptop and one of which is running on

00:33:28,610 --> 00:33:33,470
the BeagleBone black which is connected

00:33:30,230 --> 00:33:36,700
here and after about a minute if you

00:33:33,470 --> 00:33:36,700
were very very quiet

00:33:50,630 --> 00:33:56,590
so we can come back to that and see if

00:33:52,610 --> 00:33:56,590
they've actually successfully completed

00:34:09,159 --> 00:34:21,890
it's loading the kernel and device tree

00:34:14,240 --> 00:34:32,450
via TFTP which the lava all sets up for

00:34:21,890 --> 00:34:34,790
you so I have a you want to see the

00:34:32,450 --> 00:34:37,640
picture of how life works like this was

00:34:34,790 --> 00:34:40,040
an exercise for me whilst always what I

00:34:37,640 --> 00:34:43,700
was putting this together so the ways

00:34:40,040 --> 00:34:46,970
that that lava interacts with the target

00:34:43,700 --> 00:34:50,240
is certain air I've mentioned TFTP I

00:34:46,970 --> 00:34:53,090
mentioned it deals with NFS and

00:34:50,240 --> 00:34:54,980
obviously it has power control so those

00:34:53,090 --> 00:34:57,340
are all functions are like to the

00:34:54,980 --> 00:34:57,340
dispatcher

00:35:10,050 --> 00:35:17,130
so just by way of a quick summary so I'm

00:35:15,300 --> 00:35:18,870
pleased to say that my my Q job is

00:35:17,130 --> 00:35:25,620
completed my BeagleBone black job is

00:35:18,870 --> 00:35:29,670
still running so two example devices

00:35:25,620 --> 00:35:31,170
plenty of resources online associated

00:35:29,670 --> 00:35:33,750
with this so I encourage you to go and

00:35:31,170 --> 00:35:35,910
have a little look watch a few of the

00:35:33,750 --> 00:35:41,250
videos together an idea of how it works

00:35:35,910 --> 00:35:44,610
how it all fits together for qmu we are

00:35:41,250 --> 00:35:49,140
looking at how we put the the

00:35:44,610 --> 00:35:51,840
command-line options some within the job

00:35:49,140 --> 00:35:54,090
some within the templates because for

00:35:51,840 --> 00:35:59,270
qeu you know you can decide things very

00:35:54,090 --> 00:36:02,670
late in the chain and so that's evolving

00:35:59,270 --> 00:36:04,590
BeagleBone black i would say is very

00:36:02,670 --> 00:36:07,260
much a very smooth out of box experience

00:36:04,590 --> 00:36:09,030
with lava if you wanted a platform to

00:36:07,260 --> 00:36:11,220
actually get started with a physical one

00:36:09,030 --> 00:36:13,830
then if you get a BeagleBone black and

00:36:11,220 --> 00:36:14,840
you put the debian version of you boot

00:36:13,830 --> 00:36:21,240
on it

00:36:14,840 --> 00:36:25,650
most important then you'll find that it

00:36:21,240 --> 00:36:30,090
kind of just works but it is worth

00:36:25,650 --> 00:36:40,020
pointing out that in you know it's quite

00:36:30,090 --> 00:36:41,400
involved if you are changing target so

00:36:40,020 --> 00:36:43,740
if you are a trying to integrate a new

00:36:41,400 --> 00:36:46,110
device in lava hopefully this gives you

00:36:43,740 --> 00:36:48,600
an idea of where things are but

00:36:46,110 --> 00:36:51,450
obviously talk to us and I so feel free

00:36:48,600 --> 00:36:54,770
to download an instance install it check

00:36:51,450 --> 00:36:54,770
it works with a non good device

00:37:03,970 --> 00:37:10,570
okay and just the prudent works so my my

00:37:07,210 --> 00:37:15,370
job that I submitted on the BeagleBone

00:37:10,570 --> 00:37:19,780
which is the top one again sorry for the

00:37:15,370 --> 00:37:30,280
focus as completed and my qmu job was

00:37:19,780 --> 00:37:31,780
completed actually that's all I have

00:37:30,280 --> 00:37:33,610
thank you very much if you've got any

00:37:31,780 --> 00:37:35,980
questions feel free if you've got any

00:37:33,610 --> 00:37:42,040
hard questions Neal the tech lead for

00:37:35,980 --> 00:37:44,470
larva has got his hand up at the back so

00:37:42,040 --> 00:37:56,950
if you want to know anything about larva

00:37:44,470 --> 00:38:08,170
now is your opportunity to ask what what

00:37:56,950 --> 00:38:10,120
is the context used for so the context

00:38:08,170 --> 00:38:12,520
they specify and the job submission is

00:38:10,120 --> 00:38:14,980
one of the ways you can provide extra

00:38:12,520 --> 00:38:16,450
variables to the templating that

00:38:14,980 --> 00:38:19,540
actually provides the final device

00:38:16,450 --> 00:38:21,250
configuration so it's used in with

00:38:19,540 --> 00:38:25,260
Karimi to specify things like the

00:38:21,250 --> 00:38:28,150
architecture because we allow Queenie to

00:38:25,260 --> 00:38:32,050
run multiple different kinds of jobs and

00:38:28,150 --> 00:38:33,610
it's down to the files you supply as to

00:38:32,050 --> 00:38:36,670
which architecture queueing we should

00:38:33,610 --> 00:38:40,210
try and boot those using so you specify

00:38:36,670 --> 00:38:42,880
that and then we just the templates sort

00:38:40,210 --> 00:38:45,520
of which command line to use for those

00:38:42,880 --> 00:38:48,090
files according to the architecture you

00:38:45,520 --> 00:38:48,090
specified

00:38:56,870 --> 00:39:00,690
yeah

00:38:58,050 --> 00:39:04,620
so the way it works you've got

00:39:00,690 --> 00:39:07,470
hard-coded values in the template we've

00:39:04,620 --> 00:39:11,160
also got variables in the template if

00:39:07,470 --> 00:39:13,470
you set a value for a variable in the

00:39:11,160 --> 00:39:16,020
device dictionary that rules out any

00:39:13,470 --> 00:39:18,120
further changes to that variable so it's

00:39:16,020 --> 00:39:20,490
an it's a way of admins controlling what

00:39:18,120 --> 00:39:22,710
the kind of access is actually allowed

00:39:20,490 --> 00:39:24,960
on the particular devices and then if

00:39:22,710 --> 00:39:27,600
the variables that are still exposed can

00:39:24,960 --> 00:39:30,780
be set in the context of the test job

00:39:27,600 --> 00:39:33,320
submission so it allows a little bit of

00:39:30,780 --> 00:39:52,290
fine grained control for particular

00:39:33,320 --> 00:39:55,200
these cases particular ideas so all of

00:39:52,290 --> 00:39:58,830
the selection criteria are going to be

00:39:55,200 --> 00:40:02,160
down to your submission rights the

00:39:58,830 --> 00:40:05,520
device type you've asked for and any

00:40:02,160 --> 00:40:08,030
device tags that is specified so the job

00:40:05,520 --> 00:40:10,890
submission can specify tags tags are

00:40:08,030 --> 00:40:12,540
specified by the admins they are labels

00:40:10,890 --> 00:40:15,000
with descriptions that mean that

00:40:12,540 --> 00:40:17,120
generally some extra bit of hardware has

00:40:15,000 --> 00:40:20,220
been attached so you might have to have

00:40:17,120 --> 00:40:21,600
a sort of draw a protectorate attached

00:40:20,220 --> 00:40:24,900
to a Kiwi truck in one particular case

00:40:21,600 --> 00:40:26,430
and not in other cases so that's what

00:40:24,900 --> 00:40:30,020
the shedder does to work out which

00:40:26,430 --> 00:40:33,930
device of the specified types works on

00:40:30,020 --> 00:40:35,850
having good access and then which device

00:40:33,930 --> 00:40:38,870
is next available does that have the

00:40:35,850 --> 00:40:38,870
appropriate tags

00:40:50,219 --> 00:40:57,569
are you currently using the the v2

00:40:53,309 --> 00:41:02,759
framework to automate your OpenStack

00:40:57,569 --> 00:41:15,839
deployment for like multi node unreal

00:41:02,759 --> 00:41:17,159
targets I don't know what jobs are

00:41:15,839 --> 00:41:18,989
running or running in the lab I'm

00:41:17,159 --> 00:41:24,389
looking at Maria but she's not she's

00:41:18,989 --> 00:41:29,249
avoiding my eyes oh yeah I could see

00:41:24,389 --> 00:41:33,989
that from here yeah thanks I don't know

00:41:29,249 --> 00:41:39,469
we'll find out it's okay it's a case of

00:41:33,989 --> 00:41:39,469
what's what's migrated and between v1 v2

00:41:46,189 --> 00:41:57,749
so more details on how we migrated from

00:41:49,649 --> 00:42:00,839
v1 v2 will be in my talk the lobby to

00:41:57,749 --> 00:42:03,869
migration talk so I'll go through the in

00:42:00,839 --> 00:42:06,209
detail there which not only how we do

00:42:03,869 --> 00:42:08,389
the migration but which device types

00:42:06,209 --> 00:42:14,339
have already got support and what is

00:42:08,389 --> 00:42:17,880
being enabled but after this very few

00:42:14,339 --> 00:42:19,499
devices now that are in the main lab of

00:42:17,880 --> 00:42:21,329
production and they cambridge lab

00:42:19,499 --> 00:42:33,719
there's very few devices that can't go

00:42:21,329 --> 00:42:36,179
to v2 I'd have to check on what the

00:42:33,719 --> 00:42:38,819
OpenStack ones actually using because

00:42:36,179 --> 00:42:45,599
the OpenStack usage is quite specialized

00:42:38,819 --> 00:42:48,649
and but the there are lots of other use

00:42:45,599 --> 00:42:48,649
kit is used by leg

00:43:07,120 --> 00:43:16,010
so we have KVM in the staging

00:43:11,840 --> 00:43:19,130
environment that is using multi nude no

00:43:16,010 --> 00:43:21,320
jobs but I'm not sure if they are

00:43:19,130 --> 00:43:23,800
actually running OpenStack at the moment

00:43:21,320 --> 00:43:41,960
because as that it is quite special

00:43:23,800 --> 00:43:43,850
specialist so we need to check that as

00:43:41,960 --> 00:43:46,850
soon as you start doing anything that is

00:43:43,850 --> 00:43:49,580
actually involving multi node everything

00:43:46,850 --> 00:43:54,020
becomes more complex we can't make it

00:43:49,580 --> 00:43:56,750
any easier we can't produce the

00:43:54,020 --> 00:43:59,600
complexity any further it's a case of

00:43:56,750 --> 00:44:01,460
multi node becomes a complex test job

00:43:59,600 --> 00:44:06,430
just by it's a fact we've got multiple

00:44:01,460 --> 00:44:09,620
devices so when you're starting with v2

00:44:06,430 --> 00:44:11,750
little already any since since get a

00:44:09,620 --> 00:44:14,480
really good handle of how it works for

00:44:11,750 --> 00:44:17,630
single device jobs before you start

00:44:14,480 --> 00:44:20,560
thinking about house it really will

00:44:17,630 --> 00:44:20,560
stretch

00:44:37,940 --> 00:44:44,100
so I talked about the docks I looked

00:44:42,420 --> 00:44:46,620
through some of them but my question is

00:44:44,100 --> 00:44:51,720
is there is there a complete definition

00:44:46,620 --> 00:45:05,610
or the schema for the job file yes I

00:44:51,720 --> 00:45:08,790
mean just because I've seen it okay so

00:45:05,610 --> 00:45:12,570
there is a limited schema on submission

00:45:08,790 --> 00:45:19,500
which goes through and checks some basic

00:45:12,570 --> 00:45:22,050
syntax checks there is we have had

00:45:19,500 --> 00:45:24,750
problems would be one where it tried to

00:45:22,050 --> 00:45:27,480
be all-encompassing they tried to

00:45:24,750 --> 00:45:30,690
generate one set of rules that covered

00:45:27,480 --> 00:45:33,270
all possible test jobs that became part

00:45:30,690 --> 00:45:36,000
of the reason why b1 became a problem so

00:45:33,270 --> 00:45:38,400
we're avoiding that with v2 and it's a

00:45:36,000 --> 00:45:40,740
case of each time you generate a

00:45:38,400 --> 00:45:43,170
pipeline that pipeline is specific to

00:45:40,740 --> 00:45:46,680
that test job submission and each pipe

00:45:43,170 --> 00:45:49,380
one is separate and each time you change

00:45:46,680 --> 00:45:52,470
the submission so there are rules for

00:45:49,380 --> 00:45:56,220
each of those and it's the validation

00:45:52,470 --> 00:45:59,340
step that happens as the job starts that

00:45:56,220 --> 00:46:09,600
is the final arbiter of whether your top

00:45:59,340 --> 00:46:11,630
submission but that's not answering the

00:46:09,600 --> 00:46:11,630
question

00:46:11,870 --> 00:46:20,490
we know there is not yet a complete

00:46:15,210 --> 00:46:22,920
schema description in the docs it's one

00:46:20,490 --> 00:46:25,110
of the things that we're working on I'm

00:46:22,920 --> 00:46:26,730
the person writing the docs and I've

00:46:25,110 --> 00:46:28,410
been beating Neil up over this for the

00:46:26,730 --> 00:46:34,710
last couple of months as I'm sure we all

00:46:28,410 --> 00:46:38,250
agree it's coming soon I saw four

00:46:34,710 --> 00:46:40,320
commands that related to external you

00:46:38,250 --> 00:46:42,620
know tools they're used for PDU and

00:46:40,320 --> 00:46:44,670
serial control and networking is that

00:46:42,620 --> 00:46:47,010
exhaustive or how many different

00:46:44,670 --> 00:46:50,390
commands are there totalled that lava

00:46:47,010 --> 00:46:50,390
may invoke

00:46:50,460 --> 00:46:54,720
Manzi Kunene book from the Select advice

00:46:52,619 --> 00:46:59,040
dictionary or commands you can invoke as

00:46:54,720 --> 00:47:03,450
a part of the boy I detest job runs yes

00:46:59,040 --> 00:47:06,570
yeah where you've got things like the

00:47:03,450 --> 00:47:10,440
connection command and power off power

00:47:06,570 --> 00:47:13,109
on those are arbitrary shell commands

00:47:10,440 --> 00:47:15,000
they are scripts that lava benders come

00:47:13,109 --> 00:47:27,839
up with their own run just replace that

00:47:15,000 --> 00:47:30,450
in the dictionary okay so let me let me

00:47:27,839 --> 00:47:33,119
let me describe a system I've used in

00:47:30,450 --> 00:47:36,530
the past okay at Sony internally we have

00:47:33,119 --> 00:47:40,080
a tool called TTC and we defined

00:47:36,530 --> 00:47:42,960
approximately I think we defined a total

00:47:40,080 --> 00:47:45,540
of 13 actions that we were going to put

00:47:42,960 --> 00:47:47,220
abstractions for in the tool and those

00:47:45,540 --> 00:47:48,690
were the thing they're very very similar

00:47:47,220 --> 00:47:50,250
you know it's like how do you connect to

00:47:48,690 --> 00:47:51,869
the target how do you get serial console

00:47:50,250 --> 00:47:53,490
how do you how do you create a login

00:47:51,869 --> 00:47:56,130
account on it how do you get a file how

00:47:53,490 --> 00:47:57,690
do you put a file so those were the that

00:47:56,130 --> 00:47:59,160
was the level of abstraction and we

00:47:57,690 --> 00:48:01,290
boiled it down to a particular interface

00:47:59,160 --> 00:48:03,990
that we had I'm just wondering if you

00:48:01,290 --> 00:48:07,070
have the same type of idea you know like

00:48:03,990 --> 00:48:42,260
how many of those types of verbs or

00:48:07,070 --> 00:48:42,260
abstractions do you have so which is a

00:48:54,800 --> 00:49:04,550
ways of accessing secondary media

00:49:00,540 --> 00:49:04,550
devices media storage on the device

00:49:04,900 --> 00:49:09,190
those kinds of things are where the

00:49:07,030 --> 00:49:11,619
bootloader can't actually write to the

00:49:09,190 --> 00:49:13,540
media itself so you boot up into

00:49:11,619 --> 00:49:18,820
something sensible around disk and then

00:49:13,540 --> 00:49:21,579
right okay reboot into that one so I

00:49:18,820 --> 00:49:23,500
have got a review which is actually

00:49:21,579 --> 00:49:27,250
going through building the full list of

00:49:23,500 --> 00:49:28,869
dispatcher actions but it really is

00:49:27,250 --> 00:49:33,070
meant to be something you dip into as a

00:49:28,869 --> 00:49:43,540
reference coverage right right okay

00:49:33,070 --> 00:49:47,550
thank you I guess the other thing is we

00:49:43,540 --> 00:49:47,550
can have generate a few more examples

00:49:47,849 --> 00:49:53,140
Steve does keep hitting me over the head

00:49:50,520 --> 00:49:57,369
examples we will get there

00:49:53,140 --> 00:49:59,579
a lot at the time the work example gets

00:49:57,369 --> 00:50:03,730
delayed because we really need to have

00:49:59,579 --> 00:50:07,060
the full stack of steps behind it you

00:50:03,730 --> 00:50:10,750
need we need to know no need to describe

00:50:07,060 --> 00:50:12,400
how the artifacts used in that job were

00:50:10,750 --> 00:50:14,730
built because one will next questions

00:50:12,400 --> 00:50:18,069
people do when they see a example is

00:50:14,730 --> 00:50:20,619
modified they can only modify the test

00:50:18,069 --> 00:50:24,910
job submission or the test options

00:50:20,619 --> 00:50:29,520
that's not ideal so it's getting the

00:50:24,910 --> 00:50:36,220
full stack we are building a set of

00:50:29,520 --> 00:50:55,000
standard jobs we get the full build

00:50:36,220 --> 00:50:57,220
history I think we're kind of out of

00:50:55,000 --> 00:51:01,119
time here so so we need to take this gen

00:50:57,220 --> 00:51:03,540
to the bar and just buy more beer so

00:51:01,119 --> 00:51:06,130
thanks very much

00:51:03,540 --> 00:51:07,540
it was Ben grades too to be able to

00:51:06,130 --> 00:51:09,890
present this and have somebody else

00:51:07,540 --> 00:51:12,880
answer all the questions

00:51:09,890 --> 00:51:12,880
thank you very much

00:51:20,690 --> 00:51:22,750

YouTube URL: https://www.youtube.com/watch?v=EeRZv_1K380


