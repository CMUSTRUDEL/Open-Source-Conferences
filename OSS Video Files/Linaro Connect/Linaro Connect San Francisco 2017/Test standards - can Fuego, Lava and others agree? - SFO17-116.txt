Title: Test standards - can Fuego, Lava and others agree? - SFO17-116
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-116
Session Name: Test standards - can Fuego, Lava and others agree? - SFO17-116
Speaker: Tim Bird
Track: LITE


★ Session Summary ★
Several open source test frameworks for Linux exist and are being actively adopted and used.  This includes KernelCI, LAVA, Fuego, Avacado, kerneltest and others.  In this session, Tim would like to discuss the state of these different test systems, and propose standards in some areas so that the different frameworks can share infrastructure and interoperate.  This include standards for results formats, interfaces to commonly-used utility programs, and for board control hardware.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-116/
Presentation: 
Video: 
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:16,990 --> 00:00:23,270
okay thank you for hanging on until the

00:00:19,880 --> 00:00:25,670
very end today I'm all that stands

00:00:23,270 --> 00:00:33,770
between you and enjoyable evening

00:00:25,670 --> 00:00:38,300
somewhere else so okay anyway

00:00:33,770 --> 00:00:40,730
so I my name is Tim bird I'm chair of

00:00:38,300 --> 00:00:43,040
the architecture group and something

00:00:40,730 --> 00:00:45,739
called the Linux Foundation for embedded

00:00:43,040 --> 00:00:47,360
Linux project lately I've been putting a

00:00:45,739 --> 00:00:51,650
lot of time and energy into something

00:00:47,360 --> 00:00:52,760
called the way go test framework and I'm

00:00:51,650 --> 00:00:56,330
here to talk a little bit about

00:00:52,760 --> 00:00:58,640
standards and this is although I have

00:00:56,330 --> 00:00:59,780
some standards I got to propose some of

00:00:58,640 --> 00:01:01,070
the things I'm going to throw out there

00:00:59,780 --> 00:01:02,210
are going to be kind of soft pictures

00:01:01,070 --> 00:01:06,770
because I think you guys are already

00:01:02,210 --> 00:01:09,680
using some of these but I want to talk

00:01:06,770 --> 00:01:13,299
about kind of some things that might be

00:01:09,680 --> 00:01:15,710
good to collaborate on in the future and

00:01:13,299 --> 00:01:18,170
first I'm going to talk about really

00:01:15,710 --> 00:01:20,570
quickly because this is a really short

00:01:18,170 --> 00:01:22,130
session only 25 minutes just about some

00:01:20,570 --> 00:01:24,469
of the existing open source tests and

00:01:22,130 --> 00:01:29,990
test frameworks for Linux there's a lot

00:01:24,469 --> 00:01:33,439
of things out there and but there's a

00:01:29,990 --> 00:01:36,380
surprising amount of not sharing going

00:01:33,439 --> 00:01:40,039
on between between the systems and I'll

00:01:36,380 --> 00:01:41,630
clarify that more and so I think it

00:01:40,039 --> 00:01:44,600
would be gonna be enough for us to get

00:01:41,630 --> 00:01:47,630
together on standards I don't think I

00:01:44,600 --> 00:01:50,119
mean you can open source in a lot of

00:01:47,630 --> 00:01:51,340
places as open source gets rid of the

00:01:50,119 --> 00:01:52,990
need for standards by sharing

00:01:51,340 --> 00:01:56,109
implementation because the sources Court

00:01:52,990 --> 00:01:57,939
is open but in this case I think it's

00:01:56,109 --> 00:02:01,990
actually would be good for us to

00:01:57,939 --> 00:02:04,240
collaborate in a few key areas I'm going

00:02:01,990 --> 00:02:05,770
to present some areas that I that I kind

00:02:04,240 --> 00:02:07,869
of have under investigation and a couple

00:02:05,770 --> 00:02:11,379
of proposals that I'd like you to

00:02:07,869 --> 00:02:13,780
consider and so those areas are at test

00:02:11,379 --> 00:02:16,870
dependencies results formats and more

00:02:13,780 --> 00:02:18,970
control hardware specifically interfaces

00:02:16,870 --> 00:02:21,220
to comment utility programs so let me

00:02:18,970 --> 00:02:23,709
just get right into it

00:02:21,220 --> 00:02:26,260
there are lots of test frameworks but

00:02:23,709 --> 00:02:29,260
there's still an awful lot that is left

00:02:26,260 --> 00:02:33,310
as an exercise to the tester and in fact

00:02:29,260 --> 00:02:35,760
my my elevator pitch for Fuego is I

00:02:33,310 --> 00:02:38,319
would like to I would like to do for

00:02:35,760 --> 00:02:42,340
testing what open source has done for

00:02:38,319 --> 00:02:44,590
software so right now a lot of

00:02:42,340 --> 00:02:47,560
implementation code is shared because of

00:02:44,590 --> 00:02:49,930
open source but there's an awful lot of

00:02:47,560 --> 00:02:52,480
code in the QA department that is not

00:02:49,930 --> 00:02:54,040
sharing there's code there's methods

00:02:52,480 --> 00:02:57,609
there's procedures there's formats

00:02:54,040 --> 00:02:59,319
there's all kinds of stuff even even

00:02:57,609 --> 00:03:01,569
when you get one of these kind of

00:02:59,319 --> 00:03:04,930
comprehensive test frameworks there's

00:03:01,569 --> 00:03:07,480
still a lot of grungy work but you have

00:03:04,930 --> 00:03:09,810
to do to set up a board lab and it'd be

00:03:07,480 --> 00:03:13,299
nice if that was standardized so that

00:03:09,810 --> 00:03:16,840
hardware could be produced that the work

00:03:13,299 --> 00:03:19,930
of that standard and software could be

00:03:16,840 --> 00:03:22,810
produced that also worked very make made

00:03:19,930 --> 00:03:24,250
testers lives easier and some of the

00:03:22,810 --> 00:03:27,190
things that are that are left as

00:03:24,250 --> 00:03:29,650
exercises are what tests to run how to

00:03:27,190 --> 00:03:31,750
actually perform the tests that includes

00:03:29,650 --> 00:03:35,049
how to build it what parameters to use

00:03:31,750 --> 00:03:37,450
on the command line the environment to

00:03:35,049 --> 00:03:39,310
set up the test dependencies what is a

00:03:37,450 --> 00:03:41,470
bird what prerequisites does it have

00:03:39,310 --> 00:03:43,750
before you run the test and then the

00:03:41,470 --> 00:03:47,290
results themselves how to collect

00:03:43,750 --> 00:03:51,370
results visualization and particularly

00:03:47,290 --> 00:03:55,570
interpretation and analysis so who here

00:03:51,370 --> 00:03:58,390
has never downloaded and run LTP ok LTP

00:03:55,570 --> 00:04:00,670
is this big behemoth test program you

00:03:58,390 --> 00:04:03,310
run it and like you know you get like

00:04:00,670 --> 00:04:06,370
1,200 successes and 200 failures you go

00:04:03,310 --> 00:04:07,840
ok well what should I put what am I

00:04:06,370 --> 00:04:09,970
supposed to do with that

00:04:07,840 --> 00:04:11,650
you know do I have to dig into each and

00:04:09,970 --> 00:04:14,440
every single one of those sub test cases

00:04:11,650 --> 00:04:17,919
and figure out what does that matter for

00:04:14,440 --> 00:04:20,019
my use case and so results analysis and

00:04:17,919 --> 00:04:21,310
interpretation is this left as an

00:04:20,019 --> 00:04:23,050
exercise to the reader and it's one of

00:04:21,310 --> 00:04:25,720
the most costly parts of the testing

00:04:23,050 --> 00:04:30,820
exercise and then how to automate or

00:04:25,720 --> 00:04:32,830
control which arguably lava is is king

00:04:30,820 --> 00:04:36,430
of the hill here in terms of the support

00:04:32,830 --> 00:04:38,200
it has so again because of the shortness

00:04:36,430 --> 00:04:40,000
at the time I'm not going to go I

00:04:38,200 --> 00:04:41,560
actually have a slide for each of these

00:04:40,000 --> 00:04:44,919
but I'm gonna kind of brush past these

00:04:41,560 --> 00:04:49,390
really quick the first few are kind of

00:04:44,919 --> 00:04:51,340
large test systems sets of tests well

00:04:49,390 --> 00:04:54,100
case elfis is not that large right now

00:04:51,340 --> 00:04:55,300
it was getting larger participant kernel

00:04:54,100 --> 00:04:57,880
and then the rest of these are either

00:04:55,300 --> 00:04:59,680
frameworks or or some kind of system

00:04:57,880 --> 00:05:01,660
soak a self-test is the unit test

00:04:59,680 --> 00:05:04,240
framework inside the the kernel source

00:05:01,660 --> 00:05:06,520
tree the one thing I'll point out on

00:05:04,240 --> 00:05:08,700
this slide is that case self test has

00:05:06,520 --> 00:05:10,360
just recently converted or they're

00:05:08,700 --> 00:05:12,160
decided that they're going to convert

00:05:10,360 --> 00:05:15,190
all their output into tap thirteen

00:05:12,160 --> 00:05:17,320
format which is really useful that means

00:05:15,190 --> 00:05:20,800
that they'll be a consistent output from

00:05:17,320 --> 00:05:23,260
kate from the kernel tests but it was

00:05:20,800 --> 00:05:27,310
much easier to parse for results

00:05:23,260 --> 00:05:29,200
generators the linux test project

00:05:27,310 --> 00:05:30,340
already mentioned this one it's a huge

00:05:29,200 --> 00:05:32,889
collection of tests

00:05:30,340 --> 00:05:37,389
it covers a lot of territory as tall's

00:05:32,889 --> 00:05:39,880
real-time POSIX and there luckily there

00:05:37,389 --> 00:05:42,400
is some unification and LTP for the

00:05:39,880 --> 00:05:45,220
results output but it's fairly complex

00:05:42,400 --> 00:05:47,100
to build and deploy and as I said it's

00:05:45,220 --> 00:05:49,780
very difficult to interpret the results

00:05:47,100 --> 00:05:52,479
it's very common for there to be lots of

00:05:49,780 --> 00:05:53,800
failures not just skips where the test

00:05:52,479 --> 00:05:55,630
itself could determine that some

00:05:53,800 --> 00:05:57,639
configuration or prerequisite of missing

00:05:55,630 --> 00:06:00,010
but actual failures and you don't know

00:05:57,639 --> 00:06:02,590
if that is something to be expected for

00:06:00,010 --> 00:06:03,970
your board or your platform or not so a

00:06:02,590 --> 00:06:09,040
tester really has to have a lot of

00:06:03,970 --> 00:06:11,410
knowledge to use LTP effectively Wego

00:06:09,040 --> 00:06:13,030
the system I'm working on it's a point

00:06:11,410 --> 00:06:16,360
work for collaborating on test and test

00:06:13,030 --> 00:06:19,169
infrastructure specifically Boyko is

00:06:16,360 --> 00:06:21,610
targeted at the tests themselves so

00:06:19,169 --> 00:06:25,930
we're trying to build up a whole bunch

00:06:21,610 --> 00:06:30,699
of tests you can see we have a 1-1

00:06:25,930 --> 00:06:32,530
release and in April I added about 42

00:06:30,699 --> 00:06:34,060
tests right now we're about 120

00:06:32,530 --> 00:06:37,330
different tests that we that we have

00:06:34,060 --> 00:06:39,669
wrappers for in 1.2 which is what we've

00:06:37,330 --> 00:06:41,080
been working on over the summer we

00:06:39,669 --> 00:06:43,570
actually have implemented a unified

00:06:41,080 --> 00:06:47,110
output format so all the tests produce a

00:06:43,570 --> 00:06:50,560
JSON output format and it is the kernel

00:06:47,110 --> 00:06:52,810
CI JSON format which means that we'll

00:06:50,560 --> 00:06:55,590
hopefully we haven't tried this yet but

00:06:52,810 --> 00:06:58,810
we're in process of making it so we can

00:06:55,590 --> 00:07:01,910
send 0.0 results to a kernel CI server

00:06:58,810 --> 00:07:03,980
and be able to use their visualization

00:07:01,910 --> 00:07:07,700
and their back-end database storage and

00:07:03,980 --> 00:07:11,150
stuff we also in this release support

00:07:07,700 --> 00:07:12,740
lava as a transport work manager so this

00:07:11,150 --> 00:07:15,290
is another thing that we want to do is

00:07:12,740 --> 00:07:18,020
see if we contain art suite of tests and

00:07:15,290 --> 00:07:21,410
then run them basically unmodified on a

00:07:18,020 --> 00:07:24,470
lot of the board farm and not something

00:07:21,410 --> 00:07:26,630
we've actually done yet although it's

00:07:24,470 --> 00:07:27,890
long story the HDL product automotive

00:07:26,630 --> 00:07:29,630
grade Linux project in the lakes

00:07:27,890 --> 00:07:32,270
foundation is actually using lava for

00:07:29,630 --> 00:07:33,470
its board farm and then the other thing

00:07:32,270 --> 00:07:37,430
we added and went out to is a test

00:07:33,470 --> 00:07:38,450
dependency system kernel CI I don't

00:07:37,430 --> 00:07:41,600
think I need to talk too much about

00:07:38,450 --> 00:07:43,400
kernel CI this is a slide that I used

00:07:41,600 --> 00:07:45,140
with people who are not familiar with it

00:07:43,400 --> 00:07:48,050
but I think most people inland are oh no

00:07:45,140 --> 00:07:50,930
Baga it's this really awesome doing tons

00:07:48,050 --> 00:07:53,000
of tests I actually call it the most

00:07:50,930 --> 00:07:55,430
successful public distributed build and

00:07:53,000 --> 00:07:56,930
test system for Linux in the world if

00:07:55,430 --> 00:08:01,610
you put enough qualifiers on you can

00:07:56,930 --> 00:08:03,200
make it to the most lava so a lot of

00:08:01,610 --> 00:08:05,510
lava automation or validation

00:08:03,200 --> 00:08:07,340
architecture has very good job control

00:08:05,510 --> 00:08:09,980
and job scheduling it's very

00:08:07,340 --> 00:08:11,960
comprehensive system and just in terms

00:08:09,980 --> 00:08:13,850
of v2 which I don't remember I don't

00:08:11,960 --> 00:08:16,810
know how how long ago was it what b2

00:08:13,850 --> 00:08:19,669
came out of it this has been over a year

00:08:16,810 --> 00:08:24,680
this is like last fall or sometime or

00:08:19,669 --> 00:08:26,330
well it's complicated it was it was

00:08:24,680 --> 00:08:28,870
February this year but we really had

00:08:26,330 --> 00:08:32,680
enough support to start driving

00:08:28,870 --> 00:08:32,680
everybody say what you've got

00:08:33,039 --> 00:08:37,060
by about June we really had everything

00:08:34,870 --> 00:08:40,630
needle down okay so some of the changes

00:08:37,060 --> 00:08:42,839
in v2 from my perspective of the job

00:08:40,630 --> 00:08:45,459
files are now using Jinja to templates

00:08:42,839 --> 00:08:47,380
was previously just handwritten case on

00:08:45,459 --> 00:08:49,959
jobs are running secretly without

00:08:47,380 --> 00:08:52,630
pulling zero McHugh is used for

00:08:49,959 --> 00:08:55,899
communications reactive us used to run

00:08:52,630 --> 00:08:57,009
jobs from messages and it requires a

00:08:55,899 --> 00:09:00,040
little bit more explicit for

00:08:57,009 --> 00:09:01,750
configuration but I think you guys are

00:09:00,040 --> 00:09:03,310
gonna John a lot of us I'm not gonna

00:09:01,750 --> 00:09:07,660
talk too much about that they're

00:09:03,310 --> 00:09:11,319
credible tests is this is by Kuchar

00:09:07,660 --> 00:09:14,470
truck it's a particular system kind of

00:09:11,319 --> 00:09:15,940
predates colonel CI but builds on every

00:09:14,470 --> 00:09:18,000
architecture of the colonel supports and

00:09:15,940 --> 00:09:20,500
boots on many of them on a daily basis

00:09:18,000 --> 00:09:25,630
and produces a some report that you can

00:09:20,500 --> 00:09:28,959
see online zero day is really really the

00:09:25,630 --> 00:09:30,880
set of tests done by a group at Intel a

00:09:28,959 --> 00:09:33,819
large set of tests that are run daily on

00:09:30,880 --> 00:09:36,120
top of tree and it has a large testbed I

00:09:33,819 --> 00:09:39,910
think they have about 80 tests right now

00:09:36,120 --> 00:09:41,680
the thing about zero day that is that is

00:09:39,910 --> 00:09:45,010
cool is that it will actually report

00:09:41,680 --> 00:09:46,569
build test faders brindell individual

00:09:45,010 --> 00:09:48,970
patches contributing to the wage colonel

00:09:46,569 --> 00:09:52,029
so it's quite common these days to send

00:09:48,970 --> 00:09:54,069
a patch to a mailing list and get that

00:09:52,029 --> 00:09:55,600
automated reply from the zero day system

00:09:54,069 --> 00:09:57,010
saying you have you know this broke

00:09:55,600 --> 00:09:59,740
such-and-such a build with this

00:09:57,010 --> 00:10:02,740
configuration which is really really

00:09:59,740 --> 00:10:04,769
handy about 60 percent of the failures

00:10:02,740 --> 00:10:06,590
it reports it does so another two hours

00:10:04,769 --> 00:10:08,570
about 90 percent

00:10:06,590 --> 00:10:12,500
in 24 hours so is give you really quick

00:10:08,570 --> 00:10:14,720
turnaround time on the bug reports then

00:10:12,500 --> 00:10:16,370
avocado I threw it in the list it's a

00:10:14,720 --> 00:10:18,320
virtual machine tester it's kind of

00:10:16,370 --> 00:10:19,400
orthogonal to a lot of these other

00:10:18,320 --> 00:10:21,380
things but it has a lot of really

00:10:19,400 --> 00:10:23,120
interesting features it's got a test

00:10:21,380 --> 00:10:25,040
server which a lot of systems have but

00:10:23,120 --> 00:10:27,350
the way they implemented is kind of

00:10:25,040 --> 00:10:33,830
interesting it's really got a matrix

00:10:27,350 --> 00:10:37,460
system and for building you know a suite

00:10:33,830 --> 00:10:39,530
of tests that you compare results from

00:10:37,460 --> 00:10:42,620
it actually supports multiple test

00:10:39,530 --> 00:10:44,090
results output formats and it has very

00:10:42,620 --> 00:10:45,530
simple interface to Jenkins which I

00:10:44,090 --> 00:10:50,330
think it uses for most of this front-end

00:10:45,530 --> 00:10:52,460
stuff so what I want to do is separate

00:10:50,330 --> 00:10:54,140
what I'm going to talk about next into

00:10:52,460 --> 00:10:57,230
two categories things that I'm kind of

00:10:54,140 --> 00:10:58,850
investigating and and part of the reason

00:10:57,230 --> 00:11:02,300
that I'm here is to kind of ask you guys

00:10:58,850 --> 00:11:05,840
questions and then also proposals that

00:11:02,300 --> 00:11:07,640
I'd like to propose as potential

00:11:05,840 --> 00:11:10,660
standards not that we're going to make

00:11:07,640 --> 00:11:12,800
any decisions in a 25 minute session but

00:11:10,660 --> 00:11:14,510
but things that I think would be really

00:11:12,800 --> 00:11:16,850
useful and I think we're close enough

00:11:14,510 --> 00:11:22,190
that we can actually start to agree on

00:11:16,850 --> 00:11:24,080
things so things that I think is really

00:11:22,190 --> 00:11:26,630
useful we have something in point ago

00:11:24,080 --> 00:11:28,910
called a test plan which it is really

00:11:26,630 --> 00:11:30,380
simple it's a JSON file it's just a list

00:11:28,910 --> 00:11:32,870
of the tests that we're going to run on

00:11:30,380 --> 00:11:35,930
a board and I don't know if lava has

00:11:32,870 --> 00:11:38,300
something similar to that or not but it

00:11:35,930 --> 00:11:41,360
turns out to be very useful to have kind

00:11:38,300 --> 00:11:42,740
of a profile a whole set of things that

00:11:41,360 --> 00:11:45,710
you're going to apply to a particular

00:11:42,740 --> 00:11:46,790
use case so if this is Anubha to the q18

00:11:45,710 --> 00:11:49,670
can we

00:11:46,790 --> 00:11:53,060
so it's me lotion comes up with the test

00:11:49,670 --> 00:11:55,640
plan okay and then that and that

00:11:53,060 --> 00:11:59,410
includes so which I'm not sure you're

00:11:55,640 --> 00:12:03,740
covering here yet is exactly how to

00:11:59,410 --> 00:12:06,380
notify people who care about there's a

00:12:03,740 --> 00:12:10,100
lot of discussion all the time about

00:12:06,380 --> 00:12:12,560
exactly what format of content goes into

00:12:10,100 --> 00:12:15,230
the emails in wording you want in emails

00:12:12,560 --> 00:12:17,990
yeah so we actually we don't have that

00:12:15,230 --> 00:12:20,990
yet and then but that is a critical

00:12:17,990 --> 00:12:22,460
thing right now we have Boyko is

00:12:20,990 --> 00:12:24,920
currently being used by two linux

00:12:22,460 --> 00:12:27,410
foundation projects the AGL project

00:12:24,920 --> 00:12:29,330
automotive grade Linux and the ltsi

00:12:27,410 --> 00:12:31,880
project so we have test plans for those

00:12:29,330 --> 00:12:35,390
so we have you know a list of tests that

00:12:31,880 --> 00:12:38,060
apply to a GL and a list of tests that

00:12:35,390 --> 00:12:39,680
apply to ltsi and there's overlap of

00:12:38,060 --> 00:12:41,720
course because we run things like LTP on

00:12:39,680 --> 00:12:45,410
both and it's a file system benchmark

00:12:41,720 --> 00:12:47,260
tests on both but I think this is

00:12:45,410 --> 00:12:49,340
something where I think it'd be good to

00:12:47,260 --> 00:12:50,960
collaborate on what the requirements are

00:12:49,340 --> 00:12:54,170
for this type of thing

00:12:50,960 --> 00:12:55,880
and see if there's some benefit to

00:12:54,170 --> 00:12:57,980
coming up with an industry standard I'm

00:12:55,880 --> 00:12:59,960
not proposing one now I just think it's

00:12:57,980 --> 00:13:02,360
an interesting area because everyone has

00:12:59,960 --> 00:13:04,490
this problem there's like you know I

00:13:02,360 --> 00:13:06,260
have a well everyone solves it because

00:13:04,490 --> 00:13:08,570
they have their particular user base and

00:13:06,260 --> 00:13:11,060
they write they write okay well this is

00:13:08,570 --> 00:13:12,230
a set of tests I'm gonna run but but

00:13:11,060 --> 00:13:15,550
they don't share that with someone else

00:13:12,230 --> 00:13:18,560
who may have the simpler use case right

00:13:15,550 --> 00:13:21,560
so that looks like you're gonna say so

00:13:18,560 --> 00:13:24,020
yeah um that's probably I'll put four

00:13:21,560 --> 00:13:26,780
months is concerned we learned this when

00:13:24,020 --> 00:13:28,470
we did the fee to stuff focusing on the

00:13:26,780 --> 00:13:30,270
actual format language

00:13:28,470 --> 00:13:32,700
is the wrong idea what you want is the

00:13:30,270 --> 00:13:34,710
schemer because whether it's written in

00:13:32,700 --> 00:13:36,840
JSON or gamma as long as you can dump it

00:13:34,710 --> 00:13:39,420
out into the format that it actually

00:13:36,840 --> 00:13:41,310
walks in fact Lee the structure that

00:13:39,420 --> 00:13:45,840
needs to be standardized not the

00:13:41,310 --> 00:13:47,940
language it's expressed in okay okay I

00:13:45,840 --> 00:13:49,230
was gonna write down but so little time

00:13:47,940 --> 00:13:52,500
I'll have to remember this stuff and

00:13:49,230 --> 00:13:54,780
write it down okay so I will get to out

00:13:52,500 --> 00:13:56,400
the format an event so test dependencies

00:13:54,780 --> 00:13:59,850
another thing another problem that

00:13:56,400 --> 00:14:02,580
testers have is that you and this this

00:13:59,850 --> 00:14:03,690
came up with this over the summer there

00:14:02,580 --> 00:14:05,670
was a lot of discussion about this

00:14:03,690 --> 00:14:08,970
particular issue on the K cell test

00:14:05,670 --> 00:14:10,830
which is how do you know what tests to

00:14:08,970 --> 00:14:12,870
run or if you have the right

00:14:10,830 --> 00:14:15,480
prerequisites for a test in the case of

00:14:12,870 --> 00:14:19,170
K cell tests it's the dependency is a

00:14:15,480 --> 00:14:21,570
particular kernel config hyo's right and

00:14:19,170 --> 00:14:23,670
and so everybody needs to you need to

00:14:21,570 --> 00:14:24,120
have that or the test it's like dead in

00:14:23,670 --> 00:14:25,830
the water

00:14:24,120 --> 00:14:27,150
and you don't know and as a portal

00:14:25,830 --> 00:14:29,280
tester you don't know if the failure

00:14:27,150 --> 00:14:31,140
came because you actually have a problem

00:14:29,280 --> 00:14:33,110
on your system something broke or just

00:14:31,140 --> 00:14:35,610
because you didn't have the right config

00:14:33,110 --> 00:14:37,680
so there's kind of two reasons to meet

00:14:35,610 --> 00:14:40,020
this to avoid wasting time test foot

00:14:37,680 --> 00:14:42,450
time time with tests that won't work and

00:14:40,020 --> 00:14:44,430
then also just as a document to document

00:14:42,450 --> 00:14:46,160
what the prerequisites are there's lots

00:14:44,430 --> 00:14:49,380
of different prerequisites or

00:14:46,160 --> 00:14:51,750
dependencies some of them are like the

00:14:49,380 --> 00:14:53,940
amount of memory needed for a test in

00:14:51,750 --> 00:14:56,360
particular the kernel configuration how

00:14:53,940 --> 00:14:58,590
much storage what type of storage

00:14:56,360 --> 00:15:01,560
subsystems libraries might be required

00:14:58,590 --> 00:15:03,300
for a test and then as we get into more

00:15:01,560 --> 00:15:05,400
Hardware tests you need to know that you

00:15:03,300 --> 00:15:09,260
actually have that hardware otherwise

00:15:05,400 --> 00:15:09,260
it's just pointless to run a test

00:15:09,310 --> 00:15:15,790
and so there is some existing support

00:15:11,709 --> 00:15:18,699
for test dependencies I will I will

00:15:15,790 --> 00:15:21,819
admit to in quake Oh shamelessly copying

00:15:18,699 --> 00:15:24,970
this come from zero date so zero day has

00:15:21,819 --> 00:15:27,699
a thing meet and they just declare some

00:15:24,970 --> 00:15:29,589
variables in one of their ammo files it

00:15:27,699 --> 00:15:32,139
says meet Colonel headers whether that's

00:15:29,589 --> 00:15:34,870
true or false I presume that's for part

00:15:32,139 --> 00:15:36,100
of their build phase and then need a k

00:15:34,870 --> 00:15:38,499
config and they can have a list of

00:15:36,100 --> 00:15:42,189
hiccup fix that are needed eat memory

00:15:38,499 --> 00:15:44,430
meet cpu we have free info a go I don't

00:15:42,189 --> 00:15:47,709
know if there are specific other ones

00:15:44,430 --> 00:15:50,199
but I think it would be good to come up

00:15:47,709 --> 00:15:51,129
to have the same types of mechanisms or

00:15:50,199 --> 00:15:53,170
at least the same time so that

00:15:51,129 --> 00:15:54,129
vocabulary we're talking about this

00:15:53,170 --> 00:15:56,290
stuff doesn't have to be heated by

00:15:54,129 --> 00:15:57,610
identical but if you can you know it'd

00:15:56,290 --> 00:16:01,209
be really nice if someone could say oh

00:15:57,610 --> 00:16:02,860
yeah abort go seven in where I notify oh

00:16:01,209 --> 00:16:05,350
six that's when I had problems with it

00:16:02,860 --> 00:16:07,509
in LTP just recently I notify oh six

00:16:05,350 --> 00:16:09,970
requires this thing to be in the kernel

00:16:07,509 --> 00:16:11,290
it's like oh okay well I'd be nice to

00:16:09,970 --> 00:16:14,309
know instead of just getting a fader and

00:16:11,290 --> 00:16:14,309
then having to dig into it myself

00:16:14,519 --> 00:16:18,970
interesting a couple of interesting does

00:16:16,660 --> 00:16:21,069
so both 0 de apoyo because point become

00:16:18,970 --> 00:16:23,139
easier they use the declarative syntax

00:16:21,069 --> 00:16:24,790
rather than imperative so we're not

00:16:23,139 --> 00:16:26,529
actually executing some code to do that

00:16:24,790 --> 00:16:28,029
I think that's really important because

00:16:26,529 --> 00:16:29,800
that makes it suitable for static

00:16:28,029 --> 00:16:31,300
analysis so you can actually determine

00:16:29,800 --> 00:16:33,550
ahead of time before you even run the

00:16:31,300 --> 00:16:35,170
test you can run the land wiser and say

00:16:33,550 --> 00:16:40,600
well this board has this configuration

00:16:35,170 --> 00:16:41,829
this test is not even run ok and so and

00:16:40,600 --> 00:16:45,420
you don't even have to install the test

00:16:41,829 --> 00:16:48,610
theoretically to make that determination

00:16:45,420 --> 00:16:51,939
so in my in my wildest dreams I

00:16:48,610 --> 00:16:53,800
envisioned an online test store kind of

00:16:51,939 --> 00:16:56,050
like an app store where a user can go

00:16:53,800 --> 00:16:58,329
out and say oh you know this one's

00:16:56,050 --> 00:16:59,800
highly rated for for measuring

00:16:58,329 --> 00:17:02,019
filesystem performance I want to get

00:16:59,800 --> 00:17:04,059
that one and then that could be matched

00:17:02,019 --> 00:17:05,430
up with you know but it's an ext poor

00:17:04,059 --> 00:17:10,110
you know

00:17:05,430 --> 00:17:12,570
it's not a riser FS test and other

00:17:10,110 --> 00:17:15,030
things like tests for specific hardware

00:17:12,570 --> 00:17:16,950
like if I if I don't have a canvas I you

00:17:15,030 --> 00:17:21,330
know see you even see it might download

00:17:16,950 --> 00:17:22,710
list the can bus tests Boyko also has

00:17:21,330 --> 00:17:26,640
some imperative checks that are kind of

00:17:22,710 --> 00:17:28,620
left over legacy but we'd like to

00:17:26,640 --> 00:17:30,270
convert those right now we're testing

00:17:28,620 --> 00:17:33,390
for things that are on target specific

00:17:30,270 --> 00:17:35,010
binaries or program to library is the

00:17:33,390 --> 00:17:36,870
same thing with the SDK because we build

00:17:35,010 --> 00:17:38,670
tests from scratch so we got to make

00:17:36,870 --> 00:17:40,580
sure that you have appropriate libraries

00:17:38,670 --> 00:17:45,330
but those can also be made into

00:17:40,580 --> 00:17:47,520
declarative syntax okay so that was the

00:17:45,330 --> 00:17:48,600
investigative stuff and actually I lied

00:17:47,520 --> 00:17:50,130
I may have come back a little bit to

00:17:48,600 --> 00:17:53,310
invest you much more time here

00:17:50,130 --> 00:17:57,740
oh man okay my proposal my preferred

00:17:53,310 --> 00:18:00,360
test output format it's tap 13 that is a

00:17:57,740 --> 00:18:01,580
I'll show you tap 13 in a second I want

00:18:00,360 --> 00:18:05,160
to talk a little bit about teeth winds

00:18:01,580 --> 00:18:07,500
but that's my own term what kernel CI

00:18:05,160 --> 00:18:10,020
what it looks like and then what we've

00:18:07,500 --> 00:18:15,600
got in play goes so I think this is

00:18:10,020 --> 00:18:17,940
actually a key idea and that that there

00:18:15,600 --> 00:18:19,770
be a string that unique uniquely

00:18:17,940 --> 00:18:22,800
identifies a particular test case or

00:18:19,770 --> 00:18:25,980
benchmark measure for instance LTP not

00:18:22,800 --> 00:18:28,950
Cisco about of or oh 1.1 ok that refers

00:18:25,980 --> 00:18:33,060
to a very specific test case inside the

00:18:28,950 --> 00:18:35,130
LTP system and it's useful for data

00:18:33,060 --> 00:18:36,960
information interchange it's kind of

00:18:35,130 --> 00:18:40,440
similar to a URL Uniform Resource

00:18:36,960 --> 00:18:42,360
locator and web terminology and it's

00:18:40,440 --> 00:18:45,180
used to refer unambiguously to a

00:18:42,360 --> 00:18:47,370
particular test case and there are some

00:18:45,180 --> 00:18:47,900
issues with this because even inside LTP

00:18:47,370 --> 00:18:50,060
there's

00:18:47,900 --> 00:18:52,370
issues there's the same test to be run

00:18:50,060 --> 00:18:54,950
through multiple glance positions what's

00:18:52,370 --> 00:18:57,470
up with the undo it stuff as well

00:18:54,950 --> 00:19:02,840
because they do repetition right okay

00:18:57,470 --> 00:19:11,600
yeah okay and they do repetition they do

00:19:02,840 --> 00:19:14,210
parameterised change okay well I have

00:19:11,600 --> 00:19:17,630
some ideas have it anyway okay so the

00:19:14,210 --> 00:19:19,790
benefits though we can pull it off which

00:19:17,630 --> 00:19:22,070
maybe we can I don't know but it's

00:19:19,790 --> 00:19:24,230
really good for discussing specific test

00:19:22,070 --> 00:19:26,510
cases it's good for dating mining across

00:19:24,230 --> 00:19:27,980
platforms so you could you know if I'm

00:19:26,510 --> 00:19:30,650
having trouble with nine oh two five six

00:19:27,980 --> 00:19:32,180
and inside the frame test framework

00:19:30,650 --> 00:19:36,350
before you go test framework I can go

00:19:32,180 --> 00:19:37,340
look at Lonardo to the kernel CI results

00:19:36,350 --> 00:19:38,960
let's see well is this something that's

00:19:37,340 --> 00:19:41,200
given a problem with other platforms I

00:19:38,960 --> 00:19:43,790
don't have so the metadata can be

00:19:41,200 --> 00:19:45,800
independent of the framework we have

00:19:43,790 --> 00:19:46,460
things like description and analysis and

00:19:45,800 --> 00:19:48,830
things like that

00:19:46,460 --> 00:19:50,540
and I just think that the first step to

00:19:48,830 --> 00:19:52,280
sharing information between systems is

00:19:50,540 --> 00:19:55,040
is trying to come up with some kind of

00:19:52,280 --> 00:19:57,770
consistent reference mechanism so I

00:19:55,040 --> 00:20:02,270
think that's important now the output

00:19:57,770 --> 00:20:03,500
format this is different than how you

00:20:02,270 --> 00:20:05,420
make a distinction between the output

00:20:03,500 --> 00:20:07,010
format for the results format the output

00:20:05,420 --> 00:20:10,100
format is what actually comes out and

00:20:07,010 --> 00:20:11,960
from the test there's no way we're going

00:20:10,100 --> 00:20:14,570
to go back and convert the output of

00:20:11,960 --> 00:20:15,830
hundreds of thousands or tests so we're

00:20:14,570 --> 00:20:20,480
gonna have to deal with the fact that

00:20:15,830 --> 00:20:22,400
currently lots of output exists it's

00:20:20,480 --> 00:20:24,560
really ad hoc testers have written any

00:20:22,400 --> 00:20:26,330
you know any old thing they want luckily

00:20:24,560 --> 00:20:29,300
a lot of them rely on oriented so it is

00:20:26,330 --> 00:20:31,610
possible to parse a lot of things kay

00:20:29,300 --> 00:20:33,830
self-test is adopting tap the testing

00:20:31,610 --> 00:20:35,930
protocol and I would just throw that out

00:20:33,830 --> 00:20:38,060
there suggestion if you're writing a new

00:20:35,930 --> 00:20:38,540
test today particularly a smallish type

00:20:38,060 --> 00:20:41,300
test

00:20:38,540 --> 00:20:44,660
just use tap I know it's not the

00:20:41,300 --> 00:20:48,500
prettiest one in the world but but if we

00:20:44,660 --> 00:20:51,650
all support it as as input to our test

00:20:48,500 --> 00:20:54,170
print works then it's automatic right

00:20:51,650 --> 00:20:57,260
then we don't have to do anything else

00:20:54,170 --> 00:21:00,010
tap here's an example tap it's like the

00:20:57,260 --> 00:21:05,060
simplest output format you've ever seen

00:21:00,010 --> 00:21:06,890
and it's it's it's quirky but if he gets

00:21:05,060 --> 00:21:09,680
the job done especially for small tests

00:21:06,890 --> 00:21:11,390
so if you're a test author I recommend

00:21:09,680 --> 00:21:14,630
you look at this that for a results

00:21:11,390 --> 00:21:18,320
format the big the big one that seems to

00:21:14,630 --> 00:21:20,060
be popular in a lot of places is well J

00:21:18,320 --> 00:21:24,410
unit and X unit which are really the

00:21:20,060 --> 00:21:27,020
same thing they're XML formats and back

00:21:24,410 --> 00:21:30,170
in itself I'm not a big XML fan but it

00:21:27,020 --> 00:21:31,700
does get the job done oddly that X unit

00:21:30,170 --> 00:21:33,350
is missing the patch results for

00:21:31,700 --> 00:21:35,810
individual test cases it has aggregate

00:21:33,350 --> 00:21:37,340
results when it has errors but doesn't

00:21:35,810 --> 00:21:38,570
actually have like if you have a test

00:21:37,340 --> 00:21:41,210
case that passes it doesn't question

00:21:38,570 --> 00:21:42,380
individually so I actually don't think

00:21:41,210 --> 00:21:45,620
it's a great one

00:21:42,380 --> 00:21:49,550
I like the kernel CI one and it happens

00:21:45,620 --> 00:21:51,890
to be in JSON and so I actually suggest

00:21:49,550 --> 00:21:56,390
that as an industry we adopt that going

00:21:51,890 --> 00:21:59,180
forward so there you go that's my

00:21:56,390 --> 00:22:00,740
proposal in terms of results parsing

00:21:59,180 --> 00:22:01,280
this is not so much something we have to

00:22:00,740 --> 00:22:02,900
stand

00:22:01,280 --> 00:22:05,420
because a lot of the stuff is fairly

00:22:02,900 --> 00:22:07,190
simple but you do need an abstraction

00:22:05,420 --> 00:22:10,160
converting all these non-standard test

00:22:07,190 --> 00:22:13,460
outputs to a standard results format we

00:22:10,160 --> 00:22:15,490
have in Fuego 80 parsers already for

00:22:13,460 --> 00:22:20,660
different formats including ones from

00:22:15,490 --> 00:22:24,370
tap and a lot of an LTP and a lot of

00:22:20,660 --> 00:22:27,650
other tests we can convert those into

00:22:24,370 --> 00:22:30,530
the what we call a run dot JSON but it's

00:22:27,650 --> 00:22:32,180
really it's the kernel CI format and

00:22:30,530 --> 00:22:34,940
then I don't know if you do you guys

00:22:32,180 --> 00:22:37,340
have in lava some kind of general parser

00:22:34,940 --> 00:22:39,950
mechanism for no it's election time to

00:22:37,340 --> 00:22:41,960
the test right - all they always tell

00:22:39,950 --> 00:22:44,320
the test Rogers they need to cold lava

00:22:41,960 --> 00:22:46,820
test case okay

00:22:44,320 --> 00:22:48,500
bundles all the creation of the results

00:22:46,820 --> 00:22:50,990
from that but they can cool that however

00:22:48,500 --> 00:22:52,520
they won't do whatever okay so so if

00:22:50,990 --> 00:22:54,830
they're if they're adapting an existing

00:22:52,520 --> 00:22:59,240
test like XFS tests they have to do the

00:22:54,830 --> 00:23:02,090
conversion themselves okay okay well I'm

00:22:59,240 --> 00:23:04,550
already over time I got it so and this

00:23:02,090 --> 00:23:06,320
is a this is a really big area board and

00:23:04,550 --> 00:23:08,960
test environment control power control

00:23:06,320 --> 00:23:10,460
file transfer remote execution it'd be

00:23:08,960 --> 00:23:14,480
really nice if we can standardize on

00:23:10,460 --> 00:23:17,000
this so really what you have is you have

00:23:14,480 --> 00:23:18,800
tools that provide an abstraction for

00:23:17,000 --> 00:23:21,770
these things like turn the power on and

00:23:18,800 --> 00:23:23,330
off communicate with the board execute

00:23:21,770 --> 00:23:26,240
command on the board

00:23:23,330 --> 00:23:27,740
and there's kind of a fixed set if

00:23:26,240 --> 00:23:32,210
there's actually not that many verbs

00:23:27,740 --> 00:23:34,310
there's really only about in Fuego we

00:23:32,210 --> 00:23:36,470
really have got it down to about four

00:23:34,310 --> 00:23:37,730
main ones that we use but the problem is

00:23:36,470 --> 00:23:39,710
there's always kind of easel

00:23:37,730 --> 00:23:42,830
that you have to deal with but if we can

00:23:39,710 --> 00:23:45,890
get kind of some standardization power

00:23:42,830 --> 00:23:49,700
control and command execution and file

00:23:45,890 --> 00:23:53,750
transfer that covers a huge amount of

00:23:49,700 --> 00:23:56,810
territory in terms of this so a lot of

00:23:53,750 --> 00:23:59,000
more control operations these are these

00:23:56,810 --> 00:24:00,710
are the top four that are really

00:23:59,000 --> 00:24:02,510
critical power off command power on

00:24:00,710 --> 00:24:05,120
command connects your command and hard

00:24:02,510 --> 00:24:06,380
reset there's soft reset and there's a

00:24:05,120 --> 00:24:08,990
bunch of other ones but these are kind

00:24:06,380 --> 00:24:13,760
of the real key ones if you have these

00:24:08,990 --> 00:24:16,310
you can do an amazing amount it TTC is

00:24:13,760 --> 00:24:20,930
something we use to Sony but also have a

00:24:16,310 --> 00:24:22,550
set of verbs very similar in the

00:24:20,930 --> 00:24:25,760
important ones here that correspond to

00:24:22,550 --> 00:24:35,300
the ones in lava our copy to copy from

00:24:25,760 --> 00:24:37,370
run and reboot and it has it's a thin

00:24:35,300 --> 00:24:41,030
wrapper for Rebecca abstracting board

00:24:37,370 --> 00:24:42,980
specific operations so Fuego has a model

00:24:41,030 --> 00:24:44,450
of much more direct interaction but

00:24:42,980 --> 00:24:47,510
during the test we communicate with the

00:24:44,450 --> 00:24:49,310
board deploy stuff and retreat stuff I'm

00:24:47,510 --> 00:24:51,050
not sure how that corresponds to how Bob

00:24:49,310 --> 00:24:55,370
are a lot of seems to do much more like

00:24:51,050 --> 00:24:57,050
a set up a big thing and go so we keep

00:24:55,370 --> 00:25:01,670
the test footage enough behind

00:24:57,050 --> 00:25:03,620
themselves so power power control I was

00:25:01,670 --> 00:25:05,690
looking at the log of code from the

00:25:03,620 --> 00:25:08,750
latest release almost all of them are

00:25:05,690 --> 00:25:11,480
either PDF client or SM SFTP you control

00:25:08,750 --> 00:25:15,290
with a couple of outliers in there

00:25:11,480 --> 00:25:17,930
TCC uses something called power control

00:25:15,290 --> 00:25:19,850
does echo there's turns out the TCC is

00:25:17,930 --> 00:25:21,890
used a lot with a particular debug board

00:25:19,850 --> 00:25:24,920
that allows you to do commands over

00:25:21,890 --> 00:25:26,330
serial and web prelate it'd be nice if

00:25:24,920 --> 00:25:27,920
we could standardize this interface so

00:25:26,330 --> 00:25:31,250
that someone comes up with a new board

00:25:27,920 --> 00:25:32,690
that can manage other boards they just

00:25:31,250 --> 00:25:35,750
plug into the interface and maybe that's

00:25:32,690 --> 00:25:37,910
PDU client it couldn't be PDU client ID

00:25:35,750 --> 00:25:39,890
but that's up I think it's worth having

00:25:37,910 --> 00:25:42,320
that discussion and see if we could

00:25:39,890 --> 00:25:44,690
standardize that my colleagues in Samson

00:25:42,320 --> 00:25:46,850
do you remember - oh yeah yeah they're

00:25:44,690 --> 00:25:50,150
working on the new version base ready I

00:25:46,850 --> 00:25:53,540
had the fact it looks fine you may try

00:25:50,150 --> 00:25:55,820
to google it and it uses the internet

00:25:53,540 --> 00:25:58,790
connection so we try they try to

00:25:55,820 --> 00:26:01,250
abstract the board on the storyboard

00:25:58,790 --> 00:26:02,540
itself so there is the universal

00:26:01,250 --> 00:26:06,440
interface oh they're pretty good they're

00:26:02,540 --> 00:26:08,690
putting a power control on the yes

00:26:06,440 --> 00:26:10,850
device it attempts the power control

00:26:08,690 --> 00:26:13,520
there's the universal connection by the

00:26:10,850 --> 00:26:16,490
internet and then everything which is

00:26:13,520 --> 00:26:19,130
sports specific seats on the study board

00:26:16,490 --> 00:26:21,530
itself okay so you don't need to pepper

00:26:19,130 --> 00:26:22,940
with this from from then actually we're

00:26:21,530 --> 00:26:25,340
saying more more and more of that

00:26:22,940 --> 00:26:26,930
because a lot of a lot of stuff I've

00:26:25,340 --> 00:26:29,990
seen a lot of board I have two boards in

00:26:26,930 --> 00:26:33,680
my lab now where the serial port of the

00:26:29,990 --> 00:26:38,420
serial console they have a serial USB on

00:26:33,680 --> 00:26:40,430
the board yet right so it'd be nice if

00:26:38,420 --> 00:26:43,250
we can stand standardize that so it's

00:26:40,430 --> 00:26:45,560
not all random right I'd be very

00:26:43,250 --> 00:26:47,300
interested to see exactly like what

00:26:45,560 --> 00:26:49,360
interface they chose to do that with and

00:26:47,300 --> 00:26:52,510
are you guys playing to that in other

00:26:49,360 --> 00:26:54,910
new client or well I didn't know how

00:26:52,510 --> 00:26:56,740
they do this I love that project I know

00:26:54,910 --> 00:27:00,340
the construction of the board itself

00:26:56,740 --> 00:27:03,010
because I have them and they are able to

00:27:00,340 --> 00:27:07,030
connect fire cereal there is the serial

00:27:03,010 --> 00:27:09,880
interface for mobile phones there is the

00:27:07,030 --> 00:27:13,120
Internet to the port which is tested

00:27:09,880 --> 00:27:18,100
source page etc the serial console with

00:27:13,120 --> 00:27:20,890
JTAC and other stop ok standard phone ok

00:27:18,100 --> 00:27:23,559
nothing big anyway I think so and Sony

00:27:20,890 --> 00:27:25,660
we end up using a lot of we have we have

00:27:23,559 --> 00:27:28,809
some separate boards right that manage

00:27:25,660 --> 00:27:30,970
connections with the device of your

00:27:28,809 --> 00:27:32,919
tests and so we use a USB serial

00:27:30,970 --> 00:27:34,990
interface and we're just doing character

00:27:32,919 --> 00:27:38,260
commands to a serial port on Linux to do

00:27:34,990 --> 00:27:40,240
things like power control and flip USB

00:27:38,260 --> 00:27:42,250
buses on and off and stuff ok in terms

00:27:40,240 --> 00:27:45,820
of c'mon oh c'mon some are sent via

00:27:42,250 --> 00:27:48,040
internet there is the orange Maldonado

00:27:45,820 --> 00:27:50,260
pie board which is connected to the

00:27:48,040 --> 00:27:52,480
network and everything which is pork

00:27:50,260 --> 00:27:55,600
specifically the port under test

00:27:52,480 --> 00:27:57,640
specific seats on docks nano PI and it

00:27:55,600 --> 00:28:00,250
controls by the specific enterprise use

00:27:57,640 --> 00:28:02,169
it depends what you board and we should

00:28:00,250 --> 00:28:05,679
definitely talk talk more after are you

00:28:02,169 --> 00:28:07,720
going to be LC or yes ok if we hope to

00:28:05,679 --> 00:28:09,280
get more time here I'm sorry I've

00:28:07,720 --> 00:28:11,140
already I'm like over time and I

00:28:09,280 --> 00:28:13,000
apologize for that

00:28:11,140 --> 00:28:14,650
file transfer there's a bunch of

00:28:13,000 --> 00:28:17,830
different mechanisms being used I don't

00:28:14,650 --> 00:28:20,470
know if it's that critical you guys are

00:28:17,830 --> 00:28:23,169
using serial bus compo specific we don't

00:28:20,470 --> 00:28:24,620
use sentiment to follow transfer files

00:28:23,169 --> 00:28:27,740
in receiving them I just

00:28:24,620 --> 00:28:29,659
oh that's okay we've never done so

00:28:27,740 --> 00:28:33,230
possible serial so what'd he do you

00:28:29,659 --> 00:28:37,190
require networking or dependent on the

00:28:33,230 --> 00:28:39,590
device but love so I love the devices

00:28:37,190 --> 00:28:42,799
the simplest ones tend to use TFTP if

00:28:39,590 --> 00:28:44,840
they can do that then everything becomes

00:28:42,799 --> 00:28:53,299
a lot easier a lot of other ports to use

00:28:44,840 --> 00:28:55,400
fast food may be for transfer of powers

00:28:53,299 --> 00:28:57,440
do in the test operation but to actually

00:28:55,400 --> 00:29:00,409
deploy these files our full powers to

00:28:57,440 --> 00:29:01,669
the board to construct the test with

00:29:00,409 --> 00:29:06,399
most bears and get the bullet running

00:29:01,669 --> 00:29:11,750
that needs to be fast food or TFTP or

00:29:06,399 --> 00:29:14,450
pixels so from our point of view there

00:29:11,750 --> 00:29:17,149
are two options we use the SD card to

00:29:14,450 --> 00:29:19,880
exert that it's also interval spine so

00:29:17,149 --> 00:29:22,039
we are disconnecting the SD card flashes

00:29:19,880 --> 00:29:25,340
or in some file and to reconnect it to

00:29:22,039 --> 00:29:28,000
the device we have we've had so many but

00:29:25,340 --> 00:29:28,000
failures

00:29:32,110 --> 00:29:39,590
most particularly requirements money

00:29:36,250 --> 00:29:42,019
okay but it's working it's working for

00:29:39,590 --> 00:29:44,840
over two years and there is no problems

00:29:42,019 --> 00:29:46,850
and another approach for boards which

00:29:44,840 --> 00:29:51,110
are routing from pen drives not from SD

00:29:46,850 --> 00:29:53,659
cards we are what we can emulate we must

00:29:51,110 --> 00:29:56,840
earn a know by itself and connect it

00:29:53,659 --> 00:29:58,070
directly to the board okay so I'm like I

00:29:56,840 --> 00:30:01,879
said I've over time so I'm not giving

00:29:58,070 --> 00:30:03,769
this stuff as much airtime as it

00:30:01,879 --> 00:30:05,750
deserves but there's also just direct

00:30:03,769 --> 00:30:07,580
manned execution I don't know how much

00:30:05,750 --> 00:30:09,919
of the stuff I don't know if how much

00:30:07,580 --> 00:30:12,409
commands you execute directly on target

00:30:09,919 --> 00:30:14,419
like during tests or if it's all right

00:30:12,409 --> 00:30:14,809
once you set up the test it go do the

00:30:14,419 --> 00:30:17,360
test

00:30:14,809 --> 00:30:21,049
all we do is let this cook let the test

00:30:17,360 --> 00:30:23,259
foot just get run right okay but there

00:30:21,049 --> 00:30:28,179
seems to be some unstandardized things

00:30:23,259 --> 00:30:31,070
and particularly button and bus control

00:30:28,179 --> 00:30:32,750
so there's a lot of tests is critical in

00:30:31,070 --> 00:30:35,090
Hardware cooking tests where you want to

00:30:32,750 --> 00:30:37,490
be able to simulate pressing up buttons

00:30:35,090 --> 00:30:40,340
or you want to be able to turn buses

00:30:37,490 --> 00:30:43,190
on/off to simulate plug and unplug

00:30:40,340 --> 00:30:44,960
devices USB switching there's complex

00:30:43,190 --> 00:30:47,120
boot modes with particularly like phones

00:30:44,960 --> 00:30:50,210
have a lot of weird things just to get

00:30:47,120 --> 00:30:52,039
into reset mode you have to do odd

00:30:50,210 --> 00:30:54,590
behaviors those kinds of things just

00:30:52,039 --> 00:30:56,990
gets older the way what that gets older

00:30:54,590 --> 00:30:59,240
the way yeah well that's the thing they

00:30:56,990 --> 00:31:00,980
get solved everyone solved in a custom

00:30:59,240 --> 00:31:02,509
way it'd be nice if we could at least

00:31:00,980 --> 00:31:04,610
come up with some guidelines saying hey

00:31:02,509 --> 00:31:06,049
if you solve it this way then we own the

00:31:04,610 --> 00:31:11,389
test frameworks go how to communicate

00:31:06,049 --> 00:31:14,690
with that and then I'll just so sorry

00:31:11,389 --> 00:31:17,120
sorry for going over but next steps if

00:31:14,690 --> 00:31:17,600
we wanted to do some standards how would

00:31:17,120 --> 00:31:21,799
we do it

00:31:17,600 --> 00:31:23,330
I would like to have the groups get

00:31:21,799 --> 00:31:25,039
together there's a couple of ways since

00:31:23,330 --> 00:31:27,350
it's open source I don't know if you see

00:31:25,039 --> 00:31:29,029
both point number four there one way is

00:31:27,350 --> 00:31:30,860
just to go into the other projects and

00:31:29,029 --> 00:31:33,660
contribute support for something right

00:31:30,860 --> 00:31:36,600
if you want him to support the

00:31:33,660 --> 00:31:38,100
the colonel CIA test format you can go

00:31:36,600 --> 00:31:42,810
with the avocado and you can add it and

00:31:38,100 --> 00:31:44,730
say hey take these packages but it'd be

00:31:42,810 --> 00:31:47,640
it'd be nice to make sure that we're

00:31:44,730 --> 00:31:49,200
handling everybody's requirements and so

00:31:47,640 --> 00:31:51,270
I don't know is it worth planning an

00:31:49,200 --> 00:31:55,080
event or a summit I know plumbers just

00:31:51,270 --> 00:31:56,820
had a kernel testing track but that's

00:31:55,080 --> 00:31:59,370
that's not exactly I don't think it's

00:31:56,820 --> 00:32:00,720
just it's not the right venue I think

00:31:59,370 --> 00:32:02,580
there needs to be a group of like a

00:32:00,720 --> 00:32:04,440
spring work guides to get together and

00:32:02,580 --> 00:32:05,820
say what would be valuable to our

00:32:04,440 --> 00:32:07,350
frameworks if we collaborate at them

00:32:05,820 --> 00:32:09,690
should we at least talk to money list

00:32:07,350 --> 00:32:12,780
well we should be documenting it yes

00:32:09,690 --> 00:32:13,980
well quite frankly colonel CI one of the

00:32:12,780 --> 00:32:15,330
one of the real great things about

00:32:13,980 --> 00:32:18,120
kernel CI is they have their steam

00:32:15,330 --> 00:32:20,250
online so we were able to look at it and

00:32:18,120 --> 00:32:21,480
it was invaluable when we're that

00:32:20,250 --> 00:32:23,520
Brewers engineering where we're

00:32:21,480 --> 00:32:27,840
implementing in our tool have that

00:32:23,520 --> 00:32:30,060
documented it was really handy so anyway

00:32:27,840 --> 00:32:31,950
I don't know if we're gonna decide

00:32:30,060 --> 00:32:33,450
anything right now but that's kind of

00:32:31,950 --> 00:32:35,550
the direction I'd like us to headed

00:32:33,450 --> 00:32:39,530
maybe we can talk more just one person

00:32:35,550 --> 00:32:39,530
through the week yeah okay

00:32:44,540 --> 00:32:49,500

YouTube URL: https://www.youtube.com/watch?v=uwWSijtVsLE


