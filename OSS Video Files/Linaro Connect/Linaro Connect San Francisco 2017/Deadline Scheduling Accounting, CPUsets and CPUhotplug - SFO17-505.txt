Title: Deadline Scheduling Accounting, CPUsets and CPUhotplug - SFO17-505
Publication date: 2017-10-20
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-505
Session Name: Deadline Scheduling Accounting, CPUsets and CPUhotplug - SFO17-505
Speaker: Mathieu Poirier
Track: Kernel


★ Session Summary ★
There is a long standing feature interaction problem between CPUset topology changes, CPUhotplug operations and deadline scheduling metrics.
 
 After giving a short introduction of what the issues are the session will focus on the proposed solution and the feedback received from the mailing list and any conversation held at Linux Plumbers.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-505/
Presentation: https://www.slideshare.net/linaroorg/deadline-scheduling-accounting-cpusets-and-cpuhotplug-sfo17505
Video: https://www.youtube.com/watch?v=ffqO6Otaj5I
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:13,700 --> 00:00:18,140
all right so let's get started today

00:00:15,890 --> 00:00:20,150
we'll be talking about the long-standing

00:00:18,140 --> 00:00:21,740
problem or if you travel in the future

00:00:20,150 --> 00:00:25,220
interaction problems that have been

00:00:21,740 --> 00:00:27,290
happening between two except

00:00:25,220 --> 00:00:31,610
systems so CPU set and see if you had

00:00:27,290 --> 00:00:34,670
blood and I knew where like the deadline

00:00:31,610 --> 00:00:36,650
scheduler so at first I thought it was a

00:00:34,670 --> 00:00:39,320
feature attraction problem but really

00:00:36,650 --> 00:00:41,660
when I started thinking about it it it's

00:00:39,320 --> 00:00:44,180
to future interaction problems so we're

00:00:41,660 --> 00:00:46,610
talking about them today we'll be seeing

00:00:44,180 --> 00:00:49,640
what the problems are I was able I think

00:00:46,610 --> 00:00:52,129
to find a solution to the first one but

00:00:49,640 --> 00:00:53,420
obviously we need to have more brains

00:00:52,129 --> 00:00:55,580
and more people are looking at the

00:00:53,420 --> 00:00:58,460
second one because I don't think I can

00:00:55,580 --> 00:01:00,199
do it by myself ok so the first half of

00:00:58,460 --> 00:01:01,640
the presentation we talking about the

00:01:00,199 --> 00:01:04,370
first feature interaction the problem

00:01:01,640 --> 00:01:06,830
the second one will be talking about the

00:01:04,370 --> 00:01:07,700
solutions that were set forth for that a

00:01:06,830 --> 00:01:09,850
couple of weeks

00:01:07,700 --> 00:01:13,040
sorry four weeks ago on an analyst and

00:01:09,850 --> 00:01:14,990
after that I'm hoping to have a sort of

00:01:13,040 --> 00:01:18,170
an open conversation on what we can do

00:01:14,990 --> 00:01:21,859
to address the remaining issues and if

00:01:18,170 --> 00:01:26,240
years I have an fly I had a chance to

00:01:21,859 --> 00:01:29,030
fly so before starts this is not a talk

00:01:26,240 --> 00:01:30,740
on how the Linux scheduler work if you

00:01:29,030 --> 00:01:33,560
are interested in that crisp way of

00:01:30,740 --> 00:01:36,979
documentation out there on that topic

00:01:33,560 --> 00:01:38,960
it's also not plantation where we see

00:01:36,979 --> 00:01:41,450
what's happening in the deadline

00:01:38,960 --> 00:01:45,380
scheduler if you are interested in that

00:01:41,450 --> 00:01:47,600
go and you're back in Dublin PLC there's

00:01:45,380 --> 00:01:50,270
two really good presentation that go to

00:01:47,600 --> 00:01:52,490
the heart of what deadline scheduling is

00:01:50,270 --> 00:01:55,430
and how we work or how it works

00:01:52,490 --> 00:01:57,890
those two presentations were really good

00:01:55,430 --> 00:01:59,660
the presentations are posted on the

00:01:57,890 --> 00:02:01,730
website so if you are interested enough

00:01:59,660 --> 00:02:05,480
by all means these two presentations

00:02:01,730 --> 00:02:07,760
were definitely worth your time looking

00:02:05,480 --> 00:02:10,310
at them okay so the first problem that

00:02:07,760 --> 00:02:12,980
were looking at was identified by Steve

00:02:10,310 --> 00:02:15,710
Ross yet maybe three years ago on a

00:02:12,980 --> 00:02:18,110
mailing list is a problem that is 100

00:02:15,710 --> 00:02:20,110
percent reproducible so we're lucky in

00:02:18,110 --> 00:02:22,670
that way we don't have to wait 48 hours

00:02:20,110 --> 00:02:24,860
it's also reproducible on all

00:02:22,670 --> 00:02:27,860
architectures so whether there are nips

00:02:24,860 --> 00:02:30,200
our PC or Intel you're guaranteed to hit

00:02:27,860 --> 00:02:31,459
it all right so let's first I thought

00:02:30,200 --> 00:02:34,400
you know this might be an interesting

00:02:31,459 --> 00:02:36,370
problem to look at this I fooled myself

00:02:34,400 --> 00:02:38,530
into thinking that it would be easy

00:02:36,370 --> 00:02:42,890
fewer years for me

00:02:38,530 --> 00:02:54,950
so people have started looking into this

00:02:42,890 --> 00:02:56,360
a while back so but that turned to be to

00:02:54,950 --> 00:02:58,520
have some shortcomings in it and

00:02:56,360 --> 00:03:01,910
basically the efforts died there

00:02:58,520 --> 00:03:04,160
so talking to Steve we thought would be

00:03:01,910 --> 00:03:05,709
a good idea to revive the effort and

00:03:04,160 --> 00:03:10,430
that's where I came in

00:03:05,709 --> 00:03:12,680
okay so the problem is is that at the

00:03:10,430 --> 00:03:14,680
core of dependent scheduling model we

00:03:12,680 --> 00:03:17,420
have this concept of resource

00:03:14,680 --> 00:03:19,790
reservation for CPU so we have a

00:03:17,420 --> 00:03:23,989
contract between a task and scheduler

00:03:19,790 --> 00:03:26,110
the task is going to each lies some

00:03:23,989 --> 00:03:28,030
bandwidth and the scheduler

00:03:26,110 --> 00:03:32,140
scheduler pledge to give that much

00:03:28,030 --> 00:03:34,510
bandwidth to the task those metrics are

00:03:32,140 --> 00:03:39,430
really important because we don't have

00:03:34,510 --> 00:03:42,610
them we a oversell the resources in our

00:03:39,430 --> 00:03:46,740
system a conservative might actually not

00:03:42,610 --> 00:03:50,680
get the bang for the buck the hardware

00:03:46,740 --> 00:03:53,709
okay so if we go if go dive in let's

00:03:50,680 --> 00:03:57,940
start an example this is a similar

00:03:53,709 --> 00:04:00,940
operation on dragon boards we have four

00:03:57,940 --> 00:04:04,570
CPUs here are only one dev on task that

00:04:00,940 --> 00:04:10,750
has a 6/10 property socialization in

00:04:04,570 --> 00:04:12,190
about six units on a period of ten so

00:04:10,750 --> 00:04:14,380
the unit's here are not important it

00:04:12,190 --> 00:04:16,630
could be millisecond microsecond it

00:04:14,380 --> 00:04:18,489
really doesn't matter the result is the

00:04:16,630 --> 00:04:22,990
same we have a sixty percent utilization

00:04:18,489 --> 00:04:25,480
of the deadline capability so 60 percent

00:04:22,990 --> 00:04:28,450
of 2 to the 16 in is a total utilization

00:04:25,480 --> 00:04:30,280
that we have there that utilization is

00:04:28,450 --> 00:04:33,400
carrying in all of their run queue

00:04:30,280 --> 00:04:34,439
simply because this information is now

00:04:33,400 --> 00:04:37,409
in a route

00:04:34,439 --> 00:04:40,409
and the root domain is common to all the

00:04:37,409 --> 00:04:42,509
rug cues okay again so this is at the

00:04:40,409 --> 00:04:46,259
beginning of the example we have our

00:04:42,509 --> 00:04:49,019
utilization and everyone's happening if

00:04:46,259 --> 00:04:49,649
we do hot-plug cpu 3 this is the end

00:04:49,019 --> 00:04:52,469
result

00:04:49,649 --> 00:04:55,559
ok we see that we completely lost our

00:04:52,469 --> 00:04:58,139
deadline metric this is not good because

00:04:55,559 --> 00:05:00,749
right now our task is still running and

00:04:58,139 --> 00:05:03,689
if we were to have a request for another

00:05:00,749 --> 00:05:06,419
task that has 60% value of utilization

00:05:03,689 --> 00:05:09,329
there would be over selling our system

00:05:06,419 --> 00:05:11,579
ok so we have a problem

00:05:09,329 --> 00:05:13,139
this is reproducible unheard percent of

00:05:11,579 --> 00:05:17,429
the time so I was very excited about

00:05:13,139 --> 00:05:20,159
that part now this was a hot plug

00:05:17,429 --> 00:05:22,079
operation the same is true for CPU set

00:05:20,159 --> 00:05:25,019
it's just a bit more complex to do this

00:05:22,079 --> 00:05:27,059
with seeking set and I decided to save

00:05:25,019 --> 00:05:29,099
that examples or a problem number two

00:05:27,059 --> 00:05:33,300
that we will be looking at later in a

00:05:29,099 --> 00:05:35,669
presentation ok so what is happening why

00:05:33,300 --> 00:05:38,729
is it that we're losing our deadline

00:05:35,669 --> 00:05:41,369
metrics like this it's all related to

00:05:38,729 --> 00:05:46,289
the famous route domain so root domains

00:05:41,369 --> 00:05:48,029
pertain to scheduling domain so all of

00:05:46,289 --> 00:05:50,219
the CPUs part of the scheduling domain

00:05:48,029 --> 00:05:52,979
will stash metrics in the loop domain

00:05:50,219 --> 00:05:55,829
and that's exactly where the deadlines

00:05:52,979 --> 00:05:57,719
scheduling people have decided to keep

00:05:55,829 --> 00:05:59,909
track of the metrics I think it's a good

00:05:57,719 --> 00:06:01,979
idea at first I thought about maybe

00:05:59,909 --> 00:06:04,379
revising this and then spinning off a

00:06:01,979 --> 00:06:06,469
new data structure but really when

00:06:04,379 --> 00:06:09,800
taking a step back and looking at

00:06:06,469 --> 00:06:12,529
constraints I think that putting

00:06:09,800 --> 00:06:15,679
deadline information

00:06:12,529 --> 00:06:17,599
is a good idea and should be kept there

00:06:15,679 --> 00:06:20,389
it's just a matter of handling

00:06:17,599 --> 00:06:23,359
operations from CPU Hut life and city

00:06:20,389 --> 00:06:26,089
you said okay so why is this happening

00:06:23,359 --> 00:06:27,799
it is happening because in both CPU set

00:06:26,089 --> 00:06:29,749
boat and we're gonna see if you HOT the

00:06:27,799 --> 00:06:32,329
first thing that happens when those

00:06:29,749 --> 00:06:34,879
operations are carried out is that the

00:06:32,329 --> 00:06:37,239
old root domains are destroyed boom you

00:06:34,879 --> 00:06:40,519
lose all the information that was there

00:06:37,239 --> 00:06:42,739
when you look back all that information

00:06:40,519 --> 00:06:44,659
pertaining to domain is still because

00:06:42,739 --> 00:06:46,519
the scheduling is about to change the

00:06:44,659 --> 00:06:48,409
scheduling domain is bound to change so

00:06:46,519 --> 00:06:51,109
there were no point in keeping anything

00:06:48,409 --> 00:06:53,869
there deadlines scheduling is the first

00:06:51,109 --> 00:06:58,189
instance where we actually have a case

00:06:53,869 --> 00:07:01,219
for keeping quite heritage some of the

00:06:58,189 --> 00:07:02,779
information on the schedule so as I

00:07:01,219 --> 00:07:06,319
mentioned the old route domain is

00:07:02,779 --> 00:07:08,499
destroyed all of the red cubes are

00:07:06,319 --> 00:07:11,239
placed into the default domain

00:07:08,499 --> 00:07:13,459
scheduling the radar we computed and off

00:07:11,239 --> 00:07:15,589
that new root domains are attacked along

00:07:13,459 --> 00:07:18,619
so the new root domains are creating

00:07:15,589 --> 00:07:20,509
that created and the memory is zeroed

00:07:18,619 --> 00:07:24,110
out which is exactly why we're getting a

00:07:20,509 --> 00:07:26,869
total bandwidth zero here and after that

00:07:24,110 --> 00:07:35,179
the the hot plug or receive you set

00:07:26,869 --> 00:07:38,769
operations are just over so it's tricky

00:07:35,179 --> 00:07:40,759
because both popular and if you set

00:07:38,769 --> 00:07:44,449
subsystem are using the same mechanism

00:07:40,759 --> 00:07:46,879
so the code that deletes the root domain

00:07:44,449 --> 00:07:50,239
and recompute the new scheduling domain

00:07:46,879 --> 00:07:53,109
is common to both of them the difference

00:07:50,239 --> 00:07:55,909
is that CPU huh clavo camera operation

00:07:53,109 --> 00:07:57,109
asynchronously where our CD set will do

00:07:55,909 --> 00:07:59,299
it safely synchronously

00:07:57,109 --> 00:08:02,289
if it wasn't in case it'd be a lot

00:07:59,299 --> 00:08:04,759
easier to fix this but it isn't because

00:08:02,289 --> 00:08:06,769
the different the information is

00:08:04,759 --> 00:08:10,459
available at different times during

00:08:06,769 --> 00:08:14,629
those operation okay so the obvious

00:08:10,459 --> 00:08:15,620
solution here is to keep track of all of

00:08:14,629 --> 00:08:17,240
it at one time

00:08:15,620 --> 00:08:19,490
system and as soon as we have an

00:08:17,240 --> 00:08:21,110
operation that the stores root domain is

00:08:19,490 --> 00:08:23,540
to circle through those tasks and

00:08:21,110 --> 00:08:25,850
recompute the utilization that we have

00:08:23,540 --> 00:08:29,389
the task into their domain exactly the

00:08:25,850 --> 00:08:32,839
same way it is done when a task is being

00:08:29,389 --> 00:08:35,300
promoted to a deadline task so it's in

00:08:32,839 --> 00:08:37,550
theory is quite easy that a solution is

00:08:35,300 --> 00:08:40,070
also quite easy it's not very complex to

00:08:37,550 --> 00:08:41,719
think about that the problem is as I

00:08:40,070 --> 00:08:43,300
mentioned the operations are done

00:08:41,719 --> 00:08:48,380
synchronously and asynchronously

00:08:43,300 --> 00:08:50,810
depending on which subsystem you're

00:08:48,380 --> 00:08:53,260
carrying it from and the second thing is

00:08:50,810 --> 00:08:56,270
and that's the trickier part is that

00:08:53,260 --> 00:08:58,339
tasks in the system when they get

00:08:56,270 --> 00:09:01,130
suspended for whatever reason they are

00:08:58,339 --> 00:09:03,160
taken off the run queues so the tasks

00:09:01,130 --> 00:09:05,029
are taken off the run queue is basically

00:09:03,160 --> 00:09:06,650
you don't know where they went

00:09:05,029 --> 00:09:09,890
because the other timer they really need

00:09:06,650 --> 00:09:13,400
X ok so keeping track the track of those

00:09:09,890 --> 00:09:14,900
tasks could be difficult if we're

00:09:13,400 --> 00:09:16,460
talking about running tasks all you have

00:09:14,900 --> 00:09:18,350
to do is look and run queues and then

00:09:16,460 --> 00:09:20,060
you can have fun but then there's an app

00:09:18,350 --> 00:09:25,520
shop your vision of your system would be

00:09:20,060 --> 00:09:27,529
intricate okay so I thought about that

00:09:25,520 --> 00:09:30,920
looked at what other people had done

00:09:27,529 --> 00:09:33,529
once again with our queue online or to

00:09:30,920 --> 00:09:36,970
offline and we would always hit the same

00:09:33,529 --> 00:09:40,120
condition that there's absolutely no way

00:09:36,970 --> 00:09:42,890
to keep track of tasks that have

00:09:40,120 --> 00:09:44,990
suspended other than starting to have

00:09:42,890 --> 00:09:46,820
making lists that was certainly through

00:09:44,990 --> 00:09:50,260
that became difficult because of

00:09:46,820 --> 00:09:53,270
blocking and it's really murky solution

00:09:50,260 --> 00:09:54,980
so looking at that spending of doing a

00:09:53,270 --> 00:09:59,450
lot of soul-searching in the cpu set

00:09:54,980 --> 00:10:02,510
subsystem found out that each CPU set

00:09:59,450 --> 00:10:05,890
that you create will keep a list of the

00:10:02,510 --> 00:10:09,290
tasks that it is handling that is really

00:10:05,890 --> 00:10:12,470
salvation because in the end what we can

00:10:09,290 --> 00:10:15,140
do after a hot plug or CPU set operation

00:10:12,470 --> 00:10:17,240
is you circle through the tasks that are

00:10:15,140 --> 00:10:19,339
handled by the CPU set you look for

00:10:17,240 --> 00:10:21,230
deadlines tasks once you have a deadline

00:10:19,339 --> 00:10:22,480
task you and get a hit on the run queue

00:10:21,230 --> 00:10:24,010
and with the run

00:10:22,480 --> 00:10:26,170
you access the root domain appertaining

00:10:24,010 --> 00:10:28,240
student so all you have to do is add

00:10:26,170 --> 00:10:33,010
your utilisation to the room domain and

00:10:28,240 --> 00:10:35,050
voila Cakes all case solve the advantage

00:10:33,010 --> 00:10:37,269
of this is that you're treating sleeping

00:10:35,050 --> 00:10:40,240
tasks and running taxes exactly the same

00:10:37,269 --> 00:10:44,860
way in fact the algorithm that does that

00:10:40,240 --> 00:10:47,829
is unaware of the status of a task so

00:10:44,860 --> 00:10:51,610
really easy to fill that justice is

00:10:47,829 --> 00:10:54,550
about 20 line long locking is extensive

00:10:51,610 --> 00:10:56,860
what talks about it the mechanic the

00:10:54,550 --> 00:10:59,199
mechanics that is aborted by the super

00:10:56,860 --> 00:11:04,120
set set system to do this that's what

00:10:59,199 --> 00:11:07,540
candy so I talked to Peter Schultz drove

00:11:04,120 --> 00:11:09,519
up this looka a baby knows well and they

00:11:07,540 --> 00:11:11,949
were a living person that this was the

00:11:09,519 --> 00:11:14,769
right way to tackle it they were happy

00:11:11,949 --> 00:11:16,720
with that part of solution and they

00:11:14,769 --> 00:11:19,000
asked me to give them more time to be

00:11:16,720 --> 00:11:22,990
testing obviously there's a lot of

00:11:19,000 --> 00:11:26,769
ramifications push go there but as a

00:11:22,990 --> 00:11:30,399
whole we think that this part a lot of a

00:11:26,769 --> 00:11:33,130
fairly confident that this part is is

00:11:30,399 --> 00:11:35,680
the right solution I tried to find other

00:11:33,130 --> 00:11:38,740
ways to fix this and really this is that

00:11:35,680 --> 00:11:41,829
easy I think the solution in itself to

00:11:38,740 --> 00:11:43,720
me if we remove blocking and all the

00:11:41,829 --> 00:11:48,130
code that we push around to get this to

00:11:43,720 --> 00:11:50,620
work might be less than 500 or so less

00:11:48,130 --> 00:11:52,180
than 500 line so the solution itself is

00:11:50,620 --> 00:11:53,860
very easy it's a lot of the code you

00:11:52,180 --> 00:11:57,730
have to push in order to get this to

00:11:53,860 --> 00:12:01,660
work so the advantage as I mentioned is

00:11:57,730 --> 00:12:03,160
very simple it's treating tasks whether

00:12:01,660 --> 00:12:07,269
they're running are sleeping exactly the

00:12:03,160 --> 00:12:09,240
same way and it works with any common

00:12:07,269 --> 00:12:13,520
seq set apology that he can

00:12:09,240 --> 00:12:16,860
within the wall the street okay so it's

00:12:13,520 --> 00:12:19,230
a bit of a disadvantage is the time that

00:12:16,860 --> 00:12:21,089
it takes to recompute things but if you

00:12:19,230 --> 00:12:22,920
don't want couple of that your next

00:12:21,089 --> 00:12:25,430
solution or system to prevent a hot plug

00:12:22,920 --> 00:12:31,290
or sepia set operation in the present

00:12:25,430 --> 00:12:33,839
and uh the thing that really doesn't fix

00:12:31,290 --> 00:12:35,339
is each feature interaction problem

00:12:33,839 --> 00:12:40,320
number two which is what we're going to

00:12:35,339 --> 00:12:41,760
start looking at okay so what we're

00:12:40,320 --> 00:12:43,470
dealing would see if you set the house

00:12:41,760 --> 00:12:45,270
looking to do with CPU hot rodders lines

00:12:43,470 --> 00:12:48,060
so it's strictly related to see you said

00:12:45,270 --> 00:12:50,610
when dealing with CPU set the problem is

00:12:48,060 --> 00:12:53,550
that we ended up the tasks are spanning

00:12:50,610 --> 00:12:56,190
more than one loop domain all right at

00:12:53,550 --> 00:13:00,750
first you think like our honor is des

00:12:56,190 --> 00:13:03,480
possible in fact it's quite easy ok for

00:13:00,750 --> 00:13:05,550
example we're going back to a system

00:13:03,480 --> 00:13:07,440
that has just booted and we're going to

00:13:05,550 --> 00:13:10,350
look at what's happening on the root

00:13:07,440 --> 00:13:12,270
domain level CPU set and task level so

00:13:10,350 --> 00:13:15,060
we have a rounded task pick any one it

00:13:12,270 --> 00:13:16,950
doesn't matter okay again we're on the

00:13:15,060 --> 00:13:20,220
dragon board so for CPUs

00:13:16,950 --> 00:13:22,410
so at boot time we're gonna have all of

00:13:20,220 --> 00:13:24,089
our IQs point to the same moon domain

00:13:22,410 --> 00:13:28,529
right that's on the bottom over there

00:13:24,089 --> 00:13:32,070
are left our task CDU maps our CPU

00:13:28,529 --> 00:13:34,079
allowed masked really important so the

00:13:32,070 --> 00:13:37,589
task is allowed to roam on all four CPUs

00:13:34,079 --> 00:13:39,480
and on the CPU set aside every task that

00:13:37,589 --> 00:13:41,670
you spin off on a system monkey fault

00:13:39,480 --> 00:13:44,310
will end up in the debuff CD set ok so

00:13:41,670 --> 00:13:48,839
everything is great this is running

00:13:44,310 --> 00:13:50,820
exactly as expected so let's let's get

00:13:48,839 --> 00:13:51,680
going we're going to create two CPU

00:13:50,820 --> 00:13:52,899
steps

00:13:51,680 --> 00:13:55,149
nothing

00:13:52,899 --> 00:13:57,819
you can create as many CPU sets us one

00:13:55,149 --> 00:13:59,800
as long as you don't touch the scheduled

00:13:57,819 --> 00:14:03,100
balance flat nothing will happen

00:13:59,800 --> 00:14:04,990
okay at this point here we have the same

00:14:03,100 --> 00:14:09,189
schedule in domain of all of the CPUs

00:14:04,990 --> 00:14:14,800
are being annuals or in considered for

00:14:09,189 --> 00:14:17,290
load balancing other there's just just

00:14:14,800 --> 00:14:19,089
more kitchen work here we are we have

00:14:17,290 --> 00:14:20,740
determined that we won't see q0 we're

00:14:19,089 --> 00:14:22,720
going to first set sixty two and three

00:14:20,740 --> 00:14:23,499
in the second set but once again nothing

00:14:22,720 --> 00:14:24,730
has changed

00:14:23,499 --> 00:14:27,670
nothing has changed because we haven't

00:14:24,730 --> 00:14:30,550
told the scheduler about this yet we do

00:14:27,670 --> 00:14:33,550
so by flipping off the sched load

00:14:30,550 --> 00:14:36,819
balancing life this will trigger the cpu

00:14:33,550 --> 00:14:38,740
set mechanic and at the end of that the

00:14:36,819 --> 00:14:41,769
scheduler will have a different vision

00:14:38,740 --> 00:14:45,249
of the world than it had before but will

00:14:41,769 --> 00:14:47,170
have this 2news scheduling domain so one

00:14:45,249 --> 00:14:50,319
scheduling domain for set one and one

00:14:47,170 --> 00:14:51,990
scheduling going for set two and that's

00:14:50,319 --> 00:14:55,059
where things get tricky

00:14:51,990 --> 00:14:57,699
alright so let's flip our flag okay this

00:14:55,059 --> 00:15:00,279
is where we're at once we flip our flag

00:14:57,699 --> 00:15:02,230
the difference is that our new domains

00:15:00,279 --> 00:15:05,889
are different we have one root domain

00:15:02,230 --> 00:15:07,600
for a set one so our q0 and our if you

00:15:05,889 --> 00:15:10,540
want to have a differently domain than

00:15:07,600 --> 00:15:13,120
of our two or three and our two - this

00:15:10,540 --> 00:15:16,899
is really important because now we have

00:15:13,120 --> 00:15:20,649
two domain but our CPU allowed mask is

00:15:16,899 --> 00:15:23,199
still set to four CDs this is exactly

00:15:20,649 --> 00:15:25,209
what is expected if you are running a

00:15:23,199 --> 00:15:27,189
CFS task there's no problem there

00:15:25,209 --> 00:15:30,519
because there's no accounting done for

00:15:27,189 --> 00:15:33,040
those tasks ok so even if there's no

00:15:30,519 --> 00:15:35,709
balancing happening between set one and

00:15:33,040 --> 00:15:39,629
set to the scheduler is free to move

00:15:35,709 --> 00:15:42,370
tasks to those sets in any way it was

00:15:39,629 --> 00:15:46,439
again if we're looking at CFS test

00:15:42,370 --> 00:15:49,480
that's not a problem but because

00:15:46,439 --> 00:15:51,549
deadline accounting and worse based on

00:15:49,480 --> 00:15:53,799
rule Amin and we have metrics that allow

00:15:51,549 --> 00:15:56,679
that ensures that we don't oversell our

00:15:53,799 --> 00:15:58,660
system this becomes a problem so if

00:15:56,679 --> 00:16:01,569
we're trying to put our task 1 to a deal

00:15:58,660 --> 00:16:05,230
task and we assume that at the moment of

00:16:01,569 --> 00:16:08,319
we did this world CPU 3 the bandwidth

00:16:05,230 --> 00:16:10,720
acceptance test will be done on the

00:16:08,319 --> 00:16:13,149
domain C it will be accepted and the

00:16:10,720 --> 00:16:15,790
problem right we're having bandwidth we

00:16:13,149 --> 00:16:19,990
have enough data for it but the task is

00:16:15,790 --> 00:16:23,410
able to be placed on CPU 0 and 1 but on

00:16:19,990 --> 00:16:25,769
Lu domain being here the deadline

00:16:23,410 --> 00:16:30,370
metrics are not been accounted for as

00:16:25,769 --> 00:16:34,059
such if we were to add a new 60% task

00:16:30,370 --> 00:16:37,929
and set to the various tests would pass

00:16:34,059 --> 00:16:41,970
but we would oversell our data so at

00:16:37,929 --> 00:16:45,339
that point the whole deal or deadline

00:16:41,970 --> 00:16:46,350
contract between tasks and scheduler

00:16:45,339 --> 00:16:48,850
they fall apart

00:16:46,350 --> 00:16:54,100
and this is the problem have not been

00:16:48,850 --> 00:16:56,169
able to solve yet and it will take a lot

00:16:54,100 --> 00:16:58,329
of people to look at this so I'm

00:16:56,169 --> 00:17:00,610
offering three solutions the first

00:16:58,329 --> 00:17:03,399
solution that I have in the patch set is

00:17:00,610 --> 00:17:06,130
to simply try to foresee all of the

00:17:03,399 --> 00:17:09,459
situations where we will end up with a

00:17:06,130 --> 00:17:11,949
task that spans multiple routing in my

00:17:09,459 --> 00:17:13,600
opinion it's a hack it's brittle because

00:17:11,949 --> 00:17:15,760
it's end of someone puts or as a new

00:17:13,600 --> 00:17:16,970
feature then we have to make sure that

00:17:15,760 --> 00:17:18,710
this feature is not

00:17:16,970 --> 00:17:21,140
yes so we have to introduce large for

00:17:18,710 --> 00:17:23,750
that feature so that we will create a

00:17:21,140 --> 00:17:26,930
stat 101 we domain okay so to me

00:17:23,750 --> 00:17:28,820
I basically did that to tell people that

00:17:26,930 --> 00:17:32,210
we have a problem and that police

00:17:28,820 --> 00:17:36,560
presents up in between solution while we

00:17:32,210 --> 00:17:38,540
are thinking about the real deal second

00:17:36,560 --> 00:17:40,250
and obvious is to teach to the our

00:17:38,540 --> 00:17:45,980
scheduler how to deal with multiple

00:17:40,250 --> 00:18:15,620
domain right now the scheduler is able

00:17:45,980 --> 00:18:17,630
to all we have to do it so you might be

00:18:15,620 --> 00:18:21,020
able to get away with our see you I

00:18:17,630 --> 00:18:22,580
don't know why I don't know I have no I

00:18:21,020 --> 00:18:25,100
don't have all of the details it might

00:18:22,580 --> 00:18:27,310
involve some black magic but I have a

00:18:25,100 --> 00:18:29,540
little prototype that started doing that

00:18:27,310 --> 00:18:31,880
but now they said they've got complex

00:18:29,540 --> 00:18:35,450
very quickly and I'm not sure that it

00:18:31,880 --> 00:18:38,330
has you know hope of flying the third

00:18:35,450 --> 00:18:41,860
one which I thought on a plane while

00:18:38,330 --> 00:18:47,330
flying to a conference is to basically

00:18:41,860 --> 00:18:51,230
recompute our scheduling Deline before a

00:18:47,330 --> 00:18:53,840
CPU set operation that would give us a

00:18:51,230 --> 00:18:57,860
view into the future as to what the

00:18:53,840 --> 00:19:02,030
system will look like after it's always

00:18:57,860 --> 00:19:05,570
easier to find out tasks that stand more

00:19:02,030 --> 00:19:09,140
than one middle name on currents CPU

00:19:05,570 --> 00:19:11,960
sets rather than waiting afterwards or

00:19:09,140 --> 00:19:14,750
looking at the input and trying to guess

00:19:11,960 --> 00:19:16,010
the future so if we have a snapshot of

00:19:14,750 --> 00:19:17,930
the future you can

00:19:16,010 --> 00:19:19,880
we pick up which task belongs to Ward

00:19:17,930 --> 00:19:21,590
one who d'Alene and if we have that

00:19:19,880 --> 00:19:25,010
wasn't very she was the operation from

00:19:21,590 --> 00:19:27,110
happening so this has the advantage of

00:19:25,010 --> 00:19:31,220
being robust so any situation that

00:19:27,110 --> 00:19:33,340
become pretty quickly it moves a lot of

00:19:31,220 --> 00:19:38,810
code around there's no what about that

00:19:33,340 --> 00:19:42,410
and all we would have to do is teach the

00:19:38,810 --> 00:19:46,160
secrets of mechanic how to deal with an

00:19:42,410 --> 00:19:49,070
input of schedule implementing gravity

00:19:46,160 --> 00:19:53,420
computing it you know two-thirds of the

00:19:49,070 --> 00:19:57,500
way in the process of rebuilding all of

00:19:53,420 --> 00:20:00,170
the are in the process of enacting and

00:19:57,500 --> 00:20:02,960
you are a new set of scheduler so I'm

00:20:00,170 --> 00:20:04,880
not sure I haven't looked at all of the

00:20:02,960 --> 00:20:08,360
ramifications aren't possible with this

00:20:04,880 --> 00:20:09,650
I'm not sure that is part of I can't

00:20:08,360 --> 00:20:12,200
relate I'm not sure I just haven't

00:20:09,650 --> 00:20:14,150
looked at me a lot of this investigation

00:20:12,200 --> 00:20:16,520
of this it definitely needs more work

00:20:14,150 --> 00:20:19,490
but in my opinion it's the best overall

00:20:16,520 --> 00:20:21,830
three scenarios and that's where you

00:20:19,490 --> 00:20:27,290
guys come in this is what I have this is

00:20:21,830 --> 00:20:28,970
what I had as I mentioned I I think more

00:20:27,290 --> 00:20:34,280
people used to start thinking about this

00:20:28,970 --> 00:20:36,170
and exchanging idea is to move forward

00:20:34,280 --> 00:20:38,900
with this there's a lot of code to

00:20:36,170 --> 00:20:41,060
change and I don't think that we can do

00:20:38,900 --> 00:20:42,680
this I creatively than a patch that

00:20:41,060 --> 00:20:45,500
simply because there's just too much

00:20:42,680 --> 00:20:48,860
work so I'd rather have a consensus of

00:20:45,500 --> 00:20:51,710
the quite start and then exchange on how

00:20:48,860 --> 00:20:53,720
that consensus has been implemented so

00:20:51,710 --> 00:20:56,210
if you have ideas I'm more than happy to

00:20:53,720 --> 00:20:58,790
chain with you if you have any questions

00:20:56,210 --> 00:21:01,510
presented here I know there's a fair

00:20:58,790 --> 00:21:01,510
amount of material

00:21:46,790 --> 00:21:53,990
No all the more amazing

00:21:59,330 --> 00:22:06,330
the problem here is that our tasks can

00:22:04,470 --> 00:22:11,010
be amped and be rolling between room to

00:22:06,330 --> 00:22:13,040
verb our tasks can be placed on 0 1 2 &

00:22:11,010 --> 00:22:13,040
00:22:13,790 --> 00:22:23,490
no it can't wait

00:22:19,410 --> 00:22:24,200
no balancing is off oh my good that's

00:22:23,490 --> 00:22:26,580
right

00:22:24,200 --> 00:22:28,650
and that's that's the sticking point

00:22:26,580 --> 00:22:30,630
here we have to understand that the task

00:22:28,650 --> 00:22:32,550
it moves to all of these CPUs it's just

00:22:30,630 --> 00:22:36,410
a load balancing between your step

00:22:32,550 --> 00:22:38,970
that does not happen by the end of it

00:22:36,410 --> 00:22:42,480
although the scheduler can basically

00:22:38,970 --> 00:22:51,030
decide that you know it moves the staff

00:22:42,480 --> 00:22:53,820
to zero so if the task goes away and

00:22:51,030 --> 00:22:56,690
then it decides to wake up the

00:22:53,820 --> 00:22:58,520
[Music]

00:22:56,690 --> 00:22:59,930
thank you for that scheduler class and

00:22:58,520 --> 00:23:04,660
basically the science we put it up so

00:22:59,930 --> 00:23:25,970
you see there's a whole disconnect on

00:23:04,660 --> 00:24:45,890
what there's nothing more nothing so

00:23:25,970 --> 00:24:49,670
here here but if we don't have it so a

00:24:45,890 --> 00:24:51,860
virtual domain rather so it becomes very

00:24:49,670 --> 00:24:55,280
complex to manage them that's the

00:24:51,860 --> 00:24:58,100
problem because now this is a very

00:24:55,280 --> 00:24:58,730
simple topology if we have a 24 core

00:24:58,100 --> 00:25:02,780
system

00:24:58,730 --> 00:25:05,030
and have your RTF oh we can stack them

00:25:02,780 --> 00:25:07,690
together right how many virtual domains

00:25:05,030 --> 00:25:07,690
we don't lot

00:25:20,890 --> 00:25:25,450
so if we were able to teach the

00:25:23,020 --> 00:25:27,580
scheduler to deal the deadline scheduler

00:25:25,450 --> 00:25:30,250
to deal with more than one who domain in

00:25:27,580 --> 00:25:31,630
a situation like this not only the

00:25:30,250 --> 00:25:33,340
battement exception test would be

00:25:31,630 --> 00:25:40,900
happening on the domain scene but it

00:25:33,340 --> 00:25:42,820
would also do so on yeah so exactly but

00:25:40,900 --> 00:25:45,610
this this is just a simple example here

00:25:42,820 --> 00:25:49,630
as such we would have the same who have

00:25:45,610 --> 00:25:51,220
the proper accounting burros are also so

00:25:49,630 --> 00:25:53,260
basically means that the accountant has

00:25:51,220 --> 00:25:56,080
to happen on a per CPU basis rather than

00:25:53,260 --> 00:25:58,419
to remove daily basis but that changes

00:25:56,080 --> 00:26:00,340
so many things it basically changes

00:25:58,419 --> 00:26:07,179
there everyone has gratification on the

00:26:00,340 --> 00:26:09,390
entire deadline scheduler anyone else

00:26:07,179 --> 00:26:09,390
perhaps

00:26:19,029 --> 00:26:27,759
wasn't he at last give already reasoning

00:26:24,350 --> 00:26:31,929
on that very few paces remember it was

00:26:27,759 --> 00:26:37,360
partition and scattering scale it

00:26:31,929 --> 00:26:39,559
confused the schedule for each new

00:26:37,360 --> 00:26:41,929
installation irrespective jealousy it's

00:26:39,559 --> 00:26:44,110
not that global scale as far as I

00:26:41,929 --> 00:26:47,330
remember it has duration scale

00:26:44,110 --> 00:26:48,769
theoretically might be the base model is

00:26:47,330 --> 00:26:51,110
unique perception yeah

00:26:48,769 --> 00:26:53,740
what they've done here because the world

00:26:51,110 --> 00:26:58,330
is has something now is they took the

00:26:53,740 --> 00:27:05,809
model and they multiply the velocity

00:26:58,330 --> 00:27:09,049
that we have so the mathematics it's

00:27:05,809 --> 00:27:15,200
just chaos but what they've done is they

00:27:09,049 --> 00:27:17,899
took the CPUs of that rug that the

00:27:15,200 --> 00:27:20,059
tester which is exactly what we have

00:27:17,899 --> 00:27:21,919
here so that's why I emphasize on CPU

00:27:20,059 --> 00:27:24,320
three CPU three is associated with one

00:27:21,919 --> 00:27:30,619
two three which points to mundo main see

00:27:24,320 --> 00:27:33,200
and deadline metrics I mean they've done

00:27:30,619 --> 00:27:35,450
enough an outstanding job right it's

00:27:33,200 --> 00:27:37,519
just that I'm doing that the

00:27:35,450 --> 00:27:42,049
ratification on attracting with seeking

00:27:37,519 --> 00:27:45,399
said was not kept or was not what's

00:27:42,049 --> 00:27:45,399
gonna understand yeah

00:27:47,800 --> 00:27:53,310
anyone else else

00:27:54,850 --> 00:28:04,490
about the data how was is probably a

00:28:00,710 --> 00:28:08,330
cause like how Louisville agency would

00:28:04,490 --> 00:28:13,909
be all this problem when I make okay so

00:28:08,330 --> 00:28:18,769
so to recompute the the scheduling

00:28:13,909 --> 00:28:23,110
domain like you say Duran schedule you

00:28:18,769 --> 00:28:32,659
know we cannot meet the requirements so

00:28:23,110 --> 00:28:35,149
how many overseas again I mean we need

00:28:32,659 --> 00:28:37,610
to this right now it's not gonna cause

00:28:35,149 --> 00:28:39,289
any latency recomputation of the

00:28:37,610 --> 00:28:41,990
scheduling domain and the batteries

00:28:39,289 --> 00:28:43,490
utilization will cause latency but once

00:28:41,990 --> 00:28:45,350
that is done if you don't have enough

00:28:43,490 --> 00:28:47,360
data efficiently not able to meet you

00:28:45,350 --> 00:28:49,519
batter the contract with your task and

00:28:47,360 --> 00:28:51,860
whatever the task is supposed to achieve

00:28:49,519 --> 00:28:55,269
in this utilization or predictive

00:28:51,860 --> 00:28:55,269
utilization cannot be happening

00:28:58,980 --> 00:29:03,119
[Music]

00:29:04,450 --> 00:29:13,940
ah operation how do you mean the amount

00:29:09,470 --> 00:29:17,330
on a black operation does cost yes so no

00:29:13,940 --> 00:29:19,009
we have not simply because it's it grows

00:29:17,330 --> 00:29:22,070
exponentially with the number of

00:29:19,009 --> 00:29:23,600
subpoenas that graph we're not

00:29:22,070 --> 00:29:25,549
exponentially but linearly with the

00:29:23,600 --> 00:29:27,169
number of CPUs in God like how close

00:29:25,549 --> 00:29:28,490
operation is probably the most traumatic

00:29:27,169 --> 00:29:31,250
thing you can do to the scheduler

00:29:28,490 --> 00:29:33,350
because everything all of the tasks have

00:29:31,250 --> 00:29:36,799
to be parked and everything that's being

00:29:33,350 --> 00:29:38,509
done to stop the tasks are being moved

00:29:36,799 --> 00:29:47,089
around and then everything

00:29:38,509 --> 00:29:49,820
again yes I hope Maryland I produced

00:29:47,089 --> 00:29:51,279
Dennis gateways and the wall art about

00:29:49,820 --> 00:29:57,789
like Rami

00:29:51,279 --> 00:30:06,979
evil houses e16 incident for translation

00:29:57,789 --> 00:30:15,139
like listen it wasn't the these do

00:30:06,979 --> 00:30:17,599
something about yeah no I I don't think

00:30:15,139 --> 00:30:21,559
there's any I think it's worse to spend

00:30:17,599 --> 00:30:23,569
any time improving you know the cost of

00:30:21,559 --> 00:30:25,819
the CPL of operation because it's just

00:30:23,569 --> 00:30:27,139
it's a hot plug if you're going to do

00:30:25,819 --> 00:30:30,529
that something that's happening in your

00:30:27,139 --> 00:30:32,149
system it's not like you're doing a big

00:30:30,529 --> 00:30:34,129
a little scheduling right where you're

00:30:32,149 --> 00:30:42,319
just switching off the core you're

00:30:34,129 --> 00:30:52,549
taking it off how about also post and

00:30:42,319 --> 00:30:55,699
they said fantastic I just don't see the

00:30:52,549 --> 00:30:57,649
reason for doing that like I see the hot

00:30:55,699 --> 00:30:59,089
dog is not something that is missing

00:30:57,649 --> 00:31:00,979
system it's something that's triggered

00:30:59,089 --> 00:31:02,599
by the user but if you got to do with

00:31:00,979 --> 00:31:04,539
that something is happening that should

00:31:02,599 --> 00:31:11,119
probably not be happening in your system

00:31:04,539 --> 00:31:13,579
but if you see how I treat you right

00:31:11,119 --> 00:31:15,469
but to do that you know the mechanic of

00:31:13,579 --> 00:31:20,419
the hot blood sub system itself is very

00:31:15,469 --> 00:31:22,879
complex and doing a hot blood operation

00:31:20,419 --> 00:31:25,100
seeking stopper on all of your ears

00:31:22,879 --> 00:31:29,210
around your cities and that's the

00:31:25,100 --> 00:31:30,619
highest they have the highest scheduler

00:31:29,210 --> 00:31:33,769
class that you have the system so

00:31:30,619 --> 00:31:39,169
everything gets preempted and scheduled

00:31:33,769 --> 00:31:43,399
out sorry about the following pressure

00:31:39,169 --> 00:31:43,940
above CPU about you said I'm progress if

00:31:43,399 --> 00:31:54,080
you will

00:31:43,940 --> 00:31:54,769
all those all the loops yes it's a

00:31:54,080 --> 00:31:56,509
problem

00:31:54,769 --> 00:32:00,169
well it's a problem that's just how it

00:31:56,509 --> 00:32:03,379
works right now there are reasons for

00:32:00,169 --> 00:32:09,049
that what should we do we have to move

00:32:03,379 --> 00:32:15,470
tasks around it just thought what CTO

00:32:09,049 --> 00:32:18,799
why so this is so my knowledge of that

00:32:15,470 --> 00:32:21,889
city hot blood processing is before

00:32:18,799 --> 00:32:25,399
Thomas new world order where he really

00:32:21,889 --> 00:32:28,009
fixed all of the callbacks so things may

00:32:25,399 --> 00:32:30,519
have changed but go back four years ago

00:32:28,009 --> 00:32:30,519
that's how

00:33:00,360 --> 00:33:11,500
so that is for the entire system so now

00:33:09,370 --> 00:33:13,990
whenever we have a new task request we

00:33:11,500 --> 00:33:16,720
check for that first okay the system can

00:33:13,990 --> 00:33:18,370
take some load expired and now we go to

00:33:16,720 --> 00:33:20,740
the root of it okay

00:33:18,370 --> 00:33:22,960
we trudeaumania have enough capacity to

00:33:20,740 --> 00:33:24,790
take that particular new task and the

00:33:22,960 --> 00:33:25,240
same thing can happen on wake-up call so

00:33:24,790 --> 00:33:27,940
forth

00:33:25,240 --> 00:33:38,950
for example given domain B gets some

00:33:27,940 --> 00:33:41,080
tasks here okay and see anyone to get it

00:33:38,950 --> 00:33:45,700
to see p01 but I have to check my breath

00:33:41,080 --> 00:33:48,060
through domain first cosmonaut so

00:33:45,700 --> 00:33:51,010
walking home that's the first thing

00:33:48,060 --> 00:33:53,470
second levels to the sequencer it will

00:33:51,010 --> 00:33:54,880
not be polyester you have to walk all of

00:33:53,470 --> 00:33:56,500
the Rings are that pertain to that

00:33:54,880 --> 00:33:59,280
operation because tasks can move around

00:33:56,500 --> 00:33:59,280
we do with that

00:34:02,420 --> 00:34:07,419
[Music]

00:34:04,379 --> 00:34:09,099
- the living one by one - taken a

00:34:07,419 --> 00:34:11,589
surprise but they all be locked at the

00:34:09,099 --> 00:34:14,500
same time no cuz TAS can move from one

00:34:11,589 --> 00:34:15,550
city you know and you will only get an

00:34:14,500 --> 00:34:18,669
accurate picture of what's happening

00:34:15,550 --> 00:34:20,230
what do you have you know you want you

00:34:18,669 --> 00:34:22,359
have to clear all of your domain that's

00:34:20,230 --> 00:34:25,030
the first thing the second thing here is

00:34:22,359 --> 00:34:28,000
that this is just a simple example we

00:34:25,030 --> 00:34:29,050
can also have someone can decide to spin

00:34:28,000 --> 00:34:31,419
off a new task

00:34:29,050 --> 00:34:35,950
you know modify the CPU allowed mass to

00:34:31,419 --> 00:34:39,040
be 0 and 1 and move it in to set move it

00:34:35,950 --> 00:34:41,050
in to set 1 so at this point here the

00:34:39,040 --> 00:34:42,240
tasks will only be confined to this set

00:34:41,050 --> 00:34:45,399
and Google amaetv

00:34:42,240 --> 00:34:50,379
so at this point the whole idea of a

00:34:45,399 --> 00:34:53,409
verge of you know making this automatic

00:34:50,379 --> 00:34:59,109
falls apart because then we have bad

00:34:53,409 --> 00:35:01,569
with accounting for or on both on all of

00:34:59,109 --> 00:35:03,670
the CPUs then dead long task that one on

00:35:01,569 --> 00:35:05,589
just a subset of cities so it makes

00:35:03,670 --> 00:35:07,660
things really complex but you good

00:35:05,589 --> 00:35:09,339
school system anyway so you can have a

00:35:07,660 --> 00:35:11,260
class which is big enough not to behind

00:35:09,339 --> 00:35:13,180
you lesson to see you and you can

00:35:11,260 --> 00:35:16,329
actually take that personal securities

00:35:13,180 --> 00:35:17,770
at the end it is impossible for that in

00:35:16,329 --> 00:35:20,230
the CPU to have that much compute

00:35:17,770 --> 00:35:23,140
capacity to rather does so when that

00:35:20,230 --> 00:35:25,690
happens the acceptance cheque will fail

00:35:23,140 --> 00:35:27,520
and that task is not accepted no but

00:35:25,690 --> 00:35:29,109
that does mean already there so we have

00:35:27,520 --> 00:35:32,380
bigger things he says no and we cannot

00:35:29,109 --> 00:35:33,059
probably the secret operation right so

00:35:32,380 --> 00:35:43,510
he's gone

00:35:33,059 --> 00:35:45,250
he'd known so suppose we and after it is

00:35:43,510 --> 00:35:48,030
mine we created a super set for the

00:35:45,250 --> 00:35:48,030
secure 0 and

00:35:48,690 --> 00:35:54,630
now this CP actually cannot take this

00:35:51,390 --> 00:35:54,630
because it is

00:35:55,760 --> 00:36:06,700
and we could feel yeah yeah there's a

00:35:58,490 --> 00:36:09,380
test that ok work then probably doing

00:36:06,700 --> 00:36:11,540
what so you said that we can have office

00:36:09,380 --> 00:36:13,460
columns because we can create music so

00:36:11,540 --> 00:36:50,420
we can actually the CPU allowed must now

00:36:13,460 --> 00:36:52,790
and yeah we can have very complex so

00:36:50,420 --> 00:36:55,880
what happened if you do as if you unplug

00:36:52,790 --> 00:36:59,090
you remove a CPU and then you don't have

00:36:55,880 --> 00:37:01,490
enough bandwidth to cover all your test

00:36:59,090 --> 00:37:04,010
being subscribed right you do you fail

00:37:01,490 --> 00:37:07,010
the soup you look yes operation yes

00:37:04,010 --> 00:37:11,180
that's that's already part of the

00:37:07,010 --> 00:37:13,490
solution right now so there's a check

00:37:11,180 --> 00:37:17,750
before that happens and the deadlines

00:37:13,490 --> 00:37:22,520
scheduler people did that so you saw you

00:37:17,750 --> 00:37:25,030
you can you can veto ass if you unplug

00:37:22,520 --> 00:37:25,030
yes

00:37:28,840 --> 00:37:33,340
okay so if I understand the problem

00:37:31,090 --> 00:37:37,210
correctly is then it's just if this view

00:37:33,340 --> 00:37:39,880
unplug succeeds then you lose your

00:37:37,210 --> 00:37:41,670
accounting somewhere that's right it's

00:37:39,880 --> 00:37:42,940
not that's what you want that's right

00:37:41,670 --> 00:37:45,370
that's right

00:37:42,940 --> 00:37:48,490
because even if you've got a system that

00:37:45,370 --> 00:37:52,000
is occupied at 30% we can remove the CPU

00:37:48,490 --> 00:37:53,560
the acceptance test or work oh no I'm

00:37:52,000 --> 00:37:56,790
just been probably used by the orange

00:37:53,560 --> 00:37:59,500
yes well there was an example and

00:37:56,790 --> 00:38:05,760
obviously can't you just look at the

00:37:59,500 --> 00:38:05,760
example I can't see your site from here

00:38:05,970 --> 00:38:13,090
that's my thoughts so he has this

00:38:11,380 --> 00:38:16,930
problem is this is just you know a

00:38:13,090 --> 00:38:21,310
conversation brush idea is good worse is

00:38:16,930 --> 00:38:24,160
worth looking into and it will require

00:38:21,310 --> 00:38:27,240
input from people I want to put some

00:38:24,160 --> 00:38:27,240
people because I want to do it right

00:38:32,810 --> 00:38:36,290
thank you for your time

00:38:36,670 --> 00:38:45,890
[Applause]

00:38:40,930 --> 00:38:45,890

YouTube URL: https://www.youtube.com/watch?v=ffqO6Otaj5I


