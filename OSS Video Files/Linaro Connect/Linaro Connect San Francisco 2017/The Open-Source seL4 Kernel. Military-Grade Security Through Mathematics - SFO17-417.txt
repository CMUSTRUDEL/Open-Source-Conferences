Title: The Open-Source seL4 Kernel. Military-Grade Security Through Mathematics - SFO17-417
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-417
Session Name: The Open-Source seL4 Kernel. Military-Grade Security Through Mathematics - SFO17-417
Speaker: Gernot Heiser
Track: LITE


★ Session Summary ★
A run-time bug in operating system software that enables car control can
result in loss of life or limb. Safety assessors require evidence that such
software is provably free from any bugs. These proofs are inevitably a
combination of software development best practices and a lot of test coverage.
But can we be sure that it is enough ? Really really sure ? What if we used
maths to absolutely guarantee that there are zero bugs in the operating system
core ? This session presents seL4 - a military grade open source project that
uses machine checked formal verification to prove that the C language
implementation of the seL4 kernel and it's resulting binaries are free from
bugs. This then permits running Linux safely in virtual machines on top of
seL4 - something that the Auto world demands.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-417/
Presentation: https://www.slideshare.net/linaroorg/using-math-to-prevent-linux-in-your-car-from-killing-you-the-open-source-sel4-kernel-sfo17417
Video: https://www.youtube.com/watch?v=heSmrHzHcuM
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:14,930 --> 00:00:19,810
good afternoon thanks for coming for my

00:00:17,930 --> 00:00:25,009
book

00:00:19,810 --> 00:00:28,610
I've got a criminal do it for all the

00:00:25,009 --> 00:00:31,820
century and talking about our latest

00:00:28,610 --> 00:00:44,149
story called the SEO for microkernel and

00:00:31,820 --> 00:00:46,520
this visual so I told people are

00:00:44,149 --> 00:00:48,620
interested in automotive and so the

00:00:46,520 --> 00:00:50,240
question is what's the story in all

00:00:48,620 --> 00:00:53,600
different but even with respect to

00:00:50,240 --> 00:00:54,410
safety security so we had this state of

00:00:53,600 --> 00:00:58,940
Pahang

00:00:54,410 --> 00:01:00,950
etc and what's the mother is at their

00:00:58,940 --> 00:01:05,659
post coffee cause of it available

00:01:00,950 --> 00:01:07,340
because they have a canvas on which all

00:01:05,659 --> 00:01:09,710
the critical bits like engine control

00:01:07,340 --> 00:01:13,009
itself is connected together with some

00:01:09,710 --> 00:01:14,810
six sensors and on that hand bus there's

00:01:13,009 --> 00:01:16,640
no security whatsoever so if you manage

00:01:14,810 --> 00:01:19,280
to get on the canvas using total control

00:01:16,640 --> 00:01:22,270
of the car so the whole security story

00:01:19,280 --> 00:01:25,759
of cars until they decide to go to a

00:01:22,270 --> 00:01:29,420
21st century network architecture is to

00:01:25,759 --> 00:01:30,979
be people of that central campus and of

00:01:29,420 --> 00:01:33,170
course there's other components in the

00:01:30,979 --> 00:01:35,959
car with a network on various other

00:01:33,170 --> 00:01:38,780
processes of various standards some and

00:01:35,959 --> 00:01:41,509
some others and in order to incorporate

00:01:38,780 --> 00:01:44,329
of course they need to be gateways to

00:01:41,509 --> 00:01:47,049
India that final canvas so that there's

00:01:44,329 --> 00:01:50,420
always a connection from yeah from

00:01:47,049 --> 00:01:53,929
things onto that and Boston of course

00:01:50,420 --> 00:01:54,900
these days across our network so there's

00:01:53,929 --> 00:01:57,570
connection from the

00:01:54,900 --> 00:02:03,360
third-world and I just go stop them from

00:01:57,570 --> 00:02:06,540
taking over that Pan Bus the there's

00:02:03,360 --> 00:02:09,360
good reasons why this there these mean

00:02:06,540 --> 00:02:11,900
external networks for entertainment

00:02:09,360 --> 00:02:16,140
connected parts of us were these days

00:02:11,900 --> 00:02:19,110
there's trivial things like wireless

00:02:16,140 --> 00:02:21,690
connection store the real sticky tape my

00:02:19,110 --> 00:02:24,150
oppression etc and increasingly people

00:02:21,690 --> 00:02:27,690
are looking to reduce maintenance costs

00:02:24,150 --> 00:02:31,890
by over-the-air software upgrades okay

00:02:27,690 --> 00:02:34,760
so that means our cars connected to the

00:02:31,890 --> 00:02:38,220
external world and that means it's

00:02:34,760 --> 00:02:40,260
susceptible to attack second can come

00:02:38,220 --> 00:02:42,390
from a passenger for example a taxi

00:02:40,260 --> 00:02:43,980
someone by providing a taxi and while

00:02:42,390 --> 00:02:47,610
they're riding install something and

00:02:43,980 --> 00:02:50,100
then use that tool a light attack you

00:02:47,610 --> 00:02:53,430
can't have bribed by attacks by a

00:02:50,100 --> 00:02:56,670
Bluetooth or Wi-Fi or that can spread

00:02:53,430 --> 00:02:58,560
viruses and of course you have cellular

00:02:56,670 --> 00:03:03,989
connections and then increase if we can

00:02:58,560 --> 00:03:06,180
attack from anywhere attack vectors of

00:03:03,989 --> 00:03:07,560
the exposure we've seen so far the

00:03:06,180 --> 00:03:10,190
attack vectors have actually be just

00:03:07,560 --> 00:03:12,239
really stupid designs so people using

00:03:10,190 --> 00:03:15,570
secure protocols without any

00:03:12,239 --> 00:03:17,970
authentication people using the same

00:03:15,570 --> 00:03:21,630
crypto keys on all devices or at the

00:03:17,970 --> 00:03:23,870
same time so obviously someone who does

00:03:21,630 --> 00:03:26,700
anything that that should be put in jail

00:03:23,870 --> 00:03:28,440
on top of that there's a there's

00:03:26,700 --> 00:03:31,250
software vulnerabilities and that's what

00:03:28,440 --> 00:03:33,770
support I'm interested in

00:03:31,250 --> 00:03:38,180
don't be about protocol someone else and

00:03:33,770 --> 00:03:40,670
do those but that leaves enough of an

00:03:38,180 --> 00:03:42,380
attack service and one has just been

00:03:40,670 --> 00:03:44,440
demonstrated a couple weeks ago of

00:03:42,380 --> 00:03:50,540
course the famous infamous group one

00:03:44,440 --> 00:03:54,350
which attacks numerous network stacks by

00:03:50,540 --> 00:03:56,780
a multiple by multiple exploits and they

00:03:54,350 --> 00:03:59,330
managed to basically combine those that

00:03:56,780 --> 00:04:02,300
activities on any mainstream operating

00:03:59,330 --> 00:04:04,370
system which is pretty scary even if the

00:04:02,300 --> 00:04:11,000
group is just on without the device

00:04:04,370 --> 00:04:14,030
connected oh yeah so and of course once

00:04:11,000 --> 00:04:17,269
you do that then you on the system and

00:04:14,030 --> 00:04:20,269
then you can actually why do these

00:04:17,269 --> 00:04:24,050
things regularly happen should not tell

00:04:20,269 --> 00:04:26,990
you anything new here we have a problem

00:04:24,050 --> 00:04:30,740
of increasing complexity which 10-story

00:04:26,990 --> 00:04:33,800
use impend ability the more complex the

00:04:30,740 --> 00:04:36,169
software is that is dependable is it why

00:04:33,800 --> 00:04:38,180
is the software it almost more get more

00:04:36,169 --> 00:04:42,440
and more complicated because people had

00:04:38,180 --> 00:04:44,960
functionalities etc and often they have

00:04:42,440 --> 00:04:49,940
to integrate legacy sector there's no

00:04:44,960 --> 00:04:52,100
good standard rule of thumb for quality

00:04:49,940 --> 00:04:56,020
code is one to five bucks per line of

00:04:52,100 --> 00:04:56,020
code for thousands of sorry

00:04:59,620 --> 00:05:07,600
and that's for any code and sadly a

00:05:04,680 --> 00:05:10,330
larger mod is not the majority of total

00:05:07,600 --> 00:05:11,890
cars is not quality code at all so that

00:05:10,330 --> 00:05:13,780
you can actually expect much higher

00:05:11,890 --> 00:05:17,350
power density for some to serve this

00:05:13,780 --> 00:05:19,780
volume of it and to put things in a

00:05:17,350 --> 00:05:22,060
little context the Bluetooth stack has

00:05:19,780 --> 00:05:26,200
hundreds of thousands of lines of code

00:05:22,060 --> 00:05:29,140
and so multiply that you get to hundreds

00:05:26,200 --> 00:05:31,630
of parts obviously hardly surprised that

00:05:29,140 --> 00:05:34,000
they can be attacked and of course

00:05:31,630 --> 00:05:35,740
learning to see the words because it's

00:05:34,000 --> 00:05:38,800
got tens of millions of lines of code

00:05:35,740 --> 00:05:41,170
and so we can easily see that there's

00:05:38,800 --> 00:05:43,360
basically tens of thousands of possible

00:05:41,170 --> 00:05:46,450
if only one percent of them are

00:05:43,360 --> 00:05:48,820
exploitable and spats show that this

00:05:46,450 --> 00:05:53,740
seems to be the ratio then you have

00:05:48,820 --> 00:06:04,210
hundreds of experts and the result is

00:05:53,740 --> 00:06:07,870
that meaning security is not so whenever

00:06:04,210 --> 00:06:11,920
we have a large amount of code we have

00:06:07,870 --> 00:06:14,410
to expect that it will have bugs that

00:06:11,920 --> 00:06:16,030
can be exploited and if there is an

00:06:14,410 --> 00:06:18,490
exploit day someone will find this you

00:06:16,030 --> 00:06:21,340
know later so in other words all this

00:06:18,490 --> 00:06:23,170
software will break and the attacker

00:06:21,340 --> 00:06:30,010
will be on the vehicle there's just no

00:06:23,170 --> 00:06:35,830
way ecology ok so what can we do about

00:06:30,010 --> 00:06:39,850
that we can attach so we start with some

00:06:35,830 --> 00:06:42,540
system that has 10,000 parts someone

00:06:39,850 --> 00:06:44,990
acts it finds an exploit so we have

00:06:42,540 --> 00:06:48,410
thousand bucks lesson on vulnerability

00:06:44,990 --> 00:06:51,510
we can patch that and then we have

00:06:48,410 --> 00:06:58,980
10,000 minus one bucks and then we do

00:06:51,510 --> 00:07:08,970
some maintenance and we so in other

00:06:58,980 --> 00:07:11,550
words okay so if you look at Google for

00:07:08,970 --> 00:07:15,620
security automotive then you will

00:07:11,550 --> 00:07:20,640
immediately find the solution which is

00:07:15,620 --> 00:07:24,120
let's put in a file right if the bag is

00:07:20,640 --> 00:07:28,200
hard to define and of course that

00:07:24,120 --> 00:07:29,790
doesn't really work for one thing I

00:07:28,200 --> 00:07:31,530
thought this if you want to have your

00:07:29,790 --> 00:07:35,850
firewall as a separate box then it

00:07:31,530 --> 00:07:40,200
increases will since your space wave and

00:07:35,850 --> 00:07:42,660
power problems you have anyway if not

00:07:40,200 --> 00:07:44,390
then it runs on a vulnerable OS which

00:07:42,660 --> 00:07:47,040
means if your s underneath this

00:07:44,390 --> 00:07:50,550
compromised if I was not worth a cent

00:07:47,040 --> 00:07:53,430
and because it adds to the code it will

00:07:50,550 --> 00:07:57,930
actually add it potentially increases

00:07:53,430 --> 00:08:00,690
the attack service and even if it all

00:07:57,930 --> 00:08:03,300
works the firewall can't stop you from

00:08:00,690 --> 00:08:05,340
an attack that uses valid messages that

00:08:03,300 --> 00:08:10,920
just treat a bug in the software they

00:08:05,340 --> 00:08:13,050
seep inside so basically firewalls nice

00:08:10,920 --> 00:08:18,750
security theater but they don't really

00:08:13,050 --> 00:08:22,230
solve problems and obstacles okay the

00:08:18,750 --> 00:08:24,480
other recent trend is let's use machine

00:08:22,230 --> 00:08:28,070
learning so let's put some AI in there

00:08:24,480 --> 00:08:33,180
and look for patterns or the tax and

00:08:28,070 --> 00:08:34,860
then do something like okay just think

00:08:33,180 --> 00:08:35,550
about what you want to do you're driving

00:08:34,860 --> 00:08:38,519
on that

00:08:35,550 --> 00:08:42,000
with hundred miles an hour okay but you

00:08:38,519 --> 00:08:44,790
may buy legally with say 75 miles an

00:08:42,000 --> 00:08:46,890
hour and then your car detects it is

00:08:44,790 --> 00:08:48,930
being attacked so what do you do

00:08:46,890 --> 00:08:54,209
shut it down where that's the saber say

00:08:48,930 --> 00:08:57,329
I'd be great idea and beyond that it has

00:08:54,209 --> 00:09:00,240
all the other stuff but in particular by

00:08:57,329 --> 00:09:02,970
the time you can detect your intrusion

00:09:00,240 --> 00:09:06,240
detection works the attacker has already

00:09:02,970 --> 00:09:09,600
succeeded by and maybe not the first

00:09:06,240 --> 00:09:12,380
time they attack the system but after a

00:09:09,600 --> 00:09:14,970
few trials still know exactly how to

00:09:12,380 --> 00:09:17,820
attack next and it will take them a few

00:09:14,970 --> 00:09:20,339
milliseconds to do that and by that by

00:09:17,820 --> 00:09:22,410
the time you're a lightly turn it takes

00:09:20,339 --> 00:09:26,279
it's on the neck then the damage is

00:09:22,410 --> 00:09:29,339
already done so basically this is an

00:09:26,279 --> 00:09:31,740
admission of defeat you basically try to

00:09:29,339 --> 00:09:37,800
deal with the situation the PNE

00:09:31,740 --> 00:09:41,610
principles okay so what do we really

00:09:37,800 --> 00:09:45,209
need I claim the only real solution is

00:09:41,610 --> 00:09:49,020
strong isolation enforced by some

00:09:45,209 --> 00:09:51,839
software so that means you have a this

00:09:49,020 --> 00:09:56,100
is a very high level ultra high dose

00:09:51,839 --> 00:09:57,750
over my level view of a system we have

00:09:56,100 --> 00:10:00,480
some critical components and some

00:09:57,750 --> 00:10:03,540
untrusted ones and they need to be

00:10:00,480 --> 00:10:05,940
strongly separated of course I need able

00:10:03,540 --> 00:10:08,840
to come back to communicate so on the

00:10:05,940 --> 00:10:10,730
one side we need a strong separation

00:10:08,840 --> 00:10:13,370
on the other side you either control

00:10:10,730 --> 00:10:14,960
communication but that communication

00:10:13,370 --> 00:10:17,180
needs to be controlled in the sense that

00:10:14,960 --> 00:10:20,390
it has to be subject to some overall

00:10:17,180 --> 00:10:23,029
system security policy and that needs to

00:10:20,390 --> 00:10:26,170
be enforced by a software layer which is

00:10:23,029 --> 00:10:26,170
a trustworthy

00:10:26,410 --> 00:10:30,230
notion of that is the separation kernel

00:10:28,790 --> 00:10:31,550
what equals something with separation

00:10:30,230 --> 00:10:33,860
from my guru

00:10:31,550 --> 00:10:35,690
are they safe security Korean or

00:10:33,860 --> 00:10:40,220
whatever it's all worth it it's pretty

00:10:35,690 --> 00:10:42,890
much the same thing okay so the question

00:10:40,220 --> 00:10:45,890
is can we do something a career like

00:10:42,890 --> 00:10:50,420
that is actually trustworthy what do I

00:10:45,890 --> 00:10:51,980
mean when I say trustworthy this is my

00:10:50,420 --> 00:10:54,950
definition of a possibility system

00:10:51,980 --> 00:10:56,839
assisters trustworthy if and only if the

00:10:54,950 --> 00:10:59,270
behaves is specified so there is a

00:10:56,839 --> 00:11:01,550
notion of a specification that

00:10:59,270 --> 00:11:05,140
unambiguously defines what's correct

00:11:01,550 --> 00:11:08,120
behavior means and instead I need some

00:11:05,140 --> 00:11:10,880
very strong convincing argument that it

00:11:08,120 --> 00:11:13,550
actually does that and nothing else and

00:11:10,880 --> 00:11:15,490
of course the real-time systems as cars

00:11:13,550 --> 00:11:19,070
are it needs to be done in a timely

00:11:15,490 --> 00:11:24,140
manner and overall system security needs

00:11:19,070 --> 00:11:28,430
to be maintained and of course the claim

00:11:24,140 --> 00:11:30,290
is that unless you've actually got proof

00:11:28,430 --> 00:11:34,010
you have to consider the system not

00:11:30,290 --> 00:11:36,500
trust with this kind of proof cannot be

00:11:34,010 --> 00:11:39,530
established with code inspection or des

00:11:36,500 --> 00:11:44,490
being traditional sort of quality

00:11:39,530 --> 00:11:47,890
assurance things we need is mathematical

00:11:44,490 --> 00:11:51,730
so this is what we did with our SEO for

00:11:47,890 --> 00:11:53,950
Piper her long as here for is a small

00:11:51,730 --> 00:11:57,160
fast capability based operating system

00:11:53,950 --> 00:12:01,420
kernel for those who attended because

00:11:57,160 --> 00:12:05,350
all modes talk early afternoon this

00:12:01,420 --> 00:12:09,120
morning they he talked about the l4v

00:12:05,350 --> 00:12:09,120
system which has similar properties

00:12:09,270 --> 00:12:17,380
small ten thousand miles of pro small

00:12:13,839 --> 00:12:19,320
size of courses already an SF because it

00:12:17,380 --> 00:12:22,779
automatically reduces the attack service

00:12:19,320 --> 00:12:24,550
but it's a prerequisite for what we

00:12:22,779 --> 00:12:26,470
really want to do which is all the

00:12:24,550 --> 00:12:28,600
improvement of greatness we can't do

00:12:26,470 --> 00:12:32,640
that large code base with the present

00:12:28,600 --> 00:12:36,010
technology it needs to be fast because

00:12:32,640 --> 00:12:39,550
it's you want to use it for real-world

00:12:36,010 --> 00:12:41,080
systems and it's very easy there's lot

00:12:39,550 --> 00:12:43,720
of people who are very experienced in

00:12:41,080 --> 00:12:45,330
writing snow micro kernels and you can't

00:12:43,720 --> 00:12:49,660
use them for anything

00:12:45,330 --> 00:12:51,610
the affirmative Margaret sorry the l4

00:12:49,660 --> 00:12:58,360
family of micro kernels is the exception

00:12:51,610 --> 00:13:01,750
so they're actually fast they have their

00:12:58,360 --> 00:13:03,390
basic context which latencies are very

00:13:01,750 --> 00:13:06,750
close

00:13:03,390 --> 00:13:09,180
my definition of thoughts capability

00:13:06,750 --> 00:13:12,149
days that really means we have a very

00:13:09,180 --> 00:13:13,920
fine-grained access control model that

00:13:12,149 --> 00:13:16,560
allows us to reason about the

00:13:13,920 --> 00:13:19,769
information flow in the system so that's

00:13:16,560 --> 00:13:21,540
a prerequisite for mathematically reason

00:13:19,769 --> 00:13:24,630
about what it means for system to be

00:13:21,540 --> 00:13:28,880
secure and this capability means means

00:13:24,630 --> 00:13:28,880
that we can't do that on an object basis

00:13:31,339 --> 00:13:42,600
okay so case you have heard of my good

00:13:38,660 --> 00:13:45,329
alpha microkernel spod have attended

00:13:42,600 --> 00:13:47,130
because told earlier so these go back to

00:13:45,329 --> 00:13:50,339
for about 25 years

00:13:47,130 --> 00:13:52,560
and as you'll for is the latest one and

00:13:50,339 --> 00:13:58,170
my family everything green by the way it

00:13:52,560 --> 00:14:00,890
comes from all that one of them is OK

00:13:58,170 --> 00:14:03,810
for microkernel started shipping on

00:14:00,890 --> 00:14:04,260
Qualcomm wireless modem she's about 10

00:14:03,810 --> 00:14:06,750
years ago

00:14:04,260 --> 00:14:11,850
so by not as a few billion of those out

00:14:06,750 --> 00:14:17,180
there a descendant of this elf or a beta

00:14:11,850 --> 00:14:21,240
version ships on all iOS devices as of

00:14:17,180 --> 00:14:23,820
2013 are kings of us and iPad iPod

00:14:21,240 --> 00:14:26,449
iPhone or anything that I've has a

00:14:23,820 --> 00:14:31,560
powerful system running its on the

00:14:26,449 --> 00:14:33,810
secure Enclave process of the of the iOS

00:14:31,560 --> 00:14:35,550
device so there's probably if you build

00:14:33,810 --> 00:14:37,500
in all of it out there by now

00:14:35,550 --> 00:14:40,680
so this is not exactly a niche product

00:14:37,500 --> 00:14:42,360
that's one message they have these kind

00:14:40,680 --> 00:14:45,750
of criminals have shown that they are

00:14:42,360 --> 00:14:48,630
avoidable in the real world and in

00:14:45,750 --> 00:14:50,279
particular my group we have a lot of

00:14:48,630 --> 00:14:52,050
experience in building these kind of

00:14:50,279 --> 00:14:53,939
systems have made them suitable for the

00:14:52,050 --> 00:14:56,149
real world so in that sense

00:14:53,939 --> 00:14:59,189
we know a little bit of what we're doing

00:14:56,149 --> 00:15:02,959
and of course SEO force is the latest

00:14:59,189 --> 00:15:02,959
thing which is what I'm talking about

00:15:06,079 --> 00:15:16,459
so I used a lot of the motivation for

00:15:14,029 --> 00:15:18,959
arguing that we need for proof of

00:15:16,459 --> 00:15:21,899
operation of such a system what does

00:15:18,959 --> 00:15:25,319
this actually mean so this is what we

00:15:21,899 --> 00:15:27,959
did for this year for we have a kernel

00:15:25,319 --> 00:15:30,059
that's implemented in C which is the

00:15:27,959 --> 00:15:32,689
absolute minimum of the same block it's

00:15:30,059 --> 00:15:37,559
about 10,000 lines of code plus minus or

00:15:32,689 --> 00:15:41,869
the 32-bit version is about 9,000 x86

00:15:37,559 --> 00:15:46,229
I'd say but it's roughly the 10k log and

00:15:41,869 --> 00:15:48,839
we have they extract more of the curtain

00:15:46,229 --> 00:15:50,729
so this is a formal specification in a

00:15:48,839 --> 00:15:53,159
mathematical object which defines

00:15:50,729 --> 00:15:57,389
exactly how the kernel reacts under any

00:15:53,159 --> 00:15:59,879
circumstances and then so this is

00:15:57,389 --> 00:16:03,119
written in a very abstract math logic

00:15:59,879 --> 00:16:05,970
but it's it's sort of with a bit of

00:16:03,119 --> 00:16:09,619
weeks of practice you can actually sort

00:16:05,970 --> 00:16:13,879
of read this stuff it's it looks like

00:16:09,619 --> 00:16:17,999
relatively precisely the product and

00:16:13,879 --> 00:16:21,119
then we have a formal mathematical proof

00:16:17,999 --> 00:16:23,879
that the C implementation is a

00:16:21,119 --> 00:16:27,569
refinement of this abstract state that

00:16:23,879 --> 00:16:30,329
means anyone's any behavior that's

00:16:27,569 --> 00:16:33,659
possible for that C code under the

00:16:30,329 --> 00:16:36,229
semantics of the C language is captured

00:16:33,659 --> 00:16:39,419
by the abstract model so in other words

00:16:36,229 --> 00:16:42,959
this can only see with behaviors allowed

00:16:39,419 --> 00:16:46,589
and no others so that's a very strong

00:16:42,959 --> 00:16:48,270
way of expressing freedom for box there

00:16:46,589 --> 00:16:52,140
is no behavior that is

00:16:48,270 --> 00:16:56,070
at certain moment so that was some eight

00:16:52,140 --> 00:17:00,810
years ago for the first version on the

00:16:56,070 --> 00:17:02,610
six at the time and then of course what

00:17:00,810 --> 00:17:04,949
once on the hardware the binary code of

00:17:02,610 --> 00:17:07,980
the C code so we have translation step

00:17:04,949 --> 00:17:11,360
in between which could go wrong we use

00:17:07,980 --> 00:17:13,740
GCC and of course that itself is a

00:17:11,360 --> 00:17:16,890
quality one hundred thousand lines of

00:17:13,740 --> 00:17:21,540
code code base and can expect each data

00:17:16,890 --> 00:17:23,520
to be buggy so we have a proof that the

00:17:21,540 --> 00:17:26,220
Bible read that Scots through the

00:17:23,520 --> 00:17:28,170
compiler and the link-up is a correct

00:17:26,220 --> 00:17:30,510
translation of the C code in other words

00:17:28,170 --> 00:17:33,179
we take the compiler out of the trusted

00:17:30,510 --> 00:17:36,929
computing base which means we can safely

00:17:33,179 --> 00:17:39,750
without any bad conscience use GCC or

00:17:36,929 --> 00:17:42,600
any other at the moment the toolchain

00:17:39,750 --> 00:17:45,390
depend depend slightly of GCC so if you

00:17:42,600 --> 00:17:46,980
use a different compilers and this tool

00:17:45,390 --> 00:17:50,070
chain that does the translation

00:17:46,980 --> 00:17:52,830
greatness verification is probably not

00:17:50,070 --> 00:17:55,230
going to work you will not be hard to

00:17:52,830 --> 00:17:57,660
adapt it to something else but Jesus is

00:17:55,230 --> 00:17:59,640
the open source King I guess there's an

00:17:57,660 --> 00:18:02,970
argument for moving on to LLVM so

00:17:59,640 --> 00:18:08,179
looking to the 21st century but but we

00:18:02,970 --> 00:18:08,179
actually did it but at the moment

00:18:08,220 --> 00:18:17,940
we instill snow and with gzc so that's

00:18:13,140 --> 00:18:21,380
this gives us now they prove that goes

00:18:17,940 --> 00:18:25,980
from the abstract to the binary because

00:18:21,380 --> 00:18:27,990
they're both minute Bruce and then on

00:18:25,980 --> 00:18:29,730
top of that that doesn't tell us that

00:18:27,990 --> 00:18:32,340
the abstract is an equalizer

00:18:29,730 --> 00:18:33,690
we know the functionality is correctly

00:18:32,340 --> 00:18:38,460
implemented but it could be stupid

00:18:33,690 --> 00:18:40,890
functionality so there then we have

00:18:38,460 --> 00:18:43,500
formal statements off see the main

00:18:40,890 --> 00:18:45,990
security requirements basically means

00:18:43,500 --> 00:18:49,110
we're saying equity means that the

00:18:45,990 --> 00:18:52,080
kernel is able to enforce integrity in

00:18:49,110 --> 00:18:54,120
the sense that it will only allow right

00:18:52,080 --> 00:18:57,570
access to objects if that has been

00:18:54,120 --> 00:18:58,590
explicitly oath and authorized similar

00:18:57,570 --> 00:19:02,520
confidentiality

00:18:58,590 --> 00:19:04,620
it will only let someone read an object

00:19:02,520 --> 00:19:06,900
if they have been explicitly authorized

00:19:04,620 --> 00:19:08,760
to read that object and availability

00:19:06,900 --> 00:19:12,720
means you can't stop the kernel doing

00:19:08,760 --> 00:19:15,360
operations it supposedly and we have

00:19:12,720 --> 00:19:17,669
also fallen proofs that is not one to

00:19:15,360 --> 00:19:21,179
the abstract model in other words the

00:19:17,669 --> 00:19:22,950
abstract model and the kernel

00:19:21,179 --> 00:19:25,140
functionality as defined in the actual

00:19:22,950 --> 00:19:28,020
model can enforce these security

00:19:25,140 --> 00:19:30,090
qualities obviously there can only be

00:19:28,020 --> 00:19:31,730
you can statement because you can always

00:19:30,090 --> 00:19:35,210
build a system that has no

00:19:31,730 --> 00:19:38,130
confidentiality or no integrity at all

00:19:35,210 --> 00:19:41,909
by any known access rights to everyone

00:19:38,130 --> 00:19:43,860
it can only mean that the kernel is able

00:19:41,909 --> 00:19:46,370
to do that so if you have a properly

00:19:43,860 --> 00:19:50,480
structured system on top the cradle will

00:19:46,370 --> 00:19:50,480
guarantee isolation

00:19:51,930 --> 00:19:59,430
and this is all sort of pretty unique

00:19:55,860 --> 00:20:02,640
stuff this group that was the first

00:19:59,430 --> 00:20:05,510
voice griddle ever at least general

00:20:02,640 --> 00:20:10,410
group this kernel about to have a

00:20:05,510 --> 00:20:13,430
function greatness proof we certainly

00:20:10,410 --> 00:20:17,510
have a unique mistress proof chain and

00:20:13,430 --> 00:20:20,070
it's the only rule that has the proof of

00:20:17,510 --> 00:20:23,130
isolation properties in the meantime

00:20:20,070 --> 00:20:32,190
there is at least one other criminal as

00:20:23,130 --> 00:20:36,620
this state but it's in addition we also

00:20:32,190 --> 00:20:39,120
have one property that's important for

00:20:36,620 --> 00:20:44,340
some of these equal systems such as

00:20:39,120 --> 00:20:46,740
concerts sound and complete analysis of

00:20:44,340 --> 00:20:48,750
the worst case execution time agencies

00:20:46,740 --> 00:20:50,990
or criminal operations so in other words

00:20:48,750 --> 00:20:54,680
for every kernel operation we have an

00:20:50,990 --> 00:20:57,930
upper bound of hold or incantation

00:20:54,680 --> 00:20:59,700
unfortunately our friends and aunt don't

00:20:57,930 --> 00:21:03,120
give us enough information to do this

00:20:59,700 --> 00:21:05,250
with current processes so this risk is

00:21:03,120 --> 00:21:08,820
an execution time analysis straight

00:21:05,250 --> 00:21:10,980
filmi applies to an eleven or v8 which

00:21:08,820 --> 00:21:14,190
is pretty much the last ones where we

00:21:10,980 --> 00:21:17,220
have sufficient information to do this

00:21:14,190 --> 00:21:19,920
analysis so for anything they that we

00:21:17,220 --> 00:21:21,360
have to basically hope that we can get

00:21:19,920 --> 00:21:24,180
away with the fudge factor which is

00:21:21,360 --> 00:21:26,070
pretty uncomfortable in my eyes at least

00:21:24,180 --> 00:21:27,330
we can know that we can do it with

00:21:26,070 --> 00:21:28,980
enough information yes

00:21:27,330 --> 00:21:30,070
so your abstract model doesn't

00:21:28,980 --> 00:21:33,640
incorporate

00:21:30,070 --> 00:21:35,110
no this is a purely there's a good

00:21:33,640 --> 00:21:39,700
question that's a purely operational

00:21:35,110 --> 00:21:42,640
model yes and the whole logic used for

00:21:39,700 --> 00:21:45,820
any of this food chain has no notion of

00:21:42,640 --> 00:21:49,630
time so that's why we have the separate

00:21:45,820 --> 00:21:52,150
analysis this is a standard analysis as

00:21:49,630 --> 00:21:55,660
there's a few companies that do that or

00:21:52,150 --> 00:21:57,460
they became our simple software based on

00:21:55,660 --> 00:22:01,240
static analysis and policies involving

00:21:57,460 --> 00:22:03,250
cetera but it was mainly stung to find

00:22:01,240 --> 00:22:06,820
out when we did this that there's no

00:22:03,250 --> 00:22:08,650
other protected mode OS kernel at least

00:22:06,820 --> 00:22:11,470
in the open literature that has it sound

00:22:08,650 --> 00:22:15,160
and complete execution time analysis if

00:22:11,470 --> 00:22:17,050
you look what vendors do that sell you

00:22:15,160 --> 00:22:20,080
real-time protective mode real-time

00:22:17,050 --> 00:22:22,060
kernels for some of you and eggs I I

00:22:20,080 --> 00:22:24,520
went to look what they did and you can

00:22:22,060 --> 00:22:27,130
find reports which bail it out how they

00:22:24,520 --> 00:22:29,200
do it which basically means keep the

00:22:27,130 --> 00:22:32,380
thing with us as high a load as you can

00:22:29,200 --> 00:22:34,030
measure your latency apply fudge factor

00:22:32,380 --> 00:22:38,260
in claim these of a worst case execution

00:22:34,030 --> 00:22:39,790
time parts I leave it to your

00:22:38,260 --> 00:22:46,060
imagination whether you want to trust

00:22:39,790 --> 00:22:48,610
your life on that just for through even

00:22:46,060 --> 00:22:52,950
advertising there's a few things we have

00:22:48,610 --> 00:22:56,230
not proved yet verify the the

00:22:52,950 --> 00:22:58,540
initialization of the cradle mostly it

00:22:56,230 --> 00:23:00,080
was as a sporran expansion and no one is

00:22:58,540 --> 00:23:06,690
putting that

00:23:00,080 --> 00:23:07,980
overcome it as a matter of fact we're

00:23:06,690 --> 00:23:12,419
already working on it it's a background

00:23:07,980 --> 00:23:16,289
activity you have to train up students

00:23:12,419 --> 00:23:18,210
eyes into this boring stuff we presently

00:23:16,289 --> 00:23:21,750
mortals some of the privileged State

00:23:18,210 --> 00:23:25,440
like a menu at a much higher level than

00:23:21,750 --> 00:23:30,630
the rest of the system so in the present

00:23:25,440 --> 00:23:32,970
crew chain there's basically in multiple

00:23:30,630 --> 00:23:36,899
page tables and then some assumption of

00:23:32,970 --> 00:23:39,840
how they correlate or address based

00:23:36,899 --> 00:23:41,730
translation this is active work where

00:23:39,840 --> 00:23:45,240
students just published a paper on that

00:23:41,730 --> 00:23:46,860
role model for TOB that allows us to do

00:23:45,240 --> 00:23:50,419
this properly it to the same degree of

00:23:46,860 --> 00:23:52,320
faithfulness is the rest of the system

00:23:50,419 --> 00:23:54,210
operation take case operation

00:23:52,320 --> 00:23:57,419
essentially basically claims flushing

00:23:54,210 --> 00:23:59,700
did that the norm in a small model so

00:23:57,419 --> 00:24:02,070
this is what we have Therese importantly

00:23:59,700 --> 00:24:03,990
that is correct we have a high

00:24:02,070 --> 00:24:06,360
performance not equal presentation but

00:24:03,990 --> 00:24:09,950
it's not verified for multiple operation

00:24:06,360 --> 00:24:12,870
gates that's also working province and

00:24:09,950 --> 00:24:15,690
the confidentiality proof actually

00:24:12,870 --> 00:24:18,510
preclude the existence of covert storage

00:24:15,690 --> 00:24:20,519
channels but because our formulation has

00:24:18,510 --> 00:24:23,700
no notion of time they cannot be proven

00:24:20,519 --> 00:24:27,299
over time a chance this is ongoing work

00:24:23,700 --> 00:24:30,179
we actually working on mechanisms to

00:24:27,299 --> 00:24:31,830
prevent timing channels although the

00:24:30,179 --> 00:24:35,159
hardware manufacturers make our life

00:24:31,830 --> 00:24:43,470
unnecessary including a roadmap of

00:24:35,159 --> 00:24:44,929
getting that eventually verified us so

00:24:43,470 --> 00:24:48,419
what does this all mean

00:24:44,929 --> 00:24:50,279
it basically means there's no

00:24:48,419 --> 00:24:50,669
implementation box and a few other

00:24:50,279 --> 00:24:52,799
things

00:24:50,669 --> 00:24:56,519
so in particular all these classical

00:24:52,799 --> 00:25:00,080
attacks on operating systems are proven

00:24:56,519 --> 00:25:03,330
impossible so the kernel provably has no

00:25:00,080 --> 00:25:06,330
it never will be reference and

00:25:03,330 --> 00:25:08,280
initialize pointer or a free point or

00:25:06,330 --> 00:25:10,890
anything of that sort

00:25:08,280 --> 00:25:14,490
it will there's no way to do code

00:25:10,890 --> 00:25:17,880
injection into the kernel or any other

00:25:14,490 --> 00:25:20,520
privilege escalation and the kernel go

00:25:17,880 --> 00:25:22,890
metal crush it doesn't have memory leaks

00:25:20,520 --> 00:25:25,500
and it has to go sort of copy fan

00:25:22,890 --> 00:25:27,780
behavior I mean this sort of implies all

00:25:25,500 --> 00:25:29,960
of the others right if you do code

00:25:27,780 --> 00:25:29,960
injection

00:25:35,380 --> 00:25:49,840
what does it compare to other systems

00:25:38,590 --> 00:25:53,020
that claim to provide security yes of

00:25:49,840 --> 00:25:54,510
course thanks for that we inherently

00:25:53,020 --> 00:25:57,070
make the assumption that the hardware

00:25:54,510 --> 00:25:59,799
operates correctly

00:25:57,070 --> 00:26:02,169
what does correct Hardware mean correct

00:25:59,799 --> 00:26:05,350
operational hardware you seriously have

00:26:02,169 --> 00:26:07,120
a hardware spec which for most of the

00:26:05,350 --> 00:26:10,480
code is actually hidden behind the C

00:26:07,120 --> 00:26:12,820
compiler so we all great and see him we

00:26:10,480 --> 00:26:15,190
have assumption that the C compiler

00:26:12,820 --> 00:26:17,320
knows how the hardware works and of

00:26:15,190 --> 00:26:20,100
course that the some design taken out by

00:26:17,320 --> 00:26:23,470
this translation says so as binary

00:26:20,100 --> 00:26:27,100
verification uses a model of the arm

00:26:23,470 --> 00:26:31,659
Hardware done by folks in Cambridge

00:26:27,100 --> 00:26:35,610
University who working very closely with

00:26:31,659 --> 00:26:38,820
on a validating that against existing

00:26:35,610 --> 00:26:42,159
policies but also there's a project of

00:26:38,820 --> 00:26:45,460
verifying it against the high level

00:26:42,159 --> 00:26:48,220
hardware description inside so this this

00:26:45,460 --> 00:26:51,970
model on which this binary verification

00:26:48,220 --> 00:26:53,919
hinges is very faithful and of

00:26:51,970 --> 00:26:55,450
increasing insurance I'd like to say but

00:26:53,919 --> 00:26:57,730
of course there's no protection against

00:26:55,450 --> 00:26:59,320
box and the hard way into meditation and

00:26:57,730 --> 00:27:03,730
of course we know these things exist as

00:26:59,320 --> 00:27:05,590
well so there's always it can never be

00:27:03,730 --> 00:27:09,549
complete security because things have to

00:27:05,590 --> 00:27:12,070
Baltimore in some way and they know that

00:27:09,549 --> 00:27:14,470
the code is not attackable by software

00:27:12,070 --> 00:27:18,070
bugs but you can attack it in other ways

00:27:14,470 --> 00:27:19,600
right in the end you have to describe a

00:27:18,070 --> 00:27:22,940
world somewhere means the physical world

00:27:19,600 --> 00:27:27,440
and this is why the

00:27:22,940 --> 00:27:29,029
and ugly others by your formalization of

00:27:27,440 --> 00:27:33,279
your requirements of your system somehow

00:27:29,029 --> 00:27:35,239
you have to translate your conceptual

00:27:33,279 --> 00:27:36,919
requirements on the system into a

00:27:35,239 --> 00:27:40,549
mathematical statement and of course you

00:27:36,919 --> 00:27:56,149
can't stop that what we know is it

00:27:40,549 --> 00:27:59,109
between do these proven do these apply

00:27:56,149 --> 00:28:02,119
to one specific needs

00:27:59,109 --> 00:28:04,940
do you certify for it please how does

00:28:02,119 --> 00:28:06,889
this work can I put this question back

00:28:04,940 --> 00:28:09,769
to the ends piece of house again if I

00:28:06,889 --> 00:28:15,349
play a disease it's a very good one and

00:28:09,769 --> 00:28:18,019
that was quite good basic okay just put

00:28:15,349 --> 00:28:20,869
things in comparison to other systems

00:28:18,019 --> 00:28:24,159
that claim they do this you see your

00:28:20,869 --> 00:28:26,720
give you security if they're halfway

00:28:24,159 --> 00:28:30,950
serious about security tend to people

00:28:26,720 --> 00:28:34,429
much slower so the the typical things

00:28:30,950 --> 00:28:35,239
even with certification stamps or some

00:28:34,429 --> 00:28:39,409
sort

00:28:35,239 --> 00:28:41,809
Tbk about the fact of and slower than

00:28:39,409 --> 00:28:43,299
what we have so we don't the main point

00:28:41,809 --> 00:28:45,830
to make years we don't sacrifice

00:28:43,299 --> 00:28:47,090
performance for security as a matter of

00:28:45,830 --> 00:28:50,179
fact when we started a verification

00:28:47,090 --> 00:28:52,789
project I tell the team that I will not

00:28:50,179 --> 00:28:53,760
consider this success if we lose more

00:28:52,789 --> 00:28:55,380
than 10 percent

00:28:53,760 --> 00:28:57,300
we see performance compared to best

00:28:55,380 --> 00:28:59,430
Korean beef ever done before on the same

00:28:57,300 --> 00:29:01,230
object and when we initially published

00:28:59,430 --> 00:29:04,710
it we were right at the same percent

00:29:01,230 --> 00:29:06,480
boundary but now the SEO for the

00:29:04,710 --> 00:29:15,240
verified ratio for current was faster

00:29:06,480 --> 00:29:18,660
than any kind of equality for no other

00:29:15,240 --> 00:29:22,430
system except one toy as guarantee or

00:29:18,660 --> 00:29:25,190
functional correctness of isolation

00:29:22,430 --> 00:29:27,210
worst case execution time violence

00:29:25,190 --> 00:29:30,330
storage channel create in which you

00:29:27,210 --> 00:29:32,640
don't care too much about tiny channels

00:29:30,330 --> 00:29:35,070
of and only to prevent this very high

00:29:32,640 --> 00:29:36,540
overhead and mix with ecology support

00:29:35,070 --> 00:29:38,580
this is something that's coming out of

00:29:36,540 --> 00:29:40,560
avionics it's pretty important there and

00:29:38,580 --> 00:29:42,510
will it's starting to make its way to

00:29:40,560 --> 00:29:45,270
automotive as well the notion that you

00:29:42,510 --> 00:29:47,520
have highly critical as well as this

00:29:45,270 --> 00:29:52,320
critical software running on the same

00:29:47,520 --> 00:29:54,960
processor and well critical in the real

00:29:52,320 --> 00:29:57,210
time sense and of course that means you

00:29:54,960 --> 00:30:02,010
need station as well as temple isolation

00:29:57,210 --> 00:30:03,630
between partitions and we have very

00:30:02,010 --> 00:30:05,060
strong support for that but although

00:30:03,630 --> 00:30:07,160
this is not a main

00:30:05,060 --> 00:30:10,510
the moment that this is a separate

00:30:07,160 --> 00:30:10,510
branch because it's not been verified

00:30:11,500 --> 00:30:16,940
SEO for can happily operators a

00:30:14,660 --> 00:30:19,520
hypervisor services the TV would miss to

00:30:16,940 --> 00:30:21,770
set up an arm so if you use SEO voice a

00:30:19,520 --> 00:30:23,750
hypervisor the kernel itself is for my

00:30:21,770 --> 00:30:27,500
first biased one an iPhone and that's it

00:30:23,750 --> 00:30:31,510
everything else runs be privileged so we

00:30:27,500 --> 00:30:34,910
have normal case in kernel mode and

00:30:31,510 --> 00:30:39,410
saegusa mode and the actual

00:30:34,910 --> 00:30:42,530
virtualization emulation etc is done by

00:30:39,410 --> 00:30:47,680
a virtual machine monitor that once

00:30:42,530 --> 00:30:52,550
itself is usable and so if there is a

00:30:47,680 --> 00:30:53,780
type of a virtual machine exception that

00:30:52,550 --> 00:30:56,240
involves a hypervisor

00:30:53,780 --> 00:31:01,280
this will simply reflected to this VM M

00:30:56,240 --> 00:31:04,070
which does its job and then and if you

00:31:01,280 --> 00:31:07,310
have multiple VMs these VMs

00:31:04,070 --> 00:31:09,710
our Peruvian so they can operate

00:31:07,310 --> 00:31:12,260
isolation which means in order to

00:31:09,710 --> 00:31:14,240
guarantee isolation all we need is the

00:31:12,260 --> 00:31:15,260
verified cradle we don't need to verify

00:31:14,240 --> 00:31:18,020
the DNA

00:31:15,260 --> 00:31:20,120
obviously the EMM is in the trusted

00:31:18,020 --> 00:31:22,490
computing base of its own virtual

00:31:20,120 --> 00:31:24,290
machine but it's not in the trusted

00:31:22,490 --> 00:31:27,650
computing base of any other virtual

00:31:24,290 --> 00:31:30,200
machine unlike what you get with signals

00:31:27,650 --> 00:31:31,700
etc where the whole cabin could Google

00:31:30,200 --> 00:31:34,160
is in your trusted computing base and

00:31:31,700 --> 00:31:37,390
you can't do anything about it including

00:31:34,160 --> 00:31:37,390
the Linux instance

00:31:38,539 --> 00:31:45,649
okay so how does the system use

00:31:41,589 --> 00:31:47,839
basically SEO for the kernel itself is

00:31:45,649 --> 00:31:51,769
very general purpose and completely

00:31:47,839 --> 00:31:54,409
dynamic except on anything sort of

00:31:51,769 --> 00:31:57,469
security or safety critical use cases we

00:31:54,409 --> 00:32:00,109
worked on so far of heavy study and we

00:31:57,469 --> 00:32:02,089
basically use security enforcement by

00:32:00,109 --> 00:32:04,129
out in nature so what that means is

00:32:02,089 --> 00:32:07,219
basically draw boxes and reason about

00:32:04,129 --> 00:32:10,849
security by reason about communication

00:32:07,219 --> 00:32:12,259
that's possible between boxes so TDD is

00:32:10,849 --> 00:32:15,559
we have some pretty good weights and

00:32:12,259 --> 00:32:17,809
some pretty cool that's critical and the

00:32:15,559 --> 00:32:21,379
typical starting point is you throwing

00:32:17,809 --> 00:32:25,429
everything in a virtual machine and then

00:32:21,379 --> 00:32:27,529
start pulling things are so full of it

00:32:25,429 --> 00:32:30,679
most pretty will be first which might be

00:32:27,529 --> 00:32:32,989
some control code and then okay you you

00:32:30,679 --> 00:32:36,829
worry about some damage some drivers can

00:32:32,989 --> 00:32:38,239
do all those the network stack so this

00:32:36,829 --> 00:32:41,599
would be the right place on your

00:32:38,239 --> 00:32:44,899
Bluetooth thing and have them all

00:32:41,599 --> 00:32:48,019
strongly isolated from each other and of

00:32:44,899 --> 00:32:51,109
course Makayla talked about this earlier

00:32:48,019 --> 00:32:54,190
today one standard way of actually doing

00:32:51,109 --> 00:32:57,799
solo support support for devices or

00:32:54,190 --> 00:32:59,690
networks access safe is to put them in a

00:32:57,799 --> 00:33:02,359
virtual machine with a minimize scale

00:32:59,690 --> 00:33:06,079
operating system these days we often do

00:33:02,359 --> 00:33:11,659
that with the run really kernel anyone

00:33:06,079 --> 00:33:15,979
heard of run run run it's a it's a BSD /

00:33:11,659 --> 00:33:17,539
real toys that is component wise it'll

00:33:15,979 --> 00:33:22,029
be a very coarse level so it basically

00:33:17,539 --> 00:33:26,989
has three major components networking

00:33:22,029 --> 00:33:27,890
loci yo and the race whatever and so you

00:33:26,989 --> 00:33:31,310
can

00:33:27,890 --> 00:33:34,700
multiple ones and that's a way to get a

00:33:31,310 --> 00:33:36,040
relatively relatively small POSIX

00:33:34,700 --> 00:33:39,830
environment it's still of course

00:33:36,040 --> 00:33:41,360
recently size codebase but it tends to

00:33:39,830 --> 00:33:49,910
be much more lightweight than virtual

00:33:41,360 --> 00:33:52,670
machine I shall not free from DARPA

00:33:49,910 --> 00:33:55,910
point Attucks salaries of it it's like

00:33:52,670 --> 00:33:59,660
seismic retrofit you do with legacy

00:33:55,910 --> 00:34:02,800
buildings in earthquake prone areas we

00:33:59,660 --> 00:34:08,240
do cyber retrofit for legacy systems

00:34:02,800 --> 00:34:11,000
against cyberattacks and one we will

00:34:08,240 --> 00:34:13,179
example where we did this is the valve

00:34:11,000 --> 00:34:16,120
on Atkins program a concerns for

00:34:13,179 --> 00:34:19,480
hydrants other military systems it's a

00:34:16,120 --> 00:34:23,480
program that's just about a year ago and

00:34:19,480 --> 00:34:25,730
it was really motivated by mostly by a

00:34:23,480 --> 00:34:27,470
seal for and the concert compiler that

00:34:25,730 --> 00:34:32,570
was done at about the same time Adelia

00:34:27,470 --> 00:34:34,490
as a way to really get formal method

00:34:32,570 --> 00:34:37,149
form improved techniques into the real

00:34:34,490 --> 00:34:40,190
world for sure in cyber security and

00:34:37,149 --> 00:34:44,090
what we did with our project partners is

00:34:40,190 --> 00:34:48,100
we worked on two classes of autonomous

00:34:44,090 --> 00:34:50,510
vehicles drones and ground vehicles and

00:34:48,100 --> 00:34:53,360
for each case we had a research platform

00:34:50,510 --> 00:34:55,280
for developing technologies there we had

00:34:53,360 --> 00:34:58,190
completely free hand and we could

00:34:55,280 --> 00:35:00,080
rewrite as much as we like and basically

00:34:58,190 --> 00:35:03,440
on the drug we pretty much rewrote the

00:35:00,080 --> 00:35:07,970
whole software not just us and proper

00:35:03,440 --> 00:35:11,060
contents and then we had these military

00:35:07,970 --> 00:35:13,570
vehicles which for the air vehicle is

00:35:11,060 --> 00:35:16,640
this unmanned little bird that's a

00:35:13,570 --> 00:35:18,140
standard helicopter airframe produced by

00:35:16,640 --> 00:35:20,450
go in which they converted for

00:35:18,140 --> 00:35:23,900
autonomous flight so this thing flies

00:35:20,450 --> 00:35:24,900
about there any even on either exactly

00:35:23,900 --> 00:35:26,789
Concord

00:35:24,900 --> 00:35:28,789
a approval to do that so they always

00:35:26,789 --> 00:35:32,339
have to have a safety positive important

00:35:28,789 --> 00:35:34,220
and then these army trucks in the story

00:35:32,339 --> 00:35:38,460
there are existing trucks that are

00:35:34,220 --> 00:35:41,970
converted for polymers driving and if I

00:35:38,460 --> 00:35:44,640
forgot Detroit these days and each of

00:35:41,970 --> 00:35:48,329
these was a system that was sort of

00:35:44,640 --> 00:35:51,089
pretty much done military-grade system

00:35:48,329 --> 00:35:53,730
and Nava had a professional red team of

00:35:51,089 --> 00:35:55,500
pen testers which had no problem only

00:35:53,730 --> 00:36:01,289
knows it took them for the Boeing

00:35:55,500 --> 00:36:05,250
helicopters in two weeks and we really

00:36:01,289 --> 00:36:08,760
take to the software base it on SEO for

00:36:05,250 --> 00:36:10,470
to our sizing rigor field and in the end

00:36:08,760 --> 00:36:13,579
we managed to come back without the

00:36:10,470 --> 00:36:18,980
final project demo they actually did a

00:36:13,579 --> 00:36:20,789
in-flight attack on the helicopter and

00:36:18,980 --> 00:36:22,770
nothing happened

00:36:20,789 --> 00:36:27,240
probably that happen which was part of

00:36:22,770 --> 00:36:33,450
the straight home and in the second

00:36:27,240 --> 00:36:35,700
world actually call Detective so this is

00:36:33,450 --> 00:36:38,490
sort of what we press we can do a

00:36:35,700 --> 00:36:40,920
realistic knowledge II and the question

00:36:38,490 --> 00:36:43,710
is sort of okay how do you use it how do

00:36:40,920 --> 00:36:45,240
you work with these access it's

00:36:43,710 --> 00:36:47,720
represented by this very low-level

00:36:45,240 --> 00:36:50,339
capabilities and how low-level they are

00:36:47,720 --> 00:36:53,670
is given in this example so these are

00:36:50,339 --> 00:36:56,520
two pretty minimal processes that just

00:36:53,670 --> 00:36:59,130
communicate with each other and just you

00:36:56,520 --> 00:37:01,020
know that each of these things here is a

00:36:59,130 --> 00:37:03,599
capability so this is one access point

00:37:01,020 --> 00:37:06,420
and you can see just for this minimal

00:37:03,599 --> 00:37:09,599
setup you need of all of those and the

00:37:06,420 --> 00:37:11,700
you do is they can only communicate by

00:37:09,599 --> 00:37:12,740
such an end point which is basically a

00:37:11,700 --> 00:37:16,170
water

00:37:12,740 --> 00:37:19,500
communication channel and only if they

00:37:16,170 --> 00:37:21,200
have rise to such a thing or alternative

00:37:19,500 --> 00:37:23,950
they could have shared memory

00:37:21,200 --> 00:37:26,359
by multiple that means to say France

00:37:23,950 --> 00:37:29,630
that they can communicate that allows us

00:37:26,359 --> 00:37:31,579
to reason about information flow but of

00:37:29,630 --> 00:37:35,030
course this is way to a low level

00:37:31,579 --> 00:37:37,819
representation so we have component

00:37:35,030 --> 00:37:39,799
middle vehicle tankers which extracts

00:37:37,819 --> 00:37:41,869
this into more operating system level of

00:37:39,799 --> 00:37:43,819
concepts so they are we told about

00:37:41,869 --> 00:37:46,220
components which are essentially rest

00:37:43,819 --> 00:37:49,160
bases that are either simple

00:37:46,220 --> 00:37:51,859
multi-threaded their connectors which

00:37:49,160 --> 00:37:53,690
are more high-level communication

00:37:51,859 --> 00:37:56,720
channel to those different kind sets of

00:37:53,690 --> 00:38:01,549
five phones or shared buffers or

00:37:56,720 --> 00:38:10,280
whatever and they can be used to connect

00:38:01,549 --> 00:38:12,859
these components and so they're

00:38:10,280 --> 00:38:15,349
basically a high-level representations

00:38:12,859 --> 00:38:18,380
for yourself as you pour constructs and

00:38:15,349 --> 00:38:21,319
then we can use those to represent a

00:38:18,380 --> 00:38:24,799
real system so this is a very much

00:38:21,319 --> 00:38:30,099
simplified diagram of the architecture

00:38:24,799 --> 00:38:33,440
of this from meters with a bunch of our

00:38:30,099 --> 00:38:35,900
neighboring snacks and a bunch of

00:38:33,440 --> 00:38:39,049
legacies of really in a Linux virtual

00:38:35,900 --> 00:38:41,690
machine and with from this architecture

00:38:39,049 --> 00:38:44,750
diagram we know and this is the

00:38:41,690 --> 00:38:47,119
guarantee SEO for gives us unless there

00:38:44,750 --> 00:38:49,059
is a line connecting two boxes there

00:38:47,119 --> 00:38:53,140
cannot be any complication between them

00:38:49,059 --> 00:38:56,000
and so in particular we can reason about

00:38:53,140 --> 00:39:00,109
see some security properties in this

00:38:56,000 --> 00:39:03,079
case that the Linux VM will only get to

00:39:00,109 --> 00:39:04,790
see data that is touched by the critical

00:39:03,079 --> 00:39:07,819
piece in that data has come through

00:39:04,790 --> 00:39:08,550
encryption box so in other words in

00:39:07,819 --> 00:39:15,630
embassies

00:39:08,550 --> 00:39:19,790
picks it up and other we then use that

00:39:15,630 --> 00:39:23,330
so we have this architecture description

00:39:19,790 --> 00:39:25,170
and from that we automatically compile

00:39:23,330 --> 00:39:27,990
the down code

00:39:25,170 --> 00:39:32,060
so these are the actual OS invocations

00:39:27,990 --> 00:39:36,180
that establish these complications and

00:39:32,060 --> 00:39:38,250
that gets compiled into C together with

00:39:36,180 --> 00:39:40,800
a proof that the content the C code is

00:39:38,250 --> 00:39:45,690
correct implementation of the

00:39:40,800 --> 00:39:47,340
appropriate feed its viewing and I think

00:39:45,690 --> 00:39:52,460
it's compiled with all the other stuff

00:39:47,340 --> 00:39:58,770
into one bit in addition from this

00:39:52,460 --> 00:40:01,710
architecture we extract the accessory

00:39:58,770 --> 00:40:04,100
representations so that became case from

00:40:01,710 --> 00:40:07,290
this architecture description we

00:40:04,100 --> 00:40:10,350
automatically generates the set of

00:40:07,290 --> 00:40:13,770
objects that are required to represent

00:40:10,350 --> 00:40:16,620
the access rights in the system that is

00:40:13,770 --> 00:40:21,210
architected and again is done with a

00:40:16,620 --> 00:40:24,630
proof of correctness and from that we

00:40:21,210 --> 00:40:27,090
generate the actual code that will get

00:40:24,630 --> 00:40:29,970
the system in the state that is required

00:40:27,090 --> 00:40:31,530
for that basically represents this

00:40:29,970 --> 00:40:33,720
architecture so this

00:40:31,530 --> 00:40:36,180
internationalization will create address

00:40:33,720 --> 00:40:39,690
spaces and threads and communication

00:40:36,180 --> 00:40:42,030
channels etc and then hand out access

00:40:39,690 --> 00:40:45,000
rights to these press spaces according

00:40:42,030 --> 00:40:46,560
to this representation here which is

00:40:45,000 --> 00:40:50,330
derived from that representation there

00:40:46,560 --> 00:40:50,330
and it's also pretty great

00:40:51,020 --> 00:41:00,110
this is still a relatively low level

00:40:55,780 --> 00:41:02,810
representation because it basically a

00:41:00,110 --> 00:41:06,170
distraction so for the red space it's a

00:41:02,810 --> 00:41:09,260
bomb people like to work at Guam high

00:41:06,170 --> 00:41:13,750
levels and this is this was one of the

00:41:09,260 --> 00:41:15,950
other talks of the project we have

00:41:13,750 --> 00:41:18,110
there's a formulation called

00:41:15,950 --> 00:41:19,340
ADL architecture analysis in description

00:41:18,110 --> 00:41:21,440
language there's actually

00:41:19,340 --> 00:41:23,870
internationalized so standard and it's

00:41:21,440 --> 00:41:25,760
fairly widely used in avionics but it's

00:41:23,870 --> 00:41:31,190
used in the automotive a little bit as

00:41:25,760 --> 00:41:34,190
well and there's assigned tools it takes

00:41:31,190 --> 00:41:38,060
space which allow you to argue take the

00:41:34,190 --> 00:41:42,050
system in this AAPL formalism and on

00:41:38,060 --> 00:41:44,300
this uniform listen there's analysis

00:41:42,050 --> 00:41:47,210
tools that can validate certain safety

00:41:44,300 --> 00:41:51,490
or security properties of the system so

00:41:47,210 --> 00:41:56,540
this is basically where we say okay how

00:41:51,490 --> 00:41:58,780
security requirement is that no data

00:41:56,540 --> 00:42:03,260
should flow between those two boxes and

00:41:58,780 --> 00:42:05,900
these analysis tools in validate that at

00:42:03,260 --> 00:42:07,490
the at the level of behavior and then

00:42:05,900 --> 00:42:10,460
from that we can automatically generate

00:42:07,490 --> 00:42:11,930
our canvas description which is the more

00:42:10,460 --> 00:42:14,180
high-level description I showed on the

00:42:11,930 --> 00:42:18,830
previous page and from there everything

00:42:14,180 --> 00:42:20,960
is generated we would be great so this

00:42:18,830 --> 00:42:25,600
generation is not perfectly correct this

00:42:20,960 --> 00:42:25,600
is just a normal generation from

00:42:28,210 --> 00:42:34,910
thesis and study analysis tools but it's

00:42:32,200 --> 00:42:38,050
even without it would be proof chain it

00:42:34,910 --> 00:42:38,050
gives you freedom assurance

00:42:39,500 --> 00:42:46,620
we'll get used this is a military-grade

00:42:43,860 --> 00:42:48,450
system we did with our partners in

00:42:46,620 --> 00:42:50,550
defense it's Molly

00:42:48,450 --> 00:42:52,800
it's called the Romanesco compositor

00:42:50,550 --> 00:42:57,090
it's a multi-level security so this

00:42:52,800 --> 00:42:59,250
thing connects your multiple networks of

00:42:57,090 --> 00:43:01,380
different classifications and allow us

00:42:59,250 --> 00:43:03,510
to do on a single screen or display

00:43:01,380 --> 00:43:05,750
network windows that belong to the

00:43:03,510 --> 00:43:08,010
different networks and it gives you

00:43:05,750 --> 00:43:10,410
decorations IKEA indicate which

00:43:08,010 --> 00:43:15,990
classification that we use talking to

00:43:10,410 --> 00:43:19,080
and it allows in between the system has

00:43:15,990 --> 00:43:22,710
been built it's been trialed in

00:43:19,080 --> 00:43:25,020
Australian Defence they had about 2000

00:43:22,710 --> 00:43:27,360
units out there if there is users don't

00:43:25,020 --> 00:43:30,360
go really hooked on it and when it will

00:43:27,360 --> 00:43:32,640
be away from them again barrel they also

00:43:30,360 --> 00:43:37,020
shipped a bunch of boxes to the US UK

00:43:32,640 --> 00:43:38,490
and Canada they evaluated them and at

00:43:37,020 --> 00:43:40,980
the moment which is working out the

00:43:38,490 --> 00:43:43,350
details of a project to take this formal

00:43:40,980 --> 00:43:48,110
security valuation there's another

00:43:43,350 --> 00:43:51,090
device which is a a basic crypto

00:43:48,110 --> 00:43:55,710
communication dongle USB thing you put

00:43:51,090 --> 00:43:58,440
in your laptop that's likely to be

00:43:55,710 --> 00:43:59,440
deployed by the UK military and at the

00:43:58,440 --> 00:44:02,349
moment is undergoing

00:43:59,440 --> 00:44:05,140
or high assurance evaluation in the UK

00:44:02,349 --> 00:44:07,569
so this is serious very very great

00:44:05,140 --> 00:44:11,349
security but it's all open source and

00:44:07,569 --> 00:44:15,220
accessible to everyone so we have a

00:44:11,349 --> 00:44:17,200
public github we'd set contributions by

00:44:15,220 --> 00:44:19,390
pull requests or just some people to

00:44:17,200 --> 00:44:21,760
send patches to the mailing list and of

00:44:19,390 --> 00:44:24,039
course again reviewed it so far

00:44:21,760 --> 00:44:26,890
and if we're happy with them then they

00:44:24,039 --> 00:44:29,589
get included we ask people to sign a CLA

00:44:26,890 --> 00:44:32,160
we have purity of IP even though that

00:44:29,589 --> 00:44:34,660
probably means nothing practice because

00:44:32,160 --> 00:44:38,530
the owner of their IP is General

00:44:34,660 --> 00:44:41,549
Dynamics it what they have any useful

00:44:38,530 --> 00:44:46,450
ways the fact that it's really just

00:44:41,549 --> 00:44:48,760
really really maintain us and we control

00:44:46,450 --> 00:44:50,289
what goes in there and sort of the fact

00:44:48,760 --> 00:44:57,520
that you can say it's really over either

00:44:50,289 --> 00:45:00,849
one or everyone is right and with that

00:44:57,520 --> 00:45:03,490
I'd like to thank in our for us inviting

00:45:00,849 --> 00:45:07,059
me to speak here are full of good things

00:45:03,490 --> 00:45:10,059
in particular for Robin who's doing a

00:45:07,059 --> 00:45:12,309
great job in evangelizing microkernels

00:45:10,059 --> 00:45:15,339
and on and the automotive space and

00:45:12,309 --> 00:45:19,809
others and give very much and have you

00:45:15,339 --> 00:45:24,069
to play operations oh yeah you had the

00:45:19,809 --> 00:45:26,859
one which was about maintenance

00:45:24,069 --> 00:45:29,349
maintenance yes so that's an interesting

00:45:26,859 --> 00:45:31,240
story and it's an interesting success

00:45:29,349 --> 00:45:32,650
story actually so when we did the

00:45:31,240 --> 00:45:36,250
original functional connect correctness

00:45:32,650 --> 00:45:39,279
proof that was by all we know the second

00:45:36,250 --> 00:45:42,339
biggest proof ever done just to give you

00:45:39,279 --> 00:45:43,779
an idea for 10,000 lines of code at the

00:45:42,339 --> 00:45:46,450
time we had about a quarter million

00:45:43,779 --> 00:45:48,220
lines of code which shows you that this

00:45:46,450 --> 00:45:49,839
would be totally and utterly useless if

00:45:48,220 --> 00:45:51,430
it was pen and paper proof because you

00:45:49,839 --> 00:45:52,779
would have more box in your proof and in

00:45:51,430 --> 00:45:56,079
the code you're trying to prove

00:45:52,779 --> 00:45:57,310
there's only makes sense in a brutha

00:45:56,079 --> 00:46:00,370
system

00:45:57,310 --> 00:46:02,350
and the tool that basically operates a

00:46:00,370 --> 00:46:04,900
mathematical genius doesn't allow you to

00:46:02,350 --> 00:46:12,130
do an incorrect root in mean time the

00:46:04,900 --> 00:46:15,790
professor and it's the largest by not by

00:46:12,130 --> 00:46:18,160
far the largest ever maintained proof so

00:46:15,790 --> 00:46:19,900
we have continuously maintained the

00:46:18,160 --> 00:46:22,870
kernel and the proofs that go with it

00:46:19,900 --> 00:46:27,100
over 80 years and in the eight years the

00:46:22,870 --> 00:46:29,440
kernel has undergone a lot of changes we

00:46:27,100 --> 00:46:34,600
change the API on a few bits where we

00:46:29,440 --> 00:46:36,870
thought things could improve and one of

00:46:34,600 --> 00:46:39,610
these changes was any radical and

00:46:36,870 --> 00:46:42,670
affected a lot of code and took off a

00:46:39,610 --> 00:46:45,420
year to be verified but we always be

00:46:42,670 --> 00:46:49,660
verified so we have a notion of

00:46:45,420 --> 00:46:54,730
supported verified platforms at the

00:46:49,660 --> 00:47:00,640
moment is a few on boards and the our

00:46:54,730 --> 00:47:02,920
promise is that we will not meet any

00:47:00,640 --> 00:47:05,860
code into the main light source if it

00:47:02,920 --> 00:47:10,780
breaks existing proofs so any change

00:47:05,860 --> 00:47:15,280
that is added to the main line either is

00:47:10,780 --> 00:47:18,640
neutral for example only fix x86 or it

00:47:15,280 --> 00:47:21,390
has or it's the proof still work which

00:47:18,640 --> 00:47:24,820
happens for example micro optimizations

00:47:21,390 --> 00:47:28,840
often consider just reordering a few

00:47:24,820 --> 00:47:31,000
statements to know about some implicit

00:47:28,840 --> 00:47:34,030
invariants which you can't detect from

00:47:31,000 --> 00:47:37,080
static analysis and that way generally

00:47:34,030 --> 00:47:40,330
better proof code such changes of not

00:47:37,080 --> 00:47:42,760
verification control if not then the

00:47:40,330 --> 00:47:45,850
proof has to be updated as well at the

00:47:42,760 --> 00:47:48,790
time that the source gets changed

00:47:45,850 --> 00:47:51,840
so in practice that means we have some

00:47:48,790 --> 00:47:54,520
staging branch somewhere with things

00:47:51,840 --> 00:47:56,740
added and we run through a regression in

00:47:54,520 --> 00:47:58,270
Sigma and then the verifiers do their

00:47:56,740 --> 00:48:00,310
magic and where the

00:47:58,270 --> 00:48:04,450
and to prove this SES that the whole of

00:48:00,310 --> 00:48:07,570
Pittsburgh and as I said we've done this

00:48:04,450 --> 00:48:09,520
for eight years and that's the main

00:48:07,570 --> 00:48:11,740
reason I talked about mix criticality

00:48:09,520 --> 00:48:15,250
support Korea at the moment that lives

00:48:11,740 --> 00:48:17,350
in a separate branch because it's

00:48:15,250 --> 00:48:19,810
incompatible with the existing main line

00:48:17,350 --> 00:48:22,200
and it will take a while to verify we're

00:48:19,810 --> 00:48:26,740
working on that so that's ongoing but

00:48:22,200 --> 00:48:28,270
until we are ready to make the switch it

00:48:26,740 --> 00:48:30,280
will remain in a separate box rather

00:48:28,270 --> 00:48:40,660
than it's likely to go to the main line

00:48:30,280 --> 00:48:43,870
sometime next year that because couldn't

00:48:40,660 --> 00:48:47,500
DMA from my device just transfer Colonel

00:48:43,870 --> 00:48:50,260
and Cory yes so if you want to have

00:48:47,500 --> 00:48:55,510
untrusted enable device drivers you need

00:48:50,260 --> 00:48:59,740
an iommu that is something we are

00:48:55,510 --> 00:49:03,130
actively working on putting the support

00:48:59,740 --> 00:49:04,840
for that into the kernel we've used IOM

00:49:03,130 --> 00:49:07,990
use before but not in the mainline

00:49:04,840 --> 00:49:11,320
kernel so the challenge of course is

00:49:07,990 --> 00:49:12,790
there is no standardized IO and you got

00:49:11,320 --> 00:49:15,000
a really nice reference II side which

00:49:12,790 --> 00:49:20,980
I'm fortunately almost no one implements

00:49:15,000 --> 00:49:25,780
and that's a bit painful but where's an

00:49:20,980 --> 00:49:28,570
x86 the IOA menu I guess there's Intel

00:49:25,780 --> 00:49:30,100
and AMD version they're very similar so

00:49:28,570 --> 00:49:31,030
that that's easy to deal with in the

00:49:30,100 --> 00:49:34,000
army that we know

00:49:31,030 --> 00:49:40,620
but yes we're working on verified iommu

00:49:34,000 --> 00:49:40,620
support at the moment there is a use

00:49:47,820 --> 00:49:57,040
there's a bunch of these 78 boards we

00:49:55,390 --> 00:49:59,890
have all supports where we run our

00:49:57,040 --> 00:50:03,570
iteration on the verification I have to

00:49:59,890 --> 00:50:09,720
take on the website there is a sabre

00:50:03,570 --> 00:50:09,720
here's one of them and I think the TK 1

00:50:11,190 --> 00:50:15,880
the website is feels very different

00:50:13,900 --> 00:50:21,970
it's for that so go to the SEO for

00:50:15,880 --> 00:50:24,610
existence can you share a little bit

00:50:21,970 --> 00:50:26,790
more about the lucky marking description

00:50:24,610 --> 00:50:26,790
rights

00:50:27,600 --> 00:50:34,240
you mean gentleman MOCVD

00:50:30,280 --> 00:50:37,630
yes so this is a long anti-pot sad story

00:50:34,240 --> 00:50:41,340
so for some weird and wonderful reasons

00:50:37,630 --> 00:50:44,860
general dynamics by means of buying my

00:50:41,340 --> 00:50:51,160
startup of colonel abs go to all the IP

00:50:44,860 --> 00:50:53,680
rights to SEO for we for a while we were

00:50:51,160 --> 00:50:55,510
basically is working on be which would

00:50:53,680 --> 00:50:57,019
be to redo the whole thing because it

00:50:55,510 --> 00:51:00,829
was all locked up and then we could

00:50:57,019 --> 00:51:03,169
it's all set so it's now all everything

00:51:00,829 --> 00:51:06,049
I hope here is open source the current

00:51:03,169 --> 00:51:12,380
myself plus all the proofs or the kernel

00:51:06,049 --> 00:51:14,599
the GPL v2 and all the use of them we

00:51:12,380 --> 00:51:16,789
use most of that is unde of people

00:51:14,599 --> 00:51:19,519
licenses TV please obviously Isis

00:51:16,789 --> 00:51:36,529
headset but I'm not sure whether that

00:51:19,519 --> 00:51:38,689
asks you a very good it's part of the

00:51:36,529 --> 00:51:46,099
tea will be had with kennel dynamics

00:51:38,689 --> 00:51:49,059
they consented to be open sourcing under

00:51:46,099 --> 00:51:53,419
the condition that we require people to

00:51:49,059 --> 00:51:57,619
sign a CLA tour and ownership rights to

00:51:53,419 --> 00:51:58,339
them in practice I don't even know who

00:51:57,619 --> 00:52:01,729
to talk to

00:51:58,339 --> 00:52:03,229
NTD about SEO for so theoretically they

00:52:01,729 --> 00:52:07,069
could realize since 800 different

00:52:03,229 --> 00:52:09,859
license good luck in doing so because

00:52:07,069 --> 00:52:12,789
honestly I lost all contacts in there

00:52:09,859 --> 00:52:15,679
everyone who knew about it moved on and

00:52:12,789 --> 00:52:18,139
you you're unlikely to get that much not

00:52:15,679 --> 00:52:20,599
there but the in theory this is this

00:52:18,139 --> 00:52:24,769
most part of the deal we could of course

00:52:20,599 --> 00:52:26,239
at some time just fork it and do away

00:52:24,769 --> 00:52:29,469
with that at the moment we still

00:52:26,239 --> 00:52:29,469
maintaining the required

00:52:29,880 --> 00:52:45,030
yes the benchmark which which type

00:52:42,300 --> 00:52:47,370
Arizona what did you do to others

00:52:45,030 --> 00:52:49,350
disaster everyone who does microkernels

00:52:47,370 --> 00:52:51,690
compare their performance based on the

00:52:49,350 --> 00:52:57,030
IPC course so meant a message passing

00:52:51,690 --> 00:52:59,910
operation I mean if the way message

00:52:57,030 --> 00:53:02,250
passing works in the early in KC or for

00:52:59,910 --> 00:53:05,460
and other alpha kernels it's really as a

00:53:02,250 --> 00:53:07,260
context switch with benefits so for the

00:53:05,460 --> 00:53:09,300
reading measuring is the way for the

00:53:07,260 --> 00:53:15,240
kernel to do will complete address space

00:53:09,300 --> 00:53:17,460
and execution environment switch and as

00:53:15,240 --> 00:53:21,540
it happens to people important message

00:53:17,460 --> 00:53:25,730
as well and so to give you an idea or an

00:53:21,540 --> 00:53:28,980
army a nine is where I know the numbers

00:53:25,730 --> 00:53:31,820
at one way my message processing

00:53:28,980 --> 00:53:34,110
operation is about three hundred cycles

00:53:31,820 --> 00:53:44,400
x86 the latest generation is pretty

00:53:34,110 --> 00:53:49,250
similar the problem is in pretty much

00:53:44,400 --> 00:53:51,360
other than you have for criminals and

00:53:49,250 --> 00:53:55,080
other open source so it's hard to

00:53:51,360 --> 00:53:57,840
compare so we when I say about an order

00:53:55,080 --> 00:54:00,150
of magnitude this is basically what I

00:53:57,840 --> 00:54:03,510
know when customers have an evaluation

00:54:00,150 --> 00:54:06,180
license and actually measured and that's

00:54:03,510 --> 00:54:08,610
what my informal feedback channels

00:54:06,180 --> 00:54:11,680
called me and I reviewed some papers

00:54:08,610 --> 00:54:14,200
where people were using different micro

00:54:11,680 --> 00:54:16,120
and it all pretty much consists anything

00:54:14,200 --> 00:54:21,850
that's not el force if you give out a

00:54:16,120 --> 00:54:25,270
factor of ten so on and you might ask

00:54:21,850 --> 00:54:26,710
why and the the explanation is actually

00:54:25,270 --> 00:54:28,840
simple because they don't have formal

00:54:26,710 --> 00:54:33,490
verification if you are someone like

00:54:28,840 --> 00:54:36,520
green hills or qnx also if you would

00:54:33,490 --> 00:54:38,260
think about optimizing the IPC poverty

00:54:36,520 --> 00:54:39,670
this is really fiddling with bits and

00:54:38,260 --> 00:54:42,880
bytes

00:54:39,670 --> 00:54:45,790
it's very error-prone stuff and it's

00:54:42,880 --> 00:54:47,980
very expensive to maintain for them so

00:54:45,790 --> 00:54:50,440
basically it's too costly for them to

00:54:47,980 --> 00:54:52,720
really micro optimize the curve for us

00:54:50,440 --> 00:54:55,480
we can't afford to do that because we

00:54:52,720 --> 00:54:57,700
have the curves there we modify

00:54:55,480 --> 00:54:59,830
something of course we first send it

00:54:57,700 --> 00:55:01,900
through normal equation yes but then we

00:54:59,830 --> 00:55:04,270
run the proofs on that and if they check

00:55:01,900 --> 00:55:07,690
out then we know we're good and we don't

00:55:04,270 --> 00:55:09,640
have anything more to do and if not then

00:55:07,690 --> 00:55:11,560
they pinpoint exactly where something

00:55:09,640 --> 00:55:15,100
goes wrong and that means either we have

00:55:11,560 --> 00:55:18,670
to add annex extra proof some extra memo

00:55:15,100 --> 00:55:20,500
we prove some invariant or we may have a

00:55:18,670 --> 00:55:37,480
introduce the box but we know exactly

00:55:20,500 --> 00:55:40,810
what in theory yes in practice far way

00:55:37,480 --> 00:55:43,090
to go and the main reason here is a our

00:55:40,810 --> 00:55:45,490
current amount is not optimized for high

00:55:43,090 --> 00:55:50,560
call cons so that's the deferral level

00:55:45,490 --> 00:55:53,500
thing beyond that the what we what you

00:55:50,560 --> 00:55:55,330
need identified environment is a massive

00:55:53,500 --> 00:55:57,990
amount of infrastructure which we

00:55:55,330 --> 00:56:02,140
haven't got for example the same people

00:55:57,990 --> 00:56:03,670
where sensors when they did

00:56:02,140 --> 00:56:07,119
just before they bought out by the time

00:56:03,670 --> 00:56:09,279
they pulled out and sunk I think tens of

00:56:07,119 --> 00:56:10,779
million into essentially building up

00:56:09,279 --> 00:56:22,180
this management infrastructure which

00:56:10,779 --> 00:56:24,160
ended the way I thought that in theory

00:56:22,180 --> 00:56:26,760
all I need is an MMU and dual mode

00:56:24,160 --> 00:56:29,230
execution in practice you want

00:56:26,760 --> 00:56:35,260
virtualization support so really the

00:56:29,230 --> 00:56:44,789
three execution labels security or

00:56:35,260 --> 00:56:47,260
firewalls people close their years so

00:56:44,789 --> 00:56:49,569
it's when it's if you like way more

00:56:47,260 --> 00:56:52,029
general than what you get from trust so

00:56:49,569 --> 00:56:56,589
it goes faster it's just this binary

00:56:52,029 --> 00:56:57,940
state so strictly speaking you don't

00:56:56,589 --> 00:57:00,819
need trust zone if you have this year

00:56:57,940 --> 00:57:03,730
for but you can openly use again some

00:57:00,819 --> 00:57:05,380
people are nesting or for Oliver it's

00:57:03,730 --> 00:57:13,630
the trust of the ways in the secure

00:57:05,380 --> 00:57:17,819
world is taking your interrupt

00:57:13,630 --> 00:57:17,819
controller driver runs the code

00:57:20,589 --> 00:57:25,790
no at the mouth a bit fog there's some

00:57:24,050 --> 00:57:27,890
horrible but it's very cool second

00:57:25,790 --> 00:57:29,990
moment so this is one of the few things

00:57:27,890 --> 00:57:36,109
that are not quite modeled at the same

00:57:29,990 --> 00:57:41,540
of faithfulness is but your question is

00:57:36,109 --> 00:57:43,579
is Toby on the on the point we all our

00:57:41,540 --> 00:57:46,099
device drivers founded use of a look but

00:57:43,579 --> 00:57:47,599
the interrupt controller is something

00:57:46,099 --> 00:57:55,339
obviously that needs to be controllable

00:57:47,599 --> 00:57:57,859
approval as well as the I just so this

00:57:55,339 --> 00:57:59,480
is an open source project a lot of

00:57:57,859 --> 00:58:02,839
applications would like their military

00:57:59,480 --> 00:58:04,130
defense how does that work and I'm also

00:58:02,839 --> 00:58:06,950
just curious about your business model

00:58:04,130 --> 00:58:09,130
in general okay unfortunately we don't

00:58:06,950 --> 00:58:13,970
need a business model because we are a

00:58:09,130 --> 00:58:16,490
public sector research organization but

00:58:13,970 --> 00:58:19,310
of course in practice we need revenue to

00:58:16,490 --> 00:58:21,710
support a lot of this work some of it is

00:58:19,310 --> 00:58:24,859
pure engineering just to make it useful

00:58:21,710 --> 00:58:27,500
others is hard engineering but a lot of

00:58:24,859 --> 00:58:32,180
science behind it to make it work so we

00:58:27,500 --> 00:58:34,010
really depend on funding and at the

00:58:32,180 --> 00:58:40,310
moment for example the reason we haven't

00:58:34,010 --> 00:58:42,380
got 64-bit support in the mainline is

00:58:40,310 --> 00:58:45,619
that we haven't got enough funding at

00:58:42,380 --> 00:58:49,430
the moment to do this work so but we we

00:58:45,619 --> 00:58:53,390
don't depend on selling it and in terms

00:58:49,430 --> 00:58:55,119
of this military projects it's not not

00:58:53,390 --> 00:58:57,770
really different from any sort of

00:58:55,119 --> 00:58:59,810
civilian projects in the sense people

00:58:57,770 --> 00:59:00,440
always have sensitive IP and we don't

00:58:59,810 --> 00:59:02,900
touch that

00:59:00,440 --> 00:59:05,960
so in the case of the we are connecting

00:59:02,900 --> 00:59:07,780
the Boeing helicopter the Riyadh

00:59:05,960 --> 00:59:12,190
campaign was actually done by

00:59:07,780 --> 00:59:14,290
engineers and to I think they had about

00:59:12,190 --> 00:59:16,180
20 years on and over period of three

00:59:14,290 --> 00:59:19,780
years of compared to the overall size of

00:59:16,180 --> 00:59:22,780
the project that's nothing and they they

00:59:19,780 --> 00:59:25,210
did this pulling out bits of the

00:59:22,780 --> 00:59:28,810
original meaning space but they had

00:59:25,210 --> 00:59:30,790
rewrote some of it for the others it's

00:59:28,810 --> 00:59:32,920
all done by the Boeing people we gave

00:59:30,790 --> 00:59:36,100
them support obviously and we improved

00:59:32,920 --> 00:59:37,300
our tools in the poses but we never

00:59:36,100 --> 00:59:55,030
touched their code we wouldn't even

00:59:37,300 --> 00:59:58,060
wouldn't have been allowed so in all the

00:59:55,030 --> 01:00:01,870
projects with tons of all the code that

00:59:58,060 --> 01:00:04,780
was not application specific was open

01:00:01,870 --> 01:00:07,150
source and so in this novel project

01:00:04,780 --> 01:00:09,250
everything we developed that was not

01:00:07,150 --> 01:00:12,690
specific to the two military vehicles

01:00:09,250 --> 01:00:12,690
was open sourced

01:00:19,770 --> 01:00:24,170
we never switched SEO was

01:00:22,200 --> 01:00:27,630
capability-based from the beginning the

01:00:24,170 --> 01:00:31,470
the first kernel we did with capability

01:00:27,630 --> 01:00:35,250
was this version something of ok of war

01:00:31,470 --> 01:00:37,830
which predated SEO and I was a gradual

01:00:35,250 --> 01:00:41,670
thing we basically changed identifiers

01:00:37,830 --> 01:00:43,380
into capabilities etc and kco we had the

01:00:41,670 --> 01:00:51,090
luxury to completely start from the

01:00:43,380 --> 01:00:52,830
inside it was very clear we before we

01:00:51,090 --> 01:00:55,830
started this way at the end file project

01:00:52,830 --> 01:00:58,860
where we took an existing small as your

01:00:55,830 --> 01:01:01,860
l4 microkernel and try to see how we can

01:00:58,860 --> 01:01:04,140
verify that so we took a small slice of

01:01:01,860 --> 01:01:06,570
functionality and it the verification

01:01:04,140 --> 01:01:08,130
all the way down and we learned that

01:01:06,570 --> 01:01:10,260
it's hopeless to do with an existing

01:01:08,130 --> 01:01:11,700
code base you have to have a code base

01:01:10,260 --> 01:01:14,430
that's being written with verification

01:01:11,700 --> 01:01:16,440
in mind and in particular with very

01:01:14,430 --> 01:01:18,720
close interaction with the verifier so

01:01:16,440 --> 01:01:22,320
it was actually not a built-in that

01:01:18,720 --> 01:01:23,580
verify it was a recruiting process in

01:01:22,320 --> 01:01:25,800
the designers or the implementation

01:01:23,580 --> 01:01:28,040
between the system scheme and a

01:01:25,800 --> 01:01:28,040
verification

01:01:29,650 --> 01:01:37,780
we're trying to understand the role of

01:01:31,900 --> 01:01:41,290
the DMM in the virtualization and how

01:01:37,780 --> 01:02:15,490
the system that's sitting up in user

01:01:41,290 --> 01:02:20,500
space so until it actually programs at

01:02:15,490 --> 01:02:23,700
time I it doesn't get a time or drug but

01:02:20,500 --> 01:02:27,220
it looked like all communication with

01:02:23,700 --> 01:02:31,060
went so through the mmm to get there so

01:02:27,220 --> 01:02:32,620
so so there's I was saying that we have

01:02:31,060 --> 01:02:34,930
advised drivers that user level there's

01:02:32,620 --> 01:02:36,400
one that's true driver said I don't

01:02:34,930 --> 01:02:38,110
wanna see drop controller which was

01:02:36,400 --> 01:02:39,550
already mentioned and the other is

01:02:38,110 --> 01:02:43,980
there's a time of I'm in the kernel

01:02:39,550 --> 01:02:43,980
because we have reactive time slicing

01:02:44,670 --> 01:02:53,230
those ones work without the vmm and

01:02:50,920 --> 01:02:54,900
depending on what platform you have if

01:02:53,230 --> 01:02:56,600
you have several times

01:02:54,900 --> 01:03:07,470
after you sell that will buy us

01:02:56,600 --> 01:03:10,350
otherwise we talk about personalization

01:03:07,470 --> 01:03:13,980
you talk about you memory I interrupt

01:03:10,350 --> 01:03:16,140
timers and i/o so which components are

01:03:13,980 --> 01:03:20,270
for that is supported in the microkernel

01:03:16,140 --> 01:03:27,780
which parts are in the dynamic time so

01:03:20,270 --> 01:03:32,130
the all the kernel itself does is it

01:03:27,780 --> 01:03:37,500
does I'm really IPC sending messages

01:03:32,130 --> 01:03:39,930
between uses of address spaces resource

01:03:37,500 --> 01:03:41,610
management basically that the resource

01:03:39,930 --> 01:03:43,250
management of a CEO who is extremely low

01:03:41,610 --> 01:03:46,020
level it doesn't have an internal

01:03:43,250 --> 01:03:49,620
replicates itself you have to provide it

01:03:46,020 --> 01:03:51,810
to it that's the isolation story but it

01:03:49,620 --> 01:03:54,750
needs to establish that being symmetry

01:03:51,810 --> 01:03:57,390
spaces there's ways to cope frame

01:03:54,750 --> 01:03:58,920
capabilities to have them appear in

01:03:57,390 --> 01:04:01,200
address space except oh so that's what

01:03:58,920 --> 01:04:03,980
the kernel does and other than averages

01:04:01,200 --> 01:04:06,420
forwards you've got some exceptions and

01:04:03,980 --> 01:04:07,770
hypervisor exceptions such as one class

01:04:06,420 --> 01:04:11,180
of exception they go to a different

01:04:07,770 --> 01:04:11,180
handler which is you BNN

01:04:12,310 --> 01:04:20,010
oh yeah it's running in otama dress

01:04:15,940 --> 01:04:20,010
today so it's protected from the guests

01:04:24,600 --> 01:04:29,260
I'm not sure whether the guests could

01:04:27,400 --> 01:04:31,360
mess with the B mm I don't think it

01:04:29,260 --> 01:04:34,030
candidates it's not in a separate world

01:04:31,360 --> 01:04:37,000
so it lives in the same virtual machine

01:04:34,030 --> 01:04:38,920
State for sure and I think we might

01:04:37,000 --> 01:04:40,870
persuade the guests from touching any of

01:04:38,920 --> 01:04:44,350
its neighboring but I'm not sure there

01:04:40,870 --> 01:04:46,420
will be thing but in the thread model

01:04:44,350 --> 01:04:48,370
assumes that this VM man could be

01:04:46,420 --> 01:04:54,190
compromised but it should not affect any

01:04:48,370 --> 01:04:56,860
of the ends it's not inside of the case

01:04:54,190 --> 01:04:58,810
it's a separate process but I can't

01:04:56,860 --> 01:05:21,820
guarantee that the case companies with

01:04:58,810 --> 01:05:26,820
it in the sense I I don't know actually

01:05:21,820 --> 01:05:31,210
the in SEO for itself of original

01:05:26,820 --> 01:05:33,580
200,000 lines of proof only about twenty

01:05:31,210 --> 01:05:36,060
thousand solar generated everything else

01:05:33,580 --> 01:05:36,060
was handwritten

01:05:38,030 --> 01:05:42,380
saadet the development we need some

01:05:40,760 --> 01:05:45,500
analysis of the overall development of

01:05:42,380 --> 01:05:47,030
the lifecycle cost and we came up it was

01:05:45,500 --> 01:05:49,640
about effect of three or four more

01:05:47,030 --> 01:05:51,890
expensive and pistacia market criminal

01:05:49,640 --> 01:05:53,690
that is very simple in flavor and field

01:05:51,890 --> 01:05:56,630
in a very stable environment for quite

01:05:53,690 --> 01:05:59,810
comparable but it's a novel fact all

01:05:56,630 --> 01:06:17,870
three or four days expensive then well

01:05:59,810 --> 01:06:21,380
green hills will tell you it was a

01:06:17,870 --> 01:06:23,780
hollow word but of course writing proof

01:06:21,380 --> 01:06:26,000
is in a way once you know what you're

01:06:23,780 --> 01:06:29,150
doing writing proof is simpler than

01:06:26,000 --> 01:06:34,760
writing C because anything you do wrong

01:06:29,150 --> 01:06:36,650
will immediately be rejected but the

01:06:34,760 --> 01:06:39,080
whole verifying these nine thousand

01:06:36,650 --> 01:06:42,110
lines of code cost about eleven person

01:06:39,080 --> 01:06:43,940
years interest proving though that

01:06:42,110 --> 01:06:45,800
includes the design and implementation I

01:06:43,940 --> 01:06:47,780
think nine person Diaz went into the

01:06:45,800 --> 01:06:50,300
actual proving and then there was

01:06:47,780 --> 01:06:51,860
another nine or so for as he isn't just

01:06:50,300 --> 01:06:54,320
building up the frameworks he was

01:06:51,860 --> 01:06:56,830
nothing existed for doing this a project

01:06:54,320 --> 01:06:56,830
of that scale

01:06:58,480 --> 01:07:04,359
but the proofs are written in a

01:07:01,770 --> 01:07:07,180
interactive proof assistant hold Isabel

01:07:04,359 --> 01:07:32,740
hold but initially originates in

01:07:07,180 --> 01:07:36,060
Cambridge but so we have a fake nice

01:07:32,740 --> 01:07:38,920
high performance well work in multi-core

01:07:36,060 --> 01:07:43,720
implementation for both home and x86 but

01:07:38,920 --> 01:07:45,250
they're not verified and we are working

01:07:43,720 --> 01:07:47,859
on that but this is still going to take

01:07:45,250 --> 01:07:50,680
a while because we have to develop new

01:07:47,859 --> 01:07:52,570
techniques for the concurrency is just

01:07:50,680 --> 01:07:54,640
extremely hard and that's not surprising

01:07:52,570 --> 01:07:56,920
one of the things we found it anything

01:07:54,640 --> 01:07:59,650
that's hard to reason about mainly it's

01:07:56,920 --> 01:08:01,359
not the proof so in that sense that's

01:07:59,650 --> 01:08:02,920
actually not a bad differentiate or if

01:08:01,359 --> 01:08:05,050
it's code is straightforward you know

01:08:02,920 --> 01:08:06,640
it's going to be piece of paper if it if

01:08:05,050 --> 01:08:09,700
it's true even you know that's going to

01:08:06,640 --> 01:08:12,849
be challenging and concurrency is just

01:08:09,700 --> 01:08:14,740
very hard and so there's this surgical

01:08:12,849 --> 01:08:16,089
system from a which was supposed to be

01:08:14,740 --> 01:08:19,660
open source at least a promise that

01:08:16,089 --> 01:08:22,719
years ago and it still listen and they

01:08:19,660 --> 01:08:25,390
have a multi core kernel that's verified

01:08:22,719 --> 01:08:27,370
but what they did to enable verification

01:08:25,390 --> 01:08:29,710
is they completely piece about any

01:08:27,370 --> 01:08:32,319
databases so anything that's potentially

01:08:29,710 --> 01:08:34,060
racy has to be in a log and that's a

01:08:32,319 --> 01:08:36,430
really good way to produce a super small

01:08:34,060 --> 01:08:38,440
kernel and because we don't believe in

01:08:36,430 --> 01:08:40,930
compromising performance for security we

01:08:38,440 --> 01:08:45,160
don't do that so our Molly Cochran is

01:08:40,930 --> 01:08:47,830
very easy and all these races are benign

01:08:45,160 --> 01:08:49,950
outside the mall and we only lock when

01:08:47,830 --> 01:09:16,660
we really have to and doing that

01:08:49,950 --> 01:09:19,090
reasoning about this basically not a

01:09:16,660 --> 01:09:23,650
definite timeline we have some funding

01:09:19,090 --> 01:09:25,330
for accelerating some of that work at

01:09:23,650 --> 01:09:27,460
the moment still on the conceptual level

01:09:25,330 --> 01:09:30,460
and sort of that phase is going to go

01:09:27,460 --> 01:09:32,050
for another half year or so and at the

01:09:30,460 --> 01:09:34,540
end of that phase we will have a

01:09:32,050 --> 01:09:36,810
reasonable idea of what it takes to

01:09:34,540 --> 01:09:40,300
actually do this thing completely and

01:09:36,810 --> 01:09:42,670
depending on how many people we can put

01:09:40,300 --> 01:09:48,070
onto it which means depending on how

01:09:42,670 --> 01:09:50,020
much funding we get I think with

01:09:48,070 --> 01:09:52,900
sufficient funding it can probably be

01:09:50,020 --> 01:09:59,590
done in a year year after that reality

01:09:52,900 --> 01:10:05,650
is to probably take this funding is

01:09:59,590 --> 01:10:09,070
government research so we were in a

01:10:05,650 --> 01:10:10,660
government research lab but our base

01:10:09,070 --> 01:10:13,980
funding from the government is only a

01:10:10,660 --> 01:10:13,980
small percentage of

01:10:20,330 --> 01:11:21,780
so engineering so well yes and that's

01:11:15,870 --> 01:11:25,110
part of the verification system will all

01:11:21,780 --> 01:11:27,570
be easy at the moment we understand how

01:11:25,110 --> 01:11:30,150
to deal with piezo which is the x86

01:11:27,570 --> 01:11:34,820
memory model I don't think anyone really

01:11:30,150 --> 01:11:34,820
knows how to deal with beautiful

01:11:50,360 --> 01:11:54,590
we have a different kernel that's also

01:11:52,550 --> 01:11:56,450
undergoing verification that's just a

01:11:54,590 --> 01:11:59,410
very vehicle and simple but highly

01:11:56,450 --> 01:12:05,540
configurable part is called across

01:11:59,410 --> 01:12:06,980
that's not it is undergoing verification

01:12:05,540 --> 01:12:10,130
of all that's a background activity

01:12:06,980 --> 01:12:11,630
because we have no money to do it it's

01:12:10,130 --> 01:12:13,070
even though it's only a few hundred

01:12:11,630 --> 01:12:16,280
lines of code it's actually much harder

01:12:13,070 --> 01:12:18,140
to verify an SEO for because there's SEO

01:12:16,280 --> 01:12:19,820
programs with interrupts is able to

01:12:18,140 --> 01:12:22,280
accept that certain preemption points we

01:12:19,820 --> 01:12:25,220
need to get decent real-time analysis

01:12:22,280 --> 01:12:28,220
whereas Acronis runs within drops

01:12:25,220 --> 01:12:30,500
enabled except where you have to do some

01:12:28,220 --> 01:12:32,540
concurrency control so that means the

01:12:30,500 --> 01:12:34,510
whole kernel is very lazy and that means

01:12:32,540 --> 01:12:38,420
it's verification is more challenging

01:12:34,510 --> 01:12:41,000
but that's that is for any new discover

01:12:38,420 --> 01:12:45,200
senses as well as we have MPU support

01:12:41,000 --> 01:12:48,290
for the cortex on n series and that is

01:12:45,200 --> 01:12:53,830
actually being but as we speak being

01:12:48,290 --> 01:12:53,830
built into implanted medical implants

01:12:54,610 --> 01:12:58,060
and also

01:13:04,449 --> 01:13:08,470
all right thank you for us any good

01:13:06,790 --> 01:13:12,230
questions

01:13:08,470 --> 01:13:17,200
[Applause]

01:13:12,230 --> 01:13:17,200

YouTube URL: https://www.youtube.com/watch?v=heSmrHzHcuM


