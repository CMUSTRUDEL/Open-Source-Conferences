Title: Google's Project Treble - SFO17-400K1
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Slides: http://connect.linaro.org/resource/sfo17/sfo17-400k1/

SFO17-400K1
Speaker: Iliyan Malchev Google


2. What and Why 1 What is the problem? Why do we care to solve it? Userspace 2 What is the solution? What is the timeframe? Kernel 3 Tackling kernel fragmentation Results 4 Some stats and early results I Agenda
4. https://developer.android.com/about/dashboards/index.html I Userspace

7. Faster Device Launches on Latest Google SoC OEM users Easier Device Upgrades Google Better Quality Google SoC OEM users BEtter Security esp. Kernel Google SoC OEM users I Who Wants What
8. The Life of an Android Device Launch
9. I Start with AOSP
10. ... I Add Functionality/Customizations
11. ... I Adapt to SoC and Device
12. "HALs" "Ext"AOSP I Reality
13. ● Short product cycles ● No Single Android OS to update ○ Large AOSP Delta ○ SoC Support not universal ● Certification: Carrier, Regulatory, CTS ● QA ● Support Call Center, OTA Infrastructure, etc... "HALs" ExtAOSP I Difficult means Expensive
15. Architectural changes Android Platform Operational changes Partner outreach Compatibility changes Partner outreach Upstreaming Android Platform I Project Treble
16. ExtAOSP "HALs" ExtAOSP I Solve SoC Support
17. kernel driverdriverdriver driverdriver libc other libraries activity Media Server System Server Camera Server Audio Server Surface Flinger OMX ... ... camera HAL audio HAL gralloc hwc sensor HAL etc ART API java.* android.* GL HAL Binder I Android Architecture Pre-O
18. kernel driverdriverdriver driverdriver libc other libraries activity Media Server System Server Camera Server Audio Server Surface Flinger OMX ... ...camera HAL audio HAL gralloc hwc sensor HAL etc ART API java.* android.* GL HAL Binder Binder I Android Architecture Post-O
19. I The Vendor Test Suite CTS VTS Android Framework VINTF Implementation General System Image VINTF Implementation CTS on AOSP Before Oreo Android Oreo HAL Kernel Library
20. "HALs" ExtAOSP I Tackle the AOSP Delta
21. Q3 ACP ALL HANDS Multiple implementations of same functionality Drive convergence between AOSP and Framework Variants Forum involving major contributors to AOSP Feature review, approval, reengineering Non-US regulatory requirements Extensions to Bluetooth, Telephony, Dialer, SysUI, Home Screen I Upstreaming
22. "HALs" ExtAOSP ExtAOSP
23. Must pass Vendor Test Suite VTS; tests for HALs for approval All OEM devices launched with O must implement Treble HALs Must pass CTS on AOSP Q3 ACP ALL HANDS This includes older SoCs that will be used by OEMs to launch O-based devices I Compatibility Requirements
25. ● Release uptake is 6 months to a year ○ Mostly just flagships ● Solving the problem forwards ● Customer pull is strong ● Attention Span outside and within ● Addressing fragmentation is a MUST I The One-Release Fix
27. Existing LTS is not Enough Device Kernel Stable Long Term Support Android Common SoC Kernel Device Release Device Update Clone Merge Cherry-Pick Device Update Device Update Device Update
28. Announcing 6-year LTS Device Kernel Stable Long Term Support Android Common SoC Kernel Device Release Device Update Clone Merge Cherry-Pick Device Update Device Update Device Update
30. health/1.0 thermal/1.0 oemlock/1.0 gnss/1.0 automotive/vehicle/2.0 automotive/vehicle/2.1 automotive/evs/1.0 audio/2.0 audio/effect/2.0 audio/common/2.0 vibrator/1.1 vibrator/1.0 tv/cec/1.0 tv/input/1.0 bluetooth/1.0 usb/1.1 usb/1.0 gatekeeper/1.0 wifi/offload/1.0 wifi/supplicant/1.0 wifi/1.0 radio/1.1 radio/1.0 radio/deprecated/1.0 renderscript/1.0 weaver/1.0 light/2.0 keymaster/3.0 soundtrigger/2.0 ir/1.0 boot/1.0 graphics/allocator/2.0 graphics/bufferqueue/1.0 graphics/mapper/2.0 graphics/common/1.0 graphics/composer/2.1 drm/1.0 nfc/1.0 biometrics/fingerprint/2.1 contexthub/1.0 broadcastradio/1.1 broadcastradio/1.0 power/1.1 power/1.0 vr/1.0 sensors/1.0 configstore/1.1 configstore/1.0 media/omx/1.0 media/1.0 memtrack/1.0 dumpstate/1.0 camera/metadata/3.2 camera/provider/2.4 camera/device/3.2 camera/device/1.0 camera/common/1.0 tetheroffload/control/1.0 tetheroffload/config/1.0 I 60 Subsystem Conversions
31. Authors Files 300 3000 Commits 20k LOC ~1M I Code Stats
32. Qualcomm, Mediatek, Samsung/LSI, Huawei/HiSilicon, Motorola, Sony, LG Partners San Diego Taipei Seoul Onsite Teams 7 3 Direct on-site visits Partner Summits Android Bootcamp Executive Sync-ups Forums + 3 Qualcomm SoCs 1 Mediatek SoC 1 HiSilicon SoC 1 Exynos SoC SONY Huawei Samsung Oreo Launches / Upgrades 3/1 I Partner Outreach
34. Clone Merge Cherry-Pick Linux 4.9.y Android Common 4.9 msm-4.9 Common SoC Kernel MSMXXXX based device 1 MSMXXXX based device 2 MSMXXXX based device 3 Linux 4.9.y xLTS backports exynos-4.9 Common SoC Kernel mediatek-4.9 Common SoC Kernel I Kernel Unification
35. I There's More To Do ● Continued work with SoC Vendors ● Continued work on Kernel Unification ● Expanding test coverage ● Bringing the ecosystem together with Linaro
Captions: 
	00:00:00,000 --> 00:00:05,879
I know I would rather be asleep right

00:00:01,650 --> 00:00:07,350
now so uh my name is Elaine I lead

00:00:05,879 --> 00:00:12,030
project travel Google which is of course

00:00:07,350 --> 00:00:14,250
our attempt to address the issue of

00:00:12,030 --> 00:00:15,210
version fragmentation within the Android

00:00:14,250 --> 00:00:18,630
ecosystem

00:00:15,210 --> 00:00:20,779
I'll talk real quick about the nature of

00:00:18,630 --> 00:00:23,220
the problem and one why should care and

00:00:20,779 --> 00:00:25,380
about the two components two

00:00:23,220 --> 00:00:27,630
fragmentation namely these are spaced

00:00:25,380 --> 00:00:31,349
part of it and well and where it

00:00:27,630 --> 00:00:34,050
concerns the Linux kernel and I have a

00:00:31,349 --> 00:00:38,280
bit of a hopefully juicy announcement to

00:00:34,050 --> 00:00:39,480
make with regards to the kernel and then

00:00:38,280 --> 00:00:41,850
finally I'll talk about some of the

00:00:39,480 --> 00:00:48,210
early results that we see as a result of

00:00:41,850 --> 00:00:52,289
our work so what's the problem that's

00:00:48,210 --> 00:00:55,829
the problem this is from our own chart

00:00:52,289 --> 00:00:57,420
on on AOSP AOSP for those who may not

00:00:55,829 --> 00:01:00,539
know is the open source version of

00:00:57,420 --> 00:01:03,420
android well you see that we just

00:01:00,539 --> 00:01:05,760
released Android Oreo a few weeks ago

00:01:03,420 --> 00:01:09,510
and it's not there yet

00:01:05,760 --> 00:01:14,270
Android and nougat is a year old now and

00:01:09,510 --> 00:01:14,270
it's still only at about I think 15%

00:01:15,140 --> 00:01:19,920
this is what we were for you know and

00:01:17,400 --> 00:01:21,930
things are you can see marshmallow and

00:01:19,920 --> 00:01:24,810
lollipop all the way to jelly beans to

00:01:21,930 --> 00:01:28,049
being sizable fractions for the Android

00:01:24,810 --> 00:01:30,329
ecosystem this is what we call the

00:01:28,049 --> 00:01:34,710
Android version fragmentation and this

00:01:30,329 --> 00:01:36,180
is what we want to address where the of

00:01:34,710 --> 00:01:39,030
course Android is a Linux distribution

00:01:36,180 --> 00:01:40,979
where the kernel is concerned things are

00:01:39,030 --> 00:01:45,000
looking pretty dire as well you know I

00:01:40,979 --> 00:01:46,710
actually don't have the data to I just

00:01:45,000 --> 00:01:49,560
slapped some Linux version numbers in

00:01:46,710 --> 00:01:53,970
there based on my memory Google to this

00:01:49,560 --> 00:01:56,130
day until project Oreo I'm sorry until

00:01:53,970 --> 00:01:58,469
Oreo and project rebel Google wasn't

00:01:56,130 --> 00:02:01,020
collecting stats on the kernels that

00:01:58,469 --> 00:02:03,600
Android devices run we just don't know

00:02:01,020 --> 00:02:07,049
so I'm just going off of memory or based

00:02:03,600 --> 00:02:08,670
on my work on Nexus and pixel devices so

00:02:07,049 --> 00:02:12,800
that's pretty sad right and we want to

00:02:08,670 --> 00:02:12,800
change that to yes

00:02:12,900 --> 00:02:19,480
all right as to I care

00:02:16,560 --> 00:02:22,060
you could legitimately ask why would

00:02:19,480 --> 00:02:26,230
anybody want to get a newer version of

00:02:22,060 --> 00:02:28,060
Android you have to assume that the

00:02:26,230 --> 00:02:30,400
newer version of Android is something

00:02:28,060 --> 00:02:34,209
that the end user wants and to this day

00:02:30,400 --> 00:02:37,319
that has been the case but these sort of

00:02:34,209 --> 00:02:39,790
four categories are what I wanted to

00:02:37,319 --> 00:02:41,260
apologize about the typo this was at

00:02:39,790 --> 00:02:44,739
midnight last night on the better

00:02:41,260 --> 00:02:50,530
security part these four categories are

00:02:44,739 --> 00:02:51,670
what I wanted to call out obviously you

00:02:50,530 --> 00:02:55,030
know on the right hand side you can see

00:02:51,670 --> 00:02:56,890
sort of who cares about everybody cares

00:02:55,030 --> 00:02:58,959
about faster device launches on the

00:02:56,890 --> 00:03:03,130
latest everything else everything being

00:02:58,959 --> 00:03:06,250
equal an OEM would want to be able to

00:03:03,130 --> 00:03:07,599
launch as early as possible in the

00:03:06,250 --> 00:03:10,150
latest release of Android that's just a

00:03:07,599 --> 00:03:11,980
marketing plus for them so anything that

00:03:10,150 --> 00:03:14,980
prevents them from doing so is something

00:03:11,980 --> 00:03:17,079
that we want to address easier device

00:03:14,980 --> 00:03:19,720
upgrades is sort of the sister issue to

00:03:17,079 --> 00:03:24,280
this where you know if you launch more

00:03:19,720 --> 00:03:25,989
easily than it should also follow

00:03:24,280 --> 00:03:28,030
naturally that you get to upgrade more

00:03:25,989 --> 00:03:29,920
easily and a device's the launched an

00:03:28,030 --> 00:03:34,480
older version of the of the operating

00:03:29,920 --> 00:03:36,790
system but equality of course one should

00:03:34,480 --> 00:03:39,359
hope that future versions of Android are

00:03:36,790 --> 00:03:43,510
better quality and then past ones and

00:03:39,359 --> 00:03:46,630
last but not at all least the the kernel

00:03:43,510 --> 00:03:50,829
part of this is what would really really

00:03:46,630 --> 00:03:52,630
lag behind and that's sort of one of the

00:03:50,829 --> 00:03:55,150
integral reasons for why we joined the

00:03:52,630 --> 00:04:01,739
Naro the mobile group I'll talk about

00:03:55,150 --> 00:04:04,120
that in one of the next slides a grossly

00:04:01,739 --> 00:04:06,069
oversimplified version of what happens

00:04:04,120 --> 00:04:11,100
when somebody launches an Android device

00:04:06,069 --> 00:04:14,470
follows first we start with AOSP what

00:04:11,100 --> 00:04:17,350
Google releases to the world is what we

00:04:14,470 --> 00:04:18,850
call a recipe does anybody not know what

00:04:17,350 --> 00:04:20,140
that means I mean I know what it means

00:04:18,850 --> 00:04:22,419
but does anybody not know what that

00:04:20,140 --> 00:04:24,940
means a OSP for Android open source

00:04:22,419 --> 00:04:27,850
project okay

00:04:24,940 --> 00:04:31,570
so we release the AOSP at one point in

00:04:27,850 --> 00:04:35,980
the year and it's just a bunch of

00:04:31,570 --> 00:04:38,470
projects that are largely divorced from

00:04:35,980 --> 00:04:42,070
any actual and consumer hardware eat

00:04:38,470 --> 00:04:44,830
AOSP doesn't necessarily isn't

00:04:42,070 --> 00:04:49,030
necessarily able to run on a qualcomm

00:04:44,830 --> 00:04:53,380
chipset or any other or anything else as

00:04:49,030 --> 00:04:56,140
it is it lacks things that you would

00:04:53,380 --> 00:05:00,840
want to see on a consumer device so what

00:04:56,140 --> 00:05:05,430
next happens is again this is simplified

00:05:00,840 --> 00:05:08,230
what next happens is an OEM or an ODM

00:05:05,430 --> 00:05:10,200
adds a bunch of functionality that's

00:05:08,230 --> 00:05:12,490
missing twice P this ranges from

00:05:10,200 --> 00:05:14,680
features that are missing in the

00:05:12,490 --> 00:05:18,640
codebase themselves that one would need

00:05:14,680 --> 00:05:23,530
to launch in China for example but also

00:05:18,640 --> 00:05:25,270
includes you know differentiation type

00:05:23,530 --> 00:05:28,180
features something that would make a

00:05:25,270 --> 00:05:33,370
device of Samsung Galaxy or a Huawei

00:05:28,180 --> 00:05:36,910
device or Sony Xperia and of course you

00:05:33,370 --> 00:05:39,730
need something to make this entire code

00:05:36,910 --> 00:05:42,669
run you need code to make this entire

00:05:39,730 --> 00:05:45,190
thing run on the actual target and so

00:05:42,669 --> 00:05:49,660
you add this adaptation layer for the

00:05:45,190 --> 00:05:52,090
actual SOC and you know you qualify to

00:05:49,660 --> 00:05:54,220
the actual device and so that's sort of

00:05:52,090 --> 00:05:56,710
the oversimplified beautiful picture of

00:05:54,220 --> 00:06:01,240
what an Android release is when it hits

00:05:56,710 --> 00:06:04,020
the consumers hands of course reality

00:06:01,240 --> 00:06:09,490
reality is slightly different from that

00:06:04,020 --> 00:06:15,820
it can again this is like midnight last

00:06:09,490 --> 00:06:19,390
night so I'm a really bad procrastinator

00:06:15,820 --> 00:06:23,680
so it kind of looks more like this and

00:06:19,390 --> 00:06:27,100
not like that what the what the angry

00:06:23,680 --> 00:06:31,860
faces and the squiggles refer to is that

00:06:27,100 --> 00:06:34,810
these these additions and adaptations

00:06:31,860 --> 00:06:37,390
they really they're not they're not

00:06:34,810 --> 00:06:38,500
compartmentalized they're not isolated

00:06:37,390 --> 00:06:41,310
to where they properly

00:06:38,500 --> 00:06:45,490
should belong there all over the place

00:06:41,310 --> 00:06:46,990
so for better or for worse this image

00:06:45,490 --> 00:06:48,910
will stay with us for the rest of the

00:06:46,990 --> 00:06:55,390
keynote in the upper right corner of the

00:06:48,910 --> 00:07:00,820
slides why is that why is that at the

00:06:55,390 --> 00:07:03,340
top of it so the this ugliness is why it

00:07:00,820 --> 00:07:05,740
is difficult to upgrade Android to new

00:07:03,340 --> 00:07:08,200
versions of itself and why it's

00:07:05,740 --> 00:07:10,990
difficult to also launch and the reason

00:07:08,200 --> 00:07:12,669
for that is you have these short product

00:07:10,990 --> 00:07:13,030
cycles you know in certain places of the

00:07:12,669 --> 00:07:16,510
world

00:07:13,030 --> 00:07:20,770
om every four to six months in many

00:07:16,510 --> 00:07:21,840
cases Android devices have a short shelf

00:07:20,770 --> 00:07:25,060
life they're more like accessories

00:07:21,840 --> 00:07:27,700
rather than something that you think of

00:07:25,060 --> 00:07:32,560
when you think of a high-end flagship

00:07:27,700 --> 00:07:34,390
phone and so all of this forces

00:07:32,560 --> 00:07:36,100
everybody to essentially cut corners and

00:07:34,390 --> 00:07:37,630
you just get there to get it done as

00:07:36,100 --> 00:07:41,470
fast as possible and so we end up

00:07:37,630 --> 00:07:44,970
accumulating technical debt there is no

00:07:41,470 --> 00:07:46,630
single Android OS to update as the

00:07:44,970 --> 00:07:51,820
simplified diagrams

00:07:46,630 --> 00:07:55,630
I hope sort of clarified the what runs

00:07:51,820 --> 00:07:58,960
on any consumer device is very different

00:07:55,630 --> 00:08:01,660
from what a OSP has it's depending on

00:07:58,960 --> 00:08:03,610
the silicon vendor and OEM involved

00:08:01,660 --> 00:08:07,000
there could be a delta of one thousand

00:08:03,610 --> 00:08:09,640
to five six ten thousand patches and

00:08:07,000 --> 00:08:13,500
that's a patch so you know it could

00:08:09,640 --> 00:08:16,090
range from a line to thousands of wines

00:08:13,500 --> 00:08:17,890
because there's no single Android OS to

00:08:16,090 --> 00:08:21,280
update you have to solve the updates

00:08:17,890 --> 00:08:25,510
problem on a case-by-case basis as if

00:08:21,280 --> 00:08:29,620
you know as of Android before Android

00:08:25,510 --> 00:08:31,150
Oreo and of course SOC support is not

00:08:29,620 --> 00:08:33,219
Universal silicon vendors are in the

00:08:31,150 --> 00:08:35,400
business of selling silicon which is

00:08:33,219 --> 00:08:38,080
hardly surprising and when they

00:08:35,400 --> 00:08:40,030
commercialize a piece of silicon to

00:08:38,080 --> 00:08:45,400
their OEMs they want to move on to the

00:08:40,030 --> 00:08:47,680
next thing and so what happens when you

00:08:45,400 --> 00:08:51,170
want to launch a low-end device on a

00:08:47,680 --> 00:08:53,120
piece of silicon that isn't as new

00:08:51,170 --> 00:08:55,610
you know that is there's all this two or

00:08:53,120 --> 00:08:58,040
three years there's no business

00:08:55,610 --> 00:09:00,170
incentive in the ecosystem for you to do

00:08:58,040 --> 00:09:02,120
that because that for for people to

00:09:00,170 --> 00:09:04,610
support and the latest Android on their

00:09:02,120 --> 00:09:07,850
old silicon and of course there are

00:09:04,610 --> 00:09:09,800
added QA cost and call center issues

00:09:07,850 --> 00:09:12,529
that people call them they're angry when

00:09:09,800 --> 00:09:14,120
they're when their update breaks their

00:09:12,529 --> 00:09:15,649
phone or whatever with the

00:09:14,120 --> 00:09:19,579
infrastructure cost and so on so

00:09:15,649 --> 00:09:23,209
difficult means expensive and the way

00:09:19,579 --> 00:09:26,089
that we fix it whatever we do to fix it

00:09:23,209 --> 00:09:27,560
has to do with reducing costs to the

00:09:26,089 --> 00:09:29,029
major players involved and that's the

00:09:27,560 --> 00:09:33,290
silicon vendors and the yo amps

00:09:29,029 --> 00:09:35,630
primarily so this is what project rebel

00:09:33,290 --> 00:09:39,139
did treble so there are four squares on

00:09:35,630 --> 00:09:41,720
this display and treble refers to three

00:09:39,139 --> 00:09:46,670
I guess that's a nod to the to the

00:09:41,720 --> 00:09:49,010
British folks in the room pretend is

00:09:46,670 --> 00:09:51,529
just three the treble refers to playing

00:09:49,010 --> 00:09:53,060
to addressing the issues where Google is

00:09:51,529 --> 00:09:55,670
concerned where silicon vendors are

00:09:53,060 --> 00:09:58,839
concerned and our OEMs are concerned in

00:09:55,670 --> 00:10:02,120
order to get that done we have to tackle

00:09:58,839 --> 00:10:03,740
sort of the issue on several fronts we

00:10:02,120 --> 00:10:08,199
had to make some architectural changes

00:10:03,740 --> 00:10:09,860
to the Android platform to make that

00:10:08,199 --> 00:10:12,110
compartmentalization and that pretty

00:10:09,860 --> 00:10:14,480
picture more of a reality and the ugly

00:10:12,110 --> 00:10:16,579
one less of a reality some operational

00:10:14,480 --> 00:10:18,740
changes we did a massive outreach with

00:10:16,579 --> 00:10:20,360
our major partners I see a lot of call

00:10:18,740 --> 00:10:24,980
covers in the room we've been working

00:10:20,360 --> 00:10:29,209
with them very very closely and yelling

00:10:24,980 --> 00:10:33,920
at each other a lot as opposed we want

00:10:29,209 --> 00:10:35,720
to converge that Delta between AO is

00:10:33,920 --> 00:10:37,370
painted and the consumer versions of

00:10:35,720 --> 00:10:38,779
Android as much as possible so that

00:10:37,370 --> 00:10:43,339
other companies don't have to carry this

00:10:38,779 --> 00:10:45,440
patch set out of tree and we find also

00:10:43,339 --> 00:10:47,569
we made some changes to the way that

00:10:45,440 --> 00:10:50,120
Android compatibility requirements are

00:10:47,569 --> 00:10:54,949
laid out which we'll talk about that if

00:10:50,120 --> 00:10:56,990
I have time so we first want to start by

00:10:54,949 --> 00:10:59,839
solving the SOC support part of the

00:10:56,990 --> 00:11:01,819
picture we will be going back to the

00:10:59,839 --> 00:11:04,520
pretty picture slowly little by little

00:11:01,819 --> 00:11:07,670
we want to get back to solving the SOC

00:11:04,520 --> 00:11:10,280
port for us to do that let me just take

00:11:07,670 --> 00:11:13,130
a quick detour and talk give you a quick

00:11:10,280 --> 00:11:14,480
overview of what Android looked like

00:11:13,130 --> 00:11:18,260
what the Android architecture looked

00:11:14,480 --> 00:11:19,670
like before Android Oh and then I'll say

00:11:18,260 --> 00:11:23,690
how that changed in order to accommodate

00:11:19,670 --> 00:11:26,690
this effort if I go back the previous

00:11:23,690 --> 00:11:31,310
slide the the space between the SOC sort

00:11:26,690 --> 00:11:35,480
of rectangle and ugly above it is what

00:11:31,310 --> 00:11:38,590
we call the house how in Android is sort

00:11:35,480 --> 00:11:42,800
of used to be a vague term that denotes

00:11:38,590 --> 00:11:44,360
the interface boundary between the piece

00:11:42,800 --> 00:11:47,240
above that is independent of the

00:11:44,360 --> 00:11:50,240
hardware and a major subsystem so we're

00:11:47,240 --> 00:11:54,860
talking about the camera how the audio

00:11:50,240 --> 00:11:57,080
Hal Wi-Fi telephony and so on Android is

00:11:54,860 --> 00:11:59,570
devices and tablets for the most part

00:11:57,080 --> 00:12:01,490
still and these tend to be fairly

00:11:59,570 --> 00:12:03,590
standard in terms of the subsystem

00:12:01,490 --> 00:12:04,790
support that they need of course things

00:12:03,590 --> 00:12:07,280
differ want to start talking about

00:12:04,790 --> 00:12:08,870
Internet of Things and Android auto but

00:12:07,280 --> 00:12:11,480
for phones and tablets there is a

00:12:08,870 --> 00:12:15,980
well-defined set of subsystems prior to

00:12:11,480 --> 00:12:18,350
Android Oh the implementation of the of

00:12:15,980 --> 00:12:20,990
the how the implementation of the

00:12:18,350 --> 00:12:22,910
subsystem that is vendor specific that

00:12:20,990 --> 00:12:26,690
is either specific to a silicon vendor

00:12:22,910 --> 00:12:30,740
or to an OEM lived in the same process

00:12:26,690 --> 00:12:32,810
as its client so if you look at this

00:12:30,740 --> 00:12:34,550
diagram you have an application that's

00:12:32,810 --> 00:12:35,090
talking over binder and binders of

00:12:34,550 --> 00:12:38,600
course

00:12:35,090 --> 00:12:41,860
androids IPC mechanism IPC / RPC

00:12:38,600 --> 00:12:44,870
mechanism - a number of internal

00:12:41,860 --> 00:12:47,900
services these services would literally

00:12:44,870 --> 00:12:50,530
incorporate in them via just loading

00:12:47,900 --> 00:12:53,570
shared libraries the vendor components

00:12:50,530 --> 00:12:55,520
the interface between them and those

00:12:53,570 --> 00:12:57,260
under components was never really

00:12:55,520 --> 00:12:59,360
formally defined and it was really quite

00:12:57,260 --> 00:13:02,900
fragile even when it was we never made a

00:12:59,360 --> 00:13:06,020
formal promise to our partners that what

00:13:02,900 --> 00:13:08,090
interface we define for the audio health

00:13:06,020 --> 00:13:10,070
for example wouldn't randomly change

00:13:08,090 --> 00:13:13,250
from one version to the next so that

00:13:10,070 --> 00:13:15,380
created a bunch of difficulty in moving

00:13:13,250 --> 00:13:18,350
forward where our silicon partners are

00:13:15,380 --> 00:13:21,410
concerned so what we did was

00:13:18,350 --> 00:13:24,170
we extended with Oreo that's the biggest

00:13:21,410 --> 00:13:29,470
change sort of in terms of engineering

00:13:24,170 --> 00:13:32,570
effort that we did to Android four oh we

00:13:29,470 --> 00:13:35,570
formalized the division between those

00:13:32,570 --> 00:13:39,290
house those subsystems and their clients

00:13:35,570 --> 00:13:42,880
by making them each their own server

00:13:39,290 --> 00:13:46,790
their own their own daemon if you will

00:13:42,880 --> 00:13:48,920
that communicates with the clients over

00:13:46,790 --> 00:13:51,830
over binder again we made a number of

00:13:48,920 --> 00:13:54,080
changes to the binder kernel driver and

00:13:51,830 --> 00:13:55,820
to the supporting infrastructure user

00:13:54,080 --> 00:13:57,980
space to make sure that this is fast

00:13:55,820 --> 00:14:00,880
right because when you're talking about

00:13:57,980 --> 00:14:03,500
camera you could have a scenario where

00:14:00,880 --> 00:14:06,700
240 frames per second while recording

00:14:03,500 --> 00:14:09,980
video that needs to work as well is it

00:14:06,700 --> 00:14:14,890
as well as it did before or you know we

00:14:09,980 --> 00:14:17,000
failed so it is this division and

00:14:14,890 --> 00:14:20,300
formalization of the interfaces between

00:14:17,000 --> 00:14:24,280
the how components between the Hal

00:14:20,300 --> 00:14:27,640
interfaces and the framework on top that

00:14:24,280 --> 00:14:32,240
underpins all of the work that we did

00:14:27,640 --> 00:14:35,870
with this distinction we with this

00:14:32,240 --> 00:14:38,410
distinction we created about 60 formal

00:14:35,870 --> 00:14:41,240
interfaces and when I say formal I mean

00:14:38,410 --> 00:14:44,840
we created an interface description

00:14:41,240 --> 00:14:46,430
language that has the notion of

00:14:44,840 --> 00:14:49,310
versioning semantic versioning with

00:14:46,430 --> 00:14:52,700
major minor versions that auto generates

00:14:49,310 --> 00:14:55,370
code to Java and C++ that then wraps the

00:14:52,700 --> 00:14:59,420
old code around it and it is this

00:14:55,370 --> 00:15:01,790
versioning that is now as of o enforced

00:14:59,420 --> 00:15:04,180
via a set of tests that we call the

00:15:01,790 --> 00:15:06,500
vendor test suite those of you who work

00:15:04,180 --> 00:15:11,990
more closely with Android would know

00:15:06,500 --> 00:15:13,340
that CTS is what defines Android it is

00:15:11,990 --> 00:15:16,040
you know if you want to ship an Android

00:15:13,340 --> 00:15:18,140
phone you want to pass cts cts is the

00:15:16,040 --> 00:15:22,670
set of tests about 1 million of them as

00:15:18,140 --> 00:15:25,070
in as of Android oh that hammer on the

00:15:22,670 --> 00:15:26,540
public API is to make sure that whatever

00:15:25,070 --> 00:15:29,900
you did when you were launching your

00:15:26,540 --> 00:15:31,520
device that these API scan support the

00:15:29,900 --> 00:15:35,720
actual applications

00:15:31,520 --> 00:15:40,420
what cts is to applications VTS is to

00:15:35,720 --> 00:15:43,160
the android framework and in that's

00:15:40,420 --> 00:15:46,399
enabled by the formal division that we

00:15:43,160 --> 00:15:48,290
did between the two components the

00:15:46,399 --> 00:15:50,720
houses the house are one of the three

00:15:48,290 --> 00:15:52,360
components that we cover with VT s the

00:15:50,720 --> 00:15:55,970
other one being the kernel because

00:15:52,360 --> 00:15:57,620
Android never pretended to run on

00:15:55,970 --> 00:15:59,720
anything other than the Linux kernel and

00:15:57,620 --> 00:16:02,690
so it obviously talks directly to the

00:15:59,720 --> 00:16:05,630
kernel it's not always intermediated by

00:16:02,690 --> 00:16:07,310
a how when it talks to the kernel like

00:16:05,630 --> 00:16:10,580
you make a Cisco talking directly to the

00:16:07,310 --> 00:16:13,370
kernel so the memory test suite is what

00:16:10,580 --> 00:16:18,830
now enforces this division and so now we

00:16:13,370 --> 00:16:24,020
got to the point where we can put back

00:16:18,830 --> 00:16:30,500
the AOSP bubble on top of the interface

00:16:24,020 --> 00:16:32,480
that we've defined and that's great but

00:16:30,500 --> 00:16:33,880
as I pointed out that's not a consumer

00:16:32,480 --> 00:16:36,260
device

00:16:33,880 --> 00:16:40,540
nobody launches ASP phones

00:16:36,260 --> 00:16:40,540
you cannot they're not a final product

00:16:41,290 --> 00:16:49,940
still we will we we use the AOSP

00:16:46,220 --> 00:16:54,050
on top of the vendor interface concept

00:16:49,940 --> 00:16:55,640
in order to drive further convergence in

00:16:54,050 --> 00:16:57,020
order to tackle the area with speed and

00:16:55,640 --> 00:16:58,850
one of that is in order to tackle the

00:16:57,020 --> 00:17:01,420
ASP Delta that is the Delta between AOSP

00:16:58,850 --> 00:17:05,329
and the consumer versions of android

00:17:01,420 --> 00:17:10,730
what we do for that is we kicked off a

00:17:05,329 --> 00:17:13,370
bunch of initiatives to basically take

00:17:10,730 --> 00:17:16,699
our partners code and upstream it check

00:17:13,370 --> 00:17:18,530
it into a OSP some of it happened with

00:17:16,699 --> 00:17:23,750
Android Oh but most of it is actually

00:17:18,530 --> 00:17:31,730
ongoing work that we keep talking about

00:17:23,750 --> 00:17:34,190
and actually working on for a change up

00:17:31,730 --> 00:17:36,590
streaming though will take time it's not

00:17:34,190 --> 00:17:39,890
something that we can complete in one

00:17:36,590 --> 00:17:41,480
release it's not something that we can

00:17:39,890 --> 00:17:45,470
ever complete in a very real sense

00:17:41,480 --> 00:17:47,929
because you cannot expect for a Samsung

00:17:45,470 --> 00:17:49,340
Huawei or a major OEM to contribute

00:17:47,929 --> 00:17:53,059
everything to AOSP

00:17:49,340 --> 00:17:55,730
some of this is differentiation for them

00:17:53,059 --> 00:17:58,279
that matters to them that is tied to

00:17:55,730 --> 00:18:03,799
their business the businesses bottom

00:17:58,279 --> 00:18:06,649
lines so what we cannot upstream we want

00:18:03,799 --> 00:18:08,929
to create formal interfaces for value

00:18:06,649 --> 00:18:11,769
add additions to plug into a OSP

00:18:08,929 --> 00:18:14,629
properly but that's a longer term work

00:18:11,769 --> 00:18:17,440
because that's a longer term work what

00:18:14,629 --> 00:18:19,820
we essentially did with treble is this

00:18:17,440 --> 00:18:24,440
we have this formal interface between

00:18:19,820 --> 00:18:26,210
the components defined and we now due to

00:18:24,440 --> 00:18:29,179
the compatibility requirements that are

00:18:26,210 --> 00:18:32,929
in place with Android o we now require

00:18:29,179 --> 00:18:36,019
that every OEM that launches a device

00:18:32,929 --> 00:18:40,070
with Android o be able to run the

00:18:36,019 --> 00:18:43,460
unmodified AOSP system image that we

00:18:40,070 --> 00:18:47,379
actually generate for them on top of the

00:18:43,460 --> 00:18:50,360
BSP given to them by the silicon vendor

00:18:47,379 --> 00:18:52,429
this may sound a bit hand-waving but it

00:18:50,360 --> 00:18:54,200
is a major accomplishment in the

00:18:52,429 --> 00:18:57,379
ecosystem it has never been possible for

00:18:54,200 --> 00:18:59,899
that to happen and while that's not the

00:18:57,379 --> 00:19:03,139
same as being as an end product being

00:18:59,899 --> 00:19:07,580
being able to run on the BSP on the on

00:19:03,139 --> 00:19:12,799
the lower piece of this picture it is

00:19:07,580 --> 00:19:15,110
like 80% of it and for the remainder the

00:19:12,799 --> 00:19:18,470
fact that this is now requirement means

00:19:15,110 --> 00:19:20,269
that we create a disincentive for for

00:19:18,470 --> 00:19:24,889
for anybody working on an Android launch

00:19:20,269 --> 00:19:28,129
to diverge too much from a OSP and we

00:19:24,889 --> 00:19:30,950
hope to capture what is meaningful again

00:19:28,129 --> 00:19:33,230
to these two are partners and isn't

00:19:30,950 --> 00:19:34,490
value in this in proprietary by

00:19:33,230 --> 00:19:38,210
upstreaming it to AOSP

00:19:34,490 --> 00:19:39,590
I already talked about they talked about

00:19:38,210 --> 00:19:41,629
the compatibility requirements in the

00:19:39,590 --> 00:19:43,990
previous slide so I'll just skip to the

00:19:41,629 --> 00:19:43,990
next one

00:19:44,509 --> 00:19:52,399
this is an important one all of this

00:19:49,220 --> 00:19:54,769
work that we did for o we had to do

00:19:52,399 --> 00:19:57,769
within one release for a number of

00:19:54,769 --> 00:19:59,450
reasons one of them is it takes time for

00:19:57,769 --> 00:20:03,679
new Android releases to purr

00:19:59,450 --> 00:20:05,750
afraid to to trickle down to the rest of

00:20:03,679 --> 00:20:08,210
the ecosystem and so if we take too long

00:20:05,750 --> 00:20:10,309
if you take more than one release we

00:20:08,210 --> 00:20:14,179
won't start seeing the benefits of this

00:20:10,309 --> 00:20:14,539
to accrue to the ecosystem for years to

00:20:14,179 --> 00:20:16,190
come

00:20:14,539 --> 00:20:18,710
and then we run into the issue of

00:20:16,190 --> 00:20:20,149
everybody's attention span right we need

00:20:18,710 --> 00:20:20,570
to solve this and we need to solve it

00:20:20,149 --> 00:20:24,320
now

00:20:20,570 --> 00:20:26,000
in the fastest that we could tackle the

00:20:24,320 --> 00:20:28,639
biggest part of the problem is one

00:20:26,000 --> 00:20:31,570
release so that we try to do and I think

00:20:28,639 --> 00:20:31,570
that we pulled it off

00:20:32,380 --> 00:20:42,200
now the kernel now with the kernel you

00:20:36,769 --> 00:20:46,309
see a kind of fragmentation that sort of

00:20:42,200 --> 00:20:47,990
mirrors user space you all know how

00:20:46,309 --> 00:20:49,820
kernel development happens I'm not going

00:20:47,990 --> 00:20:54,820
to go through that but I will point out

00:20:49,820 --> 00:20:58,279
that all Android devices out there

00:20:54,820 --> 00:21:00,470
basically are on our base of the LTS

00:20:58,279 --> 00:21:02,120
kernel the long-term support one well

00:21:00,470 --> 00:21:05,240
the problem with LT s is it's only two

00:21:02,120 --> 00:21:08,149
eaters and so by the time the first

00:21:05,240 --> 00:21:12,260
devices on an SOC hit the market you

00:21:08,149 --> 00:21:14,980
have maybe a year if you're lucky of LTS

00:21:12,260 --> 00:21:18,139
support and if you're not it's over it's

00:21:14,980 --> 00:21:19,669
just how it is a silicon vendor has to

00:21:18,139 --> 00:21:22,669
commercial has to make a decision to

00:21:19,669 --> 00:21:24,470
commercialize a piece of silicon on a

00:21:22,669 --> 00:21:27,590
given kernel version and they cannot

00:21:24,470 --> 00:21:29,659
change that late in the product cycle

00:21:27,590 --> 00:21:32,690
and that's like one year before you see

00:21:29,659 --> 00:21:34,039
the first device or whatever some amount

00:21:32,690 --> 00:21:39,049
of time before you see the first devices

00:21:34,039 --> 00:21:43,100
ship the end result is that LTS cannot

00:21:39,049 --> 00:21:47,299
cover the devices life cycle and LTS is

00:21:43,100 --> 00:21:51,110
where all of the critical bug fixes from

00:21:47,299 --> 00:21:53,899
upstream trickle down and so with

00:21:51,110 --> 00:21:56,539
today's situation what Google wants to

00:21:53,899 --> 00:21:59,649
see with our partners is once the device

00:21:56,539 --> 00:22:01,850
is launched it gets upgraded four times

00:21:59,649 --> 00:22:05,950
to a new Android version that's

00:22:01,850 --> 00:22:08,990
basically the lifespan of a phone but

00:22:05,950 --> 00:22:12,110
you could get you get lucky if you get

00:22:08,990 --> 00:22:12,900
one of these so that's my hopefully

00:22:12,110 --> 00:22:17,040
juicy to

00:22:12,900 --> 00:22:19,620
bit here Greco Hartman has given me

00:22:17,040 --> 00:22:23,040
permission to announce this here

00:22:19,620 --> 00:22:29,040
he will start he will extend LTS to six

00:22:23,040 --> 00:22:31,500
years starting with Colonel 4.4 and of

00:22:29,040 --> 00:22:34,170
course a lot of this is underpinned by

00:22:31,500 --> 00:22:41,970
our joint work with manaro which is part

00:22:34,170 --> 00:22:45,780
of why I'm here a six-year LTS Colonel

00:22:41,970 --> 00:22:48,150
or we don't have a cute name for it

00:22:45,780 --> 00:22:55,260
Excel TS for extended or LTS for

00:22:48,150 --> 00:22:58,350
extended but six alts is really an

00:22:55,260 --> 00:23:00,960
amazing feat that we have to pull off if

00:22:58,350 --> 00:23:03,480
we hope for any of our devices to get

00:23:00,960 --> 00:23:09,780
all the security fixes all the bug fixes

00:23:03,480 --> 00:23:11,190
from upstream that are available so this

00:23:09,780 --> 00:23:13,020
is where the colonel is concerned the

00:23:11,190 --> 00:23:18,330
colonel slides are shorter because the

00:23:13,020 --> 00:23:20,040
colonel is always easier all right so

00:23:18,330 --> 00:23:23,730
I'll talk about quickly about my own

00:23:20,040 --> 00:23:28,380
time by the way I'll talk quickly about

00:23:23,730 --> 00:23:30,660
stats sort of stats and results I

00:23:28,380 --> 00:23:33,480
mentioned there are about 60 Android

00:23:30,660 --> 00:23:37,080
subsystems that we created formal

00:23:33,480 --> 00:23:39,840
interfaces for using this interface

00:23:37,080 --> 00:23:43,050
definition language that we call H ideal

00:23:39,840 --> 00:23:44,850
for how ideal and they're all converted

00:23:43,050 --> 00:23:47,610
to it some of these subsystems didn't

00:23:44,850 --> 00:23:52,770
even have a formal interface to speak of

00:23:47,610 --> 00:23:55,470
so we had to create that and that's now

00:23:52,770 --> 00:23:58,020
you know all of this information is by

00:23:55,470 --> 00:24:00,270
the way on AOSP we published all of our

00:23:58,020 --> 00:24:02,850
documentation for anybody who for any

00:24:00,270 --> 00:24:05,250
system integrators and I of course

00:24:02,850 --> 00:24:09,210
forgot to include a link here but I can

00:24:05,250 --> 00:24:16,770
it's up on MSP just google AOSP treble

00:24:09,210 --> 00:24:18,240
Oreo the work spanned about 300 authors

00:24:16,770 --> 00:24:23,000
and that's the ones that I can count

00:24:18,240 --> 00:24:25,350
within google about 3,000 files

00:24:23,000 --> 00:24:26,260
20,000 commits and about 1 million lines

00:24:25,350 --> 00:24:30,850
of code

00:24:26,260 --> 00:24:34,210
added or changed this is really within

00:24:30,850 --> 00:24:36,130
the span of like four four six months

00:24:34,210 --> 00:24:38,919
because you know like the way big

00:24:36,130 --> 00:24:40,030
companies work project gets approved and

00:24:38,919 --> 00:24:42,390
then you start twiddling your thumbs

00:24:40,030 --> 00:24:45,010
until you get the resources and then

00:24:42,390 --> 00:24:47,290
everything starts comes crashing down

00:24:45,010 --> 00:24:49,299
towards the tail end of the schedule so

00:24:47,290 --> 00:24:52,809
this is really quite accomplishments

00:24:49,299 --> 00:24:55,059
when you take that into account with

00:24:52,809 --> 00:24:57,490
respect to our partners we work directly

00:24:55,059 --> 00:25:01,450
with Qualcomm mediatek and Samsung it

00:24:57,490 --> 00:25:05,380
also Huawei Motorola Sony and LG to get

00:25:01,450 --> 00:25:07,570
them going on Oreo we have on-site teams

00:25:05,380 --> 00:25:11,110
in San Diego Taipei and Seoul to help

00:25:07,570 --> 00:25:12,940
with this engagement and a number of

00:25:11,110 --> 00:25:14,980
forums to just keep repeating the

00:25:12,940 --> 00:25:18,330
message and make sure that everybody is

00:25:14,980 --> 00:25:20,890
on the same side in terms of launches

00:25:18,330 --> 00:25:24,549
you probably know that Sony already

00:25:20,890 --> 00:25:26,470
announced the Xperia which is an Oreo

00:25:24,549 --> 00:25:29,020
and fully tribal compliant and the

00:25:26,470 --> 00:25:31,360
flagships from Huawei and Samsung will

00:25:29,020 --> 00:25:36,130
also be compliant with treble when they

00:25:31,360 --> 00:25:38,770
release enough the form our major

00:25:36,130 --> 00:25:40,960
partners of course with Qualcomm we've

00:25:38,770 --> 00:25:45,400
worked on three associations to convert

00:25:40,960 --> 00:25:48,510
them to treble and you know those will

00:25:45,400 --> 00:25:52,330
underpin a number of launches one hopes

00:25:48,510 --> 00:25:53,770
not my place to talk about them did it

00:25:52,330 --> 00:25:56,290
with media taking high silicon high

00:25:53,770 --> 00:26:01,000
silicon and Exynos ICS are obviously

00:25:56,290 --> 00:26:04,900
tied with Huawei in Samsung as far as

00:26:01,000 --> 00:26:07,480
next steps go we want to build on the

00:26:04,900 --> 00:26:10,240
six-year LTS thing by the way this says

00:26:07,480 --> 00:26:12,809
4.9 it should have said 4.4 because

00:26:10,240 --> 00:26:14,950
that's gonna be the first six years

00:26:12,809 --> 00:26:18,130
just pretend you're seeing for that

00:26:14,950 --> 00:26:21,760
further we want to build on the six year

00:26:18,130 --> 00:26:23,500
LTS thing with something that I call

00:26:21,760 --> 00:26:27,429
kernel unification for lack of a better

00:26:23,500 --> 00:26:29,650
word it's very hand wavy we are talking

00:26:27,429 --> 00:26:32,470
to all of our partners discussions are

00:26:29,650 --> 00:26:35,020
ongoing but the general idea is that as

00:26:32,470 --> 00:26:38,809
with user space so with the kernel you

00:26:35,020 --> 00:26:41,690
want to have the kernel on any Android

00:26:38,809 --> 00:26:45,289
device that launches to be downstream of

00:26:41,690 --> 00:26:48,769
6er LTS but in between it you want it to

00:26:45,289 --> 00:26:54,710
also be downstream IV of hopefully a

00:26:48,769 --> 00:26:56,659
single SOC Colonel not 15 Forks of it

00:26:54,710 --> 00:26:58,490
around the world which is itself

00:26:56,659 --> 00:27:00,889
downstream of the Android common kernel

00:26:58,490 --> 00:27:03,799
which is itself downstream of 6 LT yes

00:27:00,889 --> 00:27:07,999
in any back ports that we deem necessary

00:27:03,799 --> 00:27:11,480
for for for Google work this is this is

00:27:07,999 --> 00:27:14,210
where our membership of the narrow and

00:27:11,480 --> 00:27:17,509
our work with dinero will come into

00:27:14,210 --> 00:27:20,570
focus truly it's six or LTS and this

00:27:17,509 --> 00:27:22,159
kernel unification effort which again

00:27:20,570 --> 00:27:24,200
this is next steps

00:27:22,159 --> 00:27:27,789
nothing's formalized nothing was decided

00:27:24,200 --> 00:27:27,789
but this is kind of the goal

00:27:29,499 --> 00:27:35,389
and there's more to do beyond the kernel

00:27:31,909 --> 00:27:37,999
of course there's the ongoing work with

00:27:35,389 --> 00:27:41,509
our silicon partners that just never

00:27:37,999 --> 00:27:44,389
ends the kernel unification thing better

00:27:41,509 --> 00:27:45,950
test coverage that's important VTS had

00:27:44,389 --> 00:27:50,539
six months to come into existence

00:27:45,950 --> 00:27:54,019
compared to cts is ten years of life so

00:27:50,539 --> 00:27:56,419
VTS is has a suite of kernel test suite

00:27:54,019 --> 00:27:58,159
of hal tests but that's two orders of

00:27:56,419 --> 00:28:00,470
magnitude less than cts we need to keep

00:27:58,159 --> 00:28:06,049
expanding coverage both internally and

00:28:00,470 --> 00:28:09,740
with our partners and finally but not

00:28:06,049 --> 00:28:12,769
finally at all we just Android is Linux

00:28:09,740 --> 00:28:14,419
in Linux is armed and you want to play

00:28:12,769 --> 00:28:18,529
with an arrow to bring the ecosystem

00:28:14,419 --> 00:28:21,740
together so that's it for me thank you

00:28:18,529 --> 00:28:22,490
for listening if you have any questions

00:28:21,740 --> 00:28:25,039
I'll be around

00:28:22,490 --> 00:28:27,440
i we happen to you I just don't know if

00:28:25,039 --> 00:28:28,879
that's the format that you want anybody

00:28:27,440 --> 00:28:30,230
have a question one or two questions I

00:28:28,879 --> 00:28:32,480
mean this stuff is very relevant to a

00:28:30,230 --> 00:28:36,710
lot of people in this room some pretty

00:28:32,480 --> 00:28:38,090
interesting no one not quite the data

00:28:36,710 --> 00:28:42,440
center keynote you were probably hoping

00:28:38,090 --> 00:28:44,140
for right Google has data centers too

00:28:42,440 --> 00:28:52,270
they're just

00:28:44,140 --> 00:28:53,470
I don't work on them no questions so are

00:28:52,270 --> 00:28:56,170
you gonna extend it for your data

00:28:53,470 --> 00:28:58,690
centers why wouldn't you want a Excel TS

00:28:56,170 --> 00:28:59,350
for data centers as well I'm sorry is in

00:28:58,690 --> 00:29:00,910
quick cutter

00:28:59,350 --> 00:29:04,090
why wouldn't you extend it for data

00:29:00,910 --> 00:29:07,179
centers Oh LTS would this be something

00:29:04,090 --> 00:29:10,690
that been seriously with Google support

00:29:07,179 --> 00:29:14,280
X LTS for data center Oh for the day

00:29:10,690 --> 00:29:17,650
well I mean LTS is LTS a data center is

00:29:14,280 --> 00:29:20,140
we are going to make let me talk a

00:29:17,650 --> 00:29:22,299
little bit more about sexualities Greg

00:29:20,140 --> 00:29:25,630
Hartmann the LTS maintainer is

00:29:22,299 --> 00:29:30,780
committing to do that not because of

00:29:25,630 --> 00:29:30,780
Google or Android or treble but because

00:29:31,140 --> 00:29:39,700
everything is on LTS it's not on

00:29:33,370 --> 00:29:41,440
upstream and six hell he'll announce

00:29:39,700 --> 00:29:45,220
this at kernel.org following this

00:29:41,440 --> 00:29:47,890
keynote so it's six-year-old TS it's

00:29:45,220 --> 00:29:53,140
there for the taking for anybody can see

00:29:47,890 --> 00:29:53,740
he won't de-emphasize x86 overarm or

00:29:53,140 --> 00:29:58,360
anything like that

00:29:53,740 --> 00:30:02,169
it's the kernel so but I'm happy because

00:29:58,360 --> 00:30:04,000
Android stands to benefit from that what

00:30:02,169 --> 00:30:05,980
you're saying is six years you get six

00:30:04,000 --> 00:30:07,360
years LTS is for everything for

00:30:05,980 --> 00:30:09,040
everybody not just for Android Android

00:30:07,360 --> 00:30:11,070
is gonna take advantage of it but

00:30:09,040 --> 00:30:13,929
certainly other areas and other

00:30:11,070 --> 00:30:15,160
applications so the kernel can also all

00:30:13,929 --> 00:30:16,900
take advantage of it just like they take

00:30:15,160 --> 00:30:19,780
advantage of LT yesterday you could

00:30:16,900 --> 00:30:25,169
imagine that IOT devices would benefit

00:30:19,780 --> 00:30:27,250
even more from that perhaps look yeah

00:30:25,169 --> 00:30:28,480
thank you so much element for coming

00:30:27,250 --> 00:30:30,309
here today and sharing that with us we

00:30:28,480 --> 00:30:30,930
really appreciate it thank you and thank

00:30:30,309 --> 00:30:38,990
you for listening

00:30:30,930 --> 00:30:42,330
[Applause]

00:30:38,990 --> 00:30:44,310
okay so today's arm datacentre day as we

00:30:42,330 --> 00:30:47,580
talked about earlier and arm data center

00:30:44,310 --> 00:30:50,210
is all about innovation right in the in

00:30:47,580 --> 00:30:50,210

YouTube URL: https://www.youtube.com/watch?v=Ksegw928gUM


