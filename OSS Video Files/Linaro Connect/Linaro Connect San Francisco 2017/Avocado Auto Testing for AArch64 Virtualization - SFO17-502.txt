Title: Avocado Auto Testing for AArch64 Virtualization - SFO17-502
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-502
Session Name: Avocado Auto Testing for AArch64 Virtualization - SFO17-502
Speaker: Wei Huang
Track: LEG


★ Session Summary ★
Writing test cases for virtualization is always a daunting task because there are numerous possible combinations (e.g. guest OS types, emulated devices) in virtualization configuration. This talk presents an auto testing framework, Avocado, which provides a powerful yet flexible framework to users who are writing test cases on AArch64. We demonstrate how to write and debug test cases with real-world examples. This talk also covers our experience of integrating Avocado with Jenkins CI tools on Red Hat's internal testing infrastructure.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-502/
Presentation: 
Video: https://www.youtube.com/watch?v=rCQkw5_PBF8
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:13,720 --> 00:00:16,720
okay

00:00:59,470 --> 00:01:11,270
x86 existing forearm sight while with

00:01:08,590 --> 00:01:15,560
different issues are coming up so

00:01:11,270 --> 00:01:21,469
eventually we are use decided to use

00:01:15,560 --> 00:01:24,710
avocado ovals PVC and oven has been so

00:01:21,469 --> 00:01:27,469
they have to keep some giving a

00:01:24,710 --> 00:01:31,630
presentation about the avocado was the

00:01:27,469 --> 00:01:31,630
software framework and what

00:01:32,370 --> 00:02:02,860
and so all the testing and we will see

00:02:00,940 --> 00:02:05,350
thee as a transition from the

00:02:02,860 --> 00:02:09,459
traditional software development or to

00:02:05,350 --> 00:02:12,250
be a continuous integration inside the

00:02:09,459 --> 00:02:16,020
software release will be composed in a

00:02:12,250 --> 00:02:19,120
pretty high frequency basically every

00:02:16,020 --> 00:02:21,760
several days or maybe a single week

00:02:19,120 --> 00:02:24,550
there would be a software composed and

00:02:21,760 --> 00:02:28,450
the reasons we have that is too salty

00:02:24,550 --> 00:02:31,750
additionally on the software development

00:02:28,450 --> 00:02:32,709
cycle because he used to be in a

00:02:31,750 --> 00:02:35,080
traditional way

00:02:32,709 --> 00:02:37,930
you have via software development you

00:02:35,080 --> 00:02:40,060
finish it and after that you have

00:02:37,930 --> 00:02:43,000
actually become it has all the features

00:02:40,060 --> 00:02:45,670
and if they found any issue it would

00:02:43,000 --> 00:02:47,680
come back to the development team and

00:02:45,670 --> 00:02:51,370
they would try to fix it there have been

00:02:47,680 --> 00:02:53,769
a lot of issues with this approach it

00:02:51,370 --> 00:02:57,310
couldn't call a problem on time and

00:02:53,769 --> 00:03:01,510
possibly also wasted cycles and using

00:02:57,310 --> 00:03:03,459
this one this CI basically it kind of

00:03:01,510 --> 00:03:06,060
goes through this I hope every stick for

00:03:03,459 --> 00:03:10,860
every single patches or if a set of

00:03:06,060 --> 00:03:15,030
patch step right and for any single view

00:03:10,860 --> 00:03:20,990
the cie component Bionic we are using

00:03:15,030 --> 00:03:23,300
Jenkins poly our CIA equation

00:03:20,990 --> 00:03:26,110
but soon as is the software composed of

00:03:23,300 --> 00:03:29,150
highly available Virginians will be

00:03:26,110 --> 00:03:33,080
notifying Africa and then tickets will

00:03:29,150 --> 00:03:35,630
go to our cell phone where Kickstarter

00:03:33,080 --> 00:03:42,440
provision the main installation and when

00:03:35,630 --> 00:03:45,740
to order defined by the rqe so this give

00:03:42,440 --> 00:03:48,080
us a lot of benefits if they give get a

00:03:45,740 --> 00:03:49,010
result back to a development team of

00:03:48,080 --> 00:03:52,970
very fast

00:03:49,010 --> 00:03:56,240
we also be able to get a software

00:03:52,970 --> 00:03:59,300
release in the short time in the end of

00:03:56,240 --> 00:04:02,660
day when the development cycle is

00:03:59,300 --> 00:04:06,020
finished we kind of confident that this

00:04:02,660 --> 00:04:08,330
software has been fully tested so and

00:04:06,020 --> 00:04:11,120
then it was some staging stage and after

00:04:08,330 --> 00:04:14,540
that software could be released so this

00:04:11,120 --> 00:04:17,660
works pretty well now the burden of the

00:04:14,540 --> 00:04:22,820
key requirement of this approach is for

00:04:17,660 --> 00:04:25,520
a year is about me ominous so we need we

00:04:22,820 --> 00:04:34,160
need to be able to be a good software

00:04:25,520 --> 00:04:38,240
step very pivotal issues not just in

00:04:34,160 --> 00:04:41,270
there is no way of the 3rd St like we

00:04:38,240 --> 00:04:43,490
don't over testing their different kind

00:04:41,270 --> 00:04:47,090
of requirements you will deflect a lot

00:04:43,490 --> 00:04:48,980
for example and also the next

00:04:47,090 --> 00:04:51,930
configuration could be a tremendously

00:04:48,980 --> 00:04:55,800
large number we know different kind of

00:04:51,930 --> 00:04:57,860
pies are wearable Santos or equal to low

00:04:55,800 --> 00:05:01,169
Susie there's all kind of lesbian

00:04:57,860 --> 00:05:03,330
configurations and also in South Korea

00:05:01,169 --> 00:05:14,180
you know different hardware components

00:05:03,330 --> 00:05:17,870
you want to test with and dignity so um

00:05:14,180 --> 00:05:20,910
this has become a increasingly

00:05:17,870 --> 00:05:24,960
challenging issue for us we try

00:05:20,910 --> 00:05:27,330
different way and then avocado has been

00:05:24,960 --> 00:05:33,810
coming to play to help this problem and

00:05:27,330 --> 00:05:35,699
for Leon testing our another difficulty

00:05:33,810 --> 00:05:39,419
we have found is about a lot of test

00:05:35,699 --> 00:06:17,280
cases or test script he used to work on

00:05:39,419 --> 00:06:20,099
x86 so but this is and the software is

00:06:17,280 --> 00:06:25,919
actually is kind of layer away

00:06:20,099 --> 00:06:30,449
so basic software component supporting

00:06:25,919 --> 00:06:32,849
the casting of the recipe and then on

00:06:30,449 --> 00:06:35,729
top of that you can define different

00:06:32,849 --> 00:06:40,169
kind of pockets and in this space for

00:06:35,729 --> 00:06:43,740
authorization they saw Halloweeny and

00:06:40,169 --> 00:06:46,919
this one is provides of all kind of

00:06:43,740 --> 00:06:48,360
function calls for the test phase to

00:06:46,919 --> 00:06:52,080
launch area

00:06:48,360 --> 00:06:57,419
the interior output of Gideon

00:06:52,080 --> 00:07:00,599
configurations and then dispatched test

00:06:57,419 --> 00:07:04,379
case to different software component on

00:07:00,599 --> 00:07:06,629
the target community of people at the

00:07:04,379 --> 00:07:08,810
other day of all the tests without will

00:07:06,629 --> 00:07:12,810
be collected into a centralized location

00:07:08,810 --> 00:07:15,389
so the development team could use those

00:07:12,810 --> 00:07:19,830
information to analyze of the other

00:07:15,389 --> 00:07:23,069
power so I want to emphasize that

00:07:19,830 --> 00:07:28,830
because it have been a won't find you

00:07:23,069 --> 00:07:31,430
are moving some of the other testing

00:07:28,830 --> 00:07:34,020
framework so it does provide a lot of

00:07:31,430 --> 00:07:36,330
configurations for different VMs and

00:07:34,020 --> 00:07:38,639
different test files so you can look at

00:07:36,330 --> 00:07:42,569
the source code if you want and there's

00:07:38,639 --> 00:07:45,060
all kinds of pumpkins that point I was

00:07:42,569 --> 00:07:49,819
doing some of them so this give us a lot

00:07:45,060 --> 00:07:49,819
of advantage of using this test report

00:07:50,479 --> 00:07:57,060
for our cover one we're on a a 16-4 as I

00:07:55,409 --> 00:08:01,500
say in the beginning you have been

00:07:57,060 --> 00:08:07,050
issues and recently we start to fix the

00:08:01,500 --> 00:08:09,479
problems so it will stop in this soup

00:08:07,050 --> 00:08:11,940
for here you know they are 64

00:08:09,479 --> 00:08:16,710
configuration in qemu and it works

00:08:11,940 --> 00:08:21,960
pretty well right now and for example he

00:08:16,710 --> 00:08:27,479
used to wake you but when our ship in

00:08:21,960 --> 00:08:30,110
the world is di and avocado they fix a

00:08:27,479 --> 00:08:35,370
list of all those cases

00:08:30,110 --> 00:08:36,250
anyway different software support and

00:08:35,370 --> 00:08:39,699
also case

00:08:36,250 --> 00:08:43,569
nations have been added to this penguin

00:08:39,699 --> 00:08:47,769
and also almost a lot of parking or test

00:08:43,569 --> 00:08:53,439
cases could be used on the arm server

00:08:47,769 --> 00:08:57,759
directly so this and to lock the Apollo

00:08:53,439 --> 00:09:00,839
on a r16 publishing actually is easy but

00:08:57,759 --> 00:09:05,620
kind of show you some examples here and

00:09:00,839 --> 00:09:07,389
so the development team fought in a

00:09:05,620 --> 00:09:11,560
stream of color they provide a lot of

00:09:07,389 --> 00:09:13,800
useful or not documentation so in this

00:09:11,560 --> 00:09:17,680
case the first thing to set up the

00:09:13,800 --> 00:09:22,120
mikado basically what you need to do is

00:09:17,680 --> 00:09:24,069
develop a repo on to the offspring with

00:09:22,120 --> 00:09:28,389
photography here I'll show you some

00:09:24,069 --> 00:09:33,160
example about running and only I will

00:09:28,389 --> 00:09:35,470
produc and after they're released all

00:09:33,160 --> 00:09:37,810
halloweenie and do some post queries

00:09:35,470 --> 00:09:40,120
those test cases for both beauty and

00:09:37,810 --> 00:09:45,420
even deeper and after they are done so

00:09:40,120 --> 00:09:48,519
this I will convey you guys maybe

00:09:45,420 --> 00:09:50,829
installation for development or

00:09:48,519 --> 00:09:53,379
something but if you want to try these

00:09:50,829 --> 00:10:05,920
things they also I think they also

00:09:53,379 --> 00:10:09,370
support good beginner and after our car

00:10:05,920 --> 00:10:15,189
is being set up the real installation is

00:10:09,370 --> 00:10:16,980
also being safe visually we have PR our

00:10:15,189 --> 00:10:21,180
support even time of

00:10:16,980 --> 00:10:26,070
installation so either you can appoint

00:10:21,180 --> 00:10:29,899
the URL to your compose in this case is

00:10:26,070 --> 00:10:34,860
well seven point three and composer

00:10:29,899 --> 00:10:37,170
directory from h-e-b and opted for this

00:10:34,860 --> 00:10:40,680
first page you basically run through it

00:10:37,170 --> 00:10:43,620
and iwere gratia a binary from the repo

00:10:40,680 --> 00:10:47,040
and then start to do the kick start

00:10:43,620 --> 00:10:50,160
installation automatically if you prefer

00:10:47,040 --> 00:10:52,829
or is no installation also being

00:10:50,160 --> 00:10:57,230
supported pretty well and even

00:10:52,829 --> 00:10:57,230
historical type of guess means on the

00:11:02,040 --> 00:11:10,890
so what important features required for

00:11:07,980 --> 00:11:15,690
all of the testing is about logging so

00:11:10,890 --> 00:11:18,720
the pretty much collect all the form

00:11:15,690 --> 00:11:22,260
anything you can think of including

00:11:18,720 --> 00:11:26,100
system configuration or medium for

00:11:22,260 --> 00:11:28,650
example x86 or the CPU ID and all in a

00:11:26,100 --> 00:11:30,900
binary information it what we collected

00:11:28,650 --> 00:11:33,240
so here this shows an example during the

00:11:30,900 --> 00:11:36,600
installation you can check HERE

00:11:33,240 --> 00:11:39,270
installations potatoes and if you want

00:11:36,600 --> 00:11:42,570
they also say that the interior output

00:11:39,270 --> 00:11:46,010
amazing so even straight for example in

00:11:42,570 --> 00:11:50,100
this case this one fills to your VM

00:11:46,010 --> 00:11:54,180
installation program and so those

00:11:50,100 --> 00:11:58,020
features I found out very useful for

00:11:54,180 --> 00:12:00,780
debugging and testing because as soon as

00:11:58,020 --> 00:12:03,620
a distributor goes to the log file would

00:12:00,780 --> 00:12:03,620
be called oven

00:12:06,160 --> 00:12:15,820
Oh so as a reason that there were tons

00:12:11,080 --> 00:12:17,800
of the test cases pretty fine if it's

00:12:15,820 --> 00:12:20,650
not originally wasn't employed they are

00:12:17,800 --> 00:12:25,690
six people but a lot of them could be

00:12:20,650 --> 00:12:30,640
plugging into a virtualization fairly

00:12:25,690 --> 00:12:34,000
quickly so if you look at the TV QEMU

00:12:30,640 --> 00:12:34,540
they are about 160 to give you test

00:12:34,000 --> 00:12:38,410
cases

00:12:34,540 --> 00:12:40,750
is this something here are for example

00:12:38,410 --> 00:12:44,140
if you do a snapshot has been here if

00:12:40,750 --> 00:12:47,490
I'm testing a VNC and we have stopped

00:12:44,140 --> 00:12:49,840
those are fairly well defined isolate

00:12:47,490 --> 00:13:04,810
isolated cases

00:12:49,840 --> 00:13:07,810
so for each test cases in this case I

00:13:04,810 --> 00:13:12,760
show you a one example is about testing

00:13:07,810 --> 00:13:14,950
the PSC my stem variant so on the right

00:13:12,760 --> 00:13:17,980
side is about here next week

00:13:14,950 --> 00:13:23,410
so each test suite for each single test

00:13:17,980 --> 00:13:26,260
defines an API in avocado and what does

00:13:23,410 --> 00:13:31,240
physical defines how that has will be

00:13:26,260 --> 00:13:33,940
done so in this case I don't know but

00:13:31,240 --> 00:13:37,540
what it does is to check the time stamp

00:13:33,940 --> 00:13:40,090
for number time on most hosts and spm

00:13:37,540 --> 00:13:43,540
and check the variance and comparison

00:13:40,090 --> 00:13:47,650
and everything everything everything

00:13:43,540 --> 00:13:49,240
matters then this test paused and 42

00:13:47,650 --> 00:13:52,800
single desert optionally

00:13:49,240 --> 00:13:52,800
there's a config file is specified

00:13:53,350 --> 00:15:57,829
over there over there so this is so we

00:15:21,139 --> 00:16:00,139
are over remember for the testing one

00:15:57,829 --> 00:16:02,420
important thing is about the earth is

00:16:00,139 --> 00:16:05,089
big matrix of T against being

00:16:02,420 --> 00:16:09,620
configuration and welcome a couple

00:16:05,089 --> 00:16:14,329
provides is all for Yama based of mati

00:16:09,620 --> 00:16:17,149
plaster in this example so take for

00:16:14,329 --> 00:16:22,220
example I wanna test our guest VM with

00:16:17,149 --> 00:16:24,199
one psycho CPU to be CPU for dislocation

00:16:22,220 --> 00:16:28,459
and for memory I wanted to have a

00:16:24,199 --> 00:16:31,100
bouquet of okay test pasty and the

00:16:28,459 --> 00:16:34,430
four-year this format could be to talk

00:16:31,100 --> 00:16:37,160
about to Oh baby are my five but you

00:16:34,430 --> 00:16:39,680
want a Mikado to create a test

00:16:37,160 --> 00:16:44,000
configuration for all abundance that you

00:16:39,680 --> 00:16:45,170
can find so mojado will go inside there

00:16:44,000 --> 00:16:48,799
and fine

00:16:45,170 --> 00:16:52,220
varies for each singer of them it was

00:16:48,799 --> 00:16:55,759
too near like a metric multiplication

00:16:52,220 --> 00:16:59,329
type of thing and then create yourself a

00:16:55,759 --> 00:17:01,669
dictionary the dictionary pitched entry

00:16:59,329 --> 00:17:04,549
in the dictionary is the what guess p.m.

00:17:01,669 --> 00:17:08,539
configuration in this case now we have

00:17:04,549 --> 00:17:12,350
12 configurations because this is a true

00:17:08,539 --> 00:17:16,600
to as we saw together so this is just

00:17:12,350 --> 00:17:21,380
one simple examples they are powerful

00:17:16,600 --> 00:17:23,959
you can specify different filters inside

00:17:21,380 --> 00:17:29,539
your testicle big file

00:17:23,959 --> 00:17:42,620
so any other day we found this is very

00:17:29,539 --> 00:17:44,929
easy way to okay so as I say for the

00:17:42,620 --> 00:17:47,779
test different test cases there are a

00:17:44,929 --> 00:17:52,210
lot of three defining test cases you can

00:17:47,779 --> 00:17:55,970
why and for QA team they may are white

00:17:52,210 --> 00:17:57,350
faces themself of there may be just used

00:17:55,970 --> 00:18:01,340
a existing one

00:17:57,350 --> 00:18:05,360
so here one example is Ted we want to be

00:18:01,340 --> 00:18:09,610
able to one a set up we define test

00:18:05,360 --> 00:18:13,279
cases so what it does is basically it

00:18:09,610 --> 00:18:18,440
goes to all the singles category one by

00:18:13,279 --> 00:18:20,960
one and in each single category a kind

00:18:18,440 --> 00:18:25,120
of a large different sub tests and those

00:18:20,960 --> 00:18:27,919
are sub tests could be defined in the

00:18:25,120 --> 00:18:30,480
avocado will be fine and deuterium you

00:18:27,919 --> 00:18:32,580
so in the first example

00:18:30,480 --> 00:18:36,780
you want to do is toss they should move

00:18:32,580 --> 00:18:39,360
all your VM and what it does is a VM

00:18:36,780 --> 00:18:42,870
installation and try to shut down the VM

00:18:39,360 --> 00:18:46,230
and into a read update service best

00:18:42,870 --> 00:18:48,990
based example and then after that you

00:18:46,230 --> 00:18:51,960
can do some basic testing like a CVS

00:18:48,990 --> 00:18:54,810
test detriment has things under each

00:18:51,960 --> 00:18:58,050
category for example like the storage as

00:18:54,810 --> 00:18:59,850
you may want to create for Methodist if

00:18:58,050 --> 00:19:04,470
we are the distance see how the

00:18:59,850 --> 00:19:06,900
operating system testing and the other

00:19:04,470 --> 00:19:10,050
day to a post check if everything is

00:19:06,900 --> 00:19:12,870
white then you grab the result get a lot

00:19:10,050 --> 00:19:17,280
out and say to somewhere in the database

00:19:12,870 --> 00:19:21,780
and for the QA team or maybe for the

00:19:17,280 --> 00:19:24,830
developers to share so this is just one

00:19:21,780 --> 00:19:30,540
kind of pretty high-level examples

00:19:24,830 --> 00:19:33,690
showing so yeah so this is a little bit

00:19:30,540 --> 00:19:36,300
of detail about the test config file and

00:19:33,690 --> 00:19:39,480
looks like you define all these filters

00:19:36,300 --> 00:19:43,590
of variables and those variables some of

00:19:39,480 --> 00:19:47,130
them are being used by avocado so like a

00:19:43,590 --> 00:19:49,350
username a new username and password

00:19:47,130 --> 00:19:52,590
so when avocado is trying to log into

00:19:49,350 --> 00:19:55,650
the VM avoiding trust information and

00:19:52,590 --> 00:19:58,170
here for example you can do some filter

00:19:55,650 --> 00:20:02,960
about saying okay in this test I don't

00:19:58,170 --> 00:20:07,410
want to see any x86 or PVC we just use

00:20:02,960 --> 00:20:12,030
any similar generic test or maybe they

00:20:07,410 --> 00:20:15,180
are 64 words so you can tell her how all

00:20:12,030 --> 00:20:17,760
a lot of tests are based on those

00:20:15,180 --> 00:20:19,680
filters and for each signal variance

00:20:17,760 --> 00:20:22,659
will be fine for conversations you want

00:20:19,680 --> 00:20:25,869
to see I just show you some examples

00:20:22,659 --> 00:20:28,960
is salute defined here and he will go to

00:20:25,869 --> 00:20:32,499
be single one of them to create a custom

00:20:28,960 --> 00:20:40,929
ethics and one the lunch the communique

00:20:32,499 --> 00:20:46,149
diem to test this p.m. so in my past

00:20:40,929 --> 00:20:48,580
mystics they are above 50 by nation it

00:20:46,149 --> 00:20:49,450
wants to every single one of them and at

00:20:48,580 --> 00:20:52,470
the end of day

00:20:49,450 --> 00:20:59,309
those two result will be collected to

00:20:52,470 --> 00:21:04,899
centralized location so this is another

00:20:59,309 --> 00:21:10,840
result we collected in two days that's

00:21:04,899 --> 00:21:13,599
over so for each single one to see the

00:21:10,840 --> 00:21:17,710
second column pathology of Staters

00:21:13,599 --> 00:21:21,759
in the last one actually is or Estonia

00:21:17,710 --> 00:21:23,679
is there we stopped at all fire so if

00:21:21,759 --> 00:21:28,509
there is any failure you can go inside

00:21:23,679 --> 00:21:32,139
there on a log file will be collected

00:21:28,509 --> 00:21:38,649
over there including the system log or

00:21:32,139 --> 00:21:40,929
maybe one issue also the SPM stars here

00:21:38,649 --> 00:21:45,039
out there so they are all community

00:21:40,929 --> 00:21:46,779
formation to be to be analyzed over

00:21:45,039 --> 00:21:50,429
there if you want

00:21:46,779 --> 00:21:53,139
so this is the sum of each sample yeah

00:21:50,429 --> 00:21:54,759
yeah you can also one thing interesting

00:21:53,139 --> 00:21:58,250
you can also the killer screen down

00:21:54,759 --> 00:22:01,640
ladies so you get an x-ray

00:21:58,250 --> 00:22:03,470
those purpose in Dumpty which single

00:22:01,640 --> 00:22:06,230
frame but apparently even see where the

00:22:03,470 --> 00:22:08,500
post will happen what happens inside

00:22:06,230 --> 00:22:18,799
nothing like thank you to the boys

00:22:08,500 --> 00:22:21,409
available yes I know so the equation

00:22:18,799 --> 00:22:24,169
with the Jenkins actually is very

00:22:21,409 --> 00:22:28,100
straightforward tickets that we do have

00:22:24,169 --> 00:22:30,620
a CR 330 point 14 days business this

00:22:28,100 --> 00:22:35,210
business case examples

00:22:30,620 --> 00:22:38,600
so those has each single case will be

00:22:35,210 --> 00:22:41,179
trigger with his treatment will be

00:22:38,600 --> 00:22:43,490
treated in the event happened so is a

00:22:41,179 --> 00:22:46,220
new compose on the civilian use I or

00:22:43,490 --> 00:22:51,020
maybe nipple site or covered up the

00:22:46,220 --> 00:22:54,530
trickiest working cause Tia best for

00:22:51,020 --> 00:22:58,929
everything and after we finished we came

00:22:54,530 --> 00:23:05,270
to a server and then we saw their images

00:22:58,929 --> 00:23:07,419
so Apollo is speedy of pretty awful to

00:23:05,270 --> 00:23:07,419
do

00:23:16,749 --> 00:25:26,799
okay so this guy's just so this is the

00:25:27,909 --> 00:25:34,250
resistive force performance maybe we can

00:25:31,460 --> 00:25:37,539
exchange some information of the

00:25:34,250 --> 00:25:37,539
connection disconnect

00:25:39,179 --> 00:25:46,440
so you use this to test your internal

00:25:41,849 --> 00:25:49,619
releases brother Xie do you track the in

00:25:46,440 --> 00:25:51,359
upstream projects at all OCR system say

00:25:49,619 --> 00:25:55,830
for example in a sterile and quietly

00:25:51,359 --> 00:26:02,039
master so a whole team we actually we do

00:25:55,830 --> 00:26:05,999
track the QEMU and for the young we did

00:26:02,039 --> 00:26:09,389
kick off the RPM new testing the CIT did

00:26:05,999 --> 00:26:12,419
they create support for there's a new

00:26:09,389 --> 00:26:16,200
version on the Julian you are they

00:26:12,419 --> 00:26:18,179
working started out and now the results

00:26:16,200 --> 00:26:22,559
of that available publicly to the

00:26:18,179 --> 00:26:27,149
community no no right now at this moment

00:26:22,559 --> 00:26:30,479
is all interchanges servers and we is is

00:26:27,149 --> 00:26:33,570
internal server sorry about that I I am

00:26:30,479 --> 00:26:36,089
interested in getting home made public

00:26:33,570 --> 00:26:38,639
if you can because the the community

00:26:36,089 --> 00:26:41,070
testing tends to be involved run this

00:26:38,639 --> 00:26:42,780
test a number different companies try

00:26:41,070 --> 00:26:45,370
related together

00:26:42,780 --> 00:26:46,960
because it's easier to have someone

00:26:45,370 --> 00:26:47,410
who's got servers and the set up already

00:26:46,960 --> 00:26:49,720
running

00:26:47,410 --> 00:26:54,750
don't try and replicate something that

00:26:49,720 --> 00:26:54,750
was doing on and by the box yeah

00:26:59,330 --> 00:27:03,520
any any other question

00:27:03,890 --> 00:27:09,710
yeah so okay so that's it and yeah you

00:27:07,940 --> 00:27:13,299
can talk to me after this meeting if

00:27:09,710 --> 00:27:17,360
there's anything you want to know and so

00:27:13,299 --> 00:27:19,970
we can try to help all about the issues

00:27:17,360 --> 00:27:22,520
and hopefully I will see you guys on the

00:27:19,970 --> 00:27:25,960
github somewhere to help with this

00:27:22,520 --> 00:27:25,960
project thank you

00:27:29,320 --> 00:27:34,290

YouTube URL: https://www.youtube.com/watch?v=rCQkw5_PBF8


