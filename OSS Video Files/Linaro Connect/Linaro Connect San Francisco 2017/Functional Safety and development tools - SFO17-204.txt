Title: Functional Safety and development tools - SFO17-204
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-204
Session Name: Functional Safety and development tools - SFO17-204
Speaker: Peter Smith 
Track: Toolchain


★ Session Summary ★
In areas such as automotive where faulty software could lead to a risk to human safety, software development is often covered by functional safety standards such as ISO 26262.
 
 The Development tools used to produce software are themselves complex pieces of software that are far from bug free. In the worst case a development tool can silently inject a fault into the output of its customer's software or give false assurances by failing to detect a diagnoseable error in the input. The functional safety standards used in these markets require the developer's tool choice and specific usage of it to be justified against a standard risk assessment schema, a process known as 'qualification'.
 
 In this presentation I will present:
 - Introduction to functional safety concepts
 - How these are applied to development tools
 - ARM's experience in producing the ARM Compiler Qualification Kit and how we adapted it to cover components derived from open source.
 
 The content assumes no prior knowledge of functional safety, the technical focus is on development process.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-204/
Presentation: https://www.slideshare.net/linaroorg/functional-safety-and-development-tools-sfo17204
Video: 
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:13,740 --> 00:00:19,260
okay hello everyone my name is Sir Peter

00:00:16,710 --> 00:00:21,090
Smith and I'm here to talk about the

00:00:19,260 --> 00:00:22,860
somewhat riveting topic at least from

00:00:21,090 --> 00:00:25,529
the what the title of the functional

00:00:22,860 --> 00:00:45,449
safety of development also know try me

00:00:25,529 --> 00:00:47,670
try to make this topic with lots of

00:00:45,449 --> 00:00:49,680
jargon here and here and there so if I

00:00:47,670 --> 00:00:52,200
do say something and I haven't yet

00:00:49,680 --> 00:00:53,250
defined it just let me know and I'll see

00:00:52,200 --> 00:00:56,790
I'll see if I can give you an

00:00:53,250 --> 00:00:59,100
explanation of what it is so what am I

00:00:56,790 --> 00:01:01,620
trying to it gets out here so my name at

00:00:59,100 --> 00:01:03,270
the end of this is for you to understand

00:01:01,620 --> 00:01:05,040
some of the basic concepts of functional

00:01:03,270 --> 00:01:06,930
safety knows there'll be a few people in

00:01:05,040 --> 00:01:09,140
the room here we only have a reasonable

00:01:06,930 --> 00:01:11,789
idea after you know with what these are

00:01:09,140 --> 00:01:14,009
but I'm making the assumption that maybe

00:01:11,789 --> 00:01:15,869
people don't quite know what functional

00:01:14,009 --> 00:01:18,720
safety is and how it relates to software

00:01:15,869 --> 00:01:20,970
how it relates to software is further

00:01:18,720 --> 00:01:23,670
sort of specialized in how does it

00:01:20,970 --> 00:01:25,170
actually relate to developing tolerance

00:01:23,670 --> 00:01:27,119
and that's where the area that I've

00:01:25,170 --> 00:01:28,440
actually got most of my experience since

00:01:27,119 --> 00:01:31,439
that's the area I'll probably be

00:01:28,440 --> 00:01:33,720
focusing on but I will make comments

00:01:31,439 --> 00:01:35,640
here or there on some of the stuff on

00:01:33,720 --> 00:01:38,490
the other side so one of the other

00:01:35,640 --> 00:01:41,729
things that I can sort of help out with

00:01:38,490 --> 00:01:43,200
is some of the steps that you know what

00:01:41,729 --> 00:01:44,909
would make somebody developing one of

00:01:43,200 --> 00:01:46,890
these safety-related systems have to

00:01:44,909 --> 00:01:51,509
know about development tools and

00:01:46,890 --> 00:01:53,250
software and I've introduced the word

00:01:51,509 --> 00:01:54,479
two words here that I probably will meet

00:01:53,250 --> 00:01:57,860
at the find later on which is

00:01:54,479 --> 00:02:00,230
qualification and certification that's

00:01:57,860 --> 00:02:03,680
thing about the requirements of

00:02:00,230 --> 00:02:06,770
functional safety standards one of the

00:02:03,680 --> 00:02:08,240
main reasons for me to be not benefit of

00:02:06,770 --> 00:02:10,420
talking about this is that I've been

00:02:08,240 --> 00:02:12,890
involved in the qualification

00:02:10,420 --> 00:02:14,780
certification of the compiler bacca Tom

00:02:12,890 --> 00:02:17,750
and I'm here to share some of my

00:02:14,780 --> 00:02:20,780
experience with that and then if you

00:02:17,750 --> 00:02:22,970
allow me to speculate a little bit about

00:02:20,780 --> 00:02:24,590
well what does all this qualification

00:02:22,970 --> 00:02:26,240
and certification mean before open

00:02:24,590 --> 00:02:29,000
source tools and how does this relate to

00:02:26,240 --> 00:02:33,920
manaro as opposed to say commercials of

00:02:29,000 --> 00:02:36,530
the software so what's my background not

00:02:33,920 --> 00:02:38,330
this well mostly I'm an engineer so at

00:02:36,530 --> 00:02:41,350
the moment I'm assigned to be taught a

00:02:38,330 --> 00:02:46,340
working group and I work on tool chains

00:02:41,350 --> 00:02:47,800
mostly maintenance but being around in a

00:02:46,340 --> 00:02:50,150
tool chain group an awful long time

00:02:47,800 --> 00:02:51,350
means you pick up an awful lot of

00:02:50,150 --> 00:02:54,530
knowledge about how the tools work

00:02:51,350 --> 00:02:57,560
together where all the faults are why

00:02:54,530 --> 00:02:59,030
decisions were made at certain times and

00:02:57,560 --> 00:03:00,709
it kind of makes you wonder who prepares

00:02:59,030 --> 00:03:02,989
all sorts of people to write eight

00:03:00,709 --> 00:03:04,580
what's called the safety manual all

00:03:02,989 --> 00:03:06,910
together all of the information together

00:03:04,580 --> 00:03:09,350
for that sort of certification

00:03:06,910 --> 00:03:12,110
qualifications so I was heavily involved

00:03:09,350 --> 00:03:13,580
in the production of the arc papyrus of

00:03:12,110 --> 00:03:16,549
qualification cancer that's kind of

00:03:13,580 --> 00:03:18,230
where my sort of as an engineer of my

00:03:16,549 --> 00:03:23,170
path as a document writer

00:03:18,230 --> 00:03:25,010
across for a certain period of time so

00:03:23,170 --> 00:03:26,570
presentation talking just going to go

00:03:25,010 --> 00:03:33,320
into this bit about what functional

00:03:26,570 --> 00:03:37,730
safety is so and its most basic level

00:03:33,320 --> 00:03:40,549
functional safety comes from the sort of

00:03:37,730 --> 00:03:44,030
hardware side of things so it's very

00:03:40,549 --> 00:03:45,720
much you have some sense there are some

00:03:44,030 --> 00:03:48,300
of the inputs that come into this

00:03:45,720 --> 00:03:50,550
there's some sort of logic that says as

00:03:48,300 --> 00:03:52,290
a result of this particular import I

00:03:50,550 --> 00:03:54,240
will control some hardware that will do

00:03:52,290 --> 00:03:57,270
something so I've just given a couple of

00:03:54,240 --> 00:03:58,680
examples there of that sort of sensor at

00:03:57,270 --> 00:04:00,480
the back of the car but those are the

00:03:58,680 --> 00:04:01,800
sorts of things that when you reverse

00:04:00,480 --> 00:04:04,170
they'll beat when you were about to

00:04:01,800 --> 00:04:06,240
crash into a wall and on the right hand

00:04:04,170 --> 00:04:09,180
side there's an industrial robot it's

00:04:06,240 --> 00:04:10,740
actually a lot more complicated and the

00:04:09,180 --> 00:04:12,600
interesting thing about the device on

00:04:10,740 --> 00:04:14,640
the left is it's only providing you with

00:04:12,600 --> 00:04:16,680
information the humans still one of the

00:04:14,640 --> 00:04:18,390
biggest decisions but the device on the

00:04:16,680 --> 00:04:20,130
right if you can imagine the device

00:04:18,390 --> 00:04:21,480
without science if it's fine rather than

00:04:20,130 --> 00:04:22,950
you were in the way bits then there

00:04:21,480 --> 00:04:25,470
would be a suit there could be serious

00:04:22,950 --> 00:04:27,600
consequences to the human involved so

00:04:25,470 --> 00:04:29,940
generally functional safety is it's

00:04:27,600 --> 00:04:32,280
coming it's governing a device that

00:04:29,940 --> 00:04:34,260
controls hardware it's got some inputs

00:04:32,280 --> 00:04:36,390
in it's got some outputs and the reason

00:04:34,260 --> 00:04:38,160
it's called functional safety is that

00:04:36,390 --> 00:04:40,620
that device has some kind of

00:04:38,160 --> 00:04:42,150
specification it will be what do I

00:04:40,620 --> 00:04:44,550
expect to happen when I give it this

00:04:42,150 --> 00:04:48,840
airport I should expect this output to

00:04:44,550 --> 00:04:51,090
happen and it's really about what sort

00:04:48,840 --> 00:04:52,800
of things can I guarantee what what is

00:04:51,090 --> 00:04:55,290
my functional specification that what I

00:04:52,800 --> 00:04:58,260
do as a result of my input and the

00:04:55,290 --> 00:04:59,940
safety part is basically how do I make

00:04:58,260 --> 00:05:03,240
sure that this thing isn't going to be

00:04:59,940 --> 00:05:06,900
at the danger to humans so this is sort

00:05:03,240 --> 00:05:09,030
of as a part of my this is a huge topic

00:05:06,900 --> 00:05:11,370
there's loads of details when you

00:05:09,030 --> 00:05:13,080
actually get down to it there's actually

00:05:11,370 --> 00:05:15,450
a very small amount of underlying

00:05:13,080 --> 00:05:17,700
principles that you can apply and quite

00:05:15,450 --> 00:05:19,500
a lot of it kind of derives from these

00:05:17,700 --> 00:05:21,000
sort of underlying principles and a lot

00:05:19,500 --> 00:05:21,480
of it is just when you're trying to

00:05:21,000 --> 00:05:24,180
understand

00:05:21,480 --> 00:05:25,950
emotional safety standards think back to

00:05:24,180 --> 00:05:28,500
the principles and say well okay what

00:05:25,950 --> 00:05:31,290
makes sense in light of these principles

00:05:28,500 --> 00:05:34,100
of sort of trying to go through these so

00:05:31,290 --> 00:05:37,800
the first and the first thing is that

00:05:34,100 --> 00:05:38,940
the important word is context so one of

00:05:37,800 --> 00:05:41,520
the things that you'll notice is that

00:05:38,940 --> 00:05:44,970
the functional safety can vary from a

00:05:41,520 --> 00:05:48,200
medical device and nuclear power plant

00:05:44,970 --> 00:05:51,350
these are hugely different contexts and

00:05:48,200 --> 00:05:55,410
they all present very different risks

00:05:51,350 --> 00:05:57,720
and so Denny means that you can't ever

00:05:55,410 --> 00:06:00,720
look at anything in isolation and say

00:05:57,720 --> 00:06:02,160
this is safe it has to be understood in

00:06:00,720 --> 00:06:04,800
the context of the whole system

00:06:02,160 --> 00:06:06,690
these two brother contrived example this

00:06:04,800 --> 00:06:09,090
is you might have something that's

00:06:06,690 --> 00:06:10,230
completely safe on a car but if you put

00:06:09,090 --> 00:06:12,270
that into the middle of a nuclear

00:06:10,230 --> 00:06:14,420
reactor it what it would just melt so

00:06:12,270 --> 00:06:17,100
the chances are you you have you have to

00:06:14,420 --> 00:06:19,770
command what you're doing into it into a

00:06:17,100 --> 00:06:21,720
context so that's one of the things that

00:06:19,770 --> 00:06:23,580
you'll find is that if you're a vendor

00:06:21,720 --> 00:06:26,040
of a component that's being bought or

00:06:23,580 --> 00:06:28,590
integrated by somebody else it's the

00:06:26,040 --> 00:06:31,890
person doing that final integration that

00:06:28,590 --> 00:06:33,330
there's all of the costs to ensuring a

00:06:31,890 --> 00:06:35,040
functional safety because it's only then

00:06:33,330 --> 00:06:37,800
you know the context of everything

00:06:35,040 --> 00:06:39,240
that's happening similar to that more

00:06:37,800 --> 00:06:41,820
related to that is the functional state

00:06:39,240 --> 00:06:44,760
that doesn't propose if you have ten

00:06:41,820 --> 00:06:46,680
functional safety or functionally safe

00:06:44,760 --> 00:06:48,360
components and you put them all together

00:06:46,680 --> 00:06:52,230
that doesn't make a functionally same

00:06:48,360 --> 00:06:53,940
system the different parts of the system

00:06:52,230 --> 00:06:55,449
can have different levels of safety

00:06:53,940 --> 00:06:57,699
certificate what would happen in it is

00:06:55,449 --> 00:06:59,949
yes it is quite often with the

00:06:57,699 --> 00:07:01,300
automotive side and you might have heard

00:06:59,949 --> 00:07:03,759
that good so that you're talking to

00:07:01,300 --> 00:07:06,610
keynote yesterday of the high integrity

00:07:03,759 --> 00:07:08,319
parts in the low integrity parts so in

00:07:06,610 --> 00:07:11,139
general what I've designed a way if you

00:07:08,319 --> 00:07:13,180
try and say this part is high-risk and

00:07:11,139 --> 00:07:15,939
that's the area what got to concentrate

00:07:13,180 --> 00:07:18,610
most of my resources on this is part of

00:07:15,939 --> 00:07:21,909
it I've isolated it and it's not

00:07:18,610 --> 00:07:24,099
actually impacting any safety function

00:07:21,909 --> 00:07:27,789
so I don't necessarily need all the

00:07:24,099 --> 00:07:30,039
wrong emotional safety standards okay so

00:07:27,789 --> 00:07:32,710
you're not to see these things called

00:07:30,039 --> 00:07:34,659
sill or a so I'm not going to go into

00:07:32,710 --> 00:07:37,060
these in too much detail but they're

00:07:34,659 --> 00:07:43,029
basically made sort of a measure of how

00:07:37,060 --> 00:07:46,599
but the level of risk so Asil runs from

00:07:43,029 --> 00:07:48,999
aesol a to acyl be something like a some

00:07:46,599 --> 00:07:51,610
a and B are things like I think what

00:07:48,999 --> 00:07:53,529
entertainment comes on for Saturday and

00:07:51,610 --> 00:07:55,839
indeed something like a self-driving car

00:07:53,529 --> 00:07:57,430
will come under B so what we see the

00:07:55,839 --> 00:07:59,409
self-driving car has got much more

00:07:57,430 --> 00:08:03,849
opportunity to have some wonder the

00:07:59,409 --> 00:08:05,510
infotainment system you have give human

00:08:03,849 --> 00:08:07,130
idiocy

00:08:05,510 --> 00:08:08,830
it depends on the music depends on the

00:08:07,130 --> 00:08:11,330
driver level in a sense these things

00:08:08,830 --> 00:08:15,320
the assumption of the same human driving

00:08:11,330 --> 00:08:16,100
the vehicle yes three digital yes you

00:08:15,320 --> 00:08:18,200
did yes

00:08:16,100 --> 00:08:21,020
human driving test probably not not not

00:08:18,200 --> 00:08:23,510
not so good overall but anyway so the

00:08:21,020 --> 00:08:26,420
first thing about hardware is allowed to

00:08:23,510 --> 00:08:30,230
have random default software isn't so if

00:08:26,420 --> 00:08:31,940
you have a hardware device it's it's

00:08:30,230 --> 00:08:35,060
subjected to the elements subject

00:08:31,940 --> 00:08:37,490
element outside of your control and a

00:08:35,060 --> 00:08:41,240
lot of the way that the safety standards

00:08:37,490 --> 00:08:43,160
mitigate risk is to actually associate

00:08:41,240 --> 00:08:45,890
some kind of probability with devices

00:08:43,160 --> 00:08:47,870
failure of failing and they have to when

00:08:45,890 --> 00:08:52,130
they're showing their safety the devices

00:08:47,870 --> 00:08:54,320
Minister safety with software you can't

00:08:52,130 --> 00:08:57,320
get away from that they basically assume

00:08:54,320 --> 00:08:59,930
that your software cosmic rays and

00:08:57,320 --> 00:09:02,360
outstanding will run the same code do

00:08:59,930 --> 00:09:03,020
the same thing every time so that if

00:09:02,360 --> 00:09:05,090
there's a failure

00:09:03,020 --> 00:09:06,680
it's a bug in the software and then you

00:09:05,090 --> 00:09:09,410
reduce that software through a rigorous

00:09:06,680 --> 00:09:10,880
also produced us of what you reduce the

00:09:09,410 --> 00:09:13,910
chance that pay here with the rigorous

00:09:10,880 --> 00:09:15,950
development process in the software

00:09:13,910 --> 00:09:18,710
itself doesn't potential risk to humans

00:09:15,950 --> 00:09:21,110
those of you using certain and Microsoft

00:09:18,710 --> 00:09:23,690
software for example times of when it

00:09:21,110 --> 00:09:25,280
crashes or whatever no nothing we don't

00:09:23,690 --> 00:09:27,740
print manuals to you to cut your finger

00:09:25,280 --> 00:09:29,060
running anymore that sort of things so

00:09:27,740 --> 00:09:30,950
it's operate itself this would probably

00:09:29,060 --> 00:09:34,970
reduce the risk of humans but it may

00:09:30,950 --> 00:09:38,550
control hardware than it does okay

00:09:34,970 --> 00:09:40,410
so with all of this risk in

00:09:38,550 --> 00:09:43,230
the there comes functional safety

00:09:40,410 --> 00:09:45,360
standards so that what brought to ones

00:09:43,230 --> 00:09:48,269
that probably be covering most here are

00:09:45,360 --> 00:09:51,990
ISO 26262 which is the sort of automated

00:09:48,269 --> 00:09:54,870
standard an IEC 61508 which is certainly

00:09:51,990 --> 00:09:56,339
sort of I guess you put the grandfather

00:09:54,870 --> 00:09:59,100
standard that mostly comes from

00:09:56,339 --> 00:10:00,690
industrial process controls now what

00:09:59,100 --> 00:10:02,399
they do is they are not a development

00:10:00,690 --> 00:10:04,170
process in themselves these documents

00:10:02,399 --> 00:10:07,170
they don't say you must develop your

00:10:04,170 --> 00:10:08,399
software this way what this is assumed

00:10:07,170 --> 00:10:10,370
that you have the development process

00:10:08,399 --> 00:10:12,180
there what they kind of are is

00:10:10,370 --> 00:10:14,279
requirements on your development process

00:10:12,180 --> 00:10:16,980
they're basing your development process

00:10:14,279 --> 00:10:19,140
must have must cover these particular

00:10:16,980 --> 00:10:20,940
aspects like it might say that you have

00:10:19,140 --> 00:10:23,940
to have a certain level of test coverage

00:10:20,940 --> 00:10:25,680
in your in your development process or

00:10:23,940 --> 00:10:27,959
you must show that you've recorded all

00:10:25,680 --> 00:10:29,970
of your Thermomix that type of thing so

00:10:27,959 --> 00:10:32,630
they're really that kind of layer on top

00:10:29,970 --> 00:10:35,010
of your existing development processes

00:10:32,630 --> 00:10:37,350
they're often structures as a beat model

00:10:35,010 --> 00:10:40,110
so those you familiar with the sort of

00:10:37,350 --> 00:10:41,839
traditional web model the idea is is

00:10:40,110 --> 00:10:44,880
you've got your own development process

00:10:41,839 --> 00:10:46,950
and you kind of do a mapping with your

00:10:44,880 --> 00:10:48,089
development process to the feed model so

00:10:46,950 --> 00:10:49,800
that the people doing this sort of

00:10:48,089 --> 00:10:51,810
assessment room say far as I can see

00:10:49,800 --> 00:10:56,370
what's going on and you can be credible

00:10:51,810 --> 00:10:58,589
creative with this what is it what does

00:10:56,370 --> 00:11:00,750
they mean by them so the B model is kind

00:10:58,589 --> 00:11:02,579
of like and if you remember a waterfall

00:11:00,750 --> 00:11:04,620
model where you start at the top with

00:11:02,579 --> 00:11:07,829
requirements then you go to design then

00:11:04,620 --> 00:11:10,079
you go to implementation then you go to

00:11:07,829 --> 00:11:12,870
Co it's basically that long line the

00:11:10,079 --> 00:11:14,610
v-model cuts it halfway where you go to

00:11:12,870 --> 00:11:17,160
implementation then it goes back up

00:11:14,610 --> 00:11:18,899
again and then you kind of the idea is

00:11:17,160 --> 00:11:21,600
it's like a waterfall but us feedback

00:11:18,899 --> 00:11:26,300
levels at all levels so if you go it's

00:11:21,600 --> 00:11:26,300
kind of a modified B model okay

00:11:27,210 --> 00:11:33,550
okay so whatever make it so the mother

00:11:29,770 --> 00:11:35,470
was very popular in 90s 80s I think but

00:11:33,550 --> 00:11:37,630
if he kind I think it exists more as a

00:11:35,470 --> 00:11:39,370
tool of communication rather than saying

00:11:37,630 --> 00:11:42,670
that you must have a B model of

00:11:39,370 --> 00:11:46,000
development so what you have it requires

00:11:42,670 --> 00:11:47,980
a complement or sort of them compliancy

00:11:46,000 --> 00:11:50,710
standards you have to show documentation

00:11:47,980 --> 00:11:53,200
you have to basically make a cake what

00:11:50,710 --> 00:11:55,690
sorts of notes a safety case you kind of

00:11:53,200 --> 00:11:57,670
say I reckon I'm in compliance and

00:11:55,690 --> 00:12:00,460
here's my evidence to show that I can

00:11:57,670 --> 00:12:02,260
bite and quite often that means you've

00:12:00,460 --> 00:12:03,700
got to show traceability throughout the

00:12:02,260 --> 00:12:06,040
development process you know make your

00:12:03,700 --> 00:12:09,100
can you mention traceability quite a bit

00:12:06,040 --> 00:12:10,720
and that's where a lot of the pain comes

00:12:09,100 --> 00:12:13,330
in in the development process it's kind

00:12:10,720 --> 00:12:14,410
of a lot of the development process that

00:12:13,330 --> 00:12:16,900
you will actually you to develop your

00:12:14,410 --> 00:12:19,600
software is the same the difference is

00:12:16,900 --> 00:12:21,400
you've got to you've got to show a lot

00:12:19,600 --> 00:12:23,050
more traceability from the requirements

00:12:21,400 --> 00:12:24,370
at the top all the way to the object

00:12:23,050 --> 00:12:26,620
code at the bottom and that gently

00:12:24,370 --> 00:12:27,810
requires extra bureaucracy that sort of

00:12:26,620 --> 00:12:29,980
thing

00:12:27,810 --> 00:12:31,930
final bit about functional status elders

00:12:29,980 --> 00:12:33,370
if you actually try and read them they

00:12:31,930 --> 00:12:36,460
are written to be what's gone

00:12:33,370 --> 00:12:37,540
intentionally vague so what meant is you

00:12:36,460 --> 00:12:39,960
will never find that they actually

00:12:37,540 --> 00:12:42,310
gather tell you precisely what to do

00:12:39,960 --> 00:12:45,070
mainly so that they don't restrict the

00:12:42,310 --> 00:12:48,400
scope so all I do is say something like

00:12:45,070 --> 00:12:49,960
ISO 26262 covers the whole automotive if

00:12:48,400 --> 00:12:51,610
they were very prescriptive about what

00:12:49,960 --> 00:12:53,020
they said you have to do that would

00:12:51,610 --> 00:12:55,060
limit the scope to which they can apply

00:12:53,020 --> 00:12:57,880
the standard the intention is always

00:12:55,060 --> 00:13:00,610
you're the person who's making the

00:12:57,880 --> 00:13:02,650
product you know best you make the case

00:13:00,610 --> 00:13:04,660
and you make justification and you

00:13:02,650 --> 00:13:06,000
provide the evidence to back up and it's

00:13:04,660 --> 00:13:08,370
up to you to convince some

00:13:06,000 --> 00:13:10,680
who's an expert in sounded to take your

00:13:08,370 --> 00:13:12,390
case so then it can be quite frustrating

00:13:10,680 --> 00:13:17,910
when you read in you know what does that

00:13:12,390 --> 00:13:19,680
even mean so going on capacitor start

00:13:17,910 --> 00:13:21,390
speeding up little bit more question to

00:13:19,680 --> 00:13:22,920
go through but one of the interesting

00:13:21,390 --> 00:13:24,810
things you'll see is there are lots of

00:13:22,920 --> 00:13:25,740
functional safety standards and while of

00:13:24,810 --> 00:13:27,600
their loss of functional safety

00:13:25,740 --> 00:13:29,340
standards and all the reasons for this

00:13:27,600 --> 00:13:31,710
is that industry is very different so

00:13:29,340 --> 00:13:34,740
they're the sort of master also to the

00:13:31,710 --> 00:13:35,400
grandfather of the industry is IEC 61 by

00:13:34,740 --> 00:13:37,380
the ways

00:13:35,400 --> 00:13:39,780
and a lot of this is a functional safety

00:13:37,380 --> 00:13:43,830
standards of derived from cattle very

00:13:39,780 --> 00:13:45,420
similar format and what so why would an

00:13:43,830 --> 00:13:48,180
industry want to do its own thing well

00:13:45,420 --> 00:13:50,490
if you consider say automotive versus

00:13:48,180 --> 00:13:52,410
say plants

00:13:50,490 --> 00:13:55,350
there's industrial plants are pretty

00:13:52,410 --> 00:13:58,340
much bespoke if there's a disaster say a

00:13:55,350 --> 00:14:00,660
chemical plant or nuclear plant it would

00:13:58,340 --> 00:14:04,650
amount of damage that could be caused is

00:14:00,660 --> 00:14:05,960
huge with a car there's a huge amount of

00:14:04,650 --> 00:14:09,240
opportunity for commoditization

00:14:05,960 --> 00:14:10,560
developments where as there's only so

00:14:09,240 --> 00:14:13,830
many factories you could share that

00:14:10,560 --> 00:14:16,230
spread any particular costs out of cars

00:14:13,830 --> 00:14:18,870
are likely to be less will be able to

00:14:16,230 --> 00:14:20,280
share technology also what's the worst

00:14:18,870 --> 00:14:22,290
that you can do to a car other than

00:14:20,280 --> 00:14:25,220
crash into a chemical factory of course

00:14:22,290 --> 00:14:28,380
none of these other things it's so that

00:14:25,220 --> 00:14:32,970
they tune the standards to their local

00:14:28,380 --> 00:14:34,860
areas so I've gone quickly through what

00:14:32,970 --> 00:14:36,570
the functional safety standards are and

00:14:34,860 --> 00:14:40,260
now we're going to go how would you

00:14:36,570 --> 00:14:42,930
actually like this good about mental so

00:14:40,260 --> 00:14:44,760
this is the sort of typical model that

00:14:42,930 --> 00:14:47,600
the functional safety standards have of

00:14:44,760 --> 00:14:50,760
a development zone so first one is a

00:14:47,600 --> 00:14:52,110
tool that actually modifies the model of

00:14:50,760 --> 00:14:54,330
the system so if you think of the source

00:14:52,110 --> 00:14:56,670
code developer starts with our

00:14:54,330 --> 00:14:59,230
requirements goes down to their design

00:14:56,670 --> 00:15:03,160
they finally implemented that design

00:14:59,230 --> 00:15:05,320
for notation called source code what the

00:15:03,160 --> 00:15:07,330
source code that happens to be and we

00:15:05,320 --> 00:15:09,580
have a it's all like a compiler that's

00:15:07,330 --> 00:15:14,440
going to transform that source code into

00:15:09,580 --> 00:15:16,870
object code no in theory the source code

00:15:14,440 --> 00:15:17,320
and the object code are both the same

00:15:16,870 --> 00:15:18,820
thing

00:15:17,320 --> 00:15:21,880
they're just models the system at a

00:15:18,820 --> 00:15:24,570
different level the compiler in doing

00:15:21,880 --> 00:15:27,400
that translation put an introduced about

00:15:24,570 --> 00:15:30,070
in that case you've got perfectly a good

00:15:27,400 --> 00:15:32,620
model of the system in the source code

00:15:30,070 --> 00:15:35,260
sight and he put a potentially flawed

00:15:32,620 --> 00:15:37,900
system on the other side so development

00:15:35,260 --> 00:15:40,420
tools to actually modify the model of

00:15:37,900 --> 00:15:43,210
the system and the output actually goes

00:15:40,420 --> 00:15:46,810
into the final system are the ones where

00:15:43,210 --> 00:15:48,190
the major amount lines are put in a

00:15:46,810 --> 00:15:49,660
functional safety stand because notice

00:15:48,190 --> 00:15:52,960
that one thing can actually inject bugs

00:15:49,660 --> 00:15:55,600
into the system second type is your tour

00:15:52,960 --> 00:15:58,780
fails to detect a defect in the input so

00:15:55,600 --> 00:16:01,810
there can be plenty of times when you've

00:15:58,780 --> 00:16:03,670
used a compiler for example where it

00:16:01,810 --> 00:16:05,560
gives you a warning warning you're about

00:16:03,670 --> 00:16:07,270
to do something to keep you stupid or an

00:16:05,560 --> 00:16:09,430
error message saying this isn't this is

00:16:07,270 --> 00:16:12,070
not performing to the syntax or doing

00:16:09,430 --> 00:16:13,480
something obviously wrong so I can catch

00:16:12,070 --> 00:16:15,760
errors before they make it into the

00:16:13,480 --> 00:16:18,070
system so a potential defect here the

00:16:15,760 --> 00:16:20,200
safety related tool of development or

00:16:18,070 --> 00:16:21,870
will be a failure to spot one of these

00:16:20,200 --> 00:16:25,450
obvious errors and it leaks an error

00:16:21,870 --> 00:16:28,030
into the final system the final thing of

00:16:25,450 --> 00:16:30,400
this is where tools like an debuggers

00:16:28,030 --> 00:16:33,640
come in is a debugger that doesn't

00:16:30,400 --> 00:16:36,640
change the output so if there's a bug in

00:16:33,640 --> 00:16:38,740
the example beforehand or afterwards the

00:16:36,640 --> 00:16:41,200
debugger doesn't change that but a

00:16:38,740 --> 00:16:42,500
debugger could for example by lying to

00:16:41,200 --> 00:16:44,630
you and say for example

00:16:42,500 --> 00:16:46,550
you're viewing the memory and you say

00:16:44,630 --> 00:16:47,960
you know there's no problem here but in

00:16:46,550 --> 00:16:49,100
fact if it got the different memory

00:16:47,960 --> 00:16:49,550
address and you were looking somewhere

00:16:49,100 --> 00:16:51,260
different

00:16:49,550 --> 00:16:52,630
it could give you a false sense of

00:16:51,260 --> 00:16:54,910
confidence about what was going wrong

00:16:52,630 --> 00:16:57,290
typically this is the way that a

00:16:54,910 --> 00:17:00,470
functional safety standard view

00:16:57,290 --> 00:17:02,060
developer tools and this is sort of how

00:17:00,470 --> 00:17:05,630
would you as a tool chain developer have

00:17:02,060 --> 00:17:11,030
to sort of present your tools in terms

00:17:05,630 --> 00:17:14,830
of this type of model so what actually

00:17:11,030 --> 00:17:18,730
has to happen for the development tools

00:17:14,830 --> 00:17:23,660
so all developer tools must be evaluated

00:17:18,730 --> 00:17:25,640
so it's quite a vague statement what

00:17:23,660 --> 00:17:27,800
that actually means and that can mean

00:17:25,640 --> 00:17:29,840
every tool you have in your system so

00:17:27,800 --> 00:17:32,330
what the things safety-related has to do

00:17:29,840 --> 00:17:36,110
is to look at every tool including

00:17:32,330 --> 00:17:38,540
vessels come editors you know test

00:17:36,110 --> 00:17:40,220
generators Perl scripts that generate

00:17:38,540 --> 00:17:43,030
test data that's the thing all of those

00:17:40,220 --> 00:17:46,190
are classed as development tools

00:17:43,030 --> 00:17:50,150
compilers assemblers obviously part of

00:17:46,190 --> 00:17:51,740
that and then they need to look to how

00:17:50,150 --> 00:17:53,450
those tools fit together how their

00:17:51,740 --> 00:17:55,280
developers use those particular tools

00:17:53,450 --> 00:17:57,410
they have to say well ok

00:17:55,280 --> 00:18:00,590
looking at that fault model on the

00:17:57,410 --> 00:18:04,340
previous page what could go wrong and

00:18:00,590 --> 00:18:06,230
how could how could that no consequence

00:18:04,340 --> 00:18:08,690
no fault in that area go all the way

00:18:06,230 --> 00:18:10,880
down this is the system into the tool

00:18:08,690 --> 00:18:13,550
and then they have to say look how could

00:18:10,880 --> 00:18:15,860
I avoid those spots prevent for extra

00:18:13,550 --> 00:18:19,760
layers of testing would want all detect

00:18:15,860 --> 00:18:21,340
the error in the previous one and if you

00:18:19,760 --> 00:18:24,440
think that there might there may be a

00:18:21,340 --> 00:18:26,030
significant chance that forms might

00:18:24,440 --> 00:18:26,450
weaken system you have to go with

00:18:26,030 --> 00:18:31,610
something

00:18:26,450 --> 00:18:33,950
to qualification and finally the possum

00:18:31,610 --> 00:18:36,530
in stir every evaluation you do is

00:18:33,950 --> 00:18:38,450
unique to a specific tool version so if

00:18:36,530 --> 00:18:40,510
you upgrade your compiler you have to

00:18:38,450 --> 00:18:43,490
redo all of your qualification work

00:18:40,510 --> 00:18:45,200
which is again the quad sauce is one you

00:18:43,490 --> 00:18:46,880
see when when you if you're a compiler

00:18:45,200 --> 00:18:47,810
or two or benta and you say well why

00:18:46,880 --> 00:18:49,670
don't you just upgrade to the latest

00:18:47,810 --> 00:18:51,080
version and you're finding the people

00:18:49,670 --> 00:18:52,370
that remarkably reluctant to do that

00:18:51,080 --> 00:18:54,020
it's because they have to do all of the

00:18:52,370 --> 00:18:55,970
work that they've done previously all

00:18:54,020 --> 00:18:57,530
over again so quite often you'll find

00:18:55,970 --> 00:19:01,760
that they would rather have a workaround

00:18:57,530 --> 00:19:05,440
or to know the various parameters of a

00:19:01,760 --> 00:19:08,300
fault rather than have a fixed version

00:19:05,440 --> 00:19:11,630
so here's a graphical example of the

00:19:08,300 --> 00:19:13,340
tool flow and how they may say to you

00:19:11,630 --> 00:19:16,940
about the might think about some things

00:19:13,340 --> 00:19:20,270
here I've got an example that could

00:19:16,940 --> 00:19:22,760
happen it's okay to commit sir you can

00:19:20,270 --> 00:19:27,020
imagine you have a model and that model

00:19:22,760 --> 00:19:28,760
is generating C source code and it's

00:19:27,020 --> 00:19:31,130
sort of in general and you can give that

00:19:28,760 --> 00:19:33,740
model test generator to make more test

00:19:31,130 --> 00:19:34,690
data and it can evaluate that test data

00:19:33,740 --> 00:19:37,100
itself

00:19:34,690 --> 00:19:38,600
the idea is you kind of beasts like

00:19:37,100 --> 00:19:40,070
model driven development you sort of

00:19:38,600 --> 00:19:43,370
develop all of your code in a sort of

00:19:40,070 --> 00:19:45,740
graphical package that can take tests

00:19:43,370 --> 00:19:48,740
later and run but when you actually want

00:19:45,740 --> 00:19:50,930
to put the code that the models

00:19:48,740 --> 00:19:53,420
developed onto the device you would

00:19:50,930 --> 00:19:55,550
generate C code compile that C code and

00:19:53,420 --> 00:19:58,880
you can see that this this is a sort of

00:19:55,550 --> 00:20:00,980
simple flow and that you can see where

00:19:58,880 --> 00:20:03,620
various sort of bits could go wrong and

00:20:00,980 --> 00:20:06,140
how you could do different checks so for

00:20:03,620 --> 00:20:08,940
example that with the test data that we

00:20:06,140 --> 00:20:11,010
give to the model to the example

00:20:08,940 --> 00:20:13,290
to see that they've given us the same

00:20:11,010 --> 00:20:14,760
value which gives us a good idea that

00:20:13,290 --> 00:20:17,370
the system's doing what it ought to be

00:20:14,760 --> 00:20:19,410
doing so some of the things that you can

00:20:17,370 --> 00:20:20,970
sort of say for a certain functional

00:20:19,410 --> 00:20:23,010
safety advice is you could go along each

00:20:20,970 --> 00:20:25,410
base and say well okay what if that test

00:20:23,010 --> 00:20:26,730
generator gave me bad test data what

00:20:25,410 --> 00:20:28,860
would be the consequence of that

00:20:26,730 --> 00:20:31,020
what if the C source code is bad with

00:20:28,860 --> 00:20:34,440
the link or the compiler a link that

00:20:31,020 --> 00:20:36,060
don't you know catch errors in that and

00:20:34,440 --> 00:20:37,800
you can go through and say what's the

00:20:36,060 --> 00:20:39,270
chance of that happening nicely thing so

00:20:37,800 --> 00:20:40,560
these are sort of things are safety

00:20:39,270 --> 00:20:48,320
related developer would have to do

00:20:40,560 --> 00:20:48,320
Vanessa Leu toolchain so yeah

00:20:52,150 --> 00:21:02,710
so uh the certification in a

00:20:58,230 --> 00:21:05,740
probabilistic process where you will

00:21:02,710 --> 00:21:08,910
start to find that you are compliant

00:21:05,740 --> 00:21:13,300
with to a certain probability or is a

00:21:08,910 --> 00:21:14,980
100 percent certainty so one of the

00:21:13,300 --> 00:21:17,380
principles of the safety is that they

00:21:14,980 --> 00:21:19,800
know that there can never be 100% in

00:21:17,380 --> 00:21:24,190
everything so typically for hardware

00:21:19,800 --> 00:21:26,050
there are random pollster adapter so

00:21:24,190 --> 00:21:29,140
everything has to be done automatically

00:21:26,050 --> 00:21:32,590
in software it's assumed that the system

00:21:29,140 --> 00:21:34,810
is deterministic but it's not assumed

00:21:32,590 --> 00:21:36,550
that you will provably have no bugs and

00:21:34,810 --> 00:21:39,280
in fact what the main way that the

00:21:36,550 --> 00:21:43,540
safety Sanders deal with this is that

00:21:39,280 --> 00:21:46,510
you must take steps to avoid all no

00:21:43,540 --> 00:21:49,420
missions it's what's written in the

00:21:46,510 --> 00:21:51,340
specification so as a tool provider it's

00:21:49,420 --> 00:21:54,040
a key document what the known issues

00:21:51,340 --> 00:21:56,320
aren't at all and if the safety related

00:21:54,040 --> 00:22:02,740
development can say I've taken steps to

00:21:56,320 --> 00:22:04,600
avoid for no issues then I'm ok a little

00:22:02,740 --> 00:22:10,840
bit salsa dance accommodation so one of

00:22:04,600 --> 00:22:12,220
the things I think about this is an idea

00:22:10,840 --> 00:22:15,460
where you say ok I've looked at my

00:22:12,220 --> 00:22:17,020
previous all clothes judge that if

00:22:15,460 --> 00:22:19,660
there's an area of one of these tools

00:22:17,020 --> 00:22:21,610
but I can't guarantee or have a very

00:22:19,660 --> 00:22:24,010
very hyper easy but I feel attractive

00:22:21,610 --> 00:22:25,360
but there will be an error in the system

00:22:24,010 --> 00:22:28,840
I have to go through something called

00:22:25,360 --> 00:22:31,960
the talk location process this is where

00:22:28,840 --> 00:22:37,240
you have the various methods that they

00:22:31,960 --> 00:22:39,690
can do that know of these methods only

00:22:37,240 --> 00:22:42,730
really two of them apply in practice

00:22:39,690 --> 00:22:46,810
first one increased confidence from use

00:22:42,730 --> 00:22:49,420
this is very much more I had a tour from

00:22:46,810 --> 00:22:51,190
an earlier system where this where the

00:22:49,420 --> 00:22:53,410
functional safety standards didn't exist

00:22:51,190 --> 00:22:55,720
I'm using that tool in exactly the same

00:22:53,410 --> 00:22:57,580
way as I've always done in the past 20

00:22:55,720 --> 00:23:00,520
years and it's always worked like all of

00:22:57,580 --> 00:23:03,160
this evidence it works therefore I think

00:23:00,520 --> 00:23:05,230
it's safe to use just because you know

00:23:03,160 --> 00:23:08,440
all of the years of experience that we

00:23:05,230 --> 00:23:11,230
have now if you're doing a new

00:23:08,440 --> 00:23:12,970
development tool you can't make the

00:23:11,230 --> 00:23:15,970
excuse that's and oh it was developed

00:23:12,970 --> 00:23:18,430
before the safety standard and the

00:23:15,970 --> 00:23:20,860
software you have the actual conditions

00:23:18,430 --> 00:23:22,840
to increase confidence use pretty much

00:23:20,860 --> 00:23:24,880
you're using each separate tool in

00:23:22,840 --> 00:23:27,400
exactly the same way and that pretty

00:23:24,880 --> 00:23:31,680
much never happens so the first case is

00:23:27,400 --> 00:23:34,650
ruled out or almost all of the cases

00:23:31,680 --> 00:23:38,520
developed

00:23:34,650 --> 00:23:40,590
this is one where practically no modern

00:23:38,520 --> 00:23:42,570
development tools developed according to

00:23:40,590 --> 00:23:45,810
a modern functional safety standard the

00:23:42,570 --> 00:23:49,050
do it basically would be too expensive

00:23:45,810 --> 00:23:51,360
to say redevelop GCC or plan completely

00:23:49,050 --> 00:23:56,250
from scratch using a safety related

00:23:51,360 --> 00:23:59,670
standard so that's mainly used for if

00:23:56,250 --> 00:24:00,870
you've got a internal tool and that you

00:23:59,670 --> 00:24:02,250
know that you can follow the same

00:24:00,870 --> 00:24:05,310
process you're using for the rest of

00:24:02,250 --> 00:24:06,660
your software you can use that method so

00:24:05,310 --> 00:24:10,470
typically what we don't have falling

00:24:06,660 --> 00:24:12,300
back on is the second two ones here one

00:24:10,470 --> 00:24:15,810
of things that are being sort of going

00:24:12,300 --> 00:24:17,250
through here is what proportion of the

00:24:15,810 --> 00:24:19,800
weight you put in each of these

00:24:17,250 --> 00:24:20,940
arguments often depends on where your

00:24:19,800 --> 00:24:23,430
tool is strongest

00:24:20,940 --> 00:24:24,960
so for promotional tools where you have

00:24:23,430 --> 00:24:26,880
a lot of the you know you pretty much

00:24:24,960 --> 00:24:28,470
have a V model like development model

00:24:26,880 --> 00:24:30,960
you've got a very stable set of

00:24:28,470 --> 00:24:32,670
developers you know every change that's

00:24:30,960 --> 00:24:35,520
come in and you are in control of that V

00:24:32,670 --> 00:24:36,570
change then the most common way is to go

00:24:35,520 --> 00:24:37,980
through the evaluation of the

00:24:36,570 --> 00:24:40,080
development process is pretty much

00:24:37,980 --> 00:24:42,480
you've got your development process

00:24:40,080 --> 00:24:44,730
written up internally anyway and it's

00:24:42,480 --> 00:24:46,920
pretty much a matter of them writing it

00:24:44,730 --> 00:24:49,770
up and that again to the lead model now

00:24:46,920 --> 00:24:51,390
for open source software evaluation the

00:24:49,770 --> 00:24:53,740
development process isn't going to go

00:24:51,390 --> 00:24:56,470
very well because you've got

00:24:53,740 --> 00:24:59,710
contributors you've got no stable set of

00:24:56,470 --> 00:25:01,390
requirements you've got lots except you

00:24:59,710 --> 00:25:04,120
haven't gotten easy mapping to the B

00:25:01,390 --> 00:25:05,800
model but what you can't do that what

00:25:04,120 --> 00:25:06,429
they do have is a very rigorous code

00:25:05,800 --> 00:25:10,390
review

00:25:06,429 --> 00:25:12,190
yes yeah so the the rivers code review

00:25:10,390 --> 00:25:14,140
thing feeds into the validation of the

00:25:12,190 --> 00:25:16,300
software tool and this is basically the

00:25:14,140 --> 00:25:18,280
young well I don't quite know what went

00:25:16,300 --> 00:25:20,500
into making this at all but here's my

00:25:18,280 --> 00:25:22,929
specification of what it does and I can

00:25:20,500 --> 00:25:26,170
show my validation that it does that so

00:25:22,929 --> 00:25:27,850
typically for an open-source tool you

00:25:26,170 --> 00:25:29,530
were just think of way more weight into

00:25:27,850 --> 00:25:31,030
the validation of the software told them

00:25:29,530 --> 00:25:32,950
you would do about the evaluation of

00:25:31,030 --> 00:25:34,420
development process I think the

00:25:32,950 --> 00:25:36,760
evaluation of development process is

00:25:34,420 --> 00:25:39,910
mostly used because it's probably easier

00:25:36,760 --> 00:25:41,230
to do than the validation model of go go

00:25:39,910 --> 00:25:45,220
into this into little bit more detail

00:25:41,230 --> 00:25:47,080
later so you're not then hear these

00:25:45,220 --> 00:25:49,110
words centers if they were the same

00:25:47,080 --> 00:25:52,210
thing of qualification and certification

00:25:49,110 --> 00:25:54,820
and so you'll see quite a bit products

00:25:52,210 --> 00:25:57,520
claim that they are they are certified

00:25:54,820 --> 00:25:59,429
for use as suitable for use in some

00:25:57,520 --> 00:26:02,380
particular functional safety standard

00:25:59,429 --> 00:26:08,140
now what does that certification

00:26:02,380 --> 00:26:10,300
actually mean so certification isn't

00:26:08,140 --> 00:26:12,370
part of the actual standards themselves

00:26:10,300 --> 00:26:14,800
these are the third-party companies

00:26:12,370 --> 00:26:19,780
trusted third-party companies for

00:26:14,800 --> 00:26:23,260
example there are many companies of two

00:26:19,780 --> 00:26:25,179
four two four Islands to suit like

00:26:23,260 --> 00:26:28,840
Exeter thinking what they're basically

00:26:25,179 --> 00:26:32,350
saying is I can look at the development

00:26:28,840 --> 00:26:33,180
process of this tool vendor and I can do

00:26:32,350 --> 00:26:35,940
some

00:26:33,180 --> 00:26:39,510
work for you I will say this is a known

00:26:35,940 --> 00:26:41,880
useless this tool as and as long as your

00:26:39,510 --> 00:26:43,770
use case of this tool is very similar to

00:26:41,880 --> 00:26:45,990
the use case that we've looked at you

00:26:43,770 --> 00:26:49,020
can reuse the effort that we've done for

00:26:45,990 --> 00:26:50,760
qualification so when something is

00:26:49,020 --> 00:26:52,980
certified it doesn't mean that it's

00:26:50,760 --> 00:26:55,140
officially certified by the standards

00:26:52,980 --> 00:26:56,880
body it means there is a trusted third

00:26:55,140 --> 00:26:58,230
party that's looked at it it's not

00:26:56,880 --> 00:27:01,980
compulsory

00:26:58,230 --> 00:27:04,620
it is quite often compulsory for a

00:27:01,980 --> 00:27:06,690
commercial vendor because quite often is

00:27:04,620 --> 00:27:09,500
there in any sort of commercial safe

00:27:06,690 --> 00:27:11,910
development tool market if a tool has

00:27:09,500 --> 00:27:13,770
certification and the other tools don't

00:27:11,910 --> 00:27:15,810
most of the customers will buy the

00:27:13,770 --> 00:27:17,700
certified version because it simplifies

00:27:15,810 --> 00:27:20,340
the amount of qualification work that

00:27:17,700 --> 00:27:22,830
they have to do so even though it's not

00:27:20,340 --> 00:27:24,830
required by the standards it becomes

00:27:22,830 --> 00:27:27,800
required by the markets pretty quickly

00:27:24,830 --> 00:27:32,060
because a lot of the times it's a way of

00:27:27,800 --> 00:27:32,060
offloading some of this qualification

00:27:32,840 --> 00:27:42,050
yes it is so quite often you'll see lots

00:27:38,970 --> 00:27:44,610
of these things being promoted by tools

00:27:42,050 --> 00:27:46,890
and that's it so I think this is

00:27:44,610 --> 00:27:48,330
something that may be more use in the

00:27:46,890 --> 00:27:49,890
commercial market than the open source

00:27:48,330 --> 00:27:52,230
market I don't know it depends whether

00:27:49,890 --> 00:27:55,170
you see open source tools as directly

00:27:52,230 --> 00:27:56,250
competing with those tools or they may

00:27:55,170 --> 00:27:59,420
be in areas where there is no

00:27:56,250 --> 00:28:02,370
competition they may not be required

00:27:59,420 --> 00:28:07,320
okay finally the court clarification

00:28:02,370 --> 00:28:09,780
about compilers

00:28:07,320 --> 00:28:14,580
software components before I go into

00:28:09,780 --> 00:28:16,680
some common pilots of experience is you

00:28:14,580 --> 00:28:19,050
remember I've actually before about you

00:28:16,680 --> 00:28:22,740
have this big mapping from requirements

00:28:19,050 --> 00:28:24,960
to implementation now a compiler is

00:28:22,740 --> 00:28:27,500
thought of as a translator

00:28:24,960 --> 00:28:29,070
it takes a customer's requirements

00:28:27,500 --> 00:28:31,530
including all of their safety

00:28:29,070 --> 00:28:34,520
requirements customer's implementation

00:28:31,530 --> 00:28:37,080
customers design customers source code

00:28:34,520 --> 00:28:39,300
compiler translates it into object code

00:28:37,080 --> 00:28:41,400
but in theory you've got mapping all the

00:28:39,300 --> 00:28:43,410
way from the requirements to the object

00:28:41,400 --> 00:28:47,730
code and you can show you can show that

00:28:43,410 --> 00:28:50,510
either via tools or by you know looking

00:28:47,730 --> 00:28:53,370
at the actual disassembly itself now the

00:28:50,510 --> 00:28:55,290
library is safe example to see might be

00:28:53,370 --> 00:28:57,240
that you get with a compiler it's not

00:28:55,290 --> 00:28:59,310
the customer's requirements not the

00:28:57,240 --> 00:29:03,090
customers design is the compiler writers

00:28:59,310 --> 00:29:05,700
design so you can't treat those as the

00:29:03,090 --> 00:29:08,100
same thing because the person who wrote

00:29:05,700 --> 00:29:10,920
all the safety requirements didn't write

00:29:08,100 --> 00:29:14,430
the software will do the design of the

00:29:10,920 --> 00:29:16,140
actual software itself so the actual

00:29:14,430 --> 00:29:18,300
libraries the compiler are a software

00:29:16,140 --> 00:29:20,010
component and they have to go through a

00:29:18,300 --> 00:29:23,850
different part of the qualification

00:29:20,010 --> 00:29:25,980
process and then quite often need a lot

00:29:23,850 --> 00:29:27,510
more efforts to qualify and this is the

00:29:25,980 --> 00:29:28,890
sort of thing that if you're going to is

00:29:27,510 --> 00:29:31,140
pretty much the same as if you were

00:29:28,890 --> 00:29:31,770
going to say qualify this open-source

00:29:31,140 --> 00:29:33,960
software

00:29:31,770 --> 00:29:35,130
there isn't a component or they would

00:29:33,960 --> 00:29:37,620
have to go through this sort of

00:29:35,130 --> 00:29:41,520
component type of process but slightly

00:29:37,620 --> 00:29:43,710
different know very briefly making make

00:29:41,520 --> 00:29:46,560
mention easy to my seed siient elsewhere

00:29:43,710 --> 00:29:47,550
is there's something called the safety

00:29:46,560 --> 00:29:49,830
element

00:29:47,550 --> 00:29:52,800
hence this is what the hardware goes

00:29:49,830 --> 00:29:56,160
proof so if you senior and the CPUs

00:29:52,800 --> 00:29:58,080
they'll say we always safety element out

00:29:56,160 --> 00:30:03,180
of context and what that means is we

00:29:58,080 --> 00:30:04,890
developed our component to a functional

00:30:03,180 --> 00:30:08,550
safety standard but because it's

00:30:04,890 --> 00:30:10,800
imaginary from the usable component we

00:30:08,550 --> 00:30:13,020
can't know how it's going to be used so

00:30:10,800 --> 00:30:16,080
what the customer has to do was thank

00:30:13,020 --> 00:30:18,450
you later development it has to map the

00:30:16,080 --> 00:30:20,490
context list environment of the safety

00:30:18,450 --> 00:30:24,060
element out of context into their

00:30:20,490 --> 00:30:25,800
environment and say my it's safe the you

00:30:24,060 --> 00:30:27,180
did in order to get safety element out

00:30:25,800 --> 00:30:30,660
of context you have to start the

00:30:27,180 --> 00:30:33,960
development from scratch with a made

00:30:30,660 --> 00:30:36,480
sort of ISO 26262 approved sort of them

00:30:33,960 --> 00:30:39,810
development process that's not an option

00:30:36,480 --> 00:30:41,040
before an existing component so

00:30:39,810 --> 00:30:43,080
typically the process that we go through

00:30:41,040 --> 00:30:49,140
is the qualification software components

00:30:43,080 --> 00:30:50,670
which is a separate part okay so I've

00:30:49,140 --> 00:30:53,070
mentioned all this that is the

00:30:50,670 --> 00:30:55,680
responsibility of the end-user to do

00:30:53,070 --> 00:30:57,900
this at all qualification what can it

00:30:55,680 --> 00:30:59,580
all chain provided do to make things

00:30:57,900 --> 00:31:02,760
interesting

00:30:59,580 --> 00:31:05,280
or help help things along so what it'll

00:31:02,760 --> 00:31:08,760
go through is the qualification process

00:31:05,280 --> 00:31:11,970
but on compiler 5 in our compiler 6 and

00:31:08,760 --> 00:31:13,190
through so the actual details of what's

00:31:11,970 --> 00:31:16,350
in our compiled

00:31:13,190 --> 00:31:18,660
isn't particularly important the main

00:31:16,350 --> 00:31:21,540
context of distinction is return on

00:31:18,660 --> 00:31:24,750
papaya fights entirely proprietary but

00:31:21,540 --> 00:31:26,940
I'm compiler six contains an open source

00:31:24,750 --> 00:31:30,690
software component is the compiler so

00:31:26,940 --> 00:31:31,950
that's derived from Latin LLVM so we had

00:31:30,690 --> 00:31:34,290
to go through a slightly different

00:31:31,950 --> 00:31:35,810
process to get that positive change in

00:31:34,290 --> 00:31:38,160
qualifying

00:31:35,810 --> 00:31:41,910
so what couldn't all Chaney development

00:31:38,160 --> 00:31:44,130
do to help so it can't say the certain

00:31:41,910 --> 00:31:45,630
that the user will be safe in there to

00:31:44,130 --> 00:31:47,750
keep your environment but it can provide

00:31:45,630 --> 00:31:50,220
the wall for a lot of useful information

00:31:47,750 --> 00:31:52,440
so first thing as I mentioned before we

00:31:50,220 --> 00:31:55,890
can get them certification in common use

00:31:52,440 --> 00:31:58,200
cases it can write down which it desert

00:31:55,890 --> 00:31:59,070
beaches of the tool are most useful it

00:31:58,200 --> 00:32:01,080
can provide a comprehensive

00:31:59,070 --> 00:32:03,140
documentation on how the tool should be

00:32:01,080 --> 00:32:05,430
used they paralyze functional

00:32:03,140 --> 00:32:08,700
specifications of the tool that the

00:32:05,430 --> 00:32:10,800
vendor can check probably the most

00:32:08,700 --> 00:32:13,710
important bit is known faults and

00:32:10,800 --> 00:32:15,660
mitigation so one of the things that we

00:32:13,710 --> 00:32:17,280
found most valuable valuable about

00:32:15,660 --> 00:32:19,620
determined the art the information

00:32:17,280 --> 00:32:22,680
coming with the our compiler is what are

00:32:19,620 --> 00:32:25,530
the defects and which versions were told

00:32:22,680 --> 00:32:28,080
that they young to the effect and how do

00:32:25,530 --> 00:32:31,260
I work around those that was defects and

00:32:28,080 --> 00:32:33,060
that's probably the most useful and the

00:32:31,260 --> 00:32:35,990
most time-consuming expensive to

00:32:33,060 --> 00:32:35,990
maintain at the time

00:32:36,500 --> 00:32:43,039
so uncle profiles so whatever's in the

00:32:40,909 --> 00:32:45,860
south when - what about strengths here

00:32:43,039 --> 00:32:48,020
whether with the dual chain was that

00:32:45,860 --> 00:32:50,630
because it was proprietary we had a good

00:32:48,020 --> 00:32:52,549
set of documentation we had a single

00:32:50,630 --> 00:32:55,820
issue tracking system covering all of

00:32:52,549 --> 00:32:57,919
the changes in the media the compiler we

00:32:55,820 --> 00:32:59,570
have a policy of citing an issue

00:32:57,919 --> 00:33:01,549
tracking number and every change that

00:32:59,570 --> 00:33:03,590
we've made so that kind of gave us an

00:33:01,549 --> 00:33:05,870
implicit traceability from the source

00:33:03,590 --> 00:33:08,809
code back up to our issue tracking

00:33:05,870 --> 00:33:10,730
system and hence our requirements so

00:33:08,809 --> 00:33:13,000
anyone could do for a particular line of

00:33:10,730 --> 00:33:13,000
code

00:33:20,600 --> 00:33:28,370
because we controlled everything that

00:33:22,850 --> 00:33:30,200
went into that we could enforce all of

00:33:28,370 --> 00:33:32,090
the municipal projects work on the staff

00:33:30,200 --> 00:33:34,280
we knew who they were and we could write

00:33:32,090 --> 00:33:35,480
on their training record with HR but

00:33:34,280 --> 00:33:38,179
they've been trained in functional

00:33:35,480 --> 00:33:41,330
safety so you can see it kind of heavily

00:33:38,179 --> 00:33:44,600
it was we can we've got something here

00:33:41,330 --> 00:33:45,830
that we can write up as the B model and

00:33:44,600 --> 00:33:50,799
that means that we can put a lot of

00:33:45,830 --> 00:33:50,799
weight on the evaluation process

00:33:54,710 --> 00:34:00,260
so just tell what the actual final

00:33:58,010 --> 00:34:02,529
output was that move that was wizards

00:34:00,260 --> 00:34:04,700
and we have a safety related to release

00:34:02,529 --> 00:34:06,350
we released something called the

00:34:04,700 --> 00:34:08,599
qualification kick that went along with

00:34:06,350 --> 00:34:10,879
that release so what that qualification

00:34:08,599 --> 00:34:13,429
can we have some documentation I

00:34:10,879 --> 00:34:15,619
mentioned this mainly for the determine

00:34:13,429 --> 00:34:17,599
safety manual what you see so the safety

00:34:15,619 --> 00:34:20,810
manual is basically required be the

00:34:17,599 --> 00:34:23,480
documentation that any sort of the tool

00:34:20,810 --> 00:34:25,159
or software component that's going to be

00:34:23,480 --> 00:34:27,589
used in safety related system has to

00:34:25,159 --> 00:34:32,179
have and it's basically saying how do i

00:34:27,589 --> 00:34:36,169
lock this context this element into my

00:34:32,179 --> 00:34:38,990
your safety rating system so it might

00:34:36,169 --> 00:34:40,339
say here are the features that we are

00:34:38,990 --> 00:34:42,260
going to support the safety related

00:34:40,339 --> 00:34:43,820
development here the features that we're

00:34:42,260 --> 00:34:46,210
going to exclude from safety related

00:34:43,820 --> 00:34:49,030
development so we might find in return

00:34:46,210 --> 00:34:52,790
from compiler 5 we were heavily

00:34:49,030 --> 00:34:55,580
targeting the embedded market and so we

00:34:52,790 --> 00:34:59,390
basically said at the time our C++

00:34:55,580 --> 00:35:00,980
library is from an external vendor we

00:34:59,390 --> 00:35:02,510
know that most of the people in that in

00:35:00,980 --> 00:35:05,750
the safety relay teri are not going to

00:35:02,510 --> 00:35:07,010
be using that C++ standard library it's

00:35:05,750 --> 00:35:08,570
going to be huge amount of effort to

00:35:07,010 --> 00:35:10,400
write up the bugs in that area

00:35:08,570 --> 00:35:13,760
and we may not even have the capacity to

00:35:10,400 --> 00:35:16,130
fix them when they're there so we made

00:35:13,760 --> 00:35:18,740
the decision and we have to exclude that

00:35:16,130 --> 00:35:21,200
part of the product from the same

00:35:18,740 --> 00:35:23,540
release it's up to you we want to use it

00:35:21,200 --> 00:35:24,710
the proper functionality is better so if

00:35:23,540 --> 00:35:26,540
you want to go through the qualification

00:35:24,710 --> 00:35:28,430
process they won't be

00:35:26,540 --> 00:35:32,090
information for you in this document

00:35:28,430 --> 00:35:34,070
Dorothy wrote that particular part and

00:35:32,090 --> 00:35:36,800
one of the things that we were able to

00:35:34,070 --> 00:35:40,880
do mistake was quite comprehensively was

00:35:36,800 --> 00:35:43,970
take our JIRA issue systems have been

00:35:40,880 --> 00:35:46,880
tracking defects also generated a defect

00:35:43,970 --> 00:35:49,400
report document which sitive has are all

00:35:46,880 --> 00:35:59,060
the defects in the product the affected

00:35:49,400 --> 00:36:02,330
safety and that type of thing

00:35:59,060 --> 00:36:04,630
okay so on to other parts well it's just

00:36:02,330 --> 00:36:07,670
a little bit of the beta version here

00:36:04,630 --> 00:36:11,120
yeah so one of the things that we were

00:36:07,670 --> 00:36:13,730
thinking about about how whitening what

00:36:11,120 --> 00:36:16,460
makes open-source special is a

00:36:13,730 --> 00:36:21,170
proprietary system and it's not the

00:36:16,460 --> 00:36:22,600
actual part the fact that again at all

00:36:21,170 --> 00:36:25,310
these open source and proprietary

00:36:22,600 --> 00:36:27,020
doesn't matter at all the probability

00:36:25,310 --> 00:36:30,740
that the property that this open source

00:36:27,020 --> 00:36:33,620
is not necessarily a good or a bad thing

00:36:30,740 --> 00:36:35,690
what the motional safety standards

00:36:33,620 --> 00:36:37,810
people are looking for is traceability

00:36:35,690 --> 00:36:41,030
they're looking for documentation

00:36:37,810 --> 00:36:42,560
they're looking for no emitters they are

00:36:41,030 --> 00:36:44,270
looking for people who are trained

00:36:42,560 --> 00:36:46,820
they're very much looking for a

00:36:44,270 --> 00:36:48,950
cathedral and they're looking for things

00:36:46,820 --> 00:36:50,520
that they can that very easy to the

00:36:48,950 --> 00:36:55,590
Cathedral being model that they

00:36:50,520 --> 00:36:58,410
the document open source whilst it can

00:36:55,590 --> 00:36:59,970
be designed with a Cathedral model in

00:36:58,410 --> 00:37:02,369
mind and there are products that do that

00:36:59,970 --> 00:37:04,770
the traditional Easter stereotypical of

00:37:02,369 --> 00:37:07,920
the staff of the bazaar where you have

00:37:04,770 --> 00:37:10,890
lots and lots of potential companies

00:37:07,920 --> 00:37:13,500
with a sort of meritocratic approach of

00:37:10,890 --> 00:37:15,900
all permits coming in the good ones to

00:37:13,500 --> 00:37:20,570
buy over time you have good test suite

00:37:15,900 --> 00:37:23,280
you know they've produced functionally

00:37:20,570 --> 00:37:25,470
the same sort of results in terms of

00:37:23,280 --> 00:37:27,990
quality but you don't necessarily have

00:37:25,470 --> 00:37:30,420
that fifth set of people that you know

00:37:27,990 --> 00:37:32,730
or you've got you have got that fixed

00:37:30,420 --> 00:37:34,410
set of traceability from all of them

00:37:32,730 --> 00:37:38,010
securing that's what you could or you

00:37:34,410 --> 00:37:39,150
could yes there's nothing you know

00:37:38,010 --> 00:37:40,920
that's what that's why I think I say

00:37:39,150 --> 00:37:42,869
rather than say open source versus

00:37:40,920 --> 00:37:45,630
proprietary it's really the cathedral

00:37:42,869 --> 00:37:47,970
versus result and the approach that we

00:37:45,630 --> 00:37:49,560
used for the open source component at

00:37:47,970 --> 00:37:51,360
all and I think it's the one that's most

00:37:49,560 --> 00:37:52,800
heavily used when people do you want to

00:37:51,360 --> 00:37:55,350
take a look at source components into

00:37:52,800 --> 00:37:58,369
here is you basically build a cathedral

00:37:55,350 --> 00:37:58,369
on top of it as up

00:37:59,670 --> 00:38:08,010
the markets yeah so I think what one of

00:38:05,099 --> 00:38:10,380
the things that's so this is just

00:38:08,010 --> 00:38:14,609
basically following on from that by the

00:38:10,380 --> 00:38:18,930
six the main differentiator 205 906

00:38:14,609 --> 00:38:20,790
compiler is now a stock plan so what we

00:38:18,930 --> 00:38:24,180
do with something else another process

00:38:20,790 --> 00:38:26,579
we take regular we take regular

00:38:24,180 --> 00:38:30,180
development what we basically merge with

00:38:26,579 --> 00:38:31,890
upstream incredibly frequently so what

00:38:30,180 --> 00:38:37,290
that means is the proportion of commits

00:38:31,890 --> 00:38:39,270
from upstream the CR way downstream so

00:38:37,290 --> 00:38:41,869
it's really not how at all at all it's

00:38:39,270 --> 00:38:47,670
not screams plus a little bit of

00:38:41,869 --> 00:38:49,650
configuration so upstream climbing

00:38:47,670 --> 00:38:52,349
follows a very useful government process

00:38:49,650 --> 00:38:54,480
making this driven many commissioners

00:38:52,349 --> 00:38:57,780
you know you have the same review and

00:38:54,480 --> 00:39:00,059
quality process that's going on but the

00:38:57,780 --> 00:39:02,970
tool itself not to give you well

00:39:00,059 --> 00:39:05,700
documented is documentation is very much

00:39:02,970 --> 00:39:08,730
what we kind of do what GCC does go see

00:39:05,700 --> 00:39:10,799
the GCC documentation and even though

00:39:08,730 --> 00:39:16,710
the GCC documentation is not great

00:39:10,799 --> 00:39:19,890
either so how are we going to go and get

00:39:16,710 --> 00:39:21,839
this particular to or qualified so what

00:39:19,890 --> 00:39:24,630
we decided to do in this particular case

00:39:21,839 --> 00:39:26,700
will say okay we will never be able to

00:39:24,630 --> 00:39:28,170
win with a development process argument

00:39:26,700 --> 00:39:30,210
but what we can do is say well okay

00:39:28,170 --> 00:39:32,370
let's focus on validation

00:39:30,210 --> 00:39:35,850
that's all so he invested more in

00:39:32,370 --> 00:39:38,100
third-party test Suites you can do your

00:39:35,850 --> 00:39:40,290
own internal tests me but if it's of no

00:39:38,100 --> 00:39:42,120
industry supported test week that anyone

00:39:40,290 --> 00:39:45,090
can buy and configure they can at least

00:39:42,120 --> 00:39:46,830
try and reproduce your results so we

00:39:45,090 --> 00:39:52,260
basically went through on the on the

00:39:46,830 --> 00:39:53,520
idea we've taken this upstream tool but

00:39:52,260 --> 00:39:56,430
we don't necessarily know where it's

00:39:53,520 --> 00:39:58,410
come from but we're going to snapshot it

00:39:56,430 --> 00:40:00,180
we're going to say from this point

00:39:58,410 --> 00:40:02,250
onwards we're not taking any more

00:40:00,180 --> 00:40:03,810
changes from upstream this is the point

00:40:02,250 --> 00:40:05,670
where you slap the Cathedral on top of

00:40:03,810 --> 00:40:09,480
the bazaar and then the invented State

00:40:05,670 --> 00:40:11,010
we are only going to allow changes on

00:40:09,480 --> 00:40:12,810
this particular branch that we've gone

00:40:11,010 --> 00:40:15,120
through a very rigorous change process

00:40:12,810 --> 00:40:17,520
on and what we're going to do is we're

00:40:15,120 --> 00:40:19,230
going to documents you know with our own

00:40:17,520 --> 00:40:22,020
tech conference people what our

00:40:19,230 --> 00:40:26,370
supported feature set is and that's

00:40:22,020 --> 00:40:28,290
typically very very expensive it is yes

00:40:26,370 --> 00:40:31,080
so this is where you often find that

00:40:28,290 --> 00:40:33,920
there are very few examples of open

00:40:31,080 --> 00:40:36,090
source tools that have been qualified

00:40:33,920 --> 00:40:38,130
mostly from this is a requirement that

00:40:36,090 --> 00:40:39,470
you have to provide the functional

00:40:38,130 --> 00:40:42,440
specification and

00:40:39,470 --> 00:40:44,359
validation tests that you don't have

00:40:42,440 --> 00:40:45,740
that functional specification somebody

00:40:44,359 --> 00:40:48,710
has to go with reverse engineering

00:40:45,740 --> 00:40:50,750
basically and certain tools that's

00:40:48,710 --> 00:40:53,359
easier than others now diversity group

00:40:50,750 --> 00:40:58,040
as complicated as the C and C++ compiler

00:40:53,359 --> 00:41:00,140
is it has a huge advantage that both the

00:40:58,040 --> 00:41:02,900
C and C++ standards have already been

00:41:00,140 --> 00:41:04,880
written so pretty much the documentation

00:41:02,900 --> 00:41:06,440
for those tools is what are the options

00:41:04,880 --> 00:41:08,330
that you support that configure how you

00:41:06,440 --> 00:41:10,760
interact with these or the existing

00:41:08,330 --> 00:41:13,040
documents down the C and C++ standards

00:41:10,760 --> 00:41:14,990
there are third-party standards

00:41:13,040 --> 00:41:17,300
important test Suites that you can run

00:41:14,990 --> 00:41:20,210
so your job as a compiler is actually a

00:41:17,300 --> 00:41:21,619
lot easier than if you were we're told

00:41:20,210 --> 00:41:22,450
that didn't operates in a very

00:41:21,619 --> 00:41:25,609
substandard

00:41:22,450 --> 00:41:26,750
environment so yeah

00:41:25,609 --> 00:41:28,970
but basically what we've quite basic

00:41:26,750 --> 00:41:32,540
same views to the strategy for an open

00:41:28,970 --> 00:41:34,760
source tool to take that all and even a

00:41:32,540 --> 00:41:37,910
component is to you have to pretty much

00:41:34,760 --> 00:41:40,160
snapshot it reverse-engineer the

00:41:37,910 --> 00:41:42,349
documentation that you need and then

00:41:40,160 --> 00:41:44,359
only take it forward with very carefully

00:41:42,349 --> 00:41:46,609
controlled updates which you could say

00:41:44,359 --> 00:41:48,050
well okay I'm kind of losing almost all

00:41:46,609 --> 00:41:51,260
the benefits of the community when I do

00:41:48,050 --> 00:41:54,010
that so how do you find the models for

00:41:51,260 --> 00:41:56,210
this that works over time difficult

00:41:54,010 --> 00:41:59,750
so what we're kind of doing at the

00:41:56,210 --> 00:42:01,820
moment is saying keep the release cycle

00:41:59,750 --> 00:42:04,190
very long for our safety-related release

00:42:01,820 --> 00:42:05,930
we're not that we we don't want to keep

00:42:04,190 --> 00:42:07,970
updating it frequently because it's

00:42:05,930 --> 00:42:09,650
going to be very expensive each time but

00:42:07,970 --> 00:42:12,020
what we can do is to say you know every

00:42:09,650 --> 00:42:13,970
few years we take a branch off upstream

00:42:12,020 --> 00:42:18,360
trunk

00:42:13,970 --> 00:42:21,060
- then provide the very small drip feed

00:42:18,360 --> 00:42:23,610
updates from a particular time thanks

00:42:21,060 --> 00:42:25,050
goodbye that the safety related industry

00:42:23,610 --> 00:42:27,480
very is very much more conservative

00:42:25,050 --> 00:42:32,390
about this uses your tools and its need

00:42:27,480 --> 00:42:35,520
for the latest features update cycle

00:42:32,390 --> 00:42:35,520
[Music]

00:42:35,600 --> 00:42:40,590
every time you update the full cost not

00:42:39,090 --> 00:42:42,480
necessary that for cost if you've got a

00:42:40,590 --> 00:42:44,100
media that several of you think how much

00:42:42,480 --> 00:42:46,140
is climate changed from state plan three

00:42:44,100 --> 00:42:51,350
point nine five points over in terms of

00:42:46,140 --> 00:42:51,350
actually user visible changes these huge

00:42:53,360 --> 00:43:05,640
changes almost anything from generation

00:43:03,360 --> 00:43:08,840
change I pull myself for it yes that's

00:43:05,640 --> 00:43:08,840
what you have motivation tests

00:43:11,750 --> 00:43:19,020
inevitably touch upon my obsession as

00:43:15,720 --> 00:43:21,900
well you kind of like don't have most of

00:43:19,020 --> 00:43:26,040
the software changing is that option you

00:43:21,900 --> 00:43:28,170
know right so some of the micro kernels

00:43:26,040 --> 00:43:30,330
that are used in the safety space for

00:43:28,170 --> 00:43:32,340
example the core the microphone really

00:43:30,330 --> 00:43:35,190
changes because it's boiled down to the

00:43:32,340 --> 00:43:37,320
barest minimum tips you need yeah so

00:43:35,190 --> 00:43:39,000
there is an assumption here that your

00:43:37,320 --> 00:43:40,410
software is actually not changing

00:43:39,000 --> 00:43:42,780
drastically there are bits of it that

00:43:40,410 --> 00:43:45,720
could keep out of school for the next

00:43:42,780 --> 00:43:49,080
edition of the end of certification and

00:43:45,720 --> 00:43:51,060
qualification but if it's changed

00:43:49,080 --> 00:43:52,890
completely in the SDP of the course but

00:43:51,060 --> 00:43:55,830
I think you mitigate that by doing this

00:43:52,890 --> 00:43:59,060
mystery country the industry doesn't

00:43:55,830 --> 00:43:59,060
really want leading edge teacher

00:44:04,390 --> 00:45:02,120
this is the means to control me updates

00:44:58,430 --> 00:45:04,970
is a viable approach what we did with

00:45:02,120 --> 00:45:07,160
this was and I think I'll go to the

00:45:04,970 --> 00:45:08,330
bottom point here is this we got a proof

00:45:07,160 --> 00:45:12,280
of concept ready

00:45:08,330 --> 00:45:12,280
from our certification Authority

00:45:13,600 --> 00:45:17,230
and then when phoned up the

00:45:15,430 --> 00:45:18,430
certification authorities said hey can

00:45:17,230 --> 00:45:21,160
we video but what do you think about

00:45:18,430 --> 00:45:22,990
this we we carefully went into service

00:45:21,160 --> 00:45:24,970
than before having said we're kind of

00:45:22,990 --> 00:45:27,460
thinking about doing this what do you

00:45:24,970 --> 00:45:31,000
guys think what bits do we need to focus

00:45:27,460 --> 00:45:32,970
on what bit so no-go areas on you and so

00:45:31,000 --> 00:45:36,880
we you know we spend quite a bit of time

00:45:32,970 --> 00:45:39,100
up front saying you know basically

00:45:36,880 --> 00:45:40,660
talking to the certification authorities

00:45:39,100 --> 00:45:42,460
we try to validate ink approach before

00:45:40,660 --> 00:45:45,430
we did it's definitely one of the things

00:45:42,460 --> 00:45:46,870
that's worth doing getting the supported

00:45:45,430 --> 00:45:50,380
feature set rights is probably your most

00:45:46,870 --> 00:45:53,260
important decision because if you say

00:45:50,380 --> 00:45:55,870
it's kind of a negative little the more

00:45:53,260 --> 00:45:58,210
that you cut out of your product the

00:45:55,870 --> 00:46:01,230
less you have to write and the less your

00:45:58,210 --> 00:46:03,700
customers have to really understand but

00:46:01,230 --> 00:46:05,050
what if you cut out a feature that one

00:46:03,700 --> 00:46:07,540
of your safety related customers

00:46:05,050 --> 00:46:14,490
absolutely must have so really it's a

00:46:07,540 --> 00:46:14,490
case of how do you find useful customers

00:46:16,380 --> 00:46:20,920
the largest chunk of your long-term

00:46:19,120 --> 00:46:22,960
costs actually once you produce the

00:46:20,920 --> 00:46:24,490
documentation to start with that will

00:46:22,960 --> 00:46:27,250
remain fairly stable because you're not

00:46:24,490 --> 00:46:30,910
changing that very much the bid that you

00:46:27,250 --> 00:46:33,370
do have to pay a lot for is writing up

00:46:30,910 --> 00:46:35,410
the defects for example many of you will

00:46:33,370 --> 00:46:38,830
be when you find a bug in GCC it won't

00:46:35,410 --> 00:46:42,540
just be that the bug that some guy

00:46:38,830 --> 00:46:42,540
introduced last week the chances are

00:46:43,870 --> 00:47:03,940
well you still have to your customers

00:47:18,520 --> 00:47:29,030
every time run time like this can't be

00:47:25,880 --> 00:47:31,340
the message how competent bar of

00:47:29,030 --> 00:47:36,650
certification of authority is he help of

00:47:31,340 --> 00:47:40,780
course the total change I can no

00:47:36,650 --> 00:47:40,780
comments of the open source development

00:47:41,260 --> 00:47:47,660
chain they they gotta do what compiler

00:47:45,740 --> 00:47:50,200
was at a high level but their general

00:47:47,660 --> 00:47:52,610
approach were you guys are the experts

00:47:50,200 --> 00:47:55,280
we trust that you're producing a quality

00:47:52,610 --> 00:47:57,650
product what we need what we know is

00:47:55,280 --> 00:47:59,690
development process what we need to know

00:47:57,650 --> 00:48:02,900
is how does your development process

00:47:59,690 --> 00:48:05,840
that's our development our model of the

00:48:02,900 --> 00:48:07,940
world so that we can see the evidence to

00:48:05,840 --> 00:48:09,740
sort of back up the idea that you've

00:48:07,940 --> 00:48:12,050
know your stuff so they will not go

00:48:09,740 --> 00:48:14,750
through and quibble your defect reports

00:48:12,050 --> 00:48:17,930
what they'll say is is the process that

00:48:14,750 --> 00:48:19,670
you use to produce those deep variables

00:48:17,930 --> 00:48:21,390
so look at how many reviewers you have

00:48:19,670 --> 00:48:23,460
is

00:48:21,390 --> 00:48:25,170
to make sure that not a safety related

00:48:23,460 --> 00:48:27,600
development limited so they wouldn't

00:48:25,170 --> 00:48:29,310
look at the actual technical content but

00:48:27,600 --> 00:48:32,580
they would look at the development

00:48:29,310 --> 00:48:34,470
process that they do understand trying

00:48:32,580 --> 00:48:36,780
to work out is his development process

00:48:34,470 --> 00:48:40,620
to produce and good results if everybody

00:48:36,780 --> 00:48:43,380
is competent so I would imagine that

00:48:40,620 --> 00:48:47,240
certification as our ideas would be

00:48:43,380 --> 00:48:50,400
comfortable because we've got Pedro

00:48:47,240 --> 00:48:55,020
Mota's are yes so the cathedral was

00:48:50,400 --> 00:48:56,430
their idea to the bazaar or arms but it

00:48:55,020 --> 00:49:01,350
was our idea

00:48:56,430 --> 00:49:04,140
nobody that I say our idea but it was an

00:49:01,350 --> 00:49:04,680
idea that we had seen had worked in the

00:49:04,140 --> 00:49:09,260
past

00:49:04,680 --> 00:49:09,260
so this company

00:49:12,529 --> 00:49:16,640
so we looked at what other companies

00:49:14,660 --> 00:49:19,670
have done meeting sort of chosen

00:49:16,640 --> 00:49:21,229
approach that we thought was most likely

00:49:19,670 --> 00:49:24,619
to work based on what the strengths of

00:49:21,229 --> 00:49:27,259
it all well there is some as far as

00:49:24,619 --> 00:49:30,949
instant open-source development

00:49:27,259 --> 00:49:35,719
methodologies the only public quotes

00:49:30,949 --> 00:49:38,239
that I managed to find was that a pure

00:49:35,719 --> 00:49:42,349
open-source bazaar model is recognized

00:49:38,239 --> 00:49:46,430
by ISO 26262 but there have been some

00:49:42,349 --> 00:49:51,650
limited it's only limited circumstances

00:49:46,430 --> 00:49:54,559
where models and I think it's made me

00:49:51,650 --> 00:49:56,449
just it's something that's getting more

00:49:54,559 --> 00:49:58,069
traction that's one of the things others

00:49:56,449 --> 00:50:00,229
who did the industry control system

00:49:58,069 --> 00:50:02,479
that's so the industry wants to use open

00:50:00,229 --> 00:50:05,209
source software it will find the way

00:50:02,479 --> 00:50:06,739
these software so I think that one of

00:50:05,209 --> 00:50:09,619
the word things that you know good to do

00:50:06,739 --> 00:50:12,079
do if open source

00:50:09,619 --> 00:50:14,209
who needs to be in the next versions of

00:50:12,079 --> 00:50:16,279
the standards they need to be lobbying

00:50:14,209 --> 00:50:18,170
the standards of people to say okay how

00:50:16,279 --> 00:50:20,059
do we put measures into these to make

00:50:18,170 --> 00:50:22,219
sure open source is part of a recognized

00:50:20,059 --> 00:50:24,229
well what you know what if they won't

00:50:22,219 --> 00:50:26,420
compromise on safety but if you can

00:50:24,229 --> 00:50:29,420
provide arguments as to how to do it

00:50:26,420 --> 00:50:35,529
right then I think that's probably the

00:50:29,420 --> 00:50:35,529
best way this might very much

00:50:45,290 --> 00:50:53,720
has been done is very expensive

00:51:50,300 --> 00:51:55,790
just a quick question you mentioned you

00:51:53,310 --> 00:52:01,440
only look at see do you also support

00:51:55,790 --> 00:52:04,980
certifies and we do in the right base

00:52:01,440 --> 00:52:07,670
from the language so we said the C++

00:52:04,980 --> 00:52:07,670
language

00:52:07,730 --> 00:52:12,079
delete the not the standard library

00:52:10,910 --> 00:52:15,420
sections

00:52:12,079 --> 00:52:17,519
yes we do support the sentences language

00:52:15,420 --> 00:52:25,619
how much that if you start actually is

00:52:17,519 --> 00:52:27,779
to people questions so three strategy

00:52:25,619 --> 00:52:29,670
relies on the stat snapshot II my

00:52:27,779 --> 00:52:31,500
question is how often are you gonna meet

00:52:29,670 --> 00:52:34,730
snap shouting and how long we use report

00:52:31,500 --> 00:52:37,230
those snapshots so typically because I

00:52:34,730 --> 00:52:39,240
can't know precisely how the how long

00:52:37,230 --> 00:52:41,359
ago I think between snapshots were

00:52:39,240 --> 00:52:44,160
probably talking at minimum of two years

00:52:41,359 --> 00:52:47,819
and I think the love the the support is

00:52:44,160 --> 00:52:57,920
often long term you know probably coming

00:52:47,819 --> 00:53:01,559
up to five years because the

00:52:57,920 --> 00:53:04,559
requirements to a very long period of

00:53:01,559 --> 00:53:07,289
support so again we expect to make be

00:53:04,559 --> 00:53:09,630
maintaining these branches for quite

00:53:07,289 --> 00:53:11,279
some time okay and I presume tune for

00:53:09,630 --> 00:53:13,769
father Lincoln is going to be named

00:53:11,279 --> 00:53:15,509
parallel as well that you you support

00:53:13,769 --> 00:53:17,339
what's that something there will be

00:53:15,509 --> 00:53:21,240
multiple release to do supported

00:53:17,339 --> 00:53:23,420
parallel yes yes yeah so it's basically

00:53:21,240 --> 00:53:28,579
it gets expensive

00:53:23,420 --> 00:53:30,829
a deep feeling you we have to choose the

00:53:28,579 --> 00:53:32,690
point of snapshot where this probably

00:53:30,829 --> 00:53:35,390
gonna be a point where our mighty

00:53:32,690 --> 00:53:37,160
changes significantly between the

00:53:35,390 --> 00:53:39,559
releases so that we need to give version

00:53:37,160 --> 00:53:41,720
to the compilers or you are likely in

00:53:39,559 --> 00:53:43,460
the markets that's probably when the

00:53:41,720 --> 00:53:45,260
release for us is you know we'd be

00:53:43,460 --> 00:53:50,809
choose to release when there's new

00:53:45,260 --> 00:53:53,740
almighty because okay I said I'll copy

00:53:50,809 --> 00:53:53,740
around individuals

00:54:01,080 --> 00:54:06,050

YouTube URL: https://www.youtube.com/watch?v=wf4KppZ5L9g


