Title: Secure Boot on ARM systems – SFO17-201
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-201
Session Name: Secure Boot on ARM systems – Building a complete Chain of Trust upon existing industry standards using open-source firmware - SFO17-201
Speaker: Matteo Carlini 
Track: Security


★ Session Summary ★
Building a totally secure boot system goes through establishing a full trust relationship among all the different involved software layers, to prevent execution of unauthorized software. Doing that by implementing a complete Chain Of Trust based on existing industry standards and open source software guarantees interoperability, stability and easy maintainability.
 This presentation will describe how this goal can be achieved on ARM systems from the very first firmware executed at power-on up to the Operating System execution by combining ARM Trusted Firmware with EDK2, two reference open-source implementations of the ARM Trusted Board Boot Requirement and UEFI Secure Boot specifications respectively.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-201/
Presentation: https://www.slideshare.net/linaroorg/secure-boot-on-arm-systems-building-a-complete-chain-of-trust-upon-existing-industry-standards-using-opensource-firmware-sfo17201
Video: 
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:14,650 --> 00:00:23,500
if a bunch of slides have only been 25

00:00:18,470 --> 00:00:26,599
minutes I would go quite quickly and

00:00:23,500 --> 00:00:30,880
leave any questions he Fanny again the

00:00:26,599 --> 00:00:30,880
presentation or weekend

00:01:00,680 --> 00:01:05,690
okay so I'm not the captain I'm the

00:01:03,680 --> 00:01:09,950
software technology manager would be an

00:01:05,690 --> 00:01:13,000
arm for the Fierman boot UEFI and

00:01:09,950 --> 00:01:16,220
recently system guidance

00:01:13,000 --> 00:01:19,880
so what I'm going to present today is a

00:01:16,220 --> 00:01:23,600
quick journey about the secure boot

00:01:19,880 --> 00:01:28,370
story within arm so talking about

00:01:23,600 --> 00:01:31,310
specifically we are trusted organs it's

00:01:28,370 --> 00:01:33,590
public infrastructure it's chain of

00:01:31,310 --> 00:01:38,000
trust and how the untrusted filmer

00:01:33,590 --> 00:01:41,240
implements is specification and then we

00:01:38,000 --> 00:01:43,729
move to combine site with the UEFI

00:01:41,240 --> 00:01:46,580
secure boot so explaining which are the

00:01:43,729 --> 00:01:49,670
differences and how to combine this use

00:01:46,580 --> 00:01:51,740
v we open source software presentations

00:01:49,670 --> 00:01:55,340
which is basically a complete change

00:01:51,740 --> 00:01:57,950
process then I will also mention very

00:01:55,340 --> 00:02:01,630
briefly some other solutions like

00:01:57,950 --> 00:02:01,630
Android pays for the good base

00:02:01,660 --> 00:02:10,520
hello sure the next plans and feature

00:02:05,540 --> 00:02:12,560
sets from an hour perspective so very

00:02:10,520 --> 00:02:15,860
quick introduction what is secure boot

00:02:12,560 --> 00:02:18,500
well it's all about trust it's not about

00:02:15,860 --> 00:02:20,960
creating and maintaining a chain of

00:02:18,500 --> 00:02:24,200
trust among the different software

00:02:20,960 --> 00:02:26,780
layers that are executed on a system so

00:02:24,200 --> 00:02:30,140
as George pointed out yesterday during

00:02:26,780 --> 00:02:32,560
the keynote if we implement a secure

00:02:30,140 --> 00:02:35,630
food based on industry standards

00:02:32,560 --> 00:02:38,540
existing specs and specifically open

00:02:35,630 --> 00:02:41,180
source software we can achieve basically

00:02:38,540 --> 00:02:43,850
food interoperability a faster

00:02:41,180 --> 00:02:47,900
integration like market adding an

00:02:43,850 --> 00:02:51,200
improved open source security leveraging

00:02:47,900 --> 00:02:53,440
the community airport so all the

00:02:51,200 --> 00:02:57,040
concepts that I'm going to explain

00:02:53,440 --> 00:03:00,050
especially for the arm trusted boot and

00:02:57,040 --> 00:03:03,290
partially for the UEFI boot are

00:03:00,050 --> 00:03:06,550
applicable on different market segments

00:03:03,290 --> 00:03:10,930
the first obvious one in the enterprise

00:03:06,550 --> 00:03:13,970
working where UEFI the number one choice

00:03:10,930 --> 00:03:17,320
then we can also make some thoughts

00:03:13,970 --> 00:03:20,630
about the embedded and mobile find well

00:03:17,320 --> 00:03:23,630
trusted per boot can be married with

00:03:20,630 --> 00:03:29,390
some other concepts like don't buy food

00:03:23,630 --> 00:03:34,280
or but in general I will talk about on

00:03:29,390 --> 00:03:36,170
he gained a ecosystem this fall the

00:03:34,280 --> 00:03:38,989
focus of this competition is not about

00:03:36,170 --> 00:03:44,150
and/or our past devices it's just about

00:03:38,989 --> 00:03:47,900
a and a couple of well-known pictures

00:03:44,150 --> 00:03:50,010
from our website just to point out which

00:03:47,900 --> 00:03:54,090
is the focus of this

00:03:50,010 --> 00:03:57,060
so it just a few more layer with the EB

00:03:54,090 --> 00:04:00,870
r-spec with the software side spec and

00:03:57,060 --> 00:04:03,510
the unified area so having a unified

00:04:00,870 --> 00:04:06,810
command I'm not going to talk about

00:04:03,510 --> 00:04:10,590
hardware I'm not going to talk about how

00:04:06,810 --> 00:04:12,510
to engage and have a tamper-proof

00:04:10,590 --> 00:04:15,690
protected root of trust there is a

00:04:12,510 --> 00:04:17,430
separate section and some other are

00:04:15,690 --> 00:04:25,080
representatives that will talk about

00:04:17,430 --> 00:04:28,169
hardware part so what are our trusted

00:04:25,080 --> 00:04:30,380
boot DVD for friends and the UEFI secure

00:04:28,169 --> 00:04:34,020
boot so those are two distinct

00:04:30,380 --> 00:04:36,560
specifications that have defines

00:04:34,020 --> 00:04:40,380
different keys different certificates

00:04:36,560 --> 00:04:42,600
but basically they have the same goal so

00:04:40,380 --> 00:04:44,910
verifying the authenticity of the

00:04:42,600 --> 00:04:45,330
software images so building the chain of

00:04:44,910 --> 00:04:48,449
trust

00:04:45,330 --> 00:04:50,970
the only point is that they targets

00:04:48,449 --> 00:04:53,880
different put other images at different

00:04:50,970 --> 00:04:56,400
layers so on the right you can see an

00:04:53,880 --> 00:05:00,150
high level picture that will be going to

00:04:56,400 --> 00:05:04,800
detail about this feature but so on TVB

00:05:00,150 --> 00:05:07,110
base response from the so called pa1 so

00:05:04,800 --> 00:05:10,410
the very first film are executed after

00:05:07,110 --> 00:05:13,530
power on reset up to the beautiful free

00:05:10,410 --> 00:05:16,620
so the normal world to drop down while

00:05:13,530 --> 00:05:19,800
the UEFI secure boot starts from there

00:05:16,620 --> 00:05:22,229
and it arrives to validate in the open

00:05:19,800 --> 00:05:24,510
source image so these are the boundaries

00:05:22,229 --> 00:05:27,180
this video that you specs and

00:05:24,510 --> 00:05:29,190
implementations so if we try to combine

00:05:27,180 --> 00:05:31,260
them together with energy in the food

00:05:29,190 --> 00:05:34,580
chain of trust from the very first film

00:05:31,260 --> 00:05:34,580
or up to the US

00:05:36,060 --> 00:05:45,600
so what is on TV so I'm DVD is based on

00:05:40,320 --> 00:05:49,590
couple sets if ye a salient video that

00:05:45,600 --> 00:05:52,440
are part of DPS AVR test sex with from

00:05:49,590 --> 00:05:55,590
arm so the base system architecture or

00:05:52,440 --> 00:05:58,110
hardware requirements and the board boot

00:05:55,590 --> 00:06:00,560
requirements for the software here for

00:05:58,110 --> 00:06:03,300
apartments they are available

00:06:00,560 --> 00:06:07,890
six-cylinder engage but we are working

00:06:03,300 --> 00:06:10,169
on it just a few more addition is

00:06:07,890 --> 00:06:13,310
specifically based on the video apply

00:06:10,169 --> 00:06:17,310
inspector and again we are working

00:06:13,310 --> 00:06:20,850
internally to revise respect and maybe

00:06:17,310 --> 00:06:22,830
provides a server-side specification if

00:06:20,850 --> 00:06:26,880
you are interested in we can catch up

00:06:22,830 --> 00:06:28,919
later on so how did he is what about

00:06:26,880 --> 00:06:32,760
creating a chain of trust from the very

00:06:28,919 --> 00:06:37,020
first from l1 l1 up to the l3 fees of

00:06:32,760 --> 00:06:39,870
the normal world via one quick news we

00:06:37,020 --> 00:06:43,610
are discussing on our server I see a new

00:06:39,870 --> 00:06:47,130
change request then you 1.1 SPDR spec

00:06:43,610 --> 00:06:50,760
that will basically extend the concept

00:06:47,130 --> 00:06:52,830
of secure boot my main team at leasts

00:06:50,760 --> 00:06:55,890
the presence of a complete cascade

00:06:52,830 --> 00:06:58,229
internal process we would not mandate

00:06:55,890 --> 00:07:01,050
any specific implementation that's not

00:06:58,229 --> 00:07:04,290
the purpose we are discussing at least

00:07:01,050 --> 00:07:06,240
to have a complete chain of trust from

00:07:04,290 --> 00:07:08,479
the very first film are after the normal

00:07:06,240 --> 00:07:08,479
world

00:07:08,960 --> 00:07:14,040
TV and ultra secure implementation

00:07:11,940 --> 00:07:17,370
provide a reference example and

00:07:14,040 --> 00:07:20,550
reference software for achieving this

00:07:17,370 --> 00:07:24,240
goal but as I said other third party

00:07:20,550 --> 00:07:26,810
solution will be anyway allowed on 40 as

00:07:24,240 --> 00:07:26,810
video

00:07:27,990 --> 00:07:35,469
so the details on how the EPB defines

00:07:32,560 --> 00:07:37,389
the public infrastructure so it starts

00:07:35,469 --> 00:07:40,870
with defining to envisage a trusted

00:07:37,389 --> 00:07:45,310
components and hardware protectant root

00:07:40,870 --> 00:07:48,090
of trust was public part the public key

00:07:45,310 --> 00:07:51,719
is stored on some trusted registers and

00:07:48,090 --> 00:07:54,610
the real one that is supposed to be

00:07:51,719 --> 00:07:58,569
trusted because again protected by

00:07:54,610 --> 00:08:02,849
hardware then every subsequent yellow

00:07:58,569 --> 00:08:06,490
may be a pretext image we come with two

00:08:02,849 --> 00:08:09,639
certificates a key certificate and the

00:08:06,490 --> 00:08:12,419
content circuit the key certificate

00:08:09,639 --> 00:08:16,569
basically holds the public key

00:08:12,419 --> 00:08:20,199
corresponding to that specific ELP X

00:08:16,569 --> 00:08:23,139
page that will be used to validate the

00:08:20,199 --> 00:08:26,740
content certificate and the content

00:08:23,139 --> 00:08:31,599
certificate will hold themselves the

00:08:26,740 --> 00:08:34,360
hash of dl3 X image the Descent checked

00:08:31,599 --> 00:08:37,529
against the hash of the provided page to

00:08:34,360 --> 00:08:40,209
verify the authenticity of the image

00:08:37,529 --> 00:08:42,789
turned around to keepers that are

00:08:40,209 --> 00:08:45,630
defined we will see the more in detail

00:08:42,789 --> 00:08:49,839
in the next size a trusted worki and

00:08:45,630 --> 00:08:52,660
normal work repair all these keys and

00:08:49,839 --> 00:08:56,620
hashes are included as extensions

00:08:52,660 --> 00:08:58,990
asunder x.509 certificates certificates

00:08:56,620 --> 00:09:03,040
are signed there is no editor or a

00:08:58,990 --> 00:09:05,890
proper CA because basically we are

00:09:03,040 --> 00:09:09,190
building the we are establishing the

00:09:05,890 --> 00:09:11,500
check not trust by refining the content

00:09:09,190 --> 00:09:14,329
of these certificates and not by

00:09:11,500 --> 00:09:17,989
verifying the polity of the

00:09:14,329 --> 00:09:22,279
of a specific certificate so there is no

00:09:17,989 --> 00:09:24,079
need for money CA this is just an

00:09:22,279 --> 00:09:27,439
explanation for offline reading I'm

00:09:24,079 --> 00:09:30,049
gonna skip this one so the big picture

00:09:27,439 --> 00:09:32,629
of the different route water stages on

00:09:30,049 --> 00:09:35,299
the Left we see it with the trusted

00:09:32,629 --> 00:09:38,509
components in the middle the secular

00:09:35,299 --> 00:09:43,999
world images and on the right the normal

00:09:38,509 --> 00:09:45,920
world which water safety every free from

00:09:43,999 --> 00:09:50,779
a key ownership perspective

00:09:45,920 --> 00:09:52,939
DPD r-spec foresees basically that the

00:09:50,779 --> 00:09:57,290
root of trust public key and the trusted

00:09:52,939 --> 00:09:59,839
key surfaces are owned by um why the

00:09:57,290 --> 00:10:03,230
other key certificates are there because

00:09:59,839 --> 00:10:05,569
they allow for delegating the signing

00:10:03,230 --> 00:10:08,389
authority to other parties for example

00:10:05,569 --> 00:10:11,949
the SOC vendor be trusted or a friend or

00:10:08,389 --> 00:10:15,049
or the rich operating system that works

00:10:11,949 --> 00:10:18,519
so that's why there are all these kind

00:10:15,049 --> 00:10:18,519
of different key certificates

00:10:18,930 --> 00:10:25,959
so now let's see from a high legal point

00:10:23,889 --> 00:10:28,569
of view but which are the basic steps

00:10:25,959 --> 00:10:32,440
for providing the authentication from be

00:10:28,569 --> 00:10:34,839
a 1 up to be an 3 3 every major has a

00:10:32,440 --> 00:10:37,089
color there is an agenda that explains

00:10:34,839 --> 00:10:40,360
the execution level in which the

00:10:37,089 --> 00:10:43,810
Sweetwater staged execute so over on

00:10:40,360 --> 00:10:49,540
here one is executed the first thing

00:10:43,810 --> 00:10:51,850
that it does is it checks the blue light

00:10:49,540 --> 00:10:56,350
blue certificate that is the pier to

00:10:51,850 --> 00:10:58,389
compensate and it checks the validity of

00:10:56,350 --> 00:11:01,930
the root of trust public key that is

00:10:58,389 --> 00:11:05,019
enclosed in that certificate and then

00:11:01,930 --> 00:11:07,060
using this root of trust for appeal it

00:11:05,019 --> 00:11:10,269
basically verify the authenticity of

00:11:07,060 --> 00:11:12,940
this content certificates in extract it

00:11:10,269 --> 00:11:18,100
hash of the year to image and it

00:11:12,940 --> 00:11:24,160
verifies dat open TC authenticity by

00:11:18,100 --> 00:11:27,209
checking in session so this is the only

00:11:24,160 --> 00:11:31,480
code that is executed at Ian free

00:11:27,209 --> 00:11:34,990
afternoon then the execution is passed

00:11:31,480 --> 00:11:38,230
to be R - that does not execute any more

00:11:34,990 --> 00:11:40,360
on at theory in execute as superior one

00:11:38,230 --> 00:11:43,180
so this is done for minimizing the code

00:11:40,360 --> 00:11:47,259
that is executed at year 3 from 1980

00:11:43,180 --> 00:11:51,610
point of view so now we have to execute

00:11:47,259 --> 00:11:53,500
and its job is to verify the

00:11:51,610 --> 00:11:57,579
authenticity of all these subsequent

00:11:53,500 --> 00:12:00,610
pages and how it does it is again it's

00:11:57,579 --> 00:12:02,889
verifies the validity of the root of

00:12:00,610 --> 00:12:06,160
trust of the key that is enclosed in the

00:12:02,889 --> 00:12:08,709
top level 3 key certificate that is

00:12:06,160 --> 00:12:09,959
called by the spec trusted key

00:12:08,709 --> 00:12:13,000
certificate

00:12:09,959 --> 00:12:15,970
so using this root of trust public key

00:12:13,000 --> 00:12:18,399
it basically verifies the certificate

00:12:15,970 --> 00:12:19,300
and extracts the human close are the

00:12:18,399 --> 00:12:22,240
kids that are

00:12:19,300 --> 00:12:26,529
that were publicy a normal world on the

00:12:22,240 --> 00:12:33,310
key as I said these are still old by the

00:12:26,529 --> 00:12:38,730
OEM from spec point of view so then for

00:12:33,310 --> 00:12:41,140
each year 3x image EF - first of all

00:12:38,730 --> 00:12:44,019
verify the authenticity of the key

00:12:41,140 --> 00:12:49,029
certificate that is corresponding to

00:12:44,019 --> 00:12:57,190
that the m3x image using the trusted

00:12:49,029 --> 00:13:02,050
world public key that it has or then it

00:12:57,190 --> 00:13:05,200
reads the enclosed en 3x public key that

00:13:02,050 --> 00:13:08,709
is used to verify the authenticity of

00:13:05,200 --> 00:13:15,390
the underlying light blue content

00:13:08,709 --> 00:13:20,430
certificate and the content certificates

00:13:15,390 --> 00:13:24,310
holds the corresponding BL 3x hash of

00:13:20,430 --> 00:13:28,570
year 3x image so then the final step is

00:13:24,310 --> 00:13:33,190
performing the Hajj check between the

00:13:28,570 --> 00:13:35,730
l3x provided image and year 3x into the

00:13:33,190 --> 00:13:35,730
certificate

00:13:37,290 --> 00:13:45,150
so by doing so all the place reacts

00:13:39,660 --> 00:13:48,810
images are verified and then it's a game

00:13:45,150 --> 00:13:52,470
EMP responsibility running at Syria one

00:13:48,810 --> 00:13:55,830
to verify the final via three three

00:13:52,470 --> 00:13:57,810
normal world image there are separate

00:13:55,830 --> 00:14:03,690
set of certificates also in this case

00:13:57,810 --> 00:14:06,540
again for allowing separation or Tod

00:14:03,690 --> 00:14:09,570
signing Authority in this case to an

00:14:06,540 --> 00:14:12,810
operating system vendor so if these

00:14:09,570 --> 00:14:14,490
things we use the normal world key that

00:14:12,810 --> 00:14:20,880
is used to verify

00:14:14,490 --> 00:14:24,140
pl3 free key certificate that holds we

00:14:20,880 --> 00:14:28,260
are free free public key used to verify

00:14:24,140 --> 00:14:32,760
content certificates and then very final

00:14:28,260 --> 00:14:35,810
seven-year free free image is validated

00:14:32,760 --> 00:14:35,810
against in session

00:14:38,110 --> 00:14:45,880
that seems from a DVD perspective the

00:14:42,130 --> 00:14:49,990
execution is then passed through the

00:14:45,880 --> 00:14:56,800
various stages yes 3 1 B and 3 2 and so

00:14:49,990 --> 00:15:00,370
forth till here briefly this is a big

00:14:56,800 --> 00:15:02,350
picture of this banker now let's have a

00:15:00,370 --> 00:15:05,290
look at the trusted film and by edition

00:15:02,350 --> 00:15:08,560
trusted humor implements everything of

00:15:05,290 --> 00:15:12,370
DTM spec including the non-volatile

00:15:08,560 --> 00:15:14,560
counters that I didn't mention but these

00:15:12,370 --> 00:15:17,170
are used for protecting against Robeck

00:15:14,560 --> 00:15:19,300
attacks the only thing that is dozen

00:15:17,170 --> 00:15:22,180
people and yet are the trusted debug

00:15:19,300 --> 00:15:25,540
certification I've used basically to put

00:15:22,180 --> 00:15:31,930
the system in a debug mode but if

00:15:25,540 --> 00:15:35,860
someone is interested in the trusted

00:15:31,930 --> 00:15:39,790
port works perfectly on both AR 64 and

00:15:35,860 --> 00:15:42,370
age 32 on the upstream in town code and

00:15:39,790 --> 00:15:45,760
we have a reference example on you know

00:15:42,370 --> 00:15:50,410
identity platforms of the TV DVD running

00:15:45,760 --> 00:15:53,200
at age 32 as well I am NOT going through

00:15:50,410 --> 00:15:56,670
all the built flags you can go have a

00:15:53,200 --> 00:16:01,660
look at the user guide on github

00:15:56,670 --> 00:16:04,329
another big news below involved so in

00:16:01,660 --> 00:16:07,110
the last release of upstream since few

00:16:04,329 --> 00:16:10,420
months there is an integration of the

00:16:07,110 --> 00:16:13,329
trust per boat with our trust own crypto

00:16:10,420 --> 00:16:17,290
sell product specifically ECC 712

00:16:13,329 --> 00:16:20,740
product in order to take advantage of a

00:16:17,290 --> 00:16:25,620
hundred of trust and the hardware

00:16:20,740 --> 00:16:25,620
acceleration engines 435 images

00:16:27,080 --> 00:16:36,500
so this is all about TV now a quick look

00:16:30,420 --> 00:16:39,660
at you fi secure boot so UEFI defines

00:16:36,500 --> 00:16:42,300
basically an ownership model for the

00:16:39,660 --> 00:16:45,240
platform's based on three main actors

00:16:42,300 --> 00:16:47,660
the platform owner that is usually the

00:16:45,240 --> 00:16:50,940
ODN um or the end-user

00:16:47,660 --> 00:16:54,779
platform fear work is whatever unify

00:16:50,940 --> 00:16:57,600
behind fear work and the OS or third

00:16:54,779 --> 00:17:04,110
parties of the vendors in brief software

00:16:57,600 --> 00:17:08,130
vendors so it defines an own set of key

00:17:04,110 --> 00:17:10,589
certificates and so forth and a

00:17:08,130 --> 00:17:12,750
signature database so a database of

00:17:10,589 --> 00:17:16,470
light and blacklist signatures of

00:17:12,750 --> 00:17:19,800
allowed and forbidden images so using

00:17:16,470 --> 00:17:22,500
this framework the femur the UEFI fumer

00:17:19,800 --> 00:17:25,589
running and PNP free is simple to

00:17:22,500 --> 00:17:29,970
authenticate on the UEFI acceptance and

00:17:25,589 --> 00:17:33,059
the risotto way prove ownership model to

00:17:29,970 --> 00:17:41,130
update specific database from trusted

00:17:33,059 --> 00:17:43,910
sources very quickly again so UEFI

00:17:41,130 --> 00:17:46,980
secure which defines two different keys

00:17:43,910 --> 00:17:51,360
platform key owned by the platform owner

00:17:46,980 --> 00:17:55,050
and key exchange is the main point of

00:17:51,360 --> 00:17:57,360
this slide is that the not from key

00:17:55,050 --> 00:18:00,059
owned by truck from owner is the real

00:17:57,360 --> 00:18:03,300
root of trust of the UEFI secure boot

00:18:00,059 --> 00:18:06,330
because using the private part of the

00:18:03,300 --> 00:18:09,690
platform key you can enroll and the

00:18:06,330 --> 00:18:10,440
point to the film are all the public is

00:18:09,690 --> 00:18:12,150
either

00:18:10,440 --> 00:18:17,640
the platform key and the key

00:18:12,150 --> 00:18:21,000
he's obviously Otto's key is based on

00:18:17,640 --> 00:18:27,930
the ufi spec must be on tamper proof

00:18:21,000 --> 00:18:31,380
storage hardware protected and as I said

00:18:27,930 --> 00:18:34,260
the ownership model allows them the

00:18:31,380 --> 00:18:37,130
platform owner and software vendors to

00:18:34,260 --> 00:18:40,920
update this database of the signatures

00:18:37,130 --> 00:18:44,910
with white or black lists through the

00:18:40,920 --> 00:18:48,810
UEFI runtime Safari own API from trusted

00:18:44,910 --> 00:18:50,520
sources so using the puppet part the

00:18:48,810 --> 00:18:54,080
public portions of the key that have

00:18:50,520 --> 00:18:54,080
been deployed into the sphere

00:18:57,630 --> 00:19:06,150
and then very obviously as one would

00:19:02,400 --> 00:19:10,080
expect these signatures are used to

00:19:06,150 --> 00:19:14,400
verify and to run or prevent execution

00:19:10,080 --> 00:19:16,320
of specific ufi acceptable so all the

00:19:14,400 --> 00:19:18,720
ages that comes with a forbidden

00:19:16,320 --> 00:19:21,990
signature or with an unknown signature

00:19:18,720 --> 00:19:27,299
in light gray are not allowed to be

00:19:21,990 --> 00:19:29,220
executed why the all the images that

00:19:27,299 --> 00:19:33,270
comes with the grain signatures are

00:19:29,220 --> 00:19:35,760
obviously executed so what is the

00:19:33,270 --> 00:19:38,010
citizen arm what the citizen arm is

00:19:35,760 --> 00:19:40,500
exactly the same at the moment as all

00:19:38,010 --> 00:19:44,880
explained one and a half year ago in

00:19:40,500 --> 00:19:49,140
Ithaca Las Vegas 2016 so the outstanding

00:19:44,880 --> 00:19:53,909
problem was okay how can we update the

00:19:49,140 --> 00:19:56,730
variables through the secure world so

00:19:53,909 --> 00:19:59,429
now one of the half year later we can

00:19:56,730 --> 00:20:01,799
provide a mechanism for doing that so we

00:19:59,429 --> 00:20:06,780
have and which I will show you in the

00:20:01,799 --> 00:20:10,049
next couple slides a way to from a spec

00:20:06,780 --> 00:20:14,150
perspective implement a secure border

00:20:10,049 --> 00:20:14,150
for access and update the UEFI variables

00:20:16,730 --> 00:20:21,360
so this is a picture that basically puts

00:20:19,799 --> 00:20:23,280
all together the pieces that we saw

00:20:21,360 --> 00:20:25,380
before I'm not going to spend too much

00:20:23,280 --> 00:20:29,220
time so all the different patroller

00:20:25,380 --> 00:20:32,429
stages are verified either by DT PD spec

00:20:29,220 --> 00:20:35,580
and presentation and subsequently from

00:20:32,429 --> 00:20:38,490
the UEFI PMR spec but here is the

00:20:35,580 --> 00:20:40,890
picture that I would like to lend to so

00:20:38,490 --> 00:20:44,309
how to access secure variable through

00:20:40,890 --> 00:20:45,780
the secure world so as promised I'm not

00:20:44,309 --> 00:20:48,720
going to talk about hardware

00:20:45,780 --> 00:20:51,390
so I suppose just that the keys are

00:20:48,720 --> 00:20:56,490
stored in some sort of sexual storage

00:20:51,390 --> 00:20:58,950
hardware protected but how can we access

00:20:56,490 --> 00:21:02,520
those keys and update them from the

00:20:58,950 --> 00:21:04,980
normal world so then the OS running in a

00:21:02,520 --> 00:21:08,880
normal world will call as usual the

00:21:04,980 --> 00:21:12,570
runtime set variable API that we go into

00:21:08,880 --> 00:21:16,020
the femur and then we pay implementation

00:21:12,570 --> 00:21:18,750
in the humor of the r-mn interface we

00:21:16,020 --> 00:21:20,220
can go down into the trusted film world

00:21:18,750 --> 00:21:24,030
running at vf-31

00:21:20,220 --> 00:21:27,570
and here is the new parts so in orange

00:21:24,030 --> 00:21:30,260
we receive secure partition manager it

00:21:27,570 --> 00:21:33,570
is a functional block that basically

00:21:30,260 --> 00:21:38,700
instantiate manages and deletes secure

00:21:33,570 --> 00:21:40,710
partitions running insecure en 0 please

00:21:38,700 --> 00:21:43,890
know that this is the framework that is

00:21:40,710 --> 00:21:46,110
in common with the wrath story that

00:21:43,890 --> 00:21:48,540
someone else will explain during this

00:21:46,110 --> 00:21:52,350
connect so this very same exact

00:21:48,540 --> 00:21:54,990
framework Russ is one use case secure

00:21:52,350 --> 00:21:57,799
parable access is another use case using

00:21:54,990 --> 00:22:00,600
the same functional pieces or together

00:21:57,799 --> 00:22:03,179
so the secure partition manager

00:22:00,600 --> 00:22:06,029
me everyone will root this request and

00:22:03,179 --> 00:22:08,519
we least fancy eight a secure partition

00:22:06,029 --> 00:22:11,730
that then will handle and we'll have a

00:22:08,519 --> 00:22:19,470
driver to access the variable storage

00:22:11,730 --> 00:22:21,149
somewhere comfortable so the body

00:22:19,470 --> 00:22:24,600
species are currently in development

00:22:21,149 --> 00:22:27,120
within art and there will be obtained

00:22:24,600 --> 00:22:29,309
very soon and we will also work

00:22:27,120 --> 00:22:32,130
internally to provide a reference

00:22:29,309 --> 00:22:34,409
example of all the boot row the second

00:22:32,130 --> 00:22:37,110
control including secular variable

00:22:34,409 --> 00:22:40,799
access on one of our system guidance

00:22:37,110 --> 00:22:43,559
platform and we are going to assume also

00:22:40,799 --> 00:22:45,809
the support for is the storage system

00:22:43,559 --> 00:22:48,149
diagnose platform we bought the

00:22:45,809 --> 00:22:50,250
surrounding patches to medicate you to

00:22:48,149 --> 00:22:55,129
perform out of the fear one and so forth

00:22:50,250 --> 00:22:55,129
for implementing all this soul

00:22:58,810 --> 00:23:05,920
very very quickly just to mention other

00:23:02,860 --> 00:23:10,900
possible solution to implement verified

00:23:05,920 --> 00:23:15,520
boot well on the mobile client side UEFI

00:23:10,900 --> 00:23:17,140
is kind of nonsense to some extent so

00:23:15,520 --> 00:23:18,850
one droid has its own concept of

00:23:17,140 --> 00:23:21,900
verified boot you boot has its own

00:23:18,850 --> 00:23:24,460
concept all of them had concepts of

00:23:21,900 --> 00:23:29,110
chain of trust Hardware root of trust

00:23:24,460 --> 00:23:33,520
and so on a propagation delay valid

00:23:29,110 --> 00:23:35,020
points so what if we think of expanding

00:23:33,520 --> 00:23:38,050
the work that has been done by

00:23:35,020 --> 00:23:41,280
dismissing guys so putting UEFI

00:23:38,050 --> 00:23:44,110
inter-party boot what if we extend it

00:23:41,280 --> 00:23:46,470
trying to implement this set body

00:23:44,110 --> 00:23:51,250
product at very quality is on you good

00:23:46,470 --> 00:23:53,590
and maybe what if we try to plug him

00:23:51,250 --> 00:23:56,560
over a UEFI name on your boot or

00:23:53,590 --> 00:23:59,200
handling the key management so this will

00:23:56,560 --> 00:24:02,710
introduce a lot of problems that will be

00:23:59,200 --> 00:24:07,420
like to address especially I'll give

00:24:02,710 --> 00:24:09,460
advices but the end goal to be ideally

00:24:07,420 --> 00:24:11,800
to have a convergence of the embedded

00:24:09,460 --> 00:24:15,280
and enterprise security close and secure

00:24:11,800 --> 00:24:18,150
boot api's and these are suppose that we

00:24:15,280 --> 00:24:18,150
are doing internal

00:24:19,010 --> 00:24:25,680
last slide which are the plans so as I

00:24:23,010 --> 00:24:27,360
said we are working internally to

00:24:25,680 --> 00:24:31,380
implement and then open source a

00:24:27,360 --> 00:24:34,260
reference platform software well part of

00:24:31,380 --> 00:24:37,560
the different pieces in atmosphere war

00:24:34,260 --> 00:24:39,300
and vdk to also to provide a complete

00:24:37,560 --> 00:24:42,300
good part on the system guidance

00:24:39,300 --> 00:24:47,790
platform actually should be Brookes that

00:24:42,300 --> 00:24:52,050
the enterprise server platform in the

00:24:47,790 --> 00:24:53,940
future we are thinking of okay as I said

00:24:52,050 --> 00:24:58,560
it is giving a new boot based solution

00:24:53,940 --> 00:25:01,320
but also how to combine the favor update

00:24:58,560 --> 00:25:04,800
story so I'm just a fear one has its own

00:25:01,320 --> 00:25:07,290
to emigrate UEFI has recently defined

00:25:04,800 --> 00:25:09,990
the sign capsule update for secure page

00:25:07,290 --> 00:25:13,070
so how to combine the tools and have

00:25:09,990 --> 00:25:15,650
also a proper security running mechanism

00:25:13,070 --> 00:25:18,780
so these are all thoughts for the future

00:25:15,650 --> 00:25:21,090
on a specification perspective and I'm

00:25:18,780 --> 00:25:23,640
not specification guys are different are

00:25:21,090 --> 00:25:27,480
representatives here talking about spec

00:25:23,640 --> 00:25:30,840
but we are talking about reviving the

00:25:27,480 --> 00:25:33,980
TBR and putting some mentions in the

00:25:30,840 --> 00:25:37,650
SPDR and as I said the possibility for

00:25:33,980 --> 00:25:39,660
having a server-side TPS APR that we

00:25:37,650 --> 00:25:43,290
take care of so other concepts like the

00:25:39,660 --> 00:25:48,140
TPM ecr's and measure would the

00:25:43,290 --> 00:25:52,050
currently not covered by our specs and

00:25:48,140 --> 00:25:54,270
there is one outstanding question on the

00:25:52,050 --> 00:25:57,740
table so what is the proper level of

00:25:54,270 --> 00:26:00,750
standardization required by our on the

00:25:57,740 --> 00:26:02,920
previous I environments for the trusted

00:26:00,750 --> 00:26:05,710
or dual solution

00:26:02,920 --> 00:26:09,040
so we want still to allow for

00:26:05,710 --> 00:26:13,830
differentiation on the te lo but we also

00:26:09,040 --> 00:26:16,450
see a lot of security reports that sadly

00:26:13,830 --> 00:26:18,580
demonstrate house and flows

00:26:16,450 --> 00:26:23,260
implementation on commercial products

00:26:18,580 --> 00:26:26,200
allows for running arbitrary code at en3

00:26:23,260 --> 00:26:28,330
so compromising the entire trusted

00:26:26,200 --> 00:26:30,610
execution environment so and that's

00:26:28,330 --> 00:26:32,890
probably something we would like to

00:26:30,610 --> 00:26:36,940
avoid at least providing some guidance

00:26:32,890 --> 00:26:39,400
on the api's that could be implemented

00:26:36,940 --> 00:26:43,510
and work to implement those API is in

00:26:39,400 --> 00:26:45,460
which at which execution leaders but

00:26:43,510 --> 00:26:49,690
these are all controls so if you are

00:26:45,460 --> 00:26:52,390
interested in get in touch and that's it

00:26:49,690 --> 00:26:54,870
so I'm just appearing into that specific

00:26:52,390 --> 00:27:00,430
session for Hardware root or trust

00:26:54,870 --> 00:27:06,090
should be on Thursday I think that's it

00:27:00,430 --> 00:27:06,090
that's all any question

00:27:11,429 --> 00:27:19,360
Yeah right now here

00:27:13,910 --> 00:27:24,710
right now you're on your checks for any

00:27:19,360 --> 00:27:28,040
images only if we can have it well

00:27:24,710 --> 00:27:29,900
any leverage shot by 12 or each Mac and

00:27:28,040 --> 00:27:36,350
if you did

00:27:29,900 --> 00:27:39,559
and more types of validations support

00:27:36,350 --> 00:27:42,440
okay I don't have the answer for it

00:27:39,559 --> 00:27:45,830
so we can cooperate or maybe they can

00:27:42,440 --> 00:27:52,940
also like the microphone to dance at the

00:27:45,830 --> 00:27:56,090
technical skill attractive it's just

00:27:52,940 --> 00:27:59,860
following over the TV else taxes so if

00:27:56,090 --> 00:27:59,860
the TV else participated

00:28:00,980 --> 00:28:06,770
with certain color but there's no reason

00:28:02,960 --> 00:28:08,690
that pack or simply come to do that

00:28:06,770 --> 00:28:11,450
but we win on motivates to do that this

00:28:08,690 --> 00:28:14,120
is constant

00:28:11,450 --> 00:28:21,770
rather something really quite a

00:28:14,120 --> 00:28:24,070
notification Expo Line stations 100

00:28:21,770 --> 00:28:24,070
button

00:28:31,190 --> 00:28:38,920
and that's again comes to the

00:28:35,530 --> 00:28:41,600
justification just just took that back I

00:28:38,920 --> 00:28:44,360
guess that the step specification had a

00:28:41,600 --> 00:28:50,200
lot of design information as well as

00:28:44,360 --> 00:28:50,200
specification information so freedom

00:28:51,640 --> 00:28:59,510
it works but that's anyway a good moment

00:28:56,780 --> 00:29:03,050
for discussing any updates on that spec

00:28:59,510 --> 00:29:05,210
if you watch because as I said so we are

00:29:03,050 --> 00:29:08,720
picking up reviving and updating that

00:29:05,210 --> 00:29:12,350
spec that's becoming quite old and also

00:29:08,720 --> 00:29:17,000
providing their science so if you have

00:29:12,350 --> 00:29:18,350
any specific needs target we can discuss

00:29:17,000 --> 00:29:22,340
it and try to push it into this back

00:29:18,350 --> 00:29:25,040
after this lady's 2013 is there a new

00:29:22,340 --> 00:29:26,300
perspective tonight the latest spec I

00:29:25,040 --> 00:29:29,960
see for 2013

00:29:26,300 --> 00:29:36,260
no she's like these video that's kind of

00:29:29,960 --> 00:29:38,720
like this yeah oh no but a super spec

00:29:36,260 --> 00:29:42,010
basically it was it was just an

00:29:38,720 --> 00:29:45,020
experiment it has never been finalized

00:29:42,010 --> 00:29:47,270
properly so it would be basically to

00:29:45,020 --> 00:29:49,220
rewrite it from from scratch on

00:29:47,270 --> 00:29:49,840
beginning and we are working with the

00:29:49,220 --> 00:29:53,640
architecture

00:29:49,840 --> 00:29:53,640
to start the discussion

00:30:00,379 --> 00:30:03,919
and your livers

00:30:05,720 --> 00:30:10,430
I know what you're smiling secure

00:30:07,340 --> 00:30:12,650
partitioning there Google access you

00:30:10,430 --> 00:30:16,370
didn't have any that ball off to you or

00:30:12,650 --> 00:30:18,800
secure it's always in that picture plans

00:30:16,370 --> 00:30:24,910
to actually go do it without a mobile

00:30:18,800 --> 00:30:24,910
infrastructure good question yes so

00:30:25,180 --> 00:30:33,740
currently this model does not allow for

00:30:29,840 --> 00:30:35,510
a combination of different applications

00:30:33,740 --> 00:30:38,900
secure application to be run in the

00:30:35,510 --> 00:30:40,820
second word but so you cannot have in

00:30:38,900 --> 00:30:43,820
parallel running a trusted OS together

00:30:40,820 --> 00:30:45,950
with second partition at the moment but

00:30:43,820 --> 00:30:49,490
we are working for extending this model

00:30:45,950 --> 00:30:52,370
allowing for multiple secure partition

00:30:49,490 --> 00:30:56,290
to be run and depending on the use case

00:30:52,370 --> 00:30:59,120
you can have as well as as well as opt

00:30:56,290 --> 00:31:00,530
running in parallel with a second

00:30:59,120 --> 00:31:02,870
partition and then you will have to

00:31:00,530 --> 00:31:05,720
decide who is doing what to who is

00:31:02,870 --> 00:31:08,519
accessing the secretary who is not so

00:31:05,720 --> 00:31:12,259
those are in our plans

00:31:08,519 --> 00:31:12,259
yeah so for the early 2018

00:31:16,450 --> 00:31:22,570
why not allow with a simpler model of

00:31:18,940 --> 00:31:25,299
just loading opti abootman and making

00:31:22,570 --> 00:31:27,690
the secure verb variables of 'sister

00:31:25,299 --> 00:31:27,690
circles

00:31:29,220 --> 00:31:41,190
it's a good question so unify + opt on a

00:31:33,840 --> 00:31:44,250
silver surprise why wait I still wonder

00:31:41,190 --> 00:31:46,560
why we have to differentiate server as

00:31:44,250 --> 00:31:48,750
much let's put it this way we've had

00:31:46,560 --> 00:31:51,120
this infrastructure almost relief from

00:31:48,750 --> 00:31:56,490
the while free commenting the Russ

00:31:51,120 --> 00:31:59,610
program gracias case so you can end up

00:31:56,490 --> 00:32:03,630
having to secure partitions one that is

00:31:59,610 --> 00:32:06,510
handling the error thermal therapists

00:32:03,630 --> 00:32:08,430
are handling for trust away and another

00:32:06,510 --> 00:32:11,670
one Apollo that the remaining sector

00:32:08,430 --> 00:32:16,110
parkinsonian so there are I know that

00:32:11,670 --> 00:32:19,170
there are other playing other parallel

00:32:16,110 --> 00:32:24,170
developments norm that basically try to

00:32:19,170 --> 00:32:28,290
do the same with opt we have still to

00:32:24,170 --> 00:32:30,600
marry the two developments and decide

00:32:28,290 --> 00:32:32,460
what would be the best choice depending

00:32:30,600 --> 00:32:35,690
on the market again so we're putting

00:32:32,460 --> 00:32:41,360
this stuff on a server rather than

00:32:35,690 --> 00:32:41,360
mobile clients may need a solution

00:32:45,450 --> 00:32:48,409
your overtime

00:32:53,850 --> 00:33:00,780
[Applause]

00:32:55,810 --> 00:33:00,780

YouTube URL: https://www.youtube.com/watch?v=MZ0PpzKPM5Q


